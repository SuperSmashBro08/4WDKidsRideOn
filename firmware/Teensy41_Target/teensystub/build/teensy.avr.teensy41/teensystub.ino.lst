
C:\Users\johnw\AppData\Local\arduino\sketches\7A41F3B4C03617EFA892FC94CDC79164/teensystub.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
	if (dest == src) return;
	do {
		*dest++ = *src++;
	} while (dest < dest_end);
#else
	asm volatile(
60001400:	4281      	cmp	r1, r0
60001402:	d005      	beq.n	60001410 <memory_copy+0x10>
60001404:	f851 3b04 	ldr.w	r3, [r1], #4
60001408:	f840 3b04 	str.w	r3, [r0], #4
6000140c:	4282      	cmp	r2, r0
6000140e:	d8f9      	bhi.n	60001404 <memory_copy+0x4>
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	"2:					\n"
	: [dest] "+r" (dest), [src] "+r" (src) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001410:	4770      	bx	lr
60001412:	bf00      	nop

60001414 <memory_clear.constprop.0>:
#if 0
	while (dest < dest_end) {
		*dest++ = 0;
	}
#else
	asm volatile(
60001414:	4a04      	ldr	r2, [pc, #16]	; (60001428 <memory_clear.constprop.0+0x14>)
60001416:	4905      	ldr	r1, [pc, #20]	; (6000142c <memory_clear.constprop.0+0x18>)
60001418:	f04f 0300 	mov.w	r3, #0
6000141c:	f842 3b04 	str.w	r3, [r2], #4
60001420:	4291      	cmp	r1, r2
60001422:	d8fb      	bhi.n	6000141c <memory_clear.constprop.0+0x8>
	"1:	str.w	r3, [%[dest]], #4	\n"
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	: [dest] "+r" (dest) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001424:	4770      	bx	lr
60001426:	bf00      	nop
60001428:	20001ac0 	.word	0x20001ac0
6000142c:	20002260 	.word	0x20002260

60001430 <ResetHandler2>:
{
60001430:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	__asm__ volatile("dsb":::"memory");
60001434:	f3bf 8f4f 	dsb	sy
	asm volatile("nop");
60001438:	bf00      	nop
	asm volatile("nop");
6000143a:	bf00      	nop
	asm volatile("nop");
6000143c:	bf00      	nop
	asm volatile("nop");
6000143e:	bf00      	nop
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
60001440:	f000 f942 	bl	600016c8 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001444:	4b68      	ldr	r3, [pc, #416]	; (600015e8 <ResetHandler2+0x1b8>)
60001446:	2208      	movs	r2, #8
60001448:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	asm volatile("nop");
6000144c:	bf00      	nop
	asm volatile("nop");
6000144e:	bf00      	nop
	asm volatile("nop");
60001450:	bf00      	nop
	asm volatile("nop");
60001452:	bf00      	nop
	asm volatile("nop");
60001454:	bf00      	nop
	asm volatile("nop");
60001456:	bf00      	nop
	asm volatile("nop");
60001458:	bf00      	nop
	asm volatile("nop");
6000145a:	bf00      	nop
	asm volatile("nop");
6000145c:	bf00      	nop
	asm volatile("nop");
6000145e:	bf00      	nop
	asm volatile("nop");
60001460:	bf00      	nop
	asm volatile("nop");
60001462:	bf00      	nop
	asm volatile("nop");
60001464:	bf00      	nop
	asm volatile("nop");
60001466:	bf00      	nop
	asm volatile("nop");
60001468:	bf00      	nop
	asm volatile("nop");
6000146a:	bf00      	nop
	memory_copy(&_stext, &_stextload, &_etext);
6000146c:	4a5f      	ldr	r2, [pc, #380]	; (600015ec <ResetHandler2+0x1bc>)
6000146e:	4960      	ldr	r1, [pc, #384]	; (600015f0 <ResetHandler2+0x1c0>)
60001470:	4860      	ldr	r0, [pc, #384]	; (600015f4 <ResetHandler2+0x1c4>)
60001472:	f7ff ffc5 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001476:	4a60      	ldr	r2, [pc, #384]	; (600015f8 <ResetHandler2+0x1c8>)
60001478:	4960      	ldr	r1, [pc, #384]	; (600015fc <ResetHandler2+0x1cc>)
6000147a:	4861      	ldr	r0, [pc, #388]	; (60001600 <ResetHandler2+0x1d0>)
6000147c:	f7ff ffc0 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
60001480:	4c60      	ldr	r4, [pc, #384]	; (60001604 <ResetHandler2+0x1d4>)
60001482:	f7ff ffc7 	bl	60001414 <memory_clear.constprop.0>
	SCB_CPACR = 0x00F00000;
60001486:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
6000148a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000148e:	2300      	movs	r3, #0
60001490:	4a5d      	ldr	r2, [pc, #372]	; (60001608 <ResetHandler2+0x1d8>)
	SCB_CPACR = 0x00F00000;
60001492:	f8c1 0d88 	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001496:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
6000149a:	3301      	adds	r3, #1
6000149c:	2bb0      	cmp	r3, #176	; 0xb0
6000149e:	d1fa      	bne.n	60001496 <ResetHandler2+0x66>
600014a0:	4b5a      	ldr	r3, [pc, #360]	; (6000160c <ResetHandler2+0x1dc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600014a2:	2180      	movs	r1, #128	; 0x80
600014a4:	4a5a      	ldr	r2, [pc, #360]	; (60001610 <ResetHandler2+0x1e0>)
600014a6:	f803 1b01 	strb.w	r1, [r3], #1
600014aa:	4293      	cmp	r3, r2
600014ac:	d1fb      	bne.n	600014a6 <ResetHandler2+0x76>
	SCB_VTOR = (uint32_t)_VectorsRam;
600014ae:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014b2:	4e4d      	ldr	r6, [pc, #308]	; (600015e8 <ResetHandler2+0x1b8>)
600014b4:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014b8:	f8df b184 	ldr.w	fp, [pc, #388]	; 60001640 <ResetHandler2+0x210>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014bc:	f8df a184 	ldr.w	sl, [pc, #388]	; 60001644 <ResetHandler2+0x214>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014c0:	f04f 31ff 	mov.w	r1, #4294967295
	SCB_VTOR = (uint32_t)_VectorsRam;
600014c4:	f8c5 4d08 	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
600014c8:	2700      	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014ca:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014ce:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014d2:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014d6:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014da:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014de:	f8df 8168 	ldr.w	r8, [pc, #360]	; 60001648 <ResetHandler2+0x218>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014e6:	4a4b      	ldr	r2, [pc, #300]	; (60001614 <ResetHandler2+0x1e4>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e8:	f8c5 3d24 	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ec:	f8d8 301c 	ldr.w	r3, [r8, #28]
600014f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014f8:	f8c8 301c 	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014fc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
60001500:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
60001504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001508:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
6000150c:	6691      	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
6000150e:	66d1      	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001510:	6711      	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001512:	6751      	str	r1, [r2, #116]	; 0x74
	configure_cache();
60001514:	f000 f8e0 	bl	600016d8 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
60001518:	4b3f      	ldr	r3, [pc, #252]	; (60001618 <ResetHandler2+0x1e8>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000151a:	4940      	ldr	r1, [pc, #256]	; (6000161c <ResetHandler2+0x1ec>)
	_VectorsRam[14] = pendablesrvreq_isr;
6000151c:	63a3      	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
6000151e:	4b40      	ldr	r3, [pc, #256]	; (60001620 <ResetHandler2+0x1f0>)
60001520:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001522:	2363      	movs	r3, #99	; 0x63
60001524:	616b      	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001526:	2303      	movs	r3, #3
	SYST_CVR = 0;
60001528:	61af      	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000152a:	612b      	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000152c:	4b3d      	ldr	r3, [pc, #244]	; (60001624 <ResetHandler2+0x1f4>)
6000152e:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001532:	f8d5 3dfc 	ldr.w	r3, [r5, #3580]	; 0xdfc
60001536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000153a:	f8c5 3dfc 	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000153e:	4b3a      	ldr	r3, [pc, #232]	; (60001628 <ResetHandler2+0x1f8>)
60001540:	681a      	ldr	r2, [r3, #0]
60001542:	f042 0201 	orr.w	r2, r2, #1
60001546:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001548:	685b      	ldr	r3, [r3, #4]
6000154a:	600b      	str	r3, [r1, #0]
	usb_pll_start();	
6000154c:	f000 fb0e 	bl	60001b6c <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001550:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001554:	4835      	ldr	r0, [pc, #212]	; (6000162c <ResetHandler2+0x1fc>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001556:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000155a:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000155e:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001562:	f000 fc81 	bl	60001e68 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001566:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
6000156a:	4b31      	ldr	r3, [pc, #196]	; (60001630 <ResetHandler2+0x200>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000156c:	4a31      	ldr	r2, [pc, #196]	; (60001634 <ResetHandler2+0x204>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000156e:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
60001572:	f8c8 106c 	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001576:	601f      	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001578:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000157c:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001580:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001584:	f8c3 7138 	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001588:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000158a:	07db      	lsls	r3, r3, #31
6000158c:	d408      	bmi.n	600015a0 <ResetHandler2+0x170>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000158e:	f642 6315 	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
60001592:	4929      	ldr	r1, [pc, #164]	; (60001638 <ResetHandler2+0x208>)
60001594:	6551      	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001596:	6513      	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001598:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000159a:	f043 0301 	orr.w	r3, r3, #1
6000159e:	6393      	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600015a0:	4a24      	ldr	r2, [pc, #144]	; (60001634 <ResetHandler2+0x204>)
600015a2:	4c26      	ldr	r4, [pc, #152]	; (6000163c <ResetHandler2+0x20c>)
600015a4:	6893      	ldr	r3, [r2, #8]
600015a6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
600015aa:	6093      	str	r3, [r2, #8]
	configure_external_ram();
600015ac:	f000 f91c 	bl	600017e8 <configure_external_ram>
	analog_init();
600015b0:	f000 f860 	bl	60001674 <analog_init>
	pwm_init();
600015b4:	f000 fc60 	bl	60001e78 <__pwm_init_veneer>
	tempmon_init();
600015b8:	f000 fb06 	bl	60001bc8 <tempmon_init>
	startup_middle_hook();
600015bc:	f000 f886 	bl	600016cc <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
600015c0:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015c2:	2b13      	cmp	r3, #19
600015c4:	d9fc      	bls.n	600015c0 <ResetHandler2+0x190>
	usb_init();
600015c6:	f000 fb97 	bl	60001cf8 <usb_init>
600015ca:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015cc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015d0:	d3fb      	bcc.n	600015ca <ResetHandler2+0x19a>
	startup_debug_reset();
600015d2:	f000 f87f 	bl	600016d4 <startup_debug_reset>
	startup_late_hook();
600015d6:	f000 f87b 	bl	600016d0 <startup_default_late_hook>
	__libc_init_array();
600015da:	f000 fc39 	bl	60001e50 <____libc_init_array_veneer>
	main();
600015de:	f000 fc33 	bl	60001e48 <__main_veneer>
	while (1) asm("WFI");
600015e2:	bf30      	wfi
600015e4:	e7fd      	b.n	600015e2 <ResetHandler2+0x1b2>
600015e6:	bf00      	nop
600015e8:	400d8000 	.word	0x400d8000
600015ec:	00009340 	.word	0x00009340
600015f0:	60001f8c 	.word	0x60001f8c
600015f4:	00000000 	.word	0x00000000
600015f8:	20001ac0 	.word	0x20001ac0
600015fc:	6000b2d0 	.word	0x6000b2d0
60001600:	20000000 	.word	0x20000000
60001604:	20001800 	.word	0x20001800
60001608:	000014e5 	.word	0x000014e5
6000160c:	e000e400 	.word	0xe000e400
60001610:	e000e4a0 	.word	0xe000e4a0
60001614:	400ac000 	.word	0x400ac000
60001618:	0000290d 	.word	0x0000290d
6000161c:	200021f4 	.word	0x200021f4
60001620:	00002911 	.word	0x00002911
60001624:	20200000 	.word	0x20200000
60001628:	e0001000 	.word	0xe0001000
6000162c:	23c34600 	.word	0x23c34600
60001630:	40084000 	.word	0x40084000
60001634:	400d4000 	.word	0x400d4000
60001638:	56c00000 	.word	0x56c00000
6000163c:	200021f8 	.word	0x200021f8
60001640:	2018101b 	.word	0x2018101b
60001644:	13110d0c 	.word	0x13110d0c
60001648:	400fc000 	.word	0x400fc000

6000164c <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000164c:	4b05      	ldr	r3, [pc, #20]	; (60001664 <ResetHandler+0x18>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000164e:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001652:	4a05      	ldr	r2, [pc, #20]	; (60001668 <ResetHandler+0x1c>)
	IOMUXC_GPR_GPR16 = 0x00200007;
60001654:	4805      	ldr	r0, [pc, #20]	; (6000166c <ResetHandler+0x20>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001656:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001658:	6418      	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
6000165a:	4a05      	ldr	r2, [pc, #20]	; (60001670 <ResetHandler+0x24>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000165c:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
6000165e:	4695      	mov	sp, r2
	ResetHandler2();
60001660:	f7ff fee6 	bl	60001430 <ResetHandler2>
60001664:	400ac000 	.word	0x400ac000
60001668:	aaaaaaaf 	.word	0xaaaaaaaf
6000166c:	00200007 	.word	0x00200007
60001670:	20070000 	.word	0x20070000

60001674 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001674:	4b10      	ldr	r3, [pc, #64]	; (600016b8 <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001676:	20a0      	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001678:	4a10      	ldr	r2, [pc, #64]	; (600016bc <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000167a:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
6000167c:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
{
60001680:	b410      	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001682:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001684:	f240 6437 	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001688:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
6000168a:	f441 7140 	orr.w	r1, r1, #768	; 0x300
6000168e:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001690:	6454      	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001692:	6490      	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
60001694:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001696:	061b      	lsls	r3, r3, #24
60001698:	d4fc      	bmi.n	60001694 <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
6000169a:	4a09      	ldr	r2, [pc, #36]	; (600016c0 <analog_init+0x4c>)
6000169c:	f240 6137 	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600016a0:	23a0      	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600016a2:	6451      	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600016a4:	6493      	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
600016a6:	6c93      	ldr	r3, [r2, #72]	; 0x48
600016a8:	f013 0380 	ands.w	r3, r3, #128	; 0x80
600016ac:	d1fb      	bne.n	600016a6 <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
600016ae:	4a05      	ldr	r2, [pc, #20]	; (600016c4 <analog_init+0x50>)
600016b0:	7013      	strb	r3, [r2, #0]
}
600016b2:	f85d 4b04 	ldr.w	r4, [sp], #4
600016b6:	4770      	bx	lr
600016b8:	400fc000 	.word	0x400fc000
600016bc:	400c4000 	.word	0x400c4000
600016c0:	400c8000 	.word	0x400c8000
600016c4:	2000221f 	.word	0x2000221f

600016c8 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
600016c8:	4770      	bx	lr
600016ca:	bf00      	nop

600016cc <startup_default_middle_hook>:
600016cc:	4770      	bx	lr
600016ce:	bf00      	nop

600016d0 <startup_default_late_hook>:
600016d0:	4770      	bx	lr
600016d2:	bf00      	nop

600016d4 <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
600016d4:	bf00      	nop
600016d6:	4770      	bx	lr

600016d8 <configure_cache>:
{
600016d8:	b410      	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
600016da:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
600016de:	2100      	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600016e0:	2410      	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600016e2:	4831      	ldr	r0, [pc, #196]	; (600017a8 <configure_cache+0xd0>)
	SCB_MPU_CTRL = 0; // turn off MPU
600016e4:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600016e8:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600016ec:	2411      	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600016ee:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
600016f2:	482e      	ldr	r0, [pc, #184]	; (600017ac <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600016f4:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600016f8:	2412      	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
600016fa:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600016fe:	482c      	ldr	r0, [pc, #176]	; (600017b0 <configure_cache+0xd8>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001700:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001704:	4a2b      	ldr	r2, [pc, #172]	; (600017b4 <configure_cache+0xdc>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001706:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
6000170a:	4c2b      	ldr	r4, [pc, #172]	; (600017b8 <configure_cache+0xe0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
6000170c:	f042 0215 	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001710:	482a      	ldr	r0, [pc, #168]	; (600017bc <configure_cache+0xe4>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001712:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001716:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
6000171a:	4c29      	ldr	r4, [pc, #164]	; (600017c0 <configure_cache+0xe8>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
6000171c:	4829      	ldr	r0, [pc, #164]	; (600017c4 <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
6000171e:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001722:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001726:	4c28      	ldr	r4, [pc, #160]	; (600017c8 <configure_cache+0xf0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001728:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
6000172c:	4827      	ldr	r0, [pc, #156]	; (600017cc <configure_cache+0xf4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
6000172e:	4a28      	ldr	r2, [pc, #160]	; (600017d0 <configure_cache+0xf8>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001730:	f8c3 4da0 	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001734:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001738:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
6000173c:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001740:	4c24      	ldr	r4, [pc, #144]	; (600017d4 <configure_cache+0xfc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001742:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001744:	4824      	ldr	r0, [pc, #144]	; (600017d8 <configure_cache+0x100>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001746:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
6000174a:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
6000174e:	4a23      	ldr	r2, [pc, #140]	; (600017dc <configure_cache+0x104>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001750:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001754:	4c22      	ldr	r4, [pc, #136]	; (600017e0 <configure_cache+0x108>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001756:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
6000175a:	f102 6240 	add.w	r2, r2, #201326592	; 0xc000000
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000175e:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
60001762:	4820      	ldr	r0, [pc, #128]	; (600017e4 <configure_cache+0x10c>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001764:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
60001768:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
6000176a:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
6000176e:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	asm("nop"); // allow a few cycles for bus writes before enable MPU
60001772:	bf00      	nop
	asm("nop");
60001774:	bf00      	nop
	asm("nop");
60001776:	bf00      	nop
	asm("nop");
60001778:	bf00      	nop
	asm("nop");
6000177a:	bf00      	nop
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
6000177c:	2201      	movs	r2, #1
6000177e:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
60001782:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001786:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
6000178a:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
6000178e:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001792:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001796:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
}
6000179a:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000179e:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
600017a2:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
600017a6:	4770      	bx	lr
600017a8:	1000003f 	.word	0x1000003f
600017ac:	07080025 	.word	0x07080025
600017b0:	00100009 	.word	0x00100009
600017b4:	20002260 	.word	0x20002260
600017b8:	00200013 	.word	0x00200013
600017bc:	07020021 	.word	0x07020021
600017c0:	20000014 	.word	0x20000014
600017c4:	13080025 	.word	0x13080025
600017c8:	10000009 	.word	0x10000009
600017cc:	20200016 	.word	0x20200016
600017d0:	130b0027 	.word	0x130b0027
600017d4:	40000017 	.word	0x40000017
600017d8:	60000018 	.word	0x60000018
600017dc:	070b002f 	.word	0x070b002f
600017e0:	70000019 	.word	0x70000019
600017e4:	8000001a 	.word	0x8000001a

600017e8 <configure_external_ram>:
{
600017e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600017ea:	4bb8      	ldr	r3, [pc, #736]	; (60001acc <configure_external_ram+0x2e4>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
600017ec:	2218      	movs	r2, #24
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600017ee:	4eb8      	ldr	r6, [pc, #736]	; (60001ad0 <configure_external_ram+0x2e8>)
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600017f0:	2001      	movs	r0, #1
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
600017f2:	4fb8      	ldr	r7, [pc, #736]	; (60001ad4 <configure_external_ram+0x2ec>)
{
600017f4:	b083      	sub	sp, #12
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600017f6:	f8c3 625c 	str.w	r6, [r3, #604]	; 0x25c
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600017fa:	49b7      	ldr	r1, [pc, #732]	; (60001ad8 <configure_external_ram+0x2f0>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
600017fc:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001800:	4db6      	ldr	r5, [pc, #728]	; (60001adc <configure_external_ram+0x2f4>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001802:	f8c3 6264 	str.w	r6, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60001806:	f5a6 4630 	sub.w	r6, r6, #45056	; 0xb000
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
6000180a:	4cb5      	ldr	r4, [pc, #724]	; (60001ae0 <configure_external_ram+0x2f8>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
6000180c:	f8c3 6268 	str.w	r6, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001810:	f8c3 526c 	str.w	r5, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001814:	f8c3 5270 	str.w	r5, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001818:	f8c3 5274 	str.w	r5, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
6000181c:	f8c3 5278 	str.w	r5, [r3, #632]	; 0x278
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001820:	f248 750c 	movw	r5, #34572	; 0x870c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001824:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
60001826:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
60001828:	675a      	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
6000182a:	679a      	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
6000182c:	67da      	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
6000182e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
60001832:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
60001836:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
6000183a:	f8c1 032c 	str.w	r0, [r1, #812]	; 0x32c
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
6000183e:	4aa9      	ldr	r2, [pc, #676]	; (60001ae4 <configure_external_ram+0x2fc>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
60001840:	f8c1 0330 	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
60001844:	f8c1 0334 	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
60001848:	f8c1 0338 	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
6000184c:	f8c1 033c 	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
60001850:	f8c1 0350 	str.w	r0, [r1, #848]	; 0x350
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001854:	69a1      	ldr	r1, [r4, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001856:	4ba4      	ldr	r3, [pc, #656]	; (60001ae8 <configure_external_ram+0x300>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001858:	400a      	ands	r2, r1
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
6000185a:	48a4      	ldr	r0, [pc, #656]	; (60001aec <configure_external_ram+0x304>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000185c:	49a4      	ldr	r1, [pc, #656]	; (60001af0 <configure_external_ram+0x308>)
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
6000185e:	4313      	orrs	r3, r2
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001860:	4aa4      	ldr	r2, [pc, #656]	; (60001af4 <configure_external_ram+0x30c>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001862:	61a3      	str	r3, [r4, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60001864:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
60001868:	f043 030c 	orr.w	r3, r3, #12
6000186c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001870:	f04f 34ff 	mov.w	r4, #4294967295
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001874:	6803      	ldr	r3, [r0, #0]
60001876:	f043 0302 	orr.w	r3, r3, #2
6000187a:	6003      	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
6000187c:	6803      	ldr	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
6000187e:	402b      	ands	r3, r5
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001880:	f44f 5500 	mov.w	r5, #8192	; 0x2000
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001884:	431a      	orrs	r2, r3
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001886:	4b9c      	ldr	r3, [pc, #624]	; (60001af8 <configure_external_ram+0x310>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001888:	6002      	str	r2, [r0, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
6000188a:	6044      	str	r4, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000188c:	688a      	ldr	r2, [r1, #8]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000188e:	4c9b      	ldr	r4, [pc, #620]	; (60001afc <configure_external_ram+0x314>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001890:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001892:	4a9b      	ldr	r2, [pc, #620]	; (60001b00 <configure_external_ram+0x318>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001894:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001898:	6083      	str	r3, [r0, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
6000189a:	68c3      	ldr	r3, [r0, #12]
6000189c:	f023 0378 	bic.w	r3, r3, #120	; 0x78
600018a0:	60c3      	str	r3, [r0, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600018a2:	6a03      	ldr	r3, [r0, #32]
600018a4:	4013      	ands	r3, r2
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
600018a6:	4323      	orrs	r3, r4
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600018a8:	6203      	str	r3, [r0, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600018aa:	6a03      	ldr	r3, [r0, #32]
600018ac:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF2CR0 = mask;
600018ae:	4a95      	ldr	r2, [pc, #596]	; (60001b04 <configure_external_ram+0x31c>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
600018b0:	4323      	orrs	r3, r4
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
600018b2:	4c95      	ldr	r4, [pc, #596]	; (60001b08 <configure_external_ram+0x320>)
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600018b4:	6243      	str	r3, [r0, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
600018b6:	6282      	str	r2, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
600018b8:	62c2      	str	r2, [r0, #44]	; 0x2c
	FLEXSPI2_INTEN = 0;
600018ba:	2200      	movs	r2, #0
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
600018bc:	f8d1 30b8 	ldr.w	r3, [r1, #184]	; 0xb8
600018c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
600018c4:	f043 0301 	orr.w	r3, r3, #1
600018c8:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
600018cc:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600018d0:	498e      	ldr	r1, [pc, #568]	; (60001b0c <configure_external_ram+0x324>)
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
600018d2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
600018d6:	f043 0301 	orr.w	r3, r3, #1
600018da:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600018de:	f240 6305 	movw	r3, #1541	; 0x605
	FLEXSPI2_INTEN = 0;
600018e2:	6102      	str	r2, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
600018e4:	6605      	str	r5, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
600018e6:	6704      	str	r4, [r0, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600018e8:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
600018ec:	6645      	str	r5, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
600018ee:	6744      	str	r4, [r0, #116]	; 0x74
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600018f0:	2402      	movs	r4, #2
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600018f2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600018f6:	6803      	ldr	r3, [r0, #0]
600018f8:	f023 0302 	bic.w	r3, r3, #2
600018fc:	6003      	str	r3, [r0, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600018fe:	6181      	str	r1, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001900:	4b83      	ldr	r3, [pc, #524]	; (60001b10 <configure_external_ram+0x328>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001902:	4984      	ldr	r1, [pc, #528]	; (60001b14 <configure_external_ram+0x32c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001904:	61c4      	str	r4, [r0, #28]
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001906:	f843 2b04 	str.w	r2, [r3], #4
6000190a:	428b      	cmp	r3, r1
6000190c:	d1fb      	bne.n	60001906 <configure_external_ram+0x11e>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
6000190e:	4a77      	ldr	r2, [pc, #476]	; (60001aec <configure_external_ram+0x304>)
60001910:	6813      	ldr	r3, [r2, #0]
60001912:	f043 0301 	orr.w	r3, r3, #1
60001916:	6013      	str	r3, [r2, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
60001918:	6813      	ldr	r3, [r2, #0]
6000191a:	f013 0301 	ands.w	r3, r3, #1
6000191e:	d1fb      	bne.n	60001918 <configure_external_ram+0x130>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001920:	487a      	ldr	r0, [pc, #488]	; (60001b0c <configure_external_ram+0x324>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001922:	2102      	movs	r1, #2
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001924:	f240 64f5 	movw	r4, #1781	; 0x6f5
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001928:	6190      	str	r0, [r2, #24]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
6000192a:	f240 4099 	movw	r0, #1177	; 0x499
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
6000192e:	61d1      	str	r1, [r2, #28]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60001930:	f240 4166 	movw	r1, #1126	; 0x466
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001934:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001938:	f242 4401 	movw	r4, #9217	; 0x2401
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
6000193c:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60001940:	4975      	ldr	r1, [pc, #468]	; (60001b18 <configure_external_ram+0x330>)
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60001942:	f8c2 0220 	str.w	r0, [r2, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60001946:	f8c2 1230 	str.w	r1, [r2, #560]	; 0x230
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
6000194a:	f240 4135 	movw	r1, #1077	; 0x435
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
6000194e:	4873      	ldr	r0, [pc, #460]	; (60001b1c <configure_external_ram+0x334>)
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001950:	f8c2 4234 	str.w	r4, [r2, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001954:	f8c2 1240 	str.w	r1, [r2, #576]	; 0x240
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001958:	4c71      	ldr	r4, [pc, #452]	; (60001b20 <configure_external_ram+0x338>)
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
6000195a:	f8c2 0250 	str.w	r0, [r2, #592]	; 0x250
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
6000195e:	f242 2001 	movw	r0, #8705	; 0x2201
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001962:	4970      	ldr	r1, [pc, #448]	; (60001b24 <configure_external_ram+0x33c>)
60001964:	f8c2 1254 	str.w	r1, [r2, #596]	; 0x254
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001968:	2101      	movs	r1, #1
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
6000196a:	f8c2 4260 	str.w	r4, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
6000196e:	f8c2 0264 	str.w	r0, [r2, #612]	; 0x264
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001972:	485e      	ldr	r0, [pc, #376]	; (60001aec <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
60001974:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001978:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000197c:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001980:	6943      	ldr	r3, [r0, #20]
60001982:	07da      	lsls	r2, r3, #31
60001984:	d5fc      	bpl.n	60001980 <configure_external_ram+0x198>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001986:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001988:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000198a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000198e:	4957      	ldr	r1, [pc, #348]	; (60001aec <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001990:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
60001992:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001996:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000199a:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000199e:	694b      	ldr	r3, [r1, #20]
600019a0:	07db      	lsls	r3, r3, #31
600019a2:	d5fc      	bpl.n	6000199e <configure_external_ram+0x1b6>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019a4:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600019a6:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019a8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019ac:	4a4f      	ldr	r2, [pc, #316]	; (60001aec <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019ae:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
600019b0:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019b4:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019b8:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019bc:	6953      	ldr	r3, [r2, #20]
600019be:	07df      	lsls	r7, r3, #31
600019c0:	d5fc      	bpl.n	600019bc <configure_external_ram+0x1d4>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019c2:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600019c4:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600019c6:	4858      	ldr	r0, [pc, #352]	; (60001b28 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019c8:	4948      	ldr	r1, [pc, #288]	; (60001aec <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019ca:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
600019cc:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600019d0:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019d4:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019d8:	694b      	ldr	r3, [r1, #20]
600019da:	07de      	lsls	r6, r3, #31
600019dc:	d5fc      	bpl.n	600019d8 <configure_external_ram+0x1f0>
	uint32_t id = FLEXSPI2_RFDR0;
600019de:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
	if (flexspi2_psram_id(0) == 0x5D0D) {
600019e2:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600019e6:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
600019e8:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600019ea:	6148      	str	r0, [r1, #20]
	if (flexspi2_psram_id(0) == 0x5D0D) {
600019ec:	4293      	cmp	r3, r2
600019ee:	d165      	bne.n	60001abc <configure_external_ram+0x2d4>
	FLEXSPI2_IPCR0 = addr;
600019f0:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019f2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019f6:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019f8:	483c      	ldr	r0, [pc, #240]	; (60001aec <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
600019fa:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019fe:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a02:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a06:	6943      	ldr	r3, [r0, #20]
60001a08:	07dd      	lsls	r5, r3, #31
60001a0a:	d5fc      	bpl.n	60001a06 <configure_external_ram+0x21e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a0c:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001a0e:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a12:	2100      	movs	r1, #0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a14:	4a35      	ldr	r2, [pc, #212]	; (60001aec <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a16:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
60001a18:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a1c:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a20:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a24:	6953      	ldr	r3, [r2, #20]
60001a26:	07dc      	lsls	r4, r3, #31
60001a28:	d5fc      	bpl.n	60001a24 <configure_external_ram+0x23c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a2a:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001a2c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a30:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a34:	492d      	ldr	r1, [pc, #180]	; (60001aec <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a36:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001a38:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a3c:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a40:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a44:	694b      	ldr	r3, [r1, #20]
60001a46:	07d8      	lsls	r0, r3, #31
60001a48:	d5fc      	bpl.n	60001a44 <configure_external_ram+0x25c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a4a:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001a4c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a50:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a54:	4a25      	ldr	r2, [pc, #148]	; (60001aec <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a56:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60001a58:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a5c:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a60:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a64:	6953      	ldr	r3, [r2, #20]
60001a66:	07d9      	lsls	r1, r3, #31
60001a68:	d5fc      	bpl.n	60001a64 <configure_external_ram+0x27c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a6a:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001a6c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001a70:	482d      	ldr	r0, [pc, #180]	; (60001b28 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a72:	491e      	ldr	r1, [pc, #120]	; (60001aec <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a74:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001a76:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001a7a:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a7e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a82:	694b      	ldr	r3, [r1, #20]
60001a84:	07da      	lsls	r2, r3, #31
60001a86:	d5fc      	bpl.n	60001a82 <configure_external_ram+0x29a>
	uint32_t id = FLEXSPI2_RFDR0;
60001a88:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001a8c:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001a90:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60001a92:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001a94:	6148      	str	r0, [r1, #20]
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001a96:	4293      	cmp	r3, r2
60001a98:	d050      	beq.n	60001b3c <configure_external_ram+0x354>
60001a9a:	2508      	movs	r5, #8
60001a9c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
			external_psram_size * 0x100000 -
60001aa0:	4922      	ldr	r1, [pc, #136]	; (60001b2c <configure_external_ram+0x344>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001aa2:	2000      	movs	r0, #0
			external_psram_size * 0x100000 -
60001aa4:	4b22      	ldr	r3, [pc, #136]	; (60001b30 <configure_external_ram+0x348>)
			external_psram_size = 16;
60001aa6:	4a23      	ldr	r2, [pc, #140]	; (60001b34 <configure_external_ram+0x34c>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001aa8:	9000      	str	r0, [sp, #0]
			external_psram_size = 16;
60001aaa:	7015      	strb	r5, [r2, #0]
			external_psram_size * 0x100000 -
60001aac:	1a5a      	subs	r2, r3, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001aae:	2301      	movs	r3, #1
60001ab0:	4821      	ldr	r0, [pc, #132]	; (60001b38 <configure_external_ram+0x350>)
60001ab2:	4422      	add	r2, r4
60001ab4:	f000 f9c4 	bl	60001e40 <__sm_set_pool_veneer>
}
60001ab8:	b003      	add	sp, #12
60001aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001abc:	4b1e      	ldr	r3, [pc, #120]	; (60001b38 <configure_external_ram+0x350>)
60001abe:	2200      	movs	r2, #0
60001ac0:	e9c3 2200 	strd	r2, r2, [r3]
60001ac4:	e9c3 2202 	strd	r2, r2, [r3, #8]
}
60001ac8:	b003      	add	sp, #12
60001aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
60001acc:	401f8000 	.word	0x401f8000
60001ad0:	0001b0f9 	.word	0x0001b0f9
60001ad4:	000110f9 	.word	0x000110f9
60001ad8:	401f8400 	.word	0x401f8400
60001adc:	000170f9 	.word	0x000170f9
60001ae0:	400fc000 	.word	0x400fc000
60001ae4:	1ffffcff 	.word	0x1ffffcff
60001ae8:	a0000300 	.word	0xa0000300
60001aec:	402a4000 	.word	0x402a4000
60001af0:	402a8000 	.word	0x402a8000
60001af4:	ffff0012 	.word	0xffff0012
60001af8:	00f737ff 	.word	0x00f737ff
60001afc:	80000040 	.word	0x80000040
60001b00:	7cf0ff00 	.word	0x7cf0ff00
60001b04:	830f00ff 	.word	0x830f00ff
60001b08:	00020063 	.word	0x00020063
60001b0c:	5af05af0 	.word	0x5af05af0
60001b10:	402a4200 	.word	0x402a4200
60001b14:	402a4300 	.word	0x402a4300
60001b18:	3018049f 	.word	0x3018049f
60001b1c:	0a1806eb 	.word	0x0a1806eb
60001b20:	0a180638 	.word	0x0a180638
60001b24:	26013206 	.word	0x26013206
60001b28:	00030004 	.word	0x00030004
60001b2c:	70000000 	.word	0x70000000
60001b30:	70000000 	.word	0x70000000
60001b34:	20002220 	.word	0x20002220
60001b38:	20002180 	.word	0x20002180
	FLEXSPI2_IPCR0 = addr;
60001b3c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b40:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b44:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b46:	4808      	ldr	r0, [pc, #32]	; (60001b68 <configure_external_ram+0x380>)
	FLEXSPI2_IPCR0 = addr;
60001b48:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b4c:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b50:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b54:	6943      	ldr	r3, [r0, #20]
60001b56:	07db      	lsls	r3, r3, #31
60001b58:	d5fc      	bpl.n	60001b54 <configure_external_ram+0x36c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b5a:	2301      	movs	r3, #1
60001b5c:	2510      	movs	r5, #16
60001b5e:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
60001b62:	6143      	str	r3, [r0, #20]
			external_psram_size = 16;
60001b64:	e79c      	b.n	60001aa0 <configure_external_ram+0x2b8>
60001b66:	bf00      	nop
60001b68:	402a4000 	.word	0x402a4000

60001b6c <usb_pll_start>:
{
60001b6c:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001b6e:	4a15      	ldr	r2, [pc, #84]	; (60001bc4 <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001b70:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001b72:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001b76:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001b7a:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001b7e:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001b82:	f243 0042 	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001b86:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001b88:	f013 0f02 	tst.w	r3, #2
60001b8c:	d10e      	bne.n	60001bac <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001b8e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
60001b92:	d00f      	beq.n	60001bb4 <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001b94:	f413 5f80 	tst.w	r3, #4096	; 0x1000
60001b98:	d00e      	beq.n	60001bb8 <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001b9a:	2b00      	cmp	r3, #0
60001b9c:	daf3      	bge.n	60001b86 <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001b9e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
60001ba2:	d10b      	bne.n	60001bbc <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001ba4:	065b      	lsls	r3, r3, #25
60001ba6:	d50b      	bpl.n	60001bc0 <usb_pll_start+0x54>
}
60001ba8:	bcf0      	pop	{r4, r5, r6, r7}
60001baa:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001bac:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001bae:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001bb0:	6190      	str	r0, [r2, #24]
			continue;
60001bb2:	e7e8      	b.n	60001b86 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001bb4:	6155      	str	r5, [r2, #20]
			continue;
60001bb6:	e7e6      	b.n	60001b86 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001bb8:	6156      	str	r6, [r2, #20]
			continue;
60001bba:	e7e4      	b.n	60001b86 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001bbc:	6191      	str	r1, [r2, #24]
			continue;
60001bbe:	e7e2      	b.n	60001b86 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001bc0:	6157      	str	r7, [r2, #20]
			continue;
60001bc2:	e7e0      	b.n	60001b86 <usb_pll_start+0x1a>
60001bc4:	400d8000 	.word	0x400d8000

60001bc8 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001bc8:	4a3f      	ldr	r2, [pc, #252]	; (60001cc8 <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001bca:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001bcc:	493f      	ldr	r1, [pc, #252]	; (60001ccc <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001bce:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001bd2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001bd6:	f04f 0c00 	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bda:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 60001cd0 <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001bde:	f023 0301 	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001be2:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 60001cd4 <tempmon_init+0x10c>
{
60001be6:	b430      	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001be8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001bec:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60001bf0:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001bf4:	4d38      	ldr	r5, [pc, #224]	; (60001cd8 <tempmon_init+0x110>)
60001bf6:	b2cb      	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001bf8:	4c38      	ldr	r4, [pc, #224]	; (60001cdc <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001bfa:	4839      	ldr	r0, [pc, #228]	; (60001ce0 <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001bfc:	602b      	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001bfe:	ee07 3a90 	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001c02:	0d0b      	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001c04:	f3c1 210b 	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001c08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001c0c:	ee06 3a90 	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001c10:	ee07 1a10 	vmov	s14, r1
60001c14:	4b33      	ldr	r3, [pc, #204]	; (60001ce4 <tempmon_init+0x11c>)
60001c16:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001c1a:	6021      	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001c1c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c20:	4931      	ldr	r1, [pc, #196]	; (60001ce8 <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c22:	ee37 6ac6 	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c26:	ee37 5ac5 	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001c2a:	ee76 6ac7 	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001c2e:	ee77 7ae5 	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c32:	ee26 6a26 	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001c36:	edc3 6a00 	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c3a:	ee25 5a26 	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c3e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c42:	ee67 4aa6 	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001c46:	edc0 7a00 	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c4a:	eec6 5a27 	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001c4e:	4827      	ldr	r0, [pc, #156]	; (60001cec <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c50:	ee85 6a27 	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c54:	eec4 6aa7 	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c58:	ee75 5a87 	vadd.f32	s11, s11, s14
60001c5c:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c60:	ee36 6a07 	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c64:	ee15 4a90 	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c68:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c6c:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c70:	ee76 7a87 	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c74:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c78:	ee16 3a10 	vmov	r3, s12
60001c7c:	f8d2 4190 	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c84:	ea01 4103 	and.w	r1, r1, r3, lsl #16
60001c88:	4321      	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c8a:	ee17 3a90 	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c8e:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001c92:	f3c3 030b 	ubfx	r3, r3, #0, #12
60001c96:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
60001c9a:	430b      	orrs	r3, r1
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001c9c:	4914      	ldr	r1, [pc, #80]	; (60001cf0 <tempmon_init+0x128>)
60001c9e:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001ca2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
60001ca6:	f043 0302 	orr.w	r3, r3, #2
60001caa:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
60001cae:	4b11      	ldr	r3, [pc, #68]	; (60001cf4 <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001cb0:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
60001cb4:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001cb8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001cbc:	2201      	movs	r2, #1
}
60001cbe:	bc30      	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001cc0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
60001cc4:	4770      	bx	lr
60001cc6:	bf00      	nop
60001cc8:	400d8100 	.word	0x400d8100
60001ccc:	401f4400 	.word	0x401f4400
60001cd0:	42aa0000 	.word	0x42aa0000
60001cd4:	42b40000 	.word	0x42b40000
60001cd8:	200021e4 	.word	0x200021e4
60001cdc:	200021e0 	.word	0x200021e0
60001ce0:	200021e8 	.word	0x200021e8
60001ce4:	200021ec 	.word	0x200021ec
60001ce8:	0fff0000 	.word	0x0fff0000
60001cec:	e000e400 	.word	0xe000e400
60001cf0:	20001800 	.word	0x20001800
60001cf4:	000016cd 	.word	0x000016cd

60001cf8 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001cf8:	4b31      	ldr	r3, [pc, #196]	; (60001dc0 <usb_init+0xc8>)
60001cfa:	f640 7261 	movw	r2, #3937	; 0xf61
{
60001cfe:	b510      	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001d00:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001d04:	f240 4404 	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
60001d08:	f000 f8b2 	bl	60001e70 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001d0c:	4a2d      	ldr	r2, [pc, #180]	; (60001dc4 <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
60001d0e:	492e      	ldr	r1, [pc, #184]	; (60001dc8 <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001d10:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001d14:	482d      	ldr	r0, [pc, #180]	; (60001dcc <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001d16:	f043 0303 	orr.w	r3, r3, #3
60001d1a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001d1e:	4b2c      	ldr	r3, [pc, #176]	; (60001dd0 <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
60001d20:	f8c1 4160 	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001d24:	6802      	ldr	r2, [r0, #0]
60001d26:	421a      	tst	r2, r3
60001d28:	d103      	bne.n	60001d32 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
60001d2a:	f8d1 31a8 	ldr.w	r3, [r1, #424]	; 0x1a8
60001d2e:	079a      	lsls	r2, r3, #30
60001d30:	d01b      	beq.n	60001d6a <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001d32:	4a25      	ldr	r2, [pc, #148]	; (60001dc8 <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001d34:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
60001d38:	4b24      	ldr	r3, [pc, #144]	; (60001dcc <usb_init+0xd4>)
60001d3a:	6359      	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001d3c:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001d40:	f043 0302 	orr.w	r3, r3, #2
60001d44:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001d48:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001d4c:	079b      	lsls	r3, r3, #30
60001d4e:	d4fb      	bmi.n	60001d48 <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001d50:	f44f 3000 	mov.w	r0, #131072	; 0x20000
60001d54:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001d58:	4b1c      	ldr	r3, [pc, #112]	; (60001dcc <usb_init+0xd4>)
60001d5a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001d5e:	f8c1 028c 	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001d62:	2019      	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001d64:	639a      	str	r2, [r3, #56]	; 0x38
		delay(25);
60001d66:	f000 f87b 	bl	60001e60 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001d6a:	4a18      	ldr	r2, [pc, #96]	; (60001dcc <usb_init+0xd4>)
60001d6c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001d70:	4c15      	ldr	r4, [pc, #84]	; (60001dc8 <usb_init+0xd0>)
	USBPHY1_PWD = 0;
60001d72:	2100      	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001d74:	6390      	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001d76:	200a      	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d78:	4b16      	ldr	r3, [pc, #88]	; (60001dd4 <usb_init+0xdc>)
	USBPHY1_PWD = 0;
60001d7a:	6011      	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d7c:	f44f 7220 	mov.w	r2, #640	; 0x280
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001d80:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d84:	4618      	mov	r0, r3
60001d86:	f000 f867 	bl	60001e58 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
60001d8a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d8e:	4603      	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001d90:	f44f 0081 	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001d94:	f240 1143 	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001d98:	6018      	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001d9a:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
60001d9e:	641a      	str	r2, [r3, #64]	; 0x40
60001da0:	4b0d      	ldr	r3, [pc, #52]	; (60001dd8 <usb_init+0xe0>)
60001da2:	4a0e      	ldr	r2, [pc, #56]	; (60001ddc <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001da4:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
60001da8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001dac:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
60001db0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001db4:	2301      	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001db6:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
60001dba:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
60001dbe:	bd10      	pop	{r4, pc}
60001dc0:	400d8000 	.word	0x400d8000
60001dc4:	400fc000 	.word	0x400fc000
60001dc8:	402e0000 	.word	0x402e0000
60001dcc:	400d9000 	.word	0x400d9000
60001dd0:	001e1c00 	.word	0x001e1c00
60001dd4:	20000000 	.word	0x20000000
60001dd8:	20001800 	.word	0x20001800
60001ddc:	000018b5 	.word	0x000018b5

60001de0 <_reboot_Teensyduino_>:


FLASHMEM __attribute__((noinline)) void _reboot_Teensyduino_(void)
{
60001de0:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60001de2:	4b0e      	ldr	r3, [pc, #56]	; (60001e1c <_reboot_Teensyduino_+0x3c>)
60001de4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
60001de6:	079b      	lsls	r3, r3, #30
60001de8:	d400      	bmi.n	60001dec <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
60001dea:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60001dec:	b672      	cpsid	i
		USB1_USBCMD = 0;
60001dee:	4b0c      	ldr	r3, [pc, #48]	; (60001e20 <_reboot_Teensyduino_+0x40>)
60001df0:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
60001df2:	4a0c      	ldr	r2, [pc, #48]	; (60001e24 <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
60001df4:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001df8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001dfc:	490a      	ldr	r1, [pc, #40]	; (60001e28 <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001dfe:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001e02:	6411      	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001e04:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001e06:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001e0a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
60001e0e:	4807      	ldr	r0, [pc, #28]	; (60001e2c <_reboot_Teensyduino_+0x4c>)
60001e10:	4a07      	ldr	r2, [pc, #28]	; (60001e30 <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001e12:	69db      	ldr	r3, [r3, #28]
		*p = 0xEB120000;
60001e14:	6002      	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001e16:	689b      	ldr	r3, [r3, #8]
60001e18:	4798      	blx	r3
	}
	__builtin_unreachable();
60001e1a:	bf00      	nop
60001e1c:	401f4400 	.word	0x401f4400
60001e20:	402e0000 	.word	0x402e0000
60001e24:	400ac000 	.word	0x400ac000
60001e28:	00200003 	.word	0x00200003
60001e2c:	20208000 	.word	0x20208000
60001e30:	eb120000 	.word	0xeb120000

60001e34 <_init>:
60001e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60001e36:	bf00      	nop
60001e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
60001e3a:	bc08      	pop	{r3}
60001e3c:	469e      	mov	lr, r3
60001e3e:	4770      	bx	lr

60001e40 <__sm_set_pool_veneer>:
60001e40:	f85f f000 	ldr.w	pc, [pc]	; 60001e44 <__sm_set_pool_veneer+0x4>
60001e44:	00002c91 	.word	0x00002c91

60001e48 <__main_veneer>:
60001e48:	f85f f000 	ldr.w	pc, [pc]	; 60001e4c <__main_veneer+0x4>
60001e4c:	000011cd 	.word	0x000011cd

60001e50 <____libc_init_array_veneer>:
60001e50:	f85f f000 	ldr.w	pc, [pc]	; 60001e54 <____libc_init_array_veneer+0x4>
60001e54:	00003d19 	.word	0x00003d19

60001e58 <__memset_veneer>:
60001e58:	f85f f000 	ldr.w	pc, [pc]	; 60001e5c <__memset_veneer+0x4>
60001e5c:	00003a7d 	.word	0x00003a7d

60001e60 <__delay_veneer>:
60001e60:	f85f f000 	ldr.w	pc, [pc]	; 60001e64 <__delay_veneer+0x4>
60001e64:	0000103d 	.word	0x0000103d

60001e68 <__set_arm_clock_veneer>:
60001e68:	f85f f000 	ldr.w	pc, [pc]	; 60001e6c <__set_arm_clock_veneer+0x4>
60001e6c:	00002931 	.word	0x00002931

60001e70 <__usb_init_serialnumber_veneer>:
60001e70:	f85f f000 	ldr.w	pc, [pc]	; 60001e74 <__usb_init_serialnumber_veneer+0x4>
60001e74:	00002025 	.word	0x00002025

60001e78 <__pwm_init_veneer>:
60001e78:	f85f f000 	ldr.w	pc, [pc]	; 60001e7c <__pwm_init_veneer+0x4>
60001e7c:	000013f1 	.word	0x000013f1

60001e80 <__frame_dummy_init_array_entry>:
60001e80:	00000045                                E...

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN); // wait
	// stop the SRTC
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
	// set the SRTC
	SNVS_LPSRTCLR = t << 15;
      20:	4805      	ldr	r0, [pc, #20]	; (38 <_teensy_model_identifier+0x13>)
	SNVS_LPSRTCMR = t >> 17;
	// start the SRTC
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
      22:	4b06      	ldr	r3, [pc, #24]	; (3c <_teensy_model_identifier+0x17>)
	SNVS_LPSRTCMR = t >> 17;
      24:	1a1b      	subs	r3, r3, r0
	SNVS_LPSRTCLR = t << 15;
      26:	0fd9      	lsrs	r1, r3, #31
	SNVS_LPSRTCMR = t >> 17;
      28:	eb01 01a3 	add.w	r1, r1, r3, asr #2
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
      2c:	1049      	asrs	r1, r1, #1
      2e:	d002      	beq.n	36 <_teensy_model_identifier+0x11>
      30:	4b03      	ldr	r3, [pc, #12]	; (40 <_teensy_model_identifier+0x1b>)
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
      32:	b103      	cbz	r3, 36 <_teensy_model_identifier+0x11>
      34:	4718      	bx	r3
      36:	4770      	bx	lr
	// start the RTC and sync it to the SRTC
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
      38:	20001ac0 	.word	0x20001ac0
      3c:	20001ac0 	.word	0x20001ac0
}
      40:	00000000 	.word	0x00000000

00000044 <frame_dummy>:
      44:	b508      	push	{r3, lr}
      46:	4b05      	ldr	r3, [pc, #20]	; (5c <frame_dummy+0x18>)
		return 0;
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4905      	ldr	r1, [pc, #20]	; (60 <frame_dummy+0x1c>)
      4c:	4805      	ldr	r0, [pc, #20]	; (64 <frame_dummy+0x20>)
      4e:	f3af 8000 	nop.w
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
}
      52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      56:	f7ff bfe3 	b.w	20 <register_tm_clones>
      5a:	bf00      	nop
      5c:	00000000 	.word	0x00000000
}
      60:	20002190 	.word	0x20002190
      64:	6000dc00 	.word	0x6000dc00

00000068 <hexByte(char const*, unsigned int)>:
  if (c >= 'a' && c <= 'f') return c - 'a' + 10;
  return -1;
}

static int hexByte(const char* rec, size_t idx) {
  int hi = hexNibble(rec[idx]);
      68:	5c42      	ldrb	r2, [r0, r1]
  if (c >= '0' && c <= '9') return c - '0';
      6a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
      6e:	fa5f fc83 	uxtb.w	ip, r3
      72:	f1bc 0f09 	cmp.w	ip, #9
      76:	d90b      	bls.n	90 <hexByte(char const*, unsigned int)+0x28>
  if (c >= 'A' && c <= 'F') return c - 'A' + 10;
      78:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
      7c:	2b05      	cmp	r3, #5
      7e:	d921      	bls.n	c4 <hexByte(char const*, unsigned int)+0x5c>
  if (c >= 'a' && c <= 'f') return c - 'a' + 10;
      80:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
      84:	2b05      	cmp	r3, #5
      86:	bf94      	ite	ls
      88:	f1a2 0357 	subls.w	r3, r2, #87	; 0x57
  return -1;
      8c:	f04f 33ff 	movhi.w	r3, #4294967295
  int lo = hexNibble(rec[idx + 1]);
      90:	4401      	add	r1, r0
      92:	7849      	ldrb	r1, [r1, #1]
  if (c >= '0' && c <= '9') return c - '0';
      94:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
      98:	b2d0      	uxtb	r0, r2
      9a:	2809      	cmp	r0, #9
      9c:	d909      	bls.n	b2 <hexByte(char const*, unsigned int)+0x4a>
  if (c >= 'A' && c <= 'F') return c - 'A' + 10;
      9e:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
      a2:	2a05      	cmp	r2, #5
      a4:	d90b      	bls.n	be <hexByte(char const*, unsigned int)+0x56>
  if (c >= 'a' && c <= 'f') return c - 'a' + 10;
      a6:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
      aa:	2a05      	cmp	r2, #5
      ac:	d80d      	bhi.n	ca <hexByte(char const*, unsigned int)+0x62>
      ae:	f1a1 0257 	sub.w	r2, r1, #87	; 0x57
  if (hi < 0 || lo < 0) return -1;
      b2:	1c59      	adds	r1, r3, #1
      b4:	d001      	beq.n	ba <hexByte(char const*, unsigned int)+0x52>
  return (hi << 4) | lo;
      b6:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
}
      ba:	4618      	mov	r0, r3
      bc:	4770      	bx	lr
  if (c >= 'A' && c <= 'F') return c - 'A' + 10;
      be:	f1a1 0237 	sub.w	r2, r1, #55	; 0x37
      c2:	e7f6      	b.n	b2 <hexByte(char const*, unsigned int)+0x4a>
      c4:	f1a2 0337 	sub.w	r3, r2, #55	; 0x37
      c8:	e7e2      	b.n	90 <hexByte(char const*, unsigned int)+0x28>
  if (hi < 0 || lo < 0) return -1;
      ca:	f04f 33ff 	mov.w	r3, #4294967295
      ce:	e7f4      	b.n	ba <hexByte(char const*, unsigned int)+0x52>

000000d0 <setup>:
  }

  sendLine("ERR");
}

void setup() {
      d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  pinMode(LED_PIN, OUTPUT);
      d4:	2101      	movs	r1, #1
      d6:	200d      	movs	r0, #13
      d8:	f001 f840 	bl	115c <pinMode>
  digitalWrite(LED_PIN, LOW);
      dc:	2100      	movs	r1, #0
      de:	200d      	movs	r0, #13
	// is always initialized early during startup.  The baud rate setting
	// is not used.  Communication occurs at USB native speed.  For
	// compatibility with Arduino code, Serial.begin waits up to 2 seconds
	// for your PC to open the virtual serial port.
        void begin(long baud_unused __attribute__((unused))) {
		uint32_t millis_begin = systick_millis_count;
      e0:	4d27      	ldr	r5, [pc, #156]	; (180 <setup+0xb0>)
      e2:	f000 ffff 	bl	10e4 <digitalWrite>
  pinMode(POT_PIN, INPUT);
      e6:	2100      	movs	r1, #0
      e8:	201b      	movs	r0, #27
      ea:	4c26      	ldr	r4, [pc, #152]	; (184 <setup+0xb4>)
      ec:	f001 f836 	bl	115c <pinMode>
static inline void analogReadResolution(unsigned int bits) { analogReadRes(bits); }
      f0:	200c      	movs	r0, #12
      f2:	f000 ff73 	bl	fdc <analogReadRes>
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
      f6:	4f24      	ldr	r7, [pc, #144]	; (188 <setup+0xb8>)
		uint32_t millis_begin = systick_millis_count;
      f8:	682e      	ldr	r6, [r5, #0]
				if (elapsed > 750) break;
      fa:	f240 28ee 	movw	r8, #750	; 0x2ee
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
      fe:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 1a4 <setup+0xd4>
		yield();
     102:	f002 fb75 	bl	27f0 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     106:	7823      	ldrb	r3, [r4, #0]
     108:	b363      	cbz	r3, 164 <setup+0x94>
     10a:	783b      	ldrb	r3, [r7, #0]
     10c:	07db      	lsls	r3, r3, #31
     10e:	d529      	bpl.n	164 <setup+0x94>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     110:	682b      	ldr	r3, [r5, #0]
     112:	f8d9 2000 	ldr.w	r2, [r9]
     116:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     118:	2b0e      	cmp	r3, #14
     11a:	d923      	bls.n	164 <setup+0x94>
  analogReadResolution(12);

  Serial.begin(BAUD_USB);
  Serial2.begin(BAUD_UART);
     11c:	2200      	movs	r2, #0
     11e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
     122:	481a      	ldr	r0, [pc, #104]	; (18c <setup+0xbc>)
     124:	f000 fc26 	bl	974 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)>

  delay(200);
     128:	20c8      	movs	r0, #200	; 0xc8
     12a:	f000 ff87 	bl	103c <delay>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     12e:	2136      	movs	r1, #54	; 0x36
     130:	4817      	ldr	r0, [pc, #92]	; (190 <setup+0xc0>)
     132:	f002 fadf 	bl	26f4 <usb_serial_write>
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
     136:	4817      	ldr	r0, [pc, #92]	; (194 <setup+0xc4>)
     138:	f000 ff12 	bl	f60 <Print::println()>
     13c:	211b      	movs	r1, #27
     13e:	4816      	ldr	r0, [pc, #88]	; (198 <setup+0xc8>)
     140:	f002 fad8 	bl	26f4 <usb_serial_write>
     144:	2110      	movs	r1, #16
     146:	4815      	ldr	r0, [pc, #84]	; (19c <setup+0xcc>)
     148:	f002 fad4 	bl	26f4 <usb_serial_write>
     14c:	4811      	ldr	r0, [pc, #68]	; (194 <setup+0xc4>)
     14e:	f000 ff07 	bl	f60 <Print::println()>
     152:	213f      	movs	r1, #63	; 0x3f
     154:	4812      	ldr	r0, [pc, #72]	; (1a0 <setup+0xd0>)
     156:	f002 facd 	bl	26f4 <usb_serial_write>
     15a:	480e      	ldr	r0, [pc, #56]	; (194 <setup+0xc4>)
  Serial.println("\n[Teensy] OTA HEX receiver ready on Serial2 (pins 7/8)");
  Serial.print("[Teensy] Firmware version: ");
  Serial.println(FW_VERSION);
  Serial.println("[Teensy] Type 'version' or 'status' in Serial Monitor for info.");
}
     15c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     160:	f000 befe 	b.w	f60 <Print::println()>
			uint32_t elapsed = systick_millis_count - millis_begin;
     164:	682b      	ldr	r3, [r5, #0]
			if (usb_configuration) {
     166:	7822      	ldrb	r2, [r4, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
     168:	1b9b      	subs	r3, r3, r6
			if (usb_configuration) {
     16a:	b12a      	cbz	r2, 178 <setup+0xa8>
				if (elapsed > 2000) break;
     16c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
     170:	d8d4      	bhi.n	11c <setup+0x4c>
			yield();
     172:	f002 fb3d 	bl	27f0 <yield>
     176:	e7c4      	b.n	102 <setup+0x32>
				if (elapsed > 750) break;
     178:	4543      	cmp	r3, r8
     17a:	d9fa      	bls.n	172 <setup+0xa2>
     17c:	e7ce      	b.n	11c <setup+0x4c>
     17e:	bf00      	nop
     180:	200021f8 	.word	0x200021f8
     184:	20002228 	.word	0x20002228
     188:	20002227 	.word	0x20002227
     18c:	20000ef0 	.word	0x20000ef0
     190:	20000c34 	.word	0x20000c34
     194:	20000ee0 	.word	0x20000ee0
     198:	20000c6c 	.word	0x20000c6c
     19c:	20000370 	.word	0x20000370
     1a0:	20000c88 	.word	0x20000c88
     1a4:	20002208 	.word	0x20002208

000001a8 <loop>:
	}

	reqd = strlen(s);

	// add 1 for decimal point
	if (reqd > decpt) reqd++;
     1a8:	499f      	ldr	r1, [pc, #636]	; (428 <loop+0x280>)
     1aa:	4aa0      	ldr	r2, [pc, #640]	; (42c <loop+0x284>)

	// add 1 for zero in front of decimal point
	if (decpt == 0) reqd++;
     1ac:	680b      	ldr	r3, [r1, #0]
     1ae:	6810      	ldr	r0, [r2, #0]
     1b0:	1a1b      	subs	r3, r3, r0
			if (newDecimalPoint - decpt == precision + 1) decpt++;
		}
	}

	// add 1 for sign if negative
	if (sign) reqd++;
     1b2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
	if (decpt == 0) reqd++;
     1b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (sign) reqd++;
     1ba:	b083      	sub	sp, #12

	p = buf;
	e = p + reqd;
	pad = width - reqd;
     1bc:	f080 8104 	bcs.w	3c8 <loop+0x220>
	e = p + reqd;
     1c0:	4c9b      	ldr	r4, [pc, #620]	; (430 <loop+0x288>)
     1c2:	4d9c      	ldr	r5, [pc, #624]	; (434 <loop+0x28c>)
	if (pad > 0) {
     1c4:	4e9c      	ldr	r6, [pc, #624]	; (438 <loop+0x290>)
     1c6:	f002 fa2b 	bl	2620 <usb_serial_available>
		e += pad;
		while (pad-- > 0) *p++ = ' ';
     1ca:	b180      	cbz	r0, 1ee <loop+0x46>
     1cc:	f002 fa6c 	bl	26a8 <usb_serial_getchar>
		e += pad;
     1d0:	b2c0      	uxtb	r0, r0
		while (pad-- > 0) *p++ = ' ';
     1d2:	280d      	cmp	r0, #13
     1d4:	d0f7      	beq.n	1c6 <loop+0x1e>
     1d6:	280a      	cmp	r0, #10
     1d8:	6823      	ldr	r3, [r4, #0]
	}
	if (sign) *p++ = '-';
	if (decpt == 0 && precision > 0) {
     1da:	d026      	beq.n	22a <loop+0x82>
     1dc:	1c5a      	adds	r2, r3, #1
     1de:	2a5f      	cmp	r2, #95	; 0x5f
		*p++ = '0';
		*p++ = '.';
	}
	else if (decpt < 0 && precision > 0) {
     1e0:	d8f1      	bhi.n	1c6 <loop+0x1e>
     1e2:	54e8      	strb	r0, [r5, r3]
     1e4:	6022      	str	r2, [r4, #0]
     1e6:	f002 fa1b 	bl	2620 <usb_serial_available>
     1ea:	2800      	cmp	r0, #0
		*p++ = '0';
     1ec:	d1ee      	bne.n	1cc <loop+0x24>
		*p++ = '.';
     1ee:	4d93      	ldr	r5, [pc, #588]	; (43c <loop+0x294>)
		*p++ = '0';
     1f0:	4f93      	ldr	r7, [pc, #588]	; (440 <loop+0x298>)
     1f2:	4e94      	ldr	r6, [pc, #592]	; (444 <loop+0x29c>)
     1f4:	4628      	mov	r0, r5
		*p++ = '.';
     1f6:	f000 fadf 	bl	7b8 <HardwareSerialIMXRT::available()>
     1fa:	b198      	cbz	r0, 224 <loop+0x7c>
		// print leading zeros
		while ( decpt < 0 ) {
     1fc:	4628      	mov	r0, r5
			decpt++;
			*p++ = '0';
     1fe:	f000 fb2d 	bl	85c <HardwareSerialIMXRT::read()>
		while ( decpt < 0 ) {
     202:	b2c4      	uxtb	r4, r0
			*p++ = '0';
     204:	2c0d      	cmp	r4, #13
     206:	d0f5      	beq.n	1f4 <loop+0x4c>
     208:	2c0a      	cmp	r4, #10
     20a:	6833      	ldr	r3, [r6, #0]
     20c:	d02d      	beq.n	26a <loop+0xc2>
     20e:	1c5a      	adds	r2, r3, #1
     210:	f5b2 7f16 	cmp.w	r2, #600	; 0x258
     214:	d2ee      	bcs.n	1f4 <loop+0x4c>
	if (pad > 0) {
     216:	4628      	mov	r0, r5
     218:	6032      	str	r2, [r6, #0]
     21a:	54fc      	strb	r4, [r7, r3]
     21c:	f000 facc 	bl	7b8 <HardwareSerialIMXRT::available()>
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
     220:	2800      	cmp	r0, #0
     222:	d1eb      	bne.n	1fc <loop+0x54>
     224:	b003      	add	sp, #12
		*p++ = *s++;
		if (p == e) break;
		if (--decpt == 0) *p++ = '.';
	}
	if (width < 0) {
		pad = (reqd + width) * -1;
     226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		while (pad-- > 0) *p++ = ' ';
     22a:	2200      	movs	r2, #0
     22c:	54ea      	strb	r2, [r5, r3]
     22e:	b1cb      	cbz	r3, 264 <loop+0xbc>
     230:	4631      	mov	r1, r6
     232:	4628      	mov	r0, r5
     234:	f003 fc74 	bl	3b20 <strcasecmp>
     238:	2800      	cmp	r0, #0
     23a:	d071      	beq.n	320 <loop+0x178>
     23c:	4982      	ldr	r1, [pc, #520]	; (448 <loop+0x2a0>)
     23e:	4628      	mov	r0, r5
     240:	f003 fc6e 	bl	3b20 <strcasecmp>
	reqd = strlen(s);
     244:	2800      	cmp	r0, #0
     246:	f000 80ae 	beq.w	3a6 <loop+0x1fe>
	if (reqd > decpt) reqd++;
     24a:	4980      	ldr	r1, [pc, #512]	; (44c <loop+0x2a4>)
     24c:	4628      	mov	r0, r5
     24e:	f003 fc67 	bl	3b20 <strcasecmp>
	if (decpt == 0) reqd++;
     252:	2800      	cmp	r0, #0
     254:	d172      	bne.n	33c <loop+0x194>
     256:	211f      	movs	r1, #31
	if (decpt < 0 && precision > 0) {
     258:	487d      	ldr	r0, [pc, #500]	; (450 <loop+0x2a8>)
     25a:	f002 fa4b 	bl	26f4 <usb_serial_write>
     25e:	487d      	ldr	r0, [pc, #500]	; (454 <loop+0x2ac>)
     260:	f000 fe7e 	bl	f60 <Print::println()>
     264:	2300      	movs	r3, #0
     266:	6023      	str	r3, [r4, #0]
		if (strlen(s) > precision + decpt) {
     268:	e7ad      	b.n	1c6 <loop+0x1e>
     26a:	2200      	movs	r2, #0
		reqd = precision + 2;
     26c:	210d      	movs	r1, #13
     26e:	487a      	ldr	r0, [pc, #488]	; (458 <loop+0x2b0>)
		if (strlen(s) > precision + decpt) {
     270:	54fa      	strb	r2, [r7, r3]
     272:	f002 fa3f 	bl	26f4 <usb_serial_write>
			while (newPrecision > 0) {
     276:	4872      	ldr	r0, [pc, #456]	; (440 <loop+0x298>)
     278:	f003 ff02 	bl	4080 <strlen>
				val *= 10.0f;
     27c:	4601      	mov	r1, r0
     27e:	4870      	ldr	r0, [pc, #448]	; (440 <loop+0x298>)
			while (newPrecision > 0) {
     280:	f002 fa38 	bl	26f4 <usb_serial_write>
				val *= 10.0f;
     284:	4873      	ldr	r0, [pc, #460]	; (454 <loop+0x2ac>)
			while (newPrecision > 0) {
     286:	f000 fe6b 	bl	f60 <Print::println()>
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
     28a:	783b      	ldrb	r3, [r7, #0]
     28c:	2b00      	cmp	r3, #0
     28e:	d044      	beq.n	31a <loop+0x172>
     290:	2205      	movs	r2, #5
     292:	4972      	ldr	r1, [pc, #456]	; (45c <loop+0x2b4>)
     294:	4638      	mov	r0, r7
			if (newDecimalPoint - decpt == precision + 1) decpt++;
     296:	f003 fc6d 	bl	3b74 <strncasecmp>
     29a:	bb10      	cbnz	r0, 2e2 <loop+0x13a>
     29c:	4b70      	ldr	r3, [pc, #448]	; (460 <loop+0x2b8>)
     29e:	781b      	ldrb	r3, [r3, #0]
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
     2a0:	2b00      	cmp	r3, #0
			if (newDecimalPoint - decpt == precision + 1) decpt++;
     2a2:	f040 815f 	bne.w	564 <loop+0x3bc>
     2a6:	797b      	ldrb	r3, [r7, #5]
     2a8:	486e      	ldr	r0, [pc, #440]	; (464 <loop+0x2bc>)
     2aa:	2b20      	cmp	r3, #32
     2ac:	d103      	bne.n	2b6 <loop+0x10e>
     2ae:	f810 3f01 	ldrb.w	r3, [r0, #1]!
     2b2:	2b20      	cmp	r3, #32
     2b4:	d0fb      	beq.n	2ae <loop+0x106>
		int ndigs = (val<0) ? 4 : 3;
     2b6:	2b00      	cmp	r3, #0
     2b8:	f000 809f 	beq.w	3fa <loop+0x252>
     2bc:	496a      	ldr	r1, [pc, #424]	; (468 <loop+0x2c0>)
     2be:	f003 fd63 	bl	3d88 <strcmp>
     2c2:	4b6a      	ldr	r3, [pc, #424]	; (46c <loop+0x2c4>)
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
     2c4:	2800      	cmp	r0, #0
     2c6:	f040 808c 	bne.w	3e2 <loop+0x23a>
     2ca:	2201      	movs	r2, #1
     2cc:	2117      	movs	r1, #23
		if (width<0) {
     2ce:	4868      	ldr	r0, [pc, #416]	; (470 <loop+0x2c8>)
		if (copysignf(1.0f, val)<0) *buf++ = '-';
     2d0:	701a      	strb	r2, [r3, #0]
     2d2:	f002 fa0f 	bl	26f4 <usb_serial_write>
     2d6:	485f      	ldr	r0, [pc, #380]	; (454 <loop+0x2ac>)
     2d8:	f000 fe42 	bl	f60 <Print::println()>
     2dc:	2205      	movs	r2, #5
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
     2de:	4965      	ldr	r1, [pc, #404]	; (474 <loop+0x2cc>)
     2e0:	e010      	b.n	304 <loop+0x15c>
     2e2:	4965      	ldr	r1, [pc, #404]	; (478 <loop+0x2d0>)
     2e4:	4638      	mov	r0, r7
     2e6:	f003 fc1b 	bl	3b20 <strcasecmp>
		while (awidth) {
     2ea:	bb88      	cbnz	r0, 350 <loop+0x1a8>
     2ec:	4b5f      	ldr	r3, [pc, #380]	; (46c <loop+0x2c4>)
     2ee:	781b      	ldrb	r3, [r3, #0]
     2f0:	b133      	cbz	r3, 300 <loop+0x158>
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
     2f2:	4a5b      	ldr	r2, [pc, #364]	; (460 <loop+0x2b8>)
     2f4:	7813      	ldrb	r3, [r2, #0]
     2f6:	f003 01ff 	and.w	r1, r3, #255	; 0xff
     2fa:	2b00      	cmp	r3, #0
     2fc:	f000 811e 	beq.w	53c <loop+0x394>
		while (awidth) {
     300:	2208      	movs	r2, #8
			while (awidth) {
     302:	495e      	ldr	r1, [pc, #376]	; (47c <loop+0x2d4>)
				*buf++ = ' ';
     304:	4628      	mov	r0, r5
     306:	f000 fe03 	bl	f10 <Print::write(unsigned char const*, unsigned int)>
     30a:	210d      	movs	r1, #13
     30c:	4628      	mov	r0, r5
		if (copysignf(1.0f, val)<0) *buf++ = '-';
     30e:	f000 fd0d 	bl	d2c <HardwareSerialIMXRT::write(unsigned char)>
     312:	210a      	movs	r1, #10
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
     314:	4628      	mov	r0, r5
     316:	f000 fd09 	bl	d2c <HardwareSerialIMXRT::write(unsigned char)>
     31a:	2300      	movs	r3, #0
     31c:	6033      	str	r3, [r6, #0]
     31e:	e769      	b.n	1f4 <loop+0x4c>
     320:	210c      	movs	r1, #12
     322:	4857      	ldr	r0, [pc, #348]	; (480 <loop+0x2d8>)
		while (awidth) {
     324:	f002 f9e6 	bl	26f4 <usb_serial_write>
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
     328:	2110      	movs	r1, #16
     32a:	4856      	ldr	r0, [pc, #344]	; (484 <loop+0x2dc>)
     32c:	f002 f9e2 	bl	26f4 <usb_serial_write>
     330:	4848      	ldr	r0, [pc, #288]	; (454 <loop+0x2ac>)
     332:	f000 fe15 	bl	f60 <Print::println()>
		if (val<0) *buf++ = '-';
     336:	2300      	movs	r3, #0
     338:	6023      	str	r3, [r4, #0]
     33a:	e744      	b.n	1c6 <loop+0x1e>
     33c:	211d      	movs	r1, #29
     33e:	4852      	ldr	r0, [pc, #328]	; (488 <loop+0x2e0>)
     340:	f002 f9d8 	bl	26f4 <usb_serial_write>
     344:	4843      	ldr	r0, [pc, #268]	; (454 <loop+0x2ac>)
     346:	f000 fe0b 	bl	f60 <Print::println()>
     34a:	2300      	movs	r3, #0
    if (len == 0) { len = 0; continue; }
     34c:	6023      	str	r3, [r4, #0]
     34e:	e73a      	b.n	1c6 <loop+0x1e>
  if (strncasecmp(line, "L ", 2) == 0 && hex_in_progress) {
     350:	2202      	movs	r2, #2
     352:	494e      	ldr	r1, [pc, #312]	; (48c <loop+0x2e4>)
     354:	4638      	mov	r0, r7
     356:	f003 fc0d 	bl	3b74 <strncasecmp>
     35a:	b920      	cbnz	r0, 366 <loop+0x1be>
     35c:	4b40      	ldr	r3, [pc, #256]	; (460 <loop+0x2b8>)
     35e:	781b      	ldrb	r3, [r3, #0]
     360:	2b00      	cmp	r3, #0
     362:	f040 8102 	bne.w	56a <loop+0x3c2>
  if (strcasecmp(line, "END") == 0) {
     366:	494a      	ldr	r1, [pc, #296]	; (490 <loop+0x2e8>)
     368:	4638      	mov	r0, r7
     36a:	f003 fbd9 	bl	3b20 <strcasecmp>
     36e:	2800      	cmp	r0, #0
     370:	f000 80a8 	beq.w	4c4 <loop+0x31c>
  if (strcasecmp(line, "PING") == 0) {
     374:	4947      	ldr	r1, [pc, #284]	; (494 <loop+0x2ec>)
     376:	4638      	mov	r0, r7
     378:	f003 fbd2 	bl	3b20 <strcasecmp>
     37c:	2800      	cmp	r0, #0
     37e:	f000 81b1 	beq.w	6e4 <loop+0x53c>
  if (strcasecmp(line, "VERSION") == 0) {
     382:	4945      	ldr	r1, [pc, #276]	; (498 <loop+0x2f0>)
     384:	4638      	mov	r0, r7
     386:	f003 fbcb 	bl	3b20 <strcasecmp>
     38a:	2800      	cmp	r0, #0
     38c:	f000 81ad 	beq.w	6ea <loop+0x542>
  if (strcasecmp(line, "STATUS") == 0) {
     390:	4942      	ldr	r1, [pc, #264]	; (49c <loop+0x2f4>)
     392:	4638      	mov	r0, r7
     394:	f003 fbc4 	bl	3b20 <strcasecmp>
     398:	4604      	mov	r4, r0
     39a:	2800      	cmp	r0, #0
     39c:	f000 8171 	beq.w	682 <loop+0x4da>
							  return write((const uint8_t *)str, strlen(str)); }
     3a0:	2203      	movs	r2, #3
     3a2:	493f      	ldr	r1, [pc, #252]	; (4a0 <loop+0x2f8>)
     3a4:	e7ae      	b.n	304 <loop+0x15c>
  Serial.printf("HEX lines=%lu ok=%lu bad=%lu bytes=%lu\n", hex_lines, hex_ok, hex_bad, hex_bytes);
     3a6:	493f      	ldr	r1, [pc, #252]	; (4a4 <loop+0x2fc>)
     3a8:	4b3f      	ldr	r3, [pc, #252]	; (4a8 <loop+0x300>)
     3aa:	6809      	ldr	r1, [r1, #0]
     3ac:	4a3f      	ldr	r2, [pc, #252]	; (4ac <loop+0x304>)
     3ae:	681b      	ldr	r3, [r3, #0]
     3b0:	6812      	ldr	r2, [r2, #0]
     3b2:	9101      	str	r1, [sp, #4]
     3b4:	493e      	ldr	r1, [pc, #248]	; (4b0 <loop+0x308>)
     3b6:	4827      	ldr	r0, [pc, #156]	; (454 <loop+0x2ac>)
     3b8:	6809      	ldr	r1, [r1, #0]
     3ba:	9100      	str	r1, [sp, #0]
     3bc:	493d      	ldr	r1, [pc, #244]	; (4b4 <loop+0x30c>)
     3be:	f000 fdeb 	bl	f98 <Print::printf(char const*, ...)>
    if (len == 0) { len = 0; continue; }
     3c2:	2300      	movs	r3, #0
     3c4:	6023      	str	r3, [r4, #0]
     3c6:	e6fe      	b.n	1c6 <loop+0x1e>
	return systick_millis_count;
     3c8:	680b      	ldr	r3, [r1, #0]

void loop() {
  static uint32_t lastBlink = 0;
  if (millis() - lastBlink >= 500) {
    lastBlink = millis();
    digitalWrite(LED_PIN, !digitalRead(LED_PIN));
     3ca:	200d      	movs	r0, #13
    lastBlink = millis();
     3cc:	6013      	str	r3, [r2, #0]
    digitalWrite(LED_PIN, !digitalRead(LED_PIN));
     3ce:	f000 feb3 	bl	1138 <digitalRead>
     3d2:	4601      	mov	r1, r0
     3d4:	200d      	movs	r0, #13
     3d6:	fab1 f181 	clz	r1, r1
     3da:	0949      	lsrs	r1, r1, #5
     3dc:	f000 fe82 	bl	10e4 <digitalWrite>
     3e0:	e6ee      	b.n	1c0 <loop+0x18>
      handshake_ready = false;
     3e2:	2200      	movs	r2, #0
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     3e4:	2128      	movs	r1, #40	; 0x28
     3e6:	4834      	ldr	r0, [pc, #208]	; (4b8 <loop+0x310>)
     3e8:	701a      	strb	r2, [r3, #0]
     3ea:	f002 f983 	bl	26f4 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     3ee:	4819      	ldr	r0, [pc, #100]	; (454 <loop+0x2ac>)
     3f0:	f000 fdb6 	bl	f60 <Print::println()>
							  return write((const uint8_t *)str, strlen(str)); }
     3f4:	2204      	movs	r2, #4
     3f6:	4931      	ldr	r1, [pc, #196]	; (4bc <loop+0x314>)
     3f8:	e784      	b.n	304 <loop+0x15c>
     3fa:	2204      	movs	r2, #4
     3fc:	492f      	ldr	r1, [pc, #188]	; (4bc <loop+0x314>)
     3fe:	4628      	mov	r0, r5
     400:	f000 fd86 	bl	f10 <Print::write(unsigned char const*, unsigned int)>
	size_t print(char c)				{ return write((uint8_t)c); }
     404:	210d      	movs	r1, #13
     406:	4628      	mov	r0, r5
     408:	f000 fc90 	bl	d2c <HardwareSerialIMXRT::write(unsigned char)>
     40c:	210a      	movs	r1, #10
     40e:	4628      	mov	r0, r5
     410:	f000 fc8c 	bl	d2c <HardwareSerialIMXRT::write(unsigned char)>
     414:	211c      	movs	r1, #28
     416:	482a      	ldr	r0, [pc, #168]	; (4c0 <loop+0x318>)
     418:	f002 f96c 	bl	26f4 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     41c:	480d      	ldr	r0, [pc, #52]	; (454 <loop+0x2ac>)
     41e:	f000 fd9f 	bl	f60 <Print::println()>
      continue;
    }

    line[len] = '\0';
    handleSerial2Line(line);
    len = 0;
     422:	2300      	movs	r3, #0
     424:	6033      	str	r3, [r6, #0]
     426:	e6e5      	b.n	1f4 <loop+0x4c>
     428:	200021f8 	.word	0x200021f8
     42c:	20001f8c 	.word	0x20001f8c
     430:	20001f90 	.word	0x20001f90
     434:	20001f94 	.word	0x20001f94
     438:	200009f4 	.word	0x200009f4
     43c:	20000ef0 	.word	0x20000ef0
     440:	20001d34 	.word	0x20001d34
     444:	20001d30 	.word	0x20001d30
     448:	20000a0c 	.word	0x20000a0c
     44c:	20000a3c 	.word	0x20000a3c
     450:	20000a44 	.word	0x20000a44
     454:	20000ee0 	.word	0x20000ee0
     458:	20000a84 	.word	0x20000a84
     45c:	20000a94 	.word	0x20000a94
     460:	2000221b 	.word	0x2000221b
     464:	20001d39 	.word	0x20001d39
     468:	20000384 	.word	0x20000384
     46c:	2000221a 	.word	0x2000221a
     470:	20000acc 	.word	0x20000acc
     474:	20000ae4 	.word	0x20000ae4
     478:	20000b18 	.word	0x20000b18
     47c:	20000b4c 	.word	0x20000b4c
     480:	200009fc 	.word	0x200009fc
     484:	20000370 	.word	0x20000370
     488:	20000a64 	.word	0x20000a64
     48c:	20000b58 	.word	0x20000b58
     490:	20000b5c 	.word	0x20000b5c
     494:	20000bec 	.word	0x20000bec
     498:	20000bfc 	.word	0x20000bfc
     49c:	20000c08 	.word	0x20000c08
     4a0:	20000c24 	.word	0x20000c24
     4a4:	20001cf8 	.word	0x20001cf8
     4a8:	20001cf0 	.word	0x20001cf0
     4ac:	20001cfc 	.word	0x20001cfc
     4b0:	20001cf4 	.word	0x20001cf4
     4b4:	20000a14 	.word	0x20000a14
     4b8:	20000aec 	.word	0x20000aec
     4bc:	20000aa4 	.word	0x20000aa4
     4c0:	20000aac 	.word	0x20000aac
    if (!hex_in_progress) {
     4c4:	4b9a      	ldr	r3, [pc, #616]	; (730 <loop+0x588>)
     4c6:	781a      	ldrb	r2, [r3, #0]
     4c8:	2a00      	cmp	r2, #0
     4ca:	f43f af19 	beq.w	300 <loop+0x158>
    if (hex_bad == 0 && hex_ok > 0) {
     4ce:	4c99      	ldr	r4, [pc, #612]	; (734 <loop+0x58c>)
    hex_in_progress = false;
     4d0:	7018      	strb	r0, [r3, #0]
    if (hex_bad == 0 && hex_ok > 0) {
     4d2:	f8d4 9000 	ldr.w	r9, [r4]
    handshake_ready = false;
     4d6:	4b98      	ldr	r3, [pc, #608]	; (738 <loop+0x590>)
     4d8:	7018      	strb	r0, [r3, #0]
    if (hex_bad == 0 && hex_ok > 0) {
     4da:	f1b9 0f00 	cmp.w	r9, #0
     4de:	d106      	bne.n	4ee <loop+0x346>
     4e0:	f8df 8274 	ldr.w	r8, [pc, #628]	; 758 <loop+0x5b0>
     4e4:	f8d8 2000 	ldr.w	r2, [r8]
     4e8:	2a00      	cmp	r2, #0
     4ea:	f040 8095 	bne.w	618 <loop+0x470>
							  return write((const uint8_t *)str, strlen(str)); }
     4ee:	220e      	movs	r2, #14
     4f0:	4992      	ldr	r1, [pc, #584]	; (73c <loop+0x594>)
     4f2:	4628      	mov	r0, r5
     4f4:	f000 fd0c 	bl	f10 <Print::write(unsigned char const*, unsigned int)>
      Serial2.print(hex_lines);
     4f8:	4b91      	ldr	r3, [pc, #580]	; (740 <loop+0x598>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     4fa:	220a      	movs	r2, #10
     4fc:	4628      	mov	r0, r5
     4fe:	6819      	ldr	r1, [r3, #0]
     500:	2300      	movs	r3, #0
     502:	f000 fd57 	bl	fb4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
							  return write((const uint8_t *)str, strlen(str)); }
     506:	2205      	movs	r2, #5
     508:	498e      	ldr	r1, [pc, #568]	; (744 <loop+0x59c>)
     50a:	4628      	mov	r0, r5
     50c:	f000 fd00 	bl	f10 <Print::write(unsigned char const*, unsigned int)>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     510:	2300      	movs	r3, #0
     512:	220a      	movs	r2, #10
     514:	6821      	ldr	r1, [r4, #0]
     516:	4628      	mov	r0, r5
     518:	f000 fd4c 	bl	fb4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t print(char c)				{ return write((uint8_t)c); }
     51c:	210d      	movs	r1, #13
     51e:	4628      	mov	r0, r5
     520:	f000 fc04 	bl	d2c <HardwareSerialIMXRT::write(unsigned char)>
     524:	210a      	movs	r1, #10
     526:	4628      	mov	r0, r5
     528:	f000 fc00 	bl	d2c <HardwareSerialIMXRT::write(unsigned char)>
     52c:	211c      	movs	r1, #28
     52e:	4886      	ldr	r0, [pc, #536]	; (748 <loop+0x5a0>)
     530:	f002 f8e0 	bl	26f4 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     534:	4885      	ldr	r0, [pc, #532]	; (74c <loop+0x5a4>)
     536:	f000 fd13 	bl	f60 <Print::println()>
     53a:	e6ee      	b.n	31a <loop+0x172>
  hex_lines = hex_ok = hex_bad = hex_bytes = 0;
     53c:	4b84      	ldr	r3, [pc, #528]	; (750 <loop+0x5a8>)
     53e:	4885      	ldr	r0, [pc, #532]	; (754 <loop+0x5ac>)
     540:	6019      	str	r1, [r3, #0]
     542:	4b7c      	ldr	r3, [pc, #496]	; (734 <loop+0x58c>)
     544:	6019      	str	r1, [r3, #0]
     546:	4b84      	ldr	r3, [pc, #528]	; (758 <loop+0x5b0>)
     548:	6019      	str	r1, [r3, #0]
     54a:	4b7d      	ldr	r3, [pc, #500]	; (740 <loop+0x598>)
     54c:	6019      	str	r1, [r3, #0]
    hex_in_progress = true;
     54e:	2301      	movs	r3, #1
     550:	211a      	movs	r1, #26
     552:	7013      	strb	r3, [r2, #0]
     554:	f002 f8ce 	bl	26f4 <usb_serial_write>
     558:	487c      	ldr	r0, [pc, #496]	; (74c <loop+0x5a4>)
     55a:	f000 fd01 	bl	f60 <Print::println()>
							  return write((const uint8_t *)str, strlen(str)); }
     55e:	2209      	movs	r2, #9
     560:	497e      	ldr	r1, [pc, #504]	; (75c <loop+0x5b4>)
     562:	e6cf      	b.n	304 <loop+0x15c>
     564:	2204      	movs	r2, #4
     566:	497e      	ldr	r1, [pc, #504]	; (760 <loop+0x5b8>)
     568:	e6cc      	b.n	304 <loop+0x15c>
    bool ok = verifyIntelHex(rec, strlen(rec), payloadLen);
     56a:	487e      	ldr	r0, [pc, #504]	; (764 <loop+0x5bc>)
     56c:	f003 fd88 	bl	4080 <strlen>
  if (len < 11) return false;
     570:	280a      	cmp	r0, #10
    bool ok = verifyIntelHex(rec, strlen(rec), payloadLen);
     572:	4604      	mov	r4, r0
  if (len < 11) return false;
     574:	d93c      	bls.n	5f0 <loop+0x448>
  if (rec[0] != ':') return false;
     576:	78bb      	ldrb	r3, [r7, #2]
     578:	2b3a      	cmp	r3, #58	; 0x3a
     57a:	d139      	bne.n	5f0 <loop+0x448>
  int byteCount = hexByte(rec, 1);
     57c:	2101      	movs	r1, #1
     57e:	4879      	ldr	r0, [pc, #484]	; (764 <loop+0x5bc>)
     580:	f7ff fd72 	bl	68 <hexByte(char const*, unsigned int)>
     584:	4680      	mov	r8, r0
  int addrHigh  = hexByte(rec, 3);
     586:	2103      	movs	r1, #3
     588:	4876      	ldr	r0, [pc, #472]	; (764 <loop+0x5bc>)
     58a:	f7ff fd6d 	bl	68 <hexByte(char const*, unsigned int)>
  if (byteCount < 0 || addrHigh < 0 || addrLow < 0 || recType < 0) return false;
     58e:	ea58 0300 	orrs.w	r3, r8, r0
  int addrHigh  = hexByte(rec, 3);
     592:	4681      	mov	r9, r0
  if (byteCount < 0 || addrHigh < 0 || addrLow < 0 || recType < 0) return false;
     594:	d42c      	bmi.n	5f0 <loop+0x448>
  int addrLow   = hexByte(rec, 5);
     596:	2105      	movs	r1, #5
     598:	4872      	ldr	r0, [pc, #456]	; (764 <loop+0x5bc>)
     59a:	f7ff fd65 	bl	68 <hexByte(char const*, unsigned int)>
     59e:	4683      	mov	fp, r0
  int recType   = hexByte(rec, 7);
     5a0:	2107      	movs	r1, #7
     5a2:	4870      	ldr	r0, [pc, #448]	; (764 <loop+0x5bc>)
     5a4:	f7ff fd60 	bl	68 <hexByte(char const*, unsigned int)>
  if (byteCount < 0 || addrHigh < 0 || addrLow < 0 || recType < 0) return false;
     5a8:	ea5b 0200 	orrs.w	r2, fp, r0
     5ac:	d420      	bmi.n	5f0 <loop+0x448>
  size_t dataEnd   = dataStart + (size_t)byteCount * 2u;
     5ae:	ea4f 0a48 	mov.w	sl, r8, lsl #1
  if (dataEnd + 2u > len) return false;
     5b2:	f10a 020b 	add.w	r2, sl, #11
     5b6:	4294      	cmp	r4, r2
     5b8:	d31a      	bcc.n	5f0 <loop+0x448>
  int sum = byteCount + addrHigh + addrLow + recType;
     5ba:	eb08 0409 	add.w	r4, r8, r9
  size_t dataEnd   = dataStart + (size_t)byteCount * 2u;
     5be:	f10a 0a09 	add.w	sl, sl, #9
  int sum = byteCount + addrHigh + addrLow + recType;
     5c2:	445c      	add	r4, fp
  for (size_t i = dataStart; i < dataEnd; i += 2) {
     5c4:	f1ba 0f09 	cmp.w	sl, #9
  int sum = byteCount + addrHigh + addrLow + recType;
     5c8:	4404      	add	r4, r0
  for (size_t i = dataStart; i < dataEnd; i += 2) {
     5ca:	f240 8096 	bls.w	6fa <loop+0x552>
     5ce:	f04f 0909 	mov.w	r9, #9
    int b = hexByte(rec, i);
     5d2:	f8df b190 	ldr.w	fp, [pc, #400]	; 764 <loop+0x5bc>
     5d6:	e002      	b.n	5de <loop+0x436>
  for (size_t i = dataStart; i < dataEnd; i += 2) {
     5d8:	45ca      	cmp	sl, r9
     5da:	f240 808e 	bls.w	6fa <loop+0x552>
    int b = hexByte(rec, i);
     5de:	4649      	mov	r1, r9
     5e0:	4658      	mov	r0, fp
     5e2:	f7ff fd41 	bl	68 <hexByte(char const*, unsigned int)>
    if (b < 0) return false;
     5e6:	1e03      	subs	r3, r0, #0
  for (size_t i = dataStart; i < dataEnd; i += 2) {
     5e8:	f109 0902 	add.w	r9, r9, #2
    sum += b;
     5ec:	441c      	add	r4, r3
    if (b < 0) return false;
     5ee:	daf3      	bge.n	5d8 <loop+0x430>
    hex_lines++;
     5f0:	4c53      	ldr	r4, [pc, #332]	; (740 <loop+0x598>)
     5f2:	2204      	movs	r2, #4
      hex_bad++;
     5f4:	484f      	ldr	r0, [pc, #316]	; (734 <loop+0x58c>)
    hex_lines++;
     5f6:	6823      	ldr	r3, [r4, #0]
     5f8:	495b      	ldr	r1, [pc, #364]	; (768 <loop+0x5c0>)
     5fa:	3301      	adds	r3, #1
     5fc:	6023      	str	r3, [r4, #0]
      hex_bad++;
     5fe:	6803      	ldr	r3, [r0, #0]
     600:	3301      	adds	r3, #1
     602:	6003      	str	r3, [r0, #0]
     604:	4628      	mov	r0, r5
     606:	f000 fc83 	bl	f10 <Print::write(unsigned char const*, unsigned int)>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     60a:	2300      	movs	r3, #0
     60c:	6821      	ldr	r1, [r4, #0]
     60e:	220a      	movs	r2, #10
     610:	4628      	mov	r0, r5
     612:	f000 fccf 	bl	fb4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t print(char c)				{ return write((uint8_t)c); }
     616:	e678      	b.n	30a <loop+0x162>
							  return write((const uint8_t *)str, strlen(str)); }
     618:	220d      	movs	r2, #13
     61a:	4954      	ldr	r1, [pc, #336]	; (76c <loop+0x5c4>)
     61c:	4628      	mov	r0, r5
     61e:	f000 fc77 	bl	f10 <Print::write(unsigned char const*, unsigned int)>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     622:	464b      	mov	r3, r9
     624:	f8d8 1000 	ldr.w	r1, [r8]
     628:	220a      	movs	r2, #10
     62a:	4628      	mov	r0, r5
     62c:	f000 fcc2 	bl	fb4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
							  return write((const uint8_t *)str, strlen(str)); }
     630:	2207      	movs	r2, #7
     632:	494f      	ldr	r1, [pc, #316]	; (770 <loop+0x5c8>)
     634:	4628      	mov	r0, r5
     636:	f000 fc6b 	bl	f10 <Print::write(unsigned char const*, unsigned int)>
      Serial2.print(hex_bytes);
     63a:	4a45      	ldr	r2, [pc, #276]	; (750 <loop+0x5a8>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     63c:	464b      	mov	r3, r9
     63e:	4628      	mov	r0, r5
     640:	6811      	ldr	r1, [r2, #0]
     642:	220a      	movs	r2, #10
     644:	f000 fcb6 	bl	fb4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t print(char c)				{ return write((uint8_t)c); }
     648:	210d      	movs	r1, #13
     64a:	4628      	mov	r0, r5
     64c:	f000 fb6e 	bl	d2c <HardwareSerialIMXRT::write(unsigned char)>
     650:	210a      	movs	r1, #10
     652:	4628      	mov	r0, r5
     654:	f000 fb6a 	bl	d2c <HardwareSerialIMXRT::write(unsigned char)>
							  return write((const uint8_t *)str, strlen(str)); }
     658:	2207      	movs	r2, #7
     65a:	4946      	ldr	r1, [pc, #280]	; (774 <loop+0x5cc>)
     65c:	4628      	mov	r0, r5
     65e:	f000 fc57 	bl	f10 <Print::write(unsigned char const*, unsigned int)>
	size_t print(char c)				{ return write((uint8_t)c); }
     662:	210d      	movs	r1, #13
     664:	4628      	mov	r0, r5
     666:	f000 fb61 	bl	d2c <HardwareSerialIMXRT::write(unsigned char)>
     66a:	210a      	movs	r1, #10
     66c:	4628      	mov	r0, r5
     66e:	f000 fb5d 	bl	d2c <HardwareSerialIMXRT::write(unsigned char)>
     672:	2125      	movs	r1, #37	; 0x25
     674:	4840      	ldr	r0, [pc, #256]	; (778 <loop+0x5d0>)
     676:	f002 f83d 	bl	26f4 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     67a:	4834      	ldr	r0, [pc, #208]	; (74c <loop+0x5a4>)
     67c:	f000 fc70 	bl	f60 <Print::println()>
     680:	e64b      	b.n	31a <loop+0x172>
							  return write((const uint8_t *)str, strlen(str)); }
     682:	220a      	movs	r2, #10
     684:	493d      	ldr	r1, [pc, #244]	; (77c <loop+0x5d4>)
     686:	4628      	mov	r0, r5
     688:	f000 fc42 	bl	f10 <Print::write(unsigned char const*, unsigned int)>
    Serial2.print(hex_lines);
     68c:	4b2c      	ldr	r3, [pc, #176]	; (740 <loop+0x598>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     68e:	220a      	movs	r2, #10
     690:	4628      	mov	r0, r5
     692:	6819      	ldr	r1, [r3, #0]
     694:	4623      	mov	r3, r4
     696:	f000 fc8d 	bl	fb4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
							  return write((const uint8_t *)str, strlen(str)); }
     69a:	2204      	movs	r2, #4
     69c:	4938      	ldr	r1, [pc, #224]	; (780 <loop+0x5d8>)
     69e:	4628      	mov	r0, r5
     6a0:	f000 fc36 	bl	f10 <Print::write(unsigned char const*, unsigned int)>
    Serial2.print(hex_ok);
     6a4:	4b2c      	ldr	r3, [pc, #176]	; (758 <loop+0x5b0>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     6a6:	220a      	movs	r2, #10
     6a8:	4628      	mov	r0, r5
     6aa:	6819      	ldr	r1, [r3, #0]
     6ac:	4623      	mov	r3, r4
     6ae:	f000 fc81 	bl	fb4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
							  return write((const uint8_t *)str, strlen(str)); }
     6b2:	2205      	movs	r2, #5
     6b4:	4923      	ldr	r1, [pc, #140]	; (744 <loop+0x59c>)
     6b6:	4628      	mov	r0, r5
     6b8:	f000 fc2a 	bl	f10 <Print::write(unsigned char const*, unsigned int)>
    Serial2.print(hex_bad);
     6bc:	4b1d      	ldr	r3, [pc, #116]	; (734 <loop+0x58c>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     6be:	220a      	movs	r2, #10
     6c0:	4628      	mov	r0, r5
     6c2:	6819      	ldr	r1, [r3, #0]
     6c4:	4623      	mov	r3, r4
     6c6:	f000 fc75 	bl	fb4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
							  return write((const uint8_t *)str, strlen(str)); }
     6ca:	2207      	movs	r2, #7
     6cc:	4928      	ldr	r1, [pc, #160]	; (770 <loop+0x5c8>)
     6ce:	4628      	mov	r0, r5
     6d0:	f000 fc1e 	bl	f10 <Print::write(unsigned char const*, unsigned int)>
    Serial2.print(hex_bytes);
     6d4:	4a1e      	ldr	r2, [pc, #120]	; (750 <loop+0x5a8>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     6d6:	4623      	mov	r3, r4
     6d8:	4628      	mov	r0, r5
     6da:	6811      	ldr	r1, [r2, #0]
     6dc:	220a      	movs	r2, #10
     6de:	f000 fc69 	bl	fb4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t print(char c)				{ return write((uint8_t)c); }
     6e2:	e612      	b.n	30a <loop+0x162>
							  return write((const uint8_t *)str, strlen(str)); }
     6e4:	2204      	movs	r2, #4
     6e6:	4927      	ldr	r1, [pc, #156]	; (784 <loop+0x5dc>)
     6e8:	e60c      	b.n	304 <loop+0x15c>
     6ea:	2203      	movs	r2, #3
     6ec:	4926      	ldr	r1, [pc, #152]	; (788 <loop+0x5e0>)
     6ee:	4628      	mov	r0, r5
     6f0:	f000 fc0e 	bl	f10 <Print::write(unsigned char const*, unsigned int)>
     6f4:	2210      	movs	r2, #16
     6f6:	4925      	ldr	r1, [pc, #148]	; (78c <loop+0x5e4>)
     6f8:	e604      	b.n	304 <loop+0x15c>
  int check = hexByte(rec, dataEnd);
     6fa:	4651      	mov	r1, sl
     6fc:	4819      	ldr	r0, [pc, #100]	; (764 <loop+0x5bc>)
     6fe:	f7ff fcb3 	bl	68 <hexByte(char const*, unsigned int)>
  if (check < 0) return false;
     702:	2800      	cmp	r0, #0
     704:	f6ff af74 	blt.w	5f0 <loop+0x448>
  sum = ((~sum + 1) & 0xFF);
     708:	4263      	negs	r3, r4
     70a:	b2db      	uxtb	r3, r3
  if (sum != check) return false;
     70c:	4283      	cmp	r3, r0
     70e:	f47f af6f 	bne.w	5f0 <loop+0x448>
    hex_lines++;
     712:	4c0b      	ldr	r4, [pc, #44]	; (740 <loop+0x598>)
     714:	2203      	movs	r2, #3
      hex_ok++;
     716:	4810      	ldr	r0, [pc, #64]	; (758 <loop+0x5b0>)
    hex_lines++;
     718:	6823      	ldr	r3, [r4, #0]
      hex_bytes += (uint32_t)payloadLen;
     71a:	490d      	ldr	r1, [pc, #52]	; (750 <loop+0x5a8>)
    hex_lines++;
     71c:	3301      	adds	r3, #1
     71e:	6023      	str	r3, [r4, #0]
      hex_ok++;
     720:	6803      	ldr	r3, [r0, #0]
     722:	3301      	adds	r3, #1
     724:	6003      	str	r3, [r0, #0]
      hex_bytes += (uint32_t)payloadLen;
     726:	680b      	ldr	r3, [r1, #0]
     728:	4443      	add	r3, r8
     72a:	600b      	str	r3, [r1, #0]
     72c:	4918      	ldr	r1, [pc, #96]	; (790 <loop+0x5e8>)
     72e:	e769      	b.n	604 <loop+0x45c>
     730:	2000221b 	.word	0x2000221b
     734:	20001cf4 	.word	0x20001cf4
     738:	2000221a 	.word	0x2000221a
     73c:	20000bb4 	.word	0x20000bb4
     740:	20001cfc 	.word	0x20001cfc
     744:	20000bc4 	.word	0x20000bc4
     748:	20000bcc 	.word	0x20000bcc
     74c:	20000ee0 	.word	0x20000ee0
     750:	20001cf8 	.word	0x20001cf8
     754:	20000b24 	.word	0x20000b24
     758:	20001cf0 	.word	0x20001cf0
     75c:	20000b40 	.word	0x20000b40
     760:	20000a9c 	.word	0x20000a9c
     764:	20001d36 	.word	0x20001d36
     768:	20000b60 	.word	0x20000b60
     76c:	20000b6c 	.word	0x20000b6c
     770:	20000b7c 	.word	0x20000b7c
     774:	20000b84 	.word	0x20000b84
     778:	20000b8c 	.word	0x20000b8c
     77c:	20000c10 	.word	0x20000c10
     780:	20000c1c 	.word	0x20000c1c
     784:	20000bf4 	.word	0x20000bf4
     788:	20000c04 	.word	0x20000c04
     78c:	20000370 	.word	0x20000370
     790:	20000b68 	.word	0x20000b68

00000794 <HardwareSerialIMXRT::operator bool()>:
	virtual void begin(uint32_t baud, uint32_t format) {
					  serial_begin(BAUD2DIV(baud));
					  serial_format(format); }
	*/

	operator bool()			{ return true; }
     794:	2001      	movs	r0, #1
     796:	4770      	bx	lr

00000798 <HardwareSerialIMXRT::availableForWrite()>:

int HardwareSerialIMXRT::availableForWrite(void)
{
	uint32_t head, tail;

	head = tx_buffer_head_;
     798:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
	tail = tx_buffer_tail_;
     79c:	f8b0 2048 	ldrh.w	r2, [r0, #72]	; 0x48
	head = tx_buffer_head_;
     7a0:	b29b      	uxth	r3, r3
	tail = tx_buffer_tail_;
     7a2:	b292      	uxth	r2, r2
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
     7a4:	4293      	cmp	r3, r2
     7a6:	d202      	bcs.n	7ae <HardwareSerialIMXRT::availableForWrite()+0x16>
	return tail - head - 1;
     7a8:	3a01      	subs	r2, #1
     7aa:	1ad0      	subs	r0, r2, r3
}
     7ac:	4770      	bx	lr
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
     7ae:	6b41      	ldr	r1, [r0, #52]	; 0x34
     7b0:	3901      	subs	r1, #1
     7b2:	440a      	add	r2, r1
     7b4:	1ad0      	subs	r0, r2, r3
     7b6:	4770      	bx	lr

000007b8 <HardwareSerialIMXRT::available()>:



int HardwareSerialIMXRT::available(void)
{
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
     7b8:	6901      	ldr	r1, [r0, #16]
	uint32_t head, tail;

	// WATER> 0 so IDLE involved may want to check if port has already has RX data to retrieve
	__disable_irq();
     7ba:	b672      	cpsid	i
	head = rx_buffer_head_;
     7bc:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
	tail = rx_buffer_tail_;
     7c0:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
	head = rx_buffer_head_;
     7c4:	b292      	uxth	r2, r2
	tail = rx_buffer_tail_;
     7c6:	b29b      	uxth	r3, r3
	int avail;
	if (head >= tail) avail = head - tail;
     7c8:	429a      	cmp	r2, r3
	else avail = rx_buffer_total_size_ + head - tail;	
     7ca:	bf3c      	itt	cc
     7cc:	6b80      	ldrcc	r0, [r0, #56]	; 0x38
     7ce:	1812      	addcc	r2, r2, r0
	avail += (port->WATER >> 24) & 0x7;
     7d0:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
	else avail = rx_buffer_total_size_ + head - tail;	
     7d2:	1ad3      	subs	r3, r2, r3
	__enable_irq();
     7d4:	b662      	cpsie	i
	avail += (port->WATER >> 24) & 0x7;
     7d6:	f3c0 6002 	ubfx	r0, r0, #24, #3
	return avail;
}
     7da:	4418      	add	r0, r3
     7dc:	4770      	bx	lr
     7de:	bf00      	nop

000007e0 <HardwareSerialIMXRT::peek()>:
int HardwareSerialIMXRT::peek(void)
{
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
	uint32_t head, tail;

	head = rx_buffer_head_;
     7e0:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
{
     7e4:	4602      	mov	r2, r0
	tail = rx_buffer_tail_;
     7e6:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
	head = rx_buffer_head_;
     7ea:	b289      	uxth	r1, r1
	tail = rx_buffer_tail_;
     7ec:	b29b      	uxth	r3, r3
	if (head == tail) {
     7ee:	4299      	cmp	r1, r3
{
     7f0:	b410      	push	{r4}
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
     7f2:	6904      	ldr	r4, [r0, #16]
	if (head == tail) {
     7f4:	d014      	beq.n	820 <HardwareSerialIMXRT::peek()+0x40>
			return c;
		}
		__enable_irq();

	} 
	if (++tail >= rx_buffer_total_size_) tail = 0;
     7f6:	3301      	adds	r3, #1
     7f8:	6b90      	ldr	r0, [r2, #56]	; 0x38
	if (tail < rx_buffer_size_) {
     7fa:	6b11      	ldr	r1, [r2, #48]	; 0x30
	if (++tail >= rx_buffer_total_size_) tail = 0;
     7fc:	4298      	cmp	r0, r3
     7fe:	bf98      	it	ls
     800:	2300      	movls	r3, #0
	if (tail < rx_buffer_size_) {
     802:	4299      	cmp	r1, r3
     804:	d806      	bhi.n	814 <HardwareSerialIMXRT::peek()+0x34>
		return rx_buffer_[tail];
	} else {
		return rx_buffer_storage_[tail-rx_buffer_size_];
     806:	1a5b      	subs	r3, r3, r1
     808:	6a52      	ldr	r2, [r2, #36]	; 0x24
     80a:	5cd0      	ldrb	r0, [r2, r3]
     80c:	b2c0      	uxtb	r0, r0
	}
}
     80e:	f85d 4b04 	ldr.w	r4, [sp], #4
     812:	4770      	bx	lr
		return rx_buffer_[tail];
     814:	6a12      	ldr	r2, [r2, #32]
}
     816:	f85d 4b04 	ldr.w	r4, [sp], #4
		return rx_buffer_[tail];
     81a:	5cd0      	ldrb	r0, [r2, r3]
     81c:	b2c0      	uxtb	r0, r0
}
     81e:	4770      	bx	lr
		__disable_irq();
     820:	b672      	cpsid	i
		head = rx_buffer_head_;  // reread head to make sure no ISR happened
     822:	f8b0 004a 	ldrh.w	r0, [r0, #74]	; 0x4a
     826:	b280      	uxth	r0, r0
		if (head == tail) {
     828:	4281      	cmp	r1, r0
     82a:	d001      	beq.n	830 <HardwareSerialIMXRT::peek()+0x50>
		__enable_irq();
     82c:	b662      	cpsie	i
     82e:	e7e2      	b.n	7f6 <HardwareSerialIMXRT::peek()+0x16>
			if (port->WATER & 0x7000000) {
     830:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     832:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
     836:	d103      	bne.n	840 <HardwareSerialIMXRT::peek()+0x60>
			int c = -1;	// assume nothing to return
     838:	f04f 30ff 	mov.w	r0, #4294967295
			__enable_irq();
     83c:	b662      	cpsie	i
			return c;
     83e:	e7e6      	b.n	80e <HardwareSerialIMXRT::peek()+0x2e>
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
     840:	69e3      	ldr	r3, [r4, #28]
				rx_buffer_head_ = 1;
     842:	2001      	movs	r0, #1
				rx_buffer_tail_ = 0; 
     844:	2400      	movs	r4, #0
				rx_buffer_[1] = c;
     846:	6a11      	ldr	r1, [r2, #32]
				rx_buffer_head_ = 1;
     848:	f8a2 004a 	strh.w	r0, [r2, #74]	; 0x4a
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
     84c:	f3c3 0009 	ubfx	r0, r3, #0, #10
				rx_buffer_[1] = c;
     850:	b2db      	uxtb	r3, r3
				rx_buffer_tail_ = 0; 
     852:	f8a2 404c 	strh.w	r4, [r2, #76]	; 0x4c
				rx_buffer_[1] = c;
     856:	704b      	strb	r3, [r1, #1]
     858:	e7f0      	b.n	83c <HardwareSerialIMXRT::peek()+0x5c>
     85a:	bf00      	nop

0000085c <HardwareSerialIMXRT::read()>:
{
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
	uint32_t head, tail;
	int c;

	head = rx_buffer_head_;
     85c:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
{
     860:	4602      	mov	r2, r0
	tail = rx_buffer_tail_;
     862:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
	head = rx_buffer_head_;
     866:	b289      	uxth	r1, r1
	tail = rx_buffer_tail_;
     868:	b29b      	uxth	r3, r3
	if (head == tail) {
     86a:	4299      	cmp	r1, r3
{
     86c:	b430      	push	{r4, r5}
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
     86e:	6904      	ldr	r4, [r0, #16]
	if (head == tail) {
     870:	d025      	beq.n	8be <HardwareSerialIMXRT::read()+0x62>
			return c;
		}
		__enable_irq();

	}
	if (++tail >= rx_buffer_total_size_) tail = 0;
     872:	3301      	adds	r3, #1
     874:	6b94      	ldr	r4, [r2, #56]	; 0x38
     876:	429c      	cmp	r4, r3
     878:	d916      	bls.n	8a8 <HardwareSerialIMXRT::read()+0x4c>
	if (tail < rx_buffer_size_) {
     87a:	6b10      	ldr	r0, [r2, #48]	; 0x30
		c = rx_buffer_[tail];
	} else {
		c = rx_buffer_storage_[tail-rx_buffer_size_];
	}
	rx_buffer_tail_ = tail;
     87c:	fa1f fc83 	uxth.w	ip, r3
	if (tail < rx_buffer_size_) {
     880:	4298      	cmp	r0, r3
     882:	d917      	bls.n	8b4 <HardwareSerialIMXRT::read()+0x58>
		c = rx_buffer_[tail];
     884:	6a10      	ldr	r0, [r2, #32]
     886:	5cc0      	ldrb	r0, [r0, r3]
     888:	b2c0      	uxtb	r0, r0
	if (rts_pin_baseReg_) {
     88a:	6d95      	ldr	r5, [r2, #88]	; 0x58
	rx_buffer_tail_ = tail;
     88c:	f8a2 c04c 	strh.w	ip, [r2, #76]	; 0x4c
	if (rts_pin_baseReg_) {
     890:	b145      	cbz	r5, 8a4 <HardwareSerialIMXRT::read()+0x48>
		uint32_t avail;
		if (head >= tail) avail = head - tail;
     892:	4299      	cmp	r1, r3
     894:	d31c      	bcc.n	8d0 <HardwareSerialIMXRT::read()+0x74>
     896:	1acb      	subs	r3, r1, r3
		else avail = rx_buffer_total_size_ + head - tail;

		if (avail <= rts_low_watermark_) rts_assert();
     898:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
     89a:	4299      	cmp	r1, r3
     89c:	d302      	bcc.n	8a4 <HardwareSerialIMXRT::read()+0x48>
	DIRECT_WRITE_LOW(rts_pin_baseReg_, rts_pin_bitmask_);
     89e:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
     8a0:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
	}
	return c;
}	
     8a4:	bc30      	pop	{r4, r5}
     8a6:	4770      	bx	lr
     8a8:	f04f 0c00 	mov.w	ip, #0
	if (tail < rx_buffer_size_) {
     8ac:	6b10      	ldr	r0, [r2, #48]	; 0x30
	if (++tail >= rx_buffer_total_size_) tail = 0;
     8ae:	4663      	mov	r3, ip
	if (tail < rx_buffer_size_) {
     8b0:	4298      	cmp	r0, r3
     8b2:	d8e7      	bhi.n	884 <HardwareSerialIMXRT::read()+0x28>
		c = rx_buffer_storage_[tail-rx_buffer_size_];
     8b4:	1a18      	subs	r0, r3, r0
     8b6:	6a55      	ldr	r5, [r2, #36]	; 0x24
     8b8:	5c28      	ldrb	r0, [r5, r0]
     8ba:	b2c0      	uxtb	r0, r0
     8bc:	e7e5      	b.n	88a <HardwareSerialIMXRT::read()+0x2e>
     8be:	4608      	mov	r0, r1
		__disable_irq();
     8c0:	b672      	cpsid	i
		head = rx_buffer_head_;  // reread head to make sure no ISR happened
     8c2:	f8b2 104a 	ldrh.w	r1, [r2, #74]	; 0x4a
     8c6:	b289      	uxth	r1, r1
		if (head == tail) {
     8c8:	4288      	cmp	r0, r1
     8ca:	d004      	beq.n	8d6 <HardwareSerialIMXRT::read()+0x7a>
		__enable_irq();
     8cc:	b662      	cpsie	i
     8ce:	e7d0      	b.n	872 <HardwareSerialIMXRT::read()+0x16>
		else avail = rx_buffer_total_size_ + head - tail;
     8d0:	440c      	add	r4, r1
     8d2:	1ae3      	subs	r3, r4, r3
     8d4:	e7e0      	b.n	898 <HardwareSerialIMXRT::read()+0x3c>
			if (port->WATER & 0x7000000) {
     8d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     8d8:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
     8dc:	d103      	bne.n	8e6 <HardwareSerialIMXRT::read()+0x8a>
			c = -1;	// assume nothing to return
     8de:	f04f 30ff 	mov.w	r0, #4294967295
			__enable_irq();
     8e2:	b662      	cpsie	i
			return c;
     8e4:	e7de      	b.n	8a4 <HardwareSerialIMXRT::read()+0x48>
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
     8e6:	69e0      	ldr	r0, [r4, #28]
     8e8:	f3c0 0009 	ubfx	r0, r0, #0, #10
     8ec:	e7f9      	b.n	8e2 <HardwareSerialIMXRT::read()+0x86>
     8ee:	bf00      	nop

000008f0 <HardwareSerialIMXRT::flush()>:

void HardwareSerialIMXRT::flush(void)
{
	while (transmitting_) yield(); // wait
     8f0:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
     8f4:	b143      	cbz	r3, 908 <HardwareSerialIMXRT::flush()+0x18>
{
     8f6:	b510      	push	{r4, lr}
     8f8:	4604      	mov	r4, r0
	while (transmitting_) yield(); // wait
     8fa:	f001 ff79 	bl	27f0 <yield>
     8fe:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
     902:	2b00      	cmp	r3, #0
     904:	d1f9      	bne.n	8fa <HardwareSerialIMXRT::flush()+0xa>
}
     906:	bd10      	pop	{r4, pc}
     908:	4770      	bx	lr
     90a:	bf00      	nop

0000090c <HardwareSerialIMXRT::end()>:
{
     90c:	b538      	push	{r3, r4, r5, lr}
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
     90e:	e9d0 5304 	ldrd	r5, r3, [r0, #16]
	if (!(hardware->ccm_register & hardware->ccm_value)) return;
     912:	e9d3 1203 	ldrd	r1, r2, [r3, #12]
     916:	6809      	ldr	r1, [r1, #0]
     918:	4211      	tst	r1, r2
     91a:	d028      	beq.n	96e <HardwareSerialIMXRT::end()+0x62>
	while (transmitting_) yield();  // wait for buffered data to send
     91c:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
     920:	4604      	mov	r4, r0
     922:	b132      	cbz	r2, 932 <HardwareSerialIMXRT::end()+0x26>
     924:	f001 ff64 	bl	27f0 <yield>
     928:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
     92c:	2b00      	cmp	r3, #0
     92e:	d1f9      	bne.n	924 <HardwareSerialIMXRT::end()+0x18>
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = 5;
     930:	6963      	ldr	r3, [r4, #20]
	port->CTRL = 0;	// disable the TX and RX ...
     932:	2100      	movs	r1, #0
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = 5;
     934:	4a0e      	ldr	r2, [pc, #56]	; (970 <HardwareSerialIMXRT::end()+0x64>)
	port->CTRL = 0;	// disable the TX and RX ...
     936:	61a9      	str	r1, [r5, #24]
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = 5;
     938:	7e20      	ldrb	r0, [r4, #24]
     93a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
     93e:	7d00      	ldrb	r0, [r0, #20]
     940:	eb02 1000 	add.w	r0, r2, r0, lsl #4
     944:	6845      	ldr	r5, [r0, #4]
     946:	2005      	movs	r0, #5
     948:	6028      	str	r0, [r5, #0]
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = 5;
     94a:	7e65      	ldrb	r5, [r4, #25]
     94c:	eb03 1305 	add.w	r3, r3, r5, lsl #4
     950:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
     954:	eb02 1203 	add.w	r2, r2, r3, lsl #4
	if (rts_pin_baseReg_) rts_deassert();
     958:	6da3      	ldr	r3, [r4, #88]	; 0x58
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = 5;
     95a:	6852      	ldr	r2, [r2, #4]
     95c:	6010      	str	r0, [r2, #0]
	rx_buffer_head_ = 0;
     95e:	f8a4 104a 	strh.w	r1, [r4, #74]	; 0x4a
	rx_buffer_tail_ = 0;
     962:	f8a4 104c 	strh.w	r1, [r4, #76]	; 0x4c
	if (rts_pin_baseReg_) rts_deassert();
     966:	b113      	cbz	r3, 96e <HardwareSerialIMXRT::end()+0x62>
	DIRECT_WRITE_HIGH(rts_pin_baseReg_, rts_pin_bitmask_);
     968:	6de2      	ldr	r2, [r4, #92]	; 0x5c
     96a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
     96e:	bd38      	pop	{r3, r4, r5, pc}
     970:	20000684 	.word	0x20000684

00000974 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)>:
	float base = (float)UART_CLOCK / (float)baud;
     974:	ee07 1a90 	vmov	s15, r1
     978:	ed9f 7a9a 	vldr	s14, [pc, #616]	; be4 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x270>
	for (int osr=4; osr <= 32; osr++) {
     97c:	2104      	movs	r1, #4
		int divint = (int)(div + 0.5f);
     97e:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
	float base = (float)UART_CLOCK / (float)baud;
     982:	eef8 7a67 	vcvt.f32.u32	s15, s15
	float besterr = 1e20;
     986:	ed9f 6a98 	vldr	s12, [pc, #608]	; be8 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x274>
     98a:	f641 7cff 	movw	ip, #8191	; 0x1fff
	float base = (float)UART_CLOCK / (float)baud;
     98e:	eec7 5a27 	vdiv.f32	s11, s14, s15
{
     992:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int bestosr = 4;
     996:	468e      	mov	lr, r1
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
     998:	6905      	ldr	r5, [r0, #16]
	int bestdiv = 1;
     99a:	2401      	movs	r4, #1
		float div = base / (float)osr;
     99c:	ee07 1a90 	vmov	s15, r1
     9a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
     9a4:	ee85 7aa7 	vdiv.f32	s14, s11, s15
		int divint = (int)(div + 0.5f);
     9a8:	ee77 7a05 	vadd.f32	s15, s14, s10
     9ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
     9b0:	ee17 3a90 	vmov	r3, s15
     9b4:	4563      	cmp	r3, ip
     9b6:	bfa8      	it	ge
     9b8:	4663      	movge	r3, ip
     9ba:	2b01      	cmp	r3, #1
     9bc:	bfb8      	it	lt
     9be:	2301      	movlt	r3, #1
		float err = ((float)divint - div) / div;
     9c0:	ee07 3a90 	vmov	s15, r3
     9c4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
     9c8:	ee76 6ac7 	vsub.f32	s13, s13, s14
     9cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
		if (err < 0.0f) err = -err;
     9d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
     9d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     9d8:	bf48      	it	mi
     9da:	eef1 7a67 	vnegmi.f32	s15, s15
		if (err <= besterr) {
     9de:	eef4 7ac6 	vcmpe.f32	s15, s12
     9e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     9e6:	d803      	bhi.n	9f0 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x7c>
			besterr = err;
     9e8:	eeb0 6a67 	vmov.f32	s12, s15
		if (err <= besterr) {
     9ec:	468e      	mov	lr, r1
			bestdiv = divint;
     9ee:	461c      	mov	r4, r3
	for (int osr=4; osr <= 32; osr++) {
     9f0:	3101      	adds	r1, #1
     9f2:	2921      	cmp	r1, #33	; 0x21
     9f4:	d1d2      	bne.n	99c <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x28>
	rx_buffer_head_ = 0;
     9f6:	2100      	movs	r1, #0
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
     9f8:	6943      	ldr	r3, [r0, #20]
     9fa:	f402 7600 	and.w	r6, r2, #512	; 0x200
	rx_buffer_head_ = 0;
     9fe:	f8a0 104a 	strh.w	r1, [r0, #74]	; 0x4a
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
     a02:	f8b3 c05a 	ldrh.w	ip, [r3, #90]	; 0x5a
	half_duplex_mode_ = (format & SERIAL_HALF_DUPLEX) != 0;
     a06:	428e      	cmp	r6, r1
	rx_buffer_tail_ = 0;
     a08:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
     a0c:	f8b3 6058 	ldrh.w	r6, [r3, #88]	; 0x58
	tx_buffer_head_ = 0;
     a10:	f8a0 1046 	strh.w	r1, [r0, #70]	; 0x46
	tx_buffer_tail_ = 0;
     a14:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
	transmitting_ = 0;
     a18:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
     a1c:	6b81      	ldr	r1, [r0, #56]	; 0x38
	hardware->ccm_register |= hardware->ccm_value;
     a1e:	68df      	ldr	r7, [r3, #12]
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
     a20:	eba1 0606 	sub.w	r6, r1, r6
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
     a24:	eba1 010c 	sub.w	r1, r1, ip
     a28:	e9c0 610f 	strd	r6, r1, [r0, #60]	; 0x3c
	hardware->ccm_register |= hardware->ccm_value;
     a2c:	6839      	ldr	r1, [r7, #0]
     a2e:	691e      	ldr	r6, [r3, #16]
     a30:	ea41 0106 	orr.w	r1, r1, r6
     a34:	6039      	str	r1, [r7, #0]
	half_duplex_mode_ = (format & SERIAL_HALF_DUPLEX) != 0;
     a36:	bf14      	ite	ne
     a38:	2101      	movne	r1, #1
     a3a:	2100      	moveq	r1, #0
     a3c:	7681      	strb	r1, [r0, #26]
	if (!half_duplex_mode_)  {
     a3e:	f040 80ac 	bne.w	b9a <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x226>
		*(portControlRegister(hardware->rx_pins[rx_pin_index_].pin)) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     a42:	7e01      	ldrb	r1, [r0, #24]
     a44:	4e69      	ldr	r6, [pc, #420]	; (bec <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x278>)
     a46:	eb03 1801 	add.w	r8, r3, r1, lsl #4
     a4a:	f8df 91c0 	ldr.w	r9, [pc, #448]	; c0c <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x298>
     a4e:	f898 7014 	ldrb.w	r7, [r8, #20]
		if (hardware->rx_pins[rx_pin_index_].select_input_register) {
     a52:	f8d8 a01c 	ldr.w	sl, [r8, #28]
		*(portControlRegister(hardware->rx_pins[rx_pin_index_].pin)) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     a56:	eb06 1707 	add.w	r7, r6, r7, lsl #4
     a5a:	68b9      	ldr	r1, [r7, #8]
     a5c:	f8c1 9000 	str.w	r9, [r1]
		*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = hardware->rx_pins[rx_pin_index_].mux_val;
     a60:	6879      	ldr	r1, [r7, #4]
     a62:	f8d8 7018 	ldr.w	r7, [r8, #24]
     a66:	600f      	str	r7, [r1, #0]
		if (hardware->rx_pins[rx_pin_index_].select_input_register) {
     a68:	f1ba 0f00 	cmp.w	sl, #0
     a6c:	d003      	beq.n	a76 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x102>
		 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
     a6e:	f8d8 1020 	ldr.w	r1, [r8, #32]
     a72:	f8ca 1000 	str.w	r1, [sl]
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
     a76:	7e47      	ldrb	r7, [r0, #25]
     a78:	21d9      	movs	r1, #217	; 0xd9
     a7a:	eb03 1807 	add.w	r8, r3, r7, lsl #4
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3) 
     a7e:	f898 c034 	ldrb.w	ip, [r8, #52]	; 0x34
     a82:	eb06 1c0c 	add.w	ip, r6, ip, lsl #4
     a86:	f8dc 7008 	ldr.w	r7, [ip, #8]
     a8a:	6039      	str	r1, [r7, #0]
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
     a8c:	f8dc 1004 	ldr.w	r1, [ip, #4]
     a90:	f8d8 7038 	ldr.w	r7, [r8, #56]	; 0x38
     a94:	600f      	str	r7, [r1, #0]
	if (hardware->tx_pins[tx_pin_index_].select_input_register) {
     a96:	7e41      	ldrb	r1, [r0, #25]
     a98:	eb03 1101 	add.w	r1, r3, r1, lsl #4
     a9c:	6bcf      	ldr	r7, [r1, #60]	; 0x3c
     a9e:	b10f      	cbz	r7, aa4 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x130>
	 	*(hardware->tx_pins[tx_pin_index_].select_input_register) =  hardware->tx_pins[tx_pin_index_].select_val;		
     aa0:	6c09      	ldr	r1, [r1, #64]	; 0x40
     aa2:	6039      	str	r1, [r7, #0]
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
     aa4:	f10e 31ff 	add.w	r1, lr, #4294967295
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
     aa8:	f1be 0f08 	cmp.w	lr, #8
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
     aac:	ea4f 6101 	mov.w	r1, r1, lsl #24
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
     ab0:	bfcc      	ite	gt
     ab2:	f04f 0e00 	movgt.w	lr, #0
     ab6:	f04f 0e01 	movle.w	lr, #1
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
     aba:	f001 51f8 	and.w	r1, r1, #520093696	; 0x1f000000
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
     abe:	ea44 444e 	orr.w	r4, r4, lr, lsl #17
     ac2:	4321      	orrs	r1, r4
	attachInterruptVector(hardware->irq, hardware->irq_handler);
     ac4:	685c      	ldr	r4, [r3, #4]
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
     ac6:	6129      	str	r1, [r5, #16]
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
     ac8:	7859      	ldrb	r1, [r3, #1]
     aca:	f101 0310 	add.w	r3, r1, #16
	port->PINCFG = 0;
     ace:	2100      	movs	r1, #0
     ad0:	60e9      	str	r1, [r5, #12]
     ad2:	4947      	ldr	r1, [pc, #284]	; (bf0 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x27c>)
     ad4:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
     ad8:	6941      	ldr	r1, [r0, #20]
	NVIC_ENABLE_IRQ(hardware->irq);
     ada:	f04f 0e01 	mov.w	lr, #1
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
     ade:	4c45      	ldr	r4, [pc, #276]	; (bf4 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x280>)
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
     ae0:	f002 0c03 	and.w	ip, r2, #3
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
     ae4:	784f      	ldrb	r7, [r1, #1]
     ae6:	f891 1056 	ldrb.w	r1, [r1, #86]	; 0x56
	NVIC_ENABLE_IRQ(hardware->irq);
     aea:	4b43      	ldr	r3, [pc, #268]	; (bf8 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x284>)
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
     aec:	5539      	strb	r1, [r7, r4]
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
     aee:	f04f 1702 	mov.w	r7, #131074	; 0x20002
	NVIC_ENABLE_IRQ(hardware->irq);
     af2:	6944      	ldr	r4, [r0, #20]
     af4:	7861      	ldrb	r1, [r4, #1]
     af6:	eb03 1351 	add.w	r3, r3, r1, lsr #5
     afa:	f001 011f 	and.w	r1, r1, #31
     afe:	009b      	lsls	r3, r3, #2
     b00:	fa0e f101 	lsl.w	r1, lr, r1
     b04:	6019      	str	r1, [r3, #0]
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
     b06:	62ef      	str	r7, [r5, #44]	; 0x2c
	port->FIFO |= LPUART_FIFO_TXFE | LPUART_FIFO_RXFE;
     b08:	6aab      	ldr	r3, [r5, #40]	; 0x28
     b0a:	f043 0388 	orr.w	r3, r3, #136	; 0x88
     b0e:	62ab      	str	r3, [r5, #40]	; 0x28
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
     b10:	0753      	lsls	r3, r2, #29
     b12:	d43e      	bmi.n	b92 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x21e>
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
     b14:	f44c 1370 	orr.w	r3, ip, #3932160	; 0x3c0000
	if ((format & 0x0F) == 0x04) ctrl |=  LPUART_CTRL_R9T8; // 8N2 is 9 bit with 9th bit always 1
     b18:	f002 010f 	and.w	r1, r2, #15
     b1c:	2904      	cmp	r1, #4
     b1e:	bf08      	it	eq
     b20:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
	if (format & 0x20) {
     b24:	0697      	lsls	r7, r2, #26
     b26:	d52e      	bpl.n	b86 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x212>
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
     b28:	7e81      	ldrb	r1, [r0, #26]
		ctrl |= LPUART_CTRL_TXINV;		// tx invert
     b2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
     b2e:	2900      	cmp	r1, #0
     b30:	d13a      	bne.n	ba8 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x234>
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
     b32:	0716      	lsls	r6, r2, #28
	port->CTRL = ctrl;
     b34:	61ab      	str	r3, [r5, #24]
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
     b36:	d503      	bpl.n	b40 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1cc>
     b38:	692b      	ldr	r3, [r5, #16]
     b3a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
     b3e:	612b      	str	r3, [r5, #16]
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
     b40:	696b      	ldr	r3, [r5, #20]
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
     b42:	06d1      	lsls	r1, r2, #27
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
     b44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
     b48:	bf48      	it	mi
     b4a:	f043 5380 	orrmi.w	r3, r3, #268435456	; 0x10000000
	port->STAT = c;
     b4e:	616b      	str	r3, [r5, #20]
	if ( format & 0x100) port->BAUD |= LPUART_BAUD_SBNS;	
     b50:	05d3      	lsls	r3, r2, #23
     b52:	d503      	bpl.n	b5c <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1e8>
     b54:	692b      	ldr	r3, [r5, #16]
     b56:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     b5a:	612b      	str	r3, [r5, #16]
	if (hardware->_serialEvent) addToSerialEventsList();
     b5c:	68a3      	ldr	r3, [r4, #8]
     b5e:	b183      	cbz	r3, b82 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x20e>
	//digitalWrite(4, LOW);
}


void HardwareSerialIMXRT::addToSerialEventsList() {
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
     b60:	4e26      	ldr	r6, [pc, #152]	; (bfc <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x288>)
     b62:	7834      	ldrb	r4, [r6, #0]
     b64:	2c00      	cmp	r4, #0
     b66:	d03a      	beq.n	bde <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x26a>
     b68:	1e61      	subs	r1, r4, #1
     b6a:	4d25      	ldr	r5, [pc, #148]	; (c00 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x28c>)
     b6c:	b2c9      	uxtb	r1, r1
     b6e:	1f2b      	subs	r3, r5, #4
     b70:	eb05 0181 	add.w	r1, r5, r1, lsl #2
     b74:	e001      	b.n	b7a <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x206>
     b76:	4299      	cmp	r1, r3
     b78:	d025      	beq.n	bc6 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x252>
		if (s_serials_with_serial_events[i] == this) return; // already in the list.
     b7a:	f853 2f04 	ldr.w	r2, [r3, #4]!
     b7e:	4290      	cmp	r0, r2
     b80:	d1f9      	bne.n	b76 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x202>
};
     b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
     b86:	7e81      	ldrb	r1, [r0, #26]
     b88:	2900      	cmp	r1, #0
     b8a:	d0d2      	beq.n	b32 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1be>
     b8c:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
     b90:	e7cf      	b.n	b32 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1be>
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
     b92:	4b1c      	ldr	r3, [pc, #112]	; (c04 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x290>)
     b94:	ea4c 0303 	orr.w	r3, ip, r3
     b98:	e7be      	b.n	b18 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1a4>
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3) 
     b9a:	7e47      	ldrb	r7, [r0, #25]
     b9c:	f24f 01d9 	movw	r1, #61657	; 0xf0d9
     ba0:	4e12      	ldr	r6, [pc, #72]	; (bec <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x278>)
     ba2:	eb03 1807 	add.w	r8, r3, r7, lsl #4
     ba6:	e76a      	b.n	a7e <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x10a>
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
     ba8:	7e41      	ldrb	r1, [r0, #25]
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
     baa:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
     bae:	eb04 1101 	add.w	r1, r4, r1, lsl #4
     bb2:	f891 1034 	ldrb.w	r1, [r1, #52]	; 0x34
     bb6:	eb06 1601 	add.w	r6, r6, r1, lsl #4
     bba:	68b6      	ldr	r6, [r6, #8]
     bbc:	6831      	ldr	r1, [r6, #0]
     bbe:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
     bc2:	6031      	str	r1, [r6, #0]
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
     bc4:	e7b5      	b.n	b32 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1be>
	}
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
     bc6:	1c63      	adds	r3, r4, #1
     bc8:	b2db      	uxtb	r3, r3
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
     bca:	4a0f      	ldr	r2, [pc, #60]	; (c08 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x294>)
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
     bcc:	7033      	strb	r3, [r6, #0]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
     bce:	7813      	ldrb	r3, [r2, #0]
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
     bd0:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
     bd4:	f043 0302 	orr.w	r3, r3, #2
     bd8:	7013      	strb	r3, [r2, #0]
};
     bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
     bde:	2301      	movs	r3, #1
     be0:	4d07      	ldr	r5, [pc, #28]	; (c00 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x28c>)
     be2:	e7f2      	b.n	bca <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x256>
     be4:	4bb71b00 	.word	0x4bb71b00
     be8:	60ad78ec 	.word	0x60ad78ec
     bec:	20000684 	.word	0x20000684
     bf0:	20001800 	.word	0x20001800
     bf4:	e000e400 	.word	0xe000e400
     bf8:	38003840 	.word	0x38003840
     bfc:	2000221d 	.word	0x2000221d
     c00:	20001d10 	.word	0x20001d10
     c04:	003c0010 	.word	0x003c0010
     c08:	2000222b 	.word	0x2000222b
     c0c:	0001f038 	.word	0x0001f038

00000c10 <nvic_execution_priority()>:
	__asm__ volatile("mrs %0, faultmask\n" : "=r" (faultmask)::);
     c10:	f3ef 8013 	mrs	r0, FAULTMASK
	if (faultmask) return -1;
     c14:	b9b8      	cbnz	r0, c46 <nvic_execution_priority()+0x36>
	__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
     c16:	f3ef 8310 	mrs	r3, PRIMASK
	if (primask) return 0;
     c1a:	b94b      	cbnz	r3, c30 <nvic_execution_priority()+0x20>
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
     c1c:	f3ef 8205 	mrs	r2, IPSR
	if (ipsr) {
     c20:	b93a      	cbnz	r2, c32 <nvic_execution_priority()+0x22>
	uint32_t priority=256;
     c22:	f44f 7380 	mov.w	r3, #256	; 0x100
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
     c26:	f3ef 8011 	mrs	r0, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
     c2a:	b150      	cbz	r0, c42 <nvic_execution_priority()+0x32>
     c2c:	4298      	cmp	r0, r3
     c2e:	d208      	bcs.n	c42 <nvic_execution_priority()+0x32>
}
     c30:	4770      	bx	lr
		if (ipsr < 16) priority = 0; // could be non-zero
     c32:	2a0f      	cmp	r2, #15
     c34:	d9f7      	bls.n	c26 <nvic_execution_priority()+0x16>
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
     c36:	4b05      	ldr	r3, [pc, #20]	; (c4c <nvic_execution_priority()+0x3c>)
     c38:	5c9b      	ldrb	r3, [r3, r2]
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
     c3a:	f3ef 8011 	mrs	r0, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
     c3e:	2800      	cmp	r0, #0
     c40:	d1f4      	bne.n	c2c <nvic_execution_priority()+0x1c>
     c42:	4618      	mov	r0, r3
	return priority;
     c44:	4770      	bx	lr
	if (faultmask) return -1;
     c46:	f04f 30ff 	mov.w	r0, #4294967295
     c4a:	e7f1      	b.n	c30 <nvic_execution_priority()+0x20>
     c4c:	e000e3f0 	.word	0xe000e3f0

00000c50 <HardwareSerialIMXRT::write9bit(unsigned long)>:
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
     c50:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
     c52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     c56:	4604      	mov	r4, r0
     c58:	460f      	mov	r7, r1
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
     c5a:	6906      	ldr	r6, [r0, #16]
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
     c5c:	b113      	cbz	r3, c64 <HardwareSerialIMXRT::write9bit(unsigned long)+0x14>
     c5e:	6d42      	ldr	r2, [r0, #84]	; 0x54
     c60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	if(half_duplex_mode_) {		
     c64:	7ea3      	ldrb	r3, [r4, #26]
     c66:	b12b      	cbz	r3, c74 <HardwareSerialIMXRT::write9bit(unsigned long)+0x24>
		__disable_irq();
     c68:	b672      	cpsid	i
	    port->CTRL |= LPUART_CTRL_TXDIR;
     c6a:	69b3      	ldr	r3, [r6, #24]
     c6c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
     c70:	61b3      	str	r3, [r6, #24]
		__enable_irq();
     c72:	b662      	cpsie	i
	head = tx_buffer_head_;
     c74:	f8b4 5046 	ldrh.w	r5, [r4, #70]	; 0x46
	if (++head >= tx_buffer_total_size_) head = 0;
     c78:	6b63      	ldr	r3, [r4, #52]	; 0x34
	head = tx_buffer_head_;
     c7a:	b2ad      	uxth	r5, r5
	if (++head >= tx_buffer_total_size_) head = 0;
     c7c:	3501      	adds	r5, #1
     c7e:	42ab      	cmp	r3, r5
     c80:	d84c      	bhi.n	d1c <HardwareSerialIMXRT::write9bit(unsigned long)+0xcc>
     c82:	f04f 0800 	mov.w	r8, #0
     c86:	4645      	mov	r5, r8
	while (tx_buffer_tail_ == head) {
     c88:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
     c8c:	b29b      	uxth	r3, r3
     c8e:	429d      	cmp	r5, r3
     c90:	d019      	beq.n	cc6 <HardwareSerialIMXRT::write9bit(unsigned long)+0x76>
     c92:	e028      	b.n	ce6 <HardwareSerialIMXRT::write9bit(unsigned long)+0x96>
			if ((port->STAT & LPUART_STAT_TDRE)) {
     c94:	6973      	ldr	r3, [r6, #20]
     c96:	021b      	lsls	r3, r3, #8
     c98:	d510      	bpl.n	cbc <HardwareSerialIMXRT::write9bit(unsigned long)+0x6c>
				uint32_t tail = tx_buffer_tail_;
     c9a:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
				if (++tail >= tx_buffer_total_size_) tail = 0;
     c9e:	6b62      	ldr	r2, [r4, #52]	; 0x34
				uint32_t tail = tx_buffer_tail_;
     ca0:	b29b      	uxth	r3, r3
				if (++tail >= tx_buffer_total_size_) tail = 0;
     ca2:	3301      	adds	r3, #1
     ca4:	429a      	cmp	r2, r3
     ca6:	d936      	bls.n	d16 <HardwareSerialIMXRT::write9bit(unsigned long)+0xc6>
				tx_buffer_tail_ = tail;
     ca8:	b29a      	uxth	r2, r3
				if (tail < tx_buffer_size_) {
     caa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
     cac:	4299      	cmp	r1, r3
     cae:	d92d      	bls.n	d0c <HardwareSerialIMXRT::write9bit(unsigned long)+0xbc>
					n = tx_buffer_[tail];
     cb0:	69e1      	ldr	r1, [r4, #28]
     cb2:	5ccb      	ldrb	r3, [r1, r3]
     cb4:	b2db      	uxtb	r3, r3
				port->DATA  = n;
     cb6:	61f3      	str	r3, [r6, #28]
				tx_buffer_tail_ = tail;
     cb8:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
	while (tx_buffer_tail_ == head) {
     cbc:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
     cc0:	b29b      	uxth	r3, r3
     cc2:	42ab      	cmp	r3, r5
     cc4:	d10f      	bne.n	ce6 <HardwareSerialIMXRT::write9bit(unsigned long)+0x96>
		int priority = nvic_execution_priority();
     cc6:	f7ff ffa3 	bl	c10 <nvic_execution_priority()>
		if (priority <= hardware->irq_priority) {
     cca:	6963      	ldr	r3, [r4, #20]
     ccc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
     cd0:	4283      	cmp	r3, r0
     cd2:	dadf      	bge.n	c94 <HardwareSerialIMXRT::write9bit(unsigned long)+0x44>
		} else if (priority >= 256) 
     cd4:	28ff      	cmp	r0, #255	; 0xff
     cd6:	ddf1      	ble.n	cbc <HardwareSerialIMXRT::write9bit(unsigned long)+0x6c>
			yield(); // wait
     cd8:	f001 fd8a 	bl	27f0 <yield>
	while (tx_buffer_tail_ == head) {
     cdc:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
     ce0:	b29b      	uxth	r3, r3
     ce2:	42ab      	cmp	r3, r5
     ce4:	d0ef      	beq.n	cc6 <HardwareSerialIMXRT::write9bit(unsigned long)+0x76>
	if (head < tx_buffer_size_) {
     ce6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     ce8:	42ab      	cmp	r3, r5
     cea:	d91a      	bls.n	d22 <HardwareSerialIMXRT::write9bit(unsigned long)+0xd2>
		tx_buffer_[head] = c;
     cec:	b2ff      	uxtb	r7, r7
     cee:	69e3      	ldr	r3, [r4, #28]
     cf0:	555f      	strb	r7, [r3, r5]
	__disable_irq();
     cf2:	b672      	cpsid	i
	transmitting_ = 1;
     cf4:	2001      	movs	r0, #1
     cf6:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
	tx_buffer_head_ = head;
     cfa:	f8a4 8046 	strh.w	r8, [r4, #70]	; 0x46
	port->CTRL |= LPUART_CTRL_TIE; // (may need to handle this issue)BITBAND_SET_BIT(LPUART0_CTRL, TIE_BIT);
     cfe:	69b3      	ldr	r3, [r6, #24]
     d00:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
     d04:	61b3      	str	r3, [r6, #24]
	__enable_irq();
     d06:	b662      	cpsie	i
}
     d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					n = tx_buffer_storage_[tail-tx_buffer_size_];
     d0c:	1a5b      	subs	r3, r3, r1
     d0e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
     d10:	5ccb      	ldrb	r3, [r1, r3]
     d12:	b2db      	uxtb	r3, r3
     d14:	e7cf      	b.n	cb6 <HardwareSerialIMXRT::write9bit(unsigned long)+0x66>
     d16:	2200      	movs	r2, #0
				if (++tail >= tx_buffer_total_size_) tail = 0;
     d18:	4613      	mov	r3, r2
     d1a:	e7c6      	b.n	caa <HardwareSerialIMXRT::write9bit(unsigned long)+0x5a>
	tx_buffer_head_ = head;
     d1c:	fa1f f885 	uxth.w	r8, r5
     d20:	e7b2      	b.n	c88 <HardwareSerialIMXRT::write9bit(unsigned long)+0x38>
		tx_buffer_storage_[head - tx_buffer_size_] = c;
     d22:	1aed      	subs	r5, r5, r3
     d24:	b2ff      	uxtb	r7, r7
     d26:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     d28:	555f      	strb	r7, [r3, r5]
     d2a:	e7e2      	b.n	cf2 <HardwareSerialIMXRT::write9bit(unsigned long)+0xa2>

00000d2c <HardwareSerialIMXRT::write(unsigned char)>:
	return write9bit(c);
     d2c:	f7ff bf90 	b.w	c50 <HardwareSerialIMXRT::write9bit(unsigned long)>

00000d30 <HardwareSerialIMXRT::IRQHandler()>:
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
     d30:	6902      	ldr	r2, [r0, #16]
	if (port->STAT & (LPUART_STAT_RDRF | LPUART_STAT_IDLE)) {
     d32:	6953      	ldr	r3, [r2, #20]
     d34:	f413 1f40 	tst.w	r3, #3145728	; 0x300000
{
     d38:	b570      	push	{r4, r5, r6, lr}
	if (port->STAT & (LPUART_STAT_RDRF | LPUART_STAT_IDLE)) {
     d3a:	d043      	beq.n	dc4 <HardwareSerialIMXRT::IRQHandler()+0x94>
		uint8_t avail = (port->WATER >> 24) & 0x7;
     d3c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
		if (avail) {
     d3e:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
		uint8_t avail = (port->WATER >> 24) & 0x7;
     d42:	f3c3 6e02 	ubfx	lr, r3, #24, #3
		if (avail) {
     d46:	d03a      	beq.n	dbe <HardwareSerialIMXRT::IRQHandler()+0x8e>
			head = rx_buffer_head_;
     d48:	f8b0 504a 	ldrh.w	r5, [r0, #74]	; 0x4a
			tail = rx_buffer_tail_;
     d4c:	f8b0 604c 	ldrh.w	r6, [r0, #76]	; 0x4c
			head = rx_buffer_head_;
     d50:	b2ad      	uxth	r5, r5
			tail = rx_buffer_tail_;
     d52:	b2b6      	uxth	r6, r6
     d54:	e007      	b.n	d66 <HardwareSerialIMXRT::IRQHandler()+0x36>
						rx_buffer_[head] = n;
     d56:	6a01      	ldr	r1, [r0, #32]
     d58:	f801 c003 	strb.w	ip, [r1, r3]
			} while (--avail > 0) ;
     d5c:	f10e 33ff 	add.w	r3, lr, #4294967295
     d60:	f013 0eff 	ands.w	lr, r3, #255	; 0xff
     d64:	d01d      	beq.n	da2 <HardwareSerialIMXRT::IRQHandler()+0x72>
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
     d66:	69d1      	ldr	r1, [r2, #28]
				newhead = head + 1;
     d68:	1c6b      	adds	r3, r5, #1
				if (newhead >= rx_buffer_total_size_) newhead = 0;
     d6a:	6b84      	ldr	r4, [r0, #56]	; 0x38
				if (newhead != rx_buffer_tail_) {
     d6c:	f8b0 c04c 	ldrh.w	ip, [r0, #76]	; 0x4c
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
     d70:	f3c1 0109 	ubfx	r1, r1, #0, #10
				if (newhead >= rx_buffer_total_size_) newhead = 0;
     d74:	429c      	cmp	r4, r3
     d76:	bf98      	it	ls
     d78:	2300      	movls	r3, #0
				if (newhead != rx_buffer_tail_) {
     d7a:	fa1f fc8c 	uxth.w	ip, ip
     d7e:	459c      	cmp	ip, r3
     d80:	d0ec      	beq.n	d5c <HardwareSerialIMXRT::IRQHandler()+0x2c>
					if (newhead < rx_buffer_size_) {
     d82:	6b04      	ldr	r4, [r0, #48]	; 0x30
						rx_buffer_[head] = n;
     d84:	fa5f fc81 	uxtb.w	ip, r1
     d88:	461d      	mov	r5, r3
					if (newhead < rx_buffer_size_) {
     d8a:	429c      	cmp	r4, r3
						rx_buffer_storage_[head-rx_buffer_size_] = n;
     d8c:	eba3 0404 	sub.w	r4, r3, r4
					if (newhead < rx_buffer_size_) {
     d90:	d8e1      	bhi.n	d56 <HardwareSerialIMXRT::IRQHandler()+0x26>
						rx_buffer_storage_[head-rx_buffer_size_] = n;
     d92:	6a43      	ldr	r3, [r0, #36]	; 0x24
     d94:	f803 c004 	strb.w	ip, [r3, r4]
			} while (--avail > 0) ;
     d98:	f10e 33ff 	add.w	r3, lr, #4294967295
     d9c:	f013 0eff 	ands.w	lr, r3, #255	; 0xff
     da0:	d1e1      	bne.n	d66 <HardwareSerialIMXRT::IRQHandler()+0x36>
			rx_buffer_head_ = head;
     da2:	b2ab      	uxth	r3, r5
     da4:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
			if (rts_pin_baseReg_) {
     da8:	6d83      	ldr	r3, [r0, #88]	; 0x58
     daa:	b143      	cbz	r3, dbe <HardwareSerialIMXRT::IRQHandler()+0x8e>
				if (head >= tail) avail = head - tail;
     dac:	42b5      	cmp	r5, r6
     dae:	d354      	bcc.n	e5a <HardwareSerialIMXRT::IRQHandler()+0x12a>
     db0:	1bad      	subs	r5, r5, r6
				if (avail >= rts_high_watermark_) rts_deassert();
     db2:	6c01      	ldr	r1, [r0, #64]	; 0x40
     db4:	42a9      	cmp	r1, r5
     db6:	d802      	bhi.n	dbe <HardwareSerialIMXRT::IRQHandler()+0x8e>
	DIRECT_WRITE_HIGH(rts_pin_baseReg_, rts_pin_bitmask_);
     db8:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
     dba:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		if (port->STAT & LPUART_STAT_IDLE) {
     dbe:	6953      	ldr	r3, [r2, #20]
     dc0:	02d9      	lsls	r1, r3, #11
     dc2:	d445      	bmi.n	e50 <HardwareSerialIMXRT::IRQHandler()+0x120>
	ctrl = port->CTRL;
     dc4:	6996      	ldr	r6, [r2, #24]
	if ((ctrl & LPUART_CTRL_TIE) && (port->STAT & LPUART_STAT_TDRE))
     dc6:	0233      	lsls	r3, r6, #8
     dc8:	d528      	bpl.n	e1c <HardwareSerialIMXRT::IRQHandler()+0xec>
     dca:	6953      	ldr	r3, [r2, #20]
     dcc:	021d      	lsls	r5, r3, #8
     dce:	d525      	bpl.n	e1c <HardwareSerialIMXRT::IRQHandler()+0xec>
		head = tx_buffer_head_;
     dd0:	f8b0 5046 	ldrh.w	r5, [r0, #70]	; 0x46
		tail = tx_buffer_tail_;
     dd4:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
		head = tx_buffer_head_;
     dd8:	b2ad      	uxth	r5, r5
		tail = tx_buffer_tail_;
     dda:	b29b      	uxth	r3, r3
     ddc:	e006      	b.n	dec <HardwareSerialIMXRT::IRQHandler()+0xbc>
				n = tx_buffer_[tail];
     dde:	69c1      	ldr	r1, [r0, #28]
     de0:	5cc9      	ldrb	r1, [r1, r3]
     de2:	b2c9      	uxtb	r1, r1
			port->DATA = n;
     de4:	61d1      	str	r1, [r2, #28]
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
     de6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
     de8:	054c      	lsls	r4, r1, #21
     dea:	d412      	bmi.n	e12 <HardwareSerialIMXRT::IRQHandler()+0xe2>
			if (head == tail) break;
     dec:	42ab      	cmp	r3, r5
     dee:	d038      	beq.n	e62 <HardwareSerialIMXRT::IRQHandler()+0x132>
			if (++tail >= tx_buffer_total_size_) tail = 0;
     df0:	6b44      	ldr	r4, [r0, #52]	; 0x34
     df2:	3301      	adds	r3, #1
			if (tail < tx_buffer_size_) {
     df4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			if (++tail >= tx_buffer_total_size_) tail = 0;
     df6:	429c      	cmp	r4, r3
     df8:	bf98      	it	ls
     dfa:	2300      	movls	r3, #0
			if (tail < tx_buffer_size_) {
     dfc:	4299      	cmp	r1, r3
				n = tx_buffer_storage_[tail-tx_buffer_size_];
     dfe:	eba3 0401 	sub.w	r4, r3, r1
			if (tail < tx_buffer_size_) {
     e02:	d8ec      	bhi.n	dde <HardwareSerialIMXRT::IRQHandler()+0xae>
				n = tx_buffer_storage_[tail-tx_buffer_size_];
     e04:	6a81      	ldr	r1, [r0, #40]	; 0x28
     e06:	5d09      	ldrb	r1, [r1, r4]
     e08:	b2c9      	uxtb	r1, r1
			port->DATA = n;
     e0a:	61d1      	str	r1, [r2, #28]
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
     e0c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
     e0e:	054c      	lsls	r4, r1, #21
     e10:	d5ec      	bpl.n	dec <HardwareSerialIMXRT::IRQHandler()+0xbc>
		tx_buffer_tail_ = tail;
     e12:	b299      	uxth	r1, r3
		if (head == tail) {
     e14:	42ab      	cmp	r3, r5
		tx_buffer_tail_ = tail;
     e16:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
		if (head == tail) {
     e1a:	d025      	beq.n	e68 <HardwareSerialIMXRT::IRQHandler()+0x138>
	if ((ctrl & LPUART_CTRL_TCIE) && (port->STAT & LPUART_STAT_TC))
     e1c:	0271      	lsls	r1, r6, #9
     e1e:	d516      	bpl.n	e4e <HardwareSerialIMXRT::IRQHandler()+0x11e>
     e20:	6953      	ldr	r3, [r2, #20]
     e22:	025b      	lsls	r3, r3, #9
     e24:	d513      	bpl.n	e4e <HardwareSerialIMXRT::IRQHandler()+0x11e>
		transmitting_ = 0;
     e26:	2100      	movs	r1, #0
		if (transmit_pin_baseReg_) DIRECT_WRITE_LOW(transmit_pin_baseReg_, transmit_pin_bitmask_);
     e28:	6d03      	ldr	r3, [r0, #80]	; 0x50
		transmitting_ = 0;
     e2a:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
		if (transmit_pin_baseReg_) DIRECT_WRITE_LOW(transmit_pin_baseReg_, transmit_pin_bitmask_);
     e2e:	b113      	cbz	r3, e36 <HardwareSerialIMXRT::IRQHandler()+0x106>
     e30:	6d41      	ldr	r1, [r0, #84]	; 0x54
     e32:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
		if(half_duplex_mode_) {		
     e36:	7e83      	ldrb	r3, [r0, #26]
     e38:	b12b      	cbz	r3, e46 <HardwareSerialIMXRT::IRQHandler()+0x116>
			__disable_irq();
     e3a:	b672      	cpsid	i
		    port->CTRL &= ~LPUART_CTRL_TXDIR;
     e3c:	6993      	ldr	r3, [r2, #24]
     e3e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
     e42:	6193      	str	r3, [r2, #24]
			__enable_irq();
     e44:	b662      	cpsie	i
		port->CTRL &= ~LPUART_CTRL_TCIE;
     e46:	6993      	ldr	r3, [r2, #24]
     e48:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
     e4c:	6193      	str	r3, [r2, #24]
}
     e4e:	bd70      	pop	{r4, r5, r6, pc}
			port->STAT |= LPUART_STAT_IDLE;	// writing a 1 to idle should clear it. 
     e50:	6953      	ldr	r3, [r2, #20]
     e52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     e56:	6153      	str	r3, [r2, #20]
     e58:	e7b4      	b.n	dc4 <HardwareSerialIMXRT::IRQHandler()+0x94>
				else avail = rx_buffer_total_size_ + head - tail;
     e5a:	6b81      	ldr	r1, [r0, #56]	; 0x38
     e5c:	1b89      	subs	r1, r1, r6
     e5e:	440d      	add	r5, r1
     e60:	e7a7      	b.n	db2 <HardwareSerialIMXRT::IRQHandler()+0x82>
		tx_buffer_tail_ = tail;
     e62:	b29b      	uxth	r3, r3
     e64:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
			port->CTRL &= ~LPUART_CTRL_TIE; 
     e68:	6993      	ldr	r3, [r2, #24]
     e6a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
     e6e:	6193      	str	r3, [r2, #24]
  			port->CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
     e70:	6993      	ldr	r3, [r2, #24]
     e72:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
     e76:	6193      	str	r3, [r2, #24]
     e78:	e7d0      	b.n	e1c <HardwareSerialIMXRT::IRQHandler()+0xec>
     e7a:	bf00      	nop

00000e7c <IRQHandler_Serial2>:
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest


void IRQHandler_Serial2()
{
	Serial2.IRQHandler();
     e7c:	4801      	ldr	r0, [pc, #4]	; (e84 <IRQHandler_Serial2+0x8>)
     e7e:	f7ff bf57 	b.w	d30 <HardwareSerialIMXRT::IRQHandler()>
     e82:	bf00      	nop
     e84:	20000ef0 	.word	0x20000ef0

00000e88 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
     e88:	4608      	mov	r0, r1
     e8a:	f001 bc1d 	b.w	26c8 <usb_serial_putchar>
     e8e:	bf00      	nop

00000e90 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>:
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
     e90:	2a01      	cmp	r2, #1
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
     e92:	b570      	push	{r4, r5, r6, lr}
		base = 10;
     e94:	bf08      	it	eq
     e96:	220a      	moveq	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
     e98:	b08a      	sub	sp, #40	; 0x28
	}


	if (n == 0) {
     e9a:	b391      	cbz	r1, f02 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x72>
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
     e9c:	f04f 0e21 	mov.w	lr, #33	; 0x21
     ea0:	e001      	b.n	ea6 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x16>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
     ea2:	fa5f fe86 	uxtb.w	lr, r6
     ea6:	f10e 36ff 	add.w	r6, lr, #4294967295
			digit = n % base;
     eaa:	fbb1 f5f2 	udiv	r5, r1, r2
     eae:	fb02 1415 	mls	r4, r2, r5, r1
     eb2:	fa5f fc84 	uxtb.w	ip, r4
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
     eb6:	2c09      	cmp	r4, #9
     eb8:	f10c 0437 	add.w	r4, ip, #55	; 0x37
     ebc:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
     ec0:	bf98      	it	ls
     ec2:	fa5f f48c 	uxtbls.w	r4, ip
     ec6:	f10e 0c28 	add.w	ip, lr, #40	; 0x28
     eca:	bf88      	it	hi
     ecc:	b2e4      	uxtbhi	r4, r4
			if (n == 0) break;
     ece:	4291      	cmp	r1, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
     ed0:	44ec      	add	ip, sp
			n /= base;
     ed2:	4629      	mov	r1, r5
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
     ed4:	f80c 4c24 	strb.w	r4, [ip, #-36]
			if (n == 0) break;
     ed8:	d2e3      	bcs.n	ea2 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x12>
		}
	}
	if (sign) {
     eda:	b14b      	cbz	r3, ef0 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x60>
		i--;
     edc:	f10e 3eff 	add.w	lr, lr, #4294967295
		buf[i] = '-';
     ee0:	222d      	movs	r2, #45	; 0x2d
		i--;
     ee2:	fa5f fe8e 	uxtb.w	lr, lr
		buf[i] = '-';
     ee6:	f10e 0328 	add.w	r3, lr, #40	; 0x28
     eea:	446b      	add	r3, sp
     eec:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
     ef0:	6803      	ldr	r3, [r0, #0]
     ef2:	a901      	add	r1, sp, #4
     ef4:	f1ce 0222 	rsb	r2, lr, #34	; 0x22
     ef8:	685b      	ldr	r3, [r3, #4]
     efa:	4471      	add	r1, lr
     efc:	4798      	blx	r3
}
     efe:	b00a      	add	sp, #40	; 0x28
     f00:	bd70      	pop	{r4, r5, r6, pc}
		buf[sizeof(buf) - 1] = '0';
     f02:	2230      	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
     f04:	f04f 0e21 	mov.w	lr, #33	; 0x21
		buf[sizeof(buf) - 1] = '0';
     f08:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
     f0c:	e7e5      	b.n	eda <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x4a>
     f0e:	bf00      	nop

00000f10 <Print::write(unsigned char const*, unsigned int)>:
{
     f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buffer == nullptr) return 0;
     f14:	460c      	mov	r4, r1
     f16:	b1d1      	cbz	r1, f4e <Print::write(unsigned char const*, unsigned int)+0x3e>
	while (size--) count += write(*buffer++);
     f18:	b1ea      	cbz	r2, f56 <Print::write(unsigned char const*, unsigned int)+0x46>
     f1a:	4680      	mov	r8, r0
     f1c:	188e      	adds	r6, r1, r2
	size_t count = 0;
     f1e:	2500      	movs	r5, #0
     f20:	4f0e      	ldr	r7, [pc, #56]	; (f5c <Print::write(unsigned char const*, unsigned int)+0x4c>)
     f22:	e004      	b.n	f2e <Print::write(unsigned char const*, unsigned int)+0x1e>
     f24:	f001 fbd0 	bl	26c8 <usb_serial_putchar>
	while (size--) count += write(*buffer++);
     f28:	42b4      	cmp	r4, r6
     f2a:	4405      	add	r5, r0
     f2c:	d00c      	beq.n	f48 <Print::write(unsigned char const*, unsigned int)+0x38>
     f2e:	f8d8 3000 	ldr.w	r3, [r8]
     f32:	f814 0b01 	ldrb.w	r0, [r4], #1
     f36:	681b      	ldr	r3, [r3, #0]
     f38:	42bb      	cmp	r3, r7
     f3a:	d0f3      	beq.n	f24 <Print::write(unsigned char const*, unsigned int)+0x14>
     f3c:	4601      	mov	r1, r0
     f3e:	4640      	mov	r0, r8
     f40:	4798      	blx	r3
     f42:	42b4      	cmp	r4, r6
     f44:	4405      	add	r5, r0
     f46:	d1f2      	bne.n	f2e <Print::write(unsigned char const*, unsigned int)+0x1e>
}
     f48:	4628      	mov	r0, r5
     f4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (buffer == nullptr) return 0;
     f4e:	460d      	mov	r5, r1
}
     f50:	4628      	mov	r0, r5
     f52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (buffer == nullptr) return 0;
     f56:	4615      	mov	r5, r2
     f58:	e7f6      	b.n	f48 <Print::write(unsigned char const*, unsigned int)+0x38>
     f5a:	bf00      	nop
     f5c:	00000e89 	.word	0x00000e89

00000f60 <Print::println()>:
{
     f60:	b500      	push	{lr}
	return write(buf, 2);
     f62:	6803      	ldr	r3, [r0, #0]
{
     f64:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
     f66:	f640 2c0d 	movw	ip, #2573	; 0xa0d
	return write(buf, 2);
     f6a:	2202      	movs	r2, #2
     f6c:	a901      	add	r1, sp, #4
     f6e:	685b      	ldr	r3, [r3, #4]
	uint8_t buf[2]={'\r', '\n'};
     f70:	f8ad c004 	strh.w	ip, [sp, #4]
	return write(buf, 2);
     f74:	4798      	blx	r3
}
     f76:	b003      	add	sp, #12
     f78:	f85d fb04 	ldr.w	pc, [sp], #4

00000f7c <_write>:
	return ((class Print *)file)->write((uint8_t *)ptr, len);
     f7c:	4b05      	ldr	r3, [pc, #20]	; (f94 <_write+0x18>)
     f7e:	2802      	cmp	r0, #2
     f80:	bf88      	it	hi
     f82:	4603      	movhi	r3, r0
{
     f84:	b410      	push	{r4}
	return ((class Print *)file)->write((uint8_t *)ptr, len);
     f86:	681c      	ldr	r4, [r3, #0]
     f88:	4618      	mov	r0, r3
     f8a:	6863      	ldr	r3, [r4, #4]
}
     f8c:	f85d 4b04 	ldr.w	r4, [sp], #4
	return ((class Print *)file)->write((uint8_t *)ptr, len);
     f90:	4718      	bx	r3
     f92:	bf00      	nop
     f94:	20000ee0 	.word	0x20000ee0

00000f98 <Print::printf(char const*, ...)>:
{
     f98:	b40e      	push	{r1, r2, r3}
     f9a:	b500      	push	{lr}
     f9c:	b082      	sub	sp, #8
     f9e:	aa03      	add	r2, sp, #12
     fa0:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, format);
     fa4:	9201      	str	r2, [sp, #4]
	int retval = vdprintf((int)this, format, ap);
     fa6:	f002 fcad 	bl	3904 <vdprintf>
}
     faa:	b002      	add	sp, #8
     fac:	f85d eb04 	ldr.w	lr, [sp], #4
     fb0:	b003      	add	sp, #12
     fb2:	4770      	bx	lr

00000fb4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	if (base == 0) {
     fb4:	b95a      	cbnz	r2, fce <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x1a>
		return write((uint8_t)n);
     fb6:	6803      	ldr	r3, [r0, #0]
     fb8:	b2c9      	uxtb	r1, r1
     fba:	4a07      	ldr	r2, [pc, #28]	; (fd8 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x24>)
     fbc:	681b      	ldr	r3, [r3, #0]
     fbe:	4293      	cmp	r3, r2
{
     fc0:	b500      	push	{lr}
     fc2:	d106      	bne.n	fd2 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x1e>
     fc4:	4608      	mov	r0, r1
}
     fc6:	f85d eb04 	ldr.w	lr, [sp], #4
     fca:	f001 bb7d 	b.w	26c8 <usb_serial_putchar>
     fce:	f7ff bf5f 	b.w	e90 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
     fd2:	f85d eb04 	ldr.w	lr, [sp], #4
		return write((uint8_t)n);
     fd6:	4718      	bx	r3
     fd8:	00000e89 	.word	0x00000e89

00000fdc <analogReadRes>:
   if (bits == 8) {
     fdc:	2808      	cmp	r0, #8
{
     fde:	b430      	push	{r4, r5}
   if (bits == 8) {
     fe0:	d022      	beq.n	1028 <analogReadRes+0x4c>
    mode = ADC_CFG_MODE(2) | ADC_CFG_ADSTS(3) | ADC_CFG_ADLSMP;
     fe2:	280a      	cmp	r0, #10
     fe4:	bf0c      	ite	eq
     fe6:	f44f 7105 	moveq.w	r1, #532	; 0x214
     fea:	f44f 7146 	movne.w	r1, #792	; 0x318
  tmp32  = (ADC1_CFG & (0xFFFFFC00));
     fee:	4c10      	ldr	r4, [pc, #64]	; (1030 <analogReadRes+0x54>)
     ff0:	4d10      	ldr	r5, [pc, #64]	; (1034 <analogReadRes+0x58>)
     ff2:	6c63      	ldr	r3, [r4, #68]	; 0x44
  tmp32 |= (ADC1_CFG & (0x03));  // ADICLK
     ff4:	6c62      	ldr	r2, [r4, #68]	; 0x44
  tmp32  = (ADC1_CFG & (0xFFFFFC00));
     ff6:	402b      	ands	r3, r5
  tmp32  = (ADC2_CFG & (0xFFFFFC00));
     ff8:	480f      	ldr	r0, [pc, #60]	; (1038 <analogReadRes+0x5c>)
  tmp32 |= (ADC1_CFG & (0x03));  // ADICLK
     ffa:	f002 0203 	and.w	r2, r2, #3
     ffe:	431a      	orrs	r2, r3
  tmp32 |= (ADC1_CFG & (0xE0));  // ADIV & ADLPC
    1000:	6c63      	ldr	r3, [r4, #68]	; 0x44
    1002:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    1006:	4313      	orrs	r3, r2
  tmp32 |= mode; 
    1008:	430b      	orrs	r3, r1
  ADC1_CFG = tmp32;
    100a:	6463      	str	r3, [r4, #68]	; 0x44
  tmp32  = (ADC2_CFG & (0xFFFFFC00));
    100c:	6c43      	ldr	r3, [r0, #68]	; 0x44
  tmp32 |= (ADC2_CFG & (0x03));  // ADICLK
    100e:	6c42      	ldr	r2, [r0, #68]	; 0x44
  tmp32  = (ADC2_CFG & (0xFFFFFC00));
    1010:	402b      	ands	r3, r5
  tmp32 |= (ADC2_CFG & (0x03));  // ADICLK
    1012:	f002 0203 	and.w	r2, r2, #3
    1016:	431a      	orrs	r2, r3
  tmp32 |= (ADC2_CFG & (0xE0));  // ADIV & ADLPC
    1018:	6c43      	ldr	r3, [r0, #68]	; 0x44
    101a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    101e:	4313      	orrs	r3, r2
  tmp32 |= mode; 
    1020:	4319      	orrs	r1, r3
}
    1022:	bc30      	pop	{r4, r5}
  ADC2_CFG = tmp32;
    1024:	6441      	str	r1, [r0, #68]	; 0x44
}
    1026:	4770      	bx	lr
    mode = ADC_CFG_MODE(0) | ADC_CFG_ADSTS(3);
    1028:	f44f 7140 	mov.w	r1, #768	; 0x300
    102c:	e7df      	b.n	fee <analogReadRes+0x12>
    102e:	bf00      	nop
    1030:	400c4000 	.word	0x400c4000
    1034:	fffffc00 	.word	0xfffffc00
    1038:	400c8000 	.word	0x400c8000

0000103c <delay>:
	if (msec == 0) return;
    103c:	b900      	cbnz	r0, 1040 <delay+0x4>
    103e:	4770      	bx	lr
{
    1040:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    1044:	2101      	movs	r1, #1
    1046:	4681      	mov	r9, r0
    1048:	4c21      	ldr	r4, [pc, #132]	; (10d0 <delay+0x94>)
    104a:	4d22      	ldr	r5, [pc, #136]	; (10d4 <delay+0x98>)
    104c:	4e22      	ldr	r6, [pc, #136]	; (10d8 <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    104e:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    1052:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    1054:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    1056:	e844 1300 	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    105a:	2b00      	cmp	r3, #0
    105c:	d1f7      	bne.n	104e <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    105e:	491f      	ldr	r1, [pc, #124]	; (10dc <delay+0xa0>)
    1060:	684b      	ldr	r3, [r1, #4]
	uint32_t usec = 1000*smc + frac;
    1062:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1066:	f8df a078 	ldr.w	sl, [pc, #120]	; 10e0 <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
    106a:	1a1b      	subs	r3, r3, r0
    106c:	2701      	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
    106e:	fb0b f802 	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1072:	f8da 2000 	ldr.w	r2, [sl]
    1076:	fba3 3202 	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
    107a:	455a      	cmp	r2, fp
    107c:	bf94      	ite	ls
    107e:	4490      	addls	r8, r2
    1080:	44d8      	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    1082:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    1086:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    1088:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    108a:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    108e:	2b00      	cmp	r3, #0
    1090:	d1f7      	bne.n	1082 <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    1092:	684b      	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1094:	f8da c000 	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
    1098:	1a1b      	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
    109a:	fb0b f202 	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    109e:	fba3 3c0c 	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
    10a2:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
    10a6:	bf94      	ite	ls
    10a8:	4462      	addls	r2, ip
    10aa:	f502 727a 	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
    10ae:	eba2 0208 	sub.w	r2, r2, r8
    10b2:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
    10b6:	d306      	bcc.n	10c6 <delay+0x8a>
			if (--msec == 0) return;
    10b8:	f1b9 0901 	subs.w	r9, r9, #1
			start += 1000;
    10bc:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
    10c0:	d1df      	bne.n	1082 <delay+0x46>
}
    10c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
    10c6:	f001 fb93 	bl	27f0 <yield>
		while ((micros() - start) >= 1000) {
    10ca:	4904      	ldr	r1, [pc, #16]	; (10dc <delay+0xa0>)
    10cc:	e7d9      	b.n	1082 <delay+0x46>
    10ce:	bf00      	nop
    10d0:	200021fc 	.word	0x200021fc
    10d4:	200021f8 	.word	0x200021f8
    10d8:	200021f4 	.word	0x200021f4
    10dc:	e0001000 	.word	0xe0001000
    10e0:	200021f0 	.word	0x200021f0

000010e4 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    10e4:	2836      	cmp	r0, #54	; 0x36
    10e6:	d816      	bhi.n	1116 <digitalWrite+0x32>
	p = digital_pin_to_info_PGM + pin;
    10e8:	0102      	lsls	r2, r0, #4
    10ea:	4b10      	ldr	r3, [pc, #64]	; (112c <digitalWrite+0x48>)
    10ec:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
    10f0:	589b      	ldr	r3, [r3, r2]
{
    10f2:	b410      	push	{r4}
	mask = p->mask;
    10f4:	68c2      	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
    10f6:	685c      	ldr	r4, [r3, #4]
	if (pinmode & mask) {
    10f8:	4214      	tst	r4, r2
    10fa:	d005      	beq.n	1108 <digitalWrite+0x24>
		// pin is configured for output mode
		if (val) {
    10fc:	b961      	cbnz	r1, 1118 <digitalWrite+0x34>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    10fe:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x22) = mask; // clear register
    1102:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
    1106:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    1108:	6883      	ldr	r3, [r0, #8]
		if (val) {
    110a:	b151      	cbz	r1, 1122 <digitalWrite+0x3e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    110c:	4a08      	ldr	r2, [pc, #32]	; (1130 <digitalWrite+0x4c>)
}
    110e:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    1112:	601a      	str	r2, [r3, #0]
}
    1114:	4770      	bx	lr
    1116:	4770      	bx	lr
    1118:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x21) = mask; // set register
    111c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    1120:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    1122:	4a04      	ldr	r2, [pc, #16]	; (1134 <digitalWrite+0x50>)
}
    1124:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    1128:	601a      	str	r2, [r3, #0]
}
    112a:	4770      	bx	lr
    112c:	20000684 	.word	0x20000684
    1130:	0001f038 	.word	0x0001f038
    1134:	00013038 	.word	0x00013038

00001138 <digitalRead>:

uint8_t digitalRead(uint8_t pin)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return 0;
    1138:	2836      	cmp	r0, #54	; 0x36
    113a:	d80b      	bhi.n	1154 <digitalRead+0x1c>
	p = digital_pin_to_info_PGM + pin;
    113c:	4b06      	ldr	r3, [pc, #24]	; (1158 <digitalRead+0x20>)
    113e:	0102      	lsls	r2, r0, #4
    1140:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
    1144:	589a      	ldr	r2, [r3, r2]
    1146:	68c3      	ldr	r3, [r0, #12]
    1148:	6892      	ldr	r2, [r2, #8]
    114a:	421a      	tst	r2, r3
    114c:	bf14      	ite	ne
    114e:	2001      	movne	r0, #1
    1150:	2000      	moveq	r0, #0
    1152:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return 0;
    1154:	2000      	movs	r0, #0
}
    1156:	4770      	bx	lr
    1158:	20000684 	.word	0x20000684

0000115c <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    115c:	2836      	cmp	r0, #54	; 0x36
    115e:	d829      	bhi.n	11b4 <pinMode+0x58>
	p = digital_pin_to_info_PGM + pin;
    1160:	4b16      	ldr	r3, [pc, #88]	; (11bc <pinMode+0x60>)
    1162:	0102      	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    1164:	2901      	cmp	r1, #1
	p = digital_pin_to_info_PGM + pin;
    1166:	eb03 1000 	add.w	r0, r3, r0, lsl #4
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    116a:	589a      	ldr	r2, [r3, r2]
{
    116c:	b410      	push	{r4}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    116e:	6853      	ldr	r3, [r2, #4]
    1170:	68c4      	ldr	r4, [r0, #12]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    1172:	d00e      	beq.n	1192 <pinMode+0x36>
    1174:	2904      	cmp	r1, #4
    1176:	d00c      	beq.n	1192 <pinMode+0x36>
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    1178:	ea23 0304 	bic.w	r3, r3, r4
    117c:	6053      	str	r3, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    117e:	6883      	ldr	r3, [r0, #8]
		if (mode == INPUT) {
    1180:	b1a9      	cbz	r1, 11ae <pinMode+0x52>
		} else if (mode == INPUT_PULLUP) {
    1182:	2902      	cmp	r1, #2
    1184:	d017      	beq.n	11b6 <pinMode+0x5a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    1186:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    1188:	bf0c      	ite	eq
    118a:	4a0d      	ldreq	r2, [pc, #52]	; (11c0 <pinMode+0x64>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    118c:	4a0d      	ldrne	r2, [pc, #52]	; (11c4 <pinMode+0x68>)
    118e:	601a      	str	r2, [r3, #0]
    1190:	e007      	b.n	11a2 <pinMode+0x46>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    1192:	4323      	orrs	r3, r4
		if (mode == OUTPUT) {
    1194:	2901      	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
    1196:	6053      	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
    1198:	6883      	ldr	r3, [r0, #8]
		if (mode == OUTPUT) {
    119a:	d008      	beq.n	11ae <pinMode+0x52>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    119c:	f640 0238 	movw	r2, #2104	; 0x838
    11a0:	601a      	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    11a2:	6843      	ldr	r3, [r0, #4]
    11a4:	2215      	movs	r2, #21
}
    11a6:	f85d 4b04 	ldr.w	r4, [sp], #4
	*(p->mux) = 5 | 0x10;
    11aa:	601a      	str	r2, [r3, #0]
}
    11ac:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7);
    11ae:	2238      	movs	r2, #56	; 0x38
    11b0:	601a      	str	r2, [r3, #0]
    11b2:	e7f6      	b.n	11a2 <pinMode+0x46>
    11b4:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    11b6:	4a04      	ldr	r2, [pc, #16]	; (11c8 <pinMode+0x6c>)
    11b8:	601a      	str	r2, [r3, #0]
    11ba:	e7f2      	b.n	11a2 <pinMode+0x46>
    11bc:	20000684 	.word	0x20000684
    11c0:	00013038 	.word	0x00013038
    11c4:	00010038 	.word	0x00010038
    11c8:	0001f038 	.word	0x0001f038

000011cc <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    11cc:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    11ce:	f7fe ff7f 	bl	d0 <setup>
	while (1) {
		loop();
    11d2:	f7fe ffe9 	bl	1a8 <loop>
		yield();
    11d6:	f001 fb0b 	bl	27f0 <yield>
	while (1) {
    11da:	e7fa      	b.n	11d2 <main+0x6>

000011dc <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    11dc:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    11de:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    11e2:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    11e6:	d16d      	bne.n	12c4 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    11e8:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    11ea:	d341      	bcc.n	1270 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    11ec:	f851 3b04 	ldr.w	r3, [r1], #4
    11f0:	f840 3b04 	str.w	r3, [r0], #4
    11f4:	f851 3b04 	ldr.w	r3, [r1], #4
    11f8:	f840 3b04 	str.w	r3, [r0], #4
    11fc:	f851 3b04 	ldr.w	r3, [r1], #4
    1200:	f840 3b04 	str.w	r3, [r0], #4
    1204:	f851 3b04 	ldr.w	r3, [r1], #4
    1208:	f840 3b04 	str.w	r3, [r0], #4
    120c:	f851 3b04 	ldr.w	r3, [r1], #4
    1210:	f840 3b04 	str.w	r3, [r0], #4
    1214:	f851 3b04 	ldr.w	r3, [r1], #4
    1218:	f840 3b04 	str.w	r3, [r0], #4
    121c:	f851 3b04 	ldr.w	r3, [r1], #4
    1220:	f840 3b04 	str.w	r3, [r0], #4
    1224:	f851 3b04 	ldr.w	r3, [r1], #4
    1228:	f840 3b04 	str.w	r3, [r0], #4
    122c:	f851 3b04 	ldr.w	r3, [r1], #4
    1230:	f840 3b04 	str.w	r3, [r0], #4
    1234:	f851 3b04 	ldr.w	r3, [r1], #4
    1238:	f840 3b04 	str.w	r3, [r0], #4
    123c:	f851 3b04 	ldr.w	r3, [r1], #4
    1240:	f840 3b04 	str.w	r3, [r0], #4
    1244:	f851 3b04 	ldr.w	r3, [r1], #4
    1248:	f840 3b04 	str.w	r3, [r0], #4
    124c:	f851 3b04 	ldr.w	r3, [r1], #4
    1250:	f840 3b04 	str.w	r3, [r0], #4
    1254:	f851 3b04 	ldr.w	r3, [r1], #4
    1258:	f840 3b04 	str.w	r3, [r0], #4
    125c:	f851 3b04 	ldr.w	r3, [r1], #4
    1260:	f840 3b04 	str.w	r3, [r0], #4
    1264:	f851 3b04 	ldr.w	r3, [r1], #4
    1268:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    126c:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    126e:	d2bd      	bcs.n	11ec <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    1270:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    1272:	d311      	bcc.n	1298 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    1274:	f851 3b04 	ldr.w	r3, [r1], #4
    1278:	f840 3b04 	str.w	r3, [r0], #4
    127c:	f851 3b04 	ldr.w	r3, [r1], #4
    1280:	f840 3b04 	str.w	r3, [r0], #4
    1284:	f851 3b04 	ldr.w	r3, [r1], #4
    1288:	f840 3b04 	str.w	r3, [r0], #4
    128c:	f851 3b04 	ldr.w	r3, [r1], #4
    1290:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    1294:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    1296:	d2ed      	bcs.n	1274 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    1298:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    129a:	d305      	bcc.n	12a8 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    129c:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    12a0:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    12a4:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    12a6:	d2f9      	bcs.n	129c <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    12a8:	3204      	adds	r2, #4
	beq	.Ldone
    12aa:	d008      	beq.n	12be <memcpy+0xe2>

	lsls	r2, r2, #31
    12ac:	07d2      	lsls	r2, r2, #31
	itt ne
    12ae:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    12b0:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    12b4:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    12b8:	d301      	bcc.n	12be <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    12ba:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    12bc:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    12be:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    12c0:	4770      	bx	lr
    12c2:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    12c4:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    12c6:	d313      	bcc.n	12f0 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    12c8:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    12ca:	d08d      	beq.n	11e8 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    12cc:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    12d0:	d08a      	beq.n	11e8 <memcpy+0xc>

	rsb	r3, #4
    12d2:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    12d6:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    12d8:	07db      	lsls	r3, r3, #31
	itt ne
    12da:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    12dc:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    12e0:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    12e4:	d380      	bcc.n	11e8 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    12e6:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    12ea:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    12ee:	e77b      	b.n	11e8 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    12f0:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    12f2:	d3d9      	bcc.n	12a8 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    12f4:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    12f6:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    12fa:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    12fe:	d2f9      	bcs.n	12f4 <memcpy+0x118>

	ldrb	r3, [r1]
    1300:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    1302:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    1304:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    1306:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    1308:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    130a:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    130c:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    130e:	4770      	bx	lr

00001310 <ultoa>:
	int i=0, j;
    1310:	f101 3cff 	add.w	ip, r1, #4294967295
{
    1314:	b570      	push	{r4, r5, r6, lr}
		digit = val % radix;
    1316:	4666      	mov	r6, ip
	int i=0, j;
    1318:	2400      	movs	r4, #0
    131a:	e000      	b.n	131e <ultoa+0xe>
		i++;
    131c:	3401      	adds	r4, #1
		digit = val % radix;
    131e:	fbb0 f5f2 	udiv	r5, r0, r2
    1322:	fb02 0315 	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1326:	2b09      	cmp	r3, #9
    1328:	f103 0e37 	add.w	lr, r3, #55	; 0x37
    132c:	f103 0330 	add.w	r3, r3, #48	; 0x30
    1330:	fa5f fe8e 	uxtb.w	lr, lr
    1334:	bf98      	it	ls
    1336:	fa5f fe83 	uxtbls.w	lr, r3
		if (val == 0) break;
    133a:	4290      	cmp	r0, r2
		val /= radix;
    133c:	4628      	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    133e:	f806 ef01 	strb.w	lr, [r6, #1]!
		if (val == 0) break;
    1342:	d2eb      	bcs.n	131c <ultoa+0xc>
	buf[i + 1] = 0;
    1344:	1c63      	adds	r3, r4, #1
    1346:	2200      	movs	r2, #0
    1348:	18c8      	adds	r0, r1, r3
    134a:	54ca      	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
    134c:	b17c      	cbz	r4, 136e <ultoa+0x5e>
		t = buf[j];
    134e:	4662      	mov	r2, ip
    1350:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    1354:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
    1358:	eba1 030c 	sub.w	r3, r1, ip
    135c:	3202      	adds	r2, #2
		buf[j] = buf[i];
    135e:	f88c 6000 	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
    1362:	3b01      	subs	r3, #1
    1364:	1a52      	subs	r2, r2, r1
		buf[i] = t;
    1366:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    1368:	4423      	add	r3, r4
    136a:	429a      	cmp	r2, r3
    136c:	dbef      	blt.n	134e <ultoa+0x3e>
}
    136e:	4608      	mov	r0, r1
    1370:	bd70      	pop	{r4, r5, r6, pc}
    1372:	bf00      	nop

00001374 <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    1374:	2300      	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
    1376:	220f      	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    1378:	f248 2cb8 	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
    137c:	4619      	mov	r1, r3
{
    137e:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1380:	f44f 4470 	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1384:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1388:	f8a0 418c 	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    138c:	f44f 4460 	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
    1390:	f8a0 218e 	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
    1394:	460a      	mov	r2, r1
	p->FFILT0 = 0;
    1396:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    139a:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    139e:	b29b      	uxth	r3, r3
    13a0:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    13a4:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    13a8:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
    13ac:	3101      	adds	r1, #1
    13ae:	eb00 1343 	add.w	r3, r0, r3, lsl #5
    13b2:	2904      	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    13b4:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    13b6:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    13ba:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    13bc:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    13be:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    13c0:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    13c2:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
    13c6:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    13c8:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    13ca:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    13cc:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
    13ce:	d1eb      	bne.n	13a8 <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    13d0:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    13d4:	b29b      	uxth	r3, r3
    13d6:	f043 030f 	orr.w	r3, r3, #15
    13da:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    13de:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    13e2:	b29b      	uxth	r3, r3
    13e4:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    13e8:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
    13ec:	bd10      	pop	{r4, pc}
    13ee:	bf00      	nop

000013f0 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    13f0:	4b37      	ldr	r3, [pc, #220]	; (14d0 <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    13f2:	4a38      	ldr	r2, [pc, #224]	; (14d4 <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    13f4:	6f99      	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    13f6:	4838      	ldr	r0, [pc, #224]	; (14d8 <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    13f8:	f441 017f 	orr.w	r1, r1, #16711680	; 0xff0000
{
    13fc:	b570      	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    13fe:	6799      	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    1400:	f241 0601 	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    1404:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1408:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    140c:	f243 0426 	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    1410:	430a      	orrs	r2, r1
    1412:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    1416:	f7ff ffad 	bl	1374 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    141a:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    141e:	f7ff ffa9 	bl	1374 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    1422:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    1426:	f7ff ffa5 	bl	1374 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    142a:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    142e:	f7ff ffa1 	bl	1374 <flexpwm_init>
	for (i=0; i < 4; i++) {
    1432:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    1434:	f5a0 1003 	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    1438:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
    143c:	4611      	mov	r1, r2
    143e:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    1442:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    1446:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    1448:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    144a:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    144c:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    144e:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    1452:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1454:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    1456:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    145a:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    145c:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    145e:	d1ee      	bne.n	143e <pwm_init+0x4e>
    1460:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    1462:	481e      	ldr	r0, [pc, #120]	; (14dc <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    1464:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    1468:	f241 0601 	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    146c:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    146e:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1472:	f243 0426 	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    1476:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    147a:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    147e:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    1480:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    1482:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    1484:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    1486:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    148a:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    148c:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    148e:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    1492:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1494:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    1496:	d1ee      	bne.n	1476 <pwm_init+0x86>
    1498:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    149a:	4811      	ldr	r0, [pc, #68]	; (14e0 <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    149c:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    149e:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    14a2:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    14a4:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    14a8:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    14ac:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    14b0:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    14b4:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    14b6:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    14b8:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    14ba:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    14bc:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    14be:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    14c0:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    14c2:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    14c6:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    14c8:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
    14cc:	d1ee      	bne.n	14ac <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    14ce:	bd70      	pop	{r4, r5, r6, pc}
    14d0:	400fc000 	.word	0x400fc000
    14d4:	fc030000 	.word	0xfc030000
    14d8:	403dc000 	.word	0x403dc000
    14dc:	401e0000 	.word	0x401e0000
    14e0:	401e4000 	.word	0x401e4000

000014e4 <unused_interrupt_vector>:
	__disable_irq();
    14e4:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    14e6:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
    14ea:	4c52      	ldr	r4, [pc, #328]	; (1634 <unused_interrupt_vector+0x150>)
    14ec:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("tst lr, #4\nite eq\nmrseq %0, msp\nmrsne %0, psp\n" : "=r" (stack) :: "memory");
    14f0:	f01e 0f04 	tst.w	lr, #4
    14f4:	bf0c      	ite	eq
    14f6:	f3ef 8208 	mrseq	r2, MSP
    14fa:	f3ef 8209 	mrsne	r2, PSP
	info->cfsr = SCB_CFSR;
    14fe:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
    1502:	4e4d      	ldr	r6, [pc, #308]	; (1638 <unused_interrupt_vector+0x154>)
	while (p < end) {
    1504:	4d4d      	ldr	r5, [pc, #308]	; (163c <unused_interrupt_vector+0x158>)
	info->cfsr = SCB_CFSR;
    1506:	f8d3 0d28 	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
    150a:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
    150e:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
    1512:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
    1516:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
    151a:	e9c4 1324 	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
    151e:	6993      	ldr	r3, [r2, #24]
    1520:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    1524:	69d3      	ldr	r3, [r2, #28]
    1526:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    152a:	f000 f8d1 	bl	16d0 <tempmonGetTemp>
    152e:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    1532:	f001 fb75 	bl	2c20 <rtc_get>
	info->len = sizeof(*info) / 4;
    1536:	210b      	movs	r1, #11
	crc = 0xFFFFFFFF;
    1538:	f04f 32ff 	mov.w	r2, #4294967295
	info->time = rtc_get();
    153c:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    1540:	460b      	mov	r3, r1
    1542:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    1546:	493e      	ldr	r1, [pc, #248]	; (1640 <unused_interrupt_vector+0x15c>)
		crc ^= *p++;
    1548:	1d30      	adds	r0, r6, #4
    154a:	405a      	eors	r2, r3
    154c:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    154e:	f002 0301 	and.w	r3, r2, #1
    1552:	3c01      	subs	r4, #1
    1554:	fb01 f303 	mul.w	r3, r1, r3
    1558:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
    155c:	d1f7      	bne.n	154e <unused_interrupt_vector+0x6a>
	while (p < end) {
    155e:	42a8      	cmp	r0, r5
    1560:	d002      	beq.n	1568 <unused_interrupt_vector+0x84>
		crc ^= *p++;
    1562:	6873      	ldr	r3, [r6, #4]
    1564:	4606      	mov	r6, r0
    1566:	e7ef      	b.n	1548 <unused_interrupt_vector+0x64>
	info->crc = crc;
    1568:	4b32      	ldr	r3, [pc, #200]	; (1634 <unused_interrupt_vector+0x150>)
    156a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    156e:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    1572:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    1576:	4930      	ldr	r1, [pc, #192]	; (1638 <unused_interrupt_vector+0x154>)
    1578:	4a32      	ldr	r2, [pc, #200]	; (1644 <unused_interrupt_vector+0x160>)
    157a:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
    157e:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
    1582:	f3bf 8f4f 	dsb	sy
	asm("isb");
    1586:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    158a:	4a2f      	ldr	r2, [pc, #188]	; (1648 <unused_interrupt_vector+0x164>)
	PIT_MCR = PIT_MCR_MDIS;
    158c:	2502      	movs	r5, #2
    158e:	482f      	ldr	r0, [pc, #188]	; (164c <unused_interrupt_vector+0x168>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    1590:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    1592:	492f      	ldr	r1, [pc, #188]	; (1650 <unused_interrupt_vector+0x16c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    1594:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    1598:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    159a:	6005      	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    159c:	69d3      	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    159e:	482d      	ldr	r0, [pc, #180]	; (1654 <unused_interrupt_vector+0x170>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    15a0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    15a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    15a8:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    15aa:	680b      	ldr	r3, [r1, #0]
    15ac:	4283      	cmp	r3, r0
    15ae:	d83d      	bhi.n	162c <unused_interrupt_vector+0x148>
	PIT_MCR = 0;
    15b0:	4d26      	ldr	r5, [pc, #152]	; (164c <unused_interrupt_vector+0x168>)
    15b2:	2100      	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
    15b4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    15b8:	f04f 32ff 	mov.w	r2, #4294967295
	PIT_MCR = 0;
    15bc:	6029      	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    15be:	2601      	movs	r6, #1
	PIT_TCTRL0 = 0;
    15c0:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    15c4:	4924      	ldr	r1, [pc, #144]	; (1658 <unused_interrupt_vector+0x174>)
    15c6:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    15ca:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
    15ce:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    15d2:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    15d6:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    15da:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    15de:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	count = 0;
    15e2:	e001      	b.n	15e8 <unused_interrupt_vector+0x104>
		usb_isr();
    15e4:	f000 f966 	bl	18b4 <usb_isr>
		if (PIT_TFLG0) {
    15e8:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    15ec:	2b00      	cmp	r3, #0
    15ee:	d0f9      	beq.n	15e4 <unused_interrupt_vector+0x100>
			if (++count >= 80) break;  // reboot after 8 seconds
    15f0:	3401      	adds	r4, #1
			PIT_TFLG0 = 1;
    15f2:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    15f6:	2c4f      	cmp	r4, #79	; 0x4f
    15f8:	d9f4      	bls.n	15e4 <unused_interrupt_vector+0x100>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    15fa:	4b18      	ldr	r3, [pc, #96]	; (165c <unused_interrupt_vector+0x178>)
	USB1_USBCMD = USB_USBCMD_RST;
    15fc:	2002      	movs	r0, #2
    15fe:	4918      	ldr	r1, [pc, #96]	; (1660 <unused_interrupt_vector+0x17c>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    1600:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
    1604:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    1608:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    160a:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    160e:	b93b      	cbnz	r3, 1620 <unused_interrupt_vector+0x13c>
	SRC_GPR5 = 0x0BAD00F1;
    1610:	4814      	ldr	r0, [pc, #80]	; (1664 <unused_interrupt_vector+0x180>)
    1612:	4915      	ldr	r1, [pc, #84]	; (1668 <unused_interrupt_vector+0x184>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    1614:	4a0d      	ldr	r2, [pc, #52]	; (164c <unused_interrupt_vector+0x168>)
	SRC_GPR5 = 0x0BAD00F1;
    1616:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    1618:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
    161c:	2b00      	cmp	r3, #0
    161e:	d0fa      	beq.n	1616 <unused_interrupt_vector+0x132>
	SCB_AIRCR = 0x05FA0004;
    1620:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    1624:	4a11      	ldr	r2, [pc, #68]	; (166c <unused_interrupt_vector+0x188>)
    1626:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    162a:	e7fe      	b.n	162a <unused_interrupt_vector+0x146>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    162c:	f001 f980 	bl	2930 <set_arm_clock>
    1630:	e7be      	b.n	15b0 <unused_interrupt_vector+0xcc>
    1632:	bf00      	nop
    1634:	2027ff00 	.word	0x2027ff00
    1638:	2027ff80 	.word	0x2027ff80
    163c:	2027ffa8 	.word	0x2027ffa8
    1640:	edb88320 	.word	0xedb88320
    1644:	2027ffa0 	.word	0x2027ffa0
    1648:	400fc000 	.word	0x400fc000
    164c:	40084000 	.word	0x40084000
    1650:	20000edc 	.word	0x20000edc
    1654:	0bcd3d80 	.word	0x0bcd3d80
    1658:	00249f00 	.word	0x00249f00
    165c:	400d9000 	.word	0x400d9000
    1660:	402e0000 	.word	0x402e0000
    1664:	400f8000 	.word	0x400f8000
    1668:	0bad00f1 	.word	0x0bad00f1
    166c:	05fa0004 	.word	0x05fa0004

00001670 <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
    1670:	490a      	ldr	r1, [pc, #40]	; (169c <_sbrk+0x2c>)
    1672:	680a      	ldr	r2, [r1, #0]
        if (incr != 0) {
    1674:	b138      	cbz	r0, 1686 <_sbrk+0x16>
{
    1676:	b508      	push	{r3, lr}
                if (prev + incr > (char *)&_heap_end) {
    1678:	1813      	adds	r3, r2, r0
    167a:	4809      	ldr	r0, [pc, #36]	; (16a0 <_sbrk+0x30>)
    167c:	4283      	cmp	r3, r0
    167e:	d804      	bhi.n	168a <_sbrk+0x1a>
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    1680:	4610      	mov	r0, r2
                __brkval = prev + incr;
    1682:	600b      	str	r3, [r1, #0]
}
    1684:	bd08      	pop	{r3, pc}
    1686:	4610      	mov	r0, r2
    1688:	4770      	bx	lr
                        errno = ENOMEM;
    168a:	f002 fb3f 	bl	3d0c <__errno>
    168e:	230c      	movs	r3, #12
                        return (void *)-1;
    1690:	f04f 32ff 	mov.w	r2, #4294967295
                        errno = ENOMEM;
    1694:	6003      	str	r3, [r0, #0]
}
    1696:	4610      	mov	r0, r2
    1698:	bd08      	pop	{r3, pc}
    169a:	bf00      	nop
    169c:	20000fb0 	.word	0x20000fb0
    16a0:	20280000 	.word	0x20280000

000016a4 <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
    16a4:	2000      	movs	r0, #0
    16a6:	4770      	bx	lr

000016a8 <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
    16a8:	f04f 30ff 	mov.w	r0, #4294967295
    16ac:	4770      	bx	lr
    16ae:	bf00      	nop

000016b0 <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
    16b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
    16b4:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
    16b6:	604b      	str	r3, [r1, #4]
}
    16b8:	4770      	bx	lr
    16ba:	bf00      	nop

000016bc <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
    16bc:	2001      	movs	r0, #1
    16be:	4770      	bx	lr

000016c0 <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
    16c0:	f04f 30ff 	mov.w	r0, #4294967295
    16c4:	4770      	bx	lr
    16c6:	bf00      	nop

000016c8 <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    16c8:	bf30      	wfi
    16ca:	e7fd      	b.n	16c8 <abort>

000016cc <Panic_Temp_isr>:
  unused_interrupt_vector();
    16cc:	f7ff bf0a 	b.w	14e4 <unused_interrupt_vector>

000016d0 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    16d0:	4a12      	ldr	r2, [pc, #72]	; (171c <tempmonGetTemp+0x4c>)
    16d2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    16d6:	075b      	lsls	r3, r3, #29
    16d8:	d5fb      	bpl.n	16d2 <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    16da:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    16de:	4810      	ldr	r0, [pc, #64]	; (1720 <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    16e0:	f3c3 230b 	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    16e4:	490f      	ldr	r1, [pc, #60]	; (1724 <tempmonGetTemp+0x54>)
    16e6:	ed90 7a00 	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    16ea:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    16ee:	ed91 6a00 	vldr	s12, [r1]
    16f2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    16f6:	4a0c      	ldr	r2, [pc, #48]	; (1728 <tempmonGetTemp+0x58>)
    16f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    16fc:	4b0b      	ldr	r3, [pc, #44]	; (172c <tempmonGetTemp+0x5c>)
    16fe:	edd2 6a00 	vldr	s13, [r2]
    1702:	ee77 7ac7 	vsub.f32	s15, s15, s14
    1706:	ed93 7a00 	vldr	s14, [r3]
    170a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    170e:	ee67 7a86 	vmul.f32	s15, s15, s12
    1712:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
    1716:	ee37 0a40 	vsub.f32	s0, s14, s0
    171a:	4770      	bx	lr
    171c:	400d8100 	.word	0x400d8100
    1720:	200021e0 	.word	0x200021e0
    1724:	200021e8 	.word	0x200021e8
    1728:	200021ec 	.word	0x200021ec
    172c:	200021e4 	.word	0x200021e4

00001730 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    1730:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
    1732:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
    1734:	b11b      	cbz	r3, 173e <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    1736:	6853      	ldr	r3, [r2, #4]
    1738:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    173c:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    173e:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    1740:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    1742:	b33c      	cbz	r4, 1794 <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    1744:	4b1a      	ldr	r3, [pc, #104]	; (17b0 <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
    1746:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    1748:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    174c:	420c      	tst	r4, r1
    174e:	d11d      	bne.n	178c <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    1750:	4e18      	ldr	r6, [pc, #96]	; (17b4 <schedule_transfer+0x84>)
    1752:	6877      	ldr	r7, [r6, #4]
    1754:	e004      	b.n	1760 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    1756:	6874      	ldr	r4, [r6, #4]
    1758:	1be4      	subs	r4, r4, r7
    175a:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    175e:	d20b      	bcs.n	1778 <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    1760:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    1764:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    1768:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    176c:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    1770:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    1774:	0464      	lsls	r4, r4, #17
    1776:	d5ee      	bpl.n	1756 <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    1778:	400d      	ands	r5, r1
    177a:	d107      	bne.n	178c <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    177c:	4c0c      	ldr	r4, [pc, #48]	; (17b0 <schedule_transfer+0x80>)
		endpoint->status = 0;
    177e:	e9c0 2502 	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    1782:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1786:	430b      	orrs	r3, r1
    1788:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    178c:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    178e:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    1790:	bcf0      	pop	{r4, r5, r6, r7}
    1792:	4770      	bx	lr
	USB1_ENDPTPRIME |= epmask;
    1794:	4d06      	ldr	r5, [pc, #24]	; (17b0 <schedule_transfer+0x80>)
	endpoint->status = 0;
    1796:	e9c0 2402 	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    179a:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
    179e:	430b      	orrs	r3, r1
    17a0:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    17a4:	6302      	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
    17a6:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    17a8:	b662      	cpsie	i
}
    17aa:	bcf0      	pop	{r4, r5, r6, r7}
    17ac:	4770      	bx	lr
    17ae:	bf00      	nop
    17b0:	402e0000 	.word	0x402e0000
    17b4:	e0001000 	.word	0xe0001000

000017b8 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    17b8:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    17ba:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
    17bc:	b19d      	cbz	r5, 17e6 <run_callbacks+0x2e>
    17be:	4606      	mov	r6, r0
    17c0:	462a      	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    17c2:	2400      	movs	r4, #0
    17c4:	e003      	b.n	17ce <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    17c6:	6812      	ldr	r2, [r2, #0]
		count++;
    17c8:	3401      	adds	r4, #1
		if ((uint32_t)t == 1) {
    17ca:	2a01      	cmp	r2, #1
    17cc:	d00c      	beq.n	17e8 <run_callbacks+0x30>
		if (t->status & (1<<7)) {
    17ce:	6853      	ldr	r3, [r2, #4]
    17d0:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    17d4:	d0f7      	beq.n	17c6 <run_callbacks+0xe>
			ep->first_transfer = t;
    17d6:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    17d8:	b12c      	cbz	r4, 17e6 <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
    17da:	4628      	mov	r0, r5
		ep->callback_function(first);
    17dc:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
    17de:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
    17e0:	4798      	blx	r3
	while (count) {
    17e2:	3c01      	subs	r4, #1
    17e4:	d1f9      	bne.n	17da <run_callbacks+0x22>
		first = next;
		count--;
	}
}
    17e6:	bd70      	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
    17e8:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
			break;
    17ec:	e7f4      	b.n	17d8 <run_callbacks+0x20>
    17ee:	bf00      	nop

000017f0 <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    17f0:	b430      	push	{r4, r5}
	if (len > 0) {
    17f2:	b9d9      	cbnz	r1, 182c <endpoint0_transmit.constprop.0+0x3c>
    17f4:	4c1f      	ldr	r4, [pc, #124]	; (1874 <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
    17f6:	4b20      	ldr	r3, [pc, #128]	; (1878 <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
    17f8:	2100      	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    17fa:	4a20      	ldr	r2, [pc, #128]	; (187c <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
    17fc:	2501      	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    17fe:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    1802:	6099      	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    1804:	601d      	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
    1806:	e9c4 3102 	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    180a:	2480      	movs	r4, #128	; 0x80
    180c:	605c      	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    180e:	f8c2 01bc 	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    1812:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    1816:	481a      	ldr	r0, [pc, #104]	; (1880 <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
    1818:	432b      	orrs	r3, r5
    181a:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    181e:	6001      	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
    1820:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    1824:	2b00      	cmp	r3, #0
    1826:	d1fb      	bne.n	1820 <endpoint0_transmit.constprop.0+0x30>
}
    1828:	bc30      	pop	{r4, r5}
    182a:	4770      	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    182c:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    182e:	4b15      	ldr	r3, [pc, #84]	; (1884 <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    1830:	4c10      	ldr	r4, [pc, #64]	; (1874 <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
    1832:	2501      	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1834:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    1838:	6098      	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
    183a:	4a10      	ldr	r2, [pc, #64]	; (187c <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    183c:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    183e:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    1842:	601d      	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    1844:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    1846:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    184a:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
    184c:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    184e:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    1852:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    1856:	6159      	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
    1858:	2100      	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
    185a:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    185c:	64e1      	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    185e:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    1862:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    1866:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    186a:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    186e:	2b00      	cmp	r3, #0
    1870:	d1fb      	bne.n	186a <endpoint0_transmit.constprop.0+0x7a>
    1872:	e7c0      	b.n	17f6 <endpoint0_transmit.constprop.0+0x6>
    1874:	20000000 	.word	0x20000000
    1878:	20001ac0 	.word	0x20001ac0
    187c:	402e0000 	.word	0x402e0000
    1880:	20002174 	.word	0x20002174
    1884:	20001ae0 	.word	0x20001ae0

00001888 <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    1888:	4908      	ldr	r1, [pc, #32]	; (18ac <usb_stop_sof_interrupts+0x24>)
    188a:	2201      	movs	r2, #1
    188c:	780b      	ldrb	r3, [r1, #0]
    188e:	fa02 f000 	lsl.w	r0, r2, r0
    1892:	ea23 0000 	bic.w	r0, r3, r0
    1896:	7008      	strb	r0, [r1, #0]
	if (sof_usage == 0) {
    1898:	b930      	cbnz	r0, 18a8 <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    189a:	4a05      	ldr	r2, [pc, #20]	; (18b0 <usb_stop_sof_interrupts+0x28>)
    189c:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
    18a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    18a4:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
    18a8:	4770      	bx	lr
    18aa:	bf00      	nop
    18ac:	20002223 	.word	0x20002223
    18b0:	402e0000 	.word	0x402e0000

000018b4 <usb_isr>:
{
    18b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
    18b8:	4c97      	ldr	r4, [pc, #604]	; (1b18 <usb_isr+0x264>)
{
    18ba:	b083      	sub	sp, #12
	uint32_t status = USB1_USBSTS;
    18bc:	f8d4 7144 	ldr.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    18c0:	07fb      	lsls	r3, r7, #31
	USB1_USBSTS = status;
    18c2:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    18c6:	d553      	bpl.n	1970 <usb_isr+0xbc>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    18c8:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    18cc:	2a00      	cmp	r2, #0
    18ce:	d04a      	beq.n	1966 <usb_isr+0xb2>
    18d0:	4e92      	ldr	r6, [pc, #584]	; (1b1c <usb_isr+0x268>)
    18d2:	f8df a260 	ldr.w	sl, [pc, #608]	; 1b34 <usb_isr+0x280>
		uint32_t addr = (uint32_t)data;
    18d6:	f8df 9274 	ldr.w	r9, [pc, #628]	; 1b4c <usb_isr+0x298>
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    18da:	f8df b274 	ldr.w	fp, [pc, #628]	; 1b50 <usb_isr+0x29c>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    18de:	f8df 8274 	ldr.w	r8, [pc, #628]	; 1b54 <usb_isr+0x2a0>
			USB1_ENDPTSETUPSTAT = setupstatus;
    18e2:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
    18e6:	e9d6 200a 	ldrd	r2, r0, [r6, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    18ea:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    18ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    18f2:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    18f6:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    18fa:	049d      	lsls	r5, r3, #18
    18fc:	d5f5      	bpl.n	18ea <usb_isr+0x36>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    18fe:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    1902:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    1906:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    190a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    190e:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    1912:	f8d4 51b4 	ldr.w	r5, [r4, #436]	; 0x1b4
    1916:	f015 1501 	ands.w	r5, r5, #65537	; 0x10001
    191a:	d1fa      	bne.n	1912 <usb_isr+0x5e>
			endpoint0_notify_mask = 0;
    191c:	b293      	uxth	r3, r2
	setup.bothwords = setupdata;
    191e:	4684      	mov	ip, r0
			endpoint0_notify_mask = 0;
    1920:	f8ca 5000 	str.w	r5, [sl]
	switch (setup.wRequestAndType) {
    1924:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    1928:	f000 81cf 	beq.w	1cca <usb_isr+0x416>
    192c:	f200 80db 	bhi.w	1ae6 <usb_isr+0x232>
    1930:	f240 3102 	movw	r1, #770	; 0x302
    1934:	428b      	cmp	r3, r1
    1936:	f000 81e7 	beq.w	1d08 <usb_isr+0x454>
    193a:	f200 809a 	bhi.w	1a72 <usb_isr+0x1be>
    193e:	2b82      	cmp	r3, #130	; 0x82
    1940:	f000 81cb 	beq.w	1cda <usb_isr+0x426>
    1944:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    1948:	f040 808a 	bne.w	1a60 <usb_isr+0x1ac>
		if (endpoint > 7) break;
    194c:	f010 0f78 	tst.w	r0, #120	; 0x78
    1950:	b283      	uxth	r3, r0
    1952:	f000 8203 	beq.w	1d5c <usb_isr+0x4a8>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    1956:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    195a:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    195e:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    1962:	2a00      	cmp	r2, #0
    1964:	d1bd      	bne.n	18e2 <usb_isr+0x2e>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    1966:	4a6c      	ldr	r2, [pc, #432]	; (1b18 <usb_isr+0x264>)
    1968:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    196c:	2b00      	cmp	r3, #0
    196e:	d142      	bne.n	19f6 <usb_isr+0x142>
	if (status & USB_USBSTS_URI) { // page 3164
    1970:	067e      	lsls	r6, r7, #25
    1972:	d516      	bpl.n	19a2 <usb_isr+0xee>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    1974:	4b68      	ldr	r3, [pc, #416]	; (1b18 <usb_isr+0x264>)
    1976:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    197a:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    197e:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    1982:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    1986:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    198a:	2c00      	cmp	r4, #0
    198c:	d1fb      	bne.n	1986 <usb_isr+0xd2>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    198e:	f04f 32ff 	mov.w	r2, #4294967295
    1992:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    1996:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    199a:	f000 fd2d 	bl	23f8 <usb_serial_reset>
		endpointN_notify_mask = 0;
    199e:	4b60      	ldr	r3, [pc, #384]	; (1b20 <usb_isr+0x26c>)
    19a0:	601c      	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
    19a2:	01fc      	lsls	r4, r7, #7
    19a4:	d503      	bpl.n	19ae <usb_isr+0xfa>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    19a6:	4b5f      	ldr	r3, [pc, #380]	; (1b24 <usb_isr+0x270>)
    19a8:	681b      	ldr	r3, [r3, #0]
    19aa:	b103      	cbz	r3, 19ae <usb_isr+0xfa>
    19ac:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
    19ae:	01b8      	lsls	r0, r7, #6
    19b0:	d503      	bpl.n	19ba <usb_isr+0x106>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    19b2:	4b5d      	ldr	r3, [pc, #372]	; (1b28 <usb_isr+0x274>)
    19b4:	681b      	ldr	r3, [r3, #0]
    19b6:	b103      	cbz	r3, 19ba <usb_isr+0x106>
    19b8:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
    19ba:	0779      	lsls	r1, r7, #29
    19bc:	d508      	bpl.n	19d0 <usb_isr+0x11c>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    19be:	4b56      	ldr	r3, [pc, #344]	; (1b18 <usb_isr+0x264>)
    19c0:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    19c4:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    19c8:	d047      	beq.n	1a5a <usb_isr+0x1a6>
			usb_high_speed = 1;
    19ca:	4b58      	ldr	r3, [pc, #352]	; (1b2c <usb_isr+0x278>)
    19cc:	2201      	movs	r2, #1
    19ce:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    19d0:	4b51      	ldr	r3, [pc, #324]	; (1b18 <usb_isr+0x264>)
    19d2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
    19d6:	061a      	lsls	r2, r3, #24
    19d8:	d50a      	bpl.n	19f0 <usb_isr+0x13c>
    19da:	063b      	lsls	r3, r7, #24
    19dc:	d508      	bpl.n	19f0 <usb_isr+0x13c>
		if (usb_reboot_timer) {
    19de:	4a54      	ldr	r2, [pc, #336]	; (1b30 <usb_isr+0x27c>)
    19e0:	7813      	ldrb	r3, [r2, #0]
    19e2:	b12b      	cbz	r3, 19f0 <usb_isr+0x13c>
			if (--usb_reboot_timer == 0) {
    19e4:	3b01      	subs	r3, #1
    19e6:	b2db      	uxtb	r3, r3
    19e8:	7013      	strb	r3, [r2, #0]
    19ea:	2b00      	cmp	r3, #0
    19ec:	f000 8272 	beq.w	1ed4 <usb_isr+0x620>
}
    19f0:	b003      	add	sp, #12
    19f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (completestatus & endpoint0_notify_mask) {
    19f6:	494f      	ldr	r1, [pc, #316]	; (1b34 <usb_isr+0x280>)
			USB1_ENDPTCOMPLETE = completestatus;
    19f8:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    19fc:	6808      	ldr	r0, [r1, #0]
    19fe:	4203      	tst	r3, r0
    1a00:	f040 81d1 	bne.w	1da6 <usb_isr+0x4f2>
			completestatus &= endpointN_notify_mask;
    1a04:	4a46      	ldr	r2, [pc, #280]	; (1b20 <usb_isr+0x26c>)
    1a06:	6814      	ldr	r4, [r2, #0]
			if (completestatus) {
    1a08:	401c      	ands	r4, r3
    1a0a:	d0b1      	beq.n	1970 <usb_isr+0xbc>
				while (tx) {
    1a0c:	ea5f 4814 	movs.w	r8, r4, lsr #16
    1a10:	d010      	beq.n	1a34 <usb_isr+0x180>
    1a12:	4e42      	ldr	r6, [pc, #264]	; (1b1c <usb_isr+0x268>)
					tx &= ~(1<<p);
    1a14:	f04f 0901 	mov.w	r9, #1
					int p=__builtin_ctz(tx);
    1a18:	fa98 f5a8 	rbit	r5, r8
    1a1c:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    1a20:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					tx &= ~(1<<p);
    1a24:	fa09 f505 	lsl.w	r5, r9, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    1a28:	3040      	adds	r0, #64	; 0x40
    1a2a:	f7ff fec5 	bl	17b8 <run_callbacks>
				while (tx) {
    1a2e:	ea38 0805 	bics.w	r8, r8, r5
    1a32:	d1f1      	bne.n	1a18 <usb_isr+0x164>
				uint32_t rx = completestatus & 0xffff;
    1a34:	b2a4      	uxth	r4, r4
				while(rx) {
    1a36:	2c00      	cmp	r4, #0
    1a38:	d09a      	beq.n	1970 <usb_isr+0xbc>
    1a3a:	4e38      	ldr	r6, [pc, #224]	; (1b1c <usb_isr+0x268>)
					rx &= ~(1<<p);
    1a3c:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(rx);
    1a40:	fa94 f5a4 	rbit	r5, r4
    1a44:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    1a48:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					rx &= ~(1<<p);
    1a4c:	fa08 f505 	lsl.w	r5, r8, r5
					run_callbacks(endpoint_queue_head + p * 2);
    1a50:	f7ff feb2 	bl	17b8 <run_callbacks>
				while(rx) {
    1a54:	43ac      	bics	r4, r5
    1a56:	d1f3      	bne.n	1a40 <usb_isr+0x18c>
    1a58:	e78a      	b.n	1970 <usb_isr+0xbc>
			usb_high_speed = 0;
    1a5a:	4a34      	ldr	r2, [pc, #208]	; (1b2c <usb_isr+0x278>)
    1a5c:	7013      	strb	r3, [r2, #0]
    1a5e:	e7b7      	b.n	19d0 <usb_isr+0x11c>
	switch (setup.wRequestAndType) {
    1a60:	2b80      	cmp	r3, #128	; 0x80
    1a62:	f47f af78 	bne.w	1956 <usb_isr+0xa2>
		reply_buffer[0] = 0;
    1a66:	4834      	ldr	r0, [pc, #208]	; (1b38 <usb_isr+0x284>)
		endpoint0_transmit(reply_buffer, 2, 0);
    1a68:	2102      	movs	r1, #2
		reply_buffer[0] = 0;
    1a6a:	8005      	strh	r5, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    1a6c:	f7ff fec0 	bl	17f0 <endpoint0_transmit.constprop.0>
		return;
    1a70:	e775      	b.n	195e <usb_isr+0xaa>
	switch (setup.wRequestAndType) {
    1a72:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    1a76:	f000 810b 	beq.w	1c90 <usb_isr+0x3dc>
    1a7a:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
    1a7e:	2b01      	cmp	r3, #1
    1a80:	f63f af69 	bhi.w	1956 <usb_isr+0xa2>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    1a84:	4b2d      	ldr	r3, [pc, #180]	; (1b3c <usb_isr+0x288>)
    1a86:	685d      	ldr	r5, [r3, #4]
    1a88:	2d00      	cmp	r5, #0
    1a8a:	f43f af64 	beq.w	1956 <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    1a8e:	fa1f fc8c 	uxth.w	ip, ip
    1a92:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    1a96:	e004      	b.n	1aa2 <usb_isr+0x1ee>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    1a98:	691d      	ldr	r5, [r3, #16]
    1a9a:	330c      	adds	r3, #12
    1a9c:	2d00      	cmp	r5, #0
    1a9e:	f43f af5a 	beq.w	1956 <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    1aa2:	881a      	ldrh	r2, [r3, #0]
    1aa4:	4572      	cmp	r2, lr
    1aa6:	d1f7      	bne.n	1a98 <usb_isr+0x1e4>
    1aa8:	885a      	ldrh	r2, [r3, #2]
    1aaa:	4562      	cmp	r2, ip
    1aac:	d1f4      	bne.n	1a98 <usb_isr+0x1e4>
				if ((setup.wValue >> 8) == 3) {
    1aae:	ea4f 221e 	mov.w	r2, lr, lsr #8
    1ab2:	2a03      	cmp	r2, #3
    1ab4:	f000 81a5 	beq.w	1e02 <usb_isr+0x54e>
					datalen = list->length;
    1ab8:	891a      	ldrh	r2, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    1aba:	0c00      	lsrs	r0, r0, #16
    1abc:	4282      	cmp	r2, r0
    1abe:	bf28      	it	cs
    1ac0:	4602      	movcs	r2, r0
				if (setup.wValue == 0x200) {
    1ac2:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    1ac6:	f040 81a1 	bne.w	1e0c <usb_isr+0x558>
					if (usb_high_speed) src = usb_config_descriptor_480;
    1aca:	4b18      	ldr	r3, [pc, #96]	; (1b2c <usb_isr+0x278>)
    1acc:	491c      	ldr	r1, [pc, #112]	; (1b40 <usb_isr+0x28c>)
    1ace:	7818      	ldrb	r0, [r3, #0]
    1ad0:	4b1c      	ldr	r3, [pc, #112]	; (1b44 <usb_isr+0x290>)
					memcpy(usb_descriptor_buffer, src, datalen);
    1ad2:	9201      	str	r2, [sp, #4]
    1ad4:	2800      	cmp	r0, #0
    1ad6:	bf18      	it	ne
    1ad8:	4619      	movne	r1, r3
    1ada:	481b      	ldr	r0, [pc, #108]	; (1b48 <usb_isr+0x294>)
    1adc:	f7ff fb7e 	bl	11dc <memcpy>
    1ae0:	4d19      	ldr	r5, [pc, #100]	; (1b48 <usb_isr+0x294>)
    1ae2:	9a01      	ldr	r2, [sp, #4]
    1ae4:	e1e1      	b.n	1eaa <usb_isr+0x5f6>
	switch (setup.wRequestAndType) {
    1ae6:	f242 2121 	movw	r1, #8737	; 0x2221
    1aea:	428b      	cmp	r3, r1
    1aec:	d07c      	beq.n	1be8 <usb_isr+0x334>
    1aee:	d933      	bls.n	1b58 <usb_isr+0x2a4>
    1af0:	f242 3121 	movw	r1, #8993	; 0x2321
    1af4:	428b      	cmp	r3, r1
    1af6:	f000 8081 	beq.w	1bfc <usb_isr+0x348>
    1afa:	f64f 01c0 	movw	r1, #63680	; 0xf8c0
    1afe:	428b      	cmp	r3, r1
    1b00:	f47f af29 	bne.w	1956 <usb_isr+0xa2>
		if ((setup.wIndex & 0xFF00) != 0) break; // 1=Genre, 4=Compat ID, 5=Properties
    1b04:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
    1b08:	b283      	uxth	r3, r0
    1b0a:	f47f af24 	bne.w	1956 <usb_isr+0xa2>
		setup.wIndex |= 0xEE00; // alter wIndex and treat as normal USB descriptor
    1b0e:	f443 436e 	orr.w	r3, r3, #60928	; 0xee00
    1b12:	f363 0c0f 	bfi	ip, r3, #0, #16
    1b16:	e7b5      	b.n	1a84 <usb_isr+0x1d0>
    1b18:	402e0000 	.word	0x402e0000
    1b1c:	20000000 	.word	0x20000000
    1b20:	20002178 	.word	0x20002178
    1b24:	2000220c 	.word	0x2000220c
    1b28:	20002210 	.word	0x20002210
    1b2c:	20002229 	.word	0x20002229
    1b30:	2000222a 	.word	0x2000222a
    1b34:	20002174 	.word	0x20002174
    1b38:	200021a8 	.word	0x200021a8
    1b3c:	20000d10 	.word	0x20000d10
    1b40:	60001eb8 	.word	0x60001eb8
    1b44:	60001f1c 	.word	0x60001f1c
    1b48:	20200000 	.word	0x20200000
    1b4c:	2000216c 	.word	0x2000216c
    1b50:	b8c6cf5d 	.word	0xb8c6cf5d
    1b54:	402e01c0 	.word	0x402e01c0
	switch (setup.wRequestAndType) {
    1b58:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    1b5c:	d066      	beq.n	1c2c <usb_isr+0x378>
    1b5e:	f242 0121 	movw	r1, #8225	; 0x2021
    1b62:	428b      	cmp	r3, r1
    1b64:	f47f aef7 	bne.w	1956 <usb_isr+0xa2>
		if (setup.wLength != 7) break;
    1b68:	0c03      	lsrs	r3, r0, #16
    1b6a:	2b07      	cmp	r3, #7
    1b6c:	f47f aef3 	bne.w	1956 <usb_isr+0xa2>
		endpoint0_transfer_data.next = 1;
    1b70:	4bb2      	ldr	r3, [pc, #712]	; (1e3c <usb_isr+0x588>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
    1b72:	49b3      	ldr	r1, [pc, #716]	; (1e40 <usb_isr+0x58c>)
		endpoint_queue_head[0].status = 0;
    1b74:	60f5      	str	r5, [r6, #12]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    1b76:	60d9      	str	r1, [r3, #12]
		endpoint0_setupdata.bothwords = setupdata;
    1b78:	49b2      	ldr	r1, [pc, #712]	; (1e44 <usb_isr+0x590>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    1b7a:	60b3      	str	r3, [r6, #8]
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    1b7c:	f8c3 9008 	str.w	r9, [r3, #8]
		endpoint0_setupdata.bothwords = setupdata;
    1b80:	e9c1 2000 	strd	r2, r0, [r1]
		endpoint0_transfer_data.next = 1;
    1b84:	2201      	movs	r2, #1
    1b86:	601a      	str	r2, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1b88:	4aaf      	ldr	r2, [pc, #700]	; (1e48 <usb_isr+0x594>)
    1b8a:	605a      	str	r2, [r3, #4]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    1b8c:	4aaf      	ldr	r2, [pc, #700]	; (1e4c <usb_isr+0x598>)
    1b8e:	611a      	str	r2, [r3, #16]
		USB1_ENDPTPRIME |= (1<<0);
    1b90:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
    1b94:	f041 0101 	orr.w	r1, r1, #1
    1b98:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.pointer3 = addr + 12288;
    1b9c:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    1ba0:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    1ba4:	6159      	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    1ba6:	619a      	str	r2, [r3, #24]
		while (USB1_ENDPTPRIME) ;
    1ba8:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1bac:	2b00      	cmp	r3, #0
    1bae:	d1fb      	bne.n	1ba8 <usb_isr+0x2f4>
	endpoint0_transfer_ack.next = 1;
    1bb0:	4aa7      	ldr	r2, [pc, #668]	; (1e50 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    1bb2:	64f3      	str	r3, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    1bb4:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
    1bb6:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1bb8:	64b2      	str	r2, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    1bba:	6013      	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1bbc:	f248 0380 	movw	r3, #32896	; 0x8080
    1bc0:	6053      	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1bc2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    1bc6:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1bca:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1bce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    1bd2:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    1bd6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    1bda:	f8ca 3000 	str.w	r3, [sl]
	while (USB1_ENDPTPRIME) ;
    1bde:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1be2:	2b00      	cmp	r3, #0
    1be4:	d1fb      	bne.n	1bde <usb_isr+0x32a>
    1be6:	e6ba      	b.n	195e <usb_isr+0xaa>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    1be8:	b280      	uxth	r0, r0
    1bea:	b938      	cbnz	r0, 1bfc <usb_isr+0x348>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    1bec:	4b99      	ldr	r3, [pc, #612]	; (1e54 <usb_isr+0x5a0>)
			usb_cdc_line_rtsdtr = setup.wValue;
    1bee:	f3c2 4207 	ubfx	r2, r2, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    1bf2:	6819      	ldr	r1, [r3, #0]
    1bf4:	4b98      	ldr	r3, [pc, #608]	; (1e58 <usb_isr+0x5a4>)
    1bf6:	6019      	str	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    1bf8:	4b98      	ldr	r3, [pc, #608]	; (1e5c <usb_isr+0x5a8>)
    1bfa:	701a      	strb	r2, [r3, #0]
	endpoint0_transfer_ack.next = 1;
    1bfc:	4b94      	ldr	r3, [pc, #592]	; (1e50 <usb_isr+0x59c>)
	endpoint0_transfer_ack.pointer0 = 0;
    1bfe:	2200      	movs	r2, #0
    1c00:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
    1c02:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    1c04:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1c06:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    1c08:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1c0a:	2280      	movs	r2, #128	; 0x80
    1c0c:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1c0e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    1c12:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1c16:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1c1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    1c1e:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    1c22:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1c26:	2b00      	cmp	r3, #0
    1c28:	d1fb      	bne.n	1c22 <usb_isr+0x36e>
    1c2a:	e698      	b.n	195e <usb_isr+0xaa>
		usb_configuration = setup.wValue;
    1c2c:	f3c2 4207 	ubfx	r2, r2, #16, #8
    1c30:	4b8b      	ldr	r3, [pc, #556]	; (1e60 <usb_isr+0x5ac>)
    1c32:	701a      	strb	r2, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    1c34:	4b8b      	ldr	r3, [pc, #556]	; (1e64 <usb_isr+0x5b0>)
    1c36:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    1c3a:	4b8b      	ldr	r3, [pc, #556]	; (1e68 <usb_isr+0x5b4>)
    1c3c:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    1c40:	4b8a      	ldr	r3, [pc, #552]	; (1e6c <usb_isr+0x5b8>)
    1c42:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		usb_serial_configure();
    1c46:	f000 fbd9 	bl	23fc <usb_serial_configure>
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
    1c4a:	2280      	movs	r2, #128	; 0x80
    1c4c:	4629      	mov	r1, r5
    1c4e:	4888      	ldr	r0, [pc, #544]	; (1e70 <usb_isr+0x5bc>)
    1c50:	f001 ff14 	bl	3a7c <memset>
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    1c54:	4b87      	ldr	r3, [pc, #540]	; (1e74 <usb_isr+0x5c0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1c56:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    1c58:	f8c6 b0a0 	str.w	fp, [r6, #160]	; 0xa0
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    1c5c:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
	endpoint0_transfer_ack.next = 1;
    1c60:	4b7b      	ldr	r3, [pc, #492]	; (1e50 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    1c62:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1c64:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.next = 1;
    1c66:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1c68:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.pointer0 = 0;
    1c6a:	609d      	str	r5, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    1c6c:	601a      	str	r2, [r3, #0]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1c6e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    1c72:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1c76:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1c7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    1c7e:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    1c82:	f8ca 5000 	str.w	r5, [sl]
	while (USB1_ENDPTPRIME) ;
    1c86:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1c8a:	2b00      	cmp	r3, #0
    1c8c:	d1fb      	bne.n	1c86 <usb_isr+0x3d2>
    1c8e:	e666      	b.n	195e <usb_isr+0xaa>
	endpoint0_transfer_ack.next = 1;
    1c90:	4b6f      	ldr	r3, [pc, #444]	; (1e50 <usb_isr+0x59c>)
    1c92:	2101      	movs	r1, #1
	endpoint_queue_head[1].status = 0;
    1c94:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    1c96:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1c98:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    1c9a:	609d      	str	r5, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1c9c:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1c9e:	6059      	str	r1, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1ca0:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    1ca4:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1ca8:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1cac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    1cb0:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    1cb4:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1cb8:	2b00      	cmp	r3, #0
    1cba:	d1fb      	bne.n	1cb4 <usb_isr+0x400>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    1cbc:	0c13      	lsrs	r3, r2, #16
    1cbe:	065b      	lsls	r3, r3, #25
    1cc0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    1cc4:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		return;
    1cc8:	e649      	b.n	195e <usb_isr+0xaa>
		reply_buffer[0] = usb_configuration;
    1cca:	4b65      	ldr	r3, [pc, #404]	; (1e60 <usb_isr+0x5ac>)
		endpoint0_transmit(reply_buffer, 1, 0);
    1ccc:	2101      	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    1cce:	486a      	ldr	r0, [pc, #424]	; (1e78 <usb_isr+0x5c4>)
    1cd0:	781b      	ldrb	r3, [r3, #0]
    1cd2:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    1cd4:	f7ff fd8c 	bl	17f0 <endpoint0_transmit.constprop.0>
		return;
    1cd8:	e641      	b.n	195e <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    1cda:	b283      	uxth	r3, r0
		if (endpoint > 7) break;
    1cdc:	f010 0078 	ands.w	r0, r0, #120	; 0x78
    1ce0:	f47f ae39 	bne.w	1956 <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    1ce4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    1ce8:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
		reply_buffer[0] = 0;
    1cec:	4a62      	ldr	r2, [pc, #392]	; (1e78 <usb_isr+0x5c4>)
    1cee:	8010      	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    1cf0:	0618      	lsls	r0, r3, #24
    1cf2:	f100 809e 	bmi.w	1e32 <usb_isr+0x57e>
    1cf6:	07cb      	lsls	r3, r1, #31
    1cf8:	d501      	bpl.n	1cfe <usb_isr+0x44a>
			reply_buffer[0] = 1;
    1cfa:	2301      	movs	r3, #1
    1cfc:	7013      	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    1cfe:	2102      	movs	r1, #2
    1d00:	485d      	ldr	r0, [pc, #372]	; (1e78 <usb_isr+0x5c4>)
    1d02:	f7ff fd75 	bl	17f0 <endpoint0_transmit.constprop.0>
		return;
    1d06:	e62a      	b.n	195e <usb_isr+0xaa>
		if (endpoint > 7) break;
    1d08:	f010 0f78 	tst.w	r0, #120	; 0x78
    1d0c:	b283      	uxth	r3, r0
    1d0e:	f47f ae22 	bne.w	1956 <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    1d12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    1d16:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    1d1a:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    1d1e:	bf14      	ite	ne
    1d20:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    1d24:	f043 0301 	orreq.w	r3, r3, #1
    1d28:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    1d2c:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    1d2e:	4b48      	ldr	r3, [pc, #288]	; (1e50 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    1d30:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    1d32:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    1d34:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1d36:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    1d38:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1d3a:	2280      	movs	r2, #128	; 0x80
    1d3c:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1d3e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    1d42:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1d46:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1d4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    1d4e:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    1d52:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1d56:	2b00      	cmp	r3, #0
    1d58:	d1fb      	bne.n	1d52 <usb_isr+0x49e>
    1d5a:	e600      	b.n	195e <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    1d5c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    1d60:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    1d64:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    1d68:	bf14      	ite	ne
    1d6a:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    1d6e:	f023 0301 	biceq.w	r3, r3, #1
    1d72:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    1d76:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    1d78:	4b35      	ldr	r3, [pc, #212]	; (1e50 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    1d7a:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    1d7c:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    1d7e:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1d80:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    1d82:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1d84:	2280      	movs	r2, #128	; 0x80
    1d86:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1d88:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    1d8c:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1d90:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    1d98:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    1d9c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1da0:	2b00      	cmp	r3, #0
    1da2:	d1fb      	bne.n	1d9c <usb_isr+0x4e8>
    1da4:	e5db      	b.n	195e <usb_isr+0xaa>
				endpoint0_notify_mask = 0;
    1da6:	2000      	movs	r0, #0
    1da8:	6008      	str	r0, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    1daa:	4926      	ldr	r1, [pc, #152]	; (1e44 <usb_isr+0x590>)
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    1dac:	880c      	ldrh	r4, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    1dae:	6848      	ldr	r0, [r1, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    1db0:	f242 0121 	movw	r1, #8225	; 0x2021
    1db4:	428c      	cmp	r4, r1
    1db6:	f47f ae25 	bne.w	1a04 <usb_isr+0x150>
    1dba:	b280      	uxth	r0, r0
    1dbc:	2800      	cmp	r0, #0
    1dbe:	f47f ae21 	bne.w	1a04 <usb_isr+0x150>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    1dc2:	492e      	ldr	r1, [pc, #184]	; (1e7c <usb_isr+0x5c8>)
    1dc4:	4c2e      	ldr	r4, [pc, #184]	; (1e80 <usb_isr+0x5cc>)
    1dc6:	c903      	ldmia	r1, {r0, r1}
    1dc8:	80a1      	strh	r1, [r4, #4]
		if (usb_cdc_line_coding[0] == 134) {
    1dca:	2886      	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    1dcc:	ea4f 4111 	mov.w	r1, r1, lsr #16
    1dd0:	6020      	str	r0, [r4, #0]
    1dd2:	71a1      	strb	r1, [r4, #6]
		if (usb_cdc_line_coding[0] == 134) {
    1dd4:	f47f ae16 	bne.w	1a04 <usb_isr+0x150>
	__disable_irq();
    1dd8:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    1dda:	482a      	ldr	r0, [pc, #168]	; (1e84 <usb_isr+0x5d0>)
    1ddc:	7801      	ldrb	r1, [r0, #0]
    1dde:	f041 0108 	orr.w	r1, r1, #8
    1de2:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    1de4:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    1de8:	060d      	lsls	r5, r1, #24
    1dea:	d405      	bmi.n	1df8 <usb_isr+0x544>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    1dec:	2080      	movs	r0, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    1dee:	4301      	orrs	r1, r0
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    1df0:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    1df4:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	__enable_irq();
    1df8:	b662      	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    1dfa:	4a23      	ldr	r2, [pc, #140]	; (1e88 <usb_isr+0x5d4>)
    1dfc:	2150      	movs	r1, #80	; 0x50
    1dfe:	7011      	strb	r1, [r2, #0]
    1e00:	e600      	b.n	1a04 <usb_isr+0x150>
				if (datalen > setup.wLength) datalen = setup.wLength;
    1e02:	0c00      	lsrs	r0, r0, #16
					datalen = *(list->addr);
    1e04:	782a      	ldrb	r2, [r5, #0]
    1e06:	4282      	cmp	r2, r0
    1e08:	bf28      	it	cs
    1e0a:	4602      	movcs	r2, r0
				} else if (setup.wValue == 0x700) {
    1e0c:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
    1e10:	d144      	bne.n	1e9c <usb_isr+0x5e8>
					if (usb_high_speed) src = usb_config_descriptor_12;
    1e12:	4b1e      	ldr	r3, [pc, #120]	; (1e8c <usb_isr+0x5d8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    1e14:	4d1e      	ldr	r5, [pc, #120]	; (1e90 <usb_isr+0x5dc>)
					if (usb_high_speed) src = usb_config_descriptor_12;
    1e16:	7818      	ldrb	r0, [r3, #0]
    1e18:	491e      	ldr	r1, [pc, #120]	; (1e94 <usb_isr+0x5e0>)
    1e1a:	4b1f      	ldr	r3, [pc, #124]	; (1e98 <usb_isr+0x5e4>)
					memcpy(usb_descriptor_buffer, src, datalen);
    1e1c:	9201      	str	r2, [sp, #4]
    1e1e:	2800      	cmp	r0, #0
    1e20:	bf18      	it	ne
    1e22:	4619      	movne	r1, r3
    1e24:	4628      	mov	r0, r5
    1e26:	f7ff f9d9 	bl	11dc <memcpy>
					usb_descriptor_buffer[1] = 7;
    1e2a:	2307      	movs	r3, #7
    1e2c:	706b      	strb	r3, [r5, #1]
    1e2e:	9a01      	ldr	r2, [sp, #4]
    1e30:	e03b      	b.n	1eaa <usb_isr+0x5f6>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    1e32:	03c9      	lsls	r1, r1, #15
    1e34:	f53f af61 	bmi.w	1cfa <usb_isr+0x446>
    1e38:	e761      	b.n	1cfe <usb_isr+0x44a>
    1e3a:	bf00      	nop
    1e3c:	20001ae0 	.word	0x20001ae0
    1e40:	2000316c 	.word	0x2000316c
    1e44:	20001c80 	.word	0x20001c80
    1e48:	00070080 	.word	0x00070080
    1e4c:	2000416c 	.word	0x2000416c
    1e50:	20001ac0 	.word	0x20001ac0
    1e54:	200021f8 	.word	0x200021f8
    1e58:	20002208 	.word	0x20002208
    1e5c:	20002227 	.word	0x20002227
    1e60:	20002228 	.word	0x20002228
    1e64:	00cc0002 	.word	0x00cc0002
    1e68:	000200c8 	.word	0x000200c8
    1e6c:	00c80002 	.word	0x00c80002
    1e70:	20000080 	.word	0x20000080
    1e74:	74d59319 	.word	0x74d59319
    1e78:	200021a8 	.word	0x200021a8
    1e7c:	2000216c 	.word	0x2000216c
    1e80:	20002200 	.word	0x20002200
    1e84:	20002223 	.word	0x20002223
    1e88:	2000222a 	.word	0x2000222a
    1e8c:	20002229 	.word	0x20002229
    1e90:	20200000 	.word	0x20200000
    1e94:	60001f1c 	.word	0x60001f1c
    1e98:	60001eb8 	.word	0x60001eb8
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    1e9c:	4629      	mov	r1, r5
    1e9e:	4d10      	ldr	r5, [pc, #64]	; (1ee0 <usb_isr+0x62c>)
    1ea0:	9201      	str	r2, [sp, #4]
    1ea2:	4628      	mov	r0, r5
    1ea4:	f7ff f99a 	bl	11dc <memcpy>
    1ea8:	9a01      	ldr	r2, [sp, #4]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    1eaa:	f025 031f 	bic.w	r3, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
    1eae:	4415      	add	r5, r2
	asm("dsb");
    1eb0:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    1eb4:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    1eb8:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    1ebc:	3320      	adds	r3, #32
	} while (location < end_addr);
    1ebe:	429d      	cmp	r5, r3
    1ec0:	d8fa      	bhi.n	1eb8 <usb_isr+0x604>
	asm("dsb");
    1ec2:	f3bf 8f4f 	dsb	sy
	asm("isb");
    1ec6:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    1eca:	4805      	ldr	r0, [pc, #20]	; (1ee0 <usb_isr+0x62c>)
    1ecc:	4611      	mov	r1, r2
    1ece:	f7ff fc8f 	bl	17f0 <endpoint0_transmit.constprop.0>
				return;
    1ed2:	e544      	b.n	195e <usb_isr+0xaa>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    1ed4:	2003      	movs	r0, #3
    1ed6:	f7ff fcd7 	bl	1888 <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    1eda:	f007 fa29 	bl	9330 <___reboot_Teensyduino__veneer>
    1ede:	bf00      	nop
    1ee0:	20200000 	.word	0x20200000

00001ee4 <usb_config_rx>:
{
    1ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1ee8:	461f      	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    1eea:	1e83      	subs	r3, r0, #2
    1eec:	2b02      	cmp	r3, #2
    1eee:	d901      	bls.n	1ef4 <usb_config_rx+0x10>
}
    1ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    1ef4:	f8df 904c 	ldr.w	r9, [pc, #76]	; 1f44 <usb_config_rx+0x60>
    1ef8:	4615      	mov	r5, r2
    1efa:	460c      	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
    1efc:	223c      	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    1efe:	eb09 18c0 	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    1f02:	4606      	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    1f04:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    1f08:	2100      	movs	r1, #0
    1f0a:	f108 0004 	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1f0e:	0424      	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
    1f10:	f001 fdb4 	bl	3a7c <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1f14:	fab5 f285 	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
    1f18:	2301      	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1f1a:	0952      	lsrs	r2, r2, #5
    1f1c:	ea44 7442 	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
    1f20:	f849 400a 	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    1f24:	f8c8 7038 	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    1f28:	f8c8 3008 	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    1f2c:	2f00      	cmp	r7, #0
    1f2e:	d0df      	beq.n	1ef0 <usb_config_rx+0xc>
    1f30:	4a03      	ldr	r2, [pc, #12]	; (1f40 <usb_config_rx+0x5c>)
    1f32:	40b3      	lsls	r3, r6
    1f34:	6811      	ldr	r1, [r2, #0]
    1f36:	430b      	orrs	r3, r1
    1f38:	6013      	str	r3, [r2, #0]
}
    1f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1f3e:	bf00      	nop
    1f40:	20002178 	.word	0x20002178
    1f44:	20000000 	.word	0x20000000

00001f48 <usb_config_tx>:
{
    1f48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1f4c:	460d      	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    1f4e:	1e81      	subs	r1, r0, #2
    1f50:	2902      	cmp	r1, #2
    1f52:	d901      	bls.n	1f58 <usb_config_tx+0x10>
}
    1f54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    1f58:	01c7      	lsls	r7, r0, #7
    1f5a:	f8df 904c 	ldr.w	r9, [pc, #76]	; 1fa8 <usb_config_tx+0x60>
    1f5e:	4692      	mov	sl, r2
    1f60:	4604      	mov	r4, r0
    1f62:	3740      	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    1f64:	223c      	movs	r2, #60	; 0x3c
    1f66:	2100      	movs	r1, #0
    1f68:	461e      	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    1f6a:	eb09 0807 	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1f6e:	042d      	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
    1f70:	f108 0004 	add.w	r0, r8, #4
    1f74:	f001 fd82 	bl	3a7c <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1f78:	faba f28a 	clz	r2, sl
    1f7c:	0952      	lsrs	r2, r2, #5
    1f7e:	ea45 7242 	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
    1f82:	f849 2007 	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
    1f86:	2201      	movs	r2, #1
	qh->callback_function = callback;
    1f88:	f8c8 6038 	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    1f8c:	f8c8 2008 	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    1f90:	2e00      	cmp	r6, #0
    1f92:	d0df      	beq.n	1f54 <usb_config_tx+0xc>
    1f94:	4b03      	ldr	r3, [pc, #12]	; (1fa4 <usb_config_tx+0x5c>)
    1f96:	3410      	adds	r4, #16
    1f98:	6819      	ldr	r1, [r3, #0]
    1f9a:	40a2      	lsls	r2, r4
    1f9c:	430a      	orrs	r2, r1
    1f9e:	601a      	str	r2, [r3, #0]
}
    1fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1fa4:	20002178 	.word	0x20002178
    1fa8:	20000000 	.word	0x20000000

00001fac <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    1fac:	0412      	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    1fae:	6081      	str	r1, [r0, #8]
	transfer->callback_param = param;
    1fb0:	61c3      	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
    1fb2:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
    1fb6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
    1fba:	b410      	push	{r4}
	transfer->next = 1;
    1fbc:	2401      	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
    1fbe:	6042      	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
    1fc0:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
    1fc4:	6004      	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
    1fc6:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
    1fca:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
    1fce:	60c4      	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
    1fd0:	6181      	str	r1, [r0, #24]
}
    1fd2:	f85d 4b04 	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
    1fd6:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
    1fda:	4770      	bx	lr

00001fdc <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    1fdc:	1e83      	subs	r3, r0, #2
{
    1fde:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    1fe0:	2b02      	cmp	r3, #2
    1fe2:	d900      	bls.n	1fe6 <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    1fe4:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    1fe6:	4b06      	ldr	r3, [pc, #24]	; (2000 <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
    1fe8:	f100 0110 	add.w	r1, r0, #16
    1fec:	f04f 0c01 	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    1ff0:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    1ff4:	fa0c f101 	lsl.w	r1, ip, r1
    1ff8:	3040      	adds	r0, #64	; 0x40
    1ffa:	f7ff bb99 	b.w	1730 <schedule_transfer>
    1ffe:	bf00      	nop
    2000:	20000000 	.word	0x20000000

00002004 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    2004:	1e83      	subs	r3, r0, #2
{
    2006:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    2008:	2b02      	cmp	r3, #2
    200a:	d900      	bls.n	200e <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    200c:	4770      	bx	lr
	uint32_t mask = 1 << endpoint_number;
    200e:	2101      	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    2010:	4b02      	ldr	r3, [pc, #8]	; (201c <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
    2012:	4081      	lsls	r1, r0
    2014:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    2018:	f7ff bb8a 	b.w	1730 <schedule_transfer>
    201c:	20000000 	.word	0x20000000

00002020 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    2020:	6840      	ldr	r0, [r0, #4]
#endif
}
    2022:	4770      	bx	lr

00002024 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    2024:	4a12      	ldr	r2, [pc, #72]	; (2070 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    2026:	4b13      	ldr	r3, [pc, #76]	; (2074 <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    2028:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    202c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    2030:	4298      	cmp	r0, r3
{
    2032:	b510      	push	{r4, lr}
    2034:	b084      	sub	sp, #16
	if (num < 10000000) num = num * 10;
    2036:	d202      	bcs.n	203e <usb_init_serialnumber+0x1a>
    2038:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    203c:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    203e:	4c0e      	ldr	r4, [pc, #56]	; (2078 <usb_init_serialnumber+0x54>)
    2040:	a901      	add	r1, sp, #4
    2042:	220a      	movs	r2, #10
    2044:	f7ff f964 	bl	1310 <ultoa>
	for (i=0; i<10; i++) {
    2048:	a901      	add	r1, sp, #4
    204a:	2300      	movs	r3, #0
    204c:	4620      	mov	r0, r4
		char c = buf[i];
    204e:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    2052:	3301      	adds	r3, #1
		if (!c) break;
    2054:	b13a      	cbz	r2, 2066 <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
    2056:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    2058:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    205c:	d1f7      	bne.n	204e <usb_init_serialnumber+0x2a>
    205e:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    2060:	7023      	strb	r3, [r4, #0]
}
    2062:	b004      	add	sp, #16
    2064:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    2066:	005b      	lsls	r3, r3, #1
    2068:	b2db      	uxtb	r3, r3
    206a:	7023      	strb	r3, [r4, #0]
}
    206c:	b004      	add	sp, #16
    206e:	bd10      	pop	{r4, pc}
    2070:	401f4400 	.word	0x401f4400
    2074:	00989680 	.word	0x00989680
    2078:	20001590 	.word	0x20001590

0000207c <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    207c:	f000 badc 	b.w	2638 <usb_serial_flush_input>

00002080 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    2080:	f000 baac 	b.w	25dc <usb_serial_peekchar>

00002084 <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    2084:	f000 bb10 	b.w	26a8 <usb_serial_getchar>

00002088 <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    2088:	f000 baca 	b.w	2620 <usb_serial_available>

0000208c <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    208c:	f000 bb66 	b.w	275c <usb_serial_flush_output>

00002090 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    2090:	f000 bb3c 	b.w	270c <usb_serial_write_buffer_free>

00002094 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    2094:	4608      	mov	r0, r1
    2096:	4611      	mov	r1, r2
    2098:	f000 bb2c 	b.w	26f4 <usb_serial_write>

0000209c <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    209c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    209e:	4c14      	ldr	r4, [pc, #80]	; (20f0 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    20a0:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    20a4:	4e13      	ldr	r6, [pc, #76]	; (20f4 <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    20a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    20aa:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    20ae:	4f12      	ldr	r7, [pc, #72]	; (20f8 <rx_queue_transfer+0x5c>)
    20b0:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
    20b4:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    20b6:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    20ba:	4621      	mov	r1, r4
    20bc:	883a      	ldrh	r2, [r7, #0]
    20be:	4630      	mov	r0, r6
    20c0:	f7ff ff74 	bl	1fac <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    20c4:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    20c6:	4423      	add	r3, r4
	asm("dsb");
    20c8:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    20cc:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    20d0:	3420      	adds	r4, #32
	} while (location < end_addr);
    20d2:	42a3      	cmp	r3, r4
    20d4:	d8fa      	bhi.n	20cc <rx_queue_transfer+0x30>
	asm("dsb");
    20d6:	f3bf 8f4f 	dsb	sy
	asm("isb");
    20da:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    20de:	2003      	movs	r0, #3
    20e0:	4631      	mov	r1, r6
    20e2:	f7ff ff8f 	bl	2004 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    20e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    20ea:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
    20ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    20f0:	20200080 	.word	0x20200080
    20f4:	20001b00 	.word	0x20001b00
    20f8:	20002214 	.word	0x20002214

000020fc <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    20fc:	4b24      	ldr	r3, [pc, #144]	; (2190 <rx_event+0x94>)
{
    20fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    2102:	881c      	ldrh	r4, [r3, #0]
    2104:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
    2106:	69c5      	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    2108:	f3c3 430e 	ubfx	r3, r3, #16, #15
    210c:	1ae4      	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    210e:	2c00      	cmp	r4, #0
    2110:	dd24      	ble.n	215c <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
    2112:	4920      	ldr	r1, [pc, #128]	; (2194 <rx_event+0x98>)
		if (head != rx_tail) {
    2114:	4820      	ldr	r0, [pc, #128]	; (2198 <rx_event+0x9c>)
		uint32_t head = rx_head;
    2116:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    2118:	7800      	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    211a:	b2d3      	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
    211c:	4e1f      	ldr	r6, [pc, #124]	; (219c <rx_event+0xa0>)
		if (head != rx_tail) {
    211e:	4282      	cmp	r2, r0
			uint32_t ii = rx_list[head];
    2120:	481f      	ldr	r0, [pc, #124]	; (21a0 <rx_event+0xa4>)
		if (head != rx_tail) {
    2122:	d007      	beq.n	2134 <rx_event+0x38>
			uint32_t ii = rx_list[head];
    2124:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    2128:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    212c:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    2130:	4294      	cmp	r4, r2
    2132:	d918      	bls.n	2166 <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    2134:	3301      	adds	r3, #1
		rx_index[i] = 0;
    2136:	2200      	movs	r2, #0
		rx_count[i] = len;
    2138:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    213c:	2b08      	cmp	r3, #8
		rx_index[i] = 0;
    213e:	4e19      	ldr	r6, [pc, #100]	; (21a4 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    2140:	bf88      	it	hi
    2142:	4613      	movhi	r3, r2
		rx_index[i] = 0;
    2144:	f826 2015 	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
    2148:	bf98      	it	ls
    214a:	b2da      	uxtbls	r2, r3
		rx_list[head] = i;
    214c:	54c5      	strb	r5, [r0, r3]
		rx_available += len;
    214e:	4b16      	ldr	r3, [pc, #88]	; (21a8 <rx_event+0xac>)
		rx_head = head;
    2150:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    2152:	681a      	ldr	r2, [r3, #0]
    2154:	4414      	add	r4, r2
    2156:	601c      	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    2158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
    215c:	4628      	mov	r0, r5
}
    215e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
    2162:	f7ff bf9b 	b.w	209c <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    2166:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    216a:	4910      	ldr	r1, [pc, #64]	; (21ac <rx_event+0xb0>)
    216c:	4622      	mov	r2, r4
				rx_count[ii] = count + len;
    216e:	4427      	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    2170:	4408      	add	r0, r1
    2172:	eb01 2145 	add.w	r1, r1, r5, lsl #9
    2176:	f7ff f831 	bl	11dc <memcpy>
				rx_available += len;
    217a:	4a0b      	ldr	r2, [pc, #44]	; (21a8 <rx_event+0xac>)
				rx_queue_transfer(i);
    217c:	4628      	mov	r0, r5
				rx_count[ii] = count + len;
    217e:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    2182:	6813      	ldr	r3, [r2, #0]
    2184:	4423      	add	r3, r4
}
    2186:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
    218a:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
    218c:	f7ff bf86 	b.w	209c <rx_queue_transfer>
    2190:	20002214 	.word	0x20002214
    2194:	20002221 	.word	0x20002221
    2198:	20002222 	.word	0x20002222
    219c:	200021b4 	.word	0x200021b4
    21a0:	200021d4 	.word	0x200021d4
    21a4:	200021c4 	.word	0x200021c4
    21a8:	200021b0 	.word	0x200021b0
    21ac:	20200080 	.word	0x20200080

000021b0 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    21b0:	4b1d      	ldr	r3, [pc, #116]	; (2228 <usb_serial_flush_callback+0x78>)
    21b2:	781a      	ldrb	r2, [r3, #0]
    21b4:	2a00      	cmp	r2, #0
    21b6:	d136      	bne.n	2226 <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
    21b8:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    21bc:	4a1b      	ldr	r2, [pc, #108]	; (222c <usb_serial_flush_callback+0x7c>)
    21be:	7812      	ldrb	r2, [r2, #0]
    21c0:	b38a      	cbz	r2, 2226 <usb_serial_flush_callback+0x76>
{
    21c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
    21c6:	4d1a      	ldr	r5, [pc, #104]	; (2230 <usb_serial_flush_callback+0x80>)
    21c8:	882a      	ldrh	r2, [r5, #0]
    21ca:	b352      	cbz	r2, 2222 <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    21cc:	4e19      	ldr	r6, [pc, #100]	; (2234 <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    21ce:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    21d2:	4f19      	ldr	r7, [pc, #100]	; (2238 <usb_serial_flush_callback+0x88>)
    21d4:	7832      	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    21d6:	4c19      	ldr	r4, [pc, #100]	; (223c <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    21d8:	eb07 1742 	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    21dc:	eb04 24c2 	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    21e0:	4642      	mov	r2, r8
    21e2:	4638      	mov	r0, r7
    21e4:	4621      	mov	r1, r4
    21e6:	f7ff fee1 	bl	1fac <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    21ea:	eb04 0208 	add.w	r2, r4, r8
	asm("dsb");
    21ee:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    21f2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    21f6:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    21fa:	3420      	adds	r4, #32
	} while (location < end_addr);
    21fc:	42a2      	cmp	r2, r4
    21fe:	d8fa      	bhi.n	21f6 <usb_serial_flush_callback+0x46>
	asm("dsb");
    2200:	f3bf 8f4f 	dsb	sy
	asm("isb");
    2204:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    2208:	2004      	movs	r0, #4
    220a:	4639      	mov	r1, r7
    220c:	f7ff fee6 	bl	1fdc <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    2210:	7833      	ldrb	r3, [r6, #0]
    2212:	3301      	adds	r3, #1
    2214:	b2db      	uxtb	r3, r3
    2216:	2b03      	cmp	r3, #3
    2218:	bf88      	it	hi
    221a:	2300      	movhi	r3, #0
    221c:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    221e:	2300      	movs	r3, #0
    2220:	802b      	strh	r3, [r5, #0]
}
    2222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2226:	4770      	bx	lr
    2228:	20002226 	.word	0x20002226
    222c:	20002228 	.word	0x20002228
    2230:	20002216 	.word	0x20002216
    2234:	20002225 	.word	0x20002225
    2238:	20001c00 	.word	0x20001c00
    223c:	20201080 	.word	0x20201080

00002240 <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
    2240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2244:	b085      	sub	sp, #20
	while (size > 0) {
    2246:	e9cd 1001 	strd	r1, r0, [sp, #4]
    224a:	2900      	cmp	r1, #0
    224c:	f000 80bf 	beq.w	23ce <usb_serial_write.part.0+0x18e>
	uint32_t sent=0;
    2250:	2300      	movs	r3, #0
    2252:	4c60      	ldr	r4, [pc, #384]	; (23d4 <usb_serial_write.part.0+0x194>)
    2254:	f8df 8198 	ldr.w	r8, [pc, #408]	; 23f0 <usb_serial_write.part.0+0x1b0>
    2258:	f8df a198 	ldr.w	sl, [pc, #408]	; 23f4 <usb_serial_write.part.0+0x1b4>
				wait_begin_at = systick_millis_count;
    225c:	4f5e      	ldr	r7, [pc, #376]	; (23d8 <usb_serial_write.part.0+0x198>)
	uint32_t sent=0;
    225e:	9300      	str	r3, [sp, #0]
		tx_noautoflush = 1;
    2260:	2301      	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    2262:	4a5e      	ldr	r2, [pc, #376]	; (23dc <usb_serial_write.part.0+0x19c>)
		tx_noautoflush = 1;
    2264:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    2266:	4b5e      	ldr	r3, [pc, #376]	; (23e0 <usb_serial_write.part.0+0x1a0>)
    2268:	7819      	ldrb	r1, [r3, #0]
		while (!tx_available) {
    226a:	f8b8 3000 	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
    226e:	eb02 1941 	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
    2272:	2b00      	cmp	r3, #0
    2274:	f040 80a7 	bne.w	23c6 <usb_serial_write.part.0+0x186>
		uint32_t wait_begin_at=0;
    2278:	461e      	mov	r6, r3
		int waiting=0;
    227a:	461d      	mov	r5, r3
			tx_noautoflush = 0;
    227c:	469b      	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
    227e:	4648      	mov	r0, r9
    2280:	f7ff fece 	bl	2020 <usb_transfer_status>
			if (!(status & 0x80)) {
    2284:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    2288:	f000 808c 	beq.w	23a4 <usb_serial_write.part.0+0x164>
			asm("dsb" ::: "memory");
    228c:	f3bf 8f4f 	dsb	sy
			if (transmit_previous_timeout) return sent;
    2290:	f89a 3000 	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
    2294:	f884 b000 	strb.w	fp, [r4]
			if (!waiting) {
    2298:	b905      	cbnz	r5, 229c <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
    229a:	683e      	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
    229c:	2b00      	cmp	r3, #0
    229e:	d17d      	bne.n	239c <usb_serial_write.part.0+0x15c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    22a0:	683b      	ldr	r3, [r7, #0]
    22a2:	1b9b      	subs	r3, r3, r6
    22a4:	2b78      	cmp	r3, #120	; 0x78
    22a6:	f200 8087 	bhi.w	23b8 <usb_serial_write.part.0+0x178>
			if (!usb_configuration) return sent;
    22aa:	4b4e      	ldr	r3, [pc, #312]	; (23e4 <usb_serial_write.part.0+0x1a4>)
    22ac:	781b      	ldrb	r3, [r3, #0]
    22ae:	2b00      	cmp	r3, #0
    22b0:	d074      	beq.n	239c <usb_serial_write.part.0+0x15c>
			yield();
    22b2:	f000 fa9d 	bl	27f0 <yield>
			tx_noautoflush = 1;
    22b6:	2201      	movs	r2, #1
		while (!tx_available) {
    22b8:	f8b8 3000 	ldrh.w	r3, [r8]
    22bc:	4615      	mov	r5, r2
			tx_noautoflush = 1;
    22be:	7022      	strb	r2, [r4, #0]
		while (!tx_available) {
    22c0:	2b00      	cmp	r3, #0
    22c2:	d0dc      	beq.n	227e <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    22c4:	4a46      	ldr	r2, [pc, #280]	; (23e0 <usb_serial_write.part.0+0x1a0>)
    22c6:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    22ca:	7811      	ldrb	r1, [r2, #0]
    22cc:	461a      	mov	r2, r3
    22ce:	eb00 20c1 	add.w	r0, r0, r1, lsl #11
    22d2:	4d45      	ldr	r5, [pc, #276]	; (23e8 <usb_serial_write.part.0+0x1a8>)
    22d4:	02c9      	lsls	r1, r1, #11
    22d6:	4428      	add	r0, r5
		if (size >= tx_available) {
    22d8:	9d01      	ldr	r5, [sp, #4]
    22da:	4295      	cmp	r5, r2
    22dc:	d217      	bcs.n	230e <usb_serial_write.part.0+0xce>
			memcpy(txdata, data, size);
    22de:	9303      	str	r3, [sp, #12]
    22e0:	e9dd 5101 	ldrd	r5, r1, [sp, #4]
    22e4:	462a      	mov	r2, r5
    22e6:	f7fe ff79 	bl	11dc <memcpy>
			tx_available -= size;
    22ea:	9b03      	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    22ec:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
    22f0:	1b5b      	subs	r3, r3, r5
    22f2:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    22f6:	4b3d      	ldr	r3, [pc, #244]	; (23ec <usb_serial_write.part.0+0x1ac>)
    22f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
    22fc:	f3bf 8f4f 	dsb	sy
			sent += size;
    2300:	9800      	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
    2302:	2300      	movs	r3, #0
			sent += size;
    2304:	4428      	add	r0, r5
		tx_noautoflush = 0;
    2306:	7023      	strb	r3, [r4, #0]
}
    2308:	b005      	add	sp, #20
    230a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    230e:	4b36      	ldr	r3, [pc, #216]	; (23e8 <usb_serial_write.part.0+0x1a8>)
    2310:	18cd      	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
    2312:	9902      	ldr	r1, [sp, #8]
    2314:	f7fe ff62 	bl	11dc <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    2318:	2300      	movs	r3, #0
    231a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    231e:	4629      	mov	r1, r5
    2320:	4648      	mov	r0, r9
    2322:	f7ff fe43 	bl	1fac <usb_prepare_transfer>
	asm("dsb");
    2326:	f3bf 8f4f 	dsb	sy
    232a:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    232e:	f505 6300 	add.w	r3, r5, #2048	; 0x800
    2332:	4293      	cmp	r3, r2
    2334:	bf34      	ite	cc
    2336:	2301      	movcc	r3, #1
    2338:	2340      	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    233a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    233e:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    2342:	f8c2 5f70 	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
    2346:	3520      	adds	r5, #32
	} while (location < end_addr);
    2348:	42ab      	cmp	r3, r5
    234a:	d1fa      	bne.n	2342 <usb_serial_write.part.0+0x102>
	asm("dsb");
    234c:	f3bf 8f4f 	dsb	sy
	asm("isb");
    2350:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    2354:	2004      	movs	r0, #4
    2356:	4649      	mov	r1, r9
    2358:	f7ff fe40 	bl	1fdc <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    235c:	4a20      	ldr	r2, [pc, #128]	; (23e0 <usb_serial_write.part.0+0x1a0>)
    235e:	7813      	ldrb	r3, [r2, #0]
    2360:	3301      	adds	r3, #1
    2362:	b2db      	uxtb	r3, r3
    2364:	2b03      	cmp	r3, #3
    2366:	bf84      	itt	hi
    2368:	2300      	movhi	r3, #0
    236a:	4a1d      	ldrhi	r2, [pc, #116]	; (23e0 <usb_serial_write.part.0+0x1a0>)
    236c:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    236e:	f8b8 3000 	ldrh.w	r3, [r8]
    2372:	9a01      	ldr	r2, [sp, #4]
    2374:	1ad1      	subs	r1, r2, r3
			sent += tx_available;
    2376:	9a00      	ldr	r2, [sp, #0]
    2378:	441a      	add	r2, r3
			size -= tx_available;
    237a:	9101      	str	r1, [sp, #4]
			sent += tx_available;
    237c:	9200      	str	r2, [sp, #0]
			data += tx_available;
    237e:	9a02      	ldr	r2, [sp, #8]
    2380:	441a      	add	r2, r3
			tx_available = 0;
    2382:	2300      	movs	r3, #0
			data += tx_available;
    2384:	9202      	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
    2386:	4a19      	ldr	r2, [pc, #100]	; (23ec <usb_serial_write.part.0+0x1ac>)
			tx_available = 0;
    2388:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
    238c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    2390:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
    2394:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
    2396:	2900      	cmp	r1, #0
    2398:	f47f af62 	bne.w	2260 <usb_serial_write.part.0+0x20>
	return sent;
    239c:	9800      	ldr	r0, [sp, #0]
}
    239e:	b005      	add	sp, #20
    23a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
    23a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    23a8:	4b0d      	ldr	r3, [pc, #52]	; (23e0 <usb_serial_write.part.0+0x1a0>)
				transmit_previous_timeout = 0;
    23aa:	f88a 0000 	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    23ae:	7819      	ldrb	r1, [r3, #0]
				break;
    23b0:	4613      	mov	r3, r2
				tx_available = TX_SIZE;
    23b2:	f8a8 2000 	strh.w	r2, [r8]
				break;
    23b6:	e78a      	b.n	22ce <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
    23b8:	2301      	movs	r3, #1
				return sent;
    23ba:	9800      	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
    23bc:	f88a 3000 	strb.w	r3, [sl]
}
    23c0:	b005      	add	sp, #20
    23c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    23c6:	461a      	mov	r2, r3
    23c8:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    23cc:	e77f      	b.n	22ce <usb_serial_write.part.0+0x8e>
	while (size > 0) {
    23ce:	9801      	ldr	r0, [sp, #4]
	return sent;
    23d0:	e7e5      	b.n	239e <usb_serial_write.part.0+0x15e>
    23d2:	bf00      	nop
    23d4:	20002226 	.word	0x20002226
    23d8:	200021f8 	.word	0x200021f8
    23dc:	20001c00 	.word	0x20001c00
    23e0:	20002225 	.word	0x20002225
    23e4:	20002228 	.word	0x20002228
    23e8:	20201080 	.word	0x20201080
    23ec:	402e0000 	.word	0x402e0000
    23f0:	20002216 	.word	0x20002216
    23f4:	20002224 	.word	0x20002224

000023f8 <usb_serial_reset>:
}
    23f8:	4770      	bx	lr
    23fa:	bf00      	nop

000023fc <usb_serial_configure>:
	if (usb_high_speed) {
    23fc:	4b2d      	ldr	r3, [pc, #180]	; (24b4 <usb_serial_configure+0xb8>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    23fe:	2100      	movs	r1, #0
    2400:	2280      	movs	r2, #128	; 0x80
    2402:	482d      	ldr	r0, [pc, #180]	; (24b8 <usb_serial_configure+0xbc>)
{
    2404:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    2406:	781b      	ldrb	r3, [r3, #0]
	tx_head = 0;
    2408:	2400      	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    240a:	4d2c      	ldr	r5, [pc, #176]	; (24bc <usb_serial_configure+0xc0>)
	if (usb_high_speed) {
    240c:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
    240e:	4e2c      	ldr	r6, [pc, #176]	; (24c0 <usb_serial_configure+0xc4>)
	if (usb_high_speed) {
    2410:	bf0c      	ite	eq
    2412:	2340      	moveq	r3, #64	; 0x40
    2414:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    2418:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    241a:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    241c:	f001 fb2e 	bl	3a7c <memset>
	tx_head = 0;
    2420:	4a28      	ldr	r2, [pc, #160]	; (24c4 <usb_serial_configure+0xc8>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    2422:	4621      	mov	r1, r4
	tx_available = 0;
    2424:	4b28      	ldr	r3, [pc, #160]	; (24c8 <usb_serial_configure+0xcc>)
	tx_head = 0;
    2426:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    2428:	f44f 7280 	mov.w	r2, #256	; 0x100
    242c:	4827      	ldr	r0, [pc, #156]	; (24cc <usb_serial_configure+0xd0>)
	tx_available = 0;
    242e:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    2430:	f001 fb24 	bl	3a7c <memset>
	memset(rx_count, 0, sizeof(rx_count));
    2434:	4a26      	ldr	r2, [pc, #152]	; (24d0 <usb_serial_configure+0xd4>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    2436:	2110      	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
    2438:	4b26      	ldr	r3, [pc, #152]	; (24d4 <usb_serial_configure+0xd8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    243a:	2002      	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
    243c:	e9c2 4400 	strd	r4, r4, [r2]
    2440:	e9c2 4402 	strd	r4, r4, [r2, #8]
	rx_head = 0;
    2444:	4a24      	ldr	r2, [pc, #144]	; (24d8 <usb_serial_configure+0xdc>)
	memset(rx_index, 0, sizeof(rx_index));
    2446:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
    244a:	7014      	strb	r4, [r2, #0]
	rx_available = 0;
    244c:	4a23      	ldr	r2, [pc, #140]	; (24dc <usb_serial_configure+0xe0>)
	memset(rx_index, 0, sizeof(rx_index));
    244e:	e9c3 4402 	strd	r4, r4, [r3, #8]
	rx_tail = 0;
    2452:	4b23      	ldr	r3, [pc, #140]	; (24e0 <usb_serial_configure+0xe4>)
    2454:	701c      	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    2456:	4623      	mov	r3, r4
	rx_available = 0;
    2458:	6014      	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    245a:	4622      	mov	r2, r4
    245c:	f7ff fd74 	bl	1f48 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    2460:	4622      	mov	r2, r4
    2462:	8831      	ldrh	r1, [r6, #0]
    2464:	2003      	movs	r0, #3
    2466:	4b1f      	ldr	r3, [pc, #124]	; (24e4 <usb_serial_configure+0xe8>)
    2468:	f7ff fd3c 	bl	1ee4 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    246c:	4623      	mov	r3, r4
    246e:	2201      	movs	r2, #1
    2470:	8829      	ldrh	r1, [r5, #0]
    2472:	2004      	movs	r0, #4
    2474:	f7ff fd68 	bl	1f48 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    2478:	4620      	mov	r0, r4
    247a:	3401      	adds	r4, #1
    247c:	f7ff fe0e 	bl	209c <rx_queue_transfer>
    2480:	2c08      	cmp	r4, #8
    2482:	d1f9      	bne.n	2478 <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
    2484:	4b18      	ldr	r3, [pc, #96]	; (24e8 <usb_serial_configure+0xec>)
    2486:	2100      	movs	r1, #0
	USB1_GPTIMER0LD = microseconds - 1;
    2488:	224a      	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
    248a:	4818      	ldr	r0, [pc, #96]	; (24ec <usb_serial_configure+0xf0>)
    248c:	4c18      	ldr	r4, [pc, #96]	; (24f0 <usb_serial_configure+0xf4>)
    248e:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    2490:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    2494:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    2498:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    249c:	4915      	ldr	r1, [pc, #84]	; (24f4 <usb_serial_configure+0xf8>)
	USB1_USBINTR |= USB_USBINTR_TIE0;
    249e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    24a2:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    24a6:	b121      	cbz	r1, 24b2 <usb_serial_configure+0xb6>
    24a8:	4a13      	ldr	r2, [pc, #76]	; (24f8 <usb_serial_configure+0xfc>)
    24aa:	7813      	ldrb	r3, [r2, #0]
    24ac:	f043 0301 	orr.w	r3, r3, #1
    24b0:	7013      	strb	r3, [r2, #0]
}
    24b2:	bd70      	pop	{r4, r5, r6, pc}
    24b4:	20002229 	.word	0x20002229
    24b8:	20001c00 	.word	0x20001c00
    24bc:	20002218 	.word	0x20002218
    24c0:	20002214 	.word	0x20002214
    24c4:	20002225 	.word	0x20002225
    24c8:	20002216 	.word	0x20002216
    24cc:	20001b00 	.word	0x20001b00
    24d0:	200021b4 	.word	0x200021b4
    24d4:	200021c4 	.word	0x200021c4
    24d8:	20002221 	.word	0x20002221
    24dc:	200021b0 	.word	0x200021b0
    24e0:	20002222 	.word	0x20002222
    24e4:	000020fd 	.word	0x000020fd
    24e8:	402e0000 	.word	0x402e0000
    24ec:	2000220c 	.word	0x2000220c
    24f0:	000021b1 	.word	0x000021b1
    24f4:	00000000 	.word	0x00000000
    24f8:	2000222b 	.word	0x2000222b

000024fc <usb_serial_read>:
{
    24fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    2500:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    2504:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	uint32_t tail = rx_tail;
    2508:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 25d4 <usb_serial_read+0xd8>
{
    250c:	b083      	sub	sp, #12
	NVIC_DISABLE_IRQ(IRQ_USB1);
    250e:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	while (count < size && tail != rx_head) {
    2512:	468b      	mov	fp, r1
	uint32_t tail = rx_tail;
    2514:	f89a 4000 	ldrb.w	r4, [sl]
	while (count < size && tail != rx_head) {
    2518:	2900      	cmp	r1, #0
    251a:	d04f      	beq.n	25bc <usb_serial_read+0xc0>
    251c:	4680      	mov	r8, r0
    251e:	b2e4      	uxtb	r4, r4
	uint32_t count=0;
    2520:	2700      	movs	r7, #0
		uint32_t avail = rx_count[i] - rx_index[i];
    2522:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 25d8 <usb_serial_read+0xdc>
	while (count < size && tail != rx_head) {
    2526:	4b26      	ldr	r3, [pc, #152]	; (25c0 <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    2528:	ebab 0207 	sub.w	r2, fp, r7
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    252c:	4925      	ldr	r1, [pc, #148]	; (25c4 <usb_serial_read+0xc8>)
	while (count < size && tail != rx_head) {
    252e:	781b      	ldrb	r3, [r3, #0]
    2530:	42a3      	cmp	r3, r4
		if (++tail > RX_NUM) tail = 0;
    2532:	f104 0401 	add.w	r4, r4, #1
	while (count < size && tail != rx_head) {
    2536:	d03f      	beq.n	25b8 <usb_serial_read+0xbc>
		if (++tail > RX_NUM) tail = 0;
    2538:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
    253a:	4b23      	ldr	r3, [pc, #140]	; (25c8 <usb_serial_read+0xcc>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    253c:	4640      	mov	r0, r8
		if (++tail > RX_NUM) tail = 0;
    253e:	bf28      	it	cs
    2540:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    2542:	5d1e      	ldrb	r6, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    2544:	f839 c016 	ldrh.w	ip, [r9, r6, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    2548:	eb0c 2346 	add.w	r3, ip, r6, lsl #9
    254c:	4419      	add	r1, r3
		uint32_t avail = rx_count[i] - rx_index[i];
    254e:	4b1f      	ldr	r3, [pc, #124]	; (25cc <usb_serial_read+0xd0>)
    2550:	f833 5016 	ldrh.w	r5, [r3, r6, lsl #1]
    2554:	eba5 050c 	sub.w	r5, r5, ip
		if (avail > len) {
    2558:	42aa      	cmp	r2, r5
    255a:	d21c      	bcs.n	2596 <usb_serial_read+0x9a>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    255c:	eb0c 2c46 	add.w	ip, ip, r6, lsl #9
    2560:	4918      	ldr	r1, [pc, #96]	; (25c4 <usb_serial_read+0xc8>)
			rx_available -= len;
    2562:	4c1b      	ldr	r4, [pc, #108]	; (25d0 <usb_serial_read+0xd4>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    2564:	4461      	add	r1, ip
    2566:	9201      	str	r2, [sp, #4]
    2568:	f7fe fe38 	bl	11dc <memcpy>
			rx_available -= len;
    256c:	6821      	ldr	r1, [r4, #0]
			rx_index[i] += len;
    256e:	f839 5016 	ldrh.w	r5, [r9, r6, lsl #1]
	return count;
    2572:	4658      	mov	r0, fp
			rx_index[i] += len;
    2574:	9a01      	ldr	r2, [sp, #4]
			rx_available -= len;
    2576:	eba1 010b 	sub.w	r1, r1, fp
			rx_index[i] += len;
    257a:	442a      	add	r2, r5
			rx_available -= len;
    257c:	4439      	add	r1, r7
			rx_index[i] += len;
    257e:	f829 2016 	strh.w	r2, [r9, r6, lsl #1]
			rx_available -= len;
    2582:	6021      	str	r1, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
    2584:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    2588:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    258c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
    2590:	b003      	add	sp, #12
    2592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    2596:	462a      	mov	r2, r5
			count += avail;
    2598:	442f      	add	r7, r5
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    259a:	f7fe fe1f 	bl	11dc <memcpy>
			rx_available -= avail;
    259e:	490c      	ldr	r1, [pc, #48]	; (25d0 <usb_serial_read+0xd4>)
			rx_tail = tail;
    25a0:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    25a2:	4630      	mov	r0, r6
			rx_available -= avail;
    25a4:	680a      	ldr	r2, [r1, #0]
			p += avail;
    25a6:	44a8      	add	r8, r5
			rx_available -= avail;
    25a8:	1b52      	subs	r2, r2, r5
    25aa:	600a      	str	r2, [r1, #0]
			rx_tail = tail;
    25ac:	f88a 3000 	strb.w	r3, [sl]
			rx_queue_transfer(i);
    25b0:	f7ff fd74 	bl	209c <rx_queue_transfer>
	while (count < size && tail != rx_head) {
    25b4:	45bb      	cmp	fp, r7
    25b6:	d8b6      	bhi.n	2526 <usb_serial_read+0x2a>
	return count;
    25b8:	4638      	mov	r0, r7
    25ba:	e7e3      	b.n	2584 <usb_serial_read+0x88>
	while (count < size && tail != rx_head) {
    25bc:	4608      	mov	r0, r1
    25be:	e7e1      	b.n	2584 <usb_serial_read+0x88>
    25c0:	20002221 	.word	0x20002221
    25c4:	20200080 	.word	0x20200080
    25c8:	200021d4 	.word	0x200021d4
    25cc:	200021b4 	.word	0x200021b4
    25d0:	200021b0 	.word	0x200021b0
    25d4:	20002222 	.word	0x20002222
    25d8:	200021c4 	.word	0x200021c4

000025dc <usb_serial_peekchar>:
	if (tail == rx_head) return -1;
    25dc:	4b0b      	ldr	r3, [pc, #44]	; (260c <usb_serial_peekchar+0x30>)
	uint32_t tail = rx_tail;
    25de:	4a0c      	ldr	r2, [pc, #48]	; (2610 <usb_serial_peekchar+0x34>)
    25e0:	7812      	ldrb	r2, [r2, #0]
	if (tail == rx_head) return -1;
    25e2:	7819      	ldrb	r1, [r3, #0]
	uint32_t tail = rx_tail;
    25e4:	b2d3      	uxtb	r3, r2
	if (tail == rx_head) return -1;
    25e6:	428a      	cmp	r2, r1
    25e8:	d00d      	beq.n	2606 <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    25ea:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    25ec:	4809      	ldr	r0, [pc, #36]	; (2614 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    25ee:	4a0a      	ldr	r2, [pc, #40]	; (2618 <usb_serial_peekchar+0x3c>)
	if (++tail > RX_NUM) tail = 0;
    25f0:	2b09      	cmp	r3, #9
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    25f2:	490a      	ldr	r1, [pc, #40]	; (261c <usb_serial_peekchar+0x40>)
	if (++tail > RX_NUM) tail = 0;
    25f4:	bf28      	it	cs
    25f6:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    25f8:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    25fa:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    25fe:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    2602:	5c58      	ldrb	r0, [r3, r1]
    2604:	4770      	bx	lr
	if (tail == rx_head) return -1;
    2606:	f04f 30ff 	mov.w	r0, #4294967295
}
    260a:	4770      	bx	lr
    260c:	20002221 	.word	0x20002221
    2610:	20002222 	.word	0x20002222
    2614:	200021d4 	.word	0x200021d4
    2618:	20200080 	.word	0x20200080
    261c:	200021c4 	.word	0x200021c4

00002620 <usb_serial_available>:
	uint32_t n = rx_available;
    2620:	4b04      	ldr	r3, [pc, #16]	; (2634 <usb_serial_available+0x14>)
{
    2622:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
    2624:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
    2626:	b10c      	cbz	r4, 262c <usb_serial_available+0xc>
}
    2628:	4620      	mov	r0, r4
    262a:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
    262c:	f000 f8e0 	bl	27f0 <yield>
}
    2630:	4620      	mov	r0, r4
    2632:	bd10      	pop	{r4, pc}
    2634:	200021b0 	.word	0x200021b0

00002638 <usb_serial_flush_input>:
{
    2638:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    263c:	4e14      	ldr	r6, [pc, #80]	; (2690 <usb_serial_flush_input+0x58>)
	while (tail != rx_head) {
    263e:	4d15      	ldr	r5, [pc, #84]	; (2694 <usb_serial_flush_input+0x5c>)
	uint32_t tail = rx_tail;
    2640:	7833      	ldrb	r3, [r6, #0]
	while (tail != rx_head) {
    2642:	782a      	ldrb	r2, [r5, #0]
    2644:	4293      	cmp	r3, r2
    2646:	d021      	beq.n	268c <usb_serial_flush_input+0x54>
    2648:	b2dc      	uxtb	r4, r3
    264a:	f8df 9050 	ldr.w	r9, [pc, #80]	; 269c <usb_serial_flush_input+0x64>
    264e:	f8df b050 	ldr.w	fp, [pc, #80]	; 26a0 <usb_serial_flush_input+0x68>
    2652:	f8df 8050 	ldr.w	r8, [pc, #80]	; 26a4 <usb_serial_flush_input+0x6c>
    2656:	4f10      	ldr	r7, [pc, #64]	; (2698 <usb_serial_flush_input+0x60>)
		if (++tail > RX_NUM) tail = 0;
    2658:	3401      	adds	r4, #1
    265a:	2c08      	cmp	r4, #8
		rx_tail = tail;
    265c:	fa5f fa84 	uxtb.w	sl, r4
		if (++tail > RX_NUM) tail = 0;
    2660:	d901      	bls.n	2666 <usb_serial_flush_input+0x2e>
    2662:	2400      	movs	r4, #0
    2664:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    2666:	f819 0004 	ldrb.w	r0, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    266a:	f8db 3000 	ldr.w	r3, [fp]
    266e:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
    2672:	f837 1010 	ldrh.w	r1, [r7, r0, lsl #1]
    2676:	1a52      	subs	r2, r2, r1
    2678:	1a9b      	subs	r3, r3, r2
    267a:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    267e:	f7ff fd0d 	bl	209c <rx_queue_transfer>
		rx_tail = tail;
    2682:	f886 a000 	strb.w	sl, [r6]
	while (tail != rx_head) {
    2686:	782b      	ldrb	r3, [r5, #0]
    2688:	42a3      	cmp	r3, r4
    268a:	d1e5      	bne.n	2658 <usb_serial_flush_input+0x20>
}
    268c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2690:	20002222 	.word	0x20002222
    2694:	20002221 	.word	0x20002221
    2698:	200021c4 	.word	0x200021c4
    269c:	200021d4 	.word	0x200021d4
    26a0:	200021b0 	.word	0x200021b0
    26a4:	200021b4 	.word	0x200021b4

000026a8 <usb_serial_getchar>:
{
    26a8:	b500      	push	{lr}
    26aa:	b083      	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
    26ac:	2101      	movs	r1, #1
    26ae:	f10d 0007 	add.w	r0, sp, #7
    26b2:	f7ff ff23 	bl	24fc <usb_serial_read>
    26b6:	b120      	cbz	r0, 26c2 <usb_serial_getchar+0x1a>
    26b8:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
    26bc:	b003      	add	sp, #12
    26be:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
    26c2:	f04f 30ff 	mov.w	r0, #4294967295
    26c6:	e7f9      	b.n	26bc <usb_serial_getchar+0x14>

000026c8 <usb_serial_putchar>:
	if (!usb_configuration) return 0;
    26c8:	4b09      	ldr	r3, [pc, #36]	; (26f0 <usb_serial_putchar+0x28>)
{
    26ca:	b500      	push	{lr}
    26cc:	b083      	sub	sp, #12
	if (!usb_configuration) return 0;
    26ce:	781b      	ldrb	r3, [r3, #0]
{
    26d0:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!usb_configuration) return 0;
    26d4:	b13b      	cbz	r3, 26e6 <usb_serial_putchar+0x1e>
    26d6:	2101      	movs	r1, #1
    26d8:	f10d 0007 	add.w	r0, sp, #7
    26dc:	f7ff fdb0 	bl	2240 <usb_serial_write.part.0>
}
    26e0:	b003      	add	sp, #12
    26e2:	f85d fb04 	ldr.w	pc, [sp], #4
    26e6:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    26ea:	b003      	add	sp, #12
    26ec:	f85d fb04 	ldr.w	pc, [sp], #4
    26f0:	20002228 	.word	0x20002228

000026f4 <usb_serial_write>:
	if (!usb_configuration) return 0;
    26f4:	4b04      	ldr	r3, [pc, #16]	; (2708 <usb_serial_write+0x14>)
    26f6:	781b      	ldrb	r3, [r3, #0]
    26f8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    26fc:	b10b      	cbz	r3, 2702 <usb_serial_write+0xe>
    26fe:	f7ff bd9f 	b.w	2240 <usb_serial_write.part.0>
}
    2702:	4610      	mov	r0, r2
    2704:	4770      	bx	lr
    2706:	bf00      	nop
    2708:	20002228 	.word	0x20002228

0000270c <usb_serial_write_buffer_free>:
{
    270c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    2710:	2400      	movs	r4, #0
	tx_noautoflush = 1;
    2712:	f8df 8044 	ldr.w	r8, [pc, #68]	; 2758 <usb_serial_write_buffer_free+0x4c>
    2716:	2301      	movs	r3, #1
    2718:	4d0d      	ldr	r5, [pc, #52]	; (2750 <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    271a:	4627      	mov	r7, r4
    271c:	4e0d      	ldr	r6, [pc, #52]	; (2754 <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
    271e:	f888 3000 	strb.w	r3, [r8]
		if (i == tx_head) continue;
    2722:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    2724:	4628      	mov	r0, r5
	for (uint32_t i=0; i < TX_NUM; i++) {
    2726:	3520      	adds	r5, #32
		if (i == tx_head) continue;
    2728:	42a3      	cmp	r3, r4
	for (uint32_t i=0; i < TX_NUM; i++) {
    272a:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    272e:	d005      	beq.n	273c <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    2730:	f7ff fc76 	bl	2020 <usb_transfer_status>
    2734:	0603      	lsls	r3, r0, #24
    2736:	bf58      	it	pl
    2738:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    273c:	2c04      	cmp	r4, #4
    273e:	d1f0      	bne.n	2722 <usb_serial_write_buffer_free+0x16>
	asm("dsb" ::: "memory");
    2740:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    2744:	2300      	movs	r3, #0
}
    2746:	4638      	mov	r0, r7
	tx_noautoflush = 0;
    2748:	f888 3000 	strb.w	r3, [r8]
}
    274c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2750:	20001c00 	.word	0x20001c00
    2754:	20002225 	.word	0x20002225
    2758:	20002226 	.word	0x20002226

0000275c <usb_serial_flush_output>:
{
    275c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    2760:	4b1d      	ldr	r3, [pc, #116]	; (27d8 <usb_serial_flush_output+0x7c>)
    2762:	781b      	ldrb	r3, [r3, #0]
    2764:	b113      	cbz	r3, 276c <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    2766:	4d1d      	ldr	r5, [pc, #116]	; (27dc <usb_serial_flush_output+0x80>)
    2768:	882a      	ldrh	r2, [r5, #0]
    276a:	b90a      	cbnz	r2, 2770 <usb_serial_flush_output+0x14>
}
    276c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	transfer_t *xfer = tx_transfer + tx_head;
    2770:	4e1b      	ldr	r6, [pc, #108]	; (27e0 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    2772:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    2776:	491b      	ldr	r1, [pc, #108]	; (27e4 <usb_serial_flush_output+0x88>)
    2778:	7833      	ldrb	r3, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    277a:	464a      	mov	r2, r9
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    277c:	4c1a      	ldr	r4, [pc, #104]	; (27e8 <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    277e:	eb01 1843 	add.w	r8, r1, r3, lsl #5
	tx_noautoflush = 1;
    2782:	4f1a      	ldr	r7, [pc, #104]	; (27ec <usb_serial_flush_output+0x90>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    2784:	eb04 24c3 	add.w	r4, r4, r3, lsl #11
	tx_noautoflush = 1;
    2788:	2301      	movs	r3, #1
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    278a:	4640      	mov	r0, r8
	tx_noautoflush = 1;
    278c:	703b      	strb	r3, [r7, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    278e:	4621      	mov	r1, r4
    2790:	2300      	movs	r3, #0
    2792:	f7ff fc0b 	bl	1fac <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    2796:	eb04 0209 	add.w	r2, r4, r9
	asm("dsb");
    279a:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    279e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    27a2:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    27a6:	3420      	adds	r4, #32
	} while (location < end_addr);
    27a8:	42a2      	cmp	r2, r4
    27aa:	d8fa      	bhi.n	27a2 <usb_serial_flush_output+0x46>
	asm("dsb");
    27ac:	f3bf 8f4f 	dsb	sy
	asm("isb");
    27b0:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    27b4:	2004      	movs	r0, #4
    27b6:	4641      	mov	r1, r8
    27b8:	f7ff fc10 	bl	1fdc <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    27bc:	7833      	ldrb	r3, [r6, #0]
    27be:	3301      	adds	r3, #1
    27c0:	b2db      	uxtb	r3, r3
    27c2:	2b03      	cmp	r3, #3
    27c4:	bf88      	it	hi
    27c6:	2300      	movhi	r3, #0
    27c8:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    27ca:	2300      	movs	r3, #0
    27cc:	802b      	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
    27ce:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    27d2:	703b      	strb	r3, [r7, #0]
}
    27d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    27d8:	20002228 	.word	0x20002228
    27dc:	20002216 	.word	0x20002216
    27e0:	20002225 	.word	0x20002225
    27e4:	20001c00 	.word	0x20001c00
    27e8:	20201080 	.word	0x20201080
    27ec:	20002226 	.word	0x20002226

000027f0 <yield>:
uint8_t yield_active_check_flags = 0;


void yield(void) __attribute__ ((weak));
void yield(void)
{
    27f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t check_flags = yield_active_check_flags;
    27f4:	4b2d      	ldr	r3, [pc, #180]	; (28ac <yield+0xbc>)
    27f6:	781e      	ldrb	r6, [r3, #0]
	if (!check_flags) return;	// nothing to do
    27f8:	b166      	cbz	r6, 2814 <yield+0x24>

	// TODO: do nothing if called from interrupt

	static uint8_t running=0;
	if (running) return; // TODO: does this need to be atomic?
    27fa:	4f2d      	ldr	r7, [pc, #180]	; (28b0 <yield+0xc0>)
    27fc:	783b      	ldrb	r3, [r7, #0]
    27fe:	b94b      	cbnz	r3, 2814 <yield+0x24>
	running = 1;
    2800:	2301      	movs	r3, #1

	// USB Serial - Add hack to minimize impact...
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    2802:	07f1      	lsls	r1, r6, #31
	running = 1;
    2804:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    2806:	d443      	bmi.n	2890 <yield+0xa0>
		if (SerialUSB2.available()) serialEventUSB2();
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    2808:	07b2      	lsls	r2, r6, #30
    280a:	d426      	bmi.n	285a <yield+0x6a>
		HardwareSerialIMXRT::processSerialEventsList();
	}

	running = 0;
    280c:	2300      	movs	r3, #0
    280e:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_EVENT_RESPONDER) {
    2810:	0773      	lsls	r3, r6, #29
    2812:	d401      	bmi.n	2818 <yield+0x28>
		EventResponder::runFromYield();
	}
};
    2814:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    2818:	4b26      	ldr	r3, [pc, #152]	; (28b4 <yield+0xc4>)
    281a:	681a      	ldr	r2, [r3, #0]
    281c:	2a00      	cmp	r2, #0
    281e:	d0f9      	beq.n	2814 <yield+0x24>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    2820:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    2824:	2a00      	cmp	r2, #0
    2826:	d1f5      	bne.n	2814 <yield+0x24>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    2828:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    282c:	b672      	cpsid	i
		EventResponder *first = firstYield;
    282e:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    2830:	2800      	cmp	r0, #0
    2832:	d034      	beq.n	289e <yield+0xae>
		if (runningFromYield) {
    2834:	4c20      	ldr	r4, [pc, #128]	; (28b8 <yield+0xc8>)
    2836:	7821      	ldrb	r1, [r4, #0]
    2838:	2900      	cmp	r1, #0
    283a:	d130      	bne.n	289e <yield+0xae>
		runningFromYield = true;
    283c:	2201      	movs	r2, #1
    283e:	7022      	strb	r2, [r4, #0]
		firstYield = first->_next;
    2840:	6942      	ldr	r2, [r0, #20]
    2842:	601a      	str	r2, [r3, #0]
		if (firstYield) {
    2844:	2a00      	cmp	r2, #0
    2846:	d02e      	beq.n	28a6 <yield+0xb6>
			firstYield->_prev = nullptr;
    2848:	6191      	str	r1, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    284a:	b905      	cbnz	r5, 284e <yield+0x5e>
    284c:	b662      	cpsie	i
		first->_triggered = false;
    284e:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    2850:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    2852:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    2854:	4798      	blx	r3
		runningFromYield = false;
    2856:	7025      	strb	r5, [r4, #0]
    2858:	e7dc      	b.n	2814 <yield+0x24>

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    285a:	f8df 8064 	ldr.w	r8, [pc, #100]	; 28c0 <yield+0xd0>
    285e:	f898 3000 	ldrb.w	r3, [r8]
    2862:	2b00      	cmp	r3, #0
    2864:	d0d2      	beq.n	280c <yield+0x1c>
    2866:	2500      	movs	r5, #0
    2868:	f8df 9058 	ldr.w	r9, [pc, #88]	; 28c4 <yield+0xd4>
    286c:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    286e:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    2872:	3501      	adds	r5, #1
	static HardwareSerialIMXRT 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    2874:	6823      	ldr	r3, [r4, #0]
    2876:	4620      	mov	r0, r4
    2878:	691b      	ldr	r3, [r3, #16]
    287a:	4798      	blx	r3
    287c:	b110      	cbz	r0, 2884 <yield+0x94>
    287e:	6963      	ldr	r3, [r4, #20]
    2880:	689b      	ldr	r3, [r3, #8]
    2882:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    2884:	f898 2000 	ldrb.w	r2, [r8]
    2888:	b2eb      	uxtb	r3, r5
    288a:	429a      	cmp	r2, r3
    288c:	d8ef      	bhi.n	286e <yield+0x7e>
    288e:	e7bd      	b.n	280c <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    2890:	f7ff fec6 	bl	2620 <usb_serial_available>
		if (Serial.available()) serialEvent();
    2894:	2800      	cmp	r0, #0
    2896:	d0b7      	beq.n	2808 <yield+0x18>
    2898:	f3af 8000 	nop.w
    289c:	e7b4      	b.n	2808 <yield+0x18>
		if (doit) __enable_irq();
    289e:	2d00      	cmp	r5, #0
    28a0:	d1b8      	bne.n	2814 <yield+0x24>
    28a2:	b662      	cpsie	i
    28a4:	e7b6      	b.n	2814 <yield+0x24>
			lastYield = nullptr;
    28a6:	4b05      	ldr	r3, [pc, #20]	; (28bc <yield+0xcc>)
    28a8:	601a      	str	r2, [r3, #0]
    28aa:	e7ce      	b.n	284a <yield+0x5a>
    28ac:	2000222b 	.word	0x2000222b
    28b0:	2000221e 	.word	0x2000221e
    28b4:	20001d00 	.word	0x20001d00
    28b8:	2000221c 	.word	0x2000221c
    28bc:	20001d0c 	.word	0x20001d0c
    28c0:	2000221d 	.word	0x2000221d
    28c4:	20001d10 	.word	0x20001d10

000028c8 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    28c8:	b570      	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    28ca:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    28ce:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    28d0:	4c0c      	ldr	r4, [pc, #48]	; (2904 <EventResponder::runFromInterrupt()+0x3c>)
    28d2:	6820      	ldr	r0, [r4, #0]
		if (first) {
    28d4:	b180      	cbz	r0, 28f8 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    28d6:	4e0c      	ldr	r6, [pc, #48]	; (2908 <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    28d8:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    28da:	6943      	ldr	r3, [r0, #20]
    28dc:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    28de:	b173      	cbz	r3, 28fe <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    28e0:	619d      	str	r5, [r3, #24]
		if (doit) __enable_irq();
    28e2:	b902      	cbnz	r2, 28e6 <EventResponder::runFromInterrupt()+0x1e>
    28e4:	b662      	cpsie	i
			}
			enableInterrupts(irq);
			first->_triggered = false;
			(*(first->_function))(*first);
    28e6:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    28e8:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    28ea:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    28ec:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    28f0:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    28f2:	6820      	ldr	r0, [r4, #0]
		if (first) {
    28f4:	2800      	cmp	r0, #0
    28f6:	d1f0      	bne.n	28da <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    28f8:	b902      	cbnz	r2, 28fc <EventResponder::runFromInterrupt()+0x34>
    28fa:	b662      	cpsie	i
		} else {
			enableInterrupts(irq);
			break;
		}
	}
}
    28fc:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    28fe:	6033      	str	r3, [r6, #0]
    2900:	e7ef      	b.n	28e2 <EventResponder::runFromInterrupt()+0x1a>
    2902:	bf00      	nop
    2904:	20001d08 	.word	0x20001d08
    2908:	20001d04 	.word	0x20001d04

0000290c <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    290c:	f7ff bfdc 	b.w	28c8 <EventResponder::runFromInterrupt()>

00002910 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    2910:	4904      	ldr	r1, [pc, #16]	; (2924 <systick_isr+0x14>)
	systick_millis_count++;
    2912:	4a05      	ldr	r2, [pc, #20]	; (2928 <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
    2914:	6849      	ldr	r1, [r1, #4]
    2916:	4b05      	ldr	r3, [pc, #20]	; (292c <systick_isr+0x1c>)
    2918:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    291a:	6813      	ldr	r3, [r2, #0]
    291c:	3301      	adds	r3, #1
    291e:	6013      	str	r3, [r2, #0]
}
    2920:	4770      	bx	lr
    2922:	bf00      	nop
    2924:	e0001000 	.word	0xe0001000
    2928:	200021f8 	.word	0x200021f8
    292c:	200021f4 	.word	0x200021f4

00002930 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    2930:	49a2      	ldr	r1, [pc, #648]	; (2bbc <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    2932:	4ba3      	ldr	r3, [pc, #652]	; (2bc0 <set_arm_clock+0x290>)
	if (frequency > 528000000) {
    2934:	4288      	cmp	r0, r1
{
    2936:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
    293a:	4ca2      	ldr	r4, [pc, #648]	; (2bc4 <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    293c:	695e      	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    293e:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    2940:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
    2944:	d91b      	bls.n	297e <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    2946:	4ba0      	ldr	r3, [pc, #640]	; (2bc8 <set_arm_clock+0x298>)
    2948:	4298      	cmp	r0, r3
    294a:	f240 8102 	bls.w	2b52 <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    294e:	1ac3      	subs	r3, r0, r3
    2950:	499e      	ldr	r1, [pc, #632]	; (2bcc <set_arm_clock+0x29c>)
    2952:	0a1b      	lsrs	r3, r3, #8
    2954:	fba1 1303 	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    2958:	f240 6127 	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    295c:	09db      	lsrs	r3, r3, #7
    295e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2962:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2966:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    296a:	428b      	cmp	r3, r1
    296c:	bf28      	it	cs
    296e:	460b      	movcs	r3, r1
    2970:	f5a3 7748 	sub.w	r7, r3, #800	; 0x320
    2974:	4b96      	ldr	r3, [pc, #600]	; (2bd0 <set_arm_clock+0x2a0>)
    2976:	fba3 3707 	umull	r3, r7, r3, r7
    297a:	08ff      	lsrs	r7, r7, #3
    297c:	e004      	b.n	2988 <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
    297e:	4f95      	ldr	r7, [pc, #596]	; (2bd4 <set_arm_clock+0x2a4>)
    2980:	42b8      	cmp	r0, r7
    2982:	bf8c      	ite	hi
    2984:	270e      	movhi	r7, #14
    2986:	2706      	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    2988:	498d      	ldr	r1, [pc, #564]	; (2bc0 <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    298a:	f008 091f 	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    298e:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    2992:	45b9      	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    2994:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    2998:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    299c:	d20c      	bcs.n	29b8 <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    299e:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    29a2:	f5a1 21f8 	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    29a6:	ea48 0807 	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
    29aa:	f8c1 800c 	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    29ae:	680b      	ldr	r3, [r1, #0]
    29b0:	2b00      	cmp	r3, #0
    29b2:	dafc      	bge.n	29ae <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    29b4:	f008 091f 	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    29b8:	f016 7300 	ands.w	r3, r6, #33554432	; 0x2000000
    29bc:	d124      	bne.n	2a08 <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    29be:	4986      	ldr	r1, [pc, #536]	; (2bd8 <set_arm_clock+0x2a8>)
    29c0:	690c      	ldr	r4, [r1, #16]
    29c2:	4986      	ldr	r1, [pc, #536]	; (2bdc <set_arm_clock+0x2ac>)
    29c4:	43a1      	bics	r1, r4
    29c6:	f000 80ea 	beq.w	2b9e <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    29ca:	f482 5180 	eor.w	r1, r2, #4096	; 0x1000
    29ce:	4634      	mov	r4, r6
    29d0:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    29d4:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    29d8:	d004      	beq.n	29e4 <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    29da:	f026 5660 	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    29de:	431e      	orrs	r6, r3
			CCM_CBCDR = cbcdr;
    29e0:	4b77      	ldr	r3, [pc, #476]	; (2bc0 <set_arm_clock+0x290>)
    29e2:	615e      	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    29e4:	f411 5f40 	tst.w	r1, #12288	; 0x3000
    29e8:	d007      	beq.n	29fa <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    29ea:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
    29ee:	4974      	ldr	r1, [pc, #464]	; (2bc0 <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    29f0:	432a      	orrs	r2, r5
			CCM_CBCMR = cbcmr;
    29f2:	618a      	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    29f4:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    29f6:	071a      	lsls	r2, r3, #28
    29f8:	d4fc      	bmi.n	29f4 <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    29fa:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    29fe:	4a70      	ldr	r2, [pc, #448]	; (2bc0 <set_arm_clock+0x290>)
    2a00:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    2a02:	6c93      	ldr	r3, [r2, #72]	; 0x48
    2a04:	069b      	lsls	r3, r3, #26
    2a06:	d4fc      	bmi.n	2a02 <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
    2a08:	4c75      	ldr	r4, [pc, #468]	; (2be0 <set_arm_clock+0x2b0>)
    2a0a:	42a0      	cmp	r0, r4
    2a0c:	f200 80ce 	bhi.w	2bac <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
    2a10:	f04f 0c01 	mov.w	ip, #1
    2a14:	4601      	mov	r1, r0
	uint32_t div_arm = 1;
    2a16:	4663      	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
    2a18:	fb03 1201 	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
    2a1c:	f103 0e01 	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
    2a20:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    2a24:	42a2      	cmp	r2, r4
    2a26:	d818      	bhi.n	2a5a <set_arm_clock+0x12a>
		if (div_arm < 8) {
    2a28:	f1be 0f08 	cmp.w	lr, #8
				div_arm = 1;
    2a2c:	f04f 0301 	mov.w	r3, #1
		if (div_arm < 8) {
    2a30:	f040 808d 	bne.w	2b4e <set_arm_clock+0x21e>
			if (div_ahb < 5) {
    2a34:	f1bc 0f04 	cmp.w	ip, #4
    2a38:	f200 8091 	bhi.w	2b5e <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
    2a3c:	180a      	adds	r2, r1, r0
    2a3e:	42a2      	cmp	r2, r4
    2a40:	f200 80a4 	bhi.w	2b8c <set_arm_clock+0x25c>
    2a44:	fb05 f100 	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
    2a48:	46ac      	mov	ip, r5
			div_arm = div_arm + 1;
    2a4a:	f103 0e01 	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    2a4e:	fb03 1201 	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
    2a52:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    2a56:	42a2      	cmp	r2, r4
    2a58:	d9e6      	bls.n	2a28 <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    2a5a:	f10c 31ff 	add.w	r1, ip, #4294967295
    2a5e:	028c      	lsls	r4, r1, #10
    2a60:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    2a64:	485f      	ldr	r0, [pc, #380]	; (2be4 <set_arm_clock+0x2b4>)
    2a66:	4410      	add	r0, r2
	if (mult > 108) mult = 108;
    2a68:	4a5f      	ldr	r2, [pc, #380]	; (2be8 <set_arm_clock+0x2b8>)
    2a6a:	4290      	cmp	r0, r2
    2a6c:	d97f      	bls.n	2b6e <set_arm_clock+0x23e>
    2a6e:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 2c14 <set_arm_clock+0x2e4>
    2a72:	226c      	movs	r2, #108	; 0x6c
    2a74:	485d      	ldr	r0, [pc, #372]	; (2bec <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    2a76:	4d58      	ldr	r5, [pc, #352]	; (2bd8 <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    2a78:	fbb0 f0fe 	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    2a7c:	f8d5 e000 	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
    2a80:	fbb0 f0fc 	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    2a84:	f8df c190 	ldr.w	ip, [pc, #400]	; 2c18 <set_arm_clock+0x2e8>
    2a88:	ea0e 0c0c 	and.w	ip, lr, ip
    2a8c:	45d4      	cmp	ip, sl
    2a8e:	d009      	beq.n	2aa4 <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    2a90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    2a94:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    2a98:	f8c5 c000 	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    2a9c:	602a      	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    2a9e:	682a      	ldr	r2, [r5, #0]
    2aa0:	2a00      	cmp	r2, #0
    2aa2:	dafc      	bge.n	2a9e <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    2aa4:	4a46      	ldr	r2, [pc, #280]	; (2bc0 <set_arm_clock+0x290>)
    2aa6:	6915      	ldr	r5, [r2, #16]
    2aa8:	f005 0507 	and.w	r5, r5, #7
    2aac:	429d      	cmp	r5, r3
    2aae:	d003      	beq.n	2ab8 <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    2ab0:	6113      	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    2ab2:	6c93      	ldr	r3, [r2, #72]	; 0x48
    2ab4:	03dd      	lsls	r5, r3, #15
    2ab6:	d4fc      	bmi.n	2ab2 <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    2ab8:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
    2abc:	d009      	beq.n	2ad2 <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    2abe:	f426 56e0 	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    2ac2:	f404 54e0 	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
    2ac6:	4a3e      	ldr	r2, [pc, #248]	; (2bc0 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    2ac8:	4326      	orrs	r6, r4
		CCM_CBCDR = cbcdr;
    2aca:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    2acc:	6c93      	ldr	r3, [r2, #72]	; 0x48
    2ace:	0799      	lsls	r1, r3, #30
    2ad0:	d4fc      	bmi.n	2acc <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    2ad2:	4947      	ldr	r1, [pc, #284]	; (2bf0 <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
    2ad4:	4a47      	ldr	r2, [pc, #284]	; (2bf4 <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    2ad6:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    2ad8:	4291      	cmp	r1, r2
    2ada:	d83c      	bhi.n	2b56 <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    2adc:	4b46      	ldr	r3, [pc, #280]	; (2bf8 <set_arm_clock+0x2c8>)
    2ade:	09c9      	lsrs	r1, r1, #7
    2ae0:	fba3 3101 	umull	r3, r1, r3, r1
    2ae4:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    2ae6:	1e4b      	subs	r3, r1, #1
    2ae8:	021b      	lsls	r3, r3, #8
    2aea:	ea86 0203 	eor.w	r2, r6, r3
    2aee:	f412 7f40 	tst.w	r2, #768	; 0x300
    2af2:	d006      	beq.n	2b02 <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    2af4:	f426 7640 	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    2af8:	f403 7340 	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
    2afc:	4a30      	ldr	r2, [pc, #192]	; (2bc0 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    2afe:	4333      	orrs	r3, r6
		CCM_CBCDR = cbcdr;
    2b00:	6153      	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    2b02:	4a2f      	ldr	r2, [pc, #188]	; (2bc0 <set_arm_clock+0x290>)
    2b04:	6953      	ldr	r3, [r2, #20]
    2b06:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
    2b0a:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    2b0c:	6c93      	ldr	r3, [r2, #72]	; 0x48
    2b0e:	069b      	lsls	r3, r3, #26
    2b10:	d4fc      	bmi.n	2b0c <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2b12:	4b3a      	ldr	r3, [pc, #232]	; (2bfc <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    2b14:	454f      	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2b16:	fba3 2300 	umull	r2, r3, r3, r0
    2b1a:	f04f 32ff 	mov.w	r2, #4294967295
    2b1e:	ea4f 4393 	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
    2b22:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2b26:	fbb2 f3f3 	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
    2b2a:	4a35      	ldr	r2, [pc, #212]	; (2c00 <set_arm_clock+0x2d0>)
    2b2c:	6010      	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    2b2e:	4a35      	ldr	r2, [pc, #212]	; (2c04 <set_arm_clock+0x2d4>)
    2b30:	6011      	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2b32:	4a35      	ldr	r2, [pc, #212]	; (2c08 <set_arm_clock+0x2d8>)
    2b34:	6013      	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    2b36:	d208      	bcs.n	2b4a <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    2b38:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    2b3c:	4a21      	ldr	r2, [pc, #132]	; (2bc4 <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    2b3e:	ea48 0707 	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
    2b42:	60d7      	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    2b44:	6813      	ldr	r3, [r2, #0]
    2b46:	2b00      	cmp	r3, #0
    2b48:	dafc      	bge.n	2b44 <set_arm_clock+0x214>
	}

	return frequency;
}
    2b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2b4e:	4673      	mov	r3, lr
    2b50:	e762      	b.n	2a18 <set_arm_clock+0xe8>
    2b52:	2712      	movs	r7, #18
    2b54:	e718      	b.n	2988 <set_arm_clock+0x58>
    2b56:	f44f 7340 	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
    2b5a:	2104      	movs	r1, #4
    2b5c:	e7c5      	b.n	2aea <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    2b5e:	f10c 31ff 	add.w	r1, ip, #4294967295
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    2b62:	4820      	ldr	r0, [pc, #128]	; (2be4 <set_arm_clock+0x2b4>)
    2b64:	2307      	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    2b66:	028c      	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    2b68:	4410      	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    2b6a:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    2b6e:	4a27      	ldr	r2, [pc, #156]	; (2c0c <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    2b70:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 2c1c <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    2b74:	fba2 2000 	umull	r2, r0, r2, r0
    2b78:	0d02      	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
    2b7a:	4825      	ldr	r0, [pc, #148]	; (2c10 <set_arm_clock+0x2e0>)
    2b7c:	2a36      	cmp	r2, #54	; 0x36
    2b7e:	bf38      	it	cc
    2b80:	2236      	movcc	r2, #54	; 0x36
    2b82:	fb02 f000 	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    2b86:	ea42 0a0a 	orr.w	sl, r2, sl
    2b8a:	e774      	b.n	2a76 <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    2b8c:	ea4f 248c 	mov.w	r4, ip, lsl #10
    2b90:	2300      	movs	r3, #0
    2b92:	ea86 218c 	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
    2b96:	f04f 0e01 	mov.w	lr, #1
				div_ahb = div_ahb + 1;
    2b9a:	46ac      	mov	ip, r5
    2b9c:	e762      	b.n	2a64 <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    2b9e:	461d      	mov	r5, r3
    2ba0:	f086 54c0 	eor.w	r4, r6, #402653184	; 0x18000000
    2ba4:	4611      	mov	r1, r2
    2ba6:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
    2baa:	e713      	b.n	29d4 <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
    2bac:	2400      	movs	r4, #0
	uint32_t div_ahb = 1;
    2bae:	f04f 0c01 	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    2bb2:	4602      	mov	r2, r0
    2bb4:	4631      	mov	r1, r6
    2bb6:	4623      	mov	r3, r4
	uint32_t div_arm = 1;
    2bb8:	46e6      	mov	lr, ip
    2bba:	e753      	b.n	2a64 <set_arm_clock+0x134>
    2bbc:	1f78a400 	.word	0x1f78a400
    2bc0:	400fc000 	.word	0x400fc000
    2bc4:	40080000 	.word	0x40080000
    2bc8:	23c34600 	.word	0x23c34600
    2bcc:	004cb223 	.word	0x004cb223
    2bd0:	51eb851f 	.word	0x51eb851f
    2bd4:	016e3600 	.word	0x016e3600
    2bd8:	400d8000 	.word	0x400d8000
    2bdc:	80003040 	.word	0x80003040
    2be0:	269fb1ff 	.word	0x269fb1ff
    2be4:	005b8d80 	.word	0x005b8d80
    2be8:	4df67eff 	.word	0x4df67eff
    2bec:	4d3f6400 	.word	0x4d3f6400
    2bf0:	08f0d17f 	.word	0x08f0d17f
    2bf4:	2cb4177f 	.word	0x2cb4177f
    2bf8:	00e5109f 	.word	0x00e5109f
    2bfc:	431bde83 	.word	0x431bde83
    2c00:	20000edc 	.word	0x20000edc
    2c04:	20000ed8 	.word	0x20000ed8
    2c08:	200021f0 	.word	0x200021f0
    2c0c:	165e9f81 	.word	0x165e9f81
    2c10:	00b71b00 	.word	0x00b71b00
    2c14:	8000206c 	.word	0x8000206c
    2c18:	8001307f 	.word	0x8001307f
    2c1c:	80002000 	.word	0x80002000

00002c20 <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    2c20:	4a07      	ldr	r2, [pc, #28]	; (2c40 <rtc_get+0x20>)
    2c22:	6a50      	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    2c24:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uint32_t hi2 = SNVS_HPRTCMR;
    2c26:	4619      	mov	r1, r3
    2c28:	4684      	mov	ip, r0
    2c2a:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    2c2c:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    2c2e:	4299      	cmp	r1, r3
    2c30:	d1f9      	bne.n	2c26 <rtc_get+0x6>
    2c32:	4584      	cmp	ip, r0
    2c34:	d1f7      	bne.n	2c26 <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
    2c36:	0bdb      	lsrs	r3, r3, #15
}
    2c38:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    2c3c:	4770      	bx	lr
    2c3e:	bf00      	nop
    2c40:	400d4000 	.word	0x400d4000

00002c44 <sm_align_pool>:
{
    2c44:	b508      	push	{r3, lr}
	x = spool->pool_size % HEADER_SZ;
    2c46:	e9d0 3200 	ldrd	r3, r2, [r0]
	if (!spool->pool || !spool->pool_size) return 0;
    2c4a:	b15b      	cbz	r3, 2c64 <sm_align_pool+0x20>
    2c4c:	b1ba      	cbz	r2, 2c7e <sm_align_pool+0x3a>
	if (spool->pool_size % HEADER_SZ) return 0;
    2c4e:	4b0f      	ldr	r3, [pc, #60]	; (2c8c <sm_align_pool+0x48>)
    2c50:	fba3 1302 	umull	r1, r3, r3, r2
    2c54:	08db      	lsrs	r3, r3, #3
    2c56:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2c5a:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    2c5e:	d10a      	bne.n	2c76 <sm_align_pool+0x32>
	if (smalloc_verify_pool(spool)) return 1;
    2c60:	2001      	movs	r0, #1
}
    2c62:	bd08      	pop	{r3, pc}
	x = spool->pool_size % HEADER_SZ;
    2c64:	4b09      	ldr	r3, [pc, #36]	; (2c8c <sm_align_pool+0x48>)
    2c66:	fba3 1302 	umull	r1, r3, r3, r2
    2c6a:	08db      	lsrs	r3, r3, #3
    2c6c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
    2c70:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    2c74:	d001      	beq.n	2c7a <sm_align_pool+0x36>
    2c76:	1ad2      	subs	r2, r2, r3
    2c78:	6042      	str	r2, [r0, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    2c7a:	2af0      	cmp	r2, #240	; 0xf0
    2c7c:	d8f0      	bhi.n	2c60 <sm_align_pool+0x1c>
		errno = ENOSPC;
    2c7e:	f001 f845 	bl	3d0c <__errno>
    2c82:	221c      	movs	r2, #28
    2c84:	4603      	mov	r3, r0
    2c86:	2000      	movs	r0, #0
    2c88:	601a      	str	r2, [r3, #0]
}
    2c8a:	bd08      	pop	{r3, pc}
    2c8c:	aaaaaaab 	.word	0xaaaaaaab

00002c90 <sm_set_pool>:
{
    2c90:	b570      	push	{r4, r5, r6, lr}
	if (!spool) {
    2c92:	4604      	mov	r4, r0
    2c94:	b338      	cbz	r0, 2ce6 <sm_set_pool+0x56>
	if (!new_pool || !new_pool_size) {
    2c96:	b119      	cbz	r1, 2ca0 <sm_set_pool+0x10>
    2c98:	fab2 f682 	clz	r6, r2
    2c9c:	0976      	lsrs	r6, r6, #5
    2c9e:	b9a2      	cbnz	r2, 2cca <sm_set_pool+0x3a>
	if (!spool->pool || !spool->pool_size) return 0;
    2ca0:	6820      	ldr	r0, [r4, #0]
    2ca2:	b300      	cbz	r0, 2ce6 <sm_set_pool+0x56>
    2ca4:	6862      	ldr	r2, [r4, #4]
    2ca6:	b1f2      	cbz	r2, 2ce6 <sm_set_pool+0x56>
	if (spool->pool_size % HEADER_SZ) return 0;
    2ca8:	4b18      	ldr	r3, [pc, #96]	; (2d0c <sm_set_pool+0x7c>)
    2caa:	4919      	ldr	r1, [pc, #100]	; (2d10 <sm_set_pool+0x80>)
    2cac:	fb02 f303 	mul.w	r3, r2, r3
    2cb0:	ebb1 0fb3 	cmp.w	r1, r3, ror #2
    2cb4:	d317      	bcc.n	2ce6 <sm_set_pool+0x56>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    2cb6:	68a3      	ldr	r3, [r4, #8]
    2cb8:	b9e3      	cbnz	r3, 2cf4 <sm_set_pool+0x64>
			memset(spool, 0, sizeof(struct smalloc_pool));
    2cba:	2200      	movs	r2, #0
			return 1;
    2cbc:	2301      	movs	r3, #1
			memset(spool, 0, sizeof(struct smalloc_pool));
    2cbe:	6022      	str	r2, [r4, #0]
    2cc0:	6062      	str	r2, [r4, #4]
    2cc2:	60a2      	str	r2, [r4, #8]
    2cc4:	60e2      	str	r2, [r4, #12]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    2cc6:	4618      	mov	r0, r3
    2cc8:	bd70      	pop	{r4, r5, r6, pc}
	spool->pool = new_pool;
    2cca:	461d      	mov	r5, r3
	spool->oomfn = oom_handler;
    2ccc:	9b04      	ldr	r3, [sp, #16]
	spool->pool_size = new_pool_size;
    2cce:	e9c0 1200 	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
    2cd2:	60c3      	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    2cd4:	f7ff ffb6 	bl	2c44 <sm_align_pool>
    2cd8:	4603      	mov	r3, r0
    2cda:	2800      	cmp	r0, #0
    2cdc:	d0f3      	beq.n	2cc6 <sm_set_pool+0x36>
	if (do_zero) {
    2cde:	b96d      	cbnz	r5, 2cfc <sm_set_pool+0x6c>
	return 1;
    2ce0:	2301      	movs	r3, #1
}
    2ce2:	4618      	mov	r0, r3
    2ce4:	bd70      	pop	{r4, r5, r6, pc}
		errno = EINVAL;
    2ce6:	f001 f811 	bl	3d0c <__errno>
    2cea:	2216      	movs	r2, #22
		return 0;
    2cec:	2300      	movs	r3, #0
		errno = EINVAL;
    2cee:	6002      	str	r2, [r0, #0]
}
    2cf0:	4618      	mov	r0, r3
    2cf2:	bd70      	pop	{r4, r5, r6, pc}
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    2cf4:	2100      	movs	r1, #0
    2cf6:	f000 fec1 	bl	3a7c <memset>
    2cfa:	e7de      	b.n	2cba <sm_set_pool+0x2a>
		memset(spool->pool, 0, spool->pool_size);
    2cfc:	6862      	ldr	r2, [r4, #4]
    2cfe:	4631      	mov	r1, r6
    2d00:	6820      	ldr	r0, [r4, #0]
		spool->do_zero = do_zero;
    2d02:	60a5      	str	r5, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    2d04:	f000 feba 	bl	3a7c <memset>
	return 1;
    2d08:	2301      	movs	r3, #1
    2d0a:	e7dc      	b.n	2cc6 <sm_set_pool+0x36>
    2d0c:	aaaaaaab 	.word	0xaaaaaaab
    2d10:	15555555 	.word	0x15555555

00002d14 <_malloc_r>:
    2d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2d18:	f101 060b 	add.w	r6, r1, #11
    2d1c:	2e16      	cmp	r6, #22
    2d1e:	b083      	sub	sp, #12
    2d20:	4604      	mov	r4, r0
    2d22:	d824      	bhi.n	2d6e <_malloc_r+0x5a>
    2d24:	2910      	cmp	r1, #16
    2d26:	f200 80ba 	bhi.w	2e9e <_malloc_r+0x18a>
    2d2a:	f000 faa3 	bl	3274 <__malloc_lock>
    2d2e:	2610      	movs	r6, #16
    2d30:	2218      	movs	r2, #24
    2d32:	2002      	movs	r0, #2
    2d34:	4fb5      	ldr	r7, [pc, #724]	; (300c <_malloc_r+0x2f8>)
    2d36:	443a      	add	r2, r7
    2d38:	f1a2 0108 	sub.w	r1, r2, #8
    2d3c:	6853      	ldr	r3, [r2, #4]
    2d3e:	428b      	cmp	r3, r1
    2d40:	f000 80ba 	beq.w	2eb8 <_malloc_r+0x1a4>
    2d44:	685a      	ldr	r2, [r3, #4]
    2d46:	68d9      	ldr	r1, [r3, #12]
    2d48:	f022 0203 	bic.w	r2, r2, #3
    2d4c:	441a      	add	r2, r3
    2d4e:	689d      	ldr	r5, [r3, #8]
    2d50:	60e9      	str	r1, [r5, #12]
    2d52:	608d      	str	r5, [r1, #8]
    2d54:	6851      	ldr	r1, [r2, #4]
    2d56:	f041 0101 	orr.w	r1, r1, #1
    2d5a:	4620      	mov	r0, r4
    2d5c:	6051      	str	r1, [r2, #4]
    2d5e:	f103 0508 	add.w	r5, r3, #8
    2d62:	f000 fa8d 	bl	3280 <__malloc_unlock>
    2d66:	4628      	mov	r0, r5
    2d68:	b003      	add	sp, #12
    2d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2d6e:	f036 0607 	bics.w	r6, r6, #7
    2d72:	f100 8094 	bmi.w	2e9e <_malloc_r+0x18a>
    2d76:	42b1      	cmp	r1, r6
    2d78:	f200 8091 	bhi.w	2e9e <_malloc_r+0x18a>
    2d7c:	f000 fa7a 	bl	3274 <__malloc_lock>
    2d80:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
    2d84:	f0c0 819a 	bcc.w	30bc <_malloc_r+0x3a8>
    2d88:	0a73      	lsrs	r3, r6, #9
    2d8a:	f000 808f 	beq.w	2eac <_malloc_r+0x198>
    2d8e:	2b04      	cmp	r3, #4
    2d90:	f200 816f 	bhi.w	3072 <_malloc_r+0x35e>
    2d94:	09b3      	lsrs	r3, r6, #6
    2d96:	f103 0039 	add.w	r0, r3, #57	; 0x39
    2d9a:	f103 0c38 	add.w	ip, r3, #56	; 0x38
    2d9e:	00c3      	lsls	r3, r0, #3
    2da0:	4f9a      	ldr	r7, [pc, #616]	; (300c <_malloc_r+0x2f8>)
    2da2:	443b      	add	r3, r7
    2da4:	f1a3 0508 	sub.w	r5, r3, #8
    2da8:	685b      	ldr	r3, [r3, #4]
    2daa:	429d      	cmp	r5, r3
    2dac:	d106      	bne.n	2dbc <_malloc_r+0xa8>
    2dae:	e00c      	b.n	2dca <_malloc_r+0xb6>
    2db0:	2900      	cmp	r1, #0
    2db2:	f280 8127 	bge.w	3004 <_malloc_r+0x2f0>
    2db6:	68db      	ldr	r3, [r3, #12]
    2db8:	429d      	cmp	r5, r3
    2dba:	d006      	beq.n	2dca <_malloc_r+0xb6>
    2dbc:	685a      	ldr	r2, [r3, #4]
    2dbe:	f022 0203 	bic.w	r2, r2, #3
    2dc2:	1b91      	subs	r1, r2, r6
    2dc4:	290f      	cmp	r1, #15
    2dc6:	ddf3      	ble.n	2db0 <_malloc_r+0x9c>
    2dc8:	4660      	mov	r0, ip
    2dca:	693d      	ldr	r5, [r7, #16]
    2dcc:	f8df c250 	ldr.w	ip, [pc, #592]	; 3020 <_malloc_r+0x30c>
    2dd0:	4565      	cmp	r5, ip
    2dd2:	d07c      	beq.n	2ece <_malloc_r+0x1ba>
    2dd4:	686a      	ldr	r2, [r5, #4]
    2dd6:	f022 0203 	bic.w	r2, r2, #3
    2dda:	1b93      	subs	r3, r2, r6
    2ddc:	2b0f      	cmp	r3, #15
    2dde:	f300 817b 	bgt.w	30d8 <_malloc_r+0x3c4>
    2de2:	2b00      	cmp	r3, #0
    2de4:	e9c7 cc04 	strd	ip, ip, [r7, #16]
    2de8:	f280 816c 	bge.w	30c4 <_malloc_r+0x3b0>
    2dec:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    2df0:	f080 811a 	bcs.w	3028 <_malloc_r+0x314>
    2df4:	08d3      	lsrs	r3, r2, #3
    2df6:	6879      	ldr	r1, [r7, #4]
    2df8:	3301      	adds	r3, #1
    2dfa:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    2dfe:	2201      	movs	r2, #1
    2e00:	fa02 f20e 	lsl.w	r2, r2, lr
    2e04:	430a      	orrs	r2, r1
    2e06:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
    2e0a:	f8c5 e008 	str.w	lr, [r5, #8]
    2e0e:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    2e12:	3908      	subs	r1, #8
    2e14:	60e9      	str	r1, [r5, #12]
    2e16:	607a      	str	r2, [r7, #4]
    2e18:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    2e1c:	f8ce 500c 	str.w	r5, [lr, #12]
    2e20:	1083      	asrs	r3, r0, #2
    2e22:	2101      	movs	r1, #1
    2e24:	4099      	lsls	r1, r3
    2e26:	4291      	cmp	r1, r2
    2e28:	d857      	bhi.n	2eda <_malloc_r+0x1c6>
    2e2a:	4211      	tst	r1, r2
    2e2c:	d106      	bne.n	2e3c <_malloc_r+0x128>
    2e2e:	f020 0003 	bic.w	r0, r0, #3
    2e32:	0049      	lsls	r1, r1, #1
    2e34:	4211      	tst	r1, r2
    2e36:	f100 0004 	add.w	r0, r0, #4
    2e3a:	d0fa      	beq.n	2e32 <_malloc_r+0x11e>
    2e3c:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    2e40:	464d      	mov	r5, r9
    2e42:	4686      	mov	lr, r0
    2e44:	f8d5 800c 	ldr.w	r8, [r5, #12]
    2e48:	4545      	cmp	r5, r8
    2e4a:	d108      	bne.n	2e5e <_malloc_r+0x14a>
    2e4c:	e11d      	b.n	308a <_malloc_r+0x376>
    2e4e:	2b00      	cmp	r3, #0
    2e50:	f280 8124 	bge.w	309c <_malloc_r+0x388>
    2e54:	f8d8 800c 	ldr.w	r8, [r8, #12]
    2e58:	4545      	cmp	r5, r8
    2e5a:	f000 8116 	beq.w	308a <_malloc_r+0x376>
    2e5e:	f8d8 2004 	ldr.w	r2, [r8, #4]
    2e62:	f022 0203 	bic.w	r2, r2, #3
    2e66:	1b93      	subs	r3, r2, r6
    2e68:	2b0f      	cmp	r3, #15
    2e6a:	ddf0      	ble.n	2e4e <_malloc_r+0x13a>
    2e6c:	4620      	mov	r0, r4
    2e6e:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
    2e72:	eb08 0106 	add.w	r1, r8, r6
    2e76:	f046 0601 	orr.w	r6, r6, #1
    2e7a:	f8c8 6004 	str.w	r6, [r8, #4]
    2e7e:	60ec      	str	r4, [r5, #12]
    2e80:	60a5      	str	r5, [r4, #8]
    2e82:	f043 0401 	orr.w	r4, r3, #1
    2e86:	e9c7 1104 	strd	r1, r1, [r7, #16]
    2e8a:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    2e8e:	604c      	str	r4, [r1, #4]
    2e90:	f848 3002 	str.w	r3, [r8, r2]
    2e94:	f000 f9f4 	bl	3280 <__malloc_unlock>
    2e98:	f108 0508 	add.w	r5, r8, #8
    2e9c:	e002      	b.n	2ea4 <_malloc_r+0x190>
    2e9e:	230c      	movs	r3, #12
    2ea0:	6023      	str	r3, [r4, #0]
    2ea2:	2500      	movs	r5, #0
    2ea4:	4628      	mov	r0, r5
    2ea6:	b003      	add	sp, #12
    2ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2eac:	f44f 7300 	mov.w	r3, #512	; 0x200
    2eb0:	2040      	movs	r0, #64	; 0x40
    2eb2:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    2eb6:	e773      	b.n	2da0 <_malloc_r+0x8c>
    2eb8:	68d3      	ldr	r3, [r2, #12]
    2eba:	429a      	cmp	r2, r3
    2ebc:	bf08      	it	eq
    2ebe:	3002      	addeq	r0, #2
    2ec0:	f47f af40 	bne.w	2d44 <_malloc_r+0x30>
    2ec4:	693d      	ldr	r5, [r7, #16]
    2ec6:	f8df c158 	ldr.w	ip, [pc, #344]	; 3020 <_malloc_r+0x30c>
    2eca:	4565      	cmp	r5, ip
    2ecc:	d182      	bne.n	2dd4 <_malloc_r+0xc0>
    2ece:	687a      	ldr	r2, [r7, #4]
    2ed0:	1083      	asrs	r3, r0, #2
    2ed2:	2101      	movs	r1, #1
    2ed4:	4099      	lsls	r1, r3
    2ed6:	4291      	cmp	r1, r2
    2ed8:	d9a7      	bls.n	2e2a <_malloc_r+0x116>
    2eda:	68bd      	ldr	r5, [r7, #8]
    2edc:	686b      	ldr	r3, [r5, #4]
    2ede:	f023 0903 	bic.w	r9, r3, #3
    2ee2:	454e      	cmp	r6, r9
    2ee4:	d803      	bhi.n	2eee <_malloc_r+0x1da>
    2ee6:	eba9 0306 	sub.w	r3, r9, r6
    2eea:	2b0f      	cmp	r3, #15
    2eec:	dc7a      	bgt.n	2fe4 <_malloc_r+0x2d0>
    2eee:	f8df b134 	ldr.w	fp, [pc, #308]	; 3024 <_malloc_r+0x310>
    2ef2:	4b47      	ldr	r3, [pc, #284]	; (3010 <_malloc_r+0x2fc>)
    2ef4:	f8db 2000 	ldr.w	r2, [fp]
    2ef8:	681b      	ldr	r3, [r3, #0]
    2efa:	3201      	adds	r2, #1
    2efc:	4433      	add	r3, r6
    2efe:	eb05 0a09 	add.w	sl, r5, r9
    2f02:	f000 8133 	beq.w	316c <_malloc_r+0x458>
    2f06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    2f0a:	330f      	adds	r3, #15
    2f0c:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
    2f10:	f028 080f 	bic.w	r8, r8, #15
    2f14:	4641      	mov	r1, r8
    2f16:	4620      	mov	r0, r4
    2f18:	f000 fed0 	bl	3cbc <_sbrk_r>
    2f1c:	1c41      	adds	r1, r0, #1
    2f1e:	4602      	mov	r2, r0
    2f20:	f000 80f3 	beq.w	310a <_malloc_r+0x3f6>
    2f24:	4582      	cmp	sl, r0
    2f26:	f200 80ee 	bhi.w	3106 <_malloc_r+0x3f2>
    2f2a:	4b3a      	ldr	r3, [pc, #232]	; (3014 <_malloc_r+0x300>)
    2f2c:	6819      	ldr	r1, [r3, #0]
    2f2e:	4441      	add	r1, r8
    2f30:	6019      	str	r1, [r3, #0]
    2f32:	4608      	mov	r0, r1
    2f34:	f000 814e 	beq.w	31d4 <_malloc_r+0x4c0>
    2f38:	f8db 1000 	ldr.w	r1, [fp]
    2f3c:	9301      	str	r3, [sp, #4]
    2f3e:	3101      	adds	r1, #1
    2f40:	bf1b      	ittet	ne
    2f42:	eba2 010a 	subne.w	r1, r2, sl
    2f46:	1809      	addne	r1, r1, r0
    2f48:	f8cb 2000 	streq.w	r2, [fp]
    2f4c:	6019      	strne	r1, [r3, #0]
    2f4e:	f012 0b07 	ands.w	fp, r2, #7
    2f52:	f000 8117 	beq.w	3184 <_malloc_r+0x470>
    2f56:	f1cb 0108 	rsb	r1, fp, #8
    2f5a:	440a      	add	r2, r1
    2f5c:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
    2f60:	4490      	add	r8, r2
    2f62:	3108      	adds	r1, #8
    2f64:	eba1 0108 	sub.w	r1, r1, r8
    2f68:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    2f6c:	4651      	mov	r1, sl
    2f6e:	4620      	mov	r0, r4
    2f70:	9200      	str	r2, [sp, #0]
    2f72:	f000 fea3 	bl	3cbc <_sbrk_r>
    2f76:	1c42      	adds	r2, r0, #1
    2f78:	e9dd 2300 	ldrd	r2, r3, [sp]
    2f7c:	f000 814f 	beq.w	321e <_malloc_r+0x50a>
    2f80:	1a80      	subs	r0, r0, r2
    2f82:	eb00 080a 	add.w	r8, r0, sl
    2f86:	6819      	ldr	r1, [r3, #0]
    2f88:	60ba      	str	r2, [r7, #8]
    2f8a:	f048 0001 	orr.w	r0, r8, #1
    2f8e:	4451      	add	r1, sl
    2f90:	42bd      	cmp	r5, r7
    2f92:	6050      	str	r0, [r2, #4]
    2f94:	6019      	str	r1, [r3, #0]
    2f96:	f000 8129 	beq.w	31ec <_malloc_r+0x4d8>
    2f9a:	f1b9 0f0f 	cmp.w	r9, #15
    2f9e:	f240 8127 	bls.w	31f0 <_malloc_r+0x4dc>
    2fa2:	6868      	ldr	r0, [r5, #4]
    2fa4:	f1a9 0c0c 	sub.w	ip, r9, #12
    2fa8:	f02c 0c07 	bic.w	ip, ip, #7
    2fac:	f000 0001 	and.w	r0, r0, #1
    2fb0:	ea40 000c 	orr.w	r0, r0, ip
    2fb4:	6068      	str	r0, [r5, #4]
    2fb6:	f04f 0e05 	mov.w	lr, #5
    2fba:	eb05 000c 	add.w	r0, r5, ip
    2fbe:	f1bc 0f0f 	cmp.w	ip, #15
    2fc2:	e9c0 ee01 	strd	lr, lr, [r0, #4]
    2fc6:	f200 8132 	bhi.w	322e <_malloc_r+0x51a>
    2fca:	6850      	ldr	r0, [r2, #4]
    2fcc:	4615      	mov	r5, r2
    2fce:	4b12      	ldr	r3, [pc, #72]	; (3018 <_malloc_r+0x304>)
    2fd0:	681a      	ldr	r2, [r3, #0]
    2fd2:	428a      	cmp	r2, r1
    2fd4:	bf38      	it	cc
    2fd6:	6019      	strcc	r1, [r3, #0]
    2fd8:	4b10      	ldr	r3, [pc, #64]	; (301c <_malloc_r+0x308>)
    2fda:	681a      	ldr	r2, [r3, #0]
    2fdc:	428a      	cmp	r2, r1
    2fde:	bf38      	it	cc
    2fe0:	6019      	strcc	r1, [r3, #0]
    2fe2:	e094      	b.n	310e <_malloc_r+0x3fa>
    2fe4:	19aa      	adds	r2, r5, r6
    2fe6:	f043 0301 	orr.w	r3, r3, #1
    2fea:	f046 0601 	orr.w	r6, r6, #1
    2fee:	606e      	str	r6, [r5, #4]
    2ff0:	4620      	mov	r0, r4
    2ff2:	60ba      	str	r2, [r7, #8]
    2ff4:	6053      	str	r3, [r2, #4]
    2ff6:	f000 f943 	bl	3280 <__malloc_unlock>
    2ffa:	3508      	adds	r5, #8
    2ffc:	4628      	mov	r0, r5
    2ffe:	b003      	add	sp, #12
    3000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3004:	68d9      	ldr	r1, [r3, #12]
    3006:	441a      	add	r2, r3
    3008:	e6a1      	b.n	2d4e <_malloc_r+0x3a>
    300a:	bf00      	nop
    300c:	20001120 	.word	0x20001120
    3010:	2000202c 	.word	0x2000202c
    3014:	20001ffc 	.word	0x20001ffc
    3018:	20002024 	.word	0x20002024
    301c:	20002028 	.word	0x20002028
    3020:	20001128 	.word	0x20001128
    3024:	20001528 	.word	0x20001528
    3028:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
    302c:	ea4f 2352 	mov.w	r3, r2, lsr #9
    3030:	d363      	bcc.n	30fa <_malloc_r+0x3e6>
    3032:	2b14      	cmp	r3, #20
    3034:	f200 80b7 	bhi.w	31a6 <_malloc_r+0x492>
    3038:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    303c:	00c9      	lsls	r1, r1, #3
    303e:	335b      	adds	r3, #91	; 0x5b
    3040:	eb07 0e01 	add.w	lr, r7, r1
    3044:	5879      	ldr	r1, [r7, r1]
    3046:	f1ae 0e08 	sub.w	lr, lr, #8
    304a:	458e      	cmp	lr, r1
    304c:	f000 8091 	beq.w	3172 <_malloc_r+0x45e>
    3050:	684b      	ldr	r3, [r1, #4]
    3052:	f023 0303 	bic.w	r3, r3, #3
    3056:	4293      	cmp	r3, r2
    3058:	d902      	bls.n	3060 <_malloc_r+0x34c>
    305a:	6889      	ldr	r1, [r1, #8]
    305c:	458e      	cmp	lr, r1
    305e:	d1f7      	bne.n	3050 <_malloc_r+0x33c>
    3060:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    3064:	687a      	ldr	r2, [r7, #4]
    3066:	e9c5 1e02 	strd	r1, lr, [r5, #8]
    306a:	f8ce 5008 	str.w	r5, [lr, #8]
    306e:	60cd      	str	r5, [r1, #12]
    3070:	e6d6      	b.n	2e20 <_malloc_r+0x10c>
    3072:	2b14      	cmp	r3, #20
    3074:	d959      	bls.n	312a <_malloc_r+0x416>
    3076:	2b54      	cmp	r3, #84	; 0x54
    3078:	f200 809d 	bhi.w	31b6 <_malloc_r+0x4a2>
    307c:	0b33      	lsrs	r3, r6, #12
    307e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    3082:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
    3086:	00c3      	lsls	r3, r0, #3
    3088:	e68a      	b.n	2da0 <_malloc_r+0x8c>
    308a:	f10e 0e01 	add.w	lr, lr, #1
    308e:	f01e 0f03 	tst.w	lr, #3
    3092:	f105 0508 	add.w	r5, r5, #8
    3096:	f47f aed5 	bne.w	2e44 <_malloc_r+0x130>
    309a:	e051      	b.n	3140 <_malloc_r+0x42c>
    309c:	4442      	add	r2, r8
    309e:	4645      	mov	r5, r8
    30a0:	6853      	ldr	r3, [r2, #4]
    30a2:	f8d8 100c 	ldr.w	r1, [r8, #12]
    30a6:	f043 0301 	orr.w	r3, r3, #1
    30aa:	6053      	str	r3, [r2, #4]
    30ac:	f855 3f08 	ldr.w	r3, [r5, #8]!
    30b0:	4620      	mov	r0, r4
    30b2:	60d9      	str	r1, [r3, #12]
    30b4:	608b      	str	r3, [r1, #8]
    30b6:	f000 f8e3 	bl	3280 <__malloc_unlock>
    30ba:	e6f3      	b.n	2ea4 <_malloc_r+0x190>
    30bc:	08f0      	lsrs	r0, r6, #3
    30be:	f106 0208 	add.w	r2, r6, #8
    30c2:	e637      	b.n	2d34 <_malloc_r+0x20>
    30c4:	442a      	add	r2, r5
    30c6:	4620      	mov	r0, r4
    30c8:	6853      	ldr	r3, [r2, #4]
    30ca:	f043 0301 	orr.w	r3, r3, #1
    30ce:	6053      	str	r3, [r2, #4]
    30d0:	3508      	adds	r5, #8
    30d2:	f000 f8d5 	bl	3280 <__malloc_unlock>
    30d6:	e6e5      	b.n	2ea4 <_malloc_r+0x190>
    30d8:	19a9      	adds	r1, r5, r6
    30da:	4620      	mov	r0, r4
    30dc:	f046 0601 	orr.w	r6, r6, #1
    30e0:	f043 0401 	orr.w	r4, r3, #1
    30e4:	606e      	str	r6, [r5, #4]
    30e6:	e9c7 1104 	strd	r1, r1, [r7, #16]
    30ea:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    30ee:	604c      	str	r4, [r1, #4]
    30f0:	50ab      	str	r3, [r5, r2]
    30f2:	f000 f8c5 	bl	3280 <__malloc_unlock>
    30f6:	3508      	adds	r5, #8
    30f8:	e6d4      	b.n	2ea4 <_malloc_r+0x190>
    30fa:	0993      	lsrs	r3, r2, #6
    30fc:	f103 0139 	add.w	r1, r3, #57	; 0x39
    3100:	00c9      	lsls	r1, r1, #3
    3102:	3338      	adds	r3, #56	; 0x38
    3104:	e79c      	b.n	3040 <_malloc_r+0x32c>
    3106:	42bd      	cmp	r5, r7
    3108:	d05f      	beq.n	31ca <_malloc_r+0x4b6>
    310a:	68bd      	ldr	r5, [r7, #8]
    310c:	6868      	ldr	r0, [r5, #4]
    310e:	f020 0803 	bic.w	r8, r0, #3
    3112:	4546      	cmp	r6, r8
    3114:	eba8 0306 	sub.w	r3, r8, r6
    3118:	d802      	bhi.n	3120 <_malloc_r+0x40c>
    311a:	2b0f      	cmp	r3, #15
    311c:	f73f af62 	bgt.w	2fe4 <_malloc_r+0x2d0>
    3120:	4620      	mov	r0, r4
    3122:	f000 f8ad 	bl	3280 <__malloc_unlock>
    3126:	2500      	movs	r5, #0
    3128:	e6bc      	b.n	2ea4 <_malloc_r+0x190>
    312a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    312e:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
    3132:	00c3      	lsls	r3, r0, #3
    3134:	e634      	b.n	2da0 <_malloc_r+0x8c>
    3136:	f859 3908 	ldr.w	r3, [r9], #-8
    313a:	454b      	cmp	r3, r9
    313c:	f040 8096 	bne.w	326c <_malloc_r+0x558>
    3140:	f010 0f03 	tst.w	r0, #3
    3144:	f100 30ff 	add.w	r0, r0, #4294967295
    3148:	d1f5      	bne.n	3136 <_malloc_r+0x422>
    314a:	687b      	ldr	r3, [r7, #4]
    314c:	ea23 0301 	bic.w	r3, r3, r1
    3150:	607b      	str	r3, [r7, #4]
    3152:	0049      	lsls	r1, r1, #1
    3154:	4299      	cmp	r1, r3
    3156:	f63f aec0 	bhi.w	2eda <_malloc_r+0x1c6>
    315a:	b919      	cbnz	r1, 3164 <_malloc_r+0x450>
    315c:	e6bd      	b.n	2eda <_malloc_r+0x1c6>
    315e:	0049      	lsls	r1, r1, #1
    3160:	f10e 0e04 	add.w	lr, lr, #4
    3164:	4219      	tst	r1, r3
    3166:	d0fa      	beq.n	315e <_malloc_r+0x44a>
    3168:	4670      	mov	r0, lr
    316a:	e667      	b.n	2e3c <_malloc_r+0x128>
    316c:	f103 0810 	add.w	r8, r3, #16
    3170:	e6d0      	b.n	2f14 <_malloc_r+0x200>
    3172:	109a      	asrs	r2, r3, #2
    3174:	f04f 0801 	mov.w	r8, #1
    3178:	687b      	ldr	r3, [r7, #4]
    317a:	fa08 f202 	lsl.w	r2, r8, r2
    317e:	431a      	orrs	r2, r3
    3180:	607a      	str	r2, [r7, #4]
    3182:	e770      	b.n	3066 <_malloc_r+0x352>
    3184:	eb02 0108 	add.w	r1, r2, r8
    3188:	4249      	negs	r1, r1
    318a:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    318e:	4651      	mov	r1, sl
    3190:	4620      	mov	r0, r4
    3192:	9200      	str	r2, [sp, #0]
    3194:	f000 fd92 	bl	3cbc <_sbrk_r>
    3198:	1c43      	adds	r3, r0, #1
    319a:	e9dd 2300 	ldrd	r2, r3, [sp]
    319e:	f47f aeef 	bne.w	2f80 <_malloc_r+0x26c>
    31a2:	46da      	mov	sl, fp
    31a4:	e6ef      	b.n	2f86 <_malloc_r+0x272>
    31a6:	2b54      	cmp	r3, #84	; 0x54
    31a8:	d825      	bhi.n	31f6 <_malloc_r+0x4e2>
    31aa:	0b13      	lsrs	r3, r2, #12
    31ac:	f103 016f 	add.w	r1, r3, #111	; 0x6f
    31b0:	00c9      	lsls	r1, r1, #3
    31b2:	336e      	adds	r3, #110	; 0x6e
    31b4:	e744      	b.n	3040 <_malloc_r+0x32c>
    31b6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    31ba:	d825      	bhi.n	3208 <_malloc_r+0x4f4>
    31bc:	0bf3      	lsrs	r3, r6, #15
    31be:	f103 0078 	add.w	r0, r3, #120	; 0x78
    31c2:	f103 0c77 	add.w	ip, r3, #119	; 0x77
    31c6:	00c3      	lsls	r3, r0, #3
    31c8:	e5ea      	b.n	2da0 <_malloc_r+0x8c>
    31ca:	4b29      	ldr	r3, [pc, #164]	; (3270 <_malloc_r+0x55c>)
    31cc:	6818      	ldr	r0, [r3, #0]
    31ce:	4440      	add	r0, r8
    31d0:	6018      	str	r0, [r3, #0]
    31d2:	e6b1      	b.n	2f38 <_malloc_r+0x224>
    31d4:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
    31d8:	f1bc 0f00 	cmp.w	ip, #0
    31dc:	f47f aeac 	bne.w	2f38 <_malloc_r+0x224>
    31e0:	68bd      	ldr	r5, [r7, #8]
    31e2:	44c8      	add	r8, r9
    31e4:	f048 0001 	orr.w	r0, r8, #1
    31e8:	6068      	str	r0, [r5, #4]
    31ea:	e6f0      	b.n	2fce <_malloc_r+0x2ba>
    31ec:	4615      	mov	r5, r2
    31ee:	e6ee      	b.n	2fce <_malloc_r+0x2ba>
    31f0:	2301      	movs	r3, #1
    31f2:	6053      	str	r3, [r2, #4]
    31f4:	e794      	b.n	3120 <_malloc_r+0x40c>
    31f6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    31fa:	d823      	bhi.n	3244 <_malloc_r+0x530>
    31fc:	0bd3      	lsrs	r3, r2, #15
    31fe:	f103 0178 	add.w	r1, r3, #120	; 0x78
    3202:	00c9      	lsls	r1, r1, #3
    3204:	3377      	adds	r3, #119	; 0x77
    3206:	e71b      	b.n	3040 <_malloc_r+0x32c>
    3208:	f240 5254 	movw	r2, #1364	; 0x554
    320c:	4293      	cmp	r3, r2
    320e:	d823      	bhi.n	3258 <_malloc_r+0x544>
    3210:	0cb3      	lsrs	r3, r6, #18
    3212:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    3216:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
    321a:	00c3      	lsls	r3, r0, #3
    321c:	e5c0      	b.n	2da0 <_malloc_r+0x8c>
    321e:	f1ab 0b08 	sub.w	fp, fp, #8
    3222:	44d8      	add	r8, fp
    3224:	eba8 0802 	sub.w	r8, r8, r2
    3228:	f04f 0a00 	mov.w	sl, #0
    322c:	e6ab      	b.n	2f86 <_malloc_r+0x272>
    322e:	f105 0108 	add.w	r1, r5, #8
    3232:	4620      	mov	r0, r4
    3234:	9300      	str	r3, [sp, #0]
    3236:	f000 ffe1 	bl	41fc <_free_r>
    323a:	68bd      	ldr	r5, [r7, #8]
    323c:	9b00      	ldr	r3, [sp, #0]
    323e:	6868      	ldr	r0, [r5, #4]
    3240:	6819      	ldr	r1, [r3, #0]
    3242:	e6c4      	b.n	2fce <_malloc_r+0x2ba>
    3244:	f240 5154 	movw	r1, #1364	; 0x554
    3248:	428b      	cmp	r3, r1
    324a:	d80b      	bhi.n	3264 <_malloc_r+0x550>
    324c:	0c93      	lsrs	r3, r2, #18
    324e:	f103 017d 	add.w	r1, r3, #125	; 0x7d
    3252:	00c9      	lsls	r1, r1, #3
    3254:	337c      	adds	r3, #124	; 0x7c
    3256:	e6f3      	b.n	3040 <_malloc_r+0x32c>
    3258:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    325c:	207f      	movs	r0, #127	; 0x7f
    325e:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
    3262:	e59d      	b.n	2da0 <_malloc_r+0x8c>
    3264:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    3268:	237e      	movs	r3, #126	; 0x7e
    326a:	e6e9      	b.n	3040 <_malloc_r+0x32c>
    326c:	687b      	ldr	r3, [r7, #4]
    326e:	e770      	b.n	3152 <_malloc_r+0x43e>
    3270:	20001ffc 	.word	0x20001ffc

00003274 <__malloc_lock>:
    3274:	4801      	ldr	r0, [pc, #4]	; (327c <__malloc_lock+0x8>)
    3276:	f000 bd77 	b.w	3d68 <__retarget_lock_acquire_recursive>
    327a:	bf00      	nop
    327c:	20001ff4 	.word	0x20001ff4

00003280 <__malloc_unlock>:
    3280:	4801      	ldr	r0, [pc, #4]	; (3288 <__malloc_unlock+0x8>)
    3282:	f000 bd73 	b.w	3d6c <__retarget_lock_release_recursive>
    3286:	bf00      	nop
    3288:	20001ff4 	.word	0x20001ff4

0000328c <_realloc_r>:
    328c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3290:	4617      	mov	r7, r2
    3292:	2900      	cmp	r1, #0
    3294:	f000 8098 	beq.w	33c8 <_realloc_r+0x13c>
    3298:	460c      	mov	r4, r1
    329a:	f107 050b 	add.w	r5, r7, #11
    329e:	4680      	mov	r8, r0
    32a0:	f7ff ffe8 	bl	3274 <__malloc_lock>
    32a4:	2d16      	cmp	r5, #22
    32a6:	f854 1c04 	ldr.w	r1, [r4, #-4]
    32aa:	d85b      	bhi.n	3364 <_realloc_r+0xd8>
    32ac:	2510      	movs	r5, #16
    32ae:	462a      	mov	r2, r5
    32b0:	42af      	cmp	r7, r5
    32b2:	d85c      	bhi.n	336e <_realloc_r+0xe2>
    32b4:	f021 0603 	bic.w	r6, r1, #3
    32b8:	4296      	cmp	r6, r2
    32ba:	f1a4 0908 	sub.w	r9, r4, #8
    32be:	da62      	bge.n	3386 <_realloc_r+0xfa>
    32c0:	4bbc      	ldr	r3, [pc, #752]	; (35b4 <_realloc_r+0x328>)
    32c2:	f8d3 c008 	ldr.w	ip, [r3, #8]
    32c6:	eb09 0006 	add.w	r0, r9, r6
    32ca:	4584      	cmp	ip, r0
    32cc:	f000 8097 	beq.w	33fe <_realloc_r+0x172>
    32d0:	f8d0 c004 	ldr.w	ip, [r0, #4]
    32d4:	f02c 0301 	bic.w	r3, ip, #1
    32d8:	4403      	add	r3, r0
    32da:	685b      	ldr	r3, [r3, #4]
    32dc:	07db      	lsls	r3, r3, #31
    32de:	d468      	bmi.n	33b2 <_realloc_r+0x126>
    32e0:	f02c 0c03 	bic.w	ip, ip, #3
    32e4:	eb06 030c 	add.w	r3, r6, ip
    32e8:	4293      	cmp	r3, r2
    32ea:	da47      	bge.n	337c <_realloc_r+0xf0>
    32ec:	07cb      	lsls	r3, r1, #31
    32ee:	d410      	bmi.n	3312 <_realloc_r+0x86>
    32f0:	f854 3c08 	ldr.w	r3, [r4, #-8]
    32f4:	eba9 0a03 	sub.w	sl, r9, r3
    32f8:	f8da 3004 	ldr.w	r3, [sl, #4]
    32fc:	f023 0103 	bic.w	r1, r3, #3
    3300:	448c      	add	ip, r1
    3302:	44b4      	add	ip, r6
    3304:	4594      	cmp	ip, r2
    3306:	f280 8111 	bge.w	352c <_realloc_r+0x2a0>
    330a:	1873      	adds	r3, r6, r1
    330c:	4293      	cmp	r3, r2
    330e:	f280 80e8 	bge.w	34e2 <_realloc_r+0x256>
    3312:	4639      	mov	r1, r7
    3314:	4640      	mov	r0, r8
    3316:	f7ff fcfd 	bl	2d14 <_malloc_r>
    331a:	4607      	mov	r7, r0
    331c:	b1e0      	cbz	r0, 3358 <_realloc_r+0xcc>
    331e:	f854 3c04 	ldr.w	r3, [r4, #-4]
    3322:	f023 0301 	bic.w	r3, r3, #1
    3326:	444b      	add	r3, r9
    3328:	f1a0 0208 	sub.w	r2, r0, #8
    332c:	4293      	cmp	r3, r2
    332e:	f000 80d2 	beq.w	34d6 <_realloc_r+0x24a>
    3332:	1f32      	subs	r2, r6, #4
    3334:	2a24      	cmp	r2, #36	; 0x24
    3336:	f200 80f5 	bhi.w	3524 <_realloc_r+0x298>
    333a:	2a13      	cmp	r2, #19
    333c:	f200 80ac 	bhi.w	3498 <_realloc_r+0x20c>
    3340:	4603      	mov	r3, r0
    3342:	4622      	mov	r2, r4
    3344:	6811      	ldr	r1, [r2, #0]
    3346:	6019      	str	r1, [r3, #0]
    3348:	6851      	ldr	r1, [r2, #4]
    334a:	6059      	str	r1, [r3, #4]
    334c:	6892      	ldr	r2, [r2, #8]
    334e:	609a      	str	r2, [r3, #8]
    3350:	4621      	mov	r1, r4
    3352:	4640      	mov	r0, r8
    3354:	f000 ff52 	bl	41fc <_free_r>
    3358:	4640      	mov	r0, r8
    335a:	f7ff ff91 	bl	3280 <__malloc_unlock>
    335e:	4638      	mov	r0, r7
    3360:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3364:	f025 0507 	bic.w	r5, r5, #7
    3368:	2d00      	cmp	r5, #0
    336a:	462a      	mov	r2, r5
    336c:	daa0      	bge.n	32b0 <_realloc_r+0x24>
    336e:	230c      	movs	r3, #12
    3370:	f8c8 3000 	str.w	r3, [r8]
    3374:	2700      	movs	r7, #0
    3376:	4638      	mov	r0, r7
    3378:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    337c:	461e      	mov	r6, r3
    337e:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    3382:	60d3      	str	r3, [r2, #12]
    3384:	609a      	str	r2, [r3, #8]
    3386:	1b73      	subs	r3, r6, r5
    3388:	2b0f      	cmp	r3, #15
    338a:	d822      	bhi.n	33d2 <_realloc_r+0x146>
    338c:	f8d9 3004 	ldr.w	r3, [r9, #4]
    3390:	f003 0301 	and.w	r3, r3, #1
    3394:	4333      	orrs	r3, r6
    3396:	444e      	add	r6, r9
    3398:	f8c9 3004 	str.w	r3, [r9, #4]
    339c:	6873      	ldr	r3, [r6, #4]
    339e:	f043 0301 	orr.w	r3, r3, #1
    33a2:	6073      	str	r3, [r6, #4]
    33a4:	4640      	mov	r0, r8
    33a6:	4627      	mov	r7, r4
    33a8:	f7ff ff6a 	bl	3280 <__malloc_unlock>
    33ac:	4638      	mov	r0, r7
    33ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    33b2:	07c9      	lsls	r1, r1, #31
    33b4:	d4ad      	bmi.n	3312 <_realloc_r+0x86>
    33b6:	f854 3c08 	ldr.w	r3, [r4, #-8]
    33ba:	eba9 0a03 	sub.w	sl, r9, r3
    33be:	f8da 1004 	ldr.w	r1, [sl, #4]
    33c2:	f021 0103 	bic.w	r1, r1, #3
    33c6:	e7a0      	b.n	330a <_realloc_r+0x7e>
    33c8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    33cc:	4611      	mov	r1, r2
    33ce:	f7ff bca1 	b.w	2d14 <_malloc_r>
    33d2:	f8d9 2004 	ldr.w	r2, [r9, #4]
    33d6:	eb09 0105 	add.w	r1, r9, r5
    33da:	f002 0201 	and.w	r2, r2, #1
    33de:	444e      	add	r6, r9
    33e0:	f043 0301 	orr.w	r3, r3, #1
    33e4:	432a      	orrs	r2, r5
    33e6:	f8c9 2004 	str.w	r2, [r9, #4]
    33ea:	604b      	str	r3, [r1, #4]
    33ec:	6873      	ldr	r3, [r6, #4]
    33ee:	f043 0301 	orr.w	r3, r3, #1
    33f2:	3108      	adds	r1, #8
    33f4:	6073      	str	r3, [r6, #4]
    33f6:	4640      	mov	r0, r8
    33f8:	f000 ff00 	bl	41fc <_free_r>
    33fc:	e7d2      	b.n	33a4 <_realloc_r+0x118>
    33fe:	f8dc 0004 	ldr.w	r0, [ip, #4]
    3402:	f020 0b03 	bic.w	fp, r0, #3
    3406:	eb06 0c0b 	add.w	ip, r6, fp
    340a:	f105 0010 	add.w	r0, r5, #16
    340e:	4584      	cmp	ip, r0
    3410:	da4d      	bge.n	34ae <_realloc_r+0x222>
    3412:	07c9      	lsls	r1, r1, #31
    3414:	f53f af7d 	bmi.w	3312 <_realloc_r+0x86>
    3418:	f854 1c08 	ldr.w	r1, [r4, #-8]
    341c:	eba9 0a01 	sub.w	sl, r9, r1
    3420:	f8da 1004 	ldr.w	r1, [sl, #4]
    3424:	f021 0103 	bic.w	r1, r1, #3
    3428:	448b      	add	fp, r1
    342a:	44b3      	add	fp, r6
    342c:	4558      	cmp	r0, fp
    342e:	f73f af6c 	bgt.w	330a <_realloc_r+0x7e>
    3432:	4657      	mov	r7, sl
    3434:	f8da 100c 	ldr.w	r1, [sl, #12]
    3438:	f857 0f08 	ldr.w	r0, [r7, #8]!
    343c:	1f32      	subs	r2, r6, #4
    343e:	2a24      	cmp	r2, #36	; 0x24
    3440:	60c1      	str	r1, [r0, #12]
    3442:	6088      	str	r0, [r1, #8]
    3444:	f200 80db 	bhi.w	35fe <_realloc_r+0x372>
    3448:	2a13      	cmp	r2, #19
    344a:	f240 80d6 	bls.w	35fa <_realloc_r+0x36e>
    344e:	6821      	ldr	r1, [r4, #0]
    3450:	f8ca 1008 	str.w	r1, [sl, #8]
    3454:	6861      	ldr	r1, [r4, #4]
    3456:	f8ca 100c 	str.w	r1, [sl, #12]
    345a:	2a1b      	cmp	r2, #27
    345c:	f200 80df 	bhi.w	361e <_realloc_r+0x392>
    3460:	3408      	adds	r4, #8
    3462:	f10a 0210 	add.w	r2, sl, #16
    3466:	6821      	ldr	r1, [r4, #0]
    3468:	6011      	str	r1, [r2, #0]
    346a:	6861      	ldr	r1, [r4, #4]
    346c:	6051      	str	r1, [r2, #4]
    346e:	68a1      	ldr	r1, [r4, #8]
    3470:	6091      	str	r1, [r2, #8]
    3472:	eb0a 0105 	add.w	r1, sl, r5
    3476:	ebab 0205 	sub.w	r2, fp, r5
    347a:	f042 0201 	orr.w	r2, r2, #1
    347e:	6099      	str	r1, [r3, #8]
    3480:	604a      	str	r2, [r1, #4]
    3482:	f8da 3004 	ldr.w	r3, [sl, #4]
    3486:	f003 0301 	and.w	r3, r3, #1
    348a:	432b      	orrs	r3, r5
    348c:	4640      	mov	r0, r8
    348e:	f8ca 3004 	str.w	r3, [sl, #4]
    3492:	f7ff fef5 	bl	3280 <__malloc_unlock>
    3496:	e76e      	b.n	3376 <_realloc_r+0xea>
    3498:	6823      	ldr	r3, [r4, #0]
    349a:	6003      	str	r3, [r0, #0]
    349c:	6863      	ldr	r3, [r4, #4]
    349e:	6043      	str	r3, [r0, #4]
    34a0:	2a1b      	cmp	r2, #27
    34a2:	d868      	bhi.n	3576 <_realloc_r+0x2ea>
    34a4:	f104 0208 	add.w	r2, r4, #8
    34a8:	f100 0308 	add.w	r3, r0, #8
    34ac:	e74a      	b.n	3344 <_realloc_r+0xb8>
    34ae:	eb09 0205 	add.w	r2, r9, r5
    34b2:	609a      	str	r2, [r3, #8]
    34b4:	ebac 0305 	sub.w	r3, ip, r5
    34b8:	f043 0301 	orr.w	r3, r3, #1
    34bc:	6053      	str	r3, [r2, #4]
    34be:	f854 3c04 	ldr.w	r3, [r4, #-4]
    34c2:	f003 0301 	and.w	r3, r3, #1
    34c6:	432b      	orrs	r3, r5
    34c8:	4640      	mov	r0, r8
    34ca:	f844 3c04 	str.w	r3, [r4, #-4]
    34ce:	f7ff fed7 	bl	3280 <__malloc_unlock>
    34d2:	4627      	mov	r7, r4
    34d4:	e74f      	b.n	3376 <_realloc_r+0xea>
    34d6:	f850 3c04 	ldr.w	r3, [r0, #-4]
    34da:	f023 0303 	bic.w	r3, r3, #3
    34de:	441e      	add	r6, r3
    34e0:	e751      	b.n	3386 <_realloc_r+0xfa>
    34e2:	4657      	mov	r7, sl
    34e4:	f8da 100c 	ldr.w	r1, [sl, #12]
    34e8:	f857 0f08 	ldr.w	r0, [r7, #8]!
    34ec:	1f32      	subs	r2, r6, #4
    34ee:	2a24      	cmp	r2, #36	; 0x24
    34f0:	60c1      	str	r1, [r0, #12]
    34f2:	6088      	str	r0, [r1, #8]
    34f4:	d84c      	bhi.n	3590 <_realloc_r+0x304>
    34f6:	2a13      	cmp	r2, #19
    34f8:	d948      	bls.n	358c <_realloc_r+0x300>
    34fa:	6821      	ldr	r1, [r4, #0]
    34fc:	f8ca 1008 	str.w	r1, [sl, #8]
    3500:	6861      	ldr	r1, [r4, #4]
    3502:	f8ca 100c 	str.w	r1, [sl, #12]
    3506:	2a1b      	cmp	r2, #27
    3508:	d856      	bhi.n	35b8 <_realloc_r+0x32c>
    350a:	3408      	adds	r4, #8
    350c:	f10a 0210 	add.w	r2, sl, #16
    3510:	461e      	mov	r6, r3
    3512:	6823      	ldr	r3, [r4, #0]
    3514:	6013      	str	r3, [r2, #0]
    3516:	6863      	ldr	r3, [r4, #4]
    3518:	6053      	str	r3, [r2, #4]
    351a:	68a3      	ldr	r3, [r4, #8]
    351c:	6093      	str	r3, [r2, #8]
    351e:	46d1      	mov	r9, sl
    3520:	463c      	mov	r4, r7
    3522:	e730      	b.n	3386 <_realloc_r+0xfa>
    3524:	4621      	mov	r1, r4
    3526:	f000 fa2d 	bl	3984 <memmove>
    352a:	e711      	b.n	3350 <_realloc_r+0xc4>
    352c:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
    3530:	4657      	mov	r7, sl
    3532:	60cb      	str	r3, [r1, #12]
    3534:	6099      	str	r1, [r3, #8]
    3536:	f857 1f08 	ldr.w	r1, [r7, #8]!
    353a:	f8da 300c 	ldr.w	r3, [sl, #12]
    353e:	60cb      	str	r3, [r1, #12]
    3540:	1f32      	subs	r2, r6, #4
    3542:	2a24      	cmp	r2, #36	; 0x24
    3544:	6099      	str	r1, [r3, #8]
    3546:	d82d      	bhi.n	35a4 <_realloc_r+0x318>
    3548:	2a13      	cmp	r2, #19
    354a:	d929      	bls.n	35a0 <_realloc_r+0x314>
    354c:	6823      	ldr	r3, [r4, #0]
    354e:	f8ca 3008 	str.w	r3, [sl, #8]
    3552:	6863      	ldr	r3, [r4, #4]
    3554:	f8ca 300c 	str.w	r3, [sl, #12]
    3558:	2a1b      	cmp	r2, #27
    355a:	d842      	bhi.n	35e2 <_realloc_r+0x356>
    355c:	3408      	adds	r4, #8
    355e:	f10a 0310 	add.w	r3, sl, #16
    3562:	6822      	ldr	r2, [r4, #0]
    3564:	601a      	str	r2, [r3, #0]
    3566:	6862      	ldr	r2, [r4, #4]
    3568:	605a      	str	r2, [r3, #4]
    356a:	68a2      	ldr	r2, [r4, #8]
    356c:	609a      	str	r2, [r3, #8]
    356e:	4666      	mov	r6, ip
    3570:	46d1      	mov	r9, sl
    3572:	463c      	mov	r4, r7
    3574:	e707      	b.n	3386 <_realloc_r+0xfa>
    3576:	68a3      	ldr	r3, [r4, #8]
    3578:	6083      	str	r3, [r0, #8]
    357a:	68e3      	ldr	r3, [r4, #12]
    357c:	60c3      	str	r3, [r0, #12]
    357e:	2a24      	cmp	r2, #36	; 0x24
    3580:	d026      	beq.n	35d0 <_realloc_r+0x344>
    3582:	f104 0210 	add.w	r2, r4, #16
    3586:	f100 0310 	add.w	r3, r0, #16
    358a:	e6db      	b.n	3344 <_realloc_r+0xb8>
    358c:	463a      	mov	r2, r7
    358e:	e7bf      	b.n	3510 <_realloc_r+0x284>
    3590:	4621      	mov	r1, r4
    3592:	4638      	mov	r0, r7
    3594:	461e      	mov	r6, r3
    3596:	46d1      	mov	r9, sl
    3598:	f000 f9f4 	bl	3984 <memmove>
    359c:	463c      	mov	r4, r7
    359e:	e6f2      	b.n	3386 <_realloc_r+0xfa>
    35a0:	463b      	mov	r3, r7
    35a2:	e7de      	b.n	3562 <_realloc_r+0x2d6>
    35a4:	4621      	mov	r1, r4
    35a6:	4638      	mov	r0, r7
    35a8:	4666      	mov	r6, ip
    35aa:	46d1      	mov	r9, sl
    35ac:	f000 f9ea 	bl	3984 <memmove>
    35b0:	463c      	mov	r4, r7
    35b2:	e6e8      	b.n	3386 <_realloc_r+0xfa>
    35b4:	20001120 	.word	0x20001120
    35b8:	68a1      	ldr	r1, [r4, #8]
    35ba:	f8ca 1010 	str.w	r1, [sl, #16]
    35be:	68e1      	ldr	r1, [r4, #12]
    35c0:	f8ca 1014 	str.w	r1, [sl, #20]
    35c4:	2a24      	cmp	r2, #36	; 0x24
    35c6:	d020      	beq.n	360a <_realloc_r+0x37e>
    35c8:	3410      	adds	r4, #16
    35ca:	f10a 0218 	add.w	r2, sl, #24
    35ce:	e79f      	b.n	3510 <_realloc_r+0x284>
    35d0:	6923      	ldr	r3, [r4, #16]
    35d2:	6103      	str	r3, [r0, #16]
    35d4:	6961      	ldr	r1, [r4, #20]
    35d6:	6141      	str	r1, [r0, #20]
    35d8:	f104 0218 	add.w	r2, r4, #24
    35dc:	f100 0318 	add.w	r3, r0, #24
    35e0:	e6b0      	b.n	3344 <_realloc_r+0xb8>
    35e2:	68a3      	ldr	r3, [r4, #8]
    35e4:	f8ca 3010 	str.w	r3, [sl, #16]
    35e8:	68e3      	ldr	r3, [r4, #12]
    35ea:	f8ca 3014 	str.w	r3, [sl, #20]
    35ee:	2a24      	cmp	r2, #36	; 0x24
    35f0:	d021      	beq.n	3636 <_realloc_r+0x3aa>
    35f2:	3410      	adds	r4, #16
    35f4:	f10a 0318 	add.w	r3, sl, #24
    35f8:	e7b3      	b.n	3562 <_realloc_r+0x2d6>
    35fa:	463a      	mov	r2, r7
    35fc:	e733      	b.n	3466 <_realloc_r+0x1da>
    35fe:	4621      	mov	r1, r4
    3600:	4638      	mov	r0, r7
    3602:	f000 f9bf 	bl	3984 <memmove>
    3606:	4b16      	ldr	r3, [pc, #88]	; (3660 <_realloc_r+0x3d4>)
    3608:	e733      	b.n	3472 <_realloc_r+0x1e6>
    360a:	6922      	ldr	r2, [r4, #16]
    360c:	f8ca 2018 	str.w	r2, [sl, #24]
    3610:	6962      	ldr	r2, [r4, #20]
    3612:	f8ca 201c 	str.w	r2, [sl, #28]
    3616:	3418      	adds	r4, #24
    3618:	f10a 0220 	add.w	r2, sl, #32
    361c:	e778      	b.n	3510 <_realloc_r+0x284>
    361e:	68a1      	ldr	r1, [r4, #8]
    3620:	f8ca 1010 	str.w	r1, [sl, #16]
    3624:	68e1      	ldr	r1, [r4, #12]
    3626:	f8ca 1014 	str.w	r1, [sl, #20]
    362a:	2a24      	cmp	r2, #36	; 0x24
    362c:	d00d      	beq.n	364a <_realloc_r+0x3be>
    362e:	3410      	adds	r4, #16
    3630:	f10a 0218 	add.w	r2, sl, #24
    3634:	e717      	b.n	3466 <_realloc_r+0x1da>
    3636:	6923      	ldr	r3, [r4, #16]
    3638:	f8ca 3018 	str.w	r3, [sl, #24]
    363c:	6963      	ldr	r3, [r4, #20]
    363e:	f8ca 301c 	str.w	r3, [sl, #28]
    3642:	3418      	adds	r4, #24
    3644:	f10a 0320 	add.w	r3, sl, #32
    3648:	e78b      	b.n	3562 <_realloc_r+0x2d6>
    364a:	6922      	ldr	r2, [r4, #16]
    364c:	f8ca 2018 	str.w	r2, [sl, #24]
    3650:	6962      	ldr	r2, [r4, #20]
    3652:	f8ca 201c 	str.w	r2, [sl, #28]
    3656:	3418      	adds	r4, #24
    3658:	f10a 0220 	add.w	r2, sl, #32
    365c:	e703      	b.n	3466 <_realloc_r+0x1da>
    365e:	bf00      	nop
    3660:	20001120 	.word	0x20001120

00003664 <stdio_exit_handler>:
    3664:	4a02      	ldr	r2, [pc, #8]	; (3670 <stdio_exit_handler+0xc>)
    3666:	4903      	ldr	r1, [pc, #12]	; (3674 <stdio_exit_handler+0x10>)
    3668:	4803      	ldr	r0, [pc, #12]	; (3678 <stdio_exit_handler+0x14>)
    366a:	f000 b8bb 	b.w	37e4 <_fwalk_sglue>
    366e:	bf00      	nop
    3670:	20001530 	.word	0x20001530
    3674:	0000670d 	.word	0x0000670d
    3678:	20000db8 	.word	0x20000db8

0000367c <cleanup_stdio>:
    367c:	4b0c      	ldr	r3, [pc, #48]	; (36b0 <cleanup_stdio+0x34>)
    367e:	6841      	ldr	r1, [r0, #4]
    3680:	4299      	cmp	r1, r3
    3682:	b510      	push	{r4, lr}
    3684:	4604      	mov	r4, r0
    3686:	d001      	beq.n	368c <cleanup_stdio+0x10>
    3688:	f003 f840 	bl	670c <_fclose_r>
    368c:	68a1      	ldr	r1, [r4, #8]
    368e:	4b09      	ldr	r3, [pc, #36]	; (36b4 <cleanup_stdio+0x38>)
    3690:	4299      	cmp	r1, r3
    3692:	d002      	beq.n	369a <cleanup_stdio+0x1e>
    3694:	4620      	mov	r0, r4
    3696:	f003 f839 	bl	670c <_fclose_r>
    369a:	68e1      	ldr	r1, [r4, #12]
    369c:	4b06      	ldr	r3, [pc, #24]	; (36b8 <cleanup_stdio+0x3c>)
    369e:	4299      	cmp	r1, r3
    36a0:	d004      	beq.n	36ac <cleanup_stdio+0x30>
    36a2:	4620      	mov	r0, r4
    36a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    36a8:	f003 b830 	b.w	670c <_fclose_r>
    36ac:	bd10      	pop	{r4, pc}
    36ae:	bf00      	nop
    36b0:	20002030 	.word	0x20002030
    36b4:	20002098 	.word	0x20002098
    36b8:	20002100 	.word	0x20002100

000036bc <global_stdio_init.part.0>:
    36bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    36c0:	4c2a      	ldr	r4, [pc, #168]	; (376c <global_stdio_init.part.0+0xb0>)
    36c2:	4b2b      	ldr	r3, [pc, #172]	; (3770 <global_stdio_init.part.0+0xb4>)
    36c4:	482b      	ldr	r0, [pc, #172]	; (3774 <global_stdio_init.part.0+0xb8>)
    36c6:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 3788 <global_stdio_init.part.0+0xcc>
    36ca:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 378c <global_stdio_init.part.0+0xd0>
    36ce:	4f2a      	ldr	r7, [pc, #168]	; (3778 <global_stdio_init.part.0+0xbc>)
    36d0:	6018      	str	r0, [r3, #0]
    36d2:	2500      	movs	r5, #0
    36d4:	2304      	movs	r3, #4
    36d6:	2208      	movs	r2, #8
    36d8:	4629      	mov	r1, r5
    36da:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    36de:	4e27      	ldr	r6, [pc, #156]	; (377c <global_stdio_init.part.0+0xc0>)
    36e0:	6665      	str	r5, [r4, #100]	; 0x64
    36e2:	e9c4 5302 	strd	r5, r3, [r4, #8]
    36e6:	e9c4 5500 	strd	r5, r5, [r4]
    36ea:	e9c4 5504 	strd	r5, r5, [r4, #16]
    36ee:	61a5      	str	r5, [r4, #24]
    36f0:	f000 f9c4 	bl	3a7c <memset>
    36f4:	4b22      	ldr	r3, [pc, #136]	; (3780 <global_stdio_init.part.0+0xc4>)
    36f6:	6763      	str	r3, [r4, #116]	; 0x74
    36f8:	2208      	movs	r2, #8
    36fa:	4629      	mov	r1, r5
    36fc:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    3700:	e9c4 4907 	strd	r4, r9, [r4, #28]
    3704:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
    3708:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
    370c:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
    3710:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
    3714:	6725      	str	r5, [r4, #112]	; 0x70
    3716:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    371a:	62e6      	str	r6, [r4, #44]	; 0x2c
    371c:	f000 f9ae 	bl	3a7c <memset>
    3720:	4b18      	ldr	r3, [pc, #96]	; (3784 <global_stdio_init.part.0+0xc8>)
    3722:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    3726:	4629      	mov	r1, r5
    3728:	f104 0368 	add.w	r3, r4, #104	; 0x68
    372c:	2208      	movs	r2, #8
    372e:	f504 7096 	add.w	r0, r4, #300	; 0x12c
    3732:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    3736:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
    373a:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
    373e:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
    3742:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
    3746:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    374a:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
    374e:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    3752:	f000 f993 	bl	3a7c <memset>
    3756:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    375a:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
    375e:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
    3762:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    3766:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    376a:	bf00      	nop
    376c:	20002030 	.word	0x20002030
    3770:	20002168 	.word	0x20002168
    3774:	00003665 	.word	0x00003665
    3778:	00003891 	.word	0x00003891
    377c:	000038b1 	.word	0x000038b1
    3780:	00010009 	.word	0x00010009
    3784:	00020012 	.word	0x00020012
    3788:	0000382d 	.word	0x0000382d
    378c:	00003851 	.word	0x00003851

00003790 <__sinit>:
    3790:	b510      	push	{r4, lr}
    3792:	4604      	mov	r4, r0
    3794:	480a      	ldr	r0, [pc, #40]	; (37c0 <__sinit+0x30>)
    3796:	f000 fae7 	bl	3d68 <__retarget_lock_acquire_recursive>
    379a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    379c:	b923      	cbnz	r3, 37a8 <__sinit+0x18>
    379e:	4b09      	ldr	r3, [pc, #36]	; (37c4 <__sinit+0x34>)
    37a0:	4a09      	ldr	r2, [pc, #36]	; (37c8 <__sinit+0x38>)
    37a2:	681b      	ldr	r3, [r3, #0]
    37a4:	6362      	str	r2, [r4, #52]	; 0x34
    37a6:	b123      	cbz	r3, 37b2 <__sinit+0x22>
    37a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    37ac:	4804      	ldr	r0, [pc, #16]	; (37c0 <__sinit+0x30>)
    37ae:	f000 badd 	b.w	3d6c <__retarget_lock_release_recursive>
    37b2:	f7ff ff83 	bl	36bc <global_stdio_init.part.0>
    37b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    37ba:	4801      	ldr	r0, [pc, #4]	; (37c0 <__sinit+0x30>)
    37bc:	f000 bad6 	b.w	3d6c <__retarget_lock_release_recursive>
    37c0:	20001ff8 	.word	0x20001ff8
    37c4:	20002168 	.word	0x20002168
    37c8:	0000367d 	.word	0x0000367d

000037cc <__sfp_lock_acquire>:
    37cc:	4801      	ldr	r0, [pc, #4]	; (37d4 <__sfp_lock_acquire+0x8>)
    37ce:	f000 bacb 	b.w	3d68 <__retarget_lock_acquire_recursive>
    37d2:	bf00      	nop
    37d4:	20001ff8 	.word	0x20001ff8

000037d8 <__sfp_lock_release>:
    37d8:	4801      	ldr	r0, [pc, #4]	; (37e0 <__sfp_lock_release+0x8>)
    37da:	f000 bac7 	b.w	3d6c <__retarget_lock_release_recursive>
    37de:	bf00      	nop
    37e0:	20001ff8 	.word	0x20001ff8

000037e4 <_fwalk_sglue>:
    37e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    37e8:	4680      	mov	r8, r0
    37ea:	460f      	mov	r7, r1
    37ec:	4616      	mov	r6, r2
    37ee:	f04f 0900 	mov.w	r9, #0
    37f2:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
    37f6:	3d01      	subs	r5, #1
    37f8:	d411      	bmi.n	381e <_fwalk_sglue+0x3a>
    37fa:	89a3      	ldrh	r3, [r4, #12]
    37fc:	2b01      	cmp	r3, #1
    37fe:	f105 35ff 	add.w	r5, r5, #4294967295
    3802:	d908      	bls.n	3816 <_fwalk_sglue+0x32>
    3804:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    3808:	3301      	adds	r3, #1
    380a:	4621      	mov	r1, r4
    380c:	d003      	beq.n	3816 <_fwalk_sglue+0x32>
    380e:	4640      	mov	r0, r8
    3810:	47b8      	blx	r7
    3812:	ea49 0900 	orr.w	r9, r9, r0
    3816:	1c6b      	adds	r3, r5, #1
    3818:	f104 0468 	add.w	r4, r4, #104	; 0x68
    381c:	d1ed      	bne.n	37fa <_fwalk_sglue+0x16>
    381e:	6836      	ldr	r6, [r6, #0]
    3820:	2e00      	cmp	r6, #0
    3822:	d1e6      	bne.n	37f2 <_fwalk_sglue+0xe>
    3824:	4648      	mov	r0, r9
    3826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    382a:	bf00      	nop

0000382c <__sread>:
    382c:	b510      	push	{r4, lr}
    382e:	460c      	mov	r4, r1
    3830:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    3834:	f000 fa2c 	bl	3c90 <_read_r>
    3838:	2800      	cmp	r0, #0
    383a:	db03      	blt.n	3844 <__sread+0x18>
    383c:	6d23      	ldr	r3, [r4, #80]	; 0x50
    383e:	4403      	add	r3, r0
    3840:	6523      	str	r3, [r4, #80]	; 0x50
    3842:	bd10      	pop	{r4, pc}
    3844:	89a3      	ldrh	r3, [r4, #12]
    3846:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    384a:	81a3      	strh	r3, [r4, #12]
    384c:	bd10      	pop	{r4, pc}
    384e:	bf00      	nop

00003850 <__swrite>:
    3850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3854:	460c      	mov	r4, r1
    3856:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
    385a:	461f      	mov	r7, r3
    385c:	05cb      	lsls	r3, r1, #23
    385e:	4605      	mov	r5, r0
    3860:	4616      	mov	r6, r2
    3862:	d40b      	bmi.n	387c <__swrite+0x2c>
    3864:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
    3868:	81a1      	strh	r1, [r4, #12]
    386a:	463b      	mov	r3, r7
    386c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    3870:	4632      	mov	r2, r6
    3872:	4628      	mov	r0, r5
    3874:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3878:	f000 ba32 	b.w	3ce0 <_write_r>
    387c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    3880:	2302      	movs	r3, #2
    3882:	2200      	movs	r2, #0
    3884:	f000 f9ee 	bl	3c64 <_lseek_r>
    3888:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
    388c:	e7ea      	b.n	3864 <__swrite+0x14>
    388e:	bf00      	nop

00003890 <__sseek>:
    3890:	b510      	push	{r4, lr}
    3892:	460c      	mov	r4, r1
    3894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    3898:	f000 f9e4 	bl	3c64 <_lseek_r>
    389c:	89a3      	ldrh	r3, [r4, #12]
    389e:	1c42      	adds	r2, r0, #1
    38a0:	bf0e      	itee	eq
    38a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    38a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    38aa:	6520      	strne	r0, [r4, #80]	; 0x50
    38ac:	81a3      	strh	r3, [r4, #12]
    38ae:	bd10      	pop	{r4, pc}

000038b0 <__sclose>:
    38b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    38b4:	f000 b9c4 	b.w	3c40 <_close_r>

000038b8 <_vdprintf_r>:
    38b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    38ba:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
    38be:	af04      	add	r7, sp, #16
    38c0:	9300      	str	r3, [sp, #0]
    38c2:	4613      	mov	r3, r2
    38c4:	f44f 7200 	mov.w	r2, #512	; 0x200
    38c8:	460e      	mov	r6, r1
    38ca:	9203      	str	r2, [sp, #12]
    38cc:	4639      	mov	r1, r7
    38ce:	aa03      	add	r2, sp, #12
    38d0:	4605      	mov	r5, r0
    38d2:	f000 f825 	bl	3920 <_vasnprintf_r>
    38d6:	b188      	cbz	r0, 38fc <_vdprintf_r+0x44>
    38d8:	4604      	mov	r4, r0
    38da:	4602      	mov	r2, r0
    38dc:	9b03      	ldr	r3, [sp, #12]
    38de:	4631      	mov	r1, r6
    38e0:	4628      	mov	r0, r5
    38e2:	f000 f9fd 	bl	3ce0 <_write_r>
    38e6:	42bc      	cmp	r4, r7
    38e8:	9003      	str	r0, [sp, #12]
    38ea:	d004      	beq.n	38f6 <_vdprintf_r+0x3e>
    38ec:	4628      	mov	r0, r5
    38ee:	4621      	mov	r1, r4
    38f0:	f000 fc84 	bl	41fc <_free_r>
    38f4:	9803      	ldr	r0, [sp, #12]
    38f6:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
    38fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    38fc:	f04f 30ff 	mov.w	r0, #4294967295
    3900:	e7f9      	b.n	38f6 <_vdprintf_r+0x3e>
    3902:	bf00      	nop

00003904 <vdprintf>:
    3904:	b410      	push	{r4}
    3906:	4c05      	ldr	r4, [pc, #20]	; (391c <vdprintf+0x18>)
    3908:	4684      	mov	ip, r0
    390a:	4613      	mov	r3, r2
    390c:	6820      	ldr	r0, [r4, #0]
    390e:	f85d 4b04 	ldr.w	r4, [sp], #4
    3912:	460a      	mov	r2, r1
    3914:	4661      	mov	r1, ip
    3916:	f7ff bfcf 	b.w	38b8 <_vdprintf_r>
    391a:	bf00      	nop
    391c:	2000153c 	.word	0x2000153c

00003920 <_vasnprintf_r>:
    3920:	b530      	push	{r4, r5, lr}
    3922:	6814      	ldr	r4, [r2, #0]
    3924:	4615      	mov	r5, r2
    3926:	b09b      	sub	sp, #108	; 0x6c
    3928:	461a      	mov	r2, r3
    392a:	b109      	cbz	r1, 3930 <_vasnprintf_r+0x10>
    392c:	2c00      	cmp	r4, #0
    392e:	d119      	bne.n	3964 <_vasnprintf_r+0x44>
    3930:	2100      	movs	r1, #0
    3932:	f44f 7322 	mov.w	r3, #648	; 0x288
    3936:	f8ad 300c 	strh.w	r3, [sp, #12]
    393a:	9100      	str	r1, [sp, #0]
    393c:	9104      	str	r1, [sp, #16]
    393e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    3942:	9102      	str	r1, [sp, #8]
    3944:	9105      	str	r1, [sp, #20]
    3946:	f8ad 300e 	strh.w	r3, [sp, #14]
    394a:	4669      	mov	r1, sp
    394c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    394e:	f001 f93b 	bl	4bc8 <_svfprintf_r>
    3952:	2800      	cmp	r0, #0
    3954:	db13      	blt.n	397e <_vasnprintf_r+0x5e>
    3956:	9b00      	ldr	r3, [sp, #0]
    3958:	6028      	str	r0, [r5, #0]
    395a:	2200      	movs	r2, #0
    395c:	701a      	strb	r2, [r3, #0]
    395e:	9804      	ldr	r0, [sp, #16]
    3960:	b01b      	add	sp, #108	; 0x6c
    3962:	bd30      	pop	{r4, r5, pc}
    3964:	f44f 63c1 	mov.w	r3, #1544	; 0x608
    3968:	9100      	str	r1, [sp, #0]
    396a:	9104      	str	r1, [sp, #16]
    396c:	f8ad 300c 	strh.w	r3, [sp, #12]
    3970:	4621      	mov	r1, r4
    3972:	dae4      	bge.n	393e <_vasnprintf_r+0x1e>
    3974:	238b      	movs	r3, #139	; 0x8b
    3976:	6003      	str	r3, [r0, #0]
    3978:	2000      	movs	r0, #0
    397a:	b01b      	add	sp, #108	; 0x6c
    397c:	bd30      	pop	{r4, r5, pc}
    397e:	2000      	movs	r0, #0
    3980:	e7ee      	b.n	3960 <_vasnprintf_r+0x40>
    3982:	bf00      	nop

00003984 <memmove>:
    3984:	4288      	cmp	r0, r1
    3986:	d90d      	bls.n	39a4 <memmove+0x20>
    3988:	188b      	adds	r3, r1, r2
    398a:	4283      	cmp	r3, r0
    398c:	d90a      	bls.n	39a4 <memmove+0x20>
    398e:	eb00 0c02 	add.w	ip, r0, r2
    3992:	b1ba      	cbz	r2, 39c4 <memmove+0x40>
    3994:	4662      	mov	r2, ip
    3996:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
    399a:	f802 cd01 	strb.w	ip, [r2, #-1]!
    399e:	4299      	cmp	r1, r3
    39a0:	d1f9      	bne.n	3996 <memmove+0x12>
    39a2:	4770      	bx	lr
    39a4:	2a0f      	cmp	r2, #15
    39a6:	d80e      	bhi.n	39c6 <memmove+0x42>
    39a8:	4603      	mov	r3, r0
    39aa:	f102 3cff 	add.w	ip, r2, #4294967295
    39ae:	b14a      	cbz	r2, 39c4 <memmove+0x40>
    39b0:	f10c 0c01 	add.w	ip, ip, #1
    39b4:	3b01      	subs	r3, #1
    39b6:	448c      	add	ip, r1
    39b8:	f811 2b01 	ldrb.w	r2, [r1], #1
    39bc:	f803 2f01 	strb.w	r2, [r3, #1]!
    39c0:	4561      	cmp	r1, ip
    39c2:	d1f9      	bne.n	39b8 <memmove+0x34>
    39c4:	4770      	bx	lr
    39c6:	ea40 0301 	orr.w	r3, r0, r1
    39ca:	079b      	lsls	r3, r3, #30
    39cc:	d150      	bne.n	3a70 <memmove+0xec>
    39ce:	f1a2 0310 	sub.w	r3, r2, #16
    39d2:	b570      	push	{r4, r5, r6, lr}
    39d4:	f101 0c20 	add.w	ip, r1, #32
    39d8:	f023 050f 	bic.w	r5, r3, #15
    39dc:	f101 0e10 	add.w	lr, r1, #16
    39e0:	f100 0410 	add.w	r4, r0, #16
    39e4:	44ac      	add	ip, r5
    39e6:	091b      	lsrs	r3, r3, #4
    39e8:	f85e 5c10 	ldr.w	r5, [lr, #-16]
    39ec:	f844 5c10 	str.w	r5, [r4, #-16]
    39f0:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
    39f4:	f844 5c0c 	str.w	r5, [r4, #-12]
    39f8:	f85e 5c08 	ldr.w	r5, [lr, #-8]
    39fc:	f844 5c08 	str.w	r5, [r4, #-8]
    3a00:	f85e 5c04 	ldr.w	r5, [lr, #-4]
    3a04:	f844 5c04 	str.w	r5, [r4, #-4]
    3a08:	f10e 0e10 	add.w	lr, lr, #16
    3a0c:	45e6      	cmp	lr, ip
    3a0e:	f104 0410 	add.w	r4, r4, #16
    3a12:	d1e9      	bne.n	39e8 <memmove+0x64>
    3a14:	3301      	adds	r3, #1
    3a16:	f012 0f0c 	tst.w	r2, #12
    3a1a:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    3a1e:	f002 040f 	and.w	r4, r2, #15
    3a22:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    3a26:	d027      	beq.n	3a78 <memmove+0xf4>
    3a28:	3c04      	subs	r4, #4
    3a2a:	f024 0603 	bic.w	r6, r4, #3
    3a2e:	ea4f 0c94 	mov.w	ip, r4, lsr #2
    3a32:	441e      	add	r6, r3
    3a34:	1f1c      	subs	r4, r3, #4
    3a36:	468e      	mov	lr, r1
    3a38:	f85e 5b04 	ldr.w	r5, [lr], #4
    3a3c:	f844 5f04 	str.w	r5, [r4, #4]!
    3a40:	42b4      	cmp	r4, r6
    3a42:	d1f9      	bne.n	3a38 <memmove+0xb4>
    3a44:	f10c 0401 	add.w	r4, ip, #1
    3a48:	f002 0203 	and.w	r2, r2, #3
    3a4c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    3a50:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    3a54:	f102 3cff 	add.w	ip, r2, #4294967295
    3a58:	b14a      	cbz	r2, 3a6e <memmove+0xea>
    3a5a:	f10c 0c01 	add.w	ip, ip, #1
    3a5e:	3b01      	subs	r3, #1
    3a60:	448c      	add	ip, r1
    3a62:	f811 2b01 	ldrb.w	r2, [r1], #1
    3a66:	f803 2f01 	strb.w	r2, [r3, #1]!
    3a6a:	4561      	cmp	r1, ip
    3a6c:	d1f9      	bne.n	3a62 <memmove+0xde>
    3a6e:	bd70      	pop	{r4, r5, r6, pc}
    3a70:	f102 3cff 	add.w	ip, r2, #4294967295
    3a74:	4603      	mov	r3, r0
    3a76:	e79b      	b.n	39b0 <memmove+0x2c>
    3a78:	4622      	mov	r2, r4
    3a7a:	e7eb      	b.n	3a54 <memmove+0xd0>

00003a7c <memset>:
    3a7c:	0783      	lsls	r3, r0, #30
    3a7e:	b530      	push	{r4, r5, lr}
    3a80:	d048      	beq.n	3b14 <memset+0x98>
    3a82:	1e54      	subs	r4, r2, #1
    3a84:	2a00      	cmp	r2, #0
    3a86:	d03f      	beq.n	3b08 <memset+0x8c>
    3a88:	b2ca      	uxtb	r2, r1
    3a8a:	4603      	mov	r3, r0
    3a8c:	e001      	b.n	3a92 <memset+0x16>
    3a8e:	3c01      	subs	r4, #1
    3a90:	d33a      	bcc.n	3b08 <memset+0x8c>
    3a92:	f803 2b01 	strb.w	r2, [r3], #1
    3a96:	079d      	lsls	r5, r3, #30
    3a98:	d1f9      	bne.n	3a8e <memset+0x12>
    3a9a:	2c03      	cmp	r4, #3
    3a9c:	d92d      	bls.n	3afa <memset+0x7e>
    3a9e:	b2cd      	uxtb	r5, r1
    3aa0:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    3aa4:	2c0f      	cmp	r4, #15
    3aa6:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    3aaa:	d936      	bls.n	3b1a <memset+0x9e>
    3aac:	f1a4 0210 	sub.w	r2, r4, #16
    3ab0:	f022 0c0f 	bic.w	ip, r2, #15
    3ab4:	f103 0e20 	add.w	lr, r3, #32
    3ab8:	44e6      	add	lr, ip
    3aba:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    3abe:	f103 0210 	add.w	r2, r3, #16
    3ac2:	e942 5504 	strd	r5, r5, [r2, #-16]
    3ac6:	e942 5502 	strd	r5, r5, [r2, #-8]
    3aca:	3210      	adds	r2, #16
    3acc:	4572      	cmp	r2, lr
    3ace:	d1f8      	bne.n	3ac2 <memset+0x46>
    3ad0:	f10c 0201 	add.w	r2, ip, #1
    3ad4:	f014 0f0c 	tst.w	r4, #12
    3ad8:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    3adc:	f004 0c0f 	and.w	ip, r4, #15
    3ae0:	d013      	beq.n	3b0a <memset+0x8e>
    3ae2:	f1ac 0304 	sub.w	r3, ip, #4
    3ae6:	f023 0303 	bic.w	r3, r3, #3
    3aea:	3304      	adds	r3, #4
    3aec:	4413      	add	r3, r2
    3aee:	f842 5b04 	str.w	r5, [r2], #4
    3af2:	4293      	cmp	r3, r2
    3af4:	d1fb      	bne.n	3aee <memset+0x72>
    3af6:	f00c 0403 	and.w	r4, ip, #3
    3afa:	b12c      	cbz	r4, 3b08 <memset+0x8c>
    3afc:	b2c9      	uxtb	r1, r1
    3afe:	441c      	add	r4, r3
    3b00:	f803 1b01 	strb.w	r1, [r3], #1
    3b04:	429c      	cmp	r4, r3
    3b06:	d1fb      	bne.n	3b00 <memset+0x84>
    3b08:	bd30      	pop	{r4, r5, pc}
    3b0a:	4664      	mov	r4, ip
    3b0c:	4613      	mov	r3, r2
    3b0e:	2c00      	cmp	r4, #0
    3b10:	d1f4      	bne.n	3afc <memset+0x80>
    3b12:	e7f9      	b.n	3b08 <memset+0x8c>
    3b14:	4603      	mov	r3, r0
    3b16:	4614      	mov	r4, r2
    3b18:	e7bf      	b.n	3a9a <memset+0x1e>
    3b1a:	461a      	mov	r2, r3
    3b1c:	46a4      	mov	ip, r4
    3b1e:	e7e0      	b.n	3ae2 <memset+0x66>

00003b20 <strcasecmp>:
    3b20:	b430      	push	{r4, r5}
    3b22:	4d13      	ldr	r5, [pc, #76]	; (3b70 <strcasecmp+0x50>)
    3b24:	f810 4b01 	ldrb.w	r4, [r0], #1
    3b28:	5d2b      	ldrb	r3, [r5, r4]
    3b2a:	f003 0303 	and.w	r3, r3, #3
    3b2e:	2b01      	cmp	r3, #1
    3b30:	f811 3b01 	ldrb.w	r3, [r1], #1
    3b34:	f815 c003 	ldrb.w	ip, [r5, r3]
    3b38:	f00c 0c03 	and.w	ip, ip, #3
    3b3c:	4622      	mov	r2, r4
    3b3e:	bf08      	it	eq
    3b40:	f104 0220 	addeq.w	r2, r4, #32
    3b44:	f1bc 0f01 	cmp.w	ip, #1
    3b48:	461c      	mov	r4, r3
    3b4a:	d006      	beq.n	3b5a <strcasecmp+0x3a>
    3b4c:	1ad2      	subs	r2, r2, r3
    3b4e:	d10a      	bne.n	3b66 <strcasecmp+0x46>
    3b50:	2b00      	cmp	r3, #0
    3b52:	d1e7      	bne.n	3b24 <strcasecmp+0x4>
    3b54:	4620      	mov	r0, r4
    3b56:	bc30      	pop	{r4, r5}
    3b58:	4770      	bx	lr
    3b5a:	3320      	adds	r3, #32
    3b5c:	1ad4      	subs	r4, r2, r3
    3b5e:	d0e1      	beq.n	3b24 <strcasecmp+0x4>
    3b60:	4620      	mov	r0, r4
    3b62:	bc30      	pop	{r4, r5}
    3b64:	4770      	bx	lr
    3b66:	4614      	mov	r4, r2
    3b68:	4620      	mov	r0, r4
    3b6a:	bc30      	pop	{r4, r5}
    3b6c:	4770      	bx	lr
    3b6e:	bf00      	nop
    3b70:	200004b1 	.word	0x200004b1

00003b74 <strncasecmp>:
    3b74:	b33a      	cbz	r2, 3bc6 <strncasecmp+0x52>
    3b76:	b530      	push	{r4, r5, lr}
    3b78:	4402      	add	r2, r0
    3b7a:	4d14      	ldr	r5, [pc, #80]	; (3bcc <strncasecmp+0x58>)
    3b7c:	4604      	mov	r4, r0
    3b7e:	e005      	b.n	3b8c <strncasecmp+0x18>
    3b80:	ebbc 0c03 	subs.w	ip, ip, r3
    3b84:	d11d      	bne.n	3bc2 <strncasecmp+0x4e>
    3b86:	b1cb      	cbz	r3, 3bbc <strncasecmp+0x48>
    3b88:	4294      	cmp	r4, r2
    3b8a:	d018      	beq.n	3bbe <strncasecmp+0x4a>
    3b8c:	f814 0b01 	ldrb.w	r0, [r4], #1
    3b90:	5c2b      	ldrb	r3, [r5, r0]
    3b92:	f003 0303 	and.w	r3, r3, #3
    3b96:	2b01      	cmp	r3, #1
    3b98:	f811 3b01 	ldrb.w	r3, [r1], #1
    3b9c:	f815 e003 	ldrb.w	lr, [r5, r3]
    3ba0:	f00e 0e03 	and.w	lr, lr, #3
    3ba4:	4684      	mov	ip, r0
    3ba6:	bf08      	it	eq
    3ba8:	f100 0c20 	addeq.w	ip, r0, #32
    3bac:	f1be 0f01 	cmp.w	lr, #1
    3bb0:	4618      	mov	r0, r3
    3bb2:	d1e5      	bne.n	3b80 <strncasecmp+0xc>
    3bb4:	3320      	adds	r3, #32
    3bb6:	ebbc 0003 	subs.w	r0, ip, r3
    3bba:	d0e5      	beq.n	3b88 <strncasecmp+0x14>
    3bbc:	bd30      	pop	{r4, r5, pc}
    3bbe:	2000      	movs	r0, #0
    3bc0:	bd30      	pop	{r4, r5, pc}
    3bc2:	4660      	mov	r0, ip
    3bc4:	bd30      	pop	{r4, r5, pc}
    3bc6:	4610      	mov	r0, r2
    3bc8:	4770      	bx	lr
    3bca:	bf00      	nop
    3bcc:	200004b1 	.word	0x200004b1

00003bd0 <strncpy>:
    3bd0:	ea40 0301 	orr.w	r3, r0, r1
    3bd4:	079b      	lsls	r3, r3, #30
    3bd6:	b530      	push	{r4, r5, lr}
    3bd8:	d101      	bne.n	3bde <strncpy+0xe>
    3bda:	2a03      	cmp	r2, #3
    3bdc:	d80f      	bhi.n	3bfe <strncpy+0x2e>
    3bde:	4684      	mov	ip, r0
    3be0:	f101 3eff 	add.w	lr, r1, #4294967295
    3be4:	e007      	b.n	3bf6 <strncpy+0x26>
    3be6:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    3bea:	f803 1b01 	strb.w	r1, [r3], #1
    3bee:	1e54      	subs	r4, r2, #1
    3bf0:	b1c1      	cbz	r1, 3c24 <strncpy+0x54>
    3bf2:	469c      	mov	ip, r3
    3bf4:	4622      	mov	r2, r4
    3bf6:	4663      	mov	r3, ip
    3bf8:	2a00      	cmp	r2, #0
    3bfa:	d1f4      	bne.n	3be6 <strncpy+0x16>
    3bfc:	bd30      	pop	{r4, r5, pc}
    3bfe:	460b      	mov	r3, r1
    3c00:	4684      	mov	ip, r0
    3c02:	4619      	mov	r1, r3
    3c04:	f853 5b04 	ldr.w	r5, [r3], #4
    3c08:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
    3c0c:	ea24 0405 	bic.w	r4, r4, r5
    3c10:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    3c14:	d1e4      	bne.n	3be0 <strncpy+0x10>
    3c16:	3a04      	subs	r2, #4
    3c18:	2a03      	cmp	r2, #3
    3c1a:	f84c 5b04 	str.w	r5, [ip], #4
    3c1e:	4619      	mov	r1, r3
    3c20:	d8ef      	bhi.n	3c02 <strncpy+0x32>
    3c22:	e7dd      	b.n	3be0 <strncpy+0x10>
    3c24:	4494      	add	ip, r2
    3c26:	2c00      	cmp	r4, #0
    3c28:	d0e8      	beq.n	3bfc <strncpy+0x2c>
    3c2a:	f803 1b01 	strb.w	r1, [r3], #1
    3c2e:	4563      	cmp	r3, ip
    3c30:	d1fb      	bne.n	3c2a <strncpy+0x5a>
    3c32:	bd30      	pop	{r4, r5, pc}

00003c34 <__locale_mb_cur_max>:
    3c34:	4b01      	ldr	r3, [pc, #4]	; (3c3c <__locale_mb_cur_max+0x8>)
    3c36:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
    3c3a:	4770      	bx	lr
    3c3c:	20000fb4 	.word	0x20000fb4

00003c40 <_close_r>:
    3c40:	b538      	push	{r3, r4, r5, lr}
    3c42:	4d07      	ldr	r5, [pc, #28]	; (3c60 <_close_r+0x20>)
    3c44:	2200      	movs	r2, #0
    3c46:	4604      	mov	r4, r0
    3c48:	4608      	mov	r0, r1
    3c4a:	602a      	str	r2, [r5, #0]
    3c4c:	f7fd fd2c 	bl	16a8 <_close>
    3c50:	1c43      	adds	r3, r0, #1
    3c52:	d000      	beq.n	3c56 <_close_r+0x16>
    3c54:	bd38      	pop	{r3, r4, r5, pc}
    3c56:	682b      	ldr	r3, [r5, #0]
    3c58:	2b00      	cmp	r3, #0
    3c5a:	d0fb      	beq.n	3c54 <_close_r+0x14>
    3c5c:	6023      	str	r3, [r4, #0]
    3c5e:	bd38      	pop	{r3, r4, r5, pc}
    3c60:	2000217c 	.word	0x2000217c

00003c64 <_lseek_r>:
    3c64:	b538      	push	{r3, r4, r5, lr}
    3c66:	460c      	mov	r4, r1
    3c68:	4d08      	ldr	r5, [pc, #32]	; (3c8c <_lseek_r+0x28>)
    3c6a:	4684      	mov	ip, r0
    3c6c:	4611      	mov	r1, r2
    3c6e:	4620      	mov	r0, r4
    3c70:	461a      	mov	r2, r3
    3c72:	2300      	movs	r3, #0
    3c74:	602b      	str	r3, [r5, #0]
    3c76:	4664      	mov	r4, ip
    3c78:	f7fd fd22 	bl	16c0 <_lseek>
    3c7c:	1c43      	adds	r3, r0, #1
    3c7e:	d000      	beq.n	3c82 <_lseek_r+0x1e>
    3c80:	bd38      	pop	{r3, r4, r5, pc}
    3c82:	682b      	ldr	r3, [r5, #0]
    3c84:	2b00      	cmp	r3, #0
    3c86:	d0fb      	beq.n	3c80 <_lseek_r+0x1c>
    3c88:	6023      	str	r3, [r4, #0]
    3c8a:	bd38      	pop	{r3, r4, r5, pc}
    3c8c:	2000217c 	.word	0x2000217c

00003c90 <_read_r>:
    3c90:	b538      	push	{r3, r4, r5, lr}
    3c92:	460c      	mov	r4, r1
    3c94:	4d08      	ldr	r5, [pc, #32]	; (3cb8 <_read_r+0x28>)
    3c96:	4684      	mov	ip, r0
    3c98:	4611      	mov	r1, r2
    3c9a:	4620      	mov	r0, r4
    3c9c:	461a      	mov	r2, r3
    3c9e:	2300      	movs	r3, #0
    3ca0:	602b      	str	r3, [r5, #0]
    3ca2:	4664      	mov	r4, ip
    3ca4:	f7fd fcfe 	bl	16a4 <_read>
    3ca8:	1c43      	adds	r3, r0, #1
    3caa:	d000      	beq.n	3cae <_read_r+0x1e>
    3cac:	bd38      	pop	{r3, r4, r5, pc}
    3cae:	682b      	ldr	r3, [r5, #0]
    3cb0:	2b00      	cmp	r3, #0
    3cb2:	d0fb      	beq.n	3cac <_read_r+0x1c>
    3cb4:	6023      	str	r3, [r4, #0]
    3cb6:	bd38      	pop	{r3, r4, r5, pc}
    3cb8:	2000217c 	.word	0x2000217c

00003cbc <_sbrk_r>:
    3cbc:	b538      	push	{r3, r4, r5, lr}
    3cbe:	4d07      	ldr	r5, [pc, #28]	; (3cdc <_sbrk_r+0x20>)
    3cc0:	2200      	movs	r2, #0
    3cc2:	4604      	mov	r4, r0
    3cc4:	4608      	mov	r0, r1
    3cc6:	602a      	str	r2, [r5, #0]
    3cc8:	f7fd fcd2 	bl	1670 <_sbrk>
    3ccc:	1c43      	adds	r3, r0, #1
    3cce:	d000      	beq.n	3cd2 <_sbrk_r+0x16>
    3cd0:	bd38      	pop	{r3, r4, r5, pc}
    3cd2:	682b      	ldr	r3, [r5, #0]
    3cd4:	2b00      	cmp	r3, #0
    3cd6:	d0fb      	beq.n	3cd0 <_sbrk_r+0x14>
    3cd8:	6023      	str	r3, [r4, #0]
    3cda:	bd38      	pop	{r3, r4, r5, pc}
    3cdc:	2000217c 	.word	0x2000217c

00003ce0 <_write_r>:
    3ce0:	b538      	push	{r3, r4, r5, lr}
    3ce2:	460c      	mov	r4, r1
    3ce4:	4d08      	ldr	r5, [pc, #32]	; (3d08 <_write_r+0x28>)
    3ce6:	4684      	mov	ip, r0
    3ce8:	4611      	mov	r1, r2
    3cea:	4620      	mov	r0, r4
    3cec:	461a      	mov	r2, r3
    3cee:	2300      	movs	r3, #0
    3cf0:	602b      	str	r3, [r5, #0]
    3cf2:	4664      	mov	r4, ip
    3cf4:	f7fd f942 	bl	f7c <_write>
    3cf8:	1c43      	adds	r3, r0, #1
    3cfa:	d000      	beq.n	3cfe <_write_r+0x1e>
    3cfc:	bd38      	pop	{r3, r4, r5, pc}
    3cfe:	682b      	ldr	r3, [r5, #0]
    3d00:	2b00      	cmp	r3, #0
    3d02:	d0fb      	beq.n	3cfc <_write_r+0x1c>
    3d04:	6023      	str	r3, [r4, #0]
    3d06:	bd38      	pop	{r3, r4, r5, pc}
    3d08:	2000217c 	.word	0x2000217c

00003d0c <__errno>:
    3d0c:	4b01      	ldr	r3, [pc, #4]	; (3d14 <__errno+0x8>)
    3d0e:	6818      	ldr	r0, [r3, #0]
    3d10:	4770      	bx	lr
    3d12:	bf00      	nop
    3d14:	2000153c 	.word	0x2000153c

00003d18 <__libc_init_array>:
    3d18:	b570      	push	{r4, r5, r6, lr}
    3d1a:	4e0d      	ldr	r6, [pc, #52]	; (3d50 <__libc_init_array+0x38>)
    3d1c:	4d0d      	ldr	r5, [pc, #52]	; (3d54 <__libc_init_array+0x3c>)
    3d1e:	1b76      	subs	r6, r6, r5
    3d20:	10b6      	asrs	r6, r6, #2
    3d22:	d006      	beq.n	3d32 <__libc_init_array+0x1a>
    3d24:	2400      	movs	r4, #0
    3d26:	f855 3b04 	ldr.w	r3, [r5], #4
    3d2a:	3401      	adds	r4, #1
    3d2c:	4798      	blx	r3
    3d2e:	42a6      	cmp	r6, r4
    3d30:	d1f9      	bne.n	3d26 <__libc_init_array+0xe>
    3d32:	4e09      	ldr	r6, [pc, #36]	; (3d58 <__libc_init_array+0x40>)
    3d34:	4d09      	ldr	r5, [pc, #36]	; (3d5c <__libc_init_array+0x44>)
    3d36:	1b76      	subs	r6, r6, r5
    3d38:	f005 fafe 	bl	9338 <___init_veneer>
    3d3c:	10b6      	asrs	r6, r6, #2
    3d3e:	d006      	beq.n	3d4e <__libc_init_array+0x36>
    3d40:	2400      	movs	r4, #0
    3d42:	f855 3b04 	ldr.w	r3, [r5], #4
    3d46:	3401      	adds	r4, #1
    3d48:	4798      	blx	r3
    3d4a:	42a6      	cmp	r6, r4
    3d4c:	d1f9      	bne.n	3d42 <__libc_init_array+0x2a>
    3d4e:	bd70      	pop	{r4, r5, r6, pc}
    3d50:	60001e80 	.word	0x60001e80
    3d54:	60001e80 	.word	0x60001e80
    3d58:	60001e84 	.word	0x60001e84
    3d5c:	60001e80 	.word	0x60001e80

00003d60 <__retarget_lock_init_recursive>:
    3d60:	4770      	bx	lr
    3d62:	bf00      	nop

00003d64 <__retarget_lock_close_recursive>:
    3d64:	4770      	bx	lr
    3d66:	bf00      	nop

00003d68 <__retarget_lock_acquire_recursive>:
    3d68:	4770      	bx	lr
    3d6a:	bf00      	nop

00003d6c <__retarget_lock_release_recursive>:
    3d6c:	4770      	bx	lr
    3d6e:	bf00      	nop
	...
    3d80:	eba2 0003 	sub.w	r0, r2, r3
    3d84:	4770      	bx	lr
    3d86:	bf00      	nop

00003d88 <strcmp>:
    3d88:	7802      	ldrb	r2, [r0, #0]
    3d8a:	780b      	ldrb	r3, [r1, #0]
    3d8c:	2a01      	cmp	r2, #1
    3d8e:	bf28      	it	cs
    3d90:	429a      	cmpcs	r2, r3
    3d92:	d1f5      	bne.n	3d80 <__retarget_lock_release_recursive+0x14>
    3d94:	e96d 4504 	strd	r4, r5, [sp, #-16]!
    3d98:	ea40 0401 	orr.w	r4, r0, r1
    3d9c:	e9cd 6702 	strd	r6, r7, [sp, #8]
    3da0:	f06f 0c00 	mvn.w	ip, #0
    3da4:	ea4f 7244 	mov.w	r2, r4, lsl #29
    3da8:	b312      	cbz	r2, 3df0 <strcmp+0x68>
    3daa:	ea80 0401 	eor.w	r4, r0, r1
    3dae:	f014 0f07 	tst.w	r4, #7
    3db2:	d16a      	bne.n	3e8a <strcmp+0x102>
    3db4:	f000 0407 	and.w	r4, r0, #7
    3db8:	f020 0007 	bic.w	r0, r0, #7
    3dbc:	f004 0503 	and.w	r5, r4, #3
    3dc0:	f021 0107 	bic.w	r1, r1, #7
    3dc4:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    3dc8:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    3dcc:	f014 0f04 	tst.w	r4, #4
    3dd0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    3dd4:	fa0c f405 	lsl.w	r4, ip, r5
    3dd8:	ea62 0204 	orn	r2, r2, r4
    3ddc:	ea66 0604 	orn	r6, r6, r4
    3de0:	d00a      	beq.n	3df8 <strcmp+0x70>
    3de2:	ea63 0304 	orn	r3, r3, r4
    3de6:	4662      	mov	r2, ip
    3de8:	ea67 0704 	orn	r7, r7, r4
    3dec:	4666      	mov	r6, ip
    3dee:	e003      	b.n	3df8 <strcmp+0x70>
    3df0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    3df4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    3df8:	fa82 f54c 	uadd8	r5, r2, ip
    3dfc:	ea82 0406 	eor.w	r4, r2, r6
    3e00:	faa4 f48c 	sel	r4, r4, ip
    3e04:	bb6c      	cbnz	r4, 3e62 <strcmp+0xda>
    3e06:	fa83 f54c 	uadd8	r5, r3, ip
    3e0a:	ea83 0507 	eor.w	r5, r3, r7
    3e0e:	faa5 f58c 	sel	r5, r5, ip
    3e12:	b995      	cbnz	r5, 3e3a <strcmp+0xb2>
    3e14:	e950 2302 	ldrd	r2, r3, [r0, #-8]
    3e18:	e951 6702 	ldrd	r6, r7, [r1, #-8]
    3e1c:	fa82 f54c 	uadd8	r5, r2, ip
    3e20:	ea82 0406 	eor.w	r4, r2, r6
    3e24:	faa4 f48c 	sel	r4, r4, ip
    3e28:	fa83 f54c 	uadd8	r5, r3, ip
    3e2c:	ea83 0507 	eor.w	r5, r3, r7
    3e30:	faa5 f58c 	sel	r5, r5, ip
    3e34:	4325      	orrs	r5, r4
    3e36:	d0db      	beq.n	3df0 <strcmp+0x68>
    3e38:	b99c      	cbnz	r4, 3e62 <strcmp+0xda>
    3e3a:	ba2d      	rev	r5, r5
    3e3c:	fab5 f485 	clz	r4, r5
    3e40:	f024 0407 	bic.w	r4, r4, #7
    3e44:	fa27 f104 	lsr.w	r1, r7, r4
    3e48:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    3e4c:	fa23 f304 	lsr.w	r3, r3, r4
    3e50:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    3e54:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    3e58:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    3e5c:	eba0 0001 	sub.w	r0, r0, r1
    3e60:	4770      	bx	lr
    3e62:	ba24      	rev	r4, r4
    3e64:	fab4 f484 	clz	r4, r4
    3e68:	f024 0407 	bic.w	r4, r4, #7
    3e6c:	fa26 f104 	lsr.w	r1, r6, r4
    3e70:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    3e74:	fa22 f204 	lsr.w	r2, r2, r4
    3e78:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    3e7c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    3e80:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    3e84:	eba0 0001 	sub.w	r0, r0, r1
    3e88:	4770      	bx	lr
    3e8a:	f014 0f03 	tst.w	r4, #3
    3e8e:	d13c      	bne.n	3f0a <strcmp+0x182>
    3e90:	f010 0403 	ands.w	r4, r0, #3
    3e94:	d128      	bne.n	3ee8 <strcmp+0x160>
    3e96:	f850 2b08 	ldr.w	r2, [r0], #8
    3e9a:	f851 3b08 	ldr.w	r3, [r1], #8
    3e9e:	fa82 f54c 	uadd8	r5, r2, ip
    3ea2:	ea82 0503 	eor.w	r5, r2, r3
    3ea6:	faa5 f58c 	sel	r5, r5, ip
    3eaa:	b95d      	cbnz	r5, 3ec4 <strcmp+0x13c>
    3eac:	f850 2c04 	ldr.w	r2, [r0, #-4]
    3eb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
    3eb4:	fa82 f54c 	uadd8	r5, r2, ip
    3eb8:	ea82 0503 	eor.w	r5, r2, r3
    3ebc:	faa5 f58c 	sel	r5, r5, ip
    3ec0:	2d00      	cmp	r5, #0
    3ec2:	d0e8      	beq.n	3e96 <strcmp+0x10e>
    3ec4:	ba2d      	rev	r5, r5
    3ec6:	fab5 f485 	clz	r4, r5
    3eca:	f024 0407 	bic.w	r4, r4, #7
    3ece:	fa23 f104 	lsr.w	r1, r3, r4
    3ed2:	fa22 f204 	lsr.w	r2, r2, r4
    3ed6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    3eda:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    3ede:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    3ee2:	eba0 0001 	sub.w	r0, r0, r1
    3ee6:	4770      	bx	lr
    3ee8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
    3eec:	f020 0003 	bic.w	r0, r0, #3
    3ef0:	f850 2b08 	ldr.w	r2, [r0], #8
    3ef4:	f021 0103 	bic.w	r1, r1, #3
    3ef8:	f851 3b08 	ldr.w	r3, [r1], #8
    3efc:	fa0c f404 	lsl.w	r4, ip, r4
    3f00:	ea62 0204 	orn	r2, r2, r4
    3f04:	ea63 0304 	orn	r3, r3, r4
    3f08:	e7c9      	b.n	3e9e <strcmp+0x116>
    3f0a:	f010 0403 	ands.w	r4, r0, #3
    3f0e:	d01a      	beq.n	3f46 <strcmp+0x1be>
    3f10:	eba1 0104 	sub.w	r1, r1, r4
    3f14:	f020 0003 	bic.w	r0, r0, #3
    3f18:	07e4      	lsls	r4, r4, #31
    3f1a:	f850 2b04 	ldr.w	r2, [r0], #4
    3f1e:	d006      	beq.n	3f2e <strcmp+0x1a6>
    3f20:	d20f      	bcs.n	3f42 <strcmp+0x1ba>
    3f22:	788b      	ldrb	r3, [r1, #2]
    3f24:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
    3f28:	1ae4      	subs	r4, r4, r3
    3f2a:	d106      	bne.n	3f3a <strcmp+0x1b2>
    3f2c:	b12b      	cbz	r3, 3f3a <strcmp+0x1b2>
    3f2e:	78cb      	ldrb	r3, [r1, #3]
    3f30:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
    3f34:	1ae4      	subs	r4, r4, r3
    3f36:	d100      	bne.n	3f3a <strcmp+0x1b2>
    3f38:	b91b      	cbnz	r3, 3f42 <strcmp+0x1ba>
    3f3a:	4620      	mov	r0, r4
    3f3c:	f85d 4b10 	ldr.w	r4, [sp], #16
    3f40:	4770      	bx	lr
    3f42:	f101 0104 	add.w	r1, r1, #4
    3f46:	f850 2b04 	ldr.w	r2, [r0], #4
    3f4a:	07cc      	lsls	r4, r1, #31
    3f4c:	f021 0103 	bic.w	r1, r1, #3
    3f50:	f851 3b04 	ldr.w	r3, [r1], #4
    3f54:	d848      	bhi.n	3fe8 <strcmp+0x260>
    3f56:	d224      	bcs.n	3fa2 <strcmp+0x21a>
    3f58:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
    3f5c:	fa82 f54c 	uadd8	r5, r2, ip
    3f60:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
    3f64:	faa5 f58c 	sel	r5, r5, ip
    3f68:	d10a      	bne.n	3f80 <strcmp+0x1f8>
    3f6a:	b965      	cbnz	r5, 3f86 <strcmp+0x1fe>
    3f6c:	f851 3b04 	ldr.w	r3, [r1], #4
    3f70:	ea84 0402 	eor.w	r4, r4, r2
    3f74:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
    3f78:	d10e      	bne.n	3f98 <strcmp+0x210>
    3f7a:	f850 2b04 	ldr.w	r2, [r0], #4
    3f7e:	e7eb      	b.n	3f58 <strcmp+0x1d0>
    3f80:	ea4f 2313 	mov.w	r3, r3, lsr #8
    3f84:	e055      	b.n	4032 <strcmp+0x2aa>
    3f86:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
    3f8a:	d14d      	bne.n	4028 <strcmp+0x2a0>
    3f8c:	7808      	ldrb	r0, [r1, #0]
    3f8e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    3f92:	f1c0 0000 	rsb	r0, r0, #0
    3f96:	4770      	bx	lr
    3f98:	ea4f 6212 	mov.w	r2, r2, lsr #24
    3f9c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    3fa0:	e047      	b.n	4032 <strcmp+0x2aa>
    3fa2:	ea02 441c 	and.w	r4, r2, ip, lsr #16
    3fa6:	fa82 f54c 	uadd8	r5, r2, ip
    3faa:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
    3fae:	faa5 f58c 	sel	r5, r5, ip
    3fb2:	d10a      	bne.n	3fca <strcmp+0x242>
    3fb4:	b965      	cbnz	r5, 3fd0 <strcmp+0x248>
    3fb6:	f851 3b04 	ldr.w	r3, [r1], #4
    3fba:	ea84 0402 	eor.w	r4, r4, r2
    3fbe:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
    3fc2:	d10c      	bne.n	3fde <strcmp+0x256>
    3fc4:	f850 2b04 	ldr.w	r2, [r0], #4
    3fc8:	e7eb      	b.n	3fa2 <strcmp+0x21a>
    3fca:	ea4f 4313 	mov.w	r3, r3, lsr #16
    3fce:	e030      	b.n	4032 <strcmp+0x2aa>
    3fd0:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
    3fd4:	d128      	bne.n	4028 <strcmp+0x2a0>
    3fd6:	880b      	ldrh	r3, [r1, #0]
    3fd8:	ea4f 4212 	mov.w	r2, r2, lsr #16
    3fdc:	e029      	b.n	4032 <strcmp+0x2aa>
    3fde:	ea4f 4212 	mov.w	r2, r2, lsr #16
    3fe2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
    3fe6:	e024      	b.n	4032 <strcmp+0x2aa>
    3fe8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
    3fec:	fa82 f54c 	uadd8	r5, r2, ip
    3ff0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
    3ff4:	faa5 f58c 	sel	r5, r5, ip
    3ff8:	d10a      	bne.n	4010 <strcmp+0x288>
    3ffa:	b965      	cbnz	r5, 4016 <strcmp+0x28e>
    3ffc:	f851 3b04 	ldr.w	r3, [r1], #4
    4000:	ea84 0402 	eor.w	r4, r4, r2
    4004:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
    4008:	d109      	bne.n	401e <strcmp+0x296>
    400a:	f850 2b04 	ldr.w	r2, [r0], #4
    400e:	e7eb      	b.n	3fe8 <strcmp+0x260>
    4010:	ea4f 6313 	mov.w	r3, r3, lsr #24
    4014:	e00d      	b.n	4032 <strcmp+0x2aa>
    4016:	f015 0fff 	tst.w	r5, #255	; 0xff
    401a:	d105      	bne.n	4028 <strcmp+0x2a0>
    401c:	680b      	ldr	r3, [r1, #0]
    401e:	ea4f 2212 	mov.w	r2, r2, lsr #8
    4022:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    4026:	e004      	b.n	4032 <strcmp+0x2aa>
    4028:	f04f 0000 	mov.w	r0, #0
    402c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    4030:	4770      	bx	lr
    4032:	ba12      	rev	r2, r2
    4034:	ba1b      	rev	r3, r3
    4036:	fa82 f44c 	uadd8	r4, r2, ip
    403a:	ea82 0403 	eor.w	r4, r2, r3
    403e:	faa4 f58c 	sel	r5, r4, ip
    4042:	fab5 f485 	clz	r4, r5
    4046:	fa02 f204 	lsl.w	r2, r2, r4
    404a:	fa03 f304 	lsl.w	r3, r3, r4
    404e:	ea4f 6012 	mov.w	r0, r2, lsr #24
    4052:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    4056:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
    405a:	4770      	bx	lr
	...

00004080 <strlen>:
    4080:	f890 f000 	pld	[r0]
    4084:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    4088:	f020 0107 	bic.w	r1, r0, #7
    408c:	f06f 0c00 	mvn.w	ip, #0
    4090:	f010 0407 	ands.w	r4, r0, #7
    4094:	f891 f020 	pld	[r1, #32]
    4098:	f040 8049 	bne.w	412e <strlen+0xae>
    409c:	f04f 0400 	mov.w	r4, #0
    40a0:	f06f 0007 	mvn.w	r0, #7
    40a4:	e9d1 2300 	ldrd	r2, r3, [r1]
    40a8:	f891 f040 	pld	[r1, #64]	; 0x40
    40ac:	f100 0008 	add.w	r0, r0, #8
    40b0:	fa82 f24c 	uadd8	r2, r2, ip
    40b4:	faa4 f28c 	sel	r2, r4, ip
    40b8:	fa83 f34c 	uadd8	r3, r3, ip
    40bc:	faa2 f38c 	sel	r3, r2, ip
    40c0:	bb4b      	cbnz	r3, 4116 <strlen+0x96>
    40c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    40c6:	fa82 f24c 	uadd8	r2, r2, ip
    40ca:	f100 0008 	add.w	r0, r0, #8
    40ce:	faa4 f28c 	sel	r2, r4, ip
    40d2:	fa83 f34c 	uadd8	r3, r3, ip
    40d6:	faa2 f38c 	sel	r3, r2, ip
    40da:	b9e3      	cbnz	r3, 4116 <strlen+0x96>
    40dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    40e0:	fa82 f24c 	uadd8	r2, r2, ip
    40e4:	f100 0008 	add.w	r0, r0, #8
    40e8:	faa4 f28c 	sel	r2, r4, ip
    40ec:	fa83 f34c 	uadd8	r3, r3, ip
    40f0:	faa2 f38c 	sel	r3, r2, ip
    40f4:	b97b      	cbnz	r3, 4116 <strlen+0x96>
    40f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    40fa:	f101 0120 	add.w	r1, r1, #32
    40fe:	fa82 f24c 	uadd8	r2, r2, ip
    4102:	f100 0008 	add.w	r0, r0, #8
    4106:	faa4 f28c 	sel	r2, r4, ip
    410a:	fa83 f34c 	uadd8	r3, r3, ip
    410e:	faa2 f38c 	sel	r3, r2, ip
    4112:	2b00      	cmp	r3, #0
    4114:	d0c6      	beq.n	40a4 <strlen+0x24>
    4116:	2a00      	cmp	r2, #0
    4118:	bf04      	itt	eq
    411a:	3004      	addeq	r0, #4
    411c:	461a      	moveq	r2, r3
    411e:	ba12      	rev	r2, r2
    4120:	fab2 f282 	clz	r2, r2
    4124:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    4128:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    412c:	4770      	bx	lr
    412e:	e9d1 2300 	ldrd	r2, r3, [r1]
    4132:	f004 0503 	and.w	r5, r4, #3
    4136:	f1c4 0000 	rsb	r0, r4, #0
    413a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    413e:	f014 0f04 	tst.w	r4, #4
    4142:	f891 f040 	pld	[r1, #64]	; 0x40
    4146:	fa0c f505 	lsl.w	r5, ip, r5
    414a:	ea62 0205 	orn	r2, r2, r5
    414e:	bf1c      	itt	ne
    4150:	ea63 0305 	ornne	r3, r3, r5
    4154:	4662      	movne	r2, ip
    4156:	f04f 0400 	mov.w	r4, #0
    415a:	e7a9      	b.n	40b0 <strlen+0x30>

0000415c <_malloc_trim_r>:
    415c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    415e:	4f24      	ldr	r7, [pc, #144]	; (41f0 <_malloc_trim_r+0x94>)
    4160:	460c      	mov	r4, r1
    4162:	4606      	mov	r6, r0
    4164:	f7ff f886 	bl	3274 <__malloc_lock>
    4168:	68bb      	ldr	r3, [r7, #8]
    416a:	685d      	ldr	r5, [r3, #4]
    416c:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
    4170:	310f      	adds	r1, #15
    4172:	f025 0503 	bic.w	r5, r5, #3
    4176:	194b      	adds	r3, r1, r5
    4178:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    417c:	f023 030f 	bic.w	r3, r3, #15
    4180:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
    4184:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    4188:	db07      	blt.n	419a <_malloc_trim_r+0x3e>
    418a:	2100      	movs	r1, #0
    418c:	4630      	mov	r0, r6
    418e:	f7ff fd95 	bl	3cbc <_sbrk_r>
    4192:	68bb      	ldr	r3, [r7, #8]
    4194:	442b      	add	r3, r5
    4196:	4298      	cmp	r0, r3
    4198:	d004      	beq.n	41a4 <_malloc_trim_r+0x48>
    419a:	4630      	mov	r0, r6
    419c:	f7ff f870 	bl	3280 <__malloc_unlock>
    41a0:	2000      	movs	r0, #0
    41a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    41a4:	4261      	negs	r1, r4
    41a6:	4630      	mov	r0, r6
    41a8:	f7ff fd88 	bl	3cbc <_sbrk_r>
    41ac:	3001      	adds	r0, #1
    41ae:	d00d      	beq.n	41cc <_malloc_trim_r+0x70>
    41b0:	4a10      	ldr	r2, [pc, #64]	; (41f4 <_malloc_trim_r+0x98>)
    41b2:	68bb      	ldr	r3, [r7, #8]
    41b4:	1b2d      	subs	r5, r5, r4
    41b6:	f045 0501 	orr.w	r5, r5, #1
    41ba:	605d      	str	r5, [r3, #4]
    41bc:	6813      	ldr	r3, [r2, #0]
    41be:	4630      	mov	r0, r6
    41c0:	1b1b      	subs	r3, r3, r4
    41c2:	6013      	str	r3, [r2, #0]
    41c4:	f7ff f85c 	bl	3280 <__malloc_unlock>
    41c8:	2001      	movs	r0, #1
    41ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    41cc:	2100      	movs	r1, #0
    41ce:	4630      	mov	r0, r6
    41d0:	f7ff fd74 	bl	3cbc <_sbrk_r>
    41d4:	68ba      	ldr	r2, [r7, #8]
    41d6:	1a83      	subs	r3, r0, r2
    41d8:	2b0f      	cmp	r3, #15
    41da:	ddde      	ble.n	419a <_malloc_trim_r+0x3e>
    41dc:	f043 0301 	orr.w	r3, r3, #1
    41e0:	6053      	str	r3, [r2, #4]
    41e2:	4b05      	ldr	r3, [pc, #20]	; (41f8 <_malloc_trim_r+0x9c>)
    41e4:	4903      	ldr	r1, [pc, #12]	; (41f4 <_malloc_trim_r+0x98>)
    41e6:	681b      	ldr	r3, [r3, #0]
    41e8:	1ac0      	subs	r0, r0, r3
    41ea:	6008      	str	r0, [r1, #0]
    41ec:	e7d5      	b.n	419a <_malloc_trim_r+0x3e>
    41ee:	bf00      	nop
    41f0:	20001120 	.word	0x20001120
    41f4:	20001ffc 	.word	0x20001ffc
    41f8:	20001528 	.word	0x20001528

000041fc <_free_r>:
    41fc:	2900      	cmp	r1, #0
    41fe:	d061      	beq.n	42c4 <_free_r+0xc8>
    4200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4202:	460c      	mov	r4, r1
    4204:	4606      	mov	r6, r0
    4206:	f7ff f835 	bl	3274 <__malloc_lock>
    420a:	f854 2c04 	ldr.w	r2, [r4, #-4]
    420e:	4f7b      	ldr	r7, [pc, #492]	; (43fc <_free_r+0x200>)
    4210:	f1a4 0508 	sub.w	r5, r4, #8
    4214:	f022 0101 	bic.w	r1, r2, #1
    4218:	eb05 0c01 	add.w	ip, r5, r1
    421c:	68b8      	ldr	r0, [r7, #8]
    421e:	f8dc 3004 	ldr.w	r3, [ip, #4]
    4222:	4560      	cmp	r0, ip
    4224:	f023 0303 	bic.w	r3, r3, #3
    4228:	f000 808b 	beq.w	4342 <_free_r+0x146>
    422c:	07d2      	lsls	r2, r2, #31
    422e:	f8cc 3004 	str.w	r3, [ip, #4]
    4232:	d432      	bmi.n	429a <_free_r+0x9e>
    4234:	f854 2c08 	ldr.w	r2, [r4, #-8]
    4238:	1aad      	subs	r5, r5, r2
    423a:	4411      	add	r1, r2
    423c:	68aa      	ldr	r2, [r5, #8]
    423e:	f107 0008 	add.w	r0, r7, #8
    4242:	4282      	cmp	r2, r0
    4244:	d06a      	beq.n	431c <_free_r+0x120>
    4246:	eb0c 0403 	add.w	r4, ip, r3
    424a:	f8d4 e004 	ldr.w	lr, [r4, #4]
    424e:	68ec      	ldr	r4, [r5, #12]
    4250:	60d4      	str	r4, [r2, #12]
    4252:	f01e 0f01 	tst.w	lr, #1
    4256:	60a2      	str	r2, [r4, #8]
    4258:	f000 8097 	beq.w	438a <_free_r+0x18e>
    425c:	f041 0301 	orr.w	r3, r1, #1
    4260:	606b      	str	r3, [r5, #4]
    4262:	f8cc 1000 	str.w	r1, [ip]
    4266:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    426a:	d235      	bcs.n	42d8 <_free_r+0xdc>
    426c:	6878      	ldr	r0, [r7, #4]
    426e:	08cb      	lsrs	r3, r1, #3
    4270:	2201      	movs	r2, #1
    4272:	0949      	lsrs	r1, r1, #5
    4274:	3301      	adds	r3, #1
    4276:	408a      	lsls	r2, r1
    4278:	4302      	orrs	r2, r0
    427a:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    427e:	607a      	str	r2, [r7, #4]
    4280:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    4284:	3a08      	subs	r2, #8
    4286:	e9c5 1202 	strd	r1, r2, [r5, #8]
    428a:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    428e:	60cd      	str	r5, [r1, #12]
    4290:	4630      	mov	r0, r6
    4292:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    4296:	f7fe bff3 	b.w	3280 <__malloc_unlock>
    429a:	eb0c 0203 	add.w	r2, ip, r3
    429e:	6852      	ldr	r2, [r2, #4]
    42a0:	07d0      	lsls	r0, r2, #31
    42a2:	d410      	bmi.n	42c6 <_free_r+0xca>
    42a4:	4419      	add	r1, r3
    42a6:	f107 0008 	add.w	r0, r7, #8
    42aa:	f8dc 3008 	ldr.w	r3, [ip, #8]
    42ae:	4283      	cmp	r3, r0
    42b0:	d073      	beq.n	439a <_free_r+0x19e>
    42b2:	f8dc 200c 	ldr.w	r2, [ip, #12]
    42b6:	60da      	str	r2, [r3, #12]
    42b8:	6093      	str	r3, [r2, #8]
    42ba:	f041 0301 	orr.w	r3, r1, #1
    42be:	606b      	str	r3, [r5, #4]
    42c0:	5069      	str	r1, [r5, r1]
    42c2:	e7d0      	b.n	4266 <_free_r+0x6a>
    42c4:	4770      	bx	lr
    42c6:	f041 0301 	orr.w	r3, r1, #1
    42ca:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    42ce:	f844 3c04 	str.w	r3, [r4, #-4]
    42d2:	f8cc 1000 	str.w	r1, [ip]
    42d6:	d3c9      	bcc.n	426c <_free_r+0x70>
    42d8:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
    42dc:	ea4f 2351 	mov.w	r3, r1, lsr #9
    42e0:	d248      	bcs.n	4374 <_free_r+0x178>
    42e2:	098b      	lsrs	r3, r1, #6
    42e4:	f103 0039 	add.w	r0, r3, #57	; 0x39
    42e8:	f103 0238 	add.w	r2, r3, #56	; 0x38
    42ec:	00c3      	lsls	r3, r0, #3
    42ee:	18f8      	adds	r0, r7, r3
    42f0:	58fb      	ldr	r3, [r7, r3]
    42f2:	3808      	subs	r0, #8
    42f4:	4298      	cmp	r0, r3
    42f6:	d059      	beq.n	43ac <_free_r+0x1b0>
    42f8:	685a      	ldr	r2, [r3, #4]
    42fa:	f022 0203 	bic.w	r2, r2, #3
    42fe:	428a      	cmp	r2, r1
    4300:	d902      	bls.n	4308 <_free_r+0x10c>
    4302:	689b      	ldr	r3, [r3, #8]
    4304:	4298      	cmp	r0, r3
    4306:	d1f7      	bne.n	42f8 <_free_r+0xfc>
    4308:	68d8      	ldr	r0, [r3, #12]
    430a:	e9c5 3002 	strd	r3, r0, [r5, #8]
    430e:	6085      	str	r5, [r0, #8]
    4310:	60dd      	str	r5, [r3, #12]
    4312:	4630      	mov	r0, r6
    4314:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    4318:	f7fe bfb2 	b.w	3280 <__malloc_unlock>
    431c:	eb0c 0203 	add.w	r2, ip, r3
    4320:	6852      	ldr	r2, [r2, #4]
    4322:	07d2      	lsls	r2, r2, #31
    4324:	d463      	bmi.n	43ee <_free_r+0x1f2>
    4326:	440b      	add	r3, r1
    4328:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
    432c:	60ca      	str	r2, [r1, #12]
    432e:	6091      	str	r1, [r2, #8]
    4330:	f043 0201 	orr.w	r2, r3, #1
    4334:	606a      	str	r2, [r5, #4]
    4336:	4630      	mov	r0, r6
    4338:	50eb      	str	r3, [r5, r3]
    433a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    433e:	f7fe bf9f 	b.w	3280 <__malloc_unlock>
    4342:	440b      	add	r3, r1
    4344:	07d1      	lsls	r1, r2, #31
    4346:	d407      	bmi.n	4358 <_free_r+0x15c>
    4348:	f854 2c08 	ldr.w	r2, [r4, #-8]
    434c:	1aad      	subs	r5, r5, r2
    434e:	4413      	add	r3, r2
    4350:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
    4354:	60ca      	str	r2, [r1, #12]
    4356:	6091      	str	r1, [r2, #8]
    4358:	f043 0201 	orr.w	r2, r3, #1
    435c:	606a      	str	r2, [r5, #4]
    435e:	4a28      	ldr	r2, [pc, #160]	; (4400 <_free_r+0x204>)
    4360:	60bd      	str	r5, [r7, #8]
    4362:	6812      	ldr	r2, [r2, #0]
    4364:	429a      	cmp	r2, r3
    4366:	d893      	bhi.n	4290 <_free_r+0x94>
    4368:	4b26      	ldr	r3, [pc, #152]	; (4404 <_free_r+0x208>)
    436a:	4630      	mov	r0, r6
    436c:	6819      	ldr	r1, [r3, #0]
    436e:	f7ff fef5 	bl	415c <_malloc_trim_r>
    4372:	e78d      	b.n	4290 <_free_r+0x94>
    4374:	2b14      	cmp	r3, #20
    4376:	d90a      	bls.n	438e <_free_r+0x192>
    4378:	2b54      	cmp	r3, #84	; 0x54
    437a:	d81f      	bhi.n	43bc <_free_r+0x1c0>
    437c:	0b0b      	lsrs	r3, r1, #12
    437e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    4382:	f103 026e 	add.w	r2, r3, #110	; 0x6e
    4386:	00c3      	lsls	r3, r0, #3
    4388:	e7b1      	b.n	42ee <_free_r+0xf2>
    438a:	4419      	add	r1, r3
    438c:	e78d      	b.n	42aa <_free_r+0xae>
    438e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    4392:	f103 025b 	add.w	r2, r3, #91	; 0x5b
    4396:	00c3      	lsls	r3, r0, #3
    4398:	e7a9      	b.n	42ee <_free_r+0xf2>
    439a:	f041 0301 	orr.w	r3, r1, #1
    439e:	e9c7 5504 	strd	r5, r5, [r7, #16]
    43a2:	e9c5 0002 	strd	r0, r0, [r5, #8]
    43a6:	606b      	str	r3, [r5, #4]
    43a8:	5069      	str	r1, [r5, r1]
    43aa:	e771      	b.n	4290 <_free_r+0x94>
    43ac:	6879      	ldr	r1, [r7, #4]
    43ae:	1092      	asrs	r2, r2, #2
    43b0:	2401      	movs	r4, #1
    43b2:	fa04 f202 	lsl.w	r2, r4, r2
    43b6:	430a      	orrs	r2, r1
    43b8:	607a      	str	r2, [r7, #4]
    43ba:	e7a6      	b.n	430a <_free_r+0x10e>
    43bc:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    43c0:	d806      	bhi.n	43d0 <_free_r+0x1d4>
    43c2:	0bcb      	lsrs	r3, r1, #15
    43c4:	f103 0078 	add.w	r0, r3, #120	; 0x78
    43c8:	f103 0277 	add.w	r2, r3, #119	; 0x77
    43cc:	00c3      	lsls	r3, r0, #3
    43ce:	e78e      	b.n	42ee <_free_r+0xf2>
    43d0:	f240 5254 	movw	r2, #1364	; 0x554
    43d4:	4293      	cmp	r3, r2
    43d6:	d806      	bhi.n	43e6 <_free_r+0x1ea>
    43d8:	0c8b      	lsrs	r3, r1, #18
    43da:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    43de:	f103 027c 	add.w	r2, r3, #124	; 0x7c
    43e2:	00c3      	lsls	r3, r0, #3
    43e4:	e783      	b.n	42ee <_free_r+0xf2>
    43e6:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    43ea:	227e      	movs	r2, #126	; 0x7e
    43ec:	e77f      	b.n	42ee <_free_r+0xf2>
    43ee:	f041 0301 	orr.w	r3, r1, #1
    43f2:	606b      	str	r3, [r5, #4]
    43f4:	f8cc 1000 	str.w	r1, [ip]
    43f8:	e74a      	b.n	4290 <_free_r+0x94>
    43fa:	bf00      	nop
    43fc:	20001120 	.word	0x20001120
    4400:	2000152c 	.word	0x2000152c
    4404:	2000202c 	.word	0x2000202c

00004408 <__ascii_mbtowc>:
    4408:	b082      	sub	sp, #8
    440a:	b149      	cbz	r1, 4420 <__ascii_mbtowc+0x18>
    440c:	b15a      	cbz	r2, 4426 <__ascii_mbtowc+0x1e>
    440e:	b16b      	cbz	r3, 442c <__ascii_mbtowc+0x24>
    4410:	7813      	ldrb	r3, [r2, #0]
    4412:	600b      	str	r3, [r1, #0]
    4414:	7812      	ldrb	r2, [r2, #0]
    4416:	1e10      	subs	r0, r2, #0
    4418:	bf18      	it	ne
    441a:	2001      	movne	r0, #1
    441c:	b002      	add	sp, #8
    441e:	4770      	bx	lr
    4420:	a901      	add	r1, sp, #4
    4422:	2a00      	cmp	r2, #0
    4424:	d1f3      	bne.n	440e <__ascii_mbtowc+0x6>
    4426:	4610      	mov	r0, r2
    4428:	b002      	add	sp, #8
    442a:	4770      	bx	lr
    442c:	f06f 0001 	mvn.w	r0, #1
    4430:	e7f4      	b.n	441c <__ascii_mbtowc+0x14>
    4432:	bf00      	nop

00004434 <_Balloc>:
    4434:	6c43      	ldr	r3, [r0, #68]	; 0x44
    4436:	b570      	push	{r4, r5, r6, lr}
    4438:	4605      	mov	r5, r0
    443a:	460c      	mov	r4, r1
    443c:	b14b      	cbz	r3, 4452 <_Balloc+0x1e>
    443e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    4442:	b180      	cbz	r0, 4466 <_Balloc+0x32>
    4444:	6802      	ldr	r2, [r0, #0]
    4446:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    444a:	2300      	movs	r3, #0
    444c:	e9c0 3303 	strd	r3, r3, [r0, #12]
    4450:	bd70      	pop	{r4, r5, r6, pc}
    4452:	2221      	movs	r2, #33	; 0x21
    4454:	2104      	movs	r1, #4
    4456:	f002 fb2f 	bl	6ab8 <_calloc_r>
    445a:	4603      	mov	r3, r0
    445c:	6468      	str	r0, [r5, #68]	; 0x44
    445e:	2800      	cmp	r0, #0
    4460:	d1ed      	bne.n	443e <_Balloc+0xa>
    4462:	2000      	movs	r0, #0
    4464:	bd70      	pop	{r4, r5, r6, pc}
    4466:	2101      	movs	r1, #1
    4468:	fa01 f604 	lsl.w	r6, r1, r4
    446c:	1d72      	adds	r2, r6, #5
    446e:	0092      	lsls	r2, r2, #2
    4470:	4628      	mov	r0, r5
    4472:	f002 fb21 	bl	6ab8 <_calloc_r>
    4476:	2800      	cmp	r0, #0
    4478:	d0f3      	beq.n	4462 <_Balloc+0x2e>
    447a:	e9c0 4601 	strd	r4, r6, [r0, #4]
    447e:	e7e4      	b.n	444a <_Balloc+0x16>

00004480 <_Bfree>:
    4480:	b131      	cbz	r1, 4490 <_Bfree+0x10>
    4482:	6c43      	ldr	r3, [r0, #68]	; 0x44
    4484:	684a      	ldr	r2, [r1, #4]
    4486:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    448a:	6008      	str	r0, [r1, #0]
    448c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    4490:	4770      	bx	lr
    4492:	bf00      	nop

00004494 <__multadd>:
    4494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4498:	690e      	ldr	r6, [r1, #16]
    449a:	4680      	mov	r8, r0
    449c:	460f      	mov	r7, r1
    449e:	461d      	mov	r5, r3
    44a0:	f101 0e14 	add.w	lr, r1, #20
    44a4:	2000      	movs	r0, #0
    44a6:	f8de 1000 	ldr.w	r1, [lr]
    44aa:	b28c      	uxth	r4, r1
    44ac:	fb02 5304 	mla	r3, r2, r4, r5
    44b0:	0c09      	lsrs	r1, r1, #16
    44b2:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    44b6:	fb02 cc01 	mla	ip, r2, r1, ip
    44ba:	3001      	adds	r0, #1
    44bc:	b29c      	uxth	r4, r3
    44be:	eb04 440c 	add.w	r4, r4, ip, lsl #16
    44c2:	4286      	cmp	r6, r0
    44c4:	f84e 4b04 	str.w	r4, [lr], #4
    44c8:	ea4f 451c 	mov.w	r5, ip, lsr #16
    44cc:	dceb      	bgt.n	44a6 <__multadd+0x12>
    44ce:	b13d      	cbz	r5, 44e0 <__multadd+0x4c>
    44d0:	68bb      	ldr	r3, [r7, #8]
    44d2:	42b3      	cmp	r3, r6
    44d4:	dd07      	ble.n	44e6 <__multadd+0x52>
    44d6:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    44da:	3601      	adds	r6, #1
    44dc:	615d      	str	r5, [r3, #20]
    44de:	613e      	str	r6, [r7, #16]
    44e0:	4638      	mov	r0, r7
    44e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    44e6:	6879      	ldr	r1, [r7, #4]
    44e8:	4640      	mov	r0, r8
    44ea:	3101      	adds	r1, #1
    44ec:	f7ff ffa2 	bl	4434 <_Balloc>
    44f0:	4604      	mov	r4, r0
    44f2:	b1b0      	cbz	r0, 4522 <__multadd+0x8e>
    44f4:	693a      	ldr	r2, [r7, #16]
    44f6:	3202      	adds	r2, #2
    44f8:	f107 010c 	add.w	r1, r7, #12
    44fc:	0092      	lsls	r2, r2, #2
    44fe:	300c      	adds	r0, #12
    4500:	f7fc fe6c 	bl	11dc <memcpy>
    4504:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    4508:	687a      	ldr	r2, [r7, #4]
    450a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    450e:	6039      	str	r1, [r7, #0]
    4510:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    4514:	4627      	mov	r7, r4
    4516:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    451a:	3601      	adds	r6, #1
    451c:	615d      	str	r5, [r3, #20]
    451e:	613e      	str	r6, [r7, #16]
    4520:	e7de      	b.n	44e0 <__multadd+0x4c>
    4522:	4b03      	ldr	r3, [pc, #12]	; (4530 <__multadd+0x9c>)
    4524:	4803      	ldr	r0, [pc, #12]	; (4534 <__multadd+0xa0>)
    4526:	4622      	mov	r2, r4
    4528:	21ba      	movs	r1, #186	; 0xba
    452a:	f002 faa5 	bl	6a78 <__assert_func>
    452e:	bf00      	nop
    4530:	20000440 	.word	0x20000440
    4534:	20000454 	.word	0x20000454

00004538 <__hi0bits>:
    4538:	0c03      	lsrs	r3, r0, #16
    453a:	041b      	lsls	r3, r3, #16
    453c:	b9d3      	cbnz	r3, 4574 <__hi0bits+0x3c>
    453e:	0400      	lsls	r0, r0, #16
    4540:	2310      	movs	r3, #16
    4542:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
    4546:	bf04      	itt	eq
    4548:	0200      	lsleq	r0, r0, #8
    454a:	3308      	addeq	r3, #8
    454c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
    4550:	bf04      	itt	eq
    4552:	0100      	lsleq	r0, r0, #4
    4554:	3304      	addeq	r3, #4
    4556:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
    455a:	bf04      	itt	eq
    455c:	0080      	lsleq	r0, r0, #2
    455e:	3302      	addeq	r3, #2
    4560:	2800      	cmp	r0, #0
    4562:	db05      	blt.n	4570 <__hi0bits+0x38>
    4564:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
    4568:	f103 0301 	add.w	r3, r3, #1
    456c:	bf08      	it	eq
    456e:	2320      	moveq	r3, #32
    4570:	4618      	mov	r0, r3
    4572:	4770      	bx	lr
    4574:	2300      	movs	r3, #0
    4576:	e7e4      	b.n	4542 <__hi0bits+0xa>

00004578 <__lo0bits>:
    4578:	6803      	ldr	r3, [r0, #0]
    457a:	f013 0207 	ands.w	r2, r3, #7
    457e:	d008      	beq.n	4592 <__lo0bits+0x1a>
    4580:	07d9      	lsls	r1, r3, #31
    4582:	d41f      	bmi.n	45c4 <__lo0bits+0x4c>
    4584:	079a      	lsls	r2, r3, #30
    4586:	d522      	bpl.n	45ce <__lo0bits+0x56>
    4588:	085b      	lsrs	r3, r3, #1
    458a:	6003      	str	r3, [r0, #0]
    458c:	2201      	movs	r2, #1
    458e:	4610      	mov	r0, r2
    4590:	4770      	bx	lr
    4592:	b299      	uxth	r1, r3
    4594:	b909      	cbnz	r1, 459a <__lo0bits+0x22>
    4596:	0c1b      	lsrs	r3, r3, #16
    4598:	2210      	movs	r2, #16
    459a:	b2d9      	uxtb	r1, r3
    459c:	b909      	cbnz	r1, 45a2 <__lo0bits+0x2a>
    459e:	3208      	adds	r2, #8
    45a0:	0a1b      	lsrs	r3, r3, #8
    45a2:	0719      	lsls	r1, r3, #28
    45a4:	bf04      	itt	eq
    45a6:	091b      	lsreq	r3, r3, #4
    45a8:	3204      	addeq	r2, #4
    45aa:	0799      	lsls	r1, r3, #30
    45ac:	bf04      	itt	eq
    45ae:	089b      	lsreq	r3, r3, #2
    45b0:	3202      	addeq	r2, #2
    45b2:	07d9      	lsls	r1, r3, #31
    45b4:	d403      	bmi.n	45be <__lo0bits+0x46>
    45b6:	085b      	lsrs	r3, r3, #1
    45b8:	f102 0201 	add.w	r2, r2, #1
    45bc:	d005      	beq.n	45ca <__lo0bits+0x52>
    45be:	6003      	str	r3, [r0, #0]
    45c0:	4610      	mov	r0, r2
    45c2:	4770      	bx	lr
    45c4:	2200      	movs	r2, #0
    45c6:	4610      	mov	r0, r2
    45c8:	4770      	bx	lr
    45ca:	2220      	movs	r2, #32
    45cc:	e7df      	b.n	458e <__lo0bits+0x16>
    45ce:	089b      	lsrs	r3, r3, #2
    45d0:	2202      	movs	r2, #2
    45d2:	6003      	str	r3, [r0, #0]
    45d4:	4610      	mov	r0, r2
    45d6:	4770      	bx	lr

000045d8 <__i2b>:
    45d8:	b538      	push	{r3, r4, r5, lr}
    45da:	6c43      	ldr	r3, [r0, #68]	; 0x44
    45dc:	4604      	mov	r4, r0
    45de:	460d      	mov	r5, r1
    45e0:	b14b      	cbz	r3, 45f6 <__i2b+0x1e>
    45e2:	6858      	ldr	r0, [r3, #4]
    45e4:	b1b0      	cbz	r0, 4614 <__i2b+0x3c>
    45e6:	6802      	ldr	r2, [r0, #0]
    45e8:	605a      	str	r2, [r3, #4]
    45ea:	2200      	movs	r2, #0
    45ec:	2301      	movs	r3, #1
    45ee:	e9c0 3504 	strd	r3, r5, [r0, #16]
    45f2:	60c2      	str	r2, [r0, #12]
    45f4:	bd38      	pop	{r3, r4, r5, pc}
    45f6:	2221      	movs	r2, #33	; 0x21
    45f8:	2104      	movs	r1, #4
    45fa:	f002 fa5d 	bl	6ab8 <_calloc_r>
    45fe:	4603      	mov	r3, r0
    4600:	6460      	str	r0, [r4, #68]	; 0x44
    4602:	2800      	cmp	r0, #0
    4604:	d1ed      	bne.n	45e2 <__i2b+0xa>
    4606:	4b09      	ldr	r3, [pc, #36]	; (462c <__i2b+0x54>)
    4608:	4809      	ldr	r0, [pc, #36]	; (4630 <__i2b+0x58>)
    460a:	2200      	movs	r2, #0
    460c:	f240 1145 	movw	r1, #325	; 0x145
    4610:	f002 fa32 	bl	6a78 <__assert_func>
    4614:	221c      	movs	r2, #28
    4616:	2101      	movs	r1, #1
    4618:	4620      	mov	r0, r4
    461a:	f002 fa4d 	bl	6ab8 <_calloc_r>
    461e:	2800      	cmp	r0, #0
    4620:	d0f1      	beq.n	4606 <__i2b+0x2e>
    4622:	2201      	movs	r2, #1
    4624:	2302      	movs	r3, #2
    4626:	e9c0 2301 	strd	r2, r3, [r0, #4]
    462a:	e7de      	b.n	45ea <__i2b+0x12>
    462c:	20000440 	.word	0x20000440
    4630:	20000454 	.word	0x20000454

00004634 <__multiply>:
    4634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4638:	690e      	ldr	r6, [r1, #16]
    463a:	6915      	ldr	r5, [r2, #16]
    463c:	42ae      	cmp	r6, r5
    463e:	b085      	sub	sp, #20
    4640:	4688      	mov	r8, r1
    4642:	4614      	mov	r4, r2
    4644:	db05      	blt.n	4652 <__multiply+0x1e>
    4646:	462a      	mov	r2, r5
    4648:	4623      	mov	r3, r4
    464a:	4635      	mov	r5, r6
    464c:	460c      	mov	r4, r1
    464e:	4616      	mov	r6, r2
    4650:	4698      	mov	r8, r3
    4652:	68a3      	ldr	r3, [r4, #8]
    4654:	6861      	ldr	r1, [r4, #4]
    4656:	19af      	adds	r7, r5, r6
    4658:	42bb      	cmp	r3, r7
    465a:	bfb8      	it	lt
    465c:	3101      	addlt	r1, #1
    465e:	f7ff fee9 	bl	4434 <_Balloc>
    4662:	9001      	str	r0, [sp, #4]
    4664:	2800      	cmp	r0, #0
    4666:	f000 8087 	beq.w	4778 <__multiply+0x144>
    466a:	9b01      	ldr	r3, [sp, #4]
    466c:	f103 0914 	add.w	r9, r3, #20
    4670:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
    4674:	45d1      	cmp	r9, sl
    4676:	d205      	bcs.n	4684 <__multiply+0x50>
    4678:	464b      	mov	r3, r9
    467a:	2200      	movs	r2, #0
    467c:	f843 2b04 	str.w	r2, [r3], #4
    4680:	459a      	cmp	sl, r3
    4682:	d8fb      	bhi.n	467c <__multiply+0x48>
    4684:	f108 0814 	add.w	r8, r8, #20
    4688:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
    468c:	f104 0314 	add.w	r3, r4, #20
    4690:	45d8      	cmp	r8, fp
    4692:	461a      	mov	r2, r3
    4694:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    4698:	d25f      	bcs.n	475a <__multiply+0x126>
    469a:	1b2b      	subs	r3, r5, r4
    469c:	3b15      	subs	r3, #21
    469e:	f023 0303 	bic.w	r3, r3, #3
    46a2:	3304      	adds	r3, #4
    46a4:	3415      	adds	r4, #21
    46a6:	42a5      	cmp	r5, r4
    46a8:	bf38      	it	cc
    46aa:	2304      	movcc	r3, #4
    46ac:	e9cd a702 	strd	sl, r7, [sp, #8]
    46b0:	46ac      	mov	ip, r5
    46b2:	461f      	mov	r7, r3
    46b4:	4692      	mov	sl, r2
    46b6:	e005      	b.n	46c4 <__multiply+0x90>
    46b8:	0c09      	lsrs	r1, r1, #16
    46ba:	d129      	bne.n	4710 <__multiply+0xdc>
    46bc:	45c3      	cmp	fp, r8
    46be:	f109 0904 	add.w	r9, r9, #4
    46c2:	d948      	bls.n	4756 <__multiply+0x122>
    46c4:	f858 1b04 	ldr.w	r1, [r8], #4
    46c8:	b28d      	uxth	r5, r1
    46ca:	2d00      	cmp	r5, #0
    46cc:	d0f4      	beq.n	46b8 <__multiply+0x84>
    46ce:	4656      	mov	r6, sl
    46d0:	464c      	mov	r4, r9
    46d2:	2300      	movs	r3, #0
    46d4:	f856 1b04 	ldr.w	r1, [r6], #4
    46d8:	6822      	ldr	r2, [r4, #0]
    46da:	fa1f fe81 	uxth.w	lr, r1
    46de:	b290      	uxth	r0, r2
    46e0:	0c09      	lsrs	r1, r1, #16
    46e2:	fb05 000e 	mla	r0, r5, lr, r0
    46e6:	0c12      	lsrs	r2, r2, #16
    46e8:	4403      	add	r3, r0
    46ea:	fb05 2201 	mla	r2, r5, r1, r2
    46ee:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    46f2:	b29b      	uxth	r3, r3
    46f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    46f8:	45b4      	cmp	ip, r6
    46fa:	f844 3b04 	str.w	r3, [r4], #4
    46fe:	ea4f 4312 	mov.w	r3, r2, lsr #16
    4702:	d8e7      	bhi.n	46d4 <__multiply+0xa0>
    4704:	f849 3007 	str.w	r3, [r9, r7]
    4708:	f858 1c04 	ldr.w	r1, [r8, #-4]
    470c:	0c09      	lsrs	r1, r1, #16
    470e:	d0d5      	beq.n	46bc <__multiply+0x88>
    4710:	f8d9 3000 	ldr.w	r3, [r9]
    4714:	4650      	mov	r0, sl
    4716:	461a      	mov	r2, r3
    4718:	464c      	mov	r4, r9
    471a:	2600      	movs	r6, #0
    471c:	8805      	ldrh	r5, [r0, #0]
    471e:	0c12      	lsrs	r2, r2, #16
    4720:	fb01 2205 	mla	r2, r1, r5, r2
    4724:	4416      	add	r6, r2
    4726:	b29b      	uxth	r3, r3
    4728:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    472c:	f844 3b04 	str.w	r3, [r4], #4
    4730:	f850 5b04 	ldr.w	r5, [r0], #4
    4734:	6822      	ldr	r2, [r4, #0]
    4736:	0c2d      	lsrs	r5, r5, #16
    4738:	b293      	uxth	r3, r2
    473a:	fb01 3305 	mla	r3, r1, r5, r3
    473e:	eb03 4316 	add.w	r3, r3, r6, lsr #16
    4742:	4584      	cmp	ip, r0
    4744:	ea4f 4613 	mov.w	r6, r3, lsr #16
    4748:	d8e8      	bhi.n	471c <__multiply+0xe8>
    474a:	45c3      	cmp	fp, r8
    474c:	f849 3007 	str.w	r3, [r9, r7]
    4750:	f109 0904 	add.w	r9, r9, #4
    4754:	d8b6      	bhi.n	46c4 <__multiply+0x90>
    4756:	e9dd a702 	ldrd	sl, r7, [sp, #8]
    475a:	2f00      	cmp	r7, #0
    475c:	dc02      	bgt.n	4764 <__multiply+0x130>
    475e:	e005      	b.n	476c <__multiply+0x138>
    4760:	3f01      	subs	r7, #1
    4762:	d003      	beq.n	476c <__multiply+0x138>
    4764:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
    4768:	2b00      	cmp	r3, #0
    476a:	d0f9      	beq.n	4760 <__multiply+0x12c>
    476c:	9b01      	ldr	r3, [sp, #4]
    476e:	4618      	mov	r0, r3
    4770:	611f      	str	r7, [r3, #16]
    4772:	b005      	add	sp, #20
    4774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4778:	4b03      	ldr	r3, [pc, #12]	; (4788 <__multiply+0x154>)
    477a:	4804      	ldr	r0, [pc, #16]	; (478c <__multiply+0x158>)
    477c:	9a01      	ldr	r2, [sp, #4]
    477e:	f44f 71b1 	mov.w	r1, #354	; 0x162
    4782:	f002 f979 	bl	6a78 <__assert_func>
    4786:	bf00      	nop
    4788:	20000440 	.word	0x20000440
    478c:	20000454 	.word	0x20000454

00004790 <__pow5mult>:
    4790:	f012 0303 	ands.w	r3, r2, #3
    4794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4798:	4614      	mov	r4, r2
    479a:	4606      	mov	r6, r0
    479c:	d132      	bne.n	4804 <__pow5mult+0x74>
    479e:	460d      	mov	r5, r1
    47a0:	10a4      	asrs	r4, r4, #2
    47a2:	d020      	beq.n	47e6 <__pow5mult+0x56>
    47a4:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
    47a8:	f1b8 0f00 	cmp.w	r8, #0
    47ac:	d033      	beq.n	4816 <__pow5mult+0x86>
    47ae:	07e3      	lsls	r3, r4, #31
    47b0:	f04f 0700 	mov.w	r7, #0
    47b4:	d407      	bmi.n	47c6 <__pow5mult+0x36>
    47b6:	1064      	asrs	r4, r4, #1
    47b8:	d015      	beq.n	47e6 <__pow5mult+0x56>
    47ba:	f8d8 0000 	ldr.w	r0, [r8]
    47be:	b1a8      	cbz	r0, 47ec <__pow5mult+0x5c>
    47c0:	4680      	mov	r8, r0
    47c2:	07e3      	lsls	r3, r4, #31
    47c4:	d5f7      	bpl.n	47b6 <__pow5mult+0x26>
    47c6:	4642      	mov	r2, r8
    47c8:	4629      	mov	r1, r5
    47ca:	4630      	mov	r0, r6
    47cc:	f7ff ff32 	bl	4634 <__multiply>
    47d0:	b1b5      	cbz	r5, 4800 <__pow5mult+0x70>
    47d2:	6869      	ldr	r1, [r5, #4]
    47d4:	6c73      	ldr	r3, [r6, #68]	; 0x44
    47d6:	1064      	asrs	r4, r4, #1
    47d8:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    47dc:	602a      	str	r2, [r5, #0]
    47de:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
    47e2:	4605      	mov	r5, r0
    47e4:	d1e9      	bne.n	47ba <__pow5mult+0x2a>
    47e6:	4628      	mov	r0, r5
    47e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    47ec:	4642      	mov	r2, r8
    47ee:	4641      	mov	r1, r8
    47f0:	4630      	mov	r0, r6
    47f2:	f7ff ff1f 	bl	4634 <__multiply>
    47f6:	f8c8 0000 	str.w	r0, [r8]
    47fa:	6007      	str	r7, [r0, #0]
    47fc:	4680      	mov	r8, r0
    47fe:	e7e0      	b.n	47c2 <__pow5mult+0x32>
    4800:	4605      	mov	r5, r0
    4802:	e7d8      	b.n	47b6 <__pow5mult+0x26>
    4804:	3b01      	subs	r3, #1
    4806:	4a0f      	ldr	r2, [pc, #60]	; (4844 <__pow5mult+0xb4>)
    4808:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    480c:	2300      	movs	r3, #0
    480e:	f7ff fe41 	bl	4494 <__multadd>
    4812:	4605      	mov	r5, r0
    4814:	e7c4      	b.n	47a0 <__pow5mult+0x10>
    4816:	2101      	movs	r1, #1
    4818:	4630      	mov	r0, r6
    481a:	f7ff fe0b 	bl	4434 <_Balloc>
    481e:	4680      	mov	r8, r0
    4820:	b140      	cbz	r0, 4834 <__pow5mult+0xa4>
    4822:	2301      	movs	r3, #1
    4824:	f240 2271 	movw	r2, #625	; 0x271
    4828:	e9c0 3204 	strd	r3, r2, [r0, #16]
    482c:	2300      	movs	r3, #0
    482e:	6430      	str	r0, [r6, #64]	; 0x40
    4830:	6003      	str	r3, [r0, #0]
    4832:	e7bc      	b.n	47ae <__pow5mult+0x1e>
    4834:	4b04      	ldr	r3, [pc, #16]	; (4848 <__pow5mult+0xb8>)
    4836:	4805      	ldr	r0, [pc, #20]	; (484c <__pow5mult+0xbc>)
    4838:	4642      	mov	r2, r8
    483a:	f240 1145 	movw	r1, #325	; 0x145
    483e:	f002 f91b 	bl	6a78 <__assert_func>
    4842:	bf00      	nop
    4844:	20000c28 	.word	0x20000c28
    4848:	20000440 	.word	0x20000440
    484c:	20000454 	.word	0x20000454

00004850 <__lshift>:
    4850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4854:	460d      	mov	r5, r1
    4856:	4614      	mov	r4, r2
    4858:	692f      	ldr	r7, [r5, #16]
    485a:	68ab      	ldr	r3, [r5, #8]
    485c:	6849      	ldr	r1, [r1, #4]
    485e:	eb07 1762 	add.w	r7, r7, r2, asr #5
    4862:	1c7e      	adds	r6, r7, #1
    4864:	429e      	cmp	r6, r3
    4866:	4680      	mov	r8, r0
    4868:	ea4f 1962 	mov.w	r9, r2, asr #5
    486c:	dd04      	ble.n	4878 <__lshift+0x28>
    486e:	005b      	lsls	r3, r3, #1
    4870:	429e      	cmp	r6, r3
    4872:	f101 0101 	add.w	r1, r1, #1
    4876:	dcfa      	bgt.n	486e <__lshift+0x1e>
    4878:	4640      	mov	r0, r8
    487a:	f7ff fddb 	bl	4434 <_Balloc>
    487e:	4684      	mov	ip, r0
    4880:	2800      	cmp	r0, #0
    4882:	d052      	beq.n	492a <__lshift+0xda>
    4884:	f1b9 0f00 	cmp.w	r9, #0
    4888:	f100 0214 	add.w	r2, r0, #20
    488c:	dd0e      	ble.n	48ac <__lshift+0x5c>
    488e:	f109 0105 	add.w	r1, r9, #5
    4892:	ea4f 0e81 	mov.w	lr, r1, lsl #2
    4896:	4613      	mov	r3, r2
    4898:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    489c:	2000      	movs	r0, #0
    489e:	f843 0b04 	str.w	r0, [r3], #4
    48a2:	428b      	cmp	r3, r1
    48a4:	d1fb      	bne.n	489e <__lshift+0x4e>
    48a6:	f1ae 0314 	sub.w	r3, lr, #20
    48aa:	441a      	add	r2, r3
    48ac:	6929      	ldr	r1, [r5, #16]
    48ae:	f105 0314 	add.w	r3, r5, #20
    48b2:	f014 0e1f 	ands.w	lr, r4, #31
    48b6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    48ba:	d02e      	beq.n	491a <__lshift+0xca>
    48bc:	f1ce 0920 	rsb	r9, lr, #32
    48c0:	4610      	mov	r0, r2
    48c2:	f04f 0a00 	mov.w	sl, #0
    48c6:	681c      	ldr	r4, [r3, #0]
    48c8:	fa04 f40e 	lsl.w	r4, r4, lr
    48cc:	ea44 040a 	orr.w	r4, r4, sl
    48d0:	f840 4b04 	str.w	r4, [r0], #4
    48d4:	f853 4b04 	ldr.w	r4, [r3], #4
    48d8:	4299      	cmp	r1, r3
    48da:	fa24 fa09 	lsr.w	sl, r4, r9
    48de:	d8f2      	bhi.n	48c6 <__lshift+0x76>
    48e0:	1b4b      	subs	r3, r1, r5
    48e2:	3b15      	subs	r3, #21
    48e4:	f023 0303 	bic.w	r3, r3, #3
    48e8:	3304      	adds	r3, #4
    48ea:	f105 0015 	add.w	r0, r5, #21
    48ee:	4281      	cmp	r1, r0
    48f0:	bf38      	it	cc
    48f2:	2304      	movcc	r3, #4
    48f4:	f1ba 0f00 	cmp.w	sl, #0
    48f8:	bf18      	it	ne
    48fa:	4637      	movne	r7, r6
    48fc:	f842 a003 	str.w	sl, [r2, r3]
    4900:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    4904:	686a      	ldr	r2, [r5, #4]
    4906:	f8cc 7010 	str.w	r7, [ip, #16]
    490a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    490e:	6029      	str	r1, [r5, #0]
    4910:	4660      	mov	r0, ip
    4912:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
    4916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    491a:	3a04      	subs	r2, #4
    491c:	f853 0b04 	ldr.w	r0, [r3], #4
    4920:	f842 0f04 	str.w	r0, [r2, #4]!
    4924:	4299      	cmp	r1, r3
    4926:	d8f9      	bhi.n	491c <__lshift+0xcc>
    4928:	e7ea      	b.n	4900 <__lshift+0xb0>
    492a:	4b03      	ldr	r3, [pc, #12]	; (4938 <__lshift+0xe8>)
    492c:	4803      	ldr	r0, [pc, #12]	; (493c <__lshift+0xec>)
    492e:	4662      	mov	r2, ip
    4930:	f44f 71ef 	mov.w	r1, #478	; 0x1de
    4934:	f002 f8a0 	bl	6a78 <__assert_func>
    4938:	20000440 	.word	0x20000440
    493c:	20000454 	.word	0x20000454

00004940 <__mcmp>:
    4940:	690b      	ldr	r3, [r1, #16]
    4942:	4684      	mov	ip, r0
    4944:	6900      	ldr	r0, [r0, #16]
    4946:	1ac0      	subs	r0, r0, r3
    4948:	d116      	bne.n	4978 <__mcmp+0x38>
    494a:	f10c 0c14 	add.w	ip, ip, #20
    494e:	3114      	adds	r1, #20
    4950:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
    4954:	b410      	push	{r4}
    4956:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    495a:	e001      	b.n	4960 <__mcmp+0x20>
    495c:	4594      	cmp	ip, r2
    495e:	d208      	bcs.n	4972 <__mcmp+0x32>
    4960:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    4964:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    4968:	428c      	cmp	r4, r1
    496a:	d0f7      	beq.n	495c <__mcmp+0x1c>
    496c:	d205      	bcs.n	497a <__mcmp+0x3a>
    496e:	f04f 30ff 	mov.w	r0, #4294967295
    4972:	f85d 4b04 	ldr.w	r4, [sp], #4
    4976:	4770      	bx	lr
    4978:	4770      	bx	lr
    497a:	2001      	movs	r0, #1
    497c:	f85d 4b04 	ldr.w	r4, [sp], #4
    4980:	4770      	bx	lr
    4982:	bf00      	nop

00004984 <__mdiff>:
    4984:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4988:	690f      	ldr	r7, [r1, #16]
    498a:	6913      	ldr	r3, [r2, #16]
    498c:	1aff      	subs	r7, r7, r3
    498e:	2f00      	cmp	r7, #0
    4990:	460e      	mov	r6, r1
    4992:	4690      	mov	r8, r2
    4994:	d17f      	bne.n	4a96 <__mdiff+0x112>
    4996:	f101 0514 	add.w	r5, r1, #20
    499a:	3214      	adds	r2, #20
    499c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    49a0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    49a4:	e001      	b.n	49aa <__mdiff+0x26>
    49a6:	429d      	cmp	r5, r3
    49a8:	d278      	bcs.n	4a9c <__mdiff+0x118>
    49aa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    49ae:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    49b2:	42a1      	cmp	r1, r4
    49b4:	d0f7      	beq.n	49a6 <__mdiff+0x22>
    49b6:	d369      	bcc.n	4a8c <__mdiff+0x108>
    49b8:	6871      	ldr	r1, [r6, #4]
    49ba:	f7ff fd3b 	bl	4434 <_Balloc>
    49be:	4681      	mov	r9, r0
    49c0:	2800      	cmp	r0, #0
    49c2:	d077      	beq.n	4ab4 <__mdiff+0x130>
    49c4:	6935      	ldr	r5, [r6, #16]
    49c6:	f8d8 2010 	ldr.w	r2, [r8, #16]
    49ca:	60c7      	str	r7, [r0, #12]
    49cc:	f108 0e14 	add.w	lr, r8, #20
    49d0:	f106 0014 	add.w	r0, r6, #20
    49d4:	f109 0a14 	add.w	sl, r9, #20
    49d8:	f106 0110 	add.w	r1, r6, #16
    49dc:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    49e0:	eb00 0785 	add.w	r7, r0, r5, lsl #2
    49e4:	4656      	mov	r6, sl
    49e6:	f04f 0c00 	mov.w	ip, #0
    49ea:	f85e 4b04 	ldr.w	r4, [lr], #4
    49ee:	f851 bf04 	ldr.w	fp, [r1, #4]!
    49f2:	b2a3      	uxth	r3, r4
    49f4:	fa1c fc8b 	uxtah	ip, ip, fp
    49f8:	ebac 0303 	sub.w	r3, ip, r3
    49fc:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    4a00:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
    4a04:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
    4a08:	b29b      	uxth	r3, r3
    4a0a:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    4a0e:	4572      	cmp	r2, lr
    4a10:	f846 3b04 	str.w	r3, [r6], #4
    4a14:	ea4f 4c2c 	mov.w	ip, ip, asr #16
    4a18:	d8e7      	bhi.n	49ea <__mdiff+0x66>
    4a1a:	eba2 0108 	sub.w	r1, r2, r8
    4a1e:	3915      	subs	r1, #21
    4a20:	f108 0815 	add.w	r8, r8, #21
    4a24:	4542      	cmp	r2, r8
    4a26:	f021 0403 	bic.w	r4, r1, #3
    4a2a:	f104 0404 	add.w	r4, r4, #4
    4a2e:	bf38      	it	cc
    4a30:	2404      	movcc	r4, #4
    4a32:	4420      	add	r0, r4
    4a34:	f021 0203 	bic.w	r2, r1, #3
    4a38:	bf38      	it	cc
    4a3a:	2200      	movcc	r2, #0
    4a3c:	4287      	cmp	r7, r0
    4a3e:	4452      	add	r2, sl
    4a40:	4454      	add	r4, sl
    4a42:	d918      	bls.n	4a76 <__mdiff+0xf2>
    4a44:	4626      	mov	r6, r4
    4a46:	4601      	mov	r1, r0
    4a48:	f851 3b04 	ldr.w	r3, [r1], #4
    4a4c:	fa1c fc83 	uxtah	ip, ip, r3
    4a50:	ea4f 422c 	mov.w	r2, ip, asr #16
    4a54:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    4a58:	fa1f fc8c 	uxth.w	ip, ip
    4a5c:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
    4a60:	428f      	cmp	r7, r1
    4a62:	f846 3b04 	str.w	r3, [r6], #4
    4a66:	ea4f 4c22 	mov.w	ip, r2, asr #16
    4a6a:	d8ed      	bhi.n	4a48 <__mdiff+0xc4>
    4a6c:	3f01      	subs	r7, #1
    4a6e:	1a3f      	subs	r7, r7, r0
    4a70:	f027 0703 	bic.w	r7, r7, #3
    4a74:	19e2      	adds	r2, r4, r7
    4a76:	b923      	cbnz	r3, 4a82 <__mdiff+0xfe>
    4a78:	f852 3d04 	ldr.w	r3, [r2, #-4]!
    4a7c:	3d01      	subs	r5, #1
    4a7e:	2b00      	cmp	r3, #0
    4a80:	d0fa      	beq.n	4a78 <__mdiff+0xf4>
    4a82:	f8c9 5010 	str.w	r5, [r9, #16]
    4a86:	4648      	mov	r0, r9
    4a88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4a8c:	4633      	mov	r3, r6
    4a8e:	2701      	movs	r7, #1
    4a90:	4646      	mov	r6, r8
    4a92:	4698      	mov	r8, r3
    4a94:	e790      	b.n	49b8 <__mdiff+0x34>
    4a96:	dbf9      	blt.n	4a8c <__mdiff+0x108>
    4a98:	2700      	movs	r7, #0
    4a9a:	e78d      	b.n	49b8 <__mdiff+0x34>
    4a9c:	2100      	movs	r1, #0
    4a9e:	f7ff fcc9 	bl	4434 <_Balloc>
    4aa2:	4681      	mov	r9, r0
    4aa4:	b168      	cbz	r0, 4ac2 <__mdiff+0x13e>
    4aa6:	2201      	movs	r2, #1
    4aa8:	2300      	movs	r3, #0
    4aaa:	e9c9 2304 	strd	r2, r3, [r9, #16]
    4aae:	4648      	mov	r0, r9
    4ab0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4ab4:	4b06      	ldr	r3, [pc, #24]	; (4ad0 <__mdiff+0x14c>)
    4ab6:	4807      	ldr	r0, [pc, #28]	; (4ad4 <__mdiff+0x150>)
    4ab8:	464a      	mov	r2, r9
    4aba:	f240 2145 	movw	r1, #581	; 0x245
    4abe:	f001 ffdb 	bl	6a78 <__assert_func>
    4ac2:	4b03      	ldr	r3, [pc, #12]	; (4ad0 <__mdiff+0x14c>)
    4ac4:	4803      	ldr	r0, [pc, #12]	; (4ad4 <__mdiff+0x150>)
    4ac6:	464a      	mov	r2, r9
    4ac8:	f240 2137 	movw	r1, #567	; 0x237
    4acc:	f001 ffd4 	bl	6a78 <__assert_func>
    4ad0:	20000440 	.word	0x20000440
    4ad4:	20000454 	.word	0x20000454

00004ad8 <__d2b>:
    4ad8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4adc:	4688      	mov	r8, r1
    4ade:	b083      	sub	sp, #12
    4ae0:	2101      	movs	r1, #1
    4ae2:	ec57 6b10 	vmov	r6, r7, d0
    4ae6:	4615      	mov	r5, r2
    4ae8:	f7ff fca4 	bl	4434 <_Balloc>
    4aec:	4604      	mov	r4, r0
    4aee:	2800      	cmp	r0, #0
    4af0:	d051      	beq.n	4b96 <__d2b+0xbe>
    4af2:	f3c7 590a 	ubfx	r9, r7, #20, #11
    4af6:	f3c7 0313 	ubfx	r3, r7, #0, #20
    4afa:	f1b9 0f00 	cmp.w	r9, #0
    4afe:	d001      	beq.n	4b04 <__d2b+0x2c>
    4b00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    4b04:	2e00      	cmp	r6, #0
    4b06:	9301      	str	r3, [sp, #4]
    4b08:	d118      	bne.n	4b3c <__d2b+0x64>
    4b0a:	a801      	add	r0, sp, #4
    4b0c:	f7ff fd34 	bl	4578 <__lo0bits>
    4b10:	9a01      	ldr	r2, [sp, #4]
    4b12:	6162      	str	r2, [r4, #20]
    4b14:	2201      	movs	r2, #1
    4b16:	f100 0320 	add.w	r3, r0, #32
    4b1a:	6122      	str	r2, [r4, #16]
    4b1c:	f1b9 0f00 	cmp.w	r9, #0
    4b20:	d025      	beq.n	4b6e <__d2b+0x96>
    4b22:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
    4b26:	eb09 0203 	add.w	r2, r9, r3
    4b2a:	4620      	mov	r0, r4
    4b2c:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
    4b30:	f8c8 2000 	str.w	r2, [r8]
    4b34:	602b      	str	r3, [r5, #0]
    4b36:	b003      	add	sp, #12
    4b38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4b3c:	4668      	mov	r0, sp
    4b3e:	9600      	str	r6, [sp, #0]
    4b40:	f7ff fd1a 	bl	4578 <__lo0bits>
    4b44:	4603      	mov	r3, r0
    4b46:	b310      	cbz	r0, 4b8e <__d2b+0xb6>
    4b48:	e9dd 0200 	ldrd	r0, r2, [sp]
    4b4c:	f1c3 0120 	rsb	r1, r3, #32
    4b50:	fa02 f101 	lsl.w	r1, r2, r1
    4b54:	4301      	orrs	r1, r0
    4b56:	40da      	lsrs	r2, r3
    4b58:	6161      	str	r1, [r4, #20]
    4b5a:	9201      	str	r2, [sp, #4]
    4b5c:	2a00      	cmp	r2, #0
    4b5e:	61a2      	str	r2, [r4, #24]
    4b60:	bf14      	ite	ne
    4b62:	2202      	movne	r2, #2
    4b64:	2201      	moveq	r2, #1
    4b66:	6122      	str	r2, [r4, #16]
    4b68:	f1b9 0f00 	cmp.w	r9, #0
    4b6c:	d1d9      	bne.n	4b22 <__d2b+0x4a>
    4b6e:	f2a3 4332 	subw	r3, r3, #1074	; 0x432
    4b72:	f8c8 3000 	str.w	r3, [r8]
    4b76:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    4b7a:	6918      	ldr	r0, [r3, #16]
    4b7c:	f7ff fcdc 	bl	4538 <__hi0bits>
    4b80:	ebc0 1342 	rsb	r3, r0, r2, lsl #5
    4b84:	4620      	mov	r0, r4
    4b86:	602b      	str	r3, [r5, #0]
    4b88:	b003      	add	sp, #12
    4b8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4b8e:	9a00      	ldr	r2, [sp, #0]
    4b90:	6162      	str	r2, [r4, #20]
    4b92:	9a01      	ldr	r2, [sp, #4]
    4b94:	e7e2      	b.n	4b5c <__d2b+0x84>
    4b96:	4b03      	ldr	r3, [pc, #12]	; (4ba4 <__d2b+0xcc>)
    4b98:	4803      	ldr	r0, [pc, #12]	; (4ba8 <__d2b+0xd0>)
    4b9a:	4622      	mov	r2, r4
    4b9c:	f240 310f 	movw	r1, #783	; 0x30f
    4ba0:	f001 ff6a 	bl	6a78 <__assert_func>
    4ba4:	20000440 	.word	0x20000440
    4ba8:	20000454 	.word	0x20000454

00004bac <__ascii_wctomb>:
    4bac:	b149      	cbz	r1, 4bc2 <__ascii_wctomb+0x16>
    4bae:	2aff      	cmp	r2, #255	; 0xff
    4bb0:	d802      	bhi.n	4bb8 <__ascii_wctomb+0xc>
    4bb2:	700a      	strb	r2, [r1, #0]
    4bb4:	2001      	movs	r0, #1
    4bb6:	4770      	bx	lr
    4bb8:	238a      	movs	r3, #138	; 0x8a
    4bba:	6003      	str	r3, [r0, #0]
    4bbc:	f04f 30ff 	mov.w	r0, #4294967295
    4bc0:	4770      	bx	lr
    4bc2:	4608      	mov	r0, r1
    4bc4:	4770      	bx	lr
    4bc6:	bf00      	nop

00004bc8 <_svfprintf_r>:
    4bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4bcc:	ed2d 8b08 	vpush	{d8-d11}
    4bd0:	b0d1      	sub	sp, #324	; 0x144
    4bd2:	460c      	mov	r4, r1
    4bd4:	ee0b 1a10 	vmov	s22, r1
    4bd8:	4690      	mov	r8, r2
    4bda:	9308      	str	r3, [sp, #32]
    4bdc:	4683      	mov	fp, r0
    4bde:	f001 febb 	bl	6958 <_localeconv_r>
    4be2:	6803      	ldr	r3, [r0, #0]
    4be4:	9312      	str	r3, [sp, #72]	; 0x48
    4be6:	4618      	mov	r0, r3
    4be8:	f7ff fa4a 	bl	4080 <strlen>
    4bec:	af20      	add	r7, sp, #128	; 0x80
    4bee:	9010      	str	r0, [sp, #64]	; 0x40
    4bf0:	2208      	movs	r2, #8
    4bf2:	2100      	movs	r1, #0
    4bf4:	4638      	mov	r0, r7
    4bf6:	f7fe ff41 	bl	3a7c <memset>
    4bfa:	89a3      	ldrh	r3, [r4, #12]
    4bfc:	061b      	lsls	r3, r3, #24
    4bfe:	d503      	bpl.n	4c08 <_svfprintf_r+0x40>
    4c00:	6923      	ldr	r3, [r4, #16]
    4c02:	2b00      	cmp	r3, #0
    4c04:	f000 8755 	beq.w	5ab2 <_svfprintf_r+0xeea>
    4c08:	2300      	movs	r3, #0
    4c0a:	ed9f 8b83 	vldr	d8, [pc, #524]	; 4e18 <_svfprintf_r+0x250>
    4c0e:	ed9f 9b84 	vldr	d9, [pc, #528]	; 4e20 <_svfprintf_r+0x258>
    4c12:	e9cd 3325 	strd	r3, r3, [sp, #148]	; 0x94
    4c16:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
    4c1a:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
    4c1e:	aa27      	add	r2, sp, #156	; 0x9c
    4c20:	930e      	str	r3, [sp, #56]	; 0x38
    4c22:	9224      	str	r2, [sp, #144]	; 0x90
    4c24:	4692      	mov	sl, r2
    4c26:	9311      	str	r3, [sp, #68]	; 0x44
    4c28:	9304      	str	r3, [sp, #16]
    4c2a:	4644      	mov	r4, r8
    4c2c:	46a1      	mov	r9, r4
    4c2e:	4b7e      	ldr	r3, [pc, #504]	; (4e28 <_svfprintf_r+0x260>)
    4c30:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    4c34:	f7fe fffe 	bl	3c34 <__locale_mb_cur_max>
    4c38:	464a      	mov	r2, r9
    4c3a:	4603      	mov	r3, r0
    4c3c:	a91c      	add	r1, sp, #112	; 0x70
    4c3e:	9700      	str	r7, [sp, #0]
    4c40:	4658      	mov	r0, fp
    4c42:	47a8      	blx	r5
    4c44:	2800      	cmp	r0, #0
    4c46:	f000 80b0 	beq.w	4daa <_svfprintf_r+0x1e2>
    4c4a:	f2c0 80a6 	blt.w	4d9a <_svfprintf_r+0x1d2>
    4c4e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    4c50:	2a25      	cmp	r2, #37	; 0x25
    4c52:	4603      	mov	r3, r0
    4c54:	d001      	beq.n	4c5a <_svfprintf_r+0x92>
    4c56:	4499      	add	r9, r3
    4c58:	e7e9      	b.n	4c2e <_svfprintf_r+0x66>
    4c5a:	ebb9 0504 	subs.w	r5, r9, r4
    4c5e:	4606      	mov	r6, r0
    4c60:	f040 80a7 	bne.w	4db2 <_svfprintf_r+0x1ea>
    4c64:	2300      	movs	r3, #0
    4c66:	f04f 32ff 	mov.w	r2, #4294967295
    4c6a:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    4c6e:	4698      	mov	r8, r3
    4c70:	9306      	str	r3, [sp, #24]
    4c72:	f109 0901 	add.w	r9, r9, #1
    4c76:	f899 3000 	ldrb.w	r3, [r9]
    4c7a:	9203      	str	r2, [sp, #12]
    4c7c:	252b      	movs	r5, #43	; 0x2b
    4c7e:	2620      	movs	r6, #32
    4c80:	f109 0901 	add.w	r9, r9, #1
    4c84:	f1a3 0220 	sub.w	r2, r3, #32
    4c88:	2a5a      	cmp	r2, #90	; 0x5a
    4c8a:	f200 80cf 	bhi.w	4e2c <_svfprintf_r+0x264>
    4c8e:	e8df f012 	tbh	[pc, r2, lsl #1]
    4c92:	02e8      	.short	0x02e8
    4c94:	00cd00cd 	.word	0x00cd00cd
    4c98:	00cd02e3 	.word	0x00cd02e3
    4c9c:	00cd00cd 	.word	0x00cd00cd
    4ca0:	00cd006a 	.word	0x00cd006a
    4ca4:	020500cd 	.word	0x020500cd
    4ca8:	00cd0284 	.word	0x00cd0284
    4cac:	02c90210 	.word	0x02c90210
    4cb0:	02bd00cd 	.word	0x02bd00cd
    4cb4:	005b005b 	.word	0x005b005b
    4cb8:	005b005b 	.word	0x005b005b
    4cbc:	005b005b 	.word	0x005b005b
    4cc0:	005b005b 	.word	0x005b005b
    4cc4:	00cd005b 	.word	0x00cd005b
    4cc8:	00cd00cd 	.word	0x00cd00cd
    4ccc:	00cd00cd 	.word	0x00cd00cd
    4cd0:	00cd00cd 	.word	0x00cd00cd
    4cd4:	00cd0153 	.word	0x00cd0153
    4cd8:	021a0183 	.word	0x021a0183
    4cdc:	01530153 	.word	0x01530153
    4ce0:	00cd0153 	.word	0x00cd0153
    4ce4:	00cd00cd 	.word	0x00cd00cd
    4ce8:	021500cd 	.word	0x021500cd
    4cec:	00cd00cd 	.word	0x00cd00cd
    4cf0:	00cd0296 	.word	0x00cd0296
    4cf4:	00cd00cd 	.word	0x00cd00cd
    4cf8:	00cd01ab 	.word	0x00cd01ab
    4cfc:	00cd02aa 	.word	0x00cd02aa
    4d00:	06e300cd 	.word	0x06e300cd
    4d04:	00cd00cd 	.word	0x00cd00cd
    4d08:	00cd00cd 	.word	0x00cd00cd
    4d0c:	00cd00cd 	.word	0x00cd00cd
    4d10:	00cd00cd 	.word	0x00cd00cd
    4d14:	00cd0153 	.word	0x00cd0153
    4d18:	01de0183 	.word	0x01de0183
    4d1c:	01530153 	.word	0x01530153
    4d20:	02770153 	.word	0x02770153
    4d24:	007f01de 	.word	0x007f01de
    4d28:	028900cd 	.word	0x028900cd
    4d2c:	025f00cd 	.word	0x025f00cd
    4d30:	022f06e0 	.word	0x022f06e0
    4d34:	00cd007f 	.word	0x00cd007f
    4d38:	007c01ab 	.word	0x007c01ab
    4d3c:	00cd06b8 	.word	0x00cd06b8
    4d40:	06bd00cd 	.word	0x06bd00cd
    4d44:	007c00cd 	.word	0x007c00cd
    4d48:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    4d4c:	2100      	movs	r1, #0
    4d4e:	f819 3b01 	ldrb.w	r3, [r9], #1
    4d52:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    4d56:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    4d5a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    4d5e:	2a09      	cmp	r2, #9
    4d60:	d9f5      	bls.n	4d4e <_svfprintf_r+0x186>
    4d62:	9106      	str	r1, [sp, #24]
    4d64:	e78e      	b.n	4c84 <_svfprintf_r+0xbc>
    4d66:	4658      	mov	r0, fp
    4d68:	f001 fdf6 	bl	6958 <_localeconv_r>
    4d6c:	6843      	ldr	r3, [r0, #4]
    4d6e:	9315      	str	r3, [sp, #84]	; 0x54
    4d70:	4618      	mov	r0, r3
    4d72:	f7ff f985 	bl	4080 <strlen>
    4d76:	9016      	str	r0, [sp, #88]	; 0x58
    4d78:	4658      	mov	r0, fp
    4d7a:	f001 fded 	bl	6958 <_localeconv_r>
    4d7e:	6883      	ldr	r3, [r0, #8]
    4d80:	9313      	str	r3, [sp, #76]	; 0x4c
    4d82:	9b16      	ldr	r3, [sp, #88]	; 0x58
    4d84:	2b00      	cmp	r3, #0
    4d86:	f040 862d 	bne.w	59e4 <_svfprintf_r+0xe1c>
    4d8a:	f899 3000 	ldrb.w	r3, [r9]
    4d8e:	e777      	b.n	4c80 <_svfprintf_r+0xb8>
    4d90:	f899 3000 	ldrb.w	r3, [r9]
    4d94:	f048 0820 	orr.w	r8, r8, #32
    4d98:	e772      	b.n	4c80 <_svfprintf_r+0xb8>
    4d9a:	2208      	movs	r2, #8
    4d9c:	2100      	movs	r1, #0
    4d9e:	4638      	mov	r0, r7
    4da0:	f7fe fe6c 	bl	3a7c <memset>
    4da4:	2301      	movs	r3, #1
    4da6:	4499      	add	r9, r3
    4da8:	e741      	b.n	4c2e <_svfprintf_r+0x66>
    4daa:	ebb9 0504 	subs.w	r5, r9, r4
    4dae:	4606      	mov	r6, r0
    4db0:	d011      	beq.n	4dd6 <_svfprintf_r+0x20e>
    4db2:	9b26      	ldr	r3, [sp, #152]	; 0x98
    4db4:	442b      	add	r3, r5
    4db6:	9326      	str	r3, [sp, #152]	; 0x98
    4db8:	9b25      	ldr	r3, [sp, #148]	; 0x94
    4dba:	3301      	adds	r3, #1
    4dbc:	2b07      	cmp	r3, #7
    4dbe:	e9ca 4500 	strd	r4, r5, [sl]
    4dc2:	9325      	str	r3, [sp, #148]	; 0x94
    4dc4:	dc1c      	bgt.n	4e00 <_svfprintf_r+0x238>
    4dc6:	f10a 0a08 	add.w	sl, sl, #8
    4dca:	9b04      	ldr	r3, [sp, #16]
    4dcc:	442b      	add	r3, r5
    4dce:	9304      	str	r3, [sp, #16]
    4dd0:	2e00      	cmp	r6, #0
    4dd2:	f47f af47 	bne.w	4c64 <_svfprintf_r+0x9c>
    4dd6:	9b26      	ldr	r3, [sp, #152]	; 0x98
    4dd8:	2b00      	cmp	r3, #0
    4dda:	f041 820b 	bne.w	61f4 <_svfprintf_r+0x162c>
    4dde:	ee1b 3a10 	vmov	r3, s22
    4de2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    4de6:	f013 0f40 	tst.w	r3, #64	; 0x40
    4dea:	9b04      	ldr	r3, [sp, #16]
    4dec:	bf18      	it	ne
    4dee:	f04f 33ff 	movne.w	r3, #4294967295
    4df2:	9304      	str	r3, [sp, #16]
    4df4:	9804      	ldr	r0, [sp, #16]
    4df6:	b051      	add	sp, #324	; 0x144
    4df8:	ecbd 8b08 	vpop	{d8-d11}
    4dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4e00:	ee1b 1a10 	vmov	r1, s22
    4e04:	aa24      	add	r2, sp, #144	; 0x90
    4e06:	4658      	mov	r0, fp
    4e08:	f002 fde2 	bl	79d0 <__ssprint_r>
    4e0c:	2800      	cmp	r0, #0
    4e0e:	d1e6      	bne.n	4dde <_svfprintf_r+0x216>
    4e10:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    4e14:	e7d9      	b.n	4dca <_svfprintf_r+0x202>
    4e16:	bf00      	nop
	...
    4e20:	ffffffff 	.word	0xffffffff
    4e24:	7fefffff 	.word	0x7fefffff
    4e28:	20000fb4 	.word	0x20000fb4
    4e2c:	930b      	str	r3, [sp, #44]	; 0x2c
    4e2e:	2b00      	cmp	r3, #0
    4e30:	d0d1      	beq.n	4dd6 <_svfprintf_r+0x20e>
    4e32:	2100      	movs	r1, #0
    4e34:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    4e38:	f88d 30dc 	strb.w	r3, [sp, #220]	; 0xdc
    4e3c:	2301      	movs	r3, #1
    4e3e:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    4e42:	9302      	str	r3, [sp, #8]
    4e44:	9107      	str	r1, [sp, #28]
    4e46:	9305      	str	r3, [sp, #20]
    4e48:	9103      	str	r1, [sp, #12]
    4e4a:	910f      	str	r1, [sp, #60]	; 0x3c
    4e4c:	ac37      	add	r4, sp, #220	; 0xdc
    4e4e:	f018 0302 	ands.w	r3, r8, #2
    4e52:	9309      	str	r3, [sp, #36]	; 0x24
    4e54:	d002      	beq.n	4e5c <_svfprintf_r+0x294>
    4e56:	9b02      	ldr	r3, [sp, #8]
    4e58:	3302      	adds	r3, #2
    4e5a:	9302      	str	r3, [sp, #8]
    4e5c:	f018 0384 	ands.w	r3, r8, #132	; 0x84
    4e60:	930a      	str	r3, [sp, #40]	; 0x28
    4e62:	d105      	bne.n	4e70 <_svfprintf_r+0x2a8>
    4e64:	9b06      	ldr	r3, [sp, #24]
    4e66:	9a02      	ldr	r2, [sp, #8]
    4e68:	1a9d      	subs	r5, r3, r2
    4e6a:	2d00      	cmp	r5, #0
    4e6c:	f300 8369 	bgt.w	5542 <_svfprintf_r+0x97a>
    4e70:	9a26      	ldr	r2, [sp, #152]	; 0x98
    4e72:	b189      	cbz	r1, 4e98 <_svfprintf_r+0x2d0>
    4e74:	9925      	ldr	r1, [sp, #148]	; 0x94
    4e76:	f10d 0067 	add.w	r0, sp, #103	; 0x67
    4e7a:	3101      	adds	r1, #1
    4e7c:	3201      	adds	r2, #1
    4e7e:	f8ca 0000 	str.w	r0, [sl]
    4e82:	2907      	cmp	r1, #7
    4e84:	f04f 0001 	mov.w	r0, #1
    4e88:	9226      	str	r2, [sp, #152]	; 0x98
    4e8a:	9125      	str	r1, [sp, #148]	; 0x94
    4e8c:	f8ca 0004 	str.w	r0, [sl, #4]
    4e90:	f300 83a2 	bgt.w	55d8 <_svfprintf_r+0xa10>
    4e94:	f10a 0a08 	add.w	sl, sl, #8
    4e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4e9a:	b183      	cbz	r3, 4ebe <_svfprintf_r+0x2f6>
    4e9c:	9b25      	ldr	r3, [sp, #148]	; 0x94
    4e9e:	a91a      	add	r1, sp, #104	; 0x68
    4ea0:	3301      	adds	r3, #1
    4ea2:	3202      	adds	r2, #2
    4ea4:	f8ca 1000 	str.w	r1, [sl]
    4ea8:	2b07      	cmp	r3, #7
    4eaa:	f04f 0102 	mov.w	r1, #2
    4eae:	9226      	str	r2, [sp, #152]	; 0x98
    4eb0:	9325      	str	r3, [sp, #148]	; 0x94
    4eb2:	f8ca 1004 	str.w	r1, [sl, #4]
    4eb6:	f300 83a3 	bgt.w	5600 <_svfprintf_r+0xa38>
    4eba:	f10a 0a08 	add.w	sl, sl, #8
    4ebe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4ec0:	2b80      	cmp	r3, #128	; 0x80
    4ec2:	f000 826c 	beq.w	539e <_svfprintf_r+0x7d6>
    4ec6:	9b03      	ldr	r3, [sp, #12]
    4ec8:	9905      	ldr	r1, [sp, #20]
    4eca:	1a5d      	subs	r5, r3, r1
    4ecc:	2d00      	cmp	r5, #0
    4ece:	f300 82a5 	bgt.w	541c <_svfprintf_r+0x854>
    4ed2:	f418 7f80 	tst.w	r8, #256	; 0x100
    4ed6:	f040 820d 	bne.w	52f4 <_svfprintf_r+0x72c>
    4eda:	9b05      	ldr	r3, [sp, #20]
    4edc:	f8ca 3004 	str.w	r3, [sl, #4]
    4ee0:	441a      	add	r2, r3
    4ee2:	9b25      	ldr	r3, [sp, #148]	; 0x94
    4ee4:	f8ca 4000 	str.w	r4, [sl]
    4ee8:	3301      	adds	r3, #1
    4eea:	2b07      	cmp	r3, #7
    4eec:	9226      	str	r2, [sp, #152]	; 0x98
    4eee:	9325      	str	r3, [sp, #148]	; 0x94
    4ef0:	f300 831b 	bgt.w	552a <_svfprintf_r+0x962>
    4ef4:	f10a 0a08 	add.w	sl, sl, #8
    4ef8:	f018 0f04 	tst.w	r8, #4
    4efc:	d005      	beq.n	4f0a <_svfprintf_r+0x342>
    4efe:	9b06      	ldr	r3, [sp, #24]
    4f00:	9902      	ldr	r1, [sp, #8]
    4f02:	1a5c      	subs	r4, r3, r1
    4f04:	2c00      	cmp	r4, #0
    4f06:	f300 8388 	bgt.w	561a <_svfprintf_r+0xa52>
    4f0a:	9b04      	ldr	r3, [sp, #16]
    4f0c:	9906      	ldr	r1, [sp, #24]
    4f0e:	9802      	ldr	r0, [sp, #8]
    4f10:	4281      	cmp	r1, r0
    4f12:	bfac      	ite	ge
    4f14:	185b      	addge	r3, r3, r1
    4f16:	181b      	addlt	r3, r3, r0
    4f18:	9304      	str	r3, [sp, #16]
    4f1a:	2a00      	cmp	r2, #0
    4f1c:	f040 82b0 	bne.w	5480 <_svfprintf_r+0x8b8>
    4f20:	2300      	movs	r3, #0
    4f22:	9325      	str	r3, [sp, #148]	; 0x94
    4f24:	9b07      	ldr	r3, [sp, #28]
    4f26:	b11b      	cbz	r3, 4f30 <_svfprintf_r+0x368>
    4f28:	9907      	ldr	r1, [sp, #28]
    4f2a:	4658      	mov	r0, fp
    4f2c:	f7ff f966 	bl	41fc <_free_r>
    4f30:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    4f34:	464c      	mov	r4, r9
    4f36:	e679      	b.n	4c2c <_svfprintf_r+0x64>
    4f38:	930b      	str	r3, [sp, #44]	; 0x2c
    4f3a:	9b08      	ldr	r3, [sp, #32]
    4f3c:	3307      	adds	r3, #7
    4f3e:	f023 0307 	bic.w	r3, r3, #7
    4f42:	ecb3 8b02 	vldmia	r3!, {d8}
    4f46:	eeb0 7bc8 	vabs.f64	d7, d8
    4f4a:	eeb4 7b49 	vcmp.f64	d7, d9
    4f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4f52:	9308      	str	r3, [sp, #32]
    4f54:	f340 84e9 	ble.w	592a <_svfprintf_r+0xd62>
    4f58:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
    4f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4f60:	f101 8059 	bmi.w	6016 <_svfprintf_r+0x144e>
    4f64:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    4f68:	4cab      	ldr	r4, [pc, #684]	; (5218 <_svfprintf_r+0x650>)
    4f6a:	4bac      	ldr	r3, [pc, #688]	; (521c <_svfprintf_r+0x654>)
    4f6c:	f028 0880 	bic.w	r8, r8, #128	; 0x80
    4f70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4f72:	2a47      	cmp	r2, #71	; 0x47
    4f74:	bfc8      	it	gt
    4f76:	461c      	movgt	r4, r3
    4f78:	2300      	movs	r3, #0
    4f7a:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    4f7e:	2203      	movs	r2, #3
    4f80:	9307      	str	r3, [sp, #28]
    4f82:	9202      	str	r2, [sp, #8]
    4f84:	9205      	str	r2, [sp, #20]
    4f86:	9303      	str	r3, [sp, #12]
    4f88:	930f      	str	r3, [sp, #60]	; 0x3c
    4f8a:	2900      	cmp	r1, #0
    4f8c:	f43f af5f 	beq.w	4e4e <_svfprintf_r+0x286>
    4f90:	9b02      	ldr	r3, [sp, #8]
    4f92:	3301      	adds	r3, #1
    4f94:	9302      	str	r3, [sp, #8]
    4f96:	e75a      	b.n	4e4e <_svfprintf_r+0x286>
    4f98:	2b43      	cmp	r3, #67	; 0x43
    4f9a:	930b      	str	r3, [sp, #44]	; 0x2c
    4f9c:	d003      	beq.n	4fa6 <_svfprintf_r+0x3de>
    4f9e:	f018 0f10 	tst.w	r8, #16
    4fa2:	f000 855d 	beq.w	5a60 <_svfprintf_r+0xe98>
    4fa6:	9d08      	ldr	r5, [sp, #32]
    4fa8:	2208      	movs	r2, #8
    4faa:	2100      	movs	r1, #0
    4fac:	a822      	add	r0, sp, #136	; 0x88
    4fae:	ac37      	add	r4, sp, #220	; 0xdc
    4fb0:	f7fe fd64 	bl	3a7c <memset>
    4fb4:	ab22      	add	r3, sp, #136	; 0x88
    4fb6:	f855 2b04 	ldr.w	r2, [r5], #4
    4fba:	4621      	mov	r1, r4
    4fbc:	4658      	mov	r0, fp
    4fbe:	f002 fcc1 	bl	7944 <_wcrtomb_r>
    4fc2:	4603      	mov	r3, r0
    4fc4:	3301      	adds	r3, #1
    4fc6:	9005      	str	r0, [sp, #20]
    4fc8:	f001 82ee 	beq.w	65a8 <_svfprintf_r+0x19e0>
    4fcc:	9b05      	ldr	r3, [sp, #20]
    4fce:	9508      	str	r5, [sp, #32]
    4fd0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    4fd4:	9302      	str	r3, [sp, #8]
    4fd6:	2100      	movs	r1, #0
    4fd8:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    4fdc:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    4fe0:	9107      	str	r1, [sp, #28]
    4fe2:	9103      	str	r1, [sp, #12]
    4fe4:	910f      	str	r1, [sp, #60]	; 0x3c
    4fe6:	e732      	b.n	4e4e <_svfprintf_r+0x286>
    4fe8:	930b      	str	r3, [sp, #44]	; 0x2c
    4fea:	9b08      	ldr	r3, [sp, #32]
    4fec:	461a      	mov	r2, r3
    4fee:	2300      	movs	r3, #0
    4ff0:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    4ff4:	4613      	mov	r3, r2
    4ff6:	f853 4b04 	ldr.w	r4, [r3], #4
    4ffa:	9308      	str	r3, [sp, #32]
    4ffc:	2c00      	cmp	r4, #0
    4ffe:	f000 8548 	beq.w	5a92 <_svfprintf_r+0xeca>
    5002:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5004:	2b53      	cmp	r3, #83	; 0x53
    5006:	f000 86ec 	beq.w	5de2 <_svfprintf_r+0x121a>
    500a:	f018 0310 	ands.w	r3, r8, #16
    500e:	930c      	str	r3, [sp, #48]	; 0x30
    5010:	f040 86e7 	bne.w	5de2 <_svfprintf_r+0x121a>
    5014:	9b03      	ldr	r3, [sp, #12]
    5016:	1c5d      	adds	r5, r3, #1
    5018:	f001 80e5 	beq.w	61e6 <_svfprintf_r+0x161e>
    501c:	990c      	ldr	r1, [sp, #48]	; 0x30
    501e:	461a      	mov	r2, r3
    5020:	4620      	mov	r0, r4
    5022:	f001 fc9d 	bl	6960 <memchr>
    5026:	9007      	str	r0, [sp, #28]
    5028:	2800      	cmp	r0, #0
    502a:	f001 8328 	beq.w	667e <_svfprintf_r+0x1ab6>
    502e:	9b07      	ldr	r3, [sp, #28]
    5030:	1b1a      	subs	r2, r3, r4
    5032:	9205      	str	r2, [sp, #20]
    5034:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5036:	9303      	str	r3, [sp, #12]
    5038:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    503c:	930f      	str	r3, [sp, #60]	; 0x3c
    503e:	930d      	str	r3, [sp, #52]	; 0x34
    5040:	9307      	str	r3, [sp, #28]
    5042:	2373      	movs	r3, #115	; 0x73
    5044:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    5048:	9202      	str	r2, [sp, #8]
    504a:	930b      	str	r3, [sp, #44]	; 0x2c
    504c:	e79d      	b.n	4f8a <_svfprintf_r+0x3c2>
    504e:	f018 0f20 	tst.w	r8, #32
    5052:	930b      	str	r3, [sp, #44]	; 0x2c
    5054:	9b08      	ldr	r3, [sp, #32]
    5056:	d03d      	beq.n	50d4 <_svfprintf_r+0x50c>
    5058:	3307      	adds	r3, #7
    505a:	f023 0307 	bic.w	r3, r3, #7
    505e:	461a      	mov	r2, r3
    5060:	4611      	mov	r1, r2
    5062:	685b      	ldr	r3, [r3, #4]
    5064:	f851 2b08 	ldr.w	r2, [r1], #8
    5068:	9108      	str	r1, [sp, #32]
    506a:	4619      	mov	r1, r3
    506c:	2b00      	cmp	r3, #0
    506e:	f2c0 840c 	blt.w	588a <_svfprintf_r+0xcc2>
    5072:	9b03      	ldr	r3, [sp, #12]
    5074:	3301      	adds	r3, #1
    5076:	f000 829e 	beq.w	55b6 <_svfprintf_r+0x9ee>
    507a:	f028 0080 	bic.w	r0, r8, #128	; 0x80
    507e:	ea52 0301 	orrs.w	r3, r2, r1
    5082:	9002      	str	r0, [sp, #8]
    5084:	f040 8299 	bne.w	55ba <_svfprintf_r+0x9f2>
    5088:	9b03      	ldr	r3, [sp, #12]
    508a:	2b00      	cmp	r3, #0
    508c:	f040 829a 	bne.w	55c4 <_svfprintf_r+0x9fc>
    5090:	4680      	mov	r8, r0
    5092:	2300      	movs	r3, #0
    5094:	9303      	str	r3, [sp, #12]
    5096:	9305      	str	r3, [sp, #20]
    5098:	ac50      	add	r4, sp, #320	; 0x140
    509a:	e106      	b.n	52aa <_svfprintf_r+0x6e2>
    509c:	9b08      	ldr	r3, [sp, #32]
    509e:	f853 2b04 	ldr.w	r2, [r3], #4
    50a2:	9206      	str	r2, [sp, #24]
    50a4:	2a00      	cmp	r2, #0
    50a6:	f280 8419 	bge.w	58dc <_svfprintf_r+0xd14>
    50aa:	9a06      	ldr	r2, [sp, #24]
    50ac:	9308      	str	r3, [sp, #32]
    50ae:	4252      	negs	r2, r2
    50b0:	9206      	str	r2, [sp, #24]
    50b2:	f899 3000 	ldrb.w	r3, [r9]
    50b6:	f048 0804 	orr.w	r8, r8, #4
    50ba:	e5e1      	b.n	4c80 <_svfprintf_r+0xb8>
    50bc:	f899 3000 	ldrb.w	r3, [r9]
    50c0:	f048 0808 	orr.w	r8, r8, #8
    50c4:	e5dc      	b.n	4c80 <_svfprintf_r+0xb8>
    50c6:	f048 0810 	orr.w	r8, r8, #16
    50ca:	f018 0f20 	tst.w	r8, #32
    50ce:	930b      	str	r3, [sp, #44]	; 0x2c
    50d0:	9b08      	ldr	r3, [sp, #32]
    50d2:	d1c1      	bne.n	5058 <_svfprintf_r+0x490>
    50d4:	f018 0f10 	tst.w	r8, #16
    50d8:	f040 840b 	bne.w	58f2 <_svfprintf_r+0xd2a>
    50dc:	f018 0f40 	tst.w	r8, #64	; 0x40
    50e0:	f000 8403 	beq.w	58ea <_svfprintf_r+0xd22>
    50e4:	f933 2b04 	ldrsh.w	r2, [r3], #4
    50e8:	9308      	str	r3, [sp, #32]
    50ea:	17d1      	asrs	r1, r2, #31
    50ec:	460b      	mov	r3, r1
    50ee:	e7bd      	b.n	506c <_svfprintf_r+0x4a4>
    50f0:	9b08      	ldr	r3, [sp, #32]
    50f2:	f048 0202 	orr.w	r2, r8, #2
    50f6:	9202      	str	r2, [sp, #8]
    50f8:	f853 2b04 	ldr.w	r2, [r3], #4
    50fc:	9308      	str	r3, [sp, #32]
    50fe:	f647 0330 	movw	r3, #30768	; 0x7830
    5102:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    5106:	2078      	movs	r0, #120	; 0x78
    5108:	4b45      	ldr	r3, [pc, #276]	; (5220 <_svfprintf_r+0x658>)
    510a:	9311      	str	r3, [sp, #68]	; 0x44
    510c:	2100      	movs	r1, #0
    510e:	2302      	movs	r3, #2
    5110:	900b      	str	r0, [sp, #44]	; 0x2c
    5112:	2000      	movs	r0, #0
    5114:	9c03      	ldr	r4, [sp, #12]
    5116:	f88d 0067 	strb.w	r0, [sp, #103]	; 0x67
    511a:	1c60      	adds	r0, r4, #1
    511c:	f000 80ad 	beq.w	527a <_svfprintf_r+0x6b2>
    5120:	9802      	ldr	r0, [sp, #8]
    5122:	f020 0880 	bic.w	r8, r0, #128	; 0x80
    5126:	ea52 0001 	orrs.w	r0, r2, r1
    512a:	f040 80a4 	bne.w	5276 <_svfprintf_r+0x6ae>
    512e:	2c00      	cmp	r4, #0
    5130:	f040 86ae 	bne.w	5e90 <_svfprintf_r+0x12c8>
    5134:	2b00      	cmp	r3, #0
    5136:	d1ac      	bne.n	5092 <_svfprintf_r+0x4ca>
    5138:	9b02      	ldr	r3, [sp, #8]
    513a:	f013 0301 	ands.w	r3, r3, #1
    513e:	9305      	str	r3, [sp, #20]
    5140:	f000 83d1 	beq.w	58e6 <_svfprintf_r+0xd1e>
    5144:	2330      	movs	r3, #48	; 0x30
    5146:	f88d 313f 	strb.w	r3, [sp, #319]	; 0x13f
    514a:	f20d 143f 	addw	r4, sp, #319	; 0x13f
    514e:	e0ac      	b.n	52aa <_svfprintf_r+0x6e2>
    5150:	f018 0f20 	tst.w	r8, #32
    5154:	f040 83d4 	bne.w	5900 <_svfprintf_r+0xd38>
    5158:	f018 0f10 	tst.w	r8, #16
    515c:	f040 869f 	bne.w	5e9e <_svfprintf_r+0x12d6>
    5160:	f018 0f40 	tst.w	r8, #64	; 0x40
    5164:	f040 8797 	bne.w	6096 <_svfprintf_r+0x14ce>
    5168:	f418 7f00 	tst.w	r8, #512	; 0x200
    516c:	f000 8697 	beq.w	5e9e <_svfprintf_r+0x12d6>
    5170:	9b08      	ldr	r3, [sp, #32]
    5172:	9904      	ldr	r1, [sp, #16]
    5174:	f853 2b04 	ldr.w	r2, [r3], #4
    5178:	9308      	str	r3, [sp, #32]
    517a:	7011      	strb	r1, [r2, #0]
    517c:	464c      	mov	r4, r9
    517e:	e555      	b.n	4c2c <_svfprintf_r+0x64>
    5180:	f899 3000 	ldrb.w	r3, [r9]
    5184:	2b68      	cmp	r3, #104	; 0x68
    5186:	bf03      	ittte	eq
    5188:	f899 3001 	ldrbeq.w	r3, [r9, #1]
    518c:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
    5190:	f109 0901 	addeq.w	r9, r9, #1
    5194:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
    5198:	e572      	b.n	4c80 <_svfprintf_r+0xb8>
    519a:	f899 3000 	ldrb.w	r3, [r9]
    519e:	f88d 5067 	strb.w	r5, [sp, #103]	; 0x67
    51a2:	e56d      	b.n	4c80 <_svfprintf_r+0xb8>
    51a4:	f899 3000 	ldrb.w	r3, [r9]
    51a8:	2b6c      	cmp	r3, #108	; 0x6c
    51aa:	bf03      	ittte	eq
    51ac:	f899 3001 	ldrbeq.w	r3, [r9, #1]
    51b0:	f048 0820 	orreq.w	r8, r8, #32
    51b4:	f109 0901 	addeq.w	r9, r9, #1
    51b8:	f048 0810 	orrne.w	r8, r8, #16
    51bc:	e560      	b.n	4c80 <_svfprintf_r+0xb8>
    51be:	930b      	str	r3, [sp, #44]	; 0x2c
    51c0:	f048 0810 	orr.w	r8, r8, #16
    51c4:	f018 0120 	ands.w	r1, r8, #32
    51c8:	f000 8351 	beq.w	586e <_svfprintf_r+0xca6>
    51cc:	9b08      	ldr	r3, [sp, #32]
    51ce:	3307      	adds	r3, #7
    51d0:	f023 0307 	bic.w	r3, r3, #7
    51d4:	6859      	ldr	r1, [r3, #4]
    51d6:	f853 2b08 	ldr.w	r2, [r3], #8
    51da:	9308      	str	r3, [sp, #32]
    51dc:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
    51e0:	9302      	str	r3, [sp, #8]
    51e2:	2300      	movs	r3, #0
    51e4:	e795      	b.n	5112 <_svfprintf_r+0x54a>
    51e6:	930b      	str	r3, [sp, #44]	; 0x2c
    51e8:	f048 0310 	orr.w	r3, r8, #16
    51ec:	9302      	str	r3, [sp, #8]
    51ee:	9b02      	ldr	r3, [sp, #8]
    51f0:	f013 0120 	ands.w	r1, r3, #32
    51f4:	f000 8329 	beq.w	584a <_svfprintf_r+0xc82>
    51f8:	9b08      	ldr	r3, [sp, #32]
    51fa:	3307      	adds	r3, #7
    51fc:	f023 0307 	bic.w	r3, r3, #7
    5200:	6859      	ldr	r1, [r3, #4]
    5202:	f853 2b08 	ldr.w	r2, [r3], #8
    5206:	9308      	str	r3, [sp, #32]
    5208:	2301      	movs	r3, #1
    520a:	e782      	b.n	5112 <_svfprintf_r+0x54a>
    520c:	f899 3000 	ldrb.w	r3, [r9]
    5210:	f048 0880 	orr.w	r8, r8, #128	; 0x80
    5214:	e534      	b.n	4c80 <_svfprintf_r+0xb8>
    5216:	bf00      	nop
    5218:	20000620 	.word	0x20000620
    521c:	20000624 	.word	0x20000624
    5220:	20000630 	.word	0x20000630
    5224:	4649      	mov	r1, r9
    5226:	f811 3b01 	ldrb.w	r3, [r1], #1
    522a:	2b2a      	cmp	r3, #42	; 0x2a
    522c:	f001 8249 	beq.w	66c2 <_svfprintf_r+0x1afa>
    5230:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    5234:	2a09      	cmp	r2, #9
    5236:	4689      	mov	r9, r1
    5238:	bf98      	it	ls
    523a:	2100      	movls	r1, #0
    523c:	f201 8144 	bhi.w	64c8 <_svfprintf_r+0x1900>
    5240:	f819 3b01 	ldrb.w	r3, [r9], #1
    5244:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    5248:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    524c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    5250:	2a09      	cmp	r2, #9
    5252:	d9f5      	bls.n	5240 <_svfprintf_r+0x678>
    5254:	9103      	str	r1, [sp, #12]
    5256:	e515      	b.n	4c84 <_svfprintf_r+0xbc>
    5258:	f899 3000 	ldrb.w	r3, [r9]
    525c:	f048 0801 	orr.w	r8, r8, #1
    5260:	e50e      	b.n	4c80 <_svfprintf_r+0xb8>
    5262:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
    5266:	2b00      	cmp	r3, #0
    5268:	f47f ad8f 	bne.w	4d8a <_svfprintf_r+0x1c2>
    526c:	f899 3000 	ldrb.w	r3, [r9]
    5270:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
    5274:	e504      	b.n	4c80 <_svfprintf_r+0xb8>
    5276:	f8cd 8008 	str.w	r8, [sp, #8]
    527a:	2b01      	cmp	r3, #1
    527c:	f000 819d 	beq.w	55ba <_svfprintf_r+0x9f2>
    5280:	2b02      	cmp	r3, #2
    5282:	ac50      	add	r4, sp, #320	; 0x140
    5284:	d120      	bne.n	52c8 <_svfprintf_r+0x700>
    5286:	9811      	ldr	r0, [sp, #68]	; 0x44
    5288:	f002 030f 	and.w	r3, r2, #15
    528c:	0912      	lsrs	r2, r2, #4
    528e:	5cc3      	ldrb	r3, [r0, r3]
    5290:	f804 3d01 	strb.w	r3, [r4, #-1]!
    5294:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    5298:	0909      	lsrs	r1, r1, #4
    529a:	ea52 0301 	orrs.w	r3, r2, r1
    529e:	d1f3      	bne.n	5288 <_svfprintf_r+0x6c0>
    52a0:	ab50      	add	r3, sp, #320	; 0x140
    52a2:	1b1b      	subs	r3, r3, r4
    52a4:	f8dd 8008 	ldr.w	r8, [sp, #8]
    52a8:	9305      	str	r3, [sp, #20]
    52aa:	9a05      	ldr	r2, [sp, #20]
    52ac:	9803      	ldr	r0, [sp, #12]
    52ae:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    52b2:	4282      	cmp	r2, r0
    52b4:	f04f 0300 	mov.w	r3, #0
    52b8:	bfb8      	it	lt
    52ba:	4602      	movlt	r2, r0
    52bc:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    52c0:	9307      	str	r3, [sp, #28]
    52c2:	9202      	str	r2, [sp, #8]
    52c4:	930f      	str	r3, [sp, #60]	; 0x3c
    52c6:	e660      	b.n	4f8a <_svfprintf_r+0x3c2>
    52c8:	f002 0307 	and.w	r3, r2, #7
    52cc:	08d2      	lsrs	r2, r2, #3
    52ce:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    52d2:	08c9      	lsrs	r1, r1, #3
    52d4:	3330      	adds	r3, #48	; 0x30
    52d6:	ea52 0501 	orrs.w	r5, r2, r1
    52da:	4620      	mov	r0, r4
    52dc:	f804 3d01 	strb.w	r3, [r4, #-1]!
    52e0:	d1f2      	bne.n	52c8 <_svfprintf_r+0x700>
    52e2:	9a02      	ldr	r2, [sp, #8]
    52e4:	07d1      	lsls	r1, r2, #31
    52e6:	f100 824d 	bmi.w	5784 <_svfprintf_r+0xbbc>
    52ea:	ab50      	add	r3, sp, #320	; 0x140
    52ec:	1b1b      	subs	r3, r3, r4
    52ee:	4690      	mov	r8, r2
    52f0:	9305      	str	r3, [sp, #20]
    52f2:	e7da      	b.n	52aa <_svfprintf_r+0x6e2>
    52f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    52f6:	2b65      	cmp	r3, #101	; 0x65
    52f8:	f340 80d4 	ble.w	54a4 <_svfprintf_r+0x8dc>
    52fc:	eeb5 8b40 	vcmp.f64	d8, #0.0
    5300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5304:	f040 81c1 	bne.w	568a <_svfprintf_r+0xac2>
    5308:	9b25      	ldr	r3, [sp, #148]	; 0x94
    530a:	49ba      	ldr	r1, [pc, #744]	; (55f4 <_svfprintf_r+0xa2c>)
    530c:	f8ca 1000 	str.w	r1, [sl]
    5310:	3301      	adds	r3, #1
    5312:	3201      	adds	r2, #1
    5314:	2101      	movs	r1, #1
    5316:	2b07      	cmp	r3, #7
    5318:	9226      	str	r2, [sp, #152]	; 0x98
    531a:	9325      	str	r3, [sp, #148]	; 0x94
    531c:	f8ca 1004 	str.w	r1, [sl, #4]
    5320:	f300 8551 	bgt.w	5dc6 <_svfprintf_r+0x11fe>
    5324:	f10a 0a08 	add.w	sl, sl, #8
    5328:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    532a:	990e      	ldr	r1, [sp, #56]	; 0x38
    532c:	428b      	cmp	r3, r1
    532e:	f280 82d0 	bge.w	58d2 <_svfprintf_r+0xd0a>
    5332:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5334:	9912      	ldr	r1, [sp, #72]	; 0x48
    5336:	441a      	add	r2, r3
    5338:	e9ca 1300 	strd	r1, r3, [sl]
    533c:	9b25      	ldr	r3, [sp, #148]	; 0x94
    533e:	9226      	str	r2, [sp, #152]	; 0x98
    5340:	3301      	adds	r3, #1
    5342:	2b07      	cmp	r3, #7
    5344:	9325      	str	r3, [sp, #148]	; 0x94
    5346:	f300 8397 	bgt.w	5a78 <_svfprintf_r+0xeb0>
    534a:	f10a 0a08 	add.w	sl, sl, #8
    534e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    5350:	1e5c      	subs	r4, r3, #1
    5352:	2c00      	cmp	r4, #0
    5354:	f77f add0 	ble.w	4ef8 <_svfprintf_r+0x330>
    5358:	2c10      	cmp	r4, #16
    535a:	9b25      	ldr	r3, [sp, #148]	; 0x94
    535c:	f340 856e 	ble.w	5e3c <_svfprintf_r+0x1274>
    5360:	ee1b 6a10 	vmov	r6, s22
    5364:	2510      	movs	r5, #16
    5366:	e005      	b.n	5374 <_svfprintf_r+0x7ac>
    5368:	f10a 0a08 	add.w	sl, sl, #8
    536c:	3c10      	subs	r4, #16
    536e:	2c10      	cmp	r4, #16
    5370:	f340 8564 	ble.w	5e3c <_svfprintf_r+0x1274>
    5374:	3301      	adds	r3, #1
    5376:	49a0      	ldr	r1, [pc, #640]	; (55f8 <_svfprintf_r+0xa30>)
    5378:	3210      	adds	r2, #16
    537a:	2b07      	cmp	r3, #7
    537c:	e9ca 1500 	strd	r1, r5, [sl]
    5380:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    5384:	ddf0      	ble.n	5368 <_svfprintf_r+0x7a0>
    5386:	aa24      	add	r2, sp, #144	; 0x90
    5388:	4631      	mov	r1, r6
    538a:	4658      	mov	r0, fp
    538c:	f002 fb20 	bl	79d0 <__ssprint_r>
    5390:	2800      	cmp	r0, #0
    5392:	d17e      	bne.n	5492 <_svfprintf_r+0x8ca>
    5394:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    5398:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    539c:	e7e6      	b.n	536c <_svfprintf_r+0x7a4>
    539e:	9b06      	ldr	r3, [sp, #24]
    53a0:	9902      	ldr	r1, [sp, #8]
    53a2:	1a5d      	subs	r5, r3, r1
    53a4:	2d00      	cmp	r5, #0
    53a6:	f77f ad8e 	ble.w	4ec6 <_svfprintf_r+0x2fe>
    53aa:	2d10      	cmp	r5, #16
    53ac:	9b25      	ldr	r3, [sp, #148]	; 0x94
    53ae:	dd21      	ble.n	53f4 <_svfprintf_r+0x82c>
    53b0:	9409      	str	r4, [sp, #36]	; 0x24
    53b2:	2610      	movs	r6, #16
    53b4:	ee1b 4a10 	vmov	r4, s22
    53b8:	e004      	b.n	53c4 <_svfprintf_r+0x7fc>
    53ba:	3d10      	subs	r5, #16
    53bc:	2d10      	cmp	r5, #16
    53be:	f10a 0a08 	add.w	sl, sl, #8
    53c2:	dd16      	ble.n	53f2 <_svfprintf_r+0x82a>
    53c4:	3301      	adds	r3, #1
    53c6:	498c      	ldr	r1, [pc, #560]	; (55f8 <_svfprintf_r+0xa30>)
    53c8:	3210      	adds	r2, #16
    53ca:	2b07      	cmp	r3, #7
    53cc:	e9ca 1600 	strd	r1, r6, [sl]
    53d0:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    53d4:	ddf1      	ble.n	53ba <_svfprintf_r+0x7f2>
    53d6:	aa24      	add	r2, sp, #144	; 0x90
    53d8:	4621      	mov	r1, r4
    53da:	4658      	mov	r0, fp
    53dc:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    53e0:	f002 faf6 	bl	79d0 <__ssprint_r>
    53e4:	2800      	cmp	r0, #0
    53e6:	d154      	bne.n	5492 <_svfprintf_r+0x8ca>
    53e8:	3d10      	subs	r5, #16
    53ea:	2d10      	cmp	r5, #16
    53ec:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    53f0:	dce8      	bgt.n	53c4 <_svfprintf_r+0x7fc>
    53f2:	9c09      	ldr	r4, [sp, #36]	; 0x24
    53f4:	4980      	ldr	r1, [pc, #512]	; (55f8 <_svfprintf_r+0xa30>)
    53f6:	f8ca 5004 	str.w	r5, [sl, #4]
    53fa:	3301      	adds	r3, #1
    53fc:	442a      	add	r2, r5
    53fe:	2b07      	cmp	r3, #7
    5400:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    5404:	f8ca 1000 	str.w	r1, [sl]
    5408:	f300 8526 	bgt.w	5e58 <_svfprintf_r+0x1290>
    540c:	9b03      	ldr	r3, [sp, #12]
    540e:	9905      	ldr	r1, [sp, #20]
    5410:	1a5d      	subs	r5, r3, r1
    5412:	2d00      	cmp	r5, #0
    5414:	f10a 0a08 	add.w	sl, sl, #8
    5418:	f77f ad5b 	ble.w	4ed2 <_svfprintf_r+0x30a>
    541c:	2d10      	cmp	r5, #16
    541e:	9b25      	ldr	r3, [sp, #148]	; 0x94
    5420:	dd1f      	ble.n	5462 <_svfprintf_r+0x89a>
    5422:	4651      	mov	r1, sl
    5424:	2610      	movs	r6, #16
    5426:	ee1b aa10 	vmov	sl, s22
    542a:	e004      	b.n	5436 <_svfprintf_r+0x86e>
    542c:	3d10      	subs	r5, #16
    542e:	2d10      	cmp	r5, #16
    5430:	f101 0108 	add.w	r1, r1, #8
    5434:	dd14      	ble.n	5460 <_svfprintf_r+0x898>
    5436:	3301      	adds	r3, #1
    5438:	486f      	ldr	r0, [pc, #444]	; (55f8 <_svfprintf_r+0xa30>)
    543a:	3210      	adds	r2, #16
    543c:	2b07      	cmp	r3, #7
    543e:	e9c1 0600 	strd	r0, r6, [r1]
    5442:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    5446:	ddf1      	ble.n	542c <_svfprintf_r+0x864>
    5448:	aa24      	add	r2, sp, #144	; 0x90
    544a:	4651      	mov	r1, sl
    544c:	4658      	mov	r0, fp
    544e:	f002 fabf 	bl	79d0 <__ssprint_r>
    5452:	b9f0      	cbnz	r0, 5492 <_svfprintf_r+0x8ca>
    5454:	3d10      	subs	r5, #16
    5456:	2d10      	cmp	r5, #16
    5458:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    545c:	a927      	add	r1, sp, #156	; 0x9c
    545e:	dcea      	bgt.n	5436 <_svfprintf_r+0x86e>
    5460:	468a      	mov	sl, r1
    5462:	3301      	adds	r3, #1
    5464:	4964      	ldr	r1, [pc, #400]	; (55f8 <_svfprintf_r+0xa30>)
    5466:	f8ca 5004 	str.w	r5, [sl, #4]
    546a:	442a      	add	r2, r5
    546c:	2b07      	cmp	r3, #7
    546e:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    5472:	f8ca 1000 	str.w	r1, [sl]
    5476:	f300 81da 	bgt.w	582e <_svfprintf_r+0xc66>
    547a:	f10a 0a08 	add.w	sl, sl, #8
    547e:	e528      	b.n	4ed2 <_svfprintf_r+0x30a>
    5480:	ee1b 1a10 	vmov	r1, s22
    5484:	aa24      	add	r2, sp, #144	; 0x90
    5486:	4658      	mov	r0, fp
    5488:	f002 faa2 	bl	79d0 <__ssprint_r>
    548c:	2800      	cmp	r0, #0
    548e:	f43f ad47 	beq.w	4f20 <_svfprintf_r+0x358>
    5492:	9b07      	ldr	r3, [sp, #28]
    5494:	2b00      	cmp	r3, #0
    5496:	f43f aca2 	beq.w	4dde <_svfprintf_r+0x216>
    549a:	9907      	ldr	r1, [sp, #28]
    549c:	4658      	mov	r0, fp
    549e:	f7fe fead 	bl	41fc <_free_r>
    54a2:	e49c      	b.n	4dde <_svfprintf_r+0x216>
    54a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    54a6:	2b01      	cmp	r3, #1
    54a8:	f340 817a 	ble.w	57a0 <_svfprintf_r+0xbd8>
    54ac:	9b25      	ldr	r3, [sp, #148]	; 0x94
    54ae:	f8ca 4000 	str.w	r4, [sl]
    54b2:	3301      	adds	r3, #1
    54b4:	3201      	adds	r2, #1
    54b6:	2101      	movs	r1, #1
    54b8:	2b07      	cmp	r3, #7
    54ba:	9226      	str	r2, [sp, #152]	; 0x98
    54bc:	9325      	str	r3, [sp, #148]	; 0x94
    54be:	f8ca 1004 	str.w	r1, [sl, #4]
    54c2:	f300 81f8 	bgt.w	58b6 <_svfprintf_r+0xcee>
    54c6:	f10a 0a08 	add.w	sl, sl, #8
    54ca:	9910      	ldr	r1, [sp, #64]	; 0x40
    54cc:	9812      	ldr	r0, [sp, #72]	; 0x48
    54ce:	3301      	adds	r3, #1
    54d0:	440a      	add	r2, r1
    54d2:	2b07      	cmp	r3, #7
    54d4:	e9ca 0100 	strd	r0, r1, [sl]
    54d8:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    54dc:	f300 81dd 	bgt.w	589a <_svfprintf_r+0xcd2>
    54e0:	f10a 0a08 	add.w	sl, sl, #8
    54e4:	eeb5 8b40 	vcmp.f64	d8, #0.0
    54e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    54ec:	f000 8177 	beq.w	57de <_svfprintf_r+0xc16>
    54f0:	990e      	ldr	r1, [sp, #56]	; 0x38
    54f2:	3301      	adds	r3, #1
    54f4:	3901      	subs	r1, #1
    54f6:	3401      	adds	r4, #1
    54f8:	440a      	add	r2, r1
    54fa:	2b07      	cmp	r3, #7
    54fc:	f8ca 4000 	str.w	r4, [sl]
    5500:	9325      	str	r3, [sp, #148]	; 0x94
    5502:	f8ca 1004 	str.w	r1, [sl, #4]
    5506:	9226      	str	r2, [sp, #152]	; 0x98
    5508:	f300 815b 	bgt.w	57c2 <_svfprintf_r+0xbfa>
    550c:	f10a 0a08 	add.w	sl, sl, #8
    5510:	9914      	ldr	r1, [sp, #80]	; 0x50
    5512:	f8ca 1004 	str.w	r1, [sl, #4]
    5516:	3301      	adds	r3, #1
    5518:	440a      	add	r2, r1
    551a:	2b07      	cmp	r3, #7
    551c:	a91e      	add	r1, sp, #120	; 0x78
    551e:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    5522:	f8ca 1000 	str.w	r1, [sl]
    5526:	f77f ace5 	ble.w	4ef4 <_svfprintf_r+0x32c>
    552a:	ee1b 1a10 	vmov	r1, s22
    552e:	aa24      	add	r2, sp, #144	; 0x90
    5530:	4658      	mov	r0, fp
    5532:	f002 fa4d 	bl	79d0 <__ssprint_r>
    5536:	2800      	cmp	r0, #0
    5538:	d1ab      	bne.n	5492 <_svfprintf_r+0x8ca>
    553a:	9a26      	ldr	r2, [sp, #152]	; 0x98
    553c:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    5540:	e4da      	b.n	4ef8 <_svfprintf_r+0x330>
    5542:	2d10      	cmp	r5, #16
    5544:	e9dd 1225 	ldrd	r1, r2, [sp, #148]	; 0x94
    5548:	4e2c      	ldr	r6, [pc, #176]	; (55fc <_svfprintf_r+0xa34>)
    554a:	dd24      	ble.n	5596 <_svfprintf_r+0x9ce>
    554c:	9417      	str	r4, [sp, #92]	; 0x5c
    554e:	2310      	movs	r3, #16
    5550:	ee1b 4a10 	vmov	r4, s22
    5554:	4608      	mov	r0, r1
    5556:	e004      	b.n	5562 <_svfprintf_r+0x99a>
    5558:	3d10      	subs	r5, #16
    555a:	2d10      	cmp	r5, #16
    555c:	f10a 0a08 	add.w	sl, sl, #8
    5560:	dd17      	ble.n	5592 <_svfprintf_r+0x9ca>
    5562:	3001      	adds	r0, #1
    5564:	3210      	adds	r2, #16
    5566:	2807      	cmp	r0, #7
    5568:	e9ca 6300 	strd	r6, r3, [sl]
    556c:	e9cd 0225 	strd	r0, r2, [sp, #148]	; 0x94
    5570:	ddf2      	ble.n	5558 <_svfprintf_r+0x990>
    5572:	aa24      	add	r2, sp, #144	; 0x90
    5574:	4621      	mov	r1, r4
    5576:	4658      	mov	r0, fp
    5578:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    557c:	f002 fa28 	bl	79d0 <__ssprint_r>
    5580:	2800      	cmp	r0, #0
    5582:	d186      	bne.n	5492 <_svfprintf_r+0x8ca>
    5584:	3d10      	subs	r5, #16
    5586:	2d10      	cmp	r5, #16
    5588:	e9dd 0225 	ldrd	r0, r2, [sp, #148]	; 0x94
    558c:	f04f 0310 	mov.w	r3, #16
    5590:	dce7      	bgt.n	5562 <_svfprintf_r+0x99a>
    5592:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    5594:	4601      	mov	r1, r0
    5596:	3101      	adds	r1, #1
    5598:	442a      	add	r2, r5
    559a:	2907      	cmp	r1, #7
    559c:	e9cd 1225 	strd	r1, r2, [sp, #148]	; 0x94
    55a0:	f8ca 6000 	str.w	r6, [sl]
    55a4:	f8ca 5004 	str.w	r5, [sl, #4]
    55a8:	f300 83bd 	bgt.w	5d26 <_svfprintf_r+0x115e>
    55ac:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    55b0:	f10a 0a08 	add.w	sl, sl, #8
    55b4:	e45d      	b.n	4e72 <_svfprintf_r+0x2aa>
    55b6:	f8cd 8008 	str.w	r8, [sp, #8]
    55ba:	2a0a      	cmp	r2, #10
    55bc:	f171 0300 	sbcs.w	r3, r1, #0
    55c0:	f080 8345 	bcs.w	5c4e <_svfprintf_r+0x1086>
    55c4:	3230      	adds	r2, #48	; 0x30
    55c6:	2301      	movs	r3, #1
    55c8:	f8dd 8008 	ldr.w	r8, [sp, #8]
    55cc:	f88d 213f 	strb.w	r2, [sp, #319]	; 0x13f
    55d0:	9305      	str	r3, [sp, #20]
    55d2:	f20d 143f 	addw	r4, sp, #319	; 0x13f
    55d6:	e668      	b.n	52aa <_svfprintf_r+0x6e2>
    55d8:	ee1b 1a10 	vmov	r1, s22
    55dc:	aa24      	add	r2, sp, #144	; 0x90
    55de:	4658      	mov	r0, fp
    55e0:	f002 f9f6 	bl	79d0 <__ssprint_r>
    55e4:	2800      	cmp	r0, #0
    55e6:	f47f af54 	bne.w	5492 <_svfprintf_r+0x8ca>
    55ea:	9a26      	ldr	r2, [sp, #152]	; 0x98
    55ec:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    55f0:	e452      	b.n	4e98 <_svfprintf_r+0x2d0>
    55f2:	bf00      	nop
    55f4:	20000660 	.word	0x20000660
    55f8:	20000d94 	.word	0x20000d94
    55fc:	20000664 	.word	0x20000664
    5600:	ee1b 1a10 	vmov	r1, s22
    5604:	aa24      	add	r2, sp, #144	; 0x90
    5606:	4658      	mov	r0, fp
    5608:	f002 f9e2 	bl	79d0 <__ssprint_r>
    560c:	2800      	cmp	r0, #0
    560e:	f47f af40 	bne.w	5492 <_svfprintf_r+0x8ca>
    5612:	9a26      	ldr	r2, [sp, #152]	; 0x98
    5614:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    5618:	e451      	b.n	4ebe <_svfprintf_r+0x2f6>
    561a:	2c10      	cmp	r4, #16
    561c:	9b25      	ldr	r3, [sp, #148]	; 0x94
    561e:	4ebe      	ldr	r6, [pc, #760]	; (5918 <_svfprintf_r+0xd50>)
    5620:	dd1f      	ble.n	5662 <_svfprintf_r+0xa9a>
    5622:	ee1b 8a10 	vmov	r8, s22
    5626:	2510      	movs	r5, #16
    5628:	e004      	b.n	5634 <_svfprintf_r+0xa6c>
    562a:	3c10      	subs	r4, #16
    562c:	2c10      	cmp	r4, #16
    562e:	f10a 0a08 	add.w	sl, sl, #8
    5632:	dd16      	ble.n	5662 <_svfprintf_r+0xa9a>
    5634:	3301      	adds	r3, #1
    5636:	3210      	adds	r2, #16
    5638:	2b07      	cmp	r3, #7
    563a:	e9ca 6500 	strd	r6, r5, [sl]
    563e:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    5642:	ddf2      	ble.n	562a <_svfprintf_r+0xa62>
    5644:	aa24      	add	r2, sp, #144	; 0x90
    5646:	4641      	mov	r1, r8
    5648:	4658      	mov	r0, fp
    564a:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    564e:	f002 f9bf 	bl	79d0 <__ssprint_r>
    5652:	2800      	cmp	r0, #0
    5654:	f47f af1d 	bne.w	5492 <_svfprintf_r+0x8ca>
    5658:	3c10      	subs	r4, #16
    565a:	2c10      	cmp	r4, #16
    565c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    5660:	dce8      	bgt.n	5634 <_svfprintf_r+0xa6c>
    5662:	3301      	adds	r3, #1
    5664:	4422      	add	r2, r4
    5666:	2b07      	cmp	r3, #7
    5668:	e9ca 6400 	strd	r6, r4, [sl]
    566c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    5670:	f77f ac4b 	ble.w	4f0a <_svfprintf_r+0x342>
    5674:	ee1b 1a10 	vmov	r1, s22
    5678:	aa24      	add	r2, sp, #144	; 0x90
    567a:	4658      	mov	r0, fp
    567c:	f002 f9a8 	bl	79d0 <__ssprint_r>
    5680:	2800      	cmp	r0, #0
    5682:	f47f af06 	bne.w	5492 <_svfprintf_r+0x8ca>
    5686:	9a26      	ldr	r2, [sp, #152]	; 0x98
    5688:	e43f      	b.n	4f0a <_svfprintf_r+0x342>
    568a:	991b      	ldr	r1, [sp, #108]	; 0x6c
    568c:	2900      	cmp	r1, #0
    568e:	f340 835a 	ble.w	5d46 <_svfprintf_r+0x117e>
    5692:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    5694:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    5696:	429e      	cmp	r6, r3
    5698:	bfa8      	it	ge
    569a:	461e      	movge	r6, r3
    569c:	2e00      	cmp	r6, #0
    569e:	dd0b      	ble.n	56b8 <_svfprintf_r+0xaf0>
    56a0:	9b25      	ldr	r3, [sp, #148]	; 0x94
    56a2:	3301      	adds	r3, #1
    56a4:	4432      	add	r2, r6
    56a6:	2b07      	cmp	r3, #7
    56a8:	e9ca 4600 	strd	r4, r6, [sl]
    56ac:	9226      	str	r2, [sp, #152]	; 0x98
    56ae:	9325      	str	r3, [sp, #148]	; 0x94
    56b0:	f300 8689 	bgt.w	63c6 <_svfprintf_r+0x17fe>
    56b4:	f10a 0a08 	add.w	sl, sl, #8
    56b8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    56ba:	2e00      	cmp	r6, #0
    56bc:	bfa8      	it	ge
    56be:	1bad      	subge	r5, r5, r6
    56c0:	2d00      	cmp	r5, #0
    56c2:	f300 8203 	bgt.w	5acc <_svfprintf_r+0xf04>
    56c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    56c8:	f418 6f80 	tst.w	r8, #1024	; 0x400
    56cc:	4423      	add	r3, r4
    56ce:	9305      	str	r3, [sp, #20]
    56d0:	f040 821f 	bne.w	5b12 <_svfprintf_r+0xf4a>
    56d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    56d6:	990e      	ldr	r1, [sp, #56]	; 0x38
    56d8:	428b      	cmp	r3, r1
    56da:	db03      	blt.n	56e4 <_svfprintf_r+0xb1c>
    56dc:	f018 0f01 	tst.w	r8, #1
    56e0:	f000 84cf 	beq.w	6082 <_svfprintf_r+0x14ba>
    56e4:	9910      	ldr	r1, [sp, #64]	; 0x40
    56e6:	9812      	ldr	r0, [sp, #72]	; 0x48
    56e8:	440a      	add	r2, r1
    56ea:	e9ca 0100 	strd	r0, r1, [sl]
    56ee:	9925      	ldr	r1, [sp, #148]	; 0x94
    56f0:	9226      	str	r2, [sp, #152]	; 0x98
    56f2:	3101      	adds	r1, #1
    56f4:	2907      	cmp	r1, #7
    56f6:	9125      	str	r1, [sp, #148]	; 0x94
    56f8:	f300 86a5 	bgt.w	6446 <_svfprintf_r+0x187e>
    56fc:	f10a 0a08 	add.w	sl, sl, #8
    5700:	990e      	ldr	r1, [sp, #56]	; 0x38
    5702:	1865      	adds	r5, r4, r1
    5704:	1acc      	subs	r4, r1, r3
    5706:	9b05      	ldr	r3, [sp, #20]
    5708:	1aed      	subs	r5, r5, r3
    570a:	42a5      	cmp	r5, r4
    570c:	bfa8      	it	ge
    570e:	4625      	movge	r5, r4
    5710:	2d00      	cmp	r5, #0
    5712:	dd0d      	ble.n	5730 <_svfprintf_r+0xb68>
    5714:	f8ca 3000 	str.w	r3, [sl]
    5718:	9b25      	ldr	r3, [sp, #148]	; 0x94
    571a:	f8ca 5004 	str.w	r5, [sl, #4]
    571e:	3301      	adds	r3, #1
    5720:	442a      	add	r2, r5
    5722:	2b07      	cmp	r3, #7
    5724:	9226      	str	r2, [sp, #152]	; 0x98
    5726:	9325      	str	r3, [sp, #148]	; 0x94
    5728:	f300 86bb 	bgt.w	64a2 <_svfprintf_r+0x18da>
    572c:	f10a 0a08 	add.w	sl, sl, #8
    5730:	2d00      	cmp	r5, #0
    5732:	bfa8      	it	ge
    5734:	1b64      	subge	r4, r4, r5
    5736:	2c00      	cmp	r4, #0
    5738:	f77f abde 	ble.w	4ef8 <_svfprintf_r+0x330>
    573c:	2c10      	cmp	r4, #16
    573e:	9b25      	ldr	r3, [sp, #148]	; 0x94
    5740:	f340 837c 	ble.w	5e3c <_svfprintf_r+0x1274>
    5744:	ee1b 6a10 	vmov	r6, s22
    5748:	2510      	movs	r5, #16
    574a:	e005      	b.n	5758 <_svfprintf_r+0xb90>
    574c:	f10a 0a08 	add.w	sl, sl, #8
    5750:	3c10      	subs	r4, #16
    5752:	2c10      	cmp	r4, #16
    5754:	f340 8372 	ble.w	5e3c <_svfprintf_r+0x1274>
    5758:	3301      	adds	r3, #1
    575a:	4970      	ldr	r1, [pc, #448]	; (591c <_svfprintf_r+0xd54>)
    575c:	3210      	adds	r2, #16
    575e:	2b07      	cmp	r3, #7
    5760:	e9ca 1500 	strd	r1, r5, [sl]
    5764:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    5768:	ddf0      	ble.n	574c <_svfprintf_r+0xb84>
    576a:	aa24      	add	r2, sp, #144	; 0x90
    576c:	4631      	mov	r1, r6
    576e:	4658      	mov	r0, fp
    5770:	f002 f92e 	bl	79d0 <__ssprint_r>
    5774:	2800      	cmp	r0, #0
    5776:	f47f ae8c 	bne.w	5492 <_svfprintf_r+0x8ca>
    577a:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    577e:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    5782:	e7e5      	b.n	5750 <_svfprintf_r+0xb88>
    5784:	2b30      	cmp	r3, #48	; 0x30
    5786:	f43f ad8b 	beq.w	52a0 <_svfprintf_r+0x6d8>
    578a:	2330      	movs	r3, #48	; 0x30
    578c:	3802      	subs	r0, #2
    578e:	f804 3c01 	strb.w	r3, [r4, #-1]
    5792:	ab50      	add	r3, sp, #320	; 0x140
    5794:	1a1b      	subs	r3, r3, r0
    5796:	f8dd 8008 	ldr.w	r8, [sp, #8]
    579a:	9305      	str	r3, [sp, #20]
    579c:	4604      	mov	r4, r0
    579e:	e584      	b.n	52aa <_svfprintf_r+0x6e2>
    57a0:	f018 0f01 	tst.w	r8, #1
    57a4:	f47f ae82 	bne.w	54ac <_svfprintf_r+0x8e4>
    57a8:	9b25      	ldr	r3, [sp, #148]	; 0x94
    57aa:	f8ca 4000 	str.w	r4, [sl]
    57ae:	3301      	adds	r3, #1
    57b0:	3201      	adds	r2, #1
    57b2:	2101      	movs	r1, #1
    57b4:	2b07      	cmp	r3, #7
    57b6:	9226      	str	r2, [sp, #152]	; 0x98
    57b8:	9325      	str	r3, [sp, #148]	; 0x94
    57ba:	f8ca 1004 	str.w	r1, [sl, #4]
    57be:	f77f aea5 	ble.w	550c <_svfprintf_r+0x944>
    57c2:	ee1b 1a10 	vmov	r1, s22
    57c6:	aa24      	add	r2, sp, #144	; 0x90
    57c8:	4658      	mov	r0, fp
    57ca:	f002 f901 	bl	79d0 <__ssprint_r>
    57ce:	2800      	cmp	r0, #0
    57d0:	f47f ae5f 	bne.w	5492 <_svfprintf_r+0x8ca>
    57d4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    57d8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    57dc:	e698      	b.n	5510 <_svfprintf_r+0x948>
    57de:	990e      	ldr	r1, [sp, #56]	; 0x38
    57e0:	1e4c      	subs	r4, r1, #1
    57e2:	2c00      	cmp	r4, #0
    57e4:	f77f ae94 	ble.w	5510 <_svfprintf_r+0x948>
    57e8:	2c10      	cmp	r4, #16
    57ea:	f340 8361 	ble.w	5eb0 <_svfprintf_r+0x12e8>
    57ee:	ee1b 6a10 	vmov	r6, s22
    57f2:	2510      	movs	r5, #16
    57f4:	e005      	b.n	5802 <_svfprintf_r+0xc3a>
    57f6:	f10a 0a08 	add.w	sl, sl, #8
    57fa:	3c10      	subs	r4, #16
    57fc:	2c10      	cmp	r4, #16
    57fe:	f340 8357 	ble.w	5eb0 <_svfprintf_r+0x12e8>
    5802:	3301      	adds	r3, #1
    5804:	4945      	ldr	r1, [pc, #276]	; (591c <_svfprintf_r+0xd54>)
    5806:	3210      	adds	r2, #16
    5808:	2b07      	cmp	r3, #7
    580a:	e9ca 1500 	strd	r1, r5, [sl]
    580e:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    5812:	ddf0      	ble.n	57f6 <_svfprintf_r+0xc2e>
    5814:	aa24      	add	r2, sp, #144	; 0x90
    5816:	4631      	mov	r1, r6
    5818:	4658      	mov	r0, fp
    581a:	f002 f8d9 	bl	79d0 <__ssprint_r>
    581e:	2800      	cmp	r0, #0
    5820:	f47f ae37 	bne.w	5492 <_svfprintf_r+0x8ca>
    5824:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    5828:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    582c:	e7e5      	b.n	57fa <_svfprintf_r+0xc32>
    582e:	ee1b 1a10 	vmov	r1, s22
    5832:	aa24      	add	r2, sp, #144	; 0x90
    5834:	4658      	mov	r0, fp
    5836:	f002 f8cb 	bl	79d0 <__ssprint_r>
    583a:	2800      	cmp	r0, #0
    583c:	f47f ae29 	bne.w	5492 <_svfprintf_r+0x8ca>
    5840:	9a26      	ldr	r2, [sp, #152]	; 0x98
    5842:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    5846:	f7ff bb44 	b.w	4ed2 <_svfprintf_r+0x30a>
    584a:	9b02      	ldr	r3, [sp, #8]
    584c:	f013 0310 	ands.w	r3, r3, #16
    5850:	f040 80c1 	bne.w	59d6 <_svfprintf_r+0xe0e>
    5854:	9a02      	ldr	r2, [sp, #8]
    5856:	f012 0240 	ands.w	r2, r2, #64	; 0x40
    585a:	f000 837a 	beq.w	5f52 <_svfprintf_r+0x138a>
    585e:	9808      	ldr	r0, [sp, #32]
    5860:	f850 2b04 	ldr.w	r2, [r0], #4
    5864:	9008      	str	r0, [sp, #32]
    5866:	4619      	mov	r1, r3
    5868:	b292      	uxth	r2, r2
    586a:	2301      	movs	r3, #1
    586c:	e451      	b.n	5112 <_svfprintf_r+0x54a>
    586e:	f018 0310 	ands.w	r3, r8, #16
    5872:	d155      	bne.n	5920 <_svfprintf_r+0xd58>
    5874:	f018 0240 	ands.w	r2, r8, #64	; 0x40
    5878:	f000 835d 	beq.w	5f36 <_svfprintf_r+0x136e>
    587c:	9808      	ldr	r0, [sp, #32]
    587e:	f850 2b04 	ldr.w	r2, [r0], #4
    5882:	9008      	str	r0, [sp, #32]
    5884:	4619      	mov	r1, r3
    5886:	b292      	uxth	r2, r2
    5888:	e4a8      	b.n	51dc <_svfprintf_r+0x614>
    588a:	4252      	negs	r2, r2
    588c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    5890:	f8cd 8008 	str.w	r8, [sp, #8]
    5894:	202d      	movs	r0, #45	; 0x2d
    5896:	2301      	movs	r3, #1
    5898:	e43c      	b.n	5114 <_svfprintf_r+0x54c>
    589a:	ee1b 1a10 	vmov	r1, s22
    589e:	aa24      	add	r2, sp, #144	; 0x90
    58a0:	4658      	mov	r0, fp
    58a2:	f002 f895 	bl	79d0 <__ssprint_r>
    58a6:	2800      	cmp	r0, #0
    58a8:	f47f adf3 	bne.w	5492 <_svfprintf_r+0x8ca>
    58ac:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    58b0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    58b4:	e616      	b.n	54e4 <_svfprintf_r+0x91c>
    58b6:	ee1b 1a10 	vmov	r1, s22
    58ba:	aa24      	add	r2, sp, #144	; 0x90
    58bc:	4658      	mov	r0, fp
    58be:	f002 f887 	bl	79d0 <__ssprint_r>
    58c2:	2800      	cmp	r0, #0
    58c4:	f47f ade5 	bne.w	5492 <_svfprintf_r+0x8ca>
    58c8:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    58cc:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    58d0:	e5fb      	b.n	54ca <_svfprintf_r+0x902>
    58d2:	f018 0f01 	tst.w	r8, #1
    58d6:	f43f ab0f 	beq.w	4ef8 <_svfprintf_r+0x330>
    58da:	e52a      	b.n	5332 <_svfprintf_r+0x76a>
    58dc:	9308      	str	r3, [sp, #32]
    58de:	f899 3000 	ldrb.w	r3, [r9]
    58e2:	f7ff b9cd 	b.w	4c80 <_svfprintf_r+0xb8>
    58e6:	ac50      	add	r4, sp, #320	; 0x140
    58e8:	e4df      	b.n	52aa <_svfprintf_r+0x6e2>
    58ea:	f418 7f00 	tst.w	r8, #512	; 0x200
    58ee:	f040 83db 	bne.w	60a8 <_svfprintf_r+0x14e0>
    58f2:	f853 2b04 	ldr.w	r2, [r3], #4
    58f6:	9308      	str	r3, [sp, #32]
    58f8:	17d1      	asrs	r1, r2, #31
    58fa:	460b      	mov	r3, r1
    58fc:	f7ff bbb6 	b.w	506c <_svfprintf_r+0x4a4>
    5900:	9b08      	ldr	r3, [sp, #32]
    5902:	9804      	ldr	r0, [sp, #16]
    5904:	f853 1b04 	ldr.w	r1, [r3], #4
    5908:	9308      	str	r3, [sp, #32]
    590a:	17c2      	asrs	r2, r0, #31
    590c:	e9c1 0200 	strd	r0, r2, [r1]
    5910:	464c      	mov	r4, r9
    5912:	f7ff b98b 	b.w	4c2c <_svfprintf_r+0x64>
    5916:	bf00      	nop
    5918:	20000664 	.word	0x20000664
    591c:	20000d94 	.word	0x20000d94
    5920:	9b08      	ldr	r3, [sp, #32]
    5922:	f853 2b04 	ldr.w	r2, [r3], #4
    5926:	9308      	str	r3, [sp, #32]
    5928:	e458      	b.n	51dc <_svfprintf_r+0x614>
    592a:	eeb4 8b48 	vcmp.f64	d8, d8
    592e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5932:	f180 8694 	bvs.w	665e <_svfprintf_r+0x1a96>
    5936:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5938:	2b61      	cmp	r3, #97	; 0x61
    593a:	f000 8552 	beq.w	63e2 <_svfprintf_r+0x181a>
    593e:	2b41      	cmp	r3, #65	; 0x41
    5940:	f000 85c0 	beq.w	64c4 <_svfprintf_r+0x18fc>
    5944:	9b03      	ldr	r3, [sp, #12]
    5946:	3301      	adds	r3, #1
    5948:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    594a:	f023 0520 	bic.w	r5, r3, #32
    594e:	f000 8480 	beq.w	6252 <_svfprintf_r+0x168a>
    5952:	2d47      	cmp	r5, #71	; 0x47
    5954:	d104      	bne.n	5960 <_svfprintf_r+0xd98>
    5956:	9b03      	ldr	r3, [sp, #12]
    5958:	2b00      	cmp	r3, #0
    595a:	bf08      	it	eq
    595c:	2301      	moveq	r3, #1
    595e:	9303      	str	r3, [sp, #12]
    5960:	ee18 3a90 	vmov	r3, s17
    5964:	2b00      	cmp	r3, #0
    5966:	f448 7280 	orr.w	r2, r8, #256	; 0x100
    596a:	4646      	mov	r6, r8
    596c:	f2c0 8618 	blt.w	65a0 <_svfprintf_r+0x19d8>
    5970:	eeb0 ab48 	vmov.f64	d10, d8
    5974:	2300      	movs	r3, #0
    5976:	4690      	mov	r8, r2
    5978:	9309      	str	r3, [sp, #36]	; 0x24
    597a:	9307      	str	r3, [sp, #28]
    597c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    597e:	3b41      	subs	r3, #65	; 0x41
    5980:	2b25      	cmp	r3, #37	; 0x25
    5982:	f200 8398 	bhi.w	60b6 <_svfprintf_r+0x14ee>
    5986:	e8df f013 	tbh	[pc, r3, lsl #1]
    598a:	046f      	.short	0x046f
    598c:	03960396 	.word	0x03960396
    5990:	04680396 	.word	0x04680396
    5994:	0396046c 	.word	0x0396046c
    5998:	03960396 	.word	0x03960396
    599c:	03960396 	.word	0x03960396
    59a0:	03960396 	.word	0x03960396
    59a4:	03960396 	.word	0x03960396
    59a8:	03960396 	.word	0x03960396
    59ac:	03960396 	.word	0x03960396
    59b0:	03960396 	.word	0x03960396
    59b4:	03960396 	.word	0x03960396
    59b8:	03960396 	.word	0x03960396
    59bc:	03960396 	.word	0x03960396
    59c0:	03960396 	.word	0x03960396
    59c4:	03960396 	.word	0x03960396
    59c8:	03960396 	.word	0x03960396
    59cc:	03960396 	.word	0x03960396
    59d0:	04680396 	.word	0x04680396
    59d4:	046c      	.short	0x046c
    59d6:	9b08      	ldr	r3, [sp, #32]
    59d8:	f853 2b04 	ldr.w	r2, [r3], #4
    59dc:	9308      	str	r3, [sp, #32]
    59de:	2301      	movs	r3, #1
    59e0:	f7ff bb97 	b.w	5112 <_svfprintf_r+0x54a>
    59e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    59e6:	2b00      	cmp	r3, #0
    59e8:	f43f a9cf 	beq.w	4d8a <_svfprintf_r+0x1c2>
    59ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    59ee:	781b      	ldrb	r3, [r3, #0]
    59f0:	2b00      	cmp	r3, #0
    59f2:	f43f a9ca 	beq.w	4d8a <_svfprintf_r+0x1c2>
    59f6:	f899 3000 	ldrb.w	r3, [r9]
    59fa:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
    59fe:	f7ff b93f 	b.w	4c80 <_svfprintf_r+0xb8>
    5a02:	930b      	str	r3, [sp, #44]	; 0x2c
    5a04:	f8cd 8008 	str.w	r8, [sp, #8]
    5a08:	f7ff bbf1 	b.w	51ee <_svfprintf_r+0x626>
    5a0c:	930b      	str	r3, [sp, #44]	; 0x2c
    5a0e:	4b9a      	ldr	r3, [pc, #616]	; (5c78 <_svfprintf_r+0x10b0>)
    5a10:	9311      	str	r3, [sp, #68]	; 0x44
    5a12:	f018 0120 	ands.w	r1, r8, #32
    5a16:	f000 8105 	beq.w	5c24 <_svfprintf_r+0x105c>
    5a1a:	9b08      	ldr	r3, [sp, #32]
    5a1c:	3307      	adds	r3, #7
    5a1e:	f023 0307 	bic.w	r3, r3, #7
    5a22:	6859      	ldr	r1, [r3, #4]
    5a24:	f853 2b08 	ldr.w	r2, [r3], #8
    5a28:	9308      	str	r3, [sp, #32]
    5a2a:	f018 0f01 	tst.w	r8, #1
    5a2e:	d00a      	beq.n	5a46 <_svfprintf_r+0xe7e>
    5a30:	ea52 0301 	orrs.w	r3, r2, r1
    5a34:	d007      	beq.n	5a46 <_svfprintf_r+0xe7e>
    5a36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5a38:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    5a3c:	2330      	movs	r3, #48	; 0x30
    5a3e:	f048 0802 	orr.w	r8, r8, #2
    5a42:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    5a46:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
    5a4a:	9302      	str	r3, [sp, #8]
    5a4c:	2302      	movs	r3, #2
    5a4e:	f7ff bb60 	b.w	5112 <_svfprintf_r+0x54a>
    5a52:	930b      	str	r3, [sp, #44]	; 0x2c
    5a54:	f7ff bbb6 	b.w	51c4 <_svfprintf_r+0x5fc>
    5a58:	930b      	str	r3, [sp, #44]	; 0x2c
    5a5a:	4b88      	ldr	r3, [pc, #544]	; (5c7c <_svfprintf_r+0x10b4>)
    5a5c:	9311      	str	r3, [sp, #68]	; 0x44
    5a5e:	e7d8      	b.n	5a12 <_svfprintf_r+0xe4a>
    5a60:	9b08      	ldr	r3, [sp, #32]
    5a62:	2101      	movs	r1, #1
    5a64:	f853 2b04 	ldr.w	r2, [r3], #4
    5a68:	9102      	str	r1, [sp, #8]
    5a6a:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
    5a6e:	9308      	str	r3, [sp, #32]
    5a70:	9105      	str	r1, [sp, #20]
    5a72:	ac37      	add	r4, sp, #220	; 0xdc
    5a74:	f7ff baaf 	b.w	4fd6 <_svfprintf_r+0x40e>
    5a78:	ee1b 1a10 	vmov	r1, s22
    5a7c:	aa24      	add	r2, sp, #144	; 0x90
    5a7e:	4658      	mov	r0, fp
    5a80:	f001 ffa6 	bl	79d0 <__ssprint_r>
    5a84:	2800      	cmp	r0, #0
    5a86:	f47f ad04 	bne.w	5492 <_svfprintf_r+0x8ca>
    5a8a:	9a26      	ldr	r2, [sp, #152]	; 0x98
    5a8c:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    5a90:	e45d      	b.n	534e <_svfprintf_r+0x786>
    5a92:	9b03      	ldr	r3, [sp, #12]
    5a94:	9407      	str	r4, [sp, #28]
    5a96:	2b06      	cmp	r3, #6
    5a98:	4622      	mov	r2, r4
    5a9a:	bf28      	it	cs
    5a9c:	2306      	movcs	r3, #6
    5a9e:	9403      	str	r4, [sp, #12]
    5aa0:	4621      	mov	r1, r4
    5aa2:	e9cd 220c 	strd	r2, r2, [sp, #48]	; 0x30
    5aa6:	4c76      	ldr	r4, [pc, #472]	; (5c80 <_svfprintf_r+0x10b8>)
    5aa8:	9302      	str	r3, [sp, #8]
    5aaa:	9305      	str	r3, [sp, #20]
    5aac:	920f      	str	r2, [sp, #60]	; 0x3c
    5aae:	f7ff ba6c 	b.w	4f8a <_svfprintf_r+0x3c2>
    5ab2:	2140      	movs	r1, #64	; 0x40
    5ab4:	4658      	mov	r0, fp
    5ab6:	f7fd f92d 	bl	2d14 <_malloc_r>
    5aba:	6020      	str	r0, [r4, #0]
    5abc:	6120      	str	r0, [r4, #16]
    5abe:	2800      	cmp	r0, #0
    5ac0:	f000 860f 	beq.w	66e2 <_svfprintf_r+0x1b1a>
    5ac4:	2340      	movs	r3, #64	; 0x40
    5ac6:	6163      	str	r3, [r4, #20]
    5ac8:	f7ff b89e 	b.w	4c08 <_svfprintf_r+0x40>
    5acc:	2d10      	cmp	r5, #16
    5ace:	9b25      	ldr	r3, [sp, #148]	; 0x94
    5ad0:	f340 825d 	ble.w	5f8e <_svfprintf_r+0x13c6>
    5ad4:	4651      	mov	r1, sl
    5ad6:	2610      	movs	r6, #16
    5ad8:	ee1b aa10 	vmov	sl, s22
    5adc:	e004      	b.n	5ae8 <_svfprintf_r+0xf20>
    5ade:	3108      	adds	r1, #8
    5ae0:	3d10      	subs	r5, #16
    5ae2:	2d10      	cmp	r5, #16
    5ae4:	f340 8252 	ble.w	5f8c <_svfprintf_r+0x13c4>
    5ae8:	3301      	adds	r3, #1
    5aea:	4866      	ldr	r0, [pc, #408]	; (5c84 <_svfprintf_r+0x10bc>)
    5aec:	3210      	adds	r2, #16
    5aee:	2b07      	cmp	r3, #7
    5af0:	e9c1 0600 	strd	r0, r6, [r1]
    5af4:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    5af8:	ddf1      	ble.n	5ade <_svfprintf_r+0xf16>
    5afa:	aa24      	add	r2, sp, #144	; 0x90
    5afc:	4651      	mov	r1, sl
    5afe:	4658      	mov	r0, fp
    5b00:	f001 ff66 	bl	79d0 <__ssprint_r>
    5b04:	2800      	cmp	r0, #0
    5b06:	f47f acc4 	bne.w	5492 <_svfprintf_r+0x8ca>
    5b0a:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    5b0e:	a927      	add	r1, sp, #156	; 0x9c
    5b10:	e7e6      	b.n	5ae0 <_svfprintf_r+0xf18>
    5b12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    5b14:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    5b18:	18e3      	adds	r3, r4, r3
    5b1a:	9303      	str	r3, [sp, #12]
    5b1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5b1e:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    5b22:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    5b24:	9d05      	ldr	r5, [sp, #20]
    5b26:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
    5b2a:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
    5b2e:	940b      	str	r4, [sp, #44]	; 0x2c
    5b30:	ee1b 1a10 	vmov	r1, s22
    5b34:	4650      	mov	r0, sl
    5b36:	2b00      	cmp	r3, #0
    5b38:	d034      	beq.n	5ba4 <_svfprintf_r+0xfdc>
    5b3a:	f1b8 0f00 	cmp.w	r8, #0
    5b3e:	d135      	bne.n	5bac <_svfprintf_r+0xfe4>
    5b40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5b42:	3b01      	subs	r3, #1
    5b44:	3e01      	subs	r6, #1
    5b46:	930d      	str	r3, [sp, #52]	; 0x34
    5b48:	9b15      	ldr	r3, [sp, #84]	; 0x54
    5b4a:	e9c0 3900 	strd	r3, r9, [r0]
    5b4e:	9b25      	ldr	r3, [sp, #148]	; 0x94
    5b50:	3301      	adds	r3, #1
    5b52:	444a      	add	r2, r9
    5b54:	2b07      	cmp	r3, #7
    5b56:	9226      	str	r2, [sp, #152]	; 0x98
    5b58:	9325      	str	r3, [sp, #148]	; 0x94
    5b5a:	dc6c      	bgt.n	5c36 <_svfprintf_r+0x106e>
    5b5c:	3008      	adds	r0, #8
    5b5e:	9b03      	ldr	r3, [sp, #12]
    5b60:	f896 c000 	ldrb.w	ip, [r6]
    5b64:	1b5b      	subs	r3, r3, r5
    5b66:	4563      	cmp	r3, ip
    5b68:	bfa8      	it	ge
    5b6a:	4663      	movge	r3, ip
    5b6c:	2b00      	cmp	r3, #0
    5b6e:	469a      	mov	sl, r3
    5b70:	dd0c      	ble.n	5b8c <_svfprintf_r+0xfc4>
    5b72:	9c25      	ldr	r4, [sp, #148]	; 0x94
    5b74:	3401      	adds	r4, #1
    5b76:	441a      	add	r2, r3
    5b78:	2c07      	cmp	r4, #7
    5b7a:	e9c0 5300 	strd	r5, r3, [r0]
    5b7e:	9226      	str	r2, [sp, #152]	; 0x98
    5b80:	9425      	str	r4, [sp, #148]	; 0x94
    5b82:	f300 8177 	bgt.w	5e74 <_svfprintf_r+0x12ac>
    5b86:	f896 c000 	ldrb.w	ip, [r6]
    5b8a:	3008      	adds	r0, #8
    5b8c:	f1ba 0f00 	cmp.w	sl, #0
    5b90:	bfac      	ite	ge
    5b92:	ebac 040a 	subge.w	r4, ip, sl
    5b96:	4664      	movlt	r4, ip
    5b98:	2c00      	cmp	r4, #0
    5b9a:	dc0a      	bgt.n	5bb2 <_svfprintf_r+0xfea>
    5b9c:	4465      	add	r5, ip
    5b9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5ba0:	2b00      	cmp	r3, #0
    5ba2:	d1ca      	bne.n	5b3a <_svfprintf_r+0xf72>
    5ba4:	f1b8 0f00 	cmp.w	r8, #0
    5ba8:	f000 83ac 	beq.w	6304 <_svfprintf_r+0x173c>
    5bac:	f108 38ff 	add.w	r8, r8, #4294967295
    5bb0:	e7ca      	b.n	5b48 <_svfprintf_r+0xf80>
    5bb2:	2c10      	cmp	r4, #16
    5bb4:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
    5bb8:	dd24      	ble.n	5c04 <_svfprintf_r+0x103c>
    5bba:	9505      	str	r5, [sp, #20]
    5bbc:	f04f 0a10 	mov.w	sl, #16
    5bc0:	4663      	mov	r3, ip
    5bc2:	460d      	mov	r5, r1
    5bc4:	e004      	b.n	5bd0 <_svfprintf_r+0x1008>
    5bc6:	3c10      	subs	r4, #16
    5bc8:	2c10      	cmp	r4, #16
    5bca:	f100 0008 	add.w	r0, r0, #8
    5bce:	dd16      	ble.n	5bfe <_svfprintf_r+0x1036>
    5bd0:	3301      	adds	r3, #1
    5bd2:	492c      	ldr	r1, [pc, #176]	; (5c84 <_svfprintf_r+0x10bc>)
    5bd4:	3210      	adds	r2, #16
    5bd6:	2b07      	cmp	r3, #7
    5bd8:	e9c0 1a00 	strd	r1, sl, [r0]
    5bdc:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    5be0:	ddf1      	ble.n	5bc6 <_svfprintf_r+0xffe>
    5be2:	aa24      	add	r2, sp, #144	; 0x90
    5be4:	4629      	mov	r1, r5
    5be6:	4658      	mov	r0, fp
    5be8:	f001 fef2 	bl	79d0 <__ssprint_r>
    5bec:	2800      	cmp	r0, #0
    5bee:	f47f ac50 	bne.w	5492 <_svfprintf_r+0x8ca>
    5bf2:	3c10      	subs	r4, #16
    5bf4:	2c10      	cmp	r4, #16
    5bf6:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    5bfa:	a827      	add	r0, sp, #156	; 0x9c
    5bfc:	dce8      	bgt.n	5bd0 <_svfprintf_r+0x1008>
    5bfe:	4629      	mov	r1, r5
    5c00:	9d05      	ldr	r5, [sp, #20]
    5c02:	469c      	mov	ip, r3
    5c04:	f10c 0301 	add.w	r3, ip, #1
    5c08:	4422      	add	r2, r4
    5c0a:	6044      	str	r4, [r0, #4]
    5c0c:	2b07      	cmp	r3, #7
    5c0e:	4c1d      	ldr	r4, [pc, #116]	; (5c84 <_svfprintf_r+0x10bc>)
    5c10:	6004      	str	r4, [r0, #0]
    5c12:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    5c16:	f300 83c6 	bgt.w	63a6 <_svfprintf_r+0x17de>
    5c1a:	f896 c000 	ldrb.w	ip, [r6]
    5c1e:	3008      	adds	r0, #8
    5c20:	4465      	add	r5, ip
    5c22:	e7bc      	b.n	5b9e <_svfprintf_r+0xfd6>
    5c24:	f018 0310 	ands.w	r3, r8, #16
    5c28:	f000 80c2 	beq.w	5db0 <_svfprintf_r+0x11e8>
    5c2c:	9b08      	ldr	r3, [sp, #32]
    5c2e:	f853 2b04 	ldr.w	r2, [r3], #4
    5c32:	9308      	str	r3, [sp, #32]
    5c34:	e6f9      	b.n	5a2a <_svfprintf_r+0xe62>
    5c36:	aa24      	add	r2, sp, #144	; 0x90
    5c38:	4658      	mov	r0, fp
    5c3a:	9105      	str	r1, [sp, #20]
    5c3c:	f001 fec8 	bl	79d0 <__ssprint_r>
    5c40:	2800      	cmp	r0, #0
    5c42:	f47f ac26 	bne.w	5492 <_svfprintf_r+0x8ca>
    5c46:	9a26      	ldr	r2, [sp, #152]	; 0x98
    5c48:	9905      	ldr	r1, [sp, #20]
    5c4a:	a827      	add	r0, sp, #156	; 0x9c
    5c4c:	e787      	b.n	5b5e <_svfprintf_r+0xf96>
    5c4e:	9802      	ldr	r0, [sp, #8]
    5c50:	f8cd a01c 	str.w	sl, [sp, #28]
    5c54:	ac50      	add	r4, sp, #320	; 0x140
    5c56:	f400 6080 	and.w	r0, r0, #1024	; 0x400
    5c5a:	2500      	movs	r5, #0
    5c5c:	ee0a ba10 	vmov	s20, fp
    5c60:	4b09      	ldr	r3, [pc, #36]	; (5c88 <_svfprintf_r+0x10c0>)
    5c62:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
    5c66:	f8cd 9014 	str.w	r9, [sp, #20]
    5c6a:	46a3      	mov	fp, r4
    5c6c:	f04f 0805 	mov.w	r8, #5
    5c70:	46ac      	mov	ip, r5
    5c72:	4604      	mov	r4, r0
    5c74:	e010      	b.n	5c98 <_svfprintf_r+0x10d0>
    5c76:	bf00      	nop
    5c78:	20000630 	.word	0x20000630
    5c7c:	20000644 	.word	0x20000644
    5c80:	20000658 	.word	0x20000658
    5c84:	20000d94 	.word	0x20000d94
    5c88:	cccccccd 	.word	0xcccccccd
    5c8c:	2a0a      	cmp	r2, #10
    5c8e:	f171 0100 	sbcs.w	r1, r1, #0
    5c92:	d336      	bcc.n	5d02 <_svfprintf_r+0x113a>
    5c94:	464a      	mov	r2, r9
    5c96:	4631      	mov	r1, r6
    5c98:	1850      	adds	r0, r2, r1
    5c9a:	f140 0000 	adc.w	r0, r0, #0
    5c9e:	fba3 5600 	umull	r5, r6, r3, r0
    5ca2:	f026 0503 	bic.w	r5, r6, #3
    5ca6:	eb05 0596 	add.w	r5, r5, r6, lsr #2
    5caa:	1b40      	subs	r0, r0, r5
    5cac:	1a15      	subs	r5, r2, r0
    5cae:	f04f 36cc 	mov.w	r6, #3435973836	; 0xcccccccc
    5cb2:	f161 0e00 	sbc.w	lr, r1, #0
    5cb6:	fb06 f605 	mul.w	r6, r6, r5
    5cba:	fba5 9503 	umull	r9, r5, r5, r3
    5cbe:	fb03 660e 	mla	r6, r3, lr, r6
    5cc2:	f009 0e01 	and.w	lr, r9, #1
    5cc6:	442e      	add	r6, r5
    5cc8:	fbae 5e08 	umull	r5, lr, lr, r8
    5ccc:	182d      	adds	r5, r5, r0
    5cce:	ea4f 0959 	mov.w	r9, r9, lsr #1
    5cd2:	3530      	adds	r5, #48	; 0x30
    5cd4:	f80b 5c01 	strb.w	r5, [fp, #-1]
    5cd8:	ea49 79c6 	orr.w	r9, r9, r6, lsl #31
    5cdc:	f10c 0c01 	add.w	ip, ip, #1
    5ce0:	f10b 3bff 	add.w	fp, fp, #4294967295
    5ce4:	0876      	lsrs	r6, r6, #1
    5ce6:	2c00      	cmp	r4, #0
    5ce8:	d0d0      	beq.n	5c8c <_svfprintf_r+0x10c4>
    5cea:	f89a 0000 	ldrb.w	r0, [sl]
    5cee:	4584      	cmp	ip, r0
    5cf0:	d1cc      	bne.n	5c8c <_svfprintf_r+0x10c4>
    5cf2:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    5cf6:	d0c9      	beq.n	5c8c <_svfprintf_r+0x10c4>
    5cf8:	2a0a      	cmp	r2, #10
    5cfa:	f171 0100 	sbcs.w	r1, r1, #0
    5cfe:	f080 818f 	bcs.w	6020 <_svfprintf_r+0x1458>
    5d02:	465c      	mov	r4, fp
    5d04:	ab50      	add	r3, sp, #320	; 0x140
    5d06:	1b1b      	subs	r3, r3, r4
    5d08:	f8dd 9014 	ldr.w	r9, [sp, #20]
    5d0c:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
    5d10:	ee1a ba10 	vmov	fp, s20
    5d14:	f8dd a01c 	ldr.w	sl, [sp, #28]
    5d18:	f8dd 8008 	ldr.w	r8, [sp, #8]
    5d1c:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
    5d20:	9305      	str	r3, [sp, #20]
    5d22:	f7ff bac2 	b.w	52aa <_svfprintf_r+0x6e2>
    5d26:	ee1b 1a10 	vmov	r1, s22
    5d2a:	aa24      	add	r2, sp, #144	; 0x90
    5d2c:	4658      	mov	r0, fp
    5d2e:	f001 fe4f 	bl	79d0 <__ssprint_r>
    5d32:	2800      	cmp	r0, #0
    5d34:	f47f abad 	bne.w	5492 <_svfprintf_r+0x8ca>
    5d38:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    5d3c:	9a26      	ldr	r2, [sp, #152]	; 0x98
    5d3e:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    5d42:	f7ff b896 	b.w	4e72 <_svfprintf_r+0x2aa>
    5d46:	9b25      	ldr	r3, [sp, #148]	; 0x94
    5d48:	48be      	ldr	r0, [pc, #760]	; (6044 <_svfprintf_r+0x147c>)
    5d4a:	f8ca 0000 	str.w	r0, [sl]
    5d4e:	3301      	adds	r3, #1
    5d50:	3201      	adds	r2, #1
    5d52:	2001      	movs	r0, #1
    5d54:	2b07      	cmp	r3, #7
    5d56:	9226      	str	r2, [sp, #152]	; 0x98
    5d58:	9325      	str	r3, [sp, #148]	; 0x94
    5d5a:	f8ca 0004 	str.w	r0, [sl, #4]
    5d5e:	f300 8177 	bgt.w	6050 <_svfprintf_r+0x1488>
    5d62:	f10a 0a08 	add.w	sl, sl, #8
    5d66:	2900      	cmp	r1, #0
    5d68:	f040 80af 	bne.w	5eca <_svfprintf_r+0x1302>
    5d6c:	990e      	ldr	r1, [sp, #56]	; 0x38
    5d6e:	f008 0301 	and.w	r3, r8, #1
    5d72:	430b      	orrs	r3, r1
    5d74:	f43f a8c0 	beq.w	4ef8 <_svfprintf_r+0x330>
    5d78:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5d7a:	9912      	ldr	r1, [sp, #72]	; 0x48
    5d7c:	441a      	add	r2, r3
    5d7e:	e9ca 1300 	strd	r1, r3, [sl]
    5d82:	9b25      	ldr	r3, [sp, #148]	; 0x94
    5d84:	9226      	str	r2, [sp, #152]	; 0x98
    5d86:	3301      	adds	r3, #1
    5d88:	2b07      	cmp	r3, #7
    5d8a:	9325      	str	r3, [sp, #148]	; 0x94
    5d8c:	f300 8252 	bgt.w	6234 <_svfprintf_r+0x166c>
    5d90:	f10a 0a08 	add.w	sl, sl, #8
    5d94:	990e      	ldr	r1, [sp, #56]	; 0x38
    5d96:	f8ca 4000 	str.w	r4, [sl]
    5d9a:	3301      	adds	r3, #1
    5d9c:	440a      	add	r2, r1
    5d9e:	2b07      	cmp	r3, #7
    5da0:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    5da4:	f8ca 1004 	str.w	r1, [sl, #4]
    5da8:	f77f a8a4 	ble.w	4ef4 <_svfprintf_r+0x32c>
    5dac:	f7ff bbbd 	b.w	552a <_svfprintf_r+0x962>
    5db0:	f018 0240 	ands.w	r2, r8, #64	; 0x40
    5db4:	f000 80dd 	beq.w	5f72 <_svfprintf_r+0x13aa>
    5db8:	9808      	ldr	r0, [sp, #32]
    5dba:	f850 2b04 	ldr.w	r2, [r0], #4
    5dbe:	9008      	str	r0, [sp, #32]
    5dc0:	4619      	mov	r1, r3
    5dc2:	b292      	uxth	r2, r2
    5dc4:	e631      	b.n	5a2a <_svfprintf_r+0xe62>
    5dc6:	ee1b 1a10 	vmov	r1, s22
    5dca:	aa24      	add	r2, sp, #144	; 0x90
    5dcc:	4658      	mov	r0, fp
    5dce:	f001 fdff 	bl	79d0 <__ssprint_r>
    5dd2:	2800      	cmp	r0, #0
    5dd4:	f47f ab5d 	bne.w	5492 <_svfprintf_r+0x8ca>
    5dd8:	9a26      	ldr	r2, [sp, #152]	; 0x98
    5dda:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    5dde:	f7ff baa3 	b.w	5328 <_svfprintf_r+0x760>
    5de2:	ae22      	add	r6, sp, #136	; 0x88
    5de4:	2208      	movs	r2, #8
    5de6:	2100      	movs	r1, #0
    5de8:	4630      	mov	r0, r6
    5dea:	941d      	str	r4, [sp, #116]	; 0x74
    5dec:	f7fd fe46 	bl	3a7c <memset>
    5df0:	9b03      	ldr	r3, [sp, #12]
    5df2:	1c5a      	adds	r2, r3, #1
    5df4:	f000 80db 	beq.w	5fae <_svfprintf_r+0x13e6>
    5df8:	2500      	movs	r5, #0
    5dfa:	f8cd 9008 	str.w	r9, [sp, #8]
    5dfe:	f8cd 801c 	str.w	r8, [sp, #28]
    5e02:	4699      	mov	r9, r3
    5e04:	46a8      	mov	r8, r5
    5e06:	e00c      	b.n	5e22 <_svfprintf_r+0x125a>
    5e08:	a937      	add	r1, sp, #220	; 0xdc
    5e0a:	4658      	mov	r0, fp
    5e0c:	f001 fd9a 	bl	7944 <_wcrtomb_r>
    5e10:	1c43      	adds	r3, r0, #1
    5e12:	4440      	add	r0, r8
    5e14:	f000 83c8 	beq.w	65a8 <_svfprintf_r+0x19e0>
    5e18:	4548      	cmp	r0, r9
    5e1a:	dc08      	bgt.n	5e2e <_svfprintf_r+0x1266>
    5e1c:	f000 8418 	beq.w	6650 <_svfprintf_r+0x1a88>
    5e20:	4680      	mov	r8, r0
    5e22:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    5e24:	5952      	ldr	r2, [r2, r5]
    5e26:	4633      	mov	r3, r6
    5e28:	3504      	adds	r5, #4
    5e2a:	2a00      	cmp	r2, #0
    5e2c:	d1ec      	bne.n	5e08 <_svfprintf_r+0x1240>
    5e2e:	f8cd 8014 	str.w	r8, [sp, #20]
    5e32:	f8dd 9008 	ldr.w	r9, [sp, #8]
    5e36:	f8dd 801c 	ldr.w	r8, [sp, #28]
    5e3a:	e0c5      	b.n	5fc8 <_svfprintf_r+0x1400>
    5e3c:	3301      	adds	r3, #1
    5e3e:	4982      	ldr	r1, [pc, #520]	; (6048 <_svfprintf_r+0x1480>)
    5e40:	f8ca 4004 	str.w	r4, [sl, #4]
    5e44:	4422      	add	r2, r4
    5e46:	2b07      	cmp	r3, #7
    5e48:	f8ca 1000 	str.w	r1, [sl]
    5e4c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    5e50:	f77f a850 	ble.w	4ef4 <_svfprintf_r+0x32c>
    5e54:	f7ff bb69 	b.w	552a <_svfprintf_r+0x962>
    5e58:	ee1b 1a10 	vmov	r1, s22
    5e5c:	aa24      	add	r2, sp, #144	; 0x90
    5e5e:	4658      	mov	r0, fp
    5e60:	f001 fdb6 	bl	79d0 <__ssprint_r>
    5e64:	2800      	cmp	r0, #0
    5e66:	f47f ab14 	bne.w	5492 <_svfprintf_r+0x8ca>
    5e6a:	9a26      	ldr	r2, [sp, #152]	; 0x98
    5e6c:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    5e70:	f7ff b829 	b.w	4ec6 <_svfprintf_r+0x2fe>
    5e74:	aa24      	add	r2, sp, #144	; 0x90
    5e76:	4658      	mov	r0, fp
    5e78:	9105      	str	r1, [sp, #20]
    5e7a:	f001 fda9 	bl	79d0 <__ssprint_r>
    5e7e:	2800      	cmp	r0, #0
    5e80:	f47f ab07 	bne.w	5492 <_svfprintf_r+0x8ca>
    5e84:	f896 c000 	ldrb.w	ip, [r6]
    5e88:	9a26      	ldr	r2, [sp, #152]	; 0x98
    5e8a:	9905      	ldr	r1, [sp, #20]
    5e8c:	a827      	add	r0, sp, #156	; 0x9c
    5e8e:	e67d      	b.n	5b8c <_svfprintf_r+0xfc4>
    5e90:	2b01      	cmp	r3, #1
    5e92:	f8cd 8008 	str.w	r8, [sp, #8]
    5e96:	f47f a9f3 	bne.w	5280 <_svfprintf_r+0x6b8>
    5e9a:	f7ff bb93 	b.w	55c4 <_svfprintf_r+0x9fc>
    5e9e:	9b08      	ldr	r3, [sp, #32]
    5ea0:	9904      	ldr	r1, [sp, #16]
    5ea2:	f853 2b04 	ldr.w	r2, [r3], #4
    5ea6:	464c      	mov	r4, r9
    5ea8:	6011      	str	r1, [r2, #0]
    5eaa:	9308      	str	r3, [sp, #32]
    5eac:	f7fe bebe 	b.w	4c2c <_svfprintf_r+0x64>
    5eb0:	3301      	adds	r3, #1
    5eb2:	4965      	ldr	r1, [pc, #404]	; (6048 <_svfprintf_r+0x1480>)
    5eb4:	f8ca 4004 	str.w	r4, [sl, #4]
    5eb8:	4422      	add	r2, r4
    5eba:	2b07      	cmp	r3, #7
    5ebc:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    5ec0:	f8ca 1000 	str.w	r1, [sl]
    5ec4:	f77f ab22 	ble.w	550c <_svfprintf_r+0x944>
    5ec8:	e47b      	b.n	57c2 <_svfprintf_r+0xbfa>
    5eca:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5ecc:	9812      	ldr	r0, [sp, #72]	; 0x48
    5ece:	441a      	add	r2, r3
    5ed0:	e9ca 0300 	strd	r0, r3, [sl]
    5ed4:	9b25      	ldr	r3, [sp, #148]	; 0x94
    5ed6:	9226      	str	r2, [sp, #152]	; 0x98
    5ed8:	3301      	adds	r3, #1
    5eda:	2b07      	cmp	r3, #7
    5edc:	9325      	str	r3, [sp, #148]	; 0x94
    5ede:	f300 81a9 	bgt.w	6234 <_svfprintf_r+0x166c>
    5ee2:	f10a 0a08 	add.w	sl, sl, #8
    5ee6:	2900      	cmp	r1, #0
    5ee8:	f6bf af54 	bge.w	5d94 <_svfprintf_r+0x11cc>
    5eec:	424d      	negs	r5, r1
    5eee:	3110      	adds	r1, #16
    5ef0:	f280 830f 	bge.w	6512 <_svfprintf_r+0x194a>
    5ef4:	ee1b 1a10 	vmov	r1, s22
    5ef8:	2610      	movs	r6, #16
    5efa:	e005      	b.n	5f08 <_svfprintf_r+0x1340>
    5efc:	f10a 0a08 	add.w	sl, sl, #8
    5f00:	3d10      	subs	r5, #16
    5f02:	2d10      	cmp	r5, #16
    5f04:	f340 8305 	ble.w	6512 <_svfprintf_r+0x194a>
    5f08:	3301      	adds	r3, #1
    5f0a:	484f      	ldr	r0, [pc, #316]	; (6048 <_svfprintf_r+0x1480>)
    5f0c:	3210      	adds	r2, #16
    5f0e:	2b07      	cmp	r3, #7
    5f10:	e9ca 0600 	strd	r0, r6, [sl]
    5f14:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    5f18:	ddf0      	ble.n	5efc <_svfprintf_r+0x1334>
    5f1a:	aa24      	add	r2, sp, #144	; 0x90
    5f1c:	4658      	mov	r0, fp
    5f1e:	9103      	str	r1, [sp, #12]
    5f20:	f001 fd56 	bl	79d0 <__ssprint_r>
    5f24:	2800      	cmp	r0, #0
    5f26:	f47f aab4 	bne.w	5492 <_svfprintf_r+0x8ca>
    5f2a:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    5f2e:	9903      	ldr	r1, [sp, #12]
    5f30:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    5f34:	e7e4      	b.n	5f00 <_svfprintf_r+0x1338>
    5f36:	9b08      	ldr	r3, [sp, #32]
    5f38:	f418 7100 	ands.w	r1, r8, #512	; 0x200
    5f3c:	bf1a      	itte	ne
    5f3e:	4611      	movne	r1, r2
    5f40:	f853 2b04 	ldrne.w	r2, [r3], #4
    5f44:	f853 2b04 	ldreq.w	r2, [r3], #4
    5f48:	9308      	str	r3, [sp, #32]
    5f4a:	bf18      	it	ne
    5f4c:	b2d2      	uxtbne	r2, r2
    5f4e:	f7ff b945 	b.w	51dc <_svfprintf_r+0x614>
    5f52:	9b02      	ldr	r3, [sp, #8]
    5f54:	f413 7100 	ands.w	r1, r3, #512	; 0x200
    5f58:	9b08      	ldr	r3, [sp, #32]
    5f5a:	bf1a      	itte	ne
    5f5c:	4611      	movne	r1, r2
    5f5e:	f853 2b04 	ldrne.w	r2, [r3], #4
    5f62:	f853 2b04 	ldreq.w	r2, [r3], #4
    5f66:	9308      	str	r3, [sp, #32]
    5f68:	bf18      	it	ne
    5f6a:	b2d2      	uxtbne	r2, r2
    5f6c:	2301      	movs	r3, #1
    5f6e:	f7ff b8d0 	b.w	5112 <_svfprintf_r+0x54a>
    5f72:	9b08      	ldr	r3, [sp, #32]
    5f74:	f418 7100 	ands.w	r1, r8, #512	; 0x200
    5f78:	bf1a      	itte	ne
    5f7a:	4611      	movne	r1, r2
    5f7c:	f853 2b04 	ldrne.w	r2, [r3], #4
    5f80:	f853 2b04 	ldreq.w	r2, [r3], #4
    5f84:	9308      	str	r3, [sp, #32]
    5f86:	bf18      	it	ne
    5f88:	b2d2      	uxtbne	r2, r2
    5f8a:	e54e      	b.n	5a2a <_svfprintf_r+0xe62>
    5f8c:	468a      	mov	sl, r1
    5f8e:	3301      	adds	r3, #1
    5f90:	492d      	ldr	r1, [pc, #180]	; (6048 <_svfprintf_r+0x1480>)
    5f92:	f8ca 5004 	str.w	r5, [sl, #4]
    5f96:	442a      	add	r2, r5
    5f98:	2b07      	cmp	r3, #7
    5f9a:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    5f9e:	f8ca 1000 	str.w	r1, [sl]
    5fa2:	f300 8139 	bgt.w	6218 <_svfprintf_r+0x1650>
    5fa6:	f10a 0a08 	add.w	sl, sl, #8
    5faa:	f7ff bb8c 	b.w	56c6 <_svfprintf_r+0xafe>
    5fae:	2300      	movs	r3, #0
    5fb0:	4619      	mov	r1, r3
    5fb2:	9600      	str	r6, [sp, #0]
    5fb4:	aa1d      	add	r2, sp, #116	; 0x74
    5fb6:	4658      	mov	r0, fp
    5fb8:	f001 fcea 	bl	7990 <_wcsrtombs_r>
    5fbc:	4603      	mov	r3, r0
    5fbe:	3301      	adds	r3, #1
    5fc0:	9005      	str	r0, [sp, #20]
    5fc2:	f000 82f1 	beq.w	65a8 <_svfprintf_r+0x19e0>
    5fc6:	941d      	str	r4, [sp, #116]	; 0x74
    5fc8:	9b05      	ldr	r3, [sp, #20]
    5fca:	2b00      	cmp	r3, #0
    5fcc:	d04e      	beq.n	606c <_svfprintf_r+0x14a4>
    5fce:	2b63      	cmp	r3, #99	; 0x63
    5fd0:	f300 8118 	bgt.w	6204 <_svfprintf_r+0x163c>
    5fd4:	2300      	movs	r3, #0
    5fd6:	9307      	str	r3, [sp, #28]
    5fd8:	ac37      	add	r4, sp, #220	; 0xdc
    5fda:	2208      	movs	r2, #8
    5fdc:	2100      	movs	r1, #0
    5fde:	4630      	mov	r0, r6
    5fe0:	f7fd fd4c 	bl	3a7c <memset>
    5fe4:	9d05      	ldr	r5, [sp, #20]
    5fe6:	9600      	str	r6, [sp, #0]
    5fe8:	462b      	mov	r3, r5
    5fea:	aa1d      	add	r2, sp, #116	; 0x74
    5fec:	4621      	mov	r1, r4
    5fee:	4658      	mov	r0, fp
    5ff0:	f001 fcce 	bl	7990 <_wcsrtombs_r>
    5ff4:	4285      	cmp	r5, r0
    5ff6:	f040 837c 	bne.w	66f2 <_svfprintf_r+0x1b2a>
    5ffa:	9a05      	ldr	r2, [sp, #20]
    5ffc:	2300      	movs	r3, #0
    5ffe:	54a3      	strb	r3, [r4, r2]
    6000:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    6004:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    6008:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    600c:	9303      	str	r3, [sp, #12]
    600e:	9202      	str	r2, [sp, #8]
    6010:	930f      	str	r3, [sp, #60]	; 0x3c
    6012:	f7fe bfba 	b.w	4f8a <_svfprintf_r+0x3c2>
    6016:	212d      	movs	r1, #45	; 0x2d
    6018:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    601c:	f7fe bfa4 	b.w	4f68 <_svfprintf_r+0x3a0>
    6020:	9b16      	ldr	r3, [sp, #88]	; 0x58
    6022:	9915      	ldr	r1, [sp, #84]	; 0x54
    6024:	ebab 0b03 	sub.w	fp, fp, r3
    6028:	461a      	mov	r2, r3
    602a:	4658      	mov	r0, fp
    602c:	f7fd fdd0 	bl	3bd0 <strncpy>
    6030:	f89a 2001 	ldrb.w	r2, [sl, #1]
    6034:	4b05      	ldr	r3, [pc, #20]	; (604c <_svfprintf_r+0x1484>)
    6036:	b10a      	cbz	r2, 603c <_svfprintf_r+0x1474>
    6038:	f10a 0a01 	add.w	sl, sl, #1
    603c:	f04f 0c00 	mov.w	ip, #0
    6040:	e628      	b.n	5c94 <_svfprintf_r+0x10cc>
    6042:	bf00      	nop
    6044:	20000660 	.word	0x20000660
    6048:	20000d94 	.word	0x20000d94
    604c:	cccccccd 	.word	0xcccccccd
    6050:	ee1b 1a10 	vmov	r1, s22
    6054:	aa24      	add	r2, sp, #144	; 0x90
    6056:	4658      	mov	r0, fp
    6058:	f001 fcba 	bl	79d0 <__ssprint_r>
    605c:	2800      	cmp	r0, #0
    605e:	f47f aa18 	bne.w	5492 <_svfprintf_r+0x8ca>
    6062:	991b      	ldr	r1, [sp, #108]	; 0x6c
    6064:	9a26      	ldr	r2, [sp, #152]	; 0x98
    6066:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    606a:	e67c      	b.n	5d66 <_svfprintf_r+0x119e>
    606c:	9b05      	ldr	r3, [sp, #20]
    606e:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    6072:	930f      	str	r3, [sp, #60]	; 0x3c
    6074:	e9cd 3302 	strd	r3, r3, [sp, #8]
    6078:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    607c:	9307      	str	r3, [sp, #28]
    607e:	f7fe bf84 	b.w	4f8a <_svfprintf_r+0x3c2>
    6082:	990e      	ldr	r1, [sp, #56]	; 0x38
    6084:	9805      	ldr	r0, [sp, #20]
    6086:	1865      	adds	r5, r4, r1
    6088:	1a2d      	subs	r5, r5, r0
    608a:	1acc      	subs	r4, r1, r3
    608c:	42a5      	cmp	r5, r4
    608e:	bfa8      	it	ge
    6090:	4625      	movge	r5, r4
    6092:	f7ff bb4d 	b.w	5730 <_svfprintf_r+0xb68>
    6096:	9b08      	ldr	r3, [sp, #32]
    6098:	9904      	ldr	r1, [sp, #16]
    609a:	f853 2b04 	ldr.w	r2, [r3], #4
    609e:	9308      	str	r3, [sp, #32]
    60a0:	8011      	strh	r1, [r2, #0]
    60a2:	464c      	mov	r4, r9
    60a4:	f7fe bdc2 	b.w	4c2c <_svfprintf_r+0x64>
    60a8:	f913 2b04 	ldrsb.w	r2, [r3], #4
    60ac:	9308      	str	r3, [sp, #32]
    60ae:	17d1      	asrs	r1, r2, #31
    60b0:	460b      	mov	r3, r1
    60b2:	f7fe bfdb 	b.w	506c <_svfprintf_r+0x4a4>
    60b6:	9a03      	ldr	r2, [sp, #12]
    60b8:	2102      	movs	r1, #2
    60ba:	ab22      	add	r3, sp, #136	; 0x88
    60bc:	9301      	str	r3, [sp, #4]
    60be:	ab1d      	add	r3, sp, #116	; 0x74
    60c0:	9300      	str	r3, [sp, #0]
    60c2:	4658      	mov	r0, fp
    60c4:	ab1b      	add	r3, sp, #108	; 0x6c
    60c6:	eeb0 0b4a 	vmov.f64	d0, d10
    60ca:	9202      	str	r2, [sp, #8]
    60cc:	f000 fdc4 	bl	6c58 <_dtoa_r>
    60d0:	2d47      	cmp	r5, #71	; 0x47
    60d2:	9a02      	ldr	r2, [sp, #8]
    60d4:	4604      	mov	r4, r0
    60d6:	f000 8161 	beq.w	639c <_svfprintf_r+0x17d4>
    60da:	2d46      	cmp	r5, #70	; 0x46
    60dc:	4410      	add	r0, r2
    60de:	d105      	bne.n	60ec <_svfprintf_r+0x1524>
    60e0:	7823      	ldrb	r3, [r4, #0]
    60e2:	2b30      	cmp	r3, #48	; 0x30
    60e4:	f000 826f 	beq.w	65c6 <_svfprintf_r+0x19fe>
    60e8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    60ea:	4410      	add	r0, r2
    60ec:	eeb5 ab40 	vcmp.f64	d10, #0.0
    60f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    60f4:	f040 8146 	bne.w	6384 <_svfprintf_r+0x17bc>
    60f8:	4603      	mov	r3, r0
    60fa:	1b1b      	subs	r3, r3, r4
    60fc:	930e      	str	r3, [sp, #56]	; 0x38
    60fe:	2d47      	cmp	r5, #71	; 0x47
    6100:	f000 8110 	beq.w	6324 <_svfprintf_r+0x175c>
    6104:	2d46      	cmp	r5, #70	; 0x46
    6106:	f000 81b5 	beq.w	6474 <_svfprintf_r+0x18ac>
    610a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    610c:	930c      	str	r3, [sp, #48]	; 0x30
    610e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6110:	2d41      	cmp	r5, #65	; 0x41
    6112:	f103 33ff 	add.w	r3, r3, #4294967295
    6116:	931b      	str	r3, [sp, #108]	; 0x6c
    6118:	f000 81e5 	beq.w	64e6 <_svfprintf_r+0x191e>
    611c:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
    6120:	2100      	movs	r1, #0
    6122:	2b00      	cmp	r3, #0
    6124:	bfb8      	it	lt
    6126:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
    6128:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
    612c:	bfba      	itte	lt
    612e:	f1c3 0301 	rsblt	r3, r3, #1
    6132:	222d      	movlt	r2, #45	; 0x2d
    6134:	222b      	movge	r2, #43	; 0x2b
    6136:	2b09      	cmp	r3, #9
    6138:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
    613c:	f340 81da 	ble.w	64f4 <_svfprintf_r+0x192c>
    6140:	f10d 058f 	add.w	r5, sp, #143	; 0x8f
    6144:	f8df c41c 	ldr.w	ip, [pc, #1052]	; 6564 <_svfprintf_r+0x199c>
    6148:	462a      	mov	r2, r5
    614a:	4610      	mov	r0, r2
    614c:	fb8c 2103 	smull	r2, r1, ip, r3
    6150:	17da      	asrs	r2, r3, #31
    6152:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
    6156:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    615a:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
    615e:	3130      	adds	r1, #48	; 0x30
    6160:	f800 1c01 	strb.w	r1, [r0, #-1]
    6164:	4619      	mov	r1, r3
    6166:	2963      	cmp	r1, #99	; 0x63
    6168:	4613      	mov	r3, r2
    616a:	f100 32ff 	add.w	r2, r0, #4294967295
    616e:	dcec      	bgt.n	614a <_svfprintf_r+0x1582>
    6170:	3330      	adds	r3, #48	; 0x30
    6172:	b2d9      	uxtb	r1, r3
    6174:	1e83      	subs	r3, r0, #2
    6176:	429d      	cmp	r5, r3
    6178:	f802 1c01 	strb.w	r1, [r2, #-1]
    617c:	f240 828b 	bls.w	6696 <_svfprintf_r+0x1ace>
    6180:	4613      	mov	r3, r2
    6182:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    6186:	e001      	b.n	618c <_svfprintf_r+0x15c4>
    6188:	f813 1b01 	ldrb.w	r1, [r3], #1
    618c:	f802 1b01 	strb.w	r1, [r2], #1
    6190:	429d      	cmp	r5, r3
    6192:	d1f9      	bne.n	6188 <_svfprintf_r+0x15c0>
    6194:	f10d 0391 	add.w	r3, sp, #145	; 0x91
    6198:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    619c:	1a1b      	subs	r3, r3, r0
    619e:	4413      	add	r3, r2
    61a0:	aa1e      	add	r2, sp, #120	; 0x78
    61a2:	1a9b      	subs	r3, r3, r2
    61a4:	9314      	str	r3, [sp, #80]	; 0x50
    61a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    61a8:	9a14      	ldr	r2, [sp, #80]	; 0x50
    61aa:	2b01      	cmp	r3, #1
    61ac:	441a      	add	r2, r3
    61ae:	9205      	str	r2, [sp, #20]
    61b0:	f340 8203 	ble.w	65ba <_svfprintf_r+0x19f2>
    61b4:	9b05      	ldr	r3, [sp, #20]
    61b6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    61b8:	4413      	add	r3, r2
    61ba:	9305      	str	r3, [sp, #20]
    61bc:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
    61c0:	9a05      	ldr	r2, [sp, #20]
    61c2:	f443 7880 	orr.w	r8, r3, #256	; 0x100
    61c6:	2300      	movs	r3, #0
    61c8:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    61cc:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    61d0:	930f      	str	r3, [sp, #60]	; 0x3c
    61d2:	9202      	str	r2, [sp, #8]
    61d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    61d6:	2b00      	cmp	r3, #0
    61d8:	f040 80b1 	bne.w	633e <_svfprintf_r+0x1776>
    61dc:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    61e0:	9303      	str	r3, [sp, #12]
    61e2:	f7fe bed2 	b.w	4f8a <_svfprintf_r+0x3c2>
    61e6:	4620      	mov	r0, r4
    61e8:	f7fd ff4a 	bl	4080 <strlen>
    61ec:	4602      	mov	r2, r0
    61ee:	9005      	str	r0, [sp, #20]
    61f0:	f7fe bf20 	b.w	5034 <_svfprintf_r+0x46c>
    61f4:	ee1b 1a10 	vmov	r1, s22
    61f8:	aa24      	add	r2, sp, #144	; 0x90
    61fa:	4658      	mov	r0, fp
    61fc:	f001 fbe8 	bl	79d0 <__ssprint_r>
    6200:	f7fe bded 	b.w	4dde <_svfprintf_r+0x216>
    6204:	1c59      	adds	r1, r3, #1
    6206:	4658      	mov	r0, fp
    6208:	f7fc fd84 	bl	2d14 <_malloc_r>
    620c:	4604      	mov	r4, r0
    620e:	2800      	cmp	r0, #0
    6210:	f000 81ca 	beq.w	65a8 <_svfprintf_r+0x19e0>
    6214:	9007      	str	r0, [sp, #28]
    6216:	e6e0      	b.n	5fda <_svfprintf_r+0x1412>
    6218:	ee1b 1a10 	vmov	r1, s22
    621c:	aa24      	add	r2, sp, #144	; 0x90
    621e:	4658      	mov	r0, fp
    6220:	f001 fbd6 	bl	79d0 <__ssprint_r>
    6224:	2800      	cmp	r0, #0
    6226:	f47f a934 	bne.w	5492 <_svfprintf_r+0x8ca>
    622a:	9a26      	ldr	r2, [sp, #152]	; 0x98
    622c:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    6230:	f7ff ba49 	b.w	56c6 <_svfprintf_r+0xafe>
    6234:	ee1b 1a10 	vmov	r1, s22
    6238:	aa24      	add	r2, sp, #144	; 0x90
    623a:	4658      	mov	r0, fp
    623c:	f001 fbc8 	bl	79d0 <__ssprint_r>
    6240:	2800      	cmp	r0, #0
    6242:	f47f a926 	bne.w	5492 <_svfprintf_r+0x8ca>
    6246:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    624a:	991b      	ldr	r1, [sp, #108]	; 0x6c
    624c:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    6250:	e649      	b.n	5ee6 <_svfprintf_r+0x131e>
    6252:	2306      	movs	r3, #6
    6254:	9303      	str	r3, [sp, #12]
    6256:	f7ff bb83 	b.w	5960 <_svfprintf_r+0xd98>
    625a:	9b03      	ldr	r3, [sp, #12]
    625c:	2102      	movs	r1, #2
    625e:	1c5a      	adds	r2, r3, #1
    6260:	e72b      	b.n	60ba <_svfprintf_r+0x14f2>
    6262:	9a03      	ldr	r2, [sp, #12]
    6264:	2103      	movs	r1, #3
    6266:	e728      	b.n	60ba <_svfprintf_r+0x14f2>
    6268:	a81b      	add	r0, sp, #108	; 0x6c
    626a:	eeb0 0b4a 	vmov.f64	d0, d10
    626e:	f000 fbc7 	bl	6a00 <frexp>
    6272:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
    6276:	ee20 0b07 	vmul.f64	d0, d0, d7
    627a:	eeb5 0b40 	vcmp.f64	d0, #0.0
    627e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6282:	d101      	bne.n	6288 <_svfprintf_r+0x16c0>
    6284:	2301      	movs	r3, #1
    6286:	931b      	str	r3, [sp, #108]	; 0x6c
    6288:	48b3      	ldr	r0, [pc, #716]	; (6558 <_svfprintf_r+0x1990>)
    628a:	9b03      	ldr	r3, [sp, #12]
    628c:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
    6290:	3b01      	subs	r3, #1
    6292:	4622      	mov	r2, r4
    6294:	e004      	b.n	62a0 <_svfprintf_r+0x16d8>
    6296:	eeb5 0b40 	vcmp.f64	d0, #0.0
    629a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    629e:	d013      	beq.n	62c8 <_svfprintf_r+0x1700>
    62a0:	ee20 0b05 	vmul.f64	d0, d0, d5
    62a4:	eefd 7bc0 	vcvt.s32.f64	s15, d0
    62a8:	f1b3 3fff 	cmp.w	r3, #4294967295
    62ac:	ee17 1a90 	vmov	r1, s15
    62b0:	5c41      	ldrb	r1, [r0, r1]
    62b2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    62b6:	4694      	mov	ip, r2
    62b8:	ee30 0b46 	vsub.f64	d0, d0, d6
    62bc:	f802 1b01 	strb.w	r1, [r2], #1
    62c0:	4619      	mov	r1, r3
    62c2:	f103 33ff 	add.w	r3, r3, #4294967295
    62c6:	d1e6      	bne.n	6296 <_svfprintf_r+0x16ce>
    62c8:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    62cc:	eeb4 0bc6 	vcmpe.f64	d0, d6
    62d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    62d4:	f300 8148 	bgt.w	6568 <_svfprintf_r+0x19a0>
    62d8:	eeb4 0b46 	vcmp.f64	d0, d6
    62dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    62e0:	d104      	bne.n	62ec <_svfprintf_r+0x1724>
    62e2:	ee17 3a90 	vmov	r3, s15
    62e6:	07db      	lsls	r3, r3, #31
    62e8:	f100 813e 	bmi.w	6568 <_svfprintf_r+0x19a0>
    62ec:	2900      	cmp	r1, #0
    62ee:	db06      	blt.n	62fe <_svfprintf_r+0x1736>
    62f0:	1c4b      	adds	r3, r1, #1
    62f2:	4413      	add	r3, r2
    62f4:	2130      	movs	r1, #48	; 0x30
    62f6:	f802 1b01 	strb.w	r1, [r2], #1
    62fa:	4293      	cmp	r3, r2
    62fc:	d1fb      	bne.n	62f6 <_svfprintf_r+0x172e>
    62fe:	1b13      	subs	r3, r2, r4
    6300:	930e      	str	r3, [sp, #56]	; 0x38
    6302:	e6fc      	b.n	60fe <_svfprintf_r+0x1536>
    6304:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    6306:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6308:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    630c:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    6310:	9613      	str	r6, [sp, #76]	; 0x4c
    6312:	18e3      	adds	r3, r4, r3
    6314:	429d      	cmp	r5, r3
    6316:	4629      	mov	r1, r5
    6318:	bf28      	it	cs
    631a:	4619      	movcs	r1, r3
    631c:	4682      	mov	sl, r0
    631e:	9105      	str	r1, [sp, #20]
    6320:	f7ff b9d8 	b.w	56d4 <_svfprintf_r+0xb0c>
    6324:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    6326:	930c      	str	r3, [sp, #48]	; 0x30
    6328:	1cda      	adds	r2, r3, #3
    632a:	db02      	blt.n	6332 <_svfprintf_r+0x176a>
    632c:	9a03      	ldr	r2, [sp, #12]
    632e:	4293      	cmp	r3, r2
    6330:	dd0c      	ble.n	634c <_svfprintf_r+0x1784>
    6332:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6334:	3b02      	subs	r3, #2
    6336:	930b      	str	r3, [sp, #44]	; 0x2c
    6338:	f023 0520 	bic.w	r5, r3, #32
    633c:	e6e7      	b.n	610e <_svfprintf_r+0x1546>
    633e:	212d      	movs	r1, #45	; 0x2d
    6340:	2300      	movs	r3, #0
    6342:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    6346:	9303      	str	r3, [sp, #12]
    6348:	f7fe be22 	b.w	4f90 <_svfprintf_r+0x3c8>
    634c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    634e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    6350:	4293      	cmp	r3, r2
    6352:	f2c0 80bd 	blt.w	64d0 <_svfprintf_r+0x1908>
    6356:	07f0      	lsls	r0, r6, #31
    6358:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    635a:	f140 8132 	bpl.w	65c2 <_svfprintf_r+0x19fa>
    635e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    6360:	4413      	add	r3, r2
    6362:	9305      	str	r3, [sp, #20]
    6364:	0571      	lsls	r1, r6, #21
    6366:	d503      	bpl.n	6370 <_svfprintf_r+0x17a8>
    6368:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    636a:	2b00      	cmp	r3, #0
    636c:	f300 8135 	bgt.w	65da <_svfprintf_r+0x1a12>
    6370:	9b05      	ldr	r3, [sp, #20]
    6372:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    6376:	9302      	str	r3, [sp, #8]
    6378:	2367      	movs	r3, #103	; 0x67
    637a:	930b      	str	r3, [sp, #44]	; 0x2c
    637c:	2300      	movs	r3, #0
    637e:	930f      	str	r3, [sp, #60]	; 0x3c
    6380:	930d      	str	r3, [sp, #52]	; 0x34
    6382:	e727      	b.n	61d4 <_svfprintf_r+0x160c>
    6384:	9b22      	ldr	r3, [sp, #136]	; 0x88
    6386:	4283      	cmp	r3, r0
    6388:	f4bf aeb7 	bcs.w	60fa <_svfprintf_r+0x1532>
    638c:	2130      	movs	r1, #48	; 0x30
    638e:	1c5a      	adds	r2, r3, #1
    6390:	9222      	str	r2, [sp, #136]	; 0x88
    6392:	7019      	strb	r1, [r3, #0]
    6394:	9b22      	ldr	r3, [sp, #136]	; 0x88
    6396:	4298      	cmp	r0, r3
    6398:	d8f9      	bhi.n	638e <_svfprintf_r+0x17c6>
    639a:	e6ae      	b.n	60fa <_svfprintf_r+0x1532>
    639c:	07f3      	lsls	r3, r6, #31
    639e:	f100 80a7 	bmi.w	64f0 <_svfprintf_r+0x1928>
    63a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
    63a4:	e6a9      	b.n	60fa <_svfprintf_r+0x1532>
    63a6:	aa24      	add	r2, sp, #144	; 0x90
    63a8:	4658      	mov	r0, fp
    63aa:	9105      	str	r1, [sp, #20]
    63ac:	f001 fb10 	bl	79d0 <__ssprint_r>
    63b0:	2800      	cmp	r0, #0
    63b2:	f47f a86e 	bne.w	5492 <_svfprintf_r+0x8ca>
    63b6:	f896 c000 	ldrb.w	ip, [r6]
    63ba:	9a26      	ldr	r2, [sp, #152]	; 0x98
    63bc:	9905      	ldr	r1, [sp, #20]
    63be:	a827      	add	r0, sp, #156	; 0x9c
    63c0:	4465      	add	r5, ip
    63c2:	f7ff bbec 	b.w	5b9e <_svfprintf_r+0xfd6>
    63c6:	ee1b 1a10 	vmov	r1, s22
    63ca:	aa24      	add	r2, sp, #144	; 0x90
    63cc:	4658      	mov	r0, fp
    63ce:	f001 faff 	bl	79d0 <__ssprint_r>
    63d2:	2800      	cmp	r0, #0
    63d4:	f47f a85d 	bne.w	5492 <_svfprintf_r+0x8ca>
    63d8:	9a26      	ldr	r2, [sp, #152]	; 0x98
    63da:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    63de:	f7ff b96b 	b.w	56b8 <_svfprintf_r+0xaf0>
    63e2:	2378      	movs	r3, #120	; 0x78
    63e4:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    63e8:	2330      	movs	r3, #48	; 0x30
    63ea:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    63ee:	9b03      	ldr	r3, [sp, #12]
    63f0:	2b63      	cmp	r3, #99	; 0x63
    63f2:	f048 0602 	orr.w	r6, r8, #2
    63f6:	f300 80a6 	bgt.w	6546 <_svfprintf_r+0x197e>
    63fa:	2300      	movs	r3, #0
    63fc:	9307      	str	r3, [sp, #28]
    63fe:	ac37      	add	r4, sp, #220	; 0xdc
    6400:	ee18 3a90 	vmov	r3, s17
    6404:	2b00      	cmp	r3, #0
    6406:	f448 7881 	orr.w	r8, r8, #258	; 0x102
    640a:	db2b      	blt.n	6464 <_svfprintf_r+0x189c>
    640c:	eeb0 ab48 	vmov.f64	d10, d8
    6410:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6412:	f023 0520 	bic.w	r5, r3, #32
    6416:	2300      	movs	r3, #0
    6418:	9309      	str	r3, [sp, #36]	; 0x24
    641a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    641c:	2b61      	cmp	r3, #97	; 0x61
    641e:	f47f aaad 	bne.w	597c <_svfprintf_r+0xdb4>
    6422:	eeb0 0b4a 	vmov.f64	d0, d10
    6426:	a81b      	add	r0, sp, #108	; 0x6c
    6428:	f000 faea 	bl	6a00 <frexp>
    642c:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
    6430:	ee20 0b07 	vmul.f64	d0, d0, d7
    6434:	eeb5 0b40 	vcmp.f64	d0, #0.0
    6438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    643c:	d101      	bne.n	6442 <_svfprintf_r+0x187a>
    643e:	2301      	movs	r3, #1
    6440:	931b      	str	r3, [sp, #108]	; 0x6c
    6442:	4846      	ldr	r0, [pc, #280]	; (655c <_svfprintf_r+0x1994>)
    6444:	e721      	b.n	628a <_svfprintf_r+0x16c2>
    6446:	ee1b 1a10 	vmov	r1, s22
    644a:	aa24      	add	r2, sp, #144	; 0x90
    644c:	4658      	mov	r0, fp
    644e:	f001 fabf 	bl	79d0 <__ssprint_r>
    6452:	2800      	cmp	r0, #0
    6454:	f47f a81d 	bne.w	5492 <_svfprintf_r+0x8ca>
    6458:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    645a:	9a26      	ldr	r2, [sp, #152]	; 0x98
    645c:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    6460:	f7ff b94e 	b.w	5700 <_svfprintf_r+0xb38>
    6464:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6466:	f023 0520 	bic.w	r5, r3, #32
    646a:	232d      	movs	r3, #45	; 0x2d
    646c:	9309      	str	r3, [sp, #36]	; 0x24
    646e:	eeb1 ab48 	vneg.f64	d10, d8
    6472:	e7d2      	b.n	641a <_svfprintf_r+0x1852>
    6474:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    6476:	920c      	str	r2, [sp, #48]	; 0x30
    6478:	2a00      	cmp	r2, #0
    647a:	f006 0301 	and.w	r3, r6, #1
    647e:	f340 810d 	ble.w	669c <_svfprintf_r+0x1ad4>
    6482:	9903      	ldr	r1, [sp, #12]
    6484:	430b      	orrs	r3, r1
    6486:	f040 80cf 	bne.w	6628 <_svfprintf_r+0x1a60>
    648a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    648c:	9305      	str	r3, [sp, #20]
    648e:	2366      	movs	r3, #102	; 0x66
    6490:	930b      	str	r3, [sp, #44]	; 0x2c
    6492:	0572      	lsls	r2, r6, #21
    6494:	f100 80a3 	bmi.w	65de <_svfprintf_r+0x1a16>
    6498:	9b05      	ldr	r3, [sp, #20]
    649a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    649e:	9302      	str	r3, [sp, #8]
    64a0:	e76c      	b.n	637c <_svfprintf_r+0x17b4>
    64a2:	ee1b 1a10 	vmov	r1, s22
    64a6:	aa24      	add	r2, sp, #144	; 0x90
    64a8:	4658      	mov	r0, fp
    64aa:	f001 fa91 	bl	79d0 <__ssprint_r>
    64ae:	2800      	cmp	r0, #0
    64b0:	f47e afef 	bne.w	5492 <_svfprintf_r+0x8ca>
    64b4:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
    64b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    64b8:	9a26      	ldr	r2, [sp, #152]	; 0x98
    64ba:	1b1c      	subs	r4, r3, r4
    64bc:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    64c0:	f7ff b936 	b.w	5730 <_svfprintf_r+0xb68>
    64c4:	2358      	movs	r3, #88	; 0x58
    64c6:	e78d      	b.n	63e4 <_svfprintf_r+0x181c>
    64c8:	2200      	movs	r2, #0
    64ca:	9203      	str	r2, [sp, #12]
    64cc:	f7fe bbda 	b.w	4c84 <_svfprintf_r+0xbc>
    64d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    64d2:	9a10      	ldr	r2, [sp, #64]	; 0x40
    64d4:	189a      	adds	r2, r3, r2
    64d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    64d8:	9205      	str	r2, [sp, #20]
    64da:	2b00      	cmp	r3, #0
    64dc:	f340 80ab 	ble.w	6636 <_svfprintf_r+0x1a6e>
    64e0:	2367      	movs	r3, #103	; 0x67
    64e2:	930b      	str	r3, [sp, #44]	; 0x2c
    64e4:	e7d5      	b.n	6492 <_svfprintf_r+0x18ca>
    64e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    64e8:	320f      	adds	r2, #15
    64ea:	b2d2      	uxtb	r2, r2
    64ec:	2101      	movs	r1, #1
    64ee:	e618      	b.n	6122 <_svfprintf_r+0x155a>
    64f0:	18a0      	adds	r0, r4, r2
    64f2:	e5fb      	b.n	60ec <_svfprintf_r+0x1524>
    64f4:	2900      	cmp	r1, #0
    64f6:	f040 80a8 	bne.w	664a <_svfprintf_r+0x1a82>
    64fa:	2230      	movs	r2, #48	; 0x30
    64fc:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
    6500:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
    6504:	3330      	adds	r3, #48	; 0x30
    6506:	f802 3b01 	strb.w	r3, [r2], #1
    650a:	ab1e      	add	r3, sp, #120	; 0x78
    650c:	1ad3      	subs	r3, r2, r3
    650e:	9314      	str	r3, [sp, #80]	; 0x50
    6510:	e649      	b.n	61a6 <_svfprintf_r+0x15de>
    6512:	3301      	adds	r3, #1
    6514:	4912      	ldr	r1, [pc, #72]	; (6560 <_svfprintf_r+0x1998>)
    6516:	f8ca 5004 	str.w	r5, [sl, #4]
    651a:	442a      	add	r2, r5
    651c:	2b07      	cmp	r3, #7
    651e:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    6522:	f8ca 1000 	str.w	r1, [sl]
    6526:	f77f ac33 	ble.w	5d90 <_svfprintf_r+0x11c8>
    652a:	ee1b 1a10 	vmov	r1, s22
    652e:	aa24      	add	r2, sp, #144	; 0x90
    6530:	4658      	mov	r0, fp
    6532:	f001 fa4d 	bl	79d0 <__ssprint_r>
    6536:	2800      	cmp	r0, #0
    6538:	f47e afab 	bne.w	5492 <_svfprintf_r+0x8ca>
    653c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    6540:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    6544:	e426      	b.n	5d94 <_svfprintf_r+0x11cc>
    6546:	1c59      	adds	r1, r3, #1
    6548:	4658      	mov	r0, fp
    654a:	f7fc fbe3 	bl	2d14 <_malloc_r>
    654e:	4604      	mov	r4, r0
    6550:	b350      	cbz	r0, 65a8 <_svfprintf_r+0x19e0>
    6552:	9007      	str	r0, [sp, #28]
    6554:	e754      	b.n	6400 <_svfprintf_r+0x1838>
    6556:	bf00      	nop
    6558:	20000644 	.word	0x20000644
    655c:	20000630 	.word	0x20000630
    6560:	20000d94 	.word	0x20000d94
    6564:	66666667 	.word	0x66666667
    6568:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
    656c:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    6570:	f890 c00f 	ldrb.w	ip, [r0, #15]
    6574:	4561      	cmp	r1, ip
    6576:	4613      	mov	r3, r2
    6578:	d10a      	bne.n	6590 <_svfprintf_r+0x19c8>
    657a:	f04f 0e30 	mov.w	lr, #48	; 0x30
    657e:	f803 ec01 	strb.w	lr, [r3, #-1]
    6582:	9b22      	ldr	r3, [sp, #136]	; 0x88
    6584:	1e59      	subs	r1, r3, #1
    6586:	9122      	str	r1, [sp, #136]	; 0x88
    6588:	f813 1c01 	ldrb.w	r1, [r3, #-1]
    658c:	458c      	cmp	ip, r1
    658e:	d0f6      	beq.n	657e <_svfprintf_r+0x19b6>
    6590:	2939      	cmp	r1, #57	; 0x39
    6592:	bf16      	itet	ne
    6594:	3101      	addne	r1, #1
    6596:	7a81      	ldrbeq	r1, [r0, #10]
    6598:	b2c9      	uxtbne	r1, r1
    659a:	f803 1c01 	strb.w	r1, [r3, #-1]
    659e:	e6ae      	b.n	62fe <_svfprintf_r+0x1736>
    65a0:	2300      	movs	r3, #0
    65a2:	4690      	mov	r8, r2
    65a4:	9307      	str	r3, [sp, #28]
    65a6:	e760      	b.n	646a <_svfprintf_r+0x18a2>
    65a8:	ee1b 2a10 	vmov	r2, s22
    65ac:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    65b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    65b4:	8193      	strh	r3, [r2, #12]
    65b6:	f7fe bc16 	b.w	4de6 <_svfprintf_r+0x21e>
    65ba:	07f5      	lsls	r5, r6, #31
    65bc:	f57f adfe 	bpl.w	61bc <_svfprintf_r+0x15f4>
    65c0:	e5f8      	b.n	61b4 <_svfprintf_r+0x15ec>
    65c2:	9305      	str	r3, [sp, #20]
    65c4:	e6ce      	b.n	6364 <_svfprintf_r+0x179c>
    65c6:	eeb5 ab40 	vcmp.f64	d10, #0.0
    65ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    65ce:	f43f ad8b 	beq.w	60e8 <_svfprintf_r+0x1520>
    65d2:	f1c2 0201 	rsb	r2, r2, #1
    65d6:	921b      	str	r2, [sp, #108]	; 0x6c
    65d8:	e587      	b.n	60ea <_svfprintf_r+0x1522>
    65da:	2367      	movs	r3, #103	; 0x67
    65dc:	930b      	str	r3, [sp, #44]	; 0x2c
    65de:	9913      	ldr	r1, [sp, #76]	; 0x4c
    65e0:	780b      	ldrb	r3, [r1, #0]
    65e2:	2bff      	cmp	r3, #255	; 0xff
    65e4:	d079      	beq.n	66da <_svfprintf_r+0x1b12>
    65e6:	2500      	movs	r5, #0
    65e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    65ea:	4628      	mov	r0, r5
    65ec:	e003      	b.n	65f6 <_svfprintf_r+0x1a2e>
    65ee:	3001      	adds	r0, #1
    65f0:	3101      	adds	r1, #1
    65f2:	2bff      	cmp	r3, #255	; 0xff
    65f4:	d008      	beq.n	6608 <_svfprintf_r+0x1a40>
    65f6:	4293      	cmp	r3, r2
    65f8:	da06      	bge.n	6608 <_svfprintf_r+0x1a40>
    65fa:	1ad2      	subs	r2, r2, r3
    65fc:	784b      	ldrb	r3, [r1, #1]
    65fe:	2b00      	cmp	r3, #0
    6600:	d1f5      	bne.n	65ee <_svfprintf_r+0x1a26>
    6602:	780b      	ldrb	r3, [r1, #0]
    6604:	3501      	adds	r5, #1
    6606:	e7f4      	b.n	65f2 <_svfprintf_r+0x1a2a>
    6608:	920c      	str	r2, [sp, #48]	; 0x30
    660a:	9113      	str	r1, [sp, #76]	; 0x4c
    660c:	900d      	str	r0, [sp, #52]	; 0x34
    660e:	950f      	str	r5, [sp, #60]	; 0x3c
    6610:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    6612:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    6614:	9916      	ldr	r1, [sp, #88]	; 0x58
    6616:	4413      	add	r3, r2
    6618:	9a05      	ldr	r2, [sp, #20]
    661a:	fb01 2303 	mla	r3, r1, r3, r2
    661e:	9305      	str	r3, [sp, #20]
    6620:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    6624:	9302      	str	r3, [sp, #8]
    6626:	e5d5      	b.n	61d4 <_svfprintf_r+0x160c>
    6628:	9b10      	ldr	r3, [sp, #64]	; 0x40
    662a:	18d3      	adds	r3, r2, r3
    662c:	4419      	add	r1, r3
    662e:	2366      	movs	r3, #102	; 0x66
    6630:	9105      	str	r1, [sp, #20]
    6632:	930b      	str	r3, [sp, #44]	; 0x2c
    6634:	e72d      	b.n	6492 <_svfprintf_r+0x18ca>
    6636:	f1c3 0301 	rsb	r3, r3, #1
    663a:	441a      	add	r2, r3
    663c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    6640:	9302      	str	r3, [sp, #8]
    6642:	2367      	movs	r3, #103	; 0x67
    6644:	9205      	str	r2, [sp, #20]
    6646:	930b      	str	r3, [sp, #44]	; 0x2c
    6648:	e698      	b.n	637c <_svfprintf_r+0x17b4>
    664a:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    664e:	e759      	b.n	6504 <_svfprintf_r+0x193c>
    6650:	9b03      	ldr	r3, [sp, #12]
    6652:	f8dd 9008 	ldr.w	r9, [sp, #8]
    6656:	f8dd 801c 	ldr.w	r8, [sp, #28]
    665a:	9305      	str	r3, [sp, #20]
    665c:	e4b4      	b.n	5fc8 <_svfprintf_r+0x1400>
    665e:	ee18 3a90 	vmov	r3, s17
    6662:	2b00      	cmp	r3, #0
    6664:	bfb4      	ite	lt
    6666:	212d      	movlt	r1, #45	; 0x2d
    6668:	f89d 1067 	ldrbge.w	r1, [sp, #103]	; 0x67
    666c:	4c25      	ldr	r4, [pc, #148]	; (6704 <_svfprintf_r+0x1b3c>)
    666e:	4b26      	ldr	r3, [pc, #152]	; (6708 <_svfprintf_r+0x1b40>)
    6670:	bfb8      	it	lt
    6672:	f88d 1067 	strblt.w	r1, [sp, #103]	; 0x67
    6676:	f028 0880 	bic.w	r8, r8, #128	; 0x80
    667a:	f7fe bc79 	b.w	4f70 <_svfprintf_r+0x3a8>
    667e:	9b03      	ldr	r3, [sp, #12]
    6680:	9302      	str	r3, [sp, #8]
    6682:	9305      	str	r3, [sp, #20]
    6684:	2373      	movs	r3, #115	; 0x73
    6686:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    668a:	9003      	str	r0, [sp, #12]
    668c:	900f      	str	r0, [sp, #60]	; 0x3c
    668e:	900d      	str	r0, [sp, #52]	; 0x34
    6690:	930b      	str	r3, [sp, #44]	; 0x2c
    6692:	f7fe bc7a 	b.w	4f8a <_svfprintf_r+0x3c2>
    6696:	2302      	movs	r3, #2
    6698:	9314      	str	r3, [sp, #80]	; 0x50
    669a:	e584      	b.n	61a6 <_svfprintf_r+0x15de>
    669c:	9a03      	ldr	r2, [sp, #12]
    669e:	4313      	orrs	r3, r2
    66a0:	d105      	bne.n	66ae <_svfprintf_r+0x1ae6>
    66a2:	2301      	movs	r3, #1
    66a4:	2266      	movs	r2, #102	; 0x66
    66a6:	9302      	str	r3, [sp, #8]
    66a8:	920b      	str	r2, [sp, #44]	; 0x2c
    66aa:	9305      	str	r3, [sp, #20]
    66ac:	e666      	b.n	637c <_svfprintf_r+0x17b4>
    66ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
    66b0:	3301      	adds	r3, #1
    66b2:	441a      	add	r2, r3
    66b4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    66b8:	9302      	str	r3, [sp, #8]
    66ba:	2366      	movs	r3, #102	; 0x66
    66bc:	9205      	str	r2, [sp, #20]
    66be:	930b      	str	r3, [sp, #44]	; 0x2c
    66c0:	e65c      	b.n	637c <_svfprintf_r+0x17b4>
    66c2:	9a08      	ldr	r2, [sp, #32]
    66c4:	f899 3001 	ldrb.w	r3, [r9, #1]
    66c8:	4689      	mov	r9, r1
    66ca:	f852 1b04 	ldr.w	r1, [r2], #4
    66ce:	9208      	str	r2, [sp, #32]
    66d0:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
    66d4:	9103      	str	r1, [sp, #12]
    66d6:	f7fe bad3 	b.w	4c80 <_svfprintf_r+0xb8>
    66da:	2300      	movs	r3, #0
    66dc:	930f      	str	r3, [sp, #60]	; 0x3c
    66de:	930d      	str	r3, [sp, #52]	; 0x34
    66e0:	e796      	b.n	6610 <_svfprintf_r+0x1a48>
    66e2:	230c      	movs	r3, #12
    66e4:	f8cb 3000 	str.w	r3, [fp]
    66e8:	f04f 33ff 	mov.w	r3, #4294967295
    66ec:	9304      	str	r3, [sp, #16]
    66ee:	f7fe bb81 	b.w	4df4 <_svfprintf_r+0x22c>
    66f2:	ee1b 2a10 	vmov	r2, s22
    66f6:	8993      	ldrh	r3, [r2, #12]
    66f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    66fc:	8193      	strh	r3, [r2, #12]
    66fe:	f7fe bec8 	b.w	5492 <_svfprintf_r+0x8ca>
    6702:	bf00      	nop
    6704:	20000628 	.word	0x20000628
    6708:	2000062c 	.word	0x2000062c

0000670c <_fclose_r>:
    670c:	b570      	push	{r4, r5, r6, lr}
    670e:	2900      	cmp	r1, #0
    6710:	d04b      	beq.n	67aa <_fclose_r+0x9e>
    6712:	4606      	mov	r6, r0
    6714:	460c      	mov	r4, r1
    6716:	b110      	cbz	r0, 671e <_fclose_r+0x12>
    6718:	6b43      	ldr	r3, [r0, #52]	; 0x34
    671a:	2b00      	cmp	r3, #0
    671c:	d048      	beq.n	67b0 <_fclose_r+0xa4>
    671e:	6e63      	ldr	r3, [r4, #100]	; 0x64
    6720:	07d8      	lsls	r0, r3, #31
    6722:	d534      	bpl.n	678e <_fclose_r+0x82>
    6724:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    6728:	2b00      	cmp	r3, #0
    672a:	d03e      	beq.n	67aa <_fclose_r+0x9e>
    672c:	4621      	mov	r1, r4
    672e:	4630      	mov	r0, r6
    6730:	f000 f850 	bl	67d4 <__sflush_r>
    6734:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    6736:	4605      	mov	r5, r0
    6738:	b133      	cbz	r3, 6748 <_fclose_r+0x3c>
    673a:	69e1      	ldr	r1, [r4, #28]
    673c:	4630      	mov	r0, r6
    673e:	4798      	blx	r3
    6740:	2800      	cmp	r0, #0
    6742:	bfb8      	it	lt
    6744:	f04f 35ff 	movlt.w	r5, #4294967295
    6748:	89a3      	ldrh	r3, [r4, #12]
    674a:	061a      	lsls	r2, r3, #24
    674c:	d43c      	bmi.n	67c8 <_fclose_r+0xbc>
    674e:	6b21      	ldr	r1, [r4, #48]	; 0x30
    6750:	b141      	cbz	r1, 6764 <_fclose_r+0x58>
    6752:	f104 0340 	add.w	r3, r4, #64	; 0x40
    6756:	4299      	cmp	r1, r3
    6758:	d002      	beq.n	6760 <_fclose_r+0x54>
    675a:	4630      	mov	r0, r6
    675c:	f7fd fd4e 	bl	41fc <_free_r>
    6760:	2300      	movs	r3, #0
    6762:	6323      	str	r3, [r4, #48]	; 0x30
    6764:	6c61      	ldr	r1, [r4, #68]	; 0x44
    6766:	b121      	cbz	r1, 6772 <_fclose_r+0x66>
    6768:	4630      	mov	r0, r6
    676a:	f7fd fd47 	bl	41fc <_free_r>
    676e:	2300      	movs	r3, #0
    6770:	6463      	str	r3, [r4, #68]	; 0x44
    6772:	f7fd f82b 	bl	37cc <__sfp_lock_acquire>
    6776:	6e63      	ldr	r3, [r4, #100]	; 0x64
    6778:	2200      	movs	r2, #0
    677a:	07db      	lsls	r3, r3, #31
    677c:	81a2      	strh	r2, [r4, #12]
    677e:	d51f      	bpl.n	67c0 <_fclose_r+0xb4>
    6780:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6782:	f7fd faef 	bl	3d64 <__retarget_lock_close_recursive>
    6786:	f7fd f827 	bl	37d8 <__sfp_lock_release>
    678a:	4628      	mov	r0, r5
    678c:	bd70      	pop	{r4, r5, r6, pc}
    678e:	89a3      	ldrh	r3, [r4, #12]
    6790:	0599      	lsls	r1, r3, #22
    6792:	d4cb      	bmi.n	672c <_fclose_r+0x20>
    6794:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6796:	f7fd fae7 	bl	3d68 <__retarget_lock_acquire_recursive>
    679a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    679e:	2b00      	cmp	r3, #0
    67a0:	d1c4      	bne.n	672c <_fclose_r+0x20>
    67a2:	6e65      	ldr	r5, [r4, #100]	; 0x64
    67a4:	f015 0501 	ands.w	r5, r5, #1
    67a8:	d005      	beq.n	67b6 <_fclose_r+0xaa>
    67aa:	2500      	movs	r5, #0
    67ac:	4628      	mov	r0, r5
    67ae:	bd70      	pop	{r4, r5, r6, pc}
    67b0:	f7fc ffee 	bl	3790 <__sinit>
    67b4:	e7b3      	b.n	671e <_fclose_r+0x12>
    67b6:	6da0      	ldr	r0, [r4, #88]	; 0x58
    67b8:	f7fd fad8 	bl	3d6c <__retarget_lock_release_recursive>
    67bc:	4628      	mov	r0, r5
    67be:	bd70      	pop	{r4, r5, r6, pc}
    67c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    67c2:	f7fd fad3 	bl	3d6c <__retarget_lock_release_recursive>
    67c6:	e7db      	b.n	6780 <_fclose_r+0x74>
    67c8:	6921      	ldr	r1, [r4, #16]
    67ca:	4630      	mov	r0, r6
    67cc:	f7fd fd16 	bl	41fc <_free_r>
    67d0:	e7bd      	b.n	674e <_fclose_r+0x42>
    67d2:	bf00      	nop

000067d4 <__sflush_r>:
    67d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
    67d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    67dc:	460c      	mov	r4, r1
    67de:	0711      	lsls	r1, r2, #28
    67e0:	4680      	mov	r8, r0
    67e2:	d447      	bmi.n	6874 <__sflush_r+0xa0>
    67e4:	6863      	ldr	r3, [r4, #4]
    67e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    67ea:	2b00      	cmp	r3, #0
    67ec:	81a2      	strh	r2, [r4, #12]
    67ee:	dd5e      	ble.n	68ae <__sflush_r+0xda>
    67f0:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    67f2:	2d00      	cmp	r5, #0
    67f4:	d058      	beq.n	68a8 <__sflush_r+0xd4>
    67f6:	2300      	movs	r3, #0
    67f8:	f8d8 6000 	ldr.w	r6, [r8]
    67fc:	f8c8 3000 	str.w	r3, [r8]
    6800:	b293      	uxth	r3, r2
    6802:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    6806:	d156      	bne.n	68b6 <__sflush_r+0xe2>
    6808:	2301      	movs	r3, #1
    680a:	69e1      	ldr	r1, [r4, #28]
    680c:	4640      	mov	r0, r8
    680e:	47a8      	blx	r5
    6810:	1c43      	adds	r3, r0, #1
    6812:	d067      	beq.n	68e4 <__sflush_r+0x110>
    6814:	89a3      	ldrh	r3, [r4, #12]
    6816:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    6818:	075f      	lsls	r7, r3, #29
    681a:	d505      	bpl.n	6828 <__sflush_r+0x54>
    681c:	6863      	ldr	r3, [r4, #4]
    681e:	1ac0      	subs	r0, r0, r3
    6820:	6b23      	ldr	r3, [r4, #48]	; 0x30
    6822:	b10b      	cbz	r3, 6828 <__sflush_r+0x54>
    6824:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    6826:	1ac0      	subs	r0, r0, r3
    6828:	69e1      	ldr	r1, [r4, #28]
    682a:	4602      	mov	r2, r0
    682c:	2300      	movs	r3, #0
    682e:	4640      	mov	r0, r8
    6830:	47a8      	blx	r5
    6832:	1c41      	adds	r1, r0, #1
    6834:	d141      	bne.n	68ba <__sflush_r+0xe6>
    6836:	f8d8 3000 	ldr.w	r3, [r8]
    683a:	2b00      	cmp	r3, #0
    683c:	d03d      	beq.n	68ba <__sflush_r+0xe6>
    683e:	2b1d      	cmp	r3, #29
    6840:	d001      	beq.n	6846 <__sflush_r+0x72>
    6842:	2b16      	cmp	r3, #22
    6844:	d156      	bne.n	68f4 <__sflush_r+0x120>
    6846:	89a3      	ldrh	r3, [r4, #12]
    6848:	6922      	ldr	r2, [r4, #16]
    684a:	6022      	str	r2, [r4, #0]
    684c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    6850:	2100      	movs	r1, #0
    6852:	6061      	str	r1, [r4, #4]
    6854:	81a3      	strh	r3, [r4, #12]
    6856:	6b21      	ldr	r1, [r4, #48]	; 0x30
    6858:	f8c8 6000 	str.w	r6, [r8]
    685c:	b321      	cbz	r1, 68a8 <__sflush_r+0xd4>
    685e:	f104 0340 	add.w	r3, r4, #64	; 0x40
    6862:	4299      	cmp	r1, r3
    6864:	d002      	beq.n	686c <__sflush_r+0x98>
    6866:	4640      	mov	r0, r8
    6868:	f7fd fcc8 	bl	41fc <_free_r>
    686c:	2000      	movs	r0, #0
    686e:	6320      	str	r0, [r4, #48]	; 0x30
    6870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6874:	6926      	ldr	r6, [r4, #16]
    6876:	b1be      	cbz	r6, 68a8 <__sflush_r+0xd4>
    6878:	b293      	uxth	r3, r2
    687a:	6825      	ldr	r5, [r4, #0]
    687c:	6026      	str	r6, [r4, #0]
    687e:	079a      	lsls	r2, r3, #30
    6880:	bf0c      	ite	eq
    6882:	6963      	ldreq	r3, [r4, #20]
    6884:	2300      	movne	r3, #0
    6886:	1bad      	subs	r5, r5, r6
    6888:	60a3      	str	r3, [r4, #8]
    688a:	e00b      	b.n	68a4 <__sflush_r+0xd0>
    688c:	462b      	mov	r3, r5
    688e:	4632      	mov	r2, r6
    6890:	69e1      	ldr	r1, [r4, #28]
    6892:	6a67      	ldr	r7, [r4, #36]	; 0x24
    6894:	4640      	mov	r0, r8
    6896:	47b8      	blx	r7
    6898:	f1b0 0c00 	subs.w	ip, r0, #0
    689c:	eba5 050c 	sub.w	r5, r5, ip
    68a0:	4466      	add	r6, ip
    68a2:	dd17      	ble.n	68d4 <__sflush_r+0x100>
    68a4:	2d00      	cmp	r5, #0
    68a6:	dcf1      	bgt.n	688c <__sflush_r+0xb8>
    68a8:	2000      	movs	r0, #0
    68aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    68ae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    68b0:	2b00      	cmp	r3, #0
    68b2:	dc9d      	bgt.n	67f0 <__sflush_r+0x1c>
    68b4:	e7f8      	b.n	68a8 <__sflush_r+0xd4>
    68b6:	6d20      	ldr	r0, [r4, #80]	; 0x50
    68b8:	e7ae      	b.n	6818 <__sflush_r+0x44>
    68ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    68be:	6922      	ldr	r2, [r4, #16]
    68c0:	6022      	str	r2, [r4, #0]
    68c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    68c6:	81a3      	strh	r3, [r4, #12]
    68c8:	2200      	movs	r2, #0
    68ca:	04db      	lsls	r3, r3, #19
    68cc:	6062      	str	r2, [r4, #4]
    68ce:	d5c2      	bpl.n	6856 <__sflush_r+0x82>
    68d0:	6520      	str	r0, [r4, #80]	; 0x50
    68d2:	e7c0      	b.n	6856 <__sflush_r+0x82>
    68d4:	89a3      	ldrh	r3, [r4, #12]
    68d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    68da:	f04f 30ff 	mov.w	r0, #4294967295
    68de:	81a3      	strh	r3, [r4, #12]
    68e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    68e4:	f8d8 3000 	ldr.w	r3, [r8]
    68e8:	2b00      	cmp	r3, #0
    68ea:	d093      	beq.n	6814 <__sflush_r+0x40>
    68ec:	2b1d      	cmp	r3, #29
    68ee:	d006      	beq.n	68fe <__sflush_r+0x12a>
    68f0:	2b16      	cmp	r3, #22
    68f2:	d004      	beq.n	68fe <__sflush_r+0x12a>
    68f4:	89a3      	ldrh	r3, [r4, #12]
    68f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    68fa:	81a3      	strh	r3, [r4, #12]
    68fc:	e7d5      	b.n	68aa <__sflush_r+0xd6>
    68fe:	f8c8 6000 	str.w	r6, [r8]
    6902:	e7d1      	b.n	68a8 <__sflush_r+0xd4>

00006904 <_fflush_r>:
    6904:	b538      	push	{r3, r4, r5, lr}
    6906:	460c      	mov	r4, r1
    6908:	4605      	mov	r5, r0
    690a:	b108      	cbz	r0, 6910 <_fflush_r+0xc>
    690c:	6b43      	ldr	r3, [r0, #52]	; 0x34
    690e:	b303      	cbz	r3, 6952 <_fflush_r+0x4e>
    6910:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
    6914:	b188      	cbz	r0, 693a <_fflush_r+0x36>
    6916:	6e63      	ldr	r3, [r4, #100]	; 0x64
    6918:	07db      	lsls	r3, r3, #31
    691a:	d401      	bmi.n	6920 <_fflush_r+0x1c>
    691c:	0581      	lsls	r1, r0, #22
    691e:	d50f      	bpl.n	6940 <_fflush_r+0x3c>
    6920:	4628      	mov	r0, r5
    6922:	4621      	mov	r1, r4
    6924:	f7ff ff56 	bl	67d4 <__sflush_r>
    6928:	6e63      	ldr	r3, [r4, #100]	; 0x64
    692a:	07da      	lsls	r2, r3, #31
    692c:	4605      	mov	r5, r0
    692e:	d402      	bmi.n	6936 <_fflush_r+0x32>
    6930:	89a3      	ldrh	r3, [r4, #12]
    6932:	059b      	lsls	r3, r3, #22
    6934:	d508      	bpl.n	6948 <_fflush_r+0x44>
    6936:	4628      	mov	r0, r5
    6938:	bd38      	pop	{r3, r4, r5, pc}
    693a:	4605      	mov	r5, r0
    693c:	4628      	mov	r0, r5
    693e:	bd38      	pop	{r3, r4, r5, pc}
    6940:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6942:	f7fd fa11 	bl	3d68 <__retarget_lock_acquire_recursive>
    6946:	e7eb      	b.n	6920 <_fflush_r+0x1c>
    6948:	6da0      	ldr	r0, [r4, #88]	; 0x58
    694a:	f7fd fa0f 	bl	3d6c <__retarget_lock_release_recursive>
    694e:	4628      	mov	r0, r5
    6950:	bd38      	pop	{r3, r4, r5, pc}
    6952:	f7fc ff1d 	bl	3790 <__sinit>
    6956:	e7db      	b.n	6910 <_fflush_r+0xc>

00006958 <_localeconv_r>:
    6958:	4800      	ldr	r0, [pc, #0]	; (695c <_localeconv_r+0x4>)
    695a:	4770      	bx	lr
    695c:	200010a4 	.word	0x200010a4

00006960 <memchr>:
    6960:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    6964:	2a10      	cmp	r2, #16
    6966:	db2b      	blt.n	69c0 <memchr+0x60>
    6968:	f010 0f07 	tst.w	r0, #7
    696c:	d008      	beq.n	6980 <memchr+0x20>
    696e:	f810 3b01 	ldrb.w	r3, [r0], #1
    6972:	3a01      	subs	r2, #1
    6974:	428b      	cmp	r3, r1
    6976:	d02d      	beq.n	69d4 <memchr+0x74>
    6978:	f010 0f07 	tst.w	r0, #7
    697c:	b342      	cbz	r2, 69d0 <memchr+0x70>
    697e:	d1f6      	bne.n	696e <memchr+0xe>
    6980:	b4f0      	push	{r4, r5, r6, r7}
    6982:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    6986:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    698a:	f022 0407 	bic.w	r4, r2, #7
    698e:	f07f 0700 	mvns.w	r7, #0
    6992:	2300      	movs	r3, #0
    6994:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    6998:	3c08      	subs	r4, #8
    699a:	ea85 0501 	eor.w	r5, r5, r1
    699e:	ea86 0601 	eor.w	r6, r6, r1
    69a2:	fa85 f547 	uadd8	r5, r5, r7
    69a6:	faa3 f587 	sel	r5, r3, r7
    69aa:	fa86 f647 	uadd8	r6, r6, r7
    69ae:	faa5 f687 	sel	r6, r5, r7
    69b2:	b98e      	cbnz	r6, 69d8 <memchr+0x78>
    69b4:	d1ee      	bne.n	6994 <memchr+0x34>
    69b6:	bcf0      	pop	{r4, r5, r6, r7}
    69b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    69bc:	f002 0207 	and.w	r2, r2, #7
    69c0:	b132      	cbz	r2, 69d0 <memchr+0x70>
    69c2:	f810 3b01 	ldrb.w	r3, [r0], #1
    69c6:	3a01      	subs	r2, #1
    69c8:	ea83 0301 	eor.w	r3, r3, r1
    69cc:	b113      	cbz	r3, 69d4 <memchr+0x74>
    69ce:	d1f8      	bne.n	69c2 <memchr+0x62>
    69d0:	2000      	movs	r0, #0
    69d2:	4770      	bx	lr
    69d4:	3801      	subs	r0, #1
    69d6:	4770      	bx	lr
    69d8:	2d00      	cmp	r5, #0
    69da:	bf06      	itte	eq
    69dc:	4635      	moveq	r5, r6
    69de:	3803      	subeq	r0, #3
    69e0:	3807      	subne	r0, #7
    69e2:	f015 0f01 	tst.w	r5, #1
    69e6:	d107      	bne.n	69f8 <memchr+0x98>
    69e8:	3001      	adds	r0, #1
    69ea:	f415 7f80 	tst.w	r5, #256	; 0x100
    69ee:	bf02      	ittt	eq
    69f0:	3001      	addeq	r0, #1
    69f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    69f6:	3001      	addeq	r0, #1
    69f8:	bcf0      	pop	{r4, r5, r6, r7}
    69fa:	3801      	subs	r0, #1
    69fc:	4770      	bx	lr
    69fe:	bf00      	nop

00006a00 <frexp>:
    6a00:	b430      	push	{r4, r5}
    6a02:	b082      	sub	sp, #8
    6a04:	ed8d 0b00 	vstr	d0, [sp]
    6a08:	9a01      	ldr	r2, [sp, #4]
    6a0a:	4c19      	ldr	r4, [pc, #100]	; (6a70 <frexp+0x70>)
    6a0c:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
    6a10:	2100      	movs	r1, #0
    6a12:	42a3      	cmp	r3, r4
    6a14:	6001      	str	r1, [r0, #0]
    6a16:	dc21      	bgt.n	6a5c <frexp+0x5c>
    6a18:	9c00      	ldr	r4, [sp, #0]
    6a1a:	431c      	orrs	r4, r3
    6a1c:	d01e      	beq.n	6a5c <frexp+0x5c>
    6a1e:	4c15      	ldr	r4, [pc, #84]	; (6a74 <frexp+0x74>)
    6a20:	4014      	ands	r4, r2
    6a22:	b954      	cbnz	r4, 6a3a <frexp+0x3a>
    6a24:	ed9f 7b10 	vldr	d7, [pc, #64]	; 6a68 <frexp+0x68>
    6a28:	ee20 7b07 	vmul.f64	d7, d0, d7
    6a2c:	ed8d 7b00 	vstr	d7, [sp]
    6a30:	9a01      	ldr	r2, [sp, #4]
    6a32:	f06f 0135 	mvn.w	r1, #53	; 0x35
    6a36:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
    6a3a:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
    6a3e:	e9dd 4500 	ldrd	r4, r5, [sp]
    6a42:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
    6a46:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
    6a4a:	151b      	asrs	r3, r3, #20
    6a4c:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
    6a50:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
    6a54:	e9cd 4500 	strd	r4, r5, [sp]
    6a58:	440b      	add	r3, r1
    6a5a:	6003      	str	r3, [r0, #0]
    6a5c:	ed9d 0b00 	vldr	d0, [sp]
    6a60:	b002      	add	sp, #8
    6a62:	bc30      	pop	{r4, r5}
    6a64:	4770      	bx	lr
    6a66:	bf00      	nop
    6a68:	00000000 	.word	0x00000000
    6a6c:	43500000 	.word	0x43500000
    6a70:	7fefffff 	.word	0x7fefffff
    6a74:	7ff00000 	.word	0x7ff00000

00006a78 <__assert_func>:
    6a78:	b500      	push	{lr}
    6a7a:	4c0b      	ldr	r4, [pc, #44]	; (6aa8 <__assert_func+0x30>)
    6a7c:	6825      	ldr	r5, [r4, #0]
    6a7e:	4614      	mov	r4, r2
    6a80:	68ee      	ldr	r6, [r5, #12]
    6a82:	461a      	mov	r2, r3
    6a84:	b085      	sub	sp, #20
    6a86:	4603      	mov	r3, r0
    6a88:	460d      	mov	r5, r1
    6a8a:	b14c      	cbz	r4, 6aa0 <__assert_func+0x28>
    6a8c:	4907      	ldr	r1, [pc, #28]	; (6aac <__assert_func+0x34>)
    6a8e:	9500      	str	r5, [sp, #0]
    6a90:	e9cd 1401 	strd	r1, r4, [sp, #4]
    6a94:	4630      	mov	r0, r6
    6a96:	4906      	ldr	r1, [pc, #24]	; (6ab0 <__assert_func+0x38>)
    6a98:	f000 ff86 	bl	79a8 <fiprintf>
    6a9c:	f7fa fe14 	bl	16c8 <abort>
    6aa0:	4904      	ldr	r1, [pc, #16]	; (6ab4 <__assert_func+0x3c>)
    6aa2:	460c      	mov	r4, r1
    6aa4:	e7f3      	b.n	6a8e <__assert_func+0x16>
    6aa6:	bf00      	nop
    6aa8:	2000153c 	.word	0x2000153c
    6aac:	20000400 	.word	0x20000400
    6ab0:	20000410 	.word	0x20000410
    6ab4:	20000a08 	.word	0x20000a08

00006ab8 <_calloc_r>:
    6ab8:	b538      	push	{r3, r4, r5, lr}
    6aba:	fba1 1402 	umull	r1, r4, r1, r2
    6abe:	bb8c      	cbnz	r4, 6b24 <_calloc_r+0x6c>
    6ac0:	f7fc f928 	bl	2d14 <_malloc_r>
    6ac4:	4605      	mov	r5, r0
    6ac6:	b1e0      	cbz	r0, 6b02 <_calloc_r+0x4a>
    6ac8:	f850 2c04 	ldr.w	r2, [r0, #-4]
    6acc:	f022 0203 	bic.w	r2, r2, #3
    6ad0:	3a04      	subs	r2, #4
    6ad2:	2a24      	cmp	r2, #36	; 0x24
    6ad4:	d817      	bhi.n	6b06 <_calloc_r+0x4e>
    6ad6:	2a13      	cmp	r2, #19
    6ad8:	d91a      	bls.n	6b10 <_calloc_r+0x58>
    6ada:	2a1b      	cmp	r2, #27
    6adc:	e9c0 4400 	strd	r4, r4, [r0]
    6ae0:	d91d      	bls.n	6b1e <_calloc_r+0x66>
    6ae2:	2a24      	cmp	r2, #36	; 0x24
    6ae4:	bf14      	ite	ne
    6ae6:	f100 0210 	addne.w	r2, r0, #16
    6aea:	f100 0218 	addeq.w	r2, r0, #24
    6aee:	f04f 0300 	mov.w	r3, #0
    6af2:	e9c0 4402 	strd	r4, r4, [r0, #8]
    6af6:	bf04      	itt	eq
    6af8:	6104      	streq	r4, [r0, #16]
    6afa:	6144      	streq	r4, [r0, #20]
    6afc:	e9c2 3300 	strd	r3, r3, [r2]
    6b00:	6093      	str	r3, [r2, #8]
    6b02:	4628      	mov	r0, r5
    6b04:	bd38      	pop	{r3, r4, r5, pc}
    6b06:	4621      	mov	r1, r4
    6b08:	f7fc ffb8 	bl	3a7c <memset>
    6b0c:	4628      	mov	r0, r5
    6b0e:	bd38      	pop	{r3, r4, r5, pc}
    6b10:	4602      	mov	r2, r0
    6b12:	2300      	movs	r3, #0
    6b14:	e9c2 3300 	strd	r3, r3, [r2]
    6b18:	6093      	str	r3, [r2, #8]
    6b1a:	4628      	mov	r0, r5
    6b1c:	bd38      	pop	{r3, r4, r5, pc}
    6b1e:	f100 0208 	add.w	r2, r0, #8
    6b22:	e7f6      	b.n	6b12 <_calloc_r+0x5a>
    6b24:	f7fd f8f2 	bl	3d0c <__errno>
    6b28:	230c      	movs	r3, #12
    6b2a:	2500      	movs	r5, #0
    6b2c:	6003      	str	r3, [r0, #0]
    6b2e:	e7e8      	b.n	6b02 <_calloc_r+0x4a>

00006b30 <quorem>:
    6b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6b34:	6903      	ldr	r3, [r0, #16]
    6b36:	690c      	ldr	r4, [r1, #16]
    6b38:	42a3      	cmp	r3, r4
    6b3a:	b083      	sub	sp, #12
    6b3c:	f2c0 8087 	blt.w	6c4e <quorem+0x11e>
    6b40:	3c01      	subs	r4, #1
    6b42:	f101 0514 	add.w	r5, r1, #20
    6b46:	00a3      	lsls	r3, r4, #2
    6b48:	f100 0814 	add.w	r8, r0, #20
    6b4c:	9300      	str	r3, [sp, #0]
    6b4e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    6b52:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
    6b56:	3301      	adds	r3, #1
    6b58:	4681      	mov	r9, r0
    6b5a:	429a      	cmp	r2, r3
    6b5c:	eb08 0084 	add.w	r0, r8, r4, lsl #2
    6b60:	eb05 0784 	add.w	r7, r5, r4, lsl #2
    6b64:	9001      	str	r0, [sp, #4]
    6b66:	fbb2 f6f3 	udiv	r6, r2, r3
    6b6a:	d33b      	bcc.n	6be4 <quorem+0xb4>
    6b6c:	f04f 0c00 	mov.w	ip, #0
    6b70:	46ae      	mov	lr, r5
    6b72:	4640      	mov	r0, r8
    6b74:	46e2      	mov	sl, ip
    6b76:	4663      	mov	r3, ip
    6b78:	f85e bb04 	ldr.w	fp, [lr], #4
    6b7c:	6802      	ldr	r2, [r0, #0]
    6b7e:	fa1f fc8b 	uxth.w	ip, fp
    6b82:	fb06 330c 	mla	r3, r6, ip, r3
    6b86:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    6b8a:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
    6b8e:	fb06 cc0b 	mla	ip, r6, fp, ip
    6b92:	b29b      	uxth	r3, r3
    6b94:	ebaa 0303 	sub.w	r3, sl, r3
    6b98:	fa1f fa8c 	uxth.w	sl, ip
    6b9c:	fa13 f382 	uxtah	r3, r3, r2
    6ba0:	ebca 4212 	rsb	r2, sl, r2, lsr #16
    6ba4:	eb02 4223 	add.w	r2, r2, r3, asr #16
    6ba8:	b29b      	uxth	r3, r3
    6baa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    6bae:	4577      	cmp	r7, lr
    6bb0:	f840 3b04 	str.w	r3, [r0], #4
    6bb4:	ea4f 4a22 	mov.w	sl, r2, asr #16
    6bb8:	ea4f 431c 	mov.w	r3, ip, lsr #16
    6bbc:	d2dc      	bcs.n	6b78 <quorem+0x48>
    6bbe:	9b00      	ldr	r3, [sp, #0]
    6bc0:	f858 3003 	ldr.w	r3, [r8, r3]
    6bc4:	b973      	cbnz	r3, 6be4 <quorem+0xb4>
    6bc6:	9b01      	ldr	r3, [sp, #4]
    6bc8:	3b04      	subs	r3, #4
    6bca:	4598      	cmp	r8, r3
    6bcc:	d304      	bcc.n	6bd8 <quorem+0xa8>
    6bce:	e007      	b.n	6be0 <quorem+0xb0>
    6bd0:	4598      	cmp	r8, r3
    6bd2:	f104 34ff 	add.w	r4, r4, #4294967295
    6bd6:	d203      	bcs.n	6be0 <quorem+0xb0>
    6bd8:	f853 2904 	ldr.w	r2, [r3], #-4
    6bdc:	2a00      	cmp	r2, #0
    6bde:	d0f7      	beq.n	6bd0 <quorem+0xa0>
    6be0:	f8c9 4010 	str.w	r4, [r9, #16]
    6be4:	4648      	mov	r0, r9
    6be6:	f7fd feab 	bl	4940 <__mcmp>
    6bea:	2800      	cmp	r0, #0
    6bec:	db2b      	blt.n	6c46 <quorem+0x116>
    6bee:	3601      	adds	r6, #1
    6bf0:	4641      	mov	r1, r8
    6bf2:	2300      	movs	r3, #0
    6bf4:	f855 0b04 	ldr.w	r0, [r5], #4
    6bf8:	f8d1 c000 	ldr.w	ip, [r1]
    6bfc:	b282      	uxth	r2, r0
    6bfe:	1a9a      	subs	r2, r3, r2
    6c00:	0c03      	lsrs	r3, r0, #16
    6c02:	fa12 f28c 	uxtah	r2, r2, ip
    6c06:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
    6c0a:	eb03 4322 	add.w	r3, r3, r2, asr #16
    6c0e:	b292      	uxth	r2, r2
    6c10:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    6c14:	42af      	cmp	r7, r5
    6c16:	f841 2b04 	str.w	r2, [r1], #4
    6c1a:	ea4f 4323 	mov.w	r3, r3, asr #16
    6c1e:	d2e9      	bcs.n	6bf4 <quorem+0xc4>
    6c20:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
    6c24:	eb08 0384 	add.w	r3, r8, r4, lsl #2
    6c28:	b96a      	cbnz	r2, 6c46 <quorem+0x116>
    6c2a:	3b04      	subs	r3, #4
    6c2c:	4598      	cmp	r8, r3
    6c2e:	d304      	bcc.n	6c3a <quorem+0x10a>
    6c30:	e007      	b.n	6c42 <quorem+0x112>
    6c32:	4598      	cmp	r8, r3
    6c34:	f104 34ff 	add.w	r4, r4, #4294967295
    6c38:	d203      	bcs.n	6c42 <quorem+0x112>
    6c3a:	f853 2904 	ldr.w	r2, [r3], #-4
    6c3e:	2a00      	cmp	r2, #0
    6c40:	d0f7      	beq.n	6c32 <quorem+0x102>
    6c42:	f8c9 4010 	str.w	r4, [r9, #16]
    6c46:	4630      	mov	r0, r6
    6c48:	b003      	add	sp, #12
    6c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6c4e:	2000      	movs	r0, #0
    6c50:	b003      	add	sp, #12
    6c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6c56:	bf00      	nop

00006c58 <_dtoa_r>:
    6c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6c5c:	ed2d 8b02 	vpush	{d8}
    6c60:	b08f      	sub	sp, #60	; 0x3c
    6c62:	ed8d 0b02 	vstr	d0, [sp, #8]
    6c66:	9101      	str	r1, [sp, #4]
    6c68:	6b81      	ldr	r1, [r0, #56]	; 0x38
    6c6a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    6c6c:	9305      	str	r3, [sp, #20]
    6c6e:	ec57 6b10 	vmov	r6, r7, d0
    6c72:	4604      	mov	r4, r0
    6c74:	4693      	mov	fp, r2
    6c76:	b141      	cbz	r1, 6c8a <_dtoa_r+0x32>
    6c78:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    6c7a:	604a      	str	r2, [r1, #4]
    6c7c:	2301      	movs	r3, #1
    6c7e:	4093      	lsls	r3, r2
    6c80:	608b      	str	r3, [r1, #8]
    6c82:	f7fd fbfd 	bl	4480 <_Bfree>
    6c86:	2300      	movs	r3, #0
    6c88:	63a3      	str	r3, [r4, #56]	; 0x38
    6c8a:	f1b7 0800 	subs.w	r8, r7, #0
    6c8e:	bfb4      	ite	lt
    6c90:	2301      	movlt	r3, #1
    6c92:	2300      	movge	r3, #0
    6c94:	602b      	str	r3, [r5, #0]
    6c96:	4bbe      	ldr	r3, [pc, #760]	; (6f90 <_dtoa_r+0x338>)
    6c98:	bfbc      	itt	lt
    6c9a:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
    6c9e:	f8cd 800c 	strlt.w	r8, [sp, #12]
    6ca2:	ea33 0308 	bics.w	r3, r3, r8
    6ca6:	f000 809f 	beq.w	6de8 <_dtoa_r+0x190>
    6caa:	ed9d 8b02 	vldr	d8, [sp, #8]
    6cae:	eeb5 8b40 	vcmp.f64	d8, #0.0
    6cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6cb6:	d111      	bne.n	6cdc <_dtoa_r+0x84>
    6cb8:	9a05      	ldr	r2, [sp, #20]
    6cba:	2301      	movs	r3, #1
    6cbc:	6013      	str	r3, [r2, #0]
    6cbe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    6cc0:	2b00      	cmp	r3, #0
    6cc2:	f000 823f 	beq.w	7144 <_dtoa_r+0x4ec>
    6cc6:	4bb3      	ldr	r3, [pc, #716]	; (6f94 <_dtoa_r+0x33c>)
    6cc8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    6cca:	6013      	str	r3, [r2, #0]
    6ccc:	3b01      	subs	r3, #1
    6cce:	9300      	str	r3, [sp, #0]
    6cd0:	9800      	ldr	r0, [sp, #0]
    6cd2:	b00f      	add	sp, #60	; 0x3c
    6cd4:	ecbd 8b02 	vpop	{d8}
    6cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6cdc:	aa0c      	add	r2, sp, #48	; 0x30
    6cde:	a90d      	add	r1, sp, #52	; 0x34
    6ce0:	4620      	mov	r0, r4
    6ce2:	eeb0 0b48 	vmov.f64	d0, d8
    6ce6:	f7fd fef7 	bl	4ad8 <__d2b>
    6cea:	ea5f 5318 	movs.w	r3, r8, lsr #20
    6cee:	4605      	mov	r5, r0
    6cf0:	f040 8092 	bne.w	6e18 <_dtoa_r+0x1c0>
    6cf4:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
    6cf8:	440b      	add	r3, r1
    6cfa:	f203 4232 	addw	r2, r3, #1074	; 0x432
    6cfe:	2a20      	cmp	r2, #32
    6d00:	f340 82fa 	ble.w	72f8 <_dtoa_r+0x6a0>
    6d04:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
    6d08:	fa08 f802 	lsl.w	r8, r8, r2
    6d0c:	f203 4212 	addw	r2, r3, #1042	; 0x412
    6d10:	40d6      	lsrs	r6, r2
    6d12:	ea48 0206 	orr.w	r2, r8, r6
    6d16:	ee07 2a10 	vmov	s14, r2
    6d1a:	eeb8 7b47 	vcvt.f64.u32	d7, s14
    6d1e:	1e58      	subs	r0, r3, #1
    6d20:	ee17 6a90 	vmov	r6, s15
    6d24:	ec53 2b17 	vmov	r2, r3, d7
    6d28:	f04f 0a01 	mov.w	sl, #1
    6d2c:	f1a6 73f8 	sub.w	r3, r6, #32505856	; 0x1f00000
    6d30:	ed9f 3b91 	vldr	d3, [pc, #580]	; 6f78 <_dtoa_r+0x320>
    6d34:	ed9f 7b92 	vldr	d7, [pc, #584]	; 6f80 <_dtoa_r+0x328>
    6d38:	ed9f 5b93 	vldr	d5, [pc, #588]	; 6f88 <_dtoa_r+0x330>
    6d3c:	ee06 0a90 	vmov	s13, r0
    6d40:	ec43 2b12 	vmov	d2, r2, r3
    6d44:	eeb8 4be6 	vcvt.f64.s32	d4, s13
    6d48:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
    6d4c:	ee32 6b46 	vsub.f64	d6, d2, d6
    6d50:	eea6 7b03 	vfma.f64	d7, d6, d3
    6d54:	eea4 7b05 	vfma.f64	d7, d4, d5
    6d58:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    6d5c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    6d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6d64:	ee16 7a90 	vmov	r7, s13
    6d68:	d508      	bpl.n	6d7c <_dtoa_r+0x124>
    6d6a:	eeb8 6be6 	vcvt.f64.s32	d6, s13
    6d6e:	eeb4 6b47 	vcmp.f64	d6, d7
    6d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6d76:	bf18      	it	ne
    6d78:	f107 37ff 	addne.w	r7, r7, #4294967295
    6d7c:	2f16      	cmp	r7, #22
    6d7e:	f200 8145 	bhi.w	700c <_dtoa_r+0x3b4>
    6d82:	4b85      	ldr	r3, [pc, #532]	; (6f98 <_dtoa_r+0x340>)
    6d84:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    6d88:	ed93 7b00 	vldr	d7, [r3]
    6d8c:	eeb4 8bc7 	vcmpe.f64	d8, d7
    6d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6d94:	d557      	bpl.n	6e46 <_dtoa_r+0x1ee>
    6d96:	1a09      	subs	r1, r1, r0
    6d98:	2300      	movs	r3, #0
    6d9a:	f1b1 0801 	subs.w	r8, r1, #1
    6d9e:	f107 37ff 	add.w	r7, r7, #4294967295
    6da2:	930a      	str	r3, [sp, #40]	; 0x28
    6da4:	f100 8139 	bmi.w	701a <_dtoa_r+0x3c2>
    6da8:	2300      	movs	r3, #0
    6daa:	9306      	str	r3, [sp, #24]
    6dac:	2f00      	cmp	r7, #0
    6dae:	da52      	bge.n	6e56 <_dtoa_r+0x1fe>
    6db0:	9b06      	ldr	r3, [sp, #24]
    6db2:	9704      	str	r7, [sp, #16]
    6db4:	1bdb      	subs	r3, r3, r7
    6db6:	9306      	str	r3, [sp, #24]
    6db8:	427b      	negs	r3, r7
    6dba:	9308      	str	r3, [sp, #32]
    6dbc:	9b01      	ldr	r3, [sp, #4]
    6dbe:	2b09      	cmp	r3, #9
    6dc0:	f04f 0700 	mov.w	r7, #0
    6dc4:	d84e      	bhi.n	6e64 <_dtoa_r+0x20c>
    6dc6:	2b05      	cmp	r3, #5
    6dc8:	f340 829d 	ble.w	7306 <_dtoa_r+0x6ae>
    6dcc:	3b04      	subs	r3, #4
    6dce:	9301      	str	r3, [sp, #4]
    6dd0:	2600      	movs	r6, #0
    6dd2:	9b01      	ldr	r3, [sp, #4]
    6dd4:	1e9a      	subs	r2, r3, #2
    6dd6:	2a03      	cmp	r2, #3
    6dd8:	f200 8125 	bhi.w	7026 <_dtoa_r+0x3ce>
    6ddc:	e8df f012 	tbh	[pc, r2, lsl #1]
    6de0:	03a703aa 	.word	0x03a703aa
    6de4:	037e039d 	.word	0x037e039d
    6de8:	9a05      	ldr	r2, [sp, #20]
    6dea:	f3c8 0813 	ubfx	r8, r8, #0, #20
    6dee:	f242 730f 	movw	r3, #9999	; 0x270f
    6df2:	ea58 0806 	orrs.w	r8, r8, r6
    6df6:	6013      	str	r3, [r2, #0]
    6df8:	d11e      	bne.n	6e38 <_dtoa_r+0x1e0>
    6dfa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    6dfc:	2b00      	cmp	r3, #0
    6dfe:	f000 8591 	beq.w	7924 <_dtoa_r+0xccc>
    6e02:	4b66      	ldr	r3, [pc, #408]	; (6f9c <_dtoa_r+0x344>)
    6e04:	9300      	str	r3, [sp, #0]
    6e06:	3308      	adds	r3, #8
    6e08:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    6e0a:	9800      	ldr	r0, [sp, #0]
    6e0c:	6013      	str	r3, [r2, #0]
    6e0e:	b00f      	add	sp, #60	; 0x3c
    6e10:	ecbd 8b02 	vpop	{d8}
    6e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6e18:	ee18 6a90 	vmov	r6, s17
    6e1c:	f3c6 0613 	ubfx	r6, r6, #0, #20
    6e20:	f2a3 30ff 	subw	r0, r3, #1023	; 0x3ff
    6e24:	ec53 2b18 	vmov	r2, r3, d8
    6e28:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
    6e2c:	990c      	ldr	r1, [sp, #48]	; 0x30
    6e2e:	f04f 0a00 	mov.w	sl, #0
    6e32:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    6e36:	e77b      	b.n	6d30 <_dtoa_r+0xd8>
    6e38:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    6e3a:	2b00      	cmp	r3, #0
    6e3c:	f040 833b 	bne.w	74b6 <_dtoa_r+0x85e>
    6e40:	4b57      	ldr	r3, [pc, #348]	; (6fa0 <_dtoa_r+0x348>)
    6e42:	9300      	str	r3, [sp, #0]
    6e44:	e744      	b.n	6cd0 <_dtoa_r+0x78>
    6e46:	1a09      	subs	r1, r1, r0
    6e48:	2300      	movs	r3, #0
    6e4a:	f1b1 0801 	subs.w	r8, r1, #1
    6e4e:	930a      	str	r3, [sp, #40]	; 0x28
    6e50:	f100 80e3 	bmi.w	701a <_dtoa_r+0x3c2>
    6e54:	9306      	str	r3, [sp, #24]
    6e56:	2300      	movs	r3, #0
    6e58:	9308      	str	r3, [sp, #32]
    6e5a:	9b01      	ldr	r3, [sp, #4]
    6e5c:	9704      	str	r7, [sp, #16]
    6e5e:	2b09      	cmp	r3, #9
    6e60:	44b8      	add	r8, r7
    6e62:	d9b0      	bls.n	6dc6 <_dtoa_r+0x16e>
    6e64:	2300      	movs	r3, #0
    6e66:	2601      	movs	r6, #1
    6e68:	9301      	str	r3, [sp, #4]
    6e6a:	9607      	str	r6, [sp, #28]
    6e6c:	f04f 39ff 	mov.w	r9, #4294967295
    6e70:	469b      	mov	fp, r3
    6e72:	2100      	movs	r1, #0
    6e74:	63e1      	str	r1, [r4, #60]	; 0x3c
    6e76:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    6e7a:	4620      	mov	r0, r4
    6e7c:	f7fd fada 	bl	4434 <_Balloc>
    6e80:	9000      	str	r0, [sp, #0]
    6e82:	2800      	cmp	r0, #0
    6e84:	f000 8540 	beq.w	7908 <_dtoa_r+0xcb0>
    6e88:	9b00      	ldr	r3, [sp, #0]
    6e8a:	63a3      	str	r3, [r4, #56]	; 0x38
    6e8c:	f1b9 0f0e 	cmp.w	r9, #14
    6e90:	f200 80dc 	bhi.w	704c <_dtoa_r+0x3f4>
    6e94:	2e00      	cmp	r6, #0
    6e96:	f000 80d9 	beq.w	704c <_dtoa_r+0x3f4>
    6e9a:	9b04      	ldr	r3, [sp, #16]
    6e9c:	2b00      	cmp	r3, #0
    6e9e:	f340 83de 	ble.w	765e <_dtoa_r+0xa06>
    6ea2:	4a3d      	ldr	r2, [pc, #244]	; (6f98 <_dtoa_r+0x340>)
    6ea4:	f003 010f 	and.w	r1, r3, #15
    6ea8:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    6eac:	ed92 7b00 	vldr	d7, [r2]
    6eb0:	111a      	asrs	r2, r3, #4
    6eb2:	05db      	lsls	r3, r3, #23
    6eb4:	f140 8382 	bpl.w	75bc <_dtoa_r+0x964>
    6eb8:	493a      	ldr	r1, [pc, #232]	; (6fa4 <_dtoa_r+0x34c>)
    6eba:	ed91 6b08 	vldr	d6, [r1, #32]
    6ebe:	f002 020f 	and.w	r2, r2, #15
    6ec2:	2003      	movs	r0, #3
    6ec4:	ee88 5b06 	vdiv.f64	d5, d8, d6
    6ec8:	b15a      	cbz	r2, 6ee2 <_dtoa_r+0x28a>
    6eca:	4936      	ldr	r1, [pc, #216]	; (6fa4 <_dtoa_r+0x34c>)
    6ecc:	07d6      	lsls	r6, r2, #31
    6ece:	d504      	bpl.n	6eda <_dtoa_r+0x282>
    6ed0:	ed91 6b00 	vldr	d6, [r1]
    6ed4:	3001      	adds	r0, #1
    6ed6:	ee27 7b06 	vmul.f64	d7, d7, d6
    6eda:	1052      	asrs	r2, r2, #1
    6edc:	f101 0108 	add.w	r1, r1, #8
    6ee0:	d1f4      	bne.n	6ecc <_dtoa_r+0x274>
    6ee2:	ee85 6b07 	vdiv.f64	d6, d5, d7
    6ee6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6ee8:	b13b      	cbz	r3, 6efa <_dtoa_r+0x2a2>
    6eea:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    6eee:	eeb4 6bc7 	vcmpe.f64	d6, d7
    6ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6ef6:	f100 84ae 	bmi.w	7856 <_dtoa_r+0xbfe>
    6efa:	ee07 0a90 	vmov	s15, r0
    6efe:	eeb8 5be7 	vcvt.f64.s32	d5, s15
    6f02:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    6f06:	eea5 7b06 	vfma.f64	d7, d5, d6
    6f0a:	ee17 2a90 	vmov	r2, s15
    6f0e:	ec51 0b17 	vmov	r0, r1, d7
    6f12:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
    6f16:	f1b9 0f00 	cmp.w	r9, #0
    6f1a:	f000 8388 	beq.w	762e <_dtoa_r+0x9d6>
    6f1e:	9e04      	ldr	r6, [sp, #16]
    6f20:	464a      	mov	r2, r9
    6f22:	9b07      	ldr	r3, [sp, #28]
    6f24:	2b00      	cmp	r3, #0
    6f26:	f000 8447 	beq.w	77b8 <_dtoa_r+0xb60>
    6f2a:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
    6f2e:	4b1a      	ldr	r3, [pc, #104]	; (6f98 <_dtoa_r+0x340>)
    6f30:	eefd 4bc6 	vcvt.s32.f64	s9, d6
    6f34:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
    6f38:	eeb8 7be4 	vcvt.f64.s32	d7, s9
    6f3c:	ee36 7b47 	vsub.f64	d7, d6, d7
    6f40:	ed1c 6b02 	vldr	d6, [ip, #-8]
    6f44:	ee83 5b06 	vdiv.f64	d5, d3, d6
    6f48:	ec41 0b16 	vmov	d6, r0, r1
    6f4c:	ee14 0a90 	vmov	r0, s9
    6f50:	ee35 5b46 	vsub.f64	d5, d5, d6
    6f54:	9900      	ldr	r1, [sp, #0]
    6f56:	eeb4 5bc7 	vcmpe.f64	d5, d7
    6f5a:	3030      	adds	r0, #48	; 0x30
    6f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6f60:	f801 0b01 	strb.w	r0, [r1], #1
    6f64:	f300 84ac 	bgt.w	78c0 <_dtoa_r+0xc68>
    6f68:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
    6f6c:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    6f70:	f04f 0c00 	mov.w	ip, #0
    6f74:	e031      	b.n	6fda <_dtoa_r+0x382>
    6f76:	bf00      	nop
    6f78:	636f4361 	.word	0x636f4361
    6f7c:	3fd287a7 	.word	0x3fd287a7
    6f80:	8b60c8b3 	.word	0x8b60c8b3
    6f84:	3fc68a28 	.word	0x3fc68a28
    6f88:	509f79fb 	.word	0x509f79fb
    6f8c:	3fd34413 	.word	0x3fd34413
    6f90:	7ff00000 	.word	0x7ff00000
    6f94:	20000661 	.word	0x20000661
    6f98:	200002a8 	.word	0x200002a8
    6f9c:	200005b4 	.word	0x200005b4
    6fa0:	200005c0 	.word	0x200005c0
    6fa4:	20000280 	.word	0x20000280
    6fa8:	f10c 0c01 	add.w	ip, ip, #1
    6fac:	4594      	cmp	ip, r2
    6fae:	da4d      	bge.n	704c <_dtoa_r+0x3f4>
    6fb0:	ee27 7b04 	vmul.f64	d7, d7, d4
    6fb4:	ee25 5b04 	vmul.f64	d5, d5, d4
    6fb8:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    6fbc:	ee16 3a90 	vmov	r3, s13
    6fc0:	eeb8 3be6 	vcvt.f64.s32	d3, s13
    6fc4:	3330      	adds	r3, #48	; 0x30
    6fc6:	ee37 7b43 	vsub.f64	d7, d7, d3
    6fca:	eeb4 7bc5 	vcmpe.f64	d7, d5
    6fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6fd2:	f801 3b01 	strb.w	r3, [r1], #1
    6fd6:	f100 8473 	bmi.w	78c0 <_dtoa_r+0xc68>
    6fda:	ee32 6b47 	vsub.f64	d6, d2, d7
    6fde:	eeb4 6bc5 	vcmpe.f64	d6, d5
    6fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6fe6:	d5df      	bpl.n	6fa8 <_dtoa_r+0x350>
    6fe8:	9a00      	ldr	r2, [sp, #0]
    6fea:	9604      	str	r6, [sp, #16]
    6fec:	e002      	b.n	6ff4 <_dtoa_r+0x39c>
    6fee:	428a      	cmp	r2, r1
    6ff0:	f000 8450 	beq.w	7894 <_dtoa_r+0xc3c>
    6ff4:	4689      	mov	r9, r1
    6ff6:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
    6ffa:	2b39      	cmp	r3, #57	; 0x39
    6ffc:	d0f7      	beq.n	6fee <_dtoa_r+0x396>
    6ffe:	3301      	adds	r3, #1
    7000:	b2db      	uxtb	r3, r3
    7002:	700b      	strb	r3, [r1, #0]
    7004:	9b04      	ldr	r3, [sp, #16]
    7006:	3301      	adds	r3, #1
    7008:	9304      	str	r3, [sp, #16]
    700a:	e155      	b.n	72b8 <_dtoa_r+0x660>
    700c:	1a09      	subs	r1, r1, r0
    700e:	2301      	movs	r3, #1
    7010:	f1b1 0801 	subs.w	r8, r1, #1
    7014:	930a      	str	r3, [sp, #40]	; 0x28
    7016:	f57f aec7 	bpl.w	6da8 <_dtoa_r+0x150>
    701a:	f1c1 0301 	rsb	r3, r1, #1
    701e:	9306      	str	r3, [sp, #24]
    7020:	f04f 0800 	mov.w	r8, #0
    7024:	e6c2      	b.n	6dac <_dtoa_r+0x154>
    7026:	2600      	movs	r6, #0
    7028:	63e6      	str	r6, [r4, #60]	; 0x3c
    702a:	4631      	mov	r1, r6
    702c:	4620      	mov	r0, r4
    702e:	f7fd fa01 	bl	4434 <_Balloc>
    7032:	9000      	str	r0, [sp, #0]
    7034:	2800      	cmp	r0, #0
    7036:	f000 8467 	beq.w	7908 <_dtoa_r+0xcb0>
    703a:	9b00      	ldr	r3, [sp, #0]
    703c:	63a3      	str	r3, [r4, #56]	; 0x38
    703e:	f04f 33ff 	mov.w	r3, #4294967295
    7042:	930b      	str	r3, [sp, #44]	; 0x2c
    7044:	4699      	mov	r9, r3
    7046:	2301      	movs	r3, #1
    7048:	46b3      	mov	fp, r6
    704a:	9307      	str	r3, [sp, #28]
    704c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    704e:	2a00      	cmp	r2, #0
    7050:	db55      	blt.n	70fe <_dtoa_r+0x4a6>
    7052:	9904      	ldr	r1, [sp, #16]
    7054:	290e      	cmp	r1, #14
    7056:	dc52      	bgt.n	70fe <_dtoa_r+0x4a6>
    7058:	4bb7      	ldr	r3, [pc, #732]	; (7338 <_dtoa_r+0x6e0>)
    705a:	f1bb 0f00 	cmp.w	fp, #0
    705e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    7062:	ed93 6b00 	vldr	d6, [r3]
    7066:	da15      	bge.n	7094 <_dtoa_r+0x43c>
    7068:	f1b9 0f00 	cmp.w	r9, #0
    706c:	dc12      	bgt.n	7094 <_dtoa_r+0x43c>
    706e:	f040 82f2 	bne.w	7656 <_dtoa_r+0x9fe>
    7072:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
    7076:	ee26 7b07 	vmul.f64	d7, d6, d7
    707a:	eeb4 8bc7 	vcmpe.f64	d8, d7
    707e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7082:	46ca      	mov	sl, r9
    7084:	464e      	mov	r6, r9
    7086:	f200 826d 	bhi.w	7564 <_dtoa_r+0x90c>
    708a:	f8dd 8000 	ldr.w	r8, [sp]
    708e:	ea6f 0b0b 	mvn.w	fp, fp
    7092:	e270      	b.n	7576 <_dtoa_r+0x91e>
    7094:	ee88 7b06 	vdiv.f64	d7, d8, d6
    7098:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    709c:	9900      	ldr	r1, [sp, #0]
    709e:	ee17 3a10 	vmov	r3, s14
    70a2:	f1b9 0f01 	cmp.w	r9, #1
    70a6:	f103 0330 	add.w	r3, r3, #48	; 0x30
    70aa:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
    70ae:	f801 3b01 	strb.w	r3, [r1], #1
    70b2:	eea5 8b46 	vfms.f64	d8, d5, d6
    70b6:	f000 8334 	beq.w	7722 <_dtoa_r+0xaca>
    70ba:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    70be:	2301      	movs	r3, #1
    70c0:	e011      	b.n	70e6 <_dtoa_r+0x48e>
    70c2:	ee88 7b06 	vdiv.f64	d7, d8, d6
    70c6:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    70ca:	3301      	adds	r3, #1
    70cc:	ee17 2a10 	vmov	r2, s14
    70d0:	454b      	cmp	r3, r9
    70d2:	f102 0230 	add.w	r2, r2, #48	; 0x30
    70d6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
    70da:	f801 2b01 	strb.w	r2, [r1], #1
    70de:	eea5 8b46 	vfms.f64	d8, d5, d6
    70e2:	f000 831e 	beq.w	7722 <_dtoa_r+0xaca>
    70e6:	ee28 8b04 	vmul.f64	d8, d8, d4
    70ea:	eeb5 8b40 	vcmp.f64	d8, #0.0
    70ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    70f2:	d1e6      	bne.n	70c2 <_dtoa_r+0x46a>
    70f4:	9b04      	ldr	r3, [sp, #16]
    70f6:	3301      	adds	r3, #1
    70f8:	9304      	str	r3, [sp, #16]
    70fa:	4689      	mov	r9, r1
    70fc:	e0dc      	b.n	72b8 <_dtoa_r+0x660>
    70fe:	9b07      	ldr	r3, [sp, #28]
    7100:	b343      	cbz	r3, 7154 <_dtoa_r+0x4fc>
    7102:	9b01      	ldr	r3, [sp, #4]
    7104:	2b01      	cmp	r3, #1
    7106:	f340 8276 	ble.w	75f6 <_dtoa_r+0x99e>
    710a:	9b08      	ldr	r3, [sp, #32]
    710c:	f109 3aff 	add.w	sl, r9, #4294967295
    7110:	4553      	cmp	r3, sl
    7112:	f280 823f 	bge.w	7594 <_dtoa_r+0x93c>
    7116:	9b08      	ldr	r3, [sp, #32]
    7118:	f8cd a020 	str.w	sl, [sp, #32]
    711c:	ebaa 0203 	sub.w	r2, sl, r3
    7120:	4417      	add	r7, r2
    7122:	f04f 0a00 	mov.w	sl, #0
    7126:	f1b9 0f00 	cmp.w	r9, #0
    712a:	f2c0 8325 	blt.w	7778 <_dtoa_r+0xb20>
    712e:	9b06      	ldr	r3, [sp, #24]
    7130:	9309      	str	r3, [sp, #36]	; 0x24
    7132:	444b      	add	r3, r9
    7134:	44c8      	add	r8, r9
    7136:	9306      	str	r3, [sp, #24]
    7138:	2101      	movs	r1, #1
    713a:	4620      	mov	r0, r4
    713c:	f7fd fa4c 	bl	45d8 <__i2b>
    7140:	4606      	mov	r6, r0
    7142:	e00c      	b.n	715e <_dtoa_r+0x506>
    7144:	4b7d      	ldr	r3, [pc, #500]	; (733c <_dtoa_r+0x6e4>)
    7146:	9300      	str	r3, [sp, #0]
    7148:	9800      	ldr	r0, [sp, #0]
    714a:	b00f      	add	sp, #60	; 0x3c
    714c:	ecbd 8b02 	vpop	{d8}
    7150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7154:	9b06      	ldr	r3, [sp, #24]
    7156:	f8dd a020 	ldr.w	sl, [sp, #32]
    715a:	9e07      	ldr	r6, [sp, #28]
    715c:	9309      	str	r3, [sp, #36]	; 0x24
    715e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7160:	b16b      	cbz	r3, 717e <_dtoa_r+0x526>
    7162:	f1b8 0f00 	cmp.w	r8, #0
    7166:	dd0a      	ble.n	717e <_dtoa_r+0x526>
    7168:	4543      	cmp	r3, r8
    716a:	9906      	ldr	r1, [sp, #24]
    716c:	461a      	mov	r2, r3
    716e:	bfa8      	it	ge
    7170:	4642      	movge	r2, r8
    7172:	1a89      	subs	r1, r1, r2
    7174:	1a9b      	subs	r3, r3, r2
    7176:	9106      	str	r1, [sp, #24]
    7178:	9309      	str	r3, [sp, #36]	; 0x24
    717a:	eba8 0802 	sub.w	r8, r8, r2
    717e:	9b08      	ldr	r3, [sp, #32]
    7180:	b163      	cbz	r3, 719c <_dtoa_r+0x544>
    7182:	9b07      	ldr	r3, [sp, #28]
    7184:	2b00      	cmp	r3, #0
    7186:	f000 82a7 	beq.w	76d8 <_dtoa_r+0xa80>
    718a:	f1ba 0f00 	cmp.w	sl, #0
    718e:	f300 8204 	bgt.w	759a <_dtoa_r+0x942>
    7192:	9b08      	ldr	r3, [sp, #32]
    7194:	ebb3 020a 	subs.w	r2, r3, sl
    7198:	f040 82ff 	bne.w	779a <_dtoa_r+0xb42>
    719c:	2101      	movs	r1, #1
    719e:	4620      	mov	r0, r4
    71a0:	f7fd fa1a 	bl	45d8 <__i2b>
    71a4:	2f00      	cmp	r7, #0
    71a6:	4682      	mov	sl, r0
    71a8:	f300 80af 	bgt.w	730a <_dtoa_r+0x6b2>
    71ac:	9b01      	ldr	r3, [sp, #4]
    71ae:	2b01      	cmp	r3, #1
    71b0:	f340 8187 	ble.w	74c2 <_dtoa_r+0x86a>
    71b4:	2300      	movs	r3, #0
    71b6:	9308      	str	r3, [sp, #32]
    71b8:	2001      	movs	r0, #1
    71ba:	2f00      	cmp	r7, #0
    71bc:	f040 80b1 	bne.w	7322 <_dtoa_r+0x6ca>
    71c0:	4440      	add	r0, r8
    71c2:	f010 001f 	ands.w	r0, r0, #31
    71c6:	f000 817a 	beq.w	74be <_dtoa_r+0x866>
    71ca:	f1c0 0220 	rsb	r2, r0, #32
    71ce:	2a04      	cmp	r2, #4
    71d0:	f300 8088 	bgt.w	72e4 <_dtoa_r+0x68c>
    71d4:	f040 81f6 	bne.w	75c4 <_dtoa_r+0x96c>
    71d8:	9b06      	ldr	r3, [sp, #24]
    71da:	2b00      	cmp	r3, #0
    71dc:	dd05      	ble.n	71ea <_dtoa_r+0x592>
    71de:	4629      	mov	r1, r5
    71e0:	461a      	mov	r2, r3
    71e2:	4620      	mov	r0, r4
    71e4:	f7fd fb34 	bl	4850 <__lshift>
    71e8:	4605      	mov	r5, r0
    71ea:	f1b8 0f00 	cmp.w	r8, #0
    71ee:	dd05      	ble.n	71fc <_dtoa_r+0x5a4>
    71f0:	4651      	mov	r1, sl
    71f2:	4642      	mov	r2, r8
    71f4:	4620      	mov	r0, r4
    71f6:	f7fd fb2b 	bl	4850 <__lshift>
    71fa:	4682      	mov	sl, r0
    71fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    71fe:	2b00      	cmp	r3, #0
    7200:	f040 813f 	bne.w	7482 <_dtoa_r+0x82a>
    7204:	f1b9 0f00 	cmp.w	r9, #0
    7208:	f340 8125 	ble.w	7456 <_dtoa_r+0x7fe>
    720c:	9b07      	ldr	r3, [sp, #28]
    720e:	2b00      	cmp	r3, #0
    7210:	f040 80a3 	bne.w	735a <_dtoa_r+0x702>
    7214:	9b04      	ldr	r3, [sp, #16]
    7216:	3301      	adds	r3, #1
    7218:	9304      	str	r3, [sp, #16]
    721a:	f8dd 8000 	ldr.w	r8, [sp]
    721e:	2701      	movs	r7, #1
    7220:	e007      	b.n	7232 <_dtoa_r+0x5da>
    7222:	4629      	mov	r1, r5
    7224:	2300      	movs	r3, #0
    7226:	220a      	movs	r2, #10
    7228:	4620      	mov	r0, r4
    722a:	f7fd f933 	bl	4494 <__multadd>
    722e:	3701      	adds	r7, #1
    7230:	4605      	mov	r5, r0
    7232:	4651      	mov	r1, sl
    7234:	4628      	mov	r0, r5
    7236:	f7ff fc7b 	bl	6b30 <quorem>
    723a:	45b9      	cmp	r9, r7
    723c:	f100 0030 	add.w	r0, r0, #48	; 0x30
    7240:	f808 0b01 	strb.w	r0, [r8], #1
    7244:	dced      	bgt.n	7222 <_dtoa_r+0x5ca>
    7246:	f1b9 0f00 	cmp.w	r9, #0
    724a:	9a00      	ldr	r2, [sp, #0]
    724c:	bfcc      	ite	gt
    724e:	46cb      	movgt	fp, r9
    7250:	f04f 0b01 	movle.w	fp, #1
    7254:	4603      	mov	r3, r0
    7256:	4493      	add	fp, r2
    7258:	2700      	movs	r7, #0
    725a:	4629      	mov	r1, r5
    725c:	2201      	movs	r2, #1
    725e:	4620      	mov	r0, r4
    7260:	9301      	str	r3, [sp, #4]
    7262:	f7fd faf5 	bl	4850 <__lshift>
    7266:	4651      	mov	r1, sl
    7268:	4605      	mov	r5, r0
    726a:	f7fd fb69 	bl	4940 <__mcmp>
    726e:	2800      	cmp	r0, #0
    7270:	f340 81af 	ble.w	75d2 <_dtoa_r+0x97a>
    7274:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
    7278:	9a00      	ldr	r2, [sp, #0]
    727a:	f10b 3bff 	add.w	fp, fp, #4294967295
    727e:	e004      	b.n	728a <_dtoa_r+0x632>
    7280:	455a      	cmp	r2, fp
    7282:	f000 81b1 	beq.w	75e8 <_dtoa_r+0x990>
    7286:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
    728a:	2b39      	cmp	r3, #57	; 0x39
    728c:	f10b 0901 	add.w	r9, fp, #1
    7290:	d0f6      	beq.n	7280 <_dtoa_r+0x628>
    7292:	3301      	adds	r3, #1
    7294:	f88b 3000 	strb.w	r3, [fp]
    7298:	4651      	mov	r1, sl
    729a:	4620      	mov	r0, r4
    729c:	f7fd f8f0 	bl	4480 <_Bfree>
    72a0:	b156      	cbz	r6, 72b8 <_dtoa_r+0x660>
    72a2:	b12f      	cbz	r7, 72b0 <_dtoa_r+0x658>
    72a4:	42b7      	cmp	r7, r6
    72a6:	d003      	beq.n	72b0 <_dtoa_r+0x658>
    72a8:	4639      	mov	r1, r7
    72aa:	4620      	mov	r0, r4
    72ac:	f7fd f8e8 	bl	4480 <_Bfree>
    72b0:	4631      	mov	r1, r6
    72b2:	4620      	mov	r0, r4
    72b4:	f7fd f8e4 	bl	4480 <_Bfree>
    72b8:	4629      	mov	r1, r5
    72ba:	4620      	mov	r0, r4
    72bc:	f7fd f8e0 	bl	4480 <_Bfree>
    72c0:	2300      	movs	r3, #0
    72c2:	f889 3000 	strb.w	r3, [r9]
    72c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    72ca:	601a      	str	r2, [r3, #0]
    72cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    72ce:	2b00      	cmp	r3, #0
    72d0:	f43f acfe 	beq.w	6cd0 <_dtoa_r+0x78>
    72d4:	9800      	ldr	r0, [sp, #0]
    72d6:	f8c3 9000 	str.w	r9, [r3]
    72da:	b00f      	add	sp, #60	; 0x3c
    72dc:	ecbd 8b02 	vpop	{d8}
    72e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    72e4:	f1c0 001c 	rsb	r0, r0, #28
    72e8:	9b06      	ldr	r3, [sp, #24]
    72ea:	4403      	add	r3, r0
    72ec:	9306      	str	r3, [sp, #24]
    72ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
    72f0:	4403      	add	r3, r0
    72f2:	9309      	str	r3, [sp, #36]	; 0x24
    72f4:	4480      	add	r8, r0
    72f6:	e76f      	b.n	71d8 <_dtoa_r+0x580>
    72f8:	f1c2 0220 	rsb	r2, r2, #32
    72fc:	fa06 f202 	lsl.w	r2, r6, r2
    7300:	ee07 2a10 	vmov	s14, r2
    7304:	e509      	b.n	6d1a <_dtoa_r+0xc2>
    7306:	2601      	movs	r6, #1
    7308:	e563      	b.n	6dd2 <_dtoa_r+0x17a>
    730a:	4601      	mov	r1, r0
    730c:	463a      	mov	r2, r7
    730e:	4620      	mov	r0, r4
    7310:	f7fd fa3e 	bl	4790 <__pow5mult>
    7314:	9b01      	ldr	r3, [sp, #4]
    7316:	2b01      	cmp	r3, #1
    7318:	4682      	mov	sl, r0
    731a:	f340 81c5 	ble.w	76a8 <_dtoa_r+0xa50>
    731e:	2300      	movs	r3, #0
    7320:	9308      	str	r3, [sp, #32]
    7322:	f8da 2010 	ldr.w	r2, [sl, #16]
    7326:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
    732a:	6910      	ldr	r0, [r2, #16]
    732c:	f7fd f904 	bl	4538 <__hi0bits>
    7330:	f1c0 0020 	rsb	r0, r0, #32
    7334:	e744      	b.n	71c0 <_dtoa_r+0x568>
    7336:	bf00      	nop
    7338:	200002a8 	.word	0x200002a8
    733c:	20000660 	.word	0x20000660
    7340:	4631      	mov	r1, r6
    7342:	2300      	movs	r3, #0
    7344:	220a      	movs	r2, #10
    7346:	4620      	mov	r0, r4
    7348:	f7fd f8a4 	bl	4494 <__multadd>
    734c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    734e:	2b00      	cmp	r3, #0
    7350:	4606      	mov	r6, r0
    7352:	f340 82ce 	ble.w	78f2 <_dtoa_r+0xc9a>
    7356:	9704      	str	r7, [sp, #16]
    7358:	4699      	mov	r9, r3
    735a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    735c:	2b00      	cmp	r3, #0
    735e:	dd05      	ble.n	736c <_dtoa_r+0x714>
    7360:	4631      	mov	r1, r6
    7362:	461a      	mov	r2, r3
    7364:	4620      	mov	r0, r4
    7366:	f7fd fa73 	bl	4850 <__lshift>
    736a:	4606      	mov	r6, r0
    736c:	9b08      	ldr	r3, [sp, #32]
    736e:	2b00      	cmp	r3, #0
    7370:	f040 81eb 	bne.w	774a <_dtoa_r+0xaf2>
    7374:	46b0      	mov	r8, r6
    7376:	9b02      	ldr	r3, [sp, #8]
    7378:	9f00      	ldr	r7, [sp, #0]
    737a:	f003 0201 	and.w	r2, r3, #1
    737e:	1e7b      	subs	r3, r7, #1
    7380:	444b      	add	r3, r9
    7382:	9308      	str	r3, [sp, #32]
    7384:	9b01      	ldr	r3, [sp, #4]
    7386:	920a      	str	r2, [sp, #40]	; 0x28
    7388:	4313      	orrs	r3, r2
    738a:	9309      	str	r3, [sp, #36]	; 0x24
    738c:	4651      	mov	r1, sl
    738e:	4628      	mov	r0, r5
    7390:	f7ff fbce 	bl	6b30 <quorem>
    7394:	4631      	mov	r1, r6
    7396:	4683      	mov	fp, r0
    7398:	4628      	mov	r0, r5
    739a:	f7fd fad1 	bl	4940 <__mcmp>
    739e:	4642      	mov	r2, r8
    73a0:	4651      	mov	r1, sl
    73a2:	4681      	mov	r9, r0
    73a4:	4620      	mov	r0, r4
    73a6:	f7fd faed 	bl	4984 <__mdiff>
    73aa:	68c2      	ldr	r2, [r0, #12]
    73ac:	4601      	mov	r1, r0
    73ae:	f10b 0330 	add.w	r3, fp, #48	; 0x30
    73b2:	2a00      	cmp	r2, #0
    73b4:	d142      	bne.n	743c <_dtoa_r+0x7e4>
    73b6:	e9cd 0306 	strd	r0, r3, [sp, #24]
    73ba:	4628      	mov	r0, r5
    73bc:	f7fd fac0 	bl	4940 <__mcmp>
    73c0:	9906      	ldr	r1, [sp, #24]
    73c2:	9002      	str	r0, [sp, #8]
    73c4:	4620      	mov	r0, r4
    73c6:	f7fd f85b 	bl	4480 <_Bfree>
    73ca:	9a02      	ldr	r2, [sp, #8]
    73cc:	9b07      	ldr	r3, [sp, #28]
    73ce:	b91a      	cbnz	r2, 73d8 <_dtoa_r+0x780>
    73d0:	9909      	ldr	r1, [sp, #36]	; 0x24
    73d2:	2900      	cmp	r1, #0
    73d4:	f000 827e 	beq.w	78d4 <_dtoa_r+0xc7c>
    73d8:	f1b9 0f00 	cmp.w	r9, #0
    73dc:	f2c0 8183 	blt.w	76e6 <_dtoa_r+0xa8e>
    73e0:	9901      	ldr	r1, [sp, #4]
    73e2:	ea49 0901 	orr.w	r9, r9, r1
    73e6:	990a      	ldr	r1, [sp, #40]	; 0x28
    73e8:	ea51 0909 	orrs.w	r9, r1, r9
    73ec:	f000 817b 	beq.w	76e6 <_dtoa_r+0xa8e>
    73f0:	2a00      	cmp	r2, #0
    73f2:	f300 81c6 	bgt.w	7782 <_dtoa_r+0xb2a>
    73f6:	9a08      	ldr	r2, [sp, #32]
    73f8:	703b      	strb	r3, [r7, #0]
    73fa:	f107 0901 	add.w	r9, r7, #1
    73fe:	4297      	cmp	r7, r2
    7400:	46cb      	mov	fp, r9
    7402:	f000 81c4 	beq.w	778e <_dtoa_r+0xb36>
    7406:	4629      	mov	r1, r5
    7408:	2300      	movs	r3, #0
    740a:	220a      	movs	r2, #10
    740c:	4620      	mov	r0, r4
    740e:	f7fd f841 	bl	4494 <__multadd>
    7412:	4546      	cmp	r6, r8
    7414:	4605      	mov	r5, r0
    7416:	4631      	mov	r1, r6
    7418:	f04f 0300 	mov.w	r3, #0
    741c:	f04f 020a 	mov.w	r2, #10
    7420:	4620      	mov	r0, r4
    7422:	d012      	beq.n	744a <_dtoa_r+0x7f2>
    7424:	f7fd f836 	bl	4494 <__multadd>
    7428:	4641      	mov	r1, r8
    742a:	4606      	mov	r6, r0
    742c:	2300      	movs	r3, #0
    742e:	220a      	movs	r2, #10
    7430:	4620      	mov	r0, r4
    7432:	f7fd f82f 	bl	4494 <__multadd>
    7436:	464f      	mov	r7, r9
    7438:	4680      	mov	r8, r0
    743a:	e7a7      	b.n	738c <_dtoa_r+0x734>
    743c:	4620      	mov	r0, r4
    743e:	9302      	str	r3, [sp, #8]
    7440:	f7fd f81e 	bl	4480 <_Bfree>
    7444:	9b02      	ldr	r3, [sp, #8]
    7446:	2201      	movs	r2, #1
    7448:	e7c6      	b.n	73d8 <_dtoa_r+0x780>
    744a:	f7fd f823 	bl	4494 <__multadd>
    744e:	464f      	mov	r7, r9
    7450:	4606      	mov	r6, r0
    7452:	4680      	mov	r8, r0
    7454:	e79a      	b.n	738c <_dtoa_r+0x734>
    7456:	9b01      	ldr	r3, [sp, #4]
    7458:	2b02      	cmp	r3, #2
    745a:	dc71      	bgt.n	7540 <_dtoa_r+0x8e8>
    745c:	9b07      	ldr	r3, [sp, #28]
    745e:	2b00      	cmp	r3, #0
    7460:	f47f af7b 	bne.w	735a <_dtoa_r+0x702>
    7464:	9b04      	ldr	r3, [sp, #16]
    7466:	4651      	mov	r1, sl
    7468:	3301      	adds	r3, #1
    746a:	4628      	mov	r0, r5
    746c:	9304      	str	r3, [sp, #16]
    746e:	f7ff fb5f 	bl	6b30 <quorem>
    7472:	f8dd b000 	ldr.w	fp, [sp]
    7476:	f100 0330 	add.w	r3, r0, #48	; 0x30
    747a:	f80b 3b01 	strb.w	r3, [fp], #1
    747e:	2700      	movs	r7, #0
    7480:	e6eb      	b.n	725a <_dtoa_r+0x602>
    7482:	4651      	mov	r1, sl
    7484:	4628      	mov	r0, r5
    7486:	f7fd fa5b 	bl	4940 <__mcmp>
    748a:	2800      	cmp	r0, #0
    748c:	f6bf aeba 	bge.w	7204 <_dtoa_r+0x5ac>
    7490:	4629      	mov	r1, r5
    7492:	2300      	movs	r3, #0
    7494:	220a      	movs	r2, #10
    7496:	4620      	mov	r0, r4
    7498:	f7fc fffc 	bl	4494 <__multadd>
    749c:	9b04      	ldr	r3, [sp, #16]
    749e:	1e5f      	subs	r7, r3, #1
    74a0:	9b07      	ldr	r3, [sp, #28]
    74a2:	4605      	mov	r5, r0
    74a4:	2b00      	cmp	r3, #0
    74a6:	f47f af4b 	bne.w	7340 <_dtoa_r+0x6e8>
    74aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    74ac:	2b00      	cmp	r3, #0
    74ae:	f340 8218 	ble.w	78e2 <_dtoa_r+0xc8a>
    74b2:	4699      	mov	r9, r3
    74b4:	e6b1      	b.n	721a <_dtoa_r+0x5c2>
    74b6:	4bbc      	ldr	r3, [pc, #752]	; (77a8 <_dtoa_r+0xb50>)
    74b8:	9300      	str	r3, [sp, #0]
    74ba:	3303      	adds	r3, #3
    74bc:	e4a4      	b.n	6e08 <_dtoa_r+0x1b0>
    74be:	201c      	movs	r0, #28
    74c0:	e712      	b.n	72e8 <_dtoa_r+0x690>
    74c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    74c6:	2800      	cmp	r0, #0
    74c8:	f47f ae74 	bne.w	71b4 <_dtoa_r+0x55c>
    74cc:	f3c1 0213 	ubfx	r2, r1, #0, #20
    74d0:	2a00      	cmp	r2, #0
    74d2:	f000 80f4 	beq.w	76be <_dtoa_r+0xa66>
    74d6:	9b02      	ldr	r3, [sp, #8]
    74d8:	9308      	str	r3, [sp, #32]
    74da:	e66d      	b.n	71b8 <_dtoa_r+0x560>
    74dc:	2301      	movs	r3, #1
    74de:	9307      	str	r3, [sp, #28]
    74e0:	9b04      	ldr	r3, [sp, #16]
    74e2:	445b      	add	r3, fp
    74e4:	f103 0901 	add.w	r9, r3, #1
    74e8:	f1b9 0f01 	cmp.w	r9, #1
    74ec:	46cc      	mov	ip, r9
    74ee:	930b      	str	r3, [sp, #44]	; 0x2c
    74f0:	bfb8      	it	lt
    74f2:	f04f 0c01 	movlt.w	ip, #1
    74f6:	2100      	movs	r1, #0
    74f8:	f1bc 0f17 	cmp.w	ip, #23
    74fc:	63e1      	str	r1, [r4, #60]	; 0x3c
    74fe:	f77f acbc 	ble.w	6e7a <_dtoa_r+0x222>
    7502:	2001      	movs	r0, #1
    7504:	2204      	movs	r2, #4
    7506:	0052      	lsls	r2, r2, #1
    7508:	f102 0314 	add.w	r3, r2, #20
    750c:	4563      	cmp	r3, ip
    750e:	4601      	mov	r1, r0
    7510:	f100 0001 	add.w	r0, r0, #1
    7514:	d9f7      	bls.n	7506 <_dtoa_r+0x8ae>
    7516:	63e1      	str	r1, [r4, #60]	; 0x3c
    7518:	e4af      	b.n	6e7a <_dtoa_r+0x222>
    751a:	2301      	movs	r3, #1
    751c:	9307      	str	r3, [sp, #28]
    751e:	f1bb 0f00 	cmp.w	fp, #0
    7522:	dd52      	ble.n	75ca <_dtoa_r+0x972>
    7524:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
    7528:	46d9      	mov	r9, fp
    752a:	46dc      	mov	ip, fp
    752c:	e7e3      	b.n	74f6 <_dtoa_r+0x89e>
    752e:	2300      	movs	r3, #0
    7530:	9307      	str	r3, [sp, #28]
    7532:	e7d5      	b.n	74e0 <_dtoa_r+0x888>
    7534:	2300      	movs	r3, #0
    7536:	9307      	str	r3, [sp, #28]
    7538:	e7f1      	b.n	751e <_dtoa_r+0x8c6>
    753a:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    753e:	9704      	str	r7, [sp, #16]
    7540:	f1b9 0f00 	cmp.w	r9, #0
    7544:	f47f ada1 	bne.w	708a <_dtoa_r+0x432>
    7548:	4651      	mov	r1, sl
    754a:	464b      	mov	r3, r9
    754c:	2205      	movs	r2, #5
    754e:	4620      	mov	r0, r4
    7550:	f7fc ffa0 	bl	4494 <__multadd>
    7554:	4601      	mov	r1, r0
    7556:	4682      	mov	sl, r0
    7558:	4628      	mov	r0, r5
    755a:	f7fd f9f1 	bl	4940 <__mcmp>
    755e:	2800      	cmp	r0, #0
    7560:	f77f ad93 	ble.w	708a <_dtoa_r+0x432>
    7564:	9b04      	ldr	r3, [sp, #16]
    7566:	f103 0b01 	add.w	fp, r3, #1
    756a:	9b00      	ldr	r3, [sp, #0]
    756c:	2231      	movs	r2, #49	; 0x31
    756e:	4698      	mov	r8, r3
    7570:	f803 2b01 	strb.w	r2, [r3], #1
    7574:	9300      	str	r3, [sp, #0]
    7576:	4651      	mov	r1, sl
    7578:	4620      	mov	r0, r4
    757a:	f7fc ff81 	bl	4480 <_Bfree>
    757e:	f10b 0301 	add.w	r3, fp, #1
    7582:	f8dd 9000 	ldr.w	r9, [sp]
    7586:	9304      	str	r3, [sp, #16]
    7588:	f8cd 8000 	str.w	r8, [sp]
    758c:	2e00      	cmp	r6, #0
    758e:	f47f ae8f 	bne.w	72b0 <_dtoa_r+0x658>
    7592:	e691      	b.n	72b8 <_dtoa_r+0x660>
    7594:	eba3 0a0a 	sub.w	sl, r3, sl
    7598:	e5c5      	b.n	7126 <_dtoa_r+0x4ce>
    759a:	4631      	mov	r1, r6
    759c:	4652      	mov	r2, sl
    759e:	4620      	mov	r0, r4
    75a0:	f7fd f8f6 	bl	4790 <__pow5mult>
    75a4:	462a      	mov	r2, r5
    75a6:	4601      	mov	r1, r0
    75a8:	4606      	mov	r6, r0
    75aa:	4620      	mov	r0, r4
    75ac:	f7fd f842 	bl	4634 <__multiply>
    75b0:	4629      	mov	r1, r5
    75b2:	4605      	mov	r5, r0
    75b4:	4620      	mov	r0, r4
    75b6:	f7fc ff63 	bl	4480 <_Bfree>
    75ba:	e5ea      	b.n	7192 <_dtoa_r+0x53a>
    75bc:	2002      	movs	r0, #2
    75be:	eeb0 5b48 	vmov.f64	d5, d8
    75c2:	e481      	b.n	6ec8 <_dtoa_r+0x270>
    75c4:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
    75c8:	e68e      	b.n	72e8 <_dtoa_r+0x690>
    75ca:	f04f 0b01 	mov.w	fp, #1
    75ce:	46d9      	mov	r9, fp
    75d0:	e44f      	b.n	6e72 <_dtoa_r+0x21a>
    75d2:	d103      	bne.n	75dc <_dtoa_r+0x984>
    75d4:	9b01      	ldr	r3, [sp, #4]
    75d6:	07db      	lsls	r3, r3, #31
    75d8:	f53f ae4c 	bmi.w	7274 <_dtoa_r+0x61c>
    75dc:	46d9      	mov	r9, fp
    75de:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
    75e2:	2b30      	cmp	r3, #48	; 0x30
    75e4:	d0fa      	beq.n	75dc <_dtoa_r+0x984>
    75e6:	e657      	b.n	7298 <_dtoa_r+0x640>
    75e8:	9b04      	ldr	r3, [sp, #16]
    75ea:	9a00      	ldr	r2, [sp, #0]
    75ec:	3301      	adds	r3, #1
    75ee:	9304      	str	r3, [sp, #16]
    75f0:	2331      	movs	r3, #49	; 0x31
    75f2:	7013      	strb	r3, [r2, #0]
    75f4:	e650      	b.n	7298 <_dtoa_r+0x640>
    75f6:	f1ba 0f00 	cmp.w	sl, #0
    75fa:	f000 8123 	beq.w	7844 <_dtoa_r+0xbec>
    75fe:	f202 4233 	addw	r2, r2, #1075	; 0x433
    7602:	9b06      	ldr	r3, [sp, #24]
    7604:	9309      	str	r3, [sp, #36]	; 0x24
    7606:	4413      	add	r3, r2
    7608:	f8dd a020 	ldr.w	sl, [sp, #32]
    760c:	9306      	str	r3, [sp, #24]
    760e:	4490      	add	r8, r2
    7610:	e592      	b.n	7138 <_dtoa_r+0x4e0>
    7612:	ee07 0a90 	vmov	s15, r0
    7616:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
    761a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    761e:	eea6 5b07 	vfma.f64	d5, d6, d7
    7622:	ee15 2a90 	vmov	r2, s11
    7626:	ec51 0b15 	vmov	r0, r1, d5
    762a:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
    762e:	ec41 0b15 	vmov	d5, r0, r1
    7632:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
    7636:	ee36 7b47 	vsub.f64	d7, d6, d7
    763a:	eeb4 7bc5 	vcmpe.f64	d7, d5
    763e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7642:	f300 8137 	bgt.w	78b4 <_dtoa_r+0xc5c>
    7646:	eeb1 5b45 	vneg.f64	d5, d5
    764a:	eeb4 7bc5 	vcmpe.f64	d7, d5
    764e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7652:	f57f acfb 	bpl.w	704c <_dtoa_r+0x3f4>
    7656:	f04f 0a00 	mov.w	sl, #0
    765a:	4656      	mov	r6, sl
    765c:	e515      	b.n	708a <_dtoa_r+0x432>
    765e:	f000 80f5 	beq.w	784c <_dtoa_r+0xbf4>
    7662:	9b04      	ldr	r3, [sp, #16]
    7664:	4951      	ldr	r1, [pc, #324]	; (77ac <_dtoa_r+0xb54>)
    7666:	425a      	negs	r2, r3
    7668:	f002 000f 	and.w	r0, r2, #15
    766c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    7670:	ed91 6b00 	vldr	d6, [r1]
    7674:	1112      	asrs	r2, r2, #4
    7676:	ee28 6b06 	vmul.f64	d6, d8, d6
    767a:	f000 8142 	beq.w	7902 <_dtoa_r+0xcaa>
    767e:	eeb0 7b46 	vmov.f64	d7, d6
    7682:	494b      	ldr	r1, [pc, #300]	; (77b0 <_dtoa_r+0xb58>)
    7684:	2600      	movs	r6, #0
    7686:	2002      	movs	r0, #2
    7688:	07d3      	lsls	r3, r2, #31
    768a:	d505      	bpl.n	7698 <_dtoa_r+0xa40>
    768c:	ed91 5b00 	vldr	d5, [r1]
    7690:	3001      	adds	r0, #1
    7692:	2601      	movs	r6, #1
    7694:	ee27 7b05 	vmul.f64	d7, d7, d5
    7698:	1052      	asrs	r2, r2, #1
    769a:	f101 0108 	add.w	r1, r1, #8
    769e:	d1f3      	bne.n	7688 <_dtoa_r+0xa30>
    76a0:	2e00      	cmp	r6, #0
    76a2:	fe06 6b07 	vseleq.f64	d6, d6, d7
    76a6:	e41e      	b.n	6ee6 <_dtoa_r+0x28e>
    76a8:	9b02      	ldr	r3, [sp, #8]
    76aa:	2b00      	cmp	r3, #0
    76ac:	f47f ae37 	bne.w	731e <_dtoa_r+0x6c6>
    76b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    76b4:	f3c1 0213 	ubfx	r2, r1, #0, #20
    76b8:	2a00      	cmp	r2, #0
    76ba:	f040 8137 	bne.w	792c <_dtoa_r+0xcd4>
    76be:	4a3d      	ldr	r2, [pc, #244]	; (77b4 <_dtoa_r+0xb5c>)
    76c0:	400a      	ands	r2, r1
    76c2:	2a00      	cmp	r2, #0
    76c4:	f000 80fa 	beq.w	78bc <_dtoa_r+0xc64>
    76c8:	9b06      	ldr	r3, [sp, #24]
    76ca:	3301      	adds	r3, #1
    76cc:	9306      	str	r3, [sp, #24]
    76ce:	2301      	movs	r3, #1
    76d0:	f108 0801 	add.w	r8, r8, #1
    76d4:	9308      	str	r3, [sp, #32]
    76d6:	e56f      	b.n	71b8 <_dtoa_r+0x560>
    76d8:	4629      	mov	r1, r5
    76da:	9a08      	ldr	r2, [sp, #32]
    76dc:	4620      	mov	r0, r4
    76de:	f7fd f857 	bl	4790 <__pow5mult>
    76e2:	4605      	mov	r5, r0
    76e4:	e55a      	b.n	719c <_dtoa_r+0x544>
    76e6:	2a00      	cmp	r2, #0
    76e8:	dd12      	ble.n	7710 <_dtoa_r+0xab8>
    76ea:	4629      	mov	r1, r5
    76ec:	2201      	movs	r2, #1
    76ee:	4620      	mov	r0, r4
    76f0:	9301      	str	r3, [sp, #4]
    76f2:	f7fd f8ad 	bl	4850 <__lshift>
    76f6:	4651      	mov	r1, sl
    76f8:	4605      	mov	r5, r0
    76fa:	f7fd f921 	bl	4940 <__mcmp>
    76fe:	2800      	cmp	r0, #0
    7700:	9b01      	ldr	r3, [sp, #4]
    7702:	f340 80e1 	ble.w	78c8 <_dtoa_r+0xc70>
    7706:	2b39      	cmp	r3, #57	; 0x39
    7708:	f000 80ca 	beq.w	78a0 <_dtoa_r+0xc48>
    770c:	f10b 0331 	add.w	r3, fp, #49	; 0x31
    7710:	46b9      	mov	r9, r7
    7712:	f809 3b01 	strb.w	r3, [r9], #1
    7716:	9b04      	ldr	r3, [sp, #16]
    7718:	3301      	adds	r3, #1
    771a:	4637      	mov	r7, r6
    771c:	9304      	str	r3, [sp, #16]
    771e:	4646      	mov	r6, r8
    7720:	e5ba      	b.n	7298 <_dtoa_r+0x640>
    7722:	ee38 8b08 	vadd.f64	d8, d8, d8
    7726:	eeb4 8bc6 	vcmpe.f64	d8, d6
    772a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    772e:	dc0a      	bgt.n	7746 <_dtoa_r+0xaee>
    7730:	eeb4 8b46 	vcmp.f64	d8, d6
    7734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7738:	f47f acdc 	bne.w	70f4 <_dtoa_r+0x49c>
    773c:	ee17 3a10 	vmov	r3, s14
    7740:	07d8      	lsls	r0, r3, #31
    7742:	f57f acd7 	bpl.w	70f4 <_dtoa_r+0x49c>
    7746:	9a00      	ldr	r2, [sp, #0]
    7748:	e454      	b.n	6ff4 <_dtoa_r+0x39c>
    774a:	6871      	ldr	r1, [r6, #4]
    774c:	4620      	mov	r0, r4
    774e:	f7fc fe71 	bl	4434 <_Balloc>
    7752:	4607      	mov	r7, r0
    7754:	2800      	cmp	r0, #0
    7756:	f000 80de 	beq.w	7916 <_dtoa_r+0xcbe>
    775a:	6933      	ldr	r3, [r6, #16]
    775c:	3302      	adds	r3, #2
    775e:	009a      	lsls	r2, r3, #2
    7760:	f106 010c 	add.w	r1, r6, #12
    7764:	300c      	adds	r0, #12
    7766:	f7f9 fd39 	bl	11dc <memcpy>
    776a:	4639      	mov	r1, r7
    776c:	2201      	movs	r2, #1
    776e:	4620      	mov	r0, r4
    7770:	f7fd f86e 	bl	4850 <__lshift>
    7774:	4680      	mov	r8, r0
    7776:	e5fe      	b.n	7376 <_dtoa_r+0x71e>
    7778:	9b06      	ldr	r3, [sp, #24]
    777a:	eba3 0309 	sub.w	r3, r3, r9
    777e:	9309      	str	r3, [sp, #36]	; 0x24
    7780:	e4da      	b.n	7138 <_dtoa_r+0x4e0>
    7782:	2b39      	cmp	r3, #57	; 0x39
    7784:	f000 808c 	beq.w	78a0 <_dtoa_r+0xc48>
    7788:	46b9      	mov	r9, r7
    778a:	3301      	adds	r3, #1
    778c:	e7c1      	b.n	7712 <_dtoa_r+0xaba>
    778e:	9a04      	ldr	r2, [sp, #16]
    7790:	3201      	adds	r2, #1
    7792:	4637      	mov	r7, r6
    7794:	9204      	str	r2, [sp, #16]
    7796:	4646      	mov	r6, r8
    7798:	e55f      	b.n	725a <_dtoa_r+0x602>
    779a:	4629      	mov	r1, r5
    779c:	4620      	mov	r0, r4
    779e:	f7fc fff7 	bl	4790 <__pow5mult>
    77a2:	4605      	mov	r5, r0
    77a4:	e4fa      	b.n	719c <_dtoa_r+0x544>
    77a6:	bf00      	nop
    77a8:	200005c0 	.word	0x200005c0
    77ac:	200002a8 	.word	0x200002a8
    77b0:	20000280 	.word	0x20000280
    77b4:	7ff00000 	.word	0x7ff00000
    77b8:	4b5e      	ldr	r3, [pc, #376]	; (7934 <_dtoa_r+0xcdc>)
    77ba:	eefd 5bc6 	vcvt.s32.f64	s11, d6
    77be:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
    77c2:	ed1c 3b02 	vldr	d3, [ip, #-8]
    77c6:	eeb8 7be5 	vcvt.f64.s32	d7, s11
    77ca:	ee36 7b47 	vsub.f64	d7, d6, d7
    77ce:	ec41 0b16 	vmov	d6, r0, r1
    77d2:	ee15 1a90 	vmov	r1, s11
    77d6:	ee23 3b06 	vmul.f64	d3, d3, d6
    77da:	9800      	ldr	r0, [sp, #0]
    77dc:	3130      	adds	r1, #48	; 0x30
    77de:	2a01      	cmp	r2, #1
    77e0:	f800 1b01 	strb.w	r1, [r0], #1
    77e4:	f000 8083 	beq.w	78ee <_dtoa_r+0xc96>
    77e8:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    77ec:	9b00      	ldr	r3, [sp, #0]
    77ee:	1899      	adds	r1, r3, r2
    77f0:	ee27 7b04 	vmul.f64	d7, d7, d4
    77f4:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    77f8:	ee16 3a90 	vmov	r3, s13
    77fc:	3330      	adds	r3, #48	; 0x30
    77fe:	f800 3b01 	strb.w	r3, [r0], #1
    7802:	4281      	cmp	r1, r0
    7804:	eeb8 5be6 	vcvt.f64.s32	d5, s13
    7808:	ee37 7b45 	vsub.f64	d7, d7, d5
    780c:	d1f0      	bne.n	77f0 <_dtoa_r+0xb98>
    780e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    7812:	ee33 5b06 	vadd.f64	d5, d3, d6
    7816:	eeb4 5bc7 	vcmpe.f64	d5, d7
    781a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    781e:	f53f abe3 	bmi.w	6fe8 <_dtoa_r+0x390>
    7822:	ee36 6b43 	vsub.f64	d6, d6, d3
    7826:	eeb4 6bc7 	vcmpe.f64	d6, d7
    782a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    782e:	f77f ac0d 	ble.w	704c <_dtoa_r+0x3f4>
    7832:	4689      	mov	r9, r1
    7834:	3901      	subs	r1, #1
    7836:	f819 3c01 	ldrb.w	r3, [r9, #-1]
    783a:	2b30      	cmp	r3, #48	; 0x30
    783c:	d0f9      	beq.n	7832 <_dtoa_r+0xbda>
    783e:	1c73      	adds	r3, r6, #1
    7840:	9304      	str	r3, [sp, #16]
    7842:	e539      	b.n	72b8 <_dtoa_r+0x660>
    7844:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    7846:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
    784a:	e6da      	b.n	7602 <_dtoa_r+0x9aa>
    784c:	2002      	movs	r0, #2
    784e:	eeb0 6b48 	vmov.f64	d6, d8
    7852:	f7ff bb48 	b.w	6ee6 <_dtoa_r+0x28e>
    7856:	f1b9 0f00 	cmp.w	r9, #0
    785a:	f43f aeda 	beq.w	7612 <_dtoa_r+0x9ba>
    785e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    7860:	2a00      	cmp	r2, #0
    7862:	f77f abf3 	ble.w	704c <_dtoa_r+0x3f4>
    7866:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    786a:	ee26 6b04 	vmul.f64	d6, d6, d4
    786e:	3001      	adds	r0, #1
    7870:	ee07 0a90 	vmov	s15, r0
    7874:	9b04      	ldr	r3, [sp, #16]
    7876:	eeb8 5be7 	vcvt.f64.s32	d5, s15
    787a:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    787e:	eea6 7b05 	vfma.f64	d7, d6, d5
    7882:	ee17 ca90 	vmov	ip, s15
    7886:	ec51 0b17 	vmov	r0, r1, d7
    788a:	1e5e      	subs	r6, r3, #1
    788c:	f1ac 7150 	sub.w	r1, ip, #54525952	; 0x3400000
    7890:	f7ff bb47 	b.w	6f22 <_dtoa_r+0x2ca>
    7894:	9b04      	ldr	r3, [sp, #16]
    7896:	3301      	adds	r3, #1
    7898:	9304      	str	r3, [sp, #16]
    789a:	2331      	movs	r3, #49	; 0x31
    789c:	f7ff bbb1 	b.w	7002 <_dtoa_r+0x3aa>
    78a0:	9b04      	ldr	r3, [sp, #16]
    78a2:	46bb      	mov	fp, r7
    78a4:	3301      	adds	r3, #1
    78a6:	9304      	str	r3, [sp, #16]
    78a8:	2339      	movs	r3, #57	; 0x39
    78aa:	4637      	mov	r7, r6
    78ac:	f80b 3b01 	strb.w	r3, [fp], #1
    78b0:	4646      	mov	r6, r8
    78b2:	e4e1      	b.n	7278 <_dtoa_r+0x620>
    78b4:	f04f 0a00 	mov.w	sl, #0
    78b8:	4656      	mov	r6, sl
    78ba:	e653      	b.n	7564 <_dtoa_r+0x90c>
    78bc:	9208      	str	r2, [sp, #32]
    78be:	e47b      	b.n	71b8 <_dtoa_r+0x560>
    78c0:	1c73      	adds	r3, r6, #1
    78c2:	9304      	str	r3, [sp, #16]
    78c4:	4689      	mov	r9, r1
    78c6:	e4f7      	b.n	72b8 <_dtoa_r+0x660>
    78c8:	f47f af22 	bne.w	7710 <_dtoa_r+0xab8>
    78cc:	07da      	lsls	r2, r3, #31
    78ce:	f57f af1f 	bpl.w	7710 <_dtoa_r+0xab8>
    78d2:	e718      	b.n	7706 <_dtoa_r+0xaae>
    78d4:	2b39      	cmp	r3, #57	; 0x39
    78d6:	d0e3      	beq.n	78a0 <_dtoa_r+0xc48>
    78d8:	f1b9 0f00 	cmp.w	r9, #0
    78dc:	f73f af16 	bgt.w	770c <_dtoa_r+0xab4>
    78e0:	e716      	b.n	7710 <_dtoa_r+0xab8>
    78e2:	9b01      	ldr	r3, [sp, #4]
    78e4:	2b02      	cmp	r3, #2
    78e6:	f73f ae28 	bgt.w	753a <_dtoa_r+0x8e2>
    78ea:	9704      	str	r7, [sp, #16]
    78ec:	e5ba      	b.n	7464 <_dtoa_r+0x80c>
    78ee:	4601      	mov	r1, r0
    78f0:	e78d      	b.n	780e <_dtoa_r+0xbb6>
    78f2:	9b01      	ldr	r3, [sp, #4]
    78f4:	2b02      	cmp	r3, #2
    78f6:	f73f ae20 	bgt.w	753a <_dtoa_r+0x8e2>
    78fa:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    78fe:	9704      	str	r7, [sp, #16]
    7900:	e52b      	b.n	735a <_dtoa_r+0x702>
    7902:	2002      	movs	r0, #2
    7904:	f7ff baef 	b.w	6ee6 <_dtoa_r+0x28e>
    7908:	4b0b      	ldr	r3, [pc, #44]	; (7938 <_dtoa_r+0xce0>)
    790a:	480c      	ldr	r0, [pc, #48]	; (793c <_dtoa_r+0xce4>)
    790c:	2200      	movs	r2, #0
    790e:	f240 11af 	movw	r1, #431	; 0x1af
    7912:	f7ff f8b1 	bl	6a78 <__assert_func>
    7916:	4b08      	ldr	r3, [pc, #32]	; (7938 <_dtoa_r+0xce0>)
    7918:	4808      	ldr	r0, [pc, #32]	; (793c <_dtoa_r+0xce4>)
    791a:	463a      	mov	r2, r7
    791c:	f240 21ef 	movw	r1, #751	; 0x2ef
    7920:	f7ff f8aa 	bl	6a78 <__assert_func>
    7924:	4b06      	ldr	r3, [pc, #24]	; (7940 <_dtoa_r+0xce8>)
    7926:	9300      	str	r3, [sp, #0]
    7928:	f7ff b9d2 	b.w	6cd0 <_dtoa_r+0x78>
    792c:	9b02      	ldr	r3, [sp, #8]
    792e:	9308      	str	r3, [sp, #32]
    7930:	e4f7      	b.n	7322 <_dtoa_r+0x6ca>
    7932:	bf00      	nop
    7934:	200002a8 	.word	0x200002a8
    7938:	20000440 	.word	0x20000440
    793c:	200005c4 	.word	0x200005c4
    7940:	200005b4 	.word	0x200005b4

00007944 <_wcrtomb_r>:
    7944:	b570      	push	{r4, r5, r6, lr}
    7946:	4605      	mov	r5, r0
    7948:	b084      	sub	sp, #16
    794a:	b15b      	cbz	r3, 7964 <_wcrtomb_r+0x20>
    794c:	461c      	mov	r4, r3
    794e:	b169      	cbz	r1, 796c <_wcrtomb_r+0x28>
    7950:	4b0e      	ldr	r3, [pc, #56]	; (798c <_wcrtomb_r+0x48>)
    7952:	4628      	mov	r0, r5
    7954:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
    7958:	4623      	mov	r3, r4
    795a:	47b0      	blx	r6
    795c:	1c43      	adds	r3, r0, #1
    795e:	d00f      	beq.n	7980 <_wcrtomb_r+0x3c>
    7960:	b004      	add	sp, #16
    7962:	bd70      	pop	{r4, r5, r6, pc}
    7964:	f500 7482 	add.w	r4, r0, #260	; 0x104
    7968:	2900      	cmp	r1, #0
    796a:	d1f1      	bne.n	7950 <_wcrtomb_r+0xc>
    796c:	4a07      	ldr	r2, [pc, #28]	; (798c <_wcrtomb_r+0x48>)
    796e:	4623      	mov	r3, r4
    7970:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
    7974:	4628      	mov	r0, r5
    7976:	460a      	mov	r2, r1
    7978:	a901      	add	r1, sp, #4
    797a:	47b0      	blx	r6
    797c:	1c43      	adds	r3, r0, #1
    797e:	d1ef      	bne.n	7960 <_wcrtomb_r+0x1c>
    7980:	2200      	movs	r2, #0
    7982:	238a      	movs	r3, #138	; 0x8a
    7984:	6022      	str	r2, [r4, #0]
    7986:	602b      	str	r3, [r5, #0]
    7988:	b004      	add	sp, #16
    798a:	bd70      	pop	{r4, r5, r6, pc}
    798c:	20000fb4 	.word	0x20000fb4

00007990 <_wcsrtombs_r>:
    7990:	b510      	push	{r4, lr}
    7992:	b082      	sub	sp, #8
    7994:	9c04      	ldr	r4, [sp, #16]
    7996:	e9cd 3400 	strd	r3, r4, [sp]
    799a:	f04f 33ff 	mov.w	r3, #4294967295
    799e:	f001 fbc7 	bl	9130 <_wcsnrtombs_r>
    79a2:	b002      	add	sp, #8
    79a4:	bd10      	pop	{r4, pc}
    79a6:	bf00      	nop

000079a8 <fiprintf>:
    79a8:	b40e      	push	{r1, r2, r3}
    79aa:	b510      	push	{r4, lr}
    79ac:	b083      	sub	sp, #12
    79ae:	ab05      	add	r3, sp, #20
    79b0:	4c06      	ldr	r4, [pc, #24]	; (79cc <fiprintf+0x24>)
    79b2:	f853 2b04 	ldr.w	r2, [r3], #4
    79b6:	9301      	str	r3, [sp, #4]
    79b8:	4601      	mov	r1, r0
    79ba:	6820      	ldr	r0, [r4, #0]
    79bc:	f000 f8c4 	bl	7b48 <_vfiprintf_r>
    79c0:	b003      	add	sp, #12
    79c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    79c6:	b003      	add	sp, #12
    79c8:	4770      	bx	lr
    79ca:	bf00      	nop
    79cc:	2000153c 	.word	0x2000153c

000079d0 <__ssprint_r>:
    79d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    79d4:	6893      	ldr	r3, [r2, #8]
    79d6:	6817      	ldr	r7, [r2, #0]
    79d8:	b083      	sub	sp, #12
    79da:	4692      	mov	sl, r2
    79dc:	2b00      	cmp	r3, #0
    79de:	d070      	beq.n	7ac2 <__ssprint_r+0xf2>
    79e0:	4681      	mov	r9, r0
    79e2:	688a      	ldr	r2, [r1, #8]
    79e4:	6808      	ldr	r0, [r1, #0]
    79e6:	460c      	mov	r4, r1
    79e8:	3708      	adds	r7, #8
    79ea:	e043      	b.n	7a74 <__ssprint_r+0xa4>
    79ec:	89a3      	ldrh	r3, [r4, #12]
    79ee:	f413 6f90 	tst.w	r3, #1152	; 0x480
    79f2:	d02e      	beq.n	7a52 <__ssprint_r+0x82>
    79f4:	e9d4 1604 	ldrd	r1, r6, [r4, #16]
    79f8:	eba0 0801 	sub.w	r8, r0, r1
    79fc:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    7a00:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
    7a04:	f108 0001 	add.w	r0, r8, #1
    7a08:	1076      	asrs	r6, r6, #1
    7a0a:	4428      	add	r0, r5
    7a0c:	42b0      	cmp	r0, r6
    7a0e:	4632      	mov	r2, r6
    7a10:	bf84      	itt	hi
    7a12:	4606      	movhi	r6, r0
    7a14:	4632      	movhi	r2, r6
    7a16:	055b      	lsls	r3, r3, #21
    7a18:	d537      	bpl.n	7a8a <__ssprint_r+0xba>
    7a1a:	4611      	mov	r1, r2
    7a1c:	4648      	mov	r0, r9
    7a1e:	f7fb f979 	bl	2d14 <_malloc_r>
    7a22:	9001      	str	r0, [sp, #4]
    7a24:	2800      	cmp	r0, #0
    7a26:	d03a      	beq.n	7a9e <__ssprint_r+0xce>
    7a28:	4642      	mov	r2, r8
    7a2a:	6921      	ldr	r1, [r4, #16]
    7a2c:	f7f9 fbd6 	bl	11dc <memcpy>
    7a30:	89a2      	ldrh	r2, [r4, #12]
    7a32:	9b01      	ldr	r3, [sp, #4]
    7a34:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
    7a38:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    7a3c:	81a2      	strh	r2, [r4, #12]
    7a3e:	eba6 0208 	sub.w	r2, r6, r8
    7a42:	eb03 0008 	add.w	r0, r3, r8
    7a46:	6166      	str	r6, [r4, #20]
    7a48:	60a2      	str	r2, [r4, #8]
    7a4a:	6123      	str	r3, [r4, #16]
    7a4c:	6020      	str	r0, [r4, #0]
    7a4e:	462e      	mov	r6, r5
    7a50:	46a8      	mov	r8, r5
    7a52:	4642      	mov	r2, r8
    7a54:	4659      	mov	r1, fp
    7a56:	f7fb ff95 	bl	3984 <memmove>
    7a5a:	f8da 3008 	ldr.w	r3, [sl, #8]
    7a5e:	68a2      	ldr	r2, [r4, #8]
    7a60:	6820      	ldr	r0, [r4, #0]
    7a62:	1b92      	subs	r2, r2, r6
    7a64:	4440      	add	r0, r8
    7a66:	1b5b      	subs	r3, r3, r5
    7a68:	60a2      	str	r2, [r4, #8]
    7a6a:	6020      	str	r0, [r4, #0]
    7a6c:	f8ca 3008 	str.w	r3, [sl, #8]
    7a70:	b33b      	cbz	r3, 7ac2 <__ssprint_r+0xf2>
    7a72:	3708      	adds	r7, #8
    7a74:	e957 b502 	ldrd	fp, r5, [r7, #-8]
    7a78:	2d00      	cmp	r5, #0
    7a7a:	d0fa      	beq.n	7a72 <__ssprint_r+0xa2>
    7a7c:	42aa      	cmp	r2, r5
    7a7e:	4616      	mov	r6, r2
    7a80:	4690      	mov	r8, r2
    7a82:	d9b3      	bls.n	79ec <__ssprint_r+0x1c>
    7a84:	462e      	mov	r6, r5
    7a86:	46a8      	mov	r8, r5
    7a88:	e7e3      	b.n	7a52 <__ssprint_r+0x82>
    7a8a:	4648      	mov	r0, r9
    7a8c:	f7fb fbfe 	bl	328c <_realloc_r>
    7a90:	4603      	mov	r3, r0
    7a92:	2800      	cmp	r0, #0
    7a94:	d1d3      	bne.n	7a3e <__ssprint_r+0x6e>
    7a96:	6921      	ldr	r1, [r4, #16]
    7a98:	4648      	mov	r0, r9
    7a9a:	f7fc fbaf 	bl	41fc <_free_r>
    7a9e:	89a3      	ldrh	r3, [r4, #12]
    7aa0:	220c      	movs	r2, #12
    7aa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    7aa6:	f8c9 2000 	str.w	r2, [r9]
    7aaa:	f04f 30ff 	mov.w	r0, #4294967295
    7aae:	81a3      	strh	r3, [r4, #12]
    7ab0:	2200      	movs	r2, #0
    7ab2:	2300      	movs	r3, #0
    7ab4:	f8ca 2008 	str.w	r2, [sl, #8]
    7ab8:	f8ca 3004 	str.w	r3, [sl, #4]
    7abc:	b003      	add	sp, #12
    7abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7ac2:	2000      	movs	r0, #0
    7ac4:	2300      	movs	r3, #0
    7ac6:	f8ca 3004 	str.w	r3, [sl, #4]
    7aca:	b003      	add	sp, #12
    7acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00007ad0 <__sprint_r.part.0>:
    7ad0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7ad4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    7ad6:	049c      	lsls	r4, r3, #18
    7ad8:	4690      	mov	r8, r2
    7ada:	d52d      	bpl.n	7b38 <__sprint_r.part.0+0x68>
    7adc:	6893      	ldr	r3, [r2, #8]
    7ade:	6812      	ldr	r2, [r2, #0]
    7ae0:	b343      	cbz	r3, 7b34 <__sprint_r.part.0+0x64>
    7ae2:	468b      	mov	fp, r1
    7ae4:	4606      	mov	r6, r0
    7ae6:	f102 0908 	add.w	r9, r2, #8
    7aea:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
    7aee:	ea5f 079a 	movs.w	r7, sl, lsr #2
    7af2:	d015      	beq.n	7b20 <__sprint_r.part.0+0x50>
    7af4:	3d04      	subs	r5, #4
    7af6:	2400      	movs	r4, #0
    7af8:	e001      	b.n	7afe <__sprint_r.part.0+0x2e>
    7afa:	42a7      	cmp	r7, r4
    7afc:	d00e      	beq.n	7b1c <__sprint_r.part.0+0x4c>
    7afe:	f855 1f04 	ldr.w	r1, [r5, #4]!
    7b02:	465a      	mov	r2, fp
    7b04:	4630      	mov	r0, r6
    7b06:	f001 fa5b 	bl	8fc0 <_fputwc_r>
    7b0a:	1c43      	adds	r3, r0, #1
    7b0c:	f104 0401 	add.w	r4, r4, #1
    7b10:	d1f3      	bne.n	7afa <__sprint_r.part.0+0x2a>
    7b12:	2300      	movs	r3, #0
    7b14:	e9c8 3301 	strd	r3, r3, [r8, #4]
    7b18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7b1c:	f8d8 3008 	ldr.w	r3, [r8, #8]
    7b20:	f02a 0a03 	bic.w	sl, sl, #3
    7b24:	eba3 030a 	sub.w	r3, r3, sl
    7b28:	f8c8 3008 	str.w	r3, [r8, #8]
    7b2c:	f109 0908 	add.w	r9, r9, #8
    7b30:	2b00      	cmp	r3, #0
    7b32:	d1da      	bne.n	7aea <__sprint_r.part.0+0x1a>
    7b34:	2000      	movs	r0, #0
    7b36:	e7ec      	b.n	7b12 <__sprint_r.part.0+0x42>
    7b38:	f001 f80c 	bl	8b54 <__sfvwrite_r>
    7b3c:	2300      	movs	r3, #0
    7b3e:	e9c8 3301 	strd	r3, r3, [r8, #4]
    7b42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7b46:	bf00      	nop

00007b48 <_vfiprintf_r>:
    7b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7b4c:	ed2d 8b02 	vpush	{d8}
    7b50:	b0c5      	sub	sp, #276	; 0x114
    7b52:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
    7b56:	4683      	mov	fp, r0
    7b58:	ee08 1a10 	vmov	s16, r1
    7b5c:	4616      	mov	r6, r2
    7b5e:	2100      	movs	r1, #0
    7b60:	2208      	movs	r2, #8
    7b62:	4650      	mov	r0, sl
    7b64:	461c      	mov	r4, r3
    7b66:	9307      	str	r3, [sp, #28]
    7b68:	f7fb ff88 	bl	3a7c <memset>
    7b6c:	f1bb 0f00 	cmp.w	fp, #0
    7b70:	d004      	beq.n	7b7c <_vfiprintf_r+0x34>
    7b72:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
    7b76:	2b00      	cmp	r3, #0
    7b78:	f000 86a0 	beq.w	88bc <_vfiprintf_r+0xd74>
    7b7c:	ee18 2a10 	vmov	r2, s16
    7b80:	6e53      	ldr	r3, [r2, #100]	; 0x64
    7b82:	07db      	lsls	r3, r3, #31
    7b84:	f140 8513 	bpl.w	85ae <_vfiprintf_r+0xa66>
    7b88:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
    7b8c:	b28a      	uxth	r2, r1
    7b8e:	0495      	lsls	r5, r2, #18
    7b90:	d40b      	bmi.n	7baa <_vfiprintf_r+0x62>
    7b92:	ee18 3a10 	vmov	r3, s16
    7b96:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
    7b9a:	8199      	strh	r1, [r3, #12]
    7b9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    7b9e:	b28a      	uxth	r2, r1
    7ba0:	ee18 1a10 	vmov	r1, s16
    7ba4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    7ba8:	664b      	str	r3, [r1, #100]	; 0x64
    7baa:	0710      	lsls	r0, r2, #28
    7bac:	f140 8105 	bpl.w	7dba <_vfiprintf_r+0x272>
    7bb0:	ee18 3a10 	vmov	r3, s16
    7bb4:	691b      	ldr	r3, [r3, #16]
    7bb6:	2b00      	cmp	r3, #0
    7bb8:	f000 80ff 	beq.w	7dba <_vfiprintf_r+0x272>
    7bbc:	f002 031a 	and.w	r3, r2, #26
    7bc0:	2b0a      	cmp	r3, #10
    7bc2:	f000 810a 	beq.w	7dda <_vfiprintf_r+0x292>
    7bc6:	2300      	movs	r3, #0
    7bc8:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
    7bcc:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
    7bd0:	aa1b      	add	r2, sp, #108	; 0x6c
    7bd2:	930c      	str	r3, [sp, #48]	; 0x30
    7bd4:	9218      	str	r2, [sp, #96]	; 0x60
    7bd6:	4691      	mov	r9, r2
    7bd8:	930b      	str	r3, [sp, #44]	; 0x2c
    7bda:	9305      	str	r3, [sp, #20]
    7bdc:	46b0      	mov	r8, r6
    7bde:	4644      	mov	r4, r8
    7be0:	4ba8      	ldr	r3, [pc, #672]	; (7e84 <_vfiprintf_r+0x33c>)
    7be2:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    7be6:	f7fc f825 	bl	3c34 <__locale_mb_cur_max>
    7bea:	4622      	mov	r2, r4
    7bec:	4603      	mov	r3, r0
    7bee:	a912      	add	r1, sp, #72	; 0x48
    7bf0:	f8cd a000 	str.w	sl, [sp]
    7bf4:	4658      	mov	r0, fp
    7bf6:	47a8      	blx	r5
    7bf8:	2800      	cmp	r0, #0
    7bfa:	f000 8145 	beq.w	7e88 <_vfiprintf_r+0x340>
    7bfe:	f2c0 8139 	blt.w	7e74 <_vfiprintf_r+0x32c>
    7c02:	9a12      	ldr	r2, [sp, #72]	; 0x48
    7c04:	2a25      	cmp	r2, #37	; 0x25
    7c06:	4603      	mov	r3, r0
    7c08:	d001      	beq.n	7c0e <_vfiprintf_r+0xc6>
    7c0a:	441c      	add	r4, r3
    7c0c:	e7e8      	b.n	7be0 <_vfiprintf_r+0x98>
    7c0e:	ebb4 0608 	subs.w	r6, r4, r8
    7c12:	4605      	mov	r5, r0
    7c14:	f040 813c 	bne.w	7e90 <_vfiprintf_r+0x348>
    7c18:	2300      	movs	r3, #0
    7c1a:	7861      	ldrb	r1, [r4, #1]
    7c1c:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    7c20:	f104 0801 	add.w	r8, r4, #1
    7c24:	9306      	str	r3, [sp, #24]
    7c26:	f04f 37ff 	mov.w	r7, #4294967295
    7c2a:	461e      	mov	r6, r3
    7c2c:	242b      	movs	r4, #43	; 0x2b
    7c2e:	f108 0801 	add.w	r8, r8, #1
    7c32:	f1a1 0320 	sub.w	r3, r1, #32
    7c36:	2b5a      	cmp	r3, #90	; 0x5a
    7c38:	f200 8178 	bhi.w	7f2c <_vfiprintf_r+0x3e4>
    7c3c:	e8df f013 	tbh	[pc, r3, lsl #1]
    7c40:	017602b5 	.word	0x017602b5
    7c44:	02b00176 	.word	0x02b00176
    7c48:	01760176 	.word	0x01760176
    7c4c:	006a0176 	.word	0x006a0176
    7c50:	01760176 	.word	0x01760176
    7c54:	028d027d 	.word	0x028d027d
    7c58:	02880176 	.word	0x02880176
    7c5c:	01760297 	.word	0x01760297
    7c60:	005b0292 	.word	0x005b0292
    7c64:	005b005b 	.word	0x005b005b
    7c68:	005b005b 	.word	0x005b005b
    7c6c:	005b005b 	.word	0x005b005b
    7c70:	005b005b 	.word	0x005b005b
    7c74:	01760176 	.word	0x01760176
    7c78:	01760176 	.word	0x01760176
    7c7c:	01760176 	.word	0x01760176
    7c80:	01760176 	.word	0x01760176
    7c84:	025c0176 	.word	0x025c0176
    7c88:	01760084 	.word	0x01760084
    7c8c:	01760176 	.word	0x01760176
    7c90:	01760176 	.word	0x01760176
    7c94:	01760176 	.word	0x01760176
    7c98:	01760176 	.word	0x01760176
    7c9c:	00e80176 	.word	0x00e80176
    7ca0:	01760176 	.word	0x01760176
    7ca4:	02330176 	.word	0x02330176
    7ca8:	02da0176 	.word	0x02da0176
    7cac:	01760176 	.word	0x01760176
    7cb0:	0176058b 	.word	0x0176058b
    7cb4:	01760176 	.word	0x01760176
    7cb8:	01760176 	.word	0x01760176
    7cbc:	01760176 	.word	0x01760176
    7cc0:	01760176 	.word	0x01760176
    7cc4:	025c0176 	.word	0x025c0176
    7cc8:	01760086 	.word	0x01760086
    7ccc:	01760176 	.word	0x01760176
    7cd0:	008602cd 	.word	0x008602cd
    7cd4:	0176007f 	.word	0x0176007f
    7cd8:	017602c0 	.word	0x017602c0
    7cdc:	00ea02fd 	.word	0x00ea02fd
    7ce0:	007f02ed 	.word	0x007f02ed
    7ce4:	02330176 	.word	0x02330176
    7ce8:	0569007c 	.word	0x0569007c
    7cec:	01760176 	.word	0x01760176
    7cf0:	0176056b 	.word	0x0176056b
    7cf4:	007c      	.short	0x007c
    7cf6:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    7cfa:	2200      	movs	r2, #0
    7cfc:	f818 1b01 	ldrb.w	r1, [r8], #1
    7d00:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    7d04:	eb03 0242 	add.w	r2, r3, r2, lsl #1
    7d08:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    7d0c:	2b09      	cmp	r3, #9
    7d0e:	d9f5      	bls.n	7cfc <_vfiprintf_r+0x1b4>
    7d10:	9206      	str	r2, [sp, #24]
    7d12:	e78e      	b.n	7c32 <_vfiprintf_r+0xea>
    7d14:	4658      	mov	r0, fp
    7d16:	f7fe fe1f 	bl	6958 <_localeconv_r>
    7d1a:	6843      	ldr	r3, [r0, #4]
    7d1c:	930d      	str	r3, [sp, #52]	; 0x34
    7d1e:	4618      	mov	r0, r3
    7d20:	f7fc f9ae 	bl	4080 <strlen>
    7d24:	900e      	str	r0, [sp, #56]	; 0x38
    7d26:	4605      	mov	r5, r0
    7d28:	4658      	mov	r0, fp
    7d2a:	f7fe fe15 	bl	6958 <_localeconv_r>
    7d2e:	6883      	ldr	r3, [r0, #8]
    7d30:	930b      	str	r3, [sp, #44]	; 0x2c
    7d32:	2d00      	cmp	r5, #0
    7d34:	f040 84d6 	bne.w	86e4 <_vfiprintf_r+0xb9c>
    7d38:	f898 1000 	ldrb.w	r1, [r8]
    7d3c:	e777      	b.n	7c2e <_vfiprintf_r+0xe6>
    7d3e:	f898 1000 	ldrb.w	r1, [r8]
    7d42:	f046 0620 	orr.w	r6, r6, #32
    7d46:	e772      	b.n	7c2e <_vfiprintf_r+0xe6>
    7d48:	f046 0610 	orr.w	r6, r6, #16
    7d4c:	06b4      	lsls	r4, r6, #26
    7d4e:	f140 818e 	bpl.w	806e <_vfiprintf_r+0x526>
    7d52:	9b07      	ldr	r3, [sp, #28]
    7d54:	3307      	adds	r3, #7
    7d56:	f023 0307 	bic.w	r3, r3, #7
    7d5a:	461a      	mov	r2, r3
    7d5c:	6859      	ldr	r1, [r3, #4]
    7d5e:	f852 3b08 	ldr.w	r3, [r2], #8
    7d62:	9207      	str	r2, [sp, #28]
    7d64:	460a      	mov	r2, r1
    7d66:	2900      	cmp	r1, #0
    7d68:	f2c0 8470 	blt.w	864c <_vfiprintf_r+0xb04>
    7d6c:	1c79      	adds	r1, r7, #1
    7d6e:	f000 85a2 	beq.w	88b6 <_vfiprintf_r+0xd6e>
    7d72:	f026 0180 	bic.w	r1, r6, #128	; 0x80
    7d76:	9103      	str	r1, [sp, #12]
    7d78:	ea53 0102 	orrs.w	r1, r3, r2
    7d7c:	f000 843f 	beq.w	85fe <_vfiprintf_r+0xab6>
    7d80:	2b0a      	cmp	r3, #10
    7d82:	f172 0100 	sbcs.w	r1, r2, #0
    7d86:	f080 8541 	bcs.w	880c <_vfiprintf_r+0xcc4>
    7d8a:	3330      	adds	r3, #48	; 0x30
    7d8c:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
    7d90:	9e03      	ldr	r6, [sp, #12]
    7d92:	2301      	movs	r3, #1
    7d94:	9304      	str	r3, [sp, #16]
    7d96:	f20d 140f 	addw	r4, sp, #271	; 0x10f
    7d9a:	9b04      	ldr	r3, [sp, #16]
    7d9c:	42bb      	cmp	r3, r7
    7d9e:	bfb8      	it	lt
    7da0:	463b      	movlt	r3, r7
    7da2:	9303      	str	r3, [sp, #12]
    7da4:	2300      	movs	r3, #0
    7da6:	9308      	str	r3, [sp, #32]
    7da8:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    7dac:	2b00      	cmp	r3, #0
    7dae:	f000 80cb 	beq.w	7f48 <_vfiprintf_r+0x400>
    7db2:	9b03      	ldr	r3, [sp, #12]
    7db4:	3301      	adds	r3, #1
    7db6:	9303      	str	r3, [sp, #12]
    7db8:	e0c6      	b.n	7f48 <_vfiprintf_r+0x400>
    7dba:	ee18 1a10 	vmov	r1, s16
    7dbe:	4658      	mov	r0, fp
    7dc0:	ee18 5a10 	vmov	r5, s16
    7dc4:	f001 f840 	bl	8e48 <__swsetup_r>
    7dc8:	2800      	cmp	r0, #0
    7dca:	f040 8652 	bne.w	8a72 <_vfiprintf_r+0xf2a>
    7dce:	89aa      	ldrh	r2, [r5, #12]
    7dd0:	f002 031a 	and.w	r3, r2, #26
    7dd4:	2b0a      	cmp	r3, #10
    7dd6:	f47f aef6 	bne.w	7bc6 <_vfiprintf_r+0x7e>
    7dda:	ee18 1a10 	vmov	r1, s16
    7dde:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
    7de2:	2b00      	cmp	r3, #0
    7de4:	f6ff aeef 	blt.w	7bc6 <_vfiprintf_r+0x7e>
    7de8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    7dea:	07db      	lsls	r3, r3, #31
    7dec:	d402      	bmi.n	7df4 <_vfiprintf_r+0x2ac>
    7dee:	0597      	lsls	r7, r2, #22
    7df0:	f140 8612 	bpl.w	8a18 <_vfiprintf_r+0xed0>
    7df4:	ee18 1a10 	vmov	r1, s16
    7df8:	4623      	mov	r3, r4
    7dfa:	4632      	mov	r2, r6
    7dfc:	4658      	mov	r0, fp
    7dfe:	f000 fe69 	bl	8ad4 <__sbprintf>
    7e02:	9005      	str	r0, [sp, #20]
    7e04:	9805      	ldr	r0, [sp, #20]
    7e06:	b045      	add	sp, #276	; 0x114
    7e08:	ecbd 8b02 	vpop	{d8}
    7e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7e10:	f046 0610 	orr.w	r6, r6, #16
    7e14:	f016 0220 	ands.w	r2, r6, #32
    7e18:	f000 8136 	beq.w	8088 <_vfiprintf_r+0x540>
    7e1c:	9b07      	ldr	r3, [sp, #28]
    7e1e:	3307      	adds	r3, #7
    7e20:	f023 0307 	bic.w	r3, r3, #7
    7e24:	4619      	mov	r1, r3
    7e26:	685a      	ldr	r2, [r3, #4]
    7e28:	f851 3b08 	ldr.w	r3, [r1], #8
    7e2c:	9107      	str	r1, [sp, #28]
    7e2e:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
    7e32:	9103      	str	r1, [sp, #12]
    7e34:	2100      	movs	r1, #0
    7e36:	2000      	movs	r0, #0
    7e38:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
    7e3c:	1c78      	adds	r0, r7, #1
    7e3e:	f000 8210 	beq.w	8262 <_vfiprintf_r+0x71a>
    7e42:	9803      	ldr	r0, [sp, #12]
    7e44:	f020 0680 	bic.w	r6, r0, #128	; 0x80
    7e48:	ea53 0002 	orrs.w	r0, r3, r2
    7e4c:	f040 8208 	bne.w	8260 <_vfiprintf_r+0x718>
    7e50:	2f00      	cmp	r7, #0
    7e52:	f040 8538 	bne.w	88c6 <_vfiprintf_r+0xd7e>
    7e56:	2900      	cmp	r1, #0
    7e58:	f040 83d5 	bne.w	8606 <_vfiprintf_r+0xabe>
    7e5c:	9b03      	ldr	r3, [sp, #12]
    7e5e:	f013 0301 	ands.w	r3, r3, #1
    7e62:	9304      	str	r3, [sp, #16]
    7e64:	f000 8411 	beq.w	868a <_vfiprintf_r+0xb42>
    7e68:	2330      	movs	r3, #48	; 0x30
    7e6a:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
    7e6e:	f20d 140f 	addw	r4, sp, #271	; 0x10f
    7e72:	e792      	b.n	7d9a <_vfiprintf_r+0x252>
    7e74:	2208      	movs	r2, #8
    7e76:	2100      	movs	r1, #0
    7e78:	4650      	mov	r0, sl
    7e7a:	f7fb fdff 	bl	3a7c <memset>
    7e7e:	2301      	movs	r3, #1
    7e80:	441c      	add	r4, r3
    7e82:	e6ad      	b.n	7be0 <_vfiprintf_r+0x98>
    7e84:	20000fb4 	.word	0x20000fb4
    7e88:	ebb4 0608 	subs.w	r6, r4, r8
    7e8c:	4605      	mov	r5, r0
    7e8e:	d01b      	beq.n	7ec8 <_vfiprintf_r+0x380>
    7e90:	9b19      	ldr	r3, [sp, #100]	; 0x64
    7e92:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    7e94:	3301      	adds	r3, #1
    7e96:	4432      	add	r2, r6
    7e98:	2b07      	cmp	r3, #7
    7e9a:	e9c9 8600 	strd	r8, r6, [r9]
    7e9e:	921a      	str	r2, [sp, #104]	; 0x68
    7ea0:	9319      	str	r3, [sp, #100]	; 0x64
    7ea2:	dd1c      	ble.n	7ede <_vfiprintf_r+0x396>
    7ea4:	2a00      	cmp	r2, #0
    7ea6:	f000 83a6 	beq.w	85f6 <_vfiprintf_r+0xaae>
    7eaa:	ee18 1a10 	vmov	r1, s16
    7eae:	aa18      	add	r2, sp, #96	; 0x60
    7eb0:	4658      	mov	r0, fp
    7eb2:	f7ff fe0d 	bl	7ad0 <__sprint_r.part.0>
    7eb6:	bb20      	cbnz	r0, 7f02 <_vfiprintf_r+0x3ba>
    7eb8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    7ebc:	9b05      	ldr	r3, [sp, #20]
    7ebe:	4433      	add	r3, r6
    7ec0:	9305      	str	r3, [sp, #20]
    7ec2:	2d00      	cmp	r5, #0
    7ec4:	f47f aea8 	bne.w	7c18 <_vfiprintf_r+0xd0>
    7ec8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    7eca:	2b00      	cmp	r3, #0
    7ecc:	f040 85c1 	bne.w	8a52 <_vfiprintf_r+0xf0a>
    7ed0:	ee18 3a10 	vmov	r3, s16
    7ed4:	2200      	movs	r2, #0
    7ed6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    7eda:	9219      	str	r2, [sp, #100]	; 0x64
    7edc:	e015      	b.n	7f0a <_vfiprintf_r+0x3c2>
    7ede:	f109 0908 	add.w	r9, r9, #8
    7ee2:	e7eb      	b.n	7ebc <_vfiprintf_r+0x374>
    7ee4:	ee18 1a10 	vmov	r1, s16
    7ee8:	aa18      	add	r2, sp, #96	; 0x60
    7eea:	4658      	mov	r0, fp
    7eec:	f7ff fdf0 	bl	7ad0 <__sprint_r.part.0>
    7ef0:	2800      	cmp	r0, #0
    7ef2:	f000 80a6 	beq.w	8042 <_vfiprintf_r+0x4fa>
    7ef6:	9b08      	ldr	r3, [sp, #32]
    7ef8:	b11b      	cbz	r3, 7f02 <_vfiprintf_r+0x3ba>
    7efa:	9908      	ldr	r1, [sp, #32]
    7efc:	4658      	mov	r0, fp
    7efe:	f7fc f97d 	bl	41fc <_free_r>
    7f02:	ee18 3a10 	vmov	r3, s16
    7f06:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    7f0a:	ee18 2a10 	vmov	r2, s16
    7f0e:	6e52      	ldr	r2, [r2, #100]	; 0x64
    7f10:	f012 0f01 	tst.w	r2, #1
    7f14:	b29a      	uxth	r2, r3
    7f16:	f000 80a0 	beq.w	805a <_vfiprintf_r+0x512>
    7f1a:	0650      	lsls	r0, r2, #25
    7f1c:	f100 85b2 	bmi.w	8a84 <_vfiprintf_r+0xf3c>
    7f20:	9805      	ldr	r0, [sp, #20]
    7f22:	b045      	add	sp, #276	; 0x114
    7f24:	ecbd 8b02 	vpop	{d8}
    7f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7f2c:	2900      	cmp	r1, #0
    7f2e:	d0cb      	beq.n	7ec8 <_vfiprintf_r+0x380>
    7f30:	2300      	movs	r3, #0
    7f32:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    7f36:	2301      	movs	r3, #1
    7f38:	e9cd 3303 	strd	r3, r3, [sp, #12]
    7f3c:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
    7f40:	ac2b      	add	r4, sp, #172	; 0xac
    7f42:	2300      	movs	r3, #0
    7f44:	9308      	str	r3, [sp, #32]
    7f46:	461f      	mov	r7, r3
    7f48:	f016 0302 	ands.w	r3, r6, #2
    7f4c:	9309      	str	r3, [sp, #36]	; 0x24
    7f4e:	d002      	beq.n	7f56 <_vfiprintf_r+0x40e>
    7f50:	9b03      	ldr	r3, [sp, #12]
    7f52:	3302      	adds	r3, #2
    7f54:	9303      	str	r3, [sp, #12]
    7f56:	f016 0384 	ands.w	r3, r6, #132	; 0x84
    7f5a:	930a      	str	r3, [sp, #40]	; 0x28
    7f5c:	d105      	bne.n	7f6a <_vfiprintf_r+0x422>
    7f5e:	9b06      	ldr	r3, [sp, #24]
    7f60:	9a03      	ldr	r2, [sp, #12]
    7f62:	1a9d      	subs	r5, r3, r2
    7f64:	2d00      	cmp	r5, #0
    7f66:	f300 827b 	bgt.w	8460 <_vfiprintf_r+0x918>
    7f6a:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    7f6e:	1c41      	adds	r1, r0, #1
    7f70:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
    7f74:	b182      	cbz	r2, 7f98 <_vfiprintf_r+0x450>
    7f76:	2201      	movs	r2, #1
    7f78:	3301      	adds	r3, #1
    7f7a:	f8c9 2004 	str.w	r2, [r9, #4]
    7f7e:	2907      	cmp	r1, #7
    7f80:	f10d 0243 	add.w	r2, sp, #67	; 0x43
    7f84:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    7f88:	f8c9 2000 	str.w	r2, [r9]
    7f8c:	f300 824a 	bgt.w	8424 <_vfiprintf_r+0x8dc>
    7f90:	4608      	mov	r0, r1
    7f92:	f109 0908 	add.w	r9, r9, #8
    7f96:	3101      	adds	r1, #1
    7f98:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7f9a:	b1e2      	cbz	r2, 7fd6 <_vfiprintf_r+0x48e>
    7f9c:	aa11      	add	r2, sp, #68	; 0x44
    7f9e:	3302      	adds	r3, #2
    7fa0:	f8c9 2000 	str.w	r2, [r9]
    7fa4:	2907      	cmp	r1, #7
    7fa6:	f04f 0202 	mov.w	r2, #2
    7faa:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    7fae:	f8c9 2004 	str.w	r2, [r9, #4]
    7fb2:	f340 8250 	ble.w	8456 <_vfiprintf_r+0x90e>
    7fb6:	2b00      	cmp	r3, #0
    7fb8:	f000 8343 	beq.w	8642 <_vfiprintf_r+0xafa>
    7fbc:	ee18 1a10 	vmov	r1, s16
    7fc0:	aa18      	add	r2, sp, #96	; 0x60
    7fc2:	4658      	mov	r0, fp
    7fc4:	f7ff fd84 	bl	7ad0 <__sprint_r.part.0>
    7fc8:	2800      	cmp	r0, #0
    7fca:	d194      	bne.n	7ef6 <_vfiprintf_r+0x3ae>
    7fcc:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    7fd0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    7fd4:	1c41      	adds	r1, r0, #1
    7fd6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    7fd8:	2a80      	cmp	r2, #128	; 0x80
    7fda:	f000 8184 	beq.w	82e6 <_vfiprintf_r+0x79e>
    7fde:	9a04      	ldr	r2, [sp, #16]
    7fe0:	1abd      	subs	r5, r7, r2
    7fe2:	2d00      	cmp	r5, #0
    7fe4:	f300 81d7 	bgt.w	8396 <_vfiprintf_r+0x84e>
    7fe8:	9a04      	ldr	r2, [sp, #16]
    7fea:	f8c9 4000 	str.w	r4, [r9]
    7fee:	4413      	add	r3, r2
    7ff0:	2907      	cmp	r1, #7
    7ff2:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    7ff6:	f8c9 2004 	str.w	r2, [r9, #4]
    7ffa:	f340 816e 	ble.w	82da <_vfiprintf_r+0x792>
    7ffe:	2b00      	cmp	r3, #0
    8000:	f000 8275 	beq.w	84ee <_vfiprintf_r+0x9a6>
    8004:	ee18 1a10 	vmov	r1, s16
    8008:	aa18      	add	r2, sp, #96	; 0x60
    800a:	4658      	mov	r0, fp
    800c:	f7ff fd60 	bl	7ad0 <__sprint_r.part.0>
    8010:	2800      	cmp	r0, #0
    8012:	f47f af70 	bne.w	7ef6 <_vfiprintf_r+0x3ae>
    8016:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    8018:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    801c:	0775      	lsls	r5, r6, #29
    801e:	d505      	bpl.n	802c <_vfiprintf_r+0x4e4>
    8020:	9a06      	ldr	r2, [sp, #24]
    8022:	9903      	ldr	r1, [sp, #12]
    8024:	1a54      	subs	r4, r2, r1
    8026:	2c00      	cmp	r4, #0
    8028:	f300 826b 	bgt.w	8502 <_vfiprintf_r+0x9ba>
    802c:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
    8030:	9803      	ldr	r0, [sp, #12]
    8032:	4281      	cmp	r1, r0
    8034:	bfac      	ite	ge
    8036:	1852      	addge	r2, r2, r1
    8038:	1812      	addlt	r2, r2, r0
    803a:	9205      	str	r2, [sp, #20]
    803c:	2b00      	cmp	r3, #0
    803e:	f47f af51 	bne.w	7ee4 <_vfiprintf_r+0x39c>
    8042:	9908      	ldr	r1, [sp, #32]
    8044:	2300      	movs	r3, #0
    8046:	9319      	str	r3, [sp, #100]	; 0x64
    8048:	2900      	cmp	r1, #0
    804a:	f000 8149 	beq.w	82e0 <_vfiprintf_r+0x798>
    804e:	4658      	mov	r0, fp
    8050:	f7fc f8d4 	bl	41fc <_free_r>
    8054:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8058:	e5c1      	b.n	7bde <_vfiprintf_r+0x96>
    805a:	059c      	lsls	r4, r3, #22
    805c:	f53f af5d 	bmi.w	7f1a <_vfiprintf_r+0x3d2>
    8060:	ee18 4a10 	vmov	r4, s16
    8064:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8066:	f7fb fe81 	bl	3d6c <__retarget_lock_release_recursive>
    806a:	89a2      	ldrh	r2, [r4, #12]
    806c:	e755      	b.n	7f1a <_vfiprintf_r+0x3d2>
    806e:	06f0      	lsls	r0, r6, #27
    8070:	9a07      	ldr	r2, [sp, #28]
    8072:	f100 831f 	bmi.w	86b4 <_vfiprintf_r+0xb6c>
    8076:	0671      	lsls	r1, r6, #25
    8078:	f140 8319 	bpl.w	86ae <_vfiprintf_r+0xb66>
    807c:	f932 3b04 	ldrsh.w	r3, [r2], #4
    8080:	9207      	str	r2, [sp, #28]
    8082:	17da      	asrs	r2, r3, #31
    8084:	4611      	mov	r1, r2
    8086:	e66e      	b.n	7d66 <_vfiprintf_r+0x21e>
    8088:	f016 0310 	ands.w	r3, r6, #16
    808c:	9907      	ldr	r1, [sp, #28]
    808e:	f040 8309 	bne.w	86a4 <_vfiprintf_r+0xb5c>
    8092:	f016 0040 	ands.w	r0, r6, #64	; 0x40
    8096:	f000 8301 	beq.w	869c <_vfiprintf_r+0xb54>
    809a:	461a      	mov	r2, r3
    809c:	f851 3b04 	ldr.w	r3, [r1], #4
    80a0:	9107      	str	r1, [sp, #28]
    80a2:	b29b      	uxth	r3, r3
    80a4:	e6c3      	b.n	7e2e <_vfiprintf_r+0x2e6>
    80a6:	9b07      	ldr	r3, [sp, #28]
    80a8:	461a      	mov	r2, r3
    80aa:	2300      	movs	r3, #0
    80ac:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    80b0:	4613      	mov	r3, r2
    80b2:	f853 4b04 	ldr.w	r4, [r3], #4
    80b6:	9303      	str	r3, [sp, #12]
    80b8:	2c00      	cmp	r4, #0
    80ba:	f000 8412 	beq.w	88e2 <_vfiprintf_r+0xd9a>
    80be:	2953      	cmp	r1, #83	; 0x53
    80c0:	f000 8365 	beq.w	878e <_vfiprintf_r+0xc46>
    80c4:	f016 0510 	ands.w	r5, r6, #16
    80c8:	f040 8361 	bne.w	878e <_vfiprintf_r+0xc46>
    80cc:	1c7b      	adds	r3, r7, #1
    80ce:	f000 84b3 	beq.w	8a38 <_vfiprintf_r+0xef0>
    80d2:	463a      	mov	r2, r7
    80d4:	4629      	mov	r1, r5
    80d6:	4620      	mov	r0, r4
    80d8:	f7fe fc42 	bl	6960 <memchr>
    80dc:	9008      	str	r0, [sp, #32]
    80de:	2800      	cmp	r0, #0
    80e0:	f000 849f 	beq.w	8a22 <_vfiprintf_r+0xeda>
    80e4:	1b03      	subs	r3, r0, r4
    80e6:	9a03      	ldr	r2, [sp, #12]
    80e8:	9304      	str	r3, [sp, #16]
    80ea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    80ee:	462f      	mov	r7, r5
    80f0:	9207      	str	r2, [sp, #28]
    80f2:	9303      	str	r3, [sp, #12]
    80f4:	9508      	str	r5, [sp, #32]
    80f6:	e657      	b.n	7da8 <_vfiprintf_r+0x260>
    80f8:	2943      	cmp	r1, #67	; 0x43
    80fa:	d002      	beq.n	8102 <_vfiprintf_r+0x5ba>
    80fc:	06f5      	lsls	r5, r6, #27
    80fe:	f140 832d 	bpl.w	875c <_vfiprintf_r+0xc14>
    8102:	9d07      	ldr	r5, [sp, #28]
    8104:	2208      	movs	r2, #8
    8106:	2100      	movs	r1, #0
    8108:	a816      	add	r0, sp, #88	; 0x58
    810a:	ac2b      	add	r4, sp, #172	; 0xac
    810c:	f7fb fcb6 	bl	3a7c <memset>
    8110:	ab16      	add	r3, sp, #88	; 0x58
    8112:	f855 2b04 	ldr.w	r2, [r5], #4
    8116:	4621      	mov	r1, r4
    8118:	4658      	mov	r0, fp
    811a:	f7ff fc13 	bl	7944 <_wcrtomb_r>
    811e:	4603      	mov	r3, r0
    8120:	3301      	adds	r3, #1
    8122:	9004      	str	r0, [sp, #16]
    8124:	f000 84b3 	beq.w	8a8e <_vfiprintf_r+0xf46>
    8128:	9b04      	ldr	r3, [sp, #16]
    812a:	9507      	str	r5, [sp, #28]
    812c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    8130:	9303      	str	r3, [sp, #12]
    8132:	2300      	movs	r3, #0
    8134:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    8138:	e703      	b.n	7f42 <_vfiprintf_r+0x3fa>
    813a:	9b07      	ldr	r3, [sp, #28]
    813c:	f853 2b04 	ldr.w	r2, [r3], #4
    8140:	9206      	str	r2, [sp, #24]
    8142:	2a00      	cmp	r2, #0
    8144:	f280 829c 	bge.w	8680 <_vfiprintf_r+0xb38>
    8148:	9a06      	ldr	r2, [sp, #24]
    814a:	4252      	negs	r2, r2
    814c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    8150:	f898 1000 	ldrb.w	r1, [r8]
    8154:	f046 0604 	orr.w	r6, r6, #4
    8158:	e569      	b.n	7c2e <_vfiprintf_r+0xe6>
    815a:	f898 1000 	ldrb.w	r1, [r8]
    815e:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
    8162:	e564      	b.n	7c2e <_vfiprintf_r+0xe6>
    8164:	f898 1000 	ldrb.w	r1, [r8]
    8168:	f046 0680 	orr.w	r6, r6, #128	; 0x80
    816c:	e55f      	b.n	7c2e <_vfiprintf_r+0xe6>
    816e:	4642      	mov	r2, r8
    8170:	f812 1b01 	ldrb.w	r1, [r2], #1
    8174:	292a      	cmp	r1, #42	; 0x2a
    8176:	f000 8496 	beq.w	8aa6 <_vfiprintf_r+0xf5e>
    817a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    817e:	2b09      	cmp	r3, #9
    8180:	4690      	mov	r8, r2
    8182:	f04f 0700 	mov.w	r7, #0
    8186:	f63f ad54 	bhi.w	7c32 <_vfiprintf_r+0xea>
    818a:	f818 1b01 	ldrb.w	r1, [r8], #1
    818e:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    8192:	eb03 0747 	add.w	r7, r3, r7, lsl #1
    8196:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    819a:	2b09      	cmp	r3, #9
    819c:	d9f5      	bls.n	818a <_vfiprintf_r+0x642>
    819e:	e548      	b.n	7c32 <_vfiprintf_r+0xea>
    81a0:	f898 1000 	ldrb.w	r1, [r8]
    81a4:	f046 0601 	orr.w	r6, r6, #1
    81a8:	e541      	b.n	7c2e <_vfiprintf_r+0xe6>
    81aa:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    81ae:	2b00      	cmp	r3, #0
    81b0:	f47f adc2 	bne.w	7d38 <_vfiprintf_r+0x1f0>
    81b4:	2320      	movs	r3, #32
    81b6:	f898 1000 	ldrb.w	r1, [r8]
    81ba:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    81be:	e536      	b.n	7c2e <_vfiprintf_r+0xe6>
    81c0:	f898 1000 	ldrb.w	r1, [r8]
    81c4:	296c      	cmp	r1, #108	; 0x6c
    81c6:	bf03      	ittte	eq
    81c8:	f898 1001 	ldrbeq.w	r1, [r8, #1]
    81cc:	f046 0620 	orreq.w	r6, r6, #32
    81d0:	f108 0801 	addeq.w	r8, r8, #1
    81d4:	f046 0610 	orrne.w	r6, r6, #16
    81d8:	e529      	b.n	7c2e <_vfiprintf_r+0xe6>
    81da:	f898 1000 	ldrb.w	r1, [r8]
    81de:	2968      	cmp	r1, #104	; 0x68
    81e0:	bf03      	ittte	eq
    81e2:	f898 1001 	ldrbeq.w	r1, [r8, #1]
    81e6:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
    81ea:	f108 0801 	addeq.w	r8, r8, #1
    81ee:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
    81f2:	e51c      	b.n	7c2e <_vfiprintf_r+0xe6>
    81f4:	f046 0310 	orr.w	r3, r6, #16
    81f8:	9303      	str	r3, [sp, #12]
    81fa:	9b03      	ldr	r3, [sp, #12]
    81fc:	f013 0220 	ands.w	r2, r3, #32
    8200:	f000 8206 	beq.w	8610 <_vfiprintf_r+0xac8>
    8204:	9b07      	ldr	r3, [sp, #28]
    8206:	3307      	adds	r3, #7
    8208:	f023 0307 	bic.w	r3, r3, #7
    820c:	4619      	mov	r1, r3
    820e:	685a      	ldr	r2, [r3, #4]
    8210:	f851 3b08 	ldr.w	r3, [r1], #8
    8214:	9107      	str	r1, [sp, #28]
    8216:	2101      	movs	r1, #1
    8218:	e60d      	b.n	7e36 <_vfiprintf_r+0x2ee>
    821a:	9a07      	ldr	r2, [sp, #28]
    821c:	f046 0302 	orr.w	r3, r6, #2
    8220:	9303      	str	r3, [sp, #12]
    8222:	f852 3b04 	ldr.w	r3, [r2], #4
    8226:	9207      	str	r2, [sp, #28]
    8228:	f647 0230 	movw	r2, #30768	; 0x7830
    822c:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
    8230:	4ab8      	ldr	r2, [pc, #736]	; (8514 <_vfiprintf_r+0x9cc>)
    8232:	920c      	str	r2, [sp, #48]	; 0x30
    8234:	2102      	movs	r1, #2
    8236:	2200      	movs	r2, #0
    8238:	e5fd      	b.n	7e36 <_vfiprintf_r+0x2ee>
    823a:	06b7      	lsls	r7, r6, #26
    823c:	f100 8248 	bmi.w	86d0 <_vfiprintf_r+0xb88>
    8240:	06f5      	lsls	r5, r6, #27
    8242:	f100 8346 	bmi.w	88d2 <_vfiprintf_r+0xd8a>
    8246:	0674      	lsls	r4, r6, #25
    8248:	f100 83d5 	bmi.w	89f6 <_vfiprintf_r+0xeae>
    824c:	05b0      	lsls	r0, r6, #22
    824e:	f140 8340 	bpl.w	88d2 <_vfiprintf_r+0xd8a>
    8252:	9b07      	ldr	r3, [sp, #28]
    8254:	9905      	ldr	r1, [sp, #20]
    8256:	f853 2b04 	ldr.w	r2, [r3], #4
    825a:	9307      	str	r3, [sp, #28]
    825c:	7011      	strb	r1, [r2, #0]
    825e:	e4be      	b.n	7bde <_vfiprintf_r+0x96>
    8260:	9603      	str	r6, [sp, #12]
    8262:	2901      	cmp	r1, #1
    8264:	f43f ad8c 	beq.w	7d80 <_vfiprintf_r+0x238>
    8268:	2902      	cmp	r1, #2
    826a:	ac44      	add	r4, sp, #272	; 0x110
    826c:	d111      	bne.n	8292 <_vfiprintf_r+0x74a>
    826e:	980c      	ldr	r0, [sp, #48]	; 0x30
    8270:	f003 010f 	and.w	r1, r3, #15
    8274:	091b      	lsrs	r3, r3, #4
    8276:	5c41      	ldrb	r1, [r0, r1]
    8278:	f804 1d01 	strb.w	r1, [r4, #-1]!
    827c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    8280:	0912      	lsrs	r2, r2, #4
    8282:	ea53 0102 	orrs.w	r1, r3, r2
    8286:	d1f3      	bne.n	8270 <_vfiprintf_r+0x728>
    8288:	9e03      	ldr	r6, [sp, #12]
    828a:	ab44      	add	r3, sp, #272	; 0x110
    828c:	1b1b      	subs	r3, r3, r4
    828e:	9304      	str	r3, [sp, #16]
    8290:	e583      	b.n	7d9a <_vfiprintf_r+0x252>
    8292:	f003 0107 	and.w	r1, r3, #7
    8296:	08db      	lsrs	r3, r3, #3
    8298:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
    829c:	08d2      	lsrs	r2, r2, #3
    829e:	3130      	adds	r1, #48	; 0x30
    82a0:	ea53 0502 	orrs.w	r5, r3, r2
    82a4:	4620      	mov	r0, r4
    82a6:	f804 1d01 	strb.w	r1, [r4, #-1]!
    82aa:	d1f2      	bne.n	8292 <_vfiprintf_r+0x74a>
    82ac:	9e03      	ldr	r6, [sp, #12]
    82ae:	07f3      	lsls	r3, r6, #31
    82b0:	d5eb      	bpl.n	828a <_vfiprintf_r+0x742>
    82b2:	2930      	cmp	r1, #48	; 0x30
    82b4:	d0e8      	beq.n	8288 <_vfiprintf_r+0x740>
    82b6:	2330      	movs	r3, #48	; 0x30
    82b8:	3802      	subs	r0, #2
    82ba:	f804 3c01 	strb.w	r3, [r4, #-1]
    82be:	ab44      	add	r3, sp, #272	; 0x110
    82c0:	1a1b      	subs	r3, r3, r0
    82c2:	9e03      	ldr	r6, [sp, #12]
    82c4:	9304      	str	r3, [sp, #16]
    82c6:	4604      	mov	r4, r0
    82c8:	e567      	b.n	7d9a <_vfiprintf_r+0x252>
    82ca:	9b04      	ldr	r3, [sp, #16]
    82cc:	941b      	str	r4, [sp, #108]	; 0x6c
    82ce:	2201      	movs	r2, #1
    82d0:	931c      	str	r3, [sp, #112]	; 0x70
    82d2:	931a      	str	r3, [sp, #104]	; 0x68
    82d4:	9219      	str	r2, [sp, #100]	; 0x64
    82d6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    82da:	f109 0908 	add.w	r9, r9, #8
    82de:	e69d      	b.n	801c <_vfiprintf_r+0x4d4>
    82e0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    82e4:	e47b      	b.n	7bde <_vfiprintf_r+0x96>
    82e6:	9a06      	ldr	r2, [sp, #24]
    82e8:	9d03      	ldr	r5, [sp, #12]
    82ea:	1b55      	subs	r5, r2, r5
    82ec:	2d00      	cmp	r5, #0
    82ee:	f77f ae76 	ble.w	7fde <_vfiprintf_r+0x496>
    82f2:	2d10      	cmp	r5, #16
    82f4:	f340 83bb 	ble.w	8a6e <_vfiprintf_r+0xf26>
    82f8:	9409      	str	r4, [sp, #36]	; 0x24
    82fa:	ee18 4a10 	vmov	r4, s16
    82fe:	e007      	b.n	8310 <_vfiprintf_r+0x7c8>
    8300:	f100 0c02 	add.w	ip, r0, #2
    8304:	f109 0908 	add.w	r9, r9, #8
    8308:	4610      	mov	r0, r2
    830a:	3d10      	subs	r5, #16
    830c:	2d10      	cmp	r5, #16
    830e:	dd1e      	ble.n	834e <_vfiprintf_r+0x806>
    8310:	4981      	ldr	r1, [pc, #516]	; (8518 <_vfiprintf_r+0x9d0>)
    8312:	f8c9 1000 	str.w	r1, [r9]
    8316:	1c42      	adds	r2, r0, #1
    8318:	3310      	adds	r3, #16
    831a:	2110      	movs	r1, #16
    831c:	2a07      	cmp	r2, #7
    831e:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    8322:	f8c9 1004 	str.w	r1, [r9, #4]
    8326:	ddeb      	ble.n	8300 <_vfiprintf_r+0x7b8>
    8328:	aa18      	add	r2, sp, #96	; 0x60
    832a:	2b00      	cmp	r3, #0
    832c:	d074      	beq.n	8418 <_vfiprintf_r+0x8d0>
    832e:	4621      	mov	r1, r4
    8330:	4658      	mov	r0, fp
    8332:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8336:	f7ff fbcb 	bl	7ad0 <__sprint_r.part.0>
    833a:	2800      	cmp	r0, #0
    833c:	f47f addb 	bne.w	7ef6 <_vfiprintf_r+0x3ae>
    8340:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    8344:	3d10      	subs	r5, #16
    8346:	2d10      	cmp	r5, #16
    8348:	f100 0c01 	add.w	ip, r0, #1
    834c:	dce0      	bgt.n	8310 <_vfiprintf_r+0x7c8>
    834e:	9c09      	ldr	r4, [sp, #36]	; 0x24
    8350:	4a71      	ldr	r2, [pc, #452]	; (8518 <_vfiprintf_r+0x9d0>)
    8352:	f8c9 5004 	str.w	r5, [r9, #4]
    8356:	442b      	add	r3, r5
    8358:	f1bc 0f07 	cmp.w	ip, #7
    835c:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
    8360:	f8c9 2000 	str.w	r2, [r9]
    8364:	f340 8194 	ble.w	8690 <_vfiprintf_r+0xb48>
    8368:	2b00      	cmp	r3, #0
    836a:	f000 831f 	beq.w	89ac <_vfiprintf_r+0xe64>
    836e:	ee18 1a10 	vmov	r1, s16
    8372:	aa18      	add	r2, sp, #96	; 0x60
    8374:	4658      	mov	r0, fp
    8376:	f7ff fbab 	bl	7ad0 <__sprint_r.part.0>
    837a:	2800      	cmp	r0, #0
    837c:	f47f adbb 	bne.w	7ef6 <_vfiprintf_r+0x3ae>
    8380:	9a04      	ldr	r2, [sp, #16]
    8382:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    8386:	1abd      	subs	r5, r7, r2
    8388:	2d00      	cmp	r5, #0
    838a:	f100 0101 	add.w	r1, r0, #1
    838e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8392:	f77f ae29 	ble.w	7fe8 <_vfiprintf_r+0x4a0>
    8396:	2d10      	cmp	r5, #16
    8398:	dd29      	ble.n	83ee <_vfiprintf_r+0x8a6>
    839a:	9409      	str	r4, [sp, #36]	; 0x24
    839c:	2710      	movs	r7, #16
    839e:	ee18 4a10 	vmov	r4, s16
    83a2:	e007      	b.n	83b4 <_vfiprintf_r+0x86c>
    83a4:	f100 0c02 	add.w	ip, r0, #2
    83a8:	f109 0908 	add.w	r9, r9, #8
    83ac:	4610      	mov	r0, r2
    83ae:	3d10      	subs	r5, #16
    83b0:	2d10      	cmp	r5, #16
    83b2:	dd1a      	ble.n	83ea <_vfiprintf_r+0x8a2>
    83b4:	1c42      	adds	r2, r0, #1
    83b6:	4958      	ldr	r1, [pc, #352]	; (8518 <_vfiprintf_r+0x9d0>)
    83b8:	3310      	adds	r3, #16
    83ba:	2a07      	cmp	r2, #7
    83bc:	e9c9 1700 	strd	r1, r7, [r9]
    83c0:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    83c4:	ddee      	ble.n	83a4 <_vfiprintf_r+0x85c>
    83c6:	aa18      	add	r2, sp, #96	; 0x60
    83c8:	b303      	cbz	r3, 840c <_vfiprintf_r+0x8c4>
    83ca:	4621      	mov	r1, r4
    83cc:	4658      	mov	r0, fp
    83ce:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    83d2:	f7ff fb7d 	bl	7ad0 <__sprint_r.part.0>
    83d6:	2800      	cmp	r0, #0
    83d8:	f47f ad8d 	bne.w	7ef6 <_vfiprintf_r+0x3ae>
    83dc:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    83e0:	3d10      	subs	r5, #16
    83e2:	2d10      	cmp	r5, #16
    83e4:	f100 0c01 	add.w	ip, r0, #1
    83e8:	dce4      	bgt.n	83b4 <_vfiprintf_r+0x86c>
    83ea:	9c09      	ldr	r4, [sp, #36]	; 0x24
    83ec:	4661      	mov	r1, ip
    83ee:	4a4a      	ldr	r2, [pc, #296]	; (8518 <_vfiprintf_r+0x9d0>)
    83f0:	f8c9 5004 	str.w	r5, [r9, #4]
    83f4:	442b      	add	r3, r5
    83f6:	2907      	cmp	r1, #7
    83f8:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    83fc:	f8c9 2000 	str.w	r2, [r9]
    8400:	f300 80e7 	bgt.w	85d2 <_vfiprintf_r+0xa8a>
    8404:	f109 0908 	add.w	r9, r9, #8
    8408:	3101      	adds	r1, #1
    840a:	e5ed      	b.n	7fe8 <_vfiprintf_r+0x4a0>
    840c:	f04f 0c01 	mov.w	ip, #1
    8410:	4618      	mov	r0, r3
    8412:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8416:	e7ca      	b.n	83ae <_vfiprintf_r+0x866>
    8418:	f04f 0c01 	mov.w	ip, #1
    841c:	4618      	mov	r0, r3
    841e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8422:	e772      	b.n	830a <_vfiprintf_r+0x7c2>
    8424:	2b00      	cmp	r3, #0
    8426:	f000 8104 	beq.w	8632 <_vfiprintf_r+0xaea>
    842a:	ee18 1a10 	vmov	r1, s16
    842e:	aa18      	add	r2, sp, #96	; 0x60
    8430:	4658      	mov	r0, fp
    8432:	f7ff fb4d 	bl	7ad0 <__sprint_r.part.0>
    8436:	2800      	cmp	r0, #0
    8438:	f47f ad5d 	bne.w	7ef6 <_vfiprintf_r+0x3ae>
    843c:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    8440:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8444:	1c41      	adds	r1, r0, #1
    8446:	e5a7      	b.n	7f98 <_vfiprintf_r+0x450>
    8448:	2302      	movs	r3, #2
    844a:	aa11      	add	r2, sp, #68	; 0x44
    844c:	931c      	str	r3, [sp, #112]	; 0x70
    844e:	921b      	str	r2, [sp, #108]	; 0x6c
    8450:	2101      	movs	r1, #1
    8452:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8456:	4608      	mov	r0, r1
    8458:	f109 0908 	add.w	r9, r9, #8
    845c:	1c41      	adds	r1, r0, #1
    845e:	e5ba      	b.n	7fd6 <_vfiprintf_r+0x48e>
    8460:	2d10      	cmp	r5, #16
    8462:	f340 82e5 	ble.w	8a30 <_vfiprintf_r+0xee8>
    8466:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
    846a:	940f      	str	r4, [sp, #60]	; 0x3c
    846c:	4608      	mov	r0, r1
    846e:	ee18 4a10 	vmov	r4, s16
    8472:	e007      	b.n	8484 <_vfiprintf_r+0x93c>
    8474:	f100 0c02 	add.w	ip, r0, #2
    8478:	f109 0908 	add.w	r9, r9, #8
    847c:	4610      	mov	r0, r2
    847e:	3d10      	subs	r5, #16
    8480:	2d10      	cmp	r5, #16
    8482:	dd1d      	ble.n	84c0 <_vfiprintf_r+0x978>
    8484:	4925      	ldr	r1, [pc, #148]	; (851c <_vfiprintf_r+0x9d4>)
    8486:	f8c9 1000 	str.w	r1, [r9]
    848a:	1c42      	adds	r2, r0, #1
    848c:	3310      	adds	r3, #16
    848e:	2110      	movs	r1, #16
    8490:	2a07      	cmp	r2, #7
    8492:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    8496:	f8c9 1004 	str.w	r1, [r9, #4]
    849a:	ddeb      	ble.n	8474 <_vfiprintf_r+0x92c>
    849c:	aa18      	add	r2, sp, #96	; 0x60
    849e:	b303      	cbz	r3, 84e2 <_vfiprintf_r+0x99a>
    84a0:	4621      	mov	r1, r4
    84a2:	4658      	mov	r0, fp
    84a4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    84a8:	f7ff fb12 	bl	7ad0 <__sprint_r.part.0>
    84ac:	2800      	cmp	r0, #0
    84ae:	f47f ad22 	bne.w	7ef6 <_vfiprintf_r+0x3ae>
    84b2:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    84b6:	3d10      	subs	r5, #16
    84b8:	2d10      	cmp	r5, #16
    84ba:	f100 0c01 	add.w	ip, r0, #1
    84be:	dce1      	bgt.n	8484 <_vfiprintf_r+0x93c>
    84c0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    84c2:	4660      	mov	r0, ip
    84c4:	4a15      	ldr	r2, [pc, #84]	; (851c <_vfiprintf_r+0x9d4>)
    84c6:	f8c9 5004 	str.w	r5, [r9, #4]
    84ca:	442b      	add	r3, r5
    84cc:	2807      	cmp	r0, #7
    84ce:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
    84d2:	f8c9 2000 	str.w	r2, [r9]
    84d6:	f300 80c1 	bgt.w	865c <_vfiprintf_r+0xb14>
    84da:	f109 0908 	add.w	r9, r9, #8
    84de:	1c41      	adds	r1, r0, #1
    84e0:	e546      	b.n	7f70 <_vfiprintf_r+0x428>
    84e2:	4618      	mov	r0, r3
    84e4:	f04f 0c01 	mov.w	ip, #1
    84e8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    84ec:	e7c7      	b.n	847e <_vfiprintf_r+0x936>
    84ee:	0776      	lsls	r6, r6, #29
    84f0:	9319      	str	r3, [sp, #100]	; 0x64
    84f2:	d553      	bpl.n	859c <_vfiprintf_r+0xa54>
    84f4:	9a06      	ldr	r2, [sp, #24]
    84f6:	9903      	ldr	r1, [sp, #12]
    84f8:	1a54      	subs	r4, r2, r1
    84fa:	2c00      	cmp	r4, #0
    84fc:	dd4e      	ble.n	859c <_vfiprintf_r+0xa54>
    84fe:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8502:	2c10      	cmp	r4, #16
    8504:	f340 82b0 	ble.w	8a68 <_vfiprintf_r+0xf20>
    8508:	9919      	ldr	r1, [sp, #100]	; 0x64
    850a:	ee18 6a10 	vmov	r6, s16
    850e:	2510      	movs	r5, #16
    8510:	e00d      	b.n	852e <_vfiprintf_r+0x9e6>
    8512:	bf00      	nop
    8514:	20000630 	.word	0x20000630
    8518:	20000da4 	.word	0x20000da4
    851c:	20000674 	.word	0x20000674
    8520:	1c88      	adds	r0, r1, #2
    8522:	f109 0908 	add.w	r9, r9, #8
    8526:	4611      	mov	r1, r2
    8528:	3c10      	subs	r4, #16
    852a:	2c10      	cmp	r4, #16
    852c:	dd1a      	ble.n	8564 <_vfiprintf_r+0xa1c>
    852e:	1c4a      	adds	r2, r1, #1
    8530:	48b3      	ldr	r0, [pc, #716]	; (8800 <_vfiprintf_r+0xcb8>)
    8532:	3310      	adds	r3, #16
    8534:	2a07      	cmp	r2, #7
    8536:	e9c9 0500 	strd	r0, r5, [r9]
    853a:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    853e:	ddef      	ble.n	8520 <_vfiprintf_r+0x9d8>
    8540:	aa18      	add	r2, sp, #96	; 0x60
    8542:	b333      	cbz	r3, 8592 <_vfiprintf_r+0xa4a>
    8544:	4631      	mov	r1, r6
    8546:	4658      	mov	r0, fp
    8548:	f7ff fac2 	bl	7ad0 <__sprint_r.part.0>
    854c:	2800      	cmp	r0, #0
    854e:	f47f acd2 	bne.w	7ef6 <_vfiprintf_r+0x3ae>
    8552:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
    8556:	3c10      	subs	r4, #16
    8558:	2c10      	cmp	r4, #16
    855a:	f101 0001 	add.w	r0, r1, #1
    855e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8562:	dce4      	bgt.n	852e <_vfiprintf_r+0x9e6>
    8564:	4aa6      	ldr	r2, [pc, #664]	; (8800 <_vfiprintf_r+0xcb8>)
    8566:	f8c9 4004 	str.w	r4, [r9, #4]
    856a:	4423      	add	r3, r4
    856c:	2807      	cmp	r0, #7
    856e:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
    8572:	f8c9 2000 	str.w	r2, [r9]
    8576:	f77f ad59 	ble.w	802c <_vfiprintf_r+0x4e4>
    857a:	b17b      	cbz	r3, 859c <_vfiprintf_r+0xa54>
    857c:	ee18 1a10 	vmov	r1, s16
    8580:	aa18      	add	r2, sp, #96	; 0x60
    8582:	4658      	mov	r0, fp
    8584:	f7ff faa4 	bl	7ad0 <__sprint_r.part.0>
    8588:	2800      	cmp	r0, #0
    858a:	f47f acb4 	bne.w	7ef6 <_vfiprintf_r+0x3ae>
    858e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    8590:	e54c      	b.n	802c <_vfiprintf_r+0x4e4>
    8592:	2001      	movs	r0, #1
    8594:	4619      	mov	r1, r3
    8596:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    859a:	e7c5      	b.n	8528 <_vfiprintf_r+0x9e0>
    859c:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
    85a0:	9903      	ldr	r1, [sp, #12]
    85a2:	428a      	cmp	r2, r1
    85a4:	bfac      	ite	ge
    85a6:	189b      	addge	r3, r3, r2
    85a8:	185b      	addlt	r3, r3, r1
    85aa:	9305      	str	r3, [sp, #20]
    85ac:	e549      	b.n	8042 <_vfiprintf_r+0x4fa>
    85ae:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
    85b2:	058f      	lsls	r7, r1, #22
    85b4:	ee18 3a10 	vmov	r3, s16
    85b8:	b28a      	uxth	r2, r1
    85ba:	f53f aae8 	bmi.w	7b8e <_vfiprintf_r+0x46>
    85be:	ee18 5a10 	vmov	r5, s16
    85c2:	6d98      	ldr	r0, [r3, #88]	; 0x58
    85c4:	f7fb fbd0 	bl	3d68 <__retarget_lock_acquire_recursive>
    85c8:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
    85cc:	b28a      	uxth	r2, r1
    85ce:	f7ff bade 	b.w	7b8e <_vfiprintf_r+0x46>
    85d2:	2b00      	cmp	r3, #0
    85d4:	f43f ae79 	beq.w	82ca <_vfiprintf_r+0x782>
    85d8:	ee18 1a10 	vmov	r1, s16
    85dc:	aa18      	add	r2, sp, #96	; 0x60
    85de:	4658      	mov	r0, fp
    85e0:	f7ff fa76 	bl	7ad0 <__sprint_r.part.0>
    85e4:	2800      	cmp	r0, #0
    85e6:	f47f ac86 	bne.w	7ef6 <_vfiprintf_r+0x3ae>
    85ea:	9919      	ldr	r1, [sp, #100]	; 0x64
    85ec:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    85ee:	3101      	adds	r1, #1
    85f0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    85f4:	e4f8      	b.n	7fe8 <_vfiprintf_r+0x4a0>
    85f6:	9219      	str	r2, [sp, #100]	; 0x64
    85f8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    85fc:	e45e      	b.n	7ebc <_vfiprintf_r+0x374>
    85fe:	2f00      	cmp	r7, #0
    8600:	f47f abc3 	bne.w	7d8a <_vfiprintf_r+0x242>
    8604:	9e03      	ldr	r6, [sp, #12]
    8606:	2700      	movs	r7, #0
    8608:	9704      	str	r7, [sp, #16]
    860a:	ac44      	add	r4, sp, #272	; 0x110
    860c:	f7ff bbc5 	b.w	7d9a <_vfiprintf_r+0x252>
    8610:	9b03      	ldr	r3, [sp, #12]
    8612:	f013 0310 	ands.w	r3, r3, #16
    8616:	d154      	bne.n	86c2 <_vfiprintf_r+0xb7a>
    8618:	9a03      	ldr	r2, [sp, #12]
    861a:	f012 0040 	ands.w	r0, r2, #64	; 0x40
    861e:	f000 816b 	beq.w	88f8 <_vfiprintf_r+0xdb0>
    8622:	9907      	ldr	r1, [sp, #28]
    8624:	461a      	mov	r2, r3
    8626:	f851 3b04 	ldr.w	r3, [r1], #4
    862a:	9107      	str	r1, [sp, #28]
    862c:	b29b      	uxth	r3, r3
    862e:	2101      	movs	r1, #1
    8630:	e401      	b.n	7e36 <_vfiprintf_r+0x2ee>
    8632:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8634:	2a00      	cmp	r2, #0
    8636:	d164      	bne.n	8702 <_vfiprintf_r+0xbba>
    8638:	4618      	mov	r0, r3
    863a:	2101      	movs	r1, #1
    863c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8640:	e4c9      	b.n	7fd6 <_vfiprintf_r+0x48e>
    8642:	2101      	movs	r1, #1
    8644:	4618      	mov	r0, r3
    8646:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    864a:	e4c4      	b.n	7fd6 <_vfiprintf_r+0x48e>
    864c:	425b      	negs	r3, r3
    864e:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
    8652:	9603      	str	r6, [sp, #12]
    8654:	202d      	movs	r0, #45	; 0x2d
    8656:	2101      	movs	r1, #1
    8658:	f7ff bbee 	b.w	7e38 <_vfiprintf_r+0x2f0>
    865c:	2b00      	cmp	r3, #0
    865e:	f000 8088 	beq.w	8772 <_vfiprintf_r+0xc2a>
    8662:	ee18 1a10 	vmov	r1, s16
    8666:	aa18      	add	r2, sp, #96	; 0x60
    8668:	4658      	mov	r0, fp
    866a:	f7ff fa31 	bl	7ad0 <__sprint_r.part.0>
    866e:	2800      	cmp	r0, #0
    8670:	f47f ac41 	bne.w	7ef6 <_vfiprintf_r+0x3ae>
    8674:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    8678:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    867c:	1c41      	adds	r1, r0, #1
    867e:	e477      	b.n	7f70 <_vfiprintf_r+0x428>
    8680:	f898 1000 	ldrb.w	r1, [r8]
    8684:	9307      	str	r3, [sp, #28]
    8686:	f7ff bad2 	b.w	7c2e <_vfiprintf_r+0xe6>
    868a:	ac44      	add	r4, sp, #272	; 0x110
    868c:	f7ff bb85 	b.w	7d9a <_vfiprintf_r+0x252>
    8690:	f109 0908 	add.w	r9, r9, #8
    8694:	f10c 0101 	add.w	r1, ip, #1
    8698:	4660      	mov	r0, ip
    869a:	e4a0      	b.n	7fde <_vfiprintf_r+0x496>
    869c:	f416 7200 	ands.w	r2, r6, #512	; 0x200
    86a0:	f040 8197 	bne.w	89d2 <_vfiprintf_r+0xe8a>
    86a4:	f851 3b04 	ldr.w	r3, [r1], #4
    86a8:	9107      	str	r1, [sp, #28]
    86aa:	f7ff bbc0 	b.w	7e2e <_vfiprintf_r+0x2e6>
    86ae:	05b3      	lsls	r3, r6, #22
    86b0:	f100 8188 	bmi.w	89c4 <_vfiprintf_r+0xe7c>
    86b4:	f852 3b04 	ldr.w	r3, [r2], #4
    86b8:	9207      	str	r2, [sp, #28]
    86ba:	17da      	asrs	r2, r3, #31
    86bc:	4611      	mov	r1, r2
    86be:	f7ff bb52 	b.w	7d66 <_vfiprintf_r+0x21e>
    86c2:	9907      	ldr	r1, [sp, #28]
    86c4:	f851 3b04 	ldr.w	r3, [r1], #4
    86c8:	9107      	str	r1, [sp, #28]
    86ca:	2101      	movs	r1, #1
    86cc:	f7ff bbb3 	b.w	7e36 <_vfiprintf_r+0x2ee>
    86d0:	9b07      	ldr	r3, [sp, #28]
    86d2:	9805      	ldr	r0, [sp, #20]
    86d4:	f853 1b04 	ldr.w	r1, [r3], #4
    86d8:	9307      	str	r3, [sp, #28]
    86da:	17c2      	asrs	r2, r0, #31
    86dc:	e9c1 0200 	strd	r0, r2, [r1]
    86e0:	f7ff ba7d 	b.w	7bde <_vfiprintf_r+0x96>
    86e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    86e6:	2b00      	cmp	r3, #0
    86e8:	f43f ab26 	beq.w	7d38 <_vfiprintf_r+0x1f0>
    86ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    86ee:	781b      	ldrb	r3, [r3, #0]
    86f0:	2b00      	cmp	r3, #0
    86f2:	f43f ab21 	beq.w	7d38 <_vfiprintf_r+0x1f0>
    86f6:	f898 1000 	ldrb.w	r1, [r8]
    86fa:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
    86fe:	f7ff ba96 	b.w	7c2e <_vfiprintf_r+0xe6>
    8702:	2302      	movs	r3, #2
    8704:	aa11      	add	r2, sp, #68	; 0x44
    8706:	931c      	str	r3, [sp, #112]	; 0x70
    8708:	921b      	str	r2, [sp, #108]	; 0x6c
    870a:	2001      	movs	r0, #1
    870c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8710:	e6a2      	b.n	8458 <_vfiprintf_r+0x910>
    8712:	9603      	str	r6, [sp, #12]
    8714:	e571      	b.n	81fa <_vfiprintf_r+0x6b2>
    8716:	4b3b      	ldr	r3, [pc, #236]	; (8804 <_vfiprintf_r+0xcbc>)
    8718:	930c      	str	r3, [sp, #48]	; 0x30
    871a:	f016 0220 	ands.w	r2, r6, #32
    871e:	d059      	beq.n	87d4 <_vfiprintf_r+0xc8c>
    8720:	9b07      	ldr	r3, [sp, #28]
    8722:	3307      	adds	r3, #7
    8724:	f023 0307 	bic.w	r3, r3, #7
    8728:	4618      	mov	r0, r3
    872a:	685a      	ldr	r2, [r3, #4]
    872c:	f850 3b08 	ldr.w	r3, [r0], #8
    8730:	9007      	str	r0, [sp, #28]
    8732:	07f4      	lsls	r4, r6, #31
    8734:	d509      	bpl.n	874a <_vfiprintf_r+0xc02>
    8736:	ea53 0002 	orrs.w	r0, r3, r2
    873a:	d006      	beq.n	874a <_vfiprintf_r+0xc02>
    873c:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
    8740:	2130      	movs	r1, #48	; 0x30
    8742:	f046 0602 	orr.w	r6, r6, #2
    8746:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
    874a:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
    874e:	9103      	str	r1, [sp, #12]
    8750:	2102      	movs	r1, #2
    8752:	f7ff bb70 	b.w	7e36 <_vfiprintf_r+0x2ee>
    8756:	4b2c      	ldr	r3, [pc, #176]	; (8808 <_vfiprintf_r+0xcc0>)
    8758:	930c      	str	r3, [sp, #48]	; 0x30
    875a:	e7de      	b.n	871a <_vfiprintf_r+0xbd2>
    875c:	9b07      	ldr	r3, [sp, #28]
    875e:	2101      	movs	r1, #1
    8760:	f853 2b04 	ldr.w	r2, [r3], #4
    8764:	9103      	str	r1, [sp, #12]
    8766:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
    876a:	9307      	str	r3, [sp, #28]
    876c:	9104      	str	r1, [sp, #16]
    876e:	ac2b      	add	r4, sp, #172	; 0xac
    8770:	e4df      	b.n	8132 <_vfiprintf_r+0x5ea>
    8772:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
    8776:	2a00      	cmp	r2, #0
    8778:	f040 8132 	bne.w	89e0 <_vfiprintf_r+0xe98>
    877c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    877e:	2a00      	cmp	r2, #0
    8780:	f47f ae62 	bne.w	8448 <_vfiprintf_r+0x900>
    8784:	4618      	mov	r0, r3
    8786:	2101      	movs	r1, #1
    8788:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    878c:	e427      	b.n	7fde <_vfiprintf_r+0x496>
    878e:	2100      	movs	r1, #0
    8790:	2208      	movs	r2, #8
    8792:	a816      	add	r0, sp, #88	; 0x58
    8794:	9413      	str	r4, [sp, #76]	; 0x4c
    8796:	f7fb f971 	bl	3a7c <memset>
    879a:	1c79      	adds	r1, r7, #1
    879c:	f000 80bc 	beq.w	8918 <_vfiprintf_r+0xdd0>
    87a0:	2500      	movs	r5, #0
    87a2:	9407      	str	r4, [sp, #28]
    87a4:	462c      	mov	r4, r5
    87a6:	e00c      	b.n	87c2 <_vfiprintf_r+0xc7a>
    87a8:	a92b      	add	r1, sp, #172	; 0xac
    87aa:	4658      	mov	r0, fp
    87ac:	f7ff f8ca 	bl	7944 <_wcrtomb_r>
    87b0:	1c42      	adds	r2, r0, #1
    87b2:	4420      	add	r0, r4
    87b4:	f000 816b 	beq.w	8a8e <_vfiprintf_r+0xf46>
    87b8:	42b8      	cmp	r0, r7
    87ba:	dc08      	bgt.n	87ce <_vfiprintf_r+0xc86>
    87bc:	f000 8170 	beq.w	8aa0 <_vfiprintf_r+0xf58>
    87c0:	4604      	mov	r4, r0
    87c2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    87c4:	5952      	ldr	r2, [r2, r5]
    87c6:	ab16      	add	r3, sp, #88	; 0x58
    87c8:	3504      	adds	r5, #4
    87ca:	2a00      	cmp	r2, #0
    87cc:	d1ec      	bne.n	87a8 <_vfiprintf_r+0xc60>
    87ce:	9404      	str	r4, [sp, #16]
    87d0:	9c07      	ldr	r4, [sp, #28]
    87d2:	e0af      	b.n	8934 <_vfiprintf_r+0xdec>
    87d4:	f016 0310 	ands.w	r3, r6, #16
    87d8:	9807      	ldr	r0, [sp, #28]
    87da:	d10c      	bne.n	87f6 <_vfiprintf_r+0xcae>
    87dc:	f016 0440 	ands.w	r4, r6, #64	; 0x40
    87e0:	d005      	beq.n	87ee <_vfiprintf_r+0xca6>
    87e2:	461a      	mov	r2, r3
    87e4:	f850 3b04 	ldr.w	r3, [r0], #4
    87e8:	9007      	str	r0, [sp, #28]
    87ea:	b29b      	uxth	r3, r3
    87ec:	e7a1      	b.n	8732 <_vfiprintf_r+0xbea>
    87ee:	f416 7200 	ands.w	r2, r6, #512	; 0x200
    87f2:	f040 80e1 	bne.w	89b8 <_vfiprintf_r+0xe70>
    87f6:	f850 3b04 	ldr.w	r3, [r0], #4
    87fa:	9007      	str	r0, [sp, #28]
    87fc:	e799      	b.n	8732 <_vfiprintf_r+0xbea>
    87fe:	bf00      	nop
    8800:	20000674 	.word	0x20000674
    8804:	20000630 	.word	0x20000630
    8808:	20000644 	.word	0x20000644
    880c:	9903      	ldr	r1, [sp, #12]
    880e:	9704      	str	r7, [sp, #16]
    8810:	ac44      	add	r4, sp, #272	; 0x110
    8812:	469e      	mov	lr, r3
    8814:	ee08 ba90 	vmov	s17, fp
    8818:	f401 6680 	and.w	r6, r1, #1024	; 0x400
    881c:	f04f 0c00 	mov.w	ip, #0
    8820:	4623      	mov	r3, r4
    8822:	e006      	b.n	8832 <_vfiprintf_r+0xcea>
    8824:	f1be 0f0a 	cmp.w	lr, #10
    8828:	f172 0200 	sbcs.w	r2, r2, #0
    882c:	d339      	bcc.n	88a2 <_vfiprintf_r+0xd5a>
    882e:	46a6      	mov	lr, r4
    8830:	462a      	mov	r2, r5
    8832:	49a6      	ldr	r1, [pc, #664]	; (8acc <_vfiprintf_r+0xf84>)
    8834:	eb1e 0002 	adds.w	r0, lr, r2
    8838:	f140 0000 	adc.w	r0, r0, #0
    883c:	460f      	mov	r7, r1
    883e:	fba1 1400 	umull	r1, r4, r1, r0
    8842:	f024 0103 	bic.w	r1, r4, #3
    8846:	eb01 0194 	add.w	r1, r1, r4, lsr #2
    884a:	1a40      	subs	r0, r0, r1
    884c:	ebbe 0100 	subs.w	r1, lr, r0
    8850:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
    8854:	f162 0400 	sbc.w	r4, r2, #0
    8858:	fb05 f501 	mul.w	r5, r5, r1
    885c:	fb07 5504 	mla	r5, r7, r4, r5
    8860:	fba1 4107 	umull	r4, r1, r1, r7
    8864:	440d      	add	r5, r1
    8866:	2705      	movs	r7, #5
    8868:	f004 0101 	and.w	r1, r4, #1
    886c:	fba1 1b07 	umull	r1, fp, r1, r7
    8870:	1809      	adds	r1, r1, r0
    8872:	0864      	lsrs	r4, r4, #1
    8874:	3130      	adds	r1, #48	; 0x30
    8876:	f803 1c01 	strb.w	r1, [r3, #-1]
    887a:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
    887e:	f10c 0c01 	add.w	ip, ip, #1
    8882:	3b01      	subs	r3, #1
    8884:	086d      	lsrs	r5, r5, #1
    8886:	2e00      	cmp	r6, #0
    8888:	d0cc      	beq.n	8824 <_vfiprintf_r+0xcdc>
    888a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    888c:	7809      	ldrb	r1, [r1, #0]
    888e:	4561      	cmp	r1, ip
    8890:	d1c8      	bne.n	8824 <_vfiprintf_r+0xcdc>
    8892:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    8896:	d0c5      	beq.n	8824 <_vfiprintf_r+0xcdc>
    8898:	f1be 0f0a 	cmp.w	lr, #10
    889c:	f172 0200 	sbcs.w	r2, r2, #0
    88a0:	d26c      	bcs.n	897c <_vfiprintf_r+0xe34>
    88a2:	461c      	mov	r4, r3
    88a4:	ab44      	add	r3, sp, #272	; 0x110
    88a6:	1b1b      	subs	r3, r3, r4
    88a8:	9f04      	ldr	r7, [sp, #16]
    88aa:	9e03      	ldr	r6, [sp, #12]
    88ac:	9304      	str	r3, [sp, #16]
    88ae:	ee18 ba90 	vmov	fp, s17
    88b2:	f7ff ba72 	b.w	7d9a <_vfiprintf_r+0x252>
    88b6:	9603      	str	r6, [sp, #12]
    88b8:	f7ff ba62 	b.w	7d80 <_vfiprintf_r+0x238>
    88bc:	4658      	mov	r0, fp
    88be:	f7fa ff67 	bl	3790 <__sinit>
    88c2:	f7ff b95b 	b.w	7b7c <_vfiprintf_r+0x34>
    88c6:	2901      	cmp	r1, #1
    88c8:	9603      	str	r6, [sp, #12]
    88ca:	f47f accd 	bne.w	8268 <_vfiprintf_r+0x720>
    88ce:	f7ff ba5c 	b.w	7d8a <_vfiprintf_r+0x242>
    88d2:	9b07      	ldr	r3, [sp, #28]
    88d4:	9905      	ldr	r1, [sp, #20]
    88d6:	f853 2b04 	ldr.w	r2, [r3], #4
    88da:	6011      	str	r1, [r2, #0]
    88dc:	9307      	str	r3, [sp, #28]
    88de:	f7ff b97e 	b.w	7bde <_vfiprintf_r+0x96>
    88e2:	2f06      	cmp	r7, #6
    88e4:	463b      	mov	r3, r7
    88e6:	9a03      	ldr	r2, [sp, #12]
    88e8:	4c79      	ldr	r4, [pc, #484]	; (8ad0 <_vfiprintf_r+0xf88>)
    88ea:	9207      	str	r2, [sp, #28]
    88ec:	bf28      	it	cs
    88ee:	2306      	movcs	r3, #6
    88f0:	9304      	str	r3, [sp, #16]
    88f2:	9303      	str	r3, [sp, #12]
    88f4:	f7ff bb25 	b.w	7f42 <_vfiprintf_r+0x3fa>
    88f8:	9b03      	ldr	r3, [sp, #12]
    88fa:	9907      	ldr	r1, [sp, #28]
    88fc:	f413 7200 	ands.w	r2, r3, #512	; 0x200
    8900:	bf14      	ite	ne
    8902:	f851 3b04 	ldrne.w	r3, [r1], #4
    8906:	f851 3b04 	ldreq.w	r3, [r1], #4
    890a:	9107      	str	r1, [sp, #28]
    890c:	bf1c      	itt	ne
    890e:	4602      	movne	r2, r0
    8910:	b2db      	uxtbne	r3, r3
    8912:	2101      	movs	r1, #1
    8914:	f7ff ba8f 	b.w	7e36 <_vfiprintf_r+0x2ee>
    8918:	ab16      	add	r3, sp, #88	; 0x58
    891a:	9300      	str	r3, [sp, #0]
    891c:	2300      	movs	r3, #0
    891e:	4619      	mov	r1, r3
    8920:	aa13      	add	r2, sp, #76	; 0x4c
    8922:	4658      	mov	r0, fp
    8924:	f7ff f834 	bl	7990 <_wcsrtombs_r>
    8928:	4603      	mov	r3, r0
    892a:	3301      	adds	r3, #1
    892c:	9004      	str	r0, [sp, #16]
    892e:	f000 80ae 	beq.w	8a8e <_vfiprintf_r+0xf46>
    8932:	9413      	str	r4, [sp, #76]	; 0x4c
    8934:	9b04      	ldr	r3, [sp, #16]
    8936:	2b00      	cmp	r3, #0
    8938:	d030      	beq.n	899c <_vfiprintf_r+0xe54>
    893a:	2b63      	cmp	r3, #99	; 0x63
    893c:	dc63      	bgt.n	8a06 <_vfiprintf_r+0xebe>
    893e:	2300      	movs	r3, #0
    8940:	9308      	str	r3, [sp, #32]
    8942:	ac2b      	add	r4, sp, #172	; 0xac
    8944:	2208      	movs	r2, #8
    8946:	2100      	movs	r1, #0
    8948:	a816      	add	r0, sp, #88	; 0x58
    894a:	f7fb f897 	bl	3a7c <memset>
    894e:	9d04      	ldr	r5, [sp, #16]
    8950:	ab16      	add	r3, sp, #88	; 0x58
    8952:	9300      	str	r3, [sp, #0]
    8954:	aa13      	add	r2, sp, #76	; 0x4c
    8956:	462b      	mov	r3, r5
    8958:	4621      	mov	r1, r4
    895a:	4658      	mov	r0, fp
    895c:	f7ff f818 	bl	7990 <_wcsrtombs_r>
    8960:	4285      	cmp	r5, r0
    8962:	f040 80ab 	bne.w	8abc <_vfiprintf_r+0xf74>
    8966:	9b03      	ldr	r3, [sp, #12]
    8968:	9a04      	ldr	r2, [sp, #16]
    896a:	9307      	str	r3, [sp, #28]
    896c:	2300      	movs	r3, #0
    896e:	54a3      	strb	r3, [r4, r2]
    8970:	461f      	mov	r7, r3
    8972:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    8976:	9303      	str	r3, [sp, #12]
    8978:	f7ff ba16 	b.w	7da8 <_vfiprintf_r+0x260>
    897c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    897e:	990d      	ldr	r1, [sp, #52]	; 0x34
    8980:	1a9b      	subs	r3, r3, r2
    8982:	4618      	mov	r0, r3
    8984:	9308      	str	r3, [sp, #32]
    8986:	f7fb f923 	bl	3bd0 <strncpy>
    898a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    898c:	9b08      	ldr	r3, [sp, #32]
    898e:	784a      	ldrb	r2, [r1, #1]
    8990:	b10a      	cbz	r2, 8996 <_vfiprintf_r+0xe4e>
    8992:	3101      	adds	r1, #1
    8994:	910b      	str	r1, [sp, #44]	; 0x2c
    8996:	f04f 0c00 	mov.w	ip, #0
    899a:	e748      	b.n	882e <_vfiprintf_r+0xce6>
    899c:	9b03      	ldr	r3, [sp, #12]
    899e:	9307      	str	r3, [sp, #28]
    89a0:	9b04      	ldr	r3, [sp, #16]
    89a2:	9303      	str	r3, [sp, #12]
    89a4:	461f      	mov	r7, r3
    89a6:	9308      	str	r3, [sp, #32]
    89a8:	f7ff b9fe 	b.w	7da8 <_vfiprintf_r+0x260>
    89ac:	2101      	movs	r1, #1
    89ae:	4618      	mov	r0, r3
    89b0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    89b4:	f7ff bb13 	b.w	7fde <_vfiprintf_r+0x496>
    89b8:	f850 3b04 	ldr.w	r3, [r0], #4
    89bc:	9007      	str	r0, [sp, #28]
    89be:	4622      	mov	r2, r4
    89c0:	b2db      	uxtb	r3, r3
    89c2:	e6b6      	b.n	8732 <_vfiprintf_r+0xbea>
    89c4:	f912 3b04 	ldrsb.w	r3, [r2], #4
    89c8:	9207      	str	r2, [sp, #28]
    89ca:	17da      	asrs	r2, r3, #31
    89cc:	4611      	mov	r1, r2
    89ce:	f7ff b9ca 	b.w	7d66 <_vfiprintf_r+0x21e>
    89d2:	f851 3b04 	ldr.w	r3, [r1], #4
    89d6:	9107      	str	r1, [sp, #28]
    89d8:	4602      	mov	r2, r0
    89da:	b2db      	uxtb	r3, r3
    89dc:	f7ff ba27 	b.w	7e2e <_vfiprintf_r+0x2e6>
    89e0:	2301      	movs	r3, #1
    89e2:	931c      	str	r3, [sp, #112]	; 0x70
    89e4:	2101      	movs	r1, #1
    89e6:	f10d 0343 	add.w	r3, sp, #67	; 0x43
    89ea:	931b      	str	r3, [sp, #108]	; 0x6c
    89ec:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    89f0:	460b      	mov	r3, r1
    89f2:	f7ff bacd 	b.w	7f90 <_vfiprintf_r+0x448>
    89f6:	9b07      	ldr	r3, [sp, #28]
    89f8:	9905      	ldr	r1, [sp, #20]
    89fa:	f853 2b04 	ldr.w	r2, [r3], #4
    89fe:	9307      	str	r3, [sp, #28]
    8a00:	8011      	strh	r1, [r2, #0]
    8a02:	f7ff b8ec 	b.w	7bde <_vfiprintf_r+0x96>
    8a06:	1c59      	adds	r1, r3, #1
    8a08:	4658      	mov	r0, fp
    8a0a:	f7fa f983 	bl	2d14 <_malloc_r>
    8a0e:	4604      	mov	r4, r0
    8a10:	2800      	cmp	r0, #0
    8a12:	d03c      	beq.n	8a8e <_vfiprintf_r+0xf46>
    8a14:	9008      	str	r0, [sp, #32]
    8a16:	e795      	b.n	8944 <_vfiprintf_r+0xdfc>
    8a18:	6d88      	ldr	r0, [r1, #88]	; 0x58
    8a1a:	f7fb f9a7 	bl	3d6c <__retarget_lock_release_recursive>
    8a1e:	f7ff b9e9 	b.w	7df4 <_vfiprintf_r+0x2ac>
    8a22:	9b03      	ldr	r3, [sp, #12]
    8a24:	9307      	str	r3, [sp, #28]
    8a26:	e9cd 7703 	strd	r7, r7, [sp, #12]
    8a2a:	9f08      	ldr	r7, [sp, #32]
    8a2c:	f7ff b9bc 	b.w	7da8 <_vfiprintf_r+0x260>
    8a30:	9819      	ldr	r0, [sp, #100]	; 0x64
    8a32:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    8a34:	3001      	adds	r0, #1
    8a36:	e545      	b.n	84c4 <_vfiprintf_r+0x97c>
    8a38:	9b03      	ldr	r3, [sp, #12]
    8a3a:	9307      	str	r3, [sp, #28]
    8a3c:	4620      	mov	r0, r4
    8a3e:	f7fb fb1f 	bl	4080 <strlen>
    8a42:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
    8a46:	462f      	mov	r7, r5
    8a48:	9004      	str	r0, [sp, #16]
    8a4a:	9303      	str	r3, [sp, #12]
    8a4c:	9508      	str	r5, [sp, #32]
    8a4e:	f7ff b9ab 	b.w	7da8 <_vfiprintf_r+0x260>
    8a52:	ee18 1a10 	vmov	r1, s16
    8a56:	aa18      	add	r2, sp, #96	; 0x60
    8a58:	4658      	mov	r0, fp
    8a5a:	f7ff f839 	bl	7ad0 <__sprint_r.part.0>
    8a5e:	2800      	cmp	r0, #0
    8a60:	f43f aa36 	beq.w	7ed0 <_vfiprintf_r+0x388>
    8a64:	f7ff ba4d 	b.w	7f02 <_vfiprintf_r+0x3ba>
    8a68:	9819      	ldr	r0, [sp, #100]	; 0x64
    8a6a:	3001      	adds	r0, #1
    8a6c:	e57a      	b.n	8564 <_vfiprintf_r+0xa1c>
    8a6e:	468c      	mov	ip, r1
    8a70:	e46e      	b.n	8350 <_vfiprintf_r+0x808>
    8a72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    8a74:	07d9      	lsls	r1, r3, #31
    8a76:	d405      	bmi.n	8a84 <_vfiprintf_r+0xf3c>
    8a78:	89ab      	ldrh	r3, [r5, #12]
    8a7a:	059a      	lsls	r2, r3, #22
    8a7c:	d402      	bmi.n	8a84 <_vfiprintf_r+0xf3c>
    8a7e:	6da8      	ldr	r0, [r5, #88]	; 0x58
    8a80:	f7fb f974 	bl	3d6c <__retarget_lock_release_recursive>
    8a84:	f04f 33ff 	mov.w	r3, #4294967295
    8a88:	9305      	str	r3, [sp, #20]
    8a8a:	f7ff ba49 	b.w	7f20 <_vfiprintf_r+0x3d8>
    8a8e:	ee18 2a10 	vmov	r2, s16
    8a92:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    8a96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8a9a:	8193      	strh	r3, [r2, #12]
    8a9c:	f7ff ba35 	b.w	7f0a <_vfiprintf_r+0x3c2>
    8aa0:	9c07      	ldr	r4, [sp, #28]
    8aa2:	9704      	str	r7, [sp, #16]
    8aa4:	e746      	b.n	8934 <_vfiprintf_r+0xdec>
    8aa6:	9b07      	ldr	r3, [sp, #28]
    8aa8:	f898 1001 	ldrb.w	r1, [r8, #1]
    8aac:	f853 7b04 	ldr.w	r7, [r3], #4
    8ab0:	9307      	str	r3, [sp, #28]
    8ab2:	4690      	mov	r8, r2
    8ab4:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
    8ab8:	f7ff b8b9 	b.w	7c2e <_vfiprintf_r+0xe6>
    8abc:	ee18 2a10 	vmov	r2, s16
    8ac0:	8993      	ldrh	r3, [r2, #12]
    8ac2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8ac6:	8193      	strh	r3, [r2, #12]
    8ac8:	f7ff ba15 	b.w	7ef6 <_vfiprintf_r+0x3ae>
    8acc:	cccccccd 	.word	0xcccccccd
    8ad0:	20000658 	.word	0x20000658

00008ad4 <__sbprintf>:
    8ad4:	b570      	push	{r4, r5, r6, lr}
    8ad6:	460c      	mov	r4, r1
    8ad8:	8989      	ldrh	r1, [r1, #12]
    8ada:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
    8ade:	f021 0102 	bic.w	r1, r1, #2
    8ae2:	f8ad 1014 	strh.w	r1, [sp, #20]
    8ae6:	6e61      	ldr	r1, [r4, #100]	; 0x64
    8ae8:	911b      	str	r1, [sp, #108]	; 0x6c
    8aea:	89e1      	ldrh	r1, [r4, #14]
    8aec:	f8ad 1016 	strh.w	r1, [sp, #22]
    8af0:	69e1      	ldr	r1, [r4, #28]
    8af2:	9109      	str	r1, [sp, #36]	; 0x24
    8af4:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8af6:	910b      	str	r1, [sp, #44]	; 0x2c
    8af8:	a91c      	add	r1, sp, #112	; 0x70
    8afa:	9102      	str	r1, [sp, #8]
    8afc:	9106      	str	r1, [sp, #24]
    8afe:	f44f 6180 	mov.w	r1, #1024	; 0x400
    8b02:	4606      	mov	r6, r0
    8b04:	9104      	str	r1, [sp, #16]
    8b06:	9107      	str	r1, [sp, #28]
    8b08:	a818      	add	r0, sp, #96	; 0x60
    8b0a:	2100      	movs	r1, #0
    8b0c:	e9cd 3200 	strd	r3, r2, [sp]
    8b10:	9108      	str	r1, [sp, #32]
    8b12:	f7fb f925 	bl	3d60 <__retarget_lock_init_recursive>
    8b16:	e9dd 3200 	ldrd	r3, r2, [sp]
    8b1a:	a902      	add	r1, sp, #8
    8b1c:	4630      	mov	r0, r6
    8b1e:	f7ff f813 	bl	7b48 <_vfiprintf_r>
    8b22:	1e05      	subs	r5, r0, #0
    8b24:	db07      	blt.n	8b36 <__sbprintf+0x62>
    8b26:	a902      	add	r1, sp, #8
    8b28:	4630      	mov	r0, r6
    8b2a:	f7fd feeb 	bl	6904 <_fflush_r>
    8b2e:	2800      	cmp	r0, #0
    8b30:	bf18      	it	ne
    8b32:	f04f 35ff 	movne.w	r5, #4294967295
    8b36:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    8b3a:	065b      	lsls	r3, r3, #25
    8b3c:	d503      	bpl.n	8b46 <__sbprintf+0x72>
    8b3e:	89a3      	ldrh	r3, [r4, #12]
    8b40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8b44:	81a3      	strh	r3, [r4, #12]
    8b46:	9818      	ldr	r0, [sp, #96]	; 0x60
    8b48:	f7fb f90c 	bl	3d64 <__retarget_lock_close_recursive>
    8b4c:	4628      	mov	r0, r5
    8b4e:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
    8b52:	bd70      	pop	{r4, r5, r6, pc}

00008b54 <__sfvwrite_r>:
    8b54:	6893      	ldr	r3, [r2, #8]
    8b56:	2b00      	cmp	r3, #0
    8b58:	f000 8085 	beq.w	8c66 <__sfvwrite_r+0x112>
    8b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8b60:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
    8b64:	460c      	mov	r4, r1
    8b66:	0719      	lsls	r1, r3, #28
    8b68:	4680      	mov	r8, r0
    8b6a:	b083      	sub	sp, #12
    8b6c:	4617      	mov	r7, r2
    8b6e:	b298      	uxth	r0, r3
    8b70:	d525      	bpl.n	8bbe <__sfvwrite_r+0x6a>
    8b72:	6923      	ldr	r3, [r4, #16]
    8b74:	b31b      	cbz	r3, 8bbe <__sfvwrite_r+0x6a>
    8b76:	f010 0302 	ands.w	r3, r0, #2
    8b7a:	683d      	ldr	r5, [r7, #0]
    8b7c:	d02d      	beq.n	8bda <__sfvwrite_r+0x86>
    8b7e:	f04f 0a00 	mov.w	sl, #0
    8b82:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 8e44 <__sfvwrite_r+0x2f0>
    8b86:	4656      	mov	r6, sl
    8b88:	46b9      	mov	r9, r7
    8b8a:	455e      	cmp	r6, fp
    8b8c:	4633      	mov	r3, r6
    8b8e:	4652      	mov	r2, sl
    8b90:	bf28      	it	cs
    8b92:	465b      	movcs	r3, fp
    8b94:	4640      	mov	r0, r8
    8b96:	2e00      	cmp	r6, #0
    8b98:	d052      	beq.n	8c40 <__sfvwrite_r+0xec>
    8b9a:	69e1      	ldr	r1, [r4, #28]
    8b9c:	6a67      	ldr	r7, [r4, #36]	; 0x24
    8b9e:	47b8      	blx	r7
    8ba0:	2800      	cmp	r0, #0
    8ba2:	dd56      	ble.n	8c52 <__sfvwrite_r+0xfe>
    8ba4:	f8d9 3008 	ldr.w	r3, [r9, #8]
    8ba8:	1a1b      	subs	r3, r3, r0
    8baa:	4482      	add	sl, r0
    8bac:	1a36      	subs	r6, r6, r0
    8bae:	f8c9 3008 	str.w	r3, [r9, #8]
    8bb2:	2b00      	cmp	r3, #0
    8bb4:	d1e9      	bne.n	8b8a <__sfvwrite_r+0x36>
    8bb6:	2000      	movs	r0, #0
    8bb8:	b003      	add	sp, #12
    8bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8bbe:	4621      	mov	r1, r4
    8bc0:	4640      	mov	r0, r8
    8bc2:	f000 f941 	bl	8e48 <__swsetup_r>
    8bc6:	2800      	cmp	r0, #0
    8bc8:	f040 8138 	bne.w	8e3c <__sfvwrite_r+0x2e8>
    8bcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    8bd0:	683d      	ldr	r5, [r7, #0]
    8bd2:	b298      	uxth	r0, r3
    8bd4:	f010 0302 	ands.w	r3, r0, #2
    8bd8:	d1d1      	bne.n	8b7e <__sfvwrite_r+0x2a>
    8bda:	f010 0901 	ands.w	r9, r0, #1
    8bde:	d144      	bne.n	8c6a <__sfvwrite_r+0x116>
    8be0:	464e      	mov	r6, r9
    8be2:	9700      	str	r7, [sp, #0]
    8be4:	b346      	cbz	r6, 8c38 <__sfvwrite_r+0xe4>
    8be6:	0582      	lsls	r2, r0, #22
    8be8:	f8d4 b008 	ldr.w	fp, [r4, #8]
    8bec:	f140 8085 	bpl.w	8cfa <__sfvwrite_r+0x1a6>
    8bf0:	45b3      	cmp	fp, r6
    8bf2:	465a      	mov	r2, fp
    8bf4:	f200 80b4 	bhi.w	8d60 <__sfvwrite_r+0x20c>
    8bf8:	f410 6f90 	tst.w	r0, #1152	; 0x480
    8bfc:	f040 80c1 	bne.w	8d82 <__sfvwrite_r+0x22e>
    8c00:	6820      	ldr	r0, [r4, #0]
    8c02:	9201      	str	r2, [sp, #4]
    8c04:	4649      	mov	r1, r9
    8c06:	f7fa febd 	bl	3984 <memmove>
    8c0a:	68a3      	ldr	r3, [r4, #8]
    8c0c:	9a01      	ldr	r2, [sp, #4]
    8c0e:	eba3 010b 	sub.w	r1, r3, fp
    8c12:	6823      	ldr	r3, [r4, #0]
    8c14:	60a1      	str	r1, [r4, #8]
    8c16:	4413      	add	r3, r2
    8c18:	46b2      	mov	sl, r6
    8c1a:	6023      	str	r3, [r4, #0]
    8c1c:	2600      	movs	r6, #0
    8c1e:	9a00      	ldr	r2, [sp, #0]
    8c20:	6893      	ldr	r3, [r2, #8]
    8c22:	eba3 030a 	sub.w	r3, r3, sl
    8c26:	44d1      	add	r9, sl
    8c28:	6093      	str	r3, [r2, #8]
    8c2a:	2b00      	cmp	r3, #0
    8c2c:	d0c3      	beq.n	8bb6 <__sfvwrite_r+0x62>
    8c2e:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
    8c32:	b280      	uxth	r0, r0
    8c34:	2e00      	cmp	r6, #0
    8c36:	d1d6      	bne.n	8be6 <__sfvwrite_r+0x92>
    8c38:	e9d5 9600 	ldrd	r9, r6, [r5]
    8c3c:	3508      	adds	r5, #8
    8c3e:	e7d1      	b.n	8be4 <__sfvwrite_r+0x90>
    8c40:	e9d5 a600 	ldrd	sl, r6, [r5]
    8c44:	3508      	adds	r5, #8
    8c46:	e7a0      	b.n	8b8a <__sfvwrite_r+0x36>
    8c48:	4621      	mov	r1, r4
    8c4a:	4640      	mov	r0, r8
    8c4c:	f7fd fe5a 	bl	6904 <_fflush_r>
    8c50:	b388      	cbz	r0, 8cb6 <__sfvwrite_r+0x162>
    8c52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    8c56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8c5a:	f04f 30ff 	mov.w	r0, #4294967295
    8c5e:	81a3      	strh	r3, [r4, #12]
    8c60:	b003      	add	sp, #12
    8c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8c66:	2000      	movs	r0, #0
    8c68:	4770      	bx	lr
    8c6a:	461e      	mov	r6, r3
    8c6c:	46ba      	mov	sl, r7
    8c6e:	4699      	mov	r9, r3
    8c70:	4618      	mov	r0, r3
    8c72:	9500      	str	r5, [sp, #0]
    8c74:	461f      	mov	r7, r3
    8c76:	b366      	cbz	r6, 8cd2 <__sfvwrite_r+0x17e>
    8c78:	2800      	cmp	r0, #0
    8c7a:	d032      	beq.n	8ce2 <__sfvwrite_r+0x18e>
    8c7c:	464a      	mov	r2, r9
    8c7e:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
    8c82:	6820      	ldr	r0, [r4, #0]
    8c84:	68a5      	ldr	r5, [r4, #8]
    8c86:	42b2      	cmp	r2, r6
    8c88:	bf28      	it	cs
    8c8a:	4632      	movcs	r2, r6
    8c8c:	4288      	cmp	r0, r1
    8c8e:	d904      	bls.n	8c9a <__sfvwrite_r+0x146>
    8c90:	eb05 0b03 	add.w	fp, r5, r3
    8c94:	455a      	cmp	r2, fp
    8c96:	f300 80a7 	bgt.w	8de8 <__sfvwrite_r+0x294>
    8c9a:	4293      	cmp	r3, r2
    8c9c:	dc64      	bgt.n	8d68 <__sfvwrite_r+0x214>
    8c9e:	69e1      	ldr	r1, [r4, #28]
    8ca0:	6a65      	ldr	r5, [r4, #36]	; 0x24
    8ca2:	463a      	mov	r2, r7
    8ca4:	4640      	mov	r0, r8
    8ca6:	47a8      	blx	r5
    8ca8:	f1b0 0b00 	subs.w	fp, r0, #0
    8cac:	ddd1      	ble.n	8c52 <__sfvwrite_r+0xfe>
    8cae:	ebb9 090b 	subs.w	r9, r9, fp
    8cb2:	d0c9      	beq.n	8c48 <__sfvwrite_r+0xf4>
    8cb4:	2001      	movs	r0, #1
    8cb6:	f8da 3008 	ldr.w	r3, [sl, #8]
    8cba:	eba3 030b 	sub.w	r3, r3, fp
    8cbe:	445f      	add	r7, fp
    8cc0:	eba6 060b 	sub.w	r6, r6, fp
    8cc4:	f8ca 3008 	str.w	r3, [sl, #8]
    8cc8:	2b00      	cmp	r3, #0
    8cca:	f43f af74 	beq.w	8bb6 <__sfvwrite_r+0x62>
    8cce:	2e00      	cmp	r6, #0
    8cd0:	d1d2      	bne.n	8c78 <__sfvwrite_r+0x124>
    8cd2:	9a00      	ldr	r2, [sp, #0]
    8cd4:	6856      	ldr	r6, [r2, #4]
    8cd6:	4613      	mov	r3, r2
    8cd8:	3208      	adds	r2, #8
    8cda:	9200      	str	r2, [sp, #0]
    8cdc:	2e00      	cmp	r6, #0
    8cde:	d0f8      	beq.n	8cd2 <__sfvwrite_r+0x17e>
    8ce0:	681f      	ldr	r7, [r3, #0]
    8ce2:	4632      	mov	r2, r6
    8ce4:	210a      	movs	r1, #10
    8ce6:	4638      	mov	r0, r7
    8ce8:	f7fd fe3a 	bl	6960 <memchr>
    8cec:	2800      	cmp	r0, #0
    8cee:	f000 809c 	beq.w	8e2a <__sfvwrite_r+0x2d6>
    8cf2:	3001      	adds	r0, #1
    8cf4:	eba0 0907 	sub.w	r9, r0, r7
    8cf8:	e7c0      	b.n	8c7c <__sfvwrite_r+0x128>
    8cfa:	6820      	ldr	r0, [r4, #0]
    8cfc:	6923      	ldr	r3, [r4, #16]
    8cfe:	4298      	cmp	r0, r3
    8d00:	d816      	bhi.n	8d30 <__sfvwrite_r+0x1dc>
    8d02:	6962      	ldr	r2, [r4, #20]
    8d04:	42b2      	cmp	r2, r6
    8d06:	d813      	bhi.n	8d30 <__sfvwrite_r+0x1dc>
    8d08:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    8d0c:	42b3      	cmp	r3, r6
    8d0e:	bf28      	it	cs
    8d10:	4633      	movcs	r3, r6
    8d12:	69e1      	ldr	r1, [r4, #28]
    8d14:	fb93 f3f2 	sdiv	r3, r3, r2
    8d18:	6a67      	ldr	r7, [r4, #36]	; 0x24
    8d1a:	fb02 f303 	mul.w	r3, r2, r3
    8d1e:	4640      	mov	r0, r8
    8d20:	464a      	mov	r2, r9
    8d22:	47b8      	blx	r7
    8d24:	f1b0 0a00 	subs.w	sl, r0, #0
    8d28:	dd93      	ble.n	8c52 <__sfvwrite_r+0xfe>
    8d2a:	eba6 060a 	sub.w	r6, r6, sl
    8d2e:	e776      	b.n	8c1e <__sfvwrite_r+0xca>
    8d30:	45b3      	cmp	fp, r6
    8d32:	46da      	mov	sl, fp
    8d34:	bf28      	it	cs
    8d36:	46b2      	movcs	sl, r6
    8d38:	4652      	mov	r2, sl
    8d3a:	4649      	mov	r1, r9
    8d3c:	f7fa fe22 	bl	3984 <memmove>
    8d40:	68a3      	ldr	r3, [r4, #8]
    8d42:	6822      	ldr	r2, [r4, #0]
    8d44:	eba3 030a 	sub.w	r3, r3, sl
    8d48:	4452      	add	r2, sl
    8d4a:	60a3      	str	r3, [r4, #8]
    8d4c:	6022      	str	r2, [r4, #0]
    8d4e:	2b00      	cmp	r3, #0
    8d50:	d1eb      	bne.n	8d2a <__sfvwrite_r+0x1d6>
    8d52:	4621      	mov	r1, r4
    8d54:	4640      	mov	r0, r8
    8d56:	f7fd fdd5 	bl	6904 <_fflush_r>
    8d5a:	2800      	cmp	r0, #0
    8d5c:	d0e5      	beq.n	8d2a <__sfvwrite_r+0x1d6>
    8d5e:	e778      	b.n	8c52 <__sfvwrite_r+0xfe>
    8d60:	6820      	ldr	r0, [r4, #0]
    8d62:	46b3      	mov	fp, r6
    8d64:	4632      	mov	r2, r6
    8d66:	e74c      	b.n	8c02 <__sfvwrite_r+0xae>
    8d68:	4639      	mov	r1, r7
    8d6a:	9201      	str	r2, [sp, #4]
    8d6c:	f7fa fe0a 	bl	3984 <memmove>
    8d70:	9a01      	ldr	r2, [sp, #4]
    8d72:	68a3      	ldr	r3, [r4, #8]
    8d74:	1a9b      	subs	r3, r3, r2
    8d76:	60a3      	str	r3, [r4, #8]
    8d78:	6823      	ldr	r3, [r4, #0]
    8d7a:	4413      	add	r3, r2
    8d7c:	6023      	str	r3, [r4, #0]
    8d7e:	4693      	mov	fp, r2
    8d80:	e795      	b.n	8cae <__sfvwrite_r+0x15a>
    8d82:	6823      	ldr	r3, [r4, #0]
    8d84:	6921      	ldr	r1, [r4, #16]
    8d86:	eba3 0b01 	sub.w	fp, r3, r1
    8d8a:	6963      	ldr	r3, [r4, #20]
    8d8c:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
    8d90:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
    8d94:	f10b 0301 	add.w	r3, fp, #1
    8d98:	ea4f 0a6a 	mov.w	sl, sl, asr #1
    8d9c:	4433      	add	r3, r6
    8d9e:	4553      	cmp	r3, sl
    8da0:	4652      	mov	r2, sl
    8da2:	bf84      	itt	hi
    8da4:	469a      	movhi	sl, r3
    8da6:	4652      	movhi	r2, sl
    8da8:	0543      	lsls	r3, r0, #21
    8daa:	d52c      	bpl.n	8e06 <__sfvwrite_r+0x2b2>
    8dac:	4611      	mov	r1, r2
    8dae:	4640      	mov	r0, r8
    8db0:	f7f9 ffb0 	bl	2d14 <_malloc_r>
    8db4:	2800      	cmp	r0, #0
    8db6:	d03b      	beq.n	8e30 <__sfvwrite_r+0x2dc>
    8db8:	465a      	mov	r2, fp
    8dba:	6921      	ldr	r1, [r4, #16]
    8dbc:	9001      	str	r0, [sp, #4]
    8dbe:	f7f8 fa0d 	bl	11dc <memcpy>
    8dc2:	89a2      	ldrh	r2, [r4, #12]
    8dc4:	9b01      	ldr	r3, [sp, #4]
    8dc6:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
    8dca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    8dce:	81a2      	strh	r2, [r4, #12]
    8dd0:	eb03 000b 	add.w	r0, r3, fp
    8dd4:	6123      	str	r3, [r4, #16]
    8dd6:	ebaa 030b 	sub.w	r3, sl, fp
    8dda:	f8c4 a014 	str.w	sl, [r4, #20]
    8dde:	60a3      	str	r3, [r4, #8]
    8de0:	6020      	str	r0, [r4, #0]
    8de2:	46b3      	mov	fp, r6
    8de4:	4632      	mov	r2, r6
    8de6:	e70c      	b.n	8c02 <__sfvwrite_r+0xae>
    8de8:	4639      	mov	r1, r7
    8dea:	465a      	mov	r2, fp
    8dec:	f7fa fdca 	bl	3984 <memmove>
    8df0:	6823      	ldr	r3, [r4, #0]
    8df2:	445b      	add	r3, fp
    8df4:	6023      	str	r3, [r4, #0]
    8df6:	4621      	mov	r1, r4
    8df8:	4640      	mov	r0, r8
    8dfa:	f7fd fd83 	bl	6904 <_fflush_r>
    8dfe:	2800      	cmp	r0, #0
    8e00:	f43f af55 	beq.w	8cae <__sfvwrite_r+0x15a>
    8e04:	e725      	b.n	8c52 <__sfvwrite_r+0xfe>
    8e06:	4640      	mov	r0, r8
    8e08:	f7fa fa40 	bl	328c <_realloc_r>
    8e0c:	4603      	mov	r3, r0
    8e0e:	2800      	cmp	r0, #0
    8e10:	d1de      	bne.n	8dd0 <__sfvwrite_r+0x27c>
    8e12:	6921      	ldr	r1, [r4, #16]
    8e14:	4640      	mov	r0, r8
    8e16:	f7fb f9f1 	bl	41fc <_free_r>
    8e1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    8e1e:	220c      	movs	r2, #12
    8e20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    8e24:	f8c8 2000 	str.w	r2, [r8]
    8e28:	e715      	b.n	8c56 <__sfvwrite_r+0x102>
    8e2a:	1c72      	adds	r2, r6, #1
    8e2c:	4691      	mov	r9, r2
    8e2e:	e726      	b.n	8c7e <__sfvwrite_r+0x12a>
    8e30:	220c      	movs	r2, #12
    8e32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    8e36:	f8c8 2000 	str.w	r2, [r8]
    8e3a:	e70c      	b.n	8c56 <__sfvwrite_r+0x102>
    8e3c:	f04f 30ff 	mov.w	r0, #4294967295
    8e40:	e6ba      	b.n	8bb8 <__sfvwrite_r+0x64>
    8e42:	bf00      	nop
    8e44:	7ffffc00 	.word	0x7ffffc00

00008e48 <__swsetup_r>:
    8e48:	b538      	push	{r3, r4, r5, lr}
    8e4a:	4b31      	ldr	r3, [pc, #196]	; (8f10 <__swsetup_r+0xc8>)
    8e4c:	681b      	ldr	r3, [r3, #0]
    8e4e:	4605      	mov	r5, r0
    8e50:	460c      	mov	r4, r1
    8e52:	b113      	cbz	r3, 8e5a <__swsetup_r+0x12>
    8e54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    8e56:	2a00      	cmp	r2, #0
    8e58:	d04e      	beq.n	8ef8 <__swsetup_r+0xb0>
    8e5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    8e5e:	0718      	lsls	r0, r3, #28
    8e60:	b29a      	uxth	r2, r3
    8e62:	d51c      	bpl.n	8e9e <__swsetup_r+0x56>
    8e64:	6921      	ldr	r1, [r4, #16]
    8e66:	b329      	cbz	r1, 8eb4 <__swsetup_r+0x6c>
    8e68:	f012 0001 	ands.w	r0, r2, #1
    8e6c:	d007      	beq.n	8e7e <__swsetup_r+0x36>
    8e6e:	2000      	movs	r0, #0
    8e70:	60a0      	str	r0, [r4, #8]
    8e72:	6960      	ldr	r0, [r4, #20]
    8e74:	4240      	negs	r0, r0
    8e76:	61a0      	str	r0, [r4, #24]
    8e78:	b139      	cbz	r1, 8e8a <__swsetup_r+0x42>
    8e7a:	2000      	movs	r0, #0
    8e7c:	bd38      	pop	{r3, r4, r5, pc}
    8e7e:	0795      	lsls	r5, r2, #30
    8e80:	bf58      	it	pl
    8e82:	6960      	ldrpl	r0, [r4, #20]
    8e84:	60a0      	str	r0, [r4, #8]
    8e86:	2900      	cmp	r1, #0
    8e88:	d1f7      	bne.n	8e7a <__swsetup_r+0x32>
    8e8a:	0612      	lsls	r2, r2, #24
    8e8c:	bf58      	it	pl
    8e8e:	4608      	movpl	r0, r1
    8e90:	d5f4      	bpl.n	8e7c <__swsetup_r+0x34>
    8e92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8e96:	81a3      	strh	r3, [r4, #12]
    8e98:	f04f 30ff 	mov.w	r0, #4294967295
    8e9c:	bd38      	pop	{r3, r4, r5, pc}
    8e9e:	06d1      	lsls	r1, r2, #27
    8ea0:	d52e      	bpl.n	8f00 <__swsetup_r+0xb8>
    8ea2:	0752      	lsls	r2, r2, #29
    8ea4:	d414      	bmi.n	8ed0 <__swsetup_r+0x88>
    8ea6:	6921      	ldr	r1, [r4, #16]
    8ea8:	f043 0308 	orr.w	r3, r3, #8
    8eac:	81a3      	strh	r3, [r4, #12]
    8eae:	b29a      	uxth	r2, r3
    8eb0:	2900      	cmp	r1, #0
    8eb2:	d1d9      	bne.n	8e68 <__swsetup_r+0x20>
    8eb4:	f402 7020 	and.w	r0, r2, #640	; 0x280
    8eb8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    8ebc:	d0d4      	beq.n	8e68 <__swsetup_r+0x20>
    8ebe:	4621      	mov	r1, r4
    8ec0:	4628      	mov	r0, r5
    8ec2:	f000 f947 	bl	9154 <__smakebuf_r>
    8ec6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    8eca:	6921      	ldr	r1, [r4, #16]
    8ecc:	b29a      	uxth	r2, r3
    8ece:	e7cb      	b.n	8e68 <__swsetup_r+0x20>
    8ed0:	6b21      	ldr	r1, [r4, #48]	; 0x30
    8ed2:	b151      	cbz	r1, 8eea <__swsetup_r+0xa2>
    8ed4:	f104 0240 	add.w	r2, r4, #64	; 0x40
    8ed8:	4291      	cmp	r1, r2
    8eda:	d004      	beq.n	8ee6 <__swsetup_r+0x9e>
    8edc:	4628      	mov	r0, r5
    8ede:	f7fb f98d 	bl	41fc <_free_r>
    8ee2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    8ee6:	2200      	movs	r2, #0
    8ee8:	6322      	str	r2, [r4, #48]	; 0x30
    8eea:	6921      	ldr	r1, [r4, #16]
    8eec:	2200      	movs	r2, #0
    8eee:	e9c4 1200 	strd	r1, r2, [r4]
    8ef2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    8ef6:	e7d7      	b.n	8ea8 <__swsetup_r+0x60>
    8ef8:	4618      	mov	r0, r3
    8efa:	f7fa fc49 	bl	3790 <__sinit>
    8efe:	e7ac      	b.n	8e5a <__swsetup_r+0x12>
    8f00:	2209      	movs	r2, #9
    8f02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8f06:	602a      	str	r2, [r5, #0]
    8f08:	f04f 30ff 	mov.w	r0, #4294967295
    8f0c:	81a3      	strh	r3, [r4, #12]
    8f0e:	bd38      	pop	{r3, r4, r5, pc}
    8f10:	2000153c 	.word	0x2000153c

00008f14 <__fputwc>:
    8f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8f18:	b082      	sub	sp, #8
    8f1a:	4682      	mov	sl, r0
    8f1c:	4688      	mov	r8, r1
    8f1e:	4614      	mov	r4, r2
    8f20:	f7fa fe88 	bl	3c34 <__locale_mb_cur_max>
    8f24:	2801      	cmp	r0, #1
    8f26:	d103      	bne.n	8f30 <__fputwc+0x1c>
    8f28:	f108 33ff 	add.w	r3, r8, #4294967295
    8f2c:	2bfe      	cmp	r3, #254	; 0xfe
    8f2e:	d936      	bls.n	8f9e <__fputwc+0x8a>
    8f30:	f10d 0904 	add.w	r9, sp, #4
    8f34:	4642      	mov	r2, r8
    8f36:	f104 035c 	add.w	r3, r4, #92	; 0x5c
    8f3a:	4649      	mov	r1, r9
    8f3c:	4650      	mov	r0, sl
    8f3e:	f7fe fd01 	bl	7944 <_wcrtomb_r>
    8f42:	1c42      	adds	r2, r0, #1
    8f44:	4606      	mov	r6, r0
    8f46:	d032      	beq.n	8fae <__fputwc+0x9a>
    8f48:	b320      	cbz	r0, 8f94 <__fputwc+0x80>
    8f4a:	f89d c004 	ldrb.w	ip, [sp, #4]
    8f4e:	2500      	movs	r5, #0
    8f50:	e009      	b.n	8f66 <__fputwc+0x52>
    8f52:	6823      	ldr	r3, [r4, #0]
    8f54:	1c5a      	adds	r2, r3, #1
    8f56:	6022      	str	r2, [r4, #0]
    8f58:	f883 c000 	strb.w	ip, [r3]
    8f5c:	3501      	adds	r5, #1
    8f5e:	42b5      	cmp	r5, r6
    8f60:	d218      	bcs.n	8f94 <__fputwc+0x80>
    8f62:	f819 cf01 	ldrb.w	ip, [r9, #1]!
    8f66:	68a3      	ldr	r3, [r4, #8]
    8f68:	3b01      	subs	r3, #1
    8f6a:	2b00      	cmp	r3, #0
    8f6c:	60a3      	str	r3, [r4, #8]
    8f6e:	daf0      	bge.n	8f52 <__fputwc+0x3e>
    8f70:	69a7      	ldr	r7, [r4, #24]
    8f72:	42bb      	cmp	r3, r7
    8f74:	4661      	mov	r1, ip
    8f76:	4622      	mov	r2, r4
    8f78:	4650      	mov	r0, sl
    8f7a:	db02      	blt.n	8f82 <__fputwc+0x6e>
    8f7c:	f1bc 0f0a 	cmp.w	ip, #10
    8f80:	d1e7      	bne.n	8f52 <__fputwc+0x3e>
    8f82:	f000 f953 	bl	922c <__swbuf_r>
    8f86:	1c43      	adds	r3, r0, #1
    8f88:	d1e8      	bne.n	8f5c <__fputwc+0x48>
    8f8a:	4606      	mov	r6, r0
    8f8c:	4630      	mov	r0, r6
    8f8e:	b002      	add	sp, #8
    8f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8f94:	4646      	mov	r6, r8
    8f96:	4630      	mov	r0, r6
    8f98:	b002      	add	sp, #8
    8f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8f9e:	fa5f fc88 	uxtb.w	ip, r8
    8fa2:	f88d c004 	strb.w	ip, [sp, #4]
    8fa6:	4606      	mov	r6, r0
    8fa8:	f10d 0904 	add.w	r9, sp, #4
    8fac:	e7cf      	b.n	8f4e <__fputwc+0x3a>
    8fae:	89a3      	ldrh	r3, [r4, #12]
    8fb0:	4630      	mov	r0, r6
    8fb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8fb6:	81a3      	strh	r3, [r4, #12]
    8fb8:	b002      	add	sp, #8
    8fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8fbe:	bf00      	nop

00008fc0 <_fputwc_r>:
    8fc0:	b530      	push	{r4, r5, lr}
    8fc2:	6e53      	ldr	r3, [r2, #100]	; 0x64
    8fc4:	f013 0f01 	tst.w	r3, #1
    8fc8:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    8fcc:	4614      	mov	r4, r2
    8fce:	b083      	sub	sp, #12
    8fd0:	4605      	mov	r5, r0
    8fd2:	b29a      	uxth	r2, r3
    8fd4:	d101      	bne.n	8fda <_fputwc_r+0x1a>
    8fd6:	0598      	lsls	r0, r3, #22
    8fd8:	d51c      	bpl.n	9014 <_fputwc_r+0x54>
    8fda:	0490      	lsls	r0, r2, #18
    8fdc:	d406      	bmi.n	8fec <_fputwc_r+0x2c>
    8fde:	6e62      	ldr	r2, [r4, #100]	; 0x64
    8fe0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    8fe4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    8fe8:	81a3      	strh	r3, [r4, #12]
    8fea:	6662      	str	r2, [r4, #100]	; 0x64
    8fec:	4622      	mov	r2, r4
    8fee:	4628      	mov	r0, r5
    8ff0:	f7ff ff90 	bl	8f14 <__fputwc>
    8ff4:	6e63      	ldr	r3, [r4, #100]	; 0x64
    8ff6:	07da      	lsls	r2, r3, #31
    8ff8:	4605      	mov	r5, r0
    8ffa:	d402      	bmi.n	9002 <_fputwc_r+0x42>
    8ffc:	89a3      	ldrh	r3, [r4, #12]
    8ffe:	059b      	lsls	r3, r3, #22
    9000:	d502      	bpl.n	9008 <_fputwc_r+0x48>
    9002:	4628      	mov	r0, r5
    9004:	b003      	add	sp, #12
    9006:	bd30      	pop	{r4, r5, pc}
    9008:	6da0      	ldr	r0, [r4, #88]	; 0x58
    900a:	f7fa feaf 	bl	3d6c <__retarget_lock_release_recursive>
    900e:	4628      	mov	r0, r5
    9010:	b003      	add	sp, #12
    9012:	bd30      	pop	{r4, r5, pc}
    9014:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9016:	9101      	str	r1, [sp, #4]
    9018:	f7fa fea6 	bl	3d68 <__retarget_lock_acquire_recursive>
    901c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    9020:	9901      	ldr	r1, [sp, #4]
    9022:	b29a      	uxth	r2, r3
    9024:	e7d9      	b.n	8fda <_fputwc_r+0x1a>
    9026:	bf00      	nop

00009028 <_wcsnrtombs_l>:
    9028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    902c:	b08b      	sub	sp, #44	; 0x2c
    902e:	e9dd 8a15 	ldrd	r8, sl, [sp, #84]	; 0x54
    9032:	9f14      	ldr	r7, [sp, #80]	; 0x50
    9034:	9103      	str	r1, [sp, #12]
    9036:	4681      	mov	r9, r0
    9038:	9205      	str	r2, [sp, #20]
    903a:	461e      	mov	r6, r3
    903c:	f1b8 0f00 	cmp.w	r8, #0
    9040:	d05c      	beq.n	90fc <_wcsnrtombs_l+0xd4>
    9042:	9b03      	ldr	r3, [sp, #12]
    9044:	2b00      	cmp	r3, #0
    9046:	d05e      	beq.n	9106 <_wcsnrtombs_l+0xde>
    9048:	9b05      	ldr	r3, [sp, #20]
    904a:	681d      	ldr	r5, [r3, #0]
    904c:	2f00      	cmp	r7, #0
    904e:	d06a      	beq.n	9126 <_wcsnrtombs_l+0xfe>
    9050:	1e74      	subs	r4, r6, #1
    9052:	b34e      	cbz	r6, 90a8 <_wcsnrtombs_l+0x80>
    9054:	9b03      	ldr	r3, [sp, #12]
    9056:	9304      	str	r3, [sp, #16]
    9058:	3d04      	subs	r5, #4
    905a:	2600      	movs	r6, #0
    905c:	9501      	str	r5, [sp, #4]
    905e:	e00b      	b.n	9078 <_wcsnrtombs_l+0x50>
    9060:	9b03      	ldr	r3, [sp, #12]
    9062:	bb2b      	cbnz	r3, 90b0 <_wcsnrtombs_l+0x88>
    9064:	9b01      	ldr	r3, [sp, #4]
    9066:	681a      	ldr	r2, [r3, #0]
    9068:	2a00      	cmp	r2, #0
    906a:	d03a      	beq.n	90e2 <_wcsnrtombs_l+0xba>
    906c:	45bc      	cmp	ip, r7
    906e:	d25c      	bcs.n	912a <_wcsnrtombs_l+0x102>
    9070:	3c01      	subs	r4, #1
    9072:	1c63      	adds	r3, r4, #1
    9074:	4666      	mov	r6, ip
    9076:	d017      	beq.n	90a8 <_wcsnrtombs_l+0x80>
    9078:	f8d8 3000 	ldr.w	r3, [r8]
    907c:	9302      	str	r3, [sp, #8]
    907e:	9b01      	ldr	r3, [sp, #4]
    9080:	f8da 50e0 	ldr.w	r5, [sl, #224]	; 0xe0
    9084:	f853 2f04 	ldr.w	r2, [r3, #4]!
    9088:	9301      	str	r3, [sp, #4]
    908a:	a907      	add	r1, sp, #28
    908c:	4643      	mov	r3, r8
    908e:	4648      	mov	r0, r9
    9090:	f8d8 b004 	ldr.w	fp, [r8, #4]
    9094:	47a8      	blx	r5
    9096:	1c42      	adds	r2, r0, #1
    9098:	d03a      	beq.n	9110 <_wcsnrtombs_l+0xe8>
    909a:	eb00 0c06 	add.w	ip, r0, r6
    909e:	45bc      	cmp	ip, r7
    90a0:	d9de      	bls.n	9060 <_wcsnrtombs_l+0x38>
    90a2:	9b02      	ldr	r3, [sp, #8]
    90a4:	e9c8 3b00 	strd	r3, fp, [r8]
    90a8:	4630      	mov	r0, r6
    90aa:	b00b      	add	sp, #44	; 0x2c
    90ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    90b0:	2800      	cmp	r0, #0
    90b2:	dd0e      	ble.n	90d2 <_wcsnrtombs_l+0xaa>
    90b4:	9b04      	ldr	r3, [sp, #16]
    90b6:	9d01      	ldr	r5, [sp, #4]
    90b8:	4418      	add	r0, r3
    90ba:	1e5a      	subs	r2, r3, #1
    90bc:	a907      	add	r1, sp, #28
    90be:	f100 3eff 	add.w	lr, r0, #4294967295
    90c2:	f811 3b01 	ldrb.w	r3, [r1], #1
    90c6:	f802 3f01 	strb.w	r3, [r2, #1]!
    90ca:	4572      	cmp	r2, lr
    90cc:	d1f9      	bne.n	90c2 <_wcsnrtombs_l+0x9a>
    90ce:	9501      	str	r5, [sp, #4]
    90d0:	9004      	str	r0, [sp, #16]
    90d2:	9b05      	ldr	r3, [sp, #20]
    90d4:	681a      	ldr	r2, [r3, #0]
    90d6:	3204      	adds	r2, #4
    90d8:	601a      	str	r2, [r3, #0]
    90da:	9b01      	ldr	r3, [sp, #4]
    90dc:	681a      	ldr	r2, [r3, #0]
    90de:	2a00      	cmp	r2, #0
    90e0:	d1c4      	bne.n	906c <_wcsnrtombs_l+0x44>
    90e2:	9b03      	ldr	r3, [sp, #12]
    90e4:	b10b      	cbz	r3, 90ea <_wcsnrtombs_l+0xc2>
    90e6:	9b05      	ldr	r3, [sp, #20]
    90e8:	601a      	str	r2, [r3, #0]
    90ea:	f10c 36ff 	add.w	r6, ip, #4294967295
    90ee:	2200      	movs	r2, #0
    90f0:	4630      	mov	r0, r6
    90f2:	f8c8 2000 	str.w	r2, [r8]
    90f6:	b00b      	add	sp, #44	; 0x2c
    90f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    90fc:	9b03      	ldr	r3, [sp, #12]
    90fe:	f500 7886 	add.w	r8, r0, #268	; 0x10c
    9102:	2b00      	cmp	r3, #0
    9104:	d1a0      	bne.n	9048 <_wcsnrtombs_l+0x20>
    9106:	9b05      	ldr	r3, [sp, #20]
    9108:	f04f 37ff 	mov.w	r7, #4294967295
    910c:	681d      	ldr	r5, [r3, #0]
    910e:	e79f      	b.n	9050 <_wcsnrtombs_l+0x28>
    9110:	4606      	mov	r6, r0
    9112:	218a      	movs	r1, #138	; 0x8a
    9114:	2200      	movs	r2, #0
    9116:	4630      	mov	r0, r6
    9118:	f8c9 1000 	str.w	r1, [r9]
    911c:	f8c8 2000 	str.w	r2, [r8]
    9120:	b00b      	add	sp, #44	; 0x2c
    9122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9126:	463e      	mov	r6, r7
    9128:	e7be      	b.n	90a8 <_wcsnrtombs_l+0x80>
    912a:	4666      	mov	r6, ip
    912c:	e7bc      	b.n	90a8 <_wcsnrtombs_l+0x80>
    912e:	bf00      	nop

00009130 <_wcsnrtombs_r>:
    9130:	b510      	push	{r4, lr}
    9132:	b084      	sub	sp, #16
    9134:	4c05      	ldr	r4, [pc, #20]	; (914c <_wcsnrtombs_r+0x1c>)
    9136:	9806      	ldr	r0, [sp, #24]
    9138:	9000      	str	r0, [sp, #0]
    913a:	9807      	ldr	r0, [sp, #28]
    913c:	9001      	str	r0, [sp, #4]
    913e:	4804      	ldr	r0, [pc, #16]	; (9150 <_wcsnrtombs_r+0x20>)
    9140:	6800      	ldr	r0, [r0, #0]
    9142:	9402      	str	r4, [sp, #8]
    9144:	f7ff ff70 	bl	9028 <_wcsnrtombs_l>
    9148:	b004      	add	sp, #16
    914a:	bd10      	pop	{r4, pc}
    914c:	20000fb4 	.word	0x20000fb4
    9150:	2000153c 	.word	0x2000153c

00009154 <__smakebuf_r>:
    9154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9158:	898b      	ldrh	r3, [r1, #12]
    915a:	460c      	mov	r4, r1
    915c:	0799      	lsls	r1, r3, #30
    915e:	b096      	sub	sp, #88	; 0x58
    9160:	d508      	bpl.n	9174 <__smakebuf_r+0x20>
    9162:	f104 0343 	add.w	r3, r4, #67	; 0x43
    9166:	2201      	movs	r2, #1
    9168:	e9c4 3204 	strd	r3, r2, [r4, #16]
    916c:	6023      	str	r3, [r4, #0]
    916e:	b016      	add	sp, #88	; 0x58
    9170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9174:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    9178:	2900      	cmp	r1, #0
    917a:	4606      	mov	r6, r0
    917c:	db25      	blt.n	91ca <__smakebuf_r+0x76>
    917e:	466a      	mov	r2, sp
    9180:	f000 f8ac 	bl	92dc <_fstat_r>
    9184:	2800      	cmp	r0, #0
    9186:	db1f      	blt.n	91c8 <__smakebuf_r+0x74>
    9188:	9d01      	ldr	r5, [sp, #4]
    918a:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
    918e:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
    9192:	fab5 f585 	clz	r5, r5
    9196:	f44f 6880 	mov.w	r8, #1024	; 0x400
    919a:	096d      	lsrs	r5, r5, #5
    919c:	f44f 6700 	mov.w	r7, #2048	; 0x800
    91a0:	4641      	mov	r1, r8
    91a2:	4630      	mov	r0, r6
    91a4:	f7f9 fdb6 	bl	2d14 <_malloc_r>
    91a8:	b1e0      	cbz	r0, 91e4 <__smakebuf_r+0x90>
    91aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    91ae:	f8c4 8014 	str.w	r8, [r4, #20]
    91b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    91b6:	6020      	str	r0, [r4, #0]
    91b8:	6120      	str	r0, [r4, #16]
    91ba:	81a3      	strh	r3, [r4, #12]
    91bc:	bb35      	cbnz	r5, 920c <__smakebuf_r+0xb8>
    91be:	433b      	orrs	r3, r7
    91c0:	81a3      	strh	r3, [r4, #12]
    91c2:	b016      	add	sp, #88	; 0x58
    91c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    91c8:	89a3      	ldrh	r3, [r4, #12]
    91ca:	f013 0580 	ands.w	r5, r3, #128	; 0x80
    91ce:	d019      	beq.n	9204 <__smakebuf_r+0xb0>
    91d0:	f04f 0840 	mov.w	r8, #64	; 0x40
    91d4:	2500      	movs	r5, #0
    91d6:	4641      	mov	r1, r8
    91d8:	4630      	mov	r0, r6
    91da:	462f      	mov	r7, r5
    91dc:	f7f9 fd9a 	bl	2d14 <_malloc_r>
    91e0:	2800      	cmp	r0, #0
    91e2:	d1e2      	bne.n	91aa <__smakebuf_r+0x56>
    91e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    91e8:	059a      	lsls	r2, r3, #22
    91ea:	d4c0      	bmi.n	916e <__smakebuf_r+0x1a>
    91ec:	f023 0303 	bic.w	r3, r3, #3
    91f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
    91f4:	f043 0302 	orr.w	r3, r3, #2
    91f8:	2101      	movs	r1, #1
    91fa:	e9c4 2104 	strd	r2, r1, [r4, #16]
    91fe:	81a3      	strh	r3, [r4, #12]
    9200:	6022      	str	r2, [r4, #0]
    9202:	e7b4      	b.n	916e <__smakebuf_r+0x1a>
    9204:	f44f 6880 	mov.w	r8, #1024	; 0x400
    9208:	462f      	mov	r7, r5
    920a:	e7c9      	b.n	91a0 <__smakebuf_r+0x4c>
    920c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    9210:	4630      	mov	r0, r6
    9212:	f000 f879 	bl	9308 <_isatty_r>
    9216:	b910      	cbnz	r0, 921e <__smakebuf_r+0xca>
    9218:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    921c:	e7cf      	b.n	91be <__smakebuf_r+0x6a>
    921e:	89a3      	ldrh	r3, [r4, #12]
    9220:	f023 0303 	bic.w	r3, r3, #3
    9224:	f043 0301 	orr.w	r3, r3, #1
    9228:	b21b      	sxth	r3, r3
    922a:	e7c8      	b.n	91be <__smakebuf_r+0x6a>

0000922c <__swbuf_r>:
    922c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    922e:	460d      	mov	r5, r1
    9230:	4614      	mov	r4, r2
    9232:	4606      	mov	r6, r0
    9234:	b110      	cbz	r0, 923c <__swbuf_r+0x10>
    9236:	6b43      	ldr	r3, [r0, #52]	; 0x34
    9238:	2b00      	cmp	r3, #0
    923a:	d04c      	beq.n	92d6 <__swbuf_r+0xaa>
    923c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    9240:	69a3      	ldr	r3, [r4, #24]
    9242:	60a3      	str	r3, [r4, #8]
    9244:	0717      	lsls	r7, r2, #28
    9246:	b290      	uxth	r0, r2
    9248:	d51b      	bpl.n	9282 <__swbuf_r+0x56>
    924a:	6923      	ldr	r3, [r4, #16]
    924c:	b1cb      	cbz	r3, 9282 <__swbuf_r+0x56>
    924e:	b2ed      	uxtb	r5, r5
    9250:	0481      	lsls	r1, r0, #18
    9252:	462f      	mov	r7, r5
    9254:	d522      	bpl.n	929c <__swbuf_r+0x70>
    9256:	6822      	ldr	r2, [r4, #0]
    9258:	6961      	ldr	r1, [r4, #20]
    925a:	1ad3      	subs	r3, r2, r3
    925c:	4299      	cmp	r1, r3
    925e:	dd29      	ble.n	92b4 <__swbuf_r+0x88>
    9260:	3301      	adds	r3, #1
    9262:	68a1      	ldr	r1, [r4, #8]
    9264:	3901      	subs	r1, #1
    9266:	60a1      	str	r1, [r4, #8]
    9268:	1c51      	adds	r1, r2, #1
    926a:	6021      	str	r1, [r4, #0]
    926c:	7015      	strb	r5, [r2, #0]
    926e:	6962      	ldr	r2, [r4, #20]
    9270:	429a      	cmp	r2, r3
    9272:	d027      	beq.n	92c4 <__swbuf_r+0x98>
    9274:	89a3      	ldrh	r3, [r4, #12]
    9276:	07db      	lsls	r3, r3, #31
    9278:	d501      	bpl.n	927e <__swbuf_r+0x52>
    927a:	2d0a      	cmp	r5, #10
    927c:	d022      	beq.n	92c4 <__swbuf_r+0x98>
    927e:	4638      	mov	r0, r7
    9280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9282:	4621      	mov	r1, r4
    9284:	4630      	mov	r0, r6
    9286:	f7ff fddf 	bl	8e48 <__swsetup_r>
    928a:	bb08      	cbnz	r0, 92d0 <__swbuf_r+0xa4>
    928c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    9290:	6923      	ldr	r3, [r4, #16]
    9292:	b290      	uxth	r0, r2
    9294:	b2ed      	uxtb	r5, r5
    9296:	0481      	lsls	r1, r0, #18
    9298:	462f      	mov	r7, r5
    929a:	d4dc      	bmi.n	9256 <__swbuf_r+0x2a>
    929c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    92a0:	81a2      	strh	r2, [r4, #12]
    92a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
    92a4:	6961      	ldr	r1, [r4, #20]
    92a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
    92aa:	6662      	str	r2, [r4, #100]	; 0x64
    92ac:	6822      	ldr	r2, [r4, #0]
    92ae:	1ad3      	subs	r3, r2, r3
    92b0:	4299      	cmp	r1, r3
    92b2:	dcd5      	bgt.n	9260 <__swbuf_r+0x34>
    92b4:	4621      	mov	r1, r4
    92b6:	4630      	mov	r0, r6
    92b8:	f7fd fb24 	bl	6904 <_fflush_r>
    92bc:	b940      	cbnz	r0, 92d0 <__swbuf_r+0xa4>
    92be:	6822      	ldr	r2, [r4, #0]
    92c0:	2301      	movs	r3, #1
    92c2:	e7ce      	b.n	9262 <__swbuf_r+0x36>
    92c4:	4621      	mov	r1, r4
    92c6:	4630      	mov	r0, r6
    92c8:	f7fd fb1c 	bl	6904 <_fflush_r>
    92cc:	2800      	cmp	r0, #0
    92ce:	d0d6      	beq.n	927e <__swbuf_r+0x52>
    92d0:	f04f 37ff 	mov.w	r7, #4294967295
    92d4:	e7d3      	b.n	927e <__swbuf_r+0x52>
    92d6:	f7fa fa5b 	bl	3790 <__sinit>
    92da:	e7af      	b.n	923c <__swbuf_r+0x10>

000092dc <_fstat_r>:
    92dc:	b570      	push	{r4, r5, r6, lr}
    92de:	460c      	mov	r4, r1
    92e0:	4d08      	ldr	r5, [pc, #32]	; (9304 <_fstat_r+0x28>)
    92e2:	4603      	mov	r3, r0
    92e4:	2600      	movs	r6, #0
    92e6:	4620      	mov	r0, r4
    92e8:	4611      	mov	r1, r2
    92ea:	461c      	mov	r4, r3
    92ec:	602e      	str	r6, [r5, #0]
    92ee:	f7f8 f9df 	bl	16b0 <_fstat>
    92f2:	1c43      	adds	r3, r0, #1
    92f4:	d000      	beq.n	92f8 <_fstat_r+0x1c>
    92f6:	bd70      	pop	{r4, r5, r6, pc}
    92f8:	682b      	ldr	r3, [r5, #0]
    92fa:	2b00      	cmp	r3, #0
    92fc:	d0fb      	beq.n	92f6 <_fstat_r+0x1a>
    92fe:	6023      	str	r3, [r4, #0]
    9300:	bd70      	pop	{r4, r5, r6, pc}
    9302:	bf00      	nop
    9304:	2000217c 	.word	0x2000217c

00009308 <_isatty_r>:
    9308:	b538      	push	{r3, r4, r5, lr}
    930a:	4d07      	ldr	r5, [pc, #28]	; (9328 <_isatty_r+0x20>)
    930c:	2200      	movs	r2, #0
    930e:	4604      	mov	r4, r0
    9310:	4608      	mov	r0, r1
    9312:	602a      	str	r2, [r5, #0]
    9314:	f7f8 f9d2 	bl	16bc <_isatty>
    9318:	1c43      	adds	r3, r0, #1
    931a:	d000      	beq.n	931e <_isatty_r+0x16>
    931c:	bd38      	pop	{r3, r4, r5, pc}
    931e:	682b      	ldr	r3, [r5, #0]
    9320:	2b00      	cmp	r3, #0
    9322:	d0fb      	beq.n	931c <_isatty_r+0x14>
    9324:	6023      	str	r3, [r4, #0]
    9326:	bd38      	pop	{r3, r4, r5, pc}
    9328:	2000217c 	.word	0x2000217c
    932c:	00000000 	.word	0x00000000

00009330 <___reboot_Teensyduino__veneer>:
    9330:	f85f f000 	ldr.w	pc, [pc]	; 9334 <___reboot_Teensyduino__veneer+0x4>
    9334:	60001de1 	.word	0x60001de1

00009338 <___init_veneer>:
    9338:	f85f f000 	ldr.w	pc, [pc]	; 933c <___init_veneer+0x4>
    933c:	60001e35 	.word	0x60001e35

Disassembly of section .fini:

00009340 <_fini>:
    9340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9342:	bf00      	nop
