
C:\Users\johnw\AppData\Local\arduino\sketches\7A41F3B4C03617EFA892FC94CDC79164/teensystub.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
	if (dest == src) return;
	do {
		*dest++ = *src++;
	} while (dest < dest_end);
#else
	asm volatile(
60001400:	4281      	cmp	r1, r0
60001402:	d005      	beq.n	60001410 <memory_copy+0x10>
60001404:	f851 3b04 	ldr.w	r3, [r1], #4
60001408:	f840 3b04 	str.w	r3, [r0], #4
6000140c:	4282      	cmp	r2, r0
6000140e:	d8f9      	bhi.n	60001404 <memory_copy+0x4>
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	"2:					\n"
	: [dest] "+r" (dest), [src] "+r" (src) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001410:	4770      	bx	lr
60001412:	bf00      	nop

60001414 <memory_clear.constprop.0>:
#if 0
	while (dest < dest_end) {
		*dest++ = 0;
	}
#else
	asm volatile(
60001414:	4a04      	ldr	r2, [pc, #16]	; (60001428 <memory_clear.constprop.0+0x14>)
60001416:	4905      	ldr	r1, [pc, #20]	; (6000142c <memory_clear.constprop.0+0x18>)
60001418:	f04f 0300 	mov.w	r3, #0
6000141c:	f842 3b04 	str.w	r3, [r2], #4
60001420:	4291      	cmp	r1, r2
60001422:	d8fb      	bhi.n	6000141c <memory_clear.constprop.0+0x8>
	"1:	str.w	r3, [%[dest]], #4	\n"
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	: [dest] "+r" (dest) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001424:	4770      	bx	lr
60001426:	bf00      	nop
60001428:	20001ac0 	.word	0x20001ac0
6000142c:	20002140 	.word	0x20002140

60001430 <ResetHandler2>:
{
60001430:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	__asm__ volatile("dsb":::"memory");
60001434:	f3bf 8f4f 	dsb	sy
	asm volatile("nop");
60001438:	bf00      	nop
	asm volatile("nop");
6000143a:	bf00      	nop
	asm volatile("nop");
6000143c:	bf00      	nop
	asm volatile("nop");
6000143e:	bf00      	nop
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
60001440:	f000 f918 	bl	60001674 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001444:	4b68      	ldr	r3, [pc, #416]	; (600015e8 <ResetHandler2+0x1b8>)
60001446:	2208      	movs	r2, #8
60001448:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	asm volatile("nop");
6000144c:	bf00      	nop
	asm volatile("nop");
6000144e:	bf00      	nop
	asm volatile("nop");
60001450:	bf00      	nop
	asm volatile("nop");
60001452:	bf00      	nop
	asm volatile("nop");
60001454:	bf00      	nop
	asm volatile("nop");
60001456:	bf00      	nop
	asm volatile("nop");
60001458:	bf00      	nop
	asm volatile("nop");
6000145a:	bf00      	nop
	asm volatile("nop");
6000145c:	bf00      	nop
	asm volatile("nop");
6000145e:	bf00      	nop
	asm volatile("nop");
60001460:	bf00      	nop
	asm volatile("nop");
60001462:	bf00      	nop
	asm volatile("nop");
60001464:	bf00      	nop
	asm volatile("nop");
60001466:	bf00      	nop
	asm volatile("nop");
60001468:	bf00      	nop
	asm volatile("nop");
6000146a:	bf00      	nop
	memory_copy(&_stext, &_stextload, &_etext);
6000146c:	4a5f      	ldr	r2, [pc, #380]	; (600015ec <ResetHandler2+0x1bc>)
6000146e:	4960      	ldr	r1, [pc, #384]	; (600015f0 <ResetHandler2+0x1c0>)
60001470:	4860      	ldr	r0, [pc, #384]	; (600015f4 <ResetHandler2+0x1c4>)
60001472:	f7ff ffc5 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001476:	4a60      	ldr	r2, [pc, #384]	; (600015f8 <ResetHandler2+0x1c8>)
60001478:	4960      	ldr	r1, [pc, #384]	; (600015fc <ResetHandler2+0x1cc>)
6000147a:	4861      	ldr	r0, [pc, #388]	; (60001600 <ResetHandler2+0x1d0>)
6000147c:	f7ff ffc0 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
60001480:	4c60      	ldr	r4, [pc, #384]	; (60001604 <ResetHandler2+0x1d4>)
60001482:	f7ff ffc7 	bl	60001414 <memory_clear.constprop.0>
	SCB_CPACR = 0x00F00000;
60001486:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
6000148a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000148e:	2300      	movs	r3, #0
60001490:	4a5d      	ldr	r2, [pc, #372]	; (60001608 <ResetHandler2+0x1d8>)
	SCB_CPACR = 0x00F00000;
60001492:	f8c1 0d88 	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001496:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
6000149a:	3301      	adds	r3, #1
6000149c:	2bb0      	cmp	r3, #176	; 0xb0
6000149e:	d1fa      	bne.n	60001496 <ResetHandler2+0x66>
600014a0:	4b5a      	ldr	r3, [pc, #360]	; (6000160c <ResetHandler2+0x1dc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600014a2:	2180      	movs	r1, #128	; 0x80
600014a4:	4a5a      	ldr	r2, [pc, #360]	; (60001610 <ResetHandler2+0x1e0>)
600014a6:	f803 1b01 	strb.w	r1, [r3], #1
600014aa:	4293      	cmp	r3, r2
600014ac:	d1fb      	bne.n	600014a6 <ResetHandler2+0x76>
	SCB_VTOR = (uint32_t)_VectorsRam;
600014ae:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014b2:	4e4d      	ldr	r6, [pc, #308]	; (600015e8 <ResetHandler2+0x1b8>)
600014b4:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014b8:	f8df b184 	ldr.w	fp, [pc, #388]	; 60001640 <ResetHandler2+0x210>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014bc:	f8df a184 	ldr.w	sl, [pc, #388]	; 60001644 <ResetHandler2+0x214>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014c0:	f04f 31ff 	mov.w	r1, #4294967295
	SCB_VTOR = (uint32_t)_VectorsRam;
600014c4:	f8c5 4d08 	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
600014c8:	2700      	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014ca:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014ce:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014d2:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014d6:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014da:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014de:	f8df 8168 	ldr.w	r8, [pc, #360]	; 60001648 <ResetHandler2+0x218>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014e6:	4a4b      	ldr	r2, [pc, #300]	; (60001614 <ResetHandler2+0x1e4>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e8:	f8c5 3d24 	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ec:	f8d8 301c 	ldr.w	r3, [r8, #28]
600014f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014f8:	f8c8 301c 	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014fc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
60001500:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
60001504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001508:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
6000150c:	6691      	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
6000150e:	66d1      	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001510:	6711      	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001512:	6751      	str	r1, [r2, #116]	; 0x74
	configure_cache();
60001514:	f000 f8b6 	bl	60001684 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
60001518:	4b3f      	ldr	r3, [pc, #252]	; (60001618 <ResetHandler2+0x1e8>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000151a:	4940      	ldr	r1, [pc, #256]	; (6000161c <ResetHandler2+0x1ec>)
	_VectorsRam[14] = pendablesrvreq_isr;
6000151c:	63a3      	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
6000151e:	4b40      	ldr	r3, [pc, #256]	; (60001620 <ResetHandler2+0x1f0>)
60001520:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001522:	2363      	movs	r3, #99	; 0x63
60001524:	616b      	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001526:	2303      	movs	r3, #3
	SYST_CVR = 0;
60001528:	61af      	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000152a:	612b      	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000152c:	4b3d      	ldr	r3, [pc, #244]	; (60001624 <ResetHandler2+0x1f4>)
6000152e:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001532:	f8d5 3dfc 	ldr.w	r3, [r5, #3580]	; 0xdfc
60001536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000153a:	f8c5 3dfc 	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000153e:	4b3a      	ldr	r3, [pc, #232]	; (60001628 <ResetHandler2+0x1f8>)
60001540:	681a      	ldr	r2, [r3, #0]
60001542:	f042 0201 	orr.w	r2, r2, #1
60001546:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001548:	685b      	ldr	r3, [r3, #4]
6000154a:	600b      	str	r3, [r1, #0]
	usb_pll_start();	
6000154c:	f000 fae4 	bl	60001b18 <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001550:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001554:	4835      	ldr	r0, [pc, #212]	; (6000162c <ResetHandler2+0x1fc>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001556:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000155a:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000155e:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001562:	f000 fc79 	bl	60001e58 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001566:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
6000156a:	4b31      	ldr	r3, [pc, #196]	; (60001630 <ResetHandler2+0x200>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000156c:	4a31      	ldr	r2, [pc, #196]	; (60001634 <ResetHandler2+0x204>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000156e:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
60001572:	f8c8 106c 	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001576:	601f      	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001578:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000157c:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001580:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001584:	f8c3 7138 	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001588:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000158a:	07db      	lsls	r3, r3, #31
6000158c:	d408      	bmi.n	600015a0 <ResetHandler2+0x170>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000158e:	f642 6315 	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
60001592:	4929      	ldr	r1, [pc, #164]	; (60001638 <ResetHandler2+0x208>)
60001594:	6551      	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001596:	6513      	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001598:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000159a:	f043 0301 	orr.w	r3, r3, #1
6000159e:	6393      	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600015a0:	4a24      	ldr	r2, [pc, #144]	; (60001634 <ResetHandler2+0x204>)
600015a2:	4c26      	ldr	r4, [pc, #152]	; (6000163c <ResetHandler2+0x20c>)
600015a4:	6893      	ldr	r3, [r2, #8]
600015a6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
600015aa:	6093      	str	r3, [r2, #8]
	configure_external_ram();
600015ac:	f000 f8f2 	bl	60001794 <configure_external_ram>
	analog_init();
600015b0:	f000 fc16 	bl	60001de0 <analog_init>
	pwm_init();
600015b4:	f000 fc4c 	bl	60001e50 <__pwm_init_veneer>
	tempmon_init();
600015b8:	f000 fadc 	bl	60001b74 <tempmon_init>
	startup_middle_hook();
600015bc:	f000 f85c 	bl	60001678 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
600015c0:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015c2:	2b13      	cmp	r3, #19
600015c4:	d9fc      	bls.n	600015c0 <ResetHandler2+0x190>
	usb_init();
600015c6:	f000 fb6d 	bl	60001ca4 <usb_init>
600015ca:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015cc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015d0:	d3fb      	bcc.n	600015ca <ResetHandler2+0x19a>
	startup_debug_reset();
600015d2:	f000 f855 	bl	60001680 <startup_debug_reset>
	startup_late_hook();
600015d6:	f000 f851 	bl	6000167c <startup_default_late_hook>
	__libc_init_array();
600015da:	f000 fc31 	bl	60001e40 <____libc_init_array_veneer>
	main();
600015de:	f000 fc33 	bl	60001e48 <__main_veneer>
	while (1) asm("WFI");
600015e2:	bf30      	wfi
600015e4:	e7fd      	b.n	600015e2 <ResetHandler2+0x1b2>
600015e6:	bf00      	nop
600015e8:	400d8000 	.word	0x400d8000
600015ec:	00009d98 	.word	0x00009d98
600015f0:	60001f8c 	.word	0x60001f8c
600015f4:	00000000 	.word	0x00000000
600015f8:	20001ac0 	.word	0x20001ac0
600015fc:	6000bd28 	.word	0x6000bd28
60001600:	20000000 	.word	0x20000000
60001604:	20001800 	.word	0x20001800
60001608:	00001c4d 	.word	0x00001c4d
6000160c:	e000e400 	.word	0xe000e400
60001610:	e000e4a0 	.word	0xe000e4a0
60001614:	400ac000 	.word	0x400ac000
60001618:	00003075 	.word	0x00003075
6000161c:	200020e0 	.word	0x200020e0
60001620:	00003079 	.word	0x00003079
60001624:	20200000 	.word	0x20200000
60001628:	e0001000 	.word	0xe0001000
6000162c:	23c34600 	.word	0x23c34600
60001630:	40084000 	.word	0x40084000
60001634:	400d4000 	.word	0x400d4000
60001638:	56c00000 	.word	0x56c00000
6000163c:	200020e4 	.word	0x200020e4
60001640:	2018101b 	.word	0x2018101b
60001644:	13110d0c 	.word	0x13110d0c
60001648:	400fc000 	.word	0x400fc000

6000164c <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000164c:	4b05      	ldr	r3, [pc, #20]	; (60001664 <ResetHandler+0x18>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000164e:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001652:	4a05      	ldr	r2, [pc, #20]	; (60001668 <ResetHandler+0x1c>)
	IOMUXC_GPR_GPR16 = 0x00200007;
60001654:	4805      	ldr	r0, [pc, #20]	; (6000166c <ResetHandler+0x20>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001656:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001658:	6418      	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
6000165a:	4a05      	ldr	r2, [pc, #20]	; (60001670 <ResetHandler+0x24>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000165c:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
6000165e:	4695      	mov	sp, r2
	ResetHandler2();
60001660:	f7ff fee6 	bl	60001430 <ResetHandler2>
60001664:	400ac000 	.word	0x400ac000
60001668:	aaaaaaaf 	.word	0xaaaaaaaf
6000166c:	00200007 	.word	0x00200007
60001670:	20070000 	.word	0x20070000

60001674 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
60001674:	4770      	bx	lr
60001676:	bf00      	nop

60001678 <startup_default_middle_hook>:
60001678:	4770      	bx	lr
6000167a:	bf00      	nop

6000167c <startup_default_late_hook>:
6000167c:	4770      	bx	lr
6000167e:	bf00      	nop

60001680 <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
60001680:	bf00      	nop
60001682:	4770      	bx	lr

60001684 <configure_cache>:
{
60001684:	b410      	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
60001686:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
6000168a:	2100      	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
6000168c:	2410      	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000168e:	4831      	ldr	r0, [pc, #196]	; (60001754 <configure_cache+0xd0>)
	SCB_MPU_CTRL = 0; // turn off MPU
60001690:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001694:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001698:	2411      	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000169a:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
6000169e:	482e      	ldr	r0, [pc, #184]	; (60001758 <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600016a0:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600016a4:	2412      	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
600016a6:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600016aa:	482c      	ldr	r0, [pc, #176]	; (6000175c <configure_cache+0xd8>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600016ac:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600016b0:	4a2b      	ldr	r2, [pc, #172]	; (60001760 <configure_cache+0xdc>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600016b2:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600016b6:	4c2b      	ldr	r4, [pc, #172]	; (60001764 <configure_cache+0xe0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600016b8:	f042 0215 	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600016bc:	482a      	ldr	r0, [pc, #168]	; (60001768 <configure_cache+0xe4>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600016be:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600016c2:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600016c6:	4c29      	ldr	r4, [pc, #164]	; (6000176c <configure_cache+0xe8>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600016c8:	4829      	ldr	r0, [pc, #164]	; (60001770 <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600016ca:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600016ce:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600016d2:	4c28      	ldr	r4, [pc, #160]	; (60001774 <configure_cache+0xf0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600016d4:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600016d8:	4827      	ldr	r0, [pc, #156]	; (60001778 <configure_cache+0xf4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600016da:	4a28      	ldr	r2, [pc, #160]	; (6000177c <configure_cache+0xf8>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600016dc:	f8c3 4da0 	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600016e0:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600016e4:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016e8:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600016ec:	4c24      	ldr	r4, [pc, #144]	; (60001780 <configure_cache+0xfc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016ee:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600016f0:	4824      	ldr	r0, [pc, #144]	; (60001784 <configure_cache+0x100>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600016f2:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016f6:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600016fa:	4a23      	ldr	r2, [pc, #140]	; (60001788 <configure_cache+0x104>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600016fc:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001700:	4c22      	ldr	r4, [pc, #136]	; (6000178c <configure_cache+0x108>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001702:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001706:	f102 6240 	add.w	r2, r2, #201326592	; 0xc000000
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000170a:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
6000170e:	4820      	ldr	r0, [pc, #128]	; (60001790 <configure_cache+0x10c>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001710:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
60001714:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
60001716:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
6000171a:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	asm("nop"); // allow a few cycles for bus writes before enable MPU
6000171e:	bf00      	nop
	asm("nop");
60001720:	bf00      	nop
	asm("nop");
60001722:	bf00      	nop
	asm("nop");
60001724:	bf00      	nop
	asm("nop");
60001726:	bf00      	nop
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001728:	2201      	movs	r2, #1
6000172a:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
6000172e:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001732:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001736:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
6000173a:	f3bf 8f4f 	dsb	sy
	asm("isb");
6000173e:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001742:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
}
60001746:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000174a:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
6000174e:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
60001752:	4770      	bx	lr
60001754:	1000003f 	.word	0x1000003f
60001758:	07080025 	.word	0x07080025
6000175c:	00100009 	.word	0x00100009
60001760:	20002140 	.word	0x20002140
60001764:	00200013 	.word	0x00200013
60001768:	07020021 	.word	0x07020021
6000176c:	20000014 	.word	0x20000014
60001770:	13080025 	.word	0x13080025
60001774:	10000009 	.word	0x10000009
60001778:	20200016 	.word	0x20200016
6000177c:	130b0027 	.word	0x130b0027
60001780:	40000017 	.word	0x40000017
60001784:	60000018 	.word	0x60000018
60001788:	070b002f 	.word	0x070b002f
6000178c:	70000019 	.word	0x70000019
60001790:	8000001a 	.word	0x8000001a

60001794 <configure_external_ram>:
{
60001794:	b5f0      	push	{r4, r5, r6, r7, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001796:	4bb8      	ldr	r3, [pc, #736]	; (60001a78 <configure_external_ram+0x2e4>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001798:	2218      	movs	r2, #24
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000179a:	4eb8      	ldr	r6, [pc, #736]	; (60001a7c <configure_external_ram+0x2e8>)
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
6000179c:	2001      	movs	r0, #1
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
6000179e:	4fb8      	ldr	r7, [pc, #736]	; (60001a80 <configure_external_ram+0x2ec>)
{
600017a0:	b083      	sub	sp, #12
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600017a2:	f8c3 625c 	str.w	r6, [r3, #604]	; 0x25c
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600017a6:	49b7      	ldr	r1, [pc, #732]	; (60001a84 <configure_external_ram+0x2f0>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
600017a8:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600017ac:	4db6      	ldr	r5, [pc, #728]	; (60001a88 <configure_external_ram+0x2f4>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600017ae:	f8c3 6264 	str.w	r6, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600017b2:	f5a6 4630 	sub.w	r6, r6, #45056	; 0xb000
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600017b6:	4cb5      	ldr	r4, [pc, #724]	; (60001a8c <configure_external_ram+0x2f8>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600017b8:	f8c3 6268 	str.w	r6, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600017bc:	f8c3 526c 	str.w	r5, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600017c0:	f8c3 5270 	str.w	r5, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600017c4:	f8c3 5274 	str.w	r5, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600017c8:	f8c3 5278 	str.w	r5, [r3, #632]	; 0x278
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600017cc:	f248 750c 	movw	r5, #34572	; 0x870c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
600017d0:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
600017d2:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
600017d4:	675a      	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
600017d6:	679a      	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
600017d8:	67da      	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
600017da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
600017de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
600017e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600017e6:	f8c1 032c 	str.w	r0, [r1, #812]	; 0x32c
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600017ea:	4aa9      	ldr	r2, [pc, #676]	; (60001a90 <configure_external_ram+0x2fc>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
600017ec:	f8c1 0330 	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
600017f0:	f8c1 0334 	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
600017f4:	f8c1 0338 	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
600017f8:	f8c1 033c 	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
600017fc:	f8c1 0350 	str.w	r0, [r1, #848]	; 0x350
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001800:	69a1      	ldr	r1, [r4, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001802:	4ba4      	ldr	r3, [pc, #656]	; (60001a94 <configure_external_ram+0x300>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001804:	400a      	ands	r2, r1
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001806:	48a4      	ldr	r0, [pc, #656]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001808:	49a4      	ldr	r1, [pc, #656]	; (60001a9c <configure_external_ram+0x308>)
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
6000180a:	4313      	orrs	r3, r2
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
6000180c:	4aa4      	ldr	r2, [pc, #656]	; (60001aa0 <configure_external_ram+0x30c>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
6000180e:	61a3      	str	r3, [r4, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60001810:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
60001814:	f043 030c 	orr.w	r3, r3, #12
60001818:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
6000181c:	f04f 34ff 	mov.w	r4, #4294967295
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001820:	6803      	ldr	r3, [r0, #0]
60001822:	f043 0302 	orr.w	r3, r3, #2
60001826:	6003      	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001828:	6803      	ldr	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
6000182a:	402b      	ands	r3, r5
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
6000182c:	f44f 5500 	mov.w	r5, #8192	; 0x2000
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001830:	431a      	orrs	r2, r3
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001832:	4b9c      	ldr	r3, [pc, #624]	; (60001aa4 <configure_external_ram+0x310>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001834:	6002      	str	r2, [r0, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001836:	6044      	str	r4, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001838:	688a      	ldr	r2, [r1, #8]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000183a:	4c9b      	ldr	r4, [pc, #620]	; (60001aa8 <configure_external_ram+0x314>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000183c:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000183e:	4a9b      	ldr	r2, [pc, #620]	; (60001aac <configure_external_ram+0x318>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001840:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001844:	6083      	str	r3, [r0, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
60001846:	68c3      	ldr	r3, [r0, #12]
60001848:	f023 0378 	bic.w	r3, r3, #120	; 0x78
6000184c:	60c3      	str	r3, [r0, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000184e:	6a03      	ldr	r3, [r0, #32]
60001850:	4013      	ands	r3, r2
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001852:	4323      	orrs	r3, r4
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001854:	6203      	str	r3, [r0, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001856:	6a03      	ldr	r3, [r0, #32]
60001858:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF2CR0 = mask;
6000185a:	4a95      	ldr	r2, [pc, #596]	; (60001ab0 <configure_external_ram+0x31c>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000185c:	4323      	orrs	r3, r4
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
6000185e:	4c95      	ldr	r4, [pc, #596]	; (60001ab4 <configure_external_ram+0x320>)
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001860:	6243      	str	r3, [r0, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60001862:	6282      	str	r2, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
60001864:	62c2      	str	r2, [r0, #44]	; 0x2c
	FLEXSPI2_INTEN = 0;
60001866:	2200      	movs	r2, #0
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001868:	f8d1 30b8 	ldr.w	r3, [r1, #184]	; 0xb8
6000186c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
60001870:	f043 0301 	orr.w	r3, r3, #1
60001874:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001878:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
6000187c:	498e      	ldr	r1, [pc, #568]	; (60001ab8 <configure_external_ram+0x324>)
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
6000187e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
60001882:	f043 0301 	orr.w	r3, r3, #1
60001886:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
6000188a:	f240 6305 	movw	r3, #1541	; 0x605
	FLEXSPI2_INTEN = 0;
6000188e:	6102      	str	r2, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001890:	6605      	str	r5, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001892:	6704      	str	r4, [r0, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001894:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
60001898:	6645      	str	r5, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
6000189a:	6744      	str	r4, [r0, #116]	; 0x74
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
6000189c:	2402      	movs	r4, #2
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
6000189e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600018a2:	6803      	ldr	r3, [r0, #0]
600018a4:	f023 0302 	bic.w	r3, r3, #2
600018a8:	6003      	str	r3, [r0, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600018aa:	6181      	str	r1, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600018ac:	4b83      	ldr	r3, [pc, #524]	; (60001abc <configure_external_ram+0x328>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
600018ae:	4984      	ldr	r1, [pc, #528]	; (60001ac0 <configure_external_ram+0x32c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600018b0:	61c4      	str	r4, [r0, #28]
	for (int i=0; i < 64; i++) luttable[i] = 0;
600018b2:	f843 2b04 	str.w	r2, [r3], #4
600018b6:	428b      	cmp	r3, r1
600018b8:	d1fb      	bne.n	600018b2 <configure_external_ram+0x11e>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
600018ba:	4a77      	ldr	r2, [pc, #476]	; (60001a98 <configure_external_ram+0x304>)
600018bc:	6813      	ldr	r3, [r2, #0]
600018be:	f043 0301 	orr.w	r3, r3, #1
600018c2:	6013      	str	r3, [r2, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
600018c4:	6813      	ldr	r3, [r2, #0]
600018c6:	f013 0301 	ands.w	r3, r3, #1
600018ca:	d1fb      	bne.n	600018c4 <configure_external_ram+0x130>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600018cc:	487a      	ldr	r0, [pc, #488]	; (60001ab8 <configure_external_ram+0x324>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600018ce:	2102      	movs	r1, #2
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600018d0:	f240 64f5 	movw	r4, #1781	; 0x6f5
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600018d4:	6190      	str	r0, [r2, #24]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600018d6:	f240 4099 	movw	r0, #1177	; 0x499
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600018da:	61d1      	str	r1, [r2, #28]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600018dc:	f240 4166 	movw	r1, #1126	; 0x466
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600018e0:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600018e4:	f242 4401 	movw	r4, #9217	; 0x2401
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600018e8:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600018ec:	4975      	ldr	r1, [pc, #468]	; (60001ac4 <configure_external_ram+0x330>)
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600018ee:	f8c2 0220 	str.w	r0, [r2, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600018f2:	f8c2 1230 	str.w	r1, [r2, #560]	; 0x230
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
600018f6:	f240 4135 	movw	r1, #1077	; 0x435
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
600018fa:	4873      	ldr	r0, [pc, #460]	; (60001ac8 <configure_external_ram+0x334>)
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600018fc:	f8c2 4234 	str.w	r4, [r2, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001900:	f8c2 1240 	str.w	r1, [r2, #576]	; 0x240
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001904:	4c71      	ldr	r4, [pc, #452]	; (60001acc <configure_external_ram+0x338>)
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001906:	f8c2 0250 	str.w	r0, [r2, #592]	; 0x250
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
6000190a:	f242 2001 	movw	r0, #8705	; 0x2201
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
6000190e:	4970      	ldr	r1, [pc, #448]	; (60001ad0 <configure_external_ram+0x33c>)
60001910:	f8c2 1254 	str.w	r1, [r2, #596]	; 0x254
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001914:	2101      	movs	r1, #1
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001916:	f8c2 4260 	str.w	r4, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
6000191a:	f8c2 0264 	str.w	r0, [r2, #612]	; 0x264
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000191e:	485e      	ldr	r0, [pc, #376]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
60001920:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001924:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001928:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000192c:	6943      	ldr	r3, [r0, #20]
6000192e:	07da      	lsls	r2, r3, #31
60001930:	d5fc      	bpl.n	6000192c <configure_external_ram+0x198>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001932:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001934:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001936:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000193a:	4957      	ldr	r1, [pc, #348]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000193c:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
6000193e:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001942:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001946:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000194a:	694b      	ldr	r3, [r1, #20]
6000194c:	07db      	lsls	r3, r3, #31
6000194e:	d5fc      	bpl.n	6000194a <configure_external_ram+0x1b6>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001950:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001952:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001954:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001958:	4a4f      	ldr	r2, [pc, #316]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000195a:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
6000195c:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001960:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001964:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001968:	6953      	ldr	r3, [r2, #20]
6000196a:	07df      	lsls	r7, r3, #31
6000196c:	d5fc      	bpl.n	60001968 <configure_external_ram+0x1d4>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000196e:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001970:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001972:	4858      	ldr	r0, [pc, #352]	; (60001ad4 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001974:	4948      	ldr	r1, [pc, #288]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001976:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001978:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
6000197c:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001980:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001984:	694b      	ldr	r3, [r1, #20]
60001986:	07de      	lsls	r6, r3, #31
60001988:	d5fc      	bpl.n	60001984 <configure_external_ram+0x1f0>
	uint32_t id = FLEXSPI2_RFDR0;
6000198a:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
	if (flexspi2_psram_id(0) == 0x5D0D) {
6000198e:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001992:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60001994:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001996:	6148      	str	r0, [r1, #20]
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001998:	4293      	cmp	r3, r2
6000199a:	d165      	bne.n	60001a68 <configure_external_ram+0x2d4>
	FLEXSPI2_IPCR0 = addr;
6000199c:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000199e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019a2:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019a4:	483c      	ldr	r0, [pc, #240]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
600019a6:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019aa:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019ae:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019b2:	6943      	ldr	r3, [r0, #20]
600019b4:	07dd      	lsls	r5, r3, #31
600019b6:	d5fc      	bpl.n	600019b2 <configure_external_ram+0x21e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019b8:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600019ba:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019be:	2100      	movs	r1, #0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019c0:	4a35      	ldr	r2, [pc, #212]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019c2:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
600019c4:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019c8:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019cc:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019d0:	6953      	ldr	r3, [r2, #20]
600019d2:	07dc      	lsls	r4, r3, #31
600019d4:	d5fc      	bpl.n	600019d0 <configure_external_ram+0x23c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019d6:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600019d8:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019dc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019e0:	492d      	ldr	r1, [pc, #180]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019e2:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
600019e4:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019e8:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019ec:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019f0:	694b      	ldr	r3, [r1, #20]
600019f2:	07d8      	lsls	r0, r3, #31
600019f4:	d5fc      	bpl.n	600019f0 <configure_external_ram+0x25c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019f6:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600019f8:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019fc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a00:	4a25      	ldr	r2, [pc, #148]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a02:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60001a04:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a08:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a0c:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a10:	6953      	ldr	r3, [r2, #20]
60001a12:	07d9      	lsls	r1, r3, #31
60001a14:	d5fc      	bpl.n	60001a10 <configure_external_ram+0x27c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a16:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001a18:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001a1c:	482d      	ldr	r0, [pc, #180]	; (60001ad4 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a1e:	491e      	ldr	r1, [pc, #120]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a20:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001a22:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001a26:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a2a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a2e:	694b      	ldr	r3, [r1, #20]
60001a30:	07da      	lsls	r2, r3, #31
60001a32:	d5fc      	bpl.n	60001a2e <configure_external_ram+0x29a>
	uint32_t id = FLEXSPI2_RFDR0;
60001a34:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001a38:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001a3c:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60001a3e:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001a40:	6148      	str	r0, [r1, #20]
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001a42:	4293      	cmp	r3, r2
60001a44:	d050      	beq.n	60001ae8 <configure_external_ram+0x354>
60001a46:	2508      	movs	r5, #8
60001a48:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
			external_psram_size * 0x100000 -
60001a4c:	4922      	ldr	r1, [pc, #136]	; (60001ad8 <configure_external_ram+0x344>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001a4e:	2000      	movs	r0, #0
			external_psram_size * 0x100000 -
60001a50:	4b22      	ldr	r3, [pc, #136]	; (60001adc <configure_external_ram+0x348>)
			external_psram_size = 16;
60001a52:	4a23      	ldr	r2, [pc, #140]	; (60001ae0 <configure_external_ram+0x34c>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001a54:	9000      	str	r0, [sp, #0]
			external_psram_size = 16;
60001a56:	7015      	strb	r5, [r2, #0]
			external_psram_size * 0x100000 -
60001a58:	1a5a      	subs	r2, r3, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001a5a:	2301      	movs	r3, #1
60001a5c:	4821      	ldr	r0, [pc, #132]	; (60001ae4 <configure_external_ram+0x350>)
60001a5e:	4422      	add	r2, r4
60001a60:	f000 fa0a 	bl	60001e78 <__sm_set_pool_veneer>
}
60001a64:	b003      	add	sp, #12
60001a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001a68:	4b1e      	ldr	r3, [pc, #120]	; (60001ae4 <configure_external_ram+0x350>)
60001a6a:	2200      	movs	r2, #0
60001a6c:	e9c3 2200 	strd	r2, r2, [r3]
60001a70:	e9c3 2202 	strd	r2, r2, [r3, #8]
}
60001a74:	b003      	add	sp, #12
60001a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
60001a78:	401f8000 	.word	0x401f8000
60001a7c:	0001b0f9 	.word	0x0001b0f9
60001a80:	000110f9 	.word	0x000110f9
60001a84:	401f8400 	.word	0x401f8400
60001a88:	000170f9 	.word	0x000170f9
60001a8c:	400fc000 	.word	0x400fc000
60001a90:	1ffffcff 	.word	0x1ffffcff
60001a94:	a0000300 	.word	0xa0000300
60001a98:	402a4000 	.word	0x402a4000
60001a9c:	402a8000 	.word	0x402a8000
60001aa0:	ffff0012 	.word	0xffff0012
60001aa4:	00f737ff 	.word	0x00f737ff
60001aa8:	80000040 	.word	0x80000040
60001aac:	7cf0ff00 	.word	0x7cf0ff00
60001ab0:	830f00ff 	.word	0x830f00ff
60001ab4:	00020063 	.word	0x00020063
60001ab8:	5af05af0 	.word	0x5af05af0
60001abc:	402a4200 	.word	0x402a4200
60001ac0:	402a4300 	.word	0x402a4300
60001ac4:	3018049f 	.word	0x3018049f
60001ac8:	0a1806eb 	.word	0x0a1806eb
60001acc:	0a180638 	.word	0x0a180638
60001ad0:	26013206 	.word	0x26013206
60001ad4:	00030004 	.word	0x00030004
60001ad8:	70000000 	.word	0x70000000
60001adc:	70000000 	.word	0x70000000
60001ae0:	2000210c 	.word	0x2000210c
60001ae4:	2000206c 	.word	0x2000206c
	FLEXSPI2_IPCR0 = addr;
60001ae8:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001aec:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001af0:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001af2:	4808      	ldr	r0, [pc, #32]	; (60001b14 <configure_external_ram+0x380>)
	FLEXSPI2_IPCR0 = addr;
60001af4:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001af8:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001afc:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b00:	6943      	ldr	r3, [r0, #20]
60001b02:	07db      	lsls	r3, r3, #31
60001b04:	d5fc      	bpl.n	60001b00 <configure_external_ram+0x36c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b06:	2301      	movs	r3, #1
60001b08:	2510      	movs	r5, #16
60001b0a:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
60001b0e:	6143      	str	r3, [r0, #20]
			external_psram_size = 16;
60001b10:	e79c      	b.n	60001a4c <configure_external_ram+0x2b8>
60001b12:	bf00      	nop
60001b14:	402a4000 	.word	0x402a4000

60001b18 <usb_pll_start>:
{
60001b18:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001b1a:	4a15      	ldr	r2, [pc, #84]	; (60001b70 <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001b1c:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001b1e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001b22:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001b26:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001b2a:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001b2e:	f243 0042 	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001b32:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001b34:	f013 0f02 	tst.w	r3, #2
60001b38:	d10e      	bne.n	60001b58 <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001b3a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
60001b3e:	d00f      	beq.n	60001b60 <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001b40:	f413 5f80 	tst.w	r3, #4096	; 0x1000
60001b44:	d00e      	beq.n	60001b64 <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001b46:	2b00      	cmp	r3, #0
60001b48:	daf3      	bge.n	60001b32 <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001b4a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
60001b4e:	d10b      	bne.n	60001b68 <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001b50:	065b      	lsls	r3, r3, #25
60001b52:	d50b      	bpl.n	60001b6c <usb_pll_start+0x54>
}
60001b54:	bcf0      	pop	{r4, r5, r6, r7}
60001b56:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001b58:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001b5a:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001b5c:	6190      	str	r0, [r2, #24]
			continue;
60001b5e:	e7e8      	b.n	60001b32 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001b60:	6155      	str	r5, [r2, #20]
			continue;
60001b62:	e7e6      	b.n	60001b32 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001b64:	6156      	str	r6, [r2, #20]
			continue;
60001b66:	e7e4      	b.n	60001b32 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001b68:	6191      	str	r1, [r2, #24]
			continue;
60001b6a:	e7e2      	b.n	60001b32 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001b6c:	6157      	str	r7, [r2, #20]
			continue;
60001b6e:	e7e0      	b.n	60001b32 <usb_pll_start+0x1a>
60001b70:	400d8000 	.word	0x400d8000

60001b74 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001b74:	4a3f      	ldr	r2, [pc, #252]	; (60001c74 <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001b76:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001b78:	493f      	ldr	r1, [pc, #252]	; (60001c78 <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001b7a:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001b7e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001b82:	f04f 0c00 	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001b86:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 60001c7c <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001b8a:	f023 0301 	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001b8e:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 60001c80 <tempmon_init+0x10c>
{
60001b92:	b430      	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001b94:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001b98:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60001b9c:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001ba0:	4d38      	ldr	r5, [pc, #224]	; (60001c84 <tempmon_init+0x110>)
60001ba2:	b2cb      	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001ba4:	4c38      	ldr	r4, [pc, #224]	; (60001c88 <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001ba6:	4839      	ldr	r0, [pc, #228]	; (60001c8c <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001ba8:	602b      	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001baa:	ee07 3a90 	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001bae:	0d0b      	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001bb0:	f3c1 210b 	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001bb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001bb8:	ee06 3a90 	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001bbc:	ee07 1a10 	vmov	s14, r1
60001bc0:	4b33      	ldr	r3, [pc, #204]	; (60001c90 <tempmon_init+0x11c>)
60001bc2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001bc6:	6021      	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001bc8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001bcc:	4931      	ldr	r1, [pc, #196]	; (60001c94 <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bce:	ee37 6ac6 	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bd2:	ee37 5ac5 	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001bd6:	ee76 6ac7 	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001bda:	ee77 7ae5 	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bde:	ee26 6a26 	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001be2:	edc3 6a00 	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001be6:	ee25 5a26 	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001bea:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bee:	ee67 4aa6 	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001bf2:	edc0 7a00 	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bf6:	eec6 5a27 	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001bfa:	4827      	ldr	r0, [pc, #156]	; (60001c98 <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bfc:	ee85 6a27 	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c00:	eec4 6aa7 	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c04:	ee75 5a87 	vadd.f32	s11, s11, s14
60001c08:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c0c:	ee36 6a07 	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c10:	ee15 4a90 	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c14:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c18:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c1c:	ee76 7a87 	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c20:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c24:	ee16 3a10 	vmov	r3, s12
60001c28:	f8d2 4190 	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c30:	ea01 4103 	and.w	r1, r1, r3, lsl #16
60001c34:	4321      	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c36:	ee17 3a90 	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c3a:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001c3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
60001c42:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
60001c46:	430b      	orrs	r3, r1
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001c48:	4914      	ldr	r1, [pc, #80]	; (60001c9c <tempmon_init+0x128>)
60001c4a:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001c4e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
60001c52:	f043 0302 	orr.w	r3, r3, #2
60001c56:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
60001c5a:	4b11      	ldr	r3, [pc, #68]	; (60001ca0 <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001c5c:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
60001c60:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001c64:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001c68:	2201      	movs	r2, #1
}
60001c6a:	bc30      	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001c6c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
60001c70:	4770      	bx	lr
60001c72:	bf00      	nop
60001c74:	400d8100 	.word	0x400d8100
60001c78:	401f4400 	.word	0x401f4400
60001c7c:	42aa0000 	.word	0x42aa0000
60001c80:	42b40000 	.word	0x42b40000
60001c84:	200020d0 	.word	0x200020d0
60001c88:	200020cc 	.word	0x200020cc
60001c8c:	200020d4 	.word	0x200020d4
60001c90:	200020d8 	.word	0x200020d8
60001c94:	0fff0000 	.word	0x0fff0000
60001c98:	e000e400 	.word	0xe000e400
60001c9c:	20001800 	.word	0x20001800
60001ca0:	00001e35 	.word	0x00001e35

60001ca4 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001ca4:	4b31      	ldr	r3, [pc, #196]	; (60001d6c <usb_init+0xc8>)
60001ca6:	f640 7261 	movw	r2, #3937	; 0xf61
{
60001caa:	b510      	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001cac:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001cb0:	f240 4404 	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
60001cb4:	f000 f8d4 	bl	60001e60 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001cb8:	4a2d      	ldr	r2, [pc, #180]	; (60001d70 <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
60001cba:	492e      	ldr	r1, [pc, #184]	; (60001d74 <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001cbc:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001cc0:	482d      	ldr	r0, [pc, #180]	; (60001d78 <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001cc2:	f043 0303 	orr.w	r3, r3, #3
60001cc6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001cca:	4b2c      	ldr	r3, [pc, #176]	; (60001d7c <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
60001ccc:	f8c1 4160 	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001cd0:	6802      	ldr	r2, [r0, #0]
60001cd2:	421a      	tst	r2, r3
60001cd4:	d103      	bne.n	60001cde <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
60001cd6:	f8d1 31a8 	ldr.w	r3, [r1, #424]	; 0x1a8
60001cda:	079a      	lsls	r2, r3, #30
60001cdc:	d01b      	beq.n	60001d16 <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001cde:	4a25      	ldr	r2, [pc, #148]	; (60001d74 <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001ce0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
60001ce4:	4b24      	ldr	r3, [pc, #144]	; (60001d78 <usb_init+0xd4>)
60001ce6:	6359      	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001ce8:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001cec:	f043 0302 	orr.w	r3, r3, #2
60001cf0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001cf4:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001cf8:	079b      	lsls	r3, r3, #30
60001cfa:	d4fb      	bmi.n	60001cf4 <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001cfc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
60001d00:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001d04:	4b1c      	ldr	r3, [pc, #112]	; (60001d78 <usb_init+0xd4>)
60001d06:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001d0a:	f8c1 028c 	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001d0e:	2019      	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001d10:	639a      	str	r2, [r3, #56]	; 0x38
		delay(25);
60001d12:	f000 f8a9 	bl	60001e68 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001d16:	4a18      	ldr	r2, [pc, #96]	; (60001d78 <usb_init+0xd4>)
60001d18:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001d1c:	4c15      	ldr	r4, [pc, #84]	; (60001d74 <usb_init+0xd0>)
	USBPHY1_PWD = 0;
60001d1e:	2100      	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001d20:	6390      	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001d22:	200a      	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d24:	4b16      	ldr	r3, [pc, #88]	; (60001d80 <usb_init+0xdc>)
	USBPHY1_PWD = 0;
60001d26:	6011      	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d28:	f44f 7220 	mov.w	r2, #640	; 0x280
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001d2c:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d30:	4618      	mov	r0, r3
60001d32:	f000 f89d 	bl	60001e70 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
60001d36:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d3a:	4603      	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001d3c:	f44f 0081 	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001d40:	f240 1143 	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001d44:	6018      	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001d46:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
60001d4a:	641a      	str	r2, [r3, #64]	; 0x40
60001d4c:	4b0d      	ldr	r3, [pc, #52]	; (60001d84 <usb_init+0xe0>)
60001d4e:	4a0e      	ldr	r2, [pc, #56]	; (60001d88 <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001d50:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
60001d54:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001d58:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
60001d5c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001d60:	2301      	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001d62:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
60001d66:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
60001d6a:	bd10      	pop	{r4, pc}
60001d6c:	400d8000 	.word	0x400d8000
60001d70:	400fc000 	.word	0x400fc000
60001d74:	402e0000 	.word	0x402e0000
60001d78:	400d9000 	.word	0x400d9000
60001d7c:	001e1c00 	.word	0x001e1c00
60001d80:	20000000 	.word	0x20000000
60001d84:	20001800 	.word	0x20001800
60001d88:	0000201d 	.word	0x0000201d

60001d8c <_reboot_Teensyduino_>:


FLASHMEM __attribute__((noinline)) void _reboot_Teensyduino_(void)
{
60001d8c:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60001d8e:	4b0e      	ldr	r3, [pc, #56]	; (60001dc8 <_reboot_Teensyduino_+0x3c>)
60001d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
60001d92:	079b      	lsls	r3, r3, #30
60001d94:	d400      	bmi.n	60001d98 <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
60001d96:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60001d98:	b672      	cpsid	i
		USB1_USBCMD = 0;
60001d9a:	4b0c      	ldr	r3, [pc, #48]	; (60001dcc <_reboot_Teensyduino_+0x40>)
60001d9c:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
60001d9e:	4a0c      	ldr	r2, [pc, #48]	; (60001dd0 <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
60001da0:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001da4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001da8:	490a      	ldr	r1, [pc, #40]	; (60001dd4 <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001daa:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001dae:	6411      	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001db0:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001db2:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001db6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
60001dba:	4807      	ldr	r0, [pc, #28]	; (60001dd8 <_reboot_Teensyduino_+0x4c>)
60001dbc:	4a07      	ldr	r2, [pc, #28]	; (60001ddc <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001dbe:	69db      	ldr	r3, [r3, #28]
		*p = 0xEB120000;
60001dc0:	6002      	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001dc2:	689b      	ldr	r3, [r3, #8]
60001dc4:	4798      	blx	r3
	}
	__builtin_unreachable();
60001dc6:	bf00      	nop
60001dc8:	401f4400 	.word	0x401f4400
60001dcc:	402e0000 	.word	0x402e0000
60001dd0:	400ac000 	.word	0x400ac000
60001dd4:	00200003 	.word	0x00200003
60001dd8:	20208000 	.word	0x20208000
60001ddc:	eb120000 	.word	0xeb120000

60001de0 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001de0:	4b10      	ldr	r3, [pc, #64]	; (60001e24 <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001de2:	20a0      	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001de4:	4a10      	ldr	r2, [pc, #64]	; (60001e28 <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001de6:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001de8:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
{
60001dec:	b410      	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001dee:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001df0:	f240 6437 	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001df4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001df6:	f441 7140 	orr.w	r1, r1, #768	; 0x300
60001dfa:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001dfc:	6454      	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001dfe:	6490      	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
60001e00:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001e02:	061b      	lsls	r3, r3, #24
60001e04:	d4fc      	bmi.n	60001e00 <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001e06:	4a09      	ldr	r2, [pc, #36]	; (60001e2c <analog_init+0x4c>)
60001e08:	f240 6137 	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001e0c:	23a0      	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001e0e:	6451      	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001e10:	6493      	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
60001e12:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001e14:	f013 0380 	ands.w	r3, r3, #128	; 0x80
60001e18:	d1fb      	bne.n	60001e12 <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
60001e1a:	4a05      	ldr	r2, [pc, #20]	; (60001e30 <analog_init+0x50>)
60001e1c:	7013      	strb	r3, [r2, #0]
}
60001e1e:	f85d 4b04 	ldr.w	r4, [sp], #4
60001e22:	4770      	bx	lr
60001e24:	400fc000 	.word	0x400fc000
60001e28:	400c4000 	.word	0x400c4000
60001e2c:	400c8000 	.word	0x400c8000
60001e30:	2000210b 	.word	0x2000210b

60001e34 <_init>:
60001e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60001e36:	bf00      	nop
60001e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
60001e3a:	bc08      	pop	{r3}
60001e3c:	469e      	mov	lr, r3
60001e3e:	4770      	bx	lr

60001e40 <____libc_init_array_veneer>:
60001e40:	f85f f000 	ldr.w	pc, [pc]	; 60001e44 <____libc_init_array_veneer+0x4>
60001e44:	00004639 	.word	0x00004639

60001e48 <__main_veneer>:
60001e48:	f85f f000 	ldr.w	pc, [pc]	; 60001e4c <__main_veneer+0x4>
60001e4c:	00001935 	.word	0x00001935

60001e50 <__pwm_init_veneer>:
60001e50:	f85f f000 	ldr.w	pc, [pc]	; 60001e54 <__pwm_init_veneer+0x4>
60001e54:	00001b59 	.word	0x00001b59

60001e58 <__set_arm_clock_veneer>:
60001e58:	f85f f000 	ldr.w	pc, [pc]	; 60001e5c <__set_arm_clock_veneer+0x4>
60001e5c:	00003099 	.word	0x00003099

60001e60 <__usb_init_serialnumber_veneer>:
60001e60:	f85f f000 	ldr.w	pc, [pc]	; 60001e64 <__usb_init_serialnumber_veneer+0x4>
60001e64:	0000278d 	.word	0x0000278d

60001e68 <__delay_veneer>:
60001e68:	f85f f000 	ldr.w	pc, [pc]	; 60001e6c <__delay_veneer+0x4>
60001e6c:	000017a5 	.word	0x000017a5

60001e70 <__memset_veneer>:
60001e70:	f85f f000 	ldr.w	pc, [pc]	; 60001e74 <__memset_veneer+0x4>
60001e74:	000043c1 	.word	0x000043c1

60001e78 <__sm_set_pool_veneer>:
60001e78:	f85f f000 	ldr.w	pc, [pc]	; 60001e7c <__sm_set_pool_veneer+0x4>
60001e7c:	000033f9 	.word	0x000033f9

60001e80 <__frame_dummy_init_array_entry>:
60001e80:	00000045                                E...

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN); // wait
	// stop the SRTC
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
	// set the SRTC
	SNVS_LPSRTCLR = t << 15;
      20:	4805      	ldr	r0, [pc, #20]	; (38 <_teensy_model_identifier+0x13>)
	SNVS_LPSRTCMR = t >> 17;
	// start the SRTC
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
      22:	4b06      	ldr	r3, [pc, #24]	; (3c <_teensy_model_identifier+0x17>)
	SNVS_LPSRTCMR = t >> 17;
      24:	1a1b      	subs	r3, r3, r0
	SNVS_LPSRTCLR = t << 15;
      26:	0fd9      	lsrs	r1, r3, #31
	SNVS_LPSRTCMR = t >> 17;
      28:	eb01 01a3 	add.w	r1, r1, r3, asr #2
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
      2c:	1049      	asrs	r1, r1, #1
      2e:	d002      	beq.n	36 <_teensy_model_identifier+0x11>
      30:	4b03      	ldr	r3, [pc, #12]	; (40 <_teensy_model_identifier+0x1b>)
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
      32:	b103      	cbz	r3, 36 <_teensy_model_identifier+0x11>
      34:	4718      	bx	r3
      36:	4770      	bx	lr
	// start the RTC and sync it to the SRTC
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
      38:	20001ac0 	.word	0x20001ac0
      3c:	20001ac0 	.word	0x20001ac0
}
      40:	00000000 	.word	0x00000000

00000044 <frame_dummy>:
      44:	b508      	push	{r3, lr}
      46:	4b05      	ldr	r3, [pc, #20]	; (5c <frame_dummy+0x18>)
		return 0;
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4905      	ldr	r1, [pc, #20]	; (60 <frame_dummy+0x1c>)
      4c:	4805      	ldr	r0, [pc, #20]	; (64 <frame_dummy+0x20>)
      4e:	f3af 8000 	nop.w
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
}
      52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      56:	f7ff bfe3 	b.w	20 <register_tm_clones>
      5a:	bf00      	nop
      5c:	00000000 	.word	0x00000000
}
      60:	2000207c 	.word	0x2000207c
      64:	6000e400 	.word	0x6000e400

00000068 <Print::write(char const*) [clone .isra.0]>:
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
      68:	b169      	cbz	r1, 86 <Print::write(char const*) [clone .isra.0]+0x1e>
      6a:	b570      	push	{r4, r5, r6, lr}
      6c:	4605      	mov	r5, r0
							  return write((const uint8_t *)str, strlen(str)); }
      6e:	4608      	mov	r0, r1
      70:	460c      	mov	r4, r1
      72:	f004 fce5 	bl	4a40 <strlen>
      76:	682b      	ldr	r3, [r5, #0]
      78:	4602      	mov	r2, r0
      7a:	4621      	mov	r1, r4
      7c:	4628      	mov	r0, r5
      7e:	685b      	ldr	r3, [r3, #4]
      80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      84:	4718      	bx	r3
      86:	4770      	bx	lr

00000088 <Print::println(char const*) [clone .isra.0]>:
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
      88:	b538      	push	{r3, r4, r5, lr}
      8a:	4604      	mov	r4, r0
	size_t write(const char *str)			{ if (str == nullptr) return 0;
      8c:	b149      	cbz	r1, a2 <Print::println(char const*) [clone .isra.0]+0x1a>
							  return write((const uint8_t *)str, strlen(str)); }
      8e:	4608      	mov	r0, r1
      90:	460d      	mov	r5, r1
      92:	f004 fcd5 	bl	4a40 <strlen>
      96:	6823      	ldr	r3, [r4, #0]
      98:	4602      	mov	r2, r0
      9a:	4629      	mov	r1, r5
      9c:	685b      	ldr	r3, [r3, #4]
      9e:	4620      	mov	r0, r4
      a0:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
      a2:	4620      	mov	r0, r4
      a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      a8:	f001 b9c4 	b.w	1434 <Print::println()>

000000ac <setup>:
}
      ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

					// now set new pin info.
					*(portControlRegister(hardware->rx_pins[rx_pin_new_index].pin)) =  IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;;
					*(portConfigRegister(hardware->rx_pins[rx_pin_new_index].pin)) = hardware->rx_pins[rx_pin_new_index].mux_val;
					if (hardware->rx_pins[rx_pin_new_index].select_input_register) {
					 	*(hardware->rx_pins[rx_pin_new_index].select_input_register) =  hardware->rx_pins[rx_pin_new_index].select_val;		
      b0:	2101      	movs	r1, #1
					}
				}		
				rx_pin_index_ = rx_pin_new_index;
      b2:	200d      	movs	r0, #13
				//Serial.printf("  PINCFG: %x MODIR: %x\n", port->PINCFG, port->MODIR);	
				return;
			}
		}
	}
}
      b4:	4d2a      	ldr	r5, [pc, #168]	; (160 <setup+0xb4>)
		for (uint8_t rx_pin_new_index = 0; rx_pin_new_index < cnt_rx_pins; rx_pin_new_index++) {
      b6:	f001 fc05 	bl	18c4 <pinMode>
			if (pin == hardware->rx_pins[rx_pin_new_index].pin) {
      ba:	2100      	movs	r1, #0
      bc:	200d      	movs	r0, #13
      be:	f001 fbc5 	bl	184c <digitalWrite>
      c2:	4c28      	ldr	r4, [pc, #160]	; (164 <setup+0xb8>)
      c4:	682e      	ldr	r6, [r5, #0]
      c6:	f240 28ee 	movw	r8, #750	; 0x2ee
      ca:	4f27      	ldr	r7, [pc, #156]	; (168 <setup+0xbc>)
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
	p->SM[submodule].VAL1 = newdiv - 1;
	p->SM[submodule].VAL0 = (p->SM[submodule].VAL0 * newdiv) / olddiv;
	p->SM[submodule].VAL3 = (p->SM[submodule].VAL3 * newdiv) / olddiv;
	p->SM[submodule].VAL5 = (p->SM[submodule].VAL5 * newdiv) / olddiv;
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
      cc:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 188 <setup+0xdc>
}
      d0:	f002 ff42 	bl	2f58 <yield>
	while (newdiv > 65535 && prescale < 7) {
      d4:	7823      	ldrb	r3, [r4, #0]
      d6:	2b00      	cmp	r3, #0
      d8:	d034      	beq.n	144 <setup+0x98>
      da:	783b      	ldrb	r3, [r7, #0]
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
      dc:	07db      	lsls	r3, r3, #31
      de:	d531      	bpl.n	144 <setup+0x98>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
      e0:	682b      	ldr	r3, [r5, #0]
      e2:	f8d9 2000 	ldr.w	r2, [r9]
      e6:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
      e8:	2b0e      	cmp	r3, #14
      ea:	d92b      	bls.n	144 <setup+0x98>
void setup() {
  pinMode(LED_PIN, OUTPUT);
  digitalWrite(LED_PIN, LOW);

  Serial.begin(BAUD_USB);
  Serial2.begin(BAUD_UART);  // Teensy 4.1: Serial2 is pins 7=RX2, 8=TX2
      ec:	2200      	movs	r2, #0
      ee:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
      f2:	481e      	ldr	r0, [pc, #120]	; (16c <setup+0xc0>)
      f4:	f000 fea8 	bl	e48 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)>

  delay(300);
      f8:	f44f 7096 	mov.w	r0, #300	; 0x12c
      fc:	f001 fb52 	bl	17a4 <delay>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     100:	2138      	movs	r1, #56	; 0x38
     102:	481b      	ldr	r0, [pc, #108]	; (170 <setup+0xc4>)
     104:	f002 feaa 	bl	2e5c <usb_serial_write>
     108:	481a      	ldr	r0, [pc, #104]	; (174 <setup+0xc8>)
     10a:	f001 f993 	bl	1434 <Print::println()>
     10e:	210d      	movs	r1, #13
     110:	4819      	ldr	r0, [pc, #100]	; (178 <setup+0xcc>)
     112:	f002 fea3 	bl	2e5c <usb_serial_write>
     116:	2122      	movs	r1, #34	; 0x22
     118:	4818      	ldr	r0, [pc, #96]	; (17c <setup+0xd0>)
     11a:	f002 fe9f 	bl	2e5c <usb_serial_write>
     11e:	4815      	ldr	r0, [pc, #84]	; (174 <setup+0xc8>)
     120:	f001 f988 	bl	1434 <Print::println()>
     124:	214b      	movs	r1, #75	; 0x4b
     126:	4816      	ldr	r0, [pc, #88]	; (180 <setup+0xd4>)
     128:	f002 fe98 	bl	2e5c <usb_serial_write>
     12c:	4811      	ldr	r0, [pc, #68]	; (174 <setup+0xc8>)
     12e:	f001 f981 	bl	1434 <Print::println()>
     132:	2153      	movs	r1, #83	; 0x53
     134:	4813      	ldr	r0, [pc, #76]	; (184 <setup+0xd8>)
     136:	f002 fe91 	bl	2e5c <usb_serial_write>
     13a:	480e      	ldr	r0, [pc, #56]	; (174 <setup+0xc8>)
  Serial.println("\n[Teensy] OTA HEX receiver ready on Serial2 (7=RX,8=TX).");
  Serial.print  ("[Teensy] FW: "); Serial.println(FW_VERSION);
  Serial.println("[Teensy] Commands over Serial2: HELLO <token> | BEGIN HEX | L <hex> | END |");
  Serial.println("          PING | VERSION | SET BLINK <ms> | HB ON|OFF | ECHO ON|OFF | STATUS | HELP");
}
     13c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     140:	f001 b978 	b.w	1434 <Print::println()>
			uint32_t elapsed = systick_millis_count - millis_begin;
     144:	682b      	ldr	r3, [r5, #0]
			if (usb_configuration) {
     146:	7822      	ldrb	r2, [r4, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
     148:	1b9b      	subs	r3, r3, r6
			if (usb_configuration) {
     14a:	b12a      	cbz	r2, 158 <setup+0xac>
				if (elapsed > 2000) break;
     14c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
     150:	d8cc      	bhi.n	ec <setup+0x40>
			yield();
     152:	f002 ff01 	bl	2f58 <yield>
     156:	e7bb      	b.n	d0 <setup+0x24>
				if (elapsed > 750) break;
     158:	4543      	cmp	r3, r8
     15a:	d9fa      	bls.n	152 <setup+0xa6>
     15c:	e7c6      	b.n	ec <setup+0x40>
     15e:	bf00      	nop
     160:	200020e4 	.word	0x200020e4
     164:	20002114 	.word	0x20002114
     168:	20002113 	.word	0x20002113
     16c:	20001028 	.word	0x20001028
     170:	20000cf0 	.word	0x20000cf0
     174:	20001018 	.word	0x20001018
     178:	20000d2c 	.word	0x20000d2c
     17c:	20000d3c 	.word	0x20000d3c
     180:	20000d60 	.word	0x20000d60
     184:	20000dac 	.word	0x20000dac
     188:	200020f4 	.word	0x200020f4

0000018c <loop>:
		s = (*s < '5') ? "0" : "1";
		decpt++;
	}

	// if all zeros, limit to precision
	if (-decpt  > (int)precision) {
     18c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     190:	4aa9      	ldr	r2, [pc, #676]	; (438 <loop+0x2ac>)
     192:	b08f      	sub	sp, #60	; 0x3c
		s = "0";
		decpt = -precision;
     194:	f8df b318 	ldr.w	fp, [pc, #792]	; 4b0 <loop+0x324>
     198:	6811      	ldr	r1, [r2, #0]
     19a:	f8df a318 	ldr.w	sl, [pc, #792]	; 4b4 <loop+0x328>
	}

	reqd = strlen(s);

	// add 1 for decimal point
	if (reqd > decpt) reqd++;
     19e:	f8db 3000 	ldr.w	r3, [fp]
		decpt = -precision;
     1a2:	1a5b      	subs	r3, r3, r1
     1a4:	f8da 1000 	ldr.w	r1, [sl]
	if (reqd > decpt) reqd++;
     1a8:	428b      	cmp	r3, r1
     1aa:	f080 8104 	bcs.w	3b6 <loop+0x22a>

	// add 1 for zero in front of decimal point
	if (decpt == 0) reqd++;
     1ae:	f8df 9308 	ldr.w	r9, [pc, #776]	; 4b8 <loop+0x32c>
			if (newDecimalPoint - decpt == precision + 1) decpt++;
		}
	}

	// add 1 for sign if negative
	if (sign) reqd++;
     1b2:	f899 3000 	ldrb.w	r3, [r9]
	if (decpt == 0) reqd++;
     1b6:	b143      	cbz	r3, 1ca <loop+0x3e>
	if (sign) reqd++;
     1b8:	4aa0      	ldr	r2, [pc, #640]	; (43c <loop+0x2b0>)
     1ba:	f8db 3000 	ldr.w	r3, [fp]

	p = buf;
	e = p + reqd;
	pad = width - reqd;
     1be:	6811      	ldr	r1, [r2, #0]
	e = p + reqd;
     1c0:	1a5b      	subs	r3, r3, r1
     1c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
	if (pad > 0) {
     1c6:	f080 811f 	bcs.w	408 <loop+0x27c>
		e += pad;
		while (pad-- > 0) *p++ = ' ';
     1ca:	4c9d      	ldr	r4, [pc, #628]	; (440 <loop+0x2b4>)
     1cc:	6821      	ldr	r1, [r4, #0]
     1ce:	f011 0101 	ands.w	r1, r1, #1
     1d2:	f000 80e5 	beq.w	3a0 <loop+0x214>
     1d6:	4c9b      	ldr	r4, [pc, #620]	; (444 <loop+0x2b8>)
     1d8:	4d9b      	ldr	r5, [pc, #620]	; (448 <loop+0x2bc>)
	}
	if (sign) *p++ = '-';
	if (decpt == 0 && precision > 0) {
     1da:	4e9c      	ldr	r6, [pc, #624]	; (44c <loop+0x2c0>)
     1dc:	4620      	mov	r0, r4
     1de:	f000 fd55 	bl	c8c <HardwareSerialIMXRT::available()>
		*p++ = '0';
		*p++ = '.';
	}
	else if (decpt < 0 && precision > 0) {
     1e2:	b1c8      	cbz	r0, 218 <loop+0x8c>
     1e4:	4620      	mov	r0, r4
     1e6:	f000 fda3 	bl	d30 <HardwareSerialIMXRT::read()>
     1ea:	782b      	ldrb	r3, [r5, #0]
		*p++ = '0';
     1ec:	b2c7      	uxtb	r7, r0
		*p++ = '.';
     1ee:	b113      	cbz	r3, 1f6 <loop+0x6a>
		*p++ = '0';
     1f0:	7833      	ldrb	r3, [r6, #0]
     1f2:	2b00      	cmp	r3, #0
     1f4:	d063      	beq.n	2be <loop+0x132>
		*p++ = '.';
     1f6:	2f0d      	cmp	r7, #13
     1f8:	d0f0      	beq.n	1dc <loop+0x50>
     1fa:	2f0a      	cmp	r7, #10
		// print leading zeros
		while ( decpt < 0 ) {
     1fc:	d00f      	beq.n	21e <loop+0x92>
			decpt++;
			*p++ = '0';
     1fe:	4894      	ldr	r0, [pc, #592]	; (450 <loop+0x2c4>)
     200:	6883      	ldr	r3, [r0, #8]
		while ( decpt < 0 ) {
     202:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
			*p++ = '0';
     206:	d2e9      	bcs.n	1dc <loop+0x50>
     208:	4639      	mov	r1, r7
     20a:	f001 fa19 	bl	1640 <String::append(char)>
     20e:	4620      	mov	r0, r4
     210:	f000 fd3c 	bl	c8c <HardwareSerialIMXRT::available()>
     214:	2800      	cmp	r0, #0
	if (pad > 0) {
     216:	d1e5      	bne.n	1e4 <loop+0x58>
     218:	b00f      	add	sp, #60	; 0x3c
     21a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
     21e:	4f8c      	ldr	r7, [pc, #560]	; (450 <loop+0x2c4>)
     220:	4638      	mov	r0, r7
     222:	f001 fa8d 	bl	1740 <String::trim()>
		*p++ = *s++;
		if (p == e) break;
		if (--decpt == 0) *p++ = '.';
	}
	if (width < 0) {
		pad = (reqd + width) * -1;
     226:	68bb      	ldr	r3, [r7, #8]
		while (pad-- > 0) *p++ = ' ';
     228:	2b00      	cmp	r3, #0
     22a:	d066      	beq.n	2fa <loop+0x16e>
     22c:	4639      	mov	r1, r7
     22e:	a808      	add	r0, sp, #32
     230:	f001 f95c 	bl	14ec <String::String(String const&)>
     234:	a808      	add	r0, sp, #32
     236:	f001 fa73 	bl	1720 <String::toUpperCase()>
     23a:	4986      	ldr	r1, [pc, #536]	; (454 <loop+0x2c8>)
     23c:	a80b      	add	r0, sp, #44	; 0x2c
     23e:	f001 f937 	bl	14b0 <String::String(char const*)>
     242:	a90b      	add	r1, sp, #44	; 0x2c
	reqd = strlen(s);
     244:	a808      	add	r0, sp, #32
     246:	f001 fa21 	bl	168c <String::startsWith(String const&) const>
	if (reqd > decpt) reqd++;
     24a:	4680      	mov	r8, r0
     24c:	a80b      	add	r0, sp, #44	; 0x2c
     24e:	f001 f969 	bl	1524 <String::~String()>
	if (decpt == 0) reqd++;
     252:	f1b8 0f00 	cmp.w	r8, #0
     256:	d037      	beq.n	2c8 <loop+0x13c>
	if (decpt < 0 && precision > 0) {
     258:	4639      	mov	r1, r7
     25a:	a80b      	add	r0, sp, #44	; 0x2c
     25c:	2206      	movs	r2, #6
     25e:	f001 fa33 	bl	16c8 <String::substring(unsigned int) const>
     262:	497d      	ldr	r1, [pc, #500]	; (458 <loop+0x2cc>)
     264:	a80b      	add	r0, sp, #44	; 0x2c
     266:	f001 f9fb 	bl	1660 <String::equals(char const*) const>
		if (strlen(s) > precision + decpt) {
     26a:	2800      	cmp	r0, #0
		reqd = precision + 2;
     26c:	d04a      	beq.n	304 <loop+0x178>
     26e:	2111      	movs	r1, #17
		if (strlen(s) > precision + decpt) {
     270:	487a      	ldr	r0, [pc, #488]	; (45c <loop+0x2d0>)
     272:	f002 fdf3 	bl	2e5c <usb_serial_write>
			while (newPrecision > 0) {
     276:	487a      	ldr	r0, [pc, #488]	; (460 <loop+0x2d4>)
     278:	f001 f8dc 	bl	1434 <Print::println()>
				val *= 10.0f;
     27c:	2205      	movs	r2, #5
     27e:	4979      	ldr	r1, [pc, #484]	; (464 <loop+0x2d8>)
			while (newPrecision > 0) {
     280:	4620      	mov	r0, r4
				val *= 10.0f;
     282:	f001 f8af 	bl	13e4 <Print::write(unsigned char const*, unsigned int)>
			while (newPrecision > 0) {
     286:	4620      	mov	r0, r4
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
     288:	2706      	movs	r7, #6
     28a:	f001 f8d3 	bl	1434 <Print::println()>
     28e:	200d      	movs	r0, #13
     290:	f001 fb06 	bl	18a0 <digitalRead>
     294:	4601      	mov	r1, r0
			if (newDecimalPoint - decpt == precision + 1) decpt++;
     296:	200d      	movs	r0, #13
     298:	fab1 f181 	clz	r1, r1
     29c:	0949      	lsrs	r1, r1, #5
     29e:	f001 fad5 	bl	184c <digitalWrite>
     2a2:	2078      	movs	r0, #120	; 0x78
     2a4:	f001 fa7e 	bl	17a4 <delay>
     2a8:	3f01      	subs	r7, #1
     2aa:	d1f0      	bne.n	28e <loop+0x102>
     2ac:	2204      	movs	r2, #4
     2ae:	496e      	ldr	r1, [pc, #440]	; (468 <loop+0x2dc>)
     2b0:	4620      	mov	r0, r4
     2b2:	f001 f897 	bl	13e4 <Print::write(unsigned char const*, unsigned int)>
		int ndigs = (val<0) ? 4 : 3;
     2b6:	4620      	mov	r0, r4
     2b8:	f001 f8bc 	bl	1434 <Print::println()>
     2bc:	e031      	b.n	322 <loop+0x196>
     2be:	4639      	mov	r1, r7
     2c0:	4620      	mov	r0, r4
     2c2:	f000 ff9d 	bl	1200 <HardwareSerialIMXRT::write(unsigned char)>
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
     2c6:	e796      	b.n	1f6 <loop+0x6a>
		if (width<0) {
     2c8:	4968      	ldr	r1, [pc, #416]	; (46c <loop+0x2e0>)
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
     2ca:	a808      	add	r0, sp, #32
     2cc:	f001 f9c8 	bl	1660 <String::equals(char const*) const>
		if (copysignf(1.0f, val)<0) *buf++ = '-';
     2d0:	4680      	mov	r8, r0
     2d2:	b350      	cbz	r0, 32a <loop+0x19e>
     2d4:	7833      	ldrb	r3, [r6, #0]
     2d6:	2b00      	cmp	r3, #0
     2d8:	d07b      	beq.n	3d2 <loop+0x246>
     2da:	2208      	movs	r2, #8
     2dc:	4964      	ldr	r1, [pc, #400]	; (470 <loop+0x2e4>)
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
     2de:	4620      	mov	r0, r4
     2e0:	f001 f880 	bl	13e4 <Print::write(unsigned char const*, unsigned int)>
     2e4:	4620      	mov	r0, r4
     2e6:	f001 f8a5 	bl	1434 <Print::println()>
		while (awidth) {
     2ea:	4962      	ldr	r1, [pc, #392]	; (474 <loop+0x2e8>)
     2ec:	4858      	ldr	r0, [pc, #352]	; (450 <loop+0x2c4>)
     2ee:	f001 f955 	bl	159c <String::operator=(char const*)>
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
     2f2:	a808      	add	r0, sp, #32
     2f4:	f001 f916 	bl	1524 <String::~String()>
     2f8:	e770      	b.n	1dc <loop+0x50>
     2fa:	4638      	mov	r0, r7
     2fc:	495d      	ldr	r1, [pc, #372]	; (474 <loop+0x2e8>)
     2fe:	f001 f94d 	bl	159c <String::operator=(char const*)>
			while (awidth) {
     302:	e76b      	b.n	1dc <loop+0x50>
				*buf++ = ' ';
     304:	211d      	movs	r1, #29
     306:	485c      	ldr	r0, [pc, #368]	; (478 <loop+0x2ec>)
     308:	f002 fda8 	bl	2e5c <usb_serial_write>
     30c:	4854      	ldr	r0, [pc, #336]	; (460 <loop+0x2d4>)
		if (copysignf(1.0f, val)<0) *buf++ = '-';
     30e:	f001 f891 	bl	1434 <Print::println()>
     312:	2204      	movs	r2, #4
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
     314:	4959      	ldr	r1, [pc, #356]	; (47c <loop+0x2f0>)
     316:	4620      	mov	r0, r4
		if (copysignf(1.0f, val)<0) *buf++ = '-';
     318:	f001 f864 	bl	13e4 <Print::write(unsigned char const*, unsigned int)>
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
     31c:	4620      	mov	r0, r4
     31e:	f001 f889 	bl	1434 <Print::println()>
     322:	a80b      	add	r0, sp, #44	; 0x2c
		while (awidth) {
     324:	f001 f8fe 	bl	1524 <String::~String()>
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
     328:	e7df      	b.n	2ea <loop+0x15e>
     32a:	4955      	ldr	r1, [pc, #340]	; (480 <loop+0x2f4>)
     32c:	a80b      	add	r0, sp, #44	; 0x2c
		if (copysignf(1.0f, val)<0) *buf++ = '-';
     32e:	f001 f8bf 	bl	14b0 <String::String(char const*)>
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
     332:	a90b      	add	r1, sp, #44	; 0x2c
		while (awidth) {
     334:	4638      	mov	r0, r7
		if (val<0) *buf++ = '-';
     336:	f001 f9a9 	bl	168c <String::startsWith(String const&) const>
     33a:	2800      	cmp	r0, #0
     33c:	f000 80be 	beq.w	4bc <loop+0x330>
     340:	7833      	ldrb	r3, [r6, #0]
     342:	2b00      	cmp	r3, #0
     344:	f000 80ba 	beq.w	4bc <loop+0x330>
     348:	4a4e      	ldr	r2, [pc, #312]	; (484 <loop+0x2f8>)
     34a:	a80b      	add	r0, sp, #44	; 0x2c
      }
    }
    else if (line.startsWith("L ") && in_hex_session) {
      // exact check for data lines inside session
      String rec = line.substring(2);
      hex_lines++;
     34c:	9202      	str	r2, [sp, #8]
    else if (line.startsWith("L ") && in_hex_session) {
     34e:	f001 f8e9 	bl	1524 <String::~String()>
      String rec = line.substring(2);
     352:	2202      	movs	r2, #2
     354:	4639      	mov	r1, r7
     356:	a80b      	add	r0, sp, #44	; 0x2c
     358:	f001 f9b6 	bl	16c8 <String::substring(unsigned int) const>
      hex_lines++;
     35c:	4a49      	ldr	r2, [pc, #292]	; (484 <loop+0x2f8>)
     35e:	6813      	ldr	r3, [r2, #0]
     360:	3301      	adds	r3, #1
     362:	6013      	str	r3, [r2, #0]
  if (rec.length() < 11) return false;
     364:	9b0d      	ldr	r3, [sp, #52]	; 0x34
     366:	2b0a      	cmp	r3, #10
     368:	d906      	bls.n	378 <loop+0x1ec>
  if (rec.charAt(0) != ':') return false;
     36a:	4641      	mov	r1, r8
     36c:	a80b      	add	r0, sp, #44	; 0x2c
     36e:	f001 f9a1 	bl	16b4 <String::charAt(unsigned int) const>
     372:	283a      	cmp	r0, #58	; 0x3a
     374:	f000 80da 	beq.w	52c <loop+0x3a0>
      if (ok) {
        hex_ok++;
        Serial2.print("OK "); Serial2.println(hex_lines);
        if ((hex_lines % 64) == 0) Serial2.println("ACK");  // lightweight progress ping
      } else {
        hex_bad++;
     378:	4f43      	ldr	r7, [pc, #268]	; (488 <loop+0x2fc>)
							  return write((const uint8_t *)str, strlen(str)); }
     37a:	2204      	movs	r2, #4
     37c:	4943      	ldr	r1, [pc, #268]	; (48c <loop+0x300>)
     37e:	4620      	mov	r0, r4
     380:	683b      	ldr	r3, [r7, #0]
     382:	3301      	adds	r3, #1
     384:	603b      	str	r3, [r7, #0]
     386:	f001 f82d 	bl	13e4 <Print::write(unsigned char const*, unsigned int)>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     38a:	9b02      	ldr	r3, [sp, #8]
     38c:	220a      	movs	r2, #10
     38e:	4620      	mov	r0, r4
     390:	6819      	ldr	r1, [r3, #0]
     392:	2300      	movs	r3, #0
     394:	f001 f878 	bl	1488 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	// Print an unsigned number and newline
	size_t println(unsigned int n)			{ return print(n) + println(); }
	// Print a signed number and newline
	size_t println(long n)				{ return print(n) + println(); }
	// Print an unsigned number and newline
	size_t println(unsigned long n)			{ return print(n) + println(); }
     398:	4620      	mov	r0, r4
     39a:	f001 f84b 	bl	1434 <Print::println()>
     39e:	e7c0      	b.n	322 <loop+0x196>
  static String line;
     3a0:	482b      	ldr	r0, [pc, #172]	; (450 <loop+0x2c4>)
     3a2:	f001 f885 	bl	14b0 <String::String(char const*)>
     3a6:	2301      	movs	r3, #1
     3a8:	4a39      	ldr	r2, [pc, #228]	; (490 <loop+0x304>)
     3aa:	493a      	ldr	r1, [pc, #232]	; (494 <loop+0x308>)
     3ac:	4828      	ldr	r0, [pc, #160]	; (450 <loop+0x2c4>)
     3ae:	6023      	str	r3, [r4, #0]
     3b0:	f003 f864 	bl	347c <__aeabi_atexit>
     3b4:	e70f      	b.n	1d6 <loop+0x4a>
     3b6:	f8db 3000 	ldr.w	r3, [fp]
    digitalWrite(LED_PIN, !digitalRead(LED_PIN));
     3ba:	200d      	movs	r0, #13
    t_led = millis();
     3bc:	6013      	str	r3, [r2, #0]
    digitalWrite(LED_PIN, !digitalRead(LED_PIN));
     3be:	f001 fa6f 	bl	18a0 <digitalRead>
     3c2:	4601      	mov	r1, r0
     3c4:	200d      	movs	r0, #13
     3c6:	fab1 f181 	clz	r1, r1
     3ca:	0949      	lsrs	r1, r1, #5
     3cc:	f001 fa3e 	bl	184c <digitalWrite>
     3d0:	e6ed      	b.n	1ae <loop+0x22>
        in_hex_session = true;
     3d2:	2201      	movs	r2, #1
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     3d4:	211a      	movs	r1, #26
     3d6:	4830      	ldr	r0, [pc, #192]	; (498 <loop+0x30c>)
     3d8:	7032      	strb	r2, [r6, #0]
        hex_lines = hex_ok = hex_bad = hex_bytes = 0;
     3da:	4a30      	ldr	r2, [pc, #192]	; (49c <loop+0x310>)
        echo_enabled = false;     // silence console echo during OTA
     3dc:	702b      	strb	r3, [r5, #0]
        hex_lines = hex_ok = hex_bad = hex_bytes = 0;
     3de:	6013      	str	r3, [r2, #0]
     3e0:	4a29      	ldr	r2, [pc, #164]	; (488 <loop+0x2fc>)
     3e2:	6013      	str	r3, [r2, #0]
     3e4:	4a2e      	ldr	r2, [pc, #184]	; (4a0 <loop+0x314>)
     3e6:	6013      	str	r3, [r2, #0]
     3e8:	4a26      	ldr	r2, [pc, #152]	; (484 <loop+0x2f8>)
     3ea:	6013      	str	r3, [r2, #0]
     3ec:	f002 fd36 	bl	2e5c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     3f0:	481b      	ldr	r0, [pc, #108]	; (460 <loop+0x2d4>)
     3f2:	f001 f81f 	bl	1434 <Print::println()>
							  return write((const uint8_t *)str, strlen(str)); }
     3f6:	2209      	movs	r2, #9
     3f8:	492a      	ldr	r1, [pc, #168]	; (4a4 <loop+0x318>)
     3fa:	4620      	mov	r0, r4
     3fc:	f000 fff2 	bl	13e4 <Print::write(unsigned char const*, unsigned int)>
	size_t println(const char s[])			{ return print(s) + println(); }
     400:	4620      	mov	r0, r4
     402:	f001 f817 	bl	1434 <Print::println()>
     406:	e770      	b.n	2ea <loop+0x15e>
     408:	f8db 3000 	ldr.w	r3, [fp]
							  return write((const uint8_t *)str, strlen(str)); }
     40c:	4926      	ldr	r1, [pc, #152]	; (4a8 <loop+0x31c>)
    t_hb = millis();
     40e:	6013      	str	r3, [r2, #0]
     410:	2203      	movs	r2, #3
     412:	480c      	ldr	r0, [pc, #48]	; (444 <loop+0x2b8>)
     414:	f000 ffe6 	bl	13e4 <Print::write(unsigned char const*, unsigned int)>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     418:	2300      	movs	r3, #0
     41a:	f8da 1000 	ldr.w	r1, [sl]
     41e:	220a      	movs	r2, #10
     420:	4808      	ldr	r0, [pc, #32]	; (444 <loop+0x2b8>)
     422:	f001 f831 	bl	1488 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
							  return write((const uint8_t *)str, strlen(str)); }
     426:	2202      	movs	r2, #2
     428:	4920      	ldr	r1, [pc, #128]	; (4ac <loop+0x320>)
     42a:	4806      	ldr	r0, [pc, #24]	; (444 <loop+0x2b8>)
     42c:	f000 ffda 	bl	13e4 <Print::write(unsigned char const*, unsigned int)>
	size_t println(const char s[])			{ return print(s) + println(); }
     430:	4804      	ldr	r0, [pc, #16]	; (444 <loop+0x2b8>)
     432:	f000 ffff 	bl	1434 <Print::println()>
     436:	e6c8      	b.n	1ca <loop+0x3e>
     438:	20001d44 	.word	0x20001d44
     43c:	20001d40 	.word	0x20001d40
     440:	20001c88 	.word	0x20001c88
     444:	20001028 	.word	0x20001028
     448:	200016ea 	.word	0x200016ea
     44c:	20002106 	.word	0x20002106
     450:	20001d34 	.word	0x20001d34
     454:	200009d4 	.word	0x200009d4
     458:	200009dc 	.word	0x200009dc
     45c:	20000a00 	.word	0x20000a00
     460:	20001018 	.word	0x20001018
     464:	20000a14 	.word	0x20000a14
     468:	20000a1c 	.word	0x20000a1c
     46c:	20000a4c 	.word	0x20000a4c
     470:	20000a58 	.word	0x20000a58
     474:	200003d4 	.word	0x200003d4
     478:	20000a24 	.word	0x20000a24
     47c:	20000a44 	.word	0x20000a44
     480:	20000a8c 	.word	0x20000a8c
     484:	20001d00 	.word	0x20001d00
     488:	20001cf8 	.word	0x20001cf8
     48c:	20000a9c 	.word	0x20000a9c
     490:	200010f4 	.word	0x200010f4
     494:	00001525 	.word	0x00001525
     498:	20000a64 	.word	0x20000a64
     49c:	20001cfc 	.word	0x20001cfc
     4a0:	20001cf4 	.word	0x20001cf4
     4a4:	20000a80 	.word	0x20000a80
     4a8:	200009cc 	.word	0x200009cc
     4ac:	200009d0 	.word	0x200009d0
     4b0:	200020e4 	.word	0x200020e4
     4b4:	200010e8 	.word	0x200010e8
     4b8:	20002107 	.word	0x20002107
    else if (line.startsWith("L ") && in_hex_session) {
     4bc:	a80b      	add	r0, sp, #44	; 0x2c
     4be:	f001 f831 	bl	1524 <String::~String()>
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	//unsigned char equals(const __FlashStringHelper *pgmstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
     4c2:	499a      	ldr	r1, [pc, #616]	; (72c <loop+0x5a0>)
     4c4:	a808      	add	r0, sp, #32
     4c6:	f001 f8cb 	bl	1660 <String::equals(char const*) const>
        Serial2.print("BAD "); Serial2.println(hex_lines);
      }
    }
    else if (cmd == "END") {
     4ca:	2800      	cmp	r0, #0
     4cc:	f000 8185 	beq.w	7da <loop+0x64e>
      if (!in_hex_session) {
     4d0:	7833      	ldrb	r3, [r6, #0]
     4d2:	b313      	cbz	r3, 51a <loop+0x38e>
        Serial2.println("HEX IDLE");
      } else {
        in_hex_session = false;
        echo_enabled = true;      // resume console echo after OTA

        Serial.printf("[Teensy] HEX end: lines=%lu ok=%lu bad=%lu dataBytes=%lu\n",
     4d4:	f8df 8274 	ldr.w	r8, [pc, #628]	; 74c <loop+0x5c0>
     4d8:	4f95      	ldr	r7, [pc, #596]	; (730 <loop+0x5a4>)
     4da:	f8d8 3000 	ldr.w	r3, [r8]
     4de:	4a95      	ldr	r2, [pc, #596]	; (734 <loop+0x5a8>)
     4e0:	9301      	str	r3, [sp, #4]
     4e2:	683b      	ldr	r3, [r7, #0]
     4e4:	9202      	str	r2, [sp, #8]
     4e6:	9300      	str	r3, [sp, #0]
        in_hex_session = false;
     4e8:	2300      	movs	r3, #0
        Serial.printf("[Teensy] HEX end: lines=%lu ok=%lu bad=%lu dataBytes=%lu\n",
     4ea:	6812      	ldr	r2, [r2, #0]
        in_hex_session = false;
     4ec:	7033      	strb	r3, [r6, #0]
        echo_enabled = true;      // resume console echo after OTA
     4ee:	2301      	movs	r3, #1
        Serial.printf("[Teensy] HEX end: lines=%lu ok=%lu bad=%lu dataBytes=%lu\n",
     4f0:	4991      	ldr	r1, [pc, #580]	; (738 <loop+0x5ac>)
        echo_enabled = true;      // resume console echo after OTA
     4f2:	702b      	strb	r3, [r5, #0]
        Serial.printf("[Teensy] HEX end: lines=%lu ok=%lu bad=%lu dataBytes=%lu\n",
     4f4:	4b91      	ldr	r3, [pc, #580]	; (73c <loop+0x5b0>)
     4f6:	4892      	ldr	r0, [pc, #584]	; (740 <loop+0x5b4>)
     4f8:	681b      	ldr	r3, [r3, #0]
     4fa:	f000 ffb7 	bl	146c <Print::printf(char const*, ...)>
                      hex_lines, hex_ok, hex_bad, hex_bytes);

        if (hex_bad == 0 && hex_ok > 0) {
     4fe:	683b      	ldr	r3, [r7, #0]
     500:	b923      	cbnz	r3, 50c <loop+0x380>
     502:	4a8e      	ldr	r2, [pc, #568]	; (73c <loop+0x5b0>)
     504:	6812      	ldr	r2, [r2, #0]
     506:	2a00      	cmp	r2, #0
     508:	f040 81b7 	bne.w	87a <loop+0x6ee>
          Serial2.printf("HEX OK lines=%lu bytes=%lu\n", hex_ok, hex_bytes);
          blink_ms = 87;                          // visible proof-of-apply
          Serial2.println("APPLIED");
          Serial.println("[Teensy] GOODBYE — OTA transfer verified ✔");
        } else {
          Serial2.printf("HEX ERR lines=%lu bad=%lu\n", hex_lines, hex_bad);
     50c:	9a02      	ldr	r2, [sp, #8]
     50e:	4620      	mov	r0, r4
     510:	498c      	ldr	r1, [pc, #560]	; (744 <loop+0x5b8>)
     512:	6812      	ldr	r2, [r2, #0]
     514:	f000 ffaa 	bl	146c <Print::printf(char const*, ...)>
     518:	e6e7      	b.n	2ea <loop+0x15e>
							  return write((const uint8_t *)str, strlen(str)); }
     51a:	2208      	movs	r2, #8
     51c:	498a      	ldr	r1, [pc, #552]	; (748 <loop+0x5bc>)
     51e:	4620      	mov	r0, r4
     520:	f000 ff60 	bl	13e4 <Print::write(unsigned char const*, unsigned int)>
	size_t println(const char s[])			{ return print(s) + println(); }
     524:	4620      	mov	r0, r4
     526:	f000 ff85 	bl	1434 <Print::println()>
     52a:	e6de      	b.n	2ea <loop+0x15e>
  int hi = hexNibble(s.charAt(i));
     52c:	2101      	movs	r1, #1
     52e:	a80b      	add	r0, sp, #44	; 0x2c
     530:	f001 f8c0 	bl	16b4 <String::charAt(unsigned int) const>
  if (c >= '0' && c <= '9') return c - '0';
     534:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
  int hi = hexNibble(s.charAt(i));
     538:	4607      	mov	r7, r0
  if (c >= '0' && c <= '9') return c - '0';
     53a:	b2da      	uxtb	r2, r3
     53c:	2a09      	cmp	r2, #9
     53e:	f240 81b5 	bls.w	8ac <loop+0x720>
  if (c >= 'A' && c <= 'F') return c - 'A' + 10;
     542:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
     546:	b2db      	uxtb	r3, r3
     548:	2b05      	cmp	r3, #5
     54a:	f240 81c1 	bls.w	8d0 <loop+0x744>
  if (c >= 'a' && c <= 'f') return c - 'a' + 10;
     54e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
     552:	b2db      	uxtb	r3, r3
     554:	2b05      	cmp	r3, #5
     556:	bf94      	ite	ls
     558:	f1a0 0757 	subls.w	r7, r0, #87	; 0x57
  return -1;
     55c:	f04f 37ff 	movhi.w	r7, #4294967295
  int lo = hexNibble(s.charAt(i + 1));
     560:	2102      	movs	r1, #2
     562:	a80b      	add	r0, sp, #44	; 0x2c
     564:	f001 f8a6 	bl	16b4 <String::charAt(unsigned int) const>
  if (c >= '0' && c <= '9') return c - '0';
     568:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
     56c:	b2da      	uxtb	r2, r3
     56e:	2a09      	cmp	r2, #9
     570:	f240 8156 	bls.w	820 <loop+0x694>
  if (c >= 'A' && c <= 'F') return c - 'A' + 10;
     574:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
     578:	b2db      	uxtb	r3, r3
     57a:	2b05      	cmp	r3, #5
     57c:	f240 814e 	bls.w	81c <loop+0x690>
  if (c >= 'a' && c <= 'f') return c - 'a' + 10;
     580:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
     584:	b2db      	uxtb	r3, r3
     586:	2b05      	cmp	r3, #5
     588:	f63f aef6 	bhi.w	378 <loop+0x1ec>
     58c:	f1a0 0357 	sub.w	r3, r0, #87	; 0x57
     590:	9304      	str	r3, [sp, #16]
  if (hi < 0 || lo < 0) return -1;
     592:	1c7b      	adds	r3, r7, #1
     594:	f43f aef0 	beq.w	378 <loop+0x1ec>
  int hi = hexNibble(s.charAt(i));
     598:	2103      	movs	r1, #3
     59a:	a80b      	add	r0, sp, #44	; 0x2c
     59c:	f001 f88a 	bl	16b4 <String::charAt(unsigned int) const>
  if (c >= '0' && c <= '9') return c - '0';
     5a0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
     5a4:	b2da      	uxtb	r2, r3
     5a6:	2a09      	cmp	r2, #9
     5a8:	f240 8197 	bls.w	8da <loop+0x74e>
  if (c >= 'A' && c <= 'F') return c - 'A' + 10;
     5ac:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
     5b0:	b2db      	uxtb	r3, r3
     5b2:	2b05      	cmp	r3, #5
     5b4:	f240 81a8 	bls.w	908 <loop+0x77c>
  if (c >= 'a' && c <= 'f') return c - 'a' + 10;
     5b8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
     5bc:	b2db      	uxtb	r3, r3
     5be:	2b05      	cmp	r3, #5
     5c0:	f200 8189 	bhi.w	8d6 <loop+0x74a>
     5c4:	f1a0 0357 	sub.w	r3, r0, #87	; 0x57
     5c8:	9303      	str	r3, [sp, #12]
  int lo = hexNibble(s.charAt(i + 1));
     5ca:	2104      	movs	r1, #4
     5cc:	a80b      	add	r0, sp, #44	; 0x2c
     5ce:	f001 f871 	bl	16b4 <String::charAt(unsigned int) const>
  if (c >= '0' && c <= '9') return c - '0';
     5d2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
     5d6:	b2da      	uxtb	r2, r3
     5d8:	2a09      	cmp	r2, #9
     5da:	f240 816b 	bls.w	8b4 <loop+0x728>
  if (c >= 'A' && c <= 'F') return c - 'A' + 10;
     5de:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
     5e2:	b2db      	uxtb	r3, r3
     5e4:	2b05      	cmp	r3, #5
     5e6:	f240 8163 	bls.w	8b0 <loop+0x724>
  if (c >= 'a' && c <= 'f') return c - 'a' + 10;
     5ea:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
     5ee:	b2db      	uxtb	r3, r3
     5f0:	2b05      	cmp	r3, #5
     5f2:	f63f aec1 	bhi.w	378 <loop+0x1ec>
     5f6:	f1a0 0357 	sub.w	r3, r0, #87	; 0x57
     5fa:	9305      	str	r3, [sp, #20]
  if (hi < 0 || lo < 0) return -1;
     5fc:	9b03      	ldr	r3, [sp, #12]
     5fe:	3301      	adds	r3, #1
     600:	f43f aeba 	beq.w	378 <loop+0x1ec>
  int hi = hexNibble(s.charAt(i));
     604:	2105      	movs	r1, #5
     606:	a80b      	add	r0, sp, #44	; 0x2c
     608:	f001 f854 	bl	16b4 <String::charAt(unsigned int) const>
  if (c >= '0' && c <= '9') return c - '0';
     60c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
     610:	b2da      	uxtb	r2, r3
     612:	2a09      	cmp	r2, #9
     614:	d90e      	bls.n	634 <loop+0x4a8>
  if (c >= 'A' && c <= 'F') return c - 'A' + 10;
     616:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
     61a:	b2db      	uxtb	r3, r3
     61c:	2b05      	cmp	r3, #5
     61e:	f240 8177 	bls.w	910 <loop+0x784>
  if (c >= 'a' && c <= 'f') return c - 'a' + 10;
     622:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
     626:	b2db      	uxtb	r3, r3
     628:	2b05      	cmp	r3, #5
     62a:	bf94      	ite	ls
     62c:	f1a0 0357 	subls.w	r3, r0, #87	; 0x57
  return -1;
     630:	f04f 33ff 	movhi.w	r3, #4294967295
  int lo = hexNibble(s.charAt(i + 1));
     634:	2106      	movs	r1, #6
     636:	a80b      	add	r0, sp, #44	; 0x2c
     638:	9306      	str	r3, [sp, #24]
     63a:	f001 f83b 	bl	16b4 <String::charAt(unsigned int) const>
  if (c >= '0' && c <= '9') return c - '0';
     63e:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
     642:	9b06      	ldr	r3, [sp, #24]
     644:	b2d1      	uxtb	r1, r2
     646:	2909      	cmp	r1, #9
     648:	d90d      	bls.n	666 <loop+0x4da>
  if (c >= 'A' && c <= 'F') return c - 'A' + 10;
     64a:	f1a0 0241 	sub.w	r2, r0, #65	; 0x41
     64e:	b2d2      	uxtb	r2, r2
     650:	2a05      	cmp	r2, #5
     652:	f240 8160 	bls.w	916 <loop+0x78a>
  if (c >= 'a' && c <= 'f') return c - 'a' + 10;
     656:	f1a0 0261 	sub.w	r2, r0, #97	; 0x61
     65a:	b2d2      	uxtb	r2, r2
     65c:	2a05      	cmp	r2, #5
     65e:	f63f ae8b 	bhi.w	378 <loop+0x1ec>
     662:	f1a0 0257 	sub.w	r2, r0, #87	; 0x57
  if (hi < 0 || lo < 0) return -1;
     666:	1c59      	adds	r1, r3, #1
     668:	f43f ae86 	beq.w	378 <loop+0x1ec>
  int hi = hexNibble(s.charAt(i));
     66c:	2107      	movs	r1, #7
     66e:	a80b      	add	r0, sp, #44	; 0x2c
     670:	e9cd 3206 	strd	r3, r2, [sp, #24]
     674:	f001 f81e 	bl	16b4 <String::charAt(unsigned int) const>
  if (c >= '0' && c <= '9') return c - '0';
     678:	f1a0 0830 	sub.w	r8, r0, #48	; 0x30
     67c:	fa5f f188 	uxtb.w	r1, r8
     680:	2909      	cmp	r1, #9
     682:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
     686:	d90e      	bls.n	6a6 <loop+0x51a>
  if (c >= 'A' && c <= 'F') return c - 'A' + 10;
     688:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
     68c:	b2c9      	uxtb	r1, r1
     68e:	2905      	cmp	r1, #5
     690:	f240 8156 	bls.w	940 <loop+0x7b4>
  if (c >= 'a' && c <= 'f') return c - 'a' + 10;
     694:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
     698:	b2c9      	uxtb	r1, r1
     69a:	2905      	cmp	r1, #5
     69c:	bf94      	ite	ls
     69e:	f1a0 0857 	subls.w	r8, r0, #87	; 0x57
  return -1;
     6a2:	f04f 38ff 	movhi.w	r8, #4294967295
  int lo = hexNibble(s.charAt(i + 1));
     6a6:	2108      	movs	r1, #8
     6a8:	a80b      	add	r0, sp, #44	; 0x2c
     6aa:	e9cd 3206 	strd	r3, r2, [sp, #24]
     6ae:	f001 f801 	bl	16b4 <String::charAt(unsigned int) const>
  if (c >= '0' && c <= '9') return c - '0';
     6b2:	f1a0 0130 	sub.w	r1, r0, #48	; 0x30
     6b6:	fa5f fc81 	uxtb.w	ip, r1
     6ba:	f1bc 0f09 	cmp.w	ip, #9
     6be:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
     6c2:	f240 812b 	bls.w	91c <loop+0x790>
  if (c >= 'A' && c <= 'F') return c - 'A' + 10;
     6c6:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
     6ca:	b2c9      	uxtb	r1, r1
     6cc:	2905      	cmp	r1, #5
     6ce:	f240 819b 	bls.w	a08 <loop+0x87c>
  if (c >= 'a' && c <= 'f') return c - 'a' + 10;
     6d2:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
     6d6:	b2c9      	uxtb	r1, r1
     6d8:	2905      	cmp	r1, #5
     6da:	f63f ae4d 	bhi.w	378 <loop+0x1ec>
     6de:	f1a0 0e57 	sub.w	lr, r0, #87	; 0x57
  if (hi < 0 || lo < 0) return -1;
     6e2:	f1b8 3fff 	cmp.w	r8, #4294967295
     6e6:	f43f ae47 	beq.w	378 <loop+0x1ec>
  return (hi << 4) | lo;
     6ea:	9904      	ldr	r1, [sp, #16]
     6ec:	ea41 1707 	orr.w	r7, r1, r7, lsl #4
  if (rec.length() < data_end + 2u) return false;
     6f0:	990d      	ldr	r1, [sp, #52]	; 0x34
  const size_t data_end   = data_start + (size_t)len_i * 2u;
     6f2:	0078      	lsls	r0, r7, #1
  if (rec.length() < data_end + 2u) return false;
     6f4:	f100 0c0b 	add.w	ip, r0, #11
  const size_t data_end   = data_start + (size_t)len_i * 2u;
     6f8:	9004      	str	r0, [sp, #16]
  if (rec.length() < data_end + 2u) return false;
     6fa:	4561      	cmp	r1, ip
     6fc:	f4ff ae3c 	bcc.w	378 <loop+0x1ec>
  return (hi << 4) | lo;
     700:	9903      	ldr	r1, [sp, #12]
     702:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
     706:	9805      	ldr	r0, [sp, #20]
     708:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
     70c:	ea4e 1108 	orr.w	r1, lr, r8, lsl #4
  int sum = len_i + addr_hi + addr_lo + rectype;
     710:	19c3      	adds	r3, r0, r7
     712:	4413      	add	r3, r2
     714:	440b      	add	r3, r1
     716:	9303      	str	r3, [sp, #12]
  const size_t data_end   = data_start + (size_t)len_i * 2u;
     718:	9b04      	ldr	r3, [sp, #16]
     71a:	f103 0209 	add.w	r2, r3, #9
     71e:	9205      	str	r2, [sp, #20]
  for (size_t i = data_start; i < data_end; i += 2) {
     720:	2b00      	cmp	r3, #0
     722:	f000 8110 	beq.w	946 <loop+0x7ba>
     726:	2309      	movs	r3, #9
     728:	4698      	mov	r8, r3
     72a:	e04a      	b.n	7c2 <loop+0x636>
     72c:	20000a90 	.word	0x20000a90
     730:	20001cf8 	.word	0x20001cf8
     734:	20001d00 	.word	0x20001d00
     738:	20000ab0 	.word	0x20000ab0
     73c:	20001cf4 	.word	0x20001cf4
     740:	20001018 	.word	0x20001018
     744:	20000b40 	.word	0x20000b40
     748:	20000aa4 	.word	0x20000aa4
     74c:	20001cfc 	.word	0x20001cfc
  if (c >= 'A' && c <= 'F') return c - 'A' + 10;
     750:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
     754:	b2c9      	uxtb	r1, r1
     756:	2905      	cmp	r1, #5
     758:	f240 80c3 	bls.w	8e2 <loop+0x756>
  if (c >= 'a' && c <= 'f') return c - 'a' + 10;
     75c:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
     760:	b2c9      	uxtb	r1, r1
     762:	2905      	cmp	r1, #5
     764:	bf94      	ite	ls
     766:	3a57      	subls	r2, #87	; 0x57
  return -1;
     768:	f04f 32ff 	movhi.w	r2, #4294967295
  int lo = hexNibble(s.charAt(i + 1));
     76c:	f108 0101 	add.w	r1, r8, #1
     770:	a80b      	add	r0, sp, #44	; 0x2c
     772:	9206      	str	r2, [sp, #24]
     774:	f000 ff9e 	bl	16b4 <String::charAt(unsigned int) const>
  if (c >= '0' && c <= '9') return c - '0';
     778:	f1a0 0130 	sub.w	r1, r0, #48	; 0x30
     77c:	9a06      	ldr	r2, [sp, #24]
     77e:	fa5f fc81 	uxtb.w	ip, r1
     782:	f1bc 0f09 	cmp.w	ip, #9
     786:	f240 8097 	bls.w	8b8 <loop+0x72c>
  if (c >= 'A' && c <= 'F') return c - 'A' + 10;
     78a:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
     78e:	b2c9      	uxtb	r1, r1
     790:	2905      	cmp	r1, #5
     792:	f240 80a4 	bls.w	8de <loop+0x752>
  if (c >= 'a' && c <= 'f') return c - 'a' + 10;
     796:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
     79a:	b2c9      	uxtb	r1, r1
     79c:	2905      	cmp	r1, #5
     79e:	f63f adeb 	bhi.w	378 <loop+0x1ec>
     7a2:	3857      	subs	r0, #87	; 0x57
  if (hi < 0 || lo < 0) return -1;
     7a4:	ea50 0102 	orrs.w	r1, r0, r2
     7a8:	f53f ade6 	bmi.w	378 <loop+0x1ec>
    sum += b;
     7ac:	9b03      	ldr	r3, [sp, #12]
  return (hi << 4) | lo;
     7ae:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
  for (size_t i = data_start; i < data_end; i += 2) {
     7b2:	f108 0802 	add.w	r8, r8, #2
    sum += b;
     7b6:	4403      	add	r3, r0
     7b8:	9303      	str	r3, [sp, #12]
  for (size_t i = data_start; i < data_end; i += 2) {
     7ba:	9b05      	ldr	r3, [sp, #20]
     7bc:	4543      	cmp	r3, r8
     7be:	f240 80c2 	bls.w	946 <loop+0x7ba>
  int hi = hexNibble(s.charAt(i));
     7c2:	4641      	mov	r1, r8
     7c4:	a80b      	add	r0, sp, #44	; 0x2c
     7c6:	f000 ff75 	bl	16b4 <String::charAt(unsigned int) const>
  if (c >= '0' && c <= '9') return c - '0';
     7ca:	f1a0 0130 	sub.w	r1, r0, #48	; 0x30
  int hi = hexNibble(s.charAt(i));
     7ce:	4602      	mov	r2, r0
  if (c >= '0' && c <= '9') return c - '0';
     7d0:	b2c8      	uxtb	r0, r1
     7d2:	2809      	cmp	r0, #9
     7d4:	d8bc      	bhi.n	750 <loop+0x5c4>
     7d6:	460a      	mov	r2, r1
     7d8:	e7c8      	b.n	76c <loop+0x5e0>
     7da:	499c      	ldr	r1, [pc, #624]	; (a4c <loop+0x8c0>)
     7dc:	a808      	add	r0, sp, #32
     7de:	f000 ff3f 	bl	1660 <String::equals(char const*) const>
        }
      }
    }

    // ================= Utility commands =================
    else if (cmd == "PING") {
     7e2:	b140      	cbz	r0, 7f6 <loop+0x66a>
							  return write((const uint8_t *)str, strlen(str)); }
     7e4:	2204      	movs	r2, #4
     7e6:	499a      	ldr	r1, [pc, #616]	; (a50 <loop+0x8c4>)
     7e8:	4620      	mov	r0, r4
     7ea:	f000 fdfb 	bl	13e4 <Print::write(unsigned char const*, unsigned int)>
	size_t println(const char s[])			{ return print(s) + println(); }
     7ee:	4620      	mov	r0, r4
     7f0:	f000 fe20 	bl	1434 <Print::println()>
     7f4:	e579      	b.n	2ea <loop+0x15e>
     7f6:	4997      	ldr	r1, [pc, #604]	; (a54 <loop+0x8c8>)
     7f8:	a808      	add	r0, sp, #32
     7fa:	f000 ff31 	bl	1660 <String::equals(char const*) const>
      Serial2.println("PONG");
    }
    else if (cmd == "VERSION") {
     7fe:	b188      	cbz	r0, 824 <loop+0x698>
							  return write((const uint8_t *)str, strlen(str)); }
     800:	2203      	movs	r2, #3
     802:	4995      	ldr	r1, [pc, #596]	; (a58 <loop+0x8cc>)
     804:	4620      	mov	r0, r4
     806:	f000 fded 	bl	13e4 <Print::write(unsigned char const*, unsigned int)>
     80a:	2222      	movs	r2, #34	; 0x22
     80c:	4993      	ldr	r1, [pc, #588]	; (a5c <loop+0x8d0>)
     80e:	4620      	mov	r0, r4
     810:	f000 fde8 	bl	13e4 <Print::write(unsigned char const*, unsigned int)>
	size_t println(const char s[])			{ return print(s) + println(); }
     814:	4620      	mov	r0, r4
     816:	f000 fe0d 	bl	1434 <Print::println()>
     81a:	e566      	b.n	2ea <loop+0x15e>
  if (c >= 'A' && c <= 'F') return c - 'A' + 10;
     81c:	f1a0 0337 	sub.w	r3, r0, #55	; 0x37
     820:	9304      	str	r3, [sp, #16]
     822:	e6b6      	b.n	592 <loop+0x406>
      Serial2.print("FW "); Serial2.println(FW_VERSION);
    }
    else if (cmd.startsWith("SET BLINK ")) {
     824:	498e      	ldr	r1, [pc, #568]	; (a60 <loop+0x8d4>)
     826:	a80b      	add	r0, sp, #44	; 0x2c
     828:	f000 fe42 	bl	14b0 <String::String(char const*)>
     82c:	a90b      	add	r1, sp, #44	; 0x2c
     82e:	a808      	add	r0, sp, #32
     830:	f000 ff2c 	bl	168c <String::startsWith(String const&) const>
     834:	4607      	mov	r7, r0
     836:	a80b      	add	r0, sp, #44	; 0x2c
     838:	f000 fe74 	bl	1524 <String::~String()>
     83c:	2f00      	cmp	r7, #0
     83e:	d03d      	beq.n	8bc <loop+0x730>
      long v = line.substring(10).toInt();
     840:	220a      	movs	r2, #10
     842:	4988      	ldr	r1, [pc, #544]	; (a64 <loop+0x8d8>)
     844:	a80b      	add	r0, sp, #44	; 0x2c
     846:	f000 ff3f 	bl	16c8 <String::substring(unsigned int) const>
     84a:	a80b      	add	r0, sp, #44	; 0x2c
     84c:	f000 ffa4 	bl	1798 <String::toInt() const>
     850:	4607      	mov	r7, r0
     852:	a80b      	add	r0, sp, #44	; 0x2c
     854:	f000 fe66 	bl	1524 <String::~String()>
      if (v >= 50 && v <= 5000) { blink_ms = (uint32_t)v; Serial2.println("OK"); }
     858:	f241 3356 	movw	r3, #4950	; 0x1356
     85c:	f1a7 0232 	sub.w	r2, r7, #50	; 0x32
     860:	429a      	cmp	r2, r3
     862:	d848      	bhi.n	8f6 <loop+0x76a>
     864:	f8ca 7000 	str.w	r7, [sl]
							  return write((const uint8_t *)str, strlen(str)); }
     868:	2202      	movs	r2, #2
     86a:	497f      	ldr	r1, [pc, #508]	; (a68 <loop+0x8dc>)
     86c:	4620      	mov	r0, r4
     86e:	f000 fdb9 	bl	13e4 <Print::write(unsigned char const*, unsigned int)>
	size_t println(const char s[])			{ return print(s) + println(); }
     872:	4620      	mov	r0, r4
     874:	f000 fdde 	bl	1434 <Print::println()>
     878:	e537      	b.n	2ea <loop+0x15e>
          Serial2.printf("HEX OK lines=%lu bytes=%lu\n", hex_ok, hex_bytes);
     87a:	f8d8 3000 	ldr.w	r3, [r8]
     87e:	4620      	mov	r0, r4
     880:	497a      	ldr	r1, [pc, #488]	; (a6c <loop+0x8e0>)
     882:	f000 fdf3 	bl	146c <Print::printf(char const*, ...)>
          blink_ms = 87;                          // visible proof-of-apply
     886:	2357      	movs	r3, #87	; 0x57
							  return write((const uint8_t *)str, strlen(str)); }
     888:	2207      	movs	r2, #7
     88a:	4979      	ldr	r1, [pc, #484]	; (a70 <loop+0x8e4>)
     88c:	4620      	mov	r0, r4
     88e:	f8ca 3000 	str.w	r3, [sl]
     892:	f000 fda7 	bl	13e4 <Print::write(unsigned char const*, unsigned int)>
	size_t println(const char s[])			{ return print(s) + println(); }
     896:	4620      	mov	r0, r4
     898:	f000 fdcc 	bl	1434 <Print::println()>
     89c:	212e      	movs	r1, #46	; 0x2e
     89e:	4875      	ldr	r0, [pc, #468]	; (a74 <loop+0x8e8>)
     8a0:	f002 fadc 	bl	2e5c <usb_serial_write>
     8a4:	4874      	ldr	r0, [pc, #464]	; (a78 <loop+0x8ec>)
     8a6:	f000 fdc5 	bl	1434 <Print::println()>
     8aa:	e51e      	b.n	2ea <loop+0x15e>
  if (c >= '0' && c <= '9') return c - '0';
     8ac:	461f      	mov	r7, r3
     8ae:	e657      	b.n	560 <loop+0x3d4>
  if (c >= 'A' && c <= 'F') return c - 'A' + 10;
     8b0:	f1a0 0337 	sub.w	r3, r0, #55	; 0x37
     8b4:	9305      	str	r3, [sp, #20]
     8b6:	e6a1      	b.n	5fc <loop+0x470>
  if (c >= '0' && c <= '9') return c - '0';
     8b8:	4608      	mov	r0, r1
     8ba:	e773      	b.n	7a4 <loop+0x618>
     8bc:	496f      	ldr	r1, [pc, #444]	; (a7c <loop+0x8f0>)
     8be:	a808      	add	r0, sp, #32
     8c0:	f000 fece 	bl	1660 <String::equals(char const*) const>
      else { Serial2.println("ERR"); }
    }
    else if (cmd == "HB ON") {
     8c4:	4607      	mov	r7, r0
     8c6:	b170      	cbz	r0, 8e6 <loop+0x75a>
      print_hb = true; Serial2.println("OK");
     8c8:	2301      	movs	r3, #1
     8ca:	f889 3000 	strb.w	r3, [r9]
							  return write((const uint8_t *)str, strlen(str)); }
     8ce:	e7cb      	b.n	868 <loop+0x6dc>
  if (c >= 'A' && c <= 'F') return c - 'A' + 10;
     8d0:	f1a0 0737 	sub.w	r7, r0, #55	; 0x37
     8d4:	e644      	b.n	560 <loop+0x3d4>
  return -1;
     8d6:	f04f 33ff 	mov.w	r3, #4294967295
     8da:	9303      	str	r3, [sp, #12]
     8dc:	e675      	b.n	5ca <loop+0x43e>
  if (c >= 'A' && c <= 'F') return c - 'A' + 10;
     8de:	3837      	subs	r0, #55	; 0x37
     8e0:	e760      	b.n	7a4 <loop+0x618>
     8e2:	3a37      	subs	r2, #55	; 0x37
     8e4:	e742      	b.n	76c <loop+0x5e0>
     8e6:	4966      	ldr	r1, [pc, #408]	; (a80 <loop+0x8f4>)
     8e8:	a808      	add	r0, sp, #32
     8ea:	f000 feb9 	bl	1660 <String::equals(char const*) const>
    }
    else if (cmd == "HB OFF") {
     8ee:	b1b8      	cbz	r0, 920 <loop+0x794>
      print_hb = false; Serial2.println("OK");
     8f0:	f889 7000 	strb.w	r7, [r9]
     8f4:	e7b8      	b.n	868 <loop+0x6dc>
     8f6:	2203      	movs	r2, #3
     8f8:	4962      	ldr	r1, [pc, #392]	; (a84 <loop+0x8f8>)
     8fa:	4620      	mov	r0, r4
     8fc:	f000 fd72 	bl	13e4 <Print::write(unsigned char const*, unsigned int)>
	size_t println(const char s[])			{ return print(s) + println(); }
     900:	4620      	mov	r0, r4
     902:	f000 fd97 	bl	1434 <Print::println()>
     906:	e4f0      	b.n	2ea <loop+0x15e>
  if (c >= 'A' && c <= 'F') return c - 'A' + 10;
     908:	f1a0 0337 	sub.w	r3, r0, #55	; 0x37
     90c:	9303      	str	r3, [sp, #12]
     90e:	e65c      	b.n	5ca <loop+0x43e>
     910:	f1a0 0337 	sub.w	r3, r0, #55	; 0x37
     914:	e68e      	b.n	634 <loop+0x4a8>
     916:	f1a0 0237 	sub.w	r2, r0, #55	; 0x37
     91a:	e6a4      	b.n	666 <loop+0x4da>
  if (c >= '0' && c <= '9') return c - '0';
     91c:	468e      	mov	lr, r1
     91e:	e6e0      	b.n	6e2 <loop+0x556>
     920:	4959      	ldr	r1, [pc, #356]	; (a88 <loop+0x8fc>)
     922:	a808      	add	r0, sp, #32
     924:	f000 fe9c 	bl	1660 <String::equals(char const*) const>
    }
    else if (cmd == "ECHO ON") {
     928:	2800      	cmp	r0, #0
     92a:	d075      	beq.n	a18 <loop+0x88c>
      if (!in_hex_session) { echo_enabled = true; Serial2.println("OK"); }
     92c:	7833      	ldrb	r3, [r6, #0]
     92e:	2b00      	cmp	r3, #0
     930:	d16d      	bne.n	a0e <loop+0x882>
     932:	2301      	movs	r3, #1
     934:	494c      	ldr	r1, [pc, #304]	; (a68 <loop+0x8dc>)
     936:	4620      	mov	r0, r4
     938:	702b      	strb	r3, [r5, #0]
     93a:	f7ff fba5 	bl	88 <Print::println(char const*) [clone .isra.0]>
     93e:	e4d4      	b.n	2ea <loop+0x15e>
  if (c >= 'A' && c <= 'F') return c - 'A' + 10;
     940:	f1a0 0837 	sub.w	r8, r0, #55	; 0x37
     944:	e6af      	b.n	6a6 <loop+0x51a>
  int hi = hexNibble(s.charAt(i));
     946:	9905      	ldr	r1, [sp, #20]
     948:	a80b      	add	r0, sp, #44	; 0x2c
     94a:	f000 feb3 	bl	16b4 <String::charAt(unsigned int) const>
  if (c >= '0' && c <= '9') return c - '0';
     94e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
  int hi = hexNibble(s.charAt(i));
     952:	4680      	mov	r8, r0
  if (c >= '0' && c <= '9') return c - '0';
     954:	b2da      	uxtb	r2, r3
     956:	2a09      	cmp	r2, #9
     958:	d973      	bls.n	a42 <loop+0x8b6>
  if (c >= 'A' && c <= 'F') return c - 'A' + 10;
     95a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
     95e:	b2db      	uxtb	r3, r3
     960:	2b05      	cmp	r3, #5
     962:	d96b      	bls.n	a3c <loop+0x8b0>
  if (c >= 'a' && c <= 'f') return c - 'a' + 10;
     964:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
     968:	b2db      	uxtb	r3, r3
     96a:	2b05      	cmp	r3, #5
     96c:	bf94      	ite	ls
     96e:	f1a0 0857 	subls.w	r8, r0, #87	; 0x57
  return -1;
     972:	f04f 38ff 	movhi.w	r8, #4294967295
  int lo = hexNibble(s.charAt(i + 1));
     976:	9904      	ldr	r1, [sp, #16]
     978:	a80b      	add	r0, sp, #44	; 0x2c
     97a:	310a      	adds	r1, #10
     97c:	f000 fe9a 	bl	16b4 <String::charAt(unsigned int) const>
  if (c >= '0' && c <= '9') return c - '0';
     980:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
     984:	b2da      	uxtb	r2, r3
     986:	2a09      	cmp	r2, #9
     988:	d95d      	bls.n	a46 <loop+0x8ba>
  if (c >= 'A' && c <= 'F') return c - 'A' + 10;
     98a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
     98e:	b2db      	uxtb	r3, r3
     990:	2b05      	cmp	r3, #5
     992:	d951      	bls.n	a38 <loop+0x8ac>
  if (c >= 'a' && c <= 'f') return c - 'a' + 10;
     994:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
     998:	b2db      	uxtb	r3, r3
     99a:	2b05      	cmp	r3, #5
     99c:	f63f acec 	bhi.w	378 <loop+0x1ec>
     9a0:	3857      	subs	r0, #87	; 0x57
  if (hi < 0 || lo < 0) return -1;
     9a2:	f1b8 3fff 	cmp.w	r8, #4294967295
     9a6:	f43f ace7 	beq.w	378 <loop+0x1ec>
  sum = ((~sum + 1) & 0xFF);
     9aa:	9b03      	ldr	r3, [sp, #12]
  return (hi << 4) | lo;
     9ac:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
  sum = ((~sum + 1) & 0xFF);
     9b0:	425b      	negs	r3, r3
     9b2:	b2db      	uxtb	r3, r3
  if (ok) hex_bytes += (uint32_t)len_i;
     9b4:	4298      	cmp	r0, r3
     9b6:	f47f acdf 	bne.w	378 <loop+0x1ec>
     9ba:	f8df c0e4 	ldr.w	ip, [pc, #228]	; aa0 <loop+0x914>
							  return write((const uint8_t *)str, strlen(str)); }
     9be:	2203      	movs	r2, #3
        hex_ok++;
     9c0:	4832      	ldr	r0, [pc, #200]	; (a8c <loop+0x900>)
  if (ok) hex_bytes += (uint32_t)len_i;
     9c2:	f8dc 3000 	ldr.w	r3, [ip]
     9c6:	4932      	ldr	r1, [pc, #200]	; (a90 <loop+0x904>)
     9c8:	443b      	add	r3, r7
     9ca:	f8cc 3000 	str.w	r3, [ip]
        hex_ok++;
     9ce:	6803      	ldr	r3, [r0, #0]
     9d0:	3301      	adds	r3, #1
     9d2:	6003      	str	r3, [r0, #0]
     9d4:	4620      	mov	r0, r4
     9d6:	f000 fd05 	bl	13e4 <Print::write(unsigned char const*, unsigned int)>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     9da:	9f02      	ldr	r7, [sp, #8]
     9dc:	2300      	movs	r3, #0
     9de:	220a      	movs	r2, #10
     9e0:	6839      	ldr	r1, [r7, #0]
     9e2:	4620      	mov	r0, r4
     9e4:	f000 fd50 	bl	1488 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
     9e8:	4620      	mov	r0, r4
     9ea:	f000 fd23 	bl	1434 <Print::println()>
        if ((hex_lines % 64) == 0) Serial2.println("ACK");  // lightweight progress ping
     9ee:	683b      	ldr	r3, [r7, #0]
     9f0:	0698      	lsls	r0, r3, #26
     9f2:	f47f ac96 	bne.w	322 <loop+0x196>
							  return write((const uint8_t *)str, strlen(str)); }
     9f6:	2203      	movs	r2, #3
     9f8:	4926      	ldr	r1, [pc, #152]	; (a94 <loop+0x908>)
     9fa:	4620      	mov	r0, r4
     9fc:	f000 fcf2 	bl	13e4 <Print::write(unsigned char const*, unsigned int)>
	size_t println(const char s[])			{ return print(s) + println(); }
     a00:	4620      	mov	r0, r4
     a02:	f000 fd17 	bl	1434 <Print::println()>
     a06:	e48c      	b.n	322 <loop+0x196>
  if (c >= 'A' && c <= 'F') return c - 'A' + 10;
     a08:	f1a0 0e37 	sub.w	lr, r0, #55	; 0x37
     a0c:	e669      	b.n	6e2 <loop+0x556>
      else { Serial2.println("BUSY"); }
     a0e:	4922      	ldr	r1, [pc, #136]	; (a98 <loop+0x90c>)
     a10:	4620      	mov	r0, r4
     a12:	f7ff fb39 	bl	88 <Print::println(char const*) [clone .isra.0]>
     a16:	e468      	b.n	2ea <loop+0x15e>
     a18:	4920      	ldr	r1, [pc, #128]	; (a9c <loop+0x910>)
     a1a:	a808      	add	r0, sp, #32
     a1c:	f000 fe20 	bl	1660 <String::equals(char const*) const>
    }
    else if (cmd == "ECHO OFF") {
     a20:	4607      	mov	r7, r0
     a22:	2800      	cmp	r0, #0
     a24:	d03e      	beq.n	aa4 <loop+0x918>
      if (!in_hex_session) { echo_enabled = false; Serial2.println("OK"); }
     a26:	7833      	ldrb	r3, [r6, #0]
     a28:	2b00      	cmp	r3, #0
     a2a:	d1f0      	bne.n	a0e <loop+0x882>
     a2c:	490e      	ldr	r1, [pc, #56]	; (a68 <loop+0x8dc>)
     a2e:	4620      	mov	r0, r4
     a30:	702b      	strb	r3, [r5, #0]
     a32:	f7ff fb29 	bl	88 <Print::println(char const*) [clone .isra.0]>
     a36:	e458      	b.n	2ea <loop+0x15e>
  if (c >= 'A' && c <= 'F') return c - 'A' + 10;
     a38:	3837      	subs	r0, #55	; 0x37
     a3a:	e7b2      	b.n	9a2 <loop+0x816>
     a3c:	f1a0 0837 	sub.w	r8, r0, #55	; 0x37
     a40:	e799      	b.n	976 <loop+0x7ea>
  if (c >= '0' && c <= '9') return c - '0';
     a42:	4698      	mov	r8, r3
     a44:	e797      	b.n	976 <loop+0x7ea>
     a46:	4618      	mov	r0, r3
     a48:	e7ab      	b.n	9a2 <loop+0x816>
     a4a:	bf00      	nop
     a4c:	20000b5c 	.word	0x20000b5c
     a50:	20000b64 	.word	0x20000b64
     a54:	20000b6c 	.word	0x20000b6c
     a58:	20000b74 	.word	0x20000b74
     a5c:	20000d3c 	.word	0x20000d3c
     a60:	20000b78 	.word	0x20000b78
     a64:	20001d34 	.word	0x20001d34
     a68:	20000b84 	.word	0x20000b84
     a6c:	20000aec 	.word	0x20000aec
     a70:	20000b08 	.word	0x20000b08
     a74:	20000b10 	.word	0x20000b10
     a78:	20001018 	.word	0x20001018
     a7c:	20000b8c 	.word	0x20000b8c
     a80:	20000b94 	.word	0x20000b94
     a84:	20000b88 	.word	0x20000b88
     a88:	20000b9c 	.word	0x20000b9c
     a8c:	20001cf4 	.word	0x20001cf4
     a90:	20000a94 	.word	0x20000a94
     a94:	20000a98 	.word	0x20000a98
     a98:	20000a5c 	.word	0x20000a5c
     a9c:	20000ba4 	.word	0x20000ba4
     aa0:	20001cfc 	.word	0x20001cfc
     aa4:	4955      	ldr	r1, [pc, #340]	; (bfc <loop+0xa70>)
     aa6:	a808      	add	r0, sp, #32
     aa8:	f000 fdda 	bl	1660 <String::equals(char const*) const>
      else { Serial2.println("BUSY"); }
    }
    else if (cmd == "STATUS") {
     aac:	2800      	cmp	r0, #0
     aae:	d056      	beq.n	b5e <loop+0x9d2>
	size_t print(const char s[])			{ return write(s); }
     ab0:	4620      	mov	r0, r4
     ab2:	4953      	ldr	r1, [pc, #332]	; (c00 <loop+0xa74>)
     ab4:	f7ff fad8 	bl	68 <Print::write(char const*) [clone .isra.0]>
      Serial2.print("FW "); Serial2.println(FW_VERSION);
     ab8:	4620      	mov	r0, r4
     aba:	4952      	ldr	r1, [pc, #328]	; (c04 <loop+0xa78>)
     abc:	f7ff fae4 	bl	88 <Print::println(char const*) [clone .isra.0]>
     ac0:	4620      	mov	r0, r4
     ac2:	4951      	ldr	r1, [pc, #324]	; (c08 <loop+0xa7c>)
     ac4:	f7ff fad0 	bl	68 <Print::write(char const*) [clone .isra.0]>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     ac8:	463b      	mov	r3, r7
     aca:	220a      	movs	r2, #10
     acc:	f8da 1000 	ldr.w	r1, [sl]
     ad0:	4620      	mov	r0, r4
      Serial2.print("BLINK "); Serial2.print(blink_ms); Serial2.println("ms");
      Serial2.print("HB "); Serial2.println(print_hb ? "ON" : "OFF");
     ad2:	f8df 8190 	ldr.w	r8, [pc, #400]	; c64 <loop+0xad8>
     ad6:	f000 fcd7 	bl	1488 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
      Serial2.print("BLINK "); Serial2.print(blink_ms); Serial2.println("ms");
     ada:	4620      	mov	r0, r4
     adc:	494b      	ldr	r1, [pc, #300]	; (c0c <loop+0xa80>)
     ade:	f7ff fad3 	bl	88 <Print::println(char const*) [clone .isra.0]>
	size_t print(const char s[])			{ return write(s); }
     ae2:	4620      	mov	r0, r4
     ae4:	494a      	ldr	r1, [pc, #296]	; (c10 <loop+0xa84>)
     ae6:	f7ff fabf 	bl	68 <Print::write(char const*) [clone .isra.0]>
      Serial2.print("HB "); Serial2.println(print_hb ? "ON" : "OFF");
     aea:	4f4a      	ldr	r7, [pc, #296]	; (c14 <loop+0xa88>)
     aec:	f899 1000 	ldrb.w	r1, [r9]
     af0:	4620      	mov	r0, r4
     af2:	2900      	cmp	r1, #0
     af4:	bf14      	ite	ne
     af6:	4641      	movne	r1, r8
     af8:	4639      	moveq	r1, r7
     afa:	f7ff fac5 	bl	88 <Print::println(char const*) [clone .isra.0]>
     afe:	4620      	mov	r0, r4
     b00:	4945      	ldr	r1, [pc, #276]	; (c18 <loop+0xa8c>)
     b02:	f7ff fab1 	bl	68 <Print::write(char const*) [clone .isra.0]>
      Serial2.print("ECHO "); Serial2.println(echo_enabled ? "ON" : "OFF");
     b06:	7829      	ldrb	r1, [r5, #0]
     b08:	4620      	mov	r0, r4
     b0a:	2900      	cmp	r1, #0
     b0c:	bf14      	ite	ne
     b0e:	4641      	movne	r1, r8
     b10:	4639      	moveq	r1, r7
     b12:	f7ff fab9 	bl	88 <Print::println(char const*) [clone .isra.0]>
     b16:	4620      	mov	r0, r4
     b18:	4940      	ldr	r1, [pc, #256]	; (c1c <loop+0xa90>)
     b1a:	f7ff faa5 	bl	68 <Print::write(char const*) [clone .isra.0]>
      Serial2.print("HEX session "); Serial2.println(in_hex_session ? "ACTIVE" : "IDLE");
     b1e:	7831      	ldrb	r1, [r6, #0]
     b20:	4a3f      	ldr	r2, [pc, #252]	; (c20 <loop+0xa94>)
     b22:	4620      	mov	r0, r4
     b24:	4b3f      	ldr	r3, [pc, #252]	; (c24 <loop+0xa98>)
     b26:	2900      	cmp	r1, #0
     b28:	bf14      	ite	ne
     b2a:	4611      	movne	r1, r2
     b2c:	4619      	moveq	r1, r3
     b2e:	f7ff faab 	bl	88 <Print::println(char const*) [clone .isra.0]>
      Serial2.printf("HEX lines=%lu ok=%lu bad=%lu bytes=%lu\n", hex_lines, hex_ok, hex_bad, hex_bytes);
     b32:	4b3d      	ldr	r3, [pc, #244]	; (c28 <loop+0xa9c>)
     b34:	4a3d      	ldr	r2, [pc, #244]	; (c2c <loop+0xaa0>)
     b36:	4620      	mov	r0, r4
     b38:	681b      	ldr	r3, [r3, #0]
     b3a:	493d      	ldr	r1, [pc, #244]	; (c30 <loop+0xaa4>)
     b3c:	9301      	str	r3, [sp, #4]
     b3e:	4b3d      	ldr	r3, [pc, #244]	; (c34 <loop+0xaa8>)
     b40:	681b      	ldr	r3, [r3, #0]
     b42:	9300      	str	r3, [sp, #0]
     b44:	4b3c      	ldr	r3, [pc, #240]	; (c38 <loop+0xaac>)
     b46:	6812      	ldr	r2, [r2, #0]
     b48:	681b      	ldr	r3, [r3, #0]
     b4a:	f000 fc8f 	bl	146c <Print::printf(char const*, ...)>
     b4e:	f8db 2000 	ldr.w	r2, [fp]
      Serial2.printf("UPTIME %lu ms\n", millis());
     b52:	493a      	ldr	r1, [pc, #232]	; (c3c <loop+0xab0>)
     b54:	4620      	mov	r0, r4
     b56:	f000 fc89 	bl	146c <Print::printf(char const*, ...)>
     b5a:	f7ff bbc6 	b.w	2ea <loop+0x15e>
     b5e:	4938      	ldr	r1, [pc, #224]	; (c40 <loop+0xab4>)
     b60:	a808      	add	r0, sp, #32
     b62:	f000 fd7d 	bl	1660 <String::equals(char const*) const>
    }
    else if (cmd == "HELP") {
     b66:	2800      	cmp	r0, #0
     b68:	d041      	beq.n	bee <loop+0xa62>
							  return write((const uint8_t *)str, strlen(str)); }
     b6a:	2207      	movs	r2, #7
     b6c:	4935      	ldr	r1, [pc, #212]	; (c44 <loop+0xab8>)
     b6e:	4620      	mov	r0, r4
     b70:	f000 fc38 	bl	13e4 <Print::write(unsigned char const*, unsigned int)>
	size_t println(const char s[])			{ return print(s) + println(); }
     b74:	4620      	mov	r0, r4
     b76:	f000 fc5d 	bl	1434 <Print::println()>
							  return write((const uint8_t *)str, strlen(str)); }
     b7a:	220d      	movs	r2, #13
     b7c:	4932      	ldr	r1, [pc, #200]	; (c48 <loop+0xabc>)
     b7e:	4620      	mov	r0, r4
     b80:	f000 fc30 	bl	13e4 <Print::write(unsigned char const*, unsigned int)>
	size_t println(const char s[])			{ return print(s) + println(); }
     b84:	4620      	mov	r0, r4
     b86:	f000 fc55 	bl	1434 <Print::println()>
							  return write((const uint8_t *)str, strlen(str)); }
     b8a:	2221      	movs	r2, #33	; 0x21
     b8c:	492f      	ldr	r1, [pc, #188]	; (c4c <loop+0xac0>)
     b8e:	4620      	mov	r0, r4
     b90:	f000 fc28 	bl	13e4 <Print::write(unsigned char const*, unsigned int)>
	size_t println(const char s[])			{ return print(s) + println(); }
     b94:	4620      	mov	r0, r4
     b96:	f000 fc4d 	bl	1434 <Print::println()>
							  return write((const uint8_t *)str, strlen(str)); }
     b9a:	2210      	movs	r2, #16
     b9c:	492c      	ldr	r1, [pc, #176]	; (c50 <loop+0xac4>)
     b9e:	4620      	mov	r0, r4
     ba0:	f000 fc20 	bl	13e4 <Print::write(unsigned char const*, unsigned int)>
	size_t println(const char s[])			{ return print(s) + println(); }
     ba4:	4620      	mov	r0, r4
     ba6:	f000 fc45 	bl	1434 <Print::println()>
							  return write((const uint8_t *)str, strlen(str)); }
     baa:	221b      	movs	r2, #27
     bac:	4929      	ldr	r1, [pc, #164]	; (c54 <loop+0xac8>)
     bae:	4620      	mov	r0, r4
     bb0:	f000 fc18 	bl	13e4 <Print::write(unsigned char const*, unsigned int)>
	size_t println(const char s[])			{ return print(s) + println(); }
     bb4:	4620      	mov	r0, r4
     bb6:	f000 fc3d 	bl	1434 <Print::println()>
							  return write((const uint8_t *)str, strlen(str)); }
     bba:	222a      	movs	r2, #42	; 0x2a
     bbc:	4926      	ldr	r1, [pc, #152]	; (c58 <loop+0xacc>)
     bbe:	4620      	mov	r0, r4
     bc0:	f000 fc10 	bl	13e4 <Print::write(unsigned char const*, unsigned int)>
	size_t println(const char s[])			{ return print(s) + println(); }
     bc4:	4620      	mov	r0, r4
     bc6:	f000 fc35 	bl	1434 <Print::println()>
							  return write((const uint8_t *)str, strlen(str)); }
     bca:	2222      	movs	r2, #34	; 0x22
     bcc:	4923      	ldr	r1, [pc, #140]	; (c5c <loop+0xad0>)
     bce:	4620      	mov	r0, r4
     bd0:	f000 fc08 	bl	13e4 <Print::write(unsigned char const*, unsigned int)>
	size_t println(const char s[])			{ return print(s) + println(); }
     bd4:	4620      	mov	r0, r4
     bd6:	f000 fc2d 	bl	1434 <Print::println()>
							  return write((const uint8_t *)str, strlen(str)); }
     bda:	2206      	movs	r2, #6
     bdc:	4907      	ldr	r1, [pc, #28]	; (bfc <loop+0xa70>)
     bde:	4620      	mov	r0, r4
     be0:	f000 fc00 	bl	13e4 <Print::write(unsigned char const*, unsigned int)>
	size_t println(const char s[])			{ return print(s) + println(); }
     be4:	4620      	mov	r0, r4
     be6:	f000 fc25 	bl	1434 <Print::println()>
     bea:	f7ff bb7e 	b.w	2ea <loop+0x15e>
      printHelp();
    }
    else {
      Serial2.println("ERR UNKNOWN (try HELP)");
     bee:	491c      	ldr	r1, [pc, #112]	; (c60 <loop+0xad4>)
     bf0:	4620      	mov	r0, r4
     bf2:	f7ff fa49 	bl	88 <Print::println(char const*) [clone .isra.0]>
     bf6:	f7ff bb78 	b.w	2ea <loop+0x15e>
     bfa:	bf00      	nop
     bfc:	20000bb0 	.word	0x20000bb0
     c00:	20000b74 	.word	0x20000b74
     c04:	20000d3c 	.word	0x20000d3c
     c08:	20000b7c 	.word	0x20000b7c
     c0c:	200009d0 	.word	0x200009d0
     c10:	200009cc 	.word	0x200009cc
     c14:	200009c0 	.word	0x200009c0
     c18:	20000bb8 	.word	0x20000bb8
     c1c:	20000bc0 	.word	0x20000bc0
     c20:	200009c4 	.word	0x200009c4
     c24:	20000aa8 	.word	0x20000aa8
     c28:	20001cfc 	.word	0x20001cfc
     c2c:	20001d00 	.word	0x20001d00
     c30:	20000bd0 	.word	0x20000bd0
     c34:	20001cf8 	.word	0x20001cf8
     c38:	20001cf4 	.word	0x20001cf4
     c3c:	20000bf8 	.word	0x20000bf8
     c40:	20000c08 	.word	0x20000c08
     c44:	20000c10 	.word	0x20000c10
     c48:	20000c18 	.word	0x20000c18
     c4c:	20000c28 	.word	0x20000c28
     c50:	20000c4c 	.word	0x20000c4c
     c54:	20000c60 	.word	0x20000c60
     c58:	20000c7c 	.word	0x20000c7c
     c5c:	20000ca8 	.word	0x20000ca8
     c60:	20000ccc 	.word	0x20000ccc
     c64:	200009bc 	.word	0x200009bc

00000c68 <HardwareSerialIMXRT::operator bool()>:
	virtual void begin(uint32_t baud, uint32_t format) {
					  serial_begin(BAUD2DIV(baud));
					  serial_format(format); }
	*/

	operator bool()			{ return true; }
     c68:	2001      	movs	r0, #1
     c6a:	4770      	bx	lr

00000c6c <HardwareSerialIMXRT::availableForWrite()>:

int HardwareSerialIMXRT::availableForWrite(void)
{
	uint32_t head, tail;

	head = tx_buffer_head_;
     c6c:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
	tail = tx_buffer_tail_;
     c70:	f8b0 2048 	ldrh.w	r2, [r0, #72]	; 0x48
	head = tx_buffer_head_;
     c74:	b29b      	uxth	r3, r3
	tail = tx_buffer_tail_;
     c76:	b292      	uxth	r2, r2
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
     c78:	4293      	cmp	r3, r2
     c7a:	d202      	bcs.n	c82 <HardwareSerialIMXRT::availableForWrite()+0x16>
	return tail - head - 1;
     c7c:	3a01      	subs	r2, #1
     c7e:	1ad0      	subs	r0, r2, r3
}
     c80:	4770      	bx	lr
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
     c82:	6b41      	ldr	r1, [r0, #52]	; 0x34
     c84:	3901      	subs	r1, #1
     c86:	440a      	add	r2, r1
     c88:	1ad0      	subs	r0, r2, r3
     c8a:	4770      	bx	lr

00000c8c <HardwareSerialIMXRT::available()>:



int HardwareSerialIMXRT::available(void)
{
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
     c8c:	6901      	ldr	r1, [r0, #16]
	uint32_t head, tail;

	// WATER> 0 so IDLE involved may want to check if port has already has RX data to retrieve
	__disable_irq();
     c8e:	b672      	cpsid	i
	head = rx_buffer_head_;
     c90:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
	tail = rx_buffer_tail_;
     c94:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
	head = rx_buffer_head_;
     c98:	b292      	uxth	r2, r2
	tail = rx_buffer_tail_;
     c9a:	b29b      	uxth	r3, r3
	int avail;
	if (head >= tail) avail = head - tail;
     c9c:	429a      	cmp	r2, r3
	else avail = rx_buffer_total_size_ + head - tail;	
     c9e:	bf3c      	itt	cc
     ca0:	6b80      	ldrcc	r0, [r0, #56]	; 0x38
     ca2:	1812      	addcc	r2, r2, r0
	avail += (port->WATER >> 24) & 0x7;
     ca4:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
	else avail = rx_buffer_total_size_ + head - tail;	
     ca6:	1ad3      	subs	r3, r2, r3
	__enable_irq();
     ca8:	b662      	cpsie	i
	avail += (port->WATER >> 24) & 0x7;
     caa:	f3c0 6002 	ubfx	r0, r0, #24, #3
	return avail;
}
     cae:	4418      	add	r0, r3
     cb0:	4770      	bx	lr
     cb2:	bf00      	nop

00000cb4 <HardwareSerialIMXRT::peek()>:
int HardwareSerialIMXRT::peek(void)
{
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
	uint32_t head, tail;

	head = rx_buffer_head_;
     cb4:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
{
     cb8:	4602      	mov	r2, r0
	tail = rx_buffer_tail_;
     cba:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
	head = rx_buffer_head_;
     cbe:	b289      	uxth	r1, r1
	tail = rx_buffer_tail_;
     cc0:	b29b      	uxth	r3, r3
	if (head == tail) {
     cc2:	4299      	cmp	r1, r3
{
     cc4:	b410      	push	{r4}
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
     cc6:	6904      	ldr	r4, [r0, #16]
	if (head == tail) {
     cc8:	d014      	beq.n	cf4 <HardwareSerialIMXRT::peek()+0x40>
			return c;
		}
		__enable_irq();

	} 
	if (++tail >= rx_buffer_total_size_) tail = 0;
     cca:	3301      	adds	r3, #1
     ccc:	6b90      	ldr	r0, [r2, #56]	; 0x38
	if (tail < rx_buffer_size_) {
     cce:	6b11      	ldr	r1, [r2, #48]	; 0x30
	if (++tail >= rx_buffer_total_size_) tail = 0;
     cd0:	4298      	cmp	r0, r3
     cd2:	bf98      	it	ls
     cd4:	2300      	movls	r3, #0
	if (tail < rx_buffer_size_) {
     cd6:	4299      	cmp	r1, r3
     cd8:	d806      	bhi.n	ce8 <HardwareSerialIMXRT::peek()+0x34>
		return rx_buffer_[tail];
	} else {
		return rx_buffer_storage_[tail-rx_buffer_size_];
     cda:	1a5b      	subs	r3, r3, r1
     cdc:	6a52      	ldr	r2, [r2, #36]	; 0x24
     cde:	5cd0      	ldrb	r0, [r2, r3]
     ce0:	b2c0      	uxtb	r0, r0
	}
}
     ce2:	f85d 4b04 	ldr.w	r4, [sp], #4
     ce6:	4770      	bx	lr
		return rx_buffer_[tail];
     ce8:	6a12      	ldr	r2, [r2, #32]
}
     cea:	f85d 4b04 	ldr.w	r4, [sp], #4
		return rx_buffer_[tail];
     cee:	5cd0      	ldrb	r0, [r2, r3]
     cf0:	b2c0      	uxtb	r0, r0
}
     cf2:	4770      	bx	lr
		__disable_irq();
     cf4:	b672      	cpsid	i
		head = rx_buffer_head_;  // reread head to make sure no ISR happened
     cf6:	f8b0 004a 	ldrh.w	r0, [r0, #74]	; 0x4a
     cfa:	b280      	uxth	r0, r0
		if (head == tail) {
     cfc:	4281      	cmp	r1, r0
     cfe:	d001      	beq.n	d04 <HardwareSerialIMXRT::peek()+0x50>
		__enable_irq();
     d00:	b662      	cpsie	i
     d02:	e7e2      	b.n	cca <HardwareSerialIMXRT::peek()+0x16>
			if (port->WATER & 0x7000000) {
     d04:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     d06:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
     d0a:	d103      	bne.n	d14 <HardwareSerialIMXRT::peek()+0x60>
			int c = -1;	// assume nothing to return
     d0c:	f04f 30ff 	mov.w	r0, #4294967295
			__enable_irq();
     d10:	b662      	cpsie	i
			return c;
     d12:	e7e6      	b.n	ce2 <HardwareSerialIMXRT::peek()+0x2e>
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
     d14:	69e3      	ldr	r3, [r4, #28]
				rx_buffer_head_ = 1;
     d16:	2001      	movs	r0, #1
				rx_buffer_tail_ = 0; 
     d18:	2400      	movs	r4, #0
				rx_buffer_[1] = c;
     d1a:	6a11      	ldr	r1, [r2, #32]
				rx_buffer_head_ = 1;
     d1c:	f8a2 004a 	strh.w	r0, [r2, #74]	; 0x4a
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
     d20:	f3c3 0009 	ubfx	r0, r3, #0, #10
				rx_buffer_[1] = c;
     d24:	b2db      	uxtb	r3, r3
				rx_buffer_tail_ = 0; 
     d26:	f8a2 404c 	strh.w	r4, [r2, #76]	; 0x4c
				rx_buffer_[1] = c;
     d2a:	704b      	strb	r3, [r1, #1]
     d2c:	e7f0      	b.n	d10 <HardwareSerialIMXRT::peek()+0x5c>
     d2e:	bf00      	nop

00000d30 <HardwareSerialIMXRT::read()>:
{
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
	uint32_t head, tail;
	int c;

	head = rx_buffer_head_;
     d30:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
{
     d34:	4602      	mov	r2, r0
	tail = rx_buffer_tail_;
     d36:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
	head = rx_buffer_head_;
     d3a:	b289      	uxth	r1, r1
	tail = rx_buffer_tail_;
     d3c:	b29b      	uxth	r3, r3
	if (head == tail) {
     d3e:	4299      	cmp	r1, r3
{
     d40:	b430      	push	{r4, r5}
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
     d42:	6904      	ldr	r4, [r0, #16]
	if (head == tail) {
     d44:	d025      	beq.n	d92 <HardwareSerialIMXRT::read()+0x62>
			return c;
		}
		__enable_irq();

	}
	if (++tail >= rx_buffer_total_size_) tail = 0;
     d46:	3301      	adds	r3, #1
     d48:	6b94      	ldr	r4, [r2, #56]	; 0x38
     d4a:	429c      	cmp	r4, r3
     d4c:	d916      	bls.n	d7c <HardwareSerialIMXRT::read()+0x4c>
	if (tail < rx_buffer_size_) {
     d4e:	6b10      	ldr	r0, [r2, #48]	; 0x30
		c = rx_buffer_[tail];
	} else {
		c = rx_buffer_storage_[tail-rx_buffer_size_];
	}
	rx_buffer_tail_ = tail;
     d50:	fa1f fc83 	uxth.w	ip, r3
	if (tail < rx_buffer_size_) {
     d54:	4298      	cmp	r0, r3
     d56:	d917      	bls.n	d88 <HardwareSerialIMXRT::read()+0x58>
		c = rx_buffer_[tail];
     d58:	6a10      	ldr	r0, [r2, #32]
     d5a:	5cc0      	ldrb	r0, [r0, r3]
     d5c:	b2c0      	uxtb	r0, r0
	if (rts_pin_baseReg_) {
     d5e:	6d95      	ldr	r5, [r2, #88]	; 0x58
	rx_buffer_tail_ = tail;
     d60:	f8a2 c04c 	strh.w	ip, [r2, #76]	; 0x4c
	if (rts_pin_baseReg_) {
     d64:	b145      	cbz	r5, d78 <HardwareSerialIMXRT::read()+0x48>
		uint32_t avail;
		if (head >= tail) avail = head - tail;
     d66:	4299      	cmp	r1, r3
     d68:	d31c      	bcc.n	da4 <HardwareSerialIMXRT::read()+0x74>
     d6a:	1acb      	subs	r3, r1, r3
		else avail = rx_buffer_total_size_ + head - tail;

		if (avail <= rts_low_watermark_) rts_assert();
     d6c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
     d6e:	4299      	cmp	r1, r3
     d70:	d302      	bcc.n	d78 <HardwareSerialIMXRT::read()+0x48>
	DIRECT_WRITE_LOW(rts_pin_baseReg_, rts_pin_bitmask_);
     d72:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
     d74:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
	}
	return c;
}	
     d78:	bc30      	pop	{r4, r5}
     d7a:	4770      	bx	lr
     d7c:	f04f 0c00 	mov.w	ip, #0
	if (tail < rx_buffer_size_) {
     d80:	6b10      	ldr	r0, [r2, #48]	; 0x30
	if (++tail >= rx_buffer_total_size_) tail = 0;
     d82:	4663      	mov	r3, ip
	if (tail < rx_buffer_size_) {
     d84:	4298      	cmp	r0, r3
     d86:	d8e7      	bhi.n	d58 <HardwareSerialIMXRT::read()+0x28>
		c = rx_buffer_storage_[tail-rx_buffer_size_];
     d88:	1a18      	subs	r0, r3, r0
     d8a:	6a55      	ldr	r5, [r2, #36]	; 0x24
     d8c:	5c28      	ldrb	r0, [r5, r0]
     d8e:	b2c0      	uxtb	r0, r0
     d90:	e7e5      	b.n	d5e <HardwareSerialIMXRT::read()+0x2e>
     d92:	4608      	mov	r0, r1
		__disable_irq();
     d94:	b672      	cpsid	i
		head = rx_buffer_head_;  // reread head to make sure no ISR happened
     d96:	f8b2 104a 	ldrh.w	r1, [r2, #74]	; 0x4a
     d9a:	b289      	uxth	r1, r1
		if (head == tail) {
     d9c:	4288      	cmp	r0, r1
     d9e:	d004      	beq.n	daa <HardwareSerialIMXRT::read()+0x7a>
		__enable_irq();
     da0:	b662      	cpsie	i
     da2:	e7d0      	b.n	d46 <HardwareSerialIMXRT::read()+0x16>
		else avail = rx_buffer_total_size_ + head - tail;
     da4:	440c      	add	r4, r1
     da6:	1ae3      	subs	r3, r4, r3
     da8:	e7e0      	b.n	d6c <HardwareSerialIMXRT::read()+0x3c>
			if (port->WATER & 0x7000000) {
     daa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     dac:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
     db0:	d103      	bne.n	dba <HardwareSerialIMXRT::read()+0x8a>
			c = -1;	// assume nothing to return
     db2:	f04f 30ff 	mov.w	r0, #4294967295
			__enable_irq();
     db6:	b662      	cpsie	i
			return c;
     db8:	e7de      	b.n	d78 <HardwareSerialIMXRT::read()+0x48>
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
     dba:	69e0      	ldr	r0, [r4, #28]
     dbc:	f3c0 0009 	ubfx	r0, r0, #0, #10
     dc0:	e7f9      	b.n	db6 <HardwareSerialIMXRT::read()+0x86>
     dc2:	bf00      	nop

00000dc4 <HardwareSerialIMXRT::flush()>:

void HardwareSerialIMXRT::flush(void)
{
	while (transmitting_) yield(); // wait
     dc4:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
     dc8:	b143      	cbz	r3, ddc <HardwareSerialIMXRT::flush()+0x18>
{
     dca:	b510      	push	{r4, lr}
     dcc:	4604      	mov	r4, r0
	while (transmitting_) yield(); // wait
     dce:	f002 f8c3 	bl	2f58 <yield>
     dd2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
     dd6:	2b00      	cmp	r3, #0
     dd8:	d1f9      	bne.n	dce <HardwareSerialIMXRT::flush()+0xa>
}
     dda:	bd10      	pop	{r4, pc}
     ddc:	4770      	bx	lr
     dde:	bf00      	nop

00000de0 <HardwareSerialIMXRT::end()>:
{
     de0:	b538      	push	{r3, r4, r5, lr}
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
     de2:	e9d0 5304 	ldrd	r5, r3, [r0, #16]
	if (!(hardware->ccm_register & hardware->ccm_value)) return;
     de6:	e9d3 1203 	ldrd	r1, r2, [r3, #12]
     dea:	6809      	ldr	r1, [r1, #0]
     dec:	4211      	tst	r1, r2
     dee:	d028      	beq.n	e42 <HardwareSerialIMXRT::end()+0x62>
	while (transmitting_) yield();  // wait for buffered data to send
     df0:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
     df4:	4604      	mov	r4, r0
     df6:	b132      	cbz	r2, e06 <HardwareSerialIMXRT::end()+0x26>
     df8:	f002 f8ae 	bl	2f58 <yield>
     dfc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
     e00:	2b00      	cmp	r3, #0
     e02:	d1f9      	bne.n	df8 <HardwareSerialIMXRT::end()+0x18>
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = 5;
     e04:	6963      	ldr	r3, [r4, #20]
	port->CTRL = 0;	// disable the TX and RX ...
     e06:	2100      	movs	r1, #0
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = 5;
     e08:	4a0e      	ldr	r2, [pc, #56]	; (e44 <HardwareSerialIMXRT::end()+0x64>)
	port->CTRL = 0;	// disable the TX and RX ...
     e0a:	61a9      	str	r1, [r5, #24]
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = 5;
     e0c:	7e20      	ldrb	r0, [r4, #24]
     e0e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
     e12:	7d00      	ldrb	r0, [r0, #20]
     e14:	eb02 1000 	add.w	r0, r2, r0, lsl #4
     e18:	6845      	ldr	r5, [r0, #4]
     e1a:	2005      	movs	r0, #5
     e1c:	6028      	str	r0, [r5, #0]
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = 5;
     e1e:	7e65      	ldrb	r5, [r4, #25]
     e20:	eb03 1305 	add.w	r3, r3, r5, lsl #4
     e24:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
     e28:	eb02 1203 	add.w	r2, r2, r3, lsl #4
	if (rts_pin_baseReg_) rts_deassert();
     e2c:	6da3      	ldr	r3, [r4, #88]	; 0x58
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = 5;
     e2e:	6852      	ldr	r2, [r2, #4]
     e30:	6010      	str	r0, [r2, #0]
	rx_buffer_head_ = 0;
     e32:	f8a4 104a 	strh.w	r1, [r4, #74]	; 0x4a
	rx_buffer_tail_ = 0;
     e36:	f8a4 104c 	strh.w	r1, [r4, #76]	; 0x4c
	if (rts_pin_baseReg_) rts_deassert();
     e3a:	b113      	cbz	r3, e42 <HardwareSerialIMXRT::end()+0x62>
	DIRECT_WRITE_HIGH(rts_pin_baseReg_, rts_pin_bitmask_);
     e3c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
     e3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
     e42:	bd38      	pop	{r3, r4, r5, pc}
     e44:	2000064c 	.word	0x2000064c

00000e48 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)>:
	float base = (float)UART_CLOCK / (float)baud;
     e48:	ee07 1a90 	vmov	s15, r1
     e4c:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 10b8 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x270>
	for (int osr=4; osr <= 32; osr++) {
     e50:	2104      	movs	r1, #4
		int divint = (int)(div + 0.5f);
     e52:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
	float base = (float)UART_CLOCK / (float)baud;
     e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
	float besterr = 1e20;
     e5a:	ed9f 6a98 	vldr	s12, [pc, #608]	; 10bc <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x274>
     e5e:	f641 7cff 	movw	ip, #8191	; 0x1fff
	float base = (float)UART_CLOCK / (float)baud;
     e62:	eec7 5a27 	vdiv.f32	s11, s14, s15
{
     e66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int bestosr = 4;
     e6a:	468e      	mov	lr, r1
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
     e6c:	6905      	ldr	r5, [r0, #16]
	int bestdiv = 1;
     e6e:	2401      	movs	r4, #1
		float div = base / (float)osr;
     e70:	ee07 1a90 	vmov	s15, r1
     e74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
     e78:	ee85 7aa7 	vdiv.f32	s14, s11, s15
		int divint = (int)(div + 0.5f);
     e7c:	ee77 7a05 	vadd.f32	s15, s14, s10
     e80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
     e84:	ee17 3a90 	vmov	r3, s15
     e88:	4563      	cmp	r3, ip
     e8a:	bfa8      	it	ge
     e8c:	4663      	movge	r3, ip
     e8e:	2b01      	cmp	r3, #1
     e90:	bfb8      	it	lt
     e92:	2301      	movlt	r3, #1
		float err = ((float)divint - div) / div;
     e94:	ee07 3a90 	vmov	s15, r3
     e98:	eef8 6ae7 	vcvt.f32.s32	s13, s15
     e9c:	ee76 6ac7 	vsub.f32	s13, s13, s14
     ea0:	eec6 7a87 	vdiv.f32	s15, s13, s14
		if (err < 0.0f) err = -err;
     ea4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
     ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     eac:	bf48      	it	mi
     eae:	eef1 7a67 	vnegmi.f32	s15, s15
		if (err <= besterr) {
     eb2:	eef4 7ac6 	vcmpe.f32	s15, s12
     eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     eba:	d803      	bhi.n	ec4 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x7c>
			besterr = err;
     ebc:	eeb0 6a67 	vmov.f32	s12, s15
		if (err <= besterr) {
     ec0:	468e      	mov	lr, r1
			bestdiv = divint;
     ec2:	461c      	mov	r4, r3
	for (int osr=4; osr <= 32; osr++) {
     ec4:	3101      	adds	r1, #1
     ec6:	2921      	cmp	r1, #33	; 0x21
     ec8:	d1d2      	bne.n	e70 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x28>
	rx_buffer_head_ = 0;
     eca:	2100      	movs	r1, #0
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
     ecc:	6943      	ldr	r3, [r0, #20]
     ece:	f402 7600 	and.w	r6, r2, #512	; 0x200
	rx_buffer_head_ = 0;
     ed2:	f8a0 104a 	strh.w	r1, [r0, #74]	; 0x4a
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
     ed6:	f8b3 c05a 	ldrh.w	ip, [r3, #90]	; 0x5a
	half_duplex_mode_ = (format & SERIAL_HALF_DUPLEX) != 0;
     eda:	428e      	cmp	r6, r1
	rx_buffer_tail_ = 0;
     edc:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
     ee0:	f8b3 6058 	ldrh.w	r6, [r3, #88]	; 0x58
	tx_buffer_head_ = 0;
     ee4:	f8a0 1046 	strh.w	r1, [r0, #70]	; 0x46
	tx_buffer_tail_ = 0;
     ee8:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
	transmitting_ = 0;
     eec:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
     ef0:	6b81      	ldr	r1, [r0, #56]	; 0x38
	hardware->ccm_register |= hardware->ccm_value;
     ef2:	68df      	ldr	r7, [r3, #12]
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
     ef4:	eba1 0606 	sub.w	r6, r1, r6
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
     ef8:	eba1 010c 	sub.w	r1, r1, ip
     efc:	e9c0 610f 	strd	r6, r1, [r0, #60]	; 0x3c
	hardware->ccm_register |= hardware->ccm_value;
     f00:	6839      	ldr	r1, [r7, #0]
     f02:	691e      	ldr	r6, [r3, #16]
     f04:	ea41 0106 	orr.w	r1, r1, r6
     f08:	6039      	str	r1, [r7, #0]
	half_duplex_mode_ = (format & SERIAL_HALF_DUPLEX) != 0;
     f0a:	bf14      	ite	ne
     f0c:	2101      	movne	r1, #1
     f0e:	2100      	moveq	r1, #0
     f10:	7681      	strb	r1, [r0, #26]
	if (!half_duplex_mode_)  {
     f12:	f040 80ac 	bne.w	106e <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x226>
		*(portControlRegister(hardware->rx_pins[rx_pin_index_].pin)) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     f16:	7e01      	ldrb	r1, [r0, #24]
     f18:	4e69      	ldr	r6, [pc, #420]	; (10c0 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x278>)
     f1a:	eb03 1801 	add.w	r8, r3, r1, lsl #4
     f1e:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 10e0 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x298>
     f22:	f898 7014 	ldrb.w	r7, [r8, #20]
		if (hardware->rx_pins[rx_pin_index_].select_input_register) {
     f26:	f8d8 a01c 	ldr.w	sl, [r8, #28]
		*(portControlRegister(hardware->rx_pins[rx_pin_index_].pin)) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     f2a:	eb06 1707 	add.w	r7, r6, r7, lsl #4
     f2e:	68b9      	ldr	r1, [r7, #8]
     f30:	f8c1 9000 	str.w	r9, [r1]
		*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = hardware->rx_pins[rx_pin_index_].mux_val;
     f34:	6879      	ldr	r1, [r7, #4]
     f36:	f8d8 7018 	ldr.w	r7, [r8, #24]
     f3a:	600f      	str	r7, [r1, #0]
		if (hardware->rx_pins[rx_pin_index_].select_input_register) {
     f3c:	f1ba 0f00 	cmp.w	sl, #0
     f40:	d003      	beq.n	f4a <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x102>
		 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
     f42:	f8d8 1020 	ldr.w	r1, [r8, #32]
     f46:	f8ca 1000 	str.w	r1, [sl]
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
     f4a:	7e47      	ldrb	r7, [r0, #25]
     f4c:	21d9      	movs	r1, #217	; 0xd9
     f4e:	eb03 1807 	add.w	r8, r3, r7, lsl #4
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3) 
     f52:	f898 c034 	ldrb.w	ip, [r8, #52]	; 0x34
     f56:	eb06 1c0c 	add.w	ip, r6, ip, lsl #4
     f5a:	f8dc 7008 	ldr.w	r7, [ip, #8]
     f5e:	6039      	str	r1, [r7, #0]
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
     f60:	f8dc 1004 	ldr.w	r1, [ip, #4]
     f64:	f8d8 7038 	ldr.w	r7, [r8, #56]	; 0x38
     f68:	600f      	str	r7, [r1, #0]
	if (hardware->tx_pins[tx_pin_index_].select_input_register) {
     f6a:	7e41      	ldrb	r1, [r0, #25]
     f6c:	eb03 1101 	add.w	r1, r3, r1, lsl #4
     f70:	6bcf      	ldr	r7, [r1, #60]	; 0x3c
     f72:	b10f      	cbz	r7, f78 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x130>
	 	*(hardware->tx_pins[tx_pin_index_].select_input_register) =  hardware->tx_pins[tx_pin_index_].select_val;		
     f74:	6c09      	ldr	r1, [r1, #64]	; 0x40
     f76:	6039      	str	r1, [r7, #0]
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
     f78:	f10e 31ff 	add.w	r1, lr, #4294967295
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
     f7c:	f1be 0f08 	cmp.w	lr, #8
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
     f80:	ea4f 6101 	mov.w	r1, r1, lsl #24
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
     f84:	bfcc      	ite	gt
     f86:	f04f 0e00 	movgt.w	lr, #0
     f8a:	f04f 0e01 	movle.w	lr, #1
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
     f8e:	f001 51f8 	and.w	r1, r1, #520093696	; 0x1f000000
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
     f92:	ea44 444e 	orr.w	r4, r4, lr, lsl #17
     f96:	4321      	orrs	r1, r4
	attachInterruptVector(hardware->irq, hardware->irq_handler);
     f98:	685c      	ldr	r4, [r3, #4]
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
     f9a:	6129      	str	r1, [r5, #16]
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
     f9c:	7859      	ldrb	r1, [r3, #1]
     f9e:	f101 0310 	add.w	r3, r1, #16
	port->PINCFG = 0;
     fa2:	2100      	movs	r1, #0
     fa4:	60e9      	str	r1, [r5, #12]
     fa6:	4947      	ldr	r1, [pc, #284]	; (10c4 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x27c>)
     fa8:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
     fac:	6941      	ldr	r1, [r0, #20]
	NVIC_ENABLE_IRQ(hardware->irq);
     fae:	f04f 0e01 	mov.w	lr, #1
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
     fb2:	4c45      	ldr	r4, [pc, #276]	; (10c8 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x280>)
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
     fb4:	f002 0c03 	and.w	ip, r2, #3
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
     fb8:	784f      	ldrb	r7, [r1, #1]
     fba:	f891 1056 	ldrb.w	r1, [r1, #86]	; 0x56
	NVIC_ENABLE_IRQ(hardware->irq);
     fbe:	4b43      	ldr	r3, [pc, #268]	; (10cc <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x284>)
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
     fc0:	5539      	strb	r1, [r7, r4]
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
     fc2:	f04f 1702 	mov.w	r7, #131074	; 0x20002
	NVIC_ENABLE_IRQ(hardware->irq);
     fc6:	6944      	ldr	r4, [r0, #20]
     fc8:	7861      	ldrb	r1, [r4, #1]
     fca:	eb03 1351 	add.w	r3, r3, r1, lsr #5
     fce:	f001 011f 	and.w	r1, r1, #31
     fd2:	009b      	lsls	r3, r3, #2
     fd4:	fa0e f101 	lsl.w	r1, lr, r1
     fd8:	6019      	str	r1, [r3, #0]
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
     fda:	62ef      	str	r7, [r5, #44]	; 0x2c
	port->FIFO |= LPUART_FIFO_TXFE | LPUART_FIFO_RXFE;
     fdc:	6aab      	ldr	r3, [r5, #40]	; 0x28
     fde:	f043 0388 	orr.w	r3, r3, #136	; 0x88
     fe2:	62ab      	str	r3, [r5, #40]	; 0x28
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
     fe4:	0753      	lsls	r3, r2, #29
     fe6:	d43e      	bmi.n	1066 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x21e>
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
     fe8:	f44c 1370 	orr.w	r3, ip, #3932160	; 0x3c0000
	if ((format & 0x0F) == 0x04) ctrl |=  LPUART_CTRL_R9T8; // 8N2 is 9 bit with 9th bit always 1
     fec:	f002 010f 	and.w	r1, r2, #15
     ff0:	2904      	cmp	r1, #4
     ff2:	bf08      	it	eq
     ff4:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
	if (format & 0x20) {
     ff8:	0697      	lsls	r7, r2, #26
     ffa:	d52e      	bpl.n	105a <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x212>
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
     ffc:	7e81      	ldrb	r1, [r0, #26]
		ctrl |= LPUART_CTRL_TXINV;		// tx invert
     ffe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
    1002:	2900      	cmp	r1, #0
    1004:	d13a      	bne.n	107c <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x234>
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
    1006:	0716      	lsls	r6, r2, #28
	port->CTRL = ctrl;
    1008:	61ab      	str	r3, [r5, #24]
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
    100a:	d503      	bpl.n	1014 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1cc>
    100c:	692b      	ldr	r3, [r5, #16]
    100e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    1012:	612b      	str	r3, [r5, #16]
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
    1014:	696b      	ldr	r3, [r5, #20]
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
    1016:	06d1      	lsls	r1, r2, #27
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
    1018:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
    101c:	bf48      	it	mi
    101e:	f043 5380 	orrmi.w	r3, r3, #268435456	; 0x10000000
	port->STAT = c;
    1022:	616b      	str	r3, [r5, #20]
	if ( format & 0x100) port->BAUD |= LPUART_BAUD_SBNS;	
    1024:	05d3      	lsls	r3, r2, #23
    1026:	d503      	bpl.n	1030 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1e8>
    1028:	692b      	ldr	r3, [r5, #16]
    102a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    102e:	612b      	str	r3, [r5, #16]
	if (hardware->_serialEvent) addToSerialEventsList();
    1030:	68a3      	ldr	r3, [r4, #8]
    1032:	b183      	cbz	r3, 1056 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x20e>
	//digitalWrite(4, LOW);
}


void HardwareSerialIMXRT::addToSerialEventsList() {
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    1034:	4e26      	ldr	r6, [pc, #152]	; (10d0 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x288>)
    1036:	7834      	ldrb	r4, [r6, #0]
    1038:	2c00      	cmp	r4, #0
    103a:	d03a      	beq.n	10b2 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x26a>
    103c:	1e61      	subs	r1, r4, #1
    103e:	4d25      	ldr	r5, [pc, #148]	; (10d4 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x28c>)
    1040:	b2c9      	uxtb	r1, r1
    1042:	1f2b      	subs	r3, r5, #4
    1044:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    1048:	e001      	b.n	104e <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x206>
    104a:	4299      	cmp	r1, r3
    104c:	d025      	beq.n	109a <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x252>
		if (s_serials_with_serial_events[i] == this) return; // already in the list.
    104e:	f853 2f04 	ldr.w	r2, [r3, #4]!
    1052:	4290      	cmp	r0, r2
    1054:	d1f9      	bne.n	104a <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x202>
};
    1056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
    105a:	7e81      	ldrb	r1, [r0, #26]
    105c:	2900      	cmp	r1, #0
    105e:	d0d2      	beq.n	1006 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1be>
    1060:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
    1064:	e7cf      	b.n	1006 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1be>
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
    1066:	4b1c      	ldr	r3, [pc, #112]	; (10d8 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x290>)
    1068:	ea4c 0303 	orr.w	r3, ip, r3
    106c:	e7be      	b.n	fec <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1a4>
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3) 
    106e:	7e47      	ldrb	r7, [r0, #25]
    1070:	f24f 01d9 	movw	r1, #61657	; 0xf0d9
    1074:	4e12      	ldr	r6, [pc, #72]	; (10c0 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x278>)
    1076:	eb03 1807 	add.w	r8, r3, r7, lsl #4
    107a:	e76a      	b.n	f52 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x10a>
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
    107c:	7e41      	ldrb	r1, [r0, #25]
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
    107e:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
    1082:	eb04 1101 	add.w	r1, r4, r1, lsl #4
    1086:	f891 1034 	ldrb.w	r1, [r1, #52]	; 0x34
    108a:	eb06 1601 	add.w	r6, r6, r1, lsl #4
    108e:	68b6      	ldr	r6, [r6, #8]
    1090:	6831      	ldr	r1, [r6, #0]
    1092:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
    1096:	6031      	str	r1, [r6, #0]
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
    1098:	e7b5      	b.n	1006 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1be>
	}
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    109a:	1c63      	adds	r3, r4, #1
    109c:	b2db      	uxtb	r3, r3
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    109e:	4a0f      	ldr	r2, [pc, #60]	; (10dc <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x294>)
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    10a0:	7033      	strb	r3, [r6, #0]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    10a2:	7813      	ldrb	r3, [r2, #0]
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    10a4:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    10a8:	f043 0302 	orr.w	r3, r3, #2
    10ac:	7013      	strb	r3, [r2, #0]
};
    10ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    10b2:	2301      	movs	r3, #1
    10b4:	4d07      	ldr	r5, [pc, #28]	; (10d4 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x28c>)
    10b6:	e7f2      	b.n	109e <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x256>
    10b8:	4bb71b00 	.word	0x4bb71b00
    10bc:	60ad78ec 	.word	0x60ad78ec
    10c0:	2000064c 	.word	0x2000064c
    10c4:	20001800 	.word	0x20001800
    10c8:	e000e400 	.word	0xe000e400
    10cc:	38003840 	.word	0x38003840
    10d0:	20002109 	.word	0x20002109
    10d4:	20001d14 	.word	0x20001d14
    10d8:	003c0010 	.word	0x003c0010
    10dc:	20002117 	.word	0x20002117
    10e0:	0001f038 	.word	0x0001f038

000010e4 <nvic_execution_priority()>:
	__asm__ volatile("mrs %0, faultmask\n" : "=r" (faultmask)::);
    10e4:	f3ef 8013 	mrs	r0, FAULTMASK
	if (faultmask) return -1;
    10e8:	b9b8      	cbnz	r0, 111a <nvic_execution_priority()+0x36>
	__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    10ea:	f3ef 8310 	mrs	r3, PRIMASK
	if (primask) return 0;
    10ee:	b94b      	cbnz	r3, 1104 <nvic_execution_priority()+0x20>
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    10f0:	f3ef 8205 	mrs	r2, IPSR
	if (ipsr) {
    10f4:	b93a      	cbnz	r2, 1106 <nvic_execution_priority()+0x22>
	uint32_t priority=256;
    10f6:	f44f 7380 	mov.w	r3, #256	; 0x100
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    10fa:	f3ef 8011 	mrs	r0, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    10fe:	b150      	cbz	r0, 1116 <nvic_execution_priority()+0x32>
    1100:	4298      	cmp	r0, r3
    1102:	d208      	bcs.n	1116 <nvic_execution_priority()+0x32>
}
    1104:	4770      	bx	lr
		if (ipsr < 16) priority = 0; // could be non-zero
    1106:	2a0f      	cmp	r2, #15
    1108:	d9f7      	bls.n	10fa <nvic_execution_priority()+0x16>
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
    110a:	4b05      	ldr	r3, [pc, #20]	; (1120 <nvic_execution_priority()+0x3c>)
    110c:	5c9b      	ldrb	r3, [r3, r2]
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    110e:	f3ef 8011 	mrs	r0, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    1112:	2800      	cmp	r0, #0
    1114:	d1f4      	bne.n	1100 <nvic_execution_priority()+0x1c>
    1116:	4618      	mov	r0, r3
	return priority;
    1118:	4770      	bx	lr
	if (faultmask) return -1;
    111a:	f04f 30ff 	mov.w	r0, #4294967295
    111e:	e7f1      	b.n	1104 <nvic_execution_priority()+0x20>
    1120:	e000e3f0 	.word	0xe000e3f0

00001124 <HardwareSerialIMXRT::write9bit(unsigned long)>:
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
    1124:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
    1126:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    112a:	4604      	mov	r4, r0
    112c:	460f      	mov	r7, r1
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    112e:	6906      	ldr	r6, [r0, #16]
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
    1130:	b113      	cbz	r3, 1138 <HardwareSerialIMXRT::write9bit(unsigned long)+0x14>
    1132:	6d42      	ldr	r2, [r0, #84]	; 0x54
    1134:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	if(half_duplex_mode_) {		
    1138:	7ea3      	ldrb	r3, [r4, #26]
    113a:	b12b      	cbz	r3, 1148 <HardwareSerialIMXRT::write9bit(unsigned long)+0x24>
		__disable_irq();
    113c:	b672      	cpsid	i
	    port->CTRL |= LPUART_CTRL_TXDIR;
    113e:	69b3      	ldr	r3, [r6, #24]
    1140:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    1144:	61b3      	str	r3, [r6, #24]
		__enable_irq();
    1146:	b662      	cpsie	i
	head = tx_buffer_head_;
    1148:	f8b4 5046 	ldrh.w	r5, [r4, #70]	; 0x46
	if (++head >= tx_buffer_total_size_) head = 0;
    114c:	6b63      	ldr	r3, [r4, #52]	; 0x34
	head = tx_buffer_head_;
    114e:	b2ad      	uxth	r5, r5
	if (++head >= tx_buffer_total_size_) head = 0;
    1150:	3501      	adds	r5, #1
    1152:	42ab      	cmp	r3, r5
    1154:	d84c      	bhi.n	11f0 <HardwareSerialIMXRT::write9bit(unsigned long)+0xcc>
    1156:	f04f 0800 	mov.w	r8, #0
    115a:	4645      	mov	r5, r8
	while (tx_buffer_tail_ == head) {
    115c:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    1160:	b29b      	uxth	r3, r3
    1162:	429d      	cmp	r5, r3
    1164:	d019      	beq.n	119a <HardwareSerialIMXRT::write9bit(unsigned long)+0x76>
    1166:	e028      	b.n	11ba <HardwareSerialIMXRT::write9bit(unsigned long)+0x96>
			if ((port->STAT & LPUART_STAT_TDRE)) {
    1168:	6973      	ldr	r3, [r6, #20]
    116a:	021b      	lsls	r3, r3, #8
    116c:	d510      	bpl.n	1190 <HardwareSerialIMXRT::write9bit(unsigned long)+0x6c>
				uint32_t tail = tx_buffer_tail_;
    116e:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
				if (++tail >= tx_buffer_total_size_) tail = 0;
    1172:	6b62      	ldr	r2, [r4, #52]	; 0x34
				uint32_t tail = tx_buffer_tail_;
    1174:	b29b      	uxth	r3, r3
				if (++tail >= tx_buffer_total_size_) tail = 0;
    1176:	3301      	adds	r3, #1
    1178:	429a      	cmp	r2, r3
    117a:	d936      	bls.n	11ea <HardwareSerialIMXRT::write9bit(unsigned long)+0xc6>
				tx_buffer_tail_ = tail;
    117c:	b29a      	uxth	r2, r3
				if (tail < tx_buffer_size_) {
    117e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    1180:	4299      	cmp	r1, r3
    1182:	d92d      	bls.n	11e0 <HardwareSerialIMXRT::write9bit(unsigned long)+0xbc>
					n = tx_buffer_[tail];
    1184:	69e1      	ldr	r1, [r4, #28]
    1186:	5ccb      	ldrb	r3, [r1, r3]
    1188:	b2db      	uxtb	r3, r3
				port->DATA  = n;
    118a:	61f3      	str	r3, [r6, #28]
				tx_buffer_tail_ = tail;
    118c:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
	while (tx_buffer_tail_ == head) {
    1190:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    1194:	b29b      	uxth	r3, r3
    1196:	42ab      	cmp	r3, r5
    1198:	d10f      	bne.n	11ba <HardwareSerialIMXRT::write9bit(unsigned long)+0x96>
		int priority = nvic_execution_priority();
    119a:	f7ff ffa3 	bl	10e4 <nvic_execution_priority()>
		if (priority <= hardware->irq_priority) {
    119e:	6963      	ldr	r3, [r4, #20]
    11a0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
    11a4:	4283      	cmp	r3, r0
    11a6:	dadf      	bge.n	1168 <HardwareSerialIMXRT::write9bit(unsigned long)+0x44>
		} else if (priority >= 256) 
    11a8:	28ff      	cmp	r0, #255	; 0xff
    11aa:	ddf1      	ble.n	1190 <HardwareSerialIMXRT::write9bit(unsigned long)+0x6c>
			yield(); // wait
    11ac:	f001 fed4 	bl	2f58 <yield>
	while (tx_buffer_tail_ == head) {
    11b0:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    11b4:	b29b      	uxth	r3, r3
    11b6:	42ab      	cmp	r3, r5
    11b8:	d0ef      	beq.n	119a <HardwareSerialIMXRT::write9bit(unsigned long)+0x76>
	if (head < tx_buffer_size_) {
    11ba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    11bc:	42ab      	cmp	r3, r5
    11be:	d91a      	bls.n	11f6 <HardwareSerialIMXRT::write9bit(unsigned long)+0xd2>
		tx_buffer_[head] = c;
    11c0:	b2ff      	uxtb	r7, r7
    11c2:	69e3      	ldr	r3, [r4, #28]
    11c4:	555f      	strb	r7, [r3, r5]
	__disable_irq();
    11c6:	b672      	cpsid	i
	transmitting_ = 1;
    11c8:	2001      	movs	r0, #1
    11ca:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
	tx_buffer_head_ = head;
    11ce:	f8a4 8046 	strh.w	r8, [r4, #70]	; 0x46
	port->CTRL |= LPUART_CTRL_TIE; // (may need to handle this issue)BITBAND_SET_BIT(LPUART0_CTRL, TIE_BIT);
    11d2:	69b3      	ldr	r3, [r6, #24]
    11d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    11d8:	61b3      	str	r3, [r6, #24]
	__enable_irq();
    11da:	b662      	cpsie	i
}
    11dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					n = tx_buffer_storage_[tail-tx_buffer_size_];
    11e0:	1a5b      	subs	r3, r3, r1
    11e2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    11e4:	5ccb      	ldrb	r3, [r1, r3]
    11e6:	b2db      	uxtb	r3, r3
    11e8:	e7cf      	b.n	118a <HardwareSerialIMXRT::write9bit(unsigned long)+0x66>
    11ea:	2200      	movs	r2, #0
				if (++tail >= tx_buffer_total_size_) tail = 0;
    11ec:	4613      	mov	r3, r2
    11ee:	e7c6      	b.n	117e <HardwareSerialIMXRT::write9bit(unsigned long)+0x5a>
	tx_buffer_head_ = head;
    11f0:	fa1f f885 	uxth.w	r8, r5
    11f4:	e7b2      	b.n	115c <HardwareSerialIMXRT::write9bit(unsigned long)+0x38>
		tx_buffer_storage_[head - tx_buffer_size_] = c;
    11f6:	1aed      	subs	r5, r5, r3
    11f8:	b2ff      	uxtb	r7, r7
    11fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    11fc:	555f      	strb	r7, [r3, r5]
    11fe:	e7e2      	b.n	11c6 <HardwareSerialIMXRT::write9bit(unsigned long)+0xa2>

00001200 <HardwareSerialIMXRT::write(unsigned char)>:
	return write9bit(c);
    1200:	f7ff bf90 	b.w	1124 <HardwareSerialIMXRT::write9bit(unsigned long)>

00001204 <HardwareSerialIMXRT::IRQHandler()>:
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    1204:	6902      	ldr	r2, [r0, #16]
	if (port->STAT & (LPUART_STAT_RDRF | LPUART_STAT_IDLE)) {
    1206:	6953      	ldr	r3, [r2, #20]
    1208:	f413 1f40 	tst.w	r3, #3145728	; 0x300000
{
    120c:	b570      	push	{r4, r5, r6, lr}
	if (port->STAT & (LPUART_STAT_RDRF | LPUART_STAT_IDLE)) {
    120e:	d043      	beq.n	1298 <HardwareSerialIMXRT::IRQHandler()+0x94>
		uint8_t avail = (port->WATER >> 24) & 0x7;
    1210:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
		if (avail) {
    1212:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
		uint8_t avail = (port->WATER >> 24) & 0x7;
    1216:	f3c3 6e02 	ubfx	lr, r3, #24, #3
		if (avail) {
    121a:	d03a      	beq.n	1292 <HardwareSerialIMXRT::IRQHandler()+0x8e>
			head = rx_buffer_head_;
    121c:	f8b0 504a 	ldrh.w	r5, [r0, #74]	; 0x4a
			tail = rx_buffer_tail_;
    1220:	f8b0 604c 	ldrh.w	r6, [r0, #76]	; 0x4c
			head = rx_buffer_head_;
    1224:	b2ad      	uxth	r5, r5
			tail = rx_buffer_tail_;
    1226:	b2b6      	uxth	r6, r6
    1228:	e007      	b.n	123a <HardwareSerialIMXRT::IRQHandler()+0x36>
						rx_buffer_[head] = n;
    122a:	6a01      	ldr	r1, [r0, #32]
    122c:	f801 c003 	strb.w	ip, [r1, r3]
			} while (--avail > 0) ;
    1230:	f10e 33ff 	add.w	r3, lr, #4294967295
    1234:	f013 0eff 	ands.w	lr, r3, #255	; 0xff
    1238:	d01d      	beq.n	1276 <HardwareSerialIMXRT::IRQHandler()+0x72>
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    123a:	69d1      	ldr	r1, [r2, #28]
				newhead = head + 1;
    123c:	1c6b      	adds	r3, r5, #1
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    123e:	6b84      	ldr	r4, [r0, #56]	; 0x38
				if (newhead != rx_buffer_tail_) {
    1240:	f8b0 c04c 	ldrh.w	ip, [r0, #76]	; 0x4c
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    1244:	f3c1 0109 	ubfx	r1, r1, #0, #10
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    1248:	429c      	cmp	r4, r3
    124a:	bf98      	it	ls
    124c:	2300      	movls	r3, #0
				if (newhead != rx_buffer_tail_) {
    124e:	fa1f fc8c 	uxth.w	ip, ip
    1252:	459c      	cmp	ip, r3
    1254:	d0ec      	beq.n	1230 <HardwareSerialIMXRT::IRQHandler()+0x2c>
					if (newhead < rx_buffer_size_) {
    1256:	6b04      	ldr	r4, [r0, #48]	; 0x30
						rx_buffer_[head] = n;
    1258:	fa5f fc81 	uxtb.w	ip, r1
    125c:	461d      	mov	r5, r3
					if (newhead < rx_buffer_size_) {
    125e:	429c      	cmp	r4, r3
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    1260:	eba3 0404 	sub.w	r4, r3, r4
					if (newhead < rx_buffer_size_) {
    1264:	d8e1      	bhi.n	122a <HardwareSerialIMXRT::IRQHandler()+0x26>
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    1266:	6a43      	ldr	r3, [r0, #36]	; 0x24
    1268:	f803 c004 	strb.w	ip, [r3, r4]
			} while (--avail > 0) ;
    126c:	f10e 33ff 	add.w	r3, lr, #4294967295
    1270:	f013 0eff 	ands.w	lr, r3, #255	; 0xff
    1274:	d1e1      	bne.n	123a <HardwareSerialIMXRT::IRQHandler()+0x36>
			rx_buffer_head_ = head;
    1276:	b2ab      	uxth	r3, r5
    1278:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
			if (rts_pin_baseReg_) {
    127c:	6d83      	ldr	r3, [r0, #88]	; 0x58
    127e:	b143      	cbz	r3, 1292 <HardwareSerialIMXRT::IRQHandler()+0x8e>
				if (head >= tail) avail = head - tail;
    1280:	42b5      	cmp	r5, r6
    1282:	d354      	bcc.n	132e <HardwareSerialIMXRT::IRQHandler()+0x12a>
    1284:	1bad      	subs	r5, r5, r6
				if (avail >= rts_high_watermark_) rts_deassert();
    1286:	6c01      	ldr	r1, [r0, #64]	; 0x40
    1288:	42a9      	cmp	r1, r5
    128a:	d802      	bhi.n	1292 <HardwareSerialIMXRT::IRQHandler()+0x8e>
	DIRECT_WRITE_HIGH(rts_pin_baseReg_, rts_pin_bitmask_);
    128c:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
    128e:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		if (port->STAT & LPUART_STAT_IDLE) {
    1292:	6953      	ldr	r3, [r2, #20]
    1294:	02d9      	lsls	r1, r3, #11
    1296:	d445      	bmi.n	1324 <HardwareSerialIMXRT::IRQHandler()+0x120>
	ctrl = port->CTRL;
    1298:	6996      	ldr	r6, [r2, #24]
	if ((ctrl & LPUART_CTRL_TIE) && (port->STAT & LPUART_STAT_TDRE))
    129a:	0233      	lsls	r3, r6, #8
    129c:	d528      	bpl.n	12f0 <HardwareSerialIMXRT::IRQHandler()+0xec>
    129e:	6953      	ldr	r3, [r2, #20]
    12a0:	021d      	lsls	r5, r3, #8
    12a2:	d525      	bpl.n	12f0 <HardwareSerialIMXRT::IRQHandler()+0xec>
		head = tx_buffer_head_;
    12a4:	f8b0 5046 	ldrh.w	r5, [r0, #70]	; 0x46
		tail = tx_buffer_tail_;
    12a8:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
		head = tx_buffer_head_;
    12ac:	b2ad      	uxth	r5, r5
		tail = tx_buffer_tail_;
    12ae:	b29b      	uxth	r3, r3
    12b0:	e006      	b.n	12c0 <HardwareSerialIMXRT::IRQHandler()+0xbc>
				n = tx_buffer_[tail];
    12b2:	69c1      	ldr	r1, [r0, #28]
    12b4:	5cc9      	ldrb	r1, [r1, r3]
    12b6:	b2c9      	uxtb	r1, r1
			port->DATA = n;
    12b8:	61d1      	str	r1, [r2, #28]
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
    12ba:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    12bc:	054c      	lsls	r4, r1, #21
    12be:	d412      	bmi.n	12e6 <HardwareSerialIMXRT::IRQHandler()+0xe2>
			if (head == tail) break;
    12c0:	42ab      	cmp	r3, r5
    12c2:	d038      	beq.n	1336 <HardwareSerialIMXRT::IRQHandler()+0x132>
			if (++tail >= tx_buffer_total_size_) tail = 0;
    12c4:	6b44      	ldr	r4, [r0, #52]	; 0x34
    12c6:	3301      	adds	r3, #1
			if (tail < tx_buffer_size_) {
    12c8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			if (++tail >= tx_buffer_total_size_) tail = 0;
    12ca:	429c      	cmp	r4, r3
    12cc:	bf98      	it	ls
    12ce:	2300      	movls	r3, #0
			if (tail < tx_buffer_size_) {
    12d0:	4299      	cmp	r1, r3
				n = tx_buffer_storage_[tail-tx_buffer_size_];
    12d2:	eba3 0401 	sub.w	r4, r3, r1
			if (tail < tx_buffer_size_) {
    12d6:	d8ec      	bhi.n	12b2 <HardwareSerialIMXRT::IRQHandler()+0xae>
				n = tx_buffer_storage_[tail-tx_buffer_size_];
    12d8:	6a81      	ldr	r1, [r0, #40]	; 0x28
    12da:	5d09      	ldrb	r1, [r1, r4]
    12dc:	b2c9      	uxtb	r1, r1
			port->DATA = n;
    12de:	61d1      	str	r1, [r2, #28]
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
    12e0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    12e2:	054c      	lsls	r4, r1, #21
    12e4:	d5ec      	bpl.n	12c0 <HardwareSerialIMXRT::IRQHandler()+0xbc>
		tx_buffer_tail_ = tail;
    12e6:	b299      	uxth	r1, r3
		if (head == tail) {
    12e8:	42ab      	cmp	r3, r5
		tx_buffer_tail_ = tail;
    12ea:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
		if (head == tail) {
    12ee:	d025      	beq.n	133c <HardwareSerialIMXRT::IRQHandler()+0x138>
	if ((ctrl & LPUART_CTRL_TCIE) && (port->STAT & LPUART_STAT_TC))
    12f0:	0271      	lsls	r1, r6, #9
    12f2:	d516      	bpl.n	1322 <HardwareSerialIMXRT::IRQHandler()+0x11e>
    12f4:	6953      	ldr	r3, [r2, #20]
    12f6:	025b      	lsls	r3, r3, #9
    12f8:	d513      	bpl.n	1322 <HardwareSerialIMXRT::IRQHandler()+0x11e>
		transmitting_ = 0;
    12fa:	2100      	movs	r1, #0
		if (transmit_pin_baseReg_) DIRECT_WRITE_LOW(transmit_pin_baseReg_, transmit_pin_bitmask_);
    12fc:	6d03      	ldr	r3, [r0, #80]	; 0x50
		transmitting_ = 0;
    12fe:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
		if (transmit_pin_baseReg_) DIRECT_WRITE_LOW(transmit_pin_baseReg_, transmit_pin_bitmask_);
    1302:	b113      	cbz	r3, 130a <HardwareSerialIMXRT::IRQHandler()+0x106>
    1304:	6d41      	ldr	r1, [r0, #84]	; 0x54
    1306:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
		if(half_duplex_mode_) {		
    130a:	7e83      	ldrb	r3, [r0, #26]
    130c:	b12b      	cbz	r3, 131a <HardwareSerialIMXRT::IRQHandler()+0x116>
			__disable_irq();
    130e:	b672      	cpsid	i
		    port->CTRL &= ~LPUART_CTRL_TXDIR;
    1310:	6993      	ldr	r3, [r2, #24]
    1312:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
    1316:	6193      	str	r3, [r2, #24]
			__enable_irq();
    1318:	b662      	cpsie	i
		port->CTRL &= ~LPUART_CTRL_TCIE;
    131a:	6993      	ldr	r3, [r2, #24]
    131c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
    1320:	6193      	str	r3, [r2, #24]
}
    1322:	bd70      	pop	{r4, r5, r6, pc}
			port->STAT |= LPUART_STAT_IDLE;	// writing a 1 to idle should clear it. 
    1324:	6953      	ldr	r3, [r2, #20]
    1326:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    132a:	6153      	str	r3, [r2, #20]
    132c:	e7b4      	b.n	1298 <HardwareSerialIMXRT::IRQHandler()+0x94>
				else avail = rx_buffer_total_size_ + head - tail;
    132e:	6b81      	ldr	r1, [r0, #56]	; 0x38
    1330:	1b89      	subs	r1, r1, r6
    1332:	440d      	add	r5, r1
    1334:	e7a7      	b.n	1286 <HardwareSerialIMXRT::IRQHandler()+0x82>
		tx_buffer_tail_ = tail;
    1336:	b29b      	uxth	r3, r3
    1338:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
			port->CTRL &= ~LPUART_CTRL_TIE; 
    133c:	6993      	ldr	r3, [r2, #24]
    133e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    1342:	6193      	str	r3, [r2, #24]
  			port->CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
    1344:	6993      	ldr	r3, [r2, #24]
    1346:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    134a:	6193      	str	r3, [r2, #24]
    134c:	e7d0      	b.n	12f0 <HardwareSerialIMXRT::IRQHandler()+0xec>
    134e:	bf00      	nop

00001350 <IRQHandler_Serial2>:
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest


void IRQHandler_Serial2()
{
	Serial2.IRQHandler();
    1350:	4801      	ldr	r0, [pc, #4]	; (1358 <IRQHandler_Serial2+0x8>)
    1352:	f7ff bf57 	b.w	1204 <HardwareSerialIMXRT::IRQHandler()>
    1356:	bf00      	nop
    1358:	20001028 	.word	0x20001028

0000135c <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    135c:	4608      	mov	r0, r1
    135e:	f001 bd67 	b.w	2e30 <usb_serial_putchar>
    1362:	bf00      	nop

00001364 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>:
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    1364:	2a01      	cmp	r2, #1
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    1366:	b570      	push	{r4, r5, r6, lr}
		base = 10;
    1368:	bf08      	it	eq
    136a:	220a      	moveq	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    136c:	b08a      	sub	sp, #40	; 0x28
	}


	if (n == 0) {
    136e:	b391      	cbz	r1, 13d6 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x72>
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
    1370:	f04f 0e21 	mov.w	lr, #33	; 0x21
    1374:	e001      	b.n	137a <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x16>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    1376:	fa5f fe86 	uxtb.w	lr, r6
    137a:	f10e 36ff 	add.w	r6, lr, #4294967295
			digit = n % base;
    137e:	fbb1 f5f2 	udiv	r5, r1, r2
    1382:	fb02 1415 	mls	r4, r2, r5, r1
    1386:	fa5f fc84 	uxtb.w	ip, r4
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    138a:	2c09      	cmp	r4, #9
    138c:	f10c 0437 	add.w	r4, ip, #55	; 0x37
    1390:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
    1394:	bf98      	it	ls
    1396:	fa5f f48c 	uxtbls.w	r4, ip
    139a:	f10e 0c28 	add.w	ip, lr, #40	; 0x28
    139e:	bf88      	it	hi
    13a0:	b2e4      	uxtbhi	r4, r4
			if (n == 0) break;
    13a2:	4291      	cmp	r1, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    13a4:	44ec      	add	ip, sp
			n /= base;
    13a6:	4629      	mov	r1, r5
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    13a8:	f80c 4c24 	strb.w	r4, [ip, #-36]
			if (n == 0) break;
    13ac:	d2e3      	bcs.n	1376 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x12>
		}
	}
	if (sign) {
    13ae:	b14b      	cbz	r3, 13c4 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x60>
		i--;
    13b0:	f10e 3eff 	add.w	lr, lr, #4294967295
		buf[i] = '-';
    13b4:	222d      	movs	r2, #45	; 0x2d
		i--;
    13b6:	fa5f fe8e 	uxtb.w	lr, lr
		buf[i] = '-';
    13ba:	f10e 0328 	add.w	r3, lr, #40	; 0x28
    13be:	446b      	add	r3, sp
    13c0:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    13c4:	6803      	ldr	r3, [r0, #0]
    13c6:	a901      	add	r1, sp, #4
    13c8:	f1ce 0222 	rsb	r2, lr, #34	; 0x22
    13cc:	685b      	ldr	r3, [r3, #4]
    13ce:	4471      	add	r1, lr
    13d0:	4798      	blx	r3
}
    13d2:	b00a      	add	sp, #40	; 0x28
    13d4:	bd70      	pop	{r4, r5, r6, pc}
		buf[sizeof(buf) - 1] = '0';
    13d6:	2230      	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    13d8:	f04f 0e21 	mov.w	lr, #33	; 0x21
		buf[sizeof(buf) - 1] = '0';
    13dc:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    13e0:	e7e5      	b.n	13ae <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x4a>
    13e2:	bf00      	nop

000013e4 <Print::write(unsigned char const*, unsigned int)>:
{
    13e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buffer == nullptr) return 0;
    13e8:	460c      	mov	r4, r1
    13ea:	b1d1      	cbz	r1, 1422 <Print::write(unsigned char const*, unsigned int)+0x3e>
	while (size--) count += write(*buffer++);
    13ec:	b1ea      	cbz	r2, 142a <Print::write(unsigned char const*, unsigned int)+0x46>
    13ee:	4680      	mov	r8, r0
    13f0:	188e      	adds	r6, r1, r2
	size_t count = 0;
    13f2:	2500      	movs	r5, #0
    13f4:	4f0e      	ldr	r7, [pc, #56]	; (1430 <Print::write(unsigned char const*, unsigned int)+0x4c>)
    13f6:	e004      	b.n	1402 <Print::write(unsigned char const*, unsigned int)+0x1e>
    13f8:	f001 fd1a 	bl	2e30 <usb_serial_putchar>
	while (size--) count += write(*buffer++);
    13fc:	42b4      	cmp	r4, r6
    13fe:	4405      	add	r5, r0
    1400:	d00c      	beq.n	141c <Print::write(unsigned char const*, unsigned int)+0x38>
    1402:	f8d8 3000 	ldr.w	r3, [r8]
    1406:	f814 0b01 	ldrb.w	r0, [r4], #1
    140a:	681b      	ldr	r3, [r3, #0]
    140c:	42bb      	cmp	r3, r7
    140e:	d0f3      	beq.n	13f8 <Print::write(unsigned char const*, unsigned int)+0x14>
    1410:	4601      	mov	r1, r0
    1412:	4640      	mov	r0, r8
    1414:	4798      	blx	r3
    1416:	42b4      	cmp	r4, r6
    1418:	4405      	add	r5, r0
    141a:	d1f2      	bne.n	1402 <Print::write(unsigned char const*, unsigned int)+0x1e>
}
    141c:	4628      	mov	r0, r5
    141e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (buffer == nullptr) return 0;
    1422:	460d      	mov	r5, r1
}
    1424:	4628      	mov	r0, r5
    1426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (buffer == nullptr) return 0;
    142a:	4615      	mov	r5, r2
    142c:	e7f6      	b.n	141c <Print::write(unsigned char const*, unsigned int)+0x38>
    142e:	bf00      	nop
    1430:	0000135d 	.word	0x0000135d

00001434 <Print::println()>:
{
    1434:	b500      	push	{lr}
	return write(buf, 2);
    1436:	6803      	ldr	r3, [r0, #0]
{
    1438:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    143a:	f640 2c0d 	movw	ip, #2573	; 0xa0d
	return write(buf, 2);
    143e:	2202      	movs	r2, #2
    1440:	a901      	add	r1, sp, #4
    1442:	685b      	ldr	r3, [r3, #4]
	uint8_t buf[2]={'\r', '\n'};
    1444:	f8ad c004 	strh.w	ip, [sp, #4]
	return write(buf, 2);
    1448:	4798      	blx	r3
}
    144a:	b003      	add	sp, #12
    144c:	f85d fb04 	ldr.w	pc, [sp], #4

00001450 <_write>:
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    1450:	4b05      	ldr	r3, [pc, #20]	; (1468 <_write+0x18>)
    1452:	2802      	cmp	r0, #2
    1454:	bf88      	it	hi
    1456:	4603      	movhi	r3, r0
{
    1458:	b410      	push	{r4}
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    145a:	681c      	ldr	r4, [r3, #0]
    145c:	4618      	mov	r0, r3
    145e:	6863      	ldr	r3, [r4, #4]
}
    1460:	f85d 4b04 	ldr.w	r4, [sp], #4
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    1464:	4718      	bx	r3
    1466:	bf00      	nop
    1468:	20001018 	.word	0x20001018

0000146c <Print::printf(char const*, ...)>:
{
    146c:	b40e      	push	{r1, r2, r3}
    146e:	b500      	push	{lr}
    1470:	b082      	sub	sp, #8
    1472:	aa03      	add	r2, sp, #12
    1474:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, format);
    1478:	9201      	str	r2, [sp, #4]
	int retval = vdprintf((int)this, format, ap);
    147a:	f002 fee5 	bl	4248 <vdprintf>
}
    147e:	b002      	add	sp, #8
    1480:	f85d eb04 	ldr.w	lr, [sp], #4
    1484:	b003      	add	sp, #12
    1486:	4770      	bx	lr

00001488 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	if (base == 0) {
    1488:	b95a      	cbnz	r2, 14a2 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x1a>
		return write((uint8_t)n);
    148a:	6803      	ldr	r3, [r0, #0]
    148c:	b2c9      	uxtb	r1, r1
    148e:	4a07      	ldr	r2, [pc, #28]	; (14ac <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x24>)
    1490:	681b      	ldr	r3, [r3, #0]
    1492:	4293      	cmp	r3, r2
{
    1494:	b500      	push	{lr}
    1496:	d106      	bne.n	14a6 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x1e>
    1498:	4608      	mov	r0, r1
}
    149a:	f85d eb04 	ldr.w	lr, [sp], #4
    149e:	f001 bcc7 	b.w	2e30 <usb_serial_putchar>
    14a2:	f7ff bf5f 	b.w	1364 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    14a6:	f85d eb04 	ldr.w	lr, [sp], #4
		return write((uint8_t)n);
    14aa:	4718      	bx	r3
    14ac:	0000135d 	.word	0x0000135d

000014b0 <String::String(char const*)>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    14b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    14b2:	2600      	movs	r6, #0
String::String(const char *cstr)
    14b4:	4604      	mov	r4, r0
	capacity = 0;
    14b6:	e9c0 6600 	strd	r6, r6, [r0]
	len = 0;
    14ba:	6086      	str	r6, [r0, #8]
	if (cstr) copy(cstr, strlen(cstr));
    14bc:	b129      	cbz	r1, 14ca <String::String(char const*)+0x1a>
    14be:	4608      	mov	r0, r1
    14c0:	460d      	mov	r5, r1
    14c2:	f003 fabd 	bl	4a40 <strlen>
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
	if (length == 0) {
    14c6:	4607      	mov	r7, r0
    14c8:	b908      	cbnz	r0, 14ce <String::String(char const*)+0x1e>
}
    14ca:	4620      	mov	r0, r4
    14cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    14ce:	3001      	adds	r0, #1
    14d0:	f001 ffde 	bl	3490 <malloc>
	if (newbuffer) {
    14d4:	2800      	cmp	r0, #0
    14d6:	d0f8      	beq.n	14ca <String::String(char const*)+0x1a>
		}
		len = capacity = 0;
		return *this;
	}
	len = length;
	strcpy(buffer, cstr);
    14d8:	4629      	mov	r1, r5
		if (len == 0) buffer[0] = 0;
    14da:	7006      	strb	r6, [r0, #0]
		buffer = newbuffer;
    14dc:	6020      	str	r0, [r4, #0]
	len = length;
    14de:	e9c4 7701 	strd	r7, r7, [r4, #4]
	strcpy(buffer, cstr);
    14e2:	f003 fa4b 	bl	497c <strcpy>
}
    14e6:	4620      	mov	r0, r4
    14e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    14ea:	bf00      	nop

000014ec <String::String(String const&)>:
String::String(const String &value)
    14ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	rhs.len = 0;
}

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
    14ee:	4288      	cmp	r0, r1
	buffer = NULL;
    14f0:	f04f 0500 	mov.w	r5, #0
String::String(const String &value)
    14f4:	4604      	mov	r4, r0
	len = 0;
    14f6:	6085      	str	r5, [r0, #8]
	capacity = 0;
    14f8:	e9c0 5500 	strd	r5, r5, [r0]
	if (this == &rhs) return *this;
    14fc:	d002      	beq.n	1504 <String::String(String const&)+0x18>
    14fe:	688e      	ldr	r6, [r1, #8]
	return copy(rhs.buffer, rhs.len);
    1500:	680f      	ldr	r7, [r1, #0]
	if (length == 0) {
    1502:	b90e      	cbnz	r6, 1508 <String::String(String const&)+0x1c>
}
    1504:	4620      	mov	r0, r4
    1506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    1508:	1c70      	adds	r0, r6, #1
    150a:	f001 ffc1 	bl	3490 <malloc>
	if (newbuffer) {
    150e:	2800      	cmp	r0, #0
    1510:	d0f8      	beq.n	1504 <String::String(String const&)+0x18>
	strcpy(buffer, cstr);
    1512:	4639      	mov	r1, r7
		if (len == 0) buffer[0] = 0;
    1514:	7005      	strb	r5, [r0, #0]
		buffer = newbuffer;
    1516:	6020      	str	r0, [r4, #0]
	len = length;
    1518:	e9c4 6601 	strd	r6, r6, [r4, #4]
	strcpy(buffer, cstr);
    151c:	f003 fa2e 	bl	497c <strcpy>
}
    1520:	4620      	mov	r0, r4
    1522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00001524 <String::~String()>:
String::~String()
    1524:	b510      	push	{r4, lr}
    1526:	4604      	mov	r4, r0
	free(buffer);
    1528:	6800      	ldr	r0, [r0, #0]
    152a:	f001 ffb9 	bl	34a0 <free>
}
    152e:	4620      	mov	r0, r4
    1530:	bd10      	pop	{r4, pc}
    1532:	bf00      	nop

00001534 <String::copy(char const*, unsigned int)>:
{
    1534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1536:	4604      	mov	r4, r0
	if (length == 0) {
    1538:	4615      	mov	r5, r2
    153a:	b932      	cbnz	r2, 154a <String::copy(char const*, unsigned int)+0x16>
		if (buffer) buffer[0] = 0;
    153c:	6803      	ldr	r3, [r0, #0]
    153e:	b103      	cbz	r3, 1542 <String::copy(char const*, unsigned int)+0xe>
    1540:	701a      	strb	r2, [r3, #0]
		len = 0;
    1542:	2300      	movs	r3, #0
}
    1544:	4620      	mov	r0, r4
		len = 0;
    1546:	60a3      	str	r3, [r4, #8]
}
    1548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (capacity >= size) return 1;
    154a:	6843      	ldr	r3, [r0, #4]
    154c:	460e      	mov	r6, r1
    154e:	429a      	cmp	r2, r3
    1550:	d91c      	bls.n	158c <String::copy(char const*, unsigned int)+0x58>
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    1552:	1c51      	adds	r1, r2, #1
    1554:	6800      	ldr	r0, [r0, #0]
    1556:	f002 fa67 	bl	3a28 <realloc>
	if (newbuffer) {
    155a:	4607      	mov	r7, r0
    155c:	b160      	cbz	r0, 1578 <String::copy(char const*, unsigned int)+0x44>
		if (len == 0) buffer[0] = 0;
    155e:	68a3      	ldr	r3, [r4, #8]
		capacity = maxStrLen;
    1560:	e9c4 0500 	strd	r0, r5, [r4]
		if (len == 0) buffer[0] = 0;
    1564:	b90b      	cbnz	r3, 156a <String::copy(char const*, unsigned int)+0x36>
    1566:	7003      	strb	r3, [r0, #0]
	strcpy(buffer, cstr);
    1568:	6827      	ldr	r7, [r4, #0]
    156a:	4631      	mov	r1, r6
    156c:	4638      	mov	r0, r7
	len = length;
    156e:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    1570:	f003 fa04 	bl	497c <strcpy>
}
    1574:	4620      	mov	r0, r4
    1576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (buffer) {
    1578:	6820      	ldr	r0, [r4, #0]
    157a:	b110      	cbz	r0, 1582 <String::copy(char const*, unsigned int)+0x4e>
			free(buffer);
    157c:	f001 ff90 	bl	34a0 <free>
			buffer = NULL;
    1580:	6027      	str	r7, [r4, #0]
		len = capacity = 0;
    1582:	2300      	movs	r3, #0
}
    1584:	4620      	mov	r0, r4
		len = capacity = 0;
    1586:	e9c4 3301 	strd	r3, r3, [r4, #4]
}
    158a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (buffer) buffer[0] = 0;
    158c:	6807      	ldr	r7, [r0, #0]
	strcpy(buffer, cstr);
    158e:	4631      	mov	r1, r6
	len = length;
    1590:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    1592:	4638      	mov	r0, r7
    1594:	f003 f9f2 	bl	497c <strcpy>
	return *this;
    1598:	e7ec      	b.n	1574 <String::copy(char const*, unsigned int)+0x40>
    159a:	bf00      	nop

0000159c <String::operator=(char const*)>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
    159c:	b538      	push	{r3, r4, r5, lr}
    159e:	4605      	mov	r5, r0
	if (cstr) {
    15a0:	460c      	mov	r4, r1
    15a2:	b149      	cbz	r1, 15b8 <String::operator=(char const*)+0x1c>
		copy(cstr, strlen(cstr));
    15a4:	4608      	mov	r0, r1
    15a6:	f003 fa4b 	bl	4a40 <strlen>
    15aa:	4621      	mov	r1, r4
    15ac:	4602      	mov	r2, r0
    15ae:	4628      	mov	r0, r5
    15b0:	f7ff ffc0 	bl	1534 <String::copy(char const*, unsigned int)>
	} else {
		len = 0;
	}
	return *this;
}
    15b4:	4628      	mov	r0, r5
    15b6:	bd38      	pop	{r3, r4, r5, pc}
    15b8:	4628      	mov	r0, r5
		len = 0;
    15ba:	60a9      	str	r1, [r5, #8]
}
    15bc:	bd38      	pop	{r3, r4, r5, pc}
    15be:	bf00      	nop

000015c0 <String::append(char const*, unsigned int)>:
{
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
    15c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    15c4:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    15c6:	6800      	ldr	r0, [r0, #0]
{
    15c8:	460d      	mov	r5, r1
    15ca:	4616      	mov	r6, r2
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    15cc:	4288      	cmp	r0, r1
	unsigned int newlen = len + length;
    15ce:	68a3      	ldr	r3, [r4, #8]
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    15d0:	d809      	bhi.n	15e6 <String::append(char const*, unsigned int)+0x26>
    15d2:	18c2      	adds	r2, r0, r3
    15d4:	4291      	cmp	r1, r2
    15d6:	d206      	bcs.n	15e6 <String::append(char const*, unsigned int)+0x26>
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
    15d8:	1a0f      	subs	r7, r1, r0
		self = true;
    15da:	f04f 0901 	mov.w	r9, #1
	}
	if (length == 0 || !reserve(newlen)) return *this;
    15de:	b936      	cbnz	r6, 15ee <String::append(char const*, unsigned int)+0x2e>
		}
	else
		strcpy(buffer + len, cstr);
	len = newlen;
	return *this;
}
    15e0:	4620      	mov	r0, r4
    15e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	bool self = false;
    15e6:	f04f 0900 	mov.w	r9, #0
	if (length == 0 || !reserve(newlen)) return *this;
    15ea:	2e00      	cmp	r6, #0
    15ec:	d0f8      	beq.n	15e0 <String::append(char const*, unsigned int)+0x20>
	unsigned int newlen = len + length;
    15ee:	eb03 0806 	add.w	r8, r3, r6
	if (capacity >= size) return 1;
    15f2:	6862      	ldr	r2, [r4, #4]
    15f4:	4590      	cmp	r8, r2
    15f6:	d90c      	bls.n	1612 <String::append(char const*, unsigned int)+0x52>
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    15f8:	f108 0101 	add.w	r1, r8, #1
    15fc:	f002 fa14 	bl	3a28 <realloc>
	if (newbuffer) {
    1600:	2800      	cmp	r0, #0
    1602:	d0ed      	beq.n	15e0 <String::append(char const*, unsigned int)+0x20>
		buffer = newbuffer;
    1604:	68a3      	ldr	r3, [r4, #8]
		capacity = maxStrLen;
    1606:	e9c4 0800 	strd	r0, r8, [r4]
		if (len == 0) buffer[0] = 0;
    160a:	b913      	cbnz	r3, 1612 <String::append(char const*, unsigned int)+0x52>
    160c:	7003      	strb	r3, [r0, #0]
		memcpy(buffer + len, buffer+buffer_offset, length);
    160e:	6820      	ldr	r0, [r4, #0]
    1610:	68a3      	ldr	r3, [r4, #8]
	if ( self ) {
    1612:	f1b9 0f00 	cmp.w	r9, #0
    1616:	d108      	bne.n	162a <String::append(char const*, unsigned int)+0x6a>
		strcpy(buffer + len, cstr);
    1618:	4629      	mov	r1, r5
    161a:	4418      	add	r0, r3
    161c:	f003 f9ae 	bl	497c <strcpy>
}
    1620:	4620      	mov	r0, r4
	len = newlen;
    1622:	f8c4 8008 	str.w	r8, [r4, #8]
}
    1626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		memcpy(buffer + len, buffer+buffer_offset, length);
    162a:	4632      	mov	r2, r6
    162c:	19c1      	adds	r1, r0, r7
    162e:	4418      	add	r0, r3
    1630:	f000 f988 	bl	1944 <memcpy>
		buffer[newlen] = 0;
    1634:	6823      	ldr	r3, [r4, #0]
    1636:	2200      	movs	r2, #0
    1638:	f803 2008 	strb.w	r2, [r3, r8]
    163c:	e7f0      	b.n	1620 <String::append(char const*, unsigned int)+0x60>
    163e:	bf00      	nop

00001640 <String::append(char)>:
	if (cstr) append(cstr, strlen(cstr));
	return *this;
}

String & String::append(char c)
{
    1640:	b510      	push	{r4, lr}
    1642:	b082      	sub	sp, #8
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
    1644:	2300      	movs	r3, #0
{
    1646:	4604      	mov	r4, r0
	append(buf, 1);
    1648:	2201      	movs	r2, #1
	buf[0] = c;
    164a:	f88d 1004 	strb.w	r1, [sp, #4]
	append(buf, 1);
    164e:	a901      	add	r1, sp, #4
	buf[1] = 0;
    1650:	f88d 3005 	strb.w	r3, [sp, #5]
	append(buf, 1);
    1654:	f7ff ffb4 	bl	15c0 <String::append(char const*, unsigned int)>
	return *this;
}
    1658:	4620      	mov	r0, r4
    165a:	b002      	add	sp, #8
    165c:	bd10      	pop	{r4, pc}
    165e:	bf00      	nop

00001660 <String::equals(char const*) const>:
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
	if (len == 0) return (cstr == NULL || *cstr == 0);
    1660:	6882      	ldr	r2, [r0, #8]
{
    1662:	b508      	push	{r3, lr}
    1664:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
    1666:	b13a      	cbz	r2, 1678 <String::equals(char const*) const+0x18>
	if (cstr == NULL) return buffer[0] == 0;
    1668:	b161      	cbz	r1, 1684 <String::equals(char const*) const+0x24>
	return strcmp(buffer, cstr) == 0;
    166a:	6800      	ldr	r0, [r0, #0]
    166c:	f003 f81c 	bl	46a8 <strcmp>
    1670:	fab0 f080 	clz	r0, r0
    1674:	0940      	lsrs	r0, r0, #5
}
    1676:	bd08      	pop	{r3, pc}
	if (len == 0) return (cstr == NULL || *cstr == 0);
    1678:	b131      	cbz	r1, 1688 <String::equals(char const*) const+0x28>
	if (cstr == NULL) return buffer[0] == 0;
    167a:	7818      	ldrb	r0, [r3, #0]
    167c:	fab0 f080 	clz	r0, r0
    1680:	0940      	lsrs	r0, r0, #5
}
    1682:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
    1684:	6803      	ldr	r3, [r0, #0]
    1686:	e7f8      	b.n	167a <String::equals(char const*) const+0x1a>
    1688:	2001      	movs	r0, #1
}
    168a:	bd08      	pop	{r3, pc}

0000168c <String::startsWith(String const&) const>:
	return 1;
}

unsigned char String::startsWith( const String &s2 ) const
{
	if (len < s2.len) return 0;
    168c:	688a      	ldr	r2, [r1, #8]
{
    168e:	b508      	push	{r3, lr}
	if (len < s2.len) return 0;
    1690:	6883      	ldr	r3, [r0, #8]
    1692:	4293      	cmp	r3, r2
    1694:	d309      	bcc.n	16aa <String::startsWith(String const&) const+0x1e>
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
    1696:	6800      	ldr	r0, [r0, #0]
    1698:	b130      	cbz	r0, 16a8 <String::startsWith(String const&) const+0x1c>
    169a:	6809      	ldr	r1, [r1, #0]
    169c:	b139      	cbz	r1, 16ae <String::startsWith(String const&) const+0x22>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
    169e:	f002 fee1 	bl	4464 <strncmp>
    16a2:	fab0 f080 	clz	r0, r0
    16a6:	0940      	lsrs	r0, r0, #5
}
    16a8:	bd08      	pop	{r3, pc}
	if (len < s2.len) return 0;
    16aa:	2000      	movs	r0, #0
}
    16ac:	bd08      	pop	{r3, pc}
	if (len < s2.len) return 0;
    16ae:	4608      	mov	r0, r1
}
    16b0:	bd08      	pop	{r3, pc}
    16b2:	bf00      	nop

000016b4 <String::charAt(unsigned int) const>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
    16b4:	6883      	ldr	r3, [r0, #8]
    16b6:	4299      	cmp	r1, r3
    16b8:	d203      	bcs.n	16c2 <String::charAt(unsigned int) const+0xe>
    16ba:	6800      	ldr	r0, [r0, #0]
    16bc:	b110      	cbz	r0, 16c4 <String::charAt(unsigned int) const+0x10>
	return buffer[index];
    16be:	5c40      	ldrb	r0, [r0, r1]
    16c0:	4770      	bx	lr
	if (index >= len || !buffer) return 0;
    16c2:	2000      	movs	r0, #0
}
    16c4:	4770      	bx	lr
    16c6:	bf00      	nop

000016c8 <String::substring(unsigned int) const>:
	}
	return found;
}

String String::substring( unsigned int left ) const
{
    16c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return substring(left, len);
    16cc:	688f      	ldr	r7, [r1, #8]
{
    16ce:	460e      	mov	r6, r1
    16d0:	4605      	mov	r5, r0
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
    16d2:	4297      	cmp	r7, r2
    16d4:	d202      	bcs.n	16dc <String::substring(unsigned int) const+0x14>
    16d6:	4613      	mov	r3, r2
    16d8:	463a      	mov	r2, r7
    16da:	461f      	mov	r7, r3
	buffer = NULL;
    16dc:	2300      	movs	r3, #0
	len = 0;
    16de:	60ab      	str	r3, [r5, #8]
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
	if (left > len) return out;
    16e0:	68b0      	ldr	r0, [r6, #8]
    16e2:	4290      	cmp	r0, r2
	capacity = 0;
    16e4:	e9c5 3300 	strd	r3, r3, [r5]
	if (left > len) return out;
    16e8:	d314      	bcc.n	1714 <String::substring(unsigned int) const+0x4c>
	if (right > len) right = len;
    16ea:	4287      	cmp	r7, r0
	char temp = buffer[right];  // save the replaced character
    16ec:	6831      	ldr	r1, [r6, #0]
    16ee:	bf28      	it	cs
    16f0:	4607      	movcs	r7, r0
    16f2:	f811 8007 	ldrb.w	r8, [r1, r7]
	buffer[right] = '\0';	
    16f6:	55cb      	strb	r3, [r1, r7]
	out = buffer + left;  // pointer arithmetic
    16f8:	6833      	ldr	r3, [r6, #0]
	if (cstr) {
    16fa:	189c      	adds	r4, r3, r2
    16fc:	d00d      	beq.n	171a <String::substring(unsigned int) const+0x52>
		copy(cstr, strlen(cstr));
    16fe:	4620      	mov	r0, r4
    1700:	f003 f99e 	bl	4a40 <strlen>
    1704:	4621      	mov	r1, r4
    1706:	4602      	mov	r2, r0
    1708:	4628      	mov	r0, r5
    170a:	f7ff ff13 	bl	1534 <String::copy(char const*, unsigned int)>
	buffer[right] = temp;  //restore character
    170e:	6833      	ldr	r3, [r6, #0]
    1710:	f803 8007 	strb.w	r8, [r3, r7]
}
    1714:	4628      	mov	r0, r5
    1716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = 0;
    171a:	60ac      	str	r4, [r5, #8]
    171c:	e7f8      	b.n	1710 <String::substring(unsigned int) const+0x48>
    171e:	bf00      	nop

00001720 <String::toUpperCase()>:
	}
	return *this;
}

String & String::toUpperCase(void)
{
    1720:	b538      	push	{r3, r4, r5, lr}
	if (!buffer) return *this;
    1722:	6804      	ldr	r4, [r0, #0]
{
    1724:	4605      	mov	r5, r0
	if (!buffer) return *this;
    1726:	b144      	cbz	r4, 173a <String::toUpperCase()+0x1a>
	for (char *p = buffer; *p; p++) {
    1728:	7820      	ldrb	r0, [r4, #0]
    172a:	b130      	cbz	r0, 173a <String::toUpperCase()+0x1a>
		*p = toupper(*p);
    172c:	f002 fc32 	bl	3f94 <toupper>
    1730:	7020      	strb	r0, [r4, #0]
	for (char *p = buffer; *p; p++) {
    1732:	f814 0f01 	ldrb.w	r0, [r4, #1]!
    1736:	2800      	cmp	r0, #0
    1738:	d1f8      	bne.n	172c <String::toUpperCase()+0xc>
	}
	return *this;
}
    173a:	4628      	mov	r0, r5
    173c:	bd38      	pop	{r3, r4, r5, pc}
    173e:	bf00      	nop

00001740 <String::trim()>:

String & String::trim(void)
{
    1740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!buffer || len == 0) return *this;
    1744:	6807      	ldr	r7, [r0, #0]
{
    1746:	4606      	mov	r6, r0
	if (!buffer || len == 0) return *this;
    1748:	b1e7      	cbz	r7, 1784 <String::trim()+0x44>
    174a:	6884      	ldr	r4, [r0, #8]
    174c:	b1d4      	cbz	r4, 1784 <String::trim()+0x44>
    174e:	46b8      	mov	r8, r7
    1750:	4645      	mov	r5, r8
	char *begin = buffer;
	while (isspace(*begin)) begin++;
    1752:	f818 0b01 	ldrb.w	r0, [r8], #1
    1756:	f002 fc15 	bl	3f84 <isspace>
    175a:	2800      	cmp	r0, #0
    175c:	d1f8      	bne.n	1750 <String::trim()+0x10>
	char *end = buffer + len - 1;
    175e:	3c01      	subs	r4, #1
    1760:	443c      	add	r4, r7
	while (isspace(*end) && end >= begin) end--;
    1762:	e002      	b.n	176a <String::trim()+0x2a>
    1764:	42a5      	cmp	r5, r4
    1766:	d805      	bhi.n	1774 <String::trim()+0x34>
    1768:	3c01      	subs	r4, #1
    176a:	7820      	ldrb	r0, [r4, #0]
    176c:	f002 fc0a 	bl	3f84 <isspace>
    1770:	2800      	cmp	r0, #0
    1772:	d1f7      	bne.n	1764 <String::trim()+0x24>
	len = end + 1 - begin;
    1774:	1c62      	adds	r2, r4, #1
	if (begin > buffer) memcpy(buffer, begin, len);
    1776:	42af      	cmp	r7, r5
	len = end + 1 - begin;
    1778:	eba2 0205 	sub.w	r2, r2, r5
    177c:	60b2      	str	r2, [r6, #8]
	if (begin > buffer) memcpy(buffer, begin, len);
    177e:	d304      	bcc.n	178a <String::trim()+0x4a>
	buffer[len] = 0;
    1780:	2300      	movs	r3, #0
    1782:	54bb      	strb	r3, [r7, r2]
	return *this;
}
    1784:	4630      	mov	r0, r6
    1786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (begin > buffer) memcpy(buffer, begin, len);
    178a:	4638      	mov	r0, r7
    178c:	4629      	mov	r1, r5
    178e:	f000 f8d9 	bl	1944 <memcpy>
	buffer[len] = 0;
    1792:	6837      	ldr	r7, [r6, #0]
    1794:	68b2      	ldr	r2, [r6, #8]
    1796:	e7f3      	b.n	1780 <String::trim()+0x40>

00001798 <String::toInt() const>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
    1798:	6800      	ldr	r0, [r0, #0]
    179a:	b108      	cbz	r0, 17a0 <String::toInt() const+0x8>
    179c:	f001 be74 	b.w	3488 <atol>
	return 0;
}
    17a0:	4770      	bx	lr
    17a2:	bf00      	nop

000017a4 <delay>:
	if (msec == 0) return;
    17a4:	b900      	cbnz	r0, 17a8 <delay+0x4>
    17a6:	4770      	bx	lr
{
    17a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    17ac:	2101      	movs	r1, #1
    17ae:	4681      	mov	r9, r0
    17b0:	4c21      	ldr	r4, [pc, #132]	; (1838 <delay+0x94>)
    17b2:	4d22      	ldr	r5, [pc, #136]	; (183c <delay+0x98>)
    17b4:	4e22      	ldr	r6, [pc, #136]	; (1840 <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    17b6:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    17ba:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    17bc:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    17be:	e844 1300 	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    17c2:	2b00      	cmp	r3, #0
    17c4:	d1f7      	bne.n	17b6 <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    17c6:	491f      	ldr	r1, [pc, #124]	; (1844 <delay+0xa0>)
    17c8:	684b      	ldr	r3, [r1, #4]
	uint32_t usec = 1000*smc + frac;
    17ca:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    17ce:	f8df a078 	ldr.w	sl, [pc, #120]	; 1848 <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
    17d2:	1a1b      	subs	r3, r3, r0
    17d4:	2701      	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
    17d6:	fb0b f802 	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    17da:	f8da 2000 	ldr.w	r2, [sl]
    17de:	fba3 3202 	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
    17e2:	455a      	cmp	r2, fp
    17e4:	bf94      	ite	ls
    17e6:	4490      	addls	r8, r2
    17e8:	44d8      	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    17ea:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    17ee:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    17f0:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    17f2:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    17f6:	2b00      	cmp	r3, #0
    17f8:	d1f7      	bne.n	17ea <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    17fa:	684b      	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    17fc:	f8da c000 	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
    1800:	1a1b      	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
    1802:	fb0b f202 	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1806:	fba3 3c0c 	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
    180a:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
    180e:	bf94      	ite	ls
    1810:	4462      	addls	r2, ip
    1812:	f502 727a 	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
    1816:	eba2 0208 	sub.w	r2, r2, r8
    181a:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
    181e:	d306      	bcc.n	182e <delay+0x8a>
			if (--msec == 0) return;
    1820:	f1b9 0901 	subs.w	r9, r9, #1
			start += 1000;
    1824:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
    1828:	d1df      	bne.n	17ea <delay+0x46>
}
    182a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
    182e:	f001 fb93 	bl	2f58 <yield>
		while ((micros() - start) >= 1000) {
    1832:	4904      	ldr	r1, [pc, #16]	; (1844 <delay+0xa0>)
    1834:	e7d9      	b.n	17ea <delay+0x46>
    1836:	bf00      	nop
    1838:	200020e8 	.word	0x200020e8
    183c:	200020e4 	.word	0x200020e4
    1840:	200020e0 	.word	0x200020e0
    1844:	e0001000 	.word	0xe0001000
    1848:	200020dc 	.word	0x200020dc

0000184c <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    184c:	2836      	cmp	r0, #54	; 0x36
    184e:	d816      	bhi.n	187e <digitalWrite+0x32>
	p = digital_pin_to_info_PGM + pin;
    1850:	0102      	lsls	r2, r0, #4
    1852:	4b10      	ldr	r3, [pc, #64]	; (1894 <digitalWrite+0x48>)
    1854:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
    1858:	589b      	ldr	r3, [r3, r2]
{
    185a:	b410      	push	{r4}
	mask = p->mask;
    185c:	68c2      	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
    185e:	685c      	ldr	r4, [r3, #4]
	if (pinmode & mask) {
    1860:	4214      	tst	r4, r2
    1862:	d005      	beq.n	1870 <digitalWrite+0x24>
		// pin is configured for output mode
		if (val) {
    1864:	b961      	cbnz	r1, 1880 <digitalWrite+0x34>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    1866:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x22) = mask; // clear register
    186a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
    186e:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    1870:	6883      	ldr	r3, [r0, #8]
		if (val) {
    1872:	b151      	cbz	r1, 188a <digitalWrite+0x3e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    1874:	4a08      	ldr	r2, [pc, #32]	; (1898 <digitalWrite+0x4c>)
}
    1876:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    187a:	601a      	str	r2, [r3, #0]
}
    187c:	4770      	bx	lr
    187e:	4770      	bx	lr
    1880:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x21) = mask; // set register
    1884:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    1888:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    188a:	4a04      	ldr	r2, [pc, #16]	; (189c <digitalWrite+0x50>)
}
    188c:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    1890:	601a      	str	r2, [r3, #0]
}
    1892:	4770      	bx	lr
    1894:	2000064c 	.word	0x2000064c
    1898:	0001f038 	.word	0x0001f038
    189c:	00013038 	.word	0x00013038

000018a0 <digitalRead>:

uint8_t digitalRead(uint8_t pin)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return 0;
    18a0:	2836      	cmp	r0, #54	; 0x36
    18a2:	d80b      	bhi.n	18bc <digitalRead+0x1c>
	p = digital_pin_to_info_PGM + pin;
    18a4:	4b06      	ldr	r3, [pc, #24]	; (18c0 <digitalRead+0x20>)
    18a6:	0102      	lsls	r2, r0, #4
    18a8:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
    18ac:	589a      	ldr	r2, [r3, r2]
    18ae:	68c3      	ldr	r3, [r0, #12]
    18b0:	6892      	ldr	r2, [r2, #8]
    18b2:	421a      	tst	r2, r3
    18b4:	bf14      	ite	ne
    18b6:	2001      	movne	r0, #1
    18b8:	2000      	moveq	r0, #0
    18ba:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return 0;
    18bc:	2000      	movs	r0, #0
}
    18be:	4770      	bx	lr
    18c0:	2000064c 	.word	0x2000064c

000018c4 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    18c4:	2836      	cmp	r0, #54	; 0x36
    18c6:	d829      	bhi.n	191c <pinMode+0x58>
	p = digital_pin_to_info_PGM + pin;
    18c8:	4b16      	ldr	r3, [pc, #88]	; (1924 <pinMode+0x60>)
    18ca:	0102      	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    18cc:	2901      	cmp	r1, #1
	p = digital_pin_to_info_PGM + pin;
    18ce:	eb03 1000 	add.w	r0, r3, r0, lsl #4
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    18d2:	589a      	ldr	r2, [r3, r2]
{
    18d4:	b410      	push	{r4}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    18d6:	6853      	ldr	r3, [r2, #4]
    18d8:	68c4      	ldr	r4, [r0, #12]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    18da:	d00e      	beq.n	18fa <pinMode+0x36>
    18dc:	2904      	cmp	r1, #4
    18de:	d00c      	beq.n	18fa <pinMode+0x36>
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    18e0:	ea23 0304 	bic.w	r3, r3, r4
    18e4:	6053      	str	r3, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    18e6:	6883      	ldr	r3, [r0, #8]
		if (mode == INPUT) {
    18e8:	b1a9      	cbz	r1, 1916 <pinMode+0x52>
		} else if (mode == INPUT_PULLUP) {
    18ea:	2902      	cmp	r1, #2
    18ec:	d017      	beq.n	191e <pinMode+0x5a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    18ee:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    18f0:	bf0c      	ite	eq
    18f2:	4a0d      	ldreq	r2, [pc, #52]	; (1928 <pinMode+0x64>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    18f4:	4a0d      	ldrne	r2, [pc, #52]	; (192c <pinMode+0x68>)
    18f6:	601a      	str	r2, [r3, #0]
    18f8:	e007      	b.n	190a <pinMode+0x46>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    18fa:	4323      	orrs	r3, r4
		if (mode == OUTPUT) {
    18fc:	2901      	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
    18fe:	6053      	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
    1900:	6883      	ldr	r3, [r0, #8]
		if (mode == OUTPUT) {
    1902:	d008      	beq.n	1916 <pinMode+0x52>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    1904:	f640 0238 	movw	r2, #2104	; 0x838
    1908:	601a      	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    190a:	6843      	ldr	r3, [r0, #4]
    190c:	2215      	movs	r2, #21
}
    190e:	f85d 4b04 	ldr.w	r4, [sp], #4
	*(p->mux) = 5 | 0x10;
    1912:	601a      	str	r2, [r3, #0]
}
    1914:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7);
    1916:	2238      	movs	r2, #56	; 0x38
    1918:	601a      	str	r2, [r3, #0]
    191a:	e7f6      	b.n	190a <pinMode+0x46>
    191c:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    191e:	4a04      	ldr	r2, [pc, #16]	; (1930 <pinMode+0x6c>)
    1920:	601a      	str	r2, [r3, #0]
    1922:	e7f2      	b.n	190a <pinMode+0x46>
    1924:	2000064c 	.word	0x2000064c
    1928:	00013038 	.word	0x00013038
    192c:	00010038 	.word	0x00010038
    1930:	0001f038 	.word	0x0001f038

00001934 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    1934:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    1936:	f7fe fbb9 	bl	ac <setup>
	while (1) {
		loop();
    193a:	f7fe fc27 	bl	18c <loop>
		yield();
    193e:	f001 fb0b 	bl	2f58 <yield>
	while (1) {
    1942:	e7fa      	b.n	193a <main+0x6>

00001944 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    1944:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    1946:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    194a:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    194e:	d16d      	bne.n	1a2c <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    1950:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    1952:	d341      	bcc.n	19d8 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    1954:	f851 3b04 	ldr.w	r3, [r1], #4
    1958:	f840 3b04 	str.w	r3, [r0], #4
    195c:	f851 3b04 	ldr.w	r3, [r1], #4
    1960:	f840 3b04 	str.w	r3, [r0], #4
    1964:	f851 3b04 	ldr.w	r3, [r1], #4
    1968:	f840 3b04 	str.w	r3, [r0], #4
    196c:	f851 3b04 	ldr.w	r3, [r1], #4
    1970:	f840 3b04 	str.w	r3, [r0], #4
    1974:	f851 3b04 	ldr.w	r3, [r1], #4
    1978:	f840 3b04 	str.w	r3, [r0], #4
    197c:	f851 3b04 	ldr.w	r3, [r1], #4
    1980:	f840 3b04 	str.w	r3, [r0], #4
    1984:	f851 3b04 	ldr.w	r3, [r1], #4
    1988:	f840 3b04 	str.w	r3, [r0], #4
    198c:	f851 3b04 	ldr.w	r3, [r1], #4
    1990:	f840 3b04 	str.w	r3, [r0], #4
    1994:	f851 3b04 	ldr.w	r3, [r1], #4
    1998:	f840 3b04 	str.w	r3, [r0], #4
    199c:	f851 3b04 	ldr.w	r3, [r1], #4
    19a0:	f840 3b04 	str.w	r3, [r0], #4
    19a4:	f851 3b04 	ldr.w	r3, [r1], #4
    19a8:	f840 3b04 	str.w	r3, [r0], #4
    19ac:	f851 3b04 	ldr.w	r3, [r1], #4
    19b0:	f840 3b04 	str.w	r3, [r0], #4
    19b4:	f851 3b04 	ldr.w	r3, [r1], #4
    19b8:	f840 3b04 	str.w	r3, [r0], #4
    19bc:	f851 3b04 	ldr.w	r3, [r1], #4
    19c0:	f840 3b04 	str.w	r3, [r0], #4
    19c4:	f851 3b04 	ldr.w	r3, [r1], #4
    19c8:	f840 3b04 	str.w	r3, [r0], #4
    19cc:	f851 3b04 	ldr.w	r3, [r1], #4
    19d0:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    19d4:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    19d6:	d2bd      	bcs.n	1954 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    19d8:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    19da:	d311      	bcc.n	1a00 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    19dc:	f851 3b04 	ldr.w	r3, [r1], #4
    19e0:	f840 3b04 	str.w	r3, [r0], #4
    19e4:	f851 3b04 	ldr.w	r3, [r1], #4
    19e8:	f840 3b04 	str.w	r3, [r0], #4
    19ec:	f851 3b04 	ldr.w	r3, [r1], #4
    19f0:	f840 3b04 	str.w	r3, [r0], #4
    19f4:	f851 3b04 	ldr.w	r3, [r1], #4
    19f8:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    19fc:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    19fe:	d2ed      	bcs.n	19dc <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    1a00:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    1a02:	d305      	bcc.n	1a10 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    1a04:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    1a08:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    1a0c:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    1a0e:	d2f9      	bcs.n	1a04 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    1a10:	3204      	adds	r2, #4
	beq	.Ldone
    1a12:	d008      	beq.n	1a26 <memcpy+0xe2>

	lsls	r2, r2, #31
    1a14:	07d2      	lsls	r2, r2, #31
	itt ne
    1a16:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    1a18:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    1a1c:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    1a20:	d301      	bcc.n	1a26 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    1a22:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    1a24:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    1a26:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    1a28:	4770      	bx	lr
    1a2a:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    1a2c:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    1a2e:	d313      	bcc.n	1a58 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    1a30:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    1a32:	d08d      	beq.n	1950 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    1a34:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    1a38:	d08a      	beq.n	1950 <memcpy+0xc>

	rsb	r3, #4
    1a3a:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    1a3e:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    1a40:	07db      	lsls	r3, r3, #31
	itt ne
    1a42:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    1a44:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    1a48:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    1a4c:	d380      	bcc.n	1950 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    1a4e:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    1a52:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    1a56:	e77b      	b.n	1950 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    1a58:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    1a5a:	d3d9      	bcc.n	1a10 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    1a5c:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    1a5e:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    1a62:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    1a66:	d2f9      	bcs.n	1a5c <memcpy+0x118>

	ldrb	r3, [r1]
    1a68:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    1a6a:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    1a6c:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    1a6e:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    1a70:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    1a72:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    1a74:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    1a76:	4770      	bx	lr

00001a78 <ultoa>:
	int i=0, j;
    1a78:	f101 3cff 	add.w	ip, r1, #4294967295
{
    1a7c:	b570      	push	{r4, r5, r6, lr}
		digit = val % radix;
    1a7e:	4666      	mov	r6, ip
	int i=0, j;
    1a80:	2400      	movs	r4, #0
    1a82:	e000      	b.n	1a86 <ultoa+0xe>
		i++;
    1a84:	3401      	adds	r4, #1
		digit = val % radix;
    1a86:	fbb0 f5f2 	udiv	r5, r0, r2
    1a8a:	fb02 0315 	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1a8e:	2b09      	cmp	r3, #9
    1a90:	f103 0e37 	add.w	lr, r3, #55	; 0x37
    1a94:	f103 0330 	add.w	r3, r3, #48	; 0x30
    1a98:	fa5f fe8e 	uxtb.w	lr, lr
    1a9c:	bf98      	it	ls
    1a9e:	fa5f fe83 	uxtbls.w	lr, r3
		if (val == 0) break;
    1aa2:	4290      	cmp	r0, r2
		val /= radix;
    1aa4:	4628      	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1aa6:	f806 ef01 	strb.w	lr, [r6, #1]!
		if (val == 0) break;
    1aaa:	d2eb      	bcs.n	1a84 <ultoa+0xc>
	buf[i + 1] = 0;
    1aac:	1c63      	adds	r3, r4, #1
    1aae:	2200      	movs	r2, #0
    1ab0:	18c8      	adds	r0, r1, r3
    1ab2:	54ca      	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
    1ab4:	b17c      	cbz	r4, 1ad6 <ultoa+0x5e>
		t = buf[j];
    1ab6:	4662      	mov	r2, ip
    1ab8:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    1abc:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
    1ac0:	eba1 030c 	sub.w	r3, r1, ip
    1ac4:	3202      	adds	r2, #2
		buf[j] = buf[i];
    1ac6:	f88c 6000 	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
    1aca:	3b01      	subs	r3, #1
    1acc:	1a52      	subs	r2, r2, r1
		buf[i] = t;
    1ace:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    1ad0:	4423      	add	r3, r4
    1ad2:	429a      	cmp	r2, r3
    1ad4:	dbef      	blt.n	1ab6 <ultoa+0x3e>
}
    1ad6:	4608      	mov	r0, r1
    1ad8:	bd70      	pop	{r4, r5, r6, pc}
    1ada:	bf00      	nop

00001adc <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    1adc:	2300      	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
    1ade:	220f      	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    1ae0:	f248 2cb8 	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
    1ae4:	4619      	mov	r1, r3
{
    1ae6:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1ae8:	f44f 4470 	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1aec:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1af0:	f8a0 418c 	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1af4:	f44f 4460 	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
    1af8:	f8a0 218e 	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
    1afc:	460a      	mov	r2, r1
	p->FFILT0 = 0;
    1afe:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    1b02:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    1b06:	b29b      	uxth	r3, r3
    1b08:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    1b0c:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1b10:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
    1b14:	3101      	adds	r1, #1
    1b16:	eb00 1343 	add.w	r3, r0, r3, lsl #5
    1b1a:	2904      	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1b1c:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1b1e:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    1b22:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    1b24:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    1b26:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    1b28:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    1b2a:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
    1b2e:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    1b30:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    1b32:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    1b34:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
    1b36:	d1eb      	bne.n	1b10 <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1b38:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    1b3c:	b29b      	uxth	r3, r3
    1b3e:	f043 030f 	orr.w	r3, r3, #15
    1b42:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    1b46:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    1b4a:	b29b      	uxth	r3, r3
    1b4c:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    1b50:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
    1b54:	bd10      	pop	{r4, pc}
    1b56:	bf00      	nop

00001b58 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    1b58:	4b37      	ldr	r3, [pc, #220]	; (1c38 <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    1b5a:	4a38      	ldr	r2, [pc, #224]	; (1c3c <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    1b5c:	6f99      	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    1b5e:	4838      	ldr	r0, [pc, #224]	; (1c40 <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    1b60:	f441 017f 	orr.w	r1, r1, #16711680	; 0xff0000
{
    1b64:	b570      	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    1b66:	6799      	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    1b68:	f241 0601 	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    1b6c:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1b70:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1b74:	f243 0426 	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    1b78:	430a      	orrs	r2, r1
    1b7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    1b7e:	f7ff ffad 	bl	1adc <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    1b82:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    1b86:	f7ff ffa9 	bl	1adc <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    1b8a:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    1b8e:	f7ff ffa5 	bl	1adc <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    1b92:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    1b96:	f7ff ffa1 	bl	1adc <flexpwm_init>
	for (i=0; i < 4; i++) {
    1b9a:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    1b9c:	f5a0 1003 	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    1ba0:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
    1ba4:	4611      	mov	r1, r2
    1ba6:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    1baa:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    1bae:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    1bb0:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    1bb2:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    1bb4:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    1bb6:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    1bba:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1bbc:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    1bbe:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    1bc2:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1bc4:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    1bc6:	d1ee      	bne.n	1ba6 <pwm_init+0x4e>
    1bc8:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    1bca:	481e      	ldr	r0, [pc, #120]	; (1c44 <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    1bcc:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    1bd0:	f241 0601 	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    1bd4:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1bd6:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1bda:	f243 0426 	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    1bde:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    1be2:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    1be6:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    1be8:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    1bea:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    1bec:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    1bee:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    1bf2:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1bf4:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    1bf6:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    1bfa:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1bfc:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    1bfe:	d1ee      	bne.n	1bde <pwm_init+0x86>
    1c00:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    1c02:	4811      	ldr	r0, [pc, #68]	; (1c48 <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    1c04:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    1c06:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    1c0a:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1c0c:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1c10:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    1c14:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    1c18:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    1c1c:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    1c1e:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    1c20:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    1c22:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    1c24:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    1c26:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1c28:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    1c2a:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    1c2e:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1c30:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
    1c34:	d1ee      	bne.n	1c14 <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    1c36:	bd70      	pop	{r4, r5, r6, pc}
    1c38:	400fc000 	.word	0x400fc000
    1c3c:	fc030000 	.word	0xfc030000
    1c40:	403dc000 	.word	0x403dc000
    1c44:	401e0000 	.word	0x401e0000
    1c48:	401e4000 	.word	0x401e4000

00001c4c <unused_interrupt_vector>:
	__disable_irq();
    1c4c:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    1c4e:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
    1c52:	4c52      	ldr	r4, [pc, #328]	; (1d9c <unused_interrupt_vector+0x150>)
    1c54:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("tst lr, #4\nite eq\nmrseq %0, msp\nmrsne %0, psp\n" : "=r" (stack) :: "memory");
    1c58:	f01e 0f04 	tst.w	lr, #4
    1c5c:	bf0c      	ite	eq
    1c5e:	f3ef 8208 	mrseq	r2, MSP
    1c62:	f3ef 8209 	mrsne	r2, PSP
	info->cfsr = SCB_CFSR;
    1c66:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
    1c6a:	4e4d      	ldr	r6, [pc, #308]	; (1da0 <unused_interrupt_vector+0x154>)
	while (p < end) {
    1c6c:	4d4d      	ldr	r5, [pc, #308]	; (1da4 <unused_interrupt_vector+0x158>)
	info->cfsr = SCB_CFSR;
    1c6e:	f8d3 0d28 	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
    1c72:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
    1c76:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
    1c7a:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
    1c7e:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
    1c82:	e9c4 1324 	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
    1c86:	6993      	ldr	r3, [r2, #24]
    1c88:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    1c8c:	69d3      	ldr	r3, [r2, #28]
    1c8e:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    1c92:	f000 f8d1 	bl	1e38 <tempmonGetTemp>
    1c96:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    1c9a:	f001 fb75 	bl	3388 <rtc_get>
	info->len = sizeof(*info) / 4;
    1c9e:	210b      	movs	r1, #11
	crc = 0xFFFFFFFF;
    1ca0:	f04f 32ff 	mov.w	r2, #4294967295
	info->time = rtc_get();
    1ca4:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    1ca8:	460b      	mov	r3, r1
    1caa:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    1cae:	493e      	ldr	r1, [pc, #248]	; (1da8 <unused_interrupt_vector+0x15c>)
		crc ^= *p++;
    1cb0:	1d30      	adds	r0, r6, #4
    1cb2:	405a      	eors	r2, r3
    1cb4:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    1cb6:	f002 0301 	and.w	r3, r2, #1
    1cba:	3c01      	subs	r4, #1
    1cbc:	fb01 f303 	mul.w	r3, r1, r3
    1cc0:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
    1cc4:	d1f7      	bne.n	1cb6 <unused_interrupt_vector+0x6a>
	while (p < end) {
    1cc6:	42a8      	cmp	r0, r5
    1cc8:	d002      	beq.n	1cd0 <unused_interrupt_vector+0x84>
		crc ^= *p++;
    1cca:	6873      	ldr	r3, [r6, #4]
    1ccc:	4606      	mov	r6, r0
    1cce:	e7ef      	b.n	1cb0 <unused_interrupt_vector+0x64>
	info->crc = crc;
    1cd0:	4b32      	ldr	r3, [pc, #200]	; (1d9c <unused_interrupt_vector+0x150>)
    1cd2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    1cd6:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    1cda:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    1cde:	4930      	ldr	r1, [pc, #192]	; (1da0 <unused_interrupt_vector+0x154>)
    1ce0:	4a32      	ldr	r2, [pc, #200]	; (1dac <unused_interrupt_vector+0x160>)
    1ce2:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
    1ce6:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
    1cea:	f3bf 8f4f 	dsb	sy
	asm("isb");
    1cee:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    1cf2:	4a2f      	ldr	r2, [pc, #188]	; (1db0 <unused_interrupt_vector+0x164>)
	PIT_MCR = PIT_MCR_MDIS;
    1cf4:	2502      	movs	r5, #2
    1cf6:	482f      	ldr	r0, [pc, #188]	; (1db4 <unused_interrupt_vector+0x168>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    1cf8:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    1cfa:	492f      	ldr	r1, [pc, #188]	; (1db8 <unused_interrupt_vector+0x16c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    1cfc:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    1d00:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    1d02:	6005      	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    1d04:	69d3      	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    1d06:	482d      	ldr	r0, [pc, #180]	; (1dbc <unused_interrupt_vector+0x170>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    1d08:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    1d0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1d10:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    1d12:	680b      	ldr	r3, [r1, #0]
    1d14:	4283      	cmp	r3, r0
    1d16:	d83d      	bhi.n	1d94 <unused_interrupt_vector+0x148>
	PIT_MCR = 0;
    1d18:	4d26      	ldr	r5, [pc, #152]	; (1db4 <unused_interrupt_vector+0x168>)
    1d1a:	2100      	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
    1d1c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    1d20:	f04f 32ff 	mov.w	r2, #4294967295
	PIT_MCR = 0;
    1d24:	6029      	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    1d26:	2601      	movs	r6, #1
	PIT_TCTRL0 = 0;
    1d28:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    1d2c:	4924      	ldr	r1, [pc, #144]	; (1dc0 <unused_interrupt_vector+0x174>)
    1d2e:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    1d32:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
    1d36:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    1d3a:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    1d3e:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    1d42:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    1d46:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	count = 0;
    1d4a:	e001      	b.n	1d50 <unused_interrupt_vector+0x104>
		usb_isr();
    1d4c:	f000 f966 	bl	201c <usb_isr>
		if (PIT_TFLG0) {
    1d50:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    1d54:	2b00      	cmp	r3, #0
    1d56:	d0f9      	beq.n	1d4c <unused_interrupt_vector+0x100>
			if (++count >= 80) break;  // reboot after 8 seconds
    1d58:	3401      	adds	r4, #1
			PIT_TFLG0 = 1;
    1d5a:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    1d5e:	2c4f      	cmp	r4, #79	; 0x4f
    1d60:	d9f4      	bls.n	1d4c <unused_interrupt_vector+0x100>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    1d62:	4b18      	ldr	r3, [pc, #96]	; (1dc4 <unused_interrupt_vector+0x178>)
	USB1_USBCMD = USB_USBCMD_RST;
    1d64:	2002      	movs	r0, #2
    1d66:	4918      	ldr	r1, [pc, #96]	; (1dc8 <unused_interrupt_vector+0x17c>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    1d68:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
    1d6c:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    1d70:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    1d72:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    1d76:	b93b      	cbnz	r3, 1d88 <unused_interrupt_vector+0x13c>
	SRC_GPR5 = 0x0BAD00F1;
    1d78:	4814      	ldr	r0, [pc, #80]	; (1dcc <unused_interrupt_vector+0x180>)
    1d7a:	4915      	ldr	r1, [pc, #84]	; (1dd0 <unused_interrupt_vector+0x184>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    1d7c:	4a0d      	ldr	r2, [pc, #52]	; (1db4 <unused_interrupt_vector+0x168>)
	SRC_GPR5 = 0x0BAD00F1;
    1d7e:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    1d80:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
    1d84:	2b00      	cmp	r3, #0
    1d86:	d0fa      	beq.n	1d7e <unused_interrupt_vector+0x132>
	SCB_AIRCR = 0x05FA0004;
    1d88:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    1d8c:	4a11      	ldr	r2, [pc, #68]	; (1dd4 <unused_interrupt_vector+0x188>)
    1d8e:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    1d92:	e7fe      	b.n	1d92 <unused_interrupt_vector+0x146>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    1d94:	f001 f980 	bl	3098 <set_arm_clock>
    1d98:	e7be      	b.n	1d18 <unused_interrupt_vector+0xcc>
    1d9a:	bf00      	nop
    1d9c:	2027ff00 	.word	0x2027ff00
    1da0:	2027ff80 	.word	0x2027ff80
    1da4:	2027ffa8 	.word	0x2027ffa8
    1da8:	edb88320 	.word	0xedb88320
    1dac:	2027ffa0 	.word	0x2027ffa0
    1db0:	400fc000 	.word	0x400fc000
    1db4:	40084000 	.word	0x40084000
    1db8:	20001014 	.word	0x20001014
    1dbc:	0bcd3d80 	.word	0x0bcd3d80
    1dc0:	00249f00 	.word	0x00249f00
    1dc4:	400d9000 	.word	0x400d9000
    1dc8:	402e0000 	.word	0x402e0000
    1dcc:	400f8000 	.word	0x400f8000
    1dd0:	0bad00f1 	.word	0x0bad00f1
    1dd4:	05fa0004 	.word	0x05fa0004

00001dd8 <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
    1dd8:	490a      	ldr	r1, [pc, #40]	; (1e04 <_sbrk+0x2c>)
    1dda:	680a      	ldr	r2, [r1, #0]
        if (incr != 0) {
    1ddc:	b138      	cbz	r0, 1dee <_sbrk+0x16>
{
    1dde:	b508      	push	{r3, lr}
                if (prev + incr > (char *)&_heap_end) {
    1de0:	1813      	adds	r3, r2, r0
    1de2:	4809      	ldr	r0, [pc, #36]	; (1e08 <_sbrk+0x30>)
    1de4:	4283      	cmp	r3, r0
    1de6:	d804      	bhi.n	1df2 <_sbrk+0x1a>
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    1de8:	4610      	mov	r0, r2
                __brkval = prev + incr;
    1dea:	600b      	str	r3, [r1, #0]
}
    1dec:	bd08      	pop	{r3, pc}
    1dee:	4610      	mov	r0, r2
    1df0:	4770      	bx	lr
                        errno = ENOMEM;
    1df2:	f002 fc1b 	bl	462c <__errno>
    1df6:	230c      	movs	r3, #12
                        return (void *)-1;
    1df8:	f04f 32ff 	mov.w	r2, #4294967295
                        errno = ENOMEM;
    1dfc:	6003      	str	r3, [r0, #0]
}
    1dfe:	4610      	mov	r0, r2
    1e00:	bd08      	pop	{r3, pc}
    1e02:	bf00      	nop
    1e04:	200010f0 	.word	0x200010f0
    1e08:	20280000 	.word	0x20280000

00001e0c <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
    1e0c:	2000      	movs	r0, #0
    1e0e:	4770      	bx	lr

00001e10 <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
    1e10:	f04f 30ff 	mov.w	r0, #4294967295
    1e14:	4770      	bx	lr
    1e16:	bf00      	nop

00001e18 <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
    1e18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
    1e1c:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
    1e1e:	604b      	str	r3, [r1, #4]
}
    1e20:	4770      	bx	lr
    1e22:	bf00      	nop

00001e24 <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
    1e24:	2001      	movs	r0, #1
    1e26:	4770      	bx	lr

00001e28 <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
    1e28:	f04f 30ff 	mov.w	r0, #4294967295
    1e2c:	4770      	bx	lr
    1e2e:	bf00      	nop

00001e30 <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    1e30:	bf30      	wfi
    1e32:	e7fd      	b.n	1e30 <abort>

00001e34 <Panic_Temp_isr>:
  unused_interrupt_vector();
    1e34:	f7ff bf0a 	b.w	1c4c <unused_interrupt_vector>

00001e38 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    1e38:	4a12      	ldr	r2, [pc, #72]	; (1e84 <tempmonGetTemp+0x4c>)
    1e3a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    1e3e:	075b      	lsls	r3, r3, #29
    1e40:	d5fb      	bpl.n	1e3a <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    1e42:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    1e46:	4810      	ldr	r0, [pc, #64]	; (1e88 <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    1e48:	f3c3 230b 	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    1e4c:	490f      	ldr	r1, [pc, #60]	; (1e8c <tempmonGetTemp+0x54>)
    1e4e:	ed90 7a00 	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    1e52:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    1e56:	ed91 6a00 	vldr	s12, [r1]
    1e5a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    1e5e:	4a0c      	ldr	r2, [pc, #48]	; (1e90 <tempmonGetTemp+0x58>)
    1e60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    1e64:	4b0b      	ldr	r3, [pc, #44]	; (1e94 <tempmonGetTemp+0x5c>)
    1e66:	edd2 6a00 	vldr	s13, [r2]
    1e6a:	ee77 7ac7 	vsub.f32	s15, s15, s14
    1e6e:	ed93 7a00 	vldr	s14, [r3]
    1e72:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    1e76:	ee67 7a86 	vmul.f32	s15, s15, s12
    1e7a:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
    1e7e:	ee37 0a40 	vsub.f32	s0, s14, s0
    1e82:	4770      	bx	lr
    1e84:	400d8100 	.word	0x400d8100
    1e88:	200020cc 	.word	0x200020cc
    1e8c:	200020d4 	.word	0x200020d4
    1e90:	200020d8 	.word	0x200020d8
    1e94:	200020d0 	.word	0x200020d0

00001e98 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    1e98:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
    1e9a:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
    1e9c:	b11b      	cbz	r3, 1ea6 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    1e9e:	6853      	ldr	r3, [r2, #4]
    1ea0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    1ea4:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    1ea6:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    1ea8:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    1eaa:	b33c      	cbz	r4, 1efc <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    1eac:	4b1a      	ldr	r3, [pc, #104]	; (1f18 <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
    1eae:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    1eb0:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    1eb4:	420c      	tst	r4, r1
    1eb6:	d11d      	bne.n	1ef4 <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    1eb8:	4e18      	ldr	r6, [pc, #96]	; (1f1c <schedule_transfer+0x84>)
    1eba:	6877      	ldr	r7, [r6, #4]
    1ebc:	e004      	b.n	1ec8 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    1ebe:	6874      	ldr	r4, [r6, #4]
    1ec0:	1be4      	subs	r4, r4, r7
    1ec2:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    1ec6:	d20b      	bcs.n	1ee0 <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    1ec8:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    1ecc:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    1ed0:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    1ed4:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    1ed8:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    1edc:	0464      	lsls	r4, r4, #17
    1ede:	d5ee      	bpl.n	1ebe <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    1ee0:	400d      	ands	r5, r1
    1ee2:	d107      	bne.n	1ef4 <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    1ee4:	4c0c      	ldr	r4, [pc, #48]	; (1f18 <schedule_transfer+0x80>)
		endpoint->status = 0;
    1ee6:	e9c0 2502 	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    1eea:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1eee:	430b      	orrs	r3, r1
    1ef0:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    1ef4:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    1ef6:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    1ef8:	bcf0      	pop	{r4, r5, r6, r7}
    1efa:	4770      	bx	lr
	USB1_ENDPTPRIME |= epmask;
    1efc:	4d06      	ldr	r5, [pc, #24]	; (1f18 <schedule_transfer+0x80>)
	endpoint->status = 0;
    1efe:	e9c0 2402 	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    1f02:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
    1f06:	430b      	orrs	r3, r1
    1f08:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    1f0c:	6302      	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
    1f0e:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    1f10:	b662      	cpsie	i
}
    1f12:	bcf0      	pop	{r4, r5, r6, r7}
    1f14:	4770      	bx	lr
    1f16:	bf00      	nop
    1f18:	402e0000 	.word	0x402e0000
    1f1c:	e0001000 	.word	0xe0001000

00001f20 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    1f20:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    1f22:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
    1f24:	b19d      	cbz	r5, 1f4e <run_callbacks+0x2e>
    1f26:	4606      	mov	r6, r0
    1f28:	462a      	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    1f2a:	2400      	movs	r4, #0
    1f2c:	e003      	b.n	1f36 <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    1f2e:	6812      	ldr	r2, [r2, #0]
		count++;
    1f30:	3401      	adds	r4, #1
		if ((uint32_t)t == 1) {
    1f32:	2a01      	cmp	r2, #1
    1f34:	d00c      	beq.n	1f50 <run_callbacks+0x30>
		if (t->status & (1<<7)) {
    1f36:	6853      	ldr	r3, [r2, #4]
    1f38:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    1f3c:	d0f7      	beq.n	1f2e <run_callbacks+0xe>
			ep->first_transfer = t;
    1f3e:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    1f40:	b12c      	cbz	r4, 1f4e <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
    1f42:	4628      	mov	r0, r5
		ep->callback_function(first);
    1f44:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
    1f46:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
    1f48:	4798      	blx	r3
	while (count) {
    1f4a:	3c01      	subs	r4, #1
    1f4c:	d1f9      	bne.n	1f42 <run_callbacks+0x22>
		first = next;
		count--;
	}
}
    1f4e:	bd70      	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
    1f50:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
			break;
    1f54:	e7f4      	b.n	1f40 <run_callbacks+0x20>
    1f56:	bf00      	nop

00001f58 <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    1f58:	b430      	push	{r4, r5}
	if (len > 0) {
    1f5a:	b9d9      	cbnz	r1, 1f94 <endpoint0_transmit.constprop.0+0x3c>
    1f5c:	4c1f      	ldr	r4, [pc, #124]	; (1fdc <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
    1f5e:	4b20      	ldr	r3, [pc, #128]	; (1fe0 <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
    1f60:	2100      	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1f62:	4a20      	ldr	r2, [pc, #128]	; (1fe4 <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
    1f64:	2501      	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1f66:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    1f6a:	6099      	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    1f6c:	601d      	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
    1f6e:	e9c4 3102 	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1f72:	2480      	movs	r4, #128	; 0x80
    1f74:	605c      	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1f76:	f8c2 01bc 	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    1f7a:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    1f7e:	481a      	ldr	r0, [pc, #104]	; (1fe8 <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
    1f80:	432b      	orrs	r3, r5
    1f82:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    1f86:	6001      	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
    1f88:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    1f8c:	2b00      	cmp	r3, #0
    1f8e:	d1fb      	bne.n	1f88 <endpoint0_transmit.constprop.0+0x30>
}
    1f90:	bc30      	pop	{r4, r5}
    1f92:	4770      	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1f94:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    1f96:	4b15      	ldr	r3, [pc, #84]	; (1fec <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    1f98:	4c10      	ldr	r4, [pc, #64]	; (1fdc <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
    1f9a:	2501      	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1f9c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    1fa0:	6098      	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
    1fa2:	4a10      	ldr	r2, [pc, #64]	; (1fe4 <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1fa4:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    1fa6:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    1faa:	601d      	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    1fac:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    1fae:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    1fb2:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
    1fb4:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    1fb6:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    1fba:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    1fbe:	6159      	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
    1fc0:	2100      	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
    1fc2:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    1fc4:	64e1      	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    1fc6:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    1fca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    1fce:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    1fd2:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    1fd6:	2b00      	cmp	r3, #0
    1fd8:	d1fb      	bne.n	1fd2 <endpoint0_transmit.constprop.0+0x7a>
    1fda:	e7c0      	b.n	1f5e <endpoint0_transmit.constprop.0+0x6>
    1fdc:	20000000 	.word	0x20000000
    1fe0:	20001ac0 	.word	0x20001ac0
    1fe4:	402e0000 	.word	0x402e0000
    1fe8:	20002060 	.word	0x20002060
    1fec:	20001ae0 	.word	0x20001ae0

00001ff0 <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    1ff0:	4908      	ldr	r1, [pc, #32]	; (2014 <usb_stop_sof_interrupts+0x24>)
    1ff2:	2201      	movs	r2, #1
    1ff4:	780b      	ldrb	r3, [r1, #0]
    1ff6:	fa02 f000 	lsl.w	r0, r2, r0
    1ffa:	ea23 0000 	bic.w	r0, r3, r0
    1ffe:	7008      	strb	r0, [r1, #0]
	if (sof_usage == 0) {
    2000:	b930      	cbnz	r0, 2010 <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    2002:	4a05      	ldr	r2, [pc, #20]	; (2018 <usb_stop_sof_interrupts+0x28>)
    2004:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
    2008:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    200c:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
    2010:	4770      	bx	lr
    2012:	bf00      	nop
    2014:	2000210f 	.word	0x2000210f
    2018:	402e0000 	.word	0x402e0000

0000201c <usb_isr>:
{
    201c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
    2020:	4c97      	ldr	r4, [pc, #604]	; (2280 <usb_isr+0x264>)
{
    2022:	b083      	sub	sp, #12
	uint32_t status = USB1_USBSTS;
    2024:	f8d4 7144 	ldr.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    2028:	07fb      	lsls	r3, r7, #31
	USB1_USBSTS = status;
    202a:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    202e:	d553      	bpl.n	20d8 <usb_isr+0xbc>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    2030:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    2034:	2a00      	cmp	r2, #0
    2036:	d04a      	beq.n	20ce <usb_isr+0xb2>
    2038:	4e92      	ldr	r6, [pc, #584]	; (2284 <usb_isr+0x268>)
    203a:	f8df a260 	ldr.w	sl, [pc, #608]	; 229c <usb_isr+0x280>
		uint32_t addr = (uint32_t)data;
    203e:	f8df 9274 	ldr.w	r9, [pc, #628]	; 22b4 <usb_isr+0x298>
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    2042:	f8df b274 	ldr.w	fp, [pc, #628]	; 22b8 <usb_isr+0x29c>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    2046:	f8df 8274 	ldr.w	r8, [pc, #628]	; 22bc <usb_isr+0x2a0>
			USB1_ENDPTSETUPSTAT = setupstatus;
    204a:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
    204e:	e9d6 200a 	ldrd	r2, r0, [r6, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    2052:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    2056:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    205a:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    205e:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    2062:	049d      	lsls	r5, r3, #18
    2064:	d5f5      	bpl.n	2052 <usb_isr+0x36>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    2066:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    206a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    206e:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    2072:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    2076:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    207a:	f8d4 51b4 	ldr.w	r5, [r4, #436]	; 0x1b4
    207e:	f015 1501 	ands.w	r5, r5, #65537	; 0x10001
    2082:	d1fa      	bne.n	207a <usb_isr+0x5e>
			endpoint0_notify_mask = 0;
    2084:	b293      	uxth	r3, r2
	setup.bothwords = setupdata;
    2086:	4684      	mov	ip, r0
			endpoint0_notify_mask = 0;
    2088:	f8ca 5000 	str.w	r5, [sl]
	switch (setup.wRequestAndType) {
    208c:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    2090:	f000 81cf 	beq.w	2432 <usb_isr+0x416>
    2094:	f200 80db 	bhi.w	224e <usb_isr+0x232>
    2098:	f240 3102 	movw	r1, #770	; 0x302
    209c:	428b      	cmp	r3, r1
    209e:	f000 81e7 	beq.w	2470 <usb_isr+0x454>
    20a2:	f200 809a 	bhi.w	21da <usb_isr+0x1be>
    20a6:	2b82      	cmp	r3, #130	; 0x82
    20a8:	f000 81cb 	beq.w	2442 <usb_isr+0x426>
    20ac:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    20b0:	f040 808a 	bne.w	21c8 <usb_isr+0x1ac>
		if (endpoint > 7) break;
    20b4:	f010 0f78 	tst.w	r0, #120	; 0x78
    20b8:	b283      	uxth	r3, r0
    20ba:	f000 8203 	beq.w	24c4 <usb_isr+0x4a8>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    20be:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    20c2:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    20c6:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    20ca:	2a00      	cmp	r2, #0
    20cc:	d1bd      	bne.n	204a <usb_isr+0x2e>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    20ce:	4a6c      	ldr	r2, [pc, #432]	; (2280 <usb_isr+0x264>)
    20d0:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    20d4:	2b00      	cmp	r3, #0
    20d6:	d142      	bne.n	215e <usb_isr+0x142>
	if (status & USB_USBSTS_URI) { // page 3164
    20d8:	067e      	lsls	r6, r7, #25
    20da:	d516      	bpl.n	210a <usb_isr+0xee>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    20dc:	4b68      	ldr	r3, [pc, #416]	; (2280 <usb_isr+0x264>)
    20de:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    20e2:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    20e6:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    20ea:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    20ee:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    20f2:	2c00      	cmp	r4, #0
    20f4:	d1fb      	bne.n	20ee <usb_isr+0xd2>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    20f6:	f04f 32ff 	mov.w	r2, #4294967295
    20fa:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    20fe:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    2102:	f000 fd2d 	bl	2b60 <usb_serial_reset>
		endpointN_notify_mask = 0;
    2106:	4b60      	ldr	r3, [pc, #384]	; (2288 <usb_isr+0x26c>)
    2108:	601c      	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
    210a:	01fc      	lsls	r4, r7, #7
    210c:	d503      	bpl.n	2116 <usb_isr+0xfa>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    210e:	4b5f      	ldr	r3, [pc, #380]	; (228c <usb_isr+0x270>)
    2110:	681b      	ldr	r3, [r3, #0]
    2112:	b103      	cbz	r3, 2116 <usb_isr+0xfa>
    2114:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
    2116:	01b8      	lsls	r0, r7, #6
    2118:	d503      	bpl.n	2122 <usb_isr+0x106>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    211a:	4b5d      	ldr	r3, [pc, #372]	; (2290 <usb_isr+0x274>)
    211c:	681b      	ldr	r3, [r3, #0]
    211e:	b103      	cbz	r3, 2122 <usb_isr+0x106>
    2120:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
    2122:	0779      	lsls	r1, r7, #29
    2124:	d508      	bpl.n	2138 <usb_isr+0x11c>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    2126:	4b56      	ldr	r3, [pc, #344]	; (2280 <usb_isr+0x264>)
    2128:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    212c:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    2130:	d047      	beq.n	21c2 <usb_isr+0x1a6>
			usb_high_speed = 1;
    2132:	4b58      	ldr	r3, [pc, #352]	; (2294 <usb_isr+0x278>)
    2134:	2201      	movs	r2, #1
    2136:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    2138:	4b51      	ldr	r3, [pc, #324]	; (2280 <usb_isr+0x264>)
    213a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
    213e:	061a      	lsls	r2, r3, #24
    2140:	d50a      	bpl.n	2158 <usb_isr+0x13c>
    2142:	063b      	lsls	r3, r7, #24
    2144:	d508      	bpl.n	2158 <usb_isr+0x13c>
		if (usb_reboot_timer) {
    2146:	4a54      	ldr	r2, [pc, #336]	; (2298 <usb_isr+0x27c>)
    2148:	7813      	ldrb	r3, [r2, #0]
    214a:	b12b      	cbz	r3, 2158 <usb_isr+0x13c>
			if (--usb_reboot_timer == 0) {
    214c:	3b01      	subs	r3, #1
    214e:	b2db      	uxtb	r3, r3
    2150:	7013      	strb	r3, [r2, #0]
    2152:	2b00      	cmp	r3, #0
    2154:	f000 8272 	beq.w	263c <usb_isr+0x620>
}
    2158:	b003      	add	sp, #12
    215a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (completestatus & endpoint0_notify_mask) {
    215e:	494f      	ldr	r1, [pc, #316]	; (229c <usb_isr+0x280>)
			USB1_ENDPTCOMPLETE = completestatus;
    2160:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    2164:	6808      	ldr	r0, [r1, #0]
    2166:	4203      	tst	r3, r0
    2168:	f040 81d1 	bne.w	250e <usb_isr+0x4f2>
			completestatus &= endpointN_notify_mask;
    216c:	4a46      	ldr	r2, [pc, #280]	; (2288 <usb_isr+0x26c>)
    216e:	6814      	ldr	r4, [r2, #0]
			if (completestatus) {
    2170:	401c      	ands	r4, r3
    2172:	d0b1      	beq.n	20d8 <usb_isr+0xbc>
				while (tx) {
    2174:	ea5f 4814 	movs.w	r8, r4, lsr #16
    2178:	d010      	beq.n	219c <usb_isr+0x180>
    217a:	4e42      	ldr	r6, [pc, #264]	; (2284 <usb_isr+0x268>)
					tx &= ~(1<<p);
    217c:	f04f 0901 	mov.w	r9, #1
					int p=__builtin_ctz(tx);
    2180:	fa98 f5a8 	rbit	r5, r8
    2184:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    2188:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					tx &= ~(1<<p);
    218c:	fa09 f505 	lsl.w	r5, r9, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    2190:	3040      	adds	r0, #64	; 0x40
    2192:	f7ff fec5 	bl	1f20 <run_callbacks>
				while (tx) {
    2196:	ea38 0805 	bics.w	r8, r8, r5
    219a:	d1f1      	bne.n	2180 <usb_isr+0x164>
				uint32_t rx = completestatus & 0xffff;
    219c:	b2a4      	uxth	r4, r4
				while(rx) {
    219e:	2c00      	cmp	r4, #0
    21a0:	d09a      	beq.n	20d8 <usb_isr+0xbc>
    21a2:	4e38      	ldr	r6, [pc, #224]	; (2284 <usb_isr+0x268>)
					rx &= ~(1<<p);
    21a4:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(rx);
    21a8:	fa94 f5a4 	rbit	r5, r4
    21ac:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    21b0:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					rx &= ~(1<<p);
    21b4:	fa08 f505 	lsl.w	r5, r8, r5
					run_callbacks(endpoint_queue_head + p * 2);
    21b8:	f7ff feb2 	bl	1f20 <run_callbacks>
				while(rx) {
    21bc:	43ac      	bics	r4, r5
    21be:	d1f3      	bne.n	21a8 <usb_isr+0x18c>
    21c0:	e78a      	b.n	20d8 <usb_isr+0xbc>
			usb_high_speed = 0;
    21c2:	4a34      	ldr	r2, [pc, #208]	; (2294 <usb_isr+0x278>)
    21c4:	7013      	strb	r3, [r2, #0]
    21c6:	e7b7      	b.n	2138 <usb_isr+0x11c>
	switch (setup.wRequestAndType) {
    21c8:	2b80      	cmp	r3, #128	; 0x80
    21ca:	f47f af78 	bne.w	20be <usb_isr+0xa2>
		reply_buffer[0] = 0;
    21ce:	4834      	ldr	r0, [pc, #208]	; (22a0 <usb_isr+0x284>)
		endpoint0_transmit(reply_buffer, 2, 0);
    21d0:	2102      	movs	r1, #2
		reply_buffer[0] = 0;
    21d2:	8005      	strh	r5, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    21d4:	f7ff fec0 	bl	1f58 <endpoint0_transmit.constprop.0>
		return;
    21d8:	e775      	b.n	20c6 <usb_isr+0xaa>
	switch (setup.wRequestAndType) {
    21da:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    21de:	f000 810b 	beq.w	23f8 <usb_isr+0x3dc>
    21e2:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
    21e6:	2b01      	cmp	r3, #1
    21e8:	f63f af69 	bhi.w	20be <usb_isr+0xa2>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    21ec:	4b2d      	ldr	r3, [pc, #180]	; (22a4 <usb_isr+0x288>)
    21ee:	685d      	ldr	r5, [r3, #4]
    21f0:	2d00      	cmp	r5, #0
    21f2:	f43f af64 	beq.w	20be <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    21f6:	fa1f fc8c 	uxth.w	ip, ip
    21fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    21fe:	e004      	b.n	220a <usb_isr+0x1ee>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    2200:	691d      	ldr	r5, [r3, #16]
    2202:	330c      	adds	r3, #12
    2204:	2d00      	cmp	r5, #0
    2206:	f43f af5a 	beq.w	20be <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    220a:	881a      	ldrh	r2, [r3, #0]
    220c:	4572      	cmp	r2, lr
    220e:	d1f7      	bne.n	2200 <usb_isr+0x1e4>
    2210:	885a      	ldrh	r2, [r3, #2]
    2212:	4562      	cmp	r2, ip
    2214:	d1f4      	bne.n	2200 <usb_isr+0x1e4>
				if ((setup.wValue >> 8) == 3) {
    2216:	ea4f 221e 	mov.w	r2, lr, lsr #8
    221a:	2a03      	cmp	r2, #3
    221c:	f000 81a5 	beq.w	256a <usb_isr+0x54e>
					datalen = list->length;
    2220:	891a      	ldrh	r2, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    2222:	0c00      	lsrs	r0, r0, #16
    2224:	4282      	cmp	r2, r0
    2226:	bf28      	it	cs
    2228:	4602      	movcs	r2, r0
				if (setup.wValue == 0x200) {
    222a:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    222e:	f040 81a1 	bne.w	2574 <usb_isr+0x558>
					if (usb_high_speed) src = usb_config_descriptor_480;
    2232:	4b18      	ldr	r3, [pc, #96]	; (2294 <usb_isr+0x278>)
    2234:	491c      	ldr	r1, [pc, #112]	; (22a8 <usb_isr+0x28c>)
    2236:	7818      	ldrb	r0, [r3, #0]
    2238:	4b1c      	ldr	r3, [pc, #112]	; (22ac <usb_isr+0x290>)
					memcpy(usb_descriptor_buffer, src, datalen);
    223a:	9201      	str	r2, [sp, #4]
    223c:	2800      	cmp	r0, #0
    223e:	bf18      	it	ne
    2240:	4619      	movne	r1, r3
    2242:	481b      	ldr	r0, [pc, #108]	; (22b0 <usb_isr+0x294>)
    2244:	f7ff fb7e 	bl	1944 <memcpy>
    2248:	4d19      	ldr	r5, [pc, #100]	; (22b0 <usb_isr+0x294>)
    224a:	9a01      	ldr	r2, [sp, #4]
    224c:	e1e1      	b.n	2612 <usb_isr+0x5f6>
	switch (setup.wRequestAndType) {
    224e:	f242 2121 	movw	r1, #8737	; 0x2221
    2252:	428b      	cmp	r3, r1
    2254:	d07c      	beq.n	2350 <usb_isr+0x334>
    2256:	d933      	bls.n	22c0 <usb_isr+0x2a4>
    2258:	f242 3121 	movw	r1, #8993	; 0x2321
    225c:	428b      	cmp	r3, r1
    225e:	f000 8081 	beq.w	2364 <usb_isr+0x348>
    2262:	f64f 01c0 	movw	r1, #63680	; 0xf8c0
    2266:	428b      	cmp	r3, r1
    2268:	f47f af29 	bne.w	20be <usb_isr+0xa2>
		if ((setup.wIndex & 0xFF00) != 0) break; // 1=Genre, 4=Compat ID, 5=Properties
    226c:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
    2270:	b283      	uxth	r3, r0
    2272:	f47f af24 	bne.w	20be <usb_isr+0xa2>
		setup.wIndex |= 0xEE00; // alter wIndex and treat as normal USB descriptor
    2276:	f443 436e 	orr.w	r3, r3, #60928	; 0xee00
    227a:	f363 0c0f 	bfi	ip, r3, #0, #16
    227e:	e7b5      	b.n	21ec <usb_isr+0x1d0>
    2280:	402e0000 	.word	0x402e0000
    2284:	20000000 	.word	0x20000000
    2288:	20002064 	.word	0x20002064
    228c:	200020f8 	.word	0x200020f8
    2290:	200020fc 	.word	0x200020fc
    2294:	20002115 	.word	0x20002115
    2298:	20002116 	.word	0x20002116
    229c:	20002060 	.word	0x20002060
    22a0:	20002094 	.word	0x20002094
    22a4:	20000e48 	.word	0x20000e48
    22a8:	60001eb8 	.word	0x60001eb8
    22ac:	60001f1c 	.word	0x60001f1c
    22b0:	20200000 	.word	0x20200000
    22b4:	20002058 	.word	0x20002058
    22b8:	b8c6cf5d 	.word	0xb8c6cf5d
    22bc:	402e01c0 	.word	0x402e01c0
	switch (setup.wRequestAndType) {
    22c0:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    22c4:	d066      	beq.n	2394 <usb_isr+0x378>
    22c6:	f242 0121 	movw	r1, #8225	; 0x2021
    22ca:	428b      	cmp	r3, r1
    22cc:	f47f aef7 	bne.w	20be <usb_isr+0xa2>
		if (setup.wLength != 7) break;
    22d0:	0c03      	lsrs	r3, r0, #16
    22d2:	2b07      	cmp	r3, #7
    22d4:	f47f aef3 	bne.w	20be <usb_isr+0xa2>
		endpoint0_transfer_data.next = 1;
    22d8:	4bb2      	ldr	r3, [pc, #712]	; (25a4 <usb_isr+0x588>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
    22da:	49b3      	ldr	r1, [pc, #716]	; (25a8 <usb_isr+0x58c>)
		endpoint_queue_head[0].status = 0;
    22dc:	60f5      	str	r5, [r6, #12]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    22de:	60d9      	str	r1, [r3, #12]
		endpoint0_setupdata.bothwords = setupdata;
    22e0:	49b2      	ldr	r1, [pc, #712]	; (25ac <usb_isr+0x590>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    22e2:	60b3      	str	r3, [r6, #8]
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    22e4:	f8c3 9008 	str.w	r9, [r3, #8]
		endpoint0_setupdata.bothwords = setupdata;
    22e8:	e9c1 2000 	strd	r2, r0, [r1]
		endpoint0_transfer_data.next = 1;
    22ec:	2201      	movs	r2, #1
    22ee:	601a      	str	r2, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    22f0:	4aaf      	ldr	r2, [pc, #700]	; (25b0 <usb_isr+0x594>)
    22f2:	605a      	str	r2, [r3, #4]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    22f4:	4aaf      	ldr	r2, [pc, #700]	; (25b4 <usb_isr+0x598>)
    22f6:	611a      	str	r2, [r3, #16]
		USB1_ENDPTPRIME |= (1<<0);
    22f8:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
    22fc:	f041 0101 	orr.w	r1, r1, #1
    2300:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.pointer3 = addr + 12288;
    2304:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    2308:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    230c:	6159      	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    230e:	619a      	str	r2, [r3, #24]
		while (USB1_ENDPTPRIME) ;
    2310:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2314:	2b00      	cmp	r3, #0
    2316:	d1fb      	bne.n	2310 <usb_isr+0x2f4>
	endpoint0_transfer_ack.next = 1;
    2318:	4aa7      	ldr	r2, [pc, #668]	; (25b8 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    231a:	64f3      	str	r3, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    231c:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
    231e:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    2320:	64b2      	str	r2, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    2322:	6013      	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2324:	f248 0380 	movw	r3, #32896	; 0x8080
    2328:	6053      	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    232a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    232e:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2332:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2336:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    233a:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    233e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2342:	f8ca 3000 	str.w	r3, [sl]
	while (USB1_ENDPTPRIME) ;
    2346:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    234a:	2b00      	cmp	r3, #0
    234c:	d1fb      	bne.n	2346 <usb_isr+0x32a>
    234e:	e6ba      	b.n	20c6 <usb_isr+0xaa>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    2350:	b280      	uxth	r0, r0
    2352:	b938      	cbnz	r0, 2364 <usb_isr+0x348>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    2354:	4b99      	ldr	r3, [pc, #612]	; (25bc <usb_isr+0x5a0>)
			usb_cdc_line_rtsdtr = setup.wValue;
    2356:	f3c2 4207 	ubfx	r2, r2, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    235a:	6819      	ldr	r1, [r3, #0]
    235c:	4b98      	ldr	r3, [pc, #608]	; (25c0 <usb_isr+0x5a4>)
    235e:	6019      	str	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    2360:	4b98      	ldr	r3, [pc, #608]	; (25c4 <usb_isr+0x5a8>)
    2362:	701a      	strb	r2, [r3, #0]
	endpoint0_transfer_ack.next = 1;
    2364:	4b94      	ldr	r3, [pc, #592]	; (25b8 <usb_isr+0x59c>)
	endpoint0_transfer_ack.pointer0 = 0;
    2366:	2200      	movs	r2, #0
    2368:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
    236a:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    236c:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    236e:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    2370:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2372:	2280      	movs	r2, #128	; 0x80
    2374:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    2376:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    237a:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    237e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2382:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    2386:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    238a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    238e:	2b00      	cmp	r3, #0
    2390:	d1fb      	bne.n	238a <usb_isr+0x36e>
    2392:	e698      	b.n	20c6 <usb_isr+0xaa>
		usb_configuration = setup.wValue;
    2394:	f3c2 4207 	ubfx	r2, r2, #16, #8
    2398:	4b8b      	ldr	r3, [pc, #556]	; (25c8 <usb_isr+0x5ac>)
    239a:	701a      	strb	r2, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    239c:	4b8b      	ldr	r3, [pc, #556]	; (25cc <usb_isr+0x5b0>)
    239e:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    23a2:	4b8b      	ldr	r3, [pc, #556]	; (25d0 <usb_isr+0x5b4>)
    23a4:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    23a8:	4b8a      	ldr	r3, [pc, #552]	; (25d4 <usb_isr+0x5b8>)
    23aa:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		usb_serial_configure();
    23ae:	f000 fbd9 	bl	2b64 <usb_serial_configure>
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
    23b2:	2280      	movs	r2, #128	; 0x80
    23b4:	4629      	mov	r1, r5
    23b6:	4888      	ldr	r0, [pc, #544]	; (25d8 <usb_isr+0x5bc>)
    23b8:	f002 f802 	bl	43c0 <memset>
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    23bc:	4b87      	ldr	r3, [pc, #540]	; (25dc <usb_isr+0x5c0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    23be:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    23c0:	f8c6 b0a0 	str.w	fp, [r6, #160]	; 0xa0
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    23c4:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
	endpoint0_transfer_ack.next = 1;
    23c8:	4b7b      	ldr	r3, [pc, #492]	; (25b8 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    23ca:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    23cc:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.next = 1;
    23ce:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    23d0:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.pointer0 = 0;
    23d2:	609d      	str	r5, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    23d4:	601a      	str	r2, [r3, #0]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    23d6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    23da:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    23de:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    23e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    23e6:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    23ea:	f8ca 5000 	str.w	r5, [sl]
	while (USB1_ENDPTPRIME) ;
    23ee:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    23f2:	2b00      	cmp	r3, #0
    23f4:	d1fb      	bne.n	23ee <usb_isr+0x3d2>
    23f6:	e666      	b.n	20c6 <usb_isr+0xaa>
	endpoint0_transfer_ack.next = 1;
    23f8:	4b6f      	ldr	r3, [pc, #444]	; (25b8 <usb_isr+0x59c>)
    23fa:	2101      	movs	r1, #1
	endpoint_queue_head[1].status = 0;
    23fc:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    23fe:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2400:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    2402:	609d      	str	r5, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    2404:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2406:	6059      	str	r1, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    2408:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    240c:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2410:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    2418:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    241c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2420:	2b00      	cmp	r3, #0
    2422:	d1fb      	bne.n	241c <usb_isr+0x400>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    2424:	0c13      	lsrs	r3, r2, #16
    2426:	065b      	lsls	r3, r3, #25
    2428:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    242c:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		return;
    2430:	e649      	b.n	20c6 <usb_isr+0xaa>
		reply_buffer[0] = usb_configuration;
    2432:	4b65      	ldr	r3, [pc, #404]	; (25c8 <usb_isr+0x5ac>)
		endpoint0_transmit(reply_buffer, 1, 0);
    2434:	2101      	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    2436:	486a      	ldr	r0, [pc, #424]	; (25e0 <usb_isr+0x5c4>)
    2438:	781b      	ldrb	r3, [r3, #0]
    243a:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    243c:	f7ff fd8c 	bl	1f58 <endpoint0_transmit.constprop.0>
		return;
    2440:	e641      	b.n	20c6 <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    2442:	b283      	uxth	r3, r0
		if (endpoint > 7) break;
    2444:	f010 0078 	ands.w	r0, r0, #120	; 0x78
    2448:	f47f ae39 	bne.w	20be <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    244c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    2450:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
		reply_buffer[0] = 0;
    2454:	4a62      	ldr	r2, [pc, #392]	; (25e0 <usb_isr+0x5c4>)
    2456:	8010      	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    2458:	0618      	lsls	r0, r3, #24
    245a:	f100 809e 	bmi.w	259a <usb_isr+0x57e>
    245e:	07cb      	lsls	r3, r1, #31
    2460:	d501      	bpl.n	2466 <usb_isr+0x44a>
			reply_buffer[0] = 1;
    2462:	2301      	movs	r3, #1
    2464:	7013      	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    2466:	2102      	movs	r1, #2
    2468:	485d      	ldr	r0, [pc, #372]	; (25e0 <usb_isr+0x5c4>)
    246a:	f7ff fd75 	bl	1f58 <endpoint0_transmit.constprop.0>
		return;
    246e:	e62a      	b.n	20c6 <usb_isr+0xaa>
		if (endpoint > 7) break;
    2470:	f010 0f78 	tst.w	r0, #120	; 0x78
    2474:	b283      	uxth	r3, r0
    2476:	f47f ae22 	bne.w	20be <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    247a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    247e:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    2482:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    2486:	bf14      	ite	ne
    2488:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    248c:	f043 0301 	orreq.w	r3, r3, #1
    2490:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    2494:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    2496:	4b48      	ldr	r3, [pc, #288]	; (25b8 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    2498:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    249a:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    249c:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    249e:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    24a0:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    24a2:	2280      	movs	r2, #128	; 0x80
    24a4:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    24a6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    24aa:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    24ae:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    24b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    24b6:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    24ba:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    24be:	2b00      	cmp	r3, #0
    24c0:	d1fb      	bne.n	24ba <usb_isr+0x49e>
    24c2:	e600      	b.n	20c6 <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    24c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    24c8:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    24cc:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    24d0:	bf14      	ite	ne
    24d2:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    24d6:	f023 0301 	biceq.w	r3, r3, #1
    24da:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    24de:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    24e0:	4b35      	ldr	r3, [pc, #212]	; (25b8 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    24e2:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    24e4:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    24e6:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    24e8:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    24ea:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    24ec:	2280      	movs	r2, #128	; 0x80
    24ee:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    24f0:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    24f4:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    24f8:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    24fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    2500:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    2504:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2508:	2b00      	cmp	r3, #0
    250a:	d1fb      	bne.n	2504 <usb_isr+0x4e8>
    250c:	e5db      	b.n	20c6 <usb_isr+0xaa>
				endpoint0_notify_mask = 0;
    250e:	2000      	movs	r0, #0
    2510:	6008      	str	r0, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    2512:	4926      	ldr	r1, [pc, #152]	; (25ac <usb_isr+0x590>)
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    2514:	880c      	ldrh	r4, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    2516:	6848      	ldr	r0, [r1, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    2518:	f242 0121 	movw	r1, #8225	; 0x2021
    251c:	428c      	cmp	r4, r1
    251e:	f47f ae25 	bne.w	216c <usb_isr+0x150>
    2522:	b280      	uxth	r0, r0
    2524:	2800      	cmp	r0, #0
    2526:	f47f ae21 	bne.w	216c <usb_isr+0x150>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    252a:	492e      	ldr	r1, [pc, #184]	; (25e4 <usb_isr+0x5c8>)
    252c:	4c2e      	ldr	r4, [pc, #184]	; (25e8 <usb_isr+0x5cc>)
    252e:	c903      	ldmia	r1, {r0, r1}
    2530:	80a1      	strh	r1, [r4, #4]
		if (usb_cdc_line_coding[0] == 134) {
    2532:	2886      	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    2534:	ea4f 4111 	mov.w	r1, r1, lsr #16
    2538:	6020      	str	r0, [r4, #0]
    253a:	71a1      	strb	r1, [r4, #6]
		if (usb_cdc_line_coding[0] == 134) {
    253c:	f47f ae16 	bne.w	216c <usb_isr+0x150>
	__disable_irq();
    2540:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    2542:	482a      	ldr	r0, [pc, #168]	; (25ec <usb_isr+0x5d0>)
    2544:	7801      	ldrb	r1, [r0, #0]
    2546:	f041 0108 	orr.w	r1, r1, #8
    254a:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    254c:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    2550:	060d      	lsls	r5, r1, #24
    2552:	d405      	bmi.n	2560 <usb_isr+0x544>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    2554:	2080      	movs	r0, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    2556:	4301      	orrs	r1, r0
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    2558:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    255c:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	__enable_irq();
    2560:	b662      	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    2562:	4a23      	ldr	r2, [pc, #140]	; (25f0 <usb_isr+0x5d4>)
    2564:	2150      	movs	r1, #80	; 0x50
    2566:	7011      	strb	r1, [r2, #0]
    2568:	e600      	b.n	216c <usb_isr+0x150>
				if (datalen > setup.wLength) datalen = setup.wLength;
    256a:	0c00      	lsrs	r0, r0, #16
					datalen = *(list->addr);
    256c:	782a      	ldrb	r2, [r5, #0]
    256e:	4282      	cmp	r2, r0
    2570:	bf28      	it	cs
    2572:	4602      	movcs	r2, r0
				} else if (setup.wValue == 0x700) {
    2574:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
    2578:	d144      	bne.n	2604 <usb_isr+0x5e8>
					if (usb_high_speed) src = usb_config_descriptor_12;
    257a:	4b1e      	ldr	r3, [pc, #120]	; (25f4 <usb_isr+0x5d8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    257c:	4d1e      	ldr	r5, [pc, #120]	; (25f8 <usb_isr+0x5dc>)
					if (usb_high_speed) src = usb_config_descriptor_12;
    257e:	7818      	ldrb	r0, [r3, #0]
    2580:	491e      	ldr	r1, [pc, #120]	; (25fc <usb_isr+0x5e0>)
    2582:	4b1f      	ldr	r3, [pc, #124]	; (2600 <usb_isr+0x5e4>)
					memcpy(usb_descriptor_buffer, src, datalen);
    2584:	9201      	str	r2, [sp, #4]
    2586:	2800      	cmp	r0, #0
    2588:	bf18      	it	ne
    258a:	4619      	movne	r1, r3
    258c:	4628      	mov	r0, r5
    258e:	f7ff f9d9 	bl	1944 <memcpy>
					usb_descriptor_buffer[1] = 7;
    2592:	2307      	movs	r3, #7
    2594:	706b      	strb	r3, [r5, #1]
    2596:	9a01      	ldr	r2, [sp, #4]
    2598:	e03b      	b.n	2612 <usb_isr+0x5f6>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    259a:	03c9      	lsls	r1, r1, #15
    259c:	f53f af61 	bmi.w	2462 <usb_isr+0x446>
    25a0:	e761      	b.n	2466 <usb_isr+0x44a>
    25a2:	bf00      	nop
    25a4:	20001ae0 	.word	0x20001ae0
    25a8:	20003058 	.word	0x20003058
    25ac:	20001c80 	.word	0x20001c80
    25b0:	00070080 	.word	0x00070080
    25b4:	20004058 	.word	0x20004058
    25b8:	20001ac0 	.word	0x20001ac0
    25bc:	200020e4 	.word	0x200020e4
    25c0:	200020f4 	.word	0x200020f4
    25c4:	20002113 	.word	0x20002113
    25c8:	20002114 	.word	0x20002114
    25cc:	00cc0002 	.word	0x00cc0002
    25d0:	000200c8 	.word	0x000200c8
    25d4:	00c80002 	.word	0x00c80002
    25d8:	20000080 	.word	0x20000080
    25dc:	74d59319 	.word	0x74d59319
    25e0:	20002094 	.word	0x20002094
    25e4:	20002058 	.word	0x20002058
    25e8:	200020ec 	.word	0x200020ec
    25ec:	2000210f 	.word	0x2000210f
    25f0:	20002116 	.word	0x20002116
    25f4:	20002115 	.word	0x20002115
    25f8:	20200000 	.word	0x20200000
    25fc:	60001f1c 	.word	0x60001f1c
    2600:	60001eb8 	.word	0x60001eb8
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    2604:	4629      	mov	r1, r5
    2606:	4d10      	ldr	r5, [pc, #64]	; (2648 <usb_isr+0x62c>)
    2608:	9201      	str	r2, [sp, #4]
    260a:	4628      	mov	r0, r5
    260c:	f7ff f99a 	bl	1944 <memcpy>
    2610:	9a01      	ldr	r2, [sp, #4]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    2612:	f025 031f 	bic.w	r3, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
    2616:	4415      	add	r5, r2
	asm("dsb");
    2618:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    261c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    2620:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    2624:	3320      	adds	r3, #32
	} while (location < end_addr);
    2626:	429d      	cmp	r5, r3
    2628:	d8fa      	bhi.n	2620 <usb_isr+0x604>
	asm("dsb");
    262a:	f3bf 8f4f 	dsb	sy
	asm("isb");
    262e:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    2632:	4805      	ldr	r0, [pc, #20]	; (2648 <usb_isr+0x62c>)
    2634:	4611      	mov	r1, r2
    2636:	f7ff fc8f 	bl	1f58 <endpoint0_transmit.constprop.0>
				return;
    263a:	e544      	b.n	20c6 <usb_isr+0xaa>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    263c:	2003      	movs	r0, #3
    263e:	f7ff fcd7 	bl	1ff0 <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    2642:	f007 fb9d 	bl	9d80 <___reboot_Teensyduino__veneer>
    2646:	bf00      	nop
    2648:	20200000 	.word	0x20200000

0000264c <usb_config_rx>:
{
    264c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2650:	461f      	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    2652:	1e83      	subs	r3, r0, #2
    2654:	2b02      	cmp	r3, #2
    2656:	d901      	bls.n	265c <usb_config_rx+0x10>
}
    2658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    265c:	f8df 904c 	ldr.w	r9, [pc, #76]	; 26ac <usb_config_rx+0x60>
    2660:	4615      	mov	r5, r2
    2662:	460c      	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
    2664:	223c      	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    2666:	eb09 18c0 	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    266a:	4606      	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    266c:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    2670:	2100      	movs	r1, #0
    2672:	f108 0004 	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    2676:	0424      	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
    2678:	f001 fea2 	bl	43c0 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    267c:	fab5 f285 	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
    2680:	2301      	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    2682:	0952      	lsrs	r2, r2, #5
    2684:	ea44 7442 	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
    2688:	f849 400a 	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    268c:	f8c8 7038 	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    2690:	f8c8 3008 	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    2694:	2f00      	cmp	r7, #0
    2696:	d0df      	beq.n	2658 <usb_config_rx+0xc>
    2698:	4a03      	ldr	r2, [pc, #12]	; (26a8 <usb_config_rx+0x5c>)
    269a:	40b3      	lsls	r3, r6
    269c:	6811      	ldr	r1, [r2, #0]
    269e:	430b      	orrs	r3, r1
    26a0:	6013      	str	r3, [r2, #0]
}
    26a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    26a6:	bf00      	nop
    26a8:	20002064 	.word	0x20002064
    26ac:	20000000 	.word	0x20000000

000026b0 <usb_config_tx>:
{
    26b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    26b4:	460d      	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    26b6:	1e81      	subs	r1, r0, #2
    26b8:	2902      	cmp	r1, #2
    26ba:	d901      	bls.n	26c0 <usb_config_tx+0x10>
}
    26bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    26c0:	01c7      	lsls	r7, r0, #7
    26c2:	f8df 904c 	ldr.w	r9, [pc, #76]	; 2710 <usb_config_tx+0x60>
    26c6:	4692      	mov	sl, r2
    26c8:	4604      	mov	r4, r0
    26ca:	3740      	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    26cc:	223c      	movs	r2, #60	; 0x3c
    26ce:	2100      	movs	r1, #0
    26d0:	461e      	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    26d2:	eb09 0807 	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    26d6:	042d      	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
    26d8:	f108 0004 	add.w	r0, r8, #4
    26dc:	f001 fe70 	bl	43c0 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    26e0:	faba f28a 	clz	r2, sl
    26e4:	0952      	lsrs	r2, r2, #5
    26e6:	ea45 7242 	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
    26ea:	f849 2007 	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
    26ee:	2201      	movs	r2, #1
	qh->callback_function = callback;
    26f0:	f8c8 6038 	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    26f4:	f8c8 2008 	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    26f8:	2e00      	cmp	r6, #0
    26fa:	d0df      	beq.n	26bc <usb_config_tx+0xc>
    26fc:	4b03      	ldr	r3, [pc, #12]	; (270c <usb_config_tx+0x5c>)
    26fe:	3410      	adds	r4, #16
    2700:	6819      	ldr	r1, [r3, #0]
    2702:	40a2      	lsls	r2, r4
    2704:	430a      	orrs	r2, r1
    2706:	601a      	str	r2, [r3, #0]
}
    2708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    270c:	20002064 	.word	0x20002064
    2710:	20000000 	.word	0x20000000

00002714 <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    2714:	0412      	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    2716:	6081      	str	r1, [r0, #8]
	transfer->callback_param = param;
    2718:	61c3      	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
    271a:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
    271e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
    2722:	b410      	push	{r4}
	transfer->next = 1;
    2724:	2401      	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
    2726:	6042      	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
    2728:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
    272c:	6004      	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
    272e:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
    2732:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
    2736:	60c4      	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
    2738:	6181      	str	r1, [r0, #24]
}
    273a:	f85d 4b04 	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
    273e:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
    2742:	4770      	bx	lr

00002744 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    2744:	1e83      	subs	r3, r0, #2
{
    2746:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    2748:	2b02      	cmp	r3, #2
    274a:	d900      	bls.n	274e <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    274c:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    274e:	4b06      	ldr	r3, [pc, #24]	; (2768 <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
    2750:	f100 0110 	add.w	r1, r0, #16
    2754:	f04f 0c01 	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    2758:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    275c:	fa0c f101 	lsl.w	r1, ip, r1
    2760:	3040      	adds	r0, #64	; 0x40
    2762:	f7ff bb99 	b.w	1e98 <schedule_transfer>
    2766:	bf00      	nop
    2768:	20000000 	.word	0x20000000

0000276c <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    276c:	1e83      	subs	r3, r0, #2
{
    276e:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    2770:	2b02      	cmp	r3, #2
    2772:	d900      	bls.n	2776 <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    2774:	4770      	bx	lr
	uint32_t mask = 1 << endpoint_number;
    2776:	2101      	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    2778:	4b02      	ldr	r3, [pc, #8]	; (2784 <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
    277a:	4081      	lsls	r1, r0
    277c:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    2780:	f7ff bb8a 	b.w	1e98 <schedule_transfer>
    2784:	20000000 	.word	0x20000000

00002788 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    2788:	6840      	ldr	r0, [r0, #4]
#endif
}
    278a:	4770      	bx	lr

0000278c <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    278c:	4a12      	ldr	r2, [pc, #72]	; (27d8 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    278e:	4b13      	ldr	r3, [pc, #76]	; (27dc <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    2790:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    2794:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    2798:	4298      	cmp	r0, r3
{
    279a:	b510      	push	{r4, lr}
    279c:	b084      	sub	sp, #16
	if (num < 10000000) num = num * 10;
    279e:	d202      	bcs.n	27a6 <usb_init_serialnumber+0x1a>
    27a0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    27a4:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    27a6:	4c0e      	ldr	r4, [pc, #56]	; (27e0 <usb_init_serialnumber+0x54>)
    27a8:	a901      	add	r1, sp, #4
    27aa:	220a      	movs	r2, #10
    27ac:	f7ff f964 	bl	1a78 <ultoa>
	for (i=0; i<10; i++) {
    27b0:	a901      	add	r1, sp, #4
    27b2:	2300      	movs	r3, #0
    27b4:	4620      	mov	r0, r4
		char c = buf[i];
    27b6:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    27ba:	3301      	adds	r3, #1
		if (!c) break;
    27bc:	b13a      	cbz	r2, 27ce <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
    27be:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    27c0:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    27c4:	d1f7      	bne.n	27b6 <usb_init_serialnumber+0x2a>
    27c6:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    27c8:	7023      	strb	r3, [r4, #0]
}
    27ca:	b004      	add	sp, #16
    27cc:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    27ce:	005b      	lsls	r3, r3, #1
    27d0:	b2db      	uxtb	r3, r3
    27d2:	7023      	strb	r3, [r4, #0]
}
    27d4:	b004      	add	sp, #16
    27d6:	bd10      	pop	{r4, pc}
    27d8:	401f4400 	.word	0x401f4400
    27dc:	00989680 	.word	0x00989680
    27e0:	200016d4 	.word	0x200016d4

000027e4 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    27e4:	f000 badc 	b.w	2da0 <usb_serial_flush_input>

000027e8 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    27e8:	f000 baac 	b.w	2d44 <usb_serial_peekchar>

000027ec <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    27ec:	f000 bb10 	b.w	2e10 <usb_serial_getchar>

000027f0 <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    27f0:	f000 baca 	b.w	2d88 <usb_serial_available>

000027f4 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    27f4:	f000 bb66 	b.w	2ec4 <usb_serial_flush_output>

000027f8 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    27f8:	f000 bb3c 	b.w	2e74 <usb_serial_write_buffer_free>

000027fc <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    27fc:	4608      	mov	r0, r1
    27fe:	4611      	mov	r1, r2
    2800:	f000 bb2c 	b.w	2e5c <usb_serial_write>

00002804 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    2804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    2806:	4c14      	ldr	r4, [pc, #80]	; (2858 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    2808:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    280c:	4e13      	ldr	r6, [pc, #76]	; (285c <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    280e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    2812:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    2816:	4f12      	ldr	r7, [pc, #72]	; (2860 <rx_queue_transfer+0x5c>)
    2818:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
    281c:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    281e:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    2822:	4621      	mov	r1, r4
    2824:	883a      	ldrh	r2, [r7, #0]
    2826:	4630      	mov	r0, r6
    2828:	f7ff ff74 	bl	2714 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    282c:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    282e:	4423      	add	r3, r4
	asm("dsb");
    2830:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    2834:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    2838:	3420      	adds	r4, #32
	} while (location < end_addr);
    283a:	42a3      	cmp	r3, r4
    283c:	d8fa      	bhi.n	2834 <rx_queue_transfer+0x30>
	asm("dsb");
    283e:	f3bf 8f4f 	dsb	sy
	asm("isb");
    2842:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    2846:	2003      	movs	r0, #3
    2848:	4631      	mov	r1, r6
    284a:	f7ff ff8f 	bl	276c <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    284e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    2852:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
    2856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2858:	20200080 	.word	0x20200080
    285c:	20001b00 	.word	0x20001b00
    2860:	20002100 	.word	0x20002100

00002864 <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    2864:	4b24      	ldr	r3, [pc, #144]	; (28f8 <rx_event+0x94>)
{
    2866:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    286a:	881c      	ldrh	r4, [r3, #0]
    286c:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
    286e:	69c5      	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    2870:	f3c3 430e 	ubfx	r3, r3, #16, #15
    2874:	1ae4      	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    2876:	2c00      	cmp	r4, #0
    2878:	dd24      	ble.n	28c4 <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
    287a:	4920      	ldr	r1, [pc, #128]	; (28fc <rx_event+0x98>)
		if (head != rx_tail) {
    287c:	4820      	ldr	r0, [pc, #128]	; (2900 <rx_event+0x9c>)
		uint32_t head = rx_head;
    287e:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    2880:	7800      	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    2882:	b2d3      	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
    2884:	4e1f      	ldr	r6, [pc, #124]	; (2904 <rx_event+0xa0>)
		if (head != rx_tail) {
    2886:	4282      	cmp	r2, r0
			uint32_t ii = rx_list[head];
    2888:	481f      	ldr	r0, [pc, #124]	; (2908 <rx_event+0xa4>)
		if (head != rx_tail) {
    288a:	d007      	beq.n	289c <rx_event+0x38>
			uint32_t ii = rx_list[head];
    288c:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    2890:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    2894:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    2898:	4294      	cmp	r4, r2
    289a:	d918      	bls.n	28ce <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    289c:	3301      	adds	r3, #1
		rx_index[i] = 0;
    289e:	2200      	movs	r2, #0
		rx_count[i] = len;
    28a0:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    28a4:	2b08      	cmp	r3, #8
		rx_index[i] = 0;
    28a6:	4e19      	ldr	r6, [pc, #100]	; (290c <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    28a8:	bf88      	it	hi
    28aa:	4613      	movhi	r3, r2
		rx_index[i] = 0;
    28ac:	f826 2015 	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
    28b0:	bf98      	it	ls
    28b2:	b2da      	uxtbls	r2, r3
		rx_list[head] = i;
    28b4:	54c5      	strb	r5, [r0, r3]
		rx_available += len;
    28b6:	4b16      	ldr	r3, [pc, #88]	; (2910 <rx_event+0xac>)
		rx_head = head;
    28b8:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    28ba:	681a      	ldr	r2, [r3, #0]
    28bc:	4414      	add	r4, r2
    28be:	601c      	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    28c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
    28c4:	4628      	mov	r0, r5
}
    28c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
    28ca:	f7ff bf9b 	b.w	2804 <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    28ce:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    28d2:	4910      	ldr	r1, [pc, #64]	; (2914 <rx_event+0xb0>)
    28d4:	4622      	mov	r2, r4
				rx_count[ii] = count + len;
    28d6:	4427      	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    28d8:	4408      	add	r0, r1
    28da:	eb01 2145 	add.w	r1, r1, r5, lsl #9
    28de:	f7ff f831 	bl	1944 <memcpy>
				rx_available += len;
    28e2:	4a0b      	ldr	r2, [pc, #44]	; (2910 <rx_event+0xac>)
				rx_queue_transfer(i);
    28e4:	4628      	mov	r0, r5
				rx_count[ii] = count + len;
    28e6:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    28ea:	6813      	ldr	r3, [r2, #0]
    28ec:	4423      	add	r3, r4
}
    28ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
    28f2:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
    28f4:	f7ff bf86 	b.w	2804 <rx_queue_transfer>
    28f8:	20002100 	.word	0x20002100
    28fc:	2000210d 	.word	0x2000210d
    2900:	2000210e 	.word	0x2000210e
    2904:	200020a0 	.word	0x200020a0
    2908:	200020c0 	.word	0x200020c0
    290c:	200020b0 	.word	0x200020b0
    2910:	2000209c 	.word	0x2000209c
    2914:	20200080 	.word	0x20200080

00002918 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    2918:	4b1d      	ldr	r3, [pc, #116]	; (2990 <usb_serial_flush_callback+0x78>)
    291a:	781a      	ldrb	r2, [r3, #0]
    291c:	2a00      	cmp	r2, #0
    291e:	d136      	bne.n	298e <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
    2920:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    2924:	4a1b      	ldr	r2, [pc, #108]	; (2994 <usb_serial_flush_callback+0x7c>)
    2926:	7812      	ldrb	r2, [r2, #0]
    2928:	b38a      	cbz	r2, 298e <usb_serial_flush_callback+0x76>
{
    292a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
    292e:	4d1a      	ldr	r5, [pc, #104]	; (2998 <usb_serial_flush_callback+0x80>)
    2930:	882a      	ldrh	r2, [r5, #0]
    2932:	b352      	cbz	r2, 298a <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    2934:	4e19      	ldr	r6, [pc, #100]	; (299c <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    2936:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    293a:	4f19      	ldr	r7, [pc, #100]	; (29a0 <usb_serial_flush_callback+0x88>)
    293c:	7832      	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    293e:	4c19      	ldr	r4, [pc, #100]	; (29a4 <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    2940:	eb07 1742 	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    2944:	eb04 24c2 	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    2948:	4642      	mov	r2, r8
    294a:	4638      	mov	r0, r7
    294c:	4621      	mov	r1, r4
    294e:	f7ff fee1 	bl	2714 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    2952:	eb04 0208 	add.w	r2, r4, r8
	asm("dsb");
    2956:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    295a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    295e:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    2962:	3420      	adds	r4, #32
	} while (location < end_addr);
    2964:	42a2      	cmp	r2, r4
    2966:	d8fa      	bhi.n	295e <usb_serial_flush_callback+0x46>
	asm("dsb");
    2968:	f3bf 8f4f 	dsb	sy
	asm("isb");
    296c:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    2970:	2004      	movs	r0, #4
    2972:	4639      	mov	r1, r7
    2974:	f7ff fee6 	bl	2744 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    2978:	7833      	ldrb	r3, [r6, #0]
    297a:	3301      	adds	r3, #1
    297c:	b2db      	uxtb	r3, r3
    297e:	2b03      	cmp	r3, #3
    2980:	bf88      	it	hi
    2982:	2300      	movhi	r3, #0
    2984:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    2986:	2300      	movs	r3, #0
    2988:	802b      	strh	r3, [r5, #0]
}
    298a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    298e:	4770      	bx	lr
    2990:	20002112 	.word	0x20002112
    2994:	20002114 	.word	0x20002114
    2998:	20002102 	.word	0x20002102
    299c:	20002111 	.word	0x20002111
    29a0:	20001c00 	.word	0x20001c00
    29a4:	20201080 	.word	0x20201080

000029a8 <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
    29a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    29ac:	b085      	sub	sp, #20
	while (size > 0) {
    29ae:	e9cd 1001 	strd	r1, r0, [sp, #4]
    29b2:	2900      	cmp	r1, #0
    29b4:	f000 80bf 	beq.w	2b36 <usb_serial_write.part.0+0x18e>
	uint32_t sent=0;
    29b8:	2300      	movs	r3, #0
    29ba:	4c60      	ldr	r4, [pc, #384]	; (2b3c <usb_serial_write.part.0+0x194>)
    29bc:	f8df 8198 	ldr.w	r8, [pc, #408]	; 2b58 <usb_serial_write.part.0+0x1b0>
    29c0:	f8df a198 	ldr.w	sl, [pc, #408]	; 2b5c <usb_serial_write.part.0+0x1b4>
				wait_begin_at = systick_millis_count;
    29c4:	4f5e      	ldr	r7, [pc, #376]	; (2b40 <usb_serial_write.part.0+0x198>)
	uint32_t sent=0;
    29c6:	9300      	str	r3, [sp, #0]
		tx_noautoflush = 1;
    29c8:	2301      	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    29ca:	4a5e      	ldr	r2, [pc, #376]	; (2b44 <usb_serial_write.part.0+0x19c>)
		tx_noautoflush = 1;
    29cc:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    29ce:	4b5e      	ldr	r3, [pc, #376]	; (2b48 <usb_serial_write.part.0+0x1a0>)
    29d0:	7819      	ldrb	r1, [r3, #0]
		while (!tx_available) {
    29d2:	f8b8 3000 	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
    29d6:	eb02 1941 	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
    29da:	2b00      	cmp	r3, #0
    29dc:	f040 80a7 	bne.w	2b2e <usb_serial_write.part.0+0x186>
		uint32_t wait_begin_at=0;
    29e0:	461e      	mov	r6, r3
		int waiting=0;
    29e2:	461d      	mov	r5, r3
			tx_noautoflush = 0;
    29e4:	469b      	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
    29e6:	4648      	mov	r0, r9
    29e8:	f7ff fece 	bl	2788 <usb_transfer_status>
			if (!(status & 0x80)) {
    29ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    29f0:	f000 808c 	beq.w	2b0c <usb_serial_write.part.0+0x164>
			asm("dsb" ::: "memory");
    29f4:	f3bf 8f4f 	dsb	sy
			if (transmit_previous_timeout) return sent;
    29f8:	f89a 3000 	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
    29fc:	f884 b000 	strb.w	fp, [r4]
			if (!waiting) {
    2a00:	b905      	cbnz	r5, 2a04 <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
    2a02:	683e      	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
    2a04:	2b00      	cmp	r3, #0
    2a06:	d17d      	bne.n	2b04 <usb_serial_write.part.0+0x15c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    2a08:	683b      	ldr	r3, [r7, #0]
    2a0a:	1b9b      	subs	r3, r3, r6
    2a0c:	2b78      	cmp	r3, #120	; 0x78
    2a0e:	f200 8087 	bhi.w	2b20 <usb_serial_write.part.0+0x178>
			if (!usb_configuration) return sent;
    2a12:	4b4e      	ldr	r3, [pc, #312]	; (2b4c <usb_serial_write.part.0+0x1a4>)
    2a14:	781b      	ldrb	r3, [r3, #0]
    2a16:	2b00      	cmp	r3, #0
    2a18:	d074      	beq.n	2b04 <usb_serial_write.part.0+0x15c>
			yield();
    2a1a:	f000 fa9d 	bl	2f58 <yield>
			tx_noautoflush = 1;
    2a1e:	2201      	movs	r2, #1
		while (!tx_available) {
    2a20:	f8b8 3000 	ldrh.w	r3, [r8]
    2a24:	4615      	mov	r5, r2
			tx_noautoflush = 1;
    2a26:	7022      	strb	r2, [r4, #0]
		while (!tx_available) {
    2a28:	2b00      	cmp	r3, #0
    2a2a:	d0dc      	beq.n	29e6 <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    2a2c:	4a46      	ldr	r2, [pc, #280]	; (2b48 <usb_serial_write.part.0+0x1a0>)
    2a2e:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    2a32:	7811      	ldrb	r1, [r2, #0]
    2a34:	461a      	mov	r2, r3
    2a36:	eb00 20c1 	add.w	r0, r0, r1, lsl #11
    2a3a:	4d45      	ldr	r5, [pc, #276]	; (2b50 <usb_serial_write.part.0+0x1a8>)
    2a3c:	02c9      	lsls	r1, r1, #11
    2a3e:	4428      	add	r0, r5
		if (size >= tx_available) {
    2a40:	9d01      	ldr	r5, [sp, #4]
    2a42:	4295      	cmp	r5, r2
    2a44:	d217      	bcs.n	2a76 <usb_serial_write.part.0+0xce>
			memcpy(txdata, data, size);
    2a46:	9303      	str	r3, [sp, #12]
    2a48:	e9dd 5101 	ldrd	r5, r1, [sp, #4]
    2a4c:	462a      	mov	r2, r5
    2a4e:	f7fe ff79 	bl	1944 <memcpy>
			tx_available -= size;
    2a52:	9b03      	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    2a54:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
    2a58:	1b5b      	subs	r3, r3, r5
    2a5a:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    2a5e:	4b3d      	ldr	r3, [pc, #244]	; (2b54 <usb_serial_write.part.0+0x1ac>)
    2a60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
    2a64:	f3bf 8f4f 	dsb	sy
			sent += size;
    2a68:	9800      	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
    2a6a:	2300      	movs	r3, #0
			sent += size;
    2a6c:	4428      	add	r0, r5
		tx_noautoflush = 0;
    2a6e:	7023      	strb	r3, [r4, #0]
}
    2a70:	b005      	add	sp, #20
    2a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    2a76:	4b36      	ldr	r3, [pc, #216]	; (2b50 <usb_serial_write.part.0+0x1a8>)
    2a78:	18cd      	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
    2a7a:	9902      	ldr	r1, [sp, #8]
    2a7c:	f7fe ff62 	bl	1944 <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    2a80:	2300      	movs	r3, #0
    2a82:	f44f 6200 	mov.w	r2, #2048	; 0x800
    2a86:	4629      	mov	r1, r5
    2a88:	4648      	mov	r0, r9
    2a8a:	f7ff fe43 	bl	2714 <usb_prepare_transfer>
	asm("dsb");
    2a8e:	f3bf 8f4f 	dsb	sy
    2a92:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    2a96:	f505 6300 	add.w	r3, r5, #2048	; 0x800
    2a9a:	4293      	cmp	r3, r2
    2a9c:	bf34      	ite	cc
    2a9e:	2301      	movcc	r3, #1
    2aa0:	2340      	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    2aa2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    2aa6:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    2aaa:	f8c2 5f70 	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
    2aae:	3520      	adds	r5, #32
	} while (location < end_addr);
    2ab0:	42ab      	cmp	r3, r5
    2ab2:	d1fa      	bne.n	2aaa <usb_serial_write.part.0+0x102>
	asm("dsb");
    2ab4:	f3bf 8f4f 	dsb	sy
	asm("isb");
    2ab8:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    2abc:	2004      	movs	r0, #4
    2abe:	4649      	mov	r1, r9
    2ac0:	f7ff fe40 	bl	2744 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    2ac4:	4a20      	ldr	r2, [pc, #128]	; (2b48 <usb_serial_write.part.0+0x1a0>)
    2ac6:	7813      	ldrb	r3, [r2, #0]
    2ac8:	3301      	adds	r3, #1
    2aca:	b2db      	uxtb	r3, r3
    2acc:	2b03      	cmp	r3, #3
    2ace:	bf84      	itt	hi
    2ad0:	2300      	movhi	r3, #0
    2ad2:	4a1d      	ldrhi	r2, [pc, #116]	; (2b48 <usb_serial_write.part.0+0x1a0>)
    2ad4:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    2ad6:	f8b8 3000 	ldrh.w	r3, [r8]
    2ada:	9a01      	ldr	r2, [sp, #4]
    2adc:	1ad1      	subs	r1, r2, r3
			sent += tx_available;
    2ade:	9a00      	ldr	r2, [sp, #0]
    2ae0:	441a      	add	r2, r3
			size -= tx_available;
    2ae2:	9101      	str	r1, [sp, #4]
			sent += tx_available;
    2ae4:	9200      	str	r2, [sp, #0]
			data += tx_available;
    2ae6:	9a02      	ldr	r2, [sp, #8]
    2ae8:	441a      	add	r2, r3
			tx_available = 0;
    2aea:	2300      	movs	r3, #0
			data += tx_available;
    2aec:	9202      	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
    2aee:	4a19      	ldr	r2, [pc, #100]	; (2b54 <usb_serial_write.part.0+0x1ac>)
			tx_available = 0;
    2af0:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
    2af4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    2af8:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
    2afc:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
    2afe:	2900      	cmp	r1, #0
    2b00:	f47f af62 	bne.w	29c8 <usb_serial_write.part.0+0x20>
	return sent;
    2b04:	9800      	ldr	r0, [sp, #0]
}
    2b06:	b005      	add	sp, #20
    2b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
    2b0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    2b10:	4b0d      	ldr	r3, [pc, #52]	; (2b48 <usb_serial_write.part.0+0x1a0>)
				transmit_previous_timeout = 0;
    2b12:	f88a 0000 	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    2b16:	7819      	ldrb	r1, [r3, #0]
				break;
    2b18:	4613      	mov	r3, r2
				tx_available = TX_SIZE;
    2b1a:	f8a8 2000 	strh.w	r2, [r8]
				break;
    2b1e:	e78a      	b.n	2a36 <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
    2b20:	2301      	movs	r3, #1
				return sent;
    2b22:	9800      	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
    2b24:	f88a 3000 	strb.w	r3, [sl]
}
    2b28:	b005      	add	sp, #20
    2b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    2b2e:	461a      	mov	r2, r3
    2b30:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    2b34:	e77f      	b.n	2a36 <usb_serial_write.part.0+0x8e>
	while (size > 0) {
    2b36:	9801      	ldr	r0, [sp, #4]
	return sent;
    2b38:	e7e5      	b.n	2b06 <usb_serial_write.part.0+0x15e>
    2b3a:	bf00      	nop
    2b3c:	20002112 	.word	0x20002112
    2b40:	200020e4 	.word	0x200020e4
    2b44:	20001c00 	.word	0x20001c00
    2b48:	20002111 	.word	0x20002111
    2b4c:	20002114 	.word	0x20002114
    2b50:	20201080 	.word	0x20201080
    2b54:	402e0000 	.word	0x402e0000
    2b58:	20002102 	.word	0x20002102
    2b5c:	20002110 	.word	0x20002110

00002b60 <usb_serial_reset>:
}
    2b60:	4770      	bx	lr
    2b62:	bf00      	nop

00002b64 <usb_serial_configure>:
	if (usb_high_speed) {
    2b64:	4b2d      	ldr	r3, [pc, #180]	; (2c1c <usb_serial_configure+0xb8>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    2b66:	2100      	movs	r1, #0
    2b68:	2280      	movs	r2, #128	; 0x80
    2b6a:	482d      	ldr	r0, [pc, #180]	; (2c20 <usb_serial_configure+0xbc>)
{
    2b6c:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    2b6e:	781b      	ldrb	r3, [r3, #0]
	tx_head = 0;
    2b70:	2400      	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    2b72:	4d2c      	ldr	r5, [pc, #176]	; (2c24 <usb_serial_configure+0xc0>)
	if (usb_high_speed) {
    2b74:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
    2b76:	4e2c      	ldr	r6, [pc, #176]	; (2c28 <usb_serial_configure+0xc4>)
	if (usb_high_speed) {
    2b78:	bf0c      	ite	eq
    2b7a:	2340      	moveq	r3, #64	; 0x40
    2b7c:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    2b80:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    2b82:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    2b84:	f001 fc1c 	bl	43c0 <memset>
	tx_head = 0;
    2b88:	4a28      	ldr	r2, [pc, #160]	; (2c2c <usb_serial_configure+0xc8>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    2b8a:	4621      	mov	r1, r4
	tx_available = 0;
    2b8c:	4b28      	ldr	r3, [pc, #160]	; (2c30 <usb_serial_configure+0xcc>)
	tx_head = 0;
    2b8e:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    2b90:	f44f 7280 	mov.w	r2, #256	; 0x100
    2b94:	4827      	ldr	r0, [pc, #156]	; (2c34 <usb_serial_configure+0xd0>)
	tx_available = 0;
    2b96:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    2b98:	f001 fc12 	bl	43c0 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    2b9c:	4a26      	ldr	r2, [pc, #152]	; (2c38 <usb_serial_configure+0xd4>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    2b9e:	2110      	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
    2ba0:	4b26      	ldr	r3, [pc, #152]	; (2c3c <usb_serial_configure+0xd8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    2ba2:	2002      	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
    2ba4:	e9c2 4400 	strd	r4, r4, [r2]
    2ba8:	e9c2 4402 	strd	r4, r4, [r2, #8]
	rx_head = 0;
    2bac:	4a24      	ldr	r2, [pc, #144]	; (2c40 <usb_serial_configure+0xdc>)
	memset(rx_index, 0, sizeof(rx_index));
    2bae:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
    2bb2:	7014      	strb	r4, [r2, #0]
	rx_available = 0;
    2bb4:	4a23      	ldr	r2, [pc, #140]	; (2c44 <usb_serial_configure+0xe0>)
	memset(rx_index, 0, sizeof(rx_index));
    2bb6:	e9c3 4402 	strd	r4, r4, [r3, #8]
	rx_tail = 0;
    2bba:	4b23      	ldr	r3, [pc, #140]	; (2c48 <usb_serial_configure+0xe4>)
    2bbc:	701c      	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    2bbe:	4623      	mov	r3, r4
	rx_available = 0;
    2bc0:	6014      	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    2bc2:	4622      	mov	r2, r4
    2bc4:	f7ff fd74 	bl	26b0 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    2bc8:	4622      	mov	r2, r4
    2bca:	8831      	ldrh	r1, [r6, #0]
    2bcc:	2003      	movs	r0, #3
    2bce:	4b1f      	ldr	r3, [pc, #124]	; (2c4c <usb_serial_configure+0xe8>)
    2bd0:	f7ff fd3c 	bl	264c <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    2bd4:	4623      	mov	r3, r4
    2bd6:	2201      	movs	r2, #1
    2bd8:	8829      	ldrh	r1, [r5, #0]
    2bda:	2004      	movs	r0, #4
    2bdc:	f7ff fd68 	bl	26b0 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    2be0:	4620      	mov	r0, r4
    2be2:	3401      	adds	r4, #1
    2be4:	f7ff fe0e 	bl	2804 <rx_queue_transfer>
    2be8:	2c08      	cmp	r4, #8
    2bea:	d1f9      	bne.n	2be0 <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
    2bec:	4b18      	ldr	r3, [pc, #96]	; (2c50 <usb_serial_configure+0xec>)
    2bee:	2100      	movs	r1, #0
	USB1_GPTIMER0LD = microseconds - 1;
    2bf0:	224a      	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
    2bf2:	4818      	ldr	r0, [pc, #96]	; (2c54 <usb_serial_configure+0xf0>)
    2bf4:	4c18      	ldr	r4, [pc, #96]	; (2c58 <usb_serial_configure+0xf4>)
    2bf6:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    2bf8:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    2bfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    2c00:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    2c04:	4915      	ldr	r1, [pc, #84]	; (2c5c <usb_serial_configure+0xf8>)
	USB1_USBINTR |= USB_USBINTR_TIE0;
    2c06:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    2c0a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    2c0e:	b121      	cbz	r1, 2c1a <usb_serial_configure+0xb6>
    2c10:	4a13      	ldr	r2, [pc, #76]	; (2c60 <usb_serial_configure+0xfc>)
    2c12:	7813      	ldrb	r3, [r2, #0]
    2c14:	f043 0301 	orr.w	r3, r3, #1
    2c18:	7013      	strb	r3, [r2, #0]
}
    2c1a:	bd70      	pop	{r4, r5, r6, pc}
    2c1c:	20002115 	.word	0x20002115
    2c20:	20001c00 	.word	0x20001c00
    2c24:	20002104 	.word	0x20002104
    2c28:	20002100 	.word	0x20002100
    2c2c:	20002111 	.word	0x20002111
    2c30:	20002102 	.word	0x20002102
    2c34:	20001b00 	.word	0x20001b00
    2c38:	200020a0 	.word	0x200020a0
    2c3c:	200020b0 	.word	0x200020b0
    2c40:	2000210d 	.word	0x2000210d
    2c44:	2000209c 	.word	0x2000209c
    2c48:	2000210e 	.word	0x2000210e
    2c4c:	00002865 	.word	0x00002865
    2c50:	402e0000 	.word	0x402e0000
    2c54:	200020f8 	.word	0x200020f8
    2c58:	00002919 	.word	0x00002919
    2c5c:	00000000 	.word	0x00000000
    2c60:	20002117 	.word	0x20002117

00002c64 <usb_serial_read>:
{
    2c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    2c68:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    2c6c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	uint32_t tail = rx_tail;
    2c70:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 2d3c <usb_serial_read+0xd8>
{
    2c74:	b083      	sub	sp, #12
	NVIC_DISABLE_IRQ(IRQ_USB1);
    2c76:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	while (count < size && tail != rx_head) {
    2c7a:	468b      	mov	fp, r1
	uint32_t tail = rx_tail;
    2c7c:	f89a 4000 	ldrb.w	r4, [sl]
	while (count < size && tail != rx_head) {
    2c80:	2900      	cmp	r1, #0
    2c82:	d04f      	beq.n	2d24 <usb_serial_read+0xc0>
    2c84:	4680      	mov	r8, r0
    2c86:	b2e4      	uxtb	r4, r4
	uint32_t count=0;
    2c88:	2700      	movs	r7, #0
		uint32_t avail = rx_count[i] - rx_index[i];
    2c8a:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 2d40 <usb_serial_read+0xdc>
	while (count < size && tail != rx_head) {
    2c8e:	4b26      	ldr	r3, [pc, #152]	; (2d28 <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    2c90:	ebab 0207 	sub.w	r2, fp, r7
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    2c94:	4925      	ldr	r1, [pc, #148]	; (2d2c <usb_serial_read+0xc8>)
	while (count < size && tail != rx_head) {
    2c96:	781b      	ldrb	r3, [r3, #0]
    2c98:	42a3      	cmp	r3, r4
		if (++tail > RX_NUM) tail = 0;
    2c9a:	f104 0401 	add.w	r4, r4, #1
	while (count < size && tail != rx_head) {
    2c9e:	d03f      	beq.n	2d20 <usb_serial_read+0xbc>
		if (++tail > RX_NUM) tail = 0;
    2ca0:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
    2ca2:	4b23      	ldr	r3, [pc, #140]	; (2d30 <usb_serial_read+0xcc>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    2ca4:	4640      	mov	r0, r8
		if (++tail > RX_NUM) tail = 0;
    2ca6:	bf28      	it	cs
    2ca8:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    2caa:	5d1e      	ldrb	r6, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    2cac:	f839 c016 	ldrh.w	ip, [r9, r6, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    2cb0:	eb0c 2346 	add.w	r3, ip, r6, lsl #9
    2cb4:	4419      	add	r1, r3
		uint32_t avail = rx_count[i] - rx_index[i];
    2cb6:	4b1f      	ldr	r3, [pc, #124]	; (2d34 <usb_serial_read+0xd0>)
    2cb8:	f833 5016 	ldrh.w	r5, [r3, r6, lsl #1]
    2cbc:	eba5 050c 	sub.w	r5, r5, ip
		if (avail > len) {
    2cc0:	42aa      	cmp	r2, r5
    2cc2:	d21c      	bcs.n	2cfe <usb_serial_read+0x9a>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    2cc4:	eb0c 2c46 	add.w	ip, ip, r6, lsl #9
    2cc8:	4918      	ldr	r1, [pc, #96]	; (2d2c <usb_serial_read+0xc8>)
			rx_available -= len;
    2cca:	4c1b      	ldr	r4, [pc, #108]	; (2d38 <usb_serial_read+0xd4>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    2ccc:	4461      	add	r1, ip
    2cce:	9201      	str	r2, [sp, #4]
    2cd0:	f7fe fe38 	bl	1944 <memcpy>
			rx_available -= len;
    2cd4:	6821      	ldr	r1, [r4, #0]
			rx_index[i] += len;
    2cd6:	f839 5016 	ldrh.w	r5, [r9, r6, lsl #1]
	return count;
    2cda:	4658      	mov	r0, fp
			rx_index[i] += len;
    2cdc:	9a01      	ldr	r2, [sp, #4]
			rx_available -= len;
    2cde:	eba1 010b 	sub.w	r1, r1, fp
			rx_index[i] += len;
    2ce2:	442a      	add	r2, r5
			rx_available -= len;
    2ce4:	4439      	add	r1, r7
			rx_index[i] += len;
    2ce6:	f829 2016 	strh.w	r2, [r9, r6, lsl #1]
			rx_available -= len;
    2cea:	6021      	str	r1, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
    2cec:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    2cf0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    2cf4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
    2cf8:	b003      	add	sp, #12
    2cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    2cfe:	462a      	mov	r2, r5
			count += avail;
    2d00:	442f      	add	r7, r5
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    2d02:	f7fe fe1f 	bl	1944 <memcpy>
			rx_available -= avail;
    2d06:	490c      	ldr	r1, [pc, #48]	; (2d38 <usb_serial_read+0xd4>)
			rx_tail = tail;
    2d08:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    2d0a:	4630      	mov	r0, r6
			rx_available -= avail;
    2d0c:	680a      	ldr	r2, [r1, #0]
			p += avail;
    2d0e:	44a8      	add	r8, r5
			rx_available -= avail;
    2d10:	1b52      	subs	r2, r2, r5
    2d12:	600a      	str	r2, [r1, #0]
			rx_tail = tail;
    2d14:	f88a 3000 	strb.w	r3, [sl]
			rx_queue_transfer(i);
    2d18:	f7ff fd74 	bl	2804 <rx_queue_transfer>
	while (count < size && tail != rx_head) {
    2d1c:	45bb      	cmp	fp, r7
    2d1e:	d8b6      	bhi.n	2c8e <usb_serial_read+0x2a>
	return count;
    2d20:	4638      	mov	r0, r7
    2d22:	e7e3      	b.n	2cec <usb_serial_read+0x88>
	while (count < size && tail != rx_head) {
    2d24:	4608      	mov	r0, r1
    2d26:	e7e1      	b.n	2cec <usb_serial_read+0x88>
    2d28:	2000210d 	.word	0x2000210d
    2d2c:	20200080 	.word	0x20200080
    2d30:	200020c0 	.word	0x200020c0
    2d34:	200020a0 	.word	0x200020a0
    2d38:	2000209c 	.word	0x2000209c
    2d3c:	2000210e 	.word	0x2000210e
    2d40:	200020b0 	.word	0x200020b0

00002d44 <usb_serial_peekchar>:
	if (tail == rx_head) return -1;
    2d44:	4b0b      	ldr	r3, [pc, #44]	; (2d74 <usb_serial_peekchar+0x30>)
	uint32_t tail = rx_tail;
    2d46:	4a0c      	ldr	r2, [pc, #48]	; (2d78 <usb_serial_peekchar+0x34>)
    2d48:	7812      	ldrb	r2, [r2, #0]
	if (tail == rx_head) return -1;
    2d4a:	7819      	ldrb	r1, [r3, #0]
	uint32_t tail = rx_tail;
    2d4c:	b2d3      	uxtb	r3, r2
	if (tail == rx_head) return -1;
    2d4e:	428a      	cmp	r2, r1
    2d50:	d00d      	beq.n	2d6e <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    2d52:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    2d54:	4809      	ldr	r0, [pc, #36]	; (2d7c <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    2d56:	4a0a      	ldr	r2, [pc, #40]	; (2d80 <usb_serial_peekchar+0x3c>)
	if (++tail > RX_NUM) tail = 0;
    2d58:	2b09      	cmp	r3, #9
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    2d5a:	490a      	ldr	r1, [pc, #40]	; (2d84 <usb_serial_peekchar+0x40>)
	if (++tail > RX_NUM) tail = 0;
    2d5c:	bf28      	it	cs
    2d5e:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    2d60:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    2d62:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    2d66:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    2d6a:	5c58      	ldrb	r0, [r3, r1]
    2d6c:	4770      	bx	lr
	if (tail == rx_head) return -1;
    2d6e:	f04f 30ff 	mov.w	r0, #4294967295
}
    2d72:	4770      	bx	lr
    2d74:	2000210d 	.word	0x2000210d
    2d78:	2000210e 	.word	0x2000210e
    2d7c:	200020c0 	.word	0x200020c0
    2d80:	20200080 	.word	0x20200080
    2d84:	200020b0 	.word	0x200020b0

00002d88 <usb_serial_available>:
	uint32_t n = rx_available;
    2d88:	4b04      	ldr	r3, [pc, #16]	; (2d9c <usb_serial_available+0x14>)
{
    2d8a:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
    2d8c:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
    2d8e:	b10c      	cbz	r4, 2d94 <usb_serial_available+0xc>
}
    2d90:	4620      	mov	r0, r4
    2d92:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
    2d94:	f000 f8e0 	bl	2f58 <yield>
}
    2d98:	4620      	mov	r0, r4
    2d9a:	bd10      	pop	{r4, pc}
    2d9c:	2000209c 	.word	0x2000209c

00002da0 <usb_serial_flush_input>:
{
    2da0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    2da4:	4e14      	ldr	r6, [pc, #80]	; (2df8 <usb_serial_flush_input+0x58>)
	while (tail != rx_head) {
    2da6:	4d15      	ldr	r5, [pc, #84]	; (2dfc <usb_serial_flush_input+0x5c>)
	uint32_t tail = rx_tail;
    2da8:	7833      	ldrb	r3, [r6, #0]
	while (tail != rx_head) {
    2daa:	782a      	ldrb	r2, [r5, #0]
    2dac:	4293      	cmp	r3, r2
    2dae:	d021      	beq.n	2df4 <usb_serial_flush_input+0x54>
    2db0:	b2dc      	uxtb	r4, r3
    2db2:	f8df 9050 	ldr.w	r9, [pc, #80]	; 2e04 <usb_serial_flush_input+0x64>
    2db6:	f8df b050 	ldr.w	fp, [pc, #80]	; 2e08 <usb_serial_flush_input+0x68>
    2dba:	f8df 8050 	ldr.w	r8, [pc, #80]	; 2e0c <usb_serial_flush_input+0x6c>
    2dbe:	4f10      	ldr	r7, [pc, #64]	; (2e00 <usb_serial_flush_input+0x60>)
		if (++tail > RX_NUM) tail = 0;
    2dc0:	3401      	adds	r4, #1
    2dc2:	2c08      	cmp	r4, #8
		rx_tail = tail;
    2dc4:	fa5f fa84 	uxtb.w	sl, r4
		if (++tail > RX_NUM) tail = 0;
    2dc8:	d901      	bls.n	2dce <usb_serial_flush_input+0x2e>
    2dca:	2400      	movs	r4, #0
    2dcc:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    2dce:	f819 0004 	ldrb.w	r0, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    2dd2:	f8db 3000 	ldr.w	r3, [fp]
    2dd6:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
    2dda:	f837 1010 	ldrh.w	r1, [r7, r0, lsl #1]
    2dde:	1a52      	subs	r2, r2, r1
    2de0:	1a9b      	subs	r3, r3, r2
    2de2:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    2de6:	f7ff fd0d 	bl	2804 <rx_queue_transfer>
		rx_tail = tail;
    2dea:	f886 a000 	strb.w	sl, [r6]
	while (tail != rx_head) {
    2dee:	782b      	ldrb	r3, [r5, #0]
    2df0:	42a3      	cmp	r3, r4
    2df2:	d1e5      	bne.n	2dc0 <usb_serial_flush_input+0x20>
}
    2df4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2df8:	2000210e 	.word	0x2000210e
    2dfc:	2000210d 	.word	0x2000210d
    2e00:	200020b0 	.word	0x200020b0
    2e04:	200020c0 	.word	0x200020c0
    2e08:	2000209c 	.word	0x2000209c
    2e0c:	200020a0 	.word	0x200020a0

00002e10 <usb_serial_getchar>:
{
    2e10:	b500      	push	{lr}
    2e12:	b083      	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
    2e14:	2101      	movs	r1, #1
    2e16:	f10d 0007 	add.w	r0, sp, #7
    2e1a:	f7ff ff23 	bl	2c64 <usb_serial_read>
    2e1e:	b120      	cbz	r0, 2e2a <usb_serial_getchar+0x1a>
    2e20:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
    2e24:	b003      	add	sp, #12
    2e26:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
    2e2a:	f04f 30ff 	mov.w	r0, #4294967295
    2e2e:	e7f9      	b.n	2e24 <usb_serial_getchar+0x14>

00002e30 <usb_serial_putchar>:
	if (!usb_configuration) return 0;
    2e30:	4b09      	ldr	r3, [pc, #36]	; (2e58 <usb_serial_putchar+0x28>)
{
    2e32:	b500      	push	{lr}
    2e34:	b083      	sub	sp, #12
	if (!usb_configuration) return 0;
    2e36:	781b      	ldrb	r3, [r3, #0]
{
    2e38:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!usb_configuration) return 0;
    2e3c:	b13b      	cbz	r3, 2e4e <usb_serial_putchar+0x1e>
    2e3e:	2101      	movs	r1, #1
    2e40:	f10d 0007 	add.w	r0, sp, #7
    2e44:	f7ff fdb0 	bl	29a8 <usb_serial_write.part.0>
}
    2e48:	b003      	add	sp, #12
    2e4a:	f85d fb04 	ldr.w	pc, [sp], #4
    2e4e:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    2e52:	b003      	add	sp, #12
    2e54:	f85d fb04 	ldr.w	pc, [sp], #4
    2e58:	20002114 	.word	0x20002114

00002e5c <usb_serial_write>:
	if (!usb_configuration) return 0;
    2e5c:	4b04      	ldr	r3, [pc, #16]	; (2e70 <usb_serial_write+0x14>)
    2e5e:	781b      	ldrb	r3, [r3, #0]
    2e60:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    2e64:	b10b      	cbz	r3, 2e6a <usb_serial_write+0xe>
    2e66:	f7ff bd9f 	b.w	29a8 <usb_serial_write.part.0>
}
    2e6a:	4610      	mov	r0, r2
    2e6c:	4770      	bx	lr
    2e6e:	bf00      	nop
    2e70:	20002114 	.word	0x20002114

00002e74 <usb_serial_write_buffer_free>:
{
    2e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    2e78:	2400      	movs	r4, #0
	tx_noautoflush = 1;
    2e7a:	f8df 8044 	ldr.w	r8, [pc, #68]	; 2ec0 <usb_serial_write_buffer_free+0x4c>
    2e7e:	2301      	movs	r3, #1
    2e80:	4d0d      	ldr	r5, [pc, #52]	; (2eb8 <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    2e82:	4627      	mov	r7, r4
    2e84:	4e0d      	ldr	r6, [pc, #52]	; (2ebc <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
    2e86:	f888 3000 	strb.w	r3, [r8]
		if (i == tx_head) continue;
    2e8a:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    2e8c:	4628      	mov	r0, r5
	for (uint32_t i=0; i < TX_NUM; i++) {
    2e8e:	3520      	adds	r5, #32
		if (i == tx_head) continue;
    2e90:	42a3      	cmp	r3, r4
	for (uint32_t i=0; i < TX_NUM; i++) {
    2e92:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    2e96:	d005      	beq.n	2ea4 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    2e98:	f7ff fc76 	bl	2788 <usb_transfer_status>
    2e9c:	0603      	lsls	r3, r0, #24
    2e9e:	bf58      	it	pl
    2ea0:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    2ea4:	2c04      	cmp	r4, #4
    2ea6:	d1f0      	bne.n	2e8a <usb_serial_write_buffer_free+0x16>
	asm("dsb" ::: "memory");
    2ea8:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    2eac:	2300      	movs	r3, #0
}
    2eae:	4638      	mov	r0, r7
	tx_noautoflush = 0;
    2eb0:	f888 3000 	strb.w	r3, [r8]
}
    2eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2eb8:	20001c00 	.word	0x20001c00
    2ebc:	20002111 	.word	0x20002111
    2ec0:	20002112 	.word	0x20002112

00002ec4 <usb_serial_flush_output>:
{
    2ec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    2ec8:	4b1d      	ldr	r3, [pc, #116]	; (2f40 <usb_serial_flush_output+0x7c>)
    2eca:	781b      	ldrb	r3, [r3, #0]
    2ecc:	b113      	cbz	r3, 2ed4 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    2ece:	4d1d      	ldr	r5, [pc, #116]	; (2f44 <usb_serial_flush_output+0x80>)
    2ed0:	882a      	ldrh	r2, [r5, #0]
    2ed2:	b90a      	cbnz	r2, 2ed8 <usb_serial_flush_output+0x14>
}
    2ed4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	transfer_t *xfer = tx_transfer + tx_head;
    2ed8:	4e1b      	ldr	r6, [pc, #108]	; (2f48 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    2eda:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    2ede:	491b      	ldr	r1, [pc, #108]	; (2f4c <usb_serial_flush_output+0x88>)
    2ee0:	7833      	ldrb	r3, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    2ee2:	464a      	mov	r2, r9
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    2ee4:	4c1a      	ldr	r4, [pc, #104]	; (2f50 <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    2ee6:	eb01 1843 	add.w	r8, r1, r3, lsl #5
	tx_noautoflush = 1;
    2eea:	4f1a      	ldr	r7, [pc, #104]	; (2f54 <usb_serial_flush_output+0x90>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    2eec:	eb04 24c3 	add.w	r4, r4, r3, lsl #11
	tx_noautoflush = 1;
    2ef0:	2301      	movs	r3, #1
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    2ef2:	4640      	mov	r0, r8
	tx_noautoflush = 1;
    2ef4:	703b      	strb	r3, [r7, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    2ef6:	4621      	mov	r1, r4
    2ef8:	2300      	movs	r3, #0
    2efa:	f7ff fc0b 	bl	2714 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    2efe:	eb04 0209 	add.w	r2, r4, r9
	asm("dsb");
    2f02:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    2f06:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    2f0a:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    2f0e:	3420      	adds	r4, #32
	} while (location < end_addr);
    2f10:	42a2      	cmp	r2, r4
    2f12:	d8fa      	bhi.n	2f0a <usb_serial_flush_output+0x46>
	asm("dsb");
    2f14:	f3bf 8f4f 	dsb	sy
	asm("isb");
    2f18:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    2f1c:	2004      	movs	r0, #4
    2f1e:	4641      	mov	r1, r8
    2f20:	f7ff fc10 	bl	2744 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    2f24:	7833      	ldrb	r3, [r6, #0]
    2f26:	3301      	adds	r3, #1
    2f28:	b2db      	uxtb	r3, r3
    2f2a:	2b03      	cmp	r3, #3
    2f2c:	bf88      	it	hi
    2f2e:	2300      	movhi	r3, #0
    2f30:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    2f32:	2300      	movs	r3, #0
    2f34:	802b      	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
    2f36:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    2f3a:	703b      	strb	r3, [r7, #0]
}
    2f3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2f40:	20002114 	.word	0x20002114
    2f44:	20002102 	.word	0x20002102
    2f48:	20002111 	.word	0x20002111
    2f4c:	20001c00 	.word	0x20001c00
    2f50:	20201080 	.word	0x20201080
    2f54:	20002112 	.word	0x20002112

00002f58 <yield>:
uint8_t yield_active_check_flags = 0;


void yield(void) __attribute__ ((weak));
void yield(void)
{
    2f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t check_flags = yield_active_check_flags;
    2f5c:	4b2d      	ldr	r3, [pc, #180]	; (3014 <yield+0xbc>)
    2f5e:	781e      	ldrb	r6, [r3, #0]
	if (!check_flags) return;	// nothing to do
    2f60:	b166      	cbz	r6, 2f7c <yield+0x24>

	// TODO: do nothing if called from interrupt

	static uint8_t running=0;
	if (running) return; // TODO: does this need to be atomic?
    2f62:	4f2d      	ldr	r7, [pc, #180]	; (3018 <yield+0xc0>)
    2f64:	783b      	ldrb	r3, [r7, #0]
    2f66:	b94b      	cbnz	r3, 2f7c <yield+0x24>
	running = 1;
    2f68:	2301      	movs	r3, #1

	// USB Serial - Add hack to minimize impact...
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    2f6a:	07f1      	lsls	r1, r6, #31
	running = 1;
    2f6c:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    2f6e:	d443      	bmi.n	2ff8 <yield+0xa0>
		if (SerialUSB2.available()) serialEventUSB2();
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    2f70:	07b2      	lsls	r2, r6, #30
    2f72:	d426      	bmi.n	2fc2 <yield+0x6a>
		HardwareSerialIMXRT::processSerialEventsList();
	}

	running = 0;
    2f74:	2300      	movs	r3, #0
    2f76:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_EVENT_RESPONDER) {
    2f78:	0773      	lsls	r3, r6, #29
    2f7a:	d401      	bmi.n	2f80 <yield+0x28>
		EventResponder::runFromYield();
	}
};
    2f7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    2f80:	4b26      	ldr	r3, [pc, #152]	; (301c <yield+0xc4>)
    2f82:	681a      	ldr	r2, [r3, #0]
    2f84:	2a00      	cmp	r2, #0
    2f86:	d0f9      	beq.n	2f7c <yield+0x24>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    2f88:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    2f8c:	2a00      	cmp	r2, #0
    2f8e:	d1f5      	bne.n	2f7c <yield+0x24>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    2f90:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    2f94:	b672      	cpsid	i
		EventResponder *first = firstYield;
    2f96:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    2f98:	2800      	cmp	r0, #0
    2f9a:	d034      	beq.n	3006 <yield+0xae>
		if (runningFromYield) {
    2f9c:	4c20      	ldr	r4, [pc, #128]	; (3020 <yield+0xc8>)
    2f9e:	7821      	ldrb	r1, [r4, #0]
    2fa0:	2900      	cmp	r1, #0
    2fa2:	d130      	bne.n	3006 <yield+0xae>
		runningFromYield = true;
    2fa4:	2201      	movs	r2, #1
    2fa6:	7022      	strb	r2, [r4, #0]
		firstYield = first->_next;
    2fa8:	6942      	ldr	r2, [r0, #20]
    2faa:	601a      	str	r2, [r3, #0]
		if (firstYield) {
    2fac:	2a00      	cmp	r2, #0
    2fae:	d02e      	beq.n	300e <yield+0xb6>
			firstYield->_prev = nullptr;
    2fb0:	6191      	str	r1, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    2fb2:	b905      	cbnz	r5, 2fb6 <yield+0x5e>
    2fb4:	b662      	cpsie	i
		first->_triggered = false;
    2fb6:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    2fb8:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    2fba:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    2fbc:	4798      	blx	r3
		runningFromYield = false;
    2fbe:	7025      	strb	r5, [r4, #0]
    2fc0:	e7dc      	b.n	2f7c <yield+0x24>

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    2fc2:	f8df 8064 	ldr.w	r8, [pc, #100]	; 3028 <yield+0xd0>
    2fc6:	f898 3000 	ldrb.w	r3, [r8]
    2fca:	2b00      	cmp	r3, #0
    2fcc:	d0d2      	beq.n	2f74 <yield+0x1c>
    2fce:	2500      	movs	r5, #0
    2fd0:	f8df 9058 	ldr.w	r9, [pc, #88]	; 302c <yield+0xd4>
    2fd4:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    2fd6:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    2fda:	3501      	adds	r5, #1
	static HardwareSerialIMXRT 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    2fdc:	6823      	ldr	r3, [r4, #0]
    2fde:	4620      	mov	r0, r4
    2fe0:	691b      	ldr	r3, [r3, #16]
    2fe2:	4798      	blx	r3
    2fe4:	b110      	cbz	r0, 2fec <yield+0x94>
    2fe6:	6963      	ldr	r3, [r4, #20]
    2fe8:	689b      	ldr	r3, [r3, #8]
    2fea:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    2fec:	f898 2000 	ldrb.w	r2, [r8]
    2ff0:	b2eb      	uxtb	r3, r5
    2ff2:	429a      	cmp	r2, r3
    2ff4:	d8ef      	bhi.n	2fd6 <yield+0x7e>
    2ff6:	e7bd      	b.n	2f74 <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    2ff8:	f7ff fec6 	bl	2d88 <usb_serial_available>
		if (Serial.available()) serialEvent();
    2ffc:	2800      	cmp	r0, #0
    2ffe:	d0b7      	beq.n	2f70 <yield+0x18>
    3000:	f3af 8000 	nop.w
    3004:	e7b4      	b.n	2f70 <yield+0x18>
		if (doit) __enable_irq();
    3006:	2d00      	cmp	r5, #0
    3008:	d1b8      	bne.n	2f7c <yield+0x24>
    300a:	b662      	cpsie	i
    300c:	e7b6      	b.n	2f7c <yield+0x24>
			lastYield = nullptr;
    300e:	4b05      	ldr	r3, [pc, #20]	; (3024 <yield+0xcc>)
    3010:	601a      	str	r2, [r3, #0]
    3012:	e7ce      	b.n	2fb2 <yield+0x5a>
    3014:	20002117 	.word	0x20002117
    3018:	2000210a 	.word	0x2000210a
    301c:	20001d04 	.word	0x20001d04
    3020:	20002108 	.word	0x20002108
    3024:	20001d10 	.word	0x20001d10
    3028:	20002109 	.word	0x20002109
    302c:	20001d14 	.word	0x20001d14

00003030 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    3030:	b570      	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3032:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    3036:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    3038:	4c0c      	ldr	r4, [pc, #48]	; (306c <EventResponder::runFromInterrupt()+0x3c>)
    303a:	6820      	ldr	r0, [r4, #0]
		if (first) {
    303c:	b180      	cbz	r0, 3060 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    303e:	4e0c      	ldr	r6, [pc, #48]	; (3070 <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    3040:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    3042:	6943      	ldr	r3, [r0, #20]
    3044:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    3046:	b173      	cbz	r3, 3066 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    3048:	619d      	str	r5, [r3, #24]
		if (doit) __enable_irq();
    304a:	b902      	cbnz	r2, 304e <EventResponder::runFromInterrupt()+0x1e>
    304c:	b662      	cpsie	i
			}
			enableInterrupts(irq);
			first->_triggered = false;
			(*(first->_function))(*first);
    304e:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    3050:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    3052:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3054:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    3058:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    305a:	6820      	ldr	r0, [r4, #0]
		if (first) {
    305c:	2800      	cmp	r0, #0
    305e:	d1f0      	bne.n	3042 <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    3060:	b902      	cbnz	r2, 3064 <EventResponder::runFromInterrupt()+0x34>
    3062:	b662      	cpsie	i
		} else {
			enableInterrupts(irq);
			break;
		}
	}
}
    3064:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    3066:	6033      	str	r3, [r6, #0]
    3068:	e7ef      	b.n	304a <EventResponder::runFromInterrupt()+0x1a>
    306a:	bf00      	nop
    306c:	20001d0c 	.word	0x20001d0c
    3070:	20001d08 	.word	0x20001d08

00003074 <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    3074:	f7ff bfdc 	b.w	3030 <EventResponder::runFromInterrupt()>

00003078 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    3078:	4904      	ldr	r1, [pc, #16]	; (308c <systick_isr+0x14>)
	systick_millis_count++;
    307a:	4a05      	ldr	r2, [pc, #20]	; (3090 <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
    307c:	6849      	ldr	r1, [r1, #4]
    307e:	4b05      	ldr	r3, [pc, #20]	; (3094 <systick_isr+0x1c>)
    3080:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    3082:	6813      	ldr	r3, [r2, #0]
    3084:	3301      	adds	r3, #1
    3086:	6013      	str	r3, [r2, #0]
}
    3088:	4770      	bx	lr
    308a:	bf00      	nop
    308c:	e0001000 	.word	0xe0001000
    3090:	200020e4 	.word	0x200020e4
    3094:	200020e0 	.word	0x200020e0

00003098 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    3098:	49a2      	ldr	r1, [pc, #648]	; (3324 <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    309a:	4ba3      	ldr	r3, [pc, #652]	; (3328 <set_arm_clock+0x290>)
	if (frequency > 528000000) {
    309c:	4288      	cmp	r0, r1
{
    309e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
    30a2:	4ca2      	ldr	r4, [pc, #648]	; (332c <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    30a4:	695e      	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    30a6:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    30a8:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
    30ac:	d91b      	bls.n	30e6 <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    30ae:	4ba0      	ldr	r3, [pc, #640]	; (3330 <set_arm_clock+0x298>)
    30b0:	4298      	cmp	r0, r3
    30b2:	f240 8102 	bls.w	32ba <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    30b6:	1ac3      	subs	r3, r0, r3
    30b8:	499e      	ldr	r1, [pc, #632]	; (3334 <set_arm_clock+0x29c>)
    30ba:	0a1b      	lsrs	r3, r3, #8
    30bc:	fba1 1303 	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    30c0:	f240 6127 	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    30c4:	09db      	lsrs	r3, r3, #7
    30c6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    30ca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    30ce:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    30d2:	428b      	cmp	r3, r1
    30d4:	bf28      	it	cs
    30d6:	460b      	movcs	r3, r1
    30d8:	f5a3 7748 	sub.w	r7, r3, #800	; 0x320
    30dc:	4b96      	ldr	r3, [pc, #600]	; (3338 <set_arm_clock+0x2a0>)
    30de:	fba3 3707 	umull	r3, r7, r3, r7
    30e2:	08ff      	lsrs	r7, r7, #3
    30e4:	e004      	b.n	30f0 <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
    30e6:	4f95      	ldr	r7, [pc, #596]	; (333c <set_arm_clock+0x2a4>)
    30e8:	42b8      	cmp	r0, r7
    30ea:	bf8c      	ite	hi
    30ec:	270e      	movhi	r7, #14
    30ee:	2706      	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    30f0:	498d      	ldr	r1, [pc, #564]	; (3328 <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    30f2:	f008 091f 	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    30f6:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    30fa:	45b9      	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    30fc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    3100:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    3104:	d20c      	bcs.n	3120 <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    3106:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    310a:	f5a1 21f8 	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    310e:	ea48 0807 	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
    3112:	f8c1 800c 	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    3116:	680b      	ldr	r3, [r1, #0]
    3118:	2b00      	cmp	r3, #0
    311a:	dafc      	bge.n	3116 <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    311c:	f008 091f 	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    3120:	f016 7300 	ands.w	r3, r6, #33554432	; 0x2000000
    3124:	d124      	bne.n	3170 <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    3126:	4986      	ldr	r1, [pc, #536]	; (3340 <set_arm_clock+0x2a8>)
    3128:	690c      	ldr	r4, [r1, #16]
    312a:	4986      	ldr	r1, [pc, #536]	; (3344 <set_arm_clock+0x2ac>)
    312c:	43a1      	bics	r1, r4
    312e:	f000 80ea 	beq.w	3306 <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    3132:	f482 5180 	eor.w	r1, r2, #4096	; 0x1000
    3136:	4634      	mov	r4, r6
    3138:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    313c:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    3140:	d004      	beq.n	314c <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    3142:	f026 5660 	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    3146:	431e      	orrs	r6, r3
			CCM_CBCDR = cbcdr;
    3148:	4b77      	ldr	r3, [pc, #476]	; (3328 <set_arm_clock+0x290>)
    314a:	615e      	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    314c:	f411 5f40 	tst.w	r1, #12288	; 0x3000
    3150:	d007      	beq.n	3162 <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    3152:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
    3156:	4974      	ldr	r1, [pc, #464]	; (3328 <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    3158:	432a      	orrs	r2, r5
			CCM_CBCMR = cbcmr;
    315a:	618a      	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    315c:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    315e:	071a      	lsls	r2, r3, #28
    3160:	d4fc      	bmi.n	315c <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    3162:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    3166:	4a70      	ldr	r2, [pc, #448]	; (3328 <set_arm_clock+0x290>)
    3168:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    316a:	6c93      	ldr	r3, [r2, #72]	; 0x48
    316c:	069b      	lsls	r3, r3, #26
    316e:	d4fc      	bmi.n	316a <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
    3170:	4c75      	ldr	r4, [pc, #468]	; (3348 <set_arm_clock+0x2b0>)
    3172:	42a0      	cmp	r0, r4
    3174:	f200 80ce 	bhi.w	3314 <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
    3178:	f04f 0c01 	mov.w	ip, #1
    317c:	4601      	mov	r1, r0
	uint32_t div_arm = 1;
    317e:	4663      	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
    3180:	fb03 1201 	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
    3184:	f103 0e01 	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
    3188:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    318c:	42a2      	cmp	r2, r4
    318e:	d818      	bhi.n	31c2 <set_arm_clock+0x12a>
		if (div_arm < 8) {
    3190:	f1be 0f08 	cmp.w	lr, #8
				div_arm = 1;
    3194:	f04f 0301 	mov.w	r3, #1
		if (div_arm < 8) {
    3198:	f040 808d 	bne.w	32b6 <set_arm_clock+0x21e>
			if (div_ahb < 5) {
    319c:	f1bc 0f04 	cmp.w	ip, #4
    31a0:	f200 8091 	bhi.w	32c6 <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
    31a4:	180a      	adds	r2, r1, r0
    31a6:	42a2      	cmp	r2, r4
    31a8:	f200 80a4 	bhi.w	32f4 <set_arm_clock+0x25c>
    31ac:	fb05 f100 	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
    31b0:	46ac      	mov	ip, r5
			div_arm = div_arm + 1;
    31b2:	f103 0e01 	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    31b6:	fb03 1201 	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
    31ba:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    31be:	42a2      	cmp	r2, r4
    31c0:	d9e6      	bls.n	3190 <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    31c2:	f10c 31ff 	add.w	r1, ip, #4294967295
    31c6:	028c      	lsls	r4, r1, #10
    31c8:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    31cc:	485f      	ldr	r0, [pc, #380]	; (334c <set_arm_clock+0x2b4>)
    31ce:	4410      	add	r0, r2
	if (mult > 108) mult = 108;
    31d0:	4a5f      	ldr	r2, [pc, #380]	; (3350 <set_arm_clock+0x2b8>)
    31d2:	4290      	cmp	r0, r2
    31d4:	d97f      	bls.n	32d6 <set_arm_clock+0x23e>
    31d6:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 337c <set_arm_clock+0x2e4>
    31da:	226c      	movs	r2, #108	; 0x6c
    31dc:	485d      	ldr	r0, [pc, #372]	; (3354 <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    31de:	4d58      	ldr	r5, [pc, #352]	; (3340 <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    31e0:	fbb0 f0fe 	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    31e4:	f8d5 e000 	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
    31e8:	fbb0 f0fc 	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    31ec:	f8df c190 	ldr.w	ip, [pc, #400]	; 3380 <set_arm_clock+0x2e8>
    31f0:	ea0e 0c0c 	and.w	ip, lr, ip
    31f4:	45d4      	cmp	ip, sl
    31f6:	d009      	beq.n	320c <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    31f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    31fc:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    3200:	f8c5 c000 	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    3204:	602a      	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    3206:	682a      	ldr	r2, [r5, #0]
    3208:	2a00      	cmp	r2, #0
    320a:	dafc      	bge.n	3206 <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    320c:	4a46      	ldr	r2, [pc, #280]	; (3328 <set_arm_clock+0x290>)
    320e:	6915      	ldr	r5, [r2, #16]
    3210:	f005 0507 	and.w	r5, r5, #7
    3214:	429d      	cmp	r5, r3
    3216:	d003      	beq.n	3220 <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    3218:	6113      	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    321a:	6c93      	ldr	r3, [r2, #72]	; 0x48
    321c:	03dd      	lsls	r5, r3, #15
    321e:	d4fc      	bmi.n	321a <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    3220:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
    3224:	d009      	beq.n	323a <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    3226:	f426 56e0 	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    322a:	f404 54e0 	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
    322e:	4a3e      	ldr	r2, [pc, #248]	; (3328 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    3230:	4326      	orrs	r6, r4
		CCM_CBCDR = cbcdr;
    3232:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    3234:	6c93      	ldr	r3, [r2, #72]	; 0x48
    3236:	0799      	lsls	r1, r3, #30
    3238:	d4fc      	bmi.n	3234 <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    323a:	4947      	ldr	r1, [pc, #284]	; (3358 <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
    323c:	4a47      	ldr	r2, [pc, #284]	; (335c <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    323e:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    3240:	4291      	cmp	r1, r2
    3242:	d83c      	bhi.n	32be <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    3244:	4b46      	ldr	r3, [pc, #280]	; (3360 <set_arm_clock+0x2c8>)
    3246:	09c9      	lsrs	r1, r1, #7
    3248:	fba3 3101 	umull	r3, r1, r3, r1
    324c:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    324e:	1e4b      	subs	r3, r1, #1
    3250:	021b      	lsls	r3, r3, #8
    3252:	ea86 0203 	eor.w	r2, r6, r3
    3256:	f412 7f40 	tst.w	r2, #768	; 0x300
    325a:	d006      	beq.n	326a <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    325c:	f426 7640 	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    3260:	f403 7340 	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
    3264:	4a30      	ldr	r2, [pc, #192]	; (3328 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    3266:	4333      	orrs	r3, r6
		CCM_CBCDR = cbcdr;
    3268:	6153      	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    326a:	4a2f      	ldr	r2, [pc, #188]	; (3328 <set_arm_clock+0x290>)
    326c:	6953      	ldr	r3, [r2, #20]
    326e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
    3272:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    3274:	6c93      	ldr	r3, [r2, #72]	; 0x48
    3276:	069b      	lsls	r3, r3, #26
    3278:	d4fc      	bmi.n	3274 <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    327a:	4b3a      	ldr	r3, [pc, #232]	; (3364 <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    327c:	454f      	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    327e:	fba3 2300 	umull	r2, r3, r3, r0
    3282:	f04f 32ff 	mov.w	r2, #4294967295
    3286:	ea4f 4393 	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
    328a:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    328e:	fbb2 f3f3 	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
    3292:	4a35      	ldr	r2, [pc, #212]	; (3368 <set_arm_clock+0x2d0>)
    3294:	6010      	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    3296:	4a35      	ldr	r2, [pc, #212]	; (336c <set_arm_clock+0x2d4>)
    3298:	6011      	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    329a:	4a35      	ldr	r2, [pc, #212]	; (3370 <set_arm_clock+0x2d8>)
    329c:	6013      	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    329e:	d208      	bcs.n	32b2 <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    32a0:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    32a4:	4a21      	ldr	r2, [pc, #132]	; (332c <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    32a6:	ea48 0707 	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
    32aa:	60d7      	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    32ac:	6813      	ldr	r3, [r2, #0]
    32ae:	2b00      	cmp	r3, #0
    32b0:	dafc      	bge.n	32ac <set_arm_clock+0x214>
	}

	return frequency;
}
    32b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    32b6:	4673      	mov	r3, lr
    32b8:	e762      	b.n	3180 <set_arm_clock+0xe8>
    32ba:	2712      	movs	r7, #18
    32bc:	e718      	b.n	30f0 <set_arm_clock+0x58>
    32be:	f44f 7340 	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
    32c2:	2104      	movs	r1, #4
    32c4:	e7c5      	b.n	3252 <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    32c6:	f10c 31ff 	add.w	r1, ip, #4294967295
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    32ca:	4820      	ldr	r0, [pc, #128]	; (334c <set_arm_clock+0x2b4>)
    32cc:	2307      	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    32ce:	028c      	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    32d0:	4410      	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    32d2:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    32d6:	4a27      	ldr	r2, [pc, #156]	; (3374 <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    32d8:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 3384 <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    32dc:	fba2 2000 	umull	r2, r0, r2, r0
    32e0:	0d02      	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
    32e2:	4825      	ldr	r0, [pc, #148]	; (3378 <set_arm_clock+0x2e0>)
    32e4:	2a36      	cmp	r2, #54	; 0x36
    32e6:	bf38      	it	cc
    32e8:	2236      	movcc	r2, #54	; 0x36
    32ea:	fb02 f000 	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    32ee:	ea42 0a0a 	orr.w	sl, r2, sl
    32f2:	e774      	b.n	31de <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    32f4:	ea4f 248c 	mov.w	r4, ip, lsl #10
    32f8:	2300      	movs	r3, #0
    32fa:	ea86 218c 	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
    32fe:	f04f 0e01 	mov.w	lr, #1
				div_ahb = div_ahb + 1;
    3302:	46ac      	mov	ip, r5
    3304:	e762      	b.n	31cc <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    3306:	461d      	mov	r5, r3
    3308:	f086 54c0 	eor.w	r4, r6, #402653184	; 0x18000000
    330c:	4611      	mov	r1, r2
    330e:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
    3312:	e713      	b.n	313c <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
    3314:	2400      	movs	r4, #0
	uint32_t div_ahb = 1;
    3316:	f04f 0c01 	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    331a:	4602      	mov	r2, r0
    331c:	4631      	mov	r1, r6
    331e:	4623      	mov	r3, r4
	uint32_t div_arm = 1;
    3320:	46e6      	mov	lr, ip
    3322:	e753      	b.n	31cc <set_arm_clock+0x134>
    3324:	1f78a400 	.word	0x1f78a400
    3328:	400fc000 	.word	0x400fc000
    332c:	40080000 	.word	0x40080000
    3330:	23c34600 	.word	0x23c34600
    3334:	004cb223 	.word	0x004cb223
    3338:	51eb851f 	.word	0x51eb851f
    333c:	016e3600 	.word	0x016e3600
    3340:	400d8000 	.word	0x400d8000
    3344:	80003040 	.word	0x80003040
    3348:	269fb1ff 	.word	0x269fb1ff
    334c:	005b8d80 	.word	0x005b8d80
    3350:	4df67eff 	.word	0x4df67eff
    3354:	4d3f6400 	.word	0x4d3f6400
    3358:	08f0d17f 	.word	0x08f0d17f
    335c:	2cb4177f 	.word	0x2cb4177f
    3360:	00e5109f 	.word	0x00e5109f
    3364:	431bde83 	.word	0x431bde83
    3368:	20001014 	.word	0x20001014
    336c:	20001010 	.word	0x20001010
    3370:	200020dc 	.word	0x200020dc
    3374:	165e9f81 	.word	0x165e9f81
    3378:	00b71b00 	.word	0x00b71b00
    337c:	8000206c 	.word	0x8000206c
    3380:	8001307f 	.word	0x8001307f
    3384:	80002000 	.word	0x80002000

00003388 <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    3388:	4a07      	ldr	r2, [pc, #28]	; (33a8 <rtc_get+0x20>)
    338a:	6a50      	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    338c:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uint32_t hi2 = SNVS_HPRTCMR;
    338e:	4619      	mov	r1, r3
    3390:	4684      	mov	ip, r0
    3392:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    3394:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    3396:	4299      	cmp	r1, r3
    3398:	d1f9      	bne.n	338e <rtc_get+0x6>
    339a:	4584      	cmp	ip, r0
    339c:	d1f7      	bne.n	338e <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
    339e:	0bdb      	lsrs	r3, r3, #15
}
    33a0:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    33a4:	4770      	bx	lr
    33a6:	bf00      	nop
    33a8:	400d4000 	.word	0x400d4000

000033ac <sm_align_pool>:
{
    33ac:	b508      	push	{r3, lr}
	x = spool->pool_size % HEADER_SZ;
    33ae:	e9d0 3200 	ldrd	r3, r2, [r0]
	if (!spool->pool || !spool->pool_size) return 0;
    33b2:	b15b      	cbz	r3, 33cc <sm_align_pool+0x20>
    33b4:	b1ba      	cbz	r2, 33e6 <sm_align_pool+0x3a>
	if (spool->pool_size % HEADER_SZ) return 0;
    33b6:	4b0f      	ldr	r3, [pc, #60]	; (33f4 <sm_align_pool+0x48>)
    33b8:	fba3 1302 	umull	r1, r3, r3, r2
    33bc:	08db      	lsrs	r3, r3, #3
    33be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    33c2:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    33c6:	d10a      	bne.n	33de <sm_align_pool+0x32>
	if (smalloc_verify_pool(spool)) return 1;
    33c8:	2001      	movs	r0, #1
}
    33ca:	bd08      	pop	{r3, pc}
	x = spool->pool_size % HEADER_SZ;
    33cc:	4b09      	ldr	r3, [pc, #36]	; (33f4 <sm_align_pool+0x48>)
    33ce:	fba3 1302 	umull	r1, r3, r3, r2
    33d2:	08db      	lsrs	r3, r3, #3
    33d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
    33d8:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    33dc:	d001      	beq.n	33e2 <sm_align_pool+0x36>
    33de:	1ad2      	subs	r2, r2, r3
    33e0:	6042      	str	r2, [r0, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    33e2:	2af0      	cmp	r2, #240	; 0xf0
    33e4:	d8f0      	bhi.n	33c8 <sm_align_pool+0x1c>
		errno = ENOSPC;
    33e6:	f001 f921 	bl	462c <__errno>
    33ea:	221c      	movs	r2, #28
    33ec:	4603      	mov	r3, r0
    33ee:	2000      	movs	r0, #0
    33f0:	601a      	str	r2, [r3, #0]
}
    33f2:	bd08      	pop	{r3, pc}
    33f4:	aaaaaaab 	.word	0xaaaaaaab

000033f8 <sm_set_pool>:
{
    33f8:	b570      	push	{r4, r5, r6, lr}
	if (!spool) {
    33fa:	4604      	mov	r4, r0
    33fc:	b338      	cbz	r0, 344e <sm_set_pool+0x56>
	if (!new_pool || !new_pool_size) {
    33fe:	b119      	cbz	r1, 3408 <sm_set_pool+0x10>
    3400:	fab2 f682 	clz	r6, r2
    3404:	0976      	lsrs	r6, r6, #5
    3406:	b9a2      	cbnz	r2, 3432 <sm_set_pool+0x3a>
	if (!spool->pool || !spool->pool_size) return 0;
    3408:	6820      	ldr	r0, [r4, #0]
    340a:	b300      	cbz	r0, 344e <sm_set_pool+0x56>
    340c:	6862      	ldr	r2, [r4, #4]
    340e:	b1f2      	cbz	r2, 344e <sm_set_pool+0x56>
	if (spool->pool_size % HEADER_SZ) return 0;
    3410:	4b18      	ldr	r3, [pc, #96]	; (3474 <sm_set_pool+0x7c>)
    3412:	4919      	ldr	r1, [pc, #100]	; (3478 <sm_set_pool+0x80>)
    3414:	fb02 f303 	mul.w	r3, r2, r3
    3418:	ebb1 0fb3 	cmp.w	r1, r3, ror #2
    341c:	d317      	bcc.n	344e <sm_set_pool+0x56>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    341e:	68a3      	ldr	r3, [r4, #8]
    3420:	b9e3      	cbnz	r3, 345c <sm_set_pool+0x64>
			memset(spool, 0, sizeof(struct smalloc_pool));
    3422:	2200      	movs	r2, #0
			return 1;
    3424:	2301      	movs	r3, #1
			memset(spool, 0, sizeof(struct smalloc_pool));
    3426:	6022      	str	r2, [r4, #0]
    3428:	6062      	str	r2, [r4, #4]
    342a:	60a2      	str	r2, [r4, #8]
    342c:	60e2      	str	r2, [r4, #12]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    342e:	4618      	mov	r0, r3
    3430:	bd70      	pop	{r4, r5, r6, pc}
	spool->pool = new_pool;
    3432:	461d      	mov	r5, r3
	spool->oomfn = oom_handler;
    3434:	9b04      	ldr	r3, [sp, #16]
	spool->pool_size = new_pool_size;
    3436:	e9c0 1200 	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
    343a:	60c3      	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    343c:	f7ff ffb6 	bl	33ac <sm_align_pool>
    3440:	4603      	mov	r3, r0
    3442:	2800      	cmp	r0, #0
    3444:	d0f3      	beq.n	342e <sm_set_pool+0x36>
	if (do_zero) {
    3446:	b96d      	cbnz	r5, 3464 <sm_set_pool+0x6c>
	return 1;
    3448:	2301      	movs	r3, #1
}
    344a:	4618      	mov	r0, r3
    344c:	bd70      	pop	{r4, r5, r6, pc}
		errno = EINVAL;
    344e:	f001 f8ed 	bl	462c <__errno>
    3452:	2216      	movs	r2, #22
		return 0;
    3454:	2300      	movs	r3, #0
		errno = EINVAL;
    3456:	6002      	str	r2, [r0, #0]
}
    3458:	4618      	mov	r0, r3
    345a:	bd70      	pop	{r4, r5, r6, pc}
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    345c:	2100      	movs	r1, #0
    345e:	f000 ffaf 	bl	43c0 <memset>
    3462:	e7de      	b.n	3422 <sm_set_pool+0x2a>
		memset(spool->pool, 0, spool->pool_size);
    3464:	6862      	ldr	r2, [r4, #4]
    3466:	4631      	mov	r1, r6
    3468:	6820      	ldr	r0, [r4, #0]
		spool->do_zero = do_zero;
    346a:	60a5      	str	r5, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    346c:	f000 ffa8 	bl	43c0 <memset>
	return 1;
    3470:	2301      	movs	r3, #1
    3472:	e7dc      	b.n	342e <sm_set_pool+0x36>
    3474:	aaaaaaab 	.word	0xaaaaaaab
    3478:	15555555 	.word	0x15555555

0000347c <__aeabi_atexit>:
    347c:	4603      	mov	r3, r0
    347e:	4608      	mov	r0, r1
    3480:	4619      	mov	r1, r3
    3482:	f000 bd79 	b.w	3f78 <__cxa_atexit>
    3486:	bf00      	nop

00003488 <atol>:
    3488:	220a      	movs	r2, #10
    348a:	2100      	movs	r1, #0
    348c:	f000 bd66 	b.w	3f5c <strtol>

00003490 <malloc>:
    3490:	4b02      	ldr	r3, [pc, #8]	; (349c <malloc+0xc>)
    3492:	4601      	mov	r1, r0
    3494:	6818      	ldr	r0, [r3, #0]
    3496:	f000 b80b 	b.w	34b0 <_malloc_r>
    349a:	bf00      	nop
    349c:	20001680 	.word	0x20001680

000034a0 <free>:
    34a0:	4b02      	ldr	r3, [pc, #8]	; (34ac <free+0xc>)
    34a2:	4601      	mov	r1, r0
    34a4:	6818      	ldr	r0, [r3, #0]
    34a6:	f001 bbcd 	b.w	4c44 <_free_r>
    34aa:	bf00      	nop
    34ac:	20001680 	.word	0x20001680

000034b0 <_malloc_r>:
    34b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    34b4:	f101 060b 	add.w	r6, r1, #11
    34b8:	2e16      	cmp	r6, #22
    34ba:	b083      	sub	sp, #12
    34bc:	4604      	mov	r4, r0
    34be:	d824      	bhi.n	350a <_malloc_r+0x5a>
    34c0:	2910      	cmp	r1, #16
    34c2:	f200 80ba 	bhi.w	363a <_malloc_r+0x18a>
    34c6:	f000 faa3 	bl	3a10 <__malloc_lock>
    34ca:	2610      	movs	r6, #16
    34cc:	2218      	movs	r2, #24
    34ce:	2002      	movs	r0, #2
    34d0:	4fb5      	ldr	r7, [pc, #724]	; (37a8 <_malloc_r+0x2f8>)
    34d2:	443a      	add	r2, r7
    34d4:	f1a2 0108 	sub.w	r1, r2, #8
    34d8:	6853      	ldr	r3, [r2, #4]
    34da:	428b      	cmp	r3, r1
    34dc:	f000 80ba 	beq.w	3654 <_malloc_r+0x1a4>
    34e0:	685a      	ldr	r2, [r3, #4]
    34e2:	68d9      	ldr	r1, [r3, #12]
    34e4:	f022 0203 	bic.w	r2, r2, #3
    34e8:	441a      	add	r2, r3
    34ea:	689d      	ldr	r5, [r3, #8]
    34ec:	60e9      	str	r1, [r5, #12]
    34ee:	608d      	str	r5, [r1, #8]
    34f0:	6851      	ldr	r1, [r2, #4]
    34f2:	f041 0101 	orr.w	r1, r1, #1
    34f6:	4620      	mov	r0, r4
    34f8:	6051      	str	r1, [r2, #4]
    34fa:	f103 0508 	add.w	r5, r3, #8
    34fe:	f000 fa8d 	bl	3a1c <__malloc_unlock>
    3502:	4628      	mov	r0, r5
    3504:	b003      	add	sp, #12
    3506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    350a:	f036 0607 	bics.w	r6, r6, #7
    350e:	f100 8094 	bmi.w	363a <_malloc_r+0x18a>
    3512:	42b1      	cmp	r1, r6
    3514:	f200 8091 	bhi.w	363a <_malloc_r+0x18a>
    3518:	f000 fa7a 	bl	3a10 <__malloc_lock>
    351c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
    3520:	f0c0 819a 	bcc.w	3858 <_malloc_r+0x3a8>
    3524:	0a73      	lsrs	r3, r6, #9
    3526:	f000 808f 	beq.w	3648 <_malloc_r+0x198>
    352a:	2b04      	cmp	r3, #4
    352c:	f200 816f 	bhi.w	380e <_malloc_r+0x35e>
    3530:	09b3      	lsrs	r3, r6, #6
    3532:	f103 0039 	add.w	r0, r3, #57	; 0x39
    3536:	f103 0c38 	add.w	ip, r3, #56	; 0x38
    353a:	00c3      	lsls	r3, r0, #3
    353c:	4f9a      	ldr	r7, [pc, #616]	; (37a8 <_malloc_r+0x2f8>)
    353e:	443b      	add	r3, r7
    3540:	f1a3 0508 	sub.w	r5, r3, #8
    3544:	685b      	ldr	r3, [r3, #4]
    3546:	429d      	cmp	r5, r3
    3548:	d106      	bne.n	3558 <_malloc_r+0xa8>
    354a:	e00c      	b.n	3566 <_malloc_r+0xb6>
    354c:	2900      	cmp	r1, #0
    354e:	f280 8127 	bge.w	37a0 <_malloc_r+0x2f0>
    3552:	68db      	ldr	r3, [r3, #12]
    3554:	429d      	cmp	r5, r3
    3556:	d006      	beq.n	3566 <_malloc_r+0xb6>
    3558:	685a      	ldr	r2, [r3, #4]
    355a:	f022 0203 	bic.w	r2, r2, #3
    355e:	1b91      	subs	r1, r2, r6
    3560:	290f      	cmp	r1, #15
    3562:	ddf3      	ble.n	354c <_malloc_r+0x9c>
    3564:	4660      	mov	r0, ip
    3566:	693d      	ldr	r5, [r7, #16]
    3568:	f8df c250 	ldr.w	ip, [pc, #592]	; 37bc <_malloc_r+0x30c>
    356c:	4565      	cmp	r5, ip
    356e:	d07c      	beq.n	366a <_malloc_r+0x1ba>
    3570:	686a      	ldr	r2, [r5, #4]
    3572:	f022 0203 	bic.w	r2, r2, #3
    3576:	1b93      	subs	r3, r2, r6
    3578:	2b0f      	cmp	r3, #15
    357a:	f300 817b 	bgt.w	3874 <_malloc_r+0x3c4>
    357e:	2b00      	cmp	r3, #0
    3580:	e9c7 cc04 	strd	ip, ip, [r7, #16]
    3584:	f280 816c 	bge.w	3860 <_malloc_r+0x3b0>
    3588:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    358c:	f080 811a 	bcs.w	37c4 <_malloc_r+0x314>
    3590:	08d3      	lsrs	r3, r2, #3
    3592:	6879      	ldr	r1, [r7, #4]
    3594:	3301      	adds	r3, #1
    3596:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    359a:	2201      	movs	r2, #1
    359c:	fa02 f20e 	lsl.w	r2, r2, lr
    35a0:	430a      	orrs	r2, r1
    35a2:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
    35a6:	f8c5 e008 	str.w	lr, [r5, #8]
    35aa:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    35ae:	3908      	subs	r1, #8
    35b0:	60e9      	str	r1, [r5, #12]
    35b2:	607a      	str	r2, [r7, #4]
    35b4:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    35b8:	f8ce 500c 	str.w	r5, [lr, #12]
    35bc:	1083      	asrs	r3, r0, #2
    35be:	2101      	movs	r1, #1
    35c0:	4099      	lsls	r1, r3
    35c2:	4291      	cmp	r1, r2
    35c4:	d857      	bhi.n	3676 <_malloc_r+0x1c6>
    35c6:	4211      	tst	r1, r2
    35c8:	d106      	bne.n	35d8 <_malloc_r+0x128>
    35ca:	f020 0003 	bic.w	r0, r0, #3
    35ce:	0049      	lsls	r1, r1, #1
    35d0:	4211      	tst	r1, r2
    35d2:	f100 0004 	add.w	r0, r0, #4
    35d6:	d0fa      	beq.n	35ce <_malloc_r+0x11e>
    35d8:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    35dc:	464d      	mov	r5, r9
    35de:	4686      	mov	lr, r0
    35e0:	f8d5 800c 	ldr.w	r8, [r5, #12]
    35e4:	4545      	cmp	r5, r8
    35e6:	d108      	bne.n	35fa <_malloc_r+0x14a>
    35e8:	e11d      	b.n	3826 <_malloc_r+0x376>
    35ea:	2b00      	cmp	r3, #0
    35ec:	f280 8124 	bge.w	3838 <_malloc_r+0x388>
    35f0:	f8d8 800c 	ldr.w	r8, [r8, #12]
    35f4:	4545      	cmp	r5, r8
    35f6:	f000 8116 	beq.w	3826 <_malloc_r+0x376>
    35fa:	f8d8 2004 	ldr.w	r2, [r8, #4]
    35fe:	f022 0203 	bic.w	r2, r2, #3
    3602:	1b93      	subs	r3, r2, r6
    3604:	2b0f      	cmp	r3, #15
    3606:	ddf0      	ble.n	35ea <_malloc_r+0x13a>
    3608:	4620      	mov	r0, r4
    360a:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
    360e:	eb08 0106 	add.w	r1, r8, r6
    3612:	f046 0601 	orr.w	r6, r6, #1
    3616:	f8c8 6004 	str.w	r6, [r8, #4]
    361a:	60ec      	str	r4, [r5, #12]
    361c:	60a5      	str	r5, [r4, #8]
    361e:	f043 0401 	orr.w	r4, r3, #1
    3622:	e9c7 1104 	strd	r1, r1, [r7, #16]
    3626:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    362a:	604c      	str	r4, [r1, #4]
    362c:	f848 3002 	str.w	r3, [r8, r2]
    3630:	f000 f9f4 	bl	3a1c <__malloc_unlock>
    3634:	f108 0508 	add.w	r5, r8, #8
    3638:	e002      	b.n	3640 <_malloc_r+0x190>
    363a:	230c      	movs	r3, #12
    363c:	6023      	str	r3, [r4, #0]
    363e:	2500      	movs	r5, #0
    3640:	4628      	mov	r0, r5
    3642:	b003      	add	sp, #12
    3644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3648:	f44f 7300 	mov.w	r3, #512	; 0x200
    364c:	2040      	movs	r0, #64	; 0x40
    364e:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    3652:	e773      	b.n	353c <_malloc_r+0x8c>
    3654:	68d3      	ldr	r3, [r2, #12]
    3656:	429a      	cmp	r2, r3
    3658:	bf08      	it	eq
    365a:	3002      	addeq	r0, #2
    365c:	f47f af40 	bne.w	34e0 <_malloc_r+0x30>
    3660:	693d      	ldr	r5, [r7, #16]
    3662:	f8df c158 	ldr.w	ip, [pc, #344]	; 37bc <_malloc_r+0x30c>
    3666:	4565      	cmp	r5, ip
    3668:	d182      	bne.n	3570 <_malloc_r+0xc0>
    366a:	687a      	ldr	r2, [r7, #4]
    366c:	1083      	asrs	r3, r0, #2
    366e:	2101      	movs	r1, #1
    3670:	4099      	lsls	r1, r3
    3672:	4291      	cmp	r1, r2
    3674:	d9a7      	bls.n	35c6 <_malloc_r+0x116>
    3676:	68bd      	ldr	r5, [r7, #8]
    3678:	686b      	ldr	r3, [r5, #4]
    367a:	f023 0903 	bic.w	r9, r3, #3
    367e:	454e      	cmp	r6, r9
    3680:	d803      	bhi.n	368a <_malloc_r+0x1da>
    3682:	eba9 0306 	sub.w	r3, r9, r6
    3686:	2b0f      	cmp	r3, #15
    3688:	dc7a      	bgt.n	3780 <_malloc_r+0x2d0>
    368a:	f8df b134 	ldr.w	fp, [pc, #308]	; 37c0 <_malloc_r+0x310>
    368e:	4b47      	ldr	r3, [pc, #284]	; (37ac <_malloc_r+0x2fc>)
    3690:	f8db 2000 	ldr.w	r2, [fp]
    3694:	681b      	ldr	r3, [r3, #0]
    3696:	3201      	adds	r2, #1
    3698:	4433      	add	r3, r6
    369a:	eb05 0a09 	add.w	sl, r5, r9
    369e:	f000 8133 	beq.w	3908 <_malloc_r+0x458>
    36a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    36a6:	330f      	adds	r3, #15
    36a8:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
    36ac:	f028 080f 	bic.w	r8, r8, #15
    36b0:	4641      	mov	r1, r8
    36b2:	4620      	mov	r0, r4
    36b4:	f000 ff92 	bl	45dc <_sbrk_r>
    36b8:	1c41      	adds	r1, r0, #1
    36ba:	4602      	mov	r2, r0
    36bc:	f000 80f3 	beq.w	38a6 <_malloc_r+0x3f6>
    36c0:	4582      	cmp	sl, r0
    36c2:	f200 80ee 	bhi.w	38a2 <_malloc_r+0x3f2>
    36c6:	4b3a      	ldr	r3, [pc, #232]	; (37b0 <_malloc_r+0x300>)
    36c8:	6819      	ldr	r1, [r3, #0]
    36ca:	4441      	add	r1, r8
    36cc:	6019      	str	r1, [r3, #0]
    36ce:	4608      	mov	r0, r1
    36d0:	f000 814e 	beq.w	3970 <_malloc_r+0x4c0>
    36d4:	f8db 1000 	ldr.w	r1, [fp]
    36d8:	9301      	str	r3, [sp, #4]
    36da:	3101      	adds	r1, #1
    36dc:	bf1b      	ittet	ne
    36de:	eba2 010a 	subne.w	r1, r2, sl
    36e2:	1809      	addne	r1, r1, r0
    36e4:	f8cb 2000 	streq.w	r2, [fp]
    36e8:	6019      	strne	r1, [r3, #0]
    36ea:	f012 0b07 	ands.w	fp, r2, #7
    36ee:	f000 8117 	beq.w	3920 <_malloc_r+0x470>
    36f2:	f1cb 0108 	rsb	r1, fp, #8
    36f6:	440a      	add	r2, r1
    36f8:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
    36fc:	4490      	add	r8, r2
    36fe:	3108      	adds	r1, #8
    3700:	eba1 0108 	sub.w	r1, r1, r8
    3704:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    3708:	4651      	mov	r1, sl
    370a:	4620      	mov	r0, r4
    370c:	9200      	str	r2, [sp, #0]
    370e:	f000 ff65 	bl	45dc <_sbrk_r>
    3712:	1c42      	adds	r2, r0, #1
    3714:	e9dd 2300 	ldrd	r2, r3, [sp]
    3718:	f000 814f 	beq.w	39ba <_malloc_r+0x50a>
    371c:	1a80      	subs	r0, r0, r2
    371e:	eb00 080a 	add.w	r8, r0, sl
    3722:	6819      	ldr	r1, [r3, #0]
    3724:	60ba      	str	r2, [r7, #8]
    3726:	f048 0001 	orr.w	r0, r8, #1
    372a:	4451      	add	r1, sl
    372c:	42bd      	cmp	r5, r7
    372e:	6050      	str	r0, [r2, #4]
    3730:	6019      	str	r1, [r3, #0]
    3732:	f000 8129 	beq.w	3988 <_malloc_r+0x4d8>
    3736:	f1b9 0f0f 	cmp.w	r9, #15
    373a:	f240 8127 	bls.w	398c <_malloc_r+0x4dc>
    373e:	6868      	ldr	r0, [r5, #4]
    3740:	f1a9 0c0c 	sub.w	ip, r9, #12
    3744:	f02c 0c07 	bic.w	ip, ip, #7
    3748:	f000 0001 	and.w	r0, r0, #1
    374c:	ea40 000c 	orr.w	r0, r0, ip
    3750:	6068      	str	r0, [r5, #4]
    3752:	f04f 0e05 	mov.w	lr, #5
    3756:	eb05 000c 	add.w	r0, r5, ip
    375a:	f1bc 0f0f 	cmp.w	ip, #15
    375e:	e9c0 ee01 	strd	lr, lr, [r0, #4]
    3762:	f200 8132 	bhi.w	39ca <_malloc_r+0x51a>
    3766:	6850      	ldr	r0, [r2, #4]
    3768:	4615      	mov	r5, r2
    376a:	4b12      	ldr	r3, [pc, #72]	; (37b4 <_malloc_r+0x304>)
    376c:	681a      	ldr	r2, [r3, #0]
    376e:	428a      	cmp	r2, r1
    3770:	bf38      	it	cc
    3772:	6019      	strcc	r1, [r3, #0]
    3774:	4b10      	ldr	r3, [pc, #64]	; (37b8 <_malloc_r+0x308>)
    3776:	681a      	ldr	r2, [r3, #0]
    3778:	428a      	cmp	r2, r1
    377a:	bf38      	it	cc
    377c:	6019      	strcc	r1, [r3, #0]
    377e:	e094      	b.n	38aa <_malloc_r+0x3fa>
    3780:	19aa      	adds	r2, r5, r6
    3782:	f043 0301 	orr.w	r3, r3, #1
    3786:	f046 0601 	orr.w	r6, r6, #1
    378a:	606e      	str	r6, [r5, #4]
    378c:	4620      	mov	r0, r4
    378e:	60ba      	str	r2, [r7, #8]
    3790:	6053      	str	r3, [r2, #4]
    3792:	f000 f943 	bl	3a1c <__malloc_unlock>
    3796:	3508      	adds	r5, #8
    3798:	4628      	mov	r0, r5
    379a:	b003      	add	sp, #12
    379c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    37a0:	68d9      	ldr	r1, [r3, #12]
    37a2:	441a      	add	r2, r3
    37a4:	e6a1      	b.n	34ea <_malloc_r+0x3a>
    37a6:	bf00      	nop
    37a8:	20001264 	.word	0x20001264
    37ac:	20001f18 	.word	0x20001f18
    37b0:	20001ee8 	.word	0x20001ee8
    37b4:	20001f10 	.word	0x20001f10
    37b8:	20001f14 	.word	0x20001f14
    37bc:	2000126c 	.word	0x2000126c
    37c0:	2000166c 	.word	0x2000166c
    37c4:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
    37c8:	ea4f 2352 	mov.w	r3, r2, lsr #9
    37cc:	d363      	bcc.n	3896 <_malloc_r+0x3e6>
    37ce:	2b14      	cmp	r3, #20
    37d0:	f200 80b7 	bhi.w	3942 <_malloc_r+0x492>
    37d4:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    37d8:	00c9      	lsls	r1, r1, #3
    37da:	335b      	adds	r3, #91	; 0x5b
    37dc:	eb07 0e01 	add.w	lr, r7, r1
    37e0:	5879      	ldr	r1, [r7, r1]
    37e2:	f1ae 0e08 	sub.w	lr, lr, #8
    37e6:	458e      	cmp	lr, r1
    37e8:	f000 8091 	beq.w	390e <_malloc_r+0x45e>
    37ec:	684b      	ldr	r3, [r1, #4]
    37ee:	f023 0303 	bic.w	r3, r3, #3
    37f2:	4293      	cmp	r3, r2
    37f4:	d902      	bls.n	37fc <_malloc_r+0x34c>
    37f6:	6889      	ldr	r1, [r1, #8]
    37f8:	458e      	cmp	lr, r1
    37fa:	d1f7      	bne.n	37ec <_malloc_r+0x33c>
    37fc:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    3800:	687a      	ldr	r2, [r7, #4]
    3802:	e9c5 1e02 	strd	r1, lr, [r5, #8]
    3806:	f8ce 5008 	str.w	r5, [lr, #8]
    380a:	60cd      	str	r5, [r1, #12]
    380c:	e6d6      	b.n	35bc <_malloc_r+0x10c>
    380e:	2b14      	cmp	r3, #20
    3810:	d959      	bls.n	38c6 <_malloc_r+0x416>
    3812:	2b54      	cmp	r3, #84	; 0x54
    3814:	f200 809d 	bhi.w	3952 <_malloc_r+0x4a2>
    3818:	0b33      	lsrs	r3, r6, #12
    381a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    381e:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
    3822:	00c3      	lsls	r3, r0, #3
    3824:	e68a      	b.n	353c <_malloc_r+0x8c>
    3826:	f10e 0e01 	add.w	lr, lr, #1
    382a:	f01e 0f03 	tst.w	lr, #3
    382e:	f105 0508 	add.w	r5, r5, #8
    3832:	f47f aed5 	bne.w	35e0 <_malloc_r+0x130>
    3836:	e051      	b.n	38dc <_malloc_r+0x42c>
    3838:	4442      	add	r2, r8
    383a:	4645      	mov	r5, r8
    383c:	6853      	ldr	r3, [r2, #4]
    383e:	f8d8 100c 	ldr.w	r1, [r8, #12]
    3842:	f043 0301 	orr.w	r3, r3, #1
    3846:	6053      	str	r3, [r2, #4]
    3848:	f855 3f08 	ldr.w	r3, [r5, #8]!
    384c:	4620      	mov	r0, r4
    384e:	60d9      	str	r1, [r3, #12]
    3850:	608b      	str	r3, [r1, #8]
    3852:	f000 f8e3 	bl	3a1c <__malloc_unlock>
    3856:	e6f3      	b.n	3640 <_malloc_r+0x190>
    3858:	08f0      	lsrs	r0, r6, #3
    385a:	f106 0208 	add.w	r2, r6, #8
    385e:	e637      	b.n	34d0 <_malloc_r+0x20>
    3860:	442a      	add	r2, r5
    3862:	4620      	mov	r0, r4
    3864:	6853      	ldr	r3, [r2, #4]
    3866:	f043 0301 	orr.w	r3, r3, #1
    386a:	6053      	str	r3, [r2, #4]
    386c:	3508      	adds	r5, #8
    386e:	f000 f8d5 	bl	3a1c <__malloc_unlock>
    3872:	e6e5      	b.n	3640 <_malloc_r+0x190>
    3874:	19a9      	adds	r1, r5, r6
    3876:	4620      	mov	r0, r4
    3878:	f046 0601 	orr.w	r6, r6, #1
    387c:	f043 0401 	orr.w	r4, r3, #1
    3880:	606e      	str	r6, [r5, #4]
    3882:	e9c7 1104 	strd	r1, r1, [r7, #16]
    3886:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    388a:	604c      	str	r4, [r1, #4]
    388c:	50ab      	str	r3, [r5, r2]
    388e:	f000 f8c5 	bl	3a1c <__malloc_unlock>
    3892:	3508      	adds	r5, #8
    3894:	e6d4      	b.n	3640 <_malloc_r+0x190>
    3896:	0993      	lsrs	r3, r2, #6
    3898:	f103 0139 	add.w	r1, r3, #57	; 0x39
    389c:	00c9      	lsls	r1, r1, #3
    389e:	3338      	adds	r3, #56	; 0x38
    38a0:	e79c      	b.n	37dc <_malloc_r+0x32c>
    38a2:	42bd      	cmp	r5, r7
    38a4:	d05f      	beq.n	3966 <_malloc_r+0x4b6>
    38a6:	68bd      	ldr	r5, [r7, #8]
    38a8:	6868      	ldr	r0, [r5, #4]
    38aa:	f020 0803 	bic.w	r8, r0, #3
    38ae:	4546      	cmp	r6, r8
    38b0:	eba8 0306 	sub.w	r3, r8, r6
    38b4:	d802      	bhi.n	38bc <_malloc_r+0x40c>
    38b6:	2b0f      	cmp	r3, #15
    38b8:	f73f af62 	bgt.w	3780 <_malloc_r+0x2d0>
    38bc:	4620      	mov	r0, r4
    38be:	f000 f8ad 	bl	3a1c <__malloc_unlock>
    38c2:	2500      	movs	r5, #0
    38c4:	e6bc      	b.n	3640 <_malloc_r+0x190>
    38c6:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    38ca:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
    38ce:	00c3      	lsls	r3, r0, #3
    38d0:	e634      	b.n	353c <_malloc_r+0x8c>
    38d2:	f859 3908 	ldr.w	r3, [r9], #-8
    38d6:	454b      	cmp	r3, r9
    38d8:	f040 8096 	bne.w	3a08 <_malloc_r+0x558>
    38dc:	f010 0f03 	tst.w	r0, #3
    38e0:	f100 30ff 	add.w	r0, r0, #4294967295
    38e4:	d1f5      	bne.n	38d2 <_malloc_r+0x422>
    38e6:	687b      	ldr	r3, [r7, #4]
    38e8:	ea23 0301 	bic.w	r3, r3, r1
    38ec:	607b      	str	r3, [r7, #4]
    38ee:	0049      	lsls	r1, r1, #1
    38f0:	4299      	cmp	r1, r3
    38f2:	f63f aec0 	bhi.w	3676 <_malloc_r+0x1c6>
    38f6:	b919      	cbnz	r1, 3900 <_malloc_r+0x450>
    38f8:	e6bd      	b.n	3676 <_malloc_r+0x1c6>
    38fa:	0049      	lsls	r1, r1, #1
    38fc:	f10e 0e04 	add.w	lr, lr, #4
    3900:	4219      	tst	r1, r3
    3902:	d0fa      	beq.n	38fa <_malloc_r+0x44a>
    3904:	4670      	mov	r0, lr
    3906:	e667      	b.n	35d8 <_malloc_r+0x128>
    3908:	f103 0810 	add.w	r8, r3, #16
    390c:	e6d0      	b.n	36b0 <_malloc_r+0x200>
    390e:	109a      	asrs	r2, r3, #2
    3910:	f04f 0801 	mov.w	r8, #1
    3914:	687b      	ldr	r3, [r7, #4]
    3916:	fa08 f202 	lsl.w	r2, r8, r2
    391a:	431a      	orrs	r2, r3
    391c:	607a      	str	r2, [r7, #4]
    391e:	e770      	b.n	3802 <_malloc_r+0x352>
    3920:	eb02 0108 	add.w	r1, r2, r8
    3924:	4249      	negs	r1, r1
    3926:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    392a:	4651      	mov	r1, sl
    392c:	4620      	mov	r0, r4
    392e:	9200      	str	r2, [sp, #0]
    3930:	f000 fe54 	bl	45dc <_sbrk_r>
    3934:	1c43      	adds	r3, r0, #1
    3936:	e9dd 2300 	ldrd	r2, r3, [sp]
    393a:	f47f aeef 	bne.w	371c <_malloc_r+0x26c>
    393e:	46da      	mov	sl, fp
    3940:	e6ef      	b.n	3722 <_malloc_r+0x272>
    3942:	2b54      	cmp	r3, #84	; 0x54
    3944:	d825      	bhi.n	3992 <_malloc_r+0x4e2>
    3946:	0b13      	lsrs	r3, r2, #12
    3948:	f103 016f 	add.w	r1, r3, #111	; 0x6f
    394c:	00c9      	lsls	r1, r1, #3
    394e:	336e      	adds	r3, #110	; 0x6e
    3950:	e744      	b.n	37dc <_malloc_r+0x32c>
    3952:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    3956:	d825      	bhi.n	39a4 <_malloc_r+0x4f4>
    3958:	0bf3      	lsrs	r3, r6, #15
    395a:	f103 0078 	add.w	r0, r3, #120	; 0x78
    395e:	f103 0c77 	add.w	ip, r3, #119	; 0x77
    3962:	00c3      	lsls	r3, r0, #3
    3964:	e5ea      	b.n	353c <_malloc_r+0x8c>
    3966:	4b29      	ldr	r3, [pc, #164]	; (3a0c <_malloc_r+0x55c>)
    3968:	6818      	ldr	r0, [r3, #0]
    396a:	4440      	add	r0, r8
    396c:	6018      	str	r0, [r3, #0]
    396e:	e6b1      	b.n	36d4 <_malloc_r+0x224>
    3970:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
    3974:	f1bc 0f00 	cmp.w	ip, #0
    3978:	f47f aeac 	bne.w	36d4 <_malloc_r+0x224>
    397c:	68bd      	ldr	r5, [r7, #8]
    397e:	44c8      	add	r8, r9
    3980:	f048 0001 	orr.w	r0, r8, #1
    3984:	6068      	str	r0, [r5, #4]
    3986:	e6f0      	b.n	376a <_malloc_r+0x2ba>
    3988:	4615      	mov	r5, r2
    398a:	e6ee      	b.n	376a <_malloc_r+0x2ba>
    398c:	2301      	movs	r3, #1
    398e:	6053      	str	r3, [r2, #4]
    3990:	e794      	b.n	38bc <_malloc_r+0x40c>
    3992:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    3996:	d823      	bhi.n	39e0 <_malloc_r+0x530>
    3998:	0bd3      	lsrs	r3, r2, #15
    399a:	f103 0178 	add.w	r1, r3, #120	; 0x78
    399e:	00c9      	lsls	r1, r1, #3
    39a0:	3377      	adds	r3, #119	; 0x77
    39a2:	e71b      	b.n	37dc <_malloc_r+0x32c>
    39a4:	f240 5254 	movw	r2, #1364	; 0x554
    39a8:	4293      	cmp	r3, r2
    39aa:	d823      	bhi.n	39f4 <_malloc_r+0x544>
    39ac:	0cb3      	lsrs	r3, r6, #18
    39ae:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    39b2:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
    39b6:	00c3      	lsls	r3, r0, #3
    39b8:	e5c0      	b.n	353c <_malloc_r+0x8c>
    39ba:	f1ab 0b08 	sub.w	fp, fp, #8
    39be:	44d8      	add	r8, fp
    39c0:	eba8 0802 	sub.w	r8, r8, r2
    39c4:	f04f 0a00 	mov.w	sl, #0
    39c8:	e6ab      	b.n	3722 <_malloc_r+0x272>
    39ca:	f105 0108 	add.w	r1, r5, #8
    39ce:	4620      	mov	r0, r4
    39d0:	9300      	str	r3, [sp, #0]
    39d2:	f001 f937 	bl	4c44 <_free_r>
    39d6:	68bd      	ldr	r5, [r7, #8]
    39d8:	9b00      	ldr	r3, [sp, #0]
    39da:	6868      	ldr	r0, [r5, #4]
    39dc:	6819      	ldr	r1, [r3, #0]
    39de:	e6c4      	b.n	376a <_malloc_r+0x2ba>
    39e0:	f240 5154 	movw	r1, #1364	; 0x554
    39e4:	428b      	cmp	r3, r1
    39e6:	d80b      	bhi.n	3a00 <_malloc_r+0x550>
    39e8:	0c93      	lsrs	r3, r2, #18
    39ea:	f103 017d 	add.w	r1, r3, #125	; 0x7d
    39ee:	00c9      	lsls	r1, r1, #3
    39f0:	337c      	adds	r3, #124	; 0x7c
    39f2:	e6f3      	b.n	37dc <_malloc_r+0x32c>
    39f4:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    39f8:	207f      	movs	r0, #127	; 0x7f
    39fa:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
    39fe:	e59d      	b.n	353c <_malloc_r+0x8c>
    3a00:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    3a04:	237e      	movs	r3, #126	; 0x7e
    3a06:	e6e9      	b.n	37dc <_malloc_r+0x32c>
    3a08:	687b      	ldr	r3, [r7, #4]
    3a0a:	e770      	b.n	38ee <_malloc_r+0x43e>
    3a0c:	20001ee8 	.word	0x20001ee8

00003a10 <__malloc_lock>:
    3a10:	4801      	ldr	r0, [pc, #4]	; (3a18 <__malloc_lock+0x8>)
    3a12:	f000 be39 	b.w	4688 <__retarget_lock_acquire_recursive>
    3a16:	bf00      	nop
    3a18:	20001ee0 	.word	0x20001ee0

00003a1c <__malloc_unlock>:
    3a1c:	4801      	ldr	r0, [pc, #4]	; (3a24 <__malloc_unlock+0x8>)
    3a1e:	f000 be35 	b.w	468c <__retarget_lock_release_recursive>
    3a22:	bf00      	nop
    3a24:	20001ee0 	.word	0x20001ee0

00003a28 <realloc>:
    3a28:	b410      	push	{r4}
    3a2a:	4c04      	ldr	r4, [pc, #16]	; (3a3c <realloc+0x14>)
    3a2c:	4603      	mov	r3, r0
    3a2e:	460a      	mov	r2, r1
    3a30:	6820      	ldr	r0, [r4, #0]
    3a32:	f85d 4b04 	ldr.w	r4, [sp], #4
    3a36:	4619      	mov	r1, r3
    3a38:	f000 b802 	b.w	3a40 <_realloc_r>
    3a3c:	20001680 	.word	0x20001680

00003a40 <_realloc_r>:
    3a40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3a44:	4617      	mov	r7, r2
    3a46:	2900      	cmp	r1, #0
    3a48:	f000 8098 	beq.w	3b7c <_realloc_r+0x13c>
    3a4c:	460c      	mov	r4, r1
    3a4e:	f107 050b 	add.w	r5, r7, #11
    3a52:	4680      	mov	r8, r0
    3a54:	f7ff ffdc 	bl	3a10 <__malloc_lock>
    3a58:	2d16      	cmp	r5, #22
    3a5a:	f854 1c04 	ldr.w	r1, [r4, #-4]
    3a5e:	d85b      	bhi.n	3b18 <_realloc_r+0xd8>
    3a60:	2510      	movs	r5, #16
    3a62:	462a      	mov	r2, r5
    3a64:	42af      	cmp	r7, r5
    3a66:	d85c      	bhi.n	3b22 <_realloc_r+0xe2>
    3a68:	f021 0603 	bic.w	r6, r1, #3
    3a6c:	4296      	cmp	r6, r2
    3a6e:	f1a4 0908 	sub.w	r9, r4, #8
    3a72:	da62      	bge.n	3b3a <_realloc_r+0xfa>
    3a74:	4bbc      	ldr	r3, [pc, #752]	; (3d68 <_realloc_r+0x328>)
    3a76:	f8d3 c008 	ldr.w	ip, [r3, #8]
    3a7a:	eb09 0006 	add.w	r0, r9, r6
    3a7e:	4584      	cmp	ip, r0
    3a80:	f000 8097 	beq.w	3bb2 <_realloc_r+0x172>
    3a84:	f8d0 c004 	ldr.w	ip, [r0, #4]
    3a88:	f02c 0301 	bic.w	r3, ip, #1
    3a8c:	4403      	add	r3, r0
    3a8e:	685b      	ldr	r3, [r3, #4]
    3a90:	07db      	lsls	r3, r3, #31
    3a92:	d468      	bmi.n	3b66 <_realloc_r+0x126>
    3a94:	f02c 0c03 	bic.w	ip, ip, #3
    3a98:	eb06 030c 	add.w	r3, r6, ip
    3a9c:	4293      	cmp	r3, r2
    3a9e:	da47      	bge.n	3b30 <_realloc_r+0xf0>
    3aa0:	07cb      	lsls	r3, r1, #31
    3aa2:	d410      	bmi.n	3ac6 <_realloc_r+0x86>
    3aa4:	f854 3c08 	ldr.w	r3, [r4, #-8]
    3aa8:	eba9 0a03 	sub.w	sl, r9, r3
    3aac:	f8da 3004 	ldr.w	r3, [sl, #4]
    3ab0:	f023 0103 	bic.w	r1, r3, #3
    3ab4:	448c      	add	ip, r1
    3ab6:	44b4      	add	ip, r6
    3ab8:	4594      	cmp	ip, r2
    3aba:	f280 8111 	bge.w	3ce0 <_realloc_r+0x2a0>
    3abe:	1873      	adds	r3, r6, r1
    3ac0:	4293      	cmp	r3, r2
    3ac2:	f280 80e8 	bge.w	3c96 <_realloc_r+0x256>
    3ac6:	4639      	mov	r1, r7
    3ac8:	4640      	mov	r0, r8
    3aca:	f7ff fcf1 	bl	34b0 <_malloc_r>
    3ace:	4607      	mov	r7, r0
    3ad0:	b1e0      	cbz	r0, 3b0c <_realloc_r+0xcc>
    3ad2:	f854 3c04 	ldr.w	r3, [r4, #-4]
    3ad6:	f023 0301 	bic.w	r3, r3, #1
    3ada:	444b      	add	r3, r9
    3adc:	f1a0 0208 	sub.w	r2, r0, #8
    3ae0:	4293      	cmp	r3, r2
    3ae2:	f000 80d2 	beq.w	3c8a <_realloc_r+0x24a>
    3ae6:	1f32      	subs	r2, r6, #4
    3ae8:	2a24      	cmp	r2, #36	; 0x24
    3aea:	f200 80f5 	bhi.w	3cd8 <_realloc_r+0x298>
    3aee:	2a13      	cmp	r2, #19
    3af0:	f200 80ac 	bhi.w	3c4c <_realloc_r+0x20c>
    3af4:	4603      	mov	r3, r0
    3af6:	4622      	mov	r2, r4
    3af8:	6811      	ldr	r1, [r2, #0]
    3afa:	6019      	str	r1, [r3, #0]
    3afc:	6851      	ldr	r1, [r2, #4]
    3afe:	6059      	str	r1, [r3, #4]
    3b00:	6892      	ldr	r2, [r2, #8]
    3b02:	609a      	str	r2, [r3, #8]
    3b04:	4621      	mov	r1, r4
    3b06:	4640      	mov	r0, r8
    3b08:	f001 f89c 	bl	4c44 <_free_r>
    3b0c:	4640      	mov	r0, r8
    3b0e:	f7ff ff85 	bl	3a1c <__malloc_unlock>
    3b12:	4638      	mov	r0, r7
    3b14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3b18:	f025 0507 	bic.w	r5, r5, #7
    3b1c:	2d00      	cmp	r5, #0
    3b1e:	462a      	mov	r2, r5
    3b20:	daa0      	bge.n	3a64 <_realloc_r+0x24>
    3b22:	230c      	movs	r3, #12
    3b24:	f8c8 3000 	str.w	r3, [r8]
    3b28:	2700      	movs	r7, #0
    3b2a:	4638      	mov	r0, r7
    3b2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3b30:	461e      	mov	r6, r3
    3b32:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    3b36:	60d3      	str	r3, [r2, #12]
    3b38:	609a      	str	r2, [r3, #8]
    3b3a:	1b73      	subs	r3, r6, r5
    3b3c:	2b0f      	cmp	r3, #15
    3b3e:	d822      	bhi.n	3b86 <_realloc_r+0x146>
    3b40:	f8d9 3004 	ldr.w	r3, [r9, #4]
    3b44:	f003 0301 	and.w	r3, r3, #1
    3b48:	4333      	orrs	r3, r6
    3b4a:	444e      	add	r6, r9
    3b4c:	f8c9 3004 	str.w	r3, [r9, #4]
    3b50:	6873      	ldr	r3, [r6, #4]
    3b52:	f043 0301 	orr.w	r3, r3, #1
    3b56:	6073      	str	r3, [r6, #4]
    3b58:	4640      	mov	r0, r8
    3b5a:	4627      	mov	r7, r4
    3b5c:	f7ff ff5e 	bl	3a1c <__malloc_unlock>
    3b60:	4638      	mov	r0, r7
    3b62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3b66:	07c9      	lsls	r1, r1, #31
    3b68:	d4ad      	bmi.n	3ac6 <_realloc_r+0x86>
    3b6a:	f854 3c08 	ldr.w	r3, [r4, #-8]
    3b6e:	eba9 0a03 	sub.w	sl, r9, r3
    3b72:	f8da 1004 	ldr.w	r1, [sl, #4]
    3b76:	f021 0103 	bic.w	r1, r1, #3
    3b7a:	e7a0      	b.n	3abe <_realloc_r+0x7e>
    3b7c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3b80:	4611      	mov	r1, r2
    3b82:	f7ff bc95 	b.w	34b0 <_malloc_r>
    3b86:	f8d9 2004 	ldr.w	r2, [r9, #4]
    3b8a:	eb09 0105 	add.w	r1, r9, r5
    3b8e:	f002 0201 	and.w	r2, r2, #1
    3b92:	444e      	add	r6, r9
    3b94:	f043 0301 	orr.w	r3, r3, #1
    3b98:	432a      	orrs	r2, r5
    3b9a:	f8c9 2004 	str.w	r2, [r9, #4]
    3b9e:	604b      	str	r3, [r1, #4]
    3ba0:	6873      	ldr	r3, [r6, #4]
    3ba2:	f043 0301 	orr.w	r3, r3, #1
    3ba6:	3108      	adds	r1, #8
    3ba8:	6073      	str	r3, [r6, #4]
    3baa:	4640      	mov	r0, r8
    3bac:	f001 f84a 	bl	4c44 <_free_r>
    3bb0:	e7d2      	b.n	3b58 <_realloc_r+0x118>
    3bb2:	f8dc 0004 	ldr.w	r0, [ip, #4]
    3bb6:	f020 0b03 	bic.w	fp, r0, #3
    3bba:	eb06 0c0b 	add.w	ip, r6, fp
    3bbe:	f105 0010 	add.w	r0, r5, #16
    3bc2:	4584      	cmp	ip, r0
    3bc4:	da4d      	bge.n	3c62 <_realloc_r+0x222>
    3bc6:	07c9      	lsls	r1, r1, #31
    3bc8:	f53f af7d 	bmi.w	3ac6 <_realloc_r+0x86>
    3bcc:	f854 1c08 	ldr.w	r1, [r4, #-8]
    3bd0:	eba9 0a01 	sub.w	sl, r9, r1
    3bd4:	f8da 1004 	ldr.w	r1, [sl, #4]
    3bd8:	f021 0103 	bic.w	r1, r1, #3
    3bdc:	448b      	add	fp, r1
    3bde:	44b3      	add	fp, r6
    3be0:	4558      	cmp	r0, fp
    3be2:	f73f af6c 	bgt.w	3abe <_realloc_r+0x7e>
    3be6:	4657      	mov	r7, sl
    3be8:	f8da 100c 	ldr.w	r1, [sl, #12]
    3bec:	f857 0f08 	ldr.w	r0, [r7, #8]!
    3bf0:	1f32      	subs	r2, r6, #4
    3bf2:	2a24      	cmp	r2, #36	; 0x24
    3bf4:	60c1      	str	r1, [r0, #12]
    3bf6:	6088      	str	r0, [r1, #8]
    3bf8:	f200 80db 	bhi.w	3db2 <_realloc_r+0x372>
    3bfc:	2a13      	cmp	r2, #19
    3bfe:	f240 80d6 	bls.w	3dae <_realloc_r+0x36e>
    3c02:	6821      	ldr	r1, [r4, #0]
    3c04:	f8ca 1008 	str.w	r1, [sl, #8]
    3c08:	6861      	ldr	r1, [r4, #4]
    3c0a:	f8ca 100c 	str.w	r1, [sl, #12]
    3c0e:	2a1b      	cmp	r2, #27
    3c10:	f200 80df 	bhi.w	3dd2 <_realloc_r+0x392>
    3c14:	3408      	adds	r4, #8
    3c16:	f10a 0210 	add.w	r2, sl, #16
    3c1a:	6821      	ldr	r1, [r4, #0]
    3c1c:	6011      	str	r1, [r2, #0]
    3c1e:	6861      	ldr	r1, [r4, #4]
    3c20:	6051      	str	r1, [r2, #4]
    3c22:	68a1      	ldr	r1, [r4, #8]
    3c24:	6091      	str	r1, [r2, #8]
    3c26:	eb0a 0105 	add.w	r1, sl, r5
    3c2a:	ebab 0205 	sub.w	r2, fp, r5
    3c2e:	f042 0201 	orr.w	r2, r2, #1
    3c32:	6099      	str	r1, [r3, #8]
    3c34:	604a      	str	r2, [r1, #4]
    3c36:	f8da 3004 	ldr.w	r3, [sl, #4]
    3c3a:	f003 0301 	and.w	r3, r3, #1
    3c3e:	432b      	orrs	r3, r5
    3c40:	4640      	mov	r0, r8
    3c42:	f8ca 3004 	str.w	r3, [sl, #4]
    3c46:	f7ff fee9 	bl	3a1c <__malloc_unlock>
    3c4a:	e76e      	b.n	3b2a <_realloc_r+0xea>
    3c4c:	6823      	ldr	r3, [r4, #0]
    3c4e:	6003      	str	r3, [r0, #0]
    3c50:	6863      	ldr	r3, [r4, #4]
    3c52:	6043      	str	r3, [r0, #4]
    3c54:	2a1b      	cmp	r2, #27
    3c56:	d868      	bhi.n	3d2a <_realloc_r+0x2ea>
    3c58:	f104 0208 	add.w	r2, r4, #8
    3c5c:	f100 0308 	add.w	r3, r0, #8
    3c60:	e74a      	b.n	3af8 <_realloc_r+0xb8>
    3c62:	eb09 0205 	add.w	r2, r9, r5
    3c66:	609a      	str	r2, [r3, #8]
    3c68:	ebac 0305 	sub.w	r3, ip, r5
    3c6c:	f043 0301 	orr.w	r3, r3, #1
    3c70:	6053      	str	r3, [r2, #4]
    3c72:	f854 3c04 	ldr.w	r3, [r4, #-4]
    3c76:	f003 0301 	and.w	r3, r3, #1
    3c7a:	432b      	orrs	r3, r5
    3c7c:	4640      	mov	r0, r8
    3c7e:	f844 3c04 	str.w	r3, [r4, #-4]
    3c82:	f7ff fecb 	bl	3a1c <__malloc_unlock>
    3c86:	4627      	mov	r7, r4
    3c88:	e74f      	b.n	3b2a <_realloc_r+0xea>
    3c8a:	f850 3c04 	ldr.w	r3, [r0, #-4]
    3c8e:	f023 0303 	bic.w	r3, r3, #3
    3c92:	441e      	add	r6, r3
    3c94:	e751      	b.n	3b3a <_realloc_r+0xfa>
    3c96:	4657      	mov	r7, sl
    3c98:	f8da 100c 	ldr.w	r1, [sl, #12]
    3c9c:	f857 0f08 	ldr.w	r0, [r7, #8]!
    3ca0:	1f32      	subs	r2, r6, #4
    3ca2:	2a24      	cmp	r2, #36	; 0x24
    3ca4:	60c1      	str	r1, [r0, #12]
    3ca6:	6088      	str	r0, [r1, #8]
    3ca8:	d84c      	bhi.n	3d44 <_realloc_r+0x304>
    3caa:	2a13      	cmp	r2, #19
    3cac:	d948      	bls.n	3d40 <_realloc_r+0x300>
    3cae:	6821      	ldr	r1, [r4, #0]
    3cb0:	f8ca 1008 	str.w	r1, [sl, #8]
    3cb4:	6861      	ldr	r1, [r4, #4]
    3cb6:	f8ca 100c 	str.w	r1, [sl, #12]
    3cba:	2a1b      	cmp	r2, #27
    3cbc:	d856      	bhi.n	3d6c <_realloc_r+0x32c>
    3cbe:	3408      	adds	r4, #8
    3cc0:	f10a 0210 	add.w	r2, sl, #16
    3cc4:	461e      	mov	r6, r3
    3cc6:	6823      	ldr	r3, [r4, #0]
    3cc8:	6013      	str	r3, [r2, #0]
    3cca:	6863      	ldr	r3, [r4, #4]
    3ccc:	6053      	str	r3, [r2, #4]
    3cce:	68a3      	ldr	r3, [r4, #8]
    3cd0:	6093      	str	r3, [r2, #8]
    3cd2:	46d1      	mov	r9, sl
    3cd4:	463c      	mov	r4, r7
    3cd6:	e730      	b.n	3b3a <_realloc_r+0xfa>
    3cd8:	4621      	mov	r1, r4
    3cda:	f000 faf5 	bl	42c8 <memmove>
    3cde:	e711      	b.n	3b04 <_realloc_r+0xc4>
    3ce0:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
    3ce4:	4657      	mov	r7, sl
    3ce6:	60cb      	str	r3, [r1, #12]
    3ce8:	6099      	str	r1, [r3, #8]
    3cea:	f857 1f08 	ldr.w	r1, [r7, #8]!
    3cee:	f8da 300c 	ldr.w	r3, [sl, #12]
    3cf2:	60cb      	str	r3, [r1, #12]
    3cf4:	1f32      	subs	r2, r6, #4
    3cf6:	2a24      	cmp	r2, #36	; 0x24
    3cf8:	6099      	str	r1, [r3, #8]
    3cfa:	d82d      	bhi.n	3d58 <_realloc_r+0x318>
    3cfc:	2a13      	cmp	r2, #19
    3cfe:	d929      	bls.n	3d54 <_realloc_r+0x314>
    3d00:	6823      	ldr	r3, [r4, #0]
    3d02:	f8ca 3008 	str.w	r3, [sl, #8]
    3d06:	6863      	ldr	r3, [r4, #4]
    3d08:	f8ca 300c 	str.w	r3, [sl, #12]
    3d0c:	2a1b      	cmp	r2, #27
    3d0e:	d842      	bhi.n	3d96 <_realloc_r+0x356>
    3d10:	3408      	adds	r4, #8
    3d12:	f10a 0310 	add.w	r3, sl, #16
    3d16:	6822      	ldr	r2, [r4, #0]
    3d18:	601a      	str	r2, [r3, #0]
    3d1a:	6862      	ldr	r2, [r4, #4]
    3d1c:	605a      	str	r2, [r3, #4]
    3d1e:	68a2      	ldr	r2, [r4, #8]
    3d20:	609a      	str	r2, [r3, #8]
    3d22:	4666      	mov	r6, ip
    3d24:	46d1      	mov	r9, sl
    3d26:	463c      	mov	r4, r7
    3d28:	e707      	b.n	3b3a <_realloc_r+0xfa>
    3d2a:	68a3      	ldr	r3, [r4, #8]
    3d2c:	6083      	str	r3, [r0, #8]
    3d2e:	68e3      	ldr	r3, [r4, #12]
    3d30:	60c3      	str	r3, [r0, #12]
    3d32:	2a24      	cmp	r2, #36	; 0x24
    3d34:	d026      	beq.n	3d84 <_realloc_r+0x344>
    3d36:	f104 0210 	add.w	r2, r4, #16
    3d3a:	f100 0310 	add.w	r3, r0, #16
    3d3e:	e6db      	b.n	3af8 <_realloc_r+0xb8>
    3d40:	463a      	mov	r2, r7
    3d42:	e7bf      	b.n	3cc4 <_realloc_r+0x284>
    3d44:	4621      	mov	r1, r4
    3d46:	4638      	mov	r0, r7
    3d48:	461e      	mov	r6, r3
    3d4a:	46d1      	mov	r9, sl
    3d4c:	f000 fabc 	bl	42c8 <memmove>
    3d50:	463c      	mov	r4, r7
    3d52:	e6f2      	b.n	3b3a <_realloc_r+0xfa>
    3d54:	463b      	mov	r3, r7
    3d56:	e7de      	b.n	3d16 <_realloc_r+0x2d6>
    3d58:	4621      	mov	r1, r4
    3d5a:	4638      	mov	r0, r7
    3d5c:	4666      	mov	r6, ip
    3d5e:	46d1      	mov	r9, sl
    3d60:	f000 fab2 	bl	42c8 <memmove>
    3d64:	463c      	mov	r4, r7
    3d66:	e6e8      	b.n	3b3a <_realloc_r+0xfa>
    3d68:	20001264 	.word	0x20001264
    3d6c:	68a1      	ldr	r1, [r4, #8]
    3d6e:	f8ca 1010 	str.w	r1, [sl, #16]
    3d72:	68e1      	ldr	r1, [r4, #12]
    3d74:	f8ca 1014 	str.w	r1, [sl, #20]
    3d78:	2a24      	cmp	r2, #36	; 0x24
    3d7a:	d020      	beq.n	3dbe <_realloc_r+0x37e>
    3d7c:	3410      	adds	r4, #16
    3d7e:	f10a 0218 	add.w	r2, sl, #24
    3d82:	e79f      	b.n	3cc4 <_realloc_r+0x284>
    3d84:	6923      	ldr	r3, [r4, #16]
    3d86:	6103      	str	r3, [r0, #16]
    3d88:	6961      	ldr	r1, [r4, #20]
    3d8a:	6141      	str	r1, [r0, #20]
    3d8c:	f104 0218 	add.w	r2, r4, #24
    3d90:	f100 0318 	add.w	r3, r0, #24
    3d94:	e6b0      	b.n	3af8 <_realloc_r+0xb8>
    3d96:	68a3      	ldr	r3, [r4, #8]
    3d98:	f8ca 3010 	str.w	r3, [sl, #16]
    3d9c:	68e3      	ldr	r3, [r4, #12]
    3d9e:	f8ca 3014 	str.w	r3, [sl, #20]
    3da2:	2a24      	cmp	r2, #36	; 0x24
    3da4:	d021      	beq.n	3dea <_realloc_r+0x3aa>
    3da6:	3410      	adds	r4, #16
    3da8:	f10a 0318 	add.w	r3, sl, #24
    3dac:	e7b3      	b.n	3d16 <_realloc_r+0x2d6>
    3dae:	463a      	mov	r2, r7
    3db0:	e733      	b.n	3c1a <_realloc_r+0x1da>
    3db2:	4621      	mov	r1, r4
    3db4:	4638      	mov	r0, r7
    3db6:	f000 fa87 	bl	42c8 <memmove>
    3dba:	4b16      	ldr	r3, [pc, #88]	; (3e14 <_realloc_r+0x3d4>)
    3dbc:	e733      	b.n	3c26 <_realloc_r+0x1e6>
    3dbe:	6922      	ldr	r2, [r4, #16]
    3dc0:	f8ca 2018 	str.w	r2, [sl, #24]
    3dc4:	6962      	ldr	r2, [r4, #20]
    3dc6:	f8ca 201c 	str.w	r2, [sl, #28]
    3dca:	3418      	adds	r4, #24
    3dcc:	f10a 0220 	add.w	r2, sl, #32
    3dd0:	e778      	b.n	3cc4 <_realloc_r+0x284>
    3dd2:	68a1      	ldr	r1, [r4, #8]
    3dd4:	f8ca 1010 	str.w	r1, [sl, #16]
    3dd8:	68e1      	ldr	r1, [r4, #12]
    3dda:	f8ca 1014 	str.w	r1, [sl, #20]
    3dde:	2a24      	cmp	r2, #36	; 0x24
    3de0:	d00d      	beq.n	3dfe <_realloc_r+0x3be>
    3de2:	3410      	adds	r4, #16
    3de4:	f10a 0218 	add.w	r2, sl, #24
    3de8:	e717      	b.n	3c1a <_realloc_r+0x1da>
    3dea:	6923      	ldr	r3, [r4, #16]
    3dec:	f8ca 3018 	str.w	r3, [sl, #24]
    3df0:	6963      	ldr	r3, [r4, #20]
    3df2:	f8ca 301c 	str.w	r3, [sl, #28]
    3df6:	3418      	adds	r4, #24
    3df8:	f10a 0320 	add.w	r3, sl, #32
    3dfc:	e78b      	b.n	3d16 <_realloc_r+0x2d6>
    3dfe:	6922      	ldr	r2, [r4, #16]
    3e00:	f8ca 2018 	str.w	r2, [sl, #24]
    3e04:	6962      	ldr	r2, [r4, #20]
    3e06:	f8ca 201c 	str.w	r2, [sl, #28]
    3e0a:	3418      	adds	r4, #24
    3e0c:	f10a 0220 	add.w	r2, sl, #32
    3e10:	e703      	b.n	3c1a <_realloc_r+0x1da>
    3e12:	bf00      	nop
    3e14:	20001264 	.word	0x20001264

00003e18 <_strtol_l.constprop.0>:
    3e18:	2b01      	cmp	r3, #1
    3e1a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3e1e:	d040      	beq.n	3ea2 <_strtol_l.constprop.0+0x8a>
    3e20:	2b24      	cmp	r3, #36	; 0x24
    3e22:	4698      	mov	r8, r3
    3e24:	d83d      	bhi.n	3ea2 <_strtol_l.constprop.0+0x8a>
    3e26:	4d4c      	ldr	r5, [pc, #304]	; (3f58 <_strtol_l.constprop.0+0x140>)
    3e28:	468e      	mov	lr, r1
    3e2a:	4676      	mov	r6, lr
    3e2c:	f81e bb01 	ldrb.w	fp, [lr], #1
    3e30:	f815 400b 	ldrb.w	r4, [r5, fp]
    3e34:	f014 0408 	ands.w	r4, r4, #8
    3e38:	d1f7      	bne.n	3e2a <_strtol_l.constprop.0+0x12>
    3e3a:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
    3e3e:	d072      	beq.n	3f26 <_strtol_l.constprop.0+0x10e>
    3e40:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
    3e44:	bf08      	it	eq
    3e46:	f89e b000 	ldrbeq.w	fp, [lr]
    3e4a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
    3e4e:	bf08      	it	eq
    3e50:	f106 0e02 	addeq.w	lr, r6, #2
    3e54:	2b00      	cmp	r3, #0
    3e56:	d042      	beq.n	3ede <_strtol_l.constprop.0+0xc6>
    3e58:	2b10      	cmp	r3, #16
    3e5a:	d057      	beq.n	3f0c <_strtol_l.constprop.0+0xf4>
    3e5c:	fbb9 f7f8 	udiv	r7, r9, r8
    3e60:	2500      	movs	r5, #0
    3e62:	462e      	mov	r6, r5
    3e64:	fb08 9a17 	mls	sl, r8, r7, r9
    3e68:	e005      	b.n	3e76 <_strtol_l.constprop.0+0x5e>
    3e6a:	d033      	beq.n	3ed4 <_strtol_l.constprop.0+0xbc>
    3e6c:	fb08 c606 	mla	r6, r8, r6, ip
    3e70:	2501      	movs	r5, #1
    3e72:	f81e bb01 	ldrb.w	fp, [lr], #1
    3e76:	f1ab 0c30 	sub.w	ip, fp, #48	; 0x30
    3e7a:	f1bc 0f09 	cmp.w	ip, #9
    3e7e:	d906      	bls.n	3e8e <_strtol_l.constprop.0+0x76>
    3e80:	f1ab 0c41 	sub.w	ip, fp, #65	; 0x41
    3e84:	f1bc 0f19 	cmp.w	ip, #25
    3e88:	d812      	bhi.n	3eb0 <_strtol_l.constprop.0+0x98>
    3e8a:	f1ab 0c37 	sub.w	ip, fp, #55	; 0x37
    3e8e:	4563      	cmp	r3, ip
    3e90:	dd17      	ble.n	3ec2 <_strtol_l.constprop.0+0xaa>
    3e92:	f1b5 3fff 	cmp.w	r5, #4294967295
    3e96:	d0ec      	beq.n	3e72 <_strtol_l.constprop.0+0x5a>
    3e98:	42b7      	cmp	r7, r6
    3e9a:	d2e6      	bcs.n	3e6a <_strtol_l.constprop.0+0x52>
    3e9c:	f04f 35ff 	mov.w	r5, #4294967295
    3ea0:	e7e7      	b.n	3e72 <_strtol_l.constprop.0+0x5a>
    3ea2:	f000 fbc3 	bl	462c <__errno>
    3ea6:	2316      	movs	r3, #22
    3ea8:	6003      	str	r3, [r0, #0]
    3eaa:	2000      	movs	r0, #0
    3eac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3eb0:	f1ab 0c61 	sub.w	ip, fp, #97	; 0x61
    3eb4:	f1bc 0f19 	cmp.w	ip, #25
    3eb8:	d803      	bhi.n	3ec2 <_strtol_l.constprop.0+0xaa>
    3eba:	f1ab 0c57 	sub.w	ip, fp, #87	; 0x57
    3ebe:	4563      	cmp	r3, ip
    3ec0:	dce7      	bgt.n	3e92 <_strtol_l.constprop.0+0x7a>
    3ec2:	1c6b      	adds	r3, r5, #1
    3ec4:	d027      	beq.n	3f16 <_strtol_l.constprop.0+0xfe>
    3ec6:	b98c      	cbnz	r4, 3eec <_strtol_l.constprop.0+0xd4>
    3ec8:	b10a      	cbz	r2, 3ece <_strtol_l.constprop.0+0xb6>
    3eca:	bba5      	cbnz	r5, 3f36 <_strtol_l.constprop.0+0x11e>
    3ecc:	6011      	str	r1, [r2, #0]
    3ece:	4630      	mov	r0, r6
    3ed0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3ed4:	45e2      	cmp	sl, ip
    3ed6:	dac9      	bge.n	3e6c <_strtol_l.constprop.0+0x54>
    3ed8:	f04f 35ff 	mov.w	r5, #4294967295
    3edc:	e7c9      	b.n	3e72 <_strtol_l.constprop.0+0x5a>
    3ede:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
    3ee2:	d005      	beq.n	3ef0 <_strtol_l.constprop.0+0xd8>
    3ee4:	f04f 080a 	mov.w	r8, #10
    3ee8:	4643      	mov	r3, r8
    3eea:	e7b7      	b.n	3e5c <_strtol_l.constprop.0+0x44>
    3eec:	4276      	negs	r6, r6
    3eee:	e7eb      	b.n	3ec8 <_strtol_l.constprop.0+0xb0>
    3ef0:	f89e 3000 	ldrb.w	r3, [lr]
    3ef4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    3ef8:	2b58      	cmp	r3, #88	; 0x58
    3efa:	d121      	bne.n	3f40 <_strtol_l.constprop.0+0x128>
    3efc:	f04f 0810 	mov.w	r8, #16
    3f00:	f89e b001 	ldrb.w	fp, [lr, #1]
    3f04:	4643      	mov	r3, r8
    3f06:	f10e 0e02 	add.w	lr, lr, #2
    3f0a:	e7a7      	b.n	3e5c <_strtol_l.constprop.0+0x44>
    3f0c:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
    3f10:	d01a      	beq.n	3f48 <_strtol_l.constprop.0+0x130>
    3f12:	4698      	mov	r8, r3
    3f14:	e7a2      	b.n	3e5c <_strtol_l.constprop.0+0x44>
    3f16:	2322      	movs	r3, #34	; 0x22
    3f18:	6003      	str	r3, [r0, #0]
    3f1a:	b172      	cbz	r2, 3f3a <_strtol_l.constprop.0+0x122>
    3f1c:	f10e 31ff 	add.w	r1, lr, #4294967295
    3f20:	464e      	mov	r6, r9
    3f22:	6011      	str	r1, [r2, #0]
    3f24:	e7d3      	b.n	3ece <_strtol_l.constprop.0+0xb6>
    3f26:	f89e b000 	ldrb.w	fp, [lr]
    3f2a:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
    3f2e:	f106 0e02 	add.w	lr, r6, #2
    3f32:	2401      	movs	r4, #1
    3f34:	e78e      	b.n	3e54 <_strtol_l.constprop.0+0x3c>
    3f36:	46b1      	mov	r9, r6
    3f38:	e7f0      	b.n	3f1c <_strtol_l.constprop.0+0x104>
    3f3a:	464e      	mov	r6, r9
    3f3c:	4630      	mov	r0, r6
    3f3e:	e7c7      	b.n	3ed0 <_strtol_l.constprop.0+0xb8>
    3f40:	f04f 0808 	mov.w	r8, #8
    3f44:	4643      	mov	r3, r8
    3f46:	e789      	b.n	3e5c <_strtol_l.constprop.0+0x44>
    3f48:	f89e 5000 	ldrb.w	r5, [lr]
    3f4c:	f005 05df 	and.w	r5, r5, #223	; 0xdf
    3f50:	2d58      	cmp	r5, #88	; 0x58
    3f52:	d0d3      	beq.n	3efc <_strtol_l.constprop.0+0xe4>
    3f54:	4698      	mov	r8, r3
    3f56:	e781      	b.n	3e5c <_strtol_l.constprop.0+0x44>
    3f58:	20000479 	.word	0x20000479

00003f5c <strtol>:
    3f5c:	b410      	push	{r4}
    3f5e:	4c05      	ldr	r4, [pc, #20]	; (3f74 <strtol+0x18>)
    3f60:	4684      	mov	ip, r0
    3f62:	4613      	mov	r3, r2
    3f64:	6820      	ldr	r0, [r4, #0]
    3f66:	f85d 4b04 	ldr.w	r4, [sp], #4
    3f6a:	460a      	mov	r2, r1
    3f6c:	4661      	mov	r1, ip
    3f6e:	f7ff bf53 	b.w	3e18 <_strtol_l.constprop.0>
    3f72:	bf00      	nop
    3f74:	20001680 	.word	0x20001680

00003f78 <__cxa_atexit>:
    3f78:	4613      	mov	r3, r2
    3f7a:	460a      	mov	r2, r1
    3f7c:	4601      	mov	r1, r0
    3f7e:	2002      	movs	r0, #2
    3f80:	f000 bdcc 	b.w	4b1c <__register_exitproc>

00003f84 <isspace>:
    3f84:	4b02      	ldr	r3, [pc, #8]	; (3f90 <isspace+0xc>)
    3f86:	4418      	add	r0, r3
    3f88:	7840      	ldrb	r0, [r0, #1]
    3f8a:	f000 0008 	and.w	r0, r0, #8
    3f8e:	4770      	bx	lr
    3f90:	20000478 	.word	0x20000478

00003f94 <toupper>:
    3f94:	4b03      	ldr	r3, [pc, #12]	; (3fa4 <toupper+0x10>)
    3f96:	5c1b      	ldrb	r3, [r3, r0]
    3f98:	f003 0303 	and.w	r3, r3, #3
    3f9c:	2b02      	cmp	r3, #2
    3f9e:	bf08      	it	eq
    3fa0:	3820      	subeq	r0, #32
    3fa2:	4770      	bx	lr
    3fa4:	20000479 	.word	0x20000479

00003fa8 <stdio_exit_handler>:
    3fa8:	4a02      	ldr	r2, [pc, #8]	; (3fb4 <stdio_exit_handler+0xc>)
    3faa:	4903      	ldr	r1, [pc, #12]	; (3fb8 <stdio_exit_handler+0x10>)
    3fac:	4803      	ldr	r0, [pc, #12]	; (3fbc <stdio_exit_handler+0x14>)
    3fae:	f000 b8bb 	b.w	4128 <_fwalk_sglue>
    3fb2:	bf00      	nop
    3fb4:	20001674 	.word	0x20001674
    3fb8:	00007155 	.word	0x00007155
    3fbc:	20000ef0 	.word	0x20000ef0

00003fc0 <cleanup_stdio>:
    3fc0:	4b0c      	ldr	r3, [pc, #48]	; (3ff4 <cleanup_stdio+0x34>)
    3fc2:	6841      	ldr	r1, [r0, #4]
    3fc4:	4299      	cmp	r1, r3
    3fc6:	b510      	push	{r4, lr}
    3fc8:	4604      	mov	r4, r0
    3fca:	d001      	beq.n	3fd0 <cleanup_stdio+0x10>
    3fcc:	f003 f8c2 	bl	7154 <_fclose_r>
    3fd0:	68a1      	ldr	r1, [r4, #8]
    3fd2:	4b09      	ldr	r3, [pc, #36]	; (3ff8 <cleanup_stdio+0x38>)
    3fd4:	4299      	cmp	r1, r3
    3fd6:	d002      	beq.n	3fde <cleanup_stdio+0x1e>
    3fd8:	4620      	mov	r0, r4
    3fda:	f003 f8bb 	bl	7154 <_fclose_r>
    3fde:	68e1      	ldr	r1, [r4, #12]
    3fe0:	4b06      	ldr	r3, [pc, #24]	; (3ffc <cleanup_stdio+0x3c>)
    3fe2:	4299      	cmp	r1, r3
    3fe4:	d004      	beq.n	3ff0 <cleanup_stdio+0x30>
    3fe6:	4620      	mov	r0, r4
    3fe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3fec:	f003 b8b2 	b.w	7154 <_fclose_r>
    3ff0:	bd10      	pop	{r4, pc}
    3ff2:	bf00      	nop
    3ff4:	20001f1c 	.word	0x20001f1c
    3ff8:	20001f84 	.word	0x20001f84
    3ffc:	20001fec 	.word	0x20001fec

00004000 <global_stdio_init.part.0>:
    4000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4004:	4c2a      	ldr	r4, [pc, #168]	; (40b0 <global_stdio_init.part.0+0xb0>)
    4006:	4b2b      	ldr	r3, [pc, #172]	; (40b4 <global_stdio_init.part.0+0xb4>)
    4008:	482b      	ldr	r0, [pc, #172]	; (40b8 <global_stdio_init.part.0+0xb8>)
    400a:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 40cc <global_stdio_init.part.0+0xcc>
    400e:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 40d0 <global_stdio_init.part.0+0xd0>
    4012:	4f2a      	ldr	r7, [pc, #168]	; (40bc <global_stdio_init.part.0+0xbc>)
    4014:	6018      	str	r0, [r3, #0]
    4016:	2500      	movs	r5, #0
    4018:	2304      	movs	r3, #4
    401a:	2208      	movs	r2, #8
    401c:	4629      	mov	r1, r5
    401e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    4022:	4e27      	ldr	r6, [pc, #156]	; (40c0 <global_stdio_init.part.0+0xc0>)
    4024:	6665      	str	r5, [r4, #100]	; 0x64
    4026:	e9c4 5302 	strd	r5, r3, [r4, #8]
    402a:	e9c4 5500 	strd	r5, r5, [r4]
    402e:	e9c4 5504 	strd	r5, r5, [r4, #16]
    4032:	61a5      	str	r5, [r4, #24]
    4034:	f000 f9c4 	bl	43c0 <memset>
    4038:	4b22      	ldr	r3, [pc, #136]	; (40c4 <global_stdio_init.part.0+0xc4>)
    403a:	6763      	str	r3, [r4, #116]	; 0x74
    403c:	2208      	movs	r2, #8
    403e:	4629      	mov	r1, r5
    4040:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    4044:	e9c4 4907 	strd	r4, r9, [r4, #28]
    4048:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
    404c:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
    4050:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
    4054:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
    4058:	6725      	str	r5, [r4, #112]	; 0x70
    405a:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    405e:	62e6      	str	r6, [r4, #44]	; 0x2c
    4060:	f000 f9ae 	bl	43c0 <memset>
    4064:	4b18      	ldr	r3, [pc, #96]	; (40c8 <global_stdio_init.part.0+0xc8>)
    4066:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    406a:	4629      	mov	r1, r5
    406c:	f104 0368 	add.w	r3, r4, #104	; 0x68
    4070:	2208      	movs	r2, #8
    4072:	f504 7096 	add.w	r0, r4, #300	; 0x12c
    4076:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    407a:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
    407e:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
    4082:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
    4086:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
    408a:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    408e:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
    4092:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    4096:	f000 f993 	bl	43c0 <memset>
    409a:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    409e:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
    40a2:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
    40a6:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    40aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    40ae:	bf00      	nop
    40b0:	20001f1c 	.word	0x20001f1c
    40b4:	20002054 	.word	0x20002054
    40b8:	00003fa9 	.word	0x00003fa9
    40bc:	000041d5 	.word	0x000041d5
    40c0:	000041f5 	.word	0x000041f5
    40c4:	00010009 	.word	0x00010009
    40c8:	00020012 	.word	0x00020012
    40cc:	00004171 	.word	0x00004171
    40d0:	00004195 	.word	0x00004195

000040d4 <__sinit>:
    40d4:	b510      	push	{r4, lr}
    40d6:	4604      	mov	r4, r0
    40d8:	480a      	ldr	r0, [pc, #40]	; (4104 <__sinit+0x30>)
    40da:	f000 fad5 	bl	4688 <__retarget_lock_acquire_recursive>
    40de:	6b63      	ldr	r3, [r4, #52]	; 0x34
    40e0:	b923      	cbnz	r3, 40ec <__sinit+0x18>
    40e2:	4b09      	ldr	r3, [pc, #36]	; (4108 <__sinit+0x34>)
    40e4:	4a09      	ldr	r2, [pc, #36]	; (410c <__sinit+0x38>)
    40e6:	681b      	ldr	r3, [r3, #0]
    40e8:	6362      	str	r2, [r4, #52]	; 0x34
    40ea:	b123      	cbz	r3, 40f6 <__sinit+0x22>
    40ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    40f0:	4804      	ldr	r0, [pc, #16]	; (4104 <__sinit+0x30>)
    40f2:	f000 bacb 	b.w	468c <__retarget_lock_release_recursive>
    40f6:	f7ff ff83 	bl	4000 <global_stdio_init.part.0>
    40fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    40fe:	4801      	ldr	r0, [pc, #4]	; (4104 <__sinit+0x30>)
    4100:	f000 bac4 	b.w	468c <__retarget_lock_release_recursive>
    4104:	20001ee4 	.word	0x20001ee4
    4108:	20002054 	.word	0x20002054
    410c:	00003fc1 	.word	0x00003fc1

00004110 <__sfp_lock_acquire>:
    4110:	4801      	ldr	r0, [pc, #4]	; (4118 <__sfp_lock_acquire+0x8>)
    4112:	f000 bab9 	b.w	4688 <__retarget_lock_acquire_recursive>
    4116:	bf00      	nop
    4118:	20001ee4 	.word	0x20001ee4

0000411c <__sfp_lock_release>:
    411c:	4801      	ldr	r0, [pc, #4]	; (4124 <__sfp_lock_release+0x8>)
    411e:	f000 bab5 	b.w	468c <__retarget_lock_release_recursive>
    4122:	bf00      	nop
    4124:	20001ee4 	.word	0x20001ee4

00004128 <_fwalk_sglue>:
    4128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    412c:	4680      	mov	r8, r0
    412e:	460f      	mov	r7, r1
    4130:	4616      	mov	r6, r2
    4132:	f04f 0900 	mov.w	r9, #0
    4136:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
    413a:	3d01      	subs	r5, #1
    413c:	d411      	bmi.n	4162 <_fwalk_sglue+0x3a>
    413e:	89a3      	ldrh	r3, [r4, #12]
    4140:	2b01      	cmp	r3, #1
    4142:	f105 35ff 	add.w	r5, r5, #4294967295
    4146:	d908      	bls.n	415a <_fwalk_sglue+0x32>
    4148:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    414c:	3301      	adds	r3, #1
    414e:	4621      	mov	r1, r4
    4150:	d003      	beq.n	415a <_fwalk_sglue+0x32>
    4152:	4640      	mov	r0, r8
    4154:	47b8      	blx	r7
    4156:	ea49 0900 	orr.w	r9, r9, r0
    415a:	1c6b      	adds	r3, r5, #1
    415c:	f104 0468 	add.w	r4, r4, #104	; 0x68
    4160:	d1ed      	bne.n	413e <_fwalk_sglue+0x16>
    4162:	6836      	ldr	r6, [r6, #0]
    4164:	2e00      	cmp	r6, #0
    4166:	d1e6      	bne.n	4136 <_fwalk_sglue+0xe>
    4168:	4648      	mov	r0, r9
    416a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    416e:	bf00      	nop

00004170 <__sread>:
    4170:	b510      	push	{r4, lr}
    4172:	460c      	mov	r4, r1
    4174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    4178:	f000 fa1a 	bl	45b0 <_read_r>
    417c:	2800      	cmp	r0, #0
    417e:	db03      	blt.n	4188 <__sread+0x18>
    4180:	6d23      	ldr	r3, [r4, #80]	; 0x50
    4182:	4403      	add	r3, r0
    4184:	6523      	str	r3, [r4, #80]	; 0x50
    4186:	bd10      	pop	{r4, pc}
    4188:	89a3      	ldrh	r3, [r4, #12]
    418a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    418e:	81a3      	strh	r3, [r4, #12]
    4190:	bd10      	pop	{r4, pc}
    4192:	bf00      	nop

00004194 <__swrite>:
    4194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4198:	460c      	mov	r4, r1
    419a:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
    419e:	461f      	mov	r7, r3
    41a0:	05cb      	lsls	r3, r1, #23
    41a2:	4605      	mov	r5, r0
    41a4:	4616      	mov	r6, r2
    41a6:	d40b      	bmi.n	41c0 <__swrite+0x2c>
    41a8:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
    41ac:	81a1      	strh	r1, [r4, #12]
    41ae:	463b      	mov	r3, r7
    41b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    41b4:	4632      	mov	r2, r6
    41b6:	4628      	mov	r0, r5
    41b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    41bc:	f000 ba20 	b.w	4600 <_write_r>
    41c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    41c4:	2302      	movs	r3, #2
    41c6:	2200      	movs	r2, #0
    41c8:	f000 f9dc 	bl	4584 <_lseek_r>
    41cc:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
    41d0:	e7ea      	b.n	41a8 <__swrite+0x14>
    41d2:	bf00      	nop

000041d4 <__sseek>:
    41d4:	b510      	push	{r4, lr}
    41d6:	460c      	mov	r4, r1
    41d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    41dc:	f000 f9d2 	bl	4584 <_lseek_r>
    41e0:	89a3      	ldrh	r3, [r4, #12]
    41e2:	1c42      	adds	r2, r0, #1
    41e4:	bf0e      	itee	eq
    41e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    41ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    41ee:	6520      	strne	r0, [r4, #80]	; 0x50
    41f0:	81a3      	strh	r3, [r4, #12]
    41f2:	bd10      	pop	{r4, pc}

000041f4 <__sclose>:
    41f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    41f8:	f000 b9b2 	b.w	4560 <_close_r>

000041fc <_vdprintf_r>:
    41fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    41fe:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
    4202:	af04      	add	r7, sp, #16
    4204:	9300      	str	r3, [sp, #0]
    4206:	4613      	mov	r3, r2
    4208:	f44f 7200 	mov.w	r2, #512	; 0x200
    420c:	460e      	mov	r6, r1
    420e:	9203      	str	r2, [sp, #12]
    4210:	4639      	mov	r1, r7
    4212:	aa03      	add	r2, sp, #12
    4214:	4605      	mov	r5, r0
    4216:	f000 f825 	bl	4264 <_vasnprintf_r>
    421a:	b188      	cbz	r0, 4240 <_vdprintf_r+0x44>
    421c:	4604      	mov	r4, r0
    421e:	4602      	mov	r2, r0
    4220:	9b03      	ldr	r3, [sp, #12]
    4222:	4631      	mov	r1, r6
    4224:	4628      	mov	r0, r5
    4226:	f000 f9eb 	bl	4600 <_write_r>
    422a:	42bc      	cmp	r4, r7
    422c:	9003      	str	r0, [sp, #12]
    422e:	d004      	beq.n	423a <_vdprintf_r+0x3e>
    4230:	4628      	mov	r0, r5
    4232:	4621      	mov	r1, r4
    4234:	f000 fd06 	bl	4c44 <_free_r>
    4238:	9803      	ldr	r0, [sp, #12]
    423a:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
    423e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4240:	f04f 30ff 	mov.w	r0, #4294967295
    4244:	e7f9      	b.n	423a <_vdprintf_r+0x3e>
    4246:	bf00      	nop

00004248 <vdprintf>:
    4248:	b410      	push	{r4}
    424a:	4c05      	ldr	r4, [pc, #20]	; (4260 <vdprintf+0x18>)
    424c:	4684      	mov	ip, r0
    424e:	4613      	mov	r3, r2
    4250:	6820      	ldr	r0, [r4, #0]
    4252:	f85d 4b04 	ldr.w	r4, [sp], #4
    4256:	460a      	mov	r2, r1
    4258:	4661      	mov	r1, ip
    425a:	f7ff bfcf 	b.w	41fc <_vdprintf_r>
    425e:	bf00      	nop
    4260:	20001680 	.word	0x20001680

00004264 <_vasnprintf_r>:
    4264:	b530      	push	{r4, r5, lr}
    4266:	6814      	ldr	r4, [r2, #0]
    4268:	4615      	mov	r5, r2
    426a:	b09b      	sub	sp, #108	; 0x6c
    426c:	461a      	mov	r2, r3
    426e:	b109      	cbz	r1, 4274 <_vasnprintf_r+0x10>
    4270:	2c00      	cmp	r4, #0
    4272:	d119      	bne.n	42a8 <_vasnprintf_r+0x44>
    4274:	2100      	movs	r1, #0
    4276:	f44f 7322 	mov.w	r3, #648	; 0x288
    427a:	f8ad 300c 	strh.w	r3, [sp, #12]
    427e:	9100      	str	r1, [sp, #0]
    4280:	9104      	str	r1, [sp, #16]
    4282:	f64f 73ff 	movw	r3, #65535	; 0xffff
    4286:	9102      	str	r1, [sp, #8]
    4288:	9105      	str	r1, [sp, #20]
    428a:	f8ad 300e 	strh.w	r3, [sp, #14]
    428e:	4669      	mov	r1, sp
    4290:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    4292:	f001 f9bd 	bl	5610 <_svfprintf_r>
    4296:	2800      	cmp	r0, #0
    4298:	db13      	blt.n	42c2 <_vasnprintf_r+0x5e>
    429a:	9b00      	ldr	r3, [sp, #0]
    429c:	6028      	str	r0, [r5, #0]
    429e:	2200      	movs	r2, #0
    42a0:	701a      	strb	r2, [r3, #0]
    42a2:	9804      	ldr	r0, [sp, #16]
    42a4:	b01b      	add	sp, #108	; 0x6c
    42a6:	bd30      	pop	{r4, r5, pc}
    42a8:	f44f 63c1 	mov.w	r3, #1544	; 0x608
    42ac:	9100      	str	r1, [sp, #0]
    42ae:	9104      	str	r1, [sp, #16]
    42b0:	f8ad 300c 	strh.w	r3, [sp, #12]
    42b4:	4621      	mov	r1, r4
    42b6:	dae4      	bge.n	4282 <_vasnprintf_r+0x1e>
    42b8:	238b      	movs	r3, #139	; 0x8b
    42ba:	6003      	str	r3, [r0, #0]
    42bc:	2000      	movs	r0, #0
    42be:	b01b      	add	sp, #108	; 0x6c
    42c0:	bd30      	pop	{r4, r5, pc}
    42c2:	2000      	movs	r0, #0
    42c4:	e7ee      	b.n	42a4 <_vasnprintf_r+0x40>
    42c6:	bf00      	nop

000042c8 <memmove>:
    42c8:	4288      	cmp	r0, r1
    42ca:	d90d      	bls.n	42e8 <memmove+0x20>
    42cc:	188b      	adds	r3, r1, r2
    42ce:	4283      	cmp	r3, r0
    42d0:	d90a      	bls.n	42e8 <memmove+0x20>
    42d2:	eb00 0c02 	add.w	ip, r0, r2
    42d6:	b1ba      	cbz	r2, 4308 <memmove+0x40>
    42d8:	4662      	mov	r2, ip
    42da:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
    42de:	f802 cd01 	strb.w	ip, [r2, #-1]!
    42e2:	4299      	cmp	r1, r3
    42e4:	d1f9      	bne.n	42da <memmove+0x12>
    42e6:	4770      	bx	lr
    42e8:	2a0f      	cmp	r2, #15
    42ea:	d80e      	bhi.n	430a <memmove+0x42>
    42ec:	4603      	mov	r3, r0
    42ee:	f102 3cff 	add.w	ip, r2, #4294967295
    42f2:	b14a      	cbz	r2, 4308 <memmove+0x40>
    42f4:	f10c 0c01 	add.w	ip, ip, #1
    42f8:	3b01      	subs	r3, #1
    42fa:	448c      	add	ip, r1
    42fc:	f811 2b01 	ldrb.w	r2, [r1], #1
    4300:	f803 2f01 	strb.w	r2, [r3, #1]!
    4304:	4561      	cmp	r1, ip
    4306:	d1f9      	bne.n	42fc <memmove+0x34>
    4308:	4770      	bx	lr
    430a:	ea40 0301 	orr.w	r3, r0, r1
    430e:	079b      	lsls	r3, r3, #30
    4310:	d150      	bne.n	43b4 <memmove+0xec>
    4312:	f1a2 0310 	sub.w	r3, r2, #16
    4316:	b570      	push	{r4, r5, r6, lr}
    4318:	f101 0c20 	add.w	ip, r1, #32
    431c:	f023 050f 	bic.w	r5, r3, #15
    4320:	f101 0e10 	add.w	lr, r1, #16
    4324:	f100 0410 	add.w	r4, r0, #16
    4328:	44ac      	add	ip, r5
    432a:	091b      	lsrs	r3, r3, #4
    432c:	f85e 5c10 	ldr.w	r5, [lr, #-16]
    4330:	f844 5c10 	str.w	r5, [r4, #-16]
    4334:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
    4338:	f844 5c0c 	str.w	r5, [r4, #-12]
    433c:	f85e 5c08 	ldr.w	r5, [lr, #-8]
    4340:	f844 5c08 	str.w	r5, [r4, #-8]
    4344:	f85e 5c04 	ldr.w	r5, [lr, #-4]
    4348:	f844 5c04 	str.w	r5, [r4, #-4]
    434c:	f10e 0e10 	add.w	lr, lr, #16
    4350:	45e6      	cmp	lr, ip
    4352:	f104 0410 	add.w	r4, r4, #16
    4356:	d1e9      	bne.n	432c <memmove+0x64>
    4358:	3301      	adds	r3, #1
    435a:	f012 0f0c 	tst.w	r2, #12
    435e:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    4362:	f002 040f 	and.w	r4, r2, #15
    4366:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    436a:	d027      	beq.n	43bc <memmove+0xf4>
    436c:	3c04      	subs	r4, #4
    436e:	f024 0603 	bic.w	r6, r4, #3
    4372:	ea4f 0c94 	mov.w	ip, r4, lsr #2
    4376:	441e      	add	r6, r3
    4378:	1f1c      	subs	r4, r3, #4
    437a:	468e      	mov	lr, r1
    437c:	f85e 5b04 	ldr.w	r5, [lr], #4
    4380:	f844 5f04 	str.w	r5, [r4, #4]!
    4384:	42b4      	cmp	r4, r6
    4386:	d1f9      	bne.n	437c <memmove+0xb4>
    4388:	f10c 0401 	add.w	r4, ip, #1
    438c:	f002 0203 	and.w	r2, r2, #3
    4390:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    4394:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    4398:	f102 3cff 	add.w	ip, r2, #4294967295
    439c:	b14a      	cbz	r2, 43b2 <memmove+0xea>
    439e:	f10c 0c01 	add.w	ip, ip, #1
    43a2:	3b01      	subs	r3, #1
    43a4:	448c      	add	ip, r1
    43a6:	f811 2b01 	ldrb.w	r2, [r1], #1
    43aa:	f803 2f01 	strb.w	r2, [r3, #1]!
    43ae:	4561      	cmp	r1, ip
    43b0:	d1f9      	bne.n	43a6 <memmove+0xde>
    43b2:	bd70      	pop	{r4, r5, r6, pc}
    43b4:	f102 3cff 	add.w	ip, r2, #4294967295
    43b8:	4603      	mov	r3, r0
    43ba:	e79b      	b.n	42f4 <memmove+0x2c>
    43bc:	4622      	mov	r2, r4
    43be:	e7eb      	b.n	4398 <memmove+0xd0>

000043c0 <memset>:
    43c0:	0783      	lsls	r3, r0, #30
    43c2:	b530      	push	{r4, r5, lr}
    43c4:	d048      	beq.n	4458 <memset+0x98>
    43c6:	1e54      	subs	r4, r2, #1
    43c8:	2a00      	cmp	r2, #0
    43ca:	d03f      	beq.n	444c <memset+0x8c>
    43cc:	b2ca      	uxtb	r2, r1
    43ce:	4603      	mov	r3, r0
    43d0:	e001      	b.n	43d6 <memset+0x16>
    43d2:	3c01      	subs	r4, #1
    43d4:	d33a      	bcc.n	444c <memset+0x8c>
    43d6:	f803 2b01 	strb.w	r2, [r3], #1
    43da:	079d      	lsls	r5, r3, #30
    43dc:	d1f9      	bne.n	43d2 <memset+0x12>
    43de:	2c03      	cmp	r4, #3
    43e0:	d92d      	bls.n	443e <memset+0x7e>
    43e2:	b2cd      	uxtb	r5, r1
    43e4:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    43e8:	2c0f      	cmp	r4, #15
    43ea:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    43ee:	d936      	bls.n	445e <memset+0x9e>
    43f0:	f1a4 0210 	sub.w	r2, r4, #16
    43f4:	f022 0c0f 	bic.w	ip, r2, #15
    43f8:	f103 0e20 	add.w	lr, r3, #32
    43fc:	44e6      	add	lr, ip
    43fe:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    4402:	f103 0210 	add.w	r2, r3, #16
    4406:	e942 5504 	strd	r5, r5, [r2, #-16]
    440a:	e942 5502 	strd	r5, r5, [r2, #-8]
    440e:	3210      	adds	r2, #16
    4410:	4572      	cmp	r2, lr
    4412:	d1f8      	bne.n	4406 <memset+0x46>
    4414:	f10c 0201 	add.w	r2, ip, #1
    4418:	f014 0f0c 	tst.w	r4, #12
    441c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    4420:	f004 0c0f 	and.w	ip, r4, #15
    4424:	d013      	beq.n	444e <memset+0x8e>
    4426:	f1ac 0304 	sub.w	r3, ip, #4
    442a:	f023 0303 	bic.w	r3, r3, #3
    442e:	3304      	adds	r3, #4
    4430:	4413      	add	r3, r2
    4432:	f842 5b04 	str.w	r5, [r2], #4
    4436:	4293      	cmp	r3, r2
    4438:	d1fb      	bne.n	4432 <memset+0x72>
    443a:	f00c 0403 	and.w	r4, ip, #3
    443e:	b12c      	cbz	r4, 444c <memset+0x8c>
    4440:	b2c9      	uxtb	r1, r1
    4442:	441c      	add	r4, r3
    4444:	f803 1b01 	strb.w	r1, [r3], #1
    4448:	429c      	cmp	r4, r3
    444a:	d1fb      	bne.n	4444 <memset+0x84>
    444c:	bd30      	pop	{r4, r5, pc}
    444e:	4664      	mov	r4, ip
    4450:	4613      	mov	r3, r2
    4452:	2c00      	cmp	r4, #0
    4454:	d1f4      	bne.n	4440 <memset+0x80>
    4456:	e7f9      	b.n	444c <memset+0x8c>
    4458:	4603      	mov	r3, r0
    445a:	4614      	mov	r4, r2
    445c:	e7bf      	b.n	43de <memset+0x1e>
    445e:	461a      	mov	r2, r3
    4460:	46a4      	mov	ip, r4
    4462:	e7e0      	b.n	4426 <memset+0x66>

00004464 <strncmp>:
    4464:	2a00      	cmp	r2, #0
    4466:	d03e      	beq.n	44e6 <strncmp+0x82>
    4468:	ea40 0301 	orr.w	r3, r0, r1
    446c:	079b      	lsls	r3, r3, #30
    446e:	b530      	push	{r4, r5, lr}
    4470:	4684      	mov	ip, r0
    4472:	d12f      	bne.n	44d4 <strncmp+0x70>
    4474:	2a03      	cmp	r2, #3
    4476:	d92d      	bls.n	44d4 <strncmp+0x70>
    4478:	460b      	mov	r3, r1
    447a:	e008      	b.n	448e <strncmp+0x2a>
    447c:	3a04      	subs	r2, #4
    447e:	4684      	mov	ip, r0
    4480:	4619      	mov	r1, r3
    4482:	d025      	beq.n	44d0 <strncmp+0x6c>
    4484:	f01e 3f80 	tst.w	lr, #2155905152	; 0x80808080
    4488:	d122      	bne.n	44d0 <strncmp+0x6c>
    448a:	2a03      	cmp	r2, #3
    448c:	d922      	bls.n	44d4 <strncmp+0x70>
    448e:	6804      	ldr	r4, [r0, #0]
    4490:	4619      	mov	r1, r3
    4492:	f853 5b04 	ldr.w	r5, [r3], #4
    4496:	f1a4 3e01 	sub.w	lr, r4, #16843009	; 0x1010101
    449a:	42ac      	cmp	r4, r5
    449c:	4684      	mov	ip, r0
    449e:	ea2e 0e04 	bic.w	lr, lr, r4
    44a2:	f100 0004 	add.w	r0, r0, #4
    44a6:	d0e9      	beq.n	447c <strncmp+0x18>
    44a8:	f89c 0000 	ldrb.w	r0, [ip]
    44ac:	780c      	ldrb	r4, [r1, #0]
    44ae:	42a0      	cmp	r0, r4
    44b0:	d11b      	bne.n	44ea <strncmp+0x86>
    44b2:	46e6      	mov	lr, ip
    44b4:	b168      	cbz	r0, 44d2 <strncmp+0x6e>
    44b6:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
    44ba:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    44be:	eba2 030e 	sub.w	r3, r2, lr
    44c2:	42a0      	cmp	r0, r4
    44c4:	f103 33ff 	add.w	r3, r3, #4294967295
    44c8:	d10f      	bne.n	44ea <strncmp+0x86>
    44ca:	eb1c 0303 	adds.w	r3, ip, r3
    44ce:	d1f1      	bne.n	44b4 <strncmp+0x50>
    44d0:	2000      	movs	r0, #0
    44d2:	bd30      	pop	{r4, r5, pc}
    44d4:	f89c 0000 	ldrb.w	r0, [ip]
    44d8:	780c      	ldrb	r4, [r1, #0]
    44da:	4284      	cmp	r4, r0
    44dc:	d105      	bne.n	44ea <strncmp+0x86>
    44de:	2a01      	cmp	r2, #1
    44e0:	d0f6      	beq.n	44d0 <strncmp+0x6c>
    44e2:	46e6      	mov	lr, ip
    44e4:	e7e6      	b.n	44b4 <strncmp+0x50>
    44e6:	4610      	mov	r0, r2
    44e8:	4770      	bx	lr
    44ea:	1b00      	subs	r0, r0, r4
    44ec:	bd30      	pop	{r4, r5, pc}
    44ee:	bf00      	nop

000044f0 <strncpy>:
    44f0:	ea40 0301 	orr.w	r3, r0, r1
    44f4:	079b      	lsls	r3, r3, #30
    44f6:	b530      	push	{r4, r5, lr}
    44f8:	d101      	bne.n	44fe <strncpy+0xe>
    44fa:	2a03      	cmp	r2, #3
    44fc:	d80f      	bhi.n	451e <strncpy+0x2e>
    44fe:	4684      	mov	ip, r0
    4500:	f101 3eff 	add.w	lr, r1, #4294967295
    4504:	e007      	b.n	4516 <strncpy+0x26>
    4506:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    450a:	f803 1b01 	strb.w	r1, [r3], #1
    450e:	1e54      	subs	r4, r2, #1
    4510:	b1c1      	cbz	r1, 4544 <strncpy+0x54>
    4512:	469c      	mov	ip, r3
    4514:	4622      	mov	r2, r4
    4516:	4663      	mov	r3, ip
    4518:	2a00      	cmp	r2, #0
    451a:	d1f4      	bne.n	4506 <strncpy+0x16>
    451c:	bd30      	pop	{r4, r5, pc}
    451e:	460b      	mov	r3, r1
    4520:	4684      	mov	ip, r0
    4522:	4619      	mov	r1, r3
    4524:	f853 5b04 	ldr.w	r5, [r3], #4
    4528:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
    452c:	ea24 0405 	bic.w	r4, r4, r5
    4530:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    4534:	d1e4      	bne.n	4500 <strncpy+0x10>
    4536:	3a04      	subs	r2, #4
    4538:	2a03      	cmp	r2, #3
    453a:	f84c 5b04 	str.w	r5, [ip], #4
    453e:	4619      	mov	r1, r3
    4540:	d8ef      	bhi.n	4522 <strncpy+0x32>
    4542:	e7dd      	b.n	4500 <strncpy+0x10>
    4544:	4494      	add	ip, r2
    4546:	2c00      	cmp	r4, #0
    4548:	d0e8      	beq.n	451c <strncpy+0x2c>
    454a:	f803 1b01 	strb.w	r1, [r3], #1
    454e:	4563      	cmp	r3, ip
    4550:	d1fb      	bne.n	454a <strncpy+0x5a>
    4552:	bd30      	pop	{r4, r5, pc}

00004554 <__locale_mb_cur_max>:
    4554:	4b01      	ldr	r3, [pc, #4]	; (455c <__locale_mb_cur_max+0x8>)
    4556:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
    455a:	4770      	bx	lr
    455c:	200010f8 	.word	0x200010f8

00004560 <_close_r>:
    4560:	b538      	push	{r3, r4, r5, lr}
    4562:	4d07      	ldr	r5, [pc, #28]	; (4580 <_close_r+0x20>)
    4564:	2200      	movs	r2, #0
    4566:	4604      	mov	r4, r0
    4568:	4608      	mov	r0, r1
    456a:	602a      	str	r2, [r5, #0]
    456c:	f7fd fc50 	bl	1e10 <_close>
    4570:	1c43      	adds	r3, r0, #1
    4572:	d000      	beq.n	4576 <_close_r+0x16>
    4574:	bd38      	pop	{r3, r4, r5, pc}
    4576:	682b      	ldr	r3, [r5, #0]
    4578:	2b00      	cmp	r3, #0
    457a:	d0fb      	beq.n	4574 <_close_r+0x14>
    457c:	6023      	str	r3, [r4, #0]
    457e:	bd38      	pop	{r3, r4, r5, pc}
    4580:	20002068 	.word	0x20002068

00004584 <_lseek_r>:
    4584:	b538      	push	{r3, r4, r5, lr}
    4586:	460c      	mov	r4, r1
    4588:	4d08      	ldr	r5, [pc, #32]	; (45ac <_lseek_r+0x28>)
    458a:	4684      	mov	ip, r0
    458c:	4611      	mov	r1, r2
    458e:	4620      	mov	r0, r4
    4590:	461a      	mov	r2, r3
    4592:	2300      	movs	r3, #0
    4594:	602b      	str	r3, [r5, #0]
    4596:	4664      	mov	r4, ip
    4598:	f7fd fc46 	bl	1e28 <_lseek>
    459c:	1c43      	adds	r3, r0, #1
    459e:	d000      	beq.n	45a2 <_lseek_r+0x1e>
    45a0:	bd38      	pop	{r3, r4, r5, pc}
    45a2:	682b      	ldr	r3, [r5, #0]
    45a4:	2b00      	cmp	r3, #0
    45a6:	d0fb      	beq.n	45a0 <_lseek_r+0x1c>
    45a8:	6023      	str	r3, [r4, #0]
    45aa:	bd38      	pop	{r3, r4, r5, pc}
    45ac:	20002068 	.word	0x20002068

000045b0 <_read_r>:
    45b0:	b538      	push	{r3, r4, r5, lr}
    45b2:	460c      	mov	r4, r1
    45b4:	4d08      	ldr	r5, [pc, #32]	; (45d8 <_read_r+0x28>)
    45b6:	4684      	mov	ip, r0
    45b8:	4611      	mov	r1, r2
    45ba:	4620      	mov	r0, r4
    45bc:	461a      	mov	r2, r3
    45be:	2300      	movs	r3, #0
    45c0:	602b      	str	r3, [r5, #0]
    45c2:	4664      	mov	r4, ip
    45c4:	f7fd fc22 	bl	1e0c <_read>
    45c8:	1c43      	adds	r3, r0, #1
    45ca:	d000      	beq.n	45ce <_read_r+0x1e>
    45cc:	bd38      	pop	{r3, r4, r5, pc}
    45ce:	682b      	ldr	r3, [r5, #0]
    45d0:	2b00      	cmp	r3, #0
    45d2:	d0fb      	beq.n	45cc <_read_r+0x1c>
    45d4:	6023      	str	r3, [r4, #0]
    45d6:	bd38      	pop	{r3, r4, r5, pc}
    45d8:	20002068 	.word	0x20002068

000045dc <_sbrk_r>:
    45dc:	b538      	push	{r3, r4, r5, lr}
    45de:	4d07      	ldr	r5, [pc, #28]	; (45fc <_sbrk_r+0x20>)
    45e0:	2200      	movs	r2, #0
    45e2:	4604      	mov	r4, r0
    45e4:	4608      	mov	r0, r1
    45e6:	602a      	str	r2, [r5, #0]
    45e8:	f7fd fbf6 	bl	1dd8 <_sbrk>
    45ec:	1c43      	adds	r3, r0, #1
    45ee:	d000      	beq.n	45f2 <_sbrk_r+0x16>
    45f0:	bd38      	pop	{r3, r4, r5, pc}
    45f2:	682b      	ldr	r3, [r5, #0]
    45f4:	2b00      	cmp	r3, #0
    45f6:	d0fb      	beq.n	45f0 <_sbrk_r+0x14>
    45f8:	6023      	str	r3, [r4, #0]
    45fa:	bd38      	pop	{r3, r4, r5, pc}
    45fc:	20002068 	.word	0x20002068

00004600 <_write_r>:
    4600:	b538      	push	{r3, r4, r5, lr}
    4602:	460c      	mov	r4, r1
    4604:	4d08      	ldr	r5, [pc, #32]	; (4628 <_write_r+0x28>)
    4606:	4684      	mov	ip, r0
    4608:	4611      	mov	r1, r2
    460a:	4620      	mov	r0, r4
    460c:	461a      	mov	r2, r3
    460e:	2300      	movs	r3, #0
    4610:	602b      	str	r3, [r5, #0]
    4612:	4664      	mov	r4, ip
    4614:	f7fc ff1c 	bl	1450 <_write>
    4618:	1c43      	adds	r3, r0, #1
    461a:	d000      	beq.n	461e <_write_r+0x1e>
    461c:	bd38      	pop	{r3, r4, r5, pc}
    461e:	682b      	ldr	r3, [r5, #0]
    4620:	2b00      	cmp	r3, #0
    4622:	d0fb      	beq.n	461c <_write_r+0x1c>
    4624:	6023      	str	r3, [r4, #0]
    4626:	bd38      	pop	{r3, r4, r5, pc}
    4628:	20002068 	.word	0x20002068

0000462c <__errno>:
    462c:	4b01      	ldr	r3, [pc, #4]	; (4634 <__errno+0x8>)
    462e:	6818      	ldr	r0, [r3, #0]
    4630:	4770      	bx	lr
    4632:	bf00      	nop
    4634:	20001680 	.word	0x20001680

00004638 <__libc_init_array>:
    4638:	b570      	push	{r4, r5, r6, lr}
    463a:	4e0d      	ldr	r6, [pc, #52]	; (4670 <__libc_init_array+0x38>)
    463c:	4d0d      	ldr	r5, [pc, #52]	; (4674 <__libc_init_array+0x3c>)
    463e:	1b76      	subs	r6, r6, r5
    4640:	10b6      	asrs	r6, r6, #2
    4642:	d006      	beq.n	4652 <__libc_init_array+0x1a>
    4644:	2400      	movs	r4, #0
    4646:	f855 3b04 	ldr.w	r3, [r5], #4
    464a:	3401      	adds	r4, #1
    464c:	4798      	blx	r3
    464e:	42a6      	cmp	r6, r4
    4650:	d1f9      	bne.n	4646 <__libc_init_array+0xe>
    4652:	4e09      	ldr	r6, [pc, #36]	; (4678 <__libc_init_array+0x40>)
    4654:	4d09      	ldr	r5, [pc, #36]	; (467c <__libc_init_array+0x44>)
    4656:	1b76      	subs	r6, r6, r5
    4658:	f005 fb96 	bl	9d88 <___init_veneer>
    465c:	10b6      	asrs	r6, r6, #2
    465e:	d006      	beq.n	466e <__libc_init_array+0x36>
    4660:	2400      	movs	r4, #0
    4662:	f855 3b04 	ldr.w	r3, [r5], #4
    4666:	3401      	adds	r4, #1
    4668:	4798      	blx	r3
    466a:	42a6      	cmp	r6, r4
    466c:	d1f9      	bne.n	4662 <__libc_init_array+0x2a>
    466e:	bd70      	pop	{r4, r5, r6, pc}
    4670:	60001e80 	.word	0x60001e80
    4674:	60001e80 	.word	0x60001e80
    4678:	60001e84 	.word	0x60001e84
    467c:	60001e80 	.word	0x60001e80

00004680 <__retarget_lock_init_recursive>:
    4680:	4770      	bx	lr
    4682:	bf00      	nop

00004684 <__retarget_lock_close_recursive>:
    4684:	4770      	bx	lr
    4686:	bf00      	nop

00004688 <__retarget_lock_acquire_recursive>:
    4688:	4770      	bx	lr
    468a:	bf00      	nop

0000468c <__retarget_lock_release_recursive>:
    468c:	4770      	bx	lr
    468e:	bf00      	nop
	...
    46a0:	eba2 0003 	sub.w	r0, r2, r3
    46a4:	4770      	bx	lr
    46a6:	bf00      	nop

000046a8 <strcmp>:
    46a8:	7802      	ldrb	r2, [r0, #0]
    46aa:	780b      	ldrb	r3, [r1, #0]
    46ac:	2a01      	cmp	r2, #1
    46ae:	bf28      	it	cs
    46b0:	429a      	cmpcs	r2, r3
    46b2:	d1f5      	bne.n	46a0 <__retarget_lock_release_recursive+0x14>
    46b4:	e96d 4504 	strd	r4, r5, [sp, #-16]!
    46b8:	ea40 0401 	orr.w	r4, r0, r1
    46bc:	e9cd 6702 	strd	r6, r7, [sp, #8]
    46c0:	f06f 0c00 	mvn.w	ip, #0
    46c4:	ea4f 7244 	mov.w	r2, r4, lsl #29
    46c8:	b312      	cbz	r2, 4710 <strcmp+0x68>
    46ca:	ea80 0401 	eor.w	r4, r0, r1
    46ce:	f014 0f07 	tst.w	r4, #7
    46d2:	d16a      	bne.n	47aa <strcmp+0x102>
    46d4:	f000 0407 	and.w	r4, r0, #7
    46d8:	f020 0007 	bic.w	r0, r0, #7
    46dc:	f004 0503 	and.w	r5, r4, #3
    46e0:	f021 0107 	bic.w	r1, r1, #7
    46e4:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    46e8:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    46ec:	f014 0f04 	tst.w	r4, #4
    46f0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    46f4:	fa0c f405 	lsl.w	r4, ip, r5
    46f8:	ea62 0204 	orn	r2, r2, r4
    46fc:	ea66 0604 	orn	r6, r6, r4
    4700:	d00a      	beq.n	4718 <strcmp+0x70>
    4702:	ea63 0304 	orn	r3, r3, r4
    4706:	4662      	mov	r2, ip
    4708:	ea67 0704 	orn	r7, r7, r4
    470c:	4666      	mov	r6, ip
    470e:	e003      	b.n	4718 <strcmp+0x70>
    4710:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    4714:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    4718:	fa82 f54c 	uadd8	r5, r2, ip
    471c:	ea82 0406 	eor.w	r4, r2, r6
    4720:	faa4 f48c 	sel	r4, r4, ip
    4724:	bb6c      	cbnz	r4, 4782 <strcmp+0xda>
    4726:	fa83 f54c 	uadd8	r5, r3, ip
    472a:	ea83 0507 	eor.w	r5, r3, r7
    472e:	faa5 f58c 	sel	r5, r5, ip
    4732:	b995      	cbnz	r5, 475a <strcmp+0xb2>
    4734:	e950 2302 	ldrd	r2, r3, [r0, #-8]
    4738:	e951 6702 	ldrd	r6, r7, [r1, #-8]
    473c:	fa82 f54c 	uadd8	r5, r2, ip
    4740:	ea82 0406 	eor.w	r4, r2, r6
    4744:	faa4 f48c 	sel	r4, r4, ip
    4748:	fa83 f54c 	uadd8	r5, r3, ip
    474c:	ea83 0507 	eor.w	r5, r3, r7
    4750:	faa5 f58c 	sel	r5, r5, ip
    4754:	4325      	orrs	r5, r4
    4756:	d0db      	beq.n	4710 <strcmp+0x68>
    4758:	b99c      	cbnz	r4, 4782 <strcmp+0xda>
    475a:	ba2d      	rev	r5, r5
    475c:	fab5 f485 	clz	r4, r5
    4760:	f024 0407 	bic.w	r4, r4, #7
    4764:	fa27 f104 	lsr.w	r1, r7, r4
    4768:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    476c:	fa23 f304 	lsr.w	r3, r3, r4
    4770:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    4774:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    4778:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    477c:	eba0 0001 	sub.w	r0, r0, r1
    4780:	4770      	bx	lr
    4782:	ba24      	rev	r4, r4
    4784:	fab4 f484 	clz	r4, r4
    4788:	f024 0407 	bic.w	r4, r4, #7
    478c:	fa26 f104 	lsr.w	r1, r6, r4
    4790:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    4794:	fa22 f204 	lsr.w	r2, r2, r4
    4798:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    479c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    47a0:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    47a4:	eba0 0001 	sub.w	r0, r0, r1
    47a8:	4770      	bx	lr
    47aa:	f014 0f03 	tst.w	r4, #3
    47ae:	d13c      	bne.n	482a <strcmp+0x182>
    47b0:	f010 0403 	ands.w	r4, r0, #3
    47b4:	d128      	bne.n	4808 <strcmp+0x160>
    47b6:	f850 2b08 	ldr.w	r2, [r0], #8
    47ba:	f851 3b08 	ldr.w	r3, [r1], #8
    47be:	fa82 f54c 	uadd8	r5, r2, ip
    47c2:	ea82 0503 	eor.w	r5, r2, r3
    47c6:	faa5 f58c 	sel	r5, r5, ip
    47ca:	b95d      	cbnz	r5, 47e4 <strcmp+0x13c>
    47cc:	f850 2c04 	ldr.w	r2, [r0, #-4]
    47d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
    47d4:	fa82 f54c 	uadd8	r5, r2, ip
    47d8:	ea82 0503 	eor.w	r5, r2, r3
    47dc:	faa5 f58c 	sel	r5, r5, ip
    47e0:	2d00      	cmp	r5, #0
    47e2:	d0e8      	beq.n	47b6 <strcmp+0x10e>
    47e4:	ba2d      	rev	r5, r5
    47e6:	fab5 f485 	clz	r4, r5
    47ea:	f024 0407 	bic.w	r4, r4, #7
    47ee:	fa23 f104 	lsr.w	r1, r3, r4
    47f2:	fa22 f204 	lsr.w	r2, r2, r4
    47f6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    47fa:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    47fe:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    4802:	eba0 0001 	sub.w	r0, r0, r1
    4806:	4770      	bx	lr
    4808:	ea4f 04c4 	mov.w	r4, r4, lsl #3
    480c:	f020 0003 	bic.w	r0, r0, #3
    4810:	f850 2b08 	ldr.w	r2, [r0], #8
    4814:	f021 0103 	bic.w	r1, r1, #3
    4818:	f851 3b08 	ldr.w	r3, [r1], #8
    481c:	fa0c f404 	lsl.w	r4, ip, r4
    4820:	ea62 0204 	orn	r2, r2, r4
    4824:	ea63 0304 	orn	r3, r3, r4
    4828:	e7c9      	b.n	47be <strcmp+0x116>
    482a:	f010 0403 	ands.w	r4, r0, #3
    482e:	d01a      	beq.n	4866 <strcmp+0x1be>
    4830:	eba1 0104 	sub.w	r1, r1, r4
    4834:	f020 0003 	bic.w	r0, r0, #3
    4838:	07e4      	lsls	r4, r4, #31
    483a:	f850 2b04 	ldr.w	r2, [r0], #4
    483e:	d006      	beq.n	484e <strcmp+0x1a6>
    4840:	d20f      	bcs.n	4862 <strcmp+0x1ba>
    4842:	788b      	ldrb	r3, [r1, #2]
    4844:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
    4848:	1ae4      	subs	r4, r4, r3
    484a:	d106      	bne.n	485a <strcmp+0x1b2>
    484c:	b12b      	cbz	r3, 485a <strcmp+0x1b2>
    484e:	78cb      	ldrb	r3, [r1, #3]
    4850:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
    4854:	1ae4      	subs	r4, r4, r3
    4856:	d100      	bne.n	485a <strcmp+0x1b2>
    4858:	b91b      	cbnz	r3, 4862 <strcmp+0x1ba>
    485a:	4620      	mov	r0, r4
    485c:	f85d 4b10 	ldr.w	r4, [sp], #16
    4860:	4770      	bx	lr
    4862:	f101 0104 	add.w	r1, r1, #4
    4866:	f850 2b04 	ldr.w	r2, [r0], #4
    486a:	07cc      	lsls	r4, r1, #31
    486c:	f021 0103 	bic.w	r1, r1, #3
    4870:	f851 3b04 	ldr.w	r3, [r1], #4
    4874:	d848      	bhi.n	4908 <strcmp+0x260>
    4876:	d224      	bcs.n	48c2 <strcmp+0x21a>
    4878:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
    487c:	fa82 f54c 	uadd8	r5, r2, ip
    4880:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
    4884:	faa5 f58c 	sel	r5, r5, ip
    4888:	d10a      	bne.n	48a0 <strcmp+0x1f8>
    488a:	b965      	cbnz	r5, 48a6 <strcmp+0x1fe>
    488c:	f851 3b04 	ldr.w	r3, [r1], #4
    4890:	ea84 0402 	eor.w	r4, r4, r2
    4894:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
    4898:	d10e      	bne.n	48b8 <strcmp+0x210>
    489a:	f850 2b04 	ldr.w	r2, [r0], #4
    489e:	e7eb      	b.n	4878 <strcmp+0x1d0>
    48a0:	ea4f 2313 	mov.w	r3, r3, lsr #8
    48a4:	e055      	b.n	4952 <strcmp+0x2aa>
    48a6:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
    48aa:	d14d      	bne.n	4948 <strcmp+0x2a0>
    48ac:	7808      	ldrb	r0, [r1, #0]
    48ae:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    48b2:	f1c0 0000 	rsb	r0, r0, #0
    48b6:	4770      	bx	lr
    48b8:	ea4f 6212 	mov.w	r2, r2, lsr #24
    48bc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    48c0:	e047      	b.n	4952 <strcmp+0x2aa>
    48c2:	ea02 441c 	and.w	r4, r2, ip, lsr #16
    48c6:	fa82 f54c 	uadd8	r5, r2, ip
    48ca:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
    48ce:	faa5 f58c 	sel	r5, r5, ip
    48d2:	d10a      	bne.n	48ea <strcmp+0x242>
    48d4:	b965      	cbnz	r5, 48f0 <strcmp+0x248>
    48d6:	f851 3b04 	ldr.w	r3, [r1], #4
    48da:	ea84 0402 	eor.w	r4, r4, r2
    48de:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
    48e2:	d10c      	bne.n	48fe <strcmp+0x256>
    48e4:	f850 2b04 	ldr.w	r2, [r0], #4
    48e8:	e7eb      	b.n	48c2 <strcmp+0x21a>
    48ea:	ea4f 4313 	mov.w	r3, r3, lsr #16
    48ee:	e030      	b.n	4952 <strcmp+0x2aa>
    48f0:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
    48f4:	d128      	bne.n	4948 <strcmp+0x2a0>
    48f6:	880b      	ldrh	r3, [r1, #0]
    48f8:	ea4f 4212 	mov.w	r2, r2, lsr #16
    48fc:	e029      	b.n	4952 <strcmp+0x2aa>
    48fe:	ea4f 4212 	mov.w	r2, r2, lsr #16
    4902:	ea03 431c 	and.w	r3, r3, ip, lsr #16
    4906:	e024      	b.n	4952 <strcmp+0x2aa>
    4908:	f002 04ff 	and.w	r4, r2, #255	; 0xff
    490c:	fa82 f54c 	uadd8	r5, r2, ip
    4910:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
    4914:	faa5 f58c 	sel	r5, r5, ip
    4918:	d10a      	bne.n	4930 <strcmp+0x288>
    491a:	b965      	cbnz	r5, 4936 <strcmp+0x28e>
    491c:	f851 3b04 	ldr.w	r3, [r1], #4
    4920:	ea84 0402 	eor.w	r4, r4, r2
    4924:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
    4928:	d109      	bne.n	493e <strcmp+0x296>
    492a:	f850 2b04 	ldr.w	r2, [r0], #4
    492e:	e7eb      	b.n	4908 <strcmp+0x260>
    4930:	ea4f 6313 	mov.w	r3, r3, lsr #24
    4934:	e00d      	b.n	4952 <strcmp+0x2aa>
    4936:	f015 0fff 	tst.w	r5, #255	; 0xff
    493a:	d105      	bne.n	4948 <strcmp+0x2a0>
    493c:	680b      	ldr	r3, [r1, #0]
    493e:	ea4f 2212 	mov.w	r2, r2, lsr #8
    4942:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    4946:	e004      	b.n	4952 <strcmp+0x2aa>
    4948:	f04f 0000 	mov.w	r0, #0
    494c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    4950:	4770      	bx	lr
    4952:	ba12      	rev	r2, r2
    4954:	ba1b      	rev	r3, r3
    4956:	fa82 f44c 	uadd8	r4, r2, ip
    495a:	ea82 0403 	eor.w	r4, r2, r3
    495e:	faa4 f58c 	sel	r5, r4, ip
    4962:	fab5 f485 	clz	r4, r5
    4966:	fa02 f204 	lsl.w	r2, r2, r4
    496a:	fa03 f304 	lsl.w	r3, r3, r4
    496e:	ea4f 6012 	mov.w	r0, r2, lsr #24
    4972:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    4976:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
    497a:	4770      	bx	lr

0000497c <strcpy>:
    497c:	ea80 0201 	eor.w	r2, r0, r1
    4980:	4684      	mov	ip, r0
    4982:	f012 0f03 	tst.w	r2, #3
    4986:	d14f      	bne.n	4a28 <strcpy+0xac>
    4988:	f011 0f03 	tst.w	r1, #3
    498c:	d132      	bne.n	49f4 <strcpy+0x78>
    498e:	f84d 4d04 	str.w	r4, [sp, #-4]!
    4992:	f011 0f04 	tst.w	r1, #4
    4996:	f851 3b04 	ldr.w	r3, [r1], #4
    499a:	d00b      	beq.n	49b4 <strcpy+0x38>
    499c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    49a0:	439a      	bics	r2, r3
    49a2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    49a6:	bf04      	itt	eq
    49a8:	f84c 3b04 	streq.w	r3, [ip], #4
    49ac:	f851 3b04 	ldreq.w	r3, [r1], #4
    49b0:	d116      	bne.n	49e0 <strcpy+0x64>
    49b2:	bf00      	nop
    49b4:	f851 4b04 	ldr.w	r4, [r1], #4
    49b8:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    49bc:	439a      	bics	r2, r3
    49be:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    49c2:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    49c6:	d10b      	bne.n	49e0 <strcpy+0x64>
    49c8:	f84c 3b04 	str.w	r3, [ip], #4
    49cc:	43a2      	bics	r2, r4
    49ce:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    49d2:	bf04      	itt	eq
    49d4:	f851 3b04 	ldreq.w	r3, [r1], #4
    49d8:	f84c 4b04 	streq.w	r4, [ip], #4
    49dc:	d0ea      	beq.n	49b4 <strcpy+0x38>
    49de:	4623      	mov	r3, r4
    49e0:	f80c 3b01 	strb.w	r3, [ip], #1
    49e4:	f013 0fff 	tst.w	r3, #255	; 0xff
    49e8:	ea4f 2333 	mov.w	r3, r3, ror #8
    49ec:	d1f8      	bne.n	49e0 <strcpy+0x64>
    49ee:	f85d 4b04 	ldr.w	r4, [sp], #4
    49f2:	4770      	bx	lr
    49f4:	f011 0f01 	tst.w	r1, #1
    49f8:	d006      	beq.n	4a08 <strcpy+0x8c>
    49fa:	f811 2b01 	ldrb.w	r2, [r1], #1
    49fe:	f80c 2b01 	strb.w	r2, [ip], #1
    4a02:	2a00      	cmp	r2, #0
    4a04:	bf08      	it	eq
    4a06:	4770      	bxeq	lr
    4a08:	f011 0f02 	tst.w	r1, #2
    4a0c:	d0bf      	beq.n	498e <strcpy+0x12>
    4a0e:	f831 2b02 	ldrh.w	r2, [r1], #2
    4a12:	f012 0fff 	tst.w	r2, #255	; 0xff
    4a16:	bf16      	itet	ne
    4a18:	f82c 2b02 	strhne.w	r2, [ip], #2
    4a1c:	f88c 2000 	strbeq.w	r2, [ip]
    4a20:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
    4a24:	d1b3      	bne.n	498e <strcpy+0x12>
    4a26:	4770      	bx	lr
    4a28:	f811 2b01 	ldrb.w	r2, [r1], #1
    4a2c:	f80c 2b01 	strb.w	r2, [ip], #1
    4a30:	2a00      	cmp	r2, #0
    4a32:	d1f9      	bne.n	4a28 <strcpy+0xac>
    4a34:	4770      	bx	lr
    4a36:	bf00      	nop
	...

00004a40 <strlen>:
    4a40:	f890 f000 	pld	[r0]
    4a44:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    4a48:	f020 0107 	bic.w	r1, r0, #7
    4a4c:	f06f 0c00 	mvn.w	ip, #0
    4a50:	f010 0407 	ands.w	r4, r0, #7
    4a54:	f891 f020 	pld	[r1, #32]
    4a58:	f040 8049 	bne.w	4aee <strlen+0xae>
    4a5c:	f04f 0400 	mov.w	r4, #0
    4a60:	f06f 0007 	mvn.w	r0, #7
    4a64:	e9d1 2300 	ldrd	r2, r3, [r1]
    4a68:	f891 f040 	pld	[r1, #64]	; 0x40
    4a6c:	f100 0008 	add.w	r0, r0, #8
    4a70:	fa82 f24c 	uadd8	r2, r2, ip
    4a74:	faa4 f28c 	sel	r2, r4, ip
    4a78:	fa83 f34c 	uadd8	r3, r3, ip
    4a7c:	faa2 f38c 	sel	r3, r2, ip
    4a80:	bb4b      	cbnz	r3, 4ad6 <strlen+0x96>
    4a82:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    4a86:	fa82 f24c 	uadd8	r2, r2, ip
    4a8a:	f100 0008 	add.w	r0, r0, #8
    4a8e:	faa4 f28c 	sel	r2, r4, ip
    4a92:	fa83 f34c 	uadd8	r3, r3, ip
    4a96:	faa2 f38c 	sel	r3, r2, ip
    4a9a:	b9e3      	cbnz	r3, 4ad6 <strlen+0x96>
    4a9c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    4aa0:	fa82 f24c 	uadd8	r2, r2, ip
    4aa4:	f100 0008 	add.w	r0, r0, #8
    4aa8:	faa4 f28c 	sel	r2, r4, ip
    4aac:	fa83 f34c 	uadd8	r3, r3, ip
    4ab0:	faa2 f38c 	sel	r3, r2, ip
    4ab4:	b97b      	cbnz	r3, 4ad6 <strlen+0x96>
    4ab6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    4aba:	f101 0120 	add.w	r1, r1, #32
    4abe:	fa82 f24c 	uadd8	r2, r2, ip
    4ac2:	f100 0008 	add.w	r0, r0, #8
    4ac6:	faa4 f28c 	sel	r2, r4, ip
    4aca:	fa83 f34c 	uadd8	r3, r3, ip
    4ace:	faa2 f38c 	sel	r3, r2, ip
    4ad2:	2b00      	cmp	r3, #0
    4ad4:	d0c6      	beq.n	4a64 <strlen+0x24>
    4ad6:	2a00      	cmp	r2, #0
    4ad8:	bf04      	itt	eq
    4ada:	3004      	addeq	r0, #4
    4adc:	461a      	moveq	r2, r3
    4ade:	ba12      	rev	r2, r2
    4ae0:	fab2 f282 	clz	r2, r2
    4ae4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    4ae8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    4aec:	4770      	bx	lr
    4aee:	e9d1 2300 	ldrd	r2, r3, [r1]
    4af2:	f004 0503 	and.w	r5, r4, #3
    4af6:	f1c4 0000 	rsb	r0, r4, #0
    4afa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    4afe:	f014 0f04 	tst.w	r4, #4
    4b02:	f891 f040 	pld	[r1, #64]	; 0x40
    4b06:	fa0c f505 	lsl.w	r5, ip, r5
    4b0a:	ea62 0205 	orn	r2, r2, r5
    4b0e:	bf1c      	itt	ne
    4b10:	ea63 0305 	ornne	r3, r3, r5
    4b14:	4662      	movne	r2, ip
    4b16:	f04f 0400 	mov.w	r4, #0
    4b1a:	e7a9      	b.n	4a70 <strlen+0x30>

00004b1c <__register_exitproc>:
    4b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4b20:	f8df a07c 	ldr.w	sl, [pc, #124]	; 4ba0 <__register_exitproc+0x84>
    4b24:	4606      	mov	r6, r0
    4b26:	f8da 0000 	ldr.w	r0, [sl]
    4b2a:	4698      	mov	r8, r3
    4b2c:	460f      	mov	r7, r1
    4b2e:	4691      	mov	r9, r2
    4b30:	f7ff fdaa 	bl	4688 <__retarget_lock_acquire_recursive>
    4b34:	4b18      	ldr	r3, [pc, #96]	; (4b98 <__register_exitproc+0x7c>)
    4b36:	681c      	ldr	r4, [r3, #0]
    4b38:	b324      	cbz	r4, 4b84 <__register_exitproc+0x68>
    4b3a:	6865      	ldr	r5, [r4, #4]
    4b3c:	2d1f      	cmp	r5, #31
    4b3e:	dc24      	bgt.n	4b8a <__register_exitproc+0x6e>
    4b40:	b95e      	cbnz	r6, 4b5a <__register_exitproc+0x3e>
    4b42:	1c6b      	adds	r3, r5, #1
    4b44:	3502      	adds	r5, #2
    4b46:	f8da 0000 	ldr.w	r0, [sl]
    4b4a:	6063      	str	r3, [r4, #4]
    4b4c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
    4b50:	f7ff fd9c 	bl	468c <__retarget_lock_release_recursive>
    4b54:	2000      	movs	r0, #0
    4b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4b5a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    4b5e:	2301      	movs	r3, #1
    4b60:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    4b64:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
    4b68:	40ab      	lsls	r3, r5
    4b6a:	431a      	orrs	r2, r3
    4b6c:	2e02      	cmp	r6, #2
    4b6e:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
    4b72:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    4b76:	d1e4      	bne.n	4b42 <__register_exitproc+0x26>
    4b78:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    4b7c:	431a      	orrs	r2, r3
    4b7e:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    4b82:	e7de      	b.n	4b42 <__register_exitproc+0x26>
    4b84:	4c05      	ldr	r4, [pc, #20]	; (4b9c <__register_exitproc+0x80>)
    4b86:	601c      	str	r4, [r3, #0]
    4b88:	e7d7      	b.n	4b3a <__register_exitproc+0x1e>
    4b8a:	f8da 0000 	ldr.w	r0, [sl]
    4b8e:	f7ff fd7d 	bl	468c <__retarget_lock_release_recursive>
    4b92:	f04f 30ff 	mov.w	r0, #4294967295
    4b96:	e7de      	b.n	4b56 <__register_exitproc+0x3a>
    4b98:	20001d48 	.word	0x20001d48
    4b9c:	20001d4c 	.word	0x20001d4c
    4ba0:	200010ec 	.word	0x200010ec

00004ba4 <_malloc_trim_r>:
    4ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4ba6:	4f24      	ldr	r7, [pc, #144]	; (4c38 <_malloc_trim_r+0x94>)
    4ba8:	460c      	mov	r4, r1
    4baa:	4606      	mov	r6, r0
    4bac:	f7fe ff30 	bl	3a10 <__malloc_lock>
    4bb0:	68bb      	ldr	r3, [r7, #8]
    4bb2:	685d      	ldr	r5, [r3, #4]
    4bb4:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
    4bb8:	310f      	adds	r1, #15
    4bba:	f025 0503 	bic.w	r5, r5, #3
    4bbe:	194b      	adds	r3, r1, r5
    4bc0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    4bc4:	f023 030f 	bic.w	r3, r3, #15
    4bc8:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
    4bcc:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    4bd0:	db07      	blt.n	4be2 <_malloc_trim_r+0x3e>
    4bd2:	2100      	movs	r1, #0
    4bd4:	4630      	mov	r0, r6
    4bd6:	f7ff fd01 	bl	45dc <_sbrk_r>
    4bda:	68bb      	ldr	r3, [r7, #8]
    4bdc:	442b      	add	r3, r5
    4bde:	4298      	cmp	r0, r3
    4be0:	d004      	beq.n	4bec <_malloc_trim_r+0x48>
    4be2:	4630      	mov	r0, r6
    4be4:	f7fe ff1a 	bl	3a1c <__malloc_unlock>
    4be8:	2000      	movs	r0, #0
    4bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4bec:	4261      	negs	r1, r4
    4bee:	4630      	mov	r0, r6
    4bf0:	f7ff fcf4 	bl	45dc <_sbrk_r>
    4bf4:	3001      	adds	r0, #1
    4bf6:	d00d      	beq.n	4c14 <_malloc_trim_r+0x70>
    4bf8:	4a10      	ldr	r2, [pc, #64]	; (4c3c <_malloc_trim_r+0x98>)
    4bfa:	68bb      	ldr	r3, [r7, #8]
    4bfc:	1b2d      	subs	r5, r5, r4
    4bfe:	f045 0501 	orr.w	r5, r5, #1
    4c02:	605d      	str	r5, [r3, #4]
    4c04:	6813      	ldr	r3, [r2, #0]
    4c06:	4630      	mov	r0, r6
    4c08:	1b1b      	subs	r3, r3, r4
    4c0a:	6013      	str	r3, [r2, #0]
    4c0c:	f7fe ff06 	bl	3a1c <__malloc_unlock>
    4c10:	2001      	movs	r0, #1
    4c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4c14:	2100      	movs	r1, #0
    4c16:	4630      	mov	r0, r6
    4c18:	f7ff fce0 	bl	45dc <_sbrk_r>
    4c1c:	68ba      	ldr	r2, [r7, #8]
    4c1e:	1a83      	subs	r3, r0, r2
    4c20:	2b0f      	cmp	r3, #15
    4c22:	ddde      	ble.n	4be2 <_malloc_trim_r+0x3e>
    4c24:	f043 0301 	orr.w	r3, r3, #1
    4c28:	6053      	str	r3, [r2, #4]
    4c2a:	4b05      	ldr	r3, [pc, #20]	; (4c40 <_malloc_trim_r+0x9c>)
    4c2c:	4903      	ldr	r1, [pc, #12]	; (4c3c <_malloc_trim_r+0x98>)
    4c2e:	681b      	ldr	r3, [r3, #0]
    4c30:	1ac0      	subs	r0, r0, r3
    4c32:	6008      	str	r0, [r1, #0]
    4c34:	e7d5      	b.n	4be2 <_malloc_trim_r+0x3e>
    4c36:	bf00      	nop
    4c38:	20001264 	.word	0x20001264
    4c3c:	20001ee8 	.word	0x20001ee8
    4c40:	2000166c 	.word	0x2000166c

00004c44 <_free_r>:
    4c44:	2900      	cmp	r1, #0
    4c46:	d061      	beq.n	4d0c <_free_r+0xc8>
    4c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4c4a:	460c      	mov	r4, r1
    4c4c:	4606      	mov	r6, r0
    4c4e:	f7fe fedf 	bl	3a10 <__malloc_lock>
    4c52:	f854 2c04 	ldr.w	r2, [r4, #-4]
    4c56:	4f7b      	ldr	r7, [pc, #492]	; (4e44 <_free_r+0x200>)
    4c58:	f1a4 0508 	sub.w	r5, r4, #8
    4c5c:	f022 0101 	bic.w	r1, r2, #1
    4c60:	eb05 0c01 	add.w	ip, r5, r1
    4c64:	68b8      	ldr	r0, [r7, #8]
    4c66:	f8dc 3004 	ldr.w	r3, [ip, #4]
    4c6a:	4560      	cmp	r0, ip
    4c6c:	f023 0303 	bic.w	r3, r3, #3
    4c70:	f000 808b 	beq.w	4d8a <_free_r+0x146>
    4c74:	07d2      	lsls	r2, r2, #31
    4c76:	f8cc 3004 	str.w	r3, [ip, #4]
    4c7a:	d432      	bmi.n	4ce2 <_free_r+0x9e>
    4c7c:	f854 2c08 	ldr.w	r2, [r4, #-8]
    4c80:	1aad      	subs	r5, r5, r2
    4c82:	4411      	add	r1, r2
    4c84:	68aa      	ldr	r2, [r5, #8]
    4c86:	f107 0008 	add.w	r0, r7, #8
    4c8a:	4282      	cmp	r2, r0
    4c8c:	d06a      	beq.n	4d64 <_free_r+0x120>
    4c8e:	eb0c 0403 	add.w	r4, ip, r3
    4c92:	f8d4 e004 	ldr.w	lr, [r4, #4]
    4c96:	68ec      	ldr	r4, [r5, #12]
    4c98:	60d4      	str	r4, [r2, #12]
    4c9a:	f01e 0f01 	tst.w	lr, #1
    4c9e:	60a2      	str	r2, [r4, #8]
    4ca0:	f000 8097 	beq.w	4dd2 <_free_r+0x18e>
    4ca4:	f041 0301 	orr.w	r3, r1, #1
    4ca8:	606b      	str	r3, [r5, #4]
    4caa:	f8cc 1000 	str.w	r1, [ip]
    4cae:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    4cb2:	d235      	bcs.n	4d20 <_free_r+0xdc>
    4cb4:	6878      	ldr	r0, [r7, #4]
    4cb6:	08cb      	lsrs	r3, r1, #3
    4cb8:	2201      	movs	r2, #1
    4cba:	0949      	lsrs	r1, r1, #5
    4cbc:	3301      	adds	r3, #1
    4cbe:	408a      	lsls	r2, r1
    4cc0:	4302      	orrs	r2, r0
    4cc2:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    4cc6:	607a      	str	r2, [r7, #4]
    4cc8:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    4ccc:	3a08      	subs	r2, #8
    4cce:	e9c5 1202 	strd	r1, r2, [r5, #8]
    4cd2:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    4cd6:	60cd      	str	r5, [r1, #12]
    4cd8:	4630      	mov	r0, r6
    4cda:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    4cde:	f7fe be9d 	b.w	3a1c <__malloc_unlock>
    4ce2:	eb0c 0203 	add.w	r2, ip, r3
    4ce6:	6852      	ldr	r2, [r2, #4]
    4ce8:	07d0      	lsls	r0, r2, #31
    4cea:	d410      	bmi.n	4d0e <_free_r+0xca>
    4cec:	4419      	add	r1, r3
    4cee:	f107 0008 	add.w	r0, r7, #8
    4cf2:	f8dc 3008 	ldr.w	r3, [ip, #8]
    4cf6:	4283      	cmp	r3, r0
    4cf8:	d073      	beq.n	4de2 <_free_r+0x19e>
    4cfa:	f8dc 200c 	ldr.w	r2, [ip, #12]
    4cfe:	60da      	str	r2, [r3, #12]
    4d00:	6093      	str	r3, [r2, #8]
    4d02:	f041 0301 	orr.w	r3, r1, #1
    4d06:	606b      	str	r3, [r5, #4]
    4d08:	5069      	str	r1, [r5, r1]
    4d0a:	e7d0      	b.n	4cae <_free_r+0x6a>
    4d0c:	4770      	bx	lr
    4d0e:	f041 0301 	orr.w	r3, r1, #1
    4d12:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    4d16:	f844 3c04 	str.w	r3, [r4, #-4]
    4d1a:	f8cc 1000 	str.w	r1, [ip]
    4d1e:	d3c9      	bcc.n	4cb4 <_free_r+0x70>
    4d20:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
    4d24:	ea4f 2351 	mov.w	r3, r1, lsr #9
    4d28:	d248      	bcs.n	4dbc <_free_r+0x178>
    4d2a:	098b      	lsrs	r3, r1, #6
    4d2c:	f103 0039 	add.w	r0, r3, #57	; 0x39
    4d30:	f103 0238 	add.w	r2, r3, #56	; 0x38
    4d34:	00c3      	lsls	r3, r0, #3
    4d36:	18f8      	adds	r0, r7, r3
    4d38:	58fb      	ldr	r3, [r7, r3]
    4d3a:	3808      	subs	r0, #8
    4d3c:	4298      	cmp	r0, r3
    4d3e:	d059      	beq.n	4df4 <_free_r+0x1b0>
    4d40:	685a      	ldr	r2, [r3, #4]
    4d42:	f022 0203 	bic.w	r2, r2, #3
    4d46:	428a      	cmp	r2, r1
    4d48:	d902      	bls.n	4d50 <_free_r+0x10c>
    4d4a:	689b      	ldr	r3, [r3, #8]
    4d4c:	4298      	cmp	r0, r3
    4d4e:	d1f7      	bne.n	4d40 <_free_r+0xfc>
    4d50:	68d8      	ldr	r0, [r3, #12]
    4d52:	e9c5 3002 	strd	r3, r0, [r5, #8]
    4d56:	6085      	str	r5, [r0, #8]
    4d58:	60dd      	str	r5, [r3, #12]
    4d5a:	4630      	mov	r0, r6
    4d5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    4d60:	f7fe be5c 	b.w	3a1c <__malloc_unlock>
    4d64:	eb0c 0203 	add.w	r2, ip, r3
    4d68:	6852      	ldr	r2, [r2, #4]
    4d6a:	07d2      	lsls	r2, r2, #31
    4d6c:	d463      	bmi.n	4e36 <_free_r+0x1f2>
    4d6e:	440b      	add	r3, r1
    4d70:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
    4d74:	60ca      	str	r2, [r1, #12]
    4d76:	6091      	str	r1, [r2, #8]
    4d78:	f043 0201 	orr.w	r2, r3, #1
    4d7c:	606a      	str	r2, [r5, #4]
    4d7e:	4630      	mov	r0, r6
    4d80:	50eb      	str	r3, [r5, r3]
    4d82:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    4d86:	f7fe be49 	b.w	3a1c <__malloc_unlock>
    4d8a:	440b      	add	r3, r1
    4d8c:	07d1      	lsls	r1, r2, #31
    4d8e:	d407      	bmi.n	4da0 <_free_r+0x15c>
    4d90:	f854 2c08 	ldr.w	r2, [r4, #-8]
    4d94:	1aad      	subs	r5, r5, r2
    4d96:	4413      	add	r3, r2
    4d98:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
    4d9c:	60ca      	str	r2, [r1, #12]
    4d9e:	6091      	str	r1, [r2, #8]
    4da0:	f043 0201 	orr.w	r2, r3, #1
    4da4:	606a      	str	r2, [r5, #4]
    4da6:	4a28      	ldr	r2, [pc, #160]	; (4e48 <_free_r+0x204>)
    4da8:	60bd      	str	r5, [r7, #8]
    4daa:	6812      	ldr	r2, [r2, #0]
    4dac:	429a      	cmp	r2, r3
    4dae:	d893      	bhi.n	4cd8 <_free_r+0x94>
    4db0:	4b26      	ldr	r3, [pc, #152]	; (4e4c <_free_r+0x208>)
    4db2:	4630      	mov	r0, r6
    4db4:	6819      	ldr	r1, [r3, #0]
    4db6:	f7ff fef5 	bl	4ba4 <_malloc_trim_r>
    4dba:	e78d      	b.n	4cd8 <_free_r+0x94>
    4dbc:	2b14      	cmp	r3, #20
    4dbe:	d90a      	bls.n	4dd6 <_free_r+0x192>
    4dc0:	2b54      	cmp	r3, #84	; 0x54
    4dc2:	d81f      	bhi.n	4e04 <_free_r+0x1c0>
    4dc4:	0b0b      	lsrs	r3, r1, #12
    4dc6:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    4dca:	f103 026e 	add.w	r2, r3, #110	; 0x6e
    4dce:	00c3      	lsls	r3, r0, #3
    4dd0:	e7b1      	b.n	4d36 <_free_r+0xf2>
    4dd2:	4419      	add	r1, r3
    4dd4:	e78d      	b.n	4cf2 <_free_r+0xae>
    4dd6:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    4dda:	f103 025b 	add.w	r2, r3, #91	; 0x5b
    4dde:	00c3      	lsls	r3, r0, #3
    4de0:	e7a9      	b.n	4d36 <_free_r+0xf2>
    4de2:	f041 0301 	orr.w	r3, r1, #1
    4de6:	e9c7 5504 	strd	r5, r5, [r7, #16]
    4dea:	e9c5 0002 	strd	r0, r0, [r5, #8]
    4dee:	606b      	str	r3, [r5, #4]
    4df0:	5069      	str	r1, [r5, r1]
    4df2:	e771      	b.n	4cd8 <_free_r+0x94>
    4df4:	6879      	ldr	r1, [r7, #4]
    4df6:	1092      	asrs	r2, r2, #2
    4df8:	2401      	movs	r4, #1
    4dfa:	fa04 f202 	lsl.w	r2, r4, r2
    4dfe:	430a      	orrs	r2, r1
    4e00:	607a      	str	r2, [r7, #4]
    4e02:	e7a6      	b.n	4d52 <_free_r+0x10e>
    4e04:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    4e08:	d806      	bhi.n	4e18 <_free_r+0x1d4>
    4e0a:	0bcb      	lsrs	r3, r1, #15
    4e0c:	f103 0078 	add.w	r0, r3, #120	; 0x78
    4e10:	f103 0277 	add.w	r2, r3, #119	; 0x77
    4e14:	00c3      	lsls	r3, r0, #3
    4e16:	e78e      	b.n	4d36 <_free_r+0xf2>
    4e18:	f240 5254 	movw	r2, #1364	; 0x554
    4e1c:	4293      	cmp	r3, r2
    4e1e:	d806      	bhi.n	4e2e <_free_r+0x1ea>
    4e20:	0c8b      	lsrs	r3, r1, #18
    4e22:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    4e26:	f103 027c 	add.w	r2, r3, #124	; 0x7c
    4e2a:	00c3      	lsls	r3, r0, #3
    4e2c:	e783      	b.n	4d36 <_free_r+0xf2>
    4e2e:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    4e32:	227e      	movs	r2, #126	; 0x7e
    4e34:	e77f      	b.n	4d36 <_free_r+0xf2>
    4e36:	f041 0301 	orr.w	r3, r1, #1
    4e3a:	606b      	str	r3, [r5, #4]
    4e3c:	f8cc 1000 	str.w	r1, [ip]
    4e40:	e74a      	b.n	4cd8 <_free_r+0x94>
    4e42:	bf00      	nop
    4e44:	20001264 	.word	0x20001264
    4e48:	20001670 	.word	0x20001670
    4e4c:	20001f18 	.word	0x20001f18

00004e50 <__ascii_mbtowc>:
    4e50:	b082      	sub	sp, #8
    4e52:	b149      	cbz	r1, 4e68 <__ascii_mbtowc+0x18>
    4e54:	b15a      	cbz	r2, 4e6e <__ascii_mbtowc+0x1e>
    4e56:	b16b      	cbz	r3, 4e74 <__ascii_mbtowc+0x24>
    4e58:	7813      	ldrb	r3, [r2, #0]
    4e5a:	600b      	str	r3, [r1, #0]
    4e5c:	7812      	ldrb	r2, [r2, #0]
    4e5e:	1e10      	subs	r0, r2, #0
    4e60:	bf18      	it	ne
    4e62:	2001      	movne	r0, #1
    4e64:	b002      	add	sp, #8
    4e66:	4770      	bx	lr
    4e68:	a901      	add	r1, sp, #4
    4e6a:	2a00      	cmp	r2, #0
    4e6c:	d1f3      	bne.n	4e56 <__ascii_mbtowc+0x6>
    4e6e:	4610      	mov	r0, r2
    4e70:	b002      	add	sp, #8
    4e72:	4770      	bx	lr
    4e74:	f06f 0001 	mvn.w	r0, #1
    4e78:	e7f4      	b.n	4e64 <__ascii_mbtowc+0x14>
    4e7a:	bf00      	nop

00004e7c <_Balloc>:
    4e7c:	6c43      	ldr	r3, [r0, #68]	; 0x44
    4e7e:	b570      	push	{r4, r5, r6, lr}
    4e80:	4605      	mov	r5, r0
    4e82:	460c      	mov	r4, r1
    4e84:	b14b      	cbz	r3, 4e9a <_Balloc+0x1e>
    4e86:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    4e8a:	b180      	cbz	r0, 4eae <_Balloc+0x32>
    4e8c:	6802      	ldr	r2, [r0, #0]
    4e8e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    4e92:	2300      	movs	r3, #0
    4e94:	e9c0 3303 	strd	r3, r3, [r0, #12]
    4e98:	bd70      	pop	{r4, r5, r6, pc}
    4e9a:	2221      	movs	r2, #33	; 0x21
    4e9c:	2104      	movs	r1, #4
    4e9e:	f002 fb33 	bl	7508 <_calloc_r>
    4ea2:	4603      	mov	r3, r0
    4ea4:	6468      	str	r0, [r5, #68]	; 0x44
    4ea6:	2800      	cmp	r0, #0
    4ea8:	d1ed      	bne.n	4e86 <_Balloc+0xa>
    4eaa:	2000      	movs	r0, #0
    4eac:	bd70      	pop	{r4, r5, r6, pc}
    4eae:	2101      	movs	r1, #1
    4eb0:	fa01 f604 	lsl.w	r6, r1, r4
    4eb4:	1d72      	adds	r2, r6, #5
    4eb6:	0092      	lsls	r2, r2, #2
    4eb8:	4628      	mov	r0, r5
    4eba:	f002 fb25 	bl	7508 <_calloc_r>
    4ebe:	2800      	cmp	r0, #0
    4ec0:	d0f3      	beq.n	4eaa <_Balloc+0x2e>
    4ec2:	e9c0 4601 	strd	r4, r6, [r0, #4]
    4ec6:	e7e4      	b.n	4e92 <_Balloc+0x16>

00004ec8 <_Bfree>:
    4ec8:	b131      	cbz	r1, 4ed8 <_Bfree+0x10>
    4eca:	6c43      	ldr	r3, [r0, #68]	; 0x44
    4ecc:	684a      	ldr	r2, [r1, #4]
    4ece:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    4ed2:	6008      	str	r0, [r1, #0]
    4ed4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    4ed8:	4770      	bx	lr
    4eda:	bf00      	nop

00004edc <__multadd>:
    4edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4ee0:	690e      	ldr	r6, [r1, #16]
    4ee2:	4680      	mov	r8, r0
    4ee4:	460f      	mov	r7, r1
    4ee6:	461d      	mov	r5, r3
    4ee8:	f101 0e14 	add.w	lr, r1, #20
    4eec:	2000      	movs	r0, #0
    4eee:	f8de 1000 	ldr.w	r1, [lr]
    4ef2:	b28c      	uxth	r4, r1
    4ef4:	fb02 5304 	mla	r3, r2, r4, r5
    4ef8:	0c09      	lsrs	r1, r1, #16
    4efa:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    4efe:	fb02 cc01 	mla	ip, r2, r1, ip
    4f02:	3001      	adds	r0, #1
    4f04:	b29c      	uxth	r4, r3
    4f06:	eb04 440c 	add.w	r4, r4, ip, lsl #16
    4f0a:	4286      	cmp	r6, r0
    4f0c:	f84e 4b04 	str.w	r4, [lr], #4
    4f10:	ea4f 451c 	mov.w	r5, ip, lsr #16
    4f14:	dceb      	bgt.n	4eee <__multadd+0x12>
    4f16:	b13d      	cbz	r5, 4f28 <__multadd+0x4c>
    4f18:	68bb      	ldr	r3, [r7, #8]
    4f1a:	42b3      	cmp	r3, r6
    4f1c:	dd07      	ble.n	4f2e <__multadd+0x52>
    4f1e:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    4f22:	3601      	adds	r6, #1
    4f24:	615d      	str	r5, [r3, #20]
    4f26:	613e      	str	r6, [r7, #16]
    4f28:	4638      	mov	r0, r7
    4f2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4f2e:	6879      	ldr	r1, [r7, #4]
    4f30:	4640      	mov	r0, r8
    4f32:	3101      	adds	r1, #1
    4f34:	f7ff ffa2 	bl	4e7c <_Balloc>
    4f38:	4604      	mov	r4, r0
    4f3a:	b1b0      	cbz	r0, 4f6a <__multadd+0x8e>
    4f3c:	693a      	ldr	r2, [r7, #16]
    4f3e:	3202      	adds	r2, #2
    4f40:	f107 010c 	add.w	r1, r7, #12
    4f44:	0092      	lsls	r2, r2, #2
    4f46:	300c      	adds	r0, #12
    4f48:	f7fc fcfc 	bl	1944 <memcpy>
    4f4c:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    4f50:	687a      	ldr	r2, [r7, #4]
    4f52:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    4f56:	6039      	str	r1, [r7, #0]
    4f58:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    4f5c:	4627      	mov	r7, r4
    4f5e:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    4f62:	3601      	adds	r6, #1
    4f64:	615d      	str	r5, [r3, #20]
    4f66:	613e      	str	r6, [r7, #16]
    4f68:	e7de      	b.n	4f28 <__multadd+0x4c>
    4f6a:	4b03      	ldr	r3, [pc, #12]	; (4f78 <__multadd+0x9c>)
    4f6c:	4803      	ldr	r0, [pc, #12]	; (4f7c <__multadd+0xa0>)
    4f6e:	4622      	mov	r2, r4
    4f70:	21ba      	movs	r1, #186	; 0xba
    4f72:	f002 faa9 	bl	74c8 <__assert_func>
    4f76:	bf00      	nop
    4f78:	20000408 	.word	0x20000408
    4f7c:	2000041c 	.word	0x2000041c

00004f80 <__hi0bits>:
    4f80:	0c03      	lsrs	r3, r0, #16
    4f82:	041b      	lsls	r3, r3, #16
    4f84:	b9d3      	cbnz	r3, 4fbc <__hi0bits+0x3c>
    4f86:	0400      	lsls	r0, r0, #16
    4f88:	2310      	movs	r3, #16
    4f8a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
    4f8e:	bf04      	itt	eq
    4f90:	0200      	lsleq	r0, r0, #8
    4f92:	3308      	addeq	r3, #8
    4f94:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
    4f98:	bf04      	itt	eq
    4f9a:	0100      	lsleq	r0, r0, #4
    4f9c:	3304      	addeq	r3, #4
    4f9e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
    4fa2:	bf04      	itt	eq
    4fa4:	0080      	lsleq	r0, r0, #2
    4fa6:	3302      	addeq	r3, #2
    4fa8:	2800      	cmp	r0, #0
    4faa:	db05      	blt.n	4fb8 <__hi0bits+0x38>
    4fac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
    4fb0:	f103 0301 	add.w	r3, r3, #1
    4fb4:	bf08      	it	eq
    4fb6:	2320      	moveq	r3, #32
    4fb8:	4618      	mov	r0, r3
    4fba:	4770      	bx	lr
    4fbc:	2300      	movs	r3, #0
    4fbe:	e7e4      	b.n	4f8a <__hi0bits+0xa>

00004fc0 <__lo0bits>:
    4fc0:	6803      	ldr	r3, [r0, #0]
    4fc2:	f013 0207 	ands.w	r2, r3, #7
    4fc6:	d008      	beq.n	4fda <__lo0bits+0x1a>
    4fc8:	07d9      	lsls	r1, r3, #31
    4fca:	d41f      	bmi.n	500c <__lo0bits+0x4c>
    4fcc:	079a      	lsls	r2, r3, #30
    4fce:	d522      	bpl.n	5016 <__lo0bits+0x56>
    4fd0:	085b      	lsrs	r3, r3, #1
    4fd2:	6003      	str	r3, [r0, #0]
    4fd4:	2201      	movs	r2, #1
    4fd6:	4610      	mov	r0, r2
    4fd8:	4770      	bx	lr
    4fda:	b299      	uxth	r1, r3
    4fdc:	b909      	cbnz	r1, 4fe2 <__lo0bits+0x22>
    4fde:	0c1b      	lsrs	r3, r3, #16
    4fe0:	2210      	movs	r2, #16
    4fe2:	b2d9      	uxtb	r1, r3
    4fe4:	b909      	cbnz	r1, 4fea <__lo0bits+0x2a>
    4fe6:	3208      	adds	r2, #8
    4fe8:	0a1b      	lsrs	r3, r3, #8
    4fea:	0719      	lsls	r1, r3, #28
    4fec:	bf04      	itt	eq
    4fee:	091b      	lsreq	r3, r3, #4
    4ff0:	3204      	addeq	r2, #4
    4ff2:	0799      	lsls	r1, r3, #30
    4ff4:	bf04      	itt	eq
    4ff6:	089b      	lsreq	r3, r3, #2
    4ff8:	3202      	addeq	r2, #2
    4ffa:	07d9      	lsls	r1, r3, #31
    4ffc:	d403      	bmi.n	5006 <__lo0bits+0x46>
    4ffe:	085b      	lsrs	r3, r3, #1
    5000:	f102 0201 	add.w	r2, r2, #1
    5004:	d005      	beq.n	5012 <__lo0bits+0x52>
    5006:	6003      	str	r3, [r0, #0]
    5008:	4610      	mov	r0, r2
    500a:	4770      	bx	lr
    500c:	2200      	movs	r2, #0
    500e:	4610      	mov	r0, r2
    5010:	4770      	bx	lr
    5012:	2220      	movs	r2, #32
    5014:	e7df      	b.n	4fd6 <__lo0bits+0x16>
    5016:	089b      	lsrs	r3, r3, #2
    5018:	2202      	movs	r2, #2
    501a:	6003      	str	r3, [r0, #0]
    501c:	4610      	mov	r0, r2
    501e:	4770      	bx	lr

00005020 <__i2b>:
    5020:	b538      	push	{r3, r4, r5, lr}
    5022:	6c43      	ldr	r3, [r0, #68]	; 0x44
    5024:	4604      	mov	r4, r0
    5026:	460d      	mov	r5, r1
    5028:	b14b      	cbz	r3, 503e <__i2b+0x1e>
    502a:	6858      	ldr	r0, [r3, #4]
    502c:	b1b0      	cbz	r0, 505c <__i2b+0x3c>
    502e:	6802      	ldr	r2, [r0, #0]
    5030:	605a      	str	r2, [r3, #4]
    5032:	2200      	movs	r2, #0
    5034:	2301      	movs	r3, #1
    5036:	e9c0 3504 	strd	r3, r5, [r0, #16]
    503a:	60c2      	str	r2, [r0, #12]
    503c:	bd38      	pop	{r3, r4, r5, pc}
    503e:	2221      	movs	r2, #33	; 0x21
    5040:	2104      	movs	r1, #4
    5042:	f002 fa61 	bl	7508 <_calloc_r>
    5046:	4603      	mov	r3, r0
    5048:	6460      	str	r0, [r4, #68]	; 0x44
    504a:	2800      	cmp	r0, #0
    504c:	d1ed      	bne.n	502a <__i2b+0xa>
    504e:	4b09      	ldr	r3, [pc, #36]	; (5074 <__i2b+0x54>)
    5050:	4809      	ldr	r0, [pc, #36]	; (5078 <__i2b+0x58>)
    5052:	2200      	movs	r2, #0
    5054:	f240 1145 	movw	r1, #325	; 0x145
    5058:	f002 fa36 	bl	74c8 <__assert_func>
    505c:	221c      	movs	r2, #28
    505e:	2101      	movs	r1, #1
    5060:	4620      	mov	r0, r4
    5062:	f002 fa51 	bl	7508 <_calloc_r>
    5066:	2800      	cmp	r0, #0
    5068:	d0f1      	beq.n	504e <__i2b+0x2e>
    506a:	2201      	movs	r2, #1
    506c:	2302      	movs	r3, #2
    506e:	e9c0 2301 	strd	r2, r3, [r0, #4]
    5072:	e7de      	b.n	5032 <__i2b+0x12>
    5074:	20000408 	.word	0x20000408
    5078:	2000041c 	.word	0x2000041c

0000507c <__multiply>:
    507c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5080:	690e      	ldr	r6, [r1, #16]
    5082:	6915      	ldr	r5, [r2, #16]
    5084:	42ae      	cmp	r6, r5
    5086:	b085      	sub	sp, #20
    5088:	4688      	mov	r8, r1
    508a:	4614      	mov	r4, r2
    508c:	db05      	blt.n	509a <__multiply+0x1e>
    508e:	462a      	mov	r2, r5
    5090:	4623      	mov	r3, r4
    5092:	4635      	mov	r5, r6
    5094:	460c      	mov	r4, r1
    5096:	4616      	mov	r6, r2
    5098:	4698      	mov	r8, r3
    509a:	68a3      	ldr	r3, [r4, #8]
    509c:	6861      	ldr	r1, [r4, #4]
    509e:	19af      	adds	r7, r5, r6
    50a0:	42bb      	cmp	r3, r7
    50a2:	bfb8      	it	lt
    50a4:	3101      	addlt	r1, #1
    50a6:	f7ff fee9 	bl	4e7c <_Balloc>
    50aa:	9001      	str	r0, [sp, #4]
    50ac:	2800      	cmp	r0, #0
    50ae:	f000 8087 	beq.w	51c0 <__multiply+0x144>
    50b2:	9b01      	ldr	r3, [sp, #4]
    50b4:	f103 0914 	add.w	r9, r3, #20
    50b8:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
    50bc:	45d1      	cmp	r9, sl
    50be:	d205      	bcs.n	50cc <__multiply+0x50>
    50c0:	464b      	mov	r3, r9
    50c2:	2200      	movs	r2, #0
    50c4:	f843 2b04 	str.w	r2, [r3], #4
    50c8:	459a      	cmp	sl, r3
    50ca:	d8fb      	bhi.n	50c4 <__multiply+0x48>
    50cc:	f108 0814 	add.w	r8, r8, #20
    50d0:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
    50d4:	f104 0314 	add.w	r3, r4, #20
    50d8:	45d8      	cmp	r8, fp
    50da:	461a      	mov	r2, r3
    50dc:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    50e0:	d25f      	bcs.n	51a2 <__multiply+0x126>
    50e2:	1b2b      	subs	r3, r5, r4
    50e4:	3b15      	subs	r3, #21
    50e6:	f023 0303 	bic.w	r3, r3, #3
    50ea:	3304      	adds	r3, #4
    50ec:	3415      	adds	r4, #21
    50ee:	42a5      	cmp	r5, r4
    50f0:	bf38      	it	cc
    50f2:	2304      	movcc	r3, #4
    50f4:	e9cd a702 	strd	sl, r7, [sp, #8]
    50f8:	46ac      	mov	ip, r5
    50fa:	461f      	mov	r7, r3
    50fc:	4692      	mov	sl, r2
    50fe:	e005      	b.n	510c <__multiply+0x90>
    5100:	0c09      	lsrs	r1, r1, #16
    5102:	d129      	bne.n	5158 <__multiply+0xdc>
    5104:	45c3      	cmp	fp, r8
    5106:	f109 0904 	add.w	r9, r9, #4
    510a:	d948      	bls.n	519e <__multiply+0x122>
    510c:	f858 1b04 	ldr.w	r1, [r8], #4
    5110:	b28d      	uxth	r5, r1
    5112:	2d00      	cmp	r5, #0
    5114:	d0f4      	beq.n	5100 <__multiply+0x84>
    5116:	4656      	mov	r6, sl
    5118:	464c      	mov	r4, r9
    511a:	2300      	movs	r3, #0
    511c:	f856 1b04 	ldr.w	r1, [r6], #4
    5120:	6822      	ldr	r2, [r4, #0]
    5122:	fa1f fe81 	uxth.w	lr, r1
    5126:	b290      	uxth	r0, r2
    5128:	0c09      	lsrs	r1, r1, #16
    512a:	fb05 000e 	mla	r0, r5, lr, r0
    512e:	0c12      	lsrs	r2, r2, #16
    5130:	4403      	add	r3, r0
    5132:	fb05 2201 	mla	r2, r5, r1, r2
    5136:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    513a:	b29b      	uxth	r3, r3
    513c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    5140:	45b4      	cmp	ip, r6
    5142:	f844 3b04 	str.w	r3, [r4], #4
    5146:	ea4f 4312 	mov.w	r3, r2, lsr #16
    514a:	d8e7      	bhi.n	511c <__multiply+0xa0>
    514c:	f849 3007 	str.w	r3, [r9, r7]
    5150:	f858 1c04 	ldr.w	r1, [r8, #-4]
    5154:	0c09      	lsrs	r1, r1, #16
    5156:	d0d5      	beq.n	5104 <__multiply+0x88>
    5158:	f8d9 3000 	ldr.w	r3, [r9]
    515c:	4650      	mov	r0, sl
    515e:	461a      	mov	r2, r3
    5160:	464c      	mov	r4, r9
    5162:	2600      	movs	r6, #0
    5164:	8805      	ldrh	r5, [r0, #0]
    5166:	0c12      	lsrs	r2, r2, #16
    5168:	fb01 2205 	mla	r2, r1, r5, r2
    516c:	4416      	add	r6, r2
    516e:	b29b      	uxth	r3, r3
    5170:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    5174:	f844 3b04 	str.w	r3, [r4], #4
    5178:	f850 5b04 	ldr.w	r5, [r0], #4
    517c:	6822      	ldr	r2, [r4, #0]
    517e:	0c2d      	lsrs	r5, r5, #16
    5180:	b293      	uxth	r3, r2
    5182:	fb01 3305 	mla	r3, r1, r5, r3
    5186:	eb03 4316 	add.w	r3, r3, r6, lsr #16
    518a:	4584      	cmp	ip, r0
    518c:	ea4f 4613 	mov.w	r6, r3, lsr #16
    5190:	d8e8      	bhi.n	5164 <__multiply+0xe8>
    5192:	45c3      	cmp	fp, r8
    5194:	f849 3007 	str.w	r3, [r9, r7]
    5198:	f109 0904 	add.w	r9, r9, #4
    519c:	d8b6      	bhi.n	510c <__multiply+0x90>
    519e:	e9dd a702 	ldrd	sl, r7, [sp, #8]
    51a2:	2f00      	cmp	r7, #0
    51a4:	dc02      	bgt.n	51ac <__multiply+0x130>
    51a6:	e005      	b.n	51b4 <__multiply+0x138>
    51a8:	3f01      	subs	r7, #1
    51aa:	d003      	beq.n	51b4 <__multiply+0x138>
    51ac:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
    51b0:	2b00      	cmp	r3, #0
    51b2:	d0f9      	beq.n	51a8 <__multiply+0x12c>
    51b4:	9b01      	ldr	r3, [sp, #4]
    51b6:	4618      	mov	r0, r3
    51b8:	611f      	str	r7, [r3, #16]
    51ba:	b005      	add	sp, #20
    51bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    51c0:	4b03      	ldr	r3, [pc, #12]	; (51d0 <__multiply+0x154>)
    51c2:	4804      	ldr	r0, [pc, #16]	; (51d4 <__multiply+0x158>)
    51c4:	9a01      	ldr	r2, [sp, #4]
    51c6:	f44f 71b1 	mov.w	r1, #354	; 0x162
    51ca:	f002 f97d 	bl	74c8 <__assert_func>
    51ce:	bf00      	nop
    51d0:	20000408 	.word	0x20000408
    51d4:	2000041c 	.word	0x2000041c

000051d8 <__pow5mult>:
    51d8:	f012 0303 	ands.w	r3, r2, #3
    51dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    51e0:	4614      	mov	r4, r2
    51e2:	4606      	mov	r6, r0
    51e4:	d132      	bne.n	524c <__pow5mult+0x74>
    51e6:	460d      	mov	r5, r1
    51e8:	10a4      	asrs	r4, r4, #2
    51ea:	d020      	beq.n	522e <__pow5mult+0x56>
    51ec:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
    51f0:	f1b8 0f00 	cmp.w	r8, #0
    51f4:	d033      	beq.n	525e <__pow5mult+0x86>
    51f6:	07e3      	lsls	r3, r4, #31
    51f8:	f04f 0700 	mov.w	r7, #0
    51fc:	d407      	bmi.n	520e <__pow5mult+0x36>
    51fe:	1064      	asrs	r4, r4, #1
    5200:	d015      	beq.n	522e <__pow5mult+0x56>
    5202:	f8d8 0000 	ldr.w	r0, [r8]
    5206:	b1a8      	cbz	r0, 5234 <__pow5mult+0x5c>
    5208:	4680      	mov	r8, r0
    520a:	07e3      	lsls	r3, r4, #31
    520c:	d5f7      	bpl.n	51fe <__pow5mult+0x26>
    520e:	4642      	mov	r2, r8
    5210:	4629      	mov	r1, r5
    5212:	4630      	mov	r0, r6
    5214:	f7ff ff32 	bl	507c <__multiply>
    5218:	b1b5      	cbz	r5, 5248 <__pow5mult+0x70>
    521a:	6869      	ldr	r1, [r5, #4]
    521c:	6c73      	ldr	r3, [r6, #68]	; 0x44
    521e:	1064      	asrs	r4, r4, #1
    5220:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    5224:	602a      	str	r2, [r5, #0]
    5226:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
    522a:	4605      	mov	r5, r0
    522c:	d1e9      	bne.n	5202 <__pow5mult+0x2a>
    522e:	4628      	mov	r0, r5
    5230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5234:	4642      	mov	r2, r8
    5236:	4641      	mov	r1, r8
    5238:	4630      	mov	r0, r6
    523a:	f7ff ff1f 	bl	507c <__multiply>
    523e:	f8c8 0000 	str.w	r0, [r8]
    5242:	6007      	str	r7, [r0, #0]
    5244:	4680      	mov	r8, r0
    5246:	e7e0      	b.n	520a <__pow5mult+0x32>
    5248:	4605      	mov	r5, r0
    524a:	e7d8      	b.n	51fe <__pow5mult+0x26>
    524c:	3b01      	subs	r3, #1
    524e:	4a0f      	ldr	r2, [pc, #60]	; (528c <__pow5mult+0xb4>)
    5250:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    5254:	2300      	movs	r3, #0
    5256:	f7ff fe41 	bl	4edc <__multadd>
    525a:	4605      	mov	r5, r0
    525c:	e7c4      	b.n	51e8 <__pow5mult+0x10>
    525e:	2101      	movs	r1, #1
    5260:	4630      	mov	r0, r6
    5262:	f7ff fe0b 	bl	4e7c <_Balloc>
    5266:	4680      	mov	r8, r0
    5268:	b140      	cbz	r0, 527c <__pow5mult+0xa4>
    526a:	2301      	movs	r3, #1
    526c:	f240 2271 	movw	r2, #625	; 0x271
    5270:	e9c0 3204 	strd	r3, r2, [r0, #16]
    5274:	2300      	movs	r3, #0
    5276:	6430      	str	r0, [r6, #64]	; 0x40
    5278:	6003      	str	r3, [r0, #0]
    527a:	e7bc      	b.n	51f6 <__pow5mult+0x1e>
    527c:	4b04      	ldr	r3, [pc, #16]	; (5290 <__pow5mult+0xb8>)
    527e:	4805      	ldr	r0, [pc, #20]	; (5294 <__pow5mult+0xbc>)
    5280:	4642      	mov	r2, r8
    5282:	f240 1145 	movw	r1, #325	; 0x145
    5286:	f002 f91f 	bl	74c8 <__assert_func>
    528a:	bf00      	nop
    528c:	20000ce4 	.word	0x20000ce4
    5290:	20000408 	.word	0x20000408
    5294:	2000041c 	.word	0x2000041c

00005298 <__lshift>:
    5298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    529c:	460d      	mov	r5, r1
    529e:	4614      	mov	r4, r2
    52a0:	692f      	ldr	r7, [r5, #16]
    52a2:	68ab      	ldr	r3, [r5, #8]
    52a4:	6849      	ldr	r1, [r1, #4]
    52a6:	eb07 1762 	add.w	r7, r7, r2, asr #5
    52aa:	1c7e      	adds	r6, r7, #1
    52ac:	429e      	cmp	r6, r3
    52ae:	4680      	mov	r8, r0
    52b0:	ea4f 1962 	mov.w	r9, r2, asr #5
    52b4:	dd04      	ble.n	52c0 <__lshift+0x28>
    52b6:	005b      	lsls	r3, r3, #1
    52b8:	429e      	cmp	r6, r3
    52ba:	f101 0101 	add.w	r1, r1, #1
    52be:	dcfa      	bgt.n	52b6 <__lshift+0x1e>
    52c0:	4640      	mov	r0, r8
    52c2:	f7ff fddb 	bl	4e7c <_Balloc>
    52c6:	4684      	mov	ip, r0
    52c8:	2800      	cmp	r0, #0
    52ca:	d052      	beq.n	5372 <__lshift+0xda>
    52cc:	f1b9 0f00 	cmp.w	r9, #0
    52d0:	f100 0214 	add.w	r2, r0, #20
    52d4:	dd0e      	ble.n	52f4 <__lshift+0x5c>
    52d6:	f109 0105 	add.w	r1, r9, #5
    52da:	ea4f 0e81 	mov.w	lr, r1, lsl #2
    52de:	4613      	mov	r3, r2
    52e0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    52e4:	2000      	movs	r0, #0
    52e6:	f843 0b04 	str.w	r0, [r3], #4
    52ea:	428b      	cmp	r3, r1
    52ec:	d1fb      	bne.n	52e6 <__lshift+0x4e>
    52ee:	f1ae 0314 	sub.w	r3, lr, #20
    52f2:	441a      	add	r2, r3
    52f4:	6929      	ldr	r1, [r5, #16]
    52f6:	f105 0314 	add.w	r3, r5, #20
    52fa:	f014 0e1f 	ands.w	lr, r4, #31
    52fe:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    5302:	d02e      	beq.n	5362 <__lshift+0xca>
    5304:	f1ce 0920 	rsb	r9, lr, #32
    5308:	4610      	mov	r0, r2
    530a:	f04f 0a00 	mov.w	sl, #0
    530e:	681c      	ldr	r4, [r3, #0]
    5310:	fa04 f40e 	lsl.w	r4, r4, lr
    5314:	ea44 040a 	orr.w	r4, r4, sl
    5318:	f840 4b04 	str.w	r4, [r0], #4
    531c:	f853 4b04 	ldr.w	r4, [r3], #4
    5320:	4299      	cmp	r1, r3
    5322:	fa24 fa09 	lsr.w	sl, r4, r9
    5326:	d8f2      	bhi.n	530e <__lshift+0x76>
    5328:	1b4b      	subs	r3, r1, r5
    532a:	3b15      	subs	r3, #21
    532c:	f023 0303 	bic.w	r3, r3, #3
    5330:	3304      	adds	r3, #4
    5332:	f105 0015 	add.w	r0, r5, #21
    5336:	4281      	cmp	r1, r0
    5338:	bf38      	it	cc
    533a:	2304      	movcc	r3, #4
    533c:	f1ba 0f00 	cmp.w	sl, #0
    5340:	bf18      	it	ne
    5342:	4637      	movne	r7, r6
    5344:	f842 a003 	str.w	sl, [r2, r3]
    5348:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    534c:	686a      	ldr	r2, [r5, #4]
    534e:	f8cc 7010 	str.w	r7, [ip, #16]
    5352:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    5356:	6029      	str	r1, [r5, #0]
    5358:	4660      	mov	r0, ip
    535a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
    535e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5362:	3a04      	subs	r2, #4
    5364:	f853 0b04 	ldr.w	r0, [r3], #4
    5368:	f842 0f04 	str.w	r0, [r2, #4]!
    536c:	4299      	cmp	r1, r3
    536e:	d8f9      	bhi.n	5364 <__lshift+0xcc>
    5370:	e7ea      	b.n	5348 <__lshift+0xb0>
    5372:	4b03      	ldr	r3, [pc, #12]	; (5380 <__lshift+0xe8>)
    5374:	4803      	ldr	r0, [pc, #12]	; (5384 <__lshift+0xec>)
    5376:	4662      	mov	r2, ip
    5378:	f44f 71ef 	mov.w	r1, #478	; 0x1de
    537c:	f002 f8a4 	bl	74c8 <__assert_func>
    5380:	20000408 	.word	0x20000408
    5384:	2000041c 	.word	0x2000041c

00005388 <__mcmp>:
    5388:	690b      	ldr	r3, [r1, #16]
    538a:	4684      	mov	ip, r0
    538c:	6900      	ldr	r0, [r0, #16]
    538e:	1ac0      	subs	r0, r0, r3
    5390:	d116      	bne.n	53c0 <__mcmp+0x38>
    5392:	f10c 0c14 	add.w	ip, ip, #20
    5396:	3114      	adds	r1, #20
    5398:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
    539c:	b410      	push	{r4}
    539e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    53a2:	e001      	b.n	53a8 <__mcmp+0x20>
    53a4:	4594      	cmp	ip, r2
    53a6:	d208      	bcs.n	53ba <__mcmp+0x32>
    53a8:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    53ac:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    53b0:	428c      	cmp	r4, r1
    53b2:	d0f7      	beq.n	53a4 <__mcmp+0x1c>
    53b4:	d205      	bcs.n	53c2 <__mcmp+0x3a>
    53b6:	f04f 30ff 	mov.w	r0, #4294967295
    53ba:	f85d 4b04 	ldr.w	r4, [sp], #4
    53be:	4770      	bx	lr
    53c0:	4770      	bx	lr
    53c2:	2001      	movs	r0, #1
    53c4:	f85d 4b04 	ldr.w	r4, [sp], #4
    53c8:	4770      	bx	lr
    53ca:	bf00      	nop

000053cc <__mdiff>:
    53cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    53d0:	690f      	ldr	r7, [r1, #16]
    53d2:	6913      	ldr	r3, [r2, #16]
    53d4:	1aff      	subs	r7, r7, r3
    53d6:	2f00      	cmp	r7, #0
    53d8:	460e      	mov	r6, r1
    53da:	4690      	mov	r8, r2
    53dc:	d17f      	bne.n	54de <__mdiff+0x112>
    53de:	f101 0514 	add.w	r5, r1, #20
    53e2:	3214      	adds	r2, #20
    53e4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    53e8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    53ec:	e001      	b.n	53f2 <__mdiff+0x26>
    53ee:	429d      	cmp	r5, r3
    53f0:	d278      	bcs.n	54e4 <__mdiff+0x118>
    53f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    53f6:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    53fa:	42a1      	cmp	r1, r4
    53fc:	d0f7      	beq.n	53ee <__mdiff+0x22>
    53fe:	d369      	bcc.n	54d4 <__mdiff+0x108>
    5400:	6871      	ldr	r1, [r6, #4]
    5402:	f7ff fd3b 	bl	4e7c <_Balloc>
    5406:	4681      	mov	r9, r0
    5408:	2800      	cmp	r0, #0
    540a:	d077      	beq.n	54fc <__mdiff+0x130>
    540c:	6935      	ldr	r5, [r6, #16]
    540e:	f8d8 2010 	ldr.w	r2, [r8, #16]
    5412:	60c7      	str	r7, [r0, #12]
    5414:	f108 0e14 	add.w	lr, r8, #20
    5418:	f106 0014 	add.w	r0, r6, #20
    541c:	f109 0a14 	add.w	sl, r9, #20
    5420:	f106 0110 	add.w	r1, r6, #16
    5424:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    5428:	eb00 0785 	add.w	r7, r0, r5, lsl #2
    542c:	4656      	mov	r6, sl
    542e:	f04f 0c00 	mov.w	ip, #0
    5432:	f85e 4b04 	ldr.w	r4, [lr], #4
    5436:	f851 bf04 	ldr.w	fp, [r1, #4]!
    543a:	b2a3      	uxth	r3, r4
    543c:	fa1c fc8b 	uxtah	ip, ip, fp
    5440:	ebac 0303 	sub.w	r3, ip, r3
    5444:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    5448:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
    544c:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
    5450:	b29b      	uxth	r3, r3
    5452:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    5456:	4572      	cmp	r2, lr
    5458:	f846 3b04 	str.w	r3, [r6], #4
    545c:	ea4f 4c2c 	mov.w	ip, ip, asr #16
    5460:	d8e7      	bhi.n	5432 <__mdiff+0x66>
    5462:	eba2 0108 	sub.w	r1, r2, r8
    5466:	3915      	subs	r1, #21
    5468:	f108 0815 	add.w	r8, r8, #21
    546c:	4542      	cmp	r2, r8
    546e:	f021 0403 	bic.w	r4, r1, #3
    5472:	f104 0404 	add.w	r4, r4, #4
    5476:	bf38      	it	cc
    5478:	2404      	movcc	r4, #4
    547a:	4420      	add	r0, r4
    547c:	f021 0203 	bic.w	r2, r1, #3
    5480:	bf38      	it	cc
    5482:	2200      	movcc	r2, #0
    5484:	4287      	cmp	r7, r0
    5486:	4452      	add	r2, sl
    5488:	4454      	add	r4, sl
    548a:	d918      	bls.n	54be <__mdiff+0xf2>
    548c:	4626      	mov	r6, r4
    548e:	4601      	mov	r1, r0
    5490:	f851 3b04 	ldr.w	r3, [r1], #4
    5494:	fa1c fc83 	uxtah	ip, ip, r3
    5498:	ea4f 422c 	mov.w	r2, ip, asr #16
    549c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    54a0:	fa1f fc8c 	uxth.w	ip, ip
    54a4:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
    54a8:	428f      	cmp	r7, r1
    54aa:	f846 3b04 	str.w	r3, [r6], #4
    54ae:	ea4f 4c22 	mov.w	ip, r2, asr #16
    54b2:	d8ed      	bhi.n	5490 <__mdiff+0xc4>
    54b4:	3f01      	subs	r7, #1
    54b6:	1a3f      	subs	r7, r7, r0
    54b8:	f027 0703 	bic.w	r7, r7, #3
    54bc:	19e2      	adds	r2, r4, r7
    54be:	b923      	cbnz	r3, 54ca <__mdiff+0xfe>
    54c0:	f852 3d04 	ldr.w	r3, [r2, #-4]!
    54c4:	3d01      	subs	r5, #1
    54c6:	2b00      	cmp	r3, #0
    54c8:	d0fa      	beq.n	54c0 <__mdiff+0xf4>
    54ca:	f8c9 5010 	str.w	r5, [r9, #16]
    54ce:	4648      	mov	r0, r9
    54d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    54d4:	4633      	mov	r3, r6
    54d6:	2701      	movs	r7, #1
    54d8:	4646      	mov	r6, r8
    54da:	4698      	mov	r8, r3
    54dc:	e790      	b.n	5400 <__mdiff+0x34>
    54de:	dbf9      	blt.n	54d4 <__mdiff+0x108>
    54e0:	2700      	movs	r7, #0
    54e2:	e78d      	b.n	5400 <__mdiff+0x34>
    54e4:	2100      	movs	r1, #0
    54e6:	f7ff fcc9 	bl	4e7c <_Balloc>
    54ea:	4681      	mov	r9, r0
    54ec:	b168      	cbz	r0, 550a <__mdiff+0x13e>
    54ee:	2201      	movs	r2, #1
    54f0:	2300      	movs	r3, #0
    54f2:	e9c9 2304 	strd	r2, r3, [r9, #16]
    54f6:	4648      	mov	r0, r9
    54f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    54fc:	4b06      	ldr	r3, [pc, #24]	; (5518 <__mdiff+0x14c>)
    54fe:	4807      	ldr	r0, [pc, #28]	; (551c <__mdiff+0x150>)
    5500:	464a      	mov	r2, r9
    5502:	f240 2145 	movw	r1, #581	; 0x245
    5506:	f001 ffdf 	bl	74c8 <__assert_func>
    550a:	4b03      	ldr	r3, [pc, #12]	; (5518 <__mdiff+0x14c>)
    550c:	4803      	ldr	r0, [pc, #12]	; (551c <__mdiff+0x150>)
    550e:	464a      	mov	r2, r9
    5510:	f240 2137 	movw	r1, #567	; 0x237
    5514:	f001 ffd8 	bl	74c8 <__assert_func>
    5518:	20000408 	.word	0x20000408
    551c:	2000041c 	.word	0x2000041c

00005520 <__d2b>:
    5520:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5524:	4688      	mov	r8, r1
    5526:	b083      	sub	sp, #12
    5528:	2101      	movs	r1, #1
    552a:	ec57 6b10 	vmov	r6, r7, d0
    552e:	4615      	mov	r5, r2
    5530:	f7ff fca4 	bl	4e7c <_Balloc>
    5534:	4604      	mov	r4, r0
    5536:	2800      	cmp	r0, #0
    5538:	d051      	beq.n	55de <__d2b+0xbe>
    553a:	f3c7 590a 	ubfx	r9, r7, #20, #11
    553e:	f3c7 0313 	ubfx	r3, r7, #0, #20
    5542:	f1b9 0f00 	cmp.w	r9, #0
    5546:	d001      	beq.n	554c <__d2b+0x2c>
    5548:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    554c:	2e00      	cmp	r6, #0
    554e:	9301      	str	r3, [sp, #4]
    5550:	d118      	bne.n	5584 <__d2b+0x64>
    5552:	a801      	add	r0, sp, #4
    5554:	f7ff fd34 	bl	4fc0 <__lo0bits>
    5558:	9a01      	ldr	r2, [sp, #4]
    555a:	6162      	str	r2, [r4, #20]
    555c:	2201      	movs	r2, #1
    555e:	f100 0320 	add.w	r3, r0, #32
    5562:	6122      	str	r2, [r4, #16]
    5564:	f1b9 0f00 	cmp.w	r9, #0
    5568:	d025      	beq.n	55b6 <__d2b+0x96>
    556a:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
    556e:	eb09 0203 	add.w	r2, r9, r3
    5572:	4620      	mov	r0, r4
    5574:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
    5578:	f8c8 2000 	str.w	r2, [r8]
    557c:	602b      	str	r3, [r5, #0]
    557e:	b003      	add	sp, #12
    5580:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5584:	4668      	mov	r0, sp
    5586:	9600      	str	r6, [sp, #0]
    5588:	f7ff fd1a 	bl	4fc0 <__lo0bits>
    558c:	4603      	mov	r3, r0
    558e:	b310      	cbz	r0, 55d6 <__d2b+0xb6>
    5590:	e9dd 0200 	ldrd	r0, r2, [sp]
    5594:	f1c3 0120 	rsb	r1, r3, #32
    5598:	fa02 f101 	lsl.w	r1, r2, r1
    559c:	4301      	orrs	r1, r0
    559e:	40da      	lsrs	r2, r3
    55a0:	6161      	str	r1, [r4, #20]
    55a2:	9201      	str	r2, [sp, #4]
    55a4:	2a00      	cmp	r2, #0
    55a6:	61a2      	str	r2, [r4, #24]
    55a8:	bf14      	ite	ne
    55aa:	2202      	movne	r2, #2
    55ac:	2201      	moveq	r2, #1
    55ae:	6122      	str	r2, [r4, #16]
    55b0:	f1b9 0f00 	cmp.w	r9, #0
    55b4:	d1d9      	bne.n	556a <__d2b+0x4a>
    55b6:	f2a3 4332 	subw	r3, r3, #1074	; 0x432
    55ba:	f8c8 3000 	str.w	r3, [r8]
    55be:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    55c2:	6918      	ldr	r0, [r3, #16]
    55c4:	f7ff fcdc 	bl	4f80 <__hi0bits>
    55c8:	ebc0 1342 	rsb	r3, r0, r2, lsl #5
    55cc:	4620      	mov	r0, r4
    55ce:	602b      	str	r3, [r5, #0]
    55d0:	b003      	add	sp, #12
    55d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    55d6:	9a00      	ldr	r2, [sp, #0]
    55d8:	6162      	str	r2, [r4, #20]
    55da:	9a01      	ldr	r2, [sp, #4]
    55dc:	e7e2      	b.n	55a4 <__d2b+0x84>
    55de:	4b03      	ldr	r3, [pc, #12]	; (55ec <__d2b+0xcc>)
    55e0:	4803      	ldr	r0, [pc, #12]	; (55f0 <__d2b+0xd0>)
    55e2:	4622      	mov	r2, r4
    55e4:	f240 310f 	movw	r1, #783	; 0x30f
    55e8:	f001 ff6e 	bl	74c8 <__assert_func>
    55ec:	20000408 	.word	0x20000408
    55f0:	2000041c 	.word	0x2000041c

000055f4 <__ascii_wctomb>:
    55f4:	b149      	cbz	r1, 560a <__ascii_wctomb+0x16>
    55f6:	2aff      	cmp	r2, #255	; 0xff
    55f8:	d802      	bhi.n	5600 <__ascii_wctomb+0xc>
    55fa:	700a      	strb	r2, [r1, #0]
    55fc:	2001      	movs	r0, #1
    55fe:	4770      	bx	lr
    5600:	238a      	movs	r3, #138	; 0x8a
    5602:	6003      	str	r3, [r0, #0]
    5604:	f04f 30ff 	mov.w	r0, #4294967295
    5608:	4770      	bx	lr
    560a:	4608      	mov	r0, r1
    560c:	4770      	bx	lr
    560e:	bf00      	nop

00005610 <_svfprintf_r>:
    5610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5614:	ed2d 8b08 	vpush	{d8-d11}
    5618:	b0d1      	sub	sp, #324	; 0x144
    561a:	460c      	mov	r4, r1
    561c:	ee0b 1a10 	vmov	s22, r1
    5620:	4690      	mov	r8, r2
    5622:	9308      	str	r3, [sp, #32]
    5624:	4683      	mov	fp, r0
    5626:	f001 febb 	bl	73a0 <_localeconv_r>
    562a:	6803      	ldr	r3, [r0, #0]
    562c:	9312      	str	r3, [sp, #72]	; 0x48
    562e:	4618      	mov	r0, r3
    5630:	f7ff fa06 	bl	4a40 <strlen>
    5634:	af20      	add	r7, sp, #128	; 0x80
    5636:	9010      	str	r0, [sp, #64]	; 0x40
    5638:	2208      	movs	r2, #8
    563a:	2100      	movs	r1, #0
    563c:	4638      	mov	r0, r7
    563e:	f7fe febf 	bl	43c0 <memset>
    5642:	89a3      	ldrh	r3, [r4, #12]
    5644:	061b      	lsls	r3, r3, #24
    5646:	d503      	bpl.n	5650 <_svfprintf_r+0x40>
    5648:	6923      	ldr	r3, [r4, #16]
    564a:	2b00      	cmp	r3, #0
    564c:	f000 8755 	beq.w	64fa <_svfprintf_r+0xeea>
    5650:	2300      	movs	r3, #0
    5652:	ed9f 8b83 	vldr	d8, [pc, #524]	; 5860 <_svfprintf_r+0x250>
    5656:	ed9f 9b84 	vldr	d9, [pc, #528]	; 5868 <_svfprintf_r+0x258>
    565a:	e9cd 3325 	strd	r3, r3, [sp, #148]	; 0x94
    565e:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
    5662:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
    5666:	aa27      	add	r2, sp, #156	; 0x9c
    5668:	930e      	str	r3, [sp, #56]	; 0x38
    566a:	9224      	str	r2, [sp, #144]	; 0x90
    566c:	4692      	mov	sl, r2
    566e:	9311      	str	r3, [sp, #68]	; 0x44
    5670:	9304      	str	r3, [sp, #16]
    5672:	4644      	mov	r4, r8
    5674:	46a1      	mov	r9, r4
    5676:	4b7e      	ldr	r3, [pc, #504]	; (5870 <_svfprintf_r+0x260>)
    5678:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    567c:	f7fe ff6a 	bl	4554 <__locale_mb_cur_max>
    5680:	464a      	mov	r2, r9
    5682:	4603      	mov	r3, r0
    5684:	a91c      	add	r1, sp, #112	; 0x70
    5686:	9700      	str	r7, [sp, #0]
    5688:	4658      	mov	r0, fp
    568a:	47a8      	blx	r5
    568c:	2800      	cmp	r0, #0
    568e:	f000 80b0 	beq.w	57f2 <_svfprintf_r+0x1e2>
    5692:	f2c0 80a6 	blt.w	57e2 <_svfprintf_r+0x1d2>
    5696:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    5698:	2a25      	cmp	r2, #37	; 0x25
    569a:	4603      	mov	r3, r0
    569c:	d001      	beq.n	56a2 <_svfprintf_r+0x92>
    569e:	4499      	add	r9, r3
    56a0:	e7e9      	b.n	5676 <_svfprintf_r+0x66>
    56a2:	ebb9 0504 	subs.w	r5, r9, r4
    56a6:	4606      	mov	r6, r0
    56a8:	f040 80a7 	bne.w	57fa <_svfprintf_r+0x1ea>
    56ac:	2300      	movs	r3, #0
    56ae:	f04f 32ff 	mov.w	r2, #4294967295
    56b2:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    56b6:	4698      	mov	r8, r3
    56b8:	9306      	str	r3, [sp, #24]
    56ba:	f109 0901 	add.w	r9, r9, #1
    56be:	f899 3000 	ldrb.w	r3, [r9]
    56c2:	9203      	str	r2, [sp, #12]
    56c4:	252b      	movs	r5, #43	; 0x2b
    56c6:	2620      	movs	r6, #32
    56c8:	f109 0901 	add.w	r9, r9, #1
    56cc:	f1a3 0220 	sub.w	r2, r3, #32
    56d0:	2a5a      	cmp	r2, #90	; 0x5a
    56d2:	f200 80cf 	bhi.w	5874 <_svfprintf_r+0x264>
    56d6:	e8df f012 	tbh	[pc, r2, lsl #1]
    56da:	02e8      	.short	0x02e8
    56dc:	00cd00cd 	.word	0x00cd00cd
    56e0:	00cd02e3 	.word	0x00cd02e3
    56e4:	00cd00cd 	.word	0x00cd00cd
    56e8:	00cd006a 	.word	0x00cd006a
    56ec:	020500cd 	.word	0x020500cd
    56f0:	00cd0284 	.word	0x00cd0284
    56f4:	02c90210 	.word	0x02c90210
    56f8:	02bd00cd 	.word	0x02bd00cd
    56fc:	005b005b 	.word	0x005b005b
    5700:	005b005b 	.word	0x005b005b
    5704:	005b005b 	.word	0x005b005b
    5708:	005b005b 	.word	0x005b005b
    570c:	00cd005b 	.word	0x00cd005b
    5710:	00cd00cd 	.word	0x00cd00cd
    5714:	00cd00cd 	.word	0x00cd00cd
    5718:	00cd00cd 	.word	0x00cd00cd
    571c:	00cd0153 	.word	0x00cd0153
    5720:	021a0183 	.word	0x021a0183
    5724:	01530153 	.word	0x01530153
    5728:	00cd0153 	.word	0x00cd0153
    572c:	00cd00cd 	.word	0x00cd00cd
    5730:	021500cd 	.word	0x021500cd
    5734:	00cd00cd 	.word	0x00cd00cd
    5738:	00cd0296 	.word	0x00cd0296
    573c:	00cd00cd 	.word	0x00cd00cd
    5740:	00cd01ab 	.word	0x00cd01ab
    5744:	00cd02aa 	.word	0x00cd02aa
    5748:	06e300cd 	.word	0x06e300cd
    574c:	00cd00cd 	.word	0x00cd00cd
    5750:	00cd00cd 	.word	0x00cd00cd
    5754:	00cd00cd 	.word	0x00cd00cd
    5758:	00cd00cd 	.word	0x00cd00cd
    575c:	00cd0153 	.word	0x00cd0153
    5760:	01de0183 	.word	0x01de0183
    5764:	01530153 	.word	0x01530153
    5768:	02770153 	.word	0x02770153
    576c:	007f01de 	.word	0x007f01de
    5770:	028900cd 	.word	0x028900cd
    5774:	025f00cd 	.word	0x025f00cd
    5778:	022f06e0 	.word	0x022f06e0
    577c:	00cd007f 	.word	0x00cd007f
    5780:	007c01ab 	.word	0x007c01ab
    5784:	00cd06b8 	.word	0x00cd06b8
    5788:	06bd00cd 	.word	0x06bd00cd
    578c:	007c00cd 	.word	0x007c00cd
    5790:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    5794:	2100      	movs	r1, #0
    5796:	f819 3b01 	ldrb.w	r3, [r9], #1
    579a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    579e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    57a2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    57a6:	2a09      	cmp	r2, #9
    57a8:	d9f5      	bls.n	5796 <_svfprintf_r+0x186>
    57aa:	9106      	str	r1, [sp, #24]
    57ac:	e78e      	b.n	56cc <_svfprintf_r+0xbc>
    57ae:	4658      	mov	r0, fp
    57b0:	f001 fdf6 	bl	73a0 <_localeconv_r>
    57b4:	6843      	ldr	r3, [r0, #4]
    57b6:	9315      	str	r3, [sp, #84]	; 0x54
    57b8:	4618      	mov	r0, r3
    57ba:	f7ff f941 	bl	4a40 <strlen>
    57be:	9016      	str	r0, [sp, #88]	; 0x58
    57c0:	4658      	mov	r0, fp
    57c2:	f001 fded 	bl	73a0 <_localeconv_r>
    57c6:	6883      	ldr	r3, [r0, #8]
    57c8:	9313      	str	r3, [sp, #76]	; 0x4c
    57ca:	9b16      	ldr	r3, [sp, #88]	; 0x58
    57cc:	2b00      	cmp	r3, #0
    57ce:	f040 862d 	bne.w	642c <_svfprintf_r+0xe1c>
    57d2:	f899 3000 	ldrb.w	r3, [r9]
    57d6:	e777      	b.n	56c8 <_svfprintf_r+0xb8>
    57d8:	f899 3000 	ldrb.w	r3, [r9]
    57dc:	f048 0820 	orr.w	r8, r8, #32
    57e0:	e772      	b.n	56c8 <_svfprintf_r+0xb8>
    57e2:	2208      	movs	r2, #8
    57e4:	2100      	movs	r1, #0
    57e6:	4638      	mov	r0, r7
    57e8:	f7fe fdea 	bl	43c0 <memset>
    57ec:	2301      	movs	r3, #1
    57ee:	4499      	add	r9, r3
    57f0:	e741      	b.n	5676 <_svfprintf_r+0x66>
    57f2:	ebb9 0504 	subs.w	r5, r9, r4
    57f6:	4606      	mov	r6, r0
    57f8:	d011      	beq.n	581e <_svfprintf_r+0x20e>
    57fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
    57fc:	442b      	add	r3, r5
    57fe:	9326      	str	r3, [sp, #152]	; 0x98
    5800:	9b25      	ldr	r3, [sp, #148]	; 0x94
    5802:	3301      	adds	r3, #1
    5804:	2b07      	cmp	r3, #7
    5806:	e9ca 4500 	strd	r4, r5, [sl]
    580a:	9325      	str	r3, [sp, #148]	; 0x94
    580c:	dc1c      	bgt.n	5848 <_svfprintf_r+0x238>
    580e:	f10a 0a08 	add.w	sl, sl, #8
    5812:	9b04      	ldr	r3, [sp, #16]
    5814:	442b      	add	r3, r5
    5816:	9304      	str	r3, [sp, #16]
    5818:	2e00      	cmp	r6, #0
    581a:	f47f af47 	bne.w	56ac <_svfprintf_r+0x9c>
    581e:	9b26      	ldr	r3, [sp, #152]	; 0x98
    5820:	2b00      	cmp	r3, #0
    5822:	f041 820b 	bne.w	6c3c <_svfprintf_r+0x162c>
    5826:	ee1b 3a10 	vmov	r3, s22
    582a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    582e:	f013 0f40 	tst.w	r3, #64	; 0x40
    5832:	9b04      	ldr	r3, [sp, #16]
    5834:	bf18      	it	ne
    5836:	f04f 33ff 	movne.w	r3, #4294967295
    583a:	9304      	str	r3, [sp, #16]
    583c:	9804      	ldr	r0, [sp, #16]
    583e:	b051      	add	sp, #324	; 0x144
    5840:	ecbd 8b08 	vpop	{d8-d11}
    5844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5848:	ee1b 1a10 	vmov	r1, s22
    584c:	aa24      	add	r2, sp, #144	; 0x90
    584e:	4658      	mov	r0, fp
    5850:	f002 fde6 	bl	8420 <__ssprint_r>
    5854:	2800      	cmp	r0, #0
    5856:	d1e6      	bne.n	5826 <_svfprintf_r+0x216>
    5858:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    585c:	e7d9      	b.n	5812 <_svfprintf_r+0x202>
    585e:	bf00      	nop
	...
    5868:	ffffffff 	.word	0xffffffff
    586c:	7fefffff 	.word	0x7fefffff
    5870:	200010f8 	.word	0x200010f8
    5874:	930b      	str	r3, [sp, #44]	; 0x2c
    5876:	2b00      	cmp	r3, #0
    5878:	d0d1      	beq.n	581e <_svfprintf_r+0x20e>
    587a:	2100      	movs	r1, #0
    587c:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    5880:	f88d 30dc 	strb.w	r3, [sp, #220]	; 0xdc
    5884:	2301      	movs	r3, #1
    5886:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    588a:	9302      	str	r3, [sp, #8]
    588c:	9107      	str	r1, [sp, #28]
    588e:	9305      	str	r3, [sp, #20]
    5890:	9103      	str	r1, [sp, #12]
    5892:	910f      	str	r1, [sp, #60]	; 0x3c
    5894:	ac37      	add	r4, sp, #220	; 0xdc
    5896:	f018 0302 	ands.w	r3, r8, #2
    589a:	9309      	str	r3, [sp, #36]	; 0x24
    589c:	d002      	beq.n	58a4 <_svfprintf_r+0x294>
    589e:	9b02      	ldr	r3, [sp, #8]
    58a0:	3302      	adds	r3, #2
    58a2:	9302      	str	r3, [sp, #8]
    58a4:	f018 0384 	ands.w	r3, r8, #132	; 0x84
    58a8:	930a      	str	r3, [sp, #40]	; 0x28
    58aa:	d105      	bne.n	58b8 <_svfprintf_r+0x2a8>
    58ac:	9b06      	ldr	r3, [sp, #24]
    58ae:	9a02      	ldr	r2, [sp, #8]
    58b0:	1a9d      	subs	r5, r3, r2
    58b2:	2d00      	cmp	r5, #0
    58b4:	f300 8369 	bgt.w	5f8a <_svfprintf_r+0x97a>
    58b8:	9a26      	ldr	r2, [sp, #152]	; 0x98
    58ba:	b189      	cbz	r1, 58e0 <_svfprintf_r+0x2d0>
    58bc:	9925      	ldr	r1, [sp, #148]	; 0x94
    58be:	f10d 0067 	add.w	r0, sp, #103	; 0x67
    58c2:	3101      	adds	r1, #1
    58c4:	3201      	adds	r2, #1
    58c6:	f8ca 0000 	str.w	r0, [sl]
    58ca:	2907      	cmp	r1, #7
    58cc:	f04f 0001 	mov.w	r0, #1
    58d0:	9226      	str	r2, [sp, #152]	; 0x98
    58d2:	9125      	str	r1, [sp, #148]	; 0x94
    58d4:	f8ca 0004 	str.w	r0, [sl, #4]
    58d8:	f300 83a2 	bgt.w	6020 <_svfprintf_r+0xa10>
    58dc:	f10a 0a08 	add.w	sl, sl, #8
    58e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    58e2:	b183      	cbz	r3, 5906 <_svfprintf_r+0x2f6>
    58e4:	9b25      	ldr	r3, [sp, #148]	; 0x94
    58e6:	a91a      	add	r1, sp, #104	; 0x68
    58e8:	3301      	adds	r3, #1
    58ea:	3202      	adds	r2, #2
    58ec:	f8ca 1000 	str.w	r1, [sl]
    58f0:	2b07      	cmp	r3, #7
    58f2:	f04f 0102 	mov.w	r1, #2
    58f6:	9226      	str	r2, [sp, #152]	; 0x98
    58f8:	9325      	str	r3, [sp, #148]	; 0x94
    58fa:	f8ca 1004 	str.w	r1, [sl, #4]
    58fe:	f300 83a3 	bgt.w	6048 <_svfprintf_r+0xa38>
    5902:	f10a 0a08 	add.w	sl, sl, #8
    5906:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5908:	2b80      	cmp	r3, #128	; 0x80
    590a:	f000 826c 	beq.w	5de6 <_svfprintf_r+0x7d6>
    590e:	9b03      	ldr	r3, [sp, #12]
    5910:	9905      	ldr	r1, [sp, #20]
    5912:	1a5d      	subs	r5, r3, r1
    5914:	2d00      	cmp	r5, #0
    5916:	f300 82a5 	bgt.w	5e64 <_svfprintf_r+0x854>
    591a:	f418 7f80 	tst.w	r8, #256	; 0x100
    591e:	f040 820d 	bne.w	5d3c <_svfprintf_r+0x72c>
    5922:	9b05      	ldr	r3, [sp, #20]
    5924:	f8ca 3004 	str.w	r3, [sl, #4]
    5928:	441a      	add	r2, r3
    592a:	9b25      	ldr	r3, [sp, #148]	; 0x94
    592c:	f8ca 4000 	str.w	r4, [sl]
    5930:	3301      	adds	r3, #1
    5932:	2b07      	cmp	r3, #7
    5934:	9226      	str	r2, [sp, #152]	; 0x98
    5936:	9325      	str	r3, [sp, #148]	; 0x94
    5938:	f300 831b 	bgt.w	5f72 <_svfprintf_r+0x962>
    593c:	f10a 0a08 	add.w	sl, sl, #8
    5940:	f018 0f04 	tst.w	r8, #4
    5944:	d005      	beq.n	5952 <_svfprintf_r+0x342>
    5946:	9b06      	ldr	r3, [sp, #24]
    5948:	9902      	ldr	r1, [sp, #8]
    594a:	1a5c      	subs	r4, r3, r1
    594c:	2c00      	cmp	r4, #0
    594e:	f300 8388 	bgt.w	6062 <_svfprintf_r+0xa52>
    5952:	9b04      	ldr	r3, [sp, #16]
    5954:	9906      	ldr	r1, [sp, #24]
    5956:	9802      	ldr	r0, [sp, #8]
    5958:	4281      	cmp	r1, r0
    595a:	bfac      	ite	ge
    595c:	185b      	addge	r3, r3, r1
    595e:	181b      	addlt	r3, r3, r0
    5960:	9304      	str	r3, [sp, #16]
    5962:	2a00      	cmp	r2, #0
    5964:	f040 82b0 	bne.w	5ec8 <_svfprintf_r+0x8b8>
    5968:	2300      	movs	r3, #0
    596a:	9325      	str	r3, [sp, #148]	; 0x94
    596c:	9b07      	ldr	r3, [sp, #28]
    596e:	b11b      	cbz	r3, 5978 <_svfprintf_r+0x368>
    5970:	9907      	ldr	r1, [sp, #28]
    5972:	4658      	mov	r0, fp
    5974:	f7ff f966 	bl	4c44 <_free_r>
    5978:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    597c:	464c      	mov	r4, r9
    597e:	e679      	b.n	5674 <_svfprintf_r+0x64>
    5980:	930b      	str	r3, [sp, #44]	; 0x2c
    5982:	9b08      	ldr	r3, [sp, #32]
    5984:	3307      	adds	r3, #7
    5986:	f023 0307 	bic.w	r3, r3, #7
    598a:	ecb3 8b02 	vldmia	r3!, {d8}
    598e:	eeb0 7bc8 	vabs.f64	d7, d8
    5992:	eeb4 7b49 	vcmp.f64	d7, d9
    5996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    599a:	9308      	str	r3, [sp, #32]
    599c:	f340 84e9 	ble.w	6372 <_svfprintf_r+0xd62>
    59a0:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
    59a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    59a8:	f101 8059 	bmi.w	6a5e <_svfprintf_r+0x144e>
    59ac:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    59b0:	4cab      	ldr	r4, [pc, #684]	; (5c60 <_svfprintf_r+0x650>)
    59b2:	4bac      	ldr	r3, [pc, #688]	; (5c64 <_svfprintf_r+0x654>)
    59b4:	f028 0880 	bic.w	r8, r8, #128	; 0x80
    59b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    59ba:	2a47      	cmp	r2, #71	; 0x47
    59bc:	bfc8      	it	gt
    59be:	461c      	movgt	r4, r3
    59c0:	2300      	movs	r3, #0
    59c2:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    59c6:	2203      	movs	r2, #3
    59c8:	9307      	str	r3, [sp, #28]
    59ca:	9202      	str	r2, [sp, #8]
    59cc:	9205      	str	r2, [sp, #20]
    59ce:	9303      	str	r3, [sp, #12]
    59d0:	930f      	str	r3, [sp, #60]	; 0x3c
    59d2:	2900      	cmp	r1, #0
    59d4:	f43f af5f 	beq.w	5896 <_svfprintf_r+0x286>
    59d8:	9b02      	ldr	r3, [sp, #8]
    59da:	3301      	adds	r3, #1
    59dc:	9302      	str	r3, [sp, #8]
    59de:	e75a      	b.n	5896 <_svfprintf_r+0x286>
    59e0:	2b43      	cmp	r3, #67	; 0x43
    59e2:	930b      	str	r3, [sp, #44]	; 0x2c
    59e4:	d003      	beq.n	59ee <_svfprintf_r+0x3de>
    59e6:	f018 0f10 	tst.w	r8, #16
    59ea:	f000 855d 	beq.w	64a8 <_svfprintf_r+0xe98>
    59ee:	9d08      	ldr	r5, [sp, #32]
    59f0:	2208      	movs	r2, #8
    59f2:	2100      	movs	r1, #0
    59f4:	a822      	add	r0, sp, #136	; 0x88
    59f6:	ac37      	add	r4, sp, #220	; 0xdc
    59f8:	f7fe fce2 	bl	43c0 <memset>
    59fc:	ab22      	add	r3, sp, #136	; 0x88
    59fe:	f855 2b04 	ldr.w	r2, [r5], #4
    5a02:	4621      	mov	r1, r4
    5a04:	4658      	mov	r0, fp
    5a06:	f002 fcc5 	bl	8394 <_wcrtomb_r>
    5a0a:	4603      	mov	r3, r0
    5a0c:	3301      	adds	r3, #1
    5a0e:	9005      	str	r0, [sp, #20]
    5a10:	f001 82ee 	beq.w	6ff0 <_svfprintf_r+0x19e0>
    5a14:	9b05      	ldr	r3, [sp, #20]
    5a16:	9508      	str	r5, [sp, #32]
    5a18:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    5a1c:	9302      	str	r3, [sp, #8]
    5a1e:	2100      	movs	r1, #0
    5a20:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    5a24:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    5a28:	9107      	str	r1, [sp, #28]
    5a2a:	9103      	str	r1, [sp, #12]
    5a2c:	910f      	str	r1, [sp, #60]	; 0x3c
    5a2e:	e732      	b.n	5896 <_svfprintf_r+0x286>
    5a30:	930b      	str	r3, [sp, #44]	; 0x2c
    5a32:	9b08      	ldr	r3, [sp, #32]
    5a34:	461a      	mov	r2, r3
    5a36:	2300      	movs	r3, #0
    5a38:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    5a3c:	4613      	mov	r3, r2
    5a3e:	f853 4b04 	ldr.w	r4, [r3], #4
    5a42:	9308      	str	r3, [sp, #32]
    5a44:	2c00      	cmp	r4, #0
    5a46:	f000 8548 	beq.w	64da <_svfprintf_r+0xeca>
    5a4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5a4c:	2b53      	cmp	r3, #83	; 0x53
    5a4e:	f000 86ec 	beq.w	682a <_svfprintf_r+0x121a>
    5a52:	f018 0310 	ands.w	r3, r8, #16
    5a56:	930c      	str	r3, [sp, #48]	; 0x30
    5a58:	f040 86e7 	bne.w	682a <_svfprintf_r+0x121a>
    5a5c:	9b03      	ldr	r3, [sp, #12]
    5a5e:	1c5d      	adds	r5, r3, #1
    5a60:	f001 80e5 	beq.w	6c2e <_svfprintf_r+0x161e>
    5a64:	990c      	ldr	r1, [sp, #48]	; 0x30
    5a66:	461a      	mov	r2, r3
    5a68:	4620      	mov	r0, r4
    5a6a:	f001 fca1 	bl	73b0 <memchr>
    5a6e:	9007      	str	r0, [sp, #28]
    5a70:	2800      	cmp	r0, #0
    5a72:	f001 8328 	beq.w	70c6 <_svfprintf_r+0x1ab6>
    5a76:	9b07      	ldr	r3, [sp, #28]
    5a78:	1b1a      	subs	r2, r3, r4
    5a7a:	9205      	str	r2, [sp, #20]
    5a7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5a7e:	9303      	str	r3, [sp, #12]
    5a80:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    5a84:	930f      	str	r3, [sp, #60]	; 0x3c
    5a86:	930d      	str	r3, [sp, #52]	; 0x34
    5a88:	9307      	str	r3, [sp, #28]
    5a8a:	2373      	movs	r3, #115	; 0x73
    5a8c:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    5a90:	9202      	str	r2, [sp, #8]
    5a92:	930b      	str	r3, [sp, #44]	; 0x2c
    5a94:	e79d      	b.n	59d2 <_svfprintf_r+0x3c2>
    5a96:	f018 0f20 	tst.w	r8, #32
    5a9a:	930b      	str	r3, [sp, #44]	; 0x2c
    5a9c:	9b08      	ldr	r3, [sp, #32]
    5a9e:	d03d      	beq.n	5b1c <_svfprintf_r+0x50c>
    5aa0:	3307      	adds	r3, #7
    5aa2:	f023 0307 	bic.w	r3, r3, #7
    5aa6:	461a      	mov	r2, r3
    5aa8:	4611      	mov	r1, r2
    5aaa:	685b      	ldr	r3, [r3, #4]
    5aac:	f851 2b08 	ldr.w	r2, [r1], #8
    5ab0:	9108      	str	r1, [sp, #32]
    5ab2:	4619      	mov	r1, r3
    5ab4:	2b00      	cmp	r3, #0
    5ab6:	f2c0 840c 	blt.w	62d2 <_svfprintf_r+0xcc2>
    5aba:	9b03      	ldr	r3, [sp, #12]
    5abc:	3301      	adds	r3, #1
    5abe:	f000 829e 	beq.w	5ffe <_svfprintf_r+0x9ee>
    5ac2:	f028 0080 	bic.w	r0, r8, #128	; 0x80
    5ac6:	ea52 0301 	orrs.w	r3, r2, r1
    5aca:	9002      	str	r0, [sp, #8]
    5acc:	f040 8299 	bne.w	6002 <_svfprintf_r+0x9f2>
    5ad0:	9b03      	ldr	r3, [sp, #12]
    5ad2:	2b00      	cmp	r3, #0
    5ad4:	f040 829a 	bne.w	600c <_svfprintf_r+0x9fc>
    5ad8:	4680      	mov	r8, r0
    5ada:	2300      	movs	r3, #0
    5adc:	9303      	str	r3, [sp, #12]
    5ade:	9305      	str	r3, [sp, #20]
    5ae0:	ac50      	add	r4, sp, #320	; 0x140
    5ae2:	e106      	b.n	5cf2 <_svfprintf_r+0x6e2>
    5ae4:	9b08      	ldr	r3, [sp, #32]
    5ae6:	f853 2b04 	ldr.w	r2, [r3], #4
    5aea:	9206      	str	r2, [sp, #24]
    5aec:	2a00      	cmp	r2, #0
    5aee:	f280 8419 	bge.w	6324 <_svfprintf_r+0xd14>
    5af2:	9a06      	ldr	r2, [sp, #24]
    5af4:	9308      	str	r3, [sp, #32]
    5af6:	4252      	negs	r2, r2
    5af8:	9206      	str	r2, [sp, #24]
    5afa:	f899 3000 	ldrb.w	r3, [r9]
    5afe:	f048 0804 	orr.w	r8, r8, #4
    5b02:	e5e1      	b.n	56c8 <_svfprintf_r+0xb8>
    5b04:	f899 3000 	ldrb.w	r3, [r9]
    5b08:	f048 0808 	orr.w	r8, r8, #8
    5b0c:	e5dc      	b.n	56c8 <_svfprintf_r+0xb8>
    5b0e:	f048 0810 	orr.w	r8, r8, #16
    5b12:	f018 0f20 	tst.w	r8, #32
    5b16:	930b      	str	r3, [sp, #44]	; 0x2c
    5b18:	9b08      	ldr	r3, [sp, #32]
    5b1a:	d1c1      	bne.n	5aa0 <_svfprintf_r+0x490>
    5b1c:	f018 0f10 	tst.w	r8, #16
    5b20:	f040 840b 	bne.w	633a <_svfprintf_r+0xd2a>
    5b24:	f018 0f40 	tst.w	r8, #64	; 0x40
    5b28:	f000 8403 	beq.w	6332 <_svfprintf_r+0xd22>
    5b2c:	f933 2b04 	ldrsh.w	r2, [r3], #4
    5b30:	9308      	str	r3, [sp, #32]
    5b32:	17d1      	asrs	r1, r2, #31
    5b34:	460b      	mov	r3, r1
    5b36:	e7bd      	b.n	5ab4 <_svfprintf_r+0x4a4>
    5b38:	9b08      	ldr	r3, [sp, #32]
    5b3a:	f048 0202 	orr.w	r2, r8, #2
    5b3e:	9202      	str	r2, [sp, #8]
    5b40:	f853 2b04 	ldr.w	r2, [r3], #4
    5b44:	9308      	str	r3, [sp, #32]
    5b46:	f647 0330 	movw	r3, #30768	; 0x7830
    5b4a:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    5b4e:	2078      	movs	r0, #120	; 0x78
    5b50:	4b45      	ldr	r3, [pc, #276]	; (5c68 <_svfprintf_r+0x658>)
    5b52:	9311      	str	r3, [sp, #68]	; 0x44
    5b54:	2100      	movs	r1, #0
    5b56:	2302      	movs	r3, #2
    5b58:	900b      	str	r0, [sp, #44]	; 0x2c
    5b5a:	2000      	movs	r0, #0
    5b5c:	9c03      	ldr	r4, [sp, #12]
    5b5e:	f88d 0067 	strb.w	r0, [sp, #103]	; 0x67
    5b62:	1c60      	adds	r0, r4, #1
    5b64:	f000 80ad 	beq.w	5cc2 <_svfprintf_r+0x6b2>
    5b68:	9802      	ldr	r0, [sp, #8]
    5b6a:	f020 0880 	bic.w	r8, r0, #128	; 0x80
    5b6e:	ea52 0001 	orrs.w	r0, r2, r1
    5b72:	f040 80a4 	bne.w	5cbe <_svfprintf_r+0x6ae>
    5b76:	2c00      	cmp	r4, #0
    5b78:	f040 86ae 	bne.w	68d8 <_svfprintf_r+0x12c8>
    5b7c:	2b00      	cmp	r3, #0
    5b7e:	d1ac      	bne.n	5ada <_svfprintf_r+0x4ca>
    5b80:	9b02      	ldr	r3, [sp, #8]
    5b82:	f013 0301 	ands.w	r3, r3, #1
    5b86:	9305      	str	r3, [sp, #20]
    5b88:	f000 83d1 	beq.w	632e <_svfprintf_r+0xd1e>
    5b8c:	2330      	movs	r3, #48	; 0x30
    5b8e:	f88d 313f 	strb.w	r3, [sp, #319]	; 0x13f
    5b92:	f20d 143f 	addw	r4, sp, #319	; 0x13f
    5b96:	e0ac      	b.n	5cf2 <_svfprintf_r+0x6e2>
    5b98:	f018 0f20 	tst.w	r8, #32
    5b9c:	f040 83d4 	bne.w	6348 <_svfprintf_r+0xd38>
    5ba0:	f018 0f10 	tst.w	r8, #16
    5ba4:	f040 869f 	bne.w	68e6 <_svfprintf_r+0x12d6>
    5ba8:	f018 0f40 	tst.w	r8, #64	; 0x40
    5bac:	f040 8797 	bne.w	6ade <_svfprintf_r+0x14ce>
    5bb0:	f418 7f00 	tst.w	r8, #512	; 0x200
    5bb4:	f000 8697 	beq.w	68e6 <_svfprintf_r+0x12d6>
    5bb8:	9b08      	ldr	r3, [sp, #32]
    5bba:	9904      	ldr	r1, [sp, #16]
    5bbc:	f853 2b04 	ldr.w	r2, [r3], #4
    5bc0:	9308      	str	r3, [sp, #32]
    5bc2:	7011      	strb	r1, [r2, #0]
    5bc4:	464c      	mov	r4, r9
    5bc6:	e555      	b.n	5674 <_svfprintf_r+0x64>
    5bc8:	f899 3000 	ldrb.w	r3, [r9]
    5bcc:	2b68      	cmp	r3, #104	; 0x68
    5bce:	bf03      	ittte	eq
    5bd0:	f899 3001 	ldrbeq.w	r3, [r9, #1]
    5bd4:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
    5bd8:	f109 0901 	addeq.w	r9, r9, #1
    5bdc:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
    5be0:	e572      	b.n	56c8 <_svfprintf_r+0xb8>
    5be2:	f899 3000 	ldrb.w	r3, [r9]
    5be6:	f88d 5067 	strb.w	r5, [sp, #103]	; 0x67
    5bea:	e56d      	b.n	56c8 <_svfprintf_r+0xb8>
    5bec:	f899 3000 	ldrb.w	r3, [r9]
    5bf0:	2b6c      	cmp	r3, #108	; 0x6c
    5bf2:	bf03      	ittte	eq
    5bf4:	f899 3001 	ldrbeq.w	r3, [r9, #1]
    5bf8:	f048 0820 	orreq.w	r8, r8, #32
    5bfc:	f109 0901 	addeq.w	r9, r9, #1
    5c00:	f048 0810 	orrne.w	r8, r8, #16
    5c04:	e560      	b.n	56c8 <_svfprintf_r+0xb8>
    5c06:	930b      	str	r3, [sp, #44]	; 0x2c
    5c08:	f048 0810 	orr.w	r8, r8, #16
    5c0c:	f018 0120 	ands.w	r1, r8, #32
    5c10:	f000 8351 	beq.w	62b6 <_svfprintf_r+0xca6>
    5c14:	9b08      	ldr	r3, [sp, #32]
    5c16:	3307      	adds	r3, #7
    5c18:	f023 0307 	bic.w	r3, r3, #7
    5c1c:	6859      	ldr	r1, [r3, #4]
    5c1e:	f853 2b08 	ldr.w	r2, [r3], #8
    5c22:	9308      	str	r3, [sp, #32]
    5c24:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
    5c28:	9302      	str	r3, [sp, #8]
    5c2a:	2300      	movs	r3, #0
    5c2c:	e795      	b.n	5b5a <_svfprintf_r+0x54a>
    5c2e:	930b      	str	r3, [sp, #44]	; 0x2c
    5c30:	f048 0310 	orr.w	r3, r8, #16
    5c34:	9302      	str	r3, [sp, #8]
    5c36:	9b02      	ldr	r3, [sp, #8]
    5c38:	f013 0120 	ands.w	r1, r3, #32
    5c3c:	f000 8329 	beq.w	6292 <_svfprintf_r+0xc82>
    5c40:	9b08      	ldr	r3, [sp, #32]
    5c42:	3307      	adds	r3, #7
    5c44:	f023 0307 	bic.w	r3, r3, #7
    5c48:	6859      	ldr	r1, [r3, #4]
    5c4a:	f853 2b08 	ldr.w	r2, [r3], #8
    5c4e:	9308      	str	r3, [sp, #32]
    5c50:	2301      	movs	r3, #1
    5c52:	e782      	b.n	5b5a <_svfprintf_r+0x54a>
    5c54:	f899 3000 	ldrb.w	r3, [r9]
    5c58:	f048 0880 	orr.w	r8, r8, #128	; 0x80
    5c5c:	e534      	b.n	56c8 <_svfprintf_r+0xb8>
    5c5e:	bf00      	nop
    5c60:	200005e8 	.word	0x200005e8
    5c64:	200005ec 	.word	0x200005ec
    5c68:	200005f8 	.word	0x200005f8
    5c6c:	4649      	mov	r1, r9
    5c6e:	f811 3b01 	ldrb.w	r3, [r1], #1
    5c72:	2b2a      	cmp	r3, #42	; 0x2a
    5c74:	f001 8249 	beq.w	710a <_svfprintf_r+0x1afa>
    5c78:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    5c7c:	2a09      	cmp	r2, #9
    5c7e:	4689      	mov	r9, r1
    5c80:	bf98      	it	ls
    5c82:	2100      	movls	r1, #0
    5c84:	f201 8144 	bhi.w	6f10 <_svfprintf_r+0x1900>
    5c88:	f819 3b01 	ldrb.w	r3, [r9], #1
    5c8c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    5c90:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    5c94:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    5c98:	2a09      	cmp	r2, #9
    5c9a:	d9f5      	bls.n	5c88 <_svfprintf_r+0x678>
    5c9c:	9103      	str	r1, [sp, #12]
    5c9e:	e515      	b.n	56cc <_svfprintf_r+0xbc>
    5ca0:	f899 3000 	ldrb.w	r3, [r9]
    5ca4:	f048 0801 	orr.w	r8, r8, #1
    5ca8:	e50e      	b.n	56c8 <_svfprintf_r+0xb8>
    5caa:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
    5cae:	2b00      	cmp	r3, #0
    5cb0:	f47f ad8f 	bne.w	57d2 <_svfprintf_r+0x1c2>
    5cb4:	f899 3000 	ldrb.w	r3, [r9]
    5cb8:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
    5cbc:	e504      	b.n	56c8 <_svfprintf_r+0xb8>
    5cbe:	f8cd 8008 	str.w	r8, [sp, #8]
    5cc2:	2b01      	cmp	r3, #1
    5cc4:	f000 819d 	beq.w	6002 <_svfprintf_r+0x9f2>
    5cc8:	2b02      	cmp	r3, #2
    5cca:	ac50      	add	r4, sp, #320	; 0x140
    5ccc:	d120      	bne.n	5d10 <_svfprintf_r+0x700>
    5cce:	9811      	ldr	r0, [sp, #68]	; 0x44
    5cd0:	f002 030f 	and.w	r3, r2, #15
    5cd4:	0912      	lsrs	r2, r2, #4
    5cd6:	5cc3      	ldrb	r3, [r0, r3]
    5cd8:	f804 3d01 	strb.w	r3, [r4, #-1]!
    5cdc:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    5ce0:	0909      	lsrs	r1, r1, #4
    5ce2:	ea52 0301 	orrs.w	r3, r2, r1
    5ce6:	d1f3      	bne.n	5cd0 <_svfprintf_r+0x6c0>
    5ce8:	ab50      	add	r3, sp, #320	; 0x140
    5cea:	1b1b      	subs	r3, r3, r4
    5cec:	f8dd 8008 	ldr.w	r8, [sp, #8]
    5cf0:	9305      	str	r3, [sp, #20]
    5cf2:	9a05      	ldr	r2, [sp, #20]
    5cf4:	9803      	ldr	r0, [sp, #12]
    5cf6:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    5cfa:	4282      	cmp	r2, r0
    5cfc:	f04f 0300 	mov.w	r3, #0
    5d00:	bfb8      	it	lt
    5d02:	4602      	movlt	r2, r0
    5d04:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    5d08:	9307      	str	r3, [sp, #28]
    5d0a:	9202      	str	r2, [sp, #8]
    5d0c:	930f      	str	r3, [sp, #60]	; 0x3c
    5d0e:	e660      	b.n	59d2 <_svfprintf_r+0x3c2>
    5d10:	f002 0307 	and.w	r3, r2, #7
    5d14:	08d2      	lsrs	r2, r2, #3
    5d16:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    5d1a:	08c9      	lsrs	r1, r1, #3
    5d1c:	3330      	adds	r3, #48	; 0x30
    5d1e:	ea52 0501 	orrs.w	r5, r2, r1
    5d22:	4620      	mov	r0, r4
    5d24:	f804 3d01 	strb.w	r3, [r4, #-1]!
    5d28:	d1f2      	bne.n	5d10 <_svfprintf_r+0x700>
    5d2a:	9a02      	ldr	r2, [sp, #8]
    5d2c:	07d1      	lsls	r1, r2, #31
    5d2e:	f100 824d 	bmi.w	61cc <_svfprintf_r+0xbbc>
    5d32:	ab50      	add	r3, sp, #320	; 0x140
    5d34:	1b1b      	subs	r3, r3, r4
    5d36:	4690      	mov	r8, r2
    5d38:	9305      	str	r3, [sp, #20]
    5d3a:	e7da      	b.n	5cf2 <_svfprintf_r+0x6e2>
    5d3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5d3e:	2b65      	cmp	r3, #101	; 0x65
    5d40:	f340 80d4 	ble.w	5eec <_svfprintf_r+0x8dc>
    5d44:	eeb5 8b40 	vcmp.f64	d8, #0.0
    5d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5d4c:	f040 81c1 	bne.w	60d2 <_svfprintf_r+0xac2>
    5d50:	9b25      	ldr	r3, [sp, #148]	; 0x94
    5d52:	49ba      	ldr	r1, [pc, #744]	; (603c <_svfprintf_r+0xa2c>)
    5d54:	f8ca 1000 	str.w	r1, [sl]
    5d58:	3301      	adds	r3, #1
    5d5a:	3201      	adds	r2, #1
    5d5c:	2101      	movs	r1, #1
    5d5e:	2b07      	cmp	r3, #7
    5d60:	9226      	str	r2, [sp, #152]	; 0x98
    5d62:	9325      	str	r3, [sp, #148]	; 0x94
    5d64:	f8ca 1004 	str.w	r1, [sl, #4]
    5d68:	f300 8551 	bgt.w	680e <_svfprintf_r+0x11fe>
    5d6c:	f10a 0a08 	add.w	sl, sl, #8
    5d70:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    5d72:	990e      	ldr	r1, [sp, #56]	; 0x38
    5d74:	428b      	cmp	r3, r1
    5d76:	f280 82d0 	bge.w	631a <_svfprintf_r+0xd0a>
    5d7a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5d7c:	9912      	ldr	r1, [sp, #72]	; 0x48
    5d7e:	441a      	add	r2, r3
    5d80:	e9ca 1300 	strd	r1, r3, [sl]
    5d84:	9b25      	ldr	r3, [sp, #148]	; 0x94
    5d86:	9226      	str	r2, [sp, #152]	; 0x98
    5d88:	3301      	adds	r3, #1
    5d8a:	2b07      	cmp	r3, #7
    5d8c:	9325      	str	r3, [sp, #148]	; 0x94
    5d8e:	f300 8397 	bgt.w	64c0 <_svfprintf_r+0xeb0>
    5d92:	f10a 0a08 	add.w	sl, sl, #8
    5d96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    5d98:	1e5c      	subs	r4, r3, #1
    5d9a:	2c00      	cmp	r4, #0
    5d9c:	f77f add0 	ble.w	5940 <_svfprintf_r+0x330>
    5da0:	2c10      	cmp	r4, #16
    5da2:	9b25      	ldr	r3, [sp, #148]	; 0x94
    5da4:	f340 856e 	ble.w	6884 <_svfprintf_r+0x1274>
    5da8:	ee1b 6a10 	vmov	r6, s22
    5dac:	2510      	movs	r5, #16
    5dae:	e005      	b.n	5dbc <_svfprintf_r+0x7ac>
    5db0:	f10a 0a08 	add.w	sl, sl, #8
    5db4:	3c10      	subs	r4, #16
    5db6:	2c10      	cmp	r4, #16
    5db8:	f340 8564 	ble.w	6884 <_svfprintf_r+0x1274>
    5dbc:	3301      	adds	r3, #1
    5dbe:	49a0      	ldr	r1, [pc, #640]	; (6040 <_svfprintf_r+0xa30>)
    5dc0:	3210      	adds	r2, #16
    5dc2:	2b07      	cmp	r3, #7
    5dc4:	e9ca 1500 	strd	r1, r5, [sl]
    5dc8:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    5dcc:	ddf0      	ble.n	5db0 <_svfprintf_r+0x7a0>
    5dce:	aa24      	add	r2, sp, #144	; 0x90
    5dd0:	4631      	mov	r1, r6
    5dd2:	4658      	mov	r0, fp
    5dd4:	f002 fb24 	bl	8420 <__ssprint_r>
    5dd8:	2800      	cmp	r0, #0
    5dda:	d17e      	bne.n	5eda <_svfprintf_r+0x8ca>
    5ddc:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    5de0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    5de4:	e7e6      	b.n	5db4 <_svfprintf_r+0x7a4>
    5de6:	9b06      	ldr	r3, [sp, #24]
    5de8:	9902      	ldr	r1, [sp, #8]
    5dea:	1a5d      	subs	r5, r3, r1
    5dec:	2d00      	cmp	r5, #0
    5dee:	f77f ad8e 	ble.w	590e <_svfprintf_r+0x2fe>
    5df2:	2d10      	cmp	r5, #16
    5df4:	9b25      	ldr	r3, [sp, #148]	; 0x94
    5df6:	dd21      	ble.n	5e3c <_svfprintf_r+0x82c>
    5df8:	9409      	str	r4, [sp, #36]	; 0x24
    5dfa:	2610      	movs	r6, #16
    5dfc:	ee1b 4a10 	vmov	r4, s22
    5e00:	e004      	b.n	5e0c <_svfprintf_r+0x7fc>
    5e02:	3d10      	subs	r5, #16
    5e04:	2d10      	cmp	r5, #16
    5e06:	f10a 0a08 	add.w	sl, sl, #8
    5e0a:	dd16      	ble.n	5e3a <_svfprintf_r+0x82a>
    5e0c:	3301      	adds	r3, #1
    5e0e:	498c      	ldr	r1, [pc, #560]	; (6040 <_svfprintf_r+0xa30>)
    5e10:	3210      	adds	r2, #16
    5e12:	2b07      	cmp	r3, #7
    5e14:	e9ca 1600 	strd	r1, r6, [sl]
    5e18:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    5e1c:	ddf1      	ble.n	5e02 <_svfprintf_r+0x7f2>
    5e1e:	aa24      	add	r2, sp, #144	; 0x90
    5e20:	4621      	mov	r1, r4
    5e22:	4658      	mov	r0, fp
    5e24:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    5e28:	f002 fafa 	bl	8420 <__ssprint_r>
    5e2c:	2800      	cmp	r0, #0
    5e2e:	d154      	bne.n	5eda <_svfprintf_r+0x8ca>
    5e30:	3d10      	subs	r5, #16
    5e32:	2d10      	cmp	r5, #16
    5e34:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    5e38:	dce8      	bgt.n	5e0c <_svfprintf_r+0x7fc>
    5e3a:	9c09      	ldr	r4, [sp, #36]	; 0x24
    5e3c:	4980      	ldr	r1, [pc, #512]	; (6040 <_svfprintf_r+0xa30>)
    5e3e:	f8ca 5004 	str.w	r5, [sl, #4]
    5e42:	3301      	adds	r3, #1
    5e44:	442a      	add	r2, r5
    5e46:	2b07      	cmp	r3, #7
    5e48:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    5e4c:	f8ca 1000 	str.w	r1, [sl]
    5e50:	f300 8526 	bgt.w	68a0 <_svfprintf_r+0x1290>
    5e54:	9b03      	ldr	r3, [sp, #12]
    5e56:	9905      	ldr	r1, [sp, #20]
    5e58:	1a5d      	subs	r5, r3, r1
    5e5a:	2d00      	cmp	r5, #0
    5e5c:	f10a 0a08 	add.w	sl, sl, #8
    5e60:	f77f ad5b 	ble.w	591a <_svfprintf_r+0x30a>
    5e64:	2d10      	cmp	r5, #16
    5e66:	9b25      	ldr	r3, [sp, #148]	; 0x94
    5e68:	dd1f      	ble.n	5eaa <_svfprintf_r+0x89a>
    5e6a:	4651      	mov	r1, sl
    5e6c:	2610      	movs	r6, #16
    5e6e:	ee1b aa10 	vmov	sl, s22
    5e72:	e004      	b.n	5e7e <_svfprintf_r+0x86e>
    5e74:	3d10      	subs	r5, #16
    5e76:	2d10      	cmp	r5, #16
    5e78:	f101 0108 	add.w	r1, r1, #8
    5e7c:	dd14      	ble.n	5ea8 <_svfprintf_r+0x898>
    5e7e:	3301      	adds	r3, #1
    5e80:	486f      	ldr	r0, [pc, #444]	; (6040 <_svfprintf_r+0xa30>)
    5e82:	3210      	adds	r2, #16
    5e84:	2b07      	cmp	r3, #7
    5e86:	e9c1 0600 	strd	r0, r6, [r1]
    5e8a:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    5e8e:	ddf1      	ble.n	5e74 <_svfprintf_r+0x864>
    5e90:	aa24      	add	r2, sp, #144	; 0x90
    5e92:	4651      	mov	r1, sl
    5e94:	4658      	mov	r0, fp
    5e96:	f002 fac3 	bl	8420 <__ssprint_r>
    5e9a:	b9f0      	cbnz	r0, 5eda <_svfprintf_r+0x8ca>
    5e9c:	3d10      	subs	r5, #16
    5e9e:	2d10      	cmp	r5, #16
    5ea0:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    5ea4:	a927      	add	r1, sp, #156	; 0x9c
    5ea6:	dcea      	bgt.n	5e7e <_svfprintf_r+0x86e>
    5ea8:	468a      	mov	sl, r1
    5eaa:	3301      	adds	r3, #1
    5eac:	4964      	ldr	r1, [pc, #400]	; (6040 <_svfprintf_r+0xa30>)
    5eae:	f8ca 5004 	str.w	r5, [sl, #4]
    5eb2:	442a      	add	r2, r5
    5eb4:	2b07      	cmp	r3, #7
    5eb6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    5eba:	f8ca 1000 	str.w	r1, [sl]
    5ebe:	f300 81da 	bgt.w	6276 <_svfprintf_r+0xc66>
    5ec2:	f10a 0a08 	add.w	sl, sl, #8
    5ec6:	e528      	b.n	591a <_svfprintf_r+0x30a>
    5ec8:	ee1b 1a10 	vmov	r1, s22
    5ecc:	aa24      	add	r2, sp, #144	; 0x90
    5ece:	4658      	mov	r0, fp
    5ed0:	f002 faa6 	bl	8420 <__ssprint_r>
    5ed4:	2800      	cmp	r0, #0
    5ed6:	f43f ad47 	beq.w	5968 <_svfprintf_r+0x358>
    5eda:	9b07      	ldr	r3, [sp, #28]
    5edc:	2b00      	cmp	r3, #0
    5ede:	f43f aca2 	beq.w	5826 <_svfprintf_r+0x216>
    5ee2:	9907      	ldr	r1, [sp, #28]
    5ee4:	4658      	mov	r0, fp
    5ee6:	f7fe fead 	bl	4c44 <_free_r>
    5eea:	e49c      	b.n	5826 <_svfprintf_r+0x216>
    5eec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    5eee:	2b01      	cmp	r3, #1
    5ef0:	f340 817a 	ble.w	61e8 <_svfprintf_r+0xbd8>
    5ef4:	9b25      	ldr	r3, [sp, #148]	; 0x94
    5ef6:	f8ca 4000 	str.w	r4, [sl]
    5efa:	3301      	adds	r3, #1
    5efc:	3201      	adds	r2, #1
    5efe:	2101      	movs	r1, #1
    5f00:	2b07      	cmp	r3, #7
    5f02:	9226      	str	r2, [sp, #152]	; 0x98
    5f04:	9325      	str	r3, [sp, #148]	; 0x94
    5f06:	f8ca 1004 	str.w	r1, [sl, #4]
    5f0a:	f300 81f8 	bgt.w	62fe <_svfprintf_r+0xcee>
    5f0e:	f10a 0a08 	add.w	sl, sl, #8
    5f12:	9910      	ldr	r1, [sp, #64]	; 0x40
    5f14:	9812      	ldr	r0, [sp, #72]	; 0x48
    5f16:	3301      	adds	r3, #1
    5f18:	440a      	add	r2, r1
    5f1a:	2b07      	cmp	r3, #7
    5f1c:	e9ca 0100 	strd	r0, r1, [sl]
    5f20:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    5f24:	f300 81dd 	bgt.w	62e2 <_svfprintf_r+0xcd2>
    5f28:	f10a 0a08 	add.w	sl, sl, #8
    5f2c:	eeb5 8b40 	vcmp.f64	d8, #0.0
    5f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5f34:	f000 8177 	beq.w	6226 <_svfprintf_r+0xc16>
    5f38:	990e      	ldr	r1, [sp, #56]	; 0x38
    5f3a:	3301      	adds	r3, #1
    5f3c:	3901      	subs	r1, #1
    5f3e:	3401      	adds	r4, #1
    5f40:	440a      	add	r2, r1
    5f42:	2b07      	cmp	r3, #7
    5f44:	f8ca 4000 	str.w	r4, [sl]
    5f48:	9325      	str	r3, [sp, #148]	; 0x94
    5f4a:	f8ca 1004 	str.w	r1, [sl, #4]
    5f4e:	9226      	str	r2, [sp, #152]	; 0x98
    5f50:	f300 815b 	bgt.w	620a <_svfprintf_r+0xbfa>
    5f54:	f10a 0a08 	add.w	sl, sl, #8
    5f58:	9914      	ldr	r1, [sp, #80]	; 0x50
    5f5a:	f8ca 1004 	str.w	r1, [sl, #4]
    5f5e:	3301      	adds	r3, #1
    5f60:	440a      	add	r2, r1
    5f62:	2b07      	cmp	r3, #7
    5f64:	a91e      	add	r1, sp, #120	; 0x78
    5f66:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    5f6a:	f8ca 1000 	str.w	r1, [sl]
    5f6e:	f77f ace5 	ble.w	593c <_svfprintf_r+0x32c>
    5f72:	ee1b 1a10 	vmov	r1, s22
    5f76:	aa24      	add	r2, sp, #144	; 0x90
    5f78:	4658      	mov	r0, fp
    5f7a:	f002 fa51 	bl	8420 <__ssprint_r>
    5f7e:	2800      	cmp	r0, #0
    5f80:	d1ab      	bne.n	5eda <_svfprintf_r+0x8ca>
    5f82:	9a26      	ldr	r2, [sp, #152]	; 0x98
    5f84:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    5f88:	e4da      	b.n	5940 <_svfprintf_r+0x330>
    5f8a:	2d10      	cmp	r5, #16
    5f8c:	e9dd 1225 	ldrd	r1, r2, [sp, #148]	; 0x94
    5f90:	4e2c      	ldr	r6, [pc, #176]	; (6044 <_svfprintf_r+0xa34>)
    5f92:	dd24      	ble.n	5fde <_svfprintf_r+0x9ce>
    5f94:	9417      	str	r4, [sp, #92]	; 0x5c
    5f96:	2310      	movs	r3, #16
    5f98:	ee1b 4a10 	vmov	r4, s22
    5f9c:	4608      	mov	r0, r1
    5f9e:	e004      	b.n	5faa <_svfprintf_r+0x99a>
    5fa0:	3d10      	subs	r5, #16
    5fa2:	2d10      	cmp	r5, #16
    5fa4:	f10a 0a08 	add.w	sl, sl, #8
    5fa8:	dd17      	ble.n	5fda <_svfprintf_r+0x9ca>
    5faa:	3001      	adds	r0, #1
    5fac:	3210      	adds	r2, #16
    5fae:	2807      	cmp	r0, #7
    5fb0:	e9ca 6300 	strd	r6, r3, [sl]
    5fb4:	e9cd 0225 	strd	r0, r2, [sp, #148]	; 0x94
    5fb8:	ddf2      	ble.n	5fa0 <_svfprintf_r+0x990>
    5fba:	aa24      	add	r2, sp, #144	; 0x90
    5fbc:	4621      	mov	r1, r4
    5fbe:	4658      	mov	r0, fp
    5fc0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    5fc4:	f002 fa2c 	bl	8420 <__ssprint_r>
    5fc8:	2800      	cmp	r0, #0
    5fca:	d186      	bne.n	5eda <_svfprintf_r+0x8ca>
    5fcc:	3d10      	subs	r5, #16
    5fce:	2d10      	cmp	r5, #16
    5fd0:	e9dd 0225 	ldrd	r0, r2, [sp, #148]	; 0x94
    5fd4:	f04f 0310 	mov.w	r3, #16
    5fd8:	dce7      	bgt.n	5faa <_svfprintf_r+0x99a>
    5fda:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    5fdc:	4601      	mov	r1, r0
    5fde:	3101      	adds	r1, #1
    5fe0:	442a      	add	r2, r5
    5fe2:	2907      	cmp	r1, #7
    5fe4:	e9cd 1225 	strd	r1, r2, [sp, #148]	; 0x94
    5fe8:	f8ca 6000 	str.w	r6, [sl]
    5fec:	f8ca 5004 	str.w	r5, [sl, #4]
    5ff0:	f300 83bd 	bgt.w	676e <_svfprintf_r+0x115e>
    5ff4:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    5ff8:	f10a 0a08 	add.w	sl, sl, #8
    5ffc:	e45d      	b.n	58ba <_svfprintf_r+0x2aa>
    5ffe:	f8cd 8008 	str.w	r8, [sp, #8]
    6002:	2a0a      	cmp	r2, #10
    6004:	f171 0300 	sbcs.w	r3, r1, #0
    6008:	f080 8345 	bcs.w	6696 <_svfprintf_r+0x1086>
    600c:	3230      	adds	r2, #48	; 0x30
    600e:	2301      	movs	r3, #1
    6010:	f8dd 8008 	ldr.w	r8, [sp, #8]
    6014:	f88d 213f 	strb.w	r2, [sp, #319]	; 0x13f
    6018:	9305      	str	r3, [sp, #20]
    601a:	f20d 143f 	addw	r4, sp, #319	; 0x13f
    601e:	e668      	b.n	5cf2 <_svfprintf_r+0x6e2>
    6020:	ee1b 1a10 	vmov	r1, s22
    6024:	aa24      	add	r2, sp, #144	; 0x90
    6026:	4658      	mov	r0, fp
    6028:	f002 f9fa 	bl	8420 <__ssprint_r>
    602c:	2800      	cmp	r0, #0
    602e:	f47f af54 	bne.w	5eda <_svfprintf_r+0x8ca>
    6032:	9a26      	ldr	r2, [sp, #152]	; 0x98
    6034:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    6038:	e452      	b.n	58e0 <_svfprintf_r+0x2d0>
    603a:	bf00      	nop
    603c:	20000628 	.word	0x20000628
    6040:	20000ecc 	.word	0x20000ecc
    6044:	2000062c 	.word	0x2000062c
    6048:	ee1b 1a10 	vmov	r1, s22
    604c:	aa24      	add	r2, sp, #144	; 0x90
    604e:	4658      	mov	r0, fp
    6050:	f002 f9e6 	bl	8420 <__ssprint_r>
    6054:	2800      	cmp	r0, #0
    6056:	f47f af40 	bne.w	5eda <_svfprintf_r+0x8ca>
    605a:	9a26      	ldr	r2, [sp, #152]	; 0x98
    605c:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    6060:	e451      	b.n	5906 <_svfprintf_r+0x2f6>
    6062:	2c10      	cmp	r4, #16
    6064:	9b25      	ldr	r3, [sp, #148]	; 0x94
    6066:	4ebe      	ldr	r6, [pc, #760]	; (6360 <_svfprintf_r+0xd50>)
    6068:	dd1f      	ble.n	60aa <_svfprintf_r+0xa9a>
    606a:	ee1b 8a10 	vmov	r8, s22
    606e:	2510      	movs	r5, #16
    6070:	e004      	b.n	607c <_svfprintf_r+0xa6c>
    6072:	3c10      	subs	r4, #16
    6074:	2c10      	cmp	r4, #16
    6076:	f10a 0a08 	add.w	sl, sl, #8
    607a:	dd16      	ble.n	60aa <_svfprintf_r+0xa9a>
    607c:	3301      	adds	r3, #1
    607e:	3210      	adds	r2, #16
    6080:	2b07      	cmp	r3, #7
    6082:	e9ca 6500 	strd	r6, r5, [sl]
    6086:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    608a:	ddf2      	ble.n	6072 <_svfprintf_r+0xa62>
    608c:	aa24      	add	r2, sp, #144	; 0x90
    608e:	4641      	mov	r1, r8
    6090:	4658      	mov	r0, fp
    6092:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    6096:	f002 f9c3 	bl	8420 <__ssprint_r>
    609a:	2800      	cmp	r0, #0
    609c:	f47f af1d 	bne.w	5eda <_svfprintf_r+0x8ca>
    60a0:	3c10      	subs	r4, #16
    60a2:	2c10      	cmp	r4, #16
    60a4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    60a8:	dce8      	bgt.n	607c <_svfprintf_r+0xa6c>
    60aa:	3301      	adds	r3, #1
    60ac:	4422      	add	r2, r4
    60ae:	2b07      	cmp	r3, #7
    60b0:	e9ca 6400 	strd	r6, r4, [sl]
    60b4:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    60b8:	f77f ac4b 	ble.w	5952 <_svfprintf_r+0x342>
    60bc:	ee1b 1a10 	vmov	r1, s22
    60c0:	aa24      	add	r2, sp, #144	; 0x90
    60c2:	4658      	mov	r0, fp
    60c4:	f002 f9ac 	bl	8420 <__ssprint_r>
    60c8:	2800      	cmp	r0, #0
    60ca:	f47f af06 	bne.w	5eda <_svfprintf_r+0x8ca>
    60ce:	9a26      	ldr	r2, [sp, #152]	; 0x98
    60d0:	e43f      	b.n	5952 <_svfprintf_r+0x342>
    60d2:	991b      	ldr	r1, [sp, #108]	; 0x6c
    60d4:	2900      	cmp	r1, #0
    60d6:	f340 835a 	ble.w	678e <_svfprintf_r+0x117e>
    60da:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    60dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    60de:	429e      	cmp	r6, r3
    60e0:	bfa8      	it	ge
    60e2:	461e      	movge	r6, r3
    60e4:	2e00      	cmp	r6, #0
    60e6:	dd0b      	ble.n	6100 <_svfprintf_r+0xaf0>
    60e8:	9b25      	ldr	r3, [sp, #148]	; 0x94
    60ea:	3301      	adds	r3, #1
    60ec:	4432      	add	r2, r6
    60ee:	2b07      	cmp	r3, #7
    60f0:	e9ca 4600 	strd	r4, r6, [sl]
    60f4:	9226      	str	r2, [sp, #152]	; 0x98
    60f6:	9325      	str	r3, [sp, #148]	; 0x94
    60f8:	f300 8689 	bgt.w	6e0e <_svfprintf_r+0x17fe>
    60fc:	f10a 0a08 	add.w	sl, sl, #8
    6100:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    6102:	2e00      	cmp	r6, #0
    6104:	bfa8      	it	ge
    6106:	1bad      	subge	r5, r5, r6
    6108:	2d00      	cmp	r5, #0
    610a:	f300 8203 	bgt.w	6514 <_svfprintf_r+0xf04>
    610e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6110:	f418 6f80 	tst.w	r8, #1024	; 0x400
    6114:	4423      	add	r3, r4
    6116:	9305      	str	r3, [sp, #20]
    6118:	f040 821f 	bne.w	655a <_svfprintf_r+0xf4a>
    611c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    611e:	990e      	ldr	r1, [sp, #56]	; 0x38
    6120:	428b      	cmp	r3, r1
    6122:	db03      	blt.n	612c <_svfprintf_r+0xb1c>
    6124:	f018 0f01 	tst.w	r8, #1
    6128:	f000 84cf 	beq.w	6aca <_svfprintf_r+0x14ba>
    612c:	9910      	ldr	r1, [sp, #64]	; 0x40
    612e:	9812      	ldr	r0, [sp, #72]	; 0x48
    6130:	440a      	add	r2, r1
    6132:	e9ca 0100 	strd	r0, r1, [sl]
    6136:	9925      	ldr	r1, [sp, #148]	; 0x94
    6138:	9226      	str	r2, [sp, #152]	; 0x98
    613a:	3101      	adds	r1, #1
    613c:	2907      	cmp	r1, #7
    613e:	9125      	str	r1, [sp, #148]	; 0x94
    6140:	f300 86a5 	bgt.w	6e8e <_svfprintf_r+0x187e>
    6144:	f10a 0a08 	add.w	sl, sl, #8
    6148:	990e      	ldr	r1, [sp, #56]	; 0x38
    614a:	1865      	adds	r5, r4, r1
    614c:	1acc      	subs	r4, r1, r3
    614e:	9b05      	ldr	r3, [sp, #20]
    6150:	1aed      	subs	r5, r5, r3
    6152:	42a5      	cmp	r5, r4
    6154:	bfa8      	it	ge
    6156:	4625      	movge	r5, r4
    6158:	2d00      	cmp	r5, #0
    615a:	dd0d      	ble.n	6178 <_svfprintf_r+0xb68>
    615c:	f8ca 3000 	str.w	r3, [sl]
    6160:	9b25      	ldr	r3, [sp, #148]	; 0x94
    6162:	f8ca 5004 	str.w	r5, [sl, #4]
    6166:	3301      	adds	r3, #1
    6168:	442a      	add	r2, r5
    616a:	2b07      	cmp	r3, #7
    616c:	9226      	str	r2, [sp, #152]	; 0x98
    616e:	9325      	str	r3, [sp, #148]	; 0x94
    6170:	f300 86bb 	bgt.w	6eea <_svfprintf_r+0x18da>
    6174:	f10a 0a08 	add.w	sl, sl, #8
    6178:	2d00      	cmp	r5, #0
    617a:	bfa8      	it	ge
    617c:	1b64      	subge	r4, r4, r5
    617e:	2c00      	cmp	r4, #0
    6180:	f77f abde 	ble.w	5940 <_svfprintf_r+0x330>
    6184:	2c10      	cmp	r4, #16
    6186:	9b25      	ldr	r3, [sp, #148]	; 0x94
    6188:	f340 837c 	ble.w	6884 <_svfprintf_r+0x1274>
    618c:	ee1b 6a10 	vmov	r6, s22
    6190:	2510      	movs	r5, #16
    6192:	e005      	b.n	61a0 <_svfprintf_r+0xb90>
    6194:	f10a 0a08 	add.w	sl, sl, #8
    6198:	3c10      	subs	r4, #16
    619a:	2c10      	cmp	r4, #16
    619c:	f340 8372 	ble.w	6884 <_svfprintf_r+0x1274>
    61a0:	3301      	adds	r3, #1
    61a2:	4970      	ldr	r1, [pc, #448]	; (6364 <_svfprintf_r+0xd54>)
    61a4:	3210      	adds	r2, #16
    61a6:	2b07      	cmp	r3, #7
    61a8:	e9ca 1500 	strd	r1, r5, [sl]
    61ac:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    61b0:	ddf0      	ble.n	6194 <_svfprintf_r+0xb84>
    61b2:	aa24      	add	r2, sp, #144	; 0x90
    61b4:	4631      	mov	r1, r6
    61b6:	4658      	mov	r0, fp
    61b8:	f002 f932 	bl	8420 <__ssprint_r>
    61bc:	2800      	cmp	r0, #0
    61be:	f47f ae8c 	bne.w	5eda <_svfprintf_r+0x8ca>
    61c2:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    61c6:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    61ca:	e7e5      	b.n	6198 <_svfprintf_r+0xb88>
    61cc:	2b30      	cmp	r3, #48	; 0x30
    61ce:	f43f ad8b 	beq.w	5ce8 <_svfprintf_r+0x6d8>
    61d2:	2330      	movs	r3, #48	; 0x30
    61d4:	3802      	subs	r0, #2
    61d6:	f804 3c01 	strb.w	r3, [r4, #-1]
    61da:	ab50      	add	r3, sp, #320	; 0x140
    61dc:	1a1b      	subs	r3, r3, r0
    61de:	f8dd 8008 	ldr.w	r8, [sp, #8]
    61e2:	9305      	str	r3, [sp, #20]
    61e4:	4604      	mov	r4, r0
    61e6:	e584      	b.n	5cf2 <_svfprintf_r+0x6e2>
    61e8:	f018 0f01 	tst.w	r8, #1
    61ec:	f47f ae82 	bne.w	5ef4 <_svfprintf_r+0x8e4>
    61f0:	9b25      	ldr	r3, [sp, #148]	; 0x94
    61f2:	f8ca 4000 	str.w	r4, [sl]
    61f6:	3301      	adds	r3, #1
    61f8:	3201      	adds	r2, #1
    61fa:	2101      	movs	r1, #1
    61fc:	2b07      	cmp	r3, #7
    61fe:	9226      	str	r2, [sp, #152]	; 0x98
    6200:	9325      	str	r3, [sp, #148]	; 0x94
    6202:	f8ca 1004 	str.w	r1, [sl, #4]
    6206:	f77f aea5 	ble.w	5f54 <_svfprintf_r+0x944>
    620a:	ee1b 1a10 	vmov	r1, s22
    620e:	aa24      	add	r2, sp, #144	; 0x90
    6210:	4658      	mov	r0, fp
    6212:	f002 f905 	bl	8420 <__ssprint_r>
    6216:	2800      	cmp	r0, #0
    6218:	f47f ae5f 	bne.w	5eda <_svfprintf_r+0x8ca>
    621c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    6220:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    6224:	e698      	b.n	5f58 <_svfprintf_r+0x948>
    6226:	990e      	ldr	r1, [sp, #56]	; 0x38
    6228:	1e4c      	subs	r4, r1, #1
    622a:	2c00      	cmp	r4, #0
    622c:	f77f ae94 	ble.w	5f58 <_svfprintf_r+0x948>
    6230:	2c10      	cmp	r4, #16
    6232:	f340 8361 	ble.w	68f8 <_svfprintf_r+0x12e8>
    6236:	ee1b 6a10 	vmov	r6, s22
    623a:	2510      	movs	r5, #16
    623c:	e005      	b.n	624a <_svfprintf_r+0xc3a>
    623e:	f10a 0a08 	add.w	sl, sl, #8
    6242:	3c10      	subs	r4, #16
    6244:	2c10      	cmp	r4, #16
    6246:	f340 8357 	ble.w	68f8 <_svfprintf_r+0x12e8>
    624a:	3301      	adds	r3, #1
    624c:	4945      	ldr	r1, [pc, #276]	; (6364 <_svfprintf_r+0xd54>)
    624e:	3210      	adds	r2, #16
    6250:	2b07      	cmp	r3, #7
    6252:	e9ca 1500 	strd	r1, r5, [sl]
    6256:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    625a:	ddf0      	ble.n	623e <_svfprintf_r+0xc2e>
    625c:	aa24      	add	r2, sp, #144	; 0x90
    625e:	4631      	mov	r1, r6
    6260:	4658      	mov	r0, fp
    6262:	f002 f8dd 	bl	8420 <__ssprint_r>
    6266:	2800      	cmp	r0, #0
    6268:	f47f ae37 	bne.w	5eda <_svfprintf_r+0x8ca>
    626c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    6270:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    6274:	e7e5      	b.n	6242 <_svfprintf_r+0xc32>
    6276:	ee1b 1a10 	vmov	r1, s22
    627a:	aa24      	add	r2, sp, #144	; 0x90
    627c:	4658      	mov	r0, fp
    627e:	f002 f8cf 	bl	8420 <__ssprint_r>
    6282:	2800      	cmp	r0, #0
    6284:	f47f ae29 	bne.w	5eda <_svfprintf_r+0x8ca>
    6288:	9a26      	ldr	r2, [sp, #152]	; 0x98
    628a:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    628e:	f7ff bb44 	b.w	591a <_svfprintf_r+0x30a>
    6292:	9b02      	ldr	r3, [sp, #8]
    6294:	f013 0310 	ands.w	r3, r3, #16
    6298:	f040 80c1 	bne.w	641e <_svfprintf_r+0xe0e>
    629c:	9a02      	ldr	r2, [sp, #8]
    629e:	f012 0240 	ands.w	r2, r2, #64	; 0x40
    62a2:	f000 837a 	beq.w	699a <_svfprintf_r+0x138a>
    62a6:	9808      	ldr	r0, [sp, #32]
    62a8:	f850 2b04 	ldr.w	r2, [r0], #4
    62ac:	9008      	str	r0, [sp, #32]
    62ae:	4619      	mov	r1, r3
    62b0:	b292      	uxth	r2, r2
    62b2:	2301      	movs	r3, #1
    62b4:	e451      	b.n	5b5a <_svfprintf_r+0x54a>
    62b6:	f018 0310 	ands.w	r3, r8, #16
    62ba:	d155      	bne.n	6368 <_svfprintf_r+0xd58>
    62bc:	f018 0240 	ands.w	r2, r8, #64	; 0x40
    62c0:	f000 835d 	beq.w	697e <_svfprintf_r+0x136e>
    62c4:	9808      	ldr	r0, [sp, #32]
    62c6:	f850 2b04 	ldr.w	r2, [r0], #4
    62ca:	9008      	str	r0, [sp, #32]
    62cc:	4619      	mov	r1, r3
    62ce:	b292      	uxth	r2, r2
    62d0:	e4a8      	b.n	5c24 <_svfprintf_r+0x614>
    62d2:	4252      	negs	r2, r2
    62d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    62d8:	f8cd 8008 	str.w	r8, [sp, #8]
    62dc:	202d      	movs	r0, #45	; 0x2d
    62de:	2301      	movs	r3, #1
    62e0:	e43c      	b.n	5b5c <_svfprintf_r+0x54c>
    62e2:	ee1b 1a10 	vmov	r1, s22
    62e6:	aa24      	add	r2, sp, #144	; 0x90
    62e8:	4658      	mov	r0, fp
    62ea:	f002 f899 	bl	8420 <__ssprint_r>
    62ee:	2800      	cmp	r0, #0
    62f0:	f47f adf3 	bne.w	5eda <_svfprintf_r+0x8ca>
    62f4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    62f8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    62fc:	e616      	b.n	5f2c <_svfprintf_r+0x91c>
    62fe:	ee1b 1a10 	vmov	r1, s22
    6302:	aa24      	add	r2, sp, #144	; 0x90
    6304:	4658      	mov	r0, fp
    6306:	f002 f88b 	bl	8420 <__ssprint_r>
    630a:	2800      	cmp	r0, #0
    630c:	f47f ade5 	bne.w	5eda <_svfprintf_r+0x8ca>
    6310:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    6314:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    6318:	e5fb      	b.n	5f12 <_svfprintf_r+0x902>
    631a:	f018 0f01 	tst.w	r8, #1
    631e:	f43f ab0f 	beq.w	5940 <_svfprintf_r+0x330>
    6322:	e52a      	b.n	5d7a <_svfprintf_r+0x76a>
    6324:	9308      	str	r3, [sp, #32]
    6326:	f899 3000 	ldrb.w	r3, [r9]
    632a:	f7ff b9cd 	b.w	56c8 <_svfprintf_r+0xb8>
    632e:	ac50      	add	r4, sp, #320	; 0x140
    6330:	e4df      	b.n	5cf2 <_svfprintf_r+0x6e2>
    6332:	f418 7f00 	tst.w	r8, #512	; 0x200
    6336:	f040 83db 	bne.w	6af0 <_svfprintf_r+0x14e0>
    633a:	f853 2b04 	ldr.w	r2, [r3], #4
    633e:	9308      	str	r3, [sp, #32]
    6340:	17d1      	asrs	r1, r2, #31
    6342:	460b      	mov	r3, r1
    6344:	f7ff bbb6 	b.w	5ab4 <_svfprintf_r+0x4a4>
    6348:	9b08      	ldr	r3, [sp, #32]
    634a:	9804      	ldr	r0, [sp, #16]
    634c:	f853 1b04 	ldr.w	r1, [r3], #4
    6350:	9308      	str	r3, [sp, #32]
    6352:	17c2      	asrs	r2, r0, #31
    6354:	e9c1 0200 	strd	r0, r2, [r1]
    6358:	464c      	mov	r4, r9
    635a:	f7ff b98b 	b.w	5674 <_svfprintf_r+0x64>
    635e:	bf00      	nop
    6360:	2000062c 	.word	0x2000062c
    6364:	20000ecc 	.word	0x20000ecc
    6368:	9b08      	ldr	r3, [sp, #32]
    636a:	f853 2b04 	ldr.w	r2, [r3], #4
    636e:	9308      	str	r3, [sp, #32]
    6370:	e458      	b.n	5c24 <_svfprintf_r+0x614>
    6372:	eeb4 8b48 	vcmp.f64	d8, d8
    6376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    637a:	f180 8694 	bvs.w	70a6 <_svfprintf_r+0x1a96>
    637e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6380:	2b61      	cmp	r3, #97	; 0x61
    6382:	f000 8552 	beq.w	6e2a <_svfprintf_r+0x181a>
    6386:	2b41      	cmp	r3, #65	; 0x41
    6388:	f000 85c0 	beq.w	6f0c <_svfprintf_r+0x18fc>
    638c:	9b03      	ldr	r3, [sp, #12]
    638e:	3301      	adds	r3, #1
    6390:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6392:	f023 0520 	bic.w	r5, r3, #32
    6396:	f000 8480 	beq.w	6c9a <_svfprintf_r+0x168a>
    639a:	2d47      	cmp	r5, #71	; 0x47
    639c:	d104      	bne.n	63a8 <_svfprintf_r+0xd98>
    639e:	9b03      	ldr	r3, [sp, #12]
    63a0:	2b00      	cmp	r3, #0
    63a2:	bf08      	it	eq
    63a4:	2301      	moveq	r3, #1
    63a6:	9303      	str	r3, [sp, #12]
    63a8:	ee18 3a90 	vmov	r3, s17
    63ac:	2b00      	cmp	r3, #0
    63ae:	f448 7280 	orr.w	r2, r8, #256	; 0x100
    63b2:	4646      	mov	r6, r8
    63b4:	f2c0 8618 	blt.w	6fe8 <_svfprintf_r+0x19d8>
    63b8:	eeb0 ab48 	vmov.f64	d10, d8
    63bc:	2300      	movs	r3, #0
    63be:	4690      	mov	r8, r2
    63c0:	9309      	str	r3, [sp, #36]	; 0x24
    63c2:	9307      	str	r3, [sp, #28]
    63c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    63c6:	3b41      	subs	r3, #65	; 0x41
    63c8:	2b25      	cmp	r3, #37	; 0x25
    63ca:	f200 8398 	bhi.w	6afe <_svfprintf_r+0x14ee>
    63ce:	e8df f013 	tbh	[pc, r3, lsl #1]
    63d2:	046f      	.short	0x046f
    63d4:	03960396 	.word	0x03960396
    63d8:	04680396 	.word	0x04680396
    63dc:	0396046c 	.word	0x0396046c
    63e0:	03960396 	.word	0x03960396
    63e4:	03960396 	.word	0x03960396
    63e8:	03960396 	.word	0x03960396
    63ec:	03960396 	.word	0x03960396
    63f0:	03960396 	.word	0x03960396
    63f4:	03960396 	.word	0x03960396
    63f8:	03960396 	.word	0x03960396
    63fc:	03960396 	.word	0x03960396
    6400:	03960396 	.word	0x03960396
    6404:	03960396 	.word	0x03960396
    6408:	03960396 	.word	0x03960396
    640c:	03960396 	.word	0x03960396
    6410:	03960396 	.word	0x03960396
    6414:	03960396 	.word	0x03960396
    6418:	04680396 	.word	0x04680396
    641c:	046c      	.short	0x046c
    641e:	9b08      	ldr	r3, [sp, #32]
    6420:	f853 2b04 	ldr.w	r2, [r3], #4
    6424:	9308      	str	r3, [sp, #32]
    6426:	2301      	movs	r3, #1
    6428:	f7ff bb97 	b.w	5b5a <_svfprintf_r+0x54a>
    642c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    642e:	2b00      	cmp	r3, #0
    6430:	f43f a9cf 	beq.w	57d2 <_svfprintf_r+0x1c2>
    6434:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    6436:	781b      	ldrb	r3, [r3, #0]
    6438:	2b00      	cmp	r3, #0
    643a:	f43f a9ca 	beq.w	57d2 <_svfprintf_r+0x1c2>
    643e:	f899 3000 	ldrb.w	r3, [r9]
    6442:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
    6446:	f7ff b93f 	b.w	56c8 <_svfprintf_r+0xb8>
    644a:	930b      	str	r3, [sp, #44]	; 0x2c
    644c:	f8cd 8008 	str.w	r8, [sp, #8]
    6450:	f7ff bbf1 	b.w	5c36 <_svfprintf_r+0x626>
    6454:	930b      	str	r3, [sp, #44]	; 0x2c
    6456:	4b9a      	ldr	r3, [pc, #616]	; (66c0 <_svfprintf_r+0x10b0>)
    6458:	9311      	str	r3, [sp, #68]	; 0x44
    645a:	f018 0120 	ands.w	r1, r8, #32
    645e:	f000 8105 	beq.w	666c <_svfprintf_r+0x105c>
    6462:	9b08      	ldr	r3, [sp, #32]
    6464:	3307      	adds	r3, #7
    6466:	f023 0307 	bic.w	r3, r3, #7
    646a:	6859      	ldr	r1, [r3, #4]
    646c:	f853 2b08 	ldr.w	r2, [r3], #8
    6470:	9308      	str	r3, [sp, #32]
    6472:	f018 0f01 	tst.w	r8, #1
    6476:	d00a      	beq.n	648e <_svfprintf_r+0xe7e>
    6478:	ea52 0301 	orrs.w	r3, r2, r1
    647c:	d007      	beq.n	648e <_svfprintf_r+0xe7e>
    647e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6480:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    6484:	2330      	movs	r3, #48	; 0x30
    6486:	f048 0802 	orr.w	r8, r8, #2
    648a:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    648e:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
    6492:	9302      	str	r3, [sp, #8]
    6494:	2302      	movs	r3, #2
    6496:	f7ff bb60 	b.w	5b5a <_svfprintf_r+0x54a>
    649a:	930b      	str	r3, [sp, #44]	; 0x2c
    649c:	f7ff bbb6 	b.w	5c0c <_svfprintf_r+0x5fc>
    64a0:	930b      	str	r3, [sp, #44]	; 0x2c
    64a2:	4b88      	ldr	r3, [pc, #544]	; (66c4 <_svfprintf_r+0x10b4>)
    64a4:	9311      	str	r3, [sp, #68]	; 0x44
    64a6:	e7d8      	b.n	645a <_svfprintf_r+0xe4a>
    64a8:	9b08      	ldr	r3, [sp, #32]
    64aa:	2101      	movs	r1, #1
    64ac:	f853 2b04 	ldr.w	r2, [r3], #4
    64b0:	9102      	str	r1, [sp, #8]
    64b2:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
    64b6:	9308      	str	r3, [sp, #32]
    64b8:	9105      	str	r1, [sp, #20]
    64ba:	ac37      	add	r4, sp, #220	; 0xdc
    64bc:	f7ff baaf 	b.w	5a1e <_svfprintf_r+0x40e>
    64c0:	ee1b 1a10 	vmov	r1, s22
    64c4:	aa24      	add	r2, sp, #144	; 0x90
    64c6:	4658      	mov	r0, fp
    64c8:	f001 ffaa 	bl	8420 <__ssprint_r>
    64cc:	2800      	cmp	r0, #0
    64ce:	f47f ad04 	bne.w	5eda <_svfprintf_r+0x8ca>
    64d2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    64d4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    64d8:	e45d      	b.n	5d96 <_svfprintf_r+0x786>
    64da:	9b03      	ldr	r3, [sp, #12]
    64dc:	9407      	str	r4, [sp, #28]
    64de:	2b06      	cmp	r3, #6
    64e0:	4622      	mov	r2, r4
    64e2:	bf28      	it	cs
    64e4:	2306      	movcs	r3, #6
    64e6:	9403      	str	r4, [sp, #12]
    64e8:	4621      	mov	r1, r4
    64ea:	e9cd 220c 	strd	r2, r2, [sp, #48]	; 0x30
    64ee:	4c76      	ldr	r4, [pc, #472]	; (66c8 <_svfprintf_r+0x10b8>)
    64f0:	9302      	str	r3, [sp, #8]
    64f2:	9305      	str	r3, [sp, #20]
    64f4:	920f      	str	r2, [sp, #60]	; 0x3c
    64f6:	f7ff ba6c 	b.w	59d2 <_svfprintf_r+0x3c2>
    64fa:	2140      	movs	r1, #64	; 0x40
    64fc:	4658      	mov	r0, fp
    64fe:	f7fc ffd7 	bl	34b0 <_malloc_r>
    6502:	6020      	str	r0, [r4, #0]
    6504:	6120      	str	r0, [r4, #16]
    6506:	2800      	cmp	r0, #0
    6508:	f000 860f 	beq.w	712a <_svfprintf_r+0x1b1a>
    650c:	2340      	movs	r3, #64	; 0x40
    650e:	6163      	str	r3, [r4, #20]
    6510:	f7ff b89e 	b.w	5650 <_svfprintf_r+0x40>
    6514:	2d10      	cmp	r5, #16
    6516:	9b25      	ldr	r3, [sp, #148]	; 0x94
    6518:	f340 825d 	ble.w	69d6 <_svfprintf_r+0x13c6>
    651c:	4651      	mov	r1, sl
    651e:	2610      	movs	r6, #16
    6520:	ee1b aa10 	vmov	sl, s22
    6524:	e004      	b.n	6530 <_svfprintf_r+0xf20>
    6526:	3108      	adds	r1, #8
    6528:	3d10      	subs	r5, #16
    652a:	2d10      	cmp	r5, #16
    652c:	f340 8252 	ble.w	69d4 <_svfprintf_r+0x13c4>
    6530:	3301      	adds	r3, #1
    6532:	4866      	ldr	r0, [pc, #408]	; (66cc <_svfprintf_r+0x10bc>)
    6534:	3210      	adds	r2, #16
    6536:	2b07      	cmp	r3, #7
    6538:	e9c1 0600 	strd	r0, r6, [r1]
    653c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    6540:	ddf1      	ble.n	6526 <_svfprintf_r+0xf16>
    6542:	aa24      	add	r2, sp, #144	; 0x90
    6544:	4651      	mov	r1, sl
    6546:	4658      	mov	r0, fp
    6548:	f001 ff6a 	bl	8420 <__ssprint_r>
    654c:	2800      	cmp	r0, #0
    654e:	f47f acc4 	bne.w	5eda <_svfprintf_r+0x8ca>
    6552:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    6556:	a927      	add	r1, sp, #156	; 0x9c
    6558:	e7e6      	b.n	6528 <_svfprintf_r+0xf18>
    655a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    655c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    6560:	18e3      	adds	r3, r4, r3
    6562:	9303      	str	r3, [sp, #12]
    6564:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    6566:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    656a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    656c:	9d05      	ldr	r5, [sp, #20]
    656e:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
    6572:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
    6576:	940b      	str	r4, [sp, #44]	; 0x2c
    6578:	ee1b 1a10 	vmov	r1, s22
    657c:	4650      	mov	r0, sl
    657e:	2b00      	cmp	r3, #0
    6580:	d034      	beq.n	65ec <_svfprintf_r+0xfdc>
    6582:	f1b8 0f00 	cmp.w	r8, #0
    6586:	d135      	bne.n	65f4 <_svfprintf_r+0xfe4>
    6588:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    658a:	3b01      	subs	r3, #1
    658c:	3e01      	subs	r6, #1
    658e:	930d      	str	r3, [sp, #52]	; 0x34
    6590:	9b15      	ldr	r3, [sp, #84]	; 0x54
    6592:	e9c0 3900 	strd	r3, r9, [r0]
    6596:	9b25      	ldr	r3, [sp, #148]	; 0x94
    6598:	3301      	adds	r3, #1
    659a:	444a      	add	r2, r9
    659c:	2b07      	cmp	r3, #7
    659e:	9226      	str	r2, [sp, #152]	; 0x98
    65a0:	9325      	str	r3, [sp, #148]	; 0x94
    65a2:	dc6c      	bgt.n	667e <_svfprintf_r+0x106e>
    65a4:	3008      	adds	r0, #8
    65a6:	9b03      	ldr	r3, [sp, #12]
    65a8:	f896 c000 	ldrb.w	ip, [r6]
    65ac:	1b5b      	subs	r3, r3, r5
    65ae:	4563      	cmp	r3, ip
    65b0:	bfa8      	it	ge
    65b2:	4663      	movge	r3, ip
    65b4:	2b00      	cmp	r3, #0
    65b6:	469a      	mov	sl, r3
    65b8:	dd0c      	ble.n	65d4 <_svfprintf_r+0xfc4>
    65ba:	9c25      	ldr	r4, [sp, #148]	; 0x94
    65bc:	3401      	adds	r4, #1
    65be:	441a      	add	r2, r3
    65c0:	2c07      	cmp	r4, #7
    65c2:	e9c0 5300 	strd	r5, r3, [r0]
    65c6:	9226      	str	r2, [sp, #152]	; 0x98
    65c8:	9425      	str	r4, [sp, #148]	; 0x94
    65ca:	f300 8177 	bgt.w	68bc <_svfprintf_r+0x12ac>
    65ce:	f896 c000 	ldrb.w	ip, [r6]
    65d2:	3008      	adds	r0, #8
    65d4:	f1ba 0f00 	cmp.w	sl, #0
    65d8:	bfac      	ite	ge
    65da:	ebac 040a 	subge.w	r4, ip, sl
    65de:	4664      	movlt	r4, ip
    65e0:	2c00      	cmp	r4, #0
    65e2:	dc0a      	bgt.n	65fa <_svfprintf_r+0xfea>
    65e4:	4465      	add	r5, ip
    65e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    65e8:	2b00      	cmp	r3, #0
    65ea:	d1ca      	bne.n	6582 <_svfprintf_r+0xf72>
    65ec:	f1b8 0f00 	cmp.w	r8, #0
    65f0:	f000 83ac 	beq.w	6d4c <_svfprintf_r+0x173c>
    65f4:	f108 38ff 	add.w	r8, r8, #4294967295
    65f8:	e7ca      	b.n	6590 <_svfprintf_r+0xf80>
    65fa:	2c10      	cmp	r4, #16
    65fc:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
    6600:	dd24      	ble.n	664c <_svfprintf_r+0x103c>
    6602:	9505      	str	r5, [sp, #20]
    6604:	f04f 0a10 	mov.w	sl, #16
    6608:	4663      	mov	r3, ip
    660a:	460d      	mov	r5, r1
    660c:	e004      	b.n	6618 <_svfprintf_r+0x1008>
    660e:	3c10      	subs	r4, #16
    6610:	2c10      	cmp	r4, #16
    6612:	f100 0008 	add.w	r0, r0, #8
    6616:	dd16      	ble.n	6646 <_svfprintf_r+0x1036>
    6618:	3301      	adds	r3, #1
    661a:	492c      	ldr	r1, [pc, #176]	; (66cc <_svfprintf_r+0x10bc>)
    661c:	3210      	adds	r2, #16
    661e:	2b07      	cmp	r3, #7
    6620:	e9c0 1a00 	strd	r1, sl, [r0]
    6624:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    6628:	ddf1      	ble.n	660e <_svfprintf_r+0xffe>
    662a:	aa24      	add	r2, sp, #144	; 0x90
    662c:	4629      	mov	r1, r5
    662e:	4658      	mov	r0, fp
    6630:	f001 fef6 	bl	8420 <__ssprint_r>
    6634:	2800      	cmp	r0, #0
    6636:	f47f ac50 	bne.w	5eda <_svfprintf_r+0x8ca>
    663a:	3c10      	subs	r4, #16
    663c:	2c10      	cmp	r4, #16
    663e:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    6642:	a827      	add	r0, sp, #156	; 0x9c
    6644:	dce8      	bgt.n	6618 <_svfprintf_r+0x1008>
    6646:	4629      	mov	r1, r5
    6648:	9d05      	ldr	r5, [sp, #20]
    664a:	469c      	mov	ip, r3
    664c:	f10c 0301 	add.w	r3, ip, #1
    6650:	4422      	add	r2, r4
    6652:	6044      	str	r4, [r0, #4]
    6654:	2b07      	cmp	r3, #7
    6656:	4c1d      	ldr	r4, [pc, #116]	; (66cc <_svfprintf_r+0x10bc>)
    6658:	6004      	str	r4, [r0, #0]
    665a:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    665e:	f300 83c6 	bgt.w	6dee <_svfprintf_r+0x17de>
    6662:	f896 c000 	ldrb.w	ip, [r6]
    6666:	3008      	adds	r0, #8
    6668:	4465      	add	r5, ip
    666a:	e7bc      	b.n	65e6 <_svfprintf_r+0xfd6>
    666c:	f018 0310 	ands.w	r3, r8, #16
    6670:	f000 80c2 	beq.w	67f8 <_svfprintf_r+0x11e8>
    6674:	9b08      	ldr	r3, [sp, #32]
    6676:	f853 2b04 	ldr.w	r2, [r3], #4
    667a:	9308      	str	r3, [sp, #32]
    667c:	e6f9      	b.n	6472 <_svfprintf_r+0xe62>
    667e:	aa24      	add	r2, sp, #144	; 0x90
    6680:	4658      	mov	r0, fp
    6682:	9105      	str	r1, [sp, #20]
    6684:	f001 fecc 	bl	8420 <__ssprint_r>
    6688:	2800      	cmp	r0, #0
    668a:	f47f ac26 	bne.w	5eda <_svfprintf_r+0x8ca>
    668e:	9a26      	ldr	r2, [sp, #152]	; 0x98
    6690:	9905      	ldr	r1, [sp, #20]
    6692:	a827      	add	r0, sp, #156	; 0x9c
    6694:	e787      	b.n	65a6 <_svfprintf_r+0xf96>
    6696:	9802      	ldr	r0, [sp, #8]
    6698:	f8cd a01c 	str.w	sl, [sp, #28]
    669c:	ac50      	add	r4, sp, #320	; 0x140
    669e:	f400 6080 	and.w	r0, r0, #1024	; 0x400
    66a2:	2500      	movs	r5, #0
    66a4:	ee0a ba10 	vmov	s20, fp
    66a8:	4b09      	ldr	r3, [pc, #36]	; (66d0 <_svfprintf_r+0x10c0>)
    66aa:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
    66ae:	f8cd 9014 	str.w	r9, [sp, #20]
    66b2:	46a3      	mov	fp, r4
    66b4:	f04f 0805 	mov.w	r8, #5
    66b8:	46ac      	mov	ip, r5
    66ba:	4604      	mov	r4, r0
    66bc:	e010      	b.n	66e0 <_svfprintf_r+0x10d0>
    66be:	bf00      	nop
    66c0:	200005f8 	.word	0x200005f8
    66c4:	2000060c 	.word	0x2000060c
    66c8:	20000620 	.word	0x20000620
    66cc:	20000ecc 	.word	0x20000ecc
    66d0:	cccccccd 	.word	0xcccccccd
    66d4:	2a0a      	cmp	r2, #10
    66d6:	f171 0100 	sbcs.w	r1, r1, #0
    66da:	d336      	bcc.n	674a <_svfprintf_r+0x113a>
    66dc:	464a      	mov	r2, r9
    66de:	4631      	mov	r1, r6
    66e0:	1850      	adds	r0, r2, r1
    66e2:	f140 0000 	adc.w	r0, r0, #0
    66e6:	fba3 5600 	umull	r5, r6, r3, r0
    66ea:	f026 0503 	bic.w	r5, r6, #3
    66ee:	eb05 0596 	add.w	r5, r5, r6, lsr #2
    66f2:	1b40      	subs	r0, r0, r5
    66f4:	1a15      	subs	r5, r2, r0
    66f6:	f04f 36cc 	mov.w	r6, #3435973836	; 0xcccccccc
    66fa:	f161 0e00 	sbc.w	lr, r1, #0
    66fe:	fb06 f605 	mul.w	r6, r6, r5
    6702:	fba5 9503 	umull	r9, r5, r5, r3
    6706:	fb03 660e 	mla	r6, r3, lr, r6
    670a:	f009 0e01 	and.w	lr, r9, #1
    670e:	442e      	add	r6, r5
    6710:	fbae 5e08 	umull	r5, lr, lr, r8
    6714:	182d      	adds	r5, r5, r0
    6716:	ea4f 0959 	mov.w	r9, r9, lsr #1
    671a:	3530      	adds	r5, #48	; 0x30
    671c:	f80b 5c01 	strb.w	r5, [fp, #-1]
    6720:	ea49 79c6 	orr.w	r9, r9, r6, lsl #31
    6724:	f10c 0c01 	add.w	ip, ip, #1
    6728:	f10b 3bff 	add.w	fp, fp, #4294967295
    672c:	0876      	lsrs	r6, r6, #1
    672e:	2c00      	cmp	r4, #0
    6730:	d0d0      	beq.n	66d4 <_svfprintf_r+0x10c4>
    6732:	f89a 0000 	ldrb.w	r0, [sl]
    6736:	4584      	cmp	ip, r0
    6738:	d1cc      	bne.n	66d4 <_svfprintf_r+0x10c4>
    673a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    673e:	d0c9      	beq.n	66d4 <_svfprintf_r+0x10c4>
    6740:	2a0a      	cmp	r2, #10
    6742:	f171 0100 	sbcs.w	r1, r1, #0
    6746:	f080 818f 	bcs.w	6a68 <_svfprintf_r+0x1458>
    674a:	465c      	mov	r4, fp
    674c:	ab50      	add	r3, sp, #320	; 0x140
    674e:	1b1b      	subs	r3, r3, r4
    6750:	f8dd 9014 	ldr.w	r9, [sp, #20]
    6754:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
    6758:	ee1a ba10 	vmov	fp, s20
    675c:	f8dd a01c 	ldr.w	sl, [sp, #28]
    6760:	f8dd 8008 	ldr.w	r8, [sp, #8]
    6764:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
    6768:	9305      	str	r3, [sp, #20]
    676a:	f7ff bac2 	b.w	5cf2 <_svfprintf_r+0x6e2>
    676e:	ee1b 1a10 	vmov	r1, s22
    6772:	aa24      	add	r2, sp, #144	; 0x90
    6774:	4658      	mov	r0, fp
    6776:	f001 fe53 	bl	8420 <__ssprint_r>
    677a:	2800      	cmp	r0, #0
    677c:	f47f abad 	bne.w	5eda <_svfprintf_r+0x8ca>
    6780:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    6784:	9a26      	ldr	r2, [sp, #152]	; 0x98
    6786:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    678a:	f7ff b896 	b.w	58ba <_svfprintf_r+0x2aa>
    678e:	9b25      	ldr	r3, [sp, #148]	; 0x94
    6790:	48be      	ldr	r0, [pc, #760]	; (6a8c <_svfprintf_r+0x147c>)
    6792:	f8ca 0000 	str.w	r0, [sl]
    6796:	3301      	adds	r3, #1
    6798:	3201      	adds	r2, #1
    679a:	2001      	movs	r0, #1
    679c:	2b07      	cmp	r3, #7
    679e:	9226      	str	r2, [sp, #152]	; 0x98
    67a0:	9325      	str	r3, [sp, #148]	; 0x94
    67a2:	f8ca 0004 	str.w	r0, [sl, #4]
    67a6:	f300 8177 	bgt.w	6a98 <_svfprintf_r+0x1488>
    67aa:	f10a 0a08 	add.w	sl, sl, #8
    67ae:	2900      	cmp	r1, #0
    67b0:	f040 80af 	bne.w	6912 <_svfprintf_r+0x1302>
    67b4:	990e      	ldr	r1, [sp, #56]	; 0x38
    67b6:	f008 0301 	and.w	r3, r8, #1
    67ba:	430b      	orrs	r3, r1
    67bc:	f43f a8c0 	beq.w	5940 <_svfprintf_r+0x330>
    67c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    67c2:	9912      	ldr	r1, [sp, #72]	; 0x48
    67c4:	441a      	add	r2, r3
    67c6:	e9ca 1300 	strd	r1, r3, [sl]
    67ca:	9b25      	ldr	r3, [sp, #148]	; 0x94
    67cc:	9226      	str	r2, [sp, #152]	; 0x98
    67ce:	3301      	adds	r3, #1
    67d0:	2b07      	cmp	r3, #7
    67d2:	9325      	str	r3, [sp, #148]	; 0x94
    67d4:	f300 8252 	bgt.w	6c7c <_svfprintf_r+0x166c>
    67d8:	f10a 0a08 	add.w	sl, sl, #8
    67dc:	990e      	ldr	r1, [sp, #56]	; 0x38
    67de:	f8ca 4000 	str.w	r4, [sl]
    67e2:	3301      	adds	r3, #1
    67e4:	440a      	add	r2, r1
    67e6:	2b07      	cmp	r3, #7
    67e8:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    67ec:	f8ca 1004 	str.w	r1, [sl, #4]
    67f0:	f77f a8a4 	ble.w	593c <_svfprintf_r+0x32c>
    67f4:	f7ff bbbd 	b.w	5f72 <_svfprintf_r+0x962>
    67f8:	f018 0240 	ands.w	r2, r8, #64	; 0x40
    67fc:	f000 80dd 	beq.w	69ba <_svfprintf_r+0x13aa>
    6800:	9808      	ldr	r0, [sp, #32]
    6802:	f850 2b04 	ldr.w	r2, [r0], #4
    6806:	9008      	str	r0, [sp, #32]
    6808:	4619      	mov	r1, r3
    680a:	b292      	uxth	r2, r2
    680c:	e631      	b.n	6472 <_svfprintf_r+0xe62>
    680e:	ee1b 1a10 	vmov	r1, s22
    6812:	aa24      	add	r2, sp, #144	; 0x90
    6814:	4658      	mov	r0, fp
    6816:	f001 fe03 	bl	8420 <__ssprint_r>
    681a:	2800      	cmp	r0, #0
    681c:	f47f ab5d 	bne.w	5eda <_svfprintf_r+0x8ca>
    6820:	9a26      	ldr	r2, [sp, #152]	; 0x98
    6822:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    6826:	f7ff baa3 	b.w	5d70 <_svfprintf_r+0x760>
    682a:	ae22      	add	r6, sp, #136	; 0x88
    682c:	2208      	movs	r2, #8
    682e:	2100      	movs	r1, #0
    6830:	4630      	mov	r0, r6
    6832:	941d      	str	r4, [sp, #116]	; 0x74
    6834:	f7fd fdc4 	bl	43c0 <memset>
    6838:	9b03      	ldr	r3, [sp, #12]
    683a:	1c5a      	adds	r2, r3, #1
    683c:	f000 80db 	beq.w	69f6 <_svfprintf_r+0x13e6>
    6840:	2500      	movs	r5, #0
    6842:	f8cd 9008 	str.w	r9, [sp, #8]
    6846:	f8cd 801c 	str.w	r8, [sp, #28]
    684a:	4699      	mov	r9, r3
    684c:	46a8      	mov	r8, r5
    684e:	e00c      	b.n	686a <_svfprintf_r+0x125a>
    6850:	a937      	add	r1, sp, #220	; 0xdc
    6852:	4658      	mov	r0, fp
    6854:	f001 fd9e 	bl	8394 <_wcrtomb_r>
    6858:	1c43      	adds	r3, r0, #1
    685a:	4440      	add	r0, r8
    685c:	f000 83c8 	beq.w	6ff0 <_svfprintf_r+0x19e0>
    6860:	4548      	cmp	r0, r9
    6862:	dc08      	bgt.n	6876 <_svfprintf_r+0x1266>
    6864:	f000 8418 	beq.w	7098 <_svfprintf_r+0x1a88>
    6868:	4680      	mov	r8, r0
    686a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    686c:	5952      	ldr	r2, [r2, r5]
    686e:	4633      	mov	r3, r6
    6870:	3504      	adds	r5, #4
    6872:	2a00      	cmp	r2, #0
    6874:	d1ec      	bne.n	6850 <_svfprintf_r+0x1240>
    6876:	f8cd 8014 	str.w	r8, [sp, #20]
    687a:	f8dd 9008 	ldr.w	r9, [sp, #8]
    687e:	f8dd 801c 	ldr.w	r8, [sp, #28]
    6882:	e0c5      	b.n	6a10 <_svfprintf_r+0x1400>
    6884:	3301      	adds	r3, #1
    6886:	4982      	ldr	r1, [pc, #520]	; (6a90 <_svfprintf_r+0x1480>)
    6888:	f8ca 4004 	str.w	r4, [sl, #4]
    688c:	4422      	add	r2, r4
    688e:	2b07      	cmp	r3, #7
    6890:	f8ca 1000 	str.w	r1, [sl]
    6894:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    6898:	f77f a850 	ble.w	593c <_svfprintf_r+0x32c>
    689c:	f7ff bb69 	b.w	5f72 <_svfprintf_r+0x962>
    68a0:	ee1b 1a10 	vmov	r1, s22
    68a4:	aa24      	add	r2, sp, #144	; 0x90
    68a6:	4658      	mov	r0, fp
    68a8:	f001 fdba 	bl	8420 <__ssprint_r>
    68ac:	2800      	cmp	r0, #0
    68ae:	f47f ab14 	bne.w	5eda <_svfprintf_r+0x8ca>
    68b2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    68b4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    68b8:	f7ff b829 	b.w	590e <_svfprintf_r+0x2fe>
    68bc:	aa24      	add	r2, sp, #144	; 0x90
    68be:	4658      	mov	r0, fp
    68c0:	9105      	str	r1, [sp, #20]
    68c2:	f001 fdad 	bl	8420 <__ssprint_r>
    68c6:	2800      	cmp	r0, #0
    68c8:	f47f ab07 	bne.w	5eda <_svfprintf_r+0x8ca>
    68cc:	f896 c000 	ldrb.w	ip, [r6]
    68d0:	9a26      	ldr	r2, [sp, #152]	; 0x98
    68d2:	9905      	ldr	r1, [sp, #20]
    68d4:	a827      	add	r0, sp, #156	; 0x9c
    68d6:	e67d      	b.n	65d4 <_svfprintf_r+0xfc4>
    68d8:	2b01      	cmp	r3, #1
    68da:	f8cd 8008 	str.w	r8, [sp, #8]
    68de:	f47f a9f3 	bne.w	5cc8 <_svfprintf_r+0x6b8>
    68e2:	f7ff bb93 	b.w	600c <_svfprintf_r+0x9fc>
    68e6:	9b08      	ldr	r3, [sp, #32]
    68e8:	9904      	ldr	r1, [sp, #16]
    68ea:	f853 2b04 	ldr.w	r2, [r3], #4
    68ee:	464c      	mov	r4, r9
    68f0:	6011      	str	r1, [r2, #0]
    68f2:	9308      	str	r3, [sp, #32]
    68f4:	f7fe bebe 	b.w	5674 <_svfprintf_r+0x64>
    68f8:	3301      	adds	r3, #1
    68fa:	4965      	ldr	r1, [pc, #404]	; (6a90 <_svfprintf_r+0x1480>)
    68fc:	f8ca 4004 	str.w	r4, [sl, #4]
    6900:	4422      	add	r2, r4
    6902:	2b07      	cmp	r3, #7
    6904:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    6908:	f8ca 1000 	str.w	r1, [sl]
    690c:	f77f ab22 	ble.w	5f54 <_svfprintf_r+0x944>
    6910:	e47b      	b.n	620a <_svfprintf_r+0xbfa>
    6912:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6914:	9812      	ldr	r0, [sp, #72]	; 0x48
    6916:	441a      	add	r2, r3
    6918:	e9ca 0300 	strd	r0, r3, [sl]
    691c:	9b25      	ldr	r3, [sp, #148]	; 0x94
    691e:	9226      	str	r2, [sp, #152]	; 0x98
    6920:	3301      	adds	r3, #1
    6922:	2b07      	cmp	r3, #7
    6924:	9325      	str	r3, [sp, #148]	; 0x94
    6926:	f300 81a9 	bgt.w	6c7c <_svfprintf_r+0x166c>
    692a:	f10a 0a08 	add.w	sl, sl, #8
    692e:	2900      	cmp	r1, #0
    6930:	f6bf af54 	bge.w	67dc <_svfprintf_r+0x11cc>
    6934:	424d      	negs	r5, r1
    6936:	3110      	adds	r1, #16
    6938:	f280 830f 	bge.w	6f5a <_svfprintf_r+0x194a>
    693c:	ee1b 1a10 	vmov	r1, s22
    6940:	2610      	movs	r6, #16
    6942:	e005      	b.n	6950 <_svfprintf_r+0x1340>
    6944:	f10a 0a08 	add.w	sl, sl, #8
    6948:	3d10      	subs	r5, #16
    694a:	2d10      	cmp	r5, #16
    694c:	f340 8305 	ble.w	6f5a <_svfprintf_r+0x194a>
    6950:	3301      	adds	r3, #1
    6952:	484f      	ldr	r0, [pc, #316]	; (6a90 <_svfprintf_r+0x1480>)
    6954:	3210      	adds	r2, #16
    6956:	2b07      	cmp	r3, #7
    6958:	e9ca 0600 	strd	r0, r6, [sl]
    695c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    6960:	ddf0      	ble.n	6944 <_svfprintf_r+0x1334>
    6962:	aa24      	add	r2, sp, #144	; 0x90
    6964:	4658      	mov	r0, fp
    6966:	9103      	str	r1, [sp, #12]
    6968:	f001 fd5a 	bl	8420 <__ssprint_r>
    696c:	2800      	cmp	r0, #0
    696e:	f47f aab4 	bne.w	5eda <_svfprintf_r+0x8ca>
    6972:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    6976:	9903      	ldr	r1, [sp, #12]
    6978:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    697c:	e7e4      	b.n	6948 <_svfprintf_r+0x1338>
    697e:	9b08      	ldr	r3, [sp, #32]
    6980:	f418 7100 	ands.w	r1, r8, #512	; 0x200
    6984:	bf1a      	itte	ne
    6986:	4611      	movne	r1, r2
    6988:	f853 2b04 	ldrne.w	r2, [r3], #4
    698c:	f853 2b04 	ldreq.w	r2, [r3], #4
    6990:	9308      	str	r3, [sp, #32]
    6992:	bf18      	it	ne
    6994:	b2d2      	uxtbne	r2, r2
    6996:	f7ff b945 	b.w	5c24 <_svfprintf_r+0x614>
    699a:	9b02      	ldr	r3, [sp, #8]
    699c:	f413 7100 	ands.w	r1, r3, #512	; 0x200
    69a0:	9b08      	ldr	r3, [sp, #32]
    69a2:	bf1a      	itte	ne
    69a4:	4611      	movne	r1, r2
    69a6:	f853 2b04 	ldrne.w	r2, [r3], #4
    69aa:	f853 2b04 	ldreq.w	r2, [r3], #4
    69ae:	9308      	str	r3, [sp, #32]
    69b0:	bf18      	it	ne
    69b2:	b2d2      	uxtbne	r2, r2
    69b4:	2301      	movs	r3, #1
    69b6:	f7ff b8d0 	b.w	5b5a <_svfprintf_r+0x54a>
    69ba:	9b08      	ldr	r3, [sp, #32]
    69bc:	f418 7100 	ands.w	r1, r8, #512	; 0x200
    69c0:	bf1a      	itte	ne
    69c2:	4611      	movne	r1, r2
    69c4:	f853 2b04 	ldrne.w	r2, [r3], #4
    69c8:	f853 2b04 	ldreq.w	r2, [r3], #4
    69cc:	9308      	str	r3, [sp, #32]
    69ce:	bf18      	it	ne
    69d0:	b2d2      	uxtbne	r2, r2
    69d2:	e54e      	b.n	6472 <_svfprintf_r+0xe62>
    69d4:	468a      	mov	sl, r1
    69d6:	3301      	adds	r3, #1
    69d8:	492d      	ldr	r1, [pc, #180]	; (6a90 <_svfprintf_r+0x1480>)
    69da:	f8ca 5004 	str.w	r5, [sl, #4]
    69de:	442a      	add	r2, r5
    69e0:	2b07      	cmp	r3, #7
    69e2:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    69e6:	f8ca 1000 	str.w	r1, [sl]
    69ea:	f300 8139 	bgt.w	6c60 <_svfprintf_r+0x1650>
    69ee:	f10a 0a08 	add.w	sl, sl, #8
    69f2:	f7ff bb8c 	b.w	610e <_svfprintf_r+0xafe>
    69f6:	2300      	movs	r3, #0
    69f8:	4619      	mov	r1, r3
    69fa:	9600      	str	r6, [sp, #0]
    69fc:	aa1d      	add	r2, sp, #116	; 0x74
    69fe:	4658      	mov	r0, fp
    6a00:	f001 fcee 	bl	83e0 <_wcsrtombs_r>
    6a04:	4603      	mov	r3, r0
    6a06:	3301      	adds	r3, #1
    6a08:	9005      	str	r0, [sp, #20]
    6a0a:	f000 82f1 	beq.w	6ff0 <_svfprintf_r+0x19e0>
    6a0e:	941d      	str	r4, [sp, #116]	; 0x74
    6a10:	9b05      	ldr	r3, [sp, #20]
    6a12:	2b00      	cmp	r3, #0
    6a14:	d04e      	beq.n	6ab4 <_svfprintf_r+0x14a4>
    6a16:	2b63      	cmp	r3, #99	; 0x63
    6a18:	f300 8118 	bgt.w	6c4c <_svfprintf_r+0x163c>
    6a1c:	2300      	movs	r3, #0
    6a1e:	9307      	str	r3, [sp, #28]
    6a20:	ac37      	add	r4, sp, #220	; 0xdc
    6a22:	2208      	movs	r2, #8
    6a24:	2100      	movs	r1, #0
    6a26:	4630      	mov	r0, r6
    6a28:	f7fd fcca 	bl	43c0 <memset>
    6a2c:	9d05      	ldr	r5, [sp, #20]
    6a2e:	9600      	str	r6, [sp, #0]
    6a30:	462b      	mov	r3, r5
    6a32:	aa1d      	add	r2, sp, #116	; 0x74
    6a34:	4621      	mov	r1, r4
    6a36:	4658      	mov	r0, fp
    6a38:	f001 fcd2 	bl	83e0 <_wcsrtombs_r>
    6a3c:	4285      	cmp	r5, r0
    6a3e:	f040 837c 	bne.w	713a <_svfprintf_r+0x1b2a>
    6a42:	9a05      	ldr	r2, [sp, #20]
    6a44:	2300      	movs	r3, #0
    6a46:	54a3      	strb	r3, [r4, r2]
    6a48:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    6a4c:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    6a50:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    6a54:	9303      	str	r3, [sp, #12]
    6a56:	9202      	str	r2, [sp, #8]
    6a58:	930f      	str	r3, [sp, #60]	; 0x3c
    6a5a:	f7fe bfba 	b.w	59d2 <_svfprintf_r+0x3c2>
    6a5e:	212d      	movs	r1, #45	; 0x2d
    6a60:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    6a64:	f7fe bfa4 	b.w	59b0 <_svfprintf_r+0x3a0>
    6a68:	9b16      	ldr	r3, [sp, #88]	; 0x58
    6a6a:	9915      	ldr	r1, [sp, #84]	; 0x54
    6a6c:	ebab 0b03 	sub.w	fp, fp, r3
    6a70:	461a      	mov	r2, r3
    6a72:	4658      	mov	r0, fp
    6a74:	f7fd fd3c 	bl	44f0 <strncpy>
    6a78:	f89a 2001 	ldrb.w	r2, [sl, #1]
    6a7c:	4b05      	ldr	r3, [pc, #20]	; (6a94 <_svfprintf_r+0x1484>)
    6a7e:	b10a      	cbz	r2, 6a84 <_svfprintf_r+0x1474>
    6a80:	f10a 0a01 	add.w	sl, sl, #1
    6a84:	f04f 0c00 	mov.w	ip, #0
    6a88:	e628      	b.n	66dc <_svfprintf_r+0x10cc>
    6a8a:	bf00      	nop
    6a8c:	20000628 	.word	0x20000628
    6a90:	20000ecc 	.word	0x20000ecc
    6a94:	cccccccd 	.word	0xcccccccd
    6a98:	ee1b 1a10 	vmov	r1, s22
    6a9c:	aa24      	add	r2, sp, #144	; 0x90
    6a9e:	4658      	mov	r0, fp
    6aa0:	f001 fcbe 	bl	8420 <__ssprint_r>
    6aa4:	2800      	cmp	r0, #0
    6aa6:	f47f aa18 	bne.w	5eda <_svfprintf_r+0x8ca>
    6aaa:	991b      	ldr	r1, [sp, #108]	; 0x6c
    6aac:	9a26      	ldr	r2, [sp, #152]	; 0x98
    6aae:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    6ab2:	e67c      	b.n	67ae <_svfprintf_r+0x119e>
    6ab4:	9b05      	ldr	r3, [sp, #20]
    6ab6:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    6aba:	930f      	str	r3, [sp, #60]	; 0x3c
    6abc:	e9cd 3302 	strd	r3, r3, [sp, #8]
    6ac0:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    6ac4:	9307      	str	r3, [sp, #28]
    6ac6:	f7fe bf84 	b.w	59d2 <_svfprintf_r+0x3c2>
    6aca:	990e      	ldr	r1, [sp, #56]	; 0x38
    6acc:	9805      	ldr	r0, [sp, #20]
    6ace:	1865      	adds	r5, r4, r1
    6ad0:	1a2d      	subs	r5, r5, r0
    6ad2:	1acc      	subs	r4, r1, r3
    6ad4:	42a5      	cmp	r5, r4
    6ad6:	bfa8      	it	ge
    6ad8:	4625      	movge	r5, r4
    6ada:	f7ff bb4d 	b.w	6178 <_svfprintf_r+0xb68>
    6ade:	9b08      	ldr	r3, [sp, #32]
    6ae0:	9904      	ldr	r1, [sp, #16]
    6ae2:	f853 2b04 	ldr.w	r2, [r3], #4
    6ae6:	9308      	str	r3, [sp, #32]
    6ae8:	8011      	strh	r1, [r2, #0]
    6aea:	464c      	mov	r4, r9
    6aec:	f7fe bdc2 	b.w	5674 <_svfprintf_r+0x64>
    6af0:	f913 2b04 	ldrsb.w	r2, [r3], #4
    6af4:	9308      	str	r3, [sp, #32]
    6af6:	17d1      	asrs	r1, r2, #31
    6af8:	460b      	mov	r3, r1
    6afa:	f7fe bfdb 	b.w	5ab4 <_svfprintf_r+0x4a4>
    6afe:	9a03      	ldr	r2, [sp, #12]
    6b00:	2102      	movs	r1, #2
    6b02:	ab22      	add	r3, sp, #136	; 0x88
    6b04:	9301      	str	r3, [sp, #4]
    6b06:	ab1d      	add	r3, sp, #116	; 0x74
    6b08:	9300      	str	r3, [sp, #0]
    6b0a:	4658      	mov	r0, fp
    6b0c:	ab1b      	add	r3, sp, #108	; 0x6c
    6b0e:	eeb0 0b4a 	vmov.f64	d0, d10
    6b12:	9202      	str	r2, [sp, #8]
    6b14:	f000 fdc8 	bl	76a8 <_dtoa_r>
    6b18:	2d47      	cmp	r5, #71	; 0x47
    6b1a:	9a02      	ldr	r2, [sp, #8]
    6b1c:	4604      	mov	r4, r0
    6b1e:	f000 8161 	beq.w	6de4 <_svfprintf_r+0x17d4>
    6b22:	2d46      	cmp	r5, #70	; 0x46
    6b24:	4410      	add	r0, r2
    6b26:	d105      	bne.n	6b34 <_svfprintf_r+0x1524>
    6b28:	7823      	ldrb	r3, [r4, #0]
    6b2a:	2b30      	cmp	r3, #48	; 0x30
    6b2c:	f000 826f 	beq.w	700e <_svfprintf_r+0x19fe>
    6b30:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    6b32:	4410      	add	r0, r2
    6b34:	eeb5 ab40 	vcmp.f64	d10, #0.0
    6b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6b3c:	f040 8146 	bne.w	6dcc <_svfprintf_r+0x17bc>
    6b40:	4603      	mov	r3, r0
    6b42:	1b1b      	subs	r3, r3, r4
    6b44:	930e      	str	r3, [sp, #56]	; 0x38
    6b46:	2d47      	cmp	r5, #71	; 0x47
    6b48:	f000 8110 	beq.w	6d6c <_svfprintf_r+0x175c>
    6b4c:	2d46      	cmp	r5, #70	; 0x46
    6b4e:	f000 81b5 	beq.w	6ebc <_svfprintf_r+0x18ac>
    6b52:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    6b54:	930c      	str	r3, [sp, #48]	; 0x30
    6b56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6b58:	2d41      	cmp	r5, #65	; 0x41
    6b5a:	f103 33ff 	add.w	r3, r3, #4294967295
    6b5e:	931b      	str	r3, [sp, #108]	; 0x6c
    6b60:	f000 81e5 	beq.w	6f2e <_svfprintf_r+0x191e>
    6b64:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
    6b68:	2100      	movs	r1, #0
    6b6a:	2b00      	cmp	r3, #0
    6b6c:	bfb8      	it	lt
    6b6e:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
    6b70:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
    6b74:	bfba      	itte	lt
    6b76:	f1c3 0301 	rsblt	r3, r3, #1
    6b7a:	222d      	movlt	r2, #45	; 0x2d
    6b7c:	222b      	movge	r2, #43	; 0x2b
    6b7e:	2b09      	cmp	r3, #9
    6b80:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
    6b84:	f340 81da 	ble.w	6f3c <_svfprintf_r+0x192c>
    6b88:	f10d 058f 	add.w	r5, sp, #143	; 0x8f
    6b8c:	f8df c41c 	ldr.w	ip, [pc, #1052]	; 6fac <_svfprintf_r+0x199c>
    6b90:	462a      	mov	r2, r5
    6b92:	4610      	mov	r0, r2
    6b94:	fb8c 2103 	smull	r2, r1, ip, r3
    6b98:	17da      	asrs	r2, r3, #31
    6b9a:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
    6b9e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    6ba2:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
    6ba6:	3130      	adds	r1, #48	; 0x30
    6ba8:	f800 1c01 	strb.w	r1, [r0, #-1]
    6bac:	4619      	mov	r1, r3
    6bae:	2963      	cmp	r1, #99	; 0x63
    6bb0:	4613      	mov	r3, r2
    6bb2:	f100 32ff 	add.w	r2, r0, #4294967295
    6bb6:	dcec      	bgt.n	6b92 <_svfprintf_r+0x1582>
    6bb8:	3330      	adds	r3, #48	; 0x30
    6bba:	b2d9      	uxtb	r1, r3
    6bbc:	1e83      	subs	r3, r0, #2
    6bbe:	429d      	cmp	r5, r3
    6bc0:	f802 1c01 	strb.w	r1, [r2, #-1]
    6bc4:	f240 828b 	bls.w	70de <_svfprintf_r+0x1ace>
    6bc8:	4613      	mov	r3, r2
    6bca:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    6bce:	e001      	b.n	6bd4 <_svfprintf_r+0x15c4>
    6bd0:	f813 1b01 	ldrb.w	r1, [r3], #1
    6bd4:	f802 1b01 	strb.w	r1, [r2], #1
    6bd8:	429d      	cmp	r5, r3
    6bda:	d1f9      	bne.n	6bd0 <_svfprintf_r+0x15c0>
    6bdc:	f10d 0391 	add.w	r3, sp, #145	; 0x91
    6be0:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    6be4:	1a1b      	subs	r3, r3, r0
    6be6:	4413      	add	r3, r2
    6be8:	aa1e      	add	r2, sp, #120	; 0x78
    6bea:	1a9b      	subs	r3, r3, r2
    6bec:	9314      	str	r3, [sp, #80]	; 0x50
    6bee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6bf0:	9a14      	ldr	r2, [sp, #80]	; 0x50
    6bf2:	2b01      	cmp	r3, #1
    6bf4:	441a      	add	r2, r3
    6bf6:	9205      	str	r2, [sp, #20]
    6bf8:	f340 8203 	ble.w	7002 <_svfprintf_r+0x19f2>
    6bfc:	9b05      	ldr	r3, [sp, #20]
    6bfe:	9a10      	ldr	r2, [sp, #64]	; 0x40
    6c00:	4413      	add	r3, r2
    6c02:	9305      	str	r3, [sp, #20]
    6c04:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
    6c08:	9a05      	ldr	r2, [sp, #20]
    6c0a:	f443 7880 	orr.w	r8, r3, #256	; 0x100
    6c0e:	2300      	movs	r3, #0
    6c10:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    6c14:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    6c18:	930f      	str	r3, [sp, #60]	; 0x3c
    6c1a:	9202      	str	r2, [sp, #8]
    6c1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6c1e:	2b00      	cmp	r3, #0
    6c20:	f040 80b1 	bne.w	6d86 <_svfprintf_r+0x1776>
    6c24:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    6c28:	9303      	str	r3, [sp, #12]
    6c2a:	f7fe bed2 	b.w	59d2 <_svfprintf_r+0x3c2>
    6c2e:	4620      	mov	r0, r4
    6c30:	f7fd ff06 	bl	4a40 <strlen>
    6c34:	4602      	mov	r2, r0
    6c36:	9005      	str	r0, [sp, #20]
    6c38:	f7fe bf20 	b.w	5a7c <_svfprintf_r+0x46c>
    6c3c:	ee1b 1a10 	vmov	r1, s22
    6c40:	aa24      	add	r2, sp, #144	; 0x90
    6c42:	4658      	mov	r0, fp
    6c44:	f001 fbec 	bl	8420 <__ssprint_r>
    6c48:	f7fe bded 	b.w	5826 <_svfprintf_r+0x216>
    6c4c:	1c59      	adds	r1, r3, #1
    6c4e:	4658      	mov	r0, fp
    6c50:	f7fc fc2e 	bl	34b0 <_malloc_r>
    6c54:	4604      	mov	r4, r0
    6c56:	2800      	cmp	r0, #0
    6c58:	f000 81ca 	beq.w	6ff0 <_svfprintf_r+0x19e0>
    6c5c:	9007      	str	r0, [sp, #28]
    6c5e:	e6e0      	b.n	6a22 <_svfprintf_r+0x1412>
    6c60:	ee1b 1a10 	vmov	r1, s22
    6c64:	aa24      	add	r2, sp, #144	; 0x90
    6c66:	4658      	mov	r0, fp
    6c68:	f001 fbda 	bl	8420 <__ssprint_r>
    6c6c:	2800      	cmp	r0, #0
    6c6e:	f47f a934 	bne.w	5eda <_svfprintf_r+0x8ca>
    6c72:	9a26      	ldr	r2, [sp, #152]	; 0x98
    6c74:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    6c78:	f7ff ba49 	b.w	610e <_svfprintf_r+0xafe>
    6c7c:	ee1b 1a10 	vmov	r1, s22
    6c80:	aa24      	add	r2, sp, #144	; 0x90
    6c82:	4658      	mov	r0, fp
    6c84:	f001 fbcc 	bl	8420 <__ssprint_r>
    6c88:	2800      	cmp	r0, #0
    6c8a:	f47f a926 	bne.w	5eda <_svfprintf_r+0x8ca>
    6c8e:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    6c92:	991b      	ldr	r1, [sp, #108]	; 0x6c
    6c94:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    6c98:	e649      	b.n	692e <_svfprintf_r+0x131e>
    6c9a:	2306      	movs	r3, #6
    6c9c:	9303      	str	r3, [sp, #12]
    6c9e:	f7ff bb83 	b.w	63a8 <_svfprintf_r+0xd98>
    6ca2:	9b03      	ldr	r3, [sp, #12]
    6ca4:	2102      	movs	r1, #2
    6ca6:	1c5a      	adds	r2, r3, #1
    6ca8:	e72b      	b.n	6b02 <_svfprintf_r+0x14f2>
    6caa:	9a03      	ldr	r2, [sp, #12]
    6cac:	2103      	movs	r1, #3
    6cae:	e728      	b.n	6b02 <_svfprintf_r+0x14f2>
    6cb0:	a81b      	add	r0, sp, #108	; 0x6c
    6cb2:	eeb0 0b4a 	vmov.f64	d0, d10
    6cb6:	f000 fbcb 	bl	7450 <frexp>
    6cba:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
    6cbe:	ee20 0b07 	vmul.f64	d0, d0, d7
    6cc2:	eeb5 0b40 	vcmp.f64	d0, #0.0
    6cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6cca:	d101      	bne.n	6cd0 <_svfprintf_r+0x16c0>
    6ccc:	2301      	movs	r3, #1
    6cce:	931b      	str	r3, [sp, #108]	; 0x6c
    6cd0:	48b3      	ldr	r0, [pc, #716]	; (6fa0 <_svfprintf_r+0x1990>)
    6cd2:	9b03      	ldr	r3, [sp, #12]
    6cd4:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
    6cd8:	3b01      	subs	r3, #1
    6cda:	4622      	mov	r2, r4
    6cdc:	e004      	b.n	6ce8 <_svfprintf_r+0x16d8>
    6cde:	eeb5 0b40 	vcmp.f64	d0, #0.0
    6ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6ce6:	d013      	beq.n	6d10 <_svfprintf_r+0x1700>
    6ce8:	ee20 0b05 	vmul.f64	d0, d0, d5
    6cec:	eefd 7bc0 	vcvt.s32.f64	s15, d0
    6cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
    6cf4:	ee17 1a90 	vmov	r1, s15
    6cf8:	5c41      	ldrb	r1, [r0, r1]
    6cfa:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    6cfe:	4694      	mov	ip, r2
    6d00:	ee30 0b46 	vsub.f64	d0, d0, d6
    6d04:	f802 1b01 	strb.w	r1, [r2], #1
    6d08:	4619      	mov	r1, r3
    6d0a:	f103 33ff 	add.w	r3, r3, #4294967295
    6d0e:	d1e6      	bne.n	6cde <_svfprintf_r+0x16ce>
    6d10:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    6d14:	eeb4 0bc6 	vcmpe.f64	d0, d6
    6d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6d1c:	f300 8148 	bgt.w	6fb0 <_svfprintf_r+0x19a0>
    6d20:	eeb4 0b46 	vcmp.f64	d0, d6
    6d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6d28:	d104      	bne.n	6d34 <_svfprintf_r+0x1724>
    6d2a:	ee17 3a90 	vmov	r3, s15
    6d2e:	07db      	lsls	r3, r3, #31
    6d30:	f100 813e 	bmi.w	6fb0 <_svfprintf_r+0x19a0>
    6d34:	2900      	cmp	r1, #0
    6d36:	db06      	blt.n	6d46 <_svfprintf_r+0x1736>
    6d38:	1c4b      	adds	r3, r1, #1
    6d3a:	4413      	add	r3, r2
    6d3c:	2130      	movs	r1, #48	; 0x30
    6d3e:	f802 1b01 	strb.w	r1, [r2], #1
    6d42:	4293      	cmp	r3, r2
    6d44:	d1fb      	bne.n	6d3e <_svfprintf_r+0x172e>
    6d46:	1b13      	subs	r3, r2, r4
    6d48:	930e      	str	r3, [sp, #56]	; 0x38
    6d4a:	e6fc      	b.n	6b46 <_svfprintf_r+0x1536>
    6d4c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    6d4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6d50:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    6d54:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    6d58:	9613      	str	r6, [sp, #76]	; 0x4c
    6d5a:	18e3      	adds	r3, r4, r3
    6d5c:	429d      	cmp	r5, r3
    6d5e:	4629      	mov	r1, r5
    6d60:	bf28      	it	cs
    6d62:	4619      	movcs	r1, r3
    6d64:	4682      	mov	sl, r0
    6d66:	9105      	str	r1, [sp, #20]
    6d68:	f7ff b9d8 	b.w	611c <_svfprintf_r+0xb0c>
    6d6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    6d6e:	930c      	str	r3, [sp, #48]	; 0x30
    6d70:	1cda      	adds	r2, r3, #3
    6d72:	db02      	blt.n	6d7a <_svfprintf_r+0x176a>
    6d74:	9a03      	ldr	r2, [sp, #12]
    6d76:	4293      	cmp	r3, r2
    6d78:	dd0c      	ble.n	6d94 <_svfprintf_r+0x1784>
    6d7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6d7c:	3b02      	subs	r3, #2
    6d7e:	930b      	str	r3, [sp, #44]	; 0x2c
    6d80:	f023 0520 	bic.w	r5, r3, #32
    6d84:	e6e7      	b.n	6b56 <_svfprintf_r+0x1546>
    6d86:	212d      	movs	r1, #45	; 0x2d
    6d88:	2300      	movs	r3, #0
    6d8a:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    6d8e:	9303      	str	r3, [sp, #12]
    6d90:	f7fe be22 	b.w	59d8 <_svfprintf_r+0x3c8>
    6d94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6d96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    6d98:	4293      	cmp	r3, r2
    6d9a:	f2c0 80bd 	blt.w	6f18 <_svfprintf_r+0x1908>
    6d9e:	07f0      	lsls	r0, r6, #31
    6da0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6da2:	f140 8132 	bpl.w	700a <_svfprintf_r+0x19fa>
    6da6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    6da8:	4413      	add	r3, r2
    6daa:	9305      	str	r3, [sp, #20]
    6dac:	0571      	lsls	r1, r6, #21
    6dae:	d503      	bpl.n	6db8 <_svfprintf_r+0x17a8>
    6db0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6db2:	2b00      	cmp	r3, #0
    6db4:	f300 8135 	bgt.w	7022 <_svfprintf_r+0x1a12>
    6db8:	9b05      	ldr	r3, [sp, #20]
    6dba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    6dbe:	9302      	str	r3, [sp, #8]
    6dc0:	2367      	movs	r3, #103	; 0x67
    6dc2:	930b      	str	r3, [sp, #44]	; 0x2c
    6dc4:	2300      	movs	r3, #0
    6dc6:	930f      	str	r3, [sp, #60]	; 0x3c
    6dc8:	930d      	str	r3, [sp, #52]	; 0x34
    6dca:	e727      	b.n	6c1c <_svfprintf_r+0x160c>
    6dcc:	9b22      	ldr	r3, [sp, #136]	; 0x88
    6dce:	4283      	cmp	r3, r0
    6dd0:	f4bf aeb7 	bcs.w	6b42 <_svfprintf_r+0x1532>
    6dd4:	2130      	movs	r1, #48	; 0x30
    6dd6:	1c5a      	adds	r2, r3, #1
    6dd8:	9222      	str	r2, [sp, #136]	; 0x88
    6dda:	7019      	strb	r1, [r3, #0]
    6ddc:	9b22      	ldr	r3, [sp, #136]	; 0x88
    6dde:	4298      	cmp	r0, r3
    6de0:	d8f9      	bhi.n	6dd6 <_svfprintf_r+0x17c6>
    6de2:	e6ae      	b.n	6b42 <_svfprintf_r+0x1532>
    6de4:	07f3      	lsls	r3, r6, #31
    6de6:	f100 80a7 	bmi.w	6f38 <_svfprintf_r+0x1928>
    6dea:	9b22      	ldr	r3, [sp, #136]	; 0x88
    6dec:	e6a9      	b.n	6b42 <_svfprintf_r+0x1532>
    6dee:	aa24      	add	r2, sp, #144	; 0x90
    6df0:	4658      	mov	r0, fp
    6df2:	9105      	str	r1, [sp, #20]
    6df4:	f001 fb14 	bl	8420 <__ssprint_r>
    6df8:	2800      	cmp	r0, #0
    6dfa:	f47f a86e 	bne.w	5eda <_svfprintf_r+0x8ca>
    6dfe:	f896 c000 	ldrb.w	ip, [r6]
    6e02:	9a26      	ldr	r2, [sp, #152]	; 0x98
    6e04:	9905      	ldr	r1, [sp, #20]
    6e06:	a827      	add	r0, sp, #156	; 0x9c
    6e08:	4465      	add	r5, ip
    6e0a:	f7ff bbec 	b.w	65e6 <_svfprintf_r+0xfd6>
    6e0e:	ee1b 1a10 	vmov	r1, s22
    6e12:	aa24      	add	r2, sp, #144	; 0x90
    6e14:	4658      	mov	r0, fp
    6e16:	f001 fb03 	bl	8420 <__ssprint_r>
    6e1a:	2800      	cmp	r0, #0
    6e1c:	f47f a85d 	bne.w	5eda <_svfprintf_r+0x8ca>
    6e20:	9a26      	ldr	r2, [sp, #152]	; 0x98
    6e22:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    6e26:	f7ff b96b 	b.w	6100 <_svfprintf_r+0xaf0>
    6e2a:	2378      	movs	r3, #120	; 0x78
    6e2c:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    6e30:	2330      	movs	r3, #48	; 0x30
    6e32:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    6e36:	9b03      	ldr	r3, [sp, #12]
    6e38:	2b63      	cmp	r3, #99	; 0x63
    6e3a:	f048 0602 	orr.w	r6, r8, #2
    6e3e:	f300 80a6 	bgt.w	6f8e <_svfprintf_r+0x197e>
    6e42:	2300      	movs	r3, #0
    6e44:	9307      	str	r3, [sp, #28]
    6e46:	ac37      	add	r4, sp, #220	; 0xdc
    6e48:	ee18 3a90 	vmov	r3, s17
    6e4c:	2b00      	cmp	r3, #0
    6e4e:	f448 7881 	orr.w	r8, r8, #258	; 0x102
    6e52:	db2b      	blt.n	6eac <_svfprintf_r+0x189c>
    6e54:	eeb0 ab48 	vmov.f64	d10, d8
    6e58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6e5a:	f023 0520 	bic.w	r5, r3, #32
    6e5e:	2300      	movs	r3, #0
    6e60:	9309      	str	r3, [sp, #36]	; 0x24
    6e62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6e64:	2b61      	cmp	r3, #97	; 0x61
    6e66:	f47f aaad 	bne.w	63c4 <_svfprintf_r+0xdb4>
    6e6a:	eeb0 0b4a 	vmov.f64	d0, d10
    6e6e:	a81b      	add	r0, sp, #108	; 0x6c
    6e70:	f000 faee 	bl	7450 <frexp>
    6e74:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
    6e78:	ee20 0b07 	vmul.f64	d0, d0, d7
    6e7c:	eeb5 0b40 	vcmp.f64	d0, #0.0
    6e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6e84:	d101      	bne.n	6e8a <_svfprintf_r+0x187a>
    6e86:	2301      	movs	r3, #1
    6e88:	931b      	str	r3, [sp, #108]	; 0x6c
    6e8a:	4846      	ldr	r0, [pc, #280]	; (6fa4 <_svfprintf_r+0x1994>)
    6e8c:	e721      	b.n	6cd2 <_svfprintf_r+0x16c2>
    6e8e:	ee1b 1a10 	vmov	r1, s22
    6e92:	aa24      	add	r2, sp, #144	; 0x90
    6e94:	4658      	mov	r0, fp
    6e96:	f001 fac3 	bl	8420 <__ssprint_r>
    6e9a:	2800      	cmp	r0, #0
    6e9c:	f47f a81d 	bne.w	5eda <_svfprintf_r+0x8ca>
    6ea0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    6ea2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    6ea4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    6ea8:	f7ff b94e 	b.w	6148 <_svfprintf_r+0xb38>
    6eac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6eae:	f023 0520 	bic.w	r5, r3, #32
    6eb2:	232d      	movs	r3, #45	; 0x2d
    6eb4:	9309      	str	r3, [sp, #36]	; 0x24
    6eb6:	eeb1 ab48 	vneg.f64	d10, d8
    6eba:	e7d2      	b.n	6e62 <_svfprintf_r+0x1852>
    6ebc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    6ebe:	920c      	str	r2, [sp, #48]	; 0x30
    6ec0:	2a00      	cmp	r2, #0
    6ec2:	f006 0301 	and.w	r3, r6, #1
    6ec6:	f340 810d 	ble.w	70e4 <_svfprintf_r+0x1ad4>
    6eca:	9903      	ldr	r1, [sp, #12]
    6ecc:	430b      	orrs	r3, r1
    6ece:	f040 80cf 	bne.w	7070 <_svfprintf_r+0x1a60>
    6ed2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6ed4:	9305      	str	r3, [sp, #20]
    6ed6:	2366      	movs	r3, #102	; 0x66
    6ed8:	930b      	str	r3, [sp, #44]	; 0x2c
    6eda:	0572      	lsls	r2, r6, #21
    6edc:	f100 80a3 	bmi.w	7026 <_svfprintf_r+0x1a16>
    6ee0:	9b05      	ldr	r3, [sp, #20]
    6ee2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    6ee6:	9302      	str	r3, [sp, #8]
    6ee8:	e76c      	b.n	6dc4 <_svfprintf_r+0x17b4>
    6eea:	ee1b 1a10 	vmov	r1, s22
    6eee:	aa24      	add	r2, sp, #144	; 0x90
    6ef0:	4658      	mov	r0, fp
    6ef2:	f001 fa95 	bl	8420 <__ssprint_r>
    6ef6:	2800      	cmp	r0, #0
    6ef8:	f47e afef 	bne.w	5eda <_svfprintf_r+0x8ca>
    6efc:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
    6efe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6f00:	9a26      	ldr	r2, [sp, #152]	; 0x98
    6f02:	1b1c      	subs	r4, r3, r4
    6f04:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    6f08:	f7ff b936 	b.w	6178 <_svfprintf_r+0xb68>
    6f0c:	2358      	movs	r3, #88	; 0x58
    6f0e:	e78d      	b.n	6e2c <_svfprintf_r+0x181c>
    6f10:	2200      	movs	r2, #0
    6f12:	9203      	str	r2, [sp, #12]
    6f14:	f7fe bbda 	b.w	56cc <_svfprintf_r+0xbc>
    6f18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6f1a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    6f1c:	189a      	adds	r2, r3, r2
    6f1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6f20:	9205      	str	r2, [sp, #20]
    6f22:	2b00      	cmp	r3, #0
    6f24:	f340 80ab 	ble.w	707e <_svfprintf_r+0x1a6e>
    6f28:	2367      	movs	r3, #103	; 0x67
    6f2a:	930b      	str	r3, [sp, #44]	; 0x2c
    6f2c:	e7d5      	b.n	6eda <_svfprintf_r+0x18ca>
    6f2e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    6f30:	320f      	adds	r2, #15
    6f32:	b2d2      	uxtb	r2, r2
    6f34:	2101      	movs	r1, #1
    6f36:	e618      	b.n	6b6a <_svfprintf_r+0x155a>
    6f38:	18a0      	adds	r0, r4, r2
    6f3a:	e5fb      	b.n	6b34 <_svfprintf_r+0x1524>
    6f3c:	2900      	cmp	r1, #0
    6f3e:	f040 80a8 	bne.w	7092 <_svfprintf_r+0x1a82>
    6f42:	2230      	movs	r2, #48	; 0x30
    6f44:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
    6f48:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
    6f4c:	3330      	adds	r3, #48	; 0x30
    6f4e:	f802 3b01 	strb.w	r3, [r2], #1
    6f52:	ab1e      	add	r3, sp, #120	; 0x78
    6f54:	1ad3      	subs	r3, r2, r3
    6f56:	9314      	str	r3, [sp, #80]	; 0x50
    6f58:	e649      	b.n	6bee <_svfprintf_r+0x15de>
    6f5a:	3301      	adds	r3, #1
    6f5c:	4912      	ldr	r1, [pc, #72]	; (6fa8 <_svfprintf_r+0x1998>)
    6f5e:	f8ca 5004 	str.w	r5, [sl, #4]
    6f62:	442a      	add	r2, r5
    6f64:	2b07      	cmp	r3, #7
    6f66:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    6f6a:	f8ca 1000 	str.w	r1, [sl]
    6f6e:	f77f ac33 	ble.w	67d8 <_svfprintf_r+0x11c8>
    6f72:	ee1b 1a10 	vmov	r1, s22
    6f76:	aa24      	add	r2, sp, #144	; 0x90
    6f78:	4658      	mov	r0, fp
    6f7a:	f001 fa51 	bl	8420 <__ssprint_r>
    6f7e:	2800      	cmp	r0, #0
    6f80:	f47e afab 	bne.w	5eda <_svfprintf_r+0x8ca>
    6f84:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    6f88:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    6f8c:	e426      	b.n	67dc <_svfprintf_r+0x11cc>
    6f8e:	1c59      	adds	r1, r3, #1
    6f90:	4658      	mov	r0, fp
    6f92:	f7fc fa8d 	bl	34b0 <_malloc_r>
    6f96:	4604      	mov	r4, r0
    6f98:	b350      	cbz	r0, 6ff0 <_svfprintf_r+0x19e0>
    6f9a:	9007      	str	r0, [sp, #28]
    6f9c:	e754      	b.n	6e48 <_svfprintf_r+0x1838>
    6f9e:	bf00      	nop
    6fa0:	2000060c 	.word	0x2000060c
    6fa4:	200005f8 	.word	0x200005f8
    6fa8:	20000ecc 	.word	0x20000ecc
    6fac:	66666667 	.word	0x66666667
    6fb0:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
    6fb4:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    6fb8:	f890 c00f 	ldrb.w	ip, [r0, #15]
    6fbc:	4561      	cmp	r1, ip
    6fbe:	4613      	mov	r3, r2
    6fc0:	d10a      	bne.n	6fd8 <_svfprintf_r+0x19c8>
    6fc2:	f04f 0e30 	mov.w	lr, #48	; 0x30
    6fc6:	f803 ec01 	strb.w	lr, [r3, #-1]
    6fca:	9b22      	ldr	r3, [sp, #136]	; 0x88
    6fcc:	1e59      	subs	r1, r3, #1
    6fce:	9122      	str	r1, [sp, #136]	; 0x88
    6fd0:	f813 1c01 	ldrb.w	r1, [r3, #-1]
    6fd4:	458c      	cmp	ip, r1
    6fd6:	d0f6      	beq.n	6fc6 <_svfprintf_r+0x19b6>
    6fd8:	2939      	cmp	r1, #57	; 0x39
    6fda:	bf16      	itet	ne
    6fdc:	3101      	addne	r1, #1
    6fde:	7a81      	ldrbeq	r1, [r0, #10]
    6fe0:	b2c9      	uxtbne	r1, r1
    6fe2:	f803 1c01 	strb.w	r1, [r3, #-1]
    6fe6:	e6ae      	b.n	6d46 <_svfprintf_r+0x1736>
    6fe8:	2300      	movs	r3, #0
    6fea:	4690      	mov	r8, r2
    6fec:	9307      	str	r3, [sp, #28]
    6fee:	e760      	b.n	6eb2 <_svfprintf_r+0x18a2>
    6ff0:	ee1b 2a10 	vmov	r2, s22
    6ff4:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    6ff8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6ffc:	8193      	strh	r3, [r2, #12]
    6ffe:	f7fe bc16 	b.w	582e <_svfprintf_r+0x21e>
    7002:	07f5      	lsls	r5, r6, #31
    7004:	f57f adfe 	bpl.w	6c04 <_svfprintf_r+0x15f4>
    7008:	e5f8      	b.n	6bfc <_svfprintf_r+0x15ec>
    700a:	9305      	str	r3, [sp, #20]
    700c:	e6ce      	b.n	6dac <_svfprintf_r+0x179c>
    700e:	eeb5 ab40 	vcmp.f64	d10, #0.0
    7012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7016:	f43f ad8b 	beq.w	6b30 <_svfprintf_r+0x1520>
    701a:	f1c2 0201 	rsb	r2, r2, #1
    701e:	921b      	str	r2, [sp, #108]	; 0x6c
    7020:	e587      	b.n	6b32 <_svfprintf_r+0x1522>
    7022:	2367      	movs	r3, #103	; 0x67
    7024:	930b      	str	r3, [sp, #44]	; 0x2c
    7026:	9913      	ldr	r1, [sp, #76]	; 0x4c
    7028:	780b      	ldrb	r3, [r1, #0]
    702a:	2bff      	cmp	r3, #255	; 0xff
    702c:	d079      	beq.n	7122 <_svfprintf_r+0x1b12>
    702e:	2500      	movs	r5, #0
    7030:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    7032:	4628      	mov	r0, r5
    7034:	e003      	b.n	703e <_svfprintf_r+0x1a2e>
    7036:	3001      	adds	r0, #1
    7038:	3101      	adds	r1, #1
    703a:	2bff      	cmp	r3, #255	; 0xff
    703c:	d008      	beq.n	7050 <_svfprintf_r+0x1a40>
    703e:	4293      	cmp	r3, r2
    7040:	da06      	bge.n	7050 <_svfprintf_r+0x1a40>
    7042:	1ad2      	subs	r2, r2, r3
    7044:	784b      	ldrb	r3, [r1, #1]
    7046:	2b00      	cmp	r3, #0
    7048:	d1f5      	bne.n	7036 <_svfprintf_r+0x1a26>
    704a:	780b      	ldrb	r3, [r1, #0]
    704c:	3501      	adds	r5, #1
    704e:	e7f4      	b.n	703a <_svfprintf_r+0x1a2a>
    7050:	920c      	str	r2, [sp, #48]	; 0x30
    7052:	9113      	str	r1, [sp, #76]	; 0x4c
    7054:	900d      	str	r0, [sp, #52]	; 0x34
    7056:	950f      	str	r5, [sp, #60]	; 0x3c
    7058:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    705a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    705c:	9916      	ldr	r1, [sp, #88]	; 0x58
    705e:	4413      	add	r3, r2
    7060:	9a05      	ldr	r2, [sp, #20]
    7062:	fb01 2303 	mla	r3, r1, r3, r2
    7066:	9305      	str	r3, [sp, #20]
    7068:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    706c:	9302      	str	r3, [sp, #8]
    706e:	e5d5      	b.n	6c1c <_svfprintf_r+0x160c>
    7070:	9b10      	ldr	r3, [sp, #64]	; 0x40
    7072:	18d3      	adds	r3, r2, r3
    7074:	4419      	add	r1, r3
    7076:	2366      	movs	r3, #102	; 0x66
    7078:	9105      	str	r1, [sp, #20]
    707a:	930b      	str	r3, [sp, #44]	; 0x2c
    707c:	e72d      	b.n	6eda <_svfprintf_r+0x18ca>
    707e:	f1c3 0301 	rsb	r3, r3, #1
    7082:	441a      	add	r2, r3
    7084:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    7088:	9302      	str	r3, [sp, #8]
    708a:	2367      	movs	r3, #103	; 0x67
    708c:	9205      	str	r2, [sp, #20]
    708e:	930b      	str	r3, [sp, #44]	; 0x2c
    7090:	e698      	b.n	6dc4 <_svfprintf_r+0x17b4>
    7092:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    7096:	e759      	b.n	6f4c <_svfprintf_r+0x193c>
    7098:	9b03      	ldr	r3, [sp, #12]
    709a:	f8dd 9008 	ldr.w	r9, [sp, #8]
    709e:	f8dd 801c 	ldr.w	r8, [sp, #28]
    70a2:	9305      	str	r3, [sp, #20]
    70a4:	e4b4      	b.n	6a10 <_svfprintf_r+0x1400>
    70a6:	ee18 3a90 	vmov	r3, s17
    70aa:	2b00      	cmp	r3, #0
    70ac:	bfb4      	ite	lt
    70ae:	212d      	movlt	r1, #45	; 0x2d
    70b0:	f89d 1067 	ldrbge.w	r1, [sp, #103]	; 0x67
    70b4:	4c25      	ldr	r4, [pc, #148]	; (714c <_svfprintf_r+0x1b3c>)
    70b6:	4b26      	ldr	r3, [pc, #152]	; (7150 <_svfprintf_r+0x1b40>)
    70b8:	bfb8      	it	lt
    70ba:	f88d 1067 	strblt.w	r1, [sp, #103]	; 0x67
    70be:	f028 0880 	bic.w	r8, r8, #128	; 0x80
    70c2:	f7fe bc79 	b.w	59b8 <_svfprintf_r+0x3a8>
    70c6:	9b03      	ldr	r3, [sp, #12]
    70c8:	9302      	str	r3, [sp, #8]
    70ca:	9305      	str	r3, [sp, #20]
    70cc:	2373      	movs	r3, #115	; 0x73
    70ce:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    70d2:	9003      	str	r0, [sp, #12]
    70d4:	900f      	str	r0, [sp, #60]	; 0x3c
    70d6:	900d      	str	r0, [sp, #52]	; 0x34
    70d8:	930b      	str	r3, [sp, #44]	; 0x2c
    70da:	f7fe bc7a 	b.w	59d2 <_svfprintf_r+0x3c2>
    70de:	2302      	movs	r3, #2
    70e0:	9314      	str	r3, [sp, #80]	; 0x50
    70e2:	e584      	b.n	6bee <_svfprintf_r+0x15de>
    70e4:	9a03      	ldr	r2, [sp, #12]
    70e6:	4313      	orrs	r3, r2
    70e8:	d105      	bne.n	70f6 <_svfprintf_r+0x1ae6>
    70ea:	2301      	movs	r3, #1
    70ec:	2266      	movs	r2, #102	; 0x66
    70ee:	9302      	str	r3, [sp, #8]
    70f0:	920b      	str	r2, [sp, #44]	; 0x2c
    70f2:	9305      	str	r3, [sp, #20]
    70f4:	e666      	b.n	6dc4 <_svfprintf_r+0x17b4>
    70f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    70f8:	3301      	adds	r3, #1
    70fa:	441a      	add	r2, r3
    70fc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    7100:	9302      	str	r3, [sp, #8]
    7102:	2366      	movs	r3, #102	; 0x66
    7104:	9205      	str	r2, [sp, #20]
    7106:	930b      	str	r3, [sp, #44]	; 0x2c
    7108:	e65c      	b.n	6dc4 <_svfprintf_r+0x17b4>
    710a:	9a08      	ldr	r2, [sp, #32]
    710c:	f899 3001 	ldrb.w	r3, [r9, #1]
    7110:	4689      	mov	r9, r1
    7112:	f852 1b04 	ldr.w	r1, [r2], #4
    7116:	9208      	str	r2, [sp, #32]
    7118:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
    711c:	9103      	str	r1, [sp, #12]
    711e:	f7fe bad3 	b.w	56c8 <_svfprintf_r+0xb8>
    7122:	2300      	movs	r3, #0
    7124:	930f      	str	r3, [sp, #60]	; 0x3c
    7126:	930d      	str	r3, [sp, #52]	; 0x34
    7128:	e796      	b.n	7058 <_svfprintf_r+0x1a48>
    712a:	230c      	movs	r3, #12
    712c:	f8cb 3000 	str.w	r3, [fp]
    7130:	f04f 33ff 	mov.w	r3, #4294967295
    7134:	9304      	str	r3, [sp, #16]
    7136:	f7fe bb81 	b.w	583c <_svfprintf_r+0x22c>
    713a:	ee1b 2a10 	vmov	r2, s22
    713e:	8993      	ldrh	r3, [r2, #12]
    7140:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    7144:	8193      	strh	r3, [r2, #12]
    7146:	f7fe bec8 	b.w	5eda <_svfprintf_r+0x8ca>
    714a:	bf00      	nop
    714c:	200005f0 	.word	0x200005f0
    7150:	200005f4 	.word	0x200005f4

00007154 <_fclose_r>:
    7154:	b570      	push	{r4, r5, r6, lr}
    7156:	2900      	cmp	r1, #0
    7158:	d04b      	beq.n	71f2 <_fclose_r+0x9e>
    715a:	4606      	mov	r6, r0
    715c:	460c      	mov	r4, r1
    715e:	b110      	cbz	r0, 7166 <_fclose_r+0x12>
    7160:	6b43      	ldr	r3, [r0, #52]	; 0x34
    7162:	2b00      	cmp	r3, #0
    7164:	d048      	beq.n	71f8 <_fclose_r+0xa4>
    7166:	6e63      	ldr	r3, [r4, #100]	; 0x64
    7168:	07d8      	lsls	r0, r3, #31
    716a:	d534      	bpl.n	71d6 <_fclose_r+0x82>
    716c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    7170:	2b00      	cmp	r3, #0
    7172:	d03e      	beq.n	71f2 <_fclose_r+0x9e>
    7174:	4621      	mov	r1, r4
    7176:	4630      	mov	r0, r6
    7178:	f000 f850 	bl	721c <__sflush_r>
    717c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    717e:	4605      	mov	r5, r0
    7180:	b133      	cbz	r3, 7190 <_fclose_r+0x3c>
    7182:	69e1      	ldr	r1, [r4, #28]
    7184:	4630      	mov	r0, r6
    7186:	4798      	blx	r3
    7188:	2800      	cmp	r0, #0
    718a:	bfb8      	it	lt
    718c:	f04f 35ff 	movlt.w	r5, #4294967295
    7190:	89a3      	ldrh	r3, [r4, #12]
    7192:	061a      	lsls	r2, r3, #24
    7194:	d43c      	bmi.n	7210 <_fclose_r+0xbc>
    7196:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7198:	b141      	cbz	r1, 71ac <_fclose_r+0x58>
    719a:	f104 0340 	add.w	r3, r4, #64	; 0x40
    719e:	4299      	cmp	r1, r3
    71a0:	d002      	beq.n	71a8 <_fclose_r+0x54>
    71a2:	4630      	mov	r0, r6
    71a4:	f7fd fd4e 	bl	4c44 <_free_r>
    71a8:	2300      	movs	r3, #0
    71aa:	6323      	str	r3, [r4, #48]	; 0x30
    71ac:	6c61      	ldr	r1, [r4, #68]	; 0x44
    71ae:	b121      	cbz	r1, 71ba <_fclose_r+0x66>
    71b0:	4630      	mov	r0, r6
    71b2:	f7fd fd47 	bl	4c44 <_free_r>
    71b6:	2300      	movs	r3, #0
    71b8:	6463      	str	r3, [r4, #68]	; 0x44
    71ba:	f7fc ffa9 	bl	4110 <__sfp_lock_acquire>
    71be:	6e63      	ldr	r3, [r4, #100]	; 0x64
    71c0:	2200      	movs	r2, #0
    71c2:	07db      	lsls	r3, r3, #31
    71c4:	81a2      	strh	r2, [r4, #12]
    71c6:	d51f      	bpl.n	7208 <_fclose_r+0xb4>
    71c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    71ca:	f7fd fa5b 	bl	4684 <__retarget_lock_close_recursive>
    71ce:	f7fc ffa5 	bl	411c <__sfp_lock_release>
    71d2:	4628      	mov	r0, r5
    71d4:	bd70      	pop	{r4, r5, r6, pc}
    71d6:	89a3      	ldrh	r3, [r4, #12]
    71d8:	0599      	lsls	r1, r3, #22
    71da:	d4cb      	bmi.n	7174 <_fclose_r+0x20>
    71dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
    71de:	f7fd fa53 	bl	4688 <__retarget_lock_acquire_recursive>
    71e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    71e6:	2b00      	cmp	r3, #0
    71e8:	d1c4      	bne.n	7174 <_fclose_r+0x20>
    71ea:	6e65      	ldr	r5, [r4, #100]	; 0x64
    71ec:	f015 0501 	ands.w	r5, r5, #1
    71f0:	d005      	beq.n	71fe <_fclose_r+0xaa>
    71f2:	2500      	movs	r5, #0
    71f4:	4628      	mov	r0, r5
    71f6:	bd70      	pop	{r4, r5, r6, pc}
    71f8:	f7fc ff6c 	bl	40d4 <__sinit>
    71fc:	e7b3      	b.n	7166 <_fclose_r+0x12>
    71fe:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7200:	f7fd fa44 	bl	468c <__retarget_lock_release_recursive>
    7204:	4628      	mov	r0, r5
    7206:	bd70      	pop	{r4, r5, r6, pc}
    7208:	6da0      	ldr	r0, [r4, #88]	; 0x58
    720a:	f7fd fa3f 	bl	468c <__retarget_lock_release_recursive>
    720e:	e7db      	b.n	71c8 <_fclose_r+0x74>
    7210:	6921      	ldr	r1, [r4, #16]
    7212:	4630      	mov	r0, r6
    7214:	f7fd fd16 	bl	4c44 <_free_r>
    7218:	e7bd      	b.n	7196 <_fclose_r+0x42>
    721a:	bf00      	nop

0000721c <__sflush_r>:
    721c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
    7220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7224:	460c      	mov	r4, r1
    7226:	0711      	lsls	r1, r2, #28
    7228:	4680      	mov	r8, r0
    722a:	d447      	bmi.n	72bc <__sflush_r+0xa0>
    722c:	6863      	ldr	r3, [r4, #4]
    722e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    7232:	2b00      	cmp	r3, #0
    7234:	81a2      	strh	r2, [r4, #12]
    7236:	dd5e      	ble.n	72f6 <__sflush_r+0xda>
    7238:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    723a:	2d00      	cmp	r5, #0
    723c:	d058      	beq.n	72f0 <__sflush_r+0xd4>
    723e:	2300      	movs	r3, #0
    7240:	f8d8 6000 	ldr.w	r6, [r8]
    7244:	f8c8 3000 	str.w	r3, [r8]
    7248:	b293      	uxth	r3, r2
    724a:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    724e:	d156      	bne.n	72fe <__sflush_r+0xe2>
    7250:	2301      	movs	r3, #1
    7252:	69e1      	ldr	r1, [r4, #28]
    7254:	4640      	mov	r0, r8
    7256:	47a8      	blx	r5
    7258:	1c43      	adds	r3, r0, #1
    725a:	d067      	beq.n	732c <__sflush_r+0x110>
    725c:	89a3      	ldrh	r3, [r4, #12]
    725e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    7260:	075f      	lsls	r7, r3, #29
    7262:	d505      	bpl.n	7270 <__sflush_r+0x54>
    7264:	6863      	ldr	r3, [r4, #4]
    7266:	1ac0      	subs	r0, r0, r3
    7268:	6b23      	ldr	r3, [r4, #48]	; 0x30
    726a:	b10b      	cbz	r3, 7270 <__sflush_r+0x54>
    726c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    726e:	1ac0      	subs	r0, r0, r3
    7270:	69e1      	ldr	r1, [r4, #28]
    7272:	4602      	mov	r2, r0
    7274:	2300      	movs	r3, #0
    7276:	4640      	mov	r0, r8
    7278:	47a8      	blx	r5
    727a:	1c41      	adds	r1, r0, #1
    727c:	d141      	bne.n	7302 <__sflush_r+0xe6>
    727e:	f8d8 3000 	ldr.w	r3, [r8]
    7282:	2b00      	cmp	r3, #0
    7284:	d03d      	beq.n	7302 <__sflush_r+0xe6>
    7286:	2b1d      	cmp	r3, #29
    7288:	d001      	beq.n	728e <__sflush_r+0x72>
    728a:	2b16      	cmp	r3, #22
    728c:	d156      	bne.n	733c <__sflush_r+0x120>
    728e:	89a3      	ldrh	r3, [r4, #12]
    7290:	6922      	ldr	r2, [r4, #16]
    7292:	6022      	str	r2, [r4, #0]
    7294:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    7298:	2100      	movs	r1, #0
    729a:	6061      	str	r1, [r4, #4]
    729c:	81a3      	strh	r3, [r4, #12]
    729e:	6b21      	ldr	r1, [r4, #48]	; 0x30
    72a0:	f8c8 6000 	str.w	r6, [r8]
    72a4:	b321      	cbz	r1, 72f0 <__sflush_r+0xd4>
    72a6:	f104 0340 	add.w	r3, r4, #64	; 0x40
    72aa:	4299      	cmp	r1, r3
    72ac:	d002      	beq.n	72b4 <__sflush_r+0x98>
    72ae:	4640      	mov	r0, r8
    72b0:	f7fd fcc8 	bl	4c44 <_free_r>
    72b4:	2000      	movs	r0, #0
    72b6:	6320      	str	r0, [r4, #48]	; 0x30
    72b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    72bc:	6926      	ldr	r6, [r4, #16]
    72be:	b1be      	cbz	r6, 72f0 <__sflush_r+0xd4>
    72c0:	b293      	uxth	r3, r2
    72c2:	6825      	ldr	r5, [r4, #0]
    72c4:	6026      	str	r6, [r4, #0]
    72c6:	079a      	lsls	r2, r3, #30
    72c8:	bf0c      	ite	eq
    72ca:	6963      	ldreq	r3, [r4, #20]
    72cc:	2300      	movne	r3, #0
    72ce:	1bad      	subs	r5, r5, r6
    72d0:	60a3      	str	r3, [r4, #8]
    72d2:	e00b      	b.n	72ec <__sflush_r+0xd0>
    72d4:	462b      	mov	r3, r5
    72d6:	4632      	mov	r2, r6
    72d8:	69e1      	ldr	r1, [r4, #28]
    72da:	6a67      	ldr	r7, [r4, #36]	; 0x24
    72dc:	4640      	mov	r0, r8
    72de:	47b8      	blx	r7
    72e0:	f1b0 0c00 	subs.w	ip, r0, #0
    72e4:	eba5 050c 	sub.w	r5, r5, ip
    72e8:	4466      	add	r6, ip
    72ea:	dd17      	ble.n	731c <__sflush_r+0x100>
    72ec:	2d00      	cmp	r5, #0
    72ee:	dcf1      	bgt.n	72d4 <__sflush_r+0xb8>
    72f0:	2000      	movs	r0, #0
    72f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    72f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    72f8:	2b00      	cmp	r3, #0
    72fa:	dc9d      	bgt.n	7238 <__sflush_r+0x1c>
    72fc:	e7f8      	b.n	72f0 <__sflush_r+0xd4>
    72fe:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7300:	e7ae      	b.n	7260 <__sflush_r+0x44>
    7302:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    7306:	6922      	ldr	r2, [r4, #16]
    7308:	6022      	str	r2, [r4, #0]
    730a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    730e:	81a3      	strh	r3, [r4, #12]
    7310:	2200      	movs	r2, #0
    7312:	04db      	lsls	r3, r3, #19
    7314:	6062      	str	r2, [r4, #4]
    7316:	d5c2      	bpl.n	729e <__sflush_r+0x82>
    7318:	6520      	str	r0, [r4, #80]	; 0x50
    731a:	e7c0      	b.n	729e <__sflush_r+0x82>
    731c:	89a3      	ldrh	r3, [r4, #12]
    731e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    7322:	f04f 30ff 	mov.w	r0, #4294967295
    7326:	81a3      	strh	r3, [r4, #12]
    7328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    732c:	f8d8 3000 	ldr.w	r3, [r8]
    7330:	2b00      	cmp	r3, #0
    7332:	d093      	beq.n	725c <__sflush_r+0x40>
    7334:	2b1d      	cmp	r3, #29
    7336:	d006      	beq.n	7346 <__sflush_r+0x12a>
    7338:	2b16      	cmp	r3, #22
    733a:	d004      	beq.n	7346 <__sflush_r+0x12a>
    733c:	89a3      	ldrh	r3, [r4, #12]
    733e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    7342:	81a3      	strh	r3, [r4, #12]
    7344:	e7d5      	b.n	72f2 <__sflush_r+0xd6>
    7346:	f8c8 6000 	str.w	r6, [r8]
    734a:	e7d1      	b.n	72f0 <__sflush_r+0xd4>

0000734c <_fflush_r>:
    734c:	b538      	push	{r3, r4, r5, lr}
    734e:	460c      	mov	r4, r1
    7350:	4605      	mov	r5, r0
    7352:	b108      	cbz	r0, 7358 <_fflush_r+0xc>
    7354:	6b43      	ldr	r3, [r0, #52]	; 0x34
    7356:	b303      	cbz	r3, 739a <_fflush_r+0x4e>
    7358:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
    735c:	b188      	cbz	r0, 7382 <_fflush_r+0x36>
    735e:	6e63      	ldr	r3, [r4, #100]	; 0x64
    7360:	07db      	lsls	r3, r3, #31
    7362:	d401      	bmi.n	7368 <_fflush_r+0x1c>
    7364:	0581      	lsls	r1, r0, #22
    7366:	d50f      	bpl.n	7388 <_fflush_r+0x3c>
    7368:	4628      	mov	r0, r5
    736a:	4621      	mov	r1, r4
    736c:	f7ff ff56 	bl	721c <__sflush_r>
    7370:	6e63      	ldr	r3, [r4, #100]	; 0x64
    7372:	07da      	lsls	r2, r3, #31
    7374:	4605      	mov	r5, r0
    7376:	d402      	bmi.n	737e <_fflush_r+0x32>
    7378:	89a3      	ldrh	r3, [r4, #12]
    737a:	059b      	lsls	r3, r3, #22
    737c:	d508      	bpl.n	7390 <_fflush_r+0x44>
    737e:	4628      	mov	r0, r5
    7380:	bd38      	pop	{r3, r4, r5, pc}
    7382:	4605      	mov	r5, r0
    7384:	4628      	mov	r0, r5
    7386:	bd38      	pop	{r3, r4, r5, pc}
    7388:	6da0      	ldr	r0, [r4, #88]	; 0x58
    738a:	f7fd f97d 	bl	4688 <__retarget_lock_acquire_recursive>
    738e:	e7eb      	b.n	7368 <_fflush_r+0x1c>
    7390:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7392:	f7fd f97b 	bl	468c <__retarget_lock_release_recursive>
    7396:	4628      	mov	r0, r5
    7398:	bd38      	pop	{r3, r4, r5, pc}
    739a:	f7fc fe9b 	bl	40d4 <__sinit>
    739e:	e7db      	b.n	7358 <_fflush_r+0xc>

000073a0 <_localeconv_r>:
    73a0:	4800      	ldr	r0, [pc, #0]	; (73a4 <_localeconv_r+0x4>)
    73a2:	4770      	bx	lr
    73a4:	200011e8 	.word	0x200011e8
	...

000073b0 <memchr>:
    73b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    73b4:	2a10      	cmp	r2, #16
    73b6:	db2b      	blt.n	7410 <memchr+0x60>
    73b8:	f010 0f07 	tst.w	r0, #7
    73bc:	d008      	beq.n	73d0 <memchr+0x20>
    73be:	f810 3b01 	ldrb.w	r3, [r0], #1
    73c2:	3a01      	subs	r2, #1
    73c4:	428b      	cmp	r3, r1
    73c6:	d02d      	beq.n	7424 <memchr+0x74>
    73c8:	f010 0f07 	tst.w	r0, #7
    73cc:	b342      	cbz	r2, 7420 <memchr+0x70>
    73ce:	d1f6      	bne.n	73be <memchr+0xe>
    73d0:	b4f0      	push	{r4, r5, r6, r7}
    73d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    73d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    73da:	f022 0407 	bic.w	r4, r2, #7
    73de:	f07f 0700 	mvns.w	r7, #0
    73e2:	2300      	movs	r3, #0
    73e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    73e8:	3c08      	subs	r4, #8
    73ea:	ea85 0501 	eor.w	r5, r5, r1
    73ee:	ea86 0601 	eor.w	r6, r6, r1
    73f2:	fa85 f547 	uadd8	r5, r5, r7
    73f6:	faa3 f587 	sel	r5, r3, r7
    73fa:	fa86 f647 	uadd8	r6, r6, r7
    73fe:	faa5 f687 	sel	r6, r5, r7
    7402:	b98e      	cbnz	r6, 7428 <memchr+0x78>
    7404:	d1ee      	bne.n	73e4 <memchr+0x34>
    7406:	bcf0      	pop	{r4, r5, r6, r7}
    7408:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    740c:	f002 0207 	and.w	r2, r2, #7
    7410:	b132      	cbz	r2, 7420 <memchr+0x70>
    7412:	f810 3b01 	ldrb.w	r3, [r0], #1
    7416:	3a01      	subs	r2, #1
    7418:	ea83 0301 	eor.w	r3, r3, r1
    741c:	b113      	cbz	r3, 7424 <memchr+0x74>
    741e:	d1f8      	bne.n	7412 <memchr+0x62>
    7420:	2000      	movs	r0, #0
    7422:	4770      	bx	lr
    7424:	3801      	subs	r0, #1
    7426:	4770      	bx	lr
    7428:	2d00      	cmp	r5, #0
    742a:	bf06      	itte	eq
    742c:	4635      	moveq	r5, r6
    742e:	3803      	subeq	r0, #3
    7430:	3807      	subne	r0, #7
    7432:	f015 0f01 	tst.w	r5, #1
    7436:	d107      	bne.n	7448 <memchr+0x98>
    7438:	3001      	adds	r0, #1
    743a:	f415 7f80 	tst.w	r5, #256	; 0x100
    743e:	bf02      	ittt	eq
    7440:	3001      	addeq	r0, #1
    7442:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    7446:	3001      	addeq	r0, #1
    7448:	bcf0      	pop	{r4, r5, r6, r7}
    744a:	3801      	subs	r0, #1
    744c:	4770      	bx	lr
    744e:	bf00      	nop

00007450 <frexp>:
    7450:	b430      	push	{r4, r5}
    7452:	b082      	sub	sp, #8
    7454:	ed8d 0b00 	vstr	d0, [sp]
    7458:	9a01      	ldr	r2, [sp, #4]
    745a:	4c19      	ldr	r4, [pc, #100]	; (74c0 <frexp+0x70>)
    745c:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
    7460:	2100      	movs	r1, #0
    7462:	42a3      	cmp	r3, r4
    7464:	6001      	str	r1, [r0, #0]
    7466:	dc21      	bgt.n	74ac <frexp+0x5c>
    7468:	9c00      	ldr	r4, [sp, #0]
    746a:	431c      	orrs	r4, r3
    746c:	d01e      	beq.n	74ac <frexp+0x5c>
    746e:	4c15      	ldr	r4, [pc, #84]	; (74c4 <frexp+0x74>)
    7470:	4014      	ands	r4, r2
    7472:	b954      	cbnz	r4, 748a <frexp+0x3a>
    7474:	ed9f 7b10 	vldr	d7, [pc, #64]	; 74b8 <frexp+0x68>
    7478:	ee20 7b07 	vmul.f64	d7, d0, d7
    747c:	ed8d 7b00 	vstr	d7, [sp]
    7480:	9a01      	ldr	r2, [sp, #4]
    7482:	f06f 0135 	mvn.w	r1, #53	; 0x35
    7486:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
    748a:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
    748e:	e9dd 4500 	ldrd	r4, r5, [sp]
    7492:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
    7496:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
    749a:	151b      	asrs	r3, r3, #20
    749c:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
    74a0:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
    74a4:	e9cd 4500 	strd	r4, r5, [sp]
    74a8:	440b      	add	r3, r1
    74aa:	6003      	str	r3, [r0, #0]
    74ac:	ed9d 0b00 	vldr	d0, [sp]
    74b0:	b002      	add	sp, #8
    74b2:	bc30      	pop	{r4, r5}
    74b4:	4770      	bx	lr
    74b6:	bf00      	nop
    74b8:	00000000 	.word	0x00000000
    74bc:	43500000 	.word	0x43500000
    74c0:	7fefffff 	.word	0x7fefffff
    74c4:	7ff00000 	.word	0x7ff00000

000074c8 <__assert_func>:
    74c8:	b500      	push	{lr}
    74ca:	4c0b      	ldr	r4, [pc, #44]	; (74f8 <__assert_func+0x30>)
    74cc:	6825      	ldr	r5, [r4, #0]
    74ce:	4614      	mov	r4, r2
    74d0:	68ee      	ldr	r6, [r5, #12]
    74d2:	461a      	mov	r2, r3
    74d4:	b085      	sub	sp, #20
    74d6:	4603      	mov	r3, r0
    74d8:	460d      	mov	r5, r1
    74da:	b14c      	cbz	r4, 74f0 <__assert_func+0x28>
    74dc:	4907      	ldr	r1, [pc, #28]	; (74fc <__assert_func+0x34>)
    74de:	9500      	str	r5, [sp, #0]
    74e0:	e9cd 1401 	strd	r1, r4, [sp, #4]
    74e4:	4630      	mov	r0, r6
    74e6:	4906      	ldr	r1, [pc, #24]	; (7500 <__assert_func+0x38>)
    74e8:	f000 ff86 	bl	83f8 <fiprintf>
    74ec:	f7fa fca0 	bl	1e30 <abort>
    74f0:	4904      	ldr	r1, [pc, #16]	; (7504 <__assert_func+0x3c>)
    74f2:	460c      	mov	r4, r1
    74f4:	e7f3      	b.n	74de <__assert_func+0x16>
    74f6:	bf00      	nop
    74f8:	20001680 	.word	0x20001680
    74fc:	200003c8 	.word	0x200003c8
    7500:	200003d8 	.word	0x200003d8
    7504:	200003d4 	.word	0x200003d4

00007508 <_calloc_r>:
    7508:	b538      	push	{r3, r4, r5, lr}
    750a:	fba1 1402 	umull	r1, r4, r1, r2
    750e:	bb8c      	cbnz	r4, 7574 <_calloc_r+0x6c>
    7510:	f7fb ffce 	bl	34b0 <_malloc_r>
    7514:	4605      	mov	r5, r0
    7516:	b1e0      	cbz	r0, 7552 <_calloc_r+0x4a>
    7518:	f850 2c04 	ldr.w	r2, [r0, #-4]
    751c:	f022 0203 	bic.w	r2, r2, #3
    7520:	3a04      	subs	r2, #4
    7522:	2a24      	cmp	r2, #36	; 0x24
    7524:	d817      	bhi.n	7556 <_calloc_r+0x4e>
    7526:	2a13      	cmp	r2, #19
    7528:	d91a      	bls.n	7560 <_calloc_r+0x58>
    752a:	2a1b      	cmp	r2, #27
    752c:	e9c0 4400 	strd	r4, r4, [r0]
    7530:	d91d      	bls.n	756e <_calloc_r+0x66>
    7532:	2a24      	cmp	r2, #36	; 0x24
    7534:	bf14      	ite	ne
    7536:	f100 0210 	addne.w	r2, r0, #16
    753a:	f100 0218 	addeq.w	r2, r0, #24
    753e:	f04f 0300 	mov.w	r3, #0
    7542:	e9c0 4402 	strd	r4, r4, [r0, #8]
    7546:	bf04      	itt	eq
    7548:	6104      	streq	r4, [r0, #16]
    754a:	6144      	streq	r4, [r0, #20]
    754c:	e9c2 3300 	strd	r3, r3, [r2]
    7550:	6093      	str	r3, [r2, #8]
    7552:	4628      	mov	r0, r5
    7554:	bd38      	pop	{r3, r4, r5, pc}
    7556:	4621      	mov	r1, r4
    7558:	f7fc ff32 	bl	43c0 <memset>
    755c:	4628      	mov	r0, r5
    755e:	bd38      	pop	{r3, r4, r5, pc}
    7560:	4602      	mov	r2, r0
    7562:	2300      	movs	r3, #0
    7564:	e9c2 3300 	strd	r3, r3, [r2]
    7568:	6093      	str	r3, [r2, #8]
    756a:	4628      	mov	r0, r5
    756c:	bd38      	pop	{r3, r4, r5, pc}
    756e:	f100 0208 	add.w	r2, r0, #8
    7572:	e7f6      	b.n	7562 <_calloc_r+0x5a>
    7574:	f7fd f85a 	bl	462c <__errno>
    7578:	230c      	movs	r3, #12
    757a:	2500      	movs	r5, #0
    757c:	6003      	str	r3, [r0, #0]
    757e:	e7e8      	b.n	7552 <_calloc_r+0x4a>

00007580 <quorem>:
    7580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7584:	6903      	ldr	r3, [r0, #16]
    7586:	690c      	ldr	r4, [r1, #16]
    7588:	42a3      	cmp	r3, r4
    758a:	b083      	sub	sp, #12
    758c:	f2c0 8087 	blt.w	769e <quorem+0x11e>
    7590:	3c01      	subs	r4, #1
    7592:	f101 0514 	add.w	r5, r1, #20
    7596:	00a3      	lsls	r3, r4, #2
    7598:	f100 0814 	add.w	r8, r0, #20
    759c:	9300      	str	r3, [sp, #0]
    759e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    75a2:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
    75a6:	3301      	adds	r3, #1
    75a8:	4681      	mov	r9, r0
    75aa:	429a      	cmp	r2, r3
    75ac:	eb08 0084 	add.w	r0, r8, r4, lsl #2
    75b0:	eb05 0784 	add.w	r7, r5, r4, lsl #2
    75b4:	9001      	str	r0, [sp, #4]
    75b6:	fbb2 f6f3 	udiv	r6, r2, r3
    75ba:	d33b      	bcc.n	7634 <quorem+0xb4>
    75bc:	f04f 0c00 	mov.w	ip, #0
    75c0:	46ae      	mov	lr, r5
    75c2:	4640      	mov	r0, r8
    75c4:	46e2      	mov	sl, ip
    75c6:	4663      	mov	r3, ip
    75c8:	f85e bb04 	ldr.w	fp, [lr], #4
    75cc:	6802      	ldr	r2, [r0, #0]
    75ce:	fa1f fc8b 	uxth.w	ip, fp
    75d2:	fb06 330c 	mla	r3, r6, ip, r3
    75d6:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    75da:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
    75de:	fb06 cc0b 	mla	ip, r6, fp, ip
    75e2:	b29b      	uxth	r3, r3
    75e4:	ebaa 0303 	sub.w	r3, sl, r3
    75e8:	fa1f fa8c 	uxth.w	sl, ip
    75ec:	fa13 f382 	uxtah	r3, r3, r2
    75f0:	ebca 4212 	rsb	r2, sl, r2, lsr #16
    75f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
    75f8:	b29b      	uxth	r3, r3
    75fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    75fe:	4577      	cmp	r7, lr
    7600:	f840 3b04 	str.w	r3, [r0], #4
    7604:	ea4f 4a22 	mov.w	sl, r2, asr #16
    7608:	ea4f 431c 	mov.w	r3, ip, lsr #16
    760c:	d2dc      	bcs.n	75c8 <quorem+0x48>
    760e:	9b00      	ldr	r3, [sp, #0]
    7610:	f858 3003 	ldr.w	r3, [r8, r3]
    7614:	b973      	cbnz	r3, 7634 <quorem+0xb4>
    7616:	9b01      	ldr	r3, [sp, #4]
    7618:	3b04      	subs	r3, #4
    761a:	4598      	cmp	r8, r3
    761c:	d304      	bcc.n	7628 <quorem+0xa8>
    761e:	e007      	b.n	7630 <quorem+0xb0>
    7620:	4598      	cmp	r8, r3
    7622:	f104 34ff 	add.w	r4, r4, #4294967295
    7626:	d203      	bcs.n	7630 <quorem+0xb0>
    7628:	f853 2904 	ldr.w	r2, [r3], #-4
    762c:	2a00      	cmp	r2, #0
    762e:	d0f7      	beq.n	7620 <quorem+0xa0>
    7630:	f8c9 4010 	str.w	r4, [r9, #16]
    7634:	4648      	mov	r0, r9
    7636:	f7fd fea7 	bl	5388 <__mcmp>
    763a:	2800      	cmp	r0, #0
    763c:	db2b      	blt.n	7696 <quorem+0x116>
    763e:	3601      	adds	r6, #1
    7640:	4641      	mov	r1, r8
    7642:	2300      	movs	r3, #0
    7644:	f855 0b04 	ldr.w	r0, [r5], #4
    7648:	f8d1 c000 	ldr.w	ip, [r1]
    764c:	b282      	uxth	r2, r0
    764e:	1a9a      	subs	r2, r3, r2
    7650:	0c03      	lsrs	r3, r0, #16
    7652:	fa12 f28c 	uxtah	r2, r2, ip
    7656:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
    765a:	eb03 4322 	add.w	r3, r3, r2, asr #16
    765e:	b292      	uxth	r2, r2
    7660:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    7664:	42af      	cmp	r7, r5
    7666:	f841 2b04 	str.w	r2, [r1], #4
    766a:	ea4f 4323 	mov.w	r3, r3, asr #16
    766e:	d2e9      	bcs.n	7644 <quorem+0xc4>
    7670:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
    7674:	eb08 0384 	add.w	r3, r8, r4, lsl #2
    7678:	b96a      	cbnz	r2, 7696 <quorem+0x116>
    767a:	3b04      	subs	r3, #4
    767c:	4598      	cmp	r8, r3
    767e:	d304      	bcc.n	768a <quorem+0x10a>
    7680:	e007      	b.n	7692 <quorem+0x112>
    7682:	4598      	cmp	r8, r3
    7684:	f104 34ff 	add.w	r4, r4, #4294967295
    7688:	d203      	bcs.n	7692 <quorem+0x112>
    768a:	f853 2904 	ldr.w	r2, [r3], #-4
    768e:	2a00      	cmp	r2, #0
    7690:	d0f7      	beq.n	7682 <quorem+0x102>
    7692:	f8c9 4010 	str.w	r4, [r9, #16]
    7696:	4630      	mov	r0, r6
    7698:	b003      	add	sp, #12
    769a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    769e:	2000      	movs	r0, #0
    76a0:	b003      	add	sp, #12
    76a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    76a6:	bf00      	nop

000076a8 <_dtoa_r>:
    76a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    76ac:	ed2d 8b02 	vpush	{d8}
    76b0:	b08f      	sub	sp, #60	; 0x3c
    76b2:	ed8d 0b02 	vstr	d0, [sp, #8]
    76b6:	9101      	str	r1, [sp, #4]
    76b8:	6b81      	ldr	r1, [r0, #56]	; 0x38
    76ba:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    76bc:	9305      	str	r3, [sp, #20]
    76be:	ec57 6b10 	vmov	r6, r7, d0
    76c2:	4604      	mov	r4, r0
    76c4:	4693      	mov	fp, r2
    76c6:	b141      	cbz	r1, 76da <_dtoa_r+0x32>
    76c8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    76ca:	604a      	str	r2, [r1, #4]
    76cc:	2301      	movs	r3, #1
    76ce:	4093      	lsls	r3, r2
    76d0:	608b      	str	r3, [r1, #8]
    76d2:	f7fd fbf9 	bl	4ec8 <_Bfree>
    76d6:	2300      	movs	r3, #0
    76d8:	63a3      	str	r3, [r4, #56]	; 0x38
    76da:	f1b7 0800 	subs.w	r8, r7, #0
    76de:	bfb4      	ite	lt
    76e0:	2301      	movlt	r3, #1
    76e2:	2300      	movge	r3, #0
    76e4:	602b      	str	r3, [r5, #0]
    76e6:	4bbe      	ldr	r3, [pc, #760]	; (79e0 <_dtoa_r+0x338>)
    76e8:	bfbc      	itt	lt
    76ea:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
    76ee:	f8cd 800c 	strlt.w	r8, [sp, #12]
    76f2:	ea33 0308 	bics.w	r3, r3, r8
    76f6:	f000 809f 	beq.w	7838 <_dtoa_r+0x190>
    76fa:	ed9d 8b02 	vldr	d8, [sp, #8]
    76fe:	eeb5 8b40 	vcmp.f64	d8, #0.0
    7702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7706:	d111      	bne.n	772c <_dtoa_r+0x84>
    7708:	9a05      	ldr	r2, [sp, #20]
    770a:	2301      	movs	r3, #1
    770c:	6013      	str	r3, [r2, #0]
    770e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    7710:	2b00      	cmp	r3, #0
    7712:	f000 823f 	beq.w	7b94 <_dtoa_r+0x4ec>
    7716:	4bb3      	ldr	r3, [pc, #716]	; (79e4 <_dtoa_r+0x33c>)
    7718:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    771a:	6013      	str	r3, [r2, #0]
    771c:	3b01      	subs	r3, #1
    771e:	9300      	str	r3, [sp, #0]
    7720:	9800      	ldr	r0, [sp, #0]
    7722:	b00f      	add	sp, #60	; 0x3c
    7724:	ecbd 8b02 	vpop	{d8}
    7728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    772c:	aa0c      	add	r2, sp, #48	; 0x30
    772e:	a90d      	add	r1, sp, #52	; 0x34
    7730:	4620      	mov	r0, r4
    7732:	eeb0 0b48 	vmov.f64	d0, d8
    7736:	f7fd fef3 	bl	5520 <__d2b>
    773a:	ea5f 5318 	movs.w	r3, r8, lsr #20
    773e:	4605      	mov	r5, r0
    7740:	f040 8092 	bne.w	7868 <_dtoa_r+0x1c0>
    7744:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
    7748:	440b      	add	r3, r1
    774a:	f203 4232 	addw	r2, r3, #1074	; 0x432
    774e:	2a20      	cmp	r2, #32
    7750:	f340 82fa 	ble.w	7d48 <_dtoa_r+0x6a0>
    7754:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
    7758:	fa08 f802 	lsl.w	r8, r8, r2
    775c:	f203 4212 	addw	r2, r3, #1042	; 0x412
    7760:	40d6      	lsrs	r6, r2
    7762:	ea48 0206 	orr.w	r2, r8, r6
    7766:	ee07 2a10 	vmov	s14, r2
    776a:	eeb8 7b47 	vcvt.f64.u32	d7, s14
    776e:	1e58      	subs	r0, r3, #1
    7770:	ee17 6a90 	vmov	r6, s15
    7774:	ec53 2b17 	vmov	r2, r3, d7
    7778:	f04f 0a01 	mov.w	sl, #1
    777c:	f1a6 73f8 	sub.w	r3, r6, #32505856	; 0x1f00000
    7780:	ed9f 3b91 	vldr	d3, [pc, #580]	; 79c8 <_dtoa_r+0x320>
    7784:	ed9f 7b92 	vldr	d7, [pc, #584]	; 79d0 <_dtoa_r+0x328>
    7788:	ed9f 5b93 	vldr	d5, [pc, #588]	; 79d8 <_dtoa_r+0x330>
    778c:	ee06 0a90 	vmov	s13, r0
    7790:	ec43 2b12 	vmov	d2, r2, r3
    7794:	eeb8 4be6 	vcvt.f64.s32	d4, s13
    7798:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
    779c:	ee32 6b46 	vsub.f64	d6, d2, d6
    77a0:	eea6 7b03 	vfma.f64	d7, d6, d3
    77a4:	eea4 7b05 	vfma.f64	d7, d4, d5
    77a8:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    77ac:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    77b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    77b4:	ee16 7a90 	vmov	r7, s13
    77b8:	d508      	bpl.n	77cc <_dtoa_r+0x124>
    77ba:	eeb8 6be6 	vcvt.f64.s32	d6, s13
    77be:	eeb4 6b47 	vcmp.f64	d6, d7
    77c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    77c6:	bf18      	it	ne
    77c8:	f107 37ff 	addne.w	r7, r7, #4294967295
    77cc:	2f16      	cmp	r7, #22
    77ce:	f200 8145 	bhi.w	7a5c <_dtoa_r+0x3b4>
    77d2:	4b85      	ldr	r3, [pc, #532]	; (79e8 <_dtoa_r+0x340>)
    77d4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    77d8:	ed93 7b00 	vldr	d7, [r3]
    77dc:	eeb4 8bc7 	vcmpe.f64	d8, d7
    77e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    77e4:	d557      	bpl.n	7896 <_dtoa_r+0x1ee>
    77e6:	1a09      	subs	r1, r1, r0
    77e8:	2300      	movs	r3, #0
    77ea:	f1b1 0801 	subs.w	r8, r1, #1
    77ee:	f107 37ff 	add.w	r7, r7, #4294967295
    77f2:	930a      	str	r3, [sp, #40]	; 0x28
    77f4:	f100 8139 	bmi.w	7a6a <_dtoa_r+0x3c2>
    77f8:	2300      	movs	r3, #0
    77fa:	9306      	str	r3, [sp, #24]
    77fc:	2f00      	cmp	r7, #0
    77fe:	da52      	bge.n	78a6 <_dtoa_r+0x1fe>
    7800:	9b06      	ldr	r3, [sp, #24]
    7802:	9704      	str	r7, [sp, #16]
    7804:	1bdb      	subs	r3, r3, r7
    7806:	9306      	str	r3, [sp, #24]
    7808:	427b      	negs	r3, r7
    780a:	9308      	str	r3, [sp, #32]
    780c:	9b01      	ldr	r3, [sp, #4]
    780e:	2b09      	cmp	r3, #9
    7810:	f04f 0700 	mov.w	r7, #0
    7814:	d84e      	bhi.n	78b4 <_dtoa_r+0x20c>
    7816:	2b05      	cmp	r3, #5
    7818:	f340 829d 	ble.w	7d56 <_dtoa_r+0x6ae>
    781c:	3b04      	subs	r3, #4
    781e:	9301      	str	r3, [sp, #4]
    7820:	2600      	movs	r6, #0
    7822:	9b01      	ldr	r3, [sp, #4]
    7824:	1e9a      	subs	r2, r3, #2
    7826:	2a03      	cmp	r2, #3
    7828:	f200 8125 	bhi.w	7a76 <_dtoa_r+0x3ce>
    782c:	e8df f012 	tbh	[pc, r2, lsl #1]
    7830:	03a703aa 	.word	0x03a703aa
    7834:	037e039d 	.word	0x037e039d
    7838:	9a05      	ldr	r2, [sp, #20]
    783a:	f3c8 0813 	ubfx	r8, r8, #0, #20
    783e:	f242 730f 	movw	r3, #9999	; 0x270f
    7842:	ea58 0806 	orrs.w	r8, r8, r6
    7846:	6013      	str	r3, [r2, #0]
    7848:	d11e      	bne.n	7888 <_dtoa_r+0x1e0>
    784a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    784c:	2b00      	cmp	r3, #0
    784e:	f000 8591 	beq.w	8374 <_dtoa_r+0xccc>
    7852:	4b66      	ldr	r3, [pc, #408]	; (79ec <_dtoa_r+0x344>)
    7854:	9300      	str	r3, [sp, #0]
    7856:	3308      	adds	r3, #8
    7858:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    785a:	9800      	ldr	r0, [sp, #0]
    785c:	6013      	str	r3, [r2, #0]
    785e:	b00f      	add	sp, #60	; 0x3c
    7860:	ecbd 8b02 	vpop	{d8}
    7864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7868:	ee18 6a90 	vmov	r6, s17
    786c:	f3c6 0613 	ubfx	r6, r6, #0, #20
    7870:	f2a3 30ff 	subw	r0, r3, #1023	; 0x3ff
    7874:	ec53 2b18 	vmov	r2, r3, d8
    7878:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
    787c:	990c      	ldr	r1, [sp, #48]	; 0x30
    787e:	f04f 0a00 	mov.w	sl, #0
    7882:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    7886:	e77b      	b.n	7780 <_dtoa_r+0xd8>
    7888:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    788a:	2b00      	cmp	r3, #0
    788c:	f040 833b 	bne.w	7f06 <_dtoa_r+0x85e>
    7890:	4b57      	ldr	r3, [pc, #348]	; (79f0 <_dtoa_r+0x348>)
    7892:	9300      	str	r3, [sp, #0]
    7894:	e744      	b.n	7720 <_dtoa_r+0x78>
    7896:	1a09      	subs	r1, r1, r0
    7898:	2300      	movs	r3, #0
    789a:	f1b1 0801 	subs.w	r8, r1, #1
    789e:	930a      	str	r3, [sp, #40]	; 0x28
    78a0:	f100 80e3 	bmi.w	7a6a <_dtoa_r+0x3c2>
    78a4:	9306      	str	r3, [sp, #24]
    78a6:	2300      	movs	r3, #0
    78a8:	9308      	str	r3, [sp, #32]
    78aa:	9b01      	ldr	r3, [sp, #4]
    78ac:	9704      	str	r7, [sp, #16]
    78ae:	2b09      	cmp	r3, #9
    78b0:	44b8      	add	r8, r7
    78b2:	d9b0      	bls.n	7816 <_dtoa_r+0x16e>
    78b4:	2300      	movs	r3, #0
    78b6:	2601      	movs	r6, #1
    78b8:	9301      	str	r3, [sp, #4]
    78ba:	9607      	str	r6, [sp, #28]
    78bc:	f04f 39ff 	mov.w	r9, #4294967295
    78c0:	469b      	mov	fp, r3
    78c2:	2100      	movs	r1, #0
    78c4:	63e1      	str	r1, [r4, #60]	; 0x3c
    78c6:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    78ca:	4620      	mov	r0, r4
    78cc:	f7fd fad6 	bl	4e7c <_Balloc>
    78d0:	9000      	str	r0, [sp, #0]
    78d2:	2800      	cmp	r0, #0
    78d4:	f000 8540 	beq.w	8358 <_dtoa_r+0xcb0>
    78d8:	9b00      	ldr	r3, [sp, #0]
    78da:	63a3      	str	r3, [r4, #56]	; 0x38
    78dc:	f1b9 0f0e 	cmp.w	r9, #14
    78e0:	f200 80dc 	bhi.w	7a9c <_dtoa_r+0x3f4>
    78e4:	2e00      	cmp	r6, #0
    78e6:	f000 80d9 	beq.w	7a9c <_dtoa_r+0x3f4>
    78ea:	9b04      	ldr	r3, [sp, #16]
    78ec:	2b00      	cmp	r3, #0
    78ee:	f340 83de 	ble.w	80ae <_dtoa_r+0xa06>
    78f2:	4a3d      	ldr	r2, [pc, #244]	; (79e8 <_dtoa_r+0x340>)
    78f4:	f003 010f 	and.w	r1, r3, #15
    78f8:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    78fc:	ed92 7b00 	vldr	d7, [r2]
    7900:	111a      	asrs	r2, r3, #4
    7902:	05db      	lsls	r3, r3, #23
    7904:	f140 8382 	bpl.w	800c <_dtoa_r+0x964>
    7908:	493a      	ldr	r1, [pc, #232]	; (79f4 <_dtoa_r+0x34c>)
    790a:	ed91 6b08 	vldr	d6, [r1, #32]
    790e:	f002 020f 	and.w	r2, r2, #15
    7912:	2003      	movs	r0, #3
    7914:	ee88 5b06 	vdiv.f64	d5, d8, d6
    7918:	b15a      	cbz	r2, 7932 <_dtoa_r+0x28a>
    791a:	4936      	ldr	r1, [pc, #216]	; (79f4 <_dtoa_r+0x34c>)
    791c:	07d6      	lsls	r6, r2, #31
    791e:	d504      	bpl.n	792a <_dtoa_r+0x282>
    7920:	ed91 6b00 	vldr	d6, [r1]
    7924:	3001      	adds	r0, #1
    7926:	ee27 7b06 	vmul.f64	d7, d7, d6
    792a:	1052      	asrs	r2, r2, #1
    792c:	f101 0108 	add.w	r1, r1, #8
    7930:	d1f4      	bne.n	791c <_dtoa_r+0x274>
    7932:	ee85 6b07 	vdiv.f64	d6, d5, d7
    7936:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7938:	b13b      	cbz	r3, 794a <_dtoa_r+0x2a2>
    793a:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    793e:	eeb4 6bc7 	vcmpe.f64	d6, d7
    7942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7946:	f100 84ae 	bmi.w	82a6 <_dtoa_r+0xbfe>
    794a:	ee07 0a90 	vmov	s15, r0
    794e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
    7952:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    7956:	eea5 7b06 	vfma.f64	d7, d5, d6
    795a:	ee17 2a90 	vmov	r2, s15
    795e:	ec51 0b17 	vmov	r0, r1, d7
    7962:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
    7966:	f1b9 0f00 	cmp.w	r9, #0
    796a:	f000 8388 	beq.w	807e <_dtoa_r+0x9d6>
    796e:	9e04      	ldr	r6, [sp, #16]
    7970:	464a      	mov	r2, r9
    7972:	9b07      	ldr	r3, [sp, #28]
    7974:	2b00      	cmp	r3, #0
    7976:	f000 8447 	beq.w	8208 <_dtoa_r+0xb60>
    797a:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
    797e:	4b1a      	ldr	r3, [pc, #104]	; (79e8 <_dtoa_r+0x340>)
    7980:	eefd 4bc6 	vcvt.s32.f64	s9, d6
    7984:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
    7988:	eeb8 7be4 	vcvt.f64.s32	d7, s9
    798c:	ee36 7b47 	vsub.f64	d7, d6, d7
    7990:	ed1c 6b02 	vldr	d6, [ip, #-8]
    7994:	ee83 5b06 	vdiv.f64	d5, d3, d6
    7998:	ec41 0b16 	vmov	d6, r0, r1
    799c:	ee14 0a90 	vmov	r0, s9
    79a0:	ee35 5b46 	vsub.f64	d5, d5, d6
    79a4:	9900      	ldr	r1, [sp, #0]
    79a6:	eeb4 5bc7 	vcmpe.f64	d5, d7
    79aa:	3030      	adds	r0, #48	; 0x30
    79ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    79b0:	f801 0b01 	strb.w	r0, [r1], #1
    79b4:	f300 84ac 	bgt.w	8310 <_dtoa_r+0xc68>
    79b8:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
    79bc:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    79c0:	f04f 0c00 	mov.w	ip, #0
    79c4:	e031      	b.n	7a2a <_dtoa_r+0x382>
    79c6:	bf00      	nop
    79c8:	636f4361 	.word	0x636f4361
    79cc:	3fd287a7 	.word	0x3fd287a7
    79d0:	8b60c8b3 	.word	0x8b60c8b3
    79d4:	3fc68a28 	.word	0x3fc68a28
    79d8:	509f79fb 	.word	0x509f79fb
    79dc:	3fd34413 	.word	0x3fd34413
    79e0:	7ff00000 	.word	0x7ff00000
    79e4:	20000629 	.word	0x20000629
    79e8:	200002a8 	.word	0x200002a8
    79ec:	2000057c 	.word	0x2000057c
    79f0:	20000588 	.word	0x20000588
    79f4:	20000280 	.word	0x20000280
    79f8:	f10c 0c01 	add.w	ip, ip, #1
    79fc:	4594      	cmp	ip, r2
    79fe:	da4d      	bge.n	7a9c <_dtoa_r+0x3f4>
    7a00:	ee27 7b04 	vmul.f64	d7, d7, d4
    7a04:	ee25 5b04 	vmul.f64	d5, d5, d4
    7a08:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    7a0c:	ee16 3a90 	vmov	r3, s13
    7a10:	eeb8 3be6 	vcvt.f64.s32	d3, s13
    7a14:	3330      	adds	r3, #48	; 0x30
    7a16:	ee37 7b43 	vsub.f64	d7, d7, d3
    7a1a:	eeb4 7bc5 	vcmpe.f64	d7, d5
    7a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7a22:	f801 3b01 	strb.w	r3, [r1], #1
    7a26:	f100 8473 	bmi.w	8310 <_dtoa_r+0xc68>
    7a2a:	ee32 6b47 	vsub.f64	d6, d2, d7
    7a2e:	eeb4 6bc5 	vcmpe.f64	d6, d5
    7a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7a36:	d5df      	bpl.n	79f8 <_dtoa_r+0x350>
    7a38:	9a00      	ldr	r2, [sp, #0]
    7a3a:	9604      	str	r6, [sp, #16]
    7a3c:	e002      	b.n	7a44 <_dtoa_r+0x39c>
    7a3e:	428a      	cmp	r2, r1
    7a40:	f000 8450 	beq.w	82e4 <_dtoa_r+0xc3c>
    7a44:	4689      	mov	r9, r1
    7a46:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
    7a4a:	2b39      	cmp	r3, #57	; 0x39
    7a4c:	d0f7      	beq.n	7a3e <_dtoa_r+0x396>
    7a4e:	3301      	adds	r3, #1
    7a50:	b2db      	uxtb	r3, r3
    7a52:	700b      	strb	r3, [r1, #0]
    7a54:	9b04      	ldr	r3, [sp, #16]
    7a56:	3301      	adds	r3, #1
    7a58:	9304      	str	r3, [sp, #16]
    7a5a:	e155      	b.n	7d08 <_dtoa_r+0x660>
    7a5c:	1a09      	subs	r1, r1, r0
    7a5e:	2301      	movs	r3, #1
    7a60:	f1b1 0801 	subs.w	r8, r1, #1
    7a64:	930a      	str	r3, [sp, #40]	; 0x28
    7a66:	f57f aec7 	bpl.w	77f8 <_dtoa_r+0x150>
    7a6a:	f1c1 0301 	rsb	r3, r1, #1
    7a6e:	9306      	str	r3, [sp, #24]
    7a70:	f04f 0800 	mov.w	r8, #0
    7a74:	e6c2      	b.n	77fc <_dtoa_r+0x154>
    7a76:	2600      	movs	r6, #0
    7a78:	63e6      	str	r6, [r4, #60]	; 0x3c
    7a7a:	4631      	mov	r1, r6
    7a7c:	4620      	mov	r0, r4
    7a7e:	f7fd f9fd 	bl	4e7c <_Balloc>
    7a82:	9000      	str	r0, [sp, #0]
    7a84:	2800      	cmp	r0, #0
    7a86:	f000 8467 	beq.w	8358 <_dtoa_r+0xcb0>
    7a8a:	9b00      	ldr	r3, [sp, #0]
    7a8c:	63a3      	str	r3, [r4, #56]	; 0x38
    7a8e:	f04f 33ff 	mov.w	r3, #4294967295
    7a92:	930b      	str	r3, [sp, #44]	; 0x2c
    7a94:	4699      	mov	r9, r3
    7a96:	2301      	movs	r3, #1
    7a98:	46b3      	mov	fp, r6
    7a9a:	9307      	str	r3, [sp, #28]
    7a9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    7a9e:	2a00      	cmp	r2, #0
    7aa0:	db55      	blt.n	7b4e <_dtoa_r+0x4a6>
    7aa2:	9904      	ldr	r1, [sp, #16]
    7aa4:	290e      	cmp	r1, #14
    7aa6:	dc52      	bgt.n	7b4e <_dtoa_r+0x4a6>
    7aa8:	4bb7      	ldr	r3, [pc, #732]	; (7d88 <_dtoa_r+0x6e0>)
    7aaa:	f1bb 0f00 	cmp.w	fp, #0
    7aae:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    7ab2:	ed93 6b00 	vldr	d6, [r3]
    7ab6:	da15      	bge.n	7ae4 <_dtoa_r+0x43c>
    7ab8:	f1b9 0f00 	cmp.w	r9, #0
    7abc:	dc12      	bgt.n	7ae4 <_dtoa_r+0x43c>
    7abe:	f040 82f2 	bne.w	80a6 <_dtoa_r+0x9fe>
    7ac2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
    7ac6:	ee26 7b07 	vmul.f64	d7, d6, d7
    7aca:	eeb4 8bc7 	vcmpe.f64	d8, d7
    7ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7ad2:	46ca      	mov	sl, r9
    7ad4:	464e      	mov	r6, r9
    7ad6:	f200 826d 	bhi.w	7fb4 <_dtoa_r+0x90c>
    7ada:	f8dd 8000 	ldr.w	r8, [sp]
    7ade:	ea6f 0b0b 	mvn.w	fp, fp
    7ae2:	e270      	b.n	7fc6 <_dtoa_r+0x91e>
    7ae4:	ee88 7b06 	vdiv.f64	d7, d8, d6
    7ae8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    7aec:	9900      	ldr	r1, [sp, #0]
    7aee:	ee17 3a10 	vmov	r3, s14
    7af2:	f1b9 0f01 	cmp.w	r9, #1
    7af6:	f103 0330 	add.w	r3, r3, #48	; 0x30
    7afa:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
    7afe:	f801 3b01 	strb.w	r3, [r1], #1
    7b02:	eea5 8b46 	vfms.f64	d8, d5, d6
    7b06:	f000 8334 	beq.w	8172 <_dtoa_r+0xaca>
    7b0a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    7b0e:	2301      	movs	r3, #1
    7b10:	e011      	b.n	7b36 <_dtoa_r+0x48e>
    7b12:	ee88 7b06 	vdiv.f64	d7, d8, d6
    7b16:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    7b1a:	3301      	adds	r3, #1
    7b1c:	ee17 2a10 	vmov	r2, s14
    7b20:	454b      	cmp	r3, r9
    7b22:	f102 0230 	add.w	r2, r2, #48	; 0x30
    7b26:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
    7b2a:	f801 2b01 	strb.w	r2, [r1], #1
    7b2e:	eea5 8b46 	vfms.f64	d8, d5, d6
    7b32:	f000 831e 	beq.w	8172 <_dtoa_r+0xaca>
    7b36:	ee28 8b04 	vmul.f64	d8, d8, d4
    7b3a:	eeb5 8b40 	vcmp.f64	d8, #0.0
    7b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7b42:	d1e6      	bne.n	7b12 <_dtoa_r+0x46a>
    7b44:	9b04      	ldr	r3, [sp, #16]
    7b46:	3301      	adds	r3, #1
    7b48:	9304      	str	r3, [sp, #16]
    7b4a:	4689      	mov	r9, r1
    7b4c:	e0dc      	b.n	7d08 <_dtoa_r+0x660>
    7b4e:	9b07      	ldr	r3, [sp, #28]
    7b50:	b343      	cbz	r3, 7ba4 <_dtoa_r+0x4fc>
    7b52:	9b01      	ldr	r3, [sp, #4]
    7b54:	2b01      	cmp	r3, #1
    7b56:	f340 8276 	ble.w	8046 <_dtoa_r+0x99e>
    7b5a:	9b08      	ldr	r3, [sp, #32]
    7b5c:	f109 3aff 	add.w	sl, r9, #4294967295
    7b60:	4553      	cmp	r3, sl
    7b62:	f280 823f 	bge.w	7fe4 <_dtoa_r+0x93c>
    7b66:	9b08      	ldr	r3, [sp, #32]
    7b68:	f8cd a020 	str.w	sl, [sp, #32]
    7b6c:	ebaa 0203 	sub.w	r2, sl, r3
    7b70:	4417      	add	r7, r2
    7b72:	f04f 0a00 	mov.w	sl, #0
    7b76:	f1b9 0f00 	cmp.w	r9, #0
    7b7a:	f2c0 8325 	blt.w	81c8 <_dtoa_r+0xb20>
    7b7e:	9b06      	ldr	r3, [sp, #24]
    7b80:	9309      	str	r3, [sp, #36]	; 0x24
    7b82:	444b      	add	r3, r9
    7b84:	44c8      	add	r8, r9
    7b86:	9306      	str	r3, [sp, #24]
    7b88:	2101      	movs	r1, #1
    7b8a:	4620      	mov	r0, r4
    7b8c:	f7fd fa48 	bl	5020 <__i2b>
    7b90:	4606      	mov	r6, r0
    7b92:	e00c      	b.n	7bae <_dtoa_r+0x506>
    7b94:	4b7d      	ldr	r3, [pc, #500]	; (7d8c <_dtoa_r+0x6e4>)
    7b96:	9300      	str	r3, [sp, #0]
    7b98:	9800      	ldr	r0, [sp, #0]
    7b9a:	b00f      	add	sp, #60	; 0x3c
    7b9c:	ecbd 8b02 	vpop	{d8}
    7ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7ba4:	9b06      	ldr	r3, [sp, #24]
    7ba6:	f8dd a020 	ldr.w	sl, [sp, #32]
    7baa:	9e07      	ldr	r6, [sp, #28]
    7bac:	9309      	str	r3, [sp, #36]	; 0x24
    7bae:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7bb0:	b16b      	cbz	r3, 7bce <_dtoa_r+0x526>
    7bb2:	f1b8 0f00 	cmp.w	r8, #0
    7bb6:	dd0a      	ble.n	7bce <_dtoa_r+0x526>
    7bb8:	4543      	cmp	r3, r8
    7bba:	9906      	ldr	r1, [sp, #24]
    7bbc:	461a      	mov	r2, r3
    7bbe:	bfa8      	it	ge
    7bc0:	4642      	movge	r2, r8
    7bc2:	1a89      	subs	r1, r1, r2
    7bc4:	1a9b      	subs	r3, r3, r2
    7bc6:	9106      	str	r1, [sp, #24]
    7bc8:	9309      	str	r3, [sp, #36]	; 0x24
    7bca:	eba8 0802 	sub.w	r8, r8, r2
    7bce:	9b08      	ldr	r3, [sp, #32]
    7bd0:	b163      	cbz	r3, 7bec <_dtoa_r+0x544>
    7bd2:	9b07      	ldr	r3, [sp, #28]
    7bd4:	2b00      	cmp	r3, #0
    7bd6:	f000 82a7 	beq.w	8128 <_dtoa_r+0xa80>
    7bda:	f1ba 0f00 	cmp.w	sl, #0
    7bde:	f300 8204 	bgt.w	7fea <_dtoa_r+0x942>
    7be2:	9b08      	ldr	r3, [sp, #32]
    7be4:	ebb3 020a 	subs.w	r2, r3, sl
    7be8:	f040 82ff 	bne.w	81ea <_dtoa_r+0xb42>
    7bec:	2101      	movs	r1, #1
    7bee:	4620      	mov	r0, r4
    7bf0:	f7fd fa16 	bl	5020 <__i2b>
    7bf4:	2f00      	cmp	r7, #0
    7bf6:	4682      	mov	sl, r0
    7bf8:	f300 80af 	bgt.w	7d5a <_dtoa_r+0x6b2>
    7bfc:	9b01      	ldr	r3, [sp, #4]
    7bfe:	2b01      	cmp	r3, #1
    7c00:	f340 8187 	ble.w	7f12 <_dtoa_r+0x86a>
    7c04:	2300      	movs	r3, #0
    7c06:	9308      	str	r3, [sp, #32]
    7c08:	2001      	movs	r0, #1
    7c0a:	2f00      	cmp	r7, #0
    7c0c:	f040 80b1 	bne.w	7d72 <_dtoa_r+0x6ca>
    7c10:	4440      	add	r0, r8
    7c12:	f010 001f 	ands.w	r0, r0, #31
    7c16:	f000 817a 	beq.w	7f0e <_dtoa_r+0x866>
    7c1a:	f1c0 0220 	rsb	r2, r0, #32
    7c1e:	2a04      	cmp	r2, #4
    7c20:	f300 8088 	bgt.w	7d34 <_dtoa_r+0x68c>
    7c24:	f040 81f6 	bne.w	8014 <_dtoa_r+0x96c>
    7c28:	9b06      	ldr	r3, [sp, #24]
    7c2a:	2b00      	cmp	r3, #0
    7c2c:	dd05      	ble.n	7c3a <_dtoa_r+0x592>
    7c2e:	4629      	mov	r1, r5
    7c30:	461a      	mov	r2, r3
    7c32:	4620      	mov	r0, r4
    7c34:	f7fd fb30 	bl	5298 <__lshift>
    7c38:	4605      	mov	r5, r0
    7c3a:	f1b8 0f00 	cmp.w	r8, #0
    7c3e:	dd05      	ble.n	7c4c <_dtoa_r+0x5a4>
    7c40:	4651      	mov	r1, sl
    7c42:	4642      	mov	r2, r8
    7c44:	4620      	mov	r0, r4
    7c46:	f7fd fb27 	bl	5298 <__lshift>
    7c4a:	4682      	mov	sl, r0
    7c4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7c4e:	2b00      	cmp	r3, #0
    7c50:	f040 813f 	bne.w	7ed2 <_dtoa_r+0x82a>
    7c54:	f1b9 0f00 	cmp.w	r9, #0
    7c58:	f340 8125 	ble.w	7ea6 <_dtoa_r+0x7fe>
    7c5c:	9b07      	ldr	r3, [sp, #28]
    7c5e:	2b00      	cmp	r3, #0
    7c60:	f040 80a3 	bne.w	7daa <_dtoa_r+0x702>
    7c64:	9b04      	ldr	r3, [sp, #16]
    7c66:	3301      	adds	r3, #1
    7c68:	9304      	str	r3, [sp, #16]
    7c6a:	f8dd 8000 	ldr.w	r8, [sp]
    7c6e:	2701      	movs	r7, #1
    7c70:	e007      	b.n	7c82 <_dtoa_r+0x5da>
    7c72:	4629      	mov	r1, r5
    7c74:	2300      	movs	r3, #0
    7c76:	220a      	movs	r2, #10
    7c78:	4620      	mov	r0, r4
    7c7a:	f7fd f92f 	bl	4edc <__multadd>
    7c7e:	3701      	adds	r7, #1
    7c80:	4605      	mov	r5, r0
    7c82:	4651      	mov	r1, sl
    7c84:	4628      	mov	r0, r5
    7c86:	f7ff fc7b 	bl	7580 <quorem>
    7c8a:	45b9      	cmp	r9, r7
    7c8c:	f100 0030 	add.w	r0, r0, #48	; 0x30
    7c90:	f808 0b01 	strb.w	r0, [r8], #1
    7c94:	dced      	bgt.n	7c72 <_dtoa_r+0x5ca>
    7c96:	f1b9 0f00 	cmp.w	r9, #0
    7c9a:	9a00      	ldr	r2, [sp, #0]
    7c9c:	bfcc      	ite	gt
    7c9e:	46cb      	movgt	fp, r9
    7ca0:	f04f 0b01 	movle.w	fp, #1
    7ca4:	4603      	mov	r3, r0
    7ca6:	4493      	add	fp, r2
    7ca8:	2700      	movs	r7, #0
    7caa:	4629      	mov	r1, r5
    7cac:	2201      	movs	r2, #1
    7cae:	4620      	mov	r0, r4
    7cb0:	9301      	str	r3, [sp, #4]
    7cb2:	f7fd faf1 	bl	5298 <__lshift>
    7cb6:	4651      	mov	r1, sl
    7cb8:	4605      	mov	r5, r0
    7cba:	f7fd fb65 	bl	5388 <__mcmp>
    7cbe:	2800      	cmp	r0, #0
    7cc0:	f340 81af 	ble.w	8022 <_dtoa_r+0x97a>
    7cc4:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
    7cc8:	9a00      	ldr	r2, [sp, #0]
    7cca:	f10b 3bff 	add.w	fp, fp, #4294967295
    7cce:	e004      	b.n	7cda <_dtoa_r+0x632>
    7cd0:	455a      	cmp	r2, fp
    7cd2:	f000 81b1 	beq.w	8038 <_dtoa_r+0x990>
    7cd6:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
    7cda:	2b39      	cmp	r3, #57	; 0x39
    7cdc:	f10b 0901 	add.w	r9, fp, #1
    7ce0:	d0f6      	beq.n	7cd0 <_dtoa_r+0x628>
    7ce2:	3301      	adds	r3, #1
    7ce4:	f88b 3000 	strb.w	r3, [fp]
    7ce8:	4651      	mov	r1, sl
    7cea:	4620      	mov	r0, r4
    7cec:	f7fd f8ec 	bl	4ec8 <_Bfree>
    7cf0:	b156      	cbz	r6, 7d08 <_dtoa_r+0x660>
    7cf2:	b12f      	cbz	r7, 7d00 <_dtoa_r+0x658>
    7cf4:	42b7      	cmp	r7, r6
    7cf6:	d003      	beq.n	7d00 <_dtoa_r+0x658>
    7cf8:	4639      	mov	r1, r7
    7cfa:	4620      	mov	r0, r4
    7cfc:	f7fd f8e4 	bl	4ec8 <_Bfree>
    7d00:	4631      	mov	r1, r6
    7d02:	4620      	mov	r0, r4
    7d04:	f7fd f8e0 	bl	4ec8 <_Bfree>
    7d08:	4629      	mov	r1, r5
    7d0a:	4620      	mov	r0, r4
    7d0c:	f7fd f8dc 	bl	4ec8 <_Bfree>
    7d10:	2300      	movs	r3, #0
    7d12:	f889 3000 	strb.w	r3, [r9]
    7d16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    7d1a:	601a      	str	r2, [r3, #0]
    7d1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    7d1e:	2b00      	cmp	r3, #0
    7d20:	f43f acfe 	beq.w	7720 <_dtoa_r+0x78>
    7d24:	9800      	ldr	r0, [sp, #0]
    7d26:	f8c3 9000 	str.w	r9, [r3]
    7d2a:	b00f      	add	sp, #60	; 0x3c
    7d2c:	ecbd 8b02 	vpop	{d8}
    7d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7d34:	f1c0 001c 	rsb	r0, r0, #28
    7d38:	9b06      	ldr	r3, [sp, #24]
    7d3a:	4403      	add	r3, r0
    7d3c:	9306      	str	r3, [sp, #24]
    7d3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7d40:	4403      	add	r3, r0
    7d42:	9309      	str	r3, [sp, #36]	; 0x24
    7d44:	4480      	add	r8, r0
    7d46:	e76f      	b.n	7c28 <_dtoa_r+0x580>
    7d48:	f1c2 0220 	rsb	r2, r2, #32
    7d4c:	fa06 f202 	lsl.w	r2, r6, r2
    7d50:	ee07 2a10 	vmov	s14, r2
    7d54:	e509      	b.n	776a <_dtoa_r+0xc2>
    7d56:	2601      	movs	r6, #1
    7d58:	e563      	b.n	7822 <_dtoa_r+0x17a>
    7d5a:	4601      	mov	r1, r0
    7d5c:	463a      	mov	r2, r7
    7d5e:	4620      	mov	r0, r4
    7d60:	f7fd fa3a 	bl	51d8 <__pow5mult>
    7d64:	9b01      	ldr	r3, [sp, #4]
    7d66:	2b01      	cmp	r3, #1
    7d68:	4682      	mov	sl, r0
    7d6a:	f340 81c5 	ble.w	80f8 <_dtoa_r+0xa50>
    7d6e:	2300      	movs	r3, #0
    7d70:	9308      	str	r3, [sp, #32]
    7d72:	f8da 2010 	ldr.w	r2, [sl, #16]
    7d76:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
    7d7a:	6910      	ldr	r0, [r2, #16]
    7d7c:	f7fd f900 	bl	4f80 <__hi0bits>
    7d80:	f1c0 0020 	rsb	r0, r0, #32
    7d84:	e744      	b.n	7c10 <_dtoa_r+0x568>
    7d86:	bf00      	nop
    7d88:	200002a8 	.word	0x200002a8
    7d8c:	20000628 	.word	0x20000628
    7d90:	4631      	mov	r1, r6
    7d92:	2300      	movs	r3, #0
    7d94:	220a      	movs	r2, #10
    7d96:	4620      	mov	r0, r4
    7d98:	f7fd f8a0 	bl	4edc <__multadd>
    7d9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7d9e:	2b00      	cmp	r3, #0
    7da0:	4606      	mov	r6, r0
    7da2:	f340 82ce 	ble.w	8342 <_dtoa_r+0xc9a>
    7da6:	9704      	str	r7, [sp, #16]
    7da8:	4699      	mov	r9, r3
    7daa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7dac:	2b00      	cmp	r3, #0
    7dae:	dd05      	ble.n	7dbc <_dtoa_r+0x714>
    7db0:	4631      	mov	r1, r6
    7db2:	461a      	mov	r2, r3
    7db4:	4620      	mov	r0, r4
    7db6:	f7fd fa6f 	bl	5298 <__lshift>
    7dba:	4606      	mov	r6, r0
    7dbc:	9b08      	ldr	r3, [sp, #32]
    7dbe:	2b00      	cmp	r3, #0
    7dc0:	f040 81eb 	bne.w	819a <_dtoa_r+0xaf2>
    7dc4:	46b0      	mov	r8, r6
    7dc6:	9b02      	ldr	r3, [sp, #8]
    7dc8:	9f00      	ldr	r7, [sp, #0]
    7dca:	f003 0201 	and.w	r2, r3, #1
    7dce:	1e7b      	subs	r3, r7, #1
    7dd0:	444b      	add	r3, r9
    7dd2:	9308      	str	r3, [sp, #32]
    7dd4:	9b01      	ldr	r3, [sp, #4]
    7dd6:	920a      	str	r2, [sp, #40]	; 0x28
    7dd8:	4313      	orrs	r3, r2
    7dda:	9309      	str	r3, [sp, #36]	; 0x24
    7ddc:	4651      	mov	r1, sl
    7dde:	4628      	mov	r0, r5
    7de0:	f7ff fbce 	bl	7580 <quorem>
    7de4:	4631      	mov	r1, r6
    7de6:	4683      	mov	fp, r0
    7de8:	4628      	mov	r0, r5
    7dea:	f7fd facd 	bl	5388 <__mcmp>
    7dee:	4642      	mov	r2, r8
    7df0:	4651      	mov	r1, sl
    7df2:	4681      	mov	r9, r0
    7df4:	4620      	mov	r0, r4
    7df6:	f7fd fae9 	bl	53cc <__mdiff>
    7dfa:	68c2      	ldr	r2, [r0, #12]
    7dfc:	4601      	mov	r1, r0
    7dfe:	f10b 0330 	add.w	r3, fp, #48	; 0x30
    7e02:	2a00      	cmp	r2, #0
    7e04:	d142      	bne.n	7e8c <_dtoa_r+0x7e4>
    7e06:	e9cd 0306 	strd	r0, r3, [sp, #24]
    7e0a:	4628      	mov	r0, r5
    7e0c:	f7fd fabc 	bl	5388 <__mcmp>
    7e10:	9906      	ldr	r1, [sp, #24]
    7e12:	9002      	str	r0, [sp, #8]
    7e14:	4620      	mov	r0, r4
    7e16:	f7fd f857 	bl	4ec8 <_Bfree>
    7e1a:	9a02      	ldr	r2, [sp, #8]
    7e1c:	9b07      	ldr	r3, [sp, #28]
    7e1e:	b91a      	cbnz	r2, 7e28 <_dtoa_r+0x780>
    7e20:	9909      	ldr	r1, [sp, #36]	; 0x24
    7e22:	2900      	cmp	r1, #0
    7e24:	f000 827e 	beq.w	8324 <_dtoa_r+0xc7c>
    7e28:	f1b9 0f00 	cmp.w	r9, #0
    7e2c:	f2c0 8183 	blt.w	8136 <_dtoa_r+0xa8e>
    7e30:	9901      	ldr	r1, [sp, #4]
    7e32:	ea49 0901 	orr.w	r9, r9, r1
    7e36:	990a      	ldr	r1, [sp, #40]	; 0x28
    7e38:	ea51 0909 	orrs.w	r9, r1, r9
    7e3c:	f000 817b 	beq.w	8136 <_dtoa_r+0xa8e>
    7e40:	2a00      	cmp	r2, #0
    7e42:	f300 81c6 	bgt.w	81d2 <_dtoa_r+0xb2a>
    7e46:	9a08      	ldr	r2, [sp, #32]
    7e48:	703b      	strb	r3, [r7, #0]
    7e4a:	f107 0901 	add.w	r9, r7, #1
    7e4e:	4297      	cmp	r7, r2
    7e50:	46cb      	mov	fp, r9
    7e52:	f000 81c4 	beq.w	81de <_dtoa_r+0xb36>
    7e56:	4629      	mov	r1, r5
    7e58:	2300      	movs	r3, #0
    7e5a:	220a      	movs	r2, #10
    7e5c:	4620      	mov	r0, r4
    7e5e:	f7fd f83d 	bl	4edc <__multadd>
    7e62:	4546      	cmp	r6, r8
    7e64:	4605      	mov	r5, r0
    7e66:	4631      	mov	r1, r6
    7e68:	f04f 0300 	mov.w	r3, #0
    7e6c:	f04f 020a 	mov.w	r2, #10
    7e70:	4620      	mov	r0, r4
    7e72:	d012      	beq.n	7e9a <_dtoa_r+0x7f2>
    7e74:	f7fd f832 	bl	4edc <__multadd>
    7e78:	4641      	mov	r1, r8
    7e7a:	4606      	mov	r6, r0
    7e7c:	2300      	movs	r3, #0
    7e7e:	220a      	movs	r2, #10
    7e80:	4620      	mov	r0, r4
    7e82:	f7fd f82b 	bl	4edc <__multadd>
    7e86:	464f      	mov	r7, r9
    7e88:	4680      	mov	r8, r0
    7e8a:	e7a7      	b.n	7ddc <_dtoa_r+0x734>
    7e8c:	4620      	mov	r0, r4
    7e8e:	9302      	str	r3, [sp, #8]
    7e90:	f7fd f81a 	bl	4ec8 <_Bfree>
    7e94:	9b02      	ldr	r3, [sp, #8]
    7e96:	2201      	movs	r2, #1
    7e98:	e7c6      	b.n	7e28 <_dtoa_r+0x780>
    7e9a:	f7fd f81f 	bl	4edc <__multadd>
    7e9e:	464f      	mov	r7, r9
    7ea0:	4606      	mov	r6, r0
    7ea2:	4680      	mov	r8, r0
    7ea4:	e79a      	b.n	7ddc <_dtoa_r+0x734>
    7ea6:	9b01      	ldr	r3, [sp, #4]
    7ea8:	2b02      	cmp	r3, #2
    7eaa:	dc71      	bgt.n	7f90 <_dtoa_r+0x8e8>
    7eac:	9b07      	ldr	r3, [sp, #28]
    7eae:	2b00      	cmp	r3, #0
    7eb0:	f47f af7b 	bne.w	7daa <_dtoa_r+0x702>
    7eb4:	9b04      	ldr	r3, [sp, #16]
    7eb6:	4651      	mov	r1, sl
    7eb8:	3301      	adds	r3, #1
    7eba:	4628      	mov	r0, r5
    7ebc:	9304      	str	r3, [sp, #16]
    7ebe:	f7ff fb5f 	bl	7580 <quorem>
    7ec2:	f8dd b000 	ldr.w	fp, [sp]
    7ec6:	f100 0330 	add.w	r3, r0, #48	; 0x30
    7eca:	f80b 3b01 	strb.w	r3, [fp], #1
    7ece:	2700      	movs	r7, #0
    7ed0:	e6eb      	b.n	7caa <_dtoa_r+0x602>
    7ed2:	4651      	mov	r1, sl
    7ed4:	4628      	mov	r0, r5
    7ed6:	f7fd fa57 	bl	5388 <__mcmp>
    7eda:	2800      	cmp	r0, #0
    7edc:	f6bf aeba 	bge.w	7c54 <_dtoa_r+0x5ac>
    7ee0:	4629      	mov	r1, r5
    7ee2:	2300      	movs	r3, #0
    7ee4:	220a      	movs	r2, #10
    7ee6:	4620      	mov	r0, r4
    7ee8:	f7fc fff8 	bl	4edc <__multadd>
    7eec:	9b04      	ldr	r3, [sp, #16]
    7eee:	1e5f      	subs	r7, r3, #1
    7ef0:	9b07      	ldr	r3, [sp, #28]
    7ef2:	4605      	mov	r5, r0
    7ef4:	2b00      	cmp	r3, #0
    7ef6:	f47f af4b 	bne.w	7d90 <_dtoa_r+0x6e8>
    7efa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7efc:	2b00      	cmp	r3, #0
    7efe:	f340 8218 	ble.w	8332 <_dtoa_r+0xc8a>
    7f02:	4699      	mov	r9, r3
    7f04:	e6b1      	b.n	7c6a <_dtoa_r+0x5c2>
    7f06:	4bbc      	ldr	r3, [pc, #752]	; (81f8 <_dtoa_r+0xb50>)
    7f08:	9300      	str	r3, [sp, #0]
    7f0a:	3303      	adds	r3, #3
    7f0c:	e4a4      	b.n	7858 <_dtoa_r+0x1b0>
    7f0e:	201c      	movs	r0, #28
    7f10:	e712      	b.n	7d38 <_dtoa_r+0x690>
    7f12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    7f16:	2800      	cmp	r0, #0
    7f18:	f47f ae74 	bne.w	7c04 <_dtoa_r+0x55c>
    7f1c:	f3c1 0213 	ubfx	r2, r1, #0, #20
    7f20:	2a00      	cmp	r2, #0
    7f22:	f000 80f4 	beq.w	810e <_dtoa_r+0xa66>
    7f26:	9b02      	ldr	r3, [sp, #8]
    7f28:	9308      	str	r3, [sp, #32]
    7f2a:	e66d      	b.n	7c08 <_dtoa_r+0x560>
    7f2c:	2301      	movs	r3, #1
    7f2e:	9307      	str	r3, [sp, #28]
    7f30:	9b04      	ldr	r3, [sp, #16]
    7f32:	445b      	add	r3, fp
    7f34:	f103 0901 	add.w	r9, r3, #1
    7f38:	f1b9 0f01 	cmp.w	r9, #1
    7f3c:	46cc      	mov	ip, r9
    7f3e:	930b      	str	r3, [sp, #44]	; 0x2c
    7f40:	bfb8      	it	lt
    7f42:	f04f 0c01 	movlt.w	ip, #1
    7f46:	2100      	movs	r1, #0
    7f48:	f1bc 0f17 	cmp.w	ip, #23
    7f4c:	63e1      	str	r1, [r4, #60]	; 0x3c
    7f4e:	f77f acbc 	ble.w	78ca <_dtoa_r+0x222>
    7f52:	2001      	movs	r0, #1
    7f54:	2204      	movs	r2, #4
    7f56:	0052      	lsls	r2, r2, #1
    7f58:	f102 0314 	add.w	r3, r2, #20
    7f5c:	4563      	cmp	r3, ip
    7f5e:	4601      	mov	r1, r0
    7f60:	f100 0001 	add.w	r0, r0, #1
    7f64:	d9f7      	bls.n	7f56 <_dtoa_r+0x8ae>
    7f66:	63e1      	str	r1, [r4, #60]	; 0x3c
    7f68:	e4af      	b.n	78ca <_dtoa_r+0x222>
    7f6a:	2301      	movs	r3, #1
    7f6c:	9307      	str	r3, [sp, #28]
    7f6e:	f1bb 0f00 	cmp.w	fp, #0
    7f72:	dd52      	ble.n	801a <_dtoa_r+0x972>
    7f74:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
    7f78:	46d9      	mov	r9, fp
    7f7a:	46dc      	mov	ip, fp
    7f7c:	e7e3      	b.n	7f46 <_dtoa_r+0x89e>
    7f7e:	2300      	movs	r3, #0
    7f80:	9307      	str	r3, [sp, #28]
    7f82:	e7d5      	b.n	7f30 <_dtoa_r+0x888>
    7f84:	2300      	movs	r3, #0
    7f86:	9307      	str	r3, [sp, #28]
    7f88:	e7f1      	b.n	7f6e <_dtoa_r+0x8c6>
    7f8a:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    7f8e:	9704      	str	r7, [sp, #16]
    7f90:	f1b9 0f00 	cmp.w	r9, #0
    7f94:	f47f ada1 	bne.w	7ada <_dtoa_r+0x432>
    7f98:	4651      	mov	r1, sl
    7f9a:	464b      	mov	r3, r9
    7f9c:	2205      	movs	r2, #5
    7f9e:	4620      	mov	r0, r4
    7fa0:	f7fc ff9c 	bl	4edc <__multadd>
    7fa4:	4601      	mov	r1, r0
    7fa6:	4682      	mov	sl, r0
    7fa8:	4628      	mov	r0, r5
    7faa:	f7fd f9ed 	bl	5388 <__mcmp>
    7fae:	2800      	cmp	r0, #0
    7fb0:	f77f ad93 	ble.w	7ada <_dtoa_r+0x432>
    7fb4:	9b04      	ldr	r3, [sp, #16]
    7fb6:	f103 0b01 	add.w	fp, r3, #1
    7fba:	9b00      	ldr	r3, [sp, #0]
    7fbc:	2231      	movs	r2, #49	; 0x31
    7fbe:	4698      	mov	r8, r3
    7fc0:	f803 2b01 	strb.w	r2, [r3], #1
    7fc4:	9300      	str	r3, [sp, #0]
    7fc6:	4651      	mov	r1, sl
    7fc8:	4620      	mov	r0, r4
    7fca:	f7fc ff7d 	bl	4ec8 <_Bfree>
    7fce:	f10b 0301 	add.w	r3, fp, #1
    7fd2:	f8dd 9000 	ldr.w	r9, [sp]
    7fd6:	9304      	str	r3, [sp, #16]
    7fd8:	f8cd 8000 	str.w	r8, [sp]
    7fdc:	2e00      	cmp	r6, #0
    7fde:	f47f ae8f 	bne.w	7d00 <_dtoa_r+0x658>
    7fe2:	e691      	b.n	7d08 <_dtoa_r+0x660>
    7fe4:	eba3 0a0a 	sub.w	sl, r3, sl
    7fe8:	e5c5      	b.n	7b76 <_dtoa_r+0x4ce>
    7fea:	4631      	mov	r1, r6
    7fec:	4652      	mov	r2, sl
    7fee:	4620      	mov	r0, r4
    7ff0:	f7fd f8f2 	bl	51d8 <__pow5mult>
    7ff4:	462a      	mov	r2, r5
    7ff6:	4601      	mov	r1, r0
    7ff8:	4606      	mov	r6, r0
    7ffa:	4620      	mov	r0, r4
    7ffc:	f7fd f83e 	bl	507c <__multiply>
    8000:	4629      	mov	r1, r5
    8002:	4605      	mov	r5, r0
    8004:	4620      	mov	r0, r4
    8006:	f7fc ff5f 	bl	4ec8 <_Bfree>
    800a:	e5ea      	b.n	7be2 <_dtoa_r+0x53a>
    800c:	2002      	movs	r0, #2
    800e:	eeb0 5b48 	vmov.f64	d5, d8
    8012:	e481      	b.n	7918 <_dtoa_r+0x270>
    8014:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
    8018:	e68e      	b.n	7d38 <_dtoa_r+0x690>
    801a:	f04f 0b01 	mov.w	fp, #1
    801e:	46d9      	mov	r9, fp
    8020:	e44f      	b.n	78c2 <_dtoa_r+0x21a>
    8022:	d103      	bne.n	802c <_dtoa_r+0x984>
    8024:	9b01      	ldr	r3, [sp, #4]
    8026:	07db      	lsls	r3, r3, #31
    8028:	f53f ae4c 	bmi.w	7cc4 <_dtoa_r+0x61c>
    802c:	46d9      	mov	r9, fp
    802e:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
    8032:	2b30      	cmp	r3, #48	; 0x30
    8034:	d0fa      	beq.n	802c <_dtoa_r+0x984>
    8036:	e657      	b.n	7ce8 <_dtoa_r+0x640>
    8038:	9b04      	ldr	r3, [sp, #16]
    803a:	9a00      	ldr	r2, [sp, #0]
    803c:	3301      	adds	r3, #1
    803e:	9304      	str	r3, [sp, #16]
    8040:	2331      	movs	r3, #49	; 0x31
    8042:	7013      	strb	r3, [r2, #0]
    8044:	e650      	b.n	7ce8 <_dtoa_r+0x640>
    8046:	f1ba 0f00 	cmp.w	sl, #0
    804a:	f000 8123 	beq.w	8294 <_dtoa_r+0xbec>
    804e:	f202 4233 	addw	r2, r2, #1075	; 0x433
    8052:	9b06      	ldr	r3, [sp, #24]
    8054:	9309      	str	r3, [sp, #36]	; 0x24
    8056:	4413      	add	r3, r2
    8058:	f8dd a020 	ldr.w	sl, [sp, #32]
    805c:	9306      	str	r3, [sp, #24]
    805e:	4490      	add	r8, r2
    8060:	e592      	b.n	7b88 <_dtoa_r+0x4e0>
    8062:	ee07 0a90 	vmov	s15, r0
    8066:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
    806a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    806e:	eea6 5b07 	vfma.f64	d5, d6, d7
    8072:	ee15 2a90 	vmov	r2, s11
    8076:	ec51 0b15 	vmov	r0, r1, d5
    807a:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
    807e:	ec41 0b15 	vmov	d5, r0, r1
    8082:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
    8086:	ee36 7b47 	vsub.f64	d7, d6, d7
    808a:	eeb4 7bc5 	vcmpe.f64	d7, d5
    808e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8092:	f300 8137 	bgt.w	8304 <_dtoa_r+0xc5c>
    8096:	eeb1 5b45 	vneg.f64	d5, d5
    809a:	eeb4 7bc5 	vcmpe.f64	d7, d5
    809e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    80a2:	f57f acfb 	bpl.w	7a9c <_dtoa_r+0x3f4>
    80a6:	f04f 0a00 	mov.w	sl, #0
    80aa:	4656      	mov	r6, sl
    80ac:	e515      	b.n	7ada <_dtoa_r+0x432>
    80ae:	f000 80f5 	beq.w	829c <_dtoa_r+0xbf4>
    80b2:	9b04      	ldr	r3, [sp, #16]
    80b4:	4951      	ldr	r1, [pc, #324]	; (81fc <_dtoa_r+0xb54>)
    80b6:	425a      	negs	r2, r3
    80b8:	f002 000f 	and.w	r0, r2, #15
    80bc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    80c0:	ed91 6b00 	vldr	d6, [r1]
    80c4:	1112      	asrs	r2, r2, #4
    80c6:	ee28 6b06 	vmul.f64	d6, d8, d6
    80ca:	f000 8142 	beq.w	8352 <_dtoa_r+0xcaa>
    80ce:	eeb0 7b46 	vmov.f64	d7, d6
    80d2:	494b      	ldr	r1, [pc, #300]	; (8200 <_dtoa_r+0xb58>)
    80d4:	2600      	movs	r6, #0
    80d6:	2002      	movs	r0, #2
    80d8:	07d3      	lsls	r3, r2, #31
    80da:	d505      	bpl.n	80e8 <_dtoa_r+0xa40>
    80dc:	ed91 5b00 	vldr	d5, [r1]
    80e0:	3001      	adds	r0, #1
    80e2:	2601      	movs	r6, #1
    80e4:	ee27 7b05 	vmul.f64	d7, d7, d5
    80e8:	1052      	asrs	r2, r2, #1
    80ea:	f101 0108 	add.w	r1, r1, #8
    80ee:	d1f3      	bne.n	80d8 <_dtoa_r+0xa30>
    80f0:	2e00      	cmp	r6, #0
    80f2:	fe06 6b07 	vseleq.f64	d6, d6, d7
    80f6:	e41e      	b.n	7936 <_dtoa_r+0x28e>
    80f8:	9b02      	ldr	r3, [sp, #8]
    80fa:	2b00      	cmp	r3, #0
    80fc:	f47f ae37 	bne.w	7d6e <_dtoa_r+0x6c6>
    8100:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    8104:	f3c1 0213 	ubfx	r2, r1, #0, #20
    8108:	2a00      	cmp	r2, #0
    810a:	f040 8137 	bne.w	837c <_dtoa_r+0xcd4>
    810e:	4a3d      	ldr	r2, [pc, #244]	; (8204 <_dtoa_r+0xb5c>)
    8110:	400a      	ands	r2, r1
    8112:	2a00      	cmp	r2, #0
    8114:	f000 80fa 	beq.w	830c <_dtoa_r+0xc64>
    8118:	9b06      	ldr	r3, [sp, #24]
    811a:	3301      	adds	r3, #1
    811c:	9306      	str	r3, [sp, #24]
    811e:	2301      	movs	r3, #1
    8120:	f108 0801 	add.w	r8, r8, #1
    8124:	9308      	str	r3, [sp, #32]
    8126:	e56f      	b.n	7c08 <_dtoa_r+0x560>
    8128:	4629      	mov	r1, r5
    812a:	9a08      	ldr	r2, [sp, #32]
    812c:	4620      	mov	r0, r4
    812e:	f7fd f853 	bl	51d8 <__pow5mult>
    8132:	4605      	mov	r5, r0
    8134:	e55a      	b.n	7bec <_dtoa_r+0x544>
    8136:	2a00      	cmp	r2, #0
    8138:	dd12      	ble.n	8160 <_dtoa_r+0xab8>
    813a:	4629      	mov	r1, r5
    813c:	2201      	movs	r2, #1
    813e:	4620      	mov	r0, r4
    8140:	9301      	str	r3, [sp, #4]
    8142:	f7fd f8a9 	bl	5298 <__lshift>
    8146:	4651      	mov	r1, sl
    8148:	4605      	mov	r5, r0
    814a:	f7fd f91d 	bl	5388 <__mcmp>
    814e:	2800      	cmp	r0, #0
    8150:	9b01      	ldr	r3, [sp, #4]
    8152:	f340 80e1 	ble.w	8318 <_dtoa_r+0xc70>
    8156:	2b39      	cmp	r3, #57	; 0x39
    8158:	f000 80ca 	beq.w	82f0 <_dtoa_r+0xc48>
    815c:	f10b 0331 	add.w	r3, fp, #49	; 0x31
    8160:	46b9      	mov	r9, r7
    8162:	f809 3b01 	strb.w	r3, [r9], #1
    8166:	9b04      	ldr	r3, [sp, #16]
    8168:	3301      	adds	r3, #1
    816a:	4637      	mov	r7, r6
    816c:	9304      	str	r3, [sp, #16]
    816e:	4646      	mov	r6, r8
    8170:	e5ba      	b.n	7ce8 <_dtoa_r+0x640>
    8172:	ee38 8b08 	vadd.f64	d8, d8, d8
    8176:	eeb4 8bc6 	vcmpe.f64	d8, d6
    817a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    817e:	dc0a      	bgt.n	8196 <_dtoa_r+0xaee>
    8180:	eeb4 8b46 	vcmp.f64	d8, d6
    8184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8188:	f47f acdc 	bne.w	7b44 <_dtoa_r+0x49c>
    818c:	ee17 3a10 	vmov	r3, s14
    8190:	07d8      	lsls	r0, r3, #31
    8192:	f57f acd7 	bpl.w	7b44 <_dtoa_r+0x49c>
    8196:	9a00      	ldr	r2, [sp, #0]
    8198:	e454      	b.n	7a44 <_dtoa_r+0x39c>
    819a:	6871      	ldr	r1, [r6, #4]
    819c:	4620      	mov	r0, r4
    819e:	f7fc fe6d 	bl	4e7c <_Balloc>
    81a2:	4607      	mov	r7, r0
    81a4:	2800      	cmp	r0, #0
    81a6:	f000 80de 	beq.w	8366 <_dtoa_r+0xcbe>
    81aa:	6933      	ldr	r3, [r6, #16]
    81ac:	3302      	adds	r3, #2
    81ae:	009a      	lsls	r2, r3, #2
    81b0:	f106 010c 	add.w	r1, r6, #12
    81b4:	300c      	adds	r0, #12
    81b6:	f7f9 fbc5 	bl	1944 <memcpy>
    81ba:	4639      	mov	r1, r7
    81bc:	2201      	movs	r2, #1
    81be:	4620      	mov	r0, r4
    81c0:	f7fd f86a 	bl	5298 <__lshift>
    81c4:	4680      	mov	r8, r0
    81c6:	e5fe      	b.n	7dc6 <_dtoa_r+0x71e>
    81c8:	9b06      	ldr	r3, [sp, #24]
    81ca:	eba3 0309 	sub.w	r3, r3, r9
    81ce:	9309      	str	r3, [sp, #36]	; 0x24
    81d0:	e4da      	b.n	7b88 <_dtoa_r+0x4e0>
    81d2:	2b39      	cmp	r3, #57	; 0x39
    81d4:	f000 808c 	beq.w	82f0 <_dtoa_r+0xc48>
    81d8:	46b9      	mov	r9, r7
    81da:	3301      	adds	r3, #1
    81dc:	e7c1      	b.n	8162 <_dtoa_r+0xaba>
    81de:	9a04      	ldr	r2, [sp, #16]
    81e0:	3201      	adds	r2, #1
    81e2:	4637      	mov	r7, r6
    81e4:	9204      	str	r2, [sp, #16]
    81e6:	4646      	mov	r6, r8
    81e8:	e55f      	b.n	7caa <_dtoa_r+0x602>
    81ea:	4629      	mov	r1, r5
    81ec:	4620      	mov	r0, r4
    81ee:	f7fc fff3 	bl	51d8 <__pow5mult>
    81f2:	4605      	mov	r5, r0
    81f4:	e4fa      	b.n	7bec <_dtoa_r+0x544>
    81f6:	bf00      	nop
    81f8:	20000588 	.word	0x20000588
    81fc:	200002a8 	.word	0x200002a8
    8200:	20000280 	.word	0x20000280
    8204:	7ff00000 	.word	0x7ff00000
    8208:	4b5e      	ldr	r3, [pc, #376]	; (8384 <_dtoa_r+0xcdc>)
    820a:	eefd 5bc6 	vcvt.s32.f64	s11, d6
    820e:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
    8212:	ed1c 3b02 	vldr	d3, [ip, #-8]
    8216:	eeb8 7be5 	vcvt.f64.s32	d7, s11
    821a:	ee36 7b47 	vsub.f64	d7, d6, d7
    821e:	ec41 0b16 	vmov	d6, r0, r1
    8222:	ee15 1a90 	vmov	r1, s11
    8226:	ee23 3b06 	vmul.f64	d3, d3, d6
    822a:	9800      	ldr	r0, [sp, #0]
    822c:	3130      	adds	r1, #48	; 0x30
    822e:	2a01      	cmp	r2, #1
    8230:	f800 1b01 	strb.w	r1, [r0], #1
    8234:	f000 8083 	beq.w	833e <_dtoa_r+0xc96>
    8238:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    823c:	9b00      	ldr	r3, [sp, #0]
    823e:	1899      	adds	r1, r3, r2
    8240:	ee27 7b04 	vmul.f64	d7, d7, d4
    8244:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    8248:	ee16 3a90 	vmov	r3, s13
    824c:	3330      	adds	r3, #48	; 0x30
    824e:	f800 3b01 	strb.w	r3, [r0], #1
    8252:	4281      	cmp	r1, r0
    8254:	eeb8 5be6 	vcvt.f64.s32	d5, s13
    8258:	ee37 7b45 	vsub.f64	d7, d7, d5
    825c:	d1f0      	bne.n	8240 <_dtoa_r+0xb98>
    825e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    8262:	ee33 5b06 	vadd.f64	d5, d3, d6
    8266:	eeb4 5bc7 	vcmpe.f64	d5, d7
    826a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    826e:	f53f abe3 	bmi.w	7a38 <_dtoa_r+0x390>
    8272:	ee36 6b43 	vsub.f64	d6, d6, d3
    8276:	eeb4 6bc7 	vcmpe.f64	d6, d7
    827a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    827e:	f77f ac0d 	ble.w	7a9c <_dtoa_r+0x3f4>
    8282:	4689      	mov	r9, r1
    8284:	3901      	subs	r1, #1
    8286:	f819 3c01 	ldrb.w	r3, [r9, #-1]
    828a:	2b30      	cmp	r3, #48	; 0x30
    828c:	d0f9      	beq.n	8282 <_dtoa_r+0xbda>
    828e:	1c73      	adds	r3, r6, #1
    8290:	9304      	str	r3, [sp, #16]
    8292:	e539      	b.n	7d08 <_dtoa_r+0x660>
    8294:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8296:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
    829a:	e6da      	b.n	8052 <_dtoa_r+0x9aa>
    829c:	2002      	movs	r0, #2
    829e:	eeb0 6b48 	vmov.f64	d6, d8
    82a2:	f7ff bb48 	b.w	7936 <_dtoa_r+0x28e>
    82a6:	f1b9 0f00 	cmp.w	r9, #0
    82aa:	f43f aeda 	beq.w	8062 <_dtoa_r+0x9ba>
    82ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    82b0:	2a00      	cmp	r2, #0
    82b2:	f77f abf3 	ble.w	7a9c <_dtoa_r+0x3f4>
    82b6:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    82ba:	ee26 6b04 	vmul.f64	d6, d6, d4
    82be:	3001      	adds	r0, #1
    82c0:	ee07 0a90 	vmov	s15, r0
    82c4:	9b04      	ldr	r3, [sp, #16]
    82c6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
    82ca:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    82ce:	eea6 7b05 	vfma.f64	d7, d6, d5
    82d2:	ee17 ca90 	vmov	ip, s15
    82d6:	ec51 0b17 	vmov	r0, r1, d7
    82da:	1e5e      	subs	r6, r3, #1
    82dc:	f1ac 7150 	sub.w	r1, ip, #54525952	; 0x3400000
    82e0:	f7ff bb47 	b.w	7972 <_dtoa_r+0x2ca>
    82e4:	9b04      	ldr	r3, [sp, #16]
    82e6:	3301      	adds	r3, #1
    82e8:	9304      	str	r3, [sp, #16]
    82ea:	2331      	movs	r3, #49	; 0x31
    82ec:	f7ff bbb1 	b.w	7a52 <_dtoa_r+0x3aa>
    82f0:	9b04      	ldr	r3, [sp, #16]
    82f2:	46bb      	mov	fp, r7
    82f4:	3301      	adds	r3, #1
    82f6:	9304      	str	r3, [sp, #16]
    82f8:	2339      	movs	r3, #57	; 0x39
    82fa:	4637      	mov	r7, r6
    82fc:	f80b 3b01 	strb.w	r3, [fp], #1
    8300:	4646      	mov	r6, r8
    8302:	e4e1      	b.n	7cc8 <_dtoa_r+0x620>
    8304:	f04f 0a00 	mov.w	sl, #0
    8308:	4656      	mov	r6, sl
    830a:	e653      	b.n	7fb4 <_dtoa_r+0x90c>
    830c:	9208      	str	r2, [sp, #32]
    830e:	e47b      	b.n	7c08 <_dtoa_r+0x560>
    8310:	1c73      	adds	r3, r6, #1
    8312:	9304      	str	r3, [sp, #16]
    8314:	4689      	mov	r9, r1
    8316:	e4f7      	b.n	7d08 <_dtoa_r+0x660>
    8318:	f47f af22 	bne.w	8160 <_dtoa_r+0xab8>
    831c:	07da      	lsls	r2, r3, #31
    831e:	f57f af1f 	bpl.w	8160 <_dtoa_r+0xab8>
    8322:	e718      	b.n	8156 <_dtoa_r+0xaae>
    8324:	2b39      	cmp	r3, #57	; 0x39
    8326:	d0e3      	beq.n	82f0 <_dtoa_r+0xc48>
    8328:	f1b9 0f00 	cmp.w	r9, #0
    832c:	f73f af16 	bgt.w	815c <_dtoa_r+0xab4>
    8330:	e716      	b.n	8160 <_dtoa_r+0xab8>
    8332:	9b01      	ldr	r3, [sp, #4]
    8334:	2b02      	cmp	r3, #2
    8336:	f73f ae28 	bgt.w	7f8a <_dtoa_r+0x8e2>
    833a:	9704      	str	r7, [sp, #16]
    833c:	e5ba      	b.n	7eb4 <_dtoa_r+0x80c>
    833e:	4601      	mov	r1, r0
    8340:	e78d      	b.n	825e <_dtoa_r+0xbb6>
    8342:	9b01      	ldr	r3, [sp, #4]
    8344:	2b02      	cmp	r3, #2
    8346:	f73f ae20 	bgt.w	7f8a <_dtoa_r+0x8e2>
    834a:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    834e:	9704      	str	r7, [sp, #16]
    8350:	e52b      	b.n	7daa <_dtoa_r+0x702>
    8352:	2002      	movs	r0, #2
    8354:	f7ff baef 	b.w	7936 <_dtoa_r+0x28e>
    8358:	4b0b      	ldr	r3, [pc, #44]	; (8388 <_dtoa_r+0xce0>)
    835a:	480c      	ldr	r0, [pc, #48]	; (838c <_dtoa_r+0xce4>)
    835c:	2200      	movs	r2, #0
    835e:	f240 11af 	movw	r1, #431	; 0x1af
    8362:	f7ff f8b1 	bl	74c8 <__assert_func>
    8366:	4b08      	ldr	r3, [pc, #32]	; (8388 <_dtoa_r+0xce0>)
    8368:	4808      	ldr	r0, [pc, #32]	; (838c <_dtoa_r+0xce4>)
    836a:	463a      	mov	r2, r7
    836c:	f240 21ef 	movw	r1, #751	; 0x2ef
    8370:	f7ff f8aa 	bl	74c8 <__assert_func>
    8374:	4b06      	ldr	r3, [pc, #24]	; (8390 <_dtoa_r+0xce8>)
    8376:	9300      	str	r3, [sp, #0]
    8378:	f7ff b9d2 	b.w	7720 <_dtoa_r+0x78>
    837c:	9b02      	ldr	r3, [sp, #8]
    837e:	9308      	str	r3, [sp, #32]
    8380:	e4f7      	b.n	7d72 <_dtoa_r+0x6ca>
    8382:	bf00      	nop
    8384:	200002a8 	.word	0x200002a8
    8388:	20000408 	.word	0x20000408
    838c:	2000058c 	.word	0x2000058c
    8390:	2000057c 	.word	0x2000057c

00008394 <_wcrtomb_r>:
    8394:	b570      	push	{r4, r5, r6, lr}
    8396:	4605      	mov	r5, r0
    8398:	b084      	sub	sp, #16
    839a:	b15b      	cbz	r3, 83b4 <_wcrtomb_r+0x20>
    839c:	461c      	mov	r4, r3
    839e:	b169      	cbz	r1, 83bc <_wcrtomb_r+0x28>
    83a0:	4b0e      	ldr	r3, [pc, #56]	; (83dc <_wcrtomb_r+0x48>)
    83a2:	4628      	mov	r0, r5
    83a4:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
    83a8:	4623      	mov	r3, r4
    83aa:	47b0      	blx	r6
    83ac:	1c43      	adds	r3, r0, #1
    83ae:	d00f      	beq.n	83d0 <_wcrtomb_r+0x3c>
    83b0:	b004      	add	sp, #16
    83b2:	bd70      	pop	{r4, r5, r6, pc}
    83b4:	f500 7482 	add.w	r4, r0, #260	; 0x104
    83b8:	2900      	cmp	r1, #0
    83ba:	d1f1      	bne.n	83a0 <_wcrtomb_r+0xc>
    83bc:	4a07      	ldr	r2, [pc, #28]	; (83dc <_wcrtomb_r+0x48>)
    83be:	4623      	mov	r3, r4
    83c0:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
    83c4:	4628      	mov	r0, r5
    83c6:	460a      	mov	r2, r1
    83c8:	a901      	add	r1, sp, #4
    83ca:	47b0      	blx	r6
    83cc:	1c43      	adds	r3, r0, #1
    83ce:	d1ef      	bne.n	83b0 <_wcrtomb_r+0x1c>
    83d0:	2200      	movs	r2, #0
    83d2:	238a      	movs	r3, #138	; 0x8a
    83d4:	6022      	str	r2, [r4, #0]
    83d6:	602b      	str	r3, [r5, #0]
    83d8:	b004      	add	sp, #16
    83da:	bd70      	pop	{r4, r5, r6, pc}
    83dc:	200010f8 	.word	0x200010f8

000083e0 <_wcsrtombs_r>:
    83e0:	b510      	push	{r4, lr}
    83e2:	b082      	sub	sp, #8
    83e4:	9c04      	ldr	r4, [sp, #16]
    83e6:	e9cd 3400 	strd	r3, r4, [sp]
    83ea:	f04f 33ff 	mov.w	r3, #4294967295
    83ee:	f001 fbc7 	bl	9b80 <_wcsnrtombs_r>
    83f2:	b002      	add	sp, #8
    83f4:	bd10      	pop	{r4, pc}
    83f6:	bf00      	nop

000083f8 <fiprintf>:
    83f8:	b40e      	push	{r1, r2, r3}
    83fa:	b510      	push	{r4, lr}
    83fc:	b083      	sub	sp, #12
    83fe:	ab05      	add	r3, sp, #20
    8400:	4c06      	ldr	r4, [pc, #24]	; (841c <fiprintf+0x24>)
    8402:	f853 2b04 	ldr.w	r2, [r3], #4
    8406:	9301      	str	r3, [sp, #4]
    8408:	4601      	mov	r1, r0
    840a:	6820      	ldr	r0, [r4, #0]
    840c:	f000 f8c4 	bl	8598 <_vfiprintf_r>
    8410:	b003      	add	sp, #12
    8412:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8416:	b003      	add	sp, #12
    8418:	4770      	bx	lr
    841a:	bf00      	nop
    841c:	20001680 	.word	0x20001680

00008420 <__ssprint_r>:
    8420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8424:	6893      	ldr	r3, [r2, #8]
    8426:	6817      	ldr	r7, [r2, #0]
    8428:	b083      	sub	sp, #12
    842a:	4692      	mov	sl, r2
    842c:	2b00      	cmp	r3, #0
    842e:	d070      	beq.n	8512 <__ssprint_r+0xf2>
    8430:	4681      	mov	r9, r0
    8432:	688a      	ldr	r2, [r1, #8]
    8434:	6808      	ldr	r0, [r1, #0]
    8436:	460c      	mov	r4, r1
    8438:	3708      	adds	r7, #8
    843a:	e043      	b.n	84c4 <__ssprint_r+0xa4>
    843c:	89a3      	ldrh	r3, [r4, #12]
    843e:	f413 6f90 	tst.w	r3, #1152	; 0x480
    8442:	d02e      	beq.n	84a2 <__ssprint_r+0x82>
    8444:	e9d4 1604 	ldrd	r1, r6, [r4, #16]
    8448:	eba0 0801 	sub.w	r8, r0, r1
    844c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    8450:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
    8454:	f108 0001 	add.w	r0, r8, #1
    8458:	1076      	asrs	r6, r6, #1
    845a:	4428      	add	r0, r5
    845c:	42b0      	cmp	r0, r6
    845e:	4632      	mov	r2, r6
    8460:	bf84      	itt	hi
    8462:	4606      	movhi	r6, r0
    8464:	4632      	movhi	r2, r6
    8466:	055b      	lsls	r3, r3, #21
    8468:	d537      	bpl.n	84da <__ssprint_r+0xba>
    846a:	4611      	mov	r1, r2
    846c:	4648      	mov	r0, r9
    846e:	f7fb f81f 	bl	34b0 <_malloc_r>
    8472:	9001      	str	r0, [sp, #4]
    8474:	2800      	cmp	r0, #0
    8476:	d03a      	beq.n	84ee <__ssprint_r+0xce>
    8478:	4642      	mov	r2, r8
    847a:	6921      	ldr	r1, [r4, #16]
    847c:	f7f9 fa62 	bl	1944 <memcpy>
    8480:	89a2      	ldrh	r2, [r4, #12]
    8482:	9b01      	ldr	r3, [sp, #4]
    8484:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
    8488:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    848c:	81a2      	strh	r2, [r4, #12]
    848e:	eba6 0208 	sub.w	r2, r6, r8
    8492:	eb03 0008 	add.w	r0, r3, r8
    8496:	6166      	str	r6, [r4, #20]
    8498:	60a2      	str	r2, [r4, #8]
    849a:	6123      	str	r3, [r4, #16]
    849c:	6020      	str	r0, [r4, #0]
    849e:	462e      	mov	r6, r5
    84a0:	46a8      	mov	r8, r5
    84a2:	4642      	mov	r2, r8
    84a4:	4659      	mov	r1, fp
    84a6:	f7fb ff0f 	bl	42c8 <memmove>
    84aa:	f8da 3008 	ldr.w	r3, [sl, #8]
    84ae:	68a2      	ldr	r2, [r4, #8]
    84b0:	6820      	ldr	r0, [r4, #0]
    84b2:	1b92      	subs	r2, r2, r6
    84b4:	4440      	add	r0, r8
    84b6:	1b5b      	subs	r3, r3, r5
    84b8:	60a2      	str	r2, [r4, #8]
    84ba:	6020      	str	r0, [r4, #0]
    84bc:	f8ca 3008 	str.w	r3, [sl, #8]
    84c0:	b33b      	cbz	r3, 8512 <__ssprint_r+0xf2>
    84c2:	3708      	adds	r7, #8
    84c4:	e957 b502 	ldrd	fp, r5, [r7, #-8]
    84c8:	2d00      	cmp	r5, #0
    84ca:	d0fa      	beq.n	84c2 <__ssprint_r+0xa2>
    84cc:	42aa      	cmp	r2, r5
    84ce:	4616      	mov	r6, r2
    84d0:	4690      	mov	r8, r2
    84d2:	d9b3      	bls.n	843c <__ssprint_r+0x1c>
    84d4:	462e      	mov	r6, r5
    84d6:	46a8      	mov	r8, r5
    84d8:	e7e3      	b.n	84a2 <__ssprint_r+0x82>
    84da:	4648      	mov	r0, r9
    84dc:	f7fb fab0 	bl	3a40 <_realloc_r>
    84e0:	4603      	mov	r3, r0
    84e2:	2800      	cmp	r0, #0
    84e4:	d1d3      	bne.n	848e <__ssprint_r+0x6e>
    84e6:	6921      	ldr	r1, [r4, #16]
    84e8:	4648      	mov	r0, r9
    84ea:	f7fc fbab 	bl	4c44 <_free_r>
    84ee:	89a3      	ldrh	r3, [r4, #12]
    84f0:	220c      	movs	r2, #12
    84f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    84f6:	f8c9 2000 	str.w	r2, [r9]
    84fa:	f04f 30ff 	mov.w	r0, #4294967295
    84fe:	81a3      	strh	r3, [r4, #12]
    8500:	2200      	movs	r2, #0
    8502:	2300      	movs	r3, #0
    8504:	f8ca 2008 	str.w	r2, [sl, #8]
    8508:	f8ca 3004 	str.w	r3, [sl, #4]
    850c:	b003      	add	sp, #12
    850e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8512:	2000      	movs	r0, #0
    8514:	2300      	movs	r3, #0
    8516:	f8ca 3004 	str.w	r3, [sl, #4]
    851a:	b003      	add	sp, #12
    851c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00008520 <__sprint_r.part.0>:
    8520:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8524:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    8526:	049c      	lsls	r4, r3, #18
    8528:	4690      	mov	r8, r2
    852a:	d52d      	bpl.n	8588 <__sprint_r.part.0+0x68>
    852c:	6893      	ldr	r3, [r2, #8]
    852e:	6812      	ldr	r2, [r2, #0]
    8530:	b343      	cbz	r3, 8584 <__sprint_r.part.0+0x64>
    8532:	468b      	mov	fp, r1
    8534:	4606      	mov	r6, r0
    8536:	f102 0908 	add.w	r9, r2, #8
    853a:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
    853e:	ea5f 079a 	movs.w	r7, sl, lsr #2
    8542:	d015      	beq.n	8570 <__sprint_r.part.0+0x50>
    8544:	3d04      	subs	r5, #4
    8546:	2400      	movs	r4, #0
    8548:	e001      	b.n	854e <__sprint_r.part.0+0x2e>
    854a:	42a7      	cmp	r7, r4
    854c:	d00e      	beq.n	856c <__sprint_r.part.0+0x4c>
    854e:	f855 1f04 	ldr.w	r1, [r5, #4]!
    8552:	465a      	mov	r2, fp
    8554:	4630      	mov	r0, r6
    8556:	f001 fa5b 	bl	9a10 <_fputwc_r>
    855a:	1c43      	adds	r3, r0, #1
    855c:	f104 0401 	add.w	r4, r4, #1
    8560:	d1f3      	bne.n	854a <__sprint_r.part.0+0x2a>
    8562:	2300      	movs	r3, #0
    8564:	e9c8 3301 	strd	r3, r3, [r8, #4]
    8568:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    856c:	f8d8 3008 	ldr.w	r3, [r8, #8]
    8570:	f02a 0a03 	bic.w	sl, sl, #3
    8574:	eba3 030a 	sub.w	r3, r3, sl
    8578:	f8c8 3008 	str.w	r3, [r8, #8]
    857c:	f109 0908 	add.w	r9, r9, #8
    8580:	2b00      	cmp	r3, #0
    8582:	d1da      	bne.n	853a <__sprint_r.part.0+0x1a>
    8584:	2000      	movs	r0, #0
    8586:	e7ec      	b.n	8562 <__sprint_r.part.0+0x42>
    8588:	f001 f80c 	bl	95a4 <__sfvwrite_r>
    858c:	2300      	movs	r3, #0
    858e:	e9c8 3301 	strd	r3, r3, [r8, #4]
    8592:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8596:	bf00      	nop

00008598 <_vfiprintf_r>:
    8598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    859c:	ed2d 8b02 	vpush	{d8}
    85a0:	b0c5      	sub	sp, #276	; 0x114
    85a2:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
    85a6:	4683      	mov	fp, r0
    85a8:	ee08 1a10 	vmov	s16, r1
    85ac:	4616      	mov	r6, r2
    85ae:	2100      	movs	r1, #0
    85b0:	2208      	movs	r2, #8
    85b2:	4650      	mov	r0, sl
    85b4:	461c      	mov	r4, r3
    85b6:	9307      	str	r3, [sp, #28]
    85b8:	f7fb ff02 	bl	43c0 <memset>
    85bc:	f1bb 0f00 	cmp.w	fp, #0
    85c0:	d004      	beq.n	85cc <_vfiprintf_r+0x34>
    85c2:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
    85c6:	2b00      	cmp	r3, #0
    85c8:	f000 86a0 	beq.w	930c <_vfiprintf_r+0xd74>
    85cc:	ee18 2a10 	vmov	r2, s16
    85d0:	6e53      	ldr	r3, [r2, #100]	; 0x64
    85d2:	07db      	lsls	r3, r3, #31
    85d4:	f140 8513 	bpl.w	8ffe <_vfiprintf_r+0xa66>
    85d8:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
    85dc:	b28a      	uxth	r2, r1
    85de:	0495      	lsls	r5, r2, #18
    85e0:	d40b      	bmi.n	85fa <_vfiprintf_r+0x62>
    85e2:	ee18 3a10 	vmov	r3, s16
    85e6:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
    85ea:	8199      	strh	r1, [r3, #12]
    85ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    85ee:	b28a      	uxth	r2, r1
    85f0:	ee18 1a10 	vmov	r1, s16
    85f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    85f8:	664b      	str	r3, [r1, #100]	; 0x64
    85fa:	0710      	lsls	r0, r2, #28
    85fc:	f140 8105 	bpl.w	880a <_vfiprintf_r+0x272>
    8600:	ee18 3a10 	vmov	r3, s16
    8604:	691b      	ldr	r3, [r3, #16]
    8606:	2b00      	cmp	r3, #0
    8608:	f000 80ff 	beq.w	880a <_vfiprintf_r+0x272>
    860c:	f002 031a 	and.w	r3, r2, #26
    8610:	2b0a      	cmp	r3, #10
    8612:	f000 810a 	beq.w	882a <_vfiprintf_r+0x292>
    8616:	2300      	movs	r3, #0
    8618:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
    861c:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
    8620:	aa1b      	add	r2, sp, #108	; 0x6c
    8622:	930c      	str	r3, [sp, #48]	; 0x30
    8624:	9218      	str	r2, [sp, #96]	; 0x60
    8626:	4691      	mov	r9, r2
    8628:	930b      	str	r3, [sp, #44]	; 0x2c
    862a:	9305      	str	r3, [sp, #20]
    862c:	46b0      	mov	r8, r6
    862e:	4644      	mov	r4, r8
    8630:	4ba8      	ldr	r3, [pc, #672]	; (88d4 <_vfiprintf_r+0x33c>)
    8632:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    8636:	f7fb ff8d 	bl	4554 <__locale_mb_cur_max>
    863a:	4622      	mov	r2, r4
    863c:	4603      	mov	r3, r0
    863e:	a912      	add	r1, sp, #72	; 0x48
    8640:	f8cd a000 	str.w	sl, [sp]
    8644:	4658      	mov	r0, fp
    8646:	47a8      	blx	r5
    8648:	2800      	cmp	r0, #0
    864a:	f000 8145 	beq.w	88d8 <_vfiprintf_r+0x340>
    864e:	f2c0 8139 	blt.w	88c4 <_vfiprintf_r+0x32c>
    8652:	9a12      	ldr	r2, [sp, #72]	; 0x48
    8654:	2a25      	cmp	r2, #37	; 0x25
    8656:	4603      	mov	r3, r0
    8658:	d001      	beq.n	865e <_vfiprintf_r+0xc6>
    865a:	441c      	add	r4, r3
    865c:	e7e8      	b.n	8630 <_vfiprintf_r+0x98>
    865e:	ebb4 0608 	subs.w	r6, r4, r8
    8662:	4605      	mov	r5, r0
    8664:	f040 813c 	bne.w	88e0 <_vfiprintf_r+0x348>
    8668:	2300      	movs	r3, #0
    866a:	7861      	ldrb	r1, [r4, #1]
    866c:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    8670:	f104 0801 	add.w	r8, r4, #1
    8674:	9306      	str	r3, [sp, #24]
    8676:	f04f 37ff 	mov.w	r7, #4294967295
    867a:	461e      	mov	r6, r3
    867c:	242b      	movs	r4, #43	; 0x2b
    867e:	f108 0801 	add.w	r8, r8, #1
    8682:	f1a1 0320 	sub.w	r3, r1, #32
    8686:	2b5a      	cmp	r3, #90	; 0x5a
    8688:	f200 8178 	bhi.w	897c <_vfiprintf_r+0x3e4>
    868c:	e8df f013 	tbh	[pc, r3, lsl #1]
    8690:	017602b5 	.word	0x017602b5
    8694:	02b00176 	.word	0x02b00176
    8698:	01760176 	.word	0x01760176
    869c:	006a0176 	.word	0x006a0176
    86a0:	01760176 	.word	0x01760176
    86a4:	028d027d 	.word	0x028d027d
    86a8:	02880176 	.word	0x02880176
    86ac:	01760297 	.word	0x01760297
    86b0:	005b0292 	.word	0x005b0292
    86b4:	005b005b 	.word	0x005b005b
    86b8:	005b005b 	.word	0x005b005b
    86bc:	005b005b 	.word	0x005b005b
    86c0:	005b005b 	.word	0x005b005b
    86c4:	01760176 	.word	0x01760176
    86c8:	01760176 	.word	0x01760176
    86cc:	01760176 	.word	0x01760176
    86d0:	01760176 	.word	0x01760176
    86d4:	025c0176 	.word	0x025c0176
    86d8:	01760084 	.word	0x01760084
    86dc:	01760176 	.word	0x01760176
    86e0:	01760176 	.word	0x01760176
    86e4:	01760176 	.word	0x01760176
    86e8:	01760176 	.word	0x01760176
    86ec:	00e80176 	.word	0x00e80176
    86f0:	01760176 	.word	0x01760176
    86f4:	02330176 	.word	0x02330176
    86f8:	02da0176 	.word	0x02da0176
    86fc:	01760176 	.word	0x01760176
    8700:	0176058b 	.word	0x0176058b
    8704:	01760176 	.word	0x01760176
    8708:	01760176 	.word	0x01760176
    870c:	01760176 	.word	0x01760176
    8710:	01760176 	.word	0x01760176
    8714:	025c0176 	.word	0x025c0176
    8718:	01760086 	.word	0x01760086
    871c:	01760176 	.word	0x01760176
    8720:	008602cd 	.word	0x008602cd
    8724:	0176007f 	.word	0x0176007f
    8728:	017602c0 	.word	0x017602c0
    872c:	00ea02fd 	.word	0x00ea02fd
    8730:	007f02ed 	.word	0x007f02ed
    8734:	02330176 	.word	0x02330176
    8738:	0569007c 	.word	0x0569007c
    873c:	01760176 	.word	0x01760176
    8740:	0176056b 	.word	0x0176056b
    8744:	007c      	.short	0x007c
    8746:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    874a:	2200      	movs	r2, #0
    874c:	f818 1b01 	ldrb.w	r1, [r8], #1
    8750:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    8754:	eb03 0242 	add.w	r2, r3, r2, lsl #1
    8758:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    875c:	2b09      	cmp	r3, #9
    875e:	d9f5      	bls.n	874c <_vfiprintf_r+0x1b4>
    8760:	9206      	str	r2, [sp, #24]
    8762:	e78e      	b.n	8682 <_vfiprintf_r+0xea>
    8764:	4658      	mov	r0, fp
    8766:	f7fe fe1b 	bl	73a0 <_localeconv_r>
    876a:	6843      	ldr	r3, [r0, #4]
    876c:	930d      	str	r3, [sp, #52]	; 0x34
    876e:	4618      	mov	r0, r3
    8770:	f7fc f966 	bl	4a40 <strlen>
    8774:	900e      	str	r0, [sp, #56]	; 0x38
    8776:	4605      	mov	r5, r0
    8778:	4658      	mov	r0, fp
    877a:	f7fe fe11 	bl	73a0 <_localeconv_r>
    877e:	6883      	ldr	r3, [r0, #8]
    8780:	930b      	str	r3, [sp, #44]	; 0x2c
    8782:	2d00      	cmp	r5, #0
    8784:	f040 84d6 	bne.w	9134 <_vfiprintf_r+0xb9c>
    8788:	f898 1000 	ldrb.w	r1, [r8]
    878c:	e777      	b.n	867e <_vfiprintf_r+0xe6>
    878e:	f898 1000 	ldrb.w	r1, [r8]
    8792:	f046 0620 	orr.w	r6, r6, #32
    8796:	e772      	b.n	867e <_vfiprintf_r+0xe6>
    8798:	f046 0610 	orr.w	r6, r6, #16
    879c:	06b4      	lsls	r4, r6, #26
    879e:	f140 818e 	bpl.w	8abe <_vfiprintf_r+0x526>
    87a2:	9b07      	ldr	r3, [sp, #28]
    87a4:	3307      	adds	r3, #7
    87a6:	f023 0307 	bic.w	r3, r3, #7
    87aa:	461a      	mov	r2, r3
    87ac:	6859      	ldr	r1, [r3, #4]
    87ae:	f852 3b08 	ldr.w	r3, [r2], #8
    87b2:	9207      	str	r2, [sp, #28]
    87b4:	460a      	mov	r2, r1
    87b6:	2900      	cmp	r1, #0
    87b8:	f2c0 8470 	blt.w	909c <_vfiprintf_r+0xb04>
    87bc:	1c79      	adds	r1, r7, #1
    87be:	f000 85a2 	beq.w	9306 <_vfiprintf_r+0xd6e>
    87c2:	f026 0180 	bic.w	r1, r6, #128	; 0x80
    87c6:	9103      	str	r1, [sp, #12]
    87c8:	ea53 0102 	orrs.w	r1, r3, r2
    87cc:	f000 843f 	beq.w	904e <_vfiprintf_r+0xab6>
    87d0:	2b0a      	cmp	r3, #10
    87d2:	f172 0100 	sbcs.w	r1, r2, #0
    87d6:	f080 8541 	bcs.w	925c <_vfiprintf_r+0xcc4>
    87da:	3330      	adds	r3, #48	; 0x30
    87dc:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
    87e0:	9e03      	ldr	r6, [sp, #12]
    87e2:	2301      	movs	r3, #1
    87e4:	9304      	str	r3, [sp, #16]
    87e6:	f20d 140f 	addw	r4, sp, #271	; 0x10f
    87ea:	9b04      	ldr	r3, [sp, #16]
    87ec:	42bb      	cmp	r3, r7
    87ee:	bfb8      	it	lt
    87f0:	463b      	movlt	r3, r7
    87f2:	9303      	str	r3, [sp, #12]
    87f4:	2300      	movs	r3, #0
    87f6:	9308      	str	r3, [sp, #32]
    87f8:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    87fc:	2b00      	cmp	r3, #0
    87fe:	f000 80cb 	beq.w	8998 <_vfiprintf_r+0x400>
    8802:	9b03      	ldr	r3, [sp, #12]
    8804:	3301      	adds	r3, #1
    8806:	9303      	str	r3, [sp, #12]
    8808:	e0c6      	b.n	8998 <_vfiprintf_r+0x400>
    880a:	ee18 1a10 	vmov	r1, s16
    880e:	4658      	mov	r0, fp
    8810:	ee18 5a10 	vmov	r5, s16
    8814:	f001 f840 	bl	9898 <__swsetup_r>
    8818:	2800      	cmp	r0, #0
    881a:	f040 8652 	bne.w	94c2 <_vfiprintf_r+0xf2a>
    881e:	89aa      	ldrh	r2, [r5, #12]
    8820:	f002 031a 	and.w	r3, r2, #26
    8824:	2b0a      	cmp	r3, #10
    8826:	f47f aef6 	bne.w	8616 <_vfiprintf_r+0x7e>
    882a:	ee18 1a10 	vmov	r1, s16
    882e:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
    8832:	2b00      	cmp	r3, #0
    8834:	f6ff aeef 	blt.w	8616 <_vfiprintf_r+0x7e>
    8838:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    883a:	07db      	lsls	r3, r3, #31
    883c:	d402      	bmi.n	8844 <_vfiprintf_r+0x2ac>
    883e:	0597      	lsls	r7, r2, #22
    8840:	f140 8612 	bpl.w	9468 <_vfiprintf_r+0xed0>
    8844:	ee18 1a10 	vmov	r1, s16
    8848:	4623      	mov	r3, r4
    884a:	4632      	mov	r2, r6
    884c:	4658      	mov	r0, fp
    884e:	f000 fe69 	bl	9524 <__sbprintf>
    8852:	9005      	str	r0, [sp, #20]
    8854:	9805      	ldr	r0, [sp, #20]
    8856:	b045      	add	sp, #276	; 0x114
    8858:	ecbd 8b02 	vpop	{d8}
    885c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8860:	f046 0610 	orr.w	r6, r6, #16
    8864:	f016 0220 	ands.w	r2, r6, #32
    8868:	f000 8136 	beq.w	8ad8 <_vfiprintf_r+0x540>
    886c:	9b07      	ldr	r3, [sp, #28]
    886e:	3307      	adds	r3, #7
    8870:	f023 0307 	bic.w	r3, r3, #7
    8874:	4619      	mov	r1, r3
    8876:	685a      	ldr	r2, [r3, #4]
    8878:	f851 3b08 	ldr.w	r3, [r1], #8
    887c:	9107      	str	r1, [sp, #28]
    887e:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
    8882:	9103      	str	r1, [sp, #12]
    8884:	2100      	movs	r1, #0
    8886:	2000      	movs	r0, #0
    8888:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
    888c:	1c78      	adds	r0, r7, #1
    888e:	f000 8210 	beq.w	8cb2 <_vfiprintf_r+0x71a>
    8892:	9803      	ldr	r0, [sp, #12]
    8894:	f020 0680 	bic.w	r6, r0, #128	; 0x80
    8898:	ea53 0002 	orrs.w	r0, r3, r2
    889c:	f040 8208 	bne.w	8cb0 <_vfiprintf_r+0x718>
    88a0:	2f00      	cmp	r7, #0
    88a2:	f040 8538 	bne.w	9316 <_vfiprintf_r+0xd7e>
    88a6:	2900      	cmp	r1, #0
    88a8:	f040 83d5 	bne.w	9056 <_vfiprintf_r+0xabe>
    88ac:	9b03      	ldr	r3, [sp, #12]
    88ae:	f013 0301 	ands.w	r3, r3, #1
    88b2:	9304      	str	r3, [sp, #16]
    88b4:	f000 8411 	beq.w	90da <_vfiprintf_r+0xb42>
    88b8:	2330      	movs	r3, #48	; 0x30
    88ba:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
    88be:	f20d 140f 	addw	r4, sp, #271	; 0x10f
    88c2:	e792      	b.n	87ea <_vfiprintf_r+0x252>
    88c4:	2208      	movs	r2, #8
    88c6:	2100      	movs	r1, #0
    88c8:	4650      	mov	r0, sl
    88ca:	f7fb fd79 	bl	43c0 <memset>
    88ce:	2301      	movs	r3, #1
    88d0:	441c      	add	r4, r3
    88d2:	e6ad      	b.n	8630 <_vfiprintf_r+0x98>
    88d4:	200010f8 	.word	0x200010f8
    88d8:	ebb4 0608 	subs.w	r6, r4, r8
    88dc:	4605      	mov	r5, r0
    88de:	d01b      	beq.n	8918 <_vfiprintf_r+0x380>
    88e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
    88e2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    88e4:	3301      	adds	r3, #1
    88e6:	4432      	add	r2, r6
    88e8:	2b07      	cmp	r3, #7
    88ea:	e9c9 8600 	strd	r8, r6, [r9]
    88ee:	921a      	str	r2, [sp, #104]	; 0x68
    88f0:	9319      	str	r3, [sp, #100]	; 0x64
    88f2:	dd1c      	ble.n	892e <_vfiprintf_r+0x396>
    88f4:	2a00      	cmp	r2, #0
    88f6:	f000 83a6 	beq.w	9046 <_vfiprintf_r+0xaae>
    88fa:	ee18 1a10 	vmov	r1, s16
    88fe:	aa18      	add	r2, sp, #96	; 0x60
    8900:	4658      	mov	r0, fp
    8902:	f7ff fe0d 	bl	8520 <__sprint_r.part.0>
    8906:	bb20      	cbnz	r0, 8952 <_vfiprintf_r+0x3ba>
    8908:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    890c:	9b05      	ldr	r3, [sp, #20]
    890e:	4433      	add	r3, r6
    8910:	9305      	str	r3, [sp, #20]
    8912:	2d00      	cmp	r5, #0
    8914:	f47f aea8 	bne.w	8668 <_vfiprintf_r+0xd0>
    8918:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    891a:	2b00      	cmp	r3, #0
    891c:	f040 85c1 	bne.w	94a2 <_vfiprintf_r+0xf0a>
    8920:	ee18 3a10 	vmov	r3, s16
    8924:	2200      	movs	r2, #0
    8926:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    892a:	9219      	str	r2, [sp, #100]	; 0x64
    892c:	e015      	b.n	895a <_vfiprintf_r+0x3c2>
    892e:	f109 0908 	add.w	r9, r9, #8
    8932:	e7eb      	b.n	890c <_vfiprintf_r+0x374>
    8934:	ee18 1a10 	vmov	r1, s16
    8938:	aa18      	add	r2, sp, #96	; 0x60
    893a:	4658      	mov	r0, fp
    893c:	f7ff fdf0 	bl	8520 <__sprint_r.part.0>
    8940:	2800      	cmp	r0, #0
    8942:	f000 80a6 	beq.w	8a92 <_vfiprintf_r+0x4fa>
    8946:	9b08      	ldr	r3, [sp, #32]
    8948:	b11b      	cbz	r3, 8952 <_vfiprintf_r+0x3ba>
    894a:	9908      	ldr	r1, [sp, #32]
    894c:	4658      	mov	r0, fp
    894e:	f7fc f979 	bl	4c44 <_free_r>
    8952:	ee18 3a10 	vmov	r3, s16
    8956:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    895a:	ee18 2a10 	vmov	r2, s16
    895e:	6e52      	ldr	r2, [r2, #100]	; 0x64
    8960:	f012 0f01 	tst.w	r2, #1
    8964:	b29a      	uxth	r2, r3
    8966:	f000 80a0 	beq.w	8aaa <_vfiprintf_r+0x512>
    896a:	0650      	lsls	r0, r2, #25
    896c:	f100 85b2 	bmi.w	94d4 <_vfiprintf_r+0xf3c>
    8970:	9805      	ldr	r0, [sp, #20]
    8972:	b045      	add	sp, #276	; 0x114
    8974:	ecbd 8b02 	vpop	{d8}
    8978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    897c:	2900      	cmp	r1, #0
    897e:	d0cb      	beq.n	8918 <_vfiprintf_r+0x380>
    8980:	2300      	movs	r3, #0
    8982:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    8986:	2301      	movs	r3, #1
    8988:	e9cd 3303 	strd	r3, r3, [sp, #12]
    898c:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
    8990:	ac2b      	add	r4, sp, #172	; 0xac
    8992:	2300      	movs	r3, #0
    8994:	9308      	str	r3, [sp, #32]
    8996:	461f      	mov	r7, r3
    8998:	f016 0302 	ands.w	r3, r6, #2
    899c:	9309      	str	r3, [sp, #36]	; 0x24
    899e:	d002      	beq.n	89a6 <_vfiprintf_r+0x40e>
    89a0:	9b03      	ldr	r3, [sp, #12]
    89a2:	3302      	adds	r3, #2
    89a4:	9303      	str	r3, [sp, #12]
    89a6:	f016 0384 	ands.w	r3, r6, #132	; 0x84
    89aa:	930a      	str	r3, [sp, #40]	; 0x28
    89ac:	d105      	bne.n	89ba <_vfiprintf_r+0x422>
    89ae:	9b06      	ldr	r3, [sp, #24]
    89b0:	9a03      	ldr	r2, [sp, #12]
    89b2:	1a9d      	subs	r5, r3, r2
    89b4:	2d00      	cmp	r5, #0
    89b6:	f300 827b 	bgt.w	8eb0 <_vfiprintf_r+0x918>
    89ba:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    89be:	1c41      	adds	r1, r0, #1
    89c0:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
    89c4:	b182      	cbz	r2, 89e8 <_vfiprintf_r+0x450>
    89c6:	2201      	movs	r2, #1
    89c8:	3301      	adds	r3, #1
    89ca:	f8c9 2004 	str.w	r2, [r9, #4]
    89ce:	2907      	cmp	r1, #7
    89d0:	f10d 0243 	add.w	r2, sp, #67	; 0x43
    89d4:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    89d8:	f8c9 2000 	str.w	r2, [r9]
    89dc:	f300 824a 	bgt.w	8e74 <_vfiprintf_r+0x8dc>
    89e0:	4608      	mov	r0, r1
    89e2:	f109 0908 	add.w	r9, r9, #8
    89e6:	3101      	adds	r1, #1
    89e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    89ea:	b1e2      	cbz	r2, 8a26 <_vfiprintf_r+0x48e>
    89ec:	aa11      	add	r2, sp, #68	; 0x44
    89ee:	3302      	adds	r3, #2
    89f0:	f8c9 2000 	str.w	r2, [r9]
    89f4:	2907      	cmp	r1, #7
    89f6:	f04f 0202 	mov.w	r2, #2
    89fa:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    89fe:	f8c9 2004 	str.w	r2, [r9, #4]
    8a02:	f340 8250 	ble.w	8ea6 <_vfiprintf_r+0x90e>
    8a06:	2b00      	cmp	r3, #0
    8a08:	f000 8343 	beq.w	9092 <_vfiprintf_r+0xafa>
    8a0c:	ee18 1a10 	vmov	r1, s16
    8a10:	aa18      	add	r2, sp, #96	; 0x60
    8a12:	4658      	mov	r0, fp
    8a14:	f7ff fd84 	bl	8520 <__sprint_r.part.0>
    8a18:	2800      	cmp	r0, #0
    8a1a:	d194      	bne.n	8946 <_vfiprintf_r+0x3ae>
    8a1c:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    8a20:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8a24:	1c41      	adds	r1, r0, #1
    8a26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    8a28:	2a80      	cmp	r2, #128	; 0x80
    8a2a:	f000 8184 	beq.w	8d36 <_vfiprintf_r+0x79e>
    8a2e:	9a04      	ldr	r2, [sp, #16]
    8a30:	1abd      	subs	r5, r7, r2
    8a32:	2d00      	cmp	r5, #0
    8a34:	f300 81d7 	bgt.w	8de6 <_vfiprintf_r+0x84e>
    8a38:	9a04      	ldr	r2, [sp, #16]
    8a3a:	f8c9 4000 	str.w	r4, [r9]
    8a3e:	4413      	add	r3, r2
    8a40:	2907      	cmp	r1, #7
    8a42:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    8a46:	f8c9 2004 	str.w	r2, [r9, #4]
    8a4a:	f340 816e 	ble.w	8d2a <_vfiprintf_r+0x792>
    8a4e:	2b00      	cmp	r3, #0
    8a50:	f000 8275 	beq.w	8f3e <_vfiprintf_r+0x9a6>
    8a54:	ee18 1a10 	vmov	r1, s16
    8a58:	aa18      	add	r2, sp, #96	; 0x60
    8a5a:	4658      	mov	r0, fp
    8a5c:	f7ff fd60 	bl	8520 <__sprint_r.part.0>
    8a60:	2800      	cmp	r0, #0
    8a62:	f47f af70 	bne.w	8946 <_vfiprintf_r+0x3ae>
    8a66:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    8a68:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8a6c:	0775      	lsls	r5, r6, #29
    8a6e:	d505      	bpl.n	8a7c <_vfiprintf_r+0x4e4>
    8a70:	9a06      	ldr	r2, [sp, #24]
    8a72:	9903      	ldr	r1, [sp, #12]
    8a74:	1a54      	subs	r4, r2, r1
    8a76:	2c00      	cmp	r4, #0
    8a78:	f300 826b 	bgt.w	8f52 <_vfiprintf_r+0x9ba>
    8a7c:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
    8a80:	9803      	ldr	r0, [sp, #12]
    8a82:	4281      	cmp	r1, r0
    8a84:	bfac      	ite	ge
    8a86:	1852      	addge	r2, r2, r1
    8a88:	1812      	addlt	r2, r2, r0
    8a8a:	9205      	str	r2, [sp, #20]
    8a8c:	2b00      	cmp	r3, #0
    8a8e:	f47f af51 	bne.w	8934 <_vfiprintf_r+0x39c>
    8a92:	9908      	ldr	r1, [sp, #32]
    8a94:	2300      	movs	r3, #0
    8a96:	9319      	str	r3, [sp, #100]	; 0x64
    8a98:	2900      	cmp	r1, #0
    8a9a:	f000 8149 	beq.w	8d30 <_vfiprintf_r+0x798>
    8a9e:	4658      	mov	r0, fp
    8aa0:	f7fc f8d0 	bl	4c44 <_free_r>
    8aa4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8aa8:	e5c1      	b.n	862e <_vfiprintf_r+0x96>
    8aaa:	059c      	lsls	r4, r3, #22
    8aac:	f53f af5d 	bmi.w	896a <_vfiprintf_r+0x3d2>
    8ab0:	ee18 4a10 	vmov	r4, s16
    8ab4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8ab6:	f7fb fde9 	bl	468c <__retarget_lock_release_recursive>
    8aba:	89a2      	ldrh	r2, [r4, #12]
    8abc:	e755      	b.n	896a <_vfiprintf_r+0x3d2>
    8abe:	06f0      	lsls	r0, r6, #27
    8ac0:	9a07      	ldr	r2, [sp, #28]
    8ac2:	f100 831f 	bmi.w	9104 <_vfiprintf_r+0xb6c>
    8ac6:	0671      	lsls	r1, r6, #25
    8ac8:	f140 8319 	bpl.w	90fe <_vfiprintf_r+0xb66>
    8acc:	f932 3b04 	ldrsh.w	r3, [r2], #4
    8ad0:	9207      	str	r2, [sp, #28]
    8ad2:	17da      	asrs	r2, r3, #31
    8ad4:	4611      	mov	r1, r2
    8ad6:	e66e      	b.n	87b6 <_vfiprintf_r+0x21e>
    8ad8:	f016 0310 	ands.w	r3, r6, #16
    8adc:	9907      	ldr	r1, [sp, #28]
    8ade:	f040 8309 	bne.w	90f4 <_vfiprintf_r+0xb5c>
    8ae2:	f016 0040 	ands.w	r0, r6, #64	; 0x40
    8ae6:	f000 8301 	beq.w	90ec <_vfiprintf_r+0xb54>
    8aea:	461a      	mov	r2, r3
    8aec:	f851 3b04 	ldr.w	r3, [r1], #4
    8af0:	9107      	str	r1, [sp, #28]
    8af2:	b29b      	uxth	r3, r3
    8af4:	e6c3      	b.n	887e <_vfiprintf_r+0x2e6>
    8af6:	9b07      	ldr	r3, [sp, #28]
    8af8:	461a      	mov	r2, r3
    8afa:	2300      	movs	r3, #0
    8afc:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    8b00:	4613      	mov	r3, r2
    8b02:	f853 4b04 	ldr.w	r4, [r3], #4
    8b06:	9303      	str	r3, [sp, #12]
    8b08:	2c00      	cmp	r4, #0
    8b0a:	f000 8412 	beq.w	9332 <_vfiprintf_r+0xd9a>
    8b0e:	2953      	cmp	r1, #83	; 0x53
    8b10:	f000 8365 	beq.w	91de <_vfiprintf_r+0xc46>
    8b14:	f016 0510 	ands.w	r5, r6, #16
    8b18:	f040 8361 	bne.w	91de <_vfiprintf_r+0xc46>
    8b1c:	1c7b      	adds	r3, r7, #1
    8b1e:	f000 84b3 	beq.w	9488 <_vfiprintf_r+0xef0>
    8b22:	463a      	mov	r2, r7
    8b24:	4629      	mov	r1, r5
    8b26:	4620      	mov	r0, r4
    8b28:	f7fe fc42 	bl	73b0 <memchr>
    8b2c:	9008      	str	r0, [sp, #32]
    8b2e:	2800      	cmp	r0, #0
    8b30:	f000 849f 	beq.w	9472 <_vfiprintf_r+0xeda>
    8b34:	1b03      	subs	r3, r0, r4
    8b36:	9a03      	ldr	r2, [sp, #12]
    8b38:	9304      	str	r3, [sp, #16]
    8b3a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    8b3e:	462f      	mov	r7, r5
    8b40:	9207      	str	r2, [sp, #28]
    8b42:	9303      	str	r3, [sp, #12]
    8b44:	9508      	str	r5, [sp, #32]
    8b46:	e657      	b.n	87f8 <_vfiprintf_r+0x260>
    8b48:	2943      	cmp	r1, #67	; 0x43
    8b4a:	d002      	beq.n	8b52 <_vfiprintf_r+0x5ba>
    8b4c:	06f5      	lsls	r5, r6, #27
    8b4e:	f140 832d 	bpl.w	91ac <_vfiprintf_r+0xc14>
    8b52:	9d07      	ldr	r5, [sp, #28]
    8b54:	2208      	movs	r2, #8
    8b56:	2100      	movs	r1, #0
    8b58:	a816      	add	r0, sp, #88	; 0x58
    8b5a:	ac2b      	add	r4, sp, #172	; 0xac
    8b5c:	f7fb fc30 	bl	43c0 <memset>
    8b60:	ab16      	add	r3, sp, #88	; 0x58
    8b62:	f855 2b04 	ldr.w	r2, [r5], #4
    8b66:	4621      	mov	r1, r4
    8b68:	4658      	mov	r0, fp
    8b6a:	f7ff fc13 	bl	8394 <_wcrtomb_r>
    8b6e:	4603      	mov	r3, r0
    8b70:	3301      	adds	r3, #1
    8b72:	9004      	str	r0, [sp, #16]
    8b74:	f000 84b3 	beq.w	94de <_vfiprintf_r+0xf46>
    8b78:	9b04      	ldr	r3, [sp, #16]
    8b7a:	9507      	str	r5, [sp, #28]
    8b7c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    8b80:	9303      	str	r3, [sp, #12]
    8b82:	2300      	movs	r3, #0
    8b84:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    8b88:	e703      	b.n	8992 <_vfiprintf_r+0x3fa>
    8b8a:	9b07      	ldr	r3, [sp, #28]
    8b8c:	f853 2b04 	ldr.w	r2, [r3], #4
    8b90:	9206      	str	r2, [sp, #24]
    8b92:	2a00      	cmp	r2, #0
    8b94:	f280 829c 	bge.w	90d0 <_vfiprintf_r+0xb38>
    8b98:	9a06      	ldr	r2, [sp, #24]
    8b9a:	4252      	negs	r2, r2
    8b9c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    8ba0:	f898 1000 	ldrb.w	r1, [r8]
    8ba4:	f046 0604 	orr.w	r6, r6, #4
    8ba8:	e569      	b.n	867e <_vfiprintf_r+0xe6>
    8baa:	f898 1000 	ldrb.w	r1, [r8]
    8bae:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
    8bb2:	e564      	b.n	867e <_vfiprintf_r+0xe6>
    8bb4:	f898 1000 	ldrb.w	r1, [r8]
    8bb8:	f046 0680 	orr.w	r6, r6, #128	; 0x80
    8bbc:	e55f      	b.n	867e <_vfiprintf_r+0xe6>
    8bbe:	4642      	mov	r2, r8
    8bc0:	f812 1b01 	ldrb.w	r1, [r2], #1
    8bc4:	292a      	cmp	r1, #42	; 0x2a
    8bc6:	f000 8496 	beq.w	94f6 <_vfiprintf_r+0xf5e>
    8bca:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    8bce:	2b09      	cmp	r3, #9
    8bd0:	4690      	mov	r8, r2
    8bd2:	f04f 0700 	mov.w	r7, #0
    8bd6:	f63f ad54 	bhi.w	8682 <_vfiprintf_r+0xea>
    8bda:	f818 1b01 	ldrb.w	r1, [r8], #1
    8bde:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    8be2:	eb03 0747 	add.w	r7, r3, r7, lsl #1
    8be6:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    8bea:	2b09      	cmp	r3, #9
    8bec:	d9f5      	bls.n	8bda <_vfiprintf_r+0x642>
    8bee:	e548      	b.n	8682 <_vfiprintf_r+0xea>
    8bf0:	f898 1000 	ldrb.w	r1, [r8]
    8bf4:	f046 0601 	orr.w	r6, r6, #1
    8bf8:	e541      	b.n	867e <_vfiprintf_r+0xe6>
    8bfa:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    8bfe:	2b00      	cmp	r3, #0
    8c00:	f47f adc2 	bne.w	8788 <_vfiprintf_r+0x1f0>
    8c04:	2320      	movs	r3, #32
    8c06:	f898 1000 	ldrb.w	r1, [r8]
    8c0a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    8c0e:	e536      	b.n	867e <_vfiprintf_r+0xe6>
    8c10:	f898 1000 	ldrb.w	r1, [r8]
    8c14:	296c      	cmp	r1, #108	; 0x6c
    8c16:	bf03      	ittte	eq
    8c18:	f898 1001 	ldrbeq.w	r1, [r8, #1]
    8c1c:	f046 0620 	orreq.w	r6, r6, #32
    8c20:	f108 0801 	addeq.w	r8, r8, #1
    8c24:	f046 0610 	orrne.w	r6, r6, #16
    8c28:	e529      	b.n	867e <_vfiprintf_r+0xe6>
    8c2a:	f898 1000 	ldrb.w	r1, [r8]
    8c2e:	2968      	cmp	r1, #104	; 0x68
    8c30:	bf03      	ittte	eq
    8c32:	f898 1001 	ldrbeq.w	r1, [r8, #1]
    8c36:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
    8c3a:	f108 0801 	addeq.w	r8, r8, #1
    8c3e:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
    8c42:	e51c      	b.n	867e <_vfiprintf_r+0xe6>
    8c44:	f046 0310 	orr.w	r3, r6, #16
    8c48:	9303      	str	r3, [sp, #12]
    8c4a:	9b03      	ldr	r3, [sp, #12]
    8c4c:	f013 0220 	ands.w	r2, r3, #32
    8c50:	f000 8206 	beq.w	9060 <_vfiprintf_r+0xac8>
    8c54:	9b07      	ldr	r3, [sp, #28]
    8c56:	3307      	adds	r3, #7
    8c58:	f023 0307 	bic.w	r3, r3, #7
    8c5c:	4619      	mov	r1, r3
    8c5e:	685a      	ldr	r2, [r3, #4]
    8c60:	f851 3b08 	ldr.w	r3, [r1], #8
    8c64:	9107      	str	r1, [sp, #28]
    8c66:	2101      	movs	r1, #1
    8c68:	e60d      	b.n	8886 <_vfiprintf_r+0x2ee>
    8c6a:	9a07      	ldr	r2, [sp, #28]
    8c6c:	f046 0302 	orr.w	r3, r6, #2
    8c70:	9303      	str	r3, [sp, #12]
    8c72:	f852 3b04 	ldr.w	r3, [r2], #4
    8c76:	9207      	str	r2, [sp, #28]
    8c78:	f647 0230 	movw	r2, #30768	; 0x7830
    8c7c:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
    8c80:	4ab8      	ldr	r2, [pc, #736]	; (8f64 <_vfiprintf_r+0x9cc>)
    8c82:	920c      	str	r2, [sp, #48]	; 0x30
    8c84:	2102      	movs	r1, #2
    8c86:	2200      	movs	r2, #0
    8c88:	e5fd      	b.n	8886 <_vfiprintf_r+0x2ee>
    8c8a:	06b7      	lsls	r7, r6, #26
    8c8c:	f100 8248 	bmi.w	9120 <_vfiprintf_r+0xb88>
    8c90:	06f5      	lsls	r5, r6, #27
    8c92:	f100 8346 	bmi.w	9322 <_vfiprintf_r+0xd8a>
    8c96:	0674      	lsls	r4, r6, #25
    8c98:	f100 83d5 	bmi.w	9446 <_vfiprintf_r+0xeae>
    8c9c:	05b0      	lsls	r0, r6, #22
    8c9e:	f140 8340 	bpl.w	9322 <_vfiprintf_r+0xd8a>
    8ca2:	9b07      	ldr	r3, [sp, #28]
    8ca4:	9905      	ldr	r1, [sp, #20]
    8ca6:	f853 2b04 	ldr.w	r2, [r3], #4
    8caa:	9307      	str	r3, [sp, #28]
    8cac:	7011      	strb	r1, [r2, #0]
    8cae:	e4be      	b.n	862e <_vfiprintf_r+0x96>
    8cb0:	9603      	str	r6, [sp, #12]
    8cb2:	2901      	cmp	r1, #1
    8cb4:	f43f ad8c 	beq.w	87d0 <_vfiprintf_r+0x238>
    8cb8:	2902      	cmp	r1, #2
    8cba:	ac44      	add	r4, sp, #272	; 0x110
    8cbc:	d111      	bne.n	8ce2 <_vfiprintf_r+0x74a>
    8cbe:	980c      	ldr	r0, [sp, #48]	; 0x30
    8cc0:	f003 010f 	and.w	r1, r3, #15
    8cc4:	091b      	lsrs	r3, r3, #4
    8cc6:	5c41      	ldrb	r1, [r0, r1]
    8cc8:	f804 1d01 	strb.w	r1, [r4, #-1]!
    8ccc:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    8cd0:	0912      	lsrs	r2, r2, #4
    8cd2:	ea53 0102 	orrs.w	r1, r3, r2
    8cd6:	d1f3      	bne.n	8cc0 <_vfiprintf_r+0x728>
    8cd8:	9e03      	ldr	r6, [sp, #12]
    8cda:	ab44      	add	r3, sp, #272	; 0x110
    8cdc:	1b1b      	subs	r3, r3, r4
    8cde:	9304      	str	r3, [sp, #16]
    8ce0:	e583      	b.n	87ea <_vfiprintf_r+0x252>
    8ce2:	f003 0107 	and.w	r1, r3, #7
    8ce6:	08db      	lsrs	r3, r3, #3
    8ce8:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
    8cec:	08d2      	lsrs	r2, r2, #3
    8cee:	3130      	adds	r1, #48	; 0x30
    8cf0:	ea53 0502 	orrs.w	r5, r3, r2
    8cf4:	4620      	mov	r0, r4
    8cf6:	f804 1d01 	strb.w	r1, [r4, #-1]!
    8cfa:	d1f2      	bne.n	8ce2 <_vfiprintf_r+0x74a>
    8cfc:	9e03      	ldr	r6, [sp, #12]
    8cfe:	07f3      	lsls	r3, r6, #31
    8d00:	d5eb      	bpl.n	8cda <_vfiprintf_r+0x742>
    8d02:	2930      	cmp	r1, #48	; 0x30
    8d04:	d0e8      	beq.n	8cd8 <_vfiprintf_r+0x740>
    8d06:	2330      	movs	r3, #48	; 0x30
    8d08:	3802      	subs	r0, #2
    8d0a:	f804 3c01 	strb.w	r3, [r4, #-1]
    8d0e:	ab44      	add	r3, sp, #272	; 0x110
    8d10:	1a1b      	subs	r3, r3, r0
    8d12:	9e03      	ldr	r6, [sp, #12]
    8d14:	9304      	str	r3, [sp, #16]
    8d16:	4604      	mov	r4, r0
    8d18:	e567      	b.n	87ea <_vfiprintf_r+0x252>
    8d1a:	9b04      	ldr	r3, [sp, #16]
    8d1c:	941b      	str	r4, [sp, #108]	; 0x6c
    8d1e:	2201      	movs	r2, #1
    8d20:	931c      	str	r3, [sp, #112]	; 0x70
    8d22:	931a      	str	r3, [sp, #104]	; 0x68
    8d24:	9219      	str	r2, [sp, #100]	; 0x64
    8d26:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8d2a:	f109 0908 	add.w	r9, r9, #8
    8d2e:	e69d      	b.n	8a6c <_vfiprintf_r+0x4d4>
    8d30:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8d34:	e47b      	b.n	862e <_vfiprintf_r+0x96>
    8d36:	9a06      	ldr	r2, [sp, #24]
    8d38:	9d03      	ldr	r5, [sp, #12]
    8d3a:	1b55      	subs	r5, r2, r5
    8d3c:	2d00      	cmp	r5, #0
    8d3e:	f77f ae76 	ble.w	8a2e <_vfiprintf_r+0x496>
    8d42:	2d10      	cmp	r5, #16
    8d44:	f340 83bb 	ble.w	94be <_vfiprintf_r+0xf26>
    8d48:	9409      	str	r4, [sp, #36]	; 0x24
    8d4a:	ee18 4a10 	vmov	r4, s16
    8d4e:	e007      	b.n	8d60 <_vfiprintf_r+0x7c8>
    8d50:	f100 0c02 	add.w	ip, r0, #2
    8d54:	f109 0908 	add.w	r9, r9, #8
    8d58:	4610      	mov	r0, r2
    8d5a:	3d10      	subs	r5, #16
    8d5c:	2d10      	cmp	r5, #16
    8d5e:	dd1e      	ble.n	8d9e <_vfiprintf_r+0x806>
    8d60:	4981      	ldr	r1, [pc, #516]	; (8f68 <_vfiprintf_r+0x9d0>)
    8d62:	f8c9 1000 	str.w	r1, [r9]
    8d66:	1c42      	adds	r2, r0, #1
    8d68:	3310      	adds	r3, #16
    8d6a:	2110      	movs	r1, #16
    8d6c:	2a07      	cmp	r2, #7
    8d6e:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    8d72:	f8c9 1004 	str.w	r1, [r9, #4]
    8d76:	ddeb      	ble.n	8d50 <_vfiprintf_r+0x7b8>
    8d78:	aa18      	add	r2, sp, #96	; 0x60
    8d7a:	2b00      	cmp	r3, #0
    8d7c:	d074      	beq.n	8e68 <_vfiprintf_r+0x8d0>
    8d7e:	4621      	mov	r1, r4
    8d80:	4658      	mov	r0, fp
    8d82:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8d86:	f7ff fbcb 	bl	8520 <__sprint_r.part.0>
    8d8a:	2800      	cmp	r0, #0
    8d8c:	f47f addb 	bne.w	8946 <_vfiprintf_r+0x3ae>
    8d90:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    8d94:	3d10      	subs	r5, #16
    8d96:	2d10      	cmp	r5, #16
    8d98:	f100 0c01 	add.w	ip, r0, #1
    8d9c:	dce0      	bgt.n	8d60 <_vfiprintf_r+0x7c8>
    8d9e:	9c09      	ldr	r4, [sp, #36]	; 0x24
    8da0:	4a71      	ldr	r2, [pc, #452]	; (8f68 <_vfiprintf_r+0x9d0>)
    8da2:	f8c9 5004 	str.w	r5, [r9, #4]
    8da6:	442b      	add	r3, r5
    8da8:	f1bc 0f07 	cmp.w	ip, #7
    8dac:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
    8db0:	f8c9 2000 	str.w	r2, [r9]
    8db4:	f340 8194 	ble.w	90e0 <_vfiprintf_r+0xb48>
    8db8:	2b00      	cmp	r3, #0
    8dba:	f000 831f 	beq.w	93fc <_vfiprintf_r+0xe64>
    8dbe:	ee18 1a10 	vmov	r1, s16
    8dc2:	aa18      	add	r2, sp, #96	; 0x60
    8dc4:	4658      	mov	r0, fp
    8dc6:	f7ff fbab 	bl	8520 <__sprint_r.part.0>
    8dca:	2800      	cmp	r0, #0
    8dcc:	f47f adbb 	bne.w	8946 <_vfiprintf_r+0x3ae>
    8dd0:	9a04      	ldr	r2, [sp, #16]
    8dd2:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    8dd6:	1abd      	subs	r5, r7, r2
    8dd8:	2d00      	cmp	r5, #0
    8dda:	f100 0101 	add.w	r1, r0, #1
    8dde:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8de2:	f77f ae29 	ble.w	8a38 <_vfiprintf_r+0x4a0>
    8de6:	2d10      	cmp	r5, #16
    8de8:	dd29      	ble.n	8e3e <_vfiprintf_r+0x8a6>
    8dea:	9409      	str	r4, [sp, #36]	; 0x24
    8dec:	2710      	movs	r7, #16
    8dee:	ee18 4a10 	vmov	r4, s16
    8df2:	e007      	b.n	8e04 <_vfiprintf_r+0x86c>
    8df4:	f100 0c02 	add.w	ip, r0, #2
    8df8:	f109 0908 	add.w	r9, r9, #8
    8dfc:	4610      	mov	r0, r2
    8dfe:	3d10      	subs	r5, #16
    8e00:	2d10      	cmp	r5, #16
    8e02:	dd1a      	ble.n	8e3a <_vfiprintf_r+0x8a2>
    8e04:	1c42      	adds	r2, r0, #1
    8e06:	4958      	ldr	r1, [pc, #352]	; (8f68 <_vfiprintf_r+0x9d0>)
    8e08:	3310      	adds	r3, #16
    8e0a:	2a07      	cmp	r2, #7
    8e0c:	e9c9 1700 	strd	r1, r7, [r9]
    8e10:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    8e14:	ddee      	ble.n	8df4 <_vfiprintf_r+0x85c>
    8e16:	aa18      	add	r2, sp, #96	; 0x60
    8e18:	b303      	cbz	r3, 8e5c <_vfiprintf_r+0x8c4>
    8e1a:	4621      	mov	r1, r4
    8e1c:	4658      	mov	r0, fp
    8e1e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8e22:	f7ff fb7d 	bl	8520 <__sprint_r.part.0>
    8e26:	2800      	cmp	r0, #0
    8e28:	f47f ad8d 	bne.w	8946 <_vfiprintf_r+0x3ae>
    8e2c:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    8e30:	3d10      	subs	r5, #16
    8e32:	2d10      	cmp	r5, #16
    8e34:	f100 0c01 	add.w	ip, r0, #1
    8e38:	dce4      	bgt.n	8e04 <_vfiprintf_r+0x86c>
    8e3a:	9c09      	ldr	r4, [sp, #36]	; 0x24
    8e3c:	4661      	mov	r1, ip
    8e3e:	4a4a      	ldr	r2, [pc, #296]	; (8f68 <_vfiprintf_r+0x9d0>)
    8e40:	f8c9 5004 	str.w	r5, [r9, #4]
    8e44:	442b      	add	r3, r5
    8e46:	2907      	cmp	r1, #7
    8e48:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    8e4c:	f8c9 2000 	str.w	r2, [r9]
    8e50:	f300 80e7 	bgt.w	9022 <_vfiprintf_r+0xa8a>
    8e54:	f109 0908 	add.w	r9, r9, #8
    8e58:	3101      	adds	r1, #1
    8e5a:	e5ed      	b.n	8a38 <_vfiprintf_r+0x4a0>
    8e5c:	f04f 0c01 	mov.w	ip, #1
    8e60:	4618      	mov	r0, r3
    8e62:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8e66:	e7ca      	b.n	8dfe <_vfiprintf_r+0x866>
    8e68:	f04f 0c01 	mov.w	ip, #1
    8e6c:	4618      	mov	r0, r3
    8e6e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8e72:	e772      	b.n	8d5a <_vfiprintf_r+0x7c2>
    8e74:	2b00      	cmp	r3, #0
    8e76:	f000 8104 	beq.w	9082 <_vfiprintf_r+0xaea>
    8e7a:	ee18 1a10 	vmov	r1, s16
    8e7e:	aa18      	add	r2, sp, #96	; 0x60
    8e80:	4658      	mov	r0, fp
    8e82:	f7ff fb4d 	bl	8520 <__sprint_r.part.0>
    8e86:	2800      	cmp	r0, #0
    8e88:	f47f ad5d 	bne.w	8946 <_vfiprintf_r+0x3ae>
    8e8c:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    8e90:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8e94:	1c41      	adds	r1, r0, #1
    8e96:	e5a7      	b.n	89e8 <_vfiprintf_r+0x450>
    8e98:	2302      	movs	r3, #2
    8e9a:	aa11      	add	r2, sp, #68	; 0x44
    8e9c:	931c      	str	r3, [sp, #112]	; 0x70
    8e9e:	921b      	str	r2, [sp, #108]	; 0x6c
    8ea0:	2101      	movs	r1, #1
    8ea2:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8ea6:	4608      	mov	r0, r1
    8ea8:	f109 0908 	add.w	r9, r9, #8
    8eac:	1c41      	adds	r1, r0, #1
    8eae:	e5ba      	b.n	8a26 <_vfiprintf_r+0x48e>
    8eb0:	2d10      	cmp	r5, #16
    8eb2:	f340 82e5 	ble.w	9480 <_vfiprintf_r+0xee8>
    8eb6:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
    8eba:	940f      	str	r4, [sp, #60]	; 0x3c
    8ebc:	4608      	mov	r0, r1
    8ebe:	ee18 4a10 	vmov	r4, s16
    8ec2:	e007      	b.n	8ed4 <_vfiprintf_r+0x93c>
    8ec4:	f100 0c02 	add.w	ip, r0, #2
    8ec8:	f109 0908 	add.w	r9, r9, #8
    8ecc:	4610      	mov	r0, r2
    8ece:	3d10      	subs	r5, #16
    8ed0:	2d10      	cmp	r5, #16
    8ed2:	dd1d      	ble.n	8f10 <_vfiprintf_r+0x978>
    8ed4:	4925      	ldr	r1, [pc, #148]	; (8f6c <_vfiprintf_r+0x9d4>)
    8ed6:	f8c9 1000 	str.w	r1, [r9]
    8eda:	1c42      	adds	r2, r0, #1
    8edc:	3310      	adds	r3, #16
    8ede:	2110      	movs	r1, #16
    8ee0:	2a07      	cmp	r2, #7
    8ee2:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    8ee6:	f8c9 1004 	str.w	r1, [r9, #4]
    8eea:	ddeb      	ble.n	8ec4 <_vfiprintf_r+0x92c>
    8eec:	aa18      	add	r2, sp, #96	; 0x60
    8eee:	b303      	cbz	r3, 8f32 <_vfiprintf_r+0x99a>
    8ef0:	4621      	mov	r1, r4
    8ef2:	4658      	mov	r0, fp
    8ef4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8ef8:	f7ff fb12 	bl	8520 <__sprint_r.part.0>
    8efc:	2800      	cmp	r0, #0
    8efe:	f47f ad22 	bne.w	8946 <_vfiprintf_r+0x3ae>
    8f02:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    8f06:	3d10      	subs	r5, #16
    8f08:	2d10      	cmp	r5, #16
    8f0a:	f100 0c01 	add.w	ip, r0, #1
    8f0e:	dce1      	bgt.n	8ed4 <_vfiprintf_r+0x93c>
    8f10:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    8f12:	4660      	mov	r0, ip
    8f14:	4a15      	ldr	r2, [pc, #84]	; (8f6c <_vfiprintf_r+0x9d4>)
    8f16:	f8c9 5004 	str.w	r5, [r9, #4]
    8f1a:	442b      	add	r3, r5
    8f1c:	2807      	cmp	r0, #7
    8f1e:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
    8f22:	f8c9 2000 	str.w	r2, [r9]
    8f26:	f300 80c1 	bgt.w	90ac <_vfiprintf_r+0xb14>
    8f2a:	f109 0908 	add.w	r9, r9, #8
    8f2e:	1c41      	adds	r1, r0, #1
    8f30:	e546      	b.n	89c0 <_vfiprintf_r+0x428>
    8f32:	4618      	mov	r0, r3
    8f34:	f04f 0c01 	mov.w	ip, #1
    8f38:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8f3c:	e7c7      	b.n	8ece <_vfiprintf_r+0x936>
    8f3e:	0776      	lsls	r6, r6, #29
    8f40:	9319      	str	r3, [sp, #100]	; 0x64
    8f42:	d553      	bpl.n	8fec <_vfiprintf_r+0xa54>
    8f44:	9a06      	ldr	r2, [sp, #24]
    8f46:	9903      	ldr	r1, [sp, #12]
    8f48:	1a54      	subs	r4, r2, r1
    8f4a:	2c00      	cmp	r4, #0
    8f4c:	dd4e      	ble.n	8fec <_vfiprintf_r+0xa54>
    8f4e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8f52:	2c10      	cmp	r4, #16
    8f54:	f340 82b0 	ble.w	94b8 <_vfiprintf_r+0xf20>
    8f58:	9919      	ldr	r1, [sp, #100]	; 0x64
    8f5a:	ee18 6a10 	vmov	r6, s16
    8f5e:	2510      	movs	r5, #16
    8f60:	e00d      	b.n	8f7e <_vfiprintf_r+0x9e6>
    8f62:	bf00      	nop
    8f64:	200005f8 	.word	0x200005f8
    8f68:	20000edc 	.word	0x20000edc
    8f6c:	2000063c 	.word	0x2000063c
    8f70:	1c88      	adds	r0, r1, #2
    8f72:	f109 0908 	add.w	r9, r9, #8
    8f76:	4611      	mov	r1, r2
    8f78:	3c10      	subs	r4, #16
    8f7a:	2c10      	cmp	r4, #16
    8f7c:	dd1a      	ble.n	8fb4 <_vfiprintf_r+0xa1c>
    8f7e:	1c4a      	adds	r2, r1, #1
    8f80:	48b3      	ldr	r0, [pc, #716]	; (9250 <_vfiprintf_r+0xcb8>)
    8f82:	3310      	adds	r3, #16
    8f84:	2a07      	cmp	r2, #7
    8f86:	e9c9 0500 	strd	r0, r5, [r9]
    8f8a:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    8f8e:	ddef      	ble.n	8f70 <_vfiprintf_r+0x9d8>
    8f90:	aa18      	add	r2, sp, #96	; 0x60
    8f92:	b333      	cbz	r3, 8fe2 <_vfiprintf_r+0xa4a>
    8f94:	4631      	mov	r1, r6
    8f96:	4658      	mov	r0, fp
    8f98:	f7ff fac2 	bl	8520 <__sprint_r.part.0>
    8f9c:	2800      	cmp	r0, #0
    8f9e:	f47f acd2 	bne.w	8946 <_vfiprintf_r+0x3ae>
    8fa2:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
    8fa6:	3c10      	subs	r4, #16
    8fa8:	2c10      	cmp	r4, #16
    8faa:	f101 0001 	add.w	r0, r1, #1
    8fae:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8fb2:	dce4      	bgt.n	8f7e <_vfiprintf_r+0x9e6>
    8fb4:	4aa6      	ldr	r2, [pc, #664]	; (9250 <_vfiprintf_r+0xcb8>)
    8fb6:	f8c9 4004 	str.w	r4, [r9, #4]
    8fba:	4423      	add	r3, r4
    8fbc:	2807      	cmp	r0, #7
    8fbe:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
    8fc2:	f8c9 2000 	str.w	r2, [r9]
    8fc6:	f77f ad59 	ble.w	8a7c <_vfiprintf_r+0x4e4>
    8fca:	b17b      	cbz	r3, 8fec <_vfiprintf_r+0xa54>
    8fcc:	ee18 1a10 	vmov	r1, s16
    8fd0:	aa18      	add	r2, sp, #96	; 0x60
    8fd2:	4658      	mov	r0, fp
    8fd4:	f7ff faa4 	bl	8520 <__sprint_r.part.0>
    8fd8:	2800      	cmp	r0, #0
    8fda:	f47f acb4 	bne.w	8946 <_vfiprintf_r+0x3ae>
    8fde:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    8fe0:	e54c      	b.n	8a7c <_vfiprintf_r+0x4e4>
    8fe2:	2001      	movs	r0, #1
    8fe4:	4619      	mov	r1, r3
    8fe6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8fea:	e7c5      	b.n	8f78 <_vfiprintf_r+0x9e0>
    8fec:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
    8ff0:	9903      	ldr	r1, [sp, #12]
    8ff2:	428a      	cmp	r2, r1
    8ff4:	bfac      	ite	ge
    8ff6:	189b      	addge	r3, r3, r2
    8ff8:	185b      	addlt	r3, r3, r1
    8ffa:	9305      	str	r3, [sp, #20]
    8ffc:	e549      	b.n	8a92 <_vfiprintf_r+0x4fa>
    8ffe:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
    9002:	058f      	lsls	r7, r1, #22
    9004:	ee18 3a10 	vmov	r3, s16
    9008:	b28a      	uxth	r2, r1
    900a:	f53f aae8 	bmi.w	85de <_vfiprintf_r+0x46>
    900e:	ee18 5a10 	vmov	r5, s16
    9012:	6d98      	ldr	r0, [r3, #88]	; 0x58
    9014:	f7fb fb38 	bl	4688 <__retarget_lock_acquire_recursive>
    9018:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
    901c:	b28a      	uxth	r2, r1
    901e:	f7ff bade 	b.w	85de <_vfiprintf_r+0x46>
    9022:	2b00      	cmp	r3, #0
    9024:	f43f ae79 	beq.w	8d1a <_vfiprintf_r+0x782>
    9028:	ee18 1a10 	vmov	r1, s16
    902c:	aa18      	add	r2, sp, #96	; 0x60
    902e:	4658      	mov	r0, fp
    9030:	f7ff fa76 	bl	8520 <__sprint_r.part.0>
    9034:	2800      	cmp	r0, #0
    9036:	f47f ac86 	bne.w	8946 <_vfiprintf_r+0x3ae>
    903a:	9919      	ldr	r1, [sp, #100]	; 0x64
    903c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    903e:	3101      	adds	r1, #1
    9040:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    9044:	e4f8      	b.n	8a38 <_vfiprintf_r+0x4a0>
    9046:	9219      	str	r2, [sp, #100]	; 0x64
    9048:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    904c:	e45e      	b.n	890c <_vfiprintf_r+0x374>
    904e:	2f00      	cmp	r7, #0
    9050:	f47f abc3 	bne.w	87da <_vfiprintf_r+0x242>
    9054:	9e03      	ldr	r6, [sp, #12]
    9056:	2700      	movs	r7, #0
    9058:	9704      	str	r7, [sp, #16]
    905a:	ac44      	add	r4, sp, #272	; 0x110
    905c:	f7ff bbc5 	b.w	87ea <_vfiprintf_r+0x252>
    9060:	9b03      	ldr	r3, [sp, #12]
    9062:	f013 0310 	ands.w	r3, r3, #16
    9066:	d154      	bne.n	9112 <_vfiprintf_r+0xb7a>
    9068:	9a03      	ldr	r2, [sp, #12]
    906a:	f012 0040 	ands.w	r0, r2, #64	; 0x40
    906e:	f000 816b 	beq.w	9348 <_vfiprintf_r+0xdb0>
    9072:	9907      	ldr	r1, [sp, #28]
    9074:	461a      	mov	r2, r3
    9076:	f851 3b04 	ldr.w	r3, [r1], #4
    907a:	9107      	str	r1, [sp, #28]
    907c:	b29b      	uxth	r3, r3
    907e:	2101      	movs	r1, #1
    9080:	e401      	b.n	8886 <_vfiprintf_r+0x2ee>
    9082:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9084:	2a00      	cmp	r2, #0
    9086:	d164      	bne.n	9152 <_vfiprintf_r+0xbba>
    9088:	4618      	mov	r0, r3
    908a:	2101      	movs	r1, #1
    908c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    9090:	e4c9      	b.n	8a26 <_vfiprintf_r+0x48e>
    9092:	2101      	movs	r1, #1
    9094:	4618      	mov	r0, r3
    9096:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    909a:	e4c4      	b.n	8a26 <_vfiprintf_r+0x48e>
    909c:	425b      	negs	r3, r3
    909e:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
    90a2:	9603      	str	r6, [sp, #12]
    90a4:	202d      	movs	r0, #45	; 0x2d
    90a6:	2101      	movs	r1, #1
    90a8:	f7ff bbee 	b.w	8888 <_vfiprintf_r+0x2f0>
    90ac:	2b00      	cmp	r3, #0
    90ae:	f000 8088 	beq.w	91c2 <_vfiprintf_r+0xc2a>
    90b2:	ee18 1a10 	vmov	r1, s16
    90b6:	aa18      	add	r2, sp, #96	; 0x60
    90b8:	4658      	mov	r0, fp
    90ba:	f7ff fa31 	bl	8520 <__sprint_r.part.0>
    90be:	2800      	cmp	r0, #0
    90c0:	f47f ac41 	bne.w	8946 <_vfiprintf_r+0x3ae>
    90c4:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    90c8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    90cc:	1c41      	adds	r1, r0, #1
    90ce:	e477      	b.n	89c0 <_vfiprintf_r+0x428>
    90d0:	f898 1000 	ldrb.w	r1, [r8]
    90d4:	9307      	str	r3, [sp, #28]
    90d6:	f7ff bad2 	b.w	867e <_vfiprintf_r+0xe6>
    90da:	ac44      	add	r4, sp, #272	; 0x110
    90dc:	f7ff bb85 	b.w	87ea <_vfiprintf_r+0x252>
    90e0:	f109 0908 	add.w	r9, r9, #8
    90e4:	f10c 0101 	add.w	r1, ip, #1
    90e8:	4660      	mov	r0, ip
    90ea:	e4a0      	b.n	8a2e <_vfiprintf_r+0x496>
    90ec:	f416 7200 	ands.w	r2, r6, #512	; 0x200
    90f0:	f040 8197 	bne.w	9422 <_vfiprintf_r+0xe8a>
    90f4:	f851 3b04 	ldr.w	r3, [r1], #4
    90f8:	9107      	str	r1, [sp, #28]
    90fa:	f7ff bbc0 	b.w	887e <_vfiprintf_r+0x2e6>
    90fe:	05b3      	lsls	r3, r6, #22
    9100:	f100 8188 	bmi.w	9414 <_vfiprintf_r+0xe7c>
    9104:	f852 3b04 	ldr.w	r3, [r2], #4
    9108:	9207      	str	r2, [sp, #28]
    910a:	17da      	asrs	r2, r3, #31
    910c:	4611      	mov	r1, r2
    910e:	f7ff bb52 	b.w	87b6 <_vfiprintf_r+0x21e>
    9112:	9907      	ldr	r1, [sp, #28]
    9114:	f851 3b04 	ldr.w	r3, [r1], #4
    9118:	9107      	str	r1, [sp, #28]
    911a:	2101      	movs	r1, #1
    911c:	f7ff bbb3 	b.w	8886 <_vfiprintf_r+0x2ee>
    9120:	9b07      	ldr	r3, [sp, #28]
    9122:	9805      	ldr	r0, [sp, #20]
    9124:	f853 1b04 	ldr.w	r1, [r3], #4
    9128:	9307      	str	r3, [sp, #28]
    912a:	17c2      	asrs	r2, r0, #31
    912c:	e9c1 0200 	strd	r0, r2, [r1]
    9130:	f7ff ba7d 	b.w	862e <_vfiprintf_r+0x96>
    9134:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9136:	2b00      	cmp	r3, #0
    9138:	f43f ab26 	beq.w	8788 <_vfiprintf_r+0x1f0>
    913c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    913e:	781b      	ldrb	r3, [r3, #0]
    9140:	2b00      	cmp	r3, #0
    9142:	f43f ab21 	beq.w	8788 <_vfiprintf_r+0x1f0>
    9146:	f898 1000 	ldrb.w	r1, [r8]
    914a:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
    914e:	f7ff ba96 	b.w	867e <_vfiprintf_r+0xe6>
    9152:	2302      	movs	r3, #2
    9154:	aa11      	add	r2, sp, #68	; 0x44
    9156:	931c      	str	r3, [sp, #112]	; 0x70
    9158:	921b      	str	r2, [sp, #108]	; 0x6c
    915a:	2001      	movs	r0, #1
    915c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    9160:	e6a2      	b.n	8ea8 <_vfiprintf_r+0x910>
    9162:	9603      	str	r6, [sp, #12]
    9164:	e571      	b.n	8c4a <_vfiprintf_r+0x6b2>
    9166:	4b3b      	ldr	r3, [pc, #236]	; (9254 <_vfiprintf_r+0xcbc>)
    9168:	930c      	str	r3, [sp, #48]	; 0x30
    916a:	f016 0220 	ands.w	r2, r6, #32
    916e:	d059      	beq.n	9224 <_vfiprintf_r+0xc8c>
    9170:	9b07      	ldr	r3, [sp, #28]
    9172:	3307      	adds	r3, #7
    9174:	f023 0307 	bic.w	r3, r3, #7
    9178:	4618      	mov	r0, r3
    917a:	685a      	ldr	r2, [r3, #4]
    917c:	f850 3b08 	ldr.w	r3, [r0], #8
    9180:	9007      	str	r0, [sp, #28]
    9182:	07f4      	lsls	r4, r6, #31
    9184:	d509      	bpl.n	919a <_vfiprintf_r+0xc02>
    9186:	ea53 0002 	orrs.w	r0, r3, r2
    918a:	d006      	beq.n	919a <_vfiprintf_r+0xc02>
    918c:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
    9190:	2130      	movs	r1, #48	; 0x30
    9192:	f046 0602 	orr.w	r6, r6, #2
    9196:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
    919a:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
    919e:	9103      	str	r1, [sp, #12]
    91a0:	2102      	movs	r1, #2
    91a2:	f7ff bb70 	b.w	8886 <_vfiprintf_r+0x2ee>
    91a6:	4b2c      	ldr	r3, [pc, #176]	; (9258 <_vfiprintf_r+0xcc0>)
    91a8:	930c      	str	r3, [sp, #48]	; 0x30
    91aa:	e7de      	b.n	916a <_vfiprintf_r+0xbd2>
    91ac:	9b07      	ldr	r3, [sp, #28]
    91ae:	2101      	movs	r1, #1
    91b0:	f853 2b04 	ldr.w	r2, [r3], #4
    91b4:	9103      	str	r1, [sp, #12]
    91b6:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
    91ba:	9307      	str	r3, [sp, #28]
    91bc:	9104      	str	r1, [sp, #16]
    91be:	ac2b      	add	r4, sp, #172	; 0xac
    91c0:	e4df      	b.n	8b82 <_vfiprintf_r+0x5ea>
    91c2:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
    91c6:	2a00      	cmp	r2, #0
    91c8:	f040 8132 	bne.w	9430 <_vfiprintf_r+0xe98>
    91cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    91ce:	2a00      	cmp	r2, #0
    91d0:	f47f ae62 	bne.w	8e98 <_vfiprintf_r+0x900>
    91d4:	4618      	mov	r0, r3
    91d6:	2101      	movs	r1, #1
    91d8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    91dc:	e427      	b.n	8a2e <_vfiprintf_r+0x496>
    91de:	2100      	movs	r1, #0
    91e0:	2208      	movs	r2, #8
    91e2:	a816      	add	r0, sp, #88	; 0x58
    91e4:	9413      	str	r4, [sp, #76]	; 0x4c
    91e6:	f7fb f8eb 	bl	43c0 <memset>
    91ea:	1c79      	adds	r1, r7, #1
    91ec:	f000 80bc 	beq.w	9368 <_vfiprintf_r+0xdd0>
    91f0:	2500      	movs	r5, #0
    91f2:	9407      	str	r4, [sp, #28]
    91f4:	462c      	mov	r4, r5
    91f6:	e00c      	b.n	9212 <_vfiprintf_r+0xc7a>
    91f8:	a92b      	add	r1, sp, #172	; 0xac
    91fa:	4658      	mov	r0, fp
    91fc:	f7ff f8ca 	bl	8394 <_wcrtomb_r>
    9200:	1c42      	adds	r2, r0, #1
    9202:	4420      	add	r0, r4
    9204:	f000 816b 	beq.w	94de <_vfiprintf_r+0xf46>
    9208:	42b8      	cmp	r0, r7
    920a:	dc08      	bgt.n	921e <_vfiprintf_r+0xc86>
    920c:	f000 8170 	beq.w	94f0 <_vfiprintf_r+0xf58>
    9210:	4604      	mov	r4, r0
    9212:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    9214:	5952      	ldr	r2, [r2, r5]
    9216:	ab16      	add	r3, sp, #88	; 0x58
    9218:	3504      	adds	r5, #4
    921a:	2a00      	cmp	r2, #0
    921c:	d1ec      	bne.n	91f8 <_vfiprintf_r+0xc60>
    921e:	9404      	str	r4, [sp, #16]
    9220:	9c07      	ldr	r4, [sp, #28]
    9222:	e0af      	b.n	9384 <_vfiprintf_r+0xdec>
    9224:	f016 0310 	ands.w	r3, r6, #16
    9228:	9807      	ldr	r0, [sp, #28]
    922a:	d10c      	bne.n	9246 <_vfiprintf_r+0xcae>
    922c:	f016 0440 	ands.w	r4, r6, #64	; 0x40
    9230:	d005      	beq.n	923e <_vfiprintf_r+0xca6>
    9232:	461a      	mov	r2, r3
    9234:	f850 3b04 	ldr.w	r3, [r0], #4
    9238:	9007      	str	r0, [sp, #28]
    923a:	b29b      	uxth	r3, r3
    923c:	e7a1      	b.n	9182 <_vfiprintf_r+0xbea>
    923e:	f416 7200 	ands.w	r2, r6, #512	; 0x200
    9242:	f040 80e1 	bne.w	9408 <_vfiprintf_r+0xe70>
    9246:	f850 3b04 	ldr.w	r3, [r0], #4
    924a:	9007      	str	r0, [sp, #28]
    924c:	e799      	b.n	9182 <_vfiprintf_r+0xbea>
    924e:	bf00      	nop
    9250:	2000063c 	.word	0x2000063c
    9254:	200005f8 	.word	0x200005f8
    9258:	2000060c 	.word	0x2000060c
    925c:	9903      	ldr	r1, [sp, #12]
    925e:	9704      	str	r7, [sp, #16]
    9260:	ac44      	add	r4, sp, #272	; 0x110
    9262:	469e      	mov	lr, r3
    9264:	ee08 ba90 	vmov	s17, fp
    9268:	f401 6680 	and.w	r6, r1, #1024	; 0x400
    926c:	f04f 0c00 	mov.w	ip, #0
    9270:	4623      	mov	r3, r4
    9272:	e006      	b.n	9282 <_vfiprintf_r+0xcea>
    9274:	f1be 0f0a 	cmp.w	lr, #10
    9278:	f172 0200 	sbcs.w	r2, r2, #0
    927c:	d339      	bcc.n	92f2 <_vfiprintf_r+0xd5a>
    927e:	46a6      	mov	lr, r4
    9280:	462a      	mov	r2, r5
    9282:	49a6      	ldr	r1, [pc, #664]	; (951c <_vfiprintf_r+0xf84>)
    9284:	eb1e 0002 	adds.w	r0, lr, r2
    9288:	f140 0000 	adc.w	r0, r0, #0
    928c:	460f      	mov	r7, r1
    928e:	fba1 1400 	umull	r1, r4, r1, r0
    9292:	f024 0103 	bic.w	r1, r4, #3
    9296:	eb01 0194 	add.w	r1, r1, r4, lsr #2
    929a:	1a40      	subs	r0, r0, r1
    929c:	ebbe 0100 	subs.w	r1, lr, r0
    92a0:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
    92a4:	f162 0400 	sbc.w	r4, r2, #0
    92a8:	fb05 f501 	mul.w	r5, r5, r1
    92ac:	fb07 5504 	mla	r5, r7, r4, r5
    92b0:	fba1 4107 	umull	r4, r1, r1, r7
    92b4:	440d      	add	r5, r1
    92b6:	2705      	movs	r7, #5
    92b8:	f004 0101 	and.w	r1, r4, #1
    92bc:	fba1 1b07 	umull	r1, fp, r1, r7
    92c0:	1809      	adds	r1, r1, r0
    92c2:	0864      	lsrs	r4, r4, #1
    92c4:	3130      	adds	r1, #48	; 0x30
    92c6:	f803 1c01 	strb.w	r1, [r3, #-1]
    92ca:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
    92ce:	f10c 0c01 	add.w	ip, ip, #1
    92d2:	3b01      	subs	r3, #1
    92d4:	086d      	lsrs	r5, r5, #1
    92d6:	2e00      	cmp	r6, #0
    92d8:	d0cc      	beq.n	9274 <_vfiprintf_r+0xcdc>
    92da:	990b      	ldr	r1, [sp, #44]	; 0x2c
    92dc:	7809      	ldrb	r1, [r1, #0]
    92de:	4561      	cmp	r1, ip
    92e0:	d1c8      	bne.n	9274 <_vfiprintf_r+0xcdc>
    92e2:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    92e6:	d0c5      	beq.n	9274 <_vfiprintf_r+0xcdc>
    92e8:	f1be 0f0a 	cmp.w	lr, #10
    92ec:	f172 0200 	sbcs.w	r2, r2, #0
    92f0:	d26c      	bcs.n	93cc <_vfiprintf_r+0xe34>
    92f2:	461c      	mov	r4, r3
    92f4:	ab44      	add	r3, sp, #272	; 0x110
    92f6:	1b1b      	subs	r3, r3, r4
    92f8:	9f04      	ldr	r7, [sp, #16]
    92fa:	9e03      	ldr	r6, [sp, #12]
    92fc:	9304      	str	r3, [sp, #16]
    92fe:	ee18 ba90 	vmov	fp, s17
    9302:	f7ff ba72 	b.w	87ea <_vfiprintf_r+0x252>
    9306:	9603      	str	r6, [sp, #12]
    9308:	f7ff ba62 	b.w	87d0 <_vfiprintf_r+0x238>
    930c:	4658      	mov	r0, fp
    930e:	f7fa fee1 	bl	40d4 <__sinit>
    9312:	f7ff b95b 	b.w	85cc <_vfiprintf_r+0x34>
    9316:	2901      	cmp	r1, #1
    9318:	9603      	str	r6, [sp, #12]
    931a:	f47f accd 	bne.w	8cb8 <_vfiprintf_r+0x720>
    931e:	f7ff ba5c 	b.w	87da <_vfiprintf_r+0x242>
    9322:	9b07      	ldr	r3, [sp, #28]
    9324:	9905      	ldr	r1, [sp, #20]
    9326:	f853 2b04 	ldr.w	r2, [r3], #4
    932a:	6011      	str	r1, [r2, #0]
    932c:	9307      	str	r3, [sp, #28]
    932e:	f7ff b97e 	b.w	862e <_vfiprintf_r+0x96>
    9332:	2f06      	cmp	r7, #6
    9334:	463b      	mov	r3, r7
    9336:	9a03      	ldr	r2, [sp, #12]
    9338:	4c79      	ldr	r4, [pc, #484]	; (9520 <_vfiprintf_r+0xf88>)
    933a:	9207      	str	r2, [sp, #28]
    933c:	bf28      	it	cs
    933e:	2306      	movcs	r3, #6
    9340:	9304      	str	r3, [sp, #16]
    9342:	9303      	str	r3, [sp, #12]
    9344:	f7ff bb25 	b.w	8992 <_vfiprintf_r+0x3fa>
    9348:	9b03      	ldr	r3, [sp, #12]
    934a:	9907      	ldr	r1, [sp, #28]
    934c:	f413 7200 	ands.w	r2, r3, #512	; 0x200
    9350:	bf14      	ite	ne
    9352:	f851 3b04 	ldrne.w	r3, [r1], #4
    9356:	f851 3b04 	ldreq.w	r3, [r1], #4
    935a:	9107      	str	r1, [sp, #28]
    935c:	bf1c      	itt	ne
    935e:	4602      	movne	r2, r0
    9360:	b2db      	uxtbne	r3, r3
    9362:	2101      	movs	r1, #1
    9364:	f7ff ba8f 	b.w	8886 <_vfiprintf_r+0x2ee>
    9368:	ab16      	add	r3, sp, #88	; 0x58
    936a:	9300      	str	r3, [sp, #0]
    936c:	2300      	movs	r3, #0
    936e:	4619      	mov	r1, r3
    9370:	aa13      	add	r2, sp, #76	; 0x4c
    9372:	4658      	mov	r0, fp
    9374:	f7ff f834 	bl	83e0 <_wcsrtombs_r>
    9378:	4603      	mov	r3, r0
    937a:	3301      	adds	r3, #1
    937c:	9004      	str	r0, [sp, #16]
    937e:	f000 80ae 	beq.w	94de <_vfiprintf_r+0xf46>
    9382:	9413      	str	r4, [sp, #76]	; 0x4c
    9384:	9b04      	ldr	r3, [sp, #16]
    9386:	2b00      	cmp	r3, #0
    9388:	d030      	beq.n	93ec <_vfiprintf_r+0xe54>
    938a:	2b63      	cmp	r3, #99	; 0x63
    938c:	dc63      	bgt.n	9456 <_vfiprintf_r+0xebe>
    938e:	2300      	movs	r3, #0
    9390:	9308      	str	r3, [sp, #32]
    9392:	ac2b      	add	r4, sp, #172	; 0xac
    9394:	2208      	movs	r2, #8
    9396:	2100      	movs	r1, #0
    9398:	a816      	add	r0, sp, #88	; 0x58
    939a:	f7fb f811 	bl	43c0 <memset>
    939e:	9d04      	ldr	r5, [sp, #16]
    93a0:	ab16      	add	r3, sp, #88	; 0x58
    93a2:	9300      	str	r3, [sp, #0]
    93a4:	aa13      	add	r2, sp, #76	; 0x4c
    93a6:	462b      	mov	r3, r5
    93a8:	4621      	mov	r1, r4
    93aa:	4658      	mov	r0, fp
    93ac:	f7ff f818 	bl	83e0 <_wcsrtombs_r>
    93b0:	4285      	cmp	r5, r0
    93b2:	f040 80ab 	bne.w	950c <_vfiprintf_r+0xf74>
    93b6:	9b03      	ldr	r3, [sp, #12]
    93b8:	9a04      	ldr	r2, [sp, #16]
    93ba:	9307      	str	r3, [sp, #28]
    93bc:	2300      	movs	r3, #0
    93be:	54a3      	strb	r3, [r4, r2]
    93c0:	461f      	mov	r7, r3
    93c2:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    93c6:	9303      	str	r3, [sp, #12]
    93c8:	f7ff ba16 	b.w	87f8 <_vfiprintf_r+0x260>
    93cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    93ce:	990d      	ldr	r1, [sp, #52]	; 0x34
    93d0:	1a9b      	subs	r3, r3, r2
    93d2:	4618      	mov	r0, r3
    93d4:	9308      	str	r3, [sp, #32]
    93d6:	f7fb f88b 	bl	44f0 <strncpy>
    93da:	990b      	ldr	r1, [sp, #44]	; 0x2c
    93dc:	9b08      	ldr	r3, [sp, #32]
    93de:	784a      	ldrb	r2, [r1, #1]
    93e0:	b10a      	cbz	r2, 93e6 <_vfiprintf_r+0xe4e>
    93e2:	3101      	adds	r1, #1
    93e4:	910b      	str	r1, [sp, #44]	; 0x2c
    93e6:	f04f 0c00 	mov.w	ip, #0
    93ea:	e748      	b.n	927e <_vfiprintf_r+0xce6>
    93ec:	9b03      	ldr	r3, [sp, #12]
    93ee:	9307      	str	r3, [sp, #28]
    93f0:	9b04      	ldr	r3, [sp, #16]
    93f2:	9303      	str	r3, [sp, #12]
    93f4:	461f      	mov	r7, r3
    93f6:	9308      	str	r3, [sp, #32]
    93f8:	f7ff b9fe 	b.w	87f8 <_vfiprintf_r+0x260>
    93fc:	2101      	movs	r1, #1
    93fe:	4618      	mov	r0, r3
    9400:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    9404:	f7ff bb13 	b.w	8a2e <_vfiprintf_r+0x496>
    9408:	f850 3b04 	ldr.w	r3, [r0], #4
    940c:	9007      	str	r0, [sp, #28]
    940e:	4622      	mov	r2, r4
    9410:	b2db      	uxtb	r3, r3
    9412:	e6b6      	b.n	9182 <_vfiprintf_r+0xbea>
    9414:	f912 3b04 	ldrsb.w	r3, [r2], #4
    9418:	9207      	str	r2, [sp, #28]
    941a:	17da      	asrs	r2, r3, #31
    941c:	4611      	mov	r1, r2
    941e:	f7ff b9ca 	b.w	87b6 <_vfiprintf_r+0x21e>
    9422:	f851 3b04 	ldr.w	r3, [r1], #4
    9426:	9107      	str	r1, [sp, #28]
    9428:	4602      	mov	r2, r0
    942a:	b2db      	uxtb	r3, r3
    942c:	f7ff ba27 	b.w	887e <_vfiprintf_r+0x2e6>
    9430:	2301      	movs	r3, #1
    9432:	931c      	str	r3, [sp, #112]	; 0x70
    9434:	2101      	movs	r1, #1
    9436:	f10d 0343 	add.w	r3, sp, #67	; 0x43
    943a:	931b      	str	r3, [sp, #108]	; 0x6c
    943c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    9440:	460b      	mov	r3, r1
    9442:	f7ff bacd 	b.w	89e0 <_vfiprintf_r+0x448>
    9446:	9b07      	ldr	r3, [sp, #28]
    9448:	9905      	ldr	r1, [sp, #20]
    944a:	f853 2b04 	ldr.w	r2, [r3], #4
    944e:	9307      	str	r3, [sp, #28]
    9450:	8011      	strh	r1, [r2, #0]
    9452:	f7ff b8ec 	b.w	862e <_vfiprintf_r+0x96>
    9456:	1c59      	adds	r1, r3, #1
    9458:	4658      	mov	r0, fp
    945a:	f7fa f829 	bl	34b0 <_malloc_r>
    945e:	4604      	mov	r4, r0
    9460:	2800      	cmp	r0, #0
    9462:	d03c      	beq.n	94de <_vfiprintf_r+0xf46>
    9464:	9008      	str	r0, [sp, #32]
    9466:	e795      	b.n	9394 <_vfiprintf_r+0xdfc>
    9468:	6d88      	ldr	r0, [r1, #88]	; 0x58
    946a:	f7fb f90f 	bl	468c <__retarget_lock_release_recursive>
    946e:	f7ff b9e9 	b.w	8844 <_vfiprintf_r+0x2ac>
    9472:	9b03      	ldr	r3, [sp, #12]
    9474:	9307      	str	r3, [sp, #28]
    9476:	e9cd 7703 	strd	r7, r7, [sp, #12]
    947a:	9f08      	ldr	r7, [sp, #32]
    947c:	f7ff b9bc 	b.w	87f8 <_vfiprintf_r+0x260>
    9480:	9819      	ldr	r0, [sp, #100]	; 0x64
    9482:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    9484:	3001      	adds	r0, #1
    9486:	e545      	b.n	8f14 <_vfiprintf_r+0x97c>
    9488:	9b03      	ldr	r3, [sp, #12]
    948a:	9307      	str	r3, [sp, #28]
    948c:	4620      	mov	r0, r4
    948e:	f7fb fad7 	bl	4a40 <strlen>
    9492:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
    9496:	462f      	mov	r7, r5
    9498:	9004      	str	r0, [sp, #16]
    949a:	9303      	str	r3, [sp, #12]
    949c:	9508      	str	r5, [sp, #32]
    949e:	f7ff b9ab 	b.w	87f8 <_vfiprintf_r+0x260>
    94a2:	ee18 1a10 	vmov	r1, s16
    94a6:	aa18      	add	r2, sp, #96	; 0x60
    94a8:	4658      	mov	r0, fp
    94aa:	f7ff f839 	bl	8520 <__sprint_r.part.0>
    94ae:	2800      	cmp	r0, #0
    94b0:	f43f aa36 	beq.w	8920 <_vfiprintf_r+0x388>
    94b4:	f7ff ba4d 	b.w	8952 <_vfiprintf_r+0x3ba>
    94b8:	9819      	ldr	r0, [sp, #100]	; 0x64
    94ba:	3001      	adds	r0, #1
    94bc:	e57a      	b.n	8fb4 <_vfiprintf_r+0xa1c>
    94be:	468c      	mov	ip, r1
    94c0:	e46e      	b.n	8da0 <_vfiprintf_r+0x808>
    94c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    94c4:	07d9      	lsls	r1, r3, #31
    94c6:	d405      	bmi.n	94d4 <_vfiprintf_r+0xf3c>
    94c8:	89ab      	ldrh	r3, [r5, #12]
    94ca:	059a      	lsls	r2, r3, #22
    94cc:	d402      	bmi.n	94d4 <_vfiprintf_r+0xf3c>
    94ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
    94d0:	f7fb f8dc 	bl	468c <__retarget_lock_release_recursive>
    94d4:	f04f 33ff 	mov.w	r3, #4294967295
    94d8:	9305      	str	r3, [sp, #20]
    94da:	f7ff ba49 	b.w	8970 <_vfiprintf_r+0x3d8>
    94de:	ee18 2a10 	vmov	r2, s16
    94e2:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    94e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    94ea:	8193      	strh	r3, [r2, #12]
    94ec:	f7ff ba35 	b.w	895a <_vfiprintf_r+0x3c2>
    94f0:	9c07      	ldr	r4, [sp, #28]
    94f2:	9704      	str	r7, [sp, #16]
    94f4:	e746      	b.n	9384 <_vfiprintf_r+0xdec>
    94f6:	9b07      	ldr	r3, [sp, #28]
    94f8:	f898 1001 	ldrb.w	r1, [r8, #1]
    94fc:	f853 7b04 	ldr.w	r7, [r3], #4
    9500:	9307      	str	r3, [sp, #28]
    9502:	4690      	mov	r8, r2
    9504:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
    9508:	f7ff b8b9 	b.w	867e <_vfiprintf_r+0xe6>
    950c:	ee18 2a10 	vmov	r2, s16
    9510:	8993      	ldrh	r3, [r2, #12]
    9512:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9516:	8193      	strh	r3, [r2, #12]
    9518:	f7ff ba15 	b.w	8946 <_vfiprintf_r+0x3ae>
    951c:	cccccccd 	.word	0xcccccccd
    9520:	20000620 	.word	0x20000620

00009524 <__sbprintf>:
    9524:	b570      	push	{r4, r5, r6, lr}
    9526:	460c      	mov	r4, r1
    9528:	8989      	ldrh	r1, [r1, #12]
    952a:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
    952e:	f021 0102 	bic.w	r1, r1, #2
    9532:	f8ad 1014 	strh.w	r1, [sp, #20]
    9536:	6e61      	ldr	r1, [r4, #100]	; 0x64
    9538:	911b      	str	r1, [sp, #108]	; 0x6c
    953a:	89e1      	ldrh	r1, [r4, #14]
    953c:	f8ad 1016 	strh.w	r1, [sp, #22]
    9540:	69e1      	ldr	r1, [r4, #28]
    9542:	9109      	str	r1, [sp, #36]	; 0x24
    9544:	6a61      	ldr	r1, [r4, #36]	; 0x24
    9546:	910b      	str	r1, [sp, #44]	; 0x2c
    9548:	a91c      	add	r1, sp, #112	; 0x70
    954a:	9102      	str	r1, [sp, #8]
    954c:	9106      	str	r1, [sp, #24]
    954e:	f44f 6180 	mov.w	r1, #1024	; 0x400
    9552:	4606      	mov	r6, r0
    9554:	9104      	str	r1, [sp, #16]
    9556:	9107      	str	r1, [sp, #28]
    9558:	a818      	add	r0, sp, #96	; 0x60
    955a:	2100      	movs	r1, #0
    955c:	e9cd 3200 	strd	r3, r2, [sp]
    9560:	9108      	str	r1, [sp, #32]
    9562:	f7fb f88d 	bl	4680 <__retarget_lock_init_recursive>
    9566:	e9dd 3200 	ldrd	r3, r2, [sp]
    956a:	a902      	add	r1, sp, #8
    956c:	4630      	mov	r0, r6
    956e:	f7ff f813 	bl	8598 <_vfiprintf_r>
    9572:	1e05      	subs	r5, r0, #0
    9574:	db07      	blt.n	9586 <__sbprintf+0x62>
    9576:	a902      	add	r1, sp, #8
    9578:	4630      	mov	r0, r6
    957a:	f7fd fee7 	bl	734c <_fflush_r>
    957e:	2800      	cmp	r0, #0
    9580:	bf18      	it	ne
    9582:	f04f 35ff 	movne.w	r5, #4294967295
    9586:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    958a:	065b      	lsls	r3, r3, #25
    958c:	d503      	bpl.n	9596 <__sbprintf+0x72>
    958e:	89a3      	ldrh	r3, [r4, #12]
    9590:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9594:	81a3      	strh	r3, [r4, #12]
    9596:	9818      	ldr	r0, [sp, #96]	; 0x60
    9598:	f7fb f874 	bl	4684 <__retarget_lock_close_recursive>
    959c:	4628      	mov	r0, r5
    959e:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
    95a2:	bd70      	pop	{r4, r5, r6, pc}

000095a4 <__sfvwrite_r>:
    95a4:	6893      	ldr	r3, [r2, #8]
    95a6:	2b00      	cmp	r3, #0
    95a8:	f000 8085 	beq.w	96b6 <__sfvwrite_r+0x112>
    95ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    95b0:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
    95b4:	460c      	mov	r4, r1
    95b6:	0719      	lsls	r1, r3, #28
    95b8:	4680      	mov	r8, r0
    95ba:	b083      	sub	sp, #12
    95bc:	4617      	mov	r7, r2
    95be:	b298      	uxth	r0, r3
    95c0:	d525      	bpl.n	960e <__sfvwrite_r+0x6a>
    95c2:	6923      	ldr	r3, [r4, #16]
    95c4:	b31b      	cbz	r3, 960e <__sfvwrite_r+0x6a>
    95c6:	f010 0302 	ands.w	r3, r0, #2
    95ca:	683d      	ldr	r5, [r7, #0]
    95cc:	d02d      	beq.n	962a <__sfvwrite_r+0x86>
    95ce:	f04f 0a00 	mov.w	sl, #0
    95d2:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 9894 <__sfvwrite_r+0x2f0>
    95d6:	4656      	mov	r6, sl
    95d8:	46b9      	mov	r9, r7
    95da:	455e      	cmp	r6, fp
    95dc:	4633      	mov	r3, r6
    95de:	4652      	mov	r2, sl
    95e0:	bf28      	it	cs
    95e2:	465b      	movcs	r3, fp
    95e4:	4640      	mov	r0, r8
    95e6:	2e00      	cmp	r6, #0
    95e8:	d052      	beq.n	9690 <__sfvwrite_r+0xec>
    95ea:	69e1      	ldr	r1, [r4, #28]
    95ec:	6a67      	ldr	r7, [r4, #36]	; 0x24
    95ee:	47b8      	blx	r7
    95f0:	2800      	cmp	r0, #0
    95f2:	dd56      	ble.n	96a2 <__sfvwrite_r+0xfe>
    95f4:	f8d9 3008 	ldr.w	r3, [r9, #8]
    95f8:	1a1b      	subs	r3, r3, r0
    95fa:	4482      	add	sl, r0
    95fc:	1a36      	subs	r6, r6, r0
    95fe:	f8c9 3008 	str.w	r3, [r9, #8]
    9602:	2b00      	cmp	r3, #0
    9604:	d1e9      	bne.n	95da <__sfvwrite_r+0x36>
    9606:	2000      	movs	r0, #0
    9608:	b003      	add	sp, #12
    960a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    960e:	4621      	mov	r1, r4
    9610:	4640      	mov	r0, r8
    9612:	f000 f941 	bl	9898 <__swsetup_r>
    9616:	2800      	cmp	r0, #0
    9618:	f040 8138 	bne.w	988c <__sfvwrite_r+0x2e8>
    961c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    9620:	683d      	ldr	r5, [r7, #0]
    9622:	b298      	uxth	r0, r3
    9624:	f010 0302 	ands.w	r3, r0, #2
    9628:	d1d1      	bne.n	95ce <__sfvwrite_r+0x2a>
    962a:	f010 0901 	ands.w	r9, r0, #1
    962e:	d144      	bne.n	96ba <__sfvwrite_r+0x116>
    9630:	464e      	mov	r6, r9
    9632:	9700      	str	r7, [sp, #0]
    9634:	b346      	cbz	r6, 9688 <__sfvwrite_r+0xe4>
    9636:	0582      	lsls	r2, r0, #22
    9638:	f8d4 b008 	ldr.w	fp, [r4, #8]
    963c:	f140 8085 	bpl.w	974a <__sfvwrite_r+0x1a6>
    9640:	45b3      	cmp	fp, r6
    9642:	465a      	mov	r2, fp
    9644:	f200 80b4 	bhi.w	97b0 <__sfvwrite_r+0x20c>
    9648:	f410 6f90 	tst.w	r0, #1152	; 0x480
    964c:	f040 80c1 	bne.w	97d2 <__sfvwrite_r+0x22e>
    9650:	6820      	ldr	r0, [r4, #0]
    9652:	9201      	str	r2, [sp, #4]
    9654:	4649      	mov	r1, r9
    9656:	f7fa fe37 	bl	42c8 <memmove>
    965a:	68a3      	ldr	r3, [r4, #8]
    965c:	9a01      	ldr	r2, [sp, #4]
    965e:	eba3 010b 	sub.w	r1, r3, fp
    9662:	6823      	ldr	r3, [r4, #0]
    9664:	60a1      	str	r1, [r4, #8]
    9666:	4413      	add	r3, r2
    9668:	46b2      	mov	sl, r6
    966a:	6023      	str	r3, [r4, #0]
    966c:	2600      	movs	r6, #0
    966e:	9a00      	ldr	r2, [sp, #0]
    9670:	6893      	ldr	r3, [r2, #8]
    9672:	eba3 030a 	sub.w	r3, r3, sl
    9676:	44d1      	add	r9, sl
    9678:	6093      	str	r3, [r2, #8]
    967a:	2b00      	cmp	r3, #0
    967c:	d0c3      	beq.n	9606 <__sfvwrite_r+0x62>
    967e:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
    9682:	b280      	uxth	r0, r0
    9684:	2e00      	cmp	r6, #0
    9686:	d1d6      	bne.n	9636 <__sfvwrite_r+0x92>
    9688:	e9d5 9600 	ldrd	r9, r6, [r5]
    968c:	3508      	adds	r5, #8
    968e:	e7d1      	b.n	9634 <__sfvwrite_r+0x90>
    9690:	e9d5 a600 	ldrd	sl, r6, [r5]
    9694:	3508      	adds	r5, #8
    9696:	e7a0      	b.n	95da <__sfvwrite_r+0x36>
    9698:	4621      	mov	r1, r4
    969a:	4640      	mov	r0, r8
    969c:	f7fd fe56 	bl	734c <_fflush_r>
    96a0:	b388      	cbz	r0, 9706 <__sfvwrite_r+0x162>
    96a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    96a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    96aa:	f04f 30ff 	mov.w	r0, #4294967295
    96ae:	81a3      	strh	r3, [r4, #12]
    96b0:	b003      	add	sp, #12
    96b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    96b6:	2000      	movs	r0, #0
    96b8:	4770      	bx	lr
    96ba:	461e      	mov	r6, r3
    96bc:	46ba      	mov	sl, r7
    96be:	4699      	mov	r9, r3
    96c0:	4618      	mov	r0, r3
    96c2:	9500      	str	r5, [sp, #0]
    96c4:	461f      	mov	r7, r3
    96c6:	b366      	cbz	r6, 9722 <__sfvwrite_r+0x17e>
    96c8:	2800      	cmp	r0, #0
    96ca:	d032      	beq.n	9732 <__sfvwrite_r+0x18e>
    96cc:	464a      	mov	r2, r9
    96ce:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
    96d2:	6820      	ldr	r0, [r4, #0]
    96d4:	68a5      	ldr	r5, [r4, #8]
    96d6:	42b2      	cmp	r2, r6
    96d8:	bf28      	it	cs
    96da:	4632      	movcs	r2, r6
    96dc:	4288      	cmp	r0, r1
    96de:	d904      	bls.n	96ea <__sfvwrite_r+0x146>
    96e0:	eb05 0b03 	add.w	fp, r5, r3
    96e4:	455a      	cmp	r2, fp
    96e6:	f300 80a7 	bgt.w	9838 <__sfvwrite_r+0x294>
    96ea:	4293      	cmp	r3, r2
    96ec:	dc64      	bgt.n	97b8 <__sfvwrite_r+0x214>
    96ee:	69e1      	ldr	r1, [r4, #28]
    96f0:	6a65      	ldr	r5, [r4, #36]	; 0x24
    96f2:	463a      	mov	r2, r7
    96f4:	4640      	mov	r0, r8
    96f6:	47a8      	blx	r5
    96f8:	f1b0 0b00 	subs.w	fp, r0, #0
    96fc:	ddd1      	ble.n	96a2 <__sfvwrite_r+0xfe>
    96fe:	ebb9 090b 	subs.w	r9, r9, fp
    9702:	d0c9      	beq.n	9698 <__sfvwrite_r+0xf4>
    9704:	2001      	movs	r0, #1
    9706:	f8da 3008 	ldr.w	r3, [sl, #8]
    970a:	eba3 030b 	sub.w	r3, r3, fp
    970e:	445f      	add	r7, fp
    9710:	eba6 060b 	sub.w	r6, r6, fp
    9714:	f8ca 3008 	str.w	r3, [sl, #8]
    9718:	2b00      	cmp	r3, #0
    971a:	f43f af74 	beq.w	9606 <__sfvwrite_r+0x62>
    971e:	2e00      	cmp	r6, #0
    9720:	d1d2      	bne.n	96c8 <__sfvwrite_r+0x124>
    9722:	9a00      	ldr	r2, [sp, #0]
    9724:	6856      	ldr	r6, [r2, #4]
    9726:	4613      	mov	r3, r2
    9728:	3208      	adds	r2, #8
    972a:	9200      	str	r2, [sp, #0]
    972c:	2e00      	cmp	r6, #0
    972e:	d0f8      	beq.n	9722 <__sfvwrite_r+0x17e>
    9730:	681f      	ldr	r7, [r3, #0]
    9732:	4632      	mov	r2, r6
    9734:	210a      	movs	r1, #10
    9736:	4638      	mov	r0, r7
    9738:	f7fd fe3a 	bl	73b0 <memchr>
    973c:	2800      	cmp	r0, #0
    973e:	f000 809c 	beq.w	987a <__sfvwrite_r+0x2d6>
    9742:	3001      	adds	r0, #1
    9744:	eba0 0907 	sub.w	r9, r0, r7
    9748:	e7c0      	b.n	96cc <__sfvwrite_r+0x128>
    974a:	6820      	ldr	r0, [r4, #0]
    974c:	6923      	ldr	r3, [r4, #16]
    974e:	4298      	cmp	r0, r3
    9750:	d816      	bhi.n	9780 <__sfvwrite_r+0x1dc>
    9752:	6962      	ldr	r2, [r4, #20]
    9754:	42b2      	cmp	r2, r6
    9756:	d813      	bhi.n	9780 <__sfvwrite_r+0x1dc>
    9758:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    975c:	42b3      	cmp	r3, r6
    975e:	bf28      	it	cs
    9760:	4633      	movcs	r3, r6
    9762:	69e1      	ldr	r1, [r4, #28]
    9764:	fb93 f3f2 	sdiv	r3, r3, r2
    9768:	6a67      	ldr	r7, [r4, #36]	; 0x24
    976a:	fb02 f303 	mul.w	r3, r2, r3
    976e:	4640      	mov	r0, r8
    9770:	464a      	mov	r2, r9
    9772:	47b8      	blx	r7
    9774:	f1b0 0a00 	subs.w	sl, r0, #0
    9778:	dd93      	ble.n	96a2 <__sfvwrite_r+0xfe>
    977a:	eba6 060a 	sub.w	r6, r6, sl
    977e:	e776      	b.n	966e <__sfvwrite_r+0xca>
    9780:	45b3      	cmp	fp, r6
    9782:	46da      	mov	sl, fp
    9784:	bf28      	it	cs
    9786:	46b2      	movcs	sl, r6
    9788:	4652      	mov	r2, sl
    978a:	4649      	mov	r1, r9
    978c:	f7fa fd9c 	bl	42c8 <memmove>
    9790:	68a3      	ldr	r3, [r4, #8]
    9792:	6822      	ldr	r2, [r4, #0]
    9794:	eba3 030a 	sub.w	r3, r3, sl
    9798:	4452      	add	r2, sl
    979a:	60a3      	str	r3, [r4, #8]
    979c:	6022      	str	r2, [r4, #0]
    979e:	2b00      	cmp	r3, #0
    97a0:	d1eb      	bne.n	977a <__sfvwrite_r+0x1d6>
    97a2:	4621      	mov	r1, r4
    97a4:	4640      	mov	r0, r8
    97a6:	f7fd fdd1 	bl	734c <_fflush_r>
    97aa:	2800      	cmp	r0, #0
    97ac:	d0e5      	beq.n	977a <__sfvwrite_r+0x1d6>
    97ae:	e778      	b.n	96a2 <__sfvwrite_r+0xfe>
    97b0:	6820      	ldr	r0, [r4, #0]
    97b2:	46b3      	mov	fp, r6
    97b4:	4632      	mov	r2, r6
    97b6:	e74c      	b.n	9652 <__sfvwrite_r+0xae>
    97b8:	4639      	mov	r1, r7
    97ba:	9201      	str	r2, [sp, #4]
    97bc:	f7fa fd84 	bl	42c8 <memmove>
    97c0:	9a01      	ldr	r2, [sp, #4]
    97c2:	68a3      	ldr	r3, [r4, #8]
    97c4:	1a9b      	subs	r3, r3, r2
    97c6:	60a3      	str	r3, [r4, #8]
    97c8:	6823      	ldr	r3, [r4, #0]
    97ca:	4413      	add	r3, r2
    97cc:	6023      	str	r3, [r4, #0]
    97ce:	4693      	mov	fp, r2
    97d0:	e795      	b.n	96fe <__sfvwrite_r+0x15a>
    97d2:	6823      	ldr	r3, [r4, #0]
    97d4:	6921      	ldr	r1, [r4, #16]
    97d6:	eba3 0b01 	sub.w	fp, r3, r1
    97da:	6963      	ldr	r3, [r4, #20]
    97dc:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
    97e0:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
    97e4:	f10b 0301 	add.w	r3, fp, #1
    97e8:	ea4f 0a6a 	mov.w	sl, sl, asr #1
    97ec:	4433      	add	r3, r6
    97ee:	4553      	cmp	r3, sl
    97f0:	4652      	mov	r2, sl
    97f2:	bf84      	itt	hi
    97f4:	469a      	movhi	sl, r3
    97f6:	4652      	movhi	r2, sl
    97f8:	0543      	lsls	r3, r0, #21
    97fa:	d52c      	bpl.n	9856 <__sfvwrite_r+0x2b2>
    97fc:	4611      	mov	r1, r2
    97fe:	4640      	mov	r0, r8
    9800:	f7f9 fe56 	bl	34b0 <_malloc_r>
    9804:	2800      	cmp	r0, #0
    9806:	d03b      	beq.n	9880 <__sfvwrite_r+0x2dc>
    9808:	465a      	mov	r2, fp
    980a:	6921      	ldr	r1, [r4, #16]
    980c:	9001      	str	r0, [sp, #4]
    980e:	f7f8 f899 	bl	1944 <memcpy>
    9812:	89a2      	ldrh	r2, [r4, #12]
    9814:	9b01      	ldr	r3, [sp, #4]
    9816:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
    981a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    981e:	81a2      	strh	r2, [r4, #12]
    9820:	eb03 000b 	add.w	r0, r3, fp
    9824:	6123      	str	r3, [r4, #16]
    9826:	ebaa 030b 	sub.w	r3, sl, fp
    982a:	f8c4 a014 	str.w	sl, [r4, #20]
    982e:	60a3      	str	r3, [r4, #8]
    9830:	6020      	str	r0, [r4, #0]
    9832:	46b3      	mov	fp, r6
    9834:	4632      	mov	r2, r6
    9836:	e70c      	b.n	9652 <__sfvwrite_r+0xae>
    9838:	4639      	mov	r1, r7
    983a:	465a      	mov	r2, fp
    983c:	f7fa fd44 	bl	42c8 <memmove>
    9840:	6823      	ldr	r3, [r4, #0]
    9842:	445b      	add	r3, fp
    9844:	6023      	str	r3, [r4, #0]
    9846:	4621      	mov	r1, r4
    9848:	4640      	mov	r0, r8
    984a:	f7fd fd7f 	bl	734c <_fflush_r>
    984e:	2800      	cmp	r0, #0
    9850:	f43f af55 	beq.w	96fe <__sfvwrite_r+0x15a>
    9854:	e725      	b.n	96a2 <__sfvwrite_r+0xfe>
    9856:	4640      	mov	r0, r8
    9858:	f7fa f8f2 	bl	3a40 <_realloc_r>
    985c:	4603      	mov	r3, r0
    985e:	2800      	cmp	r0, #0
    9860:	d1de      	bne.n	9820 <__sfvwrite_r+0x27c>
    9862:	6921      	ldr	r1, [r4, #16]
    9864:	4640      	mov	r0, r8
    9866:	f7fb f9ed 	bl	4c44 <_free_r>
    986a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    986e:	220c      	movs	r2, #12
    9870:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    9874:	f8c8 2000 	str.w	r2, [r8]
    9878:	e715      	b.n	96a6 <__sfvwrite_r+0x102>
    987a:	1c72      	adds	r2, r6, #1
    987c:	4691      	mov	r9, r2
    987e:	e726      	b.n	96ce <__sfvwrite_r+0x12a>
    9880:	220c      	movs	r2, #12
    9882:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    9886:	f8c8 2000 	str.w	r2, [r8]
    988a:	e70c      	b.n	96a6 <__sfvwrite_r+0x102>
    988c:	f04f 30ff 	mov.w	r0, #4294967295
    9890:	e6ba      	b.n	9608 <__sfvwrite_r+0x64>
    9892:	bf00      	nop
    9894:	7ffffc00 	.word	0x7ffffc00

00009898 <__swsetup_r>:
    9898:	b538      	push	{r3, r4, r5, lr}
    989a:	4b31      	ldr	r3, [pc, #196]	; (9960 <__swsetup_r+0xc8>)
    989c:	681b      	ldr	r3, [r3, #0]
    989e:	4605      	mov	r5, r0
    98a0:	460c      	mov	r4, r1
    98a2:	b113      	cbz	r3, 98aa <__swsetup_r+0x12>
    98a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    98a6:	2a00      	cmp	r2, #0
    98a8:	d04e      	beq.n	9948 <__swsetup_r+0xb0>
    98aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    98ae:	0718      	lsls	r0, r3, #28
    98b0:	b29a      	uxth	r2, r3
    98b2:	d51c      	bpl.n	98ee <__swsetup_r+0x56>
    98b4:	6921      	ldr	r1, [r4, #16]
    98b6:	b329      	cbz	r1, 9904 <__swsetup_r+0x6c>
    98b8:	f012 0001 	ands.w	r0, r2, #1
    98bc:	d007      	beq.n	98ce <__swsetup_r+0x36>
    98be:	2000      	movs	r0, #0
    98c0:	60a0      	str	r0, [r4, #8]
    98c2:	6960      	ldr	r0, [r4, #20]
    98c4:	4240      	negs	r0, r0
    98c6:	61a0      	str	r0, [r4, #24]
    98c8:	b139      	cbz	r1, 98da <__swsetup_r+0x42>
    98ca:	2000      	movs	r0, #0
    98cc:	bd38      	pop	{r3, r4, r5, pc}
    98ce:	0795      	lsls	r5, r2, #30
    98d0:	bf58      	it	pl
    98d2:	6960      	ldrpl	r0, [r4, #20]
    98d4:	60a0      	str	r0, [r4, #8]
    98d6:	2900      	cmp	r1, #0
    98d8:	d1f7      	bne.n	98ca <__swsetup_r+0x32>
    98da:	0612      	lsls	r2, r2, #24
    98dc:	bf58      	it	pl
    98de:	4608      	movpl	r0, r1
    98e0:	d5f4      	bpl.n	98cc <__swsetup_r+0x34>
    98e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    98e6:	81a3      	strh	r3, [r4, #12]
    98e8:	f04f 30ff 	mov.w	r0, #4294967295
    98ec:	bd38      	pop	{r3, r4, r5, pc}
    98ee:	06d1      	lsls	r1, r2, #27
    98f0:	d52e      	bpl.n	9950 <__swsetup_r+0xb8>
    98f2:	0752      	lsls	r2, r2, #29
    98f4:	d414      	bmi.n	9920 <__swsetup_r+0x88>
    98f6:	6921      	ldr	r1, [r4, #16]
    98f8:	f043 0308 	orr.w	r3, r3, #8
    98fc:	81a3      	strh	r3, [r4, #12]
    98fe:	b29a      	uxth	r2, r3
    9900:	2900      	cmp	r1, #0
    9902:	d1d9      	bne.n	98b8 <__swsetup_r+0x20>
    9904:	f402 7020 	and.w	r0, r2, #640	; 0x280
    9908:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    990c:	d0d4      	beq.n	98b8 <__swsetup_r+0x20>
    990e:	4621      	mov	r1, r4
    9910:	4628      	mov	r0, r5
    9912:	f000 f947 	bl	9ba4 <__smakebuf_r>
    9916:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    991a:	6921      	ldr	r1, [r4, #16]
    991c:	b29a      	uxth	r2, r3
    991e:	e7cb      	b.n	98b8 <__swsetup_r+0x20>
    9920:	6b21      	ldr	r1, [r4, #48]	; 0x30
    9922:	b151      	cbz	r1, 993a <__swsetup_r+0xa2>
    9924:	f104 0240 	add.w	r2, r4, #64	; 0x40
    9928:	4291      	cmp	r1, r2
    992a:	d004      	beq.n	9936 <__swsetup_r+0x9e>
    992c:	4628      	mov	r0, r5
    992e:	f7fb f989 	bl	4c44 <_free_r>
    9932:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    9936:	2200      	movs	r2, #0
    9938:	6322      	str	r2, [r4, #48]	; 0x30
    993a:	6921      	ldr	r1, [r4, #16]
    993c:	2200      	movs	r2, #0
    993e:	e9c4 1200 	strd	r1, r2, [r4]
    9942:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    9946:	e7d7      	b.n	98f8 <__swsetup_r+0x60>
    9948:	4618      	mov	r0, r3
    994a:	f7fa fbc3 	bl	40d4 <__sinit>
    994e:	e7ac      	b.n	98aa <__swsetup_r+0x12>
    9950:	2209      	movs	r2, #9
    9952:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9956:	602a      	str	r2, [r5, #0]
    9958:	f04f 30ff 	mov.w	r0, #4294967295
    995c:	81a3      	strh	r3, [r4, #12]
    995e:	bd38      	pop	{r3, r4, r5, pc}
    9960:	20001680 	.word	0x20001680

00009964 <__fputwc>:
    9964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9968:	b082      	sub	sp, #8
    996a:	4682      	mov	sl, r0
    996c:	4688      	mov	r8, r1
    996e:	4614      	mov	r4, r2
    9970:	f7fa fdf0 	bl	4554 <__locale_mb_cur_max>
    9974:	2801      	cmp	r0, #1
    9976:	d103      	bne.n	9980 <__fputwc+0x1c>
    9978:	f108 33ff 	add.w	r3, r8, #4294967295
    997c:	2bfe      	cmp	r3, #254	; 0xfe
    997e:	d936      	bls.n	99ee <__fputwc+0x8a>
    9980:	f10d 0904 	add.w	r9, sp, #4
    9984:	4642      	mov	r2, r8
    9986:	f104 035c 	add.w	r3, r4, #92	; 0x5c
    998a:	4649      	mov	r1, r9
    998c:	4650      	mov	r0, sl
    998e:	f7fe fd01 	bl	8394 <_wcrtomb_r>
    9992:	1c42      	adds	r2, r0, #1
    9994:	4606      	mov	r6, r0
    9996:	d032      	beq.n	99fe <__fputwc+0x9a>
    9998:	b320      	cbz	r0, 99e4 <__fputwc+0x80>
    999a:	f89d c004 	ldrb.w	ip, [sp, #4]
    999e:	2500      	movs	r5, #0
    99a0:	e009      	b.n	99b6 <__fputwc+0x52>
    99a2:	6823      	ldr	r3, [r4, #0]
    99a4:	1c5a      	adds	r2, r3, #1
    99a6:	6022      	str	r2, [r4, #0]
    99a8:	f883 c000 	strb.w	ip, [r3]
    99ac:	3501      	adds	r5, #1
    99ae:	42b5      	cmp	r5, r6
    99b0:	d218      	bcs.n	99e4 <__fputwc+0x80>
    99b2:	f819 cf01 	ldrb.w	ip, [r9, #1]!
    99b6:	68a3      	ldr	r3, [r4, #8]
    99b8:	3b01      	subs	r3, #1
    99ba:	2b00      	cmp	r3, #0
    99bc:	60a3      	str	r3, [r4, #8]
    99be:	daf0      	bge.n	99a2 <__fputwc+0x3e>
    99c0:	69a7      	ldr	r7, [r4, #24]
    99c2:	42bb      	cmp	r3, r7
    99c4:	4661      	mov	r1, ip
    99c6:	4622      	mov	r2, r4
    99c8:	4650      	mov	r0, sl
    99ca:	db02      	blt.n	99d2 <__fputwc+0x6e>
    99cc:	f1bc 0f0a 	cmp.w	ip, #10
    99d0:	d1e7      	bne.n	99a2 <__fputwc+0x3e>
    99d2:	f000 f953 	bl	9c7c <__swbuf_r>
    99d6:	1c43      	adds	r3, r0, #1
    99d8:	d1e8      	bne.n	99ac <__fputwc+0x48>
    99da:	4606      	mov	r6, r0
    99dc:	4630      	mov	r0, r6
    99de:	b002      	add	sp, #8
    99e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    99e4:	4646      	mov	r6, r8
    99e6:	4630      	mov	r0, r6
    99e8:	b002      	add	sp, #8
    99ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    99ee:	fa5f fc88 	uxtb.w	ip, r8
    99f2:	f88d c004 	strb.w	ip, [sp, #4]
    99f6:	4606      	mov	r6, r0
    99f8:	f10d 0904 	add.w	r9, sp, #4
    99fc:	e7cf      	b.n	999e <__fputwc+0x3a>
    99fe:	89a3      	ldrh	r3, [r4, #12]
    9a00:	4630      	mov	r0, r6
    9a02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9a06:	81a3      	strh	r3, [r4, #12]
    9a08:	b002      	add	sp, #8
    9a0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9a0e:	bf00      	nop

00009a10 <_fputwc_r>:
    9a10:	b530      	push	{r4, r5, lr}
    9a12:	6e53      	ldr	r3, [r2, #100]	; 0x64
    9a14:	f013 0f01 	tst.w	r3, #1
    9a18:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    9a1c:	4614      	mov	r4, r2
    9a1e:	b083      	sub	sp, #12
    9a20:	4605      	mov	r5, r0
    9a22:	b29a      	uxth	r2, r3
    9a24:	d101      	bne.n	9a2a <_fputwc_r+0x1a>
    9a26:	0598      	lsls	r0, r3, #22
    9a28:	d51c      	bpl.n	9a64 <_fputwc_r+0x54>
    9a2a:	0490      	lsls	r0, r2, #18
    9a2c:	d406      	bmi.n	9a3c <_fputwc_r+0x2c>
    9a2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
    9a30:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    9a34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    9a38:	81a3      	strh	r3, [r4, #12]
    9a3a:	6662      	str	r2, [r4, #100]	; 0x64
    9a3c:	4622      	mov	r2, r4
    9a3e:	4628      	mov	r0, r5
    9a40:	f7ff ff90 	bl	9964 <__fputwc>
    9a44:	6e63      	ldr	r3, [r4, #100]	; 0x64
    9a46:	07da      	lsls	r2, r3, #31
    9a48:	4605      	mov	r5, r0
    9a4a:	d402      	bmi.n	9a52 <_fputwc_r+0x42>
    9a4c:	89a3      	ldrh	r3, [r4, #12]
    9a4e:	059b      	lsls	r3, r3, #22
    9a50:	d502      	bpl.n	9a58 <_fputwc_r+0x48>
    9a52:	4628      	mov	r0, r5
    9a54:	b003      	add	sp, #12
    9a56:	bd30      	pop	{r4, r5, pc}
    9a58:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9a5a:	f7fa fe17 	bl	468c <__retarget_lock_release_recursive>
    9a5e:	4628      	mov	r0, r5
    9a60:	b003      	add	sp, #12
    9a62:	bd30      	pop	{r4, r5, pc}
    9a64:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9a66:	9101      	str	r1, [sp, #4]
    9a68:	f7fa fe0e 	bl	4688 <__retarget_lock_acquire_recursive>
    9a6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    9a70:	9901      	ldr	r1, [sp, #4]
    9a72:	b29a      	uxth	r2, r3
    9a74:	e7d9      	b.n	9a2a <_fputwc_r+0x1a>
    9a76:	bf00      	nop

00009a78 <_wcsnrtombs_l>:
    9a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9a7c:	b08b      	sub	sp, #44	; 0x2c
    9a7e:	e9dd 8a15 	ldrd	r8, sl, [sp, #84]	; 0x54
    9a82:	9f14      	ldr	r7, [sp, #80]	; 0x50
    9a84:	9103      	str	r1, [sp, #12]
    9a86:	4681      	mov	r9, r0
    9a88:	9205      	str	r2, [sp, #20]
    9a8a:	461e      	mov	r6, r3
    9a8c:	f1b8 0f00 	cmp.w	r8, #0
    9a90:	d05c      	beq.n	9b4c <_wcsnrtombs_l+0xd4>
    9a92:	9b03      	ldr	r3, [sp, #12]
    9a94:	2b00      	cmp	r3, #0
    9a96:	d05e      	beq.n	9b56 <_wcsnrtombs_l+0xde>
    9a98:	9b05      	ldr	r3, [sp, #20]
    9a9a:	681d      	ldr	r5, [r3, #0]
    9a9c:	2f00      	cmp	r7, #0
    9a9e:	d06a      	beq.n	9b76 <_wcsnrtombs_l+0xfe>
    9aa0:	1e74      	subs	r4, r6, #1
    9aa2:	b34e      	cbz	r6, 9af8 <_wcsnrtombs_l+0x80>
    9aa4:	9b03      	ldr	r3, [sp, #12]
    9aa6:	9304      	str	r3, [sp, #16]
    9aa8:	3d04      	subs	r5, #4
    9aaa:	2600      	movs	r6, #0
    9aac:	9501      	str	r5, [sp, #4]
    9aae:	e00b      	b.n	9ac8 <_wcsnrtombs_l+0x50>
    9ab0:	9b03      	ldr	r3, [sp, #12]
    9ab2:	bb2b      	cbnz	r3, 9b00 <_wcsnrtombs_l+0x88>
    9ab4:	9b01      	ldr	r3, [sp, #4]
    9ab6:	681a      	ldr	r2, [r3, #0]
    9ab8:	2a00      	cmp	r2, #0
    9aba:	d03a      	beq.n	9b32 <_wcsnrtombs_l+0xba>
    9abc:	45bc      	cmp	ip, r7
    9abe:	d25c      	bcs.n	9b7a <_wcsnrtombs_l+0x102>
    9ac0:	3c01      	subs	r4, #1
    9ac2:	1c63      	adds	r3, r4, #1
    9ac4:	4666      	mov	r6, ip
    9ac6:	d017      	beq.n	9af8 <_wcsnrtombs_l+0x80>
    9ac8:	f8d8 3000 	ldr.w	r3, [r8]
    9acc:	9302      	str	r3, [sp, #8]
    9ace:	9b01      	ldr	r3, [sp, #4]
    9ad0:	f8da 50e0 	ldr.w	r5, [sl, #224]	; 0xe0
    9ad4:	f853 2f04 	ldr.w	r2, [r3, #4]!
    9ad8:	9301      	str	r3, [sp, #4]
    9ada:	a907      	add	r1, sp, #28
    9adc:	4643      	mov	r3, r8
    9ade:	4648      	mov	r0, r9
    9ae0:	f8d8 b004 	ldr.w	fp, [r8, #4]
    9ae4:	47a8      	blx	r5
    9ae6:	1c42      	adds	r2, r0, #1
    9ae8:	d03a      	beq.n	9b60 <_wcsnrtombs_l+0xe8>
    9aea:	eb00 0c06 	add.w	ip, r0, r6
    9aee:	45bc      	cmp	ip, r7
    9af0:	d9de      	bls.n	9ab0 <_wcsnrtombs_l+0x38>
    9af2:	9b02      	ldr	r3, [sp, #8]
    9af4:	e9c8 3b00 	strd	r3, fp, [r8]
    9af8:	4630      	mov	r0, r6
    9afa:	b00b      	add	sp, #44	; 0x2c
    9afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9b00:	2800      	cmp	r0, #0
    9b02:	dd0e      	ble.n	9b22 <_wcsnrtombs_l+0xaa>
    9b04:	9b04      	ldr	r3, [sp, #16]
    9b06:	9d01      	ldr	r5, [sp, #4]
    9b08:	4418      	add	r0, r3
    9b0a:	1e5a      	subs	r2, r3, #1
    9b0c:	a907      	add	r1, sp, #28
    9b0e:	f100 3eff 	add.w	lr, r0, #4294967295
    9b12:	f811 3b01 	ldrb.w	r3, [r1], #1
    9b16:	f802 3f01 	strb.w	r3, [r2, #1]!
    9b1a:	4572      	cmp	r2, lr
    9b1c:	d1f9      	bne.n	9b12 <_wcsnrtombs_l+0x9a>
    9b1e:	9501      	str	r5, [sp, #4]
    9b20:	9004      	str	r0, [sp, #16]
    9b22:	9b05      	ldr	r3, [sp, #20]
    9b24:	681a      	ldr	r2, [r3, #0]
    9b26:	3204      	adds	r2, #4
    9b28:	601a      	str	r2, [r3, #0]
    9b2a:	9b01      	ldr	r3, [sp, #4]
    9b2c:	681a      	ldr	r2, [r3, #0]
    9b2e:	2a00      	cmp	r2, #0
    9b30:	d1c4      	bne.n	9abc <_wcsnrtombs_l+0x44>
    9b32:	9b03      	ldr	r3, [sp, #12]
    9b34:	b10b      	cbz	r3, 9b3a <_wcsnrtombs_l+0xc2>
    9b36:	9b05      	ldr	r3, [sp, #20]
    9b38:	601a      	str	r2, [r3, #0]
    9b3a:	f10c 36ff 	add.w	r6, ip, #4294967295
    9b3e:	2200      	movs	r2, #0
    9b40:	4630      	mov	r0, r6
    9b42:	f8c8 2000 	str.w	r2, [r8]
    9b46:	b00b      	add	sp, #44	; 0x2c
    9b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9b4c:	9b03      	ldr	r3, [sp, #12]
    9b4e:	f500 7886 	add.w	r8, r0, #268	; 0x10c
    9b52:	2b00      	cmp	r3, #0
    9b54:	d1a0      	bne.n	9a98 <_wcsnrtombs_l+0x20>
    9b56:	9b05      	ldr	r3, [sp, #20]
    9b58:	f04f 37ff 	mov.w	r7, #4294967295
    9b5c:	681d      	ldr	r5, [r3, #0]
    9b5e:	e79f      	b.n	9aa0 <_wcsnrtombs_l+0x28>
    9b60:	4606      	mov	r6, r0
    9b62:	218a      	movs	r1, #138	; 0x8a
    9b64:	2200      	movs	r2, #0
    9b66:	4630      	mov	r0, r6
    9b68:	f8c9 1000 	str.w	r1, [r9]
    9b6c:	f8c8 2000 	str.w	r2, [r8]
    9b70:	b00b      	add	sp, #44	; 0x2c
    9b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9b76:	463e      	mov	r6, r7
    9b78:	e7be      	b.n	9af8 <_wcsnrtombs_l+0x80>
    9b7a:	4666      	mov	r6, ip
    9b7c:	e7bc      	b.n	9af8 <_wcsnrtombs_l+0x80>
    9b7e:	bf00      	nop

00009b80 <_wcsnrtombs_r>:
    9b80:	b510      	push	{r4, lr}
    9b82:	b084      	sub	sp, #16
    9b84:	4c05      	ldr	r4, [pc, #20]	; (9b9c <_wcsnrtombs_r+0x1c>)
    9b86:	9806      	ldr	r0, [sp, #24]
    9b88:	9000      	str	r0, [sp, #0]
    9b8a:	9807      	ldr	r0, [sp, #28]
    9b8c:	9001      	str	r0, [sp, #4]
    9b8e:	4804      	ldr	r0, [pc, #16]	; (9ba0 <_wcsnrtombs_r+0x20>)
    9b90:	6800      	ldr	r0, [r0, #0]
    9b92:	9402      	str	r4, [sp, #8]
    9b94:	f7ff ff70 	bl	9a78 <_wcsnrtombs_l>
    9b98:	b004      	add	sp, #16
    9b9a:	bd10      	pop	{r4, pc}
    9b9c:	200010f8 	.word	0x200010f8
    9ba0:	20001680 	.word	0x20001680

00009ba4 <__smakebuf_r>:
    9ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9ba8:	898b      	ldrh	r3, [r1, #12]
    9baa:	460c      	mov	r4, r1
    9bac:	0799      	lsls	r1, r3, #30
    9bae:	b096      	sub	sp, #88	; 0x58
    9bb0:	d508      	bpl.n	9bc4 <__smakebuf_r+0x20>
    9bb2:	f104 0343 	add.w	r3, r4, #67	; 0x43
    9bb6:	2201      	movs	r2, #1
    9bb8:	e9c4 3204 	strd	r3, r2, [r4, #16]
    9bbc:	6023      	str	r3, [r4, #0]
    9bbe:	b016      	add	sp, #88	; 0x58
    9bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9bc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    9bc8:	2900      	cmp	r1, #0
    9bca:	4606      	mov	r6, r0
    9bcc:	db25      	blt.n	9c1a <__smakebuf_r+0x76>
    9bce:	466a      	mov	r2, sp
    9bd0:	f000 f8ac 	bl	9d2c <_fstat_r>
    9bd4:	2800      	cmp	r0, #0
    9bd6:	db1f      	blt.n	9c18 <__smakebuf_r+0x74>
    9bd8:	9d01      	ldr	r5, [sp, #4]
    9bda:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
    9bde:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
    9be2:	fab5 f585 	clz	r5, r5
    9be6:	f44f 6880 	mov.w	r8, #1024	; 0x400
    9bea:	096d      	lsrs	r5, r5, #5
    9bec:	f44f 6700 	mov.w	r7, #2048	; 0x800
    9bf0:	4641      	mov	r1, r8
    9bf2:	4630      	mov	r0, r6
    9bf4:	f7f9 fc5c 	bl	34b0 <_malloc_r>
    9bf8:	b1e0      	cbz	r0, 9c34 <__smakebuf_r+0x90>
    9bfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    9bfe:	f8c4 8014 	str.w	r8, [r4, #20]
    9c02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    9c06:	6020      	str	r0, [r4, #0]
    9c08:	6120      	str	r0, [r4, #16]
    9c0a:	81a3      	strh	r3, [r4, #12]
    9c0c:	bb35      	cbnz	r5, 9c5c <__smakebuf_r+0xb8>
    9c0e:	433b      	orrs	r3, r7
    9c10:	81a3      	strh	r3, [r4, #12]
    9c12:	b016      	add	sp, #88	; 0x58
    9c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9c18:	89a3      	ldrh	r3, [r4, #12]
    9c1a:	f013 0580 	ands.w	r5, r3, #128	; 0x80
    9c1e:	d019      	beq.n	9c54 <__smakebuf_r+0xb0>
    9c20:	f04f 0840 	mov.w	r8, #64	; 0x40
    9c24:	2500      	movs	r5, #0
    9c26:	4641      	mov	r1, r8
    9c28:	4630      	mov	r0, r6
    9c2a:	462f      	mov	r7, r5
    9c2c:	f7f9 fc40 	bl	34b0 <_malloc_r>
    9c30:	2800      	cmp	r0, #0
    9c32:	d1e2      	bne.n	9bfa <__smakebuf_r+0x56>
    9c34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    9c38:	059a      	lsls	r2, r3, #22
    9c3a:	d4c0      	bmi.n	9bbe <__smakebuf_r+0x1a>
    9c3c:	f023 0303 	bic.w	r3, r3, #3
    9c40:	f104 0243 	add.w	r2, r4, #67	; 0x43
    9c44:	f043 0302 	orr.w	r3, r3, #2
    9c48:	2101      	movs	r1, #1
    9c4a:	e9c4 2104 	strd	r2, r1, [r4, #16]
    9c4e:	81a3      	strh	r3, [r4, #12]
    9c50:	6022      	str	r2, [r4, #0]
    9c52:	e7b4      	b.n	9bbe <__smakebuf_r+0x1a>
    9c54:	f44f 6880 	mov.w	r8, #1024	; 0x400
    9c58:	462f      	mov	r7, r5
    9c5a:	e7c9      	b.n	9bf0 <__smakebuf_r+0x4c>
    9c5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    9c60:	4630      	mov	r0, r6
    9c62:	f000 f879 	bl	9d58 <_isatty_r>
    9c66:	b910      	cbnz	r0, 9c6e <__smakebuf_r+0xca>
    9c68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    9c6c:	e7cf      	b.n	9c0e <__smakebuf_r+0x6a>
    9c6e:	89a3      	ldrh	r3, [r4, #12]
    9c70:	f023 0303 	bic.w	r3, r3, #3
    9c74:	f043 0301 	orr.w	r3, r3, #1
    9c78:	b21b      	sxth	r3, r3
    9c7a:	e7c8      	b.n	9c0e <__smakebuf_r+0x6a>

00009c7c <__swbuf_r>:
    9c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9c7e:	460d      	mov	r5, r1
    9c80:	4614      	mov	r4, r2
    9c82:	4606      	mov	r6, r0
    9c84:	b110      	cbz	r0, 9c8c <__swbuf_r+0x10>
    9c86:	6b43      	ldr	r3, [r0, #52]	; 0x34
    9c88:	2b00      	cmp	r3, #0
    9c8a:	d04c      	beq.n	9d26 <__swbuf_r+0xaa>
    9c8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    9c90:	69a3      	ldr	r3, [r4, #24]
    9c92:	60a3      	str	r3, [r4, #8]
    9c94:	0717      	lsls	r7, r2, #28
    9c96:	b290      	uxth	r0, r2
    9c98:	d51b      	bpl.n	9cd2 <__swbuf_r+0x56>
    9c9a:	6923      	ldr	r3, [r4, #16]
    9c9c:	b1cb      	cbz	r3, 9cd2 <__swbuf_r+0x56>
    9c9e:	b2ed      	uxtb	r5, r5
    9ca0:	0481      	lsls	r1, r0, #18
    9ca2:	462f      	mov	r7, r5
    9ca4:	d522      	bpl.n	9cec <__swbuf_r+0x70>
    9ca6:	6822      	ldr	r2, [r4, #0]
    9ca8:	6961      	ldr	r1, [r4, #20]
    9caa:	1ad3      	subs	r3, r2, r3
    9cac:	4299      	cmp	r1, r3
    9cae:	dd29      	ble.n	9d04 <__swbuf_r+0x88>
    9cb0:	3301      	adds	r3, #1
    9cb2:	68a1      	ldr	r1, [r4, #8]
    9cb4:	3901      	subs	r1, #1
    9cb6:	60a1      	str	r1, [r4, #8]
    9cb8:	1c51      	adds	r1, r2, #1
    9cba:	6021      	str	r1, [r4, #0]
    9cbc:	7015      	strb	r5, [r2, #0]
    9cbe:	6962      	ldr	r2, [r4, #20]
    9cc0:	429a      	cmp	r2, r3
    9cc2:	d027      	beq.n	9d14 <__swbuf_r+0x98>
    9cc4:	89a3      	ldrh	r3, [r4, #12]
    9cc6:	07db      	lsls	r3, r3, #31
    9cc8:	d501      	bpl.n	9cce <__swbuf_r+0x52>
    9cca:	2d0a      	cmp	r5, #10
    9ccc:	d022      	beq.n	9d14 <__swbuf_r+0x98>
    9cce:	4638      	mov	r0, r7
    9cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9cd2:	4621      	mov	r1, r4
    9cd4:	4630      	mov	r0, r6
    9cd6:	f7ff fddf 	bl	9898 <__swsetup_r>
    9cda:	bb08      	cbnz	r0, 9d20 <__swbuf_r+0xa4>
    9cdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    9ce0:	6923      	ldr	r3, [r4, #16]
    9ce2:	b290      	uxth	r0, r2
    9ce4:	b2ed      	uxtb	r5, r5
    9ce6:	0481      	lsls	r1, r0, #18
    9ce8:	462f      	mov	r7, r5
    9cea:	d4dc      	bmi.n	9ca6 <__swbuf_r+0x2a>
    9cec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    9cf0:	81a2      	strh	r2, [r4, #12]
    9cf2:	6e62      	ldr	r2, [r4, #100]	; 0x64
    9cf4:	6961      	ldr	r1, [r4, #20]
    9cf6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
    9cfa:	6662      	str	r2, [r4, #100]	; 0x64
    9cfc:	6822      	ldr	r2, [r4, #0]
    9cfe:	1ad3      	subs	r3, r2, r3
    9d00:	4299      	cmp	r1, r3
    9d02:	dcd5      	bgt.n	9cb0 <__swbuf_r+0x34>
    9d04:	4621      	mov	r1, r4
    9d06:	4630      	mov	r0, r6
    9d08:	f7fd fb20 	bl	734c <_fflush_r>
    9d0c:	b940      	cbnz	r0, 9d20 <__swbuf_r+0xa4>
    9d0e:	6822      	ldr	r2, [r4, #0]
    9d10:	2301      	movs	r3, #1
    9d12:	e7ce      	b.n	9cb2 <__swbuf_r+0x36>
    9d14:	4621      	mov	r1, r4
    9d16:	4630      	mov	r0, r6
    9d18:	f7fd fb18 	bl	734c <_fflush_r>
    9d1c:	2800      	cmp	r0, #0
    9d1e:	d0d6      	beq.n	9cce <__swbuf_r+0x52>
    9d20:	f04f 37ff 	mov.w	r7, #4294967295
    9d24:	e7d3      	b.n	9cce <__swbuf_r+0x52>
    9d26:	f7fa f9d5 	bl	40d4 <__sinit>
    9d2a:	e7af      	b.n	9c8c <__swbuf_r+0x10>

00009d2c <_fstat_r>:
    9d2c:	b570      	push	{r4, r5, r6, lr}
    9d2e:	460c      	mov	r4, r1
    9d30:	4d08      	ldr	r5, [pc, #32]	; (9d54 <_fstat_r+0x28>)
    9d32:	4603      	mov	r3, r0
    9d34:	2600      	movs	r6, #0
    9d36:	4620      	mov	r0, r4
    9d38:	4611      	mov	r1, r2
    9d3a:	461c      	mov	r4, r3
    9d3c:	602e      	str	r6, [r5, #0]
    9d3e:	f7f8 f86b 	bl	1e18 <_fstat>
    9d42:	1c43      	adds	r3, r0, #1
    9d44:	d000      	beq.n	9d48 <_fstat_r+0x1c>
    9d46:	bd70      	pop	{r4, r5, r6, pc}
    9d48:	682b      	ldr	r3, [r5, #0]
    9d4a:	2b00      	cmp	r3, #0
    9d4c:	d0fb      	beq.n	9d46 <_fstat_r+0x1a>
    9d4e:	6023      	str	r3, [r4, #0]
    9d50:	bd70      	pop	{r4, r5, r6, pc}
    9d52:	bf00      	nop
    9d54:	20002068 	.word	0x20002068

00009d58 <_isatty_r>:
    9d58:	b538      	push	{r3, r4, r5, lr}
    9d5a:	4d07      	ldr	r5, [pc, #28]	; (9d78 <_isatty_r+0x20>)
    9d5c:	2200      	movs	r2, #0
    9d5e:	4604      	mov	r4, r0
    9d60:	4608      	mov	r0, r1
    9d62:	602a      	str	r2, [r5, #0]
    9d64:	f7f8 f85e 	bl	1e24 <_isatty>
    9d68:	1c43      	adds	r3, r0, #1
    9d6a:	d000      	beq.n	9d6e <_isatty_r+0x16>
    9d6c:	bd38      	pop	{r3, r4, r5, pc}
    9d6e:	682b      	ldr	r3, [r5, #0]
    9d70:	2b00      	cmp	r3, #0
    9d72:	d0fb      	beq.n	9d6c <_isatty_r+0x14>
    9d74:	6023      	str	r3, [r4, #0]
    9d76:	bd38      	pop	{r3, r4, r5, pc}
    9d78:	20002068 	.word	0x20002068
    9d7c:	00000000 	.word	0x00000000

00009d80 <___reboot_Teensyduino__veneer>:
    9d80:	f85f f000 	ldr.w	pc, [pc]	; 9d84 <___reboot_Teensyduino__veneer+0x4>
    9d84:	60001d8d 	.word	0x60001d8d

00009d88 <___init_veneer>:
    9d88:	f85f f000 	ldr.w	pc, [pc]	; 9d8c <___init_veneer+0x4>
    9d8c:	60001e35 	.word	0x60001e35

Disassembly of section .fini:

00009d90 <_fini>:
    9d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9d92:	bf00      	nop
