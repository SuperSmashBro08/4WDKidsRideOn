
C:\Users\johnw\AppData\Local\arduino\sketches\7A41F3B4C03617EFA892FC94CDC79164/teensystub.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
	if (dest == src) return;
	do {
		*dest++ = *src++;
	} while (dest < dest_end);
#else
	asm volatile(
60001400:	4281      	cmp	r1, r0
60001402:	d005      	beq.n	60001410 <memory_copy+0x10>
60001404:	f851 3b04 	ldr.w	r3, [r1], #4
60001408:	f840 3b04 	str.w	r3, [r0], #4
6000140c:	4282      	cmp	r2, r0
6000140e:	d8f9      	bhi.n	60001404 <memory_copy+0x4>
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	"2:					\n"
	: [dest] "+r" (dest), [src] "+r" (src) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001410:	4770      	bx	lr
60001412:	bf00      	nop

60001414 <memory_clear.constprop.0>:
#if 0
	while (dest < dest_end) {
		*dest++ = 0;
	}
#else
	asm volatile(
60001414:	4a04      	ldr	r2, [pc, #16]	; (60001428 <memory_clear.constprop.0+0x14>)
60001416:	4905      	ldr	r1, [pc, #20]	; (6000142c <memory_clear.constprop.0+0x18>)
60001418:	f04f 0300 	mov.w	r3, #0
6000141c:	f842 3b04 	str.w	r3, [r2], #4
60001420:	4291      	cmp	r1, r2
60001422:	d8fb      	bhi.n	6000141c <memory_clear.constprop.0+0x8>
	"1:	str.w	r3, [%[dest]], #4	\n"
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	: [dest] "+r" (dest) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001424:	4770      	bx	lr
60001426:	bf00      	nop
60001428:	20001ac0 	.word	0x20001ac0
6000142c:	20002140 	.word	0x20002140

60001430 <ResetHandler2>:
{
60001430:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	__asm__ volatile("dsb":::"memory");
60001434:	f3bf 8f4f 	dsb	sy
	asm volatile("nop");
60001438:	bf00      	nop
	asm volatile("nop");
6000143a:	bf00      	nop
	asm volatile("nop");
6000143c:	bf00      	nop
	asm volatile("nop");
6000143e:	bf00      	nop
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
60001440:	f000 f942 	bl	600016c8 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001444:	4b68      	ldr	r3, [pc, #416]	; (600015e8 <ResetHandler2+0x1b8>)
60001446:	2208      	movs	r2, #8
60001448:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	asm volatile("nop");
6000144c:	bf00      	nop
	asm volatile("nop");
6000144e:	bf00      	nop
	asm volatile("nop");
60001450:	bf00      	nop
	asm volatile("nop");
60001452:	bf00      	nop
	asm volatile("nop");
60001454:	bf00      	nop
	asm volatile("nop");
60001456:	bf00      	nop
	asm volatile("nop");
60001458:	bf00      	nop
	asm volatile("nop");
6000145a:	bf00      	nop
	asm volatile("nop");
6000145c:	bf00      	nop
	asm volatile("nop");
6000145e:	bf00      	nop
	asm volatile("nop");
60001460:	bf00      	nop
	asm volatile("nop");
60001462:	bf00      	nop
	asm volatile("nop");
60001464:	bf00      	nop
	asm volatile("nop");
60001466:	bf00      	nop
	asm volatile("nop");
60001468:	bf00      	nop
	asm volatile("nop");
6000146a:	bf00      	nop
	memory_copy(&_stext, &_stextload, &_etext);
6000146c:	4a5f      	ldr	r2, [pc, #380]	; (600015ec <ResetHandler2+0x1bc>)
6000146e:	4960      	ldr	r1, [pc, #384]	; (600015f0 <ResetHandler2+0x1c0>)
60001470:	4860      	ldr	r0, [pc, #384]	; (600015f4 <ResetHandler2+0x1c4>)
60001472:	f7ff ffc5 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001476:	4a60      	ldr	r2, [pc, #384]	; (600015f8 <ResetHandler2+0x1c8>)
60001478:	4960      	ldr	r1, [pc, #384]	; (600015fc <ResetHandler2+0x1cc>)
6000147a:	4861      	ldr	r0, [pc, #388]	; (60001600 <ResetHandler2+0x1d0>)
6000147c:	f7ff ffc0 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
60001480:	4c60      	ldr	r4, [pc, #384]	; (60001604 <ResetHandler2+0x1d4>)
60001482:	f7ff ffc7 	bl	60001414 <memory_clear.constprop.0>
	SCB_CPACR = 0x00F00000;
60001486:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
6000148a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000148e:	2300      	movs	r3, #0
60001490:	4a5d      	ldr	r2, [pc, #372]	; (60001608 <ResetHandler2+0x1d8>)
	SCB_CPACR = 0x00F00000;
60001492:	f8c1 0d88 	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001496:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
6000149a:	3301      	adds	r3, #1
6000149c:	2bb0      	cmp	r3, #176	; 0xb0
6000149e:	d1fa      	bne.n	60001496 <ResetHandler2+0x66>
600014a0:	4b5a      	ldr	r3, [pc, #360]	; (6000160c <ResetHandler2+0x1dc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600014a2:	2180      	movs	r1, #128	; 0x80
600014a4:	4a5a      	ldr	r2, [pc, #360]	; (60001610 <ResetHandler2+0x1e0>)
600014a6:	f803 1b01 	strb.w	r1, [r3], #1
600014aa:	4293      	cmp	r3, r2
600014ac:	d1fb      	bne.n	600014a6 <ResetHandler2+0x76>
	SCB_VTOR = (uint32_t)_VectorsRam;
600014ae:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014b2:	4e4d      	ldr	r6, [pc, #308]	; (600015e8 <ResetHandler2+0x1b8>)
600014b4:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014b8:	f8df b184 	ldr.w	fp, [pc, #388]	; 60001640 <ResetHandler2+0x210>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014bc:	f8df a184 	ldr.w	sl, [pc, #388]	; 60001644 <ResetHandler2+0x214>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014c0:	f04f 31ff 	mov.w	r1, #4294967295
	SCB_VTOR = (uint32_t)_VectorsRam;
600014c4:	f8c5 4d08 	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
600014c8:	2700      	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014ca:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014ce:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014d2:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014d6:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014da:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014de:	f8df 8168 	ldr.w	r8, [pc, #360]	; 60001648 <ResetHandler2+0x218>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014e6:	4a4b      	ldr	r2, [pc, #300]	; (60001614 <ResetHandler2+0x1e4>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e8:	f8c5 3d24 	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ec:	f8d8 301c 	ldr.w	r3, [r8, #28]
600014f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014f8:	f8c8 301c 	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014fc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
60001500:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
60001504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001508:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
6000150c:	6691      	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
6000150e:	66d1      	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001510:	6711      	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001512:	6751      	str	r1, [r2, #116]	; 0x74
	configure_cache();
60001514:	f000 f8e0 	bl	600016d8 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
60001518:	4b3f      	ldr	r3, [pc, #252]	; (60001618 <ResetHandler2+0x1e8>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000151a:	4940      	ldr	r1, [pc, #256]	; (6000161c <ResetHandler2+0x1ec>)
	_VectorsRam[14] = pendablesrvreq_isr;
6000151c:	63a3      	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
6000151e:	4b40      	ldr	r3, [pc, #256]	; (60001620 <ResetHandler2+0x1f0>)
60001520:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001522:	2363      	movs	r3, #99	; 0x63
60001524:	616b      	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001526:	2303      	movs	r3, #3
	SYST_CVR = 0;
60001528:	61af      	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000152a:	612b      	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000152c:	4b3d      	ldr	r3, [pc, #244]	; (60001624 <ResetHandler2+0x1f4>)
6000152e:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001532:	f8d5 3dfc 	ldr.w	r3, [r5, #3580]	; 0xdfc
60001536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000153a:	f8c5 3dfc 	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000153e:	4b3a      	ldr	r3, [pc, #232]	; (60001628 <ResetHandler2+0x1f8>)
60001540:	681a      	ldr	r2, [r3, #0]
60001542:	f042 0201 	orr.w	r2, r2, #1
60001546:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001548:	685b      	ldr	r3, [r3, #4]
6000154a:	600b      	str	r3, [r1, #0]
	usb_pll_start();	
6000154c:	f000 fb0e 	bl	60001b6c <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001550:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001554:	4835      	ldr	r0, [pc, #212]	; (6000162c <ResetHandler2+0x1fc>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001556:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000155a:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000155e:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001562:	f000 fc75 	bl	60001e50 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001566:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
6000156a:	4b31      	ldr	r3, [pc, #196]	; (60001630 <ResetHandler2+0x200>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000156c:	4a31      	ldr	r2, [pc, #196]	; (60001634 <ResetHandler2+0x204>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000156e:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
60001572:	f8c8 106c 	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001576:	601f      	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001578:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000157c:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001580:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001584:	f8c3 7138 	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001588:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000158a:	07db      	lsls	r3, r3, #31
6000158c:	d408      	bmi.n	600015a0 <ResetHandler2+0x170>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000158e:	f642 6315 	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
60001592:	4929      	ldr	r1, [pc, #164]	; (60001638 <ResetHandler2+0x208>)
60001594:	6551      	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001596:	6513      	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001598:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000159a:	f043 0301 	orr.w	r3, r3, #1
6000159e:	6393      	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600015a0:	4a24      	ldr	r2, [pc, #144]	; (60001634 <ResetHandler2+0x204>)
600015a2:	4c26      	ldr	r4, [pc, #152]	; (6000163c <ResetHandler2+0x20c>)
600015a4:	6893      	ldr	r3, [r2, #8]
600015a6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
600015aa:	6093      	str	r3, [r2, #8]
	configure_external_ram();
600015ac:	f000 f91c 	bl	600017e8 <configure_external_ram>
	analog_init();
600015b0:	f000 f860 	bl	60001674 <analog_init>
	pwm_init();
600015b4:	f000 fc58 	bl	60001e68 <__pwm_init_veneer>
	tempmon_init();
600015b8:	f000 fb06 	bl	60001bc8 <tempmon_init>
	startup_middle_hook();
600015bc:	f000 f886 	bl	600016cc <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
600015c0:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015c2:	2b13      	cmp	r3, #19
600015c4:	d9fc      	bls.n	600015c0 <ResetHandler2+0x190>
	usb_init();
600015c6:	f000 fb97 	bl	60001cf8 <usb_init>
600015ca:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015cc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015d0:	d3fb      	bcc.n	600015ca <ResetHandler2+0x19a>
	startup_debug_reset();
600015d2:	f000 f87f 	bl	600016d4 <startup_debug_reset>
	startup_late_hook();
600015d6:	f000 f87b 	bl	600016d0 <startup_default_late_hook>
	__libc_init_array();
600015da:	f000 fc4d 	bl	60001e78 <____libc_init_array_veneer>
	main();
600015de:	f000 fc2f 	bl	60001e40 <__main_veneer>
	while (1) asm("WFI");
600015e2:	bf30      	wfi
600015e4:	e7fd      	b.n	600015e2 <ResetHandler2+0x1b2>
600015e6:	bf00      	nop
600015e8:	400d8000 	.word	0x400d8000
600015ec:	0000a198 	.word	0x0000a198
600015f0:	60001f8c 	.word	0x60001f8c
600015f4:	00000000 	.word	0x00000000
600015f8:	20001ac0 	.word	0x20001ac0
600015fc:	6000c128 	.word	0x6000c128
60001600:	20000000 	.word	0x20000000
60001604:	20001800 	.word	0x20001800
60001608:	00002115 	.word	0x00002115
6000160c:	e000e400 	.word	0xe000e400
60001610:	e000e4a0 	.word	0xe000e4a0
60001614:	400ac000 	.word	0x400ac000
60001618:	0000353d 	.word	0x0000353d
6000161c:	200020e0 	.word	0x200020e0
60001620:	00003541 	.word	0x00003541
60001624:	20200000 	.word	0x20200000
60001628:	e0001000 	.word	0xe0001000
6000162c:	23c34600 	.word	0x23c34600
60001630:	40084000 	.word	0x40084000
60001634:	400d4000 	.word	0x400d4000
60001638:	56c00000 	.word	0x56c00000
6000163c:	200020e4 	.word	0x200020e4
60001640:	2018101b 	.word	0x2018101b
60001644:	13110d0c 	.word	0x13110d0c
60001648:	400fc000 	.word	0x400fc000

6000164c <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000164c:	4b05      	ldr	r3, [pc, #20]	; (60001664 <ResetHandler+0x18>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000164e:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001652:	4a05      	ldr	r2, [pc, #20]	; (60001668 <ResetHandler+0x1c>)
	IOMUXC_GPR_GPR16 = 0x00200007;
60001654:	4805      	ldr	r0, [pc, #20]	; (6000166c <ResetHandler+0x20>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001656:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001658:	6418      	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
6000165a:	4a05      	ldr	r2, [pc, #20]	; (60001670 <ResetHandler+0x24>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000165c:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
6000165e:	4695      	mov	sp, r2
	ResetHandler2();
60001660:	f7ff fee6 	bl	60001430 <ResetHandler2>
60001664:	400ac000 	.word	0x400ac000
60001668:	aaaaaaaf 	.word	0xaaaaaaaf
6000166c:	00200007 	.word	0x00200007
60001670:	20070000 	.word	0x20070000

60001674 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001674:	4b10      	ldr	r3, [pc, #64]	; (600016b8 <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001676:	20a0      	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001678:	4a10      	ldr	r2, [pc, #64]	; (600016bc <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000167a:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
6000167c:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
{
60001680:	b410      	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001682:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001684:	f240 6437 	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001688:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
6000168a:	f441 7140 	orr.w	r1, r1, #768	; 0x300
6000168e:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001690:	6454      	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001692:	6490      	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
60001694:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001696:	061b      	lsls	r3, r3, #24
60001698:	d4fc      	bmi.n	60001694 <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
6000169a:	4a09      	ldr	r2, [pc, #36]	; (600016c0 <analog_init+0x4c>)
6000169c:	f240 6137 	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600016a0:	23a0      	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600016a2:	6451      	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600016a4:	6493      	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
600016a6:	6c93      	ldr	r3, [r2, #72]	; 0x48
600016a8:	f013 0380 	ands.w	r3, r3, #128	; 0x80
600016ac:	d1fb      	bne.n	600016a6 <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
600016ae:	4a05      	ldr	r2, [pc, #20]	; (600016c4 <analog_init+0x50>)
600016b0:	7013      	strb	r3, [r2, #0]
}
600016b2:	f85d 4b04 	ldr.w	r4, [sp], #4
600016b6:	4770      	bx	lr
600016b8:	400fc000 	.word	0x400fc000
600016bc:	400c4000 	.word	0x400c4000
600016c0:	400c8000 	.word	0x400c8000
600016c4:	2000210f 	.word	0x2000210f

600016c8 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
600016c8:	4770      	bx	lr
600016ca:	bf00      	nop

600016cc <startup_default_middle_hook>:
600016cc:	4770      	bx	lr
600016ce:	bf00      	nop

600016d0 <startup_default_late_hook>:
600016d0:	4770      	bx	lr
600016d2:	bf00      	nop

600016d4 <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
600016d4:	bf00      	nop
600016d6:	4770      	bx	lr

600016d8 <configure_cache>:
{
600016d8:	b410      	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
600016da:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
600016de:	2100      	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600016e0:	2410      	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600016e2:	4831      	ldr	r0, [pc, #196]	; (600017a8 <configure_cache+0xd0>)
	SCB_MPU_CTRL = 0; // turn off MPU
600016e4:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600016e8:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600016ec:	2411      	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600016ee:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
600016f2:	482e      	ldr	r0, [pc, #184]	; (600017ac <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600016f4:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600016f8:	2412      	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
600016fa:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600016fe:	482c      	ldr	r0, [pc, #176]	; (600017b0 <configure_cache+0xd8>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001700:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001704:	4a2b      	ldr	r2, [pc, #172]	; (600017b4 <configure_cache+0xdc>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001706:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
6000170a:	4c2b      	ldr	r4, [pc, #172]	; (600017b8 <configure_cache+0xe0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
6000170c:	f042 0215 	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001710:	482a      	ldr	r0, [pc, #168]	; (600017bc <configure_cache+0xe4>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001712:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001716:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
6000171a:	4c29      	ldr	r4, [pc, #164]	; (600017c0 <configure_cache+0xe8>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
6000171c:	4829      	ldr	r0, [pc, #164]	; (600017c4 <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
6000171e:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001722:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001726:	4c28      	ldr	r4, [pc, #160]	; (600017c8 <configure_cache+0xf0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001728:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
6000172c:	4827      	ldr	r0, [pc, #156]	; (600017cc <configure_cache+0xf4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
6000172e:	4a28      	ldr	r2, [pc, #160]	; (600017d0 <configure_cache+0xf8>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001730:	f8c3 4da0 	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001734:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001738:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
6000173c:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001740:	4c24      	ldr	r4, [pc, #144]	; (600017d4 <configure_cache+0xfc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001742:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001744:	4824      	ldr	r0, [pc, #144]	; (600017d8 <configure_cache+0x100>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001746:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
6000174a:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
6000174e:	4a23      	ldr	r2, [pc, #140]	; (600017dc <configure_cache+0x104>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001750:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001754:	4c22      	ldr	r4, [pc, #136]	; (600017e0 <configure_cache+0x108>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001756:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
6000175a:	f102 6240 	add.w	r2, r2, #201326592	; 0xc000000
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000175e:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
60001762:	4820      	ldr	r0, [pc, #128]	; (600017e4 <configure_cache+0x10c>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001764:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
60001768:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
6000176a:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
6000176e:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	asm("nop"); // allow a few cycles for bus writes before enable MPU
60001772:	bf00      	nop
	asm("nop");
60001774:	bf00      	nop
	asm("nop");
60001776:	bf00      	nop
	asm("nop");
60001778:	bf00      	nop
	asm("nop");
6000177a:	bf00      	nop
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
6000177c:	2201      	movs	r2, #1
6000177e:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
60001782:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001786:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
6000178a:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
6000178e:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001792:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001796:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
}
6000179a:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000179e:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
600017a2:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
600017a6:	4770      	bx	lr
600017a8:	1000003f 	.word	0x1000003f
600017ac:	07080025 	.word	0x07080025
600017b0:	00100009 	.word	0x00100009
600017b4:	20002140 	.word	0x20002140
600017b8:	00200013 	.word	0x00200013
600017bc:	07020021 	.word	0x07020021
600017c0:	20000014 	.word	0x20000014
600017c4:	13080025 	.word	0x13080025
600017c8:	10000009 	.word	0x10000009
600017cc:	20200016 	.word	0x20200016
600017d0:	130b0027 	.word	0x130b0027
600017d4:	40000017 	.word	0x40000017
600017d8:	60000018 	.word	0x60000018
600017dc:	070b002f 	.word	0x070b002f
600017e0:	70000019 	.word	0x70000019
600017e4:	8000001a 	.word	0x8000001a

600017e8 <configure_external_ram>:
{
600017e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600017ea:	4bb8      	ldr	r3, [pc, #736]	; (60001acc <configure_external_ram+0x2e4>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
600017ec:	2218      	movs	r2, #24
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600017ee:	4eb8      	ldr	r6, [pc, #736]	; (60001ad0 <configure_external_ram+0x2e8>)
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600017f0:	2001      	movs	r0, #1
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
600017f2:	4fb8      	ldr	r7, [pc, #736]	; (60001ad4 <configure_external_ram+0x2ec>)
{
600017f4:	b083      	sub	sp, #12
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600017f6:	f8c3 625c 	str.w	r6, [r3, #604]	; 0x25c
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600017fa:	49b7      	ldr	r1, [pc, #732]	; (60001ad8 <configure_external_ram+0x2f0>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
600017fc:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001800:	4db6      	ldr	r5, [pc, #728]	; (60001adc <configure_external_ram+0x2f4>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001802:	f8c3 6264 	str.w	r6, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60001806:	f5a6 4630 	sub.w	r6, r6, #45056	; 0xb000
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
6000180a:	4cb5      	ldr	r4, [pc, #724]	; (60001ae0 <configure_external_ram+0x2f8>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
6000180c:	f8c3 6268 	str.w	r6, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001810:	f8c3 526c 	str.w	r5, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001814:	f8c3 5270 	str.w	r5, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001818:	f8c3 5274 	str.w	r5, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
6000181c:	f8c3 5278 	str.w	r5, [r3, #632]	; 0x278
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001820:	f248 750c 	movw	r5, #34572	; 0x870c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001824:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
60001826:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
60001828:	675a      	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
6000182a:	679a      	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
6000182c:	67da      	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
6000182e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
60001832:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
60001836:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
6000183a:	f8c1 032c 	str.w	r0, [r1, #812]	; 0x32c
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
6000183e:	4aa9      	ldr	r2, [pc, #676]	; (60001ae4 <configure_external_ram+0x2fc>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
60001840:	f8c1 0330 	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
60001844:	f8c1 0334 	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
60001848:	f8c1 0338 	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
6000184c:	f8c1 033c 	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
60001850:	f8c1 0350 	str.w	r0, [r1, #848]	; 0x350
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001854:	69a1      	ldr	r1, [r4, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001856:	4ba4      	ldr	r3, [pc, #656]	; (60001ae8 <configure_external_ram+0x300>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001858:	400a      	ands	r2, r1
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
6000185a:	48a4      	ldr	r0, [pc, #656]	; (60001aec <configure_external_ram+0x304>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000185c:	49a4      	ldr	r1, [pc, #656]	; (60001af0 <configure_external_ram+0x308>)
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
6000185e:	4313      	orrs	r3, r2
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001860:	4aa4      	ldr	r2, [pc, #656]	; (60001af4 <configure_external_ram+0x30c>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001862:	61a3      	str	r3, [r4, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60001864:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
60001868:	f043 030c 	orr.w	r3, r3, #12
6000186c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001870:	f04f 34ff 	mov.w	r4, #4294967295
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001874:	6803      	ldr	r3, [r0, #0]
60001876:	f043 0302 	orr.w	r3, r3, #2
6000187a:	6003      	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
6000187c:	6803      	ldr	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
6000187e:	402b      	ands	r3, r5
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001880:	f44f 5500 	mov.w	r5, #8192	; 0x2000
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001884:	431a      	orrs	r2, r3
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001886:	4b9c      	ldr	r3, [pc, #624]	; (60001af8 <configure_external_ram+0x310>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001888:	6002      	str	r2, [r0, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
6000188a:	6044      	str	r4, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000188c:	688a      	ldr	r2, [r1, #8]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000188e:	4c9b      	ldr	r4, [pc, #620]	; (60001afc <configure_external_ram+0x314>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001890:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001892:	4a9b      	ldr	r2, [pc, #620]	; (60001b00 <configure_external_ram+0x318>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001894:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001898:	6083      	str	r3, [r0, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
6000189a:	68c3      	ldr	r3, [r0, #12]
6000189c:	f023 0378 	bic.w	r3, r3, #120	; 0x78
600018a0:	60c3      	str	r3, [r0, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600018a2:	6a03      	ldr	r3, [r0, #32]
600018a4:	4013      	ands	r3, r2
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
600018a6:	4323      	orrs	r3, r4
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600018a8:	6203      	str	r3, [r0, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600018aa:	6a03      	ldr	r3, [r0, #32]
600018ac:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF2CR0 = mask;
600018ae:	4a95      	ldr	r2, [pc, #596]	; (60001b04 <configure_external_ram+0x31c>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
600018b0:	4323      	orrs	r3, r4
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
600018b2:	4c95      	ldr	r4, [pc, #596]	; (60001b08 <configure_external_ram+0x320>)
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600018b4:	6243      	str	r3, [r0, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
600018b6:	6282      	str	r2, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
600018b8:	62c2      	str	r2, [r0, #44]	; 0x2c
	FLEXSPI2_INTEN = 0;
600018ba:	2200      	movs	r2, #0
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
600018bc:	f8d1 30b8 	ldr.w	r3, [r1, #184]	; 0xb8
600018c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
600018c4:	f043 0301 	orr.w	r3, r3, #1
600018c8:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
600018cc:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600018d0:	498e      	ldr	r1, [pc, #568]	; (60001b0c <configure_external_ram+0x324>)
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
600018d2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
600018d6:	f043 0301 	orr.w	r3, r3, #1
600018da:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600018de:	f240 6305 	movw	r3, #1541	; 0x605
	FLEXSPI2_INTEN = 0;
600018e2:	6102      	str	r2, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
600018e4:	6605      	str	r5, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
600018e6:	6704      	str	r4, [r0, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600018e8:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
600018ec:	6645      	str	r5, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
600018ee:	6744      	str	r4, [r0, #116]	; 0x74
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600018f0:	2402      	movs	r4, #2
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600018f2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600018f6:	6803      	ldr	r3, [r0, #0]
600018f8:	f023 0302 	bic.w	r3, r3, #2
600018fc:	6003      	str	r3, [r0, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600018fe:	6181      	str	r1, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001900:	4b83      	ldr	r3, [pc, #524]	; (60001b10 <configure_external_ram+0x328>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001902:	4984      	ldr	r1, [pc, #528]	; (60001b14 <configure_external_ram+0x32c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001904:	61c4      	str	r4, [r0, #28]
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001906:	f843 2b04 	str.w	r2, [r3], #4
6000190a:	428b      	cmp	r3, r1
6000190c:	d1fb      	bne.n	60001906 <configure_external_ram+0x11e>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
6000190e:	4a77      	ldr	r2, [pc, #476]	; (60001aec <configure_external_ram+0x304>)
60001910:	6813      	ldr	r3, [r2, #0]
60001912:	f043 0301 	orr.w	r3, r3, #1
60001916:	6013      	str	r3, [r2, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
60001918:	6813      	ldr	r3, [r2, #0]
6000191a:	f013 0301 	ands.w	r3, r3, #1
6000191e:	d1fb      	bne.n	60001918 <configure_external_ram+0x130>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001920:	487a      	ldr	r0, [pc, #488]	; (60001b0c <configure_external_ram+0x324>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001922:	2102      	movs	r1, #2
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001924:	f240 64f5 	movw	r4, #1781	; 0x6f5
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001928:	6190      	str	r0, [r2, #24]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
6000192a:	f240 4099 	movw	r0, #1177	; 0x499
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
6000192e:	61d1      	str	r1, [r2, #28]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60001930:	f240 4166 	movw	r1, #1126	; 0x466
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001934:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001938:	f242 4401 	movw	r4, #9217	; 0x2401
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
6000193c:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60001940:	4975      	ldr	r1, [pc, #468]	; (60001b18 <configure_external_ram+0x330>)
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60001942:	f8c2 0220 	str.w	r0, [r2, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60001946:	f8c2 1230 	str.w	r1, [r2, #560]	; 0x230
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
6000194a:	f240 4135 	movw	r1, #1077	; 0x435
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
6000194e:	4873      	ldr	r0, [pc, #460]	; (60001b1c <configure_external_ram+0x334>)
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001950:	f8c2 4234 	str.w	r4, [r2, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001954:	f8c2 1240 	str.w	r1, [r2, #576]	; 0x240
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001958:	4c71      	ldr	r4, [pc, #452]	; (60001b20 <configure_external_ram+0x338>)
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
6000195a:	f8c2 0250 	str.w	r0, [r2, #592]	; 0x250
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
6000195e:	f242 2001 	movw	r0, #8705	; 0x2201
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001962:	4970      	ldr	r1, [pc, #448]	; (60001b24 <configure_external_ram+0x33c>)
60001964:	f8c2 1254 	str.w	r1, [r2, #596]	; 0x254
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001968:	2101      	movs	r1, #1
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
6000196a:	f8c2 4260 	str.w	r4, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
6000196e:	f8c2 0264 	str.w	r0, [r2, #612]	; 0x264
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001972:	485e      	ldr	r0, [pc, #376]	; (60001aec <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
60001974:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001978:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000197c:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001980:	6943      	ldr	r3, [r0, #20]
60001982:	07da      	lsls	r2, r3, #31
60001984:	d5fc      	bpl.n	60001980 <configure_external_ram+0x198>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001986:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001988:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000198a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000198e:	4957      	ldr	r1, [pc, #348]	; (60001aec <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001990:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
60001992:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001996:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000199a:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000199e:	694b      	ldr	r3, [r1, #20]
600019a0:	07db      	lsls	r3, r3, #31
600019a2:	d5fc      	bpl.n	6000199e <configure_external_ram+0x1b6>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019a4:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600019a6:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019a8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019ac:	4a4f      	ldr	r2, [pc, #316]	; (60001aec <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019ae:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
600019b0:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019b4:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019b8:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019bc:	6953      	ldr	r3, [r2, #20]
600019be:	07df      	lsls	r7, r3, #31
600019c0:	d5fc      	bpl.n	600019bc <configure_external_ram+0x1d4>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019c2:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600019c4:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600019c6:	4858      	ldr	r0, [pc, #352]	; (60001b28 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019c8:	4948      	ldr	r1, [pc, #288]	; (60001aec <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019ca:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
600019cc:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600019d0:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019d4:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019d8:	694b      	ldr	r3, [r1, #20]
600019da:	07de      	lsls	r6, r3, #31
600019dc:	d5fc      	bpl.n	600019d8 <configure_external_ram+0x1f0>
	uint32_t id = FLEXSPI2_RFDR0;
600019de:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
	if (flexspi2_psram_id(0) == 0x5D0D) {
600019e2:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600019e6:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
600019e8:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600019ea:	6148      	str	r0, [r1, #20]
	if (flexspi2_psram_id(0) == 0x5D0D) {
600019ec:	4293      	cmp	r3, r2
600019ee:	d165      	bne.n	60001abc <configure_external_ram+0x2d4>
	FLEXSPI2_IPCR0 = addr;
600019f0:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019f2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019f6:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019f8:	483c      	ldr	r0, [pc, #240]	; (60001aec <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
600019fa:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019fe:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a02:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a06:	6943      	ldr	r3, [r0, #20]
60001a08:	07dd      	lsls	r5, r3, #31
60001a0a:	d5fc      	bpl.n	60001a06 <configure_external_ram+0x21e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a0c:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001a0e:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a12:	2100      	movs	r1, #0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a14:	4a35      	ldr	r2, [pc, #212]	; (60001aec <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a16:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
60001a18:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a1c:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a20:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a24:	6953      	ldr	r3, [r2, #20]
60001a26:	07dc      	lsls	r4, r3, #31
60001a28:	d5fc      	bpl.n	60001a24 <configure_external_ram+0x23c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a2a:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001a2c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a30:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a34:	492d      	ldr	r1, [pc, #180]	; (60001aec <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a36:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001a38:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a3c:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a40:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a44:	694b      	ldr	r3, [r1, #20]
60001a46:	07d8      	lsls	r0, r3, #31
60001a48:	d5fc      	bpl.n	60001a44 <configure_external_ram+0x25c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a4a:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001a4c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a50:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a54:	4a25      	ldr	r2, [pc, #148]	; (60001aec <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a56:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60001a58:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a5c:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a60:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a64:	6953      	ldr	r3, [r2, #20]
60001a66:	07d9      	lsls	r1, r3, #31
60001a68:	d5fc      	bpl.n	60001a64 <configure_external_ram+0x27c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a6a:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001a6c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001a70:	482d      	ldr	r0, [pc, #180]	; (60001b28 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a72:	491e      	ldr	r1, [pc, #120]	; (60001aec <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a74:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001a76:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001a7a:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a7e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a82:	694b      	ldr	r3, [r1, #20]
60001a84:	07da      	lsls	r2, r3, #31
60001a86:	d5fc      	bpl.n	60001a82 <configure_external_ram+0x29a>
	uint32_t id = FLEXSPI2_RFDR0;
60001a88:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001a8c:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001a90:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60001a92:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001a94:	6148      	str	r0, [r1, #20]
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001a96:	4293      	cmp	r3, r2
60001a98:	d050      	beq.n	60001b3c <configure_external_ram+0x354>
60001a9a:	2508      	movs	r5, #8
60001a9c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
			external_psram_size * 0x100000 -
60001aa0:	4922      	ldr	r1, [pc, #136]	; (60001b2c <configure_external_ram+0x344>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001aa2:	2000      	movs	r0, #0
			external_psram_size * 0x100000 -
60001aa4:	4b22      	ldr	r3, [pc, #136]	; (60001b30 <configure_external_ram+0x348>)
			external_psram_size = 16;
60001aa6:	4a23      	ldr	r2, [pc, #140]	; (60001b34 <configure_external_ram+0x34c>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001aa8:	9000      	str	r0, [sp, #0]
			external_psram_size = 16;
60001aaa:	7015      	strb	r5, [r2, #0]
			external_psram_size * 0x100000 -
60001aac:	1a5a      	subs	r2, r3, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001aae:	2301      	movs	r3, #1
60001ab0:	4821      	ldr	r0, [pc, #132]	; (60001b38 <configure_external_ram+0x350>)
60001ab2:	4422      	add	r2, r4
60001ab4:	f000 f9d4 	bl	60001e60 <__sm_set_pool_veneer>
}
60001ab8:	b003      	add	sp, #12
60001aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001abc:	4b1e      	ldr	r3, [pc, #120]	; (60001b38 <configure_external_ram+0x350>)
60001abe:	2200      	movs	r2, #0
60001ac0:	e9c3 2200 	strd	r2, r2, [r3]
60001ac4:	e9c3 2202 	strd	r2, r2, [r3, #8]
}
60001ac8:	b003      	add	sp, #12
60001aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
60001acc:	401f8000 	.word	0x401f8000
60001ad0:	0001b0f9 	.word	0x0001b0f9
60001ad4:	000110f9 	.word	0x000110f9
60001ad8:	401f8400 	.word	0x401f8400
60001adc:	000170f9 	.word	0x000170f9
60001ae0:	400fc000 	.word	0x400fc000
60001ae4:	1ffffcff 	.word	0x1ffffcff
60001ae8:	a0000300 	.word	0xa0000300
60001aec:	402a4000 	.word	0x402a4000
60001af0:	402a8000 	.word	0x402a8000
60001af4:	ffff0012 	.word	0xffff0012
60001af8:	00f737ff 	.word	0x00f737ff
60001afc:	80000040 	.word	0x80000040
60001b00:	7cf0ff00 	.word	0x7cf0ff00
60001b04:	830f00ff 	.word	0x830f00ff
60001b08:	00020063 	.word	0x00020063
60001b0c:	5af05af0 	.word	0x5af05af0
60001b10:	402a4200 	.word	0x402a4200
60001b14:	402a4300 	.word	0x402a4300
60001b18:	3018049f 	.word	0x3018049f
60001b1c:	0a1806eb 	.word	0x0a1806eb
60001b20:	0a180638 	.word	0x0a180638
60001b24:	26013206 	.word	0x26013206
60001b28:	00030004 	.word	0x00030004
60001b2c:	70000000 	.word	0x70000000
60001b30:	70000000 	.word	0x70000000
60001b34:	20002110 	.word	0x20002110
60001b38:	2000206c 	.word	0x2000206c
	FLEXSPI2_IPCR0 = addr;
60001b3c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b40:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b44:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b46:	4808      	ldr	r0, [pc, #32]	; (60001b68 <configure_external_ram+0x380>)
	FLEXSPI2_IPCR0 = addr;
60001b48:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b4c:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b50:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b54:	6943      	ldr	r3, [r0, #20]
60001b56:	07db      	lsls	r3, r3, #31
60001b58:	d5fc      	bpl.n	60001b54 <configure_external_ram+0x36c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b5a:	2301      	movs	r3, #1
60001b5c:	2510      	movs	r5, #16
60001b5e:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
60001b62:	6143      	str	r3, [r0, #20]
			external_psram_size = 16;
60001b64:	e79c      	b.n	60001aa0 <configure_external_ram+0x2b8>
60001b66:	bf00      	nop
60001b68:	402a4000 	.word	0x402a4000

60001b6c <usb_pll_start>:
{
60001b6c:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001b6e:	4a15      	ldr	r2, [pc, #84]	; (60001bc4 <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001b70:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001b72:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001b76:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001b7a:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001b7e:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001b82:	f243 0042 	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001b86:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001b88:	f013 0f02 	tst.w	r3, #2
60001b8c:	d10e      	bne.n	60001bac <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001b8e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
60001b92:	d00f      	beq.n	60001bb4 <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001b94:	f413 5f80 	tst.w	r3, #4096	; 0x1000
60001b98:	d00e      	beq.n	60001bb8 <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001b9a:	2b00      	cmp	r3, #0
60001b9c:	daf3      	bge.n	60001b86 <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001b9e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
60001ba2:	d10b      	bne.n	60001bbc <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001ba4:	065b      	lsls	r3, r3, #25
60001ba6:	d50b      	bpl.n	60001bc0 <usb_pll_start+0x54>
}
60001ba8:	bcf0      	pop	{r4, r5, r6, r7}
60001baa:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001bac:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001bae:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001bb0:	6190      	str	r0, [r2, #24]
			continue;
60001bb2:	e7e8      	b.n	60001b86 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001bb4:	6155      	str	r5, [r2, #20]
			continue;
60001bb6:	e7e6      	b.n	60001b86 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001bb8:	6156      	str	r6, [r2, #20]
			continue;
60001bba:	e7e4      	b.n	60001b86 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001bbc:	6191      	str	r1, [r2, #24]
			continue;
60001bbe:	e7e2      	b.n	60001b86 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001bc0:	6157      	str	r7, [r2, #20]
			continue;
60001bc2:	e7e0      	b.n	60001b86 <usb_pll_start+0x1a>
60001bc4:	400d8000 	.word	0x400d8000

60001bc8 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001bc8:	4a3f      	ldr	r2, [pc, #252]	; (60001cc8 <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001bca:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001bcc:	493f      	ldr	r1, [pc, #252]	; (60001ccc <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001bce:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001bd2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001bd6:	f04f 0c00 	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bda:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 60001cd0 <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001bde:	f023 0301 	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001be2:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 60001cd4 <tempmon_init+0x10c>
{
60001be6:	b430      	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001be8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001bec:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60001bf0:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001bf4:	4d38      	ldr	r5, [pc, #224]	; (60001cd8 <tempmon_init+0x110>)
60001bf6:	b2cb      	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001bf8:	4c38      	ldr	r4, [pc, #224]	; (60001cdc <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001bfa:	4839      	ldr	r0, [pc, #228]	; (60001ce0 <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001bfc:	602b      	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001bfe:	ee07 3a90 	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001c02:	0d0b      	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001c04:	f3c1 210b 	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001c08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001c0c:	ee06 3a90 	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001c10:	ee07 1a10 	vmov	s14, r1
60001c14:	4b33      	ldr	r3, [pc, #204]	; (60001ce4 <tempmon_init+0x11c>)
60001c16:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001c1a:	6021      	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001c1c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c20:	4931      	ldr	r1, [pc, #196]	; (60001ce8 <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c22:	ee37 6ac6 	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c26:	ee37 5ac5 	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001c2a:	ee76 6ac7 	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001c2e:	ee77 7ae5 	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c32:	ee26 6a26 	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001c36:	edc3 6a00 	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c3a:	ee25 5a26 	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c3e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c42:	ee67 4aa6 	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001c46:	edc0 7a00 	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c4a:	eec6 5a27 	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001c4e:	4827      	ldr	r0, [pc, #156]	; (60001cec <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c50:	ee85 6a27 	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c54:	eec4 6aa7 	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c58:	ee75 5a87 	vadd.f32	s11, s11, s14
60001c5c:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c60:	ee36 6a07 	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c64:	ee15 4a90 	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c68:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c6c:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c70:	ee76 7a87 	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c74:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c78:	ee16 3a10 	vmov	r3, s12
60001c7c:	f8d2 4190 	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c84:	ea01 4103 	and.w	r1, r1, r3, lsl #16
60001c88:	4321      	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c8a:	ee17 3a90 	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c8e:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001c92:	f3c3 030b 	ubfx	r3, r3, #0, #12
60001c96:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
60001c9a:	430b      	orrs	r3, r1
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001c9c:	4914      	ldr	r1, [pc, #80]	; (60001cf0 <tempmon_init+0x128>)
60001c9e:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001ca2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
60001ca6:	f043 0302 	orr.w	r3, r3, #2
60001caa:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
60001cae:	4b11      	ldr	r3, [pc, #68]	; (60001cf4 <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001cb0:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
60001cb4:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001cb8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001cbc:	2201      	movs	r2, #1
}
60001cbe:	bc30      	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001cc0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
60001cc4:	4770      	bx	lr
60001cc6:	bf00      	nop
60001cc8:	400d8100 	.word	0x400d8100
60001ccc:	401f4400 	.word	0x401f4400
60001cd0:	42aa0000 	.word	0x42aa0000
60001cd4:	42b40000 	.word	0x42b40000
60001cd8:	200020d0 	.word	0x200020d0
60001cdc:	200020cc 	.word	0x200020cc
60001ce0:	200020d4 	.word	0x200020d4
60001ce4:	200020d8 	.word	0x200020d8
60001ce8:	0fff0000 	.word	0x0fff0000
60001cec:	e000e400 	.word	0xe000e400
60001cf0:	20001800 	.word	0x20001800
60001cf4:	000022fd 	.word	0x000022fd

60001cf8 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001cf8:	4b31      	ldr	r3, [pc, #196]	; (60001dc0 <usb_init+0xc8>)
60001cfa:	f640 7261 	movw	r2, #3937	; 0xf61
{
60001cfe:	b510      	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001d00:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001d04:	f240 4404 	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
60001d08:	f000 f8a6 	bl	60001e58 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001d0c:	4a2d      	ldr	r2, [pc, #180]	; (60001dc4 <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
60001d0e:	492e      	ldr	r1, [pc, #184]	; (60001dc8 <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001d10:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001d14:	482d      	ldr	r0, [pc, #180]	; (60001dcc <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001d16:	f043 0303 	orr.w	r3, r3, #3
60001d1a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001d1e:	4b2c      	ldr	r3, [pc, #176]	; (60001dd0 <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
60001d20:	f8c1 4160 	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001d24:	6802      	ldr	r2, [r0, #0]
60001d26:	421a      	tst	r2, r3
60001d28:	d103      	bne.n	60001d32 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
60001d2a:	f8d1 31a8 	ldr.w	r3, [r1, #424]	; 0x1a8
60001d2e:	079a      	lsls	r2, r3, #30
60001d30:	d01b      	beq.n	60001d6a <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001d32:	4a25      	ldr	r2, [pc, #148]	; (60001dc8 <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001d34:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
60001d38:	4b24      	ldr	r3, [pc, #144]	; (60001dcc <usb_init+0xd4>)
60001d3a:	6359      	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001d3c:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001d40:	f043 0302 	orr.w	r3, r3, #2
60001d44:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001d48:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001d4c:	079b      	lsls	r3, r3, #30
60001d4e:	d4fb      	bmi.n	60001d48 <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001d50:	f44f 3000 	mov.w	r0, #131072	; 0x20000
60001d54:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001d58:	4b1c      	ldr	r3, [pc, #112]	; (60001dcc <usb_init+0xd4>)
60001d5a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001d5e:	f8c1 028c 	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001d62:	2019      	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001d64:	639a      	str	r2, [r3, #56]	; 0x38
		delay(25);
60001d66:	f000 f883 	bl	60001e70 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001d6a:	4a18      	ldr	r2, [pc, #96]	; (60001dcc <usb_init+0xd4>)
60001d6c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001d70:	4c15      	ldr	r4, [pc, #84]	; (60001dc8 <usb_init+0xd0>)
	USBPHY1_PWD = 0;
60001d72:	2100      	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001d74:	6390      	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001d76:	200a      	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d78:	4b16      	ldr	r3, [pc, #88]	; (60001dd4 <usb_init+0xdc>)
	USBPHY1_PWD = 0;
60001d7a:	6011      	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d7c:	f44f 7220 	mov.w	r2, #640	; 0x280
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001d80:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d84:	4618      	mov	r0, r3
60001d86:	f000 f85f 	bl	60001e48 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
60001d8a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d8e:	4603      	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001d90:	f44f 0081 	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001d94:	f240 1143 	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001d98:	6018      	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001d9a:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
60001d9e:	641a      	str	r2, [r3, #64]	; 0x40
60001da0:	4b0d      	ldr	r3, [pc, #52]	; (60001dd8 <usb_init+0xe0>)
60001da2:	4a0e      	ldr	r2, [pc, #56]	; (60001ddc <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001da4:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
60001da8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001dac:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
60001db0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001db4:	2301      	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001db6:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
60001dba:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
60001dbe:	bd10      	pop	{r4, pc}
60001dc0:	400d8000 	.word	0x400d8000
60001dc4:	400fc000 	.word	0x400fc000
60001dc8:	402e0000 	.word	0x402e0000
60001dcc:	400d9000 	.word	0x400d9000
60001dd0:	001e1c00 	.word	0x001e1c00
60001dd4:	20000000 	.word	0x20000000
60001dd8:	20001800 	.word	0x20001800
60001ddc:	000024e5 	.word	0x000024e5

60001de0 <_reboot_Teensyduino_>:


FLASHMEM __attribute__((noinline)) void _reboot_Teensyduino_(void)
{
60001de0:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60001de2:	4b0e      	ldr	r3, [pc, #56]	; (60001e1c <_reboot_Teensyduino_+0x3c>)
60001de4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
60001de6:	079b      	lsls	r3, r3, #30
60001de8:	d400      	bmi.n	60001dec <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
60001dea:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60001dec:	b672      	cpsid	i
		USB1_USBCMD = 0;
60001dee:	4b0c      	ldr	r3, [pc, #48]	; (60001e20 <_reboot_Teensyduino_+0x40>)
60001df0:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
60001df2:	4a0c      	ldr	r2, [pc, #48]	; (60001e24 <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
60001df4:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001df8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001dfc:	490a      	ldr	r1, [pc, #40]	; (60001e28 <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001dfe:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001e02:	6411      	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001e04:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001e06:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001e0a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
60001e0e:	4807      	ldr	r0, [pc, #28]	; (60001e2c <_reboot_Teensyduino_+0x4c>)
60001e10:	4a07      	ldr	r2, [pc, #28]	; (60001e30 <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001e12:	69db      	ldr	r3, [r3, #28]
		*p = 0xEB120000;
60001e14:	6002      	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001e16:	689b      	ldr	r3, [r3, #8]
60001e18:	4798      	blx	r3
	}
	__builtin_unreachable();
60001e1a:	bf00      	nop
60001e1c:	401f4400 	.word	0x401f4400
60001e20:	402e0000 	.word	0x402e0000
60001e24:	400ac000 	.word	0x400ac000
60001e28:	00200003 	.word	0x00200003
60001e2c:	20208000 	.word	0x20208000
60001e30:	eb120000 	.word	0xeb120000

60001e34 <_init>:
60001e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60001e36:	bf00      	nop
60001e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
60001e3a:	bc08      	pop	{r3}
60001e3c:	469e      	mov	lr, r3
60001e3e:	4770      	bx	lr

60001e40 <__main_veneer>:
60001e40:	f85f f000 	ldr.w	pc, [pc]	; 60001e44 <__main_veneer+0x4>
60001e44:	00001dfd 	.word	0x00001dfd

60001e48 <__memset_veneer>:
60001e48:	f85f f000 	ldr.w	pc, [pc]	; 60001e4c <__memset_veneer+0x4>
60001e4c:	000047a9 	.word	0x000047a9

60001e50 <__set_arm_clock_veneer>:
60001e50:	f85f f000 	ldr.w	pc, [pc]	; 60001e54 <__set_arm_clock_veneer+0x4>
60001e54:	00003561 	.word	0x00003561

60001e58 <__usb_init_serialnumber_veneer>:
60001e58:	f85f f000 	ldr.w	pc, [pc]	; 60001e5c <__usb_init_serialnumber_veneer+0x4>
60001e5c:	00002c55 	.word	0x00002c55

60001e60 <__sm_set_pool_veneer>:
60001e60:	f85f f000 	ldr.w	pc, [pc]	; 60001e64 <__sm_set_pool_veneer+0x4>
60001e64:	000038c1 	.word	0x000038c1

60001e68 <__pwm_init_veneer>:
60001e68:	f85f f000 	ldr.w	pc, [pc]	; 60001e6c <__pwm_init_veneer+0x4>
60001e6c:	00002021 	.word	0x00002021

60001e70 <__delay_veneer>:
60001e70:	f85f f000 	ldr.w	pc, [pc]	; 60001e74 <__delay_veneer+0x4>
60001e74:	00001c6d 	.word	0x00001c6d

60001e78 <____libc_init_array_veneer>:
60001e78:	f85f f000 	ldr.w	pc, [pc]	; 60001e7c <____libc_init_array_veneer+0x4>
60001e7c:	00004a21 	.word	0x00004a21

60001e80 <__frame_dummy_init_array_entry>:
60001e80:	00000045                                E...

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN); // wait
	// stop the SRTC
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
	// set the SRTC
	SNVS_LPSRTCLR = t << 15;
      20:	4805      	ldr	r0, [pc, #20]	; (38 <_teensy_model_identifier+0x13>)
	SNVS_LPSRTCMR = t >> 17;
	// start the SRTC
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
      22:	4b06      	ldr	r3, [pc, #24]	; (3c <_teensy_model_identifier+0x17>)
	SNVS_LPSRTCMR = t >> 17;
      24:	1a1b      	subs	r3, r3, r0
	SNVS_LPSRTCLR = t << 15;
      26:	0fd9      	lsrs	r1, r3, #31
	SNVS_LPSRTCMR = t >> 17;
      28:	eb01 01a3 	add.w	r1, r1, r3, asr #2
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
      2c:	1049      	asrs	r1, r1, #1
      2e:	d002      	beq.n	36 <_teensy_model_identifier+0x11>
      30:	4b03      	ldr	r3, [pc, #12]	; (40 <_teensy_model_identifier+0x1b>)
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
      32:	b103      	cbz	r3, 36 <_teensy_model_identifier+0x11>
      34:	4718      	bx	r3
      36:	4770      	bx	lr
	// start the RTC and sync it to the SRTC
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
      38:	20001ac0 	.word	0x20001ac0
      3c:	20001ac0 	.word	0x20001ac0
}
      40:	00000000 	.word	0x00000000

00000044 <frame_dummy>:
      44:	b508      	push	{r3, lr}
      46:	4b05      	ldr	r3, [pc, #20]	; (5c <frame_dummy+0x18>)
		return 0;
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4905      	ldr	r1, [pc, #20]	; (60 <frame_dummy+0x1c>)
      4c:	4805      	ldr	r0, [pc, #20]	; (64 <frame_dummy+0x20>)
      4e:	f3af 8000 	nop.w
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
}
      52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      56:	f7ff bfe3 	b.w	20 <register_tm_clones>
      5a:	bf00      	nop
      5c:	00000000 	.word	0x00000000
}
      60:	2000207c 	.word	0x2000207c
      64:	6000e800 	.word	0x6000e800

00000068 <Print::println(String const&) [clone .isra.0]>:
	// Print an object instance in human readable format
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	// Print a newline
	size_t println(void);
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
      68:	b510      	push	{r4, lr}
      6a:	4604      	mov	r4, r0
      6c:	f001 fa96 	bl	159c <Print::print(String const&)>
      70:	4620      	mov	r0, r4
      72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      76:	f001 bac3 	b.w	1600 <Print::println()>
}
      7a:	bf00      	nop

0000007c <setup>:
      7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
      80:	2101      	movs	r1, #1
      82:	200d      	movs	r0, #13
      84:	f001 fe82 	bl	1d8c <pinMode>
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
			break;
      88:	2100      	movs	r1, #0
      8a:	200d      	movs	r0, #13
      8c:	4d27      	ldr	r5, [pc, #156]	; (12c <setup+0xb0>)
      8e:	f001 fe41 	bl	1d14 <digitalWrite>
      92:	2100      	movs	r1, #0
	uint8_t digit, i;

	if (base < 2) return 0;
	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
      94:	200e      	movs	r0, #14
		buf[sizeof(buf) - 1] = '0';
      96:	4c26      	ldr	r4, [pc, #152]	; (130 <setup+0xb4>)
      98:	f001 fe78 	bl	1d8c <pinMode>
	if (base < 2) return 0;
      9c:	200c      	movs	r0, #12
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
      9e:	f001 fdb5 	bl	1c0c <analogReadRes>
      a2:	4f24      	ldr	r7, [pc, #144]	; (134 <setup+0xb8>)
					*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = 5;

					// now set new pin info.
					*(portControlRegister(hardware->rx_pins[rx_pin_new_index].pin)) =  IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;;
					*(portConfigRegister(hardware->rx_pins[rx_pin_new_index].pin)) = hardware->rx_pins[rx_pin_new_index].mux_val;
					if (hardware->rx_pins[rx_pin_new_index].select_input_register) {
      a4:	682e      	ldr	r6, [r5, #0]
					*(portConfigRegister(hardware->rx_pins[rx_pin_new_index].pin)) = hardware->rx_pins[rx_pin_new_index].mux_val;
      a6:	f240 28ee 	movw	r8, #750	; 0x2ee
					if (hardware->rx_pins[rx_pin_new_index].select_input_register) {
      aa:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 150 <setup+0xd4>
					 	*(hardware->rx_pins[rx_pin_new_index].select_input_register) =  hardware->rx_pins[rx_pin_new_index].select_val;		
      ae:	f003 f9b7 	bl	3420 <yield>
					}
				}		
				rx_pin_index_ = rx_pin_new_index;
      b2:	7823      	ldrb	r3, [r4, #0]
				//Serial.printf("  PINCFG: %x MODIR: %x\n", port->PINCFG, port->MODIR);	
				return;
			}
		}
	}
}
      b4:	b36b      	cbz	r3, 112 <setup+0x96>
		for (uint8_t rx_pin_new_index = 0; rx_pin_new_index < cnt_rx_pins; rx_pin_new_index++) {
      b6:	783b      	ldrb	r3, [r7, #0]
			if (pin == hardware->rx_pins[rx_pin_new_index].pin) {
      b8:	07db      	lsls	r3, r3, #31
      ba:	d52a      	bpl.n	112 <setup+0x96>
      bc:	682b      	ldr	r3, [r5, #0]
      be:	f8d9 2000 	ldr.w	r2, [r9]
      c2:	1a9b      	subs	r3, r3, r2
      c4:	2b0e      	cmp	r3, #14
      c6:	d924      	bls.n	112 <setup+0x96>
      c8:	2200      	movs	r2, #0
      ca:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  digitalWrite(LED_PIN, LOW);
  pinMode(POT_PIN, INPUT);
  analogReadResolution(12);

  Serial.begin(BAUD_USB);
  Serial2.begin(BAUD_UART);
      ce:	481a      	ldr	r0, [pc, #104]	; (138 <setup+0xbc>)
      d0:	f000 ff6e 	bl	fb0 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)>

  delay(300);
      d4:	f44f 7096 	mov.w	r0, #300	; 0x12c
      d8:	f001 fdc8 	bl	1c6c <delay>
	// Discard all received data which has not been read.
        virtual void clear(void) { usb_serial_flush_input(); }
	// Transmit a single byte to your PC
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
	// Transmit a buffer containing any number of bytes to your PC
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
      dc:	2138      	movs	r1, #56	; 0x38
      de:	4817      	ldr	r0, [pc, #92]	; (13c <setup+0xc0>)
      e0:	f003 f920 	bl	3324 <usb_serial_write>
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
      e4:	4816      	ldr	r0, [pc, #88]	; (140 <setup+0xc4>)
      e6:	f001 fa8b 	bl	1600 <Print::println()>
      ea:	210d      	movs	r1, #13
      ec:	4815      	ldr	r0, [pc, #84]	; (144 <setup+0xc8>)
      ee:	f003 f919 	bl	3324 <usb_serial_write>
      f2:	2113      	movs	r1, #19
      f4:	4814      	ldr	r0, [pc, #80]	; (148 <setup+0xcc>)
      f6:	f003 f915 	bl	3324 <usb_serial_write>
      fa:	4811      	ldr	r0, [pc, #68]	; (140 <setup+0xc4>)
      fc:	f001 fa80 	bl	1600 <Print::println()>
     100:	2157      	movs	r1, #87	; 0x57
     102:	4812      	ldr	r0, [pc, #72]	; (14c <setup+0xd0>)
     104:	f003 f90e 	bl	3324 <usb_serial_write>
     108:	480d      	ldr	r0, [pc, #52]	; (140 <setup+0xc4>)
  Serial.println("\n[Teensy] OTA HEX receiver ready on Serial2 (7=RX,8=TX).");
  Serial.print  ("[Teensy] FW: "); Serial.println(FW_VERSION);
  Serial.println("[Teensy] Console commands: PING | VERSION | STATUS | ECHO ON|OFF | STREAM ON|OFF | HELP");
}
     10a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     10e:	f001 ba77 	b.w	1600 <Print::println()>
			uint32_t elapsed = systick_millis_count - millis_begin;
     112:	682b      	ldr	r3, [r5, #0]
			if (usb_configuration) {
     114:	7822      	ldrb	r2, [r4, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
     116:	1b9b      	subs	r3, r3, r6
			if (usb_configuration) {
     118:	b12a      	cbz	r2, 126 <setup+0xaa>
				if (elapsed > 2000) break;
     11a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
     11e:	d8d3      	bhi.n	c8 <setup+0x4c>
			yield();
     120:	f003 f97e 	bl	3420 <yield>
     124:	e7c3      	b.n	ae <setup+0x32>
				if (elapsed > 750) break;
     126:	4543      	cmp	r3, r8
     128:	d9fa      	bls.n	120 <setup+0xa4>
     12a:	e7cd      	b.n	c8 <setup+0x4c>
     12c:	200020e4 	.word	0x200020e4
     130:	20002118 	.word	0x20002118
     134:	20002117 	.word	0x20002117
     138:	20000fb8 	.word	0x20000fb8
     13c:	20000cf0 	.word	0x20000cf0
     140:	20000fa8 	.word	0x20000fa8
     144:	20000d2c 	.word	0x20000d2c
     148:	20000370 	.word	0x20000370
     14c:	20000d3c 	.word	0x20000d3c
     150:	200020f4 	.word	0x200020f4

00000154 <loop>:
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     158:	4a99      	ldr	r2, [pc, #612]	; (3c0 <loop+0x26c>)
     15a:	b0ad      	sub	sp, #180	; 0xb4

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
}
     15c:	f8df 92d8 	ldr.w	r9, [pc, #728]	; 438 <loop+0x2e4>
			while (awidth) {
     160:	6811      	ldr	r1, [r2, #0]
				*buf++ = ' ';
     162:	f8df b2d8 	ldr.w	fp, [pc, #728]	; 43c <loop+0x2e8>
     166:	f8d9 3000 	ldr.w	r3, [r9]
     16a:	1a5b      	subs	r3, r3, r1
		if (val<0) *buf++ = '-';
     16c:	f8db 1000 	ldr.w	r1, [fp]
     170:	428b      	cmp	r3, r1
     172:	f080 81a3 	bcs.w	4bc <loop+0x368>
     176:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 440 <loop+0x2ec>
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
     17a:	f89a 3000 	ldrb.w	r3, [sl]
     17e:	b123      	cbz	r3, 18a <loop+0x36>
     180:	4b90      	ldr	r3, [pc, #576]	; (3c4 <loop+0x270>)
		if (val<0) *buf++ = '-';
     182:	781b      	ldrb	r3, [r3, #0]
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
     184:	2b00      	cmp	r3, #0
     186:	f000 80e9 	beq.w	35c <loop+0x208>
		while (awidth) {
     18a:	4c8f      	ldr	r4, [pc, #572]	; (3c8 <loop+0x274>)
	if (-decpt  > (int)precision) {
     18c:	6821      	ldr	r1, [r4, #0]
     18e:	f011 0101 	ands.w	r1, r1, #1
     192:	f000 81a1 	beq.w	4d8 <loop+0x384>
		decpt = -precision;
     196:	4c8d      	ldr	r4, [pc, #564]	; (3cc <loop+0x278>)
     198:	4d8d      	ldr	r5, [pc, #564]	; (3d0 <loop+0x27c>)
     19a:	4e8a      	ldr	r6, [pc, #552]	; (3c4 <loop+0x270>)
		s = "0";
     19c:	4620      	mov	r0, r4
	if (reqd > decpt) reqd++;
     19e:	f000 fe29 	bl	df4 <HardwareSerialIMXRT::available()>
		decpt = -precision;
     1a2:	b1c8      	cbz	r0, 1d8 <loop+0x84>
     1a4:	4620      	mov	r0, r4
	if (reqd > decpt) reqd++;
     1a6:	f000 fe77 	bl	e98 <HardwareSerialIMXRT::read()>
     1aa:	782b      	ldrb	r3, [r5, #0]
	if (decpt == 0) reqd++;
     1ac:	b2c7      	uxtb	r7, r0
     1ae:	b113      	cbz	r3, 1b6 <loop+0x62>
     1b0:	7833      	ldrb	r3, [r6, #0]
	if (sign) reqd++;
     1b2:	2b00      	cmp	r3, #0
	if (decpt == 0) reqd++;
     1b4:	d05c      	beq.n	270 <loop+0x11c>
     1b6:	2f0d      	cmp	r7, #13
	if (sign) reqd++;
     1b8:	d0f0      	beq.n	19c <loop+0x48>
     1ba:	2f0a      	cmp	r7, #10
	pad = width - reqd;
     1bc:	d00f      	beq.n	1de <loop+0x8a>
     1be:	4885      	ldr	r0, [pc, #532]	; (3d4 <loop+0x280>)
	e = p + reqd;
     1c0:	6883      	ldr	r3, [r0, #8]
     1c2:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
	if (pad > 0) {
     1c6:	d2e9      	bcs.n	19c <loop+0x48>
     1c8:	4639      	mov	r1, r7
		while (pad-- > 0) *p++ = ' ';
     1ca:	f001 fbe9 	bl	19a0 <String::append(char)>
     1ce:	4620      	mov	r0, r4
		e += pad;
     1d0:	f000 fe10 	bl	df4 <HardwareSerialIMXRT::available()>
		while (pad-- > 0) *p++ = ' ';
     1d4:	2800      	cmp	r0, #0
     1d6:	d1e5      	bne.n	1a4 <loop+0x50>
     1d8:	b02d      	add	sp, #180	; 0xb4
	if (decpt == 0 && precision > 0) {
     1da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     1de:	4f7d      	ldr	r7, [pc, #500]	; (3d4 <loop+0x280>)
	else if (decpt < 0 && precision > 0) {
     1e0:	4638      	mov	r0, r7
     1e2:	f001 fc8f 	bl	1b04 <String::trim()>
     1e6:	68bb      	ldr	r3, [r7, #8]
     1e8:	2b00      	cmp	r3, #0
     1ea:	d07b      	beq.n	2e4 <loop+0x190>
		*p++ = '0';
     1ec:	4639      	mov	r1, r7
		*p++ = '.';
     1ee:	a80b      	add	r0, sp, #44	; 0x2c
		*p++ = '0';
     1f0:	f001 fb16 	bl	1820 <String::String(String const&)>
     1f4:	a80b      	add	r0, sp, #44	; 0x2c
		*p++ = '.';
     1f6:	f001 fc75 	bl	1ae4 <String::toUpperCase()>
     1fa:	4977      	ldr	r1, [pc, #476]	; (3d8 <loop+0x284>)
		while ( decpt < 0 ) {
     1fc:	a814      	add	r0, sp, #80	; 0x50
			*p++ = '0';
     1fe:	f001 faf1 	bl	17e4 <String::String(char const*)>
		while ( decpt < 0 ) {
     202:	a914      	add	r1, sp, #80	; 0x50
			*p++ = '0';
     204:	a80b      	add	r0, sp, #44	; 0x2c
     206:	f001 fc07 	bl	1a18 <String::startsWith(String const&) const>
     20a:	4680      	mov	r8, r0
     20c:	a814      	add	r0, sp, #80	; 0x50
     20e:	f001 fb23 	bl	1858 <String::~String()>
     212:	f1b8 0f00 	cmp.w	r8, #0
	if (pad > 0) {
     216:	d030      	beq.n	27a <loop+0x126>
     218:	4639      	mov	r1, r7
     21a:	af11      	add	r7, sp, #68	; 0x44
     21c:	2206      	movs	r2, #6
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
     21e:	4638      	mov	r0, r7
     220:	f001 fc34 	bl	1a8c <String::substring(unsigned int) const>
     224:	496d      	ldr	r1, [pc, #436]	; (3dc <loop+0x288>)
		pad = (reqd + width) * -1;
     226:	4638      	mov	r0, r7
		while (pad-- > 0) *p++ = ' ';
     228:	f001 fbe0 	bl	19ec <String::equals(char const*) const>
     22c:	2800      	cmp	r0, #0
     22e:	d15e      	bne.n	2ee <loop+0x19a>
     230:	211d      	movs	r1, #29
     232:	486b      	ldr	r0, [pc, #428]	; (3e0 <loop+0x28c>)
     234:	f003 f876 	bl	3324 <usb_serial_write>
     238:	486a      	ldr	r0, [pc, #424]	; (3e4 <loop+0x290>)
     23a:	f001 f9e1 	bl	1600 <Print::println()>
     23e:	496a      	ldr	r1, [pc, #424]	; (3e8 <loop+0x294>)
     240:	a814      	add	r0, sp, #80	; 0x50
     242:	f001 facf 	bl	17e4 <String::String(char const*)>
	reqd = strlen(s);
     246:	a914      	add	r1, sp, #80	; 0x50
     248:	4620      	mov	r0, r4
	if (reqd > decpt) reqd++;
     24a:	f001 f9a7 	bl	159c <Print::print(String const&)>
     24e:	4620      	mov	r0, r4
     250:	f001 f9d6 	bl	1600 <Print::println()>
	if (decpt == 0) reqd++;
     254:	a814      	add	r0, sp, #80	; 0x50
     256:	f001 faff 	bl	1858 <String::~String()>
	if (decpt < 0 && precision > 0) {
     25a:	4638      	mov	r0, r7
     25c:	f001 fafc 	bl	1858 <String::~String()>
     260:	4962      	ldr	r1, [pc, #392]	; (3ec <loop+0x298>)
     262:	485c      	ldr	r0, [pc, #368]	; (3d4 <loop+0x280>)
     264:	f001 fb4a 	bl	18fc <String::operator=(char const*)>
		if (strlen(s) > precision + decpt) {
     268:	a80b      	add	r0, sp, #44	; 0x2c
     26a:	f001 faf5 	bl	1858 <String::~String()>
		reqd = precision + 2;
     26e:	e795      	b.n	19c <loop+0x48>
		if (strlen(s) > precision + decpt) {
     270:	4639      	mov	r1, r7
     272:	4620      	mov	r0, r4
     274:	f001 f878 	bl	1368 <HardwareSerialIMXRT::write(unsigned char)>
			while (newPrecision > 0) {
     278:	e79d      	b.n	1b6 <loop+0x62>
     27a:	495d      	ldr	r1, [pc, #372]	; (3f0 <loop+0x29c>)
				val *= 10.0f;
     27c:	a80b      	add	r0, sp, #44	; 0x2c
     27e:	f001 fbb5 	bl	19ec <String::equals(char const*) const>
     282:	4680      	mov	r8, r0
     284:	2800      	cmp	r0, #0
			while (newPrecision > 0) {
     286:	f000 80dd 	beq.w	444 <loop+0x2f0>
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
     28a:	7833      	ldrb	r3, [r6, #0]
     28c:	2b00      	cmp	r3, #0
     28e:	f040 8172 	bne.w	576 <loop+0x422>
     292:	4b58      	ldr	r3, [pc, #352]	; (3f4 <loop+0x2a0>)
     294:	781a      	ldrb	r2, [r3, #0]
			if (newDecimalPoint - decpt == precision + 1) decpt++;
     296:	2a00      	cmp	r2, #0
     298:	f000 8129 	beq.w	4ee <loop+0x39a>
     29c:	2201      	movs	r2, #1
     29e:	2300      	movs	r3, #0
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
     2a0:	211a      	movs	r1, #26
			if (newDecimalPoint - decpt == precision + 1) decpt++;
     2a2:	4855      	ldr	r0, [pc, #340]	; (3f8 <loop+0x2a4>)
     2a4:	7032      	strb	r2, [r6, #0]
     2a6:	4a55      	ldr	r2, [pc, #340]	; (3fc <loop+0x2a8>)
     2a8:	702b      	strb	r3, [r5, #0]
     2aa:	6013      	str	r3, [r2, #0]
     2ac:	4a54      	ldr	r2, [pc, #336]	; (400 <loop+0x2ac>)
     2ae:	f88a 3000 	strb.w	r3, [sl]
     2b2:	6013      	str	r3, [r2, #0]
     2b4:	4a53      	ldr	r2, [pc, #332]	; (404 <loop+0x2b0>)
		int ndigs = (val<0) ? 4 : 3;
     2b6:	6013      	str	r3, [r2, #0]
     2b8:	4a53      	ldr	r2, [pc, #332]	; (408 <loop+0x2b4>)
     2ba:	6013      	str	r3, [r2, #0]
     2bc:	f003 f832 	bl	3324 <usb_serial_write>
     2c0:	4848      	ldr	r0, [pc, #288]	; (3e4 <loop+0x290>)
     2c2:	f001 f99d 	bl	1600 <Print::println()>
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
     2c6:	a814      	add	r0, sp, #80	; 0x50
		if (width<0) {
     2c8:	4950      	ldr	r1, [pc, #320]	; (40c <loop+0x2b8>)
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
     2ca:	f001 fa8b 	bl	17e4 <String::String(char const*)>
		if (width<0) {
     2ce:	a914      	add	r1, sp, #80	; 0x50
		if (copysignf(1.0f, val)<0) *buf++ = '-';
     2d0:	4620      	mov	r0, r4
     2d2:	f001 f963 	bl	159c <Print::print(String const&)>
     2d6:	4620      	mov	r0, r4
     2d8:	f001 f992 	bl	1600 <Print::println()>
     2dc:	a814      	add	r0, sp, #80	; 0x50
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
     2de:	f001 fabb 	bl	1858 <String::~String()>
     2e2:	e7bd      	b.n	260 <loop+0x10c>
     2e4:	4638      	mov	r0, r7
     2e6:	4941      	ldr	r1, [pc, #260]	; (3ec <loop+0x298>)
     2e8:	f001 fb08 	bl	18fc <String::operator=(char const*)>
		while (awidth) {
     2ec:	e756      	b.n	19c <loop+0x48>
     2ee:	2111      	movs	r1, #17
     2f0:	4847      	ldr	r0, [pc, #284]	; (410 <loop+0x2bc>)
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
     2f2:	f003 f817 	bl	3324 <usb_serial_write>
     2f6:	483b      	ldr	r0, [pc, #236]	; (3e4 <loop+0x290>)
     2f8:	f001 f982 	bl	1600 <Print::println()>
     2fc:	2300      	movs	r3, #0
     2fe:	7829      	ldrb	r1, [r5, #0]
		while (awidth) {
     300:	a814      	add	r0, sp, #80	; 0x50
			while (awidth) {
     302:	f89a 2000 	ldrb.w	r2, [sl]
				*buf++ = ' ';
     306:	f04f 0806 	mov.w	r8, #6
     30a:	702b      	strb	r3, [r5, #0]
     30c:	f88a 3000 	strb.w	r3, [sl]
		if (copysignf(1.0f, val)<0) *buf++ = '-';
     310:	4b40      	ldr	r3, [pc, #256]	; (414 <loop+0x2c0>)
     312:	7019      	strb	r1, [r3, #0]
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
     314:	4b40      	ldr	r3, [pc, #256]	; (418 <loop+0x2c4>)
     316:	4941      	ldr	r1, [pc, #260]	; (41c <loop+0x2c8>)
		if (copysignf(1.0f, val)<0) *buf++ = '-';
     318:	701a      	strb	r2, [r3, #0]
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
     31a:	2201      	movs	r2, #1
     31c:	4b35      	ldr	r3, [pc, #212]	; (3f4 <loop+0x2a0>)
     31e:	701a      	strb	r2, [r3, #0]
     320:	f001 fa60 	bl	17e4 <String::String(char const*)>
		while (awidth) {
     324:	a914      	add	r1, sp, #80	; 0x50
		if (copysignf(1.0f, val)<0) *buf++ = '-';
     326:	4620      	mov	r0, r4
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
     328:	f001 f938 	bl	159c <Print::print(String const&)>
     32c:	4620      	mov	r0, r4
		if (copysignf(1.0f, val)<0) *buf++ = '-';
     32e:	f001 f967 	bl	1600 <Print::println()>
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
     332:	a814      	add	r0, sp, #80	; 0x50
		while (awidth) {
     334:	f001 fa90 	bl	1858 <String::~String()>
		if (val<0) *buf++ = '-';
     338:	200d      	movs	r0, #13
     33a:	f001 fd15 	bl	1d68 <digitalRead>
     33e:	fab0 f180 	clz	r1, r0
     342:	200d      	movs	r0, #13
     344:	0949      	lsrs	r1, r1, #5
     346:	f001 fce5 	bl	1d14 <digitalWrite>
     34a:	2078      	movs	r0, #120	; 0x78
    delay(ms);
     34c:	f001 fc8e 	bl	1c6c <delay>
  for (int i = 0; i < times; i++) {
     350:	f1b8 0801 	subs.w	r8, r8, #1
     354:	d1f0      	bne.n	338 <loop+0x1e4>
        ota_suspend_armed = true;
        echo_enabled = false;
        stream_enabled = false;
        netln("READY");
        fastBlink();
        netln("DONE");
     356:	a814      	add	r0, sp, #80	; 0x50
     358:	4931      	ldr	r1, [pc, #196]	; (420 <loop+0x2cc>)
     35a:	e772      	b.n	242 <loop+0xee>
    if (now - last_stream_ms >= 40) {
     35c:	4a31      	ldr	r2, [pc, #196]	; (424 <loop+0x2d0>)
     35e:	f8d9 1000 	ldr.w	r1, [r9]
     362:	6813      	ldr	r3, [r2, #0]
     364:	1acb      	subs	r3, r1, r3
     366:	2b27      	cmp	r3, #39	; 0x27
     368:	f67f af0f 	bls.w	18a <loop+0x36>
      int raw = analogRead(POT_PIN);
     36c:	200e      	movs	r0, #14
      last_stream_ms = now;
     36e:	6011      	str	r1, [r2, #0]
      int raw = analogRead(POT_PIN);
     370:	f001 fbf4 	bl	1b5c <analogRead>
     374:	4604      	mov	r4, r0
							  return write((const uint8_t *)str, strlen(str)); }
     376:	2208      	movs	r2, #8
     378:	492b      	ldr	r1, [pc, #172]	; (428 <loop+0x2d4>)
     37a:	4814      	ldr	r0, [pc, #80]	; (3cc <loop+0x278>)
     37c:	f001 f8e6 	bl	154c <Print::write(unsigned char const*, unsigned int)>
	size_t print(int n)				{ return print((long)n); }
     380:	4621      	mov	r1, r4
     382:	4812      	ldr	r0, [pc, #72]	; (3cc <loop+0x278>)
     384:	f001 f930 	bl	15e8 <Print::print(long)>
							  return write((const uint8_t *)str, strlen(str)); }
     388:	2205      	movs	r2, #5
     38a:	4928      	ldr	r1, [pc, #160]	; (42c <loop+0x2d8>)
     38c:	480f      	ldr	r0, [pc, #60]	; (3cc <loop+0x278>)
     38e:	f001 f8dd 	bl	154c <Print::write(unsigned char const*, unsigned int)>
      float pct = (raw / 4095.0f) * 100.0f;
     392:	ee07 4a90 	vmov	s15, r4
     396:	eddf 6a26 	vldr	s13, [pc, #152]	; 430 <loop+0x2dc>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     39a:	2101      	movs	r1, #1
     39c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
     3a0:	ed9f 7a24 	vldr	s14, [pc, #144]	; 434 <loop+0x2e0>
     3a4:	4809      	ldr	r0, [pc, #36]	; (3cc <loop+0x278>)
     3a6:	ee87 0aa6 	vdiv.f32	s0, s15, s13
     3aa:	ee20 0a07 	vmul.f32	s0, s0, s14
     3ae:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
     3b2:	f001 f965 	bl	1680 <Print::printFloat(double, unsigned char)>
	size_t println(int64_t n, int base)		{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(uint64_t n, int base)		{ return print(n, base) + println(); }

	// Print a floating point (decimal) number and a newline
	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
     3b6:	4805      	ldr	r0, [pc, #20]	; (3cc <loop+0x278>)
     3b8:	f001 f922 	bl	1600 <Print::println()>
     3bc:	e6e5      	b.n	18a <loop+0x36>
     3be:	bf00      	nop
     3c0:	20001d44 	.word	0x20001d44
     3c4:	20002107 	.word	0x20002107
     3c8:	20001c88 	.word	0x20001c88
     3cc:	20000fb8 	.word	0x20000fb8
     3d0:	20002106 	.word	0x20002106
     3d4:	20001d38 	.word	0x20001d38
     3d8:	20000a14 	.word	0x20000a14
     3dc:	20000384 	.word	0x20000384
     3e0:	20000a40 	.word	0x20000a40
     3e4:	20000fa8 	.word	0x20000fa8
     3e8:	20000a60 	.word	0x20000a60
     3ec:	20000418 	.word	0x20000418
     3f0:	20000a68 	.word	0x20000a68
     3f4:	20002109 	.word	0x20002109
     3f8:	20000a80 	.word	0x20000a80
     3fc:	20001d00 	.word	0x20001d00
     400:	20001cfc 	.word	0x20001cfc
     404:	20001cf8 	.word	0x20001cf8
     408:	20001d04 	.word	0x20001d04
     40c:	20000a9c 	.word	0x20000a9c
     410:	20000a1c 	.word	0x20000a1c
     414:	2000210a 	.word	0x2000210a
     418:	2000210b 	.word	0x2000210b
     41c:	20000a30 	.word	0x20000a30
     420:	20000a38 	.word	0x20000a38
     424:	20001cf4 	.word	0x20001cf4
     428:	20000a00 	.word	0x20000a00
     42c:	20000a0c 	.word	0x20000a0c
     430:	457ff000 	.word	0x457ff000
     434:	42c80000 	.word	0x42c80000
     438:	200020e4 	.word	0x200020e4
     43c:	20001078 	.word	0x20001078
     440:	20002108 	.word	0x20002108
        hex_lines = hex_ok = hex_bad = hex_bytes = 0;
        Serial.println("[Teensy] HEX session begin");
        netln("HEX BEGIN");
      }
    }
    else if (line.startsWith("L ") && in_hex_session) {
     444:	494f      	ldr	r1, [pc, #316]	; (584 <loop+0x430>)
     446:	a814      	add	r0, sp, #80	; 0x50
     448:	f001 f9cc 	bl	17e4 <String::String(char const*)>
     44c:	a914      	add	r1, sp, #80	; 0x50
     44e:	4638      	mov	r0, r7
     450:	f001 fae2 	bl	1a18 <String::startsWith(String const&) const>
     454:	2800      	cmp	r0, #0
     456:	d054      	beq.n	502 <loop+0x3ae>
     458:	7833      	ldrb	r3, [r6, #0]
     45a:	2b00      	cmp	r3, #0
     45c:	d051      	beq.n	502 <loop+0x3ae>
      String rec = line.substring(2);
      hex_lines++;
     45e:	4a4a      	ldr	r2, [pc, #296]	; (588 <loop+0x434>)
    else if (line.startsWith("L ") && in_hex_session) {
     460:	a814      	add	r0, sp, #80	; 0x50
      hex_lines++;
     462:	9204      	str	r2, [sp, #16]
    else if (line.startsWith("L ") && in_hex_session) {
     464:	f001 f9f8 	bl	1858 <String::~String()>
      String rec = line.substring(2);
     468:	2202      	movs	r2, #2
     46a:	4639      	mov	r1, r7
     46c:	a814      	add	r0, sp, #80	; 0x50
     46e:	f001 fb0d 	bl	1a8c <String::substring(unsigned int) const>
      hex_lines++;
     472:	4a45      	ldr	r2, [pc, #276]	; (588 <loop+0x434>)
     474:	6813      	ldr	r3, [r2, #0]
     476:	3301      	adds	r3, #1
     478:	6013      	str	r3, [r2, #0]
  if (rec.length() < 11) return false;
     47a:	9b16      	ldr	r3, [sp, #88]	; 0x58
     47c:	2b0a      	cmp	r3, #10
     47e:	d906      	bls.n	48e <loop+0x33a>
  if (rec.charAt(0) != ':') return false;
     480:	4641      	mov	r1, r8
     482:	a814      	add	r0, sp, #80	; 0x50
     484:	f001 fadc 	bl	1a40 <String::charAt(unsigned int) const>
     488:	283a      	cmp	r0, #58	; 0x3a
     48a:	f000 809f 	beq.w	5cc <loop+0x478>
      if (ok) {
        hex_ok++;
        NET.print(F("OK "));
        NET.println(hex_lines);
      } else {
        hex_bad++;
     48e:	4f3f      	ldr	r7, [pc, #252]	; (58c <loop+0x438>)
							  return write((const uint8_t *)str, strlen(str)); }
     490:	2204      	movs	r2, #4
     492:	493f      	ldr	r1, [pc, #252]	; (590 <loop+0x43c>)
     494:	4620      	mov	r0, r4
     496:	683b      	ldr	r3, [r7, #0]
     498:	3301      	adds	r3, #1
     49a:	603b      	str	r3, [r7, #0]
     49c:	f001 f856 	bl	154c <Print::write(unsigned char const*, unsigned int)>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     4a0:	9b04      	ldr	r3, [sp, #16]
     4a2:	220a      	movs	r2, #10
     4a4:	4620      	mov	r0, r4
     4a6:	6819      	ldr	r1, [r3, #0]
     4a8:	2300      	movs	r3, #0
     4aa:	f001 f8d3 	bl	1654 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
     4ae:	4620      	mov	r0, r4
     4b0:	f001 f8a6 	bl	1600 <Print::println()>
    }
    else if (cmd == "HELP") {
      printHelp();
    }
    else {
      netln("ERR");
     4b4:	a814      	add	r0, sp, #80	; 0x50
     4b6:	f001 f9cf 	bl	1858 <String::~String()>
     4ba:	e6d1      	b.n	260 <loop+0x10c>
     4bc:	f8d9 3000 	ldr.w	r3, [r9]
    digitalWrite(LED_PIN, !digitalRead(LED_PIN));
     4c0:	200d      	movs	r0, #13
    t_led = millis();
     4c2:	6013      	str	r3, [r2, #0]
    digitalWrite(LED_PIN, !digitalRead(LED_PIN));
     4c4:	f001 fc50 	bl	1d68 <digitalRead>
     4c8:	4601      	mov	r1, r0
     4ca:	200d      	movs	r0, #13
     4cc:	fab1 f181 	clz	r1, r1
     4d0:	0949      	lsrs	r1, r1, #5
     4d2:	f001 fc1f 	bl	1d14 <digitalWrite>
     4d6:	e64e      	b.n	176 <loop+0x22>
  static String line;
     4d8:	482e      	ldr	r0, [pc, #184]	; (594 <loop+0x440>)
     4da:	f001 f983 	bl	17e4 <String::String(char const*)>
     4de:	2301      	movs	r3, #1
     4e0:	4a2d      	ldr	r2, [pc, #180]	; (598 <loop+0x444>)
     4e2:	492e      	ldr	r1, [pc, #184]	; (59c <loop+0x448>)
     4e4:	482b      	ldr	r0, [pc, #172]	; (594 <loop+0x440>)
     4e6:	6023      	str	r3, [r4, #0]
     4e8:	f003 fa2c 	bl	3944 <__aeabi_atexit>
     4ec:	e653      	b.n	196 <loop+0x42>
          echo_resume_after_hex = echo_enabled;
     4ee:	4a2c      	ldr	r2, [pc, #176]	; (5a0 <loop+0x44c>)
     4f0:	7829      	ldrb	r1, [r5, #0]
     4f2:	7011      	strb	r1, [r2, #0]
          stream_resume_after_hex = stream_enabled;
     4f4:	4a2b      	ldr	r2, [pc, #172]	; (5a4 <loop+0x450>)
     4f6:	f89a 1000 	ldrb.w	r1, [sl]
     4fa:	7011      	strb	r1, [r2, #0]
          ota_suspend_armed = true;
     4fc:	2201      	movs	r2, #1
     4fe:	701a      	strb	r2, [r3, #0]
     500:	e6cc      	b.n	29c <loop+0x148>
    else if (line.startsWith("L ") && in_hex_session) {
     502:	a814      	add	r0, sp, #80	; 0x50
     504:	f001 f9a8 	bl	1858 <String::~String()>
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	//unsigned char equals(const __FlashStringHelper *pgmstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
     508:	4927      	ldr	r1, [pc, #156]	; (5a8 <loop+0x454>)
     50a:	a80b      	add	r0, sp, #44	; 0x2c
     50c:	f001 fa6e 	bl	19ec <String::equals(char const*) const>
    else if (cmd == "END") {
     510:	2800      	cmp	r0, #0
     512:	f000 81a0 	beq.w	856 <loop+0x702>
      if (!in_hex_session) {
     516:	7833      	ldrb	r3, [r6, #0]
     518:	2b00      	cmp	r3, #0
     51a:	d02f      	beq.n	57c <loop+0x428>
        Serial.printf("[Teensy] HEX end: lines=%lu ok=%lu bad=%lu dataBytes=%lu\n",
     51c:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 5c8 <loop+0x474>
     520:	4f1a      	ldr	r7, [pc, #104]	; (58c <loop+0x438>)
     522:	f8d8 3000 	ldr.w	r3, [r8]
        echo_enabled = echo_resume_after_hex;
     526:	491e      	ldr	r1, [pc, #120]	; (5a0 <loop+0x44c>)
        Serial.printf("[Teensy] HEX end: lines=%lu ok=%lu bad=%lu dataBytes=%lu\n",
     528:	9301      	str	r3, [sp, #4]
     52a:	683b      	ldr	r3, [r7, #0]
        stream_enabled = stream_resume_after_hex;
     52c:	4a1d      	ldr	r2, [pc, #116]	; (5a4 <loop+0x450>)
        Serial.printf("[Teensy] HEX end: lines=%lu ok=%lu bad=%lu dataBytes=%lu\n",
     52e:	9300      	str	r3, [sp, #0]
     530:	4b15      	ldr	r3, [pc, #84]	; (588 <loop+0x434>)
        echo_enabled = echo_resume_after_hex;
     532:	7808      	ldrb	r0, [r1, #0]
        Serial.printf("[Teensy] HEX end: lines=%lu ok=%lu bad=%lu dataBytes=%lu\n",
     534:	9304      	str	r3, [sp, #16]
        in_hex_session = false;
     536:	2300      	movs	r3, #0
        echo_enabled = echo_resume_after_hex;
     538:	7028      	strb	r0, [r5, #0]
        echo_resume_after_hex = false;
     53a:	700b      	strb	r3, [r1, #0]
        stream_enabled = stream_resume_after_hex;
     53c:	7811      	ldrb	r1, [r2, #0]
        stream_resume_after_hex = false;
     53e:	7013      	strb	r3, [r2, #0]
        ota_suspend_armed = false;
     540:	4a1a      	ldr	r2, [pc, #104]	; (5ac <loop+0x458>)
        stream_enabled = stream_resume_after_hex;
     542:	f88a 1000 	strb.w	r1, [sl]
        ota_suspend_armed = false;
     546:	7013      	strb	r3, [r2, #0]
        Serial.printf("[Teensy] HEX end: lines=%lu ok=%lu bad=%lu dataBytes=%lu\n",
     548:	4919      	ldr	r1, [pc, #100]	; (5b0 <loop+0x45c>)
     54a:	4a0f      	ldr	r2, [pc, #60]	; (588 <loop+0x434>)
        in_hex_session = false;
     54c:	7033      	strb	r3, [r6, #0]
        Serial.printf("[Teensy] HEX end: lines=%lu ok=%lu bad=%lu dataBytes=%lu\n",
     54e:	6812      	ldr	r2, [r2, #0]
     550:	680b      	ldr	r3, [r1, #0]
     552:	4818      	ldr	r0, [pc, #96]	; (5b4 <loop+0x460>)
     554:	4918      	ldr	r1, [pc, #96]	; (5b8 <loop+0x464>)
     556:	f001 f86f 	bl	1638 <Print::printf(char const*, ...)>
        if (hex_bad == 0 && hex_ok > 0) {
     55a:	683b      	ldr	r3, [r7, #0]
     55c:	b923      	cbnz	r3, 568 <loop+0x414>
     55e:	4914      	ldr	r1, [pc, #80]	; (5b0 <loop+0x45c>)
     560:	680a      	ldr	r2, [r1, #0]
     562:	2a00      	cmp	r2, #0
     564:	f040 82ae 	bne.w	ac4 <loop+0x970>
          NET.printf("HEX ERR lines=%lu bad=%lu\n", hex_lines, hex_bad);
     568:	9a04      	ldr	r2, [sp, #16]
     56a:	4620      	mov	r0, r4
     56c:	4913      	ldr	r1, [pc, #76]	; (5bc <loop+0x468>)
     56e:	6812      	ldr	r2, [r2, #0]
     570:	f001 f862 	bl	1638 <Print::printf(char const*, ...)>
     574:	e674      	b.n	260 <loop+0x10c>
        netln("HEX BUSY");
     576:	a814      	add	r0, sp, #80	; 0x50
     578:	4911      	ldr	r1, [pc, #68]	; (5c0 <loop+0x46c>)
     57a:	e6a6      	b.n	2ca <loop+0x176>
        netln("HEX IDLE");
     57c:	a814      	add	r0, sp, #80	; 0x50
     57e:	4911      	ldr	r1, [pc, #68]	; (5c4 <loop+0x470>)
     580:	e6a3      	b.n	2ca <loop+0x176>
     582:	bf00      	nop
     584:	20000aa8 	.word	0x20000aa8
     588:	20001d04 	.word	0x20001d04
     58c:	20001cfc 	.word	0x20001cfc
     590:	20000ab4 	.word	0x20000ab4
     594:	20001d38 	.word	0x20001d38
     598:	20001084 	.word	0x20001084
     59c:	00001859 	.word	0x00001859
     5a0:	2000210a 	.word	0x2000210a
     5a4:	2000210b 	.word	0x2000210b
     5a8:	20000aac 	.word	0x20000aac
     5ac:	20002109 	.word	0x20002109
     5b0:	20001cf8 	.word	0x20001cf8
     5b4:	20000fa8 	.word	0x20000fa8
     5b8:	20000ac8 	.word	0x20000ac8
     5bc:	20000b58 	.word	0x20000b58
     5c0:	20000a74 	.word	0x20000a74
     5c4:	20000abc 	.word	0x20000abc
     5c8:	20001d00 	.word	0x20001d00
  int hi = hexNibble(s.charAt(i));
     5cc:	2101      	movs	r1, #1
     5ce:	a814      	add	r0, sp, #80	; 0x50
     5d0:	f001 fa36 	bl	1a40 <String::charAt(unsigned int) const>
  if (c >= '0' && c <= '9') return c - '0';
     5d4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
  int hi = hexNibble(s.charAt(i));
     5d8:	4607      	mov	r7, r0
  if (c >= '0' && c <= '9') return c - '0';
     5da:	b2da      	uxtb	r2, r3
     5dc:	2a09      	cmp	r2, #9
     5de:	f240 8291 	bls.w	b04 <loop+0x9b0>
  if (c >= 'A' && c <= 'F') return c - 'A' + 10;
     5e2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
     5e6:	b2db      	uxtb	r3, r3
     5e8:	2b05      	cmp	r3, #5
     5ea:	f240 82a2 	bls.w	b32 <loop+0x9de>
  if (c >= 'a' && c <= 'f') return c - 'a' + 10;
     5ee:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
     5f2:	b2db      	uxtb	r3, r3
     5f4:	2b05      	cmp	r3, #5
     5f6:	bf94      	ite	ls
     5f8:	f1a0 0757 	subls.w	r7, r0, #87	; 0x57
  return -1;
     5fc:	f04f 37ff 	movhi.w	r7, #4294967295
  int lo = hexNibble(s.charAt(i + 1));
     600:	2102      	movs	r1, #2
     602:	a814      	add	r0, sp, #80	; 0x50
     604:	f001 fa1c 	bl	1a40 <String::charAt(unsigned int) const>
  if (c >= '0' && c <= '9') return c - '0';
     608:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
     60c:	b2da      	uxtb	r2, r3
     60e:	2a09      	cmp	r2, #9
     610:	f240 814a 	bls.w	8a8 <loop+0x754>
  if (c >= 'A' && c <= 'F') return c - 'A' + 10;
     614:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
     618:	b2db      	uxtb	r3, r3
     61a:	2b05      	cmp	r3, #5
     61c:	f240 8142 	bls.w	8a4 <loop+0x750>
  if (c >= 'a' && c <= 'f') return c - 'a' + 10;
     620:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
     624:	b2db      	uxtb	r3, r3
     626:	2b05      	cmp	r3, #5
     628:	f63f af31 	bhi.w	48e <loop+0x33a>
     62c:	f1a0 0357 	sub.w	r3, r0, #87	; 0x57
     630:	9306      	str	r3, [sp, #24]
  if (hi < 0 || lo < 0) return -1;
     632:	1c7b      	adds	r3, r7, #1
     634:	f43f af2b 	beq.w	48e <loop+0x33a>
  int hi = hexNibble(s.charAt(i));
     638:	2103      	movs	r1, #3
     63a:	a814      	add	r0, sp, #80	; 0x50
     63c:	f001 fa00 	bl	1a40 <String::charAt(unsigned int) const>
  if (c >= '0' && c <= '9') return c - '0';
     640:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
     644:	b2da      	uxtb	r2, r3
     646:	2a09      	cmp	r2, #9
     648:	f240 827a 	bls.w	b40 <loop+0x9ec>
  if (c >= 'A' && c <= 'F') return c - 'A' + 10;
     64c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
     650:	b2db      	uxtb	r3, r3
     652:	2b05      	cmp	r3, #5
     654:	f240 82ae 	bls.w	bb4 <loop+0xa60>
  if (c >= 'a' && c <= 'f') return c - 'a' + 10;
     658:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
     65c:	b2db      	uxtb	r3, r3
     65e:	2b05      	cmp	r3, #5
     660:	f200 826c 	bhi.w	b3c <loop+0x9e8>
     664:	f1a0 0357 	sub.w	r3, r0, #87	; 0x57
     668:	9305      	str	r3, [sp, #20]
  int lo = hexNibble(s.charAt(i + 1));
     66a:	2104      	movs	r1, #4
     66c:	a814      	add	r0, sp, #80	; 0x50
     66e:	f001 f9e7 	bl	1a40 <String::charAt(unsigned int) const>
  if (c >= '0' && c <= '9') return c - '0';
     672:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
     676:	b2da      	uxtb	r2, r3
     678:	2a09      	cmp	r2, #9
     67a:	f240 8247 	bls.w	b0c <loop+0x9b8>
  if (c >= 'A' && c <= 'F') return c - 'A' + 10;
     67e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
     682:	b2db      	uxtb	r3, r3
     684:	2b05      	cmp	r3, #5
     686:	f240 823f 	bls.w	b08 <loop+0x9b4>
  if (c >= 'a' && c <= 'f') return c - 'a' + 10;
     68a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
     68e:	b2db      	uxtb	r3, r3
     690:	2b05      	cmp	r3, #5
     692:	f63f aefc 	bhi.w	48e <loop+0x33a>
     696:	f1a0 0357 	sub.w	r3, r0, #87	; 0x57
     69a:	9307      	str	r3, [sp, #28]
  if (hi < 0 || lo < 0) return -1;
     69c:	9b05      	ldr	r3, [sp, #20]
     69e:	3301      	adds	r3, #1
     6a0:	f43f aef5 	beq.w	48e <loop+0x33a>
  int hi = hexNibble(s.charAt(i));
     6a4:	2105      	movs	r1, #5
     6a6:	a814      	add	r0, sp, #80	; 0x50
     6a8:	f001 f9ca 	bl	1a40 <String::charAt(unsigned int) const>
  if (c >= '0' && c <= '9') return c - '0';
     6ac:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
     6b0:	b2da      	uxtb	r2, r3
     6b2:	2a09      	cmp	r2, #9
     6b4:	d90e      	bls.n	6d4 <loop+0x580>
  if (c >= 'A' && c <= 'F') return c - 'A' + 10;
     6b6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
     6ba:	b2db      	uxtb	r3, r3
     6bc:	2b05      	cmp	r3, #5
     6be:	f240 827d 	bls.w	bbc <loop+0xa68>
  if (c >= 'a' && c <= 'f') return c - 'a' + 10;
     6c2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
     6c6:	b2db      	uxtb	r3, r3
     6c8:	2b05      	cmp	r3, #5
     6ca:	bf94      	ite	ls
     6cc:	f1a0 0357 	subls.w	r3, r0, #87	; 0x57
  return -1;
     6d0:	f04f 33ff 	movhi.w	r3, #4294967295
  int lo = hexNibble(s.charAt(i + 1));
     6d4:	2106      	movs	r1, #6
     6d6:	a814      	add	r0, sp, #80	; 0x50
     6d8:	9308      	str	r3, [sp, #32]
     6da:	f001 f9b1 	bl	1a40 <String::charAt(unsigned int) const>
  if (c >= '0' && c <= '9') return c - '0';
     6de:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
     6e2:	9b08      	ldr	r3, [sp, #32]
     6e4:	b2d1      	uxtb	r1, r2
     6e6:	2909      	cmp	r1, #9
     6e8:	d90d      	bls.n	706 <loop+0x5b2>
  if (c >= 'A' && c <= 'F') return c - 'A' + 10;
     6ea:	f1a0 0241 	sub.w	r2, r0, #65	; 0x41
     6ee:	b2d2      	uxtb	r2, r2
     6f0:	2a05      	cmp	r2, #5
     6f2:	f240 8266 	bls.w	bc2 <loop+0xa6e>
  if (c >= 'a' && c <= 'f') return c - 'a' + 10;
     6f6:	f1a0 0261 	sub.w	r2, r0, #97	; 0x61
     6fa:	b2d2      	uxtb	r2, r2
     6fc:	2a05      	cmp	r2, #5
     6fe:	f63f aec6 	bhi.w	48e <loop+0x33a>
     702:	f1a0 0257 	sub.w	r2, r0, #87	; 0x57
  if (hi < 0 || lo < 0) return -1;
     706:	1c59      	adds	r1, r3, #1
     708:	f43f aec1 	beq.w	48e <loop+0x33a>
  int hi = hexNibble(s.charAt(i));
     70c:	2107      	movs	r1, #7
     70e:	a814      	add	r0, sp, #80	; 0x50
     710:	e9cd 2308 	strd	r2, r3, [sp, #32]
     714:	f001 f994 	bl	1a40 <String::charAt(unsigned int) const>
  if (c >= '0' && c <= '9') return c - '0';
     718:	f1a0 0830 	sub.w	r8, r0, #48	; 0x30
     71c:	fa5f f188 	uxtb.w	r1, r8
     720:	2909      	cmp	r1, #9
     722:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
     726:	d90e      	bls.n	746 <loop+0x5f2>
  if (c >= 'A' && c <= 'F') return c - 'A' + 10;
     728:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
     72c:	b2c9      	uxtb	r1, r1
     72e:	2905      	cmp	r1, #5
     730:	f240 825f 	bls.w	bf2 <loop+0xa9e>
  if (c >= 'a' && c <= 'f') return c - 'a' + 10;
     734:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
     738:	b2c9      	uxtb	r1, r1
     73a:	2905      	cmp	r1, #5
     73c:	bf94      	ite	ls
     73e:	f1a0 0857 	subls.w	r8, r0, #87	; 0x57
  return -1;
     742:	f04f 38ff 	movhi.w	r8, #4294967295
  int lo = hexNibble(s.charAt(i + 1));
     746:	2108      	movs	r1, #8
     748:	a814      	add	r0, sp, #80	; 0x50
     74a:	e9cd 2308 	strd	r2, r3, [sp, #32]
     74e:	f001 f977 	bl	1a40 <String::charAt(unsigned int) const>
  if (c >= '0' && c <= '9') return c - '0';
     752:	f1a0 0130 	sub.w	r1, r0, #48	; 0x30
     756:	fa5f fc81 	uxtb.w	ip, r1
     75a:	f1bc 0f09 	cmp.w	ip, #9
     75e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
     762:	f240 825d 	bls.w	c20 <loop+0xacc>
  if (c >= 'A' && c <= 'F') return c - 'A' + 10;
     766:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
     76a:	b2c9      	uxtb	r1, r1
     76c:	2905      	cmp	r1, #5
     76e:	f240 82a3 	bls.w	cb8 <loop+0xb64>
  if (c >= 'a' && c <= 'f') return c - 'a' + 10;
     772:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
     776:	b2c9      	uxtb	r1, r1
     778:	2905      	cmp	r1, #5
     77a:	f63f ae88 	bhi.w	48e <loop+0x33a>
     77e:	f1a0 0e57 	sub.w	lr, r0, #87	; 0x57
  if (hi < 0 || lo < 0) return -1;
     782:	f1b8 3fff 	cmp.w	r8, #4294967295
     786:	f43f ae82 	beq.w	48e <loop+0x33a>
  return (hi << 4) | lo;
     78a:	9906      	ldr	r1, [sp, #24]
     78c:	ea41 1707 	orr.w	r7, r1, r7, lsl #4
  if (rec.length() < data_end + 2u) return false;
     790:	9916      	ldr	r1, [sp, #88]	; 0x58
  const size_t data_end   = data_start + (size_t)len_i * 2u;
     792:	0078      	lsls	r0, r7, #1
  if (rec.length() < data_end + 2u) return false;
     794:	f100 0c0b 	add.w	ip, r0, #11
  const size_t data_end   = data_start + (size_t)len_i * 2u;
     798:	9006      	str	r0, [sp, #24]
  if (rec.length() < data_end + 2u) return false;
     79a:	4561      	cmp	r1, ip
     79c:	f4ff ae77 	bcc.w	48e <loop+0x33a>
  return (hi << 4) | lo;
     7a0:	9905      	ldr	r1, [sp, #20]
     7a2:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
     7a6:	9807      	ldr	r0, [sp, #28]
     7a8:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
     7ac:	ea4e 1108 	orr.w	r1, lr, r8, lsl #4
  int sum = len_i + addr_hi + addr_lo + rectype;
     7b0:	19c3      	adds	r3, r0, r7
     7b2:	4413      	add	r3, r2
     7b4:	440b      	add	r3, r1
     7b6:	9305      	str	r3, [sp, #20]
  const size_t data_end   = data_start + (size_t)len_i * 2u;
     7b8:	9b06      	ldr	r3, [sp, #24]
     7ba:	f103 0209 	add.w	r2, r3, #9
     7be:	9207      	str	r2, [sp, #28]
  for (size_t i = data_start; i < data_end; i += 2) {
     7c0:	2b00      	cmp	r3, #0
     7c2:	f000 822f 	beq.w	c24 <loop+0xad0>
     7c6:	2309      	movs	r3, #9
     7c8:	4698      	mov	r8, r3
     7ca:	e038      	b.n	83e <loop+0x6ea>
  if (c >= 'A' && c <= 'F') return c - 'A' + 10;
     7cc:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
     7d0:	b2c9      	uxtb	r1, r1
     7d2:	2905      	cmp	r1, #5
     7d4:	f240 81b0 	bls.w	b38 <loop+0x9e4>
  if (c >= 'a' && c <= 'f') return c - 'a' + 10;
     7d8:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
     7dc:	b2c9      	uxtb	r1, r1
     7de:	2905      	cmp	r1, #5
     7e0:	bf94      	ite	ls
     7e2:	3a57      	subls	r2, #87	; 0x57
  return -1;
     7e4:	f04f 32ff 	movhi.w	r2, #4294967295
  int lo = hexNibble(s.charAt(i + 1));
     7e8:	f108 0101 	add.w	r1, r8, #1
     7ec:	a814      	add	r0, sp, #80	; 0x50
     7ee:	9208      	str	r2, [sp, #32]
     7f0:	f001 f926 	bl	1a40 <String::charAt(unsigned int) const>
  if (c >= '0' && c <= '9') return c - '0';
     7f4:	f1a0 0130 	sub.w	r1, r0, #48	; 0x30
     7f8:	9a08      	ldr	r2, [sp, #32]
     7fa:	fa5f fc81 	uxtb.w	ip, r1
     7fe:	f1bc 0f09 	cmp.w	ip, #9
     802:	f240 8185 	bls.w	b10 <loop+0x9bc>
  if (c >= 'A' && c <= 'F') return c - 'A' + 10;
     806:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
     80a:	b2c9      	uxtb	r1, r1
     80c:	2905      	cmp	r1, #5
     80e:	f240 81cf 	bls.w	bb0 <loop+0xa5c>
  if (c >= 'a' && c <= 'f') return c - 'a' + 10;
     812:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
     816:	b2c9      	uxtb	r1, r1
     818:	2905      	cmp	r1, #5
     81a:	f63f ae38 	bhi.w	48e <loop+0x33a>
     81e:	3857      	subs	r0, #87	; 0x57
  if (hi < 0 || lo < 0) return -1;
     820:	ea50 0102 	orrs.w	r1, r0, r2
     824:	f53f ae33 	bmi.w	48e <loop+0x33a>
    sum += b;
     828:	9b05      	ldr	r3, [sp, #20]
  return (hi << 4) | lo;
     82a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
  for (size_t i = data_start; i < data_end; i += 2) {
     82e:	f108 0802 	add.w	r8, r8, #2
    sum += b;
     832:	4403      	add	r3, r0
     834:	9305      	str	r3, [sp, #20]
  for (size_t i = data_start; i < data_end; i += 2) {
     836:	9b07      	ldr	r3, [sp, #28]
     838:	4543      	cmp	r3, r8
     83a:	f240 81f3 	bls.w	c24 <loop+0xad0>
  int hi = hexNibble(s.charAt(i));
     83e:	4641      	mov	r1, r8
     840:	a814      	add	r0, sp, #80	; 0x50
     842:	f001 f8fd 	bl	1a40 <String::charAt(unsigned int) const>
  if (c >= '0' && c <= '9') return c - '0';
     846:	f1a0 0130 	sub.w	r1, r0, #48	; 0x30
  int hi = hexNibble(s.charAt(i));
     84a:	4602      	mov	r2, r0
  if (c >= '0' && c <= '9') return c - '0';
     84c:	b2c8      	uxtb	r0, r1
     84e:	2809      	cmp	r0, #9
     850:	d8bc      	bhi.n	7cc <loop+0x678>
     852:	460a      	mov	r2, r1
     854:	e7c8      	b.n	7e8 <loop+0x694>
     856:	49bb      	ldr	r1, [pc, #748]	; (b44 <loop+0x9f0>)
     858:	a80b      	add	r0, sp, #44	; 0x2c
     85a:	f001 f8c7 	bl	19ec <String::equals(char const*) const>
    else if (cmd == "PING") {
     85e:	b110      	cbz	r0, 866 <loop+0x712>
      netln("PONG");
     860:	a814      	add	r0, sp, #80	; 0x50
     862:	49b9      	ldr	r1, [pc, #740]	; (b48 <loop+0x9f4>)
     864:	e531      	b.n	2ca <loop+0x176>
     866:	49b9      	ldr	r1, [pc, #740]	; (b4c <loop+0x9f8>)
     868:	a80b      	add	r0, sp, #44	; 0x2c
     86a:	f001 f8bf 	bl	19ec <String::equals(char const*) const>
    else if (cmd == "VERSION") {
     86e:	b1e8      	cbz	r0, 8ac <loop+0x758>
      netln(String("FW ") + FW_VERSION);
     870:	49b7      	ldr	r1, [pc, #732]	; (b50 <loop+0x9fc>)
     872:	a811      	add	r0, sp, #68	; 0x44
     874:	f000 ffb6 	bl	17e4 <String::String(char const*)>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
     878:	a911      	add	r1, sp, #68	; 0x44
     87a:	a814      	add	r0, sp, #80	; 0x50
     87c:	f000 ffd0 	bl	1820 <String::String(String const&)>
     880:	a814      	add	r0, sp, #80	; 0x50
     882:	49b4      	ldr	r1, [pc, #720]	; (b54 <loop+0xa00>)
     884:	f001 f8a4 	bl	19d0 <operator+(StringSumHelper const&, char const*)>
     888:	4601      	mov	r1, r0
	size_t println(const String &s)			{ return print(s) + println(); }
     88a:	4620      	mov	r0, r4
     88c:	f000 fe86 	bl	159c <Print::print(String const&)>
     890:	4620      	mov	r0, r4
     892:	f000 feb5 	bl	1600 <Print::println()>
class StringSumHelper : public String
     896:	a814      	add	r0, sp, #80	; 0x50
     898:	f000 ffde 	bl	1858 <String::~String()>
     89c:	a811      	add	r0, sp, #68	; 0x44
     89e:	f000 ffdb 	bl	1858 <String::~String()>
     8a2:	e4dd      	b.n	260 <loop+0x10c>
  if (c >= 'A' && c <= 'F') return c - 'A' + 10;
     8a4:	f1a0 0337 	sub.w	r3, r0, #55	; 0x37
     8a8:	9306      	str	r3, [sp, #24]
     8aa:	e6c2      	b.n	632 <loop+0x4de>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
     8ac:	49aa      	ldr	r1, [pc, #680]	; (b58 <loop+0xa04>)
     8ae:	a80b      	add	r0, sp, #44	; 0x2c
     8b0:	f001 f89c 	bl	19ec <String::equals(char const*) const>
    else if (cmd == "STATUS") {
     8b4:	2800      	cmp	r0, #0
     8b6:	f000 812d 	beq.w	b14 <loop+0x9c0>
  logBoth(String("FW ") + FW_VERSION);
     8ba:	af11      	add	r7, sp, #68	; 0x44
     8bc:	49a4      	ldr	r1, [pc, #656]	; (b50 <loop+0x9fc>)
  logBoth(String("ECHO ") + (echo_enabled ? "ON" : "OFF"));
     8be:	f8df 82ec 	ldr.w	r8, [pc, #748]	; bac <loop+0xa58>
  logBoth(String("FW ") + FW_VERSION);
     8c2:	4638      	mov	r0, r7
     8c4:	f000 ff8e 	bl	17e4 <String::String(char const*)>
	StringSumHelper(const String &s) : String(s) {}
     8c8:	4639      	mov	r1, r7
     8ca:	a814      	add	r0, sp, #80	; 0x50
     8cc:	f000 ffa8 	bl	1820 <String::String(String const&)>
     8d0:	49a0      	ldr	r1, [pc, #640]	; (b54 <loop+0xa00>)
     8d2:	a814      	add	r0, sp, #80	; 0x50
     8d4:	f001 f87c 	bl	19d0 <operator+(StringSumHelper const&, char const*)>
     8d8:	4601      	mov	r1, r0
     8da:	48a0      	ldr	r0, [pc, #640]	; (b5c <loop+0xa08>)
     8dc:	9104      	str	r1, [sp, #16]
     8de:	f000 fe5d 	bl	159c <Print::print(String const&)>
     8e2:	489e      	ldr	r0, [pc, #632]	; (b5c <loop+0xa08>)
     8e4:	f000 fe8c 	bl	1600 <Print::println()>
     8e8:	9904      	ldr	r1, [sp, #16]
     8ea:	4620      	mov	r0, r4
     8ec:	f000 fe56 	bl	159c <Print::print(String const&)>
     8f0:	4620      	mov	r0, r4
     8f2:	f000 fe85 	bl	1600 <Print::println()>
class StringSumHelper : public String
     8f6:	a814      	add	r0, sp, #80	; 0x50
     8f8:	f000 ffae 	bl	1858 <String::~String()>
     8fc:	4638      	mov	r0, r7
     8fe:	f000 ffab 	bl	1858 <String::~String()>
  logBoth(String("BLINK ") + String(blink_ms) + "ms");
     902:	4638      	mov	r0, r7
     904:	4996      	ldr	r1, [pc, #600]	; (b60 <loop+0xa0c>)
     906:	f000 ff6d 	bl	17e4 <String::String(char const*)>
	StringSumHelper(const String &s) : String(s) {}
     90a:	4639      	mov	r1, r7
     90c:	a814      	add	r0, sp, #80	; 0x50
     90e:	f000 ff87 	bl	1820 <String::String(String const&)>
     912:	220a      	movs	r2, #10
     914:	f8db 1000 	ldr.w	r1, [fp]
     918:	a80e      	add	r0, sp, #56	; 0x38
     91a:	f000 ffd9 	bl	18d0 <String::String(unsigned long, unsigned char)>
     91e:	a90e      	add	r1, sp, #56	; 0x38
     920:	a814      	add	r0, sp, #80	; 0x50
     922:	f001 f84d 	bl	19c0 <operator+(StringSumHelper const&, String const&)>
     926:	498f      	ldr	r1, [pc, #572]	; (b64 <loop+0xa10>)
     928:	f001 f852 	bl	19d0 <operator+(StringSumHelper const&, char const*)>
     92c:	4601      	mov	r1, r0
     92e:	488b      	ldr	r0, [pc, #556]	; (b5c <loop+0xa08>)
     930:	9104      	str	r1, [sp, #16]
     932:	f000 fe33 	bl	159c <Print::print(String const&)>
     936:	4889      	ldr	r0, [pc, #548]	; (b5c <loop+0xa08>)
     938:	f000 fe62 	bl	1600 <Print::println()>
     93c:	9904      	ldr	r1, [sp, #16]
     93e:	4620      	mov	r0, r4
     940:	f000 fe2c 	bl	159c <Print::print(String const&)>
     944:	4620      	mov	r0, r4
     946:	f000 fe5b 	bl	1600 <Print::println()>
     94a:	a80e      	add	r0, sp, #56	; 0x38
     94c:	f000 ff84 	bl	1858 <String::~String()>
class StringSumHelper : public String
     950:	a814      	add	r0, sp, #80	; 0x50
     952:	f000 ff81 	bl	1858 <String::~String()>
     956:	4638      	mov	r0, r7
     958:	f000 ff7e 	bl	1858 <String::~String()>
  logBoth(String("ECHO ") + (echo_enabled ? "ON" : "OFF"));
     95c:	4638      	mov	r0, r7
     95e:	4982      	ldr	r1, [pc, #520]	; (b68 <loop+0xa14>)
     960:	f000 ff40 	bl	17e4 <String::String(char const*)>
	StringSumHelper(const String &s) : String(s) {}
     964:	4639      	mov	r1, r7
     966:	a814      	add	r0, sp, #80	; 0x50
     968:	f000 ff5a 	bl	1820 <String::String(String const&)>
     96c:	7829      	ldrb	r1, [r5, #0]
     96e:	4b7f      	ldr	r3, [pc, #508]	; (b6c <loop+0xa18>)
     970:	a814      	add	r0, sp, #80	; 0x50
     972:	2900      	cmp	r1, #0
     974:	bf18      	it	ne
     976:	4643      	movne	r3, r8
     978:	4619      	mov	r1, r3
     97a:	f001 f829 	bl	19d0 <operator+(StringSumHelper const&, char const*)>
     97e:	4601      	mov	r1, r0
     980:	4876      	ldr	r0, [pc, #472]	; (b5c <loop+0xa08>)
     982:	9104      	str	r1, [sp, #16]
     984:	f000 fe0a 	bl	159c <Print::print(String const&)>
     988:	4874      	ldr	r0, [pc, #464]	; (b5c <loop+0xa08>)
     98a:	f000 fe39 	bl	1600 <Print::println()>
     98e:	9904      	ldr	r1, [sp, #16]
     990:	4620      	mov	r0, r4
     992:	f000 fe03 	bl	159c <Print::print(String const&)>
     996:	4620      	mov	r0, r4
     998:	f000 fe32 	bl	1600 <Print::println()>
class StringSumHelper : public String
     99c:	a814      	add	r0, sp, #80	; 0x50
     99e:	f000 ff5b 	bl	1858 <String::~String()>
     9a2:	4638      	mov	r0, r7
     9a4:	f000 ff58 	bl	1858 <String::~String()>
  logBoth(String("STREAM ") + (stream_enabled ? "ON" : "OFF"));
     9a8:	4638      	mov	r0, r7
     9aa:	4971      	ldr	r1, [pc, #452]	; (b70 <loop+0xa1c>)
     9ac:	f000 ff1a 	bl	17e4 <String::String(char const*)>
	StringSumHelper(const String &s) : String(s) {}
     9b0:	4639      	mov	r1, r7
     9b2:	a814      	add	r0, sp, #80	; 0x50
     9b4:	f000 ff34 	bl	1820 <String::String(String const&)>
     9b8:	f89a 1000 	ldrb.w	r1, [sl]
     9bc:	4b6b      	ldr	r3, [pc, #428]	; (b6c <loop+0xa18>)
     9be:	a814      	add	r0, sp, #80	; 0x50
     9c0:	2900      	cmp	r1, #0
     9c2:	bf18      	it	ne
     9c4:	4643      	movne	r3, r8
     9c6:	4619      	mov	r1, r3
     9c8:	f001 f802 	bl	19d0 <operator+(StringSumHelper const&, char const*)>
     9cc:	4601      	mov	r1, r0
     9ce:	4863      	ldr	r0, [pc, #396]	; (b5c <loop+0xa08>)
     9d0:	9104      	str	r1, [sp, #16]
     9d2:	f000 fde3 	bl	159c <Print::print(String const&)>
     9d6:	4861      	ldr	r0, [pc, #388]	; (b5c <loop+0xa08>)
     9d8:	f000 fe12 	bl	1600 <Print::println()>
     9dc:	9904      	ldr	r1, [sp, #16]
     9de:	4620      	mov	r0, r4
     9e0:	f000 fddc 	bl	159c <Print::print(String const&)>
     9e4:	4620      	mov	r0, r4
     9e6:	f000 fe0b 	bl	1600 <Print::println()>
class StringSumHelper : public String
     9ea:	a814      	add	r0, sp, #80	; 0x50
     9ec:	f000 ff34 	bl	1858 <String::~String()>
     9f0:	4638      	mov	r0, r7
     9f2:	f000 ff31 	bl	1858 <String::~String()>
  logBoth(String("HEX session ") + (in_hex_session ? "ACTIVE" : "IDLE"));
     9f6:	4638      	mov	r0, r7
     9f8:	495e      	ldr	r1, [pc, #376]	; (b74 <loop+0xa20>)
     9fa:	f000 fef3 	bl	17e4 <String::String(char const*)>
	StringSumHelper(const String &s) : String(s) {}
     9fe:	4639      	mov	r1, r7
     a00:	a814      	add	r0, sp, #80	; 0x50
     a02:	f000 ff0d 	bl	1820 <String::String(String const&)>
     a06:	4a5c      	ldr	r2, [pc, #368]	; (b78 <loop+0xa24>)
     a08:	4b5c      	ldr	r3, [pc, #368]	; (b7c <loop+0xa28>)
     a0a:	a814      	add	r0, sp, #80	; 0x50
     a0c:	7831      	ldrb	r1, [r6, #0]
     a0e:	2900      	cmp	r1, #0
     a10:	bf14      	ite	ne
     a12:	4611      	movne	r1, r2
     a14:	4619      	moveq	r1, r3
     a16:	f000 ffdb 	bl	19d0 <operator+(StringSumHelper const&, char const*)>
     a1a:	4601      	mov	r1, r0
     a1c:	484f      	ldr	r0, [pc, #316]	; (b5c <loop+0xa08>)
     a1e:	9104      	str	r1, [sp, #16]
     a20:	f000 fdbc 	bl	159c <Print::print(String const&)>
     a24:	484d      	ldr	r0, [pc, #308]	; (b5c <loop+0xa08>)
     a26:	f000 fdeb 	bl	1600 <Print::println()>
     a2a:	9904      	ldr	r1, [sp, #16]
     a2c:	4620      	mov	r0, r4
     a2e:	f000 fdb5 	bl	159c <Print::print(String const&)>
     a32:	4620      	mov	r0, r4
     a34:	f000 fde4 	bl	1600 <Print::println()>
class StringSumHelper : public String
     a38:	a814      	add	r0, sp, #80	; 0x50
     a3a:	f000 ff0d 	bl	1858 <String::~String()>
     a3e:	4638      	mov	r0, r7
     a40:	f000 ff0a 	bl	1858 <String::~String()>
  snprintf(buf, sizeof(buf), "HEX lines=%lu ok=%lu bad=%lu bytes=%lu", hex_lines, hex_ok, hex_bad, hex_bytes);
     a44:	4b4e      	ldr	r3, [pc, #312]	; (b80 <loop+0xa2c>)
     a46:	4a4f      	ldr	r2, [pc, #316]	; (b84 <loop+0xa30>)
     a48:	a814      	add	r0, sp, #80	; 0x50
     a4a:	681b      	ldr	r3, [r3, #0]
     a4c:	2160      	movs	r1, #96	; 0x60
     a4e:	9302      	str	r3, [sp, #8]
     a50:	4b4d      	ldr	r3, [pc, #308]	; (b88 <loop+0xa34>)
     a52:	681b      	ldr	r3, [r3, #0]
     a54:	9301      	str	r3, [sp, #4]
     a56:	4b4d      	ldr	r3, [pc, #308]	; (b8c <loop+0xa38>)
     a58:	681b      	ldr	r3, [r3, #0]
     a5a:	9300      	str	r3, [sp, #0]
     a5c:	4b4c      	ldr	r3, [pc, #304]	; (b90 <loop+0xa3c>)
     a5e:	681b      	ldr	r3, [r3, #0]
     a60:	f003 fd36 	bl	44d0 <snprintf>
  logBoth(String(buf));
     a64:	a914      	add	r1, sp, #80	; 0x50
     a66:	4638      	mov	r0, r7
     a68:	f000 febc 	bl	17e4 <String::String(char const*)>
     a6c:	4639      	mov	r1, r7
     a6e:	483b      	ldr	r0, [pc, #236]	; (b5c <loop+0xa08>)
     a70:	f000 fd94 	bl	159c <Print::print(String const&)>
     a74:	4839      	ldr	r0, [pc, #228]	; (b5c <loop+0xa08>)
     a76:	f000 fdc3 	bl	1600 <Print::println()>
     a7a:	4639      	mov	r1, r7
     a7c:	4620      	mov	r0, r4
     a7e:	f000 fd8d 	bl	159c <Print::print(String const&)>
     a82:	4620      	mov	r0, r4
     a84:	f000 fdbc 	bl	1600 <Print::println()>
     a88:	4638      	mov	r0, r7
     a8a:	f000 fee5 	bl	1858 <String::~String()>
     a8e:	f8d9 3000 	ldr.w	r3, [r9]
  snprintf(buf, sizeof(buf), "UPTIME %lu ms", millis());
     a92:	4a40      	ldr	r2, [pc, #256]	; (b94 <loop+0xa40>)
     a94:	a814      	add	r0, sp, #80	; 0x50
     a96:	2160      	movs	r1, #96	; 0x60
     a98:	f003 fd1a 	bl	44d0 <snprintf>
  logBoth(String(buf));
     a9c:	a914      	add	r1, sp, #80	; 0x50
     a9e:	4638      	mov	r0, r7
     aa0:	f000 fea0 	bl	17e4 <String::String(char const*)>
     aa4:	4639      	mov	r1, r7
     aa6:	482d      	ldr	r0, [pc, #180]	; (b5c <loop+0xa08>)
     aa8:	f000 fd78 	bl	159c <Print::print(String const&)>
     aac:	482b      	ldr	r0, [pc, #172]	; (b5c <loop+0xa08>)
     aae:	f000 fda7 	bl	1600 <Print::println()>
     ab2:	4639      	mov	r1, r7
     ab4:	4620      	mov	r0, r4
     ab6:	f000 fd71 	bl	159c <Print::print(String const&)>
     aba:	4620      	mov	r0, r4
     abc:	f000 fda0 	bl	1600 <Print::println()>
     ac0:	f7ff bbcb 	b.w	25a <loop+0x106>
          NET.printf("HEX OK lines=%lu bytes=%lu\n", hex_ok, hex_bytes);
     ac4:	f8d8 3000 	ldr.w	r3, [r8]
     ac8:	4620      	mov	r0, r4
     aca:	4933      	ldr	r1, [pc, #204]	; (b98 <loop+0xa44>)
     acc:	f000 fdb4 	bl	1638 <Print::printf(char const*, ...)>
          blink_ms = 87;
     ad0:	2357      	movs	r3, #87	; 0x57
          netln("APPLIED");
     ad2:	a814      	add	r0, sp, #80	; 0x50
     ad4:	4931      	ldr	r1, [pc, #196]	; (b9c <loop+0xa48>)
          blink_ms = 87;
     ad6:	f8cb 3000 	str.w	r3, [fp]
          netln("APPLIED");
     ada:	f000 fe83 	bl	17e4 <String::String(char const*)>
     ade:	a914      	add	r1, sp, #80	; 0x50
     ae0:	4620      	mov	r0, r4
     ae2:	f000 fd5b 	bl	159c <Print::print(String const&)>
     ae6:	4620      	mov	r0, r4
     ae8:	f000 fd8a 	bl	1600 <Print::println()>
     aec:	a814      	add	r0, sp, #80	; 0x50
     aee:	f000 feb3 	bl	1858 <String::~String()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     af2:	212e      	movs	r1, #46	; 0x2e
     af4:	482a      	ldr	r0, [pc, #168]	; (ba0 <loop+0xa4c>)
     af6:	f002 fc15 	bl	3324 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     afa:	4818      	ldr	r0, [pc, #96]	; (b5c <loop+0xa08>)
     afc:	f000 fd80 	bl	1600 <Print::println()>
     b00:	f7ff bbae 	b.w	260 <loop+0x10c>
  if (c >= '0' && c <= '9') return c - '0';
     b04:	461f      	mov	r7, r3
     b06:	e57b      	b.n	600 <loop+0x4ac>
  if (c >= 'A' && c <= 'F') return c - 'A' + 10;
     b08:	f1a0 0337 	sub.w	r3, r0, #55	; 0x37
     b0c:	9307      	str	r3, [sp, #28]
     b0e:	e5c5      	b.n	69c <loop+0x548>
  if (c >= '0' && c <= '9') return c - '0';
     b10:	4608      	mov	r0, r1
     b12:	e685      	b.n	820 <loop+0x6cc>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
     b14:	4923      	ldr	r1, [pc, #140]	; (ba4 <loop+0xa50>)
     b16:	a80b      	add	r0, sp, #44	; 0x2c
     b18:	f000 ff68 	bl	19ec <String::equals(char const*) const>
    else if (cmd == "ECHO ON") {
     b1c:	2800      	cmp	r0, #0
     b1e:	d057      	beq.n	bd0 <loop+0xa7c>
      if (!in_hex_session) { echo_enabled = true; netln("OK"); }
     b20:	7833      	ldrb	r3, [r6, #0]
     b22:	2b00      	cmp	r3, #0
     b24:	d150      	bne.n	bc8 <loop+0xa74>
     b26:	2301      	movs	r3, #1
     b28:	a814      	add	r0, sp, #80	; 0x50
     b2a:	491f      	ldr	r1, [pc, #124]	; (ba8 <loop+0xa54>)
     b2c:	702b      	strb	r3, [r5, #0]
     b2e:	f7ff bbcc 	b.w	2ca <loop+0x176>
  if (c >= 'A' && c <= 'F') return c - 'A' + 10;
     b32:	f1a0 0737 	sub.w	r7, r0, #55	; 0x37
     b36:	e563      	b.n	600 <loop+0x4ac>
     b38:	3a37      	subs	r2, #55	; 0x37
     b3a:	e655      	b.n	7e8 <loop+0x694>
  return -1;
     b3c:	f04f 33ff 	mov.w	r3, #4294967295
     b40:	9305      	str	r3, [sp, #20]
     b42:	e592      	b.n	66a <loop+0x516>
     b44:	20000b74 	.word	0x20000b74
     b48:	20000b7c 	.word	0x20000b7c
     b4c:	20000b84 	.word	0x20000b84
     b50:	20000b8c 	.word	0x20000b8c
     b54:	20000370 	.word	0x20000370
     b58:	20000b90 	.word	0x20000b90
     b5c:	20000fa8 	.word	0x20000fa8
     b60:	20000b98 	.word	0x20000b98
     b64:	20000ba0 	.word	0x20000ba0
     b68:	20000ba4 	.word	0x20000ba4
     b6c:	20000c38 	.word	0x20000c38
     b70:	20000bac 	.word	0x20000bac
     b74:	20000bb4 	.word	0x20000bb4
     b78:	200009f8 	.word	0x200009f8
     b7c:	20000ac0 	.word	0x20000ac0
     b80:	20001d00 	.word	0x20001d00
     b84:	20000bc4 	.word	0x20000bc4
     b88:	20001cfc 	.word	0x20001cfc
     b8c:	20001cf8 	.word	0x20001cf8
     b90:	20001d04 	.word	0x20001d04
     b94:	20000bec 	.word	0x20000bec
     b98:	20000b04 	.word	0x20000b04
     b9c:	20000b20 	.word	0x20000b20
     ba0:	20000b28 	.word	0x20000b28
     ba4:	20000bfc 	.word	0x20000bfc
     ba8:	20000c04 	.word	0x20000c04
     bac:	20000c24 	.word	0x20000c24
  if (c >= 'A' && c <= 'F') return c - 'A' + 10;
     bb0:	3837      	subs	r0, #55	; 0x37
     bb2:	e635      	b.n	820 <loop+0x6cc>
     bb4:	f1a0 0337 	sub.w	r3, r0, #55	; 0x37
     bb8:	9305      	str	r3, [sp, #20]
     bba:	e556      	b.n	66a <loop+0x516>
     bbc:	f1a0 0337 	sub.w	r3, r0, #55	; 0x37
     bc0:	e588      	b.n	6d4 <loop+0x580>
     bc2:	f1a0 0237 	sub.w	r2, r0, #55	; 0x37
     bc6:	e59e      	b.n	706 <loop+0x5b2>
      else { netln("BUSY"); }
     bc8:	a814      	add	r0, sp, #80	; 0x50
     bca:	496f      	ldr	r1, [pc, #444]	; (d88 <loop+0xc34>)
     bcc:	f7ff bb7d 	b.w	2ca <loop+0x176>
     bd0:	496e      	ldr	r1, [pc, #440]	; (d8c <loop+0xc38>)
     bd2:	a80b      	add	r0, sp, #44	; 0x2c
     bd4:	f000 ff0a 	bl	19ec <String::equals(char const*) const>
    else if (cmd == "ECHO OFF") {
     bd8:	b188      	cbz	r0, bfe <loop+0xaaa>
      if (!in_hex_session) { echo_enabled = false; netln("OK"); }
     bda:	7833      	ldrb	r3, [r6, #0]
     bdc:	b963      	cbnz	r3, bf8 <loop+0xaa4>
     bde:	a814      	add	r0, sp, #80	; 0x50
     be0:	496b      	ldr	r1, [pc, #428]	; (d90 <loop+0xc3c>)
     be2:	702b      	strb	r3, [r5, #0]
      netln("ERR");
     be4:	f000 fdfe 	bl	17e4 <String::String(char const*)>
  NET.println(s);
     be8:	a914      	add	r1, sp, #80	; 0x50
     bea:	4620      	mov	r0, r4
     bec:	f7ff fa3c 	bl	68 <Print::println(String const&) [clone .isra.0]>
     bf0:	e460      	b.n	4b4 <loop+0x360>
  if (c >= 'A' && c <= 'F') return c - 'A' + 10;
     bf2:	f1a0 0837 	sub.w	r8, r0, #55	; 0x37
     bf6:	e5a6      	b.n	746 <loop+0x5f2>
        netln("BUSY");
     bf8:	a814      	add	r0, sp, #80	; 0x50
     bfa:	4963      	ldr	r1, [pc, #396]	; (d88 <loop+0xc34>)
     bfc:	e7f2      	b.n	be4 <loop+0xa90>
     bfe:	4965      	ldr	r1, [pc, #404]	; (d94 <loop+0xc40>)
     c00:	a80b      	add	r0, sp, #44	; 0x2c
     c02:	f000 fef3 	bl	19ec <String::equals(char const*) const>
    else if (cmd == "STREAM ON" || cmd == "POT ON") {
     c06:	2800      	cmp	r0, #0
     c08:	d062      	beq.n	cd0 <loop+0xb7c>
      if (!in_hex_session) {
     c0a:	7833      	ldrb	r3, [r6, #0]
     c0c:	2b00      	cmp	r3, #0
     c0e:	d1f3      	bne.n	bf8 <loop+0xaa4>
        stream_enabled = true;
     c10:	2201      	movs	r2, #1
        netln("OK");
     c12:	a814      	add	r0, sp, #80	; 0x50
     c14:	495e      	ldr	r1, [pc, #376]	; (d90 <loop+0xc3c>)
        stream_enabled = true;
     c16:	f88a 2000 	strb.w	r2, [sl]
        last_stream_ms = 0;
     c1a:	4a5f      	ldr	r2, [pc, #380]	; (d98 <loop+0xc44>)
     c1c:	6013      	str	r3, [r2, #0]
        netln("OK");
     c1e:	e7e1      	b.n	be4 <loop+0xa90>
  if (c >= '0' && c <= '9') return c - '0';
     c20:	468e      	mov	lr, r1
     c22:	e5ae      	b.n	782 <loop+0x62e>
  int hi = hexNibble(s.charAt(i));
     c24:	9907      	ldr	r1, [sp, #28]
     c26:	a814      	add	r0, sp, #80	; 0x50
     c28:	f000 ff0a 	bl	1a40 <String::charAt(unsigned int) const>
  if (c >= '0' && c <= '9') return c - '0';
     c2c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
  int hi = hexNibble(s.charAt(i));
     c30:	4680      	mov	r8, r0
  if (c >= '0' && c <= '9') return c - '0';
     c32:	b2da      	uxtb	r2, r3
     c34:	2a09      	cmp	r2, #9
     c36:	d949      	bls.n	ccc <loop+0xb78>
  if (c >= 'A' && c <= 'F') return c - 'A' + 10;
     c38:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
     c3c:	b2db      	uxtb	r3, r3
     c3e:	2b05      	cmp	r3, #5
     c40:	d941      	bls.n	cc6 <loop+0xb72>
  if (c >= 'a' && c <= 'f') return c - 'a' + 10;
     c42:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
     c46:	b2db      	uxtb	r3, r3
     c48:	2b05      	cmp	r3, #5
     c4a:	bf94      	ite	ls
     c4c:	f1a0 0857 	subls.w	r8, r0, #87	; 0x57
  return -1;
     c50:	f04f 38ff 	movhi.w	r8, #4294967295
  int lo = hexNibble(s.charAt(i + 1));
     c54:	9906      	ldr	r1, [sp, #24]
     c56:	a814      	add	r0, sp, #80	; 0x50
     c58:	310a      	adds	r1, #10
     c5a:	f000 fef1 	bl	1a40 <String::charAt(unsigned int) const>
  if (c >= '0' && c <= '9') return c - '0';
     c5e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
     c62:	b2da      	uxtb	r2, r3
     c64:	2a09      	cmp	r2, #9
     c66:	d92c      	bls.n	cc2 <loop+0xb6e>
  if (c >= 'A' && c <= 'F') return c - 'A' + 10;
     c68:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
     c6c:	b2db      	uxtb	r3, r3
     c6e:	2b05      	cmp	r3, #5
     c70:	d925      	bls.n	cbe <loop+0xb6a>
  if (c >= 'a' && c <= 'f') return c - 'a' + 10;
     c72:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
     c76:	b2db      	uxtb	r3, r3
     c78:	2b05      	cmp	r3, #5
     c7a:	f63f ac08 	bhi.w	48e <loop+0x33a>
     c7e:	3857      	subs	r0, #87	; 0x57
  if (hi < 0 || lo < 0) return -1;
     c80:	f1b8 3fff 	cmp.w	r8, #4294967295
     c84:	f43f ac03 	beq.w	48e <loop+0x33a>
  sum = ((~sum + 1) & 0xFF);
     c88:	9b05      	ldr	r3, [sp, #20]
  return (hi << 4) | lo;
     c8a:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
  sum = ((~sum + 1) & 0xFF);
     c8e:	425b      	negs	r3, r3
     c90:	b2db      	uxtb	r3, r3
  if (ok) hex_bytes += (uint32_t)len_i;
     c92:	4298      	cmp	r0, r3
     c94:	f47f abfb 	bne.w	48e <loop+0x33a>
     c98:	f8df c130 	ldr.w	ip, [pc, #304]	; dcc <loop+0xc78>
							  return write((const uint8_t *)str, strlen(str)); }
     c9c:	2203      	movs	r2, #3
        hex_ok++;
     c9e:	483f      	ldr	r0, [pc, #252]	; (d9c <loop+0xc48>)
  if (ok) hex_bytes += (uint32_t)len_i;
     ca0:	f8dc 3000 	ldr.w	r3, [ip]
     ca4:	493e      	ldr	r1, [pc, #248]	; (da0 <loop+0xc4c>)
     ca6:	443b      	add	r3, r7
     ca8:	f8cc 3000 	str.w	r3, [ip]
        hex_ok++;
     cac:	6803      	ldr	r3, [r0, #0]
     cae:	3301      	adds	r3, #1
     cb0:	6003      	str	r3, [r0, #0]
     cb2:	4620      	mov	r0, r4
     cb4:	f7ff bbf2 	b.w	49c <loop+0x348>
  if (c >= 'A' && c <= 'F') return c - 'A' + 10;
     cb8:	f1a0 0e37 	sub.w	lr, r0, #55	; 0x37
     cbc:	e561      	b.n	782 <loop+0x62e>
     cbe:	3837      	subs	r0, #55	; 0x37
     cc0:	e7de      	b.n	c80 <loop+0xb2c>
  if (c >= '0' && c <= '9') return c - '0';
     cc2:	4618      	mov	r0, r3
     cc4:	e7dc      	b.n	c80 <loop+0xb2c>
  if (c >= 'A' && c <= 'F') return c - 'A' + 10;
     cc6:	f1a0 0837 	sub.w	r8, r0, #55	; 0x37
     cca:	e7c3      	b.n	c54 <loop+0xb00>
  if (c >= '0' && c <= '9') return c - '0';
     ccc:	4698      	mov	r8, r3
     cce:	e7c1      	b.n	c54 <loop+0xb00>
     cd0:	4934      	ldr	r1, [pc, #208]	; (da4 <loop+0xc50>)
     cd2:	a80b      	add	r0, sp, #44	; 0x2c
     cd4:	f000 fe8a 	bl	19ec <String::equals(char const*) const>
    else if (cmd == "STREAM ON" || cmd == "POT ON") {
     cd8:	2800      	cmp	r0, #0
     cda:	d196      	bne.n	c0a <loop+0xab6>
     cdc:	4932      	ldr	r1, [pc, #200]	; (da8 <loop+0xc54>)
     cde:	a80b      	add	r0, sp, #44	; 0x2c
     ce0:	f000 fe84 	bl	19ec <String::equals(char const*) const>
    else if (cmd == "STREAM OFF" || cmd == "POT OFF") {
     ce4:	b920      	cbnz	r0, cf0 <loop+0xb9c>
     ce6:	4931      	ldr	r1, [pc, #196]	; (dac <loop+0xc58>)
     ce8:	a80b      	add	r0, sp, #44	; 0x2c
     cea:	f000 fe7f 	bl	19ec <String::equals(char const*) const>
     cee:	b128      	cbz	r0, cfc <loop+0xba8>
      stream_enabled = false;
     cf0:	2300      	movs	r3, #0
      netln("OK");
     cf2:	a814      	add	r0, sp, #80	; 0x50
     cf4:	4926      	ldr	r1, [pc, #152]	; (d90 <loop+0xc3c>)
      stream_enabled = false;
     cf6:	f88a 3000 	strb.w	r3, [sl]
      netln("OK");
     cfa:	e773      	b.n	be4 <loop+0xa90>
     cfc:	492c      	ldr	r1, [pc, #176]	; (db0 <loop+0xc5c>)
     cfe:	a80b      	add	r0, sp, #44	; 0x2c
     d00:	f000 fe74 	bl	19ec <String::equals(char const*) const>
    else if (cmd == "HELP") {
     d04:	2800      	cmp	r0, #0
     d06:	d03b      	beq.n	d80 <loop+0xc2c>
  netln("HELLO <token>");
     d08:	492a      	ldr	r1, [pc, #168]	; (db4 <loop+0xc60>)
     d0a:	a814      	add	r0, sp, #80	; 0x50
     d0c:	f000 fd6a 	bl	17e4 <String::String(char const*)>
	size_t println(const String &s)			{ return print(s) + println(); }
     d10:	a914      	add	r1, sp, #80	; 0x50
     d12:	4620      	mov	r0, r4
     d14:	f000 fc42 	bl	159c <Print::print(String const&)>
     d18:	4620      	mov	r0, r4
     d1a:	f000 fc71 	bl	1600 <Print::println()>
     d1e:	a814      	add	r0, sp, #80	; 0x50
     d20:	f000 fd9a 	bl	1858 <String::~String()>
  netln("BEGIN HEX  /  L <hex>  /  END");
     d24:	4924      	ldr	r1, [pc, #144]	; (db8 <loop+0xc64>)
     d26:	a814      	add	r0, sp, #80	; 0x50
     d28:	f000 fd5c 	bl	17e4 <String::String(char const*)>
     d2c:	a914      	add	r1, sp, #80	; 0x50
     d2e:	4620      	mov	r0, r4
     d30:	f000 fc34 	bl	159c <Print::print(String const&)>
     d34:	4620      	mov	r0, r4
     d36:	f000 fc63 	bl	1600 <Print::println()>
     d3a:	a814      	add	r0, sp, #80	; 0x50
     d3c:	f000 fd8c 	bl	1858 <String::~String()>
  netln("PING | VERSION | STATUS");
     d40:	491e      	ldr	r1, [pc, #120]	; (dbc <loop+0xc68>)
     d42:	a814      	add	r0, sp, #80	; 0x50
     d44:	f000 fd4e 	bl	17e4 <String::String(char const*)>
     d48:	a914      	add	r1, sp, #80	; 0x50
     d4a:	4620      	mov	r0, r4
     d4c:	f000 fc26 	bl	159c <Print::print(String const&)>
     d50:	4620      	mov	r0, r4
     d52:	f000 fc55 	bl	1600 <Print::println()>
     d56:	a814      	add	r0, sp, #80	; 0x50
     d58:	f000 fd7e 	bl	1858 <String::~String()>
  netln("ECHO ON|OFF");
     d5c:	4918      	ldr	r1, [pc, #96]	; (dc0 <loop+0xc6c>)
     d5e:	a814      	add	r0, sp, #80	; 0x50
     d60:	f000 fd40 	bl	17e4 <String::String(char const*)>
     d64:	a914      	add	r1, sp, #80	; 0x50
     d66:	4620      	mov	r0, r4
     d68:	f000 fc18 	bl	159c <Print::print(String const&)>
     d6c:	4620      	mov	r0, r4
     d6e:	f000 fc47 	bl	1600 <Print::println()>
     d72:	a814      	add	r0, sp, #80	; 0x50
     d74:	f000 fd70 	bl	1858 <String::~String()>
  netln("STREAM ON|OFF (pot demo)");
     d78:	a814      	add	r0, sp, #80	; 0x50
     d7a:	4912      	ldr	r1, [pc, #72]	; (dc4 <loop+0xc70>)
     d7c:	f7ff baa5 	b.w	2ca <loop+0x176>
      netln("ERR");
     d80:	4911      	ldr	r1, [pc, #68]	; (dc8 <loop+0xc74>)
     d82:	a814      	add	r0, sp, #80	; 0x50
     d84:	e72e      	b.n	be4 <loop+0xa90>
     d86:	bf00      	nop
     d88:	20000a78 	.word	0x20000a78
     d8c:	20000c08 	.word	0x20000c08
     d90:	20000c04 	.word	0x20000c04
     d94:	20000c14 	.word	0x20000c14
     d98:	20001cf4 	.word	0x20001cf4
     d9c:	20001cf8 	.word	0x20001cf8
     da0:	20000ab0 	.word	0x20000ab0
     da4:	20000c20 	.word	0x20000c20
     da8:	20000c28 	.word	0x20000c28
     dac:	20000c34 	.word	0x20000c34
     db0:	20000c3c 	.word	0x20000c3c
     db4:	20000c44 	.word	0x20000c44
     db8:	20000c54 	.word	0x20000c54
     dbc:	20000c74 	.word	0x20000c74
     dc0:	20000c8c 	.word	0x20000c8c
     dc4:	20000c98 	.word	0x20000c98
     dc8:	20000cb4 	.word	0x20000cb4
     dcc:	20001d00 	.word	0x20001d00

00000dd0 <HardwareSerialIMXRT::operator bool()>:
	virtual void begin(uint32_t baud, uint32_t format) {
					  serial_begin(BAUD2DIV(baud));
					  serial_format(format); }
	*/

	operator bool()			{ return true; }
     dd0:	2001      	movs	r0, #1
     dd2:	4770      	bx	lr

00000dd4 <HardwareSerialIMXRT::availableForWrite()>:

int HardwareSerialIMXRT::availableForWrite(void)
{
	uint32_t head, tail;

	head = tx_buffer_head_;
     dd4:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
	tail = tx_buffer_tail_;
     dd8:	f8b0 2048 	ldrh.w	r2, [r0, #72]	; 0x48
	head = tx_buffer_head_;
     ddc:	b29b      	uxth	r3, r3
	tail = tx_buffer_tail_;
     dde:	b292      	uxth	r2, r2
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
     de0:	4293      	cmp	r3, r2
     de2:	d202      	bcs.n	dea <HardwareSerialIMXRT::availableForWrite()+0x16>
	return tail - head - 1;
     de4:	3a01      	subs	r2, #1
     de6:	1ad0      	subs	r0, r2, r3
}
     de8:	4770      	bx	lr
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
     dea:	6b41      	ldr	r1, [r0, #52]	; 0x34
     dec:	3901      	subs	r1, #1
     dee:	440a      	add	r2, r1
     df0:	1ad0      	subs	r0, r2, r3
     df2:	4770      	bx	lr

00000df4 <HardwareSerialIMXRT::available()>:



int HardwareSerialIMXRT::available(void)
{
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
     df4:	6901      	ldr	r1, [r0, #16]
	uint32_t head, tail;

	// WATER> 0 so IDLE involved may want to check if port has already has RX data to retrieve
	__disable_irq();
     df6:	b672      	cpsid	i
	head = rx_buffer_head_;
     df8:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
	tail = rx_buffer_tail_;
     dfc:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
	head = rx_buffer_head_;
     e00:	b292      	uxth	r2, r2
	tail = rx_buffer_tail_;
     e02:	b29b      	uxth	r3, r3
	int avail;
	if (head >= tail) avail = head - tail;
     e04:	429a      	cmp	r2, r3
	else avail = rx_buffer_total_size_ + head - tail;	
     e06:	bf3c      	itt	cc
     e08:	6b80      	ldrcc	r0, [r0, #56]	; 0x38
     e0a:	1812      	addcc	r2, r2, r0
	avail += (port->WATER >> 24) & 0x7;
     e0c:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
	else avail = rx_buffer_total_size_ + head - tail;	
     e0e:	1ad3      	subs	r3, r2, r3
	__enable_irq();
     e10:	b662      	cpsie	i
	avail += (port->WATER >> 24) & 0x7;
     e12:	f3c0 6002 	ubfx	r0, r0, #24, #3
	return avail;
}
     e16:	4418      	add	r0, r3
     e18:	4770      	bx	lr
     e1a:	bf00      	nop

00000e1c <HardwareSerialIMXRT::peek()>:
int HardwareSerialIMXRT::peek(void)
{
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
	uint32_t head, tail;

	head = rx_buffer_head_;
     e1c:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
{
     e20:	4602      	mov	r2, r0
	tail = rx_buffer_tail_;
     e22:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
	head = rx_buffer_head_;
     e26:	b289      	uxth	r1, r1
	tail = rx_buffer_tail_;
     e28:	b29b      	uxth	r3, r3
	if (head == tail) {
     e2a:	4299      	cmp	r1, r3
{
     e2c:	b410      	push	{r4}
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
     e2e:	6904      	ldr	r4, [r0, #16]
	if (head == tail) {
     e30:	d014      	beq.n	e5c <HardwareSerialIMXRT::peek()+0x40>
			return c;
		}
		__enable_irq();

	} 
	if (++tail >= rx_buffer_total_size_) tail = 0;
     e32:	3301      	adds	r3, #1
     e34:	6b90      	ldr	r0, [r2, #56]	; 0x38
	if (tail < rx_buffer_size_) {
     e36:	6b11      	ldr	r1, [r2, #48]	; 0x30
	if (++tail >= rx_buffer_total_size_) tail = 0;
     e38:	4298      	cmp	r0, r3
     e3a:	bf98      	it	ls
     e3c:	2300      	movls	r3, #0
	if (tail < rx_buffer_size_) {
     e3e:	4299      	cmp	r1, r3
     e40:	d806      	bhi.n	e50 <HardwareSerialIMXRT::peek()+0x34>
		return rx_buffer_[tail];
	} else {
		return rx_buffer_storage_[tail-rx_buffer_size_];
     e42:	1a5b      	subs	r3, r3, r1
     e44:	6a52      	ldr	r2, [r2, #36]	; 0x24
     e46:	5cd0      	ldrb	r0, [r2, r3]
     e48:	b2c0      	uxtb	r0, r0
	}
}
     e4a:	f85d 4b04 	ldr.w	r4, [sp], #4
     e4e:	4770      	bx	lr
		return rx_buffer_[tail];
     e50:	6a12      	ldr	r2, [r2, #32]
}
     e52:	f85d 4b04 	ldr.w	r4, [sp], #4
		return rx_buffer_[tail];
     e56:	5cd0      	ldrb	r0, [r2, r3]
     e58:	b2c0      	uxtb	r0, r0
}
     e5a:	4770      	bx	lr
		__disable_irq();
     e5c:	b672      	cpsid	i
		head = rx_buffer_head_;  // reread head to make sure no ISR happened
     e5e:	f8b0 004a 	ldrh.w	r0, [r0, #74]	; 0x4a
     e62:	b280      	uxth	r0, r0
		if (head == tail) {
     e64:	4281      	cmp	r1, r0
     e66:	d001      	beq.n	e6c <HardwareSerialIMXRT::peek()+0x50>
		__enable_irq();
     e68:	b662      	cpsie	i
     e6a:	e7e2      	b.n	e32 <HardwareSerialIMXRT::peek()+0x16>
			if (port->WATER & 0x7000000) {
     e6c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     e6e:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
     e72:	d103      	bne.n	e7c <HardwareSerialIMXRT::peek()+0x60>
			int c = -1;	// assume nothing to return
     e74:	f04f 30ff 	mov.w	r0, #4294967295
			__enable_irq();
     e78:	b662      	cpsie	i
			return c;
     e7a:	e7e6      	b.n	e4a <HardwareSerialIMXRT::peek()+0x2e>
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
     e7c:	69e3      	ldr	r3, [r4, #28]
				rx_buffer_head_ = 1;
     e7e:	2001      	movs	r0, #1
				rx_buffer_tail_ = 0; 
     e80:	2400      	movs	r4, #0
				rx_buffer_[1] = c;
     e82:	6a11      	ldr	r1, [r2, #32]
				rx_buffer_head_ = 1;
     e84:	f8a2 004a 	strh.w	r0, [r2, #74]	; 0x4a
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
     e88:	f3c3 0009 	ubfx	r0, r3, #0, #10
				rx_buffer_[1] = c;
     e8c:	b2db      	uxtb	r3, r3
				rx_buffer_tail_ = 0; 
     e8e:	f8a2 404c 	strh.w	r4, [r2, #76]	; 0x4c
				rx_buffer_[1] = c;
     e92:	704b      	strb	r3, [r1, #1]
     e94:	e7f0      	b.n	e78 <HardwareSerialIMXRT::peek()+0x5c>
     e96:	bf00      	nop

00000e98 <HardwareSerialIMXRT::read()>:
{
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
	uint32_t head, tail;
	int c;

	head = rx_buffer_head_;
     e98:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
{
     e9c:	4602      	mov	r2, r0
	tail = rx_buffer_tail_;
     e9e:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
	head = rx_buffer_head_;
     ea2:	b289      	uxth	r1, r1
	tail = rx_buffer_tail_;
     ea4:	b29b      	uxth	r3, r3
	if (head == tail) {
     ea6:	4299      	cmp	r1, r3
{
     ea8:	b430      	push	{r4, r5}
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
     eaa:	6904      	ldr	r4, [r0, #16]
	if (head == tail) {
     eac:	d025      	beq.n	efa <HardwareSerialIMXRT::read()+0x62>
			return c;
		}
		__enable_irq();

	}
	if (++tail >= rx_buffer_total_size_) tail = 0;
     eae:	3301      	adds	r3, #1
     eb0:	6b94      	ldr	r4, [r2, #56]	; 0x38
     eb2:	429c      	cmp	r4, r3
     eb4:	d916      	bls.n	ee4 <HardwareSerialIMXRT::read()+0x4c>
	if (tail < rx_buffer_size_) {
     eb6:	6b10      	ldr	r0, [r2, #48]	; 0x30
		c = rx_buffer_[tail];
	} else {
		c = rx_buffer_storage_[tail-rx_buffer_size_];
	}
	rx_buffer_tail_ = tail;
     eb8:	fa1f fc83 	uxth.w	ip, r3
	if (tail < rx_buffer_size_) {
     ebc:	4298      	cmp	r0, r3
     ebe:	d917      	bls.n	ef0 <HardwareSerialIMXRT::read()+0x58>
		c = rx_buffer_[tail];
     ec0:	6a10      	ldr	r0, [r2, #32]
     ec2:	5cc0      	ldrb	r0, [r0, r3]
     ec4:	b2c0      	uxtb	r0, r0
	if (rts_pin_baseReg_) {
     ec6:	6d95      	ldr	r5, [r2, #88]	; 0x58
	rx_buffer_tail_ = tail;
     ec8:	f8a2 c04c 	strh.w	ip, [r2, #76]	; 0x4c
	if (rts_pin_baseReg_) {
     ecc:	b145      	cbz	r5, ee0 <HardwareSerialIMXRT::read()+0x48>
		uint32_t avail;
		if (head >= tail) avail = head - tail;
     ece:	4299      	cmp	r1, r3
     ed0:	d31c      	bcc.n	f0c <HardwareSerialIMXRT::read()+0x74>
     ed2:	1acb      	subs	r3, r1, r3
		else avail = rx_buffer_total_size_ + head - tail;

		if (avail <= rts_low_watermark_) rts_assert();
     ed4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
     ed6:	4299      	cmp	r1, r3
     ed8:	d302      	bcc.n	ee0 <HardwareSerialIMXRT::read()+0x48>
	DIRECT_WRITE_LOW(rts_pin_baseReg_, rts_pin_bitmask_);
     eda:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
     edc:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
	}
	return c;
}	
     ee0:	bc30      	pop	{r4, r5}
     ee2:	4770      	bx	lr
     ee4:	f04f 0c00 	mov.w	ip, #0
	if (tail < rx_buffer_size_) {
     ee8:	6b10      	ldr	r0, [r2, #48]	; 0x30
	if (++tail >= rx_buffer_total_size_) tail = 0;
     eea:	4663      	mov	r3, ip
	if (tail < rx_buffer_size_) {
     eec:	4298      	cmp	r0, r3
     eee:	d8e7      	bhi.n	ec0 <HardwareSerialIMXRT::read()+0x28>
		c = rx_buffer_storage_[tail-rx_buffer_size_];
     ef0:	1a18      	subs	r0, r3, r0
     ef2:	6a55      	ldr	r5, [r2, #36]	; 0x24
     ef4:	5c28      	ldrb	r0, [r5, r0]
     ef6:	b2c0      	uxtb	r0, r0
     ef8:	e7e5      	b.n	ec6 <HardwareSerialIMXRT::read()+0x2e>
     efa:	4608      	mov	r0, r1
		__disable_irq();
     efc:	b672      	cpsid	i
		head = rx_buffer_head_;  // reread head to make sure no ISR happened
     efe:	f8b2 104a 	ldrh.w	r1, [r2, #74]	; 0x4a
     f02:	b289      	uxth	r1, r1
		if (head == tail) {
     f04:	4288      	cmp	r0, r1
     f06:	d004      	beq.n	f12 <HardwareSerialIMXRT::read()+0x7a>
		__enable_irq();
     f08:	b662      	cpsie	i
     f0a:	e7d0      	b.n	eae <HardwareSerialIMXRT::read()+0x16>
		else avail = rx_buffer_total_size_ + head - tail;
     f0c:	440c      	add	r4, r1
     f0e:	1ae3      	subs	r3, r4, r3
     f10:	e7e0      	b.n	ed4 <HardwareSerialIMXRT::read()+0x3c>
			if (port->WATER & 0x7000000) {
     f12:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     f14:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
     f18:	d103      	bne.n	f22 <HardwareSerialIMXRT::read()+0x8a>
			c = -1;	// assume nothing to return
     f1a:	f04f 30ff 	mov.w	r0, #4294967295
			__enable_irq();
     f1e:	b662      	cpsie	i
			return c;
     f20:	e7de      	b.n	ee0 <HardwareSerialIMXRT::read()+0x48>
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
     f22:	69e0      	ldr	r0, [r4, #28]
     f24:	f3c0 0009 	ubfx	r0, r0, #0, #10
     f28:	e7f9      	b.n	f1e <HardwareSerialIMXRT::read()+0x86>
     f2a:	bf00      	nop

00000f2c <HardwareSerialIMXRT::flush()>:

void HardwareSerialIMXRT::flush(void)
{
	while (transmitting_) yield(); // wait
     f2c:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
     f30:	b143      	cbz	r3, f44 <HardwareSerialIMXRT::flush()+0x18>
{
     f32:	b510      	push	{r4, lr}
     f34:	4604      	mov	r4, r0
	while (transmitting_) yield(); // wait
     f36:	f002 fa73 	bl	3420 <yield>
     f3a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
     f3e:	2b00      	cmp	r3, #0
     f40:	d1f9      	bne.n	f36 <HardwareSerialIMXRT::flush()+0xa>
}
     f42:	bd10      	pop	{r4, pc}
     f44:	4770      	bx	lr
     f46:	bf00      	nop

00000f48 <HardwareSerialIMXRT::end()>:
{
     f48:	b538      	push	{r3, r4, r5, lr}
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
     f4a:	e9d0 5304 	ldrd	r5, r3, [r0, #16]
	if (!(hardware->ccm_register & hardware->ccm_value)) return;
     f4e:	e9d3 1203 	ldrd	r1, r2, [r3, #12]
     f52:	6809      	ldr	r1, [r1, #0]
     f54:	4211      	tst	r1, r2
     f56:	d028      	beq.n	faa <HardwareSerialIMXRT::end()+0x62>
	while (transmitting_) yield();  // wait for buffered data to send
     f58:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
     f5c:	4604      	mov	r4, r0
     f5e:	b132      	cbz	r2, f6e <HardwareSerialIMXRT::end()+0x26>
     f60:	f002 fa5e 	bl	3420 <yield>
     f64:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
     f68:	2b00      	cmp	r3, #0
     f6a:	d1f9      	bne.n	f60 <HardwareSerialIMXRT::end()+0x18>
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = 5;
     f6c:	6963      	ldr	r3, [r4, #20]
	port->CTRL = 0;	// disable the TX and RX ...
     f6e:	2100      	movs	r1, #0
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = 5;
     f70:	4a0e      	ldr	r2, [pc, #56]	; (fac <HardwareSerialIMXRT::end()+0x64>)
	port->CTRL = 0;	// disable the TX and RX ...
     f72:	61a9      	str	r1, [r5, #24]
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = 5;
     f74:	7e20      	ldrb	r0, [r4, #24]
     f76:	eb03 1000 	add.w	r0, r3, r0, lsl #4
     f7a:	7d00      	ldrb	r0, [r0, #20]
     f7c:	eb02 1000 	add.w	r0, r2, r0, lsl #4
     f80:	6845      	ldr	r5, [r0, #4]
     f82:	2005      	movs	r0, #5
     f84:	6028      	str	r0, [r5, #0]
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = 5;
     f86:	7e65      	ldrb	r5, [r4, #25]
     f88:	eb03 1305 	add.w	r3, r3, r5, lsl #4
     f8c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
     f90:	eb02 1203 	add.w	r2, r2, r3, lsl #4
	if (rts_pin_baseReg_) rts_deassert();
     f94:	6da3      	ldr	r3, [r4, #88]	; 0x58
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = 5;
     f96:	6852      	ldr	r2, [r2, #4]
     f98:	6010      	str	r0, [r2, #0]
	rx_buffer_head_ = 0;
     f9a:	f8a4 104a 	strh.w	r1, [r4, #74]	; 0x4a
	rx_buffer_tail_ = 0;
     f9e:	f8a4 104c 	strh.w	r1, [r4, #76]	; 0x4c
	if (rts_pin_baseReg_) rts_deassert();
     fa2:	b113      	cbz	r3, faa <HardwareSerialIMXRT::end()+0x62>
	DIRECT_WRITE_HIGH(rts_pin_baseReg_, rts_pin_bitmask_);
     fa4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
     fa6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
     faa:	bd38      	pop	{r3, r4, r5, pc}
     fac:	20000688 	.word	0x20000688

00000fb0 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)>:
	float base = (float)UART_CLOCK / (float)baud;
     fb0:	ee07 1a90 	vmov	s15, r1
     fb4:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 1220 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x270>
	for (int osr=4; osr <= 32; osr++) {
     fb8:	2104      	movs	r1, #4
		int divint = (int)(div + 0.5f);
     fba:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
	float base = (float)UART_CLOCK / (float)baud;
     fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
	float besterr = 1e20;
     fc2:	ed9f 6a98 	vldr	s12, [pc, #608]	; 1224 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x274>
     fc6:	f641 7cff 	movw	ip, #8191	; 0x1fff
	float base = (float)UART_CLOCK / (float)baud;
     fca:	eec7 5a27 	vdiv.f32	s11, s14, s15
{
     fce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int bestosr = 4;
     fd2:	468e      	mov	lr, r1
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
     fd4:	6905      	ldr	r5, [r0, #16]
	int bestdiv = 1;
     fd6:	2401      	movs	r4, #1
		float div = base / (float)osr;
     fd8:	ee07 1a90 	vmov	s15, r1
     fdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
     fe0:	ee85 7aa7 	vdiv.f32	s14, s11, s15
		int divint = (int)(div + 0.5f);
     fe4:	ee77 7a05 	vadd.f32	s15, s14, s10
     fe8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
     fec:	ee17 3a90 	vmov	r3, s15
     ff0:	4563      	cmp	r3, ip
     ff2:	bfa8      	it	ge
     ff4:	4663      	movge	r3, ip
     ff6:	2b01      	cmp	r3, #1
     ff8:	bfb8      	it	lt
     ffa:	2301      	movlt	r3, #1
		float err = ((float)divint - div) / div;
     ffc:	ee07 3a90 	vmov	s15, r3
    1000:	eef8 6ae7 	vcvt.f32.s32	s13, s15
    1004:	ee76 6ac7 	vsub.f32	s13, s13, s14
    1008:	eec6 7a87 	vdiv.f32	s15, s13, s14
		if (err < 0.0f) err = -err;
    100c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    1010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1014:	bf48      	it	mi
    1016:	eef1 7a67 	vnegmi.f32	s15, s15
		if (err <= besterr) {
    101a:	eef4 7ac6 	vcmpe.f32	s15, s12
    101e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1022:	d803      	bhi.n	102c <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x7c>
			besterr = err;
    1024:	eeb0 6a67 	vmov.f32	s12, s15
		if (err <= besterr) {
    1028:	468e      	mov	lr, r1
			bestdiv = divint;
    102a:	461c      	mov	r4, r3
	for (int osr=4; osr <= 32; osr++) {
    102c:	3101      	adds	r1, #1
    102e:	2921      	cmp	r1, #33	; 0x21
    1030:	d1d2      	bne.n	fd8 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x28>
	rx_buffer_head_ = 0;
    1032:	2100      	movs	r1, #0
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    1034:	6943      	ldr	r3, [r0, #20]
    1036:	f402 7600 	and.w	r6, r2, #512	; 0x200
	rx_buffer_head_ = 0;
    103a:	f8a0 104a 	strh.w	r1, [r0, #74]	; 0x4a
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
    103e:	f8b3 c05a 	ldrh.w	ip, [r3, #90]	; 0x5a
	half_duplex_mode_ = (format & SERIAL_HALF_DUPLEX) != 0;
    1042:	428e      	cmp	r6, r1
	rx_buffer_tail_ = 0;
    1044:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    1048:	f8b3 6058 	ldrh.w	r6, [r3, #88]	; 0x58
	tx_buffer_head_ = 0;
    104c:	f8a0 1046 	strh.w	r1, [r0, #70]	; 0x46
	tx_buffer_tail_ = 0;
    1050:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
	transmitting_ = 0;
    1054:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    1058:	6b81      	ldr	r1, [r0, #56]	; 0x38
	hardware->ccm_register |= hardware->ccm_value;
    105a:	68df      	ldr	r7, [r3, #12]
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    105c:	eba1 0606 	sub.w	r6, r1, r6
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
    1060:	eba1 010c 	sub.w	r1, r1, ip
    1064:	e9c0 610f 	strd	r6, r1, [r0, #60]	; 0x3c
	hardware->ccm_register |= hardware->ccm_value;
    1068:	6839      	ldr	r1, [r7, #0]
    106a:	691e      	ldr	r6, [r3, #16]
    106c:	ea41 0106 	orr.w	r1, r1, r6
    1070:	6039      	str	r1, [r7, #0]
	half_duplex_mode_ = (format & SERIAL_HALF_DUPLEX) != 0;
    1072:	bf14      	ite	ne
    1074:	2101      	movne	r1, #1
    1076:	2100      	moveq	r1, #0
    1078:	7681      	strb	r1, [r0, #26]
	if (!half_duplex_mode_)  {
    107a:	f040 80ac 	bne.w	11d6 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x226>
		*(portControlRegister(hardware->rx_pins[rx_pin_index_].pin)) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    107e:	7e01      	ldrb	r1, [r0, #24]
    1080:	4e69      	ldr	r6, [pc, #420]	; (1228 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x278>)
    1082:	eb03 1801 	add.w	r8, r3, r1, lsl #4
    1086:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 1248 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x298>
    108a:	f898 7014 	ldrb.w	r7, [r8, #20]
		if (hardware->rx_pins[rx_pin_index_].select_input_register) {
    108e:	f8d8 a01c 	ldr.w	sl, [r8, #28]
		*(portControlRegister(hardware->rx_pins[rx_pin_index_].pin)) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    1092:	eb06 1707 	add.w	r7, r6, r7, lsl #4
    1096:	68b9      	ldr	r1, [r7, #8]
    1098:	f8c1 9000 	str.w	r9, [r1]
		*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = hardware->rx_pins[rx_pin_index_].mux_val;
    109c:	6879      	ldr	r1, [r7, #4]
    109e:	f8d8 7018 	ldr.w	r7, [r8, #24]
    10a2:	600f      	str	r7, [r1, #0]
		if (hardware->rx_pins[rx_pin_index_].select_input_register) {
    10a4:	f1ba 0f00 	cmp.w	sl, #0
    10a8:	d003      	beq.n	10b2 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x102>
		 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
    10aa:	f8d8 1020 	ldr.w	r1, [r8, #32]
    10ae:	f8ca 1000 	str.w	r1, [sl]
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    10b2:	7e47      	ldrb	r7, [r0, #25]
    10b4:	21d9      	movs	r1, #217	; 0xd9
    10b6:	eb03 1807 	add.w	r8, r3, r7, lsl #4
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3) 
    10ba:	f898 c034 	ldrb.w	ip, [r8, #52]	; 0x34
    10be:	eb06 1c0c 	add.w	ip, r6, ip, lsl #4
    10c2:	f8dc 7008 	ldr.w	r7, [ip, #8]
    10c6:	6039      	str	r1, [r7, #0]
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
    10c8:	f8dc 1004 	ldr.w	r1, [ip, #4]
    10cc:	f8d8 7038 	ldr.w	r7, [r8, #56]	; 0x38
    10d0:	600f      	str	r7, [r1, #0]
	if (hardware->tx_pins[tx_pin_index_].select_input_register) {
    10d2:	7e41      	ldrb	r1, [r0, #25]
    10d4:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    10d8:	6bcf      	ldr	r7, [r1, #60]	; 0x3c
    10da:	b10f      	cbz	r7, 10e0 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x130>
	 	*(hardware->tx_pins[tx_pin_index_].select_input_register) =  hardware->tx_pins[tx_pin_index_].select_val;		
    10dc:	6c09      	ldr	r1, [r1, #64]	; 0x40
    10de:	6039      	str	r1, [r7, #0]
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    10e0:	f10e 31ff 	add.w	r1, lr, #4294967295
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
    10e4:	f1be 0f08 	cmp.w	lr, #8
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    10e8:	ea4f 6101 	mov.w	r1, r1, lsl #24
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
    10ec:	bfcc      	ite	gt
    10ee:	f04f 0e00 	movgt.w	lr, #0
    10f2:	f04f 0e01 	movle.w	lr, #1
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    10f6:	f001 51f8 	and.w	r1, r1, #520093696	; 0x1f000000
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
    10fa:	ea44 444e 	orr.w	r4, r4, lr, lsl #17
    10fe:	4321      	orrs	r1, r4
	attachInterruptVector(hardware->irq, hardware->irq_handler);
    1100:	685c      	ldr	r4, [r3, #4]
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    1102:	6129      	str	r1, [r5, #16]
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    1104:	7859      	ldrb	r1, [r3, #1]
    1106:	f101 0310 	add.w	r3, r1, #16
	port->PINCFG = 0;
    110a:	2100      	movs	r1, #0
    110c:	60e9      	str	r1, [r5, #12]
    110e:	4947      	ldr	r1, [pc, #284]	; (122c <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x27c>)
    1110:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    1114:	6941      	ldr	r1, [r0, #20]
	NVIC_ENABLE_IRQ(hardware->irq);
    1116:	f04f 0e01 	mov.w	lr, #1
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    111a:	4c45      	ldr	r4, [pc, #276]	; (1230 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x280>)
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
    111c:	f002 0c03 	and.w	ip, r2, #3
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    1120:	784f      	ldrb	r7, [r1, #1]
    1122:	f891 1056 	ldrb.w	r1, [r1, #86]	; 0x56
	NVIC_ENABLE_IRQ(hardware->irq);
    1126:	4b43      	ldr	r3, [pc, #268]	; (1234 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x284>)
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    1128:	5539      	strb	r1, [r7, r4]
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
    112a:	f04f 1702 	mov.w	r7, #131074	; 0x20002
	NVIC_ENABLE_IRQ(hardware->irq);
    112e:	6944      	ldr	r4, [r0, #20]
    1130:	7861      	ldrb	r1, [r4, #1]
    1132:	eb03 1351 	add.w	r3, r3, r1, lsr #5
    1136:	f001 011f 	and.w	r1, r1, #31
    113a:	009b      	lsls	r3, r3, #2
    113c:	fa0e f101 	lsl.w	r1, lr, r1
    1140:	6019      	str	r1, [r3, #0]
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
    1142:	62ef      	str	r7, [r5, #44]	; 0x2c
	port->FIFO |= LPUART_FIFO_TXFE | LPUART_FIFO_RXFE;
    1144:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1146:	f043 0388 	orr.w	r3, r3, #136	; 0x88
    114a:	62ab      	str	r3, [r5, #40]	; 0x28
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
    114c:	0753      	lsls	r3, r2, #29
    114e:	d43e      	bmi.n	11ce <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x21e>
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
    1150:	f44c 1370 	orr.w	r3, ip, #3932160	; 0x3c0000
	if ((format & 0x0F) == 0x04) ctrl |=  LPUART_CTRL_R9T8; // 8N2 is 9 bit with 9th bit always 1
    1154:	f002 010f 	and.w	r1, r2, #15
    1158:	2904      	cmp	r1, #4
    115a:	bf08      	it	eq
    115c:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
	if (format & 0x20) {
    1160:	0697      	lsls	r7, r2, #26
    1162:	d52e      	bpl.n	11c2 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x212>
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
    1164:	7e81      	ldrb	r1, [r0, #26]
		ctrl |= LPUART_CTRL_TXINV;		// tx invert
    1166:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
    116a:	2900      	cmp	r1, #0
    116c:	d13a      	bne.n	11e4 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x234>
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
    116e:	0716      	lsls	r6, r2, #28
	port->CTRL = ctrl;
    1170:	61ab      	str	r3, [r5, #24]
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
    1172:	d503      	bpl.n	117c <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1cc>
    1174:	692b      	ldr	r3, [r5, #16]
    1176:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    117a:	612b      	str	r3, [r5, #16]
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
    117c:	696b      	ldr	r3, [r5, #20]
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
    117e:	06d1      	lsls	r1, r2, #27
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
    1180:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
    1184:	bf48      	it	mi
    1186:	f043 5380 	orrmi.w	r3, r3, #268435456	; 0x10000000
	port->STAT = c;
    118a:	616b      	str	r3, [r5, #20]
	if ( format & 0x100) port->BAUD |= LPUART_BAUD_SBNS;	
    118c:	05d3      	lsls	r3, r2, #23
    118e:	d503      	bpl.n	1198 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1e8>
    1190:	692b      	ldr	r3, [r5, #16]
    1192:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1196:	612b      	str	r3, [r5, #16]
	if (hardware->_serialEvent) addToSerialEventsList();
    1198:	68a3      	ldr	r3, [r4, #8]
    119a:	b183      	cbz	r3, 11be <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x20e>
	//digitalWrite(4, LOW);
}


void HardwareSerialIMXRT::addToSerialEventsList() {
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    119c:	4e26      	ldr	r6, [pc, #152]	; (1238 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x288>)
    119e:	7834      	ldrb	r4, [r6, #0]
    11a0:	2c00      	cmp	r4, #0
    11a2:	d03a      	beq.n	121a <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x26a>
    11a4:	1e61      	subs	r1, r4, #1
    11a6:	4d25      	ldr	r5, [pc, #148]	; (123c <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x28c>)
    11a8:	b2c9      	uxtb	r1, r1
    11aa:	1f2b      	subs	r3, r5, #4
    11ac:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    11b0:	e001      	b.n	11b6 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x206>
    11b2:	4299      	cmp	r1, r3
    11b4:	d025      	beq.n	1202 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x252>
		if (s_serials_with_serial_events[i] == this) return; // already in the list.
    11b6:	f853 2f04 	ldr.w	r2, [r3, #4]!
    11ba:	4290      	cmp	r0, r2
    11bc:	d1f9      	bne.n	11b2 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x202>
};
    11be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
    11c2:	7e81      	ldrb	r1, [r0, #26]
    11c4:	2900      	cmp	r1, #0
    11c6:	d0d2      	beq.n	116e <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1be>
    11c8:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
    11cc:	e7cf      	b.n	116e <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1be>
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
    11ce:	4b1c      	ldr	r3, [pc, #112]	; (1240 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x290>)
    11d0:	ea4c 0303 	orr.w	r3, ip, r3
    11d4:	e7be      	b.n	1154 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1a4>
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3) 
    11d6:	7e47      	ldrb	r7, [r0, #25]
    11d8:	f24f 01d9 	movw	r1, #61657	; 0xf0d9
    11dc:	4e12      	ldr	r6, [pc, #72]	; (1228 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x278>)
    11de:	eb03 1807 	add.w	r8, r3, r7, lsl #4
    11e2:	e76a      	b.n	10ba <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x10a>
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
    11e4:	7e41      	ldrb	r1, [r0, #25]
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
    11e6:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
    11ea:	eb04 1101 	add.w	r1, r4, r1, lsl #4
    11ee:	f891 1034 	ldrb.w	r1, [r1, #52]	; 0x34
    11f2:	eb06 1601 	add.w	r6, r6, r1, lsl #4
    11f6:	68b6      	ldr	r6, [r6, #8]
    11f8:	6831      	ldr	r1, [r6, #0]
    11fa:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
    11fe:	6031      	str	r1, [r6, #0]
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
    1200:	e7b5      	b.n	116e <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1be>
	}
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    1202:	1c63      	adds	r3, r4, #1
    1204:	b2db      	uxtb	r3, r3
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    1206:	4a0f      	ldr	r2, [pc, #60]	; (1244 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x294>)
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    1208:	7033      	strb	r3, [r6, #0]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    120a:	7813      	ldrb	r3, [r2, #0]
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    120c:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    1210:	f043 0302 	orr.w	r3, r3, #2
    1214:	7013      	strb	r3, [r2, #0]
};
    1216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    121a:	2301      	movs	r3, #1
    121c:	4d07      	ldr	r5, [pc, #28]	; (123c <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x28c>)
    121e:	e7f2      	b.n	1206 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x256>
    1220:	4bb71b00 	.word	0x4bb71b00
    1224:	60ad78ec 	.word	0x60ad78ec
    1228:	20000688 	.word	0x20000688
    122c:	20001800 	.word	0x20001800
    1230:	e000e400 	.word	0xe000e400
    1234:	38003840 	.word	0x38003840
    1238:	2000210d 	.word	0x2000210d
    123c:	20001d18 	.word	0x20001d18
    1240:	003c0010 	.word	0x003c0010
    1244:	2000211b 	.word	0x2000211b
    1248:	0001f038 	.word	0x0001f038

0000124c <nvic_execution_priority()>:
	__asm__ volatile("mrs %0, faultmask\n" : "=r" (faultmask)::);
    124c:	f3ef 8013 	mrs	r0, FAULTMASK
	if (faultmask) return -1;
    1250:	b9b8      	cbnz	r0, 1282 <nvic_execution_priority()+0x36>
	__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    1252:	f3ef 8310 	mrs	r3, PRIMASK
	if (primask) return 0;
    1256:	b94b      	cbnz	r3, 126c <nvic_execution_priority()+0x20>
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    1258:	f3ef 8205 	mrs	r2, IPSR
	if (ipsr) {
    125c:	b93a      	cbnz	r2, 126e <nvic_execution_priority()+0x22>
	uint32_t priority=256;
    125e:	f44f 7380 	mov.w	r3, #256	; 0x100
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    1262:	f3ef 8011 	mrs	r0, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    1266:	b150      	cbz	r0, 127e <nvic_execution_priority()+0x32>
    1268:	4298      	cmp	r0, r3
    126a:	d208      	bcs.n	127e <nvic_execution_priority()+0x32>
}
    126c:	4770      	bx	lr
		if (ipsr < 16) priority = 0; // could be non-zero
    126e:	2a0f      	cmp	r2, #15
    1270:	d9f7      	bls.n	1262 <nvic_execution_priority()+0x16>
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
    1272:	4b05      	ldr	r3, [pc, #20]	; (1288 <nvic_execution_priority()+0x3c>)
    1274:	5c9b      	ldrb	r3, [r3, r2]
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    1276:	f3ef 8011 	mrs	r0, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    127a:	2800      	cmp	r0, #0
    127c:	d1f4      	bne.n	1268 <nvic_execution_priority()+0x1c>
    127e:	4618      	mov	r0, r3
	return priority;
    1280:	4770      	bx	lr
	if (faultmask) return -1;
    1282:	f04f 30ff 	mov.w	r0, #4294967295
    1286:	e7f1      	b.n	126c <nvic_execution_priority()+0x20>
    1288:	e000e3f0 	.word	0xe000e3f0

0000128c <HardwareSerialIMXRT::write9bit(unsigned long)>:
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
    128c:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
    128e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1292:	4604      	mov	r4, r0
    1294:	460f      	mov	r7, r1
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    1296:	6906      	ldr	r6, [r0, #16]
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
    1298:	b113      	cbz	r3, 12a0 <HardwareSerialIMXRT::write9bit(unsigned long)+0x14>
    129a:	6d42      	ldr	r2, [r0, #84]	; 0x54
    129c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	if(half_duplex_mode_) {		
    12a0:	7ea3      	ldrb	r3, [r4, #26]
    12a2:	b12b      	cbz	r3, 12b0 <HardwareSerialIMXRT::write9bit(unsigned long)+0x24>
		__disable_irq();
    12a4:	b672      	cpsid	i
	    port->CTRL |= LPUART_CTRL_TXDIR;
    12a6:	69b3      	ldr	r3, [r6, #24]
    12a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    12ac:	61b3      	str	r3, [r6, #24]
		__enable_irq();
    12ae:	b662      	cpsie	i
	head = tx_buffer_head_;
    12b0:	f8b4 5046 	ldrh.w	r5, [r4, #70]	; 0x46
	if (++head >= tx_buffer_total_size_) head = 0;
    12b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
	head = tx_buffer_head_;
    12b6:	b2ad      	uxth	r5, r5
	if (++head >= tx_buffer_total_size_) head = 0;
    12b8:	3501      	adds	r5, #1
    12ba:	42ab      	cmp	r3, r5
    12bc:	d84c      	bhi.n	1358 <HardwareSerialIMXRT::write9bit(unsigned long)+0xcc>
    12be:	f04f 0800 	mov.w	r8, #0
    12c2:	4645      	mov	r5, r8
	while (tx_buffer_tail_ == head) {
    12c4:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    12c8:	b29b      	uxth	r3, r3
    12ca:	429d      	cmp	r5, r3
    12cc:	d019      	beq.n	1302 <HardwareSerialIMXRT::write9bit(unsigned long)+0x76>
    12ce:	e028      	b.n	1322 <HardwareSerialIMXRT::write9bit(unsigned long)+0x96>
			if ((port->STAT & LPUART_STAT_TDRE)) {
    12d0:	6973      	ldr	r3, [r6, #20]
    12d2:	021b      	lsls	r3, r3, #8
    12d4:	d510      	bpl.n	12f8 <HardwareSerialIMXRT::write9bit(unsigned long)+0x6c>
				uint32_t tail = tx_buffer_tail_;
    12d6:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
				if (++tail >= tx_buffer_total_size_) tail = 0;
    12da:	6b62      	ldr	r2, [r4, #52]	; 0x34
				uint32_t tail = tx_buffer_tail_;
    12dc:	b29b      	uxth	r3, r3
				if (++tail >= tx_buffer_total_size_) tail = 0;
    12de:	3301      	adds	r3, #1
    12e0:	429a      	cmp	r2, r3
    12e2:	d936      	bls.n	1352 <HardwareSerialIMXRT::write9bit(unsigned long)+0xc6>
				tx_buffer_tail_ = tail;
    12e4:	b29a      	uxth	r2, r3
				if (tail < tx_buffer_size_) {
    12e6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    12e8:	4299      	cmp	r1, r3
    12ea:	d92d      	bls.n	1348 <HardwareSerialIMXRT::write9bit(unsigned long)+0xbc>
					n = tx_buffer_[tail];
    12ec:	69e1      	ldr	r1, [r4, #28]
    12ee:	5ccb      	ldrb	r3, [r1, r3]
    12f0:	b2db      	uxtb	r3, r3
				port->DATA  = n;
    12f2:	61f3      	str	r3, [r6, #28]
				tx_buffer_tail_ = tail;
    12f4:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
	while (tx_buffer_tail_ == head) {
    12f8:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    12fc:	b29b      	uxth	r3, r3
    12fe:	42ab      	cmp	r3, r5
    1300:	d10f      	bne.n	1322 <HardwareSerialIMXRT::write9bit(unsigned long)+0x96>
		int priority = nvic_execution_priority();
    1302:	f7ff ffa3 	bl	124c <nvic_execution_priority()>
		if (priority <= hardware->irq_priority) {
    1306:	6963      	ldr	r3, [r4, #20]
    1308:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
    130c:	4283      	cmp	r3, r0
    130e:	dadf      	bge.n	12d0 <HardwareSerialIMXRT::write9bit(unsigned long)+0x44>
		} else if (priority >= 256) 
    1310:	28ff      	cmp	r0, #255	; 0xff
    1312:	ddf1      	ble.n	12f8 <HardwareSerialIMXRT::write9bit(unsigned long)+0x6c>
			yield(); // wait
    1314:	f002 f884 	bl	3420 <yield>
	while (tx_buffer_tail_ == head) {
    1318:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    131c:	b29b      	uxth	r3, r3
    131e:	42ab      	cmp	r3, r5
    1320:	d0ef      	beq.n	1302 <HardwareSerialIMXRT::write9bit(unsigned long)+0x76>
	if (head < tx_buffer_size_) {
    1322:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1324:	42ab      	cmp	r3, r5
    1326:	d91a      	bls.n	135e <HardwareSerialIMXRT::write9bit(unsigned long)+0xd2>
		tx_buffer_[head] = c;
    1328:	b2ff      	uxtb	r7, r7
    132a:	69e3      	ldr	r3, [r4, #28]
    132c:	555f      	strb	r7, [r3, r5]
	__disable_irq();
    132e:	b672      	cpsid	i
	transmitting_ = 1;
    1330:	2001      	movs	r0, #1
    1332:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
	tx_buffer_head_ = head;
    1336:	f8a4 8046 	strh.w	r8, [r4, #70]	; 0x46
	port->CTRL |= LPUART_CTRL_TIE; // (may need to handle this issue)BITBAND_SET_BIT(LPUART0_CTRL, TIE_BIT);
    133a:	69b3      	ldr	r3, [r6, #24]
    133c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    1340:	61b3      	str	r3, [r6, #24]
	__enable_irq();
    1342:	b662      	cpsie	i
}
    1344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					n = tx_buffer_storage_[tail-tx_buffer_size_];
    1348:	1a5b      	subs	r3, r3, r1
    134a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    134c:	5ccb      	ldrb	r3, [r1, r3]
    134e:	b2db      	uxtb	r3, r3
    1350:	e7cf      	b.n	12f2 <HardwareSerialIMXRT::write9bit(unsigned long)+0x66>
    1352:	2200      	movs	r2, #0
				if (++tail >= tx_buffer_total_size_) tail = 0;
    1354:	4613      	mov	r3, r2
    1356:	e7c6      	b.n	12e6 <HardwareSerialIMXRT::write9bit(unsigned long)+0x5a>
	tx_buffer_head_ = head;
    1358:	fa1f f885 	uxth.w	r8, r5
    135c:	e7b2      	b.n	12c4 <HardwareSerialIMXRT::write9bit(unsigned long)+0x38>
		tx_buffer_storage_[head - tx_buffer_size_] = c;
    135e:	1aed      	subs	r5, r5, r3
    1360:	b2ff      	uxtb	r7, r7
    1362:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1364:	555f      	strb	r7, [r3, r5]
    1366:	e7e2      	b.n	132e <HardwareSerialIMXRT::write9bit(unsigned long)+0xa2>

00001368 <HardwareSerialIMXRT::write(unsigned char)>:
	return write9bit(c);
    1368:	f7ff bf90 	b.w	128c <HardwareSerialIMXRT::write9bit(unsigned long)>

0000136c <HardwareSerialIMXRT::IRQHandler()>:
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    136c:	6902      	ldr	r2, [r0, #16]
	if (port->STAT & (LPUART_STAT_RDRF | LPUART_STAT_IDLE)) {
    136e:	6953      	ldr	r3, [r2, #20]
    1370:	f413 1f40 	tst.w	r3, #3145728	; 0x300000
{
    1374:	b570      	push	{r4, r5, r6, lr}
	if (port->STAT & (LPUART_STAT_RDRF | LPUART_STAT_IDLE)) {
    1376:	d043      	beq.n	1400 <HardwareSerialIMXRT::IRQHandler()+0x94>
		uint8_t avail = (port->WATER >> 24) & 0x7;
    1378:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
		if (avail) {
    137a:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
		uint8_t avail = (port->WATER >> 24) & 0x7;
    137e:	f3c3 6e02 	ubfx	lr, r3, #24, #3
		if (avail) {
    1382:	d03a      	beq.n	13fa <HardwareSerialIMXRT::IRQHandler()+0x8e>
			head = rx_buffer_head_;
    1384:	f8b0 504a 	ldrh.w	r5, [r0, #74]	; 0x4a
			tail = rx_buffer_tail_;
    1388:	f8b0 604c 	ldrh.w	r6, [r0, #76]	; 0x4c
			head = rx_buffer_head_;
    138c:	b2ad      	uxth	r5, r5
			tail = rx_buffer_tail_;
    138e:	b2b6      	uxth	r6, r6
    1390:	e007      	b.n	13a2 <HardwareSerialIMXRT::IRQHandler()+0x36>
						rx_buffer_[head] = n;
    1392:	6a01      	ldr	r1, [r0, #32]
    1394:	f801 c003 	strb.w	ip, [r1, r3]
			} while (--avail > 0) ;
    1398:	f10e 33ff 	add.w	r3, lr, #4294967295
    139c:	f013 0eff 	ands.w	lr, r3, #255	; 0xff
    13a0:	d01d      	beq.n	13de <HardwareSerialIMXRT::IRQHandler()+0x72>
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    13a2:	69d1      	ldr	r1, [r2, #28]
				newhead = head + 1;
    13a4:	1c6b      	adds	r3, r5, #1
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    13a6:	6b84      	ldr	r4, [r0, #56]	; 0x38
				if (newhead != rx_buffer_tail_) {
    13a8:	f8b0 c04c 	ldrh.w	ip, [r0, #76]	; 0x4c
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    13ac:	f3c1 0109 	ubfx	r1, r1, #0, #10
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    13b0:	429c      	cmp	r4, r3
    13b2:	bf98      	it	ls
    13b4:	2300      	movls	r3, #0
				if (newhead != rx_buffer_tail_) {
    13b6:	fa1f fc8c 	uxth.w	ip, ip
    13ba:	459c      	cmp	ip, r3
    13bc:	d0ec      	beq.n	1398 <HardwareSerialIMXRT::IRQHandler()+0x2c>
					if (newhead < rx_buffer_size_) {
    13be:	6b04      	ldr	r4, [r0, #48]	; 0x30
						rx_buffer_[head] = n;
    13c0:	fa5f fc81 	uxtb.w	ip, r1
    13c4:	461d      	mov	r5, r3
					if (newhead < rx_buffer_size_) {
    13c6:	429c      	cmp	r4, r3
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    13c8:	eba3 0404 	sub.w	r4, r3, r4
					if (newhead < rx_buffer_size_) {
    13cc:	d8e1      	bhi.n	1392 <HardwareSerialIMXRT::IRQHandler()+0x26>
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    13ce:	6a43      	ldr	r3, [r0, #36]	; 0x24
    13d0:	f803 c004 	strb.w	ip, [r3, r4]
			} while (--avail > 0) ;
    13d4:	f10e 33ff 	add.w	r3, lr, #4294967295
    13d8:	f013 0eff 	ands.w	lr, r3, #255	; 0xff
    13dc:	d1e1      	bne.n	13a2 <HardwareSerialIMXRT::IRQHandler()+0x36>
			rx_buffer_head_ = head;
    13de:	b2ab      	uxth	r3, r5
    13e0:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
			if (rts_pin_baseReg_) {
    13e4:	6d83      	ldr	r3, [r0, #88]	; 0x58
    13e6:	b143      	cbz	r3, 13fa <HardwareSerialIMXRT::IRQHandler()+0x8e>
				if (head >= tail) avail = head - tail;
    13e8:	42b5      	cmp	r5, r6
    13ea:	d354      	bcc.n	1496 <HardwareSerialIMXRT::IRQHandler()+0x12a>
    13ec:	1bad      	subs	r5, r5, r6
				if (avail >= rts_high_watermark_) rts_deassert();
    13ee:	6c01      	ldr	r1, [r0, #64]	; 0x40
    13f0:	42a9      	cmp	r1, r5
    13f2:	d802      	bhi.n	13fa <HardwareSerialIMXRT::IRQHandler()+0x8e>
	DIRECT_WRITE_HIGH(rts_pin_baseReg_, rts_pin_bitmask_);
    13f4:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
    13f6:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		if (port->STAT & LPUART_STAT_IDLE) {
    13fa:	6953      	ldr	r3, [r2, #20]
    13fc:	02d9      	lsls	r1, r3, #11
    13fe:	d445      	bmi.n	148c <HardwareSerialIMXRT::IRQHandler()+0x120>
	ctrl = port->CTRL;
    1400:	6996      	ldr	r6, [r2, #24]
	if ((ctrl & LPUART_CTRL_TIE) && (port->STAT & LPUART_STAT_TDRE))
    1402:	0233      	lsls	r3, r6, #8
    1404:	d528      	bpl.n	1458 <HardwareSerialIMXRT::IRQHandler()+0xec>
    1406:	6953      	ldr	r3, [r2, #20]
    1408:	021d      	lsls	r5, r3, #8
    140a:	d525      	bpl.n	1458 <HardwareSerialIMXRT::IRQHandler()+0xec>
		head = tx_buffer_head_;
    140c:	f8b0 5046 	ldrh.w	r5, [r0, #70]	; 0x46
		tail = tx_buffer_tail_;
    1410:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
		head = tx_buffer_head_;
    1414:	b2ad      	uxth	r5, r5
		tail = tx_buffer_tail_;
    1416:	b29b      	uxth	r3, r3
    1418:	e006      	b.n	1428 <HardwareSerialIMXRT::IRQHandler()+0xbc>
				n = tx_buffer_[tail];
    141a:	69c1      	ldr	r1, [r0, #28]
    141c:	5cc9      	ldrb	r1, [r1, r3]
    141e:	b2c9      	uxtb	r1, r1
			port->DATA = n;
    1420:	61d1      	str	r1, [r2, #28]
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
    1422:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    1424:	054c      	lsls	r4, r1, #21
    1426:	d412      	bmi.n	144e <HardwareSerialIMXRT::IRQHandler()+0xe2>
			if (head == tail) break;
    1428:	42ab      	cmp	r3, r5
    142a:	d038      	beq.n	149e <HardwareSerialIMXRT::IRQHandler()+0x132>
			if (++tail >= tx_buffer_total_size_) tail = 0;
    142c:	6b44      	ldr	r4, [r0, #52]	; 0x34
    142e:	3301      	adds	r3, #1
			if (tail < tx_buffer_size_) {
    1430:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			if (++tail >= tx_buffer_total_size_) tail = 0;
    1432:	429c      	cmp	r4, r3
    1434:	bf98      	it	ls
    1436:	2300      	movls	r3, #0
			if (tail < tx_buffer_size_) {
    1438:	4299      	cmp	r1, r3
				n = tx_buffer_storage_[tail-tx_buffer_size_];
    143a:	eba3 0401 	sub.w	r4, r3, r1
			if (tail < tx_buffer_size_) {
    143e:	d8ec      	bhi.n	141a <HardwareSerialIMXRT::IRQHandler()+0xae>
				n = tx_buffer_storage_[tail-tx_buffer_size_];
    1440:	6a81      	ldr	r1, [r0, #40]	; 0x28
    1442:	5d09      	ldrb	r1, [r1, r4]
    1444:	b2c9      	uxtb	r1, r1
			port->DATA = n;
    1446:	61d1      	str	r1, [r2, #28]
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
    1448:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    144a:	054c      	lsls	r4, r1, #21
    144c:	d5ec      	bpl.n	1428 <HardwareSerialIMXRT::IRQHandler()+0xbc>
		tx_buffer_tail_ = tail;
    144e:	b299      	uxth	r1, r3
		if (head == tail) {
    1450:	42ab      	cmp	r3, r5
		tx_buffer_tail_ = tail;
    1452:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
		if (head == tail) {
    1456:	d025      	beq.n	14a4 <HardwareSerialIMXRT::IRQHandler()+0x138>
	if ((ctrl & LPUART_CTRL_TCIE) && (port->STAT & LPUART_STAT_TC))
    1458:	0271      	lsls	r1, r6, #9
    145a:	d516      	bpl.n	148a <HardwareSerialIMXRT::IRQHandler()+0x11e>
    145c:	6953      	ldr	r3, [r2, #20]
    145e:	025b      	lsls	r3, r3, #9
    1460:	d513      	bpl.n	148a <HardwareSerialIMXRT::IRQHandler()+0x11e>
		transmitting_ = 0;
    1462:	2100      	movs	r1, #0
		if (transmit_pin_baseReg_) DIRECT_WRITE_LOW(transmit_pin_baseReg_, transmit_pin_bitmask_);
    1464:	6d03      	ldr	r3, [r0, #80]	; 0x50
		transmitting_ = 0;
    1466:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
		if (transmit_pin_baseReg_) DIRECT_WRITE_LOW(transmit_pin_baseReg_, transmit_pin_bitmask_);
    146a:	b113      	cbz	r3, 1472 <HardwareSerialIMXRT::IRQHandler()+0x106>
    146c:	6d41      	ldr	r1, [r0, #84]	; 0x54
    146e:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
		if(half_duplex_mode_) {		
    1472:	7e83      	ldrb	r3, [r0, #26]
    1474:	b12b      	cbz	r3, 1482 <HardwareSerialIMXRT::IRQHandler()+0x116>
			__disable_irq();
    1476:	b672      	cpsid	i
		    port->CTRL &= ~LPUART_CTRL_TXDIR;
    1478:	6993      	ldr	r3, [r2, #24]
    147a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
    147e:	6193      	str	r3, [r2, #24]
			__enable_irq();
    1480:	b662      	cpsie	i
		port->CTRL &= ~LPUART_CTRL_TCIE;
    1482:	6993      	ldr	r3, [r2, #24]
    1484:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
    1488:	6193      	str	r3, [r2, #24]
}
    148a:	bd70      	pop	{r4, r5, r6, pc}
			port->STAT |= LPUART_STAT_IDLE;	// writing a 1 to idle should clear it. 
    148c:	6953      	ldr	r3, [r2, #20]
    148e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    1492:	6153      	str	r3, [r2, #20]
    1494:	e7b4      	b.n	1400 <HardwareSerialIMXRT::IRQHandler()+0x94>
				else avail = rx_buffer_total_size_ + head - tail;
    1496:	6b81      	ldr	r1, [r0, #56]	; 0x38
    1498:	1b89      	subs	r1, r1, r6
    149a:	440d      	add	r5, r1
    149c:	e7a7      	b.n	13ee <HardwareSerialIMXRT::IRQHandler()+0x82>
		tx_buffer_tail_ = tail;
    149e:	b29b      	uxth	r3, r3
    14a0:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
			port->CTRL &= ~LPUART_CTRL_TIE; 
    14a4:	6993      	ldr	r3, [r2, #24]
    14a6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    14aa:	6193      	str	r3, [r2, #24]
  			port->CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
    14ac:	6993      	ldr	r3, [r2, #24]
    14ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    14b2:	6193      	str	r3, [r2, #24]
    14b4:	e7d0      	b.n	1458 <HardwareSerialIMXRT::IRQHandler()+0xec>
    14b6:	bf00      	nop

000014b8 <IRQHandler_Serial2>:
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest


void IRQHandler_Serial2()
{
	Serial2.IRQHandler();
    14b8:	4801      	ldr	r0, [pc, #4]	; (14c0 <IRQHandler_Serial2+0x8>)
    14ba:	f7ff bf57 	b.w	136c <HardwareSerialIMXRT::IRQHandler()>
    14be:	bf00      	nop
    14c0:	20000fb8 	.word	0x20000fb8

000014c4 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    14c4:	4608      	mov	r0, r1
    14c6:	f001 bf17 	b.w	32f8 <usb_serial_putchar>
    14ca:	bf00      	nop

000014cc <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>:
		base = 10;
    14cc:	2a01      	cmp	r2, #1
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    14ce:	b570      	push	{r4, r5, r6, lr}
		base = 10;
    14d0:	bf08      	it	eq
    14d2:	220a      	moveq	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    14d4:	b08a      	sub	sp, #40	; 0x28
	if (n == 0) {
    14d6:	b391      	cbz	r1, 153e <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x72>
		i = sizeof(buf) - 1;
    14d8:	f04f 0e21 	mov.w	lr, #33	; 0x21
    14dc:	e001      	b.n	14e2 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x16>
			i--;
    14de:	fa5f fe86 	uxtb.w	lr, r6
    14e2:	f10e 36ff 	add.w	r6, lr, #4294967295
			digit = n % base;
    14e6:	fbb1 f5f2 	udiv	r5, r1, r2
    14ea:	fb02 1415 	mls	r4, r2, r5, r1
    14ee:	fa5f fc84 	uxtb.w	ip, r4
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    14f2:	2c09      	cmp	r4, #9
    14f4:	f10c 0437 	add.w	r4, ip, #55	; 0x37
    14f8:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
    14fc:	bf98      	it	ls
    14fe:	fa5f f48c 	uxtbls.w	r4, ip
    1502:	f10e 0c28 	add.w	ip, lr, #40	; 0x28
    1506:	bf88      	it	hi
    1508:	b2e4      	uxtbhi	r4, r4
			if (n == 0) break;
    150a:	4291      	cmp	r1, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    150c:	44ec      	add	ip, sp
			n /= base;
    150e:	4629      	mov	r1, r5
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1510:	f80c 4c24 	strb.w	r4, [ip, #-36]
			if (n == 0) break;
    1514:	d2e3      	bcs.n	14de <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x12>
	if (sign) {
    1516:	b14b      	cbz	r3, 152c <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x60>
		i--;
    1518:	f10e 3eff 	add.w	lr, lr, #4294967295
		buf[i] = '-';
    151c:	222d      	movs	r2, #45	; 0x2d
		i--;
    151e:	fa5f fe8e 	uxtb.w	lr, lr
		buf[i] = '-';
    1522:	f10e 0328 	add.w	r3, lr, #40	; 0x28
    1526:	446b      	add	r3, sp
    1528:	f803 2c24 	strb.w	r2, [r3, #-36]
	return write(buf + i, sizeof(buf) - i);
    152c:	6803      	ldr	r3, [r0, #0]
    152e:	a901      	add	r1, sp, #4
    1530:	f1ce 0222 	rsb	r2, lr, #34	; 0x22
    1534:	685b      	ldr	r3, [r3, #4]
    1536:	4471      	add	r1, lr
    1538:	4798      	blx	r3
}
    153a:	b00a      	add	sp, #40	; 0x28
    153c:	bd70      	pop	{r4, r5, r6, pc}
		buf[sizeof(buf) - 1] = '0';
    153e:	2230      	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    1540:	f04f 0e21 	mov.w	lr, #33	; 0x21
		buf[sizeof(buf) - 1] = '0';
    1544:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    1548:	e7e5      	b.n	1516 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x4a>
    154a:	bf00      	nop

0000154c <Print::write(unsigned char const*, unsigned int)>:
{
    154c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buffer == nullptr) return 0;
    1550:	460c      	mov	r4, r1
    1552:	b1d1      	cbz	r1, 158a <Print::write(unsigned char const*, unsigned int)+0x3e>
	while (size--) count += write(*buffer++);
    1554:	b1ea      	cbz	r2, 1592 <Print::write(unsigned char const*, unsigned int)+0x46>
    1556:	4680      	mov	r8, r0
    1558:	188e      	adds	r6, r1, r2
	size_t count = 0;
    155a:	2500      	movs	r5, #0
    155c:	4f0e      	ldr	r7, [pc, #56]	; (1598 <Print::write(unsigned char const*, unsigned int)+0x4c>)
    155e:	e004      	b.n	156a <Print::write(unsigned char const*, unsigned int)+0x1e>
    1560:	f001 feca 	bl	32f8 <usb_serial_putchar>
	while (size--) count += write(*buffer++);
    1564:	42b4      	cmp	r4, r6
    1566:	4405      	add	r5, r0
    1568:	d00c      	beq.n	1584 <Print::write(unsigned char const*, unsigned int)+0x38>
    156a:	f8d8 3000 	ldr.w	r3, [r8]
    156e:	f814 0b01 	ldrb.w	r0, [r4], #1
    1572:	681b      	ldr	r3, [r3, #0]
    1574:	42bb      	cmp	r3, r7
    1576:	d0f3      	beq.n	1560 <Print::write(unsigned char const*, unsigned int)+0x14>
    1578:	4601      	mov	r1, r0
    157a:	4640      	mov	r0, r8
    157c:	4798      	blx	r3
    157e:	42b4      	cmp	r4, r6
    1580:	4405      	add	r5, r0
    1582:	d1f2      	bne.n	156a <Print::write(unsigned char const*, unsigned int)+0x1e>
}
    1584:	4628      	mov	r0, r5
    1586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (buffer == nullptr) return 0;
    158a:	460d      	mov	r5, r1
}
    158c:	4628      	mov	r0, r5
    158e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (buffer == nullptr) return 0;
    1592:	4615      	mov	r5, r2
    1594:	e7f6      	b.n	1584 <Print::write(unsigned char const*, unsigned int)+0x38>
    1596:	bf00      	nop
    1598:	000014c5 	.word	0x000014c5

0000159c <Print::print(String const&)>:
{
    159c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	inline unsigned int length(void) const {return len;}
    15a0:	688c      	ldr	r4, [r1, #8]
    15a2:	b08a      	sub	sp, #40	; 0x28
	while (len > 0) {
    15a4:	b1dc      	cbz	r4, 15de <Print::print(String const&)+0x42>
	unsigned int index = 0;
    15a6:	2500      	movs	r5, #0
    15a8:	4688      	mov	r8, r1
    15aa:	4606      	mov	r6, r0
	size_t count = 0;
    15ac:	462f      	mov	r7, r5
		s.getBytes(buffer, sizeof(buffer), index);
    15ae:	462b      	mov	r3, r5
    15b0:	2221      	movs	r2, #33	; 0x21
    15b2:	a901      	add	r1, sp, #4
    15b4:	4640      	mov	r0, r8
    15b6:	f000 fa4d 	bl	1a54 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
    15ba:	2c20      	cmp	r4, #32
    15bc:	4622      	mov	r2, r4
		count += write(buffer, nbytes);
    15be:	6833      	ldr	r3, [r6, #0]
    15c0:	bf28      	it	cs
    15c2:	2220      	movcs	r2, #32
    15c4:	a901      	add	r1, sp, #4
    15c6:	4630      	mov	r0, r6
    15c8:	685b      	ldr	r3, [r3, #4]
		len -= nbytes;
    15ca:	1aa4      	subs	r4, r4, r2
		index += nbytes;
    15cc:	4415      	add	r5, r2
		count += write(buffer, nbytes);
    15ce:	4798      	blx	r3
    15d0:	4407      	add	r7, r0
	while (len > 0) {
    15d2:	2c00      	cmp	r4, #0
    15d4:	d1eb      	bne.n	15ae <Print::print(String const&)+0x12>
}
    15d6:	4638      	mov	r0, r7
    15d8:	b00a      	add	sp, #40	; 0x28
    15da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	size_t count = 0;
    15de:	4627      	mov	r7, r4
}
    15e0:	4638      	mov	r0, r7
    15e2:	b00a      	add	sp, #40	; 0x28
    15e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000015e8 <Print::print(long)>:
	if (n < 0) {
    15e8:	2900      	cmp	r1, #0
    15ea:	db03      	blt.n	15f4 <Print::print(long)+0xc>
	uint8_t sign=0;
    15ec:	2300      	movs	r3, #0
	if (base == 0) {
    15ee:	220a      	movs	r2, #10
    15f0:	f7ff bf6c 	b.w	14cc <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
		n = -n;
    15f4:	4249      	negs	r1, r1
		sign = '-';
    15f6:	232d      	movs	r3, #45	; 0x2d
	if (base == 0) {
    15f8:	220a      	movs	r2, #10
    15fa:	f7ff bf67 	b.w	14cc <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    15fe:	bf00      	nop

00001600 <Print::println()>:
{
    1600:	b500      	push	{lr}
	return write(buf, 2);
    1602:	6803      	ldr	r3, [r0, #0]
{
    1604:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    1606:	f640 2c0d 	movw	ip, #2573	; 0xa0d
	return write(buf, 2);
    160a:	2202      	movs	r2, #2
    160c:	a901      	add	r1, sp, #4
    160e:	685b      	ldr	r3, [r3, #4]
	uint8_t buf[2]={'\r', '\n'};
    1610:	f8ad c004 	strh.w	ip, [sp, #4]
	return write(buf, 2);
    1614:	4798      	blx	r3
}
    1616:	b003      	add	sp, #12
    1618:	f85d fb04 	ldr.w	pc, [sp], #4

0000161c <_write>:
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    161c:	4b05      	ldr	r3, [pc, #20]	; (1634 <_write+0x18>)
    161e:	2802      	cmp	r0, #2
    1620:	bf88      	it	hi
    1622:	4603      	movhi	r3, r0
{
    1624:	b410      	push	{r4}
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    1626:	681c      	ldr	r4, [r3, #0]
    1628:	4618      	mov	r0, r3
    162a:	6863      	ldr	r3, [r4, #4]
}
    162c:	f85d 4b04 	ldr.w	r4, [sp], #4
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    1630:	4718      	bx	r3
    1632:	bf00      	nop
    1634:	20000fa8 	.word	0x20000fa8

00001638 <Print::printf(char const*, ...)>:
{
    1638:	b40e      	push	{r1, r2, r3}
    163a:	b500      	push	{lr}
    163c:	b082      	sub	sp, #8
    163e:	aa03      	add	r2, sp, #12
    1640:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, format);
    1644:	9201      	str	r2, [sp, #4]
	int retval = vdprintf((int)this, format, ap);
    1646:	f002 fff3 	bl	4630 <vdprintf>
}
    164a:	b002      	add	sp, #8
    164c:	f85d eb04 	ldr.w	lr, [sp], #4
    1650:	b003      	add	sp, #12
    1652:	4770      	bx	lr

00001654 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	if (base == 0) {
    1654:	b95a      	cbnz	r2, 166e <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x1a>
		return write((uint8_t)n);
    1656:	6803      	ldr	r3, [r0, #0]
    1658:	b2c9      	uxtb	r1, r1
    165a:	4a07      	ldr	r2, [pc, #28]	; (1678 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x24>)
    165c:	681b      	ldr	r3, [r3, #0]
    165e:	4293      	cmp	r3, r2
{
    1660:	b500      	push	{lr}
    1662:	d106      	bne.n	1672 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x1e>
    1664:	4608      	mov	r0, r1
}
    1666:	f85d eb04 	ldr.w	lr, [sp], #4
    166a:	f001 be45 	b.w	32f8 <usb_serial_putchar>
    166e:	f7ff bf2d 	b.w	14cc <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    1672:	f85d eb04 	ldr.w	lr, [sp], #4
		return write((uint8_t)n);
    1676:	4718      	bx	r3
    1678:	000014c5 	.word	0x000014c5
    167c:	00000000 	.word	0x00000000

00001680 <Print::printFloat(double, unsigned char)>:
size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    1680:	eeb4 0b40 	vcmp.f64	d0, d0
{
    1684:	b570      	push	{r4, r5, r6, lr}
	if (isnan(number)) return print("nan");
    1686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
    168a:	4605      	mov	r5, r0
    168c:	ed2d 8b02 	vpush	{d8}
    1690:	b086      	sub	sp, #24
	if (isnan(number)) return print("nan");
    1692:	d67c      	bvs.n	178e <Print::printFloat(double, unsigned char)+0x10e>
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
    1694:	eeb0 7bc0 	vabs.f64	d7, d0
    	if (isinf(number)) return print("inf");
    1698:	ed9f 6b47 	vldr	d6, [pc, #284]	; 17b8 <Print::printFloat(double, unsigned char)+0x138>
    169c:	eeb4 7b46 	vcmp.f64	d7, d6
    16a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    16a4:	dc6b      	bgt.n	177e <Print::printFloat(double, unsigned char)+0xfe>
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    16a6:	ed9f 7b46 	vldr	d7, [pc, #280]	; 17c0 <Print::printFloat(double, unsigned char)+0x140>
    16aa:	eeb4 0bc7 	vcmpe.f64	d0, d7
    16ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    16b2:	dc5a      	bgt.n	176a <Print::printFloat(double, unsigned char)+0xea>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    16b4:	ed9f 7b44 	vldr	d7, [pc, #272]	; 17c8 <Print::printFloat(double, unsigned char)+0x148>
    16b8:	eeb4 0bc7 	vcmpe.f64	d0, d7
    16bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    16c0:	d453      	bmi.n	176a <Print::printFloat(double, unsigned char)+0xea>
	
	// Handle negative numbers
	if (number < 0.0) {
    16c2:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
    16c6:	460c      	mov	r4, r1
    16c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    16cc:	d45b      	bmi.n	1786 <Print::printFloat(double, unsigned char)+0x106>
	uint8_t sign=0;
    16ce:	2300      	movs	r3, #0
		sign = 1;
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
    16d0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
	for (uint8_t i=0; i<digits; ++i) {
    16d4:	2c00      	cmp	r4, #0
    16d6:	d05e      	beq.n	1796 <Print::printFloat(double, unsigned char)+0x116>
    16d8:	f04f 0c00 	mov.w	ip, #0
		rounding *= 0.1;
    16dc:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 17d0 <Print::printFloat(double, unsigned char)+0x150>
	for (uint8_t i=0; i<digits; ++i) {
    16e0:	f10c 0c01 	add.w	ip, ip, #1
		rounding *= 0.1;
    16e4:	ee27 7b06 	vmul.f64	d7, d7, d6
	for (uint8_t i=0; i<digits; ++i) {
    16e8:	fa5f f28c 	uxtb.w	r2, ip
    16ec:	42a2      	cmp	r2, r4
    16ee:	d3f7      	bcc.n	16e0 <Print::printFloat(double, unsigned char)+0x60>
	}
	number += rounding;
    16f0:	ee30 0b07 	vadd.f64	d0, d0, d7

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
    16f4:	220a      	movs	r2, #10
    16f6:	4628      	mov	r0, r5
    16f8:	eefc 7bc0 	vcvt.u32.f64	s15, d0
	double remainder = number - (double)int_part;
    16fc:	eeb8 8b67 	vcvt.f64.u32	d8, s15
    1700:	ee17 1a90 	vmov	r1, s15
    1704:	ee30 8b48 	vsub.f64	d8, d0, d8
	if (base == 0) {
    1708:	f7ff fee0 	bl	14cc <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    170c:	2c0f      	cmp	r4, #15
	count += printNumber(int_part, 10, sign);

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    170e:	f04f 032e 	mov.w	r3, #46	; 0x2e

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
    1712:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
    1716:	4606      	mov	r6, r0
		buf[0] = '.';
    1718:	bf28      	it	cs
    171a:	240f      	movcs	r4, #15
    171c:	f88d 3008 	strb.w	r3, [sp, #8]
		while (digits-- > 0) {
    1720:	f10d 0309 	add.w	r3, sp, #9
    1724:	aa02      	add	r2, sp, #8
    1726:	1e61      	subs	r1, r4, #1
    1728:	fa53 f181 	uxtab	r1, r3, r1
			remainder *= 10.0;
    172c:	ee28 0b06 	vmul.f64	d0, d8, d6
			n = (uint8_t)(remainder);
    1730:	eefc 7bc0 	vcvt.u32.f64	s15, d0
    1734:	edcd 7a01 	vstr	s15, [sp, #4]
    1738:	f89d 3004 	ldrb.w	r3, [sp, #4]
			buf[count++] = '0' + n;
			remainder -= n; 
    173c:	ee07 3a90 	vmov	s15, r3
			buf[count++] = '0' + n;
    1740:	3330      	adds	r3, #48	; 0x30
			remainder -= n; 
    1742:	eeb8 8be7 	vcvt.f64.s32	d8, s15
			buf[count++] = '0' + n;
    1746:	f802 3f01 	strb.w	r3, [r2, #1]!
		while (digits-- > 0) {
    174a:	4291      	cmp	r1, r2
			remainder -= n; 
    174c:	ee30 8b48 	vsub.f64	d8, d0, d8
		while (digits-- > 0) {
    1750:	d1ec      	bne.n	172c <Print::printFloat(double, unsigned char)+0xac>
		}
		count += write(buf, count);
    1752:	682b      	ldr	r3, [r5, #0]
			buf[count++] = '0' + n;
    1754:	3401      	adds	r4, #1
		count += write(buf, count);
    1756:	a902      	add	r1, sp, #8
    1758:	4628      	mov	r0, r5
    175a:	685b      	ldr	r3, [r3, #4]
    175c:	b2e2      	uxtb	r2, r4
    175e:	4798      	blx	r3
	}
	return count;
}
    1760:	4630      	mov	r0, r6
    1762:	b006      	add	sp, #24
    1764:	ecbd 8b02 	vpop	{d8}
    1768:	bd70      	pop	{r4, r5, r6, pc}
							  return write((const uint8_t *)str, strlen(str)); }
    176a:	682b      	ldr	r3, [r5, #0]
    176c:	2203      	movs	r2, #3
    176e:	491a      	ldr	r1, [pc, #104]	; (17d8 <Print::printFloat(double, unsigned char)+0x158>)
    1770:	685b      	ldr	r3, [r3, #4]
    1772:	b006      	add	sp, #24
    1774:	ecbd 8b02 	vpop	{d8}
    1778:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    177c:	4718      	bx	r3
    177e:	6803      	ldr	r3, [r0, #0]
    1780:	2203      	movs	r2, #3
    1782:	4916      	ldr	r1, [pc, #88]	; (17dc <Print::printFloat(double, unsigned char)+0x15c>)
    1784:	e7f4      	b.n	1770 <Print::printFloat(double, unsigned char)+0xf0>
		number = -number;
    1786:	eeb1 0b40 	vneg.f64	d0, d0
		sign = 1;
    178a:	2301      	movs	r3, #1
    178c:	e7a0      	b.n	16d0 <Print::printFloat(double, unsigned char)+0x50>
    178e:	6803      	ldr	r3, [r0, #0]
    1790:	2203      	movs	r2, #3
    1792:	4913      	ldr	r1, [pc, #76]	; (17e0 <Print::printFloat(double, unsigned char)+0x160>)
    1794:	e7ec      	b.n	1770 <Print::printFloat(double, unsigned char)+0xf0>
	number += rounding;
    1796:	ee30 0b07 	vadd.f64	d0, d0, d7
    179a:	220a      	movs	r2, #10
    179c:	4628      	mov	r0, r5
    179e:	eefc 7bc0 	vcvt.u32.f64	s15, d0
    17a2:	ee17 1a90 	vmov	r1, s15
}
    17a6:	b006      	add	sp, #24
    17a8:	ecbd 8b02 	vpop	{d8}
    17ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    17b0:	f7ff be8c 	b.w	14cc <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    17b4:	f3af 8000 	nop.w
    17b8:	ffffffff 	.word	0xffffffff
    17bc:	7fefffff 	.word	0x7fefffff
    17c0:	e0000000 	.word	0xe0000000
    17c4:	41efffff 	.word	0x41efffff
    17c8:	e0000000 	.word	0xe0000000
    17cc:	c1efffff 	.word	0xc1efffff
    17d0:	9999999a 	.word	0x9999999a
    17d4:	3fb99999 	.word	0x3fb99999
    17d8:	200003b0 	.word	0x200003b0
    17dc:	200003ac 	.word	0x200003ac
    17e0:	200003a8 	.word	0x200003a8

000017e4 <String::String(char const*)>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    17e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    17e6:	2600      	movs	r6, #0
String::String(const char *cstr)
    17e8:	4604      	mov	r4, r0
	capacity = 0;
    17ea:	e9c0 6600 	strd	r6, r6, [r0]
	len = 0;
    17ee:	6086      	str	r6, [r0, #8]
	if (cstr) copy(cstr, strlen(cstr));
    17f0:	b129      	cbz	r1, 17fe <String::String(char const*)+0x1a>
    17f2:	4608      	mov	r0, r1
    17f4:	460d      	mov	r5, r1
    17f6:	f003 fb23 	bl	4e40 <strlen>
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
	if (length == 0) {
    17fa:	4607      	mov	r7, r0
    17fc:	b908      	cbnz	r0, 1802 <String::String(char const*)+0x1e>
}
    17fe:	4620      	mov	r0, r4
    1800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    1802:	3001      	adds	r0, #1
    1804:	f002 f8a4 	bl	3950 <malloc>
	if (newbuffer) {
    1808:	2800      	cmp	r0, #0
    180a:	d0f8      	beq.n	17fe <String::String(char const*)+0x1a>
		}
		len = capacity = 0;
		return *this;
	}
	len = length;
	strcpy(buffer, cstr);
    180c:	4629      	mov	r1, r5
		if (len == 0) buffer[0] = 0;
    180e:	7006      	strb	r6, [r0, #0]
		buffer = newbuffer;
    1810:	6020      	str	r0, [r4, #0]
	len = length;
    1812:	e9c4 7701 	strd	r7, r7, [r4, #4]
	strcpy(buffer, cstr);
    1816:	f003 faa1 	bl	4d5c <strcpy>
}
    181a:	4620      	mov	r0, r4
    181c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    181e:	bf00      	nop

00001820 <String::String(String const&)>:
String::String(const String &value)
    1820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	rhs.len = 0;
}

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
    1822:	4288      	cmp	r0, r1
	buffer = NULL;
    1824:	f04f 0500 	mov.w	r5, #0
String::String(const String &value)
    1828:	4604      	mov	r4, r0
	len = 0;
    182a:	6085      	str	r5, [r0, #8]
	capacity = 0;
    182c:	e9c0 5500 	strd	r5, r5, [r0]
	if (this == &rhs) return *this;
    1830:	d002      	beq.n	1838 <String::String(String const&)+0x18>
    1832:	688e      	ldr	r6, [r1, #8]
	return copy(rhs.buffer, rhs.len);
    1834:	680f      	ldr	r7, [r1, #0]
	if (length == 0) {
    1836:	b90e      	cbnz	r6, 183c <String::String(String const&)+0x1c>
}
    1838:	4620      	mov	r0, r4
    183a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    183c:	1c70      	adds	r0, r6, #1
    183e:	f002 f887 	bl	3950 <malloc>
	if (newbuffer) {
    1842:	2800      	cmp	r0, #0
    1844:	d0f8      	beq.n	1838 <String::String(String const&)+0x18>
	strcpy(buffer, cstr);
    1846:	4639      	mov	r1, r7
		if (len == 0) buffer[0] = 0;
    1848:	7005      	strb	r5, [r0, #0]
		buffer = newbuffer;
    184a:	6020      	str	r0, [r4, #0]
	len = length;
    184c:	e9c4 6601 	strd	r6, r6, [r4, #4]
	strcpy(buffer, cstr);
    1850:	f003 fa84 	bl	4d5c <strcpy>
}
    1854:	4620      	mov	r0, r4
    1856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00001858 <String::~String()>:
String::~String()
    1858:	b510      	push	{r4, lr}
    185a:	4604      	mov	r4, r0
	free(buffer);
    185c:	6800      	ldr	r0, [r0, #0]
    185e:	f002 f87f 	bl	3960 <free>
}
    1862:	4620      	mov	r0, r4
    1864:	bd10      	pop	{r4, pc}
    1866:	bf00      	nop

00001868 <String::copy(char const*, unsigned int)>:
{
    1868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    186a:	4604      	mov	r4, r0
	if (length == 0) {
    186c:	4615      	mov	r5, r2
    186e:	b932      	cbnz	r2, 187e <String::copy(char const*, unsigned int)+0x16>
		if (buffer) buffer[0] = 0;
    1870:	6803      	ldr	r3, [r0, #0]
    1872:	b103      	cbz	r3, 1876 <String::copy(char const*, unsigned int)+0xe>
    1874:	701a      	strb	r2, [r3, #0]
		len = 0;
    1876:	2300      	movs	r3, #0
}
    1878:	4620      	mov	r0, r4
		len = 0;
    187a:	60a3      	str	r3, [r4, #8]
}
    187c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (capacity >= size) return 1;
    187e:	6843      	ldr	r3, [r0, #4]
    1880:	460e      	mov	r6, r1
    1882:	429a      	cmp	r2, r3
    1884:	d91c      	bls.n	18c0 <String::copy(char const*, unsigned int)+0x58>
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    1886:	1c51      	adds	r1, r2, #1
    1888:	6800      	ldr	r0, [r0, #0]
    188a:	f002 fb2d 	bl	3ee8 <realloc>
	if (newbuffer) {
    188e:	4607      	mov	r7, r0
    1890:	b160      	cbz	r0, 18ac <String::copy(char const*, unsigned int)+0x44>
		if (len == 0) buffer[0] = 0;
    1892:	68a3      	ldr	r3, [r4, #8]
		capacity = maxStrLen;
    1894:	e9c4 0500 	strd	r0, r5, [r4]
		if (len == 0) buffer[0] = 0;
    1898:	b90b      	cbnz	r3, 189e <String::copy(char const*, unsigned int)+0x36>
    189a:	7003      	strb	r3, [r0, #0]
	strcpy(buffer, cstr);
    189c:	6827      	ldr	r7, [r4, #0]
    189e:	4631      	mov	r1, r6
    18a0:	4638      	mov	r0, r7
	len = length;
    18a2:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    18a4:	f003 fa5a 	bl	4d5c <strcpy>
}
    18a8:	4620      	mov	r0, r4
    18aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (buffer) {
    18ac:	6820      	ldr	r0, [r4, #0]
    18ae:	b110      	cbz	r0, 18b6 <String::copy(char const*, unsigned int)+0x4e>
			free(buffer);
    18b0:	f002 f856 	bl	3960 <free>
			buffer = NULL;
    18b4:	6027      	str	r7, [r4, #0]
		len = capacity = 0;
    18b6:	2300      	movs	r3, #0
}
    18b8:	4620      	mov	r0, r4
		len = capacity = 0;
    18ba:	e9c4 3301 	strd	r3, r3, [r4, #4]
}
    18be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (buffer) buffer[0] = 0;
    18c0:	6807      	ldr	r7, [r0, #0]
	strcpy(buffer, cstr);
    18c2:	4631      	mov	r1, r6
	len = length;
    18c4:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    18c6:	4638      	mov	r0, r7
    18c8:	f003 fa48 	bl	4d5c <strcpy>
	return *this;
    18cc:	e7ec      	b.n	18a8 <String::copy(char const*, unsigned int)+0x40>
    18ce:	bf00      	nop

000018d0 <String::String(unsigned long, unsigned char)>:
String::String(unsigned long value, unsigned char base)
    18d0:	b510      	push	{r4, lr}
	buffer = NULL;
    18d2:	2300      	movs	r3, #0
String::String(unsigned long value, unsigned char base)
    18d4:	b08a      	sub	sp, #40	; 0x28
    18d6:	4604      	mov	r4, r0
	ultoa(value, buf, base);
    18d8:	4608      	mov	r0, r1
    18da:	a901      	add	r1, sp, #4
	len = 0;
    18dc:	60a3      	str	r3, [r4, #8]
	capacity = 0;
    18de:	e9c4 3300 	strd	r3, r3, [r4]
	ultoa(value, buf, base);
    18e2:	f000 fb2d 	bl	1f40 <ultoa>
#endif

String & String::operator = (const char *cstr)
{
	if (cstr) {
		copy(cstr, strlen(cstr));
    18e6:	a801      	add	r0, sp, #4
    18e8:	f003 faaa 	bl	4e40 <strlen>
    18ec:	a901      	add	r1, sp, #4
    18ee:	4602      	mov	r2, r0
    18f0:	4620      	mov	r0, r4
    18f2:	f7ff ffb9 	bl	1868 <String::copy(char const*, unsigned int)>
}
    18f6:	4620      	mov	r0, r4
    18f8:	b00a      	add	sp, #40	; 0x28
    18fa:	bd10      	pop	{r4, pc}

000018fc <String::operator=(char const*)>:
{
    18fc:	b538      	push	{r3, r4, r5, lr}
    18fe:	4605      	mov	r5, r0
	if (cstr) {
    1900:	460c      	mov	r4, r1
    1902:	b149      	cbz	r1, 1918 <String::operator=(char const*)+0x1c>
		copy(cstr, strlen(cstr));
    1904:	4608      	mov	r0, r1
    1906:	f003 fa9b 	bl	4e40 <strlen>
    190a:	4621      	mov	r1, r4
    190c:	4602      	mov	r2, r0
    190e:	4628      	mov	r0, r5
    1910:	f7ff ffaa 	bl	1868 <String::copy(char const*, unsigned int)>
	} else {
		len = 0;
	}
	return *this;
}
    1914:	4628      	mov	r0, r5
    1916:	bd38      	pop	{r3, r4, r5, pc}
    1918:	4628      	mov	r0, r5
		len = 0;
    191a:	60a9      	str	r1, [r5, #8]
}
    191c:	bd38      	pop	{r3, r4, r5, pc}
    191e:	bf00      	nop

00001920 <String::append(char const*, unsigned int)>:
{
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
    1920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1924:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    1926:	6800      	ldr	r0, [r0, #0]
{
    1928:	460d      	mov	r5, r1
    192a:	4616      	mov	r6, r2
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    192c:	4288      	cmp	r0, r1
	unsigned int newlen = len + length;
    192e:	68a3      	ldr	r3, [r4, #8]
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    1930:	d809      	bhi.n	1946 <String::append(char const*, unsigned int)+0x26>
    1932:	18c2      	adds	r2, r0, r3
    1934:	4291      	cmp	r1, r2
    1936:	d206      	bcs.n	1946 <String::append(char const*, unsigned int)+0x26>
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
    1938:	1a0f      	subs	r7, r1, r0
		self = true;
    193a:	f04f 0901 	mov.w	r9, #1
	}
	if (length == 0 || !reserve(newlen)) return *this;
    193e:	b936      	cbnz	r6, 194e <String::append(char const*, unsigned int)+0x2e>
		}
	else
		strcpy(buffer + len, cstr);
	len = newlen;
	return *this;
}
    1940:	4620      	mov	r0, r4
    1942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	bool self = false;
    1946:	f04f 0900 	mov.w	r9, #0
	if (length == 0 || !reserve(newlen)) return *this;
    194a:	2e00      	cmp	r6, #0
    194c:	d0f8      	beq.n	1940 <String::append(char const*, unsigned int)+0x20>
	unsigned int newlen = len + length;
    194e:	eb03 0806 	add.w	r8, r3, r6
	if (capacity >= size) return 1;
    1952:	6862      	ldr	r2, [r4, #4]
    1954:	4590      	cmp	r8, r2
    1956:	d90c      	bls.n	1972 <String::append(char const*, unsigned int)+0x52>
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    1958:	f108 0101 	add.w	r1, r8, #1
    195c:	f002 fac4 	bl	3ee8 <realloc>
	if (newbuffer) {
    1960:	2800      	cmp	r0, #0
    1962:	d0ed      	beq.n	1940 <String::append(char const*, unsigned int)+0x20>
		buffer = newbuffer;
    1964:	68a3      	ldr	r3, [r4, #8]
		capacity = maxStrLen;
    1966:	e9c4 0800 	strd	r0, r8, [r4]
		if (len == 0) buffer[0] = 0;
    196a:	b913      	cbnz	r3, 1972 <String::append(char const*, unsigned int)+0x52>
    196c:	7003      	strb	r3, [r0, #0]
		memcpy(buffer + len, buffer+buffer_offset, length);
    196e:	6820      	ldr	r0, [r4, #0]
    1970:	68a3      	ldr	r3, [r4, #8]
	if ( self ) {
    1972:	f1b9 0f00 	cmp.w	r9, #0
    1976:	d108      	bne.n	198a <String::append(char const*, unsigned int)+0x6a>
		strcpy(buffer + len, cstr);
    1978:	4629      	mov	r1, r5
    197a:	4418      	add	r0, r3
    197c:	f003 f9ee 	bl	4d5c <strcpy>
}
    1980:	4620      	mov	r0, r4
	len = newlen;
    1982:	f8c4 8008 	str.w	r8, [r4, #8]
}
    1986:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		memcpy(buffer + len, buffer+buffer_offset, length);
    198a:	4632      	mov	r2, r6
    198c:	19c1      	adds	r1, r0, r7
    198e:	4418      	add	r0, r3
    1990:	f000 fa3c 	bl	1e0c <memcpy>
		buffer[newlen] = 0;
    1994:	6823      	ldr	r3, [r4, #0]
    1996:	2200      	movs	r2, #0
    1998:	f803 2008 	strb.w	r2, [r3, r8]
    199c:	e7f0      	b.n	1980 <String::append(char const*, unsigned int)+0x60>
    199e:	bf00      	nop

000019a0 <String::append(char)>:
	if (cstr) append(cstr, strlen(cstr));
	return *this;
}

String & String::append(char c)
{
    19a0:	b510      	push	{r4, lr}
    19a2:	b082      	sub	sp, #8
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
    19a4:	2300      	movs	r3, #0
{
    19a6:	4604      	mov	r4, r0
	append(buf, 1);
    19a8:	2201      	movs	r2, #1
	buf[0] = c;
    19aa:	f88d 1004 	strb.w	r1, [sp, #4]
	append(buf, 1);
    19ae:	a901      	add	r1, sp, #4
	buf[1] = 0;
    19b0:	f88d 3005 	strb.w	r3, [sp, #5]
	append(buf, 1);
    19b4:	f7ff ffb4 	bl	1920 <String::append(char const*, unsigned int)>
	return *this;
}
    19b8:	4620      	mov	r0, r4
    19ba:	b002      	add	sp, #8
    19bc:	bd10      	pop	{r4, pc}
    19be:	bf00      	nop

000019c0 <operator+(StringSumHelper const&, String const&)>:
/*  Concatenate                              */
/*********************************************/


StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
    19c0:	b510      	push	{r4, lr}
    19c2:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	a.append(rhs.buffer, rhs.len);
    19c4:	688a      	ldr	r2, [r1, #8]
    19c6:	6809      	ldr	r1, [r1, #0]
    19c8:	f7ff ffaa 	bl	1920 <String::append(char const*, unsigned int)>
	return a;
}
    19cc:	4620      	mov	r0, r4
    19ce:	bd10      	pop	{r4, pc}

000019d0 <operator+(StringSumHelper const&, char const*)>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
    19d0:	b538      	push	{r3, r4, r5, lr}
    19d2:	4605      	mov	r5, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (cstr) a.append(cstr, strlen(cstr));
    19d4:	b141      	cbz	r1, 19e8 <operator+(StringSumHelper const&, char const*)+0x18>
    19d6:	460c      	mov	r4, r1
    19d8:	4608      	mov	r0, r1
    19da:	f003 fa31 	bl	4e40 <strlen>
    19de:	4602      	mov	r2, r0
    19e0:	4621      	mov	r1, r4
    19e2:	4628      	mov	r0, r5
    19e4:	f7ff ff9c 	bl	1920 <String::append(char const*, unsigned int)>
	return a;
}
    19e8:	4628      	mov	r0, r5
    19ea:	bd38      	pop	{r3, r4, r5, pc}

000019ec <String::equals(char const*) const>:
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
	if (len == 0) return (cstr == NULL || *cstr == 0);
    19ec:	6882      	ldr	r2, [r0, #8]
{
    19ee:	b508      	push	{r3, lr}
    19f0:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
    19f2:	b13a      	cbz	r2, 1a04 <String::equals(char const*) const+0x18>
	if (cstr == NULL) return buffer[0] == 0;
    19f4:	b161      	cbz	r1, 1a10 <String::equals(char const*) const+0x24>
	return strcmp(buffer, cstr) == 0;
    19f6:	6800      	ldr	r0, [r0, #0]
    19f8:	f003 f846 	bl	4a88 <strcmp>
    19fc:	fab0 f080 	clz	r0, r0
    1a00:	0940      	lsrs	r0, r0, #5
}
    1a02:	bd08      	pop	{r3, pc}
	if (len == 0) return (cstr == NULL || *cstr == 0);
    1a04:	b131      	cbz	r1, 1a14 <String::equals(char const*) const+0x28>
	if (cstr == NULL) return buffer[0] == 0;
    1a06:	7818      	ldrb	r0, [r3, #0]
    1a08:	fab0 f080 	clz	r0, r0
    1a0c:	0940      	lsrs	r0, r0, #5
}
    1a0e:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
    1a10:	6803      	ldr	r3, [r0, #0]
    1a12:	e7f8      	b.n	1a06 <String::equals(char const*) const+0x1a>
    1a14:	2001      	movs	r0, #1
}
    1a16:	bd08      	pop	{r3, pc}

00001a18 <String::startsWith(String const&) const>:
	return 1;
}

unsigned char String::startsWith( const String &s2 ) const
{
	if (len < s2.len) return 0;
    1a18:	688a      	ldr	r2, [r1, #8]
{
    1a1a:	b508      	push	{r3, lr}
	if (len < s2.len) return 0;
    1a1c:	6883      	ldr	r3, [r0, #8]
    1a1e:	4293      	cmp	r3, r2
    1a20:	d309      	bcc.n	1a36 <String::startsWith(String const&) const+0x1e>
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
    1a22:	6800      	ldr	r0, [r0, #0]
    1a24:	b130      	cbz	r0, 1a34 <String::startsWith(String const&) const+0x1c>
    1a26:	6809      	ldr	r1, [r1, #0]
    1a28:	b139      	cbz	r1, 1a3a <String::startsWith(String const&) const+0x22>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
    1a2a:	f002 ff0f 	bl	484c <strncmp>
    1a2e:	fab0 f080 	clz	r0, r0
    1a32:	0940      	lsrs	r0, r0, #5
}
    1a34:	bd08      	pop	{r3, pc}
	if (len < s2.len) return 0;
    1a36:	2000      	movs	r0, #0
}
    1a38:	bd08      	pop	{r3, pc}
	if (len < s2.len) return 0;
    1a3a:	4608      	mov	r0, r1
}
    1a3c:	bd08      	pop	{r3, pc}
    1a3e:	bf00      	nop

00001a40 <String::charAt(unsigned int) const>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
    1a40:	6883      	ldr	r3, [r0, #8]
    1a42:	4299      	cmp	r1, r3
    1a44:	d203      	bcs.n	1a4e <String::charAt(unsigned int) const+0xe>
    1a46:	6800      	ldr	r0, [r0, #0]
    1a48:	b110      	cbz	r0, 1a50 <String::charAt(unsigned int) const+0x10>
	return buffer[index];
    1a4a:	5c40      	ldrb	r0, [r0, r1]
    1a4c:	4770      	bx	lr
	if (index >= len || !buffer) return 0;
    1a4e:	2000      	movs	r0, #0
}
    1a50:	4770      	bx	lr
    1a52:	bf00      	nop

00001a54 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>:
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
	if (!bufsize || !buf) return;
    1a54:	b1c2      	cbz	r2, 1a88 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x34>
{
    1a56:	b570      	push	{r4, r5, r6, lr}
	if (!bufsize || !buf) return;
    1a58:	fab1 f681 	clz	r6, r1
    1a5c:	460c      	mov	r4, r1
    1a5e:	0976      	lsrs	r6, r6, #5
    1a60:	b119      	cbz	r1, 1a6a <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x16>
	if (index >= len) {
    1a62:	6885      	ldr	r5, [r0, #8]
    1a64:	429d      	cmp	r5, r3
    1a66:	d801      	bhi.n	1a6c <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x18>
		buf[0] = 0;
    1a68:	700e      	strb	r6, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
    1a6a:	bd70      	pop	{r4, r5, r6, pc}
	if (n > len - index) n = len - index;
    1a6c:	1aed      	subs	r5, r5, r3
	unsigned int n = bufsize - 1;
    1a6e:	f102 3cff 	add.w	ip, r2, #4294967295
	strncpy((char *)buf, buffer + index, n);
    1a72:	6801      	ldr	r1, [r0, #0]
    1a74:	4620      	mov	r0, r4
    1a76:	4565      	cmp	r5, ip
    1a78:	4419      	add	r1, r3
    1a7a:	bf28      	it	cs
    1a7c:	4665      	movcs	r5, ip
    1a7e:	462a      	mov	r2, r5
    1a80:	f002 ff2a 	bl	48d8 <strncpy>
	buf[n] = 0;
    1a84:	5566      	strb	r6, [r4, r5]
}
    1a86:	bd70      	pop	{r4, r5, r6, pc}
    1a88:	4770      	bx	lr
    1a8a:	bf00      	nop

00001a8c <String::substring(unsigned int) const>:
	}
	return found;
}

String String::substring( unsigned int left ) const
{
    1a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return substring(left, len);
    1a90:	688f      	ldr	r7, [r1, #8]
{
    1a92:	460e      	mov	r6, r1
    1a94:	4605      	mov	r5, r0
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
    1a96:	4297      	cmp	r7, r2
    1a98:	d202      	bcs.n	1aa0 <String::substring(unsigned int) const+0x14>
    1a9a:	4613      	mov	r3, r2
    1a9c:	463a      	mov	r2, r7
    1a9e:	461f      	mov	r7, r3
	buffer = NULL;
    1aa0:	2300      	movs	r3, #0
	len = 0;
    1aa2:	60ab      	str	r3, [r5, #8]
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
	if (left > len) return out;
    1aa4:	68b0      	ldr	r0, [r6, #8]
    1aa6:	4290      	cmp	r0, r2
	capacity = 0;
    1aa8:	e9c5 3300 	strd	r3, r3, [r5]
	if (left > len) return out;
    1aac:	d314      	bcc.n	1ad8 <String::substring(unsigned int) const+0x4c>
	if (right > len) right = len;
    1aae:	4287      	cmp	r7, r0
	char temp = buffer[right];  // save the replaced character
    1ab0:	6831      	ldr	r1, [r6, #0]
    1ab2:	bf28      	it	cs
    1ab4:	4607      	movcs	r7, r0
    1ab6:	f811 8007 	ldrb.w	r8, [r1, r7]
	buffer[right] = '\0';	
    1aba:	55cb      	strb	r3, [r1, r7]
	out = buffer + left;  // pointer arithmetic
    1abc:	6833      	ldr	r3, [r6, #0]
	if (cstr) {
    1abe:	189c      	adds	r4, r3, r2
    1ac0:	d00d      	beq.n	1ade <String::substring(unsigned int) const+0x52>
		copy(cstr, strlen(cstr));
    1ac2:	4620      	mov	r0, r4
    1ac4:	f003 f9bc 	bl	4e40 <strlen>
    1ac8:	4621      	mov	r1, r4
    1aca:	4602      	mov	r2, r0
    1acc:	4628      	mov	r0, r5
    1ace:	f7ff fecb 	bl	1868 <String::copy(char const*, unsigned int)>
	buffer[right] = temp;  //restore character
    1ad2:	6833      	ldr	r3, [r6, #0]
    1ad4:	f803 8007 	strb.w	r8, [r3, r7]
}
    1ad8:	4628      	mov	r0, r5
    1ada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = 0;
    1ade:	60ac      	str	r4, [r5, #8]
    1ae0:	e7f8      	b.n	1ad4 <String::substring(unsigned int) const+0x48>
    1ae2:	bf00      	nop

00001ae4 <String::toUpperCase()>:
	}
	return *this;
}

String & String::toUpperCase(void)
{
    1ae4:	b538      	push	{r3, r4, r5, lr}
	if (!buffer) return *this;
    1ae6:	6804      	ldr	r4, [r0, #0]
{
    1ae8:	4605      	mov	r5, r0
	if (!buffer) return *this;
    1aea:	b144      	cbz	r4, 1afe <String::toUpperCase()+0x1a>
	for (char *p = buffer; *p; p++) {
    1aec:	7820      	ldrb	r0, [r4, #0]
    1aee:	b130      	cbz	r0, 1afe <String::toUpperCase()+0x1a>
		*p = toupper(*p);
    1af0:	f002 fc00 	bl	42f4 <toupper>
    1af4:	7020      	strb	r0, [r4, #0]
	for (char *p = buffer; *p; p++) {
    1af6:	f814 0f01 	ldrb.w	r0, [r4, #1]!
    1afa:	2800      	cmp	r0, #0
    1afc:	d1f8      	bne.n	1af0 <String::toUpperCase()+0xc>
	}
	return *this;
}
    1afe:	4628      	mov	r0, r5
    1b00:	bd38      	pop	{r3, r4, r5, pc}
    1b02:	bf00      	nop

00001b04 <String::trim()>:

String & String::trim(void)
{
    1b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!buffer || len == 0) return *this;
    1b08:	6807      	ldr	r7, [r0, #0]
{
    1b0a:	4606      	mov	r6, r0
	if (!buffer || len == 0) return *this;
    1b0c:	b1e7      	cbz	r7, 1b48 <String::trim()+0x44>
    1b0e:	6884      	ldr	r4, [r0, #8]
    1b10:	b1d4      	cbz	r4, 1b48 <String::trim()+0x44>
    1b12:	46b8      	mov	r8, r7
    1b14:	4645      	mov	r5, r8
	char *begin = buffer;
	while (isspace(*begin)) begin++;
    1b16:	f818 0b01 	ldrb.w	r0, [r8], #1
    1b1a:	f002 fbe3 	bl	42e4 <isspace>
    1b1e:	2800      	cmp	r0, #0
    1b20:	d1f8      	bne.n	1b14 <String::trim()+0x10>
	char *end = buffer + len - 1;
    1b22:	3c01      	subs	r4, #1
    1b24:	443c      	add	r4, r7
	while (isspace(*end) && end >= begin) end--;
    1b26:	e002      	b.n	1b2e <String::trim()+0x2a>
    1b28:	42a5      	cmp	r5, r4
    1b2a:	d805      	bhi.n	1b38 <String::trim()+0x34>
    1b2c:	3c01      	subs	r4, #1
    1b2e:	7820      	ldrb	r0, [r4, #0]
    1b30:	f002 fbd8 	bl	42e4 <isspace>
    1b34:	2800      	cmp	r0, #0
    1b36:	d1f7      	bne.n	1b28 <String::trim()+0x24>
	len = end + 1 - begin;
    1b38:	1c62      	adds	r2, r4, #1
	if (begin > buffer) memcpy(buffer, begin, len);
    1b3a:	42af      	cmp	r7, r5
	len = end + 1 - begin;
    1b3c:	eba2 0205 	sub.w	r2, r2, r5
    1b40:	60b2      	str	r2, [r6, #8]
	if (begin > buffer) memcpy(buffer, begin, len);
    1b42:	d304      	bcc.n	1b4e <String::trim()+0x4a>
	buffer[len] = 0;
    1b44:	2300      	movs	r3, #0
    1b46:	54bb      	strb	r3, [r7, r2]
	return *this;
}
    1b48:	4630      	mov	r0, r6
    1b4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (begin > buffer) memcpy(buffer, begin, len);
    1b4e:	4638      	mov	r0, r7
    1b50:	4629      	mov	r1, r5
    1b52:	f000 f95b 	bl	1e0c <memcpy>
	buffer[len] = 0;
    1b56:	6837      	ldr	r7, [r6, #0]
    1b58:	68b2      	ldr	r2, [r6, #8]
    1b5a:	e7f3      	b.n	1b44 <String::trim()+0x40>

00001b5c <analogRead>:
	if (pin > sizeof(pin_to_channel)) return 0;
    1b5c:	282a      	cmp	r0, #42	; 0x2a
    1b5e:	d849      	bhi.n	1bf4 <analogRead+0x98>
{
    1b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (calibrating) wait_for_cal();
    1b62:	4f25      	ldr	r7, [pc, #148]	; (1bf8 <analogRead+0x9c>)
    1b64:	4604      	mov	r4, r0
    1b66:	783b      	ldrb	r3, [r7, #0]
    1b68:	b9e3      	cbnz	r3, 1ba4 <analogRead+0x48>
	uint8_t ch = pin_to_channel[pin];
    1b6a:	4b24      	ldr	r3, [pc, #144]	; (1bfc <analogRead+0xa0>)
    1b6c:	5d1b      	ldrb	r3, [r3, r4]
	if (ch == 255) return 0;
    1b6e:	2bff      	cmp	r3, #255	; 0xff
    1b70:	d029      	beq.n	1bc6 <analogRead+0x6a>
	volatile uint32_t *pad = portControlRegister(pin);
    1b72:	4a23      	ldr	r2, [pc, #140]	; (1c00 <analogRead+0xa4>)
    1b74:	eb02 1204 	add.w	r2, r2, r4, lsl #4
    1b78:	6891      	ldr	r1, [r2, #8]
	uint32_t padval = *pad;
    1b7a:	680a      	ldr	r2, [r1, #0]
	if ((padval & (IOMUXC_PAD_PUE | IOMUXC_PAD_PKE)) == IOMUXC_PAD_PKE) {
    1b7c:	f402 5040 	and.w	r0, r2, #12288	; 0x3000
    1b80:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    1b84:	d030      	beq.n	1be8 <analogRead+0x8c>
	if(!(ch & 0x80)) {
    1b86:	061c      	lsls	r4, r3, #24
    1b88:	d41f      	bmi.n	1bca <analogRead+0x6e>
		ADC1_HC0 = ch;
    1b8a:	4c1e      	ldr	r4, [pc, #120]	; (1c04 <analogRead+0xa8>)
    1b8c:	6023      	str	r3, [r4, #0]
		while (!(ADC1_HS & ADC_HS_COCO0)) {
    1b8e:	6a23      	ldr	r3, [r4, #32]
    1b90:	07d8      	lsls	r0, r3, #31
    1b92:	d404      	bmi.n	1b9e <analogRead+0x42>
			yield(); // TODO: what happens if yield-called code uses analogRead()
    1b94:	f001 fc44 	bl	3420 <yield>
		while (!(ADC1_HS & ADC_HS_COCO0)) {
    1b98:	6a23      	ldr	r3, [r4, #32]
    1b9a:	07d9      	lsls	r1, r3, #31
    1b9c:	d5fa      	bpl.n	1b94 <analogRead+0x38>
		return ADC1_R0;
    1b9e:	4b19      	ldr	r3, [pc, #100]	; (1c04 <analogRead+0xa8>)
    1ba0:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    1ba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	while ((ADC1_GC & ADC_GC_CAL) || (ADC2_GC & ADC_GC_CAL)) {
    1ba4:	4d17      	ldr	r5, [pc, #92]	; (1c04 <analogRead+0xa8>)
    1ba6:	4e18      	ldr	r6, [pc, #96]	; (1c08 <analogRead+0xac>)
    1ba8:	e001      	b.n	1bae <analogRead+0x52>
		yield();
    1baa:	f001 fc39 	bl	3420 <yield>
	while ((ADC1_GC & ADC_GC_CAL) || (ADC2_GC & ADC_GC_CAL)) {
    1bae:	6cab      	ldr	r3, [r5, #72]	; 0x48
    1bb0:	061b      	lsls	r3, r3, #24
    1bb2:	d4fa      	bmi.n	1baa <analogRead+0x4e>
    1bb4:	6cb3      	ldr	r3, [r6, #72]	; 0x48
    1bb6:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    1bba:	d1f6      	bne.n	1baa <analogRead+0x4e>
	calibrating = 0;
    1bbc:	703b      	strb	r3, [r7, #0]
	uint8_t ch = pin_to_channel[pin];
    1bbe:	4b0f      	ldr	r3, [pc, #60]	; (1bfc <analogRead+0xa0>)
    1bc0:	5d1b      	ldrb	r3, [r3, r4]
	if (ch == 255) return 0;
    1bc2:	2bff      	cmp	r3, #255	; 0xff
    1bc4:	d1d5      	bne.n	1b72 <analogRead+0x16>
	if (pin > sizeof(pin_to_channel)) return 0;
    1bc6:	2000      	movs	r0, #0
}
    1bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ADC2_HC0 = ch & 0x7f;
    1bca:	4c0f      	ldr	r4, [pc, #60]	; (1c08 <analogRead+0xac>)
    1bcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    1bd0:	6023      	str	r3, [r4, #0]
		while (!(ADC2_HS & ADC_HS_COCO0)) {
    1bd2:	6a23      	ldr	r3, [r4, #32]
    1bd4:	07da      	lsls	r2, r3, #31
    1bd6:	d404      	bmi.n	1be2 <analogRead+0x86>
			yield(); // TODO: what happens if yield-called code uses analogRead()
    1bd8:	f001 fc22 	bl	3420 <yield>
		while (!(ADC2_HS & ADC_HS_COCO0)) {
    1bdc:	6a23      	ldr	r3, [r4, #32]
    1bde:	07db      	lsls	r3, r3, #31
    1be0:	d5fa      	bpl.n	1bd8 <analogRead+0x7c>
		return ADC2_R0;
    1be2:	4b09      	ldr	r3, [pc, #36]	; (1c08 <analogRead+0xac>)
    1be4:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    1be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*pad = padval & ~IOMUXC_PAD_PKE;
    1be8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
	if(!(ch & 0x80)) {
    1bec:	061c      	lsls	r4, r3, #24
		*pad = padval & ~IOMUXC_PAD_PKE;
    1bee:	600a      	str	r2, [r1, #0]
	if(!(ch & 0x80)) {
    1bf0:	d4eb      	bmi.n	1bca <analogRead+0x6e>
    1bf2:	e7ca      	b.n	1b8a <analogRead+0x2e>
	if (pin > sizeof(pin_to_channel)) return 0;
    1bf4:	2000      	movs	r0, #0
}
    1bf6:	4770      	bx	lr
    1bf8:	2000210f 	.word	0x2000210f
    1bfc:	20000cc4 	.word	0x20000cc4
    1c00:	20000688 	.word	0x20000688
    1c04:	400c4000 	.word	0x400c4000
    1c08:	400c8000 	.word	0x400c8000

00001c0c <analogReadRes>:
   if (bits == 8) {
    1c0c:	2808      	cmp	r0, #8
{
    1c0e:	b430      	push	{r4, r5}
   if (bits == 8) {
    1c10:	d022      	beq.n	1c58 <analogReadRes+0x4c>
    mode = ADC_CFG_MODE(2) | ADC_CFG_ADSTS(3) | ADC_CFG_ADLSMP;
    1c12:	280a      	cmp	r0, #10
    1c14:	bf0c      	ite	eq
    1c16:	f44f 7105 	moveq.w	r1, #532	; 0x214
    1c1a:	f44f 7146 	movne.w	r1, #792	; 0x318
  tmp32  = (ADC1_CFG & (0xFFFFFC00));
    1c1e:	4c10      	ldr	r4, [pc, #64]	; (1c60 <analogReadRes+0x54>)
    1c20:	4d10      	ldr	r5, [pc, #64]	; (1c64 <analogReadRes+0x58>)
    1c22:	6c63      	ldr	r3, [r4, #68]	; 0x44
  tmp32 |= (ADC1_CFG & (0x03));  // ADICLK
    1c24:	6c62      	ldr	r2, [r4, #68]	; 0x44
  tmp32  = (ADC1_CFG & (0xFFFFFC00));
    1c26:	402b      	ands	r3, r5
  tmp32  = (ADC2_CFG & (0xFFFFFC00));
    1c28:	480f      	ldr	r0, [pc, #60]	; (1c68 <analogReadRes+0x5c>)
  tmp32 |= (ADC1_CFG & (0x03));  // ADICLK
    1c2a:	f002 0203 	and.w	r2, r2, #3
    1c2e:	431a      	orrs	r2, r3
  tmp32 |= (ADC1_CFG & (0xE0));  // ADIV & ADLPC
    1c30:	6c63      	ldr	r3, [r4, #68]	; 0x44
    1c32:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    1c36:	4313      	orrs	r3, r2
  tmp32 |= mode; 
    1c38:	430b      	orrs	r3, r1
  ADC1_CFG = tmp32;
    1c3a:	6463      	str	r3, [r4, #68]	; 0x44
  tmp32  = (ADC2_CFG & (0xFFFFFC00));
    1c3c:	6c43      	ldr	r3, [r0, #68]	; 0x44
  tmp32 |= (ADC2_CFG & (0x03));  // ADICLK
    1c3e:	6c42      	ldr	r2, [r0, #68]	; 0x44
  tmp32  = (ADC2_CFG & (0xFFFFFC00));
    1c40:	402b      	ands	r3, r5
  tmp32 |= (ADC2_CFG & (0x03));  // ADICLK
    1c42:	f002 0203 	and.w	r2, r2, #3
    1c46:	431a      	orrs	r2, r3
  tmp32 |= (ADC2_CFG & (0xE0));  // ADIV & ADLPC
    1c48:	6c43      	ldr	r3, [r0, #68]	; 0x44
    1c4a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    1c4e:	4313      	orrs	r3, r2
  tmp32 |= mode; 
    1c50:	4319      	orrs	r1, r3
}
    1c52:	bc30      	pop	{r4, r5}
  ADC2_CFG = tmp32;
    1c54:	6441      	str	r1, [r0, #68]	; 0x44
}
    1c56:	4770      	bx	lr
    mode = ADC_CFG_MODE(0) | ADC_CFG_ADSTS(3);
    1c58:	f44f 7140 	mov.w	r1, #768	; 0x300
    1c5c:	e7df      	b.n	1c1e <analogReadRes+0x12>
    1c5e:	bf00      	nop
    1c60:	400c4000 	.word	0x400c4000
    1c64:	fffffc00 	.word	0xfffffc00
    1c68:	400c8000 	.word	0x400c8000

00001c6c <delay>:
	if (msec == 0) return;
    1c6c:	b900      	cbnz	r0, 1c70 <delay+0x4>
    1c6e:	4770      	bx	lr
{
    1c70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    1c74:	2101      	movs	r1, #1
    1c76:	4681      	mov	r9, r0
    1c78:	4c21      	ldr	r4, [pc, #132]	; (1d00 <delay+0x94>)
    1c7a:	4d22      	ldr	r5, [pc, #136]	; (1d04 <delay+0x98>)
    1c7c:	4e22      	ldr	r6, [pc, #136]	; (1d08 <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    1c7e:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    1c82:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    1c84:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    1c86:	e844 1300 	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    1c8a:	2b00      	cmp	r3, #0
    1c8c:	d1f7      	bne.n	1c7e <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    1c8e:	491f      	ldr	r1, [pc, #124]	; (1d0c <delay+0xa0>)
    1c90:	684b      	ldr	r3, [r1, #4]
	uint32_t usec = 1000*smc + frac;
    1c92:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1c96:	f8df a078 	ldr.w	sl, [pc, #120]	; 1d10 <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
    1c9a:	1a1b      	subs	r3, r3, r0
    1c9c:	2701      	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
    1c9e:	fb0b f802 	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1ca2:	f8da 2000 	ldr.w	r2, [sl]
    1ca6:	fba3 3202 	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
    1caa:	455a      	cmp	r2, fp
    1cac:	bf94      	ite	ls
    1cae:	4490      	addls	r8, r2
    1cb0:	44d8      	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    1cb2:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    1cb6:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    1cb8:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    1cba:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    1cbe:	2b00      	cmp	r3, #0
    1cc0:	d1f7      	bne.n	1cb2 <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    1cc2:	684b      	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1cc4:	f8da c000 	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
    1cc8:	1a1b      	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
    1cca:	fb0b f202 	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1cce:	fba3 3c0c 	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
    1cd2:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
    1cd6:	bf94      	ite	ls
    1cd8:	4462      	addls	r2, ip
    1cda:	f502 727a 	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
    1cde:	eba2 0208 	sub.w	r2, r2, r8
    1ce2:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
    1ce6:	d306      	bcc.n	1cf6 <delay+0x8a>
			if (--msec == 0) return;
    1ce8:	f1b9 0901 	subs.w	r9, r9, #1
			start += 1000;
    1cec:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
    1cf0:	d1df      	bne.n	1cb2 <delay+0x46>
}
    1cf2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
    1cf6:	f001 fb93 	bl	3420 <yield>
		while ((micros() - start) >= 1000) {
    1cfa:	4904      	ldr	r1, [pc, #16]	; (1d0c <delay+0xa0>)
    1cfc:	e7d9      	b.n	1cb2 <delay+0x46>
    1cfe:	bf00      	nop
    1d00:	200020e8 	.word	0x200020e8
    1d04:	200020e4 	.word	0x200020e4
    1d08:	200020e0 	.word	0x200020e0
    1d0c:	e0001000 	.word	0xe0001000
    1d10:	200020dc 	.word	0x200020dc

00001d14 <digitalWrite>:
	if (pin >= CORE_NUM_DIGITAL) return;
    1d14:	2836      	cmp	r0, #54	; 0x36
    1d16:	d816      	bhi.n	1d46 <digitalWrite+0x32>
	p = digital_pin_to_info_PGM + pin;
    1d18:	0102      	lsls	r2, r0, #4
    1d1a:	4b10      	ldr	r3, [pc, #64]	; (1d5c <digitalWrite+0x48>)
    1d1c:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
    1d20:	589b      	ldr	r3, [r3, r2]
{
    1d22:	b410      	push	{r4}
	mask = p->mask;
    1d24:	68c2      	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
    1d26:	685c      	ldr	r4, [r3, #4]
	if (pinmode & mask) {
    1d28:	4214      	tst	r4, r2
    1d2a:	d005      	beq.n	1d38 <digitalWrite+0x24>
		if (val) {
    1d2c:	b961      	cbnz	r1, 1d48 <digitalWrite+0x34>
		}
	}
}
    1d2e:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x22) = mask; // clear register
    1d32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
    1d36:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    1d38:	6883      	ldr	r3, [r0, #8]
		if (val) {
    1d3a:	b151      	cbz	r1, 1d52 <digitalWrite+0x3e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    1d3c:	4a08      	ldr	r2, [pc, #32]	; (1d60 <digitalWrite+0x4c>)
}
    1d3e:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    1d42:	601a      	str	r2, [r3, #0]
}
    1d44:	4770      	bx	lr
    1d46:	4770      	bx	lr
    1d48:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x21) = mask; // set register
    1d4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    1d50:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    1d52:	4a04      	ldr	r2, [pc, #16]	; (1d64 <digitalWrite+0x50>)
}
    1d54:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    1d58:	601a      	str	r2, [r3, #0]
}
    1d5a:	4770      	bx	lr
    1d5c:	20000688 	.word	0x20000688
    1d60:	0001f038 	.word	0x0001f038
    1d64:	00013038 	.word	0x00013038

00001d68 <digitalRead>:

uint8_t digitalRead(uint8_t pin)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return 0;
    1d68:	2836      	cmp	r0, #54	; 0x36
    1d6a:	d80b      	bhi.n	1d84 <digitalRead+0x1c>
	p = digital_pin_to_info_PGM + pin;
    1d6c:	4b06      	ldr	r3, [pc, #24]	; (1d88 <digitalRead+0x20>)
    1d6e:	0102      	lsls	r2, r0, #4
    1d70:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
    1d74:	589a      	ldr	r2, [r3, r2]
    1d76:	68c3      	ldr	r3, [r0, #12]
    1d78:	6892      	ldr	r2, [r2, #8]
    1d7a:	421a      	tst	r2, r3
    1d7c:	bf14      	ite	ne
    1d7e:	2001      	movne	r0, #1
    1d80:	2000      	moveq	r0, #0
    1d82:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return 0;
    1d84:	2000      	movs	r0, #0
}
    1d86:	4770      	bx	lr
    1d88:	20000688 	.word	0x20000688

00001d8c <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    1d8c:	2836      	cmp	r0, #54	; 0x36
    1d8e:	d829      	bhi.n	1de4 <pinMode+0x58>
	p = digital_pin_to_info_PGM + pin;
    1d90:	4b16      	ldr	r3, [pc, #88]	; (1dec <pinMode+0x60>)
    1d92:	0102      	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    1d94:	2901      	cmp	r1, #1
	p = digital_pin_to_info_PGM + pin;
    1d96:	eb03 1000 	add.w	r0, r3, r0, lsl #4
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    1d9a:	589a      	ldr	r2, [r3, r2]
{
    1d9c:	b410      	push	{r4}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    1d9e:	6853      	ldr	r3, [r2, #4]
    1da0:	68c4      	ldr	r4, [r0, #12]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    1da2:	d00e      	beq.n	1dc2 <pinMode+0x36>
    1da4:	2904      	cmp	r1, #4
    1da6:	d00c      	beq.n	1dc2 <pinMode+0x36>
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    1da8:	ea23 0304 	bic.w	r3, r3, r4
    1dac:	6053      	str	r3, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    1dae:	6883      	ldr	r3, [r0, #8]
		if (mode == INPUT) {
    1db0:	b1a9      	cbz	r1, 1dde <pinMode+0x52>
		} else if (mode == INPUT_PULLUP) {
    1db2:	2902      	cmp	r1, #2
    1db4:	d017      	beq.n	1de6 <pinMode+0x5a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    1db6:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    1db8:	bf0c      	ite	eq
    1dba:	4a0d      	ldreq	r2, [pc, #52]	; (1df0 <pinMode+0x64>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    1dbc:	4a0d      	ldrne	r2, [pc, #52]	; (1df4 <pinMode+0x68>)
    1dbe:	601a      	str	r2, [r3, #0]
    1dc0:	e007      	b.n	1dd2 <pinMode+0x46>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    1dc2:	4323      	orrs	r3, r4
		if (mode == OUTPUT) {
    1dc4:	2901      	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
    1dc6:	6053      	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
    1dc8:	6883      	ldr	r3, [r0, #8]
		if (mode == OUTPUT) {
    1dca:	d008      	beq.n	1dde <pinMode+0x52>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    1dcc:	f640 0238 	movw	r2, #2104	; 0x838
    1dd0:	601a      	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    1dd2:	6843      	ldr	r3, [r0, #4]
    1dd4:	2215      	movs	r2, #21
}
    1dd6:	f85d 4b04 	ldr.w	r4, [sp], #4
	*(p->mux) = 5 | 0x10;
    1dda:	601a      	str	r2, [r3, #0]
}
    1ddc:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7);
    1dde:	2238      	movs	r2, #56	; 0x38
    1de0:	601a      	str	r2, [r3, #0]
    1de2:	e7f6      	b.n	1dd2 <pinMode+0x46>
    1de4:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    1de6:	4a04      	ldr	r2, [pc, #16]	; (1df8 <pinMode+0x6c>)
    1de8:	601a      	str	r2, [r3, #0]
    1dea:	e7f2      	b.n	1dd2 <pinMode+0x46>
    1dec:	20000688 	.word	0x20000688
    1df0:	00013038 	.word	0x00013038
    1df4:	00010038 	.word	0x00010038
    1df8:	0001f038 	.word	0x0001f038

00001dfc <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    1dfc:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    1dfe:	f7fe f93d 	bl	7c <setup>
	while (1) {
		loop();
    1e02:	f7fe f9a7 	bl	154 <loop>
		yield();
    1e06:	f001 fb0b 	bl	3420 <yield>
	while (1) {
    1e0a:	e7fa      	b.n	1e02 <main+0x6>

00001e0c <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    1e0c:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    1e0e:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    1e12:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    1e16:	d16d      	bne.n	1ef4 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    1e18:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    1e1a:	d341      	bcc.n	1ea0 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    1e1c:	f851 3b04 	ldr.w	r3, [r1], #4
    1e20:	f840 3b04 	str.w	r3, [r0], #4
    1e24:	f851 3b04 	ldr.w	r3, [r1], #4
    1e28:	f840 3b04 	str.w	r3, [r0], #4
    1e2c:	f851 3b04 	ldr.w	r3, [r1], #4
    1e30:	f840 3b04 	str.w	r3, [r0], #4
    1e34:	f851 3b04 	ldr.w	r3, [r1], #4
    1e38:	f840 3b04 	str.w	r3, [r0], #4
    1e3c:	f851 3b04 	ldr.w	r3, [r1], #4
    1e40:	f840 3b04 	str.w	r3, [r0], #4
    1e44:	f851 3b04 	ldr.w	r3, [r1], #4
    1e48:	f840 3b04 	str.w	r3, [r0], #4
    1e4c:	f851 3b04 	ldr.w	r3, [r1], #4
    1e50:	f840 3b04 	str.w	r3, [r0], #4
    1e54:	f851 3b04 	ldr.w	r3, [r1], #4
    1e58:	f840 3b04 	str.w	r3, [r0], #4
    1e5c:	f851 3b04 	ldr.w	r3, [r1], #4
    1e60:	f840 3b04 	str.w	r3, [r0], #4
    1e64:	f851 3b04 	ldr.w	r3, [r1], #4
    1e68:	f840 3b04 	str.w	r3, [r0], #4
    1e6c:	f851 3b04 	ldr.w	r3, [r1], #4
    1e70:	f840 3b04 	str.w	r3, [r0], #4
    1e74:	f851 3b04 	ldr.w	r3, [r1], #4
    1e78:	f840 3b04 	str.w	r3, [r0], #4
    1e7c:	f851 3b04 	ldr.w	r3, [r1], #4
    1e80:	f840 3b04 	str.w	r3, [r0], #4
    1e84:	f851 3b04 	ldr.w	r3, [r1], #4
    1e88:	f840 3b04 	str.w	r3, [r0], #4
    1e8c:	f851 3b04 	ldr.w	r3, [r1], #4
    1e90:	f840 3b04 	str.w	r3, [r0], #4
    1e94:	f851 3b04 	ldr.w	r3, [r1], #4
    1e98:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    1e9c:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    1e9e:	d2bd      	bcs.n	1e1c <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    1ea0:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    1ea2:	d311      	bcc.n	1ec8 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    1ea4:	f851 3b04 	ldr.w	r3, [r1], #4
    1ea8:	f840 3b04 	str.w	r3, [r0], #4
    1eac:	f851 3b04 	ldr.w	r3, [r1], #4
    1eb0:	f840 3b04 	str.w	r3, [r0], #4
    1eb4:	f851 3b04 	ldr.w	r3, [r1], #4
    1eb8:	f840 3b04 	str.w	r3, [r0], #4
    1ebc:	f851 3b04 	ldr.w	r3, [r1], #4
    1ec0:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    1ec4:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    1ec6:	d2ed      	bcs.n	1ea4 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    1ec8:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    1eca:	d305      	bcc.n	1ed8 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    1ecc:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    1ed0:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    1ed4:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    1ed6:	d2f9      	bcs.n	1ecc <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    1ed8:	3204      	adds	r2, #4
	beq	.Ldone
    1eda:	d008      	beq.n	1eee <memcpy+0xe2>

	lsls	r2, r2, #31
    1edc:	07d2      	lsls	r2, r2, #31
	itt ne
    1ede:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    1ee0:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    1ee4:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    1ee8:	d301      	bcc.n	1eee <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    1eea:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    1eec:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    1eee:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    1ef0:	4770      	bx	lr
    1ef2:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    1ef4:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    1ef6:	d313      	bcc.n	1f20 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    1ef8:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    1efa:	d08d      	beq.n	1e18 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    1efc:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    1f00:	d08a      	beq.n	1e18 <memcpy+0xc>

	rsb	r3, #4
    1f02:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    1f06:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    1f08:	07db      	lsls	r3, r3, #31
	itt ne
    1f0a:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    1f0c:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    1f10:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    1f14:	d380      	bcc.n	1e18 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    1f16:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    1f1a:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    1f1e:	e77b      	b.n	1e18 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    1f20:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    1f22:	d3d9      	bcc.n	1ed8 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    1f24:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    1f26:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    1f2a:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    1f2e:	d2f9      	bcs.n	1f24 <memcpy+0x118>

	ldrb	r3, [r1]
    1f30:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    1f32:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    1f34:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    1f36:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    1f38:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    1f3a:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    1f3c:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    1f3e:	4770      	bx	lr

00001f40 <ultoa>:
	int i=0, j;
    1f40:	f101 3cff 	add.w	ip, r1, #4294967295
{
    1f44:	b570      	push	{r4, r5, r6, lr}
		digit = val % radix;
    1f46:	4666      	mov	r6, ip
	int i=0, j;
    1f48:	2400      	movs	r4, #0
    1f4a:	e000      	b.n	1f4e <ultoa+0xe>
		i++;
    1f4c:	3401      	adds	r4, #1
		digit = val % radix;
    1f4e:	fbb0 f5f2 	udiv	r5, r0, r2
    1f52:	fb02 0315 	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1f56:	2b09      	cmp	r3, #9
    1f58:	f103 0e37 	add.w	lr, r3, #55	; 0x37
    1f5c:	f103 0330 	add.w	r3, r3, #48	; 0x30
    1f60:	fa5f fe8e 	uxtb.w	lr, lr
    1f64:	bf98      	it	ls
    1f66:	fa5f fe83 	uxtbls.w	lr, r3
		if (val == 0) break;
    1f6a:	4290      	cmp	r0, r2
		val /= radix;
    1f6c:	4628      	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1f6e:	f806 ef01 	strb.w	lr, [r6, #1]!
		if (val == 0) break;
    1f72:	d2eb      	bcs.n	1f4c <ultoa+0xc>
	buf[i + 1] = 0;
    1f74:	1c63      	adds	r3, r4, #1
    1f76:	2200      	movs	r2, #0
    1f78:	18c8      	adds	r0, r1, r3
    1f7a:	54ca      	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
    1f7c:	b17c      	cbz	r4, 1f9e <ultoa+0x5e>
		t = buf[j];
    1f7e:	4662      	mov	r2, ip
    1f80:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    1f84:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
    1f88:	eba1 030c 	sub.w	r3, r1, ip
    1f8c:	3202      	adds	r2, #2
		buf[j] = buf[i];
    1f8e:	f88c 6000 	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
    1f92:	3b01      	subs	r3, #1
    1f94:	1a52      	subs	r2, r2, r1
		buf[i] = t;
    1f96:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    1f98:	4423      	add	r3, r4
    1f9a:	429a      	cmp	r2, r3
    1f9c:	dbef      	blt.n	1f7e <ultoa+0x3e>
}
    1f9e:	4608      	mov	r0, r1
    1fa0:	bd70      	pop	{r4, r5, r6, pc}
    1fa2:	bf00      	nop

00001fa4 <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    1fa4:	2300      	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
    1fa6:	220f      	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    1fa8:	f248 2cb8 	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
    1fac:	4619      	mov	r1, r3
{
    1fae:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1fb0:	f44f 4470 	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1fb4:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1fb8:	f8a0 418c 	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1fbc:	f44f 4460 	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
    1fc0:	f8a0 218e 	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
    1fc4:	460a      	mov	r2, r1
	p->FFILT0 = 0;
    1fc6:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    1fca:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    1fce:	b29b      	uxth	r3, r3
    1fd0:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    1fd4:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1fd8:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
    1fdc:	3101      	adds	r1, #1
    1fde:	eb00 1343 	add.w	r3, r0, r3, lsl #5
    1fe2:	2904      	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1fe4:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1fe6:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    1fea:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    1fec:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    1fee:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    1ff0:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    1ff2:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
    1ff6:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    1ff8:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    1ffa:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    1ffc:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
    1ffe:	d1eb      	bne.n	1fd8 <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2000:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    2004:	b29b      	uxth	r3, r3
    2006:	f043 030f 	orr.w	r3, r3, #15
    200a:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    200e:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    2012:	b29b      	uxth	r3, r3
    2014:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    2018:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
    201c:	bd10      	pop	{r4, pc}
    201e:	bf00      	nop

00002020 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    2020:	4b37      	ldr	r3, [pc, #220]	; (2100 <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    2022:	4a38      	ldr	r2, [pc, #224]	; (2104 <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    2024:	6f99      	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    2026:	4838      	ldr	r0, [pc, #224]	; (2108 <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    2028:	f441 017f 	orr.w	r1, r1, #16711680	; 0xff0000
{
    202c:	b570      	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    202e:	6799      	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    2030:	f241 0601 	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    2034:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    2038:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    203c:	f243 0426 	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    2040:	430a      	orrs	r2, r1
    2042:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    2046:	f7ff ffad 	bl	1fa4 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    204a:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    204e:	f7ff ffa9 	bl	1fa4 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    2052:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    2056:	f7ff ffa5 	bl	1fa4 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    205a:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    205e:	f7ff ffa1 	bl	1fa4 <flexpwm_init>
	for (i=0; i < 4; i++) {
    2062:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    2064:	f5a0 1003 	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    2068:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
    206c:	4611      	mov	r1, r2
    206e:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    2072:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    2076:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    2078:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    207a:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    207c:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    207e:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    2082:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    2084:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    2086:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    208a:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    208c:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    208e:	d1ee      	bne.n	206e <pwm_init+0x4e>
    2090:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    2092:	481e      	ldr	r0, [pc, #120]	; (210c <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    2094:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    2098:	f241 0601 	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    209c:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    209e:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    20a2:	f243 0426 	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    20a6:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    20aa:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    20ae:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    20b0:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    20b2:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    20b4:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    20b6:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    20ba:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    20bc:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    20be:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    20c2:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    20c4:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    20c6:	d1ee      	bne.n	20a6 <pwm_init+0x86>
    20c8:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    20ca:	4811      	ldr	r0, [pc, #68]	; (2110 <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    20cc:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    20ce:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    20d2:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    20d4:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    20d8:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    20dc:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    20e0:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    20e4:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    20e6:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    20e8:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    20ea:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    20ec:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    20ee:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    20f0:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    20f2:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    20f6:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    20f8:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
    20fc:	d1ee      	bne.n	20dc <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    20fe:	bd70      	pop	{r4, r5, r6, pc}
    2100:	400fc000 	.word	0x400fc000
    2104:	fc030000 	.word	0xfc030000
    2108:	403dc000 	.word	0x403dc000
    210c:	401e0000 	.word	0x401e0000
    2110:	401e4000 	.word	0x401e4000

00002114 <unused_interrupt_vector>:
	__disable_irq();
    2114:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    2116:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
    211a:	4c52      	ldr	r4, [pc, #328]	; (2264 <unused_interrupt_vector+0x150>)
    211c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("tst lr, #4\nite eq\nmrseq %0, msp\nmrsne %0, psp\n" : "=r" (stack) :: "memory");
    2120:	f01e 0f04 	tst.w	lr, #4
    2124:	bf0c      	ite	eq
    2126:	f3ef 8208 	mrseq	r2, MSP
    212a:	f3ef 8209 	mrsne	r2, PSP
	info->cfsr = SCB_CFSR;
    212e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
    2132:	4e4d      	ldr	r6, [pc, #308]	; (2268 <unused_interrupt_vector+0x154>)
	while (p < end) {
    2134:	4d4d      	ldr	r5, [pc, #308]	; (226c <unused_interrupt_vector+0x158>)
	info->cfsr = SCB_CFSR;
    2136:	f8d3 0d28 	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
    213a:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
    213e:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
    2142:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
    2146:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
    214a:	e9c4 1324 	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
    214e:	6993      	ldr	r3, [r2, #24]
    2150:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    2154:	69d3      	ldr	r3, [r2, #28]
    2156:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    215a:	f000 f8d1 	bl	2300 <tempmonGetTemp>
    215e:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    2162:	f001 fb75 	bl	3850 <rtc_get>
	info->len = sizeof(*info) / 4;
    2166:	210b      	movs	r1, #11
	crc = 0xFFFFFFFF;
    2168:	f04f 32ff 	mov.w	r2, #4294967295
	info->time = rtc_get();
    216c:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    2170:	460b      	mov	r3, r1
    2172:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    2176:	493e      	ldr	r1, [pc, #248]	; (2270 <unused_interrupt_vector+0x15c>)
		crc ^= *p++;
    2178:	1d30      	adds	r0, r6, #4
    217a:	405a      	eors	r2, r3
    217c:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    217e:	f002 0301 	and.w	r3, r2, #1
    2182:	3c01      	subs	r4, #1
    2184:	fb01 f303 	mul.w	r3, r1, r3
    2188:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
    218c:	d1f7      	bne.n	217e <unused_interrupt_vector+0x6a>
	while (p < end) {
    218e:	42a8      	cmp	r0, r5
    2190:	d002      	beq.n	2198 <unused_interrupt_vector+0x84>
		crc ^= *p++;
    2192:	6873      	ldr	r3, [r6, #4]
    2194:	4606      	mov	r6, r0
    2196:	e7ef      	b.n	2178 <unused_interrupt_vector+0x64>
	info->crc = crc;
    2198:	4b32      	ldr	r3, [pc, #200]	; (2264 <unused_interrupt_vector+0x150>)
    219a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    219e:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    21a2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    21a6:	4930      	ldr	r1, [pc, #192]	; (2268 <unused_interrupt_vector+0x154>)
    21a8:	4a32      	ldr	r2, [pc, #200]	; (2274 <unused_interrupt_vector+0x160>)
    21aa:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
    21ae:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
    21b2:	f3bf 8f4f 	dsb	sy
	asm("isb");
    21b6:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    21ba:	4a2f      	ldr	r2, [pc, #188]	; (2278 <unused_interrupt_vector+0x164>)
	PIT_MCR = PIT_MCR_MDIS;
    21bc:	2502      	movs	r5, #2
    21be:	482f      	ldr	r0, [pc, #188]	; (227c <unused_interrupt_vector+0x168>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    21c0:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    21c2:	492f      	ldr	r1, [pc, #188]	; (2280 <unused_interrupt_vector+0x16c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    21c4:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    21c8:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    21ca:	6005      	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    21cc:	69d3      	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    21ce:	482d      	ldr	r0, [pc, #180]	; (2284 <unused_interrupt_vector+0x170>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    21d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    21d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    21d8:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    21da:	680b      	ldr	r3, [r1, #0]
    21dc:	4283      	cmp	r3, r0
    21de:	d83d      	bhi.n	225c <unused_interrupt_vector+0x148>
	PIT_MCR = 0;
    21e0:	4d26      	ldr	r5, [pc, #152]	; (227c <unused_interrupt_vector+0x168>)
    21e2:	2100      	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
    21e4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    21e8:	f04f 32ff 	mov.w	r2, #4294967295
	PIT_MCR = 0;
    21ec:	6029      	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    21ee:	2601      	movs	r6, #1
	PIT_TCTRL0 = 0;
    21f0:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    21f4:	4924      	ldr	r1, [pc, #144]	; (2288 <unused_interrupt_vector+0x174>)
    21f6:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    21fa:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
    21fe:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    2202:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    2206:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    220a:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    220e:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	count = 0;
    2212:	e001      	b.n	2218 <unused_interrupt_vector+0x104>
		usb_isr();
    2214:	f000 f966 	bl	24e4 <usb_isr>
		if (PIT_TFLG0) {
    2218:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    221c:	2b00      	cmp	r3, #0
    221e:	d0f9      	beq.n	2214 <unused_interrupt_vector+0x100>
			if (++count >= 80) break;  // reboot after 8 seconds
    2220:	3401      	adds	r4, #1
			PIT_TFLG0 = 1;
    2222:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    2226:	2c4f      	cmp	r4, #79	; 0x4f
    2228:	d9f4      	bls.n	2214 <unused_interrupt_vector+0x100>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    222a:	4b18      	ldr	r3, [pc, #96]	; (228c <unused_interrupt_vector+0x178>)
	USB1_USBCMD = USB_USBCMD_RST;
    222c:	2002      	movs	r0, #2
    222e:	4918      	ldr	r1, [pc, #96]	; (2290 <unused_interrupt_vector+0x17c>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    2230:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
    2234:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    2238:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    223a:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    223e:	b93b      	cbnz	r3, 2250 <unused_interrupt_vector+0x13c>
	SRC_GPR5 = 0x0BAD00F1;
    2240:	4814      	ldr	r0, [pc, #80]	; (2294 <unused_interrupt_vector+0x180>)
    2242:	4915      	ldr	r1, [pc, #84]	; (2298 <unused_interrupt_vector+0x184>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    2244:	4a0d      	ldr	r2, [pc, #52]	; (227c <unused_interrupt_vector+0x168>)
	SRC_GPR5 = 0x0BAD00F1;
    2246:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    2248:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
    224c:	2b00      	cmp	r3, #0
    224e:	d0fa      	beq.n	2246 <unused_interrupt_vector+0x132>
	SCB_AIRCR = 0x05FA0004;
    2250:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    2254:	4a11      	ldr	r2, [pc, #68]	; (229c <unused_interrupt_vector+0x188>)
    2256:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    225a:	e7fe      	b.n	225a <unused_interrupt_vector+0x146>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    225c:	f001 f980 	bl	3560 <set_arm_clock>
    2260:	e7be      	b.n	21e0 <unused_interrupt_vector+0xcc>
    2262:	bf00      	nop
    2264:	2027ff00 	.word	0x2027ff00
    2268:	2027ff80 	.word	0x2027ff80
    226c:	2027ffa8 	.word	0x2027ffa8
    2270:	edb88320 	.word	0xedb88320
    2274:	2027ffa0 	.word	0x2027ffa0
    2278:	400fc000 	.word	0x400fc000
    227c:	40084000 	.word	0x40084000
    2280:	20000fa4 	.word	0x20000fa4
    2284:	0bcd3d80 	.word	0x0bcd3d80
    2288:	00249f00 	.word	0x00249f00
    228c:	400d9000 	.word	0x400d9000
    2290:	402e0000 	.word	0x402e0000
    2294:	400f8000 	.word	0x400f8000
    2298:	0bad00f1 	.word	0x0bad00f1
    229c:	05fa0004 	.word	0x05fa0004

000022a0 <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
    22a0:	490a      	ldr	r1, [pc, #40]	; (22cc <_sbrk+0x2c>)
    22a2:	680a      	ldr	r2, [r1, #0]
        if (incr != 0) {
    22a4:	b138      	cbz	r0, 22b6 <_sbrk+0x16>
{
    22a6:	b508      	push	{r3, lr}
                if (prev + incr > (char *)&_heap_end) {
    22a8:	1813      	adds	r3, r2, r0
    22aa:	4809      	ldr	r0, [pc, #36]	; (22d0 <_sbrk+0x30>)
    22ac:	4283      	cmp	r3, r0
    22ae:	d804      	bhi.n	22ba <_sbrk+0x1a>
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    22b0:	4610      	mov	r0, r2
                __brkval = prev + incr;
    22b2:	600b      	str	r3, [r1, #0]
}
    22b4:	bd08      	pop	{r3, pc}
    22b6:	4610      	mov	r0, r2
    22b8:	4770      	bx	lr
                        errno = ENOMEM;
    22ba:	f002 fbab 	bl	4a14 <__errno>
    22be:	230c      	movs	r3, #12
                        return (void *)-1;
    22c0:	f04f 32ff 	mov.w	r2, #4294967295
                        errno = ENOMEM;
    22c4:	6003      	str	r3, [r0, #0]
}
    22c6:	4610      	mov	r0, r2
    22c8:	bd08      	pop	{r3, pc}
    22ca:	bf00      	nop
    22cc:	20001080 	.word	0x20001080
    22d0:	20280000 	.word	0x20280000

000022d4 <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
    22d4:	2000      	movs	r0, #0
    22d6:	4770      	bx	lr

000022d8 <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
    22d8:	f04f 30ff 	mov.w	r0, #4294967295
    22dc:	4770      	bx	lr
    22de:	bf00      	nop

000022e0 <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
    22e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
    22e4:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
    22e6:	604b      	str	r3, [r1, #4]
}
    22e8:	4770      	bx	lr
    22ea:	bf00      	nop

000022ec <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
    22ec:	2001      	movs	r0, #1
    22ee:	4770      	bx	lr

000022f0 <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
    22f0:	f04f 30ff 	mov.w	r0, #4294967295
    22f4:	4770      	bx	lr
    22f6:	bf00      	nop

000022f8 <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    22f8:	bf30      	wfi
    22fa:	e7fd      	b.n	22f8 <abort>

000022fc <Panic_Temp_isr>:
  unused_interrupt_vector();
    22fc:	f7ff bf0a 	b.w	2114 <unused_interrupt_vector>

00002300 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    2300:	4a12      	ldr	r2, [pc, #72]	; (234c <tempmonGetTemp+0x4c>)
    2302:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    2306:	075b      	lsls	r3, r3, #29
    2308:	d5fb      	bpl.n	2302 <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    230a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    230e:	4810      	ldr	r0, [pc, #64]	; (2350 <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    2310:	f3c3 230b 	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    2314:	490f      	ldr	r1, [pc, #60]	; (2354 <tempmonGetTemp+0x54>)
    2316:	ed90 7a00 	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    231a:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    231e:	ed91 6a00 	vldr	s12, [r1]
    2322:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    2326:	4a0c      	ldr	r2, [pc, #48]	; (2358 <tempmonGetTemp+0x58>)
    2328:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    232c:	4b0b      	ldr	r3, [pc, #44]	; (235c <tempmonGetTemp+0x5c>)
    232e:	edd2 6a00 	vldr	s13, [r2]
    2332:	ee77 7ac7 	vsub.f32	s15, s15, s14
    2336:	ed93 7a00 	vldr	s14, [r3]
    233a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    233e:	ee67 7a86 	vmul.f32	s15, s15, s12
    2342:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
    2346:	ee37 0a40 	vsub.f32	s0, s14, s0
    234a:	4770      	bx	lr
    234c:	400d8100 	.word	0x400d8100
    2350:	200020cc 	.word	0x200020cc
    2354:	200020d4 	.word	0x200020d4
    2358:	200020d8 	.word	0x200020d8
    235c:	200020d0 	.word	0x200020d0

00002360 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    2360:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
    2362:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
    2364:	b11b      	cbz	r3, 236e <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    2366:	6853      	ldr	r3, [r2, #4]
    2368:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    236c:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    236e:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    2370:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    2372:	b33c      	cbz	r4, 23c4 <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    2374:	4b1a      	ldr	r3, [pc, #104]	; (23e0 <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
    2376:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    2378:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    237c:	420c      	tst	r4, r1
    237e:	d11d      	bne.n	23bc <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    2380:	4e18      	ldr	r6, [pc, #96]	; (23e4 <schedule_transfer+0x84>)
    2382:	6877      	ldr	r7, [r6, #4]
    2384:	e004      	b.n	2390 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    2386:	6874      	ldr	r4, [r6, #4]
    2388:	1be4      	subs	r4, r4, r7
    238a:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    238e:	d20b      	bcs.n	23a8 <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    2390:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    2394:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    2398:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    239c:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    23a0:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    23a4:	0464      	lsls	r4, r4, #17
    23a6:	d5ee      	bpl.n	2386 <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    23a8:	400d      	ands	r5, r1
    23aa:	d107      	bne.n	23bc <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    23ac:	4c0c      	ldr	r4, [pc, #48]	; (23e0 <schedule_transfer+0x80>)
		endpoint->status = 0;
    23ae:	e9c0 2502 	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    23b2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    23b6:	430b      	orrs	r3, r1
    23b8:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    23bc:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    23be:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    23c0:	bcf0      	pop	{r4, r5, r6, r7}
    23c2:	4770      	bx	lr
	USB1_ENDPTPRIME |= epmask;
    23c4:	4d06      	ldr	r5, [pc, #24]	; (23e0 <schedule_transfer+0x80>)
	endpoint->status = 0;
    23c6:	e9c0 2402 	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    23ca:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
    23ce:	430b      	orrs	r3, r1
    23d0:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    23d4:	6302      	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
    23d6:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    23d8:	b662      	cpsie	i
}
    23da:	bcf0      	pop	{r4, r5, r6, r7}
    23dc:	4770      	bx	lr
    23de:	bf00      	nop
    23e0:	402e0000 	.word	0x402e0000
    23e4:	e0001000 	.word	0xe0001000

000023e8 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    23e8:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    23ea:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
    23ec:	b19d      	cbz	r5, 2416 <run_callbacks+0x2e>
    23ee:	4606      	mov	r6, r0
    23f0:	462a      	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    23f2:	2400      	movs	r4, #0
    23f4:	e003      	b.n	23fe <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    23f6:	6812      	ldr	r2, [r2, #0]
		count++;
    23f8:	3401      	adds	r4, #1
		if ((uint32_t)t == 1) {
    23fa:	2a01      	cmp	r2, #1
    23fc:	d00c      	beq.n	2418 <run_callbacks+0x30>
		if (t->status & (1<<7)) {
    23fe:	6853      	ldr	r3, [r2, #4]
    2400:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    2404:	d0f7      	beq.n	23f6 <run_callbacks+0xe>
			ep->first_transfer = t;
    2406:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    2408:	b12c      	cbz	r4, 2416 <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
    240a:	4628      	mov	r0, r5
		ep->callback_function(first);
    240c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
    240e:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
    2410:	4798      	blx	r3
	while (count) {
    2412:	3c01      	subs	r4, #1
    2414:	d1f9      	bne.n	240a <run_callbacks+0x22>
		first = next;
		count--;
	}
}
    2416:	bd70      	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
    2418:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
			break;
    241c:	e7f4      	b.n	2408 <run_callbacks+0x20>
    241e:	bf00      	nop

00002420 <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    2420:	b430      	push	{r4, r5}
	if (len > 0) {
    2422:	b9d9      	cbnz	r1, 245c <endpoint0_transmit.constprop.0+0x3c>
    2424:	4c1f      	ldr	r4, [pc, #124]	; (24a4 <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
    2426:	4b20      	ldr	r3, [pc, #128]	; (24a8 <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
    2428:	2100      	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    242a:	4a20      	ldr	r2, [pc, #128]	; (24ac <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
    242c:	2501      	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    242e:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    2432:	6099      	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    2434:	601d      	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
    2436:	e9c4 3102 	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    243a:	2480      	movs	r4, #128	; 0x80
    243c:	605c      	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    243e:	f8c2 01bc 	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    2442:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    2446:	481a      	ldr	r0, [pc, #104]	; (24b0 <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
    2448:	432b      	orrs	r3, r5
    244a:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    244e:	6001      	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
    2450:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    2454:	2b00      	cmp	r3, #0
    2456:	d1fb      	bne.n	2450 <endpoint0_transmit.constprop.0+0x30>
}
    2458:	bc30      	pop	{r4, r5}
    245a:	4770      	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    245c:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    245e:	4b15      	ldr	r3, [pc, #84]	; (24b4 <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    2460:	4c10      	ldr	r4, [pc, #64]	; (24a4 <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
    2462:	2501      	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    2464:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    2468:	6098      	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
    246a:	4a10      	ldr	r2, [pc, #64]	; (24ac <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    246c:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    246e:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    2472:	601d      	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    2474:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    2476:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    247a:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
    247c:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    247e:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    2482:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    2486:	6159      	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
    2488:	2100      	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
    248a:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    248c:	64e1      	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    248e:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    2492:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    2496:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    249a:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    249e:	2b00      	cmp	r3, #0
    24a0:	d1fb      	bne.n	249a <endpoint0_transmit.constprop.0+0x7a>
    24a2:	e7c0      	b.n	2426 <endpoint0_transmit.constprop.0+0x6>
    24a4:	20000000 	.word	0x20000000
    24a8:	20001ac0 	.word	0x20001ac0
    24ac:	402e0000 	.word	0x402e0000
    24b0:	20002060 	.word	0x20002060
    24b4:	20001ae0 	.word	0x20001ae0

000024b8 <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    24b8:	4908      	ldr	r1, [pc, #32]	; (24dc <usb_stop_sof_interrupts+0x24>)
    24ba:	2201      	movs	r2, #1
    24bc:	780b      	ldrb	r3, [r1, #0]
    24be:	fa02 f000 	lsl.w	r0, r2, r0
    24c2:	ea23 0000 	bic.w	r0, r3, r0
    24c6:	7008      	strb	r0, [r1, #0]
	if (sof_usage == 0) {
    24c8:	b930      	cbnz	r0, 24d8 <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    24ca:	4a05      	ldr	r2, [pc, #20]	; (24e0 <usb_stop_sof_interrupts+0x28>)
    24cc:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
    24d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    24d4:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
    24d8:	4770      	bx	lr
    24da:	bf00      	nop
    24dc:	20002113 	.word	0x20002113
    24e0:	402e0000 	.word	0x402e0000

000024e4 <usb_isr>:
{
    24e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
    24e8:	4c97      	ldr	r4, [pc, #604]	; (2748 <usb_isr+0x264>)
{
    24ea:	b083      	sub	sp, #12
	uint32_t status = USB1_USBSTS;
    24ec:	f8d4 7144 	ldr.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    24f0:	07fb      	lsls	r3, r7, #31
	USB1_USBSTS = status;
    24f2:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    24f6:	d553      	bpl.n	25a0 <usb_isr+0xbc>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    24f8:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    24fc:	2a00      	cmp	r2, #0
    24fe:	d04a      	beq.n	2596 <usb_isr+0xb2>
    2500:	4e92      	ldr	r6, [pc, #584]	; (274c <usb_isr+0x268>)
    2502:	f8df a260 	ldr.w	sl, [pc, #608]	; 2764 <usb_isr+0x280>
		uint32_t addr = (uint32_t)data;
    2506:	f8df 9274 	ldr.w	r9, [pc, #628]	; 277c <usb_isr+0x298>
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    250a:	f8df b274 	ldr.w	fp, [pc, #628]	; 2780 <usb_isr+0x29c>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    250e:	f8df 8274 	ldr.w	r8, [pc, #628]	; 2784 <usb_isr+0x2a0>
			USB1_ENDPTSETUPSTAT = setupstatus;
    2512:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
    2516:	e9d6 200a 	ldrd	r2, r0, [r6, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    251a:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    251e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    2522:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    2526:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    252a:	049d      	lsls	r5, r3, #18
    252c:	d5f5      	bpl.n	251a <usb_isr+0x36>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    252e:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    2532:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    2536:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    253a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    253e:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    2542:	f8d4 51b4 	ldr.w	r5, [r4, #436]	; 0x1b4
    2546:	f015 1501 	ands.w	r5, r5, #65537	; 0x10001
    254a:	d1fa      	bne.n	2542 <usb_isr+0x5e>
			endpoint0_notify_mask = 0;
    254c:	b293      	uxth	r3, r2
	setup.bothwords = setupdata;
    254e:	4684      	mov	ip, r0
			endpoint0_notify_mask = 0;
    2550:	f8ca 5000 	str.w	r5, [sl]
	switch (setup.wRequestAndType) {
    2554:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    2558:	f000 81cf 	beq.w	28fa <usb_isr+0x416>
    255c:	f200 80db 	bhi.w	2716 <usb_isr+0x232>
    2560:	f240 3102 	movw	r1, #770	; 0x302
    2564:	428b      	cmp	r3, r1
    2566:	f000 81e7 	beq.w	2938 <usb_isr+0x454>
    256a:	f200 809a 	bhi.w	26a2 <usb_isr+0x1be>
    256e:	2b82      	cmp	r3, #130	; 0x82
    2570:	f000 81cb 	beq.w	290a <usb_isr+0x426>
    2574:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    2578:	f040 808a 	bne.w	2690 <usb_isr+0x1ac>
		if (endpoint > 7) break;
    257c:	f010 0f78 	tst.w	r0, #120	; 0x78
    2580:	b283      	uxth	r3, r0
    2582:	f000 8203 	beq.w	298c <usb_isr+0x4a8>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    2586:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    258a:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    258e:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    2592:	2a00      	cmp	r2, #0
    2594:	d1bd      	bne.n	2512 <usb_isr+0x2e>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    2596:	4a6c      	ldr	r2, [pc, #432]	; (2748 <usb_isr+0x264>)
    2598:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    259c:	2b00      	cmp	r3, #0
    259e:	d142      	bne.n	2626 <usb_isr+0x142>
	if (status & USB_USBSTS_URI) { // page 3164
    25a0:	067e      	lsls	r6, r7, #25
    25a2:	d516      	bpl.n	25d2 <usb_isr+0xee>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    25a4:	4b68      	ldr	r3, [pc, #416]	; (2748 <usb_isr+0x264>)
    25a6:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    25aa:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    25ae:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    25b2:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    25b6:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    25ba:	2c00      	cmp	r4, #0
    25bc:	d1fb      	bne.n	25b6 <usb_isr+0xd2>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    25be:	f04f 32ff 	mov.w	r2, #4294967295
    25c2:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    25c6:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    25ca:	f000 fd2d 	bl	3028 <usb_serial_reset>
		endpointN_notify_mask = 0;
    25ce:	4b60      	ldr	r3, [pc, #384]	; (2750 <usb_isr+0x26c>)
    25d0:	601c      	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
    25d2:	01fc      	lsls	r4, r7, #7
    25d4:	d503      	bpl.n	25de <usb_isr+0xfa>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    25d6:	4b5f      	ldr	r3, [pc, #380]	; (2754 <usb_isr+0x270>)
    25d8:	681b      	ldr	r3, [r3, #0]
    25da:	b103      	cbz	r3, 25de <usb_isr+0xfa>
    25dc:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
    25de:	01b8      	lsls	r0, r7, #6
    25e0:	d503      	bpl.n	25ea <usb_isr+0x106>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    25e2:	4b5d      	ldr	r3, [pc, #372]	; (2758 <usb_isr+0x274>)
    25e4:	681b      	ldr	r3, [r3, #0]
    25e6:	b103      	cbz	r3, 25ea <usb_isr+0x106>
    25e8:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
    25ea:	0779      	lsls	r1, r7, #29
    25ec:	d508      	bpl.n	2600 <usb_isr+0x11c>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    25ee:	4b56      	ldr	r3, [pc, #344]	; (2748 <usb_isr+0x264>)
    25f0:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    25f4:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    25f8:	d047      	beq.n	268a <usb_isr+0x1a6>
			usb_high_speed = 1;
    25fa:	4b58      	ldr	r3, [pc, #352]	; (275c <usb_isr+0x278>)
    25fc:	2201      	movs	r2, #1
    25fe:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    2600:	4b51      	ldr	r3, [pc, #324]	; (2748 <usb_isr+0x264>)
    2602:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
    2606:	061a      	lsls	r2, r3, #24
    2608:	d50a      	bpl.n	2620 <usb_isr+0x13c>
    260a:	063b      	lsls	r3, r7, #24
    260c:	d508      	bpl.n	2620 <usb_isr+0x13c>
		if (usb_reboot_timer) {
    260e:	4a54      	ldr	r2, [pc, #336]	; (2760 <usb_isr+0x27c>)
    2610:	7813      	ldrb	r3, [r2, #0]
    2612:	b12b      	cbz	r3, 2620 <usb_isr+0x13c>
			if (--usb_reboot_timer == 0) {
    2614:	3b01      	subs	r3, #1
    2616:	b2db      	uxtb	r3, r3
    2618:	7013      	strb	r3, [r2, #0]
    261a:	2b00      	cmp	r3, #0
    261c:	f000 8272 	beq.w	2b04 <usb_isr+0x620>
}
    2620:	b003      	add	sp, #12
    2622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (completestatus & endpoint0_notify_mask) {
    2626:	494f      	ldr	r1, [pc, #316]	; (2764 <usb_isr+0x280>)
			USB1_ENDPTCOMPLETE = completestatus;
    2628:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    262c:	6808      	ldr	r0, [r1, #0]
    262e:	4203      	tst	r3, r0
    2630:	f040 81d1 	bne.w	29d6 <usb_isr+0x4f2>
			completestatus &= endpointN_notify_mask;
    2634:	4a46      	ldr	r2, [pc, #280]	; (2750 <usb_isr+0x26c>)
    2636:	6814      	ldr	r4, [r2, #0]
			if (completestatus) {
    2638:	401c      	ands	r4, r3
    263a:	d0b1      	beq.n	25a0 <usb_isr+0xbc>
				while (tx) {
    263c:	ea5f 4814 	movs.w	r8, r4, lsr #16
    2640:	d010      	beq.n	2664 <usb_isr+0x180>
    2642:	4e42      	ldr	r6, [pc, #264]	; (274c <usb_isr+0x268>)
					tx &= ~(1<<p);
    2644:	f04f 0901 	mov.w	r9, #1
					int p=__builtin_ctz(tx);
    2648:	fa98 f5a8 	rbit	r5, r8
    264c:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    2650:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					tx &= ~(1<<p);
    2654:	fa09 f505 	lsl.w	r5, r9, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    2658:	3040      	adds	r0, #64	; 0x40
    265a:	f7ff fec5 	bl	23e8 <run_callbacks>
				while (tx) {
    265e:	ea38 0805 	bics.w	r8, r8, r5
    2662:	d1f1      	bne.n	2648 <usb_isr+0x164>
				uint32_t rx = completestatus & 0xffff;
    2664:	b2a4      	uxth	r4, r4
				while(rx) {
    2666:	2c00      	cmp	r4, #0
    2668:	d09a      	beq.n	25a0 <usb_isr+0xbc>
    266a:	4e38      	ldr	r6, [pc, #224]	; (274c <usb_isr+0x268>)
					rx &= ~(1<<p);
    266c:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(rx);
    2670:	fa94 f5a4 	rbit	r5, r4
    2674:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    2678:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					rx &= ~(1<<p);
    267c:	fa08 f505 	lsl.w	r5, r8, r5
					run_callbacks(endpoint_queue_head + p * 2);
    2680:	f7ff feb2 	bl	23e8 <run_callbacks>
				while(rx) {
    2684:	43ac      	bics	r4, r5
    2686:	d1f3      	bne.n	2670 <usb_isr+0x18c>
    2688:	e78a      	b.n	25a0 <usb_isr+0xbc>
			usb_high_speed = 0;
    268a:	4a34      	ldr	r2, [pc, #208]	; (275c <usb_isr+0x278>)
    268c:	7013      	strb	r3, [r2, #0]
    268e:	e7b7      	b.n	2600 <usb_isr+0x11c>
	switch (setup.wRequestAndType) {
    2690:	2b80      	cmp	r3, #128	; 0x80
    2692:	f47f af78 	bne.w	2586 <usb_isr+0xa2>
		reply_buffer[0] = 0;
    2696:	4834      	ldr	r0, [pc, #208]	; (2768 <usb_isr+0x284>)
		endpoint0_transmit(reply_buffer, 2, 0);
    2698:	2102      	movs	r1, #2
		reply_buffer[0] = 0;
    269a:	8005      	strh	r5, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    269c:	f7ff fec0 	bl	2420 <endpoint0_transmit.constprop.0>
		return;
    26a0:	e775      	b.n	258e <usb_isr+0xaa>
	switch (setup.wRequestAndType) {
    26a2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    26a6:	f000 810b 	beq.w	28c0 <usb_isr+0x3dc>
    26aa:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
    26ae:	2b01      	cmp	r3, #1
    26b0:	f63f af69 	bhi.w	2586 <usb_isr+0xa2>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    26b4:	4b2d      	ldr	r3, [pc, #180]	; (276c <usb_isr+0x288>)
    26b6:	685d      	ldr	r5, [r3, #4]
    26b8:	2d00      	cmp	r5, #0
    26ba:	f43f af64 	beq.w	2586 <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    26be:	fa1f fc8c 	uxth.w	ip, ip
    26c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    26c6:	e004      	b.n	26d2 <usb_isr+0x1ee>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    26c8:	691d      	ldr	r5, [r3, #16]
    26ca:	330c      	adds	r3, #12
    26cc:	2d00      	cmp	r5, #0
    26ce:	f43f af5a 	beq.w	2586 <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    26d2:	881a      	ldrh	r2, [r3, #0]
    26d4:	4572      	cmp	r2, lr
    26d6:	d1f7      	bne.n	26c8 <usb_isr+0x1e4>
    26d8:	885a      	ldrh	r2, [r3, #2]
    26da:	4562      	cmp	r2, ip
    26dc:	d1f4      	bne.n	26c8 <usb_isr+0x1e4>
				if ((setup.wValue >> 8) == 3) {
    26de:	ea4f 221e 	mov.w	r2, lr, lsr #8
    26e2:	2a03      	cmp	r2, #3
    26e4:	f000 81a5 	beq.w	2a32 <usb_isr+0x54e>
					datalen = list->length;
    26e8:	891a      	ldrh	r2, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    26ea:	0c00      	lsrs	r0, r0, #16
    26ec:	4282      	cmp	r2, r0
    26ee:	bf28      	it	cs
    26f0:	4602      	movcs	r2, r0
				if (setup.wValue == 0x200) {
    26f2:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    26f6:	f040 81a1 	bne.w	2a3c <usb_isr+0x558>
					if (usb_high_speed) src = usb_config_descriptor_480;
    26fa:	4b18      	ldr	r3, [pc, #96]	; (275c <usb_isr+0x278>)
    26fc:	491c      	ldr	r1, [pc, #112]	; (2770 <usb_isr+0x28c>)
    26fe:	7818      	ldrb	r0, [r3, #0]
    2700:	4b1c      	ldr	r3, [pc, #112]	; (2774 <usb_isr+0x290>)
					memcpy(usb_descriptor_buffer, src, datalen);
    2702:	9201      	str	r2, [sp, #4]
    2704:	2800      	cmp	r0, #0
    2706:	bf18      	it	ne
    2708:	4619      	movne	r1, r3
    270a:	481b      	ldr	r0, [pc, #108]	; (2778 <usb_isr+0x294>)
    270c:	f7ff fb7e 	bl	1e0c <memcpy>
    2710:	4d19      	ldr	r5, [pc, #100]	; (2778 <usb_isr+0x294>)
    2712:	9a01      	ldr	r2, [sp, #4]
    2714:	e1e1      	b.n	2ada <usb_isr+0x5f6>
	switch (setup.wRequestAndType) {
    2716:	f242 2121 	movw	r1, #8737	; 0x2221
    271a:	428b      	cmp	r3, r1
    271c:	d07c      	beq.n	2818 <usb_isr+0x334>
    271e:	d933      	bls.n	2788 <usb_isr+0x2a4>
    2720:	f242 3121 	movw	r1, #8993	; 0x2321
    2724:	428b      	cmp	r3, r1
    2726:	f000 8081 	beq.w	282c <usb_isr+0x348>
    272a:	f64f 01c0 	movw	r1, #63680	; 0xf8c0
    272e:	428b      	cmp	r3, r1
    2730:	f47f af29 	bne.w	2586 <usb_isr+0xa2>
		if ((setup.wIndex & 0xFF00) != 0) break; // 1=Genre, 4=Compat ID, 5=Properties
    2734:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
    2738:	b283      	uxth	r3, r0
    273a:	f47f af24 	bne.w	2586 <usb_isr+0xa2>
		setup.wIndex |= 0xEE00; // alter wIndex and treat as normal USB descriptor
    273e:	f443 436e 	orr.w	r3, r3, #60928	; 0xee00
    2742:	f363 0c0f 	bfi	ip, r3, #0, #16
    2746:	e7b5      	b.n	26b4 <usb_isr+0x1d0>
    2748:	402e0000 	.word	0x402e0000
    274c:	20000000 	.word	0x20000000
    2750:	20002064 	.word	0x20002064
    2754:	200020f8 	.word	0x200020f8
    2758:	200020fc 	.word	0x200020fc
    275c:	20002119 	.word	0x20002119
    2760:	2000211a 	.word	0x2000211a
    2764:	20002060 	.word	0x20002060
    2768:	20002094 	.word	0x20002094
    276c:	20000ddc 	.word	0x20000ddc
    2770:	60001eb8 	.word	0x60001eb8
    2774:	60001f1c 	.word	0x60001f1c
    2778:	20200000 	.word	0x20200000
    277c:	20002058 	.word	0x20002058
    2780:	b8c6cf5d 	.word	0xb8c6cf5d
    2784:	402e01c0 	.word	0x402e01c0
	switch (setup.wRequestAndType) {
    2788:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    278c:	d066      	beq.n	285c <usb_isr+0x378>
    278e:	f242 0121 	movw	r1, #8225	; 0x2021
    2792:	428b      	cmp	r3, r1
    2794:	f47f aef7 	bne.w	2586 <usb_isr+0xa2>
		if (setup.wLength != 7) break;
    2798:	0c03      	lsrs	r3, r0, #16
    279a:	2b07      	cmp	r3, #7
    279c:	f47f aef3 	bne.w	2586 <usb_isr+0xa2>
		endpoint0_transfer_data.next = 1;
    27a0:	4bb2      	ldr	r3, [pc, #712]	; (2a6c <usb_isr+0x588>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
    27a2:	49b3      	ldr	r1, [pc, #716]	; (2a70 <usb_isr+0x58c>)
		endpoint_queue_head[0].status = 0;
    27a4:	60f5      	str	r5, [r6, #12]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    27a6:	60d9      	str	r1, [r3, #12]
		endpoint0_setupdata.bothwords = setupdata;
    27a8:	49b2      	ldr	r1, [pc, #712]	; (2a74 <usb_isr+0x590>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    27aa:	60b3      	str	r3, [r6, #8]
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    27ac:	f8c3 9008 	str.w	r9, [r3, #8]
		endpoint0_setupdata.bothwords = setupdata;
    27b0:	e9c1 2000 	strd	r2, r0, [r1]
		endpoint0_transfer_data.next = 1;
    27b4:	2201      	movs	r2, #1
    27b6:	601a      	str	r2, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    27b8:	4aaf      	ldr	r2, [pc, #700]	; (2a78 <usb_isr+0x594>)
    27ba:	605a      	str	r2, [r3, #4]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    27bc:	4aaf      	ldr	r2, [pc, #700]	; (2a7c <usb_isr+0x598>)
    27be:	611a      	str	r2, [r3, #16]
		USB1_ENDPTPRIME |= (1<<0);
    27c0:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
    27c4:	f041 0101 	orr.w	r1, r1, #1
    27c8:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.pointer3 = addr + 12288;
    27cc:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    27d0:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    27d4:	6159      	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    27d6:	619a      	str	r2, [r3, #24]
		while (USB1_ENDPTPRIME) ;
    27d8:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    27dc:	2b00      	cmp	r3, #0
    27de:	d1fb      	bne.n	27d8 <usb_isr+0x2f4>
	endpoint0_transfer_ack.next = 1;
    27e0:	4aa7      	ldr	r2, [pc, #668]	; (2a80 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    27e2:	64f3      	str	r3, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    27e4:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
    27e6:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    27e8:	64b2      	str	r2, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    27ea:	6013      	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    27ec:	f248 0380 	movw	r3, #32896	; 0x8080
    27f0:	6053      	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    27f2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    27f6:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    27fa:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    27fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    2802:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    2806:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    280a:	f8ca 3000 	str.w	r3, [sl]
	while (USB1_ENDPTPRIME) ;
    280e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2812:	2b00      	cmp	r3, #0
    2814:	d1fb      	bne.n	280e <usb_isr+0x32a>
    2816:	e6ba      	b.n	258e <usb_isr+0xaa>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    2818:	b280      	uxth	r0, r0
    281a:	b938      	cbnz	r0, 282c <usb_isr+0x348>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    281c:	4b99      	ldr	r3, [pc, #612]	; (2a84 <usb_isr+0x5a0>)
			usb_cdc_line_rtsdtr = setup.wValue;
    281e:	f3c2 4207 	ubfx	r2, r2, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    2822:	6819      	ldr	r1, [r3, #0]
    2824:	4b98      	ldr	r3, [pc, #608]	; (2a88 <usb_isr+0x5a4>)
    2826:	6019      	str	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    2828:	4b98      	ldr	r3, [pc, #608]	; (2a8c <usb_isr+0x5a8>)
    282a:	701a      	strb	r2, [r3, #0]
	endpoint0_transfer_ack.next = 1;
    282c:	4b94      	ldr	r3, [pc, #592]	; (2a80 <usb_isr+0x59c>)
	endpoint0_transfer_ack.pointer0 = 0;
    282e:	2200      	movs	r2, #0
    2830:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
    2832:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    2834:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    2836:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    2838:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    283a:	2280      	movs	r2, #128	; 0x80
    283c:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    283e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    2842:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2846:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    284a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    284e:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    2852:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2856:	2b00      	cmp	r3, #0
    2858:	d1fb      	bne.n	2852 <usb_isr+0x36e>
    285a:	e698      	b.n	258e <usb_isr+0xaa>
		usb_configuration = setup.wValue;
    285c:	f3c2 4207 	ubfx	r2, r2, #16, #8
    2860:	4b8b      	ldr	r3, [pc, #556]	; (2a90 <usb_isr+0x5ac>)
    2862:	701a      	strb	r2, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    2864:	4b8b      	ldr	r3, [pc, #556]	; (2a94 <usb_isr+0x5b0>)
    2866:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    286a:	4b8b      	ldr	r3, [pc, #556]	; (2a98 <usb_isr+0x5b4>)
    286c:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    2870:	4b8a      	ldr	r3, [pc, #552]	; (2a9c <usb_isr+0x5b8>)
    2872:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		usb_serial_configure();
    2876:	f000 fbd9 	bl	302c <usb_serial_configure>
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
    287a:	2280      	movs	r2, #128	; 0x80
    287c:	4629      	mov	r1, r5
    287e:	4888      	ldr	r0, [pc, #544]	; (2aa0 <usb_isr+0x5bc>)
    2880:	f001 ff92 	bl	47a8 <memset>
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    2884:	4b87      	ldr	r3, [pc, #540]	; (2aa4 <usb_isr+0x5c0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2886:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    2888:	f8c6 b0a0 	str.w	fp, [r6, #160]	; 0xa0
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    288c:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
	endpoint0_transfer_ack.next = 1;
    2890:	4b7b      	ldr	r3, [pc, #492]	; (2a80 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    2892:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2894:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.next = 1;
    2896:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    2898:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.pointer0 = 0;
    289a:	609d      	str	r5, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    289c:	601a      	str	r2, [r3, #0]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    289e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    28a2:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    28a6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    28aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    28ae:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    28b2:	f8ca 5000 	str.w	r5, [sl]
	while (USB1_ENDPTPRIME) ;
    28b6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    28ba:	2b00      	cmp	r3, #0
    28bc:	d1fb      	bne.n	28b6 <usb_isr+0x3d2>
    28be:	e666      	b.n	258e <usb_isr+0xaa>
	endpoint0_transfer_ack.next = 1;
    28c0:	4b6f      	ldr	r3, [pc, #444]	; (2a80 <usb_isr+0x59c>)
    28c2:	2101      	movs	r1, #1
	endpoint_queue_head[1].status = 0;
    28c4:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    28c6:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    28c8:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    28ca:	609d      	str	r5, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    28cc:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    28ce:	6059      	str	r1, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    28d0:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    28d4:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    28d8:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    28dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    28e0:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    28e4:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    28e8:	2b00      	cmp	r3, #0
    28ea:	d1fb      	bne.n	28e4 <usb_isr+0x400>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    28ec:	0c13      	lsrs	r3, r2, #16
    28ee:	065b      	lsls	r3, r3, #25
    28f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    28f4:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		return;
    28f8:	e649      	b.n	258e <usb_isr+0xaa>
		reply_buffer[0] = usb_configuration;
    28fa:	4b65      	ldr	r3, [pc, #404]	; (2a90 <usb_isr+0x5ac>)
		endpoint0_transmit(reply_buffer, 1, 0);
    28fc:	2101      	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    28fe:	486a      	ldr	r0, [pc, #424]	; (2aa8 <usb_isr+0x5c4>)
    2900:	781b      	ldrb	r3, [r3, #0]
    2902:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    2904:	f7ff fd8c 	bl	2420 <endpoint0_transmit.constprop.0>
		return;
    2908:	e641      	b.n	258e <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    290a:	b283      	uxth	r3, r0
		if (endpoint > 7) break;
    290c:	f010 0078 	ands.w	r0, r0, #120	; 0x78
    2910:	f47f ae39 	bne.w	2586 <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    2914:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    2918:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
		reply_buffer[0] = 0;
    291c:	4a62      	ldr	r2, [pc, #392]	; (2aa8 <usb_isr+0x5c4>)
    291e:	8010      	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    2920:	0618      	lsls	r0, r3, #24
    2922:	f100 809e 	bmi.w	2a62 <usb_isr+0x57e>
    2926:	07cb      	lsls	r3, r1, #31
    2928:	d501      	bpl.n	292e <usb_isr+0x44a>
			reply_buffer[0] = 1;
    292a:	2301      	movs	r3, #1
    292c:	7013      	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    292e:	2102      	movs	r1, #2
    2930:	485d      	ldr	r0, [pc, #372]	; (2aa8 <usb_isr+0x5c4>)
    2932:	f7ff fd75 	bl	2420 <endpoint0_transmit.constprop.0>
		return;
    2936:	e62a      	b.n	258e <usb_isr+0xaa>
		if (endpoint > 7) break;
    2938:	f010 0f78 	tst.w	r0, #120	; 0x78
    293c:	b283      	uxth	r3, r0
    293e:	f47f ae22 	bne.w	2586 <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    2942:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    2946:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    294a:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    294e:	bf14      	ite	ne
    2950:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    2954:	f043 0301 	orreq.w	r3, r3, #1
    2958:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    295c:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    295e:	4b48      	ldr	r3, [pc, #288]	; (2a80 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    2960:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    2962:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    2964:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    2966:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    2968:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    296a:	2280      	movs	r2, #128	; 0x80
    296c:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    296e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    2972:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2976:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    297a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    297e:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    2982:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2986:	2b00      	cmp	r3, #0
    2988:	d1fb      	bne.n	2982 <usb_isr+0x49e>
    298a:	e600      	b.n	258e <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    298c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    2990:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    2994:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    2998:	bf14      	ite	ne
    299a:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    299e:	f023 0301 	biceq.w	r3, r3, #1
    29a2:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    29a6:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    29a8:	4b35      	ldr	r3, [pc, #212]	; (2a80 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    29aa:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    29ac:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    29ae:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    29b0:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    29b2:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    29b4:	2280      	movs	r2, #128	; 0x80
    29b6:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    29b8:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    29bc:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    29c0:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    29c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    29c8:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    29cc:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    29d0:	2b00      	cmp	r3, #0
    29d2:	d1fb      	bne.n	29cc <usb_isr+0x4e8>
    29d4:	e5db      	b.n	258e <usb_isr+0xaa>
				endpoint0_notify_mask = 0;
    29d6:	2000      	movs	r0, #0
    29d8:	6008      	str	r0, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    29da:	4926      	ldr	r1, [pc, #152]	; (2a74 <usb_isr+0x590>)
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    29dc:	880c      	ldrh	r4, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    29de:	6848      	ldr	r0, [r1, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    29e0:	f242 0121 	movw	r1, #8225	; 0x2021
    29e4:	428c      	cmp	r4, r1
    29e6:	f47f ae25 	bne.w	2634 <usb_isr+0x150>
    29ea:	b280      	uxth	r0, r0
    29ec:	2800      	cmp	r0, #0
    29ee:	f47f ae21 	bne.w	2634 <usb_isr+0x150>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    29f2:	492e      	ldr	r1, [pc, #184]	; (2aac <usb_isr+0x5c8>)
    29f4:	4c2e      	ldr	r4, [pc, #184]	; (2ab0 <usb_isr+0x5cc>)
    29f6:	c903      	ldmia	r1, {r0, r1}
    29f8:	80a1      	strh	r1, [r4, #4]
		if (usb_cdc_line_coding[0] == 134) {
    29fa:	2886      	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    29fc:	ea4f 4111 	mov.w	r1, r1, lsr #16
    2a00:	6020      	str	r0, [r4, #0]
    2a02:	71a1      	strb	r1, [r4, #6]
		if (usb_cdc_line_coding[0] == 134) {
    2a04:	f47f ae16 	bne.w	2634 <usb_isr+0x150>
	__disable_irq();
    2a08:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    2a0a:	482a      	ldr	r0, [pc, #168]	; (2ab4 <usb_isr+0x5d0>)
    2a0c:	7801      	ldrb	r1, [r0, #0]
    2a0e:	f041 0108 	orr.w	r1, r1, #8
    2a12:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    2a14:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    2a18:	060d      	lsls	r5, r1, #24
    2a1a:	d405      	bmi.n	2a28 <usb_isr+0x544>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    2a1c:	2080      	movs	r0, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    2a1e:	4301      	orrs	r1, r0
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    2a20:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    2a24:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	__enable_irq();
    2a28:	b662      	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    2a2a:	4a23      	ldr	r2, [pc, #140]	; (2ab8 <usb_isr+0x5d4>)
    2a2c:	2150      	movs	r1, #80	; 0x50
    2a2e:	7011      	strb	r1, [r2, #0]
    2a30:	e600      	b.n	2634 <usb_isr+0x150>
				if (datalen > setup.wLength) datalen = setup.wLength;
    2a32:	0c00      	lsrs	r0, r0, #16
					datalen = *(list->addr);
    2a34:	782a      	ldrb	r2, [r5, #0]
    2a36:	4282      	cmp	r2, r0
    2a38:	bf28      	it	cs
    2a3a:	4602      	movcs	r2, r0
				} else if (setup.wValue == 0x700) {
    2a3c:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
    2a40:	d144      	bne.n	2acc <usb_isr+0x5e8>
					if (usb_high_speed) src = usb_config_descriptor_12;
    2a42:	4b1e      	ldr	r3, [pc, #120]	; (2abc <usb_isr+0x5d8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    2a44:	4d1e      	ldr	r5, [pc, #120]	; (2ac0 <usb_isr+0x5dc>)
					if (usb_high_speed) src = usb_config_descriptor_12;
    2a46:	7818      	ldrb	r0, [r3, #0]
    2a48:	491e      	ldr	r1, [pc, #120]	; (2ac4 <usb_isr+0x5e0>)
    2a4a:	4b1f      	ldr	r3, [pc, #124]	; (2ac8 <usb_isr+0x5e4>)
					memcpy(usb_descriptor_buffer, src, datalen);
    2a4c:	9201      	str	r2, [sp, #4]
    2a4e:	2800      	cmp	r0, #0
    2a50:	bf18      	it	ne
    2a52:	4619      	movne	r1, r3
    2a54:	4628      	mov	r0, r5
    2a56:	f7ff f9d9 	bl	1e0c <memcpy>
					usb_descriptor_buffer[1] = 7;
    2a5a:	2307      	movs	r3, #7
    2a5c:	706b      	strb	r3, [r5, #1]
    2a5e:	9a01      	ldr	r2, [sp, #4]
    2a60:	e03b      	b.n	2ada <usb_isr+0x5f6>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    2a62:	03c9      	lsls	r1, r1, #15
    2a64:	f53f af61 	bmi.w	292a <usb_isr+0x446>
    2a68:	e761      	b.n	292e <usb_isr+0x44a>
    2a6a:	bf00      	nop
    2a6c:	20001ae0 	.word	0x20001ae0
    2a70:	20003058 	.word	0x20003058
    2a74:	20001c80 	.word	0x20001c80
    2a78:	00070080 	.word	0x00070080
    2a7c:	20004058 	.word	0x20004058
    2a80:	20001ac0 	.word	0x20001ac0
    2a84:	200020e4 	.word	0x200020e4
    2a88:	200020f4 	.word	0x200020f4
    2a8c:	20002117 	.word	0x20002117
    2a90:	20002118 	.word	0x20002118
    2a94:	00cc0002 	.word	0x00cc0002
    2a98:	000200c8 	.word	0x000200c8
    2a9c:	00c80002 	.word	0x00c80002
    2aa0:	20000080 	.word	0x20000080
    2aa4:	74d59319 	.word	0x74d59319
    2aa8:	20002094 	.word	0x20002094
    2aac:	20002058 	.word	0x20002058
    2ab0:	200020ec 	.word	0x200020ec
    2ab4:	20002113 	.word	0x20002113
    2ab8:	2000211a 	.word	0x2000211a
    2abc:	20002119 	.word	0x20002119
    2ac0:	20200000 	.word	0x20200000
    2ac4:	60001f1c 	.word	0x60001f1c
    2ac8:	60001eb8 	.word	0x60001eb8
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    2acc:	4629      	mov	r1, r5
    2ace:	4d10      	ldr	r5, [pc, #64]	; (2b10 <usb_isr+0x62c>)
    2ad0:	9201      	str	r2, [sp, #4]
    2ad2:	4628      	mov	r0, r5
    2ad4:	f7ff f99a 	bl	1e0c <memcpy>
    2ad8:	9a01      	ldr	r2, [sp, #4]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    2ada:	f025 031f 	bic.w	r3, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
    2ade:	4415      	add	r5, r2
	asm("dsb");
    2ae0:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    2ae4:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    2ae8:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    2aec:	3320      	adds	r3, #32
	} while (location < end_addr);
    2aee:	429d      	cmp	r5, r3
    2af0:	d8fa      	bhi.n	2ae8 <usb_isr+0x604>
	asm("dsb");
    2af2:	f3bf 8f4f 	dsb	sy
	asm("isb");
    2af6:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    2afa:	4805      	ldr	r0, [pc, #20]	; (2b10 <usb_isr+0x62c>)
    2afc:	4611      	mov	r1, r2
    2afe:	f7ff fc8f 	bl	2420 <endpoint0_transmit.constprop.0>
				return;
    2b02:	e544      	b.n	258e <usb_isr+0xaa>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    2b04:	2003      	movs	r0, #3
    2b06:	f7ff fcd7 	bl	24b8 <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    2b0a:	f007 fb39 	bl	a180 <___reboot_Teensyduino__veneer>
    2b0e:	bf00      	nop
    2b10:	20200000 	.word	0x20200000

00002b14 <usb_config_rx>:
{
    2b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2b18:	461f      	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    2b1a:	1e83      	subs	r3, r0, #2
    2b1c:	2b02      	cmp	r3, #2
    2b1e:	d901      	bls.n	2b24 <usb_config_rx+0x10>
}
    2b20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    2b24:	f8df 904c 	ldr.w	r9, [pc, #76]	; 2b74 <usb_config_rx+0x60>
    2b28:	4615      	mov	r5, r2
    2b2a:	460c      	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
    2b2c:	223c      	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    2b2e:	eb09 18c0 	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    2b32:	4606      	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    2b34:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    2b38:	2100      	movs	r1, #0
    2b3a:	f108 0004 	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    2b3e:	0424      	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
    2b40:	f001 fe32 	bl	47a8 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    2b44:	fab5 f285 	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
    2b48:	2301      	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    2b4a:	0952      	lsrs	r2, r2, #5
    2b4c:	ea44 7442 	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
    2b50:	f849 400a 	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    2b54:	f8c8 7038 	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    2b58:	f8c8 3008 	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    2b5c:	2f00      	cmp	r7, #0
    2b5e:	d0df      	beq.n	2b20 <usb_config_rx+0xc>
    2b60:	4a03      	ldr	r2, [pc, #12]	; (2b70 <usb_config_rx+0x5c>)
    2b62:	40b3      	lsls	r3, r6
    2b64:	6811      	ldr	r1, [r2, #0]
    2b66:	430b      	orrs	r3, r1
    2b68:	6013      	str	r3, [r2, #0]
}
    2b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2b6e:	bf00      	nop
    2b70:	20002064 	.word	0x20002064
    2b74:	20000000 	.word	0x20000000

00002b78 <usb_config_tx>:
{
    2b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2b7c:	460d      	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    2b7e:	1e81      	subs	r1, r0, #2
    2b80:	2902      	cmp	r1, #2
    2b82:	d901      	bls.n	2b88 <usb_config_tx+0x10>
}
    2b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    2b88:	01c7      	lsls	r7, r0, #7
    2b8a:	f8df 904c 	ldr.w	r9, [pc, #76]	; 2bd8 <usb_config_tx+0x60>
    2b8e:	4692      	mov	sl, r2
    2b90:	4604      	mov	r4, r0
    2b92:	3740      	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    2b94:	223c      	movs	r2, #60	; 0x3c
    2b96:	2100      	movs	r1, #0
    2b98:	461e      	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    2b9a:	eb09 0807 	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    2b9e:	042d      	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
    2ba0:	f108 0004 	add.w	r0, r8, #4
    2ba4:	f001 fe00 	bl	47a8 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    2ba8:	faba f28a 	clz	r2, sl
    2bac:	0952      	lsrs	r2, r2, #5
    2bae:	ea45 7242 	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
    2bb2:	f849 2007 	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
    2bb6:	2201      	movs	r2, #1
	qh->callback_function = callback;
    2bb8:	f8c8 6038 	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    2bbc:	f8c8 2008 	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    2bc0:	2e00      	cmp	r6, #0
    2bc2:	d0df      	beq.n	2b84 <usb_config_tx+0xc>
    2bc4:	4b03      	ldr	r3, [pc, #12]	; (2bd4 <usb_config_tx+0x5c>)
    2bc6:	3410      	adds	r4, #16
    2bc8:	6819      	ldr	r1, [r3, #0]
    2bca:	40a2      	lsls	r2, r4
    2bcc:	430a      	orrs	r2, r1
    2bce:	601a      	str	r2, [r3, #0]
}
    2bd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2bd4:	20002064 	.word	0x20002064
    2bd8:	20000000 	.word	0x20000000

00002bdc <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    2bdc:	0412      	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    2bde:	6081      	str	r1, [r0, #8]
	transfer->callback_param = param;
    2be0:	61c3      	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
    2be2:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
    2be6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
    2bea:	b410      	push	{r4}
	transfer->next = 1;
    2bec:	2401      	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
    2bee:	6042      	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
    2bf0:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
    2bf4:	6004      	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
    2bf6:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
    2bfa:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
    2bfe:	60c4      	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
    2c00:	6181      	str	r1, [r0, #24]
}
    2c02:	f85d 4b04 	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
    2c06:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
    2c0a:	4770      	bx	lr

00002c0c <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    2c0c:	1e83      	subs	r3, r0, #2
{
    2c0e:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    2c10:	2b02      	cmp	r3, #2
    2c12:	d900      	bls.n	2c16 <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    2c14:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    2c16:	4b06      	ldr	r3, [pc, #24]	; (2c30 <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
    2c18:	f100 0110 	add.w	r1, r0, #16
    2c1c:	f04f 0c01 	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    2c20:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    2c24:	fa0c f101 	lsl.w	r1, ip, r1
    2c28:	3040      	adds	r0, #64	; 0x40
    2c2a:	f7ff bb99 	b.w	2360 <schedule_transfer>
    2c2e:	bf00      	nop
    2c30:	20000000 	.word	0x20000000

00002c34 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    2c34:	1e83      	subs	r3, r0, #2
{
    2c36:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    2c38:	2b02      	cmp	r3, #2
    2c3a:	d900      	bls.n	2c3e <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    2c3c:	4770      	bx	lr
	uint32_t mask = 1 << endpoint_number;
    2c3e:	2101      	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    2c40:	4b02      	ldr	r3, [pc, #8]	; (2c4c <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
    2c42:	4081      	lsls	r1, r0
    2c44:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    2c48:	f7ff bb8a 	b.w	2360 <schedule_transfer>
    2c4c:	20000000 	.word	0x20000000

00002c50 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    2c50:	6840      	ldr	r0, [r0, #4]
#endif
}
    2c52:	4770      	bx	lr

00002c54 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    2c54:	4a12      	ldr	r2, [pc, #72]	; (2ca0 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    2c56:	4b13      	ldr	r3, [pc, #76]	; (2ca4 <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    2c58:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    2c5c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    2c60:	4298      	cmp	r0, r3
{
    2c62:	b510      	push	{r4, lr}
    2c64:	b084      	sub	sp, #16
	if (num < 10000000) num = num * 10;
    2c66:	d202      	bcs.n	2c6e <usb_init_serialnumber+0x1a>
    2c68:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    2c6c:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    2c6e:	4c0e      	ldr	r4, [pc, #56]	; (2ca8 <usb_init_serialnumber+0x54>)
    2c70:	a901      	add	r1, sp, #4
    2c72:	220a      	movs	r2, #10
    2c74:	f7ff f964 	bl	1f40 <ultoa>
	for (i=0; i<10; i++) {
    2c78:	a901      	add	r1, sp, #4
    2c7a:	2300      	movs	r3, #0
    2c7c:	4620      	mov	r0, r4
		char c = buf[i];
    2c7e:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    2c82:	3301      	adds	r3, #1
		if (!c) break;
    2c84:	b13a      	cbz	r2, 2c96 <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
    2c86:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    2c88:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    2c8c:	d1f7      	bne.n	2c7e <usb_init_serialnumber+0x2a>
    2c8e:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    2c90:	7023      	strb	r3, [r4, #0]
}
    2c92:	b004      	add	sp, #16
    2c94:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    2c96:	005b      	lsls	r3, r3, #1
    2c98:	b2db      	uxtb	r3, r3
    2c9a:	7023      	strb	r3, [r4, #0]
}
    2c9c:	b004      	add	sp, #16
    2c9e:	bd10      	pop	{r4, pc}
    2ca0:	401f4400 	.word	0x401f4400
    2ca4:	00989680 	.word	0x00989680
    2ca8:	20001664 	.word	0x20001664

00002cac <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    2cac:	f000 badc 	b.w	3268 <usb_serial_flush_input>

00002cb0 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    2cb0:	f000 baac 	b.w	320c <usb_serial_peekchar>

00002cb4 <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    2cb4:	f000 bb10 	b.w	32d8 <usb_serial_getchar>

00002cb8 <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    2cb8:	f000 baca 	b.w	3250 <usb_serial_available>

00002cbc <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    2cbc:	f000 bb66 	b.w	338c <usb_serial_flush_output>

00002cc0 <usb_serial_class::availableForWrite()>:
	size_t write(int n) { return write((uint8_t)n); }
	// Returns the number of bytes which may be transmitted by write() or print()
	// without waiting.  Typically programs which must maintain rapid checking
	// and response to sensors use availableForWrite() to decide whether to
	// transmit.
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    2cc0:	f000 bb3c 	b.w	333c <usb_serial_write_buffer_free>

00002cc4 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    2cc4:	4608      	mov	r0, r1
    2cc6:	4611      	mov	r1, r2
    2cc8:	f000 bb2c 	b.w	3324 <usb_serial_write>

00002ccc <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    2ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    2cce:	4c14      	ldr	r4, [pc, #80]	; (2d20 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    2cd0:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    2cd4:	4e13      	ldr	r6, [pc, #76]	; (2d24 <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    2cd6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    2cda:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    2cde:	4f12      	ldr	r7, [pc, #72]	; (2d28 <rx_queue_transfer+0x5c>)
    2ce0:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
    2ce4:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    2ce6:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    2cea:	4621      	mov	r1, r4
    2cec:	883a      	ldrh	r2, [r7, #0]
    2cee:	4630      	mov	r0, r6
    2cf0:	f7ff ff74 	bl	2bdc <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    2cf4:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    2cf6:	4423      	add	r3, r4
	asm("dsb");
    2cf8:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    2cfc:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    2d00:	3420      	adds	r4, #32
	} while (location < end_addr);
    2d02:	42a3      	cmp	r3, r4
    2d04:	d8fa      	bhi.n	2cfc <rx_queue_transfer+0x30>
	asm("dsb");
    2d06:	f3bf 8f4f 	dsb	sy
	asm("isb");
    2d0a:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    2d0e:	2003      	movs	r0, #3
    2d10:	4631      	mov	r1, r6
    2d12:	f7ff ff8f 	bl	2c34 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    2d16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    2d1a:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
    2d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2d20:	20200080 	.word	0x20200080
    2d24:	20001b00 	.word	0x20001b00
    2d28:	20002100 	.word	0x20002100

00002d2c <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    2d2c:	4b24      	ldr	r3, [pc, #144]	; (2dc0 <rx_event+0x94>)
{
    2d2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    2d32:	881c      	ldrh	r4, [r3, #0]
    2d34:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
    2d36:	69c5      	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    2d38:	f3c3 430e 	ubfx	r3, r3, #16, #15
    2d3c:	1ae4      	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    2d3e:	2c00      	cmp	r4, #0
    2d40:	dd24      	ble.n	2d8c <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
    2d42:	4920      	ldr	r1, [pc, #128]	; (2dc4 <rx_event+0x98>)
		if (head != rx_tail) {
    2d44:	4820      	ldr	r0, [pc, #128]	; (2dc8 <rx_event+0x9c>)
		uint32_t head = rx_head;
    2d46:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    2d48:	7800      	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    2d4a:	b2d3      	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
    2d4c:	4e1f      	ldr	r6, [pc, #124]	; (2dcc <rx_event+0xa0>)
		if (head != rx_tail) {
    2d4e:	4282      	cmp	r2, r0
			uint32_t ii = rx_list[head];
    2d50:	481f      	ldr	r0, [pc, #124]	; (2dd0 <rx_event+0xa4>)
		if (head != rx_tail) {
    2d52:	d007      	beq.n	2d64 <rx_event+0x38>
			uint32_t ii = rx_list[head];
    2d54:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    2d58:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    2d5c:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    2d60:	4294      	cmp	r4, r2
    2d62:	d918      	bls.n	2d96 <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    2d64:	3301      	adds	r3, #1
		rx_index[i] = 0;
    2d66:	2200      	movs	r2, #0
		rx_count[i] = len;
    2d68:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    2d6c:	2b08      	cmp	r3, #8
		rx_index[i] = 0;
    2d6e:	4e19      	ldr	r6, [pc, #100]	; (2dd4 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    2d70:	bf88      	it	hi
    2d72:	4613      	movhi	r3, r2
		rx_index[i] = 0;
    2d74:	f826 2015 	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
    2d78:	bf98      	it	ls
    2d7a:	b2da      	uxtbls	r2, r3
		rx_list[head] = i;
    2d7c:	54c5      	strb	r5, [r0, r3]
		rx_available += len;
    2d7e:	4b16      	ldr	r3, [pc, #88]	; (2dd8 <rx_event+0xac>)
		rx_head = head;
    2d80:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    2d82:	681a      	ldr	r2, [r3, #0]
    2d84:	4414      	add	r4, r2
    2d86:	601c      	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    2d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
    2d8c:	4628      	mov	r0, r5
}
    2d8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
    2d92:	f7ff bf9b 	b.w	2ccc <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    2d96:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    2d9a:	4910      	ldr	r1, [pc, #64]	; (2ddc <rx_event+0xb0>)
    2d9c:	4622      	mov	r2, r4
				rx_count[ii] = count + len;
    2d9e:	4427      	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    2da0:	4408      	add	r0, r1
    2da2:	eb01 2145 	add.w	r1, r1, r5, lsl #9
    2da6:	f7ff f831 	bl	1e0c <memcpy>
				rx_available += len;
    2daa:	4a0b      	ldr	r2, [pc, #44]	; (2dd8 <rx_event+0xac>)
				rx_queue_transfer(i);
    2dac:	4628      	mov	r0, r5
				rx_count[ii] = count + len;
    2dae:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    2db2:	6813      	ldr	r3, [r2, #0]
    2db4:	4423      	add	r3, r4
}
    2db6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
    2dba:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
    2dbc:	f7ff bf86 	b.w	2ccc <rx_queue_transfer>
    2dc0:	20002100 	.word	0x20002100
    2dc4:	20002111 	.word	0x20002111
    2dc8:	20002112 	.word	0x20002112
    2dcc:	200020a0 	.word	0x200020a0
    2dd0:	200020c0 	.word	0x200020c0
    2dd4:	200020b0 	.word	0x200020b0
    2dd8:	2000209c 	.word	0x2000209c
    2ddc:	20200080 	.word	0x20200080

00002de0 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    2de0:	4b1d      	ldr	r3, [pc, #116]	; (2e58 <usb_serial_flush_callback+0x78>)
    2de2:	781a      	ldrb	r2, [r3, #0]
    2de4:	2a00      	cmp	r2, #0
    2de6:	d136      	bne.n	2e56 <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
    2de8:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    2dec:	4a1b      	ldr	r2, [pc, #108]	; (2e5c <usb_serial_flush_callback+0x7c>)
    2dee:	7812      	ldrb	r2, [r2, #0]
    2df0:	b38a      	cbz	r2, 2e56 <usb_serial_flush_callback+0x76>
{
    2df2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
    2df6:	4d1a      	ldr	r5, [pc, #104]	; (2e60 <usb_serial_flush_callback+0x80>)
    2df8:	882a      	ldrh	r2, [r5, #0]
    2dfa:	b352      	cbz	r2, 2e52 <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    2dfc:	4e19      	ldr	r6, [pc, #100]	; (2e64 <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    2dfe:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    2e02:	4f19      	ldr	r7, [pc, #100]	; (2e68 <usb_serial_flush_callback+0x88>)
    2e04:	7832      	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    2e06:	4c19      	ldr	r4, [pc, #100]	; (2e6c <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    2e08:	eb07 1742 	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    2e0c:	eb04 24c2 	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    2e10:	4642      	mov	r2, r8
    2e12:	4638      	mov	r0, r7
    2e14:	4621      	mov	r1, r4
    2e16:	f7ff fee1 	bl	2bdc <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    2e1a:	eb04 0208 	add.w	r2, r4, r8
	asm("dsb");
    2e1e:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    2e22:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    2e26:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    2e2a:	3420      	adds	r4, #32
	} while (location < end_addr);
    2e2c:	42a2      	cmp	r2, r4
    2e2e:	d8fa      	bhi.n	2e26 <usb_serial_flush_callback+0x46>
	asm("dsb");
    2e30:	f3bf 8f4f 	dsb	sy
	asm("isb");
    2e34:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    2e38:	2004      	movs	r0, #4
    2e3a:	4639      	mov	r1, r7
    2e3c:	f7ff fee6 	bl	2c0c <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    2e40:	7833      	ldrb	r3, [r6, #0]
    2e42:	3301      	adds	r3, #1
    2e44:	b2db      	uxtb	r3, r3
    2e46:	2b03      	cmp	r3, #3
    2e48:	bf88      	it	hi
    2e4a:	2300      	movhi	r3, #0
    2e4c:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    2e4e:	2300      	movs	r3, #0
    2e50:	802b      	strh	r3, [r5, #0]
}
    2e52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2e56:	4770      	bx	lr
    2e58:	20002116 	.word	0x20002116
    2e5c:	20002118 	.word	0x20002118
    2e60:	20002102 	.word	0x20002102
    2e64:	20002115 	.word	0x20002115
    2e68:	20001c00 	.word	0x20001c00
    2e6c:	20201080 	.word	0x20201080

00002e70 <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
    2e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2e74:	b085      	sub	sp, #20
	while (size > 0) {
    2e76:	e9cd 1001 	strd	r1, r0, [sp, #4]
    2e7a:	2900      	cmp	r1, #0
    2e7c:	f000 80bf 	beq.w	2ffe <usb_serial_write.part.0+0x18e>
	uint32_t sent=0;
    2e80:	2300      	movs	r3, #0
    2e82:	4c60      	ldr	r4, [pc, #384]	; (3004 <usb_serial_write.part.0+0x194>)
    2e84:	f8df 8198 	ldr.w	r8, [pc, #408]	; 3020 <usb_serial_write.part.0+0x1b0>
    2e88:	f8df a198 	ldr.w	sl, [pc, #408]	; 3024 <usb_serial_write.part.0+0x1b4>
				wait_begin_at = systick_millis_count;
    2e8c:	4f5e      	ldr	r7, [pc, #376]	; (3008 <usb_serial_write.part.0+0x198>)
	uint32_t sent=0;
    2e8e:	9300      	str	r3, [sp, #0]
		tx_noautoflush = 1;
    2e90:	2301      	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    2e92:	4a5e      	ldr	r2, [pc, #376]	; (300c <usb_serial_write.part.0+0x19c>)
		tx_noautoflush = 1;
    2e94:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    2e96:	4b5e      	ldr	r3, [pc, #376]	; (3010 <usb_serial_write.part.0+0x1a0>)
    2e98:	7819      	ldrb	r1, [r3, #0]
		while (!tx_available) {
    2e9a:	f8b8 3000 	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
    2e9e:	eb02 1941 	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
    2ea2:	2b00      	cmp	r3, #0
    2ea4:	f040 80a7 	bne.w	2ff6 <usb_serial_write.part.0+0x186>
		uint32_t wait_begin_at=0;
    2ea8:	461e      	mov	r6, r3
		int waiting=0;
    2eaa:	461d      	mov	r5, r3
			tx_noautoflush = 0;
    2eac:	469b      	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
    2eae:	4648      	mov	r0, r9
    2eb0:	f7ff fece 	bl	2c50 <usb_transfer_status>
			if (!(status & 0x80)) {
    2eb4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    2eb8:	f000 808c 	beq.w	2fd4 <usb_serial_write.part.0+0x164>
			asm("dsb" ::: "memory");
    2ebc:	f3bf 8f4f 	dsb	sy
			if (transmit_previous_timeout) return sent;
    2ec0:	f89a 3000 	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
    2ec4:	f884 b000 	strb.w	fp, [r4]
			if (!waiting) {
    2ec8:	b905      	cbnz	r5, 2ecc <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
    2eca:	683e      	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
    2ecc:	2b00      	cmp	r3, #0
    2ece:	d17d      	bne.n	2fcc <usb_serial_write.part.0+0x15c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    2ed0:	683b      	ldr	r3, [r7, #0]
    2ed2:	1b9b      	subs	r3, r3, r6
    2ed4:	2b78      	cmp	r3, #120	; 0x78
    2ed6:	f200 8087 	bhi.w	2fe8 <usb_serial_write.part.0+0x178>
			if (!usb_configuration) return sent;
    2eda:	4b4e      	ldr	r3, [pc, #312]	; (3014 <usb_serial_write.part.0+0x1a4>)
    2edc:	781b      	ldrb	r3, [r3, #0]
    2ede:	2b00      	cmp	r3, #0
    2ee0:	d074      	beq.n	2fcc <usb_serial_write.part.0+0x15c>
			yield();
    2ee2:	f000 fa9d 	bl	3420 <yield>
			tx_noautoflush = 1;
    2ee6:	2201      	movs	r2, #1
		while (!tx_available) {
    2ee8:	f8b8 3000 	ldrh.w	r3, [r8]
    2eec:	4615      	mov	r5, r2
			tx_noautoflush = 1;
    2eee:	7022      	strb	r2, [r4, #0]
		while (!tx_available) {
    2ef0:	2b00      	cmp	r3, #0
    2ef2:	d0dc      	beq.n	2eae <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    2ef4:	4a46      	ldr	r2, [pc, #280]	; (3010 <usb_serial_write.part.0+0x1a0>)
    2ef6:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    2efa:	7811      	ldrb	r1, [r2, #0]
    2efc:	461a      	mov	r2, r3
    2efe:	eb00 20c1 	add.w	r0, r0, r1, lsl #11
    2f02:	4d45      	ldr	r5, [pc, #276]	; (3018 <usb_serial_write.part.0+0x1a8>)
    2f04:	02c9      	lsls	r1, r1, #11
    2f06:	4428      	add	r0, r5
		if (size >= tx_available) {
    2f08:	9d01      	ldr	r5, [sp, #4]
    2f0a:	4295      	cmp	r5, r2
    2f0c:	d217      	bcs.n	2f3e <usb_serial_write.part.0+0xce>
			memcpy(txdata, data, size);
    2f0e:	9303      	str	r3, [sp, #12]
    2f10:	e9dd 5101 	ldrd	r5, r1, [sp, #4]
    2f14:	462a      	mov	r2, r5
    2f16:	f7fe ff79 	bl	1e0c <memcpy>
			tx_available -= size;
    2f1a:	9b03      	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    2f1c:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
    2f20:	1b5b      	subs	r3, r3, r5
    2f22:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    2f26:	4b3d      	ldr	r3, [pc, #244]	; (301c <usb_serial_write.part.0+0x1ac>)
    2f28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
    2f2c:	f3bf 8f4f 	dsb	sy
			sent += size;
    2f30:	9800      	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
    2f32:	2300      	movs	r3, #0
			sent += size;
    2f34:	4428      	add	r0, r5
		tx_noautoflush = 0;
    2f36:	7023      	strb	r3, [r4, #0]
}
    2f38:	b005      	add	sp, #20
    2f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    2f3e:	4b36      	ldr	r3, [pc, #216]	; (3018 <usb_serial_write.part.0+0x1a8>)
    2f40:	18cd      	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
    2f42:	9902      	ldr	r1, [sp, #8]
    2f44:	f7fe ff62 	bl	1e0c <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    2f48:	2300      	movs	r3, #0
    2f4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    2f4e:	4629      	mov	r1, r5
    2f50:	4648      	mov	r0, r9
    2f52:	f7ff fe43 	bl	2bdc <usb_prepare_transfer>
	asm("dsb");
    2f56:	f3bf 8f4f 	dsb	sy
    2f5a:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    2f5e:	f505 6300 	add.w	r3, r5, #2048	; 0x800
    2f62:	4293      	cmp	r3, r2
    2f64:	bf34      	ite	cc
    2f66:	2301      	movcc	r3, #1
    2f68:	2340      	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    2f6a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    2f6e:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    2f72:	f8c2 5f70 	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
    2f76:	3520      	adds	r5, #32
	} while (location < end_addr);
    2f78:	42ab      	cmp	r3, r5
    2f7a:	d1fa      	bne.n	2f72 <usb_serial_write.part.0+0x102>
	asm("dsb");
    2f7c:	f3bf 8f4f 	dsb	sy
	asm("isb");
    2f80:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    2f84:	2004      	movs	r0, #4
    2f86:	4649      	mov	r1, r9
    2f88:	f7ff fe40 	bl	2c0c <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    2f8c:	4a20      	ldr	r2, [pc, #128]	; (3010 <usb_serial_write.part.0+0x1a0>)
    2f8e:	7813      	ldrb	r3, [r2, #0]
    2f90:	3301      	adds	r3, #1
    2f92:	b2db      	uxtb	r3, r3
    2f94:	2b03      	cmp	r3, #3
    2f96:	bf84      	itt	hi
    2f98:	2300      	movhi	r3, #0
    2f9a:	4a1d      	ldrhi	r2, [pc, #116]	; (3010 <usb_serial_write.part.0+0x1a0>)
    2f9c:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    2f9e:	f8b8 3000 	ldrh.w	r3, [r8]
    2fa2:	9a01      	ldr	r2, [sp, #4]
    2fa4:	1ad1      	subs	r1, r2, r3
			sent += tx_available;
    2fa6:	9a00      	ldr	r2, [sp, #0]
    2fa8:	441a      	add	r2, r3
			size -= tx_available;
    2faa:	9101      	str	r1, [sp, #4]
			sent += tx_available;
    2fac:	9200      	str	r2, [sp, #0]
			data += tx_available;
    2fae:	9a02      	ldr	r2, [sp, #8]
    2fb0:	441a      	add	r2, r3
			tx_available = 0;
    2fb2:	2300      	movs	r3, #0
			data += tx_available;
    2fb4:	9202      	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
    2fb6:	4a19      	ldr	r2, [pc, #100]	; (301c <usb_serial_write.part.0+0x1ac>)
			tx_available = 0;
    2fb8:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
    2fbc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    2fc0:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
    2fc4:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
    2fc6:	2900      	cmp	r1, #0
    2fc8:	f47f af62 	bne.w	2e90 <usb_serial_write.part.0+0x20>
	return sent;
    2fcc:	9800      	ldr	r0, [sp, #0]
}
    2fce:	b005      	add	sp, #20
    2fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
    2fd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    2fd8:	4b0d      	ldr	r3, [pc, #52]	; (3010 <usb_serial_write.part.0+0x1a0>)
				transmit_previous_timeout = 0;
    2fda:	f88a 0000 	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    2fde:	7819      	ldrb	r1, [r3, #0]
				break;
    2fe0:	4613      	mov	r3, r2
				tx_available = TX_SIZE;
    2fe2:	f8a8 2000 	strh.w	r2, [r8]
				break;
    2fe6:	e78a      	b.n	2efe <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
    2fe8:	2301      	movs	r3, #1
				return sent;
    2fea:	9800      	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
    2fec:	f88a 3000 	strb.w	r3, [sl]
}
    2ff0:	b005      	add	sp, #20
    2ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    2ff6:	461a      	mov	r2, r3
    2ff8:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    2ffc:	e77f      	b.n	2efe <usb_serial_write.part.0+0x8e>
	while (size > 0) {
    2ffe:	9801      	ldr	r0, [sp, #4]
	return sent;
    3000:	e7e5      	b.n	2fce <usb_serial_write.part.0+0x15e>
    3002:	bf00      	nop
    3004:	20002116 	.word	0x20002116
    3008:	200020e4 	.word	0x200020e4
    300c:	20001c00 	.word	0x20001c00
    3010:	20002115 	.word	0x20002115
    3014:	20002118 	.word	0x20002118
    3018:	20201080 	.word	0x20201080
    301c:	402e0000 	.word	0x402e0000
    3020:	20002102 	.word	0x20002102
    3024:	20002114 	.word	0x20002114

00003028 <usb_serial_reset>:
}
    3028:	4770      	bx	lr
    302a:	bf00      	nop

0000302c <usb_serial_configure>:
	if (usb_high_speed) {
    302c:	4b2d      	ldr	r3, [pc, #180]	; (30e4 <usb_serial_configure+0xb8>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    302e:	2100      	movs	r1, #0
    3030:	2280      	movs	r2, #128	; 0x80
    3032:	482d      	ldr	r0, [pc, #180]	; (30e8 <usb_serial_configure+0xbc>)
{
    3034:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    3036:	781b      	ldrb	r3, [r3, #0]
	tx_head = 0;
    3038:	2400      	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    303a:	4d2c      	ldr	r5, [pc, #176]	; (30ec <usb_serial_configure+0xc0>)
	if (usb_high_speed) {
    303c:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
    303e:	4e2c      	ldr	r6, [pc, #176]	; (30f0 <usb_serial_configure+0xc4>)
	if (usb_high_speed) {
    3040:	bf0c      	ite	eq
    3042:	2340      	moveq	r3, #64	; 0x40
    3044:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    3048:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    304a:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    304c:	f001 fbac 	bl	47a8 <memset>
	tx_head = 0;
    3050:	4a28      	ldr	r2, [pc, #160]	; (30f4 <usb_serial_configure+0xc8>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    3052:	4621      	mov	r1, r4
	tx_available = 0;
    3054:	4b28      	ldr	r3, [pc, #160]	; (30f8 <usb_serial_configure+0xcc>)
	tx_head = 0;
    3056:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    3058:	f44f 7280 	mov.w	r2, #256	; 0x100
    305c:	4827      	ldr	r0, [pc, #156]	; (30fc <usb_serial_configure+0xd0>)
	tx_available = 0;
    305e:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    3060:	f001 fba2 	bl	47a8 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    3064:	4a26      	ldr	r2, [pc, #152]	; (3100 <usb_serial_configure+0xd4>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    3066:	2110      	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
    3068:	4b26      	ldr	r3, [pc, #152]	; (3104 <usb_serial_configure+0xd8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    306a:	2002      	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
    306c:	e9c2 4400 	strd	r4, r4, [r2]
    3070:	e9c2 4402 	strd	r4, r4, [r2, #8]
	rx_head = 0;
    3074:	4a24      	ldr	r2, [pc, #144]	; (3108 <usb_serial_configure+0xdc>)
	memset(rx_index, 0, sizeof(rx_index));
    3076:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
    307a:	7014      	strb	r4, [r2, #0]
	rx_available = 0;
    307c:	4a23      	ldr	r2, [pc, #140]	; (310c <usb_serial_configure+0xe0>)
	memset(rx_index, 0, sizeof(rx_index));
    307e:	e9c3 4402 	strd	r4, r4, [r3, #8]
	rx_tail = 0;
    3082:	4b23      	ldr	r3, [pc, #140]	; (3110 <usb_serial_configure+0xe4>)
    3084:	701c      	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    3086:	4623      	mov	r3, r4
	rx_available = 0;
    3088:	6014      	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    308a:	4622      	mov	r2, r4
    308c:	f7ff fd74 	bl	2b78 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    3090:	4622      	mov	r2, r4
    3092:	8831      	ldrh	r1, [r6, #0]
    3094:	2003      	movs	r0, #3
    3096:	4b1f      	ldr	r3, [pc, #124]	; (3114 <usb_serial_configure+0xe8>)
    3098:	f7ff fd3c 	bl	2b14 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    309c:	4623      	mov	r3, r4
    309e:	2201      	movs	r2, #1
    30a0:	8829      	ldrh	r1, [r5, #0]
    30a2:	2004      	movs	r0, #4
    30a4:	f7ff fd68 	bl	2b78 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    30a8:	4620      	mov	r0, r4
    30aa:	3401      	adds	r4, #1
    30ac:	f7ff fe0e 	bl	2ccc <rx_queue_transfer>
    30b0:	2c08      	cmp	r4, #8
    30b2:	d1f9      	bne.n	30a8 <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
    30b4:	4b18      	ldr	r3, [pc, #96]	; (3118 <usb_serial_configure+0xec>)
    30b6:	2100      	movs	r1, #0
	USB1_GPTIMER0LD = microseconds - 1;
    30b8:	224a      	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
    30ba:	4818      	ldr	r0, [pc, #96]	; (311c <usb_serial_configure+0xf0>)
    30bc:	4c18      	ldr	r4, [pc, #96]	; (3120 <usb_serial_configure+0xf4>)
    30be:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    30c0:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    30c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    30c8:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    30cc:	4915      	ldr	r1, [pc, #84]	; (3124 <usb_serial_configure+0xf8>)
	USB1_USBINTR |= USB_USBINTR_TIE0;
    30ce:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    30d2:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    30d6:	b121      	cbz	r1, 30e2 <usb_serial_configure+0xb6>
    30d8:	4a13      	ldr	r2, [pc, #76]	; (3128 <usb_serial_configure+0xfc>)
    30da:	7813      	ldrb	r3, [r2, #0]
    30dc:	f043 0301 	orr.w	r3, r3, #1
    30e0:	7013      	strb	r3, [r2, #0]
}
    30e2:	bd70      	pop	{r4, r5, r6, pc}
    30e4:	20002119 	.word	0x20002119
    30e8:	20001c00 	.word	0x20001c00
    30ec:	20002104 	.word	0x20002104
    30f0:	20002100 	.word	0x20002100
    30f4:	20002115 	.word	0x20002115
    30f8:	20002102 	.word	0x20002102
    30fc:	20001b00 	.word	0x20001b00
    3100:	200020a0 	.word	0x200020a0
    3104:	200020b0 	.word	0x200020b0
    3108:	20002111 	.word	0x20002111
    310c:	2000209c 	.word	0x2000209c
    3110:	20002112 	.word	0x20002112
    3114:	00002d2d 	.word	0x00002d2d
    3118:	402e0000 	.word	0x402e0000
    311c:	200020f8 	.word	0x200020f8
    3120:	00002de1 	.word	0x00002de1
    3124:	00000000 	.word	0x00000000
    3128:	2000211b 	.word	0x2000211b

0000312c <usb_serial_read>:
{
    312c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    3130:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3134:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	uint32_t tail = rx_tail;
    3138:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 3204 <usb_serial_read+0xd8>
{
    313c:	b083      	sub	sp, #12
	NVIC_DISABLE_IRQ(IRQ_USB1);
    313e:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	while (count < size && tail != rx_head) {
    3142:	468b      	mov	fp, r1
	uint32_t tail = rx_tail;
    3144:	f89a 4000 	ldrb.w	r4, [sl]
	while (count < size && tail != rx_head) {
    3148:	2900      	cmp	r1, #0
    314a:	d04f      	beq.n	31ec <usb_serial_read+0xc0>
    314c:	4680      	mov	r8, r0
    314e:	b2e4      	uxtb	r4, r4
	uint32_t count=0;
    3150:	2700      	movs	r7, #0
		uint32_t avail = rx_count[i] - rx_index[i];
    3152:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 3208 <usb_serial_read+0xdc>
	while (count < size && tail != rx_head) {
    3156:	4b26      	ldr	r3, [pc, #152]	; (31f0 <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    3158:	ebab 0207 	sub.w	r2, fp, r7
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    315c:	4925      	ldr	r1, [pc, #148]	; (31f4 <usb_serial_read+0xc8>)
	while (count < size && tail != rx_head) {
    315e:	781b      	ldrb	r3, [r3, #0]
    3160:	42a3      	cmp	r3, r4
		if (++tail > RX_NUM) tail = 0;
    3162:	f104 0401 	add.w	r4, r4, #1
	while (count < size && tail != rx_head) {
    3166:	d03f      	beq.n	31e8 <usb_serial_read+0xbc>
		if (++tail > RX_NUM) tail = 0;
    3168:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
    316a:	4b23      	ldr	r3, [pc, #140]	; (31f8 <usb_serial_read+0xcc>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    316c:	4640      	mov	r0, r8
		if (++tail > RX_NUM) tail = 0;
    316e:	bf28      	it	cs
    3170:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    3172:	5d1e      	ldrb	r6, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    3174:	f839 c016 	ldrh.w	ip, [r9, r6, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    3178:	eb0c 2346 	add.w	r3, ip, r6, lsl #9
    317c:	4419      	add	r1, r3
		uint32_t avail = rx_count[i] - rx_index[i];
    317e:	4b1f      	ldr	r3, [pc, #124]	; (31fc <usb_serial_read+0xd0>)
    3180:	f833 5016 	ldrh.w	r5, [r3, r6, lsl #1]
    3184:	eba5 050c 	sub.w	r5, r5, ip
		if (avail > len) {
    3188:	42aa      	cmp	r2, r5
    318a:	d21c      	bcs.n	31c6 <usb_serial_read+0x9a>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    318c:	eb0c 2c46 	add.w	ip, ip, r6, lsl #9
    3190:	4918      	ldr	r1, [pc, #96]	; (31f4 <usb_serial_read+0xc8>)
			rx_available -= len;
    3192:	4c1b      	ldr	r4, [pc, #108]	; (3200 <usb_serial_read+0xd4>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    3194:	4461      	add	r1, ip
    3196:	9201      	str	r2, [sp, #4]
    3198:	f7fe fe38 	bl	1e0c <memcpy>
			rx_available -= len;
    319c:	6821      	ldr	r1, [r4, #0]
			rx_index[i] += len;
    319e:	f839 5016 	ldrh.w	r5, [r9, r6, lsl #1]
	return count;
    31a2:	4658      	mov	r0, fp
			rx_index[i] += len;
    31a4:	9a01      	ldr	r2, [sp, #4]
			rx_available -= len;
    31a6:	eba1 010b 	sub.w	r1, r1, fp
			rx_index[i] += len;
    31aa:	442a      	add	r2, r5
			rx_available -= len;
    31ac:	4439      	add	r1, r7
			rx_index[i] += len;
    31ae:	f829 2016 	strh.w	r2, [r9, r6, lsl #1]
			rx_available -= len;
    31b2:	6021      	str	r1, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
    31b4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    31b8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    31bc:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
    31c0:	b003      	add	sp, #12
    31c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    31c6:	462a      	mov	r2, r5
			count += avail;
    31c8:	442f      	add	r7, r5
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    31ca:	f7fe fe1f 	bl	1e0c <memcpy>
			rx_available -= avail;
    31ce:	490c      	ldr	r1, [pc, #48]	; (3200 <usb_serial_read+0xd4>)
			rx_tail = tail;
    31d0:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    31d2:	4630      	mov	r0, r6
			rx_available -= avail;
    31d4:	680a      	ldr	r2, [r1, #0]
			p += avail;
    31d6:	44a8      	add	r8, r5
			rx_available -= avail;
    31d8:	1b52      	subs	r2, r2, r5
    31da:	600a      	str	r2, [r1, #0]
			rx_tail = tail;
    31dc:	f88a 3000 	strb.w	r3, [sl]
			rx_queue_transfer(i);
    31e0:	f7ff fd74 	bl	2ccc <rx_queue_transfer>
	while (count < size && tail != rx_head) {
    31e4:	45bb      	cmp	fp, r7
    31e6:	d8b6      	bhi.n	3156 <usb_serial_read+0x2a>
	return count;
    31e8:	4638      	mov	r0, r7
    31ea:	e7e3      	b.n	31b4 <usb_serial_read+0x88>
	while (count < size && tail != rx_head) {
    31ec:	4608      	mov	r0, r1
    31ee:	e7e1      	b.n	31b4 <usb_serial_read+0x88>
    31f0:	20002111 	.word	0x20002111
    31f4:	20200080 	.word	0x20200080
    31f8:	200020c0 	.word	0x200020c0
    31fc:	200020a0 	.word	0x200020a0
    3200:	2000209c 	.word	0x2000209c
    3204:	20002112 	.word	0x20002112
    3208:	200020b0 	.word	0x200020b0

0000320c <usb_serial_peekchar>:
	if (tail == rx_head) return -1;
    320c:	4b0b      	ldr	r3, [pc, #44]	; (323c <usb_serial_peekchar+0x30>)
	uint32_t tail = rx_tail;
    320e:	4a0c      	ldr	r2, [pc, #48]	; (3240 <usb_serial_peekchar+0x34>)
    3210:	7812      	ldrb	r2, [r2, #0]
	if (tail == rx_head) return -1;
    3212:	7819      	ldrb	r1, [r3, #0]
	uint32_t tail = rx_tail;
    3214:	b2d3      	uxtb	r3, r2
	if (tail == rx_head) return -1;
    3216:	428a      	cmp	r2, r1
    3218:	d00d      	beq.n	3236 <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    321a:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    321c:	4809      	ldr	r0, [pc, #36]	; (3244 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    321e:	4a0a      	ldr	r2, [pc, #40]	; (3248 <usb_serial_peekchar+0x3c>)
	if (++tail > RX_NUM) tail = 0;
    3220:	2b09      	cmp	r3, #9
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    3222:	490a      	ldr	r1, [pc, #40]	; (324c <usb_serial_peekchar+0x40>)
	if (++tail > RX_NUM) tail = 0;
    3224:	bf28      	it	cs
    3226:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    3228:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    322a:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    322e:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    3232:	5c58      	ldrb	r0, [r3, r1]
    3234:	4770      	bx	lr
	if (tail == rx_head) return -1;
    3236:	f04f 30ff 	mov.w	r0, #4294967295
}
    323a:	4770      	bx	lr
    323c:	20002111 	.word	0x20002111
    3240:	20002112 	.word	0x20002112
    3244:	200020c0 	.word	0x200020c0
    3248:	20200080 	.word	0x20200080
    324c:	200020b0 	.word	0x200020b0

00003250 <usb_serial_available>:
	uint32_t n = rx_available;
    3250:	4b04      	ldr	r3, [pc, #16]	; (3264 <usb_serial_available+0x14>)
{
    3252:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
    3254:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
    3256:	b10c      	cbz	r4, 325c <usb_serial_available+0xc>
}
    3258:	4620      	mov	r0, r4
    325a:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
    325c:	f000 f8e0 	bl	3420 <yield>
}
    3260:	4620      	mov	r0, r4
    3262:	bd10      	pop	{r4, pc}
    3264:	2000209c 	.word	0x2000209c

00003268 <usb_serial_flush_input>:
{
    3268:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    326c:	4e14      	ldr	r6, [pc, #80]	; (32c0 <usb_serial_flush_input+0x58>)
	while (tail != rx_head) {
    326e:	4d15      	ldr	r5, [pc, #84]	; (32c4 <usb_serial_flush_input+0x5c>)
	uint32_t tail = rx_tail;
    3270:	7833      	ldrb	r3, [r6, #0]
	while (tail != rx_head) {
    3272:	782a      	ldrb	r2, [r5, #0]
    3274:	4293      	cmp	r3, r2
    3276:	d021      	beq.n	32bc <usb_serial_flush_input+0x54>
    3278:	b2dc      	uxtb	r4, r3
    327a:	f8df 9050 	ldr.w	r9, [pc, #80]	; 32cc <usb_serial_flush_input+0x64>
    327e:	f8df b050 	ldr.w	fp, [pc, #80]	; 32d0 <usb_serial_flush_input+0x68>
    3282:	f8df 8050 	ldr.w	r8, [pc, #80]	; 32d4 <usb_serial_flush_input+0x6c>
    3286:	4f10      	ldr	r7, [pc, #64]	; (32c8 <usb_serial_flush_input+0x60>)
		if (++tail > RX_NUM) tail = 0;
    3288:	3401      	adds	r4, #1
    328a:	2c08      	cmp	r4, #8
		rx_tail = tail;
    328c:	fa5f fa84 	uxtb.w	sl, r4
		if (++tail > RX_NUM) tail = 0;
    3290:	d901      	bls.n	3296 <usb_serial_flush_input+0x2e>
    3292:	2400      	movs	r4, #0
    3294:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    3296:	f819 0004 	ldrb.w	r0, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    329a:	f8db 3000 	ldr.w	r3, [fp]
    329e:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
    32a2:	f837 1010 	ldrh.w	r1, [r7, r0, lsl #1]
    32a6:	1a52      	subs	r2, r2, r1
    32a8:	1a9b      	subs	r3, r3, r2
    32aa:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    32ae:	f7ff fd0d 	bl	2ccc <rx_queue_transfer>
		rx_tail = tail;
    32b2:	f886 a000 	strb.w	sl, [r6]
	while (tail != rx_head) {
    32b6:	782b      	ldrb	r3, [r5, #0]
    32b8:	42a3      	cmp	r3, r4
    32ba:	d1e5      	bne.n	3288 <usb_serial_flush_input+0x20>
}
    32bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    32c0:	20002112 	.word	0x20002112
    32c4:	20002111 	.word	0x20002111
    32c8:	200020b0 	.word	0x200020b0
    32cc:	200020c0 	.word	0x200020c0
    32d0:	2000209c 	.word	0x2000209c
    32d4:	200020a0 	.word	0x200020a0

000032d8 <usb_serial_getchar>:
{
    32d8:	b500      	push	{lr}
    32da:	b083      	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
    32dc:	2101      	movs	r1, #1
    32de:	f10d 0007 	add.w	r0, sp, #7
    32e2:	f7ff ff23 	bl	312c <usb_serial_read>
    32e6:	b120      	cbz	r0, 32f2 <usb_serial_getchar+0x1a>
    32e8:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
    32ec:	b003      	add	sp, #12
    32ee:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
    32f2:	f04f 30ff 	mov.w	r0, #4294967295
    32f6:	e7f9      	b.n	32ec <usb_serial_getchar+0x14>

000032f8 <usb_serial_putchar>:
	if (!usb_configuration) return 0;
    32f8:	4b09      	ldr	r3, [pc, #36]	; (3320 <usb_serial_putchar+0x28>)
{
    32fa:	b500      	push	{lr}
    32fc:	b083      	sub	sp, #12
	if (!usb_configuration) return 0;
    32fe:	781b      	ldrb	r3, [r3, #0]
{
    3300:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!usb_configuration) return 0;
    3304:	b13b      	cbz	r3, 3316 <usb_serial_putchar+0x1e>
    3306:	2101      	movs	r1, #1
    3308:	f10d 0007 	add.w	r0, sp, #7
    330c:	f7ff fdb0 	bl	2e70 <usb_serial_write.part.0>
}
    3310:	b003      	add	sp, #12
    3312:	f85d fb04 	ldr.w	pc, [sp], #4
    3316:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    331a:	b003      	add	sp, #12
    331c:	f85d fb04 	ldr.w	pc, [sp], #4
    3320:	20002118 	.word	0x20002118

00003324 <usb_serial_write>:
	if (!usb_configuration) return 0;
    3324:	4b04      	ldr	r3, [pc, #16]	; (3338 <usb_serial_write+0x14>)
    3326:	781b      	ldrb	r3, [r3, #0]
    3328:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    332c:	b10b      	cbz	r3, 3332 <usb_serial_write+0xe>
    332e:	f7ff bd9f 	b.w	2e70 <usb_serial_write.part.0>
}
    3332:	4610      	mov	r0, r2
    3334:	4770      	bx	lr
    3336:	bf00      	nop
    3338:	20002118 	.word	0x20002118

0000333c <usb_serial_write_buffer_free>:
{
    333c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    3340:	2400      	movs	r4, #0
	tx_noautoflush = 1;
    3342:	f8df 8044 	ldr.w	r8, [pc, #68]	; 3388 <usb_serial_write_buffer_free+0x4c>
    3346:	2301      	movs	r3, #1
    3348:	4d0d      	ldr	r5, [pc, #52]	; (3380 <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    334a:	4627      	mov	r7, r4
    334c:	4e0d      	ldr	r6, [pc, #52]	; (3384 <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
    334e:	f888 3000 	strb.w	r3, [r8]
		if (i == tx_head) continue;
    3352:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    3354:	4628      	mov	r0, r5
	for (uint32_t i=0; i < TX_NUM; i++) {
    3356:	3520      	adds	r5, #32
		if (i == tx_head) continue;
    3358:	42a3      	cmp	r3, r4
	for (uint32_t i=0; i < TX_NUM; i++) {
    335a:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    335e:	d005      	beq.n	336c <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    3360:	f7ff fc76 	bl	2c50 <usb_transfer_status>
    3364:	0603      	lsls	r3, r0, #24
    3366:	bf58      	it	pl
    3368:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    336c:	2c04      	cmp	r4, #4
    336e:	d1f0      	bne.n	3352 <usb_serial_write_buffer_free+0x16>
	asm("dsb" ::: "memory");
    3370:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    3374:	2300      	movs	r3, #0
}
    3376:	4638      	mov	r0, r7
	tx_noautoflush = 0;
    3378:	f888 3000 	strb.w	r3, [r8]
}
    337c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3380:	20001c00 	.word	0x20001c00
    3384:	20002115 	.word	0x20002115
    3388:	20002116 	.word	0x20002116

0000338c <usb_serial_flush_output>:
{
    338c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    3390:	4b1d      	ldr	r3, [pc, #116]	; (3408 <usb_serial_flush_output+0x7c>)
    3392:	781b      	ldrb	r3, [r3, #0]
    3394:	b113      	cbz	r3, 339c <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    3396:	4d1d      	ldr	r5, [pc, #116]	; (340c <usb_serial_flush_output+0x80>)
    3398:	882a      	ldrh	r2, [r5, #0]
    339a:	b90a      	cbnz	r2, 33a0 <usb_serial_flush_output+0x14>
}
    339c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	transfer_t *xfer = tx_transfer + tx_head;
    33a0:	4e1b      	ldr	r6, [pc, #108]	; (3410 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    33a2:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    33a6:	491b      	ldr	r1, [pc, #108]	; (3414 <usb_serial_flush_output+0x88>)
    33a8:	7833      	ldrb	r3, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    33aa:	464a      	mov	r2, r9
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    33ac:	4c1a      	ldr	r4, [pc, #104]	; (3418 <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    33ae:	eb01 1843 	add.w	r8, r1, r3, lsl #5
	tx_noautoflush = 1;
    33b2:	4f1a      	ldr	r7, [pc, #104]	; (341c <usb_serial_flush_output+0x90>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    33b4:	eb04 24c3 	add.w	r4, r4, r3, lsl #11
	tx_noautoflush = 1;
    33b8:	2301      	movs	r3, #1
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    33ba:	4640      	mov	r0, r8
	tx_noautoflush = 1;
    33bc:	703b      	strb	r3, [r7, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    33be:	4621      	mov	r1, r4
    33c0:	2300      	movs	r3, #0
    33c2:	f7ff fc0b 	bl	2bdc <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    33c6:	eb04 0209 	add.w	r2, r4, r9
	asm("dsb");
    33ca:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    33ce:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    33d2:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    33d6:	3420      	adds	r4, #32
	} while (location < end_addr);
    33d8:	42a2      	cmp	r2, r4
    33da:	d8fa      	bhi.n	33d2 <usb_serial_flush_output+0x46>
	asm("dsb");
    33dc:	f3bf 8f4f 	dsb	sy
	asm("isb");
    33e0:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    33e4:	2004      	movs	r0, #4
    33e6:	4641      	mov	r1, r8
    33e8:	f7ff fc10 	bl	2c0c <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    33ec:	7833      	ldrb	r3, [r6, #0]
    33ee:	3301      	adds	r3, #1
    33f0:	b2db      	uxtb	r3, r3
    33f2:	2b03      	cmp	r3, #3
    33f4:	bf88      	it	hi
    33f6:	2300      	movhi	r3, #0
    33f8:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    33fa:	2300      	movs	r3, #0
    33fc:	802b      	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
    33fe:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    3402:	703b      	strb	r3, [r7, #0]
}
    3404:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3408:	20002118 	.word	0x20002118
    340c:	20002102 	.word	0x20002102
    3410:	20002115 	.word	0x20002115
    3414:	20001c00 	.word	0x20001c00
    3418:	20201080 	.word	0x20201080
    341c:	20002116 	.word	0x20002116

00003420 <yield>:
uint8_t yield_active_check_flags = 0;


void yield(void) __attribute__ ((weak));
void yield(void)
{
    3420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t check_flags = yield_active_check_flags;
    3424:	4b2d      	ldr	r3, [pc, #180]	; (34dc <yield+0xbc>)
    3426:	781e      	ldrb	r6, [r3, #0]
	if (!check_flags) return;	// nothing to do
    3428:	b166      	cbz	r6, 3444 <yield+0x24>

	// TODO: do nothing if called from interrupt

	static uint8_t running=0;
	if (running) return; // TODO: does this need to be atomic?
    342a:	4f2d      	ldr	r7, [pc, #180]	; (34e0 <yield+0xc0>)
    342c:	783b      	ldrb	r3, [r7, #0]
    342e:	b94b      	cbnz	r3, 3444 <yield+0x24>
	running = 1;
    3430:	2301      	movs	r3, #1

	// USB Serial - Add hack to minimize impact...
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    3432:	07f1      	lsls	r1, r6, #31
	running = 1;
    3434:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    3436:	d443      	bmi.n	34c0 <yield+0xa0>
		if (SerialUSB2.available()) serialEventUSB2();
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    3438:	07b2      	lsls	r2, r6, #30
    343a:	d426      	bmi.n	348a <yield+0x6a>
		HardwareSerialIMXRT::processSerialEventsList();
	}

	running = 0;
    343c:	2300      	movs	r3, #0
    343e:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_EVENT_RESPONDER) {
    3440:	0773      	lsls	r3, r6, #29
    3442:	d401      	bmi.n	3448 <yield+0x28>
		EventResponder::runFromYield();
	}
};
    3444:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    3448:	4b26      	ldr	r3, [pc, #152]	; (34e4 <yield+0xc4>)
    344a:	681a      	ldr	r2, [r3, #0]
    344c:	2a00      	cmp	r2, #0
    344e:	d0f9      	beq.n	3444 <yield+0x24>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    3450:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    3454:	2a00      	cmp	r2, #0
    3456:	d1f5      	bne.n	3444 <yield+0x24>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3458:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    345c:	b672      	cpsid	i
		EventResponder *first = firstYield;
    345e:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    3460:	2800      	cmp	r0, #0
    3462:	d034      	beq.n	34ce <yield+0xae>
		if (runningFromYield) {
    3464:	4c20      	ldr	r4, [pc, #128]	; (34e8 <yield+0xc8>)
    3466:	7821      	ldrb	r1, [r4, #0]
    3468:	2900      	cmp	r1, #0
    346a:	d130      	bne.n	34ce <yield+0xae>
		runningFromYield = true;
    346c:	2201      	movs	r2, #1
    346e:	7022      	strb	r2, [r4, #0]
		firstYield = first->_next;
    3470:	6942      	ldr	r2, [r0, #20]
    3472:	601a      	str	r2, [r3, #0]
		if (firstYield) {
    3474:	2a00      	cmp	r2, #0
    3476:	d02e      	beq.n	34d6 <yield+0xb6>
			firstYield->_prev = nullptr;
    3478:	6191      	str	r1, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    347a:	b905      	cbnz	r5, 347e <yield+0x5e>
    347c:	b662      	cpsie	i
		first->_triggered = false;
    347e:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    3480:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    3482:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    3484:	4798      	blx	r3
		runningFromYield = false;
    3486:	7025      	strb	r5, [r4, #0]
    3488:	e7dc      	b.n	3444 <yield+0x24>

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    348a:	f8df 8064 	ldr.w	r8, [pc, #100]	; 34f0 <yield+0xd0>
    348e:	f898 3000 	ldrb.w	r3, [r8]
    3492:	2b00      	cmp	r3, #0
    3494:	d0d2      	beq.n	343c <yield+0x1c>
    3496:	2500      	movs	r5, #0
    3498:	f8df 9058 	ldr.w	r9, [pc, #88]	; 34f4 <yield+0xd4>
    349c:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    349e:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    34a2:	3501      	adds	r5, #1
	static HardwareSerialIMXRT 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    34a4:	6823      	ldr	r3, [r4, #0]
    34a6:	4620      	mov	r0, r4
    34a8:	691b      	ldr	r3, [r3, #16]
    34aa:	4798      	blx	r3
    34ac:	b110      	cbz	r0, 34b4 <yield+0x94>
    34ae:	6963      	ldr	r3, [r4, #20]
    34b0:	689b      	ldr	r3, [r3, #8]
    34b2:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    34b4:	f898 2000 	ldrb.w	r2, [r8]
    34b8:	b2eb      	uxtb	r3, r5
    34ba:	429a      	cmp	r2, r3
    34bc:	d8ef      	bhi.n	349e <yield+0x7e>
    34be:	e7bd      	b.n	343c <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    34c0:	f7ff fec6 	bl	3250 <usb_serial_available>
		if (Serial.available()) serialEvent();
    34c4:	2800      	cmp	r0, #0
    34c6:	d0b7      	beq.n	3438 <yield+0x18>
    34c8:	f3af 8000 	nop.w
    34cc:	e7b4      	b.n	3438 <yield+0x18>
		if (doit) __enable_irq();
    34ce:	2d00      	cmp	r5, #0
    34d0:	d1b8      	bne.n	3444 <yield+0x24>
    34d2:	b662      	cpsie	i
    34d4:	e7b6      	b.n	3444 <yield+0x24>
			lastYield = nullptr;
    34d6:	4b05      	ldr	r3, [pc, #20]	; (34ec <yield+0xcc>)
    34d8:	601a      	str	r2, [r3, #0]
    34da:	e7ce      	b.n	347a <yield+0x5a>
    34dc:	2000211b 	.word	0x2000211b
    34e0:	2000210e 	.word	0x2000210e
    34e4:	20001d08 	.word	0x20001d08
    34e8:	2000210c 	.word	0x2000210c
    34ec:	20001d14 	.word	0x20001d14
    34f0:	2000210d 	.word	0x2000210d
    34f4:	20001d18 	.word	0x20001d18

000034f8 <EventResponder::runFromInterrupt()>:
{
    34f8:	b570      	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    34fa:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    34fe:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    3500:	4c0c      	ldr	r4, [pc, #48]	; (3534 <EventResponder::runFromInterrupt()+0x3c>)
    3502:	6820      	ldr	r0, [r4, #0]
		if (first) {
    3504:	b180      	cbz	r0, 3528 <EventResponder::runFromInterrupt()+0x30>
				lastInterrupt = nullptr;
    3506:	4e0c      	ldr	r6, [pc, #48]	; (3538 <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    3508:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    350a:	6943      	ldr	r3, [r0, #20]
    350c:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    350e:	b173      	cbz	r3, 352e <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    3510:	619d      	str	r5, [r3, #24]
		if (doit) __enable_irq();
    3512:	b902      	cbnz	r2, 3516 <EventResponder::runFromInterrupt()+0x1e>
    3514:	b662      	cpsie	i
			(*(first->_function))(*first);
    3516:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    3518:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    351a:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    351c:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    3520:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    3522:	6820      	ldr	r0, [r4, #0]
		if (first) {
    3524:	2800      	cmp	r0, #0
    3526:	d1f0      	bne.n	350a <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    3528:	b902      	cbnz	r2, 352c <EventResponder::runFromInterrupt()+0x34>
    352a:	b662      	cpsie	i
}
    352c:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    352e:	6033      	str	r3, [r6, #0]
    3530:	e7ef      	b.n	3512 <EventResponder::runFromInterrupt()+0x1a>
    3532:	bf00      	nop
    3534:	20001d10 	.word	0x20001d10
    3538:	20001d0c 	.word	0x20001d0c

0000353c <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    353c:	f7ff bfdc 	b.w	34f8 <EventResponder::runFromInterrupt()>

00003540 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    3540:	4904      	ldr	r1, [pc, #16]	; (3554 <systick_isr+0x14>)
	systick_millis_count++;
    3542:	4a05      	ldr	r2, [pc, #20]	; (3558 <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
    3544:	6849      	ldr	r1, [r1, #4]
    3546:	4b05      	ldr	r3, [pc, #20]	; (355c <systick_isr+0x1c>)
    3548:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    354a:	6813      	ldr	r3, [r2, #0]
    354c:	3301      	adds	r3, #1
    354e:	6013      	str	r3, [r2, #0]
}
    3550:	4770      	bx	lr
    3552:	bf00      	nop
    3554:	e0001000 	.word	0xe0001000
    3558:	200020e4 	.word	0x200020e4
    355c:	200020e0 	.word	0x200020e0

00003560 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    3560:	49a2      	ldr	r1, [pc, #648]	; (37ec <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    3562:	4ba3      	ldr	r3, [pc, #652]	; (37f0 <set_arm_clock+0x290>)
	if (frequency > 528000000) {
    3564:	4288      	cmp	r0, r1
{
    3566:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
    356a:	4ca2      	ldr	r4, [pc, #648]	; (37f4 <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    356c:	695e      	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    356e:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    3570:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
    3574:	d91b      	bls.n	35ae <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    3576:	4ba0      	ldr	r3, [pc, #640]	; (37f8 <set_arm_clock+0x298>)
    3578:	4298      	cmp	r0, r3
    357a:	f240 8102 	bls.w	3782 <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    357e:	1ac3      	subs	r3, r0, r3
    3580:	499e      	ldr	r1, [pc, #632]	; (37fc <set_arm_clock+0x29c>)
    3582:	0a1b      	lsrs	r3, r3, #8
    3584:	fba1 1303 	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    3588:	f240 6127 	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    358c:	09db      	lsrs	r3, r3, #7
    358e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3592:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3596:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    359a:	428b      	cmp	r3, r1
    359c:	bf28      	it	cs
    359e:	460b      	movcs	r3, r1
    35a0:	f5a3 7748 	sub.w	r7, r3, #800	; 0x320
    35a4:	4b96      	ldr	r3, [pc, #600]	; (3800 <set_arm_clock+0x2a0>)
    35a6:	fba3 3707 	umull	r3, r7, r3, r7
    35aa:	08ff      	lsrs	r7, r7, #3
    35ac:	e004      	b.n	35b8 <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
    35ae:	4f95      	ldr	r7, [pc, #596]	; (3804 <set_arm_clock+0x2a4>)
    35b0:	42b8      	cmp	r0, r7
    35b2:	bf8c      	ite	hi
    35b4:	270e      	movhi	r7, #14
    35b6:	2706      	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    35b8:	498d      	ldr	r1, [pc, #564]	; (37f0 <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    35ba:	f008 091f 	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    35be:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    35c2:	45b9      	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    35c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    35c8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    35cc:	d20c      	bcs.n	35e8 <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    35ce:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    35d2:	f5a1 21f8 	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    35d6:	ea48 0807 	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
    35da:	f8c1 800c 	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    35de:	680b      	ldr	r3, [r1, #0]
    35e0:	2b00      	cmp	r3, #0
    35e2:	dafc      	bge.n	35de <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    35e4:	f008 091f 	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    35e8:	f016 7300 	ands.w	r3, r6, #33554432	; 0x2000000
    35ec:	d124      	bne.n	3638 <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    35ee:	4986      	ldr	r1, [pc, #536]	; (3808 <set_arm_clock+0x2a8>)
    35f0:	690c      	ldr	r4, [r1, #16]
    35f2:	4986      	ldr	r1, [pc, #536]	; (380c <set_arm_clock+0x2ac>)
    35f4:	43a1      	bics	r1, r4
    35f6:	f000 80ea 	beq.w	37ce <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    35fa:	f482 5180 	eor.w	r1, r2, #4096	; 0x1000
    35fe:	4634      	mov	r4, r6
    3600:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    3604:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    3608:	d004      	beq.n	3614 <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    360a:	f026 5660 	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    360e:	431e      	orrs	r6, r3
			CCM_CBCDR = cbcdr;
    3610:	4b77      	ldr	r3, [pc, #476]	; (37f0 <set_arm_clock+0x290>)
    3612:	615e      	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    3614:	f411 5f40 	tst.w	r1, #12288	; 0x3000
    3618:	d007      	beq.n	362a <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    361a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
    361e:	4974      	ldr	r1, [pc, #464]	; (37f0 <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    3620:	432a      	orrs	r2, r5
			CCM_CBCMR = cbcmr;
    3622:	618a      	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    3624:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    3626:	071a      	lsls	r2, r3, #28
    3628:	d4fc      	bmi.n	3624 <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    362a:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    362e:	4a70      	ldr	r2, [pc, #448]	; (37f0 <set_arm_clock+0x290>)
    3630:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    3632:	6c93      	ldr	r3, [r2, #72]	; 0x48
    3634:	069b      	lsls	r3, r3, #26
    3636:	d4fc      	bmi.n	3632 <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
    3638:	4c75      	ldr	r4, [pc, #468]	; (3810 <set_arm_clock+0x2b0>)
    363a:	42a0      	cmp	r0, r4
    363c:	f200 80ce 	bhi.w	37dc <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
    3640:	f04f 0c01 	mov.w	ip, #1
    3644:	4601      	mov	r1, r0
	uint32_t div_arm = 1;
    3646:	4663      	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
    3648:	fb03 1201 	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
    364c:	f103 0e01 	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
    3650:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    3654:	42a2      	cmp	r2, r4
    3656:	d818      	bhi.n	368a <set_arm_clock+0x12a>
		if (div_arm < 8) {
    3658:	f1be 0f08 	cmp.w	lr, #8
				div_arm = 1;
    365c:	f04f 0301 	mov.w	r3, #1
		if (div_arm < 8) {
    3660:	f040 808d 	bne.w	377e <set_arm_clock+0x21e>
			if (div_ahb < 5) {
    3664:	f1bc 0f04 	cmp.w	ip, #4
    3668:	f200 8091 	bhi.w	378e <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
    366c:	180a      	adds	r2, r1, r0
    366e:	42a2      	cmp	r2, r4
    3670:	f200 80a4 	bhi.w	37bc <set_arm_clock+0x25c>
    3674:	fb05 f100 	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
    3678:	46ac      	mov	ip, r5
			div_arm = div_arm + 1;
    367a:	f103 0e01 	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    367e:	fb03 1201 	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
    3682:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    3686:	42a2      	cmp	r2, r4
    3688:	d9e6      	bls.n	3658 <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    368a:	f10c 31ff 	add.w	r1, ip, #4294967295
    368e:	028c      	lsls	r4, r1, #10
    3690:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    3694:	485f      	ldr	r0, [pc, #380]	; (3814 <set_arm_clock+0x2b4>)
    3696:	4410      	add	r0, r2
	if (mult > 108) mult = 108;
    3698:	4a5f      	ldr	r2, [pc, #380]	; (3818 <set_arm_clock+0x2b8>)
    369a:	4290      	cmp	r0, r2
    369c:	d97f      	bls.n	379e <set_arm_clock+0x23e>
    369e:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 3844 <set_arm_clock+0x2e4>
    36a2:	226c      	movs	r2, #108	; 0x6c
    36a4:	485d      	ldr	r0, [pc, #372]	; (381c <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    36a6:	4d58      	ldr	r5, [pc, #352]	; (3808 <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    36a8:	fbb0 f0fe 	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    36ac:	f8d5 e000 	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
    36b0:	fbb0 f0fc 	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    36b4:	f8df c190 	ldr.w	ip, [pc, #400]	; 3848 <set_arm_clock+0x2e8>
    36b8:	ea0e 0c0c 	and.w	ip, lr, ip
    36bc:	45d4      	cmp	ip, sl
    36be:	d009      	beq.n	36d4 <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    36c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    36c4:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    36c8:	f8c5 c000 	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    36cc:	602a      	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    36ce:	682a      	ldr	r2, [r5, #0]
    36d0:	2a00      	cmp	r2, #0
    36d2:	dafc      	bge.n	36ce <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    36d4:	4a46      	ldr	r2, [pc, #280]	; (37f0 <set_arm_clock+0x290>)
    36d6:	6915      	ldr	r5, [r2, #16]
    36d8:	f005 0507 	and.w	r5, r5, #7
    36dc:	429d      	cmp	r5, r3
    36de:	d003      	beq.n	36e8 <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    36e0:	6113      	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    36e2:	6c93      	ldr	r3, [r2, #72]	; 0x48
    36e4:	03dd      	lsls	r5, r3, #15
    36e6:	d4fc      	bmi.n	36e2 <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    36e8:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
    36ec:	d009      	beq.n	3702 <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    36ee:	f426 56e0 	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    36f2:	f404 54e0 	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
    36f6:	4a3e      	ldr	r2, [pc, #248]	; (37f0 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    36f8:	4326      	orrs	r6, r4
		CCM_CBCDR = cbcdr;
    36fa:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    36fc:	6c93      	ldr	r3, [r2, #72]	; 0x48
    36fe:	0799      	lsls	r1, r3, #30
    3700:	d4fc      	bmi.n	36fc <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    3702:	4947      	ldr	r1, [pc, #284]	; (3820 <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
    3704:	4a47      	ldr	r2, [pc, #284]	; (3824 <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    3706:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    3708:	4291      	cmp	r1, r2
    370a:	d83c      	bhi.n	3786 <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    370c:	4b46      	ldr	r3, [pc, #280]	; (3828 <set_arm_clock+0x2c8>)
    370e:	09c9      	lsrs	r1, r1, #7
    3710:	fba3 3101 	umull	r3, r1, r3, r1
    3714:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    3716:	1e4b      	subs	r3, r1, #1
    3718:	021b      	lsls	r3, r3, #8
    371a:	ea86 0203 	eor.w	r2, r6, r3
    371e:	f412 7f40 	tst.w	r2, #768	; 0x300
    3722:	d006      	beq.n	3732 <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    3724:	f426 7640 	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    3728:	f403 7340 	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
    372c:	4a30      	ldr	r2, [pc, #192]	; (37f0 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    372e:	4333      	orrs	r3, r6
		CCM_CBCDR = cbcdr;
    3730:	6153      	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    3732:	4a2f      	ldr	r2, [pc, #188]	; (37f0 <set_arm_clock+0x290>)
    3734:	6953      	ldr	r3, [r2, #20]
    3736:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
    373a:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    373c:	6c93      	ldr	r3, [r2, #72]	; 0x48
    373e:	069b      	lsls	r3, r3, #26
    3740:	d4fc      	bmi.n	373c <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    3742:	4b3a      	ldr	r3, [pc, #232]	; (382c <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    3744:	454f      	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    3746:	fba3 2300 	umull	r2, r3, r3, r0
    374a:	f04f 32ff 	mov.w	r2, #4294967295
    374e:	ea4f 4393 	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
    3752:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    3756:	fbb2 f3f3 	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
    375a:	4a35      	ldr	r2, [pc, #212]	; (3830 <set_arm_clock+0x2d0>)
    375c:	6010      	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    375e:	4a35      	ldr	r2, [pc, #212]	; (3834 <set_arm_clock+0x2d4>)
    3760:	6011      	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    3762:	4a35      	ldr	r2, [pc, #212]	; (3838 <set_arm_clock+0x2d8>)
    3764:	6013      	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    3766:	d208      	bcs.n	377a <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    3768:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    376c:	4a21      	ldr	r2, [pc, #132]	; (37f4 <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    376e:	ea48 0707 	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
    3772:	60d7      	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    3774:	6813      	ldr	r3, [r2, #0]
    3776:	2b00      	cmp	r3, #0
    3778:	dafc      	bge.n	3774 <set_arm_clock+0x214>
	}

	return frequency;
}
    377a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    377e:	4673      	mov	r3, lr
    3780:	e762      	b.n	3648 <set_arm_clock+0xe8>
    3782:	2712      	movs	r7, #18
    3784:	e718      	b.n	35b8 <set_arm_clock+0x58>
    3786:	f44f 7340 	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
    378a:	2104      	movs	r1, #4
    378c:	e7c5      	b.n	371a <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    378e:	f10c 31ff 	add.w	r1, ip, #4294967295
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    3792:	4820      	ldr	r0, [pc, #128]	; (3814 <set_arm_clock+0x2b4>)
    3794:	2307      	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    3796:	028c      	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    3798:	4410      	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    379a:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    379e:	4a27      	ldr	r2, [pc, #156]	; (383c <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    37a0:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 384c <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    37a4:	fba2 2000 	umull	r2, r0, r2, r0
    37a8:	0d02      	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
    37aa:	4825      	ldr	r0, [pc, #148]	; (3840 <set_arm_clock+0x2e0>)
    37ac:	2a36      	cmp	r2, #54	; 0x36
    37ae:	bf38      	it	cc
    37b0:	2236      	movcc	r2, #54	; 0x36
    37b2:	fb02 f000 	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    37b6:	ea42 0a0a 	orr.w	sl, r2, sl
    37ba:	e774      	b.n	36a6 <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    37bc:	ea4f 248c 	mov.w	r4, ip, lsl #10
    37c0:	2300      	movs	r3, #0
    37c2:	ea86 218c 	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
    37c6:	f04f 0e01 	mov.w	lr, #1
				div_ahb = div_ahb + 1;
    37ca:	46ac      	mov	ip, r5
    37cc:	e762      	b.n	3694 <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    37ce:	461d      	mov	r5, r3
    37d0:	f086 54c0 	eor.w	r4, r6, #402653184	; 0x18000000
    37d4:	4611      	mov	r1, r2
    37d6:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
    37da:	e713      	b.n	3604 <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
    37dc:	2400      	movs	r4, #0
	uint32_t div_ahb = 1;
    37de:	f04f 0c01 	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    37e2:	4602      	mov	r2, r0
    37e4:	4631      	mov	r1, r6
    37e6:	4623      	mov	r3, r4
	uint32_t div_arm = 1;
    37e8:	46e6      	mov	lr, ip
    37ea:	e753      	b.n	3694 <set_arm_clock+0x134>
    37ec:	1f78a400 	.word	0x1f78a400
    37f0:	400fc000 	.word	0x400fc000
    37f4:	40080000 	.word	0x40080000
    37f8:	23c34600 	.word	0x23c34600
    37fc:	004cb223 	.word	0x004cb223
    3800:	51eb851f 	.word	0x51eb851f
    3804:	016e3600 	.word	0x016e3600
    3808:	400d8000 	.word	0x400d8000
    380c:	80003040 	.word	0x80003040
    3810:	269fb1ff 	.word	0x269fb1ff
    3814:	005b8d80 	.word	0x005b8d80
    3818:	4df67eff 	.word	0x4df67eff
    381c:	4d3f6400 	.word	0x4d3f6400
    3820:	08f0d17f 	.word	0x08f0d17f
    3824:	2cb4177f 	.word	0x2cb4177f
    3828:	00e5109f 	.word	0x00e5109f
    382c:	431bde83 	.word	0x431bde83
    3830:	20000fa4 	.word	0x20000fa4
    3834:	20000fa0 	.word	0x20000fa0
    3838:	200020dc 	.word	0x200020dc
    383c:	165e9f81 	.word	0x165e9f81
    3840:	00b71b00 	.word	0x00b71b00
    3844:	8000206c 	.word	0x8000206c
    3848:	8001307f 	.word	0x8001307f
    384c:	80002000 	.word	0x80002000

00003850 <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    3850:	4a07      	ldr	r2, [pc, #28]	; (3870 <rtc_get+0x20>)
    3852:	6a50      	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    3854:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uint32_t hi2 = SNVS_HPRTCMR;
    3856:	4619      	mov	r1, r3
    3858:	4684      	mov	ip, r0
    385a:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    385c:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    385e:	4299      	cmp	r1, r3
    3860:	d1f9      	bne.n	3856 <rtc_get+0x6>
    3862:	4584      	cmp	ip, r0
    3864:	d1f7      	bne.n	3856 <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
    3866:	0bdb      	lsrs	r3, r3, #15
}
    3868:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    386c:	4770      	bx	lr
    386e:	bf00      	nop
    3870:	400d4000 	.word	0x400d4000

00003874 <sm_align_pool>:
{
    3874:	b508      	push	{r3, lr}
	x = spool->pool_size % HEADER_SZ;
    3876:	e9d0 3200 	ldrd	r3, r2, [r0]
	if (!spool->pool || !spool->pool_size) return 0;
    387a:	b15b      	cbz	r3, 3894 <sm_align_pool+0x20>
    387c:	b1ba      	cbz	r2, 38ae <sm_align_pool+0x3a>
	if (spool->pool_size % HEADER_SZ) return 0;
    387e:	4b0f      	ldr	r3, [pc, #60]	; (38bc <sm_align_pool+0x48>)
    3880:	fba3 1302 	umull	r1, r3, r3, r2
    3884:	08db      	lsrs	r3, r3, #3
    3886:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    388a:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    388e:	d10a      	bne.n	38a6 <sm_align_pool+0x32>
	if (smalloc_verify_pool(spool)) return 1;
    3890:	2001      	movs	r0, #1
}
    3892:	bd08      	pop	{r3, pc}
	x = spool->pool_size % HEADER_SZ;
    3894:	4b09      	ldr	r3, [pc, #36]	; (38bc <sm_align_pool+0x48>)
    3896:	fba3 1302 	umull	r1, r3, r3, r2
    389a:	08db      	lsrs	r3, r3, #3
    389c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
    38a0:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    38a4:	d001      	beq.n	38aa <sm_align_pool+0x36>
    38a6:	1ad2      	subs	r2, r2, r3
    38a8:	6042      	str	r2, [r0, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    38aa:	2af0      	cmp	r2, #240	; 0xf0
    38ac:	d8f0      	bhi.n	3890 <sm_align_pool+0x1c>
		errno = ENOSPC;
    38ae:	f001 f8b1 	bl	4a14 <__errno>
    38b2:	221c      	movs	r2, #28
    38b4:	4603      	mov	r3, r0
    38b6:	2000      	movs	r0, #0
    38b8:	601a      	str	r2, [r3, #0]
}
    38ba:	bd08      	pop	{r3, pc}
    38bc:	aaaaaaab 	.word	0xaaaaaaab

000038c0 <sm_set_pool>:
{
    38c0:	b570      	push	{r4, r5, r6, lr}
	if (!spool) {
    38c2:	4604      	mov	r4, r0
    38c4:	b338      	cbz	r0, 3916 <sm_set_pool+0x56>
	if (!new_pool || !new_pool_size) {
    38c6:	b119      	cbz	r1, 38d0 <sm_set_pool+0x10>
    38c8:	fab2 f682 	clz	r6, r2
    38cc:	0976      	lsrs	r6, r6, #5
    38ce:	b9a2      	cbnz	r2, 38fa <sm_set_pool+0x3a>
	if (!spool->pool || !spool->pool_size) return 0;
    38d0:	6820      	ldr	r0, [r4, #0]
    38d2:	b300      	cbz	r0, 3916 <sm_set_pool+0x56>
    38d4:	6862      	ldr	r2, [r4, #4]
    38d6:	b1f2      	cbz	r2, 3916 <sm_set_pool+0x56>
	if (spool->pool_size % HEADER_SZ) return 0;
    38d8:	4b18      	ldr	r3, [pc, #96]	; (393c <sm_set_pool+0x7c>)
    38da:	4919      	ldr	r1, [pc, #100]	; (3940 <sm_set_pool+0x80>)
    38dc:	fb02 f303 	mul.w	r3, r2, r3
    38e0:	ebb1 0fb3 	cmp.w	r1, r3, ror #2
    38e4:	d317      	bcc.n	3916 <sm_set_pool+0x56>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    38e6:	68a3      	ldr	r3, [r4, #8]
    38e8:	b9e3      	cbnz	r3, 3924 <sm_set_pool+0x64>
			memset(spool, 0, sizeof(struct smalloc_pool));
    38ea:	2200      	movs	r2, #0
			return 1;
    38ec:	2301      	movs	r3, #1
			memset(spool, 0, sizeof(struct smalloc_pool));
    38ee:	6022      	str	r2, [r4, #0]
    38f0:	6062      	str	r2, [r4, #4]
    38f2:	60a2      	str	r2, [r4, #8]
    38f4:	60e2      	str	r2, [r4, #12]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    38f6:	4618      	mov	r0, r3
    38f8:	bd70      	pop	{r4, r5, r6, pc}
	spool->pool = new_pool;
    38fa:	461d      	mov	r5, r3
	spool->oomfn = oom_handler;
    38fc:	9b04      	ldr	r3, [sp, #16]
	spool->pool_size = new_pool_size;
    38fe:	e9c0 1200 	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
    3902:	60c3      	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    3904:	f7ff ffb6 	bl	3874 <sm_align_pool>
    3908:	4603      	mov	r3, r0
    390a:	2800      	cmp	r0, #0
    390c:	d0f3      	beq.n	38f6 <sm_set_pool+0x36>
	if (do_zero) {
    390e:	b96d      	cbnz	r5, 392c <sm_set_pool+0x6c>
	return 1;
    3910:	2301      	movs	r3, #1
}
    3912:	4618      	mov	r0, r3
    3914:	bd70      	pop	{r4, r5, r6, pc}
		errno = EINVAL;
    3916:	f001 f87d 	bl	4a14 <__errno>
    391a:	2216      	movs	r2, #22
		return 0;
    391c:	2300      	movs	r3, #0
		errno = EINVAL;
    391e:	6002      	str	r2, [r0, #0]
}
    3920:	4618      	mov	r0, r3
    3922:	bd70      	pop	{r4, r5, r6, pc}
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    3924:	2100      	movs	r1, #0
    3926:	f000 ff3f 	bl	47a8 <memset>
    392a:	e7de      	b.n	38ea <sm_set_pool+0x2a>
		memset(spool->pool, 0, spool->pool_size);
    392c:	6862      	ldr	r2, [r4, #4]
    392e:	4631      	mov	r1, r6
    3930:	6820      	ldr	r0, [r4, #0]
		spool->do_zero = do_zero;
    3932:	60a5      	str	r5, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    3934:	f000 ff38 	bl	47a8 <memset>
	return 1;
    3938:	2301      	movs	r3, #1
    393a:	e7dc      	b.n	38f6 <sm_set_pool+0x36>
    393c:	aaaaaaab 	.word	0xaaaaaaab
    3940:	15555555 	.word	0x15555555

00003944 <__aeabi_atexit>:
    3944:	4603      	mov	r3, r0
    3946:	4608      	mov	r0, r1
    3948:	4619      	mov	r1, r3
    394a:	f000 bcc5 	b.w	42d8 <__cxa_atexit>
    394e:	bf00      	nop

00003950 <malloc>:
    3950:	4b02      	ldr	r3, [pc, #8]	; (395c <malloc+0xc>)
    3952:	4601      	mov	r1, r0
    3954:	6818      	ldr	r0, [r3, #0]
    3956:	f000 b80b 	b.w	3970 <_malloc_r>
    395a:	bf00      	nop
    395c:	20001610 	.word	0x20001610

00003960 <free>:
    3960:	4b02      	ldr	r3, [pc, #8]	; (396c <free+0xc>)
    3962:	4601      	mov	r1, r0
    3964:	6818      	ldr	r0, [r3, #0]
    3966:	f001 bb6d 	b.w	5044 <_free_r>
    396a:	bf00      	nop
    396c:	20001610 	.word	0x20001610

00003970 <_malloc_r>:
    3970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3974:	f101 060b 	add.w	r6, r1, #11
    3978:	2e16      	cmp	r6, #22
    397a:	b083      	sub	sp, #12
    397c:	4604      	mov	r4, r0
    397e:	d824      	bhi.n	39ca <_malloc_r+0x5a>
    3980:	2910      	cmp	r1, #16
    3982:	f200 80ba 	bhi.w	3afa <_malloc_r+0x18a>
    3986:	f000 faa3 	bl	3ed0 <__malloc_lock>
    398a:	2610      	movs	r6, #16
    398c:	2218      	movs	r2, #24
    398e:	2002      	movs	r0, #2
    3990:	4fb5      	ldr	r7, [pc, #724]	; (3c68 <_malloc_r+0x2f8>)
    3992:	443a      	add	r2, r7
    3994:	f1a2 0108 	sub.w	r1, r2, #8
    3998:	6853      	ldr	r3, [r2, #4]
    399a:	428b      	cmp	r3, r1
    399c:	f000 80ba 	beq.w	3b14 <_malloc_r+0x1a4>
    39a0:	685a      	ldr	r2, [r3, #4]
    39a2:	68d9      	ldr	r1, [r3, #12]
    39a4:	f022 0203 	bic.w	r2, r2, #3
    39a8:	441a      	add	r2, r3
    39aa:	689d      	ldr	r5, [r3, #8]
    39ac:	60e9      	str	r1, [r5, #12]
    39ae:	608d      	str	r5, [r1, #8]
    39b0:	6851      	ldr	r1, [r2, #4]
    39b2:	f041 0101 	orr.w	r1, r1, #1
    39b6:	4620      	mov	r0, r4
    39b8:	6051      	str	r1, [r2, #4]
    39ba:	f103 0508 	add.w	r5, r3, #8
    39be:	f000 fa8d 	bl	3edc <__malloc_unlock>
    39c2:	4628      	mov	r0, r5
    39c4:	b003      	add	sp, #12
    39c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    39ca:	f036 0607 	bics.w	r6, r6, #7
    39ce:	f100 8094 	bmi.w	3afa <_malloc_r+0x18a>
    39d2:	42b1      	cmp	r1, r6
    39d4:	f200 8091 	bhi.w	3afa <_malloc_r+0x18a>
    39d8:	f000 fa7a 	bl	3ed0 <__malloc_lock>
    39dc:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
    39e0:	f0c0 819a 	bcc.w	3d18 <_malloc_r+0x3a8>
    39e4:	0a73      	lsrs	r3, r6, #9
    39e6:	f000 808f 	beq.w	3b08 <_malloc_r+0x198>
    39ea:	2b04      	cmp	r3, #4
    39ec:	f200 816f 	bhi.w	3cce <_malloc_r+0x35e>
    39f0:	09b3      	lsrs	r3, r6, #6
    39f2:	f103 0039 	add.w	r0, r3, #57	; 0x39
    39f6:	f103 0c38 	add.w	ip, r3, #56	; 0x38
    39fa:	00c3      	lsls	r3, r0, #3
    39fc:	4f9a      	ldr	r7, [pc, #616]	; (3c68 <_malloc_r+0x2f8>)
    39fe:	443b      	add	r3, r7
    3a00:	f1a3 0508 	sub.w	r5, r3, #8
    3a04:	685b      	ldr	r3, [r3, #4]
    3a06:	429d      	cmp	r5, r3
    3a08:	d106      	bne.n	3a18 <_malloc_r+0xa8>
    3a0a:	e00c      	b.n	3a26 <_malloc_r+0xb6>
    3a0c:	2900      	cmp	r1, #0
    3a0e:	f280 8127 	bge.w	3c60 <_malloc_r+0x2f0>
    3a12:	68db      	ldr	r3, [r3, #12]
    3a14:	429d      	cmp	r5, r3
    3a16:	d006      	beq.n	3a26 <_malloc_r+0xb6>
    3a18:	685a      	ldr	r2, [r3, #4]
    3a1a:	f022 0203 	bic.w	r2, r2, #3
    3a1e:	1b91      	subs	r1, r2, r6
    3a20:	290f      	cmp	r1, #15
    3a22:	ddf3      	ble.n	3a0c <_malloc_r+0x9c>
    3a24:	4660      	mov	r0, ip
    3a26:	693d      	ldr	r5, [r7, #16]
    3a28:	f8df c250 	ldr.w	ip, [pc, #592]	; 3c7c <_malloc_r+0x30c>
    3a2c:	4565      	cmp	r5, ip
    3a2e:	d07c      	beq.n	3b2a <_malloc_r+0x1ba>
    3a30:	686a      	ldr	r2, [r5, #4]
    3a32:	f022 0203 	bic.w	r2, r2, #3
    3a36:	1b93      	subs	r3, r2, r6
    3a38:	2b0f      	cmp	r3, #15
    3a3a:	f300 817b 	bgt.w	3d34 <_malloc_r+0x3c4>
    3a3e:	2b00      	cmp	r3, #0
    3a40:	e9c7 cc04 	strd	ip, ip, [r7, #16]
    3a44:	f280 816c 	bge.w	3d20 <_malloc_r+0x3b0>
    3a48:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    3a4c:	f080 811a 	bcs.w	3c84 <_malloc_r+0x314>
    3a50:	08d3      	lsrs	r3, r2, #3
    3a52:	6879      	ldr	r1, [r7, #4]
    3a54:	3301      	adds	r3, #1
    3a56:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    3a5a:	2201      	movs	r2, #1
    3a5c:	fa02 f20e 	lsl.w	r2, r2, lr
    3a60:	430a      	orrs	r2, r1
    3a62:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
    3a66:	f8c5 e008 	str.w	lr, [r5, #8]
    3a6a:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    3a6e:	3908      	subs	r1, #8
    3a70:	60e9      	str	r1, [r5, #12]
    3a72:	607a      	str	r2, [r7, #4]
    3a74:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    3a78:	f8ce 500c 	str.w	r5, [lr, #12]
    3a7c:	1083      	asrs	r3, r0, #2
    3a7e:	2101      	movs	r1, #1
    3a80:	4099      	lsls	r1, r3
    3a82:	4291      	cmp	r1, r2
    3a84:	d857      	bhi.n	3b36 <_malloc_r+0x1c6>
    3a86:	4211      	tst	r1, r2
    3a88:	d106      	bne.n	3a98 <_malloc_r+0x128>
    3a8a:	f020 0003 	bic.w	r0, r0, #3
    3a8e:	0049      	lsls	r1, r1, #1
    3a90:	4211      	tst	r1, r2
    3a92:	f100 0004 	add.w	r0, r0, #4
    3a96:	d0fa      	beq.n	3a8e <_malloc_r+0x11e>
    3a98:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    3a9c:	464d      	mov	r5, r9
    3a9e:	4686      	mov	lr, r0
    3aa0:	f8d5 800c 	ldr.w	r8, [r5, #12]
    3aa4:	4545      	cmp	r5, r8
    3aa6:	d108      	bne.n	3aba <_malloc_r+0x14a>
    3aa8:	e11d      	b.n	3ce6 <_malloc_r+0x376>
    3aaa:	2b00      	cmp	r3, #0
    3aac:	f280 8124 	bge.w	3cf8 <_malloc_r+0x388>
    3ab0:	f8d8 800c 	ldr.w	r8, [r8, #12]
    3ab4:	4545      	cmp	r5, r8
    3ab6:	f000 8116 	beq.w	3ce6 <_malloc_r+0x376>
    3aba:	f8d8 2004 	ldr.w	r2, [r8, #4]
    3abe:	f022 0203 	bic.w	r2, r2, #3
    3ac2:	1b93      	subs	r3, r2, r6
    3ac4:	2b0f      	cmp	r3, #15
    3ac6:	ddf0      	ble.n	3aaa <_malloc_r+0x13a>
    3ac8:	4620      	mov	r0, r4
    3aca:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
    3ace:	eb08 0106 	add.w	r1, r8, r6
    3ad2:	f046 0601 	orr.w	r6, r6, #1
    3ad6:	f8c8 6004 	str.w	r6, [r8, #4]
    3ada:	60ec      	str	r4, [r5, #12]
    3adc:	60a5      	str	r5, [r4, #8]
    3ade:	f043 0401 	orr.w	r4, r3, #1
    3ae2:	e9c7 1104 	strd	r1, r1, [r7, #16]
    3ae6:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    3aea:	604c      	str	r4, [r1, #4]
    3aec:	f848 3002 	str.w	r3, [r8, r2]
    3af0:	f000 f9f4 	bl	3edc <__malloc_unlock>
    3af4:	f108 0508 	add.w	r5, r8, #8
    3af8:	e002      	b.n	3b00 <_malloc_r+0x190>
    3afa:	230c      	movs	r3, #12
    3afc:	6023      	str	r3, [r4, #0]
    3afe:	2500      	movs	r5, #0
    3b00:	4628      	mov	r0, r5
    3b02:	b003      	add	sp, #12
    3b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3b08:	f44f 7300 	mov.w	r3, #512	; 0x200
    3b0c:	2040      	movs	r0, #64	; 0x40
    3b0e:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    3b12:	e773      	b.n	39fc <_malloc_r+0x8c>
    3b14:	68d3      	ldr	r3, [r2, #12]
    3b16:	429a      	cmp	r2, r3
    3b18:	bf08      	it	eq
    3b1a:	3002      	addeq	r0, #2
    3b1c:	f47f af40 	bne.w	39a0 <_malloc_r+0x30>
    3b20:	693d      	ldr	r5, [r7, #16]
    3b22:	f8df c158 	ldr.w	ip, [pc, #344]	; 3c7c <_malloc_r+0x30c>
    3b26:	4565      	cmp	r5, ip
    3b28:	d182      	bne.n	3a30 <_malloc_r+0xc0>
    3b2a:	687a      	ldr	r2, [r7, #4]
    3b2c:	1083      	asrs	r3, r0, #2
    3b2e:	2101      	movs	r1, #1
    3b30:	4099      	lsls	r1, r3
    3b32:	4291      	cmp	r1, r2
    3b34:	d9a7      	bls.n	3a86 <_malloc_r+0x116>
    3b36:	68bd      	ldr	r5, [r7, #8]
    3b38:	686b      	ldr	r3, [r5, #4]
    3b3a:	f023 0903 	bic.w	r9, r3, #3
    3b3e:	454e      	cmp	r6, r9
    3b40:	d803      	bhi.n	3b4a <_malloc_r+0x1da>
    3b42:	eba9 0306 	sub.w	r3, r9, r6
    3b46:	2b0f      	cmp	r3, #15
    3b48:	dc7a      	bgt.n	3c40 <_malloc_r+0x2d0>
    3b4a:	f8df b134 	ldr.w	fp, [pc, #308]	; 3c80 <_malloc_r+0x310>
    3b4e:	4b47      	ldr	r3, [pc, #284]	; (3c6c <_malloc_r+0x2fc>)
    3b50:	f8db 2000 	ldr.w	r2, [fp]
    3b54:	681b      	ldr	r3, [r3, #0]
    3b56:	3201      	adds	r2, #1
    3b58:	4433      	add	r3, r6
    3b5a:	eb05 0a09 	add.w	sl, r5, r9
    3b5e:	f000 8133 	beq.w	3dc8 <_malloc_r+0x458>
    3b62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    3b66:	330f      	adds	r3, #15
    3b68:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
    3b6c:	f028 080f 	bic.w	r8, r8, #15
    3b70:	4641      	mov	r1, r8
    3b72:	4620      	mov	r0, r4
    3b74:	f000 ff26 	bl	49c4 <_sbrk_r>
    3b78:	1c41      	adds	r1, r0, #1
    3b7a:	4602      	mov	r2, r0
    3b7c:	f000 80f3 	beq.w	3d66 <_malloc_r+0x3f6>
    3b80:	4582      	cmp	sl, r0
    3b82:	f200 80ee 	bhi.w	3d62 <_malloc_r+0x3f2>
    3b86:	4b3a      	ldr	r3, [pc, #232]	; (3c70 <_malloc_r+0x300>)
    3b88:	6819      	ldr	r1, [r3, #0]
    3b8a:	4441      	add	r1, r8
    3b8c:	6019      	str	r1, [r3, #0]
    3b8e:	4608      	mov	r0, r1
    3b90:	f000 814e 	beq.w	3e30 <_malloc_r+0x4c0>
    3b94:	f8db 1000 	ldr.w	r1, [fp]
    3b98:	9301      	str	r3, [sp, #4]
    3b9a:	3101      	adds	r1, #1
    3b9c:	bf1b      	ittet	ne
    3b9e:	eba2 010a 	subne.w	r1, r2, sl
    3ba2:	1809      	addne	r1, r1, r0
    3ba4:	f8cb 2000 	streq.w	r2, [fp]
    3ba8:	6019      	strne	r1, [r3, #0]
    3baa:	f012 0b07 	ands.w	fp, r2, #7
    3bae:	f000 8117 	beq.w	3de0 <_malloc_r+0x470>
    3bb2:	f1cb 0108 	rsb	r1, fp, #8
    3bb6:	440a      	add	r2, r1
    3bb8:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
    3bbc:	4490      	add	r8, r2
    3bbe:	3108      	adds	r1, #8
    3bc0:	eba1 0108 	sub.w	r1, r1, r8
    3bc4:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    3bc8:	4651      	mov	r1, sl
    3bca:	4620      	mov	r0, r4
    3bcc:	9200      	str	r2, [sp, #0]
    3bce:	f000 fef9 	bl	49c4 <_sbrk_r>
    3bd2:	1c42      	adds	r2, r0, #1
    3bd4:	e9dd 2300 	ldrd	r2, r3, [sp]
    3bd8:	f000 814f 	beq.w	3e7a <_malloc_r+0x50a>
    3bdc:	1a80      	subs	r0, r0, r2
    3bde:	eb00 080a 	add.w	r8, r0, sl
    3be2:	6819      	ldr	r1, [r3, #0]
    3be4:	60ba      	str	r2, [r7, #8]
    3be6:	f048 0001 	orr.w	r0, r8, #1
    3bea:	4451      	add	r1, sl
    3bec:	42bd      	cmp	r5, r7
    3bee:	6050      	str	r0, [r2, #4]
    3bf0:	6019      	str	r1, [r3, #0]
    3bf2:	f000 8129 	beq.w	3e48 <_malloc_r+0x4d8>
    3bf6:	f1b9 0f0f 	cmp.w	r9, #15
    3bfa:	f240 8127 	bls.w	3e4c <_malloc_r+0x4dc>
    3bfe:	6868      	ldr	r0, [r5, #4]
    3c00:	f1a9 0c0c 	sub.w	ip, r9, #12
    3c04:	f02c 0c07 	bic.w	ip, ip, #7
    3c08:	f000 0001 	and.w	r0, r0, #1
    3c0c:	ea40 000c 	orr.w	r0, r0, ip
    3c10:	6068      	str	r0, [r5, #4]
    3c12:	f04f 0e05 	mov.w	lr, #5
    3c16:	eb05 000c 	add.w	r0, r5, ip
    3c1a:	f1bc 0f0f 	cmp.w	ip, #15
    3c1e:	e9c0 ee01 	strd	lr, lr, [r0, #4]
    3c22:	f200 8132 	bhi.w	3e8a <_malloc_r+0x51a>
    3c26:	6850      	ldr	r0, [r2, #4]
    3c28:	4615      	mov	r5, r2
    3c2a:	4b12      	ldr	r3, [pc, #72]	; (3c74 <_malloc_r+0x304>)
    3c2c:	681a      	ldr	r2, [r3, #0]
    3c2e:	428a      	cmp	r2, r1
    3c30:	bf38      	it	cc
    3c32:	6019      	strcc	r1, [r3, #0]
    3c34:	4b10      	ldr	r3, [pc, #64]	; (3c78 <_malloc_r+0x308>)
    3c36:	681a      	ldr	r2, [r3, #0]
    3c38:	428a      	cmp	r2, r1
    3c3a:	bf38      	it	cc
    3c3c:	6019      	strcc	r1, [r3, #0]
    3c3e:	e094      	b.n	3d6a <_malloc_r+0x3fa>
    3c40:	19aa      	adds	r2, r5, r6
    3c42:	f043 0301 	orr.w	r3, r3, #1
    3c46:	f046 0601 	orr.w	r6, r6, #1
    3c4a:	606e      	str	r6, [r5, #4]
    3c4c:	4620      	mov	r0, r4
    3c4e:	60ba      	str	r2, [r7, #8]
    3c50:	6053      	str	r3, [r2, #4]
    3c52:	f000 f943 	bl	3edc <__malloc_unlock>
    3c56:	3508      	adds	r5, #8
    3c58:	4628      	mov	r0, r5
    3c5a:	b003      	add	sp, #12
    3c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3c60:	68d9      	ldr	r1, [r3, #12]
    3c62:	441a      	add	r2, r3
    3c64:	e6a1      	b.n	39aa <_malloc_r+0x3a>
    3c66:	bf00      	nop
    3c68:	200011f4 	.word	0x200011f4
    3c6c:	20001f18 	.word	0x20001f18
    3c70:	20001ee8 	.word	0x20001ee8
    3c74:	20001f10 	.word	0x20001f10
    3c78:	20001f14 	.word	0x20001f14
    3c7c:	200011fc 	.word	0x200011fc
    3c80:	200015fc 	.word	0x200015fc
    3c84:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
    3c88:	ea4f 2352 	mov.w	r3, r2, lsr #9
    3c8c:	d363      	bcc.n	3d56 <_malloc_r+0x3e6>
    3c8e:	2b14      	cmp	r3, #20
    3c90:	f200 80b7 	bhi.w	3e02 <_malloc_r+0x492>
    3c94:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    3c98:	00c9      	lsls	r1, r1, #3
    3c9a:	335b      	adds	r3, #91	; 0x5b
    3c9c:	eb07 0e01 	add.w	lr, r7, r1
    3ca0:	5879      	ldr	r1, [r7, r1]
    3ca2:	f1ae 0e08 	sub.w	lr, lr, #8
    3ca6:	458e      	cmp	lr, r1
    3ca8:	f000 8091 	beq.w	3dce <_malloc_r+0x45e>
    3cac:	684b      	ldr	r3, [r1, #4]
    3cae:	f023 0303 	bic.w	r3, r3, #3
    3cb2:	4293      	cmp	r3, r2
    3cb4:	d902      	bls.n	3cbc <_malloc_r+0x34c>
    3cb6:	6889      	ldr	r1, [r1, #8]
    3cb8:	458e      	cmp	lr, r1
    3cba:	d1f7      	bne.n	3cac <_malloc_r+0x33c>
    3cbc:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    3cc0:	687a      	ldr	r2, [r7, #4]
    3cc2:	e9c5 1e02 	strd	r1, lr, [r5, #8]
    3cc6:	f8ce 5008 	str.w	r5, [lr, #8]
    3cca:	60cd      	str	r5, [r1, #12]
    3ccc:	e6d6      	b.n	3a7c <_malloc_r+0x10c>
    3cce:	2b14      	cmp	r3, #20
    3cd0:	d959      	bls.n	3d86 <_malloc_r+0x416>
    3cd2:	2b54      	cmp	r3, #84	; 0x54
    3cd4:	f200 809d 	bhi.w	3e12 <_malloc_r+0x4a2>
    3cd8:	0b33      	lsrs	r3, r6, #12
    3cda:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    3cde:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
    3ce2:	00c3      	lsls	r3, r0, #3
    3ce4:	e68a      	b.n	39fc <_malloc_r+0x8c>
    3ce6:	f10e 0e01 	add.w	lr, lr, #1
    3cea:	f01e 0f03 	tst.w	lr, #3
    3cee:	f105 0508 	add.w	r5, r5, #8
    3cf2:	f47f aed5 	bne.w	3aa0 <_malloc_r+0x130>
    3cf6:	e051      	b.n	3d9c <_malloc_r+0x42c>
    3cf8:	4442      	add	r2, r8
    3cfa:	4645      	mov	r5, r8
    3cfc:	6853      	ldr	r3, [r2, #4]
    3cfe:	f8d8 100c 	ldr.w	r1, [r8, #12]
    3d02:	f043 0301 	orr.w	r3, r3, #1
    3d06:	6053      	str	r3, [r2, #4]
    3d08:	f855 3f08 	ldr.w	r3, [r5, #8]!
    3d0c:	4620      	mov	r0, r4
    3d0e:	60d9      	str	r1, [r3, #12]
    3d10:	608b      	str	r3, [r1, #8]
    3d12:	f000 f8e3 	bl	3edc <__malloc_unlock>
    3d16:	e6f3      	b.n	3b00 <_malloc_r+0x190>
    3d18:	08f0      	lsrs	r0, r6, #3
    3d1a:	f106 0208 	add.w	r2, r6, #8
    3d1e:	e637      	b.n	3990 <_malloc_r+0x20>
    3d20:	442a      	add	r2, r5
    3d22:	4620      	mov	r0, r4
    3d24:	6853      	ldr	r3, [r2, #4]
    3d26:	f043 0301 	orr.w	r3, r3, #1
    3d2a:	6053      	str	r3, [r2, #4]
    3d2c:	3508      	adds	r5, #8
    3d2e:	f000 f8d5 	bl	3edc <__malloc_unlock>
    3d32:	e6e5      	b.n	3b00 <_malloc_r+0x190>
    3d34:	19a9      	adds	r1, r5, r6
    3d36:	4620      	mov	r0, r4
    3d38:	f046 0601 	orr.w	r6, r6, #1
    3d3c:	f043 0401 	orr.w	r4, r3, #1
    3d40:	606e      	str	r6, [r5, #4]
    3d42:	e9c7 1104 	strd	r1, r1, [r7, #16]
    3d46:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    3d4a:	604c      	str	r4, [r1, #4]
    3d4c:	50ab      	str	r3, [r5, r2]
    3d4e:	f000 f8c5 	bl	3edc <__malloc_unlock>
    3d52:	3508      	adds	r5, #8
    3d54:	e6d4      	b.n	3b00 <_malloc_r+0x190>
    3d56:	0993      	lsrs	r3, r2, #6
    3d58:	f103 0139 	add.w	r1, r3, #57	; 0x39
    3d5c:	00c9      	lsls	r1, r1, #3
    3d5e:	3338      	adds	r3, #56	; 0x38
    3d60:	e79c      	b.n	3c9c <_malloc_r+0x32c>
    3d62:	42bd      	cmp	r5, r7
    3d64:	d05f      	beq.n	3e26 <_malloc_r+0x4b6>
    3d66:	68bd      	ldr	r5, [r7, #8]
    3d68:	6868      	ldr	r0, [r5, #4]
    3d6a:	f020 0803 	bic.w	r8, r0, #3
    3d6e:	4546      	cmp	r6, r8
    3d70:	eba8 0306 	sub.w	r3, r8, r6
    3d74:	d802      	bhi.n	3d7c <_malloc_r+0x40c>
    3d76:	2b0f      	cmp	r3, #15
    3d78:	f73f af62 	bgt.w	3c40 <_malloc_r+0x2d0>
    3d7c:	4620      	mov	r0, r4
    3d7e:	f000 f8ad 	bl	3edc <__malloc_unlock>
    3d82:	2500      	movs	r5, #0
    3d84:	e6bc      	b.n	3b00 <_malloc_r+0x190>
    3d86:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    3d8a:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
    3d8e:	00c3      	lsls	r3, r0, #3
    3d90:	e634      	b.n	39fc <_malloc_r+0x8c>
    3d92:	f859 3908 	ldr.w	r3, [r9], #-8
    3d96:	454b      	cmp	r3, r9
    3d98:	f040 8096 	bne.w	3ec8 <_malloc_r+0x558>
    3d9c:	f010 0f03 	tst.w	r0, #3
    3da0:	f100 30ff 	add.w	r0, r0, #4294967295
    3da4:	d1f5      	bne.n	3d92 <_malloc_r+0x422>
    3da6:	687b      	ldr	r3, [r7, #4]
    3da8:	ea23 0301 	bic.w	r3, r3, r1
    3dac:	607b      	str	r3, [r7, #4]
    3dae:	0049      	lsls	r1, r1, #1
    3db0:	4299      	cmp	r1, r3
    3db2:	f63f aec0 	bhi.w	3b36 <_malloc_r+0x1c6>
    3db6:	b919      	cbnz	r1, 3dc0 <_malloc_r+0x450>
    3db8:	e6bd      	b.n	3b36 <_malloc_r+0x1c6>
    3dba:	0049      	lsls	r1, r1, #1
    3dbc:	f10e 0e04 	add.w	lr, lr, #4
    3dc0:	4219      	tst	r1, r3
    3dc2:	d0fa      	beq.n	3dba <_malloc_r+0x44a>
    3dc4:	4670      	mov	r0, lr
    3dc6:	e667      	b.n	3a98 <_malloc_r+0x128>
    3dc8:	f103 0810 	add.w	r8, r3, #16
    3dcc:	e6d0      	b.n	3b70 <_malloc_r+0x200>
    3dce:	109a      	asrs	r2, r3, #2
    3dd0:	f04f 0801 	mov.w	r8, #1
    3dd4:	687b      	ldr	r3, [r7, #4]
    3dd6:	fa08 f202 	lsl.w	r2, r8, r2
    3dda:	431a      	orrs	r2, r3
    3ddc:	607a      	str	r2, [r7, #4]
    3dde:	e770      	b.n	3cc2 <_malloc_r+0x352>
    3de0:	eb02 0108 	add.w	r1, r2, r8
    3de4:	4249      	negs	r1, r1
    3de6:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    3dea:	4651      	mov	r1, sl
    3dec:	4620      	mov	r0, r4
    3dee:	9200      	str	r2, [sp, #0]
    3df0:	f000 fde8 	bl	49c4 <_sbrk_r>
    3df4:	1c43      	adds	r3, r0, #1
    3df6:	e9dd 2300 	ldrd	r2, r3, [sp]
    3dfa:	f47f aeef 	bne.w	3bdc <_malloc_r+0x26c>
    3dfe:	46da      	mov	sl, fp
    3e00:	e6ef      	b.n	3be2 <_malloc_r+0x272>
    3e02:	2b54      	cmp	r3, #84	; 0x54
    3e04:	d825      	bhi.n	3e52 <_malloc_r+0x4e2>
    3e06:	0b13      	lsrs	r3, r2, #12
    3e08:	f103 016f 	add.w	r1, r3, #111	; 0x6f
    3e0c:	00c9      	lsls	r1, r1, #3
    3e0e:	336e      	adds	r3, #110	; 0x6e
    3e10:	e744      	b.n	3c9c <_malloc_r+0x32c>
    3e12:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    3e16:	d825      	bhi.n	3e64 <_malloc_r+0x4f4>
    3e18:	0bf3      	lsrs	r3, r6, #15
    3e1a:	f103 0078 	add.w	r0, r3, #120	; 0x78
    3e1e:	f103 0c77 	add.w	ip, r3, #119	; 0x77
    3e22:	00c3      	lsls	r3, r0, #3
    3e24:	e5ea      	b.n	39fc <_malloc_r+0x8c>
    3e26:	4b29      	ldr	r3, [pc, #164]	; (3ecc <_malloc_r+0x55c>)
    3e28:	6818      	ldr	r0, [r3, #0]
    3e2a:	4440      	add	r0, r8
    3e2c:	6018      	str	r0, [r3, #0]
    3e2e:	e6b1      	b.n	3b94 <_malloc_r+0x224>
    3e30:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
    3e34:	f1bc 0f00 	cmp.w	ip, #0
    3e38:	f47f aeac 	bne.w	3b94 <_malloc_r+0x224>
    3e3c:	68bd      	ldr	r5, [r7, #8]
    3e3e:	44c8      	add	r8, r9
    3e40:	f048 0001 	orr.w	r0, r8, #1
    3e44:	6068      	str	r0, [r5, #4]
    3e46:	e6f0      	b.n	3c2a <_malloc_r+0x2ba>
    3e48:	4615      	mov	r5, r2
    3e4a:	e6ee      	b.n	3c2a <_malloc_r+0x2ba>
    3e4c:	2301      	movs	r3, #1
    3e4e:	6053      	str	r3, [r2, #4]
    3e50:	e794      	b.n	3d7c <_malloc_r+0x40c>
    3e52:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    3e56:	d823      	bhi.n	3ea0 <_malloc_r+0x530>
    3e58:	0bd3      	lsrs	r3, r2, #15
    3e5a:	f103 0178 	add.w	r1, r3, #120	; 0x78
    3e5e:	00c9      	lsls	r1, r1, #3
    3e60:	3377      	adds	r3, #119	; 0x77
    3e62:	e71b      	b.n	3c9c <_malloc_r+0x32c>
    3e64:	f240 5254 	movw	r2, #1364	; 0x554
    3e68:	4293      	cmp	r3, r2
    3e6a:	d823      	bhi.n	3eb4 <_malloc_r+0x544>
    3e6c:	0cb3      	lsrs	r3, r6, #18
    3e6e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    3e72:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
    3e76:	00c3      	lsls	r3, r0, #3
    3e78:	e5c0      	b.n	39fc <_malloc_r+0x8c>
    3e7a:	f1ab 0b08 	sub.w	fp, fp, #8
    3e7e:	44d8      	add	r8, fp
    3e80:	eba8 0802 	sub.w	r8, r8, r2
    3e84:	f04f 0a00 	mov.w	sl, #0
    3e88:	e6ab      	b.n	3be2 <_malloc_r+0x272>
    3e8a:	f105 0108 	add.w	r1, r5, #8
    3e8e:	4620      	mov	r0, r4
    3e90:	9300      	str	r3, [sp, #0]
    3e92:	f001 f8d7 	bl	5044 <_free_r>
    3e96:	68bd      	ldr	r5, [r7, #8]
    3e98:	9b00      	ldr	r3, [sp, #0]
    3e9a:	6868      	ldr	r0, [r5, #4]
    3e9c:	6819      	ldr	r1, [r3, #0]
    3e9e:	e6c4      	b.n	3c2a <_malloc_r+0x2ba>
    3ea0:	f240 5154 	movw	r1, #1364	; 0x554
    3ea4:	428b      	cmp	r3, r1
    3ea6:	d80b      	bhi.n	3ec0 <_malloc_r+0x550>
    3ea8:	0c93      	lsrs	r3, r2, #18
    3eaa:	f103 017d 	add.w	r1, r3, #125	; 0x7d
    3eae:	00c9      	lsls	r1, r1, #3
    3eb0:	337c      	adds	r3, #124	; 0x7c
    3eb2:	e6f3      	b.n	3c9c <_malloc_r+0x32c>
    3eb4:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    3eb8:	207f      	movs	r0, #127	; 0x7f
    3eba:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
    3ebe:	e59d      	b.n	39fc <_malloc_r+0x8c>
    3ec0:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    3ec4:	237e      	movs	r3, #126	; 0x7e
    3ec6:	e6e9      	b.n	3c9c <_malloc_r+0x32c>
    3ec8:	687b      	ldr	r3, [r7, #4]
    3eca:	e770      	b.n	3dae <_malloc_r+0x43e>
    3ecc:	20001ee8 	.word	0x20001ee8

00003ed0 <__malloc_lock>:
    3ed0:	4801      	ldr	r0, [pc, #4]	; (3ed8 <__malloc_lock+0x8>)
    3ed2:	f000 bdcd 	b.w	4a70 <__retarget_lock_acquire_recursive>
    3ed6:	bf00      	nop
    3ed8:	20001ee0 	.word	0x20001ee0

00003edc <__malloc_unlock>:
    3edc:	4801      	ldr	r0, [pc, #4]	; (3ee4 <__malloc_unlock+0x8>)
    3ede:	f000 bdc9 	b.w	4a74 <__retarget_lock_release_recursive>
    3ee2:	bf00      	nop
    3ee4:	20001ee0 	.word	0x20001ee0

00003ee8 <realloc>:
    3ee8:	b410      	push	{r4}
    3eea:	4c04      	ldr	r4, [pc, #16]	; (3efc <realloc+0x14>)
    3eec:	4603      	mov	r3, r0
    3eee:	460a      	mov	r2, r1
    3ef0:	6820      	ldr	r0, [r4, #0]
    3ef2:	f85d 4b04 	ldr.w	r4, [sp], #4
    3ef6:	4619      	mov	r1, r3
    3ef8:	f000 b802 	b.w	3f00 <_realloc_r>
    3efc:	20001610 	.word	0x20001610

00003f00 <_realloc_r>:
    3f00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3f04:	4617      	mov	r7, r2
    3f06:	2900      	cmp	r1, #0
    3f08:	f000 8098 	beq.w	403c <_realloc_r+0x13c>
    3f0c:	460c      	mov	r4, r1
    3f0e:	f107 050b 	add.w	r5, r7, #11
    3f12:	4680      	mov	r8, r0
    3f14:	f7ff ffdc 	bl	3ed0 <__malloc_lock>
    3f18:	2d16      	cmp	r5, #22
    3f1a:	f854 1c04 	ldr.w	r1, [r4, #-4]
    3f1e:	d85b      	bhi.n	3fd8 <_realloc_r+0xd8>
    3f20:	2510      	movs	r5, #16
    3f22:	462a      	mov	r2, r5
    3f24:	42af      	cmp	r7, r5
    3f26:	d85c      	bhi.n	3fe2 <_realloc_r+0xe2>
    3f28:	f021 0603 	bic.w	r6, r1, #3
    3f2c:	4296      	cmp	r6, r2
    3f2e:	f1a4 0908 	sub.w	r9, r4, #8
    3f32:	da62      	bge.n	3ffa <_realloc_r+0xfa>
    3f34:	4bbc      	ldr	r3, [pc, #752]	; (4228 <_realloc_r+0x328>)
    3f36:	f8d3 c008 	ldr.w	ip, [r3, #8]
    3f3a:	eb09 0006 	add.w	r0, r9, r6
    3f3e:	4584      	cmp	ip, r0
    3f40:	f000 8097 	beq.w	4072 <_realloc_r+0x172>
    3f44:	f8d0 c004 	ldr.w	ip, [r0, #4]
    3f48:	f02c 0301 	bic.w	r3, ip, #1
    3f4c:	4403      	add	r3, r0
    3f4e:	685b      	ldr	r3, [r3, #4]
    3f50:	07db      	lsls	r3, r3, #31
    3f52:	d468      	bmi.n	4026 <_realloc_r+0x126>
    3f54:	f02c 0c03 	bic.w	ip, ip, #3
    3f58:	eb06 030c 	add.w	r3, r6, ip
    3f5c:	4293      	cmp	r3, r2
    3f5e:	da47      	bge.n	3ff0 <_realloc_r+0xf0>
    3f60:	07cb      	lsls	r3, r1, #31
    3f62:	d410      	bmi.n	3f86 <_realloc_r+0x86>
    3f64:	f854 3c08 	ldr.w	r3, [r4, #-8]
    3f68:	eba9 0a03 	sub.w	sl, r9, r3
    3f6c:	f8da 3004 	ldr.w	r3, [sl, #4]
    3f70:	f023 0103 	bic.w	r1, r3, #3
    3f74:	448c      	add	ip, r1
    3f76:	44b4      	add	ip, r6
    3f78:	4594      	cmp	ip, r2
    3f7a:	f280 8111 	bge.w	41a0 <_realloc_r+0x2a0>
    3f7e:	1873      	adds	r3, r6, r1
    3f80:	4293      	cmp	r3, r2
    3f82:	f280 80e8 	bge.w	4156 <_realloc_r+0x256>
    3f86:	4639      	mov	r1, r7
    3f88:	4640      	mov	r0, r8
    3f8a:	f7ff fcf1 	bl	3970 <_malloc_r>
    3f8e:	4607      	mov	r7, r0
    3f90:	b1e0      	cbz	r0, 3fcc <_realloc_r+0xcc>
    3f92:	f854 3c04 	ldr.w	r3, [r4, #-4]
    3f96:	f023 0301 	bic.w	r3, r3, #1
    3f9a:	444b      	add	r3, r9
    3f9c:	f1a0 0208 	sub.w	r2, r0, #8
    3fa0:	4293      	cmp	r3, r2
    3fa2:	f000 80d2 	beq.w	414a <_realloc_r+0x24a>
    3fa6:	1f32      	subs	r2, r6, #4
    3fa8:	2a24      	cmp	r2, #36	; 0x24
    3faa:	f200 80f5 	bhi.w	4198 <_realloc_r+0x298>
    3fae:	2a13      	cmp	r2, #19
    3fb0:	f200 80ac 	bhi.w	410c <_realloc_r+0x20c>
    3fb4:	4603      	mov	r3, r0
    3fb6:	4622      	mov	r2, r4
    3fb8:	6811      	ldr	r1, [r2, #0]
    3fba:	6019      	str	r1, [r3, #0]
    3fbc:	6851      	ldr	r1, [r2, #4]
    3fbe:	6059      	str	r1, [r3, #4]
    3fc0:	6892      	ldr	r2, [r2, #8]
    3fc2:	609a      	str	r2, [r3, #8]
    3fc4:	4621      	mov	r1, r4
    3fc6:	4640      	mov	r0, r8
    3fc8:	f001 f83c 	bl	5044 <_free_r>
    3fcc:	4640      	mov	r0, r8
    3fce:	f7ff ff85 	bl	3edc <__malloc_unlock>
    3fd2:	4638      	mov	r0, r7
    3fd4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3fd8:	f025 0507 	bic.w	r5, r5, #7
    3fdc:	2d00      	cmp	r5, #0
    3fde:	462a      	mov	r2, r5
    3fe0:	daa0      	bge.n	3f24 <_realloc_r+0x24>
    3fe2:	230c      	movs	r3, #12
    3fe4:	f8c8 3000 	str.w	r3, [r8]
    3fe8:	2700      	movs	r7, #0
    3fea:	4638      	mov	r0, r7
    3fec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3ff0:	461e      	mov	r6, r3
    3ff2:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    3ff6:	60d3      	str	r3, [r2, #12]
    3ff8:	609a      	str	r2, [r3, #8]
    3ffa:	1b73      	subs	r3, r6, r5
    3ffc:	2b0f      	cmp	r3, #15
    3ffe:	d822      	bhi.n	4046 <_realloc_r+0x146>
    4000:	f8d9 3004 	ldr.w	r3, [r9, #4]
    4004:	f003 0301 	and.w	r3, r3, #1
    4008:	4333      	orrs	r3, r6
    400a:	444e      	add	r6, r9
    400c:	f8c9 3004 	str.w	r3, [r9, #4]
    4010:	6873      	ldr	r3, [r6, #4]
    4012:	f043 0301 	orr.w	r3, r3, #1
    4016:	6073      	str	r3, [r6, #4]
    4018:	4640      	mov	r0, r8
    401a:	4627      	mov	r7, r4
    401c:	f7ff ff5e 	bl	3edc <__malloc_unlock>
    4020:	4638      	mov	r0, r7
    4022:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4026:	07c9      	lsls	r1, r1, #31
    4028:	d4ad      	bmi.n	3f86 <_realloc_r+0x86>
    402a:	f854 3c08 	ldr.w	r3, [r4, #-8]
    402e:	eba9 0a03 	sub.w	sl, r9, r3
    4032:	f8da 1004 	ldr.w	r1, [sl, #4]
    4036:	f021 0103 	bic.w	r1, r1, #3
    403a:	e7a0      	b.n	3f7e <_realloc_r+0x7e>
    403c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4040:	4611      	mov	r1, r2
    4042:	f7ff bc95 	b.w	3970 <_malloc_r>
    4046:	f8d9 2004 	ldr.w	r2, [r9, #4]
    404a:	eb09 0105 	add.w	r1, r9, r5
    404e:	f002 0201 	and.w	r2, r2, #1
    4052:	444e      	add	r6, r9
    4054:	f043 0301 	orr.w	r3, r3, #1
    4058:	432a      	orrs	r2, r5
    405a:	f8c9 2004 	str.w	r2, [r9, #4]
    405e:	604b      	str	r3, [r1, #4]
    4060:	6873      	ldr	r3, [r6, #4]
    4062:	f043 0301 	orr.w	r3, r3, #1
    4066:	3108      	adds	r1, #8
    4068:	6073      	str	r3, [r6, #4]
    406a:	4640      	mov	r0, r8
    406c:	f000 ffea 	bl	5044 <_free_r>
    4070:	e7d2      	b.n	4018 <_realloc_r+0x118>
    4072:	f8dc 0004 	ldr.w	r0, [ip, #4]
    4076:	f020 0b03 	bic.w	fp, r0, #3
    407a:	eb06 0c0b 	add.w	ip, r6, fp
    407e:	f105 0010 	add.w	r0, r5, #16
    4082:	4584      	cmp	ip, r0
    4084:	da4d      	bge.n	4122 <_realloc_r+0x222>
    4086:	07c9      	lsls	r1, r1, #31
    4088:	f53f af7d 	bmi.w	3f86 <_realloc_r+0x86>
    408c:	f854 1c08 	ldr.w	r1, [r4, #-8]
    4090:	eba9 0a01 	sub.w	sl, r9, r1
    4094:	f8da 1004 	ldr.w	r1, [sl, #4]
    4098:	f021 0103 	bic.w	r1, r1, #3
    409c:	448b      	add	fp, r1
    409e:	44b3      	add	fp, r6
    40a0:	4558      	cmp	r0, fp
    40a2:	f73f af6c 	bgt.w	3f7e <_realloc_r+0x7e>
    40a6:	4657      	mov	r7, sl
    40a8:	f8da 100c 	ldr.w	r1, [sl, #12]
    40ac:	f857 0f08 	ldr.w	r0, [r7, #8]!
    40b0:	1f32      	subs	r2, r6, #4
    40b2:	2a24      	cmp	r2, #36	; 0x24
    40b4:	60c1      	str	r1, [r0, #12]
    40b6:	6088      	str	r0, [r1, #8]
    40b8:	f200 80db 	bhi.w	4272 <_realloc_r+0x372>
    40bc:	2a13      	cmp	r2, #19
    40be:	f240 80d6 	bls.w	426e <_realloc_r+0x36e>
    40c2:	6821      	ldr	r1, [r4, #0]
    40c4:	f8ca 1008 	str.w	r1, [sl, #8]
    40c8:	6861      	ldr	r1, [r4, #4]
    40ca:	f8ca 100c 	str.w	r1, [sl, #12]
    40ce:	2a1b      	cmp	r2, #27
    40d0:	f200 80df 	bhi.w	4292 <_realloc_r+0x392>
    40d4:	3408      	adds	r4, #8
    40d6:	f10a 0210 	add.w	r2, sl, #16
    40da:	6821      	ldr	r1, [r4, #0]
    40dc:	6011      	str	r1, [r2, #0]
    40de:	6861      	ldr	r1, [r4, #4]
    40e0:	6051      	str	r1, [r2, #4]
    40e2:	68a1      	ldr	r1, [r4, #8]
    40e4:	6091      	str	r1, [r2, #8]
    40e6:	eb0a 0105 	add.w	r1, sl, r5
    40ea:	ebab 0205 	sub.w	r2, fp, r5
    40ee:	f042 0201 	orr.w	r2, r2, #1
    40f2:	6099      	str	r1, [r3, #8]
    40f4:	604a      	str	r2, [r1, #4]
    40f6:	f8da 3004 	ldr.w	r3, [sl, #4]
    40fa:	f003 0301 	and.w	r3, r3, #1
    40fe:	432b      	orrs	r3, r5
    4100:	4640      	mov	r0, r8
    4102:	f8ca 3004 	str.w	r3, [sl, #4]
    4106:	f7ff fee9 	bl	3edc <__malloc_unlock>
    410a:	e76e      	b.n	3fea <_realloc_r+0xea>
    410c:	6823      	ldr	r3, [r4, #0]
    410e:	6003      	str	r3, [r0, #0]
    4110:	6863      	ldr	r3, [r4, #4]
    4112:	6043      	str	r3, [r0, #4]
    4114:	2a1b      	cmp	r2, #27
    4116:	d868      	bhi.n	41ea <_realloc_r+0x2ea>
    4118:	f104 0208 	add.w	r2, r4, #8
    411c:	f100 0308 	add.w	r3, r0, #8
    4120:	e74a      	b.n	3fb8 <_realloc_r+0xb8>
    4122:	eb09 0205 	add.w	r2, r9, r5
    4126:	609a      	str	r2, [r3, #8]
    4128:	ebac 0305 	sub.w	r3, ip, r5
    412c:	f043 0301 	orr.w	r3, r3, #1
    4130:	6053      	str	r3, [r2, #4]
    4132:	f854 3c04 	ldr.w	r3, [r4, #-4]
    4136:	f003 0301 	and.w	r3, r3, #1
    413a:	432b      	orrs	r3, r5
    413c:	4640      	mov	r0, r8
    413e:	f844 3c04 	str.w	r3, [r4, #-4]
    4142:	f7ff fecb 	bl	3edc <__malloc_unlock>
    4146:	4627      	mov	r7, r4
    4148:	e74f      	b.n	3fea <_realloc_r+0xea>
    414a:	f850 3c04 	ldr.w	r3, [r0, #-4]
    414e:	f023 0303 	bic.w	r3, r3, #3
    4152:	441e      	add	r6, r3
    4154:	e751      	b.n	3ffa <_realloc_r+0xfa>
    4156:	4657      	mov	r7, sl
    4158:	f8da 100c 	ldr.w	r1, [sl, #12]
    415c:	f857 0f08 	ldr.w	r0, [r7, #8]!
    4160:	1f32      	subs	r2, r6, #4
    4162:	2a24      	cmp	r2, #36	; 0x24
    4164:	60c1      	str	r1, [r0, #12]
    4166:	6088      	str	r0, [r1, #8]
    4168:	d84c      	bhi.n	4204 <_realloc_r+0x304>
    416a:	2a13      	cmp	r2, #19
    416c:	d948      	bls.n	4200 <_realloc_r+0x300>
    416e:	6821      	ldr	r1, [r4, #0]
    4170:	f8ca 1008 	str.w	r1, [sl, #8]
    4174:	6861      	ldr	r1, [r4, #4]
    4176:	f8ca 100c 	str.w	r1, [sl, #12]
    417a:	2a1b      	cmp	r2, #27
    417c:	d856      	bhi.n	422c <_realloc_r+0x32c>
    417e:	3408      	adds	r4, #8
    4180:	f10a 0210 	add.w	r2, sl, #16
    4184:	461e      	mov	r6, r3
    4186:	6823      	ldr	r3, [r4, #0]
    4188:	6013      	str	r3, [r2, #0]
    418a:	6863      	ldr	r3, [r4, #4]
    418c:	6053      	str	r3, [r2, #4]
    418e:	68a3      	ldr	r3, [r4, #8]
    4190:	6093      	str	r3, [r2, #8]
    4192:	46d1      	mov	r9, sl
    4194:	463c      	mov	r4, r7
    4196:	e730      	b.n	3ffa <_realloc_r+0xfa>
    4198:	4621      	mov	r1, r4
    419a:	f000 fa89 	bl	46b0 <memmove>
    419e:	e711      	b.n	3fc4 <_realloc_r+0xc4>
    41a0:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
    41a4:	4657      	mov	r7, sl
    41a6:	60cb      	str	r3, [r1, #12]
    41a8:	6099      	str	r1, [r3, #8]
    41aa:	f857 1f08 	ldr.w	r1, [r7, #8]!
    41ae:	f8da 300c 	ldr.w	r3, [sl, #12]
    41b2:	60cb      	str	r3, [r1, #12]
    41b4:	1f32      	subs	r2, r6, #4
    41b6:	2a24      	cmp	r2, #36	; 0x24
    41b8:	6099      	str	r1, [r3, #8]
    41ba:	d82d      	bhi.n	4218 <_realloc_r+0x318>
    41bc:	2a13      	cmp	r2, #19
    41be:	d929      	bls.n	4214 <_realloc_r+0x314>
    41c0:	6823      	ldr	r3, [r4, #0]
    41c2:	f8ca 3008 	str.w	r3, [sl, #8]
    41c6:	6863      	ldr	r3, [r4, #4]
    41c8:	f8ca 300c 	str.w	r3, [sl, #12]
    41cc:	2a1b      	cmp	r2, #27
    41ce:	d842      	bhi.n	4256 <_realloc_r+0x356>
    41d0:	3408      	adds	r4, #8
    41d2:	f10a 0310 	add.w	r3, sl, #16
    41d6:	6822      	ldr	r2, [r4, #0]
    41d8:	601a      	str	r2, [r3, #0]
    41da:	6862      	ldr	r2, [r4, #4]
    41dc:	605a      	str	r2, [r3, #4]
    41de:	68a2      	ldr	r2, [r4, #8]
    41e0:	609a      	str	r2, [r3, #8]
    41e2:	4666      	mov	r6, ip
    41e4:	46d1      	mov	r9, sl
    41e6:	463c      	mov	r4, r7
    41e8:	e707      	b.n	3ffa <_realloc_r+0xfa>
    41ea:	68a3      	ldr	r3, [r4, #8]
    41ec:	6083      	str	r3, [r0, #8]
    41ee:	68e3      	ldr	r3, [r4, #12]
    41f0:	60c3      	str	r3, [r0, #12]
    41f2:	2a24      	cmp	r2, #36	; 0x24
    41f4:	d026      	beq.n	4244 <_realloc_r+0x344>
    41f6:	f104 0210 	add.w	r2, r4, #16
    41fa:	f100 0310 	add.w	r3, r0, #16
    41fe:	e6db      	b.n	3fb8 <_realloc_r+0xb8>
    4200:	463a      	mov	r2, r7
    4202:	e7bf      	b.n	4184 <_realloc_r+0x284>
    4204:	4621      	mov	r1, r4
    4206:	4638      	mov	r0, r7
    4208:	461e      	mov	r6, r3
    420a:	46d1      	mov	r9, sl
    420c:	f000 fa50 	bl	46b0 <memmove>
    4210:	463c      	mov	r4, r7
    4212:	e6f2      	b.n	3ffa <_realloc_r+0xfa>
    4214:	463b      	mov	r3, r7
    4216:	e7de      	b.n	41d6 <_realloc_r+0x2d6>
    4218:	4621      	mov	r1, r4
    421a:	4638      	mov	r0, r7
    421c:	4666      	mov	r6, ip
    421e:	46d1      	mov	r9, sl
    4220:	f000 fa46 	bl	46b0 <memmove>
    4224:	463c      	mov	r4, r7
    4226:	e6e8      	b.n	3ffa <_realloc_r+0xfa>
    4228:	200011f4 	.word	0x200011f4
    422c:	68a1      	ldr	r1, [r4, #8]
    422e:	f8ca 1010 	str.w	r1, [sl, #16]
    4232:	68e1      	ldr	r1, [r4, #12]
    4234:	f8ca 1014 	str.w	r1, [sl, #20]
    4238:	2a24      	cmp	r2, #36	; 0x24
    423a:	d020      	beq.n	427e <_realloc_r+0x37e>
    423c:	3410      	adds	r4, #16
    423e:	f10a 0218 	add.w	r2, sl, #24
    4242:	e79f      	b.n	4184 <_realloc_r+0x284>
    4244:	6923      	ldr	r3, [r4, #16]
    4246:	6103      	str	r3, [r0, #16]
    4248:	6961      	ldr	r1, [r4, #20]
    424a:	6141      	str	r1, [r0, #20]
    424c:	f104 0218 	add.w	r2, r4, #24
    4250:	f100 0318 	add.w	r3, r0, #24
    4254:	e6b0      	b.n	3fb8 <_realloc_r+0xb8>
    4256:	68a3      	ldr	r3, [r4, #8]
    4258:	f8ca 3010 	str.w	r3, [sl, #16]
    425c:	68e3      	ldr	r3, [r4, #12]
    425e:	f8ca 3014 	str.w	r3, [sl, #20]
    4262:	2a24      	cmp	r2, #36	; 0x24
    4264:	d021      	beq.n	42aa <_realloc_r+0x3aa>
    4266:	3410      	adds	r4, #16
    4268:	f10a 0318 	add.w	r3, sl, #24
    426c:	e7b3      	b.n	41d6 <_realloc_r+0x2d6>
    426e:	463a      	mov	r2, r7
    4270:	e733      	b.n	40da <_realloc_r+0x1da>
    4272:	4621      	mov	r1, r4
    4274:	4638      	mov	r0, r7
    4276:	f000 fa1b 	bl	46b0 <memmove>
    427a:	4b16      	ldr	r3, [pc, #88]	; (42d4 <_realloc_r+0x3d4>)
    427c:	e733      	b.n	40e6 <_realloc_r+0x1e6>
    427e:	6922      	ldr	r2, [r4, #16]
    4280:	f8ca 2018 	str.w	r2, [sl, #24]
    4284:	6962      	ldr	r2, [r4, #20]
    4286:	f8ca 201c 	str.w	r2, [sl, #28]
    428a:	3418      	adds	r4, #24
    428c:	f10a 0220 	add.w	r2, sl, #32
    4290:	e778      	b.n	4184 <_realloc_r+0x284>
    4292:	68a1      	ldr	r1, [r4, #8]
    4294:	f8ca 1010 	str.w	r1, [sl, #16]
    4298:	68e1      	ldr	r1, [r4, #12]
    429a:	f8ca 1014 	str.w	r1, [sl, #20]
    429e:	2a24      	cmp	r2, #36	; 0x24
    42a0:	d00d      	beq.n	42be <_realloc_r+0x3be>
    42a2:	3410      	adds	r4, #16
    42a4:	f10a 0218 	add.w	r2, sl, #24
    42a8:	e717      	b.n	40da <_realloc_r+0x1da>
    42aa:	6923      	ldr	r3, [r4, #16]
    42ac:	f8ca 3018 	str.w	r3, [sl, #24]
    42b0:	6963      	ldr	r3, [r4, #20]
    42b2:	f8ca 301c 	str.w	r3, [sl, #28]
    42b6:	3418      	adds	r4, #24
    42b8:	f10a 0320 	add.w	r3, sl, #32
    42bc:	e78b      	b.n	41d6 <_realloc_r+0x2d6>
    42be:	6922      	ldr	r2, [r4, #16]
    42c0:	f8ca 2018 	str.w	r2, [sl, #24]
    42c4:	6962      	ldr	r2, [r4, #20]
    42c6:	f8ca 201c 	str.w	r2, [sl, #28]
    42ca:	3418      	adds	r4, #24
    42cc:	f10a 0220 	add.w	r2, sl, #32
    42d0:	e703      	b.n	40da <_realloc_r+0x1da>
    42d2:	bf00      	nop
    42d4:	200011f4 	.word	0x200011f4

000042d8 <__cxa_atexit>:
    42d8:	4613      	mov	r3, r2
    42da:	460a      	mov	r2, r1
    42dc:	4601      	mov	r1, r0
    42de:	2002      	movs	r0, #2
    42e0:	f000 be1c 	b.w	4f1c <__register_exitproc>

000042e4 <isspace>:
    42e4:	4b02      	ldr	r3, [pc, #8]	; (42f0 <isspace+0xc>)
    42e6:	4418      	add	r0, r3
    42e8:	7840      	ldrb	r0, [r0, #1]
    42ea:	f000 0008 	and.w	r0, r0, #8
    42ee:	4770      	bx	lr
    42f0:	200004bc 	.word	0x200004bc

000042f4 <toupper>:
    42f4:	4b03      	ldr	r3, [pc, #12]	; (4304 <toupper+0x10>)
    42f6:	5c1b      	ldrb	r3, [r3, r0]
    42f8:	f003 0303 	and.w	r3, r3, #3
    42fc:	2b02      	cmp	r3, #2
    42fe:	bf08      	it	eq
    4300:	3820      	subeq	r0, #32
    4302:	4770      	bx	lr
    4304:	200004bd 	.word	0x200004bd

00004308 <stdio_exit_handler>:
    4308:	4a02      	ldr	r2, [pc, #8]	; (4314 <stdio_exit_handler+0xc>)
    430a:	4903      	ldr	r1, [pc, #12]	; (4318 <stdio_exit_handler+0x10>)
    430c:	4803      	ldr	r0, [pc, #12]	; (431c <stdio_exit_handler+0x14>)
    430e:	f000 b8bb 	b.w	4488 <_fwalk_sglue>
    4312:	bf00      	nop
    4314:	20001604 	.word	0x20001604
    4318:	00007555 	.word	0x00007555
    431c:	20000e80 	.word	0x20000e80

00004320 <cleanup_stdio>:
    4320:	4b0c      	ldr	r3, [pc, #48]	; (4354 <cleanup_stdio+0x34>)
    4322:	6841      	ldr	r1, [r0, #4]
    4324:	4299      	cmp	r1, r3
    4326:	b510      	push	{r4, lr}
    4328:	4604      	mov	r4, r0
    432a:	d001      	beq.n	4330 <cleanup_stdio+0x10>
    432c:	f003 f912 	bl	7554 <_fclose_r>
    4330:	68a1      	ldr	r1, [r4, #8]
    4332:	4b09      	ldr	r3, [pc, #36]	; (4358 <cleanup_stdio+0x38>)
    4334:	4299      	cmp	r1, r3
    4336:	d002      	beq.n	433e <cleanup_stdio+0x1e>
    4338:	4620      	mov	r0, r4
    433a:	f003 f90b 	bl	7554 <_fclose_r>
    433e:	68e1      	ldr	r1, [r4, #12]
    4340:	4b06      	ldr	r3, [pc, #24]	; (435c <cleanup_stdio+0x3c>)
    4342:	4299      	cmp	r1, r3
    4344:	d004      	beq.n	4350 <cleanup_stdio+0x30>
    4346:	4620      	mov	r0, r4
    4348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    434c:	f003 b902 	b.w	7554 <_fclose_r>
    4350:	bd10      	pop	{r4, pc}
    4352:	bf00      	nop
    4354:	20001f1c 	.word	0x20001f1c
    4358:	20001f84 	.word	0x20001f84
    435c:	20001fec 	.word	0x20001fec

00004360 <global_stdio_init.part.0>:
    4360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4364:	4c2a      	ldr	r4, [pc, #168]	; (4410 <global_stdio_init.part.0+0xb0>)
    4366:	4b2b      	ldr	r3, [pc, #172]	; (4414 <global_stdio_init.part.0+0xb4>)
    4368:	482b      	ldr	r0, [pc, #172]	; (4418 <global_stdio_init.part.0+0xb8>)
    436a:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 442c <global_stdio_init.part.0+0xcc>
    436e:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 4430 <global_stdio_init.part.0+0xd0>
    4372:	4f2a      	ldr	r7, [pc, #168]	; (441c <global_stdio_init.part.0+0xbc>)
    4374:	6018      	str	r0, [r3, #0]
    4376:	2500      	movs	r5, #0
    4378:	2304      	movs	r3, #4
    437a:	2208      	movs	r2, #8
    437c:	4629      	mov	r1, r5
    437e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    4382:	4e27      	ldr	r6, [pc, #156]	; (4420 <global_stdio_init.part.0+0xc0>)
    4384:	6665      	str	r5, [r4, #100]	; 0x64
    4386:	e9c4 5302 	strd	r5, r3, [r4, #8]
    438a:	e9c4 5500 	strd	r5, r5, [r4]
    438e:	e9c4 5504 	strd	r5, r5, [r4, #16]
    4392:	61a5      	str	r5, [r4, #24]
    4394:	f000 fa08 	bl	47a8 <memset>
    4398:	4b22      	ldr	r3, [pc, #136]	; (4424 <global_stdio_init.part.0+0xc4>)
    439a:	6763      	str	r3, [r4, #116]	; 0x74
    439c:	2208      	movs	r2, #8
    439e:	4629      	mov	r1, r5
    43a0:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    43a4:	e9c4 4907 	strd	r4, r9, [r4, #28]
    43a8:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
    43ac:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
    43b0:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
    43b4:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
    43b8:	6725      	str	r5, [r4, #112]	; 0x70
    43ba:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    43be:	62e6      	str	r6, [r4, #44]	; 0x2c
    43c0:	f000 f9f2 	bl	47a8 <memset>
    43c4:	4b18      	ldr	r3, [pc, #96]	; (4428 <global_stdio_init.part.0+0xc8>)
    43c6:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    43ca:	4629      	mov	r1, r5
    43cc:	f104 0368 	add.w	r3, r4, #104	; 0x68
    43d0:	2208      	movs	r2, #8
    43d2:	f504 7096 	add.w	r0, r4, #300	; 0x12c
    43d6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    43da:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
    43de:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
    43e2:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
    43e6:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
    43ea:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    43ee:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
    43f2:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    43f6:	f000 f9d7 	bl	47a8 <memset>
    43fa:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    43fe:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
    4402:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
    4406:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    440a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    440e:	bf00      	nop
    4410:	20001f1c 	.word	0x20001f1c
    4414:	20002054 	.word	0x20002054
    4418:	00004309 	.word	0x00004309
    441c:	000045bd 	.word	0x000045bd
    4420:	000045dd 	.word	0x000045dd
    4424:	00010009 	.word	0x00010009
    4428:	00020012 	.word	0x00020012
    442c:	00004559 	.word	0x00004559
    4430:	0000457d 	.word	0x0000457d

00004434 <__sinit>:
    4434:	b510      	push	{r4, lr}
    4436:	4604      	mov	r4, r0
    4438:	480a      	ldr	r0, [pc, #40]	; (4464 <__sinit+0x30>)
    443a:	f000 fb19 	bl	4a70 <__retarget_lock_acquire_recursive>
    443e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4440:	b923      	cbnz	r3, 444c <__sinit+0x18>
    4442:	4b09      	ldr	r3, [pc, #36]	; (4468 <__sinit+0x34>)
    4444:	4a09      	ldr	r2, [pc, #36]	; (446c <__sinit+0x38>)
    4446:	681b      	ldr	r3, [r3, #0]
    4448:	6362      	str	r2, [r4, #52]	; 0x34
    444a:	b123      	cbz	r3, 4456 <__sinit+0x22>
    444c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4450:	4804      	ldr	r0, [pc, #16]	; (4464 <__sinit+0x30>)
    4452:	f000 bb0f 	b.w	4a74 <__retarget_lock_release_recursive>
    4456:	f7ff ff83 	bl	4360 <global_stdio_init.part.0>
    445a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    445e:	4801      	ldr	r0, [pc, #4]	; (4464 <__sinit+0x30>)
    4460:	f000 bb08 	b.w	4a74 <__retarget_lock_release_recursive>
    4464:	20001ee4 	.word	0x20001ee4
    4468:	20002054 	.word	0x20002054
    446c:	00004321 	.word	0x00004321

00004470 <__sfp_lock_acquire>:
    4470:	4801      	ldr	r0, [pc, #4]	; (4478 <__sfp_lock_acquire+0x8>)
    4472:	f000 bafd 	b.w	4a70 <__retarget_lock_acquire_recursive>
    4476:	bf00      	nop
    4478:	20001ee4 	.word	0x20001ee4

0000447c <__sfp_lock_release>:
    447c:	4801      	ldr	r0, [pc, #4]	; (4484 <__sfp_lock_release+0x8>)
    447e:	f000 baf9 	b.w	4a74 <__retarget_lock_release_recursive>
    4482:	bf00      	nop
    4484:	20001ee4 	.word	0x20001ee4

00004488 <_fwalk_sglue>:
    4488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    448c:	4680      	mov	r8, r0
    448e:	460f      	mov	r7, r1
    4490:	4616      	mov	r6, r2
    4492:	f04f 0900 	mov.w	r9, #0
    4496:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
    449a:	3d01      	subs	r5, #1
    449c:	d411      	bmi.n	44c2 <_fwalk_sglue+0x3a>
    449e:	89a3      	ldrh	r3, [r4, #12]
    44a0:	2b01      	cmp	r3, #1
    44a2:	f105 35ff 	add.w	r5, r5, #4294967295
    44a6:	d908      	bls.n	44ba <_fwalk_sglue+0x32>
    44a8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    44ac:	3301      	adds	r3, #1
    44ae:	4621      	mov	r1, r4
    44b0:	d003      	beq.n	44ba <_fwalk_sglue+0x32>
    44b2:	4640      	mov	r0, r8
    44b4:	47b8      	blx	r7
    44b6:	ea49 0900 	orr.w	r9, r9, r0
    44ba:	1c6b      	adds	r3, r5, #1
    44bc:	f104 0468 	add.w	r4, r4, #104	; 0x68
    44c0:	d1ed      	bne.n	449e <_fwalk_sglue+0x16>
    44c2:	6836      	ldr	r6, [r6, #0]
    44c4:	2e00      	cmp	r6, #0
    44c6:	d1e6      	bne.n	4496 <_fwalk_sglue+0xe>
    44c8:	4648      	mov	r0, r9
    44ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    44ce:	bf00      	nop

000044d0 <snprintf>:
    44d0:	b40c      	push	{r2, r3}
    44d2:	b510      	push	{r4, lr}
    44d4:	4b1f      	ldr	r3, [pc, #124]	; (4554 <snprintf+0x84>)
    44d6:	2900      	cmp	r1, #0
    44d8:	681c      	ldr	r4, [r3, #0]
    44da:	b09c      	sub	sp, #112	; 0x70
    44dc:	db35      	blt.n	454a <snprintf+0x7a>
    44de:	f44f 7302 	mov.w	r3, #520	; 0x208
    44e2:	f8ad 3014 	strh.w	r3, [sp, #20]
    44e6:	9002      	str	r0, [sp, #8]
    44e8:	9006      	str	r0, [sp, #24]
    44ea:	ab1f      	add	r3, sp, #124	; 0x7c
    44ec:	d018      	beq.n	4520 <snprintf+0x50>
    44ee:	3901      	subs	r1, #1
    44f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
    44f4:	9104      	str	r1, [sp, #16]
    44f6:	9107      	str	r1, [sp, #28]
    44f8:	f8ad 2016 	strh.w	r2, [sp, #22]
    44fc:	a902      	add	r1, sp, #8
    44fe:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    4500:	9301      	str	r3, [sp, #4]
    4502:	4620      	mov	r0, r4
    4504:	f001 fa84 	bl	5a10 <_svfprintf_r>
    4508:	1c42      	adds	r2, r0, #1
    450a:	da01      	bge.n	4510 <snprintf+0x40>
    450c:	238b      	movs	r3, #139	; 0x8b
    450e:	6023      	str	r3, [r4, #0]
    4510:	9b02      	ldr	r3, [sp, #8]
    4512:	2200      	movs	r2, #0
    4514:	701a      	strb	r2, [r3, #0]
    4516:	b01c      	add	sp, #112	; 0x70
    4518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    451c:	b002      	add	sp, #8
    451e:	4770      	bx	lr
    4520:	f64f 72ff 	movw	r2, #65535	; 0xffff
    4524:	9104      	str	r1, [sp, #16]
    4526:	9107      	str	r1, [sp, #28]
    4528:	f8ad 2016 	strh.w	r2, [sp, #22]
    452c:	a902      	add	r1, sp, #8
    452e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    4530:	9301      	str	r3, [sp, #4]
    4532:	4620      	mov	r0, r4
    4534:	f001 fa6c 	bl	5a10 <_svfprintf_r>
    4538:	1c43      	adds	r3, r0, #1
    453a:	da01      	bge.n	4540 <snprintf+0x70>
    453c:	238b      	movs	r3, #139	; 0x8b
    453e:	6023      	str	r3, [r4, #0]
    4540:	b01c      	add	sp, #112	; 0x70
    4542:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4546:	b002      	add	sp, #8
    4548:	4770      	bx	lr
    454a:	238b      	movs	r3, #139	; 0x8b
    454c:	6023      	str	r3, [r4, #0]
    454e:	f04f 30ff 	mov.w	r0, #4294967295
    4552:	e7f5      	b.n	4540 <snprintf+0x70>
    4554:	20001610 	.word	0x20001610

00004558 <__sread>:
    4558:	b510      	push	{r4, lr}
    455a:	460c      	mov	r4, r1
    455c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    4560:	f000 fa1a 	bl	4998 <_read_r>
    4564:	2800      	cmp	r0, #0
    4566:	db03      	blt.n	4570 <__sread+0x18>
    4568:	6d23      	ldr	r3, [r4, #80]	; 0x50
    456a:	4403      	add	r3, r0
    456c:	6523      	str	r3, [r4, #80]	; 0x50
    456e:	bd10      	pop	{r4, pc}
    4570:	89a3      	ldrh	r3, [r4, #12]
    4572:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    4576:	81a3      	strh	r3, [r4, #12]
    4578:	bd10      	pop	{r4, pc}
    457a:	bf00      	nop

0000457c <__swrite>:
    457c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4580:	460c      	mov	r4, r1
    4582:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
    4586:	461f      	mov	r7, r3
    4588:	05cb      	lsls	r3, r1, #23
    458a:	4605      	mov	r5, r0
    458c:	4616      	mov	r6, r2
    458e:	d40b      	bmi.n	45a8 <__swrite+0x2c>
    4590:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
    4594:	81a1      	strh	r1, [r4, #12]
    4596:	463b      	mov	r3, r7
    4598:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    459c:	4632      	mov	r2, r6
    459e:	4628      	mov	r0, r5
    45a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    45a4:	f000 ba20 	b.w	49e8 <_write_r>
    45a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    45ac:	2302      	movs	r3, #2
    45ae:	2200      	movs	r2, #0
    45b0:	f000 f9dc 	bl	496c <_lseek_r>
    45b4:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
    45b8:	e7ea      	b.n	4590 <__swrite+0x14>
    45ba:	bf00      	nop

000045bc <__sseek>:
    45bc:	b510      	push	{r4, lr}
    45be:	460c      	mov	r4, r1
    45c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    45c4:	f000 f9d2 	bl	496c <_lseek_r>
    45c8:	89a3      	ldrh	r3, [r4, #12]
    45ca:	1c42      	adds	r2, r0, #1
    45cc:	bf0e      	itee	eq
    45ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    45d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    45d6:	6520      	strne	r0, [r4, #80]	; 0x50
    45d8:	81a3      	strh	r3, [r4, #12]
    45da:	bd10      	pop	{r4, pc}

000045dc <__sclose>:
    45dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    45e0:	f000 b9b2 	b.w	4948 <_close_r>

000045e4 <_vdprintf_r>:
    45e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    45e6:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
    45ea:	af04      	add	r7, sp, #16
    45ec:	9300      	str	r3, [sp, #0]
    45ee:	4613      	mov	r3, r2
    45f0:	f44f 7200 	mov.w	r2, #512	; 0x200
    45f4:	460e      	mov	r6, r1
    45f6:	9203      	str	r2, [sp, #12]
    45f8:	4639      	mov	r1, r7
    45fa:	aa03      	add	r2, sp, #12
    45fc:	4605      	mov	r5, r0
    45fe:	f000 f825 	bl	464c <_vasnprintf_r>
    4602:	b188      	cbz	r0, 4628 <_vdprintf_r+0x44>
    4604:	4604      	mov	r4, r0
    4606:	4602      	mov	r2, r0
    4608:	9b03      	ldr	r3, [sp, #12]
    460a:	4631      	mov	r1, r6
    460c:	4628      	mov	r0, r5
    460e:	f000 f9eb 	bl	49e8 <_write_r>
    4612:	42bc      	cmp	r4, r7
    4614:	9003      	str	r0, [sp, #12]
    4616:	d004      	beq.n	4622 <_vdprintf_r+0x3e>
    4618:	4628      	mov	r0, r5
    461a:	4621      	mov	r1, r4
    461c:	f000 fd12 	bl	5044 <_free_r>
    4620:	9803      	ldr	r0, [sp, #12]
    4622:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
    4626:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4628:	f04f 30ff 	mov.w	r0, #4294967295
    462c:	e7f9      	b.n	4622 <_vdprintf_r+0x3e>
    462e:	bf00      	nop

00004630 <vdprintf>:
    4630:	b410      	push	{r4}
    4632:	4c05      	ldr	r4, [pc, #20]	; (4648 <vdprintf+0x18>)
    4634:	4684      	mov	ip, r0
    4636:	4613      	mov	r3, r2
    4638:	6820      	ldr	r0, [r4, #0]
    463a:	f85d 4b04 	ldr.w	r4, [sp], #4
    463e:	460a      	mov	r2, r1
    4640:	4661      	mov	r1, ip
    4642:	f7ff bfcf 	b.w	45e4 <_vdprintf_r>
    4646:	bf00      	nop
    4648:	20001610 	.word	0x20001610

0000464c <_vasnprintf_r>:
    464c:	b530      	push	{r4, r5, lr}
    464e:	6814      	ldr	r4, [r2, #0]
    4650:	4615      	mov	r5, r2
    4652:	b09b      	sub	sp, #108	; 0x6c
    4654:	461a      	mov	r2, r3
    4656:	b109      	cbz	r1, 465c <_vasnprintf_r+0x10>
    4658:	2c00      	cmp	r4, #0
    465a:	d119      	bne.n	4690 <_vasnprintf_r+0x44>
    465c:	2100      	movs	r1, #0
    465e:	f44f 7322 	mov.w	r3, #648	; 0x288
    4662:	f8ad 300c 	strh.w	r3, [sp, #12]
    4666:	9100      	str	r1, [sp, #0]
    4668:	9104      	str	r1, [sp, #16]
    466a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    466e:	9102      	str	r1, [sp, #8]
    4670:	9105      	str	r1, [sp, #20]
    4672:	f8ad 300e 	strh.w	r3, [sp, #14]
    4676:	4669      	mov	r1, sp
    4678:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    467a:	f001 f9c9 	bl	5a10 <_svfprintf_r>
    467e:	2800      	cmp	r0, #0
    4680:	db13      	blt.n	46aa <_vasnprintf_r+0x5e>
    4682:	9b00      	ldr	r3, [sp, #0]
    4684:	6028      	str	r0, [r5, #0]
    4686:	2200      	movs	r2, #0
    4688:	701a      	strb	r2, [r3, #0]
    468a:	9804      	ldr	r0, [sp, #16]
    468c:	b01b      	add	sp, #108	; 0x6c
    468e:	bd30      	pop	{r4, r5, pc}
    4690:	f44f 63c1 	mov.w	r3, #1544	; 0x608
    4694:	9100      	str	r1, [sp, #0]
    4696:	9104      	str	r1, [sp, #16]
    4698:	f8ad 300c 	strh.w	r3, [sp, #12]
    469c:	4621      	mov	r1, r4
    469e:	dae4      	bge.n	466a <_vasnprintf_r+0x1e>
    46a0:	238b      	movs	r3, #139	; 0x8b
    46a2:	6003      	str	r3, [r0, #0]
    46a4:	2000      	movs	r0, #0
    46a6:	b01b      	add	sp, #108	; 0x6c
    46a8:	bd30      	pop	{r4, r5, pc}
    46aa:	2000      	movs	r0, #0
    46ac:	e7ee      	b.n	468c <_vasnprintf_r+0x40>
    46ae:	bf00      	nop

000046b0 <memmove>:
    46b0:	4288      	cmp	r0, r1
    46b2:	d90d      	bls.n	46d0 <memmove+0x20>
    46b4:	188b      	adds	r3, r1, r2
    46b6:	4283      	cmp	r3, r0
    46b8:	d90a      	bls.n	46d0 <memmove+0x20>
    46ba:	eb00 0c02 	add.w	ip, r0, r2
    46be:	b1ba      	cbz	r2, 46f0 <memmove+0x40>
    46c0:	4662      	mov	r2, ip
    46c2:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
    46c6:	f802 cd01 	strb.w	ip, [r2, #-1]!
    46ca:	4299      	cmp	r1, r3
    46cc:	d1f9      	bne.n	46c2 <memmove+0x12>
    46ce:	4770      	bx	lr
    46d0:	2a0f      	cmp	r2, #15
    46d2:	d80e      	bhi.n	46f2 <memmove+0x42>
    46d4:	4603      	mov	r3, r0
    46d6:	f102 3cff 	add.w	ip, r2, #4294967295
    46da:	b14a      	cbz	r2, 46f0 <memmove+0x40>
    46dc:	f10c 0c01 	add.w	ip, ip, #1
    46e0:	3b01      	subs	r3, #1
    46e2:	448c      	add	ip, r1
    46e4:	f811 2b01 	ldrb.w	r2, [r1], #1
    46e8:	f803 2f01 	strb.w	r2, [r3, #1]!
    46ec:	4561      	cmp	r1, ip
    46ee:	d1f9      	bne.n	46e4 <memmove+0x34>
    46f0:	4770      	bx	lr
    46f2:	ea40 0301 	orr.w	r3, r0, r1
    46f6:	079b      	lsls	r3, r3, #30
    46f8:	d150      	bne.n	479c <memmove+0xec>
    46fa:	f1a2 0310 	sub.w	r3, r2, #16
    46fe:	b570      	push	{r4, r5, r6, lr}
    4700:	f101 0c20 	add.w	ip, r1, #32
    4704:	f023 050f 	bic.w	r5, r3, #15
    4708:	f101 0e10 	add.w	lr, r1, #16
    470c:	f100 0410 	add.w	r4, r0, #16
    4710:	44ac      	add	ip, r5
    4712:	091b      	lsrs	r3, r3, #4
    4714:	f85e 5c10 	ldr.w	r5, [lr, #-16]
    4718:	f844 5c10 	str.w	r5, [r4, #-16]
    471c:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
    4720:	f844 5c0c 	str.w	r5, [r4, #-12]
    4724:	f85e 5c08 	ldr.w	r5, [lr, #-8]
    4728:	f844 5c08 	str.w	r5, [r4, #-8]
    472c:	f85e 5c04 	ldr.w	r5, [lr, #-4]
    4730:	f844 5c04 	str.w	r5, [r4, #-4]
    4734:	f10e 0e10 	add.w	lr, lr, #16
    4738:	45e6      	cmp	lr, ip
    473a:	f104 0410 	add.w	r4, r4, #16
    473e:	d1e9      	bne.n	4714 <memmove+0x64>
    4740:	3301      	adds	r3, #1
    4742:	f012 0f0c 	tst.w	r2, #12
    4746:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    474a:	f002 040f 	and.w	r4, r2, #15
    474e:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    4752:	d027      	beq.n	47a4 <memmove+0xf4>
    4754:	3c04      	subs	r4, #4
    4756:	f024 0603 	bic.w	r6, r4, #3
    475a:	ea4f 0c94 	mov.w	ip, r4, lsr #2
    475e:	441e      	add	r6, r3
    4760:	1f1c      	subs	r4, r3, #4
    4762:	468e      	mov	lr, r1
    4764:	f85e 5b04 	ldr.w	r5, [lr], #4
    4768:	f844 5f04 	str.w	r5, [r4, #4]!
    476c:	42b4      	cmp	r4, r6
    476e:	d1f9      	bne.n	4764 <memmove+0xb4>
    4770:	f10c 0401 	add.w	r4, ip, #1
    4774:	f002 0203 	and.w	r2, r2, #3
    4778:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    477c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    4780:	f102 3cff 	add.w	ip, r2, #4294967295
    4784:	b14a      	cbz	r2, 479a <memmove+0xea>
    4786:	f10c 0c01 	add.w	ip, ip, #1
    478a:	3b01      	subs	r3, #1
    478c:	448c      	add	ip, r1
    478e:	f811 2b01 	ldrb.w	r2, [r1], #1
    4792:	f803 2f01 	strb.w	r2, [r3, #1]!
    4796:	4561      	cmp	r1, ip
    4798:	d1f9      	bne.n	478e <memmove+0xde>
    479a:	bd70      	pop	{r4, r5, r6, pc}
    479c:	f102 3cff 	add.w	ip, r2, #4294967295
    47a0:	4603      	mov	r3, r0
    47a2:	e79b      	b.n	46dc <memmove+0x2c>
    47a4:	4622      	mov	r2, r4
    47a6:	e7eb      	b.n	4780 <memmove+0xd0>

000047a8 <memset>:
    47a8:	0783      	lsls	r3, r0, #30
    47aa:	b530      	push	{r4, r5, lr}
    47ac:	d048      	beq.n	4840 <memset+0x98>
    47ae:	1e54      	subs	r4, r2, #1
    47b0:	2a00      	cmp	r2, #0
    47b2:	d03f      	beq.n	4834 <memset+0x8c>
    47b4:	b2ca      	uxtb	r2, r1
    47b6:	4603      	mov	r3, r0
    47b8:	e001      	b.n	47be <memset+0x16>
    47ba:	3c01      	subs	r4, #1
    47bc:	d33a      	bcc.n	4834 <memset+0x8c>
    47be:	f803 2b01 	strb.w	r2, [r3], #1
    47c2:	079d      	lsls	r5, r3, #30
    47c4:	d1f9      	bne.n	47ba <memset+0x12>
    47c6:	2c03      	cmp	r4, #3
    47c8:	d92d      	bls.n	4826 <memset+0x7e>
    47ca:	b2cd      	uxtb	r5, r1
    47cc:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    47d0:	2c0f      	cmp	r4, #15
    47d2:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    47d6:	d936      	bls.n	4846 <memset+0x9e>
    47d8:	f1a4 0210 	sub.w	r2, r4, #16
    47dc:	f022 0c0f 	bic.w	ip, r2, #15
    47e0:	f103 0e20 	add.w	lr, r3, #32
    47e4:	44e6      	add	lr, ip
    47e6:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    47ea:	f103 0210 	add.w	r2, r3, #16
    47ee:	e942 5504 	strd	r5, r5, [r2, #-16]
    47f2:	e942 5502 	strd	r5, r5, [r2, #-8]
    47f6:	3210      	adds	r2, #16
    47f8:	4572      	cmp	r2, lr
    47fa:	d1f8      	bne.n	47ee <memset+0x46>
    47fc:	f10c 0201 	add.w	r2, ip, #1
    4800:	f014 0f0c 	tst.w	r4, #12
    4804:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    4808:	f004 0c0f 	and.w	ip, r4, #15
    480c:	d013      	beq.n	4836 <memset+0x8e>
    480e:	f1ac 0304 	sub.w	r3, ip, #4
    4812:	f023 0303 	bic.w	r3, r3, #3
    4816:	3304      	adds	r3, #4
    4818:	4413      	add	r3, r2
    481a:	f842 5b04 	str.w	r5, [r2], #4
    481e:	4293      	cmp	r3, r2
    4820:	d1fb      	bne.n	481a <memset+0x72>
    4822:	f00c 0403 	and.w	r4, ip, #3
    4826:	b12c      	cbz	r4, 4834 <memset+0x8c>
    4828:	b2c9      	uxtb	r1, r1
    482a:	441c      	add	r4, r3
    482c:	f803 1b01 	strb.w	r1, [r3], #1
    4830:	429c      	cmp	r4, r3
    4832:	d1fb      	bne.n	482c <memset+0x84>
    4834:	bd30      	pop	{r4, r5, pc}
    4836:	4664      	mov	r4, ip
    4838:	4613      	mov	r3, r2
    483a:	2c00      	cmp	r4, #0
    483c:	d1f4      	bne.n	4828 <memset+0x80>
    483e:	e7f9      	b.n	4834 <memset+0x8c>
    4840:	4603      	mov	r3, r0
    4842:	4614      	mov	r4, r2
    4844:	e7bf      	b.n	47c6 <memset+0x1e>
    4846:	461a      	mov	r2, r3
    4848:	46a4      	mov	ip, r4
    484a:	e7e0      	b.n	480e <memset+0x66>

0000484c <strncmp>:
    484c:	2a00      	cmp	r2, #0
    484e:	d03e      	beq.n	48ce <strncmp+0x82>
    4850:	ea40 0301 	orr.w	r3, r0, r1
    4854:	079b      	lsls	r3, r3, #30
    4856:	b530      	push	{r4, r5, lr}
    4858:	4684      	mov	ip, r0
    485a:	d12f      	bne.n	48bc <strncmp+0x70>
    485c:	2a03      	cmp	r2, #3
    485e:	d92d      	bls.n	48bc <strncmp+0x70>
    4860:	460b      	mov	r3, r1
    4862:	e008      	b.n	4876 <strncmp+0x2a>
    4864:	3a04      	subs	r2, #4
    4866:	4684      	mov	ip, r0
    4868:	4619      	mov	r1, r3
    486a:	d025      	beq.n	48b8 <strncmp+0x6c>
    486c:	f01e 3f80 	tst.w	lr, #2155905152	; 0x80808080
    4870:	d122      	bne.n	48b8 <strncmp+0x6c>
    4872:	2a03      	cmp	r2, #3
    4874:	d922      	bls.n	48bc <strncmp+0x70>
    4876:	6804      	ldr	r4, [r0, #0]
    4878:	4619      	mov	r1, r3
    487a:	f853 5b04 	ldr.w	r5, [r3], #4
    487e:	f1a4 3e01 	sub.w	lr, r4, #16843009	; 0x1010101
    4882:	42ac      	cmp	r4, r5
    4884:	4684      	mov	ip, r0
    4886:	ea2e 0e04 	bic.w	lr, lr, r4
    488a:	f100 0004 	add.w	r0, r0, #4
    488e:	d0e9      	beq.n	4864 <strncmp+0x18>
    4890:	f89c 0000 	ldrb.w	r0, [ip]
    4894:	780c      	ldrb	r4, [r1, #0]
    4896:	42a0      	cmp	r0, r4
    4898:	d11b      	bne.n	48d2 <strncmp+0x86>
    489a:	46e6      	mov	lr, ip
    489c:	b168      	cbz	r0, 48ba <strncmp+0x6e>
    489e:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
    48a2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    48a6:	eba2 030e 	sub.w	r3, r2, lr
    48aa:	42a0      	cmp	r0, r4
    48ac:	f103 33ff 	add.w	r3, r3, #4294967295
    48b0:	d10f      	bne.n	48d2 <strncmp+0x86>
    48b2:	eb1c 0303 	adds.w	r3, ip, r3
    48b6:	d1f1      	bne.n	489c <strncmp+0x50>
    48b8:	2000      	movs	r0, #0
    48ba:	bd30      	pop	{r4, r5, pc}
    48bc:	f89c 0000 	ldrb.w	r0, [ip]
    48c0:	780c      	ldrb	r4, [r1, #0]
    48c2:	4284      	cmp	r4, r0
    48c4:	d105      	bne.n	48d2 <strncmp+0x86>
    48c6:	2a01      	cmp	r2, #1
    48c8:	d0f6      	beq.n	48b8 <strncmp+0x6c>
    48ca:	46e6      	mov	lr, ip
    48cc:	e7e6      	b.n	489c <strncmp+0x50>
    48ce:	4610      	mov	r0, r2
    48d0:	4770      	bx	lr
    48d2:	1b00      	subs	r0, r0, r4
    48d4:	bd30      	pop	{r4, r5, pc}
    48d6:	bf00      	nop

000048d8 <strncpy>:
    48d8:	ea40 0301 	orr.w	r3, r0, r1
    48dc:	079b      	lsls	r3, r3, #30
    48de:	b530      	push	{r4, r5, lr}
    48e0:	d101      	bne.n	48e6 <strncpy+0xe>
    48e2:	2a03      	cmp	r2, #3
    48e4:	d80f      	bhi.n	4906 <strncpy+0x2e>
    48e6:	4684      	mov	ip, r0
    48e8:	f101 3eff 	add.w	lr, r1, #4294967295
    48ec:	e007      	b.n	48fe <strncpy+0x26>
    48ee:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    48f2:	f803 1b01 	strb.w	r1, [r3], #1
    48f6:	1e54      	subs	r4, r2, #1
    48f8:	b1c1      	cbz	r1, 492c <strncpy+0x54>
    48fa:	469c      	mov	ip, r3
    48fc:	4622      	mov	r2, r4
    48fe:	4663      	mov	r3, ip
    4900:	2a00      	cmp	r2, #0
    4902:	d1f4      	bne.n	48ee <strncpy+0x16>
    4904:	bd30      	pop	{r4, r5, pc}
    4906:	460b      	mov	r3, r1
    4908:	4684      	mov	ip, r0
    490a:	4619      	mov	r1, r3
    490c:	f853 5b04 	ldr.w	r5, [r3], #4
    4910:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
    4914:	ea24 0405 	bic.w	r4, r4, r5
    4918:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    491c:	d1e4      	bne.n	48e8 <strncpy+0x10>
    491e:	3a04      	subs	r2, #4
    4920:	2a03      	cmp	r2, #3
    4922:	f84c 5b04 	str.w	r5, [ip], #4
    4926:	4619      	mov	r1, r3
    4928:	d8ef      	bhi.n	490a <strncpy+0x32>
    492a:	e7dd      	b.n	48e8 <strncpy+0x10>
    492c:	4494      	add	ip, r2
    492e:	2c00      	cmp	r4, #0
    4930:	d0e8      	beq.n	4904 <strncpy+0x2c>
    4932:	f803 1b01 	strb.w	r1, [r3], #1
    4936:	4563      	cmp	r3, ip
    4938:	d1fb      	bne.n	4932 <strncpy+0x5a>
    493a:	bd30      	pop	{r4, r5, pc}

0000493c <__locale_mb_cur_max>:
    493c:	4b01      	ldr	r3, [pc, #4]	; (4944 <__locale_mb_cur_max+0x8>)
    493e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
    4942:	4770      	bx	lr
    4944:	20001088 	.word	0x20001088

00004948 <_close_r>:
    4948:	b538      	push	{r3, r4, r5, lr}
    494a:	4d07      	ldr	r5, [pc, #28]	; (4968 <_close_r+0x20>)
    494c:	2200      	movs	r2, #0
    494e:	4604      	mov	r4, r0
    4950:	4608      	mov	r0, r1
    4952:	602a      	str	r2, [r5, #0]
    4954:	f7fd fcc0 	bl	22d8 <_close>
    4958:	1c43      	adds	r3, r0, #1
    495a:	d000      	beq.n	495e <_close_r+0x16>
    495c:	bd38      	pop	{r3, r4, r5, pc}
    495e:	682b      	ldr	r3, [r5, #0]
    4960:	2b00      	cmp	r3, #0
    4962:	d0fb      	beq.n	495c <_close_r+0x14>
    4964:	6023      	str	r3, [r4, #0]
    4966:	bd38      	pop	{r3, r4, r5, pc}
    4968:	20002068 	.word	0x20002068

0000496c <_lseek_r>:
    496c:	b538      	push	{r3, r4, r5, lr}
    496e:	460c      	mov	r4, r1
    4970:	4d08      	ldr	r5, [pc, #32]	; (4994 <_lseek_r+0x28>)
    4972:	4684      	mov	ip, r0
    4974:	4611      	mov	r1, r2
    4976:	4620      	mov	r0, r4
    4978:	461a      	mov	r2, r3
    497a:	2300      	movs	r3, #0
    497c:	602b      	str	r3, [r5, #0]
    497e:	4664      	mov	r4, ip
    4980:	f7fd fcb6 	bl	22f0 <_lseek>
    4984:	1c43      	adds	r3, r0, #1
    4986:	d000      	beq.n	498a <_lseek_r+0x1e>
    4988:	bd38      	pop	{r3, r4, r5, pc}
    498a:	682b      	ldr	r3, [r5, #0]
    498c:	2b00      	cmp	r3, #0
    498e:	d0fb      	beq.n	4988 <_lseek_r+0x1c>
    4990:	6023      	str	r3, [r4, #0]
    4992:	bd38      	pop	{r3, r4, r5, pc}
    4994:	20002068 	.word	0x20002068

00004998 <_read_r>:
    4998:	b538      	push	{r3, r4, r5, lr}
    499a:	460c      	mov	r4, r1
    499c:	4d08      	ldr	r5, [pc, #32]	; (49c0 <_read_r+0x28>)
    499e:	4684      	mov	ip, r0
    49a0:	4611      	mov	r1, r2
    49a2:	4620      	mov	r0, r4
    49a4:	461a      	mov	r2, r3
    49a6:	2300      	movs	r3, #0
    49a8:	602b      	str	r3, [r5, #0]
    49aa:	4664      	mov	r4, ip
    49ac:	f7fd fc92 	bl	22d4 <_read>
    49b0:	1c43      	adds	r3, r0, #1
    49b2:	d000      	beq.n	49b6 <_read_r+0x1e>
    49b4:	bd38      	pop	{r3, r4, r5, pc}
    49b6:	682b      	ldr	r3, [r5, #0]
    49b8:	2b00      	cmp	r3, #0
    49ba:	d0fb      	beq.n	49b4 <_read_r+0x1c>
    49bc:	6023      	str	r3, [r4, #0]
    49be:	bd38      	pop	{r3, r4, r5, pc}
    49c0:	20002068 	.word	0x20002068

000049c4 <_sbrk_r>:
    49c4:	b538      	push	{r3, r4, r5, lr}
    49c6:	4d07      	ldr	r5, [pc, #28]	; (49e4 <_sbrk_r+0x20>)
    49c8:	2200      	movs	r2, #0
    49ca:	4604      	mov	r4, r0
    49cc:	4608      	mov	r0, r1
    49ce:	602a      	str	r2, [r5, #0]
    49d0:	f7fd fc66 	bl	22a0 <_sbrk>
    49d4:	1c43      	adds	r3, r0, #1
    49d6:	d000      	beq.n	49da <_sbrk_r+0x16>
    49d8:	bd38      	pop	{r3, r4, r5, pc}
    49da:	682b      	ldr	r3, [r5, #0]
    49dc:	2b00      	cmp	r3, #0
    49de:	d0fb      	beq.n	49d8 <_sbrk_r+0x14>
    49e0:	6023      	str	r3, [r4, #0]
    49e2:	bd38      	pop	{r3, r4, r5, pc}
    49e4:	20002068 	.word	0x20002068

000049e8 <_write_r>:
    49e8:	b538      	push	{r3, r4, r5, lr}
    49ea:	460c      	mov	r4, r1
    49ec:	4d08      	ldr	r5, [pc, #32]	; (4a10 <_write_r+0x28>)
    49ee:	4684      	mov	ip, r0
    49f0:	4611      	mov	r1, r2
    49f2:	4620      	mov	r0, r4
    49f4:	461a      	mov	r2, r3
    49f6:	2300      	movs	r3, #0
    49f8:	602b      	str	r3, [r5, #0]
    49fa:	4664      	mov	r4, ip
    49fc:	f7fc fe0e 	bl	161c <_write>
    4a00:	1c43      	adds	r3, r0, #1
    4a02:	d000      	beq.n	4a06 <_write_r+0x1e>
    4a04:	bd38      	pop	{r3, r4, r5, pc}
    4a06:	682b      	ldr	r3, [r5, #0]
    4a08:	2b00      	cmp	r3, #0
    4a0a:	d0fb      	beq.n	4a04 <_write_r+0x1c>
    4a0c:	6023      	str	r3, [r4, #0]
    4a0e:	bd38      	pop	{r3, r4, r5, pc}
    4a10:	20002068 	.word	0x20002068

00004a14 <__errno>:
    4a14:	4b01      	ldr	r3, [pc, #4]	; (4a1c <__errno+0x8>)
    4a16:	6818      	ldr	r0, [r3, #0]
    4a18:	4770      	bx	lr
    4a1a:	bf00      	nop
    4a1c:	20001610 	.word	0x20001610

00004a20 <__libc_init_array>:
    4a20:	b570      	push	{r4, r5, r6, lr}
    4a22:	4e0d      	ldr	r6, [pc, #52]	; (4a58 <__libc_init_array+0x38>)
    4a24:	4d0d      	ldr	r5, [pc, #52]	; (4a5c <__libc_init_array+0x3c>)
    4a26:	1b76      	subs	r6, r6, r5
    4a28:	10b6      	asrs	r6, r6, #2
    4a2a:	d006      	beq.n	4a3a <__libc_init_array+0x1a>
    4a2c:	2400      	movs	r4, #0
    4a2e:	f855 3b04 	ldr.w	r3, [r5], #4
    4a32:	3401      	adds	r4, #1
    4a34:	4798      	blx	r3
    4a36:	42a6      	cmp	r6, r4
    4a38:	d1f9      	bne.n	4a2e <__libc_init_array+0xe>
    4a3a:	4e09      	ldr	r6, [pc, #36]	; (4a60 <__libc_init_array+0x40>)
    4a3c:	4d09      	ldr	r5, [pc, #36]	; (4a64 <__libc_init_array+0x44>)
    4a3e:	1b76      	subs	r6, r6, r5
    4a40:	f005 fba2 	bl	a188 <___init_veneer>
    4a44:	10b6      	asrs	r6, r6, #2
    4a46:	d006      	beq.n	4a56 <__libc_init_array+0x36>
    4a48:	2400      	movs	r4, #0
    4a4a:	f855 3b04 	ldr.w	r3, [r5], #4
    4a4e:	3401      	adds	r4, #1
    4a50:	4798      	blx	r3
    4a52:	42a6      	cmp	r6, r4
    4a54:	d1f9      	bne.n	4a4a <__libc_init_array+0x2a>
    4a56:	bd70      	pop	{r4, r5, r6, pc}
    4a58:	60001e80 	.word	0x60001e80
    4a5c:	60001e80 	.word	0x60001e80
    4a60:	60001e84 	.word	0x60001e84
    4a64:	60001e80 	.word	0x60001e80

00004a68 <__retarget_lock_init_recursive>:
    4a68:	4770      	bx	lr
    4a6a:	bf00      	nop

00004a6c <__retarget_lock_close_recursive>:
    4a6c:	4770      	bx	lr
    4a6e:	bf00      	nop

00004a70 <__retarget_lock_acquire_recursive>:
    4a70:	4770      	bx	lr
    4a72:	bf00      	nop

00004a74 <__retarget_lock_release_recursive>:
    4a74:	4770      	bx	lr
    4a76:	bf00      	nop
	...
    4a80:	eba2 0003 	sub.w	r0, r2, r3
    4a84:	4770      	bx	lr
    4a86:	bf00      	nop

00004a88 <strcmp>:
    4a88:	7802      	ldrb	r2, [r0, #0]
    4a8a:	780b      	ldrb	r3, [r1, #0]
    4a8c:	2a01      	cmp	r2, #1
    4a8e:	bf28      	it	cs
    4a90:	429a      	cmpcs	r2, r3
    4a92:	d1f5      	bne.n	4a80 <__retarget_lock_release_recursive+0xc>
    4a94:	e96d 4504 	strd	r4, r5, [sp, #-16]!
    4a98:	ea40 0401 	orr.w	r4, r0, r1
    4a9c:	e9cd 6702 	strd	r6, r7, [sp, #8]
    4aa0:	f06f 0c00 	mvn.w	ip, #0
    4aa4:	ea4f 7244 	mov.w	r2, r4, lsl #29
    4aa8:	b312      	cbz	r2, 4af0 <strcmp+0x68>
    4aaa:	ea80 0401 	eor.w	r4, r0, r1
    4aae:	f014 0f07 	tst.w	r4, #7
    4ab2:	d16a      	bne.n	4b8a <strcmp+0x102>
    4ab4:	f000 0407 	and.w	r4, r0, #7
    4ab8:	f020 0007 	bic.w	r0, r0, #7
    4abc:	f004 0503 	and.w	r5, r4, #3
    4ac0:	f021 0107 	bic.w	r1, r1, #7
    4ac4:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    4ac8:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    4acc:	f014 0f04 	tst.w	r4, #4
    4ad0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    4ad4:	fa0c f405 	lsl.w	r4, ip, r5
    4ad8:	ea62 0204 	orn	r2, r2, r4
    4adc:	ea66 0604 	orn	r6, r6, r4
    4ae0:	d00a      	beq.n	4af8 <strcmp+0x70>
    4ae2:	ea63 0304 	orn	r3, r3, r4
    4ae6:	4662      	mov	r2, ip
    4ae8:	ea67 0704 	orn	r7, r7, r4
    4aec:	4666      	mov	r6, ip
    4aee:	e003      	b.n	4af8 <strcmp+0x70>
    4af0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    4af4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    4af8:	fa82 f54c 	uadd8	r5, r2, ip
    4afc:	ea82 0406 	eor.w	r4, r2, r6
    4b00:	faa4 f48c 	sel	r4, r4, ip
    4b04:	bb6c      	cbnz	r4, 4b62 <strcmp+0xda>
    4b06:	fa83 f54c 	uadd8	r5, r3, ip
    4b0a:	ea83 0507 	eor.w	r5, r3, r7
    4b0e:	faa5 f58c 	sel	r5, r5, ip
    4b12:	b995      	cbnz	r5, 4b3a <strcmp+0xb2>
    4b14:	e950 2302 	ldrd	r2, r3, [r0, #-8]
    4b18:	e951 6702 	ldrd	r6, r7, [r1, #-8]
    4b1c:	fa82 f54c 	uadd8	r5, r2, ip
    4b20:	ea82 0406 	eor.w	r4, r2, r6
    4b24:	faa4 f48c 	sel	r4, r4, ip
    4b28:	fa83 f54c 	uadd8	r5, r3, ip
    4b2c:	ea83 0507 	eor.w	r5, r3, r7
    4b30:	faa5 f58c 	sel	r5, r5, ip
    4b34:	4325      	orrs	r5, r4
    4b36:	d0db      	beq.n	4af0 <strcmp+0x68>
    4b38:	b99c      	cbnz	r4, 4b62 <strcmp+0xda>
    4b3a:	ba2d      	rev	r5, r5
    4b3c:	fab5 f485 	clz	r4, r5
    4b40:	f024 0407 	bic.w	r4, r4, #7
    4b44:	fa27 f104 	lsr.w	r1, r7, r4
    4b48:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    4b4c:	fa23 f304 	lsr.w	r3, r3, r4
    4b50:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    4b54:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    4b58:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    4b5c:	eba0 0001 	sub.w	r0, r0, r1
    4b60:	4770      	bx	lr
    4b62:	ba24      	rev	r4, r4
    4b64:	fab4 f484 	clz	r4, r4
    4b68:	f024 0407 	bic.w	r4, r4, #7
    4b6c:	fa26 f104 	lsr.w	r1, r6, r4
    4b70:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    4b74:	fa22 f204 	lsr.w	r2, r2, r4
    4b78:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    4b7c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    4b80:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    4b84:	eba0 0001 	sub.w	r0, r0, r1
    4b88:	4770      	bx	lr
    4b8a:	f014 0f03 	tst.w	r4, #3
    4b8e:	d13c      	bne.n	4c0a <strcmp+0x182>
    4b90:	f010 0403 	ands.w	r4, r0, #3
    4b94:	d128      	bne.n	4be8 <strcmp+0x160>
    4b96:	f850 2b08 	ldr.w	r2, [r0], #8
    4b9a:	f851 3b08 	ldr.w	r3, [r1], #8
    4b9e:	fa82 f54c 	uadd8	r5, r2, ip
    4ba2:	ea82 0503 	eor.w	r5, r2, r3
    4ba6:	faa5 f58c 	sel	r5, r5, ip
    4baa:	b95d      	cbnz	r5, 4bc4 <strcmp+0x13c>
    4bac:	f850 2c04 	ldr.w	r2, [r0, #-4]
    4bb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
    4bb4:	fa82 f54c 	uadd8	r5, r2, ip
    4bb8:	ea82 0503 	eor.w	r5, r2, r3
    4bbc:	faa5 f58c 	sel	r5, r5, ip
    4bc0:	2d00      	cmp	r5, #0
    4bc2:	d0e8      	beq.n	4b96 <strcmp+0x10e>
    4bc4:	ba2d      	rev	r5, r5
    4bc6:	fab5 f485 	clz	r4, r5
    4bca:	f024 0407 	bic.w	r4, r4, #7
    4bce:	fa23 f104 	lsr.w	r1, r3, r4
    4bd2:	fa22 f204 	lsr.w	r2, r2, r4
    4bd6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    4bda:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    4bde:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    4be2:	eba0 0001 	sub.w	r0, r0, r1
    4be6:	4770      	bx	lr
    4be8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
    4bec:	f020 0003 	bic.w	r0, r0, #3
    4bf0:	f850 2b08 	ldr.w	r2, [r0], #8
    4bf4:	f021 0103 	bic.w	r1, r1, #3
    4bf8:	f851 3b08 	ldr.w	r3, [r1], #8
    4bfc:	fa0c f404 	lsl.w	r4, ip, r4
    4c00:	ea62 0204 	orn	r2, r2, r4
    4c04:	ea63 0304 	orn	r3, r3, r4
    4c08:	e7c9      	b.n	4b9e <strcmp+0x116>
    4c0a:	f010 0403 	ands.w	r4, r0, #3
    4c0e:	d01a      	beq.n	4c46 <strcmp+0x1be>
    4c10:	eba1 0104 	sub.w	r1, r1, r4
    4c14:	f020 0003 	bic.w	r0, r0, #3
    4c18:	07e4      	lsls	r4, r4, #31
    4c1a:	f850 2b04 	ldr.w	r2, [r0], #4
    4c1e:	d006      	beq.n	4c2e <strcmp+0x1a6>
    4c20:	d20f      	bcs.n	4c42 <strcmp+0x1ba>
    4c22:	788b      	ldrb	r3, [r1, #2]
    4c24:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
    4c28:	1ae4      	subs	r4, r4, r3
    4c2a:	d106      	bne.n	4c3a <strcmp+0x1b2>
    4c2c:	b12b      	cbz	r3, 4c3a <strcmp+0x1b2>
    4c2e:	78cb      	ldrb	r3, [r1, #3]
    4c30:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
    4c34:	1ae4      	subs	r4, r4, r3
    4c36:	d100      	bne.n	4c3a <strcmp+0x1b2>
    4c38:	b91b      	cbnz	r3, 4c42 <strcmp+0x1ba>
    4c3a:	4620      	mov	r0, r4
    4c3c:	f85d 4b10 	ldr.w	r4, [sp], #16
    4c40:	4770      	bx	lr
    4c42:	f101 0104 	add.w	r1, r1, #4
    4c46:	f850 2b04 	ldr.w	r2, [r0], #4
    4c4a:	07cc      	lsls	r4, r1, #31
    4c4c:	f021 0103 	bic.w	r1, r1, #3
    4c50:	f851 3b04 	ldr.w	r3, [r1], #4
    4c54:	d848      	bhi.n	4ce8 <strcmp+0x260>
    4c56:	d224      	bcs.n	4ca2 <strcmp+0x21a>
    4c58:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
    4c5c:	fa82 f54c 	uadd8	r5, r2, ip
    4c60:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
    4c64:	faa5 f58c 	sel	r5, r5, ip
    4c68:	d10a      	bne.n	4c80 <strcmp+0x1f8>
    4c6a:	b965      	cbnz	r5, 4c86 <strcmp+0x1fe>
    4c6c:	f851 3b04 	ldr.w	r3, [r1], #4
    4c70:	ea84 0402 	eor.w	r4, r4, r2
    4c74:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
    4c78:	d10e      	bne.n	4c98 <strcmp+0x210>
    4c7a:	f850 2b04 	ldr.w	r2, [r0], #4
    4c7e:	e7eb      	b.n	4c58 <strcmp+0x1d0>
    4c80:	ea4f 2313 	mov.w	r3, r3, lsr #8
    4c84:	e055      	b.n	4d32 <strcmp+0x2aa>
    4c86:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
    4c8a:	d14d      	bne.n	4d28 <strcmp+0x2a0>
    4c8c:	7808      	ldrb	r0, [r1, #0]
    4c8e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    4c92:	f1c0 0000 	rsb	r0, r0, #0
    4c96:	4770      	bx	lr
    4c98:	ea4f 6212 	mov.w	r2, r2, lsr #24
    4c9c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    4ca0:	e047      	b.n	4d32 <strcmp+0x2aa>
    4ca2:	ea02 441c 	and.w	r4, r2, ip, lsr #16
    4ca6:	fa82 f54c 	uadd8	r5, r2, ip
    4caa:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
    4cae:	faa5 f58c 	sel	r5, r5, ip
    4cb2:	d10a      	bne.n	4cca <strcmp+0x242>
    4cb4:	b965      	cbnz	r5, 4cd0 <strcmp+0x248>
    4cb6:	f851 3b04 	ldr.w	r3, [r1], #4
    4cba:	ea84 0402 	eor.w	r4, r4, r2
    4cbe:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
    4cc2:	d10c      	bne.n	4cde <strcmp+0x256>
    4cc4:	f850 2b04 	ldr.w	r2, [r0], #4
    4cc8:	e7eb      	b.n	4ca2 <strcmp+0x21a>
    4cca:	ea4f 4313 	mov.w	r3, r3, lsr #16
    4cce:	e030      	b.n	4d32 <strcmp+0x2aa>
    4cd0:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
    4cd4:	d128      	bne.n	4d28 <strcmp+0x2a0>
    4cd6:	880b      	ldrh	r3, [r1, #0]
    4cd8:	ea4f 4212 	mov.w	r2, r2, lsr #16
    4cdc:	e029      	b.n	4d32 <strcmp+0x2aa>
    4cde:	ea4f 4212 	mov.w	r2, r2, lsr #16
    4ce2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
    4ce6:	e024      	b.n	4d32 <strcmp+0x2aa>
    4ce8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
    4cec:	fa82 f54c 	uadd8	r5, r2, ip
    4cf0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
    4cf4:	faa5 f58c 	sel	r5, r5, ip
    4cf8:	d10a      	bne.n	4d10 <strcmp+0x288>
    4cfa:	b965      	cbnz	r5, 4d16 <strcmp+0x28e>
    4cfc:	f851 3b04 	ldr.w	r3, [r1], #4
    4d00:	ea84 0402 	eor.w	r4, r4, r2
    4d04:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
    4d08:	d109      	bne.n	4d1e <strcmp+0x296>
    4d0a:	f850 2b04 	ldr.w	r2, [r0], #4
    4d0e:	e7eb      	b.n	4ce8 <strcmp+0x260>
    4d10:	ea4f 6313 	mov.w	r3, r3, lsr #24
    4d14:	e00d      	b.n	4d32 <strcmp+0x2aa>
    4d16:	f015 0fff 	tst.w	r5, #255	; 0xff
    4d1a:	d105      	bne.n	4d28 <strcmp+0x2a0>
    4d1c:	680b      	ldr	r3, [r1, #0]
    4d1e:	ea4f 2212 	mov.w	r2, r2, lsr #8
    4d22:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    4d26:	e004      	b.n	4d32 <strcmp+0x2aa>
    4d28:	f04f 0000 	mov.w	r0, #0
    4d2c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    4d30:	4770      	bx	lr
    4d32:	ba12      	rev	r2, r2
    4d34:	ba1b      	rev	r3, r3
    4d36:	fa82 f44c 	uadd8	r4, r2, ip
    4d3a:	ea82 0403 	eor.w	r4, r2, r3
    4d3e:	faa4 f58c 	sel	r5, r4, ip
    4d42:	fab5 f485 	clz	r4, r5
    4d46:	fa02 f204 	lsl.w	r2, r2, r4
    4d4a:	fa03 f304 	lsl.w	r3, r3, r4
    4d4e:	ea4f 6012 	mov.w	r0, r2, lsr #24
    4d52:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    4d56:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
    4d5a:	4770      	bx	lr

00004d5c <strcpy>:
    4d5c:	ea80 0201 	eor.w	r2, r0, r1
    4d60:	4684      	mov	ip, r0
    4d62:	f012 0f03 	tst.w	r2, #3
    4d66:	d14f      	bne.n	4e08 <strcpy+0xac>
    4d68:	f011 0f03 	tst.w	r1, #3
    4d6c:	d132      	bne.n	4dd4 <strcpy+0x78>
    4d6e:	f84d 4d04 	str.w	r4, [sp, #-4]!
    4d72:	f011 0f04 	tst.w	r1, #4
    4d76:	f851 3b04 	ldr.w	r3, [r1], #4
    4d7a:	d00b      	beq.n	4d94 <strcpy+0x38>
    4d7c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    4d80:	439a      	bics	r2, r3
    4d82:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    4d86:	bf04      	itt	eq
    4d88:	f84c 3b04 	streq.w	r3, [ip], #4
    4d8c:	f851 3b04 	ldreq.w	r3, [r1], #4
    4d90:	d116      	bne.n	4dc0 <strcpy+0x64>
    4d92:	bf00      	nop
    4d94:	f851 4b04 	ldr.w	r4, [r1], #4
    4d98:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    4d9c:	439a      	bics	r2, r3
    4d9e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    4da2:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    4da6:	d10b      	bne.n	4dc0 <strcpy+0x64>
    4da8:	f84c 3b04 	str.w	r3, [ip], #4
    4dac:	43a2      	bics	r2, r4
    4dae:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    4db2:	bf04      	itt	eq
    4db4:	f851 3b04 	ldreq.w	r3, [r1], #4
    4db8:	f84c 4b04 	streq.w	r4, [ip], #4
    4dbc:	d0ea      	beq.n	4d94 <strcpy+0x38>
    4dbe:	4623      	mov	r3, r4
    4dc0:	f80c 3b01 	strb.w	r3, [ip], #1
    4dc4:	f013 0fff 	tst.w	r3, #255	; 0xff
    4dc8:	ea4f 2333 	mov.w	r3, r3, ror #8
    4dcc:	d1f8      	bne.n	4dc0 <strcpy+0x64>
    4dce:	f85d 4b04 	ldr.w	r4, [sp], #4
    4dd2:	4770      	bx	lr
    4dd4:	f011 0f01 	tst.w	r1, #1
    4dd8:	d006      	beq.n	4de8 <strcpy+0x8c>
    4dda:	f811 2b01 	ldrb.w	r2, [r1], #1
    4dde:	f80c 2b01 	strb.w	r2, [ip], #1
    4de2:	2a00      	cmp	r2, #0
    4de4:	bf08      	it	eq
    4de6:	4770      	bxeq	lr
    4de8:	f011 0f02 	tst.w	r1, #2
    4dec:	d0bf      	beq.n	4d6e <strcpy+0x12>
    4dee:	f831 2b02 	ldrh.w	r2, [r1], #2
    4df2:	f012 0fff 	tst.w	r2, #255	; 0xff
    4df6:	bf16      	itet	ne
    4df8:	f82c 2b02 	strhne.w	r2, [ip], #2
    4dfc:	f88c 2000 	strbeq.w	r2, [ip]
    4e00:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
    4e04:	d1b3      	bne.n	4d6e <strcpy+0x12>
    4e06:	4770      	bx	lr
    4e08:	f811 2b01 	ldrb.w	r2, [r1], #1
    4e0c:	f80c 2b01 	strb.w	r2, [ip], #1
    4e10:	2a00      	cmp	r2, #0
    4e12:	d1f9      	bne.n	4e08 <strcpy+0xac>
    4e14:	4770      	bx	lr
    4e16:	bf00      	nop
	...

00004e40 <strlen>:
    4e40:	f890 f000 	pld	[r0]
    4e44:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    4e48:	f020 0107 	bic.w	r1, r0, #7
    4e4c:	f06f 0c00 	mvn.w	ip, #0
    4e50:	f010 0407 	ands.w	r4, r0, #7
    4e54:	f891 f020 	pld	[r1, #32]
    4e58:	f040 8049 	bne.w	4eee <strlen+0xae>
    4e5c:	f04f 0400 	mov.w	r4, #0
    4e60:	f06f 0007 	mvn.w	r0, #7
    4e64:	e9d1 2300 	ldrd	r2, r3, [r1]
    4e68:	f891 f040 	pld	[r1, #64]	; 0x40
    4e6c:	f100 0008 	add.w	r0, r0, #8
    4e70:	fa82 f24c 	uadd8	r2, r2, ip
    4e74:	faa4 f28c 	sel	r2, r4, ip
    4e78:	fa83 f34c 	uadd8	r3, r3, ip
    4e7c:	faa2 f38c 	sel	r3, r2, ip
    4e80:	bb4b      	cbnz	r3, 4ed6 <strlen+0x96>
    4e82:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    4e86:	fa82 f24c 	uadd8	r2, r2, ip
    4e8a:	f100 0008 	add.w	r0, r0, #8
    4e8e:	faa4 f28c 	sel	r2, r4, ip
    4e92:	fa83 f34c 	uadd8	r3, r3, ip
    4e96:	faa2 f38c 	sel	r3, r2, ip
    4e9a:	b9e3      	cbnz	r3, 4ed6 <strlen+0x96>
    4e9c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    4ea0:	fa82 f24c 	uadd8	r2, r2, ip
    4ea4:	f100 0008 	add.w	r0, r0, #8
    4ea8:	faa4 f28c 	sel	r2, r4, ip
    4eac:	fa83 f34c 	uadd8	r3, r3, ip
    4eb0:	faa2 f38c 	sel	r3, r2, ip
    4eb4:	b97b      	cbnz	r3, 4ed6 <strlen+0x96>
    4eb6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    4eba:	f101 0120 	add.w	r1, r1, #32
    4ebe:	fa82 f24c 	uadd8	r2, r2, ip
    4ec2:	f100 0008 	add.w	r0, r0, #8
    4ec6:	faa4 f28c 	sel	r2, r4, ip
    4eca:	fa83 f34c 	uadd8	r3, r3, ip
    4ece:	faa2 f38c 	sel	r3, r2, ip
    4ed2:	2b00      	cmp	r3, #0
    4ed4:	d0c6      	beq.n	4e64 <strlen+0x24>
    4ed6:	2a00      	cmp	r2, #0
    4ed8:	bf04      	itt	eq
    4eda:	3004      	addeq	r0, #4
    4edc:	461a      	moveq	r2, r3
    4ede:	ba12      	rev	r2, r2
    4ee0:	fab2 f282 	clz	r2, r2
    4ee4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    4ee8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    4eec:	4770      	bx	lr
    4eee:	e9d1 2300 	ldrd	r2, r3, [r1]
    4ef2:	f004 0503 	and.w	r5, r4, #3
    4ef6:	f1c4 0000 	rsb	r0, r4, #0
    4efa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    4efe:	f014 0f04 	tst.w	r4, #4
    4f02:	f891 f040 	pld	[r1, #64]	; 0x40
    4f06:	fa0c f505 	lsl.w	r5, ip, r5
    4f0a:	ea62 0205 	orn	r2, r2, r5
    4f0e:	bf1c      	itt	ne
    4f10:	ea63 0305 	ornne	r3, r3, r5
    4f14:	4662      	movne	r2, ip
    4f16:	f04f 0400 	mov.w	r4, #0
    4f1a:	e7a9      	b.n	4e70 <strlen+0x30>

00004f1c <__register_exitproc>:
    4f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4f20:	f8df a07c 	ldr.w	sl, [pc, #124]	; 4fa0 <__register_exitproc+0x84>
    4f24:	4606      	mov	r6, r0
    4f26:	f8da 0000 	ldr.w	r0, [sl]
    4f2a:	4698      	mov	r8, r3
    4f2c:	460f      	mov	r7, r1
    4f2e:	4691      	mov	r9, r2
    4f30:	f7ff fd9e 	bl	4a70 <__retarget_lock_acquire_recursive>
    4f34:	4b18      	ldr	r3, [pc, #96]	; (4f98 <__register_exitproc+0x7c>)
    4f36:	681c      	ldr	r4, [r3, #0]
    4f38:	b324      	cbz	r4, 4f84 <__register_exitproc+0x68>
    4f3a:	6865      	ldr	r5, [r4, #4]
    4f3c:	2d1f      	cmp	r5, #31
    4f3e:	dc24      	bgt.n	4f8a <__register_exitproc+0x6e>
    4f40:	b95e      	cbnz	r6, 4f5a <__register_exitproc+0x3e>
    4f42:	1c6b      	adds	r3, r5, #1
    4f44:	3502      	adds	r5, #2
    4f46:	f8da 0000 	ldr.w	r0, [sl]
    4f4a:	6063      	str	r3, [r4, #4]
    4f4c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
    4f50:	f7ff fd90 	bl	4a74 <__retarget_lock_release_recursive>
    4f54:	2000      	movs	r0, #0
    4f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4f5a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    4f5e:	2301      	movs	r3, #1
    4f60:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    4f64:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
    4f68:	40ab      	lsls	r3, r5
    4f6a:	431a      	orrs	r2, r3
    4f6c:	2e02      	cmp	r6, #2
    4f6e:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
    4f72:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    4f76:	d1e4      	bne.n	4f42 <__register_exitproc+0x26>
    4f78:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    4f7c:	431a      	orrs	r2, r3
    4f7e:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    4f82:	e7de      	b.n	4f42 <__register_exitproc+0x26>
    4f84:	4c05      	ldr	r4, [pc, #20]	; (4f9c <__register_exitproc+0x80>)
    4f86:	601c      	str	r4, [r3, #0]
    4f88:	e7d7      	b.n	4f3a <__register_exitproc+0x1e>
    4f8a:	f8da 0000 	ldr.w	r0, [sl]
    4f8e:	f7ff fd71 	bl	4a74 <__retarget_lock_release_recursive>
    4f92:	f04f 30ff 	mov.w	r0, #4294967295
    4f96:	e7de      	b.n	4f56 <__register_exitproc+0x3a>
    4f98:	20001d48 	.word	0x20001d48
    4f9c:	20001d4c 	.word	0x20001d4c
    4fa0:	2000107c 	.word	0x2000107c

00004fa4 <_malloc_trim_r>:
    4fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4fa6:	4f24      	ldr	r7, [pc, #144]	; (5038 <_malloc_trim_r+0x94>)
    4fa8:	460c      	mov	r4, r1
    4faa:	4606      	mov	r6, r0
    4fac:	f7fe ff90 	bl	3ed0 <__malloc_lock>
    4fb0:	68bb      	ldr	r3, [r7, #8]
    4fb2:	685d      	ldr	r5, [r3, #4]
    4fb4:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
    4fb8:	310f      	adds	r1, #15
    4fba:	f025 0503 	bic.w	r5, r5, #3
    4fbe:	194b      	adds	r3, r1, r5
    4fc0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    4fc4:	f023 030f 	bic.w	r3, r3, #15
    4fc8:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
    4fcc:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    4fd0:	db07      	blt.n	4fe2 <_malloc_trim_r+0x3e>
    4fd2:	2100      	movs	r1, #0
    4fd4:	4630      	mov	r0, r6
    4fd6:	f7ff fcf5 	bl	49c4 <_sbrk_r>
    4fda:	68bb      	ldr	r3, [r7, #8]
    4fdc:	442b      	add	r3, r5
    4fde:	4298      	cmp	r0, r3
    4fe0:	d004      	beq.n	4fec <_malloc_trim_r+0x48>
    4fe2:	4630      	mov	r0, r6
    4fe4:	f7fe ff7a 	bl	3edc <__malloc_unlock>
    4fe8:	2000      	movs	r0, #0
    4fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4fec:	4261      	negs	r1, r4
    4fee:	4630      	mov	r0, r6
    4ff0:	f7ff fce8 	bl	49c4 <_sbrk_r>
    4ff4:	3001      	adds	r0, #1
    4ff6:	d00d      	beq.n	5014 <_malloc_trim_r+0x70>
    4ff8:	4a10      	ldr	r2, [pc, #64]	; (503c <_malloc_trim_r+0x98>)
    4ffa:	68bb      	ldr	r3, [r7, #8]
    4ffc:	1b2d      	subs	r5, r5, r4
    4ffe:	f045 0501 	orr.w	r5, r5, #1
    5002:	605d      	str	r5, [r3, #4]
    5004:	6813      	ldr	r3, [r2, #0]
    5006:	4630      	mov	r0, r6
    5008:	1b1b      	subs	r3, r3, r4
    500a:	6013      	str	r3, [r2, #0]
    500c:	f7fe ff66 	bl	3edc <__malloc_unlock>
    5010:	2001      	movs	r0, #1
    5012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5014:	2100      	movs	r1, #0
    5016:	4630      	mov	r0, r6
    5018:	f7ff fcd4 	bl	49c4 <_sbrk_r>
    501c:	68ba      	ldr	r2, [r7, #8]
    501e:	1a83      	subs	r3, r0, r2
    5020:	2b0f      	cmp	r3, #15
    5022:	ddde      	ble.n	4fe2 <_malloc_trim_r+0x3e>
    5024:	f043 0301 	orr.w	r3, r3, #1
    5028:	6053      	str	r3, [r2, #4]
    502a:	4b05      	ldr	r3, [pc, #20]	; (5040 <_malloc_trim_r+0x9c>)
    502c:	4903      	ldr	r1, [pc, #12]	; (503c <_malloc_trim_r+0x98>)
    502e:	681b      	ldr	r3, [r3, #0]
    5030:	1ac0      	subs	r0, r0, r3
    5032:	6008      	str	r0, [r1, #0]
    5034:	e7d5      	b.n	4fe2 <_malloc_trim_r+0x3e>
    5036:	bf00      	nop
    5038:	200011f4 	.word	0x200011f4
    503c:	20001ee8 	.word	0x20001ee8
    5040:	200015fc 	.word	0x200015fc

00005044 <_free_r>:
    5044:	2900      	cmp	r1, #0
    5046:	d061      	beq.n	510c <_free_r+0xc8>
    5048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    504a:	460c      	mov	r4, r1
    504c:	4606      	mov	r6, r0
    504e:	f7fe ff3f 	bl	3ed0 <__malloc_lock>
    5052:	f854 2c04 	ldr.w	r2, [r4, #-4]
    5056:	4f7b      	ldr	r7, [pc, #492]	; (5244 <_free_r+0x200>)
    5058:	f1a4 0508 	sub.w	r5, r4, #8
    505c:	f022 0101 	bic.w	r1, r2, #1
    5060:	eb05 0c01 	add.w	ip, r5, r1
    5064:	68b8      	ldr	r0, [r7, #8]
    5066:	f8dc 3004 	ldr.w	r3, [ip, #4]
    506a:	4560      	cmp	r0, ip
    506c:	f023 0303 	bic.w	r3, r3, #3
    5070:	f000 808b 	beq.w	518a <_free_r+0x146>
    5074:	07d2      	lsls	r2, r2, #31
    5076:	f8cc 3004 	str.w	r3, [ip, #4]
    507a:	d432      	bmi.n	50e2 <_free_r+0x9e>
    507c:	f854 2c08 	ldr.w	r2, [r4, #-8]
    5080:	1aad      	subs	r5, r5, r2
    5082:	4411      	add	r1, r2
    5084:	68aa      	ldr	r2, [r5, #8]
    5086:	f107 0008 	add.w	r0, r7, #8
    508a:	4282      	cmp	r2, r0
    508c:	d06a      	beq.n	5164 <_free_r+0x120>
    508e:	eb0c 0403 	add.w	r4, ip, r3
    5092:	f8d4 e004 	ldr.w	lr, [r4, #4]
    5096:	68ec      	ldr	r4, [r5, #12]
    5098:	60d4      	str	r4, [r2, #12]
    509a:	f01e 0f01 	tst.w	lr, #1
    509e:	60a2      	str	r2, [r4, #8]
    50a0:	f000 8097 	beq.w	51d2 <_free_r+0x18e>
    50a4:	f041 0301 	orr.w	r3, r1, #1
    50a8:	606b      	str	r3, [r5, #4]
    50aa:	f8cc 1000 	str.w	r1, [ip]
    50ae:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    50b2:	d235      	bcs.n	5120 <_free_r+0xdc>
    50b4:	6878      	ldr	r0, [r7, #4]
    50b6:	08cb      	lsrs	r3, r1, #3
    50b8:	2201      	movs	r2, #1
    50ba:	0949      	lsrs	r1, r1, #5
    50bc:	3301      	adds	r3, #1
    50be:	408a      	lsls	r2, r1
    50c0:	4302      	orrs	r2, r0
    50c2:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    50c6:	607a      	str	r2, [r7, #4]
    50c8:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    50cc:	3a08      	subs	r2, #8
    50ce:	e9c5 1202 	strd	r1, r2, [r5, #8]
    50d2:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    50d6:	60cd      	str	r5, [r1, #12]
    50d8:	4630      	mov	r0, r6
    50da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    50de:	f7fe befd 	b.w	3edc <__malloc_unlock>
    50e2:	eb0c 0203 	add.w	r2, ip, r3
    50e6:	6852      	ldr	r2, [r2, #4]
    50e8:	07d0      	lsls	r0, r2, #31
    50ea:	d410      	bmi.n	510e <_free_r+0xca>
    50ec:	4419      	add	r1, r3
    50ee:	f107 0008 	add.w	r0, r7, #8
    50f2:	f8dc 3008 	ldr.w	r3, [ip, #8]
    50f6:	4283      	cmp	r3, r0
    50f8:	d073      	beq.n	51e2 <_free_r+0x19e>
    50fa:	f8dc 200c 	ldr.w	r2, [ip, #12]
    50fe:	60da      	str	r2, [r3, #12]
    5100:	6093      	str	r3, [r2, #8]
    5102:	f041 0301 	orr.w	r3, r1, #1
    5106:	606b      	str	r3, [r5, #4]
    5108:	5069      	str	r1, [r5, r1]
    510a:	e7d0      	b.n	50ae <_free_r+0x6a>
    510c:	4770      	bx	lr
    510e:	f041 0301 	orr.w	r3, r1, #1
    5112:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    5116:	f844 3c04 	str.w	r3, [r4, #-4]
    511a:	f8cc 1000 	str.w	r1, [ip]
    511e:	d3c9      	bcc.n	50b4 <_free_r+0x70>
    5120:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
    5124:	ea4f 2351 	mov.w	r3, r1, lsr #9
    5128:	d248      	bcs.n	51bc <_free_r+0x178>
    512a:	098b      	lsrs	r3, r1, #6
    512c:	f103 0039 	add.w	r0, r3, #57	; 0x39
    5130:	f103 0238 	add.w	r2, r3, #56	; 0x38
    5134:	00c3      	lsls	r3, r0, #3
    5136:	18f8      	adds	r0, r7, r3
    5138:	58fb      	ldr	r3, [r7, r3]
    513a:	3808      	subs	r0, #8
    513c:	4298      	cmp	r0, r3
    513e:	d059      	beq.n	51f4 <_free_r+0x1b0>
    5140:	685a      	ldr	r2, [r3, #4]
    5142:	f022 0203 	bic.w	r2, r2, #3
    5146:	428a      	cmp	r2, r1
    5148:	d902      	bls.n	5150 <_free_r+0x10c>
    514a:	689b      	ldr	r3, [r3, #8]
    514c:	4298      	cmp	r0, r3
    514e:	d1f7      	bne.n	5140 <_free_r+0xfc>
    5150:	68d8      	ldr	r0, [r3, #12]
    5152:	e9c5 3002 	strd	r3, r0, [r5, #8]
    5156:	6085      	str	r5, [r0, #8]
    5158:	60dd      	str	r5, [r3, #12]
    515a:	4630      	mov	r0, r6
    515c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    5160:	f7fe bebc 	b.w	3edc <__malloc_unlock>
    5164:	eb0c 0203 	add.w	r2, ip, r3
    5168:	6852      	ldr	r2, [r2, #4]
    516a:	07d2      	lsls	r2, r2, #31
    516c:	d463      	bmi.n	5236 <_free_r+0x1f2>
    516e:	440b      	add	r3, r1
    5170:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
    5174:	60ca      	str	r2, [r1, #12]
    5176:	6091      	str	r1, [r2, #8]
    5178:	f043 0201 	orr.w	r2, r3, #1
    517c:	606a      	str	r2, [r5, #4]
    517e:	4630      	mov	r0, r6
    5180:	50eb      	str	r3, [r5, r3]
    5182:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    5186:	f7fe bea9 	b.w	3edc <__malloc_unlock>
    518a:	440b      	add	r3, r1
    518c:	07d1      	lsls	r1, r2, #31
    518e:	d407      	bmi.n	51a0 <_free_r+0x15c>
    5190:	f854 2c08 	ldr.w	r2, [r4, #-8]
    5194:	1aad      	subs	r5, r5, r2
    5196:	4413      	add	r3, r2
    5198:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
    519c:	60ca      	str	r2, [r1, #12]
    519e:	6091      	str	r1, [r2, #8]
    51a0:	f043 0201 	orr.w	r2, r3, #1
    51a4:	606a      	str	r2, [r5, #4]
    51a6:	4a28      	ldr	r2, [pc, #160]	; (5248 <_free_r+0x204>)
    51a8:	60bd      	str	r5, [r7, #8]
    51aa:	6812      	ldr	r2, [r2, #0]
    51ac:	429a      	cmp	r2, r3
    51ae:	d893      	bhi.n	50d8 <_free_r+0x94>
    51b0:	4b26      	ldr	r3, [pc, #152]	; (524c <_free_r+0x208>)
    51b2:	4630      	mov	r0, r6
    51b4:	6819      	ldr	r1, [r3, #0]
    51b6:	f7ff fef5 	bl	4fa4 <_malloc_trim_r>
    51ba:	e78d      	b.n	50d8 <_free_r+0x94>
    51bc:	2b14      	cmp	r3, #20
    51be:	d90a      	bls.n	51d6 <_free_r+0x192>
    51c0:	2b54      	cmp	r3, #84	; 0x54
    51c2:	d81f      	bhi.n	5204 <_free_r+0x1c0>
    51c4:	0b0b      	lsrs	r3, r1, #12
    51c6:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    51ca:	f103 026e 	add.w	r2, r3, #110	; 0x6e
    51ce:	00c3      	lsls	r3, r0, #3
    51d0:	e7b1      	b.n	5136 <_free_r+0xf2>
    51d2:	4419      	add	r1, r3
    51d4:	e78d      	b.n	50f2 <_free_r+0xae>
    51d6:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    51da:	f103 025b 	add.w	r2, r3, #91	; 0x5b
    51de:	00c3      	lsls	r3, r0, #3
    51e0:	e7a9      	b.n	5136 <_free_r+0xf2>
    51e2:	f041 0301 	orr.w	r3, r1, #1
    51e6:	e9c7 5504 	strd	r5, r5, [r7, #16]
    51ea:	e9c5 0002 	strd	r0, r0, [r5, #8]
    51ee:	606b      	str	r3, [r5, #4]
    51f0:	5069      	str	r1, [r5, r1]
    51f2:	e771      	b.n	50d8 <_free_r+0x94>
    51f4:	6879      	ldr	r1, [r7, #4]
    51f6:	1092      	asrs	r2, r2, #2
    51f8:	2401      	movs	r4, #1
    51fa:	fa04 f202 	lsl.w	r2, r4, r2
    51fe:	430a      	orrs	r2, r1
    5200:	607a      	str	r2, [r7, #4]
    5202:	e7a6      	b.n	5152 <_free_r+0x10e>
    5204:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    5208:	d806      	bhi.n	5218 <_free_r+0x1d4>
    520a:	0bcb      	lsrs	r3, r1, #15
    520c:	f103 0078 	add.w	r0, r3, #120	; 0x78
    5210:	f103 0277 	add.w	r2, r3, #119	; 0x77
    5214:	00c3      	lsls	r3, r0, #3
    5216:	e78e      	b.n	5136 <_free_r+0xf2>
    5218:	f240 5254 	movw	r2, #1364	; 0x554
    521c:	4293      	cmp	r3, r2
    521e:	d806      	bhi.n	522e <_free_r+0x1ea>
    5220:	0c8b      	lsrs	r3, r1, #18
    5222:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    5226:	f103 027c 	add.w	r2, r3, #124	; 0x7c
    522a:	00c3      	lsls	r3, r0, #3
    522c:	e783      	b.n	5136 <_free_r+0xf2>
    522e:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    5232:	227e      	movs	r2, #126	; 0x7e
    5234:	e77f      	b.n	5136 <_free_r+0xf2>
    5236:	f041 0301 	orr.w	r3, r1, #1
    523a:	606b      	str	r3, [r5, #4]
    523c:	f8cc 1000 	str.w	r1, [ip]
    5240:	e74a      	b.n	50d8 <_free_r+0x94>
    5242:	bf00      	nop
    5244:	200011f4 	.word	0x200011f4
    5248:	20001600 	.word	0x20001600
    524c:	20001f18 	.word	0x20001f18

00005250 <__ascii_mbtowc>:
    5250:	b082      	sub	sp, #8
    5252:	b149      	cbz	r1, 5268 <__ascii_mbtowc+0x18>
    5254:	b15a      	cbz	r2, 526e <__ascii_mbtowc+0x1e>
    5256:	b16b      	cbz	r3, 5274 <__ascii_mbtowc+0x24>
    5258:	7813      	ldrb	r3, [r2, #0]
    525a:	600b      	str	r3, [r1, #0]
    525c:	7812      	ldrb	r2, [r2, #0]
    525e:	1e10      	subs	r0, r2, #0
    5260:	bf18      	it	ne
    5262:	2001      	movne	r0, #1
    5264:	b002      	add	sp, #8
    5266:	4770      	bx	lr
    5268:	a901      	add	r1, sp, #4
    526a:	2a00      	cmp	r2, #0
    526c:	d1f3      	bne.n	5256 <__ascii_mbtowc+0x6>
    526e:	4610      	mov	r0, r2
    5270:	b002      	add	sp, #8
    5272:	4770      	bx	lr
    5274:	f06f 0001 	mvn.w	r0, #1
    5278:	e7f4      	b.n	5264 <__ascii_mbtowc+0x14>
    527a:	bf00      	nop

0000527c <_Balloc>:
    527c:	6c43      	ldr	r3, [r0, #68]	; 0x44
    527e:	b570      	push	{r4, r5, r6, lr}
    5280:	4605      	mov	r5, r0
    5282:	460c      	mov	r4, r1
    5284:	b14b      	cbz	r3, 529a <_Balloc+0x1e>
    5286:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    528a:	b180      	cbz	r0, 52ae <_Balloc+0x32>
    528c:	6802      	ldr	r2, [r0, #0]
    528e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    5292:	2300      	movs	r3, #0
    5294:	e9c0 3303 	strd	r3, r3, [r0, #12]
    5298:	bd70      	pop	{r4, r5, r6, pc}
    529a:	2221      	movs	r2, #33	; 0x21
    529c:	2104      	movs	r1, #4
    529e:	f002 fb33 	bl	7908 <_calloc_r>
    52a2:	4603      	mov	r3, r0
    52a4:	6468      	str	r0, [r5, #68]	; 0x44
    52a6:	2800      	cmp	r0, #0
    52a8:	d1ed      	bne.n	5286 <_Balloc+0xa>
    52aa:	2000      	movs	r0, #0
    52ac:	bd70      	pop	{r4, r5, r6, pc}
    52ae:	2101      	movs	r1, #1
    52b0:	fa01 f604 	lsl.w	r6, r1, r4
    52b4:	1d72      	adds	r2, r6, #5
    52b6:	0092      	lsls	r2, r2, #2
    52b8:	4628      	mov	r0, r5
    52ba:	f002 fb25 	bl	7908 <_calloc_r>
    52be:	2800      	cmp	r0, #0
    52c0:	d0f3      	beq.n	52aa <_Balloc+0x2e>
    52c2:	e9c0 4601 	strd	r4, r6, [r0, #4]
    52c6:	e7e4      	b.n	5292 <_Balloc+0x16>

000052c8 <_Bfree>:
    52c8:	b131      	cbz	r1, 52d8 <_Bfree+0x10>
    52ca:	6c43      	ldr	r3, [r0, #68]	; 0x44
    52cc:	684a      	ldr	r2, [r1, #4]
    52ce:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    52d2:	6008      	str	r0, [r1, #0]
    52d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    52d8:	4770      	bx	lr
    52da:	bf00      	nop

000052dc <__multadd>:
    52dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    52e0:	690e      	ldr	r6, [r1, #16]
    52e2:	4680      	mov	r8, r0
    52e4:	460f      	mov	r7, r1
    52e6:	461d      	mov	r5, r3
    52e8:	f101 0e14 	add.w	lr, r1, #20
    52ec:	2000      	movs	r0, #0
    52ee:	f8de 1000 	ldr.w	r1, [lr]
    52f2:	b28c      	uxth	r4, r1
    52f4:	fb02 5304 	mla	r3, r2, r4, r5
    52f8:	0c09      	lsrs	r1, r1, #16
    52fa:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    52fe:	fb02 cc01 	mla	ip, r2, r1, ip
    5302:	3001      	adds	r0, #1
    5304:	b29c      	uxth	r4, r3
    5306:	eb04 440c 	add.w	r4, r4, ip, lsl #16
    530a:	4286      	cmp	r6, r0
    530c:	f84e 4b04 	str.w	r4, [lr], #4
    5310:	ea4f 451c 	mov.w	r5, ip, lsr #16
    5314:	dceb      	bgt.n	52ee <__multadd+0x12>
    5316:	b13d      	cbz	r5, 5328 <__multadd+0x4c>
    5318:	68bb      	ldr	r3, [r7, #8]
    531a:	42b3      	cmp	r3, r6
    531c:	dd07      	ble.n	532e <__multadd+0x52>
    531e:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    5322:	3601      	adds	r6, #1
    5324:	615d      	str	r5, [r3, #20]
    5326:	613e      	str	r6, [r7, #16]
    5328:	4638      	mov	r0, r7
    532a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    532e:	6879      	ldr	r1, [r7, #4]
    5330:	4640      	mov	r0, r8
    5332:	3101      	adds	r1, #1
    5334:	f7ff ffa2 	bl	527c <_Balloc>
    5338:	4604      	mov	r4, r0
    533a:	b1b0      	cbz	r0, 536a <__multadd+0x8e>
    533c:	693a      	ldr	r2, [r7, #16]
    533e:	3202      	adds	r2, #2
    5340:	f107 010c 	add.w	r1, r7, #12
    5344:	0092      	lsls	r2, r2, #2
    5346:	300c      	adds	r0, #12
    5348:	f7fc fd60 	bl	1e0c <memcpy>
    534c:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    5350:	687a      	ldr	r2, [r7, #4]
    5352:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    5356:	6039      	str	r1, [r7, #0]
    5358:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    535c:	4627      	mov	r7, r4
    535e:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    5362:	3601      	adds	r6, #1
    5364:	615d      	str	r5, [r3, #20]
    5366:	613e      	str	r6, [r7, #16]
    5368:	e7de      	b.n	5328 <__multadd+0x4c>
    536a:	4b03      	ldr	r3, [pc, #12]	; (5378 <__multadd+0x9c>)
    536c:	4803      	ldr	r0, [pc, #12]	; (537c <__multadd+0xa0>)
    536e:	4622      	mov	r2, r4
    5370:	21ba      	movs	r1, #186	; 0xba
    5372:	f002 faa9 	bl	78c8 <__assert_func>
    5376:	bf00      	nop
    5378:	2000044c 	.word	0x2000044c
    537c:	20000460 	.word	0x20000460

00005380 <__hi0bits>:
    5380:	0c03      	lsrs	r3, r0, #16
    5382:	041b      	lsls	r3, r3, #16
    5384:	b9d3      	cbnz	r3, 53bc <__hi0bits+0x3c>
    5386:	0400      	lsls	r0, r0, #16
    5388:	2310      	movs	r3, #16
    538a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
    538e:	bf04      	itt	eq
    5390:	0200      	lsleq	r0, r0, #8
    5392:	3308      	addeq	r3, #8
    5394:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
    5398:	bf04      	itt	eq
    539a:	0100      	lsleq	r0, r0, #4
    539c:	3304      	addeq	r3, #4
    539e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
    53a2:	bf04      	itt	eq
    53a4:	0080      	lsleq	r0, r0, #2
    53a6:	3302      	addeq	r3, #2
    53a8:	2800      	cmp	r0, #0
    53aa:	db05      	blt.n	53b8 <__hi0bits+0x38>
    53ac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
    53b0:	f103 0301 	add.w	r3, r3, #1
    53b4:	bf08      	it	eq
    53b6:	2320      	moveq	r3, #32
    53b8:	4618      	mov	r0, r3
    53ba:	4770      	bx	lr
    53bc:	2300      	movs	r3, #0
    53be:	e7e4      	b.n	538a <__hi0bits+0xa>

000053c0 <__lo0bits>:
    53c0:	6803      	ldr	r3, [r0, #0]
    53c2:	f013 0207 	ands.w	r2, r3, #7
    53c6:	d008      	beq.n	53da <__lo0bits+0x1a>
    53c8:	07d9      	lsls	r1, r3, #31
    53ca:	d41f      	bmi.n	540c <__lo0bits+0x4c>
    53cc:	079a      	lsls	r2, r3, #30
    53ce:	d522      	bpl.n	5416 <__lo0bits+0x56>
    53d0:	085b      	lsrs	r3, r3, #1
    53d2:	6003      	str	r3, [r0, #0]
    53d4:	2201      	movs	r2, #1
    53d6:	4610      	mov	r0, r2
    53d8:	4770      	bx	lr
    53da:	b299      	uxth	r1, r3
    53dc:	b909      	cbnz	r1, 53e2 <__lo0bits+0x22>
    53de:	0c1b      	lsrs	r3, r3, #16
    53e0:	2210      	movs	r2, #16
    53e2:	b2d9      	uxtb	r1, r3
    53e4:	b909      	cbnz	r1, 53ea <__lo0bits+0x2a>
    53e6:	3208      	adds	r2, #8
    53e8:	0a1b      	lsrs	r3, r3, #8
    53ea:	0719      	lsls	r1, r3, #28
    53ec:	bf04      	itt	eq
    53ee:	091b      	lsreq	r3, r3, #4
    53f0:	3204      	addeq	r2, #4
    53f2:	0799      	lsls	r1, r3, #30
    53f4:	bf04      	itt	eq
    53f6:	089b      	lsreq	r3, r3, #2
    53f8:	3202      	addeq	r2, #2
    53fa:	07d9      	lsls	r1, r3, #31
    53fc:	d403      	bmi.n	5406 <__lo0bits+0x46>
    53fe:	085b      	lsrs	r3, r3, #1
    5400:	f102 0201 	add.w	r2, r2, #1
    5404:	d005      	beq.n	5412 <__lo0bits+0x52>
    5406:	6003      	str	r3, [r0, #0]
    5408:	4610      	mov	r0, r2
    540a:	4770      	bx	lr
    540c:	2200      	movs	r2, #0
    540e:	4610      	mov	r0, r2
    5410:	4770      	bx	lr
    5412:	2220      	movs	r2, #32
    5414:	e7df      	b.n	53d6 <__lo0bits+0x16>
    5416:	089b      	lsrs	r3, r3, #2
    5418:	2202      	movs	r2, #2
    541a:	6003      	str	r3, [r0, #0]
    541c:	4610      	mov	r0, r2
    541e:	4770      	bx	lr

00005420 <__i2b>:
    5420:	b538      	push	{r3, r4, r5, lr}
    5422:	6c43      	ldr	r3, [r0, #68]	; 0x44
    5424:	4604      	mov	r4, r0
    5426:	460d      	mov	r5, r1
    5428:	b14b      	cbz	r3, 543e <__i2b+0x1e>
    542a:	6858      	ldr	r0, [r3, #4]
    542c:	b1b0      	cbz	r0, 545c <__i2b+0x3c>
    542e:	6802      	ldr	r2, [r0, #0]
    5430:	605a      	str	r2, [r3, #4]
    5432:	2200      	movs	r2, #0
    5434:	2301      	movs	r3, #1
    5436:	e9c0 3504 	strd	r3, r5, [r0, #16]
    543a:	60c2      	str	r2, [r0, #12]
    543c:	bd38      	pop	{r3, r4, r5, pc}
    543e:	2221      	movs	r2, #33	; 0x21
    5440:	2104      	movs	r1, #4
    5442:	f002 fa61 	bl	7908 <_calloc_r>
    5446:	4603      	mov	r3, r0
    5448:	6460      	str	r0, [r4, #68]	; 0x44
    544a:	2800      	cmp	r0, #0
    544c:	d1ed      	bne.n	542a <__i2b+0xa>
    544e:	4b09      	ldr	r3, [pc, #36]	; (5474 <__i2b+0x54>)
    5450:	4809      	ldr	r0, [pc, #36]	; (5478 <__i2b+0x58>)
    5452:	2200      	movs	r2, #0
    5454:	f240 1145 	movw	r1, #325	; 0x145
    5458:	f002 fa36 	bl	78c8 <__assert_func>
    545c:	221c      	movs	r2, #28
    545e:	2101      	movs	r1, #1
    5460:	4620      	mov	r0, r4
    5462:	f002 fa51 	bl	7908 <_calloc_r>
    5466:	2800      	cmp	r0, #0
    5468:	d0f1      	beq.n	544e <__i2b+0x2e>
    546a:	2201      	movs	r2, #1
    546c:	2302      	movs	r3, #2
    546e:	e9c0 2301 	strd	r2, r3, [r0, #4]
    5472:	e7de      	b.n	5432 <__i2b+0x12>
    5474:	2000044c 	.word	0x2000044c
    5478:	20000460 	.word	0x20000460

0000547c <__multiply>:
    547c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5480:	690e      	ldr	r6, [r1, #16]
    5482:	6915      	ldr	r5, [r2, #16]
    5484:	42ae      	cmp	r6, r5
    5486:	b085      	sub	sp, #20
    5488:	4688      	mov	r8, r1
    548a:	4614      	mov	r4, r2
    548c:	db05      	blt.n	549a <__multiply+0x1e>
    548e:	462a      	mov	r2, r5
    5490:	4623      	mov	r3, r4
    5492:	4635      	mov	r5, r6
    5494:	460c      	mov	r4, r1
    5496:	4616      	mov	r6, r2
    5498:	4698      	mov	r8, r3
    549a:	68a3      	ldr	r3, [r4, #8]
    549c:	6861      	ldr	r1, [r4, #4]
    549e:	19af      	adds	r7, r5, r6
    54a0:	42bb      	cmp	r3, r7
    54a2:	bfb8      	it	lt
    54a4:	3101      	addlt	r1, #1
    54a6:	f7ff fee9 	bl	527c <_Balloc>
    54aa:	9001      	str	r0, [sp, #4]
    54ac:	2800      	cmp	r0, #0
    54ae:	f000 8087 	beq.w	55c0 <__multiply+0x144>
    54b2:	9b01      	ldr	r3, [sp, #4]
    54b4:	f103 0914 	add.w	r9, r3, #20
    54b8:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
    54bc:	45d1      	cmp	r9, sl
    54be:	d205      	bcs.n	54cc <__multiply+0x50>
    54c0:	464b      	mov	r3, r9
    54c2:	2200      	movs	r2, #0
    54c4:	f843 2b04 	str.w	r2, [r3], #4
    54c8:	459a      	cmp	sl, r3
    54ca:	d8fb      	bhi.n	54c4 <__multiply+0x48>
    54cc:	f108 0814 	add.w	r8, r8, #20
    54d0:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
    54d4:	f104 0314 	add.w	r3, r4, #20
    54d8:	45d8      	cmp	r8, fp
    54da:	461a      	mov	r2, r3
    54dc:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    54e0:	d25f      	bcs.n	55a2 <__multiply+0x126>
    54e2:	1b2b      	subs	r3, r5, r4
    54e4:	3b15      	subs	r3, #21
    54e6:	f023 0303 	bic.w	r3, r3, #3
    54ea:	3304      	adds	r3, #4
    54ec:	3415      	adds	r4, #21
    54ee:	42a5      	cmp	r5, r4
    54f0:	bf38      	it	cc
    54f2:	2304      	movcc	r3, #4
    54f4:	e9cd a702 	strd	sl, r7, [sp, #8]
    54f8:	46ac      	mov	ip, r5
    54fa:	461f      	mov	r7, r3
    54fc:	4692      	mov	sl, r2
    54fe:	e005      	b.n	550c <__multiply+0x90>
    5500:	0c09      	lsrs	r1, r1, #16
    5502:	d129      	bne.n	5558 <__multiply+0xdc>
    5504:	45c3      	cmp	fp, r8
    5506:	f109 0904 	add.w	r9, r9, #4
    550a:	d948      	bls.n	559e <__multiply+0x122>
    550c:	f858 1b04 	ldr.w	r1, [r8], #4
    5510:	b28d      	uxth	r5, r1
    5512:	2d00      	cmp	r5, #0
    5514:	d0f4      	beq.n	5500 <__multiply+0x84>
    5516:	4656      	mov	r6, sl
    5518:	464c      	mov	r4, r9
    551a:	2300      	movs	r3, #0
    551c:	f856 1b04 	ldr.w	r1, [r6], #4
    5520:	6822      	ldr	r2, [r4, #0]
    5522:	fa1f fe81 	uxth.w	lr, r1
    5526:	b290      	uxth	r0, r2
    5528:	0c09      	lsrs	r1, r1, #16
    552a:	fb05 000e 	mla	r0, r5, lr, r0
    552e:	0c12      	lsrs	r2, r2, #16
    5530:	4403      	add	r3, r0
    5532:	fb05 2201 	mla	r2, r5, r1, r2
    5536:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    553a:	b29b      	uxth	r3, r3
    553c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    5540:	45b4      	cmp	ip, r6
    5542:	f844 3b04 	str.w	r3, [r4], #4
    5546:	ea4f 4312 	mov.w	r3, r2, lsr #16
    554a:	d8e7      	bhi.n	551c <__multiply+0xa0>
    554c:	f849 3007 	str.w	r3, [r9, r7]
    5550:	f858 1c04 	ldr.w	r1, [r8, #-4]
    5554:	0c09      	lsrs	r1, r1, #16
    5556:	d0d5      	beq.n	5504 <__multiply+0x88>
    5558:	f8d9 3000 	ldr.w	r3, [r9]
    555c:	4650      	mov	r0, sl
    555e:	461a      	mov	r2, r3
    5560:	464c      	mov	r4, r9
    5562:	2600      	movs	r6, #0
    5564:	8805      	ldrh	r5, [r0, #0]
    5566:	0c12      	lsrs	r2, r2, #16
    5568:	fb01 2205 	mla	r2, r1, r5, r2
    556c:	4416      	add	r6, r2
    556e:	b29b      	uxth	r3, r3
    5570:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    5574:	f844 3b04 	str.w	r3, [r4], #4
    5578:	f850 5b04 	ldr.w	r5, [r0], #4
    557c:	6822      	ldr	r2, [r4, #0]
    557e:	0c2d      	lsrs	r5, r5, #16
    5580:	b293      	uxth	r3, r2
    5582:	fb01 3305 	mla	r3, r1, r5, r3
    5586:	eb03 4316 	add.w	r3, r3, r6, lsr #16
    558a:	4584      	cmp	ip, r0
    558c:	ea4f 4613 	mov.w	r6, r3, lsr #16
    5590:	d8e8      	bhi.n	5564 <__multiply+0xe8>
    5592:	45c3      	cmp	fp, r8
    5594:	f849 3007 	str.w	r3, [r9, r7]
    5598:	f109 0904 	add.w	r9, r9, #4
    559c:	d8b6      	bhi.n	550c <__multiply+0x90>
    559e:	e9dd a702 	ldrd	sl, r7, [sp, #8]
    55a2:	2f00      	cmp	r7, #0
    55a4:	dc02      	bgt.n	55ac <__multiply+0x130>
    55a6:	e005      	b.n	55b4 <__multiply+0x138>
    55a8:	3f01      	subs	r7, #1
    55aa:	d003      	beq.n	55b4 <__multiply+0x138>
    55ac:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
    55b0:	2b00      	cmp	r3, #0
    55b2:	d0f9      	beq.n	55a8 <__multiply+0x12c>
    55b4:	9b01      	ldr	r3, [sp, #4]
    55b6:	4618      	mov	r0, r3
    55b8:	611f      	str	r7, [r3, #16]
    55ba:	b005      	add	sp, #20
    55bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    55c0:	4b03      	ldr	r3, [pc, #12]	; (55d0 <__multiply+0x154>)
    55c2:	4804      	ldr	r0, [pc, #16]	; (55d4 <__multiply+0x158>)
    55c4:	9a01      	ldr	r2, [sp, #4]
    55c6:	f44f 71b1 	mov.w	r1, #354	; 0x162
    55ca:	f002 f97d 	bl	78c8 <__assert_func>
    55ce:	bf00      	nop
    55d0:	2000044c 	.word	0x2000044c
    55d4:	20000460 	.word	0x20000460

000055d8 <__pow5mult>:
    55d8:	f012 0303 	ands.w	r3, r2, #3
    55dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    55e0:	4614      	mov	r4, r2
    55e2:	4606      	mov	r6, r0
    55e4:	d132      	bne.n	564c <__pow5mult+0x74>
    55e6:	460d      	mov	r5, r1
    55e8:	10a4      	asrs	r4, r4, #2
    55ea:	d020      	beq.n	562e <__pow5mult+0x56>
    55ec:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
    55f0:	f1b8 0f00 	cmp.w	r8, #0
    55f4:	d033      	beq.n	565e <__pow5mult+0x86>
    55f6:	07e3      	lsls	r3, r4, #31
    55f8:	f04f 0700 	mov.w	r7, #0
    55fc:	d407      	bmi.n	560e <__pow5mult+0x36>
    55fe:	1064      	asrs	r4, r4, #1
    5600:	d015      	beq.n	562e <__pow5mult+0x56>
    5602:	f8d8 0000 	ldr.w	r0, [r8]
    5606:	b1a8      	cbz	r0, 5634 <__pow5mult+0x5c>
    5608:	4680      	mov	r8, r0
    560a:	07e3      	lsls	r3, r4, #31
    560c:	d5f7      	bpl.n	55fe <__pow5mult+0x26>
    560e:	4642      	mov	r2, r8
    5610:	4629      	mov	r1, r5
    5612:	4630      	mov	r0, r6
    5614:	f7ff ff32 	bl	547c <__multiply>
    5618:	b1b5      	cbz	r5, 5648 <__pow5mult+0x70>
    561a:	6869      	ldr	r1, [r5, #4]
    561c:	6c73      	ldr	r3, [r6, #68]	; 0x44
    561e:	1064      	asrs	r4, r4, #1
    5620:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    5624:	602a      	str	r2, [r5, #0]
    5626:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
    562a:	4605      	mov	r5, r0
    562c:	d1e9      	bne.n	5602 <__pow5mult+0x2a>
    562e:	4628      	mov	r0, r5
    5630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5634:	4642      	mov	r2, r8
    5636:	4641      	mov	r1, r8
    5638:	4630      	mov	r0, r6
    563a:	f7ff ff1f 	bl	547c <__multiply>
    563e:	f8c8 0000 	str.w	r0, [r8]
    5642:	6007      	str	r7, [r0, #0]
    5644:	4680      	mov	r8, r0
    5646:	e7e0      	b.n	560a <__pow5mult+0x32>
    5648:	4605      	mov	r5, r0
    564a:	e7d8      	b.n	55fe <__pow5mult+0x26>
    564c:	3b01      	subs	r3, #1
    564e:	4a0f      	ldr	r2, [pc, #60]	; (568c <__pow5mult+0xb4>)
    5650:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    5654:	2300      	movs	r3, #0
    5656:	f7ff fe41 	bl	52dc <__multadd>
    565a:	4605      	mov	r5, r0
    565c:	e7c4      	b.n	55e8 <__pow5mult+0x10>
    565e:	2101      	movs	r1, #1
    5660:	4630      	mov	r0, r6
    5662:	f7ff fe0b 	bl	527c <_Balloc>
    5666:	4680      	mov	r8, r0
    5668:	b140      	cbz	r0, 567c <__pow5mult+0xa4>
    566a:	2301      	movs	r3, #1
    566c:	f240 2271 	movw	r2, #625	; 0x271
    5670:	e9c0 3204 	strd	r3, r2, [r0, #16]
    5674:	2300      	movs	r3, #0
    5676:	6430      	str	r0, [r6, #64]	; 0x40
    5678:	6003      	str	r3, [r0, #0]
    567a:	e7bc      	b.n	55f6 <__pow5mult+0x1e>
    567c:	4b04      	ldr	r3, [pc, #16]	; (5690 <__pow5mult+0xb8>)
    567e:	4805      	ldr	r0, [pc, #20]	; (5694 <__pow5mult+0xbc>)
    5680:	4642      	mov	r2, r8
    5682:	f240 1145 	movw	r1, #325	; 0x145
    5686:	f002 f91f 	bl	78c8 <__assert_func>
    568a:	bf00      	nop
    568c:	20000cb8 	.word	0x20000cb8
    5690:	2000044c 	.word	0x2000044c
    5694:	20000460 	.word	0x20000460

00005698 <__lshift>:
    5698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    569c:	460d      	mov	r5, r1
    569e:	4614      	mov	r4, r2
    56a0:	692f      	ldr	r7, [r5, #16]
    56a2:	68ab      	ldr	r3, [r5, #8]
    56a4:	6849      	ldr	r1, [r1, #4]
    56a6:	eb07 1762 	add.w	r7, r7, r2, asr #5
    56aa:	1c7e      	adds	r6, r7, #1
    56ac:	429e      	cmp	r6, r3
    56ae:	4680      	mov	r8, r0
    56b0:	ea4f 1962 	mov.w	r9, r2, asr #5
    56b4:	dd04      	ble.n	56c0 <__lshift+0x28>
    56b6:	005b      	lsls	r3, r3, #1
    56b8:	429e      	cmp	r6, r3
    56ba:	f101 0101 	add.w	r1, r1, #1
    56be:	dcfa      	bgt.n	56b6 <__lshift+0x1e>
    56c0:	4640      	mov	r0, r8
    56c2:	f7ff fddb 	bl	527c <_Balloc>
    56c6:	4684      	mov	ip, r0
    56c8:	2800      	cmp	r0, #0
    56ca:	d052      	beq.n	5772 <__lshift+0xda>
    56cc:	f1b9 0f00 	cmp.w	r9, #0
    56d0:	f100 0214 	add.w	r2, r0, #20
    56d4:	dd0e      	ble.n	56f4 <__lshift+0x5c>
    56d6:	f109 0105 	add.w	r1, r9, #5
    56da:	ea4f 0e81 	mov.w	lr, r1, lsl #2
    56de:	4613      	mov	r3, r2
    56e0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    56e4:	2000      	movs	r0, #0
    56e6:	f843 0b04 	str.w	r0, [r3], #4
    56ea:	428b      	cmp	r3, r1
    56ec:	d1fb      	bne.n	56e6 <__lshift+0x4e>
    56ee:	f1ae 0314 	sub.w	r3, lr, #20
    56f2:	441a      	add	r2, r3
    56f4:	6929      	ldr	r1, [r5, #16]
    56f6:	f105 0314 	add.w	r3, r5, #20
    56fa:	f014 0e1f 	ands.w	lr, r4, #31
    56fe:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    5702:	d02e      	beq.n	5762 <__lshift+0xca>
    5704:	f1ce 0920 	rsb	r9, lr, #32
    5708:	4610      	mov	r0, r2
    570a:	f04f 0a00 	mov.w	sl, #0
    570e:	681c      	ldr	r4, [r3, #0]
    5710:	fa04 f40e 	lsl.w	r4, r4, lr
    5714:	ea44 040a 	orr.w	r4, r4, sl
    5718:	f840 4b04 	str.w	r4, [r0], #4
    571c:	f853 4b04 	ldr.w	r4, [r3], #4
    5720:	4299      	cmp	r1, r3
    5722:	fa24 fa09 	lsr.w	sl, r4, r9
    5726:	d8f2      	bhi.n	570e <__lshift+0x76>
    5728:	1b4b      	subs	r3, r1, r5
    572a:	3b15      	subs	r3, #21
    572c:	f023 0303 	bic.w	r3, r3, #3
    5730:	3304      	adds	r3, #4
    5732:	f105 0015 	add.w	r0, r5, #21
    5736:	4281      	cmp	r1, r0
    5738:	bf38      	it	cc
    573a:	2304      	movcc	r3, #4
    573c:	f1ba 0f00 	cmp.w	sl, #0
    5740:	bf18      	it	ne
    5742:	4637      	movne	r7, r6
    5744:	f842 a003 	str.w	sl, [r2, r3]
    5748:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    574c:	686a      	ldr	r2, [r5, #4]
    574e:	f8cc 7010 	str.w	r7, [ip, #16]
    5752:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    5756:	6029      	str	r1, [r5, #0]
    5758:	4660      	mov	r0, ip
    575a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
    575e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5762:	3a04      	subs	r2, #4
    5764:	f853 0b04 	ldr.w	r0, [r3], #4
    5768:	f842 0f04 	str.w	r0, [r2, #4]!
    576c:	4299      	cmp	r1, r3
    576e:	d8f9      	bhi.n	5764 <__lshift+0xcc>
    5770:	e7ea      	b.n	5748 <__lshift+0xb0>
    5772:	4b03      	ldr	r3, [pc, #12]	; (5780 <__lshift+0xe8>)
    5774:	4803      	ldr	r0, [pc, #12]	; (5784 <__lshift+0xec>)
    5776:	4662      	mov	r2, ip
    5778:	f44f 71ef 	mov.w	r1, #478	; 0x1de
    577c:	f002 f8a4 	bl	78c8 <__assert_func>
    5780:	2000044c 	.word	0x2000044c
    5784:	20000460 	.word	0x20000460

00005788 <__mcmp>:
    5788:	690b      	ldr	r3, [r1, #16]
    578a:	4684      	mov	ip, r0
    578c:	6900      	ldr	r0, [r0, #16]
    578e:	1ac0      	subs	r0, r0, r3
    5790:	d116      	bne.n	57c0 <__mcmp+0x38>
    5792:	f10c 0c14 	add.w	ip, ip, #20
    5796:	3114      	adds	r1, #20
    5798:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
    579c:	b410      	push	{r4}
    579e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    57a2:	e001      	b.n	57a8 <__mcmp+0x20>
    57a4:	4594      	cmp	ip, r2
    57a6:	d208      	bcs.n	57ba <__mcmp+0x32>
    57a8:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    57ac:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    57b0:	428c      	cmp	r4, r1
    57b2:	d0f7      	beq.n	57a4 <__mcmp+0x1c>
    57b4:	d205      	bcs.n	57c2 <__mcmp+0x3a>
    57b6:	f04f 30ff 	mov.w	r0, #4294967295
    57ba:	f85d 4b04 	ldr.w	r4, [sp], #4
    57be:	4770      	bx	lr
    57c0:	4770      	bx	lr
    57c2:	2001      	movs	r0, #1
    57c4:	f85d 4b04 	ldr.w	r4, [sp], #4
    57c8:	4770      	bx	lr
    57ca:	bf00      	nop

000057cc <__mdiff>:
    57cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    57d0:	690f      	ldr	r7, [r1, #16]
    57d2:	6913      	ldr	r3, [r2, #16]
    57d4:	1aff      	subs	r7, r7, r3
    57d6:	2f00      	cmp	r7, #0
    57d8:	460e      	mov	r6, r1
    57da:	4690      	mov	r8, r2
    57dc:	d17f      	bne.n	58de <__mdiff+0x112>
    57de:	f101 0514 	add.w	r5, r1, #20
    57e2:	3214      	adds	r2, #20
    57e4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    57e8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    57ec:	e001      	b.n	57f2 <__mdiff+0x26>
    57ee:	429d      	cmp	r5, r3
    57f0:	d278      	bcs.n	58e4 <__mdiff+0x118>
    57f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    57f6:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    57fa:	42a1      	cmp	r1, r4
    57fc:	d0f7      	beq.n	57ee <__mdiff+0x22>
    57fe:	d369      	bcc.n	58d4 <__mdiff+0x108>
    5800:	6871      	ldr	r1, [r6, #4]
    5802:	f7ff fd3b 	bl	527c <_Balloc>
    5806:	4681      	mov	r9, r0
    5808:	2800      	cmp	r0, #0
    580a:	d077      	beq.n	58fc <__mdiff+0x130>
    580c:	6935      	ldr	r5, [r6, #16]
    580e:	f8d8 2010 	ldr.w	r2, [r8, #16]
    5812:	60c7      	str	r7, [r0, #12]
    5814:	f108 0e14 	add.w	lr, r8, #20
    5818:	f106 0014 	add.w	r0, r6, #20
    581c:	f109 0a14 	add.w	sl, r9, #20
    5820:	f106 0110 	add.w	r1, r6, #16
    5824:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    5828:	eb00 0785 	add.w	r7, r0, r5, lsl #2
    582c:	4656      	mov	r6, sl
    582e:	f04f 0c00 	mov.w	ip, #0
    5832:	f85e 4b04 	ldr.w	r4, [lr], #4
    5836:	f851 bf04 	ldr.w	fp, [r1, #4]!
    583a:	b2a3      	uxth	r3, r4
    583c:	fa1c fc8b 	uxtah	ip, ip, fp
    5840:	ebac 0303 	sub.w	r3, ip, r3
    5844:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    5848:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
    584c:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
    5850:	b29b      	uxth	r3, r3
    5852:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    5856:	4572      	cmp	r2, lr
    5858:	f846 3b04 	str.w	r3, [r6], #4
    585c:	ea4f 4c2c 	mov.w	ip, ip, asr #16
    5860:	d8e7      	bhi.n	5832 <__mdiff+0x66>
    5862:	eba2 0108 	sub.w	r1, r2, r8
    5866:	3915      	subs	r1, #21
    5868:	f108 0815 	add.w	r8, r8, #21
    586c:	4542      	cmp	r2, r8
    586e:	f021 0403 	bic.w	r4, r1, #3
    5872:	f104 0404 	add.w	r4, r4, #4
    5876:	bf38      	it	cc
    5878:	2404      	movcc	r4, #4
    587a:	4420      	add	r0, r4
    587c:	f021 0203 	bic.w	r2, r1, #3
    5880:	bf38      	it	cc
    5882:	2200      	movcc	r2, #0
    5884:	4287      	cmp	r7, r0
    5886:	4452      	add	r2, sl
    5888:	4454      	add	r4, sl
    588a:	d918      	bls.n	58be <__mdiff+0xf2>
    588c:	4626      	mov	r6, r4
    588e:	4601      	mov	r1, r0
    5890:	f851 3b04 	ldr.w	r3, [r1], #4
    5894:	fa1c fc83 	uxtah	ip, ip, r3
    5898:	ea4f 422c 	mov.w	r2, ip, asr #16
    589c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    58a0:	fa1f fc8c 	uxth.w	ip, ip
    58a4:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
    58a8:	428f      	cmp	r7, r1
    58aa:	f846 3b04 	str.w	r3, [r6], #4
    58ae:	ea4f 4c22 	mov.w	ip, r2, asr #16
    58b2:	d8ed      	bhi.n	5890 <__mdiff+0xc4>
    58b4:	3f01      	subs	r7, #1
    58b6:	1a3f      	subs	r7, r7, r0
    58b8:	f027 0703 	bic.w	r7, r7, #3
    58bc:	19e2      	adds	r2, r4, r7
    58be:	b923      	cbnz	r3, 58ca <__mdiff+0xfe>
    58c0:	f852 3d04 	ldr.w	r3, [r2, #-4]!
    58c4:	3d01      	subs	r5, #1
    58c6:	2b00      	cmp	r3, #0
    58c8:	d0fa      	beq.n	58c0 <__mdiff+0xf4>
    58ca:	f8c9 5010 	str.w	r5, [r9, #16]
    58ce:	4648      	mov	r0, r9
    58d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    58d4:	4633      	mov	r3, r6
    58d6:	2701      	movs	r7, #1
    58d8:	4646      	mov	r6, r8
    58da:	4698      	mov	r8, r3
    58dc:	e790      	b.n	5800 <__mdiff+0x34>
    58de:	dbf9      	blt.n	58d4 <__mdiff+0x108>
    58e0:	2700      	movs	r7, #0
    58e2:	e78d      	b.n	5800 <__mdiff+0x34>
    58e4:	2100      	movs	r1, #0
    58e6:	f7ff fcc9 	bl	527c <_Balloc>
    58ea:	4681      	mov	r9, r0
    58ec:	b168      	cbz	r0, 590a <__mdiff+0x13e>
    58ee:	2201      	movs	r2, #1
    58f0:	2300      	movs	r3, #0
    58f2:	e9c9 2304 	strd	r2, r3, [r9, #16]
    58f6:	4648      	mov	r0, r9
    58f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    58fc:	4b06      	ldr	r3, [pc, #24]	; (5918 <__mdiff+0x14c>)
    58fe:	4807      	ldr	r0, [pc, #28]	; (591c <__mdiff+0x150>)
    5900:	464a      	mov	r2, r9
    5902:	f240 2145 	movw	r1, #581	; 0x245
    5906:	f001 ffdf 	bl	78c8 <__assert_func>
    590a:	4b03      	ldr	r3, [pc, #12]	; (5918 <__mdiff+0x14c>)
    590c:	4803      	ldr	r0, [pc, #12]	; (591c <__mdiff+0x150>)
    590e:	464a      	mov	r2, r9
    5910:	f240 2137 	movw	r1, #567	; 0x237
    5914:	f001 ffd8 	bl	78c8 <__assert_func>
    5918:	2000044c 	.word	0x2000044c
    591c:	20000460 	.word	0x20000460

00005920 <__d2b>:
    5920:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5924:	4688      	mov	r8, r1
    5926:	b083      	sub	sp, #12
    5928:	2101      	movs	r1, #1
    592a:	ec57 6b10 	vmov	r6, r7, d0
    592e:	4615      	mov	r5, r2
    5930:	f7ff fca4 	bl	527c <_Balloc>
    5934:	4604      	mov	r4, r0
    5936:	2800      	cmp	r0, #0
    5938:	d051      	beq.n	59de <__d2b+0xbe>
    593a:	f3c7 590a 	ubfx	r9, r7, #20, #11
    593e:	f3c7 0313 	ubfx	r3, r7, #0, #20
    5942:	f1b9 0f00 	cmp.w	r9, #0
    5946:	d001      	beq.n	594c <__d2b+0x2c>
    5948:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    594c:	2e00      	cmp	r6, #0
    594e:	9301      	str	r3, [sp, #4]
    5950:	d118      	bne.n	5984 <__d2b+0x64>
    5952:	a801      	add	r0, sp, #4
    5954:	f7ff fd34 	bl	53c0 <__lo0bits>
    5958:	9a01      	ldr	r2, [sp, #4]
    595a:	6162      	str	r2, [r4, #20]
    595c:	2201      	movs	r2, #1
    595e:	f100 0320 	add.w	r3, r0, #32
    5962:	6122      	str	r2, [r4, #16]
    5964:	f1b9 0f00 	cmp.w	r9, #0
    5968:	d025      	beq.n	59b6 <__d2b+0x96>
    596a:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
    596e:	eb09 0203 	add.w	r2, r9, r3
    5972:	4620      	mov	r0, r4
    5974:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
    5978:	f8c8 2000 	str.w	r2, [r8]
    597c:	602b      	str	r3, [r5, #0]
    597e:	b003      	add	sp, #12
    5980:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5984:	4668      	mov	r0, sp
    5986:	9600      	str	r6, [sp, #0]
    5988:	f7ff fd1a 	bl	53c0 <__lo0bits>
    598c:	4603      	mov	r3, r0
    598e:	b310      	cbz	r0, 59d6 <__d2b+0xb6>
    5990:	e9dd 0200 	ldrd	r0, r2, [sp]
    5994:	f1c3 0120 	rsb	r1, r3, #32
    5998:	fa02 f101 	lsl.w	r1, r2, r1
    599c:	4301      	orrs	r1, r0
    599e:	40da      	lsrs	r2, r3
    59a0:	6161      	str	r1, [r4, #20]
    59a2:	9201      	str	r2, [sp, #4]
    59a4:	2a00      	cmp	r2, #0
    59a6:	61a2      	str	r2, [r4, #24]
    59a8:	bf14      	ite	ne
    59aa:	2202      	movne	r2, #2
    59ac:	2201      	moveq	r2, #1
    59ae:	6122      	str	r2, [r4, #16]
    59b0:	f1b9 0f00 	cmp.w	r9, #0
    59b4:	d1d9      	bne.n	596a <__d2b+0x4a>
    59b6:	f2a3 4332 	subw	r3, r3, #1074	; 0x432
    59ba:	f8c8 3000 	str.w	r3, [r8]
    59be:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    59c2:	6918      	ldr	r0, [r3, #16]
    59c4:	f7ff fcdc 	bl	5380 <__hi0bits>
    59c8:	ebc0 1342 	rsb	r3, r0, r2, lsl #5
    59cc:	4620      	mov	r0, r4
    59ce:	602b      	str	r3, [r5, #0]
    59d0:	b003      	add	sp, #12
    59d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    59d6:	9a00      	ldr	r2, [sp, #0]
    59d8:	6162      	str	r2, [r4, #20]
    59da:	9a01      	ldr	r2, [sp, #4]
    59dc:	e7e2      	b.n	59a4 <__d2b+0x84>
    59de:	4b03      	ldr	r3, [pc, #12]	; (59ec <__d2b+0xcc>)
    59e0:	4803      	ldr	r0, [pc, #12]	; (59f0 <__d2b+0xd0>)
    59e2:	4622      	mov	r2, r4
    59e4:	f240 310f 	movw	r1, #783	; 0x30f
    59e8:	f001 ff6e 	bl	78c8 <__assert_func>
    59ec:	2000044c 	.word	0x2000044c
    59f0:	20000460 	.word	0x20000460

000059f4 <__ascii_wctomb>:
    59f4:	b149      	cbz	r1, 5a0a <__ascii_wctomb+0x16>
    59f6:	2aff      	cmp	r2, #255	; 0xff
    59f8:	d802      	bhi.n	5a00 <__ascii_wctomb+0xc>
    59fa:	700a      	strb	r2, [r1, #0]
    59fc:	2001      	movs	r0, #1
    59fe:	4770      	bx	lr
    5a00:	238a      	movs	r3, #138	; 0x8a
    5a02:	6003      	str	r3, [r0, #0]
    5a04:	f04f 30ff 	mov.w	r0, #4294967295
    5a08:	4770      	bx	lr
    5a0a:	4608      	mov	r0, r1
    5a0c:	4770      	bx	lr
    5a0e:	bf00      	nop

00005a10 <_svfprintf_r>:
    5a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5a14:	ed2d 8b08 	vpush	{d8-d11}
    5a18:	b0d1      	sub	sp, #324	; 0x144
    5a1a:	460c      	mov	r4, r1
    5a1c:	ee0b 1a10 	vmov	s22, r1
    5a20:	4690      	mov	r8, r2
    5a22:	9308      	str	r3, [sp, #32]
    5a24:	4683      	mov	fp, r0
    5a26:	f001 febb 	bl	77a0 <_localeconv_r>
    5a2a:	6803      	ldr	r3, [r0, #0]
    5a2c:	9312      	str	r3, [sp, #72]	; 0x48
    5a2e:	4618      	mov	r0, r3
    5a30:	f7ff fa06 	bl	4e40 <strlen>
    5a34:	af20      	add	r7, sp, #128	; 0x80
    5a36:	9010      	str	r0, [sp, #64]	; 0x40
    5a38:	2208      	movs	r2, #8
    5a3a:	2100      	movs	r1, #0
    5a3c:	4638      	mov	r0, r7
    5a3e:	f7fe feb3 	bl	47a8 <memset>
    5a42:	89a3      	ldrh	r3, [r4, #12]
    5a44:	061b      	lsls	r3, r3, #24
    5a46:	d503      	bpl.n	5a50 <_svfprintf_r+0x40>
    5a48:	6923      	ldr	r3, [r4, #16]
    5a4a:	2b00      	cmp	r3, #0
    5a4c:	f000 8755 	beq.w	68fa <_svfprintf_r+0xeea>
    5a50:	2300      	movs	r3, #0
    5a52:	ed9f 8b83 	vldr	d8, [pc, #524]	; 5c60 <_svfprintf_r+0x250>
    5a56:	ed9f 9b84 	vldr	d9, [pc, #528]	; 5c68 <_svfprintf_r+0x258>
    5a5a:	e9cd 3325 	strd	r3, r3, [sp, #148]	; 0x94
    5a5e:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
    5a62:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
    5a66:	aa27      	add	r2, sp, #156	; 0x9c
    5a68:	930e      	str	r3, [sp, #56]	; 0x38
    5a6a:	9224      	str	r2, [sp, #144]	; 0x90
    5a6c:	4692      	mov	sl, r2
    5a6e:	9311      	str	r3, [sp, #68]	; 0x44
    5a70:	9304      	str	r3, [sp, #16]
    5a72:	4644      	mov	r4, r8
    5a74:	46a1      	mov	r9, r4
    5a76:	4b7e      	ldr	r3, [pc, #504]	; (5c70 <_svfprintf_r+0x260>)
    5a78:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    5a7c:	f7fe ff5e 	bl	493c <__locale_mb_cur_max>
    5a80:	464a      	mov	r2, r9
    5a82:	4603      	mov	r3, r0
    5a84:	a91c      	add	r1, sp, #112	; 0x70
    5a86:	9700      	str	r7, [sp, #0]
    5a88:	4658      	mov	r0, fp
    5a8a:	47a8      	blx	r5
    5a8c:	2800      	cmp	r0, #0
    5a8e:	f000 80b0 	beq.w	5bf2 <_svfprintf_r+0x1e2>
    5a92:	f2c0 80a6 	blt.w	5be2 <_svfprintf_r+0x1d2>
    5a96:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    5a98:	2a25      	cmp	r2, #37	; 0x25
    5a9a:	4603      	mov	r3, r0
    5a9c:	d001      	beq.n	5aa2 <_svfprintf_r+0x92>
    5a9e:	4499      	add	r9, r3
    5aa0:	e7e9      	b.n	5a76 <_svfprintf_r+0x66>
    5aa2:	ebb9 0504 	subs.w	r5, r9, r4
    5aa6:	4606      	mov	r6, r0
    5aa8:	f040 80a7 	bne.w	5bfa <_svfprintf_r+0x1ea>
    5aac:	2300      	movs	r3, #0
    5aae:	f04f 32ff 	mov.w	r2, #4294967295
    5ab2:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    5ab6:	4698      	mov	r8, r3
    5ab8:	9306      	str	r3, [sp, #24]
    5aba:	f109 0901 	add.w	r9, r9, #1
    5abe:	f899 3000 	ldrb.w	r3, [r9]
    5ac2:	9203      	str	r2, [sp, #12]
    5ac4:	252b      	movs	r5, #43	; 0x2b
    5ac6:	2620      	movs	r6, #32
    5ac8:	f109 0901 	add.w	r9, r9, #1
    5acc:	f1a3 0220 	sub.w	r2, r3, #32
    5ad0:	2a5a      	cmp	r2, #90	; 0x5a
    5ad2:	f200 80cf 	bhi.w	5c74 <_svfprintf_r+0x264>
    5ad6:	e8df f012 	tbh	[pc, r2, lsl #1]
    5ada:	02e8      	.short	0x02e8
    5adc:	00cd00cd 	.word	0x00cd00cd
    5ae0:	00cd02e3 	.word	0x00cd02e3
    5ae4:	00cd00cd 	.word	0x00cd00cd
    5ae8:	00cd006a 	.word	0x00cd006a
    5aec:	020500cd 	.word	0x020500cd
    5af0:	00cd0284 	.word	0x00cd0284
    5af4:	02c90210 	.word	0x02c90210
    5af8:	02bd00cd 	.word	0x02bd00cd
    5afc:	005b005b 	.word	0x005b005b
    5b00:	005b005b 	.word	0x005b005b
    5b04:	005b005b 	.word	0x005b005b
    5b08:	005b005b 	.word	0x005b005b
    5b0c:	00cd005b 	.word	0x00cd005b
    5b10:	00cd00cd 	.word	0x00cd00cd
    5b14:	00cd00cd 	.word	0x00cd00cd
    5b18:	00cd00cd 	.word	0x00cd00cd
    5b1c:	00cd0153 	.word	0x00cd0153
    5b20:	021a0183 	.word	0x021a0183
    5b24:	01530153 	.word	0x01530153
    5b28:	00cd0153 	.word	0x00cd0153
    5b2c:	00cd00cd 	.word	0x00cd00cd
    5b30:	021500cd 	.word	0x021500cd
    5b34:	00cd00cd 	.word	0x00cd00cd
    5b38:	00cd0296 	.word	0x00cd0296
    5b3c:	00cd00cd 	.word	0x00cd00cd
    5b40:	00cd01ab 	.word	0x00cd01ab
    5b44:	00cd02aa 	.word	0x00cd02aa
    5b48:	06e300cd 	.word	0x06e300cd
    5b4c:	00cd00cd 	.word	0x00cd00cd
    5b50:	00cd00cd 	.word	0x00cd00cd
    5b54:	00cd00cd 	.word	0x00cd00cd
    5b58:	00cd00cd 	.word	0x00cd00cd
    5b5c:	00cd0153 	.word	0x00cd0153
    5b60:	01de0183 	.word	0x01de0183
    5b64:	01530153 	.word	0x01530153
    5b68:	02770153 	.word	0x02770153
    5b6c:	007f01de 	.word	0x007f01de
    5b70:	028900cd 	.word	0x028900cd
    5b74:	025f00cd 	.word	0x025f00cd
    5b78:	022f06e0 	.word	0x022f06e0
    5b7c:	00cd007f 	.word	0x00cd007f
    5b80:	007c01ab 	.word	0x007c01ab
    5b84:	00cd06b8 	.word	0x00cd06b8
    5b88:	06bd00cd 	.word	0x06bd00cd
    5b8c:	007c00cd 	.word	0x007c00cd
    5b90:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    5b94:	2100      	movs	r1, #0
    5b96:	f819 3b01 	ldrb.w	r3, [r9], #1
    5b9a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    5b9e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    5ba2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    5ba6:	2a09      	cmp	r2, #9
    5ba8:	d9f5      	bls.n	5b96 <_svfprintf_r+0x186>
    5baa:	9106      	str	r1, [sp, #24]
    5bac:	e78e      	b.n	5acc <_svfprintf_r+0xbc>
    5bae:	4658      	mov	r0, fp
    5bb0:	f001 fdf6 	bl	77a0 <_localeconv_r>
    5bb4:	6843      	ldr	r3, [r0, #4]
    5bb6:	9315      	str	r3, [sp, #84]	; 0x54
    5bb8:	4618      	mov	r0, r3
    5bba:	f7ff f941 	bl	4e40 <strlen>
    5bbe:	9016      	str	r0, [sp, #88]	; 0x58
    5bc0:	4658      	mov	r0, fp
    5bc2:	f001 fded 	bl	77a0 <_localeconv_r>
    5bc6:	6883      	ldr	r3, [r0, #8]
    5bc8:	9313      	str	r3, [sp, #76]	; 0x4c
    5bca:	9b16      	ldr	r3, [sp, #88]	; 0x58
    5bcc:	2b00      	cmp	r3, #0
    5bce:	f040 862d 	bne.w	682c <_svfprintf_r+0xe1c>
    5bd2:	f899 3000 	ldrb.w	r3, [r9]
    5bd6:	e777      	b.n	5ac8 <_svfprintf_r+0xb8>
    5bd8:	f899 3000 	ldrb.w	r3, [r9]
    5bdc:	f048 0820 	orr.w	r8, r8, #32
    5be0:	e772      	b.n	5ac8 <_svfprintf_r+0xb8>
    5be2:	2208      	movs	r2, #8
    5be4:	2100      	movs	r1, #0
    5be6:	4638      	mov	r0, r7
    5be8:	f7fe fdde 	bl	47a8 <memset>
    5bec:	2301      	movs	r3, #1
    5bee:	4499      	add	r9, r3
    5bf0:	e741      	b.n	5a76 <_svfprintf_r+0x66>
    5bf2:	ebb9 0504 	subs.w	r5, r9, r4
    5bf6:	4606      	mov	r6, r0
    5bf8:	d011      	beq.n	5c1e <_svfprintf_r+0x20e>
    5bfa:	9b26      	ldr	r3, [sp, #152]	; 0x98
    5bfc:	442b      	add	r3, r5
    5bfe:	9326      	str	r3, [sp, #152]	; 0x98
    5c00:	9b25      	ldr	r3, [sp, #148]	; 0x94
    5c02:	3301      	adds	r3, #1
    5c04:	2b07      	cmp	r3, #7
    5c06:	e9ca 4500 	strd	r4, r5, [sl]
    5c0a:	9325      	str	r3, [sp, #148]	; 0x94
    5c0c:	dc1c      	bgt.n	5c48 <_svfprintf_r+0x238>
    5c0e:	f10a 0a08 	add.w	sl, sl, #8
    5c12:	9b04      	ldr	r3, [sp, #16]
    5c14:	442b      	add	r3, r5
    5c16:	9304      	str	r3, [sp, #16]
    5c18:	2e00      	cmp	r6, #0
    5c1a:	f47f af47 	bne.w	5aac <_svfprintf_r+0x9c>
    5c1e:	9b26      	ldr	r3, [sp, #152]	; 0x98
    5c20:	2b00      	cmp	r3, #0
    5c22:	f041 820b 	bne.w	703c <_svfprintf_r+0x162c>
    5c26:	ee1b 3a10 	vmov	r3, s22
    5c2a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    5c2e:	f013 0f40 	tst.w	r3, #64	; 0x40
    5c32:	9b04      	ldr	r3, [sp, #16]
    5c34:	bf18      	it	ne
    5c36:	f04f 33ff 	movne.w	r3, #4294967295
    5c3a:	9304      	str	r3, [sp, #16]
    5c3c:	9804      	ldr	r0, [sp, #16]
    5c3e:	b051      	add	sp, #324	; 0x144
    5c40:	ecbd 8b08 	vpop	{d8-d11}
    5c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5c48:	ee1b 1a10 	vmov	r1, s22
    5c4c:	aa24      	add	r2, sp, #144	; 0x90
    5c4e:	4658      	mov	r0, fp
    5c50:	f002 fde6 	bl	8820 <__ssprint_r>
    5c54:	2800      	cmp	r0, #0
    5c56:	d1e6      	bne.n	5c26 <_svfprintf_r+0x216>
    5c58:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    5c5c:	e7d9      	b.n	5c12 <_svfprintf_r+0x202>
    5c5e:	bf00      	nop
	...
    5c68:	ffffffff 	.word	0xffffffff
    5c6c:	7fefffff 	.word	0x7fefffff
    5c70:	20001088 	.word	0x20001088
    5c74:	930b      	str	r3, [sp, #44]	; 0x2c
    5c76:	2b00      	cmp	r3, #0
    5c78:	d0d1      	beq.n	5c1e <_svfprintf_r+0x20e>
    5c7a:	2100      	movs	r1, #0
    5c7c:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    5c80:	f88d 30dc 	strb.w	r3, [sp, #220]	; 0xdc
    5c84:	2301      	movs	r3, #1
    5c86:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    5c8a:	9302      	str	r3, [sp, #8]
    5c8c:	9107      	str	r1, [sp, #28]
    5c8e:	9305      	str	r3, [sp, #20]
    5c90:	9103      	str	r1, [sp, #12]
    5c92:	910f      	str	r1, [sp, #60]	; 0x3c
    5c94:	ac37      	add	r4, sp, #220	; 0xdc
    5c96:	f018 0302 	ands.w	r3, r8, #2
    5c9a:	9309      	str	r3, [sp, #36]	; 0x24
    5c9c:	d002      	beq.n	5ca4 <_svfprintf_r+0x294>
    5c9e:	9b02      	ldr	r3, [sp, #8]
    5ca0:	3302      	adds	r3, #2
    5ca2:	9302      	str	r3, [sp, #8]
    5ca4:	f018 0384 	ands.w	r3, r8, #132	; 0x84
    5ca8:	930a      	str	r3, [sp, #40]	; 0x28
    5caa:	d105      	bne.n	5cb8 <_svfprintf_r+0x2a8>
    5cac:	9b06      	ldr	r3, [sp, #24]
    5cae:	9a02      	ldr	r2, [sp, #8]
    5cb0:	1a9d      	subs	r5, r3, r2
    5cb2:	2d00      	cmp	r5, #0
    5cb4:	f300 8369 	bgt.w	638a <_svfprintf_r+0x97a>
    5cb8:	9a26      	ldr	r2, [sp, #152]	; 0x98
    5cba:	b189      	cbz	r1, 5ce0 <_svfprintf_r+0x2d0>
    5cbc:	9925      	ldr	r1, [sp, #148]	; 0x94
    5cbe:	f10d 0067 	add.w	r0, sp, #103	; 0x67
    5cc2:	3101      	adds	r1, #1
    5cc4:	3201      	adds	r2, #1
    5cc6:	f8ca 0000 	str.w	r0, [sl]
    5cca:	2907      	cmp	r1, #7
    5ccc:	f04f 0001 	mov.w	r0, #1
    5cd0:	9226      	str	r2, [sp, #152]	; 0x98
    5cd2:	9125      	str	r1, [sp, #148]	; 0x94
    5cd4:	f8ca 0004 	str.w	r0, [sl, #4]
    5cd8:	f300 83a2 	bgt.w	6420 <_svfprintf_r+0xa10>
    5cdc:	f10a 0a08 	add.w	sl, sl, #8
    5ce0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5ce2:	b183      	cbz	r3, 5d06 <_svfprintf_r+0x2f6>
    5ce4:	9b25      	ldr	r3, [sp, #148]	; 0x94
    5ce6:	a91a      	add	r1, sp, #104	; 0x68
    5ce8:	3301      	adds	r3, #1
    5cea:	3202      	adds	r2, #2
    5cec:	f8ca 1000 	str.w	r1, [sl]
    5cf0:	2b07      	cmp	r3, #7
    5cf2:	f04f 0102 	mov.w	r1, #2
    5cf6:	9226      	str	r2, [sp, #152]	; 0x98
    5cf8:	9325      	str	r3, [sp, #148]	; 0x94
    5cfa:	f8ca 1004 	str.w	r1, [sl, #4]
    5cfe:	f300 83a3 	bgt.w	6448 <_svfprintf_r+0xa38>
    5d02:	f10a 0a08 	add.w	sl, sl, #8
    5d06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5d08:	2b80      	cmp	r3, #128	; 0x80
    5d0a:	f000 826c 	beq.w	61e6 <_svfprintf_r+0x7d6>
    5d0e:	9b03      	ldr	r3, [sp, #12]
    5d10:	9905      	ldr	r1, [sp, #20]
    5d12:	1a5d      	subs	r5, r3, r1
    5d14:	2d00      	cmp	r5, #0
    5d16:	f300 82a5 	bgt.w	6264 <_svfprintf_r+0x854>
    5d1a:	f418 7f80 	tst.w	r8, #256	; 0x100
    5d1e:	f040 820d 	bne.w	613c <_svfprintf_r+0x72c>
    5d22:	9b05      	ldr	r3, [sp, #20]
    5d24:	f8ca 3004 	str.w	r3, [sl, #4]
    5d28:	441a      	add	r2, r3
    5d2a:	9b25      	ldr	r3, [sp, #148]	; 0x94
    5d2c:	f8ca 4000 	str.w	r4, [sl]
    5d30:	3301      	adds	r3, #1
    5d32:	2b07      	cmp	r3, #7
    5d34:	9226      	str	r2, [sp, #152]	; 0x98
    5d36:	9325      	str	r3, [sp, #148]	; 0x94
    5d38:	f300 831b 	bgt.w	6372 <_svfprintf_r+0x962>
    5d3c:	f10a 0a08 	add.w	sl, sl, #8
    5d40:	f018 0f04 	tst.w	r8, #4
    5d44:	d005      	beq.n	5d52 <_svfprintf_r+0x342>
    5d46:	9b06      	ldr	r3, [sp, #24]
    5d48:	9902      	ldr	r1, [sp, #8]
    5d4a:	1a5c      	subs	r4, r3, r1
    5d4c:	2c00      	cmp	r4, #0
    5d4e:	f300 8388 	bgt.w	6462 <_svfprintf_r+0xa52>
    5d52:	9b04      	ldr	r3, [sp, #16]
    5d54:	9906      	ldr	r1, [sp, #24]
    5d56:	9802      	ldr	r0, [sp, #8]
    5d58:	4281      	cmp	r1, r0
    5d5a:	bfac      	ite	ge
    5d5c:	185b      	addge	r3, r3, r1
    5d5e:	181b      	addlt	r3, r3, r0
    5d60:	9304      	str	r3, [sp, #16]
    5d62:	2a00      	cmp	r2, #0
    5d64:	f040 82b0 	bne.w	62c8 <_svfprintf_r+0x8b8>
    5d68:	2300      	movs	r3, #0
    5d6a:	9325      	str	r3, [sp, #148]	; 0x94
    5d6c:	9b07      	ldr	r3, [sp, #28]
    5d6e:	b11b      	cbz	r3, 5d78 <_svfprintf_r+0x368>
    5d70:	9907      	ldr	r1, [sp, #28]
    5d72:	4658      	mov	r0, fp
    5d74:	f7ff f966 	bl	5044 <_free_r>
    5d78:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    5d7c:	464c      	mov	r4, r9
    5d7e:	e679      	b.n	5a74 <_svfprintf_r+0x64>
    5d80:	930b      	str	r3, [sp, #44]	; 0x2c
    5d82:	9b08      	ldr	r3, [sp, #32]
    5d84:	3307      	adds	r3, #7
    5d86:	f023 0307 	bic.w	r3, r3, #7
    5d8a:	ecb3 8b02 	vldmia	r3!, {d8}
    5d8e:	eeb0 7bc8 	vabs.f64	d7, d8
    5d92:	eeb4 7b49 	vcmp.f64	d7, d9
    5d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5d9a:	9308      	str	r3, [sp, #32]
    5d9c:	f340 84e9 	ble.w	6772 <_svfprintf_r+0xd62>
    5da0:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
    5da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5da8:	f101 8059 	bmi.w	6e5e <_svfprintf_r+0x144e>
    5dac:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    5db0:	4cab      	ldr	r4, [pc, #684]	; (6060 <_svfprintf_r+0x650>)
    5db2:	4bac      	ldr	r3, [pc, #688]	; (6064 <_svfprintf_r+0x654>)
    5db4:	f028 0880 	bic.w	r8, r8, #128	; 0x80
    5db8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    5dba:	2a47      	cmp	r2, #71	; 0x47
    5dbc:	bfc8      	it	gt
    5dbe:	461c      	movgt	r4, r3
    5dc0:	2300      	movs	r3, #0
    5dc2:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    5dc6:	2203      	movs	r2, #3
    5dc8:	9307      	str	r3, [sp, #28]
    5dca:	9202      	str	r2, [sp, #8]
    5dcc:	9205      	str	r2, [sp, #20]
    5dce:	9303      	str	r3, [sp, #12]
    5dd0:	930f      	str	r3, [sp, #60]	; 0x3c
    5dd2:	2900      	cmp	r1, #0
    5dd4:	f43f af5f 	beq.w	5c96 <_svfprintf_r+0x286>
    5dd8:	9b02      	ldr	r3, [sp, #8]
    5dda:	3301      	adds	r3, #1
    5ddc:	9302      	str	r3, [sp, #8]
    5dde:	e75a      	b.n	5c96 <_svfprintf_r+0x286>
    5de0:	2b43      	cmp	r3, #67	; 0x43
    5de2:	930b      	str	r3, [sp, #44]	; 0x2c
    5de4:	d003      	beq.n	5dee <_svfprintf_r+0x3de>
    5de6:	f018 0f10 	tst.w	r8, #16
    5dea:	f000 855d 	beq.w	68a8 <_svfprintf_r+0xe98>
    5dee:	9d08      	ldr	r5, [sp, #32]
    5df0:	2208      	movs	r2, #8
    5df2:	2100      	movs	r1, #0
    5df4:	a822      	add	r0, sp, #136	; 0x88
    5df6:	ac37      	add	r4, sp, #220	; 0xdc
    5df8:	f7fe fcd6 	bl	47a8 <memset>
    5dfc:	ab22      	add	r3, sp, #136	; 0x88
    5dfe:	f855 2b04 	ldr.w	r2, [r5], #4
    5e02:	4621      	mov	r1, r4
    5e04:	4658      	mov	r0, fp
    5e06:	f002 fcc5 	bl	8794 <_wcrtomb_r>
    5e0a:	4603      	mov	r3, r0
    5e0c:	3301      	adds	r3, #1
    5e0e:	9005      	str	r0, [sp, #20]
    5e10:	f001 82ee 	beq.w	73f0 <_svfprintf_r+0x19e0>
    5e14:	9b05      	ldr	r3, [sp, #20]
    5e16:	9508      	str	r5, [sp, #32]
    5e18:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    5e1c:	9302      	str	r3, [sp, #8]
    5e1e:	2100      	movs	r1, #0
    5e20:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    5e24:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    5e28:	9107      	str	r1, [sp, #28]
    5e2a:	9103      	str	r1, [sp, #12]
    5e2c:	910f      	str	r1, [sp, #60]	; 0x3c
    5e2e:	e732      	b.n	5c96 <_svfprintf_r+0x286>
    5e30:	930b      	str	r3, [sp, #44]	; 0x2c
    5e32:	9b08      	ldr	r3, [sp, #32]
    5e34:	461a      	mov	r2, r3
    5e36:	2300      	movs	r3, #0
    5e38:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    5e3c:	4613      	mov	r3, r2
    5e3e:	f853 4b04 	ldr.w	r4, [r3], #4
    5e42:	9308      	str	r3, [sp, #32]
    5e44:	2c00      	cmp	r4, #0
    5e46:	f000 8548 	beq.w	68da <_svfprintf_r+0xeca>
    5e4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5e4c:	2b53      	cmp	r3, #83	; 0x53
    5e4e:	f000 86ec 	beq.w	6c2a <_svfprintf_r+0x121a>
    5e52:	f018 0310 	ands.w	r3, r8, #16
    5e56:	930c      	str	r3, [sp, #48]	; 0x30
    5e58:	f040 86e7 	bne.w	6c2a <_svfprintf_r+0x121a>
    5e5c:	9b03      	ldr	r3, [sp, #12]
    5e5e:	1c5d      	adds	r5, r3, #1
    5e60:	f001 80e5 	beq.w	702e <_svfprintf_r+0x161e>
    5e64:	990c      	ldr	r1, [sp, #48]	; 0x30
    5e66:	461a      	mov	r2, r3
    5e68:	4620      	mov	r0, r4
    5e6a:	f001 fca1 	bl	77b0 <memchr>
    5e6e:	9007      	str	r0, [sp, #28]
    5e70:	2800      	cmp	r0, #0
    5e72:	f001 8328 	beq.w	74c6 <_svfprintf_r+0x1ab6>
    5e76:	9b07      	ldr	r3, [sp, #28]
    5e78:	1b1a      	subs	r2, r3, r4
    5e7a:	9205      	str	r2, [sp, #20]
    5e7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5e7e:	9303      	str	r3, [sp, #12]
    5e80:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    5e84:	930f      	str	r3, [sp, #60]	; 0x3c
    5e86:	930d      	str	r3, [sp, #52]	; 0x34
    5e88:	9307      	str	r3, [sp, #28]
    5e8a:	2373      	movs	r3, #115	; 0x73
    5e8c:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    5e90:	9202      	str	r2, [sp, #8]
    5e92:	930b      	str	r3, [sp, #44]	; 0x2c
    5e94:	e79d      	b.n	5dd2 <_svfprintf_r+0x3c2>
    5e96:	f018 0f20 	tst.w	r8, #32
    5e9a:	930b      	str	r3, [sp, #44]	; 0x2c
    5e9c:	9b08      	ldr	r3, [sp, #32]
    5e9e:	d03d      	beq.n	5f1c <_svfprintf_r+0x50c>
    5ea0:	3307      	adds	r3, #7
    5ea2:	f023 0307 	bic.w	r3, r3, #7
    5ea6:	461a      	mov	r2, r3
    5ea8:	4611      	mov	r1, r2
    5eaa:	685b      	ldr	r3, [r3, #4]
    5eac:	f851 2b08 	ldr.w	r2, [r1], #8
    5eb0:	9108      	str	r1, [sp, #32]
    5eb2:	4619      	mov	r1, r3
    5eb4:	2b00      	cmp	r3, #0
    5eb6:	f2c0 840c 	blt.w	66d2 <_svfprintf_r+0xcc2>
    5eba:	9b03      	ldr	r3, [sp, #12]
    5ebc:	3301      	adds	r3, #1
    5ebe:	f000 829e 	beq.w	63fe <_svfprintf_r+0x9ee>
    5ec2:	f028 0080 	bic.w	r0, r8, #128	; 0x80
    5ec6:	ea52 0301 	orrs.w	r3, r2, r1
    5eca:	9002      	str	r0, [sp, #8]
    5ecc:	f040 8299 	bne.w	6402 <_svfprintf_r+0x9f2>
    5ed0:	9b03      	ldr	r3, [sp, #12]
    5ed2:	2b00      	cmp	r3, #0
    5ed4:	f040 829a 	bne.w	640c <_svfprintf_r+0x9fc>
    5ed8:	4680      	mov	r8, r0
    5eda:	2300      	movs	r3, #0
    5edc:	9303      	str	r3, [sp, #12]
    5ede:	9305      	str	r3, [sp, #20]
    5ee0:	ac50      	add	r4, sp, #320	; 0x140
    5ee2:	e106      	b.n	60f2 <_svfprintf_r+0x6e2>
    5ee4:	9b08      	ldr	r3, [sp, #32]
    5ee6:	f853 2b04 	ldr.w	r2, [r3], #4
    5eea:	9206      	str	r2, [sp, #24]
    5eec:	2a00      	cmp	r2, #0
    5eee:	f280 8419 	bge.w	6724 <_svfprintf_r+0xd14>
    5ef2:	9a06      	ldr	r2, [sp, #24]
    5ef4:	9308      	str	r3, [sp, #32]
    5ef6:	4252      	negs	r2, r2
    5ef8:	9206      	str	r2, [sp, #24]
    5efa:	f899 3000 	ldrb.w	r3, [r9]
    5efe:	f048 0804 	orr.w	r8, r8, #4
    5f02:	e5e1      	b.n	5ac8 <_svfprintf_r+0xb8>
    5f04:	f899 3000 	ldrb.w	r3, [r9]
    5f08:	f048 0808 	orr.w	r8, r8, #8
    5f0c:	e5dc      	b.n	5ac8 <_svfprintf_r+0xb8>
    5f0e:	f048 0810 	orr.w	r8, r8, #16
    5f12:	f018 0f20 	tst.w	r8, #32
    5f16:	930b      	str	r3, [sp, #44]	; 0x2c
    5f18:	9b08      	ldr	r3, [sp, #32]
    5f1a:	d1c1      	bne.n	5ea0 <_svfprintf_r+0x490>
    5f1c:	f018 0f10 	tst.w	r8, #16
    5f20:	f040 840b 	bne.w	673a <_svfprintf_r+0xd2a>
    5f24:	f018 0f40 	tst.w	r8, #64	; 0x40
    5f28:	f000 8403 	beq.w	6732 <_svfprintf_r+0xd22>
    5f2c:	f933 2b04 	ldrsh.w	r2, [r3], #4
    5f30:	9308      	str	r3, [sp, #32]
    5f32:	17d1      	asrs	r1, r2, #31
    5f34:	460b      	mov	r3, r1
    5f36:	e7bd      	b.n	5eb4 <_svfprintf_r+0x4a4>
    5f38:	9b08      	ldr	r3, [sp, #32]
    5f3a:	f048 0202 	orr.w	r2, r8, #2
    5f3e:	9202      	str	r2, [sp, #8]
    5f40:	f853 2b04 	ldr.w	r2, [r3], #4
    5f44:	9308      	str	r3, [sp, #32]
    5f46:	f647 0330 	movw	r3, #30768	; 0x7830
    5f4a:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    5f4e:	2078      	movs	r0, #120	; 0x78
    5f50:	4b45      	ldr	r3, [pc, #276]	; (6068 <_svfprintf_r+0x658>)
    5f52:	9311      	str	r3, [sp, #68]	; 0x44
    5f54:	2100      	movs	r1, #0
    5f56:	2302      	movs	r3, #2
    5f58:	900b      	str	r0, [sp, #44]	; 0x2c
    5f5a:	2000      	movs	r0, #0
    5f5c:	9c03      	ldr	r4, [sp, #12]
    5f5e:	f88d 0067 	strb.w	r0, [sp, #103]	; 0x67
    5f62:	1c60      	adds	r0, r4, #1
    5f64:	f000 80ad 	beq.w	60c2 <_svfprintf_r+0x6b2>
    5f68:	9802      	ldr	r0, [sp, #8]
    5f6a:	f020 0880 	bic.w	r8, r0, #128	; 0x80
    5f6e:	ea52 0001 	orrs.w	r0, r2, r1
    5f72:	f040 80a4 	bne.w	60be <_svfprintf_r+0x6ae>
    5f76:	2c00      	cmp	r4, #0
    5f78:	f040 86ae 	bne.w	6cd8 <_svfprintf_r+0x12c8>
    5f7c:	2b00      	cmp	r3, #0
    5f7e:	d1ac      	bne.n	5eda <_svfprintf_r+0x4ca>
    5f80:	9b02      	ldr	r3, [sp, #8]
    5f82:	f013 0301 	ands.w	r3, r3, #1
    5f86:	9305      	str	r3, [sp, #20]
    5f88:	f000 83d1 	beq.w	672e <_svfprintf_r+0xd1e>
    5f8c:	2330      	movs	r3, #48	; 0x30
    5f8e:	f88d 313f 	strb.w	r3, [sp, #319]	; 0x13f
    5f92:	f20d 143f 	addw	r4, sp, #319	; 0x13f
    5f96:	e0ac      	b.n	60f2 <_svfprintf_r+0x6e2>
    5f98:	f018 0f20 	tst.w	r8, #32
    5f9c:	f040 83d4 	bne.w	6748 <_svfprintf_r+0xd38>
    5fa0:	f018 0f10 	tst.w	r8, #16
    5fa4:	f040 869f 	bne.w	6ce6 <_svfprintf_r+0x12d6>
    5fa8:	f018 0f40 	tst.w	r8, #64	; 0x40
    5fac:	f040 8797 	bne.w	6ede <_svfprintf_r+0x14ce>
    5fb0:	f418 7f00 	tst.w	r8, #512	; 0x200
    5fb4:	f000 8697 	beq.w	6ce6 <_svfprintf_r+0x12d6>
    5fb8:	9b08      	ldr	r3, [sp, #32]
    5fba:	9904      	ldr	r1, [sp, #16]
    5fbc:	f853 2b04 	ldr.w	r2, [r3], #4
    5fc0:	9308      	str	r3, [sp, #32]
    5fc2:	7011      	strb	r1, [r2, #0]
    5fc4:	464c      	mov	r4, r9
    5fc6:	e555      	b.n	5a74 <_svfprintf_r+0x64>
    5fc8:	f899 3000 	ldrb.w	r3, [r9]
    5fcc:	2b68      	cmp	r3, #104	; 0x68
    5fce:	bf03      	ittte	eq
    5fd0:	f899 3001 	ldrbeq.w	r3, [r9, #1]
    5fd4:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
    5fd8:	f109 0901 	addeq.w	r9, r9, #1
    5fdc:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
    5fe0:	e572      	b.n	5ac8 <_svfprintf_r+0xb8>
    5fe2:	f899 3000 	ldrb.w	r3, [r9]
    5fe6:	f88d 5067 	strb.w	r5, [sp, #103]	; 0x67
    5fea:	e56d      	b.n	5ac8 <_svfprintf_r+0xb8>
    5fec:	f899 3000 	ldrb.w	r3, [r9]
    5ff0:	2b6c      	cmp	r3, #108	; 0x6c
    5ff2:	bf03      	ittte	eq
    5ff4:	f899 3001 	ldrbeq.w	r3, [r9, #1]
    5ff8:	f048 0820 	orreq.w	r8, r8, #32
    5ffc:	f109 0901 	addeq.w	r9, r9, #1
    6000:	f048 0810 	orrne.w	r8, r8, #16
    6004:	e560      	b.n	5ac8 <_svfprintf_r+0xb8>
    6006:	930b      	str	r3, [sp, #44]	; 0x2c
    6008:	f048 0810 	orr.w	r8, r8, #16
    600c:	f018 0120 	ands.w	r1, r8, #32
    6010:	f000 8351 	beq.w	66b6 <_svfprintf_r+0xca6>
    6014:	9b08      	ldr	r3, [sp, #32]
    6016:	3307      	adds	r3, #7
    6018:	f023 0307 	bic.w	r3, r3, #7
    601c:	6859      	ldr	r1, [r3, #4]
    601e:	f853 2b08 	ldr.w	r2, [r3], #8
    6022:	9308      	str	r3, [sp, #32]
    6024:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
    6028:	9302      	str	r3, [sp, #8]
    602a:	2300      	movs	r3, #0
    602c:	e795      	b.n	5f5a <_svfprintf_r+0x54a>
    602e:	930b      	str	r3, [sp, #44]	; 0x2c
    6030:	f048 0310 	orr.w	r3, r8, #16
    6034:	9302      	str	r3, [sp, #8]
    6036:	9b02      	ldr	r3, [sp, #8]
    6038:	f013 0120 	ands.w	r1, r3, #32
    603c:	f000 8329 	beq.w	6692 <_svfprintf_r+0xc82>
    6040:	9b08      	ldr	r3, [sp, #32]
    6042:	3307      	adds	r3, #7
    6044:	f023 0307 	bic.w	r3, r3, #7
    6048:	6859      	ldr	r1, [r3, #4]
    604a:	f853 2b08 	ldr.w	r2, [r3], #8
    604e:	9308      	str	r3, [sp, #32]
    6050:	2301      	movs	r3, #1
    6052:	e782      	b.n	5f5a <_svfprintf_r+0x54a>
    6054:	f899 3000 	ldrb.w	r3, [r9]
    6058:	f048 0880 	orr.w	r8, r8, #128	; 0x80
    605c:	e534      	b.n	5ac8 <_svfprintf_r+0xb8>
    605e:	bf00      	nop
    6060:	2000062c 	.word	0x2000062c
    6064:	200003ac 	.word	0x200003ac
    6068:	20000634 	.word	0x20000634
    606c:	4649      	mov	r1, r9
    606e:	f811 3b01 	ldrb.w	r3, [r1], #1
    6072:	2b2a      	cmp	r3, #42	; 0x2a
    6074:	f001 8249 	beq.w	750a <_svfprintf_r+0x1afa>
    6078:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    607c:	2a09      	cmp	r2, #9
    607e:	4689      	mov	r9, r1
    6080:	bf98      	it	ls
    6082:	2100      	movls	r1, #0
    6084:	f201 8144 	bhi.w	7310 <_svfprintf_r+0x1900>
    6088:	f819 3b01 	ldrb.w	r3, [r9], #1
    608c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    6090:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    6094:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    6098:	2a09      	cmp	r2, #9
    609a:	d9f5      	bls.n	6088 <_svfprintf_r+0x678>
    609c:	9103      	str	r1, [sp, #12]
    609e:	e515      	b.n	5acc <_svfprintf_r+0xbc>
    60a0:	f899 3000 	ldrb.w	r3, [r9]
    60a4:	f048 0801 	orr.w	r8, r8, #1
    60a8:	e50e      	b.n	5ac8 <_svfprintf_r+0xb8>
    60aa:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
    60ae:	2b00      	cmp	r3, #0
    60b0:	f47f ad8f 	bne.w	5bd2 <_svfprintf_r+0x1c2>
    60b4:	f899 3000 	ldrb.w	r3, [r9]
    60b8:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
    60bc:	e504      	b.n	5ac8 <_svfprintf_r+0xb8>
    60be:	f8cd 8008 	str.w	r8, [sp, #8]
    60c2:	2b01      	cmp	r3, #1
    60c4:	f000 819d 	beq.w	6402 <_svfprintf_r+0x9f2>
    60c8:	2b02      	cmp	r3, #2
    60ca:	ac50      	add	r4, sp, #320	; 0x140
    60cc:	d120      	bne.n	6110 <_svfprintf_r+0x700>
    60ce:	9811      	ldr	r0, [sp, #68]	; 0x44
    60d0:	f002 030f 	and.w	r3, r2, #15
    60d4:	0912      	lsrs	r2, r2, #4
    60d6:	5cc3      	ldrb	r3, [r0, r3]
    60d8:	f804 3d01 	strb.w	r3, [r4, #-1]!
    60dc:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    60e0:	0909      	lsrs	r1, r1, #4
    60e2:	ea52 0301 	orrs.w	r3, r2, r1
    60e6:	d1f3      	bne.n	60d0 <_svfprintf_r+0x6c0>
    60e8:	ab50      	add	r3, sp, #320	; 0x140
    60ea:	1b1b      	subs	r3, r3, r4
    60ec:	f8dd 8008 	ldr.w	r8, [sp, #8]
    60f0:	9305      	str	r3, [sp, #20]
    60f2:	9a05      	ldr	r2, [sp, #20]
    60f4:	9803      	ldr	r0, [sp, #12]
    60f6:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    60fa:	4282      	cmp	r2, r0
    60fc:	f04f 0300 	mov.w	r3, #0
    6100:	bfb8      	it	lt
    6102:	4602      	movlt	r2, r0
    6104:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    6108:	9307      	str	r3, [sp, #28]
    610a:	9202      	str	r2, [sp, #8]
    610c:	930f      	str	r3, [sp, #60]	; 0x3c
    610e:	e660      	b.n	5dd2 <_svfprintf_r+0x3c2>
    6110:	f002 0307 	and.w	r3, r2, #7
    6114:	08d2      	lsrs	r2, r2, #3
    6116:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    611a:	08c9      	lsrs	r1, r1, #3
    611c:	3330      	adds	r3, #48	; 0x30
    611e:	ea52 0501 	orrs.w	r5, r2, r1
    6122:	4620      	mov	r0, r4
    6124:	f804 3d01 	strb.w	r3, [r4, #-1]!
    6128:	d1f2      	bne.n	6110 <_svfprintf_r+0x700>
    612a:	9a02      	ldr	r2, [sp, #8]
    612c:	07d1      	lsls	r1, r2, #31
    612e:	f100 824d 	bmi.w	65cc <_svfprintf_r+0xbbc>
    6132:	ab50      	add	r3, sp, #320	; 0x140
    6134:	1b1b      	subs	r3, r3, r4
    6136:	4690      	mov	r8, r2
    6138:	9305      	str	r3, [sp, #20]
    613a:	e7da      	b.n	60f2 <_svfprintf_r+0x6e2>
    613c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    613e:	2b65      	cmp	r3, #101	; 0x65
    6140:	f340 80d4 	ble.w	62ec <_svfprintf_r+0x8dc>
    6144:	eeb5 8b40 	vcmp.f64	d8, #0.0
    6148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    614c:	f040 81c1 	bne.w	64d2 <_svfprintf_r+0xac2>
    6150:	9b25      	ldr	r3, [sp, #148]	; 0x94
    6152:	49ba      	ldr	r1, [pc, #744]	; (643c <_svfprintf_r+0xa2c>)
    6154:	f8ca 1000 	str.w	r1, [sl]
    6158:	3301      	adds	r3, #1
    615a:	3201      	adds	r2, #1
    615c:	2101      	movs	r1, #1
    615e:	2b07      	cmp	r3, #7
    6160:	9226      	str	r2, [sp, #152]	; 0x98
    6162:	9325      	str	r3, [sp, #148]	; 0x94
    6164:	f8ca 1004 	str.w	r1, [sl, #4]
    6168:	f300 8551 	bgt.w	6c0e <_svfprintf_r+0x11fe>
    616c:	f10a 0a08 	add.w	sl, sl, #8
    6170:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    6172:	990e      	ldr	r1, [sp, #56]	; 0x38
    6174:	428b      	cmp	r3, r1
    6176:	f280 82d0 	bge.w	671a <_svfprintf_r+0xd0a>
    617a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    617c:	9912      	ldr	r1, [sp, #72]	; 0x48
    617e:	441a      	add	r2, r3
    6180:	e9ca 1300 	strd	r1, r3, [sl]
    6184:	9b25      	ldr	r3, [sp, #148]	; 0x94
    6186:	9226      	str	r2, [sp, #152]	; 0x98
    6188:	3301      	adds	r3, #1
    618a:	2b07      	cmp	r3, #7
    618c:	9325      	str	r3, [sp, #148]	; 0x94
    618e:	f300 8397 	bgt.w	68c0 <_svfprintf_r+0xeb0>
    6192:	f10a 0a08 	add.w	sl, sl, #8
    6196:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6198:	1e5c      	subs	r4, r3, #1
    619a:	2c00      	cmp	r4, #0
    619c:	f77f add0 	ble.w	5d40 <_svfprintf_r+0x330>
    61a0:	2c10      	cmp	r4, #16
    61a2:	9b25      	ldr	r3, [sp, #148]	; 0x94
    61a4:	f340 856e 	ble.w	6c84 <_svfprintf_r+0x1274>
    61a8:	ee1b 6a10 	vmov	r6, s22
    61ac:	2510      	movs	r5, #16
    61ae:	e005      	b.n	61bc <_svfprintf_r+0x7ac>
    61b0:	f10a 0a08 	add.w	sl, sl, #8
    61b4:	3c10      	subs	r4, #16
    61b6:	2c10      	cmp	r4, #16
    61b8:	f340 8564 	ble.w	6c84 <_svfprintf_r+0x1274>
    61bc:	3301      	adds	r3, #1
    61be:	49a0      	ldr	r1, [pc, #640]	; (6440 <_svfprintf_r+0xa30>)
    61c0:	3210      	adds	r2, #16
    61c2:	2b07      	cmp	r3, #7
    61c4:	e9ca 1500 	strd	r1, r5, [sl]
    61c8:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    61cc:	ddf0      	ble.n	61b0 <_svfprintf_r+0x7a0>
    61ce:	aa24      	add	r2, sp, #144	; 0x90
    61d0:	4631      	mov	r1, r6
    61d2:	4658      	mov	r0, fp
    61d4:	f002 fb24 	bl	8820 <__ssprint_r>
    61d8:	2800      	cmp	r0, #0
    61da:	d17e      	bne.n	62da <_svfprintf_r+0x8ca>
    61dc:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    61e0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    61e4:	e7e6      	b.n	61b4 <_svfprintf_r+0x7a4>
    61e6:	9b06      	ldr	r3, [sp, #24]
    61e8:	9902      	ldr	r1, [sp, #8]
    61ea:	1a5d      	subs	r5, r3, r1
    61ec:	2d00      	cmp	r5, #0
    61ee:	f77f ad8e 	ble.w	5d0e <_svfprintf_r+0x2fe>
    61f2:	2d10      	cmp	r5, #16
    61f4:	9b25      	ldr	r3, [sp, #148]	; 0x94
    61f6:	dd21      	ble.n	623c <_svfprintf_r+0x82c>
    61f8:	9409      	str	r4, [sp, #36]	; 0x24
    61fa:	2610      	movs	r6, #16
    61fc:	ee1b 4a10 	vmov	r4, s22
    6200:	e004      	b.n	620c <_svfprintf_r+0x7fc>
    6202:	3d10      	subs	r5, #16
    6204:	2d10      	cmp	r5, #16
    6206:	f10a 0a08 	add.w	sl, sl, #8
    620a:	dd16      	ble.n	623a <_svfprintf_r+0x82a>
    620c:	3301      	adds	r3, #1
    620e:	498c      	ldr	r1, [pc, #560]	; (6440 <_svfprintf_r+0xa30>)
    6210:	3210      	adds	r2, #16
    6212:	2b07      	cmp	r3, #7
    6214:	e9ca 1600 	strd	r1, r6, [sl]
    6218:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    621c:	ddf1      	ble.n	6202 <_svfprintf_r+0x7f2>
    621e:	aa24      	add	r2, sp, #144	; 0x90
    6220:	4621      	mov	r1, r4
    6222:	4658      	mov	r0, fp
    6224:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    6228:	f002 fafa 	bl	8820 <__ssprint_r>
    622c:	2800      	cmp	r0, #0
    622e:	d154      	bne.n	62da <_svfprintf_r+0x8ca>
    6230:	3d10      	subs	r5, #16
    6232:	2d10      	cmp	r5, #16
    6234:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    6238:	dce8      	bgt.n	620c <_svfprintf_r+0x7fc>
    623a:	9c09      	ldr	r4, [sp, #36]	; 0x24
    623c:	4980      	ldr	r1, [pc, #512]	; (6440 <_svfprintf_r+0xa30>)
    623e:	f8ca 5004 	str.w	r5, [sl, #4]
    6242:	3301      	adds	r3, #1
    6244:	442a      	add	r2, r5
    6246:	2b07      	cmp	r3, #7
    6248:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    624c:	f8ca 1000 	str.w	r1, [sl]
    6250:	f300 8526 	bgt.w	6ca0 <_svfprintf_r+0x1290>
    6254:	9b03      	ldr	r3, [sp, #12]
    6256:	9905      	ldr	r1, [sp, #20]
    6258:	1a5d      	subs	r5, r3, r1
    625a:	2d00      	cmp	r5, #0
    625c:	f10a 0a08 	add.w	sl, sl, #8
    6260:	f77f ad5b 	ble.w	5d1a <_svfprintf_r+0x30a>
    6264:	2d10      	cmp	r5, #16
    6266:	9b25      	ldr	r3, [sp, #148]	; 0x94
    6268:	dd1f      	ble.n	62aa <_svfprintf_r+0x89a>
    626a:	4651      	mov	r1, sl
    626c:	2610      	movs	r6, #16
    626e:	ee1b aa10 	vmov	sl, s22
    6272:	e004      	b.n	627e <_svfprintf_r+0x86e>
    6274:	3d10      	subs	r5, #16
    6276:	2d10      	cmp	r5, #16
    6278:	f101 0108 	add.w	r1, r1, #8
    627c:	dd14      	ble.n	62a8 <_svfprintf_r+0x898>
    627e:	3301      	adds	r3, #1
    6280:	486f      	ldr	r0, [pc, #444]	; (6440 <_svfprintf_r+0xa30>)
    6282:	3210      	adds	r2, #16
    6284:	2b07      	cmp	r3, #7
    6286:	e9c1 0600 	strd	r0, r6, [r1]
    628a:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    628e:	ddf1      	ble.n	6274 <_svfprintf_r+0x864>
    6290:	aa24      	add	r2, sp, #144	; 0x90
    6292:	4651      	mov	r1, sl
    6294:	4658      	mov	r0, fp
    6296:	f002 fac3 	bl	8820 <__ssprint_r>
    629a:	b9f0      	cbnz	r0, 62da <_svfprintf_r+0x8ca>
    629c:	3d10      	subs	r5, #16
    629e:	2d10      	cmp	r5, #16
    62a0:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    62a4:	a927      	add	r1, sp, #156	; 0x9c
    62a6:	dcea      	bgt.n	627e <_svfprintf_r+0x86e>
    62a8:	468a      	mov	sl, r1
    62aa:	3301      	adds	r3, #1
    62ac:	4964      	ldr	r1, [pc, #400]	; (6440 <_svfprintf_r+0xa30>)
    62ae:	f8ca 5004 	str.w	r5, [sl, #4]
    62b2:	442a      	add	r2, r5
    62b4:	2b07      	cmp	r3, #7
    62b6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    62ba:	f8ca 1000 	str.w	r1, [sl]
    62be:	f300 81da 	bgt.w	6676 <_svfprintf_r+0xc66>
    62c2:	f10a 0a08 	add.w	sl, sl, #8
    62c6:	e528      	b.n	5d1a <_svfprintf_r+0x30a>
    62c8:	ee1b 1a10 	vmov	r1, s22
    62cc:	aa24      	add	r2, sp, #144	; 0x90
    62ce:	4658      	mov	r0, fp
    62d0:	f002 faa6 	bl	8820 <__ssprint_r>
    62d4:	2800      	cmp	r0, #0
    62d6:	f43f ad47 	beq.w	5d68 <_svfprintf_r+0x358>
    62da:	9b07      	ldr	r3, [sp, #28]
    62dc:	2b00      	cmp	r3, #0
    62de:	f43f aca2 	beq.w	5c26 <_svfprintf_r+0x216>
    62e2:	9907      	ldr	r1, [sp, #28]
    62e4:	4658      	mov	r0, fp
    62e6:	f7fe fead 	bl	5044 <_free_r>
    62ea:	e49c      	b.n	5c26 <_svfprintf_r+0x216>
    62ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    62ee:	2b01      	cmp	r3, #1
    62f0:	f340 817a 	ble.w	65e8 <_svfprintf_r+0xbd8>
    62f4:	9b25      	ldr	r3, [sp, #148]	; 0x94
    62f6:	f8ca 4000 	str.w	r4, [sl]
    62fa:	3301      	adds	r3, #1
    62fc:	3201      	adds	r2, #1
    62fe:	2101      	movs	r1, #1
    6300:	2b07      	cmp	r3, #7
    6302:	9226      	str	r2, [sp, #152]	; 0x98
    6304:	9325      	str	r3, [sp, #148]	; 0x94
    6306:	f8ca 1004 	str.w	r1, [sl, #4]
    630a:	f300 81f8 	bgt.w	66fe <_svfprintf_r+0xcee>
    630e:	f10a 0a08 	add.w	sl, sl, #8
    6312:	9910      	ldr	r1, [sp, #64]	; 0x40
    6314:	9812      	ldr	r0, [sp, #72]	; 0x48
    6316:	3301      	adds	r3, #1
    6318:	440a      	add	r2, r1
    631a:	2b07      	cmp	r3, #7
    631c:	e9ca 0100 	strd	r0, r1, [sl]
    6320:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    6324:	f300 81dd 	bgt.w	66e2 <_svfprintf_r+0xcd2>
    6328:	f10a 0a08 	add.w	sl, sl, #8
    632c:	eeb5 8b40 	vcmp.f64	d8, #0.0
    6330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6334:	f000 8177 	beq.w	6626 <_svfprintf_r+0xc16>
    6338:	990e      	ldr	r1, [sp, #56]	; 0x38
    633a:	3301      	adds	r3, #1
    633c:	3901      	subs	r1, #1
    633e:	3401      	adds	r4, #1
    6340:	440a      	add	r2, r1
    6342:	2b07      	cmp	r3, #7
    6344:	f8ca 4000 	str.w	r4, [sl]
    6348:	9325      	str	r3, [sp, #148]	; 0x94
    634a:	f8ca 1004 	str.w	r1, [sl, #4]
    634e:	9226      	str	r2, [sp, #152]	; 0x98
    6350:	f300 815b 	bgt.w	660a <_svfprintf_r+0xbfa>
    6354:	f10a 0a08 	add.w	sl, sl, #8
    6358:	9914      	ldr	r1, [sp, #80]	; 0x50
    635a:	f8ca 1004 	str.w	r1, [sl, #4]
    635e:	3301      	adds	r3, #1
    6360:	440a      	add	r2, r1
    6362:	2b07      	cmp	r3, #7
    6364:	a91e      	add	r1, sp, #120	; 0x78
    6366:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    636a:	f8ca 1000 	str.w	r1, [sl]
    636e:	f77f ace5 	ble.w	5d3c <_svfprintf_r+0x32c>
    6372:	ee1b 1a10 	vmov	r1, s22
    6376:	aa24      	add	r2, sp, #144	; 0x90
    6378:	4658      	mov	r0, fp
    637a:	f002 fa51 	bl	8820 <__ssprint_r>
    637e:	2800      	cmp	r0, #0
    6380:	d1ab      	bne.n	62da <_svfprintf_r+0x8ca>
    6382:	9a26      	ldr	r2, [sp, #152]	; 0x98
    6384:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    6388:	e4da      	b.n	5d40 <_svfprintf_r+0x330>
    638a:	2d10      	cmp	r5, #16
    638c:	e9dd 1225 	ldrd	r1, r2, [sp, #148]	; 0x94
    6390:	4e2c      	ldr	r6, [pc, #176]	; (6444 <_svfprintf_r+0xa34>)
    6392:	dd24      	ble.n	63de <_svfprintf_r+0x9ce>
    6394:	9417      	str	r4, [sp, #92]	; 0x5c
    6396:	2310      	movs	r3, #16
    6398:	ee1b 4a10 	vmov	r4, s22
    639c:	4608      	mov	r0, r1
    639e:	e004      	b.n	63aa <_svfprintf_r+0x99a>
    63a0:	3d10      	subs	r5, #16
    63a2:	2d10      	cmp	r5, #16
    63a4:	f10a 0a08 	add.w	sl, sl, #8
    63a8:	dd17      	ble.n	63da <_svfprintf_r+0x9ca>
    63aa:	3001      	adds	r0, #1
    63ac:	3210      	adds	r2, #16
    63ae:	2807      	cmp	r0, #7
    63b0:	e9ca 6300 	strd	r6, r3, [sl]
    63b4:	e9cd 0225 	strd	r0, r2, [sp, #148]	; 0x94
    63b8:	ddf2      	ble.n	63a0 <_svfprintf_r+0x990>
    63ba:	aa24      	add	r2, sp, #144	; 0x90
    63bc:	4621      	mov	r1, r4
    63be:	4658      	mov	r0, fp
    63c0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    63c4:	f002 fa2c 	bl	8820 <__ssprint_r>
    63c8:	2800      	cmp	r0, #0
    63ca:	d186      	bne.n	62da <_svfprintf_r+0x8ca>
    63cc:	3d10      	subs	r5, #16
    63ce:	2d10      	cmp	r5, #16
    63d0:	e9dd 0225 	ldrd	r0, r2, [sp, #148]	; 0x94
    63d4:	f04f 0310 	mov.w	r3, #16
    63d8:	dce7      	bgt.n	63aa <_svfprintf_r+0x99a>
    63da:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    63dc:	4601      	mov	r1, r0
    63de:	3101      	adds	r1, #1
    63e0:	442a      	add	r2, r5
    63e2:	2907      	cmp	r1, #7
    63e4:	e9cd 1225 	strd	r1, r2, [sp, #148]	; 0x94
    63e8:	f8ca 6000 	str.w	r6, [sl]
    63ec:	f8ca 5004 	str.w	r5, [sl, #4]
    63f0:	f300 83bd 	bgt.w	6b6e <_svfprintf_r+0x115e>
    63f4:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    63f8:	f10a 0a08 	add.w	sl, sl, #8
    63fc:	e45d      	b.n	5cba <_svfprintf_r+0x2aa>
    63fe:	f8cd 8008 	str.w	r8, [sp, #8]
    6402:	2a0a      	cmp	r2, #10
    6404:	f171 0300 	sbcs.w	r3, r1, #0
    6408:	f080 8345 	bcs.w	6a96 <_svfprintf_r+0x1086>
    640c:	3230      	adds	r2, #48	; 0x30
    640e:	2301      	movs	r3, #1
    6410:	f8dd 8008 	ldr.w	r8, [sp, #8]
    6414:	f88d 213f 	strb.w	r2, [sp, #319]	; 0x13f
    6418:	9305      	str	r3, [sp, #20]
    641a:	f20d 143f 	addw	r4, sp, #319	; 0x13f
    641e:	e668      	b.n	60f2 <_svfprintf_r+0x6e2>
    6420:	ee1b 1a10 	vmov	r1, s22
    6424:	aa24      	add	r2, sp, #144	; 0x90
    6426:	4658      	mov	r0, fp
    6428:	f002 f9fa 	bl	8820 <__ssprint_r>
    642c:	2800      	cmp	r0, #0
    642e:	f47f af54 	bne.w	62da <_svfprintf_r+0x8ca>
    6432:	9a26      	ldr	r2, [sp, #152]	; 0x98
    6434:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    6438:	e452      	b.n	5ce0 <_svfprintf_r+0x2d0>
    643a:	bf00      	nop
    643c:	20000664 	.word	0x20000664
    6440:	20000e60 	.word	0x20000e60
    6444:	20000668 	.word	0x20000668
    6448:	ee1b 1a10 	vmov	r1, s22
    644c:	aa24      	add	r2, sp, #144	; 0x90
    644e:	4658      	mov	r0, fp
    6450:	f002 f9e6 	bl	8820 <__ssprint_r>
    6454:	2800      	cmp	r0, #0
    6456:	f47f af40 	bne.w	62da <_svfprintf_r+0x8ca>
    645a:	9a26      	ldr	r2, [sp, #152]	; 0x98
    645c:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    6460:	e451      	b.n	5d06 <_svfprintf_r+0x2f6>
    6462:	2c10      	cmp	r4, #16
    6464:	9b25      	ldr	r3, [sp, #148]	; 0x94
    6466:	4ebe      	ldr	r6, [pc, #760]	; (6760 <_svfprintf_r+0xd50>)
    6468:	dd1f      	ble.n	64aa <_svfprintf_r+0xa9a>
    646a:	ee1b 8a10 	vmov	r8, s22
    646e:	2510      	movs	r5, #16
    6470:	e004      	b.n	647c <_svfprintf_r+0xa6c>
    6472:	3c10      	subs	r4, #16
    6474:	2c10      	cmp	r4, #16
    6476:	f10a 0a08 	add.w	sl, sl, #8
    647a:	dd16      	ble.n	64aa <_svfprintf_r+0xa9a>
    647c:	3301      	adds	r3, #1
    647e:	3210      	adds	r2, #16
    6480:	2b07      	cmp	r3, #7
    6482:	e9ca 6500 	strd	r6, r5, [sl]
    6486:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    648a:	ddf2      	ble.n	6472 <_svfprintf_r+0xa62>
    648c:	aa24      	add	r2, sp, #144	; 0x90
    648e:	4641      	mov	r1, r8
    6490:	4658      	mov	r0, fp
    6492:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    6496:	f002 f9c3 	bl	8820 <__ssprint_r>
    649a:	2800      	cmp	r0, #0
    649c:	f47f af1d 	bne.w	62da <_svfprintf_r+0x8ca>
    64a0:	3c10      	subs	r4, #16
    64a2:	2c10      	cmp	r4, #16
    64a4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    64a8:	dce8      	bgt.n	647c <_svfprintf_r+0xa6c>
    64aa:	3301      	adds	r3, #1
    64ac:	4422      	add	r2, r4
    64ae:	2b07      	cmp	r3, #7
    64b0:	e9ca 6400 	strd	r6, r4, [sl]
    64b4:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    64b8:	f77f ac4b 	ble.w	5d52 <_svfprintf_r+0x342>
    64bc:	ee1b 1a10 	vmov	r1, s22
    64c0:	aa24      	add	r2, sp, #144	; 0x90
    64c2:	4658      	mov	r0, fp
    64c4:	f002 f9ac 	bl	8820 <__ssprint_r>
    64c8:	2800      	cmp	r0, #0
    64ca:	f47f af06 	bne.w	62da <_svfprintf_r+0x8ca>
    64ce:	9a26      	ldr	r2, [sp, #152]	; 0x98
    64d0:	e43f      	b.n	5d52 <_svfprintf_r+0x342>
    64d2:	991b      	ldr	r1, [sp, #108]	; 0x6c
    64d4:	2900      	cmp	r1, #0
    64d6:	f340 835a 	ble.w	6b8e <_svfprintf_r+0x117e>
    64da:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    64dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    64de:	429e      	cmp	r6, r3
    64e0:	bfa8      	it	ge
    64e2:	461e      	movge	r6, r3
    64e4:	2e00      	cmp	r6, #0
    64e6:	dd0b      	ble.n	6500 <_svfprintf_r+0xaf0>
    64e8:	9b25      	ldr	r3, [sp, #148]	; 0x94
    64ea:	3301      	adds	r3, #1
    64ec:	4432      	add	r2, r6
    64ee:	2b07      	cmp	r3, #7
    64f0:	e9ca 4600 	strd	r4, r6, [sl]
    64f4:	9226      	str	r2, [sp, #152]	; 0x98
    64f6:	9325      	str	r3, [sp, #148]	; 0x94
    64f8:	f300 8689 	bgt.w	720e <_svfprintf_r+0x17fe>
    64fc:	f10a 0a08 	add.w	sl, sl, #8
    6500:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    6502:	2e00      	cmp	r6, #0
    6504:	bfa8      	it	ge
    6506:	1bad      	subge	r5, r5, r6
    6508:	2d00      	cmp	r5, #0
    650a:	f300 8203 	bgt.w	6914 <_svfprintf_r+0xf04>
    650e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6510:	f418 6f80 	tst.w	r8, #1024	; 0x400
    6514:	4423      	add	r3, r4
    6516:	9305      	str	r3, [sp, #20]
    6518:	f040 821f 	bne.w	695a <_svfprintf_r+0xf4a>
    651c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    651e:	990e      	ldr	r1, [sp, #56]	; 0x38
    6520:	428b      	cmp	r3, r1
    6522:	db03      	blt.n	652c <_svfprintf_r+0xb1c>
    6524:	f018 0f01 	tst.w	r8, #1
    6528:	f000 84cf 	beq.w	6eca <_svfprintf_r+0x14ba>
    652c:	9910      	ldr	r1, [sp, #64]	; 0x40
    652e:	9812      	ldr	r0, [sp, #72]	; 0x48
    6530:	440a      	add	r2, r1
    6532:	e9ca 0100 	strd	r0, r1, [sl]
    6536:	9925      	ldr	r1, [sp, #148]	; 0x94
    6538:	9226      	str	r2, [sp, #152]	; 0x98
    653a:	3101      	adds	r1, #1
    653c:	2907      	cmp	r1, #7
    653e:	9125      	str	r1, [sp, #148]	; 0x94
    6540:	f300 86a5 	bgt.w	728e <_svfprintf_r+0x187e>
    6544:	f10a 0a08 	add.w	sl, sl, #8
    6548:	990e      	ldr	r1, [sp, #56]	; 0x38
    654a:	1865      	adds	r5, r4, r1
    654c:	1acc      	subs	r4, r1, r3
    654e:	9b05      	ldr	r3, [sp, #20]
    6550:	1aed      	subs	r5, r5, r3
    6552:	42a5      	cmp	r5, r4
    6554:	bfa8      	it	ge
    6556:	4625      	movge	r5, r4
    6558:	2d00      	cmp	r5, #0
    655a:	dd0d      	ble.n	6578 <_svfprintf_r+0xb68>
    655c:	f8ca 3000 	str.w	r3, [sl]
    6560:	9b25      	ldr	r3, [sp, #148]	; 0x94
    6562:	f8ca 5004 	str.w	r5, [sl, #4]
    6566:	3301      	adds	r3, #1
    6568:	442a      	add	r2, r5
    656a:	2b07      	cmp	r3, #7
    656c:	9226      	str	r2, [sp, #152]	; 0x98
    656e:	9325      	str	r3, [sp, #148]	; 0x94
    6570:	f300 86bb 	bgt.w	72ea <_svfprintf_r+0x18da>
    6574:	f10a 0a08 	add.w	sl, sl, #8
    6578:	2d00      	cmp	r5, #0
    657a:	bfa8      	it	ge
    657c:	1b64      	subge	r4, r4, r5
    657e:	2c00      	cmp	r4, #0
    6580:	f77f abde 	ble.w	5d40 <_svfprintf_r+0x330>
    6584:	2c10      	cmp	r4, #16
    6586:	9b25      	ldr	r3, [sp, #148]	; 0x94
    6588:	f340 837c 	ble.w	6c84 <_svfprintf_r+0x1274>
    658c:	ee1b 6a10 	vmov	r6, s22
    6590:	2510      	movs	r5, #16
    6592:	e005      	b.n	65a0 <_svfprintf_r+0xb90>
    6594:	f10a 0a08 	add.w	sl, sl, #8
    6598:	3c10      	subs	r4, #16
    659a:	2c10      	cmp	r4, #16
    659c:	f340 8372 	ble.w	6c84 <_svfprintf_r+0x1274>
    65a0:	3301      	adds	r3, #1
    65a2:	4970      	ldr	r1, [pc, #448]	; (6764 <_svfprintf_r+0xd54>)
    65a4:	3210      	adds	r2, #16
    65a6:	2b07      	cmp	r3, #7
    65a8:	e9ca 1500 	strd	r1, r5, [sl]
    65ac:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    65b0:	ddf0      	ble.n	6594 <_svfprintf_r+0xb84>
    65b2:	aa24      	add	r2, sp, #144	; 0x90
    65b4:	4631      	mov	r1, r6
    65b6:	4658      	mov	r0, fp
    65b8:	f002 f932 	bl	8820 <__ssprint_r>
    65bc:	2800      	cmp	r0, #0
    65be:	f47f ae8c 	bne.w	62da <_svfprintf_r+0x8ca>
    65c2:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    65c6:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    65ca:	e7e5      	b.n	6598 <_svfprintf_r+0xb88>
    65cc:	2b30      	cmp	r3, #48	; 0x30
    65ce:	f43f ad8b 	beq.w	60e8 <_svfprintf_r+0x6d8>
    65d2:	2330      	movs	r3, #48	; 0x30
    65d4:	3802      	subs	r0, #2
    65d6:	f804 3c01 	strb.w	r3, [r4, #-1]
    65da:	ab50      	add	r3, sp, #320	; 0x140
    65dc:	1a1b      	subs	r3, r3, r0
    65de:	f8dd 8008 	ldr.w	r8, [sp, #8]
    65e2:	9305      	str	r3, [sp, #20]
    65e4:	4604      	mov	r4, r0
    65e6:	e584      	b.n	60f2 <_svfprintf_r+0x6e2>
    65e8:	f018 0f01 	tst.w	r8, #1
    65ec:	f47f ae82 	bne.w	62f4 <_svfprintf_r+0x8e4>
    65f0:	9b25      	ldr	r3, [sp, #148]	; 0x94
    65f2:	f8ca 4000 	str.w	r4, [sl]
    65f6:	3301      	adds	r3, #1
    65f8:	3201      	adds	r2, #1
    65fa:	2101      	movs	r1, #1
    65fc:	2b07      	cmp	r3, #7
    65fe:	9226      	str	r2, [sp, #152]	; 0x98
    6600:	9325      	str	r3, [sp, #148]	; 0x94
    6602:	f8ca 1004 	str.w	r1, [sl, #4]
    6606:	f77f aea5 	ble.w	6354 <_svfprintf_r+0x944>
    660a:	ee1b 1a10 	vmov	r1, s22
    660e:	aa24      	add	r2, sp, #144	; 0x90
    6610:	4658      	mov	r0, fp
    6612:	f002 f905 	bl	8820 <__ssprint_r>
    6616:	2800      	cmp	r0, #0
    6618:	f47f ae5f 	bne.w	62da <_svfprintf_r+0x8ca>
    661c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    6620:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    6624:	e698      	b.n	6358 <_svfprintf_r+0x948>
    6626:	990e      	ldr	r1, [sp, #56]	; 0x38
    6628:	1e4c      	subs	r4, r1, #1
    662a:	2c00      	cmp	r4, #0
    662c:	f77f ae94 	ble.w	6358 <_svfprintf_r+0x948>
    6630:	2c10      	cmp	r4, #16
    6632:	f340 8361 	ble.w	6cf8 <_svfprintf_r+0x12e8>
    6636:	ee1b 6a10 	vmov	r6, s22
    663a:	2510      	movs	r5, #16
    663c:	e005      	b.n	664a <_svfprintf_r+0xc3a>
    663e:	f10a 0a08 	add.w	sl, sl, #8
    6642:	3c10      	subs	r4, #16
    6644:	2c10      	cmp	r4, #16
    6646:	f340 8357 	ble.w	6cf8 <_svfprintf_r+0x12e8>
    664a:	3301      	adds	r3, #1
    664c:	4945      	ldr	r1, [pc, #276]	; (6764 <_svfprintf_r+0xd54>)
    664e:	3210      	adds	r2, #16
    6650:	2b07      	cmp	r3, #7
    6652:	e9ca 1500 	strd	r1, r5, [sl]
    6656:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    665a:	ddf0      	ble.n	663e <_svfprintf_r+0xc2e>
    665c:	aa24      	add	r2, sp, #144	; 0x90
    665e:	4631      	mov	r1, r6
    6660:	4658      	mov	r0, fp
    6662:	f002 f8dd 	bl	8820 <__ssprint_r>
    6666:	2800      	cmp	r0, #0
    6668:	f47f ae37 	bne.w	62da <_svfprintf_r+0x8ca>
    666c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    6670:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    6674:	e7e5      	b.n	6642 <_svfprintf_r+0xc32>
    6676:	ee1b 1a10 	vmov	r1, s22
    667a:	aa24      	add	r2, sp, #144	; 0x90
    667c:	4658      	mov	r0, fp
    667e:	f002 f8cf 	bl	8820 <__ssprint_r>
    6682:	2800      	cmp	r0, #0
    6684:	f47f ae29 	bne.w	62da <_svfprintf_r+0x8ca>
    6688:	9a26      	ldr	r2, [sp, #152]	; 0x98
    668a:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    668e:	f7ff bb44 	b.w	5d1a <_svfprintf_r+0x30a>
    6692:	9b02      	ldr	r3, [sp, #8]
    6694:	f013 0310 	ands.w	r3, r3, #16
    6698:	f040 80c1 	bne.w	681e <_svfprintf_r+0xe0e>
    669c:	9a02      	ldr	r2, [sp, #8]
    669e:	f012 0240 	ands.w	r2, r2, #64	; 0x40
    66a2:	f000 837a 	beq.w	6d9a <_svfprintf_r+0x138a>
    66a6:	9808      	ldr	r0, [sp, #32]
    66a8:	f850 2b04 	ldr.w	r2, [r0], #4
    66ac:	9008      	str	r0, [sp, #32]
    66ae:	4619      	mov	r1, r3
    66b0:	b292      	uxth	r2, r2
    66b2:	2301      	movs	r3, #1
    66b4:	e451      	b.n	5f5a <_svfprintf_r+0x54a>
    66b6:	f018 0310 	ands.w	r3, r8, #16
    66ba:	d155      	bne.n	6768 <_svfprintf_r+0xd58>
    66bc:	f018 0240 	ands.w	r2, r8, #64	; 0x40
    66c0:	f000 835d 	beq.w	6d7e <_svfprintf_r+0x136e>
    66c4:	9808      	ldr	r0, [sp, #32]
    66c6:	f850 2b04 	ldr.w	r2, [r0], #4
    66ca:	9008      	str	r0, [sp, #32]
    66cc:	4619      	mov	r1, r3
    66ce:	b292      	uxth	r2, r2
    66d0:	e4a8      	b.n	6024 <_svfprintf_r+0x614>
    66d2:	4252      	negs	r2, r2
    66d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    66d8:	f8cd 8008 	str.w	r8, [sp, #8]
    66dc:	202d      	movs	r0, #45	; 0x2d
    66de:	2301      	movs	r3, #1
    66e0:	e43c      	b.n	5f5c <_svfprintf_r+0x54c>
    66e2:	ee1b 1a10 	vmov	r1, s22
    66e6:	aa24      	add	r2, sp, #144	; 0x90
    66e8:	4658      	mov	r0, fp
    66ea:	f002 f899 	bl	8820 <__ssprint_r>
    66ee:	2800      	cmp	r0, #0
    66f0:	f47f adf3 	bne.w	62da <_svfprintf_r+0x8ca>
    66f4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    66f8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    66fc:	e616      	b.n	632c <_svfprintf_r+0x91c>
    66fe:	ee1b 1a10 	vmov	r1, s22
    6702:	aa24      	add	r2, sp, #144	; 0x90
    6704:	4658      	mov	r0, fp
    6706:	f002 f88b 	bl	8820 <__ssprint_r>
    670a:	2800      	cmp	r0, #0
    670c:	f47f ade5 	bne.w	62da <_svfprintf_r+0x8ca>
    6710:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    6714:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    6718:	e5fb      	b.n	6312 <_svfprintf_r+0x902>
    671a:	f018 0f01 	tst.w	r8, #1
    671e:	f43f ab0f 	beq.w	5d40 <_svfprintf_r+0x330>
    6722:	e52a      	b.n	617a <_svfprintf_r+0x76a>
    6724:	9308      	str	r3, [sp, #32]
    6726:	f899 3000 	ldrb.w	r3, [r9]
    672a:	f7ff b9cd 	b.w	5ac8 <_svfprintf_r+0xb8>
    672e:	ac50      	add	r4, sp, #320	; 0x140
    6730:	e4df      	b.n	60f2 <_svfprintf_r+0x6e2>
    6732:	f418 7f00 	tst.w	r8, #512	; 0x200
    6736:	f040 83db 	bne.w	6ef0 <_svfprintf_r+0x14e0>
    673a:	f853 2b04 	ldr.w	r2, [r3], #4
    673e:	9308      	str	r3, [sp, #32]
    6740:	17d1      	asrs	r1, r2, #31
    6742:	460b      	mov	r3, r1
    6744:	f7ff bbb6 	b.w	5eb4 <_svfprintf_r+0x4a4>
    6748:	9b08      	ldr	r3, [sp, #32]
    674a:	9804      	ldr	r0, [sp, #16]
    674c:	f853 1b04 	ldr.w	r1, [r3], #4
    6750:	9308      	str	r3, [sp, #32]
    6752:	17c2      	asrs	r2, r0, #31
    6754:	e9c1 0200 	strd	r0, r2, [r1]
    6758:	464c      	mov	r4, r9
    675a:	f7ff b98b 	b.w	5a74 <_svfprintf_r+0x64>
    675e:	bf00      	nop
    6760:	20000668 	.word	0x20000668
    6764:	20000e60 	.word	0x20000e60
    6768:	9b08      	ldr	r3, [sp, #32]
    676a:	f853 2b04 	ldr.w	r2, [r3], #4
    676e:	9308      	str	r3, [sp, #32]
    6770:	e458      	b.n	6024 <_svfprintf_r+0x614>
    6772:	eeb4 8b48 	vcmp.f64	d8, d8
    6776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    677a:	f180 8694 	bvs.w	74a6 <_svfprintf_r+0x1a96>
    677e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6780:	2b61      	cmp	r3, #97	; 0x61
    6782:	f000 8552 	beq.w	722a <_svfprintf_r+0x181a>
    6786:	2b41      	cmp	r3, #65	; 0x41
    6788:	f000 85c0 	beq.w	730c <_svfprintf_r+0x18fc>
    678c:	9b03      	ldr	r3, [sp, #12]
    678e:	3301      	adds	r3, #1
    6790:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6792:	f023 0520 	bic.w	r5, r3, #32
    6796:	f000 8480 	beq.w	709a <_svfprintf_r+0x168a>
    679a:	2d47      	cmp	r5, #71	; 0x47
    679c:	d104      	bne.n	67a8 <_svfprintf_r+0xd98>
    679e:	9b03      	ldr	r3, [sp, #12]
    67a0:	2b00      	cmp	r3, #0
    67a2:	bf08      	it	eq
    67a4:	2301      	moveq	r3, #1
    67a6:	9303      	str	r3, [sp, #12]
    67a8:	ee18 3a90 	vmov	r3, s17
    67ac:	2b00      	cmp	r3, #0
    67ae:	f448 7280 	orr.w	r2, r8, #256	; 0x100
    67b2:	4646      	mov	r6, r8
    67b4:	f2c0 8618 	blt.w	73e8 <_svfprintf_r+0x19d8>
    67b8:	eeb0 ab48 	vmov.f64	d10, d8
    67bc:	2300      	movs	r3, #0
    67be:	4690      	mov	r8, r2
    67c0:	9309      	str	r3, [sp, #36]	; 0x24
    67c2:	9307      	str	r3, [sp, #28]
    67c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    67c6:	3b41      	subs	r3, #65	; 0x41
    67c8:	2b25      	cmp	r3, #37	; 0x25
    67ca:	f200 8398 	bhi.w	6efe <_svfprintf_r+0x14ee>
    67ce:	e8df f013 	tbh	[pc, r3, lsl #1]
    67d2:	046f      	.short	0x046f
    67d4:	03960396 	.word	0x03960396
    67d8:	04680396 	.word	0x04680396
    67dc:	0396046c 	.word	0x0396046c
    67e0:	03960396 	.word	0x03960396
    67e4:	03960396 	.word	0x03960396
    67e8:	03960396 	.word	0x03960396
    67ec:	03960396 	.word	0x03960396
    67f0:	03960396 	.word	0x03960396
    67f4:	03960396 	.word	0x03960396
    67f8:	03960396 	.word	0x03960396
    67fc:	03960396 	.word	0x03960396
    6800:	03960396 	.word	0x03960396
    6804:	03960396 	.word	0x03960396
    6808:	03960396 	.word	0x03960396
    680c:	03960396 	.word	0x03960396
    6810:	03960396 	.word	0x03960396
    6814:	03960396 	.word	0x03960396
    6818:	04680396 	.word	0x04680396
    681c:	046c      	.short	0x046c
    681e:	9b08      	ldr	r3, [sp, #32]
    6820:	f853 2b04 	ldr.w	r2, [r3], #4
    6824:	9308      	str	r3, [sp, #32]
    6826:	2301      	movs	r3, #1
    6828:	f7ff bb97 	b.w	5f5a <_svfprintf_r+0x54a>
    682c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    682e:	2b00      	cmp	r3, #0
    6830:	f43f a9cf 	beq.w	5bd2 <_svfprintf_r+0x1c2>
    6834:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    6836:	781b      	ldrb	r3, [r3, #0]
    6838:	2b00      	cmp	r3, #0
    683a:	f43f a9ca 	beq.w	5bd2 <_svfprintf_r+0x1c2>
    683e:	f899 3000 	ldrb.w	r3, [r9]
    6842:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
    6846:	f7ff b93f 	b.w	5ac8 <_svfprintf_r+0xb8>
    684a:	930b      	str	r3, [sp, #44]	; 0x2c
    684c:	f8cd 8008 	str.w	r8, [sp, #8]
    6850:	f7ff bbf1 	b.w	6036 <_svfprintf_r+0x626>
    6854:	930b      	str	r3, [sp, #44]	; 0x2c
    6856:	4b9a      	ldr	r3, [pc, #616]	; (6ac0 <_svfprintf_r+0x10b0>)
    6858:	9311      	str	r3, [sp, #68]	; 0x44
    685a:	f018 0120 	ands.w	r1, r8, #32
    685e:	f000 8105 	beq.w	6a6c <_svfprintf_r+0x105c>
    6862:	9b08      	ldr	r3, [sp, #32]
    6864:	3307      	adds	r3, #7
    6866:	f023 0307 	bic.w	r3, r3, #7
    686a:	6859      	ldr	r1, [r3, #4]
    686c:	f853 2b08 	ldr.w	r2, [r3], #8
    6870:	9308      	str	r3, [sp, #32]
    6872:	f018 0f01 	tst.w	r8, #1
    6876:	d00a      	beq.n	688e <_svfprintf_r+0xe7e>
    6878:	ea52 0301 	orrs.w	r3, r2, r1
    687c:	d007      	beq.n	688e <_svfprintf_r+0xe7e>
    687e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6880:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    6884:	2330      	movs	r3, #48	; 0x30
    6886:	f048 0802 	orr.w	r8, r8, #2
    688a:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    688e:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
    6892:	9302      	str	r3, [sp, #8]
    6894:	2302      	movs	r3, #2
    6896:	f7ff bb60 	b.w	5f5a <_svfprintf_r+0x54a>
    689a:	930b      	str	r3, [sp, #44]	; 0x2c
    689c:	f7ff bbb6 	b.w	600c <_svfprintf_r+0x5fc>
    68a0:	930b      	str	r3, [sp, #44]	; 0x2c
    68a2:	4b88      	ldr	r3, [pc, #544]	; (6ac4 <_svfprintf_r+0x10b4>)
    68a4:	9311      	str	r3, [sp, #68]	; 0x44
    68a6:	e7d8      	b.n	685a <_svfprintf_r+0xe4a>
    68a8:	9b08      	ldr	r3, [sp, #32]
    68aa:	2101      	movs	r1, #1
    68ac:	f853 2b04 	ldr.w	r2, [r3], #4
    68b0:	9102      	str	r1, [sp, #8]
    68b2:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
    68b6:	9308      	str	r3, [sp, #32]
    68b8:	9105      	str	r1, [sp, #20]
    68ba:	ac37      	add	r4, sp, #220	; 0xdc
    68bc:	f7ff baaf 	b.w	5e1e <_svfprintf_r+0x40e>
    68c0:	ee1b 1a10 	vmov	r1, s22
    68c4:	aa24      	add	r2, sp, #144	; 0x90
    68c6:	4658      	mov	r0, fp
    68c8:	f001 ffaa 	bl	8820 <__ssprint_r>
    68cc:	2800      	cmp	r0, #0
    68ce:	f47f ad04 	bne.w	62da <_svfprintf_r+0x8ca>
    68d2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    68d4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    68d8:	e45d      	b.n	6196 <_svfprintf_r+0x786>
    68da:	9b03      	ldr	r3, [sp, #12]
    68dc:	9407      	str	r4, [sp, #28]
    68de:	2b06      	cmp	r3, #6
    68e0:	4622      	mov	r2, r4
    68e2:	bf28      	it	cs
    68e4:	2306      	movcs	r3, #6
    68e6:	9403      	str	r4, [sp, #12]
    68e8:	4621      	mov	r1, r4
    68ea:	e9cd 220c 	strd	r2, r2, [sp, #48]	; 0x30
    68ee:	4c76      	ldr	r4, [pc, #472]	; (6ac8 <_svfprintf_r+0x10b8>)
    68f0:	9302      	str	r3, [sp, #8]
    68f2:	9305      	str	r3, [sp, #20]
    68f4:	920f      	str	r2, [sp, #60]	; 0x3c
    68f6:	f7ff ba6c 	b.w	5dd2 <_svfprintf_r+0x3c2>
    68fa:	2140      	movs	r1, #64	; 0x40
    68fc:	4658      	mov	r0, fp
    68fe:	f7fd f837 	bl	3970 <_malloc_r>
    6902:	6020      	str	r0, [r4, #0]
    6904:	6120      	str	r0, [r4, #16]
    6906:	2800      	cmp	r0, #0
    6908:	f000 860f 	beq.w	752a <_svfprintf_r+0x1b1a>
    690c:	2340      	movs	r3, #64	; 0x40
    690e:	6163      	str	r3, [r4, #20]
    6910:	f7ff b89e 	b.w	5a50 <_svfprintf_r+0x40>
    6914:	2d10      	cmp	r5, #16
    6916:	9b25      	ldr	r3, [sp, #148]	; 0x94
    6918:	f340 825d 	ble.w	6dd6 <_svfprintf_r+0x13c6>
    691c:	4651      	mov	r1, sl
    691e:	2610      	movs	r6, #16
    6920:	ee1b aa10 	vmov	sl, s22
    6924:	e004      	b.n	6930 <_svfprintf_r+0xf20>
    6926:	3108      	adds	r1, #8
    6928:	3d10      	subs	r5, #16
    692a:	2d10      	cmp	r5, #16
    692c:	f340 8252 	ble.w	6dd4 <_svfprintf_r+0x13c4>
    6930:	3301      	adds	r3, #1
    6932:	4866      	ldr	r0, [pc, #408]	; (6acc <_svfprintf_r+0x10bc>)
    6934:	3210      	adds	r2, #16
    6936:	2b07      	cmp	r3, #7
    6938:	e9c1 0600 	strd	r0, r6, [r1]
    693c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    6940:	ddf1      	ble.n	6926 <_svfprintf_r+0xf16>
    6942:	aa24      	add	r2, sp, #144	; 0x90
    6944:	4651      	mov	r1, sl
    6946:	4658      	mov	r0, fp
    6948:	f001 ff6a 	bl	8820 <__ssprint_r>
    694c:	2800      	cmp	r0, #0
    694e:	f47f acc4 	bne.w	62da <_svfprintf_r+0x8ca>
    6952:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    6956:	a927      	add	r1, sp, #156	; 0x9c
    6958:	e7e6      	b.n	6928 <_svfprintf_r+0xf18>
    695a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    695c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    6960:	18e3      	adds	r3, r4, r3
    6962:	9303      	str	r3, [sp, #12]
    6964:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    6966:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    696a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    696c:	9d05      	ldr	r5, [sp, #20]
    696e:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
    6972:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
    6976:	940b      	str	r4, [sp, #44]	; 0x2c
    6978:	ee1b 1a10 	vmov	r1, s22
    697c:	4650      	mov	r0, sl
    697e:	2b00      	cmp	r3, #0
    6980:	d034      	beq.n	69ec <_svfprintf_r+0xfdc>
    6982:	f1b8 0f00 	cmp.w	r8, #0
    6986:	d135      	bne.n	69f4 <_svfprintf_r+0xfe4>
    6988:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    698a:	3b01      	subs	r3, #1
    698c:	3e01      	subs	r6, #1
    698e:	930d      	str	r3, [sp, #52]	; 0x34
    6990:	9b15      	ldr	r3, [sp, #84]	; 0x54
    6992:	e9c0 3900 	strd	r3, r9, [r0]
    6996:	9b25      	ldr	r3, [sp, #148]	; 0x94
    6998:	3301      	adds	r3, #1
    699a:	444a      	add	r2, r9
    699c:	2b07      	cmp	r3, #7
    699e:	9226      	str	r2, [sp, #152]	; 0x98
    69a0:	9325      	str	r3, [sp, #148]	; 0x94
    69a2:	dc6c      	bgt.n	6a7e <_svfprintf_r+0x106e>
    69a4:	3008      	adds	r0, #8
    69a6:	9b03      	ldr	r3, [sp, #12]
    69a8:	f896 c000 	ldrb.w	ip, [r6]
    69ac:	1b5b      	subs	r3, r3, r5
    69ae:	4563      	cmp	r3, ip
    69b0:	bfa8      	it	ge
    69b2:	4663      	movge	r3, ip
    69b4:	2b00      	cmp	r3, #0
    69b6:	469a      	mov	sl, r3
    69b8:	dd0c      	ble.n	69d4 <_svfprintf_r+0xfc4>
    69ba:	9c25      	ldr	r4, [sp, #148]	; 0x94
    69bc:	3401      	adds	r4, #1
    69be:	441a      	add	r2, r3
    69c0:	2c07      	cmp	r4, #7
    69c2:	e9c0 5300 	strd	r5, r3, [r0]
    69c6:	9226      	str	r2, [sp, #152]	; 0x98
    69c8:	9425      	str	r4, [sp, #148]	; 0x94
    69ca:	f300 8177 	bgt.w	6cbc <_svfprintf_r+0x12ac>
    69ce:	f896 c000 	ldrb.w	ip, [r6]
    69d2:	3008      	adds	r0, #8
    69d4:	f1ba 0f00 	cmp.w	sl, #0
    69d8:	bfac      	ite	ge
    69da:	ebac 040a 	subge.w	r4, ip, sl
    69de:	4664      	movlt	r4, ip
    69e0:	2c00      	cmp	r4, #0
    69e2:	dc0a      	bgt.n	69fa <_svfprintf_r+0xfea>
    69e4:	4465      	add	r5, ip
    69e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    69e8:	2b00      	cmp	r3, #0
    69ea:	d1ca      	bne.n	6982 <_svfprintf_r+0xf72>
    69ec:	f1b8 0f00 	cmp.w	r8, #0
    69f0:	f000 83ac 	beq.w	714c <_svfprintf_r+0x173c>
    69f4:	f108 38ff 	add.w	r8, r8, #4294967295
    69f8:	e7ca      	b.n	6990 <_svfprintf_r+0xf80>
    69fa:	2c10      	cmp	r4, #16
    69fc:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
    6a00:	dd24      	ble.n	6a4c <_svfprintf_r+0x103c>
    6a02:	9505      	str	r5, [sp, #20]
    6a04:	f04f 0a10 	mov.w	sl, #16
    6a08:	4663      	mov	r3, ip
    6a0a:	460d      	mov	r5, r1
    6a0c:	e004      	b.n	6a18 <_svfprintf_r+0x1008>
    6a0e:	3c10      	subs	r4, #16
    6a10:	2c10      	cmp	r4, #16
    6a12:	f100 0008 	add.w	r0, r0, #8
    6a16:	dd16      	ble.n	6a46 <_svfprintf_r+0x1036>
    6a18:	3301      	adds	r3, #1
    6a1a:	492c      	ldr	r1, [pc, #176]	; (6acc <_svfprintf_r+0x10bc>)
    6a1c:	3210      	adds	r2, #16
    6a1e:	2b07      	cmp	r3, #7
    6a20:	e9c0 1a00 	strd	r1, sl, [r0]
    6a24:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    6a28:	ddf1      	ble.n	6a0e <_svfprintf_r+0xffe>
    6a2a:	aa24      	add	r2, sp, #144	; 0x90
    6a2c:	4629      	mov	r1, r5
    6a2e:	4658      	mov	r0, fp
    6a30:	f001 fef6 	bl	8820 <__ssprint_r>
    6a34:	2800      	cmp	r0, #0
    6a36:	f47f ac50 	bne.w	62da <_svfprintf_r+0x8ca>
    6a3a:	3c10      	subs	r4, #16
    6a3c:	2c10      	cmp	r4, #16
    6a3e:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    6a42:	a827      	add	r0, sp, #156	; 0x9c
    6a44:	dce8      	bgt.n	6a18 <_svfprintf_r+0x1008>
    6a46:	4629      	mov	r1, r5
    6a48:	9d05      	ldr	r5, [sp, #20]
    6a4a:	469c      	mov	ip, r3
    6a4c:	f10c 0301 	add.w	r3, ip, #1
    6a50:	4422      	add	r2, r4
    6a52:	6044      	str	r4, [r0, #4]
    6a54:	2b07      	cmp	r3, #7
    6a56:	4c1d      	ldr	r4, [pc, #116]	; (6acc <_svfprintf_r+0x10bc>)
    6a58:	6004      	str	r4, [r0, #0]
    6a5a:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    6a5e:	f300 83c6 	bgt.w	71ee <_svfprintf_r+0x17de>
    6a62:	f896 c000 	ldrb.w	ip, [r6]
    6a66:	3008      	adds	r0, #8
    6a68:	4465      	add	r5, ip
    6a6a:	e7bc      	b.n	69e6 <_svfprintf_r+0xfd6>
    6a6c:	f018 0310 	ands.w	r3, r8, #16
    6a70:	f000 80c2 	beq.w	6bf8 <_svfprintf_r+0x11e8>
    6a74:	9b08      	ldr	r3, [sp, #32]
    6a76:	f853 2b04 	ldr.w	r2, [r3], #4
    6a7a:	9308      	str	r3, [sp, #32]
    6a7c:	e6f9      	b.n	6872 <_svfprintf_r+0xe62>
    6a7e:	aa24      	add	r2, sp, #144	; 0x90
    6a80:	4658      	mov	r0, fp
    6a82:	9105      	str	r1, [sp, #20]
    6a84:	f001 fecc 	bl	8820 <__ssprint_r>
    6a88:	2800      	cmp	r0, #0
    6a8a:	f47f ac26 	bne.w	62da <_svfprintf_r+0x8ca>
    6a8e:	9a26      	ldr	r2, [sp, #152]	; 0x98
    6a90:	9905      	ldr	r1, [sp, #20]
    6a92:	a827      	add	r0, sp, #156	; 0x9c
    6a94:	e787      	b.n	69a6 <_svfprintf_r+0xf96>
    6a96:	9802      	ldr	r0, [sp, #8]
    6a98:	f8cd a01c 	str.w	sl, [sp, #28]
    6a9c:	ac50      	add	r4, sp, #320	; 0x140
    6a9e:	f400 6080 	and.w	r0, r0, #1024	; 0x400
    6aa2:	2500      	movs	r5, #0
    6aa4:	ee0a ba10 	vmov	s20, fp
    6aa8:	4b09      	ldr	r3, [pc, #36]	; (6ad0 <_svfprintf_r+0x10c0>)
    6aaa:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
    6aae:	f8cd 9014 	str.w	r9, [sp, #20]
    6ab2:	46a3      	mov	fp, r4
    6ab4:	f04f 0805 	mov.w	r8, #5
    6ab8:	46ac      	mov	ip, r5
    6aba:	4604      	mov	r4, r0
    6abc:	e010      	b.n	6ae0 <_svfprintf_r+0x10d0>
    6abe:	bf00      	nop
    6ac0:	20000634 	.word	0x20000634
    6ac4:	20000648 	.word	0x20000648
    6ac8:	2000065c 	.word	0x2000065c
    6acc:	20000e60 	.word	0x20000e60
    6ad0:	cccccccd 	.word	0xcccccccd
    6ad4:	2a0a      	cmp	r2, #10
    6ad6:	f171 0100 	sbcs.w	r1, r1, #0
    6ada:	d336      	bcc.n	6b4a <_svfprintf_r+0x113a>
    6adc:	464a      	mov	r2, r9
    6ade:	4631      	mov	r1, r6
    6ae0:	1850      	adds	r0, r2, r1
    6ae2:	f140 0000 	adc.w	r0, r0, #0
    6ae6:	fba3 5600 	umull	r5, r6, r3, r0
    6aea:	f026 0503 	bic.w	r5, r6, #3
    6aee:	eb05 0596 	add.w	r5, r5, r6, lsr #2
    6af2:	1b40      	subs	r0, r0, r5
    6af4:	1a15      	subs	r5, r2, r0
    6af6:	f04f 36cc 	mov.w	r6, #3435973836	; 0xcccccccc
    6afa:	f161 0e00 	sbc.w	lr, r1, #0
    6afe:	fb06 f605 	mul.w	r6, r6, r5
    6b02:	fba5 9503 	umull	r9, r5, r5, r3
    6b06:	fb03 660e 	mla	r6, r3, lr, r6
    6b0a:	f009 0e01 	and.w	lr, r9, #1
    6b0e:	442e      	add	r6, r5
    6b10:	fbae 5e08 	umull	r5, lr, lr, r8
    6b14:	182d      	adds	r5, r5, r0
    6b16:	ea4f 0959 	mov.w	r9, r9, lsr #1
    6b1a:	3530      	adds	r5, #48	; 0x30
    6b1c:	f80b 5c01 	strb.w	r5, [fp, #-1]
    6b20:	ea49 79c6 	orr.w	r9, r9, r6, lsl #31
    6b24:	f10c 0c01 	add.w	ip, ip, #1
    6b28:	f10b 3bff 	add.w	fp, fp, #4294967295
    6b2c:	0876      	lsrs	r6, r6, #1
    6b2e:	2c00      	cmp	r4, #0
    6b30:	d0d0      	beq.n	6ad4 <_svfprintf_r+0x10c4>
    6b32:	f89a 0000 	ldrb.w	r0, [sl]
    6b36:	4584      	cmp	ip, r0
    6b38:	d1cc      	bne.n	6ad4 <_svfprintf_r+0x10c4>
    6b3a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    6b3e:	d0c9      	beq.n	6ad4 <_svfprintf_r+0x10c4>
    6b40:	2a0a      	cmp	r2, #10
    6b42:	f171 0100 	sbcs.w	r1, r1, #0
    6b46:	f080 818f 	bcs.w	6e68 <_svfprintf_r+0x1458>
    6b4a:	465c      	mov	r4, fp
    6b4c:	ab50      	add	r3, sp, #320	; 0x140
    6b4e:	1b1b      	subs	r3, r3, r4
    6b50:	f8dd 9014 	ldr.w	r9, [sp, #20]
    6b54:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
    6b58:	ee1a ba10 	vmov	fp, s20
    6b5c:	f8dd a01c 	ldr.w	sl, [sp, #28]
    6b60:	f8dd 8008 	ldr.w	r8, [sp, #8]
    6b64:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
    6b68:	9305      	str	r3, [sp, #20]
    6b6a:	f7ff bac2 	b.w	60f2 <_svfprintf_r+0x6e2>
    6b6e:	ee1b 1a10 	vmov	r1, s22
    6b72:	aa24      	add	r2, sp, #144	; 0x90
    6b74:	4658      	mov	r0, fp
    6b76:	f001 fe53 	bl	8820 <__ssprint_r>
    6b7a:	2800      	cmp	r0, #0
    6b7c:	f47f abad 	bne.w	62da <_svfprintf_r+0x8ca>
    6b80:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    6b84:	9a26      	ldr	r2, [sp, #152]	; 0x98
    6b86:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    6b8a:	f7ff b896 	b.w	5cba <_svfprintf_r+0x2aa>
    6b8e:	9b25      	ldr	r3, [sp, #148]	; 0x94
    6b90:	48be      	ldr	r0, [pc, #760]	; (6e8c <_svfprintf_r+0x147c>)
    6b92:	f8ca 0000 	str.w	r0, [sl]
    6b96:	3301      	adds	r3, #1
    6b98:	3201      	adds	r2, #1
    6b9a:	2001      	movs	r0, #1
    6b9c:	2b07      	cmp	r3, #7
    6b9e:	9226      	str	r2, [sp, #152]	; 0x98
    6ba0:	9325      	str	r3, [sp, #148]	; 0x94
    6ba2:	f8ca 0004 	str.w	r0, [sl, #4]
    6ba6:	f300 8177 	bgt.w	6e98 <_svfprintf_r+0x1488>
    6baa:	f10a 0a08 	add.w	sl, sl, #8
    6bae:	2900      	cmp	r1, #0
    6bb0:	f040 80af 	bne.w	6d12 <_svfprintf_r+0x1302>
    6bb4:	990e      	ldr	r1, [sp, #56]	; 0x38
    6bb6:	f008 0301 	and.w	r3, r8, #1
    6bba:	430b      	orrs	r3, r1
    6bbc:	f43f a8c0 	beq.w	5d40 <_svfprintf_r+0x330>
    6bc0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6bc2:	9912      	ldr	r1, [sp, #72]	; 0x48
    6bc4:	441a      	add	r2, r3
    6bc6:	e9ca 1300 	strd	r1, r3, [sl]
    6bca:	9b25      	ldr	r3, [sp, #148]	; 0x94
    6bcc:	9226      	str	r2, [sp, #152]	; 0x98
    6bce:	3301      	adds	r3, #1
    6bd0:	2b07      	cmp	r3, #7
    6bd2:	9325      	str	r3, [sp, #148]	; 0x94
    6bd4:	f300 8252 	bgt.w	707c <_svfprintf_r+0x166c>
    6bd8:	f10a 0a08 	add.w	sl, sl, #8
    6bdc:	990e      	ldr	r1, [sp, #56]	; 0x38
    6bde:	f8ca 4000 	str.w	r4, [sl]
    6be2:	3301      	adds	r3, #1
    6be4:	440a      	add	r2, r1
    6be6:	2b07      	cmp	r3, #7
    6be8:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    6bec:	f8ca 1004 	str.w	r1, [sl, #4]
    6bf0:	f77f a8a4 	ble.w	5d3c <_svfprintf_r+0x32c>
    6bf4:	f7ff bbbd 	b.w	6372 <_svfprintf_r+0x962>
    6bf8:	f018 0240 	ands.w	r2, r8, #64	; 0x40
    6bfc:	f000 80dd 	beq.w	6dba <_svfprintf_r+0x13aa>
    6c00:	9808      	ldr	r0, [sp, #32]
    6c02:	f850 2b04 	ldr.w	r2, [r0], #4
    6c06:	9008      	str	r0, [sp, #32]
    6c08:	4619      	mov	r1, r3
    6c0a:	b292      	uxth	r2, r2
    6c0c:	e631      	b.n	6872 <_svfprintf_r+0xe62>
    6c0e:	ee1b 1a10 	vmov	r1, s22
    6c12:	aa24      	add	r2, sp, #144	; 0x90
    6c14:	4658      	mov	r0, fp
    6c16:	f001 fe03 	bl	8820 <__ssprint_r>
    6c1a:	2800      	cmp	r0, #0
    6c1c:	f47f ab5d 	bne.w	62da <_svfprintf_r+0x8ca>
    6c20:	9a26      	ldr	r2, [sp, #152]	; 0x98
    6c22:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    6c26:	f7ff baa3 	b.w	6170 <_svfprintf_r+0x760>
    6c2a:	ae22      	add	r6, sp, #136	; 0x88
    6c2c:	2208      	movs	r2, #8
    6c2e:	2100      	movs	r1, #0
    6c30:	4630      	mov	r0, r6
    6c32:	941d      	str	r4, [sp, #116]	; 0x74
    6c34:	f7fd fdb8 	bl	47a8 <memset>
    6c38:	9b03      	ldr	r3, [sp, #12]
    6c3a:	1c5a      	adds	r2, r3, #1
    6c3c:	f000 80db 	beq.w	6df6 <_svfprintf_r+0x13e6>
    6c40:	2500      	movs	r5, #0
    6c42:	f8cd 9008 	str.w	r9, [sp, #8]
    6c46:	f8cd 801c 	str.w	r8, [sp, #28]
    6c4a:	4699      	mov	r9, r3
    6c4c:	46a8      	mov	r8, r5
    6c4e:	e00c      	b.n	6c6a <_svfprintf_r+0x125a>
    6c50:	a937      	add	r1, sp, #220	; 0xdc
    6c52:	4658      	mov	r0, fp
    6c54:	f001 fd9e 	bl	8794 <_wcrtomb_r>
    6c58:	1c43      	adds	r3, r0, #1
    6c5a:	4440      	add	r0, r8
    6c5c:	f000 83c8 	beq.w	73f0 <_svfprintf_r+0x19e0>
    6c60:	4548      	cmp	r0, r9
    6c62:	dc08      	bgt.n	6c76 <_svfprintf_r+0x1266>
    6c64:	f000 8418 	beq.w	7498 <_svfprintf_r+0x1a88>
    6c68:	4680      	mov	r8, r0
    6c6a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    6c6c:	5952      	ldr	r2, [r2, r5]
    6c6e:	4633      	mov	r3, r6
    6c70:	3504      	adds	r5, #4
    6c72:	2a00      	cmp	r2, #0
    6c74:	d1ec      	bne.n	6c50 <_svfprintf_r+0x1240>
    6c76:	f8cd 8014 	str.w	r8, [sp, #20]
    6c7a:	f8dd 9008 	ldr.w	r9, [sp, #8]
    6c7e:	f8dd 801c 	ldr.w	r8, [sp, #28]
    6c82:	e0c5      	b.n	6e10 <_svfprintf_r+0x1400>
    6c84:	3301      	adds	r3, #1
    6c86:	4982      	ldr	r1, [pc, #520]	; (6e90 <_svfprintf_r+0x1480>)
    6c88:	f8ca 4004 	str.w	r4, [sl, #4]
    6c8c:	4422      	add	r2, r4
    6c8e:	2b07      	cmp	r3, #7
    6c90:	f8ca 1000 	str.w	r1, [sl]
    6c94:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    6c98:	f77f a850 	ble.w	5d3c <_svfprintf_r+0x32c>
    6c9c:	f7ff bb69 	b.w	6372 <_svfprintf_r+0x962>
    6ca0:	ee1b 1a10 	vmov	r1, s22
    6ca4:	aa24      	add	r2, sp, #144	; 0x90
    6ca6:	4658      	mov	r0, fp
    6ca8:	f001 fdba 	bl	8820 <__ssprint_r>
    6cac:	2800      	cmp	r0, #0
    6cae:	f47f ab14 	bne.w	62da <_svfprintf_r+0x8ca>
    6cb2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    6cb4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    6cb8:	f7ff b829 	b.w	5d0e <_svfprintf_r+0x2fe>
    6cbc:	aa24      	add	r2, sp, #144	; 0x90
    6cbe:	4658      	mov	r0, fp
    6cc0:	9105      	str	r1, [sp, #20]
    6cc2:	f001 fdad 	bl	8820 <__ssprint_r>
    6cc6:	2800      	cmp	r0, #0
    6cc8:	f47f ab07 	bne.w	62da <_svfprintf_r+0x8ca>
    6ccc:	f896 c000 	ldrb.w	ip, [r6]
    6cd0:	9a26      	ldr	r2, [sp, #152]	; 0x98
    6cd2:	9905      	ldr	r1, [sp, #20]
    6cd4:	a827      	add	r0, sp, #156	; 0x9c
    6cd6:	e67d      	b.n	69d4 <_svfprintf_r+0xfc4>
    6cd8:	2b01      	cmp	r3, #1
    6cda:	f8cd 8008 	str.w	r8, [sp, #8]
    6cde:	f47f a9f3 	bne.w	60c8 <_svfprintf_r+0x6b8>
    6ce2:	f7ff bb93 	b.w	640c <_svfprintf_r+0x9fc>
    6ce6:	9b08      	ldr	r3, [sp, #32]
    6ce8:	9904      	ldr	r1, [sp, #16]
    6cea:	f853 2b04 	ldr.w	r2, [r3], #4
    6cee:	464c      	mov	r4, r9
    6cf0:	6011      	str	r1, [r2, #0]
    6cf2:	9308      	str	r3, [sp, #32]
    6cf4:	f7fe bebe 	b.w	5a74 <_svfprintf_r+0x64>
    6cf8:	3301      	adds	r3, #1
    6cfa:	4965      	ldr	r1, [pc, #404]	; (6e90 <_svfprintf_r+0x1480>)
    6cfc:	f8ca 4004 	str.w	r4, [sl, #4]
    6d00:	4422      	add	r2, r4
    6d02:	2b07      	cmp	r3, #7
    6d04:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    6d08:	f8ca 1000 	str.w	r1, [sl]
    6d0c:	f77f ab22 	ble.w	6354 <_svfprintf_r+0x944>
    6d10:	e47b      	b.n	660a <_svfprintf_r+0xbfa>
    6d12:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6d14:	9812      	ldr	r0, [sp, #72]	; 0x48
    6d16:	441a      	add	r2, r3
    6d18:	e9ca 0300 	strd	r0, r3, [sl]
    6d1c:	9b25      	ldr	r3, [sp, #148]	; 0x94
    6d1e:	9226      	str	r2, [sp, #152]	; 0x98
    6d20:	3301      	adds	r3, #1
    6d22:	2b07      	cmp	r3, #7
    6d24:	9325      	str	r3, [sp, #148]	; 0x94
    6d26:	f300 81a9 	bgt.w	707c <_svfprintf_r+0x166c>
    6d2a:	f10a 0a08 	add.w	sl, sl, #8
    6d2e:	2900      	cmp	r1, #0
    6d30:	f6bf af54 	bge.w	6bdc <_svfprintf_r+0x11cc>
    6d34:	424d      	negs	r5, r1
    6d36:	3110      	adds	r1, #16
    6d38:	f280 830f 	bge.w	735a <_svfprintf_r+0x194a>
    6d3c:	ee1b 1a10 	vmov	r1, s22
    6d40:	2610      	movs	r6, #16
    6d42:	e005      	b.n	6d50 <_svfprintf_r+0x1340>
    6d44:	f10a 0a08 	add.w	sl, sl, #8
    6d48:	3d10      	subs	r5, #16
    6d4a:	2d10      	cmp	r5, #16
    6d4c:	f340 8305 	ble.w	735a <_svfprintf_r+0x194a>
    6d50:	3301      	adds	r3, #1
    6d52:	484f      	ldr	r0, [pc, #316]	; (6e90 <_svfprintf_r+0x1480>)
    6d54:	3210      	adds	r2, #16
    6d56:	2b07      	cmp	r3, #7
    6d58:	e9ca 0600 	strd	r0, r6, [sl]
    6d5c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    6d60:	ddf0      	ble.n	6d44 <_svfprintf_r+0x1334>
    6d62:	aa24      	add	r2, sp, #144	; 0x90
    6d64:	4658      	mov	r0, fp
    6d66:	9103      	str	r1, [sp, #12]
    6d68:	f001 fd5a 	bl	8820 <__ssprint_r>
    6d6c:	2800      	cmp	r0, #0
    6d6e:	f47f aab4 	bne.w	62da <_svfprintf_r+0x8ca>
    6d72:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    6d76:	9903      	ldr	r1, [sp, #12]
    6d78:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    6d7c:	e7e4      	b.n	6d48 <_svfprintf_r+0x1338>
    6d7e:	9b08      	ldr	r3, [sp, #32]
    6d80:	f418 7100 	ands.w	r1, r8, #512	; 0x200
    6d84:	bf1a      	itte	ne
    6d86:	4611      	movne	r1, r2
    6d88:	f853 2b04 	ldrne.w	r2, [r3], #4
    6d8c:	f853 2b04 	ldreq.w	r2, [r3], #4
    6d90:	9308      	str	r3, [sp, #32]
    6d92:	bf18      	it	ne
    6d94:	b2d2      	uxtbne	r2, r2
    6d96:	f7ff b945 	b.w	6024 <_svfprintf_r+0x614>
    6d9a:	9b02      	ldr	r3, [sp, #8]
    6d9c:	f413 7100 	ands.w	r1, r3, #512	; 0x200
    6da0:	9b08      	ldr	r3, [sp, #32]
    6da2:	bf1a      	itte	ne
    6da4:	4611      	movne	r1, r2
    6da6:	f853 2b04 	ldrne.w	r2, [r3], #4
    6daa:	f853 2b04 	ldreq.w	r2, [r3], #4
    6dae:	9308      	str	r3, [sp, #32]
    6db0:	bf18      	it	ne
    6db2:	b2d2      	uxtbne	r2, r2
    6db4:	2301      	movs	r3, #1
    6db6:	f7ff b8d0 	b.w	5f5a <_svfprintf_r+0x54a>
    6dba:	9b08      	ldr	r3, [sp, #32]
    6dbc:	f418 7100 	ands.w	r1, r8, #512	; 0x200
    6dc0:	bf1a      	itte	ne
    6dc2:	4611      	movne	r1, r2
    6dc4:	f853 2b04 	ldrne.w	r2, [r3], #4
    6dc8:	f853 2b04 	ldreq.w	r2, [r3], #4
    6dcc:	9308      	str	r3, [sp, #32]
    6dce:	bf18      	it	ne
    6dd0:	b2d2      	uxtbne	r2, r2
    6dd2:	e54e      	b.n	6872 <_svfprintf_r+0xe62>
    6dd4:	468a      	mov	sl, r1
    6dd6:	3301      	adds	r3, #1
    6dd8:	492d      	ldr	r1, [pc, #180]	; (6e90 <_svfprintf_r+0x1480>)
    6dda:	f8ca 5004 	str.w	r5, [sl, #4]
    6dde:	442a      	add	r2, r5
    6de0:	2b07      	cmp	r3, #7
    6de2:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    6de6:	f8ca 1000 	str.w	r1, [sl]
    6dea:	f300 8139 	bgt.w	7060 <_svfprintf_r+0x1650>
    6dee:	f10a 0a08 	add.w	sl, sl, #8
    6df2:	f7ff bb8c 	b.w	650e <_svfprintf_r+0xafe>
    6df6:	2300      	movs	r3, #0
    6df8:	4619      	mov	r1, r3
    6dfa:	9600      	str	r6, [sp, #0]
    6dfc:	aa1d      	add	r2, sp, #116	; 0x74
    6dfe:	4658      	mov	r0, fp
    6e00:	f001 fcee 	bl	87e0 <_wcsrtombs_r>
    6e04:	4603      	mov	r3, r0
    6e06:	3301      	adds	r3, #1
    6e08:	9005      	str	r0, [sp, #20]
    6e0a:	f000 82f1 	beq.w	73f0 <_svfprintf_r+0x19e0>
    6e0e:	941d      	str	r4, [sp, #116]	; 0x74
    6e10:	9b05      	ldr	r3, [sp, #20]
    6e12:	2b00      	cmp	r3, #0
    6e14:	d04e      	beq.n	6eb4 <_svfprintf_r+0x14a4>
    6e16:	2b63      	cmp	r3, #99	; 0x63
    6e18:	f300 8118 	bgt.w	704c <_svfprintf_r+0x163c>
    6e1c:	2300      	movs	r3, #0
    6e1e:	9307      	str	r3, [sp, #28]
    6e20:	ac37      	add	r4, sp, #220	; 0xdc
    6e22:	2208      	movs	r2, #8
    6e24:	2100      	movs	r1, #0
    6e26:	4630      	mov	r0, r6
    6e28:	f7fd fcbe 	bl	47a8 <memset>
    6e2c:	9d05      	ldr	r5, [sp, #20]
    6e2e:	9600      	str	r6, [sp, #0]
    6e30:	462b      	mov	r3, r5
    6e32:	aa1d      	add	r2, sp, #116	; 0x74
    6e34:	4621      	mov	r1, r4
    6e36:	4658      	mov	r0, fp
    6e38:	f001 fcd2 	bl	87e0 <_wcsrtombs_r>
    6e3c:	4285      	cmp	r5, r0
    6e3e:	f040 837c 	bne.w	753a <_svfprintf_r+0x1b2a>
    6e42:	9a05      	ldr	r2, [sp, #20]
    6e44:	2300      	movs	r3, #0
    6e46:	54a3      	strb	r3, [r4, r2]
    6e48:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    6e4c:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    6e50:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    6e54:	9303      	str	r3, [sp, #12]
    6e56:	9202      	str	r2, [sp, #8]
    6e58:	930f      	str	r3, [sp, #60]	; 0x3c
    6e5a:	f7fe bfba 	b.w	5dd2 <_svfprintf_r+0x3c2>
    6e5e:	212d      	movs	r1, #45	; 0x2d
    6e60:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    6e64:	f7fe bfa4 	b.w	5db0 <_svfprintf_r+0x3a0>
    6e68:	9b16      	ldr	r3, [sp, #88]	; 0x58
    6e6a:	9915      	ldr	r1, [sp, #84]	; 0x54
    6e6c:	ebab 0b03 	sub.w	fp, fp, r3
    6e70:	461a      	mov	r2, r3
    6e72:	4658      	mov	r0, fp
    6e74:	f7fd fd30 	bl	48d8 <strncpy>
    6e78:	f89a 2001 	ldrb.w	r2, [sl, #1]
    6e7c:	4b05      	ldr	r3, [pc, #20]	; (6e94 <_svfprintf_r+0x1484>)
    6e7e:	b10a      	cbz	r2, 6e84 <_svfprintf_r+0x1474>
    6e80:	f10a 0a01 	add.w	sl, sl, #1
    6e84:	f04f 0c00 	mov.w	ip, #0
    6e88:	e628      	b.n	6adc <_svfprintf_r+0x10cc>
    6e8a:	bf00      	nop
    6e8c:	20000664 	.word	0x20000664
    6e90:	20000e60 	.word	0x20000e60
    6e94:	cccccccd 	.word	0xcccccccd
    6e98:	ee1b 1a10 	vmov	r1, s22
    6e9c:	aa24      	add	r2, sp, #144	; 0x90
    6e9e:	4658      	mov	r0, fp
    6ea0:	f001 fcbe 	bl	8820 <__ssprint_r>
    6ea4:	2800      	cmp	r0, #0
    6ea6:	f47f aa18 	bne.w	62da <_svfprintf_r+0x8ca>
    6eaa:	991b      	ldr	r1, [sp, #108]	; 0x6c
    6eac:	9a26      	ldr	r2, [sp, #152]	; 0x98
    6eae:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    6eb2:	e67c      	b.n	6bae <_svfprintf_r+0x119e>
    6eb4:	9b05      	ldr	r3, [sp, #20]
    6eb6:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    6eba:	930f      	str	r3, [sp, #60]	; 0x3c
    6ebc:	e9cd 3302 	strd	r3, r3, [sp, #8]
    6ec0:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    6ec4:	9307      	str	r3, [sp, #28]
    6ec6:	f7fe bf84 	b.w	5dd2 <_svfprintf_r+0x3c2>
    6eca:	990e      	ldr	r1, [sp, #56]	; 0x38
    6ecc:	9805      	ldr	r0, [sp, #20]
    6ece:	1865      	adds	r5, r4, r1
    6ed0:	1a2d      	subs	r5, r5, r0
    6ed2:	1acc      	subs	r4, r1, r3
    6ed4:	42a5      	cmp	r5, r4
    6ed6:	bfa8      	it	ge
    6ed8:	4625      	movge	r5, r4
    6eda:	f7ff bb4d 	b.w	6578 <_svfprintf_r+0xb68>
    6ede:	9b08      	ldr	r3, [sp, #32]
    6ee0:	9904      	ldr	r1, [sp, #16]
    6ee2:	f853 2b04 	ldr.w	r2, [r3], #4
    6ee6:	9308      	str	r3, [sp, #32]
    6ee8:	8011      	strh	r1, [r2, #0]
    6eea:	464c      	mov	r4, r9
    6eec:	f7fe bdc2 	b.w	5a74 <_svfprintf_r+0x64>
    6ef0:	f913 2b04 	ldrsb.w	r2, [r3], #4
    6ef4:	9308      	str	r3, [sp, #32]
    6ef6:	17d1      	asrs	r1, r2, #31
    6ef8:	460b      	mov	r3, r1
    6efa:	f7fe bfdb 	b.w	5eb4 <_svfprintf_r+0x4a4>
    6efe:	9a03      	ldr	r2, [sp, #12]
    6f00:	2102      	movs	r1, #2
    6f02:	ab22      	add	r3, sp, #136	; 0x88
    6f04:	9301      	str	r3, [sp, #4]
    6f06:	ab1d      	add	r3, sp, #116	; 0x74
    6f08:	9300      	str	r3, [sp, #0]
    6f0a:	4658      	mov	r0, fp
    6f0c:	ab1b      	add	r3, sp, #108	; 0x6c
    6f0e:	eeb0 0b4a 	vmov.f64	d0, d10
    6f12:	9202      	str	r2, [sp, #8]
    6f14:	f000 fdc8 	bl	7aa8 <_dtoa_r>
    6f18:	2d47      	cmp	r5, #71	; 0x47
    6f1a:	9a02      	ldr	r2, [sp, #8]
    6f1c:	4604      	mov	r4, r0
    6f1e:	f000 8161 	beq.w	71e4 <_svfprintf_r+0x17d4>
    6f22:	2d46      	cmp	r5, #70	; 0x46
    6f24:	4410      	add	r0, r2
    6f26:	d105      	bne.n	6f34 <_svfprintf_r+0x1524>
    6f28:	7823      	ldrb	r3, [r4, #0]
    6f2a:	2b30      	cmp	r3, #48	; 0x30
    6f2c:	f000 826f 	beq.w	740e <_svfprintf_r+0x19fe>
    6f30:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    6f32:	4410      	add	r0, r2
    6f34:	eeb5 ab40 	vcmp.f64	d10, #0.0
    6f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6f3c:	f040 8146 	bne.w	71cc <_svfprintf_r+0x17bc>
    6f40:	4603      	mov	r3, r0
    6f42:	1b1b      	subs	r3, r3, r4
    6f44:	930e      	str	r3, [sp, #56]	; 0x38
    6f46:	2d47      	cmp	r5, #71	; 0x47
    6f48:	f000 8110 	beq.w	716c <_svfprintf_r+0x175c>
    6f4c:	2d46      	cmp	r5, #70	; 0x46
    6f4e:	f000 81b5 	beq.w	72bc <_svfprintf_r+0x18ac>
    6f52:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    6f54:	930c      	str	r3, [sp, #48]	; 0x30
    6f56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6f58:	2d41      	cmp	r5, #65	; 0x41
    6f5a:	f103 33ff 	add.w	r3, r3, #4294967295
    6f5e:	931b      	str	r3, [sp, #108]	; 0x6c
    6f60:	f000 81e5 	beq.w	732e <_svfprintf_r+0x191e>
    6f64:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
    6f68:	2100      	movs	r1, #0
    6f6a:	2b00      	cmp	r3, #0
    6f6c:	bfb8      	it	lt
    6f6e:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
    6f70:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
    6f74:	bfba      	itte	lt
    6f76:	f1c3 0301 	rsblt	r3, r3, #1
    6f7a:	222d      	movlt	r2, #45	; 0x2d
    6f7c:	222b      	movge	r2, #43	; 0x2b
    6f7e:	2b09      	cmp	r3, #9
    6f80:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
    6f84:	f340 81da 	ble.w	733c <_svfprintf_r+0x192c>
    6f88:	f10d 058f 	add.w	r5, sp, #143	; 0x8f
    6f8c:	f8df c41c 	ldr.w	ip, [pc, #1052]	; 73ac <_svfprintf_r+0x199c>
    6f90:	462a      	mov	r2, r5
    6f92:	4610      	mov	r0, r2
    6f94:	fb8c 2103 	smull	r2, r1, ip, r3
    6f98:	17da      	asrs	r2, r3, #31
    6f9a:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
    6f9e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    6fa2:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
    6fa6:	3130      	adds	r1, #48	; 0x30
    6fa8:	f800 1c01 	strb.w	r1, [r0, #-1]
    6fac:	4619      	mov	r1, r3
    6fae:	2963      	cmp	r1, #99	; 0x63
    6fb0:	4613      	mov	r3, r2
    6fb2:	f100 32ff 	add.w	r2, r0, #4294967295
    6fb6:	dcec      	bgt.n	6f92 <_svfprintf_r+0x1582>
    6fb8:	3330      	adds	r3, #48	; 0x30
    6fba:	b2d9      	uxtb	r1, r3
    6fbc:	1e83      	subs	r3, r0, #2
    6fbe:	429d      	cmp	r5, r3
    6fc0:	f802 1c01 	strb.w	r1, [r2, #-1]
    6fc4:	f240 828b 	bls.w	74de <_svfprintf_r+0x1ace>
    6fc8:	4613      	mov	r3, r2
    6fca:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    6fce:	e001      	b.n	6fd4 <_svfprintf_r+0x15c4>
    6fd0:	f813 1b01 	ldrb.w	r1, [r3], #1
    6fd4:	f802 1b01 	strb.w	r1, [r2], #1
    6fd8:	429d      	cmp	r5, r3
    6fda:	d1f9      	bne.n	6fd0 <_svfprintf_r+0x15c0>
    6fdc:	f10d 0391 	add.w	r3, sp, #145	; 0x91
    6fe0:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    6fe4:	1a1b      	subs	r3, r3, r0
    6fe6:	4413      	add	r3, r2
    6fe8:	aa1e      	add	r2, sp, #120	; 0x78
    6fea:	1a9b      	subs	r3, r3, r2
    6fec:	9314      	str	r3, [sp, #80]	; 0x50
    6fee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6ff0:	9a14      	ldr	r2, [sp, #80]	; 0x50
    6ff2:	2b01      	cmp	r3, #1
    6ff4:	441a      	add	r2, r3
    6ff6:	9205      	str	r2, [sp, #20]
    6ff8:	f340 8203 	ble.w	7402 <_svfprintf_r+0x19f2>
    6ffc:	9b05      	ldr	r3, [sp, #20]
    6ffe:	9a10      	ldr	r2, [sp, #64]	; 0x40
    7000:	4413      	add	r3, r2
    7002:	9305      	str	r3, [sp, #20]
    7004:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
    7008:	9a05      	ldr	r2, [sp, #20]
    700a:	f443 7880 	orr.w	r8, r3, #256	; 0x100
    700e:	2300      	movs	r3, #0
    7010:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    7014:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    7018:	930f      	str	r3, [sp, #60]	; 0x3c
    701a:	9202      	str	r2, [sp, #8]
    701c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    701e:	2b00      	cmp	r3, #0
    7020:	f040 80b1 	bne.w	7186 <_svfprintf_r+0x1776>
    7024:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    7028:	9303      	str	r3, [sp, #12]
    702a:	f7fe bed2 	b.w	5dd2 <_svfprintf_r+0x3c2>
    702e:	4620      	mov	r0, r4
    7030:	f7fd ff06 	bl	4e40 <strlen>
    7034:	4602      	mov	r2, r0
    7036:	9005      	str	r0, [sp, #20]
    7038:	f7fe bf20 	b.w	5e7c <_svfprintf_r+0x46c>
    703c:	ee1b 1a10 	vmov	r1, s22
    7040:	aa24      	add	r2, sp, #144	; 0x90
    7042:	4658      	mov	r0, fp
    7044:	f001 fbec 	bl	8820 <__ssprint_r>
    7048:	f7fe bded 	b.w	5c26 <_svfprintf_r+0x216>
    704c:	1c59      	adds	r1, r3, #1
    704e:	4658      	mov	r0, fp
    7050:	f7fc fc8e 	bl	3970 <_malloc_r>
    7054:	4604      	mov	r4, r0
    7056:	2800      	cmp	r0, #0
    7058:	f000 81ca 	beq.w	73f0 <_svfprintf_r+0x19e0>
    705c:	9007      	str	r0, [sp, #28]
    705e:	e6e0      	b.n	6e22 <_svfprintf_r+0x1412>
    7060:	ee1b 1a10 	vmov	r1, s22
    7064:	aa24      	add	r2, sp, #144	; 0x90
    7066:	4658      	mov	r0, fp
    7068:	f001 fbda 	bl	8820 <__ssprint_r>
    706c:	2800      	cmp	r0, #0
    706e:	f47f a934 	bne.w	62da <_svfprintf_r+0x8ca>
    7072:	9a26      	ldr	r2, [sp, #152]	; 0x98
    7074:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    7078:	f7ff ba49 	b.w	650e <_svfprintf_r+0xafe>
    707c:	ee1b 1a10 	vmov	r1, s22
    7080:	aa24      	add	r2, sp, #144	; 0x90
    7082:	4658      	mov	r0, fp
    7084:	f001 fbcc 	bl	8820 <__ssprint_r>
    7088:	2800      	cmp	r0, #0
    708a:	f47f a926 	bne.w	62da <_svfprintf_r+0x8ca>
    708e:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    7092:	991b      	ldr	r1, [sp, #108]	; 0x6c
    7094:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    7098:	e649      	b.n	6d2e <_svfprintf_r+0x131e>
    709a:	2306      	movs	r3, #6
    709c:	9303      	str	r3, [sp, #12]
    709e:	f7ff bb83 	b.w	67a8 <_svfprintf_r+0xd98>
    70a2:	9b03      	ldr	r3, [sp, #12]
    70a4:	2102      	movs	r1, #2
    70a6:	1c5a      	adds	r2, r3, #1
    70a8:	e72b      	b.n	6f02 <_svfprintf_r+0x14f2>
    70aa:	9a03      	ldr	r2, [sp, #12]
    70ac:	2103      	movs	r1, #3
    70ae:	e728      	b.n	6f02 <_svfprintf_r+0x14f2>
    70b0:	a81b      	add	r0, sp, #108	; 0x6c
    70b2:	eeb0 0b4a 	vmov.f64	d0, d10
    70b6:	f000 fbcb 	bl	7850 <frexp>
    70ba:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
    70be:	ee20 0b07 	vmul.f64	d0, d0, d7
    70c2:	eeb5 0b40 	vcmp.f64	d0, #0.0
    70c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    70ca:	d101      	bne.n	70d0 <_svfprintf_r+0x16c0>
    70cc:	2301      	movs	r3, #1
    70ce:	931b      	str	r3, [sp, #108]	; 0x6c
    70d0:	48b3      	ldr	r0, [pc, #716]	; (73a0 <_svfprintf_r+0x1990>)
    70d2:	9b03      	ldr	r3, [sp, #12]
    70d4:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
    70d8:	3b01      	subs	r3, #1
    70da:	4622      	mov	r2, r4
    70dc:	e004      	b.n	70e8 <_svfprintf_r+0x16d8>
    70de:	eeb5 0b40 	vcmp.f64	d0, #0.0
    70e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    70e6:	d013      	beq.n	7110 <_svfprintf_r+0x1700>
    70e8:	ee20 0b05 	vmul.f64	d0, d0, d5
    70ec:	eefd 7bc0 	vcvt.s32.f64	s15, d0
    70f0:	f1b3 3fff 	cmp.w	r3, #4294967295
    70f4:	ee17 1a90 	vmov	r1, s15
    70f8:	5c41      	ldrb	r1, [r0, r1]
    70fa:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    70fe:	4694      	mov	ip, r2
    7100:	ee30 0b46 	vsub.f64	d0, d0, d6
    7104:	f802 1b01 	strb.w	r1, [r2], #1
    7108:	4619      	mov	r1, r3
    710a:	f103 33ff 	add.w	r3, r3, #4294967295
    710e:	d1e6      	bne.n	70de <_svfprintf_r+0x16ce>
    7110:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    7114:	eeb4 0bc6 	vcmpe.f64	d0, d6
    7118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    711c:	f300 8148 	bgt.w	73b0 <_svfprintf_r+0x19a0>
    7120:	eeb4 0b46 	vcmp.f64	d0, d6
    7124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7128:	d104      	bne.n	7134 <_svfprintf_r+0x1724>
    712a:	ee17 3a90 	vmov	r3, s15
    712e:	07db      	lsls	r3, r3, #31
    7130:	f100 813e 	bmi.w	73b0 <_svfprintf_r+0x19a0>
    7134:	2900      	cmp	r1, #0
    7136:	db06      	blt.n	7146 <_svfprintf_r+0x1736>
    7138:	1c4b      	adds	r3, r1, #1
    713a:	4413      	add	r3, r2
    713c:	2130      	movs	r1, #48	; 0x30
    713e:	f802 1b01 	strb.w	r1, [r2], #1
    7142:	4293      	cmp	r3, r2
    7144:	d1fb      	bne.n	713e <_svfprintf_r+0x172e>
    7146:	1b13      	subs	r3, r2, r4
    7148:	930e      	str	r3, [sp, #56]	; 0x38
    714a:	e6fc      	b.n	6f46 <_svfprintf_r+0x1536>
    714c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    714e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7150:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    7154:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    7158:	9613      	str	r6, [sp, #76]	; 0x4c
    715a:	18e3      	adds	r3, r4, r3
    715c:	429d      	cmp	r5, r3
    715e:	4629      	mov	r1, r5
    7160:	bf28      	it	cs
    7162:	4619      	movcs	r1, r3
    7164:	4682      	mov	sl, r0
    7166:	9105      	str	r1, [sp, #20]
    7168:	f7ff b9d8 	b.w	651c <_svfprintf_r+0xb0c>
    716c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    716e:	930c      	str	r3, [sp, #48]	; 0x30
    7170:	1cda      	adds	r2, r3, #3
    7172:	db02      	blt.n	717a <_svfprintf_r+0x176a>
    7174:	9a03      	ldr	r2, [sp, #12]
    7176:	4293      	cmp	r3, r2
    7178:	dd0c      	ble.n	7194 <_svfprintf_r+0x1784>
    717a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    717c:	3b02      	subs	r3, #2
    717e:	930b      	str	r3, [sp, #44]	; 0x2c
    7180:	f023 0520 	bic.w	r5, r3, #32
    7184:	e6e7      	b.n	6f56 <_svfprintf_r+0x1546>
    7186:	212d      	movs	r1, #45	; 0x2d
    7188:	2300      	movs	r3, #0
    718a:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    718e:	9303      	str	r3, [sp, #12]
    7190:	f7fe be22 	b.w	5dd8 <_svfprintf_r+0x3c8>
    7194:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7196:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    7198:	4293      	cmp	r3, r2
    719a:	f2c0 80bd 	blt.w	7318 <_svfprintf_r+0x1908>
    719e:	07f0      	lsls	r0, r6, #31
    71a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    71a2:	f140 8132 	bpl.w	740a <_svfprintf_r+0x19fa>
    71a6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    71a8:	4413      	add	r3, r2
    71aa:	9305      	str	r3, [sp, #20]
    71ac:	0571      	lsls	r1, r6, #21
    71ae:	d503      	bpl.n	71b8 <_svfprintf_r+0x17a8>
    71b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    71b2:	2b00      	cmp	r3, #0
    71b4:	f300 8135 	bgt.w	7422 <_svfprintf_r+0x1a12>
    71b8:	9b05      	ldr	r3, [sp, #20]
    71ba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    71be:	9302      	str	r3, [sp, #8]
    71c0:	2367      	movs	r3, #103	; 0x67
    71c2:	930b      	str	r3, [sp, #44]	; 0x2c
    71c4:	2300      	movs	r3, #0
    71c6:	930f      	str	r3, [sp, #60]	; 0x3c
    71c8:	930d      	str	r3, [sp, #52]	; 0x34
    71ca:	e727      	b.n	701c <_svfprintf_r+0x160c>
    71cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
    71ce:	4283      	cmp	r3, r0
    71d0:	f4bf aeb7 	bcs.w	6f42 <_svfprintf_r+0x1532>
    71d4:	2130      	movs	r1, #48	; 0x30
    71d6:	1c5a      	adds	r2, r3, #1
    71d8:	9222      	str	r2, [sp, #136]	; 0x88
    71da:	7019      	strb	r1, [r3, #0]
    71dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
    71de:	4298      	cmp	r0, r3
    71e0:	d8f9      	bhi.n	71d6 <_svfprintf_r+0x17c6>
    71e2:	e6ae      	b.n	6f42 <_svfprintf_r+0x1532>
    71e4:	07f3      	lsls	r3, r6, #31
    71e6:	f100 80a7 	bmi.w	7338 <_svfprintf_r+0x1928>
    71ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
    71ec:	e6a9      	b.n	6f42 <_svfprintf_r+0x1532>
    71ee:	aa24      	add	r2, sp, #144	; 0x90
    71f0:	4658      	mov	r0, fp
    71f2:	9105      	str	r1, [sp, #20]
    71f4:	f001 fb14 	bl	8820 <__ssprint_r>
    71f8:	2800      	cmp	r0, #0
    71fa:	f47f a86e 	bne.w	62da <_svfprintf_r+0x8ca>
    71fe:	f896 c000 	ldrb.w	ip, [r6]
    7202:	9a26      	ldr	r2, [sp, #152]	; 0x98
    7204:	9905      	ldr	r1, [sp, #20]
    7206:	a827      	add	r0, sp, #156	; 0x9c
    7208:	4465      	add	r5, ip
    720a:	f7ff bbec 	b.w	69e6 <_svfprintf_r+0xfd6>
    720e:	ee1b 1a10 	vmov	r1, s22
    7212:	aa24      	add	r2, sp, #144	; 0x90
    7214:	4658      	mov	r0, fp
    7216:	f001 fb03 	bl	8820 <__ssprint_r>
    721a:	2800      	cmp	r0, #0
    721c:	f47f a85d 	bne.w	62da <_svfprintf_r+0x8ca>
    7220:	9a26      	ldr	r2, [sp, #152]	; 0x98
    7222:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    7226:	f7ff b96b 	b.w	6500 <_svfprintf_r+0xaf0>
    722a:	2378      	movs	r3, #120	; 0x78
    722c:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    7230:	2330      	movs	r3, #48	; 0x30
    7232:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    7236:	9b03      	ldr	r3, [sp, #12]
    7238:	2b63      	cmp	r3, #99	; 0x63
    723a:	f048 0602 	orr.w	r6, r8, #2
    723e:	f300 80a6 	bgt.w	738e <_svfprintf_r+0x197e>
    7242:	2300      	movs	r3, #0
    7244:	9307      	str	r3, [sp, #28]
    7246:	ac37      	add	r4, sp, #220	; 0xdc
    7248:	ee18 3a90 	vmov	r3, s17
    724c:	2b00      	cmp	r3, #0
    724e:	f448 7881 	orr.w	r8, r8, #258	; 0x102
    7252:	db2b      	blt.n	72ac <_svfprintf_r+0x189c>
    7254:	eeb0 ab48 	vmov.f64	d10, d8
    7258:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    725a:	f023 0520 	bic.w	r5, r3, #32
    725e:	2300      	movs	r3, #0
    7260:	9309      	str	r3, [sp, #36]	; 0x24
    7262:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7264:	2b61      	cmp	r3, #97	; 0x61
    7266:	f47f aaad 	bne.w	67c4 <_svfprintf_r+0xdb4>
    726a:	eeb0 0b4a 	vmov.f64	d0, d10
    726e:	a81b      	add	r0, sp, #108	; 0x6c
    7270:	f000 faee 	bl	7850 <frexp>
    7274:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
    7278:	ee20 0b07 	vmul.f64	d0, d0, d7
    727c:	eeb5 0b40 	vcmp.f64	d0, #0.0
    7280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7284:	d101      	bne.n	728a <_svfprintf_r+0x187a>
    7286:	2301      	movs	r3, #1
    7288:	931b      	str	r3, [sp, #108]	; 0x6c
    728a:	4846      	ldr	r0, [pc, #280]	; (73a4 <_svfprintf_r+0x1994>)
    728c:	e721      	b.n	70d2 <_svfprintf_r+0x16c2>
    728e:	ee1b 1a10 	vmov	r1, s22
    7292:	aa24      	add	r2, sp, #144	; 0x90
    7294:	4658      	mov	r0, fp
    7296:	f001 fac3 	bl	8820 <__ssprint_r>
    729a:	2800      	cmp	r0, #0
    729c:	f47f a81d 	bne.w	62da <_svfprintf_r+0x8ca>
    72a0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    72a2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    72a4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    72a8:	f7ff b94e 	b.w	6548 <_svfprintf_r+0xb38>
    72ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    72ae:	f023 0520 	bic.w	r5, r3, #32
    72b2:	232d      	movs	r3, #45	; 0x2d
    72b4:	9309      	str	r3, [sp, #36]	; 0x24
    72b6:	eeb1 ab48 	vneg.f64	d10, d8
    72ba:	e7d2      	b.n	7262 <_svfprintf_r+0x1852>
    72bc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    72be:	920c      	str	r2, [sp, #48]	; 0x30
    72c0:	2a00      	cmp	r2, #0
    72c2:	f006 0301 	and.w	r3, r6, #1
    72c6:	f340 810d 	ble.w	74e4 <_svfprintf_r+0x1ad4>
    72ca:	9903      	ldr	r1, [sp, #12]
    72cc:	430b      	orrs	r3, r1
    72ce:	f040 80cf 	bne.w	7470 <_svfprintf_r+0x1a60>
    72d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    72d4:	9305      	str	r3, [sp, #20]
    72d6:	2366      	movs	r3, #102	; 0x66
    72d8:	930b      	str	r3, [sp, #44]	; 0x2c
    72da:	0572      	lsls	r2, r6, #21
    72dc:	f100 80a3 	bmi.w	7426 <_svfprintf_r+0x1a16>
    72e0:	9b05      	ldr	r3, [sp, #20]
    72e2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    72e6:	9302      	str	r3, [sp, #8]
    72e8:	e76c      	b.n	71c4 <_svfprintf_r+0x17b4>
    72ea:	ee1b 1a10 	vmov	r1, s22
    72ee:	aa24      	add	r2, sp, #144	; 0x90
    72f0:	4658      	mov	r0, fp
    72f2:	f001 fa95 	bl	8820 <__ssprint_r>
    72f6:	2800      	cmp	r0, #0
    72f8:	f47e afef 	bne.w	62da <_svfprintf_r+0x8ca>
    72fc:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
    72fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7300:	9a26      	ldr	r2, [sp, #152]	; 0x98
    7302:	1b1c      	subs	r4, r3, r4
    7304:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    7308:	f7ff b936 	b.w	6578 <_svfprintf_r+0xb68>
    730c:	2358      	movs	r3, #88	; 0x58
    730e:	e78d      	b.n	722c <_svfprintf_r+0x181c>
    7310:	2200      	movs	r2, #0
    7312:	9203      	str	r2, [sp, #12]
    7314:	f7fe bbda 	b.w	5acc <_svfprintf_r+0xbc>
    7318:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    731a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    731c:	189a      	adds	r2, r3, r2
    731e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7320:	9205      	str	r2, [sp, #20]
    7322:	2b00      	cmp	r3, #0
    7324:	f340 80ab 	ble.w	747e <_svfprintf_r+0x1a6e>
    7328:	2367      	movs	r3, #103	; 0x67
    732a:	930b      	str	r3, [sp, #44]	; 0x2c
    732c:	e7d5      	b.n	72da <_svfprintf_r+0x18ca>
    732e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    7330:	320f      	adds	r2, #15
    7332:	b2d2      	uxtb	r2, r2
    7334:	2101      	movs	r1, #1
    7336:	e618      	b.n	6f6a <_svfprintf_r+0x155a>
    7338:	18a0      	adds	r0, r4, r2
    733a:	e5fb      	b.n	6f34 <_svfprintf_r+0x1524>
    733c:	2900      	cmp	r1, #0
    733e:	f040 80a8 	bne.w	7492 <_svfprintf_r+0x1a82>
    7342:	2230      	movs	r2, #48	; 0x30
    7344:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
    7348:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
    734c:	3330      	adds	r3, #48	; 0x30
    734e:	f802 3b01 	strb.w	r3, [r2], #1
    7352:	ab1e      	add	r3, sp, #120	; 0x78
    7354:	1ad3      	subs	r3, r2, r3
    7356:	9314      	str	r3, [sp, #80]	; 0x50
    7358:	e649      	b.n	6fee <_svfprintf_r+0x15de>
    735a:	3301      	adds	r3, #1
    735c:	4912      	ldr	r1, [pc, #72]	; (73a8 <_svfprintf_r+0x1998>)
    735e:	f8ca 5004 	str.w	r5, [sl, #4]
    7362:	442a      	add	r2, r5
    7364:	2b07      	cmp	r3, #7
    7366:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    736a:	f8ca 1000 	str.w	r1, [sl]
    736e:	f77f ac33 	ble.w	6bd8 <_svfprintf_r+0x11c8>
    7372:	ee1b 1a10 	vmov	r1, s22
    7376:	aa24      	add	r2, sp, #144	; 0x90
    7378:	4658      	mov	r0, fp
    737a:	f001 fa51 	bl	8820 <__ssprint_r>
    737e:	2800      	cmp	r0, #0
    7380:	f47e afab 	bne.w	62da <_svfprintf_r+0x8ca>
    7384:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    7388:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    738c:	e426      	b.n	6bdc <_svfprintf_r+0x11cc>
    738e:	1c59      	adds	r1, r3, #1
    7390:	4658      	mov	r0, fp
    7392:	f7fc faed 	bl	3970 <_malloc_r>
    7396:	4604      	mov	r4, r0
    7398:	b350      	cbz	r0, 73f0 <_svfprintf_r+0x19e0>
    739a:	9007      	str	r0, [sp, #28]
    739c:	e754      	b.n	7248 <_svfprintf_r+0x1838>
    739e:	bf00      	nop
    73a0:	20000648 	.word	0x20000648
    73a4:	20000634 	.word	0x20000634
    73a8:	20000e60 	.word	0x20000e60
    73ac:	66666667 	.word	0x66666667
    73b0:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
    73b4:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    73b8:	f890 c00f 	ldrb.w	ip, [r0, #15]
    73bc:	4561      	cmp	r1, ip
    73be:	4613      	mov	r3, r2
    73c0:	d10a      	bne.n	73d8 <_svfprintf_r+0x19c8>
    73c2:	f04f 0e30 	mov.w	lr, #48	; 0x30
    73c6:	f803 ec01 	strb.w	lr, [r3, #-1]
    73ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
    73cc:	1e59      	subs	r1, r3, #1
    73ce:	9122      	str	r1, [sp, #136]	; 0x88
    73d0:	f813 1c01 	ldrb.w	r1, [r3, #-1]
    73d4:	458c      	cmp	ip, r1
    73d6:	d0f6      	beq.n	73c6 <_svfprintf_r+0x19b6>
    73d8:	2939      	cmp	r1, #57	; 0x39
    73da:	bf16      	itet	ne
    73dc:	3101      	addne	r1, #1
    73de:	7a81      	ldrbeq	r1, [r0, #10]
    73e0:	b2c9      	uxtbne	r1, r1
    73e2:	f803 1c01 	strb.w	r1, [r3, #-1]
    73e6:	e6ae      	b.n	7146 <_svfprintf_r+0x1736>
    73e8:	2300      	movs	r3, #0
    73ea:	4690      	mov	r8, r2
    73ec:	9307      	str	r3, [sp, #28]
    73ee:	e760      	b.n	72b2 <_svfprintf_r+0x18a2>
    73f0:	ee1b 2a10 	vmov	r2, s22
    73f4:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    73f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    73fc:	8193      	strh	r3, [r2, #12]
    73fe:	f7fe bc16 	b.w	5c2e <_svfprintf_r+0x21e>
    7402:	07f5      	lsls	r5, r6, #31
    7404:	f57f adfe 	bpl.w	7004 <_svfprintf_r+0x15f4>
    7408:	e5f8      	b.n	6ffc <_svfprintf_r+0x15ec>
    740a:	9305      	str	r3, [sp, #20]
    740c:	e6ce      	b.n	71ac <_svfprintf_r+0x179c>
    740e:	eeb5 ab40 	vcmp.f64	d10, #0.0
    7412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7416:	f43f ad8b 	beq.w	6f30 <_svfprintf_r+0x1520>
    741a:	f1c2 0201 	rsb	r2, r2, #1
    741e:	921b      	str	r2, [sp, #108]	; 0x6c
    7420:	e587      	b.n	6f32 <_svfprintf_r+0x1522>
    7422:	2367      	movs	r3, #103	; 0x67
    7424:	930b      	str	r3, [sp, #44]	; 0x2c
    7426:	9913      	ldr	r1, [sp, #76]	; 0x4c
    7428:	780b      	ldrb	r3, [r1, #0]
    742a:	2bff      	cmp	r3, #255	; 0xff
    742c:	d079      	beq.n	7522 <_svfprintf_r+0x1b12>
    742e:	2500      	movs	r5, #0
    7430:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    7432:	4628      	mov	r0, r5
    7434:	e003      	b.n	743e <_svfprintf_r+0x1a2e>
    7436:	3001      	adds	r0, #1
    7438:	3101      	adds	r1, #1
    743a:	2bff      	cmp	r3, #255	; 0xff
    743c:	d008      	beq.n	7450 <_svfprintf_r+0x1a40>
    743e:	4293      	cmp	r3, r2
    7440:	da06      	bge.n	7450 <_svfprintf_r+0x1a40>
    7442:	1ad2      	subs	r2, r2, r3
    7444:	784b      	ldrb	r3, [r1, #1]
    7446:	2b00      	cmp	r3, #0
    7448:	d1f5      	bne.n	7436 <_svfprintf_r+0x1a26>
    744a:	780b      	ldrb	r3, [r1, #0]
    744c:	3501      	adds	r5, #1
    744e:	e7f4      	b.n	743a <_svfprintf_r+0x1a2a>
    7450:	920c      	str	r2, [sp, #48]	; 0x30
    7452:	9113      	str	r1, [sp, #76]	; 0x4c
    7454:	900d      	str	r0, [sp, #52]	; 0x34
    7456:	950f      	str	r5, [sp, #60]	; 0x3c
    7458:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    745a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    745c:	9916      	ldr	r1, [sp, #88]	; 0x58
    745e:	4413      	add	r3, r2
    7460:	9a05      	ldr	r2, [sp, #20]
    7462:	fb01 2303 	mla	r3, r1, r3, r2
    7466:	9305      	str	r3, [sp, #20]
    7468:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    746c:	9302      	str	r3, [sp, #8]
    746e:	e5d5      	b.n	701c <_svfprintf_r+0x160c>
    7470:	9b10      	ldr	r3, [sp, #64]	; 0x40
    7472:	18d3      	adds	r3, r2, r3
    7474:	4419      	add	r1, r3
    7476:	2366      	movs	r3, #102	; 0x66
    7478:	9105      	str	r1, [sp, #20]
    747a:	930b      	str	r3, [sp, #44]	; 0x2c
    747c:	e72d      	b.n	72da <_svfprintf_r+0x18ca>
    747e:	f1c3 0301 	rsb	r3, r3, #1
    7482:	441a      	add	r2, r3
    7484:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    7488:	9302      	str	r3, [sp, #8]
    748a:	2367      	movs	r3, #103	; 0x67
    748c:	9205      	str	r2, [sp, #20]
    748e:	930b      	str	r3, [sp, #44]	; 0x2c
    7490:	e698      	b.n	71c4 <_svfprintf_r+0x17b4>
    7492:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    7496:	e759      	b.n	734c <_svfprintf_r+0x193c>
    7498:	9b03      	ldr	r3, [sp, #12]
    749a:	f8dd 9008 	ldr.w	r9, [sp, #8]
    749e:	f8dd 801c 	ldr.w	r8, [sp, #28]
    74a2:	9305      	str	r3, [sp, #20]
    74a4:	e4b4      	b.n	6e10 <_svfprintf_r+0x1400>
    74a6:	ee18 3a90 	vmov	r3, s17
    74aa:	2b00      	cmp	r3, #0
    74ac:	bfb4      	ite	lt
    74ae:	212d      	movlt	r1, #45	; 0x2d
    74b0:	f89d 1067 	ldrbge.w	r1, [sp, #103]	; 0x67
    74b4:	4c25      	ldr	r4, [pc, #148]	; (754c <_svfprintf_r+0x1b3c>)
    74b6:	4b26      	ldr	r3, [pc, #152]	; (7550 <_svfprintf_r+0x1b40>)
    74b8:	bfb8      	it	lt
    74ba:	f88d 1067 	strblt.w	r1, [sp, #103]	; 0x67
    74be:	f028 0880 	bic.w	r8, r8, #128	; 0x80
    74c2:	f7fe bc79 	b.w	5db8 <_svfprintf_r+0x3a8>
    74c6:	9b03      	ldr	r3, [sp, #12]
    74c8:	9302      	str	r3, [sp, #8]
    74ca:	9305      	str	r3, [sp, #20]
    74cc:	2373      	movs	r3, #115	; 0x73
    74ce:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    74d2:	9003      	str	r0, [sp, #12]
    74d4:	900f      	str	r0, [sp, #60]	; 0x3c
    74d6:	900d      	str	r0, [sp, #52]	; 0x34
    74d8:	930b      	str	r3, [sp, #44]	; 0x2c
    74da:	f7fe bc7a 	b.w	5dd2 <_svfprintf_r+0x3c2>
    74de:	2302      	movs	r3, #2
    74e0:	9314      	str	r3, [sp, #80]	; 0x50
    74e2:	e584      	b.n	6fee <_svfprintf_r+0x15de>
    74e4:	9a03      	ldr	r2, [sp, #12]
    74e6:	4313      	orrs	r3, r2
    74e8:	d105      	bne.n	74f6 <_svfprintf_r+0x1ae6>
    74ea:	2301      	movs	r3, #1
    74ec:	2266      	movs	r2, #102	; 0x66
    74ee:	9302      	str	r3, [sp, #8]
    74f0:	920b      	str	r2, [sp, #44]	; 0x2c
    74f2:	9305      	str	r3, [sp, #20]
    74f4:	e666      	b.n	71c4 <_svfprintf_r+0x17b4>
    74f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    74f8:	3301      	adds	r3, #1
    74fa:	441a      	add	r2, r3
    74fc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    7500:	9302      	str	r3, [sp, #8]
    7502:	2366      	movs	r3, #102	; 0x66
    7504:	9205      	str	r2, [sp, #20]
    7506:	930b      	str	r3, [sp, #44]	; 0x2c
    7508:	e65c      	b.n	71c4 <_svfprintf_r+0x17b4>
    750a:	9a08      	ldr	r2, [sp, #32]
    750c:	f899 3001 	ldrb.w	r3, [r9, #1]
    7510:	4689      	mov	r9, r1
    7512:	f852 1b04 	ldr.w	r1, [r2], #4
    7516:	9208      	str	r2, [sp, #32]
    7518:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
    751c:	9103      	str	r1, [sp, #12]
    751e:	f7fe bad3 	b.w	5ac8 <_svfprintf_r+0xb8>
    7522:	2300      	movs	r3, #0
    7524:	930f      	str	r3, [sp, #60]	; 0x3c
    7526:	930d      	str	r3, [sp, #52]	; 0x34
    7528:	e796      	b.n	7458 <_svfprintf_r+0x1a48>
    752a:	230c      	movs	r3, #12
    752c:	f8cb 3000 	str.w	r3, [fp]
    7530:	f04f 33ff 	mov.w	r3, #4294967295
    7534:	9304      	str	r3, [sp, #16]
    7536:	f7fe bb81 	b.w	5c3c <_svfprintf_r+0x22c>
    753a:	ee1b 2a10 	vmov	r2, s22
    753e:	8993      	ldrh	r3, [r2, #12]
    7540:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    7544:	8193      	strh	r3, [r2, #12]
    7546:	f7fe bec8 	b.w	62da <_svfprintf_r+0x8ca>
    754a:	bf00      	nop
    754c:	20000630 	.word	0x20000630
    7550:	200003a8 	.word	0x200003a8

00007554 <_fclose_r>:
    7554:	b570      	push	{r4, r5, r6, lr}
    7556:	2900      	cmp	r1, #0
    7558:	d04b      	beq.n	75f2 <_fclose_r+0x9e>
    755a:	4606      	mov	r6, r0
    755c:	460c      	mov	r4, r1
    755e:	b110      	cbz	r0, 7566 <_fclose_r+0x12>
    7560:	6b43      	ldr	r3, [r0, #52]	; 0x34
    7562:	2b00      	cmp	r3, #0
    7564:	d048      	beq.n	75f8 <_fclose_r+0xa4>
    7566:	6e63      	ldr	r3, [r4, #100]	; 0x64
    7568:	07d8      	lsls	r0, r3, #31
    756a:	d534      	bpl.n	75d6 <_fclose_r+0x82>
    756c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    7570:	2b00      	cmp	r3, #0
    7572:	d03e      	beq.n	75f2 <_fclose_r+0x9e>
    7574:	4621      	mov	r1, r4
    7576:	4630      	mov	r0, r6
    7578:	f000 f850 	bl	761c <__sflush_r>
    757c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    757e:	4605      	mov	r5, r0
    7580:	b133      	cbz	r3, 7590 <_fclose_r+0x3c>
    7582:	69e1      	ldr	r1, [r4, #28]
    7584:	4630      	mov	r0, r6
    7586:	4798      	blx	r3
    7588:	2800      	cmp	r0, #0
    758a:	bfb8      	it	lt
    758c:	f04f 35ff 	movlt.w	r5, #4294967295
    7590:	89a3      	ldrh	r3, [r4, #12]
    7592:	061a      	lsls	r2, r3, #24
    7594:	d43c      	bmi.n	7610 <_fclose_r+0xbc>
    7596:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7598:	b141      	cbz	r1, 75ac <_fclose_r+0x58>
    759a:	f104 0340 	add.w	r3, r4, #64	; 0x40
    759e:	4299      	cmp	r1, r3
    75a0:	d002      	beq.n	75a8 <_fclose_r+0x54>
    75a2:	4630      	mov	r0, r6
    75a4:	f7fd fd4e 	bl	5044 <_free_r>
    75a8:	2300      	movs	r3, #0
    75aa:	6323      	str	r3, [r4, #48]	; 0x30
    75ac:	6c61      	ldr	r1, [r4, #68]	; 0x44
    75ae:	b121      	cbz	r1, 75ba <_fclose_r+0x66>
    75b0:	4630      	mov	r0, r6
    75b2:	f7fd fd47 	bl	5044 <_free_r>
    75b6:	2300      	movs	r3, #0
    75b8:	6463      	str	r3, [r4, #68]	; 0x44
    75ba:	f7fc ff59 	bl	4470 <__sfp_lock_acquire>
    75be:	6e63      	ldr	r3, [r4, #100]	; 0x64
    75c0:	2200      	movs	r2, #0
    75c2:	07db      	lsls	r3, r3, #31
    75c4:	81a2      	strh	r2, [r4, #12]
    75c6:	d51f      	bpl.n	7608 <_fclose_r+0xb4>
    75c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    75ca:	f7fd fa4f 	bl	4a6c <__retarget_lock_close_recursive>
    75ce:	f7fc ff55 	bl	447c <__sfp_lock_release>
    75d2:	4628      	mov	r0, r5
    75d4:	bd70      	pop	{r4, r5, r6, pc}
    75d6:	89a3      	ldrh	r3, [r4, #12]
    75d8:	0599      	lsls	r1, r3, #22
    75da:	d4cb      	bmi.n	7574 <_fclose_r+0x20>
    75dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
    75de:	f7fd fa47 	bl	4a70 <__retarget_lock_acquire_recursive>
    75e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    75e6:	2b00      	cmp	r3, #0
    75e8:	d1c4      	bne.n	7574 <_fclose_r+0x20>
    75ea:	6e65      	ldr	r5, [r4, #100]	; 0x64
    75ec:	f015 0501 	ands.w	r5, r5, #1
    75f0:	d005      	beq.n	75fe <_fclose_r+0xaa>
    75f2:	2500      	movs	r5, #0
    75f4:	4628      	mov	r0, r5
    75f6:	bd70      	pop	{r4, r5, r6, pc}
    75f8:	f7fc ff1c 	bl	4434 <__sinit>
    75fc:	e7b3      	b.n	7566 <_fclose_r+0x12>
    75fe:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7600:	f7fd fa38 	bl	4a74 <__retarget_lock_release_recursive>
    7604:	4628      	mov	r0, r5
    7606:	bd70      	pop	{r4, r5, r6, pc}
    7608:	6da0      	ldr	r0, [r4, #88]	; 0x58
    760a:	f7fd fa33 	bl	4a74 <__retarget_lock_release_recursive>
    760e:	e7db      	b.n	75c8 <_fclose_r+0x74>
    7610:	6921      	ldr	r1, [r4, #16]
    7612:	4630      	mov	r0, r6
    7614:	f7fd fd16 	bl	5044 <_free_r>
    7618:	e7bd      	b.n	7596 <_fclose_r+0x42>
    761a:	bf00      	nop

0000761c <__sflush_r>:
    761c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
    7620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7624:	460c      	mov	r4, r1
    7626:	0711      	lsls	r1, r2, #28
    7628:	4680      	mov	r8, r0
    762a:	d447      	bmi.n	76bc <__sflush_r+0xa0>
    762c:	6863      	ldr	r3, [r4, #4]
    762e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    7632:	2b00      	cmp	r3, #0
    7634:	81a2      	strh	r2, [r4, #12]
    7636:	dd5e      	ble.n	76f6 <__sflush_r+0xda>
    7638:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    763a:	2d00      	cmp	r5, #0
    763c:	d058      	beq.n	76f0 <__sflush_r+0xd4>
    763e:	2300      	movs	r3, #0
    7640:	f8d8 6000 	ldr.w	r6, [r8]
    7644:	f8c8 3000 	str.w	r3, [r8]
    7648:	b293      	uxth	r3, r2
    764a:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    764e:	d156      	bne.n	76fe <__sflush_r+0xe2>
    7650:	2301      	movs	r3, #1
    7652:	69e1      	ldr	r1, [r4, #28]
    7654:	4640      	mov	r0, r8
    7656:	47a8      	blx	r5
    7658:	1c43      	adds	r3, r0, #1
    765a:	d067      	beq.n	772c <__sflush_r+0x110>
    765c:	89a3      	ldrh	r3, [r4, #12]
    765e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    7660:	075f      	lsls	r7, r3, #29
    7662:	d505      	bpl.n	7670 <__sflush_r+0x54>
    7664:	6863      	ldr	r3, [r4, #4]
    7666:	1ac0      	subs	r0, r0, r3
    7668:	6b23      	ldr	r3, [r4, #48]	; 0x30
    766a:	b10b      	cbz	r3, 7670 <__sflush_r+0x54>
    766c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    766e:	1ac0      	subs	r0, r0, r3
    7670:	69e1      	ldr	r1, [r4, #28]
    7672:	4602      	mov	r2, r0
    7674:	2300      	movs	r3, #0
    7676:	4640      	mov	r0, r8
    7678:	47a8      	blx	r5
    767a:	1c41      	adds	r1, r0, #1
    767c:	d141      	bne.n	7702 <__sflush_r+0xe6>
    767e:	f8d8 3000 	ldr.w	r3, [r8]
    7682:	2b00      	cmp	r3, #0
    7684:	d03d      	beq.n	7702 <__sflush_r+0xe6>
    7686:	2b1d      	cmp	r3, #29
    7688:	d001      	beq.n	768e <__sflush_r+0x72>
    768a:	2b16      	cmp	r3, #22
    768c:	d156      	bne.n	773c <__sflush_r+0x120>
    768e:	89a3      	ldrh	r3, [r4, #12]
    7690:	6922      	ldr	r2, [r4, #16]
    7692:	6022      	str	r2, [r4, #0]
    7694:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    7698:	2100      	movs	r1, #0
    769a:	6061      	str	r1, [r4, #4]
    769c:	81a3      	strh	r3, [r4, #12]
    769e:	6b21      	ldr	r1, [r4, #48]	; 0x30
    76a0:	f8c8 6000 	str.w	r6, [r8]
    76a4:	b321      	cbz	r1, 76f0 <__sflush_r+0xd4>
    76a6:	f104 0340 	add.w	r3, r4, #64	; 0x40
    76aa:	4299      	cmp	r1, r3
    76ac:	d002      	beq.n	76b4 <__sflush_r+0x98>
    76ae:	4640      	mov	r0, r8
    76b0:	f7fd fcc8 	bl	5044 <_free_r>
    76b4:	2000      	movs	r0, #0
    76b6:	6320      	str	r0, [r4, #48]	; 0x30
    76b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    76bc:	6926      	ldr	r6, [r4, #16]
    76be:	b1be      	cbz	r6, 76f0 <__sflush_r+0xd4>
    76c0:	b293      	uxth	r3, r2
    76c2:	6825      	ldr	r5, [r4, #0]
    76c4:	6026      	str	r6, [r4, #0]
    76c6:	079a      	lsls	r2, r3, #30
    76c8:	bf0c      	ite	eq
    76ca:	6963      	ldreq	r3, [r4, #20]
    76cc:	2300      	movne	r3, #0
    76ce:	1bad      	subs	r5, r5, r6
    76d0:	60a3      	str	r3, [r4, #8]
    76d2:	e00b      	b.n	76ec <__sflush_r+0xd0>
    76d4:	462b      	mov	r3, r5
    76d6:	4632      	mov	r2, r6
    76d8:	69e1      	ldr	r1, [r4, #28]
    76da:	6a67      	ldr	r7, [r4, #36]	; 0x24
    76dc:	4640      	mov	r0, r8
    76de:	47b8      	blx	r7
    76e0:	f1b0 0c00 	subs.w	ip, r0, #0
    76e4:	eba5 050c 	sub.w	r5, r5, ip
    76e8:	4466      	add	r6, ip
    76ea:	dd17      	ble.n	771c <__sflush_r+0x100>
    76ec:	2d00      	cmp	r5, #0
    76ee:	dcf1      	bgt.n	76d4 <__sflush_r+0xb8>
    76f0:	2000      	movs	r0, #0
    76f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    76f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    76f8:	2b00      	cmp	r3, #0
    76fa:	dc9d      	bgt.n	7638 <__sflush_r+0x1c>
    76fc:	e7f8      	b.n	76f0 <__sflush_r+0xd4>
    76fe:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7700:	e7ae      	b.n	7660 <__sflush_r+0x44>
    7702:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    7706:	6922      	ldr	r2, [r4, #16]
    7708:	6022      	str	r2, [r4, #0]
    770a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    770e:	81a3      	strh	r3, [r4, #12]
    7710:	2200      	movs	r2, #0
    7712:	04db      	lsls	r3, r3, #19
    7714:	6062      	str	r2, [r4, #4]
    7716:	d5c2      	bpl.n	769e <__sflush_r+0x82>
    7718:	6520      	str	r0, [r4, #80]	; 0x50
    771a:	e7c0      	b.n	769e <__sflush_r+0x82>
    771c:	89a3      	ldrh	r3, [r4, #12]
    771e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    7722:	f04f 30ff 	mov.w	r0, #4294967295
    7726:	81a3      	strh	r3, [r4, #12]
    7728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    772c:	f8d8 3000 	ldr.w	r3, [r8]
    7730:	2b00      	cmp	r3, #0
    7732:	d093      	beq.n	765c <__sflush_r+0x40>
    7734:	2b1d      	cmp	r3, #29
    7736:	d006      	beq.n	7746 <__sflush_r+0x12a>
    7738:	2b16      	cmp	r3, #22
    773a:	d004      	beq.n	7746 <__sflush_r+0x12a>
    773c:	89a3      	ldrh	r3, [r4, #12]
    773e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    7742:	81a3      	strh	r3, [r4, #12]
    7744:	e7d5      	b.n	76f2 <__sflush_r+0xd6>
    7746:	f8c8 6000 	str.w	r6, [r8]
    774a:	e7d1      	b.n	76f0 <__sflush_r+0xd4>

0000774c <_fflush_r>:
    774c:	b538      	push	{r3, r4, r5, lr}
    774e:	460c      	mov	r4, r1
    7750:	4605      	mov	r5, r0
    7752:	b108      	cbz	r0, 7758 <_fflush_r+0xc>
    7754:	6b43      	ldr	r3, [r0, #52]	; 0x34
    7756:	b303      	cbz	r3, 779a <_fflush_r+0x4e>
    7758:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
    775c:	b188      	cbz	r0, 7782 <_fflush_r+0x36>
    775e:	6e63      	ldr	r3, [r4, #100]	; 0x64
    7760:	07db      	lsls	r3, r3, #31
    7762:	d401      	bmi.n	7768 <_fflush_r+0x1c>
    7764:	0581      	lsls	r1, r0, #22
    7766:	d50f      	bpl.n	7788 <_fflush_r+0x3c>
    7768:	4628      	mov	r0, r5
    776a:	4621      	mov	r1, r4
    776c:	f7ff ff56 	bl	761c <__sflush_r>
    7770:	6e63      	ldr	r3, [r4, #100]	; 0x64
    7772:	07da      	lsls	r2, r3, #31
    7774:	4605      	mov	r5, r0
    7776:	d402      	bmi.n	777e <_fflush_r+0x32>
    7778:	89a3      	ldrh	r3, [r4, #12]
    777a:	059b      	lsls	r3, r3, #22
    777c:	d508      	bpl.n	7790 <_fflush_r+0x44>
    777e:	4628      	mov	r0, r5
    7780:	bd38      	pop	{r3, r4, r5, pc}
    7782:	4605      	mov	r5, r0
    7784:	4628      	mov	r0, r5
    7786:	bd38      	pop	{r3, r4, r5, pc}
    7788:	6da0      	ldr	r0, [r4, #88]	; 0x58
    778a:	f7fd f971 	bl	4a70 <__retarget_lock_acquire_recursive>
    778e:	e7eb      	b.n	7768 <_fflush_r+0x1c>
    7790:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7792:	f7fd f96f 	bl	4a74 <__retarget_lock_release_recursive>
    7796:	4628      	mov	r0, r5
    7798:	bd38      	pop	{r3, r4, r5, pc}
    779a:	f7fc fe4b 	bl	4434 <__sinit>
    779e:	e7db      	b.n	7758 <_fflush_r+0xc>

000077a0 <_localeconv_r>:
    77a0:	4800      	ldr	r0, [pc, #0]	; (77a4 <_localeconv_r+0x4>)
    77a2:	4770      	bx	lr
    77a4:	20001178 	.word	0x20001178
	...

000077b0 <memchr>:
    77b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    77b4:	2a10      	cmp	r2, #16
    77b6:	db2b      	blt.n	7810 <memchr+0x60>
    77b8:	f010 0f07 	tst.w	r0, #7
    77bc:	d008      	beq.n	77d0 <memchr+0x20>
    77be:	f810 3b01 	ldrb.w	r3, [r0], #1
    77c2:	3a01      	subs	r2, #1
    77c4:	428b      	cmp	r3, r1
    77c6:	d02d      	beq.n	7824 <memchr+0x74>
    77c8:	f010 0f07 	tst.w	r0, #7
    77cc:	b342      	cbz	r2, 7820 <memchr+0x70>
    77ce:	d1f6      	bne.n	77be <memchr+0xe>
    77d0:	b4f0      	push	{r4, r5, r6, r7}
    77d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    77d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    77da:	f022 0407 	bic.w	r4, r2, #7
    77de:	f07f 0700 	mvns.w	r7, #0
    77e2:	2300      	movs	r3, #0
    77e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    77e8:	3c08      	subs	r4, #8
    77ea:	ea85 0501 	eor.w	r5, r5, r1
    77ee:	ea86 0601 	eor.w	r6, r6, r1
    77f2:	fa85 f547 	uadd8	r5, r5, r7
    77f6:	faa3 f587 	sel	r5, r3, r7
    77fa:	fa86 f647 	uadd8	r6, r6, r7
    77fe:	faa5 f687 	sel	r6, r5, r7
    7802:	b98e      	cbnz	r6, 7828 <memchr+0x78>
    7804:	d1ee      	bne.n	77e4 <memchr+0x34>
    7806:	bcf0      	pop	{r4, r5, r6, r7}
    7808:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    780c:	f002 0207 	and.w	r2, r2, #7
    7810:	b132      	cbz	r2, 7820 <memchr+0x70>
    7812:	f810 3b01 	ldrb.w	r3, [r0], #1
    7816:	3a01      	subs	r2, #1
    7818:	ea83 0301 	eor.w	r3, r3, r1
    781c:	b113      	cbz	r3, 7824 <memchr+0x74>
    781e:	d1f8      	bne.n	7812 <memchr+0x62>
    7820:	2000      	movs	r0, #0
    7822:	4770      	bx	lr
    7824:	3801      	subs	r0, #1
    7826:	4770      	bx	lr
    7828:	2d00      	cmp	r5, #0
    782a:	bf06      	itte	eq
    782c:	4635      	moveq	r5, r6
    782e:	3803      	subeq	r0, #3
    7830:	3807      	subne	r0, #7
    7832:	f015 0f01 	tst.w	r5, #1
    7836:	d107      	bne.n	7848 <memchr+0x98>
    7838:	3001      	adds	r0, #1
    783a:	f415 7f80 	tst.w	r5, #256	; 0x100
    783e:	bf02      	ittt	eq
    7840:	3001      	addeq	r0, #1
    7842:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    7846:	3001      	addeq	r0, #1
    7848:	bcf0      	pop	{r4, r5, r6, r7}
    784a:	3801      	subs	r0, #1
    784c:	4770      	bx	lr
    784e:	bf00      	nop

00007850 <frexp>:
    7850:	b430      	push	{r4, r5}
    7852:	b082      	sub	sp, #8
    7854:	ed8d 0b00 	vstr	d0, [sp]
    7858:	9a01      	ldr	r2, [sp, #4]
    785a:	4c19      	ldr	r4, [pc, #100]	; (78c0 <frexp+0x70>)
    785c:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
    7860:	2100      	movs	r1, #0
    7862:	42a3      	cmp	r3, r4
    7864:	6001      	str	r1, [r0, #0]
    7866:	dc21      	bgt.n	78ac <frexp+0x5c>
    7868:	9c00      	ldr	r4, [sp, #0]
    786a:	431c      	orrs	r4, r3
    786c:	d01e      	beq.n	78ac <frexp+0x5c>
    786e:	4c15      	ldr	r4, [pc, #84]	; (78c4 <frexp+0x74>)
    7870:	4014      	ands	r4, r2
    7872:	b954      	cbnz	r4, 788a <frexp+0x3a>
    7874:	ed9f 7b10 	vldr	d7, [pc, #64]	; 78b8 <frexp+0x68>
    7878:	ee20 7b07 	vmul.f64	d7, d0, d7
    787c:	ed8d 7b00 	vstr	d7, [sp]
    7880:	9a01      	ldr	r2, [sp, #4]
    7882:	f06f 0135 	mvn.w	r1, #53	; 0x35
    7886:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
    788a:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
    788e:	e9dd 4500 	ldrd	r4, r5, [sp]
    7892:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
    7896:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
    789a:	151b      	asrs	r3, r3, #20
    789c:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
    78a0:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
    78a4:	e9cd 4500 	strd	r4, r5, [sp]
    78a8:	440b      	add	r3, r1
    78aa:	6003      	str	r3, [r0, #0]
    78ac:	ed9d 0b00 	vldr	d0, [sp]
    78b0:	b002      	add	sp, #8
    78b2:	bc30      	pop	{r4, r5}
    78b4:	4770      	bx	lr
    78b6:	bf00      	nop
    78b8:	00000000 	.word	0x00000000
    78bc:	43500000 	.word	0x43500000
    78c0:	7fefffff 	.word	0x7fefffff
    78c4:	7ff00000 	.word	0x7ff00000

000078c8 <__assert_func>:
    78c8:	b500      	push	{lr}
    78ca:	4c0b      	ldr	r4, [pc, #44]	; (78f8 <__assert_func+0x30>)
    78cc:	6825      	ldr	r5, [r4, #0]
    78ce:	4614      	mov	r4, r2
    78d0:	68ee      	ldr	r6, [r5, #12]
    78d2:	461a      	mov	r2, r3
    78d4:	b085      	sub	sp, #20
    78d6:	4603      	mov	r3, r0
    78d8:	460d      	mov	r5, r1
    78da:	b14c      	cbz	r4, 78f0 <__assert_func+0x28>
    78dc:	4907      	ldr	r1, [pc, #28]	; (78fc <__assert_func+0x34>)
    78de:	9500      	str	r5, [sp, #0]
    78e0:	e9cd 1401 	strd	r1, r4, [sp, #4]
    78e4:	4630      	mov	r0, r6
    78e6:	4906      	ldr	r1, [pc, #24]	; (7900 <__assert_func+0x38>)
    78e8:	f000 ff86 	bl	87f8 <fiprintf>
    78ec:	f7fa fd04 	bl	22f8 <abort>
    78f0:	4904      	ldr	r1, [pc, #16]	; (7904 <__assert_func+0x3c>)
    78f2:	460c      	mov	r4, r1
    78f4:	e7f3      	b.n	78de <__assert_func+0x16>
    78f6:	bf00      	nop
    78f8:	20001610 	.word	0x20001610
    78fc:	2000040c 	.word	0x2000040c
    7900:	2000041c 	.word	0x2000041c
    7904:	20000418 	.word	0x20000418

00007908 <_calloc_r>:
    7908:	b538      	push	{r3, r4, r5, lr}
    790a:	fba1 1402 	umull	r1, r4, r1, r2
    790e:	bb8c      	cbnz	r4, 7974 <_calloc_r+0x6c>
    7910:	f7fc f82e 	bl	3970 <_malloc_r>
    7914:	4605      	mov	r5, r0
    7916:	b1e0      	cbz	r0, 7952 <_calloc_r+0x4a>
    7918:	f850 2c04 	ldr.w	r2, [r0, #-4]
    791c:	f022 0203 	bic.w	r2, r2, #3
    7920:	3a04      	subs	r2, #4
    7922:	2a24      	cmp	r2, #36	; 0x24
    7924:	d817      	bhi.n	7956 <_calloc_r+0x4e>
    7926:	2a13      	cmp	r2, #19
    7928:	d91a      	bls.n	7960 <_calloc_r+0x58>
    792a:	2a1b      	cmp	r2, #27
    792c:	e9c0 4400 	strd	r4, r4, [r0]
    7930:	d91d      	bls.n	796e <_calloc_r+0x66>
    7932:	2a24      	cmp	r2, #36	; 0x24
    7934:	bf14      	ite	ne
    7936:	f100 0210 	addne.w	r2, r0, #16
    793a:	f100 0218 	addeq.w	r2, r0, #24
    793e:	f04f 0300 	mov.w	r3, #0
    7942:	e9c0 4402 	strd	r4, r4, [r0, #8]
    7946:	bf04      	itt	eq
    7948:	6104      	streq	r4, [r0, #16]
    794a:	6144      	streq	r4, [r0, #20]
    794c:	e9c2 3300 	strd	r3, r3, [r2]
    7950:	6093      	str	r3, [r2, #8]
    7952:	4628      	mov	r0, r5
    7954:	bd38      	pop	{r3, r4, r5, pc}
    7956:	4621      	mov	r1, r4
    7958:	f7fc ff26 	bl	47a8 <memset>
    795c:	4628      	mov	r0, r5
    795e:	bd38      	pop	{r3, r4, r5, pc}
    7960:	4602      	mov	r2, r0
    7962:	2300      	movs	r3, #0
    7964:	e9c2 3300 	strd	r3, r3, [r2]
    7968:	6093      	str	r3, [r2, #8]
    796a:	4628      	mov	r0, r5
    796c:	bd38      	pop	{r3, r4, r5, pc}
    796e:	f100 0208 	add.w	r2, r0, #8
    7972:	e7f6      	b.n	7962 <_calloc_r+0x5a>
    7974:	f7fd f84e 	bl	4a14 <__errno>
    7978:	230c      	movs	r3, #12
    797a:	2500      	movs	r5, #0
    797c:	6003      	str	r3, [r0, #0]
    797e:	e7e8      	b.n	7952 <_calloc_r+0x4a>

00007980 <quorem>:
    7980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7984:	6903      	ldr	r3, [r0, #16]
    7986:	690c      	ldr	r4, [r1, #16]
    7988:	42a3      	cmp	r3, r4
    798a:	b083      	sub	sp, #12
    798c:	f2c0 8087 	blt.w	7a9e <quorem+0x11e>
    7990:	3c01      	subs	r4, #1
    7992:	f101 0514 	add.w	r5, r1, #20
    7996:	00a3      	lsls	r3, r4, #2
    7998:	f100 0814 	add.w	r8, r0, #20
    799c:	9300      	str	r3, [sp, #0]
    799e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    79a2:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
    79a6:	3301      	adds	r3, #1
    79a8:	4681      	mov	r9, r0
    79aa:	429a      	cmp	r2, r3
    79ac:	eb08 0084 	add.w	r0, r8, r4, lsl #2
    79b0:	eb05 0784 	add.w	r7, r5, r4, lsl #2
    79b4:	9001      	str	r0, [sp, #4]
    79b6:	fbb2 f6f3 	udiv	r6, r2, r3
    79ba:	d33b      	bcc.n	7a34 <quorem+0xb4>
    79bc:	f04f 0c00 	mov.w	ip, #0
    79c0:	46ae      	mov	lr, r5
    79c2:	4640      	mov	r0, r8
    79c4:	46e2      	mov	sl, ip
    79c6:	4663      	mov	r3, ip
    79c8:	f85e bb04 	ldr.w	fp, [lr], #4
    79cc:	6802      	ldr	r2, [r0, #0]
    79ce:	fa1f fc8b 	uxth.w	ip, fp
    79d2:	fb06 330c 	mla	r3, r6, ip, r3
    79d6:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    79da:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
    79de:	fb06 cc0b 	mla	ip, r6, fp, ip
    79e2:	b29b      	uxth	r3, r3
    79e4:	ebaa 0303 	sub.w	r3, sl, r3
    79e8:	fa1f fa8c 	uxth.w	sl, ip
    79ec:	fa13 f382 	uxtah	r3, r3, r2
    79f0:	ebca 4212 	rsb	r2, sl, r2, lsr #16
    79f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
    79f8:	b29b      	uxth	r3, r3
    79fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    79fe:	4577      	cmp	r7, lr
    7a00:	f840 3b04 	str.w	r3, [r0], #4
    7a04:	ea4f 4a22 	mov.w	sl, r2, asr #16
    7a08:	ea4f 431c 	mov.w	r3, ip, lsr #16
    7a0c:	d2dc      	bcs.n	79c8 <quorem+0x48>
    7a0e:	9b00      	ldr	r3, [sp, #0]
    7a10:	f858 3003 	ldr.w	r3, [r8, r3]
    7a14:	b973      	cbnz	r3, 7a34 <quorem+0xb4>
    7a16:	9b01      	ldr	r3, [sp, #4]
    7a18:	3b04      	subs	r3, #4
    7a1a:	4598      	cmp	r8, r3
    7a1c:	d304      	bcc.n	7a28 <quorem+0xa8>
    7a1e:	e007      	b.n	7a30 <quorem+0xb0>
    7a20:	4598      	cmp	r8, r3
    7a22:	f104 34ff 	add.w	r4, r4, #4294967295
    7a26:	d203      	bcs.n	7a30 <quorem+0xb0>
    7a28:	f853 2904 	ldr.w	r2, [r3], #-4
    7a2c:	2a00      	cmp	r2, #0
    7a2e:	d0f7      	beq.n	7a20 <quorem+0xa0>
    7a30:	f8c9 4010 	str.w	r4, [r9, #16]
    7a34:	4648      	mov	r0, r9
    7a36:	f7fd fea7 	bl	5788 <__mcmp>
    7a3a:	2800      	cmp	r0, #0
    7a3c:	db2b      	blt.n	7a96 <quorem+0x116>
    7a3e:	3601      	adds	r6, #1
    7a40:	4641      	mov	r1, r8
    7a42:	2300      	movs	r3, #0
    7a44:	f855 0b04 	ldr.w	r0, [r5], #4
    7a48:	f8d1 c000 	ldr.w	ip, [r1]
    7a4c:	b282      	uxth	r2, r0
    7a4e:	1a9a      	subs	r2, r3, r2
    7a50:	0c03      	lsrs	r3, r0, #16
    7a52:	fa12 f28c 	uxtah	r2, r2, ip
    7a56:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
    7a5a:	eb03 4322 	add.w	r3, r3, r2, asr #16
    7a5e:	b292      	uxth	r2, r2
    7a60:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    7a64:	42af      	cmp	r7, r5
    7a66:	f841 2b04 	str.w	r2, [r1], #4
    7a6a:	ea4f 4323 	mov.w	r3, r3, asr #16
    7a6e:	d2e9      	bcs.n	7a44 <quorem+0xc4>
    7a70:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
    7a74:	eb08 0384 	add.w	r3, r8, r4, lsl #2
    7a78:	b96a      	cbnz	r2, 7a96 <quorem+0x116>
    7a7a:	3b04      	subs	r3, #4
    7a7c:	4598      	cmp	r8, r3
    7a7e:	d304      	bcc.n	7a8a <quorem+0x10a>
    7a80:	e007      	b.n	7a92 <quorem+0x112>
    7a82:	4598      	cmp	r8, r3
    7a84:	f104 34ff 	add.w	r4, r4, #4294967295
    7a88:	d203      	bcs.n	7a92 <quorem+0x112>
    7a8a:	f853 2904 	ldr.w	r2, [r3], #-4
    7a8e:	2a00      	cmp	r2, #0
    7a90:	d0f7      	beq.n	7a82 <quorem+0x102>
    7a92:	f8c9 4010 	str.w	r4, [r9, #16]
    7a96:	4630      	mov	r0, r6
    7a98:	b003      	add	sp, #12
    7a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7a9e:	2000      	movs	r0, #0
    7aa0:	b003      	add	sp, #12
    7aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7aa6:	bf00      	nop

00007aa8 <_dtoa_r>:
    7aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7aac:	ed2d 8b02 	vpush	{d8}
    7ab0:	b08f      	sub	sp, #60	; 0x3c
    7ab2:	ed8d 0b02 	vstr	d0, [sp, #8]
    7ab6:	9101      	str	r1, [sp, #4]
    7ab8:	6b81      	ldr	r1, [r0, #56]	; 0x38
    7aba:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    7abc:	9305      	str	r3, [sp, #20]
    7abe:	ec57 6b10 	vmov	r6, r7, d0
    7ac2:	4604      	mov	r4, r0
    7ac4:	4693      	mov	fp, r2
    7ac6:	b141      	cbz	r1, 7ada <_dtoa_r+0x32>
    7ac8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    7aca:	604a      	str	r2, [r1, #4]
    7acc:	2301      	movs	r3, #1
    7ace:	4093      	lsls	r3, r2
    7ad0:	608b      	str	r3, [r1, #8]
    7ad2:	f7fd fbf9 	bl	52c8 <_Bfree>
    7ad6:	2300      	movs	r3, #0
    7ad8:	63a3      	str	r3, [r4, #56]	; 0x38
    7ada:	f1b7 0800 	subs.w	r8, r7, #0
    7ade:	bfb4      	ite	lt
    7ae0:	2301      	movlt	r3, #1
    7ae2:	2300      	movge	r3, #0
    7ae4:	602b      	str	r3, [r5, #0]
    7ae6:	4bbe      	ldr	r3, [pc, #760]	; (7de0 <_dtoa_r+0x338>)
    7ae8:	bfbc      	itt	lt
    7aea:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
    7aee:	f8cd 800c 	strlt.w	r8, [sp, #12]
    7af2:	ea33 0308 	bics.w	r3, r3, r8
    7af6:	f000 809f 	beq.w	7c38 <_dtoa_r+0x190>
    7afa:	ed9d 8b02 	vldr	d8, [sp, #8]
    7afe:	eeb5 8b40 	vcmp.f64	d8, #0.0
    7b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7b06:	d111      	bne.n	7b2c <_dtoa_r+0x84>
    7b08:	9a05      	ldr	r2, [sp, #20]
    7b0a:	2301      	movs	r3, #1
    7b0c:	6013      	str	r3, [r2, #0]
    7b0e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    7b10:	2b00      	cmp	r3, #0
    7b12:	f000 823f 	beq.w	7f94 <_dtoa_r+0x4ec>
    7b16:	4bb3      	ldr	r3, [pc, #716]	; (7de4 <_dtoa_r+0x33c>)
    7b18:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    7b1a:	6013      	str	r3, [r2, #0]
    7b1c:	3b01      	subs	r3, #1
    7b1e:	9300      	str	r3, [sp, #0]
    7b20:	9800      	ldr	r0, [sp, #0]
    7b22:	b00f      	add	sp, #60	; 0x3c
    7b24:	ecbd 8b02 	vpop	{d8}
    7b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7b2c:	aa0c      	add	r2, sp, #48	; 0x30
    7b2e:	a90d      	add	r1, sp, #52	; 0x34
    7b30:	4620      	mov	r0, r4
    7b32:	eeb0 0b48 	vmov.f64	d0, d8
    7b36:	f7fd fef3 	bl	5920 <__d2b>
    7b3a:	ea5f 5318 	movs.w	r3, r8, lsr #20
    7b3e:	4605      	mov	r5, r0
    7b40:	f040 8092 	bne.w	7c68 <_dtoa_r+0x1c0>
    7b44:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
    7b48:	440b      	add	r3, r1
    7b4a:	f203 4232 	addw	r2, r3, #1074	; 0x432
    7b4e:	2a20      	cmp	r2, #32
    7b50:	f340 82fa 	ble.w	8148 <_dtoa_r+0x6a0>
    7b54:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
    7b58:	fa08 f802 	lsl.w	r8, r8, r2
    7b5c:	f203 4212 	addw	r2, r3, #1042	; 0x412
    7b60:	40d6      	lsrs	r6, r2
    7b62:	ea48 0206 	orr.w	r2, r8, r6
    7b66:	ee07 2a10 	vmov	s14, r2
    7b6a:	eeb8 7b47 	vcvt.f64.u32	d7, s14
    7b6e:	1e58      	subs	r0, r3, #1
    7b70:	ee17 6a90 	vmov	r6, s15
    7b74:	ec53 2b17 	vmov	r2, r3, d7
    7b78:	f04f 0a01 	mov.w	sl, #1
    7b7c:	f1a6 73f8 	sub.w	r3, r6, #32505856	; 0x1f00000
    7b80:	ed9f 3b91 	vldr	d3, [pc, #580]	; 7dc8 <_dtoa_r+0x320>
    7b84:	ed9f 7b92 	vldr	d7, [pc, #584]	; 7dd0 <_dtoa_r+0x328>
    7b88:	ed9f 5b93 	vldr	d5, [pc, #588]	; 7dd8 <_dtoa_r+0x330>
    7b8c:	ee06 0a90 	vmov	s13, r0
    7b90:	ec43 2b12 	vmov	d2, r2, r3
    7b94:	eeb8 4be6 	vcvt.f64.s32	d4, s13
    7b98:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
    7b9c:	ee32 6b46 	vsub.f64	d6, d2, d6
    7ba0:	eea6 7b03 	vfma.f64	d7, d6, d3
    7ba4:	eea4 7b05 	vfma.f64	d7, d4, d5
    7ba8:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    7bac:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    7bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7bb4:	ee16 7a90 	vmov	r7, s13
    7bb8:	d508      	bpl.n	7bcc <_dtoa_r+0x124>
    7bba:	eeb8 6be6 	vcvt.f64.s32	d6, s13
    7bbe:	eeb4 6b47 	vcmp.f64	d6, d7
    7bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7bc6:	bf18      	it	ne
    7bc8:	f107 37ff 	addne.w	r7, r7, #4294967295
    7bcc:	2f16      	cmp	r7, #22
    7bce:	f200 8145 	bhi.w	7e5c <_dtoa_r+0x3b4>
    7bd2:	4b85      	ldr	r3, [pc, #532]	; (7de8 <_dtoa_r+0x340>)
    7bd4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    7bd8:	ed93 7b00 	vldr	d7, [r3]
    7bdc:	eeb4 8bc7 	vcmpe.f64	d8, d7
    7be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7be4:	d557      	bpl.n	7c96 <_dtoa_r+0x1ee>
    7be6:	1a09      	subs	r1, r1, r0
    7be8:	2300      	movs	r3, #0
    7bea:	f1b1 0801 	subs.w	r8, r1, #1
    7bee:	f107 37ff 	add.w	r7, r7, #4294967295
    7bf2:	930a      	str	r3, [sp, #40]	; 0x28
    7bf4:	f100 8139 	bmi.w	7e6a <_dtoa_r+0x3c2>
    7bf8:	2300      	movs	r3, #0
    7bfa:	9306      	str	r3, [sp, #24]
    7bfc:	2f00      	cmp	r7, #0
    7bfe:	da52      	bge.n	7ca6 <_dtoa_r+0x1fe>
    7c00:	9b06      	ldr	r3, [sp, #24]
    7c02:	9704      	str	r7, [sp, #16]
    7c04:	1bdb      	subs	r3, r3, r7
    7c06:	9306      	str	r3, [sp, #24]
    7c08:	427b      	negs	r3, r7
    7c0a:	9308      	str	r3, [sp, #32]
    7c0c:	9b01      	ldr	r3, [sp, #4]
    7c0e:	2b09      	cmp	r3, #9
    7c10:	f04f 0700 	mov.w	r7, #0
    7c14:	d84e      	bhi.n	7cb4 <_dtoa_r+0x20c>
    7c16:	2b05      	cmp	r3, #5
    7c18:	f340 829d 	ble.w	8156 <_dtoa_r+0x6ae>
    7c1c:	3b04      	subs	r3, #4
    7c1e:	9301      	str	r3, [sp, #4]
    7c20:	2600      	movs	r6, #0
    7c22:	9b01      	ldr	r3, [sp, #4]
    7c24:	1e9a      	subs	r2, r3, #2
    7c26:	2a03      	cmp	r2, #3
    7c28:	f200 8125 	bhi.w	7e76 <_dtoa_r+0x3ce>
    7c2c:	e8df f012 	tbh	[pc, r2, lsl #1]
    7c30:	03a703aa 	.word	0x03a703aa
    7c34:	037e039d 	.word	0x037e039d
    7c38:	9a05      	ldr	r2, [sp, #20]
    7c3a:	f3c8 0813 	ubfx	r8, r8, #0, #20
    7c3e:	f242 730f 	movw	r3, #9999	; 0x270f
    7c42:	ea58 0806 	orrs.w	r8, r8, r6
    7c46:	6013      	str	r3, [r2, #0]
    7c48:	d11e      	bne.n	7c88 <_dtoa_r+0x1e0>
    7c4a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    7c4c:	2b00      	cmp	r3, #0
    7c4e:	f000 8591 	beq.w	8774 <_dtoa_r+0xccc>
    7c52:	4b66      	ldr	r3, [pc, #408]	; (7dec <_dtoa_r+0x344>)
    7c54:	9300      	str	r3, [sp, #0]
    7c56:	3308      	adds	r3, #8
    7c58:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    7c5a:	9800      	ldr	r0, [sp, #0]
    7c5c:	6013      	str	r3, [r2, #0]
    7c5e:	b00f      	add	sp, #60	; 0x3c
    7c60:	ecbd 8b02 	vpop	{d8}
    7c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7c68:	ee18 6a90 	vmov	r6, s17
    7c6c:	f3c6 0613 	ubfx	r6, r6, #0, #20
    7c70:	f2a3 30ff 	subw	r0, r3, #1023	; 0x3ff
    7c74:	ec53 2b18 	vmov	r2, r3, d8
    7c78:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
    7c7c:	990c      	ldr	r1, [sp, #48]	; 0x30
    7c7e:	f04f 0a00 	mov.w	sl, #0
    7c82:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    7c86:	e77b      	b.n	7b80 <_dtoa_r+0xd8>
    7c88:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    7c8a:	2b00      	cmp	r3, #0
    7c8c:	f040 833b 	bne.w	8306 <_dtoa_r+0x85e>
    7c90:	4b57      	ldr	r3, [pc, #348]	; (7df0 <_dtoa_r+0x348>)
    7c92:	9300      	str	r3, [sp, #0]
    7c94:	e744      	b.n	7b20 <_dtoa_r+0x78>
    7c96:	1a09      	subs	r1, r1, r0
    7c98:	2300      	movs	r3, #0
    7c9a:	f1b1 0801 	subs.w	r8, r1, #1
    7c9e:	930a      	str	r3, [sp, #40]	; 0x28
    7ca0:	f100 80e3 	bmi.w	7e6a <_dtoa_r+0x3c2>
    7ca4:	9306      	str	r3, [sp, #24]
    7ca6:	2300      	movs	r3, #0
    7ca8:	9308      	str	r3, [sp, #32]
    7caa:	9b01      	ldr	r3, [sp, #4]
    7cac:	9704      	str	r7, [sp, #16]
    7cae:	2b09      	cmp	r3, #9
    7cb0:	44b8      	add	r8, r7
    7cb2:	d9b0      	bls.n	7c16 <_dtoa_r+0x16e>
    7cb4:	2300      	movs	r3, #0
    7cb6:	2601      	movs	r6, #1
    7cb8:	9301      	str	r3, [sp, #4]
    7cba:	9607      	str	r6, [sp, #28]
    7cbc:	f04f 39ff 	mov.w	r9, #4294967295
    7cc0:	469b      	mov	fp, r3
    7cc2:	2100      	movs	r1, #0
    7cc4:	63e1      	str	r1, [r4, #60]	; 0x3c
    7cc6:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    7cca:	4620      	mov	r0, r4
    7ccc:	f7fd fad6 	bl	527c <_Balloc>
    7cd0:	9000      	str	r0, [sp, #0]
    7cd2:	2800      	cmp	r0, #0
    7cd4:	f000 8540 	beq.w	8758 <_dtoa_r+0xcb0>
    7cd8:	9b00      	ldr	r3, [sp, #0]
    7cda:	63a3      	str	r3, [r4, #56]	; 0x38
    7cdc:	f1b9 0f0e 	cmp.w	r9, #14
    7ce0:	f200 80dc 	bhi.w	7e9c <_dtoa_r+0x3f4>
    7ce4:	2e00      	cmp	r6, #0
    7ce6:	f000 80d9 	beq.w	7e9c <_dtoa_r+0x3f4>
    7cea:	9b04      	ldr	r3, [sp, #16]
    7cec:	2b00      	cmp	r3, #0
    7cee:	f340 83de 	ble.w	84ae <_dtoa_r+0xa06>
    7cf2:	4a3d      	ldr	r2, [pc, #244]	; (7de8 <_dtoa_r+0x340>)
    7cf4:	f003 010f 	and.w	r1, r3, #15
    7cf8:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    7cfc:	ed92 7b00 	vldr	d7, [r2]
    7d00:	111a      	asrs	r2, r3, #4
    7d02:	05db      	lsls	r3, r3, #23
    7d04:	f140 8382 	bpl.w	840c <_dtoa_r+0x964>
    7d08:	493a      	ldr	r1, [pc, #232]	; (7df4 <_dtoa_r+0x34c>)
    7d0a:	ed91 6b08 	vldr	d6, [r1, #32]
    7d0e:	f002 020f 	and.w	r2, r2, #15
    7d12:	2003      	movs	r0, #3
    7d14:	ee88 5b06 	vdiv.f64	d5, d8, d6
    7d18:	b15a      	cbz	r2, 7d32 <_dtoa_r+0x28a>
    7d1a:	4936      	ldr	r1, [pc, #216]	; (7df4 <_dtoa_r+0x34c>)
    7d1c:	07d6      	lsls	r6, r2, #31
    7d1e:	d504      	bpl.n	7d2a <_dtoa_r+0x282>
    7d20:	ed91 6b00 	vldr	d6, [r1]
    7d24:	3001      	adds	r0, #1
    7d26:	ee27 7b06 	vmul.f64	d7, d7, d6
    7d2a:	1052      	asrs	r2, r2, #1
    7d2c:	f101 0108 	add.w	r1, r1, #8
    7d30:	d1f4      	bne.n	7d1c <_dtoa_r+0x274>
    7d32:	ee85 6b07 	vdiv.f64	d6, d5, d7
    7d36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7d38:	b13b      	cbz	r3, 7d4a <_dtoa_r+0x2a2>
    7d3a:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    7d3e:	eeb4 6bc7 	vcmpe.f64	d6, d7
    7d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7d46:	f100 84ae 	bmi.w	86a6 <_dtoa_r+0xbfe>
    7d4a:	ee07 0a90 	vmov	s15, r0
    7d4e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
    7d52:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    7d56:	eea5 7b06 	vfma.f64	d7, d5, d6
    7d5a:	ee17 2a90 	vmov	r2, s15
    7d5e:	ec51 0b17 	vmov	r0, r1, d7
    7d62:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
    7d66:	f1b9 0f00 	cmp.w	r9, #0
    7d6a:	f000 8388 	beq.w	847e <_dtoa_r+0x9d6>
    7d6e:	9e04      	ldr	r6, [sp, #16]
    7d70:	464a      	mov	r2, r9
    7d72:	9b07      	ldr	r3, [sp, #28]
    7d74:	2b00      	cmp	r3, #0
    7d76:	f000 8447 	beq.w	8608 <_dtoa_r+0xb60>
    7d7a:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
    7d7e:	4b1a      	ldr	r3, [pc, #104]	; (7de8 <_dtoa_r+0x340>)
    7d80:	eefd 4bc6 	vcvt.s32.f64	s9, d6
    7d84:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
    7d88:	eeb8 7be4 	vcvt.f64.s32	d7, s9
    7d8c:	ee36 7b47 	vsub.f64	d7, d6, d7
    7d90:	ed1c 6b02 	vldr	d6, [ip, #-8]
    7d94:	ee83 5b06 	vdiv.f64	d5, d3, d6
    7d98:	ec41 0b16 	vmov	d6, r0, r1
    7d9c:	ee14 0a90 	vmov	r0, s9
    7da0:	ee35 5b46 	vsub.f64	d5, d5, d6
    7da4:	9900      	ldr	r1, [sp, #0]
    7da6:	eeb4 5bc7 	vcmpe.f64	d5, d7
    7daa:	3030      	adds	r0, #48	; 0x30
    7dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7db0:	f801 0b01 	strb.w	r0, [r1], #1
    7db4:	f300 84ac 	bgt.w	8710 <_dtoa_r+0xc68>
    7db8:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
    7dbc:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    7dc0:	f04f 0c00 	mov.w	ip, #0
    7dc4:	e031      	b.n	7e2a <_dtoa_r+0x382>
    7dc6:	bf00      	nop
    7dc8:	636f4361 	.word	0x636f4361
    7dcc:	3fd287a7 	.word	0x3fd287a7
    7dd0:	8b60c8b3 	.word	0x8b60c8b3
    7dd4:	3fc68a28 	.word	0x3fc68a28
    7dd8:	509f79fb 	.word	0x509f79fb
    7ddc:	3fd34413 	.word	0x3fd34413
    7de0:	7ff00000 	.word	0x7ff00000
    7de4:	20000665 	.word	0x20000665
    7de8:	200002a8 	.word	0x200002a8
    7dec:	200005c0 	.word	0x200005c0
    7df0:	200005cc 	.word	0x200005cc
    7df4:	20000280 	.word	0x20000280
    7df8:	f10c 0c01 	add.w	ip, ip, #1
    7dfc:	4594      	cmp	ip, r2
    7dfe:	da4d      	bge.n	7e9c <_dtoa_r+0x3f4>
    7e00:	ee27 7b04 	vmul.f64	d7, d7, d4
    7e04:	ee25 5b04 	vmul.f64	d5, d5, d4
    7e08:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    7e0c:	ee16 3a90 	vmov	r3, s13
    7e10:	eeb8 3be6 	vcvt.f64.s32	d3, s13
    7e14:	3330      	adds	r3, #48	; 0x30
    7e16:	ee37 7b43 	vsub.f64	d7, d7, d3
    7e1a:	eeb4 7bc5 	vcmpe.f64	d7, d5
    7e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7e22:	f801 3b01 	strb.w	r3, [r1], #1
    7e26:	f100 8473 	bmi.w	8710 <_dtoa_r+0xc68>
    7e2a:	ee32 6b47 	vsub.f64	d6, d2, d7
    7e2e:	eeb4 6bc5 	vcmpe.f64	d6, d5
    7e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7e36:	d5df      	bpl.n	7df8 <_dtoa_r+0x350>
    7e38:	9a00      	ldr	r2, [sp, #0]
    7e3a:	9604      	str	r6, [sp, #16]
    7e3c:	e002      	b.n	7e44 <_dtoa_r+0x39c>
    7e3e:	428a      	cmp	r2, r1
    7e40:	f000 8450 	beq.w	86e4 <_dtoa_r+0xc3c>
    7e44:	4689      	mov	r9, r1
    7e46:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
    7e4a:	2b39      	cmp	r3, #57	; 0x39
    7e4c:	d0f7      	beq.n	7e3e <_dtoa_r+0x396>
    7e4e:	3301      	adds	r3, #1
    7e50:	b2db      	uxtb	r3, r3
    7e52:	700b      	strb	r3, [r1, #0]
    7e54:	9b04      	ldr	r3, [sp, #16]
    7e56:	3301      	adds	r3, #1
    7e58:	9304      	str	r3, [sp, #16]
    7e5a:	e155      	b.n	8108 <_dtoa_r+0x660>
    7e5c:	1a09      	subs	r1, r1, r0
    7e5e:	2301      	movs	r3, #1
    7e60:	f1b1 0801 	subs.w	r8, r1, #1
    7e64:	930a      	str	r3, [sp, #40]	; 0x28
    7e66:	f57f aec7 	bpl.w	7bf8 <_dtoa_r+0x150>
    7e6a:	f1c1 0301 	rsb	r3, r1, #1
    7e6e:	9306      	str	r3, [sp, #24]
    7e70:	f04f 0800 	mov.w	r8, #0
    7e74:	e6c2      	b.n	7bfc <_dtoa_r+0x154>
    7e76:	2600      	movs	r6, #0
    7e78:	63e6      	str	r6, [r4, #60]	; 0x3c
    7e7a:	4631      	mov	r1, r6
    7e7c:	4620      	mov	r0, r4
    7e7e:	f7fd f9fd 	bl	527c <_Balloc>
    7e82:	9000      	str	r0, [sp, #0]
    7e84:	2800      	cmp	r0, #0
    7e86:	f000 8467 	beq.w	8758 <_dtoa_r+0xcb0>
    7e8a:	9b00      	ldr	r3, [sp, #0]
    7e8c:	63a3      	str	r3, [r4, #56]	; 0x38
    7e8e:	f04f 33ff 	mov.w	r3, #4294967295
    7e92:	930b      	str	r3, [sp, #44]	; 0x2c
    7e94:	4699      	mov	r9, r3
    7e96:	2301      	movs	r3, #1
    7e98:	46b3      	mov	fp, r6
    7e9a:	9307      	str	r3, [sp, #28]
    7e9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    7e9e:	2a00      	cmp	r2, #0
    7ea0:	db55      	blt.n	7f4e <_dtoa_r+0x4a6>
    7ea2:	9904      	ldr	r1, [sp, #16]
    7ea4:	290e      	cmp	r1, #14
    7ea6:	dc52      	bgt.n	7f4e <_dtoa_r+0x4a6>
    7ea8:	4bb7      	ldr	r3, [pc, #732]	; (8188 <_dtoa_r+0x6e0>)
    7eaa:	f1bb 0f00 	cmp.w	fp, #0
    7eae:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    7eb2:	ed93 6b00 	vldr	d6, [r3]
    7eb6:	da15      	bge.n	7ee4 <_dtoa_r+0x43c>
    7eb8:	f1b9 0f00 	cmp.w	r9, #0
    7ebc:	dc12      	bgt.n	7ee4 <_dtoa_r+0x43c>
    7ebe:	f040 82f2 	bne.w	84a6 <_dtoa_r+0x9fe>
    7ec2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
    7ec6:	ee26 7b07 	vmul.f64	d7, d6, d7
    7eca:	eeb4 8bc7 	vcmpe.f64	d8, d7
    7ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7ed2:	46ca      	mov	sl, r9
    7ed4:	464e      	mov	r6, r9
    7ed6:	f200 826d 	bhi.w	83b4 <_dtoa_r+0x90c>
    7eda:	f8dd 8000 	ldr.w	r8, [sp]
    7ede:	ea6f 0b0b 	mvn.w	fp, fp
    7ee2:	e270      	b.n	83c6 <_dtoa_r+0x91e>
    7ee4:	ee88 7b06 	vdiv.f64	d7, d8, d6
    7ee8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    7eec:	9900      	ldr	r1, [sp, #0]
    7eee:	ee17 3a10 	vmov	r3, s14
    7ef2:	f1b9 0f01 	cmp.w	r9, #1
    7ef6:	f103 0330 	add.w	r3, r3, #48	; 0x30
    7efa:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
    7efe:	f801 3b01 	strb.w	r3, [r1], #1
    7f02:	eea5 8b46 	vfms.f64	d8, d5, d6
    7f06:	f000 8334 	beq.w	8572 <_dtoa_r+0xaca>
    7f0a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    7f0e:	2301      	movs	r3, #1
    7f10:	e011      	b.n	7f36 <_dtoa_r+0x48e>
    7f12:	ee88 7b06 	vdiv.f64	d7, d8, d6
    7f16:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    7f1a:	3301      	adds	r3, #1
    7f1c:	ee17 2a10 	vmov	r2, s14
    7f20:	454b      	cmp	r3, r9
    7f22:	f102 0230 	add.w	r2, r2, #48	; 0x30
    7f26:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
    7f2a:	f801 2b01 	strb.w	r2, [r1], #1
    7f2e:	eea5 8b46 	vfms.f64	d8, d5, d6
    7f32:	f000 831e 	beq.w	8572 <_dtoa_r+0xaca>
    7f36:	ee28 8b04 	vmul.f64	d8, d8, d4
    7f3a:	eeb5 8b40 	vcmp.f64	d8, #0.0
    7f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7f42:	d1e6      	bne.n	7f12 <_dtoa_r+0x46a>
    7f44:	9b04      	ldr	r3, [sp, #16]
    7f46:	3301      	adds	r3, #1
    7f48:	9304      	str	r3, [sp, #16]
    7f4a:	4689      	mov	r9, r1
    7f4c:	e0dc      	b.n	8108 <_dtoa_r+0x660>
    7f4e:	9b07      	ldr	r3, [sp, #28]
    7f50:	b343      	cbz	r3, 7fa4 <_dtoa_r+0x4fc>
    7f52:	9b01      	ldr	r3, [sp, #4]
    7f54:	2b01      	cmp	r3, #1
    7f56:	f340 8276 	ble.w	8446 <_dtoa_r+0x99e>
    7f5a:	9b08      	ldr	r3, [sp, #32]
    7f5c:	f109 3aff 	add.w	sl, r9, #4294967295
    7f60:	4553      	cmp	r3, sl
    7f62:	f280 823f 	bge.w	83e4 <_dtoa_r+0x93c>
    7f66:	9b08      	ldr	r3, [sp, #32]
    7f68:	f8cd a020 	str.w	sl, [sp, #32]
    7f6c:	ebaa 0203 	sub.w	r2, sl, r3
    7f70:	4417      	add	r7, r2
    7f72:	f04f 0a00 	mov.w	sl, #0
    7f76:	f1b9 0f00 	cmp.w	r9, #0
    7f7a:	f2c0 8325 	blt.w	85c8 <_dtoa_r+0xb20>
    7f7e:	9b06      	ldr	r3, [sp, #24]
    7f80:	9309      	str	r3, [sp, #36]	; 0x24
    7f82:	444b      	add	r3, r9
    7f84:	44c8      	add	r8, r9
    7f86:	9306      	str	r3, [sp, #24]
    7f88:	2101      	movs	r1, #1
    7f8a:	4620      	mov	r0, r4
    7f8c:	f7fd fa48 	bl	5420 <__i2b>
    7f90:	4606      	mov	r6, r0
    7f92:	e00c      	b.n	7fae <_dtoa_r+0x506>
    7f94:	4b7d      	ldr	r3, [pc, #500]	; (818c <_dtoa_r+0x6e4>)
    7f96:	9300      	str	r3, [sp, #0]
    7f98:	9800      	ldr	r0, [sp, #0]
    7f9a:	b00f      	add	sp, #60	; 0x3c
    7f9c:	ecbd 8b02 	vpop	{d8}
    7fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7fa4:	9b06      	ldr	r3, [sp, #24]
    7fa6:	f8dd a020 	ldr.w	sl, [sp, #32]
    7faa:	9e07      	ldr	r6, [sp, #28]
    7fac:	9309      	str	r3, [sp, #36]	; 0x24
    7fae:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7fb0:	b16b      	cbz	r3, 7fce <_dtoa_r+0x526>
    7fb2:	f1b8 0f00 	cmp.w	r8, #0
    7fb6:	dd0a      	ble.n	7fce <_dtoa_r+0x526>
    7fb8:	4543      	cmp	r3, r8
    7fba:	9906      	ldr	r1, [sp, #24]
    7fbc:	461a      	mov	r2, r3
    7fbe:	bfa8      	it	ge
    7fc0:	4642      	movge	r2, r8
    7fc2:	1a89      	subs	r1, r1, r2
    7fc4:	1a9b      	subs	r3, r3, r2
    7fc6:	9106      	str	r1, [sp, #24]
    7fc8:	9309      	str	r3, [sp, #36]	; 0x24
    7fca:	eba8 0802 	sub.w	r8, r8, r2
    7fce:	9b08      	ldr	r3, [sp, #32]
    7fd0:	b163      	cbz	r3, 7fec <_dtoa_r+0x544>
    7fd2:	9b07      	ldr	r3, [sp, #28]
    7fd4:	2b00      	cmp	r3, #0
    7fd6:	f000 82a7 	beq.w	8528 <_dtoa_r+0xa80>
    7fda:	f1ba 0f00 	cmp.w	sl, #0
    7fde:	f300 8204 	bgt.w	83ea <_dtoa_r+0x942>
    7fe2:	9b08      	ldr	r3, [sp, #32]
    7fe4:	ebb3 020a 	subs.w	r2, r3, sl
    7fe8:	f040 82ff 	bne.w	85ea <_dtoa_r+0xb42>
    7fec:	2101      	movs	r1, #1
    7fee:	4620      	mov	r0, r4
    7ff0:	f7fd fa16 	bl	5420 <__i2b>
    7ff4:	2f00      	cmp	r7, #0
    7ff6:	4682      	mov	sl, r0
    7ff8:	f300 80af 	bgt.w	815a <_dtoa_r+0x6b2>
    7ffc:	9b01      	ldr	r3, [sp, #4]
    7ffe:	2b01      	cmp	r3, #1
    8000:	f340 8187 	ble.w	8312 <_dtoa_r+0x86a>
    8004:	2300      	movs	r3, #0
    8006:	9308      	str	r3, [sp, #32]
    8008:	2001      	movs	r0, #1
    800a:	2f00      	cmp	r7, #0
    800c:	f040 80b1 	bne.w	8172 <_dtoa_r+0x6ca>
    8010:	4440      	add	r0, r8
    8012:	f010 001f 	ands.w	r0, r0, #31
    8016:	f000 817a 	beq.w	830e <_dtoa_r+0x866>
    801a:	f1c0 0220 	rsb	r2, r0, #32
    801e:	2a04      	cmp	r2, #4
    8020:	f300 8088 	bgt.w	8134 <_dtoa_r+0x68c>
    8024:	f040 81f6 	bne.w	8414 <_dtoa_r+0x96c>
    8028:	9b06      	ldr	r3, [sp, #24]
    802a:	2b00      	cmp	r3, #0
    802c:	dd05      	ble.n	803a <_dtoa_r+0x592>
    802e:	4629      	mov	r1, r5
    8030:	461a      	mov	r2, r3
    8032:	4620      	mov	r0, r4
    8034:	f7fd fb30 	bl	5698 <__lshift>
    8038:	4605      	mov	r5, r0
    803a:	f1b8 0f00 	cmp.w	r8, #0
    803e:	dd05      	ble.n	804c <_dtoa_r+0x5a4>
    8040:	4651      	mov	r1, sl
    8042:	4642      	mov	r2, r8
    8044:	4620      	mov	r0, r4
    8046:	f7fd fb27 	bl	5698 <__lshift>
    804a:	4682      	mov	sl, r0
    804c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    804e:	2b00      	cmp	r3, #0
    8050:	f040 813f 	bne.w	82d2 <_dtoa_r+0x82a>
    8054:	f1b9 0f00 	cmp.w	r9, #0
    8058:	f340 8125 	ble.w	82a6 <_dtoa_r+0x7fe>
    805c:	9b07      	ldr	r3, [sp, #28]
    805e:	2b00      	cmp	r3, #0
    8060:	f040 80a3 	bne.w	81aa <_dtoa_r+0x702>
    8064:	9b04      	ldr	r3, [sp, #16]
    8066:	3301      	adds	r3, #1
    8068:	9304      	str	r3, [sp, #16]
    806a:	f8dd 8000 	ldr.w	r8, [sp]
    806e:	2701      	movs	r7, #1
    8070:	e007      	b.n	8082 <_dtoa_r+0x5da>
    8072:	4629      	mov	r1, r5
    8074:	2300      	movs	r3, #0
    8076:	220a      	movs	r2, #10
    8078:	4620      	mov	r0, r4
    807a:	f7fd f92f 	bl	52dc <__multadd>
    807e:	3701      	adds	r7, #1
    8080:	4605      	mov	r5, r0
    8082:	4651      	mov	r1, sl
    8084:	4628      	mov	r0, r5
    8086:	f7ff fc7b 	bl	7980 <quorem>
    808a:	45b9      	cmp	r9, r7
    808c:	f100 0030 	add.w	r0, r0, #48	; 0x30
    8090:	f808 0b01 	strb.w	r0, [r8], #1
    8094:	dced      	bgt.n	8072 <_dtoa_r+0x5ca>
    8096:	f1b9 0f00 	cmp.w	r9, #0
    809a:	9a00      	ldr	r2, [sp, #0]
    809c:	bfcc      	ite	gt
    809e:	46cb      	movgt	fp, r9
    80a0:	f04f 0b01 	movle.w	fp, #1
    80a4:	4603      	mov	r3, r0
    80a6:	4493      	add	fp, r2
    80a8:	2700      	movs	r7, #0
    80aa:	4629      	mov	r1, r5
    80ac:	2201      	movs	r2, #1
    80ae:	4620      	mov	r0, r4
    80b0:	9301      	str	r3, [sp, #4]
    80b2:	f7fd faf1 	bl	5698 <__lshift>
    80b6:	4651      	mov	r1, sl
    80b8:	4605      	mov	r5, r0
    80ba:	f7fd fb65 	bl	5788 <__mcmp>
    80be:	2800      	cmp	r0, #0
    80c0:	f340 81af 	ble.w	8422 <_dtoa_r+0x97a>
    80c4:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
    80c8:	9a00      	ldr	r2, [sp, #0]
    80ca:	f10b 3bff 	add.w	fp, fp, #4294967295
    80ce:	e004      	b.n	80da <_dtoa_r+0x632>
    80d0:	455a      	cmp	r2, fp
    80d2:	f000 81b1 	beq.w	8438 <_dtoa_r+0x990>
    80d6:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
    80da:	2b39      	cmp	r3, #57	; 0x39
    80dc:	f10b 0901 	add.w	r9, fp, #1
    80e0:	d0f6      	beq.n	80d0 <_dtoa_r+0x628>
    80e2:	3301      	adds	r3, #1
    80e4:	f88b 3000 	strb.w	r3, [fp]
    80e8:	4651      	mov	r1, sl
    80ea:	4620      	mov	r0, r4
    80ec:	f7fd f8ec 	bl	52c8 <_Bfree>
    80f0:	b156      	cbz	r6, 8108 <_dtoa_r+0x660>
    80f2:	b12f      	cbz	r7, 8100 <_dtoa_r+0x658>
    80f4:	42b7      	cmp	r7, r6
    80f6:	d003      	beq.n	8100 <_dtoa_r+0x658>
    80f8:	4639      	mov	r1, r7
    80fa:	4620      	mov	r0, r4
    80fc:	f7fd f8e4 	bl	52c8 <_Bfree>
    8100:	4631      	mov	r1, r6
    8102:	4620      	mov	r0, r4
    8104:	f7fd f8e0 	bl	52c8 <_Bfree>
    8108:	4629      	mov	r1, r5
    810a:	4620      	mov	r0, r4
    810c:	f7fd f8dc 	bl	52c8 <_Bfree>
    8110:	2300      	movs	r3, #0
    8112:	f889 3000 	strb.w	r3, [r9]
    8116:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    811a:	601a      	str	r2, [r3, #0]
    811c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    811e:	2b00      	cmp	r3, #0
    8120:	f43f acfe 	beq.w	7b20 <_dtoa_r+0x78>
    8124:	9800      	ldr	r0, [sp, #0]
    8126:	f8c3 9000 	str.w	r9, [r3]
    812a:	b00f      	add	sp, #60	; 0x3c
    812c:	ecbd 8b02 	vpop	{d8}
    8130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8134:	f1c0 001c 	rsb	r0, r0, #28
    8138:	9b06      	ldr	r3, [sp, #24]
    813a:	4403      	add	r3, r0
    813c:	9306      	str	r3, [sp, #24]
    813e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8140:	4403      	add	r3, r0
    8142:	9309      	str	r3, [sp, #36]	; 0x24
    8144:	4480      	add	r8, r0
    8146:	e76f      	b.n	8028 <_dtoa_r+0x580>
    8148:	f1c2 0220 	rsb	r2, r2, #32
    814c:	fa06 f202 	lsl.w	r2, r6, r2
    8150:	ee07 2a10 	vmov	s14, r2
    8154:	e509      	b.n	7b6a <_dtoa_r+0xc2>
    8156:	2601      	movs	r6, #1
    8158:	e563      	b.n	7c22 <_dtoa_r+0x17a>
    815a:	4601      	mov	r1, r0
    815c:	463a      	mov	r2, r7
    815e:	4620      	mov	r0, r4
    8160:	f7fd fa3a 	bl	55d8 <__pow5mult>
    8164:	9b01      	ldr	r3, [sp, #4]
    8166:	2b01      	cmp	r3, #1
    8168:	4682      	mov	sl, r0
    816a:	f340 81c5 	ble.w	84f8 <_dtoa_r+0xa50>
    816e:	2300      	movs	r3, #0
    8170:	9308      	str	r3, [sp, #32]
    8172:	f8da 2010 	ldr.w	r2, [sl, #16]
    8176:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
    817a:	6910      	ldr	r0, [r2, #16]
    817c:	f7fd f900 	bl	5380 <__hi0bits>
    8180:	f1c0 0020 	rsb	r0, r0, #32
    8184:	e744      	b.n	8010 <_dtoa_r+0x568>
    8186:	bf00      	nop
    8188:	200002a8 	.word	0x200002a8
    818c:	20000664 	.word	0x20000664
    8190:	4631      	mov	r1, r6
    8192:	2300      	movs	r3, #0
    8194:	220a      	movs	r2, #10
    8196:	4620      	mov	r0, r4
    8198:	f7fd f8a0 	bl	52dc <__multadd>
    819c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    819e:	2b00      	cmp	r3, #0
    81a0:	4606      	mov	r6, r0
    81a2:	f340 82ce 	ble.w	8742 <_dtoa_r+0xc9a>
    81a6:	9704      	str	r7, [sp, #16]
    81a8:	4699      	mov	r9, r3
    81aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    81ac:	2b00      	cmp	r3, #0
    81ae:	dd05      	ble.n	81bc <_dtoa_r+0x714>
    81b0:	4631      	mov	r1, r6
    81b2:	461a      	mov	r2, r3
    81b4:	4620      	mov	r0, r4
    81b6:	f7fd fa6f 	bl	5698 <__lshift>
    81ba:	4606      	mov	r6, r0
    81bc:	9b08      	ldr	r3, [sp, #32]
    81be:	2b00      	cmp	r3, #0
    81c0:	f040 81eb 	bne.w	859a <_dtoa_r+0xaf2>
    81c4:	46b0      	mov	r8, r6
    81c6:	9b02      	ldr	r3, [sp, #8]
    81c8:	9f00      	ldr	r7, [sp, #0]
    81ca:	f003 0201 	and.w	r2, r3, #1
    81ce:	1e7b      	subs	r3, r7, #1
    81d0:	444b      	add	r3, r9
    81d2:	9308      	str	r3, [sp, #32]
    81d4:	9b01      	ldr	r3, [sp, #4]
    81d6:	920a      	str	r2, [sp, #40]	; 0x28
    81d8:	4313      	orrs	r3, r2
    81da:	9309      	str	r3, [sp, #36]	; 0x24
    81dc:	4651      	mov	r1, sl
    81de:	4628      	mov	r0, r5
    81e0:	f7ff fbce 	bl	7980 <quorem>
    81e4:	4631      	mov	r1, r6
    81e6:	4683      	mov	fp, r0
    81e8:	4628      	mov	r0, r5
    81ea:	f7fd facd 	bl	5788 <__mcmp>
    81ee:	4642      	mov	r2, r8
    81f0:	4651      	mov	r1, sl
    81f2:	4681      	mov	r9, r0
    81f4:	4620      	mov	r0, r4
    81f6:	f7fd fae9 	bl	57cc <__mdiff>
    81fa:	68c2      	ldr	r2, [r0, #12]
    81fc:	4601      	mov	r1, r0
    81fe:	f10b 0330 	add.w	r3, fp, #48	; 0x30
    8202:	2a00      	cmp	r2, #0
    8204:	d142      	bne.n	828c <_dtoa_r+0x7e4>
    8206:	e9cd 0306 	strd	r0, r3, [sp, #24]
    820a:	4628      	mov	r0, r5
    820c:	f7fd fabc 	bl	5788 <__mcmp>
    8210:	9906      	ldr	r1, [sp, #24]
    8212:	9002      	str	r0, [sp, #8]
    8214:	4620      	mov	r0, r4
    8216:	f7fd f857 	bl	52c8 <_Bfree>
    821a:	9a02      	ldr	r2, [sp, #8]
    821c:	9b07      	ldr	r3, [sp, #28]
    821e:	b91a      	cbnz	r2, 8228 <_dtoa_r+0x780>
    8220:	9909      	ldr	r1, [sp, #36]	; 0x24
    8222:	2900      	cmp	r1, #0
    8224:	f000 827e 	beq.w	8724 <_dtoa_r+0xc7c>
    8228:	f1b9 0f00 	cmp.w	r9, #0
    822c:	f2c0 8183 	blt.w	8536 <_dtoa_r+0xa8e>
    8230:	9901      	ldr	r1, [sp, #4]
    8232:	ea49 0901 	orr.w	r9, r9, r1
    8236:	990a      	ldr	r1, [sp, #40]	; 0x28
    8238:	ea51 0909 	orrs.w	r9, r1, r9
    823c:	f000 817b 	beq.w	8536 <_dtoa_r+0xa8e>
    8240:	2a00      	cmp	r2, #0
    8242:	f300 81c6 	bgt.w	85d2 <_dtoa_r+0xb2a>
    8246:	9a08      	ldr	r2, [sp, #32]
    8248:	703b      	strb	r3, [r7, #0]
    824a:	f107 0901 	add.w	r9, r7, #1
    824e:	4297      	cmp	r7, r2
    8250:	46cb      	mov	fp, r9
    8252:	f000 81c4 	beq.w	85de <_dtoa_r+0xb36>
    8256:	4629      	mov	r1, r5
    8258:	2300      	movs	r3, #0
    825a:	220a      	movs	r2, #10
    825c:	4620      	mov	r0, r4
    825e:	f7fd f83d 	bl	52dc <__multadd>
    8262:	4546      	cmp	r6, r8
    8264:	4605      	mov	r5, r0
    8266:	4631      	mov	r1, r6
    8268:	f04f 0300 	mov.w	r3, #0
    826c:	f04f 020a 	mov.w	r2, #10
    8270:	4620      	mov	r0, r4
    8272:	d012      	beq.n	829a <_dtoa_r+0x7f2>
    8274:	f7fd f832 	bl	52dc <__multadd>
    8278:	4641      	mov	r1, r8
    827a:	4606      	mov	r6, r0
    827c:	2300      	movs	r3, #0
    827e:	220a      	movs	r2, #10
    8280:	4620      	mov	r0, r4
    8282:	f7fd f82b 	bl	52dc <__multadd>
    8286:	464f      	mov	r7, r9
    8288:	4680      	mov	r8, r0
    828a:	e7a7      	b.n	81dc <_dtoa_r+0x734>
    828c:	4620      	mov	r0, r4
    828e:	9302      	str	r3, [sp, #8]
    8290:	f7fd f81a 	bl	52c8 <_Bfree>
    8294:	9b02      	ldr	r3, [sp, #8]
    8296:	2201      	movs	r2, #1
    8298:	e7c6      	b.n	8228 <_dtoa_r+0x780>
    829a:	f7fd f81f 	bl	52dc <__multadd>
    829e:	464f      	mov	r7, r9
    82a0:	4606      	mov	r6, r0
    82a2:	4680      	mov	r8, r0
    82a4:	e79a      	b.n	81dc <_dtoa_r+0x734>
    82a6:	9b01      	ldr	r3, [sp, #4]
    82a8:	2b02      	cmp	r3, #2
    82aa:	dc71      	bgt.n	8390 <_dtoa_r+0x8e8>
    82ac:	9b07      	ldr	r3, [sp, #28]
    82ae:	2b00      	cmp	r3, #0
    82b0:	f47f af7b 	bne.w	81aa <_dtoa_r+0x702>
    82b4:	9b04      	ldr	r3, [sp, #16]
    82b6:	4651      	mov	r1, sl
    82b8:	3301      	adds	r3, #1
    82ba:	4628      	mov	r0, r5
    82bc:	9304      	str	r3, [sp, #16]
    82be:	f7ff fb5f 	bl	7980 <quorem>
    82c2:	f8dd b000 	ldr.w	fp, [sp]
    82c6:	f100 0330 	add.w	r3, r0, #48	; 0x30
    82ca:	f80b 3b01 	strb.w	r3, [fp], #1
    82ce:	2700      	movs	r7, #0
    82d0:	e6eb      	b.n	80aa <_dtoa_r+0x602>
    82d2:	4651      	mov	r1, sl
    82d4:	4628      	mov	r0, r5
    82d6:	f7fd fa57 	bl	5788 <__mcmp>
    82da:	2800      	cmp	r0, #0
    82dc:	f6bf aeba 	bge.w	8054 <_dtoa_r+0x5ac>
    82e0:	4629      	mov	r1, r5
    82e2:	2300      	movs	r3, #0
    82e4:	220a      	movs	r2, #10
    82e6:	4620      	mov	r0, r4
    82e8:	f7fc fff8 	bl	52dc <__multadd>
    82ec:	9b04      	ldr	r3, [sp, #16]
    82ee:	1e5f      	subs	r7, r3, #1
    82f0:	9b07      	ldr	r3, [sp, #28]
    82f2:	4605      	mov	r5, r0
    82f4:	2b00      	cmp	r3, #0
    82f6:	f47f af4b 	bne.w	8190 <_dtoa_r+0x6e8>
    82fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    82fc:	2b00      	cmp	r3, #0
    82fe:	f340 8218 	ble.w	8732 <_dtoa_r+0xc8a>
    8302:	4699      	mov	r9, r3
    8304:	e6b1      	b.n	806a <_dtoa_r+0x5c2>
    8306:	4bbc      	ldr	r3, [pc, #752]	; (85f8 <_dtoa_r+0xb50>)
    8308:	9300      	str	r3, [sp, #0]
    830a:	3303      	adds	r3, #3
    830c:	e4a4      	b.n	7c58 <_dtoa_r+0x1b0>
    830e:	201c      	movs	r0, #28
    8310:	e712      	b.n	8138 <_dtoa_r+0x690>
    8312:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    8316:	2800      	cmp	r0, #0
    8318:	f47f ae74 	bne.w	8004 <_dtoa_r+0x55c>
    831c:	f3c1 0213 	ubfx	r2, r1, #0, #20
    8320:	2a00      	cmp	r2, #0
    8322:	f000 80f4 	beq.w	850e <_dtoa_r+0xa66>
    8326:	9b02      	ldr	r3, [sp, #8]
    8328:	9308      	str	r3, [sp, #32]
    832a:	e66d      	b.n	8008 <_dtoa_r+0x560>
    832c:	2301      	movs	r3, #1
    832e:	9307      	str	r3, [sp, #28]
    8330:	9b04      	ldr	r3, [sp, #16]
    8332:	445b      	add	r3, fp
    8334:	f103 0901 	add.w	r9, r3, #1
    8338:	f1b9 0f01 	cmp.w	r9, #1
    833c:	46cc      	mov	ip, r9
    833e:	930b      	str	r3, [sp, #44]	; 0x2c
    8340:	bfb8      	it	lt
    8342:	f04f 0c01 	movlt.w	ip, #1
    8346:	2100      	movs	r1, #0
    8348:	f1bc 0f17 	cmp.w	ip, #23
    834c:	63e1      	str	r1, [r4, #60]	; 0x3c
    834e:	f77f acbc 	ble.w	7cca <_dtoa_r+0x222>
    8352:	2001      	movs	r0, #1
    8354:	2204      	movs	r2, #4
    8356:	0052      	lsls	r2, r2, #1
    8358:	f102 0314 	add.w	r3, r2, #20
    835c:	4563      	cmp	r3, ip
    835e:	4601      	mov	r1, r0
    8360:	f100 0001 	add.w	r0, r0, #1
    8364:	d9f7      	bls.n	8356 <_dtoa_r+0x8ae>
    8366:	63e1      	str	r1, [r4, #60]	; 0x3c
    8368:	e4af      	b.n	7cca <_dtoa_r+0x222>
    836a:	2301      	movs	r3, #1
    836c:	9307      	str	r3, [sp, #28]
    836e:	f1bb 0f00 	cmp.w	fp, #0
    8372:	dd52      	ble.n	841a <_dtoa_r+0x972>
    8374:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
    8378:	46d9      	mov	r9, fp
    837a:	46dc      	mov	ip, fp
    837c:	e7e3      	b.n	8346 <_dtoa_r+0x89e>
    837e:	2300      	movs	r3, #0
    8380:	9307      	str	r3, [sp, #28]
    8382:	e7d5      	b.n	8330 <_dtoa_r+0x888>
    8384:	2300      	movs	r3, #0
    8386:	9307      	str	r3, [sp, #28]
    8388:	e7f1      	b.n	836e <_dtoa_r+0x8c6>
    838a:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    838e:	9704      	str	r7, [sp, #16]
    8390:	f1b9 0f00 	cmp.w	r9, #0
    8394:	f47f ada1 	bne.w	7eda <_dtoa_r+0x432>
    8398:	4651      	mov	r1, sl
    839a:	464b      	mov	r3, r9
    839c:	2205      	movs	r2, #5
    839e:	4620      	mov	r0, r4
    83a0:	f7fc ff9c 	bl	52dc <__multadd>
    83a4:	4601      	mov	r1, r0
    83a6:	4682      	mov	sl, r0
    83a8:	4628      	mov	r0, r5
    83aa:	f7fd f9ed 	bl	5788 <__mcmp>
    83ae:	2800      	cmp	r0, #0
    83b0:	f77f ad93 	ble.w	7eda <_dtoa_r+0x432>
    83b4:	9b04      	ldr	r3, [sp, #16]
    83b6:	f103 0b01 	add.w	fp, r3, #1
    83ba:	9b00      	ldr	r3, [sp, #0]
    83bc:	2231      	movs	r2, #49	; 0x31
    83be:	4698      	mov	r8, r3
    83c0:	f803 2b01 	strb.w	r2, [r3], #1
    83c4:	9300      	str	r3, [sp, #0]
    83c6:	4651      	mov	r1, sl
    83c8:	4620      	mov	r0, r4
    83ca:	f7fc ff7d 	bl	52c8 <_Bfree>
    83ce:	f10b 0301 	add.w	r3, fp, #1
    83d2:	f8dd 9000 	ldr.w	r9, [sp]
    83d6:	9304      	str	r3, [sp, #16]
    83d8:	f8cd 8000 	str.w	r8, [sp]
    83dc:	2e00      	cmp	r6, #0
    83de:	f47f ae8f 	bne.w	8100 <_dtoa_r+0x658>
    83e2:	e691      	b.n	8108 <_dtoa_r+0x660>
    83e4:	eba3 0a0a 	sub.w	sl, r3, sl
    83e8:	e5c5      	b.n	7f76 <_dtoa_r+0x4ce>
    83ea:	4631      	mov	r1, r6
    83ec:	4652      	mov	r2, sl
    83ee:	4620      	mov	r0, r4
    83f0:	f7fd f8f2 	bl	55d8 <__pow5mult>
    83f4:	462a      	mov	r2, r5
    83f6:	4601      	mov	r1, r0
    83f8:	4606      	mov	r6, r0
    83fa:	4620      	mov	r0, r4
    83fc:	f7fd f83e 	bl	547c <__multiply>
    8400:	4629      	mov	r1, r5
    8402:	4605      	mov	r5, r0
    8404:	4620      	mov	r0, r4
    8406:	f7fc ff5f 	bl	52c8 <_Bfree>
    840a:	e5ea      	b.n	7fe2 <_dtoa_r+0x53a>
    840c:	2002      	movs	r0, #2
    840e:	eeb0 5b48 	vmov.f64	d5, d8
    8412:	e481      	b.n	7d18 <_dtoa_r+0x270>
    8414:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
    8418:	e68e      	b.n	8138 <_dtoa_r+0x690>
    841a:	f04f 0b01 	mov.w	fp, #1
    841e:	46d9      	mov	r9, fp
    8420:	e44f      	b.n	7cc2 <_dtoa_r+0x21a>
    8422:	d103      	bne.n	842c <_dtoa_r+0x984>
    8424:	9b01      	ldr	r3, [sp, #4]
    8426:	07db      	lsls	r3, r3, #31
    8428:	f53f ae4c 	bmi.w	80c4 <_dtoa_r+0x61c>
    842c:	46d9      	mov	r9, fp
    842e:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
    8432:	2b30      	cmp	r3, #48	; 0x30
    8434:	d0fa      	beq.n	842c <_dtoa_r+0x984>
    8436:	e657      	b.n	80e8 <_dtoa_r+0x640>
    8438:	9b04      	ldr	r3, [sp, #16]
    843a:	9a00      	ldr	r2, [sp, #0]
    843c:	3301      	adds	r3, #1
    843e:	9304      	str	r3, [sp, #16]
    8440:	2331      	movs	r3, #49	; 0x31
    8442:	7013      	strb	r3, [r2, #0]
    8444:	e650      	b.n	80e8 <_dtoa_r+0x640>
    8446:	f1ba 0f00 	cmp.w	sl, #0
    844a:	f000 8123 	beq.w	8694 <_dtoa_r+0xbec>
    844e:	f202 4233 	addw	r2, r2, #1075	; 0x433
    8452:	9b06      	ldr	r3, [sp, #24]
    8454:	9309      	str	r3, [sp, #36]	; 0x24
    8456:	4413      	add	r3, r2
    8458:	f8dd a020 	ldr.w	sl, [sp, #32]
    845c:	9306      	str	r3, [sp, #24]
    845e:	4490      	add	r8, r2
    8460:	e592      	b.n	7f88 <_dtoa_r+0x4e0>
    8462:	ee07 0a90 	vmov	s15, r0
    8466:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
    846a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    846e:	eea6 5b07 	vfma.f64	d5, d6, d7
    8472:	ee15 2a90 	vmov	r2, s11
    8476:	ec51 0b15 	vmov	r0, r1, d5
    847a:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
    847e:	ec41 0b15 	vmov	d5, r0, r1
    8482:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
    8486:	ee36 7b47 	vsub.f64	d7, d6, d7
    848a:	eeb4 7bc5 	vcmpe.f64	d7, d5
    848e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8492:	f300 8137 	bgt.w	8704 <_dtoa_r+0xc5c>
    8496:	eeb1 5b45 	vneg.f64	d5, d5
    849a:	eeb4 7bc5 	vcmpe.f64	d7, d5
    849e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    84a2:	f57f acfb 	bpl.w	7e9c <_dtoa_r+0x3f4>
    84a6:	f04f 0a00 	mov.w	sl, #0
    84aa:	4656      	mov	r6, sl
    84ac:	e515      	b.n	7eda <_dtoa_r+0x432>
    84ae:	f000 80f5 	beq.w	869c <_dtoa_r+0xbf4>
    84b2:	9b04      	ldr	r3, [sp, #16]
    84b4:	4951      	ldr	r1, [pc, #324]	; (85fc <_dtoa_r+0xb54>)
    84b6:	425a      	negs	r2, r3
    84b8:	f002 000f 	and.w	r0, r2, #15
    84bc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    84c0:	ed91 6b00 	vldr	d6, [r1]
    84c4:	1112      	asrs	r2, r2, #4
    84c6:	ee28 6b06 	vmul.f64	d6, d8, d6
    84ca:	f000 8142 	beq.w	8752 <_dtoa_r+0xcaa>
    84ce:	eeb0 7b46 	vmov.f64	d7, d6
    84d2:	494b      	ldr	r1, [pc, #300]	; (8600 <_dtoa_r+0xb58>)
    84d4:	2600      	movs	r6, #0
    84d6:	2002      	movs	r0, #2
    84d8:	07d3      	lsls	r3, r2, #31
    84da:	d505      	bpl.n	84e8 <_dtoa_r+0xa40>
    84dc:	ed91 5b00 	vldr	d5, [r1]
    84e0:	3001      	adds	r0, #1
    84e2:	2601      	movs	r6, #1
    84e4:	ee27 7b05 	vmul.f64	d7, d7, d5
    84e8:	1052      	asrs	r2, r2, #1
    84ea:	f101 0108 	add.w	r1, r1, #8
    84ee:	d1f3      	bne.n	84d8 <_dtoa_r+0xa30>
    84f0:	2e00      	cmp	r6, #0
    84f2:	fe06 6b07 	vseleq.f64	d6, d6, d7
    84f6:	e41e      	b.n	7d36 <_dtoa_r+0x28e>
    84f8:	9b02      	ldr	r3, [sp, #8]
    84fa:	2b00      	cmp	r3, #0
    84fc:	f47f ae37 	bne.w	816e <_dtoa_r+0x6c6>
    8500:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    8504:	f3c1 0213 	ubfx	r2, r1, #0, #20
    8508:	2a00      	cmp	r2, #0
    850a:	f040 8137 	bne.w	877c <_dtoa_r+0xcd4>
    850e:	4a3d      	ldr	r2, [pc, #244]	; (8604 <_dtoa_r+0xb5c>)
    8510:	400a      	ands	r2, r1
    8512:	2a00      	cmp	r2, #0
    8514:	f000 80fa 	beq.w	870c <_dtoa_r+0xc64>
    8518:	9b06      	ldr	r3, [sp, #24]
    851a:	3301      	adds	r3, #1
    851c:	9306      	str	r3, [sp, #24]
    851e:	2301      	movs	r3, #1
    8520:	f108 0801 	add.w	r8, r8, #1
    8524:	9308      	str	r3, [sp, #32]
    8526:	e56f      	b.n	8008 <_dtoa_r+0x560>
    8528:	4629      	mov	r1, r5
    852a:	9a08      	ldr	r2, [sp, #32]
    852c:	4620      	mov	r0, r4
    852e:	f7fd f853 	bl	55d8 <__pow5mult>
    8532:	4605      	mov	r5, r0
    8534:	e55a      	b.n	7fec <_dtoa_r+0x544>
    8536:	2a00      	cmp	r2, #0
    8538:	dd12      	ble.n	8560 <_dtoa_r+0xab8>
    853a:	4629      	mov	r1, r5
    853c:	2201      	movs	r2, #1
    853e:	4620      	mov	r0, r4
    8540:	9301      	str	r3, [sp, #4]
    8542:	f7fd f8a9 	bl	5698 <__lshift>
    8546:	4651      	mov	r1, sl
    8548:	4605      	mov	r5, r0
    854a:	f7fd f91d 	bl	5788 <__mcmp>
    854e:	2800      	cmp	r0, #0
    8550:	9b01      	ldr	r3, [sp, #4]
    8552:	f340 80e1 	ble.w	8718 <_dtoa_r+0xc70>
    8556:	2b39      	cmp	r3, #57	; 0x39
    8558:	f000 80ca 	beq.w	86f0 <_dtoa_r+0xc48>
    855c:	f10b 0331 	add.w	r3, fp, #49	; 0x31
    8560:	46b9      	mov	r9, r7
    8562:	f809 3b01 	strb.w	r3, [r9], #1
    8566:	9b04      	ldr	r3, [sp, #16]
    8568:	3301      	adds	r3, #1
    856a:	4637      	mov	r7, r6
    856c:	9304      	str	r3, [sp, #16]
    856e:	4646      	mov	r6, r8
    8570:	e5ba      	b.n	80e8 <_dtoa_r+0x640>
    8572:	ee38 8b08 	vadd.f64	d8, d8, d8
    8576:	eeb4 8bc6 	vcmpe.f64	d8, d6
    857a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    857e:	dc0a      	bgt.n	8596 <_dtoa_r+0xaee>
    8580:	eeb4 8b46 	vcmp.f64	d8, d6
    8584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8588:	f47f acdc 	bne.w	7f44 <_dtoa_r+0x49c>
    858c:	ee17 3a10 	vmov	r3, s14
    8590:	07d8      	lsls	r0, r3, #31
    8592:	f57f acd7 	bpl.w	7f44 <_dtoa_r+0x49c>
    8596:	9a00      	ldr	r2, [sp, #0]
    8598:	e454      	b.n	7e44 <_dtoa_r+0x39c>
    859a:	6871      	ldr	r1, [r6, #4]
    859c:	4620      	mov	r0, r4
    859e:	f7fc fe6d 	bl	527c <_Balloc>
    85a2:	4607      	mov	r7, r0
    85a4:	2800      	cmp	r0, #0
    85a6:	f000 80de 	beq.w	8766 <_dtoa_r+0xcbe>
    85aa:	6933      	ldr	r3, [r6, #16]
    85ac:	3302      	adds	r3, #2
    85ae:	009a      	lsls	r2, r3, #2
    85b0:	f106 010c 	add.w	r1, r6, #12
    85b4:	300c      	adds	r0, #12
    85b6:	f7f9 fc29 	bl	1e0c <memcpy>
    85ba:	4639      	mov	r1, r7
    85bc:	2201      	movs	r2, #1
    85be:	4620      	mov	r0, r4
    85c0:	f7fd f86a 	bl	5698 <__lshift>
    85c4:	4680      	mov	r8, r0
    85c6:	e5fe      	b.n	81c6 <_dtoa_r+0x71e>
    85c8:	9b06      	ldr	r3, [sp, #24]
    85ca:	eba3 0309 	sub.w	r3, r3, r9
    85ce:	9309      	str	r3, [sp, #36]	; 0x24
    85d0:	e4da      	b.n	7f88 <_dtoa_r+0x4e0>
    85d2:	2b39      	cmp	r3, #57	; 0x39
    85d4:	f000 808c 	beq.w	86f0 <_dtoa_r+0xc48>
    85d8:	46b9      	mov	r9, r7
    85da:	3301      	adds	r3, #1
    85dc:	e7c1      	b.n	8562 <_dtoa_r+0xaba>
    85de:	9a04      	ldr	r2, [sp, #16]
    85e0:	3201      	adds	r2, #1
    85e2:	4637      	mov	r7, r6
    85e4:	9204      	str	r2, [sp, #16]
    85e6:	4646      	mov	r6, r8
    85e8:	e55f      	b.n	80aa <_dtoa_r+0x602>
    85ea:	4629      	mov	r1, r5
    85ec:	4620      	mov	r0, r4
    85ee:	f7fc fff3 	bl	55d8 <__pow5mult>
    85f2:	4605      	mov	r5, r0
    85f4:	e4fa      	b.n	7fec <_dtoa_r+0x544>
    85f6:	bf00      	nop
    85f8:	200005cc 	.word	0x200005cc
    85fc:	200002a8 	.word	0x200002a8
    8600:	20000280 	.word	0x20000280
    8604:	7ff00000 	.word	0x7ff00000
    8608:	4b5e      	ldr	r3, [pc, #376]	; (8784 <_dtoa_r+0xcdc>)
    860a:	eefd 5bc6 	vcvt.s32.f64	s11, d6
    860e:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
    8612:	ed1c 3b02 	vldr	d3, [ip, #-8]
    8616:	eeb8 7be5 	vcvt.f64.s32	d7, s11
    861a:	ee36 7b47 	vsub.f64	d7, d6, d7
    861e:	ec41 0b16 	vmov	d6, r0, r1
    8622:	ee15 1a90 	vmov	r1, s11
    8626:	ee23 3b06 	vmul.f64	d3, d3, d6
    862a:	9800      	ldr	r0, [sp, #0]
    862c:	3130      	adds	r1, #48	; 0x30
    862e:	2a01      	cmp	r2, #1
    8630:	f800 1b01 	strb.w	r1, [r0], #1
    8634:	f000 8083 	beq.w	873e <_dtoa_r+0xc96>
    8638:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    863c:	9b00      	ldr	r3, [sp, #0]
    863e:	1899      	adds	r1, r3, r2
    8640:	ee27 7b04 	vmul.f64	d7, d7, d4
    8644:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    8648:	ee16 3a90 	vmov	r3, s13
    864c:	3330      	adds	r3, #48	; 0x30
    864e:	f800 3b01 	strb.w	r3, [r0], #1
    8652:	4281      	cmp	r1, r0
    8654:	eeb8 5be6 	vcvt.f64.s32	d5, s13
    8658:	ee37 7b45 	vsub.f64	d7, d7, d5
    865c:	d1f0      	bne.n	8640 <_dtoa_r+0xb98>
    865e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    8662:	ee33 5b06 	vadd.f64	d5, d3, d6
    8666:	eeb4 5bc7 	vcmpe.f64	d5, d7
    866a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    866e:	f53f abe3 	bmi.w	7e38 <_dtoa_r+0x390>
    8672:	ee36 6b43 	vsub.f64	d6, d6, d3
    8676:	eeb4 6bc7 	vcmpe.f64	d6, d7
    867a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    867e:	f77f ac0d 	ble.w	7e9c <_dtoa_r+0x3f4>
    8682:	4689      	mov	r9, r1
    8684:	3901      	subs	r1, #1
    8686:	f819 3c01 	ldrb.w	r3, [r9, #-1]
    868a:	2b30      	cmp	r3, #48	; 0x30
    868c:	d0f9      	beq.n	8682 <_dtoa_r+0xbda>
    868e:	1c73      	adds	r3, r6, #1
    8690:	9304      	str	r3, [sp, #16]
    8692:	e539      	b.n	8108 <_dtoa_r+0x660>
    8694:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8696:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
    869a:	e6da      	b.n	8452 <_dtoa_r+0x9aa>
    869c:	2002      	movs	r0, #2
    869e:	eeb0 6b48 	vmov.f64	d6, d8
    86a2:	f7ff bb48 	b.w	7d36 <_dtoa_r+0x28e>
    86a6:	f1b9 0f00 	cmp.w	r9, #0
    86aa:	f43f aeda 	beq.w	8462 <_dtoa_r+0x9ba>
    86ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    86b0:	2a00      	cmp	r2, #0
    86b2:	f77f abf3 	ble.w	7e9c <_dtoa_r+0x3f4>
    86b6:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    86ba:	ee26 6b04 	vmul.f64	d6, d6, d4
    86be:	3001      	adds	r0, #1
    86c0:	ee07 0a90 	vmov	s15, r0
    86c4:	9b04      	ldr	r3, [sp, #16]
    86c6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
    86ca:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    86ce:	eea6 7b05 	vfma.f64	d7, d6, d5
    86d2:	ee17 ca90 	vmov	ip, s15
    86d6:	ec51 0b17 	vmov	r0, r1, d7
    86da:	1e5e      	subs	r6, r3, #1
    86dc:	f1ac 7150 	sub.w	r1, ip, #54525952	; 0x3400000
    86e0:	f7ff bb47 	b.w	7d72 <_dtoa_r+0x2ca>
    86e4:	9b04      	ldr	r3, [sp, #16]
    86e6:	3301      	adds	r3, #1
    86e8:	9304      	str	r3, [sp, #16]
    86ea:	2331      	movs	r3, #49	; 0x31
    86ec:	f7ff bbb1 	b.w	7e52 <_dtoa_r+0x3aa>
    86f0:	9b04      	ldr	r3, [sp, #16]
    86f2:	46bb      	mov	fp, r7
    86f4:	3301      	adds	r3, #1
    86f6:	9304      	str	r3, [sp, #16]
    86f8:	2339      	movs	r3, #57	; 0x39
    86fa:	4637      	mov	r7, r6
    86fc:	f80b 3b01 	strb.w	r3, [fp], #1
    8700:	4646      	mov	r6, r8
    8702:	e4e1      	b.n	80c8 <_dtoa_r+0x620>
    8704:	f04f 0a00 	mov.w	sl, #0
    8708:	4656      	mov	r6, sl
    870a:	e653      	b.n	83b4 <_dtoa_r+0x90c>
    870c:	9208      	str	r2, [sp, #32]
    870e:	e47b      	b.n	8008 <_dtoa_r+0x560>
    8710:	1c73      	adds	r3, r6, #1
    8712:	9304      	str	r3, [sp, #16]
    8714:	4689      	mov	r9, r1
    8716:	e4f7      	b.n	8108 <_dtoa_r+0x660>
    8718:	f47f af22 	bne.w	8560 <_dtoa_r+0xab8>
    871c:	07da      	lsls	r2, r3, #31
    871e:	f57f af1f 	bpl.w	8560 <_dtoa_r+0xab8>
    8722:	e718      	b.n	8556 <_dtoa_r+0xaae>
    8724:	2b39      	cmp	r3, #57	; 0x39
    8726:	d0e3      	beq.n	86f0 <_dtoa_r+0xc48>
    8728:	f1b9 0f00 	cmp.w	r9, #0
    872c:	f73f af16 	bgt.w	855c <_dtoa_r+0xab4>
    8730:	e716      	b.n	8560 <_dtoa_r+0xab8>
    8732:	9b01      	ldr	r3, [sp, #4]
    8734:	2b02      	cmp	r3, #2
    8736:	f73f ae28 	bgt.w	838a <_dtoa_r+0x8e2>
    873a:	9704      	str	r7, [sp, #16]
    873c:	e5ba      	b.n	82b4 <_dtoa_r+0x80c>
    873e:	4601      	mov	r1, r0
    8740:	e78d      	b.n	865e <_dtoa_r+0xbb6>
    8742:	9b01      	ldr	r3, [sp, #4]
    8744:	2b02      	cmp	r3, #2
    8746:	f73f ae20 	bgt.w	838a <_dtoa_r+0x8e2>
    874a:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    874e:	9704      	str	r7, [sp, #16]
    8750:	e52b      	b.n	81aa <_dtoa_r+0x702>
    8752:	2002      	movs	r0, #2
    8754:	f7ff baef 	b.w	7d36 <_dtoa_r+0x28e>
    8758:	4b0b      	ldr	r3, [pc, #44]	; (8788 <_dtoa_r+0xce0>)
    875a:	480c      	ldr	r0, [pc, #48]	; (878c <_dtoa_r+0xce4>)
    875c:	2200      	movs	r2, #0
    875e:	f240 11af 	movw	r1, #431	; 0x1af
    8762:	f7ff f8b1 	bl	78c8 <__assert_func>
    8766:	4b08      	ldr	r3, [pc, #32]	; (8788 <_dtoa_r+0xce0>)
    8768:	4808      	ldr	r0, [pc, #32]	; (878c <_dtoa_r+0xce4>)
    876a:	463a      	mov	r2, r7
    876c:	f240 21ef 	movw	r1, #751	; 0x2ef
    8770:	f7ff f8aa 	bl	78c8 <__assert_func>
    8774:	4b06      	ldr	r3, [pc, #24]	; (8790 <_dtoa_r+0xce8>)
    8776:	9300      	str	r3, [sp, #0]
    8778:	f7ff b9d2 	b.w	7b20 <_dtoa_r+0x78>
    877c:	9b02      	ldr	r3, [sp, #8]
    877e:	9308      	str	r3, [sp, #32]
    8780:	e4f7      	b.n	8172 <_dtoa_r+0x6ca>
    8782:	bf00      	nop
    8784:	200002a8 	.word	0x200002a8
    8788:	2000044c 	.word	0x2000044c
    878c:	200005d0 	.word	0x200005d0
    8790:	200005c0 	.word	0x200005c0

00008794 <_wcrtomb_r>:
    8794:	b570      	push	{r4, r5, r6, lr}
    8796:	4605      	mov	r5, r0
    8798:	b084      	sub	sp, #16
    879a:	b15b      	cbz	r3, 87b4 <_wcrtomb_r+0x20>
    879c:	461c      	mov	r4, r3
    879e:	b169      	cbz	r1, 87bc <_wcrtomb_r+0x28>
    87a0:	4b0e      	ldr	r3, [pc, #56]	; (87dc <_wcrtomb_r+0x48>)
    87a2:	4628      	mov	r0, r5
    87a4:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
    87a8:	4623      	mov	r3, r4
    87aa:	47b0      	blx	r6
    87ac:	1c43      	adds	r3, r0, #1
    87ae:	d00f      	beq.n	87d0 <_wcrtomb_r+0x3c>
    87b0:	b004      	add	sp, #16
    87b2:	bd70      	pop	{r4, r5, r6, pc}
    87b4:	f500 7482 	add.w	r4, r0, #260	; 0x104
    87b8:	2900      	cmp	r1, #0
    87ba:	d1f1      	bne.n	87a0 <_wcrtomb_r+0xc>
    87bc:	4a07      	ldr	r2, [pc, #28]	; (87dc <_wcrtomb_r+0x48>)
    87be:	4623      	mov	r3, r4
    87c0:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
    87c4:	4628      	mov	r0, r5
    87c6:	460a      	mov	r2, r1
    87c8:	a901      	add	r1, sp, #4
    87ca:	47b0      	blx	r6
    87cc:	1c43      	adds	r3, r0, #1
    87ce:	d1ef      	bne.n	87b0 <_wcrtomb_r+0x1c>
    87d0:	2200      	movs	r2, #0
    87d2:	238a      	movs	r3, #138	; 0x8a
    87d4:	6022      	str	r2, [r4, #0]
    87d6:	602b      	str	r3, [r5, #0]
    87d8:	b004      	add	sp, #16
    87da:	bd70      	pop	{r4, r5, r6, pc}
    87dc:	20001088 	.word	0x20001088

000087e0 <_wcsrtombs_r>:
    87e0:	b510      	push	{r4, lr}
    87e2:	b082      	sub	sp, #8
    87e4:	9c04      	ldr	r4, [sp, #16]
    87e6:	e9cd 3400 	strd	r3, r4, [sp]
    87ea:	f04f 33ff 	mov.w	r3, #4294967295
    87ee:	f001 fbc7 	bl	9f80 <_wcsnrtombs_r>
    87f2:	b002      	add	sp, #8
    87f4:	bd10      	pop	{r4, pc}
    87f6:	bf00      	nop

000087f8 <fiprintf>:
    87f8:	b40e      	push	{r1, r2, r3}
    87fa:	b510      	push	{r4, lr}
    87fc:	b083      	sub	sp, #12
    87fe:	ab05      	add	r3, sp, #20
    8800:	4c06      	ldr	r4, [pc, #24]	; (881c <fiprintf+0x24>)
    8802:	f853 2b04 	ldr.w	r2, [r3], #4
    8806:	9301      	str	r3, [sp, #4]
    8808:	4601      	mov	r1, r0
    880a:	6820      	ldr	r0, [r4, #0]
    880c:	f000 f8c4 	bl	8998 <_vfiprintf_r>
    8810:	b003      	add	sp, #12
    8812:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8816:	b003      	add	sp, #12
    8818:	4770      	bx	lr
    881a:	bf00      	nop
    881c:	20001610 	.word	0x20001610

00008820 <__ssprint_r>:
    8820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8824:	6893      	ldr	r3, [r2, #8]
    8826:	6817      	ldr	r7, [r2, #0]
    8828:	b083      	sub	sp, #12
    882a:	4692      	mov	sl, r2
    882c:	2b00      	cmp	r3, #0
    882e:	d070      	beq.n	8912 <__ssprint_r+0xf2>
    8830:	4681      	mov	r9, r0
    8832:	688a      	ldr	r2, [r1, #8]
    8834:	6808      	ldr	r0, [r1, #0]
    8836:	460c      	mov	r4, r1
    8838:	3708      	adds	r7, #8
    883a:	e043      	b.n	88c4 <__ssprint_r+0xa4>
    883c:	89a3      	ldrh	r3, [r4, #12]
    883e:	f413 6f90 	tst.w	r3, #1152	; 0x480
    8842:	d02e      	beq.n	88a2 <__ssprint_r+0x82>
    8844:	e9d4 1604 	ldrd	r1, r6, [r4, #16]
    8848:	eba0 0801 	sub.w	r8, r0, r1
    884c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    8850:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
    8854:	f108 0001 	add.w	r0, r8, #1
    8858:	1076      	asrs	r6, r6, #1
    885a:	4428      	add	r0, r5
    885c:	42b0      	cmp	r0, r6
    885e:	4632      	mov	r2, r6
    8860:	bf84      	itt	hi
    8862:	4606      	movhi	r6, r0
    8864:	4632      	movhi	r2, r6
    8866:	055b      	lsls	r3, r3, #21
    8868:	d537      	bpl.n	88da <__ssprint_r+0xba>
    886a:	4611      	mov	r1, r2
    886c:	4648      	mov	r0, r9
    886e:	f7fb f87f 	bl	3970 <_malloc_r>
    8872:	9001      	str	r0, [sp, #4]
    8874:	2800      	cmp	r0, #0
    8876:	d03a      	beq.n	88ee <__ssprint_r+0xce>
    8878:	4642      	mov	r2, r8
    887a:	6921      	ldr	r1, [r4, #16]
    887c:	f7f9 fac6 	bl	1e0c <memcpy>
    8880:	89a2      	ldrh	r2, [r4, #12]
    8882:	9b01      	ldr	r3, [sp, #4]
    8884:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
    8888:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    888c:	81a2      	strh	r2, [r4, #12]
    888e:	eba6 0208 	sub.w	r2, r6, r8
    8892:	eb03 0008 	add.w	r0, r3, r8
    8896:	6166      	str	r6, [r4, #20]
    8898:	60a2      	str	r2, [r4, #8]
    889a:	6123      	str	r3, [r4, #16]
    889c:	6020      	str	r0, [r4, #0]
    889e:	462e      	mov	r6, r5
    88a0:	46a8      	mov	r8, r5
    88a2:	4642      	mov	r2, r8
    88a4:	4659      	mov	r1, fp
    88a6:	f7fb ff03 	bl	46b0 <memmove>
    88aa:	f8da 3008 	ldr.w	r3, [sl, #8]
    88ae:	68a2      	ldr	r2, [r4, #8]
    88b0:	6820      	ldr	r0, [r4, #0]
    88b2:	1b92      	subs	r2, r2, r6
    88b4:	4440      	add	r0, r8
    88b6:	1b5b      	subs	r3, r3, r5
    88b8:	60a2      	str	r2, [r4, #8]
    88ba:	6020      	str	r0, [r4, #0]
    88bc:	f8ca 3008 	str.w	r3, [sl, #8]
    88c0:	b33b      	cbz	r3, 8912 <__ssprint_r+0xf2>
    88c2:	3708      	adds	r7, #8
    88c4:	e957 b502 	ldrd	fp, r5, [r7, #-8]
    88c8:	2d00      	cmp	r5, #0
    88ca:	d0fa      	beq.n	88c2 <__ssprint_r+0xa2>
    88cc:	42aa      	cmp	r2, r5
    88ce:	4616      	mov	r6, r2
    88d0:	4690      	mov	r8, r2
    88d2:	d9b3      	bls.n	883c <__ssprint_r+0x1c>
    88d4:	462e      	mov	r6, r5
    88d6:	46a8      	mov	r8, r5
    88d8:	e7e3      	b.n	88a2 <__ssprint_r+0x82>
    88da:	4648      	mov	r0, r9
    88dc:	f7fb fb10 	bl	3f00 <_realloc_r>
    88e0:	4603      	mov	r3, r0
    88e2:	2800      	cmp	r0, #0
    88e4:	d1d3      	bne.n	888e <__ssprint_r+0x6e>
    88e6:	6921      	ldr	r1, [r4, #16]
    88e8:	4648      	mov	r0, r9
    88ea:	f7fc fbab 	bl	5044 <_free_r>
    88ee:	89a3      	ldrh	r3, [r4, #12]
    88f0:	220c      	movs	r2, #12
    88f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    88f6:	f8c9 2000 	str.w	r2, [r9]
    88fa:	f04f 30ff 	mov.w	r0, #4294967295
    88fe:	81a3      	strh	r3, [r4, #12]
    8900:	2200      	movs	r2, #0
    8902:	2300      	movs	r3, #0
    8904:	f8ca 2008 	str.w	r2, [sl, #8]
    8908:	f8ca 3004 	str.w	r3, [sl, #4]
    890c:	b003      	add	sp, #12
    890e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8912:	2000      	movs	r0, #0
    8914:	2300      	movs	r3, #0
    8916:	f8ca 3004 	str.w	r3, [sl, #4]
    891a:	b003      	add	sp, #12
    891c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00008920 <__sprint_r.part.0>:
    8920:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8924:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    8926:	049c      	lsls	r4, r3, #18
    8928:	4690      	mov	r8, r2
    892a:	d52d      	bpl.n	8988 <__sprint_r.part.0+0x68>
    892c:	6893      	ldr	r3, [r2, #8]
    892e:	6812      	ldr	r2, [r2, #0]
    8930:	b343      	cbz	r3, 8984 <__sprint_r.part.0+0x64>
    8932:	468b      	mov	fp, r1
    8934:	4606      	mov	r6, r0
    8936:	f102 0908 	add.w	r9, r2, #8
    893a:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
    893e:	ea5f 079a 	movs.w	r7, sl, lsr #2
    8942:	d015      	beq.n	8970 <__sprint_r.part.0+0x50>
    8944:	3d04      	subs	r5, #4
    8946:	2400      	movs	r4, #0
    8948:	e001      	b.n	894e <__sprint_r.part.0+0x2e>
    894a:	42a7      	cmp	r7, r4
    894c:	d00e      	beq.n	896c <__sprint_r.part.0+0x4c>
    894e:	f855 1f04 	ldr.w	r1, [r5, #4]!
    8952:	465a      	mov	r2, fp
    8954:	4630      	mov	r0, r6
    8956:	f001 fa5b 	bl	9e10 <_fputwc_r>
    895a:	1c43      	adds	r3, r0, #1
    895c:	f104 0401 	add.w	r4, r4, #1
    8960:	d1f3      	bne.n	894a <__sprint_r.part.0+0x2a>
    8962:	2300      	movs	r3, #0
    8964:	e9c8 3301 	strd	r3, r3, [r8, #4]
    8968:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    896c:	f8d8 3008 	ldr.w	r3, [r8, #8]
    8970:	f02a 0a03 	bic.w	sl, sl, #3
    8974:	eba3 030a 	sub.w	r3, r3, sl
    8978:	f8c8 3008 	str.w	r3, [r8, #8]
    897c:	f109 0908 	add.w	r9, r9, #8
    8980:	2b00      	cmp	r3, #0
    8982:	d1da      	bne.n	893a <__sprint_r.part.0+0x1a>
    8984:	2000      	movs	r0, #0
    8986:	e7ec      	b.n	8962 <__sprint_r.part.0+0x42>
    8988:	f001 f80c 	bl	99a4 <__sfvwrite_r>
    898c:	2300      	movs	r3, #0
    898e:	e9c8 3301 	strd	r3, r3, [r8, #4]
    8992:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8996:	bf00      	nop

00008998 <_vfiprintf_r>:
    8998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    899c:	ed2d 8b02 	vpush	{d8}
    89a0:	b0c5      	sub	sp, #276	; 0x114
    89a2:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
    89a6:	4683      	mov	fp, r0
    89a8:	ee08 1a10 	vmov	s16, r1
    89ac:	4616      	mov	r6, r2
    89ae:	2100      	movs	r1, #0
    89b0:	2208      	movs	r2, #8
    89b2:	4650      	mov	r0, sl
    89b4:	461c      	mov	r4, r3
    89b6:	9307      	str	r3, [sp, #28]
    89b8:	f7fb fef6 	bl	47a8 <memset>
    89bc:	f1bb 0f00 	cmp.w	fp, #0
    89c0:	d004      	beq.n	89cc <_vfiprintf_r+0x34>
    89c2:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
    89c6:	2b00      	cmp	r3, #0
    89c8:	f000 86a0 	beq.w	970c <_vfiprintf_r+0xd74>
    89cc:	ee18 2a10 	vmov	r2, s16
    89d0:	6e53      	ldr	r3, [r2, #100]	; 0x64
    89d2:	07db      	lsls	r3, r3, #31
    89d4:	f140 8513 	bpl.w	93fe <_vfiprintf_r+0xa66>
    89d8:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
    89dc:	b28a      	uxth	r2, r1
    89de:	0495      	lsls	r5, r2, #18
    89e0:	d40b      	bmi.n	89fa <_vfiprintf_r+0x62>
    89e2:	ee18 3a10 	vmov	r3, s16
    89e6:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
    89ea:	8199      	strh	r1, [r3, #12]
    89ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    89ee:	b28a      	uxth	r2, r1
    89f0:	ee18 1a10 	vmov	r1, s16
    89f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    89f8:	664b      	str	r3, [r1, #100]	; 0x64
    89fa:	0710      	lsls	r0, r2, #28
    89fc:	f140 8105 	bpl.w	8c0a <_vfiprintf_r+0x272>
    8a00:	ee18 3a10 	vmov	r3, s16
    8a04:	691b      	ldr	r3, [r3, #16]
    8a06:	2b00      	cmp	r3, #0
    8a08:	f000 80ff 	beq.w	8c0a <_vfiprintf_r+0x272>
    8a0c:	f002 031a 	and.w	r3, r2, #26
    8a10:	2b0a      	cmp	r3, #10
    8a12:	f000 810a 	beq.w	8c2a <_vfiprintf_r+0x292>
    8a16:	2300      	movs	r3, #0
    8a18:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
    8a1c:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
    8a20:	aa1b      	add	r2, sp, #108	; 0x6c
    8a22:	930c      	str	r3, [sp, #48]	; 0x30
    8a24:	9218      	str	r2, [sp, #96]	; 0x60
    8a26:	4691      	mov	r9, r2
    8a28:	930b      	str	r3, [sp, #44]	; 0x2c
    8a2a:	9305      	str	r3, [sp, #20]
    8a2c:	46b0      	mov	r8, r6
    8a2e:	4644      	mov	r4, r8
    8a30:	4ba8      	ldr	r3, [pc, #672]	; (8cd4 <_vfiprintf_r+0x33c>)
    8a32:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    8a36:	f7fb ff81 	bl	493c <__locale_mb_cur_max>
    8a3a:	4622      	mov	r2, r4
    8a3c:	4603      	mov	r3, r0
    8a3e:	a912      	add	r1, sp, #72	; 0x48
    8a40:	f8cd a000 	str.w	sl, [sp]
    8a44:	4658      	mov	r0, fp
    8a46:	47a8      	blx	r5
    8a48:	2800      	cmp	r0, #0
    8a4a:	f000 8145 	beq.w	8cd8 <_vfiprintf_r+0x340>
    8a4e:	f2c0 8139 	blt.w	8cc4 <_vfiprintf_r+0x32c>
    8a52:	9a12      	ldr	r2, [sp, #72]	; 0x48
    8a54:	2a25      	cmp	r2, #37	; 0x25
    8a56:	4603      	mov	r3, r0
    8a58:	d001      	beq.n	8a5e <_vfiprintf_r+0xc6>
    8a5a:	441c      	add	r4, r3
    8a5c:	e7e8      	b.n	8a30 <_vfiprintf_r+0x98>
    8a5e:	ebb4 0608 	subs.w	r6, r4, r8
    8a62:	4605      	mov	r5, r0
    8a64:	f040 813c 	bne.w	8ce0 <_vfiprintf_r+0x348>
    8a68:	2300      	movs	r3, #0
    8a6a:	7861      	ldrb	r1, [r4, #1]
    8a6c:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    8a70:	f104 0801 	add.w	r8, r4, #1
    8a74:	9306      	str	r3, [sp, #24]
    8a76:	f04f 37ff 	mov.w	r7, #4294967295
    8a7a:	461e      	mov	r6, r3
    8a7c:	242b      	movs	r4, #43	; 0x2b
    8a7e:	f108 0801 	add.w	r8, r8, #1
    8a82:	f1a1 0320 	sub.w	r3, r1, #32
    8a86:	2b5a      	cmp	r3, #90	; 0x5a
    8a88:	f200 8178 	bhi.w	8d7c <_vfiprintf_r+0x3e4>
    8a8c:	e8df f013 	tbh	[pc, r3, lsl #1]
    8a90:	017602b5 	.word	0x017602b5
    8a94:	02b00176 	.word	0x02b00176
    8a98:	01760176 	.word	0x01760176
    8a9c:	006a0176 	.word	0x006a0176
    8aa0:	01760176 	.word	0x01760176
    8aa4:	028d027d 	.word	0x028d027d
    8aa8:	02880176 	.word	0x02880176
    8aac:	01760297 	.word	0x01760297
    8ab0:	005b0292 	.word	0x005b0292
    8ab4:	005b005b 	.word	0x005b005b
    8ab8:	005b005b 	.word	0x005b005b
    8abc:	005b005b 	.word	0x005b005b
    8ac0:	005b005b 	.word	0x005b005b
    8ac4:	01760176 	.word	0x01760176
    8ac8:	01760176 	.word	0x01760176
    8acc:	01760176 	.word	0x01760176
    8ad0:	01760176 	.word	0x01760176
    8ad4:	025c0176 	.word	0x025c0176
    8ad8:	01760084 	.word	0x01760084
    8adc:	01760176 	.word	0x01760176
    8ae0:	01760176 	.word	0x01760176
    8ae4:	01760176 	.word	0x01760176
    8ae8:	01760176 	.word	0x01760176
    8aec:	00e80176 	.word	0x00e80176
    8af0:	01760176 	.word	0x01760176
    8af4:	02330176 	.word	0x02330176
    8af8:	02da0176 	.word	0x02da0176
    8afc:	01760176 	.word	0x01760176
    8b00:	0176058b 	.word	0x0176058b
    8b04:	01760176 	.word	0x01760176
    8b08:	01760176 	.word	0x01760176
    8b0c:	01760176 	.word	0x01760176
    8b10:	01760176 	.word	0x01760176
    8b14:	025c0176 	.word	0x025c0176
    8b18:	01760086 	.word	0x01760086
    8b1c:	01760176 	.word	0x01760176
    8b20:	008602cd 	.word	0x008602cd
    8b24:	0176007f 	.word	0x0176007f
    8b28:	017602c0 	.word	0x017602c0
    8b2c:	00ea02fd 	.word	0x00ea02fd
    8b30:	007f02ed 	.word	0x007f02ed
    8b34:	02330176 	.word	0x02330176
    8b38:	0569007c 	.word	0x0569007c
    8b3c:	01760176 	.word	0x01760176
    8b40:	0176056b 	.word	0x0176056b
    8b44:	007c      	.short	0x007c
    8b46:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    8b4a:	2200      	movs	r2, #0
    8b4c:	f818 1b01 	ldrb.w	r1, [r8], #1
    8b50:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    8b54:	eb03 0242 	add.w	r2, r3, r2, lsl #1
    8b58:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    8b5c:	2b09      	cmp	r3, #9
    8b5e:	d9f5      	bls.n	8b4c <_vfiprintf_r+0x1b4>
    8b60:	9206      	str	r2, [sp, #24]
    8b62:	e78e      	b.n	8a82 <_vfiprintf_r+0xea>
    8b64:	4658      	mov	r0, fp
    8b66:	f7fe fe1b 	bl	77a0 <_localeconv_r>
    8b6a:	6843      	ldr	r3, [r0, #4]
    8b6c:	930d      	str	r3, [sp, #52]	; 0x34
    8b6e:	4618      	mov	r0, r3
    8b70:	f7fc f966 	bl	4e40 <strlen>
    8b74:	900e      	str	r0, [sp, #56]	; 0x38
    8b76:	4605      	mov	r5, r0
    8b78:	4658      	mov	r0, fp
    8b7a:	f7fe fe11 	bl	77a0 <_localeconv_r>
    8b7e:	6883      	ldr	r3, [r0, #8]
    8b80:	930b      	str	r3, [sp, #44]	; 0x2c
    8b82:	2d00      	cmp	r5, #0
    8b84:	f040 84d6 	bne.w	9534 <_vfiprintf_r+0xb9c>
    8b88:	f898 1000 	ldrb.w	r1, [r8]
    8b8c:	e777      	b.n	8a7e <_vfiprintf_r+0xe6>
    8b8e:	f898 1000 	ldrb.w	r1, [r8]
    8b92:	f046 0620 	orr.w	r6, r6, #32
    8b96:	e772      	b.n	8a7e <_vfiprintf_r+0xe6>
    8b98:	f046 0610 	orr.w	r6, r6, #16
    8b9c:	06b4      	lsls	r4, r6, #26
    8b9e:	f140 818e 	bpl.w	8ebe <_vfiprintf_r+0x526>
    8ba2:	9b07      	ldr	r3, [sp, #28]
    8ba4:	3307      	adds	r3, #7
    8ba6:	f023 0307 	bic.w	r3, r3, #7
    8baa:	461a      	mov	r2, r3
    8bac:	6859      	ldr	r1, [r3, #4]
    8bae:	f852 3b08 	ldr.w	r3, [r2], #8
    8bb2:	9207      	str	r2, [sp, #28]
    8bb4:	460a      	mov	r2, r1
    8bb6:	2900      	cmp	r1, #0
    8bb8:	f2c0 8470 	blt.w	949c <_vfiprintf_r+0xb04>
    8bbc:	1c79      	adds	r1, r7, #1
    8bbe:	f000 85a2 	beq.w	9706 <_vfiprintf_r+0xd6e>
    8bc2:	f026 0180 	bic.w	r1, r6, #128	; 0x80
    8bc6:	9103      	str	r1, [sp, #12]
    8bc8:	ea53 0102 	orrs.w	r1, r3, r2
    8bcc:	f000 843f 	beq.w	944e <_vfiprintf_r+0xab6>
    8bd0:	2b0a      	cmp	r3, #10
    8bd2:	f172 0100 	sbcs.w	r1, r2, #0
    8bd6:	f080 8541 	bcs.w	965c <_vfiprintf_r+0xcc4>
    8bda:	3330      	adds	r3, #48	; 0x30
    8bdc:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
    8be0:	9e03      	ldr	r6, [sp, #12]
    8be2:	2301      	movs	r3, #1
    8be4:	9304      	str	r3, [sp, #16]
    8be6:	f20d 140f 	addw	r4, sp, #271	; 0x10f
    8bea:	9b04      	ldr	r3, [sp, #16]
    8bec:	42bb      	cmp	r3, r7
    8bee:	bfb8      	it	lt
    8bf0:	463b      	movlt	r3, r7
    8bf2:	9303      	str	r3, [sp, #12]
    8bf4:	2300      	movs	r3, #0
    8bf6:	9308      	str	r3, [sp, #32]
    8bf8:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    8bfc:	2b00      	cmp	r3, #0
    8bfe:	f000 80cb 	beq.w	8d98 <_vfiprintf_r+0x400>
    8c02:	9b03      	ldr	r3, [sp, #12]
    8c04:	3301      	adds	r3, #1
    8c06:	9303      	str	r3, [sp, #12]
    8c08:	e0c6      	b.n	8d98 <_vfiprintf_r+0x400>
    8c0a:	ee18 1a10 	vmov	r1, s16
    8c0e:	4658      	mov	r0, fp
    8c10:	ee18 5a10 	vmov	r5, s16
    8c14:	f001 f840 	bl	9c98 <__swsetup_r>
    8c18:	2800      	cmp	r0, #0
    8c1a:	f040 8652 	bne.w	98c2 <_vfiprintf_r+0xf2a>
    8c1e:	89aa      	ldrh	r2, [r5, #12]
    8c20:	f002 031a 	and.w	r3, r2, #26
    8c24:	2b0a      	cmp	r3, #10
    8c26:	f47f aef6 	bne.w	8a16 <_vfiprintf_r+0x7e>
    8c2a:	ee18 1a10 	vmov	r1, s16
    8c2e:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
    8c32:	2b00      	cmp	r3, #0
    8c34:	f6ff aeef 	blt.w	8a16 <_vfiprintf_r+0x7e>
    8c38:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    8c3a:	07db      	lsls	r3, r3, #31
    8c3c:	d402      	bmi.n	8c44 <_vfiprintf_r+0x2ac>
    8c3e:	0597      	lsls	r7, r2, #22
    8c40:	f140 8612 	bpl.w	9868 <_vfiprintf_r+0xed0>
    8c44:	ee18 1a10 	vmov	r1, s16
    8c48:	4623      	mov	r3, r4
    8c4a:	4632      	mov	r2, r6
    8c4c:	4658      	mov	r0, fp
    8c4e:	f000 fe69 	bl	9924 <__sbprintf>
    8c52:	9005      	str	r0, [sp, #20]
    8c54:	9805      	ldr	r0, [sp, #20]
    8c56:	b045      	add	sp, #276	; 0x114
    8c58:	ecbd 8b02 	vpop	{d8}
    8c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8c60:	f046 0610 	orr.w	r6, r6, #16
    8c64:	f016 0220 	ands.w	r2, r6, #32
    8c68:	f000 8136 	beq.w	8ed8 <_vfiprintf_r+0x540>
    8c6c:	9b07      	ldr	r3, [sp, #28]
    8c6e:	3307      	adds	r3, #7
    8c70:	f023 0307 	bic.w	r3, r3, #7
    8c74:	4619      	mov	r1, r3
    8c76:	685a      	ldr	r2, [r3, #4]
    8c78:	f851 3b08 	ldr.w	r3, [r1], #8
    8c7c:	9107      	str	r1, [sp, #28]
    8c7e:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
    8c82:	9103      	str	r1, [sp, #12]
    8c84:	2100      	movs	r1, #0
    8c86:	2000      	movs	r0, #0
    8c88:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
    8c8c:	1c78      	adds	r0, r7, #1
    8c8e:	f000 8210 	beq.w	90b2 <_vfiprintf_r+0x71a>
    8c92:	9803      	ldr	r0, [sp, #12]
    8c94:	f020 0680 	bic.w	r6, r0, #128	; 0x80
    8c98:	ea53 0002 	orrs.w	r0, r3, r2
    8c9c:	f040 8208 	bne.w	90b0 <_vfiprintf_r+0x718>
    8ca0:	2f00      	cmp	r7, #0
    8ca2:	f040 8538 	bne.w	9716 <_vfiprintf_r+0xd7e>
    8ca6:	2900      	cmp	r1, #0
    8ca8:	f040 83d5 	bne.w	9456 <_vfiprintf_r+0xabe>
    8cac:	9b03      	ldr	r3, [sp, #12]
    8cae:	f013 0301 	ands.w	r3, r3, #1
    8cb2:	9304      	str	r3, [sp, #16]
    8cb4:	f000 8411 	beq.w	94da <_vfiprintf_r+0xb42>
    8cb8:	2330      	movs	r3, #48	; 0x30
    8cba:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
    8cbe:	f20d 140f 	addw	r4, sp, #271	; 0x10f
    8cc2:	e792      	b.n	8bea <_vfiprintf_r+0x252>
    8cc4:	2208      	movs	r2, #8
    8cc6:	2100      	movs	r1, #0
    8cc8:	4650      	mov	r0, sl
    8cca:	f7fb fd6d 	bl	47a8 <memset>
    8cce:	2301      	movs	r3, #1
    8cd0:	441c      	add	r4, r3
    8cd2:	e6ad      	b.n	8a30 <_vfiprintf_r+0x98>
    8cd4:	20001088 	.word	0x20001088
    8cd8:	ebb4 0608 	subs.w	r6, r4, r8
    8cdc:	4605      	mov	r5, r0
    8cde:	d01b      	beq.n	8d18 <_vfiprintf_r+0x380>
    8ce0:	9b19      	ldr	r3, [sp, #100]	; 0x64
    8ce2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    8ce4:	3301      	adds	r3, #1
    8ce6:	4432      	add	r2, r6
    8ce8:	2b07      	cmp	r3, #7
    8cea:	e9c9 8600 	strd	r8, r6, [r9]
    8cee:	921a      	str	r2, [sp, #104]	; 0x68
    8cf0:	9319      	str	r3, [sp, #100]	; 0x64
    8cf2:	dd1c      	ble.n	8d2e <_vfiprintf_r+0x396>
    8cf4:	2a00      	cmp	r2, #0
    8cf6:	f000 83a6 	beq.w	9446 <_vfiprintf_r+0xaae>
    8cfa:	ee18 1a10 	vmov	r1, s16
    8cfe:	aa18      	add	r2, sp, #96	; 0x60
    8d00:	4658      	mov	r0, fp
    8d02:	f7ff fe0d 	bl	8920 <__sprint_r.part.0>
    8d06:	bb20      	cbnz	r0, 8d52 <_vfiprintf_r+0x3ba>
    8d08:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8d0c:	9b05      	ldr	r3, [sp, #20]
    8d0e:	4433      	add	r3, r6
    8d10:	9305      	str	r3, [sp, #20]
    8d12:	2d00      	cmp	r5, #0
    8d14:	f47f aea8 	bne.w	8a68 <_vfiprintf_r+0xd0>
    8d18:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    8d1a:	2b00      	cmp	r3, #0
    8d1c:	f040 85c1 	bne.w	98a2 <_vfiprintf_r+0xf0a>
    8d20:	ee18 3a10 	vmov	r3, s16
    8d24:	2200      	movs	r2, #0
    8d26:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    8d2a:	9219      	str	r2, [sp, #100]	; 0x64
    8d2c:	e015      	b.n	8d5a <_vfiprintf_r+0x3c2>
    8d2e:	f109 0908 	add.w	r9, r9, #8
    8d32:	e7eb      	b.n	8d0c <_vfiprintf_r+0x374>
    8d34:	ee18 1a10 	vmov	r1, s16
    8d38:	aa18      	add	r2, sp, #96	; 0x60
    8d3a:	4658      	mov	r0, fp
    8d3c:	f7ff fdf0 	bl	8920 <__sprint_r.part.0>
    8d40:	2800      	cmp	r0, #0
    8d42:	f000 80a6 	beq.w	8e92 <_vfiprintf_r+0x4fa>
    8d46:	9b08      	ldr	r3, [sp, #32]
    8d48:	b11b      	cbz	r3, 8d52 <_vfiprintf_r+0x3ba>
    8d4a:	9908      	ldr	r1, [sp, #32]
    8d4c:	4658      	mov	r0, fp
    8d4e:	f7fc f979 	bl	5044 <_free_r>
    8d52:	ee18 3a10 	vmov	r3, s16
    8d56:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    8d5a:	ee18 2a10 	vmov	r2, s16
    8d5e:	6e52      	ldr	r2, [r2, #100]	; 0x64
    8d60:	f012 0f01 	tst.w	r2, #1
    8d64:	b29a      	uxth	r2, r3
    8d66:	f000 80a0 	beq.w	8eaa <_vfiprintf_r+0x512>
    8d6a:	0650      	lsls	r0, r2, #25
    8d6c:	f100 85b2 	bmi.w	98d4 <_vfiprintf_r+0xf3c>
    8d70:	9805      	ldr	r0, [sp, #20]
    8d72:	b045      	add	sp, #276	; 0x114
    8d74:	ecbd 8b02 	vpop	{d8}
    8d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8d7c:	2900      	cmp	r1, #0
    8d7e:	d0cb      	beq.n	8d18 <_vfiprintf_r+0x380>
    8d80:	2300      	movs	r3, #0
    8d82:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    8d86:	2301      	movs	r3, #1
    8d88:	e9cd 3303 	strd	r3, r3, [sp, #12]
    8d8c:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
    8d90:	ac2b      	add	r4, sp, #172	; 0xac
    8d92:	2300      	movs	r3, #0
    8d94:	9308      	str	r3, [sp, #32]
    8d96:	461f      	mov	r7, r3
    8d98:	f016 0302 	ands.w	r3, r6, #2
    8d9c:	9309      	str	r3, [sp, #36]	; 0x24
    8d9e:	d002      	beq.n	8da6 <_vfiprintf_r+0x40e>
    8da0:	9b03      	ldr	r3, [sp, #12]
    8da2:	3302      	adds	r3, #2
    8da4:	9303      	str	r3, [sp, #12]
    8da6:	f016 0384 	ands.w	r3, r6, #132	; 0x84
    8daa:	930a      	str	r3, [sp, #40]	; 0x28
    8dac:	d105      	bne.n	8dba <_vfiprintf_r+0x422>
    8dae:	9b06      	ldr	r3, [sp, #24]
    8db0:	9a03      	ldr	r2, [sp, #12]
    8db2:	1a9d      	subs	r5, r3, r2
    8db4:	2d00      	cmp	r5, #0
    8db6:	f300 827b 	bgt.w	92b0 <_vfiprintf_r+0x918>
    8dba:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    8dbe:	1c41      	adds	r1, r0, #1
    8dc0:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
    8dc4:	b182      	cbz	r2, 8de8 <_vfiprintf_r+0x450>
    8dc6:	2201      	movs	r2, #1
    8dc8:	3301      	adds	r3, #1
    8dca:	f8c9 2004 	str.w	r2, [r9, #4]
    8dce:	2907      	cmp	r1, #7
    8dd0:	f10d 0243 	add.w	r2, sp, #67	; 0x43
    8dd4:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    8dd8:	f8c9 2000 	str.w	r2, [r9]
    8ddc:	f300 824a 	bgt.w	9274 <_vfiprintf_r+0x8dc>
    8de0:	4608      	mov	r0, r1
    8de2:	f109 0908 	add.w	r9, r9, #8
    8de6:	3101      	adds	r1, #1
    8de8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8dea:	b1e2      	cbz	r2, 8e26 <_vfiprintf_r+0x48e>
    8dec:	aa11      	add	r2, sp, #68	; 0x44
    8dee:	3302      	adds	r3, #2
    8df0:	f8c9 2000 	str.w	r2, [r9]
    8df4:	2907      	cmp	r1, #7
    8df6:	f04f 0202 	mov.w	r2, #2
    8dfa:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    8dfe:	f8c9 2004 	str.w	r2, [r9, #4]
    8e02:	f340 8250 	ble.w	92a6 <_vfiprintf_r+0x90e>
    8e06:	2b00      	cmp	r3, #0
    8e08:	f000 8343 	beq.w	9492 <_vfiprintf_r+0xafa>
    8e0c:	ee18 1a10 	vmov	r1, s16
    8e10:	aa18      	add	r2, sp, #96	; 0x60
    8e12:	4658      	mov	r0, fp
    8e14:	f7ff fd84 	bl	8920 <__sprint_r.part.0>
    8e18:	2800      	cmp	r0, #0
    8e1a:	d194      	bne.n	8d46 <_vfiprintf_r+0x3ae>
    8e1c:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    8e20:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8e24:	1c41      	adds	r1, r0, #1
    8e26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    8e28:	2a80      	cmp	r2, #128	; 0x80
    8e2a:	f000 8184 	beq.w	9136 <_vfiprintf_r+0x79e>
    8e2e:	9a04      	ldr	r2, [sp, #16]
    8e30:	1abd      	subs	r5, r7, r2
    8e32:	2d00      	cmp	r5, #0
    8e34:	f300 81d7 	bgt.w	91e6 <_vfiprintf_r+0x84e>
    8e38:	9a04      	ldr	r2, [sp, #16]
    8e3a:	f8c9 4000 	str.w	r4, [r9]
    8e3e:	4413      	add	r3, r2
    8e40:	2907      	cmp	r1, #7
    8e42:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    8e46:	f8c9 2004 	str.w	r2, [r9, #4]
    8e4a:	f340 816e 	ble.w	912a <_vfiprintf_r+0x792>
    8e4e:	2b00      	cmp	r3, #0
    8e50:	f000 8275 	beq.w	933e <_vfiprintf_r+0x9a6>
    8e54:	ee18 1a10 	vmov	r1, s16
    8e58:	aa18      	add	r2, sp, #96	; 0x60
    8e5a:	4658      	mov	r0, fp
    8e5c:	f7ff fd60 	bl	8920 <__sprint_r.part.0>
    8e60:	2800      	cmp	r0, #0
    8e62:	f47f af70 	bne.w	8d46 <_vfiprintf_r+0x3ae>
    8e66:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    8e68:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8e6c:	0775      	lsls	r5, r6, #29
    8e6e:	d505      	bpl.n	8e7c <_vfiprintf_r+0x4e4>
    8e70:	9a06      	ldr	r2, [sp, #24]
    8e72:	9903      	ldr	r1, [sp, #12]
    8e74:	1a54      	subs	r4, r2, r1
    8e76:	2c00      	cmp	r4, #0
    8e78:	f300 826b 	bgt.w	9352 <_vfiprintf_r+0x9ba>
    8e7c:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
    8e80:	9803      	ldr	r0, [sp, #12]
    8e82:	4281      	cmp	r1, r0
    8e84:	bfac      	ite	ge
    8e86:	1852      	addge	r2, r2, r1
    8e88:	1812      	addlt	r2, r2, r0
    8e8a:	9205      	str	r2, [sp, #20]
    8e8c:	2b00      	cmp	r3, #0
    8e8e:	f47f af51 	bne.w	8d34 <_vfiprintf_r+0x39c>
    8e92:	9908      	ldr	r1, [sp, #32]
    8e94:	2300      	movs	r3, #0
    8e96:	9319      	str	r3, [sp, #100]	; 0x64
    8e98:	2900      	cmp	r1, #0
    8e9a:	f000 8149 	beq.w	9130 <_vfiprintf_r+0x798>
    8e9e:	4658      	mov	r0, fp
    8ea0:	f7fc f8d0 	bl	5044 <_free_r>
    8ea4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8ea8:	e5c1      	b.n	8a2e <_vfiprintf_r+0x96>
    8eaa:	059c      	lsls	r4, r3, #22
    8eac:	f53f af5d 	bmi.w	8d6a <_vfiprintf_r+0x3d2>
    8eb0:	ee18 4a10 	vmov	r4, s16
    8eb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8eb6:	f7fb fddd 	bl	4a74 <__retarget_lock_release_recursive>
    8eba:	89a2      	ldrh	r2, [r4, #12]
    8ebc:	e755      	b.n	8d6a <_vfiprintf_r+0x3d2>
    8ebe:	06f0      	lsls	r0, r6, #27
    8ec0:	9a07      	ldr	r2, [sp, #28]
    8ec2:	f100 831f 	bmi.w	9504 <_vfiprintf_r+0xb6c>
    8ec6:	0671      	lsls	r1, r6, #25
    8ec8:	f140 8319 	bpl.w	94fe <_vfiprintf_r+0xb66>
    8ecc:	f932 3b04 	ldrsh.w	r3, [r2], #4
    8ed0:	9207      	str	r2, [sp, #28]
    8ed2:	17da      	asrs	r2, r3, #31
    8ed4:	4611      	mov	r1, r2
    8ed6:	e66e      	b.n	8bb6 <_vfiprintf_r+0x21e>
    8ed8:	f016 0310 	ands.w	r3, r6, #16
    8edc:	9907      	ldr	r1, [sp, #28]
    8ede:	f040 8309 	bne.w	94f4 <_vfiprintf_r+0xb5c>
    8ee2:	f016 0040 	ands.w	r0, r6, #64	; 0x40
    8ee6:	f000 8301 	beq.w	94ec <_vfiprintf_r+0xb54>
    8eea:	461a      	mov	r2, r3
    8eec:	f851 3b04 	ldr.w	r3, [r1], #4
    8ef0:	9107      	str	r1, [sp, #28]
    8ef2:	b29b      	uxth	r3, r3
    8ef4:	e6c3      	b.n	8c7e <_vfiprintf_r+0x2e6>
    8ef6:	9b07      	ldr	r3, [sp, #28]
    8ef8:	461a      	mov	r2, r3
    8efa:	2300      	movs	r3, #0
    8efc:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    8f00:	4613      	mov	r3, r2
    8f02:	f853 4b04 	ldr.w	r4, [r3], #4
    8f06:	9303      	str	r3, [sp, #12]
    8f08:	2c00      	cmp	r4, #0
    8f0a:	f000 8412 	beq.w	9732 <_vfiprintf_r+0xd9a>
    8f0e:	2953      	cmp	r1, #83	; 0x53
    8f10:	f000 8365 	beq.w	95de <_vfiprintf_r+0xc46>
    8f14:	f016 0510 	ands.w	r5, r6, #16
    8f18:	f040 8361 	bne.w	95de <_vfiprintf_r+0xc46>
    8f1c:	1c7b      	adds	r3, r7, #1
    8f1e:	f000 84b3 	beq.w	9888 <_vfiprintf_r+0xef0>
    8f22:	463a      	mov	r2, r7
    8f24:	4629      	mov	r1, r5
    8f26:	4620      	mov	r0, r4
    8f28:	f7fe fc42 	bl	77b0 <memchr>
    8f2c:	9008      	str	r0, [sp, #32]
    8f2e:	2800      	cmp	r0, #0
    8f30:	f000 849f 	beq.w	9872 <_vfiprintf_r+0xeda>
    8f34:	1b03      	subs	r3, r0, r4
    8f36:	9a03      	ldr	r2, [sp, #12]
    8f38:	9304      	str	r3, [sp, #16]
    8f3a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    8f3e:	462f      	mov	r7, r5
    8f40:	9207      	str	r2, [sp, #28]
    8f42:	9303      	str	r3, [sp, #12]
    8f44:	9508      	str	r5, [sp, #32]
    8f46:	e657      	b.n	8bf8 <_vfiprintf_r+0x260>
    8f48:	2943      	cmp	r1, #67	; 0x43
    8f4a:	d002      	beq.n	8f52 <_vfiprintf_r+0x5ba>
    8f4c:	06f5      	lsls	r5, r6, #27
    8f4e:	f140 832d 	bpl.w	95ac <_vfiprintf_r+0xc14>
    8f52:	9d07      	ldr	r5, [sp, #28]
    8f54:	2208      	movs	r2, #8
    8f56:	2100      	movs	r1, #0
    8f58:	a816      	add	r0, sp, #88	; 0x58
    8f5a:	ac2b      	add	r4, sp, #172	; 0xac
    8f5c:	f7fb fc24 	bl	47a8 <memset>
    8f60:	ab16      	add	r3, sp, #88	; 0x58
    8f62:	f855 2b04 	ldr.w	r2, [r5], #4
    8f66:	4621      	mov	r1, r4
    8f68:	4658      	mov	r0, fp
    8f6a:	f7ff fc13 	bl	8794 <_wcrtomb_r>
    8f6e:	4603      	mov	r3, r0
    8f70:	3301      	adds	r3, #1
    8f72:	9004      	str	r0, [sp, #16]
    8f74:	f000 84b3 	beq.w	98de <_vfiprintf_r+0xf46>
    8f78:	9b04      	ldr	r3, [sp, #16]
    8f7a:	9507      	str	r5, [sp, #28]
    8f7c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    8f80:	9303      	str	r3, [sp, #12]
    8f82:	2300      	movs	r3, #0
    8f84:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    8f88:	e703      	b.n	8d92 <_vfiprintf_r+0x3fa>
    8f8a:	9b07      	ldr	r3, [sp, #28]
    8f8c:	f853 2b04 	ldr.w	r2, [r3], #4
    8f90:	9206      	str	r2, [sp, #24]
    8f92:	2a00      	cmp	r2, #0
    8f94:	f280 829c 	bge.w	94d0 <_vfiprintf_r+0xb38>
    8f98:	9a06      	ldr	r2, [sp, #24]
    8f9a:	4252      	negs	r2, r2
    8f9c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    8fa0:	f898 1000 	ldrb.w	r1, [r8]
    8fa4:	f046 0604 	orr.w	r6, r6, #4
    8fa8:	e569      	b.n	8a7e <_vfiprintf_r+0xe6>
    8faa:	f898 1000 	ldrb.w	r1, [r8]
    8fae:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
    8fb2:	e564      	b.n	8a7e <_vfiprintf_r+0xe6>
    8fb4:	f898 1000 	ldrb.w	r1, [r8]
    8fb8:	f046 0680 	orr.w	r6, r6, #128	; 0x80
    8fbc:	e55f      	b.n	8a7e <_vfiprintf_r+0xe6>
    8fbe:	4642      	mov	r2, r8
    8fc0:	f812 1b01 	ldrb.w	r1, [r2], #1
    8fc4:	292a      	cmp	r1, #42	; 0x2a
    8fc6:	f000 8496 	beq.w	98f6 <_vfiprintf_r+0xf5e>
    8fca:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    8fce:	2b09      	cmp	r3, #9
    8fd0:	4690      	mov	r8, r2
    8fd2:	f04f 0700 	mov.w	r7, #0
    8fd6:	f63f ad54 	bhi.w	8a82 <_vfiprintf_r+0xea>
    8fda:	f818 1b01 	ldrb.w	r1, [r8], #1
    8fde:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    8fe2:	eb03 0747 	add.w	r7, r3, r7, lsl #1
    8fe6:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    8fea:	2b09      	cmp	r3, #9
    8fec:	d9f5      	bls.n	8fda <_vfiprintf_r+0x642>
    8fee:	e548      	b.n	8a82 <_vfiprintf_r+0xea>
    8ff0:	f898 1000 	ldrb.w	r1, [r8]
    8ff4:	f046 0601 	orr.w	r6, r6, #1
    8ff8:	e541      	b.n	8a7e <_vfiprintf_r+0xe6>
    8ffa:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    8ffe:	2b00      	cmp	r3, #0
    9000:	f47f adc2 	bne.w	8b88 <_vfiprintf_r+0x1f0>
    9004:	2320      	movs	r3, #32
    9006:	f898 1000 	ldrb.w	r1, [r8]
    900a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    900e:	e536      	b.n	8a7e <_vfiprintf_r+0xe6>
    9010:	f898 1000 	ldrb.w	r1, [r8]
    9014:	296c      	cmp	r1, #108	; 0x6c
    9016:	bf03      	ittte	eq
    9018:	f898 1001 	ldrbeq.w	r1, [r8, #1]
    901c:	f046 0620 	orreq.w	r6, r6, #32
    9020:	f108 0801 	addeq.w	r8, r8, #1
    9024:	f046 0610 	orrne.w	r6, r6, #16
    9028:	e529      	b.n	8a7e <_vfiprintf_r+0xe6>
    902a:	f898 1000 	ldrb.w	r1, [r8]
    902e:	2968      	cmp	r1, #104	; 0x68
    9030:	bf03      	ittte	eq
    9032:	f898 1001 	ldrbeq.w	r1, [r8, #1]
    9036:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
    903a:	f108 0801 	addeq.w	r8, r8, #1
    903e:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
    9042:	e51c      	b.n	8a7e <_vfiprintf_r+0xe6>
    9044:	f046 0310 	orr.w	r3, r6, #16
    9048:	9303      	str	r3, [sp, #12]
    904a:	9b03      	ldr	r3, [sp, #12]
    904c:	f013 0220 	ands.w	r2, r3, #32
    9050:	f000 8206 	beq.w	9460 <_vfiprintf_r+0xac8>
    9054:	9b07      	ldr	r3, [sp, #28]
    9056:	3307      	adds	r3, #7
    9058:	f023 0307 	bic.w	r3, r3, #7
    905c:	4619      	mov	r1, r3
    905e:	685a      	ldr	r2, [r3, #4]
    9060:	f851 3b08 	ldr.w	r3, [r1], #8
    9064:	9107      	str	r1, [sp, #28]
    9066:	2101      	movs	r1, #1
    9068:	e60d      	b.n	8c86 <_vfiprintf_r+0x2ee>
    906a:	9a07      	ldr	r2, [sp, #28]
    906c:	f046 0302 	orr.w	r3, r6, #2
    9070:	9303      	str	r3, [sp, #12]
    9072:	f852 3b04 	ldr.w	r3, [r2], #4
    9076:	9207      	str	r2, [sp, #28]
    9078:	f647 0230 	movw	r2, #30768	; 0x7830
    907c:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
    9080:	4ab8      	ldr	r2, [pc, #736]	; (9364 <_vfiprintf_r+0x9cc>)
    9082:	920c      	str	r2, [sp, #48]	; 0x30
    9084:	2102      	movs	r1, #2
    9086:	2200      	movs	r2, #0
    9088:	e5fd      	b.n	8c86 <_vfiprintf_r+0x2ee>
    908a:	06b7      	lsls	r7, r6, #26
    908c:	f100 8248 	bmi.w	9520 <_vfiprintf_r+0xb88>
    9090:	06f5      	lsls	r5, r6, #27
    9092:	f100 8346 	bmi.w	9722 <_vfiprintf_r+0xd8a>
    9096:	0674      	lsls	r4, r6, #25
    9098:	f100 83d5 	bmi.w	9846 <_vfiprintf_r+0xeae>
    909c:	05b0      	lsls	r0, r6, #22
    909e:	f140 8340 	bpl.w	9722 <_vfiprintf_r+0xd8a>
    90a2:	9b07      	ldr	r3, [sp, #28]
    90a4:	9905      	ldr	r1, [sp, #20]
    90a6:	f853 2b04 	ldr.w	r2, [r3], #4
    90aa:	9307      	str	r3, [sp, #28]
    90ac:	7011      	strb	r1, [r2, #0]
    90ae:	e4be      	b.n	8a2e <_vfiprintf_r+0x96>
    90b0:	9603      	str	r6, [sp, #12]
    90b2:	2901      	cmp	r1, #1
    90b4:	f43f ad8c 	beq.w	8bd0 <_vfiprintf_r+0x238>
    90b8:	2902      	cmp	r1, #2
    90ba:	ac44      	add	r4, sp, #272	; 0x110
    90bc:	d111      	bne.n	90e2 <_vfiprintf_r+0x74a>
    90be:	980c      	ldr	r0, [sp, #48]	; 0x30
    90c0:	f003 010f 	and.w	r1, r3, #15
    90c4:	091b      	lsrs	r3, r3, #4
    90c6:	5c41      	ldrb	r1, [r0, r1]
    90c8:	f804 1d01 	strb.w	r1, [r4, #-1]!
    90cc:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    90d0:	0912      	lsrs	r2, r2, #4
    90d2:	ea53 0102 	orrs.w	r1, r3, r2
    90d6:	d1f3      	bne.n	90c0 <_vfiprintf_r+0x728>
    90d8:	9e03      	ldr	r6, [sp, #12]
    90da:	ab44      	add	r3, sp, #272	; 0x110
    90dc:	1b1b      	subs	r3, r3, r4
    90de:	9304      	str	r3, [sp, #16]
    90e0:	e583      	b.n	8bea <_vfiprintf_r+0x252>
    90e2:	f003 0107 	and.w	r1, r3, #7
    90e6:	08db      	lsrs	r3, r3, #3
    90e8:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
    90ec:	08d2      	lsrs	r2, r2, #3
    90ee:	3130      	adds	r1, #48	; 0x30
    90f0:	ea53 0502 	orrs.w	r5, r3, r2
    90f4:	4620      	mov	r0, r4
    90f6:	f804 1d01 	strb.w	r1, [r4, #-1]!
    90fa:	d1f2      	bne.n	90e2 <_vfiprintf_r+0x74a>
    90fc:	9e03      	ldr	r6, [sp, #12]
    90fe:	07f3      	lsls	r3, r6, #31
    9100:	d5eb      	bpl.n	90da <_vfiprintf_r+0x742>
    9102:	2930      	cmp	r1, #48	; 0x30
    9104:	d0e8      	beq.n	90d8 <_vfiprintf_r+0x740>
    9106:	2330      	movs	r3, #48	; 0x30
    9108:	3802      	subs	r0, #2
    910a:	f804 3c01 	strb.w	r3, [r4, #-1]
    910e:	ab44      	add	r3, sp, #272	; 0x110
    9110:	1a1b      	subs	r3, r3, r0
    9112:	9e03      	ldr	r6, [sp, #12]
    9114:	9304      	str	r3, [sp, #16]
    9116:	4604      	mov	r4, r0
    9118:	e567      	b.n	8bea <_vfiprintf_r+0x252>
    911a:	9b04      	ldr	r3, [sp, #16]
    911c:	941b      	str	r4, [sp, #108]	; 0x6c
    911e:	2201      	movs	r2, #1
    9120:	931c      	str	r3, [sp, #112]	; 0x70
    9122:	931a      	str	r3, [sp, #104]	; 0x68
    9124:	9219      	str	r2, [sp, #100]	; 0x64
    9126:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    912a:	f109 0908 	add.w	r9, r9, #8
    912e:	e69d      	b.n	8e6c <_vfiprintf_r+0x4d4>
    9130:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    9134:	e47b      	b.n	8a2e <_vfiprintf_r+0x96>
    9136:	9a06      	ldr	r2, [sp, #24]
    9138:	9d03      	ldr	r5, [sp, #12]
    913a:	1b55      	subs	r5, r2, r5
    913c:	2d00      	cmp	r5, #0
    913e:	f77f ae76 	ble.w	8e2e <_vfiprintf_r+0x496>
    9142:	2d10      	cmp	r5, #16
    9144:	f340 83bb 	ble.w	98be <_vfiprintf_r+0xf26>
    9148:	9409      	str	r4, [sp, #36]	; 0x24
    914a:	ee18 4a10 	vmov	r4, s16
    914e:	e007      	b.n	9160 <_vfiprintf_r+0x7c8>
    9150:	f100 0c02 	add.w	ip, r0, #2
    9154:	f109 0908 	add.w	r9, r9, #8
    9158:	4610      	mov	r0, r2
    915a:	3d10      	subs	r5, #16
    915c:	2d10      	cmp	r5, #16
    915e:	dd1e      	ble.n	919e <_vfiprintf_r+0x806>
    9160:	4981      	ldr	r1, [pc, #516]	; (9368 <_vfiprintf_r+0x9d0>)
    9162:	f8c9 1000 	str.w	r1, [r9]
    9166:	1c42      	adds	r2, r0, #1
    9168:	3310      	adds	r3, #16
    916a:	2110      	movs	r1, #16
    916c:	2a07      	cmp	r2, #7
    916e:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    9172:	f8c9 1004 	str.w	r1, [r9, #4]
    9176:	ddeb      	ble.n	9150 <_vfiprintf_r+0x7b8>
    9178:	aa18      	add	r2, sp, #96	; 0x60
    917a:	2b00      	cmp	r3, #0
    917c:	d074      	beq.n	9268 <_vfiprintf_r+0x8d0>
    917e:	4621      	mov	r1, r4
    9180:	4658      	mov	r0, fp
    9182:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    9186:	f7ff fbcb 	bl	8920 <__sprint_r.part.0>
    918a:	2800      	cmp	r0, #0
    918c:	f47f addb 	bne.w	8d46 <_vfiprintf_r+0x3ae>
    9190:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    9194:	3d10      	subs	r5, #16
    9196:	2d10      	cmp	r5, #16
    9198:	f100 0c01 	add.w	ip, r0, #1
    919c:	dce0      	bgt.n	9160 <_vfiprintf_r+0x7c8>
    919e:	9c09      	ldr	r4, [sp, #36]	; 0x24
    91a0:	4a71      	ldr	r2, [pc, #452]	; (9368 <_vfiprintf_r+0x9d0>)
    91a2:	f8c9 5004 	str.w	r5, [r9, #4]
    91a6:	442b      	add	r3, r5
    91a8:	f1bc 0f07 	cmp.w	ip, #7
    91ac:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
    91b0:	f8c9 2000 	str.w	r2, [r9]
    91b4:	f340 8194 	ble.w	94e0 <_vfiprintf_r+0xb48>
    91b8:	2b00      	cmp	r3, #0
    91ba:	f000 831f 	beq.w	97fc <_vfiprintf_r+0xe64>
    91be:	ee18 1a10 	vmov	r1, s16
    91c2:	aa18      	add	r2, sp, #96	; 0x60
    91c4:	4658      	mov	r0, fp
    91c6:	f7ff fbab 	bl	8920 <__sprint_r.part.0>
    91ca:	2800      	cmp	r0, #0
    91cc:	f47f adbb 	bne.w	8d46 <_vfiprintf_r+0x3ae>
    91d0:	9a04      	ldr	r2, [sp, #16]
    91d2:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    91d6:	1abd      	subs	r5, r7, r2
    91d8:	2d00      	cmp	r5, #0
    91da:	f100 0101 	add.w	r1, r0, #1
    91de:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    91e2:	f77f ae29 	ble.w	8e38 <_vfiprintf_r+0x4a0>
    91e6:	2d10      	cmp	r5, #16
    91e8:	dd29      	ble.n	923e <_vfiprintf_r+0x8a6>
    91ea:	9409      	str	r4, [sp, #36]	; 0x24
    91ec:	2710      	movs	r7, #16
    91ee:	ee18 4a10 	vmov	r4, s16
    91f2:	e007      	b.n	9204 <_vfiprintf_r+0x86c>
    91f4:	f100 0c02 	add.w	ip, r0, #2
    91f8:	f109 0908 	add.w	r9, r9, #8
    91fc:	4610      	mov	r0, r2
    91fe:	3d10      	subs	r5, #16
    9200:	2d10      	cmp	r5, #16
    9202:	dd1a      	ble.n	923a <_vfiprintf_r+0x8a2>
    9204:	1c42      	adds	r2, r0, #1
    9206:	4958      	ldr	r1, [pc, #352]	; (9368 <_vfiprintf_r+0x9d0>)
    9208:	3310      	adds	r3, #16
    920a:	2a07      	cmp	r2, #7
    920c:	e9c9 1700 	strd	r1, r7, [r9]
    9210:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    9214:	ddee      	ble.n	91f4 <_vfiprintf_r+0x85c>
    9216:	aa18      	add	r2, sp, #96	; 0x60
    9218:	b303      	cbz	r3, 925c <_vfiprintf_r+0x8c4>
    921a:	4621      	mov	r1, r4
    921c:	4658      	mov	r0, fp
    921e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    9222:	f7ff fb7d 	bl	8920 <__sprint_r.part.0>
    9226:	2800      	cmp	r0, #0
    9228:	f47f ad8d 	bne.w	8d46 <_vfiprintf_r+0x3ae>
    922c:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    9230:	3d10      	subs	r5, #16
    9232:	2d10      	cmp	r5, #16
    9234:	f100 0c01 	add.w	ip, r0, #1
    9238:	dce4      	bgt.n	9204 <_vfiprintf_r+0x86c>
    923a:	9c09      	ldr	r4, [sp, #36]	; 0x24
    923c:	4661      	mov	r1, ip
    923e:	4a4a      	ldr	r2, [pc, #296]	; (9368 <_vfiprintf_r+0x9d0>)
    9240:	f8c9 5004 	str.w	r5, [r9, #4]
    9244:	442b      	add	r3, r5
    9246:	2907      	cmp	r1, #7
    9248:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    924c:	f8c9 2000 	str.w	r2, [r9]
    9250:	f300 80e7 	bgt.w	9422 <_vfiprintf_r+0xa8a>
    9254:	f109 0908 	add.w	r9, r9, #8
    9258:	3101      	adds	r1, #1
    925a:	e5ed      	b.n	8e38 <_vfiprintf_r+0x4a0>
    925c:	f04f 0c01 	mov.w	ip, #1
    9260:	4618      	mov	r0, r3
    9262:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    9266:	e7ca      	b.n	91fe <_vfiprintf_r+0x866>
    9268:	f04f 0c01 	mov.w	ip, #1
    926c:	4618      	mov	r0, r3
    926e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    9272:	e772      	b.n	915a <_vfiprintf_r+0x7c2>
    9274:	2b00      	cmp	r3, #0
    9276:	f000 8104 	beq.w	9482 <_vfiprintf_r+0xaea>
    927a:	ee18 1a10 	vmov	r1, s16
    927e:	aa18      	add	r2, sp, #96	; 0x60
    9280:	4658      	mov	r0, fp
    9282:	f7ff fb4d 	bl	8920 <__sprint_r.part.0>
    9286:	2800      	cmp	r0, #0
    9288:	f47f ad5d 	bne.w	8d46 <_vfiprintf_r+0x3ae>
    928c:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    9290:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    9294:	1c41      	adds	r1, r0, #1
    9296:	e5a7      	b.n	8de8 <_vfiprintf_r+0x450>
    9298:	2302      	movs	r3, #2
    929a:	aa11      	add	r2, sp, #68	; 0x44
    929c:	931c      	str	r3, [sp, #112]	; 0x70
    929e:	921b      	str	r2, [sp, #108]	; 0x6c
    92a0:	2101      	movs	r1, #1
    92a2:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    92a6:	4608      	mov	r0, r1
    92a8:	f109 0908 	add.w	r9, r9, #8
    92ac:	1c41      	adds	r1, r0, #1
    92ae:	e5ba      	b.n	8e26 <_vfiprintf_r+0x48e>
    92b0:	2d10      	cmp	r5, #16
    92b2:	f340 82e5 	ble.w	9880 <_vfiprintf_r+0xee8>
    92b6:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
    92ba:	940f      	str	r4, [sp, #60]	; 0x3c
    92bc:	4608      	mov	r0, r1
    92be:	ee18 4a10 	vmov	r4, s16
    92c2:	e007      	b.n	92d4 <_vfiprintf_r+0x93c>
    92c4:	f100 0c02 	add.w	ip, r0, #2
    92c8:	f109 0908 	add.w	r9, r9, #8
    92cc:	4610      	mov	r0, r2
    92ce:	3d10      	subs	r5, #16
    92d0:	2d10      	cmp	r5, #16
    92d2:	dd1d      	ble.n	9310 <_vfiprintf_r+0x978>
    92d4:	4925      	ldr	r1, [pc, #148]	; (936c <_vfiprintf_r+0x9d4>)
    92d6:	f8c9 1000 	str.w	r1, [r9]
    92da:	1c42      	adds	r2, r0, #1
    92dc:	3310      	adds	r3, #16
    92de:	2110      	movs	r1, #16
    92e0:	2a07      	cmp	r2, #7
    92e2:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    92e6:	f8c9 1004 	str.w	r1, [r9, #4]
    92ea:	ddeb      	ble.n	92c4 <_vfiprintf_r+0x92c>
    92ec:	aa18      	add	r2, sp, #96	; 0x60
    92ee:	b303      	cbz	r3, 9332 <_vfiprintf_r+0x99a>
    92f0:	4621      	mov	r1, r4
    92f2:	4658      	mov	r0, fp
    92f4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    92f8:	f7ff fb12 	bl	8920 <__sprint_r.part.0>
    92fc:	2800      	cmp	r0, #0
    92fe:	f47f ad22 	bne.w	8d46 <_vfiprintf_r+0x3ae>
    9302:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    9306:	3d10      	subs	r5, #16
    9308:	2d10      	cmp	r5, #16
    930a:	f100 0c01 	add.w	ip, r0, #1
    930e:	dce1      	bgt.n	92d4 <_vfiprintf_r+0x93c>
    9310:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    9312:	4660      	mov	r0, ip
    9314:	4a15      	ldr	r2, [pc, #84]	; (936c <_vfiprintf_r+0x9d4>)
    9316:	f8c9 5004 	str.w	r5, [r9, #4]
    931a:	442b      	add	r3, r5
    931c:	2807      	cmp	r0, #7
    931e:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
    9322:	f8c9 2000 	str.w	r2, [r9]
    9326:	f300 80c1 	bgt.w	94ac <_vfiprintf_r+0xb14>
    932a:	f109 0908 	add.w	r9, r9, #8
    932e:	1c41      	adds	r1, r0, #1
    9330:	e546      	b.n	8dc0 <_vfiprintf_r+0x428>
    9332:	4618      	mov	r0, r3
    9334:	f04f 0c01 	mov.w	ip, #1
    9338:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    933c:	e7c7      	b.n	92ce <_vfiprintf_r+0x936>
    933e:	0776      	lsls	r6, r6, #29
    9340:	9319      	str	r3, [sp, #100]	; 0x64
    9342:	d553      	bpl.n	93ec <_vfiprintf_r+0xa54>
    9344:	9a06      	ldr	r2, [sp, #24]
    9346:	9903      	ldr	r1, [sp, #12]
    9348:	1a54      	subs	r4, r2, r1
    934a:	2c00      	cmp	r4, #0
    934c:	dd4e      	ble.n	93ec <_vfiprintf_r+0xa54>
    934e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    9352:	2c10      	cmp	r4, #16
    9354:	f340 82b0 	ble.w	98b8 <_vfiprintf_r+0xf20>
    9358:	9919      	ldr	r1, [sp, #100]	; 0x64
    935a:	ee18 6a10 	vmov	r6, s16
    935e:	2510      	movs	r5, #16
    9360:	e00d      	b.n	937e <_vfiprintf_r+0x9e6>
    9362:	bf00      	nop
    9364:	20000634 	.word	0x20000634
    9368:	20000e70 	.word	0x20000e70
    936c:	20000678 	.word	0x20000678
    9370:	1c88      	adds	r0, r1, #2
    9372:	f109 0908 	add.w	r9, r9, #8
    9376:	4611      	mov	r1, r2
    9378:	3c10      	subs	r4, #16
    937a:	2c10      	cmp	r4, #16
    937c:	dd1a      	ble.n	93b4 <_vfiprintf_r+0xa1c>
    937e:	1c4a      	adds	r2, r1, #1
    9380:	48b3      	ldr	r0, [pc, #716]	; (9650 <_vfiprintf_r+0xcb8>)
    9382:	3310      	adds	r3, #16
    9384:	2a07      	cmp	r2, #7
    9386:	e9c9 0500 	strd	r0, r5, [r9]
    938a:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    938e:	ddef      	ble.n	9370 <_vfiprintf_r+0x9d8>
    9390:	aa18      	add	r2, sp, #96	; 0x60
    9392:	b333      	cbz	r3, 93e2 <_vfiprintf_r+0xa4a>
    9394:	4631      	mov	r1, r6
    9396:	4658      	mov	r0, fp
    9398:	f7ff fac2 	bl	8920 <__sprint_r.part.0>
    939c:	2800      	cmp	r0, #0
    939e:	f47f acd2 	bne.w	8d46 <_vfiprintf_r+0x3ae>
    93a2:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
    93a6:	3c10      	subs	r4, #16
    93a8:	2c10      	cmp	r4, #16
    93aa:	f101 0001 	add.w	r0, r1, #1
    93ae:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    93b2:	dce4      	bgt.n	937e <_vfiprintf_r+0x9e6>
    93b4:	4aa6      	ldr	r2, [pc, #664]	; (9650 <_vfiprintf_r+0xcb8>)
    93b6:	f8c9 4004 	str.w	r4, [r9, #4]
    93ba:	4423      	add	r3, r4
    93bc:	2807      	cmp	r0, #7
    93be:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
    93c2:	f8c9 2000 	str.w	r2, [r9]
    93c6:	f77f ad59 	ble.w	8e7c <_vfiprintf_r+0x4e4>
    93ca:	b17b      	cbz	r3, 93ec <_vfiprintf_r+0xa54>
    93cc:	ee18 1a10 	vmov	r1, s16
    93d0:	aa18      	add	r2, sp, #96	; 0x60
    93d2:	4658      	mov	r0, fp
    93d4:	f7ff faa4 	bl	8920 <__sprint_r.part.0>
    93d8:	2800      	cmp	r0, #0
    93da:	f47f acb4 	bne.w	8d46 <_vfiprintf_r+0x3ae>
    93de:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    93e0:	e54c      	b.n	8e7c <_vfiprintf_r+0x4e4>
    93e2:	2001      	movs	r0, #1
    93e4:	4619      	mov	r1, r3
    93e6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    93ea:	e7c5      	b.n	9378 <_vfiprintf_r+0x9e0>
    93ec:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
    93f0:	9903      	ldr	r1, [sp, #12]
    93f2:	428a      	cmp	r2, r1
    93f4:	bfac      	ite	ge
    93f6:	189b      	addge	r3, r3, r2
    93f8:	185b      	addlt	r3, r3, r1
    93fa:	9305      	str	r3, [sp, #20]
    93fc:	e549      	b.n	8e92 <_vfiprintf_r+0x4fa>
    93fe:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
    9402:	058f      	lsls	r7, r1, #22
    9404:	ee18 3a10 	vmov	r3, s16
    9408:	b28a      	uxth	r2, r1
    940a:	f53f aae8 	bmi.w	89de <_vfiprintf_r+0x46>
    940e:	ee18 5a10 	vmov	r5, s16
    9412:	6d98      	ldr	r0, [r3, #88]	; 0x58
    9414:	f7fb fb2c 	bl	4a70 <__retarget_lock_acquire_recursive>
    9418:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
    941c:	b28a      	uxth	r2, r1
    941e:	f7ff bade 	b.w	89de <_vfiprintf_r+0x46>
    9422:	2b00      	cmp	r3, #0
    9424:	f43f ae79 	beq.w	911a <_vfiprintf_r+0x782>
    9428:	ee18 1a10 	vmov	r1, s16
    942c:	aa18      	add	r2, sp, #96	; 0x60
    942e:	4658      	mov	r0, fp
    9430:	f7ff fa76 	bl	8920 <__sprint_r.part.0>
    9434:	2800      	cmp	r0, #0
    9436:	f47f ac86 	bne.w	8d46 <_vfiprintf_r+0x3ae>
    943a:	9919      	ldr	r1, [sp, #100]	; 0x64
    943c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    943e:	3101      	adds	r1, #1
    9440:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    9444:	e4f8      	b.n	8e38 <_vfiprintf_r+0x4a0>
    9446:	9219      	str	r2, [sp, #100]	; 0x64
    9448:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    944c:	e45e      	b.n	8d0c <_vfiprintf_r+0x374>
    944e:	2f00      	cmp	r7, #0
    9450:	f47f abc3 	bne.w	8bda <_vfiprintf_r+0x242>
    9454:	9e03      	ldr	r6, [sp, #12]
    9456:	2700      	movs	r7, #0
    9458:	9704      	str	r7, [sp, #16]
    945a:	ac44      	add	r4, sp, #272	; 0x110
    945c:	f7ff bbc5 	b.w	8bea <_vfiprintf_r+0x252>
    9460:	9b03      	ldr	r3, [sp, #12]
    9462:	f013 0310 	ands.w	r3, r3, #16
    9466:	d154      	bne.n	9512 <_vfiprintf_r+0xb7a>
    9468:	9a03      	ldr	r2, [sp, #12]
    946a:	f012 0040 	ands.w	r0, r2, #64	; 0x40
    946e:	f000 816b 	beq.w	9748 <_vfiprintf_r+0xdb0>
    9472:	9907      	ldr	r1, [sp, #28]
    9474:	461a      	mov	r2, r3
    9476:	f851 3b04 	ldr.w	r3, [r1], #4
    947a:	9107      	str	r1, [sp, #28]
    947c:	b29b      	uxth	r3, r3
    947e:	2101      	movs	r1, #1
    9480:	e401      	b.n	8c86 <_vfiprintf_r+0x2ee>
    9482:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9484:	2a00      	cmp	r2, #0
    9486:	d164      	bne.n	9552 <_vfiprintf_r+0xbba>
    9488:	4618      	mov	r0, r3
    948a:	2101      	movs	r1, #1
    948c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    9490:	e4c9      	b.n	8e26 <_vfiprintf_r+0x48e>
    9492:	2101      	movs	r1, #1
    9494:	4618      	mov	r0, r3
    9496:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    949a:	e4c4      	b.n	8e26 <_vfiprintf_r+0x48e>
    949c:	425b      	negs	r3, r3
    949e:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
    94a2:	9603      	str	r6, [sp, #12]
    94a4:	202d      	movs	r0, #45	; 0x2d
    94a6:	2101      	movs	r1, #1
    94a8:	f7ff bbee 	b.w	8c88 <_vfiprintf_r+0x2f0>
    94ac:	2b00      	cmp	r3, #0
    94ae:	f000 8088 	beq.w	95c2 <_vfiprintf_r+0xc2a>
    94b2:	ee18 1a10 	vmov	r1, s16
    94b6:	aa18      	add	r2, sp, #96	; 0x60
    94b8:	4658      	mov	r0, fp
    94ba:	f7ff fa31 	bl	8920 <__sprint_r.part.0>
    94be:	2800      	cmp	r0, #0
    94c0:	f47f ac41 	bne.w	8d46 <_vfiprintf_r+0x3ae>
    94c4:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    94c8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    94cc:	1c41      	adds	r1, r0, #1
    94ce:	e477      	b.n	8dc0 <_vfiprintf_r+0x428>
    94d0:	f898 1000 	ldrb.w	r1, [r8]
    94d4:	9307      	str	r3, [sp, #28]
    94d6:	f7ff bad2 	b.w	8a7e <_vfiprintf_r+0xe6>
    94da:	ac44      	add	r4, sp, #272	; 0x110
    94dc:	f7ff bb85 	b.w	8bea <_vfiprintf_r+0x252>
    94e0:	f109 0908 	add.w	r9, r9, #8
    94e4:	f10c 0101 	add.w	r1, ip, #1
    94e8:	4660      	mov	r0, ip
    94ea:	e4a0      	b.n	8e2e <_vfiprintf_r+0x496>
    94ec:	f416 7200 	ands.w	r2, r6, #512	; 0x200
    94f0:	f040 8197 	bne.w	9822 <_vfiprintf_r+0xe8a>
    94f4:	f851 3b04 	ldr.w	r3, [r1], #4
    94f8:	9107      	str	r1, [sp, #28]
    94fa:	f7ff bbc0 	b.w	8c7e <_vfiprintf_r+0x2e6>
    94fe:	05b3      	lsls	r3, r6, #22
    9500:	f100 8188 	bmi.w	9814 <_vfiprintf_r+0xe7c>
    9504:	f852 3b04 	ldr.w	r3, [r2], #4
    9508:	9207      	str	r2, [sp, #28]
    950a:	17da      	asrs	r2, r3, #31
    950c:	4611      	mov	r1, r2
    950e:	f7ff bb52 	b.w	8bb6 <_vfiprintf_r+0x21e>
    9512:	9907      	ldr	r1, [sp, #28]
    9514:	f851 3b04 	ldr.w	r3, [r1], #4
    9518:	9107      	str	r1, [sp, #28]
    951a:	2101      	movs	r1, #1
    951c:	f7ff bbb3 	b.w	8c86 <_vfiprintf_r+0x2ee>
    9520:	9b07      	ldr	r3, [sp, #28]
    9522:	9805      	ldr	r0, [sp, #20]
    9524:	f853 1b04 	ldr.w	r1, [r3], #4
    9528:	9307      	str	r3, [sp, #28]
    952a:	17c2      	asrs	r2, r0, #31
    952c:	e9c1 0200 	strd	r0, r2, [r1]
    9530:	f7ff ba7d 	b.w	8a2e <_vfiprintf_r+0x96>
    9534:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9536:	2b00      	cmp	r3, #0
    9538:	f43f ab26 	beq.w	8b88 <_vfiprintf_r+0x1f0>
    953c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    953e:	781b      	ldrb	r3, [r3, #0]
    9540:	2b00      	cmp	r3, #0
    9542:	f43f ab21 	beq.w	8b88 <_vfiprintf_r+0x1f0>
    9546:	f898 1000 	ldrb.w	r1, [r8]
    954a:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
    954e:	f7ff ba96 	b.w	8a7e <_vfiprintf_r+0xe6>
    9552:	2302      	movs	r3, #2
    9554:	aa11      	add	r2, sp, #68	; 0x44
    9556:	931c      	str	r3, [sp, #112]	; 0x70
    9558:	921b      	str	r2, [sp, #108]	; 0x6c
    955a:	2001      	movs	r0, #1
    955c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    9560:	e6a2      	b.n	92a8 <_vfiprintf_r+0x910>
    9562:	9603      	str	r6, [sp, #12]
    9564:	e571      	b.n	904a <_vfiprintf_r+0x6b2>
    9566:	4b3b      	ldr	r3, [pc, #236]	; (9654 <_vfiprintf_r+0xcbc>)
    9568:	930c      	str	r3, [sp, #48]	; 0x30
    956a:	f016 0220 	ands.w	r2, r6, #32
    956e:	d059      	beq.n	9624 <_vfiprintf_r+0xc8c>
    9570:	9b07      	ldr	r3, [sp, #28]
    9572:	3307      	adds	r3, #7
    9574:	f023 0307 	bic.w	r3, r3, #7
    9578:	4618      	mov	r0, r3
    957a:	685a      	ldr	r2, [r3, #4]
    957c:	f850 3b08 	ldr.w	r3, [r0], #8
    9580:	9007      	str	r0, [sp, #28]
    9582:	07f4      	lsls	r4, r6, #31
    9584:	d509      	bpl.n	959a <_vfiprintf_r+0xc02>
    9586:	ea53 0002 	orrs.w	r0, r3, r2
    958a:	d006      	beq.n	959a <_vfiprintf_r+0xc02>
    958c:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
    9590:	2130      	movs	r1, #48	; 0x30
    9592:	f046 0602 	orr.w	r6, r6, #2
    9596:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
    959a:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
    959e:	9103      	str	r1, [sp, #12]
    95a0:	2102      	movs	r1, #2
    95a2:	f7ff bb70 	b.w	8c86 <_vfiprintf_r+0x2ee>
    95a6:	4b2c      	ldr	r3, [pc, #176]	; (9658 <_vfiprintf_r+0xcc0>)
    95a8:	930c      	str	r3, [sp, #48]	; 0x30
    95aa:	e7de      	b.n	956a <_vfiprintf_r+0xbd2>
    95ac:	9b07      	ldr	r3, [sp, #28]
    95ae:	2101      	movs	r1, #1
    95b0:	f853 2b04 	ldr.w	r2, [r3], #4
    95b4:	9103      	str	r1, [sp, #12]
    95b6:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
    95ba:	9307      	str	r3, [sp, #28]
    95bc:	9104      	str	r1, [sp, #16]
    95be:	ac2b      	add	r4, sp, #172	; 0xac
    95c0:	e4df      	b.n	8f82 <_vfiprintf_r+0x5ea>
    95c2:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
    95c6:	2a00      	cmp	r2, #0
    95c8:	f040 8132 	bne.w	9830 <_vfiprintf_r+0xe98>
    95cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    95ce:	2a00      	cmp	r2, #0
    95d0:	f47f ae62 	bne.w	9298 <_vfiprintf_r+0x900>
    95d4:	4618      	mov	r0, r3
    95d6:	2101      	movs	r1, #1
    95d8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    95dc:	e427      	b.n	8e2e <_vfiprintf_r+0x496>
    95de:	2100      	movs	r1, #0
    95e0:	2208      	movs	r2, #8
    95e2:	a816      	add	r0, sp, #88	; 0x58
    95e4:	9413      	str	r4, [sp, #76]	; 0x4c
    95e6:	f7fb f8df 	bl	47a8 <memset>
    95ea:	1c79      	adds	r1, r7, #1
    95ec:	f000 80bc 	beq.w	9768 <_vfiprintf_r+0xdd0>
    95f0:	2500      	movs	r5, #0
    95f2:	9407      	str	r4, [sp, #28]
    95f4:	462c      	mov	r4, r5
    95f6:	e00c      	b.n	9612 <_vfiprintf_r+0xc7a>
    95f8:	a92b      	add	r1, sp, #172	; 0xac
    95fa:	4658      	mov	r0, fp
    95fc:	f7ff f8ca 	bl	8794 <_wcrtomb_r>
    9600:	1c42      	adds	r2, r0, #1
    9602:	4420      	add	r0, r4
    9604:	f000 816b 	beq.w	98de <_vfiprintf_r+0xf46>
    9608:	42b8      	cmp	r0, r7
    960a:	dc08      	bgt.n	961e <_vfiprintf_r+0xc86>
    960c:	f000 8170 	beq.w	98f0 <_vfiprintf_r+0xf58>
    9610:	4604      	mov	r4, r0
    9612:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    9614:	5952      	ldr	r2, [r2, r5]
    9616:	ab16      	add	r3, sp, #88	; 0x58
    9618:	3504      	adds	r5, #4
    961a:	2a00      	cmp	r2, #0
    961c:	d1ec      	bne.n	95f8 <_vfiprintf_r+0xc60>
    961e:	9404      	str	r4, [sp, #16]
    9620:	9c07      	ldr	r4, [sp, #28]
    9622:	e0af      	b.n	9784 <_vfiprintf_r+0xdec>
    9624:	f016 0310 	ands.w	r3, r6, #16
    9628:	9807      	ldr	r0, [sp, #28]
    962a:	d10c      	bne.n	9646 <_vfiprintf_r+0xcae>
    962c:	f016 0440 	ands.w	r4, r6, #64	; 0x40
    9630:	d005      	beq.n	963e <_vfiprintf_r+0xca6>
    9632:	461a      	mov	r2, r3
    9634:	f850 3b04 	ldr.w	r3, [r0], #4
    9638:	9007      	str	r0, [sp, #28]
    963a:	b29b      	uxth	r3, r3
    963c:	e7a1      	b.n	9582 <_vfiprintf_r+0xbea>
    963e:	f416 7200 	ands.w	r2, r6, #512	; 0x200
    9642:	f040 80e1 	bne.w	9808 <_vfiprintf_r+0xe70>
    9646:	f850 3b04 	ldr.w	r3, [r0], #4
    964a:	9007      	str	r0, [sp, #28]
    964c:	e799      	b.n	9582 <_vfiprintf_r+0xbea>
    964e:	bf00      	nop
    9650:	20000678 	.word	0x20000678
    9654:	20000634 	.word	0x20000634
    9658:	20000648 	.word	0x20000648
    965c:	9903      	ldr	r1, [sp, #12]
    965e:	9704      	str	r7, [sp, #16]
    9660:	ac44      	add	r4, sp, #272	; 0x110
    9662:	469e      	mov	lr, r3
    9664:	ee08 ba90 	vmov	s17, fp
    9668:	f401 6680 	and.w	r6, r1, #1024	; 0x400
    966c:	f04f 0c00 	mov.w	ip, #0
    9670:	4623      	mov	r3, r4
    9672:	e006      	b.n	9682 <_vfiprintf_r+0xcea>
    9674:	f1be 0f0a 	cmp.w	lr, #10
    9678:	f172 0200 	sbcs.w	r2, r2, #0
    967c:	d339      	bcc.n	96f2 <_vfiprintf_r+0xd5a>
    967e:	46a6      	mov	lr, r4
    9680:	462a      	mov	r2, r5
    9682:	49a6      	ldr	r1, [pc, #664]	; (991c <_vfiprintf_r+0xf84>)
    9684:	eb1e 0002 	adds.w	r0, lr, r2
    9688:	f140 0000 	adc.w	r0, r0, #0
    968c:	460f      	mov	r7, r1
    968e:	fba1 1400 	umull	r1, r4, r1, r0
    9692:	f024 0103 	bic.w	r1, r4, #3
    9696:	eb01 0194 	add.w	r1, r1, r4, lsr #2
    969a:	1a40      	subs	r0, r0, r1
    969c:	ebbe 0100 	subs.w	r1, lr, r0
    96a0:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
    96a4:	f162 0400 	sbc.w	r4, r2, #0
    96a8:	fb05 f501 	mul.w	r5, r5, r1
    96ac:	fb07 5504 	mla	r5, r7, r4, r5
    96b0:	fba1 4107 	umull	r4, r1, r1, r7
    96b4:	440d      	add	r5, r1
    96b6:	2705      	movs	r7, #5
    96b8:	f004 0101 	and.w	r1, r4, #1
    96bc:	fba1 1b07 	umull	r1, fp, r1, r7
    96c0:	1809      	adds	r1, r1, r0
    96c2:	0864      	lsrs	r4, r4, #1
    96c4:	3130      	adds	r1, #48	; 0x30
    96c6:	f803 1c01 	strb.w	r1, [r3, #-1]
    96ca:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
    96ce:	f10c 0c01 	add.w	ip, ip, #1
    96d2:	3b01      	subs	r3, #1
    96d4:	086d      	lsrs	r5, r5, #1
    96d6:	2e00      	cmp	r6, #0
    96d8:	d0cc      	beq.n	9674 <_vfiprintf_r+0xcdc>
    96da:	990b      	ldr	r1, [sp, #44]	; 0x2c
    96dc:	7809      	ldrb	r1, [r1, #0]
    96de:	4561      	cmp	r1, ip
    96e0:	d1c8      	bne.n	9674 <_vfiprintf_r+0xcdc>
    96e2:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    96e6:	d0c5      	beq.n	9674 <_vfiprintf_r+0xcdc>
    96e8:	f1be 0f0a 	cmp.w	lr, #10
    96ec:	f172 0200 	sbcs.w	r2, r2, #0
    96f0:	d26c      	bcs.n	97cc <_vfiprintf_r+0xe34>
    96f2:	461c      	mov	r4, r3
    96f4:	ab44      	add	r3, sp, #272	; 0x110
    96f6:	1b1b      	subs	r3, r3, r4
    96f8:	9f04      	ldr	r7, [sp, #16]
    96fa:	9e03      	ldr	r6, [sp, #12]
    96fc:	9304      	str	r3, [sp, #16]
    96fe:	ee18 ba90 	vmov	fp, s17
    9702:	f7ff ba72 	b.w	8bea <_vfiprintf_r+0x252>
    9706:	9603      	str	r6, [sp, #12]
    9708:	f7ff ba62 	b.w	8bd0 <_vfiprintf_r+0x238>
    970c:	4658      	mov	r0, fp
    970e:	f7fa fe91 	bl	4434 <__sinit>
    9712:	f7ff b95b 	b.w	89cc <_vfiprintf_r+0x34>
    9716:	2901      	cmp	r1, #1
    9718:	9603      	str	r6, [sp, #12]
    971a:	f47f accd 	bne.w	90b8 <_vfiprintf_r+0x720>
    971e:	f7ff ba5c 	b.w	8bda <_vfiprintf_r+0x242>
    9722:	9b07      	ldr	r3, [sp, #28]
    9724:	9905      	ldr	r1, [sp, #20]
    9726:	f853 2b04 	ldr.w	r2, [r3], #4
    972a:	6011      	str	r1, [r2, #0]
    972c:	9307      	str	r3, [sp, #28]
    972e:	f7ff b97e 	b.w	8a2e <_vfiprintf_r+0x96>
    9732:	2f06      	cmp	r7, #6
    9734:	463b      	mov	r3, r7
    9736:	9a03      	ldr	r2, [sp, #12]
    9738:	4c79      	ldr	r4, [pc, #484]	; (9920 <_vfiprintf_r+0xf88>)
    973a:	9207      	str	r2, [sp, #28]
    973c:	bf28      	it	cs
    973e:	2306      	movcs	r3, #6
    9740:	9304      	str	r3, [sp, #16]
    9742:	9303      	str	r3, [sp, #12]
    9744:	f7ff bb25 	b.w	8d92 <_vfiprintf_r+0x3fa>
    9748:	9b03      	ldr	r3, [sp, #12]
    974a:	9907      	ldr	r1, [sp, #28]
    974c:	f413 7200 	ands.w	r2, r3, #512	; 0x200
    9750:	bf14      	ite	ne
    9752:	f851 3b04 	ldrne.w	r3, [r1], #4
    9756:	f851 3b04 	ldreq.w	r3, [r1], #4
    975a:	9107      	str	r1, [sp, #28]
    975c:	bf1c      	itt	ne
    975e:	4602      	movne	r2, r0
    9760:	b2db      	uxtbne	r3, r3
    9762:	2101      	movs	r1, #1
    9764:	f7ff ba8f 	b.w	8c86 <_vfiprintf_r+0x2ee>
    9768:	ab16      	add	r3, sp, #88	; 0x58
    976a:	9300      	str	r3, [sp, #0]
    976c:	2300      	movs	r3, #0
    976e:	4619      	mov	r1, r3
    9770:	aa13      	add	r2, sp, #76	; 0x4c
    9772:	4658      	mov	r0, fp
    9774:	f7ff f834 	bl	87e0 <_wcsrtombs_r>
    9778:	4603      	mov	r3, r0
    977a:	3301      	adds	r3, #1
    977c:	9004      	str	r0, [sp, #16]
    977e:	f000 80ae 	beq.w	98de <_vfiprintf_r+0xf46>
    9782:	9413      	str	r4, [sp, #76]	; 0x4c
    9784:	9b04      	ldr	r3, [sp, #16]
    9786:	2b00      	cmp	r3, #0
    9788:	d030      	beq.n	97ec <_vfiprintf_r+0xe54>
    978a:	2b63      	cmp	r3, #99	; 0x63
    978c:	dc63      	bgt.n	9856 <_vfiprintf_r+0xebe>
    978e:	2300      	movs	r3, #0
    9790:	9308      	str	r3, [sp, #32]
    9792:	ac2b      	add	r4, sp, #172	; 0xac
    9794:	2208      	movs	r2, #8
    9796:	2100      	movs	r1, #0
    9798:	a816      	add	r0, sp, #88	; 0x58
    979a:	f7fb f805 	bl	47a8 <memset>
    979e:	9d04      	ldr	r5, [sp, #16]
    97a0:	ab16      	add	r3, sp, #88	; 0x58
    97a2:	9300      	str	r3, [sp, #0]
    97a4:	aa13      	add	r2, sp, #76	; 0x4c
    97a6:	462b      	mov	r3, r5
    97a8:	4621      	mov	r1, r4
    97aa:	4658      	mov	r0, fp
    97ac:	f7ff f818 	bl	87e0 <_wcsrtombs_r>
    97b0:	4285      	cmp	r5, r0
    97b2:	f040 80ab 	bne.w	990c <_vfiprintf_r+0xf74>
    97b6:	9b03      	ldr	r3, [sp, #12]
    97b8:	9a04      	ldr	r2, [sp, #16]
    97ba:	9307      	str	r3, [sp, #28]
    97bc:	2300      	movs	r3, #0
    97be:	54a3      	strb	r3, [r4, r2]
    97c0:	461f      	mov	r7, r3
    97c2:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    97c6:	9303      	str	r3, [sp, #12]
    97c8:	f7ff ba16 	b.w	8bf8 <_vfiprintf_r+0x260>
    97cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    97ce:	990d      	ldr	r1, [sp, #52]	; 0x34
    97d0:	1a9b      	subs	r3, r3, r2
    97d2:	4618      	mov	r0, r3
    97d4:	9308      	str	r3, [sp, #32]
    97d6:	f7fb f87f 	bl	48d8 <strncpy>
    97da:	990b      	ldr	r1, [sp, #44]	; 0x2c
    97dc:	9b08      	ldr	r3, [sp, #32]
    97de:	784a      	ldrb	r2, [r1, #1]
    97e0:	b10a      	cbz	r2, 97e6 <_vfiprintf_r+0xe4e>
    97e2:	3101      	adds	r1, #1
    97e4:	910b      	str	r1, [sp, #44]	; 0x2c
    97e6:	f04f 0c00 	mov.w	ip, #0
    97ea:	e748      	b.n	967e <_vfiprintf_r+0xce6>
    97ec:	9b03      	ldr	r3, [sp, #12]
    97ee:	9307      	str	r3, [sp, #28]
    97f0:	9b04      	ldr	r3, [sp, #16]
    97f2:	9303      	str	r3, [sp, #12]
    97f4:	461f      	mov	r7, r3
    97f6:	9308      	str	r3, [sp, #32]
    97f8:	f7ff b9fe 	b.w	8bf8 <_vfiprintf_r+0x260>
    97fc:	2101      	movs	r1, #1
    97fe:	4618      	mov	r0, r3
    9800:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    9804:	f7ff bb13 	b.w	8e2e <_vfiprintf_r+0x496>
    9808:	f850 3b04 	ldr.w	r3, [r0], #4
    980c:	9007      	str	r0, [sp, #28]
    980e:	4622      	mov	r2, r4
    9810:	b2db      	uxtb	r3, r3
    9812:	e6b6      	b.n	9582 <_vfiprintf_r+0xbea>
    9814:	f912 3b04 	ldrsb.w	r3, [r2], #4
    9818:	9207      	str	r2, [sp, #28]
    981a:	17da      	asrs	r2, r3, #31
    981c:	4611      	mov	r1, r2
    981e:	f7ff b9ca 	b.w	8bb6 <_vfiprintf_r+0x21e>
    9822:	f851 3b04 	ldr.w	r3, [r1], #4
    9826:	9107      	str	r1, [sp, #28]
    9828:	4602      	mov	r2, r0
    982a:	b2db      	uxtb	r3, r3
    982c:	f7ff ba27 	b.w	8c7e <_vfiprintf_r+0x2e6>
    9830:	2301      	movs	r3, #1
    9832:	931c      	str	r3, [sp, #112]	; 0x70
    9834:	2101      	movs	r1, #1
    9836:	f10d 0343 	add.w	r3, sp, #67	; 0x43
    983a:	931b      	str	r3, [sp, #108]	; 0x6c
    983c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    9840:	460b      	mov	r3, r1
    9842:	f7ff bacd 	b.w	8de0 <_vfiprintf_r+0x448>
    9846:	9b07      	ldr	r3, [sp, #28]
    9848:	9905      	ldr	r1, [sp, #20]
    984a:	f853 2b04 	ldr.w	r2, [r3], #4
    984e:	9307      	str	r3, [sp, #28]
    9850:	8011      	strh	r1, [r2, #0]
    9852:	f7ff b8ec 	b.w	8a2e <_vfiprintf_r+0x96>
    9856:	1c59      	adds	r1, r3, #1
    9858:	4658      	mov	r0, fp
    985a:	f7fa f889 	bl	3970 <_malloc_r>
    985e:	4604      	mov	r4, r0
    9860:	2800      	cmp	r0, #0
    9862:	d03c      	beq.n	98de <_vfiprintf_r+0xf46>
    9864:	9008      	str	r0, [sp, #32]
    9866:	e795      	b.n	9794 <_vfiprintf_r+0xdfc>
    9868:	6d88      	ldr	r0, [r1, #88]	; 0x58
    986a:	f7fb f903 	bl	4a74 <__retarget_lock_release_recursive>
    986e:	f7ff b9e9 	b.w	8c44 <_vfiprintf_r+0x2ac>
    9872:	9b03      	ldr	r3, [sp, #12]
    9874:	9307      	str	r3, [sp, #28]
    9876:	e9cd 7703 	strd	r7, r7, [sp, #12]
    987a:	9f08      	ldr	r7, [sp, #32]
    987c:	f7ff b9bc 	b.w	8bf8 <_vfiprintf_r+0x260>
    9880:	9819      	ldr	r0, [sp, #100]	; 0x64
    9882:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    9884:	3001      	adds	r0, #1
    9886:	e545      	b.n	9314 <_vfiprintf_r+0x97c>
    9888:	9b03      	ldr	r3, [sp, #12]
    988a:	9307      	str	r3, [sp, #28]
    988c:	4620      	mov	r0, r4
    988e:	f7fb fad7 	bl	4e40 <strlen>
    9892:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
    9896:	462f      	mov	r7, r5
    9898:	9004      	str	r0, [sp, #16]
    989a:	9303      	str	r3, [sp, #12]
    989c:	9508      	str	r5, [sp, #32]
    989e:	f7ff b9ab 	b.w	8bf8 <_vfiprintf_r+0x260>
    98a2:	ee18 1a10 	vmov	r1, s16
    98a6:	aa18      	add	r2, sp, #96	; 0x60
    98a8:	4658      	mov	r0, fp
    98aa:	f7ff f839 	bl	8920 <__sprint_r.part.0>
    98ae:	2800      	cmp	r0, #0
    98b0:	f43f aa36 	beq.w	8d20 <_vfiprintf_r+0x388>
    98b4:	f7ff ba4d 	b.w	8d52 <_vfiprintf_r+0x3ba>
    98b8:	9819      	ldr	r0, [sp, #100]	; 0x64
    98ba:	3001      	adds	r0, #1
    98bc:	e57a      	b.n	93b4 <_vfiprintf_r+0xa1c>
    98be:	468c      	mov	ip, r1
    98c0:	e46e      	b.n	91a0 <_vfiprintf_r+0x808>
    98c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    98c4:	07d9      	lsls	r1, r3, #31
    98c6:	d405      	bmi.n	98d4 <_vfiprintf_r+0xf3c>
    98c8:	89ab      	ldrh	r3, [r5, #12]
    98ca:	059a      	lsls	r2, r3, #22
    98cc:	d402      	bmi.n	98d4 <_vfiprintf_r+0xf3c>
    98ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
    98d0:	f7fb f8d0 	bl	4a74 <__retarget_lock_release_recursive>
    98d4:	f04f 33ff 	mov.w	r3, #4294967295
    98d8:	9305      	str	r3, [sp, #20]
    98da:	f7ff ba49 	b.w	8d70 <_vfiprintf_r+0x3d8>
    98de:	ee18 2a10 	vmov	r2, s16
    98e2:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    98e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    98ea:	8193      	strh	r3, [r2, #12]
    98ec:	f7ff ba35 	b.w	8d5a <_vfiprintf_r+0x3c2>
    98f0:	9c07      	ldr	r4, [sp, #28]
    98f2:	9704      	str	r7, [sp, #16]
    98f4:	e746      	b.n	9784 <_vfiprintf_r+0xdec>
    98f6:	9b07      	ldr	r3, [sp, #28]
    98f8:	f898 1001 	ldrb.w	r1, [r8, #1]
    98fc:	f853 7b04 	ldr.w	r7, [r3], #4
    9900:	9307      	str	r3, [sp, #28]
    9902:	4690      	mov	r8, r2
    9904:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
    9908:	f7ff b8b9 	b.w	8a7e <_vfiprintf_r+0xe6>
    990c:	ee18 2a10 	vmov	r2, s16
    9910:	8993      	ldrh	r3, [r2, #12]
    9912:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9916:	8193      	strh	r3, [r2, #12]
    9918:	f7ff ba15 	b.w	8d46 <_vfiprintf_r+0x3ae>
    991c:	cccccccd 	.word	0xcccccccd
    9920:	2000065c 	.word	0x2000065c

00009924 <__sbprintf>:
    9924:	b570      	push	{r4, r5, r6, lr}
    9926:	460c      	mov	r4, r1
    9928:	8989      	ldrh	r1, [r1, #12]
    992a:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
    992e:	f021 0102 	bic.w	r1, r1, #2
    9932:	f8ad 1014 	strh.w	r1, [sp, #20]
    9936:	6e61      	ldr	r1, [r4, #100]	; 0x64
    9938:	911b      	str	r1, [sp, #108]	; 0x6c
    993a:	89e1      	ldrh	r1, [r4, #14]
    993c:	f8ad 1016 	strh.w	r1, [sp, #22]
    9940:	69e1      	ldr	r1, [r4, #28]
    9942:	9109      	str	r1, [sp, #36]	; 0x24
    9944:	6a61      	ldr	r1, [r4, #36]	; 0x24
    9946:	910b      	str	r1, [sp, #44]	; 0x2c
    9948:	a91c      	add	r1, sp, #112	; 0x70
    994a:	9102      	str	r1, [sp, #8]
    994c:	9106      	str	r1, [sp, #24]
    994e:	f44f 6180 	mov.w	r1, #1024	; 0x400
    9952:	4606      	mov	r6, r0
    9954:	9104      	str	r1, [sp, #16]
    9956:	9107      	str	r1, [sp, #28]
    9958:	a818      	add	r0, sp, #96	; 0x60
    995a:	2100      	movs	r1, #0
    995c:	e9cd 3200 	strd	r3, r2, [sp]
    9960:	9108      	str	r1, [sp, #32]
    9962:	f7fb f881 	bl	4a68 <__retarget_lock_init_recursive>
    9966:	e9dd 3200 	ldrd	r3, r2, [sp]
    996a:	a902      	add	r1, sp, #8
    996c:	4630      	mov	r0, r6
    996e:	f7ff f813 	bl	8998 <_vfiprintf_r>
    9972:	1e05      	subs	r5, r0, #0
    9974:	db07      	blt.n	9986 <__sbprintf+0x62>
    9976:	a902      	add	r1, sp, #8
    9978:	4630      	mov	r0, r6
    997a:	f7fd fee7 	bl	774c <_fflush_r>
    997e:	2800      	cmp	r0, #0
    9980:	bf18      	it	ne
    9982:	f04f 35ff 	movne.w	r5, #4294967295
    9986:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    998a:	065b      	lsls	r3, r3, #25
    998c:	d503      	bpl.n	9996 <__sbprintf+0x72>
    998e:	89a3      	ldrh	r3, [r4, #12]
    9990:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9994:	81a3      	strh	r3, [r4, #12]
    9996:	9818      	ldr	r0, [sp, #96]	; 0x60
    9998:	f7fb f868 	bl	4a6c <__retarget_lock_close_recursive>
    999c:	4628      	mov	r0, r5
    999e:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
    99a2:	bd70      	pop	{r4, r5, r6, pc}

000099a4 <__sfvwrite_r>:
    99a4:	6893      	ldr	r3, [r2, #8]
    99a6:	2b00      	cmp	r3, #0
    99a8:	f000 8085 	beq.w	9ab6 <__sfvwrite_r+0x112>
    99ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    99b0:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
    99b4:	460c      	mov	r4, r1
    99b6:	0719      	lsls	r1, r3, #28
    99b8:	4680      	mov	r8, r0
    99ba:	b083      	sub	sp, #12
    99bc:	4617      	mov	r7, r2
    99be:	b298      	uxth	r0, r3
    99c0:	d525      	bpl.n	9a0e <__sfvwrite_r+0x6a>
    99c2:	6923      	ldr	r3, [r4, #16]
    99c4:	b31b      	cbz	r3, 9a0e <__sfvwrite_r+0x6a>
    99c6:	f010 0302 	ands.w	r3, r0, #2
    99ca:	683d      	ldr	r5, [r7, #0]
    99cc:	d02d      	beq.n	9a2a <__sfvwrite_r+0x86>
    99ce:	f04f 0a00 	mov.w	sl, #0
    99d2:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 9c94 <__sfvwrite_r+0x2f0>
    99d6:	4656      	mov	r6, sl
    99d8:	46b9      	mov	r9, r7
    99da:	455e      	cmp	r6, fp
    99dc:	4633      	mov	r3, r6
    99de:	4652      	mov	r2, sl
    99e0:	bf28      	it	cs
    99e2:	465b      	movcs	r3, fp
    99e4:	4640      	mov	r0, r8
    99e6:	2e00      	cmp	r6, #0
    99e8:	d052      	beq.n	9a90 <__sfvwrite_r+0xec>
    99ea:	69e1      	ldr	r1, [r4, #28]
    99ec:	6a67      	ldr	r7, [r4, #36]	; 0x24
    99ee:	47b8      	blx	r7
    99f0:	2800      	cmp	r0, #0
    99f2:	dd56      	ble.n	9aa2 <__sfvwrite_r+0xfe>
    99f4:	f8d9 3008 	ldr.w	r3, [r9, #8]
    99f8:	1a1b      	subs	r3, r3, r0
    99fa:	4482      	add	sl, r0
    99fc:	1a36      	subs	r6, r6, r0
    99fe:	f8c9 3008 	str.w	r3, [r9, #8]
    9a02:	2b00      	cmp	r3, #0
    9a04:	d1e9      	bne.n	99da <__sfvwrite_r+0x36>
    9a06:	2000      	movs	r0, #0
    9a08:	b003      	add	sp, #12
    9a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9a0e:	4621      	mov	r1, r4
    9a10:	4640      	mov	r0, r8
    9a12:	f000 f941 	bl	9c98 <__swsetup_r>
    9a16:	2800      	cmp	r0, #0
    9a18:	f040 8138 	bne.w	9c8c <__sfvwrite_r+0x2e8>
    9a1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    9a20:	683d      	ldr	r5, [r7, #0]
    9a22:	b298      	uxth	r0, r3
    9a24:	f010 0302 	ands.w	r3, r0, #2
    9a28:	d1d1      	bne.n	99ce <__sfvwrite_r+0x2a>
    9a2a:	f010 0901 	ands.w	r9, r0, #1
    9a2e:	d144      	bne.n	9aba <__sfvwrite_r+0x116>
    9a30:	464e      	mov	r6, r9
    9a32:	9700      	str	r7, [sp, #0]
    9a34:	b346      	cbz	r6, 9a88 <__sfvwrite_r+0xe4>
    9a36:	0582      	lsls	r2, r0, #22
    9a38:	f8d4 b008 	ldr.w	fp, [r4, #8]
    9a3c:	f140 8085 	bpl.w	9b4a <__sfvwrite_r+0x1a6>
    9a40:	45b3      	cmp	fp, r6
    9a42:	465a      	mov	r2, fp
    9a44:	f200 80b4 	bhi.w	9bb0 <__sfvwrite_r+0x20c>
    9a48:	f410 6f90 	tst.w	r0, #1152	; 0x480
    9a4c:	f040 80c1 	bne.w	9bd2 <__sfvwrite_r+0x22e>
    9a50:	6820      	ldr	r0, [r4, #0]
    9a52:	9201      	str	r2, [sp, #4]
    9a54:	4649      	mov	r1, r9
    9a56:	f7fa fe2b 	bl	46b0 <memmove>
    9a5a:	68a3      	ldr	r3, [r4, #8]
    9a5c:	9a01      	ldr	r2, [sp, #4]
    9a5e:	eba3 010b 	sub.w	r1, r3, fp
    9a62:	6823      	ldr	r3, [r4, #0]
    9a64:	60a1      	str	r1, [r4, #8]
    9a66:	4413      	add	r3, r2
    9a68:	46b2      	mov	sl, r6
    9a6a:	6023      	str	r3, [r4, #0]
    9a6c:	2600      	movs	r6, #0
    9a6e:	9a00      	ldr	r2, [sp, #0]
    9a70:	6893      	ldr	r3, [r2, #8]
    9a72:	eba3 030a 	sub.w	r3, r3, sl
    9a76:	44d1      	add	r9, sl
    9a78:	6093      	str	r3, [r2, #8]
    9a7a:	2b00      	cmp	r3, #0
    9a7c:	d0c3      	beq.n	9a06 <__sfvwrite_r+0x62>
    9a7e:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
    9a82:	b280      	uxth	r0, r0
    9a84:	2e00      	cmp	r6, #0
    9a86:	d1d6      	bne.n	9a36 <__sfvwrite_r+0x92>
    9a88:	e9d5 9600 	ldrd	r9, r6, [r5]
    9a8c:	3508      	adds	r5, #8
    9a8e:	e7d1      	b.n	9a34 <__sfvwrite_r+0x90>
    9a90:	e9d5 a600 	ldrd	sl, r6, [r5]
    9a94:	3508      	adds	r5, #8
    9a96:	e7a0      	b.n	99da <__sfvwrite_r+0x36>
    9a98:	4621      	mov	r1, r4
    9a9a:	4640      	mov	r0, r8
    9a9c:	f7fd fe56 	bl	774c <_fflush_r>
    9aa0:	b388      	cbz	r0, 9b06 <__sfvwrite_r+0x162>
    9aa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    9aa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9aaa:	f04f 30ff 	mov.w	r0, #4294967295
    9aae:	81a3      	strh	r3, [r4, #12]
    9ab0:	b003      	add	sp, #12
    9ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9ab6:	2000      	movs	r0, #0
    9ab8:	4770      	bx	lr
    9aba:	461e      	mov	r6, r3
    9abc:	46ba      	mov	sl, r7
    9abe:	4699      	mov	r9, r3
    9ac0:	4618      	mov	r0, r3
    9ac2:	9500      	str	r5, [sp, #0]
    9ac4:	461f      	mov	r7, r3
    9ac6:	b366      	cbz	r6, 9b22 <__sfvwrite_r+0x17e>
    9ac8:	2800      	cmp	r0, #0
    9aca:	d032      	beq.n	9b32 <__sfvwrite_r+0x18e>
    9acc:	464a      	mov	r2, r9
    9ace:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
    9ad2:	6820      	ldr	r0, [r4, #0]
    9ad4:	68a5      	ldr	r5, [r4, #8]
    9ad6:	42b2      	cmp	r2, r6
    9ad8:	bf28      	it	cs
    9ada:	4632      	movcs	r2, r6
    9adc:	4288      	cmp	r0, r1
    9ade:	d904      	bls.n	9aea <__sfvwrite_r+0x146>
    9ae0:	eb05 0b03 	add.w	fp, r5, r3
    9ae4:	455a      	cmp	r2, fp
    9ae6:	f300 80a7 	bgt.w	9c38 <__sfvwrite_r+0x294>
    9aea:	4293      	cmp	r3, r2
    9aec:	dc64      	bgt.n	9bb8 <__sfvwrite_r+0x214>
    9aee:	69e1      	ldr	r1, [r4, #28]
    9af0:	6a65      	ldr	r5, [r4, #36]	; 0x24
    9af2:	463a      	mov	r2, r7
    9af4:	4640      	mov	r0, r8
    9af6:	47a8      	blx	r5
    9af8:	f1b0 0b00 	subs.w	fp, r0, #0
    9afc:	ddd1      	ble.n	9aa2 <__sfvwrite_r+0xfe>
    9afe:	ebb9 090b 	subs.w	r9, r9, fp
    9b02:	d0c9      	beq.n	9a98 <__sfvwrite_r+0xf4>
    9b04:	2001      	movs	r0, #1
    9b06:	f8da 3008 	ldr.w	r3, [sl, #8]
    9b0a:	eba3 030b 	sub.w	r3, r3, fp
    9b0e:	445f      	add	r7, fp
    9b10:	eba6 060b 	sub.w	r6, r6, fp
    9b14:	f8ca 3008 	str.w	r3, [sl, #8]
    9b18:	2b00      	cmp	r3, #0
    9b1a:	f43f af74 	beq.w	9a06 <__sfvwrite_r+0x62>
    9b1e:	2e00      	cmp	r6, #0
    9b20:	d1d2      	bne.n	9ac8 <__sfvwrite_r+0x124>
    9b22:	9a00      	ldr	r2, [sp, #0]
    9b24:	6856      	ldr	r6, [r2, #4]
    9b26:	4613      	mov	r3, r2
    9b28:	3208      	adds	r2, #8
    9b2a:	9200      	str	r2, [sp, #0]
    9b2c:	2e00      	cmp	r6, #0
    9b2e:	d0f8      	beq.n	9b22 <__sfvwrite_r+0x17e>
    9b30:	681f      	ldr	r7, [r3, #0]
    9b32:	4632      	mov	r2, r6
    9b34:	210a      	movs	r1, #10
    9b36:	4638      	mov	r0, r7
    9b38:	f7fd fe3a 	bl	77b0 <memchr>
    9b3c:	2800      	cmp	r0, #0
    9b3e:	f000 809c 	beq.w	9c7a <__sfvwrite_r+0x2d6>
    9b42:	3001      	adds	r0, #1
    9b44:	eba0 0907 	sub.w	r9, r0, r7
    9b48:	e7c0      	b.n	9acc <__sfvwrite_r+0x128>
    9b4a:	6820      	ldr	r0, [r4, #0]
    9b4c:	6923      	ldr	r3, [r4, #16]
    9b4e:	4298      	cmp	r0, r3
    9b50:	d816      	bhi.n	9b80 <__sfvwrite_r+0x1dc>
    9b52:	6962      	ldr	r2, [r4, #20]
    9b54:	42b2      	cmp	r2, r6
    9b56:	d813      	bhi.n	9b80 <__sfvwrite_r+0x1dc>
    9b58:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    9b5c:	42b3      	cmp	r3, r6
    9b5e:	bf28      	it	cs
    9b60:	4633      	movcs	r3, r6
    9b62:	69e1      	ldr	r1, [r4, #28]
    9b64:	fb93 f3f2 	sdiv	r3, r3, r2
    9b68:	6a67      	ldr	r7, [r4, #36]	; 0x24
    9b6a:	fb02 f303 	mul.w	r3, r2, r3
    9b6e:	4640      	mov	r0, r8
    9b70:	464a      	mov	r2, r9
    9b72:	47b8      	blx	r7
    9b74:	f1b0 0a00 	subs.w	sl, r0, #0
    9b78:	dd93      	ble.n	9aa2 <__sfvwrite_r+0xfe>
    9b7a:	eba6 060a 	sub.w	r6, r6, sl
    9b7e:	e776      	b.n	9a6e <__sfvwrite_r+0xca>
    9b80:	45b3      	cmp	fp, r6
    9b82:	46da      	mov	sl, fp
    9b84:	bf28      	it	cs
    9b86:	46b2      	movcs	sl, r6
    9b88:	4652      	mov	r2, sl
    9b8a:	4649      	mov	r1, r9
    9b8c:	f7fa fd90 	bl	46b0 <memmove>
    9b90:	68a3      	ldr	r3, [r4, #8]
    9b92:	6822      	ldr	r2, [r4, #0]
    9b94:	eba3 030a 	sub.w	r3, r3, sl
    9b98:	4452      	add	r2, sl
    9b9a:	60a3      	str	r3, [r4, #8]
    9b9c:	6022      	str	r2, [r4, #0]
    9b9e:	2b00      	cmp	r3, #0
    9ba0:	d1eb      	bne.n	9b7a <__sfvwrite_r+0x1d6>
    9ba2:	4621      	mov	r1, r4
    9ba4:	4640      	mov	r0, r8
    9ba6:	f7fd fdd1 	bl	774c <_fflush_r>
    9baa:	2800      	cmp	r0, #0
    9bac:	d0e5      	beq.n	9b7a <__sfvwrite_r+0x1d6>
    9bae:	e778      	b.n	9aa2 <__sfvwrite_r+0xfe>
    9bb0:	6820      	ldr	r0, [r4, #0]
    9bb2:	46b3      	mov	fp, r6
    9bb4:	4632      	mov	r2, r6
    9bb6:	e74c      	b.n	9a52 <__sfvwrite_r+0xae>
    9bb8:	4639      	mov	r1, r7
    9bba:	9201      	str	r2, [sp, #4]
    9bbc:	f7fa fd78 	bl	46b0 <memmove>
    9bc0:	9a01      	ldr	r2, [sp, #4]
    9bc2:	68a3      	ldr	r3, [r4, #8]
    9bc4:	1a9b      	subs	r3, r3, r2
    9bc6:	60a3      	str	r3, [r4, #8]
    9bc8:	6823      	ldr	r3, [r4, #0]
    9bca:	4413      	add	r3, r2
    9bcc:	6023      	str	r3, [r4, #0]
    9bce:	4693      	mov	fp, r2
    9bd0:	e795      	b.n	9afe <__sfvwrite_r+0x15a>
    9bd2:	6823      	ldr	r3, [r4, #0]
    9bd4:	6921      	ldr	r1, [r4, #16]
    9bd6:	eba3 0b01 	sub.w	fp, r3, r1
    9bda:	6963      	ldr	r3, [r4, #20]
    9bdc:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
    9be0:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
    9be4:	f10b 0301 	add.w	r3, fp, #1
    9be8:	ea4f 0a6a 	mov.w	sl, sl, asr #1
    9bec:	4433      	add	r3, r6
    9bee:	4553      	cmp	r3, sl
    9bf0:	4652      	mov	r2, sl
    9bf2:	bf84      	itt	hi
    9bf4:	469a      	movhi	sl, r3
    9bf6:	4652      	movhi	r2, sl
    9bf8:	0543      	lsls	r3, r0, #21
    9bfa:	d52c      	bpl.n	9c56 <__sfvwrite_r+0x2b2>
    9bfc:	4611      	mov	r1, r2
    9bfe:	4640      	mov	r0, r8
    9c00:	f7f9 feb6 	bl	3970 <_malloc_r>
    9c04:	2800      	cmp	r0, #0
    9c06:	d03b      	beq.n	9c80 <__sfvwrite_r+0x2dc>
    9c08:	465a      	mov	r2, fp
    9c0a:	6921      	ldr	r1, [r4, #16]
    9c0c:	9001      	str	r0, [sp, #4]
    9c0e:	f7f8 f8fd 	bl	1e0c <memcpy>
    9c12:	89a2      	ldrh	r2, [r4, #12]
    9c14:	9b01      	ldr	r3, [sp, #4]
    9c16:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
    9c1a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    9c1e:	81a2      	strh	r2, [r4, #12]
    9c20:	eb03 000b 	add.w	r0, r3, fp
    9c24:	6123      	str	r3, [r4, #16]
    9c26:	ebaa 030b 	sub.w	r3, sl, fp
    9c2a:	f8c4 a014 	str.w	sl, [r4, #20]
    9c2e:	60a3      	str	r3, [r4, #8]
    9c30:	6020      	str	r0, [r4, #0]
    9c32:	46b3      	mov	fp, r6
    9c34:	4632      	mov	r2, r6
    9c36:	e70c      	b.n	9a52 <__sfvwrite_r+0xae>
    9c38:	4639      	mov	r1, r7
    9c3a:	465a      	mov	r2, fp
    9c3c:	f7fa fd38 	bl	46b0 <memmove>
    9c40:	6823      	ldr	r3, [r4, #0]
    9c42:	445b      	add	r3, fp
    9c44:	6023      	str	r3, [r4, #0]
    9c46:	4621      	mov	r1, r4
    9c48:	4640      	mov	r0, r8
    9c4a:	f7fd fd7f 	bl	774c <_fflush_r>
    9c4e:	2800      	cmp	r0, #0
    9c50:	f43f af55 	beq.w	9afe <__sfvwrite_r+0x15a>
    9c54:	e725      	b.n	9aa2 <__sfvwrite_r+0xfe>
    9c56:	4640      	mov	r0, r8
    9c58:	f7fa f952 	bl	3f00 <_realloc_r>
    9c5c:	4603      	mov	r3, r0
    9c5e:	2800      	cmp	r0, #0
    9c60:	d1de      	bne.n	9c20 <__sfvwrite_r+0x27c>
    9c62:	6921      	ldr	r1, [r4, #16]
    9c64:	4640      	mov	r0, r8
    9c66:	f7fb f9ed 	bl	5044 <_free_r>
    9c6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    9c6e:	220c      	movs	r2, #12
    9c70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    9c74:	f8c8 2000 	str.w	r2, [r8]
    9c78:	e715      	b.n	9aa6 <__sfvwrite_r+0x102>
    9c7a:	1c72      	adds	r2, r6, #1
    9c7c:	4691      	mov	r9, r2
    9c7e:	e726      	b.n	9ace <__sfvwrite_r+0x12a>
    9c80:	220c      	movs	r2, #12
    9c82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    9c86:	f8c8 2000 	str.w	r2, [r8]
    9c8a:	e70c      	b.n	9aa6 <__sfvwrite_r+0x102>
    9c8c:	f04f 30ff 	mov.w	r0, #4294967295
    9c90:	e6ba      	b.n	9a08 <__sfvwrite_r+0x64>
    9c92:	bf00      	nop
    9c94:	7ffffc00 	.word	0x7ffffc00

00009c98 <__swsetup_r>:
    9c98:	b538      	push	{r3, r4, r5, lr}
    9c9a:	4b31      	ldr	r3, [pc, #196]	; (9d60 <__swsetup_r+0xc8>)
    9c9c:	681b      	ldr	r3, [r3, #0]
    9c9e:	4605      	mov	r5, r0
    9ca0:	460c      	mov	r4, r1
    9ca2:	b113      	cbz	r3, 9caa <__swsetup_r+0x12>
    9ca4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    9ca6:	2a00      	cmp	r2, #0
    9ca8:	d04e      	beq.n	9d48 <__swsetup_r+0xb0>
    9caa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    9cae:	0718      	lsls	r0, r3, #28
    9cb0:	b29a      	uxth	r2, r3
    9cb2:	d51c      	bpl.n	9cee <__swsetup_r+0x56>
    9cb4:	6921      	ldr	r1, [r4, #16]
    9cb6:	b329      	cbz	r1, 9d04 <__swsetup_r+0x6c>
    9cb8:	f012 0001 	ands.w	r0, r2, #1
    9cbc:	d007      	beq.n	9cce <__swsetup_r+0x36>
    9cbe:	2000      	movs	r0, #0
    9cc0:	60a0      	str	r0, [r4, #8]
    9cc2:	6960      	ldr	r0, [r4, #20]
    9cc4:	4240      	negs	r0, r0
    9cc6:	61a0      	str	r0, [r4, #24]
    9cc8:	b139      	cbz	r1, 9cda <__swsetup_r+0x42>
    9cca:	2000      	movs	r0, #0
    9ccc:	bd38      	pop	{r3, r4, r5, pc}
    9cce:	0795      	lsls	r5, r2, #30
    9cd0:	bf58      	it	pl
    9cd2:	6960      	ldrpl	r0, [r4, #20]
    9cd4:	60a0      	str	r0, [r4, #8]
    9cd6:	2900      	cmp	r1, #0
    9cd8:	d1f7      	bne.n	9cca <__swsetup_r+0x32>
    9cda:	0612      	lsls	r2, r2, #24
    9cdc:	bf58      	it	pl
    9cde:	4608      	movpl	r0, r1
    9ce0:	d5f4      	bpl.n	9ccc <__swsetup_r+0x34>
    9ce2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9ce6:	81a3      	strh	r3, [r4, #12]
    9ce8:	f04f 30ff 	mov.w	r0, #4294967295
    9cec:	bd38      	pop	{r3, r4, r5, pc}
    9cee:	06d1      	lsls	r1, r2, #27
    9cf0:	d52e      	bpl.n	9d50 <__swsetup_r+0xb8>
    9cf2:	0752      	lsls	r2, r2, #29
    9cf4:	d414      	bmi.n	9d20 <__swsetup_r+0x88>
    9cf6:	6921      	ldr	r1, [r4, #16]
    9cf8:	f043 0308 	orr.w	r3, r3, #8
    9cfc:	81a3      	strh	r3, [r4, #12]
    9cfe:	b29a      	uxth	r2, r3
    9d00:	2900      	cmp	r1, #0
    9d02:	d1d9      	bne.n	9cb8 <__swsetup_r+0x20>
    9d04:	f402 7020 	and.w	r0, r2, #640	; 0x280
    9d08:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    9d0c:	d0d4      	beq.n	9cb8 <__swsetup_r+0x20>
    9d0e:	4621      	mov	r1, r4
    9d10:	4628      	mov	r0, r5
    9d12:	f000 f947 	bl	9fa4 <__smakebuf_r>
    9d16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    9d1a:	6921      	ldr	r1, [r4, #16]
    9d1c:	b29a      	uxth	r2, r3
    9d1e:	e7cb      	b.n	9cb8 <__swsetup_r+0x20>
    9d20:	6b21      	ldr	r1, [r4, #48]	; 0x30
    9d22:	b151      	cbz	r1, 9d3a <__swsetup_r+0xa2>
    9d24:	f104 0240 	add.w	r2, r4, #64	; 0x40
    9d28:	4291      	cmp	r1, r2
    9d2a:	d004      	beq.n	9d36 <__swsetup_r+0x9e>
    9d2c:	4628      	mov	r0, r5
    9d2e:	f7fb f989 	bl	5044 <_free_r>
    9d32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    9d36:	2200      	movs	r2, #0
    9d38:	6322      	str	r2, [r4, #48]	; 0x30
    9d3a:	6921      	ldr	r1, [r4, #16]
    9d3c:	2200      	movs	r2, #0
    9d3e:	e9c4 1200 	strd	r1, r2, [r4]
    9d42:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    9d46:	e7d7      	b.n	9cf8 <__swsetup_r+0x60>
    9d48:	4618      	mov	r0, r3
    9d4a:	f7fa fb73 	bl	4434 <__sinit>
    9d4e:	e7ac      	b.n	9caa <__swsetup_r+0x12>
    9d50:	2209      	movs	r2, #9
    9d52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9d56:	602a      	str	r2, [r5, #0]
    9d58:	f04f 30ff 	mov.w	r0, #4294967295
    9d5c:	81a3      	strh	r3, [r4, #12]
    9d5e:	bd38      	pop	{r3, r4, r5, pc}
    9d60:	20001610 	.word	0x20001610

00009d64 <__fputwc>:
    9d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9d68:	b082      	sub	sp, #8
    9d6a:	4682      	mov	sl, r0
    9d6c:	4688      	mov	r8, r1
    9d6e:	4614      	mov	r4, r2
    9d70:	f7fa fde4 	bl	493c <__locale_mb_cur_max>
    9d74:	2801      	cmp	r0, #1
    9d76:	d103      	bne.n	9d80 <__fputwc+0x1c>
    9d78:	f108 33ff 	add.w	r3, r8, #4294967295
    9d7c:	2bfe      	cmp	r3, #254	; 0xfe
    9d7e:	d936      	bls.n	9dee <__fputwc+0x8a>
    9d80:	f10d 0904 	add.w	r9, sp, #4
    9d84:	4642      	mov	r2, r8
    9d86:	f104 035c 	add.w	r3, r4, #92	; 0x5c
    9d8a:	4649      	mov	r1, r9
    9d8c:	4650      	mov	r0, sl
    9d8e:	f7fe fd01 	bl	8794 <_wcrtomb_r>
    9d92:	1c42      	adds	r2, r0, #1
    9d94:	4606      	mov	r6, r0
    9d96:	d032      	beq.n	9dfe <__fputwc+0x9a>
    9d98:	b320      	cbz	r0, 9de4 <__fputwc+0x80>
    9d9a:	f89d c004 	ldrb.w	ip, [sp, #4]
    9d9e:	2500      	movs	r5, #0
    9da0:	e009      	b.n	9db6 <__fputwc+0x52>
    9da2:	6823      	ldr	r3, [r4, #0]
    9da4:	1c5a      	adds	r2, r3, #1
    9da6:	6022      	str	r2, [r4, #0]
    9da8:	f883 c000 	strb.w	ip, [r3]
    9dac:	3501      	adds	r5, #1
    9dae:	42b5      	cmp	r5, r6
    9db0:	d218      	bcs.n	9de4 <__fputwc+0x80>
    9db2:	f819 cf01 	ldrb.w	ip, [r9, #1]!
    9db6:	68a3      	ldr	r3, [r4, #8]
    9db8:	3b01      	subs	r3, #1
    9dba:	2b00      	cmp	r3, #0
    9dbc:	60a3      	str	r3, [r4, #8]
    9dbe:	daf0      	bge.n	9da2 <__fputwc+0x3e>
    9dc0:	69a7      	ldr	r7, [r4, #24]
    9dc2:	42bb      	cmp	r3, r7
    9dc4:	4661      	mov	r1, ip
    9dc6:	4622      	mov	r2, r4
    9dc8:	4650      	mov	r0, sl
    9dca:	db02      	blt.n	9dd2 <__fputwc+0x6e>
    9dcc:	f1bc 0f0a 	cmp.w	ip, #10
    9dd0:	d1e7      	bne.n	9da2 <__fputwc+0x3e>
    9dd2:	f000 f953 	bl	a07c <__swbuf_r>
    9dd6:	1c43      	adds	r3, r0, #1
    9dd8:	d1e8      	bne.n	9dac <__fputwc+0x48>
    9dda:	4606      	mov	r6, r0
    9ddc:	4630      	mov	r0, r6
    9dde:	b002      	add	sp, #8
    9de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9de4:	4646      	mov	r6, r8
    9de6:	4630      	mov	r0, r6
    9de8:	b002      	add	sp, #8
    9dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9dee:	fa5f fc88 	uxtb.w	ip, r8
    9df2:	f88d c004 	strb.w	ip, [sp, #4]
    9df6:	4606      	mov	r6, r0
    9df8:	f10d 0904 	add.w	r9, sp, #4
    9dfc:	e7cf      	b.n	9d9e <__fputwc+0x3a>
    9dfe:	89a3      	ldrh	r3, [r4, #12]
    9e00:	4630      	mov	r0, r6
    9e02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9e06:	81a3      	strh	r3, [r4, #12]
    9e08:	b002      	add	sp, #8
    9e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9e0e:	bf00      	nop

00009e10 <_fputwc_r>:
    9e10:	b530      	push	{r4, r5, lr}
    9e12:	6e53      	ldr	r3, [r2, #100]	; 0x64
    9e14:	f013 0f01 	tst.w	r3, #1
    9e18:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    9e1c:	4614      	mov	r4, r2
    9e1e:	b083      	sub	sp, #12
    9e20:	4605      	mov	r5, r0
    9e22:	b29a      	uxth	r2, r3
    9e24:	d101      	bne.n	9e2a <_fputwc_r+0x1a>
    9e26:	0598      	lsls	r0, r3, #22
    9e28:	d51c      	bpl.n	9e64 <_fputwc_r+0x54>
    9e2a:	0490      	lsls	r0, r2, #18
    9e2c:	d406      	bmi.n	9e3c <_fputwc_r+0x2c>
    9e2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
    9e30:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    9e34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    9e38:	81a3      	strh	r3, [r4, #12]
    9e3a:	6662      	str	r2, [r4, #100]	; 0x64
    9e3c:	4622      	mov	r2, r4
    9e3e:	4628      	mov	r0, r5
    9e40:	f7ff ff90 	bl	9d64 <__fputwc>
    9e44:	6e63      	ldr	r3, [r4, #100]	; 0x64
    9e46:	07da      	lsls	r2, r3, #31
    9e48:	4605      	mov	r5, r0
    9e4a:	d402      	bmi.n	9e52 <_fputwc_r+0x42>
    9e4c:	89a3      	ldrh	r3, [r4, #12]
    9e4e:	059b      	lsls	r3, r3, #22
    9e50:	d502      	bpl.n	9e58 <_fputwc_r+0x48>
    9e52:	4628      	mov	r0, r5
    9e54:	b003      	add	sp, #12
    9e56:	bd30      	pop	{r4, r5, pc}
    9e58:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9e5a:	f7fa fe0b 	bl	4a74 <__retarget_lock_release_recursive>
    9e5e:	4628      	mov	r0, r5
    9e60:	b003      	add	sp, #12
    9e62:	bd30      	pop	{r4, r5, pc}
    9e64:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9e66:	9101      	str	r1, [sp, #4]
    9e68:	f7fa fe02 	bl	4a70 <__retarget_lock_acquire_recursive>
    9e6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    9e70:	9901      	ldr	r1, [sp, #4]
    9e72:	b29a      	uxth	r2, r3
    9e74:	e7d9      	b.n	9e2a <_fputwc_r+0x1a>
    9e76:	bf00      	nop

00009e78 <_wcsnrtombs_l>:
    9e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9e7c:	b08b      	sub	sp, #44	; 0x2c
    9e7e:	e9dd 8a15 	ldrd	r8, sl, [sp, #84]	; 0x54
    9e82:	9f14      	ldr	r7, [sp, #80]	; 0x50
    9e84:	9103      	str	r1, [sp, #12]
    9e86:	4681      	mov	r9, r0
    9e88:	9205      	str	r2, [sp, #20]
    9e8a:	461e      	mov	r6, r3
    9e8c:	f1b8 0f00 	cmp.w	r8, #0
    9e90:	d05c      	beq.n	9f4c <_wcsnrtombs_l+0xd4>
    9e92:	9b03      	ldr	r3, [sp, #12]
    9e94:	2b00      	cmp	r3, #0
    9e96:	d05e      	beq.n	9f56 <_wcsnrtombs_l+0xde>
    9e98:	9b05      	ldr	r3, [sp, #20]
    9e9a:	681d      	ldr	r5, [r3, #0]
    9e9c:	2f00      	cmp	r7, #0
    9e9e:	d06a      	beq.n	9f76 <_wcsnrtombs_l+0xfe>
    9ea0:	1e74      	subs	r4, r6, #1
    9ea2:	b34e      	cbz	r6, 9ef8 <_wcsnrtombs_l+0x80>
    9ea4:	9b03      	ldr	r3, [sp, #12]
    9ea6:	9304      	str	r3, [sp, #16]
    9ea8:	3d04      	subs	r5, #4
    9eaa:	2600      	movs	r6, #0
    9eac:	9501      	str	r5, [sp, #4]
    9eae:	e00b      	b.n	9ec8 <_wcsnrtombs_l+0x50>
    9eb0:	9b03      	ldr	r3, [sp, #12]
    9eb2:	bb2b      	cbnz	r3, 9f00 <_wcsnrtombs_l+0x88>
    9eb4:	9b01      	ldr	r3, [sp, #4]
    9eb6:	681a      	ldr	r2, [r3, #0]
    9eb8:	2a00      	cmp	r2, #0
    9eba:	d03a      	beq.n	9f32 <_wcsnrtombs_l+0xba>
    9ebc:	45bc      	cmp	ip, r7
    9ebe:	d25c      	bcs.n	9f7a <_wcsnrtombs_l+0x102>
    9ec0:	3c01      	subs	r4, #1
    9ec2:	1c63      	adds	r3, r4, #1
    9ec4:	4666      	mov	r6, ip
    9ec6:	d017      	beq.n	9ef8 <_wcsnrtombs_l+0x80>
    9ec8:	f8d8 3000 	ldr.w	r3, [r8]
    9ecc:	9302      	str	r3, [sp, #8]
    9ece:	9b01      	ldr	r3, [sp, #4]
    9ed0:	f8da 50e0 	ldr.w	r5, [sl, #224]	; 0xe0
    9ed4:	f853 2f04 	ldr.w	r2, [r3, #4]!
    9ed8:	9301      	str	r3, [sp, #4]
    9eda:	a907      	add	r1, sp, #28
    9edc:	4643      	mov	r3, r8
    9ede:	4648      	mov	r0, r9
    9ee0:	f8d8 b004 	ldr.w	fp, [r8, #4]
    9ee4:	47a8      	blx	r5
    9ee6:	1c42      	adds	r2, r0, #1
    9ee8:	d03a      	beq.n	9f60 <_wcsnrtombs_l+0xe8>
    9eea:	eb00 0c06 	add.w	ip, r0, r6
    9eee:	45bc      	cmp	ip, r7
    9ef0:	d9de      	bls.n	9eb0 <_wcsnrtombs_l+0x38>
    9ef2:	9b02      	ldr	r3, [sp, #8]
    9ef4:	e9c8 3b00 	strd	r3, fp, [r8]
    9ef8:	4630      	mov	r0, r6
    9efa:	b00b      	add	sp, #44	; 0x2c
    9efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9f00:	2800      	cmp	r0, #0
    9f02:	dd0e      	ble.n	9f22 <_wcsnrtombs_l+0xaa>
    9f04:	9b04      	ldr	r3, [sp, #16]
    9f06:	9d01      	ldr	r5, [sp, #4]
    9f08:	4418      	add	r0, r3
    9f0a:	1e5a      	subs	r2, r3, #1
    9f0c:	a907      	add	r1, sp, #28
    9f0e:	f100 3eff 	add.w	lr, r0, #4294967295
    9f12:	f811 3b01 	ldrb.w	r3, [r1], #1
    9f16:	f802 3f01 	strb.w	r3, [r2, #1]!
    9f1a:	4572      	cmp	r2, lr
    9f1c:	d1f9      	bne.n	9f12 <_wcsnrtombs_l+0x9a>
    9f1e:	9501      	str	r5, [sp, #4]
    9f20:	9004      	str	r0, [sp, #16]
    9f22:	9b05      	ldr	r3, [sp, #20]
    9f24:	681a      	ldr	r2, [r3, #0]
    9f26:	3204      	adds	r2, #4
    9f28:	601a      	str	r2, [r3, #0]
    9f2a:	9b01      	ldr	r3, [sp, #4]
    9f2c:	681a      	ldr	r2, [r3, #0]
    9f2e:	2a00      	cmp	r2, #0
    9f30:	d1c4      	bne.n	9ebc <_wcsnrtombs_l+0x44>
    9f32:	9b03      	ldr	r3, [sp, #12]
    9f34:	b10b      	cbz	r3, 9f3a <_wcsnrtombs_l+0xc2>
    9f36:	9b05      	ldr	r3, [sp, #20]
    9f38:	601a      	str	r2, [r3, #0]
    9f3a:	f10c 36ff 	add.w	r6, ip, #4294967295
    9f3e:	2200      	movs	r2, #0
    9f40:	4630      	mov	r0, r6
    9f42:	f8c8 2000 	str.w	r2, [r8]
    9f46:	b00b      	add	sp, #44	; 0x2c
    9f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9f4c:	9b03      	ldr	r3, [sp, #12]
    9f4e:	f500 7886 	add.w	r8, r0, #268	; 0x10c
    9f52:	2b00      	cmp	r3, #0
    9f54:	d1a0      	bne.n	9e98 <_wcsnrtombs_l+0x20>
    9f56:	9b05      	ldr	r3, [sp, #20]
    9f58:	f04f 37ff 	mov.w	r7, #4294967295
    9f5c:	681d      	ldr	r5, [r3, #0]
    9f5e:	e79f      	b.n	9ea0 <_wcsnrtombs_l+0x28>
    9f60:	4606      	mov	r6, r0
    9f62:	218a      	movs	r1, #138	; 0x8a
    9f64:	2200      	movs	r2, #0
    9f66:	4630      	mov	r0, r6
    9f68:	f8c9 1000 	str.w	r1, [r9]
    9f6c:	f8c8 2000 	str.w	r2, [r8]
    9f70:	b00b      	add	sp, #44	; 0x2c
    9f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9f76:	463e      	mov	r6, r7
    9f78:	e7be      	b.n	9ef8 <_wcsnrtombs_l+0x80>
    9f7a:	4666      	mov	r6, ip
    9f7c:	e7bc      	b.n	9ef8 <_wcsnrtombs_l+0x80>
    9f7e:	bf00      	nop

00009f80 <_wcsnrtombs_r>:
    9f80:	b510      	push	{r4, lr}
    9f82:	b084      	sub	sp, #16
    9f84:	4c05      	ldr	r4, [pc, #20]	; (9f9c <_wcsnrtombs_r+0x1c>)
    9f86:	9806      	ldr	r0, [sp, #24]
    9f88:	9000      	str	r0, [sp, #0]
    9f8a:	9807      	ldr	r0, [sp, #28]
    9f8c:	9001      	str	r0, [sp, #4]
    9f8e:	4804      	ldr	r0, [pc, #16]	; (9fa0 <_wcsnrtombs_r+0x20>)
    9f90:	6800      	ldr	r0, [r0, #0]
    9f92:	9402      	str	r4, [sp, #8]
    9f94:	f7ff ff70 	bl	9e78 <_wcsnrtombs_l>
    9f98:	b004      	add	sp, #16
    9f9a:	bd10      	pop	{r4, pc}
    9f9c:	20001088 	.word	0x20001088
    9fa0:	20001610 	.word	0x20001610

00009fa4 <__smakebuf_r>:
    9fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9fa8:	898b      	ldrh	r3, [r1, #12]
    9faa:	460c      	mov	r4, r1
    9fac:	0799      	lsls	r1, r3, #30
    9fae:	b096      	sub	sp, #88	; 0x58
    9fb0:	d508      	bpl.n	9fc4 <__smakebuf_r+0x20>
    9fb2:	f104 0343 	add.w	r3, r4, #67	; 0x43
    9fb6:	2201      	movs	r2, #1
    9fb8:	e9c4 3204 	strd	r3, r2, [r4, #16]
    9fbc:	6023      	str	r3, [r4, #0]
    9fbe:	b016      	add	sp, #88	; 0x58
    9fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9fc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    9fc8:	2900      	cmp	r1, #0
    9fca:	4606      	mov	r6, r0
    9fcc:	db25      	blt.n	a01a <__smakebuf_r+0x76>
    9fce:	466a      	mov	r2, sp
    9fd0:	f000 f8ac 	bl	a12c <_fstat_r>
    9fd4:	2800      	cmp	r0, #0
    9fd6:	db1f      	blt.n	a018 <__smakebuf_r+0x74>
    9fd8:	9d01      	ldr	r5, [sp, #4]
    9fda:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
    9fde:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
    9fe2:	fab5 f585 	clz	r5, r5
    9fe6:	f44f 6880 	mov.w	r8, #1024	; 0x400
    9fea:	096d      	lsrs	r5, r5, #5
    9fec:	f44f 6700 	mov.w	r7, #2048	; 0x800
    9ff0:	4641      	mov	r1, r8
    9ff2:	4630      	mov	r0, r6
    9ff4:	f7f9 fcbc 	bl	3970 <_malloc_r>
    9ff8:	b1e0      	cbz	r0, a034 <__smakebuf_r+0x90>
    9ffa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    9ffe:	f8c4 8014 	str.w	r8, [r4, #20]
    a002:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    a006:	6020      	str	r0, [r4, #0]
    a008:	6120      	str	r0, [r4, #16]
    a00a:	81a3      	strh	r3, [r4, #12]
    a00c:	bb35      	cbnz	r5, a05c <__smakebuf_r+0xb8>
    a00e:	433b      	orrs	r3, r7
    a010:	81a3      	strh	r3, [r4, #12]
    a012:	b016      	add	sp, #88	; 0x58
    a014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a018:	89a3      	ldrh	r3, [r4, #12]
    a01a:	f013 0580 	ands.w	r5, r3, #128	; 0x80
    a01e:	d019      	beq.n	a054 <__smakebuf_r+0xb0>
    a020:	f04f 0840 	mov.w	r8, #64	; 0x40
    a024:	2500      	movs	r5, #0
    a026:	4641      	mov	r1, r8
    a028:	4630      	mov	r0, r6
    a02a:	462f      	mov	r7, r5
    a02c:	f7f9 fca0 	bl	3970 <_malloc_r>
    a030:	2800      	cmp	r0, #0
    a032:	d1e2      	bne.n	9ffa <__smakebuf_r+0x56>
    a034:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    a038:	059a      	lsls	r2, r3, #22
    a03a:	d4c0      	bmi.n	9fbe <__smakebuf_r+0x1a>
    a03c:	f023 0303 	bic.w	r3, r3, #3
    a040:	f104 0243 	add.w	r2, r4, #67	; 0x43
    a044:	f043 0302 	orr.w	r3, r3, #2
    a048:	2101      	movs	r1, #1
    a04a:	e9c4 2104 	strd	r2, r1, [r4, #16]
    a04e:	81a3      	strh	r3, [r4, #12]
    a050:	6022      	str	r2, [r4, #0]
    a052:	e7b4      	b.n	9fbe <__smakebuf_r+0x1a>
    a054:	f44f 6880 	mov.w	r8, #1024	; 0x400
    a058:	462f      	mov	r7, r5
    a05a:	e7c9      	b.n	9ff0 <__smakebuf_r+0x4c>
    a05c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    a060:	4630      	mov	r0, r6
    a062:	f000 f879 	bl	a158 <_isatty_r>
    a066:	b910      	cbnz	r0, a06e <__smakebuf_r+0xca>
    a068:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    a06c:	e7cf      	b.n	a00e <__smakebuf_r+0x6a>
    a06e:	89a3      	ldrh	r3, [r4, #12]
    a070:	f023 0303 	bic.w	r3, r3, #3
    a074:	f043 0301 	orr.w	r3, r3, #1
    a078:	b21b      	sxth	r3, r3
    a07a:	e7c8      	b.n	a00e <__smakebuf_r+0x6a>

0000a07c <__swbuf_r>:
    a07c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a07e:	460d      	mov	r5, r1
    a080:	4614      	mov	r4, r2
    a082:	4606      	mov	r6, r0
    a084:	b110      	cbz	r0, a08c <__swbuf_r+0x10>
    a086:	6b43      	ldr	r3, [r0, #52]	; 0x34
    a088:	2b00      	cmp	r3, #0
    a08a:	d04c      	beq.n	a126 <__swbuf_r+0xaa>
    a08c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    a090:	69a3      	ldr	r3, [r4, #24]
    a092:	60a3      	str	r3, [r4, #8]
    a094:	0717      	lsls	r7, r2, #28
    a096:	b290      	uxth	r0, r2
    a098:	d51b      	bpl.n	a0d2 <__swbuf_r+0x56>
    a09a:	6923      	ldr	r3, [r4, #16]
    a09c:	b1cb      	cbz	r3, a0d2 <__swbuf_r+0x56>
    a09e:	b2ed      	uxtb	r5, r5
    a0a0:	0481      	lsls	r1, r0, #18
    a0a2:	462f      	mov	r7, r5
    a0a4:	d522      	bpl.n	a0ec <__swbuf_r+0x70>
    a0a6:	6822      	ldr	r2, [r4, #0]
    a0a8:	6961      	ldr	r1, [r4, #20]
    a0aa:	1ad3      	subs	r3, r2, r3
    a0ac:	4299      	cmp	r1, r3
    a0ae:	dd29      	ble.n	a104 <__swbuf_r+0x88>
    a0b0:	3301      	adds	r3, #1
    a0b2:	68a1      	ldr	r1, [r4, #8]
    a0b4:	3901      	subs	r1, #1
    a0b6:	60a1      	str	r1, [r4, #8]
    a0b8:	1c51      	adds	r1, r2, #1
    a0ba:	6021      	str	r1, [r4, #0]
    a0bc:	7015      	strb	r5, [r2, #0]
    a0be:	6962      	ldr	r2, [r4, #20]
    a0c0:	429a      	cmp	r2, r3
    a0c2:	d027      	beq.n	a114 <__swbuf_r+0x98>
    a0c4:	89a3      	ldrh	r3, [r4, #12]
    a0c6:	07db      	lsls	r3, r3, #31
    a0c8:	d501      	bpl.n	a0ce <__swbuf_r+0x52>
    a0ca:	2d0a      	cmp	r5, #10
    a0cc:	d022      	beq.n	a114 <__swbuf_r+0x98>
    a0ce:	4638      	mov	r0, r7
    a0d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a0d2:	4621      	mov	r1, r4
    a0d4:	4630      	mov	r0, r6
    a0d6:	f7ff fddf 	bl	9c98 <__swsetup_r>
    a0da:	bb08      	cbnz	r0, a120 <__swbuf_r+0xa4>
    a0dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    a0e0:	6923      	ldr	r3, [r4, #16]
    a0e2:	b290      	uxth	r0, r2
    a0e4:	b2ed      	uxtb	r5, r5
    a0e6:	0481      	lsls	r1, r0, #18
    a0e8:	462f      	mov	r7, r5
    a0ea:	d4dc      	bmi.n	a0a6 <__swbuf_r+0x2a>
    a0ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    a0f0:	81a2      	strh	r2, [r4, #12]
    a0f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
    a0f4:	6961      	ldr	r1, [r4, #20]
    a0f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
    a0fa:	6662      	str	r2, [r4, #100]	; 0x64
    a0fc:	6822      	ldr	r2, [r4, #0]
    a0fe:	1ad3      	subs	r3, r2, r3
    a100:	4299      	cmp	r1, r3
    a102:	dcd5      	bgt.n	a0b0 <__swbuf_r+0x34>
    a104:	4621      	mov	r1, r4
    a106:	4630      	mov	r0, r6
    a108:	f7fd fb20 	bl	774c <_fflush_r>
    a10c:	b940      	cbnz	r0, a120 <__swbuf_r+0xa4>
    a10e:	6822      	ldr	r2, [r4, #0]
    a110:	2301      	movs	r3, #1
    a112:	e7ce      	b.n	a0b2 <__swbuf_r+0x36>
    a114:	4621      	mov	r1, r4
    a116:	4630      	mov	r0, r6
    a118:	f7fd fb18 	bl	774c <_fflush_r>
    a11c:	2800      	cmp	r0, #0
    a11e:	d0d6      	beq.n	a0ce <__swbuf_r+0x52>
    a120:	f04f 37ff 	mov.w	r7, #4294967295
    a124:	e7d3      	b.n	a0ce <__swbuf_r+0x52>
    a126:	f7fa f985 	bl	4434 <__sinit>
    a12a:	e7af      	b.n	a08c <__swbuf_r+0x10>

0000a12c <_fstat_r>:
    a12c:	b570      	push	{r4, r5, r6, lr}
    a12e:	460c      	mov	r4, r1
    a130:	4d08      	ldr	r5, [pc, #32]	; (a154 <_fstat_r+0x28>)
    a132:	4603      	mov	r3, r0
    a134:	2600      	movs	r6, #0
    a136:	4620      	mov	r0, r4
    a138:	4611      	mov	r1, r2
    a13a:	461c      	mov	r4, r3
    a13c:	602e      	str	r6, [r5, #0]
    a13e:	f7f8 f8cf 	bl	22e0 <_fstat>
    a142:	1c43      	adds	r3, r0, #1
    a144:	d000      	beq.n	a148 <_fstat_r+0x1c>
    a146:	bd70      	pop	{r4, r5, r6, pc}
    a148:	682b      	ldr	r3, [r5, #0]
    a14a:	2b00      	cmp	r3, #0
    a14c:	d0fb      	beq.n	a146 <_fstat_r+0x1a>
    a14e:	6023      	str	r3, [r4, #0]
    a150:	bd70      	pop	{r4, r5, r6, pc}
    a152:	bf00      	nop
    a154:	20002068 	.word	0x20002068

0000a158 <_isatty_r>:
    a158:	b538      	push	{r3, r4, r5, lr}
    a15a:	4d07      	ldr	r5, [pc, #28]	; (a178 <_isatty_r+0x20>)
    a15c:	2200      	movs	r2, #0
    a15e:	4604      	mov	r4, r0
    a160:	4608      	mov	r0, r1
    a162:	602a      	str	r2, [r5, #0]
    a164:	f7f8 f8c2 	bl	22ec <_isatty>
    a168:	1c43      	adds	r3, r0, #1
    a16a:	d000      	beq.n	a16e <_isatty_r+0x16>
    a16c:	bd38      	pop	{r3, r4, r5, pc}
    a16e:	682b      	ldr	r3, [r5, #0]
    a170:	2b00      	cmp	r3, #0
    a172:	d0fb      	beq.n	a16c <_isatty_r+0x14>
    a174:	6023      	str	r3, [r4, #0]
    a176:	bd38      	pop	{r3, r4, r5, pc}
    a178:	20002068 	.word	0x20002068
    a17c:	00000000 	.word	0x00000000

0000a180 <___reboot_Teensyduino__veneer>:
    a180:	f85f f000 	ldr.w	pc, [pc]	; a184 <___reboot_Teensyduino__veneer+0x4>
    a184:	60001de1 	.word	0x60001de1

0000a188 <___init_veneer>:
    a188:	f85f f000 	ldr.w	pc, [pc]	; a18c <___init_veneer+0x4>
    a18c:	60001e35 	.word	0x60001e35

Disassembly of section .fini:

0000a190 <_fini>:
    a190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a192:	bf00      	nop
