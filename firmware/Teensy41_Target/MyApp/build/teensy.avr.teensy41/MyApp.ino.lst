
C:\Users\johnw\AppData\Local\arduino\sketches\327AA1E20F62E69E5802DB70EF4C5A3B/MyApp.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
	if (dest == src) return;
	do {
		*dest++ = *src++;
	} while (dest < dest_end);
#else
	asm volatile(
60001400:	4281      	cmp	r1, r0
60001402:	d005      	beq.n	60001410 <memory_copy+0x10>
60001404:	f851 3b04 	ldr.w	r3, [r1], #4
60001408:	f840 3b04 	str.w	r3, [r0], #4
6000140c:	4282      	cmp	r2, r0
6000140e:	d8f9      	bhi.n	60001404 <memory_copy+0x4>
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	"2:					\n"
	: [dest] "+r" (dest), [src] "+r" (src) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001410:	4770      	bx	lr
60001412:	bf00      	nop

60001414 <memory_clear.constprop.0>:
#if 0
	while (dest < dest_end) {
		*dest++ = 0;
	}
#else
	asm volatile(
60001414:	4a04      	ldr	r2, [pc, #16]	; (60001428 <memory_clear.constprop.0+0x14>)
60001416:	4905      	ldr	r1, [pc, #20]	; (6000142c <memory_clear.constprop.0+0x18>)
60001418:	f04f 0300 	mov.w	r3, #0
6000141c:	f842 3b04 	str.w	r3, [r2], #4
60001420:	4291      	cmp	r1, r2
60001422:	d8fb      	bhi.n	6000141c <memory_clear.constprop.0+0x8>
	"1:	str.w	r3, [%[dest]], #4	\n"
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	: [dest] "+r" (dest) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001424:	4770      	bx	lr
60001426:	bf00      	nop
60001428:	200086c0 	.word	0x200086c0
6000142c:	20008d20 	.word	0x20008d20

60001430 <ResetHandler2>:
{
60001430:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	__asm__ volatile("dsb":::"memory");
60001434:	f3bf 8f4f 	dsb	sy
	asm volatile("nop");
60001438:	bf00      	nop
	asm volatile("nop");
6000143a:	bf00      	nop
	asm volatile("nop");
6000143c:	bf00      	nop
	asm volatile("nop");
6000143e:	bf00      	nop
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
60001440:	f000 f918 	bl	60001674 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001444:	4b68      	ldr	r3, [pc, #416]	; (600015e8 <ResetHandler2+0x1b8>)
60001446:	2208      	movs	r2, #8
60001448:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	asm volatile("nop");
6000144c:	bf00      	nop
	asm volatile("nop");
6000144e:	bf00      	nop
	asm volatile("nop");
60001450:	bf00      	nop
	asm volatile("nop");
60001452:	bf00      	nop
	asm volatile("nop");
60001454:	bf00      	nop
	asm volatile("nop");
60001456:	bf00      	nop
	asm volatile("nop");
60001458:	bf00      	nop
	asm volatile("nop");
6000145a:	bf00      	nop
	asm volatile("nop");
6000145c:	bf00      	nop
	asm volatile("nop");
6000145e:	bf00      	nop
	asm volatile("nop");
60001460:	bf00      	nop
	asm volatile("nop");
60001462:	bf00      	nop
	asm volatile("nop");
60001464:	bf00      	nop
	asm volatile("nop");
60001466:	bf00      	nop
	asm volatile("nop");
60001468:	bf00      	nop
	asm volatile("nop");
6000146a:	bf00      	nop
	memory_copy(&_stext, &_stextload, &_etext);
6000146c:	4a5f      	ldr	r2, [pc, #380]	; (600015ec <ResetHandler2+0x1bc>)
6000146e:	4960      	ldr	r1, [pc, #384]	; (600015f0 <ResetHandler2+0x1c0>)
60001470:	4860      	ldr	r0, [pc, #384]	; (600015f4 <ResetHandler2+0x1c4>)
60001472:	f7ff ffc5 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001476:	4a60      	ldr	r2, [pc, #384]	; (600015f8 <ResetHandler2+0x1c8>)
60001478:	4960      	ldr	r1, [pc, #384]	; (600015fc <ResetHandler2+0x1cc>)
6000147a:	4861      	ldr	r0, [pc, #388]	; (60001600 <ResetHandler2+0x1d0>)
6000147c:	f7ff ffc0 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
60001480:	4c60      	ldr	r4, [pc, #384]	; (60001604 <ResetHandler2+0x1d4>)
60001482:	f7ff ffc7 	bl	60001414 <memory_clear.constprop.0>
	SCB_CPACR = 0x00F00000;
60001486:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
6000148a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000148e:	2300      	movs	r3, #0
60001490:	4a5d      	ldr	r2, [pc, #372]	; (60001608 <ResetHandler2+0x1d8>)
	SCB_CPACR = 0x00F00000;
60001492:	f8c1 0d88 	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001496:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
6000149a:	3301      	adds	r3, #1
6000149c:	2bb0      	cmp	r3, #176	; 0xb0
6000149e:	d1fa      	bne.n	60001496 <ResetHandler2+0x66>
600014a0:	4b5a      	ldr	r3, [pc, #360]	; (6000160c <ResetHandler2+0x1dc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600014a2:	2180      	movs	r1, #128	; 0x80
600014a4:	4a5a      	ldr	r2, [pc, #360]	; (60001610 <ResetHandler2+0x1e0>)
600014a6:	f803 1b01 	strb.w	r1, [r3], #1
600014aa:	4293      	cmp	r3, r2
600014ac:	d1fb      	bne.n	600014a6 <ResetHandler2+0x76>
	SCB_VTOR = (uint32_t)_VectorsRam;
600014ae:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014b2:	4e4d      	ldr	r6, [pc, #308]	; (600015e8 <ResetHandler2+0x1b8>)
600014b4:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014b8:	f8df b184 	ldr.w	fp, [pc, #388]	; 60001640 <ResetHandler2+0x210>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014bc:	f8df a184 	ldr.w	sl, [pc, #388]	; 60001644 <ResetHandler2+0x214>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014c0:	f04f 31ff 	mov.w	r1, #4294967295
	SCB_VTOR = (uint32_t)_VectorsRam;
600014c4:	f8c5 4d08 	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
600014c8:	2700      	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014ca:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014ce:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014d2:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014d6:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014da:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014de:	f8df 8168 	ldr.w	r8, [pc, #360]	; 60001648 <ResetHandler2+0x218>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014e6:	4a4b      	ldr	r2, [pc, #300]	; (60001614 <ResetHandler2+0x1e4>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e8:	f8c5 3d24 	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ec:	f8d8 301c 	ldr.w	r3, [r8, #28]
600014f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014f8:	f8c8 301c 	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014fc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
60001500:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
60001504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001508:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
6000150c:	6691      	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
6000150e:	66d1      	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001510:	6711      	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001512:	6751      	str	r1, [r2, #116]	; 0x74
	configure_cache();
60001514:	f000 f8b6 	bl	60001684 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
60001518:	4b3f      	ldr	r3, [pc, #252]	; (60001618 <ResetHandler2+0x1e8>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000151a:	4940      	ldr	r1, [pc, #256]	; (6000161c <ResetHandler2+0x1ec>)
	_VectorsRam[14] = pendablesrvreq_isr;
6000151c:	63a3      	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
6000151e:	4b40      	ldr	r3, [pc, #256]	; (60001620 <ResetHandler2+0x1f0>)
60001520:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001522:	2363      	movs	r3, #99	; 0x63
60001524:	616b      	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001526:	2303      	movs	r3, #3
	SYST_CVR = 0;
60001528:	61af      	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000152a:	612b      	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000152c:	4b3d      	ldr	r3, [pc, #244]	; (60001624 <ResetHandler2+0x1f4>)
6000152e:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001532:	f8d5 3dfc 	ldr.w	r3, [r5, #3580]	; 0xdfc
60001536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000153a:	f8c5 3dfc 	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000153e:	4b3a      	ldr	r3, [pc, #232]	; (60001628 <ResetHandler2+0x1f8>)
60001540:	681a      	ldr	r2, [r3, #0]
60001542:	f042 0201 	orr.w	r2, r2, #1
60001546:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001548:	685b      	ldr	r3, [r3, #4]
6000154a:	600b      	str	r3, [r1, #0]
	usb_pll_start();	
6000154c:	f000 fae4 	bl	60001b18 <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001550:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001554:	4835      	ldr	r0, [pc, #212]	; (6000162c <ResetHandler2+0x1fc>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001556:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000155a:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000155e:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001562:	f000 fc81 	bl	60001e68 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001566:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
6000156a:	4b31      	ldr	r3, [pc, #196]	; (60001630 <ResetHandler2+0x200>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000156c:	4a31      	ldr	r2, [pc, #196]	; (60001634 <ResetHandler2+0x204>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000156e:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
60001572:	f8c8 106c 	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001576:	601f      	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001578:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000157c:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001580:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001584:	f8c3 7138 	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001588:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000158a:	07db      	lsls	r3, r3, #31
6000158c:	d408      	bmi.n	600015a0 <ResetHandler2+0x170>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000158e:	f642 6315 	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
60001592:	4929      	ldr	r1, [pc, #164]	; (60001638 <ResetHandler2+0x208>)
60001594:	6551      	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001596:	6513      	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001598:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000159a:	f043 0301 	orr.w	r3, r3, #1
6000159e:	6393      	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600015a0:	4a24      	ldr	r2, [pc, #144]	; (60001634 <ResetHandler2+0x204>)
600015a2:	4c26      	ldr	r4, [pc, #152]	; (6000163c <ResetHandler2+0x20c>)
600015a4:	6893      	ldr	r3, [r2, #8]
600015a6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
600015aa:	6093      	str	r3, [r2, #8]
	configure_external_ram();
600015ac:	f000 f8f2 	bl	60001794 <configure_external_ram>
	analog_init();
600015b0:	f000 fc16 	bl	60001de0 <analog_init>
	pwm_init();
600015b4:	f000 fc4c 	bl	60001e50 <__pwm_init_veneer>
	tempmon_init();
600015b8:	f000 fadc 	bl	60001b74 <tempmon_init>
	startup_middle_hook();
600015bc:	f000 f85c 	bl	60001678 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
600015c0:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015c2:	2b13      	cmp	r3, #19
600015c4:	d9fc      	bls.n	600015c0 <ResetHandler2+0x190>
	usb_init();
600015c6:	f000 fb6d 	bl	60001ca4 <usb_init>
600015ca:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015cc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015d0:	d3fb      	bcc.n	600015ca <ResetHandler2+0x19a>
	startup_debug_reset();
600015d2:	f000 f855 	bl	60001680 <startup_debug_reset>
	startup_late_hook();
600015d6:	f000 f851 	bl	6000167c <startup_default_late_hook>
	__libc_init_array();
600015da:	f000 fc31 	bl	60001e40 <____libc_init_array_veneer>
	main();
600015de:	f000 fc47 	bl	60001e70 <__main_veneer>
	while (1) asm("WFI");
600015e2:	bf30      	wfi
600015e4:	e7fd      	b.n	600015e2 <ResetHandler2+0x1b2>
600015e6:	bf00      	nop
600015e8:	400d8000 	.word	0x400d8000
600015ec:	0000dbe8 	.word	0x0000dbe8
600015f0:	60001f8c 	.word	0x60001f8c
600015f4:	00000000 	.word	0x00000000
600015f8:	200086c0 	.word	0x200086c0
600015fc:	6000fb78 	.word	0x6000fb78
60001600:	20000000 	.word	0x20000000
60001604:	20008400 	.word	0x20008400
60001608:	00001961 	.word	0x00001961
6000160c:	e000e400 	.word	0xe000e400
60001610:	e000e4a0 	.word	0xe000e4a0
60001614:	400ac000 	.word	0x400ac000
60001618:	00002d81 	.word	0x00002d81
6000161c:	20008cb4 	.word	0x20008cb4
60001620:	00002d85 	.word	0x00002d85
60001624:	20200000 	.word	0x20200000
60001628:	e0001000 	.word	0xe0001000
6000162c:	23c34600 	.word	0x23c34600
60001630:	40084000 	.word	0x40084000
60001634:	400d4000 	.word	0x400d4000
60001638:	56c00000 	.word	0x56c00000
6000163c:	20008cb8 	.word	0x20008cb8
60001640:	2018101b 	.word	0x2018101b
60001644:	13110d0c 	.word	0x13110d0c
60001648:	400fc000 	.word	0x400fc000

6000164c <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000164c:	4b05      	ldr	r3, [pc, #20]	; (60001664 <ResetHandler+0x18>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000164e:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001652:	4a05      	ldr	r2, [pc, #20]	; (60001668 <ResetHandler+0x1c>)
	IOMUXC_GPR_GPR16 = 0x00200007;
60001654:	4805      	ldr	r0, [pc, #20]	; (6000166c <ResetHandler+0x20>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001656:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001658:	6418      	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
6000165a:	4a05      	ldr	r2, [pc, #20]	; (60001670 <ResetHandler+0x24>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000165c:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
6000165e:	4695      	mov	sp, r2
	ResetHandler2();
60001660:	f7ff fee6 	bl	60001430 <ResetHandler2>
60001664:	400ac000 	.word	0x400ac000
60001668:	aaaaaaaf 	.word	0xaaaaaaaf
6000166c:	00200007 	.word	0x00200007
60001670:	20070000 	.word	0x20070000

60001674 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
60001674:	4770      	bx	lr
60001676:	bf00      	nop

60001678 <startup_default_middle_hook>:
60001678:	4770      	bx	lr
6000167a:	bf00      	nop

6000167c <startup_default_late_hook>:
6000167c:	4770      	bx	lr
6000167e:	bf00      	nop

60001680 <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
60001680:	bf00      	nop
60001682:	4770      	bx	lr

60001684 <configure_cache>:
{
60001684:	b410      	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
60001686:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
6000168a:	2100      	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
6000168c:	2410      	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000168e:	4831      	ldr	r0, [pc, #196]	; (60001754 <configure_cache+0xd0>)
	SCB_MPU_CTRL = 0; // turn off MPU
60001690:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001694:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001698:	2411      	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000169a:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
6000169e:	482e      	ldr	r0, [pc, #184]	; (60001758 <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600016a0:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600016a4:	2412      	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
600016a6:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600016aa:	482c      	ldr	r0, [pc, #176]	; (6000175c <configure_cache+0xd8>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600016ac:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600016b0:	4a2b      	ldr	r2, [pc, #172]	; (60001760 <configure_cache+0xdc>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600016b2:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600016b6:	4c2b      	ldr	r4, [pc, #172]	; (60001764 <configure_cache+0xe0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600016b8:	f042 0215 	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600016bc:	482a      	ldr	r0, [pc, #168]	; (60001768 <configure_cache+0xe4>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600016be:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600016c2:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600016c6:	4c29      	ldr	r4, [pc, #164]	; (6000176c <configure_cache+0xe8>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600016c8:	4829      	ldr	r0, [pc, #164]	; (60001770 <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600016ca:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600016ce:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600016d2:	4c28      	ldr	r4, [pc, #160]	; (60001774 <configure_cache+0xf0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600016d4:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600016d8:	4827      	ldr	r0, [pc, #156]	; (60001778 <configure_cache+0xf4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600016da:	4a28      	ldr	r2, [pc, #160]	; (6000177c <configure_cache+0xf8>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600016dc:	f8c3 4da0 	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600016e0:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600016e4:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016e8:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600016ec:	4c24      	ldr	r4, [pc, #144]	; (60001780 <configure_cache+0xfc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016ee:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600016f0:	4824      	ldr	r0, [pc, #144]	; (60001784 <configure_cache+0x100>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600016f2:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016f6:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600016fa:	4a23      	ldr	r2, [pc, #140]	; (60001788 <configure_cache+0x104>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600016fc:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001700:	4c22      	ldr	r4, [pc, #136]	; (6000178c <configure_cache+0x108>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001702:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001706:	f102 6240 	add.w	r2, r2, #201326592	; 0xc000000
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000170a:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
6000170e:	4820      	ldr	r0, [pc, #128]	; (60001790 <configure_cache+0x10c>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001710:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
60001714:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
60001716:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
6000171a:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	asm("nop"); // allow a few cycles for bus writes before enable MPU
6000171e:	bf00      	nop
	asm("nop");
60001720:	bf00      	nop
	asm("nop");
60001722:	bf00      	nop
	asm("nop");
60001724:	bf00      	nop
	asm("nop");
60001726:	bf00      	nop
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001728:	2201      	movs	r2, #1
6000172a:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
6000172e:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001732:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001736:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
6000173a:	f3bf 8f4f 	dsb	sy
	asm("isb");
6000173e:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001742:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
}
60001746:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000174a:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
6000174e:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
60001752:	4770      	bx	lr
60001754:	1000003f 	.word	0x1000003f
60001758:	07080025 	.word	0x07080025
6000175c:	00100009 	.word	0x00100009
60001760:	20008d20 	.word	0x20008d20
60001764:	00200013 	.word	0x00200013
60001768:	07020021 	.word	0x07020021
6000176c:	20000014 	.word	0x20000014
60001770:	13080025 	.word	0x13080025
60001774:	10000009 	.word	0x10000009
60001778:	20200016 	.word	0x20200016
6000177c:	130b0027 	.word	0x130b0027
60001780:	40000017 	.word	0x40000017
60001784:	60000018 	.word	0x60000018
60001788:	070b002f 	.word	0x070b002f
6000178c:	70000019 	.word	0x70000019
60001790:	8000001a 	.word	0x8000001a

60001794 <configure_external_ram>:
{
60001794:	b5f0      	push	{r4, r5, r6, r7, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001796:	4bb8      	ldr	r3, [pc, #736]	; (60001a78 <configure_external_ram+0x2e4>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001798:	2218      	movs	r2, #24
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000179a:	4eb8      	ldr	r6, [pc, #736]	; (60001a7c <configure_external_ram+0x2e8>)
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
6000179c:	2001      	movs	r0, #1
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
6000179e:	4fb8      	ldr	r7, [pc, #736]	; (60001a80 <configure_external_ram+0x2ec>)
{
600017a0:	b083      	sub	sp, #12
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600017a2:	f8c3 625c 	str.w	r6, [r3, #604]	; 0x25c
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600017a6:	49b7      	ldr	r1, [pc, #732]	; (60001a84 <configure_external_ram+0x2f0>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
600017a8:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600017ac:	4db6      	ldr	r5, [pc, #728]	; (60001a88 <configure_external_ram+0x2f4>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600017ae:	f8c3 6264 	str.w	r6, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600017b2:	f5a6 4630 	sub.w	r6, r6, #45056	; 0xb000
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600017b6:	4cb5      	ldr	r4, [pc, #724]	; (60001a8c <configure_external_ram+0x2f8>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600017b8:	f8c3 6268 	str.w	r6, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600017bc:	f8c3 526c 	str.w	r5, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600017c0:	f8c3 5270 	str.w	r5, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600017c4:	f8c3 5274 	str.w	r5, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600017c8:	f8c3 5278 	str.w	r5, [r3, #632]	; 0x278
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600017cc:	f248 750c 	movw	r5, #34572	; 0x870c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
600017d0:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
600017d2:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
600017d4:	675a      	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
600017d6:	679a      	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
600017d8:	67da      	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
600017da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
600017de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
600017e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600017e6:	f8c1 032c 	str.w	r0, [r1, #812]	; 0x32c
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600017ea:	4aa9      	ldr	r2, [pc, #676]	; (60001a90 <configure_external_ram+0x2fc>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
600017ec:	f8c1 0330 	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
600017f0:	f8c1 0334 	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
600017f4:	f8c1 0338 	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
600017f8:	f8c1 033c 	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
600017fc:	f8c1 0350 	str.w	r0, [r1, #848]	; 0x350
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001800:	69a1      	ldr	r1, [r4, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001802:	4ba4      	ldr	r3, [pc, #656]	; (60001a94 <configure_external_ram+0x300>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001804:	400a      	ands	r2, r1
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001806:	48a4      	ldr	r0, [pc, #656]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001808:	49a4      	ldr	r1, [pc, #656]	; (60001a9c <configure_external_ram+0x308>)
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
6000180a:	4313      	orrs	r3, r2
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
6000180c:	4aa4      	ldr	r2, [pc, #656]	; (60001aa0 <configure_external_ram+0x30c>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
6000180e:	61a3      	str	r3, [r4, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60001810:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
60001814:	f043 030c 	orr.w	r3, r3, #12
60001818:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
6000181c:	f04f 34ff 	mov.w	r4, #4294967295
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001820:	6803      	ldr	r3, [r0, #0]
60001822:	f043 0302 	orr.w	r3, r3, #2
60001826:	6003      	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001828:	6803      	ldr	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
6000182a:	402b      	ands	r3, r5
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
6000182c:	f44f 5500 	mov.w	r5, #8192	; 0x2000
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001830:	431a      	orrs	r2, r3
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001832:	4b9c      	ldr	r3, [pc, #624]	; (60001aa4 <configure_external_ram+0x310>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001834:	6002      	str	r2, [r0, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001836:	6044      	str	r4, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001838:	688a      	ldr	r2, [r1, #8]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000183a:	4c9b      	ldr	r4, [pc, #620]	; (60001aa8 <configure_external_ram+0x314>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000183c:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000183e:	4a9b      	ldr	r2, [pc, #620]	; (60001aac <configure_external_ram+0x318>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001840:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001844:	6083      	str	r3, [r0, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
60001846:	68c3      	ldr	r3, [r0, #12]
60001848:	f023 0378 	bic.w	r3, r3, #120	; 0x78
6000184c:	60c3      	str	r3, [r0, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000184e:	6a03      	ldr	r3, [r0, #32]
60001850:	4013      	ands	r3, r2
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001852:	4323      	orrs	r3, r4
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001854:	6203      	str	r3, [r0, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001856:	6a03      	ldr	r3, [r0, #32]
60001858:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF2CR0 = mask;
6000185a:	4a95      	ldr	r2, [pc, #596]	; (60001ab0 <configure_external_ram+0x31c>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000185c:	4323      	orrs	r3, r4
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
6000185e:	4c95      	ldr	r4, [pc, #596]	; (60001ab4 <configure_external_ram+0x320>)
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001860:	6243      	str	r3, [r0, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60001862:	6282      	str	r2, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
60001864:	62c2      	str	r2, [r0, #44]	; 0x2c
	FLEXSPI2_INTEN = 0;
60001866:	2200      	movs	r2, #0
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001868:	f8d1 30b8 	ldr.w	r3, [r1, #184]	; 0xb8
6000186c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
60001870:	f043 0301 	orr.w	r3, r3, #1
60001874:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001878:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
6000187c:	498e      	ldr	r1, [pc, #568]	; (60001ab8 <configure_external_ram+0x324>)
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
6000187e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
60001882:	f043 0301 	orr.w	r3, r3, #1
60001886:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
6000188a:	f240 6305 	movw	r3, #1541	; 0x605
	FLEXSPI2_INTEN = 0;
6000188e:	6102      	str	r2, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001890:	6605      	str	r5, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001892:	6704      	str	r4, [r0, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001894:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
60001898:	6645      	str	r5, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
6000189a:	6744      	str	r4, [r0, #116]	; 0x74
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
6000189c:	2402      	movs	r4, #2
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
6000189e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600018a2:	6803      	ldr	r3, [r0, #0]
600018a4:	f023 0302 	bic.w	r3, r3, #2
600018a8:	6003      	str	r3, [r0, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600018aa:	6181      	str	r1, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600018ac:	4b83      	ldr	r3, [pc, #524]	; (60001abc <configure_external_ram+0x328>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
600018ae:	4984      	ldr	r1, [pc, #528]	; (60001ac0 <configure_external_ram+0x32c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600018b0:	61c4      	str	r4, [r0, #28]
	for (int i=0; i < 64; i++) luttable[i] = 0;
600018b2:	f843 2b04 	str.w	r2, [r3], #4
600018b6:	428b      	cmp	r3, r1
600018b8:	d1fb      	bne.n	600018b2 <configure_external_ram+0x11e>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
600018ba:	4a77      	ldr	r2, [pc, #476]	; (60001a98 <configure_external_ram+0x304>)
600018bc:	6813      	ldr	r3, [r2, #0]
600018be:	f043 0301 	orr.w	r3, r3, #1
600018c2:	6013      	str	r3, [r2, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
600018c4:	6813      	ldr	r3, [r2, #0]
600018c6:	f013 0301 	ands.w	r3, r3, #1
600018ca:	d1fb      	bne.n	600018c4 <configure_external_ram+0x130>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600018cc:	487a      	ldr	r0, [pc, #488]	; (60001ab8 <configure_external_ram+0x324>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600018ce:	2102      	movs	r1, #2
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600018d0:	f240 64f5 	movw	r4, #1781	; 0x6f5
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600018d4:	6190      	str	r0, [r2, #24]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600018d6:	f240 4099 	movw	r0, #1177	; 0x499
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600018da:	61d1      	str	r1, [r2, #28]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600018dc:	f240 4166 	movw	r1, #1126	; 0x466
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600018e0:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600018e4:	f242 4401 	movw	r4, #9217	; 0x2401
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600018e8:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600018ec:	4975      	ldr	r1, [pc, #468]	; (60001ac4 <configure_external_ram+0x330>)
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600018ee:	f8c2 0220 	str.w	r0, [r2, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600018f2:	f8c2 1230 	str.w	r1, [r2, #560]	; 0x230
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
600018f6:	f240 4135 	movw	r1, #1077	; 0x435
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
600018fa:	4873      	ldr	r0, [pc, #460]	; (60001ac8 <configure_external_ram+0x334>)
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600018fc:	f8c2 4234 	str.w	r4, [r2, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001900:	f8c2 1240 	str.w	r1, [r2, #576]	; 0x240
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001904:	4c71      	ldr	r4, [pc, #452]	; (60001acc <configure_external_ram+0x338>)
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001906:	f8c2 0250 	str.w	r0, [r2, #592]	; 0x250
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
6000190a:	f242 2001 	movw	r0, #8705	; 0x2201
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
6000190e:	4970      	ldr	r1, [pc, #448]	; (60001ad0 <configure_external_ram+0x33c>)
60001910:	f8c2 1254 	str.w	r1, [r2, #596]	; 0x254
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001914:	2101      	movs	r1, #1
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001916:	f8c2 4260 	str.w	r4, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
6000191a:	f8c2 0264 	str.w	r0, [r2, #612]	; 0x264
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000191e:	485e      	ldr	r0, [pc, #376]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
60001920:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001924:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001928:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000192c:	6943      	ldr	r3, [r0, #20]
6000192e:	07da      	lsls	r2, r3, #31
60001930:	d5fc      	bpl.n	6000192c <configure_external_ram+0x198>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001932:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001934:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001936:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000193a:	4957      	ldr	r1, [pc, #348]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000193c:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
6000193e:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001942:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001946:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000194a:	694b      	ldr	r3, [r1, #20]
6000194c:	07db      	lsls	r3, r3, #31
6000194e:	d5fc      	bpl.n	6000194a <configure_external_ram+0x1b6>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001950:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001952:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001954:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001958:	4a4f      	ldr	r2, [pc, #316]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000195a:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
6000195c:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001960:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001964:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001968:	6953      	ldr	r3, [r2, #20]
6000196a:	07df      	lsls	r7, r3, #31
6000196c:	d5fc      	bpl.n	60001968 <configure_external_ram+0x1d4>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000196e:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001970:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001972:	4858      	ldr	r0, [pc, #352]	; (60001ad4 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001974:	4948      	ldr	r1, [pc, #288]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001976:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001978:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
6000197c:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001980:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001984:	694b      	ldr	r3, [r1, #20]
60001986:	07de      	lsls	r6, r3, #31
60001988:	d5fc      	bpl.n	60001984 <configure_external_ram+0x1f0>
	uint32_t id = FLEXSPI2_RFDR0;
6000198a:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
	if (flexspi2_psram_id(0) == 0x5D0D) {
6000198e:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001992:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60001994:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001996:	6148      	str	r0, [r1, #20]
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001998:	4293      	cmp	r3, r2
6000199a:	d165      	bne.n	60001a68 <configure_external_ram+0x2d4>
	FLEXSPI2_IPCR0 = addr;
6000199c:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000199e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019a2:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019a4:	483c      	ldr	r0, [pc, #240]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
600019a6:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019aa:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019ae:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019b2:	6943      	ldr	r3, [r0, #20]
600019b4:	07dd      	lsls	r5, r3, #31
600019b6:	d5fc      	bpl.n	600019b2 <configure_external_ram+0x21e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019b8:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600019ba:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019be:	2100      	movs	r1, #0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019c0:	4a35      	ldr	r2, [pc, #212]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019c2:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
600019c4:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019c8:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019cc:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019d0:	6953      	ldr	r3, [r2, #20]
600019d2:	07dc      	lsls	r4, r3, #31
600019d4:	d5fc      	bpl.n	600019d0 <configure_external_ram+0x23c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019d6:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600019d8:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019dc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019e0:	492d      	ldr	r1, [pc, #180]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019e2:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
600019e4:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019e8:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019ec:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019f0:	694b      	ldr	r3, [r1, #20]
600019f2:	07d8      	lsls	r0, r3, #31
600019f4:	d5fc      	bpl.n	600019f0 <configure_external_ram+0x25c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019f6:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600019f8:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019fc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a00:	4a25      	ldr	r2, [pc, #148]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a02:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60001a04:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a08:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a0c:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a10:	6953      	ldr	r3, [r2, #20]
60001a12:	07d9      	lsls	r1, r3, #31
60001a14:	d5fc      	bpl.n	60001a10 <configure_external_ram+0x27c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a16:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001a18:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001a1c:	482d      	ldr	r0, [pc, #180]	; (60001ad4 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a1e:	491e      	ldr	r1, [pc, #120]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a20:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001a22:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001a26:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a2a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a2e:	694b      	ldr	r3, [r1, #20]
60001a30:	07da      	lsls	r2, r3, #31
60001a32:	d5fc      	bpl.n	60001a2e <configure_external_ram+0x29a>
	uint32_t id = FLEXSPI2_RFDR0;
60001a34:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001a38:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001a3c:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60001a3e:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001a40:	6148      	str	r0, [r1, #20]
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001a42:	4293      	cmp	r3, r2
60001a44:	d050      	beq.n	60001ae8 <configure_external_ram+0x354>
60001a46:	2508      	movs	r5, #8
60001a48:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
			external_psram_size * 0x100000 -
60001a4c:	4922      	ldr	r1, [pc, #136]	; (60001ad8 <configure_external_ram+0x344>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001a4e:	2000      	movs	r0, #0
			external_psram_size * 0x100000 -
60001a50:	4b22      	ldr	r3, [pc, #136]	; (60001adc <configure_external_ram+0x348>)
			external_psram_size = 16;
60001a52:	4a23      	ldr	r2, [pc, #140]	; (60001ae0 <configure_external_ram+0x34c>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001a54:	9000      	str	r0, [sp, #0]
			external_psram_size = 16;
60001a56:	7015      	strb	r5, [r2, #0]
			external_psram_size * 0x100000 -
60001a58:	1a5a      	subs	r2, r3, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001a5a:	2301      	movs	r3, #1
60001a5c:	4821      	ldr	r0, [pc, #132]	; (60001ae4 <configure_external_ram+0x350>)
60001a5e:	4422      	add	r2, r4
60001a60:	f000 f9fa 	bl	60001e58 <__sm_set_pool_veneer>
}
60001a64:	b003      	add	sp, #12
60001a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001a68:	4b1e      	ldr	r3, [pc, #120]	; (60001ae4 <configure_external_ram+0x350>)
60001a6a:	2200      	movs	r2, #0
60001a6c:	e9c3 2200 	strd	r2, r2, [r3]
60001a70:	e9c3 2202 	strd	r2, r2, [r3, #8]
}
60001a74:	b003      	add	sp, #12
60001a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
60001a78:	401f8000 	.word	0x401f8000
60001a7c:	0001b0f9 	.word	0x0001b0f9
60001a80:	000110f9 	.word	0x000110f9
60001a84:	401f8400 	.word	0x401f8400
60001a88:	000170f9 	.word	0x000170f9
60001a8c:	400fc000 	.word	0x400fc000
60001a90:	1ffffcff 	.word	0x1ffffcff
60001a94:	a0000300 	.word	0xa0000300
60001a98:	402a4000 	.word	0x402a4000
60001a9c:	402a8000 	.word	0x402a8000
60001aa0:	ffff0012 	.word	0xffff0012
60001aa4:	00f737ff 	.word	0x00f737ff
60001aa8:	80000040 	.word	0x80000040
60001aac:	7cf0ff00 	.word	0x7cf0ff00
60001ab0:	830f00ff 	.word	0x830f00ff
60001ab4:	00020063 	.word	0x00020063
60001ab8:	5af05af0 	.word	0x5af05af0
60001abc:	402a4200 	.word	0x402a4200
60001ac0:	402a4300 	.word	0x402a4300
60001ac4:	3018049f 	.word	0x3018049f
60001ac8:	0a1806eb 	.word	0x0a1806eb
60001acc:	0a180638 	.word	0x0a180638
60001ad0:	26013206 	.word	0x26013206
60001ad4:	00030004 	.word	0x00030004
60001ad8:	70000000 	.word	0x70000000
60001adc:	70000000 	.word	0x70000000
60001ae0:	20008cdf 	.word	0x20008cdf
60001ae4:	20008c3c 	.word	0x20008c3c
	FLEXSPI2_IPCR0 = addr;
60001ae8:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001aec:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001af0:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001af2:	4808      	ldr	r0, [pc, #32]	; (60001b14 <configure_external_ram+0x380>)
	FLEXSPI2_IPCR0 = addr;
60001af4:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001af8:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001afc:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b00:	6943      	ldr	r3, [r0, #20]
60001b02:	07db      	lsls	r3, r3, #31
60001b04:	d5fc      	bpl.n	60001b00 <configure_external_ram+0x36c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b06:	2301      	movs	r3, #1
60001b08:	2510      	movs	r5, #16
60001b0a:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
60001b0e:	6143      	str	r3, [r0, #20]
			external_psram_size = 16;
60001b10:	e79c      	b.n	60001a4c <configure_external_ram+0x2b8>
60001b12:	bf00      	nop
60001b14:	402a4000 	.word	0x402a4000

60001b18 <usb_pll_start>:
{
60001b18:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001b1a:	4a15      	ldr	r2, [pc, #84]	; (60001b70 <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001b1c:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001b1e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001b22:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001b26:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001b2a:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001b2e:	f243 0042 	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001b32:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001b34:	f013 0f02 	tst.w	r3, #2
60001b38:	d10e      	bne.n	60001b58 <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001b3a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
60001b3e:	d00f      	beq.n	60001b60 <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001b40:	f413 5f80 	tst.w	r3, #4096	; 0x1000
60001b44:	d00e      	beq.n	60001b64 <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001b46:	2b00      	cmp	r3, #0
60001b48:	daf3      	bge.n	60001b32 <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001b4a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
60001b4e:	d10b      	bne.n	60001b68 <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001b50:	065b      	lsls	r3, r3, #25
60001b52:	d50b      	bpl.n	60001b6c <usb_pll_start+0x54>
}
60001b54:	bcf0      	pop	{r4, r5, r6, r7}
60001b56:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001b58:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001b5a:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001b5c:	6190      	str	r0, [r2, #24]
			continue;
60001b5e:	e7e8      	b.n	60001b32 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001b60:	6155      	str	r5, [r2, #20]
			continue;
60001b62:	e7e6      	b.n	60001b32 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001b64:	6156      	str	r6, [r2, #20]
			continue;
60001b66:	e7e4      	b.n	60001b32 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001b68:	6191      	str	r1, [r2, #24]
			continue;
60001b6a:	e7e2      	b.n	60001b32 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001b6c:	6157      	str	r7, [r2, #20]
			continue;
60001b6e:	e7e0      	b.n	60001b32 <usb_pll_start+0x1a>
60001b70:	400d8000 	.word	0x400d8000

60001b74 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001b74:	4a3f      	ldr	r2, [pc, #252]	; (60001c74 <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001b76:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001b78:	493f      	ldr	r1, [pc, #252]	; (60001c78 <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001b7a:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001b7e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001b82:	f04f 0c00 	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001b86:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 60001c7c <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001b8a:	f023 0301 	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001b8e:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 60001c80 <tempmon_init+0x10c>
{
60001b92:	b430      	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001b94:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001b98:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60001b9c:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001ba0:	4d38      	ldr	r5, [pc, #224]	; (60001c84 <tempmon_init+0x110>)
60001ba2:	b2cb      	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001ba4:	4c38      	ldr	r4, [pc, #224]	; (60001c88 <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001ba6:	4839      	ldr	r0, [pc, #228]	; (60001c8c <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001ba8:	602b      	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001baa:	ee07 3a90 	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001bae:	0d0b      	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001bb0:	f3c1 210b 	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001bb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001bb8:	ee06 3a90 	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001bbc:	ee07 1a10 	vmov	s14, r1
60001bc0:	4b33      	ldr	r3, [pc, #204]	; (60001c90 <tempmon_init+0x11c>)
60001bc2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001bc6:	6021      	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001bc8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001bcc:	4931      	ldr	r1, [pc, #196]	; (60001c94 <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bce:	ee37 6ac6 	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bd2:	ee37 5ac5 	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001bd6:	ee76 6ac7 	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001bda:	ee77 7ae5 	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bde:	ee26 6a26 	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001be2:	edc3 6a00 	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001be6:	ee25 5a26 	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001bea:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bee:	ee67 4aa6 	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001bf2:	edc0 7a00 	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bf6:	eec6 5a27 	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001bfa:	4827      	ldr	r0, [pc, #156]	; (60001c98 <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bfc:	ee85 6a27 	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c00:	eec4 6aa7 	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c04:	ee75 5a87 	vadd.f32	s11, s11, s14
60001c08:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c0c:	ee36 6a07 	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c10:	ee15 4a90 	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c14:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c18:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c1c:	ee76 7a87 	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c20:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c24:	ee16 3a10 	vmov	r3, s12
60001c28:	f8d2 4190 	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c30:	ea01 4103 	and.w	r1, r1, r3, lsl #16
60001c34:	4321      	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c36:	ee17 3a90 	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c3a:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001c3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
60001c42:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
60001c46:	430b      	orrs	r3, r1
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001c48:	4914      	ldr	r1, [pc, #80]	; (60001c9c <tempmon_init+0x128>)
60001c4a:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001c4e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
60001c52:	f043 0302 	orr.w	r3, r3, #2
60001c56:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
60001c5a:	4b11      	ldr	r3, [pc, #68]	; (60001ca0 <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001c5c:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
60001c60:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001c64:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001c68:	2201      	movs	r2, #1
}
60001c6a:	bc30      	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001c6c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
60001c70:	4770      	bx	lr
60001c72:	bf00      	nop
60001c74:	400d8100 	.word	0x400d8100
60001c78:	401f4400 	.word	0x401f4400
60001c7c:	42aa0000 	.word	0x42aa0000
60001c80:	42b40000 	.word	0x42b40000
60001c84:	20008ca4 	.word	0x20008ca4
60001c88:	20008ca0 	.word	0x20008ca0
60001c8c:	20008ca8 	.word	0x20008ca8
60001c90:	20008cac 	.word	0x20008cac
60001c94:	0fff0000 	.word	0x0fff0000
60001c98:	e000e400 	.word	0xe000e400
60001c9c:	20008400 	.word	0x20008400
60001ca0:	00001b49 	.word	0x00001b49

60001ca4 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001ca4:	4b31      	ldr	r3, [pc, #196]	; (60001d6c <usb_init+0xc8>)
60001ca6:	f640 7261 	movw	r2, #3937	; 0xf61
{
60001caa:	b510      	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001cac:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001cb0:	f240 4404 	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
60001cb4:	f000 f8e0 	bl	60001e78 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001cb8:	4a2d      	ldr	r2, [pc, #180]	; (60001d70 <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
60001cba:	492e      	ldr	r1, [pc, #184]	; (60001d74 <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001cbc:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001cc0:	482d      	ldr	r0, [pc, #180]	; (60001d78 <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001cc2:	f043 0303 	orr.w	r3, r3, #3
60001cc6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001cca:	4b2c      	ldr	r3, [pc, #176]	; (60001d7c <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
60001ccc:	f8c1 4160 	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001cd0:	6802      	ldr	r2, [r0, #0]
60001cd2:	421a      	tst	r2, r3
60001cd4:	d103      	bne.n	60001cde <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
60001cd6:	f8d1 31a8 	ldr.w	r3, [r1, #424]	; 0x1a8
60001cda:	079a      	lsls	r2, r3, #30
60001cdc:	d01b      	beq.n	60001d16 <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001cde:	4a25      	ldr	r2, [pc, #148]	; (60001d74 <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001ce0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
60001ce4:	4b24      	ldr	r3, [pc, #144]	; (60001d78 <usb_init+0xd4>)
60001ce6:	6359      	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001ce8:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001cec:	f043 0302 	orr.w	r3, r3, #2
60001cf0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001cf4:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001cf8:	079b      	lsls	r3, r3, #30
60001cfa:	d4fb      	bmi.n	60001cf4 <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001cfc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
60001d00:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001d04:	4b1c      	ldr	r3, [pc, #112]	; (60001d78 <usb_init+0xd4>)
60001d06:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001d0a:	f8c1 028c 	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001d0e:	2019      	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001d10:	639a      	str	r2, [r3, #56]	; 0x38
		delay(25);
60001d12:	f000 f8a5 	bl	60001e60 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001d16:	4a18      	ldr	r2, [pc, #96]	; (60001d78 <usb_init+0xd4>)
60001d18:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001d1c:	4c15      	ldr	r4, [pc, #84]	; (60001d74 <usb_init+0xd0>)
	USBPHY1_PWD = 0;
60001d1e:	2100      	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001d20:	6390      	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001d22:	200a      	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d24:	4b16      	ldr	r3, [pc, #88]	; (60001d80 <usb_init+0xdc>)
	USBPHY1_PWD = 0;
60001d26:	6011      	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d28:	f44f 7220 	mov.w	r2, #640	; 0x280
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001d2c:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d30:	4618      	mov	r0, r3
60001d32:	f000 f889 	bl	60001e48 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
60001d36:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d3a:	4603      	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001d3c:	f44f 0081 	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001d40:	f240 1143 	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001d44:	6018      	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001d46:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
60001d4a:	641a      	str	r2, [r3, #64]	; 0x40
60001d4c:	4b0d      	ldr	r3, [pc, #52]	; (60001d84 <usb_init+0xe0>)
60001d4e:	4a0e      	ldr	r2, [pc, #56]	; (60001d88 <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001d50:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
60001d54:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001d58:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
60001d5c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001d60:	2301      	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001d62:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
60001d66:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
60001d6a:	bd10      	pop	{r4, pc}
60001d6c:	400d8000 	.word	0x400d8000
60001d70:	400fc000 	.word	0x400fc000
60001d74:	402e0000 	.word	0x402e0000
60001d78:	400d9000 	.word	0x400d9000
60001d7c:	001e1c00 	.word	0x001e1c00
60001d80:	20000000 	.word	0x20000000
60001d84:	20008400 	.word	0x20008400
60001d88:	00001d31 	.word	0x00001d31

60001d8c <_reboot_Teensyduino_>:


FLASHMEM __attribute__((noinline)) void _reboot_Teensyduino_(void)
{
60001d8c:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60001d8e:	4b0e      	ldr	r3, [pc, #56]	; (60001dc8 <_reboot_Teensyduino_+0x3c>)
60001d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
60001d92:	079b      	lsls	r3, r3, #30
60001d94:	d400      	bmi.n	60001d98 <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
60001d96:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60001d98:	b672      	cpsid	i
		USB1_USBCMD = 0;
60001d9a:	4b0c      	ldr	r3, [pc, #48]	; (60001dcc <_reboot_Teensyduino_+0x40>)
60001d9c:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
60001d9e:	4a0c      	ldr	r2, [pc, #48]	; (60001dd0 <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
60001da0:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001da4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001da8:	490a      	ldr	r1, [pc, #40]	; (60001dd4 <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001daa:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001dae:	6411      	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001db0:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001db2:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001db6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
60001dba:	4807      	ldr	r0, [pc, #28]	; (60001dd8 <_reboot_Teensyduino_+0x4c>)
60001dbc:	4a07      	ldr	r2, [pc, #28]	; (60001ddc <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001dbe:	69db      	ldr	r3, [r3, #28]
		*p = 0xEB120000;
60001dc0:	6002      	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001dc2:	689b      	ldr	r3, [r3, #8]
60001dc4:	4798      	blx	r3
	}
	__builtin_unreachable();
60001dc6:	bf00      	nop
60001dc8:	401f4400 	.word	0x401f4400
60001dcc:	402e0000 	.word	0x402e0000
60001dd0:	400ac000 	.word	0x400ac000
60001dd4:	00200003 	.word	0x00200003
60001dd8:	20208000 	.word	0x20208000
60001ddc:	eb120000 	.word	0xeb120000

60001de0 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001de0:	4b10      	ldr	r3, [pc, #64]	; (60001e24 <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001de2:	20a0      	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001de4:	4a10      	ldr	r2, [pc, #64]	; (60001e28 <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001de6:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001de8:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
{
60001dec:	b410      	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001dee:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001df0:	f240 6437 	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001df4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001df6:	f441 7140 	orr.w	r1, r1, #768	; 0x300
60001dfa:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001dfc:	6454      	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001dfe:	6490      	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
60001e00:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001e02:	061b      	lsls	r3, r3, #24
60001e04:	d4fc      	bmi.n	60001e00 <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001e06:	4a09      	ldr	r2, [pc, #36]	; (60001e2c <analog_init+0x4c>)
60001e08:	f240 6137 	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001e0c:	23a0      	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001e0e:	6451      	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001e10:	6493      	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
60001e12:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001e14:	f013 0380 	ands.w	r3, r3, #128	; 0x80
60001e18:	d1fb      	bne.n	60001e12 <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
60001e1a:	4a05      	ldr	r2, [pc, #20]	; (60001e30 <analog_init+0x50>)
60001e1c:	7013      	strb	r3, [r2, #0]
}
60001e1e:	f85d 4b04 	ldr.w	r4, [sp], #4
60001e22:	4770      	bx	lr
60001e24:	400fc000 	.word	0x400fc000
60001e28:	400c4000 	.word	0x400c4000
60001e2c:	400c8000 	.word	0x400c8000
60001e30:	20008cde 	.word	0x20008cde

60001e34 <_init>:
60001e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60001e36:	bf00      	nop
60001e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
60001e3a:	bc08      	pop	{r3}
60001e3c:	469e      	mov	lr, r3
60001e3e:	4770      	bx	lr

60001e40 <____libc_init_array_veneer>:
60001e40:	f85f f000 	ldr.w	pc, [pc]	; 60001e44 <____libc_init_array_veneer+0x4>
60001e44:	00005465 	.word	0x00005465

60001e48 <__memset_veneer>:
60001e48:	f85f f000 	ldr.w	pc, [pc]	; 60001e4c <__memset_veneer+0x4>
60001e4c:	000051ed 	.word	0x000051ed

60001e50 <__pwm_init_veneer>:
60001e50:	f85f f000 	ldr.w	pc, [pc]	; 60001e54 <__pwm_init_veneer+0x4>
60001e54:	0000186d 	.word	0x0000186d

60001e58 <__sm_set_pool_veneer>:
60001e58:	f85f f000 	ldr.w	pc, [pc]	; 60001e5c <__sm_set_pool_veneer+0x4>
60001e5c:	00003105 	.word	0x00003105

60001e60 <__delay_veneer>:
60001e60:	f85f f000 	ldr.w	pc, [pc]	; 60001e64 <__delay_veneer+0x4>
60001e64:	000012dd 	.word	0x000012dd

60001e68 <__set_arm_clock_veneer>:
60001e68:	f85f f000 	ldr.w	pc, [pc]	; 60001e6c <__set_arm_clock_veneer+0x4>
60001e6c:	00002da5 	.word	0x00002da5

60001e70 <__main_veneer>:
60001e70:	f85f f000 	ldr.w	pc, [pc]	; 60001e74 <__main_veneer+0x4>
60001e74:	00001649 	.word	0x00001649

60001e78 <__usb_init_serialnumber_veneer>:
60001e78:	f85f f000 	ldr.w	pc, [pc]	; 60001e7c <__usb_init_serialnumber_veneer+0x4>
60001e7c:	000024a1 	.word	0x000024a1

60001e80 <__frame_dummy_init_array_entry>:
60001e80:	000000e5                                ....

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <flash_sector_not_erased>:
{
  int error = 0;
  uint32_t address = start;
  while (address < (start + size) && error == 0) { 
    if ((address & (FLASH_SECTOR_SIZE - 1)) == 0) {
      if (flash_sector_not_erased( address )) {
      20:	f420 607f 	bic.w	r0, r0, #4080	; 0xff0
      24:	f020 000f 	bic.w	r0, r0, #15
        #elif defined(KINETISK) || defined(KINETISL)
          error = flash_erase_sector( address, 0 );
	#endif
      }
    }
    address += FLASH_SECTOR_SIZE;
      28:	f500 5280 	add.w	r2, r0, #4096	; 0x1000
          eepromemu_flash_erase_sector( (void*)address );
      2c:	6803      	ldr	r3, [r0, #0]
      2e:	3004      	adds	r0, #4
  while (address < (start + size) && error == 0) { 
      30:	3301      	adds	r3, #1
      32:	d103      	bne.n	3c <_teensy_model_identifier+0x17>
  }
  return( error );
}
      34:	4290      	cmp	r0, r2
      36:	d1f9      	bne.n	2c <_teensy_model_identifier+0x7>
	SNVS_LPSRTCMR = t >> 17;
	// start the SRTC
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
	// start the RTC and sync it to the SRTC
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
      38:	2000      	movs	r0, #0
      3a:	4770      	bx	lr
      3c:	2001      	movs	r0, #1
      3e:	4770      	bx	lr

00000040 <flash_move>:
}
      40:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
      44:	4606      	mov	r6, r0
      46:	460d      	mov	r5, r1
		return 0;
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
      48:	4690      	mov	r8, r2
      4a:	2400      	movs	r4, #0
      4c:	4544      	cmp	r4, r8
      4e:	d214      	bcs.n	7a <flash_move+0x3a>
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
}
      50:	19a7      	adds	r7, r4, r6
      52:	f3c7 030b 	ubfx	r3, r7, #0, #12
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      56:	b933      	cbnz	r3, 66 <flash_move+0x26>
      58:	4638      	mov	r0, r7
      5a:	f7ff ffe1 	bl	20 <flash_sector_not_erased>
}
      5e:	b110      	cbz	r0, 66 <flash_move+0x26>
      60:	4638      	mov	r0, r7
      62:	f001 fa95 	bl	1590 <eepromemu_flash_erase_sector>
      66:	2204      	movs	r2, #4
      68:	5963      	ldr	r3, [r4, r5]
      6a:	4638      	mov	r0, r7
    offset += FLASH_WRITE_SIZE;
      6c:	3404      	adds	r4, #4
      eepromemu_flash_write( (void*)addr, &value, 4 );
      6e:	eb0d 0102 	add.w	r1, sp, r2
      uint32_t value = *(uint32_t *)(src + offset);     
      72:	9301      	str	r3, [sp, #4]
      eepromemu_flash_write( (void*)addr, &value, 4 );
      74:	f001 fa16 	bl	14a4 <eepromemu_flash_write>
    offset += FLASH_WRITE_SIZE;
      78:	e7e8      	b.n	4c <flash_move+0xc>
  if (IN_FLASH(src)) {
      7a:	f105 4520 	add.w	r5, r5, #2684354560	; 0xa0000000
      7e:	f5b5 0f00 	cmp.w	r5, #8388608	; 0x800000
      82:	d208      	bcs.n	96 <flash_move+0x56>
    while (offset < (FLASH_SIZE - FLASH_RESERVE) && error == 0) {
      84:	4d0c      	ldr	r5, [pc, #48]	; (b8 <flash_move+0x78>)
      86:	e004      	b.n	92 <flash_move+0x52>
      addr = dst + offset;
      88:	19a1      	adds	r1, r4, r6
      if ((addr & (FLASH_SECTOR_SIZE - 1)) == 0) {
      8a:	f3c1 030b 	ubfx	r3, r1, #0, #12
      8e:	b143      	cbz	r3, a2 <flash_move+0x62>
      offset += FLASH_WRITE_SIZE;
      90:	3404      	adds	r4, #4
    while (offset < (FLASH_SIZE - FLASH_RESERVE) && error == 0) {
      92:	42ac      	cmp	r4, r5
      94:	d3f8      	bcc.n	88 <flash_move+0x48>
  REBOOT;
      96:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
      9a:	4a08      	ldr	r2, [pc, #32]	; (bc <flash_move+0x7c>)
      9c:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
      a0:	e008      	b.n	b4 <flash_move+0x74>
        if (flash_sector_not_erased( addr )) {
      a2:	4608      	mov	r0, r1
      a4:	f7ff ffbc 	bl	20 <flash_sector_not_erased>
      a8:	2800      	cmp	r0, #0
      aa:	d0f1      	beq.n	90 <flash_move+0x50>
            eepromemu_flash_erase_sector( (void*)addr );
      ac:	4608      	mov	r0, r1
      ae:	f001 fa6f 	bl	1590 <eepromemu_flash_erase_sector>
      b2:	e7ed      	b.n	90 <flash_move+0x50>
  for (;;) {}
      b4:	e7fe      	b.n	b4 <flash_move+0x74>
      b6:	bf00      	nop
      b8:	007fc000 	.word	0x007fc000
      bc:	05fa0004 	.word	0x05fa0004

000000c0 <register_tm_clones>:
void HardwareSerialIMXRT::setRX(uint8_t pin)
{
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
	if (pin != hardware->rx_pins[rx_pin_index_].pin) {
		for (uint8_t rx_pin_new_index = 0; rx_pin_new_index < cnt_rx_pins; rx_pin_new_index++) {
			if (pin == hardware->rx_pins[rx_pin_new_index].pin) {
      c0:	4805      	ldr	r0, [pc, #20]	; (d8 <register_tm_clones+0x18>)
      c2:	4b06      	ldr	r3, [pc, #24]	; (dc <register_tm_clones+0x1c>)
      c4:	1a1b      	subs	r3, r3, r0
      c6:	0fd9      	lsrs	r1, r3, #31
      c8:	eb01 01a3 	add.w	r1, r1, r3, asr #2
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
	p->SM[submodule].VAL1 = newdiv - 1;
	p->SM[submodule].VAL0 = (p->SM[submodule].VAL0 * newdiv) / olddiv;
	p->SM[submodule].VAL3 = (p->SM[submodule].VAL3 * newdiv) / olddiv;
	p->SM[submodule].VAL5 = (p->SM[submodule].VAL5 * newdiv) / olddiv;
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
      cc:	1049      	asrs	r1, r1, #1
      ce:	d002      	beq.n	d6 <register_tm_clones+0x16>
}
      d0:	4b03      	ldr	r3, [pc, #12]	; (e0 <register_tm_clones+0x20>)
	while (newdiv > 65535 && prescale < 7) {
      d2:	b103      	cbz	r3, d6 <register_tm_clones+0x16>
      d4:	4718      	bx	r3
      d6:	4770      	bx	lr
      d8:	200086c0 	.word	0x200086c0
		buf[offset] = data;
		p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		eepromemu_flash_erase_sector(p);
		index = 0;
		for (i=0; i < 256; i++) {
			if (buf[i] != 0xFF) {
      dc:	200086c0 	.word	0x200086c0
				// TODO: combining these to larger write
				// would (probably) be more efficient
				uint16_t newval = i | (buf[i] << 8);
      e0:	00000000 	.word	0x00000000

000000e4 <frame_dummy>:
      e4:	b508      	push	{r3, lr}
      e6:	4b05      	ldr	r3, [pc, #20]	; (fc <frame_dummy+0x18>)
				eepromemu_flash_write(p + index, &newval, 2);
      e8:	b11b      	cbz	r3, f2 <frame_dummy+0xe>
      ea:	4905      	ldr	r1, [pc, #20]	; (100 <frame_dummy+0x1c>)
		for (i=0; i < 256; i++) {
      ec:	4805      	ldr	r0, [pc, #20]	; (104 <frame_dummy+0x20>)
      ee:	f3af 8000 	nop.w
				index = index + 1;
			}
		}
		sector_index[sector] = index;
      f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	}
}
      f6:	f7ff bfe3 	b.w	c0 <register_tm_clones>
		uint16_t newdata = offset | (data << 8);
      fa:	bf00      	nop
      fc:	00000000 	.word	0x00000000
		eepromemu_flash_write(end, &newdata, 2);
     100:	20008c50 	.word	0x20008c50
		uint16_t newdata = offset | (data << 8);
     104:	60019000 	.word	0x60019000

00000108 <usb_serial_class::available()>:
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
	// Returns the number of bytes which have been received from your PC and
	// can be fetched using Serial.read() or Serial.readBytes().
        virtual int available() { return usb_serial_available(); }
     108:	f002 bcc4 	b.w	2a94 <usb_serial_available>

0000010c <usb_serial_class::read()>:
	// Reads the next received byte, or returns -1 if nothing has been received
	// from your PC.
        virtual int read() { return usb_serial_getchar(); }
     10c:	f002 bd06 	b.w	2b1c <usb_serial_getchar>

00000110 <hex_info_reset(hex_info_t*, char*)>:
}
     110:	2300      	movs	r3, #0
     112:	f04f 32ff 	mov.w	r2, #4294967295
	if (!initialized) eeprom_initialize();
     116:	e9c0 1300 	strd	r1, r3, [r0]
     11a:	e9c0 3302 	strd	r3, r3, [r0, #8]
	uint8_t olddata=0xFF;
     11e:	e9c0 3204 	strd	r3, r2, [r0, #16]
     122:	e9c0 3306 	strd	r3, r3, [r0, #24]
     126:	6203      	str	r3, [r0, #32]
     128:	4770      	bx	lr
     12a:	bf00      	nop

0000012c <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)>:
     12c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     130:	2400      	movs	r4, #0
     132:	b084      	sub	sp, #16
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
	mask = p->mask;
     134:	601c      	str	r4, [r3, #0]
	if (pinmode & mask) {
     136:	f890 c000 	ldrb.w	ip, [r0]
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     13a:	f1bc 0f3a 	cmp.w	ip, #58	; 0x3a
     13e:	d111      	bne.n	164 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0x38>
     140:	4605      	mov	r5, r0
     142:	461f      	mov	r7, r3
     144:	4688      	mov	r8, r1
     146:	4616      	mov	r6, r2
     148:	f005 fb3a 	bl	57c0 <strlen>
     14c:	280a      	cmp	r0, #10
     14e:	d803      	bhi.n	158 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0x2c>
     150:	4620      	mov	r0, r4
     152:	b004      	add	sp, #16
     154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     158:	aa01      	add	r2, sp, #4
     15a:	4929      	ldr	r1, [pc, #164]	; (200 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0xd4>)
			remainder -= n; 
		}
		count += write(buf, count);
	}
	return count;
}
     15c:	1c68      	adds	r0, r5, #1
     15e:	f004 ff1d 	bl	4f9c <sscanf>
     162:	b918      	cbnz	r0, 16c <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0x40>
  out->printf("calling flash_move() to load new firmware...\n");
  out->flush();

  flash_move(FLASH_BASE_ADDR, buffer_addr, hex.max - hex.min);
  REBOOT; // should not return
}
     164:	2000      	movs	r0, #0
      out->printf("abort - invalid hex code %u\n", hex.code);
     166:	b004      	add	sp, #16
     168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     16c:	4628      	mov	r0, r5
     16e:	f005 fb27 	bl	57c0 <strlen>
}
     172:	9b01      	ldr	r3, [sp, #4]
     174:	005b      	lsls	r3, r3, #1
        out->printf("abort - max address %08lX too large\n", (unsigned long)hex.max);
     176:	330b      	adds	r3, #11
     178:	4298      	cmp	r0, r3
     17a:	d3f3      	bcc.n	164 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0x38>
     17c:	4632      	mov	r2, r6
     17e:	4921      	ldr	r1, [pc, #132]	; (204 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0xd8>)
}
     180:	1ce8      	adds	r0, r5, #3
     182:	f004 ff0b 	bl	4f9c <sscanf>
    out->printf("abort - new code missing target ID %s\n", FLASH_ID);
     186:	2800      	cmp	r0, #0
     188:	d0ec      	beq.n	164 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0x38>
}
     18a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
     18c:	1de8      	adds	r0, r5, #7
     18e:	491c      	ldr	r1, [pc, #112]	; (200 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0xd4>)
    out->printf("abort - new code missing target ID %s\n", FLASH_ID);
     190:	f004 ff04 	bl	4f9c <sscanf>
     194:	2800      	cmp	r0, #0
     196:	d0e5      	beq.n	164 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0x38>
     198:	9a0a      	ldr	r2, [sp, #40]	; 0x28
     19a:	3509      	adds	r5, #9
     19c:	9901      	ldr	r1, [sp, #4]
     19e:	7814      	ldrb	r4, [r2, #0]
     1a0:	6833      	ldr	r3, [r6, #0]
     1a2:	fa54 f481 	uxtab	r4, r4, r1
     1a6:	4e16      	ldr	r6, [pc, #88]	; (200 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0xd4>)
     1a8:	fa54 f483 	uxtab	r4, r4, r3
     1ac:	f3c3 2307 	ubfx	r3, r3, #8, #8
     1b0:	441c      	add	r4, r3
     1b2:	683b      	ldr	r3, [r7, #0]
     1b4:	e012      	b.n	1dc <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0xb0>
     1b6:	4631      	mov	r1, r6
     1b8:	3502      	adds	r5, #2
     1ba:	f004 feef 	bl	4f9c <sscanf>
     1be:	2800      	cmp	r0, #0
     1c0:	d0d0      	beq.n	164 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0x38>
     1c2:	683b      	ldr	r3, [r7, #0]
     1c4:	9a03      	ldr	r2, [sp, #12]
     1c6:	f808 2003 	strb.w	r2, [r8, r3]
     1ca:	683b      	ldr	r3, [r7, #0]
     1cc:	f818 2003 	ldrb.w	r2, [r8, r3]
    (*num)++;
     1d0:	3301      	adds	r3, #1
    if (*num >= 256) return 0;
     1d2:	2bff      	cmp	r3, #255	; 0xff
    sum += (unsigned)(bytes[*num] & 255);
     1d4:	4414      	add	r4, r2
    (*num)++;
     1d6:	603b      	str	r3, [r7, #0]
    if (*num >= 256) return 0;
     1d8:	d8c4      	bhi.n	164 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0x38>
  while (*num != len) {
     1da:	9901      	ldr	r1, [sp, #4]
     1dc:	428b      	cmp	r3, r1
    if (!sscanf(ptr, "%02x", &temp)) return 0;
     1de:	4628      	mov	r0, r5
     1e0:	aa03      	add	r2, sp, #12
  while (*num != len) {
     1e2:	d1e8      	bne.n	1b6 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0x8a>
  if (!sscanf(ptr, "%02x", &cksum)) return 0;
     1e4:	aa02      	add	r2, sp, #8
     1e6:	4906      	ldr	r1, [pc, #24]	; (200 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0xd4>)
     1e8:	f004 fed8 	bl	4f9c <sscanf>
     1ec:	2800      	cmp	r0, #0
     1ee:	d0b9      	beq.n	164 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0x38>
  if (((sum & 255) + (cksum & 255)) & 255) return 0; // checksum error
     1f0:	9b02      	ldr	r3, [sp, #8]
     1f2:	441c      	add	r4, r3
     1f4:	b2e4      	uxtb	r4, r4
     1f6:	fab4 f084 	clz	r0, r4
     1fa:	0940      	lsrs	r0, r0, #5
     1fc:	e7b3      	b.n	166 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0x3a>
     1fe:	bf00      	nop
     200:	20000398 	.word	0x20000398
     204:	200003a0 	.word	0x200003a0

00000208 <process_hex_record(hex_info_t*)>:
  if (hex->code == 0u) { // data
     208:	6882      	ldr	r2, [r0, #8]
int process_hex_record(hex_info_t* hex) {
     20a:	4603      	mov	r3, r0
  if (hex->code == 0u) { // data
     20c:	b992      	cbnz	r2, 234 <process_hex_record(hex_info_t*)+0x2c>
    uint32_t end = hex->base + hex->addr + hex->num;
     20e:	e9d0 1203 	ldrd	r1, r2, [r0, #12]
int process_hex_record(hex_info_t* hex) {
     212:	b410      	push	{r4}
    uint32_t end = hex->base + hex->addr + hex->num;
     214:	685c      	ldr	r4, [r3, #4]
    if (end > hex->max) hex->max = end;
     216:	6980      	ldr	r0, [r0, #24]
    uint32_t end = hex->base + hex->addr + hex->num;
     218:	4422      	add	r2, r4
     21a:	4411      	add	r1, r2
    if (end > hex->max) hex->max = end;
     21c:	4288      	cmp	r0, r1
  return 0;
     21e:	f04f 0000 	mov.w	r0, #0
    if (end > hex->max) hex->max = end;
     222:	bf38      	it	cc
     224:	6199      	strcc	r1, [r3, #24]
    if (beg < hex->min) hex->min = beg;
     226:	6959      	ldr	r1, [r3, #20]
     228:	428a      	cmp	r2, r1
     22a:	d200      	bcs.n	22e <process_hex_record(hex_info_t*)+0x26>
     22c:	615a      	str	r2, [r3, #20]
}
     22e:	f85d 4b04 	ldr.w	r4, [sp], #4
     232:	4770      	bx	lr
  } else if (hex->code == 1u) { // EOF
     234:	3a01      	subs	r2, #1
     236:	2a04      	cmp	r2, #4
     238:	d81d      	bhi.n	276 <process_hex_record(hex_info_t*)+0x6e>
     23a:	e8df f002 	tbb	[pc, r2]
     23e:	0d09      	.short	0x0d09
     240:	151c      	.short	0x151c
     242:	03          	.byte	0x03
     243:	00          	.byte	0x00
    hex->base =  ((uint8_t)hex->data[0] << 24) |
     244:	6802      	ldr	r2, [r0, #0]
  return 0;
     246:	2000      	movs	r0, #0
     248:	6812      	ldr	r2, [r2, #0]
     24a:	ba12      	rev	r2, r2
    hex->base =  ((uint8_t)hex->data[0] << 24) |
     24c:	611a      	str	r2, [r3, #16]
     24e:	4770      	bx	lr
    hex->eof = 1;
     250:	2201      	movs	r2, #1
  return 0;
     252:	2000      	movs	r0, #0
    hex->eof = 1;
     254:	61da      	str	r2, [r3, #28]
     256:	4770      	bx	lr
    hex->base = (((uint8_t)hex->data[0] << 8) | (uint8_t)hex->data[1]) << 4;
     258:	6802      	ldr	r2, [r0, #0]
  return 0;
     25a:	2000      	movs	r0, #0
    hex->base = (((uint8_t)hex->data[0] << 8) | (uint8_t)hex->data[1]) << 4;
     25c:	8812      	ldrh	r2, [r2, #0]
     25e:	ba52      	rev16	r2, r2
     260:	b292      	uxth	r2, r2
     262:	0112      	lsls	r2, r2, #4
     264:	611a      	str	r2, [r3, #16]
     266:	4770      	bx	lr
    hex->base = (((uint8_t)hex->data[0] << 8) | (uint8_t)hex->data[1]) << 16;
     268:	6802      	ldr	r2, [r0, #0]
  return 0;
     26a:	2000      	movs	r0, #0
    hex->base = (((uint8_t)hex->data[0] << 8) | (uint8_t)hex->data[1]) << 16;
     26c:	8812      	ldrh	r2, [r2, #0]
     26e:	ba52      	rev16	r2, r2
     270:	0412      	lsls	r2, r2, #16
     272:	611a      	str	r2, [r3, #16]
     274:	4770      	bx	lr
  if (hex->code == 0u) { // data
     276:	2001      	movs	r0, #1
}
     278:	4770      	bx	lr

			int newPrecision = precision;
			int newDecimalPoint;

			// shift decimal point
			while (newPrecision > 0) {
     27a:	bf00      	nop

0000027c <firmware_buffer_init>:
  *buffer_addr = FLASH_BASE_ADDR + FLASH_SIZE - FLASH_RESERVE - 4;
     27c:	4a13      	ldr	r2, [pc, #76]	; (2cc <firmware_buffer_init+0x50>)
  while (*buffer_addr > 0 && *((uint32_t *)*buffer_addr) == 0xFFFFFFFF)
     27e:	4613      	mov	r3, r2
  *buffer_addr = FLASH_BASE_ADDR + FLASH_SIZE - FLASH_RESERVE - 4;
     280:	6002      	str	r2, [r0, #0]
  while (*buffer_addr > 0 && *((uint32_t *)*buffer_addr) == 0xFFFFFFFF)
     282:	e002      	b.n	28a <firmware_buffer_init+0xe>
    *buffer_addr -= 4;
     284:	3b04      	subs	r3, #4
     286:	6003      	str	r3, [r0, #0]
  while (*buffer_addr > 0 && *((uint32_t *)*buffer_addr) == 0xFFFFFFFF)
     288:	b163      	cbz	r3, 2a4 <firmware_buffer_init+0x28>
     28a:	681a      	ldr	r2, [r3, #0]
     28c:	3201      	adds	r2, #1
     28e:	d0f9      	beq.n	284 <firmware_buffer_init+0x8>
  *buffer_addr += 4; // first address above code
     290:	3304      	adds	r3, #4
  if ((*buffer_addr % FLASH_SECTOR_SIZE) > 0)
     292:	f3c3 020b 	ubfx	r2, r3, #0, #12
  *buffer_addr += 4; // first address above code
     296:	6003      	str	r3, [r0, #0]
  if ((*buffer_addr % FLASH_SECTOR_SIZE) > 0)
     298:	b95a      	cbnz	r2, 2b2 <firmware_buffer_init+0x36>
  *buffer_size = FLASH_BASE_ADDR - *buffer_addr + FLASH_SIZE - FLASH_RESERVE;
     29a:	4a0d      	ldr	r2, [pc, #52]	; (2d0 <firmware_buffer_init+0x54>)
}
     29c:	2001      	movs	r0, #1
  *buffer_size = FLASH_BASE_ADDR - *buffer_addr + FLASH_SIZE - FLASH_RESERVE;
     29e:	1ad2      	subs	r2, r2, r3
     2a0:	600a      	str	r2, [r1, #0]
}
     2a2:	4770      	bx	lr
     2a4:	4a0b      	ldr	r2, [pc, #44]	; (2d4 <firmware_buffer_init+0x58>)
     2a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    *buffer_addr += FLASH_SECTOR_SIZE - (*buffer_addr % FLASH_SECTOR_SIZE);
     2aa:	6003      	str	r3, [r0, #0]
}
     2ac:	2001      	movs	r0, #1
  *buffer_size = FLASH_BASE_ADDR - *buffer_addr + FLASH_SIZE - FLASH_RESERVE;
     2ae:	600a      	str	r2, [r1, #0]
}
     2b0:	4770      	bx	lr
{
     2b2:	b410      	push	{r4}
    *buffer_addr += FLASH_SECTOR_SIZE - (*buffer_addr % FLASH_SECTOR_SIZE);
     2b4:	4c08      	ldr	r4, [pc, #32]	; (2d8 <firmware_buffer_init+0x5c>)
  *buffer_size = FLASH_BASE_ADDR - *buffer_addr + FLASH_SIZE - FLASH_RESERVE;
     2b6:	4a07      	ldr	r2, [pc, #28]	; (2d4 <firmware_buffer_init+0x58>)
    *buffer_addr += FLASH_SECTOR_SIZE - (*buffer_addr % FLASH_SECTOR_SIZE);
     2b8:	401c      	ands	r4, r3
     2ba:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
  *buffer_size = FLASH_BASE_ADDR - *buffer_addr + FLASH_SIZE - FLASH_RESERVE;
     2be:	1b12      	subs	r2, r2, r4
}
     2c0:	f85d 4b04 	ldr.w	r4, [sp], #4
    *buffer_addr += FLASH_SECTOR_SIZE - (*buffer_addr % FLASH_SECTOR_SIZE);
     2c4:	6003      	str	r3, [r0, #0]
}
     2c6:	2001      	movs	r0, #1
  *buffer_size = FLASH_BASE_ADDR - *buffer_addr + FLASH_SIZE - FLASH_RESERVE;
     2c8:	600a      	str	r2, [r1, #0]
}
     2ca:	4770      	bx	lr
     2cc:	607fbffc 	.word	0x607fbffc
     2d0:	607fc000 	.word	0x607fc000
     2d4:	607fb000 	.word	0x607fb000
     2d8:	fffff000 	.word	0xfffff000

000002dc <firmware_buffer_free>:
{
     2dc:	b538      	push	{r3, r4, r5, lr}
  if (IN_FLASH(buffer_addr))
     2de:	f100 4320 	add.w	r3, r0, #2684354560	; 0xa0000000
     2e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
     2e6:	d215      	bcs.n	314 <firmware_buffer_free+0x38>
  while (address < (start + size) && error == 0) { 
     2e8:	1845      	adds	r5, r0, r1
     2ea:	4604      	mov	r4, r0
     2ec:	42a8      	cmp	r0, r5
     2ee:	d307      	bcc.n	300 <firmware_buffer_free+0x24>
}
     2f0:	bd38      	pop	{r3, r4, r5, pc}
          eepromemu_flash_erase_sector( (void*)address );
     2f2:	4620      	mov	r0, r4
     2f4:	f001 f94c 	bl	1590 <eepromemu_flash_erase_sector>
    address += FLASH_SECTOR_SIZE;
     2f8:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
  while (address < (start + size) && error == 0) { 
     2fc:	42ac      	cmp	r4, r5
     2fe:	d2f7      	bcs.n	2f0 <firmware_buffer_free+0x14>
    if ((address & (FLASH_SECTOR_SIZE - 1)) == 0) {
     300:	f3c4 030b 	ubfx	r3, r4, #0, #12
      if (flash_sector_not_erased( address )) {
     304:	4620      	mov	r0, r4
    if ((address & (FLASH_SECTOR_SIZE - 1)) == 0) {
     306:	2b00      	cmp	r3, #0
     308:	d1f6      	bne.n	2f8 <firmware_buffer_free+0x1c>
      if (flash_sector_not_erased( address )) {
     30a:	f7ff fe89 	bl	20 <flash_sector_not_erased>
     30e:	2800      	cmp	r0, #0
     310:	d0f2      	beq.n	2f8 <firmware_buffer_free+0x1c>
     312:	e7ee      	b.n	2f2 <firmware_buffer_free+0x16>
}
     314:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    free( (void*)buffer_addr );
     318:	f003 b8bc 	b.w	3494 <free>

0000031c <check_flash_id>:
  for (uint32_t i = buffer; i < buffer + size - strlen(FLASH_ID); ++i) {
     31c:	390b      	subs	r1, #11
{
     31e:	b570      	push	{r4, r5, r6, lr}
  for (uint32_t i = buffer; i < buffer + size - strlen(FLASH_ID); ++i) {
     320:	180d      	adds	r5, r1, r0
     322:	42a8      	cmp	r0, r5
     324:	d20e      	bcs.n	344 <check_flash_id+0x28>
     326:	4604      	mov	r4, r0
    if (strncmp((char *)i, FLASH_ID, strlen(FLASH_ID)) == 0)
     328:	4e07      	ldr	r6, [pc, #28]	; (348 <check_flash_id+0x2c>)
     32a:	e001      	b.n	330 <check_flash_id+0x14>
  for (uint32_t i = buffer; i < buffer + size - strlen(FLASH_ID); ++i) {
     32c:	42ac      	cmp	r4, r5
     32e:	d009      	beq.n	344 <check_flash_id+0x28>
    if (strncmp((char *)i, FLASH_ID, strlen(FLASH_ID)) == 0)
     330:	4620      	mov	r0, r4
     332:	220b      	movs	r2, #11
     334:	4631      	mov	r1, r6
  for (uint32_t i = buffer; i < buffer + size - strlen(FLASH_ID); ++i) {
     336:	3401      	adds	r4, #1
    if (strncmp((char *)i, FLASH_ID, strlen(FLASH_ID)) == 0)
     338:	f004 ffaa 	bl	5290 <strncmp>
     33c:	2800      	cmp	r0, #0
     33e:	d1f5      	bne.n	32c <check_flash_id+0x10>
      return 1;
     340:	2001      	movs	r0, #1
}
     342:	bd70      	pop	{r4, r5, r6, pc}
  return 0;
     344:	2000      	movs	r0, #0
}
     346:	bd70      	pop	{r4, r5, r6, pc}
     348:	200058cc 	.word	0x200058cc

0000034c <flash_write_block>:

//******************************************************************************
// take a 32-bit aligned array of 32-bit values and write it to erased flash
//******************************************************************************
int flash_write_block( uint32_t addr, char *data, uint32_t count )
{
     34c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  static uint32_t next_addr = 0;			// expected address
  
  int ret = 0;						// return value
  uint32_t data_i = 0;					// index to data array

  if ((addr % 4) != 0 || (count % 4) != 0) {		// if not 32-bit aligned
     350:	ea40 0302 	orr.w	r3, r0, r2
     354:	079b      	lsls	r3, r3, #30
     356:	d002      	beq.n	35e <flash_write_block+0x12>
    return 1;	// "flash_block align error\n"		//   return error code 1
     358:	2001      	movs	r0, #1
    }
    buf_count = 0;					//   re-init buf count
    addr += FLASH_WRITE_SIZE;				//   advance address
  }  
  return 0;						// return success
}
     35a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (buf_count > 0 && addr != next_addr) {		// if unexpected address   
     35e:	4f15      	ldr	r7, [pc, #84]	; (3b4 <flash_write_block+0x68>)
     360:	4c15      	ldr	r4, [pc, #84]	; (3b8 <flash_write_block+0x6c>)
     362:	683b      	ldr	r3, [r7, #0]
     364:	b113      	cbz	r3, 36c <flash_write_block+0x20>
     366:	6825      	ldr	r5, [r4, #0]
     368:	4285      	cmp	r5, r0
     36a:	d120      	bne.n	3ae <flash_write_block+0x62>
  next_addr = addr + count;				//   compute next address
     36c:	1885      	adds	r5, r0, r2
     36e:	6025      	str	r5, [r4, #0]
  addr -= buf_count;					//   address of data[0]
     370:	1ac5      	subs	r5, r0, r3
  while (data_i < count) {				// while more data
     372:	b1ca      	cbz	r2, 3a8 <flash_write_block+0x5c>
     374:	1e4c      	subs	r4, r1, #1
     376:	f8df 8044 	ldr.w	r8, [pc, #68]	; 3bc <flash_write_block+0x70>
    buf_count = 0;					//   re-init buf count
     37a:	f04f 0900 	mov.w	r9, #0
     37e:	18a6      	adds	r6, r4, r2
     380:	e000      	b.n	384 <flash_write_block+0x38>
    ((char*)&buf)[buf_count++] = data[data_i++];	//   copy a byte to buf
     382:	683b      	ldr	r3, [r7, #0]
     384:	1c59      	adds	r1, r3, #1
     386:	f814 cf01 	ldrb.w	ip, [r4, #1]!
      eepromemu_flash_write((void*)addr,(void*)&buf,4);	//     flash_write()
     38a:	4628      	mov	r0, r5
     38c:	2204      	movs	r2, #4
    if (buf_count < FLASH_WRITE_SIZE) {			//   if buf not complete
     38e:	2903      	cmp	r1, #3
    ((char*)&buf)[buf_count++] = data[data_i++];	//   copy a byte to buf
     390:	6039      	str	r1, [r7, #0]
     392:	f808 c003 	strb.w	ip, [r8, r3]
      eepromemu_flash_write((void*)addr,(void*)&buf,4);	//     flash_write()
     396:	4641      	mov	r1, r8
    if (buf_count < FLASH_WRITE_SIZE) {			//   if buf not complete
     398:	d904      	bls.n	3a4 <flash_write_block+0x58>
    addr += FLASH_WRITE_SIZE;				//   advance address
     39a:	4415      	add	r5, r2
      eepromemu_flash_write((void*)addr,(void*)&buf,4);	//     flash_write()
     39c:	f001 f882 	bl	14a4 <eepromemu_flash_write>
    buf_count = 0;					//   re-init buf count
     3a0:	f8c7 9000 	str.w	r9, [r7]
  while (data_i < count) {				// while more data
     3a4:	42b4      	cmp	r4, r6
     3a6:	d1ec      	bne.n	382 <flash_write_block+0x36>
  return 0;						// return success
     3a8:	2000      	movs	r0, #0
}
     3aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return 2;	// "unexpected address\n"		//   return error code 2   
     3ae:	2002      	movs	r0, #2
     3b0:	e7d3      	b.n	35a <flash_write_block+0xe>
     3b2:	bf00      	nop
     3b4:	20008c24 	.word	0x20008c24
     3b8:	20008c4c 	.word	0x20008c4c
     3bc:	20008c20 	.word	0x20008c20

000003c0 <OtaConsole::printf(char const*, ...)>:
    s->print(msg);
    s->print("\r\n");
  }

  // Print formatted line (like printf) with prefix and CRLF
  inline void printf(const char* fmt, ...) {
     3c0:	b40f      	push	{r0, r1, r2, r3}
    if (!enabled || !s) return;
     3c2:	4b15      	ldr	r3, [pc, #84]	; (418 <OtaConsole::printf(char const*, ...)+0x58>)
     3c4:	781b      	ldrb	r3, [r3, #0]
  inline void printf(const char* fmt, ...) {
     3c6:	b530      	push	{r4, r5, lr}
     3c8:	b0b3      	sub	sp, #204	; 0xcc
    if (!enabled || !s) return;
     3ca:	b1fb      	cbz	r3, 40c <OtaConsole::printf(char const*, ...)+0x4c>
     3cc:	4c13      	ldr	r4, [pc, #76]	; (41c <OtaConsole::printf(char const*, ...)+0x5c>)
     3ce:	6823      	ldr	r3, [r4, #0]
     3d0:	b1e3      	cbz	r3, 40c <OtaConsole::printf(char const*, ...)+0x4c>
    char buf[192];
    va_list ap;
    va_start(ap, fmt);
     3d2:	ab37      	add	r3, sp, #220	; 0xdc
    vsnprintf(buf, sizeof(buf), fmt, ap);
     3d4:	9a36      	ldr	r2, [sp, #216]	; 0xd8
     3d6:	21c0      	movs	r1, #192	; 0xc0
     3d8:	a802      	add	r0, sp, #8
    va_start(ap, fmt);
     3da:	9301      	str	r3, [sp, #4]
    vsnprintf(buf, sizeof(buf), fmt, ap);
     3dc:	f004 fe52 	bl	5084 <vsnprintf>
    va_end(ap);
    s->print("S ");
     3e0:	6820      	ldr	r0, [r4, #0]
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
     3e2:	2202      	movs	r2, #2
     3e4:	490e      	ldr	r1, [pc, #56]	; (420 <OtaConsole::printf(char const*, ...)+0x60>)
     3e6:	6803      	ldr	r3, [r0, #0]
     3e8:	685b      	ldr	r3, [r3, #4]
     3ea:	4798      	blx	r3
    s->print(buf);
     3ec:	6825      	ldr	r5, [r4, #0]
     3ee:	a802      	add	r0, sp, #8
     3f0:	f005 f9e6 	bl	57c0 <strlen>
     3f4:	682b      	ldr	r3, [r5, #0]
     3f6:	4602      	mov	r2, r0
     3f8:	a902      	add	r1, sp, #8
     3fa:	685b      	ldr	r3, [r3, #4]
     3fc:	4628      	mov	r0, r5
     3fe:	4798      	blx	r3
    s->print("\r\n");
     400:	6820      	ldr	r0, [r4, #0]
     402:	2202      	movs	r2, #2
     404:	4907      	ldr	r1, [pc, #28]	; (424 <OtaConsole::printf(char const*, ...)+0x64>)
     406:	6803      	ldr	r3, [r0, #0]
     408:	685b      	ldr	r3, [r3, #4]
     40a:	4798      	blx	r3
  }
     40c:	b033      	add	sp, #204	; 0xcc
     40e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
     412:	b004      	add	sp, #16
     414:	4770      	bx	lr
     416:	bf00      	nop
     418:	2000802a 	.word	0x2000802a
     41c:	20007a30 	.word	0x20007a30
     420:	200003cc 	.word	0x200003cc
     424:	200003d0 	.word	0x200003d0

00000428 <loop>:

  Serial.println("[MyApp] boot");
  OLOG("MyApp FW=%s  (blink=%d ms)", APP_FW_VERSION, BLINK_MS);
}

void loop() {
     428:	b538      	push	{r3, r4, r5, lr}
  // Always service OTA (cheap when idle)
  OtaUpdater::tick();
     42a:	f000 f8cf 	bl	5cc <OtaUpdater::tick()>

  // Optional: mute logs while an OTA is running
  OtaConsole::setEnabled(!OtaUpdater::inProgress());
     42e:	f000 f8c7 	bl	5c0 <OtaUpdater::inProgress()>
  inline void setEnabled(bool on) { enabled = on; }
     432:	4b11      	ldr	r3, [pc, #68]	; (478 <loop+0x50>)
     434:	f080 0001 	eor.w	r0, r0, #1
     438:	7018      	strb	r0, [r3, #0]

  static uint32_t t_led = 0;
  static bool led_on = false;

  // Avoid blinking during flash (purely cosmetic)
  if (!OtaUpdater::inProgress()) {
     43a:	f000 f8c1 	bl	5c0 <OtaUpdater::inProgress()>
     43e:	b9c8      	cbnz	r0, 474 <loop+0x4c>
     440:	4c0e      	ldr	r4, [pc, #56]	; (47c <loop+0x54>)
    if (millis() - t_led >= BLINK_MS) {
     442:	4a0f      	ldr	r2, [pc, #60]	; (480 <loop+0x58>)
     444:	6823      	ldr	r3, [r4, #0]
     446:	6811      	ldr	r1, [r2, #0]
     448:	1a5b      	subs	r3, r3, r1
     44a:	2b31      	cmp	r3, #49	; 0x31
     44c:	d912      	bls.n	474 <loop+0x4c>
      t_led = millis();
      led_on = !led_on;
     44e:	4d0d      	ldr	r5, [pc, #52]	; (484 <loop+0x5c>)
      digitalWrite(LED_PIN, led_on ? HIGH : LOW);
     450:	200d      	movs	r0, #13
     452:	6823      	ldr	r3, [r4, #0]
      led_on = !led_on;
     454:	7829      	ldrb	r1, [r5, #0]
      t_led = millis();
     456:	6013      	str	r3, [r2, #0]
      led_on = !led_on;
     458:	f081 0101 	eor.w	r1, r1, #1
     45c:	7029      	strb	r1, [r5, #0]
      digitalWrite(LED_PIN, led_on ? HIGH : LOW);
     45e:	f000 ff91 	bl	1384 <digitalWrite>
     462:	6821      	ldr	r1, [r4, #0]
      OLOG("heartbeat %lu, led=%d", (unsigned long)(millis()/1000), (int)led_on);
     464:	4b08      	ldr	r3, [pc, #32]	; (488 <loop+0x60>)
     466:	782a      	ldrb	r2, [r5, #0]
     468:	fba3 3101 	umull	r3, r1, r3, r1
     46c:	4807      	ldr	r0, [pc, #28]	; (48c <loop+0x64>)
     46e:	0989      	lsrs	r1, r1, #6
     470:	f7ff ffa6 	bl	3c0 <OtaConsole::printf(char const*, ...)>
    }
  }

  // (Optional) forward anything you type on USB Serial to ESP32 console
  // OtaConsole::mirrorUsbStreamOnce();
}
     474:	bd38      	pop	{r3, r4, r5, pc}
     476:	bf00      	nop
     478:	2000802a 	.word	0x2000802a
     47c:	20008cb8 	.word	0x20008cb8
     480:	200089e0 	.word	0x200089e0
     484:	20008cdc 	.word	0x20008cdc
     488:	10624dd3 	.word	0x10624dd3
     48c:	200076ec 	.word	0x200076ec

00000490 <setup>:
void setup() {
     490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  pinMode(LED_PIN, OUTPUT);
     494:	2101      	movs	r1, #1
     496:	200d      	movs	r0, #13
		uint32_t millis_begin = systick_millis_count;
     498:	4d24      	ldr	r5, [pc, #144]	; (52c <setup+0x9c>)
     49a:	f000 ff9d 	bl	13d8 <pinMode>
  digitalWrite(LED_PIN, LOW);
     49e:	2100      	movs	r1, #0
     4a0:	200d      	movs	r0, #13
     4a2:	f000 ff6f 	bl	1384 <digitalWrite>
     4a6:	4c22      	ldr	r4, [pc, #136]	; (530 <setup+0xa0>)
     4a8:	682e      	ldr	r6, [r5, #0]
				if (elapsed > 750) break;
     4aa:	f240 28ee 	movw	r8, #750	; 0x2ee
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     4ae:	4f21      	ldr	r7, [pc, #132]	; (534 <setup+0xa4>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     4b0:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 554 <setup+0xc4>
		yield();
     4b4:	f002 fbd6 	bl	2c64 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     4b8:	7823      	ldrb	r3, [r4, #0]
     4ba:	b353      	cbz	r3, 512 <setup+0x82>
     4bc:	783b      	ldrb	r3, [r7, #0]
     4be:	07db      	lsls	r3, r3, #31
     4c0:	d527      	bpl.n	512 <setup+0x82>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     4c2:	682b      	ldr	r3, [r5, #0]
     4c4:	f8d9 2000 	ldr.w	r2, [r9]
     4c8:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     4ca:	2b0e      	cmp	r3, #14
     4cc:	d921      	bls.n	512 <setup+0x82>
  Serial2.begin(115200);
     4ce:	4c1a      	ldr	r4, [pc, #104]	; (538 <setup+0xa8>)
     4d0:	2200      	movs	r2, #0
     4d2:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
     4d6:	4620      	mov	r0, r4
     4d8:	f000 fbce 	bl	c78 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)>
  OtaUpdater::begin(Serial2);
     4dc:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
     4e0:	4620      	mov	r0, r4
     4e2:	f000 f84b 	bl	57c <OtaUpdater::begin(HardwareSerial&, unsigned long)>
  OtaUpdater::setAppVersion(APP_FW_VERSION);
     4e6:	4815      	ldr	r0, [pc, #84]	; (53c <setup+0xac>)
     4e8:	f000 f836 	bl	558 <OtaUpdater::setAppVersion(char const*)>
    s = &out;
     4ec:	4814      	ldr	r0, [pc, #80]	; (540 <setup+0xb0>)
    enabled = true;
     4ee:	4b15      	ldr	r3, [pc, #84]	; (544 <setup+0xb4>)
     4f0:	2201      	movs	r2, #1
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     4f2:	210c      	movs	r1, #12
    s = &out;
     4f4:	6004      	str	r4, [r0, #0]
     4f6:	4814      	ldr	r0, [pc, #80]	; (548 <setup+0xb8>)
    enabled = true;
     4f8:	701a      	strb	r2, [r3, #0]
     4fa:	f002 fb35 	bl	2b68 <usb_serial_write>
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
     4fe:	4813      	ldr	r0, [pc, #76]	; (54c <setup+0xbc>)
     500:	f000 febc 	bl	127c <Print::println()>
  OLOG("MyApp FW=%s  (blink=%d ms)", APP_FW_VERSION, BLINK_MS);
     504:	2232      	movs	r2, #50	; 0x32
     506:	490d      	ldr	r1, [pc, #52]	; (53c <setup+0xac>)
     508:	4811      	ldr	r0, [pc, #68]	; (550 <setup+0xc0>)
     50a:	f7ff ff59 	bl	3c0 <OtaConsole::printf(char const*, ...)>
}
     50e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			uint32_t elapsed = systick_millis_count - millis_begin;
     512:	682b      	ldr	r3, [r5, #0]
			if (usb_configuration) {
     514:	7822      	ldrb	r2, [r4, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
     516:	1b9b      	subs	r3, r3, r6
			if (usb_configuration) {
     518:	b12a      	cbz	r2, 526 <setup+0x96>
				if (elapsed > 2000) break;
     51a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
     51e:	d8d6      	bhi.n	4ce <setup+0x3e>
			yield();
     520:	f002 fba0 	bl	2c64 <yield>
     524:	e7c6      	b.n	4b4 <setup+0x24>
				if (elapsed > 750) break;
     526:	4543      	cmp	r3, r8
     528:	d9fa      	bls.n	520 <setup+0x90>
     52a:	e7d0      	b.n	4ce <setup+0x3e>
     52c:	20008cb8 	.word	0x20008cb8
     530:	20008ce7 	.word	0x20008ce7
     534:	20008ce6 	.word	0x20008ce6
     538:	20007968 	.word	0x20007968
     53c:	20007710 	.word	0x20007710
     540:	20007a30 	.word	0x20007a30
     544:	2000802a 	.word	0x2000802a
     548:	2000771c 	.word	0x2000771c
     54c:	20007958 	.word	0x20007958
     550:	2000772c 	.word	0x2000772c
     554:	20008cc8 	.word	0x20008cc8

00000558 <OtaUpdater::setAppVersion(char const*)>:
static const char*     LOADER_ID = "FlasherX v2.4 (in-app)";

// === App-provided version/name (set from your .ino via setAppVersion) ===
static const char* _appVersion = "MyApp";
void OtaUpdater::setAppVersion(const char* name) {
  _appVersion = (name && name[0]) ? name : "MyApp";
     558:	b138      	cbz	r0, 56a <OtaUpdater::setAppVersion(char const*)+0x12>
     55a:	4b06      	ldr	r3, [pc, #24]	; (574 <OtaUpdater::setAppVersion(char const*)+0x1c>)
     55c:	7802      	ldrb	r2, [r0, #0]
     55e:	2a00      	cmp	r2, #0
     560:	bf08      	it	eq
     562:	4618      	moveq	r0, r3
     564:	4b04      	ldr	r3, [pc, #16]	; (578 <OtaUpdater::setAppVersion(char const*)+0x20>)
     566:	6018      	str	r0, [r3, #0]
}
     568:	4770      	bx	lr
  _appVersion = (name && name[0]) ? name : "MyApp";
     56a:	4802      	ldr	r0, [pc, #8]	; (574 <OtaUpdater::setAppVersion(char const*)+0x1c>)
     56c:	4b02      	ldr	r3, [pc, #8]	; (578 <OtaUpdater::setAppVersion(char const*)+0x20>)
     56e:	6018      	str	r0, [r3, #0]
}
     570:	4770      	bx	lr
     572:	bf00      	nop
     574:	200003d4 	.word	0x200003d4
     578:	200079c8 	.word	0x200079c8

0000057c <OtaUpdater::begin(HardwareSerial&, unsigned long)>:
static void handleLine(const char* line);
static void beginHex();
static void handleHexRecord(const char* rec);
static void endHex();

void OtaUpdater::begin(HardwareSerial& otaPort, uint32_t baud) {
     57c:	b538      	push	{r3, r4, r5, lr}
  _ota  = &otaPort;
  _baud = baud ? baud : 115200;
     57e:	2900      	cmp	r1, #0
  _ota->begin(_baud);
     580:	6804      	ldr	r4, [r0, #0]
  _ota  = &otaPort;
     582:	4d0d      	ldr	r5, [pc, #52]	; (5b8 <OtaUpdater::begin(HardwareSerial&, unsigned long)+0x3c>)
  _ota->begin(_baud);
     584:	f04f 0200 	mov.w	r2, #0
     588:	69e3      	ldr	r3, [r4, #28]
     58a:	bf08      	it	eq
     58c:	f44f 31e1 	moveq.w	r1, #115200	; 0x1c200
  _ota  = &otaPort;
     590:	6028      	str	r0, [r5, #0]
  _ota->begin(_baud);
     592:	4798      	blx	r3
  ota.handshakeReady = false;
     594:	4b09      	ldr	r3, [pc, #36]	; (5bc <OtaUpdater::begin(HardwareSerial&, unsigned long)+0x40>)
     596:	2200      	movs	r2, #0
  hex_info_reset(&ota.hex, ota.hexData);
     598:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
     59c:	f103 0078 	add.w	r0, r3, #120	; 0x78
  ota.handshakeReady = false;
     5a0:	801a      	strh	r2, [r3, #0]
  ota.fatal          = false;
     5a2:	709a      	strb	r2, [r3, #2]
  ota.badLines       = 0;
     5a4:	615a      	str	r2, [r3, #20]
  ota.lastError[0]   = 0;
     5a6:	761a      	strb	r2, [r3, #24]
  ota.bufferSize     = 0;
     5a8:	e9c3 2201 	strd	r2, r2, [r3, #4]
  ota.okLines        = 0;
     5ac:	e9c3 2203 	strd	r2, r2, [r3, #12]
  resetOtaSession();
}
     5b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hex_info_reset(&ota.hex, ota.hexData);
     5b4:	f7ff bdac 	b.w	110 <hex_info_reset(hex_info_t*, char*)>
     5b8:	20007a2c 	.word	0x20007a2c
     5bc:	20008880 	.word	0x20008880

000005c0 <OtaUpdater::inProgress()>:

bool OtaUpdater::inProgress() { return ota.inProgress; }
     5c0:	4b01      	ldr	r3, [pc, #4]	; (5c8 <OtaUpdater::inProgress()+0x8>)
     5c2:	7858      	ldrb	r0, [r3, #1]
     5c4:	4770      	bx	lr
     5c6:	bf00      	nop
     5c8:	20008880 	.word	0x20008880

000005cc <OtaUpdater::tick()>:

const char* OtaUpdater::loaderId() { return LOADER_ID; }

void OtaUpdater::tick() {
     5cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     5d0:	4caa      	ldr	r4, [pc, #680]	; (87c <OtaUpdater::tick()+0x2b0>)
    handleHexRecord(line + 2);
    return;
  }

  // Commands
  if (!strncmp(line, "HELLO", 5)) {
     5d2:	4eab      	ldr	r6, [pc, #684]	; (880 <OtaUpdater::tick()+0x2b4>)
    if (!strcmp(tok, OTA_TOKEN)) { ota.handshakeReady = true; sendLine("READY"); }
    else { ota.handshakeReady = false; sendLine("NACK"); }
    return;
  }

  if (!strcmp(line, "BEGIN HEX")) { beginHex(); return; }
     5d4:	4fab      	ldr	r7, [pc, #684]	; (884 <OtaUpdater::tick()+0x2b8>)
  if (!strcmp(line, "END"))       { endHex();   return; }
     5d6:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 8cc <OtaUpdater::tick()+0x300>
  if (!strcmp(line, "PING"))      { sendLine("PONG"); return; }
     5da:	f8df 92f4 	ldr.w	r9, [pc, #756]	; 8d0 <OtaUpdater::tick()+0x304>

  // VERSION: now reports the string set from your .ino
  if (!strcmp(line, "VERSION")) {
     5de:	f8df b2f4 	ldr.w	fp, [pc, #756]	; 8d4 <OtaUpdater::tick()+0x308>
void OtaUpdater::tick() {
     5e2:	ed2d 8b02 	vpush	{d8}
     5e6:	b087      	sub	sp, #28
  while (_ota->available()) {
     5e8:	6820      	ldr	r0, [r4, #0]
     5ea:	6803      	ldr	r3, [r0, #0]
     5ec:	691b      	ldr	r3, [r3, #16]
     5ee:	4798      	blx	r3
     5f0:	b1d0      	cbz	r0, 628 <OtaUpdater::tick()+0x5c>
    char c = (char)_ota->read();
     5f2:	6820      	ldr	r0, [r4, #0]
     5f4:	6803      	ldr	r3, [r0, #0]
     5f6:	695b      	ldr	r3, [r3, #20]
     5f8:	4798      	blx	r3
     5fa:	b2c0      	uxtb	r0, r0
    if (c == '\r') continue;
     5fc:	280d      	cmp	r0, #13
     5fe:	d0f3      	beq.n	5e8 <OtaUpdater::tick()+0x1c>
    if (c == '\n') {
     600:	280a      	cmp	r0, #10
     602:	d008      	beq.n	616 <OtaUpdater::tick()+0x4a>
    } else if (n + 1 < sizeof(buf)) {
     604:	4aa0      	ldr	r2, [pc, #640]	; (888 <OtaUpdater::tick()+0x2bc>)
     606:	6813      	ldr	r3, [r2, #0]
     608:	1c59      	adds	r1, r3, #1
     60a:	29bf      	cmp	r1, #191	; 0xbf
     60c:	d8ec      	bhi.n	5e8 <OtaUpdater::tick()+0x1c>
      buf[n++] = c;
     60e:	6011      	str	r1, [r2, #0]
     610:	4a9e      	ldr	r2, [pc, #632]	; (88c <OtaUpdater::tick()+0x2c0>)
     612:	54d0      	strb	r0, [r2, r3]
     614:	e7e8      	b.n	5e8 <OtaUpdater::tick()+0x1c>
      buf[n] = 0;
     616:	4d9c      	ldr	r5, [pc, #624]	; (888 <OtaUpdater::tick()+0x2bc>)
     618:	2200      	movs	r2, #0
     61a:	489c      	ldr	r0, [pc, #624]	; (88c <OtaUpdater::tick()+0x2c0>)
     61c:	682b      	ldr	r3, [r5, #0]
     61e:	54c2      	strb	r2, [r0, r3]
      if (n) handleLine(buf);
     620:	b93b      	cbnz	r3, 632 <OtaUpdater::tick()+0x66>
      n = 0;
     622:	2300      	movs	r3, #0
     624:	602b      	str	r3, [r5, #0]
     626:	e7df      	b.n	5e8 <OtaUpdater::tick()+0x1c>
}
     628:	b007      	add	sp, #28
     62a:	ecbd 8b02 	vpop	{d8}
     62e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!line || !line[0]) return;
     632:	7803      	ldrb	r3, [r0, #0]
     634:	2b00      	cmp	r3, #0
     636:	d0f4      	beq.n	622 <OtaUpdater::tick()+0x56>
  if (line[0] == 'L' && line[1] == ' ') {
     638:	2b4c      	cmp	r3, #76	; 0x4c
     63a:	f000 8099 	beq.w	770 <OtaUpdater::tick()+0x1a4>
  if (!strncmp(line, "HELLO", 5)) {
     63e:	6803      	ldr	r3, [r0, #0]
     640:	42b3      	cmp	r3, r6
     642:	f000 80c2 	beq.w	7ca <OtaUpdater::tick()+0x1fe>
  if (!strcmp(line, "BEGIN HEX")) { beginHex(); return; }
     646:	6803      	ldr	r3, [r0, #0]
     648:	42bb      	cmp	r3, r7
     64a:	f000 80e1 	beq.w	810 <OtaUpdater::tick()+0x244>
  if (!strcmp(line, "END"))       { endHex();   return; }
     64e:	6803      	ldr	r3, [r0, #0]
     650:	4543      	cmp	r3, r8
     652:	d013      	beq.n	67c <OtaUpdater::tick()+0xb0>
  if (!strcmp(line, "PING"))      { sendLine("PONG"); return; }
     654:	454b      	cmp	r3, r9
     656:	f000 8154 	beq.w	902 <OtaUpdater::tick()+0x336>
  if (!strcmp(line, "VERSION")) {
     65a:	6803      	ldr	r3, [r0, #0]
     65c:	455b      	cmp	r3, fp
     65e:	f000 8158 	beq.w	912 <OtaUpdater::tick()+0x346>
  _ota->print(s);
     662:	6820      	ldr	r0, [r4, #0]
							  return write((const uint8_t *)str, strlen(str)); }
     664:	2203      	movs	r2, #3
     666:	498a      	ldr	r1, [pc, #552]	; (890 <OtaUpdater::tick()+0x2c4>)
     668:	6803      	ldr	r3, [r0, #0]
     66a:	685b      	ldr	r3, [r3, #4]
     66c:	4798      	blx	r3
    _ota->print("FW ");
    _ota->print(_appVersion);
    _ota->print("\r\n");
    _ota->print("FLASHERX ");
    _ota->print(LOADER_ID);
    _ota->print("\r\n");
     66e:	6820      	ldr	r0, [r4, #0]
     670:	2202      	movs	r2, #2
     672:	4988      	ldr	r1, [pc, #544]	; (894 <OtaUpdater::tick()+0x2c8>)
     674:	6803      	ldr	r3, [r0, #0]
     676:	685b      	ldr	r3, [r3, #4]
     678:	4798      	blx	r3
     67a:	e7d2      	b.n	622 <OtaUpdater::tick()+0x56>
    _ota->print("BAD "); _ota->print(lineNo);  _ota->print("\r\n");
  }
}

static void endHex() {
  if (!ota.inProgress) { sendLine("HEX IDLE"); return; }
     67c:	f8df a244 	ldr.w	sl, [pc, #580]	; 8c4 <OtaUpdater::tick()+0x2f8>
  if (!strcmp(line, "END"))       { endHex();   return; }
     680:	2200      	movs	r2, #0
  if (!ota.inProgress) { sendLine("HEX IDLE"); return; }
     682:	f89a 3001 	ldrb.w	r3, [sl, #1]
     686:	2b00      	cmp	r3, #0
     688:	f000 8133 	beq.w	8f2 <OtaUpdater::tick()+0x326>

  ota.inProgress     = false;
  ota.handshakeReady = false;

  uint32_t payload = 0;
  if (ota.hex.min != 0xFFFFFFFF && ota.hex.max > ota.hex.min) {
     68c:	f8da 308c 	ldr.w	r3, [sl, #140]	; 0x8c
  ota.handshakeReady = false;
     690:	f8aa 2000 	strh.w	r2, [sl]
  if (ota.hex.min != 0xFFFFFFFF && ota.hex.max > ota.hex.min) {
     694:	1c59      	adds	r1, r3, #1
     696:	f000 818d 	beq.w	9b4 <OtaUpdater::tick()+0x3e8>
     69a:	f8da 1090 	ldr.w	r1, [sl, #144]	; 0x90
     69e:	428b      	cmp	r3, r1
     6a0:	f080 8188 	bcs.w	9b4 <OtaUpdater::tick()+0x3e8>
    payload = ota.hex.max - ota.hex.min;
     6a4:	1acb      	subs	r3, r1, r3
     6a6:	9302      	str	r3, [sp, #8]
  }

  bool success = (!ota.fatal && ota.badLines == 0);
     6a8:	f89a 3002 	ldrb.w	r3, [sl, #2]
     6ac:	2b00      	cmp	r3, #0
     6ae:	f040 815e 	bne.w	96e <OtaUpdater::tick()+0x3a2>
     6b2:	f8da 3014 	ldr.w	r3, [sl, #20]
     6b6:	9303      	str	r3, [sp, #12]
     6b8:	2b00      	cmp	r3, #0
     6ba:	f040 8158 	bne.w	96e <OtaUpdater::tick()+0x3a2>
  if (success && !ota.hex.eof) success = false;
     6be:	f8da 3094 	ldr.w	r3, [sl, #148]	; 0x94
     6c2:	2b00      	cmp	r3, #0
     6c4:	f000 8153 	beq.w	96e <OtaUpdater::tick()+0x3a2>
  if (success && ota.bytes == 0) success = false;
     6c8:	f8da 300c 	ldr.w	r3, [sl, #12]
     6cc:	2b00      	cmp	r3, #0
     6ce:	f000 814e 	beq.w	96e <OtaUpdater::tick()+0x3a2>
    uint32_t v = *(uint32_t*)(0x40C + ota.bufferAddr);
    if (v != 0xFFFFF9DE) success = false;
  }
#endif

  if (success && !check_flash_id(ota.bufferAddr, payload)) success = false;
     6d2:	9902      	ldr	r1, [sp, #8]
     6d4:	f8da 0004 	ldr.w	r0, [sl, #4]
     6d8:	f7ff fe20 	bl	31c <check_flash_id>
     6dc:	2800      	cmp	r0, #0
     6de:	f000 8146 	beq.w	96e <OtaUpdater::tick()+0x3a2>

  if (success) {
    _ota->print("HEX OK lines="); _ota->print(ota.hex.lines);
     6e2:	6820      	ldr	r0, [r4, #0]
     6e4:	220d      	movs	r2, #13
     6e6:	496c      	ldr	r1, [pc, #432]	; (898 <OtaUpdater::tick()+0x2cc>)
     6e8:	6803      	ldr	r3, [r0, #0]
     6ea:	685b      	ldr	r3, [r3, #4]
     6ec:	4798      	blx	r3
	size_t print(int n)				{ return print((long)n); }
     6ee:	f8da 1098 	ldr.w	r1, [sl, #152]	; 0x98
     6f2:	6820      	ldr	r0, [r4, #0]
     6f4:	f000 fdb6 	bl	1264 <Print::print(long)>
    _ota->print(" bytes=");       _ota->print(ota.bytes);
     6f8:	6820      	ldr	r0, [r4, #0]
							  return write((const uint8_t *)str, strlen(str)); }
     6fa:	2207      	movs	r2, #7
     6fc:	4967      	ldr	r1, [pc, #412]	; (89c <OtaUpdater::tick()+0x2d0>)
     6fe:	6803      	ldr	r3, [r0, #0]
     700:	685b      	ldr	r3, [r3, #4]
     702:	4798      	blx	r3
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     704:	9b03      	ldr	r3, [sp, #12]
     706:	220a      	movs	r2, #10
     708:	f8da 100c 	ldr.w	r1, [sl, #12]
     70c:	6820      	ldr	r0, [r4, #0]
     70e:	f000 fdd1 	bl	12b4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    _ota->print("\r\n");
     712:	6820      	ldr	r0, [r4, #0]
							  return write((const uint8_t *)str, strlen(str)); }
     714:	2202      	movs	r2, #2
     716:	495f      	ldr	r1, [pc, #380]	; (894 <OtaUpdater::tick()+0x2c8>)
     718:	6803      	ldr	r3, [r0, #0]
     71a:	685b      	ldr	r3, [r3, #4]
     71c:	4798      	blx	r3
    _ota->print("APPLIED\r\n");
     71e:	6820      	ldr	r0, [r4, #0]
     720:	495f      	ldr	r1, [pc, #380]	; (8a0 <OtaUpdater::tick()+0x2d4>)
     722:	2209      	movs	r2, #9
     724:	6803      	ldr	r3, [r0, #0]
     726:	685b      	ldr	r3, [r3, #4]
     728:	4798      	blx	r3
    _ota->flush();
     72a:	6820      	ldr	r0, [r4, #0]
     72c:	6803      	ldr	r3, [r0, #0]
     72e:	68db      	ldr	r3, [r3, #12]
     730:	4798      	blx	r3

    flash_move(FLASH_BASE_ADDR, ota.bufferAddr, payload);
     732:	9a02      	ldr	r2, [sp, #8]
     734:	f8da 1004 	ldr.w	r1, [sl, #4]
     738:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
     73c:	f7ff fc80 	bl	40 <flash_move>
    REBOOT;
     740:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     744:	4a57      	ldr	r2, [pc, #348]	; (8a4 <OtaUpdater::tick()+0x2d8>)
     746:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
  ota.handshakeReady = false;
     74a:	2300      	movs	r3, #0
  hex_info_reset(&ota.hex, ota.hexData);
     74c:	4956      	ldr	r1, [pc, #344]	; (8a8 <OtaUpdater::tick()+0x2dc>)
  ota.handshakeReady = false;
     74e:	f8aa 3000 	strh.w	r3, [sl]
  hex_info_reset(&ota.hex, ota.hexData);
     752:	f1a1 0028 	sub.w	r0, r1, #40	; 0x28
  ota.lastError[0]   = 0;
     756:	f88a 3018 	strb.w	r3, [sl, #24]
  ota.fatal          = false;
     75a:	f88a 3002 	strb.w	r3, [sl, #2]
  ota.badLines       = 0;
     75e:	f8ca 3014 	str.w	r3, [sl, #20]
  ota.bufferSize     = 0;
     762:	e9ca 3301 	strd	r3, r3, [sl, #4]
  ota.okLines        = 0;
     766:	e9ca 3303 	strd	r3, r3, [sl, #12]
  hex_info_reset(&ota.hex, ota.hexData);
     76a:	f7ff fcd1 	bl	110 <hex_info_reset(hex_info_t*, char*)>
}
     76e:	e758      	b.n	622 <OtaUpdater::tick()+0x56>
  if (line[0] == 'L' && line[1] == ' ') {
     770:	7843      	ldrb	r3, [r0, #1]
     772:	2b20      	cmp	r3, #32
     774:	f47f af63 	bne.w	63e <OtaUpdater::tick()+0x72>
  if (!ota.inProgress) { sendLine("HEX IDLE"); return; }
     778:	f8df a148 	ldr.w	sl, [pc, #328]	; 8c4 <OtaUpdater::tick()+0x2f8>
     77c:	f89a 3001 	ldrb.w	r3, [sl, #1]
     780:	2b00      	cmp	r3, #0
     782:	f000 80b6 	beq.w	8f2 <OtaUpdater::tick()+0x326>
  ota.hex.lines++;
     786:	f8da 3098 	ldr.w	r3, [sl, #152]	; 0x98
     78a:	3301      	adds	r3, #1
     78c:	ee08 3a10 	vmov	s16, r3
     790:	f8ca 3098 	str.w	r3, [sl, #152]	; 0x98
  if (ok && (parse_hex_line(rec, ota.hex.data, &ota.hex.addr, &ota.hex.num, &ota.hex.code) == 0)) {
     794:	f89a 3002 	ldrb.w	r3, [sl, #2]
     798:	2b00      	cmp	r3, #0
     79a:	f000 8111 	beq.w	9c0 <OtaUpdater::tick()+0x3f4>
    ota.badLines++;
     79e:	f8da 3014 	ldr.w	r3, [sl, #20]
     7a2:	2204      	movs	r2, #4
    _ota->print("BAD "); _ota->print(lineNo);  _ota->print("\r\n");
     7a4:	6820      	ldr	r0, [r4, #0]
    ota.badLines++;
     7a6:	3301      	adds	r3, #1
     7a8:	4940      	ldr	r1, [pc, #256]	; (8ac <OtaUpdater::tick()+0x2e0>)
     7aa:	f8ca 3014 	str.w	r3, [sl, #20]
    ota.fatal = true;
     7ae:	2301      	movs	r3, #1
     7b0:	f88a 3002 	strb.w	r3, [sl, #2]
     7b4:	6803      	ldr	r3, [r0, #0]
     7b6:	685b      	ldr	r3, [r3, #4]
     7b8:	4798      	blx	r3
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
     7ba:	ee18 1a10 	vmov	r1, s16
     7be:	2300      	movs	r3, #0
     7c0:	220a      	movs	r2, #10
     7c2:	6820      	ldr	r0, [r4, #0]
     7c4:	f000 fd76 	bl	12b4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    _ota->print("BAD "); _ota->print(lineNo);  _ota->print("\r\n");
     7c8:	e751      	b.n	66e <OtaUpdater::tick()+0xa2>
  if (!strncmp(line, "HELLO", 5)) {
     7ca:	7903      	ldrb	r3, [r0, #4]
     7cc:	2b4f      	cmp	r3, #79	; 0x4f
     7ce:	f47f af3a 	bne.w	646 <OtaUpdater::tick()+0x7a>
    if (ota.inProgress) { sendLine("BUSY"); return; }
     7d2:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 8c4 <OtaUpdater::tick()+0x2f8>
     7d6:	f89a 3001 	ldrb.w	r3, [sl, #1]
     7da:	2b00      	cmp	r3, #0
     7dc:	f040 808d 	bne.w	8fa <OtaUpdater::tick()+0x32e>
    while (*tok == ' ') tok++;
     7e0:	7943      	ldrb	r3, [r0, #5]
    const char* tok = line + 5;
     7e2:	4833      	ldr	r0, [pc, #204]	; (8b0 <OtaUpdater::tick()+0x2e4>)
    while (*tok == ' ') tok++;
     7e4:	2b20      	cmp	r3, #32
     7e6:	d103      	bne.n	7f0 <OtaUpdater::tick()+0x224>
     7e8:	f810 3f01 	ldrb.w	r3, [r0, #1]!
     7ec:	2b20      	cmp	r3, #32
     7ee:	d0fb      	beq.n	7e8 <OtaUpdater::tick()+0x21c>
    if (!*tok) { sendLine("NACK"); return; }
     7f0:	2b00      	cmp	r3, #0
     7f2:	d07a      	beq.n	8ea <OtaUpdater::tick()+0x31e>
    if (!strcmp(tok, OTA_TOKEN)) { ota.handshakeReady = true; sendLine("READY"); }
     7f4:	492f      	ldr	r1, [pc, #188]	; (8b4 <OtaUpdater::tick()+0x2e8>)
     7f6:	f004 fe67 	bl	54c8 <strcmp>
     7fa:	2800      	cmp	r0, #0
     7fc:	d16c      	bne.n	8d8 <OtaUpdater::tick()+0x30c>
     7fe:	2301      	movs	r3, #1
  _ota->print(s);
     800:	6820      	ldr	r0, [r4, #0]
							  return write((const uint8_t *)str, strlen(str)); }
     802:	2205      	movs	r2, #5
     804:	492c      	ldr	r1, [pc, #176]	; (8b8 <OtaUpdater::tick()+0x2ec>)
    if (!strcmp(tok, OTA_TOKEN)) { ota.handshakeReady = true; sendLine("READY"); }
     806:	f88a 3000 	strb.w	r3, [sl]
     80a:	6803      	ldr	r3, [r0, #0]
     80c:	685b      	ldr	r3, [r3, #4]
     80e:	e72d      	b.n	66c <OtaUpdater::tick()+0xa0>
  if (!strcmp(line, "BEGIN HEX")) { beginHex(); return; }
     810:	4b2a      	ldr	r3, [pc, #168]	; (8bc <OtaUpdater::tick()+0x2f0>)
     812:	492b      	ldr	r1, [pc, #172]	; (8c0 <OtaUpdater::tick()+0x2f4>)
     814:	681a      	ldr	r2, [r3, #0]
     816:	428a      	cmp	r2, r1
     818:	f47f af19 	bne.w	64e <OtaUpdater::tick()+0x82>
     81c:	889b      	ldrh	r3, [r3, #4]
     81e:	2b58      	cmp	r3, #88	; 0x58
     820:	f47f af15 	bne.w	64e <OtaUpdater::tick()+0x82>
  if (!ota.handshakeReady || ota.inProgress) { sendLine("HEX IDLE"); return; }
     824:	4b27      	ldr	r3, [pc, #156]	; (8c4 <OtaUpdater::tick()+0x2f8>)
     826:	781a      	ldrb	r2, [r3, #0]
     828:	2a00      	cmp	r2, #0
     82a:	d062      	beq.n	8f2 <OtaUpdater::tick()+0x326>
     82c:	f893 a001 	ldrb.w	sl, [r3, #1]
     830:	f1ba 0f00 	cmp.w	sl, #0
     834:	d15d      	bne.n	8f2 <OtaUpdater::tick()+0x326>
  if (firmware_buffer_init(&addr, &size) == 0) {
     836:	a905      	add	r1, sp, #20
     838:	a804      	add	r0, sp, #16
  uint32_t addr = 0, size = 0;
     83a:	e9cd aa04 	strd	sl, sl, [sp, #16]
  if (firmware_buffer_init(&addr, &size) == 0) {
     83e:	f7ff fd1d 	bl	27c <firmware_buffer_init>
     842:	4b20      	ldr	r3, [pc, #128]	; (8c4 <OtaUpdater::tick()+0x2f8>)
     844:	2800      	cmp	r0, #0
     846:	f000 80b7 	beq.w	9b8 <OtaUpdater::tick()+0x3ec>
  ota.bufferAddr = addr;
     84a:	9a04      	ldr	r2, [sp, #16]
  hex_info_reset(&ota.hex, ota.hexData);
     84c:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
     850:	f103 0078 	add.w	r0, r3, #120	; 0x78
  ota.lastError[0] = 0;
     854:	f883 a018 	strb.w	sl, [r3, #24]
  ota.bufferAddr = addr;
     858:	605a      	str	r2, [r3, #4]
  ota.bufferSize = size;
     85a:	9a05      	ldr	r2, [sp, #20]
  ota.fatal      = false;
     85c:	f883 a002 	strb.w	sl, [r3, #2]
  ota.bufferSize = size;
     860:	609a      	str	r2, [r3, #8]
  ota.inProgress = true;
     862:	2201      	movs	r2, #1
  ota.badLines   = 0;
     864:	f8c3 a014 	str.w	sl, [r3, #20]
  ota.inProgress = true;
     868:	705a      	strb	r2, [r3, #1]
  ota.okLines    = 0;
     86a:	e9c3 aa03 	strd	sl, sl, [r3, #12]
  hex_info_reset(&ota.hex, ota.hexData);
     86e:	f7ff fc4f 	bl	110 <hex_info_reset(hex_info_t*, char*)>
  _ota->print(s);
     872:	6820      	ldr	r0, [r4, #0]
     874:	2209      	movs	r2, #9
     876:	4914      	ldr	r1, [pc, #80]	; (8c8 <OtaUpdater::tick()+0x2fc>)
     878:	e6f6      	b.n	668 <OtaUpdater::tick()+0x9c>
     87a:	bf00      	nop
     87c:	20007a2c 	.word	0x20007a2c
     880:	4c4c4548 	.word	0x4c4c4548
     884:	49474542 	.word	0x49474542
     888:	200089e4 	.word	0x200089e4
     88c:	200089e8 	.word	0x200089e8
     890:	200004a0 	.word	0x200004a0
     894:	200003d0 	.word	0x200003d0
     898:	2000043c 	.word	0x2000043c
     89c:	2000044c 	.word	0x2000044c
     8a0:	20000454 	.word	0x20000454
     8a4:	05fa0004 	.word	0x05fa0004
     8a8:	20008920 	.word	0x20008920
     8ac:	200003ec 	.word	0x200003ec
     8b0:	200089ed 	.word	0x200089ed
     8b4:	200003a8 	.word	0x200003a8
     8b8:	2000040c 	.word	0x2000040c
     8bc:	200089ec 	.word	0x200089ec
     8c0:	4548204e 	.word	0x4548204e
     8c4:	20008880 	.word	0x20008880
     8c8:	2000042c 	.word	0x2000042c
     8cc:	00444e45 	.word	0x00444e45
     8d0:	474e4950 	.word	0x474e4950
     8d4:	53524556 	.word	0x53524556
    else { ota.handshakeReady = false; sendLine("NACK"); }
     8d8:	2300      	movs	r3, #0
  _ota->print(s);
     8da:	6820      	ldr	r0, [r4, #0]
     8dc:	2204      	movs	r2, #4
     8de:	495f      	ldr	r1, [pc, #380]	; (a5c <OtaUpdater::tick()+0x490>)
    else { ota.handshakeReady = false; sendLine("NACK"); }
     8e0:	f88a 3000 	strb.w	r3, [sl]
     8e4:	6803      	ldr	r3, [r0, #0]
     8e6:	685b      	ldr	r3, [r3, #4]
     8e8:	e6c0      	b.n	66c <OtaUpdater::tick()+0xa0>
  _ota->print(s);
     8ea:	6820      	ldr	r0, [r4, #0]
     8ec:	2204      	movs	r2, #4
     8ee:	495b      	ldr	r1, [pc, #364]	; (a5c <OtaUpdater::tick()+0x490>)
     8f0:	e6ba      	b.n	668 <OtaUpdater::tick()+0x9c>
     8f2:	6820      	ldr	r0, [r4, #0]
     8f4:	2208      	movs	r2, #8
     8f6:	495a      	ldr	r1, [pc, #360]	; (a60 <OtaUpdater::tick()+0x494>)
     8f8:	e6b6      	b.n	668 <OtaUpdater::tick()+0x9c>
     8fa:	6820      	ldr	r0, [r4, #0]
     8fc:	2204      	movs	r2, #4
     8fe:	4959      	ldr	r1, [pc, #356]	; (a64 <OtaUpdater::tick()+0x498>)
     900:	e6b2      	b.n	668 <OtaUpdater::tick()+0x9c>
  if (!strcmp(line, "PING"))      { sendLine("PONG"); return; }
     902:	7903      	ldrb	r3, [r0, #4]
     904:	2b00      	cmp	r3, #0
     906:	f47f aea8 	bne.w	65a <OtaUpdater::tick()+0x8e>
  _ota->print(s);
     90a:	6820      	ldr	r0, [r4, #0]
     90c:	2204      	movs	r2, #4
     90e:	4956      	ldr	r1, [pc, #344]	; (a68 <OtaUpdater::tick()+0x49c>)
     910:	e6aa      	b.n	668 <OtaUpdater::tick()+0x9c>
  if (!strcmp(line, "VERSION")) {
     912:	6842      	ldr	r2, [r0, #4]
     914:	4b55      	ldr	r3, [pc, #340]	; (a6c <OtaUpdater::tick()+0x4a0>)
     916:	429a      	cmp	r2, r3
     918:	f47f aea3 	bne.w	662 <OtaUpdater::tick()+0x96>
    _ota->print("FW ");
     91c:	6820      	ldr	r0, [r4, #0]
     91e:	2203      	movs	r2, #3
     920:	4953      	ldr	r1, [pc, #332]	; (a70 <OtaUpdater::tick()+0x4a4>)
     922:	6803      	ldr	r3, [r0, #0]
     924:	685b      	ldr	r3, [r3, #4]
     926:	4798      	blx	r3
    _ota->print(_appVersion);
     928:	4b52      	ldr	r3, [pc, #328]	; (a74 <OtaUpdater::tick()+0x4a8>)
     92a:	f8d4 a000 	ldr.w	sl, [r4]
     92e:	6819      	ldr	r1, [r3, #0]
	size_t write(const char *str)			{ if (str == nullptr) return 0;
     930:	b161      	cbz	r1, 94c <OtaUpdater::tick()+0x380>
							  return write((const uint8_t *)str, strlen(str)); }
     932:	4608      	mov	r0, r1
     934:	9102      	str	r1, [sp, #8]
     936:	f004 ff43 	bl	57c0 <strlen>
     93a:	f8da 3000 	ldr.w	r3, [sl]
     93e:	4602      	mov	r2, r0
     940:	9902      	ldr	r1, [sp, #8]
     942:	4650      	mov	r0, sl
     944:	685b      	ldr	r3, [r3, #4]
     946:	4798      	blx	r3
    _ota->print("\r\n");
     948:	f8d4 a000 	ldr.w	sl, [r4]
     94c:	f8da 3000 	ldr.w	r3, [sl]
     950:	2202      	movs	r2, #2
     952:	4949      	ldr	r1, [pc, #292]	; (a78 <OtaUpdater::tick()+0x4ac>)
     954:	4650      	mov	r0, sl
     956:	685b      	ldr	r3, [r3, #4]
     958:	4798      	blx	r3
    _ota->print("FLASHERX ");
     95a:	6820      	ldr	r0, [r4, #0]
     95c:	2209      	movs	r2, #9
     95e:	4947      	ldr	r1, [pc, #284]	; (a7c <OtaUpdater::tick()+0x4b0>)
     960:	6803      	ldr	r3, [r0, #0]
     962:	685b      	ldr	r3, [r3, #4]
     964:	4798      	blx	r3
    _ota->print(LOADER_ID);
     966:	6820      	ldr	r0, [r4, #0]
     968:	2216      	movs	r2, #22
     96a:	4945      	ldr	r1, [pc, #276]	; (a80 <OtaUpdater::tick()+0x4b4>)
     96c:	e67c      	b.n	668 <OtaUpdater::tick()+0x9c>
  } else {
    _ota->print("HEX ERR lines="); _ota->print(ota.hex.lines);
     96e:	6820      	ldr	r0, [r4, #0]
     970:	220e      	movs	r2, #14
     972:	4944      	ldr	r1, [pc, #272]	; (a84 <OtaUpdater::tick()+0x4b8>)
     974:	6803      	ldr	r3, [r0, #0]
     976:	685b      	ldr	r3, [r3, #4]
     978:	4798      	blx	r3
	size_t print(int n)				{ return print((long)n); }
     97a:	f8da 1098 	ldr.w	r1, [sl, #152]	; 0x98
     97e:	6820      	ldr	r0, [r4, #0]
     980:	f000 fc70 	bl	1264 <Print::print(long)>
    _ota->print(" bad=");          _ota->print(ota.badLines);
     984:	6820      	ldr	r0, [r4, #0]
							  return write((const uint8_t *)str, strlen(str)); }
     986:	2205      	movs	r2, #5
     988:	493f      	ldr	r1, [pc, #252]	; (a88 <OtaUpdater::tick()+0x4bc>)
     98a:	6803      	ldr	r3, [r0, #0]
     98c:	685b      	ldr	r3, [r3, #4]
     98e:	4798      	blx	r3
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     990:	f8da 1014 	ldr.w	r1, [sl, #20]
     994:	2300      	movs	r3, #0
     996:	220a      	movs	r2, #10
     998:	6820      	ldr	r0, [r4, #0]
     99a:	f000 fc8b 	bl	12b4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    _ota->print("\r\n");
     99e:	6820      	ldr	r0, [r4, #0]
							  return write((const uint8_t *)str, strlen(str)); }
     9a0:	4935      	ldr	r1, [pc, #212]	; (a78 <OtaUpdater::tick()+0x4ac>)
     9a2:	2202      	movs	r2, #2
     9a4:	6803      	ldr	r3, [r0, #0]
     9a6:	685b      	ldr	r3, [r3, #4]
     9a8:	4798      	blx	r3
    firmware_buffer_free(ota.bufferAddr, ota.bufferSize);
     9aa:	e9da 0101 	ldrd	r0, r1, [sl, #4]
     9ae:	f7ff fc95 	bl	2dc <firmware_buffer_free>
     9b2:	e6ca      	b.n	74a <OtaUpdater::tick()+0x17e>
  uint32_t payload = 0;
     9b4:	9202      	str	r2, [sp, #8]
     9b6:	e677      	b.n	6a8 <OtaUpdater::tick()+0xdc>
  _ota->print(s);
     9b8:	6820      	ldr	r0, [r4, #0]
     9ba:	2208      	movs	r2, #8
     9bc:	4933      	ldr	r1, [pc, #204]	; (a8c <OtaUpdater::tick()+0x4c0>)
     9be:	e653      	b.n	668 <OtaUpdater::tick()+0x9c>
  if (ok && (parse_hex_line(rec, ota.hex.data, &ota.hex.addr, &ota.hex.num, &ota.hex.code) == 0)) {
     9c0:	f10a 0380 	add.w	r3, sl, #128	; 0x80
     9c4:	3002      	adds	r0, #2
     9c6:	f10a 027c 	add.w	r2, sl, #124	; 0x7c
     9ca:	9300      	str	r3, [sp, #0]
     9cc:	f10a 0384 	add.w	r3, sl, #132	; 0x84
     9d0:	f8da 1078 	ldr.w	r1, [sl, #120]	; 0x78
     9d4:	f7ff fbaa 	bl	12c <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)>
     9d8:	2800      	cmp	r0, #0
     9da:	f43f aee0 	beq.w	79e <OtaUpdater::tick()+0x1d2>
  if (ok && (process_hex_record(&ota.hex) != 0)) {
     9de:	482c      	ldr	r0, [pc, #176]	; (a90 <OtaUpdater::tick()+0x4c4>)
     9e0:	f7ff fc12 	bl	208 <process_hex_record(hex_info_t*)>
     9e4:	2800      	cmp	r0, #0
     9e6:	f47f aeda 	bne.w	79e <OtaUpdater::tick()+0x1d2>
  if (ok && ota.hex.code == 0) {
     9ea:	f8da 3080 	ldr.w	r3, [sl, #128]	; 0x80
     9ee:	bb23      	cbnz	r3, a3a <OtaUpdater::tick()+0x46e>
    if (ota.hex.max > (FLASH_BASE_ADDR + ota.bufferSize)) {
     9f0:	f8da 3008 	ldr.w	r3, [sl, #8]
     9f4:	f8da 2090 	ldr.w	r2, [sl, #144]	; 0x90
     9f8:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
     9fc:	429a      	cmp	r2, r3
     9fe:	f63f aece 	bhi.w	79e <OtaUpdater::tick()+0x1d2>
      uint32_t addr = ota.bufferAddr + ota.hex.base + ota.hex.addr - FLASH_BASE_ADDR;
     a02:	f8da 2004 	ldr.w	r2, [sl, #4]
     a06:	f8da 3088 	ldr.w	r3, [sl, #136]	; 0x88
        memcpy((void*)addr, (void*)ota.hex.data, ota.hex.num);
     a0a:	f8da 1078 	ldr.w	r1, [sl, #120]	; 0x78
      uint32_t addr = ota.bufferAddr + ota.hex.base + ota.hex.addr - FLASH_BASE_ADDR;
     a0e:	18d0      	adds	r0, r2, r3
      if (!IN_FLASH(ota.bufferAddr)) {
     a10:	f102 4220 	add.w	r2, r2, #2684354560	; 0xa0000000
      uint32_t addr = ota.bufferAddr + ota.hex.base + ota.hex.addr - FLASH_BASE_ADDR;
     a14:	f8da 307c 	ldr.w	r3, [sl, #124]	; 0x7c
     a18:	f100 4020 	add.w	r0, r0, #2684354560	; 0xa0000000
      if (!IN_FLASH(ota.bufferAddr)) {
     a1c:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
        memcpy((void*)addr, (void*)ota.hex.data, ota.hex.num);
     a20:	f8da 2084 	ldr.w	r2, [sl, #132]	; 0x84
      uint32_t addr = ota.bufferAddr + ota.hex.base + ota.hex.addr - FLASH_BASE_ADDR;
     a24:	4418      	add	r0, r3
      if (!IN_FLASH(ota.bufferAddr)) {
     a26:	d313      	bcc.n	a50 <OtaUpdater::tick()+0x484>
        memcpy((void*)addr, (void*)ota.hex.data, ota.hex.num);
     a28:	f000 fe16 	bl	1658 <memcpy>
      if (ok) ota.bytes += ota.hex.num;
     a2c:	f8da 300c 	ldr.w	r3, [sl, #12]
     a30:	f8da 2084 	ldr.w	r2, [sl, #132]	; 0x84
     a34:	4413      	add	r3, r2
     a36:	f8ca 300c 	str.w	r3, [sl, #12]
    ota.okLines++;
     a3a:	f8da 3010 	ldr.w	r3, [sl, #16]
     a3e:	2203      	movs	r2, #3
    _ota->print("OK ");  _ota->print(lineNo);  _ota->print("\r\n");
     a40:	6820      	ldr	r0, [r4, #0]
    ota.okLines++;
     a42:	3301      	adds	r3, #1
     a44:	4913      	ldr	r1, [pc, #76]	; (a94 <OtaUpdater::tick()+0x4c8>)
     a46:	f8ca 3010 	str.w	r3, [sl, #16]
     a4a:	6803      	ldr	r3, [r0, #0]
     a4c:	685b      	ldr	r3, [r3, #4]
     a4e:	e6b3      	b.n	7b8 <OtaUpdater::tick()+0x1ec>
        int e = flash_write_block(addr, ota.hex.data, ota.hex.num);
     a50:	f7ff fc7c 	bl	34c <flash_write_block>
        if (e) ok = false;
     a54:	2800      	cmp	r0, #0
     a56:	f47f aea2 	bne.w	79e <OtaUpdater::tick()+0x1d2>
     a5a:	e7e7      	b.n	a2c <OtaUpdater::tick()+0x460>
     a5c:	20000404 	.word	0x20000404
     a60:	200003dc 	.word	0x200003dc
     a64:	200003fc 	.word	0x200003fc
     a68:	20000480 	.word	0x20000480
     a6c:	004e4f49 	.word	0x004e4f49
     a70:	20000490 	.word	0x20000490
     a74:	200079c8 	.word	0x200079c8
     a78:	200003d0 	.word	0x200003d0
     a7c:	20000494 	.word	0x20000494
     a80:	200004a4 	.word	0x200004a4
     a84:	20000460 	.word	0x20000460
     a88:	20000470 	.word	0x20000470
     a8c:	20000420 	.word	0x20000420
     a90:	200088f8 	.word	0x200088f8
     a94:	200003e8 	.word	0x200003e8

00000a98 <HardwareSerialIMXRT::operator bool()>:
	virtual void begin(uint32_t baud, uint32_t format) {
					  serial_begin(BAUD2DIV(baud));
					  serial_format(format); }
	*/

	operator bool()			{ return true; }
     a98:	2001      	movs	r0, #1
     a9a:	4770      	bx	lr

00000a9c <HardwareSerialIMXRT::availableForWrite()>:

int HardwareSerialIMXRT::availableForWrite(void)
{
	uint32_t head, tail;

	head = tx_buffer_head_;
     a9c:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
	tail = tx_buffer_tail_;
     aa0:	f8b0 2048 	ldrh.w	r2, [r0, #72]	; 0x48
	head = tx_buffer_head_;
     aa4:	b29b      	uxth	r3, r3
	tail = tx_buffer_tail_;
     aa6:	b292      	uxth	r2, r2
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
     aa8:	4293      	cmp	r3, r2
     aaa:	d202      	bcs.n	ab2 <HardwareSerialIMXRT::availableForWrite()+0x16>
	return tail - head - 1;
     aac:	3a01      	subs	r2, #1
     aae:	1ad0      	subs	r0, r2, r3
}
     ab0:	4770      	bx	lr
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
     ab2:	6b41      	ldr	r1, [r0, #52]	; 0x34
     ab4:	3901      	subs	r1, #1
     ab6:	440a      	add	r2, r1
     ab8:	1ad0      	subs	r0, r2, r3
     aba:	4770      	bx	lr

00000abc <HardwareSerialIMXRT::available()>:



int HardwareSerialIMXRT::available(void)
{
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
     abc:	6901      	ldr	r1, [r0, #16]
	uint32_t head, tail;

	// WATER> 0 so IDLE involved may want to check if port has already has RX data to retrieve
	__disable_irq();
     abe:	b672      	cpsid	i
	head = rx_buffer_head_;
     ac0:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
	tail = rx_buffer_tail_;
     ac4:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
	head = rx_buffer_head_;
     ac8:	b292      	uxth	r2, r2
	tail = rx_buffer_tail_;
     aca:	b29b      	uxth	r3, r3
	int avail;
	if (head >= tail) avail = head - tail;
     acc:	429a      	cmp	r2, r3
	else avail = rx_buffer_total_size_ + head - tail;	
     ace:	bf3c      	itt	cc
     ad0:	6b80      	ldrcc	r0, [r0, #56]	; 0x38
     ad2:	1812      	addcc	r2, r2, r0
	avail += (port->WATER >> 24) & 0x7;
     ad4:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
	else avail = rx_buffer_total_size_ + head - tail;	
     ad6:	1ad3      	subs	r3, r2, r3
	__enable_irq();
     ad8:	b662      	cpsie	i
	avail += (port->WATER >> 24) & 0x7;
     ada:	f3c0 6002 	ubfx	r0, r0, #24, #3
	return avail;
}
     ade:	4418      	add	r0, r3
     ae0:	4770      	bx	lr
     ae2:	bf00      	nop

00000ae4 <HardwareSerialIMXRT::peek()>:
int HardwareSerialIMXRT::peek(void)
{
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
	uint32_t head, tail;

	head = rx_buffer_head_;
     ae4:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
{
     ae8:	4602      	mov	r2, r0
	tail = rx_buffer_tail_;
     aea:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
	head = rx_buffer_head_;
     aee:	b289      	uxth	r1, r1
	tail = rx_buffer_tail_;
     af0:	b29b      	uxth	r3, r3
	if (head == tail) {
     af2:	4299      	cmp	r1, r3
{
     af4:	b410      	push	{r4}
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
     af6:	6904      	ldr	r4, [r0, #16]
	if (head == tail) {
     af8:	d014      	beq.n	b24 <HardwareSerialIMXRT::peek()+0x40>
			return c;
		}
		__enable_irq();

	} 
	if (++tail >= rx_buffer_total_size_) tail = 0;
     afa:	3301      	adds	r3, #1
     afc:	6b90      	ldr	r0, [r2, #56]	; 0x38
	if (tail < rx_buffer_size_) {
     afe:	6b11      	ldr	r1, [r2, #48]	; 0x30
	if (++tail >= rx_buffer_total_size_) tail = 0;
     b00:	4298      	cmp	r0, r3
     b02:	bf98      	it	ls
     b04:	2300      	movls	r3, #0
	if (tail < rx_buffer_size_) {
     b06:	4299      	cmp	r1, r3
     b08:	d806      	bhi.n	b18 <HardwareSerialIMXRT::peek()+0x34>
		return rx_buffer_[tail];
	} else {
		return rx_buffer_storage_[tail-rx_buffer_size_];
     b0a:	1a5b      	subs	r3, r3, r1
     b0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
     b0e:	5cd0      	ldrb	r0, [r2, r3]
     b10:	b2c0      	uxtb	r0, r0
	}
}
     b12:	f85d 4b04 	ldr.w	r4, [sp], #4
     b16:	4770      	bx	lr
		return rx_buffer_[tail];
     b18:	6a12      	ldr	r2, [r2, #32]
}
     b1a:	f85d 4b04 	ldr.w	r4, [sp], #4
		return rx_buffer_[tail];
     b1e:	5cd0      	ldrb	r0, [r2, r3]
     b20:	b2c0      	uxtb	r0, r0
}
     b22:	4770      	bx	lr
		__disable_irq();
     b24:	b672      	cpsid	i
		head = rx_buffer_head_;  // reread head to make sure no ISR happened
     b26:	f8b0 004a 	ldrh.w	r0, [r0, #74]	; 0x4a
     b2a:	b280      	uxth	r0, r0
		if (head == tail) {
     b2c:	4281      	cmp	r1, r0
     b2e:	d001      	beq.n	b34 <HardwareSerialIMXRT::peek()+0x50>
		__enable_irq();
     b30:	b662      	cpsie	i
     b32:	e7e2      	b.n	afa <HardwareSerialIMXRT::peek()+0x16>
			if (port->WATER & 0x7000000) {
     b34:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     b36:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
     b3a:	d103      	bne.n	b44 <HardwareSerialIMXRT::peek()+0x60>
			int c = -1;	// assume nothing to return
     b3c:	f04f 30ff 	mov.w	r0, #4294967295
			__enable_irq();
     b40:	b662      	cpsie	i
			return c;
     b42:	e7e6      	b.n	b12 <HardwareSerialIMXRT::peek()+0x2e>
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
     b44:	69e3      	ldr	r3, [r4, #28]
				rx_buffer_head_ = 1;
     b46:	2001      	movs	r0, #1
				rx_buffer_tail_ = 0; 
     b48:	2400      	movs	r4, #0
				rx_buffer_[1] = c;
     b4a:	6a11      	ldr	r1, [r2, #32]
				rx_buffer_head_ = 1;
     b4c:	f8a2 004a 	strh.w	r0, [r2, #74]	; 0x4a
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
     b50:	f3c3 0009 	ubfx	r0, r3, #0, #10
				rx_buffer_[1] = c;
     b54:	b2db      	uxtb	r3, r3
				rx_buffer_tail_ = 0; 
     b56:	f8a2 404c 	strh.w	r4, [r2, #76]	; 0x4c
				rx_buffer_[1] = c;
     b5a:	704b      	strb	r3, [r1, #1]
     b5c:	e7f0      	b.n	b40 <HardwareSerialIMXRT::peek()+0x5c>
     b5e:	bf00      	nop

00000b60 <HardwareSerialIMXRT::read()>:
{
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
	uint32_t head, tail;
	int c;

	head = rx_buffer_head_;
     b60:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
{
     b64:	4602      	mov	r2, r0
	tail = rx_buffer_tail_;
     b66:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
	head = rx_buffer_head_;
     b6a:	b289      	uxth	r1, r1
	tail = rx_buffer_tail_;
     b6c:	b29b      	uxth	r3, r3
	if (head == tail) {
     b6e:	4299      	cmp	r1, r3
{
     b70:	b430      	push	{r4, r5}
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
     b72:	6904      	ldr	r4, [r0, #16]
	if (head == tail) {
     b74:	d025      	beq.n	bc2 <HardwareSerialIMXRT::read()+0x62>
			return c;
		}
		__enable_irq();

	}
	if (++tail >= rx_buffer_total_size_) tail = 0;
     b76:	3301      	adds	r3, #1
     b78:	6b94      	ldr	r4, [r2, #56]	; 0x38
     b7a:	429c      	cmp	r4, r3
     b7c:	d916      	bls.n	bac <HardwareSerialIMXRT::read()+0x4c>
	if (tail < rx_buffer_size_) {
     b7e:	6b10      	ldr	r0, [r2, #48]	; 0x30
		c = rx_buffer_[tail];
	} else {
		c = rx_buffer_storage_[tail-rx_buffer_size_];
	}
	rx_buffer_tail_ = tail;
     b80:	fa1f fc83 	uxth.w	ip, r3
	if (tail < rx_buffer_size_) {
     b84:	4298      	cmp	r0, r3
     b86:	d917      	bls.n	bb8 <HardwareSerialIMXRT::read()+0x58>
		c = rx_buffer_[tail];
     b88:	6a10      	ldr	r0, [r2, #32]
     b8a:	5cc0      	ldrb	r0, [r0, r3]
     b8c:	b2c0      	uxtb	r0, r0
	if (rts_pin_baseReg_) {
     b8e:	6d95      	ldr	r5, [r2, #88]	; 0x58
	rx_buffer_tail_ = tail;
     b90:	f8a2 c04c 	strh.w	ip, [r2, #76]	; 0x4c
	if (rts_pin_baseReg_) {
     b94:	b145      	cbz	r5, ba8 <HardwareSerialIMXRT::read()+0x48>
		uint32_t avail;
		if (head >= tail) avail = head - tail;
     b96:	4299      	cmp	r1, r3
     b98:	d31c      	bcc.n	bd4 <HardwareSerialIMXRT::read()+0x74>
     b9a:	1acb      	subs	r3, r1, r3
		else avail = rx_buffer_total_size_ + head - tail;

		if (avail <= rts_low_watermark_) rts_assert();
     b9c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
     b9e:	4299      	cmp	r1, r3
     ba0:	d302      	bcc.n	ba8 <HardwareSerialIMXRT::read()+0x48>
	DIRECT_WRITE_LOW(rts_pin_baseReg_, rts_pin_bitmask_);
     ba2:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
     ba4:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
	}
	return c;
}	
     ba8:	bc30      	pop	{r4, r5}
     baa:	4770      	bx	lr
     bac:	f04f 0c00 	mov.w	ip, #0
	if (tail < rx_buffer_size_) {
     bb0:	6b10      	ldr	r0, [r2, #48]	; 0x30
	if (++tail >= rx_buffer_total_size_) tail = 0;
     bb2:	4663      	mov	r3, ip
	if (tail < rx_buffer_size_) {
     bb4:	4298      	cmp	r0, r3
     bb6:	d8e7      	bhi.n	b88 <HardwareSerialIMXRT::read()+0x28>
		c = rx_buffer_storage_[tail-rx_buffer_size_];
     bb8:	1a18      	subs	r0, r3, r0
     bba:	6a55      	ldr	r5, [r2, #36]	; 0x24
     bbc:	5c28      	ldrb	r0, [r5, r0]
     bbe:	b2c0      	uxtb	r0, r0
     bc0:	e7e5      	b.n	b8e <HardwareSerialIMXRT::read()+0x2e>
     bc2:	4608      	mov	r0, r1
		__disable_irq();
     bc4:	b672      	cpsid	i
		head = rx_buffer_head_;  // reread head to make sure no ISR happened
     bc6:	f8b2 104a 	ldrh.w	r1, [r2, #74]	; 0x4a
     bca:	b289      	uxth	r1, r1
		if (head == tail) {
     bcc:	4288      	cmp	r0, r1
     bce:	d004      	beq.n	bda <HardwareSerialIMXRT::read()+0x7a>
		__enable_irq();
     bd0:	b662      	cpsie	i
     bd2:	e7d0      	b.n	b76 <HardwareSerialIMXRT::read()+0x16>
		else avail = rx_buffer_total_size_ + head - tail;
     bd4:	440c      	add	r4, r1
     bd6:	1ae3      	subs	r3, r4, r3
     bd8:	e7e0      	b.n	b9c <HardwareSerialIMXRT::read()+0x3c>
			if (port->WATER & 0x7000000) {
     bda:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     bdc:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
     be0:	d103      	bne.n	bea <HardwareSerialIMXRT::read()+0x8a>
			c = -1;	// assume nothing to return
     be2:	f04f 30ff 	mov.w	r0, #4294967295
			__enable_irq();
     be6:	b662      	cpsie	i
			return c;
     be8:	e7de      	b.n	ba8 <HardwareSerialIMXRT::read()+0x48>
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
     bea:	69e0      	ldr	r0, [r4, #28]
     bec:	f3c0 0009 	ubfx	r0, r0, #0, #10
     bf0:	e7f9      	b.n	be6 <HardwareSerialIMXRT::read()+0x86>
     bf2:	bf00      	nop

00000bf4 <HardwareSerialIMXRT::flush()>:

void HardwareSerialIMXRT::flush(void)
{
	while (transmitting_) yield(); // wait
     bf4:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
     bf8:	b143      	cbz	r3, c0c <HardwareSerialIMXRT::flush()+0x18>
{
     bfa:	b510      	push	{r4, lr}
     bfc:	4604      	mov	r4, r0
	while (transmitting_) yield(); // wait
     bfe:	f002 f831 	bl	2c64 <yield>
     c02:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
     c06:	2b00      	cmp	r3, #0
     c08:	d1f9      	bne.n	bfe <HardwareSerialIMXRT::flush()+0xa>
}
     c0a:	bd10      	pop	{r4, pc}
     c0c:	4770      	bx	lr
     c0e:	bf00      	nop

00000c10 <HardwareSerialIMXRT::end()>:
{
     c10:	b538      	push	{r3, r4, r5, lr}
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
     c12:	e9d0 5304 	ldrd	r5, r3, [r0, #16]
	if (!(hardware->ccm_register & hardware->ccm_value)) return;
     c16:	e9d3 1203 	ldrd	r1, r2, [r3, #12]
     c1a:	6809      	ldr	r1, [r1, #0]
     c1c:	4211      	tst	r1, r2
     c1e:	d028      	beq.n	c72 <HardwareSerialIMXRT::end()+0x62>
	while (transmitting_) yield();  // wait for buffered data to send
     c20:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
     c24:	4604      	mov	r4, r0
     c26:	b132      	cbz	r2, c36 <HardwareSerialIMXRT::end()+0x26>
     c28:	f002 f81c 	bl	2c64 <yield>
     c2c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
     c30:	2b00      	cmp	r3, #0
     c32:	d1f9      	bne.n	c28 <HardwareSerialIMXRT::end()+0x18>
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = 5;
     c34:	6963      	ldr	r3, [r4, #20]
	port->CTRL = 0;	// disable the TX and RX ...
     c36:	2100      	movs	r1, #0
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = 5;
     c38:	4a0e      	ldr	r2, [pc, #56]	; (c74 <HardwareSerialIMXRT::end()+0x64>)
	port->CTRL = 0;	// disable the TX and RX ...
     c3a:	61a9      	str	r1, [r5, #24]
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = 5;
     c3c:	7e20      	ldrb	r0, [r4, #24]
     c3e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
     c42:	7d00      	ldrb	r0, [r0, #20]
     c44:	eb02 1000 	add.w	r0, r2, r0, lsl #4
     c48:	6845      	ldr	r5, [r0, #4]
     c4a:	2005      	movs	r0, #5
     c4c:	6028      	str	r0, [r5, #0]
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = 5;
     c4e:	7e65      	ldrb	r5, [r4, #25]
     c50:	eb03 1305 	add.w	r3, r3, r5, lsl #4
     c54:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
     c58:	eb02 1203 	add.w	r2, r2, r3, lsl #4
	if (rts_pin_baseReg_) rts_deassert();
     c5c:	6da3      	ldr	r3, [r4, #88]	; 0x58
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = 5;
     c5e:	6852      	ldr	r2, [r2, #4]
     c60:	6010      	str	r0, [r2, #0]
	rx_buffer_head_ = 0;
     c62:	f8a4 104a 	strh.w	r1, [r4, #74]	; 0x4a
	rx_buffer_tail_ = 0;
     c66:	f8a4 104c 	strh.w	r1, [r4, #76]	; 0x4c
	if (rts_pin_baseReg_) rts_deassert();
     c6a:	b113      	cbz	r3, c72 <HardwareSerialIMXRT::end()+0x62>
	DIRECT_WRITE_HIGH(rts_pin_baseReg_, rts_pin_bitmask_);
     c6c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
     c6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
     c72:	bd38      	pop	{r3, r4, r5, pc}
     c74:	20007354 	.word	0x20007354

00000c78 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)>:
	float base = (float)UART_CLOCK / (float)baud;
     c78:	ee07 1a90 	vmov	s15, r1
     c7c:	ed9f 7a9a 	vldr	s14, [pc, #616]	; ee8 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x270>
	for (int osr=4; osr <= 32; osr++) {
     c80:	2104      	movs	r1, #4
		int divint = (int)(div + 0.5f);
     c82:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
	float base = (float)UART_CLOCK / (float)baud;
     c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
	float besterr = 1e20;
     c8a:	ed9f 6a98 	vldr	s12, [pc, #608]	; eec <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x274>
     c8e:	f641 7cff 	movw	ip, #8191	; 0x1fff
	float base = (float)UART_CLOCK / (float)baud;
     c92:	eec7 5a27 	vdiv.f32	s11, s14, s15
{
     c96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int bestosr = 4;
     c9a:	468e      	mov	lr, r1
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
     c9c:	6905      	ldr	r5, [r0, #16]
	int bestdiv = 1;
     c9e:	2401      	movs	r4, #1
		float div = base / (float)osr;
     ca0:	ee07 1a90 	vmov	s15, r1
     ca4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
     ca8:	ee85 7aa7 	vdiv.f32	s14, s11, s15
		int divint = (int)(div + 0.5f);
     cac:	ee77 7a05 	vadd.f32	s15, s14, s10
     cb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
     cb4:	ee17 3a90 	vmov	r3, s15
     cb8:	4563      	cmp	r3, ip
     cba:	bfa8      	it	ge
     cbc:	4663      	movge	r3, ip
     cbe:	2b01      	cmp	r3, #1
     cc0:	bfb8      	it	lt
     cc2:	2301      	movlt	r3, #1
		float err = ((float)divint - div) / div;
     cc4:	ee07 3a90 	vmov	s15, r3
     cc8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
     ccc:	ee76 6ac7 	vsub.f32	s13, s13, s14
     cd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
		if (err < 0.0f) err = -err;
     cd4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
     cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     cdc:	bf48      	it	mi
     cde:	eef1 7a67 	vnegmi.f32	s15, s15
		if (err <= besterr) {
     ce2:	eef4 7ac6 	vcmpe.f32	s15, s12
     ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     cea:	d803      	bhi.n	cf4 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x7c>
			besterr = err;
     cec:	eeb0 6a67 	vmov.f32	s12, s15
		if (err <= besterr) {
     cf0:	468e      	mov	lr, r1
			bestdiv = divint;
     cf2:	461c      	mov	r4, r3
	for (int osr=4; osr <= 32; osr++) {
     cf4:	3101      	adds	r1, #1
     cf6:	2921      	cmp	r1, #33	; 0x21
     cf8:	d1d2      	bne.n	ca0 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x28>
	rx_buffer_head_ = 0;
     cfa:	2100      	movs	r1, #0
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
     cfc:	6943      	ldr	r3, [r0, #20]
     cfe:	f402 7600 	and.w	r6, r2, #512	; 0x200
	rx_buffer_head_ = 0;
     d02:	f8a0 104a 	strh.w	r1, [r0, #74]	; 0x4a
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
     d06:	f8b3 c05a 	ldrh.w	ip, [r3, #90]	; 0x5a
	half_duplex_mode_ = (format & SERIAL_HALF_DUPLEX) != 0;
     d0a:	428e      	cmp	r6, r1
	rx_buffer_tail_ = 0;
     d0c:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
     d10:	f8b3 6058 	ldrh.w	r6, [r3, #88]	; 0x58
	tx_buffer_head_ = 0;
     d14:	f8a0 1046 	strh.w	r1, [r0, #70]	; 0x46
	tx_buffer_tail_ = 0;
     d18:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
	transmitting_ = 0;
     d1c:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
     d20:	6b81      	ldr	r1, [r0, #56]	; 0x38
	hardware->ccm_register |= hardware->ccm_value;
     d22:	68df      	ldr	r7, [r3, #12]
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
     d24:	eba1 0606 	sub.w	r6, r1, r6
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
     d28:	eba1 010c 	sub.w	r1, r1, ip
     d2c:	e9c0 610f 	strd	r6, r1, [r0, #60]	; 0x3c
	hardware->ccm_register |= hardware->ccm_value;
     d30:	6839      	ldr	r1, [r7, #0]
     d32:	691e      	ldr	r6, [r3, #16]
     d34:	ea41 0106 	orr.w	r1, r1, r6
     d38:	6039      	str	r1, [r7, #0]
	half_duplex_mode_ = (format & SERIAL_HALF_DUPLEX) != 0;
     d3a:	bf14      	ite	ne
     d3c:	2101      	movne	r1, #1
     d3e:	2100      	moveq	r1, #0
     d40:	7681      	strb	r1, [r0, #26]
	if (!half_duplex_mode_)  {
     d42:	f040 80ac 	bne.w	e9e <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x226>
		*(portControlRegister(hardware->rx_pins[rx_pin_index_].pin)) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     d46:	7e01      	ldrb	r1, [r0, #24]
     d48:	4e69      	ldr	r6, [pc, #420]	; (ef0 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x278>)
     d4a:	eb03 1801 	add.w	r8, r3, r1, lsl #4
     d4e:	f8df 91c0 	ldr.w	r9, [pc, #448]	; f10 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x298>
     d52:	f898 7014 	ldrb.w	r7, [r8, #20]
		if (hardware->rx_pins[rx_pin_index_].select_input_register) {
     d56:	f8d8 a01c 	ldr.w	sl, [r8, #28]
		*(portControlRegister(hardware->rx_pins[rx_pin_index_].pin)) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     d5a:	eb06 1707 	add.w	r7, r6, r7, lsl #4
     d5e:	68b9      	ldr	r1, [r7, #8]
     d60:	f8c1 9000 	str.w	r9, [r1]
		*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = hardware->rx_pins[rx_pin_index_].mux_val;
     d64:	6879      	ldr	r1, [r7, #4]
     d66:	f8d8 7018 	ldr.w	r7, [r8, #24]
     d6a:	600f      	str	r7, [r1, #0]
		if (hardware->rx_pins[rx_pin_index_].select_input_register) {
     d6c:	f1ba 0f00 	cmp.w	sl, #0
     d70:	d003      	beq.n	d7a <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x102>
		 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
     d72:	f8d8 1020 	ldr.w	r1, [r8, #32]
     d76:	f8ca 1000 	str.w	r1, [sl]
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
     d7a:	7e47      	ldrb	r7, [r0, #25]
     d7c:	21d9      	movs	r1, #217	; 0xd9
     d7e:	eb03 1807 	add.w	r8, r3, r7, lsl #4
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3) 
     d82:	f898 c034 	ldrb.w	ip, [r8, #52]	; 0x34
     d86:	eb06 1c0c 	add.w	ip, r6, ip, lsl #4
     d8a:	f8dc 7008 	ldr.w	r7, [ip, #8]
     d8e:	6039      	str	r1, [r7, #0]
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
     d90:	f8dc 1004 	ldr.w	r1, [ip, #4]
     d94:	f8d8 7038 	ldr.w	r7, [r8, #56]	; 0x38
     d98:	600f      	str	r7, [r1, #0]
	if (hardware->tx_pins[tx_pin_index_].select_input_register) {
     d9a:	7e41      	ldrb	r1, [r0, #25]
     d9c:	eb03 1101 	add.w	r1, r3, r1, lsl #4
     da0:	6bcf      	ldr	r7, [r1, #60]	; 0x3c
     da2:	b10f      	cbz	r7, da8 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x130>
	 	*(hardware->tx_pins[tx_pin_index_].select_input_register) =  hardware->tx_pins[tx_pin_index_].select_val;		
     da4:	6c09      	ldr	r1, [r1, #64]	; 0x40
     da6:	6039      	str	r1, [r7, #0]
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
     da8:	f10e 31ff 	add.w	r1, lr, #4294967295
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
     dac:	f1be 0f08 	cmp.w	lr, #8
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
     db0:	ea4f 6101 	mov.w	r1, r1, lsl #24
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
     db4:	bfcc      	ite	gt
     db6:	f04f 0e00 	movgt.w	lr, #0
     dba:	f04f 0e01 	movle.w	lr, #1
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
     dbe:	f001 51f8 	and.w	r1, r1, #520093696	; 0x1f000000
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
     dc2:	ea44 444e 	orr.w	r4, r4, lr, lsl #17
     dc6:	4321      	orrs	r1, r4
	attachInterruptVector(hardware->irq, hardware->irq_handler);
     dc8:	685c      	ldr	r4, [r3, #4]
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
     dca:	6129      	str	r1, [r5, #16]
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
     dcc:	7859      	ldrb	r1, [r3, #1]
     dce:	f101 0310 	add.w	r3, r1, #16
	port->PINCFG = 0;
     dd2:	2100      	movs	r1, #0
     dd4:	60e9      	str	r1, [r5, #12]
     dd6:	4947      	ldr	r1, [pc, #284]	; (ef4 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x27c>)
     dd8:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
     ddc:	6941      	ldr	r1, [r0, #20]
	NVIC_ENABLE_IRQ(hardware->irq);
     dde:	f04f 0e01 	mov.w	lr, #1
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
     de2:	4c45      	ldr	r4, [pc, #276]	; (ef8 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x280>)
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
     de4:	f002 0c03 	and.w	ip, r2, #3
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
     de8:	784f      	ldrb	r7, [r1, #1]
     dea:	f891 1056 	ldrb.w	r1, [r1, #86]	; 0x56
	NVIC_ENABLE_IRQ(hardware->irq);
     dee:	4b43      	ldr	r3, [pc, #268]	; (efc <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x284>)
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
     df0:	5539      	strb	r1, [r7, r4]
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
     df2:	f04f 1702 	mov.w	r7, #131074	; 0x20002
	NVIC_ENABLE_IRQ(hardware->irq);
     df6:	6944      	ldr	r4, [r0, #20]
     df8:	7861      	ldrb	r1, [r4, #1]
     dfa:	eb03 1351 	add.w	r3, r3, r1, lsr #5
     dfe:	f001 011f 	and.w	r1, r1, #31
     e02:	009b      	lsls	r3, r3, #2
     e04:	fa0e f101 	lsl.w	r1, lr, r1
     e08:	6019      	str	r1, [r3, #0]
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
     e0a:	62ef      	str	r7, [r5, #44]	; 0x2c
	port->FIFO |= LPUART_FIFO_TXFE | LPUART_FIFO_RXFE;
     e0c:	6aab      	ldr	r3, [r5, #40]	; 0x28
     e0e:	f043 0388 	orr.w	r3, r3, #136	; 0x88
     e12:	62ab      	str	r3, [r5, #40]	; 0x28
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
     e14:	0753      	lsls	r3, r2, #29
     e16:	d43e      	bmi.n	e96 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x21e>
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
     e18:	f44c 1370 	orr.w	r3, ip, #3932160	; 0x3c0000
	if ((format & 0x0F) == 0x04) ctrl |=  LPUART_CTRL_R9T8; // 8N2 is 9 bit with 9th bit always 1
     e1c:	f002 010f 	and.w	r1, r2, #15
     e20:	2904      	cmp	r1, #4
     e22:	bf08      	it	eq
     e24:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
	if (format & 0x20) {
     e28:	0697      	lsls	r7, r2, #26
     e2a:	d52e      	bpl.n	e8a <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x212>
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
     e2c:	7e81      	ldrb	r1, [r0, #26]
		ctrl |= LPUART_CTRL_TXINV;		// tx invert
     e2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
     e32:	2900      	cmp	r1, #0
     e34:	d13a      	bne.n	eac <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x234>
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
     e36:	0716      	lsls	r6, r2, #28
	port->CTRL = ctrl;
     e38:	61ab      	str	r3, [r5, #24]
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
     e3a:	d503      	bpl.n	e44 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1cc>
     e3c:	692b      	ldr	r3, [r5, #16]
     e3e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
     e42:	612b      	str	r3, [r5, #16]
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
     e44:	696b      	ldr	r3, [r5, #20]
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
     e46:	06d1      	lsls	r1, r2, #27
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
     e48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
     e4c:	bf48      	it	mi
     e4e:	f043 5380 	orrmi.w	r3, r3, #268435456	; 0x10000000
	port->STAT = c;
     e52:	616b      	str	r3, [r5, #20]
	if ( format & 0x100) port->BAUD |= LPUART_BAUD_SBNS;	
     e54:	05d3      	lsls	r3, r2, #23
     e56:	d503      	bpl.n	e60 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1e8>
     e58:	692b      	ldr	r3, [r5, #16]
     e5a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     e5e:	612b      	str	r3, [r5, #16]
	if (hardware->_serialEvent) addToSerialEventsList();
     e60:	68a3      	ldr	r3, [r4, #8]
     e62:	b183      	cbz	r3, e86 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x20e>
	//digitalWrite(4, LOW);
}


void HardwareSerialIMXRT::addToSerialEventsList() {
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
     e64:	4e26      	ldr	r6, [pc, #152]	; (f00 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x288>)
     e66:	7834      	ldrb	r4, [r6, #0]
     e68:	2c00      	cmp	r4, #0
     e6a:	d03a      	beq.n	ee2 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x26a>
     e6c:	1e61      	subs	r1, r4, #1
     e6e:	4d25      	ldr	r5, [pc, #148]	; (f04 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x28c>)
     e70:	b2c9      	uxtb	r1, r1
     e72:	1f2b      	subs	r3, r5, #4
     e74:	eb05 0181 	add.w	r1, r5, r1, lsl #2
     e78:	e001      	b.n	e7e <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x206>
     e7a:	4299      	cmp	r1, r3
     e7c:	d025      	beq.n	eca <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x252>
		if (s_serials_with_serial_events[i] == this) return; // already in the list.
     e7e:	f853 2f04 	ldr.w	r2, [r3, #4]!
     e82:	4290      	cmp	r0, r2
     e84:	d1f9      	bne.n	e7a <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x202>
};
     e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
     e8a:	7e81      	ldrb	r1, [r0, #26]
     e8c:	2900      	cmp	r1, #0
     e8e:	d0d2      	beq.n	e36 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1be>
     e90:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
     e94:	e7cf      	b.n	e36 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1be>
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
     e96:	4b1c      	ldr	r3, [pc, #112]	; (f08 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x290>)
     e98:	ea4c 0303 	orr.w	r3, ip, r3
     e9c:	e7be      	b.n	e1c <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1a4>
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3) 
     e9e:	7e47      	ldrb	r7, [r0, #25]
     ea0:	f24f 01d9 	movw	r1, #61657	; 0xf0d9
     ea4:	4e12      	ldr	r6, [pc, #72]	; (ef0 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x278>)
     ea6:	eb03 1807 	add.w	r8, r3, r7, lsl #4
     eaa:	e76a      	b.n	d82 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x10a>
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
     eac:	7e41      	ldrb	r1, [r0, #25]
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
     eae:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
     eb2:	eb04 1101 	add.w	r1, r4, r1, lsl #4
     eb6:	f891 1034 	ldrb.w	r1, [r1, #52]	; 0x34
     eba:	eb06 1601 	add.w	r6, r6, r1, lsl #4
     ebe:	68b6      	ldr	r6, [r6, #8]
     ec0:	6831      	ldr	r1, [r6, #0]
     ec2:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
     ec6:	6031      	str	r1, [r6, #0]
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
     ec8:	e7b5      	b.n	e36 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1be>
	}
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
     eca:	1c63      	adds	r3, r4, #1
     ecc:	b2db      	uxtb	r3, r3
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
     ece:	4a0f      	ldr	r2, [pc, #60]	; (f0c <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x294>)
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
     ed0:	7033      	strb	r3, [r6, #0]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
     ed2:	7813      	ldrb	r3, [r2, #0]
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
     ed4:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
     ed8:	f043 0302 	orr.w	r3, r3, #2
     edc:	7013      	strb	r3, [r2, #0]
};
     ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
     ee2:	2301      	movs	r3, #1
     ee4:	4d07      	ldr	r5, [pc, #28]	; (f04 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x28c>)
     ee6:	e7f2      	b.n	ece <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x256>
     ee8:	4bb71b00 	.word	0x4bb71b00
     eec:	60ad78ec 	.word	0x60ad78ec
     ef0:	20007354 	.word	0x20007354
     ef4:	20008400 	.word	0x20008400
     ef8:	e000e400 	.word	0xe000e400
     efc:	38003840 	.word	0x38003840
     f00:	20008cdb 	.word	0x20008cdb
     f04:	200089c0 	.word	0x200089c0
     f08:	003c0010 	.word	0x003c0010
     f0c:	20008cea 	.word	0x20008cea
     f10:	0001f038 	.word	0x0001f038

00000f14 <nvic_execution_priority()>:
	__asm__ volatile("mrs %0, faultmask\n" : "=r" (faultmask)::);
     f14:	f3ef 8013 	mrs	r0, FAULTMASK
	if (faultmask) return -1;
     f18:	b9b8      	cbnz	r0, f4a <nvic_execution_priority()+0x36>
	__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
     f1a:	f3ef 8310 	mrs	r3, PRIMASK
	if (primask) return 0;
     f1e:	b94b      	cbnz	r3, f34 <nvic_execution_priority()+0x20>
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
     f20:	f3ef 8205 	mrs	r2, IPSR
	if (ipsr) {
     f24:	b93a      	cbnz	r2, f36 <nvic_execution_priority()+0x22>
	uint32_t priority=256;
     f26:	f44f 7380 	mov.w	r3, #256	; 0x100
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
     f2a:	f3ef 8011 	mrs	r0, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
     f2e:	b150      	cbz	r0, f46 <nvic_execution_priority()+0x32>
     f30:	4298      	cmp	r0, r3
     f32:	d208      	bcs.n	f46 <nvic_execution_priority()+0x32>
}
     f34:	4770      	bx	lr
		if (ipsr < 16) priority = 0; // could be non-zero
     f36:	2a0f      	cmp	r2, #15
     f38:	d9f7      	bls.n	f2a <nvic_execution_priority()+0x16>
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
     f3a:	4b05      	ldr	r3, [pc, #20]	; (f50 <nvic_execution_priority()+0x3c>)
     f3c:	5c9b      	ldrb	r3, [r3, r2]
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
     f3e:	f3ef 8011 	mrs	r0, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
     f42:	2800      	cmp	r0, #0
     f44:	d1f4      	bne.n	f30 <nvic_execution_priority()+0x1c>
     f46:	4618      	mov	r0, r3
	return priority;
     f48:	4770      	bx	lr
	if (faultmask) return -1;
     f4a:	f04f 30ff 	mov.w	r0, #4294967295
     f4e:	e7f1      	b.n	f34 <nvic_execution_priority()+0x20>
     f50:	e000e3f0 	.word	0xe000e3f0

00000f54 <HardwareSerialIMXRT::write9bit(unsigned long)>:
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
     f54:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
     f56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     f5a:	4604      	mov	r4, r0
     f5c:	460f      	mov	r7, r1
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
     f5e:	6906      	ldr	r6, [r0, #16]
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
     f60:	b113      	cbz	r3, f68 <HardwareSerialIMXRT::write9bit(unsigned long)+0x14>
     f62:	6d42      	ldr	r2, [r0, #84]	; 0x54
     f64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	if(half_duplex_mode_) {		
     f68:	7ea3      	ldrb	r3, [r4, #26]
     f6a:	b12b      	cbz	r3, f78 <HardwareSerialIMXRT::write9bit(unsigned long)+0x24>
		__disable_irq();
     f6c:	b672      	cpsid	i
	    port->CTRL |= LPUART_CTRL_TXDIR;
     f6e:	69b3      	ldr	r3, [r6, #24]
     f70:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
     f74:	61b3      	str	r3, [r6, #24]
		__enable_irq();
     f76:	b662      	cpsie	i
	head = tx_buffer_head_;
     f78:	f8b4 5046 	ldrh.w	r5, [r4, #70]	; 0x46
	if (++head >= tx_buffer_total_size_) head = 0;
     f7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
	head = tx_buffer_head_;
     f7e:	b2ad      	uxth	r5, r5
	if (++head >= tx_buffer_total_size_) head = 0;
     f80:	3501      	adds	r5, #1
     f82:	42ab      	cmp	r3, r5
     f84:	d84c      	bhi.n	1020 <HardwareSerialIMXRT::write9bit(unsigned long)+0xcc>
     f86:	f04f 0800 	mov.w	r8, #0
     f8a:	4645      	mov	r5, r8
	while (tx_buffer_tail_ == head) {
     f8c:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
     f90:	b29b      	uxth	r3, r3
     f92:	429d      	cmp	r5, r3
     f94:	d019      	beq.n	fca <HardwareSerialIMXRT::write9bit(unsigned long)+0x76>
     f96:	e028      	b.n	fea <HardwareSerialIMXRT::write9bit(unsigned long)+0x96>
			if ((port->STAT & LPUART_STAT_TDRE)) {
     f98:	6973      	ldr	r3, [r6, #20]
     f9a:	021b      	lsls	r3, r3, #8
     f9c:	d510      	bpl.n	fc0 <HardwareSerialIMXRT::write9bit(unsigned long)+0x6c>
				uint32_t tail = tx_buffer_tail_;
     f9e:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
				if (++tail >= tx_buffer_total_size_) tail = 0;
     fa2:	6b62      	ldr	r2, [r4, #52]	; 0x34
				uint32_t tail = tx_buffer_tail_;
     fa4:	b29b      	uxth	r3, r3
				if (++tail >= tx_buffer_total_size_) tail = 0;
     fa6:	3301      	adds	r3, #1
     fa8:	429a      	cmp	r2, r3
     faa:	d936      	bls.n	101a <HardwareSerialIMXRT::write9bit(unsigned long)+0xc6>
				tx_buffer_tail_ = tail;
     fac:	b29a      	uxth	r2, r3
				if (tail < tx_buffer_size_) {
     fae:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
     fb0:	4299      	cmp	r1, r3
     fb2:	d92d      	bls.n	1010 <HardwareSerialIMXRT::write9bit(unsigned long)+0xbc>
					n = tx_buffer_[tail];
     fb4:	69e1      	ldr	r1, [r4, #28]
     fb6:	5ccb      	ldrb	r3, [r1, r3]
     fb8:	b2db      	uxtb	r3, r3
				port->DATA  = n;
     fba:	61f3      	str	r3, [r6, #28]
				tx_buffer_tail_ = tail;
     fbc:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
	while (tx_buffer_tail_ == head) {
     fc0:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
     fc4:	b29b      	uxth	r3, r3
     fc6:	42ab      	cmp	r3, r5
     fc8:	d10f      	bne.n	fea <HardwareSerialIMXRT::write9bit(unsigned long)+0x96>
		int priority = nvic_execution_priority();
     fca:	f7ff ffa3 	bl	f14 <nvic_execution_priority()>
		if (priority <= hardware->irq_priority) {
     fce:	6963      	ldr	r3, [r4, #20]
     fd0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
     fd4:	4283      	cmp	r3, r0
     fd6:	dadf      	bge.n	f98 <HardwareSerialIMXRT::write9bit(unsigned long)+0x44>
		} else if (priority >= 256) 
     fd8:	28ff      	cmp	r0, #255	; 0xff
     fda:	ddf1      	ble.n	fc0 <HardwareSerialIMXRT::write9bit(unsigned long)+0x6c>
			yield(); // wait
     fdc:	f001 fe42 	bl	2c64 <yield>
	while (tx_buffer_tail_ == head) {
     fe0:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
     fe4:	b29b      	uxth	r3, r3
     fe6:	42ab      	cmp	r3, r5
     fe8:	d0ef      	beq.n	fca <HardwareSerialIMXRT::write9bit(unsigned long)+0x76>
	if (head < tx_buffer_size_) {
     fea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     fec:	42ab      	cmp	r3, r5
     fee:	d91a      	bls.n	1026 <HardwareSerialIMXRT::write9bit(unsigned long)+0xd2>
		tx_buffer_[head] = c;
     ff0:	b2ff      	uxtb	r7, r7
     ff2:	69e3      	ldr	r3, [r4, #28]
     ff4:	555f      	strb	r7, [r3, r5]
	__disable_irq();
     ff6:	b672      	cpsid	i
	transmitting_ = 1;
     ff8:	2001      	movs	r0, #1
     ffa:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
	tx_buffer_head_ = head;
     ffe:	f8a4 8046 	strh.w	r8, [r4, #70]	; 0x46
	port->CTRL |= LPUART_CTRL_TIE; // (may need to handle this issue)BITBAND_SET_BIT(LPUART0_CTRL, TIE_BIT);
    1002:	69b3      	ldr	r3, [r6, #24]
    1004:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    1008:	61b3      	str	r3, [r6, #24]
	__enable_irq();
    100a:	b662      	cpsie	i
}
    100c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					n = tx_buffer_storage_[tail-tx_buffer_size_];
    1010:	1a5b      	subs	r3, r3, r1
    1012:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    1014:	5ccb      	ldrb	r3, [r1, r3]
    1016:	b2db      	uxtb	r3, r3
    1018:	e7cf      	b.n	fba <HardwareSerialIMXRT::write9bit(unsigned long)+0x66>
    101a:	2200      	movs	r2, #0
				if (++tail >= tx_buffer_total_size_) tail = 0;
    101c:	4613      	mov	r3, r2
    101e:	e7c6      	b.n	fae <HardwareSerialIMXRT::write9bit(unsigned long)+0x5a>
	tx_buffer_head_ = head;
    1020:	fa1f f885 	uxth.w	r8, r5
    1024:	e7b2      	b.n	f8c <HardwareSerialIMXRT::write9bit(unsigned long)+0x38>
		tx_buffer_storage_[head - tx_buffer_size_] = c;
    1026:	1aed      	subs	r5, r5, r3
    1028:	b2ff      	uxtb	r7, r7
    102a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    102c:	555f      	strb	r7, [r3, r5]
    102e:	e7e2      	b.n	ff6 <HardwareSerialIMXRT::write9bit(unsigned long)+0xa2>

00001030 <HardwareSerialIMXRT::write(unsigned char)>:
	return write9bit(c);
    1030:	f7ff bf90 	b.w	f54 <HardwareSerialIMXRT::write9bit(unsigned long)>

00001034 <HardwareSerialIMXRT::IRQHandler()>:
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    1034:	6902      	ldr	r2, [r0, #16]
	if (port->STAT & (LPUART_STAT_RDRF | LPUART_STAT_IDLE)) {
    1036:	6953      	ldr	r3, [r2, #20]
    1038:	f413 1f40 	tst.w	r3, #3145728	; 0x300000
{
    103c:	b570      	push	{r4, r5, r6, lr}
	if (port->STAT & (LPUART_STAT_RDRF | LPUART_STAT_IDLE)) {
    103e:	d043      	beq.n	10c8 <HardwareSerialIMXRT::IRQHandler()+0x94>
		uint8_t avail = (port->WATER >> 24) & 0x7;
    1040:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
		if (avail) {
    1042:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
		uint8_t avail = (port->WATER >> 24) & 0x7;
    1046:	f3c3 6e02 	ubfx	lr, r3, #24, #3
		if (avail) {
    104a:	d03a      	beq.n	10c2 <HardwareSerialIMXRT::IRQHandler()+0x8e>
			head = rx_buffer_head_;
    104c:	f8b0 504a 	ldrh.w	r5, [r0, #74]	; 0x4a
			tail = rx_buffer_tail_;
    1050:	f8b0 604c 	ldrh.w	r6, [r0, #76]	; 0x4c
			head = rx_buffer_head_;
    1054:	b2ad      	uxth	r5, r5
			tail = rx_buffer_tail_;
    1056:	b2b6      	uxth	r6, r6
    1058:	e007      	b.n	106a <HardwareSerialIMXRT::IRQHandler()+0x36>
						rx_buffer_[head] = n;
    105a:	6a01      	ldr	r1, [r0, #32]
    105c:	f801 c003 	strb.w	ip, [r1, r3]
			} while (--avail > 0) ;
    1060:	f10e 33ff 	add.w	r3, lr, #4294967295
    1064:	f013 0eff 	ands.w	lr, r3, #255	; 0xff
    1068:	d01d      	beq.n	10a6 <HardwareSerialIMXRT::IRQHandler()+0x72>
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    106a:	69d1      	ldr	r1, [r2, #28]
				newhead = head + 1;
    106c:	1c6b      	adds	r3, r5, #1
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    106e:	6b84      	ldr	r4, [r0, #56]	; 0x38
				if (newhead != rx_buffer_tail_) {
    1070:	f8b0 c04c 	ldrh.w	ip, [r0, #76]	; 0x4c
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    1074:	f3c1 0109 	ubfx	r1, r1, #0, #10
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    1078:	429c      	cmp	r4, r3
    107a:	bf98      	it	ls
    107c:	2300      	movls	r3, #0
				if (newhead != rx_buffer_tail_) {
    107e:	fa1f fc8c 	uxth.w	ip, ip
    1082:	459c      	cmp	ip, r3
    1084:	d0ec      	beq.n	1060 <HardwareSerialIMXRT::IRQHandler()+0x2c>
					if (newhead < rx_buffer_size_) {
    1086:	6b04      	ldr	r4, [r0, #48]	; 0x30
						rx_buffer_[head] = n;
    1088:	fa5f fc81 	uxtb.w	ip, r1
    108c:	461d      	mov	r5, r3
					if (newhead < rx_buffer_size_) {
    108e:	429c      	cmp	r4, r3
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    1090:	eba3 0404 	sub.w	r4, r3, r4
					if (newhead < rx_buffer_size_) {
    1094:	d8e1      	bhi.n	105a <HardwareSerialIMXRT::IRQHandler()+0x26>
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    1096:	6a43      	ldr	r3, [r0, #36]	; 0x24
    1098:	f803 c004 	strb.w	ip, [r3, r4]
			} while (--avail > 0) ;
    109c:	f10e 33ff 	add.w	r3, lr, #4294967295
    10a0:	f013 0eff 	ands.w	lr, r3, #255	; 0xff
    10a4:	d1e1      	bne.n	106a <HardwareSerialIMXRT::IRQHandler()+0x36>
			rx_buffer_head_ = head;
    10a6:	b2ab      	uxth	r3, r5
    10a8:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
			if (rts_pin_baseReg_) {
    10ac:	6d83      	ldr	r3, [r0, #88]	; 0x58
    10ae:	b143      	cbz	r3, 10c2 <HardwareSerialIMXRT::IRQHandler()+0x8e>
				if (head >= tail) avail = head - tail;
    10b0:	42b5      	cmp	r5, r6
    10b2:	d354      	bcc.n	115e <HardwareSerialIMXRT::IRQHandler()+0x12a>
    10b4:	1bad      	subs	r5, r5, r6
				if (avail >= rts_high_watermark_) rts_deassert();
    10b6:	6c01      	ldr	r1, [r0, #64]	; 0x40
    10b8:	42a9      	cmp	r1, r5
    10ba:	d802      	bhi.n	10c2 <HardwareSerialIMXRT::IRQHandler()+0x8e>
	DIRECT_WRITE_HIGH(rts_pin_baseReg_, rts_pin_bitmask_);
    10bc:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
    10be:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		if (port->STAT & LPUART_STAT_IDLE) {
    10c2:	6953      	ldr	r3, [r2, #20]
    10c4:	02d9      	lsls	r1, r3, #11
    10c6:	d445      	bmi.n	1154 <HardwareSerialIMXRT::IRQHandler()+0x120>
	ctrl = port->CTRL;
    10c8:	6996      	ldr	r6, [r2, #24]
	if ((ctrl & LPUART_CTRL_TIE) && (port->STAT & LPUART_STAT_TDRE))
    10ca:	0233      	lsls	r3, r6, #8
    10cc:	d528      	bpl.n	1120 <HardwareSerialIMXRT::IRQHandler()+0xec>
    10ce:	6953      	ldr	r3, [r2, #20]
    10d0:	021d      	lsls	r5, r3, #8
    10d2:	d525      	bpl.n	1120 <HardwareSerialIMXRT::IRQHandler()+0xec>
		head = tx_buffer_head_;
    10d4:	f8b0 5046 	ldrh.w	r5, [r0, #70]	; 0x46
		tail = tx_buffer_tail_;
    10d8:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
		head = tx_buffer_head_;
    10dc:	b2ad      	uxth	r5, r5
		tail = tx_buffer_tail_;
    10de:	b29b      	uxth	r3, r3
    10e0:	e006      	b.n	10f0 <HardwareSerialIMXRT::IRQHandler()+0xbc>
				n = tx_buffer_[tail];
    10e2:	69c1      	ldr	r1, [r0, #28]
    10e4:	5cc9      	ldrb	r1, [r1, r3]
    10e6:	b2c9      	uxtb	r1, r1
			port->DATA = n;
    10e8:	61d1      	str	r1, [r2, #28]
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
    10ea:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    10ec:	054c      	lsls	r4, r1, #21
    10ee:	d412      	bmi.n	1116 <HardwareSerialIMXRT::IRQHandler()+0xe2>
			if (head == tail) break;
    10f0:	42ab      	cmp	r3, r5
    10f2:	d038      	beq.n	1166 <HardwareSerialIMXRT::IRQHandler()+0x132>
			if (++tail >= tx_buffer_total_size_) tail = 0;
    10f4:	6b44      	ldr	r4, [r0, #52]	; 0x34
    10f6:	3301      	adds	r3, #1
			if (tail < tx_buffer_size_) {
    10f8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			if (++tail >= tx_buffer_total_size_) tail = 0;
    10fa:	429c      	cmp	r4, r3
    10fc:	bf98      	it	ls
    10fe:	2300      	movls	r3, #0
			if (tail < tx_buffer_size_) {
    1100:	4299      	cmp	r1, r3
				n = tx_buffer_storage_[tail-tx_buffer_size_];
    1102:	eba3 0401 	sub.w	r4, r3, r1
			if (tail < tx_buffer_size_) {
    1106:	d8ec      	bhi.n	10e2 <HardwareSerialIMXRT::IRQHandler()+0xae>
				n = tx_buffer_storage_[tail-tx_buffer_size_];
    1108:	6a81      	ldr	r1, [r0, #40]	; 0x28
    110a:	5d09      	ldrb	r1, [r1, r4]
    110c:	b2c9      	uxtb	r1, r1
			port->DATA = n;
    110e:	61d1      	str	r1, [r2, #28]
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
    1110:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    1112:	054c      	lsls	r4, r1, #21
    1114:	d5ec      	bpl.n	10f0 <HardwareSerialIMXRT::IRQHandler()+0xbc>
		tx_buffer_tail_ = tail;
    1116:	b299      	uxth	r1, r3
		if (head == tail) {
    1118:	42ab      	cmp	r3, r5
		tx_buffer_tail_ = tail;
    111a:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
		if (head == tail) {
    111e:	d025      	beq.n	116c <HardwareSerialIMXRT::IRQHandler()+0x138>
	if ((ctrl & LPUART_CTRL_TCIE) && (port->STAT & LPUART_STAT_TC))
    1120:	0271      	lsls	r1, r6, #9
    1122:	d516      	bpl.n	1152 <HardwareSerialIMXRT::IRQHandler()+0x11e>
    1124:	6953      	ldr	r3, [r2, #20]
    1126:	025b      	lsls	r3, r3, #9
    1128:	d513      	bpl.n	1152 <HardwareSerialIMXRT::IRQHandler()+0x11e>
		transmitting_ = 0;
    112a:	2100      	movs	r1, #0
		if (transmit_pin_baseReg_) DIRECT_WRITE_LOW(transmit_pin_baseReg_, transmit_pin_bitmask_);
    112c:	6d03      	ldr	r3, [r0, #80]	; 0x50
		transmitting_ = 0;
    112e:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
		if (transmit_pin_baseReg_) DIRECT_WRITE_LOW(transmit_pin_baseReg_, transmit_pin_bitmask_);
    1132:	b113      	cbz	r3, 113a <HardwareSerialIMXRT::IRQHandler()+0x106>
    1134:	6d41      	ldr	r1, [r0, #84]	; 0x54
    1136:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
		if(half_duplex_mode_) {		
    113a:	7e83      	ldrb	r3, [r0, #26]
    113c:	b12b      	cbz	r3, 114a <HardwareSerialIMXRT::IRQHandler()+0x116>
			__disable_irq();
    113e:	b672      	cpsid	i
		    port->CTRL &= ~LPUART_CTRL_TXDIR;
    1140:	6993      	ldr	r3, [r2, #24]
    1142:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
    1146:	6193      	str	r3, [r2, #24]
			__enable_irq();
    1148:	b662      	cpsie	i
		port->CTRL &= ~LPUART_CTRL_TCIE;
    114a:	6993      	ldr	r3, [r2, #24]
    114c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
    1150:	6193      	str	r3, [r2, #24]
}
    1152:	bd70      	pop	{r4, r5, r6, pc}
			port->STAT |= LPUART_STAT_IDLE;	// writing a 1 to idle should clear it. 
    1154:	6953      	ldr	r3, [r2, #20]
    1156:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    115a:	6153      	str	r3, [r2, #20]
    115c:	e7b4      	b.n	10c8 <HardwareSerialIMXRT::IRQHandler()+0x94>
				else avail = rx_buffer_total_size_ + head - tail;
    115e:	6b81      	ldr	r1, [r0, #56]	; 0x38
    1160:	1b89      	subs	r1, r1, r6
    1162:	440d      	add	r5, r1
    1164:	e7a7      	b.n	10b6 <HardwareSerialIMXRT::IRQHandler()+0x82>
		tx_buffer_tail_ = tail;
    1166:	b29b      	uxth	r3, r3
    1168:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
			port->CTRL &= ~LPUART_CTRL_TIE; 
    116c:	6993      	ldr	r3, [r2, #24]
    116e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    1172:	6193      	str	r3, [r2, #24]
  			port->CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
    1174:	6993      	ldr	r3, [r2, #24]
    1176:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    117a:	6193      	str	r3, [r2, #24]
    117c:	e7d0      	b.n	1120 <HardwareSerialIMXRT::IRQHandler()+0xec>
    117e:	bf00      	nop

00001180 <IRQHandler_Serial2>:
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest


void IRQHandler_Serial2()
{
	Serial2.IRQHandler();
    1180:	4801      	ldr	r0, [pc, #4]	; (1188 <IRQHandler_Serial2+0x8>)
    1182:	f7ff bf57 	b.w	1034 <HardwareSerialIMXRT::IRQHandler()>
    1186:	bf00      	nop
    1188:	20007968 	.word	0x20007968

0000118c <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    118c:	4608      	mov	r0, r1
    118e:	f001 bcd5 	b.w	2b3c <usb_serial_putchar>
    1192:	bf00      	nop

00001194 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>:
		base = 10;
    1194:	2a01      	cmp	r2, #1
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    1196:	b570      	push	{r4, r5, r6, lr}
		base = 10;
    1198:	bf08      	it	eq
    119a:	220a      	moveq	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    119c:	b08a      	sub	sp, #40	; 0x28
	if (n == 0) {
    119e:	b391      	cbz	r1, 1206 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x72>
		i = sizeof(buf) - 1;
    11a0:	f04f 0e21 	mov.w	lr, #33	; 0x21
    11a4:	e001      	b.n	11aa <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x16>
			i--;
    11a6:	fa5f fe86 	uxtb.w	lr, r6
    11aa:	f10e 36ff 	add.w	r6, lr, #4294967295
			digit = n % base;
    11ae:	fbb1 f5f2 	udiv	r5, r1, r2
    11b2:	fb02 1415 	mls	r4, r2, r5, r1
    11b6:	fa5f fc84 	uxtb.w	ip, r4
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    11ba:	2c09      	cmp	r4, #9
    11bc:	f10c 0437 	add.w	r4, ip, #55	; 0x37
    11c0:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
    11c4:	bf98      	it	ls
    11c6:	fa5f f48c 	uxtbls.w	r4, ip
    11ca:	f10e 0c28 	add.w	ip, lr, #40	; 0x28
    11ce:	bf88      	it	hi
    11d0:	b2e4      	uxtbhi	r4, r4
			if (n == 0) break;
    11d2:	4291      	cmp	r1, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    11d4:	44ec      	add	ip, sp
			n /= base;
    11d6:	4629      	mov	r1, r5
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    11d8:	f80c 4c24 	strb.w	r4, [ip, #-36]
			if (n == 0) break;
    11dc:	d2e3      	bcs.n	11a6 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x12>
	if (sign) {
    11de:	b14b      	cbz	r3, 11f4 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x60>
		i--;
    11e0:	f10e 3eff 	add.w	lr, lr, #4294967295
		buf[i] = '-';
    11e4:	222d      	movs	r2, #45	; 0x2d
		i--;
    11e6:	fa5f fe8e 	uxtb.w	lr, lr
		buf[i] = '-';
    11ea:	f10e 0328 	add.w	r3, lr, #40	; 0x28
    11ee:	446b      	add	r3, sp
    11f0:	f803 2c24 	strb.w	r2, [r3, #-36]
	return write(buf + i, sizeof(buf) - i);
    11f4:	6803      	ldr	r3, [r0, #0]
    11f6:	a901      	add	r1, sp, #4
    11f8:	f1ce 0222 	rsb	r2, lr, #34	; 0x22
    11fc:	685b      	ldr	r3, [r3, #4]
    11fe:	4471      	add	r1, lr
    1200:	4798      	blx	r3
}
    1202:	b00a      	add	sp, #40	; 0x28
    1204:	bd70      	pop	{r4, r5, r6, pc}
		buf[sizeof(buf) - 1] = '0';
    1206:	2230      	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    1208:	f04f 0e21 	mov.w	lr, #33	; 0x21
		buf[sizeof(buf) - 1] = '0';
    120c:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    1210:	e7e5      	b.n	11de <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x4a>
    1212:	bf00      	nop

00001214 <Print::write(unsigned char const*, unsigned int)>:
{
    1214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buffer == nullptr) return 0;
    1218:	460c      	mov	r4, r1
    121a:	b1d1      	cbz	r1, 1252 <Print::write(unsigned char const*, unsigned int)+0x3e>
	while (size--) count += write(*buffer++);
    121c:	b1ea      	cbz	r2, 125a <Print::write(unsigned char const*, unsigned int)+0x46>
    121e:	4680      	mov	r8, r0
    1220:	188e      	adds	r6, r1, r2
	size_t count = 0;
    1222:	2500      	movs	r5, #0
    1224:	4f0e      	ldr	r7, [pc, #56]	; (1260 <Print::write(unsigned char const*, unsigned int)+0x4c>)
    1226:	e004      	b.n	1232 <Print::write(unsigned char const*, unsigned int)+0x1e>
    1228:	f001 fc88 	bl	2b3c <usb_serial_putchar>
	while (size--) count += write(*buffer++);
    122c:	42b4      	cmp	r4, r6
    122e:	4405      	add	r5, r0
    1230:	d00c      	beq.n	124c <Print::write(unsigned char const*, unsigned int)+0x38>
    1232:	f8d8 3000 	ldr.w	r3, [r8]
    1236:	f814 0b01 	ldrb.w	r0, [r4], #1
    123a:	681b      	ldr	r3, [r3, #0]
    123c:	42bb      	cmp	r3, r7
    123e:	d0f3      	beq.n	1228 <Print::write(unsigned char const*, unsigned int)+0x14>
    1240:	4601      	mov	r1, r0
    1242:	4640      	mov	r0, r8
    1244:	4798      	blx	r3
    1246:	42b4      	cmp	r4, r6
    1248:	4405      	add	r5, r0
    124a:	d1f2      	bne.n	1232 <Print::write(unsigned char const*, unsigned int)+0x1e>
}
    124c:	4628      	mov	r0, r5
    124e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (buffer == nullptr) return 0;
    1252:	460d      	mov	r5, r1
}
    1254:	4628      	mov	r0, r5
    1256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (buffer == nullptr) return 0;
    125a:	4615      	mov	r5, r2
    125c:	e7f6      	b.n	124c <Print::write(unsigned char const*, unsigned int)+0x38>
    125e:	bf00      	nop
    1260:	0000118d 	.word	0x0000118d

00001264 <Print::print(long)>:
	if (n < 0) {
    1264:	2900      	cmp	r1, #0
    1266:	db03      	blt.n	1270 <Print::print(long)+0xc>
	uint8_t sign=0;
    1268:	2300      	movs	r3, #0
	if (base == 0) {
    126a:	220a      	movs	r2, #10
    126c:	f7ff bf92 	b.w	1194 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
		n = -n;
    1270:	4249      	negs	r1, r1
		sign = '-';
    1272:	232d      	movs	r3, #45	; 0x2d
	if (base == 0) {
    1274:	220a      	movs	r2, #10
    1276:	f7ff bf8d 	b.w	1194 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    127a:	bf00      	nop

0000127c <Print::println()>:
{
    127c:	b500      	push	{lr}
	return write(buf, 2);
    127e:	6803      	ldr	r3, [r0, #0]
{
    1280:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    1282:	f640 2c0d 	movw	ip, #2573	; 0xa0d
	return write(buf, 2);
    1286:	2202      	movs	r2, #2
    1288:	a901      	add	r1, sp, #4
    128a:	685b      	ldr	r3, [r3, #4]
	uint8_t buf[2]={'\r', '\n'};
    128c:	f8ad c004 	strh.w	ip, [sp, #4]
	return write(buf, 2);
    1290:	4798      	blx	r3
}
    1292:	b003      	add	sp, #12
    1294:	f85d fb04 	ldr.w	pc, [sp], #4

00001298 <_write>:
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    1298:	4b05      	ldr	r3, [pc, #20]	; (12b0 <_write+0x18>)
    129a:	2802      	cmp	r0, #2
    129c:	bf88      	it	hi
    129e:	4603      	movhi	r3, r0
{
    12a0:	b410      	push	{r4}
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    12a2:	681c      	ldr	r4, [r3, #0]
    12a4:	4618      	mov	r0, r3
    12a6:	6863      	ldr	r3, [r4, #4]
}
    12a8:	f85d 4b04 	ldr.w	r4, [sp], #4
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    12ac:	4718      	bx	r3
    12ae:	bf00      	nop
    12b0:	20007958 	.word	0x20007958

000012b4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	if (base == 0) {
    12b4:	b95a      	cbnz	r2, 12ce <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x1a>
		return write((uint8_t)n);
    12b6:	6803      	ldr	r3, [r0, #0]
    12b8:	b2c9      	uxtb	r1, r1
    12ba:	4a07      	ldr	r2, [pc, #28]	; (12d8 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x24>)
    12bc:	681b      	ldr	r3, [r3, #0]
    12be:	4293      	cmp	r3, r2
{
    12c0:	b500      	push	{lr}
    12c2:	d106      	bne.n	12d2 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x1e>
    12c4:	4608      	mov	r0, r1
}
    12c6:	f85d eb04 	ldr.w	lr, [sp], #4
    12ca:	f001 bc37 	b.w	2b3c <usb_serial_putchar>
    12ce:	f7ff bf61 	b.w	1194 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    12d2:	f85d eb04 	ldr.w	lr, [sp], #4
		return write((uint8_t)n);
    12d6:	4718      	bx	r3
    12d8:	0000118d 	.word	0x0000118d

000012dc <delay>:
	if (msec == 0) return;
    12dc:	b900      	cbnz	r0, 12e0 <delay+0x4>
    12de:	4770      	bx	lr
{
    12e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    12e4:	2101      	movs	r1, #1
    12e6:	4681      	mov	r9, r0
    12e8:	4c21      	ldr	r4, [pc, #132]	; (1370 <delay+0x94>)
    12ea:	4d22      	ldr	r5, [pc, #136]	; (1374 <delay+0x98>)
    12ec:	4e22      	ldr	r6, [pc, #136]	; (1378 <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    12ee:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    12f2:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    12f4:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    12f6:	e844 1300 	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    12fa:	2b00      	cmp	r3, #0
    12fc:	d1f7      	bne.n	12ee <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    12fe:	491f      	ldr	r1, [pc, #124]	; (137c <delay+0xa0>)
    1300:	684b      	ldr	r3, [r1, #4]
	uint32_t usec = 1000*smc + frac;
    1302:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1306:	f8df a078 	ldr.w	sl, [pc, #120]	; 1380 <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
    130a:	1a1b      	subs	r3, r3, r0
    130c:	2701      	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
    130e:	fb0b f802 	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1312:	f8da 2000 	ldr.w	r2, [sl]
    1316:	fba3 3202 	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
    131a:	455a      	cmp	r2, fp
    131c:	bf94      	ite	ls
    131e:	4490      	addls	r8, r2
    1320:	44d8      	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    1322:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    1326:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    1328:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    132a:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    132e:	2b00      	cmp	r3, #0
    1330:	d1f7      	bne.n	1322 <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    1332:	684b      	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1334:	f8da c000 	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
    1338:	1a1b      	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
    133a:	fb0b f202 	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    133e:	fba3 3c0c 	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
    1342:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
    1346:	bf94      	ite	ls
    1348:	4462      	addls	r2, ip
    134a:	f502 727a 	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
    134e:	eba2 0208 	sub.w	r2, r2, r8
    1352:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
    1356:	d306      	bcc.n	1366 <delay+0x8a>
			if (--msec == 0) return;
    1358:	f1b9 0901 	subs.w	r9, r9, #1
			start += 1000;
    135c:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
    1360:	d1df      	bne.n	1322 <delay+0x46>
}
    1362:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
    1366:	f001 fc7d 	bl	2c64 <yield>
		while ((micros() - start) >= 1000) {
    136a:	4904      	ldr	r1, [pc, #16]	; (137c <delay+0xa0>)
    136c:	e7d9      	b.n	1322 <delay+0x46>
    136e:	bf00      	nop
    1370:	20008cbc 	.word	0x20008cbc
    1374:	20008cb8 	.word	0x20008cb8
    1378:	20008cb4 	.word	0x20008cb4
    137c:	e0001000 	.word	0xe0001000
    1380:	20008cb0 	.word	0x20008cb0

00001384 <digitalWrite>:
	if (pin >= CORE_NUM_DIGITAL) return;
    1384:	2836      	cmp	r0, #54	; 0x36
    1386:	d816      	bhi.n	13b6 <digitalWrite+0x32>
	p = digital_pin_to_info_PGM + pin;
    1388:	0102      	lsls	r2, r0, #4
    138a:	4b10      	ldr	r3, [pc, #64]	; (13cc <digitalWrite+0x48>)
    138c:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
    1390:	589b      	ldr	r3, [r3, r2]
{
    1392:	b410      	push	{r4}
	mask = p->mask;
    1394:	68c2      	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
    1396:	685c      	ldr	r4, [r3, #4]
	if (pinmode & mask) {
    1398:	4214      	tst	r4, r2
    139a:	d005      	beq.n	13a8 <digitalWrite+0x24>
		if (val) {
    139c:	b961      	cbnz	r1, 13b8 <digitalWrite+0x34>
		}
	}
}
    139e:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x22) = mask; // clear register
    13a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
    13a6:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    13a8:	6883      	ldr	r3, [r0, #8]
		if (val) {
    13aa:	b151      	cbz	r1, 13c2 <digitalWrite+0x3e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    13ac:	4a08      	ldr	r2, [pc, #32]	; (13d0 <digitalWrite+0x4c>)
}
    13ae:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    13b2:	601a      	str	r2, [r3, #0]
}
    13b4:	4770      	bx	lr
    13b6:	4770      	bx	lr
    13b8:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x21) = mask; // set register
    13bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    13c0:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    13c2:	4a04      	ldr	r2, [pc, #16]	; (13d4 <digitalWrite+0x50>)
}
    13c4:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    13c8:	601a      	str	r2, [r3, #0]
}
    13ca:	4770      	bx	lr
    13cc:	20007354 	.word	0x20007354
    13d0:	0001f038 	.word	0x0001f038
    13d4:	00013038 	.word	0x00013038

000013d8 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    13d8:	2836      	cmp	r0, #54	; 0x36
    13da:	d829      	bhi.n	1430 <pinMode+0x58>
	p = digital_pin_to_info_PGM + pin;
    13dc:	4b16      	ldr	r3, [pc, #88]	; (1438 <pinMode+0x60>)
    13de:	0102      	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    13e0:	2901      	cmp	r1, #1
	p = digital_pin_to_info_PGM + pin;
    13e2:	eb03 1000 	add.w	r0, r3, r0, lsl #4
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    13e6:	589a      	ldr	r2, [r3, r2]
{
    13e8:	b410      	push	{r4}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    13ea:	6853      	ldr	r3, [r2, #4]
    13ec:	68c4      	ldr	r4, [r0, #12]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    13ee:	d00e      	beq.n	140e <pinMode+0x36>
    13f0:	2904      	cmp	r1, #4
    13f2:	d00c      	beq.n	140e <pinMode+0x36>
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    13f4:	ea23 0304 	bic.w	r3, r3, r4
    13f8:	6053      	str	r3, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    13fa:	6883      	ldr	r3, [r0, #8]
		if (mode == INPUT) {
    13fc:	b1a9      	cbz	r1, 142a <pinMode+0x52>
		} else if (mode == INPUT_PULLUP) {
    13fe:	2902      	cmp	r1, #2
    1400:	d017      	beq.n	1432 <pinMode+0x5a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    1402:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    1404:	bf0c      	ite	eq
    1406:	4a0d      	ldreq	r2, [pc, #52]	; (143c <pinMode+0x64>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    1408:	4a0d      	ldrne	r2, [pc, #52]	; (1440 <pinMode+0x68>)
    140a:	601a      	str	r2, [r3, #0]
    140c:	e007      	b.n	141e <pinMode+0x46>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    140e:	4323      	orrs	r3, r4
		if (mode == OUTPUT) {
    1410:	2901      	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
    1412:	6053      	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
    1414:	6883      	ldr	r3, [r0, #8]
		if (mode == OUTPUT) {
    1416:	d008      	beq.n	142a <pinMode+0x52>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    1418:	f640 0238 	movw	r2, #2104	; 0x838
    141c:	601a      	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    141e:	6843      	ldr	r3, [r0, #4]
    1420:	2215      	movs	r2, #21
}
    1422:	f85d 4b04 	ldr.w	r4, [sp], #4
	*(p->mux) = 5 | 0x10;
    1426:	601a      	str	r2, [r3, #0]
}
    1428:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7);
    142a:	2238      	movs	r2, #56	; 0x38
    142c:	601a      	str	r2, [r3, #0]
    142e:	e7f6      	b.n	141e <pinMode+0x46>
    1430:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    1432:	4a04      	ldr	r2, [pc, #16]	; (1444 <pinMode+0x6c>)
    1434:	601a      	str	r2, [r3, #0]
    1436:	e7f2      	b.n	141e <pinMode+0x46>
    1438:	20007354 	.word	0x20007354
    143c:	00013038 	.word	0x00013038
    1440:	00010038 	.word	0x00010038
    1444:	0001f038 	.word	0x0001f038

00001448 <flash_wait>:
#define WRITE_SDR       FLEXSPI_LUT_OPCODE_WRITE_SDR
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

static void flash_wait()
{
    1448:	b430      	push	{r4, r5}
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    144a:	4a12      	ldr	r2, [pc, #72]	; (1494 <flash_wait+0x4c>)
	FLEXSPI_LUT61 = 0;
    144c:	2000      	movs	r0, #0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    144e:	4b12      	ldr	r3, [pc, #72]	; (1498 <flash_wait+0x50>)
	uint8_t status;
	do {
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
    1450:	2101      	movs	r1, #1
		FLEXSPI_IPCR0 = 0;
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
    1452:	4d12      	ldr	r5, [pc, #72]	; (149c <flash_wait+0x54>)
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {;}
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
		asm("":::"memory");
		status = *(uint8_t *)&FLEXSPI_RFDR0;
    1454:	4c12      	ldr	r4, [pc, #72]	; (14a0 <flash_wait+0x58>)
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    1456:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
	FLEXSPI_LUT61 = 0;
    145a:	f8c2 02f4 	str.w	r0, [r2, #756]	; 0x2f4
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
    145e:	f8c2 10b8 	str.w	r1, [r2, #184]	; 0xb8
		FLEXSPI_IPCR0 = 0;
    1462:	f8c2 00a0 	str.w	r0, [r2, #160]	; 0xa0
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
    1466:	f8c2 50a4 	str.w	r5, [r2, #164]	; 0xa4
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    146a:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {;}
    146e:	6953      	ldr	r3, [r2, #20]
    1470:	07db      	lsls	r3, r3, #31
    1472:	d5fc      	bpl.n	146e <flash_wait+0x26>
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    1474:	6151      	str	r1, [r2, #20]
	} while (status & 1);
    1476:	7823      	ldrb	r3, [r4, #0]
    1478:	07db      	lsls	r3, r3, #31
    147a:	d4f0      	bmi.n	145e <flash_wait+0x16>
	FLEXSPI_MCR0 |= FLEXSPI_MCR0_SWRESET; // purge stale data from FlexSPI's AHB FIFO
    147c:	6813      	ldr	r3, [r2, #0]
	while (FLEXSPI_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
    147e:	4905      	ldr	r1, [pc, #20]	; (1494 <flash_wait+0x4c>)
	FLEXSPI_MCR0 |= FLEXSPI_MCR0_SWRESET; // purge stale data from FlexSPI's AHB FIFO
    1480:	f043 0301 	orr.w	r3, r3, #1
    1484:	6013      	str	r3, [r2, #0]
	while (FLEXSPI_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
    1486:	680b      	ldr	r3, [r1, #0]
    1488:	07db      	lsls	r3, r3, #31
    148a:	d4fc      	bmi.n	1486 <flash_wait+0x3e>
	__enable_irq();
    148c:	b662      	cpsie	i
}
    148e:	bc30      	pop	{r4, r5}
    1490:	4770      	bx	lr
    1492:	bf00      	nop
    1494:	402a8000 	.word	0x402a8000
    1498:	24010405 	.word	0x24010405
    149c:	000f0001 	.word	0x000f0001
    14a0:	402a8100 	.word	0x402a8100

000014a4 <eepromemu_flash_write>:

// write bytes into flash memory (which is already erased to 0xFF)
void eepromemu_flash_write(void *addr, const void *data, uint32_t len)
{
    14a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    14a6:	460f      	mov	r7, r1
    14a8:	4616      	mov	r6, r2
	__disable_irq();
    14aa:	b672      	cpsid	i
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    14ac:	4b34      	ldr	r3, [pc, #208]	; (1580 <eepromemu_flash_write+0xdc>)
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	FLEXSPI_IPCR0 = 0;
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    14ae:	f240 4106 	movw	r1, #1030	; 0x406
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    14b2:	4a34      	ldr	r2, [pc, #208]	; (1584 <eepromemu_flash_write+0xe0>)
    14b4:	619a      	str	r2, [r3, #24]
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    14b6:	2202      	movs	r2, #2
    14b8:	61da      	str	r2, [r3, #28]
	FLEXSPI_IPCR0 = 0;
    14ba:	2200      	movs	r2, #0
    14bc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    14c0:	f8c3 12f0 	str.w	r1, [r3, #752]	; 0x2f0
	FLEXSPI_LUT61 = 0;
    14c4:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
	FLEXSPI_LUT62 = 0;
    14c8:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
	FLEXSPI_LUT63 = 0;
    14cc:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    14d0:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    14d4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    14d8:	2201      	movs	r2, #1
    14da:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    14de:	f020 031f 	bic.w	r3, r0, #31
	uint32_t end_addr = (uint32_t)addr + size;
    14e2:	1982      	adds	r2, r0, r6
	asm volatile("": : :"memory");
	asm("dsb");
    14e4:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    14e8:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    14ec:	f8c4 3f5c 	str.w	r3, [r4, #3932]	; 0xf5c
		location += 32;
    14f0:	3320      	adds	r3, #32
	} while (location < end_addr);
    14f2:	429a      	cmp	r2, r3
    14f4:	d8fa      	bhi.n	14ec <eepromemu_flash_write+0x48>
	asm("dsb");
    14f6:	f3bf 8f4f 	dsb	sy
	asm("isb");
    14fa:	f3bf 8f6f 	isb	sy
	arm_dcache_delete(addr, len); // purge old data from ARM's cache
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    14fe:	4d20      	ldr	r5, [pc, #128]	; (1580 <eepromemu_flash_write+0xdc>)
    1500:	696b      	ldr	r3, [r5, #20]
    1502:	07da      	lsls	r2, r3, #31
    1504:	d5fc      	bpl.n	1500 <eepromemu_flash_write+0x5c>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    1506:	2301      	movs	r3, #1
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
    1508:	491f      	ldr	r1, [pc, #124]	; (1588 <eepromemu_flash_write+0xe4>)
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFFFFF;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    150a:	b2b2      	uxth	r2, r6
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFFFFF;
    150c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    1510:	616b      	str	r3, [r5, #20]
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    1512:	f442 2270 	orr.w	r2, r2, #983040	; 0xf0000
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
    1516:	f8c5 12f0 	str.w	r1, [r5, #752]	; 0x2f0
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
    151a:	f242 2101 	movw	r1, #8705	; 0x2201
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	const uint8_t *src = (const uint8_t *)data;
	uint32_t n;
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    151e:	4c18      	ldr	r4, [pc, #96]	; (1580 <eepromemu_flash_write+0xdc>)
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
    1520:	f8c5 12f4 	str.w	r1, [r5, #756]	; 0x2f4
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
    1524:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFFFFF;
    1528:	f8c5 00a0 	str.w	r0, [r5, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    152c:	f8c5 20a4 	str.w	r2, [r5, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    1530:	f8c5 30b0 	str.w	r3, [r5, #176]	; 0xb0
		if (n & FLEXSPI_INTR_IPTXWE) {
			uint32_t wrlen = len;
			if (wrlen > 8) wrlen = 8;
			if (wrlen > 0) {
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    1534:	4d15      	ldr	r5, [pc, #84]	; (158c <eepromemu_flash_write+0xe8>)
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    1536:	e001      	b.n	153c <eepromemu_flash_write+0x98>
		if (n & FLEXSPI_INTR_IPTXWE) {
    1538:	065b      	lsls	r3, r3, #25
    153a:	d409      	bmi.n	1550 <eepromemu_flash_write+0xac>
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    153c:	6963      	ldr	r3, [r4, #20]
    153e:	f013 0001 	ands.w	r0, r3, #1
    1542:	d0f9      	beq.n	1538 <eepromemu_flash_write+0x94>
				len -= wrlen;
			}
			FLEXSPI_INTR = FLEXSPI_INTR_IPTXWE;
		}
	}
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPTXWE;
    1544:	2341      	movs	r3, #65	; 0x41
    1546:	6163      	str	r3, [r4, #20]
	flash_wait();
}
    1548:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	flash_wait();
    154c:	f7ff bf7c 	b.w	1448 <flash_wait>
			if (wrlen > 8) wrlen = 8;
    1550:	2e08      	cmp	r6, #8
    1552:	d80a      	bhi.n	156a <eepromemu_flash_write+0xc6>
			if (wrlen > 0) {
    1554:	b136      	cbz	r6, 1564 <eepromemu_flash_write+0xc0>
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    1556:	4632      	mov	r2, r6
    1558:	4639      	mov	r1, r7
				src += wrlen;
    155a:	4437      	add	r7, r6
				len -= wrlen;
    155c:	4606      	mov	r6, r0
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    155e:	4628      	mov	r0, r5
    1560:	f000 f87a 	bl	1658 <memcpy>
			FLEXSPI_INTR = FLEXSPI_INTR_IPTXWE;
    1564:	2340      	movs	r3, #64	; 0x40
    1566:	6163      	str	r3, [r4, #20]
    1568:	e7e8      	b.n	153c <eepromemu_flash_write+0x98>
    156a:	f1a6 0008 	sub.w	r0, r6, #8
			if (wrlen > 8) wrlen = 8;
    156e:	2608      	movs	r6, #8
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    1570:	4639      	mov	r1, r7
    1572:	4632      	mov	r2, r6
				src += wrlen;
    1574:	4437      	add	r7, r6
				len -= wrlen;
    1576:	4606      	mov	r6, r0
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    1578:	4628      	mov	r0, r5
    157a:	f000 f86d 	bl	1658 <memcpy>
				len -= wrlen;
    157e:	e7f1      	b.n	1564 <eepromemu_flash_write+0xc0>
    1580:	402a8000 	.word	0x402a8000
    1584:	5af05af0 	.word	0x5af05af0
    1588:	08180432 	.word	0x08180432
    158c:	402a8180 	.word	0x402a8180

00001590 <eepromemu_flash_erase_sector>:

// erase a 4K sector
void eepromemu_flash_erase_sector(void *addr)
{
    1590:	b410      	push	{r4}
	__disable_irq();
    1592:	b672      	cpsid	i
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    1594:	4b28      	ldr	r3, [pc, #160]	; (1638 <eepromemu_flash_erase_sector+0xa8>)
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    1596:	2102      	movs	r1, #2
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    1598:	4c28      	ldr	r4, [pc, #160]	; (163c <eepromemu_flash_erase_sector+0xac>)
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
	FLEXSPI_LUT61 = 0;
    159a:	2200      	movs	r2, #0
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    159c:	619c      	str	r4, [r3, #24]
	FLEXSPI_LUT62 = 0;
	FLEXSPI_LUT63 = 0;
	FLEXSPI_IPCR0 = 0;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    159e:	f44f 2470 	mov.w	r4, #983040	; 0xf0000
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    15a2:	61d9      	str	r1, [r3, #28]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    15a4:	f240 4106 	movw	r1, #1030	; 0x406
    15a8:	f8c3 12f0 	str.w	r1, [r3, #752]	; 0x2f0
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    15ac:	2101      	movs	r1, #1
	FLEXSPI_LUT61 = 0;
    15ae:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
	FLEXSPI_LUT62 = 0;
    15b2:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
	FLEXSPI_LUT63 = 0;
    15b6:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
	FLEXSPI_IPCR0 = 0;
    15ba:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arm_dcache_delete((void *)((uint32_t)addr & 0xFFFFF000), 4096); // purge data from cache
    15be:	f5a2 5280 	sub.w	r2, r2, #4096	; 0x1000
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    15c2:	f8c3 40a4 	str.w	r4, [r3, #164]	; 0xa4
	arm_dcache_delete((void *)((uint32_t)addr & 0xFFFFF000), 4096); // purge data from cache
    15c6:	4002      	ands	r2, r0
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    15c8:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
	asm("dsb");
    15cc:	f3bf 8f4f 	dsb	sy
	uint32_t end_addr = (uint32_t)addr + size;
    15d0:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
    15d4:	f102 0320 	add.w	r3, r2, #32
		SCB_CACHE_DCIMVAC = location;
    15d8:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    15dc:	4299      	cmp	r1, r3
    15de:	bf34      	ite	cc
    15e0:	2101      	movcc	r1, #1
    15e2:	2180      	movcs	r1, #128	; 0x80
    15e4:	eb02 1141 	add.w	r1, r2, r1, lsl #5
	} while (location < end_addr);
    15e8:	428b      	cmp	r3, r1
		SCB_CACHE_DCIMVAC = location;
    15ea:	f8cc 2f5c 	str.w	r2, [ip, #3932]	; 0xf5c
		location += 32;
    15ee:	461a      	mov	r2, r3
	} while (location < end_addr);
    15f0:	f103 0320 	add.w	r3, r3, #32
    15f4:	d1f8      	bne.n	15e8 <eepromemu_flash_erase_sector+0x58>
	asm("dsb");
    15f6:	f3bf 8f4f 	dsb	sy
	asm("isb");
    15fa:	f3bf 8f6f 	isb	sy
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    15fe:	4a0e      	ldr	r2, [pc, #56]	; (1638 <eepromemu_flash_erase_sector+0xa8>)
    1600:	6953      	ldr	r3, [r2, #20]
    1602:	07d9      	lsls	r1, r3, #31
    1604:	d5fc      	bpl.n	1600 <eepromemu_flash_erase_sector+0x70>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    1606:	2401      	movs	r4, #1
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
    1608:	490d      	ldr	r1, [pc, #52]	; (1640 <eepromemu_flash_erase_sector+0xb0>)
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFF000;
    160a:	4b0e      	ldr	r3, [pc, #56]	; (1644 <eepromemu_flash_erase_sector+0xb4>)
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    160c:	6154      	str	r4, [r2, #20]
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFF000;
    160e:	4003      	ands	r3, r0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
    1610:	f8c2 12f0 	str.w	r1, [r2, #752]	; 0x2f0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    1614:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    1618:	4907      	ldr	r1, [pc, #28]	; (1638 <eepromemu_flash_erase_sector+0xa8>)
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFF000;
    161a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    161e:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    1622:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    1626:	694b      	ldr	r3, [r1, #20]
    1628:	07db      	lsls	r3, r3, #31
    162a:	d5fc      	bpl.n	1626 <eepromemu_flash_erase_sector+0x96>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    162c:	2301      	movs	r3, #1
	flash_wait();
}
    162e:	f85d 4b04 	ldr.w	r4, [sp], #4
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    1632:	614b      	str	r3, [r1, #20]
	flash_wait();
    1634:	f7ff bf08 	b.w	1448 <flash_wait>
    1638:	402a8000 	.word	0x402a8000
    163c:	5af05af0 	.word	0x5af05af0
    1640:	08180420 	.word	0x08180420
    1644:	00fff000 	.word	0x00fff000

00001648 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    1648:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    164a:	f7fe ff21 	bl	490 <setup>
	while (1) {
		loop();
    164e:	f7fe feeb 	bl	428 <loop>
		yield();
    1652:	f001 fb07 	bl	2c64 <yield>
	while (1) {
    1656:	e7fa      	b.n	164e <main+0x6>

00001658 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    1658:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    165a:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    165e:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    1662:	d16d      	bne.n	1740 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    1664:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    1666:	d341      	bcc.n	16ec <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    1668:	f851 3b04 	ldr.w	r3, [r1], #4
    166c:	f840 3b04 	str.w	r3, [r0], #4
    1670:	f851 3b04 	ldr.w	r3, [r1], #4
    1674:	f840 3b04 	str.w	r3, [r0], #4
    1678:	f851 3b04 	ldr.w	r3, [r1], #4
    167c:	f840 3b04 	str.w	r3, [r0], #4
    1680:	f851 3b04 	ldr.w	r3, [r1], #4
    1684:	f840 3b04 	str.w	r3, [r0], #4
    1688:	f851 3b04 	ldr.w	r3, [r1], #4
    168c:	f840 3b04 	str.w	r3, [r0], #4
    1690:	f851 3b04 	ldr.w	r3, [r1], #4
    1694:	f840 3b04 	str.w	r3, [r0], #4
    1698:	f851 3b04 	ldr.w	r3, [r1], #4
    169c:	f840 3b04 	str.w	r3, [r0], #4
    16a0:	f851 3b04 	ldr.w	r3, [r1], #4
    16a4:	f840 3b04 	str.w	r3, [r0], #4
    16a8:	f851 3b04 	ldr.w	r3, [r1], #4
    16ac:	f840 3b04 	str.w	r3, [r0], #4
    16b0:	f851 3b04 	ldr.w	r3, [r1], #4
    16b4:	f840 3b04 	str.w	r3, [r0], #4
    16b8:	f851 3b04 	ldr.w	r3, [r1], #4
    16bc:	f840 3b04 	str.w	r3, [r0], #4
    16c0:	f851 3b04 	ldr.w	r3, [r1], #4
    16c4:	f840 3b04 	str.w	r3, [r0], #4
    16c8:	f851 3b04 	ldr.w	r3, [r1], #4
    16cc:	f840 3b04 	str.w	r3, [r0], #4
    16d0:	f851 3b04 	ldr.w	r3, [r1], #4
    16d4:	f840 3b04 	str.w	r3, [r0], #4
    16d8:	f851 3b04 	ldr.w	r3, [r1], #4
    16dc:	f840 3b04 	str.w	r3, [r0], #4
    16e0:	f851 3b04 	ldr.w	r3, [r1], #4
    16e4:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    16e8:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    16ea:	d2bd      	bcs.n	1668 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    16ec:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    16ee:	d311      	bcc.n	1714 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    16f0:	f851 3b04 	ldr.w	r3, [r1], #4
    16f4:	f840 3b04 	str.w	r3, [r0], #4
    16f8:	f851 3b04 	ldr.w	r3, [r1], #4
    16fc:	f840 3b04 	str.w	r3, [r0], #4
    1700:	f851 3b04 	ldr.w	r3, [r1], #4
    1704:	f840 3b04 	str.w	r3, [r0], #4
    1708:	f851 3b04 	ldr.w	r3, [r1], #4
    170c:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    1710:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    1712:	d2ed      	bcs.n	16f0 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    1714:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    1716:	d305      	bcc.n	1724 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    1718:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    171c:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    1720:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    1722:	d2f9      	bcs.n	1718 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    1724:	3204      	adds	r2, #4
	beq	.Ldone
    1726:	d008      	beq.n	173a <memcpy+0xe2>

	lsls	r2, r2, #31
    1728:	07d2      	lsls	r2, r2, #31
	itt ne
    172a:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    172c:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    1730:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    1734:	d301      	bcc.n	173a <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    1736:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    1738:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    173a:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    173c:	4770      	bx	lr
    173e:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    1740:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    1742:	d313      	bcc.n	176c <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    1744:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    1746:	d08d      	beq.n	1664 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    1748:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    174c:	d08a      	beq.n	1664 <memcpy+0xc>

	rsb	r3, #4
    174e:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    1752:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    1754:	07db      	lsls	r3, r3, #31
	itt ne
    1756:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    1758:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    175c:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    1760:	d380      	bcc.n	1664 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    1762:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    1766:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    176a:	e77b      	b.n	1664 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    176c:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    176e:	d3d9      	bcc.n	1724 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    1770:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    1772:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    1776:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    177a:	d2f9      	bcs.n	1770 <memcpy+0x118>

	ldrb	r3, [r1]
    177c:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    177e:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    1780:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    1782:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    1784:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    1786:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    1788:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    178a:	4770      	bx	lr

0000178c <ultoa>:
	int i=0, j;
    178c:	f101 3cff 	add.w	ip, r1, #4294967295
{
    1790:	b570      	push	{r4, r5, r6, lr}
		digit = val % radix;
    1792:	4666      	mov	r6, ip
	int i=0, j;
    1794:	2400      	movs	r4, #0
    1796:	e000      	b.n	179a <ultoa+0xe>
		i++;
    1798:	3401      	adds	r4, #1
		digit = val % radix;
    179a:	fbb0 f5f2 	udiv	r5, r0, r2
    179e:	fb02 0315 	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    17a2:	2b09      	cmp	r3, #9
    17a4:	f103 0e37 	add.w	lr, r3, #55	; 0x37
    17a8:	f103 0330 	add.w	r3, r3, #48	; 0x30
    17ac:	fa5f fe8e 	uxtb.w	lr, lr
    17b0:	bf98      	it	ls
    17b2:	fa5f fe83 	uxtbls.w	lr, r3
		if (val == 0) break;
    17b6:	4290      	cmp	r0, r2
		val /= radix;
    17b8:	4628      	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    17ba:	f806 ef01 	strb.w	lr, [r6, #1]!
		if (val == 0) break;
    17be:	d2eb      	bcs.n	1798 <ultoa+0xc>
	buf[i + 1] = 0;
    17c0:	1c63      	adds	r3, r4, #1
    17c2:	2200      	movs	r2, #0
    17c4:	18c8      	adds	r0, r1, r3
    17c6:	54ca      	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
    17c8:	b17c      	cbz	r4, 17ea <ultoa+0x5e>
		t = buf[j];
    17ca:	4662      	mov	r2, ip
    17cc:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    17d0:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
    17d4:	eba1 030c 	sub.w	r3, r1, ip
    17d8:	3202      	adds	r2, #2
		buf[j] = buf[i];
    17da:	f88c 6000 	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
    17de:	3b01      	subs	r3, #1
    17e0:	1a52      	subs	r2, r2, r1
		buf[i] = t;
    17e2:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    17e4:	4423      	add	r3, r4
    17e6:	429a      	cmp	r2, r3
    17e8:	dbef      	blt.n	17ca <ultoa+0x3e>
}
    17ea:	4608      	mov	r0, r1
    17ec:	bd70      	pop	{r4, r5, r6, pc}
    17ee:	bf00      	nop

000017f0 <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    17f0:	2300      	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
    17f2:	220f      	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    17f4:	f248 2cb8 	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
    17f8:	4619      	mov	r1, r3
{
    17fa:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    17fc:	f44f 4470 	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1800:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1804:	f8a0 418c 	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1808:	f44f 4460 	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
    180c:	f8a0 218e 	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
    1810:	460a      	mov	r2, r1
	p->FFILT0 = 0;
    1812:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    1816:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    181a:	b29b      	uxth	r3, r3
    181c:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    1820:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1824:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
    1828:	3101      	adds	r1, #1
    182a:	eb00 1343 	add.w	r3, r0, r3, lsl #5
    182e:	2904      	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1830:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1832:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    1836:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    1838:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    183a:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    183c:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    183e:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
    1842:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    1844:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    1846:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    1848:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
    184a:	d1eb      	bne.n	1824 <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    184c:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    1850:	b29b      	uxth	r3, r3
    1852:	f043 030f 	orr.w	r3, r3, #15
    1856:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    185a:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    185e:	b29b      	uxth	r3, r3
    1860:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    1864:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
    1868:	bd10      	pop	{r4, pc}
    186a:	bf00      	nop

0000186c <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    186c:	4b37      	ldr	r3, [pc, #220]	; (194c <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    186e:	4a38      	ldr	r2, [pc, #224]	; (1950 <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    1870:	6f99      	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    1872:	4838      	ldr	r0, [pc, #224]	; (1954 <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    1874:	f441 017f 	orr.w	r1, r1, #16711680	; 0xff0000
{
    1878:	b570      	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    187a:	6799      	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    187c:	f241 0601 	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    1880:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1884:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1888:	f243 0426 	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    188c:	430a      	orrs	r2, r1
    188e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    1892:	f7ff ffad 	bl	17f0 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    1896:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    189a:	f7ff ffa9 	bl	17f0 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    189e:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    18a2:	f7ff ffa5 	bl	17f0 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    18a6:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    18aa:	f7ff ffa1 	bl	17f0 <flexpwm_init>
	for (i=0; i < 4; i++) {
    18ae:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    18b0:	f5a0 1003 	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    18b4:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
    18b8:	4611      	mov	r1, r2
    18ba:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    18be:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    18c2:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    18c4:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    18c6:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    18c8:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    18ca:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    18ce:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    18d0:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    18d2:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    18d6:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    18d8:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    18da:	d1ee      	bne.n	18ba <pwm_init+0x4e>
    18dc:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    18de:	481e      	ldr	r0, [pc, #120]	; (1958 <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    18e0:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    18e4:	f241 0601 	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    18e8:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    18ea:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    18ee:	f243 0426 	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    18f2:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    18f6:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    18fa:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    18fc:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    18fe:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    1900:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    1902:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    1906:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1908:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    190a:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    190e:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1910:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    1912:	d1ee      	bne.n	18f2 <pwm_init+0x86>
    1914:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    1916:	4811      	ldr	r0, [pc, #68]	; (195c <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    1918:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    191a:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    191e:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1920:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1924:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    1928:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    192c:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    1930:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    1932:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    1934:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    1936:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    1938:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    193a:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    193c:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    193e:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    1942:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1944:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
    1948:	d1ee      	bne.n	1928 <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    194a:	bd70      	pop	{r4, r5, r6, pc}
    194c:	400fc000 	.word	0x400fc000
    1950:	fc030000 	.word	0xfc030000
    1954:	403dc000 	.word	0x403dc000
    1958:	401e0000 	.word	0x401e0000
    195c:	401e4000 	.word	0x401e4000

00001960 <unused_interrupt_vector>:
	__disable_irq();
    1960:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    1962:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
    1966:	4c52      	ldr	r4, [pc, #328]	; (1ab0 <unused_interrupt_vector+0x150>)
    1968:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("tst lr, #4\nite eq\nmrseq %0, msp\nmrsne %0, psp\n" : "=r" (stack) :: "memory");
    196c:	f01e 0f04 	tst.w	lr, #4
    1970:	bf0c      	ite	eq
    1972:	f3ef 8208 	mrseq	r2, MSP
    1976:	f3ef 8209 	mrsne	r2, PSP
	info->cfsr = SCB_CFSR;
    197a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
    197e:	4e4d      	ldr	r6, [pc, #308]	; (1ab4 <unused_interrupt_vector+0x154>)
	while (p < end) {
    1980:	4d4d      	ldr	r5, [pc, #308]	; (1ab8 <unused_interrupt_vector+0x158>)
	info->cfsr = SCB_CFSR;
    1982:	f8d3 0d28 	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
    1986:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
    198a:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
    198e:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
    1992:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
    1996:	e9c4 1324 	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
    199a:	6993      	ldr	r3, [r2, #24]
    199c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    19a0:	69d3      	ldr	r3, [r2, #28]
    19a2:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    19a6:	f000 f8d1 	bl	1b4c <tempmonGetTemp>
    19aa:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    19ae:	f001 fb71 	bl	3094 <rtc_get>
	info->len = sizeof(*info) / 4;
    19b2:	210b      	movs	r1, #11
	crc = 0xFFFFFFFF;
    19b4:	f04f 32ff 	mov.w	r2, #4294967295
	info->time = rtc_get();
    19b8:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    19bc:	460b      	mov	r3, r1
    19be:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    19c2:	493e      	ldr	r1, [pc, #248]	; (1abc <unused_interrupt_vector+0x15c>)
		crc ^= *p++;
    19c4:	1d30      	adds	r0, r6, #4
    19c6:	405a      	eors	r2, r3
    19c8:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    19ca:	f002 0301 	and.w	r3, r2, #1
    19ce:	3c01      	subs	r4, #1
    19d0:	fb01 f303 	mul.w	r3, r1, r3
    19d4:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
    19d8:	d1f7      	bne.n	19ca <unused_interrupt_vector+0x6a>
	while (p < end) {
    19da:	42a8      	cmp	r0, r5
    19dc:	d002      	beq.n	19e4 <unused_interrupt_vector+0x84>
		crc ^= *p++;
    19de:	6873      	ldr	r3, [r6, #4]
    19e0:	4606      	mov	r6, r0
    19e2:	e7ef      	b.n	19c4 <unused_interrupt_vector+0x64>
	info->crc = crc;
    19e4:	4b32      	ldr	r3, [pc, #200]	; (1ab0 <unused_interrupt_vector+0x150>)
    19e6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    19ea:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    19ee:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    19f2:	4930      	ldr	r1, [pc, #192]	; (1ab4 <unused_interrupt_vector+0x154>)
    19f4:	4a32      	ldr	r2, [pc, #200]	; (1ac0 <unused_interrupt_vector+0x160>)
    19f6:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
    19fa:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
    19fe:	f3bf 8f4f 	dsb	sy
	asm("isb");
    1a02:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    1a06:	4a2f      	ldr	r2, [pc, #188]	; (1ac4 <unused_interrupt_vector+0x164>)
	PIT_MCR = PIT_MCR_MDIS;
    1a08:	2502      	movs	r5, #2
    1a0a:	482f      	ldr	r0, [pc, #188]	; (1ac8 <unused_interrupt_vector+0x168>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    1a0c:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    1a0e:	492f      	ldr	r1, [pc, #188]	; (1acc <unused_interrupt_vector+0x16c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    1a10:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    1a14:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    1a16:	6005      	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    1a18:	69d3      	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    1a1a:	482d      	ldr	r0, [pc, #180]	; (1ad0 <unused_interrupt_vector+0x170>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    1a1c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    1a20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1a24:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    1a26:	680b      	ldr	r3, [r1, #0]
    1a28:	4283      	cmp	r3, r0
    1a2a:	d83d      	bhi.n	1aa8 <unused_interrupt_vector+0x148>
	PIT_MCR = 0;
    1a2c:	4d26      	ldr	r5, [pc, #152]	; (1ac8 <unused_interrupt_vector+0x168>)
    1a2e:	2100      	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
    1a30:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    1a34:	f04f 32ff 	mov.w	r2, #4294967295
	PIT_MCR = 0;
    1a38:	6029      	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    1a3a:	2601      	movs	r6, #1
	PIT_TCTRL0 = 0;
    1a3c:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    1a40:	4924      	ldr	r1, [pc, #144]	; (1ad4 <unused_interrupt_vector+0x174>)
    1a42:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    1a46:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
    1a4a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    1a4e:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    1a52:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    1a56:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    1a5a:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	count = 0;
    1a5e:	e001      	b.n	1a64 <unused_interrupt_vector+0x104>
		usb_isr();
    1a60:	f000 f966 	bl	1d30 <usb_isr>
		if (PIT_TFLG0) {
    1a64:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    1a68:	2b00      	cmp	r3, #0
    1a6a:	d0f9      	beq.n	1a60 <unused_interrupt_vector+0x100>
			if (++count >= 80) break;  // reboot after 8 seconds
    1a6c:	3401      	adds	r4, #1
			PIT_TFLG0 = 1;
    1a6e:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    1a72:	2c4f      	cmp	r4, #79	; 0x4f
    1a74:	d9f4      	bls.n	1a60 <unused_interrupt_vector+0x100>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    1a76:	4b18      	ldr	r3, [pc, #96]	; (1ad8 <unused_interrupt_vector+0x178>)
	USB1_USBCMD = USB_USBCMD_RST;
    1a78:	2002      	movs	r0, #2
    1a7a:	4918      	ldr	r1, [pc, #96]	; (1adc <unused_interrupt_vector+0x17c>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    1a7c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
    1a80:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    1a84:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    1a86:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    1a8a:	b93b      	cbnz	r3, 1a9c <unused_interrupt_vector+0x13c>
	SRC_GPR5 = 0x0BAD00F1;
    1a8c:	4814      	ldr	r0, [pc, #80]	; (1ae0 <unused_interrupt_vector+0x180>)
    1a8e:	4915      	ldr	r1, [pc, #84]	; (1ae4 <unused_interrupt_vector+0x184>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    1a90:	4a0d      	ldr	r2, [pc, #52]	; (1ac8 <unused_interrupt_vector+0x168>)
	SRC_GPR5 = 0x0BAD00F1;
    1a92:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    1a94:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
    1a98:	2b00      	cmp	r3, #0
    1a9a:	d0fa      	beq.n	1a92 <unused_interrupt_vector+0x132>
	SCB_AIRCR = 0x05FA0004;
    1a9c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    1aa0:	4a11      	ldr	r2, [pc, #68]	; (1ae8 <unused_interrupt_vector+0x188>)
    1aa2:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    1aa6:	e7fe      	b.n	1aa6 <unused_interrupt_vector+0x146>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    1aa8:	f001 f97c 	bl	2da4 <set_arm_clock>
    1aac:	e7be      	b.n	1a2c <unused_interrupt_vector+0xcc>
    1aae:	bf00      	nop
    1ab0:	2027ff00 	.word	0x2027ff00
    1ab4:	2027ff80 	.word	0x2027ff80
    1ab8:	2027ffa8 	.word	0x2027ffa8
    1abc:	edb88320 	.word	0xedb88320
    1ac0:	2027ffa0 	.word	0x2027ffa0
    1ac4:	400fc000 	.word	0x400fc000
    1ac8:	40084000 	.word	0x40084000
    1acc:	20007954 	.word	0x20007954
    1ad0:	0bcd3d80 	.word	0x0bcd3d80
    1ad4:	00249f00 	.word	0x00249f00
    1ad8:	400d9000 	.word	0x400d9000
    1adc:	402e0000 	.word	0x402e0000
    1ae0:	400f8000 	.word	0x400f8000
    1ae4:	0bad00f1 	.word	0x0bad00f1
    1ae8:	05fa0004 	.word	0x05fa0004

00001aec <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
    1aec:	490a      	ldr	r1, [pc, #40]	; (1b18 <_sbrk+0x2c>)
    1aee:	680a      	ldr	r2, [r1, #0]
        if (incr != 0) {
    1af0:	b138      	cbz	r0, 1b02 <_sbrk+0x16>
{
    1af2:	b508      	push	{r3, lr}
                if (prev + incr > (char *)&_heap_end) {
    1af4:	1813      	adds	r3, r2, r0
    1af6:	4809      	ldr	r0, [pc, #36]	; (1b1c <_sbrk+0x30>)
    1af8:	4283      	cmp	r3, r0
    1afa:	d804      	bhi.n	1b06 <_sbrk+0x1a>
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    1afc:	4610      	mov	r0, r2
                __brkval = prev + incr;
    1afe:	600b      	str	r3, [r1, #0]
}
    1b00:	bd08      	pop	{r3, pc}
    1b02:	4610      	mov	r0, r2
    1b04:	4770      	bx	lr
                        errno = ENOMEM;
    1b06:	f003 fca7 	bl	5458 <__errno>
    1b0a:	230c      	movs	r3, #12
                        return (void *)-1;
    1b0c:	f04f 32ff 	mov.w	r2, #4294967295
                        errno = ENOMEM;
    1b10:	6003      	str	r3, [r0, #0]
}
    1b12:	4610      	mov	r0, r2
    1b14:	bd08      	pop	{r3, pc}
    1b16:	bf00      	nop
    1b18:	20007a34 	.word	0x20007a34
    1b1c:	20280000 	.word	0x20280000

00001b20 <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
    1b20:	2000      	movs	r0, #0
    1b22:	4770      	bx	lr

00001b24 <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
    1b24:	f04f 30ff 	mov.w	r0, #4294967295
    1b28:	4770      	bx	lr
    1b2a:	bf00      	nop

00001b2c <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
    1b2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
    1b30:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
    1b32:	604b      	str	r3, [r1, #4]
}
    1b34:	4770      	bx	lr
    1b36:	bf00      	nop

00001b38 <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
    1b38:	2001      	movs	r0, #1
    1b3a:	4770      	bx	lr

00001b3c <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
    1b3c:	f04f 30ff 	mov.w	r0, #4294967295
    1b40:	4770      	bx	lr
    1b42:	bf00      	nop

00001b44 <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    1b44:	bf30      	wfi
    1b46:	e7fd      	b.n	1b44 <abort>

00001b48 <Panic_Temp_isr>:
  unused_interrupt_vector();
    1b48:	f7ff bf0a 	b.w	1960 <unused_interrupt_vector>

00001b4c <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    1b4c:	4a12      	ldr	r2, [pc, #72]	; (1b98 <tempmonGetTemp+0x4c>)
    1b4e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    1b52:	075b      	lsls	r3, r3, #29
    1b54:	d5fb      	bpl.n	1b4e <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    1b56:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    1b5a:	4810      	ldr	r0, [pc, #64]	; (1b9c <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    1b5c:	f3c3 230b 	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    1b60:	490f      	ldr	r1, [pc, #60]	; (1ba0 <tempmonGetTemp+0x54>)
    1b62:	ed90 7a00 	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    1b66:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    1b6a:	ed91 6a00 	vldr	s12, [r1]
    1b6e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    1b72:	4a0c      	ldr	r2, [pc, #48]	; (1ba4 <tempmonGetTemp+0x58>)
    1b74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    1b78:	4b0b      	ldr	r3, [pc, #44]	; (1ba8 <tempmonGetTemp+0x5c>)
    1b7a:	edd2 6a00 	vldr	s13, [r2]
    1b7e:	ee77 7ac7 	vsub.f32	s15, s15, s14
    1b82:	ed93 7a00 	vldr	s14, [r3]
    1b86:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    1b8a:	ee67 7a86 	vmul.f32	s15, s15, s12
    1b8e:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
    1b92:	ee37 0a40 	vsub.f32	s0, s14, s0
    1b96:	4770      	bx	lr
    1b98:	400d8100 	.word	0x400d8100
    1b9c:	20008ca0 	.word	0x20008ca0
    1ba0:	20008ca8 	.word	0x20008ca8
    1ba4:	20008cac 	.word	0x20008cac
    1ba8:	20008ca4 	.word	0x20008ca4

00001bac <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    1bac:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
    1bae:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
    1bb0:	b11b      	cbz	r3, 1bba <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    1bb2:	6853      	ldr	r3, [r2, #4]
    1bb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    1bb8:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    1bba:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    1bbc:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    1bbe:	b33c      	cbz	r4, 1c10 <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    1bc0:	4b1a      	ldr	r3, [pc, #104]	; (1c2c <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
    1bc2:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    1bc4:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    1bc8:	420c      	tst	r4, r1
    1bca:	d11d      	bne.n	1c08 <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    1bcc:	4e18      	ldr	r6, [pc, #96]	; (1c30 <schedule_transfer+0x84>)
    1bce:	6877      	ldr	r7, [r6, #4]
    1bd0:	e004      	b.n	1bdc <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    1bd2:	6874      	ldr	r4, [r6, #4]
    1bd4:	1be4      	subs	r4, r4, r7
    1bd6:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    1bda:	d20b      	bcs.n	1bf4 <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    1bdc:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    1be0:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    1be4:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    1be8:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    1bec:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    1bf0:	0464      	lsls	r4, r4, #17
    1bf2:	d5ee      	bpl.n	1bd2 <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    1bf4:	400d      	ands	r5, r1
    1bf6:	d107      	bne.n	1c08 <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    1bf8:	4c0c      	ldr	r4, [pc, #48]	; (1c2c <schedule_transfer+0x80>)
		endpoint->status = 0;
    1bfa:	e9c0 2502 	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    1bfe:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1c02:	430b      	orrs	r3, r1
    1c04:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    1c08:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    1c0a:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    1c0c:	bcf0      	pop	{r4, r5, r6, r7}
    1c0e:	4770      	bx	lr
	USB1_ENDPTPRIME |= epmask;
    1c10:	4d06      	ldr	r5, [pc, #24]	; (1c2c <schedule_transfer+0x80>)
	endpoint->status = 0;
    1c12:	e9c0 2402 	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    1c16:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
    1c1a:	430b      	orrs	r3, r1
    1c1c:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    1c20:	6302      	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
    1c22:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    1c24:	b662      	cpsie	i
}
    1c26:	bcf0      	pop	{r4, r5, r6, r7}
    1c28:	4770      	bx	lr
    1c2a:	bf00      	nop
    1c2c:	402e0000 	.word	0x402e0000
    1c30:	e0001000 	.word	0xe0001000

00001c34 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    1c34:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    1c36:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
    1c38:	b19d      	cbz	r5, 1c62 <run_callbacks+0x2e>
    1c3a:	4606      	mov	r6, r0
    1c3c:	462a      	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    1c3e:	2400      	movs	r4, #0
    1c40:	e003      	b.n	1c4a <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    1c42:	6812      	ldr	r2, [r2, #0]
		count++;
    1c44:	3401      	adds	r4, #1
		if ((uint32_t)t == 1) {
    1c46:	2a01      	cmp	r2, #1
    1c48:	d00c      	beq.n	1c64 <run_callbacks+0x30>
		if (t->status & (1<<7)) {
    1c4a:	6853      	ldr	r3, [r2, #4]
    1c4c:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    1c50:	d0f7      	beq.n	1c42 <run_callbacks+0xe>
			ep->first_transfer = t;
    1c52:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    1c54:	b12c      	cbz	r4, 1c62 <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
    1c56:	4628      	mov	r0, r5
		ep->callback_function(first);
    1c58:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
    1c5a:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
    1c5c:	4798      	blx	r3
	while (count) {
    1c5e:	3c01      	subs	r4, #1
    1c60:	d1f9      	bne.n	1c56 <run_callbacks+0x22>
		first = next;
		count--;
	}
}
    1c62:	bd70      	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
    1c64:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
			break;
    1c68:	e7f4      	b.n	1c54 <run_callbacks+0x20>
    1c6a:	bf00      	nop

00001c6c <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    1c6c:	b430      	push	{r4, r5}
	if (len > 0) {
    1c6e:	b9d9      	cbnz	r1, 1ca8 <endpoint0_transmit.constprop.0+0x3c>
    1c70:	4c1f      	ldr	r4, [pc, #124]	; (1cf0 <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
    1c72:	4b20      	ldr	r3, [pc, #128]	; (1cf4 <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
    1c74:	2100      	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1c76:	4a20      	ldr	r2, [pc, #128]	; (1cf8 <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
    1c78:	2501      	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1c7a:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    1c7e:	6099      	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    1c80:	601d      	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
    1c82:	e9c4 3102 	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1c86:	2480      	movs	r4, #128	; 0x80
    1c88:	605c      	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1c8a:	f8c2 01bc 	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    1c8e:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    1c92:	481a      	ldr	r0, [pc, #104]	; (1cfc <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
    1c94:	432b      	orrs	r3, r5
    1c96:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    1c9a:	6001      	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
    1c9c:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    1ca0:	2b00      	cmp	r3, #0
    1ca2:	d1fb      	bne.n	1c9c <endpoint0_transmit.constprop.0+0x30>
}
    1ca4:	bc30      	pop	{r4, r5}
    1ca6:	4770      	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1ca8:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    1caa:	4b15      	ldr	r3, [pc, #84]	; (1d00 <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    1cac:	4c10      	ldr	r4, [pc, #64]	; (1cf0 <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
    1cae:	2501      	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1cb0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    1cb4:	6098      	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
    1cb6:	4a10      	ldr	r2, [pc, #64]	; (1cf8 <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1cb8:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    1cba:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    1cbe:	601d      	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    1cc0:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    1cc2:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    1cc6:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
    1cc8:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    1cca:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    1cce:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    1cd2:	6159      	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
    1cd4:	2100      	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
    1cd6:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    1cd8:	64e1      	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    1cda:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    1cde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    1ce2:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    1ce6:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    1cea:	2b00      	cmp	r3, #0
    1cec:	d1fb      	bne.n	1ce6 <endpoint0_transmit.constprop.0+0x7a>
    1cee:	e7c0      	b.n	1c72 <endpoint0_transmit.constprop.0+0x6>
    1cf0:	20000000 	.word	0x20000000
    1cf4:	200086c0 	.word	0x200086c0
    1cf8:	402e0000 	.word	0x402e0000
    1cfc:	20008c30 	.word	0x20008c30
    1d00:	200086e0 	.word	0x200086e0

00001d04 <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    1d04:	4908      	ldr	r1, [pc, #32]	; (1d28 <usb_stop_sof_interrupts+0x24>)
    1d06:	2201      	movs	r2, #1
    1d08:	780b      	ldrb	r3, [r1, #0]
    1d0a:	fa02 f000 	lsl.w	r0, r2, r0
    1d0e:	ea23 0000 	bic.w	r0, r3, r0
    1d12:	7008      	strb	r0, [r1, #0]
	if (sof_usage == 0) {
    1d14:	b930      	cbnz	r0, 1d24 <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    1d16:	4a05      	ldr	r2, [pc, #20]	; (1d2c <usb_stop_sof_interrupts+0x28>)
    1d18:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
    1d1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    1d20:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
    1d24:	4770      	bx	lr
    1d26:	bf00      	nop
    1d28:	20008ce2 	.word	0x20008ce2
    1d2c:	402e0000 	.word	0x402e0000

00001d30 <usb_isr>:
{
    1d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
    1d34:	4c97      	ldr	r4, [pc, #604]	; (1f94 <usb_isr+0x264>)
{
    1d36:	b083      	sub	sp, #12
	uint32_t status = USB1_USBSTS;
    1d38:	f8d4 7144 	ldr.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    1d3c:	07fb      	lsls	r3, r7, #31
	USB1_USBSTS = status;
    1d3e:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    1d42:	d553      	bpl.n	1dec <usb_isr+0xbc>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    1d44:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    1d48:	2a00      	cmp	r2, #0
    1d4a:	d04a      	beq.n	1de2 <usb_isr+0xb2>
    1d4c:	4e92      	ldr	r6, [pc, #584]	; (1f98 <usb_isr+0x268>)
    1d4e:	f8df a260 	ldr.w	sl, [pc, #608]	; 1fb0 <usb_isr+0x280>
		uint32_t addr = (uint32_t)data;
    1d52:	f8df 9274 	ldr.w	r9, [pc, #628]	; 1fc8 <usb_isr+0x298>
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    1d56:	f8df b274 	ldr.w	fp, [pc, #628]	; 1fcc <usb_isr+0x29c>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    1d5a:	f8df 8274 	ldr.w	r8, [pc, #628]	; 1fd0 <usb_isr+0x2a0>
			USB1_ENDPTSETUPSTAT = setupstatus;
    1d5e:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
    1d62:	e9d6 200a 	ldrd	r2, r0, [r6, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    1d66:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    1d6a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1d6e:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    1d72:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    1d76:	049d      	lsls	r5, r3, #18
    1d78:	d5f5      	bpl.n	1d66 <usb_isr+0x36>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    1d7a:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    1d7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    1d82:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    1d86:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    1d8a:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    1d8e:	f8d4 51b4 	ldr.w	r5, [r4, #436]	; 0x1b4
    1d92:	f015 1501 	ands.w	r5, r5, #65537	; 0x10001
    1d96:	d1fa      	bne.n	1d8e <usb_isr+0x5e>
			endpoint0_notify_mask = 0;
    1d98:	b293      	uxth	r3, r2
	setup.bothwords = setupdata;
    1d9a:	4684      	mov	ip, r0
			endpoint0_notify_mask = 0;
    1d9c:	f8ca 5000 	str.w	r5, [sl]
	switch (setup.wRequestAndType) {
    1da0:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    1da4:	f000 81cf 	beq.w	2146 <usb_isr+0x416>
    1da8:	f200 80db 	bhi.w	1f62 <usb_isr+0x232>
    1dac:	f240 3102 	movw	r1, #770	; 0x302
    1db0:	428b      	cmp	r3, r1
    1db2:	f000 81e7 	beq.w	2184 <usb_isr+0x454>
    1db6:	f200 809a 	bhi.w	1eee <usb_isr+0x1be>
    1dba:	2b82      	cmp	r3, #130	; 0x82
    1dbc:	f000 81cb 	beq.w	2156 <usb_isr+0x426>
    1dc0:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    1dc4:	f040 808a 	bne.w	1edc <usb_isr+0x1ac>
		if (endpoint > 7) break;
    1dc8:	f010 0f78 	tst.w	r0, #120	; 0x78
    1dcc:	b283      	uxth	r3, r0
    1dce:	f000 8203 	beq.w	21d8 <usb_isr+0x4a8>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    1dd2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    1dd6:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1dda:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    1dde:	2a00      	cmp	r2, #0
    1de0:	d1bd      	bne.n	1d5e <usb_isr+0x2e>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    1de2:	4a6c      	ldr	r2, [pc, #432]	; (1f94 <usb_isr+0x264>)
    1de4:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    1de8:	2b00      	cmp	r3, #0
    1dea:	d142      	bne.n	1e72 <usb_isr+0x142>
	if (status & USB_USBSTS_URI) { // page 3164
    1dec:	067e      	lsls	r6, r7, #25
    1dee:	d516      	bpl.n	1e1e <usb_isr+0xee>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    1df0:	4b68      	ldr	r3, [pc, #416]	; (1f94 <usb_isr+0x264>)
    1df2:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    1df6:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    1dfa:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    1dfe:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    1e02:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    1e06:	2c00      	cmp	r4, #0
    1e08:	d1fb      	bne.n	1e02 <usb_isr+0xd2>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    1e0a:	f04f 32ff 	mov.w	r2, #4294967295
    1e0e:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    1e12:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    1e16:	f000 fd29 	bl	286c <usb_serial_reset>
		endpointN_notify_mask = 0;
    1e1a:	4b60      	ldr	r3, [pc, #384]	; (1f9c <usb_isr+0x26c>)
    1e1c:	601c      	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
    1e1e:	01fc      	lsls	r4, r7, #7
    1e20:	d503      	bpl.n	1e2a <usb_isr+0xfa>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    1e22:	4b5f      	ldr	r3, [pc, #380]	; (1fa0 <usb_isr+0x270>)
    1e24:	681b      	ldr	r3, [r3, #0]
    1e26:	b103      	cbz	r3, 1e2a <usb_isr+0xfa>
    1e28:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
    1e2a:	01b8      	lsls	r0, r7, #6
    1e2c:	d503      	bpl.n	1e36 <usb_isr+0x106>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    1e2e:	4b5d      	ldr	r3, [pc, #372]	; (1fa4 <usb_isr+0x274>)
    1e30:	681b      	ldr	r3, [r3, #0]
    1e32:	b103      	cbz	r3, 1e36 <usb_isr+0x106>
    1e34:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
    1e36:	0779      	lsls	r1, r7, #29
    1e38:	d508      	bpl.n	1e4c <usb_isr+0x11c>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    1e3a:	4b56      	ldr	r3, [pc, #344]	; (1f94 <usb_isr+0x264>)
    1e3c:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    1e40:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    1e44:	d047      	beq.n	1ed6 <usb_isr+0x1a6>
			usb_high_speed = 1;
    1e46:	4b58      	ldr	r3, [pc, #352]	; (1fa8 <usb_isr+0x278>)
    1e48:	2201      	movs	r2, #1
    1e4a:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    1e4c:	4b51      	ldr	r3, [pc, #324]	; (1f94 <usb_isr+0x264>)
    1e4e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
    1e52:	061a      	lsls	r2, r3, #24
    1e54:	d50a      	bpl.n	1e6c <usb_isr+0x13c>
    1e56:	063b      	lsls	r3, r7, #24
    1e58:	d508      	bpl.n	1e6c <usb_isr+0x13c>
		if (usb_reboot_timer) {
    1e5a:	4a54      	ldr	r2, [pc, #336]	; (1fac <usb_isr+0x27c>)
    1e5c:	7813      	ldrb	r3, [r2, #0]
    1e5e:	b12b      	cbz	r3, 1e6c <usb_isr+0x13c>
			if (--usb_reboot_timer == 0) {
    1e60:	3b01      	subs	r3, #1
    1e62:	b2db      	uxtb	r3, r3
    1e64:	7013      	strb	r3, [r2, #0]
    1e66:	2b00      	cmp	r3, #0
    1e68:	f000 8272 	beq.w	2350 <usb_isr+0x620>
}
    1e6c:	b003      	add	sp, #12
    1e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (completestatus & endpoint0_notify_mask) {
    1e72:	494f      	ldr	r1, [pc, #316]	; (1fb0 <usb_isr+0x280>)
			USB1_ENDPTCOMPLETE = completestatus;
    1e74:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    1e78:	6808      	ldr	r0, [r1, #0]
    1e7a:	4203      	tst	r3, r0
    1e7c:	f040 81d1 	bne.w	2222 <usb_isr+0x4f2>
			completestatus &= endpointN_notify_mask;
    1e80:	4a46      	ldr	r2, [pc, #280]	; (1f9c <usb_isr+0x26c>)
    1e82:	6814      	ldr	r4, [r2, #0]
			if (completestatus) {
    1e84:	401c      	ands	r4, r3
    1e86:	d0b1      	beq.n	1dec <usb_isr+0xbc>
				while (tx) {
    1e88:	ea5f 4814 	movs.w	r8, r4, lsr #16
    1e8c:	d010      	beq.n	1eb0 <usb_isr+0x180>
    1e8e:	4e42      	ldr	r6, [pc, #264]	; (1f98 <usb_isr+0x268>)
					tx &= ~(1<<p);
    1e90:	f04f 0901 	mov.w	r9, #1
					int p=__builtin_ctz(tx);
    1e94:	fa98 f5a8 	rbit	r5, r8
    1e98:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    1e9c:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					tx &= ~(1<<p);
    1ea0:	fa09 f505 	lsl.w	r5, r9, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    1ea4:	3040      	adds	r0, #64	; 0x40
    1ea6:	f7ff fec5 	bl	1c34 <run_callbacks>
				while (tx) {
    1eaa:	ea38 0805 	bics.w	r8, r8, r5
    1eae:	d1f1      	bne.n	1e94 <usb_isr+0x164>
				uint32_t rx = completestatus & 0xffff;
    1eb0:	b2a4      	uxth	r4, r4
				while(rx) {
    1eb2:	2c00      	cmp	r4, #0
    1eb4:	d09a      	beq.n	1dec <usb_isr+0xbc>
    1eb6:	4e38      	ldr	r6, [pc, #224]	; (1f98 <usb_isr+0x268>)
					rx &= ~(1<<p);
    1eb8:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(rx);
    1ebc:	fa94 f5a4 	rbit	r5, r4
    1ec0:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    1ec4:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					rx &= ~(1<<p);
    1ec8:	fa08 f505 	lsl.w	r5, r8, r5
					run_callbacks(endpoint_queue_head + p * 2);
    1ecc:	f7ff feb2 	bl	1c34 <run_callbacks>
				while(rx) {
    1ed0:	43ac      	bics	r4, r5
    1ed2:	d1f3      	bne.n	1ebc <usb_isr+0x18c>
    1ed4:	e78a      	b.n	1dec <usb_isr+0xbc>
			usb_high_speed = 0;
    1ed6:	4a34      	ldr	r2, [pc, #208]	; (1fa8 <usb_isr+0x278>)
    1ed8:	7013      	strb	r3, [r2, #0]
    1eda:	e7b7      	b.n	1e4c <usb_isr+0x11c>
	switch (setup.wRequestAndType) {
    1edc:	2b80      	cmp	r3, #128	; 0x80
    1ede:	f47f af78 	bne.w	1dd2 <usb_isr+0xa2>
		reply_buffer[0] = 0;
    1ee2:	4834      	ldr	r0, [pc, #208]	; (1fb4 <usb_isr+0x284>)
		endpoint0_transmit(reply_buffer, 2, 0);
    1ee4:	2102      	movs	r1, #2
		reply_buffer[0] = 0;
    1ee6:	8005      	strh	r5, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    1ee8:	f7ff fec0 	bl	1c6c <endpoint0_transmit.constprop.0>
		return;
    1eec:	e775      	b.n	1dda <usb_isr+0xaa>
	switch (setup.wRequestAndType) {
    1eee:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    1ef2:	f000 810b 	beq.w	210c <usb_isr+0x3dc>
    1ef6:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
    1efa:	2b01      	cmp	r3, #1
    1efc:	f63f af69 	bhi.w	1dd2 <usb_isr+0xa2>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    1f00:	4b2d      	ldr	r3, [pc, #180]	; (1fb8 <usb_isr+0x288>)
    1f02:	685d      	ldr	r5, [r3, #4]
    1f04:	2d00      	cmp	r5, #0
    1f06:	f43f af64 	beq.w	1dd2 <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    1f0a:	fa1f fc8c 	uxth.w	ip, ip
    1f0e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    1f12:	e004      	b.n	1f1e <usb_isr+0x1ee>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    1f14:	691d      	ldr	r5, [r3, #16]
    1f16:	330c      	adds	r3, #12
    1f18:	2d00      	cmp	r5, #0
    1f1a:	f43f af5a 	beq.w	1dd2 <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    1f1e:	881a      	ldrh	r2, [r3, #0]
    1f20:	4572      	cmp	r2, lr
    1f22:	d1f7      	bne.n	1f14 <usb_isr+0x1e4>
    1f24:	885a      	ldrh	r2, [r3, #2]
    1f26:	4562      	cmp	r2, ip
    1f28:	d1f4      	bne.n	1f14 <usb_isr+0x1e4>
				if ((setup.wValue >> 8) == 3) {
    1f2a:	ea4f 221e 	mov.w	r2, lr, lsr #8
    1f2e:	2a03      	cmp	r2, #3
    1f30:	f000 81a5 	beq.w	227e <usb_isr+0x54e>
					datalen = list->length;
    1f34:	891a      	ldrh	r2, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    1f36:	0c00      	lsrs	r0, r0, #16
    1f38:	4282      	cmp	r2, r0
    1f3a:	bf28      	it	cs
    1f3c:	4602      	movcs	r2, r0
				if (setup.wValue == 0x200) {
    1f3e:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    1f42:	f040 81a1 	bne.w	2288 <usb_isr+0x558>
					if (usb_high_speed) src = usb_config_descriptor_480;
    1f46:	4b18      	ldr	r3, [pc, #96]	; (1fa8 <usb_isr+0x278>)
    1f48:	491c      	ldr	r1, [pc, #112]	; (1fbc <usb_isr+0x28c>)
    1f4a:	7818      	ldrb	r0, [r3, #0]
    1f4c:	4b1c      	ldr	r3, [pc, #112]	; (1fc0 <usb_isr+0x290>)
					memcpy(usb_descriptor_buffer, src, datalen);
    1f4e:	9201      	str	r2, [sp, #4]
    1f50:	2800      	cmp	r0, #0
    1f52:	bf18      	it	ne
    1f54:	4619      	movne	r1, r3
    1f56:	481b      	ldr	r0, [pc, #108]	; (1fc4 <usb_isr+0x294>)
    1f58:	f7ff fb7e 	bl	1658 <memcpy>
    1f5c:	4d19      	ldr	r5, [pc, #100]	; (1fc4 <usb_isr+0x294>)
    1f5e:	9a01      	ldr	r2, [sp, #4]
    1f60:	e1e1      	b.n	2326 <usb_isr+0x5f6>
	switch (setup.wRequestAndType) {
    1f62:	f242 2121 	movw	r1, #8737	; 0x2221
    1f66:	428b      	cmp	r3, r1
    1f68:	d07c      	beq.n	2064 <usb_isr+0x334>
    1f6a:	d933      	bls.n	1fd4 <usb_isr+0x2a4>
    1f6c:	f242 3121 	movw	r1, #8993	; 0x2321
    1f70:	428b      	cmp	r3, r1
    1f72:	f000 8081 	beq.w	2078 <usb_isr+0x348>
    1f76:	f64f 01c0 	movw	r1, #63680	; 0xf8c0
    1f7a:	428b      	cmp	r3, r1
    1f7c:	f47f af29 	bne.w	1dd2 <usb_isr+0xa2>
		if ((setup.wIndex & 0xFF00) != 0) break; // 1=Genre, 4=Compat ID, 5=Properties
    1f80:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
    1f84:	b283      	uxth	r3, r0
    1f86:	f47f af24 	bne.w	1dd2 <usb_isr+0xa2>
		setup.wIndex |= 0xEE00; // alter wIndex and treat as normal USB descriptor
    1f8a:	f443 436e 	orr.w	r3, r3, #60928	; 0xee00
    1f8e:	f363 0c0f 	bfi	ip, r3, #0, #16
    1f92:	e7b5      	b.n	1f00 <usb_isr+0x1d0>
    1f94:	402e0000 	.word	0x402e0000
    1f98:	20000000 	.word	0x20000000
    1f9c:	20008c34 	.word	0x20008c34
    1fa0:	20008ccc 	.word	0x20008ccc
    1fa4:	20008cd0 	.word	0x20008cd0
    1fa8:	20008ce8 	.word	0x20008ce8
    1fac:	20008ce9 	.word	0x20008ce9
    1fb0:	20008c30 	.word	0x20008c30
    1fb4:	20008c68 	.word	0x20008c68
    1fb8:	2000778c 	.word	0x2000778c
    1fbc:	60001eb8 	.word	0x60001eb8
    1fc0:	60001f1c 	.word	0x60001f1c
    1fc4:	20200000 	.word	0x20200000
    1fc8:	20008c28 	.word	0x20008c28
    1fcc:	b8c6cf5d 	.word	0xb8c6cf5d
    1fd0:	402e01c0 	.word	0x402e01c0
	switch (setup.wRequestAndType) {
    1fd4:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    1fd8:	d066      	beq.n	20a8 <usb_isr+0x378>
    1fda:	f242 0121 	movw	r1, #8225	; 0x2021
    1fde:	428b      	cmp	r3, r1
    1fe0:	f47f aef7 	bne.w	1dd2 <usb_isr+0xa2>
		if (setup.wLength != 7) break;
    1fe4:	0c03      	lsrs	r3, r0, #16
    1fe6:	2b07      	cmp	r3, #7
    1fe8:	f47f aef3 	bne.w	1dd2 <usb_isr+0xa2>
		endpoint0_transfer_data.next = 1;
    1fec:	4bb2      	ldr	r3, [pc, #712]	; (22b8 <usb_isr+0x588>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
    1fee:	49b3      	ldr	r1, [pc, #716]	; (22bc <usb_isr+0x58c>)
		endpoint_queue_head[0].status = 0;
    1ff0:	60f5      	str	r5, [r6, #12]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    1ff2:	60d9      	str	r1, [r3, #12]
		endpoint0_setupdata.bothwords = setupdata;
    1ff4:	49b2      	ldr	r1, [pc, #712]	; (22c0 <usb_isr+0x590>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    1ff6:	60b3      	str	r3, [r6, #8]
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    1ff8:	f8c3 9008 	str.w	r9, [r3, #8]
		endpoint0_setupdata.bothwords = setupdata;
    1ffc:	e9c1 2000 	strd	r2, r0, [r1]
		endpoint0_transfer_data.next = 1;
    2000:	2201      	movs	r2, #1
    2002:	601a      	str	r2, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    2004:	4aaf      	ldr	r2, [pc, #700]	; (22c4 <usb_isr+0x594>)
    2006:	605a      	str	r2, [r3, #4]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    2008:	4aaf      	ldr	r2, [pc, #700]	; (22c8 <usb_isr+0x598>)
    200a:	611a      	str	r2, [r3, #16]
		USB1_ENDPTPRIME |= (1<<0);
    200c:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
    2010:	f041 0101 	orr.w	r1, r1, #1
    2014:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.pointer3 = addr + 12288;
    2018:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    201c:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    2020:	6159      	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    2022:	619a      	str	r2, [r3, #24]
		while (USB1_ENDPTPRIME) ;
    2024:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2028:	2b00      	cmp	r3, #0
    202a:	d1fb      	bne.n	2024 <usb_isr+0x2f4>
	endpoint0_transfer_ack.next = 1;
    202c:	4aa7      	ldr	r2, [pc, #668]	; (22cc <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    202e:	64f3      	str	r3, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    2030:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
    2032:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    2034:	64b2      	str	r2, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    2036:	6013      	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2038:	f248 0380 	movw	r3, #32896	; 0x8080
    203c:	6053      	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    203e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    2042:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2046:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    204a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    204e:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    2052:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2056:	f8ca 3000 	str.w	r3, [sl]
	while (USB1_ENDPTPRIME) ;
    205a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    205e:	2b00      	cmp	r3, #0
    2060:	d1fb      	bne.n	205a <usb_isr+0x32a>
    2062:	e6ba      	b.n	1dda <usb_isr+0xaa>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    2064:	b280      	uxth	r0, r0
    2066:	b938      	cbnz	r0, 2078 <usb_isr+0x348>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    2068:	4b99      	ldr	r3, [pc, #612]	; (22d0 <usb_isr+0x5a0>)
			usb_cdc_line_rtsdtr = setup.wValue;
    206a:	f3c2 4207 	ubfx	r2, r2, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    206e:	6819      	ldr	r1, [r3, #0]
    2070:	4b98      	ldr	r3, [pc, #608]	; (22d4 <usb_isr+0x5a4>)
    2072:	6019      	str	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    2074:	4b98      	ldr	r3, [pc, #608]	; (22d8 <usb_isr+0x5a8>)
    2076:	701a      	strb	r2, [r3, #0]
	endpoint0_transfer_ack.next = 1;
    2078:	4b94      	ldr	r3, [pc, #592]	; (22cc <usb_isr+0x59c>)
	endpoint0_transfer_ack.pointer0 = 0;
    207a:	2200      	movs	r2, #0
    207c:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
    207e:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    2080:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    2082:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    2084:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2086:	2280      	movs	r2, #128	; 0x80
    2088:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    208a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    208e:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2092:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2096:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    209a:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    209e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    20a2:	2b00      	cmp	r3, #0
    20a4:	d1fb      	bne.n	209e <usb_isr+0x36e>
    20a6:	e698      	b.n	1dda <usb_isr+0xaa>
		usb_configuration = setup.wValue;
    20a8:	f3c2 4207 	ubfx	r2, r2, #16, #8
    20ac:	4b8b      	ldr	r3, [pc, #556]	; (22dc <usb_isr+0x5ac>)
    20ae:	701a      	strb	r2, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    20b0:	4b8b      	ldr	r3, [pc, #556]	; (22e0 <usb_isr+0x5b0>)
    20b2:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    20b6:	4b8b      	ldr	r3, [pc, #556]	; (22e4 <usb_isr+0x5b4>)
    20b8:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    20bc:	4b8a      	ldr	r3, [pc, #552]	; (22e8 <usb_isr+0x5b8>)
    20be:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		usb_serial_configure();
    20c2:	f000 fbd5 	bl	2870 <usb_serial_configure>
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
    20c6:	2280      	movs	r2, #128	; 0x80
    20c8:	4629      	mov	r1, r5
    20ca:	4888      	ldr	r0, [pc, #544]	; (22ec <usb_isr+0x5bc>)
    20cc:	f003 f88e 	bl	51ec <memset>
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    20d0:	4b87      	ldr	r3, [pc, #540]	; (22f0 <usb_isr+0x5c0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    20d2:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    20d4:	f8c6 b0a0 	str.w	fp, [r6, #160]	; 0xa0
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    20d8:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
	endpoint0_transfer_ack.next = 1;
    20dc:	4b7b      	ldr	r3, [pc, #492]	; (22cc <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    20de:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    20e0:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.next = 1;
    20e2:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    20e4:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.pointer0 = 0;
    20e6:	609d      	str	r5, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    20e8:	601a      	str	r2, [r3, #0]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    20ea:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    20ee:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    20f2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    20f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    20fa:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    20fe:	f8ca 5000 	str.w	r5, [sl]
	while (USB1_ENDPTPRIME) ;
    2102:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2106:	2b00      	cmp	r3, #0
    2108:	d1fb      	bne.n	2102 <usb_isr+0x3d2>
    210a:	e666      	b.n	1dda <usb_isr+0xaa>
	endpoint0_transfer_ack.next = 1;
    210c:	4b6f      	ldr	r3, [pc, #444]	; (22cc <usb_isr+0x59c>)
    210e:	2101      	movs	r1, #1
	endpoint_queue_head[1].status = 0;
    2110:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    2112:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2114:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    2116:	609d      	str	r5, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    2118:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    211a:	6059      	str	r1, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    211c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    2120:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2124:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2128:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    212c:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    2130:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2134:	2b00      	cmp	r3, #0
    2136:	d1fb      	bne.n	2130 <usb_isr+0x400>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    2138:	0c13      	lsrs	r3, r2, #16
    213a:	065b      	lsls	r3, r3, #25
    213c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    2140:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		return;
    2144:	e649      	b.n	1dda <usb_isr+0xaa>
		reply_buffer[0] = usb_configuration;
    2146:	4b65      	ldr	r3, [pc, #404]	; (22dc <usb_isr+0x5ac>)
		endpoint0_transmit(reply_buffer, 1, 0);
    2148:	2101      	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    214a:	486a      	ldr	r0, [pc, #424]	; (22f4 <usb_isr+0x5c4>)
    214c:	781b      	ldrb	r3, [r3, #0]
    214e:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    2150:	f7ff fd8c 	bl	1c6c <endpoint0_transmit.constprop.0>
		return;
    2154:	e641      	b.n	1dda <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    2156:	b283      	uxth	r3, r0
		if (endpoint > 7) break;
    2158:	f010 0078 	ands.w	r0, r0, #120	; 0x78
    215c:	f47f ae39 	bne.w	1dd2 <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    2160:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    2164:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
		reply_buffer[0] = 0;
    2168:	4a62      	ldr	r2, [pc, #392]	; (22f4 <usb_isr+0x5c4>)
    216a:	8010      	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    216c:	0618      	lsls	r0, r3, #24
    216e:	f100 809e 	bmi.w	22ae <usb_isr+0x57e>
    2172:	07cb      	lsls	r3, r1, #31
    2174:	d501      	bpl.n	217a <usb_isr+0x44a>
			reply_buffer[0] = 1;
    2176:	2301      	movs	r3, #1
    2178:	7013      	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    217a:	2102      	movs	r1, #2
    217c:	485d      	ldr	r0, [pc, #372]	; (22f4 <usb_isr+0x5c4>)
    217e:	f7ff fd75 	bl	1c6c <endpoint0_transmit.constprop.0>
		return;
    2182:	e62a      	b.n	1dda <usb_isr+0xaa>
		if (endpoint > 7) break;
    2184:	f010 0f78 	tst.w	r0, #120	; 0x78
    2188:	b283      	uxth	r3, r0
    218a:	f47f ae22 	bne.w	1dd2 <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    218e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    2192:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    2196:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    219a:	bf14      	ite	ne
    219c:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    21a0:	f043 0301 	orreq.w	r3, r3, #1
    21a4:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    21a8:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    21aa:	4b48      	ldr	r3, [pc, #288]	; (22cc <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    21ac:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    21ae:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    21b0:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    21b2:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    21b4:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    21b6:	2280      	movs	r2, #128	; 0x80
    21b8:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    21ba:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    21be:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    21c2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    21c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    21ca:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    21ce:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    21d2:	2b00      	cmp	r3, #0
    21d4:	d1fb      	bne.n	21ce <usb_isr+0x49e>
    21d6:	e600      	b.n	1dda <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    21d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    21dc:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    21e0:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    21e4:	bf14      	ite	ne
    21e6:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    21ea:	f023 0301 	biceq.w	r3, r3, #1
    21ee:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    21f2:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    21f4:	4b35      	ldr	r3, [pc, #212]	; (22cc <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    21f6:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    21f8:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    21fa:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    21fc:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    21fe:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2200:	2280      	movs	r2, #128	; 0x80
    2202:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    2204:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    2208:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    220c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2210:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    2214:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    2218:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    221c:	2b00      	cmp	r3, #0
    221e:	d1fb      	bne.n	2218 <usb_isr+0x4e8>
    2220:	e5db      	b.n	1dda <usb_isr+0xaa>
				endpoint0_notify_mask = 0;
    2222:	2000      	movs	r0, #0
    2224:	6008      	str	r0, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    2226:	4926      	ldr	r1, [pc, #152]	; (22c0 <usb_isr+0x590>)
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    2228:	880c      	ldrh	r4, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    222a:	6848      	ldr	r0, [r1, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    222c:	f242 0121 	movw	r1, #8225	; 0x2021
    2230:	428c      	cmp	r4, r1
    2232:	f47f ae25 	bne.w	1e80 <usb_isr+0x150>
    2236:	b280      	uxth	r0, r0
    2238:	2800      	cmp	r0, #0
    223a:	f47f ae21 	bne.w	1e80 <usb_isr+0x150>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    223e:	492e      	ldr	r1, [pc, #184]	; (22f8 <usb_isr+0x5c8>)
    2240:	4c2e      	ldr	r4, [pc, #184]	; (22fc <usb_isr+0x5cc>)
    2242:	c903      	ldmia	r1, {r0, r1}
    2244:	80a1      	strh	r1, [r4, #4]
		if (usb_cdc_line_coding[0] == 134) {
    2246:	2886      	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    2248:	ea4f 4111 	mov.w	r1, r1, lsr #16
    224c:	6020      	str	r0, [r4, #0]
    224e:	71a1      	strb	r1, [r4, #6]
		if (usb_cdc_line_coding[0] == 134) {
    2250:	f47f ae16 	bne.w	1e80 <usb_isr+0x150>
	__disable_irq();
    2254:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    2256:	482a      	ldr	r0, [pc, #168]	; (2300 <usb_isr+0x5d0>)
    2258:	7801      	ldrb	r1, [r0, #0]
    225a:	f041 0108 	orr.w	r1, r1, #8
    225e:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    2260:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    2264:	060d      	lsls	r5, r1, #24
    2266:	d405      	bmi.n	2274 <usb_isr+0x544>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    2268:	2080      	movs	r0, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    226a:	4301      	orrs	r1, r0
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    226c:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    2270:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	__enable_irq();
    2274:	b662      	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    2276:	4a23      	ldr	r2, [pc, #140]	; (2304 <usb_isr+0x5d4>)
    2278:	2150      	movs	r1, #80	; 0x50
    227a:	7011      	strb	r1, [r2, #0]
    227c:	e600      	b.n	1e80 <usb_isr+0x150>
				if (datalen > setup.wLength) datalen = setup.wLength;
    227e:	0c00      	lsrs	r0, r0, #16
					datalen = *(list->addr);
    2280:	782a      	ldrb	r2, [r5, #0]
    2282:	4282      	cmp	r2, r0
    2284:	bf28      	it	cs
    2286:	4602      	movcs	r2, r0
				} else if (setup.wValue == 0x700) {
    2288:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
    228c:	d144      	bne.n	2318 <usb_isr+0x5e8>
					if (usb_high_speed) src = usb_config_descriptor_12;
    228e:	4b1e      	ldr	r3, [pc, #120]	; (2308 <usb_isr+0x5d8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    2290:	4d1e      	ldr	r5, [pc, #120]	; (230c <usb_isr+0x5dc>)
					if (usb_high_speed) src = usb_config_descriptor_12;
    2292:	7818      	ldrb	r0, [r3, #0]
    2294:	491e      	ldr	r1, [pc, #120]	; (2310 <usb_isr+0x5e0>)
    2296:	4b1f      	ldr	r3, [pc, #124]	; (2314 <usb_isr+0x5e4>)
					memcpy(usb_descriptor_buffer, src, datalen);
    2298:	9201      	str	r2, [sp, #4]
    229a:	2800      	cmp	r0, #0
    229c:	bf18      	it	ne
    229e:	4619      	movne	r1, r3
    22a0:	4628      	mov	r0, r5
    22a2:	f7ff f9d9 	bl	1658 <memcpy>
					usb_descriptor_buffer[1] = 7;
    22a6:	2307      	movs	r3, #7
    22a8:	706b      	strb	r3, [r5, #1]
    22aa:	9a01      	ldr	r2, [sp, #4]
    22ac:	e03b      	b.n	2326 <usb_isr+0x5f6>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    22ae:	03c9      	lsls	r1, r1, #15
    22b0:	f53f af61 	bmi.w	2176 <usb_isr+0x446>
    22b4:	e761      	b.n	217a <usb_isr+0x44a>
    22b6:	bf00      	nop
    22b8:	200086e0 	.word	0x200086e0
    22bc:	20009c28 	.word	0x20009c28
    22c0:	20008940 	.word	0x20008940
    22c4:	00070080 	.word	0x00070080
    22c8:	2000ac28 	.word	0x2000ac28
    22cc:	200086c0 	.word	0x200086c0
    22d0:	20008cb8 	.word	0x20008cb8
    22d4:	20008cc8 	.word	0x20008cc8
    22d8:	20008ce6 	.word	0x20008ce6
    22dc:	20008ce7 	.word	0x20008ce7
    22e0:	00cc0002 	.word	0x00cc0002
    22e4:	000200c8 	.word	0x000200c8
    22e8:	00c80002 	.word	0x00c80002
    22ec:	20000080 	.word	0x20000080
    22f0:	74d59319 	.word	0x74d59319
    22f4:	20008c68 	.word	0x20008c68
    22f8:	20008c28 	.word	0x20008c28
    22fc:	20008cc0 	.word	0x20008cc0
    2300:	20008ce2 	.word	0x20008ce2
    2304:	20008ce9 	.word	0x20008ce9
    2308:	20008ce8 	.word	0x20008ce8
    230c:	20200000 	.word	0x20200000
    2310:	60001f1c 	.word	0x60001f1c
    2314:	60001eb8 	.word	0x60001eb8
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    2318:	4629      	mov	r1, r5
    231a:	4d10      	ldr	r5, [pc, #64]	; (235c <usb_isr+0x62c>)
    231c:	9201      	str	r2, [sp, #4]
    231e:	4628      	mov	r0, r5
    2320:	f7ff f99a 	bl	1658 <memcpy>
    2324:	9a01      	ldr	r2, [sp, #4]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    2326:	f025 031f 	bic.w	r3, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
    232a:	4415      	add	r5, r2
	asm("dsb");
    232c:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    2330:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    2334:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    2338:	3320      	adds	r3, #32
	} while (location < end_addr);
    233a:	429d      	cmp	r5, r3
    233c:	d8fa      	bhi.n	2334 <usb_isr+0x604>
	asm("dsb");
    233e:	f3bf 8f4f 	dsb	sy
	asm("isb");
    2342:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    2346:	4805      	ldr	r0, [pc, #20]	; (235c <usb_isr+0x62c>)
    2348:	4611      	mov	r1, r2
    234a:	f7ff fc8f 	bl	1c6c <endpoint0_transmit.constprop.0>
				return;
    234e:	e544      	b.n	1dda <usb_isr+0xaa>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    2350:	2003      	movs	r0, #3
    2352:	f7ff fcd7 	bl	1d04 <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    2356:	f00b fc3f 	bl	dbd8 <___reboot_Teensyduino__veneer>
    235a:	bf00      	nop
    235c:	20200000 	.word	0x20200000

00002360 <usb_config_rx>:
{
    2360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2364:	461f      	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    2366:	1e83      	subs	r3, r0, #2
    2368:	2b02      	cmp	r3, #2
    236a:	d901      	bls.n	2370 <usb_config_rx+0x10>
}
    236c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    2370:	f8df 904c 	ldr.w	r9, [pc, #76]	; 23c0 <usb_config_rx+0x60>
    2374:	4615      	mov	r5, r2
    2376:	460c      	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
    2378:	223c      	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    237a:	eb09 18c0 	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    237e:	4606      	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    2380:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    2384:	2100      	movs	r1, #0
    2386:	f108 0004 	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    238a:	0424      	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
    238c:	f002 ff2e 	bl	51ec <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    2390:	fab5 f285 	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
    2394:	2301      	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    2396:	0952      	lsrs	r2, r2, #5
    2398:	ea44 7442 	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
    239c:	f849 400a 	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    23a0:	f8c8 7038 	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    23a4:	f8c8 3008 	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    23a8:	2f00      	cmp	r7, #0
    23aa:	d0df      	beq.n	236c <usb_config_rx+0xc>
    23ac:	4a03      	ldr	r2, [pc, #12]	; (23bc <usb_config_rx+0x5c>)
    23ae:	40b3      	lsls	r3, r6
    23b0:	6811      	ldr	r1, [r2, #0]
    23b2:	430b      	orrs	r3, r1
    23b4:	6013      	str	r3, [r2, #0]
}
    23b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    23ba:	bf00      	nop
    23bc:	20008c34 	.word	0x20008c34
    23c0:	20000000 	.word	0x20000000

000023c4 <usb_config_tx>:
{
    23c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    23c8:	460d      	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    23ca:	1e81      	subs	r1, r0, #2
    23cc:	2902      	cmp	r1, #2
    23ce:	d901      	bls.n	23d4 <usb_config_tx+0x10>
}
    23d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    23d4:	01c7      	lsls	r7, r0, #7
    23d6:	f8df 904c 	ldr.w	r9, [pc, #76]	; 2424 <usb_config_tx+0x60>
    23da:	4692      	mov	sl, r2
    23dc:	4604      	mov	r4, r0
    23de:	3740      	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    23e0:	223c      	movs	r2, #60	; 0x3c
    23e2:	2100      	movs	r1, #0
    23e4:	461e      	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    23e6:	eb09 0807 	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    23ea:	042d      	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
    23ec:	f108 0004 	add.w	r0, r8, #4
    23f0:	f002 fefc 	bl	51ec <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    23f4:	faba f28a 	clz	r2, sl
    23f8:	0952      	lsrs	r2, r2, #5
    23fa:	ea45 7242 	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
    23fe:	f849 2007 	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
    2402:	2201      	movs	r2, #1
	qh->callback_function = callback;
    2404:	f8c8 6038 	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    2408:	f8c8 2008 	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    240c:	2e00      	cmp	r6, #0
    240e:	d0df      	beq.n	23d0 <usb_config_tx+0xc>
    2410:	4b03      	ldr	r3, [pc, #12]	; (2420 <usb_config_tx+0x5c>)
    2412:	3410      	adds	r4, #16
    2414:	6819      	ldr	r1, [r3, #0]
    2416:	40a2      	lsls	r2, r4
    2418:	430a      	orrs	r2, r1
    241a:	601a      	str	r2, [r3, #0]
}
    241c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2420:	20008c34 	.word	0x20008c34
    2424:	20000000 	.word	0x20000000

00002428 <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    2428:	0412      	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    242a:	6081      	str	r1, [r0, #8]
	transfer->callback_param = param;
    242c:	61c3      	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
    242e:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
    2432:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
    2436:	b410      	push	{r4}
	transfer->next = 1;
    2438:	2401      	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
    243a:	6042      	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
    243c:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
    2440:	6004      	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
    2442:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
    2446:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
    244a:	60c4      	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
    244c:	6181      	str	r1, [r0, #24]
}
    244e:	f85d 4b04 	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
    2452:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
    2456:	4770      	bx	lr

00002458 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    2458:	1e83      	subs	r3, r0, #2
{
    245a:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    245c:	2b02      	cmp	r3, #2
    245e:	d900      	bls.n	2462 <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    2460:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    2462:	4b06      	ldr	r3, [pc, #24]	; (247c <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
    2464:	f100 0110 	add.w	r1, r0, #16
    2468:	f04f 0c01 	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    246c:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    2470:	fa0c f101 	lsl.w	r1, ip, r1
    2474:	3040      	adds	r0, #64	; 0x40
    2476:	f7ff bb99 	b.w	1bac <schedule_transfer>
    247a:	bf00      	nop
    247c:	20000000 	.word	0x20000000

00002480 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    2480:	1e83      	subs	r3, r0, #2
{
    2482:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    2484:	2b02      	cmp	r3, #2
    2486:	d900      	bls.n	248a <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    2488:	4770      	bx	lr
	uint32_t mask = 1 << endpoint_number;
    248a:	2101      	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    248c:	4b02      	ldr	r3, [pc, #8]	; (2498 <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
    248e:	4081      	lsls	r1, r0
    2490:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    2494:	f7ff bb8a 	b.w	1bac <schedule_transfer>
    2498:	20000000 	.word	0x20000000

0000249c <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    249c:	6840      	ldr	r0, [r0, #4]
#endif
}
    249e:	4770      	bx	lr

000024a0 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    24a0:	4a12      	ldr	r2, [pc, #72]	; (24ec <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    24a2:	4b13      	ldr	r3, [pc, #76]	; (24f0 <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    24a4:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    24a8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    24ac:	4298      	cmp	r0, r3
{
    24ae:	b510      	push	{r4, lr}
    24b0:	b084      	sub	sp, #16
	if (num < 10000000) num = num * 10;
    24b2:	d202      	bcs.n	24ba <usb_init_serialnumber+0x1a>
    24b4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    24b8:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    24ba:	4c0e      	ldr	r4, [pc, #56]	; (24f4 <usb_init_serialnumber+0x54>)
    24bc:	a901      	add	r1, sp, #4
    24be:	220a      	movs	r2, #10
    24c0:	f7ff f964 	bl	178c <ultoa>
	for (i=0; i<10; i++) {
    24c4:	a901      	add	r1, sp, #4
    24c6:	2300      	movs	r3, #0
    24c8:	4620      	mov	r0, r4
		char c = buf[i];
    24ca:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    24ce:	3301      	adds	r3, #1
		if (!c) break;
    24d0:	b13a      	cbz	r2, 24e2 <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
    24d2:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    24d4:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    24d8:	d1f7      	bne.n	24ca <usb_init_serialnumber+0x2a>
    24da:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    24dc:	7023      	strb	r3, [r4, #0]
}
    24de:	b004      	add	sp, #16
    24e0:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    24e2:	005b      	lsls	r3, r3, #1
    24e4:	b2db      	uxtb	r3, r3
    24e6:	7023      	strb	r3, [r4, #0]
}
    24e8:	b004      	add	sp, #16
    24ea:	bd10      	pop	{r4, pc}
    24ec:	401f4400 	.word	0x401f4400
    24f0:	00989680 	.word	0x00989680
    24f4:	20008014 	.word	0x20008014

000024f8 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    24f8:	f000 bad8 	b.w	2aac <usb_serial_flush_input>

000024fc <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    24fc:	f000 baa8 	b.w	2a50 <usb_serial_peekchar>

00002500 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    2500:	f000 bb66 	b.w	2bd0 <usb_serial_flush_output>

00002504 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    2504:	f000 bb3c 	b.w	2b80 <usb_serial_write_buffer_free>

00002508 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    2508:	4608      	mov	r0, r1
    250a:	4611      	mov	r1, r2
    250c:	f000 bb2c 	b.w	2b68 <usb_serial_write>

00002510 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    2510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    2512:	4c14      	ldr	r4, [pc, #80]	; (2564 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    2514:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    2518:	4e13      	ldr	r6, [pc, #76]	; (2568 <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    251a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    251e:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    2522:	4f12      	ldr	r7, [pc, #72]	; (256c <rx_queue_transfer+0x5c>)
    2524:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
    2528:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    252a:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    252e:	4621      	mov	r1, r4
    2530:	883a      	ldrh	r2, [r7, #0]
    2532:	4630      	mov	r0, r6
    2534:	f7ff ff78 	bl	2428 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    2538:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    253a:	4423      	add	r3, r4
	asm("dsb");
    253c:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    2540:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    2544:	3420      	adds	r4, #32
	} while (location < end_addr);
    2546:	42a3      	cmp	r3, r4
    2548:	d8fa      	bhi.n	2540 <rx_queue_transfer+0x30>
	asm("dsb");
    254a:	f3bf 8f4f 	dsb	sy
	asm("isb");
    254e:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    2552:	2003      	movs	r0, #3
    2554:	4631      	mov	r1, r6
    2556:	f7ff ff93 	bl	2480 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    255a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    255e:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
    2562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2564:	20200080 	.word	0x20200080
    2568:	20008700 	.word	0x20008700
    256c:	20008cd4 	.word	0x20008cd4

00002570 <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    2570:	4b24      	ldr	r3, [pc, #144]	; (2604 <rx_event+0x94>)
{
    2572:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    2576:	881c      	ldrh	r4, [r3, #0]
    2578:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
    257a:	69c5      	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    257c:	f3c3 430e 	ubfx	r3, r3, #16, #15
    2580:	1ae4      	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    2582:	2c00      	cmp	r4, #0
    2584:	dd24      	ble.n	25d0 <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
    2586:	4920      	ldr	r1, [pc, #128]	; (2608 <rx_event+0x98>)
		if (head != rx_tail) {
    2588:	4820      	ldr	r0, [pc, #128]	; (260c <rx_event+0x9c>)
		uint32_t head = rx_head;
    258a:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    258c:	7800      	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    258e:	b2d3      	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
    2590:	4e1f      	ldr	r6, [pc, #124]	; (2610 <rx_event+0xa0>)
		if (head != rx_tail) {
    2592:	4282      	cmp	r2, r0
			uint32_t ii = rx_list[head];
    2594:	481f      	ldr	r0, [pc, #124]	; (2614 <rx_event+0xa4>)
		if (head != rx_tail) {
    2596:	d007      	beq.n	25a8 <rx_event+0x38>
			uint32_t ii = rx_list[head];
    2598:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    259c:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    25a0:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    25a4:	4294      	cmp	r4, r2
    25a6:	d918      	bls.n	25da <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    25a8:	3301      	adds	r3, #1
		rx_index[i] = 0;
    25aa:	2200      	movs	r2, #0
		rx_count[i] = len;
    25ac:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    25b0:	2b08      	cmp	r3, #8
		rx_index[i] = 0;
    25b2:	4e19      	ldr	r6, [pc, #100]	; (2618 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    25b4:	bf88      	it	hi
    25b6:	4613      	movhi	r3, r2
		rx_index[i] = 0;
    25b8:	f826 2015 	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
    25bc:	bf98      	it	ls
    25be:	b2da      	uxtbls	r2, r3
		rx_list[head] = i;
    25c0:	54c5      	strb	r5, [r0, r3]
		rx_available += len;
    25c2:	4b16      	ldr	r3, [pc, #88]	; (261c <rx_event+0xac>)
		rx_head = head;
    25c4:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    25c6:	681a      	ldr	r2, [r3, #0]
    25c8:	4414      	add	r4, r2
    25ca:	601c      	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    25cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
    25d0:	4628      	mov	r0, r5
}
    25d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
    25d6:	f7ff bf9b 	b.w	2510 <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    25da:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    25de:	4910      	ldr	r1, [pc, #64]	; (2620 <rx_event+0xb0>)
    25e0:	4622      	mov	r2, r4
				rx_count[ii] = count + len;
    25e2:	4427      	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    25e4:	4408      	add	r0, r1
    25e6:	eb01 2145 	add.w	r1, r1, r5, lsl #9
    25ea:	f7ff f835 	bl	1658 <memcpy>
				rx_available += len;
    25ee:	4a0b      	ldr	r2, [pc, #44]	; (261c <rx_event+0xac>)
				rx_queue_transfer(i);
    25f0:	4628      	mov	r0, r5
				rx_count[ii] = count + len;
    25f2:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    25f6:	6813      	ldr	r3, [r2, #0]
    25f8:	4423      	add	r3, r4
}
    25fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
    25fe:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
    2600:	f7ff bf86 	b.w	2510 <rx_queue_transfer>
    2604:	20008cd4 	.word	0x20008cd4
    2608:	20008ce0 	.word	0x20008ce0
    260c:	20008ce1 	.word	0x20008ce1
    2610:	20008c74 	.word	0x20008c74
    2614:	20008c94 	.word	0x20008c94
    2618:	20008c84 	.word	0x20008c84
    261c:	20008c70 	.word	0x20008c70
    2620:	20200080 	.word	0x20200080

00002624 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    2624:	4b1d      	ldr	r3, [pc, #116]	; (269c <usb_serial_flush_callback+0x78>)
    2626:	781a      	ldrb	r2, [r3, #0]
    2628:	2a00      	cmp	r2, #0
    262a:	d136      	bne.n	269a <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
    262c:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    2630:	4a1b      	ldr	r2, [pc, #108]	; (26a0 <usb_serial_flush_callback+0x7c>)
    2632:	7812      	ldrb	r2, [r2, #0]
    2634:	b38a      	cbz	r2, 269a <usb_serial_flush_callback+0x76>
{
    2636:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
    263a:	4d1a      	ldr	r5, [pc, #104]	; (26a4 <usb_serial_flush_callback+0x80>)
    263c:	882a      	ldrh	r2, [r5, #0]
    263e:	b352      	cbz	r2, 2696 <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    2640:	4e19      	ldr	r6, [pc, #100]	; (26a8 <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    2642:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    2646:	4f19      	ldr	r7, [pc, #100]	; (26ac <usb_serial_flush_callback+0x88>)
    2648:	7832      	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    264a:	4c19      	ldr	r4, [pc, #100]	; (26b0 <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    264c:	eb07 1742 	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    2650:	eb04 24c2 	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    2654:	4642      	mov	r2, r8
    2656:	4638      	mov	r0, r7
    2658:	4621      	mov	r1, r4
    265a:	f7ff fee5 	bl	2428 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    265e:	eb04 0208 	add.w	r2, r4, r8
	asm("dsb");
    2662:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    2666:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    266a:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    266e:	3420      	adds	r4, #32
	} while (location < end_addr);
    2670:	42a2      	cmp	r2, r4
    2672:	d8fa      	bhi.n	266a <usb_serial_flush_callback+0x46>
	asm("dsb");
    2674:	f3bf 8f4f 	dsb	sy
	asm("isb");
    2678:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    267c:	2004      	movs	r0, #4
    267e:	4639      	mov	r1, r7
    2680:	f7ff feea 	bl	2458 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    2684:	7833      	ldrb	r3, [r6, #0]
    2686:	3301      	adds	r3, #1
    2688:	b2db      	uxtb	r3, r3
    268a:	2b03      	cmp	r3, #3
    268c:	bf88      	it	hi
    268e:	2300      	movhi	r3, #0
    2690:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    2692:	2300      	movs	r3, #0
    2694:	802b      	strh	r3, [r5, #0]
}
    2696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    269a:	4770      	bx	lr
    269c:	20008ce5 	.word	0x20008ce5
    26a0:	20008ce7 	.word	0x20008ce7
    26a4:	20008cd6 	.word	0x20008cd6
    26a8:	20008ce4 	.word	0x20008ce4
    26ac:	20008800 	.word	0x20008800
    26b0:	20201080 	.word	0x20201080

000026b4 <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
    26b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    26b8:	b085      	sub	sp, #20
	while (size > 0) {
    26ba:	e9cd 1001 	strd	r1, r0, [sp, #4]
    26be:	2900      	cmp	r1, #0
    26c0:	f000 80bf 	beq.w	2842 <usb_serial_write.part.0+0x18e>
	uint32_t sent=0;
    26c4:	2300      	movs	r3, #0
    26c6:	4c60      	ldr	r4, [pc, #384]	; (2848 <usb_serial_write.part.0+0x194>)
    26c8:	f8df 8198 	ldr.w	r8, [pc, #408]	; 2864 <usb_serial_write.part.0+0x1b0>
    26cc:	f8df a198 	ldr.w	sl, [pc, #408]	; 2868 <usb_serial_write.part.0+0x1b4>
				wait_begin_at = systick_millis_count;
    26d0:	4f5e      	ldr	r7, [pc, #376]	; (284c <usb_serial_write.part.0+0x198>)
	uint32_t sent=0;
    26d2:	9300      	str	r3, [sp, #0]
		tx_noautoflush = 1;
    26d4:	2301      	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    26d6:	4a5e      	ldr	r2, [pc, #376]	; (2850 <usb_serial_write.part.0+0x19c>)
		tx_noautoflush = 1;
    26d8:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    26da:	4b5e      	ldr	r3, [pc, #376]	; (2854 <usb_serial_write.part.0+0x1a0>)
    26dc:	7819      	ldrb	r1, [r3, #0]
		while (!tx_available) {
    26de:	f8b8 3000 	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
    26e2:	eb02 1941 	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
    26e6:	2b00      	cmp	r3, #0
    26e8:	f040 80a7 	bne.w	283a <usb_serial_write.part.0+0x186>
		uint32_t wait_begin_at=0;
    26ec:	461e      	mov	r6, r3
		int waiting=0;
    26ee:	461d      	mov	r5, r3
			tx_noautoflush = 0;
    26f0:	469b      	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
    26f2:	4648      	mov	r0, r9
    26f4:	f7ff fed2 	bl	249c <usb_transfer_status>
			if (!(status & 0x80)) {
    26f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    26fc:	f000 808c 	beq.w	2818 <usb_serial_write.part.0+0x164>
			asm("dsb" ::: "memory");
    2700:	f3bf 8f4f 	dsb	sy
			if (transmit_previous_timeout) return sent;
    2704:	f89a 3000 	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
    2708:	f884 b000 	strb.w	fp, [r4]
			if (!waiting) {
    270c:	b905      	cbnz	r5, 2710 <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
    270e:	683e      	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
    2710:	2b00      	cmp	r3, #0
    2712:	d17d      	bne.n	2810 <usb_serial_write.part.0+0x15c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    2714:	683b      	ldr	r3, [r7, #0]
    2716:	1b9b      	subs	r3, r3, r6
    2718:	2b78      	cmp	r3, #120	; 0x78
    271a:	f200 8087 	bhi.w	282c <usb_serial_write.part.0+0x178>
			if (!usb_configuration) return sent;
    271e:	4b4e      	ldr	r3, [pc, #312]	; (2858 <usb_serial_write.part.0+0x1a4>)
    2720:	781b      	ldrb	r3, [r3, #0]
    2722:	2b00      	cmp	r3, #0
    2724:	d074      	beq.n	2810 <usb_serial_write.part.0+0x15c>
			yield();
    2726:	f000 fa9d 	bl	2c64 <yield>
			tx_noautoflush = 1;
    272a:	2201      	movs	r2, #1
		while (!tx_available) {
    272c:	f8b8 3000 	ldrh.w	r3, [r8]
    2730:	4615      	mov	r5, r2
			tx_noautoflush = 1;
    2732:	7022      	strb	r2, [r4, #0]
		while (!tx_available) {
    2734:	2b00      	cmp	r3, #0
    2736:	d0dc      	beq.n	26f2 <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    2738:	4a46      	ldr	r2, [pc, #280]	; (2854 <usb_serial_write.part.0+0x1a0>)
    273a:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    273e:	7811      	ldrb	r1, [r2, #0]
    2740:	461a      	mov	r2, r3
    2742:	eb00 20c1 	add.w	r0, r0, r1, lsl #11
    2746:	4d45      	ldr	r5, [pc, #276]	; (285c <usb_serial_write.part.0+0x1a8>)
    2748:	02c9      	lsls	r1, r1, #11
    274a:	4428      	add	r0, r5
		if (size >= tx_available) {
    274c:	9d01      	ldr	r5, [sp, #4]
    274e:	4295      	cmp	r5, r2
    2750:	d217      	bcs.n	2782 <usb_serial_write.part.0+0xce>
			memcpy(txdata, data, size);
    2752:	9303      	str	r3, [sp, #12]
    2754:	e9dd 5101 	ldrd	r5, r1, [sp, #4]
    2758:	462a      	mov	r2, r5
    275a:	f7fe ff7d 	bl	1658 <memcpy>
			tx_available -= size;
    275e:	9b03      	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    2760:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
    2764:	1b5b      	subs	r3, r3, r5
    2766:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    276a:	4b3d      	ldr	r3, [pc, #244]	; (2860 <usb_serial_write.part.0+0x1ac>)
    276c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
    2770:	f3bf 8f4f 	dsb	sy
			sent += size;
    2774:	9800      	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
    2776:	2300      	movs	r3, #0
			sent += size;
    2778:	4428      	add	r0, r5
		tx_noautoflush = 0;
    277a:	7023      	strb	r3, [r4, #0]
}
    277c:	b005      	add	sp, #20
    277e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    2782:	4b36      	ldr	r3, [pc, #216]	; (285c <usb_serial_write.part.0+0x1a8>)
    2784:	18cd      	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
    2786:	9902      	ldr	r1, [sp, #8]
    2788:	f7fe ff66 	bl	1658 <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    278c:	2300      	movs	r3, #0
    278e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    2792:	4629      	mov	r1, r5
    2794:	4648      	mov	r0, r9
    2796:	f7ff fe47 	bl	2428 <usb_prepare_transfer>
	asm("dsb");
    279a:	f3bf 8f4f 	dsb	sy
    279e:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    27a2:	f505 6300 	add.w	r3, r5, #2048	; 0x800
    27a6:	4293      	cmp	r3, r2
    27a8:	bf34      	ite	cc
    27aa:	2301      	movcc	r3, #1
    27ac:	2340      	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    27ae:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    27b2:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    27b6:	f8c2 5f70 	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
    27ba:	3520      	adds	r5, #32
	} while (location < end_addr);
    27bc:	42ab      	cmp	r3, r5
    27be:	d1fa      	bne.n	27b6 <usb_serial_write.part.0+0x102>
	asm("dsb");
    27c0:	f3bf 8f4f 	dsb	sy
	asm("isb");
    27c4:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    27c8:	2004      	movs	r0, #4
    27ca:	4649      	mov	r1, r9
    27cc:	f7ff fe44 	bl	2458 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    27d0:	4a20      	ldr	r2, [pc, #128]	; (2854 <usb_serial_write.part.0+0x1a0>)
    27d2:	7813      	ldrb	r3, [r2, #0]
    27d4:	3301      	adds	r3, #1
    27d6:	b2db      	uxtb	r3, r3
    27d8:	2b03      	cmp	r3, #3
    27da:	bf84      	itt	hi
    27dc:	2300      	movhi	r3, #0
    27de:	4a1d      	ldrhi	r2, [pc, #116]	; (2854 <usb_serial_write.part.0+0x1a0>)
    27e0:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    27e2:	f8b8 3000 	ldrh.w	r3, [r8]
    27e6:	9a01      	ldr	r2, [sp, #4]
    27e8:	1ad1      	subs	r1, r2, r3
			sent += tx_available;
    27ea:	9a00      	ldr	r2, [sp, #0]
    27ec:	441a      	add	r2, r3
			size -= tx_available;
    27ee:	9101      	str	r1, [sp, #4]
			sent += tx_available;
    27f0:	9200      	str	r2, [sp, #0]
			data += tx_available;
    27f2:	9a02      	ldr	r2, [sp, #8]
    27f4:	441a      	add	r2, r3
			tx_available = 0;
    27f6:	2300      	movs	r3, #0
			data += tx_available;
    27f8:	9202      	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
    27fa:	4a19      	ldr	r2, [pc, #100]	; (2860 <usb_serial_write.part.0+0x1ac>)
			tx_available = 0;
    27fc:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
    2800:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    2804:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
    2808:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
    280a:	2900      	cmp	r1, #0
    280c:	f47f af62 	bne.w	26d4 <usb_serial_write.part.0+0x20>
	return sent;
    2810:	9800      	ldr	r0, [sp, #0]
}
    2812:	b005      	add	sp, #20
    2814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
    2818:	f44f 6200 	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    281c:	4b0d      	ldr	r3, [pc, #52]	; (2854 <usb_serial_write.part.0+0x1a0>)
				transmit_previous_timeout = 0;
    281e:	f88a 0000 	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    2822:	7819      	ldrb	r1, [r3, #0]
				break;
    2824:	4613      	mov	r3, r2
				tx_available = TX_SIZE;
    2826:	f8a8 2000 	strh.w	r2, [r8]
				break;
    282a:	e78a      	b.n	2742 <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
    282c:	2301      	movs	r3, #1
				return sent;
    282e:	9800      	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
    2830:	f88a 3000 	strb.w	r3, [sl]
}
    2834:	b005      	add	sp, #20
    2836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    283a:	461a      	mov	r2, r3
    283c:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    2840:	e77f      	b.n	2742 <usb_serial_write.part.0+0x8e>
	while (size > 0) {
    2842:	9801      	ldr	r0, [sp, #4]
	return sent;
    2844:	e7e5      	b.n	2812 <usb_serial_write.part.0+0x15e>
    2846:	bf00      	nop
    2848:	20008ce5 	.word	0x20008ce5
    284c:	20008cb8 	.word	0x20008cb8
    2850:	20008800 	.word	0x20008800
    2854:	20008ce4 	.word	0x20008ce4
    2858:	20008ce7 	.word	0x20008ce7
    285c:	20201080 	.word	0x20201080
    2860:	402e0000 	.word	0x402e0000
    2864:	20008cd6 	.word	0x20008cd6
    2868:	20008ce3 	.word	0x20008ce3

0000286c <usb_serial_reset>:
}
    286c:	4770      	bx	lr
    286e:	bf00      	nop

00002870 <usb_serial_configure>:
	if (usb_high_speed) {
    2870:	4b2d      	ldr	r3, [pc, #180]	; (2928 <usb_serial_configure+0xb8>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    2872:	2100      	movs	r1, #0
    2874:	2280      	movs	r2, #128	; 0x80
    2876:	482d      	ldr	r0, [pc, #180]	; (292c <usb_serial_configure+0xbc>)
{
    2878:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    287a:	781b      	ldrb	r3, [r3, #0]
	tx_head = 0;
    287c:	2400      	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    287e:	4d2c      	ldr	r5, [pc, #176]	; (2930 <usb_serial_configure+0xc0>)
	if (usb_high_speed) {
    2880:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
    2882:	4e2c      	ldr	r6, [pc, #176]	; (2934 <usb_serial_configure+0xc4>)
	if (usb_high_speed) {
    2884:	bf0c      	ite	eq
    2886:	2340      	moveq	r3, #64	; 0x40
    2888:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    288c:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    288e:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    2890:	f002 fcac 	bl	51ec <memset>
	tx_head = 0;
    2894:	4a28      	ldr	r2, [pc, #160]	; (2938 <usb_serial_configure+0xc8>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    2896:	4621      	mov	r1, r4
	tx_available = 0;
    2898:	4b28      	ldr	r3, [pc, #160]	; (293c <usb_serial_configure+0xcc>)
	tx_head = 0;
    289a:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    289c:	f44f 7280 	mov.w	r2, #256	; 0x100
    28a0:	4827      	ldr	r0, [pc, #156]	; (2940 <usb_serial_configure+0xd0>)
	tx_available = 0;
    28a2:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    28a4:	f002 fca2 	bl	51ec <memset>
	memset(rx_count, 0, sizeof(rx_count));
    28a8:	4a26      	ldr	r2, [pc, #152]	; (2944 <usb_serial_configure+0xd4>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    28aa:	2110      	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
    28ac:	4b26      	ldr	r3, [pc, #152]	; (2948 <usb_serial_configure+0xd8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    28ae:	2002      	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
    28b0:	e9c2 4400 	strd	r4, r4, [r2]
    28b4:	e9c2 4402 	strd	r4, r4, [r2, #8]
	rx_head = 0;
    28b8:	4a24      	ldr	r2, [pc, #144]	; (294c <usb_serial_configure+0xdc>)
	memset(rx_index, 0, sizeof(rx_index));
    28ba:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
    28be:	7014      	strb	r4, [r2, #0]
	rx_available = 0;
    28c0:	4a23      	ldr	r2, [pc, #140]	; (2950 <usb_serial_configure+0xe0>)
	memset(rx_index, 0, sizeof(rx_index));
    28c2:	e9c3 4402 	strd	r4, r4, [r3, #8]
	rx_tail = 0;
    28c6:	4b23      	ldr	r3, [pc, #140]	; (2954 <usb_serial_configure+0xe4>)
    28c8:	701c      	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    28ca:	4623      	mov	r3, r4
	rx_available = 0;
    28cc:	6014      	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    28ce:	4622      	mov	r2, r4
    28d0:	f7ff fd78 	bl	23c4 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    28d4:	4622      	mov	r2, r4
    28d6:	8831      	ldrh	r1, [r6, #0]
    28d8:	2003      	movs	r0, #3
    28da:	4b1f      	ldr	r3, [pc, #124]	; (2958 <usb_serial_configure+0xe8>)
    28dc:	f7ff fd40 	bl	2360 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    28e0:	4623      	mov	r3, r4
    28e2:	2201      	movs	r2, #1
    28e4:	8829      	ldrh	r1, [r5, #0]
    28e6:	2004      	movs	r0, #4
    28e8:	f7ff fd6c 	bl	23c4 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    28ec:	4620      	mov	r0, r4
    28ee:	3401      	adds	r4, #1
    28f0:	f7ff fe0e 	bl	2510 <rx_queue_transfer>
    28f4:	2c08      	cmp	r4, #8
    28f6:	d1f9      	bne.n	28ec <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
    28f8:	4b18      	ldr	r3, [pc, #96]	; (295c <usb_serial_configure+0xec>)
    28fa:	2100      	movs	r1, #0
	USB1_GPTIMER0LD = microseconds - 1;
    28fc:	224a      	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
    28fe:	4818      	ldr	r0, [pc, #96]	; (2960 <usb_serial_configure+0xf0>)
    2900:	4c18      	ldr	r4, [pc, #96]	; (2964 <usb_serial_configure+0xf4>)
    2902:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    2904:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    2908:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    290c:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    2910:	4915      	ldr	r1, [pc, #84]	; (2968 <usb_serial_configure+0xf8>)
	USB1_USBINTR |= USB_USBINTR_TIE0;
    2912:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    2916:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    291a:	b121      	cbz	r1, 2926 <usb_serial_configure+0xb6>
    291c:	4a13      	ldr	r2, [pc, #76]	; (296c <usb_serial_configure+0xfc>)
    291e:	7813      	ldrb	r3, [r2, #0]
    2920:	f043 0301 	orr.w	r3, r3, #1
    2924:	7013      	strb	r3, [r2, #0]
}
    2926:	bd70      	pop	{r4, r5, r6, pc}
    2928:	20008ce8 	.word	0x20008ce8
    292c:	20008800 	.word	0x20008800
    2930:	20008cd8 	.word	0x20008cd8
    2934:	20008cd4 	.word	0x20008cd4
    2938:	20008ce4 	.word	0x20008ce4
    293c:	20008cd6 	.word	0x20008cd6
    2940:	20008700 	.word	0x20008700
    2944:	20008c74 	.word	0x20008c74
    2948:	20008c84 	.word	0x20008c84
    294c:	20008ce0 	.word	0x20008ce0
    2950:	20008c70 	.word	0x20008c70
    2954:	20008ce1 	.word	0x20008ce1
    2958:	00002571 	.word	0x00002571
    295c:	402e0000 	.word	0x402e0000
    2960:	20008ccc 	.word	0x20008ccc
    2964:	00002625 	.word	0x00002625
    2968:	00000000 	.word	0x00000000
    296c:	20008cea 	.word	0x20008cea

00002970 <usb_serial_read>:
{
    2970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    2974:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    2978:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	uint32_t tail = rx_tail;
    297c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 2a48 <usb_serial_read+0xd8>
{
    2980:	b083      	sub	sp, #12
	NVIC_DISABLE_IRQ(IRQ_USB1);
    2982:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	while (count < size && tail != rx_head) {
    2986:	468b      	mov	fp, r1
	uint32_t tail = rx_tail;
    2988:	f89a 4000 	ldrb.w	r4, [sl]
	while (count < size && tail != rx_head) {
    298c:	2900      	cmp	r1, #0
    298e:	d04f      	beq.n	2a30 <usb_serial_read+0xc0>
    2990:	4680      	mov	r8, r0
    2992:	b2e4      	uxtb	r4, r4
	uint32_t count=0;
    2994:	2700      	movs	r7, #0
		uint32_t avail = rx_count[i] - rx_index[i];
    2996:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 2a4c <usb_serial_read+0xdc>
	while (count < size && tail != rx_head) {
    299a:	4b26      	ldr	r3, [pc, #152]	; (2a34 <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    299c:	ebab 0207 	sub.w	r2, fp, r7
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    29a0:	4925      	ldr	r1, [pc, #148]	; (2a38 <usb_serial_read+0xc8>)
	while (count < size && tail != rx_head) {
    29a2:	781b      	ldrb	r3, [r3, #0]
    29a4:	42a3      	cmp	r3, r4
		if (++tail > RX_NUM) tail = 0;
    29a6:	f104 0401 	add.w	r4, r4, #1
	while (count < size && tail != rx_head) {
    29aa:	d03f      	beq.n	2a2c <usb_serial_read+0xbc>
		if (++tail > RX_NUM) tail = 0;
    29ac:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
    29ae:	4b23      	ldr	r3, [pc, #140]	; (2a3c <usb_serial_read+0xcc>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    29b0:	4640      	mov	r0, r8
		if (++tail > RX_NUM) tail = 0;
    29b2:	bf28      	it	cs
    29b4:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    29b6:	5d1e      	ldrb	r6, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    29b8:	f839 c016 	ldrh.w	ip, [r9, r6, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    29bc:	eb0c 2346 	add.w	r3, ip, r6, lsl #9
    29c0:	4419      	add	r1, r3
		uint32_t avail = rx_count[i] - rx_index[i];
    29c2:	4b1f      	ldr	r3, [pc, #124]	; (2a40 <usb_serial_read+0xd0>)
    29c4:	f833 5016 	ldrh.w	r5, [r3, r6, lsl #1]
    29c8:	eba5 050c 	sub.w	r5, r5, ip
		if (avail > len) {
    29cc:	42aa      	cmp	r2, r5
    29ce:	d21c      	bcs.n	2a0a <usb_serial_read+0x9a>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    29d0:	eb0c 2c46 	add.w	ip, ip, r6, lsl #9
    29d4:	4918      	ldr	r1, [pc, #96]	; (2a38 <usb_serial_read+0xc8>)
			rx_available -= len;
    29d6:	4c1b      	ldr	r4, [pc, #108]	; (2a44 <usb_serial_read+0xd4>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    29d8:	4461      	add	r1, ip
    29da:	9201      	str	r2, [sp, #4]
    29dc:	f7fe fe3c 	bl	1658 <memcpy>
			rx_available -= len;
    29e0:	6821      	ldr	r1, [r4, #0]
			rx_index[i] += len;
    29e2:	f839 5016 	ldrh.w	r5, [r9, r6, lsl #1]
	return count;
    29e6:	4658      	mov	r0, fp
			rx_index[i] += len;
    29e8:	9a01      	ldr	r2, [sp, #4]
			rx_available -= len;
    29ea:	eba1 010b 	sub.w	r1, r1, fp
			rx_index[i] += len;
    29ee:	442a      	add	r2, r5
			rx_available -= len;
    29f0:	4439      	add	r1, r7
			rx_index[i] += len;
    29f2:	f829 2016 	strh.w	r2, [r9, r6, lsl #1]
			rx_available -= len;
    29f6:	6021      	str	r1, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
    29f8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    29fc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    2a00:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
    2a04:	b003      	add	sp, #12
    2a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    2a0a:	462a      	mov	r2, r5
			count += avail;
    2a0c:	442f      	add	r7, r5
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    2a0e:	f7fe fe23 	bl	1658 <memcpy>
			rx_available -= avail;
    2a12:	490c      	ldr	r1, [pc, #48]	; (2a44 <usb_serial_read+0xd4>)
			rx_tail = tail;
    2a14:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    2a16:	4630      	mov	r0, r6
			rx_available -= avail;
    2a18:	680a      	ldr	r2, [r1, #0]
			p += avail;
    2a1a:	44a8      	add	r8, r5
			rx_available -= avail;
    2a1c:	1b52      	subs	r2, r2, r5
    2a1e:	600a      	str	r2, [r1, #0]
			rx_tail = tail;
    2a20:	f88a 3000 	strb.w	r3, [sl]
			rx_queue_transfer(i);
    2a24:	f7ff fd74 	bl	2510 <rx_queue_transfer>
	while (count < size && tail != rx_head) {
    2a28:	45bb      	cmp	fp, r7
    2a2a:	d8b6      	bhi.n	299a <usb_serial_read+0x2a>
	return count;
    2a2c:	4638      	mov	r0, r7
    2a2e:	e7e3      	b.n	29f8 <usb_serial_read+0x88>
	while (count < size && tail != rx_head) {
    2a30:	4608      	mov	r0, r1
    2a32:	e7e1      	b.n	29f8 <usb_serial_read+0x88>
    2a34:	20008ce0 	.word	0x20008ce0
    2a38:	20200080 	.word	0x20200080
    2a3c:	20008c94 	.word	0x20008c94
    2a40:	20008c74 	.word	0x20008c74
    2a44:	20008c70 	.word	0x20008c70
    2a48:	20008ce1 	.word	0x20008ce1
    2a4c:	20008c84 	.word	0x20008c84

00002a50 <usb_serial_peekchar>:
	if (tail == rx_head) return -1;
    2a50:	4b0b      	ldr	r3, [pc, #44]	; (2a80 <usb_serial_peekchar+0x30>)
	uint32_t tail = rx_tail;
    2a52:	4a0c      	ldr	r2, [pc, #48]	; (2a84 <usb_serial_peekchar+0x34>)
    2a54:	7812      	ldrb	r2, [r2, #0]
	if (tail == rx_head) return -1;
    2a56:	7819      	ldrb	r1, [r3, #0]
	uint32_t tail = rx_tail;
    2a58:	b2d3      	uxtb	r3, r2
	if (tail == rx_head) return -1;
    2a5a:	428a      	cmp	r2, r1
    2a5c:	d00d      	beq.n	2a7a <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    2a5e:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    2a60:	4809      	ldr	r0, [pc, #36]	; (2a88 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    2a62:	4a0a      	ldr	r2, [pc, #40]	; (2a8c <usb_serial_peekchar+0x3c>)
	if (++tail > RX_NUM) tail = 0;
    2a64:	2b09      	cmp	r3, #9
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    2a66:	490a      	ldr	r1, [pc, #40]	; (2a90 <usb_serial_peekchar+0x40>)
	if (++tail > RX_NUM) tail = 0;
    2a68:	bf28      	it	cs
    2a6a:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    2a6c:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    2a6e:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    2a72:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    2a76:	5c58      	ldrb	r0, [r3, r1]
    2a78:	4770      	bx	lr
	if (tail == rx_head) return -1;
    2a7a:	f04f 30ff 	mov.w	r0, #4294967295
}
    2a7e:	4770      	bx	lr
    2a80:	20008ce0 	.word	0x20008ce0
    2a84:	20008ce1 	.word	0x20008ce1
    2a88:	20008c94 	.word	0x20008c94
    2a8c:	20200080 	.word	0x20200080
    2a90:	20008c84 	.word	0x20008c84

00002a94 <usb_serial_available>:
	uint32_t n = rx_available;
    2a94:	4b04      	ldr	r3, [pc, #16]	; (2aa8 <usb_serial_available+0x14>)
{
    2a96:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
    2a98:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
    2a9a:	b10c      	cbz	r4, 2aa0 <usb_serial_available+0xc>
}
    2a9c:	4620      	mov	r0, r4
    2a9e:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
    2aa0:	f000 f8e0 	bl	2c64 <yield>
}
    2aa4:	4620      	mov	r0, r4
    2aa6:	bd10      	pop	{r4, pc}
    2aa8:	20008c70 	.word	0x20008c70

00002aac <usb_serial_flush_input>:
{
    2aac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    2ab0:	4e14      	ldr	r6, [pc, #80]	; (2b04 <usb_serial_flush_input+0x58>)
	while (tail != rx_head) {
    2ab2:	4d15      	ldr	r5, [pc, #84]	; (2b08 <usb_serial_flush_input+0x5c>)
	uint32_t tail = rx_tail;
    2ab4:	7833      	ldrb	r3, [r6, #0]
	while (tail != rx_head) {
    2ab6:	782a      	ldrb	r2, [r5, #0]
    2ab8:	4293      	cmp	r3, r2
    2aba:	d021      	beq.n	2b00 <usb_serial_flush_input+0x54>
    2abc:	b2dc      	uxtb	r4, r3
    2abe:	f8df 9050 	ldr.w	r9, [pc, #80]	; 2b10 <usb_serial_flush_input+0x64>
    2ac2:	f8df b050 	ldr.w	fp, [pc, #80]	; 2b14 <usb_serial_flush_input+0x68>
    2ac6:	f8df 8050 	ldr.w	r8, [pc, #80]	; 2b18 <usb_serial_flush_input+0x6c>
    2aca:	4f10      	ldr	r7, [pc, #64]	; (2b0c <usb_serial_flush_input+0x60>)
		if (++tail > RX_NUM) tail = 0;
    2acc:	3401      	adds	r4, #1
    2ace:	2c08      	cmp	r4, #8
		rx_tail = tail;
    2ad0:	fa5f fa84 	uxtb.w	sl, r4
		if (++tail > RX_NUM) tail = 0;
    2ad4:	d901      	bls.n	2ada <usb_serial_flush_input+0x2e>
    2ad6:	2400      	movs	r4, #0
    2ad8:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    2ada:	f819 0004 	ldrb.w	r0, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    2ade:	f8db 3000 	ldr.w	r3, [fp]
    2ae2:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
    2ae6:	f837 1010 	ldrh.w	r1, [r7, r0, lsl #1]
    2aea:	1a52      	subs	r2, r2, r1
    2aec:	1a9b      	subs	r3, r3, r2
    2aee:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    2af2:	f7ff fd0d 	bl	2510 <rx_queue_transfer>
		rx_tail = tail;
    2af6:	f886 a000 	strb.w	sl, [r6]
	while (tail != rx_head) {
    2afa:	782b      	ldrb	r3, [r5, #0]
    2afc:	42a3      	cmp	r3, r4
    2afe:	d1e5      	bne.n	2acc <usb_serial_flush_input+0x20>
}
    2b00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2b04:	20008ce1 	.word	0x20008ce1
    2b08:	20008ce0 	.word	0x20008ce0
    2b0c:	20008c84 	.word	0x20008c84
    2b10:	20008c94 	.word	0x20008c94
    2b14:	20008c70 	.word	0x20008c70
    2b18:	20008c74 	.word	0x20008c74

00002b1c <usb_serial_getchar>:
{
    2b1c:	b500      	push	{lr}
    2b1e:	b083      	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
    2b20:	2101      	movs	r1, #1
    2b22:	f10d 0007 	add.w	r0, sp, #7
    2b26:	f7ff ff23 	bl	2970 <usb_serial_read>
    2b2a:	b120      	cbz	r0, 2b36 <usb_serial_getchar+0x1a>
    2b2c:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
    2b30:	b003      	add	sp, #12
    2b32:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
    2b36:	f04f 30ff 	mov.w	r0, #4294967295
    2b3a:	e7f9      	b.n	2b30 <usb_serial_getchar+0x14>

00002b3c <usb_serial_putchar>:
	if (!usb_configuration) return 0;
    2b3c:	4b09      	ldr	r3, [pc, #36]	; (2b64 <usb_serial_putchar+0x28>)
{
    2b3e:	b500      	push	{lr}
    2b40:	b083      	sub	sp, #12
	if (!usb_configuration) return 0;
    2b42:	781b      	ldrb	r3, [r3, #0]
{
    2b44:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!usb_configuration) return 0;
    2b48:	b13b      	cbz	r3, 2b5a <usb_serial_putchar+0x1e>
    2b4a:	2101      	movs	r1, #1
    2b4c:	f10d 0007 	add.w	r0, sp, #7
    2b50:	f7ff fdb0 	bl	26b4 <usb_serial_write.part.0>
}
    2b54:	b003      	add	sp, #12
    2b56:	f85d fb04 	ldr.w	pc, [sp], #4
    2b5a:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    2b5e:	b003      	add	sp, #12
    2b60:	f85d fb04 	ldr.w	pc, [sp], #4
    2b64:	20008ce7 	.word	0x20008ce7

00002b68 <usb_serial_write>:
	if (!usb_configuration) return 0;
    2b68:	4b04      	ldr	r3, [pc, #16]	; (2b7c <usb_serial_write+0x14>)
    2b6a:	781b      	ldrb	r3, [r3, #0]
    2b6c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    2b70:	b10b      	cbz	r3, 2b76 <usb_serial_write+0xe>
    2b72:	f7ff bd9f 	b.w	26b4 <usb_serial_write.part.0>
}
    2b76:	4610      	mov	r0, r2
    2b78:	4770      	bx	lr
    2b7a:	bf00      	nop
    2b7c:	20008ce7 	.word	0x20008ce7

00002b80 <usb_serial_write_buffer_free>:
{
    2b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    2b84:	2400      	movs	r4, #0
	tx_noautoflush = 1;
    2b86:	f8df 8044 	ldr.w	r8, [pc, #68]	; 2bcc <usb_serial_write_buffer_free+0x4c>
    2b8a:	2301      	movs	r3, #1
    2b8c:	4d0d      	ldr	r5, [pc, #52]	; (2bc4 <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    2b8e:	4627      	mov	r7, r4
    2b90:	4e0d      	ldr	r6, [pc, #52]	; (2bc8 <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
    2b92:	f888 3000 	strb.w	r3, [r8]
		if (i == tx_head) continue;
    2b96:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    2b98:	4628      	mov	r0, r5
	for (uint32_t i=0; i < TX_NUM; i++) {
    2b9a:	3520      	adds	r5, #32
		if (i == tx_head) continue;
    2b9c:	42a3      	cmp	r3, r4
	for (uint32_t i=0; i < TX_NUM; i++) {
    2b9e:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    2ba2:	d005      	beq.n	2bb0 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    2ba4:	f7ff fc7a 	bl	249c <usb_transfer_status>
    2ba8:	0603      	lsls	r3, r0, #24
    2baa:	bf58      	it	pl
    2bac:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    2bb0:	2c04      	cmp	r4, #4
    2bb2:	d1f0      	bne.n	2b96 <usb_serial_write_buffer_free+0x16>
	asm("dsb" ::: "memory");
    2bb4:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    2bb8:	2300      	movs	r3, #0
}
    2bba:	4638      	mov	r0, r7
	tx_noautoflush = 0;
    2bbc:	f888 3000 	strb.w	r3, [r8]
}
    2bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2bc4:	20008800 	.word	0x20008800
    2bc8:	20008ce4 	.word	0x20008ce4
    2bcc:	20008ce5 	.word	0x20008ce5

00002bd0 <usb_serial_flush_output>:
{
    2bd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    2bd4:	4b1d      	ldr	r3, [pc, #116]	; (2c4c <usb_serial_flush_output+0x7c>)
    2bd6:	781b      	ldrb	r3, [r3, #0]
    2bd8:	b113      	cbz	r3, 2be0 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    2bda:	4d1d      	ldr	r5, [pc, #116]	; (2c50 <usb_serial_flush_output+0x80>)
    2bdc:	882a      	ldrh	r2, [r5, #0]
    2bde:	b90a      	cbnz	r2, 2be4 <usb_serial_flush_output+0x14>
}
    2be0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	transfer_t *xfer = tx_transfer + tx_head;
    2be4:	4e1b      	ldr	r6, [pc, #108]	; (2c54 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    2be6:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    2bea:	491b      	ldr	r1, [pc, #108]	; (2c58 <usb_serial_flush_output+0x88>)
    2bec:	7833      	ldrb	r3, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    2bee:	464a      	mov	r2, r9
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    2bf0:	4c1a      	ldr	r4, [pc, #104]	; (2c5c <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    2bf2:	eb01 1843 	add.w	r8, r1, r3, lsl #5
	tx_noautoflush = 1;
    2bf6:	4f1a      	ldr	r7, [pc, #104]	; (2c60 <usb_serial_flush_output+0x90>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    2bf8:	eb04 24c3 	add.w	r4, r4, r3, lsl #11
	tx_noautoflush = 1;
    2bfc:	2301      	movs	r3, #1
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    2bfe:	4640      	mov	r0, r8
	tx_noautoflush = 1;
    2c00:	703b      	strb	r3, [r7, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    2c02:	4621      	mov	r1, r4
    2c04:	2300      	movs	r3, #0
    2c06:	f7ff fc0f 	bl	2428 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    2c0a:	eb04 0209 	add.w	r2, r4, r9
	asm("dsb");
    2c0e:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    2c12:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    2c16:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    2c1a:	3420      	adds	r4, #32
	} while (location < end_addr);
    2c1c:	42a2      	cmp	r2, r4
    2c1e:	d8fa      	bhi.n	2c16 <usb_serial_flush_output+0x46>
	asm("dsb");
    2c20:	f3bf 8f4f 	dsb	sy
	asm("isb");
    2c24:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    2c28:	2004      	movs	r0, #4
    2c2a:	4641      	mov	r1, r8
    2c2c:	f7ff fc14 	bl	2458 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    2c30:	7833      	ldrb	r3, [r6, #0]
    2c32:	3301      	adds	r3, #1
    2c34:	b2db      	uxtb	r3, r3
    2c36:	2b03      	cmp	r3, #3
    2c38:	bf88      	it	hi
    2c3a:	2300      	movhi	r3, #0
    2c3c:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    2c3e:	2300      	movs	r3, #0
    2c40:	802b      	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
    2c42:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    2c46:	703b      	strb	r3, [r7, #0]
}
    2c48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2c4c:	20008ce7 	.word	0x20008ce7
    2c50:	20008cd6 	.word	0x20008cd6
    2c54:	20008ce4 	.word	0x20008ce4
    2c58:	20008800 	.word	0x20008800
    2c5c:	20201080 	.word	0x20201080
    2c60:	20008ce5 	.word	0x20008ce5

00002c64 <yield>:
uint8_t yield_active_check_flags = 0;


void yield(void) __attribute__ ((weak));
void yield(void)
{
    2c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t check_flags = yield_active_check_flags;
    2c68:	4b2d      	ldr	r3, [pc, #180]	; (2d20 <yield+0xbc>)
    2c6a:	781e      	ldrb	r6, [r3, #0]
	if (!check_flags) return;	// nothing to do
    2c6c:	b166      	cbz	r6, 2c88 <yield+0x24>

	// TODO: do nothing if called from interrupt

	static uint8_t running=0;
	if (running) return; // TODO: does this need to be atomic?
    2c6e:	4f2d      	ldr	r7, [pc, #180]	; (2d24 <yield+0xc0>)
    2c70:	783b      	ldrb	r3, [r7, #0]
    2c72:	b94b      	cbnz	r3, 2c88 <yield+0x24>
	running = 1;
    2c74:	2301      	movs	r3, #1

	// USB Serial - Add hack to minimize impact...
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    2c76:	07f1      	lsls	r1, r6, #31
	running = 1;
    2c78:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    2c7a:	d443      	bmi.n	2d04 <yield+0xa0>
		if (SerialUSB2.available()) serialEventUSB2();
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    2c7c:	07b2      	lsls	r2, r6, #30
    2c7e:	d426      	bmi.n	2cce <yield+0x6a>
		HardwareSerialIMXRT::processSerialEventsList();
	}

	running = 0;
    2c80:	2300      	movs	r3, #0
    2c82:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_EVENT_RESPONDER) {
    2c84:	0773      	lsls	r3, r6, #29
    2c86:	d401      	bmi.n	2c8c <yield+0x28>
		EventResponder::runFromYield();
	}
};
    2c88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    2c8c:	4b26      	ldr	r3, [pc, #152]	; (2d28 <yield+0xc4>)
    2c8e:	681a      	ldr	r2, [r3, #0]
    2c90:	2a00      	cmp	r2, #0
    2c92:	d0f9      	beq.n	2c88 <yield+0x24>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    2c94:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    2c98:	2a00      	cmp	r2, #0
    2c9a:	d1f5      	bne.n	2c88 <yield+0x24>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    2c9c:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    2ca0:	b672      	cpsid	i
		EventResponder *first = firstYield;
    2ca2:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    2ca4:	2800      	cmp	r0, #0
    2ca6:	d034      	beq.n	2d12 <yield+0xae>
		if (runningFromYield) {
    2ca8:	4c20      	ldr	r4, [pc, #128]	; (2d2c <yield+0xc8>)
    2caa:	7821      	ldrb	r1, [r4, #0]
    2cac:	2900      	cmp	r1, #0
    2cae:	d130      	bne.n	2d12 <yield+0xae>
		runningFromYield = true;
    2cb0:	2201      	movs	r2, #1
    2cb2:	7022      	strb	r2, [r4, #0]
		firstYield = first->_next;
    2cb4:	6942      	ldr	r2, [r0, #20]
    2cb6:	601a      	str	r2, [r3, #0]
		if (firstYield) {
    2cb8:	2a00      	cmp	r2, #0
    2cba:	d02e      	beq.n	2d1a <yield+0xb6>
			firstYield->_prev = nullptr;
    2cbc:	6191      	str	r1, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    2cbe:	b905      	cbnz	r5, 2cc2 <yield+0x5e>
    2cc0:	b662      	cpsie	i
		first->_triggered = false;
    2cc2:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    2cc4:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    2cc6:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    2cc8:	4798      	blx	r3
		runningFromYield = false;
    2cca:	7025      	strb	r5, [r4, #0]
    2ccc:	e7dc      	b.n	2c88 <yield+0x24>

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    2cce:	f8df 8064 	ldr.w	r8, [pc, #100]	; 2d34 <yield+0xd0>
    2cd2:	f898 3000 	ldrb.w	r3, [r8]
    2cd6:	2b00      	cmp	r3, #0
    2cd8:	d0d2      	beq.n	2c80 <yield+0x1c>
    2cda:	2500      	movs	r5, #0
    2cdc:	f8df 9058 	ldr.w	r9, [pc, #88]	; 2d38 <yield+0xd4>
    2ce0:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    2ce2:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    2ce6:	3501      	adds	r5, #1
	static HardwareSerialIMXRT 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    2ce8:	6823      	ldr	r3, [r4, #0]
    2cea:	4620      	mov	r0, r4
    2cec:	691b      	ldr	r3, [r3, #16]
    2cee:	4798      	blx	r3
    2cf0:	b110      	cbz	r0, 2cf8 <yield+0x94>
    2cf2:	6963      	ldr	r3, [r4, #20]
    2cf4:	689b      	ldr	r3, [r3, #8]
    2cf6:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    2cf8:	f898 2000 	ldrb.w	r2, [r8]
    2cfc:	b2eb      	uxtb	r3, r5
    2cfe:	429a      	cmp	r2, r3
    2d00:	d8ef      	bhi.n	2ce2 <yield+0x7e>
    2d02:	e7bd      	b.n	2c80 <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    2d04:	f7ff fec6 	bl	2a94 <usb_serial_available>
		if (Serial.available()) serialEvent();
    2d08:	2800      	cmp	r0, #0
    2d0a:	d0b7      	beq.n	2c7c <yield+0x18>
    2d0c:	f3af 8000 	nop.w
    2d10:	e7b4      	b.n	2c7c <yield+0x18>
		if (doit) __enable_irq();
    2d12:	2d00      	cmp	r5, #0
    2d14:	d1b8      	bne.n	2c88 <yield+0x24>
    2d16:	b662      	cpsie	i
    2d18:	e7b6      	b.n	2c88 <yield+0x24>
			lastYield = nullptr;
    2d1a:	4b05      	ldr	r3, [pc, #20]	; (2d30 <yield+0xcc>)
    2d1c:	601a      	str	r2, [r3, #0]
    2d1e:	e7ce      	b.n	2cbe <yield+0x5a>
    2d20:	20008cea 	.word	0x20008cea
    2d24:	20008cdd 	.word	0x20008cdd
    2d28:	200089b0 	.word	0x200089b0
    2d2c:	20008cda 	.word	0x20008cda
    2d30:	200089bc 	.word	0x200089bc
    2d34:	20008cdb 	.word	0x20008cdb
    2d38:	200089c0 	.word	0x200089c0

00002d3c <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    2d3c:	b570      	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    2d3e:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    2d42:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    2d44:	4c0c      	ldr	r4, [pc, #48]	; (2d78 <EventResponder::runFromInterrupt()+0x3c>)
    2d46:	6820      	ldr	r0, [r4, #0]
		if (first) {
    2d48:	b180      	cbz	r0, 2d6c <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    2d4a:	4e0c      	ldr	r6, [pc, #48]	; (2d7c <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    2d4c:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    2d4e:	6943      	ldr	r3, [r0, #20]
    2d50:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    2d52:	b173      	cbz	r3, 2d72 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    2d54:	619d      	str	r5, [r3, #24]
		if (doit) __enable_irq();
    2d56:	b902      	cbnz	r2, 2d5a <EventResponder::runFromInterrupt()+0x1e>
    2d58:	b662      	cpsie	i
			}
			enableInterrupts(irq);
			first->_triggered = false;
			(*(first->_function))(*first);
    2d5a:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    2d5c:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    2d5e:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    2d60:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    2d64:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    2d66:	6820      	ldr	r0, [r4, #0]
		if (first) {
    2d68:	2800      	cmp	r0, #0
    2d6a:	d1f0      	bne.n	2d4e <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    2d6c:	b902      	cbnz	r2, 2d70 <EventResponder::runFromInterrupt()+0x34>
    2d6e:	b662      	cpsie	i
		} else {
			enableInterrupts(irq);
			break;
		}
	}
}
    2d70:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    2d72:	6033      	str	r3, [r6, #0]
    2d74:	e7ef      	b.n	2d56 <EventResponder::runFromInterrupt()+0x1a>
    2d76:	bf00      	nop
    2d78:	200089b8 	.word	0x200089b8
    2d7c:	200089b4 	.word	0x200089b4

00002d80 <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    2d80:	f7ff bfdc 	b.w	2d3c <EventResponder::runFromInterrupt()>

00002d84 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    2d84:	4904      	ldr	r1, [pc, #16]	; (2d98 <systick_isr+0x14>)
	systick_millis_count++;
    2d86:	4a05      	ldr	r2, [pc, #20]	; (2d9c <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
    2d88:	6849      	ldr	r1, [r1, #4]
    2d8a:	4b05      	ldr	r3, [pc, #20]	; (2da0 <systick_isr+0x1c>)
    2d8c:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    2d8e:	6813      	ldr	r3, [r2, #0]
    2d90:	3301      	adds	r3, #1
    2d92:	6013      	str	r3, [r2, #0]
}
    2d94:	4770      	bx	lr
    2d96:	bf00      	nop
    2d98:	e0001000 	.word	0xe0001000
    2d9c:	20008cb8 	.word	0x20008cb8
    2da0:	20008cb4 	.word	0x20008cb4

00002da4 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    2da4:	49a2      	ldr	r1, [pc, #648]	; (3030 <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    2da6:	4ba3      	ldr	r3, [pc, #652]	; (3034 <set_arm_clock+0x290>)
	if (frequency > 528000000) {
    2da8:	4288      	cmp	r0, r1
{
    2daa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
    2dae:	4ca2      	ldr	r4, [pc, #648]	; (3038 <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    2db0:	695e      	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    2db2:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    2db4:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
    2db8:	d91b      	bls.n	2df2 <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    2dba:	4ba0      	ldr	r3, [pc, #640]	; (303c <set_arm_clock+0x298>)
    2dbc:	4298      	cmp	r0, r3
    2dbe:	f240 8102 	bls.w	2fc6 <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    2dc2:	1ac3      	subs	r3, r0, r3
    2dc4:	499e      	ldr	r1, [pc, #632]	; (3040 <set_arm_clock+0x29c>)
    2dc6:	0a1b      	lsrs	r3, r3, #8
    2dc8:	fba1 1303 	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    2dcc:	f240 6127 	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    2dd0:	09db      	lsrs	r3, r3, #7
    2dd2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2dd6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2dda:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    2dde:	428b      	cmp	r3, r1
    2de0:	bf28      	it	cs
    2de2:	460b      	movcs	r3, r1
    2de4:	f5a3 7748 	sub.w	r7, r3, #800	; 0x320
    2de8:	4b96      	ldr	r3, [pc, #600]	; (3044 <set_arm_clock+0x2a0>)
    2dea:	fba3 3707 	umull	r3, r7, r3, r7
    2dee:	08ff      	lsrs	r7, r7, #3
    2df0:	e004      	b.n	2dfc <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
    2df2:	4f95      	ldr	r7, [pc, #596]	; (3048 <set_arm_clock+0x2a4>)
    2df4:	42b8      	cmp	r0, r7
    2df6:	bf8c      	ite	hi
    2df8:	270e      	movhi	r7, #14
    2dfa:	2706      	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    2dfc:	498d      	ldr	r1, [pc, #564]	; (3034 <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    2dfe:	f008 091f 	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    2e02:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    2e06:	45b9      	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    2e08:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    2e0c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    2e10:	d20c      	bcs.n	2e2c <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    2e12:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    2e16:	f5a1 21f8 	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    2e1a:	ea48 0807 	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
    2e1e:	f8c1 800c 	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    2e22:	680b      	ldr	r3, [r1, #0]
    2e24:	2b00      	cmp	r3, #0
    2e26:	dafc      	bge.n	2e22 <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    2e28:	f008 091f 	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    2e2c:	f016 7300 	ands.w	r3, r6, #33554432	; 0x2000000
    2e30:	d124      	bne.n	2e7c <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    2e32:	4986      	ldr	r1, [pc, #536]	; (304c <set_arm_clock+0x2a8>)
    2e34:	690c      	ldr	r4, [r1, #16]
    2e36:	4986      	ldr	r1, [pc, #536]	; (3050 <set_arm_clock+0x2ac>)
    2e38:	43a1      	bics	r1, r4
    2e3a:	f000 80ea 	beq.w	3012 <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    2e3e:	f482 5180 	eor.w	r1, r2, #4096	; 0x1000
    2e42:	4634      	mov	r4, r6
    2e44:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    2e48:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    2e4c:	d004      	beq.n	2e58 <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    2e4e:	f026 5660 	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    2e52:	431e      	orrs	r6, r3
			CCM_CBCDR = cbcdr;
    2e54:	4b77      	ldr	r3, [pc, #476]	; (3034 <set_arm_clock+0x290>)
    2e56:	615e      	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    2e58:	f411 5f40 	tst.w	r1, #12288	; 0x3000
    2e5c:	d007      	beq.n	2e6e <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    2e5e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
    2e62:	4974      	ldr	r1, [pc, #464]	; (3034 <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    2e64:	432a      	orrs	r2, r5
			CCM_CBCMR = cbcmr;
    2e66:	618a      	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    2e68:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    2e6a:	071a      	lsls	r2, r3, #28
    2e6c:	d4fc      	bmi.n	2e68 <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    2e6e:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    2e72:	4a70      	ldr	r2, [pc, #448]	; (3034 <set_arm_clock+0x290>)
    2e74:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    2e76:	6c93      	ldr	r3, [r2, #72]	; 0x48
    2e78:	069b      	lsls	r3, r3, #26
    2e7a:	d4fc      	bmi.n	2e76 <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
    2e7c:	4c75      	ldr	r4, [pc, #468]	; (3054 <set_arm_clock+0x2b0>)
    2e7e:	42a0      	cmp	r0, r4
    2e80:	f200 80ce 	bhi.w	3020 <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
    2e84:	f04f 0c01 	mov.w	ip, #1
    2e88:	4601      	mov	r1, r0
	uint32_t div_arm = 1;
    2e8a:	4663      	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
    2e8c:	fb03 1201 	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
    2e90:	f103 0e01 	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
    2e94:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    2e98:	42a2      	cmp	r2, r4
    2e9a:	d818      	bhi.n	2ece <set_arm_clock+0x12a>
		if (div_arm < 8) {
    2e9c:	f1be 0f08 	cmp.w	lr, #8
				div_arm = 1;
    2ea0:	f04f 0301 	mov.w	r3, #1
		if (div_arm < 8) {
    2ea4:	f040 808d 	bne.w	2fc2 <set_arm_clock+0x21e>
			if (div_ahb < 5) {
    2ea8:	f1bc 0f04 	cmp.w	ip, #4
    2eac:	f200 8091 	bhi.w	2fd2 <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
    2eb0:	180a      	adds	r2, r1, r0
    2eb2:	42a2      	cmp	r2, r4
    2eb4:	f200 80a4 	bhi.w	3000 <set_arm_clock+0x25c>
    2eb8:	fb05 f100 	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
    2ebc:	46ac      	mov	ip, r5
			div_arm = div_arm + 1;
    2ebe:	f103 0e01 	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    2ec2:	fb03 1201 	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
    2ec6:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    2eca:	42a2      	cmp	r2, r4
    2ecc:	d9e6      	bls.n	2e9c <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    2ece:	f10c 31ff 	add.w	r1, ip, #4294967295
    2ed2:	028c      	lsls	r4, r1, #10
    2ed4:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    2ed8:	485f      	ldr	r0, [pc, #380]	; (3058 <set_arm_clock+0x2b4>)
    2eda:	4410      	add	r0, r2
	if (mult > 108) mult = 108;
    2edc:	4a5f      	ldr	r2, [pc, #380]	; (305c <set_arm_clock+0x2b8>)
    2ede:	4290      	cmp	r0, r2
    2ee0:	d97f      	bls.n	2fe2 <set_arm_clock+0x23e>
    2ee2:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 3088 <set_arm_clock+0x2e4>
    2ee6:	226c      	movs	r2, #108	; 0x6c
    2ee8:	485d      	ldr	r0, [pc, #372]	; (3060 <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    2eea:	4d58      	ldr	r5, [pc, #352]	; (304c <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    2eec:	fbb0 f0fe 	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    2ef0:	f8d5 e000 	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
    2ef4:	fbb0 f0fc 	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    2ef8:	f8df c190 	ldr.w	ip, [pc, #400]	; 308c <set_arm_clock+0x2e8>
    2efc:	ea0e 0c0c 	and.w	ip, lr, ip
    2f00:	45d4      	cmp	ip, sl
    2f02:	d009      	beq.n	2f18 <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    2f04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    2f08:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    2f0c:	f8c5 c000 	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    2f10:	602a      	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    2f12:	682a      	ldr	r2, [r5, #0]
    2f14:	2a00      	cmp	r2, #0
    2f16:	dafc      	bge.n	2f12 <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    2f18:	4a46      	ldr	r2, [pc, #280]	; (3034 <set_arm_clock+0x290>)
    2f1a:	6915      	ldr	r5, [r2, #16]
    2f1c:	f005 0507 	and.w	r5, r5, #7
    2f20:	429d      	cmp	r5, r3
    2f22:	d003      	beq.n	2f2c <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    2f24:	6113      	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    2f26:	6c93      	ldr	r3, [r2, #72]	; 0x48
    2f28:	03dd      	lsls	r5, r3, #15
    2f2a:	d4fc      	bmi.n	2f26 <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    2f2c:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
    2f30:	d009      	beq.n	2f46 <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    2f32:	f426 56e0 	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    2f36:	f404 54e0 	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
    2f3a:	4a3e      	ldr	r2, [pc, #248]	; (3034 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    2f3c:	4326      	orrs	r6, r4
		CCM_CBCDR = cbcdr;
    2f3e:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    2f40:	6c93      	ldr	r3, [r2, #72]	; 0x48
    2f42:	0799      	lsls	r1, r3, #30
    2f44:	d4fc      	bmi.n	2f40 <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    2f46:	4947      	ldr	r1, [pc, #284]	; (3064 <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
    2f48:	4a47      	ldr	r2, [pc, #284]	; (3068 <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    2f4a:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    2f4c:	4291      	cmp	r1, r2
    2f4e:	d83c      	bhi.n	2fca <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    2f50:	4b46      	ldr	r3, [pc, #280]	; (306c <set_arm_clock+0x2c8>)
    2f52:	09c9      	lsrs	r1, r1, #7
    2f54:	fba3 3101 	umull	r3, r1, r3, r1
    2f58:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    2f5a:	1e4b      	subs	r3, r1, #1
    2f5c:	021b      	lsls	r3, r3, #8
    2f5e:	ea86 0203 	eor.w	r2, r6, r3
    2f62:	f412 7f40 	tst.w	r2, #768	; 0x300
    2f66:	d006      	beq.n	2f76 <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    2f68:	f426 7640 	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    2f6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
    2f70:	4a30      	ldr	r2, [pc, #192]	; (3034 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    2f72:	4333      	orrs	r3, r6
		CCM_CBCDR = cbcdr;
    2f74:	6153      	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    2f76:	4a2f      	ldr	r2, [pc, #188]	; (3034 <set_arm_clock+0x290>)
    2f78:	6953      	ldr	r3, [r2, #20]
    2f7a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
    2f7e:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    2f80:	6c93      	ldr	r3, [r2, #72]	; 0x48
    2f82:	069b      	lsls	r3, r3, #26
    2f84:	d4fc      	bmi.n	2f80 <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2f86:	4b3a      	ldr	r3, [pc, #232]	; (3070 <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    2f88:	454f      	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2f8a:	fba3 2300 	umull	r2, r3, r3, r0
    2f8e:	f04f 32ff 	mov.w	r2, #4294967295
    2f92:	ea4f 4393 	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
    2f96:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2f9a:	fbb2 f3f3 	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
    2f9e:	4a35      	ldr	r2, [pc, #212]	; (3074 <set_arm_clock+0x2d0>)
    2fa0:	6010      	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    2fa2:	4a35      	ldr	r2, [pc, #212]	; (3078 <set_arm_clock+0x2d4>)
    2fa4:	6011      	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2fa6:	4a35      	ldr	r2, [pc, #212]	; (307c <set_arm_clock+0x2d8>)
    2fa8:	6013      	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    2faa:	d208      	bcs.n	2fbe <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    2fac:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    2fb0:	4a21      	ldr	r2, [pc, #132]	; (3038 <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    2fb2:	ea48 0707 	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
    2fb6:	60d7      	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    2fb8:	6813      	ldr	r3, [r2, #0]
    2fba:	2b00      	cmp	r3, #0
    2fbc:	dafc      	bge.n	2fb8 <set_arm_clock+0x214>
	}

	return frequency;
}
    2fbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2fc2:	4673      	mov	r3, lr
    2fc4:	e762      	b.n	2e8c <set_arm_clock+0xe8>
    2fc6:	2712      	movs	r7, #18
    2fc8:	e718      	b.n	2dfc <set_arm_clock+0x58>
    2fca:	f44f 7340 	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
    2fce:	2104      	movs	r1, #4
    2fd0:	e7c5      	b.n	2f5e <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    2fd2:	f10c 31ff 	add.w	r1, ip, #4294967295
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    2fd6:	4820      	ldr	r0, [pc, #128]	; (3058 <set_arm_clock+0x2b4>)
    2fd8:	2307      	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    2fda:	028c      	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    2fdc:	4410      	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    2fde:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    2fe2:	4a27      	ldr	r2, [pc, #156]	; (3080 <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    2fe4:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 3090 <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    2fe8:	fba2 2000 	umull	r2, r0, r2, r0
    2fec:	0d02      	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
    2fee:	4825      	ldr	r0, [pc, #148]	; (3084 <set_arm_clock+0x2e0>)
    2ff0:	2a36      	cmp	r2, #54	; 0x36
    2ff2:	bf38      	it	cc
    2ff4:	2236      	movcc	r2, #54	; 0x36
    2ff6:	fb02 f000 	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    2ffa:	ea42 0a0a 	orr.w	sl, r2, sl
    2ffe:	e774      	b.n	2eea <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    3000:	ea4f 248c 	mov.w	r4, ip, lsl #10
    3004:	2300      	movs	r3, #0
    3006:	ea86 218c 	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
    300a:	f04f 0e01 	mov.w	lr, #1
				div_ahb = div_ahb + 1;
    300e:	46ac      	mov	ip, r5
    3010:	e762      	b.n	2ed8 <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    3012:	461d      	mov	r5, r3
    3014:	f086 54c0 	eor.w	r4, r6, #402653184	; 0x18000000
    3018:	4611      	mov	r1, r2
    301a:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
    301e:	e713      	b.n	2e48 <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
    3020:	2400      	movs	r4, #0
	uint32_t div_ahb = 1;
    3022:	f04f 0c01 	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    3026:	4602      	mov	r2, r0
    3028:	4631      	mov	r1, r6
    302a:	4623      	mov	r3, r4
	uint32_t div_arm = 1;
    302c:	46e6      	mov	lr, ip
    302e:	e753      	b.n	2ed8 <set_arm_clock+0x134>
    3030:	1f78a400 	.word	0x1f78a400
    3034:	400fc000 	.word	0x400fc000
    3038:	40080000 	.word	0x40080000
    303c:	23c34600 	.word	0x23c34600
    3040:	004cb223 	.word	0x004cb223
    3044:	51eb851f 	.word	0x51eb851f
    3048:	016e3600 	.word	0x016e3600
    304c:	400d8000 	.word	0x400d8000
    3050:	80003040 	.word	0x80003040
    3054:	269fb1ff 	.word	0x269fb1ff
    3058:	005b8d80 	.word	0x005b8d80
    305c:	4df67eff 	.word	0x4df67eff
    3060:	4d3f6400 	.word	0x4d3f6400
    3064:	08f0d17f 	.word	0x08f0d17f
    3068:	2cb4177f 	.word	0x2cb4177f
    306c:	00e5109f 	.word	0x00e5109f
    3070:	431bde83 	.word	0x431bde83
    3074:	20007954 	.word	0x20007954
    3078:	20007950 	.word	0x20007950
    307c:	20008cb0 	.word	0x20008cb0
    3080:	165e9f81 	.word	0x165e9f81
    3084:	00b71b00 	.word	0x00b71b00
    3088:	8000206c 	.word	0x8000206c
    308c:	8001307f 	.word	0x8001307f
    3090:	80002000 	.word	0x80002000

00003094 <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    3094:	4a07      	ldr	r2, [pc, #28]	; (30b4 <rtc_get+0x20>)
    3096:	6a50      	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    3098:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uint32_t hi2 = SNVS_HPRTCMR;
    309a:	4619      	mov	r1, r3
    309c:	4684      	mov	ip, r0
    309e:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    30a0:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    30a2:	4299      	cmp	r1, r3
    30a4:	d1f9      	bne.n	309a <rtc_get+0x6>
    30a6:	4584      	cmp	ip, r0
    30a8:	d1f7      	bne.n	309a <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
    30aa:	0bdb      	lsrs	r3, r3, #15
}
    30ac:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    30b0:	4770      	bx	lr
    30b2:	bf00      	nop
    30b4:	400d4000 	.word	0x400d4000

000030b8 <sm_align_pool>:
{
    30b8:	b508      	push	{r3, lr}
	x = spool->pool_size % HEADER_SZ;
    30ba:	e9d0 3200 	ldrd	r3, r2, [r0]
	if (!spool->pool || !spool->pool_size) return 0;
    30be:	b15b      	cbz	r3, 30d8 <sm_align_pool+0x20>
    30c0:	b1ba      	cbz	r2, 30f2 <sm_align_pool+0x3a>
	if (spool->pool_size % HEADER_SZ) return 0;
    30c2:	4b0f      	ldr	r3, [pc, #60]	; (3100 <sm_align_pool+0x48>)
    30c4:	fba3 1302 	umull	r1, r3, r3, r2
    30c8:	08db      	lsrs	r3, r3, #3
    30ca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    30ce:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    30d2:	d10a      	bne.n	30ea <sm_align_pool+0x32>
	if (smalloc_verify_pool(spool)) return 1;
    30d4:	2001      	movs	r0, #1
}
    30d6:	bd08      	pop	{r3, pc}
	x = spool->pool_size % HEADER_SZ;
    30d8:	4b09      	ldr	r3, [pc, #36]	; (3100 <sm_align_pool+0x48>)
    30da:	fba3 1302 	umull	r1, r3, r3, r2
    30de:	08db      	lsrs	r3, r3, #3
    30e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
    30e4:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    30e8:	d001      	beq.n	30ee <sm_align_pool+0x36>
    30ea:	1ad2      	subs	r2, r2, r3
    30ec:	6042      	str	r2, [r0, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    30ee:	2af0      	cmp	r2, #240	; 0xf0
    30f0:	d8f0      	bhi.n	30d4 <sm_align_pool+0x1c>
		errno = ENOSPC;
    30f2:	f002 f9b1 	bl	5458 <__errno>
    30f6:	221c      	movs	r2, #28
    30f8:	4603      	mov	r3, r0
    30fa:	2000      	movs	r0, #0
    30fc:	601a      	str	r2, [r3, #0]
}
    30fe:	bd08      	pop	{r3, pc}
    3100:	aaaaaaab 	.word	0xaaaaaaab

00003104 <sm_set_pool>:
{
    3104:	b570      	push	{r4, r5, r6, lr}
	if (!spool) {
    3106:	4604      	mov	r4, r0
    3108:	b338      	cbz	r0, 315a <sm_set_pool+0x56>
	if (!new_pool || !new_pool_size) {
    310a:	b119      	cbz	r1, 3114 <sm_set_pool+0x10>
    310c:	fab2 f682 	clz	r6, r2
    3110:	0976      	lsrs	r6, r6, #5
    3112:	b9a2      	cbnz	r2, 313e <sm_set_pool+0x3a>
	if (!spool->pool || !spool->pool_size) return 0;
    3114:	6820      	ldr	r0, [r4, #0]
    3116:	b300      	cbz	r0, 315a <sm_set_pool+0x56>
    3118:	6862      	ldr	r2, [r4, #4]
    311a:	b1f2      	cbz	r2, 315a <sm_set_pool+0x56>
	if (spool->pool_size % HEADER_SZ) return 0;
    311c:	4b18      	ldr	r3, [pc, #96]	; (3180 <sm_set_pool+0x7c>)
    311e:	4919      	ldr	r1, [pc, #100]	; (3184 <sm_set_pool+0x80>)
    3120:	fb02 f303 	mul.w	r3, r2, r3
    3124:	ebb1 0fb3 	cmp.w	r1, r3, ror #2
    3128:	d317      	bcc.n	315a <sm_set_pool+0x56>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    312a:	68a3      	ldr	r3, [r4, #8]
    312c:	b9e3      	cbnz	r3, 3168 <sm_set_pool+0x64>
			memset(spool, 0, sizeof(struct smalloc_pool));
    312e:	2200      	movs	r2, #0
			return 1;
    3130:	2301      	movs	r3, #1
			memset(spool, 0, sizeof(struct smalloc_pool));
    3132:	6022      	str	r2, [r4, #0]
    3134:	6062      	str	r2, [r4, #4]
    3136:	60a2      	str	r2, [r4, #8]
    3138:	60e2      	str	r2, [r4, #12]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    313a:	4618      	mov	r0, r3
    313c:	bd70      	pop	{r4, r5, r6, pc}
	spool->pool = new_pool;
    313e:	461d      	mov	r5, r3
	spool->oomfn = oom_handler;
    3140:	9b04      	ldr	r3, [sp, #16]
	spool->pool_size = new_pool_size;
    3142:	e9c0 1200 	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
    3146:	60c3      	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    3148:	f7ff ffb6 	bl	30b8 <sm_align_pool>
    314c:	4603      	mov	r3, r0
    314e:	2800      	cmp	r0, #0
    3150:	d0f3      	beq.n	313a <sm_set_pool+0x36>
	if (do_zero) {
    3152:	b96d      	cbnz	r5, 3170 <sm_set_pool+0x6c>
	return 1;
    3154:	2301      	movs	r3, #1
}
    3156:	4618      	mov	r0, r3
    3158:	bd70      	pop	{r4, r5, r6, pc}
		errno = EINVAL;
    315a:	f002 f97d 	bl	5458 <__errno>
    315e:	2216      	movs	r2, #22
		return 0;
    3160:	2300      	movs	r3, #0
		errno = EINVAL;
    3162:	6002      	str	r2, [r0, #0]
}
    3164:	4618      	mov	r0, r3
    3166:	bd70      	pop	{r4, r5, r6, pc}
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    3168:	2100      	movs	r1, #0
    316a:	f002 f83f 	bl	51ec <memset>
    316e:	e7de      	b.n	312e <sm_set_pool+0x2a>
		memset(spool->pool, 0, spool->pool_size);
    3170:	6862      	ldr	r2, [r4, #4]
    3172:	4631      	mov	r1, r6
    3174:	6820      	ldr	r0, [r4, #0]
		spool->do_zero = do_zero;
    3176:	60a5      	str	r5, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    3178:	f002 f838 	bl	51ec <memset>
	return 1;
    317c:	2301      	movs	r3, #1
    317e:	e7dc      	b.n	313a <sm_set_pool+0x36>
    3180:	aaaaaaab 	.word	0xaaaaaaab
    3184:	15555555 	.word	0x15555555

00003188 <__aeabi_uldivmod>:
    3188:	b953      	cbnz	r3, 31a0 <__aeabi_uldivmod+0x18>
    318a:	b94a      	cbnz	r2, 31a0 <__aeabi_uldivmod+0x18>
    318c:	2900      	cmp	r1, #0
    318e:	bf08      	it	eq
    3190:	2800      	cmpeq	r0, #0
    3192:	bf1c      	itt	ne
    3194:	f04f 31ff 	movne.w	r1, #4294967295
    3198:	f04f 30ff 	movne.w	r0, #4294967295
    319c:	f000 b970 	b.w	3480 <__aeabi_idiv0>
    31a0:	f1ad 0c08 	sub.w	ip, sp, #8
    31a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    31a8:	f000 f806 	bl	31b8 <__udivmoddi4>
    31ac:	f8dd e004 	ldr.w	lr, [sp, #4]
    31b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    31b4:	b004      	add	sp, #16
    31b6:	4770      	bx	lr

000031b8 <__udivmoddi4>:
    31b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    31bc:	9e08      	ldr	r6, [sp, #32]
    31be:	460d      	mov	r5, r1
    31c0:	4604      	mov	r4, r0
    31c2:	460f      	mov	r7, r1
    31c4:	2b00      	cmp	r3, #0
    31c6:	d14a      	bne.n	325e <__udivmoddi4+0xa6>
    31c8:	428a      	cmp	r2, r1
    31ca:	4694      	mov	ip, r2
    31cc:	d965      	bls.n	329a <__udivmoddi4+0xe2>
    31ce:	fab2 f382 	clz	r3, r2
    31d2:	b143      	cbz	r3, 31e6 <__udivmoddi4+0x2e>
    31d4:	fa02 fc03 	lsl.w	ip, r2, r3
    31d8:	f1c3 0220 	rsb	r2, r3, #32
    31dc:	409f      	lsls	r7, r3
    31de:	fa20 f202 	lsr.w	r2, r0, r2
    31e2:	4317      	orrs	r7, r2
    31e4:	409c      	lsls	r4, r3
    31e6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
    31ea:	fa1f f58c 	uxth.w	r5, ip
    31ee:	fbb7 f1fe 	udiv	r1, r7, lr
    31f2:	0c22      	lsrs	r2, r4, #16
    31f4:	fb0e 7711 	mls	r7, lr, r1, r7
    31f8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
    31fc:	fb01 f005 	mul.w	r0, r1, r5
    3200:	4290      	cmp	r0, r2
    3202:	d90a      	bls.n	321a <__udivmoddi4+0x62>
    3204:	eb1c 0202 	adds.w	r2, ip, r2
    3208:	f101 37ff 	add.w	r7, r1, #4294967295
    320c:	f080 811c 	bcs.w	3448 <__udivmoddi4+0x290>
    3210:	4290      	cmp	r0, r2
    3212:	f240 8119 	bls.w	3448 <__udivmoddi4+0x290>
    3216:	3902      	subs	r1, #2
    3218:	4462      	add	r2, ip
    321a:	1a12      	subs	r2, r2, r0
    321c:	b2a4      	uxth	r4, r4
    321e:	fbb2 f0fe 	udiv	r0, r2, lr
    3222:	fb0e 2210 	mls	r2, lr, r0, r2
    3226:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    322a:	fb00 f505 	mul.w	r5, r0, r5
    322e:	42a5      	cmp	r5, r4
    3230:	d90a      	bls.n	3248 <__udivmoddi4+0x90>
    3232:	eb1c 0404 	adds.w	r4, ip, r4
    3236:	f100 32ff 	add.w	r2, r0, #4294967295
    323a:	f080 8107 	bcs.w	344c <__udivmoddi4+0x294>
    323e:	42a5      	cmp	r5, r4
    3240:	f240 8104 	bls.w	344c <__udivmoddi4+0x294>
    3244:	4464      	add	r4, ip
    3246:	3802      	subs	r0, #2
    3248:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
    324c:	1b64      	subs	r4, r4, r5
    324e:	2100      	movs	r1, #0
    3250:	b11e      	cbz	r6, 325a <__udivmoddi4+0xa2>
    3252:	40dc      	lsrs	r4, r3
    3254:	2300      	movs	r3, #0
    3256:	e9c6 4300 	strd	r4, r3, [r6]
    325a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    325e:	428b      	cmp	r3, r1
    3260:	d908      	bls.n	3274 <__udivmoddi4+0xbc>
    3262:	2e00      	cmp	r6, #0
    3264:	f000 80ed 	beq.w	3442 <__udivmoddi4+0x28a>
    3268:	2100      	movs	r1, #0
    326a:	e9c6 0500 	strd	r0, r5, [r6]
    326e:	4608      	mov	r0, r1
    3270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3274:	fab3 f183 	clz	r1, r3
    3278:	2900      	cmp	r1, #0
    327a:	d149      	bne.n	3310 <__udivmoddi4+0x158>
    327c:	42ab      	cmp	r3, r5
    327e:	d302      	bcc.n	3286 <__udivmoddi4+0xce>
    3280:	4282      	cmp	r2, r0
    3282:	f200 80f8 	bhi.w	3476 <__udivmoddi4+0x2be>
    3286:	1a84      	subs	r4, r0, r2
    3288:	eb65 0203 	sbc.w	r2, r5, r3
    328c:	2001      	movs	r0, #1
    328e:	4617      	mov	r7, r2
    3290:	2e00      	cmp	r6, #0
    3292:	d0e2      	beq.n	325a <__udivmoddi4+0xa2>
    3294:	e9c6 4700 	strd	r4, r7, [r6]
    3298:	e7df      	b.n	325a <__udivmoddi4+0xa2>
    329a:	b902      	cbnz	r2, 329e <__udivmoddi4+0xe6>
    329c:	deff      	udf	#255	; 0xff
    329e:	fab2 f382 	clz	r3, r2
    32a2:	2b00      	cmp	r3, #0
    32a4:	f040 8090 	bne.w	33c8 <__udivmoddi4+0x210>
    32a8:	1a8a      	subs	r2, r1, r2
    32aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
    32ae:	fa1f fe8c 	uxth.w	lr, ip
    32b2:	2101      	movs	r1, #1
    32b4:	fbb2 f5f7 	udiv	r5, r2, r7
    32b8:	fb07 2015 	mls	r0, r7, r5, r2
    32bc:	0c22      	lsrs	r2, r4, #16
    32be:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    32c2:	fb0e f005 	mul.w	r0, lr, r5
    32c6:	4290      	cmp	r0, r2
    32c8:	d908      	bls.n	32dc <__udivmoddi4+0x124>
    32ca:	eb1c 0202 	adds.w	r2, ip, r2
    32ce:	f105 38ff 	add.w	r8, r5, #4294967295
    32d2:	d202      	bcs.n	32da <__udivmoddi4+0x122>
    32d4:	4290      	cmp	r0, r2
    32d6:	f200 80cb 	bhi.w	3470 <__udivmoddi4+0x2b8>
    32da:	4645      	mov	r5, r8
    32dc:	1a12      	subs	r2, r2, r0
    32de:	b2a4      	uxth	r4, r4
    32e0:	fbb2 f0f7 	udiv	r0, r2, r7
    32e4:	fb07 2210 	mls	r2, r7, r0, r2
    32e8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    32ec:	fb0e fe00 	mul.w	lr, lr, r0
    32f0:	45a6      	cmp	lr, r4
    32f2:	d908      	bls.n	3306 <__udivmoddi4+0x14e>
    32f4:	eb1c 0404 	adds.w	r4, ip, r4
    32f8:	f100 32ff 	add.w	r2, r0, #4294967295
    32fc:	d202      	bcs.n	3304 <__udivmoddi4+0x14c>
    32fe:	45a6      	cmp	lr, r4
    3300:	f200 80bb 	bhi.w	347a <__udivmoddi4+0x2c2>
    3304:	4610      	mov	r0, r2
    3306:	eba4 040e 	sub.w	r4, r4, lr
    330a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
    330e:	e79f      	b.n	3250 <__udivmoddi4+0x98>
    3310:	f1c1 0720 	rsb	r7, r1, #32
    3314:	408b      	lsls	r3, r1
    3316:	fa22 fc07 	lsr.w	ip, r2, r7
    331a:	ea4c 0c03 	orr.w	ip, ip, r3
    331e:	fa05 f401 	lsl.w	r4, r5, r1
    3322:	fa20 f307 	lsr.w	r3, r0, r7
    3326:	40fd      	lsrs	r5, r7
    3328:	ea4f 491c 	mov.w	r9, ip, lsr #16
    332c:	4323      	orrs	r3, r4
    332e:	fbb5 f8f9 	udiv	r8, r5, r9
    3332:	fa1f fe8c 	uxth.w	lr, ip
    3336:	fb09 5518 	mls	r5, r9, r8, r5
    333a:	0c1c      	lsrs	r4, r3, #16
    333c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    3340:	fb08 f50e 	mul.w	r5, r8, lr
    3344:	42a5      	cmp	r5, r4
    3346:	fa02 f201 	lsl.w	r2, r2, r1
    334a:	fa00 f001 	lsl.w	r0, r0, r1
    334e:	d90b      	bls.n	3368 <__udivmoddi4+0x1b0>
    3350:	eb1c 0404 	adds.w	r4, ip, r4
    3354:	f108 3aff 	add.w	sl, r8, #4294967295
    3358:	f080 8088 	bcs.w	346c <__udivmoddi4+0x2b4>
    335c:	42a5      	cmp	r5, r4
    335e:	f240 8085 	bls.w	346c <__udivmoddi4+0x2b4>
    3362:	f1a8 0802 	sub.w	r8, r8, #2
    3366:	4464      	add	r4, ip
    3368:	1b64      	subs	r4, r4, r5
    336a:	b29d      	uxth	r5, r3
    336c:	fbb4 f3f9 	udiv	r3, r4, r9
    3370:	fb09 4413 	mls	r4, r9, r3, r4
    3374:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
    3378:	fb03 fe0e 	mul.w	lr, r3, lr
    337c:	45a6      	cmp	lr, r4
    337e:	d908      	bls.n	3392 <__udivmoddi4+0x1da>
    3380:	eb1c 0404 	adds.w	r4, ip, r4
    3384:	f103 35ff 	add.w	r5, r3, #4294967295
    3388:	d26c      	bcs.n	3464 <__udivmoddi4+0x2ac>
    338a:	45a6      	cmp	lr, r4
    338c:	d96a      	bls.n	3464 <__udivmoddi4+0x2ac>
    338e:	3b02      	subs	r3, #2
    3390:	4464      	add	r4, ip
    3392:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    3396:	fba3 9502 	umull	r9, r5, r3, r2
    339a:	eba4 040e 	sub.w	r4, r4, lr
    339e:	42ac      	cmp	r4, r5
    33a0:	46c8      	mov	r8, r9
    33a2:	46ae      	mov	lr, r5
    33a4:	d356      	bcc.n	3454 <__udivmoddi4+0x29c>
    33a6:	d053      	beq.n	3450 <__udivmoddi4+0x298>
    33a8:	b156      	cbz	r6, 33c0 <__udivmoddi4+0x208>
    33aa:	ebb0 0208 	subs.w	r2, r0, r8
    33ae:	eb64 040e 	sbc.w	r4, r4, lr
    33b2:	fa04 f707 	lsl.w	r7, r4, r7
    33b6:	40ca      	lsrs	r2, r1
    33b8:	40cc      	lsrs	r4, r1
    33ba:	4317      	orrs	r7, r2
    33bc:	e9c6 7400 	strd	r7, r4, [r6]
    33c0:	4618      	mov	r0, r3
    33c2:	2100      	movs	r1, #0
    33c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    33c8:	f1c3 0120 	rsb	r1, r3, #32
    33cc:	fa02 fc03 	lsl.w	ip, r2, r3
    33d0:	fa20 f201 	lsr.w	r2, r0, r1
    33d4:	fa25 f101 	lsr.w	r1, r5, r1
    33d8:	409d      	lsls	r5, r3
    33da:	432a      	orrs	r2, r5
    33dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
    33e0:	fa1f fe8c 	uxth.w	lr, ip
    33e4:	fbb1 f0f7 	udiv	r0, r1, r7
    33e8:	fb07 1510 	mls	r5, r7, r0, r1
    33ec:	0c11      	lsrs	r1, r2, #16
    33ee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
    33f2:	fb00 f50e 	mul.w	r5, r0, lr
    33f6:	428d      	cmp	r5, r1
    33f8:	fa04 f403 	lsl.w	r4, r4, r3
    33fc:	d908      	bls.n	3410 <__udivmoddi4+0x258>
    33fe:	eb1c 0101 	adds.w	r1, ip, r1
    3402:	f100 38ff 	add.w	r8, r0, #4294967295
    3406:	d22f      	bcs.n	3468 <__udivmoddi4+0x2b0>
    3408:	428d      	cmp	r5, r1
    340a:	d92d      	bls.n	3468 <__udivmoddi4+0x2b0>
    340c:	3802      	subs	r0, #2
    340e:	4461      	add	r1, ip
    3410:	1b49      	subs	r1, r1, r5
    3412:	b292      	uxth	r2, r2
    3414:	fbb1 f5f7 	udiv	r5, r1, r7
    3418:	fb07 1115 	mls	r1, r7, r5, r1
    341c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    3420:	fb05 f10e 	mul.w	r1, r5, lr
    3424:	4291      	cmp	r1, r2
    3426:	d908      	bls.n	343a <__udivmoddi4+0x282>
    3428:	eb1c 0202 	adds.w	r2, ip, r2
    342c:	f105 38ff 	add.w	r8, r5, #4294967295
    3430:	d216      	bcs.n	3460 <__udivmoddi4+0x2a8>
    3432:	4291      	cmp	r1, r2
    3434:	d914      	bls.n	3460 <__udivmoddi4+0x2a8>
    3436:	3d02      	subs	r5, #2
    3438:	4462      	add	r2, ip
    343a:	1a52      	subs	r2, r2, r1
    343c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
    3440:	e738      	b.n	32b4 <__udivmoddi4+0xfc>
    3442:	4631      	mov	r1, r6
    3444:	4630      	mov	r0, r6
    3446:	e708      	b.n	325a <__udivmoddi4+0xa2>
    3448:	4639      	mov	r1, r7
    344a:	e6e6      	b.n	321a <__udivmoddi4+0x62>
    344c:	4610      	mov	r0, r2
    344e:	e6fb      	b.n	3248 <__udivmoddi4+0x90>
    3450:	4548      	cmp	r0, r9
    3452:	d2a9      	bcs.n	33a8 <__udivmoddi4+0x1f0>
    3454:	ebb9 0802 	subs.w	r8, r9, r2
    3458:	eb65 0e0c 	sbc.w	lr, r5, ip
    345c:	3b01      	subs	r3, #1
    345e:	e7a3      	b.n	33a8 <__udivmoddi4+0x1f0>
    3460:	4645      	mov	r5, r8
    3462:	e7ea      	b.n	343a <__udivmoddi4+0x282>
    3464:	462b      	mov	r3, r5
    3466:	e794      	b.n	3392 <__udivmoddi4+0x1da>
    3468:	4640      	mov	r0, r8
    346a:	e7d1      	b.n	3410 <__udivmoddi4+0x258>
    346c:	46d0      	mov	r8, sl
    346e:	e77b      	b.n	3368 <__udivmoddi4+0x1b0>
    3470:	3d02      	subs	r5, #2
    3472:	4462      	add	r2, ip
    3474:	e732      	b.n	32dc <__udivmoddi4+0x124>
    3476:	4608      	mov	r0, r1
    3478:	e70a      	b.n	3290 <__udivmoddi4+0xd8>
    347a:	4464      	add	r4, ip
    347c:	3802      	subs	r0, #2
    347e:	e742      	b.n	3306 <__udivmoddi4+0x14e>

00003480 <__aeabi_idiv0>:
    3480:	4770      	bx	lr
    3482:	bf00      	nop

00003484 <malloc>:
    3484:	4b02      	ldr	r3, [pc, #8]	; (3490 <malloc+0xc>)
    3486:	4601      	mov	r1, r0
    3488:	6818      	ldr	r0, [r3, #0]
    348a:	f000 b80b 	b.w	34a4 <_malloc_r>
    348e:	bf00      	nop
    3490:	20007fc0 	.word	0x20007fc0

00003494 <free>:
    3494:	4b02      	ldr	r3, [pc, #8]	; (34a0 <free+0xc>)
    3496:	4601      	mov	r1, r0
    3498:	6818      	ldr	r0, [r3, #0]
    349a:	f002 ba5f 	b.w	595c <_free_r>
    349e:	bf00      	nop
    34a0:	20007fc0 	.word	0x20007fc0

000034a4 <_malloc_r>:
    34a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    34a8:	f101 060b 	add.w	r6, r1, #11
    34ac:	2e16      	cmp	r6, #22
    34ae:	b083      	sub	sp, #12
    34b0:	4604      	mov	r4, r0
    34b2:	d824      	bhi.n	34fe <_malloc_r+0x5a>
    34b4:	2910      	cmp	r1, #16
    34b6:	f200 80ba 	bhi.w	362e <_malloc_r+0x18a>
    34ba:	f000 faa3 	bl	3a04 <__malloc_lock>
    34be:	2610      	movs	r6, #16
    34c0:	2218      	movs	r2, #24
    34c2:	2002      	movs	r0, #2
    34c4:	4fb5      	ldr	r7, [pc, #724]	; (379c <_malloc_r+0x2f8>)
    34c6:	443a      	add	r2, r7
    34c8:	f1a2 0108 	sub.w	r1, r2, #8
    34cc:	6853      	ldr	r3, [r2, #4]
    34ce:	428b      	cmp	r3, r1
    34d0:	f000 80ba 	beq.w	3648 <_malloc_r+0x1a4>
    34d4:	685a      	ldr	r2, [r3, #4]
    34d6:	68d9      	ldr	r1, [r3, #12]
    34d8:	f022 0203 	bic.w	r2, r2, #3
    34dc:	441a      	add	r2, r3
    34de:	689d      	ldr	r5, [r3, #8]
    34e0:	60e9      	str	r1, [r5, #12]
    34e2:	608d      	str	r5, [r1, #8]
    34e4:	6851      	ldr	r1, [r2, #4]
    34e6:	f041 0101 	orr.w	r1, r1, #1
    34ea:	4620      	mov	r0, r4
    34ec:	6051      	str	r1, [r2, #4]
    34ee:	f103 0508 	add.w	r5, r3, #8
    34f2:	f000 fa8d 	bl	3a10 <__malloc_unlock>
    34f6:	4628      	mov	r0, r5
    34f8:	b003      	add	sp, #12
    34fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    34fe:	f036 0607 	bics.w	r6, r6, #7
    3502:	f100 8094 	bmi.w	362e <_malloc_r+0x18a>
    3506:	42b1      	cmp	r1, r6
    3508:	f200 8091 	bhi.w	362e <_malloc_r+0x18a>
    350c:	f000 fa7a 	bl	3a04 <__malloc_lock>
    3510:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
    3514:	f0c0 819a 	bcc.w	384c <_malloc_r+0x3a8>
    3518:	0a73      	lsrs	r3, r6, #9
    351a:	f000 808f 	beq.w	363c <_malloc_r+0x198>
    351e:	2b04      	cmp	r3, #4
    3520:	f200 816f 	bhi.w	3802 <_malloc_r+0x35e>
    3524:	09b3      	lsrs	r3, r6, #6
    3526:	f103 0039 	add.w	r0, r3, #57	; 0x39
    352a:	f103 0c38 	add.w	ip, r3, #56	; 0x38
    352e:	00c3      	lsls	r3, r0, #3
    3530:	4f9a      	ldr	r7, [pc, #616]	; (379c <_malloc_r+0x2f8>)
    3532:	443b      	add	r3, r7
    3534:	f1a3 0508 	sub.w	r5, r3, #8
    3538:	685b      	ldr	r3, [r3, #4]
    353a:	429d      	cmp	r5, r3
    353c:	d106      	bne.n	354c <_malloc_r+0xa8>
    353e:	e00c      	b.n	355a <_malloc_r+0xb6>
    3540:	2900      	cmp	r1, #0
    3542:	f280 8127 	bge.w	3794 <_malloc_r+0x2f0>
    3546:	68db      	ldr	r3, [r3, #12]
    3548:	429d      	cmp	r5, r3
    354a:	d006      	beq.n	355a <_malloc_r+0xb6>
    354c:	685a      	ldr	r2, [r3, #4]
    354e:	f022 0203 	bic.w	r2, r2, #3
    3552:	1b91      	subs	r1, r2, r6
    3554:	290f      	cmp	r1, #15
    3556:	ddf3      	ble.n	3540 <_malloc_r+0x9c>
    3558:	4660      	mov	r0, ip
    355a:	693d      	ldr	r5, [r7, #16]
    355c:	f8df c250 	ldr.w	ip, [pc, #592]	; 37b0 <_malloc_r+0x30c>
    3560:	4565      	cmp	r5, ip
    3562:	d07c      	beq.n	365e <_malloc_r+0x1ba>
    3564:	686a      	ldr	r2, [r5, #4]
    3566:	f022 0203 	bic.w	r2, r2, #3
    356a:	1b93      	subs	r3, r2, r6
    356c:	2b0f      	cmp	r3, #15
    356e:	f300 817b 	bgt.w	3868 <_malloc_r+0x3c4>
    3572:	2b00      	cmp	r3, #0
    3574:	e9c7 cc04 	strd	ip, ip, [r7, #16]
    3578:	f280 816c 	bge.w	3854 <_malloc_r+0x3b0>
    357c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    3580:	f080 811a 	bcs.w	37b8 <_malloc_r+0x314>
    3584:	08d3      	lsrs	r3, r2, #3
    3586:	6879      	ldr	r1, [r7, #4]
    3588:	3301      	adds	r3, #1
    358a:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    358e:	2201      	movs	r2, #1
    3590:	fa02 f20e 	lsl.w	r2, r2, lr
    3594:	430a      	orrs	r2, r1
    3596:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
    359a:	f8c5 e008 	str.w	lr, [r5, #8]
    359e:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    35a2:	3908      	subs	r1, #8
    35a4:	60e9      	str	r1, [r5, #12]
    35a6:	607a      	str	r2, [r7, #4]
    35a8:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    35ac:	f8ce 500c 	str.w	r5, [lr, #12]
    35b0:	1083      	asrs	r3, r0, #2
    35b2:	2101      	movs	r1, #1
    35b4:	4099      	lsls	r1, r3
    35b6:	4291      	cmp	r1, r2
    35b8:	d857      	bhi.n	366a <_malloc_r+0x1c6>
    35ba:	4211      	tst	r1, r2
    35bc:	d106      	bne.n	35cc <_malloc_r+0x128>
    35be:	f020 0003 	bic.w	r0, r0, #3
    35c2:	0049      	lsls	r1, r1, #1
    35c4:	4211      	tst	r1, r2
    35c6:	f100 0004 	add.w	r0, r0, #4
    35ca:	d0fa      	beq.n	35c2 <_malloc_r+0x11e>
    35cc:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    35d0:	464d      	mov	r5, r9
    35d2:	4686      	mov	lr, r0
    35d4:	f8d5 800c 	ldr.w	r8, [r5, #12]
    35d8:	4545      	cmp	r5, r8
    35da:	d108      	bne.n	35ee <_malloc_r+0x14a>
    35dc:	e11d      	b.n	381a <_malloc_r+0x376>
    35de:	2b00      	cmp	r3, #0
    35e0:	f280 8124 	bge.w	382c <_malloc_r+0x388>
    35e4:	f8d8 800c 	ldr.w	r8, [r8, #12]
    35e8:	4545      	cmp	r5, r8
    35ea:	f000 8116 	beq.w	381a <_malloc_r+0x376>
    35ee:	f8d8 2004 	ldr.w	r2, [r8, #4]
    35f2:	f022 0203 	bic.w	r2, r2, #3
    35f6:	1b93      	subs	r3, r2, r6
    35f8:	2b0f      	cmp	r3, #15
    35fa:	ddf0      	ble.n	35de <_malloc_r+0x13a>
    35fc:	4620      	mov	r0, r4
    35fe:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
    3602:	eb08 0106 	add.w	r1, r8, r6
    3606:	f046 0601 	orr.w	r6, r6, #1
    360a:	f8c8 6004 	str.w	r6, [r8, #4]
    360e:	60ec      	str	r4, [r5, #12]
    3610:	60a5      	str	r5, [r4, #8]
    3612:	f043 0401 	orr.w	r4, r3, #1
    3616:	e9c7 1104 	strd	r1, r1, [r7, #16]
    361a:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    361e:	604c      	str	r4, [r1, #4]
    3620:	f848 3002 	str.w	r3, [r8, r2]
    3624:	f000 f9f4 	bl	3a10 <__malloc_unlock>
    3628:	f108 0508 	add.w	r5, r8, #8
    362c:	e002      	b.n	3634 <_malloc_r+0x190>
    362e:	230c      	movs	r3, #12
    3630:	6023      	str	r3, [r4, #0]
    3632:	2500      	movs	r5, #0
    3634:	4628      	mov	r0, r5
    3636:	b003      	add	sp, #12
    3638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    363c:	f44f 7300 	mov.w	r3, #512	; 0x200
    3640:	2040      	movs	r0, #64	; 0x40
    3642:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    3646:	e773      	b.n	3530 <_malloc_r+0x8c>
    3648:	68d3      	ldr	r3, [r2, #12]
    364a:	429a      	cmp	r2, r3
    364c:	bf08      	it	eq
    364e:	3002      	addeq	r0, #2
    3650:	f47f af40 	bne.w	34d4 <_malloc_r+0x30>
    3654:	693d      	ldr	r5, [r7, #16]
    3656:	f8df c158 	ldr.w	ip, [pc, #344]	; 37b0 <_malloc_r+0x30c>
    365a:	4565      	cmp	r5, ip
    365c:	d182      	bne.n	3564 <_malloc_r+0xc0>
    365e:	687a      	ldr	r2, [r7, #4]
    3660:	1083      	asrs	r3, r0, #2
    3662:	2101      	movs	r1, #1
    3664:	4099      	lsls	r1, r3
    3666:	4291      	cmp	r1, r2
    3668:	d9a7      	bls.n	35ba <_malloc_r+0x116>
    366a:	68bd      	ldr	r5, [r7, #8]
    366c:	686b      	ldr	r3, [r5, #4]
    366e:	f023 0903 	bic.w	r9, r3, #3
    3672:	454e      	cmp	r6, r9
    3674:	d803      	bhi.n	367e <_malloc_r+0x1da>
    3676:	eba9 0306 	sub.w	r3, r9, r6
    367a:	2b0f      	cmp	r3, #15
    367c:	dc7a      	bgt.n	3774 <_malloc_r+0x2d0>
    367e:	f8df b134 	ldr.w	fp, [pc, #308]	; 37b4 <_malloc_r+0x310>
    3682:	4b47      	ldr	r3, [pc, #284]	; (37a0 <_malloc_r+0x2fc>)
    3684:	f8db 2000 	ldr.w	r2, [fp]
    3688:	681b      	ldr	r3, [r3, #0]
    368a:	3201      	adds	r2, #1
    368c:	4433      	add	r3, r6
    368e:	eb05 0a09 	add.w	sl, r5, r9
    3692:	f000 8133 	beq.w	38fc <_malloc_r+0x458>
    3696:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    369a:	330f      	adds	r3, #15
    369c:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
    36a0:	f028 080f 	bic.w	r8, r8, #15
    36a4:	4641      	mov	r1, r8
    36a6:	4620      	mov	r0, r4
    36a8:	f001 feae 	bl	5408 <_sbrk_r>
    36ac:	1c41      	adds	r1, r0, #1
    36ae:	4602      	mov	r2, r0
    36b0:	f000 80f3 	beq.w	389a <_malloc_r+0x3f6>
    36b4:	4582      	cmp	sl, r0
    36b6:	f200 80ee 	bhi.w	3896 <_malloc_r+0x3f2>
    36ba:	4b3a      	ldr	r3, [pc, #232]	; (37a4 <_malloc_r+0x300>)
    36bc:	6819      	ldr	r1, [r3, #0]
    36be:	4441      	add	r1, r8
    36c0:	6019      	str	r1, [r3, #0]
    36c2:	4608      	mov	r0, r1
    36c4:	f000 814e 	beq.w	3964 <_malloc_r+0x4c0>
    36c8:	f8db 1000 	ldr.w	r1, [fp]
    36cc:	9301      	str	r3, [sp, #4]
    36ce:	3101      	adds	r1, #1
    36d0:	bf1b      	ittet	ne
    36d2:	eba2 010a 	subne.w	r1, r2, sl
    36d6:	1809      	addne	r1, r1, r0
    36d8:	f8cb 2000 	streq.w	r2, [fp]
    36dc:	6019      	strne	r1, [r3, #0]
    36de:	f012 0b07 	ands.w	fp, r2, #7
    36e2:	f000 8117 	beq.w	3914 <_malloc_r+0x470>
    36e6:	f1cb 0108 	rsb	r1, fp, #8
    36ea:	440a      	add	r2, r1
    36ec:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
    36f0:	4490      	add	r8, r2
    36f2:	3108      	adds	r1, #8
    36f4:	eba1 0108 	sub.w	r1, r1, r8
    36f8:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    36fc:	4651      	mov	r1, sl
    36fe:	4620      	mov	r0, r4
    3700:	9200      	str	r2, [sp, #0]
    3702:	f001 fe81 	bl	5408 <_sbrk_r>
    3706:	1c42      	adds	r2, r0, #1
    3708:	e9dd 2300 	ldrd	r2, r3, [sp]
    370c:	f000 814f 	beq.w	39ae <_malloc_r+0x50a>
    3710:	1a80      	subs	r0, r0, r2
    3712:	eb00 080a 	add.w	r8, r0, sl
    3716:	6819      	ldr	r1, [r3, #0]
    3718:	60ba      	str	r2, [r7, #8]
    371a:	f048 0001 	orr.w	r0, r8, #1
    371e:	4451      	add	r1, sl
    3720:	42bd      	cmp	r5, r7
    3722:	6050      	str	r0, [r2, #4]
    3724:	6019      	str	r1, [r3, #0]
    3726:	f000 8129 	beq.w	397c <_malloc_r+0x4d8>
    372a:	f1b9 0f0f 	cmp.w	r9, #15
    372e:	f240 8127 	bls.w	3980 <_malloc_r+0x4dc>
    3732:	6868      	ldr	r0, [r5, #4]
    3734:	f1a9 0c0c 	sub.w	ip, r9, #12
    3738:	f02c 0c07 	bic.w	ip, ip, #7
    373c:	f000 0001 	and.w	r0, r0, #1
    3740:	ea40 000c 	orr.w	r0, r0, ip
    3744:	6068      	str	r0, [r5, #4]
    3746:	f04f 0e05 	mov.w	lr, #5
    374a:	eb05 000c 	add.w	r0, r5, ip
    374e:	f1bc 0f0f 	cmp.w	ip, #15
    3752:	e9c0 ee01 	strd	lr, lr, [r0, #4]
    3756:	f200 8132 	bhi.w	39be <_malloc_r+0x51a>
    375a:	6850      	ldr	r0, [r2, #4]
    375c:	4615      	mov	r5, r2
    375e:	4b12      	ldr	r3, [pc, #72]	; (37a8 <_malloc_r+0x304>)
    3760:	681a      	ldr	r2, [r3, #0]
    3762:	428a      	cmp	r2, r1
    3764:	bf38      	it	cc
    3766:	6019      	strcc	r1, [r3, #0]
    3768:	4b10      	ldr	r3, [pc, #64]	; (37ac <_malloc_r+0x308>)
    376a:	681a      	ldr	r2, [r3, #0]
    376c:	428a      	cmp	r2, r1
    376e:	bf38      	it	cc
    3770:	6019      	strcc	r1, [r3, #0]
    3772:	e094      	b.n	389e <_malloc_r+0x3fa>
    3774:	19aa      	adds	r2, r5, r6
    3776:	f043 0301 	orr.w	r3, r3, #1
    377a:	f046 0601 	orr.w	r6, r6, #1
    377e:	606e      	str	r6, [r5, #4]
    3780:	4620      	mov	r0, r4
    3782:	60ba      	str	r2, [r7, #8]
    3784:	6053      	str	r3, [r2, #4]
    3786:	f000 f943 	bl	3a10 <__malloc_unlock>
    378a:	3508      	adds	r5, #8
    378c:	4628      	mov	r0, r5
    378e:	b003      	add	sp, #12
    3790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3794:	68d9      	ldr	r1, [r3, #12]
    3796:	441a      	add	r2, r3
    3798:	e6a1      	b.n	34de <_malloc_r+0x3a>
    379a:	bf00      	nop
    379c:	20007ba4 	.word	0x20007ba4
    37a0:	20008ae0 	.word	0x20008ae0
    37a4:	20008ab0 	.word	0x20008ab0
    37a8:	20008ad8 	.word	0x20008ad8
    37ac:	20008adc 	.word	0x20008adc
    37b0:	20007bac 	.word	0x20007bac
    37b4:	20007fac 	.word	0x20007fac
    37b8:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
    37bc:	ea4f 2352 	mov.w	r3, r2, lsr #9
    37c0:	d363      	bcc.n	388a <_malloc_r+0x3e6>
    37c2:	2b14      	cmp	r3, #20
    37c4:	f200 80b7 	bhi.w	3936 <_malloc_r+0x492>
    37c8:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    37cc:	00c9      	lsls	r1, r1, #3
    37ce:	335b      	adds	r3, #91	; 0x5b
    37d0:	eb07 0e01 	add.w	lr, r7, r1
    37d4:	5879      	ldr	r1, [r7, r1]
    37d6:	f1ae 0e08 	sub.w	lr, lr, #8
    37da:	458e      	cmp	lr, r1
    37dc:	f000 8091 	beq.w	3902 <_malloc_r+0x45e>
    37e0:	684b      	ldr	r3, [r1, #4]
    37e2:	f023 0303 	bic.w	r3, r3, #3
    37e6:	4293      	cmp	r3, r2
    37e8:	d902      	bls.n	37f0 <_malloc_r+0x34c>
    37ea:	6889      	ldr	r1, [r1, #8]
    37ec:	458e      	cmp	lr, r1
    37ee:	d1f7      	bne.n	37e0 <_malloc_r+0x33c>
    37f0:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    37f4:	687a      	ldr	r2, [r7, #4]
    37f6:	e9c5 1e02 	strd	r1, lr, [r5, #8]
    37fa:	f8ce 5008 	str.w	r5, [lr, #8]
    37fe:	60cd      	str	r5, [r1, #12]
    3800:	e6d6      	b.n	35b0 <_malloc_r+0x10c>
    3802:	2b14      	cmp	r3, #20
    3804:	d959      	bls.n	38ba <_malloc_r+0x416>
    3806:	2b54      	cmp	r3, #84	; 0x54
    3808:	f200 809d 	bhi.w	3946 <_malloc_r+0x4a2>
    380c:	0b33      	lsrs	r3, r6, #12
    380e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    3812:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
    3816:	00c3      	lsls	r3, r0, #3
    3818:	e68a      	b.n	3530 <_malloc_r+0x8c>
    381a:	f10e 0e01 	add.w	lr, lr, #1
    381e:	f01e 0f03 	tst.w	lr, #3
    3822:	f105 0508 	add.w	r5, r5, #8
    3826:	f47f aed5 	bne.w	35d4 <_malloc_r+0x130>
    382a:	e051      	b.n	38d0 <_malloc_r+0x42c>
    382c:	4442      	add	r2, r8
    382e:	4645      	mov	r5, r8
    3830:	6853      	ldr	r3, [r2, #4]
    3832:	f8d8 100c 	ldr.w	r1, [r8, #12]
    3836:	f043 0301 	orr.w	r3, r3, #1
    383a:	6053      	str	r3, [r2, #4]
    383c:	f855 3f08 	ldr.w	r3, [r5, #8]!
    3840:	4620      	mov	r0, r4
    3842:	60d9      	str	r1, [r3, #12]
    3844:	608b      	str	r3, [r1, #8]
    3846:	f000 f8e3 	bl	3a10 <__malloc_unlock>
    384a:	e6f3      	b.n	3634 <_malloc_r+0x190>
    384c:	08f0      	lsrs	r0, r6, #3
    384e:	f106 0208 	add.w	r2, r6, #8
    3852:	e637      	b.n	34c4 <_malloc_r+0x20>
    3854:	442a      	add	r2, r5
    3856:	4620      	mov	r0, r4
    3858:	6853      	ldr	r3, [r2, #4]
    385a:	f043 0301 	orr.w	r3, r3, #1
    385e:	6053      	str	r3, [r2, #4]
    3860:	3508      	adds	r5, #8
    3862:	f000 f8d5 	bl	3a10 <__malloc_unlock>
    3866:	e6e5      	b.n	3634 <_malloc_r+0x190>
    3868:	19a9      	adds	r1, r5, r6
    386a:	4620      	mov	r0, r4
    386c:	f046 0601 	orr.w	r6, r6, #1
    3870:	f043 0401 	orr.w	r4, r3, #1
    3874:	606e      	str	r6, [r5, #4]
    3876:	e9c7 1104 	strd	r1, r1, [r7, #16]
    387a:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    387e:	604c      	str	r4, [r1, #4]
    3880:	50ab      	str	r3, [r5, r2]
    3882:	f000 f8c5 	bl	3a10 <__malloc_unlock>
    3886:	3508      	adds	r5, #8
    3888:	e6d4      	b.n	3634 <_malloc_r+0x190>
    388a:	0993      	lsrs	r3, r2, #6
    388c:	f103 0139 	add.w	r1, r3, #57	; 0x39
    3890:	00c9      	lsls	r1, r1, #3
    3892:	3338      	adds	r3, #56	; 0x38
    3894:	e79c      	b.n	37d0 <_malloc_r+0x32c>
    3896:	42bd      	cmp	r5, r7
    3898:	d05f      	beq.n	395a <_malloc_r+0x4b6>
    389a:	68bd      	ldr	r5, [r7, #8]
    389c:	6868      	ldr	r0, [r5, #4]
    389e:	f020 0803 	bic.w	r8, r0, #3
    38a2:	4546      	cmp	r6, r8
    38a4:	eba8 0306 	sub.w	r3, r8, r6
    38a8:	d802      	bhi.n	38b0 <_malloc_r+0x40c>
    38aa:	2b0f      	cmp	r3, #15
    38ac:	f73f af62 	bgt.w	3774 <_malloc_r+0x2d0>
    38b0:	4620      	mov	r0, r4
    38b2:	f000 f8ad 	bl	3a10 <__malloc_unlock>
    38b6:	2500      	movs	r5, #0
    38b8:	e6bc      	b.n	3634 <_malloc_r+0x190>
    38ba:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    38be:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
    38c2:	00c3      	lsls	r3, r0, #3
    38c4:	e634      	b.n	3530 <_malloc_r+0x8c>
    38c6:	f859 3908 	ldr.w	r3, [r9], #-8
    38ca:	454b      	cmp	r3, r9
    38cc:	f040 8096 	bne.w	39fc <_malloc_r+0x558>
    38d0:	f010 0f03 	tst.w	r0, #3
    38d4:	f100 30ff 	add.w	r0, r0, #4294967295
    38d8:	d1f5      	bne.n	38c6 <_malloc_r+0x422>
    38da:	687b      	ldr	r3, [r7, #4]
    38dc:	ea23 0301 	bic.w	r3, r3, r1
    38e0:	607b      	str	r3, [r7, #4]
    38e2:	0049      	lsls	r1, r1, #1
    38e4:	4299      	cmp	r1, r3
    38e6:	f63f aec0 	bhi.w	366a <_malloc_r+0x1c6>
    38ea:	b919      	cbnz	r1, 38f4 <_malloc_r+0x450>
    38ec:	e6bd      	b.n	366a <_malloc_r+0x1c6>
    38ee:	0049      	lsls	r1, r1, #1
    38f0:	f10e 0e04 	add.w	lr, lr, #4
    38f4:	4219      	tst	r1, r3
    38f6:	d0fa      	beq.n	38ee <_malloc_r+0x44a>
    38f8:	4670      	mov	r0, lr
    38fa:	e667      	b.n	35cc <_malloc_r+0x128>
    38fc:	f103 0810 	add.w	r8, r3, #16
    3900:	e6d0      	b.n	36a4 <_malloc_r+0x200>
    3902:	109a      	asrs	r2, r3, #2
    3904:	f04f 0801 	mov.w	r8, #1
    3908:	687b      	ldr	r3, [r7, #4]
    390a:	fa08 f202 	lsl.w	r2, r8, r2
    390e:	431a      	orrs	r2, r3
    3910:	607a      	str	r2, [r7, #4]
    3912:	e770      	b.n	37f6 <_malloc_r+0x352>
    3914:	eb02 0108 	add.w	r1, r2, r8
    3918:	4249      	negs	r1, r1
    391a:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    391e:	4651      	mov	r1, sl
    3920:	4620      	mov	r0, r4
    3922:	9200      	str	r2, [sp, #0]
    3924:	f001 fd70 	bl	5408 <_sbrk_r>
    3928:	1c43      	adds	r3, r0, #1
    392a:	e9dd 2300 	ldrd	r2, r3, [sp]
    392e:	f47f aeef 	bne.w	3710 <_malloc_r+0x26c>
    3932:	46da      	mov	sl, fp
    3934:	e6ef      	b.n	3716 <_malloc_r+0x272>
    3936:	2b54      	cmp	r3, #84	; 0x54
    3938:	d825      	bhi.n	3986 <_malloc_r+0x4e2>
    393a:	0b13      	lsrs	r3, r2, #12
    393c:	f103 016f 	add.w	r1, r3, #111	; 0x6f
    3940:	00c9      	lsls	r1, r1, #3
    3942:	336e      	adds	r3, #110	; 0x6e
    3944:	e744      	b.n	37d0 <_malloc_r+0x32c>
    3946:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    394a:	d825      	bhi.n	3998 <_malloc_r+0x4f4>
    394c:	0bf3      	lsrs	r3, r6, #15
    394e:	f103 0078 	add.w	r0, r3, #120	; 0x78
    3952:	f103 0c77 	add.w	ip, r3, #119	; 0x77
    3956:	00c3      	lsls	r3, r0, #3
    3958:	e5ea      	b.n	3530 <_malloc_r+0x8c>
    395a:	4b29      	ldr	r3, [pc, #164]	; (3a00 <_malloc_r+0x55c>)
    395c:	6818      	ldr	r0, [r3, #0]
    395e:	4440      	add	r0, r8
    3960:	6018      	str	r0, [r3, #0]
    3962:	e6b1      	b.n	36c8 <_malloc_r+0x224>
    3964:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
    3968:	f1bc 0f00 	cmp.w	ip, #0
    396c:	f47f aeac 	bne.w	36c8 <_malloc_r+0x224>
    3970:	68bd      	ldr	r5, [r7, #8]
    3972:	44c8      	add	r8, r9
    3974:	f048 0001 	orr.w	r0, r8, #1
    3978:	6068      	str	r0, [r5, #4]
    397a:	e6f0      	b.n	375e <_malloc_r+0x2ba>
    397c:	4615      	mov	r5, r2
    397e:	e6ee      	b.n	375e <_malloc_r+0x2ba>
    3980:	2301      	movs	r3, #1
    3982:	6053      	str	r3, [r2, #4]
    3984:	e794      	b.n	38b0 <_malloc_r+0x40c>
    3986:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    398a:	d823      	bhi.n	39d4 <_malloc_r+0x530>
    398c:	0bd3      	lsrs	r3, r2, #15
    398e:	f103 0178 	add.w	r1, r3, #120	; 0x78
    3992:	00c9      	lsls	r1, r1, #3
    3994:	3377      	adds	r3, #119	; 0x77
    3996:	e71b      	b.n	37d0 <_malloc_r+0x32c>
    3998:	f240 5254 	movw	r2, #1364	; 0x554
    399c:	4293      	cmp	r3, r2
    399e:	d823      	bhi.n	39e8 <_malloc_r+0x544>
    39a0:	0cb3      	lsrs	r3, r6, #18
    39a2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    39a6:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
    39aa:	00c3      	lsls	r3, r0, #3
    39ac:	e5c0      	b.n	3530 <_malloc_r+0x8c>
    39ae:	f1ab 0b08 	sub.w	fp, fp, #8
    39b2:	44d8      	add	r8, fp
    39b4:	eba8 0802 	sub.w	r8, r8, r2
    39b8:	f04f 0a00 	mov.w	sl, #0
    39bc:	e6ab      	b.n	3716 <_malloc_r+0x272>
    39be:	f105 0108 	add.w	r1, r5, #8
    39c2:	4620      	mov	r0, r4
    39c4:	9300      	str	r3, [sp, #0]
    39c6:	f001 ffc9 	bl	595c <_free_r>
    39ca:	68bd      	ldr	r5, [r7, #8]
    39cc:	9b00      	ldr	r3, [sp, #0]
    39ce:	6868      	ldr	r0, [r5, #4]
    39d0:	6819      	ldr	r1, [r3, #0]
    39d2:	e6c4      	b.n	375e <_malloc_r+0x2ba>
    39d4:	f240 5154 	movw	r1, #1364	; 0x554
    39d8:	428b      	cmp	r3, r1
    39da:	d80b      	bhi.n	39f4 <_malloc_r+0x550>
    39dc:	0c93      	lsrs	r3, r2, #18
    39de:	f103 017d 	add.w	r1, r3, #125	; 0x7d
    39e2:	00c9      	lsls	r1, r1, #3
    39e4:	337c      	adds	r3, #124	; 0x7c
    39e6:	e6f3      	b.n	37d0 <_malloc_r+0x32c>
    39e8:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    39ec:	207f      	movs	r0, #127	; 0x7f
    39ee:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
    39f2:	e59d      	b.n	3530 <_malloc_r+0x8c>
    39f4:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    39f8:	237e      	movs	r3, #126	; 0x7e
    39fa:	e6e9      	b.n	37d0 <_malloc_r+0x32c>
    39fc:	687b      	ldr	r3, [r7, #4]
    39fe:	e770      	b.n	38e2 <_malloc_r+0x43e>
    3a00:	20008ab0 	.word	0x20008ab0

00003a04 <__malloc_lock>:
    3a04:	4801      	ldr	r0, [pc, #4]	; (3a0c <__malloc_lock+0x8>)
    3a06:	f001 bd55 	b.w	54b4 <__retarget_lock_acquire_recursive>
    3a0a:	bf00      	nop
    3a0c:	20008aa8 	.word	0x20008aa8

00003a10 <__malloc_unlock>:
    3a10:	4801      	ldr	r0, [pc, #4]	; (3a18 <__malloc_unlock+0x8>)
    3a12:	f001 bd51 	b.w	54b8 <__retarget_lock_release_recursive>
    3a16:	bf00      	nop
    3a18:	20008aa8 	.word	0x20008aa8

00003a1c <realloc>:
    3a1c:	b410      	push	{r4}
    3a1e:	4c04      	ldr	r4, [pc, #16]	; (3a30 <realloc+0x14>)
    3a20:	4603      	mov	r3, r0
    3a22:	460a      	mov	r2, r1
    3a24:	6820      	ldr	r0, [r4, #0]
    3a26:	f85d 4b04 	ldr.w	r4, [sp], #4
    3a2a:	4619      	mov	r1, r3
    3a2c:	f000 b802 	b.w	3a34 <_realloc_r>
    3a30:	20007fc0 	.word	0x20007fc0

00003a34 <_realloc_r>:
    3a34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3a38:	4617      	mov	r7, r2
    3a3a:	2900      	cmp	r1, #0
    3a3c:	f000 8098 	beq.w	3b70 <_realloc_r+0x13c>
    3a40:	460c      	mov	r4, r1
    3a42:	f107 050b 	add.w	r5, r7, #11
    3a46:	4680      	mov	r8, r0
    3a48:	f7ff ffdc 	bl	3a04 <__malloc_lock>
    3a4c:	2d16      	cmp	r5, #22
    3a4e:	f854 1c04 	ldr.w	r1, [r4, #-4]
    3a52:	d85b      	bhi.n	3b0c <_realloc_r+0xd8>
    3a54:	2510      	movs	r5, #16
    3a56:	462a      	mov	r2, r5
    3a58:	42af      	cmp	r7, r5
    3a5a:	d85c      	bhi.n	3b16 <_realloc_r+0xe2>
    3a5c:	f021 0603 	bic.w	r6, r1, #3
    3a60:	4296      	cmp	r6, r2
    3a62:	f1a4 0908 	sub.w	r9, r4, #8
    3a66:	da62      	bge.n	3b2e <_realloc_r+0xfa>
    3a68:	4bbc      	ldr	r3, [pc, #752]	; (3d5c <_realloc_r+0x328>)
    3a6a:	f8d3 c008 	ldr.w	ip, [r3, #8]
    3a6e:	eb09 0006 	add.w	r0, r9, r6
    3a72:	4584      	cmp	ip, r0
    3a74:	f000 8097 	beq.w	3ba6 <_realloc_r+0x172>
    3a78:	f8d0 c004 	ldr.w	ip, [r0, #4]
    3a7c:	f02c 0301 	bic.w	r3, ip, #1
    3a80:	4403      	add	r3, r0
    3a82:	685b      	ldr	r3, [r3, #4]
    3a84:	07db      	lsls	r3, r3, #31
    3a86:	d468      	bmi.n	3b5a <_realloc_r+0x126>
    3a88:	f02c 0c03 	bic.w	ip, ip, #3
    3a8c:	eb06 030c 	add.w	r3, r6, ip
    3a90:	4293      	cmp	r3, r2
    3a92:	da47      	bge.n	3b24 <_realloc_r+0xf0>
    3a94:	07cb      	lsls	r3, r1, #31
    3a96:	d410      	bmi.n	3aba <_realloc_r+0x86>
    3a98:	f854 3c08 	ldr.w	r3, [r4, #-8]
    3a9c:	eba9 0a03 	sub.w	sl, r9, r3
    3aa0:	f8da 3004 	ldr.w	r3, [sl, #4]
    3aa4:	f023 0103 	bic.w	r1, r3, #3
    3aa8:	448c      	add	ip, r1
    3aaa:	44b4      	add	ip, r6
    3aac:	4594      	cmp	ip, r2
    3aae:	f280 8111 	bge.w	3cd4 <_realloc_r+0x2a0>
    3ab2:	1873      	adds	r3, r6, r1
    3ab4:	4293      	cmp	r3, r2
    3ab6:	f280 80e8 	bge.w	3c8a <_realloc_r+0x256>
    3aba:	4639      	mov	r1, r7
    3abc:	4640      	mov	r0, r8
    3abe:	f7ff fcf1 	bl	34a4 <_malloc_r>
    3ac2:	4607      	mov	r7, r0
    3ac4:	b1e0      	cbz	r0, 3b00 <_realloc_r+0xcc>
    3ac6:	f854 3c04 	ldr.w	r3, [r4, #-4]
    3aca:	f023 0301 	bic.w	r3, r3, #1
    3ace:	444b      	add	r3, r9
    3ad0:	f1a0 0208 	sub.w	r2, r0, #8
    3ad4:	4293      	cmp	r3, r2
    3ad6:	f000 80d2 	beq.w	3c7e <_realloc_r+0x24a>
    3ada:	1f32      	subs	r2, r6, #4
    3adc:	2a24      	cmp	r2, #36	; 0x24
    3ade:	f200 80f5 	bhi.w	3ccc <_realloc_r+0x298>
    3ae2:	2a13      	cmp	r2, #19
    3ae4:	f200 80ac 	bhi.w	3c40 <_realloc_r+0x20c>
    3ae8:	4603      	mov	r3, r0
    3aea:	4622      	mov	r2, r4
    3aec:	6811      	ldr	r1, [r2, #0]
    3aee:	6019      	str	r1, [r3, #0]
    3af0:	6851      	ldr	r1, [r2, #4]
    3af2:	6059      	str	r1, [r3, #4]
    3af4:	6892      	ldr	r2, [r2, #8]
    3af6:	609a      	str	r2, [r3, #8]
    3af8:	4621      	mov	r1, r4
    3afa:	4640      	mov	r0, r8
    3afc:	f001 ff2e 	bl	595c <_free_r>
    3b00:	4640      	mov	r0, r8
    3b02:	f7ff ff85 	bl	3a10 <__malloc_unlock>
    3b06:	4638      	mov	r0, r7
    3b08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3b0c:	f025 0507 	bic.w	r5, r5, #7
    3b10:	2d00      	cmp	r5, #0
    3b12:	462a      	mov	r2, r5
    3b14:	daa0      	bge.n	3a58 <_realloc_r+0x24>
    3b16:	230c      	movs	r3, #12
    3b18:	f8c8 3000 	str.w	r3, [r8]
    3b1c:	2700      	movs	r7, #0
    3b1e:	4638      	mov	r0, r7
    3b20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3b24:	461e      	mov	r6, r3
    3b26:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    3b2a:	60d3      	str	r3, [r2, #12]
    3b2c:	609a      	str	r2, [r3, #8]
    3b2e:	1b73      	subs	r3, r6, r5
    3b30:	2b0f      	cmp	r3, #15
    3b32:	d822      	bhi.n	3b7a <_realloc_r+0x146>
    3b34:	f8d9 3004 	ldr.w	r3, [r9, #4]
    3b38:	f003 0301 	and.w	r3, r3, #1
    3b3c:	4333      	orrs	r3, r6
    3b3e:	444e      	add	r6, r9
    3b40:	f8c9 3004 	str.w	r3, [r9, #4]
    3b44:	6873      	ldr	r3, [r6, #4]
    3b46:	f043 0301 	orr.w	r3, r3, #1
    3b4a:	6073      	str	r3, [r6, #4]
    3b4c:	4640      	mov	r0, r8
    3b4e:	4627      	mov	r7, r4
    3b50:	f7ff ff5e 	bl	3a10 <__malloc_unlock>
    3b54:	4638      	mov	r0, r7
    3b56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3b5a:	07c9      	lsls	r1, r1, #31
    3b5c:	d4ad      	bmi.n	3aba <_realloc_r+0x86>
    3b5e:	f854 3c08 	ldr.w	r3, [r4, #-8]
    3b62:	eba9 0a03 	sub.w	sl, r9, r3
    3b66:	f8da 1004 	ldr.w	r1, [sl, #4]
    3b6a:	f021 0103 	bic.w	r1, r1, #3
    3b6e:	e7a0      	b.n	3ab2 <_realloc_r+0x7e>
    3b70:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3b74:	4611      	mov	r1, r2
    3b76:	f7ff bc95 	b.w	34a4 <_malloc_r>
    3b7a:	f8d9 2004 	ldr.w	r2, [r9, #4]
    3b7e:	eb09 0105 	add.w	r1, r9, r5
    3b82:	f002 0201 	and.w	r2, r2, #1
    3b86:	444e      	add	r6, r9
    3b88:	f043 0301 	orr.w	r3, r3, #1
    3b8c:	432a      	orrs	r2, r5
    3b8e:	f8c9 2004 	str.w	r2, [r9, #4]
    3b92:	604b      	str	r3, [r1, #4]
    3b94:	6873      	ldr	r3, [r6, #4]
    3b96:	f043 0301 	orr.w	r3, r3, #1
    3b9a:	3108      	adds	r1, #8
    3b9c:	6073      	str	r3, [r6, #4]
    3b9e:	4640      	mov	r0, r8
    3ba0:	f001 fedc 	bl	595c <_free_r>
    3ba4:	e7d2      	b.n	3b4c <_realloc_r+0x118>
    3ba6:	f8dc 0004 	ldr.w	r0, [ip, #4]
    3baa:	f020 0b03 	bic.w	fp, r0, #3
    3bae:	eb06 0c0b 	add.w	ip, r6, fp
    3bb2:	f105 0010 	add.w	r0, r5, #16
    3bb6:	4584      	cmp	ip, r0
    3bb8:	da4d      	bge.n	3c56 <_realloc_r+0x222>
    3bba:	07c9      	lsls	r1, r1, #31
    3bbc:	f53f af7d 	bmi.w	3aba <_realloc_r+0x86>
    3bc0:	f854 1c08 	ldr.w	r1, [r4, #-8]
    3bc4:	eba9 0a01 	sub.w	sl, r9, r1
    3bc8:	f8da 1004 	ldr.w	r1, [sl, #4]
    3bcc:	f021 0103 	bic.w	r1, r1, #3
    3bd0:	448b      	add	fp, r1
    3bd2:	44b3      	add	fp, r6
    3bd4:	4558      	cmp	r0, fp
    3bd6:	f73f af6c 	bgt.w	3ab2 <_realloc_r+0x7e>
    3bda:	4657      	mov	r7, sl
    3bdc:	f8da 100c 	ldr.w	r1, [sl, #12]
    3be0:	f857 0f08 	ldr.w	r0, [r7, #8]!
    3be4:	1f32      	subs	r2, r6, #4
    3be6:	2a24      	cmp	r2, #36	; 0x24
    3be8:	60c1      	str	r1, [r0, #12]
    3bea:	6088      	str	r0, [r1, #8]
    3bec:	f200 80db 	bhi.w	3da6 <_realloc_r+0x372>
    3bf0:	2a13      	cmp	r2, #19
    3bf2:	f240 80d6 	bls.w	3da2 <_realloc_r+0x36e>
    3bf6:	6821      	ldr	r1, [r4, #0]
    3bf8:	f8ca 1008 	str.w	r1, [sl, #8]
    3bfc:	6861      	ldr	r1, [r4, #4]
    3bfe:	f8ca 100c 	str.w	r1, [sl, #12]
    3c02:	2a1b      	cmp	r2, #27
    3c04:	f200 80df 	bhi.w	3dc6 <_realloc_r+0x392>
    3c08:	3408      	adds	r4, #8
    3c0a:	f10a 0210 	add.w	r2, sl, #16
    3c0e:	6821      	ldr	r1, [r4, #0]
    3c10:	6011      	str	r1, [r2, #0]
    3c12:	6861      	ldr	r1, [r4, #4]
    3c14:	6051      	str	r1, [r2, #4]
    3c16:	68a1      	ldr	r1, [r4, #8]
    3c18:	6091      	str	r1, [r2, #8]
    3c1a:	eb0a 0105 	add.w	r1, sl, r5
    3c1e:	ebab 0205 	sub.w	r2, fp, r5
    3c22:	f042 0201 	orr.w	r2, r2, #1
    3c26:	6099      	str	r1, [r3, #8]
    3c28:	604a      	str	r2, [r1, #4]
    3c2a:	f8da 3004 	ldr.w	r3, [sl, #4]
    3c2e:	f003 0301 	and.w	r3, r3, #1
    3c32:	432b      	orrs	r3, r5
    3c34:	4640      	mov	r0, r8
    3c36:	f8ca 3004 	str.w	r3, [sl, #4]
    3c3a:	f7ff fee9 	bl	3a10 <__malloc_unlock>
    3c3e:	e76e      	b.n	3b1e <_realloc_r+0xea>
    3c40:	6823      	ldr	r3, [r4, #0]
    3c42:	6003      	str	r3, [r0, #0]
    3c44:	6863      	ldr	r3, [r4, #4]
    3c46:	6043      	str	r3, [r0, #4]
    3c48:	2a1b      	cmp	r2, #27
    3c4a:	d868      	bhi.n	3d1e <_realloc_r+0x2ea>
    3c4c:	f104 0208 	add.w	r2, r4, #8
    3c50:	f100 0308 	add.w	r3, r0, #8
    3c54:	e74a      	b.n	3aec <_realloc_r+0xb8>
    3c56:	eb09 0205 	add.w	r2, r9, r5
    3c5a:	609a      	str	r2, [r3, #8]
    3c5c:	ebac 0305 	sub.w	r3, ip, r5
    3c60:	f043 0301 	orr.w	r3, r3, #1
    3c64:	6053      	str	r3, [r2, #4]
    3c66:	f854 3c04 	ldr.w	r3, [r4, #-4]
    3c6a:	f003 0301 	and.w	r3, r3, #1
    3c6e:	432b      	orrs	r3, r5
    3c70:	4640      	mov	r0, r8
    3c72:	f844 3c04 	str.w	r3, [r4, #-4]
    3c76:	f7ff fecb 	bl	3a10 <__malloc_unlock>
    3c7a:	4627      	mov	r7, r4
    3c7c:	e74f      	b.n	3b1e <_realloc_r+0xea>
    3c7e:	f850 3c04 	ldr.w	r3, [r0, #-4]
    3c82:	f023 0303 	bic.w	r3, r3, #3
    3c86:	441e      	add	r6, r3
    3c88:	e751      	b.n	3b2e <_realloc_r+0xfa>
    3c8a:	4657      	mov	r7, sl
    3c8c:	f8da 100c 	ldr.w	r1, [sl, #12]
    3c90:	f857 0f08 	ldr.w	r0, [r7, #8]!
    3c94:	1f32      	subs	r2, r6, #4
    3c96:	2a24      	cmp	r2, #36	; 0x24
    3c98:	60c1      	str	r1, [r0, #12]
    3c9a:	6088      	str	r0, [r1, #8]
    3c9c:	d84c      	bhi.n	3d38 <_realloc_r+0x304>
    3c9e:	2a13      	cmp	r2, #19
    3ca0:	d948      	bls.n	3d34 <_realloc_r+0x300>
    3ca2:	6821      	ldr	r1, [r4, #0]
    3ca4:	f8ca 1008 	str.w	r1, [sl, #8]
    3ca8:	6861      	ldr	r1, [r4, #4]
    3caa:	f8ca 100c 	str.w	r1, [sl, #12]
    3cae:	2a1b      	cmp	r2, #27
    3cb0:	d856      	bhi.n	3d60 <_realloc_r+0x32c>
    3cb2:	3408      	adds	r4, #8
    3cb4:	f10a 0210 	add.w	r2, sl, #16
    3cb8:	461e      	mov	r6, r3
    3cba:	6823      	ldr	r3, [r4, #0]
    3cbc:	6013      	str	r3, [r2, #0]
    3cbe:	6863      	ldr	r3, [r4, #4]
    3cc0:	6053      	str	r3, [r2, #4]
    3cc2:	68a3      	ldr	r3, [r4, #8]
    3cc4:	6093      	str	r3, [r2, #8]
    3cc6:	46d1      	mov	r9, sl
    3cc8:	463c      	mov	r4, r7
    3cca:	e730      	b.n	3b2e <_realloc_r+0xfa>
    3ccc:	4621      	mov	r1, r4
    3cce:	f001 fa11 	bl	50f4 <memmove>
    3cd2:	e711      	b.n	3af8 <_realloc_r+0xc4>
    3cd4:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
    3cd8:	4657      	mov	r7, sl
    3cda:	60cb      	str	r3, [r1, #12]
    3cdc:	6099      	str	r1, [r3, #8]
    3cde:	f857 1f08 	ldr.w	r1, [r7, #8]!
    3ce2:	f8da 300c 	ldr.w	r3, [sl, #12]
    3ce6:	60cb      	str	r3, [r1, #12]
    3ce8:	1f32      	subs	r2, r6, #4
    3cea:	2a24      	cmp	r2, #36	; 0x24
    3cec:	6099      	str	r1, [r3, #8]
    3cee:	d82d      	bhi.n	3d4c <_realloc_r+0x318>
    3cf0:	2a13      	cmp	r2, #19
    3cf2:	d929      	bls.n	3d48 <_realloc_r+0x314>
    3cf4:	6823      	ldr	r3, [r4, #0]
    3cf6:	f8ca 3008 	str.w	r3, [sl, #8]
    3cfa:	6863      	ldr	r3, [r4, #4]
    3cfc:	f8ca 300c 	str.w	r3, [sl, #12]
    3d00:	2a1b      	cmp	r2, #27
    3d02:	d842      	bhi.n	3d8a <_realloc_r+0x356>
    3d04:	3408      	adds	r4, #8
    3d06:	f10a 0310 	add.w	r3, sl, #16
    3d0a:	6822      	ldr	r2, [r4, #0]
    3d0c:	601a      	str	r2, [r3, #0]
    3d0e:	6862      	ldr	r2, [r4, #4]
    3d10:	605a      	str	r2, [r3, #4]
    3d12:	68a2      	ldr	r2, [r4, #8]
    3d14:	609a      	str	r2, [r3, #8]
    3d16:	4666      	mov	r6, ip
    3d18:	46d1      	mov	r9, sl
    3d1a:	463c      	mov	r4, r7
    3d1c:	e707      	b.n	3b2e <_realloc_r+0xfa>
    3d1e:	68a3      	ldr	r3, [r4, #8]
    3d20:	6083      	str	r3, [r0, #8]
    3d22:	68e3      	ldr	r3, [r4, #12]
    3d24:	60c3      	str	r3, [r0, #12]
    3d26:	2a24      	cmp	r2, #36	; 0x24
    3d28:	d026      	beq.n	3d78 <_realloc_r+0x344>
    3d2a:	f104 0210 	add.w	r2, r4, #16
    3d2e:	f100 0310 	add.w	r3, r0, #16
    3d32:	e6db      	b.n	3aec <_realloc_r+0xb8>
    3d34:	463a      	mov	r2, r7
    3d36:	e7bf      	b.n	3cb8 <_realloc_r+0x284>
    3d38:	4621      	mov	r1, r4
    3d3a:	4638      	mov	r0, r7
    3d3c:	461e      	mov	r6, r3
    3d3e:	46d1      	mov	r9, sl
    3d40:	f001 f9d8 	bl	50f4 <memmove>
    3d44:	463c      	mov	r4, r7
    3d46:	e6f2      	b.n	3b2e <_realloc_r+0xfa>
    3d48:	463b      	mov	r3, r7
    3d4a:	e7de      	b.n	3d0a <_realloc_r+0x2d6>
    3d4c:	4621      	mov	r1, r4
    3d4e:	4638      	mov	r0, r7
    3d50:	4666      	mov	r6, ip
    3d52:	46d1      	mov	r9, sl
    3d54:	f001 f9ce 	bl	50f4 <memmove>
    3d58:	463c      	mov	r4, r7
    3d5a:	e6e8      	b.n	3b2e <_realloc_r+0xfa>
    3d5c:	20007ba4 	.word	0x20007ba4
    3d60:	68a1      	ldr	r1, [r4, #8]
    3d62:	f8ca 1010 	str.w	r1, [sl, #16]
    3d66:	68e1      	ldr	r1, [r4, #12]
    3d68:	f8ca 1014 	str.w	r1, [sl, #20]
    3d6c:	2a24      	cmp	r2, #36	; 0x24
    3d6e:	d020      	beq.n	3db2 <_realloc_r+0x37e>
    3d70:	3410      	adds	r4, #16
    3d72:	f10a 0218 	add.w	r2, sl, #24
    3d76:	e79f      	b.n	3cb8 <_realloc_r+0x284>
    3d78:	6923      	ldr	r3, [r4, #16]
    3d7a:	6103      	str	r3, [r0, #16]
    3d7c:	6961      	ldr	r1, [r4, #20]
    3d7e:	6141      	str	r1, [r0, #20]
    3d80:	f104 0218 	add.w	r2, r4, #24
    3d84:	f100 0318 	add.w	r3, r0, #24
    3d88:	e6b0      	b.n	3aec <_realloc_r+0xb8>
    3d8a:	68a3      	ldr	r3, [r4, #8]
    3d8c:	f8ca 3010 	str.w	r3, [sl, #16]
    3d90:	68e3      	ldr	r3, [r4, #12]
    3d92:	f8ca 3014 	str.w	r3, [sl, #20]
    3d96:	2a24      	cmp	r2, #36	; 0x24
    3d98:	d021      	beq.n	3dde <_realloc_r+0x3aa>
    3d9a:	3410      	adds	r4, #16
    3d9c:	f10a 0318 	add.w	r3, sl, #24
    3da0:	e7b3      	b.n	3d0a <_realloc_r+0x2d6>
    3da2:	463a      	mov	r2, r7
    3da4:	e733      	b.n	3c0e <_realloc_r+0x1da>
    3da6:	4621      	mov	r1, r4
    3da8:	4638      	mov	r0, r7
    3daa:	f001 f9a3 	bl	50f4 <memmove>
    3dae:	4b16      	ldr	r3, [pc, #88]	; (3e08 <_realloc_r+0x3d4>)
    3db0:	e733      	b.n	3c1a <_realloc_r+0x1e6>
    3db2:	6922      	ldr	r2, [r4, #16]
    3db4:	f8ca 2018 	str.w	r2, [sl, #24]
    3db8:	6962      	ldr	r2, [r4, #20]
    3dba:	f8ca 201c 	str.w	r2, [sl, #28]
    3dbe:	3418      	adds	r4, #24
    3dc0:	f10a 0220 	add.w	r2, sl, #32
    3dc4:	e778      	b.n	3cb8 <_realloc_r+0x284>
    3dc6:	68a1      	ldr	r1, [r4, #8]
    3dc8:	f8ca 1010 	str.w	r1, [sl, #16]
    3dcc:	68e1      	ldr	r1, [r4, #12]
    3dce:	f8ca 1014 	str.w	r1, [sl, #20]
    3dd2:	2a24      	cmp	r2, #36	; 0x24
    3dd4:	d00d      	beq.n	3df2 <_realloc_r+0x3be>
    3dd6:	3410      	adds	r4, #16
    3dd8:	f10a 0218 	add.w	r2, sl, #24
    3ddc:	e717      	b.n	3c0e <_realloc_r+0x1da>
    3dde:	6923      	ldr	r3, [r4, #16]
    3de0:	f8ca 3018 	str.w	r3, [sl, #24]
    3de4:	6963      	ldr	r3, [r4, #20]
    3de6:	f8ca 301c 	str.w	r3, [sl, #28]
    3dea:	3418      	adds	r4, #24
    3dec:	f10a 0320 	add.w	r3, sl, #32
    3df0:	e78b      	b.n	3d0a <_realloc_r+0x2d6>
    3df2:	6922      	ldr	r2, [r4, #16]
    3df4:	f8ca 2018 	str.w	r2, [sl, #24]
    3df8:	6962      	ldr	r2, [r4, #20]
    3dfa:	f8ca 201c 	str.w	r2, [sl, #28]
    3dfe:	3418      	adds	r4, #24
    3e00:	f10a 0220 	add.w	r2, sl, #32
    3e04:	e703      	b.n	3c0e <_realloc_r+0x1da>
    3e06:	bf00      	nop
    3e08:	20007ba4 	.word	0x20007ba4
    3e0c:	00000000 	.word	0x00000000

00003e10 <_strtod_l>:
    3e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3e14:	ed2d 8b10 	vpush	{d8-d15}
    3e18:	b097      	sub	sp, #92	; 0x5c
    3e1a:	468a      	mov	sl, r1
    3e1c:	2100      	movs	r1, #0
    3e1e:	9207      	str	r2, [sp, #28]
    3e20:	9112      	str	r1, [sp, #72]	; 0x48
    3e22:	2200      	movs	r2, #0
    3e24:	2100      	movs	r1, #0
    3e26:	e9cd 1204 	strd	r1, r2, [sp, #16]
    3e2a:	4680      	mov	r8, r0
    3e2c:	4651      	mov	r1, sl
    3e2e:	9111      	str	r1, [sp, #68]	; 0x44
    3e30:	460f      	mov	r7, r1
    3e32:	f811 2b01 	ldrb.w	r2, [r1], #1
    3e36:	2a2d      	cmp	r2, #45	; 0x2d
    3e38:	d85e      	bhi.n	3ef8 <_strtod_l+0xe8>
    3e3a:	a001      	add	r0, pc, #4	; (adr r0, 3e40 <_strtod_l+0x30>)
    3e3c:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
    3e40:	00003fe1 	.word	0x00003fe1
    3e44:	00003ef9 	.word	0x00003ef9
    3e48:	00003ef9 	.word	0x00003ef9
    3e4c:	00003ef9 	.word	0x00003ef9
    3e50:	00003ef9 	.word	0x00003ef9
    3e54:	00003ef9 	.word	0x00003ef9
    3e58:	00003ef9 	.word	0x00003ef9
    3e5c:	00003ef9 	.word	0x00003ef9
    3e60:	00003ef9 	.word	0x00003ef9
    3e64:	00003e2f 	.word	0x00003e2f
    3e68:	00003e2f 	.word	0x00003e2f
    3e6c:	00003e2f 	.word	0x00003e2f
    3e70:	00003e2f 	.word	0x00003e2f
    3e74:	00003e2f 	.word	0x00003e2f
    3e78:	00003ef9 	.word	0x00003ef9
    3e7c:	00003ef9 	.word	0x00003ef9
    3e80:	00003ef9 	.word	0x00003ef9
    3e84:	00003ef9 	.word	0x00003ef9
    3e88:	00003ef9 	.word	0x00003ef9
    3e8c:	00003ef9 	.word	0x00003ef9
    3e90:	00003ef9 	.word	0x00003ef9
    3e94:	00003ef9 	.word	0x00003ef9
    3e98:	00003ef9 	.word	0x00003ef9
    3e9c:	00003ef9 	.word	0x00003ef9
    3ea0:	00003ef9 	.word	0x00003ef9
    3ea4:	00003ef9 	.word	0x00003ef9
    3ea8:	00003ef9 	.word	0x00003ef9
    3eac:	00003ef9 	.word	0x00003ef9
    3eb0:	00003ef9 	.word	0x00003ef9
    3eb4:	00003ef9 	.word	0x00003ef9
    3eb8:	00003ef9 	.word	0x00003ef9
    3ebc:	00003ef9 	.word	0x00003ef9
    3ec0:	00003e2f 	.word	0x00003e2f
    3ec4:	00003ef9 	.word	0x00003ef9
    3ec8:	00003ef9 	.word	0x00003ef9
    3ecc:	00003ef9 	.word	0x00003ef9
    3ed0:	00003ef9 	.word	0x00003ef9
    3ed4:	00003ef9 	.word	0x00003ef9
    3ed8:	00003ef9 	.word	0x00003ef9
    3edc:	00003ef9 	.word	0x00003ef9
    3ee0:	00003ef9 	.word	0x00003ef9
    3ee4:	00003ef9 	.word	0x00003ef9
    3ee8:	00003ef9 	.word	0x00003ef9
    3eec:	0000461b 	.word	0x0000461b
    3ef0:	00003ef9 	.word	0x00003ef9
    3ef4:	00004607 	.word	0x00004607
    3ef8:	2100      	movs	r1, #0
    3efa:	9109      	str	r1, [sp, #36]	; 0x24
    3efc:	2a30      	cmp	r2, #48	; 0x30
    3efe:	d07d      	beq.n	3ffc <_strtod_l+0x1ec>
    3f00:	2300      	movs	r3, #0
    3f02:	9308      	str	r3, [sp, #32]
    3f04:	2a2f      	cmp	r2, #47	; 0x2f
    3f06:	4614      	mov	r4, r2
    3f08:	f240 84cd 	bls.w	48a6 <_strtod_l+0xa96>
    3f0c:	f04f 0900 	mov.w	r9, #0
    3f10:	4638      	mov	r0, r7
    3f12:	464e      	mov	r6, r9
    3f14:	464d      	mov	r5, r9
    3f16:	e012      	b.n	3f3e <_strtod_l+0x12e>
    3f18:	3001      	adds	r0, #1
    3f1a:	2d08      	cmp	r5, #8
    3f1c:	9011      	str	r0, [sp, #68]	; 0x44
    3f1e:	bfc8      	it	gt
    3f20:	eb09 0989 	addgt.w	r9, r9, r9, lsl #2
    3f24:	7804      	ldrb	r4, [r0, #0]
    3f26:	bfc6      	itte	gt
    3f28:	eb02 0249 	addgt.w	r2, r2, r9, lsl #1
    3f2c:	f1a2 0930 	subgt.w	r9, r2, #48	; 0x30
    3f30:	f1a3 0630 	suble.w	r6, r3, #48	; 0x30
    3f34:	2c2f      	cmp	r4, #47	; 0x2f
    3f36:	f105 0501 	add.w	r5, r5, #1
    3f3a:	4622      	mov	r2, r4
    3f3c:	dd6f      	ble.n	401e <_strtod_l+0x20e>
    3f3e:	eb06 0386 	add.w	r3, r6, r6, lsl #2
    3f42:	2c39      	cmp	r4, #57	; 0x39
    3f44:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    3f48:	dde6      	ble.n	3f18 <_strtod_l+0x108>
    3f4a:	499f      	ldr	r1, [pc, #636]	; (41c8 <_strtod_l+0x3b8>)
    3f4c:	2201      	movs	r2, #1
    3f4e:	f001 f99f 	bl	5290 <strncmp>
    3f52:	2800      	cmp	r0, #0
    3f54:	d137      	bne.n	3fc6 <_strtod_l+0x1b6>
    3f56:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3f58:	461a      	mov	r2, r3
    3f5a:	3301      	adds	r3, #1
    3f5c:	9311      	str	r3, [sp, #68]	; 0x44
    3f5e:	7854      	ldrb	r4, [r2, #1]
    3f60:	2d00      	cmp	r5, #0
    3f62:	f040 8543 	bne.w	49ec <_strtod_l+0xbdc>
    3f66:	2c30      	cmp	r4, #48	; 0x30
    3f68:	f040 8524 	bne.w	49b4 <_strtod_l+0xba4>
    3f6c:	f1c3 0201 	rsb	r2, r3, #1
    3f70:	1898      	adds	r0, r3, r2
    3f72:	3301      	adds	r3, #1
    3f74:	9311      	str	r3, [sp, #68]	; 0x44
    3f76:	781c      	ldrb	r4, [r3, #0]
    3f78:	2c30      	cmp	r4, #48	; 0x30
    3f7a:	d0f9      	beq.n	3f70 <_strtod_l+0x160>
    3f7c:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
    3f80:	2b08      	cmp	r3, #8
    3f82:	f200 8301 	bhi.w	4588 <_strtod_l+0x778>
    3f86:	9f11      	ldr	r7, [sp, #68]	; 0x44
    3f88:	1c43      	adds	r3, r0, #1
    3f8a:	f1a4 0b30 	sub.w	fp, r4, #48	; 0x30
    3f8e:	930b      	str	r3, [sp, #44]	; 0x2c
    3f90:	2501      	movs	r5, #1
    3f92:	46bc      	mov	ip, r7
    3f94:	f04f 0e00 	mov.w	lr, #0
    3f98:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    3f9c:	eb0b 0646 	add.w	r6, fp, r6, lsl #1
    3fa0:	2000      	movs	r0, #0
    3fa2:	f10c 0301 	add.w	r3, ip, #1
    3fa6:	9311      	str	r3, [sp, #68]	; 0x44
    3fa8:	f89c 4001 	ldrb.w	r4, [ip, #1]
    3fac:	f1a4 0130 	sub.w	r1, r4, #48	; 0x30
    3fb0:	2909      	cmp	r1, #9
    3fb2:	f200 82bb 	bhi.w	452c <_strtod_l+0x71c>
    3fb6:	3001      	adds	r0, #1
    3fb8:	468b      	mov	fp, r1
    3fba:	2900      	cmp	r1, #0
    3fbc:	f040 844f 	bne.w	485e <_strtod_l+0xa4e>
    3fc0:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
    3fc4:	e7ed      	b.n	3fa2 <_strtod_l+0x192>
    3fc6:	2000      	movs	r0, #0
    3fc8:	2c65      	cmp	r4, #101	; 0x65
    3fca:	46ae      	mov	lr, r5
    3fcc:	900b      	str	r0, [sp, #44]	; 0x2c
    3fce:	4684      	mov	ip, r0
    3fd0:	d001      	beq.n	3fd6 <_strtod_l+0x1c6>
    3fd2:	2c45      	cmp	r4, #69	; 0x45
    3fd4:	d130      	bne.n	4038 <_strtod_l+0x228>
    3fd6:	2d00      	cmp	r5, #0
    3fd8:	d16b      	bne.n	40b2 <_strtod_l+0x2a2>
    3fda:	9b08      	ldr	r3, [sp, #32]
    3fdc:	4303      	orrs	r3, r0
    3fde:	d167      	bne.n	40b0 <_strtod_l+0x2a0>
    3fe0:	9b07      	ldr	r3, [sp, #28]
    3fe2:	ed9f 8b77 	vldr	d8, [pc, #476]	; 41c0 <_strtod_l+0x3b0>
    3fe6:	b113      	cbz	r3, 3fee <_strtod_l+0x1de>
    3fe8:	9b07      	ldr	r3, [sp, #28]
    3fea:	f8c3 a000 	str.w	sl, [r3]
    3fee:	eeb0 0b48 	vmov.f64	d0, d8
    3ff2:	b017      	add	sp, #92	; 0x5c
    3ff4:	ecbd 8b10 	vpop	{d8-d15}
    3ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3ffc:	787a      	ldrb	r2, [r7, #1]
    3ffe:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    4002:	2a58      	cmp	r2, #88	; 0x58
    4004:	f000 840c 	beq.w	4820 <_strtod_l+0xa10>
    4008:	3701      	adds	r7, #1
    400a:	9711      	str	r7, [sp, #68]	; 0x44
    400c:	783a      	ldrb	r2, [r7, #0]
    400e:	2a30      	cmp	r2, #48	; 0x30
    4010:	d0fa      	beq.n	4008 <_strtod_l+0x1f8>
    4012:	2a00      	cmp	r2, #0
    4014:	f000 80b7 	beq.w	4186 <_strtod_l+0x376>
    4018:	2301      	movs	r3, #1
    401a:	9308      	str	r3, [sp, #32]
    401c:	e772      	b.n	3f04 <_strtod_l+0xf4>
    401e:	496a      	ldr	r1, [pc, #424]	; (41c8 <_strtod_l+0x3b8>)
    4020:	2201      	movs	r2, #1
    4022:	f001 f935 	bl	5290 <strncmp>
    4026:	2800      	cmp	r0, #0
    4028:	f000 80c0 	beq.w	41ac <_strtod_l+0x39c>
    402c:	46ae      	mov	lr, r5
    402e:	f04f 0c00 	mov.w	ip, #0
    4032:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
    4036:	4660      	mov	r0, ip
    4038:	f04f 0b00 	mov.w	fp, #0
    403c:	2d00      	cmp	r5, #0
    403e:	d07e      	beq.n	413e <_strtod_l+0x32e>
    4040:	ee07 6a90 	vmov	s15, r6
    4044:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4046:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    404a:	ebab 0303 	sub.w	r3, fp, r3
    404e:	f1be 0f00 	cmp.w	lr, #0
    4052:	bf08      	it	eq
    4054:	46ae      	moveq	lr, r5
    4056:	2d10      	cmp	r5, #16
    4058:	930a      	str	r3, [sp, #40]	; 0x28
    405a:	462b      	mov	r3, r5
    405c:	bfa8      	it	ge
    405e:	2310      	movge	r3, #16
    4060:	2d09      	cmp	r5, #9
    4062:	ed8d 7b04 	vstr	d7, [sp, #16]
    4066:	dd0c      	ble.n	4082 <_strtod_l+0x272>
    4068:	4a58      	ldr	r2, [pc, #352]	; (41cc <_strtod_l+0x3bc>)
    406a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    406e:	ed12 5b12 	vldr	d5, [r2, #-72]	; 0xffffffb8
    4072:	ee06 9a90 	vmov	s13, r9
    4076:	eeb8 6b66 	vcvt.f64.u32	d6, s13
    407a:	eea7 6b05 	vfma.f64	d6, d7, d5
    407e:	ed8d 6b04 	vstr	d6, [sp, #16]
    4082:	2d0f      	cmp	r5, #15
    4084:	f300 80a8 	bgt.w	41d8 <_strtod_l+0x3c8>
    4088:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    408a:	2a00      	cmp	r2, #0
    408c:	f000 83e4 	beq.w	4858 <_strtod_l+0xa48>
    4090:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4092:	f340 833c 	ble.w	470e <_strtod_l+0x8fe>
    4096:	2a16      	cmp	r2, #22
    4098:	f340 8498 	ble.w	49cc <_strtod_l+0xbbc>
    409c:	990a      	ldr	r1, [sp, #40]	; 0x28
    409e:	f1c5 0225 	rsb	r2, r5, #37	; 0x25
    40a2:	428a      	cmp	r2, r1
    40a4:	f280 84a6 	bge.w	49f4 <_strtod_l+0xbe4>
    40a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    40aa:	1aeb      	subs	r3, r5, r3
    40ac:	4413      	add	r3, r2
    40ae:	e099      	b.n	41e4 <_strtod_l+0x3d4>
    40b0:	2500      	movs	r5, #0
    40b2:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
    40b6:	f10a 0301 	add.w	r3, sl, #1
    40ba:	9311      	str	r3, [sp, #68]	; 0x44
    40bc:	f89a 4001 	ldrb.w	r4, [sl, #1]
    40c0:	2c2b      	cmp	r4, #43	; 0x2b
    40c2:	f000 825e 	beq.w	4582 <_strtod_l+0x772>
    40c6:	2c2d      	cmp	r4, #45	; 0x2d
    40c8:	f000 81f7 	beq.w	44ba <_strtod_l+0x6aa>
    40cc:	2300      	movs	r3, #0
    40ce:	930a      	str	r3, [sp, #40]	; 0x28
    40d0:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    40d4:	2b09      	cmp	r3, #9
    40d6:	f200 81eb 	bhi.w	44b0 <_strtod_l+0x6a0>
    40da:	2c30      	cmp	r4, #48	; 0x30
    40dc:	d105      	bne.n	40ea <_strtod_l+0x2da>
    40de:	9b11      	ldr	r3, [sp, #68]	; 0x44
    40e0:	3301      	adds	r3, #1
    40e2:	9311      	str	r3, [sp, #68]	; 0x44
    40e4:	781c      	ldrb	r4, [r3, #0]
    40e6:	2c30      	cmp	r4, #48	; 0x30
    40e8:	d0fa      	beq.n	40e0 <_strtod_l+0x2d0>
    40ea:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
    40ee:	2b08      	cmp	r3, #8
    40f0:	d8a2      	bhi.n	4038 <_strtod_l+0x228>
    40f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
    40f4:	920c      	str	r2, [sp, #48]	; 0x30
    40f6:	1c53      	adds	r3, r2, #1
    40f8:	9311      	str	r3, [sp, #68]	; 0x44
    40fa:	f1a4 0b30 	sub.w	fp, r4, #48	; 0x30
    40fe:	7854      	ldrb	r4, [r2, #1]
    4100:	2c2f      	cmp	r4, #47	; 0x2f
    4102:	dc07      	bgt.n	4114 <_strtod_l+0x304>
    4104:	e3de      	b.n	48c4 <_strtod_l+0xab4>
    4106:	3301      	adds	r3, #1
    4108:	9311      	str	r3, [sp, #68]	; 0x44
    410a:	784c      	ldrb	r4, [r1, #1]
    410c:	2c2f      	cmp	r4, #47	; 0x2f
    410e:	f1a2 0b30 	sub.w	fp, r2, #48	; 0x30
    4112:	dd06      	ble.n	4122 <_strtod_l+0x312>
    4114:	eb0b 028b 	add.w	r2, fp, fp, lsl #2
    4118:	2c39      	cmp	r4, #57	; 0x39
    411a:	4619      	mov	r1, r3
    411c:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    4120:	ddf1      	ble.n	4106 <_strtod_l+0x2f6>
    4122:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4124:	1a9b      	subs	r3, r3, r2
    4126:	2b08      	cmp	r3, #8
    4128:	f340 83cc 	ble.w	48c4 <_strtod_l+0xab4>
    412c:	f644 6b1f 	movw	fp, #19999	; 0x4e1f
    4130:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4132:	2b00      	cmp	r3, #0
    4134:	d082      	beq.n	403c <_strtod_l+0x22c>
    4136:	f1cb 0b00 	rsb	fp, fp, #0
    413a:	2d00      	cmp	r5, #0
    413c:	d180      	bne.n	4040 <_strtod_l+0x230>
    413e:	9b08      	ldr	r3, [sp, #32]
    4140:	4303      	orrs	r3, r0
    4142:	d120      	bne.n	4186 <_strtod_l+0x376>
    4144:	f1bc 0f00 	cmp.w	ip, #0
    4148:	f47f af4a 	bne.w	3fe0 <_strtod_l+0x1d0>
    414c:	2c69      	cmp	r4, #105	; 0x69
    414e:	f000 83cf 	beq.w	48f0 <_strtod_l+0xae0>
    4152:	f300 82f3 	bgt.w	473c <_strtod_l+0x92c>
    4156:	2c49      	cmp	r4, #73	; 0x49
    4158:	f000 83ca 	beq.w	48f0 <_strtod_l+0xae0>
    415c:	2c4e      	cmp	r4, #78	; 0x4e
    415e:	f47f af3f 	bne.w	3fe0 <_strtod_l+0x1d0>
    4162:	491b      	ldr	r1, [pc, #108]	; (41d0 <_strtod_l+0x3c0>)
    4164:	a811      	add	r0, sp, #68	; 0x44
    4166:	f002 f81b 	bl	61a0 <__match>
    416a:	2800      	cmp	r0, #0
    416c:	f43f af38 	beq.w	3fe0 <_strtod_l+0x1d0>
    4170:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4172:	781b      	ldrb	r3, [r3, #0]
    4174:	2b28      	cmp	r3, #40	; 0x28
    4176:	f000 84f2 	beq.w	4b5e <_strtod_l+0xd4e>
    417a:	4816      	ldr	r0, [pc, #88]	; (41d4 <_strtod_l+0x3c4>)
    417c:	f001 fb90 	bl	58a0 <nan>
    4180:	eeb0 8b40 	vmov.f64	d8, d0
    4184:	e001      	b.n	418a <_strtod_l+0x37a>
    4186:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 41c0 <_strtod_l+0x3b0>
    418a:	9a07      	ldr	r2, [sp, #28]
    418c:	b10a      	cbz	r2, 4192 <_strtod_l+0x382>
    418e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4190:	6013      	str	r3, [r2, #0]
    4192:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4194:	2b00      	cmp	r3, #0
    4196:	f43f af2a 	beq.w	3fee <_strtod_l+0x1de>
    419a:	eeb1 8b48 	vneg.f64	d8, d8
    419e:	eeb0 0b48 	vmov.f64	d0, d8
    41a2:	b017      	add	sp, #92	; 0x5c
    41a4:	ecbd 8b10 	vpop	{d8-d15}
    41a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    41ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
    41ae:	900b      	str	r0, [sp, #44]	; 0x2c
    41b0:	1c5a      	adds	r2, r3, #1
    41b2:	9211      	str	r2, [sp, #68]	; 0x44
    41b4:	785c      	ldrb	r4, [r3, #1]
    41b6:	46ae      	mov	lr, r5
    41b8:	e6f8      	b.n	3fac <_strtod_l+0x19c>
    41ba:	bf00      	nop
    41bc:	f3af 8000 	nop.w
	...
    41c8:	200008b4 	.word	0x200008b4
    41cc:	200002a8 	.word	0x200002a8
    41d0:	200008c4 	.word	0x200008c4
    41d4:	20000520 	.word	0x20000520
    41d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    41da:	1aeb      	subs	r3, r5, r3
    41dc:	4413      	add	r3, r2
    41de:	2b00      	cmp	r3, #0
    41e0:	f340 82b0 	ble.w	4744 <_strtod_l+0x934>
    41e4:	f013 010f 	ands.w	r1, r3, #15
    41e8:	d00a      	beq.n	4200 <_strtod_l+0x3f0>
    41ea:	4ac3      	ldr	r2, [pc, #780]	; (44f8 <_strtod_l+0x6e8>)
    41ec:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    41f0:	ed9d 6b04 	vldr	d6, [sp, #16]
    41f4:	ed92 7b00 	vldr	d7, [r2]
    41f8:	ee27 7b06 	vmul.f64	d7, d7, d6
    41fc:	ed8d 7b04 	vstr	d7, [sp, #16]
    4200:	f033 020f 	bics.w	r2, r3, #15
    4204:	f040 8238 	bne.w	4678 <_strtod_l+0x868>
    4208:	2300      	movs	r3, #0
    420a:	9308      	str	r3, [sp, #32]
    420c:	9600      	str	r6, [sp, #0]
    420e:	462b      	mov	r3, r5
    4210:	4672      	mov	r2, lr
    4212:	4639      	mov	r1, r7
    4214:	4640      	mov	r0, r8
    4216:	f002 f94f 	bl	64b8 <__s2b>
    421a:	4681      	mov	r9, r0
    421c:	2800      	cmp	r0, #0
    421e:	f000 82e1 	beq.w	47e4 <_strtod_l+0x9d4>
    4222:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4224:	eba3 0b0b 	sub.w	fp, r3, fp
    4228:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    422a:	ed9f eba9 	vldr	d14, [pc, #676]	; 44d0 <_strtod_l+0x6c0>
    422e:	2b00      	cmp	r3, #0
    4230:	ed9f cba9 	vldr	d12, [pc, #676]	; 44d8 <_strtod_l+0x6c8>
    4234:	ed9f dbaa 	vldr	d13, [pc, #680]	; 44e0 <_strtod_l+0x6d0>
    4238:	ed9f bbab 	vldr	d11, [pc, #684]	; 44e8 <_strtod_l+0x6d8>
    423c:	bfb4      	ite	lt
    423e:	465a      	movlt	r2, fp
    4240:	2200      	movge	r2, #0
    4242:	f04f 0a00 	mov.w	sl, #0
    4246:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    424a:	920b      	str	r2, [sp, #44]	; 0x2c
    424c:	930c      	str	r3, [sp, #48]	; 0x30
    424e:	4654      	mov	r4, sl
    4250:	f8d9 1004 	ldr.w	r1, [r9, #4]
    4254:	4640      	mov	r0, r8
    4256:	f002 f8ad 	bl	63b4 <_Balloc>
    425a:	4606      	mov	r6, r0
    425c:	2800      	cmp	r0, #0
    425e:	f000 810e 	beq.w	447e <_strtod_l+0x66e>
    4262:	f8d9 2010 	ldr.w	r2, [r9, #16]
    4266:	ed9d 8b04 	vldr	d8, [sp, #16]
    426a:	3202      	adds	r2, #2
    426c:	0092      	lsls	r2, r2, #2
    426e:	f109 010c 	add.w	r1, r9, #12
    4272:	300c      	adds	r0, #12
    4274:	f7fd f9f0 	bl	1658 <memcpy>
    4278:	eeb0 0b48 	vmov.f64	d0, d8
    427c:	aa14      	add	r2, sp, #80	; 0x50
    427e:	a913      	add	r1, sp, #76	; 0x4c
    4280:	4640      	mov	r0, r8
    4282:	f002 fcd5 	bl	6c30 <__d2b>
    4286:	9012      	str	r0, [sp, #72]	; 0x48
    4288:	2800      	cmp	r0, #0
    428a:	f000 80e4 	beq.w	4456 <_strtod_l+0x646>
    428e:	2101      	movs	r1, #1
    4290:	4640      	mov	r0, r8
    4292:	f002 f9b9 	bl	6608 <__i2b>
    4296:	4604      	mov	r4, r0
    4298:	2800      	cmp	r0, #0
    429a:	f000 80f0 	beq.w	447e <_strtod_l+0x66e>
    429e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    42a0:	2a00      	cmp	r2, #0
    42a2:	f2c0 80de 	blt.w	4462 <_strtod_l+0x652>
    42a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    42a8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    42aa:	eb02 0b03 	add.w	fp, r2, r3
    42ae:	9b08      	ldr	r3, [sp, #32]
    42b0:	9d14      	ldr	r5, [sp, #80]	; 0x50
    42b2:	1ad2      	subs	r2, r2, r3
    42b4:	442a      	add	r2, r5
    42b6:	4b91      	ldr	r3, [pc, #580]	; (44fc <_strtod_l+0x6ec>)
    42b8:	3a01      	subs	r2, #1
    42ba:	429a      	cmp	r2, r3
    42bc:	f1c5 0536 	rsb	r5, r5, #54	; 0x36
    42c0:	f280 8098 	bge.w	43f4 <_strtod_l+0x5e4>
    42c4:	1a99      	subs	r1, r3, r2
    42c6:	291f      	cmp	r1, #31
    42c8:	eba5 0501 	sub.w	r5, r5, r1
    42cc:	f300 80e3 	bgt.w	4496 <_strtod_l+0x686>
    42d0:	2201      	movs	r2, #1
    42d2:	fa02 f301 	lsl.w	r3, r2, r1
    42d6:	930d      	str	r3, [sp, #52]	; 0x34
    42d8:	2300      	movs	r3, #0
    42da:	930e      	str	r3, [sp, #56]	; 0x38
    42dc:	442f      	add	r7, r5
    42de:	9b08      	ldr	r3, [sp, #32]
    42e0:	445d      	add	r5, fp
    42e2:	45ab      	cmp	fp, r5
    42e4:	465a      	mov	r2, fp
    42e6:	441f      	add	r7, r3
    42e8:	bfa8      	it	ge
    42ea:	462a      	movge	r2, r5
    42ec:	42ba      	cmp	r2, r7
    42ee:	bfa8      	it	ge
    42f0:	463a      	movge	r2, r7
    42f2:	2a00      	cmp	r2, #0
    42f4:	dd03      	ble.n	42fe <_strtod_l+0x4ee>
    42f6:	1aad      	subs	r5, r5, r2
    42f8:	1abf      	subs	r7, r7, r2
    42fa:	ebab 0b02 	sub.w	fp, fp, r2
    42fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4300:	2b00      	cmp	r3, #0
    4302:	f300 8088 	bgt.w	4416 <_strtod_l+0x606>
    4306:	2d00      	cmp	r5, #0
    4308:	f300 809c 	bgt.w	4444 <_strtod_l+0x634>
    430c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    430e:	2b00      	cmp	r3, #0
    4310:	f300 80b7 	bgt.w	4482 <_strtod_l+0x672>
    4314:	2f00      	cmp	r7, #0
    4316:	f300 80a9 	bgt.w	446c <_strtod_l+0x65c>
    431a:	f1bb 0f00 	cmp.w	fp, #0
    431e:	dd08      	ble.n	4332 <_strtod_l+0x522>
    4320:	4621      	mov	r1, r4
    4322:	465a      	mov	r2, fp
    4324:	4640      	mov	r0, r8
    4326:	f002 faab 	bl	6880 <__lshift>
    432a:	4604      	mov	r4, r0
    432c:	2800      	cmp	r0, #0
    432e:	f000 80a6 	beq.w	447e <_strtod_l+0x66e>
    4332:	9912      	ldr	r1, [sp, #72]	; 0x48
    4334:	4632      	mov	r2, r6
    4336:	4640      	mov	r0, r8
    4338:	f002 fb3c 	bl	69b4 <__mdiff>
    433c:	4682      	mov	sl, r0
    433e:	2800      	cmp	r0, #0
    4340:	f000 809d 	beq.w	447e <_strtod_l+0x66e>
    4344:	2300      	movs	r3, #0
    4346:	68c5      	ldr	r5, [r0, #12]
    4348:	60c3      	str	r3, [r0, #12]
    434a:	4621      	mov	r1, r4
    434c:	f002 fb10 	bl	6970 <__mcmp>
    4350:	2800      	cmp	r0, #0
    4352:	f2c0 83c7 	blt.w	4ae4 <_strtod_l+0xcd4>
    4356:	f000 8361 	beq.w	4a1c <_strtod_l+0xc0c>
    435a:	4621      	mov	r1, r4
    435c:	4650      	mov	r0, sl
    435e:	f002 fcd1 	bl	6d04 <__ratio>
    4362:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
    4366:	eeb4 0bc7 	vcmpe.f64	d0, d7
    436a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    436e:	d846      	bhi.n	43fe <_strtod_l+0x5ee>
    4370:	2d00      	cmp	r5, #0
    4372:	f000 80cb 	beq.w	450c <_strtod_l+0x6fc>
    4376:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
    437a:	9805      	ldr	r0, [sp, #20]
    437c:	4b60      	ldr	r3, [pc, #384]	; (4500 <_strtod_l+0x6f0>)
    437e:	2200      	movs	r2, #0
    4380:	4960      	ldr	r1, [pc, #384]	; (4504 <_strtod_l+0x6f4>)
    4382:	f8df c184 	ldr.w	ip, [pc, #388]	; 4508 <_strtod_l+0x6f8>
    4386:	ea00 0701 	and.w	r7, r0, r1
    438a:	4567      	cmp	r7, ip
    438c:	f000 80d4 	beq.w	4538 <_strtod_l+0x728>
    4390:	9908      	ldr	r1, [sp, #32]
    4392:	b159      	cbz	r1, 43ac <_strtod_l+0x59c>
    4394:	f1b7 6fd4 	cmp.w	r7, #111149056	; 0x6a00000
    4398:	d808      	bhi.n	43ac <_strtod_l+0x59c>
    439a:	eeb4 9bcb 	vcmpe.f64	d9, d11
    439e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    43a2:	f240 8156 	bls.w	4652 <_strtod_l+0x842>
    43a6:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
    43aa:	1bcb      	subs	r3, r1, r7
    43ac:	eeb0 0b48 	vmov.f64	d0, d8
    43b0:	ec43 2b1a 	vmov	d10, r2, r3
    43b4:	f002 fba8 	bl	6b08 <__ulp>
    43b8:	eeaa 8b00 	vfma.f64	d8, d10, d0
    43bc:	ed8d 8b04 	vstr	d8, [sp, #16]
    43c0:	ee18 3a90 	vmov	r3, s17
    43c4:	9a08      	ldr	r2, [sp, #32]
    43c6:	b922      	cbnz	r2, 43d2 <_strtod_l+0x5c2>
    43c8:	4a4e      	ldr	r2, [pc, #312]	; (4504 <_strtod_l+0x6f4>)
    43ca:	401a      	ands	r2, r3
    43cc:	4297      	cmp	r7, r2
    43ce:	f000 80e4 	beq.w	459a <_strtod_l+0x78a>
    43d2:	9912      	ldr	r1, [sp, #72]	; 0x48
    43d4:	4640      	mov	r0, r8
    43d6:	f002 f813 	bl	6400 <_Bfree>
    43da:	4631      	mov	r1, r6
    43dc:	4640      	mov	r0, r8
    43de:	f002 f80f 	bl	6400 <_Bfree>
    43e2:	4621      	mov	r1, r4
    43e4:	4640      	mov	r0, r8
    43e6:	f002 f80b 	bl	6400 <_Bfree>
    43ea:	4651      	mov	r1, sl
    43ec:	4640      	mov	r0, r8
    43ee:	f002 f807 	bl	6400 <_Bfree>
    43f2:	e72d      	b.n	4250 <_strtod_l+0x440>
    43f4:	2301      	movs	r3, #1
    43f6:	2100      	movs	r1, #0
    43f8:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
    43fc:	e76e      	b.n	42dc <_strtod_l+0x4cc>
    43fe:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
    4402:	ee20 9b09 	vmul.f64	d9, d0, d9
    4406:	2d00      	cmp	r5, #0
    4408:	d15f      	bne.n	44ca <_strtod_l+0x6ba>
    440a:	eeb1 7b49 	vneg.f64	d7, d9
    440e:	9805      	ldr	r0, [sp, #20]
    4410:	ec53 2b17 	vmov	r2, r3, d7
    4414:	e7b4      	b.n	4380 <_strtod_l+0x570>
    4416:	4621      	mov	r1, r4
    4418:	461a      	mov	r2, r3
    441a:	4640      	mov	r0, r8
    441c:	f002 f9d0 	bl	67c0 <__pow5mult>
    4420:	4604      	mov	r4, r0
    4422:	b360      	cbz	r0, 447e <_strtod_l+0x66e>
    4424:	4601      	mov	r1, r0
    4426:	9a12      	ldr	r2, [sp, #72]	; 0x48
    4428:	4640      	mov	r0, r8
    442a:	f002 f91b 	bl	6664 <__multiply>
    442e:	b330      	cbz	r0, 447e <_strtod_l+0x66e>
    4430:	900f      	str	r0, [sp, #60]	; 0x3c
    4432:	9912      	ldr	r1, [sp, #72]	; 0x48
    4434:	4640      	mov	r0, r8
    4436:	f001 ffe3 	bl	6400 <_Bfree>
    443a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    443c:	9212      	str	r2, [sp, #72]	; 0x48
    443e:	2d00      	cmp	r5, #0
    4440:	f77f af64 	ble.w	430c <_strtod_l+0x4fc>
    4444:	9912      	ldr	r1, [sp, #72]	; 0x48
    4446:	462a      	mov	r2, r5
    4448:	4640      	mov	r0, r8
    444a:	f002 fa19 	bl	6880 <__lshift>
    444e:	9012      	str	r0, [sp, #72]	; 0x48
    4450:	2800      	cmp	r0, #0
    4452:	f47f af5b 	bne.w	430c <_strtod_l+0x4fc>
    4456:	2322      	movs	r3, #34	; 0x22
    4458:	ed9f 8b25 	vldr	d8, [pc, #148]	; 44f0 <_strtod_l+0x6e0>
    445c:	f8c8 3000 	str.w	r3, [r8]
    4460:	e0bc      	b.n	45dc <_strtod_l+0x7cc>
    4462:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4464:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
    4468:	1a9f      	subs	r7, r3, r2
    446a:	e720      	b.n	42ae <_strtod_l+0x49e>
    446c:	4631      	mov	r1, r6
    446e:	463a      	mov	r2, r7
    4470:	4640      	mov	r0, r8
    4472:	f002 fa05 	bl	6880 <__lshift>
    4476:	4606      	mov	r6, r0
    4478:	2800      	cmp	r0, #0
    447a:	f47f af4e 	bne.w	431a <_strtod_l+0x50a>
    447e:	9812      	ldr	r0, [sp, #72]	; 0x48
    4480:	e7e9      	b.n	4456 <_strtod_l+0x646>
    4482:	4631      	mov	r1, r6
    4484:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4486:	4640      	mov	r0, r8
    4488:	f002 f99a 	bl	67c0 <__pow5mult>
    448c:	4606      	mov	r6, r0
    448e:	2800      	cmp	r0, #0
    4490:	f47f af40 	bne.w	4314 <_strtod_l+0x504>
    4494:	e7f3      	b.n	447e <_strtod_l+0x66e>
    4496:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
    449a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
    449e:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
    44a2:	2101      	movs	r1, #1
    44a4:	32e2      	adds	r2, #226	; 0xe2
    44a6:	fa01 f302 	lsl.w	r3, r1, r2
    44aa:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
    44ae:	e715      	b.n	42dc <_strtod_l+0x4cc>
    44b0:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
    44b4:	f04f 0b00 	mov.w	fp, #0
    44b8:	e5c0      	b.n	403c <_strtod_l+0x22c>
    44ba:	2301      	movs	r3, #1
    44bc:	930a      	str	r3, [sp, #40]	; 0x28
    44be:	f10a 0302 	add.w	r3, sl, #2
    44c2:	9311      	str	r3, [sp, #68]	; 0x44
    44c4:	f89a 4002 	ldrb.w	r4, [sl, #2]
    44c8:	e602      	b.n	40d0 <_strtod_l+0x2c0>
    44ca:	eeb0 7b49 	vmov.f64	d7, d9
    44ce:	e79e      	b.n	440e <_strtod_l+0x5fe>
    44d0:	94a03595 	.word	0x94a03595
    44d4:	3fcfffff 	.word	0x3fcfffff
    44d8:	94a03595 	.word	0x94a03595
    44dc:	3fdfffff 	.word	0x3fdfffff
    44e0:	35afe535 	.word	0x35afe535
    44e4:	3fe00000 	.word	0x3fe00000
    44e8:	ffc00000 	.word	0xffc00000
    44ec:	41dfffff 	.word	0x41dfffff
    44f0:	00000000 	.word	0x00000000
    44f4:	7ff00000 	.word	0x7ff00000
    44f8:	200002a8 	.word	0x200002a8
    44fc:	fffffc02 	.word	0xfffffc02
    4500:	3ff00000 	.word	0x3ff00000
    4504:	7ff00000 	.word	0x7ff00000
    4508:	7fe00000 	.word	0x7fe00000
    450c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    4510:	2900      	cmp	r1, #0
    4512:	f000 8085 	beq.w	4620 <_strtod_l+0x810>
    4516:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    451a:	2901      	cmp	r1, #1
    451c:	f000 81d8 	beq.w	48d0 <_strtod_l+0xac0>
    4520:	4610      	mov	r0, r2
    4522:	4bb7      	ldr	r3, [pc, #732]	; (4800 <_strtod_l+0x9f0>)
    4524:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
    4528:	2200      	movs	r2, #0
    452a:	e729      	b.n	4380 <_strtod_l+0x570>
    452c:	2c65      	cmp	r4, #101	; 0x65
    452e:	f04f 0c01 	mov.w	ip, #1
    4532:	f43f adbe 	beq.w	40b2 <_strtod_l+0x2a2>
    4536:	e54c      	b.n	3fd2 <_strtod_l+0x1c2>
    4538:	ec43 2b1a 	vmov	d10, r2, r3
    453c:	f1a0 7354 	sub.w	r3, r0, #55574528	; 0x3500000
    4540:	9305      	str	r3, [sp, #20]
    4542:	ed9d fb04 	vldr	d15, [sp, #16]
    4546:	eeb0 0b4f 	vmov.f64	d0, d15
    454a:	f002 fadd 	bl	6b08 <__ulp>
    454e:	49ad      	ldr	r1, [pc, #692]	; (4804 <_strtod_l+0x9f4>)
    4550:	eeaa fb00 	vfma.f64	d15, d10, d0
    4554:	ee1f 3a90 	vmov	r3, s31
    4558:	4aab      	ldr	r2, [pc, #684]	; (4808 <_strtod_l+0x9f8>)
    455a:	4019      	ands	r1, r3
    455c:	4291      	cmp	r1, r2
    455e:	ed8d fb04 	vstr	d15, [sp, #16]
    4562:	d972      	bls.n	464a <_strtod_l+0x83a>
    4564:	4ba9      	ldr	r3, [pc, #676]	; (480c <_strtod_l+0x9fc>)
    4566:	ee18 2a90 	vmov	r2, s17
    456a:	429a      	cmp	r2, r3
    456c:	d103      	bne.n	4576 <_strtod_l+0x766>
    456e:	ee18 3a10 	vmov	r3, s16
    4572:	3301      	adds	r3, #1
    4574:	d083      	beq.n	447e <_strtod_l+0x66e>
    4576:	4aa5      	ldr	r2, [pc, #660]	; (480c <_strtod_l+0x9fc>)
    4578:	f04f 33ff 	mov.w	r3, #4294967295
    457c:	e9cd 3204 	strd	r3, r2, [sp, #16]
    4580:	e727      	b.n	43d2 <_strtod_l+0x5c2>
    4582:	2300      	movs	r3, #0
    4584:	930a      	str	r3, [sp, #40]	; 0x28
    4586:	e79a      	b.n	44be <_strtod_l+0x6ae>
    4588:	2c65      	cmp	r4, #101	; 0x65
    458a:	f000 80d0 	beq.w	472e <_strtod_l+0x91e>
    458e:	2c45      	cmp	r4, #69	; 0x45
    4590:	f000 80cd 	beq.w	472e <_strtod_l+0x91e>
    4594:	f04f 0c01 	mov.w	ip, #1
    4598:	e5d1      	b.n	413e <_strtod_l+0x32e>
    459a:	ec51 0b19 	vmov	r0, r1, d9
    459e:	930d      	str	r3, [sp, #52]	; 0x34
    45a0:	f009 fadc 	bl	db5c <__aeabi_d2lz>
    45a4:	f009 faac 	bl	db00 <__aeabi_l2d>
    45a8:	9b04      	ldr	r3, [sp, #16]
    45aa:	431d      	orrs	r5, r3
    45ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    45ae:	ec41 0b17 	vmov	d7, r0, r1
    45b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
    45b6:	431d      	orrs	r5, r3
    45b8:	ee39 9b47 	vsub.f64	d9, d9, d7
    45bc:	f000 80a0 	beq.w	4700 <_strtod_l+0x8f0>
    45c0:	eeb4 9bcc 	vcmpe.f64	d9, d12
    45c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    45c8:	d405      	bmi.n	45d6 <_strtod_l+0x7c6>
    45ca:	eeb4 9bcd 	vcmpe.f64	d9, d13
    45ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    45d2:	f77f aefe 	ble.w	43d2 <_strtod_l+0x5c2>
    45d6:	ed9d 8b04 	vldr	d8, [sp, #16]
    45da:	9812      	ldr	r0, [sp, #72]	; 0x48
    45dc:	4601      	mov	r1, r0
    45de:	4640      	mov	r0, r8
    45e0:	f001 ff0e 	bl	6400 <_Bfree>
    45e4:	4631      	mov	r1, r6
    45e6:	4640      	mov	r0, r8
    45e8:	f001 ff0a 	bl	6400 <_Bfree>
    45ec:	4621      	mov	r1, r4
    45ee:	4640      	mov	r0, r8
    45f0:	f001 ff06 	bl	6400 <_Bfree>
    45f4:	4649      	mov	r1, r9
    45f6:	4640      	mov	r0, r8
    45f8:	f001 ff02 	bl	6400 <_Bfree>
    45fc:	4651      	mov	r1, sl
    45fe:	4640      	mov	r0, r8
    4600:	f001 fefe 	bl	6400 <_Bfree>
    4604:	e5c1      	b.n	418a <_strtod_l+0x37a>
    4606:	2201      	movs	r2, #1
    4608:	9209      	str	r2, [sp, #36]	; 0x24
    460a:	1c79      	adds	r1, r7, #1
    460c:	9111      	str	r1, [sp, #68]	; 0x44
    460e:	787a      	ldrb	r2, [r7, #1]
    4610:	2a00      	cmp	r2, #0
    4612:	f43f ace5 	beq.w	3fe0 <_strtod_l+0x1d0>
    4616:	460f      	mov	r7, r1
    4618:	e470      	b.n	3efc <_strtod_l+0xec>
    461a:	2200      	movs	r2, #0
    461c:	9209      	str	r2, [sp, #36]	; 0x24
    461e:	e7f4      	b.n	460a <_strtod_l+0x7fa>
    4620:	f3c2 0313 	ubfx	r3, r2, #0, #20
    4624:	4610      	mov	r0, r2
    4626:	2b00      	cmp	r3, #0
    4628:	f47f af7b 	bne.w	4522 <_strtod_l+0x712>
    462c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    4630:	eeb4 0bc7 	vcmpe.f64	d0, d7
    4634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4638:	f100 81d3 	bmi.w	49e2 <_strtod_l+0xbd2>
    463c:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
    4640:	ee20 9b09 	vmul.f64	d9, d0, d9
    4644:	eeb1 7b49 	vneg.f64	d7, d9
    4648:	e6e2      	b.n	4410 <_strtod_l+0x600>
    464a:	f103 7354 	add.w	r3, r3, #55574528	; 0x3500000
    464e:	9305      	str	r3, [sp, #20]
    4650:	e6b8      	b.n	43c4 <_strtod_l+0x5b4>
    4652:	eebc 9bc9 	vcvt.u32.f64	s18, d9
    4656:	ee19 3a10 	vmov	r3, s18
    465a:	2b01      	cmp	r3, #1
    465c:	bf38      	it	cc
    465e:	2301      	movcc	r3, #1
    4660:	ee09 3a10 	vmov	s18, r3
    4664:	eeb8 9b49 	vcvt.f64.u32	d9, s18
    4668:	2d00      	cmp	r5, #0
    466a:	f040 813e 	bne.w	48ea <_strtod_l+0xada>
    466e:	eeb1 7b49 	vneg.f64	d7, d9
    4672:	ec53 2b17 	vmov	r2, r3, d7
    4676:	e696      	b.n	43a6 <_strtod_l+0x596>
    4678:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
    467c:	f300 80b2 	bgt.w	47e4 <_strtod_l+0x9d4>
    4680:	2a10      	cmp	r2, #16
    4682:	ea4f 1322 	mov.w	r3, r2, asr #4
    4686:	f340 8286 	ble.w	4b96 <_strtod_l+0xd86>
    468a:	4c61      	ldr	r4, [pc, #388]	; (4810 <_strtod_l+0xa00>)
    468c:	ed9d 7b04 	vldr	d7, [sp, #16]
    4690:	2000      	movs	r0, #0
    4692:	4622      	mov	r2, r4
    4694:	4601      	mov	r1, r0
    4696:	f013 0f01 	tst.w	r3, #1
    469a:	f101 0101 	add.w	r1, r1, #1
    469e:	ea4f 0363 	mov.w	r3, r3, asr #1
    46a2:	d004      	beq.n	46ae <_strtod_l+0x89e>
    46a4:	ed92 6b00 	vldr	d6, [r2]
    46a8:	2001      	movs	r0, #1
    46aa:	ee27 7b06 	vmul.f64	d7, d7, d6
    46ae:	2b01      	cmp	r3, #1
    46b0:	f102 0208 	add.w	r2, r2, #8
    46b4:	d1ef      	bne.n	4696 <_strtod_l+0x886>
    46b6:	b108      	cbz	r0, 46bc <_strtod_l+0x8ac>
    46b8:	ed8d 7b04 	vstr	d7, [sp, #16]
    46bc:	9b05      	ldr	r3, [sp, #20]
    46be:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
    46c2:	9305      	str	r3, [sp, #20]
    46c4:	eb04 04c1 	add.w	r4, r4, r1, lsl #3
    46c8:	ed9d 6b04 	vldr	d6, [sp, #16]
    46cc:	ed94 7b00 	vldr	d7, [r4]
    46d0:	4b4c      	ldr	r3, [pc, #304]	; (4804 <_strtod_l+0x9f4>)
    46d2:	ee27 7b06 	vmul.f64	d7, d7, d6
    46d6:	ee17 2a90 	vmov	r2, s15
    46da:	494e      	ldr	r1, [pc, #312]	; (4814 <_strtod_l+0xa04>)
    46dc:	4013      	ands	r3, r2
    46de:	428b      	cmp	r3, r1
    46e0:	ed8d 7b04 	vstr	d7, [sp, #16]
    46e4:	d87e      	bhi.n	47e4 <_strtod_l+0x9d4>
    46e6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
    46ea:	428b      	cmp	r3, r1
    46ec:	f240 81d6 	bls.w	4a9c <_strtod_l+0xc8c>
    46f0:	4c46      	ldr	r4, [pc, #280]	; (480c <_strtod_l+0x9fc>)
    46f2:	f04f 33ff 	mov.w	r3, #4294967295
    46f6:	e9cd 3404 	strd	r3, r4, [sp, #16]
    46fa:	2300      	movs	r3, #0
    46fc:	9308      	str	r3, [sp, #32]
    46fe:	e585      	b.n	420c <_strtod_l+0x3fc>
    4700:	eeb4 9bce 	vcmpe.f64	d9, d14
    4704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4708:	f57f ae63 	bpl.w	43d2 <_strtod_l+0x5c2>
    470c:	e763      	b.n	45d6 <_strtod_l+0x7c6>
    470e:	3216      	adds	r2, #22
    4710:	f6ff ad62 	blt.w	41d8 <_strtod_l+0x3c8>
    4714:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4716:	eba3 0b0b 	sub.w	fp, r3, fp
    471a:	4b3f      	ldr	r3, [pc, #252]	; (4818 <_strtod_l+0xa08>)
    471c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
    4720:	ed93 7b00 	vldr	d7, [r3]
    4724:	ed9d 6b04 	vldr	d6, [sp, #16]
    4728:	ee86 8b07 	vdiv.f64	d8, d6, d7
    472c:	e52d      	b.n	418a <_strtod_l+0x37a>
    472e:	f04f 0e00 	mov.w	lr, #0
    4732:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    4736:	f04f 0c01 	mov.w	ip, #1
    473a:	e44e      	b.n	3fda <_strtod_l+0x1ca>
    473c:	2c6e      	cmp	r4, #110	; 0x6e
    473e:	f43f ad10 	beq.w	4162 <_strtod_l+0x352>
    4742:	e44d      	b.n	3fe0 <_strtod_l+0x1d0>
    4744:	f43f ad60 	beq.w	4208 <_strtod_l+0x3f8>
    4748:	425b      	negs	r3, r3
    474a:	f013 010f 	ands.w	r1, r3, #15
    474e:	d00a      	beq.n	4766 <_strtod_l+0x956>
    4750:	4a31      	ldr	r2, [pc, #196]	; (4818 <_strtod_l+0xa08>)
    4752:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    4756:	ed9d 6b04 	vldr	d6, [sp, #16]
    475a:	ed92 7b00 	vldr	d7, [r2]
    475e:	ee86 7b07 	vdiv.f64	d7, d6, d7
    4762:	ed8d 7b04 	vstr	d7, [sp, #16]
    4766:	111b      	asrs	r3, r3, #4
    4768:	f43f ad4e 	beq.w	4208 <_strtod_l+0x3f8>
    476c:	2b1f      	cmp	r3, #31
    476e:	dc33      	bgt.n	47d8 <_strtod_l+0x9c8>
    4770:	f013 0210 	ands.w	r2, r3, #16
    4774:	bf18      	it	ne
    4776:	226a      	movne	r2, #106	; 0x6a
    4778:	ed9d 7b04 	vldr	d7, [sp, #16]
    477c:	9208      	str	r2, [sp, #32]
    477e:	4a27      	ldr	r2, [pc, #156]	; (481c <_strtod_l+0xa0c>)
    4780:	2100      	movs	r1, #0
    4782:	07d8      	lsls	r0, r3, #31
    4784:	d504      	bpl.n	4790 <_strtod_l+0x980>
    4786:	ed92 6b00 	vldr	d6, [r2]
    478a:	2101      	movs	r1, #1
    478c:	ee27 7b06 	vmul.f64	d7, d7, d6
    4790:	105b      	asrs	r3, r3, #1
    4792:	f102 0208 	add.w	r2, r2, #8
    4796:	d1f4      	bne.n	4782 <_strtod_l+0x972>
    4798:	b109      	cbz	r1, 479e <_strtod_l+0x98e>
    479a:	ed8d 7b04 	vstr	d7, [sp, #16]
    479e:	9b08      	ldr	r3, [sp, #32]
    47a0:	b193      	cbz	r3, 47c8 <_strtod_l+0x9b8>
    47a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    47a6:	f3c1 520a 	ubfx	r2, r1, #20, #11
    47aa:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
    47ae:	2b00      	cmp	r3, #0
    47b0:	dd0a      	ble.n	47c8 <_strtod_l+0x9b8>
    47b2:	2b1f      	cmp	r3, #31
    47b4:	f340 822f 	ble.w	4c16 <_strtod_l+0xe06>
    47b8:	2000      	movs	r0, #0
    47ba:	2b34      	cmp	r3, #52	; 0x34
    47bc:	9004      	str	r0, [sp, #16]
    47be:	f340 8240 	ble.w	4c42 <_strtod_l+0xe32>
    47c2:	f04f 735c 	mov.w	r3, #57671680	; 0x3700000
    47c6:	9305      	str	r3, [sp, #20]
    47c8:	ed9d 7b04 	vldr	d7, [sp, #16]
    47cc:	eeb5 7b40 	vcmp.f64	d7, #0.0
    47d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    47d4:	f47f ad1a 	bne.w	420c <_strtod_l+0x3fc>
    47d8:	2322      	movs	r3, #34	; 0x22
    47da:	ed9f 8b05 	vldr	d8, [pc, #20]	; 47f0 <_strtod_l+0x9e0>
    47de:	f8c8 3000 	str.w	r3, [r8]
    47e2:	e4d2      	b.n	418a <_strtod_l+0x37a>
    47e4:	2322      	movs	r3, #34	; 0x22
    47e6:	ed9f 8b04 	vldr	d8, [pc, #16]	; 47f8 <_strtod_l+0x9e8>
    47ea:	f8c8 3000 	str.w	r3, [r8]
    47ee:	e4cc      	b.n	418a <_strtod_l+0x37a>
	...
    47fc:	7ff00000 	.word	0x7ff00000
    4800:	bff00000 	.word	0xbff00000
    4804:	7ff00000 	.word	0x7ff00000
    4808:	7c9fffff 	.word	0x7c9fffff
    480c:	7fefffff 	.word	0x7fefffff
    4810:	20000280 	.word	0x20000280
    4814:	7ca00000 	.word	0x7ca00000
    4818:	200002a8 	.word	0x200002a8
    481c:	20000370 	.word	0x20000370
    4820:	9302      	str	r3, [sp, #8]
    4822:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4824:	9301      	str	r3, [sp, #4]
    4826:	ab12      	add	r3, sp, #72	; 0x48
    4828:	9300      	str	r3, [sp, #0]
    482a:	4aa7      	ldr	r2, [pc, #668]	; (4ac8 <_strtod_l+0xcb8>)
    482c:	ab13      	add	r3, sp, #76	; 0x4c
    482e:	a911      	add	r1, sp, #68	; 0x44
    4830:	4640      	mov	r0, r8
    4832:	f001 f9eb 	bl	5c0c <__gethex>
    4836:	f010 050f 	ands.w	r5, r0, #15
    483a:	4604      	mov	r4, r0
    483c:	f43f aca3 	beq.w	4186 <_strtod_l+0x376>
    4840:	2d06      	cmp	r5, #6
    4842:	d174      	bne.n	492e <_strtod_l+0xb1e>
    4844:	9b07      	ldr	r3, [sp, #28]
    4846:	ed9f 8b9a 	vldr	d8, [pc, #616]	; 4ab0 <_strtod_l+0xca0>
    484a:	3701      	adds	r7, #1
    484c:	2b00      	cmp	r3, #0
    484e:	f43f abce 	beq.w	3fee <_strtod_l+0x1de>
    4852:	601f      	str	r7, [r3, #0]
    4854:	f7ff bbcb 	b.w	3fee <_strtod_l+0x1de>
    4858:	ed9d 8b04 	vldr	d8, [sp, #16]
    485c:	e495      	b.n	418a <_strtod_l+0x37a>
    485e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4860:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
    4864:	4403      	add	r3, r0
    4866:	930b      	str	r3, [sp, #44]	; 0x2c
    4868:	2801      	cmp	r0, #1
    486a:	f105 0301 	add.w	r3, r5, #1
    486e:	461a      	mov	r2, r3
    4870:	d014      	beq.n	489c <_strtod_l+0xa8c>
    4872:	4428      	add	r0, r5
    4874:	1e44      	subs	r4, r0, #1
    4876:	e003      	b.n	4880 <_strtod_l+0xa70>
    4878:	0046      	lsls	r6, r0, #1
    487a:	429c      	cmp	r4, r3
    487c:	d00d      	beq.n	489a <_strtod_l+0xa8a>
    487e:	3301      	adds	r3, #1
    4880:	462a      	mov	r2, r5
    4882:	2a08      	cmp	r2, #8
    4884:	461d      	mov	r5, r3
    4886:	eb06 0086 	add.w	r0, r6, r6, lsl #2
    488a:	d9f5      	bls.n	4878 <_strtod_l+0xa68>
    488c:	2b10      	cmp	r3, #16
    488e:	bfdc      	itt	le
    4890:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
    4894:	ea4f 0949 	movle.w	r9, r9, lsl #1
    4898:	e7ef      	b.n	487a <_strtod_l+0xa6a>
    489a:	3202      	adds	r2, #2
    489c:	2d08      	cmp	r5, #8
    489e:	dc3c      	bgt.n	491a <_strtod_l+0xb0a>
    48a0:	4615      	mov	r5, r2
    48a2:	f7ff bb79 	b.w	3f98 <_strtod_l+0x188>
    48a6:	4989      	ldr	r1, [pc, #548]	; (4acc <_strtod_l+0xcbc>)
    48a8:	2201      	movs	r2, #1
    48aa:	4638      	mov	r0, r7
    48ac:	f000 fcf0 	bl	5290 <strncmp>
    48b0:	2800      	cmp	r0, #0
    48b2:	f000 8082 	beq.w	49ba <_strtod_l+0xbaa>
    48b6:	f04f 0e00 	mov.w	lr, #0
    48ba:	46f1      	mov	r9, lr
    48bc:	4676      	mov	r6, lr
    48be:	4675      	mov	r5, lr
    48c0:	f7ff bbb5 	b.w	402e <_strtod_l+0x21e>
    48c4:	f644 631f 	movw	r3, #19999	; 0x4e1f
    48c8:	459b      	cmp	fp, r3
    48ca:	bfa8      	it	ge
    48cc:	469b      	movge	fp, r3
    48ce:	e42f      	b.n	4130 <_strtod_l+0x320>
    48d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    48d4:	4618      	mov	r0, r3
    48d6:	2b00      	cmp	r3, #0
    48d8:	f47f ae23 	bne.w	4522 <_strtod_l+0x712>
    48dc:	2322      	movs	r3, #34	; 0x22
    48de:	ed9f 8b74 	vldr	d8, [pc, #464]	; 4ab0 <_strtod_l+0xca0>
    48e2:	9812      	ldr	r0, [sp, #72]	; 0x48
    48e4:	f8c8 3000 	str.w	r3, [r8]
    48e8:	e678      	b.n	45dc <_strtod_l+0x7cc>
    48ea:	eeb0 7b49 	vmov.f64	d7, d9
    48ee:	e6c0      	b.n	4672 <_strtod_l+0x862>
    48f0:	4977      	ldr	r1, [pc, #476]	; (4ad0 <_strtod_l+0xcc0>)
    48f2:	a811      	add	r0, sp, #68	; 0x44
    48f4:	f001 fc54 	bl	61a0 <__match>
    48f8:	2800      	cmp	r0, #0
    48fa:	f43f ab71 	beq.w	3fe0 <_strtod_l+0x1d0>
    48fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4900:	4974      	ldr	r1, [pc, #464]	; (4ad4 <_strtod_l+0xcc4>)
    4902:	3b01      	subs	r3, #1
    4904:	a811      	add	r0, sp, #68	; 0x44
    4906:	9311      	str	r3, [sp, #68]	; 0x44
    4908:	f001 fc4a 	bl	61a0 <__match>
    490c:	b910      	cbnz	r0, 4914 <_strtod_l+0xb04>
    490e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4910:	3301      	adds	r3, #1
    4912:	9311      	str	r3, [sp, #68]	; 0x44
    4914:	ed9f 8b68 	vldr	d8, [pc, #416]	; 4ab8 <_strtod_l+0xca8>
    4918:	e437      	b.n	418a <_strtod_l+0x37a>
    491a:	2a10      	cmp	r2, #16
    491c:	bfdc      	itt	le
    491e:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
    4922:	eb01 0949 	addle.w	r9, r1, r9, lsl #1
    4926:	4615      	mov	r5, r2
    4928:	2000      	movs	r0, #0
    492a:	f7ff bb3a 	b.w	3fa2 <_strtod_l+0x192>
    492e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    4930:	b13a      	cbz	r2, 4942 <_strtod_l+0xb32>
    4932:	2135      	movs	r1, #53	; 0x35
    4934:	a814      	add	r0, sp, #80	; 0x50
    4936:	f002 fa17 	bl	6d68 <__copybits>
    493a:	9912      	ldr	r1, [sp, #72]	; 0x48
    493c:	4640      	mov	r0, r8
    493e:	f001 fd5f 	bl	6400 <_Bfree>
    4942:	3d01      	subs	r5, #1
    4944:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    4946:	2d04      	cmp	r5, #4
    4948:	f200 818f 	bhi.w	4c6a <_strtod_l+0xe5a>
    494c:	e8df f005 	tbb	[pc, r5]
    4950:	1f2a2d03 	.word	0x1f2a2d03
    4954:	03          	.byte	0x03
    4955:	00          	.byte	0x00
    4956:	9a14      	ldr	r2, [sp, #80]	; 0x50
    4958:	9204      	str	r2, [sp, #16]
    495a:	f203 4233 	addw	r2, r3, #1075	; 0x433
    495e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    4960:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
    4964:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
    4968:	9305      	str	r3, [sp, #20]
    496a:	05e5      	lsls	r5, r4, #23
    496c:	d502      	bpl.n	4974 <_strtod_l+0xb64>
    496e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    4972:	9305      	str	r3, [sp, #20]
    4974:	4a58      	ldr	r2, [pc, #352]	; (4ad8 <_strtod_l+0xcc8>)
    4976:	401a      	ands	r2, r3
    4978:	ed9d 8b04 	vldr	d8, [sp, #16]
    497c:	2a00      	cmp	r2, #0
    497e:	f47f ac04 	bne.w	418a <_strtod_l+0x37a>
    4982:	f000 fd69 	bl	5458 <__errno>
    4986:	2322      	movs	r3, #34	; 0x22
    4988:	6003      	str	r3, [r0, #0]
    498a:	f7ff bbfe 	b.w	418a <_strtod_l+0x37a>
    498e:	f04f 33ff 	mov.w	r3, #4294967295
    4992:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    4996:	e9cd 3604 	strd	r3, r6, [sp, #16]
    499a:	05e3      	lsls	r3, r4, #23
    499c:	f57f af5c 	bpl.w	4858 <_strtod_l+0xa48>
    49a0:	9b05      	ldr	r3, [sp, #20]
    49a2:	e7e4      	b.n	496e <_strtod_l+0xb5e>
    49a4:	4b4c      	ldr	r3, [pc, #304]	; (4ad8 <_strtod_l+0xcc8>)
    49a6:	9305      	str	r3, [sp, #20]
    49a8:	e7f7      	b.n	499a <_strtod_l+0xb8a>
    49aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
    49ac:	9304      	str	r3, [sp, #16]
    49ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
    49b0:	9305      	str	r3, [sp, #20]
    49b2:	e7da      	b.n	496a <_strtod_l+0xb5a>
    49b4:	2000      	movs	r0, #0
    49b6:	f7ff bae1 	b.w	3f7c <_strtod_l+0x16c>
    49ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
    49bc:	461a      	mov	r2, r3
    49be:	3301      	adds	r3, #1
    49c0:	9311      	str	r3, [sp, #68]	; 0x44
    49c2:	7854      	ldrb	r4, [r2, #1]
    49c4:	4606      	mov	r6, r0
    49c6:	4681      	mov	r9, r0
    49c8:	f7ff bacd 	b.w	3f66 <_strtod_l+0x156>
    49cc:	4b43      	ldr	r3, [pc, #268]	; (4adc <_strtod_l+0xccc>)
    49ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    49d2:	ed93 8b00 	vldr	d8, [r3]
    49d6:	ed9d 7b04 	vldr	d7, [sp, #16]
    49da:	ee28 8b07 	vmul.f64	d8, d8, d7
    49de:	f7ff bbd4 	b.w	418a <_strtod_l+0x37a>
    49e2:	eebe 7b00 	vmov.f64	d7, #224	; 0xbf000000 -0.5
    49e6:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
    49ea:	e511      	b.n	4410 <_strtod_l+0x600>
    49ec:	46ae      	mov	lr, r5
    49ee:	900b      	str	r0, [sp, #44]	; 0x2c
    49f0:	f7ff badc 	b.w	3fac <_strtod_l+0x19c>
    49f4:	4b39      	ldr	r3, [pc, #228]	; (4adc <_strtod_l+0xccc>)
    49f6:	f1c5 050f 	rsb	r5, r5, #15
    49fa:	1b4a      	subs	r2, r1, r5
    49fc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    4a00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    4a04:	ed95 8b00 	vldr	d8, [r5]
    4a08:	ed93 7b00 	vldr	d7, [r3]
    4a0c:	ed9d 6b04 	vldr	d6, [sp, #16]
    4a10:	ee28 8b06 	vmul.f64	d8, d8, d6
    4a14:	ee28 8b07 	vmul.f64	d8, d8, d7
    4a18:	f7ff bbb7 	b.w	418a <_strtod_l+0x37a>
    4a1c:	2d00      	cmp	r5, #0
    4a1e:	f000 8095 	beq.w	4b4c <_strtod_l+0xd3c>
    4a22:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
    4a26:	4b2e      	ldr	r3, [pc, #184]	; (4ae0 <_strtod_l+0xcd0>)
    4a28:	f3cc 0113 	ubfx	r1, ip, #0, #20
    4a2c:	4299      	cmp	r1, r3
    4a2e:	4662      	mov	r2, ip
    4a30:	f000 80d2 	beq.w	4bd8 <_strtod_l+0xdc8>
    4a34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4a36:	2b00      	cmp	r3, #0
    4a38:	f000 80a5 	beq.w	4b86 <_strtod_l+0xd76>
    4a3c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    4a40:	4213      	tst	r3, r2
    4a42:	4617      	mov	r7, r2
    4a44:	d01a      	beq.n	4a7c <_strtod_l+0xc6c>
    4a46:	eeb0 0b48 	vmov.f64	d0, d8
    4a4a:	2d00      	cmp	r5, #0
    4a4c:	f000 80a6 	beq.w	4b9c <_strtod_l+0xd8c>
    4a50:	f002 f85a 	bl	6b08 <__ulp>
    4a54:	9b08      	ldr	r3, [sp, #32]
    4a56:	b17b      	cbz	r3, 4a78 <_strtod_l+0xc68>
    4a58:	f3c7 530a 	ubfx	r3, r7, #20, #11
    4a5c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    4a60:	2b00      	cmp	r3, #0
    4a62:	dd09      	ble.n	4a78 <_strtod_l+0xc68>
    4a64:	051b      	lsls	r3, r3, #20
    4a66:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
    4a6a:	2000      	movs	r0, #0
    4a6c:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
    4a70:	ec41 0b17 	vmov	d7, r0, r1
    4a74:	ee20 0b07 	vmul.f64	d0, d0, d7
    4a78:	ee38 8b00 	vadd.f64	d8, d8, d0
    4a7c:	9b08      	ldr	r3, [sp, #32]
    4a7e:	b15b      	cbz	r3, 4a98 <_strtod_l+0xc88>
    4a80:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 4ac0 <_strtod_l+0xcb0>
    4a84:	4b14      	ldr	r3, [pc, #80]	; (4ad8 <_strtod_l+0xcc8>)
    4a86:	ee28 8b07 	vmul.f64	d8, d8, d7
    4a8a:	ee18 2a90 	vmov	r2, s17
    4a8e:	4013      	ands	r3, r2
    4a90:	b913      	cbnz	r3, 4a98 <_strtod_l+0xc88>
    4a92:	2322      	movs	r3, #34	; 0x22
    4a94:	f8c8 3000 	str.w	r3, [r8]
    4a98:	9812      	ldr	r0, [sp, #72]	; 0x48
    4a9a:	e59f      	b.n	45dc <_strtod_l+0x7cc>
    4a9c:	f102 7354 	add.w	r3, r2, #55574528	; 0x3500000
    4aa0:	9305      	str	r3, [sp, #20]
    4aa2:	2300      	movs	r3, #0
    4aa4:	9308      	str	r3, [sp, #32]
    4aa6:	f7ff bbb1 	b.w	420c <_strtod_l+0x3fc>
    4aaa:	bf00      	nop
    4aac:	f3af 8000 	nop.w
	...
    4abc:	7ff00000 	.word	0x7ff00000
    4ac0:	00000000 	.word	0x00000000
    4ac4:	39500000 	.word	0x39500000
    4ac8:	200076c4 	.word	0x200076c4
    4acc:	200008b4 	.word	0x200008b4
    4ad0:	200008b8 	.word	0x200008b8
    4ad4:	200008bc 	.word	0x200008bc
    4ad8:	7ff00000 	.word	0x7ff00000
    4adc:	200002a8 	.word	0x200002a8
    4ae0:	000fffff 	.word	0x000fffff
    4ae4:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    4ae8:	430d      	orrs	r5, r1
    4aea:	d1c7      	bne.n	4a7c <_strtod_l+0xc6c>
    4aec:	f3c2 0313 	ubfx	r3, r2, #0, #20
    4af0:	4617      	mov	r7, r2
    4af2:	2b00      	cmp	r3, #0
    4af4:	d1c2      	bne.n	4a7c <_strtod_l+0xc6c>
    4af6:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
    4afa:	0d1b      	lsrs	r3, r3, #20
    4afc:	051b      	lsls	r3, r3, #20
    4afe:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    4b02:	d9bb      	bls.n	4a7c <_strtod_l+0xc6c>
    4b04:	f8da 3014 	ldr.w	r3, [sl, #20]
    4b08:	b91b      	cbnz	r3, 4b12 <_strtod_l+0xd02>
    4b0a:	f8da 3010 	ldr.w	r3, [sl, #16]
    4b0e:	2b01      	cmp	r3, #1
    4b10:	ddb4      	ble.n	4a7c <_strtod_l+0xc6c>
    4b12:	4651      	mov	r1, sl
    4b14:	2201      	movs	r2, #1
    4b16:	4640      	mov	r0, r8
    4b18:	f001 feb2 	bl	6880 <__lshift>
    4b1c:	4621      	mov	r1, r4
    4b1e:	4682      	mov	sl, r0
    4b20:	f001 ff26 	bl	6970 <__mcmp>
    4b24:	2800      	cmp	r0, #0
    4b26:	dda9      	ble.n	4a7c <_strtod_l+0xc6c>
    4b28:	9b08      	ldr	r3, [sp, #32]
    4b2a:	2b00      	cmp	r3, #0
    4b2c:	d17e      	bne.n	4c2c <_strtod_l+0xe1c>
    4b2e:	4b50      	ldr	r3, [pc, #320]	; (4c70 <_strtod_l+0xe60>)
    4b30:	403b      	ands	r3, r7
    4b32:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
    4b36:	ea6f 5313 	mvn.w	r3, r3, lsr #20
    4b3a:	ea6f 5303 	mvn.w	r3, r3, lsl #20
    4b3e:	9305      	str	r3, [sp, #20]
    4b40:	f04f 33ff 	mov.w	r3, #4294967295
    4b44:	9304      	str	r3, [sp, #16]
    4b46:	ed9d 8b04 	vldr	d8, [sp, #16]
    4b4a:	e797      	b.n	4a7c <_strtod_l+0xc6c>
    4b4c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    4b50:	f3c2 0313 	ubfx	r3, r2, #0, #20
    4b54:	430b      	orrs	r3, r1
    4b56:	4617      	mov	r7, r2
    4b58:	f47f af6c 	bne.w	4a34 <_strtod_l+0xc24>
    4b5c:	e7e4      	b.n	4b28 <_strtod_l+0xd18>
    4b5e:	4945      	ldr	r1, [pc, #276]	; (4c74 <_strtod_l+0xe64>)
    4b60:	a811      	add	r0, sp, #68	; 0x44
    4b62:	aa14      	add	r2, sp, #80	; 0x50
    4b64:	f001 fb38 	bl	61d8 <__hexnan>
    4b68:	2805      	cmp	r0, #5
    4b6a:	f47f ab06 	bne.w	417a <_strtod_l+0x36a>
    4b6e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    4b70:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
    4b74:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
    4b78:	9305      	str	r3, [sp, #20]
    4b7a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    4b7c:	9304      	str	r3, [sp, #16]
    4b7e:	ed9d 8b04 	vldr	d8, [sp, #16]
    4b82:	f7ff bb02 	b.w	418a <_strtod_l+0x37a>
    4b86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    4b8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4b8c:	4203      	tst	r3, r0
    4b8e:	f43f af75 	beq.w	4a7c <_strtod_l+0xc6c>
    4b92:	460f      	mov	r7, r1
    4b94:	e757      	b.n	4a46 <_strtod_l+0xc36>
    4b96:	4c38      	ldr	r4, [pc, #224]	; (4c78 <_strtod_l+0xe68>)
    4b98:	2100      	movs	r1, #0
    4b9a:	e58f      	b.n	46bc <_strtod_l+0x8ac>
    4b9c:	f001 ffb4 	bl	6b08 <__ulp>
    4ba0:	9b08      	ldr	r3, [sp, #32]
    4ba2:	2b00      	cmp	r3, #0
    4ba4:	d055      	beq.n	4c52 <_strtod_l+0xe42>
    4ba6:	f3c7 530a 	ubfx	r3, r7, #20, #11
    4baa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    4bae:	2b00      	cmp	r3, #0
    4bb0:	dd09      	ble.n	4bc6 <_strtod_l+0xdb6>
    4bb2:	051b      	lsls	r3, r3, #20
    4bb4:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
    4bb8:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
    4bbc:	4628      	mov	r0, r5
    4bbe:	ec41 0b17 	vmov	d7, r0, r1
    4bc2:	ee20 0b07 	vmul.f64	d0, d0, d7
    4bc6:	ee38 8b40 	vsub.f64	d8, d8, d0
    4bca:	eeb5 8b40 	vcmp.f64	d8, #0.0
    4bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4bd2:	f47f af55 	bne.w	4a80 <_strtod_l+0xc70>
    4bd6:	e681      	b.n	48dc <_strtod_l+0xacc>
    4bd8:	9b08      	ldr	r3, [sp, #32]
    4bda:	9904      	ldr	r1, [sp, #16]
    4bdc:	b31b      	cbz	r3, 4c26 <_strtod_l+0xe16>
    4bde:	4b24      	ldr	r3, [pc, #144]	; (4c70 <_strtod_l+0xe60>)
    4be0:	4013      	ands	r3, r2
    4be2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
    4be6:	d81e      	bhi.n	4c26 <_strtod_l+0xe16>
    4be8:	0d1b      	lsrs	r3, r3, #20
    4bea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    4bee:	f04f 30ff 	mov.w	r0, #4294967295
    4bf2:	fa00 f303 	lsl.w	r3, r0, r3
    4bf6:	4299      	cmp	r1, r3
    4bf8:	f47f af1c 	bne.w	4a34 <_strtod_l+0xc24>
    4bfc:	4b1f      	ldr	r3, [pc, #124]	; (4c7c <_strtod_l+0xe6c>)
    4bfe:	429a      	cmp	r2, r3
    4c00:	d030      	beq.n	4c64 <_strtod_l+0xe54>
    4c02:	4b1b      	ldr	r3, [pc, #108]	; (4c70 <_strtod_l+0xe60>)
    4c04:	4013      	ands	r3, r2
    4c06:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
    4c0a:	9305      	str	r3, [sp, #20]
    4c0c:	2300      	movs	r3, #0
    4c0e:	9304      	str	r3, [sp, #16]
    4c10:	ed9d 8b04 	vldr	d8, [sp, #16]
    4c14:	e732      	b.n	4a7c <_strtod_l+0xc6c>
    4c16:	f04f 32ff 	mov.w	r2, #4294967295
    4c1a:	fa02 f303 	lsl.w	r3, r2, r3
    4c1e:	9a04      	ldr	r2, [sp, #16]
    4c20:	401a      	ands	r2, r3
    4c22:	9204      	str	r2, [sp, #16]
    4c24:	e5d0      	b.n	47c8 <_strtod_l+0x9b8>
    4c26:	f04f 33ff 	mov.w	r3, #4294967295
    4c2a:	e7e4      	b.n	4bf6 <_strtod_l+0xde6>
    4c2c:	4b10      	ldr	r3, [pc, #64]	; (4c70 <_strtod_l+0xe60>)
    4c2e:	403b      	ands	r3, r7
    4c30:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    4c34:	f73f af7d 	bgt.w	4b32 <_strtod_l+0xd22>
    4c38:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
    4c3c:	f73f af20 	bgt.w	4a80 <_strtod_l+0xc70>
    4c40:	e64c      	b.n	48dc <_strtod_l+0xacc>
    4c42:	f1c2 024b 	rsb	r2, r2, #75	; 0x4b
    4c46:	f04f 33ff 	mov.w	r3, #4294967295
    4c4a:	4093      	lsls	r3, r2
    4c4c:	400b      	ands	r3, r1
    4c4e:	9305      	str	r3, [sp, #20]
    4c50:	e5ba      	b.n	47c8 <_strtod_l+0x9b8>
    4c52:	ee38 8b40 	vsub.f64	d8, d8, d0
    4c56:	eeb5 8b40 	vcmp.f64	d8, #0.0
    4c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4c5e:	f47f af1b 	bne.w	4a98 <_strtod_l+0xc88>
    4c62:	e63b      	b.n	48dc <_strtod_l+0xacc>
    4c64:	3101      	adds	r1, #1
    4c66:	d1cc      	bne.n	4c02 <_strtod_l+0xdf2>
    4c68:	e409      	b.n	447e <_strtod_l+0x66e>
    4c6a:	2300      	movs	r3, #0
    4c6c:	e67d      	b.n	496a <_strtod_l+0xb5a>
    4c6e:	bf00      	nop
    4c70:	7ff00000 	.word	0x7ff00000
    4c74:	200076d8 	.word	0x200076d8
    4c78:	20000280 	.word	0x20000280
    4c7c:	7fefffff 	.word	0x7fefffff

00004c80 <_strtod_r>:
    4c80:	4b01      	ldr	r3, [pc, #4]	; (4c88 <_strtod_r+0x8>)
    4c82:	f7ff b8c5 	b.w	3e10 <_strtod_l>
    4c86:	bf00      	nop
    4c88:	20007a38 	.word	0x20007a38

00004c8c <_strtol_l.constprop.0>:
    4c8c:	2b01      	cmp	r3, #1
    4c8e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4c92:	d040      	beq.n	4d16 <_strtol_l.constprop.0+0x8a>
    4c94:	2b24      	cmp	r3, #36	; 0x24
    4c96:	4698      	mov	r8, r3
    4c98:	d83d      	bhi.n	4d16 <_strtol_l.constprop.0+0x8a>
    4c9a:	4d4c      	ldr	r5, [pc, #304]	; (4dcc <_strtol_l.constprop.0+0x140>)
    4c9c:	468e      	mov	lr, r1
    4c9e:	4676      	mov	r6, lr
    4ca0:	f81e bb01 	ldrb.w	fp, [lr], #1
    4ca4:	f815 400b 	ldrb.w	r4, [r5, fp]
    4ca8:	f014 0408 	ands.w	r4, r4, #8
    4cac:	d1f7      	bne.n	4c9e <_strtol_l.constprop.0+0x12>
    4cae:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
    4cb2:	d072      	beq.n	4d9a <_strtol_l.constprop.0+0x10e>
    4cb4:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
    4cb8:	bf08      	it	eq
    4cba:	f89e b000 	ldrbeq.w	fp, [lr]
    4cbe:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
    4cc2:	bf08      	it	eq
    4cc4:	f106 0e02 	addeq.w	lr, r6, #2
    4cc8:	2b00      	cmp	r3, #0
    4cca:	d042      	beq.n	4d52 <_strtol_l.constprop.0+0xc6>
    4ccc:	2b10      	cmp	r3, #16
    4cce:	d057      	beq.n	4d80 <_strtol_l.constprop.0+0xf4>
    4cd0:	fbb9 f7f8 	udiv	r7, r9, r8
    4cd4:	2500      	movs	r5, #0
    4cd6:	462e      	mov	r6, r5
    4cd8:	fb08 9a17 	mls	sl, r8, r7, r9
    4cdc:	e005      	b.n	4cea <_strtol_l.constprop.0+0x5e>
    4cde:	d033      	beq.n	4d48 <_strtol_l.constprop.0+0xbc>
    4ce0:	fb08 c606 	mla	r6, r8, r6, ip
    4ce4:	2501      	movs	r5, #1
    4ce6:	f81e bb01 	ldrb.w	fp, [lr], #1
    4cea:	f1ab 0c30 	sub.w	ip, fp, #48	; 0x30
    4cee:	f1bc 0f09 	cmp.w	ip, #9
    4cf2:	d906      	bls.n	4d02 <_strtol_l.constprop.0+0x76>
    4cf4:	f1ab 0c41 	sub.w	ip, fp, #65	; 0x41
    4cf8:	f1bc 0f19 	cmp.w	ip, #25
    4cfc:	d812      	bhi.n	4d24 <_strtol_l.constprop.0+0x98>
    4cfe:	f1ab 0c37 	sub.w	ip, fp, #55	; 0x37
    4d02:	4563      	cmp	r3, ip
    4d04:	dd17      	ble.n	4d36 <_strtol_l.constprop.0+0xaa>
    4d06:	f1b5 3fff 	cmp.w	r5, #4294967295
    4d0a:	d0ec      	beq.n	4ce6 <_strtol_l.constprop.0+0x5a>
    4d0c:	42b7      	cmp	r7, r6
    4d0e:	d2e6      	bcs.n	4cde <_strtol_l.constprop.0+0x52>
    4d10:	f04f 35ff 	mov.w	r5, #4294967295
    4d14:	e7e7      	b.n	4ce6 <_strtol_l.constprop.0+0x5a>
    4d16:	f000 fb9f 	bl	5458 <__errno>
    4d1a:	2316      	movs	r3, #22
    4d1c:	6003      	str	r3, [r0, #0]
    4d1e:	2000      	movs	r0, #0
    4d20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4d24:	f1ab 0c61 	sub.w	ip, fp, #97	; 0x61
    4d28:	f1bc 0f19 	cmp.w	ip, #25
    4d2c:	d803      	bhi.n	4d36 <_strtol_l.constprop.0+0xaa>
    4d2e:	f1ab 0c57 	sub.w	ip, fp, #87	; 0x57
    4d32:	4563      	cmp	r3, ip
    4d34:	dce7      	bgt.n	4d06 <_strtol_l.constprop.0+0x7a>
    4d36:	1c6b      	adds	r3, r5, #1
    4d38:	d027      	beq.n	4d8a <_strtol_l.constprop.0+0xfe>
    4d3a:	b98c      	cbnz	r4, 4d60 <_strtol_l.constprop.0+0xd4>
    4d3c:	b10a      	cbz	r2, 4d42 <_strtol_l.constprop.0+0xb6>
    4d3e:	bba5      	cbnz	r5, 4daa <_strtol_l.constprop.0+0x11e>
    4d40:	6011      	str	r1, [r2, #0]
    4d42:	4630      	mov	r0, r6
    4d44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4d48:	45e2      	cmp	sl, ip
    4d4a:	dac9      	bge.n	4ce0 <_strtol_l.constprop.0+0x54>
    4d4c:	f04f 35ff 	mov.w	r5, #4294967295
    4d50:	e7c9      	b.n	4ce6 <_strtol_l.constprop.0+0x5a>
    4d52:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
    4d56:	d005      	beq.n	4d64 <_strtol_l.constprop.0+0xd8>
    4d58:	f04f 080a 	mov.w	r8, #10
    4d5c:	4643      	mov	r3, r8
    4d5e:	e7b7      	b.n	4cd0 <_strtol_l.constprop.0+0x44>
    4d60:	4276      	negs	r6, r6
    4d62:	e7eb      	b.n	4d3c <_strtol_l.constprop.0+0xb0>
    4d64:	f89e 3000 	ldrb.w	r3, [lr]
    4d68:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    4d6c:	2b58      	cmp	r3, #88	; 0x58
    4d6e:	d121      	bne.n	4db4 <_strtol_l.constprop.0+0x128>
    4d70:	f04f 0810 	mov.w	r8, #16
    4d74:	f89e b001 	ldrb.w	fp, [lr, #1]
    4d78:	4643      	mov	r3, r8
    4d7a:	f10e 0e02 	add.w	lr, lr, #2
    4d7e:	e7a7      	b.n	4cd0 <_strtol_l.constprop.0+0x44>
    4d80:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
    4d84:	d01a      	beq.n	4dbc <_strtol_l.constprop.0+0x130>
    4d86:	4698      	mov	r8, r3
    4d88:	e7a2      	b.n	4cd0 <_strtol_l.constprop.0+0x44>
    4d8a:	2322      	movs	r3, #34	; 0x22
    4d8c:	6003      	str	r3, [r0, #0]
    4d8e:	b172      	cbz	r2, 4dae <_strtol_l.constprop.0+0x122>
    4d90:	f10e 31ff 	add.w	r1, lr, #4294967295
    4d94:	464e      	mov	r6, r9
    4d96:	6011      	str	r1, [r2, #0]
    4d98:	e7d3      	b.n	4d42 <_strtol_l.constprop.0+0xb6>
    4d9a:	f89e b000 	ldrb.w	fp, [lr]
    4d9e:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
    4da2:	f106 0e02 	add.w	lr, r6, #2
    4da6:	2401      	movs	r4, #1
    4da8:	e78e      	b.n	4cc8 <_strtol_l.constprop.0+0x3c>
    4daa:	46b1      	mov	r9, r6
    4dac:	e7f0      	b.n	4d90 <_strtol_l.constprop.0+0x104>
    4dae:	464e      	mov	r6, r9
    4db0:	4630      	mov	r0, r6
    4db2:	e7c7      	b.n	4d44 <_strtol_l.constprop.0+0xb8>
    4db4:	f04f 0808 	mov.w	r8, #8
    4db8:	4643      	mov	r3, r8
    4dba:	e789      	b.n	4cd0 <_strtol_l.constprop.0+0x44>
    4dbc:	f89e 5000 	ldrb.w	r5, [lr]
    4dc0:	f005 05df 	and.w	r5, r5, #223	; 0xdf
    4dc4:	2d58      	cmp	r5, #88	; 0x58
    4dc6:	d0d3      	beq.n	4d70 <_strtol_l.constprop.0+0xe4>
    4dc8:	4698      	mov	r8, r3
    4dca:	e781      	b.n	4cd0 <_strtol_l.constprop.0+0x44>
    4dcc:	20000731 	.word	0x20000731

00004dd0 <_strtol_r>:
    4dd0:	f7ff bf5c 	b.w	4c8c <_strtol_l.constprop.0>

00004dd4 <stdio_exit_handler>:
    4dd4:	4a02      	ldr	r2, [pc, #8]	; (4de0 <stdio_exit_handler+0xc>)
    4dd6:	4903      	ldr	r1, [pc, #12]	; (4de4 <stdio_exit_handler+0x10>)
    4dd8:	4803      	ldr	r0, [pc, #12]	; (4de8 <stdio_exit_handler+0x14>)
    4dda:	f000 b8bb 	b.w	4f54 <_fwalk_sglue>
    4dde:	bf00      	nop
    4de0:	20007fb4 	.word	0x20007fb4
    4de4:	0000a1dd 	.word	0x0000a1dd
    4de8:	20007830 	.word	0x20007830

00004dec <cleanup_stdio>:
    4dec:	4b0c      	ldr	r3, [pc, #48]	; (4e20 <cleanup_stdio+0x34>)
    4dee:	6841      	ldr	r1, [r0, #4]
    4df0:	4299      	cmp	r1, r3
    4df2:	b510      	push	{r4, lr}
    4df4:	4604      	mov	r4, r0
    4df6:	d001      	beq.n	4dfc <cleanup_stdio+0x10>
    4df8:	f005 f9f0 	bl	a1dc <_fclose_r>
    4dfc:	68a1      	ldr	r1, [r4, #8]
    4dfe:	4b09      	ldr	r3, [pc, #36]	; (4e24 <cleanup_stdio+0x38>)
    4e00:	4299      	cmp	r1, r3
    4e02:	d002      	beq.n	4e0a <cleanup_stdio+0x1e>
    4e04:	4620      	mov	r0, r4
    4e06:	f005 f9e9 	bl	a1dc <_fclose_r>
    4e0a:	68e1      	ldr	r1, [r4, #12]
    4e0c:	4b06      	ldr	r3, [pc, #24]	; (4e28 <cleanup_stdio+0x3c>)
    4e0e:	4299      	cmp	r1, r3
    4e10:	d004      	beq.n	4e1c <cleanup_stdio+0x30>
    4e12:	4620      	mov	r0, r4
    4e14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4e18:	f005 b9e0 	b.w	a1dc <_fclose_r>
    4e1c:	bd10      	pop	{r4, pc}
    4e1e:	bf00      	nop
    4e20:	20008ae4 	.word	0x20008ae4
    4e24:	20008b4c 	.word	0x20008b4c
    4e28:	20008bb4 	.word	0x20008bb4

00004e2c <global_stdio_init.part.0>:
    4e2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4e30:	4c2a      	ldr	r4, [pc, #168]	; (4edc <global_stdio_init.part.0+0xb0>)
    4e32:	4b2b      	ldr	r3, [pc, #172]	; (4ee0 <global_stdio_init.part.0+0xb4>)
    4e34:	482b      	ldr	r0, [pc, #172]	; (4ee4 <global_stdio_init.part.0+0xb8>)
    4e36:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 4ef8 <global_stdio_init.part.0+0xcc>
    4e3a:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 4efc <global_stdio_init.part.0+0xd0>
    4e3e:	4f2a      	ldr	r7, [pc, #168]	; (4ee8 <global_stdio_init.part.0+0xbc>)
    4e40:	6018      	str	r0, [r3, #0]
    4e42:	2500      	movs	r5, #0
    4e44:	2304      	movs	r3, #4
    4e46:	2208      	movs	r2, #8
    4e48:	4629      	mov	r1, r5
    4e4a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    4e4e:	4e27      	ldr	r6, [pc, #156]	; (4eec <global_stdio_init.part.0+0xc0>)
    4e50:	6665      	str	r5, [r4, #100]	; 0x64
    4e52:	e9c4 5302 	strd	r5, r3, [r4, #8]
    4e56:	e9c4 5500 	strd	r5, r5, [r4]
    4e5a:	e9c4 5504 	strd	r5, r5, [r4, #16]
    4e5e:	61a5      	str	r5, [r4, #24]
    4e60:	f000 f9c4 	bl	51ec <memset>
    4e64:	4b22      	ldr	r3, [pc, #136]	; (4ef0 <global_stdio_init.part.0+0xc4>)
    4e66:	6763      	str	r3, [r4, #116]	; 0x74
    4e68:	2208      	movs	r2, #8
    4e6a:	4629      	mov	r1, r5
    4e6c:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    4e70:	e9c4 4907 	strd	r4, r9, [r4, #28]
    4e74:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
    4e78:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
    4e7c:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
    4e80:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
    4e84:	6725      	str	r5, [r4, #112]	; 0x70
    4e86:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    4e8a:	62e6      	str	r6, [r4, #44]	; 0x2c
    4e8c:	f000 f9ae 	bl	51ec <memset>
    4e90:	4b18      	ldr	r3, [pc, #96]	; (4ef4 <global_stdio_init.part.0+0xc8>)
    4e92:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    4e96:	4629      	mov	r1, r5
    4e98:	f104 0368 	add.w	r3, r4, #104	; 0x68
    4e9c:	2208      	movs	r2, #8
    4e9e:	f504 7096 	add.w	r0, r4, #300	; 0x12c
    4ea2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    4ea6:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
    4eaa:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
    4eae:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
    4eb2:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
    4eb6:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    4eba:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
    4ebe:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    4ec2:	f000 f993 	bl	51ec <memset>
    4ec6:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    4eca:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
    4ece:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
    4ed2:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    4ed6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4eda:	bf00      	nop
    4edc:	20008ae4 	.word	0x20008ae4
    4ee0:	20008c1c 	.word	0x20008c1c
    4ee4:	00004dd5 	.word	0x00004dd5
    4ee8:	0000505d 	.word	0x0000505d
    4eec:	0000507d 	.word	0x0000507d
    4ef0:	00010009 	.word	0x00010009
    4ef4:	00020012 	.word	0x00020012
    4ef8:	00004ff5 	.word	0x00004ff5
    4efc:	0000501d 	.word	0x0000501d

00004f00 <__sinit>:
    4f00:	b510      	push	{r4, lr}
    4f02:	4604      	mov	r4, r0
    4f04:	480a      	ldr	r0, [pc, #40]	; (4f30 <__sinit+0x30>)
    4f06:	f000 fad5 	bl	54b4 <__retarget_lock_acquire_recursive>
    4f0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4f0c:	b923      	cbnz	r3, 4f18 <__sinit+0x18>
    4f0e:	4b09      	ldr	r3, [pc, #36]	; (4f34 <__sinit+0x34>)
    4f10:	4a09      	ldr	r2, [pc, #36]	; (4f38 <__sinit+0x38>)
    4f12:	681b      	ldr	r3, [r3, #0]
    4f14:	6362      	str	r2, [r4, #52]	; 0x34
    4f16:	b123      	cbz	r3, 4f22 <__sinit+0x22>
    4f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4f1c:	4804      	ldr	r0, [pc, #16]	; (4f30 <__sinit+0x30>)
    4f1e:	f000 bacb 	b.w	54b8 <__retarget_lock_release_recursive>
    4f22:	f7ff ff83 	bl	4e2c <global_stdio_init.part.0>
    4f26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4f2a:	4801      	ldr	r0, [pc, #4]	; (4f30 <__sinit+0x30>)
    4f2c:	f000 bac4 	b.w	54b8 <__retarget_lock_release_recursive>
    4f30:	20008aac 	.word	0x20008aac
    4f34:	20008c1c 	.word	0x20008c1c
    4f38:	00004ded 	.word	0x00004ded

00004f3c <__sfp_lock_acquire>:
    4f3c:	4801      	ldr	r0, [pc, #4]	; (4f44 <__sfp_lock_acquire+0x8>)
    4f3e:	f000 bab9 	b.w	54b4 <__retarget_lock_acquire_recursive>
    4f42:	bf00      	nop
    4f44:	20008aac 	.word	0x20008aac

00004f48 <__sfp_lock_release>:
    4f48:	4801      	ldr	r0, [pc, #4]	; (4f50 <__sfp_lock_release+0x8>)
    4f4a:	f000 bab5 	b.w	54b8 <__retarget_lock_release_recursive>
    4f4e:	bf00      	nop
    4f50:	20008aac 	.word	0x20008aac

00004f54 <_fwalk_sglue>:
    4f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4f58:	4680      	mov	r8, r0
    4f5a:	460f      	mov	r7, r1
    4f5c:	4616      	mov	r6, r2
    4f5e:	f04f 0900 	mov.w	r9, #0
    4f62:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
    4f66:	3d01      	subs	r5, #1
    4f68:	d411      	bmi.n	4f8e <_fwalk_sglue+0x3a>
    4f6a:	89a3      	ldrh	r3, [r4, #12]
    4f6c:	2b01      	cmp	r3, #1
    4f6e:	f105 35ff 	add.w	r5, r5, #4294967295
    4f72:	d908      	bls.n	4f86 <_fwalk_sglue+0x32>
    4f74:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    4f78:	3301      	adds	r3, #1
    4f7a:	4621      	mov	r1, r4
    4f7c:	d003      	beq.n	4f86 <_fwalk_sglue+0x32>
    4f7e:	4640      	mov	r0, r8
    4f80:	47b8      	blx	r7
    4f82:	ea49 0900 	orr.w	r9, r9, r0
    4f86:	1c6b      	adds	r3, r5, #1
    4f88:	f104 0468 	add.w	r4, r4, #104	; 0x68
    4f8c:	d1ed      	bne.n	4f6a <_fwalk_sglue+0x16>
    4f8e:	6836      	ldr	r6, [r6, #0]
    4f90:	2e00      	cmp	r6, #0
    4f92:	d1e6      	bne.n	4f62 <_fwalk_sglue+0xe>
    4f94:	4648      	mov	r0, r9
    4f96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4f9a:	bf00      	nop

00004f9c <sscanf>:
    4f9c:	b40e      	push	{r1, r2, r3}
    4f9e:	b510      	push	{r4, lr}
    4fa0:	b09f      	sub	sp, #124	; 0x7c
    4fa2:	ac21      	add	r4, sp, #132	; 0x84
    4fa4:	f44f 7101 	mov.w	r1, #516	; 0x204
    4fa8:	f854 2b04 	ldr.w	r2, [r4], #4
    4fac:	9201      	str	r2, [sp, #4]
    4fae:	f8ad 101c 	strh.w	r1, [sp, #28]
    4fb2:	9004      	str	r0, [sp, #16]
    4fb4:	9008      	str	r0, [sp, #32]
    4fb6:	f000 fc03 	bl	57c0 <strlen>
    4fba:	9005      	str	r0, [sp, #20]
    4fbc:	9009      	str	r0, [sp, #36]	; 0x24
    4fbe:	480b      	ldr	r0, [pc, #44]	; (4fec <sscanf+0x50>)
    4fc0:	490b      	ldr	r1, [pc, #44]	; (4ff0 <sscanf+0x54>)
    4fc2:	910c      	str	r1, [sp, #48]	; 0x30
    4fc4:	2300      	movs	r3, #0
    4fc6:	f64f 7cff 	movw	ip, #65535	; 0xffff
    4fca:	9310      	str	r3, [sp, #64]	; 0x40
    4fcc:	9315      	str	r3, [sp, #84]	; 0x54
    4fce:	9a01      	ldr	r2, [sp, #4]
    4fd0:	6800      	ldr	r0, [r0, #0]
    4fd2:	f8ad c01e 	strh.w	ip, [sp, #30]
    4fd6:	4623      	mov	r3, r4
    4fd8:	a904      	add	r1, sp, #16
    4fda:	9403      	str	r4, [sp, #12]
    4fdc:	f003 fcd6 	bl	898c <__ssvfscanf_r>
    4fe0:	b01f      	add	sp, #124	; 0x7c
    4fe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4fe6:	b003      	add	sp, #12
    4fe8:	4770      	bx	lr
    4fea:	bf00      	nop
    4fec:	20007fc0 	.word	0x20007fc0
    4ff0:	00005019 	.word	0x00005019

00004ff4 <__sread>:
    4ff4:	b510      	push	{r4, lr}
    4ff6:	460c      	mov	r4, r1
    4ff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    4ffc:	f000 f9ee 	bl	53dc <_read_r>
    5000:	2800      	cmp	r0, #0
    5002:	db03      	blt.n	500c <__sread+0x18>
    5004:	6d23      	ldr	r3, [r4, #80]	; 0x50
    5006:	4403      	add	r3, r0
    5008:	6523      	str	r3, [r4, #80]	; 0x50
    500a:	bd10      	pop	{r4, pc}
    500c:	89a3      	ldrh	r3, [r4, #12]
    500e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    5012:	81a3      	strh	r3, [r4, #12]
    5014:	bd10      	pop	{r4, pc}
    5016:	bf00      	nop

00005018 <__seofread>:
    5018:	2000      	movs	r0, #0
    501a:	4770      	bx	lr

0000501c <__swrite>:
    501c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5020:	460c      	mov	r4, r1
    5022:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
    5026:	461f      	mov	r7, r3
    5028:	05cb      	lsls	r3, r1, #23
    502a:	4605      	mov	r5, r0
    502c:	4616      	mov	r6, r2
    502e:	d40b      	bmi.n	5048 <__swrite+0x2c>
    5030:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
    5034:	81a1      	strh	r1, [r4, #12]
    5036:	463b      	mov	r3, r7
    5038:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    503c:	4632      	mov	r2, r6
    503e:	4628      	mov	r0, r5
    5040:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5044:	f000 b9f2 	b.w	542c <_write_r>
    5048:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    504c:	2302      	movs	r3, #2
    504e:	2200      	movs	r2, #0
    5050:	f000 f9ae 	bl	53b0 <_lseek_r>
    5054:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
    5058:	e7ea      	b.n	5030 <__swrite+0x14>
    505a:	bf00      	nop

0000505c <__sseek>:
    505c:	b510      	push	{r4, lr}
    505e:	460c      	mov	r4, r1
    5060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    5064:	f000 f9a4 	bl	53b0 <_lseek_r>
    5068:	89a3      	ldrh	r3, [r4, #12]
    506a:	1c42      	adds	r2, r0, #1
    506c:	bf0e      	itee	eq
    506e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    5072:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    5076:	6520      	strne	r0, [r4, #80]	; 0x50
    5078:	81a3      	strh	r3, [r4, #12]
    507a:	bd10      	pop	{r4, pc}

0000507c <__sclose>:
    507c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    5080:	f000 b984 	b.w	538c <_close_r>

00005084 <vsnprintf>:
    5084:	b510      	push	{r4, lr}
    5086:	4c1a      	ldr	r4, [pc, #104]	; (50f0 <vsnprintf+0x6c>)
    5088:	2900      	cmp	r1, #0
    508a:	6824      	ldr	r4, [r4, #0]
    508c:	b09a      	sub	sp, #104	; 0x68
    508e:	db2a      	blt.n	50e6 <vsnprintf+0x62>
    5090:	9000      	str	r0, [sp, #0]
    5092:	9004      	str	r0, [sp, #16]
    5094:	f44f 7002 	mov.w	r0, #520	; 0x208
    5098:	f8ad 000c 	strh.w	r0, [sp, #12]
    509c:	d013      	beq.n	50c6 <vsnprintf+0x42>
    509e:	3901      	subs	r1, #1
    50a0:	f64f 70ff 	movw	r0, #65535	; 0xffff
    50a4:	9102      	str	r1, [sp, #8]
    50a6:	9105      	str	r1, [sp, #20]
    50a8:	f8ad 000e 	strh.w	r0, [sp, #14]
    50ac:	4669      	mov	r1, sp
    50ae:	4620      	mov	r0, r4
    50b0:	f001 feca 	bl	6e48 <_svfprintf_r>
    50b4:	1c42      	adds	r2, r0, #1
    50b6:	da01      	bge.n	50bc <vsnprintf+0x38>
    50b8:	238b      	movs	r3, #139	; 0x8b
    50ba:	6023      	str	r3, [r4, #0]
    50bc:	9b00      	ldr	r3, [sp, #0]
    50be:	2200      	movs	r2, #0
    50c0:	701a      	strb	r2, [r3, #0]
    50c2:	b01a      	add	sp, #104	; 0x68
    50c4:	bd10      	pop	{r4, pc}
    50c6:	f64f 70ff 	movw	r0, #65535	; 0xffff
    50ca:	9102      	str	r1, [sp, #8]
    50cc:	9105      	str	r1, [sp, #20]
    50ce:	f8ad 000e 	strh.w	r0, [sp, #14]
    50d2:	4669      	mov	r1, sp
    50d4:	4620      	mov	r0, r4
    50d6:	f001 feb7 	bl	6e48 <_svfprintf_r>
    50da:	1c43      	adds	r3, r0, #1
    50dc:	da01      	bge.n	50e2 <vsnprintf+0x5e>
    50de:	238b      	movs	r3, #139	; 0x8b
    50e0:	6023      	str	r3, [r4, #0]
    50e2:	b01a      	add	sp, #104	; 0x68
    50e4:	bd10      	pop	{r4, pc}
    50e6:	238b      	movs	r3, #139	; 0x8b
    50e8:	6023      	str	r3, [r4, #0]
    50ea:	f04f 30ff 	mov.w	r0, #4294967295
    50ee:	e7f8      	b.n	50e2 <vsnprintf+0x5e>
    50f0:	20007fc0 	.word	0x20007fc0

000050f4 <memmove>:
    50f4:	4288      	cmp	r0, r1
    50f6:	d90d      	bls.n	5114 <memmove+0x20>
    50f8:	188b      	adds	r3, r1, r2
    50fa:	4283      	cmp	r3, r0
    50fc:	d90a      	bls.n	5114 <memmove+0x20>
    50fe:	eb00 0c02 	add.w	ip, r0, r2
    5102:	b1ba      	cbz	r2, 5134 <memmove+0x40>
    5104:	4662      	mov	r2, ip
    5106:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
    510a:	f802 cd01 	strb.w	ip, [r2, #-1]!
    510e:	4299      	cmp	r1, r3
    5110:	d1f9      	bne.n	5106 <memmove+0x12>
    5112:	4770      	bx	lr
    5114:	2a0f      	cmp	r2, #15
    5116:	d80e      	bhi.n	5136 <memmove+0x42>
    5118:	4603      	mov	r3, r0
    511a:	f102 3cff 	add.w	ip, r2, #4294967295
    511e:	b14a      	cbz	r2, 5134 <memmove+0x40>
    5120:	f10c 0c01 	add.w	ip, ip, #1
    5124:	3b01      	subs	r3, #1
    5126:	448c      	add	ip, r1
    5128:	f811 2b01 	ldrb.w	r2, [r1], #1
    512c:	f803 2f01 	strb.w	r2, [r3, #1]!
    5130:	4561      	cmp	r1, ip
    5132:	d1f9      	bne.n	5128 <memmove+0x34>
    5134:	4770      	bx	lr
    5136:	ea40 0301 	orr.w	r3, r0, r1
    513a:	079b      	lsls	r3, r3, #30
    513c:	d150      	bne.n	51e0 <memmove+0xec>
    513e:	f1a2 0310 	sub.w	r3, r2, #16
    5142:	b570      	push	{r4, r5, r6, lr}
    5144:	f101 0c20 	add.w	ip, r1, #32
    5148:	f023 050f 	bic.w	r5, r3, #15
    514c:	f101 0e10 	add.w	lr, r1, #16
    5150:	f100 0410 	add.w	r4, r0, #16
    5154:	44ac      	add	ip, r5
    5156:	091b      	lsrs	r3, r3, #4
    5158:	f85e 5c10 	ldr.w	r5, [lr, #-16]
    515c:	f844 5c10 	str.w	r5, [r4, #-16]
    5160:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
    5164:	f844 5c0c 	str.w	r5, [r4, #-12]
    5168:	f85e 5c08 	ldr.w	r5, [lr, #-8]
    516c:	f844 5c08 	str.w	r5, [r4, #-8]
    5170:	f85e 5c04 	ldr.w	r5, [lr, #-4]
    5174:	f844 5c04 	str.w	r5, [r4, #-4]
    5178:	f10e 0e10 	add.w	lr, lr, #16
    517c:	45e6      	cmp	lr, ip
    517e:	f104 0410 	add.w	r4, r4, #16
    5182:	d1e9      	bne.n	5158 <memmove+0x64>
    5184:	3301      	adds	r3, #1
    5186:	f012 0f0c 	tst.w	r2, #12
    518a:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    518e:	f002 040f 	and.w	r4, r2, #15
    5192:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    5196:	d027      	beq.n	51e8 <memmove+0xf4>
    5198:	3c04      	subs	r4, #4
    519a:	f024 0603 	bic.w	r6, r4, #3
    519e:	ea4f 0c94 	mov.w	ip, r4, lsr #2
    51a2:	441e      	add	r6, r3
    51a4:	1f1c      	subs	r4, r3, #4
    51a6:	468e      	mov	lr, r1
    51a8:	f85e 5b04 	ldr.w	r5, [lr], #4
    51ac:	f844 5f04 	str.w	r5, [r4, #4]!
    51b0:	42b4      	cmp	r4, r6
    51b2:	d1f9      	bne.n	51a8 <memmove+0xb4>
    51b4:	f10c 0401 	add.w	r4, ip, #1
    51b8:	f002 0203 	and.w	r2, r2, #3
    51bc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    51c0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    51c4:	f102 3cff 	add.w	ip, r2, #4294967295
    51c8:	b14a      	cbz	r2, 51de <memmove+0xea>
    51ca:	f10c 0c01 	add.w	ip, ip, #1
    51ce:	3b01      	subs	r3, #1
    51d0:	448c      	add	ip, r1
    51d2:	f811 2b01 	ldrb.w	r2, [r1], #1
    51d6:	f803 2f01 	strb.w	r2, [r3, #1]!
    51da:	4561      	cmp	r1, ip
    51dc:	d1f9      	bne.n	51d2 <memmove+0xde>
    51de:	bd70      	pop	{r4, r5, r6, pc}
    51e0:	f102 3cff 	add.w	ip, r2, #4294967295
    51e4:	4603      	mov	r3, r0
    51e6:	e79b      	b.n	5120 <memmove+0x2c>
    51e8:	4622      	mov	r2, r4
    51ea:	e7eb      	b.n	51c4 <memmove+0xd0>

000051ec <memset>:
    51ec:	0783      	lsls	r3, r0, #30
    51ee:	b530      	push	{r4, r5, lr}
    51f0:	d048      	beq.n	5284 <memset+0x98>
    51f2:	1e54      	subs	r4, r2, #1
    51f4:	2a00      	cmp	r2, #0
    51f6:	d03f      	beq.n	5278 <memset+0x8c>
    51f8:	b2ca      	uxtb	r2, r1
    51fa:	4603      	mov	r3, r0
    51fc:	e001      	b.n	5202 <memset+0x16>
    51fe:	3c01      	subs	r4, #1
    5200:	d33a      	bcc.n	5278 <memset+0x8c>
    5202:	f803 2b01 	strb.w	r2, [r3], #1
    5206:	079d      	lsls	r5, r3, #30
    5208:	d1f9      	bne.n	51fe <memset+0x12>
    520a:	2c03      	cmp	r4, #3
    520c:	d92d      	bls.n	526a <memset+0x7e>
    520e:	b2cd      	uxtb	r5, r1
    5210:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    5214:	2c0f      	cmp	r4, #15
    5216:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    521a:	d936      	bls.n	528a <memset+0x9e>
    521c:	f1a4 0210 	sub.w	r2, r4, #16
    5220:	f022 0c0f 	bic.w	ip, r2, #15
    5224:	f103 0e20 	add.w	lr, r3, #32
    5228:	44e6      	add	lr, ip
    522a:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    522e:	f103 0210 	add.w	r2, r3, #16
    5232:	e942 5504 	strd	r5, r5, [r2, #-16]
    5236:	e942 5502 	strd	r5, r5, [r2, #-8]
    523a:	3210      	adds	r2, #16
    523c:	4572      	cmp	r2, lr
    523e:	d1f8      	bne.n	5232 <memset+0x46>
    5240:	f10c 0201 	add.w	r2, ip, #1
    5244:	f014 0f0c 	tst.w	r4, #12
    5248:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    524c:	f004 0c0f 	and.w	ip, r4, #15
    5250:	d013      	beq.n	527a <memset+0x8e>
    5252:	f1ac 0304 	sub.w	r3, ip, #4
    5256:	f023 0303 	bic.w	r3, r3, #3
    525a:	3304      	adds	r3, #4
    525c:	4413      	add	r3, r2
    525e:	f842 5b04 	str.w	r5, [r2], #4
    5262:	4293      	cmp	r3, r2
    5264:	d1fb      	bne.n	525e <memset+0x72>
    5266:	f00c 0403 	and.w	r4, ip, #3
    526a:	b12c      	cbz	r4, 5278 <memset+0x8c>
    526c:	b2c9      	uxtb	r1, r1
    526e:	441c      	add	r4, r3
    5270:	f803 1b01 	strb.w	r1, [r3], #1
    5274:	429c      	cmp	r4, r3
    5276:	d1fb      	bne.n	5270 <memset+0x84>
    5278:	bd30      	pop	{r4, r5, pc}
    527a:	4664      	mov	r4, ip
    527c:	4613      	mov	r3, r2
    527e:	2c00      	cmp	r4, #0
    5280:	d1f4      	bne.n	526c <memset+0x80>
    5282:	e7f9      	b.n	5278 <memset+0x8c>
    5284:	4603      	mov	r3, r0
    5286:	4614      	mov	r4, r2
    5288:	e7bf      	b.n	520a <memset+0x1e>
    528a:	461a      	mov	r2, r3
    528c:	46a4      	mov	ip, r4
    528e:	e7e0      	b.n	5252 <memset+0x66>

00005290 <strncmp>:
    5290:	2a00      	cmp	r2, #0
    5292:	d03e      	beq.n	5312 <strncmp+0x82>
    5294:	ea40 0301 	orr.w	r3, r0, r1
    5298:	079b      	lsls	r3, r3, #30
    529a:	b530      	push	{r4, r5, lr}
    529c:	4684      	mov	ip, r0
    529e:	d12f      	bne.n	5300 <strncmp+0x70>
    52a0:	2a03      	cmp	r2, #3
    52a2:	d92d      	bls.n	5300 <strncmp+0x70>
    52a4:	460b      	mov	r3, r1
    52a6:	e008      	b.n	52ba <strncmp+0x2a>
    52a8:	3a04      	subs	r2, #4
    52aa:	4684      	mov	ip, r0
    52ac:	4619      	mov	r1, r3
    52ae:	d025      	beq.n	52fc <strncmp+0x6c>
    52b0:	f01e 3f80 	tst.w	lr, #2155905152	; 0x80808080
    52b4:	d122      	bne.n	52fc <strncmp+0x6c>
    52b6:	2a03      	cmp	r2, #3
    52b8:	d922      	bls.n	5300 <strncmp+0x70>
    52ba:	6804      	ldr	r4, [r0, #0]
    52bc:	4619      	mov	r1, r3
    52be:	f853 5b04 	ldr.w	r5, [r3], #4
    52c2:	f1a4 3e01 	sub.w	lr, r4, #16843009	; 0x1010101
    52c6:	42ac      	cmp	r4, r5
    52c8:	4684      	mov	ip, r0
    52ca:	ea2e 0e04 	bic.w	lr, lr, r4
    52ce:	f100 0004 	add.w	r0, r0, #4
    52d2:	d0e9      	beq.n	52a8 <strncmp+0x18>
    52d4:	f89c 0000 	ldrb.w	r0, [ip]
    52d8:	780c      	ldrb	r4, [r1, #0]
    52da:	42a0      	cmp	r0, r4
    52dc:	d11b      	bne.n	5316 <strncmp+0x86>
    52de:	46e6      	mov	lr, ip
    52e0:	b168      	cbz	r0, 52fe <strncmp+0x6e>
    52e2:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
    52e6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    52ea:	eba2 030e 	sub.w	r3, r2, lr
    52ee:	42a0      	cmp	r0, r4
    52f0:	f103 33ff 	add.w	r3, r3, #4294967295
    52f4:	d10f      	bne.n	5316 <strncmp+0x86>
    52f6:	eb1c 0303 	adds.w	r3, ip, r3
    52fa:	d1f1      	bne.n	52e0 <strncmp+0x50>
    52fc:	2000      	movs	r0, #0
    52fe:	bd30      	pop	{r4, r5, pc}
    5300:	f89c 0000 	ldrb.w	r0, [ip]
    5304:	780c      	ldrb	r4, [r1, #0]
    5306:	4284      	cmp	r4, r0
    5308:	d105      	bne.n	5316 <strncmp+0x86>
    530a:	2a01      	cmp	r2, #1
    530c:	d0f6      	beq.n	52fc <strncmp+0x6c>
    530e:	46e6      	mov	lr, ip
    5310:	e7e6      	b.n	52e0 <strncmp+0x50>
    5312:	4610      	mov	r0, r2
    5314:	4770      	bx	lr
    5316:	1b00      	subs	r0, r0, r4
    5318:	bd30      	pop	{r4, r5, pc}
    531a:	bf00      	nop

0000531c <strncpy>:
    531c:	ea40 0301 	orr.w	r3, r0, r1
    5320:	079b      	lsls	r3, r3, #30
    5322:	b530      	push	{r4, r5, lr}
    5324:	d101      	bne.n	532a <strncpy+0xe>
    5326:	2a03      	cmp	r2, #3
    5328:	d80f      	bhi.n	534a <strncpy+0x2e>
    532a:	4684      	mov	ip, r0
    532c:	f101 3eff 	add.w	lr, r1, #4294967295
    5330:	e007      	b.n	5342 <strncpy+0x26>
    5332:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    5336:	f803 1b01 	strb.w	r1, [r3], #1
    533a:	1e54      	subs	r4, r2, #1
    533c:	b1c1      	cbz	r1, 5370 <strncpy+0x54>
    533e:	469c      	mov	ip, r3
    5340:	4622      	mov	r2, r4
    5342:	4663      	mov	r3, ip
    5344:	2a00      	cmp	r2, #0
    5346:	d1f4      	bne.n	5332 <strncpy+0x16>
    5348:	bd30      	pop	{r4, r5, pc}
    534a:	460b      	mov	r3, r1
    534c:	4684      	mov	ip, r0
    534e:	4619      	mov	r1, r3
    5350:	f853 5b04 	ldr.w	r5, [r3], #4
    5354:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
    5358:	ea24 0405 	bic.w	r4, r4, r5
    535c:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    5360:	d1e4      	bne.n	532c <strncpy+0x10>
    5362:	3a04      	subs	r2, #4
    5364:	2a03      	cmp	r2, #3
    5366:	f84c 5b04 	str.w	r5, [ip], #4
    536a:	4619      	mov	r1, r3
    536c:	d8ef      	bhi.n	534e <strncpy+0x32>
    536e:	e7dd      	b.n	532c <strncpy+0x10>
    5370:	4494      	add	ip, r2
    5372:	2c00      	cmp	r4, #0
    5374:	d0e8      	beq.n	5348 <strncpy+0x2c>
    5376:	f803 1b01 	strb.w	r1, [r3], #1
    537a:	4563      	cmp	r3, ip
    537c:	d1fb      	bne.n	5376 <strncpy+0x5a>
    537e:	bd30      	pop	{r4, r5, pc}

00005380 <__locale_mb_cur_max>:
    5380:	4b01      	ldr	r3, [pc, #4]	; (5388 <__locale_mb_cur_max+0x8>)
    5382:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
    5386:	4770      	bx	lr
    5388:	20007a38 	.word	0x20007a38

0000538c <_close_r>:
    538c:	b538      	push	{r3, r4, r5, lr}
    538e:	4d07      	ldr	r5, [pc, #28]	; (53ac <_close_r+0x20>)
    5390:	2200      	movs	r2, #0
    5392:	4604      	mov	r4, r0
    5394:	4608      	mov	r0, r1
    5396:	602a      	str	r2, [r5, #0]
    5398:	f7fc fbc4 	bl	1b24 <_close>
    539c:	1c43      	adds	r3, r0, #1
    539e:	d000      	beq.n	53a2 <_close_r+0x16>
    53a0:	bd38      	pop	{r3, r4, r5, pc}
    53a2:	682b      	ldr	r3, [r5, #0]
    53a4:	2b00      	cmp	r3, #0
    53a6:	d0fb      	beq.n	53a0 <_close_r+0x14>
    53a8:	6023      	str	r3, [r4, #0]
    53aa:	bd38      	pop	{r3, r4, r5, pc}
    53ac:	20008c38 	.word	0x20008c38

000053b0 <_lseek_r>:
    53b0:	b538      	push	{r3, r4, r5, lr}
    53b2:	460c      	mov	r4, r1
    53b4:	4d08      	ldr	r5, [pc, #32]	; (53d8 <_lseek_r+0x28>)
    53b6:	4684      	mov	ip, r0
    53b8:	4611      	mov	r1, r2
    53ba:	4620      	mov	r0, r4
    53bc:	461a      	mov	r2, r3
    53be:	2300      	movs	r3, #0
    53c0:	602b      	str	r3, [r5, #0]
    53c2:	4664      	mov	r4, ip
    53c4:	f7fc fbba 	bl	1b3c <_lseek>
    53c8:	1c43      	adds	r3, r0, #1
    53ca:	d000      	beq.n	53ce <_lseek_r+0x1e>
    53cc:	bd38      	pop	{r3, r4, r5, pc}
    53ce:	682b      	ldr	r3, [r5, #0]
    53d0:	2b00      	cmp	r3, #0
    53d2:	d0fb      	beq.n	53cc <_lseek_r+0x1c>
    53d4:	6023      	str	r3, [r4, #0]
    53d6:	bd38      	pop	{r3, r4, r5, pc}
    53d8:	20008c38 	.word	0x20008c38

000053dc <_read_r>:
    53dc:	b538      	push	{r3, r4, r5, lr}
    53de:	460c      	mov	r4, r1
    53e0:	4d08      	ldr	r5, [pc, #32]	; (5404 <_read_r+0x28>)
    53e2:	4684      	mov	ip, r0
    53e4:	4611      	mov	r1, r2
    53e6:	4620      	mov	r0, r4
    53e8:	461a      	mov	r2, r3
    53ea:	2300      	movs	r3, #0
    53ec:	602b      	str	r3, [r5, #0]
    53ee:	4664      	mov	r4, ip
    53f0:	f7fc fb96 	bl	1b20 <_read>
    53f4:	1c43      	adds	r3, r0, #1
    53f6:	d000      	beq.n	53fa <_read_r+0x1e>
    53f8:	bd38      	pop	{r3, r4, r5, pc}
    53fa:	682b      	ldr	r3, [r5, #0]
    53fc:	2b00      	cmp	r3, #0
    53fe:	d0fb      	beq.n	53f8 <_read_r+0x1c>
    5400:	6023      	str	r3, [r4, #0]
    5402:	bd38      	pop	{r3, r4, r5, pc}
    5404:	20008c38 	.word	0x20008c38

00005408 <_sbrk_r>:
    5408:	b538      	push	{r3, r4, r5, lr}
    540a:	4d07      	ldr	r5, [pc, #28]	; (5428 <_sbrk_r+0x20>)
    540c:	2200      	movs	r2, #0
    540e:	4604      	mov	r4, r0
    5410:	4608      	mov	r0, r1
    5412:	602a      	str	r2, [r5, #0]
    5414:	f7fc fb6a 	bl	1aec <_sbrk>
    5418:	1c43      	adds	r3, r0, #1
    541a:	d000      	beq.n	541e <_sbrk_r+0x16>
    541c:	bd38      	pop	{r3, r4, r5, pc}
    541e:	682b      	ldr	r3, [r5, #0]
    5420:	2b00      	cmp	r3, #0
    5422:	d0fb      	beq.n	541c <_sbrk_r+0x14>
    5424:	6023      	str	r3, [r4, #0]
    5426:	bd38      	pop	{r3, r4, r5, pc}
    5428:	20008c38 	.word	0x20008c38

0000542c <_write_r>:
    542c:	b538      	push	{r3, r4, r5, lr}
    542e:	460c      	mov	r4, r1
    5430:	4d08      	ldr	r5, [pc, #32]	; (5454 <_write_r+0x28>)
    5432:	4684      	mov	ip, r0
    5434:	4611      	mov	r1, r2
    5436:	4620      	mov	r0, r4
    5438:	461a      	mov	r2, r3
    543a:	2300      	movs	r3, #0
    543c:	602b      	str	r3, [r5, #0]
    543e:	4664      	mov	r4, ip
    5440:	f7fb ff2a 	bl	1298 <_write>
    5444:	1c43      	adds	r3, r0, #1
    5446:	d000      	beq.n	544a <_write_r+0x1e>
    5448:	bd38      	pop	{r3, r4, r5, pc}
    544a:	682b      	ldr	r3, [r5, #0]
    544c:	2b00      	cmp	r3, #0
    544e:	d0fb      	beq.n	5448 <_write_r+0x1c>
    5450:	6023      	str	r3, [r4, #0]
    5452:	bd38      	pop	{r3, r4, r5, pc}
    5454:	20008c38 	.word	0x20008c38

00005458 <__errno>:
    5458:	4b01      	ldr	r3, [pc, #4]	; (5460 <__errno+0x8>)
    545a:	6818      	ldr	r0, [r3, #0]
    545c:	4770      	bx	lr
    545e:	bf00      	nop
    5460:	20007fc0 	.word	0x20007fc0

00005464 <__libc_init_array>:
    5464:	b570      	push	{r4, r5, r6, lr}
    5466:	4e0d      	ldr	r6, [pc, #52]	; (549c <__libc_init_array+0x38>)
    5468:	4d0d      	ldr	r5, [pc, #52]	; (54a0 <__libc_init_array+0x3c>)
    546a:	1b76      	subs	r6, r6, r5
    546c:	10b6      	asrs	r6, r6, #2
    546e:	d006      	beq.n	547e <__libc_init_array+0x1a>
    5470:	2400      	movs	r4, #0
    5472:	f855 3b04 	ldr.w	r3, [r5], #4
    5476:	3401      	adds	r4, #1
    5478:	4798      	blx	r3
    547a:	42a6      	cmp	r6, r4
    547c:	d1f9      	bne.n	5472 <__libc_init_array+0xe>
    547e:	4e09      	ldr	r6, [pc, #36]	; (54a4 <__libc_init_array+0x40>)
    5480:	4d09      	ldr	r5, [pc, #36]	; (54a8 <__libc_init_array+0x44>)
    5482:	1b76      	subs	r6, r6, r5
    5484:	f008 fba4 	bl	dbd0 <___init_veneer>
    5488:	10b6      	asrs	r6, r6, #2
    548a:	d006      	beq.n	549a <__libc_init_array+0x36>
    548c:	2400      	movs	r4, #0
    548e:	f855 3b04 	ldr.w	r3, [r5], #4
    5492:	3401      	adds	r4, #1
    5494:	4798      	blx	r3
    5496:	42a6      	cmp	r6, r4
    5498:	d1f9      	bne.n	548e <__libc_init_array+0x2a>
    549a:	bd70      	pop	{r4, r5, r6, pc}
    549c:	60001e80 	.word	0x60001e80
    54a0:	60001e80 	.word	0x60001e80
    54a4:	60001e84 	.word	0x60001e84
    54a8:	60001e80 	.word	0x60001e80

000054ac <__retarget_lock_init_recursive>:
    54ac:	4770      	bx	lr
    54ae:	bf00      	nop

000054b0 <__retarget_lock_close_recursive>:
    54b0:	4770      	bx	lr
    54b2:	bf00      	nop

000054b4 <__retarget_lock_acquire_recursive>:
    54b4:	4770      	bx	lr
    54b6:	bf00      	nop

000054b8 <__retarget_lock_release_recursive>:
    54b8:	4770      	bx	lr
    54ba:	bf00      	nop
    54bc:	0000      	movs	r0, r0
    54be:	0000      	movs	r0, r0
    54c0:	eba2 0003 	sub.w	r0, r2, r3
    54c4:	4770      	bx	lr
    54c6:	bf00      	nop

000054c8 <strcmp>:
    54c8:	7802      	ldrb	r2, [r0, #0]
    54ca:	780b      	ldrb	r3, [r1, #0]
    54cc:	2a01      	cmp	r2, #1
    54ce:	bf28      	it	cs
    54d0:	429a      	cmpcs	r2, r3
    54d2:	d1f5      	bne.n	54c0 <__retarget_lock_release_recursive+0x8>
    54d4:	e96d 4504 	strd	r4, r5, [sp, #-16]!
    54d8:	ea40 0401 	orr.w	r4, r0, r1
    54dc:	e9cd 6702 	strd	r6, r7, [sp, #8]
    54e0:	f06f 0c00 	mvn.w	ip, #0
    54e4:	ea4f 7244 	mov.w	r2, r4, lsl #29
    54e8:	b312      	cbz	r2, 5530 <strcmp+0x68>
    54ea:	ea80 0401 	eor.w	r4, r0, r1
    54ee:	f014 0f07 	tst.w	r4, #7
    54f2:	d16a      	bne.n	55ca <strcmp+0x102>
    54f4:	f000 0407 	and.w	r4, r0, #7
    54f8:	f020 0007 	bic.w	r0, r0, #7
    54fc:	f004 0503 	and.w	r5, r4, #3
    5500:	f021 0107 	bic.w	r1, r1, #7
    5504:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    5508:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    550c:	f014 0f04 	tst.w	r4, #4
    5510:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    5514:	fa0c f405 	lsl.w	r4, ip, r5
    5518:	ea62 0204 	orn	r2, r2, r4
    551c:	ea66 0604 	orn	r6, r6, r4
    5520:	d00a      	beq.n	5538 <strcmp+0x70>
    5522:	ea63 0304 	orn	r3, r3, r4
    5526:	4662      	mov	r2, ip
    5528:	ea67 0704 	orn	r7, r7, r4
    552c:	4666      	mov	r6, ip
    552e:	e003      	b.n	5538 <strcmp+0x70>
    5530:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    5534:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    5538:	fa82 f54c 	uadd8	r5, r2, ip
    553c:	ea82 0406 	eor.w	r4, r2, r6
    5540:	faa4 f48c 	sel	r4, r4, ip
    5544:	bb6c      	cbnz	r4, 55a2 <strcmp+0xda>
    5546:	fa83 f54c 	uadd8	r5, r3, ip
    554a:	ea83 0507 	eor.w	r5, r3, r7
    554e:	faa5 f58c 	sel	r5, r5, ip
    5552:	b995      	cbnz	r5, 557a <strcmp+0xb2>
    5554:	e950 2302 	ldrd	r2, r3, [r0, #-8]
    5558:	e951 6702 	ldrd	r6, r7, [r1, #-8]
    555c:	fa82 f54c 	uadd8	r5, r2, ip
    5560:	ea82 0406 	eor.w	r4, r2, r6
    5564:	faa4 f48c 	sel	r4, r4, ip
    5568:	fa83 f54c 	uadd8	r5, r3, ip
    556c:	ea83 0507 	eor.w	r5, r3, r7
    5570:	faa5 f58c 	sel	r5, r5, ip
    5574:	4325      	orrs	r5, r4
    5576:	d0db      	beq.n	5530 <strcmp+0x68>
    5578:	b99c      	cbnz	r4, 55a2 <strcmp+0xda>
    557a:	ba2d      	rev	r5, r5
    557c:	fab5 f485 	clz	r4, r5
    5580:	f024 0407 	bic.w	r4, r4, #7
    5584:	fa27 f104 	lsr.w	r1, r7, r4
    5588:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    558c:	fa23 f304 	lsr.w	r3, r3, r4
    5590:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    5594:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    5598:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    559c:	eba0 0001 	sub.w	r0, r0, r1
    55a0:	4770      	bx	lr
    55a2:	ba24      	rev	r4, r4
    55a4:	fab4 f484 	clz	r4, r4
    55a8:	f024 0407 	bic.w	r4, r4, #7
    55ac:	fa26 f104 	lsr.w	r1, r6, r4
    55b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    55b4:	fa22 f204 	lsr.w	r2, r2, r4
    55b8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    55bc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    55c0:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    55c4:	eba0 0001 	sub.w	r0, r0, r1
    55c8:	4770      	bx	lr
    55ca:	f014 0f03 	tst.w	r4, #3
    55ce:	d13c      	bne.n	564a <strcmp+0x182>
    55d0:	f010 0403 	ands.w	r4, r0, #3
    55d4:	d128      	bne.n	5628 <strcmp+0x160>
    55d6:	f850 2b08 	ldr.w	r2, [r0], #8
    55da:	f851 3b08 	ldr.w	r3, [r1], #8
    55de:	fa82 f54c 	uadd8	r5, r2, ip
    55e2:	ea82 0503 	eor.w	r5, r2, r3
    55e6:	faa5 f58c 	sel	r5, r5, ip
    55ea:	b95d      	cbnz	r5, 5604 <strcmp+0x13c>
    55ec:	f850 2c04 	ldr.w	r2, [r0, #-4]
    55f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
    55f4:	fa82 f54c 	uadd8	r5, r2, ip
    55f8:	ea82 0503 	eor.w	r5, r2, r3
    55fc:	faa5 f58c 	sel	r5, r5, ip
    5600:	2d00      	cmp	r5, #0
    5602:	d0e8      	beq.n	55d6 <strcmp+0x10e>
    5604:	ba2d      	rev	r5, r5
    5606:	fab5 f485 	clz	r4, r5
    560a:	f024 0407 	bic.w	r4, r4, #7
    560e:	fa23 f104 	lsr.w	r1, r3, r4
    5612:	fa22 f204 	lsr.w	r2, r2, r4
    5616:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    561a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    561e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    5622:	eba0 0001 	sub.w	r0, r0, r1
    5626:	4770      	bx	lr
    5628:	ea4f 04c4 	mov.w	r4, r4, lsl #3
    562c:	f020 0003 	bic.w	r0, r0, #3
    5630:	f850 2b08 	ldr.w	r2, [r0], #8
    5634:	f021 0103 	bic.w	r1, r1, #3
    5638:	f851 3b08 	ldr.w	r3, [r1], #8
    563c:	fa0c f404 	lsl.w	r4, ip, r4
    5640:	ea62 0204 	orn	r2, r2, r4
    5644:	ea63 0304 	orn	r3, r3, r4
    5648:	e7c9      	b.n	55de <strcmp+0x116>
    564a:	f010 0403 	ands.w	r4, r0, #3
    564e:	d01a      	beq.n	5686 <strcmp+0x1be>
    5650:	eba1 0104 	sub.w	r1, r1, r4
    5654:	f020 0003 	bic.w	r0, r0, #3
    5658:	07e4      	lsls	r4, r4, #31
    565a:	f850 2b04 	ldr.w	r2, [r0], #4
    565e:	d006      	beq.n	566e <strcmp+0x1a6>
    5660:	d20f      	bcs.n	5682 <strcmp+0x1ba>
    5662:	788b      	ldrb	r3, [r1, #2]
    5664:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
    5668:	1ae4      	subs	r4, r4, r3
    566a:	d106      	bne.n	567a <strcmp+0x1b2>
    566c:	b12b      	cbz	r3, 567a <strcmp+0x1b2>
    566e:	78cb      	ldrb	r3, [r1, #3]
    5670:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
    5674:	1ae4      	subs	r4, r4, r3
    5676:	d100      	bne.n	567a <strcmp+0x1b2>
    5678:	b91b      	cbnz	r3, 5682 <strcmp+0x1ba>
    567a:	4620      	mov	r0, r4
    567c:	f85d 4b10 	ldr.w	r4, [sp], #16
    5680:	4770      	bx	lr
    5682:	f101 0104 	add.w	r1, r1, #4
    5686:	f850 2b04 	ldr.w	r2, [r0], #4
    568a:	07cc      	lsls	r4, r1, #31
    568c:	f021 0103 	bic.w	r1, r1, #3
    5690:	f851 3b04 	ldr.w	r3, [r1], #4
    5694:	d848      	bhi.n	5728 <strcmp+0x260>
    5696:	d224      	bcs.n	56e2 <strcmp+0x21a>
    5698:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
    569c:	fa82 f54c 	uadd8	r5, r2, ip
    56a0:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
    56a4:	faa5 f58c 	sel	r5, r5, ip
    56a8:	d10a      	bne.n	56c0 <strcmp+0x1f8>
    56aa:	b965      	cbnz	r5, 56c6 <strcmp+0x1fe>
    56ac:	f851 3b04 	ldr.w	r3, [r1], #4
    56b0:	ea84 0402 	eor.w	r4, r4, r2
    56b4:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
    56b8:	d10e      	bne.n	56d8 <strcmp+0x210>
    56ba:	f850 2b04 	ldr.w	r2, [r0], #4
    56be:	e7eb      	b.n	5698 <strcmp+0x1d0>
    56c0:	ea4f 2313 	mov.w	r3, r3, lsr #8
    56c4:	e055      	b.n	5772 <strcmp+0x2aa>
    56c6:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
    56ca:	d14d      	bne.n	5768 <strcmp+0x2a0>
    56cc:	7808      	ldrb	r0, [r1, #0]
    56ce:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    56d2:	f1c0 0000 	rsb	r0, r0, #0
    56d6:	4770      	bx	lr
    56d8:	ea4f 6212 	mov.w	r2, r2, lsr #24
    56dc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    56e0:	e047      	b.n	5772 <strcmp+0x2aa>
    56e2:	ea02 441c 	and.w	r4, r2, ip, lsr #16
    56e6:	fa82 f54c 	uadd8	r5, r2, ip
    56ea:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
    56ee:	faa5 f58c 	sel	r5, r5, ip
    56f2:	d10a      	bne.n	570a <strcmp+0x242>
    56f4:	b965      	cbnz	r5, 5710 <strcmp+0x248>
    56f6:	f851 3b04 	ldr.w	r3, [r1], #4
    56fa:	ea84 0402 	eor.w	r4, r4, r2
    56fe:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
    5702:	d10c      	bne.n	571e <strcmp+0x256>
    5704:	f850 2b04 	ldr.w	r2, [r0], #4
    5708:	e7eb      	b.n	56e2 <strcmp+0x21a>
    570a:	ea4f 4313 	mov.w	r3, r3, lsr #16
    570e:	e030      	b.n	5772 <strcmp+0x2aa>
    5710:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
    5714:	d128      	bne.n	5768 <strcmp+0x2a0>
    5716:	880b      	ldrh	r3, [r1, #0]
    5718:	ea4f 4212 	mov.w	r2, r2, lsr #16
    571c:	e029      	b.n	5772 <strcmp+0x2aa>
    571e:	ea4f 4212 	mov.w	r2, r2, lsr #16
    5722:	ea03 431c 	and.w	r3, r3, ip, lsr #16
    5726:	e024      	b.n	5772 <strcmp+0x2aa>
    5728:	f002 04ff 	and.w	r4, r2, #255	; 0xff
    572c:	fa82 f54c 	uadd8	r5, r2, ip
    5730:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
    5734:	faa5 f58c 	sel	r5, r5, ip
    5738:	d10a      	bne.n	5750 <strcmp+0x288>
    573a:	b965      	cbnz	r5, 5756 <strcmp+0x28e>
    573c:	f851 3b04 	ldr.w	r3, [r1], #4
    5740:	ea84 0402 	eor.w	r4, r4, r2
    5744:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
    5748:	d109      	bne.n	575e <strcmp+0x296>
    574a:	f850 2b04 	ldr.w	r2, [r0], #4
    574e:	e7eb      	b.n	5728 <strcmp+0x260>
    5750:	ea4f 6313 	mov.w	r3, r3, lsr #24
    5754:	e00d      	b.n	5772 <strcmp+0x2aa>
    5756:	f015 0fff 	tst.w	r5, #255	; 0xff
    575a:	d105      	bne.n	5768 <strcmp+0x2a0>
    575c:	680b      	ldr	r3, [r1, #0]
    575e:	ea4f 2212 	mov.w	r2, r2, lsr #8
    5762:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    5766:	e004      	b.n	5772 <strcmp+0x2aa>
    5768:	f04f 0000 	mov.w	r0, #0
    576c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    5770:	4770      	bx	lr
    5772:	ba12      	rev	r2, r2
    5774:	ba1b      	rev	r3, r3
    5776:	fa82 f44c 	uadd8	r4, r2, ip
    577a:	ea82 0403 	eor.w	r4, r2, r3
    577e:	faa4 f58c 	sel	r5, r4, ip
    5782:	fab5 f485 	clz	r4, r5
    5786:	fa02 f204 	lsl.w	r2, r2, r4
    578a:	fa03 f304 	lsl.w	r3, r3, r4
    578e:	ea4f 6012 	mov.w	r0, r2, lsr #24
    5792:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    5796:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
    579a:	4770      	bx	lr
	...

000057c0 <strlen>:
    57c0:	f890 f000 	pld	[r0]
    57c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    57c8:	f020 0107 	bic.w	r1, r0, #7
    57cc:	f06f 0c00 	mvn.w	ip, #0
    57d0:	f010 0407 	ands.w	r4, r0, #7
    57d4:	f891 f020 	pld	[r1, #32]
    57d8:	f040 8049 	bne.w	586e <strlen+0xae>
    57dc:	f04f 0400 	mov.w	r4, #0
    57e0:	f06f 0007 	mvn.w	r0, #7
    57e4:	e9d1 2300 	ldrd	r2, r3, [r1]
    57e8:	f891 f040 	pld	[r1, #64]	; 0x40
    57ec:	f100 0008 	add.w	r0, r0, #8
    57f0:	fa82 f24c 	uadd8	r2, r2, ip
    57f4:	faa4 f28c 	sel	r2, r4, ip
    57f8:	fa83 f34c 	uadd8	r3, r3, ip
    57fc:	faa2 f38c 	sel	r3, r2, ip
    5800:	bb4b      	cbnz	r3, 5856 <strlen+0x96>
    5802:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    5806:	fa82 f24c 	uadd8	r2, r2, ip
    580a:	f100 0008 	add.w	r0, r0, #8
    580e:	faa4 f28c 	sel	r2, r4, ip
    5812:	fa83 f34c 	uadd8	r3, r3, ip
    5816:	faa2 f38c 	sel	r3, r2, ip
    581a:	b9e3      	cbnz	r3, 5856 <strlen+0x96>
    581c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    5820:	fa82 f24c 	uadd8	r2, r2, ip
    5824:	f100 0008 	add.w	r0, r0, #8
    5828:	faa4 f28c 	sel	r2, r4, ip
    582c:	fa83 f34c 	uadd8	r3, r3, ip
    5830:	faa2 f38c 	sel	r3, r2, ip
    5834:	b97b      	cbnz	r3, 5856 <strlen+0x96>
    5836:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    583a:	f101 0120 	add.w	r1, r1, #32
    583e:	fa82 f24c 	uadd8	r2, r2, ip
    5842:	f100 0008 	add.w	r0, r0, #8
    5846:	faa4 f28c 	sel	r2, r4, ip
    584a:	fa83 f34c 	uadd8	r3, r3, ip
    584e:	faa2 f38c 	sel	r3, r2, ip
    5852:	2b00      	cmp	r3, #0
    5854:	d0c6      	beq.n	57e4 <strlen+0x24>
    5856:	2a00      	cmp	r2, #0
    5858:	bf04      	itt	eq
    585a:	3004      	addeq	r0, #4
    585c:	461a      	moveq	r2, r3
    585e:	ba12      	rev	r2, r2
    5860:	fab2 f282 	clz	r2, r2
    5864:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    5868:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    586c:	4770      	bx	lr
    586e:	e9d1 2300 	ldrd	r2, r3, [r1]
    5872:	f004 0503 	and.w	r5, r4, #3
    5876:	f1c4 0000 	rsb	r0, r4, #0
    587a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    587e:	f014 0f04 	tst.w	r4, #4
    5882:	f891 f040 	pld	[r1, #64]	; 0x40
    5886:	fa0c f505 	lsl.w	r5, ip, r5
    588a:	ea62 0205 	orn	r2, r2, r5
    588e:	bf1c      	itt	ne
    5890:	ea63 0305 	ornne	r3, r3, r5
    5894:	4662      	movne	r2, ip
    5896:	f04f 0400 	mov.w	r4, #0
    589a:	e7a9      	b.n	57f0 <strlen+0x30>
    589c:	0000      	movs	r0, r0
	...

000058a0 <nan>:
    58a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 58a8 <nan+0x8>
    58a4:	4770      	bx	lr
    58a6:	bf00      	nop
    58a8:	00000000 	.word	0x00000000
    58ac:	7ff80000 	.word	0x7ff80000

000058b0 <nanf>:
    58b0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 58b8 <nanf+0x8>
    58b4:	4770      	bx	lr
    58b6:	bf00      	nop
    58b8:	7fc00000 	.word	0x7fc00000

000058bc <_malloc_trim_r>:
    58bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    58be:	4f24      	ldr	r7, [pc, #144]	; (5950 <_malloc_trim_r+0x94>)
    58c0:	460c      	mov	r4, r1
    58c2:	4606      	mov	r6, r0
    58c4:	f7fe f89e 	bl	3a04 <__malloc_lock>
    58c8:	68bb      	ldr	r3, [r7, #8]
    58ca:	685d      	ldr	r5, [r3, #4]
    58cc:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
    58d0:	310f      	adds	r1, #15
    58d2:	f025 0503 	bic.w	r5, r5, #3
    58d6:	194b      	adds	r3, r1, r5
    58d8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    58dc:	f023 030f 	bic.w	r3, r3, #15
    58e0:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
    58e4:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    58e8:	db07      	blt.n	58fa <_malloc_trim_r+0x3e>
    58ea:	2100      	movs	r1, #0
    58ec:	4630      	mov	r0, r6
    58ee:	f7ff fd8b 	bl	5408 <_sbrk_r>
    58f2:	68bb      	ldr	r3, [r7, #8]
    58f4:	442b      	add	r3, r5
    58f6:	4298      	cmp	r0, r3
    58f8:	d004      	beq.n	5904 <_malloc_trim_r+0x48>
    58fa:	4630      	mov	r0, r6
    58fc:	f7fe f888 	bl	3a10 <__malloc_unlock>
    5900:	2000      	movs	r0, #0
    5902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5904:	4261      	negs	r1, r4
    5906:	4630      	mov	r0, r6
    5908:	f7ff fd7e 	bl	5408 <_sbrk_r>
    590c:	3001      	adds	r0, #1
    590e:	d00d      	beq.n	592c <_malloc_trim_r+0x70>
    5910:	4a10      	ldr	r2, [pc, #64]	; (5954 <_malloc_trim_r+0x98>)
    5912:	68bb      	ldr	r3, [r7, #8]
    5914:	1b2d      	subs	r5, r5, r4
    5916:	f045 0501 	orr.w	r5, r5, #1
    591a:	605d      	str	r5, [r3, #4]
    591c:	6813      	ldr	r3, [r2, #0]
    591e:	4630      	mov	r0, r6
    5920:	1b1b      	subs	r3, r3, r4
    5922:	6013      	str	r3, [r2, #0]
    5924:	f7fe f874 	bl	3a10 <__malloc_unlock>
    5928:	2001      	movs	r0, #1
    592a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    592c:	2100      	movs	r1, #0
    592e:	4630      	mov	r0, r6
    5930:	f7ff fd6a 	bl	5408 <_sbrk_r>
    5934:	68ba      	ldr	r2, [r7, #8]
    5936:	1a83      	subs	r3, r0, r2
    5938:	2b0f      	cmp	r3, #15
    593a:	ddde      	ble.n	58fa <_malloc_trim_r+0x3e>
    593c:	f043 0301 	orr.w	r3, r3, #1
    5940:	6053      	str	r3, [r2, #4]
    5942:	4b05      	ldr	r3, [pc, #20]	; (5958 <_malloc_trim_r+0x9c>)
    5944:	4903      	ldr	r1, [pc, #12]	; (5954 <_malloc_trim_r+0x98>)
    5946:	681b      	ldr	r3, [r3, #0]
    5948:	1ac0      	subs	r0, r0, r3
    594a:	6008      	str	r0, [r1, #0]
    594c:	e7d5      	b.n	58fa <_malloc_trim_r+0x3e>
    594e:	bf00      	nop
    5950:	20007ba4 	.word	0x20007ba4
    5954:	20008ab0 	.word	0x20008ab0
    5958:	20007fac 	.word	0x20007fac

0000595c <_free_r>:
    595c:	2900      	cmp	r1, #0
    595e:	d061      	beq.n	5a24 <_free_r+0xc8>
    5960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5962:	460c      	mov	r4, r1
    5964:	4606      	mov	r6, r0
    5966:	f7fe f84d 	bl	3a04 <__malloc_lock>
    596a:	f854 2c04 	ldr.w	r2, [r4, #-4]
    596e:	4f7b      	ldr	r7, [pc, #492]	; (5b5c <_free_r+0x200>)
    5970:	f1a4 0508 	sub.w	r5, r4, #8
    5974:	f022 0101 	bic.w	r1, r2, #1
    5978:	eb05 0c01 	add.w	ip, r5, r1
    597c:	68b8      	ldr	r0, [r7, #8]
    597e:	f8dc 3004 	ldr.w	r3, [ip, #4]
    5982:	4560      	cmp	r0, ip
    5984:	f023 0303 	bic.w	r3, r3, #3
    5988:	f000 808b 	beq.w	5aa2 <_free_r+0x146>
    598c:	07d2      	lsls	r2, r2, #31
    598e:	f8cc 3004 	str.w	r3, [ip, #4]
    5992:	d432      	bmi.n	59fa <_free_r+0x9e>
    5994:	f854 2c08 	ldr.w	r2, [r4, #-8]
    5998:	1aad      	subs	r5, r5, r2
    599a:	4411      	add	r1, r2
    599c:	68aa      	ldr	r2, [r5, #8]
    599e:	f107 0008 	add.w	r0, r7, #8
    59a2:	4282      	cmp	r2, r0
    59a4:	d06a      	beq.n	5a7c <_free_r+0x120>
    59a6:	eb0c 0403 	add.w	r4, ip, r3
    59aa:	f8d4 e004 	ldr.w	lr, [r4, #4]
    59ae:	68ec      	ldr	r4, [r5, #12]
    59b0:	60d4      	str	r4, [r2, #12]
    59b2:	f01e 0f01 	tst.w	lr, #1
    59b6:	60a2      	str	r2, [r4, #8]
    59b8:	f000 8097 	beq.w	5aea <_free_r+0x18e>
    59bc:	f041 0301 	orr.w	r3, r1, #1
    59c0:	606b      	str	r3, [r5, #4]
    59c2:	f8cc 1000 	str.w	r1, [ip]
    59c6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    59ca:	d235      	bcs.n	5a38 <_free_r+0xdc>
    59cc:	6878      	ldr	r0, [r7, #4]
    59ce:	08cb      	lsrs	r3, r1, #3
    59d0:	2201      	movs	r2, #1
    59d2:	0949      	lsrs	r1, r1, #5
    59d4:	3301      	adds	r3, #1
    59d6:	408a      	lsls	r2, r1
    59d8:	4302      	orrs	r2, r0
    59da:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    59de:	607a      	str	r2, [r7, #4]
    59e0:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    59e4:	3a08      	subs	r2, #8
    59e6:	e9c5 1202 	strd	r1, r2, [r5, #8]
    59ea:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    59ee:	60cd      	str	r5, [r1, #12]
    59f0:	4630      	mov	r0, r6
    59f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    59f6:	f7fe b80b 	b.w	3a10 <__malloc_unlock>
    59fa:	eb0c 0203 	add.w	r2, ip, r3
    59fe:	6852      	ldr	r2, [r2, #4]
    5a00:	07d0      	lsls	r0, r2, #31
    5a02:	d410      	bmi.n	5a26 <_free_r+0xca>
    5a04:	4419      	add	r1, r3
    5a06:	f107 0008 	add.w	r0, r7, #8
    5a0a:	f8dc 3008 	ldr.w	r3, [ip, #8]
    5a0e:	4283      	cmp	r3, r0
    5a10:	d073      	beq.n	5afa <_free_r+0x19e>
    5a12:	f8dc 200c 	ldr.w	r2, [ip, #12]
    5a16:	60da      	str	r2, [r3, #12]
    5a18:	6093      	str	r3, [r2, #8]
    5a1a:	f041 0301 	orr.w	r3, r1, #1
    5a1e:	606b      	str	r3, [r5, #4]
    5a20:	5069      	str	r1, [r5, r1]
    5a22:	e7d0      	b.n	59c6 <_free_r+0x6a>
    5a24:	4770      	bx	lr
    5a26:	f041 0301 	orr.w	r3, r1, #1
    5a2a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    5a2e:	f844 3c04 	str.w	r3, [r4, #-4]
    5a32:	f8cc 1000 	str.w	r1, [ip]
    5a36:	d3c9      	bcc.n	59cc <_free_r+0x70>
    5a38:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
    5a3c:	ea4f 2351 	mov.w	r3, r1, lsr #9
    5a40:	d248      	bcs.n	5ad4 <_free_r+0x178>
    5a42:	098b      	lsrs	r3, r1, #6
    5a44:	f103 0039 	add.w	r0, r3, #57	; 0x39
    5a48:	f103 0238 	add.w	r2, r3, #56	; 0x38
    5a4c:	00c3      	lsls	r3, r0, #3
    5a4e:	18f8      	adds	r0, r7, r3
    5a50:	58fb      	ldr	r3, [r7, r3]
    5a52:	3808      	subs	r0, #8
    5a54:	4298      	cmp	r0, r3
    5a56:	d059      	beq.n	5b0c <_free_r+0x1b0>
    5a58:	685a      	ldr	r2, [r3, #4]
    5a5a:	f022 0203 	bic.w	r2, r2, #3
    5a5e:	428a      	cmp	r2, r1
    5a60:	d902      	bls.n	5a68 <_free_r+0x10c>
    5a62:	689b      	ldr	r3, [r3, #8]
    5a64:	4298      	cmp	r0, r3
    5a66:	d1f7      	bne.n	5a58 <_free_r+0xfc>
    5a68:	68d8      	ldr	r0, [r3, #12]
    5a6a:	e9c5 3002 	strd	r3, r0, [r5, #8]
    5a6e:	6085      	str	r5, [r0, #8]
    5a70:	60dd      	str	r5, [r3, #12]
    5a72:	4630      	mov	r0, r6
    5a74:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    5a78:	f7fd bfca 	b.w	3a10 <__malloc_unlock>
    5a7c:	eb0c 0203 	add.w	r2, ip, r3
    5a80:	6852      	ldr	r2, [r2, #4]
    5a82:	07d2      	lsls	r2, r2, #31
    5a84:	d463      	bmi.n	5b4e <_free_r+0x1f2>
    5a86:	440b      	add	r3, r1
    5a88:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
    5a8c:	60ca      	str	r2, [r1, #12]
    5a8e:	6091      	str	r1, [r2, #8]
    5a90:	f043 0201 	orr.w	r2, r3, #1
    5a94:	606a      	str	r2, [r5, #4]
    5a96:	4630      	mov	r0, r6
    5a98:	50eb      	str	r3, [r5, r3]
    5a9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    5a9e:	f7fd bfb7 	b.w	3a10 <__malloc_unlock>
    5aa2:	440b      	add	r3, r1
    5aa4:	07d1      	lsls	r1, r2, #31
    5aa6:	d407      	bmi.n	5ab8 <_free_r+0x15c>
    5aa8:	f854 2c08 	ldr.w	r2, [r4, #-8]
    5aac:	1aad      	subs	r5, r5, r2
    5aae:	4413      	add	r3, r2
    5ab0:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
    5ab4:	60ca      	str	r2, [r1, #12]
    5ab6:	6091      	str	r1, [r2, #8]
    5ab8:	f043 0201 	orr.w	r2, r3, #1
    5abc:	606a      	str	r2, [r5, #4]
    5abe:	4a28      	ldr	r2, [pc, #160]	; (5b60 <_free_r+0x204>)
    5ac0:	60bd      	str	r5, [r7, #8]
    5ac2:	6812      	ldr	r2, [r2, #0]
    5ac4:	429a      	cmp	r2, r3
    5ac6:	d893      	bhi.n	59f0 <_free_r+0x94>
    5ac8:	4b26      	ldr	r3, [pc, #152]	; (5b64 <_free_r+0x208>)
    5aca:	4630      	mov	r0, r6
    5acc:	6819      	ldr	r1, [r3, #0]
    5ace:	f7ff fef5 	bl	58bc <_malloc_trim_r>
    5ad2:	e78d      	b.n	59f0 <_free_r+0x94>
    5ad4:	2b14      	cmp	r3, #20
    5ad6:	d90a      	bls.n	5aee <_free_r+0x192>
    5ad8:	2b54      	cmp	r3, #84	; 0x54
    5ada:	d81f      	bhi.n	5b1c <_free_r+0x1c0>
    5adc:	0b0b      	lsrs	r3, r1, #12
    5ade:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    5ae2:	f103 026e 	add.w	r2, r3, #110	; 0x6e
    5ae6:	00c3      	lsls	r3, r0, #3
    5ae8:	e7b1      	b.n	5a4e <_free_r+0xf2>
    5aea:	4419      	add	r1, r3
    5aec:	e78d      	b.n	5a0a <_free_r+0xae>
    5aee:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    5af2:	f103 025b 	add.w	r2, r3, #91	; 0x5b
    5af6:	00c3      	lsls	r3, r0, #3
    5af8:	e7a9      	b.n	5a4e <_free_r+0xf2>
    5afa:	f041 0301 	orr.w	r3, r1, #1
    5afe:	e9c7 5504 	strd	r5, r5, [r7, #16]
    5b02:	e9c5 0002 	strd	r0, r0, [r5, #8]
    5b06:	606b      	str	r3, [r5, #4]
    5b08:	5069      	str	r1, [r5, r1]
    5b0a:	e771      	b.n	59f0 <_free_r+0x94>
    5b0c:	6879      	ldr	r1, [r7, #4]
    5b0e:	1092      	asrs	r2, r2, #2
    5b10:	2401      	movs	r4, #1
    5b12:	fa04 f202 	lsl.w	r2, r4, r2
    5b16:	430a      	orrs	r2, r1
    5b18:	607a      	str	r2, [r7, #4]
    5b1a:	e7a6      	b.n	5a6a <_free_r+0x10e>
    5b1c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    5b20:	d806      	bhi.n	5b30 <_free_r+0x1d4>
    5b22:	0bcb      	lsrs	r3, r1, #15
    5b24:	f103 0078 	add.w	r0, r3, #120	; 0x78
    5b28:	f103 0277 	add.w	r2, r3, #119	; 0x77
    5b2c:	00c3      	lsls	r3, r0, #3
    5b2e:	e78e      	b.n	5a4e <_free_r+0xf2>
    5b30:	f240 5254 	movw	r2, #1364	; 0x554
    5b34:	4293      	cmp	r3, r2
    5b36:	d806      	bhi.n	5b46 <_free_r+0x1ea>
    5b38:	0c8b      	lsrs	r3, r1, #18
    5b3a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    5b3e:	f103 027c 	add.w	r2, r3, #124	; 0x7c
    5b42:	00c3      	lsls	r3, r0, #3
    5b44:	e783      	b.n	5a4e <_free_r+0xf2>
    5b46:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    5b4a:	227e      	movs	r2, #126	; 0x7e
    5b4c:	e77f      	b.n	5a4e <_free_r+0xf2>
    5b4e:	f041 0301 	orr.w	r3, r1, #1
    5b52:	606b      	str	r3, [r5, #4]
    5b54:	f8cc 1000 	str.w	r1, [ip]
    5b58:	e74a      	b.n	59f0 <_free_r+0x94>
    5b5a:	bf00      	nop
    5b5c:	20007ba4 	.word	0x20007ba4
    5b60:	20007fb0 	.word	0x20007fb0
    5b64:	20008ae0 	.word	0x20008ae0

00005b68 <rshift>:
    5b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5b6c:	6904      	ldr	r4, [r0, #16]
    5b6e:	ebb4 1f61 	cmp.w	r4, r1, asr #5
    5b72:	dd2f      	ble.n	5bd4 <rshift+0x6c>
    5b74:	f100 0e14 	add.w	lr, r0, #20
    5b78:	114e      	asrs	r6, r1, #5
    5b7a:	f011 0c1f 	ands.w	ip, r1, #31
    5b7e:	eb0e 0584 	add.w	r5, lr, r4, lsl #2
    5b82:	eb0e 0386 	add.w	r3, lr, r6, lsl #2
    5b86:	d02b      	beq.n	5be0 <rshift+0x78>
    5b88:	f85e 1026 	ldr.w	r1, [lr, r6, lsl #2]
    5b8c:	3304      	adds	r3, #4
    5b8e:	429d      	cmp	r5, r3
    5b90:	fa21 f10c 	lsr.w	r1, r1, ip
    5b94:	f1cc 0820 	rsb	r8, ip, #32
    5b98:	d918      	bls.n	5bcc <rshift+0x64>
    5b9a:	4677      	mov	r7, lr
    5b9c:	681a      	ldr	r2, [r3, #0]
    5b9e:	fa02 f208 	lsl.w	r2, r2, r8
    5ba2:	430a      	orrs	r2, r1
    5ba4:	f847 2b04 	str.w	r2, [r7], #4
    5ba8:	f853 1b04 	ldr.w	r1, [r3], #4
    5bac:	429d      	cmp	r5, r3
    5bae:	fa21 f10c 	lsr.w	r1, r1, ip
    5bb2:	d8f3      	bhi.n	5b9c <rshift+0x34>
    5bb4:	1ba3      	subs	r3, r4, r6
    5bb6:	009b      	lsls	r3, r3, #2
    5bb8:	3b05      	subs	r3, #5
    5bba:	089b      	lsrs	r3, r3, #2
    5bbc:	3301      	adds	r3, #1
    5bbe:	eb0e 0483 	add.w	r4, lr, r3, lsl #2
    5bc2:	f84e 1023 	str.w	r1, [lr, r3, lsl #2]
    5bc6:	b1c9      	cbz	r1, 5bfc <rshift+0x94>
    5bc8:	3404      	adds	r4, #4
    5bca:	e017      	b.n	5bfc <rshift+0x94>
    5bcc:	6141      	str	r1, [r0, #20]
    5bce:	4674      	mov	r4, lr
    5bd0:	2900      	cmp	r1, #0
    5bd2:	d1f9      	bne.n	5bc8 <rshift+0x60>
    5bd4:	2300      	movs	r3, #0
    5bd6:	6103      	str	r3, [r0, #16]
    5bd8:	2300      	movs	r3, #0
    5bda:	6143      	str	r3, [r0, #20]
    5bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5be0:	429d      	cmp	r5, r3
    5be2:	bf88      	it	hi
    5be4:	f100 0210 	addhi.w	r2, r0, #16
    5be8:	d9f4      	bls.n	5bd4 <rshift+0x6c>
    5bea:	f853 1b04 	ldr.w	r1, [r3], #4
    5bee:	f842 1f04 	str.w	r1, [r2, #4]!
    5bf2:	429d      	cmp	r5, r3
    5bf4:	d8f9      	bhi.n	5bea <rshift+0x82>
    5bf6:	1ba4      	subs	r4, r4, r6
    5bf8:	eb0e 0484 	add.w	r4, lr, r4, lsl #2
    5bfc:	eba4 030e 	sub.w	r3, r4, lr
    5c00:	109b      	asrs	r3, r3, #2
    5c02:	4574      	cmp	r4, lr
    5c04:	6103      	str	r3, [r0, #16]
    5c06:	d0e7      	beq.n	5bd8 <rshift+0x70>
    5c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005c0c <__gethex>:
    5c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5c10:	ed2d 8b02 	vpush	{d8}
    5c14:	680c      	ldr	r4, [r1, #0]
    5c16:	468b      	mov	fp, r1
    5c18:	78a1      	ldrb	r1, [r4, #2]
    5c1a:	b085      	sub	sp, #20
    5c1c:	2930      	cmp	r1, #48	; 0x30
    5c1e:	ee08 0a10 	vmov	s16, r0
    5c22:	4692      	mov	sl, r2
    5c24:	9302      	str	r3, [sp, #8]
    5c26:	f040 81ce 	bne.w	5fc6 <__gethex+0x3ba>
    5c2a:	f06f 0001 	mvn.w	r0, #1
    5c2e:	1b00      	subs	r0, r0, r4
    5c30:	1ce2      	adds	r2, r4, #3
    5c32:	1883      	adds	r3, r0, r2
    5c34:	4614      	mov	r4, r2
    5c36:	f812 1b01 	ldrb.w	r1, [r2], #1
    5c3a:	2930      	cmp	r1, #48	; 0x30
    5c3c:	d0f9      	beq.n	5c32 <__gethex+0x26>
    5c3e:	f8df 8300 	ldr.w	r8, [pc, #768]	; 5f40 <__gethex+0x334>
    5c42:	f818 2001 	ldrb.w	r2, [r8, r1]
    5c46:	2a00      	cmp	r2, #0
    5c48:	f000 80e5 	beq.w	5e16 <__gethex+0x20a>
    5c4c:	7822      	ldrb	r2, [r4, #0]
    5c4e:	2700      	movs	r7, #0
    5c50:	f818 2002 	ldrb.w	r2, [r8, r2]
    5c54:	463d      	mov	r5, r7
    5c56:	4626      	mov	r6, r4
    5c58:	b12a      	cbz	r2, 5c66 <__gethex+0x5a>
    5c5a:	f816 2f01 	ldrb.w	r2, [r6, #1]!
    5c5e:	f818 2002 	ldrb.w	r2, [r8, r2]
    5c62:	2a00      	cmp	r2, #0
    5c64:	d1f9      	bne.n	5c5a <__gethex+0x4e>
    5c66:	49b5      	ldr	r1, [pc, #724]	; (5f3c <__gethex+0x330>)
    5c68:	9301      	str	r3, [sp, #4]
    5c6a:	2201      	movs	r2, #1
    5c6c:	4630      	mov	r0, r6
    5c6e:	f7ff fb0f 	bl	5290 <strncmp>
    5c72:	9b01      	ldr	r3, [sp, #4]
    5c74:	4681      	mov	r9, r0
    5c76:	2800      	cmp	r0, #0
    5c78:	d04d      	beq.n	5d16 <__gethex+0x10a>
    5c7a:	2d00      	cmp	r5, #0
    5c7c:	d14e      	bne.n	5d1c <__gethex+0x110>
    5c7e:	7832      	ldrb	r2, [r6, #0]
    5c80:	46a9      	mov	r9, r5
    5c82:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    5c86:	2a50      	cmp	r2, #80	; 0x50
    5c88:	4635      	mov	r5, r6
    5c8a:	d050      	beq.n	5d2e <__gethex+0x122>
    5c8c:	f8cb 6000 	str.w	r6, [fp]
    5c90:	2f00      	cmp	r7, #0
    5c92:	d169      	bne.n	5d68 <__gethex+0x15c>
    5c94:	1b2b      	subs	r3, r5, r4
    5c96:	3b01      	subs	r3, #1
    5c98:	2b07      	cmp	r3, #7
    5c9a:	4639      	mov	r1, r7
    5c9c:	dd04      	ble.n	5ca8 <__gethex+0x9c>
    5c9e:	105b      	asrs	r3, r3, #1
    5ca0:	2b07      	cmp	r3, #7
    5ca2:	f101 0101 	add.w	r1, r1, #1
    5ca6:	dcfa      	bgt.n	5c9e <__gethex+0x92>
    5ca8:	ee18 0a10 	vmov	r0, s16
    5cac:	f000 fb82 	bl	63b4 <_Balloc>
    5cb0:	4683      	mov	fp, r0
    5cb2:	2800      	cmp	r0, #0
    5cb4:	f000 8266 	beq.w	6184 <__gethex+0x578>
    5cb8:	f100 0614 	add.w	r6, r0, #20
    5cbc:	42ac      	cmp	r4, r5
    5cbe:	9601      	str	r6, [sp, #4]
    5cc0:	f080 81d2 	bcs.w	6068 <__gethex+0x45c>
    5cc4:	2700      	movs	r7, #0
    5cc6:	f8cd 900c 	str.w	r9, [sp, #12]
    5cca:	499c      	ldr	r1, [pc, #624]	; (5f3c <__gethex+0x330>)
    5ccc:	46a1      	mov	r9, r4
    5cce:	463c      	mov	r4, r7
    5cd0:	e00c      	b.n	5cec <__gethex+0xe0>
    5cd2:	2f20      	cmp	r7, #32
    5cd4:	d019      	beq.n	5d0a <__gethex+0xfe>
    5cd6:	4638      	mov	r0, r7
    5cd8:	3704      	adds	r7, #4
    5cda:	782a      	ldrb	r2, [r5, #0]
    5cdc:	f818 2002 	ldrb.w	r2, [r8, r2]
    5ce0:	f002 020f 	and.w	r2, r2, #15
    5ce4:	4082      	lsls	r2, r0
    5ce6:	4314      	orrs	r4, r2
    5ce8:	454d      	cmp	r5, r9
    5cea:	d047      	beq.n	5d7c <__gethex+0x170>
    5cec:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
    5cf0:	2a2e      	cmp	r2, #46	; 0x2e
    5cf2:	d1ee      	bne.n	5cd2 <__gethex+0xc6>
    5cf4:	454d      	cmp	r5, r9
    5cf6:	d3ec      	bcc.n	5cd2 <__gethex+0xc6>
    5cf8:	2201      	movs	r2, #1
    5cfa:	4628      	mov	r0, r5
    5cfc:	f7ff fac8 	bl	5290 <strncmp>
    5d00:	498e      	ldr	r1, [pc, #568]	; (5f3c <__gethex+0x330>)
    5d02:	2800      	cmp	r0, #0
    5d04:	d0f0      	beq.n	5ce8 <__gethex+0xdc>
    5d06:	2f20      	cmp	r7, #32
    5d08:	d1e5      	bne.n	5cd6 <__gethex+0xca>
    5d0a:	2000      	movs	r0, #0
    5d0c:	f846 4b04 	str.w	r4, [r6], #4
    5d10:	2704      	movs	r7, #4
    5d12:	4604      	mov	r4, r0
    5d14:	e7e1      	b.n	5cda <__gethex+0xce>
    5d16:	2d00      	cmp	r5, #0
    5d18:	f000 8142 	beq.w	5fa0 <__gethex+0x394>
    5d1c:	7832      	ldrb	r2, [r6, #0]
    5d1e:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    5d22:	1bad      	subs	r5, r5, r6
    5d24:	2a50      	cmp	r2, #80	; 0x50
    5d26:	ea4f 0985 	mov.w	r9, r5, lsl #2
    5d2a:	4635      	mov	r5, r6
    5d2c:	d1ae      	bne.n	5c8c <__gethex+0x80>
    5d2e:	786a      	ldrb	r2, [r5, #1]
    5d30:	2a2b      	cmp	r2, #43	; 0x2b
    5d32:	f000 8125 	beq.w	5f80 <__gethex+0x374>
    5d36:	2a2d      	cmp	r2, #45	; 0x2d
    5d38:	f000 80a5 	beq.w	5e86 <__gethex+0x27a>
    5d3c:	1c6e      	adds	r6, r5, #1
    5d3e:	2000      	movs	r0, #0
    5d40:	f818 1002 	ldrb.w	r1, [r8, r2]
    5d44:	1e4a      	subs	r2, r1, #1
    5d46:	2a18      	cmp	r2, #24
    5d48:	f200 809b 	bhi.w	5e82 <__gethex+0x276>
    5d4c:	7872      	ldrb	r2, [r6, #1]
    5d4e:	f818 2002 	ldrb.w	r2, [r8, r2]
    5d52:	3910      	subs	r1, #16
    5d54:	3601      	adds	r6, #1
    5d56:	2a00      	cmp	r2, #0
    5d58:	d15a      	bne.n	5e10 <__gethex+0x204>
    5d5a:	b100      	cbz	r0, 5d5e <__gethex+0x152>
    5d5c:	4249      	negs	r1, r1
    5d5e:	4489      	add	r9, r1
    5d60:	f8cb 6000 	str.w	r6, [fp]
    5d64:	2f00      	cmp	r7, #0
    5d66:	d095      	beq.n	5c94 <__gethex+0x88>
    5d68:	2b00      	cmp	r3, #0
    5d6a:	bf14      	ite	ne
    5d6c:	2500      	movne	r5, #0
    5d6e:	2506      	moveq	r5, #6
    5d70:	4628      	mov	r0, r5
    5d72:	b005      	add	sp, #20
    5d74:	ecbd 8b02 	vpop	{d8}
    5d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5d7c:	f8dd 900c 	ldr.w	r9, [sp, #12]
    5d80:	4623      	mov	r3, r4
    5d82:	f846 3b04 	str.w	r3, [r6], #4
    5d86:	4618      	mov	r0, r3
    5d88:	9b01      	ldr	r3, [sp, #4]
    5d8a:	1af6      	subs	r6, r6, r3
    5d8c:	10b6      	asrs	r6, r6, #2
    5d8e:	f8cb 6010 	str.w	r6, [fp, #16]
    5d92:	f000 fbe9 	bl	6568 <__hi0bits>
    5d96:	0176      	lsls	r6, r6, #5
    5d98:	f8da 4000 	ldr.w	r4, [sl]
    5d9c:	1a30      	subs	r0, r6, r0
    5d9e:	42a0      	cmp	r0, r4
    5da0:	dc75      	bgt.n	5e8e <__gethex+0x282>
    5da2:	f2c0 80ef 	blt.w	5f84 <__gethex+0x378>
    5da6:	2700      	movs	r7, #0
    5da8:	f8da 3008 	ldr.w	r3, [sl, #8]
    5dac:	454b      	cmp	r3, r9
    5dae:	f2c0 8151 	blt.w	6054 <__gethex+0x448>
    5db2:	f8da 3004 	ldr.w	r3, [sl, #4]
    5db6:	454b      	cmp	r3, r9
    5db8:	dd4a      	ble.n	5e50 <__gethex+0x244>
    5dba:	eba3 0909 	sub.w	r9, r3, r9
    5dbe:	454c      	cmp	r4, r9
    5dc0:	f300 8082 	bgt.w	5ec8 <__gethex+0x2bc>
    5dc4:	f8da 200c 	ldr.w	r2, [sl, #12]
    5dc8:	2a02      	cmp	r2, #2
    5dca:	f000 8165 	beq.w	6098 <__gethex+0x48c>
    5dce:	2a03      	cmp	r2, #3
    5dd0:	f000 8181 	beq.w	60d6 <__gethex+0x4ca>
    5dd4:	2a01      	cmp	r2, #1
    5dd6:	f000 816f 	beq.w	60b8 <__gethex+0x4ac>
    5dda:	ee18 0a10 	vmov	r0, s16
    5dde:	4659      	mov	r1, fp
    5de0:	f000 fb0e 	bl	6400 <_Bfree>
    5de4:	2550      	movs	r5, #80	; 0x50
    5de6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    5de8:	2300      	movs	r3, #0
    5dea:	4628      	mov	r0, r5
    5dec:	6013      	str	r3, [r2, #0]
    5dee:	b005      	add	sp, #20
    5df0:	ecbd 8b02 	vpop	{d8}
    5df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5df8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    5dfc:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    5e00:	f1a2 0110 	sub.w	r1, r2, #16
    5e04:	f816 2f01 	ldrb.w	r2, [r6, #1]!
    5e08:	f818 2002 	ldrb.w	r2, [r8, r2]
    5e0c:	2a00      	cmp	r2, #0
    5e0e:	d0a4      	beq.n	5d5a <__gethex+0x14e>
    5e10:	2a19      	cmp	r2, #25
    5e12:	ddf1      	ble.n	5df8 <__gethex+0x1ec>
    5e14:	e7a1      	b.n	5d5a <__gethex+0x14e>
    5e16:	4949      	ldr	r1, [pc, #292]	; (5f3c <__gethex+0x330>)
    5e18:	9301      	str	r3, [sp, #4]
    5e1a:	2201      	movs	r2, #1
    5e1c:	4620      	mov	r0, r4
    5e1e:	f7ff fa37 	bl	5290 <strncmp>
    5e22:	9b01      	ldr	r3, [sp, #4]
    5e24:	2800      	cmp	r0, #0
    5e26:	d16d      	bne.n	5f04 <__gethex+0x2f8>
    5e28:	7861      	ldrb	r1, [r4, #1]
    5e2a:	f818 2001 	ldrb.w	r2, [r8, r1]
    5e2e:	1c65      	adds	r5, r4, #1
    5e30:	2a00      	cmp	r2, #0
    5e32:	d069      	beq.n	5f08 <__gethex+0x2fc>
    5e34:	2930      	cmp	r1, #48	; 0x30
    5e36:	462c      	mov	r4, r5
    5e38:	d105      	bne.n	5e46 <__gethex+0x23a>
    5e3a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    5e3e:	2b30      	cmp	r3, #48	; 0x30
    5e40:	d0fb      	beq.n	5e3a <__gethex+0x22e>
    5e42:	f818 2003 	ldrb.w	r2, [r8, r3]
    5e46:	fab2 f782 	clz	r7, r2
    5e4a:	097f      	lsrs	r7, r7, #5
    5e4c:	2301      	movs	r3, #1
    5e4e:	e702      	b.n	5c56 <__gethex+0x4a>
    5e50:	2501      	movs	r5, #1
    5e52:	b157      	cbz	r7, 5e6a <__gethex+0x25e>
    5e54:	f8da 300c 	ldr.w	r3, [sl, #12]
    5e58:	2b02      	cmp	r3, #2
    5e5a:	d05d      	beq.n	5f18 <__gethex+0x30c>
    5e5c:	2b03      	cmp	r3, #3
    5e5e:	d05f      	beq.n	5f20 <__gethex+0x314>
    5e60:	2b01      	cmp	r3, #1
    5e62:	f000 8084 	beq.w	5f6e <__gethex+0x362>
    5e66:	f045 0510 	orr.w	r5, r5, #16
    5e6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5e6c:	f8c3 b000 	str.w	fp, [r3]
    5e70:	9b02      	ldr	r3, [sp, #8]
    5e72:	4628      	mov	r0, r5
    5e74:	f8c3 9000 	str.w	r9, [r3]
    5e78:	b005      	add	sp, #20
    5e7a:	ecbd 8b02 	vpop	{d8}
    5e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5e82:	462e      	mov	r6, r5
    5e84:	e702      	b.n	5c8c <__gethex+0x80>
    5e86:	2001      	movs	r0, #1
    5e88:	78aa      	ldrb	r2, [r5, #2]
    5e8a:	1cae      	adds	r6, r5, #2
    5e8c:	e758      	b.n	5d40 <__gethex+0x134>
    5e8e:	1b06      	subs	r6, r0, r4
    5e90:	4631      	mov	r1, r6
    5e92:	4658      	mov	r0, fp
    5e94:	f000 ff96 	bl	6dc4 <__any_on>
    5e98:	4607      	mov	r7, r0
    5e9a:	b178      	cbz	r0, 5ebc <__gethex+0x2b0>
    5e9c:	1e72      	subs	r2, r6, #1
    5e9e:	1153      	asrs	r3, r2, #5
    5ea0:	9901      	ldr	r1, [sp, #4]
    5ea2:	2701      	movs	r7, #1
    5ea4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    5ea8:	f002 031f 	and.w	r3, r2, #31
    5eac:	fa07 f303 	lsl.w	r3, r7, r3
    5eb0:	420b      	tst	r3, r1
    5eb2:	d003      	beq.n	5ebc <__gethex+0x2b0>
    5eb4:	42ba      	cmp	r2, r7
    5eb6:	f300 80e2 	bgt.w	607e <__gethex+0x472>
    5eba:	2702      	movs	r7, #2
    5ebc:	4631      	mov	r1, r6
    5ebe:	4658      	mov	r0, fp
    5ec0:	44b1      	add	r9, r6
    5ec2:	f7ff fe51 	bl	5b68 <rshift>
    5ec6:	e76f      	b.n	5da8 <__gethex+0x19c>
    5ec8:	f109 35ff 	add.w	r5, r9, #4294967295
    5ecc:	2f00      	cmp	r7, #0
    5ece:	f040 80ce 	bne.w	606e <__gethex+0x462>
    5ed2:	2d00      	cmp	r5, #0
    5ed4:	f040 80cd 	bne.w	6072 <__gethex+0x466>
    5ed8:	116b      	asrs	r3, r5, #5
    5eda:	9a01      	ldr	r2, [sp, #4]
    5edc:	f005 051f 	and.w	r5, r5, #31
    5ee0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    5ee4:	2301      	movs	r3, #1
    5ee6:	40ab      	lsls	r3, r5
    5ee8:	4213      	tst	r3, r2
    5eea:	4649      	mov	r1, r9
    5eec:	4658      	mov	r0, fp
    5eee:	bf18      	it	ne
    5ef0:	f047 0702 	orrne.w	r7, r7, #2
    5ef4:	eba4 0409 	sub.w	r4, r4, r9
    5ef8:	f7ff fe36 	bl	5b68 <rshift>
    5efc:	2502      	movs	r5, #2
    5efe:	f8da 9004 	ldr.w	r9, [sl, #4]
    5f02:	e7a6      	b.n	5e52 <__gethex+0x246>
    5f04:	7821      	ldrb	r1, [r4, #0]
    5f06:	4625      	mov	r5, r4
    5f08:	f001 01df 	and.w	r1, r1, #223	; 0xdf
    5f0c:	2950      	cmp	r1, #80	; 0x50
    5f0e:	f000 80bf 	beq.w	6090 <__gethex+0x484>
    5f12:	f8cb 5000 	str.w	r5, [fp]
    5f16:	e727      	b.n	5d68 <__gethex+0x15c>
    5f18:	9b11      	ldr	r3, [sp, #68]	; 0x44
    5f1a:	f1c3 0301 	rsb	r3, r3, #1
    5f1e:	9311      	str	r3, [sp, #68]	; 0x44
    5f20:	9b11      	ldr	r3, [sp, #68]	; 0x44
    5f22:	2b00      	cmp	r3, #0
    5f24:	d09f      	beq.n	5e66 <__gethex+0x25a>
    5f26:	f8db 7010 	ldr.w	r7, [fp, #16]
    5f2a:	f8dd 8004 	ldr.w	r8, [sp, #4]
    5f2e:	00ba      	lsls	r2, r7, #2
    5f30:	4643      	mov	r3, r8
    5f32:	9201      	str	r2, [sp, #4]
    5f34:	eb08 0087 	add.w	r0, r8, r7, lsl #2
    5f38:	2100      	movs	r1, #0
    5f3a:	e007      	b.n	5f4c <__gethex+0x340>
    5f3c:	200008b4 	.word	0x200008b4
    5f40:	200005cc 	.word	0x200005cc
    5f44:	4298      	cmp	r0, r3
    5f46:	f843 1c04 	str.w	r1, [r3, #-4]
    5f4a:	d93f      	bls.n	5fcc <__gethex+0x3c0>
    5f4c:	461e      	mov	r6, r3
    5f4e:	f853 2b04 	ldr.w	r2, [r3], #4
    5f52:	f1b2 3fff 	cmp.w	r2, #4294967295
    5f56:	d0f5      	beq.n	5f44 <__gethex+0x338>
    5f58:	3201      	adds	r2, #1
    5f5a:	2d02      	cmp	r5, #2
    5f5c:	6032      	str	r2, [r6, #0]
    5f5e:	f000 80bf 	beq.w	60e0 <__gethex+0x4d4>
    5f62:	f014 041f 	ands.w	r4, r4, #31
    5f66:	f040 80e7 	bne.w	6138 <__gethex+0x52c>
    5f6a:	2521      	movs	r5, #33	; 0x21
    5f6c:	e77d      	b.n	5e6a <__gethex+0x25e>
    5f6e:	07ba      	lsls	r2, r7, #30
    5f70:	f57f af79 	bpl.w	5e66 <__gethex+0x25a>
    5f74:	9b01      	ldr	r3, [sp, #4]
    5f76:	681b      	ldr	r3, [r3, #0]
    5f78:	431f      	orrs	r7, r3
    5f7a:	07fb      	lsls	r3, r7, #31
    5f7c:	d4d3      	bmi.n	5f26 <__gethex+0x31a>
    5f7e:	e772      	b.n	5e66 <__gethex+0x25a>
    5f80:	2000      	movs	r0, #0
    5f82:	e781      	b.n	5e88 <__gethex+0x27c>
    5f84:	1a22      	subs	r2, r4, r0
    5f86:	4659      	mov	r1, fp
    5f88:	ee18 0a10 	vmov	r0, s16
    5f8c:	eba9 0902 	sub.w	r9, r9, r2
    5f90:	f000 fc76 	bl	6880 <__lshift>
    5f94:	f100 0314 	add.w	r3, r0, #20
    5f98:	4683      	mov	fp, r0
    5f9a:	9301      	str	r3, [sp, #4]
    5f9c:	2700      	movs	r7, #0
    5f9e:	e703      	b.n	5da8 <__gethex+0x19c>
    5fa0:	7872      	ldrb	r2, [r6, #1]
    5fa2:	f818 0002 	ldrb.w	r0, [r8, r2]
    5fa6:	1c71      	adds	r1, r6, #1
    5fa8:	2800      	cmp	r0, #0
    5faa:	f000 80a0 	beq.w	60ee <__gethex+0x4e2>
    5fae:	460d      	mov	r5, r1
    5fb0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    5fb4:	f818 0002 	ldrb.w	r0, [r8, r2]
    5fb8:	2800      	cmp	r0, #0
    5fba:	d1f8      	bne.n	5fae <__gethex+0x3a2>
    5fbc:	1b75      	subs	r5, r6, r5
    5fbe:	ea4f 0985 	mov.w	r9, r5, lsl #2
    5fc2:	460e      	mov	r6, r1
    5fc4:	e65d      	b.n	5c82 <__gethex+0x76>
    5fc6:	3402      	adds	r4, #2
    5fc8:	2300      	movs	r3, #0
    5fca:	e638      	b.n	5c3e <__gethex+0x32>
    5fcc:	f8db 3008 	ldr.w	r3, [fp, #8]
    5fd0:	429f      	cmp	r7, r3
    5fd2:	f280 808e 	bge.w	60f2 <__gethex+0x4e6>
    5fd6:	463b      	mov	r3, r7
    5fd8:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
    5fdc:	2101      	movs	r1, #1
    5fde:	3301      	adds	r3, #1
    5fe0:	2d02      	cmp	r5, #2
    5fe2:	f8cb 3010 	str.w	r3, [fp, #16]
    5fe6:	6151      	str	r1, [r2, #20]
    5fe8:	d07a      	beq.n	60e0 <__gethex+0x4d4>
    5fea:	429f      	cmp	r7, r3
    5fec:	dab9      	bge.n	5f62 <__gethex+0x356>
    5fee:	2b00      	cmp	r3, #0
    5ff0:	f340 809b 	ble.w	612a <__gethex+0x51e>
    5ff4:	f8db 2014 	ldr.w	r2, [fp, #20]
    5ff8:	eb08 0383 	add.w	r3, r8, r3, lsl #2
    5ffc:	f10b 0018 	add.w	r0, fp, #24
    6000:	4283      	cmp	r3, r0
    6002:	ea4f 0252 	mov.w	r2, r2, lsr #1
    6006:	f240 80b1 	bls.w	616c <__gethex+0x560>
    600a:	4644      	mov	r4, r8
    600c:	6801      	ldr	r1, [r0, #0]
    600e:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
    6012:	f844 2b04 	str.w	r2, [r4], #4
    6016:	f850 2b04 	ldr.w	r2, [r0], #4
    601a:	4283      	cmp	r3, r0
    601c:	ea4f 0252 	mov.w	r2, r2, lsr #1
    6020:	d8f4      	bhi.n	600c <__gethex+0x400>
    6022:	eba3 030b 	sub.w	r3, r3, fp
    6026:	3b19      	subs	r3, #25
    6028:	089b      	lsrs	r3, r3, #2
    602a:	3301      	adds	r3, #1
    602c:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
    6030:	eb08 0383 	add.w	r3, r8, r3, lsl #2
    6034:	2a00      	cmp	r2, #0
    6036:	f040 809d 	bne.w	6174 <__gethex+0x568>
    603a:	eba3 0208 	sub.w	r2, r3, r8
    603e:	1092      	asrs	r2, r2, #2
    6040:	4543      	cmp	r3, r8
    6042:	f8cb 2010 	str.w	r2, [fp, #16]
    6046:	d073      	beq.n	6130 <__gethex+0x524>
    6048:	f8da 3008 	ldr.w	r3, [sl, #8]
    604c:	f109 0901 	add.w	r9, r9, #1
    6050:	454b      	cmp	r3, r9
    6052:	da8a      	bge.n	5f6a <__gethex+0x35e>
    6054:	ee18 0a10 	vmov	r0, s16
    6058:	4659      	mov	r1, fp
    605a:	f000 f9d1 	bl	6400 <_Bfree>
    605e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    6060:	2300      	movs	r3, #0
    6062:	6013      	str	r3, [r2, #0]
    6064:	25a3      	movs	r5, #163	; 0xa3
    6066:	e683      	b.n	5d70 <__gethex+0x164>
    6068:	9e01      	ldr	r6, [sp, #4]
    606a:	2300      	movs	r3, #0
    606c:	e689      	b.n	5d82 <__gethex+0x176>
    606e:	2701      	movs	r7, #1
    6070:	e732      	b.n	5ed8 <__gethex+0x2cc>
    6072:	4629      	mov	r1, r5
    6074:	4658      	mov	r0, fp
    6076:	f000 fea5 	bl	6dc4 <__any_on>
    607a:	4607      	mov	r7, r0
    607c:	e72c      	b.n	5ed8 <__gethex+0x2cc>
    607e:	1eb1      	subs	r1, r6, #2
    6080:	4658      	mov	r0, fp
    6082:	f000 fe9f 	bl	6dc4 <__any_on>
    6086:	2800      	cmp	r0, #0
    6088:	f43f af17 	beq.w	5eba <__gethex+0x2ae>
    608c:	2703      	movs	r7, #3
    608e:	e715      	b.n	5ebc <__gethex+0x2b0>
    6090:	f04f 0900 	mov.w	r9, #0
    6094:	2701      	movs	r7, #1
    6096:	e64a      	b.n	5d2e <__gethex+0x122>
    6098:	9a11      	ldr	r2, [sp, #68]	; 0x44
    609a:	2a00      	cmp	r2, #0
    609c:	f47f ae9d 	bne.w	5dda <__gethex+0x1ce>
    60a0:	9902      	ldr	r1, [sp, #8]
    60a2:	600b      	str	r3, [r1, #0]
    60a4:	9b01      	ldr	r3, [sp, #4]
    60a6:	2201      	movs	r2, #1
    60a8:	f8cb 2010 	str.w	r2, [fp, #16]
    60ac:	601a      	str	r2, [r3, #0]
    60ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
    60b0:	2562      	movs	r5, #98	; 0x62
    60b2:	f8c3 b000 	str.w	fp, [r3]
    60b6:	e65b      	b.n	5d70 <__gethex+0x164>
    60b8:	454c      	cmp	r4, r9
    60ba:	f47f ae8e 	bne.w	5dda <__gethex+0x1ce>
    60be:	2c01      	cmp	r4, #1
    60c0:	d0ee      	beq.n	60a0 <__gethex+0x494>
    60c2:	1e61      	subs	r1, r4, #1
    60c4:	4658      	mov	r0, fp
    60c6:	f000 fe7d 	bl	6dc4 <__any_on>
    60ca:	2800      	cmp	r0, #0
    60cc:	f43f ae85 	beq.w	5dda <__gethex+0x1ce>
    60d0:	f8da 3004 	ldr.w	r3, [sl, #4]
    60d4:	e7e4      	b.n	60a0 <__gethex+0x494>
    60d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
    60d8:	2a00      	cmp	r2, #0
    60da:	f43f ae7e 	beq.w	5dda <__gethex+0x1ce>
    60de:	e7df      	b.n	60a0 <__gethex+0x494>
    60e0:	f8da 3000 	ldr.w	r3, [sl]
    60e4:	3b01      	subs	r3, #1
    60e6:	42a3      	cmp	r3, r4
    60e8:	d034      	beq.n	6154 <__gethex+0x548>
    60ea:	2522      	movs	r5, #34	; 0x22
    60ec:	e6bd      	b.n	5e6a <__gethex+0x25e>
    60ee:	460e      	mov	r6, r1
    60f0:	e5c7      	b.n	5c82 <__gethex+0x76>
    60f2:	f8db 1004 	ldr.w	r1, [fp, #4]
    60f6:	ee18 0a10 	vmov	r0, s16
    60fa:	3101      	adds	r1, #1
    60fc:	f000 f95a 	bl	63b4 <_Balloc>
    6100:	4606      	mov	r6, r0
    6102:	b3c8      	cbz	r0, 6178 <__gethex+0x56c>
    6104:	f8db 3010 	ldr.w	r3, [fp, #16]
    6108:	3302      	adds	r3, #2
    610a:	009a      	lsls	r2, r3, #2
    610c:	f10b 010c 	add.w	r1, fp, #12
    6110:	300c      	adds	r0, #12
    6112:	f7fb faa1 	bl	1658 <memcpy>
    6116:	4659      	mov	r1, fp
    6118:	ee18 0a10 	vmov	r0, s16
    611c:	f000 f970 	bl	6400 <_Bfree>
    6120:	f106 0814 	add.w	r8, r6, #20
    6124:	6933      	ldr	r3, [r6, #16]
    6126:	46b3      	mov	fp, r6
    6128:	e756      	b.n	5fd8 <__gethex+0x3cc>
    612a:	2300      	movs	r3, #0
    612c:	f8cb 3010 	str.w	r3, [fp, #16]
    6130:	2300      	movs	r3, #0
    6132:	f8cb 3014 	str.w	r3, [fp, #20]
    6136:	e787      	b.n	6048 <__gethex+0x43c>
    6138:	9b01      	ldr	r3, [sp, #4]
    613a:	4443      	add	r3, r8
    613c:	f1c4 0420 	rsb	r4, r4, #32
    6140:	f853 0c04 	ldr.w	r0, [r3, #-4]
    6144:	f000 fa10 	bl	6568 <__hi0bits>
    6148:	42a0      	cmp	r0, r4
    614a:	f6bf af0e 	bge.w	5f6a <__gethex+0x35e>
    614e:	f8db 3010 	ldr.w	r3, [fp, #16]
    6152:	e74c      	b.n	5fee <__gethex+0x3e2>
    6154:	1163      	asrs	r3, r4, #5
    6156:	f004 041f 	and.w	r4, r4, #31
    615a:	f858 2023 	ldr.w	r2, [r8, r3, lsl #2]
    615e:	2301      	movs	r3, #1
    6160:	40a3      	lsls	r3, r4
    6162:	4213      	tst	r3, r2
    6164:	bf0c      	ite	eq
    6166:	2522      	moveq	r5, #34	; 0x22
    6168:	2521      	movne	r5, #33	; 0x21
    616a:	e67e      	b.n	5e6a <__gethex+0x25e>
    616c:	f8c8 2000 	str.w	r2, [r8]
    6170:	4643      	mov	r3, r8
    6172:	b16a      	cbz	r2, 6190 <__gethex+0x584>
    6174:	3304      	adds	r3, #4
    6176:	e760      	b.n	603a <__gethex+0x42e>
    6178:	4b07      	ldr	r3, [pc, #28]	; (6198 <__gethex+0x58c>)
    617a:	4808      	ldr	r0, [pc, #32]	; (619c <__gethex+0x590>)
    617c:	4632      	mov	r2, r6
    617e:	2184      	movs	r1, #132	; 0x84
    6180:	f004 fa7a 	bl	a678 <__assert_func>
    6184:	4b04      	ldr	r3, [pc, #16]	; (6198 <__gethex+0x58c>)
    6186:	4805      	ldr	r0, [pc, #20]	; (619c <__gethex+0x590>)
    6188:	465a      	mov	r2, fp
    618a:	21e4      	movs	r1, #228	; 0xe4
    618c:	f004 fa74 	bl	a678 <__assert_func>
    6190:	f8cb 2010 	str.w	r2, [fp, #16]
    6194:	e7cc      	b.n	6130 <__gethex+0x524>
    6196:	bf00      	nop
    6198:	20000554 	.word	0x20000554
    619c:	20000568 	.word	0x20000568

000061a0 <__match>:
    61a0:	b410      	push	{r4}
    61a2:	6804      	ldr	r4, [r0, #0]
    61a4:	e009      	b.n	61ba <__match+0x1a>
    61a6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    61aa:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
    61ae:	f1bc 0f19 	cmp.w	ip, #25
    61b2:	bf98      	it	ls
    61b4:	3320      	addls	r3, #32
    61b6:	4293      	cmp	r3, r2
    61b8:	d109      	bne.n	61ce <__match+0x2e>
    61ba:	f811 2b01 	ldrb.w	r2, [r1], #1
    61be:	2a00      	cmp	r2, #0
    61c0:	d1f1      	bne.n	61a6 <__match+0x6>
    61c2:	3401      	adds	r4, #1
    61c4:	6004      	str	r4, [r0, #0]
    61c6:	2001      	movs	r0, #1
    61c8:	f85d 4b04 	ldr.w	r4, [sp], #4
    61cc:	4770      	bx	lr
    61ce:	2000      	movs	r0, #0
    61d0:	f85d 4b04 	ldr.w	r4, [sp], #4
    61d4:	4770      	bx	lr
    61d6:	bf00      	nop

000061d8 <__hexnan>:
    61d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    61dc:	6809      	ldr	r1, [r1, #0]
    61de:	b085      	sub	sp, #20
    61e0:	114b      	asrs	r3, r1, #5
    61e2:	f011 011f 	ands.w	r1, r1, #31
    61e6:	9002      	str	r0, [sp, #8]
    61e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    61ec:	9103      	str	r1, [sp, #12]
    61ee:	f040 808f 	bne.w	6310 <__hexnan+0x138>
    61f2:	1f1d      	subs	r5, r3, #4
    61f4:	9301      	str	r3, [sp, #4]
    61f6:	9b02      	ldr	r3, [sp, #8]
    61f8:	9901      	ldr	r1, [sp, #4]
    61fa:	681c      	ldr	r4, [r3, #0]
    61fc:	2300      	movs	r3, #0
    61fe:	f841 3c04 	str.w	r3, [r1, #-4]
    6202:	7861      	ldrb	r1, [r4, #1]
    6204:	3401      	adds	r4, #1
    6206:	2900      	cmp	r1, #0
    6208:	f000 8098 	beq.w	633c <__hexnan+0x164>
    620c:	f8df 9174 	ldr.w	r9, [pc, #372]	; 6384 <__hexnan+0x1ac>
    6210:	46a8      	mov	r8, r5
    6212:	46ac      	mov	ip, r5
    6214:	469a      	mov	sl, r3
    6216:	461e      	mov	r6, r3
    6218:	e00e      	b.n	6238 <__hexnan+0x60>
    621a:	2920      	cmp	r1, #32
    621c:	f200 808c 	bhi.w	6338 <__hexnan+0x160>
    6220:	4556      	cmp	r6, sl
    6222:	dd06      	ble.n	6232 <__hexnan+0x5a>
    6224:	45c4      	cmp	ip, r8
    6226:	d201      	bcs.n	622c <__hexnan+0x54>
    6228:	2b07      	cmp	r3, #7
    622a:	dd5b      	ble.n	62e4 <__hexnan+0x10c>
    622c:	4562      	cmp	r2, ip
    622e:	d351      	bcc.n	62d4 <__hexnan+0xfc>
    6230:	2308      	movs	r3, #8
    6232:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    6236:	b1a1      	cbz	r1, 6262 <__hexnan+0x8a>
    6238:	f819 0001 	ldrb.w	r0, [r9, r1]
    623c:	2800      	cmp	r0, #0
    623e:	d0ec      	beq.n	621a <__hexnan+0x42>
    6240:	3301      	adds	r3, #1
    6242:	2b08      	cmp	r3, #8
    6244:	f106 0601 	add.w	r6, r6, #1
    6248:	dc3a      	bgt.n	62c0 <__hexnan+0xe8>
    624a:	f8dc 1000 	ldr.w	r1, [ip]
    624e:	0109      	lsls	r1, r1, #4
    6250:	f000 000f 	and.w	r0, r0, #15
    6254:	4308      	orrs	r0, r1
    6256:	f8cc 0000 	str.w	r0, [ip]
    625a:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    625e:	2900      	cmp	r1, #0
    6260:	d1ea      	bne.n	6238 <__hexnan+0x60>
    6262:	2e00      	cmp	r6, #0
    6264:	d06a      	beq.n	633c <__hexnan+0x164>
    6266:	45c4      	cmp	ip, r8
    6268:	d201      	bcs.n	626e <__hexnan+0x96>
    626a:	2b07      	cmp	r3, #7
    626c:	dd74      	ble.n	6358 <__hexnan+0x180>
    626e:	4562      	cmp	r2, ip
    6270:	d252      	bcs.n	6318 <__hexnan+0x140>
    6272:	1f11      	subs	r1, r2, #4
    6274:	4663      	mov	r3, ip
    6276:	f853 0b04 	ldr.w	r0, [r3], #4
    627a:	f841 0f04 	str.w	r0, [r1, #4]!
    627e:	42ab      	cmp	r3, r5
    6280:	d9f9      	bls.n	6276 <__hexnan+0x9e>
    6282:	eba5 030c 	sub.w	r3, r5, ip
    6286:	f023 0303 	bic.w	r3, r3, #3
    628a:	1c69      	adds	r1, r5, #1
    628c:	3304      	adds	r3, #4
    628e:	f10c 0c01 	add.w	ip, ip, #1
    6292:	4561      	cmp	r1, ip
    6294:	bf38      	it	cc
    6296:	2304      	movcc	r3, #4
    6298:	4413      	add	r3, r2
    629a:	2100      	movs	r1, #0
    629c:	f843 1b04 	str.w	r1, [r3], #4
    62a0:	42ab      	cmp	r3, r5
    62a2:	d9fb      	bls.n	629c <__hexnan+0xc4>
    62a4:	9b01      	ldr	r3, [sp, #4]
    62a6:	f853 3c04 	ldr.w	r3, [r3, #-4]
    62aa:	b92b      	cbnz	r3, 62b8 <__hexnan+0xe0>
    62ac:	42aa      	cmp	r2, r5
    62ae:	d049      	beq.n	6344 <__hexnan+0x16c>
    62b0:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    62b4:	2b00      	cmp	r3, #0
    62b6:	d0f9      	beq.n	62ac <__hexnan+0xd4>
    62b8:	2005      	movs	r0, #5
    62ba:	b005      	add	sp, #20
    62bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    62c0:	4562      	cmp	r2, ip
    62c2:	d2b6      	bcs.n	6232 <__hexnan+0x5a>
    62c4:	2300      	movs	r3, #0
    62c6:	f84c 3c04 	str.w	r3, [ip, #-4]
    62ca:	4619      	mov	r1, r3
    62cc:	f1ac 0c04 	sub.w	ip, ip, #4
    62d0:	2301      	movs	r3, #1
    62d2:	e7bd      	b.n	6250 <__hexnan+0x78>
    62d4:	2300      	movs	r3, #0
    62d6:	f1ac 0804 	sub.w	r8, ip, #4
    62da:	f84c 3c04 	str.w	r3, [ip, #-4]
    62de:	46b2      	mov	sl, r6
    62e0:	46c4      	mov	ip, r8
    62e2:	e7a6      	b.n	6232 <__hexnan+0x5a>
    62e4:	f1c3 0108 	rsb	r1, r3, #8
    62e8:	f8dc 3000 	ldr.w	r3, [ip]
    62ec:	0089      	lsls	r1, r1, #2
    62ee:	f1c1 0e20 	rsb	lr, r1, #32
    62f2:	4660      	mov	r0, ip
    62f4:	469b      	mov	fp, r3
    62f6:	6847      	ldr	r7, [r0, #4]
    62f8:	fa07 f30e 	lsl.w	r3, r7, lr
    62fc:	ea43 030b 	orr.w	r3, r3, fp
    6300:	fa27 fb01 	lsr.w	fp, r7, r1
    6304:	6003      	str	r3, [r0, #0]
    6306:	f840 bf04 	str.w	fp, [r0, #4]!
    630a:	4540      	cmp	r0, r8
    630c:	d3f3      	bcc.n	62f6 <__hexnan+0x11e>
    630e:	e78d      	b.n	622c <__hexnan+0x54>
    6310:	1d19      	adds	r1, r3, #4
    6312:	9101      	str	r1, [sp, #4]
    6314:	461d      	mov	r5, r3
    6316:	e76e      	b.n	61f6 <__hexnan+0x1e>
    6318:	9b03      	ldr	r3, [sp, #12]
    631a:	2b00      	cmp	r3, #0
    631c:	d0c2      	beq.n	62a4 <__hexnan+0xcc>
    631e:	9b03      	ldr	r3, [sp, #12]
    6320:	9801      	ldr	r0, [sp, #4]
    6322:	f1c3 0120 	rsb	r1, r3, #32
    6326:	f04f 33ff 	mov.w	r3, #4294967295
    632a:	40cb      	lsrs	r3, r1
    632c:	f850 1c04 	ldr.w	r1, [r0, #-4]
    6330:	400b      	ands	r3, r1
    6332:	f840 3c04 	str.w	r3, [r0, #-4]
    6336:	e7b8      	b.n	62aa <__hexnan+0xd2>
    6338:	2929      	cmp	r1, #41	; 0x29
    633a:	d009      	beq.n	6350 <__hexnan+0x178>
    633c:	2004      	movs	r0, #4
    633e:	b005      	add	sp, #20
    6340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6344:	2301      	movs	r3, #1
    6346:	2005      	movs	r0, #5
    6348:	602b      	str	r3, [r5, #0]
    634a:	b005      	add	sp, #20
    634c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6350:	9902      	ldr	r1, [sp, #8]
    6352:	3401      	adds	r4, #1
    6354:	600c      	str	r4, [r1, #0]
    6356:	e784      	b.n	6262 <__hexnan+0x8a>
    6358:	f8dc 1000 	ldr.w	r1, [ip]
    635c:	f1c3 0308 	rsb	r3, r3, #8
    6360:	009b      	lsls	r3, r3, #2
    6362:	f1c3 0720 	rsb	r7, r3, #32
    6366:	4664      	mov	r4, ip
    6368:	4608      	mov	r0, r1
    636a:	6866      	ldr	r6, [r4, #4]
    636c:	fa06 f107 	lsl.w	r1, r6, r7
    6370:	4301      	orrs	r1, r0
    6372:	fa26 f003 	lsr.w	r0, r6, r3
    6376:	6021      	str	r1, [r4, #0]
    6378:	f844 0f04 	str.w	r0, [r4, #4]!
    637c:	4544      	cmp	r4, r8
    637e:	d3f4      	bcc.n	636a <__hexnan+0x192>
    6380:	e775      	b.n	626e <__hexnan+0x96>
    6382:	bf00      	nop
    6384:	200005cc 	.word	0x200005cc

00006388 <__ascii_mbtowc>:
    6388:	b082      	sub	sp, #8
    638a:	b149      	cbz	r1, 63a0 <__ascii_mbtowc+0x18>
    638c:	b15a      	cbz	r2, 63a6 <__ascii_mbtowc+0x1e>
    638e:	b16b      	cbz	r3, 63ac <__ascii_mbtowc+0x24>
    6390:	7813      	ldrb	r3, [r2, #0]
    6392:	600b      	str	r3, [r1, #0]
    6394:	7812      	ldrb	r2, [r2, #0]
    6396:	1e10      	subs	r0, r2, #0
    6398:	bf18      	it	ne
    639a:	2001      	movne	r0, #1
    639c:	b002      	add	sp, #8
    639e:	4770      	bx	lr
    63a0:	a901      	add	r1, sp, #4
    63a2:	2a00      	cmp	r2, #0
    63a4:	d1f3      	bne.n	638e <__ascii_mbtowc+0x6>
    63a6:	4610      	mov	r0, r2
    63a8:	b002      	add	sp, #8
    63aa:	4770      	bx	lr
    63ac:	f06f 0001 	mvn.w	r0, #1
    63b0:	e7f4      	b.n	639c <__ascii_mbtowc+0x14>
    63b2:	bf00      	nop

000063b4 <_Balloc>:
    63b4:	6c43      	ldr	r3, [r0, #68]	; 0x44
    63b6:	b570      	push	{r4, r5, r6, lr}
    63b8:	4605      	mov	r5, r0
    63ba:	460c      	mov	r4, r1
    63bc:	b14b      	cbz	r3, 63d2 <_Balloc+0x1e>
    63be:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    63c2:	b180      	cbz	r0, 63e6 <_Balloc+0x32>
    63c4:	6802      	ldr	r2, [r0, #0]
    63c6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    63ca:	2300      	movs	r3, #0
    63cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
    63d0:	bd70      	pop	{r4, r5, r6, pc}
    63d2:	2221      	movs	r2, #33	; 0x21
    63d4:	2104      	movs	r1, #4
    63d6:	f004 f96f 	bl	a6b8 <_calloc_r>
    63da:	4603      	mov	r3, r0
    63dc:	6468      	str	r0, [r5, #68]	; 0x44
    63de:	2800      	cmp	r0, #0
    63e0:	d1ed      	bne.n	63be <_Balloc+0xa>
    63e2:	2000      	movs	r0, #0
    63e4:	bd70      	pop	{r4, r5, r6, pc}
    63e6:	2101      	movs	r1, #1
    63e8:	fa01 f604 	lsl.w	r6, r1, r4
    63ec:	1d72      	adds	r2, r6, #5
    63ee:	0092      	lsls	r2, r2, #2
    63f0:	4628      	mov	r0, r5
    63f2:	f004 f961 	bl	a6b8 <_calloc_r>
    63f6:	2800      	cmp	r0, #0
    63f8:	d0f3      	beq.n	63e2 <_Balloc+0x2e>
    63fa:	e9c0 4601 	strd	r4, r6, [r0, #4]
    63fe:	e7e4      	b.n	63ca <_Balloc+0x16>

00006400 <_Bfree>:
    6400:	b131      	cbz	r1, 6410 <_Bfree+0x10>
    6402:	6c43      	ldr	r3, [r0, #68]	; 0x44
    6404:	684a      	ldr	r2, [r1, #4]
    6406:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    640a:	6008      	str	r0, [r1, #0]
    640c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    6410:	4770      	bx	lr
    6412:	bf00      	nop

00006414 <__multadd>:
    6414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6418:	690e      	ldr	r6, [r1, #16]
    641a:	4680      	mov	r8, r0
    641c:	460f      	mov	r7, r1
    641e:	461d      	mov	r5, r3
    6420:	f101 0e14 	add.w	lr, r1, #20
    6424:	2000      	movs	r0, #0
    6426:	f8de 1000 	ldr.w	r1, [lr]
    642a:	b28c      	uxth	r4, r1
    642c:	fb02 5304 	mla	r3, r2, r4, r5
    6430:	0c09      	lsrs	r1, r1, #16
    6432:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    6436:	fb02 cc01 	mla	ip, r2, r1, ip
    643a:	3001      	adds	r0, #1
    643c:	b29c      	uxth	r4, r3
    643e:	eb04 440c 	add.w	r4, r4, ip, lsl #16
    6442:	4286      	cmp	r6, r0
    6444:	f84e 4b04 	str.w	r4, [lr], #4
    6448:	ea4f 451c 	mov.w	r5, ip, lsr #16
    644c:	dceb      	bgt.n	6426 <__multadd+0x12>
    644e:	b13d      	cbz	r5, 6460 <__multadd+0x4c>
    6450:	68bb      	ldr	r3, [r7, #8]
    6452:	42b3      	cmp	r3, r6
    6454:	dd07      	ble.n	6466 <__multadd+0x52>
    6456:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    645a:	3601      	adds	r6, #1
    645c:	615d      	str	r5, [r3, #20]
    645e:	613e      	str	r6, [r7, #16]
    6460:	4638      	mov	r0, r7
    6462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6466:	6879      	ldr	r1, [r7, #4]
    6468:	4640      	mov	r0, r8
    646a:	3101      	adds	r1, #1
    646c:	f7ff ffa2 	bl	63b4 <_Balloc>
    6470:	4604      	mov	r4, r0
    6472:	b1b0      	cbz	r0, 64a2 <__multadd+0x8e>
    6474:	693a      	ldr	r2, [r7, #16]
    6476:	3202      	adds	r2, #2
    6478:	f107 010c 	add.w	r1, r7, #12
    647c:	0092      	lsls	r2, r2, #2
    647e:	300c      	adds	r0, #12
    6480:	f7fb f8ea 	bl	1658 <memcpy>
    6484:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    6488:	687a      	ldr	r2, [r7, #4]
    648a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    648e:	6039      	str	r1, [r7, #0]
    6490:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    6494:	4627      	mov	r7, r4
    6496:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    649a:	3601      	adds	r6, #1
    649c:	615d      	str	r5, [r3, #20]
    649e:	613e      	str	r6, [r7, #16]
    64a0:	e7de      	b.n	6460 <__multadd+0x4c>
    64a2:	4b03      	ldr	r3, [pc, #12]	; (64b0 <__multadd+0x9c>)
    64a4:	4803      	ldr	r0, [pc, #12]	; (64b4 <__multadd+0xa0>)
    64a6:	4622      	mov	r2, r4
    64a8:	21ba      	movs	r1, #186	; 0xba
    64aa:	f004 f8e5 	bl	a678 <__assert_func>
    64ae:	bf00      	nop
    64b0:	20000554 	.word	0x20000554
    64b4:	200006cc 	.word	0x200006cc

000064b8 <__s2b>:
    64b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    64bc:	4617      	mov	r7, r2
    64be:	4a27      	ldr	r2, [pc, #156]	; (655c <__s2b+0xa4>)
    64c0:	461e      	mov	r6, r3
    64c2:	3308      	adds	r3, #8
    64c4:	460c      	mov	r4, r1
    64c6:	2e09      	cmp	r6, #9
    64c8:	fb82 1203 	smull	r1, r2, r2, r3
    64cc:	ea4f 73e3 	mov.w	r3, r3, asr #31
    64d0:	4605      	mov	r5, r0
    64d2:	ebc3 0362 	rsb	r3, r3, r2, asr #1
    64d6:	dd39      	ble.n	654c <__s2b+0x94>
    64d8:	f04f 0c01 	mov.w	ip, #1
    64dc:	2100      	movs	r1, #0
    64de:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    64e2:	4563      	cmp	r3, ip
    64e4:	f101 0101 	add.w	r1, r1, #1
    64e8:	dcf9      	bgt.n	64de <__s2b+0x26>
    64ea:	4628      	mov	r0, r5
    64ec:	f7ff ff62 	bl	63b4 <_Balloc>
    64f0:	4601      	mov	r1, r0
    64f2:	b368      	cbz	r0, 6550 <__s2b+0x98>
    64f4:	9b08      	ldr	r3, [sp, #32]
    64f6:	6143      	str	r3, [r0, #20]
    64f8:	2f09      	cmp	r7, #9
    64fa:	f04f 0301 	mov.w	r3, #1
    64fe:	6103      	str	r3, [r0, #16]
    6500:	dc12      	bgt.n	6528 <__s2b+0x70>
    6502:	340a      	adds	r4, #10
    6504:	2709      	movs	r7, #9
    6506:	42be      	cmp	r6, r7
    6508:	dd0b      	ble.n	6522 <__s2b+0x6a>
    650a:	1bf2      	subs	r2, r6, r7
    650c:	18a6      	adds	r6, r4, r2
    650e:	f814 3b01 	ldrb.w	r3, [r4], #1
    6512:	220a      	movs	r2, #10
    6514:	3b30      	subs	r3, #48	; 0x30
    6516:	4628      	mov	r0, r5
    6518:	f7ff ff7c 	bl	6414 <__multadd>
    651c:	42a6      	cmp	r6, r4
    651e:	4601      	mov	r1, r0
    6520:	d1f5      	bne.n	650e <__s2b+0x56>
    6522:	4608      	mov	r0, r1
    6524:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6528:	f104 0909 	add.w	r9, r4, #9
    652c:	46c8      	mov	r8, r9
    652e:	443c      	add	r4, r7
    6530:	f818 3b01 	ldrb.w	r3, [r8], #1
    6534:	220a      	movs	r2, #10
    6536:	3b30      	subs	r3, #48	; 0x30
    6538:	4628      	mov	r0, r5
    653a:	f7ff ff6b 	bl	6414 <__multadd>
    653e:	45a0      	cmp	r8, r4
    6540:	4601      	mov	r1, r0
    6542:	d1f5      	bne.n	6530 <__s2b+0x78>
    6544:	f1a7 0408 	sub.w	r4, r7, #8
    6548:	444c      	add	r4, r9
    654a:	e7dc      	b.n	6506 <__s2b+0x4e>
    654c:	2100      	movs	r1, #0
    654e:	e7cc      	b.n	64ea <__s2b+0x32>
    6550:	460a      	mov	r2, r1
    6552:	4b03      	ldr	r3, [pc, #12]	; (6560 <__s2b+0xa8>)
    6554:	4803      	ldr	r0, [pc, #12]	; (6564 <__s2b+0xac>)
    6556:	21d3      	movs	r1, #211	; 0xd3
    6558:	f004 f88e 	bl	a678 <__assert_func>
    655c:	38e38e39 	.word	0x38e38e39
    6560:	20000554 	.word	0x20000554
    6564:	200006cc 	.word	0x200006cc

00006568 <__hi0bits>:
    6568:	0c03      	lsrs	r3, r0, #16
    656a:	041b      	lsls	r3, r3, #16
    656c:	b9d3      	cbnz	r3, 65a4 <__hi0bits+0x3c>
    656e:	0400      	lsls	r0, r0, #16
    6570:	2310      	movs	r3, #16
    6572:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
    6576:	bf04      	itt	eq
    6578:	0200      	lsleq	r0, r0, #8
    657a:	3308      	addeq	r3, #8
    657c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
    6580:	bf04      	itt	eq
    6582:	0100      	lsleq	r0, r0, #4
    6584:	3304      	addeq	r3, #4
    6586:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
    658a:	bf04      	itt	eq
    658c:	0080      	lsleq	r0, r0, #2
    658e:	3302      	addeq	r3, #2
    6590:	2800      	cmp	r0, #0
    6592:	db05      	blt.n	65a0 <__hi0bits+0x38>
    6594:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
    6598:	f103 0301 	add.w	r3, r3, #1
    659c:	bf08      	it	eq
    659e:	2320      	moveq	r3, #32
    65a0:	4618      	mov	r0, r3
    65a2:	4770      	bx	lr
    65a4:	2300      	movs	r3, #0
    65a6:	e7e4      	b.n	6572 <__hi0bits+0xa>

000065a8 <__lo0bits>:
    65a8:	6803      	ldr	r3, [r0, #0]
    65aa:	f013 0207 	ands.w	r2, r3, #7
    65ae:	d008      	beq.n	65c2 <__lo0bits+0x1a>
    65b0:	07d9      	lsls	r1, r3, #31
    65b2:	d41f      	bmi.n	65f4 <__lo0bits+0x4c>
    65b4:	079a      	lsls	r2, r3, #30
    65b6:	d522      	bpl.n	65fe <__lo0bits+0x56>
    65b8:	085b      	lsrs	r3, r3, #1
    65ba:	6003      	str	r3, [r0, #0]
    65bc:	2201      	movs	r2, #1
    65be:	4610      	mov	r0, r2
    65c0:	4770      	bx	lr
    65c2:	b299      	uxth	r1, r3
    65c4:	b909      	cbnz	r1, 65ca <__lo0bits+0x22>
    65c6:	0c1b      	lsrs	r3, r3, #16
    65c8:	2210      	movs	r2, #16
    65ca:	b2d9      	uxtb	r1, r3
    65cc:	b909      	cbnz	r1, 65d2 <__lo0bits+0x2a>
    65ce:	3208      	adds	r2, #8
    65d0:	0a1b      	lsrs	r3, r3, #8
    65d2:	0719      	lsls	r1, r3, #28
    65d4:	bf04      	itt	eq
    65d6:	091b      	lsreq	r3, r3, #4
    65d8:	3204      	addeq	r2, #4
    65da:	0799      	lsls	r1, r3, #30
    65dc:	bf04      	itt	eq
    65de:	089b      	lsreq	r3, r3, #2
    65e0:	3202      	addeq	r2, #2
    65e2:	07d9      	lsls	r1, r3, #31
    65e4:	d403      	bmi.n	65ee <__lo0bits+0x46>
    65e6:	085b      	lsrs	r3, r3, #1
    65e8:	f102 0201 	add.w	r2, r2, #1
    65ec:	d005      	beq.n	65fa <__lo0bits+0x52>
    65ee:	6003      	str	r3, [r0, #0]
    65f0:	4610      	mov	r0, r2
    65f2:	4770      	bx	lr
    65f4:	2200      	movs	r2, #0
    65f6:	4610      	mov	r0, r2
    65f8:	4770      	bx	lr
    65fa:	2220      	movs	r2, #32
    65fc:	e7df      	b.n	65be <__lo0bits+0x16>
    65fe:	089b      	lsrs	r3, r3, #2
    6600:	2202      	movs	r2, #2
    6602:	6003      	str	r3, [r0, #0]
    6604:	4610      	mov	r0, r2
    6606:	4770      	bx	lr

00006608 <__i2b>:
    6608:	b538      	push	{r3, r4, r5, lr}
    660a:	6c43      	ldr	r3, [r0, #68]	; 0x44
    660c:	4604      	mov	r4, r0
    660e:	460d      	mov	r5, r1
    6610:	b14b      	cbz	r3, 6626 <__i2b+0x1e>
    6612:	6858      	ldr	r0, [r3, #4]
    6614:	b1b0      	cbz	r0, 6644 <__i2b+0x3c>
    6616:	6802      	ldr	r2, [r0, #0]
    6618:	605a      	str	r2, [r3, #4]
    661a:	2200      	movs	r2, #0
    661c:	2301      	movs	r3, #1
    661e:	e9c0 3504 	strd	r3, r5, [r0, #16]
    6622:	60c2      	str	r2, [r0, #12]
    6624:	bd38      	pop	{r3, r4, r5, pc}
    6626:	2221      	movs	r2, #33	; 0x21
    6628:	2104      	movs	r1, #4
    662a:	f004 f845 	bl	a6b8 <_calloc_r>
    662e:	4603      	mov	r3, r0
    6630:	6460      	str	r0, [r4, #68]	; 0x44
    6632:	2800      	cmp	r0, #0
    6634:	d1ed      	bne.n	6612 <__i2b+0xa>
    6636:	4b09      	ldr	r3, [pc, #36]	; (665c <__i2b+0x54>)
    6638:	4809      	ldr	r0, [pc, #36]	; (6660 <__i2b+0x58>)
    663a:	2200      	movs	r2, #0
    663c:	f240 1145 	movw	r1, #325	; 0x145
    6640:	f004 f81a 	bl	a678 <__assert_func>
    6644:	221c      	movs	r2, #28
    6646:	2101      	movs	r1, #1
    6648:	4620      	mov	r0, r4
    664a:	f004 f835 	bl	a6b8 <_calloc_r>
    664e:	2800      	cmp	r0, #0
    6650:	d0f1      	beq.n	6636 <__i2b+0x2e>
    6652:	2201      	movs	r2, #1
    6654:	2302      	movs	r3, #2
    6656:	e9c0 2301 	strd	r2, r3, [r0, #4]
    665a:	e7de      	b.n	661a <__i2b+0x12>
    665c:	20000554 	.word	0x20000554
    6660:	200006cc 	.word	0x200006cc

00006664 <__multiply>:
    6664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6668:	690e      	ldr	r6, [r1, #16]
    666a:	6915      	ldr	r5, [r2, #16]
    666c:	42ae      	cmp	r6, r5
    666e:	b085      	sub	sp, #20
    6670:	4688      	mov	r8, r1
    6672:	4614      	mov	r4, r2
    6674:	db05      	blt.n	6682 <__multiply+0x1e>
    6676:	462a      	mov	r2, r5
    6678:	4623      	mov	r3, r4
    667a:	4635      	mov	r5, r6
    667c:	460c      	mov	r4, r1
    667e:	4616      	mov	r6, r2
    6680:	4698      	mov	r8, r3
    6682:	68a3      	ldr	r3, [r4, #8]
    6684:	6861      	ldr	r1, [r4, #4]
    6686:	19af      	adds	r7, r5, r6
    6688:	42bb      	cmp	r3, r7
    668a:	bfb8      	it	lt
    668c:	3101      	addlt	r1, #1
    668e:	f7ff fe91 	bl	63b4 <_Balloc>
    6692:	9001      	str	r0, [sp, #4]
    6694:	2800      	cmp	r0, #0
    6696:	f000 8087 	beq.w	67a8 <__multiply+0x144>
    669a:	9b01      	ldr	r3, [sp, #4]
    669c:	f103 0914 	add.w	r9, r3, #20
    66a0:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
    66a4:	45d1      	cmp	r9, sl
    66a6:	d205      	bcs.n	66b4 <__multiply+0x50>
    66a8:	464b      	mov	r3, r9
    66aa:	2200      	movs	r2, #0
    66ac:	f843 2b04 	str.w	r2, [r3], #4
    66b0:	459a      	cmp	sl, r3
    66b2:	d8fb      	bhi.n	66ac <__multiply+0x48>
    66b4:	f108 0814 	add.w	r8, r8, #20
    66b8:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
    66bc:	f104 0314 	add.w	r3, r4, #20
    66c0:	45d8      	cmp	r8, fp
    66c2:	461a      	mov	r2, r3
    66c4:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    66c8:	d25f      	bcs.n	678a <__multiply+0x126>
    66ca:	1b2b      	subs	r3, r5, r4
    66cc:	3b15      	subs	r3, #21
    66ce:	f023 0303 	bic.w	r3, r3, #3
    66d2:	3304      	adds	r3, #4
    66d4:	3415      	adds	r4, #21
    66d6:	42a5      	cmp	r5, r4
    66d8:	bf38      	it	cc
    66da:	2304      	movcc	r3, #4
    66dc:	e9cd a702 	strd	sl, r7, [sp, #8]
    66e0:	46ac      	mov	ip, r5
    66e2:	461f      	mov	r7, r3
    66e4:	4692      	mov	sl, r2
    66e6:	e005      	b.n	66f4 <__multiply+0x90>
    66e8:	0c09      	lsrs	r1, r1, #16
    66ea:	d129      	bne.n	6740 <__multiply+0xdc>
    66ec:	45c3      	cmp	fp, r8
    66ee:	f109 0904 	add.w	r9, r9, #4
    66f2:	d948      	bls.n	6786 <__multiply+0x122>
    66f4:	f858 1b04 	ldr.w	r1, [r8], #4
    66f8:	b28d      	uxth	r5, r1
    66fa:	2d00      	cmp	r5, #0
    66fc:	d0f4      	beq.n	66e8 <__multiply+0x84>
    66fe:	4656      	mov	r6, sl
    6700:	464c      	mov	r4, r9
    6702:	2300      	movs	r3, #0
    6704:	f856 1b04 	ldr.w	r1, [r6], #4
    6708:	6822      	ldr	r2, [r4, #0]
    670a:	fa1f fe81 	uxth.w	lr, r1
    670e:	b290      	uxth	r0, r2
    6710:	0c09      	lsrs	r1, r1, #16
    6712:	fb05 000e 	mla	r0, r5, lr, r0
    6716:	0c12      	lsrs	r2, r2, #16
    6718:	4403      	add	r3, r0
    671a:	fb05 2201 	mla	r2, r5, r1, r2
    671e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    6722:	b29b      	uxth	r3, r3
    6724:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    6728:	45b4      	cmp	ip, r6
    672a:	f844 3b04 	str.w	r3, [r4], #4
    672e:	ea4f 4312 	mov.w	r3, r2, lsr #16
    6732:	d8e7      	bhi.n	6704 <__multiply+0xa0>
    6734:	f849 3007 	str.w	r3, [r9, r7]
    6738:	f858 1c04 	ldr.w	r1, [r8, #-4]
    673c:	0c09      	lsrs	r1, r1, #16
    673e:	d0d5      	beq.n	66ec <__multiply+0x88>
    6740:	f8d9 3000 	ldr.w	r3, [r9]
    6744:	4650      	mov	r0, sl
    6746:	461a      	mov	r2, r3
    6748:	464c      	mov	r4, r9
    674a:	2600      	movs	r6, #0
    674c:	8805      	ldrh	r5, [r0, #0]
    674e:	0c12      	lsrs	r2, r2, #16
    6750:	fb01 2205 	mla	r2, r1, r5, r2
    6754:	4416      	add	r6, r2
    6756:	b29b      	uxth	r3, r3
    6758:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    675c:	f844 3b04 	str.w	r3, [r4], #4
    6760:	f850 5b04 	ldr.w	r5, [r0], #4
    6764:	6822      	ldr	r2, [r4, #0]
    6766:	0c2d      	lsrs	r5, r5, #16
    6768:	b293      	uxth	r3, r2
    676a:	fb01 3305 	mla	r3, r1, r5, r3
    676e:	eb03 4316 	add.w	r3, r3, r6, lsr #16
    6772:	4584      	cmp	ip, r0
    6774:	ea4f 4613 	mov.w	r6, r3, lsr #16
    6778:	d8e8      	bhi.n	674c <__multiply+0xe8>
    677a:	45c3      	cmp	fp, r8
    677c:	f849 3007 	str.w	r3, [r9, r7]
    6780:	f109 0904 	add.w	r9, r9, #4
    6784:	d8b6      	bhi.n	66f4 <__multiply+0x90>
    6786:	e9dd a702 	ldrd	sl, r7, [sp, #8]
    678a:	2f00      	cmp	r7, #0
    678c:	dc02      	bgt.n	6794 <__multiply+0x130>
    678e:	e005      	b.n	679c <__multiply+0x138>
    6790:	3f01      	subs	r7, #1
    6792:	d003      	beq.n	679c <__multiply+0x138>
    6794:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
    6798:	2b00      	cmp	r3, #0
    679a:	d0f9      	beq.n	6790 <__multiply+0x12c>
    679c:	9b01      	ldr	r3, [sp, #4]
    679e:	4618      	mov	r0, r3
    67a0:	611f      	str	r7, [r3, #16]
    67a2:	b005      	add	sp, #20
    67a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    67a8:	4b03      	ldr	r3, [pc, #12]	; (67b8 <__multiply+0x154>)
    67aa:	4804      	ldr	r0, [pc, #16]	; (67bc <__multiply+0x158>)
    67ac:	9a01      	ldr	r2, [sp, #4]
    67ae:	f44f 71b1 	mov.w	r1, #354	; 0x162
    67b2:	f003 ff61 	bl	a678 <__assert_func>
    67b6:	bf00      	nop
    67b8:	20000554 	.word	0x20000554
    67bc:	200006cc 	.word	0x200006cc

000067c0 <__pow5mult>:
    67c0:	f012 0303 	ands.w	r3, r2, #3
    67c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    67c8:	4614      	mov	r4, r2
    67ca:	4606      	mov	r6, r0
    67cc:	d132      	bne.n	6834 <__pow5mult+0x74>
    67ce:	460d      	mov	r5, r1
    67d0:	10a4      	asrs	r4, r4, #2
    67d2:	d020      	beq.n	6816 <__pow5mult+0x56>
    67d4:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
    67d8:	f1b8 0f00 	cmp.w	r8, #0
    67dc:	d033      	beq.n	6846 <__pow5mult+0x86>
    67de:	07e3      	lsls	r3, r4, #31
    67e0:	f04f 0700 	mov.w	r7, #0
    67e4:	d407      	bmi.n	67f6 <__pow5mult+0x36>
    67e6:	1064      	asrs	r4, r4, #1
    67e8:	d015      	beq.n	6816 <__pow5mult+0x56>
    67ea:	f8d8 0000 	ldr.w	r0, [r8]
    67ee:	b1a8      	cbz	r0, 681c <__pow5mult+0x5c>
    67f0:	4680      	mov	r8, r0
    67f2:	07e3      	lsls	r3, r4, #31
    67f4:	d5f7      	bpl.n	67e6 <__pow5mult+0x26>
    67f6:	4642      	mov	r2, r8
    67f8:	4629      	mov	r1, r5
    67fa:	4630      	mov	r0, r6
    67fc:	f7ff ff32 	bl	6664 <__multiply>
    6800:	b1b5      	cbz	r5, 6830 <__pow5mult+0x70>
    6802:	6869      	ldr	r1, [r5, #4]
    6804:	6c73      	ldr	r3, [r6, #68]	; 0x44
    6806:	1064      	asrs	r4, r4, #1
    6808:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    680c:	602a      	str	r2, [r5, #0]
    680e:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
    6812:	4605      	mov	r5, r0
    6814:	d1e9      	bne.n	67ea <__pow5mult+0x2a>
    6816:	4628      	mov	r0, r5
    6818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    681c:	4642      	mov	r2, r8
    681e:	4641      	mov	r1, r8
    6820:	4630      	mov	r0, r6
    6822:	f7ff ff1f 	bl	6664 <__multiply>
    6826:	f8c8 0000 	str.w	r0, [r8]
    682a:	6007      	str	r7, [r0, #0]
    682c:	4680      	mov	r8, r0
    682e:	e7e0      	b.n	67f2 <__pow5mult+0x32>
    6830:	4605      	mov	r5, r0
    6832:	e7d8      	b.n	67e6 <__pow5mult+0x26>
    6834:	3b01      	subs	r3, #1
    6836:	4a0f      	ldr	r2, [pc, #60]	; (6874 <__pow5mult+0xb4>)
    6838:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    683c:	2300      	movs	r3, #0
    683e:	f7ff fde9 	bl	6414 <__multadd>
    6842:	4605      	mov	r5, r0
    6844:	e7c4      	b.n	67d0 <__pow5mult+0x10>
    6846:	2101      	movs	r1, #1
    6848:	4630      	mov	r0, r6
    684a:	f7ff fdb3 	bl	63b4 <_Balloc>
    684e:	4680      	mov	r8, r0
    6850:	b140      	cbz	r0, 6864 <__pow5mult+0xa4>
    6852:	2301      	movs	r3, #1
    6854:	f240 2271 	movw	r2, #625	; 0x271
    6858:	e9c0 3204 	strd	r3, r2, [r0, #16]
    685c:	2300      	movs	r3, #0
    685e:	6430      	str	r0, [r6, #64]	; 0x40
    6860:	6003      	str	r3, [r0, #0]
    6862:	e7bc      	b.n	67de <__pow5mult+0x1e>
    6864:	4b04      	ldr	r3, [pc, #16]	; (6878 <__pow5mult+0xb8>)
    6866:	4805      	ldr	r0, [pc, #20]	; (687c <__pow5mult+0xbc>)
    6868:	4642      	mov	r2, r8
    686a:	f240 1145 	movw	r1, #325	; 0x145
    686e:	f003 ff03 	bl	a678 <__assert_func>
    6872:	bf00      	nop
    6874:	20007704 	.word	0x20007704
    6878:	20000554 	.word	0x20000554
    687c:	200006cc 	.word	0x200006cc

00006880 <__lshift>:
    6880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6884:	460d      	mov	r5, r1
    6886:	4614      	mov	r4, r2
    6888:	692f      	ldr	r7, [r5, #16]
    688a:	68ab      	ldr	r3, [r5, #8]
    688c:	6849      	ldr	r1, [r1, #4]
    688e:	eb07 1762 	add.w	r7, r7, r2, asr #5
    6892:	1c7e      	adds	r6, r7, #1
    6894:	429e      	cmp	r6, r3
    6896:	4680      	mov	r8, r0
    6898:	ea4f 1962 	mov.w	r9, r2, asr #5
    689c:	dd04      	ble.n	68a8 <__lshift+0x28>
    689e:	005b      	lsls	r3, r3, #1
    68a0:	429e      	cmp	r6, r3
    68a2:	f101 0101 	add.w	r1, r1, #1
    68a6:	dcfa      	bgt.n	689e <__lshift+0x1e>
    68a8:	4640      	mov	r0, r8
    68aa:	f7ff fd83 	bl	63b4 <_Balloc>
    68ae:	4684      	mov	ip, r0
    68b0:	2800      	cmp	r0, #0
    68b2:	d052      	beq.n	695a <__lshift+0xda>
    68b4:	f1b9 0f00 	cmp.w	r9, #0
    68b8:	f100 0214 	add.w	r2, r0, #20
    68bc:	dd0e      	ble.n	68dc <__lshift+0x5c>
    68be:	f109 0105 	add.w	r1, r9, #5
    68c2:	ea4f 0e81 	mov.w	lr, r1, lsl #2
    68c6:	4613      	mov	r3, r2
    68c8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    68cc:	2000      	movs	r0, #0
    68ce:	f843 0b04 	str.w	r0, [r3], #4
    68d2:	428b      	cmp	r3, r1
    68d4:	d1fb      	bne.n	68ce <__lshift+0x4e>
    68d6:	f1ae 0314 	sub.w	r3, lr, #20
    68da:	441a      	add	r2, r3
    68dc:	6929      	ldr	r1, [r5, #16]
    68de:	f105 0314 	add.w	r3, r5, #20
    68e2:	f014 0e1f 	ands.w	lr, r4, #31
    68e6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    68ea:	d02e      	beq.n	694a <__lshift+0xca>
    68ec:	f1ce 0920 	rsb	r9, lr, #32
    68f0:	4610      	mov	r0, r2
    68f2:	f04f 0a00 	mov.w	sl, #0
    68f6:	681c      	ldr	r4, [r3, #0]
    68f8:	fa04 f40e 	lsl.w	r4, r4, lr
    68fc:	ea44 040a 	orr.w	r4, r4, sl
    6900:	f840 4b04 	str.w	r4, [r0], #4
    6904:	f853 4b04 	ldr.w	r4, [r3], #4
    6908:	4299      	cmp	r1, r3
    690a:	fa24 fa09 	lsr.w	sl, r4, r9
    690e:	d8f2      	bhi.n	68f6 <__lshift+0x76>
    6910:	1b4b      	subs	r3, r1, r5
    6912:	3b15      	subs	r3, #21
    6914:	f023 0303 	bic.w	r3, r3, #3
    6918:	3304      	adds	r3, #4
    691a:	f105 0015 	add.w	r0, r5, #21
    691e:	4281      	cmp	r1, r0
    6920:	bf38      	it	cc
    6922:	2304      	movcc	r3, #4
    6924:	f1ba 0f00 	cmp.w	sl, #0
    6928:	bf18      	it	ne
    692a:	4637      	movne	r7, r6
    692c:	f842 a003 	str.w	sl, [r2, r3]
    6930:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    6934:	686a      	ldr	r2, [r5, #4]
    6936:	f8cc 7010 	str.w	r7, [ip, #16]
    693a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    693e:	6029      	str	r1, [r5, #0]
    6940:	4660      	mov	r0, ip
    6942:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
    6946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    694a:	3a04      	subs	r2, #4
    694c:	f853 0b04 	ldr.w	r0, [r3], #4
    6950:	f842 0f04 	str.w	r0, [r2, #4]!
    6954:	4299      	cmp	r1, r3
    6956:	d8f9      	bhi.n	694c <__lshift+0xcc>
    6958:	e7ea      	b.n	6930 <__lshift+0xb0>
    695a:	4b03      	ldr	r3, [pc, #12]	; (6968 <__lshift+0xe8>)
    695c:	4803      	ldr	r0, [pc, #12]	; (696c <__lshift+0xec>)
    695e:	4662      	mov	r2, ip
    6960:	f44f 71ef 	mov.w	r1, #478	; 0x1de
    6964:	f003 fe88 	bl	a678 <__assert_func>
    6968:	20000554 	.word	0x20000554
    696c:	200006cc 	.word	0x200006cc

00006970 <__mcmp>:
    6970:	690b      	ldr	r3, [r1, #16]
    6972:	4684      	mov	ip, r0
    6974:	6900      	ldr	r0, [r0, #16]
    6976:	1ac0      	subs	r0, r0, r3
    6978:	d116      	bne.n	69a8 <__mcmp+0x38>
    697a:	f10c 0c14 	add.w	ip, ip, #20
    697e:	3114      	adds	r1, #20
    6980:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
    6984:	b410      	push	{r4}
    6986:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    698a:	e001      	b.n	6990 <__mcmp+0x20>
    698c:	4594      	cmp	ip, r2
    698e:	d208      	bcs.n	69a2 <__mcmp+0x32>
    6990:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    6994:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    6998:	428c      	cmp	r4, r1
    699a:	d0f7      	beq.n	698c <__mcmp+0x1c>
    699c:	d205      	bcs.n	69aa <__mcmp+0x3a>
    699e:	f04f 30ff 	mov.w	r0, #4294967295
    69a2:	f85d 4b04 	ldr.w	r4, [sp], #4
    69a6:	4770      	bx	lr
    69a8:	4770      	bx	lr
    69aa:	2001      	movs	r0, #1
    69ac:	f85d 4b04 	ldr.w	r4, [sp], #4
    69b0:	4770      	bx	lr
    69b2:	bf00      	nop

000069b4 <__mdiff>:
    69b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    69b8:	690f      	ldr	r7, [r1, #16]
    69ba:	6913      	ldr	r3, [r2, #16]
    69bc:	1aff      	subs	r7, r7, r3
    69be:	2f00      	cmp	r7, #0
    69c0:	460e      	mov	r6, r1
    69c2:	4690      	mov	r8, r2
    69c4:	d17f      	bne.n	6ac6 <__mdiff+0x112>
    69c6:	f101 0514 	add.w	r5, r1, #20
    69ca:	3214      	adds	r2, #20
    69cc:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    69d0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    69d4:	e001      	b.n	69da <__mdiff+0x26>
    69d6:	429d      	cmp	r5, r3
    69d8:	d278      	bcs.n	6acc <__mdiff+0x118>
    69da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    69de:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    69e2:	42a1      	cmp	r1, r4
    69e4:	d0f7      	beq.n	69d6 <__mdiff+0x22>
    69e6:	d369      	bcc.n	6abc <__mdiff+0x108>
    69e8:	6871      	ldr	r1, [r6, #4]
    69ea:	f7ff fce3 	bl	63b4 <_Balloc>
    69ee:	4681      	mov	r9, r0
    69f0:	2800      	cmp	r0, #0
    69f2:	d077      	beq.n	6ae4 <__mdiff+0x130>
    69f4:	6935      	ldr	r5, [r6, #16]
    69f6:	f8d8 2010 	ldr.w	r2, [r8, #16]
    69fa:	60c7      	str	r7, [r0, #12]
    69fc:	f108 0e14 	add.w	lr, r8, #20
    6a00:	f106 0014 	add.w	r0, r6, #20
    6a04:	f109 0a14 	add.w	sl, r9, #20
    6a08:	f106 0110 	add.w	r1, r6, #16
    6a0c:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    6a10:	eb00 0785 	add.w	r7, r0, r5, lsl #2
    6a14:	4656      	mov	r6, sl
    6a16:	f04f 0c00 	mov.w	ip, #0
    6a1a:	f85e 4b04 	ldr.w	r4, [lr], #4
    6a1e:	f851 bf04 	ldr.w	fp, [r1, #4]!
    6a22:	b2a3      	uxth	r3, r4
    6a24:	fa1c fc8b 	uxtah	ip, ip, fp
    6a28:	ebac 0303 	sub.w	r3, ip, r3
    6a2c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    6a30:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
    6a34:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
    6a38:	b29b      	uxth	r3, r3
    6a3a:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    6a3e:	4572      	cmp	r2, lr
    6a40:	f846 3b04 	str.w	r3, [r6], #4
    6a44:	ea4f 4c2c 	mov.w	ip, ip, asr #16
    6a48:	d8e7      	bhi.n	6a1a <__mdiff+0x66>
    6a4a:	eba2 0108 	sub.w	r1, r2, r8
    6a4e:	3915      	subs	r1, #21
    6a50:	f108 0815 	add.w	r8, r8, #21
    6a54:	4542      	cmp	r2, r8
    6a56:	f021 0403 	bic.w	r4, r1, #3
    6a5a:	f104 0404 	add.w	r4, r4, #4
    6a5e:	bf38      	it	cc
    6a60:	2404      	movcc	r4, #4
    6a62:	4420      	add	r0, r4
    6a64:	f021 0203 	bic.w	r2, r1, #3
    6a68:	bf38      	it	cc
    6a6a:	2200      	movcc	r2, #0
    6a6c:	4287      	cmp	r7, r0
    6a6e:	4452      	add	r2, sl
    6a70:	4454      	add	r4, sl
    6a72:	d918      	bls.n	6aa6 <__mdiff+0xf2>
    6a74:	4626      	mov	r6, r4
    6a76:	4601      	mov	r1, r0
    6a78:	f851 3b04 	ldr.w	r3, [r1], #4
    6a7c:	fa1c fc83 	uxtah	ip, ip, r3
    6a80:	ea4f 422c 	mov.w	r2, ip, asr #16
    6a84:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    6a88:	fa1f fc8c 	uxth.w	ip, ip
    6a8c:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
    6a90:	428f      	cmp	r7, r1
    6a92:	f846 3b04 	str.w	r3, [r6], #4
    6a96:	ea4f 4c22 	mov.w	ip, r2, asr #16
    6a9a:	d8ed      	bhi.n	6a78 <__mdiff+0xc4>
    6a9c:	3f01      	subs	r7, #1
    6a9e:	1a3f      	subs	r7, r7, r0
    6aa0:	f027 0703 	bic.w	r7, r7, #3
    6aa4:	19e2      	adds	r2, r4, r7
    6aa6:	b923      	cbnz	r3, 6ab2 <__mdiff+0xfe>
    6aa8:	f852 3d04 	ldr.w	r3, [r2, #-4]!
    6aac:	3d01      	subs	r5, #1
    6aae:	2b00      	cmp	r3, #0
    6ab0:	d0fa      	beq.n	6aa8 <__mdiff+0xf4>
    6ab2:	f8c9 5010 	str.w	r5, [r9, #16]
    6ab6:	4648      	mov	r0, r9
    6ab8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6abc:	4633      	mov	r3, r6
    6abe:	2701      	movs	r7, #1
    6ac0:	4646      	mov	r6, r8
    6ac2:	4698      	mov	r8, r3
    6ac4:	e790      	b.n	69e8 <__mdiff+0x34>
    6ac6:	dbf9      	blt.n	6abc <__mdiff+0x108>
    6ac8:	2700      	movs	r7, #0
    6aca:	e78d      	b.n	69e8 <__mdiff+0x34>
    6acc:	2100      	movs	r1, #0
    6ace:	f7ff fc71 	bl	63b4 <_Balloc>
    6ad2:	4681      	mov	r9, r0
    6ad4:	b168      	cbz	r0, 6af2 <__mdiff+0x13e>
    6ad6:	2201      	movs	r2, #1
    6ad8:	2300      	movs	r3, #0
    6ada:	e9c9 2304 	strd	r2, r3, [r9, #16]
    6ade:	4648      	mov	r0, r9
    6ae0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6ae4:	4b06      	ldr	r3, [pc, #24]	; (6b00 <__mdiff+0x14c>)
    6ae6:	4807      	ldr	r0, [pc, #28]	; (6b04 <__mdiff+0x150>)
    6ae8:	464a      	mov	r2, r9
    6aea:	f240 2145 	movw	r1, #581	; 0x245
    6aee:	f003 fdc3 	bl	a678 <__assert_func>
    6af2:	4b03      	ldr	r3, [pc, #12]	; (6b00 <__mdiff+0x14c>)
    6af4:	4803      	ldr	r0, [pc, #12]	; (6b04 <__mdiff+0x150>)
    6af6:	464a      	mov	r2, r9
    6af8:	f240 2137 	movw	r1, #567	; 0x237
    6afc:	f003 fdbc 	bl	a678 <__assert_func>
    6b00:	20000554 	.word	0x20000554
    6b04:	200006cc 	.word	0x200006cc

00006b08 <__ulp>:
    6b08:	b082      	sub	sp, #8
    6b0a:	ed8d 0b00 	vstr	d0, [sp]
    6b0e:	4b16      	ldr	r3, [pc, #88]	; (6b68 <__ulp+0x60>)
    6b10:	9a01      	ldr	r2, [sp, #4]
    6b12:	4013      	ands	r3, r2
    6b14:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
    6b18:	2b00      	cmp	r3, #0
    6b1a:	dd06      	ble.n	6b2a <__ulp+0x22>
    6b1c:	2200      	movs	r2, #0
    6b1e:	4619      	mov	r1, r3
    6b20:	4610      	mov	r0, r2
    6b22:	ec41 0b10 	vmov	d0, r0, r1
    6b26:	b002      	add	sp, #8
    6b28:	4770      	bx	lr
    6b2a:	425b      	negs	r3, r3
    6b2c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
    6b30:	ea4f 5223 	mov.w	r2, r3, asr #20
    6b34:	da09      	bge.n	6b4a <__ulp+0x42>
    6b36:	f44f 2300 	mov.w	r3, #524288	; 0x80000
    6b3a:	4113      	asrs	r3, r2
    6b3c:	2200      	movs	r2, #0
    6b3e:	4619      	mov	r1, r3
    6b40:	4610      	mov	r0, r2
    6b42:	ec41 0b10 	vmov	d0, r0, r1
    6b46:	b002      	add	sp, #8
    6b48:	4770      	bx	lr
    6b4a:	f1a2 0314 	sub.w	r3, r2, #20
    6b4e:	2b1e      	cmp	r3, #30
    6b50:	bfda      	itte	le
    6b52:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
    6b56:	40da      	lsrle	r2, r3
    6b58:	2201      	movgt	r2, #1
    6b5a:	2300      	movs	r3, #0
    6b5c:	4619      	mov	r1, r3
    6b5e:	4610      	mov	r0, r2
    6b60:	ec41 0b10 	vmov	d0, r0, r1
    6b64:	b002      	add	sp, #8
    6b66:	4770      	bx	lr
    6b68:	7ff00000 	.word	0x7ff00000

00006b6c <__b2d>:
    6b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6b6e:	6904      	ldr	r4, [r0, #16]
    6b70:	f100 0614 	add.w	r6, r0, #20
    6b74:	eb06 0484 	add.w	r4, r6, r4, lsl #2
    6b78:	1f27      	subs	r7, r4, #4
    6b7a:	f854 5c04 	ldr.w	r5, [r4, #-4]
    6b7e:	4628      	mov	r0, r5
    6b80:	f7ff fcf2 	bl	6568 <__hi0bits>
    6b84:	f1c0 0320 	rsb	r3, r0, #32
    6b88:	280a      	cmp	r0, #10
    6b8a:	600b      	str	r3, [r1, #0]
    6b8c:	dd1b      	ble.n	6bc6 <__b2d+0x5a>
    6b8e:	42be      	cmp	r6, r7
    6b90:	d20b      	bcs.n	6baa <__b2d+0x3e>
    6b92:	380b      	subs	r0, #11
    6b94:	f854 1c08 	ldr.w	r1, [r4, #-8]
    6b98:	d12e      	bne.n	6bf8 <__b2d+0x8c>
    6b9a:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
    6b9e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    6ba2:	460a      	mov	r2, r1
    6ba4:	ec43 2b10 	vmov	d0, r2, r3
    6ba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6baa:	f1b0 010b 	subs.w	r1, r0, #11
    6bae:	d0f4      	beq.n	6b9a <__b2d+0x2e>
    6bb0:	fa05 f101 	lsl.w	r1, r5, r1
    6bb4:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
    6bb8:	2100      	movs	r1, #0
    6bba:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    6bbe:	460a      	mov	r2, r1
    6bc0:	ec43 2b10 	vmov	d0, r2, r3
    6bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6bc6:	f1c0 0c0b 	rsb	ip, r0, #11
    6bca:	fa25 f10c 	lsr.w	r1, r5, ip
    6bce:	42be      	cmp	r6, r7
    6bd0:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
    6bd4:	bf38      	it	cc
    6bd6:	f854 1c08 	ldrcc.w	r1, [r4, #-8]
    6bda:	f100 0015 	add.w	r0, r0, #21
    6bde:	bf34      	ite	cc
    6be0:	fa21 f10c 	lsrcc.w	r1, r1, ip
    6be4:	2100      	movcs	r1, #0
    6be6:	fa05 f000 	lsl.w	r0, r5, r0
    6bea:	4301      	orrs	r1, r0
    6bec:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    6bf0:	460a      	mov	r2, r1
    6bf2:	ec43 2b10 	vmov	d0, r2, r3
    6bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6bf8:	f1c0 0c20 	rsb	ip, r0, #32
    6bfc:	4085      	lsls	r5, r0
    6bfe:	fa21 f30c 	lsr.w	r3, r1, ip
    6c02:	ea45 0703 	orr.w	r7, r5, r3
    6c06:	f1a4 0508 	sub.w	r5, r4, #8
    6c0a:	42ae      	cmp	r6, r5
    6c0c:	fa01 f100 	lsl.w	r1, r1, r0
    6c10:	bf3c      	itt	cc
    6c12:	f854 0c0c 	ldrcc.w	r0, [r4, #-12]
    6c16:	fa20 f00c 	lsrcc.w	r0, r0, ip
    6c1a:	f047 537f 	orr.w	r3, r7, #1069547520	; 0x3fc00000
    6c1e:	bf38      	it	cc
    6c20:	4301      	orrcc	r1, r0
    6c22:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    6c26:	460a      	mov	r2, r1
    6c28:	ec43 2b10 	vmov	d0, r2, r3
    6c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6c2e:	bf00      	nop

00006c30 <__d2b>:
    6c30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6c34:	4688      	mov	r8, r1
    6c36:	b083      	sub	sp, #12
    6c38:	2101      	movs	r1, #1
    6c3a:	ec57 6b10 	vmov	r6, r7, d0
    6c3e:	4615      	mov	r5, r2
    6c40:	f7ff fbb8 	bl	63b4 <_Balloc>
    6c44:	4604      	mov	r4, r0
    6c46:	2800      	cmp	r0, #0
    6c48:	d051      	beq.n	6cee <__d2b+0xbe>
    6c4a:	f3c7 590a 	ubfx	r9, r7, #20, #11
    6c4e:	f3c7 0313 	ubfx	r3, r7, #0, #20
    6c52:	f1b9 0f00 	cmp.w	r9, #0
    6c56:	d001      	beq.n	6c5c <__d2b+0x2c>
    6c58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    6c5c:	2e00      	cmp	r6, #0
    6c5e:	9301      	str	r3, [sp, #4]
    6c60:	d118      	bne.n	6c94 <__d2b+0x64>
    6c62:	a801      	add	r0, sp, #4
    6c64:	f7ff fca0 	bl	65a8 <__lo0bits>
    6c68:	9a01      	ldr	r2, [sp, #4]
    6c6a:	6162      	str	r2, [r4, #20]
    6c6c:	2201      	movs	r2, #1
    6c6e:	f100 0320 	add.w	r3, r0, #32
    6c72:	6122      	str	r2, [r4, #16]
    6c74:	f1b9 0f00 	cmp.w	r9, #0
    6c78:	d025      	beq.n	6cc6 <__d2b+0x96>
    6c7a:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
    6c7e:	eb09 0203 	add.w	r2, r9, r3
    6c82:	4620      	mov	r0, r4
    6c84:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
    6c88:	f8c8 2000 	str.w	r2, [r8]
    6c8c:	602b      	str	r3, [r5, #0]
    6c8e:	b003      	add	sp, #12
    6c90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    6c94:	4668      	mov	r0, sp
    6c96:	9600      	str	r6, [sp, #0]
    6c98:	f7ff fc86 	bl	65a8 <__lo0bits>
    6c9c:	4603      	mov	r3, r0
    6c9e:	b310      	cbz	r0, 6ce6 <__d2b+0xb6>
    6ca0:	e9dd 0200 	ldrd	r0, r2, [sp]
    6ca4:	f1c3 0120 	rsb	r1, r3, #32
    6ca8:	fa02 f101 	lsl.w	r1, r2, r1
    6cac:	4301      	orrs	r1, r0
    6cae:	40da      	lsrs	r2, r3
    6cb0:	6161      	str	r1, [r4, #20]
    6cb2:	9201      	str	r2, [sp, #4]
    6cb4:	2a00      	cmp	r2, #0
    6cb6:	61a2      	str	r2, [r4, #24]
    6cb8:	bf14      	ite	ne
    6cba:	2202      	movne	r2, #2
    6cbc:	2201      	moveq	r2, #1
    6cbe:	6122      	str	r2, [r4, #16]
    6cc0:	f1b9 0f00 	cmp.w	r9, #0
    6cc4:	d1d9      	bne.n	6c7a <__d2b+0x4a>
    6cc6:	f2a3 4332 	subw	r3, r3, #1074	; 0x432
    6cca:	f8c8 3000 	str.w	r3, [r8]
    6cce:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    6cd2:	6918      	ldr	r0, [r3, #16]
    6cd4:	f7ff fc48 	bl	6568 <__hi0bits>
    6cd8:	ebc0 1342 	rsb	r3, r0, r2, lsl #5
    6cdc:	4620      	mov	r0, r4
    6cde:	602b      	str	r3, [r5, #0]
    6ce0:	b003      	add	sp, #12
    6ce2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    6ce6:	9a00      	ldr	r2, [sp, #0]
    6ce8:	6162      	str	r2, [r4, #20]
    6cea:	9a01      	ldr	r2, [sp, #4]
    6cec:	e7e2      	b.n	6cb4 <__d2b+0x84>
    6cee:	4b03      	ldr	r3, [pc, #12]	; (6cfc <__d2b+0xcc>)
    6cf0:	4803      	ldr	r0, [pc, #12]	; (6d00 <__d2b+0xd0>)
    6cf2:	4622      	mov	r2, r4
    6cf4:	f240 310f 	movw	r1, #783	; 0x30f
    6cf8:	f003 fcbe 	bl	a678 <__assert_func>
    6cfc:	20000554 	.word	0x20000554
    6d00:	200006cc 	.word	0x200006cc

00006d04 <__ratio>:
    6d04:	b5f0      	push	{r4, r5, r6, r7, lr}
    6d06:	b083      	sub	sp, #12
    6d08:	460e      	mov	r6, r1
    6d0a:	4669      	mov	r1, sp
    6d0c:	4607      	mov	r7, r0
    6d0e:	f7ff ff2d 	bl	6b6c <__b2d>
    6d12:	a901      	add	r1, sp, #4
    6d14:	4630      	mov	r0, r6
    6d16:	ec55 4b10 	vmov	r4, r5, d0
    6d1a:	eeb0 7b40 	vmov.f64	d7, d0
    6d1e:	f7ff ff25 	bl	6b6c <__b2d>
    6d22:	6933      	ldr	r3, [r6, #16]
    6d24:	693a      	ldr	r2, [r7, #16]
    6d26:	1ad2      	subs	r2, r2, r3
    6d28:	e9dd 3100 	ldrd	r3, r1, [sp]
    6d2c:	1a5b      	subs	r3, r3, r1
    6d2e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    6d32:	2b00      	cmp	r3, #0
    6d34:	dd09      	ble.n	6d4a <__ratio+0x46>
    6d36:	ee17 2a90 	vmov	r2, s15
    6d3a:	eb02 5503 	add.w	r5, r2, r3, lsl #20
    6d3e:	ec45 4b17 	vmov	d7, r4, r5
    6d42:	ee87 0b00 	vdiv.f64	d0, d7, d0
    6d46:	b003      	add	sp, #12
    6d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6d4a:	ee10 2a90 	vmov	r2, s1
    6d4e:	ec51 0b10 	vmov	r0, r1, d0
    6d52:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
    6d56:	eb02 5103 	add.w	r1, r2, r3, lsl #20
    6d5a:	ec41 0b10 	vmov	d0, r0, r1
    6d5e:	ee87 0b00 	vdiv.f64	d0, d7, d0
    6d62:	b003      	add	sp, #12
    6d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6d66:	bf00      	nop

00006d68 <__copybits>:
    6d68:	3901      	subs	r1, #1
    6d6a:	1149      	asrs	r1, r1, #5
    6d6c:	f101 0c01 	add.w	ip, r1, #1
    6d70:	6911      	ldr	r1, [r2, #16]
    6d72:	f102 0314 	add.w	r3, r2, #20
    6d76:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    6d7a:	428b      	cmp	r3, r1
    6d7c:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
    6d80:	d217      	bcs.n	6db2 <__copybits+0x4a>
    6d82:	b510      	push	{r4, lr}
    6d84:	f1a0 0e04 	sub.w	lr, r0, #4
    6d88:	f853 4b04 	ldr.w	r4, [r3], #4
    6d8c:	f84e 4f04 	str.w	r4, [lr, #4]!
    6d90:	4299      	cmp	r1, r3
    6d92:	d8f9      	bhi.n	6d88 <__copybits+0x20>
    6d94:	1a8a      	subs	r2, r1, r2
    6d96:	f1a2 0315 	sub.w	r3, r2, #21
    6d9a:	f023 0303 	bic.w	r3, r3, #3
    6d9e:	3304      	adds	r3, #4
    6da0:	4418      	add	r0, r3
    6da2:	4584      	cmp	ip, r0
    6da4:	d904      	bls.n	6db0 <__copybits+0x48>
    6da6:	2300      	movs	r3, #0
    6da8:	f840 3b04 	str.w	r3, [r0], #4
    6dac:	4584      	cmp	ip, r0
    6dae:	d8fb      	bhi.n	6da8 <__copybits+0x40>
    6db0:	bd10      	pop	{r4, pc}
    6db2:	4584      	cmp	ip, r0
    6db4:	d905      	bls.n	6dc2 <__copybits+0x5a>
    6db6:	2300      	movs	r3, #0
    6db8:	f840 3b04 	str.w	r3, [r0], #4
    6dbc:	4584      	cmp	ip, r0
    6dbe:	d8fb      	bhi.n	6db8 <__copybits+0x50>
    6dc0:	4770      	bx	lr
    6dc2:	4770      	bx	lr

00006dc4 <__any_on>:
    6dc4:	6903      	ldr	r3, [r0, #16]
    6dc6:	114a      	asrs	r2, r1, #5
    6dc8:	4293      	cmp	r3, r2
    6dca:	f100 0014 	add.w	r0, r0, #20
    6dce:	da09      	bge.n	6de4 <__any_on+0x20>
    6dd0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    6dd4:	e002      	b.n	6ddc <__any_on+0x18>
    6dd6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
    6dda:	b9c2      	cbnz	r2, 6e0e <__any_on+0x4a>
    6ddc:	4283      	cmp	r3, r0
    6dde:	d8fa      	bhi.n	6dd6 <__any_on+0x12>
    6de0:	2000      	movs	r0, #0
    6de2:	4770      	bx	lr
    6de4:	dd10      	ble.n	6e08 <__any_on+0x44>
    6de6:	f011 011f 	ands.w	r1, r1, #31
    6dea:	d00d      	beq.n	6e08 <__any_on+0x44>
    6dec:	b410      	push	{r4}
    6dee:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
    6df2:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    6df6:	fa24 f201 	lsr.w	r2, r4, r1
    6dfa:	408a      	lsls	r2, r1
    6dfc:	4294      	cmp	r4, r2
    6dfe:	d00c      	beq.n	6e1a <__any_on+0x56>
    6e00:	2001      	movs	r0, #1
    6e02:	f85d 4b04 	ldr.w	r4, [sp], #4
    6e06:	4770      	bx	lr
    6e08:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    6e0c:	e7e6      	b.n	6ddc <__any_on+0x18>
    6e0e:	2001      	movs	r0, #1
    6e10:	4770      	bx	lr
    6e12:	f853 2d04 	ldr.w	r2, [r3, #-4]!
    6e16:	2a00      	cmp	r2, #0
    6e18:	d1f2      	bne.n	6e00 <__any_on+0x3c>
    6e1a:	4283      	cmp	r3, r0
    6e1c:	d8f9      	bhi.n	6e12 <__any_on+0x4e>
    6e1e:	2000      	movs	r0, #0
    6e20:	f85d 4b04 	ldr.w	r4, [sp], #4
    6e24:	4770      	bx	lr
    6e26:	bf00      	nop

00006e28 <__ascii_wctomb>:
    6e28:	b149      	cbz	r1, 6e3e <__ascii_wctomb+0x16>
    6e2a:	2aff      	cmp	r2, #255	; 0xff
    6e2c:	d802      	bhi.n	6e34 <__ascii_wctomb+0xc>
    6e2e:	700a      	strb	r2, [r1, #0]
    6e30:	2001      	movs	r0, #1
    6e32:	4770      	bx	lr
    6e34:	238a      	movs	r3, #138	; 0x8a
    6e36:	6003      	str	r3, [r0, #0]
    6e38:	f04f 30ff 	mov.w	r0, #4294967295
    6e3c:	4770      	bx	lr
    6e3e:	4608      	mov	r0, r1
    6e40:	4770      	bx	lr
    6e42:	bf00      	nop
    6e44:	0000      	movs	r0, r0
	...

00006e48 <_svfprintf_r>:
    6e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6e4c:	ed2d 8b08 	vpush	{d8-d11}
    6e50:	b0d1      	sub	sp, #324	; 0x144
    6e52:	460c      	mov	r4, r1
    6e54:	ee0b 1a10 	vmov	s22, r1
    6e58:	4690      	mov	r8, r2
    6e5a:	9308      	str	r3, [sp, #32]
    6e5c:	4683      	mov	fp, r0
    6e5e:	f003 fb79 	bl	a554 <_localeconv_r>
    6e62:	6803      	ldr	r3, [r0, #0]
    6e64:	9312      	str	r3, [sp, #72]	; 0x48
    6e66:	4618      	mov	r0, r3
    6e68:	f7fe fcaa 	bl	57c0 <strlen>
    6e6c:	af20      	add	r7, sp, #128	; 0x80
    6e6e:	9010      	str	r0, [sp, #64]	; 0x40
    6e70:	2208      	movs	r2, #8
    6e72:	2100      	movs	r1, #0
    6e74:	4638      	mov	r0, r7
    6e76:	f7fe f9b9 	bl	51ec <memset>
    6e7a:	89a3      	ldrh	r3, [r4, #12]
    6e7c:	061b      	lsls	r3, r3, #24
    6e7e:	d503      	bpl.n	6e88 <_svfprintf_r+0x40>
    6e80:	6923      	ldr	r3, [r4, #16]
    6e82:	2b00      	cmp	r3, #0
    6e84:	f000 8755 	beq.w	7d32 <_svfprintf_r+0xeea>
    6e88:	2300      	movs	r3, #0
    6e8a:	ed9f 8b83 	vldr	d8, [pc, #524]	; 7098 <_svfprintf_r+0x250>
    6e8e:	ed9f 9b84 	vldr	d9, [pc, #528]	; 70a0 <_svfprintf_r+0x258>
    6e92:	e9cd 3325 	strd	r3, r3, [sp, #148]	; 0x94
    6e96:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
    6e9a:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
    6e9e:	aa27      	add	r2, sp, #156	; 0x9c
    6ea0:	930e      	str	r3, [sp, #56]	; 0x38
    6ea2:	9224      	str	r2, [sp, #144]	; 0x90
    6ea4:	4692      	mov	sl, r2
    6ea6:	9311      	str	r3, [sp, #68]	; 0x44
    6ea8:	9304      	str	r3, [sp, #16]
    6eaa:	4644      	mov	r4, r8
    6eac:	46a1      	mov	r9, r4
    6eae:	4b7e      	ldr	r3, [pc, #504]	; (70a8 <_svfprintf_r+0x260>)
    6eb0:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    6eb4:	f7fe fa64 	bl	5380 <__locale_mb_cur_max>
    6eb8:	464a      	mov	r2, r9
    6eba:	4603      	mov	r3, r0
    6ebc:	a91c      	add	r1, sp, #112	; 0x70
    6ebe:	9700      	str	r7, [sp, #0]
    6ec0:	4658      	mov	r0, fp
    6ec2:	47a8      	blx	r5
    6ec4:	2800      	cmp	r0, #0
    6ec6:	f000 80b0 	beq.w	702a <_svfprintf_r+0x1e2>
    6eca:	f2c0 80a6 	blt.w	701a <_svfprintf_r+0x1d2>
    6ece:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    6ed0:	2a25      	cmp	r2, #37	; 0x25
    6ed2:	4603      	mov	r3, r0
    6ed4:	d001      	beq.n	6eda <_svfprintf_r+0x92>
    6ed6:	4499      	add	r9, r3
    6ed8:	e7e9      	b.n	6eae <_svfprintf_r+0x66>
    6eda:	ebb9 0504 	subs.w	r5, r9, r4
    6ede:	4606      	mov	r6, r0
    6ee0:	f040 80a7 	bne.w	7032 <_svfprintf_r+0x1ea>
    6ee4:	2300      	movs	r3, #0
    6ee6:	f04f 32ff 	mov.w	r2, #4294967295
    6eea:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    6eee:	4698      	mov	r8, r3
    6ef0:	9306      	str	r3, [sp, #24]
    6ef2:	f109 0901 	add.w	r9, r9, #1
    6ef6:	f899 3000 	ldrb.w	r3, [r9]
    6efa:	9203      	str	r2, [sp, #12]
    6efc:	252b      	movs	r5, #43	; 0x2b
    6efe:	2620      	movs	r6, #32
    6f00:	f109 0901 	add.w	r9, r9, #1
    6f04:	f1a3 0220 	sub.w	r2, r3, #32
    6f08:	2a5a      	cmp	r2, #90	; 0x5a
    6f0a:	f200 80cf 	bhi.w	70ac <_svfprintf_r+0x264>
    6f0e:	e8df f012 	tbh	[pc, r2, lsl #1]
    6f12:	02e8      	.short	0x02e8
    6f14:	00cd00cd 	.word	0x00cd00cd
    6f18:	00cd02e3 	.word	0x00cd02e3
    6f1c:	00cd00cd 	.word	0x00cd00cd
    6f20:	00cd006a 	.word	0x00cd006a
    6f24:	020500cd 	.word	0x020500cd
    6f28:	00cd0284 	.word	0x00cd0284
    6f2c:	02c90210 	.word	0x02c90210
    6f30:	02bd00cd 	.word	0x02bd00cd
    6f34:	005b005b 	.word	0x005b005b
    6f38:	005b005b 	.word	0x005b005b
    6f3c:	005b005b 	.word	0x005b005b
    6f40:	005b005b 	.word	0x005b005b
    6f44:	00cd005b 	.word	0x00cd005b
    6f48:	00cd00cd 	.word	0x00cd00cd
    6f4c:	00cd00cd 	.word	0x00cd00cd
    6f50:	00cd00cd 	.word	0x00cd00cd
    6f54:	00cd0153 	.word	0x00cd0153
    6f58:	021a0183 	.word	0x021a0183
    6f5c:	01530153 	.word	0x01530153
    6f60:	00cd0153 	.word	0x00cd0153
    6f64:	00cd00cd 	.word	0x00cd00cd
    6f68:	021500cd 	.word	0x021500cd
    6f6c:	00cd00cd 	.word	0x00cd00cd
    6f70:	00cd0296 	.word	0x00cd0296
    6f74:	00cd00cd 	.word	0x00cd00cd
    6f78:	00cd01ab 	.word	0x00cd01ab
    6f7c:	00cd02aa 	.word	0x00cd02aa
    6f80:	06e300cd 	.word	0x06e300cd
    6f84:	00cd00cd 	.word	0x00cd00cd
    6f88:	00cd00cd 	.word	0x00cd00cd
    6f8c:	00cd00cd 	.word	0x00cd00cd
    6f90:	00cd00cd 	.word	0x00cd00cd
    6f94:	00cd0153 	.word	0x00cd0153
    6f98:	01de0183 	.word	0x01de0183
    6f9c:	01530153 	.word	0x01530153
    6fa0:	02770153 	.word	0x02770153
    6fa4:	007f01de 	.word	0x007f01de
    6fa8:	028900cd 	.word	0x028900cd
    6fac:	025f00cd 	.word	0x025f00cd
    6fb0:	022f06e0 	.word	0x022f06e0
    6fb4:	00cd007f 	.word	0x00cd007f
    6fb8:	007c01ab 	.word	0x007c01ab
    6fbc:	00cd06b8 	.word	0x00cd06b8
    6fc0:	06bd00cd 	.word	0x06bd00cd
    6fc4:	007c00cd 	.word	0x007c00cd
    6fc8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    6fcc:	2100      	movs	r1, #0
    6fce:	f819 3b01 	ldrb.w	r3, [r9], #1
    6fd2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    6fd6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    6fda:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    6fde:	2a09      	cmp	r2, #9
    6fe0:	d9f5      	bls.n	6fce <_svfprintf_r+0x186>
    6fe2:	9106      	str	r1, [sp, #24]
    6fe4:	e78e      	b.n	6f04 <_svfprintf_r+0xbc>
    6fe6:	4658      	mov	r0, fp
    6fe8:	f003 fab4 	bl	a554 <_localeconv_r>
    6fec:	6843      	ldr	r3, [r0, #4]
    6fee:	9315      	str	r3, [sp, #84]	; 0x54
    6ff0:	4618      	mov	r0, r3
    6ff2:	f7fe fbe5 	bl	57c0 <strlen>
    6ff6:	9016      	str	r0, [sp, #88]	; 0x58
    6ff8:	4658      	mov	r0, fp
    6ffa:	f003 faab 	bl	a554 <_localeconv_r>
    6ffe:	6883      	ldr	r3, [r0, #8]
    7000:	9313      	str	r3, [sp, #76]	; 0x4c
    7002:	9b16      	ldr	r3, [sp, #88]	; 0x58
    7004:	2b00      	cmp	r3, #0
    7006:	f040 862d 	bne.w	7c64 <_svfprintf_r+0xe1c>
    700a:	f899 3000 	ldrb.w	r3, [r9]
    700e:	e777      	b.n	6f00 <_svfprintf_r+0xb8>
    7010:	f899 3000 	ldrb.w	r3, [r9]
    7014:	f048 0820 	orr.w	r8, r8, #32
    7018:	e772      	b.n	6f00 <_svfprintf_r+0xb8>
    701a:	2208      	movs	r2, #8
    701c:	2100      	movs	r1, #0
    701e:	4638      	mov	r0, r7
    7020:	f7fe f8e4 	bl	51ec <memset>
    7024:	2301      	movs	r3, #1
    7026:	4499      	add	r9, r3
    7028:	e741      	b.n	6eae <_svfprintf_r+0x66>
    702a:	ebb9 0504 	subs.w	r5, r9, r4
    702e:	4606      	mov	r6, r0
    7030:	d011      	beq.n	7056 <_svfprintf_r+0x20e>
    7032:	9b26      	ldr	r3, [sp, #152]	; 0x98
    7034:	442b      	add	r3, r5
    7036:	9326      	str	r3, [sp, #152]	; 0x98
    7038:	9b25      	ldr	r3, [sp, #148]	; 0x94
    703a:	3301      	adds	r3, #1
    703c:	2b07      	cmp	r3, #7
    703e:	e9ca 4500 	strd	r4, r5, [sl]
    7042:	9325      	str	r3, [sp, #148]	; 0x94
    7044:	dc1c      	bgt.n	7080 <_svfprintf_r+0x238>
    7046:	f10a 0a08 	add.w	sl, sl, #8
    704a:	9b04      	ldr	r3, [sp, #16]
    704c:	442b      	add	r3, r5
    704e:	9304      	str	r3, [sp, #16]
    7050:	2e00      	cmp	r6, #0
    7052:	f47f af47 	bne.w	6ee4 <_svfprintf_r+0x9c>
    7056:	9b26      	ldr	r3, [sp, #152]	; 0x98
    7058:	2b00      	cmp	r3, #0
    705a:	f041 820b 	bne.w	8474 <_svfprintf_r+0x162c>
    705e:	ee1b 3a10 	vmov	r3, s22
    7062:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    7066:	f013 0f40 	tst.w	r3, #64	; 0x40
    706a:	9b04      	ldr	r3, [sp, #16]
    706c:	bf18      	it	ne
    706e:	f04f 33ff 	movne.w	r3, #4294967295
    7072:	9304      	str	r3, [sp, #16]
    7074:	9804      	ldr	r0, [sp, #16]
    7076:	b051      	add	sp, #324	; 0x144
    7078:	ecbd 8b08 	vpop	{d8-d11}
    707c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7080:	ee1b 1a10 	vmov	r1, s22
    7084:	aa24      	add	r2, sp, #144	; 0x90
    7086:	4658      	mov	r0, fp
    7088:	f004 fdda 	bl	bc40 <__ssprint_r>
    708c:	2800      	cmp	r0, #0
    708e:	d1e6      	bne.n	705e <_svfprintf_r+0x216>
    7090:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    7094:	e7d9      	b.n	704a <_svfprintf_r+0x202>
    7096:	bf00      	nop
	...
    70a0:	ffffffff 	.word	0xffffffff
    70a4:	7fefffff 	.word	0x7fefffff
    70a8:	20007a38 	.word	0x20007a38
    70ac:	930b      	str	r3, [sp, #44]	; 0x2c
    70ae:	2b00      	cmp	r3, #0
    70b0:	d0d1      	beq.n	7056 <_svfprintf_r+0x20e>
    70b2:	2100      	movs	r1, #0
    70b4:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    70b8:	f88d 30dc 	strb.w	r3, [sp, #220]	; 0xdc
    70bc:	2301      	movs	r3, #1
    70be:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    70c2:	9302      	str	r3, [sp, #8]
    70c4:	9107      	str	r1, [sp, #28]
    70c6:	9305      	str	r3, [sp, #20]
    70c8:	9103      	str	r1, [sp, #12]
    70ca:	910f      	str	r1, [sp, #60]	; 0x3c
    70cc:	ac37      	add	r4, sp, #220	; 0xdc
    70ce:	f018 0302 	ands.w	r3, r8, #2
    70d2:	9309      	str	r3, [sp, #36]	; 0x24
    70d4:	d002      	beq.n	70dc <_svfprintf_r+0x294>
    70d6:	9b02      	ldr	r3, [sp, #8]
    70d8:	3302      	adds	r3, #2
    70da:	9302      	str	r3, [sp, #8]
    70dc:	f018 0384 	ands.w	r3, r8, #132	; 0x84
    70e0:	930a      	str	r3, [sp, #40]	; 0x28
    70e2:	d105      	bne.n	70f0 <_svfprintf_r+0x2a8>
    70e4:	9b06      	ldr	r3, [sp, #24]
    70e6:	9a02      	ldr	r2, [sp, #8]
    70e8:	1a9d      	subs	r5, r3, r2
    70ea:	2d00      	cmp	r5, #0
    70ec:	f300 8369 	bgt.w	77c2 <_svfprintf_r+0x97a>
    70f0:	9a26      	ldr	r2, [sp, #152]	; 0x98
    70f2:	b189      	cbz	r1, 7118 <_svfprintf_r+0x2d0>
    70f4:	9925      	ldr	r1, [sp, #148]	; 0x94
    70f6:	f10d 0067 	add.w	r0, sp, #103	; 0x67
    70fa:	3101      	adds	r1, #1
    70fc:	3201      	adds	r2, #1
    70fe:	f8ca 0000 	str.w	r0, [sl]
    7102:	2907      	cmp	r1, #7
    7104:	f04f 0001 	mov.w	r0, #1
    7108:	9226      	str	r2, [sp, #152]	; 0x98
    710a:	9125      	str	r1, [sp, #148]	; 0x94
    710c:	f8ca 0004 	str.w	r0, [sl, #4]
    7110:	f300 83a2 	bgt.w	7858 <_svfprintf_r+0xa10>
    7114:	f10a 0a08 	add.w	sl, sl, #8
    7118:	9b09      	ldr	r3, [sp, #36]	; 0x24
    711a:	b183      	cbz	r3, 713e <_svfprintf_r+0x2f6>
    711c:	9b25      	ldr	r3, [sp, #148]	; 0x94
    711e:	a91a      	add	r1, sp, #104	; 0x68
    7120:	3301      	adds	r3, #1
    7122:	3202      	adds	r2, #2
    7124:	f8ca 1000 	str.w	r1, [sl]
    7128:	2b07      	cmp	r3, #7
    712a:	f04f 0102 	mov.w	r1, #2
    712e:	9226      	str	r2, [sp, #152]	; 0x98
    7130:	9325      	str	r3, [sp, #148]	; 0x94
    7132:	f8ca 1004 	str.w	r1, [sl, #4]
    7136:	f300 83a3 	bgt.w	7880 <_svfprintf_r+0xa38>
    713a:	f10a 0a08 	add.w	sl, sl, #8
    713e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7140:	2b80      	cmp	r3, #128	; 0x80
    7142:	f000 826c 	beq.w	761e <_svfprintf_r+0x7d6>
    7146:	9b03      	ldr	r3, [sp, #12]
    7148:	9905      	ldr	r1, [sp, #20]
    714a:	1a5d      	subs	r5, r3, r1
    714c:	2d00      	cmp	r5, #0
    714e:	f300 82a5 	bgt.w	769c <_svfprintf_r+0x854>
    7152:	f418 7f80 	tst.w	r8, #256	; 0x100
    7156:	f040 820d 	bne.w	7574 <_svfprintf_r+0x72c>
    715a:	9b05      	ldr	r3, [sp, #20]
    715c:	f8ca 3004 	str.w	r3, [sl, #4]
    7160:	441a      	add	r2, r3
    7162:	9b25      	ldr	r3, [sp, #148]	; 0x94
    7164:	f8ca 4000 	str.w	r4, [sl]
    7168:	3301      	adds	r3, #1
    716a:	2b07      	cmp	r3, #7
    716c:	9226      	str	r2, [sp, #152]	; 0x98
    716e:	9325      	str	r3, [sp, #148]	; 0x94
    7170:	f300 831b 	bgt.w	77aa <_svfprintf_r+0x962>
    7174:	f10a 0a08 	add.w	sl, sl, #8
    7178:	f018 0f04 	tst.w	r8, #4
    717c:	d005      	beq.n	718a <_svfprintf_r+0x342>
    717e:	9b06      	ldr	r3, [sp, #24]
    7180:	9902      	ldr	r1, [sp, #8]
    7182:	1a5c      	subs	r4, r3, r1
    7184:	2c00      	cmp	r4, #0
    7186:	f300 8388 	bgt.w	789a <_svfprintf_r+0xa52>
    718a:	9b04      	ldr	r3, [sp, #16]
    718c:	9906      	ldr	r1, [sp, #24]
    718e:	9802      	ldr	r0, [sp, #8]
    7190:	4281      	cmp	r1, r0
    7192:	bfac      	ite	ge
    7194:	185b      	addge	r3, r3, r1
    7196:	181b      	addlt	r3, r3, r0
    7198:	9304      	str	r3, [sp, #16]
    719a:	2a00      	cmp	r2, #0
    719c:	f040 82b0 	bne.w	7700 <_svfprintf_r+0x8b8>
    71a0:	2300      	movs	r3, #0
    71a2:	9325      	str	r3, [sp, #148]	; 0x94
    71a4:	9b07      	ldr	r3, [sp, #28]
    71a6:	b11b      	cbz	r3, 71b0 <_svfprintf_r+0x368>
    71a8:	9907      	ldr	r1, [sp, #28]
    71aa:	4658      	mov	r0, fp
    71ac:	f7fe fbd6 	bl	595c <_free_r>
    71b0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    71b4:	464c      	mov	r4, r9
    71b6:	e679      	b.n	6eac <_svfprintf_r+0x64>
    71b8:	930b      	str	r3, [sp, #44]	; 0x2c
    71ba:	9b08      	ldr	r3, [sp, #32]
    71bc:	3307      	adds	r3, #7
    71be:	f023 0307 	bic.w	r3, r3, #7
    71c2:	ecb3 8b02 	vldmia	r3!, {d8}
    71c6:	eeb0 7bc8 	vabs.f64	d7, d8
    71ca:	eeb4 7b49 	vcmp.f64	d7, d9
    71ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    71d2:	9308      	str	r3, [sp, #32]
    71d4:	f340 84e9 	ble.w	7baa <_svfprintf_r+0xd62>
    71d8:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
    71dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    71e0:	f101 8059 	bmi.w	8296 <_svfprintf_r+0x144e>
    71e4:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    71e8:	4cab      	ldr	r4, [pc, #684]	; (7498 <_svfprintf_r+0x650>)
    71ea:	4bac      	ldr	r3, [pc, #688]	; (749c <_svfprintf_r+0x654>)
    71ec:	f028 0880 	bic.w	r8, r8, #128	; 0x80
    71f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    71f2:	2a47      	cmp	r2, #71	; 0x47
    71f4:	bfc8      	it	gt
    71f6:	461c      	movgt	r4, r3
    71f8:	2300      	movs	r3, #0
    71fa:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    71fe:	2203      	movs	r2, #3
    7200:	9307      	str	r3, [sp, #28]
    7202:	9202      	str	r2, [sp, #8]
    7204:	9205      	str	r2, [sp, #20]
    7206:	9303      	str	r3, [sp, #12]
    7208:	930f      	str	r3, [sp, #60]	; 0x3c
    720a:	2900      	cmp	r1, #0
    720c:	f43f af5f 	beq.w	70ce <_svfprintf_r+0x286>
    7210:	9b02      	ldr	r3, [sp, #8]
    7212:	3301      	adds	r3, #1
    7214:	9302      	str	r3, [sp, #8]
    7216:	e75a      	b.n	70ce <_svfprintf_r+0x286>
    7218:	2b43      	cmp	r3, #67	; 0x43
    721a:	930b      	str	r3, [sp, #44]	; 0x2c
    721c:	d003      	beq.n	7226 <_svfprintf_r+0x3de>
    721e:	f018 0f10 	tst.w	r8, #16
    7222:	f000 855d 	beq.w	7ce0 <_svfprintf_r+0xe98>
    7226:	9d08      	ldr	r5, [sp, #32]
    7228:	2208      	movs	r2, #8
    722a:	2100      	movs	r1, #0
    722c:	a822      	add	r0, sp, #136	; 0x88
    722e:	ac37      	add	r4, sp, #220	; 0xdc
    7230:	f7fd ffdc 	bl	51ec <memset>
    7234:	ab22      	add	r3, sp, #136	; 0x88
    7236:	f855 2b04 	ldr.w	r2, [r5], #4
    723a:	4621      	mov	r1, r4
    723c:	4658      	mov	r0, fp
    723e:	f004 fbd5 	bl	b9ec <_wcrtomb_r>
    7242:	4603      	mov	r3, r0
    7244:	3301      	adds	r3, #1
    7246:	9005      	str	r0, [sp, #20]
    7248:	f001 82ee 	beq.w	8828 <_svfprintf_r+0x19e0>
    724c:	9b05      	ldr	r3, [sp, #20]
    724e:	9508      	str	r5, [sp, #32]
    7250:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    7254:	9302      	str	r3, [sp, #8]
    7256:	2100      	movs	r1, #0
    7258:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    725c:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    7260:	9107      	str	r1, [sp, #28]
    7262:	9103      	str	r1, [sp, #12]
    7264:	910f      	str	r1, [sp, #60]	; 0x3c
    7266:	e732      	b.n	70ce <_svfprintf_r+0x286>
    7268:	930b      	str	r3, [sp, #44]	; 0x2c
    726a:	9b08      	ldr	r3, [sp, #32]
    726c:	461a      	mov	r2, r3
    726e:	2300      	movs	r3, #0
    7270:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    7274:	4613      	mov	r3, r2
    7276:	f853 4b04 	ldr.w	r4, [r3], #4
    727a:	9308      	str	r3, [sp, #32]
    727c:	2c00      	cmp	r4, #0
    727e:	f000 8548 	beq.w	7d12 <_svfprintf_r+0xeca>
    7282:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7284:	2b53      	cmp	r3, #83	; 0x53
    7286:	f000 86ec 	beq.w	8062 <_svfprintf_r+0x121a>
    728a:	f018 0310 	ands.w	r3, r8, #16
    728e:	930c      	str	r3, [sp, #48]	; 0x30
    7290:	f040 86e7 	bne.w	8062 <_svfprintf_r+0x121a>
    7294:	9b03      	ldr	r3, [sp, #12]
    7296:	1c5d      	adds	r5, r3, #1
    7298:	f001 80e5 	beq.w	8466 <_svfprintf_r+0x161e>
    729c:	990c      	ldr	r1, [sp, #48]	; 0x30
    729e:	461a      	mov	r2, r3
    72a0:	4620      	mov	r0, r4
    72a2:	f003 f95d 	bl	a560 <memchr>
    72a6:	9007      	str	r0, [sp, #28]
    72a8:	2800      	cmp	r0, #0
    72aa:	f001 8328 	beq.w	88fe <_svfprintf_r+0x1ab6>
    72ae:	9b07      	ldr	r3, [sp, #28]
    72b0:	1b1a      	subs	r2, r3, r4
    72b2:	9205      	str	r2, [sp, #20]
    72b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    72b6:	9303      	str	r3, [sp, #12]
    72b8:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    72bc:	930f      	str	r3, [sp, #60]	; 0x3c
    72be:	930d      	str	r3, [sp, #52]	; 0x34
    72c0:	9307      	str	r3, [sp, #28]
    72c2:	2373      	movs	r3, #115	; 0x73
    72c4:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    72c8:	9202      	str	r2, [sp, #8]
    72ca:	930b      	str	r3, [sp, #44]	; 0x2c
    72cc:	e79d      	b.n	720a <_svfprintf_r+0x3c2>
    72ce:	f018 0f20 	tst.w	r8, #32
    72d2:	930b      	str	r3, [sp, #44]	; 0x2c
    72d4:	9b08      	ldr	r3, [sp, #32]
    72d6:	d03d      	beq.n	7354 <_svfprintf_r+0x50c>
    72d8:	3307      	adds	r3, #7
    72da:	f023 0307 	bic.w	r3, r3, #7
    72de:	461a      	mov	r2, r3
    72e0:	4611      	mov	r1, r2
    72e2:	685b      	ldr	r3, [r3, #4]
    72e4:	f851 2b08 	ldr.w	r2, [r1], #8
    72e8:	9108      	str	r1, [sp, #32]
    72ea:	4619      	mov	r1, r3
    72ec:	2b00      	cmp	r3, #0
    72ee:	f2c0 840c 	blt.w	7b0a <_svfprintf_r+0xcc2>
    72f2:	9b03      	ldr	r3, [sp, #12]
    72f4:	3301      	adds	r3, #1
    72f6:	f000 829e 	beq.w	7836 <_svfprintf_r+0x9ee>
    72fa:	f028 0080 	bic.w	r0, r8, #128	; 0x80
    72fe:	ea52 0301 	orrs.w	r3, r2, r1
    7302:	9002      	str	r0, [sp, #8]
    7304:	f040 8299 	bne.w	783a <_svfprintf_r+0x9f2>
    7308:	9b03      	ldr	r3, [sp, #12]
    730a:	2b00      	cmp	r3, #0
    730c:	f040 829a 	bne.w	7844 <_svfprintf_r+0x9fc>
    7310:	4680      	mov	r8, r0
    7312:	2300      	movs	r3, #0
    7314:	9303      	str	r3, [sp, #12]
    7316:	9305      	str	r3, [sp, #20]
    7318:	ac50      	add	r4, sp, #320	; 0x140
    731a:	e106      	b.n	752a <_svfprintf_r+0x6e2>
    731c:	9b08      	ldr	r3, [sp, #32]
    731e:	f853 2b04 	ldr.w	r2, [r3], #4
    7322:	9206      	str	r2, [sp, #24]
    7324:	2a00      	cmp	r2, #0
    7326:	f280 8419 	bge.w	7b5c <_svfprintf_r+0xd14>
    732a:	9a06      	ldr	r2, [sp, #24]
    732c:	9308      	str	r3, [sp, #32]
    732e:	4252      	negs	r2, r2
    7330:	9206      	str	r2, [sp, #24]
    7332:	f899 3000 	ldrb.w	r3, [r9]
    7336:	f048 0804 	orr.w	r8, r8, #4
    733a:	e5e1      	b.n	6f00 <_svfprintf_r+0xb8>
    733c:	f899 3000 	ldrb.w	r3, [r9]
    7340:	f048 0808 	orr.w	r8, r8, #8
    7344:	e5dc      	b.n	6f00 <_svfprintf_r+0xb8>
    7346:	f048 0810 	orr.w	r8, r8, #16
    734a:	f018 0f20 	tst.w	r8, #32
    734e:	930b      	str	r3, [sp, #44]	; 0x2c
    7350:	9b08      	ldr	r3, [sp, #32]
    7352:	d1c1      	bne.n	72d8 <_svfprintf_r+0x490>
    7354:	f018 0f10 	tst.w	r8, #16
    7358:	f040 840b 	bne.w	7b72 <_svfprintf_r+0xd2a>
    735c:	f018 0f40 	tst.w	r8, #64	; 0x40
    7360:	f000 8403 	beq.w	7b6a <_svfprintf_r+0xd22>
    7364:	f933 2b04 	ldrsh.w	r2, [r3], #4
    7368:	9308      	str	r3, [sp, #32]
    736a:	17d1      	asrs	r1, r2, #31
    736c:	460b      	mov	r3, r1
    736e:	e7bd      	b.n	72ec <_svfprintf_r+0x4a4>
    7370:	9b08      	ldr	r3, [sp, #32]
    7372:	f048 0202 	orr.w	r2, r8, #2
    7376:	9202      	str	r2, [sp, #8]
    7378:	f853 2b04 	ldr.w	r2, [r3], #4
    737c:	9308      	str	r3, [sp, #32]
    737e:	f647 0330 	movw	r3, #30768	; 0x7830
    7382:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    7386:	2078      	movs	r0, #120	; 0x78
    7388:	4b45      	ldr	r3, [pc, #276]	; (74a0 <_svfprintf_r+0x658>)
    738a:	9311      	str	r3, [sp, #68]	; 0x44
    738c:	2100      	movs	r1, #0
    738e:	2302      	movs	r3, #2
    7390:	900b      	str	r0, [sp, #44]	; 0x2c
    7392:	2000      	movs	r0, #0
    7394:	9c03      	ldr	r4, [sp, #12]
    7396:	f88d 0067 	strb.w	r0, [sp, #103]	; 0x67
    739a:	1c60      	adds	r0, r4, #1
    739c:	f000 80ad 	beq.w	74fa <_svfprintf_r+0x6b2>
    73a0:	9802      	ldr	r0, [sp, #8]
    73a2:	f020 0880 	bic.w	r8, r0, #128	; 0x80
    73a6:	ea52 0001 	orrs.w	r0, r2, r1
    73aa:	f040 80a4 	bne.w	74f6 <_svfprintf_r+0x6ae>
    73ae:	2c00      	cmp	r4, #0
    73b0:	f040 86ae 	bne.w	8110 <_svfprintf_r+0x12c8>
    73b4:	2b00      	cmp	r3, #0
    73b6:	d1ac      	bne.n	7312 <_svfprintf_r+0x4ca>
    73b8:	9b02      	ldr	r3, [sp, #8]
    73ba:	f013 0301 	ands.w	r3, r3, #1
    73be:	9305      	str	r3, [sp, #20]
    73c0:	f000 83d1 	beq.w	7b66 <_svfprintf_r+0xd1e>
    73c4:	2330      	movs	r3, #48	; 0x30
    73c6:	f88d 313f 	strb.w	r3, [sp, #319]	; 0x13f
    73ca:	f20d 143f 	addw	r4, sp, #319	; 0x13f
    73ce:	e0ac      	b.n	752a <_svfprintf_r+0x6e2>
    73d0:	f018 0f20 	tst.w	r8, #32
    73d4:	f040 83d4 	bne.w	7b80 <_svfprintf_r+0xd38>
    73d8:	f018 0f10 	tst.w	r8, #16
    73dc:	f040 869f 	bne.w	811e <_svfprintf_r+0x12d6>
    73e0:	f018 0f40 	tst.w	r8, #64	; 0x40
    73e4:	f040 8797 	bne.w	8316 <_svfprintf_r+0x14ce>
    73e8:	f418 7f00 	tst.w	r8, #512	; 0x200
    73ec:	f000 8697 	beq.w	811e <_svfprintf_r+0x12d6>
    73f0:	9b08      	ldr	r3, [sp, #32]
    73f2:	9904      	ldr	r1, [sp, #16]
    73f4:	f853 2b04 	ldr.w	r2, [r3], #4
    73f8:	9308      	str	r3, [sp, #32]
    73fa:	7011      	strb	r1, [r2, #0]
    73fc:	464c      	mov	r4, r9
    73fe:	e555      	b.n	6eac <_svfprintf_r+0x64>
    7400:	f899 3000 	ldrb.w	r3, [r9]
    7404:	2b68      	cmp	r3, #104	; 0x68
    7406:	bf03      	ittte	eq
    7408:	f899 3001 	ldrbeq.w	r3, [r9, #1]
    740c:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
    7410:	f109 0901 	addeq.w	r9, r9, #1
    7414:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
    7418:	e572      	b.n	6f00 <_svfprintf_r+0xb8>
    741a:	f899 3000 	ldrb.w	r3, [r9]
    741e:	f88d 5067 	strb.w	r5, [sp, #103]	; 0x67
    7422:	e56d      	b.n	6f00 <_svfprintf_r+0xb8>
    7424:	f899 3000 	ldrb.w	r3, [r9]
    7428:	2b6c      	cmp	r3, #108	; 0x6c
    742a:	bf03      	ittte	eq
    742c:	f899 3001 	ldrbeq.w	r3, [r9, #1]
    7430:	f048 0820 	orreq.w	r8, r8, #32
    7434:	f109 0901 	addeq.w	r9, r9, #1
    7438:	f048 0810 	orrne.w	r8, r8, #16
    743c:	e560      	b.n	6f00 <_svfprintf_r+0xb8>
    743e:	930b      	str	r3, [sp, #44]	; 0x2c
    7440:	f048 0810 	orr.w	r8, r8, #16
    7444:	f018 0120 	ands.w	r1, r8, #32
    7448:	f000 8351 	beq.w	7aee <_svfprintf_r+0xca6>
    744c:	9b08      	ldr	r3, [sp, #32]
    744e:	3307      	adds	r3, #7
    7450:	f023 0307 	bic.w	r3, r3, #7
    7454:	6859      	ldr	r1, [r3, #4]
    7456:	f853 2b08 	ldr.w	r2, [r3], #8
    745a:	9308      	str	r3, [sp, #32]
    745c:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
    7460:	9302      	str	r3, [sp, #8]
    7462:	2300      	movs	r3, #0
    7464:	e795      	b.n	7392 <_svfprintf_r+0x54a>
    7466:	930b      	str	r3, [sp, #44]	; 0x2c
    7468:	f048 0310 	orr.w	r3, r8, #16
    746c:	9302      	str	r3, [sp, #8]
    746e:	9b02      	ldr	r3, [sp, #8]
    7470:	f013 0120 	ands.w	r1, r3, #32
    7474:	f000 8329 	beq.w	7aca <_svfprintf_r+0xc82>
    7478:	9b08      	ldr	r3, [sp, #32]
    747a:	3307      	adds	r3, #7
    747c:	f023 0307 	bic.w	r3, r3, #7
    7480:	6859      	ldr	r1, [r3, #4]
    7482:	f853 2b08 	ldr.w	r2, [r3], #8
    7486:	9308      	str	r3, [sp, #32]
    7488:	2301      	movs	r3, #1
    748a:	e782      	b.n	7392 <_svfprintf_r+0x54a>
    748c:	f899 3000 	ldrb.w	r3, [r9]
    7490:	f048 0880 	orr.w	r8, r8, #128	; 0x80
    7494:	e534      	b.n	6f00 <_svfprintf_r+0xb8>
    7496:	bf00      	nop
    7498:	200008c8 	.word	0x200008c8
    749c:	200008cc 	.word	0x200008cc
    74a0:	200008d8 	.word	0x200008d8
    74a4:	4649      	mov	r1, r9
    74a6:	f811 3b01 	ldrb.w	r3, [r1], #1
    74aa:	2b2a      	cmp	r3, #42	; 0x2a
    74ac:	f001 8249 	beq.w	8942 <_svfprintf_r+0x1afa>
    74b0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    74b4:	2a09      	cmp	r2, #9
    74b6:	4689      	mov	r9, r1
    74b8:	bf98      	it	ls
    74ba:	2100      	movls	r1, #0
    74bc:	f201 8144 	bhi.w	8748 <_svfprintf_r+0x1900>
    74c0:	f819 3b01 	ldrb.w	r3, [r9], #1
    74c4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    74c8:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    74cc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    74d0:	2a09      	cmp	r2, #9
    74d2:	d9f5      	bls.n	74c0 <_svfprintf_r+0x678>
    74d4:	9103      	str	r1, [sp, #12]
    74d6:	e515      	b.n	6f04 <_svfprintf_r+0xbc>
    74d8:	f899 3000 	ldrb.w	r3, [r9]
    74dc:	f048 0801 	orr.w	r8, r8, #1
    74e0:	e50e      	b.n	6f00 <_svfprintf_r+0xb8>
    74e2:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
    74e6:	2b00      	cmp	r3, #0
    74e8:	f47f ad8f 	bne.w	700a <_svfprintf_r+0x1c2>
    74ec:	f899 3000 	ldrb.w	r3, [r9]
    74f0:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
    74f4:	e504      	b.n	6f00 <_svfprintf_r+0xb8>
    74f6:	f8cd 8008 	str.w	r8, [sp, #8]
    74fa:	2b01      	cmp	r3, #1
    74fc:	f000 819d 	beq.w	783a <_svfprintf_r+0x9f2>
    7500:	2b02      	cmp	r3, #2
    7502:	ac50      	add	r4, sp, #320	; 0x140
    7504:	d120      	bne.n	7548 <_svfprintf_r+0x700>
    7506:	9811      	ldr	r0, [sp, #68]	; 0x44
    7508:	f002 030f 	and.w	r3, r2, #15
    750c:	0912      	lsrs	r2, r2, #4
    750e:	5cc3      	ldrb	r3, [r0, r3]
    7510:	f804 3d01 	strb.w	r3, [r4, #-1]!
    7514:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    7518:	0909      	lsrs	r1, r1, #4
    751a:	ea52 0301 	orrs.w	r3, r2, r1
    751e:	d1f3      	bne.n	7508 <_svfprintf_r+0x6c0>
    7520:	ab50      	add	r3, sp, #320	; 0x140
    7522:	1b1b      	subs	r3, r3, r4
    7524:	f8dd 8008 	ldr.w	r8, [sp, #8]
    7528:	9305      	str	r3, [sp, #20]
    752a:	9a05      	ldr	r2, [sp, #20]
    752c:	9803      	ldr	r0, [sp, #12]
    752e:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    7532:	4282      	cmp	r2, r0
    7534:	f04f 0300 	mov.w	r3, #0
    7538:	bfb8      	it	lt
    753a:	4602      	movlt	r2, r0
    753c:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    7540:	9307      	str	r3, [sp, #28]
    7542:	9202      	str	r2, [sp, #8]
    7544:	930f      	str	r3, [sp, #60]	; 0x3c
    7546:	e660      	b.n	720a <_svfprintf_r+0x3c2>
    7548:	f002 0307 	and.w	r3, r2, #7
    754c:	08d2      	lsrs	r2, r2, #3
    754e:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    7552:	08c9      	lsrs	r1, r1, #3
    7554:	3330      	adds	r3, #48	; 0x30
    7556:	ea52 0501 	orrs.w	r5, r2, r1
    755a:	4620      	mov	r0, r4
    755c:	f804 3d01 	strb.w	r3, [r4, #-1]!
    7560:	d1f2      	bne.n	7548 <_svfprintf_r+0x700>
    7562:	9a02      	ldr	r2, [sp, #8]
    7564:	07d1      	lsls	r1, r2, #31
    7566:	f100 824d 	bmi.w	7a04 <_svfprintf_r+0xbbc>
    756a:	ab50      	add	r3, sp, #320	; 0x140
    756c:	1b1b      	subs	r3, r3, r4
    756e:	4690      	mov	r8, r2
    7570:	9305      	str	r3, [sp, #20]
    7572:	e7da      	b.n	752a <_svfprintf_r+0x6e2>
    7574:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7576:	2b65      	cmp	r3, #101	; 0x65
    7578:	f340 80d4 	ble.w	7724 <_svfprintf_r+0x8dc>
    757c:	eeb5 8b40 	vcmp.f64	d8, #0.0
    7580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7584:	f040 81c1 	bne.w	790a <_svfprintf_r+0xac2>
    7588:	9b25      	ldr	r3, [sp, #148]	; 0x94
    758a:	49ba      	ldr	r1, [pc, #744]	; (7874 <_svfprintf_r+0xa2c>)
    758c:	f8ca 1000 	str.w	r1, [sl]
    7590:	3301      	adds	r3, #1
    7592:	3201      	adds	r2, #1
    7594:	2101      	movs	r1, #1
    7596:	2b07      	cmp	r3, #7
    7598:	9226      	str	r2, [sp, #152]	; 0x98
    759a:	9325      	str	r3, [sp, #148]	; 0x94
    759c:	f8ca 1004 	str.w	r1, [sl, #4]
    75a0:	f300 8551 	bgt.w	8046 <_svfprintf_r+0x11fe>
    75a4:	f10a 0a08 	add.w	sl, sl, #8
    75a8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    75aa:	990e      	ldr	r1, [sp, #56]	; 0x38
    75ac:	428b      	cmp	r3, r1
    75ae:	f280 82d0 	bge.w	7b52 <_svfprintf_r+0xd0a>
    75b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    75b4:	9912      	ldr	r1, [sp, #72]	; 0x48
    75b6:	441a      	add	r2, r3
    75b8:	e9ca 1300 	strd	r1, r3, [sl]
    75bc:	9b25      	ldr	r3, [sp, #148]	; 0x94
    75be:	9226      	str	r2, [sp, #152]	; 0x98
    75c0:	3301      	adds	r3, #1
    75c2:	2b07      	cmp	r3, #7
    75c4:	9325      	str	r3, [sp, #148]	; 0x94
    75c6:	f300 8397 	bgt.w	7cf8 <_svfprintf_r+0xeb0>
    75ca:	f10a 0a08 	add.w	sl, sl, #8
    75ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    75d0:	1e5c      	subs	r4, r3, #1
    75d2:	2c00      	cmp	r4, #0
    75d4:	f77f add0 	ble.w	7178 <_svfprintf_r+0x330>
    75d8:	2c10      	cmp	r4, #16
    75da:	9b25      	ldr	r3, [sp, #148]	; 0x94
    75dc:	f340 856e 	ble.w	80bc <_svfprintf_r+0x1274>
    75e0:	ee1b 6a10 	vmov	r6, s22
    75e4:	2510      	movs	r5, #16
    75e6:	e005      	b.n	75f4 <_svfprintf_r+0x7ac>
    75e8:	f10a 0a08 	add.w	sl, sl, #8
    75ec:	3c10      	subs	r4, #16
    75ee:	2c10      	cmp	r4, #16
    75f0:	f340 8564 	ble.w	80bc <_svfprintf_r+0x1274>
    75f4:	3301      	adds	r3, #1
    75f6:	49a0      	ldr	r1, [pc, #640]	; (7878 <_svfprintf_r+0xa30>)
    75f8:	3210      	adds	r2, #16
    75fa:	2b07      	cmp	r3, #7
    75fc:	e9ca 1500 	strd	r1, r5, [sl]
    7600:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    7604:	ddf0      	ble.n	75e8 <_svfprintf_r+0x7a0>
    7606:	aa24      	add	r2, sp, #144	; 0x90
    7608:	4631      	mov	r1, r6
    760a:	4658      	mov	r0, fp
    760c:	f004 fb18 	bl	bc40 <__ssprint_r>
    7610:	2800      	cmp	r0, #0
    7612:	d17e      	bne.n	7712 <_svfprintf_r+0x8ca>
    7614:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    7618:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    761c:	e7e6      	b.n	75ec <_svfprintf_r+0x7a4>
    761e:	9b06      	ldr	r3, [sp, #24]
    7620:	9902      	ldr	r1, [sp, #8]
    7622:	1a5d      	subs	r5, r3, r1
    7624:	2d00      	cmp	r5, #0
    7626:	f77f ad8e 	ble.w	7146 <_svfprintf_r+0x2fe>
    762a:	2d10      	cmp	r5, #16
    762c:	9b25      	ldr	r3, [sp, #148]	; 0x94
    762e:	dd21      	ble.n	7674 <_svfprintf_r+0x82c>
    7630:	9409      	str	r4, [sp, #36]	; 0x24
    7632:	2610      	movs	r6, #16
    7634:	ee1b 4a10 	vmov	r4, s22
    7638:	e004      	b.n	7644 <_svfprintf_r+0x7fc>
    763a:	3d10      	subs	r5, #16
    763c:	2d10      	cmp	r5, #16
    763e:	f10a 0a08 	add.w	sl, sl, #8
    7642:	dd16      	ble.n	7672 <_svfprintf_r+0x82a>
    7644:	3301      	adds	r3, #1
    7646:	498c      	ldr	r1, [pc, #560]	; (7878 <_svfprintf_r+0xa30>)
    7648:	3210      	adds	r2, #16
    764a:	2b07      	cmp	r3, #7
    764c:	e9ca 1600 	strd	r1, r6, [sl]
    7650:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    7654:	ddf1      	ble.n	763a <_svfprintf_r+0x7f2>
    7656:	aa24      	add	r2, sp, #144	; 0x90
    7658:	4621      	mov	r1, r4
    765a:	4658      	mov	r0, fp
    765c:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    7660:	f004 faee 	bl	bc40 <__ssprint_r>
    7664:	2800      	cmp	r0, #0
    7666:	d154      	bne.n	7712 <_svfprintf_r+0x8ca>
    7668:	3d10      	subs	r5, #16
    766a:	2d10      	cmp	r5, #16
    766c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    7670:	dce8      	bgt.n	7644 <_svfprintf_r+0x7fc>
    7672:	9c09      	ldr	r4, [sp, #36]	; 0x24
    7674:	4980      	ldr	r1, [pc, #512]	; (7878 <_svfprintf_r+0xa30>)
    7676:	f8ca 5004 	str.w	r5, [sl, #4]
    767a:	3301      	adds	r3, #1
    767c:	442a      	add	r2, r5
    767e:	2b07      	cmp	r3, #7
    7680:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    7684:	f8ca 1000 	str.w	r1, [sl]
    7688:	f300 8526 	bgt.w	80d8 <_svfprintf_r+0x1290>
    768c:	9b03      	ldr	r3, [sp, #12]
    768e:	9905      	ldr	r1, [sp, #20]
    7690:	1a5d      	subs	r5, r3, r1
    7692:	2d00      	cmp	r5, #0
    7694:	f10a 0a08 	add.w	sl, sl, #8
    7698:	f77f ad5b 	ble.w	7152 <_svfprintf_r+0x30a>
    769c:	2d10      	cmp	r5, #16
    769e:	9b25      	ldr	r3, [sp, #148]	; 0x94
    76a0:	dd1f      	ble.n	76e2 <_svfprintf_r+0x89a>
    76a2:	4651      	mov	r1, sl
    76a4:	2610      	movs	r6, #16
    76a6:	ee1b aa10 	vmov	sl, s22
    76aa:	e004      	b.n	76b6 <_svfprintf_r+0x86e>
    76ac:	3d10      	subs	r5, #16
    76ae:	2d10      	cmp	r5, #16
    76b0:	f101 0108 	add.w	r1, r1, #8
    76b4:	dd14      	ble.n	76e0 <_svfprintf_r+0x898>
    76b6:	3301      	adds	r3, #1
    76b8:	486f      	ldr	r0, [pc, #444]	; (7878 <_svfprintf_r+0xa30>)
    76ba:	3210      	adds	r2, #16
    76bc:	2b07      	cmp	r3, #7
    76be:	e9c1 0600 	strd	r0, r6, [r1]
    76c2:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    76c6:	ddf1      	ble.n	76ac <_svfprintf_r+0x864>
    76c8:	aa24      	add	r2, sp, #144	; 0x90
    76ca:	4651      	mov	r1, sl
    76cc:	4658      	mov	r0, fp
    76ce:	f004 fab7 	bl	bc40 <__ssprint_r>
    76d2:	b9f0      	cbnz	r0, 7712 <_svfprintf_r+0x8ca>
    76d4:	3d10      	subs	r5, #16
    76d6:	2d10      	cmp	r5, #16
    76d8:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    76dc:	a927      	add	r1, sp, #156	; 0x9c
    76de:	dcea      	bgt.n	76b6 <_svfprintf_r+0x86e>
    76e0:	468a      	mov	sl, r1
    76e2:	3301      	adds	r3, #1
    76e4:	4964      	ldr	r1, [pc, #400]	; (7878 <_svfprintf_r+0xa30>)
    76e6:	f8ca 5004 	str.w	r5, [sl, #4]
    76ea:	442a      	add	r2, r5
    76ec:	2b07      	cmp	r3, #7
    76ee:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    76f2:	f8ca 1000 	str.w	r1, [sl]
    76f6:	f300 81da 	bgt.w	7aae <_svfprintf_r+0xc66>
    76fa:	f10a 0a08 	add.w	sl, sl, #8
    76fe:	e528      	b.n	7152 <_svfprintf_r+0x30a>
    7700:	ee1b 1a10 	vmov	r1, s22
    7704:	aa24      	add	r2, sp, #144	; 0x90
    7706:	4658      	mov	r0, fp
    7708:	f004 fa9a 	bl	bc40 <__ssprint_r>
    770c:	2800      	cmp	r0, #0
    770e:	f43f ad47 	beq.w	71a0 <_svfprintf_r+0x358>
    7712:	9b07      	ldr	r3, [sp, #28]
    7714:	2b00      	cmp	r3, #0
    7716:	f43f aca2 	beq.w	705e <_svfprintf_r+0x216>
    771a:	9907      	ldr	r1, [sp, #28]
    771c:	4658      	mov	r0, fp
    771e:	f7fe f91d 	bl	595c <_free_r>
    7722:	e49c      	b.n	705e <_svfprintf_r+0x216>
    7724:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7726:	2b01      	cmp	r3, #1
    7728:	f340 817a 	ble.w	7a20 <_svfprintf_r+0xbd8>
    772c:	9b25      	ldr	r3, [sp, #148]	; 0x94
    772e:	f8ca 4000 	str.w	r4, [sl]
    7732:	3301      	adds	r3, #1
    7734:	3201      	adds	r2, #1
    7736:	2101      	movs	r1, #1
    7738:	2b07      	cmp	r3, #7
    773a:	9226      	str	r2, [sp, #152]	; 0x98
    773c:	9325      	str	r3, [sp, #148]	; 0x94
    773e:	f8ca 1004 	str.w	r1, [sl, #4]
    7742:	f300 81f8 	bgt.w	7b36 <_svfprintf_r+0xcee>
    7746:	f10a 0a08 	add.w	sl, sl, #8
    774a:	9910      	ldr	r1, [sp, #64]	; 0x40
    774c:	9812      	ldr	r0, [sp, #72]	; 0x48
    774e:	3301      	adds	r3, #1
    7750:	440a      	add	r2, r1
    7752:	2b07      	cmp	r3, #7
    7754:	e9ca 0100 	strd	r0, r1, [sl]
    7758:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    775c:	f300 81dd 	bgt.w	7b1a <_svfprintf_r+0xcd2>
    7760:	f10a 0a08 	add.w	sl, sl, #8
    7764:	eeb5 8b40 	vcmp.f64	d8, #0.0
    7768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    776c:	f000 8177 	beq.w	7a5e <_svfprintf_r+0xc16>
    7770:	990e      	ldr	r1, [sp, #56]	; 0x38
    7772:	3301      	adds	r3, #1
    7774:	3901      	subs	r1, #1
    7776:	3401      	adds	r4, #1
    7778:	440a      	add	r2, r1
    777a:	2b07      	cmp	r3, #7
    777c:	f8ca 4000 	str.w	r4, [sl]
    7780:	9325      	str	r3, [sp, #148]	; 0x94
    7782:	f8ca 1004 	str.w	r1, [sl, #4]
    7786:	9226      	str	r2, [sp, #152]	; 0x98
    7788:	f300 815b 	bgt.w	7a42 <_svfprintf_r+0xbfa>
    778c:	f10a 0a08 	add.w	sl, sl, #8
    7790:	9914      	ldr	r1, [sp, #80]	; 0x50
    7792:	f8ca 1004 	str.w	r1, [sl, #4]
    7796:	3301      	adds	r3, #1
    7798:	440a      	add	r2, r1
    779a:	2b07      	cmp	r3, #7
    779c:	a91e      	add	r1, sp, #120	; 0x78
    779e:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    77a2:	f8ca 1000 	str.w	r1, [sl]
    77a6:	f77f ace5 	ble.w	7174 <_svfprintf_r+0x32c>
    77aa:	ee1b 1a10 	vmov	r1, s22
    77ae:	aa24      	add	r2, sp, #144	; 0x90
    77b0:	4658      	mov	r0, fp
    77b2:	f004 fa45 	bl	bc40 <__ssprint_r>
    77b6:	2800      	cmp	r0, #0
    77b8:	d1ab      	bne.n	7712 <_svfprintf_r+0x8ca>
    77ba:	9a26      	ldr	r2, [sp, #152]	; 0x98
    77bc:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    77c0:	e4da      	b.n	7178 <_svfprintf_r+0x330>
    77c2:	2d10      	cmp	r5, #16
    77c4:	e9dd 1225 	ldrd	r1, r2, [sp, #148]	; 0x94
    77c8:	4e2c      	ldr	r6, [pc, #176]	; (787c <_svfprintf_r+0xa34>)
    77ca:	dd24      	ble.n	7816 <_svfprintf_r+0x9ce>
    77cc:	9417      	str	r4, [sp, #92]	; 0x5c
    77ce:	2310      	movs	r3, #16
    77d0:	ee1b 4a10 	vmov	r4, s22
    77d4:	4608      	mov	r0, r1
    77d6:	e004      	b.n	77e2 <_svfprintf_r+0x99a>
    77d8:	3d10      	subs	r5, #16
    77da:	2d10      	cmp	r5, #16
    77dc:	f10a 0a08 	add.w	sl, sl, #8
    77e0:	dd17      	ble.n	7812 <_svfprintf_r+0x9ca>
    77e2:	3001      	adds	r0, #1
    77e4:	3210      	adds	r2, #16
    77e6:	2807      	cmp	r0, #7
    77e8:	e9ca 6300 	strd	r6, r3, [sl]
    77ec:	e9cd 0225 	strd	r0, r2, [sp, #148]	; 0x94
    77f0:	ddf2      	ble.n	77d8 <_svfprintf_r+0x990>
    77f2:	aa24      	add	r2, sp, #144	; 0x90
    77f4:	4621      	mov	r1, r4
    77f6:	4658      	mov	r0, fp
    77f8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    77fc:	f004 fa20 	bl	bc40 <__ssprint_r>
    7800:	2800      	cmp	r0, #0
    7802:	d186      	bne.n	7712 <_svfprintf_r+0x8ca>
    7804:	3d10      	subs	r5, #16
    7806:	2d10      	cmp	r5, #16
    7808:	e9dd 0225 	ldrd	r0, r2, [sp, #148]	; 0x94
    780c:	f04f 0310 	mov.w	r3, #16
    7810:	dce7      	bgt.n	77e2 <_svfprintf_r+0x99a>
    7812:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    7814:	4601      	mov	r1, r0
    7816:	3101      	adds	r1, #1
    7818:	442a      	add	r2, r5
    781a:	2907      	cmp	r1, #7
    781c:	e9cd 1225 	strd	r1, r2, [sp, #148]	; 0x94
    7820:	f8ca 6000 	str.w	r6, [sl]
    7824:	f8ca 5004 	str.w	r5, [sl, #4]
    7828:	f300 83bd 	bgt.w	7fa6 <_svfprintf_r+0x115e>
    782c:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    7830:	f10a 0a08 	add.w	sl, sl, #8
    7834:	e45d      	b.n	70f2 <_svfprintf_r+0x2aa>
    7836:	f8cd 8008 	str.w	r8, [sp, #8]
    783a:	2a0a      	cmp	r2, #10
    783c:	f171 0300 	sbcs.w	r3, r1, #0
    7840:	f080 8345 	bcs.w	7ece <_svfprintf_r+0x1086>
    7844:	3230      	adds	r2, #48	; 0x30
    7846:	2301      	movs	r3, #1
    7848:	f8dd 8008 	ldr.w	r8, [sp, #8]
    784c:	f88d 213f 	strb.w	r2, [sp, #319]	; 0x13f
    7850:	9305      	str	r3, [sp, #20]
    7852:	f20d 143f 	addw	r4, sp, #319	; 0x13f
    7856:	e668      	b.n	752a <_svfprintf_r+0x6e2>
    7858:	ee1b 1a10 	vmov	r1, s22
    785c:	aa24      	add	r2, sp, #144	; 0x90
    785e:	4658      	mov	r0, fp
    7860:	f004 f9ee 	bl	bc40 <__ssprint_r>
    7864:	2800      	cmp	r0, #0
    7866:	f47f af54 	bne.w	7712 <_svfprintf_r+0x8ca>
    786a:	9a26      	ldr	r2, [sp, #152]	; 0x98
    786c:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    7870:	e452      	b.n	7118 <_svfprintf_r+0x2d0>
    7872:	bf00      	nop
    7874:	20000908 	.word	0x20000908
    7878:	20007810 	.word	0x20007810
    787c:	20002384 	.word	0x20002384
    7880:	ee1b 1a10 	vmov	r1, s22
    7884:	aa24      	add	r2, sp, #144	; 0x90
    7886:	4658      	mov	r0, fp
    7888:	f004 f9da 	bl	bc40 <__ssprint_r>
    788c:	2800      	cmp	r0, #0
    788e:	f47f af40 	bne.w	7712 <_svfprintf_r+0x8ca>
    7892:	9a26      	ldr	r2, [sp, #152]	; 0x98
    7894:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    7898:	e451      	b.n	713e <_svfprintf_r+0x2f6>
    789a:	2c10      	cmp	r4, #16
    789c:	9b25      	ldr	r3, [sp, #148]	; 0x94
    789e:	4ebe      	ldr	r6, [pc, #760]	; (7b98 <_svfprintf_r+0xd50>)
    78a0:	dd1f      	ble.n	78e2 <_svfprintf_r+0xa9a>
    78a2:	ee1b 8a10 	vmov	r8, s22
    78a6:	2510      	movs	r5, #16
    78a8:	e004      	b.n	78b4 <_svfprintf_r+0xa6c>
    78aa:	3c10      	subs	r4, #16
    78ac:	2c10      	cmp	r4, #16
    78ae:	f10a 0a08 	add.w	sl, sl, #8
    78b2:	dd16      	ble.n	78e2 <_svfprintf_r+0xa9a>
    78b4:	3301      	adds	r3, #1
    78b6:	3210      	adds	r2, #16
    78b8:	2b07      	cmp	r3, #7
    78ba:	e9ca 6500 	strd	r6, r5, [sl]
    78be:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    78c2:	ddf2      	ble.n	78aa <_svfprintf_r+0xa62>
    78c4:	aa24      	add	r2, sp, #144	; 0x90
    78c6:	4641      	mov	r1, r8
    78c8:	4658      	mov	r0, fp
    78ca:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    78ce:	f004 f9b7 	bl	bc40 <__ssprint_r>
    78d2:	2800      	cmp	r0, #0
    78d4:	f47f af1d 	bne.w	7712 <_svfprintf_r+0x8ca>
    78d8:	3c10      	subs	r4, #16
    78da:	2c10      	cmp	r4, #16
    78dc:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    78e0:	dce8      	bgt.n	78b4 <_svfprintf_r+0xa6c>
    78e2:	3301      	adds	r3, #1
    78e4:	4422      	add	r2, r4
    78e6:	2b07      	cmp	r3, #7
    78e8:	e9ca 6400 	strd	r6, r4, [sl]
    78ec:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    78f0:	f77f ac4b 	ble.w	718a <_svfprintf_r+0x342>
    78f4:	ee1b 1a10 	vmov	r1, s22
    78f8:	aa24      	add	r2, sp, #144	; 0x90
    78fa:	4658      	mov	r0, fp
    78fc:	f004 f9a0 	bl	bc40 <__ssprint_r>
    7900:	2800      	cmp	r0, #0
    7902:	f47f af06 	bne.w	7712 <_svfprintf_r+0x8ca>
    7906:	9a26      	ldr	r2, [sp, #152]	; 0x98
    7908:	e43f      	b.n	718a <_svfprintf_r+0x342>
    790a:	991b      	ldr	r1, [sp, #108]	; 0x6c
    790c:	2900      	cmp	r1, #0
    790e:	f340 835a 	ble.w	7fc6 <_svfprintf_r+0x117e>
    7912:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    7914:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7916:	429e      	cmp	r6, r3
    7918:	bfa8      	it	ge
    791a:	461e      	movge	r6, r3
    791c:	2e00      	cmp	r6, #0
    791e:	dd0b      	ble.n	7938 <_svfprintf_r+0xaf0>
    7920:	9b25      	ldr	r3, [sp, #148]	; 0x94
    7922:	3301      	adds	r3, #1
    7924:	4432      	add	r2, r6
    7926:	2b07      	cmp	r3, #7
    7928:	e9ca 4600 	strd	r4, r6, [sl]
    792c:	9226      	str	r2, [sp, #152]	; 0x98
    792e:	9325      	str	r3, [sp, #148]	; 0x94
    7930:	f300 8689 	bgt.w	8646 <_svfprintf_r+0x17fe>
    7934:	f10a 0a08 	add.w	sl, sl, #8
    7938:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    793a:	2e00      	cmp	r6, #0
    793c:	bfa8      	it	ge
    793e:	1bad      	subge	r5, r5, r6
    7940:	2d00      	cmp	r5, #0
    7942:	f300 8203 	bgt.w	7d4c <_svfprintf_r+0xf04>
    7946:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7948:	f418 6f80 	tst.w	r8, #1024	; 0x400
    794c:	4423      	add	r3, r4
    794e:	9305      	str	r3, [sp, #20]
    7950:	f040 821f 	bne.w	7d92 <_svfprintf_r+0xf4a>
    7954:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    7956:	990e      	ldr	r1, [sp, #56]	; 0x38
    7958:	428b      	cmp	r3, r1
    795a:	db03      	blt.n	7964 <_svfprintf_r+0xb1c>
    795c:	f018 0f01 	tst.w	r8, #1
    7960:	f000 84cf 	beq.w	8302 <_svfprintf_r+0x14ba>
    7964:	9910      	ldr	r1, [sp, #64]	; 0x40
    7966:	9812      	ldr	r0, [sp, #72]	; 0x48
    7968:	440a      	add	r2, r1
    796a:	e9ca 0100 	strd	r0, r1, [sl]
    796e:	9925      	ldr	r1, [sp, #148]	; 0x94
    7970:	9226      	str	r2, [sp, #152]	; 0x98
    7972:	3101      	adds	r1, #1
    7974:	2907      	cmp	r1, #7
    7976:	9125      	str	r1, [sp, #148]	; 0x94
    7978:	f300 86a5 	bgt.w	86c6 <_svfprintf_r+0x187e>
    797c:	f10a 0a08 	add.w	sl, sl, #8
    7980:	990e      	ldr	r1, [sp, #56]	; 0x38
    7982:	1865      	adds	r5, r4, r1
    7984:	1acc      	subs	r4, r1, r3
    7986:	9b05      	ldr	r3, [sp, #20]
    7988:	1aed      	subs	r5, r5, r3
    798a:	42a5      	cmp	r5, r4
    798c:	bfa8      	it	ge
    798e:	4625      	movge	r5, r4
    7990:	2d00      	cmp	r5, #0
    7992:	dd0d      	ble.n	79b0 <_svfprintf_r+0xb68>
    7994:	f8ca 3000 	str.w	r3, [sl]
    7998:	9b25      	ldr	r3, [sp, #148]	; 0x94
    799a:	f8ca 5004 	str.w	r5, [sl, #4]
    799e:	3301      	adds	r3, #1
    79a0:	442a      	add	r2, r5
    79a2:	2b07      	cmp	r3, #7
    79a4:	9226      	str	r2, [sp, #152]	; 0x98
    79a6:	9325      	str	r3, [sp, #148]	; 0x94
    79a8:	f300 86bb 	bgt.w	8722 <_svfprintf_r+0x18da>
    79ac:	f10a 0a08 	add.w	sl, sl, #8
    79b0:	2d00      	cmp	r5, #0
    79b2:	bfa8      	it	ge
    79b4:	1b64      	subge	r4, r4, r5
    79b6:	2c00      	cmp	r4, #0
    79b8:	f77f abde 	ble.w	7178 <_svfprintf_r+0x330>
    79bc:	2c10      	cmp	r4, #16
    79be:	9b25      	ldr	r3, [sp, #148]	; 0x94
    79c0:	f340 837c 	ble.w	80bc <_svfprintf_r+0x1274>
    79c4:	ee1b 6a10 	vmov	r6, s22
    79c8:	2510      	movs	r5, #16
    79ca:	e005      	b.n	79d8 <_svfprintf_r+0xb90>
    79cc:	f10a 0a08 	add.w	sl, sl, #8
    79d0:	3c10      	subs	r4, #16
    79d2:	2c10      	cmp	r4, #16
    79d4:	f340 8372 	ble.w	80bc <_svfprintf_r+0x1274>
    79d8:	3301      	adds	r3, #1
    79da:	4970      	ldr	r1, [pc, #448]	; (7b9c <_svfprintf_r+0xd54>)
    79dc:	3210      	adds	r2, #16
    79de:	2b07      	cmp	r3, #7
    79e0:	e9ca 1500 	strd	r1, r5, [sl]
    79e4:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    79e8:	ddf0      	ble.n	79cc <_svfprintf_r+0xb84>
    79ea:	aa24      	add	r2, sp, #144	; 0x90
    79ec:	4631      	mov	r1, r6
    79ee:	4658      	mov	r0, fp
    79f0:	f004 f926 	bl	bc40 <__ssprint_r>
    79f4:	2800      	cmp	r0, #0
    79f6:	f47f ae8c 	bne.w	7712 <_svfprintf_r+0x8ca>
    79fa:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    79fe:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    7a02:	e7e5      	b.n	79d0 <_svfprintf_r+0xb88>
    7a04:	2b30      	cmp	r3, #48	; 0x30
    7a06:	f43f ad8b 	beq.w	7520 <_svfprintf_r+0x6d8>
    7a0a:	2330      	movs	r3, #48	; 0x30
    7a0c:	3802      	subs	r0, #2
    7a0e:	f804 3c01 	strb.w	r3, [r4, #-1]
    7a12:	ab50      	add	r3, sp, #320	; 0x140
    7a14:	1a1b      	subs	r3, r3, r0
    7a16:	f8dd 8008 	ldr.w	r8, [sp, #8]
    7a1a:	9305      	str	r3, [sp, #20]
    7a1c:	4604      	mov	r4, r0
    7a1e:	e584      	b.n	752a <_svfprintf_r+0x6e2>
    7a20:	f018 0f01 	tst.w	r8, #1
    7a24:	f47f ae82 	bne.w	772c <_svfprintf_r+0x8e4>
    7a28:	9b25      	ldr	r3, [sp, #148]	; 0x94
    7a2a:	f8ca 4000 	str.w	r4, [sl]
    7a2e:	3301      	adds	r3, #1
    7a30:	3201      	adds	r2, #1
    7a32:	2101      	movs	r1, #1
    7a34:	2b07      	cmp	r3, #7
    7a36:	9226      	str	r2, [sp, #152]	; 0x98
    7a38:	9325      	str	r3, [sp, #148]	; 0x94
    7a3a:	f8ca 1004 	str.w	r1, [sl, #4]
    7a3e:	f77f aea5 	ble.w	778c <_svfprintf_r+0x944>
    7a42:	ee1b 1a10 	vmov	r1, s22
    7a46:	aa24      	add	r2, sp, #144	; 0x90
    7a48:	4658      	mov	r0, fp
    7a4a:	f004 f8f9 	bl	bc40 <__ssprint_r>
    7a4e:	2800      	cmp	r0, #0
    7a50:	f47f ae5f 	bne.w	7712 <_svfprintf_r+0x8ca>
    7a54:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    7a58:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    7a5c:	e698      	b.n	7790 <_svfprintf_r+0x948>
    7a5e:	990e      	ldr	r1, [sp, #56]	; 0x38
    7a60:	1e4c      	subs	r4, r1, #1
    7a62:	2c00      	cmp	r4, #0
    7a64:	f77f ae94 	ble.w	7790 <_svfprintf_r+0x948>
    7a68:	2c10      	cmp	r4, #16
    7a6a:	f340 8361 	ble.w	8130 <_svfprintf_r+0x12e8>
    7a6e:	ee1b 6a10 	vmov	r6, s22
    7a72:	2510      	movs	r5, #16
    7a74:	e005      	b.n	7a82 <_svfprintf_r+0xc3a>
    7a76:	f10a 0a08 	add.w	sl, sl, #8
    7a7a:	3c10      	subs	r4, #16
    7a7c:	2c10      	cmp	r4, #16
    7a7e:	f340 8357 	ble.w	8130 <_svfprintf_r+0x12e8>
    7a82:	3301      	adds	r3, #1
    7a84:	4945      	ldr	r1, [pc, #276]	; (7b9c <_svfprintf_r+0xd54>)
    7a86:	3210      	adds	r2, #16
    7a88:	2b07      	cmp	r3, #7
    7a8a:	e9ca 1500 	strd	r1, r5, [sl]
    7a8e:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    7a92:	ddf0      	ble.n	7a76 <_svfprintf_r+0xc2e>
    7a94:	aa24      	add	r2, sp, #144	; 0x90
    7a96:	4631      	mov	r1, r6
    7a98:	4658      	mov	r0, fp
    7a9a:	f004 f8d1 	bl	bc40 <__ssprint_r>
    7a9e:	2800      	cmp	r0, #0
    7aa0:	f47f ae37 	bne.w	7712 <_svfprintf_r+0x8ca>
    7aa4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    7aa8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    7aac:	e7e5      	b.n	7a7a <_svfprintf_r+0xc32>
    7aae:	ee1b 1a10 	vmov	r1, s22
    7ab2:	aa24      	add	r2, sp, #144	; 0x90
    7ab4:	4658      	mov	r0, fp
    7ab6:	f004 f8c3 	bl	bc40 <__ssprint_r>
    7aba:	2800      	cmp	r0, #0
    7abc:	f47f ae29 	bne.w	7712 <_svfprintf_r+0x8ca>
    7ac0:	9a26      	ldr	r2, [sp, #152]	; 0x98
    7ac2:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    7ac6:	f7ff bb44 	b.w	7152 <_svfprintf_r+0x30a>
    7aca:	9b02      	ldr	r3, [sp, #8]
    7acc:	f013 0310 	ands.w	r3, r3, #16
    7ad0:	f040 80c1 	bne.w	7c56 <_svfprintf_r+0xe0e>
    7ad4:	9a02      	ldr	r2, [sp, #8]
    7ad6:	f012 0240 	ands.w	r2, r2, #64	; 0x40
    7ada:	f000 837a 	beq.w	81d2 <_svfprintf_r+0x138a>
    7ade:	9808      	ldr	r0, [sp, #32]
    7ae0:	f850 2b04 	ldr.w	r2, [r0], #4
    7ae4:	9008      	str	r0, [sp, #32]
    7ae6:	4619      	mov	r1, r3
    7ae8:	b292      	uxth	r2, r2
    7aea:	2301      	movs	r3, #1
    7aec:	e451      	b.n	7392 <_svfprintf_r+0x54a>
    7aee:	f018 0310 	ands.w	r3, r8, #16
    7af2:	d155      	bne.n	7ba0 <_svfprintf_r+0xd58>
    7af4:	f018 0240 	ands.w	r2, r8, #64	; 0x40
    7af8:	f000 835d 	beq.w	81b6 <_svfprintf_r+0x136e>
    7afc:	9808      	ldr	r0, [sp, #32]
    7afe:	f850 2b04 	ldr.w	r2, [r0], #4
    7b02:	9008      	str	r0, [sp, #32]
    7b04:	4619      	mov	r1, r3
    7b06:	b292      	uxth	r2, r2
    7b08:	e4a8      	b.n	745c <_svfprintf_r+0x614>
    7b0a:	4252      	negs	r2, r2
    7b0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    7b10:	f8cd 8008 	str.w	r8, [sp, #8]
    7b14:	202d      	movs	r0, #45	; 0x2d
    7b16:	2301      	movs	r3, #1
    7b18:	e43c      	b.n	7394 <_svfprintf_r+0x54c>
    7b1a:	ee1b 1a10 	vmov	r1, s22
    7b1e:	aa24      	add	r2, sp, #144	; 0x90
    7b20:	4658      	mov	r0, fp
    7b22:	f004 f88d 	bl	bc40 <__ssprint_r>
    7b26:	2800      	cmp	r0, #0
    7b28:	f47f adf3 	bne.w	7712 <_svfprintf_r+0x8ca>
    7b2c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    7b30:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    7b34:	e616      	b.n	7764 <_svfprintf_r+0x91c>
    7b36:	ee1b 1a10 	vmov	r1, s22
    7b3a:	aa24      	add	r2, sp, #144	; 0x90
    7b3c:	4658      	mov	r0, fp
    7b3e:	f004 f87f 	bl	bc40 <__ssprint_r>
    7b42:	2800      	cmp	r0, #0
    7b44:	f47f ade5 	bne.w	7712 <_svfprintf_r+0x8ca>
    7b48:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    7b4c:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    7b50:	e5fb      	b.n	774a <_svfprintf_r+0x902>
    7b52:	f018 0f01 	tst.w	r8, #1
    7b56:	f43f ab0f 	beq.w	7178 <_svfprintf_r+0x330>
    7b5a:	e52a      	b.n	75b2 <_svfprintf_r+0x76a>
    7b5c:	9308      	str	r3, [sp, #32]
    7b5e:	f899 3000 	ldrb.w	r3, [r9]
    7b62:	f7ff b9cd 	b.w	6f00 <_svfprintf_r+0xb8>
    7b66:	ac50      	add	r4, sp, #320	; 0x140
    7b68:	e4df      	b.n	752a <_svfprintf_r+0x6e2>
    7b6a:	f418 7f00 	tst.w	r8, #512	; 0x200
    7b6e:	f040 83db 	bne.w	8328 <_svfprintf_r+0x14e0>
    7b72:	f853 2b04 	ldr.w	r2, [r3], #4
    7b76:	9308      	str	r3, [sp, #32]
    7b78:	17d1      	asrs	r1, r2, #31
    7b7a:	460b      	mov	r3, r1
    7b7c:	f7ff bbb6 	b.w	72ec <_svfprintf_r+0x4a4>
    7b80:	9b08      	ldr	r3, [sp, #32]
    7b82:	9804      	ldr	r0, [sp, #16]
    7b84:	f853 1b04 	ldr.w	r1, [r3], #4
    7b88:	9308      	str	r3, [sp, #32]
    7b8a:	17c2      	asrs	r2, r0, #31
    7b8c:	e9c1 0200 	strd	r0, r2, [r1]
    7b90:	464c      	mov	r4, r9
    7b92:	f7ff b98b 	b.w	6eac <_svfprintf_r+0x64>
    7b96:	bf00      	nop
    7b98:	20002384 	.word	0x20002384
    7b9c:	20007810 	.word	0x20007810
    7ba0:	9b08      	ldr	r3, [sp, #32]
    7ba2:	f853 2b04 	ldr.w	r2, [r3], #4
    7ba6:	9308      	str	r3, [sp, #32]
    7ba8:	e458      	b.n	745c <_svfprintf_r+0x614>
    7baa:	eeb4 8b48 	vcmp.f64	d8, d8
    7bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7bb2:	f180 8694 	bvs.w	88de <_svfprintf_r+0x1a96>
    7bb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7bb8:	2b61      	cmp	r3, #97	; 0x61
    7bba:	f000 8552 	beq.w	8662 <_svfprintf_r+0x181a>
    7bbe:	2b41      	cmp	r3, #65	; 0x41
    7bc0:	f000 85c0 	beq.w	8744 <_svfprintf_r+0x18fc>
    7bc4:	9b03      	ldr	r3, [sp, #12]
    7bc6:	3301      	adds	r3, #1
    7bc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7bca:	f023 0520 	bic.w	r5, r3, #32
    7bce:	f000 8480 	beq.w	84d2 <_svfprintf_r+0x168a>
    7bd2:	2d47      	cmp	r5, #71	; 0x47
    7bd4:	d104      	bne.n	7be0 <_svfprintf_r+0xd98>
    7bd6:	9b03      	ldr	r3, [sp, #12]
    7bd8:	2b00      	cmp	r3, #0
    7bda:	bf08      	it	eq
    7bdc:	2301      	moveq	r3, #1
    7bde:	9303      	str	r3, [sp, #12]
    7be0:	ee18 3a90 	vmov	r3, s17
    7be4:	2b00      	cmp	r3, #0
    7be6:	f448 7280 	orr.w	r2, r8, #256	; 0x100
    7bea:	4646      	mov	r6, r8
    7bec:	f2c0 8618 	blt.w	8820 <_svfprintf_r+0x19d8>
    7bf0:	eeb0 ab48 	vmov.f64	d10, d8
    7bf4:	2300      	movs	r3, #0
    7bf6:	4690      	mov	r8, r2
    7bf8:	9309      	str	r3, [sp, #36]	; 0x24
    7bfa:	9307      	str	r3, [sp, #28]
    7bfc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7bfe:	3b41      	subs	r3, #65	; 0x41
    7c00:	2b25      	cmp	r3, #37	; 0x25
    7c02:	f200 8398 	bhi.w	8336 <_svfprintf_r+0x14ee>
    7c06:	e8df f013 	tbh	[pc, r3, lsl #1]
    7c0a:	046f      	.short	0x046f
    7c0c:	03960396 	.word	0x03960396
    7c10:	04680396 	.word	0x04680396
    7c14:	0396046c 	.word	0x0396046c
    7c18:	03960396 	.word	0x03960396
    7c1c:	03960396 	.word	0x03960396
    7c20:	03960396 	.word	0x03960396
    7c24:	03960396 	.word	0x03960396
    7c28:	03960396 	.word	0x03960396
    7c2c:	03960396 	.word	0x03960396
    7c30:	03960396 	.word	0x03960396
    7c34:	03960396 	.word	0x03960396
    7c38:	03960396 	.word	0x03960396
    7c3c:	03960396 	.word	0x03960396
    7c40:	03960396 	.word	0x03960396
    7c44:	03960396 	.word	0x03960396
    7c48:	03960396 	.word	0x03960396
    7c4c:	03960396 	.word	0x03960396
    7c50:	04680396 	.word	0x04680396
    7c54:	046c      	.short	0x046c
    7c56:	9b08      	ldr	r3, [sp, #32]
    7c58:	f853 2b04 	ldr.w	r2, [r3], #4
    7c5c:	9308      	str	r3, [sp, #32]
    7c5e:	2301      	movs	r3, #1
    7c60:	f7ff bb97 	b.w	7392 <_svfprintf_r+0x54a>
    7c64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    7c66:	2b00      	cmp	r3, #0
    7c68:	f43f a9cf 	beq.w	700a <_svfprintf_r+0x1c2>
    7c6c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    7c6e:	781b      	ldrb	r3, [r3, #0]
    7c70:	2b00      	cmp	r3, #0
    7c72:	f43f a9ca 	beq.w	700a <_svfprintf_r+0x1c2>
    7c76:	f899 3000 	ldrb.w	r3, [r9]
    7c7a:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
    7c7e:	f7ff b93f 	b.w	6f00 <_svfprintf_r+0xb8>
    7c82:	930b      	str	r3, [sp, #44]	; 0x2c
    7c84:	f8cd 8008 	str.w	r8, [sp, #8]
    7c88:	f7ff bbf1 	b.w	746e <_svfprintf_r+0x626>
    7c8c:	930b      	str	r3, [sp, #44]	; 0x2c
    7c8e:	4b9a      	ldr	r3, [pc, #616]	; (7ef8 <_svfprintf_r+0x10b0>)
    7c90:	9311      	str	r3, [sp, #68]	; 0x44
    7c92:	f018 0120 	ands.w	r1, r8, #32
    7c96:	f000 8105 	beq.w	7ea4 <_svfprintf_r+0x105c>
    7c9a:	9b08      	ldr	r3, [sp, #32]
    7c9c:	3307      	adds	r3, #7
    7c9e:	f023 0307 	bic.w	r3, r3, #7
    7ca2:	6859      	ldr	r1, [r3, #4]
    7ca4:	f853 2b08 	ldr.w	r2, [r3], #8
    7ca8:	9308      	str	r3, [sp, #32]
    7caa:	f018 0f01 	tst.w	r8, #1
    7cae:	d00a      	beq.n	7cc6 <_svfprintf_r+0xe7e>
    7cb0:	ea52 0301 	orrs.w	r3, r2, r1
    7cb4:	d007      	beq.n	7cc6 <_svfprintf_r+0xe7e>
    7cb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7cb8:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    7cbc:	2330      	movs	r3, #48	; 0x30
    7cbe:	f048 0802 	orr.w	r8, r8, #2
    7cc2:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    7cc6:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
    7cca:	9302      	str	r3, [sp, #8]
    7ccc:	2302      	movs	r3, #2
    7cce:	f7ff bb60 	b.w	7392 <_svfprintf_r+0x54a>
    7cd2:	930b      	str	r3, [sp, #44]	; 0x2c
    7cd4:	f7ff bbb6 	b.w	7444 <_svfprintf_r+0x5fc>
    7cd8:	930b      	str	r3, [sp, #44]	; 0x2c
    7cda:	4b88      	ldr	r3, [pc, #544]	; (7efc <_svfprintf_r+0x10b4>)
    7cdc:	9311      	str	r3, [sp, #68]	; 0x44
    7cde:	e7d8      	b.n	7c92 <_svfprintf_r+0xe4a>
    7ce0:	9b08      	ldr	r3, [sp, #32]
    7ce2:	2101      	movs	r1, #1
    7ce4:	f853 2b04 	ldr.w	r2, [r3], #4
    7ce8:	9102      	str	r1, [sp, #8]
    7cea:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
    7cee:	9308      	str	r3, [sp, #32]
    7cf0:	9105      	str	r1, [sp, #20]
    7cf2:	ac37      	add	r4, sp, #220	; 0xdc
    7cf4:	f7ff baaf 	b.w	7256 <_svfprintf_r+0x40e>
    7cf8:	ee1b 1a10 	vmov	r1, s22
    7cfc:	aa24      	add	r2, sp, #144	; 0x90
    7cfe:	4658      	mov	r0, fp
    7d00:	f003 ff9e 	bl	bc40 <__ssprint_r>
    7d04:	2800      	cmp	r0, #0
    7d06:	f47f ad04 	bne.w	7712 <_svfprintf_r+0x8ca>
    7d0a:	9a26      	ldr	r2, [sp, #152]	; 0x98
    7d0c:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    7d10:	e45d      	b.n	75ce <_svfprintf_r+0x786>
    7d12:	9b03      	ldr	r3, [sp, #12]
    7d14:	9407      	str	r4, [sp, #28]
    7d16:	2b06      	cmp	r3, #6
    7d18:	4622      	mov	r2, r4
    7d1a:	bf28      	it	cs
    7d1c:	2306      	movcs	r3, #6
    7d1e:	9403      	str	r4, [sp, #12]
    7d20:	4621      	mov	r1, r4
    7d22:	e9cd 220c 	strd	r2, r2, [sp, #48]	; 0x30
    7d26:	4c76      	ldr	r4, [pc, #472]	; (7f00 <_svfprintf_r+0x10b8>)
    7d28:	9302      	str	r3, [sp, #8]
    7d2a:	9305      	str	r3, [sp, #20]
    7d2c:	920f      	str	r2, [sp, #60]	; 0x3c
    7d2e:	f7ff ba6c 	b.w	720a <_svfprintf_r+0x3c2>
    7d32:	2140      	movs	r1, #64	; 0x40
    7d34:	4658      	mov	r0, fp
    7d36:	f7fb fbb5 	bl	34a4 <_malloc_r>
    7d3a:	6020      	str	r0, [r4, #0]
    7d3c:	6120      	str	r0, [r4, #16]
    7d3e:	2800      	cmp	r0, #0
    7d40:	f000 860f 	beq.w	8962 <_svfprintf_r+0x1b1a>
    7d44:	2340      	movs	r3, #64	; 0x40
    7d46:	6163      	str	r3, [r4, #20]
    7d48:	f7ff b89e 	b.w	6e88 <_svfprintf_r+0x40>
    7d4c:	2d10      	cmp	r5, #16
    7d4e:	9b25      	ldr	r3, [sp, #148]	; 0x94
    7d50:	f340 825d 	ble.w	820e <_svfprintf_r+0x13c6>
    7d54:	4651      	mov	r1, sl
    7d56:	2610      	movs	r6, #16
    7d58:	ee1b aa10 	vmov	sl, s22
    7d5c:	e004      	b.n	7d68 <_svfprintf_r+0xf20>
    7d5e:	3108      	adds	r1, #8
    7d60:	3d10      	subs	r5, #16
    7d62:	2d10      	cmp	r5, #16
    7d64:	f340 8252 	ble.w	820c <_svfprintf_r+0x13c4>
    7d68:	3301      	adds	r3, #1
    7d6a:	4866      	ldr	r0, [pc, #408]	; (7f04 <_svfprintf_r+0x10bc>)
    7d6c:	3210      	adds	r2, #16
    7d6e:	2b07      	cmp	r3, #7
    7d70:	e9c1 0600 	strd	r0, r6, [r1]
    7d74:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    7d78:	ddf1      	ble.n	7d5e <_svfprintf_r+0xf16>
    7d7a:	aa24      	add	r2, sp, #144	; 0x90
    7d7c:	4651      	mov	r1, sl
    7d7e:	4658      	mov	r0, fp
    7d80:	f003 ff5e 	bl	bc40 <__ssprint_r>
    7d84:	2800      	cmp	r0, #0
    7d86:	f47f acc4 	bne.w	7712 <_svfprintf_r+0x8ca>
    7d8a:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    7d8e:	a927      	add	r1, sp, #156	; 0x9c
    7d90:	e7e6      	b.n	7d60 <_svfprintf_r+0xf18>
    7d92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7d94:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    7d98:	18e3      	adds	r3, r4, r3
    7d9a:	9303      	str	r3, [sp, #12]
    7d9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7d9e:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    7da2:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    7da4:	9d05      	ldr	r5, [sp, #20]
    7da6:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
    7daa:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
    7dae:	940b      	str	r4, [sp, #44]	; 0x2c
    7db0:	ee1b 1a10 	vmov	r1, s22
    7db4:	4650      	mov	r0, sl
    7db6:	2b00      	cmp	r3, #0
    7db8:	d034      	beq.n	7e24 <_svfprintf_r+0xfdc>
    7dba:	f1b8 0f00 	cmp.w	r8, #0
    7dbe:	d135      	bne.n	7e2c <_svfprintf_r+0xfe4>
    7dc0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7dc2:	3b01      	subs	r3, #1
    7dc4:	3e01      	subs	r6, #1
    7dc6:	930d      	str	r3, [sp, #52]	; 0x34
    7dc8:	9b15      	ldr	r3, [sp, #84]	; 0x54
    7dca:	e9c0 3900 	strd	r3, r9, [r0]
    7dce:	9b25      	ldr	r3, [sp, #148]	; 0x94
    7dd0:	3301      	adds	r3, #1
    7dd2:	444a      	add	r2, r9
    7dd4:	2b07      	cmp	r3, #7
    7dd6:	9226      	str	r2, [sp, #152]	; 0x98
    7dd8:	9325      	str	r3, [sp, #148]	; 0x94
    7dda:	dc6c      	bgt.n	7eb6 <_svfprintf_r+0x106e>
    7ddc:	3008      	adds	r0, #8
    7dde:	9b03      	ldr	r3, [sp, #12]
    7de0:	f896 c000 	ldrb.w	ip, [r6]
    7de4:	1b5b      	subs	r3, r3, r5
    7de6:	4563      	cmp	r3, ip
    7de8:	bfa8      	it	ge
    7dea:	4663      	movge	r3, ip
    7dec:	2b00      	cmp	r3, #0
    7dee:	469a      	mov	sl, r3
    7df0:	dd0c      	ble.n	7e0c <_svfprintf_r+0xfc4>
    7df2:	9c25      	ldr	r4, [sp, #148]	; 0x94
    7df4:	3401      	adds	r4, #1
    7df6:	441a      	add	r2, r3
    7df8:	2c07      	cmp	r4, #7
    7dfa:	e9c0 5300 	strd	r5, r3, [r0]
    7dfe:	9226      	str	r2, [sp, #152]	; 0x98
    7e00:	9425      	str	r4, [sp, #148]	; 0x94
    7e02:	f300 8177 	bgt.w	80f4 <_svfprintf_r+0x12ac>
    7e06:	f896 c000 	ldrb.w	ip, [r6]
    7e0a:	3008      	adds	r0, #8
    7e0c:	f1ba 0f00 	cmp.w	sl, #0
    7e10:	bfac      	ite	ge
    7e12:	ebac 040a 	subge.w	r4, ip, sl
    7e16:	4664      	movlt	r4, ip
    7e18:	2c00      	cmp	r4, #0
    7e1a:	dc0a      	bgt.n	7e32 <_svfprintf_r+0xfea>
    7e1c:	4465      	add	r5, ip
    7e1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7e20:	2b00      	cmp	r3, #0
    7e22:	d1ca      	bne.n	7dba <_svfprintf_r+0xf72>
    7e24:	f1b8 0f00 	cmp.w	r8, #0
    7e28:	f000 83ac 	beq.w	8584 <_svfprintf_r+0x173c>
    7e2c:	f108 38ff 	add.w	r8, r8, #4294967295
    7e30:	e7ca      	b.n	7dc8 <_svfprintf_r+0xf80>
    7e32:	2c10      	cmp	r4, #16
    7e34:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
    7e38:	dd24      	ble.n	7e84 <_svfprintf_r+0x103c>
    7e3a:	9505      	str	r5, [sp, #20]
    7e3c:	f04f 0a10 	mov.w	sl, #16
    7e40:	4663      	mov	r3, ip
    7e42:	460d      	mov	r5, r1
    7e44:	e004      	b.n	7e50 <_svfprintf_r+0x1008>
    7e46:	3c10      	subs	r4, #16
    7e48:	2c10      	cmp	r4, #16
    7e4a:	f100 0008 	add.w	r0, r0, #8
    7e4e:	dd16      	ble.n	7e7e <_svfprintf_r+0x1036>
    7e50:	3301      	adds	r3, #1
    7e52:	492c      	ldr	r1, [pc, #176]	; (7f04 <_svfprintf_r+0x10bc>)
    7e54:	3210      	adds	r2, #16
    7e56:	2b07      	cmp	r3, #7
    7e58:	e9c0 1a00 	strd	r1, sl, [r0]
    7e5c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    7e60:	ddf1      	ble.n	7e46 <_svfprintf_r+0xffe>
    7e62:	aa24      	add	r2, sp, #144	; 0x90
    7e64:	4629      	mov	r1, r5
    7e66:	4658      	mov	r0, fp
    7e68:	f003 feea 	bl	bc40 <__ssprint_r>
    7e6c:	2800      	cmp	r0, #0
    7e6e:	f47f ac50 	bne.w	7712 <_svfprintf_r+0x8ca>
    7e72:	3c10      	subs	r4, #16
    7e74:	2c10      	cmp	r4, #16
    7e76:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    7e7a:	a827      	add	r0, sp, #156	; 0x9c
    7e7c:	dce8      	bgt.n	7e50 <_svfprintf_r+0x1008>
    7e7e:	4629      	mov	r1, r5
    7e80:	9d05      	ldr	r5, [sp, #20]
    7e82:	469c      	mov	ip, r3
    7e84:	f10c 0301 	add.w	r3, ip, #1
    7e88:	4422      	add	r2, r4
    7e8a:	6044      	str	r4, [r0, #4]
    7e8c:	2b07      	cmp	r3, #7
    7e8e:	4c1d      	ldr	r4, [pc, #116]	; (7f04 <_svfprintf_r+0x10bc>)
    7e90:	6004      	str	r4, [r0, #0]
    7e92:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    7e96:	f300 83c6 	bgt.w	8626 <_svfprintf_r+0x17de>
    7e9a:	f896 c000 	ldrb.w	ip, [r6]
    7e9e:	3008      	adds	r0, #8
    7ea0:	4465      	add	r5, ip
    7ea2:	e7bc      	b.n	7e1e <_svfprintf_r+0xfd6>
    7ea4:	f018 0310 	ands.w	r3, r8, #16
    7ea8:	f000 80c2 	beq.w	8030 <_svfprintf_r+0x11e8>
    7eac:	9b08      	ldr	r3, [sp, #32]
    7eae:	f853 2b04 	ldr.w	r2, [r3], #4
    7eb2:	9308      	str	r3, [sp, #32]
    7eb4:	e6f9      	b.n	7caa <_svfprintf_r+0xe62>
    7eb6:	aa24      	add	r2, sp, #144	; 0x90
    7eb8:	4658      	mov	r0, fp
    7eba:	9105      	str	r1, [sp, #20]
    7ebc:	f003 fec0 	bl	bc40 <__ssprint_r>
    7ec0:	2800      	cmp	r0, #0
    7ec2:	f47f ac26 	bne.w	7712 <_svfprintf_r+0x8ca>
    7ec6:	9a26      	ldr	r2, [sp, #152]	; 0x98
    7ec8:	9905      	ldr	r1, [sp, #20]
    7eca:	a827      	add	r0, sp, #156	; 0x9c
    7ecc:	e787      	b.n	7dde <_svfprintf_r+0xf96>
    7ece:	9802      	ldr	r0, [sp, #8]
    7ed0:	f8cd a01c 	str.w	sl, [sp, #28]
    7ed4:	ac50      	add	r4, sp, #320	; 0x140
    7ed6:	f400 6080 	and.w	r0, r0, #1024	; 0x400
    7eda:	2500      	movs	r5, #0
    7edc:	ee0a ba10 	vmov	s20, fp
    7ee0:	4b09      	ldr	r3, [pc, #36]	; (7f08 <_svfprintf_r+0x10c0>)
    7ee2:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
    7ee6:	f8cd 9014 	str.w	r9, [sp, #20]
    7eea:	46a3      	mov	fp, r4
    7eec:	f04f 0805 	mov.w	r8, #5
    7ef0:	46ac      	mov	ip, r5
    7ef2:	4604      	mov	r4, r0
    7ef4:	e010      	b.n	7f18 <_svfprintf_r+0x10d0>
    7ef6:	bf00      	nop
    7ef8:	200008d8 	.word	0x200008d8
    7efc:	200008ec 	.word	0x200008ec
    7f00:	20000900 	.word	0x20000900
    7f04:	20007810 	.word	0x20007810
    7f08:	cccccccd 	.word	0xcccccccd
    7f0c:	2a0a      	cmp	r2, #10
    7f0e:	f171 0100 	sbcs.w	r1, r1, #0
    7f12:	d336      	bcc.n	7f82 <_svfprintf_r+0x113a>
    7f14:	464a      	mov	r2, r9
    7f16:	4631      	mov	r1, r6
    7f18:	1850      	adds	r0, r2, r1
    7f1a:	f140 0000 	adc.w	r0, r0, #0
    7f1e:	fba3 5600 	umull	r5, r6, r3, r0
    7f22:	f026 0503 	bic.w	r5, r6, #3
    7f26:	eb05 0596 	add.w	r5, r5, r6, lsr #2
    7f2a:	1b40      	subs	r0, r0, r5
    7f2c:	1a15      	subs	r5, r2, r0
    7f2e:	f04f 36cc 	mov.w	r6, #3435973836	; 0xcccccccc
    7f32:	f161 0e00 	sbc.w	lr, r1, #0
    7f36:	fb06 f605 	mul.w	r6, r6, r5
    7f3a:	fba5 9503 	umull	r9, r5, r5, r3
    7f3e:	fb03 660e 	mla	r6, r3, lr, r6
    7f42:	f009 0e01 	and.w	lr, r9, #1
    7f46:	442e      	add	r6, r5
    7f48:	fbae 5e08 	umull	r5, lr, lr, r8
    7f4c:	182d      	adds	r5, r5, r0
    7f4e:	ea4f 0959 	mov.w	r9, r9, lsr #1
    7f52:	3530      	adds	r5, #48	; 0x30
    7f54:	f80b 5c01 	strb.w	r5, [fp, #-1]
    7f58:	ea49 79c6 	orr.w	r9, r9, r6, lsl #31
    7f5c:	f10c 0c01 	add.w	ip, ip, #1
    7f60:	f10b 3bff 	add.w	fp, fp, #4294967295
    7f64:	0876      	lsrs	r6, r6, #1
    7f66:	2c00      	cmp	r4, #0
    7f68:	d0d0      	beq.n	7f0c <_svfprintf_r+0x10c4>
    7f6a:	f89a 0000 	ldrb.w	r0, [sl]
    7f6e:	4584      	cmp	ip, r0
    7f70:	d1cc      	bne.n	7f0c <_svfprintf_r+0x10c4>
    7f72:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    7f76:	d0c9      	beq.n	7f0c <_svfprintf_r+0x10c4>
    7f78:	2a0a      	cmp	r2, #10
    7f7a:	f171 0100 	sbcs.w	r1, r1, #0
    7f7e:	f080 818f 	bcs.w	82a0 <_svfprintf_r+0x1458>
    7f82:	465c      	mov	r4, fp
    7f84:	ab50      	add	r3, sp, #320	; 0x140
    7f86:	1b1b      	subs	r3, r3, r4
    7f88:	f8dd 9014 	ldr.w	r9, [sp, #20]
    7f8c:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
    7f90:	ee1a ba10 	vmov	fp, s20
    7f94:	f8dd a01c 	ldr.w	sl, [sp, #28]
    7f98:	f8dd 8008 	ldr.w	r8, [sp, #8]
    7f9c:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
    7fa0:	9305      	str	r3, [sp, #20]
    7fa2:	f7ff bac2 	b.w	752a <_svfprintf_r+0x6e2>
    7fa6:	ee1b 1a10 	vmov	r1, s22
    7faa:	aa24      	add	r2, sp, #144	; 0x90
    7fac:	4658      	mov	r0, fp
    7fae:	f003 fe47 	bl	bc40 <__ssprint_r>
    7fb2:	2800      	cmp	r0, #0
    7fb4:	f47f abad 	bne.w	7712 <_svfprintf_r+0x8ca>
    7fb8:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    7fbc:	9a26      	ldr	r2, [sp, #152]	; 0x98
    7fbe:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    7fc2:	f7ff b896 	b.w	70f2 <_svfprintf_r+0x2aa>
    7fc6:	9b25      	ldr	r3, [sp, #148]	; 0x94
    7fc8:	48be      	ldr	r0, [pc, #760]	; (82c4 <_svfprintf_r+0x147c>)
    7fca:	f8ca 0000 	str.w	r0, [sl]
    7fce:	3301      	adds	r3, #1
    7fd0:	3201      	adds	r2, #1
    7fd2:	2001      	movs	r0, #1
    7fd4:	2b07      	cmp	r3, #7
    7fd6:	9226      	str	r2, [sp, #152]	; 0x98
    7fd8:	9325      	str	r3, [sp, #148]	; 0x94
    7fda:	f8ca 0004 	str.w	r0, [sl, #4]
    7fde:	f300 8177 	bgt.w	82d0 <_svfprintf_r+0x1488>
    7fe2:	f10a 0a08 	add.w	sl, sl, #8
    7fe6:	2900      	cmp	r1, #0
    7fe8:	f040 80af 	bne.w	814a <_svfprintf_r+0x1302>
    7fec:	990e      	ldr	r1, [sp, #56]	; 0x38
    7fee:	f008 0301 	and.w	r3, r8, #1
    7ff2:	430b      	orrs	r3, r1
    7ff4:	f43f a8c0 	beq.w	7178 <_svfprintf_r+0x330>
    7ff8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    7ffa:	9912      	ldr	r1, [sp, #72]	; 0x48
    7ffc:	441a      	add	r2, r3
    7ffe:	e9ca 1300 	strd	r1, r3, [sl]
    8002:	9b25      	ldr	r3, [sp, #148]	; 0x94
    8004:	9226      	str	r2, [sp, #152]	; 0x98
    8006:	3301      	adds	r3, #1
    8008:	2b07      	cmp	r3, #7
    800a:	9325      	str	r3, [sp, #148]	; 0x94
    800c:	f300 8252 	bgt.w	84b4 <_svfprintf_r+0x166c>
    8010:	f10a 0a08 	add.w	sl, sl, #8
    8014:	990e      	ldr	r1, [sp, #56]	; 0x38
    8016:	f8ca 4000 	str.w	r4, [sl]
    801a:	3301      	adds	r3, #1
    801c:	440a      	add	r2, r1
    801e:	2b07      	cmp	r3, #7
    8020:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    8024:	f8ca 1004 	str.w	r1, [sl, #4]
    8028:	f77f a8a4 	ble.w	7174 <_svfprintf_r+0x32c>
    802c:	f7ff bbbd 	b.w	77aa <_svfprintf_r+0x962>
    8030:	f018 0240 	ands.w	r2, r8, #64	; 0x40
    8034:	f000 80dd 	beq.w	81f2 <_svfprintf_r+0x13aa>
    8038:	9808      	ldr	r0, [sp, #32]
    803a:	f850 2b04 	ldr.w	r2, [r0], #4
    803e:	9008      	str	r0, [sp, #32]
    8040:	4619      	mov	r1, r3
    8042:	b292      	uxth	r2, r2
    8044:	e631      	b.n	7caa <_svfprintf_r+0xe62>
    8046:	ee1b 1a10 	vmov	r1, s22
    804a:	aa24      	add	r2, sp, #144	; 0x90
    804c:	4658      	mov	r0, fp
    804e:	f003 fdf7 	bl	bc40 <__ssprint_r>
    8052:	2800      	cmp	r0, #0
    8054:	f47f ab5d 	bne.w	7712 <_svfprintf_r+0x8ca>
    8058:	9a26      	ldr	r2, [sp, #152]	; 0x98
    805a:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    805e:	f7ff baa3 	b.w	75a8 <_svfprintf_r+0x760>
    8062:	ae22      	add	r6, sp, #136	; 0x88
    8064:	2208      	movs	r2, #8
    8066:	2100      	movs	r1, #0
    8068:	4630      	mov	r0, r6
    806a:	941d      	str	r4, [sp, #116]	; 0x74
    806c:	f7fd f8be 	bl	51ec <memset>
    8070:	9b03      	ldr	r3, [sp, #12]
    8072:	1c5a      	adds	r2, r3, #1
    8074:	f000 80db 	beq.w	822e <_svfprintf_r+0x13e6>
    8078:	2500      	movs	r5, #0
    807a:	f8cd 9008 	str.w	r9, [sp, #8]
    807e:	f8cd 801c 	str.w	r8, [sp, #28]
    8082:	4699      	mov	r9, r3
    8084:	46a8      	mov	r8, r5
    8086:	e00c      	b.n	80a2 <_svfprintf_r+0x125a>
    8088:	a937      	add	r1, sp, #220	; 0xdc
    808a:	4658      	mov	r0, fp
    808c:	f003 fcae 	bl	b9ec <_wcrtomb_r>
    8090:	1c43      	adds	r3, r0, #1
    8092:	4440      	add	r0, r8
    8094:	f000 83c8 	beq.w	8828 <_svfprintf_r+0x19e0>
    8098:	4548      	cmp	r0, r9
    809a:	dc08      	bgt.n	80ae <_svfprintf_r+0x1266>
    809c:	f000 8418 	beq.w	88d0 <_svfprintf_r+0x1a88>
    80a0:	4680      	mov	r8, r0
    80a2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    80a4:	5952      	ldr	r2, [r2, r5]
    80a6:	4633      	mov	r3, r6
    80a8:	3504      	adds	r5, #4
    80aa:	2a00      	cmp	r2, #0
    80ac:	d1ec      	bne.n	8088 <_svfprintf_r+0x1240>
    80ae:	f8cd 8014 	str.w	r8, [sp, #20]
    80b2:	f8dd 9008 	ldr.w	r9, [sp, #8]
    80b6:	f8dd 801c 	ldr.w	r8, [sp, #28]
    80ba:	e0c5      	b.n	8248 <_svfprintf_r+0x1400>
    80bc:	3301      	adds	r3, #1
    80be:	4982      	ldr	r1, [pc, #520]	; (82c8 <_svfprintf_r+0x1480>)
    80c0:	f8ca 4004 	str.w	r4, [sl, #4]
    80c4:	4422      	add	r2, r4
    80c6:	2b07      	cmp	r3, #7
    80c8:	f8ca 1000 	str.w	r1, [sl]
    80cc:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    80d0:	f77f a850 	ble.w	7174 <_svfprintf_r+0x32c>
    80d4:	f7ff bb69 	b.w	77aa <_svfprintf_r+0x962>
    80d8:	ee1b 1a10 	vmov	r1, s22
    80dc:	aa24      	add	r2, sp, #144	; 0x90
    80de:	4658      	mov	r0, fp
    80e0:	f003 fdae 	bl	bc40 <__ssprint_r>
    80e4:	2800      	cmp	r0, #0
    80e6:	f47f ab14 	bne.w	7712 <_svfprintf_r+0x8ca>
    80ea:	9a26      	ldr	r2, [sp, #152]	; 0x98
    80ec:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    80f0:	f7ff b829 	b.w	7146 <_svfprintf_r+0x2fe>
    80f4:	aa24      	add	r2, sp, #144	; 0x90
    80f6:	4658      	mov	r0, fp
    80f8:	9105      	str	r1, [sp, #20]
    80fa:	f003 fda1 	bl	bc40 <__ssprint_r>
    80fe:	2800      	cmp	r0, #0
    8100:	f47f ab07 	bne.w	7712 <_svfprintf_r+0x8ca>
    8104:	f896 c000 	ldrb.w	ip, [r6]
    8108:	9a26      	ldr	r2, [sp, #152]	; 0x98
    810a:	9905      	ldr	r1, [sp, #20]
    810c:	a827      	add	r0, sp, #156	; 0x9c
    810e:	e67d      	b.n	7e0c <_svfprintf_r+0xfc4>
    8110:	2b01      	cmp	r3, #1
    8112:	f8cd 8008 	str.w	r8, [sp, #8]
    8116:	f47f a9f3 	bne.w	7500 <_svfprintf_r+0x6b8>
    811a:	f7ff bb93 	b.w	7844 <_svfprintf_r+0x9fc>
    811e:	9b08      	ldr	r3, [sp, #32]
    8120:	9904      	ldr	r1, [sp, #16]
    8122:	f853 2b04 	ldr.w	r2, [r3], #4
    8126:	464c      	mov	r4, r9
    8128:	6011      	str	r1, [r2, #0]
    812a:	9308      	str	r3, [sp, #32]
    812c:	f7fe bebe 	b.w	6eac <_svfprintf_r+0x64>
    8130:	3301      	adds	r3, #1
    8132:	4965      	ldr	r1, [pc, #404]	; (82c8 <_svfprintf_r+0x1480>)
    8134:	f8ca 4004 	str.w	r4, [sl, #4]
    8138:	4422      	add	r2, r4
    813a:	2b07      	cmp	r3, #7
    813c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    8140:	f8ca 1000 	str.w	r1, [sl]
    8144:	f77f ab22 	ble.w	778c <_svfprintf_r+0x944>
    8148:	e47b      	b.n	7a42 <_svfprintf_r+0xbfa>
    814a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    814c:	9812      	ldr	r0, [sp, #72]	; 0x48
    814e:	441a      	add	r2, r3
    8150:	e9ca 0300 	strd	r0, r3, [sl]
    8154:	9b25      	ldr	r3, [sp, #148]	; 0x94
    8156:	9226      	str	r2, [sp, #152]	; 0x98
    8158:	3301      	adds	r3, #1
    815a:	2b07      	cmp	r3, #7
    815c:	9325      	str	r3, [sp, #148]	; 0x94
    815e:	f300 81a9 	bgt.w	84b4 <_svfprintf_r+0x166c>
    8162:	f10a 0a08 	add.w	sl, sl, #8
    8166:	2900      	cmp	r1, #0
    8168:	f6bf af54 	bge.w	8014 <_svfprintf_r+0x11cc>
    816c:	424d      	negs	r5, r1
    816e:	3110      	adds	r1, #16
    8170:	f280 830f 	bge.w	8792 <_svfprintf_r+0x194a>
    8174:	ee1b 1a10 	vmov	r1, s22
    8178:	2610      	movs	r6, #16
    817a:	e005      	b.n	8188 <_svfprintf_r+0x1340>
    817c:	f10a 0a08 	add.w	sl, sl, #8
    8180:	3d10      	subs	r5, #16
    8182:	2d10      	cmp	r5, #16
    8184:	f340 8305 	ble.w	8792 <_svfprintf_r+0x194a>
    8188:	3301      	adds	r3, #1
    818a:	484f      	ldr	r0, [pc, #316]	; (82c8 <_svfprintf_r+0x1480>)
    818c:	3210      	adds	r2, #16
    818e:	2b07      	cmp	r3, #7
    8190:	e9ca 0600 	strd	r0, r6, [sl]
    8194:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    8198:	ddf0      	ble.n	817c <_svfprintf_r+0x1334>
    819a:	aa24      	add	r2, sp, #144	; 0x90
    819c:	4658      	mov	r0, fp
    819e:	9103      	str	r1, [sp, #12]
    81a0:	f003 fd4e 	bl	bc40 <__ssprint_r>
    81a4:	2800      	cmp	r0, #0
    81a6:	f47f aab4 	bne.w	7712 <_svfprintf_r+0x8ca>
    81aa:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    81ae:	9903      	ldr	r1, [sp, #12]
    81b0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    81b4:	e7e4      	b.n	8180 <_svfprintf_r+0x1338>
    81b6:	9b08      	ldr	r3, [sp, #32]
    81b8:	f418 7100 	ands.w	r1, r8, #512	; 0x200
    81bc:	bf1a      	itte	ne
    81be:	4611      	movne	r1, r2
    81c0:	f853 2b04 	ldrne.w	r2, [r3], #4
    81c4:	f853 2b04 	ldreq.w	r2, [r3], #4
    81c8:	9308      	str	r3, [sp, #32]
    81ca:	bf18      	it	ne
    81cc:	b2d2      	uxtbne	r2, r2
    81ce:	f7ff b945 	b.w	745c <_svfprintf_r+0x614>
    81d2:	9b02      	ldr	r3, [sp, #8]
    81d4:	f413 7100 	ands.w	r1, r3, #512	; 0x200
    81d8:	9b08      	ldr	r3, [sp, #32]
    81da:	bf1a      	itte	ne
    81dc:	4611      	movne	r1, r2
    81de:	f853 2b04 	ldrne.w	r2, [r3], #4
    81e2:	f853 2b04 	ldreq.w	r2, [r3], #4
    81e6:	9308      	str	r3, [sp, #32]
    81e8:	bf18      	it	ne
    81ea:	b2d2      	uxtbne	r2, r2
    81ec:	2301      	movs	r3, #1
    81ee:	f7ff b8d0 	b.w	7392 <_svfprintf_r+0x54a>
    81f2:	9b08      	ldr	r3, [sp, #32]
    81f4:	f418 7100 	ands.w	r1, r8, #512	; 0x200
    81f8:	bf1a      	itte	ne
    81fa:	4611      	movne	r1, r2
    81fc:	f853 2b04 	ldrne.w	r2, [r3], #4
    8200:	f853 2b04 	ldreq.w	r2, [r3], #4
    8204:	9308      	str	r3, [sp, #32]
    8206:	bf18      	it	ne
    8208:	b2d2      	uxtbne	r2, r2
    820a:	e54e      	b.n	7caa <_svfprintf_r+0xe62>
    820c:	468a      	mov	sl, r1
    820e:	3301      	adds	r3, #1
    8210:	492d      	ldr	r1, [pc, #180]	; (82c8 <_svfprintf_r+0x1480>)
    8212:	f8ca 5004 	str.w	r5, [sl, #4]
    8216:	442a      	add	r2, r5
    8218:	2b07      	cmp	r3, #7
    821a:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    821e:	f8ca 1000 	str.w	r1, [sl]
    8222:	f300 8139 	bgt.w	8498 <_svfprintf_r+0x1650>
    8226:	f10a 0a08 	add.w	sl, sl, #8
    822a:	f7ff bb8c 	b.w	7946 <_svfprintf_r+0xafe>
    822e:	2300      	movs	r3, #0
    8230:	4619      	mov	r1, r3
    8232:	9600      	str	r6, [sp, #0]
    8234:	aa1d      	add	r2, sp, #116	; 0x74
    8236:	4658      	mov	r0, fp
    8238:	f003 fbfe 	bl	ba38 <_wcsrtombs_r>
    823c:	4603      	mov	r3, r0
    823e:	3301      	adds	r3, #1
    8240:	9005      	str	r0, [sp, #20]
    8242:	f000 82f1 	beq.w	8828 <_svfprintf_r+0x19e0>
    8246:	941d      	str	r4, [sp, #116]	; 0x74
    8248:	9b05      	ldr	r3, [sp, #20]
    824a:	2b00      	cmp	r3, #0
    824c:	d04e      	beq.n	82ec <_svfprintf_r+0x14a4>
    824e:	2b63      	cmp	r3, #99	; 0x63
    8250:	f300 8118 	bgt.w	8484 <_svfprintf_r+0x163c>
    8254:	2300      	movs	r3, #0
    8256:	9307      	str	r3, [sp, #28]
    8258:	ac37      	add	r4, sp, #220	; 0xdc
    825a:	2208      	movs	r2, #8
    825c:	2100      	movs	r1, #0
    825e:	4630      	mov	r0, r6
    8260:	f7fc ffc4 	bl	51ec <memset>
    8264:	9d05      	ldr	r5, [sp, #20]
    8266:	9600      	str	r6, [sp, #0]
    8268:	462b      	mov	r3, r5
    826a:	aa1d      	add	r2, sp, #116	; 0x74
    826c:	4621      	mov	r1, r4
    826e:	4658      	mov	r0, fp
    8270:	f003 fbe2 	bl	ba38 <_wcsrtombs_r>
    8274:	4285      	cmp	r5, r0
    8276:	f040 837c 	bne.w	8972 <_svfprintf_r+0x1b2a>
    827a:	9a05      	ldr	r2, [sp, #20]
    827c:	2300      	movs	r3, #0
    827e:	54a3      	strb	r3, [r4, r2]
    8280:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    8284:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    8288:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    828c:	9303      	str	r3, [sp, #12]
    828e:	9202      	str	r2, [sp, #8]
    8290:	930f      	str	r3, [sp, #60]	; 0x3c
    8292:	f7fe bfba 	b.w	720a <_svfprintf_r+0x3c2>
    8296:	212d      	movs	r1, #45	; 0x2d
    8298:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    829c:	f7fe bfa4 	b.w	71e8 <_svfprintf_r+0x3a0>
    82a0:	9b16      	ldr	r3, [sp, #88]	; 0x58
    82a2:	9915      	ldr	r1, [sp, #84]	; 0x54
    82a4:	ebab 0b03 	sub.w	fp, fp, r3
    82a8:	461a      	mov	r2, r3
    82aa:	4658      	mov	r0, fp
    82ac:	f7fd f836 	bl	531c <strncpy>
    82b0:	f89a 2001 	ldrb.w	r2, [sl, #1]
    82b4:	4b05      	ldr	r3, [pc, #20]	; (82cc <_svfprintf_r+0x1484>)
    82b6:	b10a      	cbz	r2, 82bc <_svfprintf_r+0x1474>
    82b8:	f10a 0a01 	add.w	sl, sl, #1
    82bc:	f04f 0c00 	mov.w	ip, #0
    82c0:	e628      	b.n	7f14 <_svfprintf_r+0x10cc>
    82c2:	bf00      	nop
    82c4:	20000908 	.word	0x20000908
    82c8:	20007810 	.word	0x20007810
    82cc:	cccccccd 	.word	0xcccccccd
    82d0:	ee1b 1a10 	vmov	r1, s22
    82d4:	aa24      	add	r2, sp, #144	; 0x90
    82d6:	4658      	mov	r0, fp
    82d8:	f003 fcb2 	bl	bc40 <__ssprint_r>
    82dc:	2800      	cmp	r0, #0
    82de:	f47f aa18 	bne.w	7712 <_svfprintf_r+0x8ca>
    82e2:	991b      	ldr	r1, [sp, #108]	; 0x6c
    82e4:	9a26      	ldr	r2, [sp, #152]	; 0x98
    82e6:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    82ea:	e67c      	b.n	7fe6 <_svfprintf_r+0x119e>
    82ec:	9b05      	ldr	r3, [sp, #20]
    82ee:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    82f2:	930f      	str	r3, [sp, #60]	; 0x3c
    82f4:	e9cd 3302 	strd	r3, r3, [sp, #8]
    82f8:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    82fc:	9307      	str	r3, [sp, #28]
    82fe:	f7fe bf84 	b.w	720a <_svfprintf_r+0x3c2>
    8302:	990e      	ldr	r1, [sp, #56]	; 0x38
    8304:	9805      	ldr	r0, [sp, #20]
    8306:	1865      	adds	r5, r4, r1
    8308:	1a2d      	subs	r5, r5, r0
    830a:	1acc      	subs	r4, r1, r3
    830c:	42a5      	cmp	r5, r4
    830e:	bfa8      	it	ge
    8310:	4625      	movge	r5, r4
    8312:	f7ff bb4d 	b.w	79b0 <_svfprintf_r+0xb68>
    8316:	9b08      	ldr	r3, [sp, #32]
    8318:	9904      	ldr	r1, [sp, #16]
    831a:	f853 2b04 	ldr.w	r2, [r3], #4
    831e:	9308      	str	r3, [sp, #32]
    8320:	8011      	strh	r1, [r2, #0]
    8322:	464c      	mov	r4, r9
    8324:	f7fe bdc2 	b.w	6eac <_svfprintf_r+0x64>
    8328:	f913 2b04 	ldrsb.w	r2, [r3], #4
    832c:	9308      	str	r3, [sp, #32]
    832e:	17d1      	asrs	r1, r2, #31
    8330:	460b      	mov	r3, r1
    8332:	f7fe bfdb 	b.w	72ec <_svfprintf_r+0x4a4>
    8336:	9a03      	ldr	r2, [sp, #12]
    8338:	2102      	movs	r1, #2
    833a:	ab22      	add	r3, sp, #136	; 0x88
    833c:	9301      	str	r3, [sp, #4]
    833e:	ab1d      	add	r3, sp, #116	; 0x74
    8340:	9300      	str	r3, [sp, #0]
    8342:	4658      	mov	r0, fp
    8344:	ab1b      	add	r3, sp, #108	; 0x6c
    8346:	eeb0 0b4a 	vmov.f64	d0, d10
    834a:	9202      	str	r2, [sp, #8]
    834c:	f002 fa84 	bl	a858 <_dtoa_r>
    8350:	2d47      	cmp	r5, #71	; 0x47
    8352:	9a02      	ldr	r2, [sp, #8]
    8354:	4604      	mov	r4, r0
    8356:	f000 8161 	beq.w	861c <_svfprintf_r+0x17d4>
    835a:	2d46      	cmp	r5, #70	; 0x46
    835c:	4410      	add	r0, r2
    835e:	d105      	bne.n	836c <_svfprintf_r+0x1524>
    8360:	7823      	ldrb	r3, [r4, #0]
    8362:	2b30      	cmp	r3, #48	; 0x30
    8364:	f000 826f 	beq.w	8846 <_svfprintf_r+0x19fe>
    8368:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    836a:	4410      	add	r0, r2
    836c:	eeb5 ab40 	vcmp.f64	d10, #0.0
    8370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8374:	f040 8146 	bne.w	8604 <_svfprintf_r+0x17bc>
    8378:	4603      	mov	r3, r0
    837a:	1b1b      	subs	r3, r3, r4
    837c:	930e      	str	r3, [sp, #56]	; 0x38
    837e:	2d47      	cmp	r5, #71	; 0x47
    8380:	f000 8110 	beq.w	85a4 <_svfprintf_r+0x175c>
    8384:	2d46      	cmp	r5, #70	; 0x46
    8386:	f000 81b5 	beq.w	86f4 <_svfprintf_r+0x18ac>
    838a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    838c:	930c      	str	r3, [sp, #48]	; 0x30
    838e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8390:	2d41      	cmp	r5, #65	; 0x41
    8392:	f103 33ff 	add.w	r3, r3, #4294967295
    8396:	931b      	str	r3, [sp, #108]	; 0x6c
    8398:	f000 81e5 	beq.w	8766 <_svfprintf_r+0x191e>
    839c:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
    83a0:	2100      	movs	r1, #0
    83a2:	2b00      	cmp	r3, #0
    83a4:	bfb8      	it	lt
    83a6:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
    83a8:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
    83ac:	bfba      	itte	lt
    83ae:	f1c3 0301 	rsblt	r3, r3, #1
    83b2:	222d      	movlt	r2, #45	; 0x2d
    83b4:	222b      	movge	r2, #43	; 0x2b
    83b6:	2b09      	cmp	r3, #9
    83b8:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
    83bc:	f340 81da 	ble.w	8774 <_svfprintf_r+0x192c>
    83c0:	f10d 058f 	add.w	r5, sp, #143	; 0x8f
    83c4:	f8df c41c 	ldr.w	ip, [pc, #1052]	; 87e4 <_svfprintf_r+0x199c>
    83c8:	462a      	mov	r2, r5
    83ca:	4610      	mov	r0, r2
    83cc:	fb8c 2103 	smull	r2, r1, ip, r3
    83d0:	17da      	asrs	r2, r3, #31
    83d2:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
    83d6:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    83da:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
    83de:	3130      	adds	r1, #48	; 0x30
    83e0:	f800 1c01 	strb.w	r1, [r0, #-1]
    83e4:	4619      	mov	r1, r3
    83e6:	2963      	cmp	r1, #99	; 0x63
    83e8:	4613      	mov	r3, r2
    83ea:	f100 32ff 	add.w	r2, r0, #4294967295
    83ee:	dcec      	bgt.n	83ca <_svfprintf_r+0x1582>
    83f0:	3330      	adds	r3, #48	; 0x30
    83f2:	b2d9      	uxtb	r1, r3
    83f4:	1e83      	subs	r3, r0, #2
    83f6:	429d      	cmp	r5, r3
    83f8:	f802 1c01 	strb.w	r1, [r2, #-1]
    83fc:	f240 828b 	bls.w	8916 <_svfprintf_r+0x1ace>
    8400:	4613      	mov	r3, r2
    8402:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    8406:	e001      	b.n	840c <_svfprintf_r+0x15c4>
    8408:	f813 1b01 	ldrb.w	r1, [r3], #1
    840c:	f802 1b01 	strb.w	r1, [r2], #1
    8410:	429d      	cmp	r5, r3
    8412:	d1f9      	bne.n	8408 <_svfprintf_r+0x15c0>
    8414:	f10d 0391 	add.w	r3, sp, #145	; 0x91
    8418:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    841c:	1a1b      	subs	r3, r3, r0
    841e:	4413      	add	r3, r2
    8420:	aa1e      	add	r2, sp, #120	; 0x78
    8422:	1a9b      	subs	r3, r3, r2
    8424:	9314      	str	r3, [sp, #80]	; 0x50
    8426:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8428:	9a14      	ldr	r2, [sp, #80]	; 0x50
    842a:	2b01      	cmp	r3, #1
    842c:	441a      	add	r2, r3
    842e:	9205      	str	r2, [sp, #20]
    8430:	f340 8203 	ble.w	883a <_svfprintf_r+0x19f2>
    8434:	9b05      	ldr	r3, [sp, #20]
    8436:	9a10      	ldr	r2, [sp, #64]	; 0x40
    8438:	4413      	add	r3, r2
    843a:	9305      	str	r3, [sp, #20]
    843c:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
    8440:	9a05      	ldr	r2, [sp, #20]
    8442:	f443 7880 	orr.w	r8, r3, #256	; 0x100
    8446:	2300      	movs	r3, #0
    8448:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    844c:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    8450:	930f      	str	r3, [sp, #60]	; 0x3c
    8452:	9202      	str	r2, [sp, #8]
    8454:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8456:	2b00      	cmp	r3, #0
    8458:	f040 80b1 	bne.w	85be <_svfprintf_r+0x1776>
    845c:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    8460:	9303      	str	r3, [sp, #12]
    8462:	f7fe bed2 	b.w	720a <_svfprintf_r+0x3c2>
    8466:	4620      	mov	r0, r4
    8468:	f7fd f9aa 	bl	57c0 <strlen>
    846c:	4602      	mov	r2, r0
    846e:	9005      	str	r0, [sp, #20]
    8470:	f7fe bf20 	b.w	72b4 <_svfprintf_r+0x46c>
    8474:	ee1b 1a10 	vmov	r1, s22
    8478:	aa24      	add	r2, sp, #144	; 0x90
    847a:	4658      	mov	r0, fp
    847c:	f003 fbe0 	bl	bc40 <__ssprint_r>
    8480:	f7fe bded 	b.w	705e <_svfprintf_r+0x216>
    8484:	1c59      	adds	r1, r3, #1
    8486:	4658      	mov	r0, fp
    8488:	f7fb f80c 	bl	34a4 <_malloc_r>
    848c:	4604      	mov	r4, r0
    848e:	2800      	cmp	r0, #0
    8490:	f000 81ca 	beq.w	8828 <_svfprintf_r+0x19e0>
    8494:	9007      	str	r0, [sp, #28]
    8496:	e6e0      	b.n	825a <_svfprintf_r+0x1412>
    8498:	ee1b 1a10 	vmov	r1, s22
    849c:	aa24      	add	r2, sp, #144	; 0x90
    849e:	4658      	mov	r0, fp
    84a0:	f003 fbce 	bl	bc40 <__ssprint_r>
    84a4:	2800      	cmp	r0, #0
    84a6:	f47f a934 	bne.w	7712 <_svfprintf_r+0x8ca>
    84aa:	9a26      	ldr	r2, [sp, #152]	; 0x98
    84ac:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    84b0:	f7ff ba49 	b.w	7946 <_svfprintf_r+0xafe>
    84b4:	ee1b 1a10 	vmov	r1, s22
    84b8:	aa24      	add	r2, sp, #144	; 0x90
    84ba:	4658      	mov	r0, fp
    84bc:	f003 fbc0 	bl	bc40 <__ssprint_r>
    84c0:	2800      	cmp	r0, #0
    84c2:	f47f a926 	bne.w	7712 <_svfprintf_r+0x8ca>
    84c6:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    84ca:	991b      	ldr	r1, [sp, #108]	; 0x6c
    84cc:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    84d0:	e649      	b.n	8166 <_svfprintf_r+0x131e>
    84d2:	2306      	movs	r3, #6
    84d4:	9303      	str	r3, [sp, #12]
    84d6:	f7ff bb83 	b.w	7be0 <_svfprintf_r+0xd98>
    84da:	9b03      	ldr	r3, [sp, #12]
    84dc:	2102      	movs	r1, #2
    84de:	1c5a      	adds	r2, r3, #1
    84e0:	e72b      	b.n	833a <_svfprintf_r+0x14f2>
    84e2:	9a03      	ldr	r2, [sp, #12]
    84e4:	2103      	movs	r1, #3
    84e6:	e728      	b.n	833a <_svfprintf_r+0x14f2>
    84e8:	a81b      	add	r0, sp, #108	; 0x6c
    84ea:	eeb0 0b4a 	vmov.f64	d0, d10
    84ee:	f002 f887 	bl	a600 <frexp>
    84f2:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
    84f6:	ee20 0b07 	vmul.f64	d0, d0, d7
    84fa:	eeb5 0b40 	vcmp.f64	d0, #0.0
    84fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8502:	d101      	bne.n	8508 <_svfprintf_r+0x16c0>
    8504:	2301      	movs	r3, #1
    8506:	931b      	str	r3, [sp, #108]	; 0x6c
    8508:	48b3      	ldr	r0, [pc, #716]	; (87d8 <_svfprintf_r+0x1990>)
    850a:	9b03      	ldr	r3, [sp, #12]
    850c:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
    8510:	3b01      	subs	r3, #1
    8512:	4622      	mov	r2, r4
    8514:	e004      	b.n	8520 <_svfprintf_r+0x16d8>
    8516:	eeb5 0b40 	vcmp.f64	d0, #0.0
    851a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    851e:	d013      	beq.n	8548 <_svfprintf_r+0x1700>
    8520:	ee20 0b05 	vmul.f64	d0, d0, d5
    8524:	eefd 7bc0 	vcvt.s32.f64	s15, d0
    8528:	f1b3 3fff 	cmp.w	r3, #4294967295
    852c:	ee17 1a90 	vmov	r1, s15
    8530:	5c41      	ldrb	r1, [r0, r1]
    8532:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    8536:	4694      	mov	ip, r2
    8538:	ee30 0b46 	vsub.f64	d0, d0, d6
    853c:	f802 1b01 	strb.w	r1, [r2], #1
    8540:	4619      	mov	r1, r3
    8542:	f103 33ff 	add.w	r3, r3, #4294967295
    8546:	d1e6      	bne.n	8516 <_svfprintf_r+0x16ce>
    8548:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    854c:	eeb4 0bc6 	vcmpe.f64	d0, d6
    8550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8554:	f300 8148 	bgt.w	87e8 <_svfprintf_r+0x19a0>
    8558:	eeb4 0b46 	vcmp.f64	d0, d6
    855c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8560:	d104      	bne.n	856c <_svfprintf_r+0x1724>
    8562:	ee17 3a90 	vmov	r3, s15
    8566:	07db      	lsls	r3, r3, #31
    8568:	f100 813e 	bmi.w	87e8 <_svfprintf_r+0x19a0>
    856c:	2900      	cmp	r1, #0
    856e:	db06      	blt.n	857e <_svfprintf_r+0x1736>
    8570:	1c4b      	adds	r3, r1, #1
    8572:	4413      	add	r3, r2
    8574:	2130      	movs	r1, #48	; 0x30
    8576:	f802 1b01 	strb.w	r1, [r2], #1
    857a:	4293      	cmp	r3, r2
    857c:	d1fb      	bne.n	8576 <_svfprintf_r+0x172e>
    857e:	1b13      	subs	r3, r2, r4
    8580:	930e      	str	r3, [sp, #56]	; 0x38
    8582:	e6fc      	b.n	837e <_svfprintf_r+0x1536>
    8584:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    8586:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8588:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    858c:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    8590:	9613      	str	r6, [sp, #76]	; 0x4c
    8592:	18e3      	adds	r3, r4, r3
    8594:	429d      	cmp	r5, r3
    8596:	4629      	mov	r1, r5
    8598:	bf28      	it	cs
    859a:	4619      	movcs	r1, r3
    859c:	4682      	mov	sl, r0
    859e:	9105      	str	r1, [sp, #20]
    85a0:	f7ff b9d8 	b.w	7954 <_svfprintf_r+0xb0c>
    85a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    85a6:	930c      	str	r3, [sp, #48]	; 0x30
    85a8:	1cda      	adds	r2, r3, #3
    85aa:	db02      	blt.n	85b2 <_svfprintf_r+0x176a>
    85ac:	9a03      	ldr	r2, [sp, #12]
    85ae:	4293      	cmp	r3, r2
    85b0:	dd0c      	ble.n	85cc <_svfprintf_r+0x1784>
    85b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    85b4:	3b02      	subs	r3, #2
    85b6:	930b      	str	r3, [sp, #44]	; 0x2c
    85b8:	f023 0520 	bic.w	r5, r3, #32
    85bc:	e6e7      	b.n	838e <_svfprintf_r+0x1546>
    85be:	212d      	movs	r1, #45	; 0x2d
    85c0:	2300      	movs	r3, #0
    85c2:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    85c6:	9303      	str	r3, [sp, #12]
    85c8:	f7fe be22 	b.w	7210 <_svfprintf_r+0x3c8>
    85cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    85ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    85d0:	4293      	cmp	r3, r2
    85d2:	f2c0 80bd 	blt.w	8750 <_svfprintf_r+0x1908>
    85d6:	07f0      	lsls	r0, r6, #31
    85d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    85da:	f140 8132 	bpl.w	8842 <_svfprintf_r+0x19fa>
    85de:	9a10      	ldr	r2, [sp, #64]	; 0x40
    85e0:	4413      	add	r3, r2
    85e2:	9305      	str	r3, [sp, #20]
    85e4:	0571      	lsls	r1, r6, #21
    85e6:	d503      	bpl.n	85f0 <_svfprintf_r+0x17a8>
    85e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    85ea:	2b00      	cmp	r3, #0
    85ec:	f300 8135 	bgt.w	885a <_svfprintf_r+0x1a12>
    85f0:	9b05      	ldr	r3, [sp, #20]
    85f2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    85f6:	9302      	str	r3, [sp, #8]
    85f8:	2367      	movs	r3, #103	; 0x67
    85fa:	930b      	str	r3, [sp, #44]	; 0x2c
    85fc:	2300      	movs	r3, #0
    85fe:	930f      	str	r3, [sp, #60]	; 0x3c
    8600:	930d      	str	r3, [sp, #52]	; 0x34
    8602:	e727      	b.n	8454 <_svfprintf_r+0x160c>
    8604:	9b22      	ldr	r3, [sp, #136]	; 0x88
    8606:	4283      	cmp	r3, r0
    8608:	f4bf aeb7 	bcs.w	837a <_svfprintf_r+0x1532>
    860c:	2130      	movs	r1, #48	; 0x30
    860e:	1c5a      	adds	r2, r3, #1
    8610:	9222      	str	r2, [sp, #136]	; 0x88
    8612:	7019      	strb	r1, [r3, #0]
    8614:	9b22      	ldr	r3, [sp, #136]	; 0x88
    8616:	4298      	cmp	r0, r3
    8618:	d8f9      	bhi.n	860e <_svfprintf_r+0x17c6>
    861a:	e6ae      	b.n	837a <_svfprintf_r+0x1532>
    861c:	07f3      	lsls	r3, r6, #31
    861e:	f100 80a7 	bmi.w	8770 <_svfprintf_r+0x1928>
    8622:	9b22      	ldr	r3, [sp, #136]	; 0x88
    8624:	e6a9      	b.n	837a <_svfprintf_r+0x1532>
    8626:	aa24      	add	r2, sp, #144	; 0x90
    8628:	4658      	mov	r0, fp
    862a:	9105      	str	r1, [sp, #20]
    862c:	f003 fb08 	bl	bc40 <__ssprint_r>
    8630:	2800      	cmp	r0, #0
    8632:	f47f a86e 	bne.w	7712 <_svfprintf_r+0x8ca>
    8636:	f896 c000 	ldrb.w	ip, [r6]
    863a:	9a26      	ldr	r2, [sp, #152]	; 0x98
    863c:	9905      	ldr	r1, [sp, #20]
    863e:	a827      	add	r0, sp, #156	; 0x9c
    8640:	4465      	add	r5, ip
    8642:	f7ff bbec 	b.w	7e1e <_svfprintf_r+0xfd6>
    8646:	ee1b 1a10 	vmov	r1, s22
    864a:	aa24      	add	r2, sp, #144	; 0x90
    864c:	4658      	mov	r0, fp
    864e:	f003 faf7 	bl	bc40 <__ssprint_r>
    8652:	2800      	cmp	r0, #0
    8654:	f47f a85d 	bne.w	7712 <_svfprintf_r+0x8ca>
    8658:	9a26      	ldr	r2, [sp, #152]	; 0x98
    865a:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    865e:	f7ff b96b 	b.w	7938 <_svfprintf_r+0xaf0>
    8662:	2378      	movs	r3, #120	; 0x78
    8664:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    8668:	2330      	movs	r3, #48	; 0x30
    866a:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    866e:	9b03      	ldr	r3, [sp, #12]
    8670:	2b63      	cmp	r3, #99	; 0x63
    8672:	f048 0602 	orr.w	r6, r8, #2
    8676:	f300 80a6 	bgt.w	87c6 <_svfprintf_r+0x197e>
    867a:	2300      	movs	r3, #0
    867c:	9307      	str	r3, [sp, #28]
    867e:	ac37      	add	r4, sp, #220	; 0xdc
    8680:	ee18 3a90 	vmov	r3, s17
    8684:	2b00      	cmp	r3, #0
    8686:	f448 7881 	orr.w	r8, r8, #258	; 0x102
    868a:	db2b      	blt.n	86e4 <_svfprintf_r+0x189c>
    868c:	eeb0 ab48 	vmov.f64	d10, d8
    8690:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8692:	f023 0520 	bic.w	r5, r3, #32
    8696:	2300      	movs	r3, #0
    8698:	9309      	str	r3, [sp, #36]	; 0x24
    869a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    869c:	2b61      	cmp	r3, #97	; 0x61
    869e:	f47f aaad 	bne.w	7bfc <_svfprintf_r+0xdb4>
    86a2:	eeb0 0b4a 	vmov.f64	d0, d10
    86a6:	a81b      	add	r0, sp, #108	; 0x6c
    86a8:	f001 ffaa 	bl	a600 <frexp>
    86ac:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
    86b0:	ee20 0b07 	vmul.f64	d0, d0, d7
    86b4:	eeb5 0b40 	vcmp.f64	d0, #0.0
    86b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    86bc:	d101      	bne.n	86c2 <_svfprintf_r+0x187a>
    86be:	2301      	movs	r3, #1
    86c0:	931b      	str	r3, [sp, #108]	; 0x6c
    86c2:	4846      	ldr	r0, [pc, #280]	; (87dc <_svfprintf_r+0x1994>)
    86c4:	e721      	b.n	850a <_svfprintf_r+0x16c2>
    86c6:	ee1b 1a10 	vmov	r1, s22
    86ca:	aa24      	add	r2, sp, #144	; 0x90
    86cc:	4658      	mov	r0, fp
    86ce:	f003 fab7 	bl	bc40 <__ssprint_r>
    86d2:	2800      	cmp	r0, #0
    86d4:	f47f a81d 	bne.w	7712 <_svfprintf_r+0x8ca>
    86d8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    86da:	9a26      	ldr	r2, [sp, #152]	; 0x98
    86dc:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    86e0:	f7ff b94e 	b.w	7980 <_svfprintf_r+0xb38>
    86e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    86e6:	f023 0520 	bic.w	r5, r3, #32
    86ea:	232d      	movs	r3, #45	; 0x2d
    86ec:	9309      	str	r3, [sp, #36]	; 0x24
    86ee:	eeb1 ab48 	vneg.f64	d10, d8
    86f2:	e7d2      	b.n	869a <_svfprintf_r+0x1852>
    86f4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    86f6:	920c      	str	r2, [sp, #48]	; 0x30
    86f8:	2a00      	cmp	r2, #0
    86fa:	f006 0301 	and.w	r3, r6, #1
    86fe:	f340 810d 	ble.w	891c <_svfprintf_r+0x1ad4>
    8702:	9903      	ldr	r1, [sp, #12]
    8704:	430b      	orrs	r3, r1
    8706:	f040 80cf 	bne.w	88a8 <_svfprintf_r+0x1a60>
    870a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    870c:	9305      	str	r3, [sp, #20]
    870e:	2366      	movs	r3, #102	; 0x66
    8710:	930b      	str	r3, [sp, #44]	; 0x2c
    8712:	0572      	lsls	r2, r6, #21
    8714:	f100 80a3 	bmi.w	885e <_svfprintf_r+0x1a16>
    8718:	9b05      	ldr	r3, [sp, #20]
    871a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    871e:	9302      	str	r3, [sp, #8]
    8720:	e76c      	b.n	85fc <_svfprintf_r+0x17b4>
    8722:	ee1b 1a10 	vmov	r1, s22
    8726:	aa24      	add	r2, sp, #144	; 0x90
    8728:	4658      	mov	r0, fp
    872a:	f003 fa89 	bl	bc40 <__ssprint_r>
    872e:	2800      	cmp	r0, #0
    8730:	f47e afef 	bne.w	7712 <_svfprintf_r+0x8ca>
    8734:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
    8736:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8738:	9a26      	ldr	r2, [sp, #152]	; 0x98
    873a:	1b1c      	subs	r4, r3, r4
    873c:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    8740:	f7ff b936 	b.w	79b0 <_svfprintf_r+0xb68>
    8744:	2358      	movs	r3, #88	; 0x58
    8746:	e78d      	b.n	8664 <_svfprintf_r+0x181c>
    8748:	2200      	movs	r2, #0
    874a:	9203      	str	r2, [sp, #12]
    874c:	f7fe bbda 	b.w	6f04 <_svfprintf_r+0xbc>
    8750:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8752:	9a10      	ldr	r2, [sp, #64]	; 0x40
    8754:	189a      	adds	r2, r3, r2
    8756:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8758:	9205      	str	r2, [sp, #20]
    875a:	2b00      	cmp	r3, #0
    875c:	f340 80ab 	ble.w	88b6 <_svfprintf_r+0x1a6e>
    8760:	2367      	movs	r3, #103	; 0x67
    8762:	930b      	str	r3, [sp, #44]	; 0x2c
    8764:	e7d5      	b.n	8712 <_svfprintf_r+0x18ca>
    8766:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    8768:	320f      	adds	r2, #15
    876a:	b2d2      	uxtb	r2, r2
    876c:	2101      	movs	r1, #1
    876e:	e618      	b.n	83a2 <_svfprintf_r+0x155a>
    8770:	18a0      	adds	r0, r4, r2
    8772:	e5fb      	b.n	836c <_svfprintf_r+0x1524>
    8774:	2900      	cmp	r1, #0
    8776:	f040 80a8 	bne.w	88ca <_svfprintf_r+0x1a82>
    877a:	2230      	movs	r2, #48	; 0x30
    877c:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
    8780:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
    8784:	3330      	adds	r3, #48	; 0x30
    8786:	f802 3b01 	strb.w	r3, [r2], #1
    878a:	ab1e      	add	r3, sp, #120	; 0x78
    878c:	1ad3      	subs	r3, r2, r3
    878e:	9314      	str	r3, [sp, #80]	; 0x50
    8790:	e649      	b.n	8426 <_svfprintf_r+0x15de>
    8792:	3301      	adds	r3, #1
    8794:	4912      	ldr	r1, [pc, #72]	; (87e0 <_svfprintf_r+0x1998>)
    8796:	f8ca 5004 	str.w	r5, [sl, #4]
    879a:	442a      	add	r2, r5
    879c:	2b07      	cmp	r3, #7
    879e:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    87a2:	f8ca 1000 	str.w	r1, [sl]
    87a6:	f77f ac33 	ble.w	8010 <_svfprintf_r+0x11c8>
    87aa:	ee1b 1a10 	vmov	r1, s22
    87ae:	aa24      	add	r2, sp, #144	; 0x90
    87b0:	4658      	mov	r0, fp
    87b2:	f003 fa45 	bl	bc40 <__ssprint_r>
    87b6:	2800      	cmp	r0, #0
    87b8:	f47e afab 	bne.w	7712 <_svfprintf_r+0x8ca>
    87bc:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    87c0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    87c4:	e426      	b.n	8014 <_svfprintf_r+0x11cc>
    87c6:	1c59      	adds	r1, r3, #1
    87c8:	4658      	mov	r0, fp
    87ca:	f7fa fe6b 	bl	34a4 <_malloc_r>
    87ce:	4604      	mov	r4, r0
    87d0:	b350      	cbz	r0, 8828 <_svfprintf_r+0x19e0>
    87d2:	9007      	str	r0, [sp, #28]
    87d4:	e754      	b.n	8680 <_svfprintf_r+0x1838>
    87d6:	bf00      	nop
    87d8:	200008ec 	.word	0x200008ec
    87dc:	200008d8 	.word	0x200008d8
    87e0:	20007810 	.word	0x20007810
    87e4:	66666667 	.word	0x66666667
    87e8:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
    87ec:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    87f0:	f890 c00f 	ldrb.w	ip, [r0, #15]
    87f4:	4561      	cmp	r1, ip
    87f6:	4613      	mov	r3, r2
    87f8:	d10a      	bne.n	8810 <_svfprintf_r+0x19c8>
    87fa:	f04f 0e30 	mov.w	lr, #48	; 0x30
    87fe:	f803 ec01 	strb.w	lr, [r3, #-1]
    8802:	9b22      	ldr	r3, [sp, #136]	; 0x88
    8804:	1e59      	subs	r1, r3, #1
    8806:	9122      	str	r1, [sp, #136]	; 0x88
    8808:	f813 1c01 	ldrb.w	r1, [r3, #-1]
    880c:	458c      	cmp	ip, r1
    880e:	d0f6      	beq.n	87fe <_svfprintf_r+0x19b6>
    8810:	2939      	cmp	r1, #57	; 0x39
    8812:	bf16      	itet	ne
    8814:	3101      	addne	r1, #1
    8816:	7a81      	ldrbeq	r1, [r0, #10]
    8818:	b2c9      	uxtbne	r1, r1
    881a:	f803 1c01 	strb.w	r1, [r3, #-1]
    881e:	e6ae      	b.n	857e <_svfprintf_r+0x1736>
    8820:	2300      	movs	r3, #0
    8822:	4690      	mov	r8, r2
    8824:	9307      	str	r3, [sp, #28]
    8826:	e760      	b.n	86ea <_svfprintf_r+0x18a2>
    8828:	ee1b 2a10 	vmov	r2, s22
    882c:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    8830:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8834:	8193      	strh	r3, [r2, #12]
    8836:	f7fe bc16 	b.w	7066 <_svfprintf_r+0x21e>
    883a:	07f5      	lsls	r5, r6, #31
    883c:	f57f adfe 	bpl.w	843c <_svfprintf_r+0x15f4>
    8840:	e5f8      	b.n	8434 <_svfprintf_r+0x15ec>
    8842:	9305      	str	r3, [sp, #20]
    8844:	e6ce      	b.n	85e4 <_svfprintf_r+0x179c>
    8846:	eeb5 ab40 	vcmp.f64	d10, #0.0
    884a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    884e:	f43f ad8b 	beq.w	8368 <_svfprintf_r+0x1520>
    8852:	f1c2 0201 	rsb	r2, r2, #1
    8856:	921b      	str	r2, [sp, #108]	; 0x6c
    8858:	e587      	b.n	836a <_svfprintf_r+0x1522>
    885a:	2367      	movs	r3, #103	; 0x67
    885c:	930b      	str	r3, [sp, #44]	; 0x2c
    885e:	9913      	ldr	r1, [sp, #76]	; 0x4c
    8860:	780b      	ldrb	r3, [r1, #0]
    8862:	2bff      	cmp	r3, #255	; 0xff
    8864:	d079      	beq.n	895a <_svfprintf_r+0x1b12>
    8866:	2500      	movs	r5, #0
    8868:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    886a:	4628      	mov	r0, r5
    886c:	e003      	b.n	8876 <_svfprintf_r+0x1a2e>
    886e:	3001      	adds	r0, #1
    8870:	3101      	adds	r1, #1
    8872:	2bff      	cmp	r3, #255	; 0xff
    8874:	d008      	beq.n	8888 <_svfprintf_r+0x1a40>
    8876:	4293      	cmp	r3, r2
    8878:	da06      	bge.n	8888 <_svfprintf_r+0x1a40>
    887a:	1ad2      	subs	r2, r2, r3
    887c:	784b      	ldrb	r3, [r1, #1]
    887e:	2b00      	cmp	r3, #0
    8880:	d1f5      	bne.n	886e <_svfprintf_r+0x1a26>
    8882:	780b      	ldrb	r3, [r1, #0]
    8884:	3501      	adds	r5, #1
    8886:	e7f4      	b.n	8872 <_svfprintf_r+0x1a2a>
    8888:	920c      	str	r2, [sp, #48]	; 0x30
    888a:	9113      	str	r1, [sp, #76]	; 0x4c
    888c:	900d      	str	r0, [sp, #52]	; 0x34
    888e:	950f      	str	r5, [sp, #60]	; 0x3c
    8890:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    8892:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8894:	9916      	ldr	r1, [sp, #88]	; 0x58
    8896:	4413      	add	r3, r2
    8898:	9a05      	ldr	r2, [sp, #20]
    889a:	fb01 2303 	mla	r3, r1, r3, r2
    889e:	9305      	str	r3, [sp, #20]
    88a0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    88a4:	9302      	str	r3, [sp, #8]
    88a6:	e5d5      	b.n	8454 <_svfprintf_r+0x160c>
    88a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    88aa:	18d3      	adds	r3, r2, r3
    88ac:	4419      	add	r1, r3
    88ae:	2366      	movs	r3, #102	; 0x66
    88b0:	9105      	str	r1, [sp, #20]
    88b2:	930b      	str	r3, [sp, #44]	; 0x2c
    88b4:	e72d      	b.n	8712 <_svfprintf_r+0x18ca>
    88b6:	f1c3 0301 	rsb	r3, r3, #1
    88ba:	441a      	add	r2, r3
    88bc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    88c0:	9302      	str	r3, [sp, #8]
    88c2:	2367      	movs	r3, #103	; 0x67
    88c4:	9205      	str	r2, [sp, #20]
    88c6:	930b      	str	r3, [sp, #44]	; 0x2c
    88c8:	e698      	b.n	85fc <_svfprintf_r+0x17b4>
    88ca:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    88ce:	e759      	b.n	8784 <_svfprintf_r+0x193c>
    88d0:	9b03      	ldr	r3, [sp, #12]
    88d2:	f8dd 9008 	ldr.w	r9, [sp, #8]
    88d6:	f8dd 801c 	ldr.w	r8, [sp, #28]
    88da:	9305      	str	r3, [sp, #20]
    88dc:	e4b4      	b.n	8248 <_svfprintf_r+0x1400>
    88de:	ee18 3a90 	vmov	r3, s17
    88e2:	2b00      	cmp	r3, #0
    88e4:	bfb4      	ite	lt
    88e6:	212d      	movlt	r1, #45	; 0x2d
    88e8:	f89d 1067 	ldrbge.w	r1, [sp, #103]	; 0x67
    88ec:	4c25      	ldr	r4, [pc, #148]	; (8984 <_svfprintf_r+0x1b3c>)
    88ee:	4b26      	ldr	r3, [pc, #152]	; (8988 <_svfprintf_r+0x1b40>)
    88f0:	bfb8      	it	lt
    88f2:	f88d 1067 	strblt.w	r1, [sp, #103]	; 0x67
    88f6:	f028 0880 	bic.w	r8, r8, #128	; 0x80
    88fa:	f7fe bc79 	b.w	71f0 <_svfprintf_r+0x3a8>
    88fe:	9b03      	ldr	r3, [sp, #12]
    8900:	9302      	str	r3, [sp, #8]
    8902:	9305      	str	r3, [sp, #20]
    8904:	2373      	movs	r3, #115	; 0x73
    8906:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    890a:	9003      	str	r0, [sp, #12]
    890c:	900f      	str	r0, [sp, #60]	; 0x3c
    890e:	900d      	str	r0, [sp, #52]	; 0x34
    8910:	930b      	str	r3, [sp, #44]	; 0x2c
    8912:	f7fe bc7a 	b.w	720a <_svfprintf_r+0x3c2>
    8916:	2302      	movs	r3, #2
    8918:	9314      	str	r3, [sp, #80]	; 0x50
    891a:	e584      	b.n	8426 <_svfprintf_r+0x15de>
    891c:	9a03      	ldr	r2, [sp, #12]
    891e:	4313      	orrs	r3, r2
    8920:	d105      	bne.n	892e <_svfprintf_r+0x1ae6>
    8922:	2301      	movs	r3, #1
    8924:	2266      	movs	r2, #102	; 0x66
    8926:	9302      	str	r3, [sp, #8]
    8928:	920b      	str	r2, [sp, #44]	; 0x2c
    892a:	9305      	str	r3, [sp, #20]
    892c:	e666      	b.n	85fc <_svfprintf_r+0x17b4>
    892e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8930:	3301      	adds	r3, #1
    8932:	441a      	add	r2, r3
    8934:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    8938:	9302      	str	r3, [sp, #8]
    893a:	2366      	movs	r3, #102	; 0x66
    893c:	9205      	str	r2, [sp, #20]
    893e:	930b      	str	r3, [sp, #44]	; 0x2c
    8940:	e65c      	b.n	85fc <_svfprintf_r+0x17b4>
    8942:	9a08      	ldr	r2, [sp, #32]
    8944:	f899 3001 	ldrb.w	r3, [r9, #1]
    8948:	4689      	mov	r9, r1
    894a:	f852 1b04 	ldr.w	r1, [r2], #4
    894e:	9208      	str	r2, [sp, #32]
    8950:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
    8954:	9103      	str	r1, [sp, #12]
    8956:	f7fe bad3 	b.w	6f00 <_svfprintf_r+0xb8>
    895a:	2300      	movs	r3, #0
    895c:	930f      	str	r3, [sp, #60]	; 0x3c
    895e:	930d      	str	r3, [sp, #52]	; 0x34
    8960:	e796      	b.n	8890 <_svfprintf_r+0x1a48>
    8962:	230c      	movs	r3, #12
    8964:	f8cb 3000 	str.w	r3, [fp]
    8968:	f04f 33ff 	mov.w	r3, #4294967295
    896c:	9304      	str	r3, [sp, #16]
    896e:	f7fe bb81 	b.w	7074 <_svfprintf_r+0x22c>
    8972:	ee1b 2a10 	vmov	r2, s22
    8976:	8993      	ldrh	r3, [r2, #12]
    8978:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    897c:	8193      	strh	r3, [r2, #12]
    897e:	f7fe bec8 	b.w	7712 <_svfprintf_r+0x8ca>
    8982:	bf00      	nop
    8984:	200008d0 	.word	0x200008d0
    8988:	200008d4 	.word	0x200008d4

0000898c <__ssvfscanf_r>:
    898c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8990:	ed2d 8b02 	vpush	{d8}
    8994:	f5ad 7d37 	sub.w	sp, sp, #732	; 0x2dc
    8998:	468b      	mov	fp, r1
    899a:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
    899e:	af02      	add	r7, sp, #8
    89a0:	048c      	lsls	r4, r1, #18
    89a2:	4681      	mov	r9, r0
    89a4:	64fa      	str	r2, [r7, #76]	; 0x4c
    89a6:	633b      	str	r3, [r7, #48]	; 0x30
    89a8:	d409      	bmi.n	89be <__ssvfscanf_r+0x32>
    89aa:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
    89ae:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
    89b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    89b6:	f8ab 100c 	strh.w	r1, [fp, #12]
    89ba:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
    89be:	2300      	movs	r3, #0
    89c0:	461c      	mov	r4, r3
    89c2:	2208      	movs	r2, #8
    89c4:	4619      	mov	r1, r3
    89c6:	f107 0058 	add.w	r0, r7, #88	; 0x58
    89ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    89cc:	46a2      	mov	sl, r4
    89ce:	f7fc fc0d 	bl	51ec <memset>
    89d2:	643c      	str	r4, [r7, #64]	; 0x40
    89d4:	627c      	str	r4, [r7, #36]	; 0x24
    89d6:	63bc      	str	r4, [r7, #56]	; 0x38
    89d8:	647c      	str	r4, [r7, #68]	; 0x44
    89da:	4b83      	ldr	r3, [pc, #524]	; (8be8 <__ssvfscanf_r+0x25c>)
    89dc:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
    89e0:	f7fc fcce 	bl	5380 <__locale_mb_cur_max>
    89e4:	f107 0258 	add.w	r2, r7, #88	; 0x58
    89e8:	4603      	mov	r3, r0
    89ea:	9200      	str	r2, [sp, #0]
    89ec:	f107 0154 	add.w	r1, r7, #84	; 0x54
    89f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    89f2:	4648      	mov	r0, r9
    89f4:	47a0      	blx	r4
    89f6:	1e05      	subs	r5, r0, #0
    89f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    89fa:	db33      	blt.n	8a64 <__ssvfscanf_r+0xd8>
    89fc:	442b      	add	r3, r5
    89fe:	64fb      	str	r3, [r7, #76]	; 0x4c
    8a00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    8a02:	462e      	mov	r6, r5
    8a04:	2b00      	cmp	r3, #0
    8a06:	f000 80b6 	beq.w	8b76 <__ssvfscanf_r+0x1ea>
    8a0a:	2d01      	cmp	r5, #1
    8a0c:	d038      	beq.n	8a80 <__ssvfscanf_r+0xf4>
    8a0e:	2b25      	cmp	r3, #37	; 0x25
    8a10:	d040      	beq.n	8a94 <__ssvfscanf_r+0x108>
    8a12:	2d00      	cmp	r5, #0
    8a14:	d0e1      	beq.n	89da <__ssvfscanf_r+0x4e>
    8a16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8a18:	1b9e      	subs	r6, r3, r6
    8a1a:	f8db 3004 	ldr.w	r3, [fp, #4]
    8a1e:	1e74      	subs	r4, r6, #1
    8a20:	2b00      	cmp	r3, #0
    8a22:	f340 8098 	ble.w	8b56 <__ssvfscanf_r+0x1ca>
    8a26:	f8db 1000 	ldr.w	r1, [fp]
    8a2a:	f894 c001 	ldrb.w	ip, [r4, #1]
    8a2e:	f891 e000 	ldrb.w	lr, [r1]
    8a32:	1ca3      	adds	r3, r4, #2
    8a34:	eb0a 0003 	add.w	r0, sl, r3
    8a38:	45e6      	cmp	lr, ip
    8a3a:	f101 0101 	add.w	r1, r1, #1
    8a3e:	eba3 0206 	sub.w	r2, r3, r6
    8a42:	f104 0401 	add.w	r4, r4, #1
    8a46:	eba0 0006 	sub.w	r0, r0, r6
    8a4a:	f040 8094 	bne.w	8b76 <__ssvfscanf_r+0x1ea>
    8a4e:	f8db 3004 	ldr.w	r3, [fp, #4]
    8a52:	f8cb 1000 	str.w	r1, [fp]
    8a56:	3b01      	subs	r3, #1
    8a58:	42aa      	cmp	r2, r5
    8a5a:	f8cb 3004 	str.w	r3, [fp, #4]
    8a5e:	dbdf      	blt.n	8a20 <__ssvfscanf_r+0x94>
    8a60:	4682      	mov	sl, r0
    8a62:	e7ba      	b.n	89da <__ssvfscanf_r+0x4e>
    8a64:	3301      	adds	r3, #1
    8a66:	64fb      	str	r3, [r7, #76]	; 0x4c
    8a68:	2208      	movs	r2, #8
    8a6a:	f64f 73fd 	movw	r3, #65533	; 0xfffd
    8a6e:	2100      	movs	r1, #0
    8a70:	f107 0058 	add.w	r0, r7, #88	; 0x58
    8a74:	657b      	str	r3, [r7, #84]	; 0x54
    8a76:	f7fc fbb9 	bl	51ec <memset>
    8a7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    8a7c:	2b00      	cmp	r3, #0
    8a7e:	d07a      	beq.n	8b76 <__ssvfscanf_r+0x1ea>
    8a80:	4e5a      	ldr	r6, [pc, #360]	; (8bec <__ssvfscanf_r+0x260>)
    8a82:	5cf2      	ldrb	r2, [r6, r3]
    8a84:	0710      	lsls	r0, r2, #28
    8a86:	f100 851c 	bmi.w	94c2 <__ssvfscanf_r+0xb36>
    8a8a:	2b25      	cmp	r3, #37	; 0x25
    8a8c:	f040 8086 	bne.w	8b9c <__ssvfscanf_r+0x210>
    8a90:	2501      	movs	r5, #1
    8a92:	462e      	mov	r6, r5
    8a94:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    8a96:	2400      	movs	r4, #0
    8a98:	7802      	ldrb	r2, [r0, #0]
    8a9a:	46a0      	mov	r8, r4
    8a9c:	f1a2 0325 	sub.w	r3, r2, #37	; 0x25
    8aa0:	1c41      	adds	r1, r0, #1
    8aa2:	2b55      	cmp	r3, #85	; 0x55
    8aa4:	d867      	bhi.n	8b76 <__ssvfscanf_r+0x1ea>
    8aa6:	e8df f013 	tbh	[pc, r3, lsl #1]
    8aaa:	070a      	.short	0x070a
    8aac:	00660066 	.word	0x00660066
    8ab0:	00660066 	.word	0x00660066
    8ab4:	00660701 	.word	0x00660701
    8ab8:	00660066 	.word	0x00660066
    8abc:	00660066 	.word	0x00660066
    8ac0:	060c060c 	.word	0x060c060c
    8ac4:	060c060c 	.word	0x060c060c
    8ac8:	060c060c 	.word	0x060c060c
    8acc:	060c060c 	.word	0x060c060c
    8ad0:	060c060c 	.word	0x060c060c
    8ad4:	00660066 	.word	0x00660066
    8ad8:	00660066 	.word	0x00660066
    8adc:	00660066 	.word	0x00660066
    8ae0:	06180066 	.word	0x06180066
    8ae4:	048e0066 	.word	0x048e0066
    8ae8:	061804c9 	.word	0x061804c9
    8aec:	06180618 	.word	0x06180618
    8af0:	00660066 	.word	0x00660066
    8af4:	00660066 	.word	0x00660066
    8af8:	00660082 	.word	0x00660082
    8afc:	04bf0066 	.word	0x04bf0066
    8b00:	00660066 	.word	0x00660066
    8b04:	00890066 	.word	0x00890066
    8b08:	00660066 	.word	0x00660066
    8b0c:	00660066 	.word	0x00660066
    8b10:	0066066b 	.word	0x0066066b
    8b14:	06dd0066 	.word	0x06dd0066
    8b18:	00660066 	.word	0x00660066
    8b1c:	00660066 	.word	0x00660066
    8b20:	06180066 	.word	0x06180066
    8b24:	04900066 	.word	0x04900066
    8b28:	061804cb 	.word	0x061804cb
    8b2c:	06180618 	.word	0x06180618
    8b30:	06d206be 	.word	0x06d206be
    8b34:	00660082 	.word	0x00660082
    8b38:	06f306e7 	.word	0x06f306e7
    8b3c:	04c106ac 	.word	0x04c106ac
    8b40:	006606da 	.word	0x006606da
    8b44:	008b0066 	.word	0x008b0066
    8b48:	06ca007d 	.word	0x06ca007d
    8b4c:	00660066 	.word	0x00660066
    8b50:	0066066b 	.word	0x0066066b
    8b54:	007d      	.short	0x007d
    8b56:	4659      	mov	r1, fp
    8b58:	4648      	mov	r0, r9
    8b5a:	f003 f931 	bl	bdc0 <__ssrefill_r>
    8b5e:	2800      	cmp	r0, #0
    8b60:	f43f af61 	beq.w	8a26 <__ssvfscanf_r+0x9a>
    8b64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8b66:	2b00      	cmp	r3, #0
    8b68:	f001 8052 	beq.w	9c10 <__ssvfscanf_r+0x1284>
    8b6c:	f8bb 300c 	ldrh.w	r3, [fp, #12]
    8b70:	065a      	lsls	r2, r3, #25
    8b72:	f101 804d 	bmi.w	9c10 <__ssvfscanf_r+0x1284>
    8b76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    8b78:	b143      	cbz	r3, 8b8c <__ssvfscanf_r+0x200>
    8b7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    8b7c:	f8d3 8000 	ldr.w	r8, [r3]
    8b80:	f1b8 0f00 	cmp.w	r8, #0
    8b84:	d002      	beq.n	8b8c <__ssvfscanf_r+0x200>
    8b86:	4640      	mov	r0, r8
    8b88:	f7fa fc84 	bl	3494 <free>
    8b8c:	6c78      	ldr	r0, [r7, #68]	; 0x44
    8b8e:	f507 7735 	add.w	r7, r7, #724	; 0x2d4
    8b92:	46bd      	mov	sp, r7
    8b94:	ecbd 8b02 	vpop	{d8}
    8b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8b9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8b9e:	2501      	movs	r5, #1
    8ba0:	1e5e      	subs	r6, r3, #1
    8ba2:	e73a      	b.n	8a1a <__ssvfscanf_r+0x8e>
    8ba4:	0723      	lsls	r3, r4, #28
    8ba6:	d1e6      	bne.n	8b76 <__ssvfscanf_r+0x1ea>
    8ba8:	7842      	ldrb	r2, [r0, #1]
    8baa:	4608      	mov	r0, r1
    8bac:	e776      	b.n	8a9c <__ssvfscanf_r+0x110>
    8bae:	0722      	lsls	r2, r4, #28
    8bb0:	d1e1      	bne.n	8b76 <__ssvfscanf_r+0x1ea>
    8bb2:	7842      	ldrb	r2, [r0, #1]
    8bb4:	f044 0402 	orr.w	r4, r4, #2
    8bb8:	4608      	mov	r0, r1
    8bba:	e76f      	b.n	8a9c <__ssvfscanf_r+0x110>
    8bbc:	f044 0401 	orr.w	r4, r4, #1
    8bc0:	64f9      	str	r1, [r7, #76]	; 0x4c
    8bc2:	2502      	movs	r5, #2
    8bc4:	f8db 3004 	ldr.w	r3, [fp, #4]
    8bc8:	2b00      	cmp	r3, #0
    8bca:	f340 8408 	ble.w	93de <__ssvfscanf_r+0xa52>
    8bce:	0660      	lsls	r0, r4, #25
    8bd0:	f140 840f 	bpl.w	93f2 <__ssvfscanf_r+0xa66>
    8bd4:	1e6b      	subs	r3, r5, #1
    8bd6:	2b03      	cmp	r3, #3
    8bd8:	f201 80eb 	bhi.w	9db2 <__ssvfscanf_r+0x1426>
    8bdc:	e8df f013 	tbh	[pc, r3, lsl #1]
    8be0:	01f1027b 	.word	0x01f1027b
    8be4:	0008014b 	.word	0x0008014b
    8be8:	20007a38 	.word	0x20007a38
    8bec:	20000731 	.word	0x20000731
    8bf0:	4648      	mov	r0, r9
    8bf2:	f001 fcaf 	bl	a554 <_localeconv_r>
    8bf6:	6803      	ldr	r3, [r0, #0]
    8bf8:	623b      	str	r3, [r7, #32]
    8bfa:	f108 33ff 	add.w	r3, r8, #4294967295
    8bfe:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
    8c02:	f240 855a 	bls.w	96ba <__ssvfscanf_r+0xd2e>
    8c06:	f46f 75ae 	mvn.w	r5, #348	; 0x15c
    8c0a:	eb08 0305 	add.w	r3, r8, r5
    8c0e:	613b      	str	r3, [r7, #16]
    8c10:	f240 185d 	movw	r8, #349	; 0x15d
    8c14:	2600      	movs	r6, #0
    8c16:	f507 73b8 	add.w	r3, r7, #368	; 0x170
    8c1a:	ee08 9a10 	vmov	s16, r9
    8c1e:	e9c7 6605 	strd	r6, r6, [r7, #20]
    8c22:	63fe      	str	r6, [r7, #60]	; 0x3c
    8c24:	637e      	str	r6, [r7, #52]	; 0x34
    8c26:	61fe      	str	r6, [r7, #28]
    8c28:	64be      	str	r6, [r7, #72]	; 0x48
    8c2a:	f444 64f0 	orr.w	r4, r4, #1920	; 0x780
    8c2e:	62bb      	str	r3, [r7, #40]	; 0x28
    8c30:	461d      	mov	r5, r3
    8c32:	4646      	mov	r6, r8
    8c34:	f8db 1000 	ldr.w	r1, [fp]
    8c38:	780a      	ldrb	r2, [r1, #0]
    8c3a:	f1a2 032b 	sub.w	r3, r2, #43	; 0x2b
    8c3e:	2b4e      	cmp	r3, #78	; 0x4e
    8c40:	d850      	bhi.n	8ce4 <__ssvfscanf_r+0x358>
    8c42:	e8df f013 	tbh	[pc, r3, lsl #1]
    8c46:	037e      	.short	0x037e
    8c48:	037e004f 	.word	0x037e004f
    8c4c:	004f004f 	.word	0x004f004f
    8c50:	00a600a3 	.word	0x00a600a3
    8c54:	00a600a6 	.word	0x00a600a6
    8c58:	00a600a6 	.word	0x00a600a6
    8c5c:	00a600a6 	.word	0x00a600a6
    8c60:	00a600a6 	.word	0x00a600a6
    8c64:	004f004f 	.word	0x004f004f
    8c68:	004f004f 	.word	0x004f004f
    8c6c:	004f004f 	.word	0x004f004f
    8c70:	0374004f 	.word	0x0374004f
    8c74:	030b030b 	.word	0x030b030b
    8c78:	039e030b 	.word	0x039e030b
    8c7c:	004f0394 	.word	0x004f0394
    8c80:	0384004f 	.word	0x0384004f
    8c84:	004f004f 	.word	0x004f004f
    8c88:	004f004f 	.word	0x004f004f
    8c8c:	004f035d 	.word	0x004f035d
    8c90:	004f033a 	.word	0x004f033a
    8c94:	004f004f 	.word	0x004f004f
    8c98:	004f0333 	.word	0x004f0333
    8c9c:	004f004f 	.word	0x004f004f
    8ca0:	036d031e 	.word	0x036d031e
    8ca4:	004f004f 	.word	0x004f004f
    8ca8:	004f004f 	.word	0x004f004f
    8cac:	004f004f 	.word	0x004f004f
    8cb0:	0374004f 	.word	0x0374004f
    8cb4:	030b030b 	.word	0x030b030b
    8cb8:	039e030b 	.word	0x039e030b
    8cbc:	004f0394 	.word	0x004f0394
    8cc0:	0384004f 	.word	0x0384004f
    8cc4:	004f004f 	.word	0x004f004f
    8cc8:	004f004f 	.word	0x004f004f
    8ccc:	004f035d 	.word	0x004f035d
    8cd0:	004f033a 	.word	0x004f033a
    8cd4:	004f004f 	.word	0x004f004f
    8cd8:	004f0333 	.word	0x004f0333
    8cdc:	004f004f 	.word	0x004f004f
    8ce0:	036d031e 	.word	0x036d031e
    8ce4:	05a0      	lsls	r0, r4, #22
    8ce6:	d56f      	bpl.n	8dc8 <__ssvfscanf_r+0x43c>
    8ce8:	6a38      	ldr	r0, [r7, #32]
    8cea:	7803      	ldrb	r3, [r0, #0]
    8cec:	4293      	cmp	r3, r2
    8cee:	d16b      	bne.n	8dc8 <__ssvfscanf_r+0x43c>
    8cf0:	e9c7 4502 	strd	r4, r5, [r7, #8]
    8cf4:	607e      	str	r6, [r7, #4]
    8cf6:	4681      	mov	r9, r0
    8cf8:	ee18 6a10 	vmov	r6, s16
    8cfc:	f04f 0800 	mov.w	r8, #0
    8d00:	465c      	mov	r4, fp
    8d02:	e007      	b.n	8d14 <__ssvfscanf_r+0x388>
    8d04:	6021      	str	r1, [r4, #0]
    8d06:	f891 e000 	ldrb.w	lr, [r1]
    8d0a:	f899 0000 	ldrb.w	r0, [r9]
    8d0e:	4586      	cmp	lr, r0
    8d10:	d11c      	bne.n	8d4c <__ssvfscanf_r+0x3c0>
    8d12:	46da      	mov	sl, fp
    8d14:	f819 0f01 	ldrb.w	r0, [r9, #1]!
    8d18:	4645      	mov	r5, r8
    8d1a:	f10a 0b01 	add.w	fp, sl, #1
    8d1e:	3101      	adds	r1, #1
    8d20:	f108 0801 	add.w	r8, r8, #1
    8d24:	2800      	cmp	r0, #0
    8d26:	f000 8664 	beq.w	99f2 <__ssvfscanf_r+0x1066>
    8d2a:	6860      	ldr	r0, [r4, #4]
    8d2c:	3801      	subs	r0, #1
    8d2e:	2800      	cmp	r0, #0
    8d30:	6060      	str	r0, [r4, #4]
    8d32:	dce7      	bgt.n	8d04 <__ssvfscanf_r+0x378>
    8d34:	4621      	mov	r1, r4
    8d36:	4630      	mov	r0, r6
    8d38:	f003 f842 	bl	bdc0 <__ssrefill_r>
    8d3c:	b930      	cbnz	r0, 8d4c <__ssvfscanf_r+0x3c0>
    8d3e:	6821      	ldr	r1, [r4, #0]
    8d40:	f899 0000 	ldrb.w	r0, [r9]
    8d44:	f891 e000 	ldrb.w	lr, [r1]
    8d48:	4586      	cmp	lr, r0
    8d4a:	d0e2      	beq.n	8d12 <__ssvfscanf_r+0x386>
    8d4c:	46a3      	mov	fp, r4
    8d4e:	6a3a      	ldr	r2, [r7, #32]
    8d50:	68bc      	ldr	r4, [r7, #8]
    8d52:	613d      	str	r5, [r7, #16]
    8d54:	462b      	mov	r3, r5
    8d56:	46b1      	mov	r9, r6
    8d58:	6cbe      	ldr	r6, [r7, #72]	; 0x48
    8d5a:	68fd      	ldr	r5, [r7, #12]
    8d5c:	64bd      	str	r5, [r7, #72]	; 0x48
    8d5e:	3301      	adds	r3, #1
    8d60:	465d      	mov	r5, fp
    8d62:	eb02 0803 	add.w	r8, r2, r3
    8d66:	46b3      	mov	fp, r6
    8d68:	4626      	mov	r6, r4
    8d6a:	4614      	mov	r4, r2
    8d6c:	f818 1d01 	ldrb.w	r1, [r8, #-1]!
    8d70:	462a      	mov	r2, r5
    8d72:	4648      	mov	r0, r9
    8d74:	f002 ffe4 	bl	bd40 <_sungetc_r>
    8d78:	4544      	cmp	r4, r8
    8d7a:	d1f7      	bne.n	8d6c <__ssvfscanf_r+0x3e0>
    8d7c:	693b      	ldr	r3, [r7, #16]
    8d7e:	4634      	mov	r4, r6
    8d80:	ebaa 0a03 	sub.w	sl, sl, r3
    8d84:	465e      	mov	r6, fp
    8d86:	46ab      	mov	fp, r5
    8d88:	6cbd      	ldr	r5, [r7, #72]	; 0x48
    8d8a:	e020      	b.n	8dce <__ssvfscanf_r+0x442>
    8d8c:	05e0      	lsls	r0, r4, #23
    8d8e:	f100 8501 	bmi.w	9794 <__ssvfscanf_r+0xe08>
    8d92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    8d94:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    8d96:	42d9      	cmn	r1, r3
    8d98:	d116      	bne.n	8dc8 <__ssvfscanf_r+0x43c>
    8d9a:	f424 74c0 	bic.w	r4, r4, #384	; 0x180
    8d9e:	f805 2b01 	strb.w	r2, [r5], #1
    8da2:	3e01      	subs	r6, #1
    8da4:	f8db 3004 	ldr.w	r3, [fp, #4]
    8da8:	3b01      	subs	r3, #1
    8daa:	2b00      	cmp	r3, #0
    8dac:	f10a 0a01 	add.w	sl, sl, #1
    8db0:	f8cb 3004 	str.w	r3, [fp, #4]
    8db4:	f340 836f 	ble.w	9496 <__ssvfscanf_r+0xb0a>
    8db8:	f8db 3000 	ldr.w	r3, [fp]
    8dbc:	3301      	adds	r3, #1
    8dbe:	f8cb 3000 	str.w	r3, [fp]
    8dc2:	2e00      	cmp	r6, #0
    8dc4:	f47f af36 	bne.w	8c34 <__ssvfscanf_r+0x2a8>
    8dc8:	6cbe      	ldr	r6, [r7, #72]	; 0x48
    8dca:	ee18 9a10 	vmov	r9, s16
    8dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8dd0:	2b00      	cmp	r3, #0
    8dd2:	f040 82dc 	bne.w	938e <__ssvfscanf_r+0xa02>
    8dd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8dd8:	3b01      	subs	r3, #1
    8dda:	2b01      	cmp	r3, #1
    8ddc:	f241 8016 	bls.w	9e0c <__ssvfscanf_r+0x1480>
    8de0:	1e73      	subs	r3, r6, #1
    8de2:	2b06      	cmp	r3, #6
    8de4:	f240 8627 	bls.w	9a36 <__ssvfscanf_r+0x10aa>
    8de8:	05e3      	lsls	r3, r4, #23
    8dea:	d51b      	bpl.n	8e24 <__ssvfscanf_r+0x498>
    8dec:	0566      	lsls	r6, r4, #21
    8dee:	f101 80b5 	bmi.w	9f5c <__ssvfscanf_r+0x15d0>
    8df2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
    8df6:	2965      	cmp	r1, #101	; 0x65
    8df8:	f105 33ff 	add.w	r3, r5, #4294967295
    8dfc:	f10a 36ff 	add.w	r6, sl, #4294967295
    8e00:	d00a      	beq.n	8e18 <__ssvfscanf_r+0x48c>
    8e02:	2945      	cmp	r1, #69	; 0x45
    8e04:	d008      	beq.n	8e18 <__ssvfscanf_r+0x48c>
    8e06:	465a      	mov	r2, fp
    8e08:	4648      	mov	r0, r9
    8e0a:	f002 ff99 	bl	bd40 <_sungetc_r>
    8e0e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
    8e12:	f1aa 0602 	sub.w	r6, sl, #2
    8e16:	1eab      	subs	r3, r5, #2
    8e18:	465a      	mov	r2, fp
    8e1a:	4648      	mov	r0, r9
    8e1c:	46b2      	mov	sl, r6
    8e1e:	461d      	mov	r5, r3
    8e20:	f002 ff8e 	bl	bd40 <_sungetc_r>
    8e24:	f014 0210 	ands.w	r2, r4, #16
    8e28:	f47f add7 	bne.w	89da <__ssvfscanf_r+0x4e>
    8e2c:	f404 63c0 	and.w	r3, r4, #1536	; 0x600
    8e30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    8e34:	702a      	strb	r2, [r5, #0]
    8e36:	f000 84d2 	beq.w	97de <__ssvfscanf_r+0xe52>
    8e3a:	69bb      	ldr	r3, [r7, #24]
    8e3c:	2b00      	cmp	r3, #0
    8e3e:	f040 872c 	bne.w	9c9a <__ssvfscanf_r+0x130e>
    8e42:	4648      	mov	r0, r9
    8e44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    8e46:	2200      	movs	r2, #0
    8e48:	f7fb ff1a 	bl	4c80 <_strtod_r>
    8e4c:	07e0      	lsls	r0, r4, #31
    8e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    8e50:	f100 85c9 	bmi.w	99e6 <__ssvfscanf_r+0x105a>
    8e54:	07a1      	lsls	r1, r4, #30
    8e56:	f100 85c6 	bmi.w	99e6 <__ssvfscanf_r+0x105a>
    8e5a:	eeb4 0b40 	vcmp.f64	d0, d0
    8e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8e62:	f853 4b04 	ldr.w	r4, [r3], #4
    8e66:	f180 86f4 	bvs.w	9c52 <__ssvfscanf_r+0x12c6>
    8e6a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    8e6e:	633b      	str	r3, [r7, #48]	; 0x30
    8e70:	ed84 0a00 	vstr	s0, [r4]
    8e74:	e3a2      	b.n	95bc <__ssvfscanf_r+0xc30>
    8e76:	f108 33ff 	add.w	r3, r8, #4294967295
    8e7a:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
    8e7e:	f240 83a2 	bls.w	95c6 <__ssvfscanf_r+0xc3a>
    8e82:	f46f 72ae 	mvn.w	r2, #348	; 0x15c
    8e86:	eb08 0302 	add.w	r3, r8, r2
    8e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
    8e8c:	f240 185d 	movw	r8, #349	; 0x15d
    8e90:	f507 73b8 	add.w	r3, r7, #368	; 0x170
    8e94:	2200      	movs	r2, #0
    8e96:	6bbe      	ldr	r6, [r7, #56]	; 0x38
    8e98:	62bb      	str	r3, [r7, #40]	; 0x28
    8e9a:	4659      	mov	r1, fp
    8e9c:	f444 6458 	orr.w	r4, r4, #3456	; 0xd80
    8ea0:	46d3      	mov	fp, sl
    8ea2:	461d      	mov	r5, r3
    8ea4:	4692      	mov	sl, r2
    8ea6:	680a      	ldr	r2, [r1, #0]
    8ea8:	7810      	ldrb	r0, [r2, #0]
    8eaa:	f1a0 032b 	sub.w	r3, r0, #43	; 0x2b
    8eae:	2b4d      	cmp	r3, #77	; 0x4d
    8eb0:	d860      	bhi.n	8f74 <__ssvfscanf_r+0x5e8>
    8eb2:	e8df f013 	tbh	[pc, r3, lsl #1]
    8eb6:	0282      	.short	0x0282
    8eb8:	0282005f 	.word	0x0282005f
    8ebc:	005f005f 	.word	0x005f005f
    8ec0:	01e002cd 	.word	0x01e002cd
    8ec4:	01e001e0 	.word	0x01e001e0
    8ec8:	01e001e0 	.word	0x01e001e0
    8ecc:	01e001e0 	.word	0x01e001e0
    8ed0:	026f026f 	.word	0x026f026f
    8ed4:	005f005f 	.word	0x005f005f
    8ed8:	005f005f 	.word	0x005f005f
    8edc:	005f005f 	.word	0x005f005f
    8ee0:	004e005f 	.word	0x004e005f
    8ee4:	004e004e 	.word	0x004e004e
    8ee8:	004e004e 	.word	0x004e004e
    8eec:	005f004e 	.word	0x005f004e
    8ef0:	005f005f 	.word	0x005f005f
    8ef4:	005f005f 	.word	0x005f005f
    8ef8:	005f005f 	.word	0x005f005f
    8efc:	005f005f 	.word	0x005f005f
    8f00:	005f005f 	.word	0x005f005f
    8f04:	005f005f 	.word	0x005f005f
    8f08:	005f005f 	.word	0x005f005f
    8f0c:	005f005f 	.word	0x005f005f
    8f10:	005f0276 	.word	0x005f0276
    8f14:	005f005f 	.word	0x005f005f
    8f18:	005f005f 	.word	0x005f005f
    8f1c:	005f005f 	.word	0x005f005f
    8f20:	004e005f 	.word	0x004e005f
    8f24:	004e004e 	.word	0x004e004e
    8f28:	004e004e 	.word	0x004e004e
    8f2c:	005f004e 	.word	0x005f004e
    8f30:	005f005f 	.word	0x005f005f
    8f34:	005f005f 	.word	0x005f005f
    8f38:	005f005f 	.word	0x005f005f
    8f3c:	005f005f 	.word	0x005f005f
    8f40:	005f005f 	.word	0x005f005f
    8f44:	005f005f 	.word	0x005f005f
    8f48:	005f005f 	.word	0x005f005f
    8f4c:	005f005f 	.word	0x005f005f
    8f50:	0276      	.short	0x0276
    8f52:	2e0a      	cmp	r6, #10
    8f54:	dd0e      	ble.n	8f74 <__ssvfscanf_r+0x5e8>
    8f56:	f424 6438 	bic.w	r4, r4, #2944	; 0xb80
    8f5a:	684b      	ldr	r3, [r1, #4]
    8f5c:	f805 0b01 	strb.w	r0, [r5], #1
    8f60:	3b01      	subs	r3, #1
    8f62:	2b00      	cmp	r3, #0
    8f64:	604b      	str	r3, [r1, #4]
    8f66:	f340 828d 	ble.w	9484 <__ssvfscanf_r+0xaf8>
    8f6a:	3201      	adds	r2, #1
    8f6c:	600a      	str	r2, [r1, #0]
    8f6e:	f1b8 0801 	subs.w	r8, r8, #1
    8f72:	d198      	bne.n	8ea6 <__ssvfscanf_r+0x51a>
    8f74:	05e0      	lsls	r0, r4, #23
    8f76:	46d0      	mov	r8, sl
    8f78:	63be      	str	r6, [r7, #56]	; 0x38
    8f7a:	46da      	mov	sl, fp
    8f7c:	468b      	mov	fp, r1
    8f7e:	d507      	bpl.n	8f90 <__ssvfscanf_r+0x604>
    8f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8f82:	429d      	cmp	r5, r3
    8f84:	f200 8422 	bhi.w	97cc <__ssvfscanf_r+0xe40>
    8f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8f8a:	429d      	cmp	r5, r3
    8f8c:	f43f adf3 	beq.w	8b76 <__ssvfscanf_r+0x1ea>
    8f90:	f014 0210 	ands.w	r2, r4, #16
    8f94:	d110      	bne.n	8fb8 <__ssvfscanf_r+0x62c>
    8f96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    8f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8f9a:	6afe      	ldr	r6, [r7, #44]	; 0x2c
    8f9c:	702a      	strb	r2, [r5, #0]
    8f9e:	4648      	mov	r0, r9
    8fa0:	47b0      	blx	r6
    8fa2:	06a1      	lsls	r1, r4, #26
    8fa4:	f140 8408 	bpl.w	97b8 <__ssvfscanf_r+0xe2c>
    8fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    8faa:	f853 2b04 	ldr.w	r2, [r3], #4
    8fae:	6010      	str	r0, [r2, #0]
    8fb0:	633b      	str	r3, [r7, #48]	; 0x30
    8fb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8fb4:	3301      	adds	r3, #1
    8fb6:	647b      	str	r3, [r7, #68]	; 0x44
    8fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8fba:	1aed      	subs	r5, r5, r3
    8fbc:	4445      	add	r5, r8
    8fbe:	44aa      	add	sl, r5
    8fc0:	e50b      	b.n	89da <__ssvfscanf_r+0x4e>
    8fc2:	f1b8 0f00 	cmp.w	r8, #0
    8fc6:	bf08      	it	eq
    8fc8:	f04f 38ff 	moveq.w	r8, #4294967295
    8fcc:	07e0      	lsls	r0, r4, #31
    8fce:	f140 8295 	bpl.w	94fc <__ssvfscanf_r+0xb70>
    8fd2:	f014 0310 	ands.w	r3, r4, #16
    8fd6:	637b      	str	r3, [r7, #52]	; 0x34
    8fd8:	f040 8474 	bne.w	98c4 <__ssvfscanf_r+0xf38>
    8fdc:	0621      	lsls	r1, r4, #24
    8fde:	f140 8666 	bpl.w	9cae <__ssvfscanf_r+0x1322>
    8fe2:	6b3c      	ldr	r4, [r7, #48]	; 0x30
    8fe4:	f854 3b04 	ldr.w	r3, [r4], #4
    8fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
    8fea:	2b00      	cmp	r3, #0
    8fec:	f43f adc3 	beq.w	8b76 <__ssvfscanf_r+0x1ea>
    8ff0:	2080      	movs	r0, #128	; 0x80
    8ff2:	f7fa fa47 	bl	3484 <malloc>
    8ff6:	64b8      	str	r0, [r7, #72]	; 0x48
    8ff8:	2800      	cmp	r0, #0
    8ffa:	f000 8778 	beq.w	9eee <__ssvfscanf_r+0x1562>
    8ffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9000:	6cba      	ldr	r2, [r7, #72]	; 0x48
    9002:	601a      	str	r2, [r3, #0]
    9004:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    9006:	88d5      	ldrh	r5, [r2, #6]
    9008:	8893      	ldrh	r3, [r2, #4]
    900a:	429d      	cmp	r5, r3
    900c:	f080 8552 	bcs.w	9ab4 <__ssvfscanf_r+0x1128>
    9010:	6810      	ldr	r0, [r2, #0]
    9012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9014:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
    9018:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    901a:	633c      	str	r4, [r7, #48]	; 0x30
    901c:	3501      	adds	r5, #1
    901e:	80dd      	strh	r5, [r3, #6]
    9020:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    9022:	62bb      	str	r3, [r7, #40]	; 0x28
    9024:	2320      	movs	r3, #32
    9026:	623b      	str	r3, [r7, #32]
    9028:	f8db 3000 	ldr.w	r3, [fp]
    902c:	4eb1      	ldr	r6, [pc, #708]	; (92f4 <__ssvfscanf_r+0x968>)
    902e:	781b      	ldrb	r3, [r3, #0]
    9030:	5cf3      	ldrb	r3, [r6, r3]
    9032:	f013 0308 	ands.w	r3, r3, #8
    9036:	f040 84bb 	bne.w	99b0 <__ssvfscanf_r+0x1024>
    903a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
    903c:	627e      	str	r6, [r7, #36]	; 0x24
    903e:	461d      	mov	r5, r3
    9040:	f7fc f99e 	bl	5380 <__locale_mb_cur_max>
    9044:	42a8      	cmp	r0, r5
    9046:	f43f ad8d 	beq.w	8b64 <__ssvfscanf_r+0x1d8>
    904a:	e9db 3200 	ldrd	r3, r2, [fp]
    904e:	f507 70b8 	add.w	r0, r7, #368	; 0x170
    9052:	f813 1b01 	ldrb.w	r1, [r3], #1
    9056:	5541      	strb	r1, [r0, r5]
    9058:	3a01      	subs	r2, #1
    905a:	2c03      	cmp	r4, #3
    905c:	e9cb 3200 	strd	r3, r2, [fp]
    9060:	f105 0501 	add.w	r5, r5, #1
    9064:	f107 0668 	add.w	r6, r7, #104	; 0x68
    9068:	d102      	bne.n	9070 <__ssvfscanf_r+0x6e4>
    906a:	6833      	ldr	r3, [r6, #0]
    906c:	2b04      	cmp	r3, #4
    906e:	d004      	beq.n	907a <__ssvfscanf_r+0x6ee>
    9070:	2208      	movs	r2, #8
    9072:	2100      	movs	r1, #0
    9074:	4630      	mov	r0, r6
    9076:	f7fc f8b9 	bl	51ec <memset>
    907a:	f507 72b8 	add.w	r2, r7, #368	; 0x170
    907e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    9080:	9600      	str	r6, [sp, #0]
    9082:	462b      	mov	r3, r5
    9084:	4648      	mov	r0, r9
    9086:	f002 fc87 	bl	b998 <_mbrtowc_r>
    908a:	1c42      	adds	r2, r0, #1
    908c:	4604      	mov	r4, r0
    908e:	f43f ad69 	beq.w	8b64 <__ssvfscanf_r+0x1d8>
    9092:	2800      	cmp	r0, #0
    9094:	f040 8478 	bne.w	9988 <__ssvfscanf_r+0xffc>
    9098:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    909a:	6018      	str	r0, [r3, #0]
    909c:	f002 fcd8 	bl	ba50 <iswspace>
    90a0:	2800      	cmp	r0, #0
    90a2:	f040 865c 	bne.w	9d5e <__ssvfscanf_r+0x13d2>
    90a6:	44aa      	add	sl, r5
    90a8:	f108 38ff 	add.w	r8, r8, #4294967295
    90ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    90ae:	2b00      	cmp	r3, #0
    90b0:	f040 8633 	bne.w	9d1a <__ssvfscanf_r+0x138e>
    90b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    90b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    90b8:	3304      	adds	r3, #4
    90ba:	64bb      	str	r3, [r7, #72]	; 0x48
    90bc:	2a00      	cmp	r2, #0
    90be:	f000 862c 	beq.w	9d1a <__ssvfscanf_r+0x138e>
    90c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
    90c4:	1a9d      	subs	r5, r3, r2
    90c6:	6a3b      	ldr	r3, [r7, #32]
    90c8:	ebb3 0fa5 	cmp.w	r3, r5, asr #2
    90cc:	f240 8756 	bls.w	9f7c <__ssvfscanf_r+0x15f0>
    90d0:	6b7d      	ldr	r5, [r7, #52]	; 0x34
    90d2:	f000 bc5c 	b.w	998e <__ssvfscanf_r+0x1002>
    90d6:	f1b8 0f00 	cmp.w	r8, #0
    90da:	bf08      	it	eq
    90dc:	f04f 38ff 	moveq.w	r8, #4294967295
    90e0:	07e0      	lsls	r0, r4, #31
    90e2:	f140 827b 	bpl.w	95dc <__ssvfscanf_r+0xc50>
    90e6:	f014 0310 	ands.w	r3, r4, #16
    90ea:	62bb      	str	r3, [r7, #40]	; 0x28
    90ec:	f040 83f3 	bne.w	98d6 <__ssvfscanf_r+0xf4a>
    90f0:	0621      	lsls	r1, r4, #24
    90f2:	f140 85ed 	bpl.w	9cd0 <__ssvfscanf_r+0x1344>
    90f6:	6b3e      	ldr	r6, [r7, #48]	; 0x30
    90f8:	f856 3b04 	ldr.w	r3, [r6], #4
    90fc:	623b      	str	r3, [r7, #32]
    90fe:	2b00      	cmp	r3, #0
    9100:	f43f ad39 	beq.w	8b76 <__ssvfscanf_r+0x1ea>
    9104:	2080      	movs	r0, #128	; 0x80
    9106:	f7fa f9bd 	bl	3484 <malloc>
    910a:	4604      	mov	r4, r0
    910c:	2800      	cmp	r0, #0
    910e:	f000 86ee 	beq.w	9eee <__ssvfscanf_r+0x1562>
    9112:	6a3b      	ldr	r3, [r7, #32]
    9114:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    9116:	6018      	str	r0, [r3, #0]
    9118:	88d5      	ldrh	r5, [r2, #6]
    911a:	8893      	ldrh	r3, [r2, #4]
    911c:	429d      	cmp	r5, r3
    911e:	f080 84dd 	bcs.w	9adc <__ssvfscanf_r+0x1150>
    9122:	6810      	ldr	r0, [r2, #0]
    9124:	6a3b      	ldr	r3, [r7, #32]
    9126:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
    912a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    912c:	633e      	str	r6, [r7, #48]	; 0x30
    912e:	3501      	adds	r5, #1
    9130:	80dd      	strh	r5, [r3, #6]
    9132:	2320      	movs	r3, #32
    9134:	61fc      	str	r4, [r7, #28]
    9136:	61bb      	str	r3, [r7, #24]
    9138:	6a7e      	ldr	r6, [r7, #36]	; 0x24
    913a:	f8c7 a03c 	str.w	sl, [r7, #60]	; 0x3c
    913e:	2500      	movs	r5, #0
    9140:	46c2      	mov	sl, r8
    9142:	46a0      	mov	r8, r4
    9144:	f7fc f91c 	bl	5380 <__locale_mb_cur_max>
    9148:	42a8      	cmp	r0, r5
    914a:	f43f ad0b 	beq.w	8b64 <__ssvfscanf_r+0x1d8>
    914e:	e9db 3200 	ldrd	r3, r2, [fp]
    9152:	f813 1b01 	ldrb.w	r1, [r3], #1
    9156:	3a01      	subs	r2, #1
    9158:	f507 70b8 	add.w	r0, r7, #368	; 0x170
    915c:	e9cb 3200 	strd	r3, r2, [fp]
    9160:	2e03      	cmp	r6, #3
    9162:	f105 0301 	add.w	r3, r5, #1
    9166:	5541      	strb	r1, [r0, r5]
    9168:	64bb      	str	r3, [r7, #72]	; 0x48
    916a:	f107 0460 	add.w	r4, r7, #96	; 0x60
    916e:	d102      	bne.n	9176 <__ssvfscanf_r+0x7ea>
    9170:	6823      	ldr	r3, [r4, #0]
    9172:	2b04      	cmp	r3, #4
    9174:	d004      	beq.n	9180 <__ssvfscanf_r+0x7f4>
    9176:	2208      	movs	r2, #8
    9178:	2100      	movs	r1, #0
    917a:	4620      	mov	r0, r4
    917c:	f7fc f836 	bl	51ec <memset>
    9180:	f507 72b8 	add.w	r2, r7, #368	; 0x170
    9184:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    9186:	9400      	str	r4, [sp, #0]
    9188:	4641      	mov	r1, r8
    918a:	4648      	mov	r0, r9
    918c:	f002 fc04 	bl	b998 <_mbrtowc_r>
    9190:	1c42      	adds	r2, r0, #1
    9192:	4606      	mov	r6, r0
    9194:	f43f ace6 	beq.w	8b64 <__ssvfscanf_r+0x1d8>
    9198:	2800      	cmp	r0, #0
    919a:	f040 82ca 	bne.w	9732 <__ssvfscanf_r+0xda6>
    919e:	f8c8 0000 	str.w	r0, [r8]
    91a2:	4605      	mov	r5, r0
    91a4:	f107 0368 	add.w	r3, r7, #104	; 0x68
    91a8:	2208      	movs	r2, #8
    91aa:	2100      	movs	r1, #0
    91ac:	4618      	mov	r0, r3
    91ae:	637b      	str	r3, [r7, #52]	; 0x34
    91b0:	f7fc f81c 	bl	51ec <memset>
    91b4:	4950      	ldr	r1, [pc, #320]	; (92f8 <__ssvfscanf_r+0x96c>)
    91b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    91b8:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    91bc:	462a      	mov	r2, r5
    91be:	4648      	mov	r0, r9
    91c0:	460d      	mov	r5, r1
    91c2:	f107 0150 	add.w	r1, r7, #80	; 0x50
    91c6:	47a8      	blx	r5
    91c8:	2801      	cmp	r0, #1
    91ca:	f000 83d5 	beq.w	9978 <__ssvfscanf_r+0xfec>
    91ce:	2200      	movs	r2, #0
    91d0:	f107 0370 	add.w	r3, r7, #112	; 0x70
    91d4:	5c9b      	ldrb	r3, [r3, r2]
    91d6:	2b00      	cmp	r3, #0
    91d8:	f000 85a1 	beq.w	9d1e <__ssvfscanf_r+0x1392>
    91dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    91de:	6cba      	ldr	r2, [r7, #72]	; 0x48
    91e0:	2e03      	cmp	r6, #3
    91e2:	4413      	add	r3, r2
    91e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    91e6:	f000 83ca 	beq.w	997e <__ssvfscanf_r+0xff2>
    91ea:	f10a 3aff 	add.w	sl, sl, #4294967295
    91ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    91f0:	b95b      	cbnz	r3, 920a <__ssvfscanf_r+0x87e>
    91f2:	6a3b      	ldr	r3, [r7, #32]
    91f4:	f108 0804 	add.w	r8, r8, #4
    91f8:	b13b      	cbz	r3, 920a <__ssvfscanf_r+0x87e>
    91fa:	69fb      	ldr	r3, [r7, #28]
    91fc:	eba8 0403 	sub.w	r4, r8, r3
    9200:	69bb      	ldr	r3, [r7, #24]
    9202:	ebb3 0fa4 	cmp.w	r3, r4, asr #2
    9206:	f240 8405 	bls.w	9a14 <__ssvfscanf_r+0x1088>
    920a:	f8db 3004 	ldr.w	r3, [fp, #4]
    920e:	2b00      	cmp	r3, #0
    9210:	f04f 0500 	mov.w	r5, #0
    9214:	f340 8296 	ble.w	9744 <__ssvfscanf_r+0xdb8>
    9218:	f1ba 0f00 	cmp.w	sl, #0
    921c:	d192      	bne.n	9144 <__ssvfscanf_r+0x7b8>
    921e:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
    9222:	627e      	str	r6, [r7, #36]	; 0x24
    9224:	4644      	mov	r4, r8
    9226:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9228:	2b00      	cmp	r3, #0
    922a:	f47f abd6 	bne.w	89da <__ssvfscanf_r+0x4e>
    922e:	6023      	str	r3, [r4, #0]
    9230:	6a3b      	ldr	r3, [r7, #32]
    9232:	2b00      	cmp	r3, #0
    9234:	f000 81c2 	beq.w	95bc <__ssvfscanf_r+0xc30>
    9238:	69fb      	ldr	r3, [r7, #28]
    923a:	69ba      	ldr	r2, [r7, #24]
    923c:	1ae1      	subs	r1, r4, r3
    923e:	108b      	asrs	r3, r1, #2
    9240:	3301      	adds	r3, #1
    9242:	429a      	cmp	r2, r3
    9244:	f240 81ba 	bls.w	95bc <__ssvfscanf_r+0xc30>
    9248:	6a3c      	ldr	r4, [r7, #32]
    924a:	3104      	adds	r1, #4
    924c:	6820      	ldr	r0, [r4, #0]
    924e:	f7fa fbe5 	bl	3a1c <realloc>
    9252:	2800      	cmp	r0, #0
    9254:	f000 81b2 	beq.w	95bc <__ssvfscanf_r+0xc30>
    9258:	6020      	str	r0, [r4, #0]
    925a:	e1af      	b.n	95bc <__ssvfscanf_r+0xc30>
    925c:	0521      	lsls	r1, r4, #20
    925e:	f57f adb3 	bpl.w	8dc8 <__ssvfscanf_r+0x43c>
    9262:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9264:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    9266:	185b      	adds	r3, r3, r1
    9268:	f47f adae 	bne.w	8dc8 <__ssvfscanf_r+0x43c>
    926c:	64bb      	str	r3, [r7, #72]	; 0x48
    926e:	f424 74c0 	bic.w	r4, r4, #384	; 0x180
    9272:	63fb      	str	r3, [r7, #60]	; 0x3c
    9274:	e593      	b.n	8d9e <__ssvfscanf_r+0x412>
    9276:	4b21      	ldr	r3, [pc, #132]	; (92fc <__ssvfscanf_r+0x970>)
    9278:	f424 6438 	bic.w	r4, r4, #2944	; 0xb80
    927c:	f933 6016 	ldrsh.w	r6, [r3, r6, lsl #1]
    9280:	e66b      	b.n	8f5a <__ssvfscanf_r+0x5ce>
    9282:	f404 6318 	and.w	r3, r4, #2432	; 0x980
    9286:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    928a:	f47f ad9d 	bne.w	8dc8 <__ssvfscanf_r+0x43c>
    928e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9290:	2b01      	cmp	r3, #1
    9292:	f47f ad99 	bne.w	8dc8 <__ssvfscanf_r+0x43c>
    9296:	2330      	movs	r3, #48	; 0x30
    9298:	f805 3b01 	strb.w	r3, [r5], #1
    929c:	f424 7480 	bic.w	r4, r4, #256	; 0x100
    92a0:	2300      	movs	r3, #0
    92a2:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
    92a6:	3e01      	subs	r6, #1
    92a8:	637b      	str	r3, [r7, #52]	; 0x34
    92aa:	e578      	b.n	8d9e <__ssvfscanf_r+0x412>
    92ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    92ae:	2b06      	cmp	r3, #6
    92b0:	f040 8574 	bne.w	9d9c <__ssvfscanf_r+0x1410>
    92b4:	2307      	movs	r3, #7
    92b6:	64bb      	str	r3, [r7, #72]	; 0x48
    92b8:	e571      	b.n	8d9e <__ssvfscanf_r+0x412>
    92ba:	0523      	lsls	r3, r4, #20
    92bc:	f57f ad84 	bpl.w	8dc8 <__ssvfscanf_r+0x43c>
    92c0:	f404 63a0 	and.w	r3, r4, #1280	; 0x500
    92c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    92c8:	d005      	beq.n	92d6 <__ssvfscanf_r+0x94a>
    92ca:	0561      	lsls	r1, r4, #21
    92cc:	f57f ad7c 	bpl.w	8dc8 <__ssvfscanf_r+0x43c>
    92d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    92d2:	2b00      	cmp	r3, #0
    92d4:	d047      	beq.n	9366 <__ssvfscanf_r+0x9da>
    92d6:	05a3      	lsls	r3, r4, #22
    92d8:	d404      	bmi.n	92e4 <__ssvfscanf_r+0x958>
    92da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    92dc:	69f9      	ldr	r1, [r7, #28]
    92de:	1a5b      	subs	r3, r3, r1
    92e0:	e9c7 5305 	strd	r5, r3, [r7, #20]
    92e4:	f424 6478 	bic.w	r4, r4, #3968	; 0xf80
    92e8:	2300      	movs	r3, #0
    92ea:	f444 74c0 	orr.w	r4, r4, #384	; 0x180
    92ee:	637b      	str	r3, [r7, #52]	; 0x34
    92f0:	e555      	b.n	8d9e <__ssvfscanf_r+0x412>
    92f2:	bf00      	nop
    92f4:	20000731 	.word	0x20000731
    92f8:	20007a38 	.word	0x20007a38
    92fc:	20002360 	.word	0x20002360
    9300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9302:	2b00      	cmp	r3, #0
    9304:	f000 81ff 	beq.w	9706 <__ssvfscanf_r+0xd7a>
    9308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    930a:	2b02      	cmp	r3, #2
    930c:	f000 83b0 	beq.w	9a70 <__ssvfscanf_r+0x10e4>
    9310:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    9312:	2b01      	cmp	r3, #1
    9314:	f000 81f1 	beq.w	96fa <__ssvfscanf_r+0xd6e>
    9318:	2b04      	cmp	r3, #4
    931a:	f000 81ee 	beq.w	96fa <__ssvfscanf_r+0xd6e>
    931e:	e553      	b.n	8dc8 <__ssvfscanf_r+0x43c>
    9320:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    9322:	2b07      	cmp	r3, #7
    9324:	f040 853a 	bne.w	9d9c <__ssvfscanf_r+0x1410>
    9328:	2308      	movs	r3, #8
    932a:	64bb      	str	r3, [r7, #72]	; 0x48
    932c:	e537      	b.n	8d9e <__ssvfscanf_r+0x412>
    932e:	0520      	lsls	r0, r4, #20
    9330:	f100 81f9 	bmi.w	9726 <__ssvfscanf_r+0xd9a>
    9334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9336:	2b01      	cmp	r3, #1
    9338:	f47f ad46 	bne.w	8dc8 <__ssvfscanf_r+0x43c>
    933c:	2302      	movs	r3, #2
    933e:	63fb      	str	r3, [r7, #60]	; 0x3c
    9340:	e52d      	b.n	8d9e <__ssvfscanf_r+0x412>
    9342:	0623      	lsls	r3, r4, #24
    9344:	f57f ad40 	bpl.w	8dc8 <__ssvfscanf_r+0x43c>
    9348:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    934c:	e527      	b.n	8d9e <__ssvfscanf_r+0x412>
    934e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    9350:	2b00      	cmp	r3, #0
    9352:	f040 81cc 	bne.w	96ee <__ssvfscanf_r+0xd62>
    9356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9358:	b9b3      	cbnz	r3, 9388 <__ssvfscanf_r+0x9fc>
    935a:	f404 63e0 	and.w	r3, r4, #1792	; 0x700
    935e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
    9362:	f000 8520 	beq.w	9da6 <__ssvfscanf_r+0x141a>
    9366:	6cbe      	ldr	r6, [r7, #72]	; 0x48
    9368:	ee18 9a10 	vmov	r9, s16
    936c:	e533      	b.n	8dd6 <__ssvfscanf_r+0x44a>
    936e:	0521      	lsls	r1, r4, #20
    9370:	f100 81b7 	bmi.w	96e2 <__ssvfscanf_r+0xd56>
    9374:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    9376:	2b02      	cmp	r3, #2
    9378:	f040 8510 	bne.w	9d9c <__ssvfscanf_r+0x1410>
    937c:	2303      	movs	r3, #3
    937e:	64bb      	str	r3, [r7, #72]	; 0x48
    9380:	e50d      	b.n	8d9e <__ssvfscanf_r+0x412>
    9382:	0520      	lsls	r0, r4, #20
    9384:	d59c      	bpl.n	92c0 <__ssvfscanf_r+0x934>
    9386:	e76c      	b.n	9262 <__ssvfscanf_r+0x8d6>
    9388:	6cbe      	ldr	r6, [r7, #72]	; 0x48
    938a:	ee18 9a10 	vmov	r9, s16
    938e:	f424 7480 	bic.w	r4, r4, #256	; 0x100
    9392:	e520      	b.n	8dd6 <__ssvfscanf_r+0x44a>
    9394:	4b8d      	ldr	r3, [pc, #564]	; (95cc <__ssvfscanf_r+0xc40>)
    9396:	f933 6016 	ldrsh.w	r6, [r3, r6, lsl #1]
    939a:	2e08      	cmp	r6, #8
    939c:	f73f addb 	bgt.w	8f56 <__ssvfscanf_r+0x5ca>
    93a0:	e5e8      	b.n	8f74 <__ssvfscanf_r+0x5e8>
    93a2:	f404 63c0 	and.w	r3, r4, #1536	; 0x600
    93a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    93aa:	f47f ade3 	bne.w	8f74 <__ssvfscanf_r+0x5e8>
    93ae:	f424 7400 	bic.w	r4, r4, #512	; 0x200
    93b2:	f444 64a0 	orr.w	r4, r4, #1280	; 0x500
    93b6:	2610      	movs	r6, #16
    93b8:	e5cf      	b.n	8f5a <__ssvfscanf_r+0x5ce>
    93ba:	0623      	lsls	r3, r4, #24
    93bc:	f57f adda 	bpl.w	8f74 <__ssvfscanf_r+0x5e8>
    93c0:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    93c4:	e5c9      	b.n	8f5a <__ssvfscanf_r+0x5ce>
    93c6:	f044 0401 	orr.w	r4, r4, #1
    93ca:	f8db 3004 	ldr.w	r3, [fp, #4]
    93ce:	64f9      	str	r1, [r7, #76]	; 0x4c
    93d0:	2b00      	cmp	r3, #0
    93d2:	f044 0440 	orr.w	r4, r4, #64	; 0x40
    93d6:	f04f 0500 	mov.w	r5, #0
    93da:	f73f abf8 	bgt.w	8bce <__ssvfscanf_r+0x242>
    93de:	4659      	mov	r1, fp
    93e0:	4648      	mov	r0, r9
    93e2:	f002 fced 	bl	bdc0 <__ssrefill_r>
    93e6:	2800      	cmp	r0, #0
    93e8:	f47f abbc 	bne.w	8b64 <__ssvfscanf_r+0x1d8>
    93ec:	0660      	lsls	r0, r4, #25
    93ee:	f53f abf1 	bmi.w	8bd4 <__ssvfscanf_r+0x248>
    93f2:	f8db 2000 	ldr.w	r2, [fp]
    93f6:	4e76      	ldr	r6, [pc, #472]	; (95d0 <__ssvfscanf_r+0xc44>)
    93f8:	7813      	ldrb	r3, [r2, #0]
    93fa:	5cf3      	ldrb	r3, [r6, r3]
    93fc:	0719      	lsls	r1, r3, #28
    93fe:	f57f abe9 	bpl.w	8bd4 <__ssvfscanf_r+0x248>
    9402:	f8db 3004 	ldr.w	r3, [fp, #4]
    9406:	3b01      	subs	r3, #1
    9408:	2b00      	cmp	r3, #0
    940a:	f10a 0a01 	add.w	sl, sl, #1
    940e:	f8cb 3004 	str.w	r3, [fp, #4]
    9412:	f102 0201 	add.w	r2, r2, #1
    9416:	dd4a      	ble.n	94ae <__ssvfscanf_r+0xb22>
    9418:	f8cb 2000 	str.w	r2, [fp]
    941c:	7813      	ldrb	r3, [r2, #0]
    941e:	5cf3      	ldrb	r3, [r6, r3]
    9420:	0719      	lsls	r1, r3, #28
    9422:	f57f abd7 	bpl.w	8bd4 <__ssvfscanf_r+0x248>
    9426:	e7ec      	b.n	9402 <__ssvfscanf_r+0xa76>
    9428:	f044 0401 	orr.w	r4, r4, #1
    942c:	4b69      	ldr	r3, [pc, #420]	; (95d4 <__ssvfscanf_r+0xc48>)
    942e:	62fb      	str	r3, [r7, #44]	; 0x2c
    9430:	2308      	movs	r3, #8
    9432:	64f9      	str	r1, [r7, #76]	; 0x4c
    9434:	63bb      	str	r3, [r7, #56]	; 0x38
    9436:	2503      	movs	r5, #3
    9438:	f7ff bbc4 	b.w	8bc4 <__ssvfscanf_r+0x238>
    943c:	f044 0401 	orr.w	r4, r4, #1
    9440:	4b65      	ldr	r3, [pc, #404]	; (95d8 <__ssvfscanf_r+0xc4c>)
    9442:	62fb      	str	r3, [r7, #44]	; 0x2c
    9444:	230a      	movs	r3, #10
    9446:	64f9      	str	r1, [r7, #76]	; 0x4c
    9448:	63bb      	str	r3, [r7, #56]	; 0x38
    944a:	2503      	movs	r5, #3
    944c:	f7ff bbba 	b.w	8bc4 <__ssvfscanf_r+0x238>
    9450:	0523      	lsls	r3, r4, #20
    9452:	f57f ad82 	bpl.w	8f5a <__ssvfscanf_r+0x5ce>
    9456:	b916      	cbnz	r6, 945e <__ssvfscanf_r+0xad2>
    9458:	f444 7400 	orr.w	r4, r4, #512	; 0x200
    945c:	2608      	movs	r6, #8
    945e:	0563      	lsls	r3, r4, #21
    9460:	f100 81a6 	bmi.w	97b0 <__ssvfscanf_r+0xe24>
    9464:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9466:	f424 7460 	bic.w	r4, r4, #896	; 0x380
    946a:	b11b      	cbz	r3, 9474 <__ssvfscanf_r+0xae8>
    946c:	3b01      	subs	r3, #1
    946e:	63fb      	str	r3, [r7, #60]	; 0x3c
    9470:	f108 0801 	add.w	r8, r8, #1
    9474:	684b      	ldr	r3, [r1, #4]
    9476:	3b01      	subs	r3, #1
    9478:	2b00      	cmp	r3, #0
    947a:	f10a 0a01 	add.w	sl, sl, #1
    947e:	604b      	str	r3, [r1, #4]
    9480:	f73f ad73 	bgt.w	8f6a <__ssvfscanf_r+0x5de>
    9484:	4648      	mov	r0, r9
    9486:	64b9      	str	r1, [r7, #72]	; 0x48
    9488:	f002 fc9a 	bl	bdc0 <__ssrefill_r>
    948c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    948e:	2800      	cmp	r0, #0
    9490:	f43f ad6d 	beq.w	8f6e <__ssvfscanf_r+0x5e2>
    9494:	e56e      	b.n	8f74 <__ssvfscanf_r+0x5e8>
    9496:	ee18 0a10 	vmov	r0, s16
    949a:	4659      	mov	r1, fp
    949c:	f002 fc90 	bl	bdc0 <__ssrefill_r>
    94a0:	2800      	cmp	r0, #0
    94a2:	f47f ac91 	bne.w	8dc8 <__ssvfscanf_r+0x43c>
    94a6:	2e00      	cmp	r6, #0
    94a8:	f47f abc4 	bne.w	8c34 <__ssvfscanf_r+0x2a8>
    94ac:	e48c      	b.n	8dc8 <__ssvfscanf_r+0x43c>
    94ae:	4659      	mov	r1, fp
    94b0:	4648      	mov	r0, r9
    94b2:	f002 fc85 	bl	bdc0 <__ssrefill_r>
    94b6:	2800      	cmp	r0, #0
    94b8:	f47f ab54 	bne.w	8b64 <__ssvfscanf_r+0x1d8>
    94bc:	f8db 2000 	ldr.w	r2, [fp]
    94c0:	e79a      	b.n	93f8 <__ssvfscanf_r+0xa6c>
    94c2:	f8db 2004 	ldr.w	r2, [fp, #4]
    94c6:	e00f      	b.n	94e8 <__ssvfscanf_r+0xb5c>
    94c8:	f8db 3000 	ldr.w	r3, [fp]
    94cc:	781a      	ldrb	r2, [r3, #0]
    94ce:	5cb2      	ldrb	r2, [r6, r2]
    94d0:	0711      	lsls	r1, r2, #28
    94d2:	f103 0301 	add.w	r3, r3, #1
    94d6:	f57f aa80 	bpl.w	89da <__ssvfscanf_r+0x4e>
    94da:	f8db 2004 	ldr.w	r2, [fp, #4]
    94de:	3a01      	subs	r2, #1
    94e0:	e9cb 3200 	strd	r3, r2, [fp]
    94e4:	f10a 0a01 	add.w	sl, sl, #1
    94e8:	2a00      	cmp	r2, #0
    94ea:	dced      	bgt.n	94c8 <__ssvfscanf_r+0xb3c>
    94ec:	4659      	mov	r1, fp
    94ee:	4648      	mov	r0, r9
    94f0:	f002 fc66 	bl	bdc0 <__ssrefill_r>
    94f4:	2800      	cmp	r0, #0
    94f6:	d0e7      	beq.n	94c8 <__ssvfscanf_r+0xb3c>
    94f8:	f7ff ba6f 	b.w	89da <__ssvfscanf_r+0x4e>
    94fc:	06e1      	lsls	r1, r4, #27
    94fe:	f100 8349 	bmi.w	9b94 <__ssvfscanf_r+0x1208>
    9502:	f014 0480 	ands.w	r4, r4, #128	; 0x80
    9506:	f000 83ab 	beq.w	9c60 <__ssvfscanf_r+0x12d4>
    950a:	6b3c      	ldr	r4, [r7, #48]	; 0x30
    950c:	f854 6b04 	ldr.w	r6, [r4], #4
    9510:	64be      	str	r6, [r7, #72]	; 0x48
    9512:	2e00      	cmp	r6, #0
    9514:	f43f ab2f 	beq.w	8b76 <__ssvfscanf_r+0x1ea>
    9518:	2020      	movs	r0, #32
    951a:	f7f9 ffb3 	bl	3484 <malloc>
    951e:	4605      	mov	r5, r0
    9520:	2800      	cmp	r0, #0
    9522:	f000 8462 	beq.w	9dea <__ssvfscanf_r+0x145e>
    9526:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    9528:	6030      	str	r0, [r6, #0]
    952a:	8893      	ldrh	r3, [r2, #4]
    952c:	88d6      	ldrh	r6, [r2, #6]
    952e:	429e      	cmp	r6, r3
    9530:	f080 82a8 	bcs.w	9a84 <__ssvfscanf_r+0x10f8>
    9534:	6810      	ldr	r0, [r2, #0]
    9536:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    9538:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
    953c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    953e:	633c      	str	r4, [r7, #48]	; 0x30
    9540:	3601      	adds	r6, #1
    9542:	80de      	strh	r6, [r3, #6]
    9544:	2320      	movs	r3, #32
    9546:	63fb      	str	r3, [r7, #60]	; 0x3c
    9548:	f8db 2000 	ldr.w	r2, [fp]
    954c:	4e20      	ldr	r6, [pc, #128]	; (95d0 <__ssvfscanf_r+0xc44>)
    954e:	7811      	ldrb	r1, [r2, #0]
    9550:	5c71      	ldrb	r1, [r6, r1]
    9552:	0708      	lsls	r0, r1, #28
    9554:	f100 82ac 	bmi.w	9ab0 <__ssvfscanf_r+0x1124>
    9558:	4633      	mov	r3, r6
    955a:	462c      	mov	r4, r5
    955c:	4610      	mov	r0, r2
    955e:	462e      	mov	r6, r5
    9560:	f8db 1004 	ldr.w	r1, [fp, #4]
    9564:	6cba      	ldr	r2, [r7, #72]	; 0x48
    9566:	3901      	subs	r1, #1
    9568:	f8cb 1004 	str.w	r1, [fp, #4]
    956c:	1c41      	adds	r1, r0, #1
    956e:	f8cb 1000 	str.w	r1, [fp]
    9572:	4635      	mov	r5, r6
    9574:	7801      	ldrb	r1, [r0, #0]
    9576:	f805 1b01 	strb.w	r1, [r5], #1
    957a:	b122      	cbz	r2, 9586 <__ssvfscanf_r+0xbfa>
    957c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    957e:	1b2e      	subs	r6, r5, r4
    9580:	4296      	cmp	r6, r2
    9582:	f080 837a 	bcs.w	9c7a <__ssvfscanf_r+0x12ee>
    9586:	f1b8 0801 	subs.w	r8, r8, #1
    958a:	d00b      	beq.n	95a4 <__ssvfscanf_r+0xc18>
    958c:	f8db 1004 	ldr.w	r1, [fp, #4]
    9590:	2900      	cmp	r1, #0
    9592:	462e      	mov	r6, r5
    9594:	f340 83ae 	ble.w	9cf4 <__ssvfscanf_r+0x1368>
    9598:	f8db 0000 	ldr.w	r0, [fp]
    959c:	7801      	ldrb	r1, [r0, #0]
    959e:	5c59      	ldrb	r1, [r3, r1]
    95a0:	0709      	lsls	r1, r1, #28
    95a2:	d5dd      	bpl.n	9560 <__ssvfscanf_r+0xbd4>
    95a4:	1b29      	subs	r1, r5, r4
    95a6:	448a      	add	sl, r1
    95a8:	3101      	adds	r1, #1
    95aa:	f04f 0300 	mov.w	r3, #0
    95ae:	702b      	strb	r3, [r5, #0]
    95b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    95b2:	b11b      	cbz	r3, 95bc <__ssvfscanf_r+0xc30>
    95b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    95b6:	428b      	cmp	r3, r1
    95b8:	f200 8394 	bhi.w	9ce4 <__ssvfscanf_r+0x1358>
    95bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    95be:	3301      	adds	r3, #1
    95c0:	647b      	str	r3, [r7, #68]	; 0x44
    95c2:	f7ff ba0a 	b.w	89da <__ssvfscanf_r+0x4e>
    95c6:	2300      	movs	r3, #0
    95c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    95ca:	e461      	b.n	8e90 <__ssvfscanf_r+0x504>
    95cc:	20002360 	.word	0x20002360
    95d0:	20000731 	.word	0x20000731
    95d4:	0000b685 	.word	0x0000b685
    95d8:	00004dd1 	.word	0x00004dd1
    95dc:	06e6      	lsls	r6, r4, #27
    95de:	f100 8181 	bmi.w	98e4 <__ssvfscanf_r+0xf58>
    95e2:	f014 0480 	ands.w	r4, r4, #128	; 0x80
    95e6:	f000 836d 	beq.w	9cc4 <__ssvfscanf_r+0x1338>
    95ea:	6b3c      	ldr	r4, [r7, #48]	; 0x30
    95ec:	f854 6b04 	ldr.w	r6, [r4], #4
    95f0:	64be      	str	r6, [r7, #72]	; 0x48
    95f2:	2e00      	cmp	r6, #0
    95f4:	f43f aabf 	beq.w	8b76 <__ssvfscanf_r+0x1ea>
    95f8:	2020      	movs	r0, #32
    95fa:	f7f9 ff43 	bl	3484 <malloc>
    95fe:	4605      	mov	r5, r0
    9600:	2800      	cmp	r0, #0
    9602:	f000 83f2 	beq.w	9dea <__ssvfscanf_r+0x145e>
    9606:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    9608:	6030      	str	r0, [r6, #0]
    960a:	8893      	ldrh	r3, [r2, #4]
    960c:	88d6      	ldrh	r6, [r2, #6]
    960e:	429e      	cmp	r6, r3
    9610:	f080 827a 	bcs.w	9b08 <__ssvfscanf_r+0x117c>
    9614:	6810      	ldr	r0, [r2, #0]
    9616:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    9618:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
    961c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    961e:	633c      	str	r4, [r7, #48]	; 0x30
    9620:	3601      	adds	r6, #1
    9622:	80de      	strh	r6, [r3, #6]
    9624:	2420      	movs	r4, #32
    9626:	f8db 2000 	ldr.w	r2, [fp]
    962a:	f107 0370 	add.w	r3, r7, #112	; 0x70
    962e:	4619      	mov	r1, r3
    9630:	7813      	ldrb	r3, [r2, #0]
    9632:	5ccb      	ldrb	r3, [r1, r3]
    9634:	2b00      	cmp	r3, #0
    9636:	f43f aa9e 	beq.w	8b76 <__ssvfscanf_r+0x1ea>
    963a:	ee08 9a10 	vmov	s16, r9
    963e:	f8d7 9048 	ldr.w	r9, [r7, #72]	; 0x48
    9642:	f8c7 a03c 	str.w	sl, [r7, #60]	; 0x3c
    9646:	462e      	mov	r6, r5
    9648:	46a2      	mov	sl, r4
    964a:	4610      	mov	r0, r2
    964c:	460c      	mov	r4, r1
    964e:	f8db 1004 	ldr.w	r1, [fp, #4]
    9652:	1c43      	adds	r3, r0, #1
    9654:	3901      	subs	r1, #1
    9656:	e9cb 3100 	strd	r3, r1, [fp]
    965a:	4629      	mov	r1, r5
    965c:	7800      	ldrb	r0, [r0, #0]
    965e:	f801 0b01 	strb.w	r0, [r1], #1
    9662:	f1b9 0f00 	cmp.w	r9, #0
    9666:	d002      	beq.n	966e <__ssvfscanf_r+0xce2>
    9668:	1b8d      	subs	r5, r1, r6
    966a:	4555      	cmp	r5, sl
    966c:	d27a      	bcs.n	9764 <__ssvfscanf_r+0xdd8>
    966e:	460d      	mov	r5, r1
    9670:	f1b8 0801 	subs.w	r8, r8, #1
    9674:	d00a      	beq.n	968c <__ssvfscanf_r+0xd00>
    9676:	f8db 1004 	ldr.w	r1, [fp, #4]
    967a:	2900      	cmp	r1, #0
    967c:	f340 816a 	ble.w	9954 <__ssvfscanf_r+0xfc8>
    9680:	f8db 0000 	ldr.w	r0, [fp]
    9684:	7801      	ldrb	r1, [r0, #0]
    9686:	5c61      	ldrb	r1, [r4, r1]
    9688:	2900      	cmp	r1, #0
    968a:	d1e0      	bne.n	964e <__ssvfscanf_r+0xcc2>
    968c:	4654      	mov	r4, sl
    968e:	ee18 9a10 	vmov	r9, s16
    9692:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
    9696:	1bae      	subs	r6, r5, r6
    9698:	f43f aa6d 	beq.w	8b76 <__ssvfscanf_r+0x1ea>
    969c:	f04f 0300 	mov.w	r3, #0
    96a0:	702b      	strb	r3, [r5, #0]
    96a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    96a4:	b11b      	cbz	r3, 96ae <__ssvfscanf_r+0xd22>
    96a6:	1c71      	adds	r1, r6, #1
    96a8:	428c      	cmp	r4, r1
    96aa:	f200 832d 	bhi.w	9d08 <__ssvfscanf_r+0x137c>
    96ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    96b0:	3301      	adds	r3, #1
    96b2:	44b2      	add	sl, r6
    96b4:	647b      	str	r3, [r7, #68]	; 0x44
    96b6:	f7ff b990 	b.w	89da <__ssvfscanf_r+0x4e>
    96ba:	2300      	movs	r3, #0
    96bc:	613b      	str	r3, [r7, #16]
    96be:	f7ff baa9 	b.w	8c14 <__ssvfscanf_r+0x288>
    96c2:	f014 0f8f 	tst.w	r4, #143	; 0x8f
    96c6:	f47f aa56 	bne.w	8b76 <__ssvfscanf_r+0x1ea>
    96ca:	eb08 0888 	add.w	r8, r8, r8, lsl #2
    96ce:	eb02 0848 	add.w	r8, r2, r8, lsl #1
    96d2:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
    96d6:	f7ff ba67 	b.w	8ba8 <__ssvfscanf_r+0x21c>
    96da:	64f9      	str	r1, [r7, #76]	; 0x4c
    96dc:	2504      	movs	r5, #4
    96de:	f7ff ba71 	b.w	8bc4 <__ssvfscanf_r+0x238>
    96e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    96e4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    96e6:	185b      	adds	r3, r3, r1
    96e8:	f47f ae44 	bne.w	9374 <__ssvfscanf_r+0x9e8>
    96ec:	e5be      	b.n	926c <__ssvfscanf_r+0x8e0>
    96ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    96f0:	2b03      	cmp	r3, #3
    96f2:	d002      	beq.n	96fa <__ssvfscanf_r+0xd6e>
    96f4:	2b05      	cmp	r3, #5
    96f6:	f47f ab67 	bne.w	8dc8 <__ssvfscanf_r+0x43c>
    96fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    96fc:	3301      	adds	r3, #1
    96fe:	b2db      	uxtb	r3, r3
    9700:	64bb      	str	r3, [r7, #72]	; 0x48
    9702:	f7ff bb4c 	b.w	8d9e <__ssvfscanf_r+0x412>
    9706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9708:	2b00      	cmp	r3, #0
    970a:	f47f ae01 	bne.w	9310 <__ssvfscanf_r+0x984>
    970e:	f404 63e0 	and.w	r3, r4, #1792	; 0x700
    9712:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
    9716:	f47f adfb 	bne.w	9310 <__ssvfscanf_r+0x984>
    971a:	2301      	movs	r3, #1
    971c:	f424 64f0 	bic.w	r4, r4, #1920	; 0x780
    9720:	63fb      	str	r3, [r7, #60]	; 0x3c
    9722:	f7ff bb3c 	b.w	8d9e <__ssvfscanf_r+0x412>
    9726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9728:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    972a:	185b      	adds	r3, r3, r1
    972c:	f47f ae02 	bne.w	9334 <__ssvfscanf_r+0x9a8>
    9730:	e59c      	b.n	926c <__ssvfscanf_r+0x8e0>
    9732:	1c83      	adds	r3, r0, #2
    9734:	f040 845b 	bne.w	9fee <__ssvfscanf_r+0x1662>
    9738:	f8db 3004 	ldr.w	r3, [fp, #4]
    973c:	6cbd      	ldr	r5, [r7, #72]	; 0x48
    973e:	2b00      	cmp	r3, #0
    9740:	f73f ad00 	bgt.w	9144 <__ssvfscanf_r+0x7b8>
    9744:	4659      	mov	r1, fp
    9746:	4648      	mov	r0, r9
    9748:	f002 fb3a 	bl	bdc0 <__ssrefill_r>
    974c:	2800      	cmp	r0, #0
    974e:	f43f ad63 	beq.w	9218 <__ssvfscanf_r+0x88c>
    9752:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
    9756:	627e      	str	r6, [r7, #36]	; 0x24
    9758:	4644      	mov	r4, r8
    975a:	2d00      	cmp	r5, #0
    975c:	f43f ad63 	beq.w	9226 <__ssvfscanf_r+0x89a>
    9760:	f7ff ba00 	b.w	8b64 <__ssvfscanf_r+0x1d8>
    9764:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
    9768:	4630      	mov	r0, r6
    976a:	4651      	mov	r1, sl
    976c:	f7fa f956 	bl	3a1c <realloc>
    9770:	4606      	mov	r6, r0
    9772:	2800      	cmp	r0, #0
    9774:	f000 8339 	beq.w	9dea <__ssvfscanf_r+0x145e>
    9778:	4405      	add	r5, r0
    977a:	f8c9 0000 	str.w	r0, [r9]
    977e:	e777      	b.n	9670 <__ssvfscanf_r+0xce4>
    9780:	f444 7400 	orr.w	r4, r4, #512	; 0x200
    9784:	4bbc      	ldr	r3, [pc, #752]	; (9a78 <__ssvfscanf_r+0x10ec>)
    9786:	62fb      	str	r3, [r7, #44]	; 0x2c
    9788:	2310      	movs	r3, #16
    978a:	64f9      	str	r1, [r7, #76]	; 0x4c
    978c:	63bb      	str	r3, [r7, #56]	; 0x38
    978e:	2503      	movs	r5, #3
    9790:	f7ff ba18 	b.w	8bc4 <__ssvfscanf_r+0x238>
    9794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9796:	3301      	adds	r3, #1
    9798:	637b      	str	r3, [r7, #52]	; 0x34
    979a:	693b      	ldr	r3, [r7, #16]
    979c:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    97a0:	2b00      	cmp	r3, #0
    97a2:	f43f aafe 	beq.w	8da2 <__ssvfscanf_r+0x416>
    97a6:	693b      	ldr	r3, [r7, #16]
    97a8:	3b01      	subs	r3, #1
    97aa:	613b      	str	r3, [r7, #16]
    97ac:	f7ff bafa 	b.w	8da4 <__ssvfscanf_r+0x418>
    97b0:	f424 64b0 	bic.w	r4, r4, #1408	; 0x580
    97b4:	f7ff bbd1 	b.w	8f5a <__ssvfscanf_r+0x5ce>
    97b8:	0722      	lsls	r2, r4, #28
    97ba:	f140 81c7 	bpl.w	9b4c <__ssvfscanf_r+0x11c0>
    97be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    97c0:	f853 2b04 	ldr.w	r2, [r3], #4
    97c4:	633b      	str	r3, [r7, #48]	; 0x30
    97c6:	7010      	strb	r0, [r2, #0]
    97c8:	f7ff bbf3 	b.w	8fb2 <__ssvfscanf_r+0x626>
    97cc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
    97d0:	465a      	mov	r2, fp
    97d2:	4648      	mov	r0, r9
    97d4:	3d01      	subs	r5, #1
    97d6:	f002 fab3 	bl	bd40 <_sungetc_r>
    97da:	f7ff bbd5 	b.w	8f88 <__ssvfscanf_r+0x5fc>
    97de:	69fb      	ldr	r3, [r7, #28]
    97e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    97e2:	4293      	cmp	r3, r2
    97e4:	f43f ab2d 	beq.w	8e42 <__ssvfscanf_r+0x4b6>
    97e8:	1a9a      	subs	r2, r3, r2
    97ea:	f207 23c3 	addw	r3, r7, #707	; 0x2c3
    97ee:	429d      	cmp	r5, r3
    97f0:	bf28      	it	cs
    97f2:	f207 25c2 	addwcs	r5, r7, #706	; 0x2c2
    97f6:	49a1      	ldr	r1, [pc, #644]	; (9a7c <__ssvfscanf_r+0x10f0>)
    97f8:	4628      	mov	r0, r5
    97fa:	f000 fe59 	bl	a4b0 <sprintf>
    97fe:	f7ff bb20 	b.w	8e42 <__ssvfscanf_r+0x4b6>
    9802:	06e2      	lsls	r2, r4, #27
    9804:	f100 8131 	bmi.w	9a6a <__ssvfscanf_r+0x10de>
    9808:	0723      	lsls	r3, r4, #28
    980a:	f100 81ba 	bmi.w	9b82 <__ssvfscanf_r+0x11f6>
    980e:	0766      	lsls	r6, r4, #29
    9810:	f140 82b4 	bpl.w	9d7c <__ssvfscanf_r+0x13f0>
    9814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    9816:	64f9      	str	r1, [r7, #76]	; 0x4c
    9818:	f853 2b04 	ldr.w	r2, [r3], #4
    981c:	633b      	str	r3, [r7, #48]	; 0x30
    981e:	f8a2 a000 	strh.w	sl, [r2]
    9822:	f7ff b8da 	b.w	89da <__ssvfscanf_r+0x4e>
    9826:	0723      	lsls	r3, r4, #28
    9828:	f47f a9a5 	bne.w	8b76 <__ssvfscanf_r+0x1ea>
    982c:	7842      	ldrb	r2, [r0, #1]
    982e:	2a68      	cmp	r2, #104	; 0x68
    9830:	f000 8186 	beq.w	9b40 <__ssvfscanf_r+0x11b4>
    9834:	f044 0404 	orr.w	r4, r4, #4
    9838:	4608      	mov	r0, r1
    983a:	f7ff b92f 	b.w	8a9c <__ssvfscanf_r+0x110>
    983e:	4b8e      	ldr	r3, [pc, #568]	; (9a78 <__ssvfscanf_r+0x10ec>)
    9840:	62fb      	str	r3, [r7, #44]	; 0x2c
    9842:	230a      	movs	r3, #10
    9844:	64f9      	str	r1, [r7, #76]	; 0x4c
    9846:	63bb      	str	r3, [r7, #56]	; 0x38
    9848:	2503      	movs	r5, #3
    984a:	f7ff b9bb 	b.w	8bc4 <__ssvfscanf_r+0x238>
    984e:	4b8c      	ldr	r3, [pc, #560]	; (9a80 <__ssvfscanf_r+0x10f4>)
    9850:	62fb      	str	r3, [r7, #44]	; 0x2c
    9852:	2300      	movs	r3, #0
    9854:	64f9      	str	r1, [r7, #76]	; 0x4c
    9856:	63bb      	str	r3, [r7, #56]	; 0x38
    9858:	2503      	movs	r5, #3
    985a:	f7ff b9b3 	b.w	8bc4 <__ssvfscanf_r+0x238>
    985e:	f444 7408 	orr.w	r4, r4, #544	; 0x220
    9862:	e78f      	b.n	9784 <__ssvfscanf_r+0xdf8>
    9864:	f107 0070 	add.w	r0, r7, #112	; 0x70
    9868:	f000 fdde 	bl	a428 <__sccl>
    986c:	f044 0440 	orr.w	r4, r4, #64	; 0x40
    9870:	64f8      	str	r0, [r7, #76]	; 0x4c
    9872:	2501      	movs	r5, #1
    9874:	f7ff b9a6 	b.w	8bc4 <__ssvfscanf_r+0x238>
    9878:	0722      	lsls	r2, r4, #28
    987a:	f47f a97c 	bne.w	8b76 <__ssvfscanf_r+0x1ea>
    987e:	7842      	ldrb	r2, [r0, #1]
    9880:	2a6c      	cmp	r2, #108	; 0x6c
    9882:	f000 8157 	beq.w	9b34 <__ssvfscanf_r+0x11a8>
    9886:	f044 0401 	orr.w	r4, r4, #1
    988a:	4608      	mov	r0, r1
    988c:	f7ff b906 	b.w	8a9c <__ssvfscanf_r+0x110>
    9890:	f014 038f 	ands.w	r3, r4, #143	; 0x8f
    9894:	f47f a96f 	bne.w	8b76 <__ssvfscanf_r+0x1ea>
    9898:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    989a:	2a00      	cmp	r2, #0
    989c:	f000 81e7 	beq.w	9c6e <__ssvfscanf_r+0x12e2>
    98a0:	7842      	ldrb	r2, [r0, #1]
    98a2:	f044 0480 	orr.w	r4, r4, #128	; 0x80
    98a6:	4608      	mov	r0, r1
    98a8:	f7ff b8f8 	b.w	8a9c <__ssvfscanf_r+0x110>
    98ac:	ea58 0804 	orrs.w	r8, r8, r4
    98b0:	f47f a961 	bne.w	8b76 <__ssvfscanf_r+0x1ea>
    98b4:	7842      	ldrb	r2, [r0, #1]
    98b6:	2410      	movs	r4, #16
    98b8:	4608      	mov	r0, r1
    98ba:	f7ff b8ef 	b.w	8a9c <__ssvfscanf_r+0x110>
    98be:	64f9      	str	r1, [r7, #76]	; 0x4c
    98c0:	f7ff b8a7 	b.w	8a12 <__ssvfscanf_r+0x86>
    98c4:	2300      	movs	r3, #0
    98c6:	623b      	str	r3, [r7, #32]
    98c8:	62bb      	str	r3, [r7, #40]	; 0x28
    98ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    98cc:	f107 0354 	add.w	r3, r7, #84	; 0x54
    98d0:	64bb      	str	r3, [r7, #72]	; 0x48
    98d2:	f7ff bba9 	b.w	9028 <__ssvfscanf_r+0x69c>
    98d6:	2300      	movs	r3, #0
    98d8:	e9c7 3306 	strd	r3, r3, [r7, #24]
    98dc:	623b      	str	r3, [r7, #32]
    98de:	f107 0454 	add.w	r4, r7, #84	; 0x54
    98e2:	e429      	b.n	9138 <__ssvfscanf_r+0x7ac>
    98e4:	f8db 3000 	ldr.w	r3, [fp]
    98e8:	f107 0270 	add.w	r2, r7, #112	; 0x70
    98ec:	4611      	mov	r1, r2
    98ee:	781a      	ldrb	r2, [r3, #0]
    98f0:	5c8a      	ldrb	r2, [r1, r2]
    98f2:	2a00      	cmp	r2, #0
    98f4:	f43f a93f 	beq.w	8b76 <__ssvfscanf_r+0x1ea>
    98f8:	3301      	adds	r3, #1
    98fa:	f8cb 3000 	str.w	r3, [fp]
    98fe:	f8db 3004 	ldr.w	r3, [fp, #4]
    9902:	f1b8 0f01 	cmp.w	r8, #1
    9906:	f103 33ff 	add.w	r3, r3, #4294967295
    990a:	f8cb 3004 	str.w	r3, [fp, #4]
    990e:	bf18      	it	ne
    9910:	460c      	movne	r4, r1
    9912:	d114      	bne.n	993e <__ssvfscanf_r+0xfb2>
    9914:	f7ff bb53 	b.w	8fbe <__ssvfscanf_r+0x632>
    9918:	f8db 3000 	ldr.w	r3, [fp]
    991c:	781a      	ldrb	r2, [r3, #0]
    991e:	5ca2      	ldrb	r2, [r4, r2]
    9920:	3301      	adds	r3, #1
    9922:	2a00      	cmp	r2, #0
    9924:	f43f ab4b 	beq.w	8fbe <__ssvfscanf_r+0x632>
    9928:	f8cb 3000 	str.w	r3, [fp]
    992c:	f8db 3004 	ldr.w	r3, [fp, #4]
    9930:	3501      	adds	r5, #1
    9932:	3b01      	subs	r3, #1
    9934:	4545      	cmp	r5, r8
    9936:	f8cb 3004 	str.w	r3, [fp, #4]
    993a:	f43f ab40 	beq.w	8fbe <__ssvfscanf_r+0x632>
    993e:	2b00      	cmp	r3, #0
    9940:	dcea      	bgt.n	9918 <__ssvfscanf_r+0xf8c>
    9942:	4659      	mov	r1, fp
    9944:	4648      	mov	r0, r9
    9946:	f002 fa3b 	bl	bdc0 <__ssrefill_r>
    994a:	2800      	cmp	r0, #0
    994c:	d0e4      	beq.n	9918 <__ssvfscanf_r+0xf8c>
    994e:	44aa      	add	sl, r5
    9950:	f7ff b843 	b.w	89da <__ssvfscanf_r+0x4e>
    9954:	ee18 0a10 	vmov	r0, s16
    9958:	4659      	mov	r1, fp
    995a:	f002 fa31 	bl	bdc0 <__ssrefill_r>
    995e:	2800      	cmp	r0, #0
    9960:	f43f ae8e 	beq.w	9680 <__ssvfscanf_r+0xcf4>
    9964:	42b5      	cmp	r5, r6
    9966:	4654      	mov	r4, sl
    9968:	ee18 9a10 	vmov	r9, s16
    996c:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
    9970:	f47f ae91 	bne.w	9696 <__ssvfscanf_r+0xd0a>
    9974:	f7ff b8f6 	b.w	8b64 <__ssvfscanf_r+0x1d8>
    9978:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
    997c:	e428      	b.n	91d0 <__ssvfscanf_r+0x844>
    997e:	6823      	ldr	r3, [r4, #0]
    9980:	2b04      	cmp	r3, #4
    9982:	f47f ac32 	bne.w	91ea <__ssvfscanf_r+0x85e>
    9986:	e432      	b.n	91ee <__ssvfscanf_r+0x862>
    9988:	1c83      	adds	r3, r0, #2
    998a:	f040 8339 	bne.w	a000 <__ssvfscanf_r+0x1674>
    998e:	f8db 3004 	ldr.w	r3, [fp, #4]
    9992:	2b00      	cmp	r3, #0
    9994:	f340 81d7 	ble.w	9d46 <__ssvfscanf_r+0x13ba>
    9998:	f8db 3000 	ldr.w	r3, [fp]
    999c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    999e:	781b      	ldrb	r3, [r3, #0]
    99a0:	5cd3      	ldrb	r3, [r2, r3]
    99a2:	0718      	lsls	r0, r3, #28
    99a4:	d403      	bmi.n	99ae <__ssvfscanf_r+0x1022>
    99a6:	f1b8 0f00 	cmp.w	r8, #0
    99aa:	f47f ab49 	bne.w	9040 <__ssvfscanf_r+0x6b4>
    99ae:	627c      	str	r4, [r7, #36]	; 0x24
    99b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    99b2:	2b00      	cmp	r3, #0
    99b4:	f47f a811 	bne.w	89da <__ssvfscanf_r+0x4e>
    99b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
    99ba:	6013      	str	r3, [r2, #0]
    99bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    99be:	2b00      	cmp	r3, #0
    99c0:	f43f adfc 	beq.w	95bc <__ssvfscanf_r+0xc30>
    99c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    99c6:	1ad1      	subs	r1, r2, r3
    99c8:	108b      	asrs	r3, r1, #2
    99ca:	6a3a      	ldr	r2, [r7, #32]
    99cc:	3301      	adds	r3, #1
    99ce:	429a      	cmp	r2, r3
    99d0:	f67f adf4 	bls.w	95bc <__ssvfscanf_r+0xc30>
    99d4:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
    99d6:	3104      	adds	r1, #4
    99d8:	6820      	ldr	r0, [r4, #0]
    99da:	f7fa f81f 	bl	3a1c <realloc>
    99de:	2800      	cmp	r0, #0
    99e0:	f47f ac3a 	bne.w	9258 <__ssvfscanf_r+0x8cc>
    99e4:	e5ea      	b.n	95bc <__ssvfscanf_r+0xc30>
    99e6:	f853 2b04 	ldr.w	r2, [r3], #4
    99ea:	ed82 0b00 	vstr	d0, [r2]
    99ee:	633b      	str	r3, [r7, #48]	; 0x30
    99f0:	e5e4      	b.n	95bc <__ssvfscanf_r+0xc30>
    99f2:	68fd      	ldr	r5, [r7, #12]
    99f4:	6a39      	ldr	r1, [r7, #32]
    99f6:	687e      	ldr	r6, [r7, #4]
    99f8:	4628      	mov	r0, r5
    99fa:	4642      	mov	r2, r8
    99fc:	46a3      	mov	fp, r4
    99fe:	68bc      	ldr	r4, [r7, #8]
    9a00:	f000 fd76 	bl	a4f0 <stpncpy>
    9a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9a06:	61fb      	str	r3, [r7, #28]
    9a08:	f424 7420 	bic.w	r4, r4, #640	; 0x280
    9a0c:	3e01      	subs	r6, #1
    9a0e:	4605      	mov	r5, r0
    9a10:	f7ff b9c8 	b.w	8da4 <__ssvfscanf_r+0x418>
    9a14:	69f8      	ldr	r0, [r7, #28]
    9a16:	00d9      	lsls	r1, r3, #3
    9a18:	461d      	mov	r5, r3
    9a1a:	f7f9 ffff 	bl	3a1c <realloc>
    9a1e:	61f8      	str	r0, [r7, #28]
    9a20:	2800      	cmp	r0, #0
    9a22:	f000 8264 	beq.w	9eee <__ssvfscanf_r+0x1562>
    9a26:	6a3a      	ldr	r2, [r7, #32]
    9a28:	006b      	lsls	r3, r5, #1
    9a2a:	eb00 0804 	add.w	r8, r0, r4
    9a2e:	6010      	str	r0, [r2, #0]
    9a30:	61bb      	str	r3, [r7, #24]
    9a32:	f7ff bbea 	b.w	920a <__ssvfscanf_r+0x87e>
    9a36:	2e02      	cmp	r6, #2
    9a38:	f240 82c4 	bls.w	9fc4 <__ssvfscanf_r+0x1638>
    9a3c:	2e03      	cmp	r6, #3
    9a3e:	f43f a9d3 	beq.w	8de8 <__ssvfscanf_r+0x45c>
    9a42:	3e04      	subs	r6, #4
    9a44:	fa5f f886 	uxtb.w	r8, r6
    9a48:	ea6f 0308 	mvn.w	r3, r8
    9a4c:	18ee      	adds	r6, r5, r3
    9a4e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
    9a52:	465a      	mov	r2, fp
    9a54:	4648      	mov	r0, r9
    9a56:	f002 f973 	bl	bd40 <_sungetc_r>
    9a5a:	42ae      	cmp	r6, r5
    9a5c:	d1f7      	bne.n	9a4e <__ssvfscanf_r+0x10c2>
    9a5e:	f10a 3aff 	add.w	sl, sl, #4294967295
    9a62:	ebaa 0a08 	sub.w	sl, sl, r8
    9a66:	f7ff b9bf 	b.w	8de8 <__ssvfscanf_r+0x45c>
    9a6a:	64f9      	str	r1, [r7, #76]	; 0x4c
    9a6c:	f7fe bfb5 	b.w	89da <__ssvfscanf_r+0x4e>
    9a70:	2303      	movs	r3, #3
    9a72:	63fb      	str	r3, [r7, #60]	; 0x3c
    9a74:	f7ff b993 	b.w	8d9e <__ssvfscanf_r+0x412>
    9a78:	0000b685 	.word	0x0000b685
    9a7c:	20000728 	.word	0x20000728
    9a80:	00004dd1 	.word	0x00004dd1
    9a84:	f64f 72f6 	movw	r2, #65526	; 0xfff6
    9a88:	4293      	cmp	r3, r2
    9a8a:	f200 8297 	bhi.w	9fbc <__ssvfscanf_r+0x1630>
    9a8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    9a90:	3308      	adds	r3, #8
    9a92:	b29b      	uxth	r3, r3
    9a94:	6810      	ldr	r0, [r2, #0]
    9a96:	63f8      	str	r0, [r7, #60]	; 0x3c
    9a98:	0099      	lsls	r1, r3, #2
    9a9a:	637b      	str	r3, [r7, #52]	; 0x34
    9a9c:	f7f9 ffbe 	bl	3a1c <realloc>
    9aa0:	2800      	cmp	r0, #0
    9aa2:	f000 827b 	beq.w	9f9c <__ssvfscanf_r+0x1610>
    9aa6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    9aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9aaa:	8093      	strh	r3, [r2, #4]
    9aac:	6010      	str	r0, [r2, #0]
    9aae:	e542      	b.n	9536 <__ssvfscanf_r+0xbaa>
    9ab0:	2101      	movs	r1, #1
    9ab2:	e57a      	b.n	95aa <__ssvfscanf_r+0xc1e>
    9ab4:	f64f 72f6 	movw	r2, #65526	; 0xfff6
    9ab8:	4293      	cmp	r3, r2
    9aba:	f200 8293 	bhi.w	9fe4 <__ssvfscanf_r+0x1658>
    9abe:	3308      	adds	r3, #8
    9ac0:	b29e      	uxth	r6, r3
    9ac2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    9ac4:	00b1      	lsls	r1, r6, #2
    9ac6:	6818      	ldr	r0, [r3, #0]
    9ac8:	f7f9 ffa8 	bl	3a1c <realloc>
    9acc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    9ace:	2800      	cmp	r0, #0
    9ad0:	f000 823e 	beq.w	9f50 <__ssvfscanf_r+0x15c4>
    9ad4:	809e      	strh	r6, [r3, #4]
    9ad6:	6018      	str	r0, [r3, #0]
    9ad8:	f7ff ba9b 	b.w	9012 <__ssvfscanf_r+0x686>
    9adc:	f64f 72f6 	movw	r2, #65526	; 0xfff6
    9ae0:	4293      	cmp	r3, r2
    9ae2:	f200 827f 	bhi.w	9fe4 <__ssvfscanf_r+0x1658>
    9ae6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    9ae8:	3308      	adds	r3, #8
    9aea:	b29b      	uxth	r3, r3
    9aec:	0099      	lsls	r1, r3, #2
    9aee:	6810      	ldr	r0, [r2, #0]
    9af0:	64bb      	str	r3, [r7, #72]	; 0x48
    9af2:	f7f9 ff93 	bl	3a1c <realloc>
    9af6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    9af8:	2800      	cmp	r0, #0
    9afa:	f000 8228 	beq.w	9f4e <__ssvfscanf_r+0x15c2>
    9afe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    9b00:	8093      	strh	r3, [r2, #4]
    9b02:	6010      	str	r0, [r2, #0]
    9b04:	f7ff bb0e 	b.w	9124 <__ssvfscanf_r+0x798>
    9b08:	f64f 72f6 	movw	r2, #65526	; 0xfff6
    9b0c:	4293      	cmp	r3, r2
    9b0e:	f200 8255 	bhi.w	9fbc <__ssvfscanf_r+0x1630>
    9b12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    9b14:	3308      	adds	r3, #8
    9b16:	b29b      	uxth	r3, r3
    9b18:	6810      	ldr	r0, [r2, #0]
    9b1a:	63f8      	str	r0, [r7, #60]	; 0x3c
    9b1c:	0099      	lsls	r1, r3, #2
    9b1e:	637b      	str	r3, [r7, #52]	; 0x34
    9b20:	f7f9 ff7c 	bl	3a1c <realloc>
    9b24:	2800      	cmp	r0, #0
    9b26:	f000 8239 	beq.w	9f9c <__ssvfscanf_r+0x1610>
    9b2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    9b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9b2e:	8093      	strh	r3, [r2, #4]
    9b30:	6010      	str	r0, [r2, #0]
    9b32:	e570      	b.n	9616 <__ssvfscanf_r+0xc8a>
    9b34:	7882      	ldrb	r2, [r0, #2]
    9b36:	f044 0402 	orr.w	r4, r4, #2
    9b3a:	3002      	adds	r0, #2
    9b3c:	f7fe bfae 	b.w	8a9c <__ssvfscanf_r+0x110>
    9b40:	7882      	ldrb	r2, [r0, #2]
    9b42:	f044 0408 	orr.w	r4, r4, #8
    9b46:	3002      	adds	r0, #2
    9b48:	f7fe bfa8 	b.w	8a9c <__ssvfscanf_r+0x110>
    9b4c:	0763      	lsls	r3, r4, #29
    9b4e:	d458      	bmi.n	9c02 <__ssvfscanf_r+0x1276>
    9b50:	f014 0201 	ands.w	r2, r4, #1
    9b54:	f47f aa28 	bne.w	8fa8 <__ssvfscanf_r+0x61c>
    9b58:	07a6      	lsls	r6, r4, #30
    9b5a:	f57f aa25 	bpl.w	8fa8 <__ssvfscanf_r+0x61c>
    9b5e:	4bb3      	ldr	r3, [pc, #716]	; (9e2c <__ssvfscanf_r+0x14a0>)
    9b60:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    9b62:	4299      	cmp	r1, r3
    9b64:	4648      	mov	r0, r9
    9b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    9b68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    9b6a:	f000 823d 	beq.w	9fe8 <__ssvfscanf_r+0x165c>
    9b6e:	f001 fe41 	bl	b7f4 <_strtoll_r>
    9b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    9b74:	f853 2b04 	ldr.w	r2, [r3], #4
    9b78:	633b      	str	r3, [r7, #48]	; 0x30
    9b7a:	e9c2 0100 	strd	r0, r1, [r2]
    9b7e:	f7ff ba18 	b.w	8fb2 <__ssvfscanf_r+0x626>
    9b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    9b84:	64f9      	str	r1, [r7, #76]	; 0x4c
    9b86:	f853 2b04 	ldr.w	r2, [r3], #4
    9b8a:	633b      	str	r3, [r7, #48]	; 0x30
    9b8c:	f882 a000 	strb.w	sl, [r2]
    9b90:	f7fe bf23 	b.w	89da <__ssvfscanf_r+0x4e>
    9b94:	f8db 3000 	ldr.w	r3, [fp]
    9b98:	4ea5      	ldr	r6, [pc, #660]	; (9e30 <__ssvfscanf_r+0x14a4>)
    9b9a:	781a      	ldrb	r2, [r3, #0]
    9b9c:	5cb2      	ldrb	r2, [r6, r2]
    9b9e:	0712      	lsls	r2, r2, #28
    9ba0:	f53e af1b 	bmi.w	89da <__ssvfscanf_r+0x4e>
    9ba4:	3301      	adds	r3, #1
    9ba6:	f8cb 3000 	str.w	r3, [fp]
    9baa:	f8db 3004 	ldr.w	r3, [fp, #4]
    9bae:	f1b8 0f01 	cmp.w	r8, #1
    9bb2:	f103 33ff 	add.w	r3, r3, #4294967295
    9bb6:	f8cb 3004 	str.w	r3, [fp, #4]
    9bba:	bf08      	it	eq
    9bbc:	f10a 0a01 	addeq.w	sl, sl, #1
    9bc0:	f43e af0b 	beq.w	89da <__ssvfscanf_r+0x4e>
    9bc4:	2401      	movs	r4, #1
    9bc6:	e011      	b.n	9bec <__ssvfscanf_r+0x1260>
    9bc8:	f8db 3000 	ldr.w	r3, [fp]
    9bcc:	781a      	ldrb	r2, [r3, #0]
    9bce:	5cb2      	ldrb	r2, [r6, r2]
    9bd0:	0715      	lsls	r5, r2, #28
    9bd2:	f103 0301 	add.w	r3, r3, #1
    9bd6:	d411      	bmi.n	9bfc <__ssvfscanf_r+0x1270>
    9bd8:	f8cb 3000 	str.w	r3, [fp]
    9bdc:	f8db 3004 	ldr.w	r3, [fp, #4]
    9be0:	3401      	adds	r4, #1
    9be2:	3b01      	subs	r3, #1
    9be4:	4544      	cmp	r4, r8
    9be6:	f8cb 3004 	str.w	r3, [fp, #4]
    9bea:	d007      	beq.n	9bfc <__ssvfscanf_r+0x1270>
    9bec:	2b00      	cmp	r3, #0
    9bee:	dceb      	bgt.n	9bc8 <__ssvfscanf_r+0x123c>
    9bf0:	4659      	mov	r1, fp
    9bf2:	4648      	mov	r0, r9
    9bf4:	f002 f8e4 	bl	bdc0 <__ssrefill_r>
    9bf8:	2800      	cmp	r0, #0
    9bfa:	d0e5      	beq.n	9bc8 <__ssvfscanf_r+0x123c>
    9bfc:	44a2      	add	sl, r4
    9bfe:	f7fe beec 	b.w	89da <__ssvfscanf_r+0x4e>
    9c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    9c04:	f853 2b04 	ldr.w	r2, [r3], #4
    9c08:	633b      	str	r3, [r7, #48]	; 0x30
    9c0a:	8010      	strh	r0, [r2, #0]
    9c0c:	f7ff b9d1 	b.w	8fb2 <__ssvfscanf_r+0x626>
    9c10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    9c12:	2b00      	cmp	r3, #0
    9c14:	f000 816e 	beq.w	9ef4 <__ssvfscanf_r+0x1568>
    9c18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    9c1a:	f8d3 8000 	ldr.w	r8, [r3]
    9c1e:	88de      	ldrh	r6, [r3, #6]
    9c20:	b176      	cbz	r6, 9c40 <__ssvfscanf_r+0x12b4>
    9c22:	2400      	movs	r4, #0
    9c24:	f1a8 0504 	sub.w	r5, r8, #4
    9c28:	46a1      	mov	r9, r4
    9c2a:	f855 3f04 	ldr.w	r3, [r5, #4]!
    9c2e:	6818      	ldr	r0, [r3, #0]
    9c30:	f7f9 fc30 	bl	3494 <free>
    9c34:	3401      	adds	r4, #1
    9c36:	682b      	ldr	r3, [r5, #0]
    9c38:	42a6      	cmp	r6, r4
    9c3a:	f8c3 9000 	str.w	r9, [r3]
    9c3e:	d1f4      	bne.n	9c2a <__ssvfscanf_r+0x129e>
    9c40:	f04f 33ff 	mov.w	r3, #4294967295
    9c44:	647b      	str	r3, [r7, #68]	; 0x44
    9c46:	f1b8 0f00 	cmp.w	r8, #0
    9c4a:	f47e af9c 	bne.w	8b86 <__ssvfscanf_r+0x1fa>
    9c4e:	f7fe bf9d 	b.w	8b8c <__ssvfscanf_r+0x200>
    9c52:	4878      	ldr	r0, [pc, #480]	; (9e34 <__ssvfscanf_r+0x14a8>)
    9c54:	633b      	str	r3, [r7, #48]	; 0x30
    9c56:	f7fb fe2b 	bl	58b0 <nanf>
    9c5a:	ed84 0a00 	vstr	s0, [r4]
    9c5e:	e4ad      	b.n	95bc <__ssvfscanf_r+0xc30>
    9c60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    9c62:	63fc      	str	r4, [r7, #60]	; 0x3c
    9c64:	f852 5b04 	ldr.w	r5, [r2], #4
    9c68:	633a      	str	r2, [r7, #48]	; 0x30
    9c6a:	64bc      	str	r4, [r7, #72]	; 0x48
    9c6c:	e46c      	b.n	9548 <__ssvfscanf_r+0xbbc>
    9c6e:	b082      	sub	sp, #8
    9c70:	e9cd 3302 	strd	r3, r3, [sp, #8]
    9c74:	ab02      	add	r3, sp, #8
    9c76:	643b      	str	r3, [r7, #64]	; 0x40
    9c78:	e612      	b.n	98a0 <__ssvfscanf_r+0xf14>
    9c7a:	637b      	str	r3, [r7, #52]	; 0x34
    9c7c:	0053      	lsls	r3, r2, #1
    9c7e:	4620      	mov	r0, r4
    9c80:	4619      	mov	r1, r3
    9c82:	63fb      	str	r3, [r7, #60]	; 0x3c
    9c84:	f7f9 feca 	bl	3a1c <realloc>
    9c88:	4604      	mov	r4, r0
    9c8a:	2800      	cmp	r0, #0
    9c8c:	f000 80ad 	beq.w	9dea <__ssvfscanf_r+0x145e>
    9c90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    9c92:	1985      	adds	r5, r0, r6
    9c94:	6018      	str	r0, [r3, #0]
    9c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9c98:	e475      	b.n	9586 <__ssvfscanf_r+0xbfa>
    9c9a:	697d      	ldr	r5, [r7, #20]
    9c9c:	4629      	mov	r1, r5
    9c9e:	230a      	movs	r3, #10
    9ca0:	3101      	adds	r1, #1
    9ca2:	4648      	mov	r0, r9
    9ca4:	f7fb f894 	bl	4dd0 <_strtol_r>
    9ca8:	69bb      	ldr	r3, [r7, #24]
    9caa:	1ac2      	subs	r2, r0, r3
    9cac:	e59d      	b.n	97ea <__ssvfscanf_r+0xe5e>
    9cae:	e9d7 320c 	ldrd	r3, r2, [r7, #48]	; 0x30
    9cb2:	f853 1b04 	ldr.w	r1, [r3], #4
    9cb6:	623a      	str	r2, [r7, #32]
    9cb8:	64b9      	str	r1, [r7, #72]	; 0x48
    9cba:	633b      	str	r3, [r7, #48]	; 0x30
    9cbc:	62ba      	str	r2, [r7, #40]	; 0x28
    9cbe:	63fa      	str	r2, [r7, #60]	; 0x3c
    9cc0:	f7ff b9b2 	b.w	9028 <__ssvfscanf_r+0x69c>
    9cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    9cc6:	64bc      	str	r4, [r7, #72]	; 0x48
    9cc8:	f853 5b04 	ldr.w	r5, [r3], #4
    9ccc:	633b      	str	r3, [r7, #48]	; 0x30
    9cce:	e4aa      	b.n	9626 <__ssvfscanf_r+0xc9a>
    9cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    9cd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9cd4:	f853 4b04 	ldr.w	r4, [r3], #4
    9cd8:	61ba      	str	r2, [r7, #24]
    9cda:	e9c7 2207 	strd	r2, r2, [r7, #28]
    9cde:	633b      	str	r3, [r7, #48]	; 0x30
    9ce0:	f7ff ba2a 	b.w	9138 <__ssvfscanf_r+0x7ac>
    9ce4:	6cbc      	ldr	r4, [r7, #72]	; 0x48
    9ce6:	6820      	ldr	r0, [r4, #0]
    9ce8:	f7f9 fe98 	bl	3a1c <realloc>
    9cec:	2800      	cmp	r0, #0
    9cee:	f47f aab3 	bne.w	9258 <__ssvfscanf_r+0x8cc>
    9cf2:	e463      	b.n	95bc <__ssvfscanf_r+0xc30>
    9cf4:	4659      	mov	r1, fp
    9cf6:	4648      	mov	r0, r9
    9cf8:	637b      	str	r3, [r7, #52]	; 0x34
    9cfa:	f002 f861 	bl	bdc0 <__ssrefill_r>
    9cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9d00:	2800      	cmp	r0, #0
    9d02:	f43f ac49 	beq.w	9598 <__ssvfscanf_r+0xc0c>
    9d06:	e44d      	b.n	95a4 <__ssvfscanf_r+0xc18>
    9d08:	6818      	ldr	r0, [r3, #0]
    9d0a:	461c      	mov	r4, r3
    9d0c:	f7f9 fe86 	bl	3a1c <realloc>
    9d10:	2800      	cmp	r0, #0
    9d12:	f43f accc 	beq.w	96ae <__ssvfscanf_r+0xd22>
    9d16:	6020      	str	r0, [r4, #0]
    9d18:	e4c9      	b.n	96ae <__ssvfscanf_r+0xd22>
    9d1a:	2500      	movs	r5, #0
    9d1c:	e637      	b.n	998e <__ssvfscanf_r+0x1002>
    9d1e:	6cbd      	ldr	r5, [r7, #72]	; 0x48
    9d20:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
    9d24:	627e      	str	r6, [r7, #36]	; 0x24
    9d26:	4644      	mov	r4, r8
    9d28:	2d00      	cmp	r5, #0
    9d2a:	f43f aa7c 	beq.w	9226 <__ssvfscanf_r+0x89a>
    9d2e:	3d01      	subs	r5, #1
    9d30:	f507 73b8 	add.w	r3, r7, #368	; 0x170
    9d34:	465a      	mov	r2, fp
    9d36:	5d59      	ldrb	r1, [r3, r5]
    9d38:	4648      	mov	r0, r9
    9d3a:	f002 f801 	bl	bd40 <_sungetc_r>
    9d3e:	2d00      	cmp	r5, #0
    9d40:	d1f5      	bne.n	9d2e <__ssvfscanf_r+0x13a2>
    9d42:	f7ff ba70 	b.w	9226 <__ssvfscanf_r+0x89a>
    9d46:	4659      	mov	r1, fp
    9d48:	4648      	mov	r0, r9
    9d4a:	f002 f839 	bl	bdc0 <__ssrefill_r>
    9d4e:	2800      	cmp	r0, #0
    9d50:	f43f ae22 	beq.w	9998 <__ssvfscanf_r+0x100c>
    9d54:	627c      	str	r4, [r7, #36]	; 0x24
    9d56:	2d00      	cmp	r5, #0
    9d58:	f47e af04 	bne.w	8b64 <__ssvfscanf_r+0x1d8>
    9d5c:	e628      	b.n	99b0 <__ssvfscanf_r+0x1024>
    9d5e:	627c      	str	r4, [r7, #36]	; 0x24
    9d60:	2d00      	cmp	r5, #0
    9d62:	f43f ae25 	beq.w	99b0 <__ssvfscanf_r+0x1024>
    9d66:	3d01      	subs	r5, #1
    9d68:	f507 73b8 	add.w	r3, r7, #368	; 0x170
    9d6c:	465a      	mov	r2, fp
    9d6e:	5d59      	ldrb	r1, [r3, r5]
    9d70:	4648      	mov	r0, r9
    9d72:	f001 ffe5 	bl	bd40 <_sungetc_r>
    9d76:	2d00      	cmp	r5, #0
    9d78:	d1f5      	bne.n	9d66 <__ssvfscanf_r+0x13da>
    9d7a:	e619      	b.n	99b0 <__ssvfscanf_r+0x1024>
    9d7c:	07e5      	lsls	r5, r4, #31
    9d7e:	d43c      	bmi.n	9dfa <__ssvfscanf_r+0x146e>
    9d80:	07a4      	lsls	r4, r4, #30
    9d82:	d53a      	bpl.n	9dfa <__ssvfscanf_r+0x146e>
    9d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    9d86:	64f9      	str	r1, [r7, #76]	; 0x4c
    9d88:	f853 2b04 	ldr.w	r2, [r3], #4
    9d8c:	633b      	str	r3, [r7, #48]	; 0x30
    9d8e:	ea4f 73ea 	mov.w	r3, sl, asr #31
    9d92:	f8c2 a000 	str.w	sl, [r2]
    9d96:	6053      	str	r3, [r2, #4]
    9d98:	f7fe be1f 	b.w	89da <__ssvfscanf_r+0x4e>
    9d9c:	ee18 9a10 	vmov	r9, s16
    9da0:	461e      	mov	r6, r3
    9da2:	f7ff b814 	b.w	8dce <__ssvfscanf_r+0x442>
    9da6:	2301      	movs	r3, #1
    9da8:	f424 64f0 	bic.w	r4, r4, #1920	; 0x780
    9dac:	64bb      	str	r3, [r7, #72]	; 0x48
    9dae:	f7fe bff6 	b.w	8d9e <__ssvfscanf_r+0x412>
    9db2:	f1b8 0f01 	cmp.w	r8, #1
    9db6:	bf38      	it	cc
    9db8:	f04f 0801 	movcc.w	r8, #1
    9dbc:	f014 0301 	ands.w	r3, r4, #1
    9dc0:	d13a      	bne.n	9e38 <__ssvfscanf_r+0x14ac>
    9dc2:	06e5      	lsls	r5, r4, #27
    9dc4:	f100 8136 	bmi.w	a034 <__ssvfscanf_r+0x16a8>
    9dc8:	0624      	lsls	r4, r4, #24
    9dca:	f140 814c 	bpl.w	a066 <__ssvfscanf_r+0x16da>
    9dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    9dd0:	f853 5b04 	ldr.w	r5, [r3], #4
    9dd4:	64bb      	str	r3, [r7, #72]	; 0x48
    9dd6:	2d00      	cmp	r5, #0
    9dd8:	f43e aecd 	beq.w	8b76 <__ssvfscanf_r+0x1ea>
    9ddc:	4640      	mov	r0, r8
    9dde:	f7f9 fb51 	bl	3484 <malloc>
    9de2:	4603      	mov	r3, r0
    9de4:	2800      	cmp	r0, #0
    9de6:	f040 80dc 	bne.w	9fa2 <__ssvfscanf_r+0x1616>
    9dea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    9dec:	2b00      	cmp	r3, #0
    9dee:	f000 8081 	beq.w	9ef4 <__ssvfscanf_r+0x1568>
    9df2:	f8d3 8000 	ldr.w	r8, [r3]
    9df6:	88de      	ldrh	r6, [r3, #6]
    9df8:	e712      	b.n	9c20 <__ssvfscanf_r+0x1294>
    9dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    9dfc:	64f9      	str	r1, [r7, #76]	; 0x4c
    9dfe:	f853 2b04 	ldr.w	r2, [r3], #4
    9e02:	f8c2 a000 	str.w	sl, [r2]
    9e06:	633b      	str	r3, [r7, #48]	; 0x30
    9e08:	f7fe bde7 	b.w	89da <__ssvfscanf_r+0x4e>
    9e0c:	462b      	mov	r3, r5
    9e0e:	6abd      	ldr	r5, [r7, #40]	; 0x28
    9e10:	42ab      	cmp	r3, r5
    9e12:	f67e aeb0 	bls.w	8b76 <__ssvfscanf_r+0x1ea>
    9e16:	461c      	mov	r4, r3
    9e18:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
    9e1c:	465a      	mov	r2, fp
    9e1e:	4648      	mov	r0, r9
    9e20:	f001 ff8e 	bl	bd40 <_sungetc_r>
    9e24:	42ac      	cmp	r4, r5
    9e26:	d1f7      	bne.n	9e18 <__ssvfscanf_r+0x148c>
    9e28:	f7fe bea5 	b.w	8b76 <__ssvfscanf_r+0x1ea>
    9e2c:	0000b685 	.word	0x0000b685
    9e30:	20000731 	.word	0x20000731
    9e34:	20000520 	.word	0x20000520
    9e38:	f014 0310 	ands.w	r3, r4, #16
    9e3c:	637b      	str	r3, [r7, #52]	; 0x34
    9e3e:	d05e      	beq.n	9efe <__ssvfscanf_r+0x1572>
    9e40:	2500      	movs	r5, #0
    9e42:	63fd      	str	r5, [r7, #60]	; 0x3c
    9e44:	64bd      	str	r5, [r7, #72]	; 0x48
    9e46:	462e      	mov	r6, r5
    9e48:	2400      	movs	r4, #0
    9e4a:	464b      	mov	r3, r9
    9e4c:	46c1      	mov	r9, r8
    9e4e:	46a8      	mov	r8, r5
    9e50:	4625      	mov	r5, r4
    9e52:	461c      	mov	r4, r3
    9e54:	f7fb fa94 	bl	5380 <__locale_mb_cur_max>
    9e58:	42a8      	cmp	r0, r5
    9e5a:	f43e ae83 	beq.w	8b64 <__ssvfscanf_r+0x1d8>
    9e5e:	e9db 3200 	ldrd	r3, r2, [fp]
    9e62:	f813 1b01 	ldrb.w	r1, [r3], #1
    9e66:	3a01      	subs	r2, #1
    9e68:	e9cb 3200 	strd	r3, r2, [fp]
    9e6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    9e6e:	f507 70b8 	add.w	r0, r7, #368	; 0x170
    9e72:	2a03      	cmp	r2, #3
    9e74:	5541      	strb	r1, [r0, r5]
    9e76:	f105 0301 	add.w	r3, r5, #1
    9e7a:	f107 0568 	add.w	r5, r7, #104	; 0x68
    9e7e:	d102      	bne.n	9e86 <__ssvfscanf_r+0x14fa>
    9e80:	682a      	ldr	r2, [r5, #0]
    9e82:	2a04      	cmp	r2, #4
    9e84:	d006      	beq.n	9e94 <__ssvfscanf_r+0x1508>
    9e86:	2208      	movs	r2, #8
    9e88:	2100      	movs	r1, #0
    9e8a:	4628      	mov	r0, r5
    9e8c:	62bb      	str	r3, [r7, #40]	; 0x28
    9e8e:	f7fb f9ad 	bl	51ec <memset>
    9e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9e94:	9500      	str	r5, [sp, #0]
    9e96:	f507 72b8 	add.w	r2, r7, #368	; 0x170
    9e9a:	4631      	mov	r1, r6
    9e9c:	4620      	mov	r0, r4
    9e9e:	62bb      	str	r3, [r7, #40]	; 0x28
    9ea0:	f001 fd7a 	bl	b998 <_mbrtowc_r>
    9ea4:	1c43      	adds	r3, r0, #1
    9ea6:	6278      	str	r0, [r7, #36]	; 0x24
    9ea8:	f43e ae5c 	beq.w	8b64 <__ssvfscanf_r+0x1d8>
    9eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9eae:	2800      	cmp	r0, #0
    9eb0:	f040 8147 	bne.w	a142 <__ssvfscanf_r+0x17b6>
    9eb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    9eb6:	b902      	cbnz	r2, 9eba <__ssvfscanf_r+0x152e>
    9eb8:	6032      	str	r2, [r6, #0]
    9eba:	449a      	add	sl, r3
    9ebc:	f109 39ff 	add.w	r9, r9, #4294967295
    9ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9ec2:	2b00      	cmp	r3, #0
    9ec4:	f040 8175 	bne.w	a1b2 <__ssvfscanf_r+0x1826>
    9ec8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    9eca:	2b00      	cmp	r3, #0
    9ecc:	f000 8170 	beq.w	a1b0 <__ssvfscanf_r+0x1824>
    9ed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9ed2:	1af5      	subs	r5, r6, r3
    9ed4:	ebb8 0fa5 	cmp.w	r8, r5, asr #2
    9ed8:	f200 816a 	bhi.w	a1b0 <__ssvfscanf_r+0x1824>
    9edc:	4618      	mov	r0, r3
    9ede:	ea4f 01c8 	mov.w	r1, r8, lsl #3
    9ee2:	f7f9 fd9b 	bl	3a1c <realloc>
    9ee6:	63f8      	str	r0, [r7, #60]	; 0x3c
    9ee8:	2800      	cmp	r0, #0
    9eea:	f040 815c 	bne.w	a1a6 <__ssvfscanf_r+0x181a>
    9eee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    9ef0:	2b00      	cmp	r3, #0
    9ef2:	d12d      	bne.n	9f50 <__ssvfscanf_r+0x15c4>
    9ef4:	f04f 33ff 	mov.w	r3, #4294967295
    9ef8:	647b      	str	r3, [r7, #68]	; 0x44
    9efa:	f7fe be47 	b.w	8b8c <__ssvfscanf_r+0x200>
    9efe:	0622      	lsls	r2, r4, #24
    9f00:	f140 808f 	bpl.w	a022 <__ssvfscanf_r+0x1696>
    9f04:	6b3c      	ldr	r4, [r7, #48]	; 0x30
    9f06:	f854 3b04 	ldr.w	r3, [r4], #4
    9f0a:	64bb      	str	r3, [r7, #72]	; 0x48
    9f0c:	2b00      	cmp	r3, #0
    9f0e:	f43e ae32 	beq.w	8b76 <__ssvfscanf_r+0x1ea>
    9f12:	2080      	movs	r0, #128	; 0x80
    9f14:	f7f9 fab6 	bl	3484 <malloc>
    9f18:	4606      	mov	r6, r0
    9f1a:	2800      	cmp	r0, #0
    9f1c:	d0e7      	beq.n	9eee <__ssvfscanf_r+0x1562>
    9f1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    9f20:	6018      	str	r0, [r3, #0]
    9f22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    9f24:	88dd      	ldrh	r5, [r3, #6]
    9f26:	889a      	ldrh	r2, [r3, #4]
    9f28:	4295      	cmp	r5, r2
    9f2a:	f0c0 80b3 	bcc.w	a094 <__ssvfscanf_r+0x1708>
    9f2e:	f64f 71f6 	movw	r1, #65526	; 0xfff6
    9f32:	428a      	cmp	r2, r1
    9f34:	d856      	bhi.n	9fe4 <__ssvfscanf_r+0x1658>
    9f36:	3208      	adds	r2, #8
    9f38:	b293      	uxth	r3, r2
    9f3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    9f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
    9f3e:	0099      	lsls	r1, r3, #2
    9f40:	6810      	ldr	r0, [r2, #0]
    9f42:	f7f9 fd6b 	bl	3a1c <realloc>
    9f46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9f48:	2800      	cmp	r0, #0
    9f4a:	f040 80ae 	bne.w	a0aa <__ssvfscanf_r+0x171e>
    9f4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    9f50:	88db      	ldrh	r3, [r3, #6]
    9f52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    9f54:	461e      	mov	r6, r3
    9f56:	f8d2 8000 	ldr.w	r8, [r2]
    9f5a:	e661      	b.n	9c20 <__ssvfscanf_r+0x1294>
    9f5c:	462b      	mov	r3, r5
    9f5e:	6abd      	ldr	r5, [r7, #40]	; 0x28
    9f60:	42ab      	cmp	r3, r5
    9f62:	f67e ae08 	bls.w	8b76 <__ssvfscanf_r+0x1ea>
    9f66:	461c      	mov	r4, r3
    9f68:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
    9f6c:	465a      	mov	r2, fp
    9f6e:	4648      	mov	r0, r9
    9f70:	f001 fee6 	bl	bd40 <_sungetc_r>
    9f74:	42ac      	cmp	r4, r5
    9f76:	d1f7      	bne.n	9f68 <__ssvfscanf_r+0x15dc>
    9f78:	f7fe bdfd 	b.w	8b76 <__ssvfscanf_r+0x1ea>
    9f7c:	4610      	mov	r0, r2
    9f7e:	00d9      	lsls	r1, r3, #3
    9f80:	461e      	mov	r6, r3
    9f82:	f7f9 fd4b 	bl	3a1c <realloc>
    9f86:	62b8      	str	r0, [r7, #40]	; 0x28
    9f88:	2800      	cmp	r0, #0
    9f8a:	d0b0      	beq.n	9eee <__ssvfscanf_r+0x1562>
    9f8c:	1942      	adds	r2, r0, r5
    9f8e:	64ba      	str	r2, [r7, #72]	; 0x48
    9f90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    9f92:	6b7d      	ldr	r5, [r7, #52]	; 0x34
    9f94:	6010      	str	r0, [r2, #0]
    9f96:	0073      	lsls	r3, r6, #1
    9f98:	623b      	str	r3, [r7, #32]
    9f9a:	e4f8      	b.n	998e <__ssvfscanf_r+0x1002>
    9f9c:	f8d7 803c 	ldr.w	r8, [r7, #60]	; 0x3c
    9fa0:	e63e      	b.n	9c20 <__ssvfscanf_r+0x1294>
    9fa2:	6c39      	ldr	r1, [r7, #64]	; 0x40
    9fa4:	6028      	str	r0, [r5, #0]
    9fa6:	88ce      	ldrh	r6, [r1, #6]
    9fa8:	888a      	ldrh	r2, [r1, #4]
    9faa:	4296      	cmp	r6, r2
    9fac:	f0c0 808e 	bcc.w	a0cc <__ssvfscanf_r+0x1740>
    9fb0:	f64f 71f6 	movw	r1, #65526	; 0xfff6
    9fb4:	428a      	cmp	r2, r1
    9fb6:	6338      	str	r0, [r7, #48]	; 0x30
    9fb8:	f240 80a5 	bls.w	a106 <__ssvfscanf_r+0x177a>
    9fbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    9fbe:	f8d3 8000 	ldr.w	r8, [r3]
    9fc2:	e62d      	b.n	9c20 <__ssvfscanf_r+0x1294>
    9fc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9fc6:	4295      	cmp	r5, r2
    9fc8:	f67e add5 	bls.w	8b76 <__ssvfscanf_r+0x1ea>
    9fcc:	462c      	mov	r4, r5
    9fce:	6abd      	ldr	r5, [r7, #40]	; 0x28
    9fd0:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
    9fd4:	465a      	mov	r2, fp
    9fd6:	4648      	mov	r0, r9
    9fd8:	f001 feb2 	bl	bd40 <_sungetc_r>
    9fdc:	42ac      	cmp	r4, r5
    9fde:	d1f7      	bne.n	9fd0 <__ssvfscanf_r+0x1644>
    9fe0:	f7fe bdc9 	b.w	8b76 <__ssvfscanf_r+0x1ea>
    9fe4:	462b      	mov	r3, r5
    9fe6:	e7b4      	b.n	9f52 <__ssvfscanf_r+0x15c6>
    9fe8:	f001 fcd4 	bl	b994 <_strtoull_r>
    9fec:	e5c1      	b.n	9b72 <__ssvfscanf_r+0x11e6>
    9fee:	f8d8 3000 	ldr.w	r3, [r8]
    9ff2:	461d      	mov	r5, r3
    9ff4:	3301      	adds	r3, #1
    9ff6:	f47f a8d5 	bne.w	91a4 <__ssvfscanf_r+0x818>
    9ffa:	462a      	mov	r2, r5
    9ffc:	f7ff b8e8 	b.w	91d0 <__ssvfscanf_r+0x844>
    a000:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a002:	6818      	ldr	r0, [r3, #0]
    a004:	f001 fd24 	bl	ba50 <iswspace>
    a008:	2800      	cmp	r0, #0
    a00a:	f47f aea8 	bne.w	9d5e <__ssvfscanf_r+0x13d2>
    a00e:	2c03      	cmp	r4, #3
    a010:	44aa      	add	sl, r5
    a012:	f47f a849 	bne.w	90a8 <__ssvfscanf_r+0x71c>
    a016:	6833      	ldr	r3, [r6, #0]
    a018:	2b04      	cmp	r3, #4
    a01a:	f47f a845 	bne.w	90a8 <__ssvfscanf_r+0x71c>
    a01e:	f7ff b845 	b.w	90ac <__ssvfscanf_r+0x720>
    a022:	e9d7 320c 	ldrd	r3, r2, [r7, #48]	; 0x30
    a026:	f853 6b04 	ldr.w	r6, [r3], #4
    a02a:	633b      	str	r3, [r7, #48]	; 0x30
    a02c:	4615      	mov	r5, r2
    a02e:	63fa      	str	r2, [r7, #60]	; 0x3c
    a030:	64ba      	str	r2, [r7, #72]	; 0x48
    a032:	e709      	b.n	9e48 <__ssvfscanf_r+0x14bc>
    a034:	461c      	mov	r4, r3
    a036:	f8db 3004 	ldr.w	r3, [fp, #4]
    a03a:	4598      	cmp	r8, r3
    a03c:	dd39      	ble.n	a0b2 <__ssvfscanf_r+0x1726>
    a03e:	f8db 2000 	ldr.w	r2, [fp]
    a042:	441a      	add	r2, r3
    a044:	f8cb 2000 	str.w	r2, [fp]
    a048:	4659      	mov	r1, fp
    a04a:	4648      	mov	r0, r9
    a04c:	441c      	add	r4, r3
    a04e:	eba8 0803 	sub.w	r8, r8, r3
    a052:	f001 feb5 	bl	bdc0 <__ssrefill_r>
    a056:	2800      	cmp	r0, #0
    a058:	d0ed      	beq.n	a036 <__ssvfscanf_r+0x16aa>
    a05a:	2c00      	cmp	r4, #0
    a05c:	f43e ad82 	beq.w	8b64 <__ssvfscanf_r+0x1d8>
    a060:	44a2      	add	sl, r4
    a062:	f7fe bcba 	b.w	89da <__ssvfscanf_r+0x4e>
    a066:	6b3d      	ldr	r5, [r7, #48]	; 0x30
    a068:	4643      	mov	r3, r8
    a06a:	6829      	ldr	r1, [r5, #0]
    a06c:	f8cd b000 	str.w	fp, [sp]
    a070:	2201      	movs	r2, #1
    a072:	4648      	mov	r0, r9
    a074:	f001 fec2 	bl	bdfc <_sfread_r>
    a078:	4604      	mov	r4, r0
    a07a:	2800      	cmp	r0, #0
    a07c:	f43e ad72 	beq.w	8b64 <__ssvfscanf_r+0x1d8>
    a080:	3504      	adds	r5, #4
    a082:	64bd      	str	r5, [r7, #72]	; 0x48
    a084:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    a086:	3301      	adds	r3, #1
    a088:	647b      	str	r3, [r7, #68]	; 0x44
    a08a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a08c:	633b      	str	r3, [r7, #48]	; 0x30
    a08e:	44a2      	add	sl, r4
    a090:	f7fe bca3 	b.w	89da <__ssvfscanf_r+0x4e>
    a094:	6818      	ldr	r0, [r3, #0]
    a096:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a098:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
    a09c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    a09e:	633c      	str	r4, [r7, #48]	; 0x30
    a0a0:	3501      	adds	r5, #1
    a0a2:	80dd      	strh	r5, [r3, #6]
    a0a4:	63fe      	str	r6, [r7, #60]	; 0x3c
    a0a6:	2520      	movs	r5, #32
    a0a8:	e6ce      	b.n	9e48 <__ssvfscanf_r+0x14bc>
    a0aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    a0ac:	8093      	strh	r3, [r2, #4]
    a0ae:	6010      	str	r0, [r2, #0]
    a0b0:	e7f1      	b.n	a096 <__ssvfscanf_r+0x170a>
    a0b2:	eba3 0308 	sub.w	r3, r3, r8
    a0b6:	f8cb 3004 	str.w	r3, [fp, #4]
    a0ba:	f8db 3000 	ldr.w	r3, [fp]
    a0be:	4444      	add	r4, r8
    a0c0:	4443      	add	r3, r8
    a0c2:	f8cb 3000 	str.w	r3, [fp]
    a0c6:	44a2      	add	sl, r4
    a0c8:	f7fe bc87 	b.w	89da <__ssvfscanf_r+0x4e>
    a0cc:	680a      	ldr	r2, [r1, #0]
    a0ce:	63fa      	str	r2, [r7, #60]	; 0x3c
    a0d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    a0d2:	f842 5026 	str.w	r5, [r2, r6, lsl #2]
    a0d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    a0d8:	3601      	adds	r6, #1
    a0da:	b2b6      	uxth	r6, r6
    a0dc:	80d6      	strh	r6, [r2, #6]
    a0de:	4619      	mov	r1, r3
    a0e0:	f8cd b000 	str.w	fp, [sp]
    a0e4:	4643      	mov	r3, r8
    a0e6:	2201      	movs	r2, #1
    a0e8:	4648      	mov	r0, r9
    a0ea:	f001 fe87 	bl	bdfc <_sfread_r>
    a0ee:	4604      	mov	r4, r0
    a0f0:	b1d8      	cbz	r0, a12a <__ssvfscanf_r+0x179e>
    a0f2:	4580      	cmp	r8, r0
    a0f4:	d9c6      	bls.n	a084 <__ssvfscanf_r+0x16f8>
    a0f6:	6828      	ldr	r0, [r5, #0]
    a0f8:	4621      	mov	r1, r4
    a0fa:	f7f9 fc8f 	bl	3a1c <realloc>
    a0fe:	2800      	cmp	r0, #0
    a100:	d0c0      	beq.n	a084 <__ssvfscanf_r+0x16f8>
    a102:	6028      	str	r0, [r5, #0]
    a104:	e7be      	b.n	a084 <__ssvfscanf_r+0x16f8>
    a106:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    a108:	3208      	adds	r2, #8
    a10a:	b294      	uxth	r4, r2
    a10c:	681a      	ldr	r2, [r3, #0]
    a10e:	637a      	str	r2, [r7, #52]	; 0x34
    a110:	4610      	mov	r0, r2
    a112:	00a1      	lsls	r1, r4, #2
    a114:	f7f9 fc82 	bl	3a1c <realloc>
    a118:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    a11a:	63f8      	str	r0, [r7, #60]	; 0x3c
    a11c:	2800      	cmp	r0, #0
    a11e:	d05b      	beq.n	a1d8 <__ssvfscanf_r+0x184c>
    a120:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    a122:	809c      	strh	r4, [r3, #4]
    a124:	6018      	str	r0, [r3, #0]
    a126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    a128:	e7d2      	b.n	a0d0 <__ssvfscanf_r+0x1744>
    a12a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    a12c:	f8d7 803c 	ldr.w	r8, [r7, #60]	; 0x3c
    a130:	2b00      	cmp	r3, #0
    a132:	f43f ad75 	beq.w	9c20 <__ssvfscanf_r+0x1294>
    a136:	f8bb 300c 	ldrh.w	r3, [fp, #12]
    a13a:	065b      	lsls	r3, r3, #25
    a13c:	f57e ad1d 	bpl.w	8b7a <__ssvfscanf_r+0x1ee>
    a140:	e56a      	b.n	9c18 <__ssvfscanf_r+0x128c>
    a142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    a144:	3202      	adds	r2, #2
    a146:	d11d      	bne.n	a184 <__ssvfscanf_r+0x17f8>
    a148:	f8db 2004 	ldr.w	r2, [fp, #4]
    a14c:	2a00      	cmp	r2, #0
    a14e:	461d      	mov	r5, r3
    a150:	f73f ae80 	bgt.w	9e54 <__ssvfscanf_r+0x14c8>
    a154:	4659      	mov	r1, fp
    a156:	4620      	mov	r0, r4
    a158:	f001 fe32 	bl	bdc0 <__ssrefill_r>
    a15c:	b9e0      	cbnz	r0, a198 <__ssvfscanf_r+0x180c>
    a15e:	f1b9 0f00 	cmp.w	r9, #0
    a162:	f47f ae77 	bne.w	9e54 <__ssvfscanf_r+0x14c8>
    a166:	4645      	mov	r5, r8
    a168:	46a1      	mov	r9, r4
    a16a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a16c:	b123      	cbz	r3, a178 <__ssvfscanf_r+0x17ec>
    a16e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a170:	1af1      	subs	r1, r6, r3
    a172:	ebb5 0fa1 	cmp.w	r5, r1, asr #2
    a176:	d827      	bhi.n	a1c8 <__ssvfscanf_r+0x183c>
    a178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a17a:	2b00      	cmp	r3, #0
    a17c:	f47e ac2d 	bne.w	89da <__ssvfscanf_r+0x4e>
    a180:	f7ff ba1c 	b.w	95bc <__ssvfscanf_r+0xc30>
    a184:	449a      	add	sl, r3
    a186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a188:	2b03      	cmp	r3, #3
    a18a:	f47f ae97 	bne.w	9ebc <__ssvfscanf_r+0x1530>
    a18e:	682b      	ldr	r3, [r5, #0]
    a190:	2b04      	cmp	r3, #4
    a192:	f47f ae93 	bne.w	9ebc <__ssvfscanf_r+0x1530>
    a196:	e693      	b.n	9ec0 <__ssvfscanf_r+0x1534>
    a198:	46a1      	mov	r9, r4
    a19a:	462c      	mov	r4, r5
    a19c:	4645      	mov	r5, r8
    a19e:	2c00      	cmp	r4, #0
    a1a0:	d0e3      	beq.n	a16a <__ssvfscanf_r+0x17de>
    a1a2:	f7fe bcdf 	b.w	8b64 <__ssvfscanf_r+0x1d8>
    a1a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
    a1a8:	1946      	adds	r6, r0, r5
    a1aa:	6010      	str	r0, [r2, #0]
    a1ac:	ea4f 0848 	mov.w	r8, r8, lsl #1
    a1b0:	3604      	adds	r6, #4
    a1b2:	f8db 3004 	ldr.w	r3, [fp, #4]
    a1b6:	2b00      	cmp	r3, #0
    a1b8:	f04f 0500 	mov.w	r5, #0
    a1bc:	ddca      	ble.n	a154 <__ssvfscanf_r+0x17c8>
    a1be:	f1b9 0f00 	cmp.w	r9, #0
    a1c2:	f47f ae47 	bne.w	9e54 <__ssvfscanf_r+0x14c8>
    a1c6:	e7ce      	b.n	a166 <__ssvfscanf_r+0x17da>
    a1c8:	6cbc      	ldr	r4, [r7, #72]	; 0x48
    a1ca:	6820      	ldr	r0, [r4, #0]
    a1cc:	f7f9 fc26 	bl	3a1c <realloc>
    a1d0:	2800      	cmp	r0, #0
    a1d2:	d0d1      	beq.n	a178 <__ssvfscanf_r+0x17ec>
    a1d4:	6020      	str	r0, [r4, #0]
    a1d6:	e7cf      	b.n	a178 <__ssvfscanf_r+0x17ec>
    a1d8:	4690      	mov	r8, r2
    a1da:	e521      	b.n	9c20 <__ssvfscanf_r+0x1294>

0000a1dc <_fclose_r>:
    a1dc:	b570      	push	{r4, r5, r6, lr}
    a1de:	2900      	cmp	r1, #0
    a1e0:	d04b      	beq.n	a27a <_fclose_r+0x9e>
    a1e2:	4606      	mov	r6, r0
    a1e4:	460c      	mov	r4, r1
    a1e6:	b110      	cbz	r0, a1ee <_fclose_r+0x12>
    a1e8:	6b43      	ldr	r3, [r0, #52]	; 0x34
    a1ea:	2b00      	cmp	r3, #0
    a1ec:	d048      	beq.n	a280 <_fclose_r+0xa4>
    a1ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
    a1f0:	07d8      	lsls	r0, r3, #31
    a1f2:	d534      	bpl.n	a25e <_fclose_r+0x82>
    a1f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    a1f8:	2b00      	cmp	r3, #0
    a1fa:	d03e      	beq.n	a27a <_fclose_r+0x9e>
    a1fc:	4621      	mov	r1, r4
    a1fe:	4630      	mov	r0, r6
    a200:	f000 f850 	bl	a2a4 <__sflush_r>
    a204:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    a206:	4605      	mov	r5, r0
    a208:	b133      	cbz	r3, a218 <_fclose_r+0x3c>
    a20a:	69e1      	ldr	r1, [r4, #28]
    a20c:	4630      	mov	r0, r6
    a20e:	4798      	blx	r3
    a210:	2800      	cmp	r0, #0
    a212:	bfb8      	it	lt
    a214:	f04f 35ff 	movlt.w	r5, #4294967295
    a218:	89a3      	ldrh	r3, [r4, #12]
    a21a:	061a      	lsls	r2, r3, #24
    a21c:	d43c      	bmi.n	a298 <_fclose_r+0xbc>
    a21e:	6b21      	ldr	r1, [r4, #48]	; 0x30
    a220:	b141      	cbz	r1, a234 <_fclose_r+0x58>
    a222:	f104 0340 	add.w	r3, r4, #64	; 0x40
    a226:	4299      	cmp	r1, r3
    a228:	d002      	beq.n	a230 <_fclose_r+0x54>
    a22a:	4630      	mov	r0, r6
    a22c:	f7fb fb96 	bl	595c <_free_r>
    a230:	2300      	movs	r3, #0
    a232:	6323      	str	r3, [r4, #48]	; 0x30
    a234:	6c61      	ldr	r1, [r4, #68]	; 0x44
    a236:	b121      	cbz	r1, a242 <_fclose_r+0x66>
    a238:	4630      	mov	r0, r6
    a23a:	f7fb fb8f 	bl	595c <_free_r>
    a23e:	2300      	movs	r3, #0
    a240:	6463      	str	r3, [r4, #68]	; 0x44
    a242:	f7fa fe7b 	bl	4f3c <__sfp_lock_acquire>
    a246:	6e63      	ldr	r3, [r4, #100]	; 0x64
    a248:	2200      	movs	r2, #0
    a24a:	07db      	lsls	r3, r3, #31
    a24c:	81a2      	strh	r2, [r4, #12]
    a24e:	d51f      	bpl.n	a290 <_fclose_r+0xb4>
    a250:	6da0      	ldr	r0, [r4, #88]	; 0x58
    a252:	f7fb f92d 	bl	54b0 <__retarget_lock_close_recursive>
    a256:	f7fa fe77 	bl	4f48 <__sfp_lock_release>
    a25a:	4628      	mov	r0, r5
    a25c:	bd70      	pop	{r4, r5, r6, pc}
    a25e:	89a3      	ldrh	r3, [r4, #12]
    a260:	0599      	lsls	r1, r3, #22
    a262:	d4cb      	bmi.n	a1fc <_fclose_r+0x20>
    a264:	6da0      	ldr	r0, [r4, #88]	; 0x58
    a266:	f7fb f925 	bl	54b4 <__retarget_lock_acquire_recursive>
    a26a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    a26e:	2b00      	cmp	r3, #0
    a270:	d1c4      	bne.n	a1fc <_fclose_r+0x20>
    a272:	6e65      	ldr	r5, [r4, #100]	; 0x64
    a274:	f015 0501 	ands.w	r5, r5, #1
    a278:	d005      	beq.n	a286 <_fclose_r+0xaa>
    a27a:	2500      	movs	r5, #0
    a27c:	4628      	mov	r0, r5
    a27e:	bd70      	pop	{r4, r5, r6, pc}
    a280:	f7fa fe3e 	bl	4f00 <__sinit>
    a284:	e7b3      	b.n	a1ee <_fclose_r+0x12>
    a286:	6da0      	ldr	r0, [r4, #88]	; 0x58
    a288:	f7fb f916 	bl	54b8 <__retarget_lock_release_recursive>
    a28c:	4628      	mov	r0, r5
    a28e:	bd70      	pop	{r4, r5, r6, pc}
    a290:	6da0      	ldr	r0, [r4, #88]	; 0x58
    a292:	f7fb f911 	bl	54b8 <__retarget_lock_release_recursive>
    a296:	e7db      	b.n	a250 <_fclose_r+0x74>
    a298:	6921      	ldr	r1, [r4, #16]
    a29a:	4630      	mov	r0, r6
    a29c:	f7fb fb5e 	bl	595c <_free_r>
    a2a0:	e7bd      	b.n	a21e <_fclose_r+0x42>
    a2a2:	bf00      	nop

0000a2a4 <__sflush_r>:
    a2a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
    a2a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a2ac:	460c      	mov	r4, r1
    a2ae:	0711      	lsls	r1, r2, #28
    a2b0:	4680      	mov	r8, r0
    a2b2:	d447      	bmi.n	a344 <__sflush_r+0xa0>
    a2b4:	6863      	ldr	r3, [r4, #4]
    a2b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    a2ba:	2b00      	cmp	r3, #0
    a2bc:	81a2      	strh	r2, [r4, #12]
    a2be:	dd5e      	ble.n	a37e <__sflush_r+0xda>
    a2c0:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    a2c2:	2d00      	cmp	r5, #0
    a2c4:	d058      	beq.n	a378 <__sflush_r+0xd4>
    a2c6:	2300      	movs	r3, #0
    a2c8:	f8d8 6000 	ldr.w	r6, [r8]
    a2cc:	f8c8 3000 	str.w	r3, [r8]
    a2d0:	b293      	uxth	r3, r2
    a2d2:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    a2d6:	d156      	bne.n	a386 <__sflush_r+0xe2>
    a2d8:	2301      	movs	r3, #1
    a2da:	69e1      	ldr	r1, [r4, #28]
    a2dc:	4640      	mov	r0, r8
    a2de:	47a8      	blx	r5
    a2e0:	1c43      	adds	r3, r0, #1
    a2e2:	d067      	beq.n	a3b4 <__sflush_r+0x110>
    a2e4:	89a3      	ldrh	r3, [r4, #12]
    a2e6:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    a2e8:	075f      	lsls	r7, r3, #29
    a2ea:	d505      	bpl.n	a2f8 <__sflush_r+0x54>
    a2ec:	6863      	ldr	r3, [r4, #4]
    a2ee:	1ac0      	subs	r0, r0, r3
    a2f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    a2f2:	b10b      	cbz	r3, a2f8 <__sflush_r+0x54>
    a2f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    a2f6:	1ac0      	subs	r0, r0, r3
    a2f8:	69e1      	ldr	r1, [r4, #28]
    a2fa:	4602      	mov	r2, r0
    a2fc:	2300      	movs	r3, #0
    a2fe:	4640      	mov	r0, r8
    a300:	47a8      	blx	r5
    a302:	1c41      	adds	r1, r0, #1
    a304:	d141      	bne.n	a38a <__sflush_r+0xe6>
    a306:	f8d8 3000 	ldr.w	r3, [r8]
    a30a:	2b00      	cmp	r3, #0
    a30c:	d03d      	beq.n	a38a <__sflush_r+0xe6>
    a30e:	2b1d      	cmp	r3, #29
    a310:	d001      	beq.n	a316 <__sflush_r+0x72>
    a312:	2b16      	cmp	r3, #22
    a314:	d156      	bne.n	a3c4 <__sflush_r+0x120>
    a316:	89a3      	ldrh	r3, [r4, #12]
    a318:	6922      	ldr	r2, [r4, #16]
    a31a:	6022      	str	r2, [r4, #0]
    a31c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    a320:	2100      	movs	r1, #0
    a322:	6061      	str	r1, [r4, #4]
    a324:	81a3      	strh	r3, [r4, #12]
    a326:	6b21      	ldr	r1, [r4, #48]	; 0x30
    a328:	f8c8 6000 	str.w	r6, [r8]
    a32c:	b321      	cbz	r1, a378 <__sflush_r+0xd4>
    a32e:	f104 0340 	add.w	r3, r4, #64	; 0x40
    a332:	4299      	cmp	r1, r3
    a334:	d002      	beq.n	a33c <__sflush_r+0x98>
    a336:	4640      	mov	r0, r8
    a338:	f7fb fb10 	bl	595c <_free_r>
    a33c:	2000      	movs	r0, #0
    a33e:	6320      	str	r0, [r4, #48]	; 0x30
    a340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a344:	6926      	ldr	r6, [r4, #16]
    a346:	b1be      	cbz	r6, a378 <__sflush_r+0xd4>
    a348:	b293      	uxth	r3, r2
    a34a:	6825      	ldr	r5, [r4, #0]
    a34c:	6026      	str	r6, [r4, #0]
    a34e:	079a      	lsls	r2, r3, #30
    a350:	bf0c      	ite	eq
    a352:	6963      	ldreq	r3, [r4, #20]
    a354:	2300      	movne	r3, #0
    a356:	1bad      	subs	r5, r5, r6
    a358:	60a3      	str	r3, [r4, #8]
    a35a:	e00b      	b.n	a374 <__sflush_r+0xd0>
    a35c:	462b      	mov	r3, r5
    a35e:	4632      	mov	r2, r6
    a360:	69e1      	ldr	r1, [r4, #28]
    a362:	6a67      	ldr	r7, [r4, #36]	; 0x24
    a364:	4640      	mov	r0, r8
    a366:	47b8      	blx	r7
    a368:	f1b0 0c00 	subs.w	ip, r0, #0
    a36c:	eba5 050c 	sub.w	r5, r5, ip
    a370:	4466      	add	r6, ip
    a372:	dd17      	ble.n	a3a4 <__sflush_r+0x100>
    a374:	2d00      	cmp	r5, #0
    a376:	dcf1      	bgt.n	a35c <__sflush_r+0xb8>
    a378:	2000      	movs	r0, #0
    a37a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a37e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    a380:	2b00      	cmp	r3, #0
    a382:	dc9d      	bgt.n	a2c0 <__sflush_r+0x1c>
    a384:	e7f8      	b.n	a378 <__sflush_r+0xd4>
    a386:	6d20      	ldr	r0, [r4, #80]	; 0x50
    a388:	e7ae      	b.n	a2e8 <__sflush_r+0x44>
    a38a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    a38e:	6922      	ldr	r2, [r4, #16]
    a390:	6022      	str	r2, [r4, #0]
    a392:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    a396:	81a3      	strh	r3, [r4, #12]
    a398:	2200      	movs	r2, #0
    a39a:	04db      	lsls	r3, r3, #19
    a39c:	6062      	str	r2, [r4, #4]
    a39e:	d5c2      	bpl.n	a326 <__sflush_r+0x82>
    a3a0:	6520      	str	r0, [r4, #80]	; 0x50
    a3a2:	e7c0      	b.n	a326 <__sflush_r+0x82>
    a3a4:	89a3      	ldrh	r3, [r4, #12]
    a3a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a3aa:	f04f 30ff 	mov.w	r0, #4294967295
    a3ae:	81a3      	strh	r3, [r4, #12]
    a3b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a3b4:	f8d8 3000 	ldr.w	r3, [r8]
    a3b8:	2b00      	cmp	r3, #0
    a3ba:	d093      	beq.n	a2e4 <__sflush_r+0x40>
    a3bc:	2b1d      	cmp	r3, #29
    a3be:	d006      	beq.n	a3ce <__sflush_r+0x12a>
    a3c0:	2b16      	cmp	r3, #22
    a3c2:	d004      	beq.n	a3ce <__sflush_r+0x12a>
    a3c4:	89a3      	ldrh	r3, [r4, #12]
    a3c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a3ca:	81a3      	strh	r3, [r4, #12]
    a3cc:	e7d5      	b.n	a37a <__sflush_r+0xd6>
    a3ce:	f8c8 6000 	str.w	r6, [r8]
    a3d2:	e7d1      	b.n	a378 <__sflush_r+0xd4>

0000a3d4 <_fflush_r>:
    a3d4:	b538      	push	{r3, r4, r5, lr}
    a3d6:	460c      	mov	r4, r1
    a3d8:	4605      	mov	r5, r0
    a3da:	b108      	cbz	r0, a3e0 <_fflush_r+0xc>
    a3dc:	6b43      	ldr	r3, [r0, #52]	; 0x34
    a3de:	b303      	cbz	r3, a422 <_fflush_r+0x4e>
    a3e0:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
    a3e4:	b188      	cbz	r0, a40a <_fflush_r+0x36>
    a3e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
    a3e8:	07db      	lsls	r3, r3, #31
    a3ea:	d401      	bmi.n	a3f0 <_fflush_r+0x1c>
    a3ec:	0581      	lsls	r1, r0, #22
    a3ee:	d50f      	bpl.n	a410 <_fflush_r+0x3c>
    a3f0:	4628      	mov	r0, r5
    a3f2:	4621      	mov	r1, r4
    a3f4:	f7ff ff56 	bl	a2a4 <__sflush_r>
    a3f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
    a3fa:	07da      	lsls	r2, r3, #31
    a3fc:	4605      	mov	r5, r0
    a3fe:	d402      	bmi.n	a406 <_fflush_r+0x32>
    a400:	89a3      	ldrh	r3, [r4, #12]
    a402:	059b      	lsls	r3, r3, #22
    a404:	d508      	bpl.n	a418 <_fflush_r+0x44>
    a406:	4628      	mov	r0, r5
    a408:	bd38      	pop	{r3, r4, r5, pc}
    a40a:	4605      	mov	r5, r0
    a40c:	4628      	mov	r0, r5
    a40e:	bd38      	pop	{r3, r4, r5, pc}
    a410:	6da0      	ldr	r0, [r4, #88]	; 0x58
    a412:	f7fb f84f 	bl	54b4 <__retarget_lock_acquire_recursive>
    a416:	e7eb      	b.n	a3f0 <_fflush_r+0x1c>
    a418:	6da0      	ldr	r0, [r4, #88]	; 0x58
    a41a:	f7fb f84d 	bl	54b8 <__retarget_lock_release_recursive>
    a41e:	4628      	mov	r0, r5
    a420:	bd38      	pop	{r3, r4, r5, pc}
    a422:	f7fa fd6d 	bl	4f00 <__sinit>
    a426:	e7db      	b.n	a3e0 <_fflush_r+0xc>

0000a428 <__sccl>:
    a428:	b570      	push	{r4, r5, r6, lr}
    a42a:	780c      	ldrb	r4, [r1, #0]
    a42c:	2c5e      	cmp	r4, #94	; 0x5e
    a42e:	4686      	mov	lr, r0
    a430:	d01e      	beq.n	a470 <__sccl+0x48>
    a432:	2200      	movs	r2, #0
    a434:	1c48      	adds	r0, r1, #1
    a436:	4694      	mov	ip, r2
    a438:	f10e 33ff 	add.w	r3, lr, #4294967295
    a43c:	f10e 01ff 	add.w	r1, lr, #255	; 0xff
    a440:	f803 2f01 	strb.w	r2, [r3, #1]!
    a444:	428b      	cmp	r3, r1
    a446:	d1fb      	bne.n	a440 <__sccl+0x18>
    a448:	b184      	cbz	r4, a46c <__sccl+0x44>
    a44a:	f08c 0101 	eor.w	r1, ip, #1
    a44e:	f80e 1004 	strb.w	r1, [lr, r4]
    a452:	1c45      	adds	r5, r0, #1
    a454:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    a458:	2b2d      	cmp	r3, #45	; 0x2d
    a45a:	d00e      	beq.n	a47a <__sccl+0x52>
    a45c:	2b5d      	cmp	r3, #93	; 0x5d
    a45e:	d003      	beq.n	a468 <__sccl+0x40>
    a460:	b11b      	cbz	r3, a46a <__sccl+0x42>
    a462:	461c      	mov	r4, r3
    a464:	4628      	mov	r0, r5
    a466:	e7f2      	b.n	a44e <__sccl+0x26>
    a468:	4628      	mov	r0, r5
    a46a:	bd70      	pop	{r4, r5, r6, pc}
    a46c:	3801      	subs	r0, #1
    a46e:	bd70      	pop	{r4, r5, r6, pc}
    a470:	2201      	movs	r2, #1
    a472:	784c      	ldrb	r4, [r1, #1]
    a474:	1c88      	adds	r0, r1, #2
    a476:	4694      	mov	ip, r2
    a478:	e7de      	b.n	a438 <__sccl+0x10>
    a47a:	f890 c001 	ldrb.w	ip, [r0, #1]
    a47e:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
    a482:	d0ee      	beq.n	a462 <__sccl+0x3a>
    a484:	4564      	cmp	r4, ip
    a486:	dcec      	bgt.n	a462 <__sccl+0x3a>
    a488:	1c66      	adds	r6, r4, #1
    a48a:	3002      	adds	r0, #2
    a48c:	eb0e 0206 	add.w	r2, lr, r6
    a490:	f802 1b01 	strb.w	r1, [r2], #1
    a494:	eba2 030e 	sub.w	r3, r2, lr
    a498:	3b01      	subs	r3, #1
    a49a:	459c      	cmp	ip, r3
    a49c:	dcf8      	bgt.n	a490 <__sccl+0x68>
    a49e:	ebac 0304 	sub.w	r3, ip, r4
    a4a2:	3b01      	subs	r3, #1
    a4a4:	4564      	cmp	r4, ip
    a4a6:	bfa8      	it	ge
    a4a8:	2300      	movge	r3, #0
    a4aa:	3502      	adds	r5, #2
    a4ac:	199c      	adds	r4, r3, r6
    a4ae:	e7d1      	b.n	a454 <__sccl+0x2c>

0000a4b0 <sprintf>:
    a4b0:	b40e      	push	{r1, r2, r3}
    a4b2:	b510      	push	{r4, lr}
    a4b4:	b09d      	sub	sp, #116	; 0x74
    a4b6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    a4ba:	ab1f      	add	r3, sp, #124	; 0x7c
    a4bc:	e9cd 0106 	strd	r0, r1, [sp, #24]
    a4c0:	9104      	str	r1, [sp, #16]
    a4c2:	4909      	ldr	r1, [pc, #36]	; (a4e8 <sprintf+0x38>)
    a4c4:	f853 2b04 	ldr.w	r2, [r3], #4
    a4c8:	9002      	str	r0, [sp, #8]
    a4ca:	4c08      	ldr	r4, [pc, #32]	; (a4ec <sprintf+0x3c>)
    a4cc:	6808      	ldr	r0, [r1, #0]
    a4ce:	9301      	str	r3, [sp, #4]
    a4d0:	a902      	add	r1, sp, #8
    a4d2:	9405      	str	r4, [sp, #20]
    a4d4:	f7fc fcb8 	bl	6e48 <_svfprintf_r>
    a4d8:	9b02      	ldr	r3, [sp, #8]
    a4da:	2200      	movs	r2, #0
    a4dc:	701a      	strb	r2, [r3, #0]
    a4de:	b01d      	add	sp, #116	; 0x74
    a4e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a4e4:	b003      	add	sp, #12
    a4e6:	4770      	bx	lr
    a4e8:	20007fc0 	.word	0x20007fc0
    a4ec:	ffff0208 	.word	0xffff0208

0000a4f0 <stpncpy>:
    a4f0:	ea41 0300 	orr.w	r3, r1, r0
    a4f4:	079b      	lsls	r3, r3, #30
    a4f6:	b430      	push	{r4, r5}
    a4f8:	d101      	bne.n	a4fe <stpncpy+0xe>
    a4fa:	2a03      	cmp	r2, #3
    a4fc:	d80f      	bhi.n	a51e <stpncpy+0x2e>
    a4fe:	f101 3cff 	add.w	ip, r1, #4294967295
    a502:	e007      	b.n	a514 <stpncpy+0x24>
    a504:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
    a508:	f803 1b01 	strb.w	r1, [r3], #1
    a50c:	1e54      	subs	r4, r2, #1
    a50e:	b1c1      	cbz	r1, a542 <stpncpy+0x52>
    a510:	4622      	mov	r2, r4
    a512:	4618      	mov	r0, r3
    a514:	4603      	mov	r3, r0
    a516:	2a00      	cmp	r2, #0
    a518:	d1f4      	bne.n	a504 <stpncpy+0x14>
    a51a:	bc30      	pop	{r4, r5}
    a51c:	4770      	bx	lr
    a51e:	460b      	mov	r3, r1
    a520:	4619      	mov	r1, r3
    a522:	f853 5b04 	ldr.w	r5, [r3], #4
    a526:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
    a52a:	ea24 0405 	bic.w	r4, r4, r5
    a52e:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    a532:	d1e4      	bne.n	a4fe <stpncpy+0xe>
    a534:	3a04      	subs	r2, #4
    a536:	2a03      	cmp	r2, #3
    a538:	f840 5b04 	str.w	r5, [r0], #4
    a53c:	4619      	mov	r1, r3
    a53e:	d8ef      	bhi.n	a520 <stpncpy+0x30>
    a540:	e7dd      	b.n	a4fe <stpncpy+0xe>
    a542:	4402      	add	r2, r0
    a544:	2c00      	cmp	r4, #0
    a546:	d0e8      	beq.n	a51a <stpncpy+0x2a>
    a548:	f803 1b01 	strb.w	r1, [r3], #1
    a54c:	4293      	cmp	r3, r2
    a54e:	d1fb      	bne.n	a548 <stpncpy+0x58>
    a550:	bc30      	pop	{r4, r5}
    a552:	4770      	bx	lr

0000a554 <_localeconv_r>:
    a554:	4800      	ldr	r0, [pc, #0]	; (a558 <_localeconv_r+0x4>)
    a556:	4770      	bx	lr
    a558:	20007b28 	.word	0x20007b28
    a55c:	00000000 	.word	0x00000000

0000a560 <memchr>:
    a560:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    a564:	2a10      	cmp	r2, #16
    a566:	db2b      	blt.n	a5c0 <memchr+0x60>
    a568:	f010 0f07 	tst.w	r0, #7
    a56c:	d008      	beq.n	a580 <memchr+0x20>
    a56e:	f810 3b01 	ldrb.w	r3, [r0], #1
    a572:	3a01      	subs	r2, #1
    a574:	428b      	cmp	r3, r1
    a576:	d02d      	beq.n	a5d4 <memchr+0x74>
    a578:	f010 0f07 	tst.w	r0, #7
    a57c:	b342      	cbz	r2, a5d0 <memchr+0x70>
    a57e:	d1f6      	bne.n	a56e <memchr+0xe>
    a580:	b4f0      	push	{r4, r5, r6, r7}
    a582:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    a586:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    a58a:	f022 0407 	bic.w	r4, r2, #7
    a58e:	f07f 0700 	mvns.w	r7, #0
    a592:	2300      	movs	r3, #0
    a594:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    a598:	3c08      	subs	r4, #8
    a59a:	ea85 0501 	eor.w	r5, r5, r1
    a59e:	ea86 0601 	eor.w	r6, r6, r1
    a5a2:	fa85 f547 	uadd8	r5, r5, r7
    a5a6:	faa3 f587 	sel	r5, r3, r7
    a5aa:	fa86 f647 	uadd8	r6, r6, r7
    a5ae:	faa5 f687 	sel	r6, r5, r7
    a5b2:	b98e      	cbnz	r6, a5d8 <memchr+0x78>
    a5b4:	d1ee      	bne.n	a594 <memchr+0x34>
    a5b6:	bcf0      	pop	{r4, r5, r6, r7}
    a5b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    a5bc:	f002 0207 	and.w	r2, r2, #7
    a5c0:	b132      	cbz	r2, a5d0 <memchr+0x70>
    a5c2:	f810 3b01 	ldrb.w	r3, [r0], #1
    a5c6:	3a01      	subs	r2, #1
    a5c8:	ea83 0301 	eor.w	r3, r3, r1
    a5cc:	b113      	cbz	r3, a5d4 <memchr+0x74>
    a5ce:	d1f8      	bne.n	a5c2 <memchr+0x62>
    a5d0:	2000      	movs	r0, #0
    a5d2:	4770      	bx	lr
    a5d4:	3801      	subs	r0, #1
    a5d6:	4770      	bx	lr
    a5d8:	2d00      	cmp	r5, #0
    a5da:	bf06      	itte	eq
    a5dc:	4635      	moveq	r5, r6
    a5de:	3803      	subeq	r0, #3
    a5e0:	3807      	subne	r0, #7
    a5e2:	f015 0f01 	tst.w	r5, #1
    a5e6:	d107      	bne.n	a5f8 <memchr+0x98>
    a5e8:	3001      	adds	r0, #1
    a5ea:	f415 7f80 	tst.w	r5, #256	; 0x100
    a5ee:	bf02      	ittt	eq
    a5f0:	3001      	addeq	r0, #1
    a5f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    a5f6:	3001      	addeq	r0, #1
    a5f8:	bcf0      	pop	{r4, r5, r6, r7}
    a5fa:	3801      	subs	r0, #1
    a5fc:	4770      	bx	lr
    a5fe:	bf00      	nop

0000a600 <frexp>:
    a600:	b430      	push	{r4, r5}
    a602:	b082      	sub	sp, #8
    a604:	ed8d 0b00 	vstr	d0, [sp]
    a608:	9a01      	ldr	r2, [sp, #4]
    a60a:	4c19      	ldr	r4, [pc, #100]	; (a670 <frexp+0x70>)
    a60c:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
    a610:	2100      	movs	r1, #0
    a612:	42a3      	cmp	r3, r4
    a614:	6001      	str	r1, [r0, #0]
    a616:	dc21      	bgt.n	a65c <frexp+0x5c>
    a618:	9c00      	ldr	r4, [sp, #0]
    a61a:	431c      	orrs	r4, r3
    a61c:	d01e      	beq.n	a65c <frexp+0x5c>
    a61e:	4c15      	ldr	r4, [pc, #84]	; (a674 <frexp+0x74>)
    a620:	4014      	ands	r4, r2
    a622:	b954      	cbnz	r4, a63a <frexp+0x3a>
    a624:	ed9f 7b10 	vldr	d7, [pc, #64]	; a668 <frexp+0x68>
    a628:	ee20 7b07 	vmul.f64	d7, d0, d7
    a62c:	ed8d 7b00 	vstr	d7, [sp]
    a630:	9a01      	ldr	r2, [sp, #4]
    a632:	f06f 0135 	mvn.w	r1, #53	; 0x35
    a636:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
    a63a:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
    a63e:	e9dd 4500 	ldrd	r4, r5, [sp]
    a642:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
    a646:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
    a64a:	151b      	asrs	r3, r3, #20
    a64c:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
    a650:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
    a654:	e9cd 4500 	strd	r4, r5, [sp]
    a658:	440b      	add	r3, r1
    a65a:	6003      	str	r3, [r0, #0]
    a65c:	ed9d 0b00 	vldr	d0, [sp]
    a660:	b002      	add	sp, #8
    a662:	bc30      	pop	{r4, r5}
    a664:	4770      	bx	lr
    a666:	bf00      	nop
    a668:	00000000 	.word	0x00000000
    a66c:	43500000 	.word	0x43500000
    a670:	7fefffff 	.word	0x7fefffff
    a674:	7ff00000 	.word	0x7ff00000

0000a678 <__assert_func>:
    a678:	b500      	push	{lr}
    a67a:	4c0b      	ldr	r4, [pc, #44]	; (a6a8 <__assert_func+0x30>)
    a67c:	6825      	ldr	r5, [r4, #0]
    a67e:	4614      	mov	r4, r2
    a680:	68ee      	ldr	r6, [r5, #12]
    a682:	461a      	mov	r2, r3
    a684:	b085      	sub	sp, #20
    a686:	4603      	mov	r3, r0
    a688:	460d      	mov	r5, r1
    a68a:	b14c      	cbz	r4, a6a0 <__assert_func+0x28>
    a68c:	4907      	ldr	r1, [pc, #28]	; (a6ac <__assert_func+0x34>)
    a68e:	9500      	str	r5, [sp, #0]
    a690:	e9cd 1401 	strd	r1, r4, [sp, #4]
    a694:	4630      	mov	r0, r6
    a696:	4906      	ldr	r1, [pc, #24]	; (a6b0 <__assert_func+0x38>)
    a698:	f001 fabe 	bl	bc18 <fiprintf>
    a69c:	f7f7 fa52 	bl	1b44 <abort>
    a6a0:	4904      	ldr	r1, [pc, #16]	; (a6b4 <__assert_func+0x3c>)
    a6a2:	460c      	mov	r4, r1
    a6a4:	e7f3      	b.n	a68e <__assert_func+0x16>
    a6a6:	bf00      	nop
    a6a8:	20007fc0 	.word	0x20007fc0
    a6ac:	20000514 	.word	0x20000514
    a6b0:	20000524 	.word	0x20000524
    a6b4:	20000520 	.word	0x20000520

0000a6b8 <_calloc_r>:
    a6b8:	b538      	push	{r3, r4, r5, lr}
    a6ba:	fba1 1402 	umull	r1, r4, r1, r2
    a6be:	bb8c      	cbnz	r4, a724 <_calloc_r+0x6c>
    a6c0:	f7f8 fef0 	bl	34a4 <_malloc_r>
    a6c4:	4605      	mov	r5, r0
    a6c6:	b1e0      	cbz	r0, a702 <_calloc_r+0x4a>
    a6c8:	f850 2c04 	ldr.w	r2, [r0, #-4]
    a6cc:	f022 0203 	bic.w	r2, r2, #3
    a6d0:	3a04      	subs	r2, #4
    a6d2:	2a24      	cmp	r2, #36	; 0x24
    a6d4:	d817      	bhi.n	a706 <_calloc_r+0x4e>
    a6d6:	2a13      	cmp	r2, #19
    a6d8:	d91a      	bls.n	a710 <_calloc_r+0x58>
    a6da:	2a1b      	cmp	r2, #27
    a6dc:	e9c0 4400 	strd	r4, r4, [r0]
    a6e0:	d91d      	bls.n	a71e <_calloc_r+0x66>
    a6e2:	2a24      	cmp	r2, #36	; 0x24
    a6e4:	bf14      	ite	ne
    a6e6:	f100 0210 	addne.w	r2, r0, #16
    a6ea:	f100 0218 	addeq.w	r2, r0, #24
    a6ee:	f04f 0300 	mov.w	r3, #0
    a6f2:	e9c0 4402 	strd	r4, r4, [r0, #8]
    a6f6:	bf04      	itt	eq
    a6f8:	6104      	streq	r4, [r0, #16]
    a6fa:	6144      	streq	r4, [r0, #20]
    a6fc:	e9c2 3300 	strd	r3, r3, [r2]
    a700:	6093      	str	r3, [r2, #8]
    a702:	4628      	mov	r0, r5
    a704:	bd38      	pop	{r3, r4, r5, pc}
    a706:	4621      	mov	r1, r4
    a708:	f7fa fd70 	bl	51ec <memset>
    a70c:	4628      	mov	r0, r5
    a70e:	bd38      	pop	{r3, r4, r5, pc}
    a710:	4602      	mov	r2, r0
    a712:	2300      	movs	r3, #0
    a714:	e9c2 3300 	strd	r3, r3, [r2]
    a718:	6093      	str	r3, [r2, #8]
    a71a:	4628      	mov	r0, r5
    a71c:	bd38      	pop	{r3, r4, r5, pc}
    a71e:	f100 0208 	add.w	r2, r0, #8
    a722:	e7f6      	b.n	a712 <_calloc_r+0x5a>
    a724:	f7fa fe98 	bl	5458 <__errno>
    a728:	230c      	movs	r3, #12
    a72a:	2500      	movs	r5, #0
    a72c:	6003      	str	r3, [r0, #0]
    a72e:	e7e8      	b.n	a702 <_calloc_r+0x4a>

0000a730 <quorem>:
    a730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a734:	6903      	ldr	r3, [r0, #16]
    a736:	690c      	ldr	r4, [r1, #16]
    a738:	42a3      	cmp	r3, r4
    a73a:	b083      	sub	sp, #12
    a73c:	f2c0 8087 	blt.w	a84e <quorem+0x11e>
    a740:	3c01      	subs	r4, #1
    a742:	f101 0514 	add.w	r5, r1, #20
    a746:	00a3      	lsls	r3, r4, #2
    a748:	f100 0814 	add.w	r8, r0, #20
    a74c:	9300      	str	r3, [sp, #0]
    a74e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    a752:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
    a756:	3301      	adds	r3, #1
    a758:	4681      	mov	r9, r0
    a75a:	429a      	cmp	r2, r3
    a75c:	eb08 0084 	add.w	r0, r8, r4, lsl #2
    a760:	eb05 0784 	add.w	r7, r5, r4, lsl #2
    a764:	9001      	str	r0, [sp, #4]
    a766:	fbb2 f6f3 	udiv	r6, r2, r3
    a76a:	d33b      	bcc.n	a7e4 <quorem+0xb4>
    a76c:	f04f 0c00 	mov.w	ip, #0
    a770:	46ae      	mov	lr, r5
    a772:	4640      	mov	r0, r8
    a774:	46e2      	mov	sl, ip
    a776:	4663      	mov	r3, ip
    a778:	f85e bb04 	ldr.w	fp, [lr], #4
    a77c:	6802      	ldr	r2, [r0, #0]
    a77e:	fa1f fc8b 	uxth.w	ip, fp
    a782:	fb06 330c 	mla	r3, r6, ip, r3
    a786:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    a78a:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
    a78e:	fb06 cc0b 	mla	ip, r6, fp, ip
    a792:	b29b      	uxth	r3, r3
    a794:	ebaa 0303 	sub.w	r3, sl, r3
    a798:	fa1f fa8c 	uxth.w	sl, ip
    a79c:	fa13 f382 	uxtah	r3, r3, r2
    a7a0:	ebca 4212 	rsb	r2, sl, r2, lsr #16
    a7a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
    a7a8:	b29b      	uxth	r3, r3
    a7aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    a7ae:	4577      	cmp	r7, lr
    a7b0:	f840 3b04 	str.w	r3, [r0], #4
    a7b4:	ea4f 4a22 	mov.w	sl, r2, asr #16
    a7b8:	ea4f 431c 	mov.w	r3, ip, lsr #16
    a7bc:	d2dc      	bcs.n	a778 <quorem+0x48>
    a7be:	9b00      	ldr	r3, [sp, #0]
    a7c0:	f858 3003 	ldr.w	r3, [r8, r3]
    a7c4:	b973      	cbnz	r3, a7e4 <quorem+0xb4>
    a7c6:	9b01      	ldr	r3, [sp, #4]
    a7c8:	3b04      	subs	r3, #4
    a7ca:	4598      	cmp	r8, r3
    a7cc:	d304      	bcc.n	a7d8 <quorem+0xa8>
    a7ce:	e007      	b.n	a7e0 <quorem+0xb0>
    a7d0:	4598      	cmp	r8, r3
    a7d2:	f104 34ff 	add.w	r4, r4, #4294967295
    a7d6:	d203      	bcs.n	a7e0 <quorem+0xb0>
    a7d8:	f853 2904 	ldr.w	r2, [r3], #-4
    a7dc:	2a00      	cmp	r2, #0
    a7de:	d0f7      	beq.n	a7d0 <quorem+0xa0>
    a7e0:	f8c9 4010 	str.w	r4, [r9, #16]
    a7e4:	4648      	mov	r0, r9
    a7e6:	f7fc f8c3 	bl	6970 <__mcmp>
    a7ea:	2800      	cmp	r0, #0
    a7ec:	db2b      	blt.n	a846 <quorem+0x116>
    a7ee:	3601      	adds	r6, #1
    a7f0:	4641      	mov	r1, r8
    a7f2:	2300      	movs	r3, #0
    a7f4:	f855 0b04 	ldr.w	r0, [r5], #4
    a7f8:	f8d1 c000 	ldr.w	ip, [r1]
    a7fc:	b282      	uxth	r2, r0
    a7fe:	1a9a      	subs	r2, r3, r2
    a800:	0c03      	lsrs	r3, r0, #16
    a802:	fa12 f28c 	uxtah	r2, r2, ip
    a806:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
    a80a:	eb03 4322 	add.w	r3, r3, r2, asr #16
    a80e:	b292      	uxth	r2, r2
    a810:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    a814:	42af      	cmp	r7, r5
    a816:	f841 2b04 	str.w	r2, [r1], #4
    a81a:	ea4f 4323 	mov.w	r3, r3, asr #16
    a81e:	d2e9      	bcs.n	a7f4 <quorem+0xc4>
    a820:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
    a824:	eb08 0384 	add.w	r3, r8, r4, lsl #2
    a828:	b96a      	cbnz	r2, a846 <quorem+0x116>
    a82a:	3b04      	subs	r3, #4
    a82c:	4598      	cmp	r8, r3
    a82e:	d304      	bcc.n	a83a <quorem+0x10a>
    a830:	e007      	b.n	a842 <quorem+0x112>
    a832:	4598      	cmp	r8, r3
    a834:	f104 34ff 	add.w	r4, r4, #4294967295
    a838:	d203      	bcs.n	a842 <quorem+0x112>
    a83a:	f853 2904 	ldr.w	r2, [r3], #-4
    a83e:	2a00      	cmp	r2, #0
    a840:	d0f7      	beq.n	a832 <quorem+0x102>
    a842:	f8c9 4010 	str.w	r4, [r9, #16]
    a846:	4630      	mov	r0, r6
    a848:	b003      	add	sp, #12
    a84a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a84e:	2000      	movs	r0, #0
    a850:	b003      	add	sp, #12
    a852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a856:	bf00      	nop

0000a858 <_dtoa_r>:
    a858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a85c:	ed2d 8b02 	vpush	{d8}
    a860:	b08f      	sub	sp, #60	; 0x3c
    a862:	ed8d 0b02 	vstr	d0, [sp, #8]
    a866:	9101      	str	r1, [sp, #4]
    a868:	6b81      	ldr	r1, [r0, #56]	; 0x38
    a86a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    a86c:	9305      	str	r3, [sp, #20]
    a86e:	ec57 6b10 	vmov	r6, r7, d0
    a872:	4604      	mov	r4, r0
    a874:	4693      	mov	fp, r2
    a876:	b141      	cbz	r1, a88a <_dtoa_r+0x32>
    a878:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    a87a:	604a      	str	r2, [r1, #4]
    a87c:	2301      	movs	r3, #1
    a87e:	4093      	lsls	r3, r2
    a880:	608b      	str	r3, [r1, #8]
    a882:	f7fb fdbd 	bl	6400 <_Bfree>
    a886:	2300      	movs	r3, #0
    a888:	63a3      	str	r3, [r4, #56]	; 0x38
    a88a:	f1b7 0800 	subs.w	r8, r7, #0
    a88e:	bfb4      	ite	lt
    a890:	2301      	movlt	r3, #1
    a892:	2300      	movge	r3, #0
    a894:	602b      	str	r3, [r5, #0]
    a896:	4bbe      	ldr	r3, [pc, #760]	; (ab90 <_dtoa_r+0x338>)
    a898:	bfbc      	itt	lt
    a89a:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
    a89e:	f8cd 800c 	strlt.w	r8, [sp, #12]
    a8a2:	ea33 0308 	bics.w	r3, r3, r8
    a8a6:	f000 809f 	beq.w	a9e8 <_dtoa_r+0x190>
    a8aa:	ed9d 8b02 	vldr	d8, [sp, #8]
    a8ae:	eeb5 8b40 	vcmp.f64	d8, #0.0
    a8b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a8b6:	d111      	bne.n	a8dc <_dtoa_r+0x84>
    a8b8:	9a05      	ldr	r2, [sp, #20]
    a8ba:	2301      	movs	r3, #1
    a8bc:	6013      	str	r3, [r2, #0]
    a8be:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    a8c0:	2b00      	cmp	r3, #0
    a8c2:	f000 823f 	beq.w	ad44 <_dtoa_r+0x4ec>
    a8c6:	4bb3      	ldr	r3, [pc, #716]	; (ab94 <_dtoa_r+0x33c>)
    a8c8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    a8ca:	6013      	str	r3, [r2, #0]
    a8cc:	3b01      	subs	r3, #1
    a8ce:	9300      	str	r3, [sp, #0]
    a8d0:	9800      	ldr	r0, [sp, #0]
    a8d2:	b00f      	add	sp, #60	; 0x3c
    a8d4:	ecbd 8b02 	vpop	{d8}
    a8d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a8dc:	aa0c      	add	r2, sp, #48	; 0x30
    a8de:	a90d      	add	r1, sp, #52	; 0x34
    a8e0:	4620      	mov	r0, r4
    a8e2:	eeb0 0b48 	vmov.f64	d0, d8
    a8e6:	f7fc f9a3 	bl	6c30 <__d2b>
    a8ea:	ea5f 5318 	movs.w	r3, r8, lsr #20
    a8ee:	4605      	mov	r5, r0
    a8f0:	f040 8092 	bne.w	aa18 <_dtoa_r+0x1c0>
    a8f4:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
    a8f8:	440b      	add	r3, r1
    a8fa:	f203 4232 	addw	r2, r3, #1074	; 0x432
    a8fe:	2a20      	cmp	r2, #32
    a900:	f340 82fa 	ble.w	aef8 <_dtoa_r+0x6a0>
    a904:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
    a908:	fa08 f802 	lsl.w	r8, r8, r2
    a90c:	f203 4212 	addw	r2, r3, #1042	; 0x412
    a910:	40d6      	lsrs	r6, r2
    a912:	ea48 0206 	orr.w	r2, r8, r6
    a916:	ee07 2a10 	vmov	s14, r2
    a91a:	eeb8 7b47 	vcvt.f64.u32	d7, s14
    a91e:	1e58      	subs	r0, r3, #1
    a920:	ee17 6a90 	vmov	r6, s15
    a924:	ec53 2b17 	vmov	r2, r3, d7
    a928:	f04f 0a01 	mov.w	sl, #1
    a92c:	f1a6 73f8 	sub.w	r3, r6, #32505856	; 0x1f00000
    a930:	ed9f 3b91 	vldr	d3, [pc, #580]	; ab78 <_dtoa_r+0x320>
    a934:	ed9f 7b92 	vldr	d7, [pc, #584]	; ab80 <_dtoa_r+0x328>
    a938:	ed9f 5b93 	vldr	d5, [pc, #588]	; ab88 <_dtoa_r+0x330>
    a93c:	ee06 0a90 	vmov	s13, r0
    a940:	ec43 2b12 	vmov	d2, r2, r3
    a944:	eeb8 4be6 	vcvt.f64.s32	d4, s13
    a948:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
    a94c:	ee32 6b46 	vsub.f64	d6, d2, d6
    a950:	eea6 7b03 	vfma.f64	d7, d6, d3
    a954:	eea4 7b05 	vfma.f64	d7, d4, d5
    a958:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    a95c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    a960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a964:	ee16 7a90 	vmov	r7, s13
    a968:	d508      	bpl.n	a97c <_dtoa_r+0x124>
    a96a:	eeb8 6be6 	vcvt.f64.s32	d6, s13
    a96e:	eeb4 6b47 	vcmp.f64	d6, d7
    a972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a976:	bf18      	it	ne
    a978:	f107 37ff 	addne.w	r7, r7, #4294967295
    a97c:	2f16      	cmp	r7, #22
    a97e:	f200 8145 	bhi.w	ac0c <_dtoa_r+0x3b4>
    a982:	4b85      	ldr	r3, [pc, #532]	; (ab98 <_dtoa_r+0x340>)
    a984:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    a988:	ed93 7b00 	vldr	d7, [r3]
    a98c:	eeb4 8bc7 	vcmpe.f64	d8, d7
    a990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a994:	d557      	bpl.n	aa46 <_dtoa_r+0x1ee>
    a996:	1a09      	subs	r1, r1, r0
    a998:	2300      	movs	r3, #0
    a99a:	f1b1 0801 	subs.w	r8, r1, #1
    a99e:	f107 37ff 	add.w	r7, r7, #4294967295
    a9a2:	930a      	str	r3, [sp, #40]	; 0x28
    a9a4:	f100 8139 	bmi.w	ac1a <_dtoa_r+0x3c2>
    a9a8:	2300      	movs	r3, #0
    a9aa:	9306      	str	r3, [sp, #24]
    a9ac:	2f00      	cmp	r7, #0
    a9ae:	da52      	bge.n	aa56 <_dtoa_r+0x1fe>
    a9b0:	9b06      	ldr	r3, [sp, #24]
    a9b2:	9704      	str	r7, [sp, #16]
    a9b4:	1bdb      	subs	r3, r3, r7
    a9b6:	9306      	str	r3, [sp, #24]
    a9b8:	427b      	negs	r3, r7
    a9ba:	9308      	str	r3, [sp, #32]
    a9bc:	9b01      	ldr	r3, [sp, #4]
    a9be:	2b09      	cmp	r3, #9
    a9c0:	f04f 0700 	mov.w	r7, #0
    a9c4:	d84e      	bhi.n	aa64 <_dtoa_r+0x20c>
    a9c6:	2b05      	cmp	r3, #5
    a9c8:	f340 829d 	ble.w	af06 <_dtoa_r+0x6ae>
    a9cc:	3b04      	subs	r3, #4
    a9ce:	9301      	str	r3, [sp, #4]
    a9d0:	2600      	movs	r6, #0
    a9d2:	9b01      	ldr	r3, [sp, #4]
    a9d4:	1e9a      	subs	r2, r3, #2
    a9d6:	2a03      	cmp	r2, #3
    a9d8:	f200 8125 	bhi.w	ac26 <_dtoa_r+0x3ce>
    a9dc:	e8df f012 	tbh	[pc, r2, lsl #1]
    a9e0:	03a703aa 	.word	0x03a703aa
    a9e4:	037e039d 	.word	0x037e039d
    a9e8:	9a05      	ldr	r2, [sp, #20]
    a9ea:	f3c8 0813 	ubfx	r8, r8, #0, #20
    a9ee:	f242 730f 	movw	r3, #9999	; 0x270f
    a9f2:	ea58 0806 	orrs.w	r8, r8, r6
    a9f6:	6013      	str	r3, [r2, #0]
    a9f8:	d11e      	bne.n	aa38 <_dtoa_r+0x1e0>
    a9fa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    a9fc:	2b00      	cmp	r3, #0
    a9fe:	f000 8591 	beq.w	b524 <_dtoa_r+0xccc>
    aa02:	4b66      	ldr	r3, [pc, #408]	; (ab9c <_dtoa_r+0x344>)
    aa04:	9300      	str	r3, [sp, #0]
    aa06:	3308      	adds	r3, #8
    aa08:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    aa0a:	9800      	ldr	r0, [sp, #0]
    aa0c:	6013      	str	r3, [r2, #0]
    aa0e:	b00f      	add	sp, #60	; 0x3c
    aa10:	ecbd 8b02 	vpop	{d8}
    aa14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aa18:	ee18 6a90 	vmov	r6, s17
    aa1c:	f3c6 0613 	ubfx	r6, r6, #0, #20
    aa20:	f2a3 30ff 	subw	r0, r3, #1023	; 0x3ff
    aa24:	ec53 2b18 	vmov	r2, r3, d8
    aa28:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
    aa2c:	990c      	ldr	r1, [sp, #48]	; 0x30
    aa2e:	f04f 0a00 	mov.w	sl, #0
    aa32:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    aa36:	e77b      	b.n	a930 <_dtoa_r+0xd8>
    aa38:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    aa3a:	2b00      	cmp	r3, #0
    aa3c:	f040 833b 	bne.w	b0b6 <_dtoa_r+0x85e>
    aa40:	4b57      	ldr	r3, [pc, #348]	; (aba0 <_dtoa_r+0x348>)
    aa42:	9300      	str	r3, [sp, #0]
    aa44:	e744      	b.n	a8d0 <_dtoa_r+0x78>
    aa46:	1a09      	subs	r1, r1, r0
    aa48:	2300      	movs	r3, #0
    aa4a:	f1b1 0801 	subs.w	r8, r1, #1
    aa4e:	930a      	str	r3, [sp, #40]	; 0x28
    aa50:	f100 80e3 	bmi.w	ac1a <_dtoa_r+0x3c2>
    aa54:	9306      	str	r3, [sp, #24]
    aa56:	2300      	movs	r3, #0
    aa58:	9308      	str	r3, [sp, #32]
    aa5a:	9b01      	ldr	r3, [sp, #4]
    aa5c:	9704      	str	r7, [sp, #16]
    aa5e:	2b09      	cmp	r3, #9
    aa60:	44b8      	add	r8, r7
    aa62:	d9b0      	bls.n	a9c6 <_dtoa_r+0x16e>
    aa64:	2300      	movs	r3, #0
    aa66:	2601      	movs	r6, #1
    aa68:	9301      	str	r3, [sp, #4]
    aa6a:	9607      	str	r6, [sp, #28]
    aa6c:	f04f 39ff 	mov.w	r9, #4294967295
    aa70:	469b      	mov	fp, r3
    aa72:	2100      	movs	r1, #0
    aa74:	63e1      	str	r1, [r4, #60]	; 0x3c
    aa76:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    aa7a:	4620      	mov	r0, r4
    aa7c:	f7fb fc9a 	bl	63b4 <_Balloc>
    aa80:	9000      	str	r0, [sp, #0]
    aa82:	2800      	cmp	r0, #0
    aa84:	f000 8540 	beq.w	b508 <_dtoa_r+0xcb0>
    aa88:	9b00      	ldr	r3, [sp, #0]
    aa8a:	63a3      	str	r3, [r4, #56]	; 0x38
    aa8c:	f1b9 0f0e 	cmp.w	r9, #14
    aa90:	f200 80dc 	bhi.w	ac4c <_dtoa_r+0x3f4>
    aa94:	2e00      	cmp	r6, #0
    aa96:	f000 80d9 	beq.w	ac4c <_dtoa_r+0x3f4>
    aa9a:	9b04      	ldr	r3, [sp, #16]
    aa9c:	2b00      	cmp	r3, #0
    aa9e:	f340 83de 	ble.w	b25e <_dtoa_r+0xa06>
    aaa2:	4a3d      	ldr	r2, [pc, #244]	; (ab98 <_dtoa_r+0x340>)
    aaa4:	f003 010f 	and.w	r1, r3, #15
    aaa8:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    aaac:	ed92 7b00 	vldr	d7, [r2]
    aab0:	111a      	asrs	r2, r3, #4
    aab2:	05db      	lsls	r3, r3, #23
    aab4:	f140 8382 	bpl.w	b1bc <_dtoa_r+0x964>
    aab8:	493a      	ldr	r1, [pc, #232]	; (aba4 <_dtoa_r+0x34c>)
    aaba:	ed91 6b08 	vldr	d6, [r1, #32]
    aabe:	f002 020f 	and.w	r2, r2, #15
    aac2:	2003      	movs	r0, #3
    aac4:	ee88 5b06 	vdiv.f64	d5, d8, d6
    aac8:	b15a      	cbz	r2, aae2 <_dtoa_r+0x28a>
    aaca:	4936      	ldr	r1, [pc, #216]	; (aba4 <_dtoa_r+0x34c>)
    aacc:	07d6      	lsls	r6, r2, #31
    aace:	d504      	bpl.n	aada <_dtoa_r+0x282>
    aad0:	ed91 6b00 	vldr	d6, [r1]
    aad4:	3001      	adds	r0, #1
    aad6:	ee27 7b06 	vmul.f64	d7, d7, d6
    aada:	1052      	asrs	r2, r2, #1
    aadc:	f101 0108 	add.w	r1, r1, #8
    aae0:	d1f4      	bne.n	aacc <_dtoa_r+0x274>
    aae2:	ee85 6b07 	vdiv.f64	d6, d5, d7
    aae6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    aae8:	b13b      	cbz	r3, aafa <_dtoa_r+0x2a2>
    aaea:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    aaee:	eeb4 6bc7 	vcmpe.f64	d6, d7
    aaf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    aaf6:	f100 84ae 	bmi.w	b456 <_dtoa_r+0xbfe>
    aafa:	ee07 0a90 	vmov	s15, r0
    aafe:	eeb8 5be7 	vcvt.f64.s32	d5, s15
    ab02:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    ab06:	eea5 7b06 	vfma.f64	d7, d5, d6
    ab0a:	ee17 2a90 	vmov	r2, s15
    ab0e:	ec51 0b17 	vmov	r0, r1, d7
    ab12:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
    ab16:	f1b9 0f00 	cmp.w	r9, #0
    ab1a:	f000 8388 	beq.w	b22e <_dtoa_r+0x9d6>
    ab1e:	9e04      	ldr	r6, [sp, #16]
    ab20:	464a      	mov	r2, r9
    ab22:	9b07      	ldr	r3, [sp, #28]
    ab24:	2b00      	cmp	r3, #0
    ab26:	f000 8447 	beq.w	b3b8 <_dtoa_r+0xb60>
    ab2a:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
    ab2e:	4b1a      	ldr	r3, [pc, #104]	; (ab98 <_dtoa_r+0x340>)
    ab30:	eefd 4bc6 	vcvt.s32.f64	s9, d6
    ab34:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
    ab38:	eeb8 7be4 	vcvt.f64.s32	d7, s9
    ab3c:	ee36 7b47 	vsub.f64	d7, d6, d7
    ab40:	ed1c 6b02 	vldr	d6, [ip, #-8]
    ab44:	ee83 5b06 	vdiv.f64	d5, d3, d6
    ab48:	ec41 0b16 	vmov	d6, r0, r1
    ab4c:	ee14 0a90 	vmov	r0, s9
    ab50:	ee35 5b46 	vsub.f64	d5, d5, d6
    ab54:	9900      	ldr	r1, [sp, #0]
    ab56:	eeb4 5bc7 	vcmpe.f64	d5, d7
    ab5a:	3030      	adds	r0, #48	; 0x30
    ab5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ab60:	f801 0b01 	strb.w	r0, [r1], #1
    ab64:	f300 84ac 	bgt.w	b4c0 <_dtoa_r+0xc68>
    ab68:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
    ab6c:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    ab70:	f04f 0c00 	mov.w	ip, #0
    ab74:	e031      	b.n	abda <_dtoa_r+0x382>
    ab76:	bf00      	nop
    ab78:	636f4361 	.word	0x636f4361
    ab7c:	3fd287a7 	.word	0x3fd287a7
    ab80:	8b60c8b3 	.word	0x8b60c8b3
    ab84:	3fc68a28 	.word	0x3fc68a28
    ab88:	509f79fb 	.word	0x509f79fb
    ab8c:	3fd34413 	.word	0x3fd34413
    ab90:	7ff00000 	.word	0x7ff00000
    ab94:	20000909 	.word	0x20000909
    ab98:	200002a8 	.word	0x200002a8
    ab9c:	20000834 	.word	0x20000834
    aba0:	20000840 	.word	0x20000840
    aba4:	20000280 	.word	0x20000280
    aba8:	f10c 0c01 	add.w	ip, ip, #1
    abac:	4594      	cmp	ip, r2
    abae:	da4d      	bge.n	ac4c <_dtoa_r+0x3f4>
    abb0:	ee27 7b04 	vmul.f64	d7, d7, d4
    abb4:	ee25 5b04 	vmul.f64	d5, d5, d4
    abb8:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    abbc:	ee16 3a90 	vmov	r3, s13
    abc0:	eeb8 3be6 	vcvt.f64.s32	d3, s13
    abc4:	3330      	adds	r3, #48	; 0x30
    abc6:	ee37 7b43 	vsub.f64	d7, d7, d3
    abca:	eeb4 7bc5 	vcmpe.f64	d7, d5
    abce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    abd2:	f801 3b01 	strb.w	r3, [r1], #1
    abd6:	f100 8473 	bmi.w	b4c0 <_dtoa_r+0xc68>
    abda:	ee32 6b47 	vsub.f64	d6, d2, d7
    abde:	eeb4 6bc5 	vcmpe.f64	d6, d5
    abe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    abe6:	d5df      	bpl.n	aba8 <_dtoa_r+0x350>
    abe8:	9a00      	ldr	r2, [sp, #0]
    abea:	9604      	str	r6, [sp, #16]
    abec:	e002      	b.n	abf4 <_dtoa_r+0x39c>
    abee:	428a      	cmp	r2, r1
    abf0:	f000 8450 	beq.w	b494 <_dtoa_r+0xc3c>
    abf4:	4689      	mov	r9, r1
    abf6:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
    abfa:	2b39      	cmp	r3, #57	; 0x39
    abfc:	d0f7      	beq.n	abee <_dtoa_r+0x396>
    abfe:	3301      	adds	r3, #1
    ac00:	b2db      	uxtb	r3, r3
    ac02:	700b      	strb	r3, [r1, #0]
    ac04:	9b04      	ldr	r3, [sp, #16]
    ac06:	3301      	adds	r3, #1
    ac08:	9304      	str	r3, [sp, #16]
    ac0a:	e155      	b.n	aeb8 <_dtoa_r+0x660>
    ac0c:	1a09      	subs	r1, r1, r0
    ac0e:	2301      	movs	r3, #1
    ac10:	f1b1 0801 	subs.w	r8, r1, #1
    ac14:	930a      	str	r3, [sp, #40]	; 0x28
    ac16:	f57f aec7 	bpl.w	a9a8 <_dtoa_r+0x150>
    ac1a:	f1c1 0301 	rsb	r3, r1, #1
    ac1e:	9306      	str	r3, [sp, #24]
    ac20:	f04f 0800 	mov.w	r8, #0
    ac24:	e6c2      	b.n	a9ac <_dtoa_r+0x154>
    ac26:	2600      	movs	r6, #0
    ac28:	63e6      	str	r6, [r4, #60]	; 0x3c
    ac2a:	4631      	mov	r1, r6
    ac2c:	4620      	mov	r0, r4
    ac2e:	f7fb fbc1 	bl	63b4 <_Balloc>
    ac32:	9000      	str	r0, [sp, #0]
    ac34:	2800      	cmp	r0, #0
    ac36:	f000 8467 	beq.w	b508 <_dtoa_r+0xcb0>
    ac3a:	9b00      	ldr	r3, [sp, #0]
    ac3c:	63a3      	str	r3, [r4, #56]	; 0x38
    ac3e:	f04f 33ff 	mov.w	r3, #4294967295
    ac42:	930b      	str	r3, [sp, #44]	; 0x2c
    ac44:	4699      	mov	r9, r3
    ac46:	2301      	movs	r3, #1
    ac48:	46b3      	mov	fp, r6
    ac4a:	9307      	str	r3, [sp, #28]
    ac4c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    ac4e:	2a00      	cmp	r2, #0
    ac50:	db55      	blt.n	acfe <_dtoa_r+0x4a6>
    ac52:	9904      	ldr	r1, [sp, #16]
    ac54:	290e      	cmp	r1, #14
    ac56:	dc52      	bgt.n	acfe <_dtoa_r+0x4a6>
    ac58:	4bb7      	ldr	r3, [pc, #732]	; (af38 <_dtoa_r+0x6e0>)
    ac5a:	f1bb 0f00 	cmp.w	fp, #0
    ac5e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    ac62:	ed93 6b00 	vldr	d6, [r3]
    ac66:	da15      	bge.n	ac94 <_dtoa_r+0x43c>
    ac68:	f1b9 0f00 	cmp.w	r9, #0
    ac6c:	dc12      	bgt.n	ac94 <_dtoa_r+0x43c>
    ac6e:	f040 82f2 	bne.w	b256 <_dtoa_r+0x9fe>
    ac72:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
    ac76:	ee26 7b07 	vmul.f64	d7, d6, d7
    ac7a:	eeb4 8bc7 	vcmpe.f64	d8, d7
    ac7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ac82:	46ca      	mov	sl, r9
    ac84:	464e      	mov	r6, r9
    ac86:	f200 826d 	bhi.w	b164 <_dtoa_r+0x90c>
    ac8a:	f8dd 8000 	ldr.w	r8, [sp]
    ac8e:	ea6f 0b0b 	mvn.w	fp, fp
    ac92:	e270      	b.n	b176 <_dtoa_r+0x91e>
    ac94:	ee88 7b06 	vdiv.f64	d7, d8, d6
    ac98:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    ac9c:	9900      	ldr	r1, [sp, #0]
    ac9e:	ee17 3a10 	vmov	r3, s14
    aca2:	f1b9 0f01 	cmp.w	r9, #1
    aca6:	f103 0330 	add.w	r3, r3, #48	; 0x30
    acaa:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
    acae:	f801 3b01 	strb.w	r3, [r1], #1
    acb2:	eea5 8b46 	vfms.f64	d8, d5, d6
    acb6:	f000 8334 	beq.w	b322 <_dtoa_r+0xaca>
    acba:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    acbe:	2301      	movs	r3, #1
    acc0:	e011      	b.n	ace6 <_dtoa_r+0x48e>
    acc2:	ee88 7b06 	vdiv.f64	d7, d8, d6
    acc6:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    acca:	3301      	adds	r3, #1
    accc:	ee17 2a10 	vmov	r2, s14
    acd0:	454b      	cmp	r3, r9
    acd2:	f102 0230 	add.w	r2, r2, #48	; 0x30
    acd6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
    acda:	f801 2b01 	strb.w	r2, [r1], #1
    acde:	eea5 8b46 	vfms.f64	d8, d5, d6
    ace2:	f000 831e 	beq.w	b322 <_dtoa_r+0xaca>
    ace6:	ee28 8b04 	vmul.f64	d8, d8, d4
    acea:	eeb5 8b40 	vcmp.f64	d8, #0.0
    acee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    acf2:	d1e6      	bne.n	acc2 <_dtoa_r+0x46a>
    acf4:	9b04      	ldr	r3, [sp, #16]
    acf6:	3301      	adds	r3, #1
    acf8:	9304      	str	r3, [sp, #16]
    acfa:	4689      	mov	r9, r1
    acfc:	e0dc      	b.n	aeb8 <_dtoa_r+0x660>
    acfe:	9b07      	ldr	r3, [sp, #28]
    ad00:	b343      	cbz	r3, ad54 <_dtoa_r+0x4fc>
    ad02:	9b01      	ldr	r3, [sp, #4]
    ad04:	2b01      	cmp	r3, #1
    ad06:	f340 8276 	ble.w	b1f6 <_dtoa_r+0x99e>
    ad0a:	9b08      	ldr	r3, [sp, #32]
    ad0c:	f109 3aff 	add.w	sl, r9, #4294967295
    ad10:	4553      	cmp	r3, sl
    ad12:	f280 823f 	bge.w	b194 <_dtoa_r+0x93c>
    ad16:	9b08      	ldr	r3, [sp, #32]
    ad18:	f8cd a020 	str.w	sl, [sp, #32]
    ad1c:	ebaa 0203 	sub.w	r2, sl, r3
    ad20:	4417      	add	r7, r2
    ad22:	f04f 0a00 	mov.w	sl, #0
    ad26:	f1b9 0f00 	cmp.w	r9, #0
    ad2a:	f2c0 8325 	blt.w	b378 <_dtoa_r+0xb20>
    ad2e:	9b06      	ldr	r3, [sp, #24]
    ad30:	9309      	str	r3, [sp, #36]	; 0x24
    ad32:	444b      	add	r3, r9
    ad34:	44c8      	add	r8, r9
    ad36:	9306      	str	r3, [sp, #24]
    ad38:	2101      	movs	r1, #1
    ad3a:	4620      	mov	r0, r4
    ad3c:	f7fb fc64 	bl	6608 <__i2b>
    ad40:	4606      	mov	r6, r0
    ad42:	e00c      	b.n	ad5e <_dtoa_r+0x506>
    ad44:	4b7d      	ldr	r3, [pc, #500]	; (af3c <_dtoa_r+0x6e4>)
    ad46:	9300      	str	r3, [sp, #0]
    ad48:	9800      	ldr	r0, [sp, #0]
    ad4a:	b00f      	add	sp, #60	; 0x3c
    ad4c:	ecbd 8b02 	vpop	{d8}
    ad50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ad54:	9b06      	ldr	r3, [sp, #24]
    ad56:	f8dd a020 	ldr.w	sl, [sp, #32]
    ad5a:	9e07      	ldr	r6, [sp, #28]
    ad5c:	9309      	str	r3, [sp, #36]	; 0x24
    ad5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ad60:	b16b      	cbz	r3, ad7e <_dtoa_r+0x526>
    ad62:	f1b8 0f00 	cmp.w	r8, #0
    ad66:	dd0a      	ble.n	ad7e <_dtoa_r+0x526>
    ad68:	4543      	cmp	r3, r8
    ad6a:	9906      	ldr	r1, [sp, #24]
    ad6c:	461a      	mov	r2, r3
    ad6e:	bfa8      	it	ge
    ad70:	4642      	movge	r2, r8
    ad72:	1a89      	subs	r1, r1, r2
    ad74:	1a9b      	subs	r3, r3, r2
    ad76:	9106      	str	r1, [sp, #24]
    ad78:	9309      	str	r3, [sp, #36]	; 0x24
    ad7a:	eba8 0802 	sub.w	r8, r8, r2
    ad7e:	9b08      	ldr	r3, [sp, #32]
    ad80:	b163      	cbz	r3, ad9c <_dtoa_r+0x544>
    ad82:	9b07      	ldr	r3, [sp, #28]
    ad84:	2b00      	cmp	r3, #0
    ad86:	f000 82a7 	beq.w	b2d8 <_dtoa_r+0xa80>
    ad8a:	f1ba 0f00 	cmp.w	sl, #0
    ad8e:	f300 8204 	bgt.w	b19a <_dtoa_r+0x942>
    ad92:	9b08      	ldr	r3, [sp, #32]
    ad94:	ebb3 020a 	subs.w	r2, r3, sl
    ad98:	f040 82ff 	bne.w	b39a <_dtoa_r+0xb42>
    ad9c:	2101      	movs	r1, #1
    ad9e:	4620      	mov	r0, r4
    ada0:	f7fb fc32 	bl	6608 <__i2b>
    ada4:	2f00      	cmp	r7, #0
    ada6:	4682      	mov	sl, r0
    ada8:	f300 80af 	bgt.w	af0a <_dtoa_r+0x6b2>
    adac:	9b01      	ldr	r3, [sp, #4]
    adae:	2b01      	cmp	r3, #1
    adb0:	f340 8187 	ble.w	b0c2 <_dtoa_r+0x86a>
    adb4:	2300      	movs	r3, #0
    adb6:	9308      	str	r3, [sp, #32]
    adb8:	2001      	movs	r0, #1
    adba:	2f00      	cmp	r7, #0
    adbc:	f040 80b1 	bne.w	af22 <_dtoa_r+0x6ca>
    adc0:	4440      	add	r0, r8
    adc2:	f010 001f 	ands.w	r0, r0, #31
    adc6:	f000 817a 	beq.w	b0be <_dtoa_r+0x866>
    adca:	f1c0 0220 	rsb	r2, r0, #32
    adce:	2a04      	cmp	r2, #4
    add0:	f300 8088 	bgt.w	aee4 <_dtoa_r+0x68c>
    add4:	f040 81f6 	bne.w	b1c4 <_dtoa_r+0x96c>
    add8:	9b06      	ldr	r3, [sp, #24]
    adda:	2b00      	cmp	r3, #0
    addc:	dd05      	ble.n	adea <_dtoa_r+0x592>
    adde:	4629      	mov	r1, r5
    ade0:	461a      	mov	r2, r3
    ade2:	4620      	mov	r0, r4
    ade4:	f7fb fd4c 	bl	6880 <__lshift>
    ade8:	4605      	mov	r5, r0
    adea:	f1b8 0f00 	cmp.w	r8, #0
    adee:	dd05      	ble.n	adfc <_dtoa_r+0x5a4>
    adf0:	4651      	mov	r1, sl
    adf2:	4642      	mov	r2, r8
    adf4:	4620      	mov	r0, r4
    adf6:	f7fb fd43 	bl	6880 <__lshift>
    adfa:	4682      	mov	sl, r0
    adfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    adfe:	2b00      	cmp	r3, #0
    ae00:	f040 813f 	bne.w	b082 <_dtoa_r+0x82a>
    ae04:	f1b9 0f00 	cmp.w	r9, #0
    ae08:	f340 8125 	ble.w	b056 <_dtoa_r+0x7fe>
    ae0c:	9b07      	ldr	r3, [sp, #28]
    ae0e:	2b00      	cmp	r3, #0
    ae10:	f040 80a3 	bne.w	af5a <_dtoa_r+0x702>
    ae14:	9b04      	ldr	r3, [sp, #16]
    ae16:	3301      	adds	r3, #1
    ae18:	9304      	str	r3, [sp, #16]
    ae1a:	f8dd 8000 	ldr.w	r8, [sp]
    ae1e:	2701      	movs	r7, #1
    ae20:	e007      	b.n	ae32 <_dtoa_r+0x5da>
    ae22:	4629      	mov	r1, r5
    ae24:	2300      	movs	r3, #0
    ae26:	220a      	movs	r2, #10
    ae28:	4620      	mov	r0, r4
    ae2a:	f7fb faf3 	bl	6414 <__multadd>
    ae2e:	3701      	adds	r7, #1
    ae30:	4605      	mov	r5, r0
    ae32:	4651      	mov	r1, sl
    ae34:	4628      	mov	r0, r5
    ae36:	f7ff fc7b 	bl	a730 <quorem>
    ae3a:	45b9      	cmp	r9, r7
    ae3c:	f100 0030 	add.w	r0, r0, #48	; 0x30
    ae40:	f808 0b01 	strb.w	r0, [r8], #1
    ae44:	dced      	bgt.n	ae22 <_dtoa_r+0x5ca>
    ae46:	f1b9 0f00 	cmp.w	r9, #0
    ae4a:	9a00      	ldr	r2, [sp, #0]
    ae4c:	bfcc      	ite	gt
    ae4e:	46cb      	movgt	fp, r9
    ae50:	f04f 0b01 	movle.w	fp, #1
    ae54:	4603      	mov	r3, r0
    ae56:	4493      	add	fp, r2
    ae58:	2700      	movs	r7, #0
    ae5a:	4629      	mov	r1, r5
    ae5c:	2201      	movs	r2, #1
    ae5e:	4620      	mov	r0, r4
    ae60:	9301      	str	r3, [sp, #4]
    ae62:	f7fb fd0d 	bl	6880 <__lshift>
    ae66:	4651      	mov	r1, sl
    ae68:	4605      	mov	r5, r0
    ae6a:	f7fb fd81 	bl	6970 <__mcmp>
    ae6e:	2800      	cmp	r0, #0
    ae70:	f340 81af 	ble.w	b1d2 <_dtoa_r+0x97a>
    ae74:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
    ae78:	9a00      	ldr	r2, [sp, #0]
    ae7a:	f10b 3bff 	add.w	fp, fp, #4294967295
    ae7e:	e004      	b.n	ae8a <_dtoa_r+0x632>
    ae80:	455a      	cmp	r2, fp
    ae82:	f000 81b1 	beq.w	b1e8 <_dtoa_r+0x990>
    ae86:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
    ae8a:	2b39      	cmp	r3, #57	; 0x39
    ae8c:	f10b 0901 	add.w	r9, fp, #1
    ae90:	d0f6      	beq.n	ae80 <_dtoa_r+0x628>
    ae92:	3301      	adds	r3, #1
    ae94:	f88b 3000 	strb.w	r3, [fp]
    ae98:	4651      	mov	r1, sl
    ae9a:	4620      	mov	r0, r4
    ae9c:	f7fb fab0 	bl	6400 <_Bfree>
    aea0:	b156      	cbz	r6, aeb8 <_dtoa_r+0x660>
    aea2:	b12f      	cbz	r7, aeb0 <_dtoa_r+0x658>
    aea4:	42b7      	cmp	r7, r6
    aea6:	d003      	beq.n	aeb0 <_dtoa_r+0x658>
    aea8:	4639      	mov	r1, r7
    aeaa:	4620      	mov	r0, r4
    aeac:	f7fb faa8 	bl	6400 <_Bfree>
    aeb0:	4631      	mov	r1, r6
    aeb2:	4620      	mov	r0, r4
    aeb4:	f7fb faa4 	bl	6400 <_Bfree>
    aeb8:	4629      	mov	r1, r5
    aeba:	4620      	mov	r0, r4
    aebc:	f7fb faa0 	bl	6400 <_Bfree>
    aec0:	2300      	movs	r3, #0
    aec2:	f889 3000 	strb.w	r3, [r9]
    aec6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    aeca:	601a      	str	r2, [r3, #0]
    aecc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    aece:	2b00      	cmp	r3, #0
    aed0:	f43f acfe 	beq.w	a8d0 <_dtoa_r+0x78>
    aed4:	9800      	ldr	r0, [sp, #0]
    aed6:	f8c3 9000 	str.w	r9, [r3]
    aeda:	b00f      	add	sp, #60	; 0x3c
    aedc:	ecbd 8b02 	vpop	{d8}
    aee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aee4:	f1c0 001c 	rsb	r0, r0, #28
    aee8:	9b06      	ldr	r3, [sp, #24]
    aeea:	4403      	add	r3, r0
    aeec:	9306      	str	r3, [sp, #24]
    aeee:	9b09      	ldr	r3, [sp, #36]	; 0x24
    aef0:	4403      	add	r3, r0
    aef2:	9309      	str	r3, [sp, #36]	; 0x24
    aef4:	4480      	add	r8, r0
    aef6:	e76f      	b.n	add8 <_dtoa_r+0x580>
    aef8:	f1c2 0220 	rsb	r2, r2, #32
    aefc:	fa06 f202 	lsl.w	r2, r6, r2
    af00:	ee07 2a10 	vmov	s14, r2
    af04:	e509      	b.n	a91a <_dtoa_r+0xc2>
    af06:	2601      	movs	r6, #1
    af08:	e563      	b.n	a9d2 <_dtoa_r+0x17a>
    af0a:	4601      	mov	r1, r0
    af0c:	463a      	mov	r2, r7
    af0e:	4620      	mov	r0, r4
    af10:	f7fb fc56 	bl	67c0 <__pow5mult>
    af14:	9b01      	ldr	r3, [sp, #4]
    af16:	2b01      	cmp	r3, #1
    af18:	4682      	mov	sl, r0
    af1a:	f340 81c5 	ble.w	b2a8 <_dtoa_r+0xa50>
    af1e:	2300      	movs	r3, #0
    af20:	9308      	str	r3, [sp, #32]
    af22:	f8da 2010 	ldr.w	r2, [sl, #16]
    af26:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
    af2a:	6910      	ldr	r0, [r2, #16]
    af2c:	f7fb fb1c 	bl	6568 <__hi0bits>
    af30:	f1c0 0020 	rsb	r0, r0, #32
    af34:	e744      	b.n	adc0 <_dtoa_r+0x568>
    af36:	bf00      	nop
    af38:	200002a8 	.word	0x200002a8
    af3c:	20000908 	.word	0x20000908
    af40:	4631      	mov	r1, r6
    af42:	2300      	movs	r3, #0
    af44:	220a      	movs	r2, #10
    af46:	4620      	mov	r0, r4
    af48:	f7fb fa64 	bl	6414 <__multadd>
    af4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    af4e:	2b00      	cmp	r3, #0
    af50:	4606      	mov	r6, r0
    af52:	f340 82ce 	ble.w	b4f2 <_dtoa_r+0xc9a>
    af56:	9704      	str	r7, [sp, #16]
    af58:	4699      	mov	r9, r3
    af5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    af5c:	2b00      	cmp	r3, #0
    af5e:	dd05      	ble.n	af6c <_dtoa_r+0x714>
    af60:	4631      	mov	r1, r6
    af62:	461a      	mov	r2, r3
    af64:	4620      	mov	r0, r4
    af66:	f7fb fc8b 	bl	6880 <__lshift>
    af6a:	4606      	mov	r6, r0
    af6c:	9b08      	ldr	r3, [sp, #32]
    af6e:	2b00      	cmp	r3, #0
    af70:	f040 81eb 	bne.w	b34a <_dtoa_r+0xaf2>
    af74:	46b0      	mov	r8, r6
    af76:	9b02      	ldr	r3, [sp, #8]
    af78:	9f00      	ldr	r7, [sp, #0]
    af7a:	f003 0201 	and.w	r2, r3, #1
    af7e:	1e7b      	subs	r3, r7, #1
    af80:	444b      	add	r3, r9
    af82:	9308      	str	r3, [sp, #32]
    af84:	9b01      	ldr	r3, [sp, #4]
    af86:	920a      	str	r2, [sp, #40]	; 0x28
    af88:	4313      	orrs	r3, r2
    af8a:	9309      	str	r3, [sp, #36]	; 0x24
    af8c:	4651      	mov	r1, sl
    af8e:	4628      	mov	r0, r5
    af90:	f7ff fbce 	bl	a730 <quorem>
    af94:	4631      	mov	r1, r6
    af96:	4683      	mov	fp, r0
    af98:	4628      	mov	r0, r5
    af9a:	f7fb fce9 	bl	6970 <__mcmp>
    af9e:	4642      	mov	r2, r8
    afa0:	4651      	mov	r1, sl
    afa2:	4681      	mov	r9, r0
    afa4:	4620      	mov	r0, r4
    afa6:	f7fb fd05 	bl	69b4 <__mdiff>
    afaa:	68c2      	ldr	r2, [r0, #12]
    afac:	4601      	mov	r1, r0
    afae:	f10b 0330 	add.w	r3, fp, #48	; 0x30
    afb2:	2a00      	cmp	r2, #0
    afb4:	d142      	bne.n	b03c <_dtoa_r+0x7e4>
    afb6:	e9cd 0306 	strd	r0, r3, [sp, #24]
    afba:	4628      	mov	r0, r5
    afbc:	f7fb fcd8 	bl	6970 <__mcmp>
    afc0:	9906      	ldr	r1, [sp, #24]
    afc2:	9002      	str	r0, [sp, #8]
    afc4:	4620      	mov	r0, r4
    afc6:	f7fb fa1b 	bl	6400 <_Bfree>
    afca:	9a02      	ldr	r2, [sp, #8]
    afcc:	9b07      	ldr	r3, [sp, #28]
    afce:	b91a      	cbnz	r2, afd8 <_dtoa_r+0x780>
    afd0:	9909      	ldr	r1, [sp, #36]	; 0x24
    afd2:	2900      	cmp	r1, #0
    afd4:	f000 827e 	beq.w	b4d4 <_dtoa_r+0xc7c>
    afd8:	f1b9 0f00 	cmp.w	r9, #0
    afdc:	f2c0 8183 	blt.w	b2e6 <_dtoa_r+0xa8e>
    afe0:	9901      	ldr	r1, [sp, #4]
    afe2:	ea49 0901 	orr.w	r9, r9, r1
    afe6:	990a      	ldr	r1, [sp, #40]	; 0x28
    afe8:	ea51 0909 	orrs.w	r9, r1, r9
    afec:	f000 817b 	beq.w	b2e6 <_dtoa_r+0xa8e>
    aff0:	2a00      	cmp	r2, #0
    aff2:	f300 81c6 	bgt.w	b382 <_dtoa_r+0xb2a>
    aff6:	9a08      	ldr	r2, [sp, #32]
    aff8:	703b      	strb	r3, [r7, #0]
    affa:	f107 0901 	add.w	r9, r7, #1
    affe:	4297      	cmp	r7, r2
    b000:	46cb      	mov	fp, r9
    b002:	f000 81c4 	beq.w	b38e <_dtoa_r+0xb36>
    b006:	4629      	mov	r1, r5
    b008:	2300      	movs	r3, #0
    b00a:	220a      	movs	r2, #10
    b00c:	4620      	mov	r0, r4
    b00e:	f7fb fa01 	bl	6414 <__multadd>
    b012:	4546      	cmp	r6, r8
    b014:	4605      	mov	r5, r0
    b016:	4631      	mov	r1, r6
    b018:	f04f 0300 	mov.w	r3, #0
    b01c:	f04f 020a 	mov.w	r2, #10
    b020:	4620      	mov	r0, r4
    b022:	d012      	beq.n	b04a <_dtoa_r+0x7f2>
    b024:	f7fb f9f6 	bl	6414 <__multadd>
    b028:	4641      	mov	r1, r8
    b02a:	4606      	mov	r6, r0
    b02c:	2300      	movs	r3, #0
    b02e:	220a      	movs	r2, #10
    b030:	4620      	mov	r0, r4
    b032:	f7fb f9ef 	bl	6414 <__multadd>
    b036:	464f      	mov	r7, r9
    b038:	4680      	mov	r8, r0
    b03a:	e7a7      	b.n	af8c <_dtoa_r+0x734>
    b03c:	4620      	mov	r0, r4
    b03e:	9302      	str	r3, [sp, #8]
    b040:	f7fb f9de 	bl	6400 <_Bfree>
    b044:	9b02      	ldr	r3, [sp, #8]
    b046:	2201      	movs	r2, #1
    b048:	e7c6      	b.n	afd8 <_dtoa_r+0x780>
    b04a:	f7fb f9e3 	bl	6414 <__multadd>
    b04e:	464f      	mov	r7, r9
    b050:	4606      	mov	r6, r0
    b052:	4680      	mov	r8, r0
    b054:	e79a      	b.n	af8c <_dtoa_r+0x734>
    b056:	9b01      	ldr	r3, [sp, #4]
    b058:	2b02      	cmp	r3, #2
    b05a:	dc71      	bgt.n	b140 <_dtoa_r+0x8e8>
    b05c:	9b07      	ldr	r3, [sp, #28]
    b05e:	2b00      	cmp	r3, #0
    b060:	f47f af7b 	bne.w	af5a <_dtoa_r+0x702>
    b064:	9b04      	ldr	r3, [sp, #16]
    b066:	4651      	mov	r1, sl
    b068:	3301      	adds	r3, #1
    b06a:	4628      	mov	r0, r5
    b06c:	9304      	str	r3, [sp, #16]
    b06e:	f7ff fb5f 	bl	a730 <quorem>
    b072:	f8dd b000 	ldr.w	fp, [sp]
    b076:	f100 0330 	add.w	r3, r0, #48	; 0x30
    b07a:	f80b 3b01 	strb.w	r3, [fp], #1
    b07e:	2700      	movs	r7, #0
    b080:	e6eb      	b.n	ae5a <_dtoa_r+0x602>
    b082:	4651      	mov	r1, sl
    b084:	4628      	mov	r0, r5
    b086:	f7fb fc73 	bl	6970 <__mcmp>
    b08a:	2800      	cmp	r0, #0
    b08c:	f6bf aeba 	bge.w	ae04 <_dtoa_r+0x5ac>
    b090:	4629      	mov	r1, r5
    b092:	2300      	movs	r3, #0
    b094:	220a      	movs	r2, #10
    b096:	4620      	mov	r0, r4
    b098:	f7fb f9bc 	bl	6414 <__multadd>
    b09c:	9b04      	ldr	r3, [sp, #16]
    b09e:	1e5f      	subs	r7, r3, #1
    b0a0:	9b07      	ldr	r3, [sp, #28]
    b0a2:	4605      	mov	r5, r0
    b0a4:	2b00      	cmp	r3, #0
    b0a6:	f47f af4b 	bne.w	af40 <_dtoa_r+0x6e8>
    b0aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b0ac:	2b00      	cmp	r3, #0
    b0ae:	f340 8218 	ble.w	b4e2 <_dtoa_r+0xc8a>
    b0b2:	4699      	mov	r9, r3
    b0b4:	e6b1      	b.n	ae1a <_dtoa_r+0x5c2>
    b0b6:	4bbc      	ldr	r3, [pc, #752]	; (b3a8 <_dtoa_r+0xb50>)
    b0b8:	9300      	str	r3, [sp, #0]
    b0ba:	3303      	adds	r3, #3
    b0bc:	e4a4      	b.n	aa08 <_dtoa_r+0x1b0>
    b0be:	201c      	movs	r0, #28
    b0c0:	e712      	b.n	aee8 <_dtoa_r+0x690>
    b0c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    b0c6:	2800      	cmp	r0, #0
    b0c8:	f47f ae74 	bne.w	adb4 <_dtoa_r+0x55c>
    b0cc:	f3c1 0213 	ubfx	r2, r1, #0, #20
    b0d0:	2a00      	cmp	r2, #0
    b0d2:	f000 80f4 	beq.w	b2be <_dtoa_r+0xa66>
    b0d6:	9b02      	ldr	r3, [sp, #8]
    b0d8:	9308      	str	r3, [sp, #32]
    b0da:	e66d      	b.n	adb8 <_dtoa_r+0x560>
    b0dc:	2301      	movs	r3, #1
    b0de:	9307      	str	r3, [sp, #28]
    b0e0:	9b04      	ldr	r3, [sp, #16]
    b0e2:	445b      	add	r3, fp
    b0e4:	f103 0901 	add.w	r9, r3, #1
    b0e8:	f1b9 0f01 	cmp.w	r9, #1
    b0ec:	46cc      	mov	ip, r9
    b0ee:	930b      	str	r3, [sp, #44]	; 0x2c
    b0f0:	bfb8      	it	lt
    b0f2:	f04f 0c01 	movlt.w	ip, #1
    b0f6:	2100      	movs	r1, #0
    b0f8:	f1bc 0f17 	cmp.w	ip, #23
    b0fc:	63e1      	str	r1, [r4, #60]	; 0x3c
    b0fe:	f77f acbc 	ble.w	aa7a <_dtoa_r+0x222>
    b102:	2001      	movs	r0, #1
    b104:	2204      	movs	r2, #4
    b106:	0052      	lsls	r2, r2, #1
    b108:	f102 0314 	add.w	r3, r2, #20
    b10c:	4563      	cmp	r3, ip
    b10e:	4601      	mov	r1, r0
    b110:	f100 0001 	add.w	r0, r0, #1
    b114:	d9f7      	bls.n	b106 <_dtoa_r+0x8ae>
    b116:	63e1      	str	r1, [r4, #60]	; 0x3c
    b118:	e4af      	b.n	aa7a <_dtoa_r+0x222>
    b11a:	2301      	movs	r3, #1
    b11c:	9307      	str	r3, [sp, #28]
    b11e:	f1bb 0f00 	cmp.w	fp, #0
    b122:	dd52      	ble.n	b1ca <_dtoa_r+0x972>
    b124:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
    b128:	46d9      	mov	r9, fp
    b12a:	46dc      	mov	ip, fp
    b12c:	e7e3      	b.n	b0f6 <_dtoa_r+0x89e>
    b12e:	2300      	movs	r3, #0
    b130:	9307      	str	r3, [sp, #28]
    b132:	e7d5      	b.n	b0e0 <_dtoa_r+0x888>
    b134:	2300      	movs	r3, #0
    b136:	9307      	str	r3, [sp, #28]
    b138:	e7f1      	b.n	b11e <_dtoa_r+0x8c6>
    b13a:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    b13e:	9704      	str	r7, [sp, #16]
    b140:	f1b9 0f00 	cmp.w	r9, #0
    b144:	f47f ada1 	bne.w	ac8a <_dtoa_r+0x432>
    b148:	4651      	mov	r1, sl
    b14a:	464b      	mov	r3, r9
    b14c:	2205      	movs	r2, #5
    b14e:	4620      	mov	r0, r4
    b150:	f7fb f960 	bl	6414 <__multadd>
    b154:	4601      	mov	r1, r0
    b156:	4682      	mov	sl, r0
    b158:	4628      	mov	r0, r5
    b15a:	f7fb fc09 	bl	6970 <__mcmp>
    b15e:	2800      	cmp	r0, #0
    b160:	f77f ad93 	ble.w	ac8a <_dtoa_r+0x432>
    b164:	9b04      	ldr	r3, [sp, #16]
    b166:	f103 0b01 	add.w	fp, r3, #1
    b16a:	9b00      	ldr	r3, [sp, #0]
    b16c:	2231      	movs	r2, #49	; 0x31
    b16e:	4698      	mov	r8, r3
    b170:	f803 2b01 	strb.w	r2, [r3], #1
    b174:	9300      	str	r3, [sp, #0]
    b176:	4651      	mov	r1, sl
    b178:	4620      	mov	r0, r4
    b17a:	f7fb f941 	bl	6400 <_Bfree>
    b17e:	f10b 0301 	add.w	r3, fp, #1
    b182:	f8dd 9000 	ldr.w	r9, [sp]
    b186:	9304      	str	r3, [sp, #16]
    b188:	f8cd 8000 	str.w	r8, [sp]
    b18c:	2e00      	cmp	r6, #0
    b18e:	f47f ae8f 	bne.w	aeb0 <_dtoa_r+0x658>
    b192:	e691      	b.n	aeb8 <_dtoa_r+0x660>
    b194:	eba3 0a0a 	sub.w	sl, r3, sl
    b198:	e5c5      	b.n	ad26 <_dtoa_r+0x4ce>
    b19a:	4631      	mov	r1, r6
    b19c:	4652      	mov	r2, sl
    b19e:	4620      	mov	r0, r4
    b1a0:	f7fb fb0e 	bl	67c0 <__pow5mult>
    b1a4:	462a      	mov	r2, r5
    b1a6:	4601      	mov	r1, r0
    b1a8:	4606      	mov	r6, r0
    b1aa:	4620      	mov	r0, r4
    b1ac:	f7fb fa5a 	bl	6664 <__multiply>
    b1b0:	4629      	mov	r1, r5
    b1b2:	4605      	mov	r5, r0
    b1b4:	4620      	mov	r0, r4
    b1b6:	f7fb f923 	bl	6400 <_Bfree>
    b1ba:	e5ea      	b.n	ad92 <_dtoa_r+0x53a>
    b1bc:	2002      	movs	r0, #2
    b1be:	eeb0 5b48 	vmov.f64	d5, d8
    b1c2:	e481      	b.n	aac8 <_dtoa_r+0x270>
    b1c4:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
    b1c8:	e68e      	b.n	aee8 <_dtoa_r+0x690>
    b1ca:	f04f 0b01 	mov.w	fp, #1
    b1ce:	46d9      	mov	r9, fp
    b1d0:	e44f      	b.n	aa72 <_dtoa_r+0x21a>
    b1d2:	d103      	bne.n	b1dc <_dtoa_r+0x984>
    b1d4:	9b01      	ldr	r3, [sp, #4]
    b1d6:	07db      	lsls	r3, r3, #31
    b1d8:	f53f ae4c 	bmi.w	ae74 <_dtoa_r+0x61c>
    b1dc:	46d9      	mov	r9, fp
    b1de:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
    b1e2:	2b30      	cmp	r3, #48	; 0x30
    b1e4:	d0fa      	beq.n	b1dc <_dtoa_r+0x984>
    b1e6:	e657      	b.n	ae98 <_dtoa_r+0x640>
    b1e8:	9b04      	ldr	r3, [sp, #16]
    b1ea:	9a00      	ldr	r2, [sp, #0]
    b1ec:	3301      	adds	r3, #1
    b1ee:	9304      	str	r3, [sp, #16]
    b1f0:	2331      	movs	r3, #49	; 0x31
    b1f2:	7013      	strb	r3, [r2, #0]
    b1f4:	e650      	b.n	ae98 <_dtoa_r+0x640>
    b1f6:	f1ba 0f00 	cmp.w	sl, #0
    b1fa:	f000 8123 	beq.w	b444 <_dtoa_r+0xbec>
    b1fe:	f202 4233 	addw	r2, r2, #1075	; 0x433
    b202:	9b06      	ldr	r3, [sp, #24]
    b204:	9309      	str	r3, [sp, #36]	; 0x24
    b206:	4413      	add	r3, r2
    b208:	f8dd a020 	ldr.w	sl, [sp, #32]
    b20c:	9306      	str	r3, [sp, #24]
    b20e:	4490      	add	r8, r2
    b210:	e592      	b.n	ad38 <_dtoa_r+0x4e0>
    b212:	ee07 0a90 	vmov	s15, r0
    b216:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
    b21a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    b21e:	eea6 5b07 	vfma.f64	d5, d6, d7
    b222:	ee15 2a90 	vmov	r2, s11
    b226:	ec51 0b15 	vmov	r0, r1, d5
    b22a:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
    b22e:	ec41 0b15 	vmov	d5, r0, r1
    b232:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
    b236:	ee36 7b47 	vsub.f64	d7, d6, d7
    b23a:	eeb4 7bc5 	vcmpe.f64	d7, d5
    b23e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b242:	f300 8137 	bgt.w	b4b4 <_dtoa_r+0xc5c>
    b246:	eeb1 5b45 	vneg.f64	d5, d5
    b24a:	eeb4 7bc5 	vcmpe.f64	d7, d5
    b24e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b252:	f57f acfb 	bpl.w	ac4c <_dtoa_r+0x3f4>
    b256:	f04f 0a00 	mov.w	sl, #0
    b25a:	4656      	mov	r6, sl
    b25c:	e515      	b.n	ac8a <_dtoa_r+0x432>
    b25e:	f000 80f5 	beq.w	b44c <_dtoa_r+0xbf4>
    b262:	9b04      	ldr	r3, [sp, #16]
    b264:	4951      	ldr	r1, [pc, #324]	; (b3ac <_dtoa_r+0xb54>)
    b266:	425a      	negs	r2, r3
    b268:	f002 000f 	and.w	r0, r2, #15
    b26c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    b270:	ed91 6b00 	vldr	d6, [r1]
    b274:	1112      	asrs	r2, r2, #4
    b276:	ee28 6b06 	vmul.f64	d6, d8, d6
    b27a:	f000 8142 	beq.w	b502 <_dtoa_r+0xcaa>
    b27e:	eeb0 7b46 	vmov.f64	d7, d6
    b282:	494b      	ldr	r1, [pc, #300]	; (b3b0 <_dtoa_r+0xb58>)
    b284:	2600      	movs	r6, #0
    b286:	2002      	movs	r0, #2
    b288:	07d3      	lsls	r3, r2, #31
    b28a:	d505      	bpl.n	b298 <_dtoa_r+0xa40>
    b28c:	ed91 5b00 	vldr	d5, [r1]
    b290:	3001      	adds	r0, #1
    b292:	2601      	movs	r6, #1
    b294:	ee27 7b05 	vmul.f64	d7, d7, d5
    b298:	1052      	asrs	r2, r2, #1
    b29a:	f101 0108 	add.w	r1, r1, #8
    b29e:	d1f3      	bne.n	b288 <_dtoa_r+0xa30>
    b2a0:	2e00      	cmp	r6, #0
    b2a2:	fe06 6b07 	vseleq.f64	d6, d6, d7
    b2a6:	e41e      	b.n	aae6 <_dtoa_r+0x28e>
    b2a8:	9b02      	ldr	r3, [sp, #8]
    b2aa:	2b00      	cmp	r3, #0
    b2ac:	f47f ae37 	bne.w	af1e <_dtoa_r+0x6c6>
    b2b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    b2b4:	f3c1 0213 	ubfx	r2, r1, #0, #20
    b2b8:	2a00      	cmp	r2, #0
    b2ba:	f040 8137 	bne.w	b52c <_dtoa_r+0xcd4>
    b2be:	4a3d      	ldr	r2, [pc, #244]	; (b3b4 <_dtoa_r+0xb5c>)
    b2c0:	400a      	ands	r2, r1
    b2c2:	2a00      	cmp	r2, #0
    b2c4:	f000 80fa 	beq.w	b4bc <_dtoa_r+0xc64>
    b2c8:	9b06      	ldr	r3, [sp, #24]
    b2ca:	3301      	adds	r3, #1
    b2cc:	9306      	str	r3, [sp, #24]
    b2ce:	2301      	movs	r3, #1
    b2d0:	f108 0801 	add.w	r8, r8, #1
    b2d4:	9308      	str	r3, [sp, #32]
    b2d6:	e56f      	b.n	adb8 <_dtoa_r+0x560>
    b2d8:	4629      	mov	r1, r5
    b2da:	9a08      	ldr	r2, [sp, #32]
    b2dc:	4620      	mov	r0, r4
    b2de:	f7fb fa6f 	bl	67c0 <__pow5mult>
    b2e2:	4605      	mov	r5, r0
    b2e4:	e55a      	b.n	ad9c <_dtoa_r+0x544>
    b2e6:	2a00      	cmp	r2, #0
    b2e8:	dd12      	ble.n	b310 <_dtoa_r+0xab8>
    b2ea:	4629      	mov	r1, r5
    b2ec:	2201      	movs	r2, #1
    b2ee:	4620      	mov	r0, r4
    b2f0:	9301      	str	r3, [sp, #4]
    b2f2:	f7fb fac5 	bl	6880 <__lshift>
    b2f6:	4651      	mov	r1, sl
    b2f8:	4605      	mov	r5, r0
    b2fa:	f7fb fb39 	bl	6970 <__mcmp>
    b2fe:	2800      	cmp	r0, #0
    b300:	9b01      	ldr	r3, [sp, #4]
    b302:	f340 80e1 	ble.w	b4c8 <_dtoa_r+0xc70>
    b306:	2b39      	cmp	r3, #57	; 0x39
    b308:	f000 80ca 	beq.w	b4a0 <_dtoa_r+0xc48>
    b30c:	f10b 0331 	add.w	r3, fp, #49	; 0x31
    b310:	46b9      	mov	r9, r7
    b312:	f809 3b01 	strb.w	r3, [r9], #1
    b316:	9b04      	ldr	r3, [sp, #16]
    b318:	3301      	adds	r3, #1
    b31a:	4637      	mov	r7, r6
    b31c:	9304      	str	r3, [sp, #16]
    b31e:	4646      	mov	r6, r8
    b320:	e5ba      	b.n	ae98 <_dtoa_r+0x640>
    b322:	ee38 8b08 	vadd.f64	d8, d8, d8
    b326:	eeb4 8bc6 	vcmpe.f64	d8, d6
    b32a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b32e:	dc0a      	bgt.n	b346 <_dtoa_r+0xaee>
    b330:	eeb4 8b46 	vcmp.f64	d8, d6
    b334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b338:	f47f acdc 	bne.w	acf4 <_dtoa_r+0x49c>
    b33c:	ee17 3a10 	vmov	r3, s14
    b340:	07d8      	lsls	r0, r3, #31
    b342:	f57f acd7 	bpl.w	acf4 <_dtoa_r+0x49c>
    b346:	9a00      	ldr	r2, [sp, #0]
    b348:	e454      	b.n	abf4 <_dtoa_r+0x39c>
    b34a:	6871      	ldr	r1, [r6, #4]
    b34c:	4620      	mov	r0, r4
    b34e:	f7fb f831 	bl	63b4 <_Balloc>
    b352:	4607      	mov	r7, r0
    b354:	2800      	cmp	r0, #0
    b356:	f000 80de 	beq.w	b516 <_dtoa_r+0xcbe>
    b35a:	6933      	ldr	r3, [r6, #16]
    b35c:	3302      	adds	r3, #2
    b35e:	009a      	lsls	r2, r3, #2
    b360:	f106 010c 	add.w	r1, r6, #12
    b364:	300c      	adds	r0, #12
    b366:	f7f6 f977 	bl	1658 <memcpy>
    b36a:	4639      	mov	r1, r7
    b36c:	2201      	movs	r2, #1
    b36e:	4620      	mov	r0, r4
    b370:	f7fb fa86 	bl	6880 <__lshift>
    b374:	4680      	mov	r8, r0
    b376:	e5fe      	b.n	af76 <_dtoa_r+0x71e>
    b378:	9b06      	ldr	r3, [sp, #24]
    b37a:	eba3 0309 	sub.w	r3, r3, r9
    b37e:	9309      	str	r3, [sp, #36]	; 0x24
    b380:	e4da      	b.n	ad38 <_dtoa_r+0x4e0>
    b382:	2b39      	cmp	r3, #57	; 0x39
    b384:	f000 808c 	beq.w	b4a0 <_dtoa_r+0xc48>
    b388:	46b9      	mov	r9, r7
    b38a:	3301      	adds	r3, #1
    b38c:	e7c1      	b.n	b312 <_dtoa_r+0xaba>
    b38e:	9a04      	ldr	r2, [sp, #16]
    b390:	3201      	adds	r2, #1
    b392:	4637      	mov	r7, r6
    b394:	9204      	str	r2, [sp, #16]
    b396:	4646      	mov	r6, r8
    b398:	e55f      	b.n	ae5a <_dtoa_r+0x602>
    b39a:	4629      	mov	r1, r5
    b39c:	4620      	mov	r0, r4
    b39e:	f7fb fa0f 	bl	67c0 <__pow5mult>
    b3a2:	4605      	mov	r5, r0
    b3a4:	e4fa      	b.n	ad9c <_dtoa_r+0x544>
    b3a6:	bf00      	nop
    b3a8:	20000840 	.word	0x20000840
    b3ac:	200002a8 	.word	0x200002a8
    b3b0:	20000280 	.word	0x20000280
    b3b4:	7ff00000 	.word	0x7ff00000
    b3b8:	4b5e      	ldr	r3, [pc, #376]	; (b534 <_dtoa_r+0xcdc>)
    b3ba:	eefd 5bc6 	vcvt.s32.f64	s11, d6
    b3be:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
    b3c2:	ed1c 3b02 	vldr	d3, [ip, #-8]
    b3c6:	eeb8 7be5 	vcvt.f64.s32	d7, s11
    b3ca:	ee36 7b47 	vsub.f64	d7, d6, d7
    b3ce:	ec41 0b16 	vmov	d6, r0, r1
    b3d2:	ee15 1a90 	vmov	r1, s11
    b3d6:	ee23 3b06 	vmul.f64	d3, d3, d6
    b3da:	9800      	ldr	r0, [sp, #0]
    b3dc:	3130      	adds	r1, #48	; 0x30
    b3de:	2a01      	cmp	r2, #1
    b3e0:	f800 1b01 	strb.w	r1, [r0], #1
    b3e4:	f000 8083 	beq.w	b4ee <_dtoa_r+0xc96>
    b3e8:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    b3ec:	9b00      	ldr	r3, [sp, #0]
    b3ee:	1899      	adds	r1, r3, r2
    b3f0:	ee27 7b04 	vmul.f64	d7, d7, d4
    b3f4:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    b3f8:	ee16 3a90 	vmov	r3, s13
    b3fc:	3330      	adds	r3, #48	; 0x30
    b3fe:	f800 3b01 	strb.w	r3, [r0], #1
    b402:	4281      	cmp	r1, r0
    b404:	eeb8 5be6 	vcvt.f64.s32	d5, s13
    b408:	ee37 7b45 	vsub.f64	d7, d7, d5
    b40c:	d1f0      	bne.n	b3f0 <_dtoa_r+0xb98>
    b40e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    b412:	ee33 5b06 	vadd.f64	d5, d3, d6
    b416:	eeb4 5bc7 	vcmpe.f64	d5, d7
    b41a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b41e:	f53f abe3 	bmi.w	abe8 <_dtoa_r+0x390>
    b422:	ee36 6b43 	vsub.f64	d6, d6, d3
    b426:	eeb4 6bc7 	vcmpe.f64	d6, d7
    b42a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b42e:	f77f ac0d 	ble.w	ac4c <_dtoa_r+0x3f4>
    b432:	4689      	mov	r9, r1
    b434:	3901      	subs	r1, #1
    b436:	f819 3c01 	ldrb.w	r3, [r9, #-1]
    b43a:	2b30      	cmp	r3, #48	; 0x30
    b43c:	d0f9      	beq.n	b432 <_dtoa_r+0xbda>
    b43e:	1c73      	adds	r3, r6, #1
    b440:	9304      	str	r3, [sp, #16]
    b442:	e539      	b.n	aeb8 <_dtoa_r+0x660>
    b444:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    b446:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
    b44a:	e6da      	b.n	b202 <_dtoa_r+0x9aa>
    b44c:	2002      	movs	r0, #2
    b44e:	eeb0 6b48 	vmov.f64	d6, d8
    b452:	f7ff bb48 	b.w	aae6 <_dtoa_r+0x28e>
    b456:	f1b9 0f00 	cmp.w	r9, #0
    b45a:	f43f aeda 	beq.w	b212 <_dtoa_r+0x9ba>
    b45e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b460:	2a00      	cmp	r2, #0
    b462:	f77f abf3 	ble.w	ac4c <_dtoa_r+0x3f4>
    b466:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    b46a:	ee26 6b04 	vmul.f64	d6, d6, d4
    b46e:	3001      	adds	r0, #1
    b470:	ee07 0a90 	vmov	s15, r0
    b474:	9b04      	ldr	r3, [sp, #16]
    b476:	eeb8 5be7 	vcvt.f64.s32	d5, s15
    b47a:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    b47e:	eea6 7b05 	vfma.f64	d7, d6, d5
    b482:	ee17 ca90 	vmov	ip, s15
    b486:	ec51 0b17 	vmov	r0, r1, d7
    b48a:	1e5e      	subs	r6, r3, #1
    b48c:	f1ac 7150 	sub.w	r1, ip, #54525952	; 0x3400000
    b490:	f7ff bb47 	b.w	ab22 <_dtoa_r+0x2ca>
    b494:	9b04      	ldr	r3, [sp, #16]
    b496:	3301      	adds	r3, #1
    b498:	9304      	str	r3, [sp, #16]
    b49a:	2331      	movs	r3, #49	; 0x31
    b49c:	f7ff bbb1 	b.w	ac02 <_dtoa_r+0x3aa>
    b4a0:	9b04      	ldr	r3, [sp, #16]
    b4a2:	46bb      	mov	fp, r7
    b4a4:	3301      	adds	r3, #1
    b4a6:	9304      	str	r3, [sp, #16]
    b4a8:	2339      	movs	r3, #57	; 0x39
    b4aa:	4637      	mov	r7, r6
    b4ac:	f80b 3b01 	strb.w	r3, [fp], #1
    b4b0:	4646      	mov	r6, r8
    b4b2:	e4e1      	b.n	ae78 <_dtoa_r+0x620>
    b4b4:	f04f 0a00 	mov.w	sl, #0
    b4b8:	4656      	mov	r6, sl
    b4ba:	e653      	b.n	b164 <_dtoa_r+0x90c>
    b4bc:	9208      	str	r2, [sp, #32]
    b4be:	e47b      	b.n	adb8 <_dtoa_r+0x560>
    b4c0:	1c73      	adds	r3, r6, #1
    b4c2:	9304      	str	r3, [sp, #16]
    b4c4:	4689      	mov	r9, r1
    b4c6:	e4f7      	b.n	aeb8 <_dtoa_r+0x660>
    b4c8:	f47f af22 	bne.w	b310 <_dtoa_r+0xab8>
    b4cc:	07da      	lsls	r2, r3, #31
    b4ce:	f57f af1f 	bpl.w	b310 <_dtoa_r+0xab8>
    b4d2:	e718      	b.n	b306 <_dtoa_r+0xaae>
    b4d4:	2b39      	cmp	r3, #57	; 0x39
    b4d6:	d0e3      	beq.n	b4a0 <_dtoa_r+0xc48>
    b4d8:	f1b9 0f00 	cmp.w	r9, #0
    b4dc:	f73f af16 	bgt.w	b30c <_dtoa_r+0xab4>
    b4e0:	e716      	b.n	b310 <_dtoa_r+0xab8>
    b4e2:	9b01      	ldr	r3, [sp, #4]
    b4e4:	2b02      	cmp	r3, #2
    b4e6:	f73f ae28 	bgt.w	b13a <_dtoa_r+0x8e2>
    b4ea:	9704      	str	r7, [sp, #16]
    b4ec:	e5ba      	b.n	b064 <_dtoa_r+0x80c>
    b4ee:	4601      	mov	r1, r0
    b4f0:	e78d      	b.n	b40e <_dtoa_r+0xbb6>
    b4f2:	9b01      	ldr	r3, [sp, #4]
    b4f4:	2b02      	cmp	r3, #2
    b4f6:	f73f ae20 	bgt.w	b13a <_dtoa_r+0x8e2>
    b4fa:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    b4fe:	9704      	str	r7, [sp, #16]
    b500:	e52b      	b.n	af5a <_dtoa_r+0x702>
    b502:	2002      	movs	r0, #2
    b504:	f7ff baef 	b.w	aae6 <_dtoa_r+0x28e>
    b508:	4b0b      	ldr	r3, [pc, #44]	; (b538 <_dtoa_r+0xce0>)
    b50a:	480c      	ldr	r0, [pc, #48]	; (b53c <_dtoa_r+0xce4>)
    b50c:	2200      	movs	r2, #0
    b50e:	f240 11af 	movw	r1, #431	; 0x1af
    b512:	f7ff f8b1 	bl	a678 <__assert_func>
    b516:	4b08      	ldr	r3, [pc, #32]	; (b538 <_dtoa_r+0xce0>)
    b518:	4808      	ldr	r0, [pc, #32]	; (b53c <_dtoa_r+0xce4>)
    b51a:	463a      	mov	r2, r7
    b51c:	f240 21ef 	movw	r1, #751	; 0x2ef
    b520:	f7ff f8aa 	bl	a678 <__assert_func>
    b524:	4b06      	ldr	r3, [pc, #24]	; (b540 <_dtoa_r+0xce8>)
    b526:	9300      	str	r3, [sp, #0]
    b528:	f7ff b9d2 	b.w	a8d0 <_dtoa_r+0x78>
    b52c:	9b02      	ldr	r3, [sp, #8]
    b52e:	9308      	str	r3, [sp, #32]
    b530:	e4f7      	b.n	af22 <_dtoa_r+0x6ca>
    b532:	bf00      	nop
    b534:	200002a8 	.word	0x200002a8
    b538:	20000554 	.word	0x20000554
    b53c:	20000844 	.word	0x20000844
    b540:	20000834 	.word	0x20000834

0000b544 <_strtoul_l.constprop.0>:
    b544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b548:	4607      	mov	r7, r0
    b54a:	484c      	ldr	r0, [pc, #304]	; (b67c <_strtoul_l.constprop.0+0x138>)
    b54c:	460e      	mov	r6, r1
    b54e:	4635      	mov	r5, r6
    b550:	f816 eb01 	ldrb.w	lr, [r6], #1
    b554:	f810 c00e 	ldrb.w	ip, [r0, lr]
    b558:	f01c 0c08 	ands.w	ip, ip, #8
    b55c:	d1f7      	bne.n	b54e <_strtoul_l.constprop.0+0xa>
    b55e:	f1be 0f2d 	cmp.w	lr, #45	; 0x2d
    b562:	d05a      	beq.n	b61a <_strtoul_l.constprop.0+0xd6>
    b564:	f1be 0f2b 	cmp.w	lr, #43	; 0x2b
    b568:	bf03      	ittte	eq
    b56a:	f896 e000 	ldrbeq.w	lr, [r6]
    b56e:	4664      	moveq	r4, ip
    b570:	1cae      	addeq	r6, r5, #2
    b572:	4664      	movne	r4, ip
    b574:	b15b      	cbz	r3, b58e <_strtoul_l.constprop.0+0x4a>
    b576:	2b10      	cmp	r3, #16
    b578:	d054      	beq.n	b624 <_strtoul_l.constprop.0+0xe0>
    b57a:	f04f 38ff 	mov.w	r8, #4294967295
    b57e:	fbb8 f8f3 	udiv	r8, r8, r3
    b582:	fb03 fa08 	mul.w	sl, r3, r8
    b586:	ea6f 0a0a 	mvn.w	sl, sl
    b58a:	4699      	mov	r9, r3
    b58c:	e008      	b.n	b5a0 <_strtoul_l.constprop.0+0x5c>
    b58e:	f1be 0f30 	cmp.w	lr, #48	; 0x30
    b592:	d05a      	beq.n	b64a <_strtoul_l.constprop.0+0x106>
    b594:	230a      	movs	r3, #10
    b596:	f8df 80e8 	ldr.w	r8, [pc, #232]	; b680 <_strtoul_l.constprop.0+0x13c>
    b59a:	f04f 0a05 	mov.w	sl, #5
    b59e:	4699      	mov	r9, r3
    b5a0:	2500      	movs	r5, #0
    b5a2:	4628      	mov	r0, r5
    b5a4:	e005      	b.n	b5b2 <_strtoul_l.constprop.0+0x6e>
    b5a6:	d02c      	beq.n	b602 <_strtoul_l.constprop.0+0xbe>
    b5a8:	fb09 c000 	mla	r0, r9, r0, ip
    b5ac:	2501      	movs	r5, #1
    b5ae:	f816 eb01 	ldrb.w	lr, [r6], #1
    b5b2:	f1ae 0c30 	sub.w	ip, lr, #48	; 0x30
    b5b6:	f1bc 0f09 	cmp.w	ip, #9
    b5ba:	d906      	bls.n	b5ca <_strtoul_l.constprop.0+0x86>
    b5bc:	f1ae 0c41 	sub.w	ip, lr, #65	; 0x41
    b5c0:	f1bc 0f19 	cmp.w	ip, #25
    b5c4:	d80b      	bhi.n	b5de <_strtoul_l.constprop.0+0x9a>
    b5c6:	f1ae 0c37 	sub.w	ip, lr, #55	; 0x37
    b5ca:	4563      	cmp	r3, ip
    b5cc:	dd10      	ble.n	b5f0 <_strtoul_l.constprop.0+0xac>
    b5ce:	f1b5 3fff 	cmp.w	r5, #4294967295
    b5d2:	d0ec      	beq.n	b5ae <_strtoul_l.constprop.0+0x6a>
    b5d4:	4540      	cmp	r0, r8
    b5d6:	d9e6      	bls.n	b5a6 <_strtoul_l.constprop.0+0x62>
    b5d8:	f04f 35ff 	mov.w	r5, #4294967295
    b5dc:	e7e7      	b.n	b5ae <_strtoul_l.constprop.0+0x6a>
    b5de:	f1ae 0c61 	sub.w	ip, lr, #97	; 0x61
    b5e2:	f1bc 0f19 	cmp.w	ip, #25
    b5e6:	d803      	bhi.n	b5f0 <_strtoul_l.constprop.0+0xac>
    b5e8:	f1ae 0c57 	sub.w	ip, lr, #87	; 0x57
    b5ec:	4563      	cmp	r3, ip
    b5ee:	dcee      	bgt.n	b5ce <_strtoul_l.constprop.0+0x8a>
    b5f0:	1c6b      	adds	r3, r5, #1
    b5f2:	d00b      	beq.n	b60c <_strtoul_l.constprop.0+0xc8>
    b5f4:	b104      	cbz	r4, b5f8 <_strtoul_l.constprop.0+0xb4>
    b5f6:	4240      	negs	r0, r0
    b5f8:	b10a      	cbz	r2, b5fe <_strtoul_l.constprop.0+0xba>
    b5fa:	b965      	cbnz	r5, b616 <_strtoul_l.constprop.0+0xd2>
    b5fc:	6011      	str	r1, [r2, #0]
    b5fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b602:	45d4      	cmp	ip, sl
    b604:	ddd0      	ble.n	b5a8 <_strtoul_l.constprop.0+0x64>
    b606:	f04f 35ff 	mov.w	r5, #4294967295
    b60a:	e7d0      	b.n	b5ae <_strtoul_l.constprop.0+0x6a>
    b60c:	2322      	movs	r3, #34	; 0x22
    b60e:	603b      	str	r3, [r7, #0]
    b610:	4628      	mov	r0, r5
    b612:	2a00      	cmp	r2, #0
    b614:	d0f3      	beq.n	b5fe <_strtoul_l.constprop.0+0xba>
    b616:	1e71      	subs	r1, r6, #1
    b618:	e7f0      	b.n	b5fc <_strtoul_l.constprop.0+0xb8>
    b61a:	f896 e000 	ldrb.w	lr, [r6]
    b61e:	2401      	movs	r4, #1
    b620:	1cae      	adds	r6, r5, #2
    b622:	e7a7      	b.n	b574 <_strtoul_l.constprop.0+0x30>
    b624:	f1be 0f30 	cmp.w	lr, #48	; 0x30
    b628:	d121      	bne.n	b66e <_strtoul_l.constprop.0+0x12a>
    b62a:	7830      	ldrb	r0, [r6, #0]
    b62c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
    b630:	2858      	cmp	r0, #88	; 0x58
    b632:	d116      	bne.n	b662 <_strtoul_l.constprop.0+0x11e>
    b634:	f04f 0910 	mov.w	r9, #16
    b638:	f896 e001 	ldrb.w	lr, [r6, #1]
    b63c:	f04f 0a0f 	mov.w	sl, #15
    b640:	3602      	adds	r6, #2
    b642:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
    b646:	464b      	mov	r3, r9
    b648:	e7aa      	b.n	b5a0 <_strtoul_l.constprop.0+0x5c>
    b64a:	7833      	ldrb	r3, [r6, #0]
    b64c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    b650:	2b58      	cmp	r3, #88	; 0x58
    b652:	d0ef      	beq.n	b634 <_strtoul_l.constprop.0+0xf0>
    b654:	2308      	movs	r3, #8
    b656:	f04f 0a07 	mov.w	sl, #7
    b65a:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
    b65e:	4699      	mov	r9, r3
    b660:	e79e      	b.n	b5a0 <_strtoul_l.constprop.0+0x5c>
    b662:	4699      	mov	r9, r3
    b664:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
    b668:	f04f 0a0f 	mov.w	sl, #15
    b66c:	e798      	b.n	b5a0 <_strtoul_l.constprop.0+0x5c>
    b66e:	f04f 0a0f 	mov.w	sl, #15
    b672:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
    b676:	4699      	mov	r9, r3
    b678:	e792      	b.n	b5a0 <_strtoul_l.constprop.0+0x5c>
    b67a:	bf00      	nop
    b67c:	20000731 	.word	0x20000731
    b680:	19999999 	.word	0x19999999

0000b684 <_strtoul_r>:
    b684:	f7ff bf5e 	b.w	b544 <_strtoul_l.constprop.0>

0000b688 <_strtoll_l.constprop.0>:
    b688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b68c:	b085      	sub	sp, #20
    b68e:	461f      	mov	r7, r3
    b690:	4b57      	ldr	r3, [pc, #348]	; (b7f0 <_strtoll_l.constprop.0+0x168>)
    b692:	9003      	str	r0, [sp, #12]
    b694:	468a      	mov	sl, r1
    b696:	9200      	str	r2, [sp, #0]
    b698:	460d      	mov	r5, r1
    b69a:	462a      	mov	r2, r5
    b69c:	f815 4b01 	ldrb.w	r4, [r5], #1
    b6a0:	5d1e      	ldrb	r6, [r3, r4]
    b6a2:	f016 0608 	ands.w	r6, r6, #8
    b6a6:	d1f8      	bne.n	b69a <_strtoll_l.constprop.0+0x12>
    b6a8:	2c2d      	cmp	r4, #45	; 0x2d
    b6aa:	d075      	beq.n	b798 <_strtoll_l.constprop.0+0x110>
    b6ac:	2c2b      	cmp	r4, #43	; 0x2b
    b6ae:	bf05      	ittet	eq
    b6b0:	782c      	ldrbeq	r4, [r5, #0]
    b6b2:	9602      	streq	r6, [sp, #8]
    b6b4:	9602      	strne	r6, [sp, #8]
    b6b6:	1c95      	addeq	r5, r2, #2
    b6b8:	f04f 36ff 	mov.w	r6, #4294967295
    b6bc:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
    b6c0:	b12f      	cbz	r7, b6ce <_strtoll_l.constprop.0+0x46>
    b6c2:	2f10      	cmp	r7, #16
    b6c4:	d06f      	beq.n	b7a6 <_strtoll_l.constprop.0+0x11e>
    b6c6:	46b8      	mov	r8, r7
    b6c8:	ea4f 79e7 	mov.w	r9, r7, asr #31
    b6cc:	e005      	b.n	b6da <_strtoll_l.constprop.0+0x52>
    b6ce:	2c30      	cmp	r4, #48	; 0x30
    b6d0:	d074      	beq.n	b7bc <_strtoll_l.constprop.0+0x134>
    b6d2:	f04f 080a 	mov.w	r8, #10
    b6d6:	46b9      	mov	r9, r7
    b6d8:	4647      	mov	r7, r8
    b6da:	4642      	mov	r2, r8
    b6dc:	464b      	mov	r3, r9
    b6de:	4630      	mov	r0, r6
    b6e0:	4659      	mov	r1, fp
    b6e2:	f7f7 fd51 	bl	3188 <__aeabi_uldivmod>
    b6e6:	2300      	movs	r3, #0
    b6e8:	9201      	str	r2, [sp, #4]
    b6ea:	4684      	mov	ip, r0
    b6ec:	460a      	mov	r2, r1
    b6ee:	4618      	mov	r0, r3
    b6f0:	4619      	mov	r1, r3
    b6f2:	e011      	b.n	b718 <_strtoll_l.constprop.0+0x90>
    b6f4:	428a      	cmp	r2, r1
    b6f6:	bf08      	it	eq
    b6f8:	4584      	cmpeq	ip, r0
    b6fa:	d03d      	beq.n	b778 <_strtoll_l.constprop.0+0xf0>
    b6fc:	fb00 f309 	mul.w	r3, r0, r9
    b700:	fb08 3301 	mla	r3, r8, r1, r3
    b704:	fba0 0108 	umull	r0, r1, r0, r8
    b708:	440b      	add	r3, r1
    b70a:	eb1e 0000 	adds.w	r0, lr, r0
    b70e:	eb43 71ee 	adc.w	r1, r3, lr, asr #31
    b712:	2301      	movs	r3, #1
    b714:	f815 4b01 	ldrb.w	r4, [r5], #1
    b718:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
    b71c:	f1be 0f09 	cmp.w	lr, #9
    b720:	d906      	bls.n	b730 <_strtoll_l.constprop.0+0xa8>
    b722:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
    b726:	f1be 0f19 	cmp.w	lr, #25
    b72a:	d80c      	bhi.n	b746 <_strtoll_l.constprop.0+0xbe>
    b72c:	f1a4 0e37 	sub.w	lr, r4, #55	; 0x37
    b730:	4577      	cmp	r7, lr
    b732:	dd11      	ble.n	b758 <_strtoll_l.constprop.0+0xd0>
    b734:	1c5c      	adds	r4, r3, #1
    b736:	d0ed      	beq.n	b714 <_strtoll_l.constprop.0+0x8c>
    b738:	4584      	cmp	ip, r0
    b73a:	eb72 0301 	sbcs.w	r3, r2, r1
    b73e:	d2d9      	bcs.n	b6f4 <_strtoll_l.constprop.0+0x6c>
    b740:	f04f 33ff 	mov.w	r3, #4294967295
    b744:	e7e6      	b.n	b714 <_strtoll_l.constprop.0+0x8c>
    b746:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
    b74a:	f1be 0f19 	cmp.w	lr, #25
    b74e:	d803      	bhi.n	b758 <_strtoll_l.constprop.0+0xd0>
    b750:	f1a4 0e57 	sub.w	lr, r4, #87	; 0x57
    b754:	4577      	cmp	r7, lr
    b756:	dced      	bgt.n	b734 <_strtoll_l.constprop.0+0xac>
    b758:	1c5a      	adds	r2, r3, #1
    b75a:	d013      	beq.n	b784 <_strtoll_l.constprop.0+0xfc>
    b75c:	9a02      	ldr	r2, [sp, #8]
    b75e:	b112      	cbz	r2, b766 <_strtoll_l.constprop.0+0xde>
    b760:	4240      	negs	r0, r0
    b762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    b766:	9a00      	ldr	r2, [sp, #0]
    b768:	b11a      	cbz	r2, b772 <_strtoll_l.constprop.0+0xea>
    b76a:	bba3      	cbnz	r3, b7d6 <_strtoll_l.constprop.0+0x14e>
    b76c:	9b00      	ldr	r3, [sp, #0]
    b76e:	f8c3 a000 	str.w	sl, [r3]
    b772:	b005      	add	sp, #20
    b774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b778:	9b01      	ldr	r3, [sp, #4]
    b77a:	4573      	cmp	r3, lr
    b77c:	dabe      	bge.n	b6fc <_strtoll_l.constprop.0+0x74>
    b77e:	f04f 33ff 	mov.w	r3, #4294967295
    b782:	e7c7      	b.n	b714 <_strtoll_l.constprop.0+0x8c>
    b784:	9a03      	ldr	r2, [sp, #12]
    b786:	2322      	movs	r3, #34	; 0x22
    b788:	6013      	str	r3, [r2, #0]
    b78a:	9b00      	ldr	r3, [sp, #0]
    b78c:	b333      	cbz	r3, b7dc <_strtoll_l.constprop.0+0x154>
    b78e:	f105 3aff 	add.w	sl, r5, #4294967295
    b792:	4630      	mov	r0, r6
    b794:	4659      	mov	r1, fp
    b796:	e7e9      	b.n	b76c <_strtoll_l.constprop.0+0xe4>
    b798:	2301      	movs	r3, #1
    b79a:	782c      	ldrb	r4, [r5, #0]
    b79c:	9302      	str	r3, [sp, #8]
    b79e:	1c95      	adds	r5, r2, #2
    b7a0:	f04f 4b00 	mov.w	fp, #2147483648	; 0x80000000
    b7a4:	e78c      	b.n	b6c0 <_strtoll_l.constprop.0+0x38>
    b7a6:	2c30      	cmp	r4, #48	; 0x30
    b7a8:	d104      	bne.n	b7b4 <_strtoll_l.constprop.0+0x12c>
    b7aa:	782b      	ldrb	r3, [r5, #0]
    b7ac:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    b7b0:	2b58      	cmp	r3, #88	; 0x58
    b7b2:	d008      	beq.n	b7c6 <_strtoll_l.constprop.0+0x13e>
    b7b4:	46b8      	mov	r8, r7
    b7b6:	f04f 0900 	mov.w	r9, #0
    b7ba:	e78e      	b.n	b6da <_strtoll_l.constprop.0+0x52>
    b7bc:	782b      	ldrb	r3, [r5, #0]
    b7be:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    b7c2:	2b58      	cmp	r3, #88	; 0x58
    b7c4:	d10f      	bne.n	b7e6 <_strtoll_l.constprop.0+0x15e>
    b7c6:	f04f 0810 	mov.w	r8, #16
    b7ca:	786c      	ldrb	r4, [r5, #1]
    b7cc:	f04f 0900 	mov.w	r9, #0
    b7d0:	3502      	adds	r5, #2
    b7d2:	4647      	mov	r7, r8
    b7d4:	e781      	b.n	b6da <_strtoll_l.constprop.0+0x52>
    b7d6:	4606      	mov	r6, r0
    b7d8:	468b      	mov	fp, r1
    b7da:	e7d8      	b.n	b78e <_strtoll_l.constprop.0+0x106>
    b7dc:	4630      	mov	r0, r6
    b7de:	4659      	mov	r1, fp
    b7e0:	b005      	add	sp, #20
    b7e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b7e6:	f04f 0808 	mov.w	r8, #8
    b7ea:	46b9      	mov	r9, r7
    b7ec:	4647      	mov	r7, r8
    b7ee:	e774      	b.n	b6da <_strtoll_l.constprop.0+0x52>
    b7f0:	20000731 	.word	0x20000731

0000b7f4 <_strtoll_r>:
    b7f4:	f7ff bf48 	b.w	b688 <_strtoll_l.constprop.0>

0000b7f8 <_strtoull_l.constprop.0>:
    b7f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b7fc:	b085      	sub	sp, #20
    b7fe:	468b      	mov	fp, r1
    b800:	9201      	str	r2, [sp, #4]
    b802:	4a62      	ldr	r2, [pc, #392]	; (b98c <_strtoull_l.constprop.0+0x194>)
    b804:	9003      	str	r0, [sp, #12]
    b806:	461e      	mov	r6, r3
    b808:	460d      	mov	r5, r1
    b80a:	4629      	mov	r1, r5
    b80c:	f815 4b01 	ldrb.w	r4, [r5], #1
    b810:	5d13      	ldrb	r3, [r2, r4]
    b812:	f013 0308 	ands.w	r3, r3, #8
    b816:	d1f8      	bne.n	b80a <_strtoull_l.constprop.0+0x12>
    b818:	2c2d      	cmp	r4, #45	; 0x2d
    b81a:	f000 8082 	beq.w	b922 <_strtoull_l.constprop.0+0x12a>
    b81e:	2c2b      	cmp	r4, #43	; 0x2b
    b820:	bf03      	ittte	eq
    b822:	782c      	ldrbeq	r4, [r5, #0]
    b824:	9302      	streq	r3, [sp, #8]
    b826:	1c8d      	addeq	r5, r1, #2
    b828:	9302      	strne	r3, [sp, #8]
    b82a:	b1be      	cbz	r6, b85c <_strtoull_l.constprop.0+0x64>
    b82c:	2e10      	cmp	r6, #16
    b82e:	d07d      	beq.n	b92c <_strtoull_l.constprop.0+0x134>
    b830:	ea4f 7ae6 	mov.w	sl, r6, asr #31
    b834:	4632      	mov	r2, r6
    b836:	4653      	mov	r3, sl
    b838:	f04f 30ff 	mov.w	r0, #4294967295
    b83c:	f04f 31ff 	mov.w	r1, #4294967295
    b840:	f7f7 fca2 	bl	3188 <__aeabi_uldivmod>
    b844:	4632      	mov	r2, r6
    b846:	4607      	mov	r7, r0
    b848:	4688      	mov	r8, r1
    b84a:	4653      	mov	r3, sl
    b84c:	f04f 30ff 	mov.w	r0, #4294967295
    b850:	f04f 31ff 	mov.w	r1, #4294967295
    b854:	46b1      	mov	r9, r6
    b856:	f7f7 fc97 	bl	3188 <__aeabi_uldivmod>
    b85a:	e00a      	b.n	b872 <_strtoull_l.constprop.0+0x7a>
    b85c:	2c30      	cmp	r4, #48	; 0x30
    b85e:	d079      	beq.n	b954 <_strtoull_l.constprop.0+0x15c>
    b860:	f04f 090a 	mov.w	r9, #10
    b864:	f8df 8128 	ldr.w	r8, [pc, #296]	; b990 <_strtoull_l.constprop.0+0x198>
    b868:	46b2      	mov	sl, r6
    b86a:	2205      	movs	r2, #5
    b86c:	f04f 3799 	mov.w	r7, #2576980377	; 0x99999999
    b870:	464e      	mov	r6, r9
    b872:	f04f 0c00 	mov.w	ip, #0
    b876:	4660      	mov	r0, ip
    b878:	4661      	mov	r1, ip
    b87a:	e011      	b.n	b8a0 <_strtoull_l.constprop.0+0xa8>
    b87c:	4541      	cmp	r1, r8
    b87e:	bf08      	it	eq
    b880:	42b8      	cmpeq	r0, r7
    b882:	d03e      	beq.n	b902 <_strtoull_l.constprop.0+0x10a>
    b884:	fb00 f40a 	mul.w	r4, r0, sl
    b888:	fb09 4101 	mla	r1, r9, r1, r4
    b88c:	fba0 0409 	umull	r0, r4, r0, r9
    b890:	4421      	add	r1, r4
    b892:	1818      	adds	r0, r3, r0
    b894:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
    b898:	f04f 0c01 	mov.w	ip, #1
    b89c:	f815 4b01 	ldrb.w	r4, [r5], #1
    b8a0:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    b8a4:	2b09      	cmp	r3, #9
    b8a6:	d905      	bls.n	b8b4 <_strtoull_l.constprop.0+0xbc>
    b8a8:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
    b8ac:	2b19      	cmp	r3, #25
    b8ae:	d80d      	bhi.n	b8cc <_strtoull_l.constprop.0+0xd4>
    b8b0:	f1a4 0337 	sub.w	r3, r4, #55	; 0x37
    b8b4:	429e      	cmp	r6, r3
    b8b6:	dd11      	ble.n	b8dc <_strtoull_l.constprop.0+0xe4>
    b8b8:	f1bc 3fff 	cmp.w	ip, #4294967295
    b8bc:	d0ee      	beq.n	b89c <_strtoull_l.constprop.0+0xa4>
    b8be:	4287      	cmp	r7, r0
    b8c0:	eb78 0401 	sbcs.w	r4, r8, r1
    b8c4:	d2da      	bcs.n	b87c <_strtoull_l.constprop.0+0x84>
    b8c6:	f04f 3cff 	mov.w	ip, #4294967295
    b8ca:	e7e7      	b.n	b89c <_strtoull_l.constprop.0+0xa4>
    b8cc:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
    b8d0:	2b19      	cmp	r3, #25
    b8d2:	d803      	bhi.n	b8dc <_strtoull_l.constprop.0+0xe4>
    b8d4:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
    b8d8:	429e      	cmp	r6, r3
    b8da:	dced      	bgt.n	b8b8 <_strtoull_l.constprop.0+0xc0>
    b8dc:	f1bc 3fff 	cmp.w	ip, #4294967295
    b8e0:	d014      	beq.n	b90c <_strtoull_l.constprop.0+0x114>
    b8e2:	9b02      	ldr	r3, [sp, #8]
    b8e4:	b113      	cbz	r3, b8ec <_strtoull_l.constprop.0+0xf4>
    b8e6:	4240      	negs	r0, r0
    b8e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    b8ec:	9b01      	ldr	r3, [sp, #4]
    b8ee:	b12b      	cbz	r3, b8fc <_strtoull_l.constprop.0+0x104>
    b8f0:	f1bc 0f00 	cmp.w	ip, #0
    b8f4:	d112      	bne.n	b91c <_strtoull_l.constprop.0+0x124>
    b8f6:	9b01      	ldr	r3, [sp, #4]
    b8f8:	f8c3 b000 	str.w	fp, [r3]
    b8fc:	b005      	add	sp, #20
    b8fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b902:	4293      	cmp	r3, r2
    b904:	ddbe      	ble.n	b884 <_strtoull_l.constprop.0+0x8c>
    b906:	f04f 3cff 	mov.w	ip, #4294967295
    b90a:	e7c7      	b.n	b89c <_strtoull_l.constprop.0+0xa4>
    b90c:	9a03      	ldr	r2, [sp, #12]
    b90e:	2322      	movs	r3, #34	; 0x22
    b910:	6013      	str	r3, [r2, #0]
    b912:	9b01      	ldr	r3, [sp, #4]
    b914:	4660      	mov	r0, ip
    b916:	4661      	mov	r1, ip
    b918:	2b00      	cmp	r3, #0
    b91a:	d0ef      	beq.n	b8fc <_strtoull_l.constprop.0+0x104>
    b91c:	f105 3bff 	add.w	fp, r5, #4294967295
    b920:	e7e9      	b.n	b8f6 <_strtoull_l.constprop.0+0xfe>
    b922:	2301      	movs	r3, #1
    b924:	782c      	ldrb	r4, [r5, #0]
    b926:	9302      	str	r3, [sp, #8]
    b928:	1c8d      	adds	r5, r1, #2
    b92a:	e77e      	b.n	b82a <_strtoull_l.constprop.0+0x32>
    b92c:	2c30      	cmp	r4, #48	; 0x30
    b92e:	d123      	bne.n	b978 <_strtoull_l.constprop.0+0x180>
    b930:	782b      	ldrb	r3, [r5, #0]
    b932:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    b936:	2b58      	cmp	r3, #88	; 0x58
    b938:	d11b      	bne.n	b972 <_strtoull_l.constprop.0+0x17a>
    b93a:	f04f 0910 	mov.w	r9, #16
    b93e:	786c      	ldrb	r4, [r5, #1]
    b940:	220f      	movs	r2, #15
    b942:	3502      	adds	r5, #2
    b944:	f04f 37ff 	mov.w	r7, #4294967295
    b948:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
    b94c:	f04f 0a00 	mov.w	sl, #0
    b950:	464e      	mov	r6, r9
    b952:	e78e      	b.n	b872 <_strtoull_l.constprop.0+0x7a>
    b954:	782b      	ldrb	r3, [r5, #0]
    b956:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    b95a:	2b58      	cmp	r3, #88	; 0x58
    b95c:	d0ed      	beq.n	b93a <_strtoull_l.constprop.0+0x142>
    b95e:	f04f 0908 	mov.w	r9, #8
    b962:	46b2      	mov	sl, r6
    b964:	2207      	movs	r2, #7
    b966:	f04f 37ff 	mov.w	r7, #4294967295
    b96a:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
    b96e:	464e      	mov	r6, r9
    b970:	e77f      	b.n	b872 <_strtoull_l.constprop.0+0x7a>
    b972:	f04f 0a00 	mov.w	sl, #0
    b976:	e75d      	b.n	b834 <_strtoull_l.constprop.0+0x3c>
    b978:	220f      	movs	r2, #15
    b97a:	f04f 37ff 	mov.w	r7, #4294967295
    b97e:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
    b982:	46b1      	mov	r9, r6
    b984:	f04f 0a00 	mov.w	sl, #0
    b988:	e773      	b.n	b872 <_strtoull_l.constprop.0+0x7a>
    b98a:	bf00      	nop
    b98c:	20000731 	.word	0x20000731
    b990:	19999999 	.word	0x19999999

0000b994 <_strtoull_r>:
    b994:	f7ff bf30 	b.w	b7f8 <_strtoull_l.constprop.0>

0000b998 <_mbrtowc_r>:
    b998:	b570      	push	{r4, r5, r6, lr}
    b99a:	b082      	sub	sp, #8
    b99c:	4604      	mov	r4, r0
    b99e:	9d06      	ldr	r5, [sp, #24]
    b9a0:	b155      	cbz	r5, b9b8 <_mbrtowc_r+0x20>
    b9a2:	b16a      	cbz	r2, b9c0 <_mbrtowc_r+0x28>
    b9a4:	480f      	ldr	r0, [pc, #60]	; (b9e4 <_mbrtowc_r+0x4c>)
    b9a6:	9500      	str	r5, [sp, #0]
    b9a8:	f8d0 60e4 	ldr.w	r6, [r0, #228]	; 0xe4
    b9ac:	4620      	mov	r0, r4
    b9ae:	47b0      	blx	r6
    b9b0:	1c43      	adds	r3, r0, #1
    b9b2:	d010      	beq.n	b9d6 <_mbrtowc_r+0x3e>
    b9b4:	b002      	add	sp, #8
    b9b6:	bd70      	pop	{r4, r5, r6, pc}
    b9b8:	f100 05f4 	add.w	r5, r0, #244	; 0xf4
    b9bc:	2a00      	cmp	r2, #0
    b9be:	d1f1      	bne.n	b9a4 <_mbrtowc_r+0xc>
    b9c0:	4b08      	ldr	r3, [pc, #32]	; (b9e4 <_mbrtowc_r+0x4c>)
    b9c2:	9500      	str	r5, [sp, #0]
    b9c4:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
    b9c8:	4611      	mov	r1, r2
    b9ca:	2301      	movs	r3, #1
    b9cc:	4a06      	ldr	r2, [pc, #24]	; (b9e8 <_mbrtowc_r+0x50>)
    b9ce:	4620      	mov	r0, r4
    b9d0:	47b0      	blx	r6
    b9d2:	1c43      	adds	r3, r0, #1
    b9d4:	d1ee      	bne.n	b9b4 <_mbrtowc_r+0x1c>
    b9d6:	2200      	movs	r2, #0
    b9d8:	238a      	movs	r3, #138	; 0x8a
    b9da:	602a      	str	r2, [r5, #0]
    b9dc:	6023      	str	r3, [r4, #0]
    b9de:	b002      	add	sp, #8
    b9e0:	bd70      	pop	{r4, r5, r6, pc}
    b9e2:	bf00      	nop
    b9e4:	20007a38 	.word	0x20007a38
    b9e8:	20000520 	.word	0x20000520

0000b9ec <_wcrtomb_r>:
    b9ec:	b570      	push	{r4, r5, r6, lr}
    b9ee:	4605      	mov	r5, r0
    b9f0:	b084      	sub	sp, #16
    b9f2:	b15b      	cbz	r3, ba0c <_wcrtomb_r+0x20>
    b9f4:	461c      	mov	r4, r3
    b9f6:	b169      	cbz	r1, ba14 <_wcrtomb_r+0x28>
    b9f8:	4b0e      	ldr	r3, [pc, #56]	; (ba34 <_wcrtomb_r+0x48>)
    b9fa:	4628      	mov	r0, r5
    b9fc:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
    ba00:	4623      	mov	r3, r4
    ba02:	47b0      	blx	r6
    ba04:	1c43      	adds	r3, r0, #1
    ba06:	d00f      	beq.n	ba28 <_wcrtomb_r+0x3c>
    ba08:	b004      	add	sp, #16
    ba0a:	bd70      	pop	{r4, r5, r6, pc}
    ba0c:	f500 7482 	add.w	r4, r0, #260	; 0x104
    ba10:	2900      	cmp	r1, #0
    ba12:	d1f1      	bne.n	b9f8 <_wcrtomb_r+0xc>
    ba14:	4a07      	ldr	r2, [pc, #28]	; (ba34 <_wcrtomb_r+0x48>)
    ba16:	4623      	mov	r3, r4
    ba18:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
    ba1c:	4628      	mov	r0, r5
    ba1e:	460a      	mov	r2, r1
    ba20:	a901      	add	r1, sp, #4
    ba22:	47b0      	blx	r6
    ba24:	1c43      	adds	r3, r0, #1
    ba26:	d1ef      	bne.n	ba08 <_wcrtomb_r+0x1c>
    ba28:	2200      	movs	r2, #0
    ba2a:	238a      	movs	r3, #138	; 0x8a
    ba2c:	6022      	str	r2, [r4, #0]
    ba2e:	602b      	str	r3, [r5, #0]
    ba30:	b004      	add	sp, #16
    ba32:	bd70      	pop	{r4, r5, r6, pc}
    ba34:	20007a38 	.word	0x20007a38

0000ba38 <_wcsrtombs_r>:
    ba38:	b510      	push	{r4, lr}
    ba3a:	b082      	sub	sp, #8
    ba3c:	9c04      	ldr	r4, [sp, #16]
    ba3e:	e9cd 3400 	strd	r3, r4, [sp]
    ba42:	f04f 33ff 	mov.w	r3, #4294967295
    ba46:	f001 fd9f 	bl	d588 <_wcsnrtombs_r>
    ba4a:	b002      	add	sp, #8
    ba4c:	bd10      	pop	{r4, pc}
    ba4e:	bf00      	nop

0000ba50 <iswspace>:
    ba50:	2100      	movs	r1, #0
    ba52:	f000 b801 	b.w	ba58 <iswspace_l>
    ba56:	bf00      	nop

0000ba58 <iswspace_l>:
    ba58:	b510      	push	{r4, lr}
    ba5a:	f000 f8ab 	bl	bbb4 <_jp2uc_l>
    ba5e:	4604      	mov	r4, r0
    ba60:	f001 fda4 	bl	d5ac <category>
    ba64:	f1a0 031a 	sub.w	r3, r0, #26
    ba68:	b2db      	uxtb	r3, r3
    ba6a:	2b02      	cmp	r3, #2
    ba6c:	d906      	bls.n	ba7c <iswspace_l+0x24>
    ba6e:	f1a4 0009 	sub.w	r0, r4, #9
    ba72:	2804      	cmp	r0, #4
    ba74:	bf8c      	ite	hi
    ba76:	2000      	movhi	r0, #0
    ba78:	2001      	movls	r0, #1
    ba7a:	bd10      	pop	{r4, pc}
    ba7c:	2001      	movs	r0, #1
    ba7e:	bd10      	pop	{r4, pc}

0000ba80 <__jp2uc>:
    ba80:	2902      	cmp	r1, #2
    ba82:	d032      	beq.n	baea <__jp2uc+0x6a>
    ba84:	2903      	cmp	r1, #3
    ba86:	f3c0 2307 	ubfx	r3, r0, #8, #8
    ba8a:	bf1d      	ittte	ne
    ba8c:	f1a0 0280 	subne.w	r2, r0, #128	; 0x80
    ba90:	f083 0380 	eorne.w	r3, r3, #128	; 0x80
    ba94:	b2d2      	uxtbne	r2, r2
    ba96:	b2c2      	uxtbeq	r2, r0
    ba98:	f103 0150 	add.w	r1, r3, #80	; 0x50
    ba9c:	b2c9      	uxtb	r1, r1
    ba9e:	291f      	cmp	r1, #31
    baa0:	d806      	bhi.n	bab0 <__jp2uc+0x30>
    baa2:	f64c 71d3 	movw	r1, #53203	; 0xcfd3
    baa6:	4288      	cmp	r0, r1
    baa8:	d969      	bls.n	bb7e <__jp2uc+0xfe>
    baaa:	f04f 30ff 	mov.w	r0, #4294967295
    baae:	4770      	bx	lr
    bab0:	f103 0130 	add.w	r1, r3, #48	; 0x30
    bab4:	b2c9      	uxtb	r1, r1
    bab6:	2924      	cmp	r1, #36	; 0x24
    bab8:	d80e      	bhi.n	bad8 <__jp2uc+0x58>
    baba:	f24f 41a6 	movw	r1, #62630	; 0xf4a6
    babe:	4288      	cmp	r0, r1
    bac0:	d8f3      	bhi.n	baaa <__jp2uc+0x2a>
    bac2:	3bd0      	subs	r3, #208	; 0xd0
    bac4:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
    bac8:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
    bacc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    bad0:	4a30      	ldr	r2, [pc, #192]	; (bb94 <__jp2uc+0x114>)
    bad2:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
    bad6:	4770      	bx	lr
    bad8:	3ba1      	subs	r3, #161	; 0xa1
    bada:	2b07      	cmp	r3, #7
    badc:	d8e5      	bhi.n	baaa <__jp2uc+0x2a>
    bade:	e8df f003 	tbb	[pc, r3]
    bae2:	3e48      	.short	0x3e48
    bae4:	25292e34 	.word	0x25292e34
    bae8:	1921      	.short	0x1921
    baea:	b2c2      	uxtb	r2, r0
    baec:	2a9e      	cmp	r2, #158	; 0x9e
    baee:	f3c0 2107 	ubfx	r1, r0, #8, #8
    baf2:	d90b      	bls.n	bb0c <__jp2uc+0x8c>
    baf4:	3223      	adds	r2, #35	; 0x23
    baf6:	b2d2      	uxtb	r2, r2
    baf8:	2380      	movs	r3, #128	; 0x80
    bafa:	299f      	cmp	r1, #159	; 0x9f
    bafc:	bf94      	ite	ls
    bafe:	3970      	subls	r1, #112	; 0x70
    bb00:	3150      	addhi	r1, #80	; 0x50
    bb02:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    bb06:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    bb0a:	e7c5      	b.n	ba98 <__jp2uc+0x18>
    bb0c:	3a7e      	subs	r2, #126	; 0x7e
    bb0e:	b2d2      	uxtb	r2, r2
    bb10:	237f      	movs	r3, #127	; 0x7f
    bb12:	e7f2      	b.n	bafa <__jp2uc+0x7a>
    bb14:	2ac0      	cmp	r2, #192	; 0xc0
    bb16:	d8c8      	bhi.n	baaa <__jp2uc+0x2a>
    bb18:	4b1f      	ldr	r3, [pc, #124]	; (bb98 <__jp2uc+0x118>)
    bb1a:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
    bb1e:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    bb22:	4770      	bx	lr
    bb24:	2af1      	cmp	r2, #241	; 0xf1
    bb26:	d8c0      	bhi.n	baaa <__jp2uc+0x2a>
    bb28:	4b1c      	ldr	r3, [pc, #112]	; (bb9c <__jp2uc+0x11c>)
    bb2a:	e019      	b.n	bb60 <__jp2uc+0xe0>
    bb2c:	2ad8      	cmp	r2, #216	; 0xd8
    bb2e:	d8bc      	bhi.n	baaa <__jp2uc+0x2a>
    bb30:	4b1b      	ldr	r3, [pc, #108]	; (bba0 <__jp2uc+0x120>)
    bb32:	e015      	b.n	bb60 <__jp2uc+0xe0>
    bb34:	2af6      	cmp	r2, #246	; 0xf6
    bb36:	d8b8      	bhi.n	baaa <__jp2uc+0x2a>
    bb38:	f502 5040 	add.w	r0, r2, #12288	; 0x3000
    bb3c:	4770      	bx	lr
    bb3e:	2af3      	cmp	r2, #243	; 0xf3
    bb40:	d8b3      	bhi.n	baaa <__jp2uc+0x2a>
    bb42:	f502 503e 	add.w	r0, r2, #12160	; 0x2f80
    bb46:	3020      	adds	r0, #32
    bb48:	4770      	bx	lr
    bb4a:	4b16      	ldr	r3, [pc, #88]	; (bba4 <__jp2uc+0x124>)
    bb4c:	4413      	add	r3, r2
    bb4e:	f813 3ca1 	ldrb.w	r3, [r3, #-161]
    bb52:	2b00      	cmp	r3, #0
    bb54:	d0a9      	beq.n	baaa <__jp2uc+0x2a>
    bb56:	f502 407e 	add.w	r0, r2, #65024	; 0xfe00
    bb5a:	3060      	adds	r0, #96	; 0x60
    bb5c:	4770      	bx	lr
    bb5e:	4b12      	ldr	r3, [pc, #72]	; (bba8 <__jp2uc+0x128>)
    bb60:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
    bb64:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    bb68:	2800      	cmp	r0, #0
    bb6a:	bf08      	it	eq
    bb6c:	f04f 30ff 	moveq.w	r0, #4294967295
    bb70:	4770      	bx	lr
    bb72:	4b0e      	ldr	r3, [pc, #56]	; (bbac <__jp2uc+0x12c>)
    bb74:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
    bb78:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    bb7c:	4770      	bx	lr
    bb7e:	3bb0      	subs	r3, #176	; 0xb0
    bb80:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
    bb84:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
    bb88:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    bb8c:	4a08      	ldr	r2, [pc, #32]	; (bbb0 <__jp2uc+0x130>)
    bb8e:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
    bb92:	4770      	bx	lr
    bb94:	200058d8 	.word	0x200058d8
    bb98:	20000bf4 	.word	0x20000bf4
    bb9c:	20000b50 	.word	0x20000b50
    bba0:	20000ae0 	.word	0x20000ae0
    bba4:	20000a84 	.word	0x20000a84
    bba8:	200009c8 	.word	0x200009c8
    bbac:	2000090c 	.word	0x2000090c
    bbb0:	20000c34 	.word	0x20000c34

0000bbb4 <_jp2uc_l>:
    bbb4:	b538      	push	{r3, r4, r5, lr}
    bbb6:	4605      	mov	r5, r0
    bbb8:	b1b9      	cbz	r1, bbea <_jp2uc_l+0x36>
    bbba:	f501 7495 	add.w	r4, r1, #298	; 0x12a
    bbbe:	4912      	ldr	r1, [pc, #72]	; (bc08 <_jp2uc_l+0x54>)
    bbc0:	4620      	mov	r0, r4
    bbc2:	f7f9 fc81 	bl	54c8 <strcmp>
    bbc6:	b928      	cbnz	r0, bbd4 <_jp2uc_l+0x20>
    bbc8:	4628      	mov	r0, r5
    bbca:	2101      	movs	r1, #1
    bbcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    bbd0:	f7ff bf56 	b.w	ba80 <__jp2uc>
    bbd4:	490d      	ldr	r1, [pc, #52]	; (bc0c <_jp2uc_l+0x58>)
    bbd6:	4620      	mov	r0, r4
    bbd8:	f7f9 fc76 	bl	54c8 <strcmp>
    bbdc:	b938      	cbnz	r0, bbee <_jp2uc_l+0x3a>
    bbde:	4628      	mov	r0, r5
    bbe0:	2102      	movs	r1, #2
    bbe2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    bbe6:	f7ff bf4b 	b.w	ba80 <__jp2uc>
    bbea:	4c09      	ldr	r4, [pc, #36]	; (bc10 <_jp2uc_l+0x5c>)
    bbec:	e7e7      	b.n	bbbe <_jp2uc_l+0xa>
    bbee:	4909      	ldr	r1, [pc, #36]	; (bc14 <_jp2uc_l+0x60>)
    bbf0:	4620      	mov	r0, r4
    bbf2:	f7f9 fc69 	bl	54c8 <strcmp>
    bbf6:	b928      	cbnz	r0, bc04 <_jp2uc_l+0x50>
    bbf8:	4628      	mov	r0, r5
    bbfa:	2103      	movs	r1, #3
    bbfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    bc00:	f7ff bf3e 	b.w	ba80 <__jp2uc>
    bc04:	4628      	mov	r0, r5
    bc06:	bd38      	pop	{r3, r4, r5, pc}
    bc08:	200008a0 	.word	0x200008a0
    bc0c:	200008a4 	.word	0x200008a4
    bc10:	20007b62 	.word	0x20007b62
    bc14:	200008ac 	.word	0x200008ac

0000bc18 <fiprintf>:
    bc18:	b40e      	push	{r1, r2, r3}
    bc1a:	b510      	push	{r4, lr}
    bc1c:	b083      	sub	sp, #12
    bc1e:	ab05      	add	r3, sp, #20
    bc20:	4c06      	ldr	r4, [pc, #24]	; (bc3c <fiprintf+0x24>)
    bc22:	f853 2b04 	ldr.w	r2, [r3], #4
    bc26:	9301      	str	r3, [sp, #4]
    bc28:	4601      	mov	r1, r0
    bc2a:	6820      	ldr	r0, [r4, #0]
    bc2c:	f000 f97c 	bl	bf28 <_vfiprintf_r>
    bc30:	b003      	add	sp, #12
    bc32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bc36:	b003      	add	sp, #12
    bc38:	4770      	bx	lr
    bc3a:	bf00      	nop
    bc3c:	20007fc0 	.word	0x20007fc0

0000bc40 <__ssprint_r>:
    bc40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bc44:	6893      	ldr	r3, [r2, #8]
    bc46:	6817      	ldr	r7, [r2, #0]
    bc48:	b083      	sub	sp, #12
    bc4a:	4692      	mov	sl, r2
    bc4c:	2b00      	cmp	r3, #0
    bc4e:	d070      	beq.n	bd32 <__ssprint_r+0xf2>
    bc50:	4681      	mov	r9, r0
    bc52:	688a      	ldr	r2, [r1, #8]
    bc54:	6808      	ldr	r0, [r1, #0]
    bc56:	460c      	mov	r4, r1
    bc58:	3708      	adds	r7, #8
    bc5a:	e043      	b.n	bce4 <__ssprint_r+0xa4>
    bc5c:	89a3      	ldrh	r3, [r4, #12]
    bc5e:	f413 6f90 	tst.w	r3, #1152	; 0x480
    bc62:	d02e      	beq.n	bcc2 <__ssprint_r+0x82>
    bc64:	e9d4 1604 	ldrd	r1, r6, [r4, #16]
    bc68:	eba0 0801 	sub.w	r8, r0, r1
    bc6c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    bc70:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
    bc74:	f108 0001 	add.w	r0, r8, #1
    bc78:	1076      	asrs	r6, r6, #1
    bc7a:	4428      	add	r0, r5
    bc7c:	42b0      	cmp	r0, r6
    bc7e:	4632      	mov	r2, r6
    bc80:	bf84      	itt	hi
    bc82:	4606      	movhi	r6, r0
    bc84:	4632      	movhi	r2, r6
    bc86:	055b      	lsls	r3, r3, #21
    bc88:	d537      	bpl.n	bcfa <__ssprint_r+0xba>
    bc8a:	4611      	mov	r1, r2
    bc8c:	4648      	mov	r0, r9
    bc8e:	f7f7 fc09 	bl	34a4 <_malloc_r>
    bc92:	9001      	str	r0, [sp, #4]
    bc94:	2800      	cmp	r0, #0
    bc96:	d03a      	beq.n	bd0e <__ssprint_r+0xce>
    bc98:	4642      	mov	r2, r8
    bc9a:	6921      	ldr	r1, [r4, #16]
    bc9c:	f7f5 fcdc 	bl	1658 <memcpy>
    bca0:	89a2      	ldrh	r2, [r4, #12]
    bca2:	9b01      	ldr	r3, [sp, #4]
    bca4:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
    bca8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    bcac:	81a2      	strh	r2, [r4, #12]
    bcae:	eba6 0208 	sub.w	r2, r6, r8
    bcb2:	eb03 0008 	add.w	r0, r3, r8
    bcb6:	6166      	str	r6, [r4, #20]
    bcb8:	60a2      	str	r2, [r4, #8]
    bcba:	6123      	str	r3, [r4, #16]
    bcbc:	6020      	str	r0, [r4, #0]
    bcbe:	462e      	mov	r6, r5
    bcc0:	46a8      	mov	r8, r5
    bcc2:	4642      	mov	r2, r8
    bcc4:	4659      	mov	r1, fp
    bcc6:	f7f9 fa15 	bl	50f4 <memmove>
    bcca:	f8da 3008 	ldr.w	r3, [sl, #8]
    bcce:	68a2      	ldr	r2, [r4, #8]
    bcd0:	6820      	ldr	r0, [r4, #0]
    bcd2:	1b92      	subs	r2, r2, r6
    bcd4:	4440      	add	r0, r8
    bcd6:	1b5b      	subs	r3, r3, r5
    bcd8:	60a2      	str	r2, [r4, #8]
    bcda:	6020      	str	r0, [r4, #0]
    bcdc:	f8ca 3008 	str.w	r3, [sl, #8]
    bce0:	b33b      	cbz	r3, bd32 <__ssprint_r+0xf2>
    bce2:	3708      	adds	r7, #8
    bce4:	e957 b502 	ldrd	fp, r5, [r7, #-8]
    bce8:	2d00      	cmp	r5, #0
    bcea:	d0fa      	beq.n	bce2 <__ssprint_r+0xa2>
    bcec:	42aa      	cmp	r2, r5
    bcee:	4616      	mov	r6, r2
    bcf0:	4690      	mov	r8, r2
    bcf2:	d9b3      	bls.n	bc5c <__ssprint_r+0x1c>
    bcf4:	462e      	mov	r6, r5
    bcf6:	46a8      	mov	r8, r5
    bcf8:	e7e3      	b.n	bcc2 <__ssprint_r+0x82>
    bcfa:	4648      	mov	r0, r9
    bcfc:	f7f7 fe9a 	bl	3a34 <_realloc_r>
    bd00:	4603      	mov	r3, r0
    bd02:	2800      	cmp	r0, #0
    bd04:	d1d3      	bne.n	bcae <__ssprint_r+0x6e>
    bd06:	6921      	ldr	r1, [r4, #16]
    bd08:	4648      	mov	r0, r9
    bd0a:	f7f9 fe27 	bl	595c <_free_r>
    bd0e:	89a3      	ldrh	r3, [r4, #12]
    bd10:	220c      	movs	r2, #12
    bd12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    bd16:	f8c9 2000 	str.w	r2, [r9]
    bd1a:	f04f 30ff 	mov.w	r0, #4294967295
    bd1e:	81a3      	strh	r3, [r4, #12]
    bd20:	2200      	movs	r2, #0
    bd22:	2300      	movs	r3, #0
    bd24:	f8ca 2008 	str.w	r2, [sl, #8]
    bd28:	f8ca 3004 	str.w	r3, [sl, #4]
    bd2c:	b003      	add	sp, #12
    bd2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bd32:	2000      	movs	r0, #0
    bd34:	2300      	movs	r3, #0
    bd36:	f8ca 3004 	str.w	r3, [sl, #4]
    bd3a:	b003      	add	sp, #12
    bd3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000bd40 <_sungetc_r>:
    bd40:	b538      	push	{r3, r4, r5, lr}
    bd42:	1c4b      	adds	r3, r1, #1
    bd44:	d01a      	beq.n	bd7c <_sungetc_r+0x3c>
    bd46:	8993      	ldrh	r3, [r2, #12]
    bd48:	4614      	mov	r4, r2
    bd4a:	6b12      	ldr	r2, [r2, #48]	; 0x30
    bd4c:	f023 0320 	bic.w	r3, r3, #32
    bd50:	81a3      	strh	r3, [r4, #12]
    bd52:	b2cd      	uxtb	r5, r1
    bd54:	b1aa      	cbz	r2, bd82 <_sungetc_r+0x42>
    bd56:	6862      	ldr	r2, [r4, #4]
    bd58:	6b63      	ldr	r3, [r4, #52]	; 0x34
    bd5a:	429a      	cmp	r2, r3
    bd5c:	da09      	bge.n	bd72 <_sungetc_r+0x32>
    bd5e:	6823      	ldr	r3, [r4, #0]
    bd60:	1e5a      	subs	r2, r3, #1
    bd62:	6022      	str	r2, [r4, #0]
    bd64:	f803 5c01 	strb.w	r5, [r3, #-1]
    bd68:	6863      	ldr	r3, [r4, #4]
    bd6a:	3301      	adds	r3, #1
    bd6c:	6063      	str	r3, [r4, #4]
    bd6e:	4628      	mov	r0, r5
    bd70:	bd38      	pop	{r3, r4, r5, pc}
    bd72:	4621      	mov	r1, r4
    bd74:	f001 fa58 	bl	d228 <__submore>
    bd78:	2800      	cmp	r0, #0
    bd7a:	d0f0      	beq.n	bd5e <_sungetc_r+0x1e>
    bd7c:	f04f 35ff 	mov.w	r5, #4294967295
    bd80:	e7f5      	b.n	bd6e <_sungetc_r+0x2e>
    bd82:	6923      	ldr	r3, [r4, #16]
    bd84:	6822      	ldr	r2, [r4, #0]
    bd86:	b12b      	cbz	r3, bd94 <_sungetc_r+0x54>
    bd88:	4293      	cmp	r3, r2
    bd8a:	d203      	bcs.n	bd94 <_sungetc_r+0x54>
    bd8c:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    bd90:	42ab      	cmp	r3, r5
    bd92:	d00f      	beq.n	bdb4 <_sungetc_r+0x74>
    bd94:	6861      	ldr	r1, [r4, #4]
    bd96:	63e1      	str	r1, [r4, #60]	; 0x3c
    bd98:	4623      	mov	r3, r4
    bd9a:	63a2      	str	r2, [r4, #56]	; 0x38
    bd9c:	f104 0140 	add.w	r1, r4, #64	; 0x40
    bda0:	2203      	movs	r2, #3
    bda2:	6362      	str	r2, [r4, #52]	; 0x34
    bda4:	6321      	str	r1, [r4, #48]	; 0x30
    bda6:	f803 5f42 	strb.w	r5, [r3, #66]!
    bdaa:	2201      	movs	r2, #1
    bdac:	e9c4 3200 	strd	r3, r2, [r4]
    bdb0:	4628      	mov	r0, r5
    bdb2:	bd38      	pop	{r3, r4, r5, pc}
    bdb4:	6863      	ldr	r3, [r4, #4]
    bdb6:	3a01      	subs	r2, #1
    bdb8:	3301      	adds	r3, #1
    bdba:	e9c4 2300 	strd	r2, r3, [r4]
    bdbe:	e7d6      	b.n	bd6e <_sungetc_r+0x2e>

0000bdc0 <__ssrefill_r>:
    bdc0:	b510      	push	{r4, lr}
    bdc2:	460c      	mov	r4, r1
    bdc4:	6b09      	ldr	r1, [r1, #48]	; 0x30
    bdc6:	b169      	cbz	r1, bde4 <__ssrefill_r+0x24>
    bdc8:	f104 0340 	add.w	r3, r4, #64	; 0x40
    bdcc:	4299      	cmp	r1, r3
    bdce:	d001      	beq.n	bdd4 <__ssrefill_r+0x14>
    bdd0:	f7f9 fdc4 	bl	595c <_free_r>
    bdd4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    bdd6:	6063      	str	r3, [r4, #4]
    bdd8:	2000      	movs	r0, #0
    bdda:	6320      	str	r0, [r4, #48]	; 0x30
    bddc:	b113      	cbz	r3, bde4 <__ssrefill_r+0x24>
    bdde:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    bde0:	6023      	str	r3, [r4, #0]
    bde2:	bd10      	pop	{r4, pc}
    bde4:	89a3      	ldrh	r3, [r4, #12]
    bde6:	6921      	ldr	r1, [r4, #16]
    bde8:	2200      	movs	r2, #0
    bdea:	f043 0320 	orr.w	r3, r3, #32
    bdee:	e9c4 1200 	strd	r1, r2, [r4]
    bdf2:	81a3      	strh	r3, [r4, #12]
    bdf4:	f04f 30ff 	mov.w	r0, #4294967295
    bdf8:	bd10      	pop	{r4, pc}
    bdfa:	bf00      	nop

0000bdfc <_sfread_r>:
    bdfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    be00:	b085      	sub	sp, #20
    be02:	e9cd 3202 	strd	r3, r2, [sp, #8]
    be06:	fb02 f303 	mul.w	r3, r2, r3
    be0a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    be0c:	9301      	str	r3, [sp, #4]
    be0e:	b3a3      	cbz	r3, be7a <_sfread_r+0x7e>
    be10:	f8d4 a004 	ldr.w	sl, [r4, #4]
    be14:	9b01      	ldr	r3, [sp, #4]
    be16:	4553      	cmp	r3, sl
    be18:	468b      	mov	fp, r1
    be1a:	d946      	bls.n	beaa <_sfread_r+0xae>
    be1c:	46a0      	mov	r8, r4
    be1e:	9d01      	ldr	r5, [sp, #4]
    be20:	f858 1b40 	ldr.w	r1, [r8], #64
    be24:	4607      	mov	r7, r0
    be26:	2600      	movs	r6, #0
    be28:	4652      	mov	r2, sl
    be2a:	4658      	mov	r0, fp
    be2c:	f7f5 fc14 	bl	1658 <memcpy>
    be30:	6823      	ldr	r3, [r4, #0]
    be32:	6b22      	ldr	r2, [r4, #48]	; 0x30
    be34:	4453      	add	r3, sl
    be36:	46a9      	mov	r9, r5
    be38:	e9c4 3600 	strd	r3, r6, [r4]
    be3c:	4611      	mov	r1, r2
    be3e:	4638      	mov	r0, r7
    be40:	44d3      	add	fp, sl
    be42:	eba5 050a 	sub.w	r5, r5, sl
    be46:	b1e2      	cbz	r2, be82 <_sfread_r+0x86>
    be48:	4542      	cmp	r2, r8
    be4a:	d001      	beq.n	be50 <_sfread_r+0x54>
    be4c:	f7f9 fd86 	bl	595c <_free_r>
    be50:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    be52:	6326      	str	r6, [r4, #48]	; 0x30
    be54:	6063      	str	r3, [r4, #4]
    be56:	b1a3      	cbz	r3, be82 <_sfread_r+0x86>
    be58:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    be5a:	6021      	str	r1, [r4, #0]
    be5c:	42ab      	cmp	r3, r5
    be5e:	469a      	mov	sl, r3
    be60:	d3e2      	bcc.n	be28 <_sfread_r+0x2c>
    be62:	9b02      	ldr	r3, [sp, #8]
    be64:	9301      	str	r3, [sp, #4]
    be66:	462a      	mov	r2, r5
    be68:	4658      	mov	r0, fp
    be6a:	f7f5 fbf5 	bl	1658 <memcpy>
    be6e:	e9d4 3200 	ldrd	r3, r2, [r4]
    be72:	1b52      	subs	r2, r2, r5
    be74:	442b      	add	r3, r5
    be76:	e9c4 3200 	strd	r3, r2, [r4]
    be7a:	9801      	ldr	r0, [sp, #4]
    be7c:	b005      	add	sp, #20
    be7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    be82:	9a01      	ldr	r2, [sp, #4]
    be84:	9b03      	ldr	r3, [sp, #12]
    be86:	4452      	add	r2, sl
    be88:	eba2 0209 	sub.w	r2, r2, r9
    be8c:	fbb2 f3f3 	udiv	r3, r2, r3
    be90:	9301      	str	r3, [sp, #4]
    be92:	89a3      	ldrh	r3, [r4, #12]
    be94:	6922      	ldr	r2, [r4, #16]
    be96:	9801      	ldr	r0, [sp, #4]
    be98:	f043 0320 	orr.w	r3, r3, #32
    be9c:	81a3      	strh	r3, [r4, #12]
    be9e:	2300      	movs	r3, #0
    bea0:	e9c4 2300 	strd	r2, r3, [r4]
    bea4:	b005      	add	sp, #20
    bea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    beaa:	6821      	ldr	r1, [r4, #0]
    beac:	461d      	mov	r5, r3
    beae:	e7d8      	b.n	be62 <_sfread_r+0x66>

0000beb0 <__sprint_r.part.0>:
    beb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    beb4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    beb6:	049c      	lsls	r4, r3, #18
    beb8:	4690      	mov	r8, r2
    beba:	d52d      	bpl.n	bf18 <__sprint_r.part.0+0x68>
    bebc:	6893      	ldr	r3, [r2, #8]
    bebe:	6812      	ldr	r2, [r2, #0]
    bec0:	b343      	cbz	r3, bf14 <__sprint_r.part.0+0x64>
    bec2:	468b      	mov	fp, r1
    bec4:	4606      	mov	r6, r0
    bec6:	f102 0908 	add.w	r9, r2, #8
    beca:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
    bece:	ea5f 079a 	movs.w	r7, sl, lsr #2
    bed2:	d015      	beq.n	bf00 <__sprint_r.part.0+0x50>
    bed4:	3d04      	subs	r5, #4
    bed6:	2400      	movs	r4, #0
    bed8:	e001      	b.n	bede <__sprint_r.part.0+0x2e>
    beda:	42a7      	cmp	r7, r4
    bedc:	d00e      	beq.n	befc <__sprint_r.part.0+0x4c>
    bede:	f855 1f04 	ldr.w	r1, [r5, #4]!
    bee2:	465a      	mov	r2, fp
    bee4:	4630      	mov	r0, r6
    bee6:	f001 fa97 	bl	d418 <_fputwc_r>
    beea:	1c43      	adds	r3, r0, #1
    beec:	f104 0401 	add.w	r4, r4, #1
    bef0:	d1f3      	bne.n	beda <__sprint_r.part.0+0x2a>
    bef2:	2300      	movs	r3, #0
    bef4:	e9c8 3301 	strd	r3, r3, [r8, #4]
    bef8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    befc:	f8d8 3008 	ldr.w	r3, [r8, #8]
    bf00:	f02a 0a03 	bic.w	sl, sl, #3
    bf04:	eba3 030a 	sub.w	r3, r3, sl
    bf08:	f8c8 3008 	str.w	r3, [r8, #8]
    bf0c:	f109 0908 	add.w	r9, r9, #8
    bf10:	2b00      	cmp	r3, #0
    bf12:	d1da      	bne.n	beca <__sprint_r.part.0+0x1a>
    bf14:	2000      	movs	r0, #0
    bf16:	e7ec      	b.n	bef2 <__sprint_r.part.0+0x42>
    bf18:	f001 f80c 	bl	cf34 <__sfvwrite_r>
    bf1c:	2300      	movs	r3, #0
    bf1e:	e9c8 3301 	strd	r3, r3, [r8, #4]
    bf22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bf26:	bf00      	nop

0000bf28 <_vfiprintf_r>:
    bf28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bf2c:	ed2d 8b02 	vpush	{d8}
    bf30:	b0c5      	sub	sp, #276	; 0x114
    bf32:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
    bf36:	4683      	mov	fp, r0
    bf38:	ee08 1a10 	vmov	s16, r1
    bf3c:	4616      	mov	r6, r2
    bf3e:	2100      	movs	r1, #0
    bf40:	2208      	movs	r2, #8
    bf42:	4650      	mov	r0, sl
    bf44:	461c      	mov	r4, r3
    bf46:	9307      	str	r3, [sp, #28]
    bf48:	f7f9 f950 	bl	51ec <memset>
    bf4c:	f1bb 0f00 	cmp.w	fp, #0
    bf50:	d004      	beq.n	bf5c <_vfiprintf_r+0x34>
    bf52:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
    bf56:	2b00      	cmp	r3, #0
    bf58:	f000 86a0 	beq.w	cc9c <_vfiprintf_r+0xd74>
    bf5c:	ee18 2a10 	vmov	r2, s16
    bf60:	6e53      	ldr	r3, [r2, #100]	; 0x64
    bf62:	07db      	lsls	r3, r3, #31
    bf64:	f140 8513 	bpl.w	c98e <_vfiprintf_r+0xa66>
    bf68:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
    bf6c:	b28a      	uxth	r2, r1
    bf6e:	0495      	lsls	r5, r2, #18
    bf70:	d40b      	bmi.n	bf8a <_vfiprintf_r+0x62>
    bf72:	ee18 3a10 	vmov	r3, s16
    bf76:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
    bf7a:	8199      	strh	r1, [r3, #12]
    bf7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    bf7e:	b28a      	uxth	r2, r1
    bf80:	ee18 1a10 	vmov	r1, s16
    bf84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    bf88:	664b      	str	r3, [r1, #100]	; 0x64
    bf8a:	0710      	lsls	r0, r2, #28
    bf8c:	f140 8105 	bpl.w	c19a <_vfiprintf_r+0x272>
    bf90:	ee18 3a10 	vmov	r3, s16
    bf94:	691b      	ldr	r3, [r3, #16]
    bf96:	2b00      	cmp	r3, #0
    bf98:	f000 80ff 	beq.w	c19a <_vfiprintf_r+0x272>
    bf9c:	f002 031a 	and.w	r3, r2, #26
    bfa0:	2b0a      	cmp	r3, #10
    bfa2:	f000 810a 	beq.w	c1ba <_vfiprintf_r+0x292>
    bfa6:	2300      	movs	r3, #0
    bfa8:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
    bfac:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
    bfb0:	aa1b      	add	r2, sp, #108	; 0x6c
    bfb2:	930c      	str	r3, [sp, #48]	; 0x30
    bfb4:	9218      	str	r2, [sp, #96]	; 0x60
    bfb6:	4691      	mov	r9, r2
    bfb8:	930b      	str	r3, [sp, #44]	; 0x2c
    bfba:	9305      	str	r3, [sp, #20]
    bfbc:	46b0      	mov	r8, r6
    bfbe:	4644      	mov	r4, r8
    bfc0:	4ba8      	ldr	r3, [pc, #672]	; (c264 <_vfiprintf_r+0x33c>)
    bfc2:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    bfc6:	f7f9 f9db 	bl	5380 <__locale_mb_cur_max>
    bfca:	4622      	mov	r2, r4
    bfcc:	4603      	mov	r3, r0
    bfce:	a912      	add	r1, sp, #72	; 0x48
    bfd0:	f8cd a000 	str.w	sl, [sp]
    bfd4:	4658      	mov	r0, fp
    bfd6:	47a8      	blx	r5
    bfd8:	2800      	cmp	r0, #0
    bfda:	f000 8145 	beq.w	c268 <_vfiprintf_r+0x340>
    bfde:	f2c0 8139 	blt.w	c254 <_vfiprintf_r+0x32c>
    bfe2:	9a12      	ldr	r2, [sp, #72]	; 0x48
    bfe4:	2a25      	cmp	r2, #37	; 0x25
    bfe6:	4603      	mov	r3, r0
    bfe8:	d001      	beq.n	bfee <_vfiprintf_r+0xc6>
    bfea:	441c      	add	r4, r3
    bfec:	e7e8      	b.n	bfc0 <_vfiprintf_r+0x98>
    bfee:	ebb4 0608 	subs.w	r6, r4, r8
    bff2:	4605      	mov	r5, r0
    bff4:	f040 813c 	bne.w	c270 <_vfiprintf_r+0x348>
    bff8:	2300      	movs	r3, #0
    bffa:	7861      	ldrb	r1, [r4, #1]
    bffc:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    c000:	f104 0801 	add.w	r8, r4, #1
    c004:	9306      	str	r3, [sp, #24]
    c006:	f04f 37ff 	mov.w	r7, #4294967295
    c00a:	461e      	mov	r6, r3
    c00c:	242b      	movs	r4, #43	; 0x2b
    c00e:	f108 0801 	add.w	r8, r8, #1
    c012:	f1a1 0320 	sub.w	r3, r1, #32
    c016:	2b5a      	cmp	r3, #90	; 0x5a
    c018:	f200 8178 	bhi.w	c30c <_vfiprintf_r+0x3e4>
    c01c:	e8df f013 	tbh	[pc, r3, lsl #1]
    c020:	017602b5 	.word	0x017602b5
    c024:	02b00176 	.word	0x02b00176
    c028:	01760176 	.word	0x01760176
    c02c:	006a0176 	.word	0x006a0176
    c030:	01760176 	.word	0x01760176
    c034:	028d027d 	.word	0x028d027d
    c038:	02880176 	.word	0x02880176
    c03c:	01760297 	.word	0x01760297
    c040:	005b0292 	.word	0x005b0292
    c044:	005b005b 	.word	0x005b005b
    c048:	005b005b 	.word	0x005b005b
    c04c:	005b005b 	.word	0x005b005b
    c050:	005b005b 	.word	0x005b005b
    c054:	01760176 	.word	0x01760176
    c058:	01760176 	.word	0x01760176
    c05c:	01760176 	.word	0x01760176
    c060:	01760176 	.word	0x01760176
    c064:	025c0176 	.word	0x025c0176
    c068:	01760084 	.word	0x01760084
    c06c:	01760176 	.word	0x01760176
    c070:	01760176 	.word	0x01760176
    c074:	01760176 	.word	0x01760176
    c078:	01760176 	.word	0x01760176
    c07c:	00e80176 	.word	0x00e80176
    c080:	01760176 	.word	0x01760176
    c084:	02330176 	.word	0x02330176
    c088:	02da0176 	.word	0x02da0176
    c08c:	01760176 	.word	0x01760176
    c090:	0176058b 	.word	0x0176058b
    c094:	01760176 	.word	0x01760176
    c098:	01760176 	.word	0x01760176
    c09c:	01760176 	.word	0x01760176
    c0a0:	01760176 	.word	0x01760176
    c0a4:	025c0176 	.word	0x025c0176
    c0a8:	01760086 	.word	0x01760086
    c0ac:	01760176 	.word	0x01760176
    c0b0:	008602cd 	.word	0x008602cd
    c0b4:	0176007f 	.word	0x0176007f
    c0b8:	017602c0 	.word	0x017602c0
    c0bc:	00ea02fd 	.word	0x00ea02fd
    c0c0:	007f02ed 	.word	0x007f02ed
    c0c4:	02330176 	.word	0x02330176
    c0c8:	0569007c 	.word	0x0569007c
    c0cc:	01760176 	.word	0x01760176
    c0d0:	0176056b 	.word	0x0176056b
    c0d4:	007c      	.short	0x007c
    c0d6:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    c0da:	2200      	movs	r2, #0
    c0dc:	f818 1b01 	ldrb.w	r1, [r8], #1
    c0e0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    c0e4:	eb03 0242 	add.w	r2, r3, r2, lsl #1
    c0e8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    c0ec:	2b09      	cmp	r3, #9
    c0ee:	d9f5      	bls.n	c0dc <_vfiprintf_r+0x1b4>
    c0f0:	9206      	str	r2, [sp, #24]
    c0f2:	e78e      	b.n	c012 <_vfiprintf_r+0xea>
    c0f4:	4658      	mov	r0, fp
    c0f6:	f7fe fa2d 	bl	a554 <_localeconv_r>
    c0fa:	6843      	ldr	r3, [r0, #4]
    c0fc:	930d      	str	r3, [sp, #52]	; 0x34
    c0fe:	4618      	mov	r0, r3
    c100:	f7f9 fb5e 	bl	57c0 <strlen>
    c104:	900e      	str	r0, [sp, #56]	; 0x38
    c106:	4605      	mov	r5, r0
    c108:	4658      	mov	r0, fp
    c10a:	f7fe fa23 	bl	a554 <_localeconv_r>
    c10e:	6883      	ldr	r3, [r0, #8]
    c110:	930b      	str	r3, [sp, #44]	; 0x2c
    c112:	2d00      	cmp	r5, #0
    c114:	f040 84d6 	bne.w	cac4 <_vfiprintf_r+0xb9c>
    c118:	f898 1000 	ldrb.w	r1, [r8]
    c11c:	e777      	b.n	c00e <_vfiprintf_r+0xe6>
    c11e:	f898 1000 	ldrb.w	r1, [r8]
    c122:	f046 0620 	orr.w	r6, r6, #32
    c126:	e772      	b.n	c00e <_vfiprintf_r+0xe6>
    c128:	f046 0610 	orr.w	r6, r6, #16
    c12c:	06b4      	lsls	r4, r6, #26
    c12e:	f140 818e 	bpl.w	c44e <_vfiprintf_r+0x526>
    c132:	9b07      	ldr	r3, [sp, #28]
    c134:	3307      	adds	r3, #7
    c136:	f023 0307 	bic.w	r3, r3, #7
    c13a:	461a      	mov	r2, r3
    c13c:	6859      	ldr	r1, [r3, #4]
    c13e:	f852 3b08 	ldr.w	r3, [r2], #8
    c142:	9207      	str	r2, [sp, #28]
    c144:	460a      	mov	r2, r1
    c146:	2900      	cmp	r1, #0
    c148:	f2c0 8470 	blt.w	ca2c <_vfiprintf_r+0xb04>
    c14c:	1c79      	adds	r1, r7, #1
    c14e:	f000 85a2 	beq.w	cc96 <_vfiprintf_r+0xd6e>
    c152:	f026 0180 	bic.w	r1, r6, #128	; 0x80
    c156:	9103      	str	r1, [sp, #12]
    c158:	ea53 0102 	orrs.w	r1, r3, r2
    c15c:	f000 843f 	beq.w	c9de <_vfiprintf_r+0xab6>
    c160:	2b0a      	cmp	r3, #10
    c162:	f172 0100 	sbcs.w	r1, r2, #0
    c166:	f080 8541 	bcs.w	cbec <_vfiprintf_r+0xcc4>
    c16a:	3330      	adds	r3, #48	; 0x30
    c16c:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
    c170:	9e03      	ldr	r6, [sp, #12]
    c172:	2301      	movs	r3, #1
    c174:	9304      	str	r3, [sp, #16]
    c176:	f20d 140f 	addw	r4, sp, #271	; 0x10f
    c17a:	9b04      	ldr	r3, [sp, #16]
    c17c:	42bb      	cmp	r3, r7
    c17e:	bfb8      	it	lt
    c180:	463b      	movlt	r3, r7
    c182:	9303      	str	r3, [sp, #12]
    c184:	2300      	movs	r3, #0
    c186:	9308      	str	r3, [sp, #32]
    c188:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    c18c:	2b00      	cmp	r3, #0
    c18e:	f000 80cb 	beq.w	c328 <_vfiprintf_r+0x400>
    c192:	9b03      	ldr	r3, [sp, #12]
    c194:	3301      	adds	r3, #1
    c196:	9303      	str	r3, [sp, #12]
    c198:	e0c6      	b.n	c328 <_vfiprintf_r+0x400>
    c19a:	ee18 1a10 	vmov	r1, s16
    c19e:	4658      	mov	r0, fp
    c1a0:	ee18 5a10 	vmov	r5, s16
    c1a4:	f001 f87c 	bl	d2a0 <__swsetup_r>
    c1a8:	2800      	cmp	r0, #0
    c1aa:	f040 8652 	bne.w	ce52 <_vfiprintf_r+0xf2a>
    c1ae:	89aa      	ldrh	r2, [r5, #12]
    c1b0:	f002 031a 	and.w	r3, r2, #26
    c1b4:	2b0a      	cmp	r3, #10
    c1b6:	f47f aef6 	bne.w	bfa6 <_vfiprintf_r+0x7e>
    c1ba:	ee18 1a10 	vmov	r1, s16
    c1be:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
    c1c2:	2b00      	cmp	r3, #0
    c1c4:	f6ff aeef 	blt.w	bfa6 <_vfiprintf_r+0x7e>
    c1c8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    c1ca:	07db      	lsls	r3, r3, #31
    c1cc:	d402      	bmi.n	c1d4 <_vfiprintf_r+0x2ac>
    c1ce:	0597      	lsls	r7, r2, #22
    c1d0:	f140 8612 	bpl.w	cdf8 <_vfiprintf_r+0xed0>
    c1d4:	ee18 1a10 	vmov	r1, s16
    c1d8:	4623      	mov	r3, r4
    c1da:	4632      	mov	r2, r6
    c1dc:	4658      	mov	r0, fp
    c1de:	f000 fe69 	bl	ceb4 <__sbprintf>
    c1e2:	9005      	str	r0, [sp, #20]
    c1e4:	9805      	ldr	r0, [sp, #20]
    c1e6:	b045      	add	sp, #276	; 0x114
    c1e8:	ecbd 8b02 	vpop	{d8}
    c1ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c1f0:	f046 0610 	orr.w	r6, r6, #16
    c1f4:	f016 0220 	ands.w	r2, r6, #32
    c1f8:	f000 8136 	beq.w	c468 <_vfiprintf_r+0x540>
    c1fc:	9b07      	ldr	r3, [sp, #28]
    c1fe:	3307      	adds	r3, #7
    c200:	f023 0307 	bic.w	r3, r3, #7
    c204:	4619      	mov	r1, r3
    c206:	685a      	ldr	r2, [r3, #4]
    c208:	f851 3b08 	ldr.w	r3, [r1], #8
    c20c:	9107      	str	r1, [sp, #28]
    c20e:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
    c212:	9103      	str	r1, [sp, #12]
    c214:	2100      	movs	r1, #0
    c216:	2000      	movs	r0, #0
    c218:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
    c21c:	1c78      	adds	r0, r7, #1
    c21e:	f000 8210 	beq.w	c642 <_vfiprintf_r+0x71a>
    c222:	9803      	ldr	r0, [sp, #12]
    c224:	f020 0680 	bic.w	r6, r0, #128	; 0x80
    c228:	ea53 0002 	orrs.w	r0, r3, r2
    c22c:	f040 8208 	bne.w	c640 <_vfiprintf_r+0x718>
    c230:	2f00      	cmp	r7, #0
    c232:	f040 8538 	bne.w	cca6 <_vfiprintf_r+0xd7e>
    c236:	2900      	cmp	r1, #0
    c238:	f040 83d5 	bne.w	c9e6 <_vfiprintf_r+0xabe>
    c23c:	9b03      	ldr	r3, [sp, #12]
    c23e:	f013 0301 	ands.w	r3, r3, #1
    c242:	9304      	str	r3, [sp, #16]
    c244:	f000 8411 	beq.w	ca6a <_vfiprintf_r+0xb42>
    c248:	2330      	movs	r3, #48	; 0x30
    c24a:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
    c24e:	f20d 140f 	addw	r4, sp, #271	; 0x10f
    c252:	e792      	b.n	c17a <_vfiprintf_r+0x252>
    c254:	2208      	movs	r2, #8
    c256:	2100      	movs	r1, #0
    c258:	4650      	mov	r0, sl
    c25a:	f7f8 ffc7 	bl	51ec <memset>
    c25e:	2301      	movs	r3, #1
    c260:	441c      	add	r4, r3
    c262:	e6ad      	b.n	bfc0 <_vfiprintf_r+0x98>
    c264:	20007a38 	.word	0x20007a38
    c268:	ebb4 0608 	subs.w	r6, r4, r8
    c26c:	4605      	mov	r5, r0
    c26e:	d01b      	beq.n	c2a8 <_vfiprintf_r+0x380>
    c270:	9b19      	ldr	r3, [sp, #100]	; 0x64
    c272:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    c274:	3301      	adds	r3, #1
    c276:	4432      	add	r2, r6
    c278:	2b07      	cmp	r3, #7
    c27a:	e9c9 8600 	strd	r8, r6, [r9]
    c27e:	921a      	str	r2, [sp, #104]	; 0x68
    c280:	9319      	str	r3, [sp, #100]	; 0x64
    c282:	dd1c      	ble.n	c2be <_vfiprintf_r+0x396>
    c284:	2a00      	cmp	r2, #0
    c286:	f000 83a6 	beq.w	c9d6 <_vfiprintf_r+0xaae>
    c28a:	ee18 1a10 	vmov	r1, s16
    c28e:	aa18      	add	r2, sp, #96	; 0x60
    c290:	4658      	mov	r0, fp
    c292:	f7ff fe0d 	bl	beb0 <__sprint_r.part.0>
    c296:	bb20      	cbnz	r0, c2e2 <_vfiprintf_r+0x3ba>
    c298:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    c29c:	9b05      	ldr	r3, [sp, #20]
    c29e:	4433      	add	r3, r6
    c2a0:	9305      	str	r3, [sp, #20]
    c2a2:	2d00      	cmp	r5, #0
    c2a4:	f47f aea8 	bne.w	bff8 <_vfiprintf_r+0xd0>
    c2a8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    c2aa:	2b00      	cmp	r3, #0
    c2ac:	f040 85c1 	bne.w	ce32 <_vfiprintf_r+0xf0a>
    c2b0:	ee18 3a10 	vmov	r3, s16
    c2b4:	2200      	movs	r2, #0
    c2b6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    c2ba:	9219      	str	r2, [sp, #100]	; 0x64
    c2bc:	e015      	b.n	c2ea <_vfiprintf_r+0x3c2>
    c2be:	f109 0908 	add.w	r9, r9, #8
    c2c2:	e7eb      	b.n	c29c <_vfiprintf_r+0x374>
    c2c4:	ee18 1a10 	vmov	r1, s16
    c2c8:	aa18      	add	r2, sp, #96	; 0x60
    c2ca:	4658      	mov	r0, fp
    c2cc:	f7ff fdf0 	bl	beb0 <__sprint_r.part.0>
    c2d0:	2800      	cmp	r0, #0
    c2d2:	f000 80a6 	beq.w	c422 <_vfiprintf_r+0x4fa>
    c2d6:	9b08      	ldr	r3, [sp, #32]
    c2d8:	b11b      	cbz	r3, c2e2 <_vfiprintf_r+0x3ba>
    c2da:	9908      	ldr	r1, [sp, #32]
    c2dc:	4658      	mov	r0, fp
    c2de:	f7f9 fb3d 	bl	595c <_free_r>
    c2e2:	ee18 3a10 	vmov	r3, s16
    c2e6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    c2ea:	ee18 2a10 	vmov	r2, s16
    c2ee:	6e52      	ldr	r2, [r2, #100]	; 0x64
    c2f0:	f012 0f01 	tst.w	r2, #1
    c2f4:	b29a      	uxth	r2, r3
    c2f6:	f000 80a0 	beq.w	c43a <_vfiprintf_r+0x512>
    c2fa:	0650      	lsls	r0, r2, #25
    c2fc:	f100 85b2 	bmi.w	ce64 <_vfiprintf_r+0xf3c>
    c300:	9805      	ldr	r0, [sp, #20]
    c302:	b045      	add	sp, #276	; 0x114
    c304:	ecbd 8b02 	vpop	{d8}
    c308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c30c:	2900      	cmp	r1, #0
    c30e:	d0cb      	beq.n	c2a8 <_vfiprintf_r+0x380>
    c310:	2300      	movs	r3, #0
    c312:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    c316:	2301      	movs	r3, #1
    c318:	e9cd 3303 	strd	r3, r3, [sp, #12]
    c31c:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
    c320:	ac2b      	add	r4, sp, #172	; 0xac
    c322:	2300      	movs	r3, #0
    c324:	9308      	str	r3, [sp, #32]
    c326:	461f      	mov	r7, r3
    c328:	f016 0302 	ands.w	r3, r6, #2
    c32c:	9309      	str	r3, [sp, #36]	; 0x24
    c32e:	d002      	beq.n	c336 <_vfiprintf_r+0x40e>
    c330:	9b03      	ldr	r3, [sp, #12]
    c332:	3302      	adds	r3, #2
    c334:	9303      	str	r3, [sp, #12]
    c336:	f016 0384 	ands.w	r3, r6, #132	; 0x84
    c33a:	930a      	str	r3, [sp, #40]	; 0x28
    c33c:	d105      	bne.n	c34a <_vfiprintf_r+0x422>
    c33e:	9b06      	ldr	r3, [sp, #24]
    c340:	9a03      	ldr	r2, [sp, #12]
    c342:	1a9d      	subs	r5, r3, r2
    c344:	2d00      	cmp	r5, #0
    c346:	f300 827b 	bgt.w	c840 <_vfiprintf_r+0x918>
    c34a:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    c34e:	1c41      	adds	r1, r0, #1
    c350:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
    c354:	b182      	cbz	r2, c378 <_vfiprintf_r+0x450>
    c356:	2201      	movs	r2, #1
    c358:	3301      	adds	r3, #1
    c35a:	f8c9 2004 	str.w	r2, [r9, #4]
    c35e:	2907      	cmp	r1, #7
    c360:	f10d 0243 	add.w	r2, sp, #67	; 0x43
    c364:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    c368:	f8c9 2000 	str.w	r2, [r9]
    c36c:	f300 824a 	bgt.w	c804 <_vfiprintf_r+0x8dc>
    c370:	4608      	mov	r0, r1
    c372:	f109 0908 	add.w	r9, r9, #8
    c376:	3101      	adds	r1, #1
    c378:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c37a:	b1e2      	cbz	r2, c3b6 <_vfiprintf_r+0x48e>
    c37c:	aa11      	add	r2, sp, #68	; 0x44
    c37e:	3302      	adds	r3, #2
    c380:	f8c9 2000 	str.w	r2, [r9]
    c384:	2907      	cmp	r1, #7
    c386:	f04f 0202 	mov.w	r2, #2
    c38a:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    c38e:	f8c9 2004 	str.w	r2, [r9, #4]
    c392:	f340 8250 	ble.w	c836 <_vfiprintf_r+0x90e>
    c396:	2b00      	cmp	r3, #0
    c398:	f000 8343 	beq.w	ca22 <_vfiprintf_r+0xafa>
    c39c:	ee18 1a10 	vmov	r1, s16
    c3a0:	aa18      	add	r2, sp, #96	; 0x60
    c3a2:	4658      	mov	r0, fp
    c3a4:	f7ff fd84 	bl	beb0 <__sprint_r.part.0>
    c3a8:	2800      	cmp	r0, #0
    c3aa:	d194      	bne.n	c2d6 <_vfiprintf_r+0x3ae>
    c3ac:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    c3b0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    c3b4:	1c41      	adds	r1, r0, #1
    c3b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c3b8:	2a80      	cmp	r2, #128	; 0x80
    c3ba:	f000 8184 	beq.w	c6c6 <_vfiprintf_r+0x79e>
    c3be:	9a04      	ldr	r2, [sp, #16]
    c3c0:	1abd      	subs	r5, r7, r2
    c3c2:	2d00      	cmp	r5, #0
    c3c4:	f300 81d7 	bgt.w	c776 <_vfiprintf_r+0x84e>
    c3c8:	9a04      	ldr	r2, [sp, #16]
    c3ca:	f8c9 4000 	str.w	r4, [r9]
    c3ce:	4413      	add	r3, r2
    c3d0:	2907      	cmp	r1, #7
    c3d2:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    c3d6:	f8c9 2004 	str.w	r2, [r9, #4]
    c3da:	f340 816e 	ble.w	c6ba <_vfiprintf_r+0x792>
    c3de:	2b00      	cmp	r3, #0
    c3e0:	f000 8275 	beq.w	c8ce <_vfiprintf_r+0x9a6>
    c3e4:	ee18 1a10 	vmov	r1, s16
    c3e8:	aa18      	add	r2, sp, #96	; 0x60
    c3ea:	4658      	mov	r0, fp
    c3ec:	f7ff fd60 	bl	beb0 <__sprint_r.part.0>
    c3f0:	2800      	cmp	r0, #0
    c3f2:	f47f af70 	bne.w	c2d6 <_vfiprintf_r+0x3ae>
    c3f6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    c3f8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    c3fc:	0775      	lsls	r5, r6, #29
    c3fe:	d505      	bpl.n	c40c <_vfiprintf_r+0x4e4>
    c400:	9a06      	ldr	r2, [sp, #24]
    c402:	9903      	ldr	r1, [sp, #12]
    c404:	1a54      	subs	r4, r2, r1
    c406:	2c00      	cmp	r4, #0
    c408:	f300 826b 	bgt.w	c8e2 <_vfiprintf_r+0x9ba>
    c40c:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
    c410:	9803      	ldr	r0, [sp, #12]
    c412:	4281      	cmp	r1, r0
    c414:	bfac      	ite	ge
    c416:	1852      	addge	r2, r2, r1
    c418:	1812      	addlt	r2, r2, r0
    c41a:	9205      	str	r2, [sp, #20]
    c41c:	2b00      	cmp	r3, #0
    c41e:	f47f af51 	bne.w	c2c4 <_vfiprintf_r+0x39c>
    c422:	9908      	ldr	r1, [sp, #32]
    c424:	2300      	movs	r3, #0
    c426:	9319      	str	r3, [sp, #100]	; 0x64
    c428:	2900      	cmp	r1, #0
    c42a:	f000 8149 	beq.w	c6c0 <_vfiprintf_r+0x798>
    c42e:	4658      	mov	r0, fp
    c430:	f7f9 fa94 	bl	595c <_free_r>
    c434:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    c438:	e5c1      	b.n	bfbe <_vfiprintf_r+0x96>
    c43a:	059c      	lsls	r4, r3, #22
    c43c:	f53f af5d 	bmi.w	c2fa <_vfiprintf_r+0x3d2>
    c440:	ee18 4a10 	vmov	r4, s16
    c444:	6da0      	ldr	r0, [r4, #88]	; 0x58
    c446:	f7f9 f837 	bl	54b8 <__retarget_lock_release_recursive>
    c44a:	89a2      	ldrh	r2, [r4, #12]
    c44c:	e755      	b.n	c2fa <_vfiprintf_r+0x3d2>
    c44e:	06f0      	lsls	r0, r6, #27
    c450:	9a07      	ldr	r2, [sp, #28]
    c452:	f100 831f 	bmi.w	ca94 <_vfiprintf_r+0xb6c>
    c456:	0671      	lsls	r1, r6, #25
    c458:	f140 8319 	bpl.w	ca8e <_vfiprintf_r+0xb66>
    c45c:	f932 3b04 	ldrsh.w	r3, [r2], #4
    c460:	9207      	str	r2, [sp, #28]
    c462:	17da      	asrs	r2, r3, #31
    c464:	4611      	mov	r1, r2
    c466:	e66e      	b.n	c146 <_vfiprintf_r+0x21e>
    c468:	f016 0310 	ands.w	r3, r6, #16
    c46c:	9907      	ldr	r1, [sp, #28]
    c46e:	f040 8309 	bne.w	ca84 <_vfiprintf_r+0xb5c>
    c472:	f016 0040 	ands.w	r0, r6, #64	; 0x40
    c476:	f000 8301 	beq.w	ca7c <_vfiprintf_r+0xb54>
    c47a:	461a      	mov	r2, r3
    c47c:	f851 3b04 	ldr.w	r3, [r1], #4
    c480:	9107      	str	r1, [sp, #28]
    c482:	b29b      	uxth	r3, r3
    c484:	e6c3      	b.n	c20e <_vfiprintf_r+0x2e6>
    c486:	9b07      	ldr	r3, [sp, #28]
    c488:	461a      	mov	r2, r3
    c48a:	2300      	movs	r3, #0
    c48c:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    c490:	4613      	mov	r3, r2
    c492:	f853 4b04 	ldr.w	r4, [r3], #4
    c496:	9303      	str	r3, [sp, #12]
    c498:	2c00      	cmp	r4, #0
    c49a:	f000 8412 	beq.w	ccc2 <_vfiprintf_r+0xd9a>
    c49e:	2953      	cmp	r1, #83	; 0x53
    c4a0:	f000 8365 	beq.w	cb6e <_vfiprintf_r+0xc46>
    c4a4:	f016 0510 	ands.w	r5, r6, #16
    c4a8:	f040 8361 	bne.w	cb6e <_vfiprintf_r+0xc46>
    c4ac:	1c7b      	adds	r3, r7, #1
    c4ae:	f000 84b3 	beq.w	ce18 <_vfiprintf_r+0xef0>
    c4b2:	463a      	mov	r2, r7
    c4b4:	4629      	mov	r1, r5
    c4b6:	4620      	mov	r0, r4
    c4b8:	f7fe f852 	bl	a560 <memchr>
    c4bc:	9008      	str	r0, [sp, #32]
    c4be:	2800      	cmp	r0, #0
    c4c0:	f000 849f 	beq.w	ce02 <_vfiprintf_r+0xeda>
    c4c4:	1b03      	subs	r3, r0, r4
    c4c6:	9a03      	ldr	r2, [sp, #12]
    c4c8:	9304      	str	r3, [sp, #16]
    c4ca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    c4ce:	462f      	mov	r7, r5
    c4d0:	9207      	str	r2, [sp, #28]
    c4d2:	9303      	str	r3, [sp, #12]
    c4d4:	9508      	str	r5, [sp, #32]
    c4d6:	e657      	b.n	c188 <_vfiprintf_r+0x260>
    c4d8:	2943      	cmp	r1, #67	; 0x43
    c4da:	d002      	beq.n	c4e2 <_vfiprintf_r+0x5ba>
    c4dc:	06f5      	lsls	r5, r6, #27
    c4de:	f140 832d 	bpl.w	cb3c <_vfiprintf_r+0xc14>
    c4e2:	9d07      	ldr	r5, [sp, #28]
    c4e4:	2208      	movs	r2, #8
    c4e6:	2100      	movs	r1, #0
    c4e8:	a816      	add	r0, sp, #88	; 0x58
    c4ea:	ac2b      	add	r4, sp, #172	; 0xac
    c4ec:	f7f8 fe7e 	bl	51ec <memset>
    c4f0:	ab16      	add	r3, sp, #88	; 0x58
    c4f2:	f855 2b04 	ldr.w	r2, [r5], #4
    c4f6:	4621      	mov	r1, r4
    c4f8:	4658      	mov	r0, fp
    c4fa:	f7ff fa77 	bl	b9ec <_wcrtomb_r>
    c4fe:	4603      	mov	r3, r0
    c500:	3301      	adds	r3, #1
    c502:	9004      	str	r0, [sp, #16]
    c504:	f000 84b3 	beq.w	ce6e <_vfiprintf_r+0xf46>
    c508:	9b04      	ldr	r3, [sp, #16]
    c50a:	9507      	str	r5, [sp, #28]
    c50c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    c510:	9303      	str	r3, [sp, #12]
    c512:	2300      	movs	r3, #0
    c514:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    c518:	e703      	b.n	c322 <_vfiprintf_r+0x3fa>
    c51a:	9b07      	ldr	r3, [sp, #28]
    c51c:	f853 2b04 	ldr.w	r2, [r3], #4
    c520:	9206      	str	r2, [sp, #24]
    c522:	2a00      	cmp	r2, #0
    c524:	f280 829c 	bge.w	ca60 <_vfiprintf_r+0xb38>
    c528:	9a06      	ldr	r2, [sp, #24]
    c52a:	4252      	negs	r2, r2
    c52c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    c530:	f898 1000 	ldrb.w	r1, [r8]
    c534:	f046 0604 	orr.w	r6, r6, #4
    c538:	e569      	b.n	c00e <_vfiprintf_r+0xe6>
    c53a:	f898 1000 	ldrb.w	r1, [r8]
    c53e:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
    c542:	e564      	b.n	c00e <_vfiprintf_r+0xe6>
    c544:	f898 1000 	ldrb.w	r1, [r8]
    c548:	f046 0680 	orr.w	r6, r6, #128	; 0x80
    c54c:	e55f      	b.n	c00e <_vfiprintf_r+0xe6>
    c54e:	4642      	mov	r2, r8
    c550:	f812 1b01 	ldrb.w	r1, [r2], #1
    c554:	292a      	cmp	r1, #42	; 0x2a
    c556:	f000 8496 	beq.w	ce86 <_vfiprintf_r+0xf5e>
    c55a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    c55e:	2b09      	cmp	r3, #9
    c560:	4690      	mov	r8, r2
    c562:	f04f 0700 	mov.w	r7, #0
    c566:	f63f ad54 	bhi.w	c012 <_vfiprintf_r+0xea>
    c56a:	f818 1b01 	ldrb.w	r1, [r8], #1
    c56e:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    c572:	eb03 0747 	add.w	r7, r3, r7, lsl #1
    c576:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    c57a:	2b09      	cmp	r3, #9
    c57c:	d9f5      	bls.n	c56a <_vfiprintf_r+0x642>
    c57e:	e548      	b.n	c012 <_vfiprintf_r+0xea>
    c580:	f898 1000 	ldrb.w	r1, [r8]
    c584:	f046 0601 	orr.w	r6, r6, #1
    c588:	e541      	b.n	c00e <_vfiprintf_r+0xe6>
    c58a:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    c58e:	2b00      	cmp	r3, #0
    c590:	f47f adc2 	bne.w	c118 <_vfiprintf_r+0x1f0>
    c594:	2320      	movs	r3, #32
    c596:	f898 1000 	ldrb.w	r1, [r8]
    c59a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    c59e:	e536      	b.n	c00e <_vfiprintf_r+0xe6>
    c5a0:	f898 1000 	ldrb.w	r1, [r8]
    c5a4:	296c      	cmp	r1, #108	; 0x6c
    c5a6:	bf03      	ittte	eq
    c5a8:	f898 1001 	ldrbeq.w	r1, [r8, #1]
    c5ac:	f046 0620 	orreq.w	r6, r6, #32
    c5b0:	f108 0801 	addeq.w	r8, r8, #1
    c5b4:	f046 0610 	orrne.w	r6, r6, #16
    c5b8:	e529      	b.n	c00e <_vfiprintf_r+0xe6>
    c5ba:	f898 1000 	ldrb.w	r1, [r8]
    c5be:	2968      	cmp	r1, #104	; 0x68
    c5c0:	bf03      	ittte	eq
    c5c2:	f898 1001 	ldrbeq.w	r1, [r8, #1]
    c5c6:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
    c5ca:	f108 0801 	addeq.w	r8, r8, #1
    c5ce:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
    c5d2:	e51c      	b.n	c00e <_vfiprintf_r+0xe6>
    c5d4:	f046 0310 	orr.w	r3, r6, #16
    c5d8:	9303      	str	r3, [sp, #12]
    c5da:	9b03      	ldr	r3, [sp, #12]
    c5dc:	f013 0220 	ands.w	r2, r3, #32
    c5e0:	f000 8206 	beq.w	c9f0 <_vfiprintf_r+0xac8>
    c5e4:	9b07      	ldr	r3, [sp, #28]
    c5e6:	3307      	adds	r3, #7
    c5e8:	f023 0307 	bic.w	r3, r3, #7
    c5ec:	4619      	mov	r1, r3
    c5ee:	685a      	ldr	r2, [r3, #4]
    c5f0:	f851 3b08 	ldr.w	r3, [r1], #8
    c5f4:	9107      	str	r1, [sp, #28]
    c5f6:	2101      	movs	r1, #1
    c5f8:	e60d      	b.n	c216 <_vfiprintf_r+0x2ee>
    c5fa:	9a07      	ldr	r2, [sp, #28]
    c5fc:	f046 0302 	orr.w	r3, r6, #2
    c600:	9303      	str	r3, [sp, #12]
    c602:	f852 3b04 	ldr.w	r3, [r2], #4
    c606:	9207      	str	r2, [sp, #28]
    c608:	f647 0230 	movw	r2, #30768	; 0x7830
    c60c:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
    c610:	4ab8      	ldr	r2, [pc, #736]	; (c8f4 <_vfiprintf_r+0x9cc>)
    c612:	920c      	str	r2, [sp, #48]	; 0x30
    c614:	2102      	movs	r1, #2
    c616:	2200      	movs	r2, #0
    c618:	e5fd      	b.n	c216 <_vfiprintf_r+0x2ee>
    c61a:	06b7      	lsls	r7, r6, #26
    c61c:	f100 8248 	bmi.w	cab0 <_vfiprintf_r+0xb88>
    c620:	06f5      	lsls	r5, r6, #27
    c622:	f100 8346 	bmi.w	ccb2 <_vfiprintf_r+0xd8a>
    c626:	0674      	lsls	r4, r6, #25
    c628:	f100 83d5 	bmi.w	cdd6 <_vfiprintf_r+0xeae>
    c62c:	05b0      	lsls	r0, r6, #22
    c62e:	f140 8340 	bpl.w	ccb2 <_vfiprintf_r+0xd8a>
    c632:	9b07      	ldr	r3, [sp, #28]
    c634:	9905      	ldr	r1, [sp, #20]
    c636:	f853 2b04 	ldr.w	r2, [r3], #4
    c63a:	9307      	str	r3, [sp, #28]
    c63c:	7011      	strb	r1, [r2, #0]
    c63e:	e4be      	b.n	bfbe <_vfiprintf_r+0x96>
    c640:	9603      	str	r6, [sp, #12]
    c642:	2901      	cmp	r1, #1
    c644:	f43f ad8c 	beq.w	c160 <_vfiprintf_r+0x238>
    c648:	2902      	cmp	r1, #2
    c64a:	ac44      	add	r4, sp, #272	; 0x110
    c64c:	d111      	bne.n	c672 <_vfiprintf_r+0x74a>
    c64e:	980c      	ldr	r0, [sp, #48]	; 0x30
    c650:	f003 010f 	and.w	r1, r3, #15
    c654:	091b      	lsrs	r3, r3, #4
    c656:	5c41      	ldrb	r1, [r0, r1]
    c658:	f804 1d01 	strb.w	r1, [r4, #-1]!
    c65c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    c660:	0912      	lsrs	r2, r2, #4
    c662:	ea53 0102 	orrs.w	r1, r3, r2
    c666:	d1f3      	bne.n	c650 <_vfiprintf_r+0x728>
    c668:	9e03      	ldr	r6, [sp, #12]
    c66a:	ab44      	add	r3, sp, #272	; 0x110
    c66c:	1b1b      	subs	r3, r3, r4
    c66e:	9304      	str	r3, [sp, #16]
    c670:	e583      	b.n	c17a <_vfiprintf_r+0x252>
    c672:	f003 0107 	and.w	r1, r3, #7
    c676:	08db      	lsrs	r3, r3, #3
    c678:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
    c67c:	08d2      	lsrs	r2, r2, #3
    c67e:	3130      	adds	r1, #48	; 0x30
    c680:	ea53 0502 	orrs.w	r5, r3, r2
    c684:	4620      	mov	r0, r4
    c686:	f804 1d01 	strb.w	r1, [r4, #-1]!
    c68a:	d1f2      	bne.n	c672 <_vfiprintf_r+0x74a>
    c68c:	9e03      	ldr	r6, [sp, #12]
    c68e:	07f3      	lsls	r3, r6, #31
    c690:	d5eb      	bpl.n	c66a <_vfiprintf_r+0x742>
    c692:	2930      	cmp	r1, #48	; 0x30
    c694:	d0e8      	beq.n	c668 <_vfiprintf_r+0x740>
    c696:	2330      	movs	r3, #48	; 0x30
    c698:	3802      	subs	r0, #2
    c69a:	f804 3c01 	strb.w	r3, [r4, #-1]
    c69e:	ab44      	add	r3, sp, #272	; 0x110
    c6a0:	1a1b      	subs	r3, r3, r0
    c6a2:	9e03      	ldr	r6, [sp, #12]
    c6a4:	9304      	str	r3, [sp, #16]
    c6a6:	4604      	mov	r4, r0
    c6a8:	e567      	b.n	c17a <_vfiprintf_r+0x252>
    c6aa:	9b04      	ldr	r3, [sp, #16]
    c6ac:	941b      	str	r4, [sp, #108]	; 0x6c
    c6ae:	2201      	movs	r2, #1
    c6b0:	931c      	str	r3, [sp, #112]	; 0x70
    c6b2:	931a      	str	r3, [sp, #104]	; 0x68
    c6b4:	9219      	str	r2, [sp, #100]	; 0x64
    c6b6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    c6ba:	f109 0908 	add.w	r9, r9, #8
    c6be:	e69d      	b.n	c3fc <_vfiprintf_r+0x4d4>
    c6c0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    c6c4:	e47b      	b.n	bfbe <_vfiprintf_r+0x96>
    c6c6:	9a06      	ldr	r2, [sp, #24]
    c6c8:	9d03      	ldr	r5, [sp, #12]
    c6ca:	1b55      	subs	r5, r2, r5
    c6cc:	2d00      	cmp	r5, #0
    c6ce:	f77f ae76 	ble.w	c3be <_vfiprintf_r+0x496>
    c6d2:	2d10      	cmp	r5, #16
    c6d4:	f340 83bb 	ble.w	ce4e <_vfiprintf_r+0xf26>
    c6d8:	9409      	str	r4, [sp, #36]	; 0x24
    c6da:	ee18 4a10 	vmov	r4, s16
    c6de:	e007      	b.n	c6f0 <_vfiprintf_r+0x7c8>
    c6e0:	f100 0c02 	add.w	ip, r0, #2
    c6e4:	f109 0908 	add.w	r9, r9, #8
    c6e8:	4610      	mov	r0, r2
    c6ea:	3d10      	subs	r5, #16
    c6ec:	2d10      	cmp	r5, #16
    c6ee:	dd1e      	ble.n	c72e <_vfiprintf_r+0x806>
    c6f0:	4981      	ldr	r1, [pc, #516]	; (c8f8 <_vfiprintf_r+0x9d0>)
    c6f2:	f8c9 1000 	str.w	r1, [r9]
    c6f6:	1c42      	adds	r2, r0, #1
    c6f8:	3310      	adds	r3, #16
    c6fa:	2110      	movs	r1, #16
    c6fc:	2a07      	cmp	r2, #7
    c6fe:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    c702:	f8c9 1004 	str.w	r1, [r9, #4]
    c706:	ddeb      	ble.n	c6e0 <_vfiprintf_r+0x7b8>
    c708:	aa18      	add	r2, sp, #96	; 0x60
    c70a:	2b00      	cmp	r3, #0
    c70c:	d074      	beq.n	c7f8 <_vfiprintf_r+0x8d0>
    c70e:	4621      	mov	r1, r4
    c710:	4658      	mov	r0, fp
    c712:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    c716:	f7ff fbcb 	bl	beb0 <__sprint_r.part.0>
    c71a:	2800      	cmp	r0, #0
    c71c:	f47f addb 	bne.w	c2d6 <_vfiprintf_r+0x3ae>
    c720:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    c724:	3d10      	subs	r5, #16
    c726:	2d10      	cmp	r5, #16
    c728:	f100 0c01 	add.w	ip, r0, #1
    c72c:	dce0      	bgt.n	c6f0 <_vfiprintf_r+0x7c8>
    c72e:	9c09      	ldr	r4, [sp, #36]	; 0x24
    c730:	4a71      	ldr	r2, [pc, #452]	; (c8f8 <_vfiprintf_r+0x9d0>)
    c732:	f8c9 5004 	str.w	r5, [r9, #4]
    c736:	442b      	add	r3, r5
    c738:	f1bc 0f07 	cmp.w	ip, #7
    c73c:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
    c740:	f8c9 2000 	str.w	r2, [r9]
    c744:	f340 8194 	ble.w	ca70 <_vfiprintf_r+0xb48>
    c748:	2b00      	cmp	r3, #0
    c74a:	f000 831f 	beq.w	cd8c <_vfiprintf_r+0xe64>
    c74e:	ee18 1a10 	vmov	r1, s16
    c752:	aa18      	add	r2, sp, #96	; 0x60
    c754:	4658      	mov	r0, fp
    c756:	f7ff fbab 	bl	beb0 <__sprint_r.part.0>
    c75a:	2800      	cmp	r0, #0
    c75c:	f47f adbb 	bne.w	c2d6 <_vfiprintf_r+0x3ae>
    c760:	9a04      	ldr	r2, [sp, #16]
    c762:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    c766:	1abd      	subs	r5, r7, r2
    c768:	2d00      	cmp	r5, #0
    c76a:	f100 0101 	add.w	r1, r0, #1
    c76e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    c772:	f77f ae29 	ble.w	c3c8 <_vfiprintf_r+0x4a0>
    c776:	2d10      	cmp	r5, #16
    c778:	dd29      	ble.n	c7ce <_vfiprintf_r+0x8a6>
    c77a:	9409      	str	r4, [sp, #36]	; 0x24
    c77c:	2710      	movs	r7, #16
    c77e:	ee18 4a10 	vmov	r4, s16
    c782:	e007      	b.n	c794 <_vfiprintf_r+0x86c>
    c784:	f100 0c02 	add.w	ip, r0, #2
    c788:	f109 0908 	add.w	r9, r9, #8
    c78c:	4610      	mov	r0, r2
    c78e:	3d10      	subs	r5, #16
    c790:	2d10      	cmp	r5, #16
    c792:	dd1a      	ble.n	c7ca <_vfiprintf_r+0x8a2>
    c794:	1c42      	adds	r2, r0, #1
    c796:	4958      	ldr	r1, [pc, #352]	; (c8f8 <_vfiprintf_r+0x9d0>)
    c798:	3310      	adds	r3, #16
    c79a:	2a07      	cmp	r2, #7
    c79c:	e9c9 1700 	strd	r1, r7, [r9]
    c7a0:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    c7a4:	ddee      	ble.n	c784 <_vfiprintf_r+0x85c>
    c7a6:	aa18      	add	r2, sp, #96	; 0x60
    c7a8:	b303      	cbz	r3, c7ec <_vfiprintf_r+0x8c4>
    c7aa:	4621      	mov	r1, r4
    c7ac:	4658      	mov	r0, fp
    c7ae:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    c7b2:	f7ff fb7d 	bl	beb0 <__sprint_r.part.0>
    c7b6:	2800      	cmp	r0, #0
    c7b8:	f47f ad8d 	bne.w	c2d6 <_vfiprintf_r+0x3ae>
    c7bc:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    c7c0:	3d10      	subs	r5, #16
    c7c2:	2d10      	cmp	r5, #16
    c7c4:	f100 0c01 	add.w	ip, r0, #1
    c7c8:	dce4      	bgt.n	c794 <_vfiprintf_r+0x86c>
    c7ca:	9c09      	ldr	r4, [sp, #36]	; 0x24
    c7cc:	4661      	mov	r1, ip
    c7ce:	4a4a      	ldr	r2, [pc, #296]	; (c8f8 <_vfiprintf_r+0x9d0>)
    c7d0:	f8c9 5004 	str.w	r5, [r9, #4]
    c7d4:	442b      	add	r3, r5
    c7d6:	2907      	cmp	r1, #7
    c7d8:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    c7dc:	f8c9 2000 	str.w	r2, [r9]
    c7e0:	f300 80e7 	bgt.w	c9b2 <_vfiprintf_r+0xa8a>
    c7e4:	f109 0908 	add.w	r9, r9, #8
    c7e8:	3101      	adds	r1, #1
    c7ea:	e5ed      	b.n	c3c8 <_vfiprintf_r+0x4a0>
    c7ec:	f04f 0c01 	mov.w	ip, #1
    c7f0:	4618      	mov	r0, r3
    c7f2:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    c7f6:	e7ca      	b.n	c78e <_vfiprintf_r+0x866>
    c7f8:	f04f 0c01 	mov.w	ip, #1
    c7fc:	4618      	mov	r0, r3
    c7fe:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    c802:	e772      	b.n	c6ea <_vfiprintf_r+0x7c2>
    c804:	2b00      	cmp	r3, #0
    c806:	f000 8104 	beq.w	ca12 <_vfiprintf_r+0xaea>
    c80a:	ee18 1a10 	vmov	r1, s16
    c80e:	aa18      	add	r2, sp, #96	; 0x60
    c810:	4658      	mov	r0, fp
    c812:	f7ff fb4d 	bl	beb0 <__sprint_r.part.0>
    c816:	2800      	cmp	r0, #0
    c818:	f47f ad5d 	bne.w	c2d6 <_vfiprintf_r+0x3ae>
    c81c:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    c820:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    c824:	1c41      	adds	r1, r0, #1
    c826:	e5a7      	b.n	c378 <_vfiprintf_r+0x450>
    c828:	2302      	movs	r3, #2
    c82a:	aa11      	add	r2, sp, #68	; 0x44
    c82c:	931c      	str	r3, [sp, #112]	; 0x70
    c82e:	921b      	str	r2, [sp, #108]	; 0x6c
    c830:	2101      	movs	r1, #1
    c832:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    c836:	4608      	mov	r0, r1
    c838:	f109 0908 	add.w	r9, r9, #8
    c83c:	1c41      	adds	r1, r0, #1
    c83e:	e5ba      	b.n	c3b6 <_vfiprintf_r+0x48e>
    c840:	2d10      	cmp	r5, #16
    c842:	f340 82e5 	ble.w	ce10 <_vfiprintf_r+0xee8>
    c846:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
    c84a:	940f      	str	r4, [sp, #60]	; 0x3c
    c84c:	4608      	mov	r0, r1
    c84e:	ee18 4a10 	vmov	r4, s16
    c852:	e007      	b.n	c864 <_vfiprintf_r+0x93c>
    c854:	f100 0c02 	add.w	ip, r0, #2
    c858:	f109 0908 	add.w	r9, r9, #8
    c85c:	4610      	mov	r0, r2
    c85e:	3d10      	subs	r5, #16
    c860:	2d10      	cmp	r5, #16
    c862:	dd1d      	ble.n	c8a0 <_vfiprintf_r+0x978>
    c864:	4925      	ldr	r1, [pc, #148]	; (c8fc <_vfiprintf_r+0x9d4>)
    c866:	f8c9 1000 	str.w	r1, [r9]
    c86a:	1c42      	adds	r2, r0, #1
    c86c:	3310      	adds	r3, #16
    c86e:	2110      	movs	r1, #16
    c870:	2a07      	cmp	r2, #7
    c872:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    c876:	f8c9 1004 	str.w	r1, [r9, #4]
    c87a:	ddeb      	ble.n	c854 <_vfiprintf_r+0x92c>
    c87c:	aa18      	add	r2, sp, #96	; 0x60
    c87e:	b303      	cbz	r3, c8c2 <_vfiprintf_r+0x99a>
    c880:	4621      	mov	r1, r4
    c882:	4658      	mov	r0, fp
    c884:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    c888:	f7ff fb12 	bl	beb0 <__sprint_r.part.0>
    c88c:	2800      	cmp	r0, #0
    c88e:	f47f ad22 	bne.w	c2d6 <_vfiprintf_r+0x3ae>
    c892:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    c896:	3d10      	subs	r5, #16
    c898:	2d10      	cmp	r5, #16
    c89a:	f100 0c01 	add.w	ip, r0, #1
    c89e:	dce1      	bgt.n	c864 <_vfiprintf_r+0x93c>
    c8a0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    c8a2:	4660      	mov	r0, ip
    c8a4:	4a15      	ldr	r2, [pc, #84]	; (c8fc <_vfiprintf_r+0x9d4>)
    c8a6:	f8c9 5004 	str.w	r5, [r9, #4]
    c8aa:	442b      	add	r3, r5
    c8ac:	2807      	cmp	r0, #7
    c8ae:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
    c8b2:	f8c9 2000 	str.w	r2, [r9]
    c8b6:	f300 80c1 	bgt.w	ca3c <_vfiprintf_r+0xb14>
    c8ba:	f109 0908 	add.w	r9, r9, #8
    c8be:	1c41      	adds	r1, r0, #1
    c8c0:	e546      	b.n	c350 <_vfiprintf_r+0x428>
    c8c2:	4618      	mov	r0, r3
    c8c4:	f04f 0c01 	mov.w	ip, #1
    c8c8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    c8cc:	e7c7      	b.n	c85e <_vfiprintf_r+0x936>
    c8ce:	0776      	lsls	r6, r6, #29
    c8d0:	9319      	str	r3, [sp, #100]	; 0x64
    c8d2:	d553      	bpl.n	c97c <_vfiprintf_r+0xa54>
    c8d4:	9a06      	ldr	r2, [sp, #24]
    c8d6:	9903      	ldr	r1, [sp, #12]
    c8d8:	1a54      	subs	r4, r2, r1
    c8da:	2c00      	cmp	r4, #0
    c8dc:	dd4e      	ble.n	c97c <_vfiprintf_r+0xa54>
    c8de:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    c8e2:	2c10      	cmp	r4, #16
    c8e4:	f340 82b0 	ble.w	ce48 <_vfiprintf_r+0xf20>
    c8e8:	9919      	ldr	r1, [sp, #100]	; 0x64
    c8ea:	ee18 6a10 	vmov	r6, s16
    c8ee:	2510      	movs	r5, #16
    c8f0:	e00d      	b.n	c90e <_vfiprintf_r+0x9e6>
    c8f2:	bf00      	nop
    c8f4:	200008d8 	.word	0x200008d8
    c8f8:	20007820 	.word	0x20007820
    c8fc:	20002394 	.word	0x20002394
    c900:	1c88      	adds	r0, r1, #2
    c902:	f109 0908 	add.w	r9, r9, #8
    c906:	4611      	mov	r1, r2
    c908:	3c10      	subs	r4, #16
    c90a:	2c10      	cmp	r4, #16
    c90c:	dd1a      	ble.n	c944 <_vfiprintf_r+0xa1c>
    c90e:	1c4a      	adds	r2, r1, #1
    c910:	48b3      	ldr	r0, [pc, #716]	; (cbe0 <_vfiprintf_r+0xcb8>)
    c912:	3310      	adds	r3, #16
    c914:	2a07      	cmp	r2, #7
    c916:	e9c9 0500 	strd	r0, r5, [r9]
    c91a:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    c91e:	ddef      	ble.n	c900 <_vfiprintf_r+0x9d8>
    c920:	aa18      	add	r2, sp, #96	; 0x60
    c922:	b333      	cbz	r3, c972 <_vfiprintf_r+0xa4a>
    c924:	4631      	mov	r1, r6
    c926:	4658      	mov	r0, fp
    c928:	f7ff fac2 	bl	beb0 <__sprint_r.part.0>
    c92c:	2800      	cmp	r0, #0
    c92e:	f47f acd2 	bne.w	c2d6 <_vfiprintf_r+0x3ae>
    c932:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
    c936:	3c10      	subs	r4, #16
    c938:	2c10      	cmp	r4, #16
    c93a:	f101 0001 	add.w	r0, r1, #1
    c93e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    c942:	dce4      	bgt.n	c90e <_vfiprintf_r+0x9e6>
    c944:	4aa6      	ldr	r2, [pc, #664]	; (cbe0 <_vfiprintf_r+0xcb8>)
    c946:	f8c9 4004 	str.w	r4, [r9, #4]
    c94a:	4423      	add	r3, r4
    c94c:	2807      	cmp	r0, #7
    c94e:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
    c952:	f8c9 2000 	str.w	r2, [r9]
    c956:	f77f ad59 	ble.w	c40c <_vfiprintf_r+0x4e4>
    c95a:	b17b      	cbz	r3, c97c <_vfiprintf_r+0xa54>
    c95c:	ee18 1a10 	vmov	r1, s16
    c960:	aa18      	add	r2, sp, #96	; 0x60
    c962:	4658      	mov	r0, fp
    c964:	f7ff faa4 	bl	beb0 <__sprint_r.part.0>
    c968:	2800      	cmp	r0, #0
    c96a:	f47f acb4 	bne.w	c2d6 <_vfiprintf_r+0x3ae>
    c96e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    c970:	e54c      	b.n	c40c <_vfiprintf_r+0x4e4>
    c972:	2001      	movs	r0, #1
    c974:	4619      	mov	r1, r3
    c976:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    c97a:	e7c5      	b.n	c908 <_vfiprintf_r+0x9e0>
    c97c:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
    c980:	9903      	ldr	r1, [sp, #12]
    c982:	428a      	cmp	r2, r1
    c984:	bfac      	ite	ge
    c986:	189b      	addge	r3, r3, r2
    c988:	185b      	addlt	r3, r3, r1
    c98a:	9305      	str	r3, [sp, #20]
    c98c:	e549      	b.n	c422 <_vfiprintf_r+0x4fa>
    c98e:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
    c992:	058f      	lsls	r7, r1, #22
    c994:	ee18 3a10 	vmov	r3, s16
    c998:	b28a      	uxth	r2, r1
    c99a:	f53f aae8 	bmi.w	bf6e <_vfiprintf_r+0x46>
    c99e:	ee18 5a10 	vmov	r5, s16
    c9a2:	6d98      	ldr	r0, [r3, #88]	; 0x58
    c9a4:	f7f8 fd86 	bl	54b4 <__retarget_lock_acquire_recursive>
    c9a8:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
    c9ac:	b28a      	uxth	r2, r1
    c9ae:	f7ff bade 	b.w	bf6e <_vfiprintf_r+0x46>
    c9b2:	2b00      	cmp	r3, #0
    c9b4:	f43f ae79 	beq.w	c6aa <_vfiprintf_r+0x782>
    c9b8:	ee18 1a10 	vmov	r1, s16
    c9bc:	aa18      	add	r2, sp, #96	; 0x60
    c9be:	4658      	mov	r0, fp
    c9c0:	f7ff fa76 	bl	beb0 <__sprint_r.part.0>
    c9c4:	2800      	cmp	r0, #0
    c9c6:	f47f ac86 	bne.w	c2d6 <_vfiprintf_r+0x3ae>
    c9ca:	9919      	ldr	r1, [sp, #100]	; 0x64
    c9cc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    c9ce:	3101      	adds	r1, #1
    c9d0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    c9d4:	e4f8      	b.n	c3c8 <_vfiprintf_r+0x4a0>
    c9d6:	9219      	str	r2, [sp, #100]	; 0x64
    c9d8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    c9dc:	e45e      	b.n	c29c <_vfiprintf_r+0x374>
    c9de:	2f00      	cmp	r7, #0
    c9e0:	f47f abc3 	bne.w	c16a <_vfiprintf_r+0x242>
    c9e4:	9e03      	ldr	r6, [sp, #12]
    c9e6:	2700      	movs	r7, #0
    c9e8:	9704      	str	r7, [sp, #16]
    c9ea:	ac44      	add	r4, sp, #272	; 0x110
    c9ec:	f7ff bbc5 	b.w	c17a <_vfiprintf_r+0x252>
    c9f0:	9b03      	ldr	r3, [sp, #12]
    c9f2:	f013 0310 	ands.w	r3, r3, #16
    c9f6:	d154      	bne.n	caa2 <_vfiprintf_r+0xb7a>
    c9f8:	9a03      	ldr	r2, [sp, #12]
    c9fa:	f012 0040 	ands.w	r0, r2, #64	; 0x40
    c9fe:	f000 816b 	beq.w	ccd8 <_vfiprintf_r+0xdb0>
    ca02:	9907      	ldr	r1, [sp, #28]
    ca04:	461a      	mov	r2, r3
    ca06:	f851 3b04 	ldr.w	r3, [r1], #4
    ca0a:	9107      	str	r1, [sp, #28]
    ca0c:	b29b      	uxth	r3, r3
    ca0e:	2101      	movs	r1, #1
    ca10:	e401      	b.n	c216 <_vfiprintf_r+0x2ee>
    ca12:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ca14:	2a00      	cmp	r2, #0
    ca16:	d164      	bne.n	cae2 <_vfiprintf_r+0xbba>
    ca18:	4618      	mov	r0, r3
    ca1a:	2101      	movs	r1, #1
    ca1c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    ca20:	e4c9      	b.n	c3b6 <_vfiprintf_r+0x48e>
    ca22:	2101      	movs	r1, #1
    ca24:	4618      	mov	r0, r3
    ca26:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    ca2a:	e4c4      	b.n	c3b6 <_vfiprintf_r+0x48e>
    ca2c:	425b      	negs	r3, r3
    ca2e:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
    ca32:	9603      	str	r6, [sp, #12]
    ca34:	202d      	movs	r0, #45	; 0x2d
    ca36:	2101      	movs	r1, #1
    ca38:	f7ff bbee 	b.w	c218 <_vfiprintf_r+0x2f0>
    ca3c:	2b00      	cmp	r3, #0
    ca3e:	f000 8088 	beq.w	cb52 <_vfiprintf_r+0xc2a>
    ca42:	ee18 1a10 	vmov	r1, s16
    ca46:	aa18      	add	r2, sp, #96	; 0x60
    ca48:	4658      	mov	r0, fp
    ca4a:	f7ff fa31 	bl	beb0 <__sprint_r.part.0>
    ca4e:	2800      	cmp	r0, #0
    ca50:	f47f ac41 	bne.w	c2d6 <_vfiprintf_r+0x3ae>
    ca54:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    ca58:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    ca5c:	1c41      	adds	r1, r0, #1
    ca5e:	e477      	b.n	c350 <_vfiprintf_r+0x428>
    ca60:	f898 1000 	ldrb.w	r1, [r8]
    ca64:	9307      	str	r3, [sp, #28]
    ca66:	f7ff bad2 	b.w	c00e <_vfiprintf_r+0xe6>
    ca6a:	ac44      	add	r4, sp, #272	; 0x110
    ca6c:	f7ff bb85 	b.w	c17a <_vfiprintf_r+0x252>
    ca70:	f109 0908 	add.w	r9, r9, #8
    ca74:	f10c 0101 	add.w	r1, ip, #1
    ca78:	4660      	mov	r0, ip
    ca7a:	e4a0      	b.n	c3be <_vfiprintf_r+0x496>
    ca7c:	f416 7200 	ands.w	r2, r6, #512	; 0x200
    ca80:	f040 8197 	bne.w	cdb2 <_vfiprintf_r+0xe8a>
    ca84:	f851 3b04 	ldr.w	r3, [r1], #4
    ca88:	9107      	str	r1, [sp, #28]
    ca8a:	f7ff bbc0 	b.w	c20e <_vfiprintf_r+0x2e6>
    ca8e:	05b3      	lsls	r3, r6, #22
    ca90:	f100 8188 	bmi.w	cda4 <_vfiprintf_r+0xe7c>
    ca94:	f852 3b04 	ldr.w	r3, [r2], #4
    ca98:	9207      	str	r2, [sp, #28]
    ca9a:	17da      	asrs	r2, r3, #31
    ca9c:	4611      	mov	r1, r2
    ca9e:	f7ff bb52 	b.w	c146 <_vfiprintf_r+0x21e>
    caa2:	9907      	ldr	r1, [sp, #28]
    caa4:	f851 3b04 	ldr.w	r3, [r1], #4
    caa8:	9107      	str	r1, [sp, #28]
    caaa:	2101      	movs	r1, #1
    caac:	f7ff bbb3 	b.w	c216 <_vfiprintf_r+0x2ee>
    cab0:	9b07      	ldr	r3, [sp, #28]
    cab2:	9805      	ldr	r0, [sp, #20]
    cab4:	f853 1b04 	ldr.w	r1, [r3], #4
    cab8:	9307      	str	r3, [sp, #28]
    caba:	17c2      	asrs	r2, r0, #31
    cabc:	e9c1 0200 	strd	r0, r2, [r1]
    cac0:	f7ff ba7d 	b.w	bfbe <_vfiprintf_r+0x96>
    cac4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cac6:	2b00      	cmp	r3, #0
    cac8:	f43f ab26 	beq.w	c118 <_vfiprintf_r+0x1f0>
    cacc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cace:	781b      	ldrb	r3, [r3, #0]
    cad0:	2b00      	cmp	r3, #0
    cad2:	f43f ab21 	beq.w	c118 <_vfiprintf_r+0x1f0>
    cad6:	f898 1000 	ldrb.w	r1, [r8]
    cada:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
    cade:	f7ff ba96 	b.w	c00e <_vfiprintf_r+0xe6>
    cae2:	2302      	movs	r3, #2
    cae4:	aa11      	add	r2, sp, #68	; 0x44
    cae6:	931c      	str	r3, [sp, #112]	; 0x70
    cae8:	921b      	str	r2, [sp, #108]	; 0x6c
    caea:	2001      	movs	r0, #1
    caec:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    caf0:	e6a2      	b.n	c838 <_vfiprintf_r+0x910>
    caf2:	9603      	str	r6, [sp, #12]
    caf4:	e571      	b.n	c5da <_vfiprintf_r+0x6b2>
    caf6:	4b3b      	ldr	r3, [pc, #236]	; (cbe4 <_vfiprintf_r+0xcbc>)
    caf8:	930c      	str	r3, [sp, #48]	; 0x30
    cafa:	f016 0220 	ands.w	r2, r6, #32
    cafe:	d059      	beq.n	cbb4 <_vfiprintf_r+0xc8c>
    cb00:	9b07      	ldr	r3, [sp, #28]
    cb02:	3307      	adds	r3, #7
    cb04:	f023 0307 	bic.w	r3, r3, #7
    cb08:	4618      	mov	r0, r3
    cb0a:	685a      	ldr	r2, [r3, #4]
    cb0c:	f850 3b08 	ldr.w	r3, [r0], #8
    cb10:	9007      	str	r0, [sp, #28]
    cb12:	07f4      	lsls	r4, r6, #31
    cb14:	d509      	bpl.n	cb2a <_vfiprintf_r+0xc02>
    cb16:	ea53 0002 	orrs.w	r0, r3, r2
    cb1a:	d006      	beq.n	cb2a <_vfiprintf_r+0xc02>
    cb1c:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
    cb20:	2130      	movs	r1, #48	; 0x30
    cb22:	f046 0602 	orr.w	r6, r6, #2
    cb26:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
    cb2a:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
    cb2e:	9103      	str	r1, [sp, #12]
    cb30:	2102      	movs	r1, #2
    cb32:	f7ff bb70 	b.w	c216 <_vfiprintf_r+0x2ee>
    cb36:	4b2c      	ldr	r3, [pc, #176]	; (cbe8 <_vfiprintf_r+0xcc0>)
    cb38:	930c      	str	r3, [sp, #48]	; 0x30
    cb3a:	e7de      	b.n	cafa <_vfiprintf_r+0xbd2>
    cb3c:	9b07      	ldr	r3, [sp, #28]
    cb3e:	2101      	movs	r1, #1
    cb40:	f853 2b04 	ldr.w	r2, [r3], #4
    cb44:	9103      	str	r1, [sp, #12]
    cb46:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
    cb4a:	9307      	str	r3, [sp, #28]
    cb4c:	9104      	str	r1, [sp, #16]
    cb4e:	ac2b      	add	r4, sp, #172	; 0xac
    cb50:	e4df      	b.n	c512 <_vfiprintf_r+0x5ea>
    cb52:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
    cb56:	2a00      	cmp	r2, #0
    cb58:	f040 8132 	bne.w	cdc0 <_vfiprintf_r+0xe98>
    cb5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    cb5e:	2a00      	cmp	r2, #0
    cb60:	f47f ae62 	bne.w	c828 <_vfiprintf_r+0x900>
    cb64:	4618      	mov	r0, r3
    cb66:	2101      	movs	r1, #1
    cb68:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    cb6c:	e427      	b.n	c3be <_vfiprintf_r+0x496>
    cb6e:	2100      	movs	r1, #0
    cb70:	2208      	movs	r2, #8
    cb72:	a816      	add	r0, sp, #88	; 0x58
    cb74:	9413      	str	r4, [sp, #76]	; 0x4c
    cb76:	f7f8 fb39 	bl	51ec <memset>
    cb7a:	1c79      	adds	r1, r7, #1
    cb7c:	f000 80bc 	beq.w	ccf8 <_vfiprintf_r+0xdd0>
    cb80:	2500      	movs	r5, #0
    cb82:	9407      	str	r4, [sp, #28]
    cb84:	462c      	mov	r4, r5
    cb86:	e00c      	b.n	cba2 <_vfiprintf_r+0xc7a>
    cb88:	a92b      	add	r1, sp, #172	; 0xac
    cb8a:	4658      	mov	r0, fp
    cb8c:	f7fe ff2e 	bl	b9ec <_wcrtomb_r>
    cb90:	1c42      	adds	r2, r0, #1
    cb92:	4420      	add	r0, r4
    cb94:	f000 816b 	beq.w	ce6e <_vfiprintf_r+0xf46>
    cb98:	42b8      	cmp	r0, r7
    cb9a:	dc08      	bgt.n	cbae <_vfiprintf_r+0xc86>
    cb9c:	f000 8170 	beq.w	ce80 <_vfiprintf_r+0xf58>
    cba0:	4604      	mov	r4, r0
    cba2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    cba4:	5952      	ldr	r2, [r2, r5]
    cba6:	ab16      	add	r3, sp, #88	; 0x58
    cba8:	3504      	adds	r5, #4
    cbaa:	2a00      	cmp	r2, #0
    cbac:	d1ec      	bne.n	cb88 <_vfiprintf_r+0xc60>
    cbae:	9404      	str	r4, [sp, #16]
    cbb0:	9c07      	ldr	r4, [sp, #28]
    cbb2:	e0af      	b.n	cd14 <_vfiprintf_r+0xdec>
    cbb4:	f016 0310 	ands.w	r3, r6, #16
    cbb8:	9807      	ldr	r0, [sp, #28]
    cbba:	d10c      	bne.n	cbd6 <_vfiprintf_r+0xcae>
    cbbc:	f016 0440 	ands.w	r4, r6, #64	; 0x40
    cbc0:	d005      	beq.n	cbce <_vfiprintf_r+0xca6>
    cbc2:	461a      	mov	r2, r3
    cbc4:	f850 3b04 	ldr.w	r3, [r0], #4
    cbc8:	9007      	str	r0, [sp, #28]
    cbca:	b29b      	uxth	r3, r3
    cbcc:	e7a1      	b.n	cb12 <_vfiprintf_r+0xbea>
    cbce:	f416 7200 	ands.w	r2, r6, #512	; 0x200
    cbd2:	f040 80e1 	bne.w	cd98 <_vfiprintf_r+0xe70>
    cbd6:	f850 3b04 	ldr.w	r3, [r0], #4
    cbda:	9007      	str	r0, [sp, #28]
    cbdc:	e799      	b.n	cb12 <_vfiprintf_r+0xbea>
    cbde:	bf00      	nop
    cbe0:	20002394 	.word	0x20002394
    cbe4:	200008d8 	.word	0x200008d8
    cbe8:	200008ec 	.word	0x200008ec
    cbec:	9903      	ldr	r1, [sp, #12]
    cbee:	9704      	str	r7, [sp, #16]
    cbf0:	ac44      	add	r4, sp, #272	; 0x110
    cbf2:	469e      	mov	lr, r3
    cbf4:	ee08 ba90 	vmov	s17, fp
    cbf8:	f401 6680 	and.w	r6, r1, #1024	; 0x400
    cbfc:	f04f 0c00 	mov.w	ip, #0
    cc00:	4623      	mov	r3, r4
    cc02:	e006      	b.n	cc12 <_vfiprintf_r+0xcea>
    cc04:	f1be 0f0a 	cmp.w	lr, #10
    cc08:	f172 0200 	sbcs.w	r2, r2, #0
    cc0c:	d339      	bcc.n	cc82 <_vfiprintf_r+0xd5a>
    cc0e:	46a6      	mov	lr, r4
    cc10:	462a      	mov	r2, r5
    cc12:	49a6      	ldr	r1, [pc, #664]	; (ceac <_vfiprintf_r+0xf84>)
    cc14:	eb1e 0002 	adds.w	r0, lr, r2
    cc18:	f140 0000 	adc.w	r0, r0, #0
    cc1c:	460f      	mov	r7, r1
    cc1e:	fba1 1400 	umull	r1, r4, r1, r0
    cc22:	f024 0103 	bic.w	r1, r4, #3
    cc26:	eb01 0194 	add.w	r1, r1, r4, lsr #2
    cc2a:	1a40      	subs	r0, r0, r1
    cc2c:	ebbe 0100 	subs.w	r1, lr, r0
    cc30:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
    cc34:	f162 0400 	sbc.w	r4, r2, #0
    cc38:	fb05 f501 	mul.w	r5, r5, r1
    cc3c:	fb07 5504 	mla	r5, r7, r4, r5
    cc40:	fba1 4107 	umull	r4, r1, r1, r7
    cc44:	440d      	add	r5, r1
    cc46:	2705      	movs	r7, #5
    cc48:	f004 0101 	and.w	r1, r4, #1
    cc4c:	fba1 1b07 	umull	r1, fp, r1, r7
    cc50:	1809      	adds	r1, r1, r0
    cc52:	0864      	lsrs	r4, r4, #1
    cc54:	3130      	adds	r1, #48	; 0x30
    cc56:	f803 1c01 	strb.w	r1, [r3, #-1]
    cc5a:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
    cc5e:	f10c 0c01 	add.w	ip, ip, #1
    cc62:	3b01      	subs	r3, #1
    cc64:	086d      	lsrs	r5, r5, #1
    cc66:	2e00      	cmp	r6, #0
    cc68:	d0cc      	beq.n	cc04 <_vfiprintf_r+0xcdc>
    cc6a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    cc6c:	7809      	ldrb	r1, [r1, #0]
    cc6e:	4561      	cmp	r1, ip
    cc70:	d1c8      	bne.n	cc04 <_vfiprintf_r+0xcdc>
    cc72:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    cc76:	d0c5      	beq.n	cc04 <_vfiprintf_r+0xcdc>
    cc78:	f1be 0f0a 	cmp.w	lr, #10
    cc7c:	f172 0200 	sbcs.w	r2, r2, #0
    cc80:	d26c      	bcs.n	cd5c <_vfiprintf_r+0xe34>
    cc82:	461c      	mov	r4, r3
    cc84:	ab44      	add	r3, sp, #272	; 0x110
    cc86:	1b1b      	subs	r3, r3, r4
    cc88:	9f04      	ldr	r7, [sp, #16]
    cc8a:	9e03      	ldr	r6, [sp, #12]
    cc8c:	9304      	str	r3, [sp, #16]
    cc8e:	ee18 ba90 	vmov	fp, s17
    cc92:	f7ff ba72 	b.w	c17a <_vfiprintf_r+0x252>
    cc96:	9603      	str	r6, [sp, #12]
    cc98:	f7ff ba62 	b.w	c160 <_vfiprintf_r+0x238>
    cc9c:	4658      	mov	r0, fp
    cc9e:	f7f8 f92f 	bl	4f00 <__sinit>
    cca2:	f7ff b95b 	b.w	bf5c <_vfiprintf_r+0x34>
    cca6:	2901      	cmp	r1, #1
    cca8:	9603      	str	r6, [sp, #12]
    ccaa:	f47f accd 	bne.w	c648 <_vfiprintf_r+0x720>
    ccae:	f7ff ba5c 	b.w	c16a <_vfiprintf_r+0x242>
    ccb2:	9b07      	ldr	r3, [sp, #28]
    ccb4:	9905      	ldr	r1, [sp, #20]
    ccb6:	f853 2b04 	ldr.w	r2, [r3], #4
    ccba:	6011      	str	r1, [r2, #0]
    ccbc:	9307      	str	r3, [sp, #28]
    ccbe:	f7ff b97e 	b.w	bfbe <_vfiprintf_r+0x96>
    ccc2:	2f06      	cmp	r7, #6
    ccc4:	463b      	mov	r3, r7
    ccc6:	9a03      	ldr	r2, [sp, #12]
    ccc8:	4c79      	ldr	r4, [pc, #484]	; (ceb0 <_vfiprintf_r+0xf88>)
    ccca:	9207      	str	r2, [sp, #28]
    cccc:	bf28      	it	cs
    ccce:	2306      	movcs	r3, #6
    ccd0:	9304      	str	r3, [sp, #16]
    ccd2:	9303      	str	r3, [sp, #12]
    ccd4:	f7ff bb25 	b.w	c322 <_vfiprintf_r+0x3fa>
    ccd8:	9b03      	ldr	r3, [sp, #12]
    ccda:	9907      	ldr	r1, [sp, #28]
    ccdc:	f413 7200 	ands.w	r2, r3, #512	; 0x200
    cce0:	bf14      	ite	ne
    cce2:	f851 3b04 	ldrne.w	r3, [r1], #4
    cce6:	f851 3b04 	ldreq.w	r3, [r1], #4
    ccea:	9107      	str	r1, [sp, #28]
    ccec:	bf1c      	itt	ne
    ccee:	4602      	movne	r2, r0
    ccf0:	b2db      	uxtbne	r3, r3
    ccf2:	2101      	movs	r1, #1
    ccf4:	f7ff ba8f 	b.w	c216 <_vfiprintf_r+0x2ee>
    ccf8:	ab16      	add	r3, sp, #88	; 0x58
    ccfa:	9300      	str	r3, [sp, #0]
    ccfc:	2300      	movs	r3, #0
    ccfe:	4619      	mov	r1, r3
    cd00:	aa13      	add	r2, sp, #76	; 0x4c
    cd02:	4658      	mov	r0, fp
    cd04:	f7fe fe98 	bl	ba38 <_wcsrtombs_r>
    cd08:	4603      	mov	r3, r0
    cd0a:	3301      	adds	r3, #1
    cd0c:	9004      	str	r0, [sp, #16]
    cd0e:	f000 80ae 	beq.w	ce6e <_vfiprintf_r+0xf46>
    cd12:	9413      	str	r4, [sp, #76]	; 0x4c
    cd14:	9b04      	ldr	r3, [sp, #16]
    cd16:	2b00      	cmp	r3, #0
    cd18:	d030      	beq.n	cd7c <_vfiprintf_r+0xe54>
    cd1a:	2b63      	cmp	r3, #99	; 0x63
    cd1c:	dc63      	bgt.n	cde6 <_vfiprintf_r+0xebe>
    cd1e:	2300      	movs	r3, #0
    cd20:	9308      	str	r3, [sp, #32]
    cd22:	ac2b      	add	r4, sp, #172	; 0xac
    cd24:	2208      	movs	r2, #8
    cd26:	2100      	movs	r1, #0
    cd28:	a816      	add	r0, sp, #88	; 0x58
    cd2a:	f7f8 fa5f 	bl	51ec <memset>
    cd2e:	9d04      	ldr	r5, [sp, #16]
    cd30:	ab16      	add	r3, sp, #88	; 0x58
    cd32:	9300      	str	r3, [sp, #0]
    cd34:	aa13      	add	r2, sp, #76	; 0x4c
    cd36:	462b      	mov	r3, r5
    cd38:	4621      	mov	r1, r4
    cd3a:	4658      	mov	r0, fp
    cd3c:	f7fe fe7c 	bl	ba38 <_wcsrtombs_r>
    cd40:	4285      	cmp	r5, r0
    cd42:	f040 80ab 	bne.w	ce9c <_vfiprintf_r+0xf74>
    cd46:	9b03      	ldr	r3, [sp, #12]
    cd48:	9a04      	ldr	r2, [sp, #16]
    cd4a:	9307      	str	r3, [sp, #28]
    cd4c:	2300      	movs	r3, #0
    cd4e:	54a3      	strb	r3, [r4, r2]
    cd50:	461f      	mov	r7, r3
    cd52:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    cd56:	9303      	str	r3, [sp, #12]
    cd58:	f7ff ba16 	b.w	c188 <_vfiprintf_r+0x260>
    cd5c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    cd5e:	990d      	ldr	r1, [sp, #52]	; 0x34
    cd60:	1a9b      	subs	r3, r3, r2
    cd62:	4618      	mov	r0, r3
    cd64:	9308      	str	r3, [sp, #32]
    cd66:	f7f8 fad9 	bl	531c <strncpy>
    cd6a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    cd6c:	9b08      	ldr	r3, [sp, #32]
    cd6e:	784a      	ldrb	r2, [r1, #1]
    cd70:	b10a      	cbz	r2, cd76 <_vfiprintf_r+0xe4e>
    cd72:	3101      	adds	r1, #1
    cd74:	910b      	str	r1, [sp, #44]	; 0x2c
    cd76:	f04f 0c00 	mov.w	ip, #0
    cd7a:	e748      	b.n	cc0e <_vfiprintf_r+0xce6>
    cd7c:	9b03      	ldr	r3, [sp, #12]
    cd7e:	9307      	str	r3, [sp, #28]
    cd80:	9b04      	ldr	r3, [sp, #16]
    cd82:	9303      	str	r3, [sp, #12]
    cd84:	461f      	mov	r7, r3
    cd86:	9308      	str	r3, [sp, #32]
    cd88:	f7ff b9fe 	b.w	c188 <_vfiprintf_r+0x260>
    cd8c:	2101      	movs	r1, #1
    cd8e:	4618      	mov	r0, r3
    cd90:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    cd94:	f7ff bb13 	b.w	c3be <_vfiprintf_r+0x496>
    cd98:	f850 3b04 	ldr.w	r3, [r0], #4
    cd9c:	9007      	str	r0, [sp, #28]
    cd9e:	4622      	mov	r2, r4
    cda0:	b2db      	uxtb	r3, r3
    cda2:	e6b6      	b.n	cb12 <_vfiprintf_r+0xbea>
    cda4:	f912 3b04 	ldrsb.w	r3, [r2], #4
    cda8:	9207      	str	r2, [sp, #28]
    cdaa:	17da      	asrs	r2, r3, #31
    cdac:	4611      	mov	r1, r2
    cdae:	f7ff b9ca 	b.w	c146 <_vfiprintf_r+0x21e>
    cdb2:	f851 3b04 	ldr.w	r3, [r1], #4
    cdb6:	9107      	str	r1, [sp, #28]
    cdb8:	4602      	mov	r2, r0
    cdba:	b2db      	uxtb	r3, r3
    cdbc:	f7ff ba27 	b.w	c20e <_vfiprintf_r+0x2e6>
    cdc0:	2301      	movs	r3, #1
    cdc2:	931c      	str	r3, [sp, #112]	; 0x70
    cdc4:	2101      	movs	r1, #1
    cdc6:	f10d 0343 	add.w	r3, sp, #67	; 0x43
    cdca:	931b      	str	r3, [sp, #108]	; 0x6c
    cdcc:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    cdd0:	460b      	mov	r3, r1
    cdd2:	f7ff bacd 	b.w	c370 <_vfiprintf_r+0x448>
    cdd6:	9b07      	ldr	r3, [sp, #28]
    cdd8:	9905      	ldr	r1, [sp, #20]
    cdda:	f853 2b04 	ldr.w	r2, [r3], #4
    cdde:	9307      	str	r3, [sp, #28]
    cde0:	8011      	strh	r1, [r2, #0]
    cde2:	f7ff b8ec 	b.w	bfbe <_vfiprintf_r+0x96>
    cde6:	1c59      	adds	r1, r3, #1
    cde8:	4658      	mov	r0, fp
    cdea:	f7f6 fb5b 	bl	34a4 <_malloc_r>
    cdee:	4604      	mov	r4, r0
    cdf0:	2800      	cmp	r0, #0
    cdf2:	d03c      	beq.n	ce6e <_vfiprintf_r+0xf46>
    cdf4:	9008      	str	r0, [sp, #32]
    cdf6:	e795      	b.n	cd24 <_vfiprintf_r+0xdfc>
    cdf8:	6d88      	ldr	r0, [r1, #88]	; 0x58
    cdfa:	f7f8 fb5d 	bl	54b8 <__retarget_lock_release_recursive>
    cdfe:	f7ff b9e9 	b.w	c1d4 <_vfiprintf_r+0x2ac>
    ce02:	9b03      	ldr	r3, [sp, #12]
    ce04:	9307      	str	r3, [sp, #28]
    ce06:	e9cd 7703 	strd	r7, r7, [sp, #12]
    ce0a:	9f08      	ldr	r7, [sp, #32]
    ce0c:	f7ff b9bc 	b.w	c188 <_vfiprintf_r+0x260>
    ce10:	9819      	ldr	r0, [sp, #100]	; 0x64
    ce12:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    ce14:	3001      	adds	r0, #1
    ce16:	e545      	b.n	c8a4 <_vfiprintf_r+0x97c>
    ce18:	9b03      	ldr	r3, [sp, #12]
    ce1a:	9307      	str	r3, [sp, #28]
    ce1c:	4620      	mov	r0, r4
    ce1e:	f7f8 fccf 	bl	57c0 <strlen>
    ce22:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
    ce26:	462f      	mov	r7, r5
    ce28:	9004      	str	r0, [sp, #16]
    ce2a:	9303      	str	r3, [sp, #12]
    ce2c:	9508      	str	r5, [sp, #32]
    ce2e:	f7ff b9ab 	b.w	c188 <_vfiprintf_r+0x260>
    ce32:	ee18 1a10 	vmov	r1, s16
    ce36:	aa18      	add	r2, sp, #96	; 0x60
    ce38:	4658      	mov	r0, fp
    ce3a:	f7ff f839 	bl	beb0 <__sprint_r.part.0>
    ce3e:	2800      	cmp	r0, #0
    ce40:	f43f aa36 	beq.w	c2b0 <_vfiprintf_r+0x388>
    ce44:	f7ff ba4d 	b.w	c2e2 <_vfiprintf_r+0x3ba>
    ce48:	9819      	ldr	r0, [sp, #100]	; 0x64
    ce4a:	3001      	adds	r0, #1
    ce4c:	e57a      	b.n	c944 <_vfiprintf_r+0xa1c>
    ce4e:	468c      	mov	ip, r1
    ce50:	e46e      	b.n	c730 <_vfiprintf_r+0x808>
    ce52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    ce54:	07d9      	lsls	r1, r3, #31
    ce56:	d405      	bmi.n	ce64 <_vfiprintf_r+0xf3c>
    ce58:	89ab      	ldrh	r3, [r5, #12]
    ce5a:	059a      	lsls	r2, r3, #22
    ce5c:	d402      	bmi.n	ce64 <_vfiprintf_r+0xf3c>
    ce5e:	6da8      	ldr	r0, [r5, #88]	; 0x58
    ce60:	f7f8 fb2a 	bl	54b8 <__retarget_lock_release_recursive>
    ce64:	f04f 33ff 	mov.w	r3, #4294967295
    ce68:	9305      	str	r3, [sp, #20]
    ce6a:	f7ff ba49 	b.w	c300 <_vfiprintf_r+0x3d8>
    ce6e:	ee18 2a10 	vmov	r2, s16
    ce72:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    ce76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ce7a:	8193      	strh	r3, [r2, #12]
    ce7c:	f7ff ba35 	b.w	c2ea <_vfiprintf_r+0x3c2>
    ce80:	9c07      	ldr	r4, [sp, #28]
    ce82:	9704      	str	r7, [sp, #16]
    ce84:	e746      	b.n	cd14 <_vfiprintf_r+0xdec>
    ce86:	9b07      	ldr	r3, [sp, #28]
    ce88:	f898 1001 	ldrb.w	r1, [r8, #1]
    ce8c:	f853 7b04 	ldr.w	r7, [r3], #4
    ce90:	9307      	str	r3, [sp, #28]
    ce92:	4690      	mov	r8, r2
    ce94:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
    ce98:	f7ff b8b9 	b.w	c00e <_vfiprintf_r+0xe6>
    ce9c:	ee18 2a10 	vmov	r2, s16
    cea0:	8993      	ldrh	r3, [r2, #12]
    cea2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    cea6:	8193      	strh	r3, [r2, #12]
    cea8:	f7ff ba15 	b.w	c2d6 <_vfiprintf_r+0x3ae>
    ceac:	cccccccd 	.word	0xcccccccd
    ceb0:	20000900 	.word	0x20000900

0000ceb4 <__sbprintf>:
    ceb4:	b570      	push	{r4, r5, r6, lr}
    ceb6:	460c      	mov	r4, r1
    ceb8:	8989      	ldrh	r1, [r1, #12]
    ceba:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
    cebe:	f021 0102 	bic.w	r1, r1, #2
    cec2:	f8ad 1014 	strh.w	r1, [sp, #20]
    cec6:	6e61      	ldr	r1, [r4, #100]	; 0x64
    cec8:	911b      	str	r1, [sp, #108]	; 0x6c
    ceca:	89e1      	ldrh	r1, [r4, #14]
    cecc:	f8ad 1016 	strh.w	r1, [sp, #22]
    ced0:	69e1      	ldr	r1, [r4, #28]
    ced2:	9109      	str	r1, [sp, #36]	; 0x24
    ced4:	6a61      	ldr	r1, [r4, #36]	; 0x24
    ced6:	910b      	str	r1, [sp, #44]	; 0x2c
    ced8:	a91c      	add	r1, sp, #112	; 0x70
    ceda:	9102      	str	r1, [sp, #8]
    cedc:	9106      	str	r1, [sp, #24]
    cede:	f44f 6180 	mov.w	r1, #1024	; 0x400
    cee2:	4606      	mov	r6, r0
    cee4:	9104      	str	r1, [sp, #16]
    cee6:	9107      	str	r1, [sp, #28]
    cee8:	a818      	add	r0, sp, #96	; 0x60
    ceea:	2100      	movs	r1, #0
    ceec:	e9cd 3200 	strd	r3, r2, [sp]
    cef0:	9108      	str	r1, [sp, #32]
    cef2:	f7f8 fadb 	bl	54ac <__retarget_lock_init_recursive>
    cef6:	e9dd 3200 	ldrd	r3, r2, [sp]
    cefa:	a902      	add	r1, sp, #8
    cefc:	4630      	mov	r0, r6
    cefe:	f7ff f813 	bl	bf28 <_vfiprintf_r>
    cf02:	1e05      	subs	r5, r0, #0
    cf04:	db07      	blt.n	cf16 <__sbprintf+0x62>
    cf06:	a902      	add	r1, sp, #8
    cf08:	4630      	mov	r0, r6
    cf0a:	f7fd fa63 	bl	a3d4 <_fflush_r>
    cf0e:	2800      	cmp	r0, #0
    cf10:	bf18      	it	ne
    cf12:	f04f 35ff 	movne.w	r5, #4294967295
    cf16:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    cf1a:	065b      	lsls	r3, r3, #25
    cf1c:	d503      	bpl.n	cf26 <__sbprintf+0x72>
    cf1e:	89a3      	ldrh	r3, [r4, #12]
    cf20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    cf24:	81a3      	strh	r3, [r4, #12]
    cf26:	9818      	ldr	r0, [sp, #96]	; 0x60
    cf28:	f7f8 fac2 	bl	54b0 <__retarget_lock_close_recursive>
    cf2c:	4628      	mov	r0, r5
    cf2e:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
    cf32:	bd70      	pop	{r4, r5, r6, pc}

0000cf34 <__sfvwrite_r>:
    cf34:	6893      	ldr	r3, [r2, #8]
    cf36:	2b00      	cmp	r3, #0
    cf38:	f000 8085 	beq.w	d046 <__sfvwrite_r+0x112>
    cf3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cf40:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
    cf44:	460c      	mov	r4, r1
    cf46:	0719      	lsls	r1, r3, #28
    cf48:	4680      	mov	r8, r0
    cf4a:	b083      	sub	sp, #12
    cf4c:	4617      	mov	r7, r2
    cf4e:	b298      	uxth	r0, r3
    cf50:	d525      	bpl.n	cf9e <__sfvwrite_r+0x6a>
    cf52:	6923      	ldr	r3, [r4, #16]
    cf54:	b31b      	cbz	r3, cf9e <__sfvwrite_r+0x6a>
    cf56:	f010 0302 	ands.w	r3, r0, #2
    cf5a:	683d      	ldr	r5, [r7, #0]
    cf5c:	d02d      	beq.n	cfba <__sfvwrite_r+0x86>
    cf5e:	f04f 0a00 	mov.w	sl, #0
    cf62:	f8df b2c0 	ldr.w	fp, [pc, #704]	; d224 <__sfvwrite_r+0x2f0>
    cf66:	4656      	mov	r6, sl
    cf68:	46b9      	mov	r9, r7
    cf6a:	455e      	cmp	r6, fp
    cf6c:	4633      	mov	r3, r6
    cf6e:	4652      	mov	r2, sl
    cf70:	bf28      	it	cs
    cf72:	465b      	movcs	r3, fp
    cf74:	4640      	mov	r0, r8
    cf76:	2e00      	cmp	r6, #0
    cf78:	d052      	beq.n	d020 <__sfvwrite_r+0xec>
    cf7a:	69e1      	ldr	r1, [r4, #28]
    cf7c:	6a67      	ldr	r7, [r4, #36]	; 0x24
    cf7e:	47b8      	blx	r7
    cf80:	2800      	cmp	r0, #0
    cf82:	dd56      	ble.n	d032 <__sfvwrite_r+0xfe>
    cf84:	f8d9 3008 	ldr.w	r3, [r9, #8]
    cf88:	1a1b      	subs	r3, r3, r0
    cf8a:	4482      	add	sl, r0
    cf8c:	1a36      	subs	r6, r6, r0
    cf8e:	f8c9 3008 	str.w	r3, [r9, #8]
    cf92:	2b00      	cmp	r3, #0
    cf94:	d1e9      	bne.n	cf6a <__sfvwrite_r+0x36>
    cf96:	2000      	movs	r0, #0
    cf98:	b003      	add	sp, #12
    cf9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cf9e:	4621      	mov	r1, r4
    cfa0:	4640      	mov	r0, r8
    cfa2:	f000 f97d 	bl	d2a0 <__swsetup_r>
    cfa6:	2800      	cmp	r0, #0
    cfa8:	f040 8138 	bne.w	d21c <__sfvwrite_r+0x2e8>
    cfac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    cfb0:	683d      	ldr	r5, [r7, #0]
    cfb2:	b298      	uxth	r0, r3
    cfb4:	f010 0302 	ands.w	r3, r0, #2
    cfb8:	d1d1      	bne.n	cf5e <__sfvwrite_r+0x2a>
    cfba:	f010 0901 	ands.w	r9, r0, #1
    cfbe:	d144      	bne.n	d04a <__sfvwrite_r+0x116>
    cfc0:	464e      	mov	r6, r9
    cfc2:	9700      	str	r7, [sp, #0]
    cfc4:	b346      	cbz	r6, d018 <__sfvwrite_r+0xe4>
    cfc6:	0582      	lsls	r2, r0, #22
    cfc8:	f8d4 b008 	ldr.w	fp, [r4, #8]
    cfcc:	f140 8085 	bpl.w	d0da <__sfvwrite_r+0x1a6>
    cfd0:	45b3      	cmp	fp, r6
    cfd2:	465a      	mov	r2, fp
    cfd4:	f200 80b4 	bhi.w	d140 <__sfvwrite_r+0x20c>
    cfd8:	f410 6f90 	tst.w	r0, #1152	; 0x480
    cfdc:	f040 80c1 	bne.w	d162 <__sfvwrite_r+0x22e>
    cfe0:	6820      	ldr	r0, [r4, #0]
    cfe2:	9201      	str	r2, [sp, #4]
    cfe4:	4649      	mov	r1, r9
    cfe6:	f7f8 f885 	bl	50f4 <memmove>
    cfea:	68a3      	ldr	r3, [r4, #8]
    cfec:	9a01      	ldr	r2, [sp, #4]
    cfee:	eba3 010b 	sub.w	r1, r3, fp
    cff2:	6823      	ldr	r3, [r4, #0]
    cff4:	60a1      	str	r1, [r4, #8]
    cff6:	4413      	add	r3, r2
    cff8:	46b2      	mov	sl, r6
    cffa:	6023      	str	r3, [r4, #0]
    cffc:	2600      	movs	r6, #0
    cffe:	9a00      	ldr	r2, [sp, #0]
    d000:	6893      	ldr	r3, [r2, #8]
    d002:	eba3 030a 	sub.w	r3, r3, sl
    d006:	44d1      	add	r9, sl
    d008:	6093      	str	r3, [r2, #8]
    d00a:	2b00      	cmp	r3, #0
    d00c:	d0c3      	beq.n	cf96 <__sfvwrite_r+0x62>
    d00e:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
    d012:	b280      	uxth	r0, r0
    d014:	2e00      	cmp	r6, #0
    d016:	d1d6      	bne.n	cfc6 <__sfvwrite_r+0x92>
    d018:	e9d5 9600 	ldrd	r9, r6, [r5]
    d01c:	3508      	adds	r5, #8
    d01e:	e7d1      	b.n	cfc4 <__sfvwrite_r+0x90>
    d020:	e9d5 a600 	ldrd	sl, r6, [r5]
    d024:	3508      	adds	r5, #8
    d026:	e7a0      	b.n	cf6a <__sfvwrite_r+0x36>
    d028:	4621      	mov	r1, r4
    d02a:	4640      	mov	r0, r8
    d02c:	f7fd f9d2 	bl	a3d4 <_fflush_r>
    d030:	b388      	cbz	r0, d096 <__sfvwrite_r+0x162>
    d032:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    d036:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d03a:	f04f 30ff 	mov.w	r0, #4294967295
    d03e:	81a3      	strh	r3, [r4, #12]
    d040:	b003      	add	sp, #12
    d042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d046:	2000      	movs	r0, #0
    d048:	4770      	bx	lr
    d04a:	461e      	mov	r6, r3
    d04c:	46ba      	mov	sl, r7
    d04e:	4699      	mov	r9, r3
    d050:	4618      	mov	r0, r3
    d052:	9500      	str	r5, [sp, #0]
    d054:	461f      	mov	r7, r3
    d056:	b366      	cbz	r6, d0b2 <__sfvwrite_r+0x17e>
    d058:	2800      	cmp	r0, #0
    d05a:	d032      	beq.n	d0c2 <__sfvwrite_r+0x18e>
    d05c:	464a      	mov	r2, r9
    d05e:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
    d062:	6820      	ldr	r0, [r4, #0]
    d064:	68a5      	ldr	r5, [r4, #8]
    d066:	42b2      	cmp	r2, r6
    d068:	bf28      	it	cs
    d06a:	4632      	movcs	r2, r6
    d06c:	4288      	cmp	r0, r1
    d06e:	d904      	bls.n	d07a <__sfvwrite_r+0x146>
    d070:	eb05 0b03 	add.w	fp, r5, r3
    d074:	455a      	cmp	r2, fp
    d076:	f300 80a7 	bgt.w	d1c8 <__sfvwrite_r+0x294>
    d07a:	4293      	cmp	r3, r2
    d07c:	dc64      	bgt.n	d148 <__sfvwrite_r+0x214>
    d07e:	69e1      	ldr	r1, [r4, #28]
    d080:	6a65      	ldr	r5, [r4, #36]	; 0x24
    d082:	463a      	mov	r2, r7
    d084:	4640      	mov	r0, r8
    d086:	47a8      	blx	r5
    d088:	f1b0 0b00 	subs.w	fp, r0, #0
    d08c:	ddd1      	ble.n	d032 <__sfvwrite_r+0xfe>
    d08e:	ebb9 090b 	subs.w	r9, r9, fp
    d092:	d0c9      	beq.n	d028 <__sfvwrite_r+0xf4>
    d094:	2001      	movs	r0, #1
    d096:	f8da 3008 	ldr.w	r3, [sl, #8]
    d09a:	eba3 030b 	sub.w	r3, r3, fp
    d09e:	445f      	add	r7, fp
    d0a0:	eba6 060b 	sub.w	r6, r6, fp
    d0a4:	f8ca 3008 	str.w	r3, [sl, #8]
    d0a8:	2b00      	cmp	r3, #0
    d0aa:	f43f af74 	beq.w	cf96 <__sfvwrite_r+0x62>
    d0ae:	2e00      	cmp	r6, #0
    d0b0:	d1d2      	bne.n	d058 <__sfvwrite_r+0x124>
    d0b2:	9a00      	ldr	r2, [sp, #0]
    d0b4:	6856      	ldr	r6, [r2, #4]
    d0b6:	4613      	mov	r3, r2
    d0b8:	3208      	adds	r2, #8
    d0ba:	9200      	str	r2, [sp, #0]
    d0bc:	2e00      	cmp	r6, #0
    d0be:	d0f8      	beq.n	d0b2 <__sfvwrite_r+0x17e>
    d0c0:	681f      	ldr	r7, [r3, #0]
    d0c2:	4632      	mov	r2, r6
    d0c4:	210a      	movs	r1, #10
    d0c6:	4638      	mov	r0, r7
    d0c8:	f7fd fa4a 	bl	a560 <memchr>
    d0cc:	2800      	cmp	r0, #0
    d0ce:	f000 809c 	beq.w	d20a <__sfvwrite_r+0x2d6>
    d0d2:	3001      	adds	r0, #1
    d0d4:	eba0 0907 	sub.w	r9, r0, r7
    d0d8:	e7c0      	b.n	d05c <__sfvwrite_r+0x128>
    d0da:	6820      	ldr	r0, [r4, #0]
    d0dc:	6923      	ldr	r3, [r4, #16]
    d0de:	4298      	cmp	r0, r3
    d0e0:	d816      	bhi.n	d110 <__sfvwrite_r+0x1dc>
    d0e2:	6962      	ldr	r2, [r4, #20]
    d0e4:	42b2      	cmp	r2, r6
    d0e6:	d813      	bhi.n	d110 <__sfvwrite_r+0x1dc>
    d0e8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    d0ec:	42b3      	cmp	r3, r6
    d0ee:	bf28      	it	cs
    d0f0:	4633      	movcs	r3, r6
    d0f2:	69e1      	ldr	r1, [r4, #28]
    d0f4:	fb93 f3f2 	sdiv	r3, r3, r2
    d0f8:	6a67      	ldr	r7, [r4, #36]	; 0x24
    d0fa:	fb02 f303 	mul.w	r3, r2, r3
    d0fe:	4640      	mov	r0, r8
    d100:	464a      	mov	r2, r9
    d102:	47b8      	blx	r7
    d104:	f1b0 0a00 	subs.w	sl, r0, #0
    d108:	dd93      	ble.n	d032 <__sfvwrite_r+0xfe>
    d10a:	eba6 060a 	sub.w	r6, r6, sl
    d10e:	e776      	b.n	cffe <__sfvwrite_r+0xca>
    d110:	45b3      	cmp	fp, r6
    d112:	46da      	mov	sl, fp
    d114:	bf28      	it	cs
    d116:	46b2      	movcs	sl, r6
    d118:	4652      	mov	r2, sl
    d11a:	4649      	mov	r1, r9
    d11c:	f7f7 ffea 	bl	50f4 <memmove>
    d120:	68a3      	ldr	r3, [r4, #8]
    d122:	6822      	ldr	r2, [r4, #0]
    d124:	eba3 030a 	sub.w	r3, r3, sl
    d128:	4452      	add	r2, sl
    d12a:	60a3      	str	r3, [r4, #8]
    d12c:	6022      	str	r2, [r4, #0]
    d12e:	2b00      	cmp	r3, #0
    d130:	d1eb      	bne.n	d10a <__sfvwrite_r+0x1d6>
    d132:	4621      	mov	r1, r4
    d134:	4640      	mov	r0, r8
    d136:	f7fd f94d 	bl	a3d4 <_fflush_r>
    d13a:	2800      	cmp	r0, #0
    d13c:	d0e5      	beq.n	d10a <__sfvwrite_r+0x1d6>
    d13e:	e778      	b.n	d032 <__sfvwrite_r+0xfe>
    d140:	6820      	ldr	r0, [r4, #0]
    d142:	46b3      	mov	fp, r6
    d144:	4632      	mov	r2, r6
    d146:	e74c      	b.n	cfe2 <__sfvwrite_r+0xae>
    d148:	4639      	mov	r1, r7
    d14a:	9201      	str	r2, [sp, #4]
    d14c:	f7f7 ffd2 	bl	50f4 <memmove>
    d150:	9a01      	ldr	r2, [sp, #4]
    d152:	68a3      	ldr	r3, [r4, #8]
    d154:	1a9b      	subs	r3, r3, r2
    d156:	60a3      	str	r3, [r4, #8]
    d158:	6823      	ldr	r3, [r4, #0]
    d15a:	4413      	add	r3, r2
    d15c:	6023      	str	r3, [r4, #0]
    d15e:	4693      	mov	fp, r2
    d160:	e795      	b.n	d08e <__sfvwrite_r+0x15a>
    d162:	6823      	ldr	r3, [r4, #0]
    d164:	6921      	ldr	r1, [r4, #16]
    d166:	eba3 0b01 	sub.w	fp, r3, r1
    d16a:	6963      	ldr	r3, [r4, #20]
    d16c:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
    d170:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
    d174:	f10b 0301 	add.w	r3, fp, #1
    d178:	ea4f 0a6a 	mov.w	sl, sl, asr #1
    d17c:	4433      	add	r3, r6
    d17e:	4553      	cmp	r3, sl
    d180:	4652      	mov	r2, sl
    d182:	bf84      	itt	hi
    d184:	469a      	movhi	sl, r3
    d186:	4652      	movhi	r2, sl
    d188:	0543      	lsls	r3, r0, #21
    d18a:	d52c      	bpl.n	d1e6 <__sfvwrite_r+0x2b2>
    d18c:	4611      	mov	r1, r2
    d18e:	4640      	mov	r0, r8
    d190:	f7f6 f988 	bl	34a4 <_malloc_r>
    d194:	2800      	cmp	r0, #0
    d196:	d03b      	beq.n	d210 <__sfvwrite_r+0x2dc>
    d198:	465a      	mov	r2, fp
    d19a:	6921      	ldr	r1, [r4, #16]
    d19c:	9001      	str	r0, [sp, #4]
    d19e:	f7f4 fa5b 	bl	1658 <memcpy>
    d1a2:	89a2      	ldrh	r2, [r4, #12]
    d1a4:	9b01      	ldr	r3, [sp, #4]
    d1a6:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
    d1aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    d1ae:	81a2      	strh	r2, [r4, #12]
    d1b0:	eb03 000b 	add.w	r0, r3, fp
    d1b4:	6123      	str	r3, [r4, #16]
    d1b6:	ebaa 030b 	sub.w	r3, sl, fp
    d1ba:	f8c4 a014 	str.w	sl, [r4, #20]
    d1be:	60a3      	str	r3, [r4, #8]
    d1c0:	6020      	str	r0, [r4, #0]
    d1c2:	46b3      	mov	fp, r6
    d1c4:	4632      	mov	r2, r6
    d1c6:	e70c      	b.n	cfe2 <__sfvwrite_r+0xae>
    d1c8:	4639      	mov	r1, r7
    d1ca:	465a      	mov	r2, fp
    d1cc:	f7f7 ff92 	bl	50f4 <memmove>
    d1d0:	6823      	ldr	r3, [r4, #0]
    d1d2:	445b      	add	r3, fp
    d1d4:	6023      	str	r3, [r4, #0]
    d1d6:	4621      	mov	r1, r4
    d1d8:	4640      	mov	r0, r8
    d1da:	f7fd f8fb 	bl	a3d4 <_fflush_r>
    d1de:	2800      	cmp	r0, #0
    d1e0:	f43f af55 	beq.w	d08e <__sfvwrite_r+0x15a>
    d1e4:	e725      	b.n	d032 <__sfvwrite_r+0xfe>
    d1e6:	4640      	mov	r0, r8
    d1e8:	f7f6 fc24 	bl	3a34 <_realloc_r>
    d1ec:	4603      	mov	r3, r0
    d1ee:	2800      	cmp	r0, #0
    d1f0:	d1de      	bne.n	d1b0 <__sfvwrite_r+0x27c>
    d1f2:	6921      	ldr	r1, [r4, #16]
    d1f4:	4640      	mov	r0, r8
    d1f6:	f7f8 fbb1 	bl	595c <_free_r>
    d1fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    d1fe:	220c      	movs	r2, #12
    d200:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    d204:	f8c8 2000 	str.w	r2, [r8]
    d208:	e715      	b.n	d036 <__sfvwrite_r+0x102>
    d20a:	1c72      	adds	r2, r6, #1
    d20c:	4691      	mov	r9, r2
    d20e:	e726      	b.n	d05e <__sfvwrite_r+0x12a>
    d210:	220c      	movs	r2, #12
    d212:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    d216:	f8c8 2000 	str.w	r2, [r8]
    d21a:	e70c      	b.n	d036 <__sfvwrite_r+0x102>
    d21c:	f04f 30ff 	mov.w	r0, #4294967295
    d220:	e6ba      	b.n	cf98 <__sfvwrite_r+0x64>
    d222:	bf00      	nop
    d224:	7ffffc00 	.word	0x7ffffc00

0000d228 <__submore>:
    d228:	f101 0340 	add.w	r3, r1, #64	; 0x40
    d22c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d230:	460c      	mov	r4, r1
    d232:	6b09      	ldr	r1, [r1, #48]	; 0x30
    d234:	4299      	cmp	r1, r3
    d236:	d014      	beq.n	d262 <__submore+0x3a>
    d238:	6b66      	ldr	r6, [r4, #52]	; 0x34
    d23a:	0077      	lsls	r7, r6, #1
    d23c:	463a      	mov	r2, r7
    d23e:	f7f6 fbf9 	bl	3a34 <_realloc_r>
    d242:	4605      	mov	r5, r0
    d244:	b340      	cbz	r0, d298 <__submore+0x70>
    d246:	eb00 0806 	add.w	r8, r0, r6
    d24a:	4601      	mov	r1, r0
    d24c:	4632      	mov	r2, r6
    d24e:	4640      	mov	r0, r8
    d250:	f7f4 fa02 	bl	1658 <memcpy>
    d254:	e9c4 570c 	strd	r5, r7, [r4, #48]	; 0x30
    d258:	f8c4 8000 	str.w	r8, [r4]
    d25c:	2000      	movs	r0, #0
    d25e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d262:	f44f 6180 	mov.w	r1, #1024	; 0x400
    d266:	f7f6 f91d 	bl	34a4 <_malloc_r>
    d26a:	b1a8      	cbz	r0, d298 <__submore+0x70>
    d26c:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
    d270:	f44f 6280 	mov.w	r2, #1024	; 0x400
    d274:	e9c4 020c 	strd	r0, r2, [r4, #48]	; 0x30
    d278:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
    d27c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    d280:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
    d284:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
    d288:	f880 23fd 	strb.w	r2, [r0, #1021]	; 0x3fd
    d28c:	f200 33fd 	addw	r3, r0, #1021	; 0x3fd
    d290:	6023      	str	r3, [r4, #0]
    d292:	2000      	movs	r0, #0
    d294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d298:	f04f 30ff 	mov.w	r0, #4294967295
    d29c:	e7df      	b.n	d25e <__submore+0x36>
    d29e:	bf00      	nop

0000d2a0 <__swsetup_r>:
    d2a0:	b538      	push	{r3, r4, r5, lr}
    d2a2:	4b31      	ldr	r3, [pc, #196]	; (d368 <__swsetup_r+0xc8>)
    d2a4:	681b      	ldr	r3, [r3, #0]
    d2a6:	4605      	mov	r5, r0
    d2a8:	460c      	mov	r4, r1
    d2aa:	b113      	cbz	r3, d2b2 <__swsetup_r+0x12>
    d2ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    d2ae:	2a00      	cmp	r2, #0
    d2b0:	d04e      	beq.n	d350 <__swsetup_r+0xb0>
    d2b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    d2b6:	0718      	lsls	r0, r3, #28
    d2b8:	b29a      	uxth	r2, r3
    d2ba:	d51c      	bpl.n	d2f6 <__swsetup_r+0x56>
    d2bc:	6921      	ldr	r1, [r4, #16]
    d2be:	b329      	cbz	r1, d30c <__swsetup_r+0x6c>
    d2c0:	f012 0001 	ands.w	r0, r2, #1
    d2c4:	d007      	beq.n	d2d6 <__swsetup_r+0x36>
    d2c6:	2000      	movs	r0, #0
    d2c8:	60a0      	str	r0, [r4, #8]
    d2ca:	6960      	ldr	r0, [r4, #20]
    d2cc:	4240      	negs	r0, r0
    d2ce:	61a0      	str	r0, [r4, #24]
    d2d0:	b139      	cbz	r1, d2e2 <__swsetup_r+0x42>
    d2d2:	2000      	movs	r0, #0
    d2d4:	bd38      	pop	{r3, r4, r5, pc}
    d2d6:	0795      	lsls	r5, r2, #30
    d2d8:	bf58      	it	pl
    d2da:	6960      	ldrpl	r0, [r4, #20]
    d2dc:	60a0      	str	r0, [r4, #8]
    d2de:	2900      	cmp	r1, #0
    d2e0:	d1f7      	bne.n	d2d2 <__swsetup_r+0x32>
    d2e2:	0612      	lsls	r2, r2, #24
    d2e4:	bf58      	it	pl
    d2e6:	4608      	movpl	r0, r1
    d2e8:	d5f4      	bpl.n	d2d4 <__swsetup_r+0x34>
    d2ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d2ee:	81a3      	strh	r3, [r4, #12]
    d2f0:	f04f 30ff 	mov.w	r0, #4294967295
    d2f4:	bd38      	pop	{r3, r4, r5, pc}
    d2f6:	06d1      	lsls	r1, r2, #27
    d2f8:	d52e      	bpl.n	d358 <__swsetup_r+0xb8>
    d2fa:	0752      	lsls	r2, r2, #29
    d2fc:	d414      	bmi.n	d328 <__swsetup_r+0x88>
    d2fe:	6921      	ldr	r1, [r4, #16]
    d300:	f043 0308 	orr.w	r3, r3, #8
    d304:	81a3      	strh	r3, [r4, #12]
    d306:	b29a      	uxth	r2, r3
    d308:	2900      	cmp	r1, #0
    d30a:	d1d9      	bne.n	d2c0 <__swsetup_r+0x20>
    d30c:	f402 7020 	and.w	r0, r2, #640	; 0x280
    d310:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    d314:	d0d4      	beq.n	d2c0 <__swsetup_r+0x20>
    d316:	4621      	mov	r1, r4
    d318:	4628      	mov	r0, r5
    d31a:	f000 f977 	bl	d60c <__smakebuf_r>
    d31e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    d322:	6921      	ldr	r1, [r4, #16]
    d324:	b29a      	uxth	r2, r3
    d326:	e7cb      	b.n	d2c0 <__swsetup_r+0x20>
    d328:	6b21      	ldr	r1, [r4, #48]	; 0x30
    d32a:	b151      	cbz	r1, d342 <__swsetup_r+0xa2>
    d32c:	f104 0240 	add.w	r2, r4, #64	; 0x40
    d330:	4291      	cmp	r1, r2
    d332:	d004      	beq.n	d33e <__swsetup_r+0x9e>
    d334:	4628      	mov	r0, r5
    d336:	f7f8 fb11 	bl	595c <_free_r>
    d33a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    d33e:	2200      	movs	r2, #0
    d340:	6322      	str	r2, [r4, #48]	; 0x30
    d342:	6921      	ldr	r1, [r4, #16]
    d344:	2200      	movs	r2, #0
    d346:	e9c4 1200 	strd	r1, r2, [r4]
    d34a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    d34e:	e7d7      	b.n	d300 <__swsetup_r+0x60>
    d350:	4618      	mov	r0, r3
    d352:	f7f7 fdd5 	bl	4f00 <__sinit>
    d356:	e7ac      	b.n	d2b2 <__swsetup_r+0x12>
    d358:	2209      	movs	r2, #9
    d35a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d35e:	602a      	str	r2, [r5, #0]
    d360:	f04f 30ff 	mov.w	r0, #4294967295
    d364:	81a3      	strh	r3, [r4, #12]
    d366:	bd38      	pop	{r3, r4, r5, pc}
    d368:	20007fc0 	.word	0x20007fc0

0000d36c <__fputwc>:
    d36c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d370:	b082      	sub	sp, #8
    d372:	4682      	mov	sl, r0
    d374:	4688      	mov	r8, r1
    d376:	4614      	mov	r4, r2
    d378:	f7f8 f802 	bl	5380 <__locale_mb_cur_max>
    d37c:	2801      	cmp	r0, #1
    d37e:	d103      	bne.n	d388 <__fputwc+0x1c>
    d380:	f108 33ff 	add.w	r3, r8, #4294967295
    d384:	2bfe      	cmp	r3, #254	; 0xfe
    d386:	d936      	bls.n	d3f6 <__fputwc+0x8a>
    d388:	f10d 0904 	add.w	r9, sp, #4
    d38c:	4642      	mov	r2, r8
    d38e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
    d392:	4649      	mov	r1, r9
    d394:	4650      	mov	r0, sl
    d396:	f7fe fb29 	bl	b9ec <_wcrtomb_r>
    d39a:	1c42      	adds	r2, r0, #1
    d39c:	4606      	mov	r6, r0
    d39e:	d032      	beq.n	d406 <__fputwc+0x9a>
    d3a0:	b320      	cbz	r0, d3ec <__fputwc+0x80>
    d3a2:	f89d c004 	ldrb.w	ip, [sp, #4]
    d3a6:	2500      	movs	r5, #0
    d3a8:	e009      	b.n	d3be <__fputwc+0x52>
    d3aa:	6823      	ldr	r3, [r4, #0]
    d3ac:	1c5a      	adds	r2, r3, #1
    d3ae:	6022      	str	r2, [r4, #0]
    d3b0:	f883 c000 	strb.w	ip, [r3]
    d3b4:	3501      	adds	r5, #1
    d3b6:	42b5      	cmp	r5, r6
    d3b8:	d218      	bcs.n	d3ec <__fputwc+0x80>
    d3ba:	f819 cf01 	ldrb.w	ip, [r9, #1]!
    d3be:	68a3      	ldr	r3, [r4, #8]
    d3c0:	3b01      	subs	r3, #1
    d3c2:	2b00      	cmp	r3, #0
    d3c4:	60a3      	str	r3, [r4, #8]
    d3c6:	daf0      	bge.n	d3aa <__fputwc+0x3e>
    d3c8:	69a7      	ldr	r7, [r4, #24]
    d3ca:	42bb      	cmp	r3, r7
    d3cc:	4661      	mov	r1, ip
    d3ce:	4622      	mov	r2, r4
    d3d0:	4650      	mov	r0, sl
    d3d2:	db02      	blt.n	d3da <__fputwc+0x6e>
    d3d4:	f1bc 0f0a 	cmp.w	ip, #10
    d3d8:	d1e7      	bne.n	d3aa <__fputwc+0x3e>
    d3da:	f000 f983 	bl	d6e4 <__swbuf_r>
    d3de:	1c43      	adds	r3, r0, #1
    d3e0:	d1e8      	bne.n	d3b4 <__fputwc+0x48>
    d3e2:	4606      	mov	r6, r0
    d3e4:	4630      	mov	r0, r6
    d3e6:	b002      	add	sp, #8
    d3e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d3ec:	4646      	mov	r6, r8
    d3ee:	4630      	mov	r0, r6
    d3f0:	b002      	add	sp, #8
    d3f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d3f6:	fa5f fc88 	uxtb.w	ip, r8
    d3fa:	f88d c004 	strb.w	ip, [sp, #4]
    d3fe:	4606      	mov	r6, r0
    d400:	f10d 0904 	add.w	r9, sp, #4
    d404:	e7cf      	b.n	d3a6 <__fputwc+0x3a>
    d406:	89a3      	ldrh	r3, [r4, #12]
    d408:	4630      	mov	r0, r6
    d40a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d40e:	81a3      	strh	r3, [r4, #12]
    d410:	b002      	add	sp, #8
    d412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d416:	bf00      	nop

0000d418 <_fputwc_r>:
    d418:	b530      	push	{r4, r5, lr}
    d41a:	6e53      	ldr	r3, [r2, #100]	; 0x64
    d41c:	f013 0f01 	tst.w	r3, #1
    d420:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    d424:	4614      	mov	r4, r2
    d426:	b083      	sub	sp, #12
    d428:	4605      	mov	r5, r0
    d42a:	b29a      	uxth	r2, r3
    d42c:	d101      	bne.n	d432 <_fputwc_r+0x1a>
    d42e:	0598      	lsls	r0, r3, #22
    d430:	d51c      	bpl.n	d46c <_fputwc_r+0x54>
    d432:	0490      	lsls	r0, r2, #18
    d434:	d406      	bmi.n	d444 <_fputwc_r+0x2c>
    d436:	6e62      	ldr	r2, [r4, #100]	; 0x64
    d438:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    d43c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    d440:	81a3      	strh	r3, [r4, #12]
    d442:	6662      	str	r2, [r4, #100]	; 0x64
    d444:	4622      	mov	r2, r4
    d446:	4628      	mov	r0, r5
    d448:	f7ff ff90 	bl	d36c <__fputwc>
    d44c:	6e63      	ldr	r3, [r4, #100]	; 0x64
    d44e:	07da      	lsls	r2, r3, #31
    d450:	4605      	mov	r5, r0
    d452:	d402      	bmi.n	d45a <_fputwc_r+0x42>
    d454:	89a3      	ldrh	r3, [r4, #12]
    d456:	059b      	lsls	r3, r3, #22
    d458:	d502      	bpl.n	d460 <_fputwc_r+0x48>
    d45a:	4628      	mov	r0, r5
    d45c:	b003      	add	sp, #12
    d45e:	bd30      	pop	{r4, r5, pc}
    d460:	6da0      	ldr	r0, [r4, #88]	; 0x58
    d462:	f7f8 f829 	bl	54b8 <__retarget_lock_release_recursive>
    d466:	4628      	mov	r0, r5
    d468:	b003      	add	sp, #12
    d46a:	bd30      	pop	{r4, r5, pc}
    d46c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    d46e:	9101      	str	r1, [sp, #4]
    d470:	f7f8 f820 	bl	54b4 <__retarget_lock_acquire_recursive>
    d474:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    d478:	9901      	ldr	r1, [sp, #4]
    d47a:	b29a      	uxth	r2, r3
    d47c:	e7d9      	b.n	d432 <_fputwc_r+0x1a>
    d47e:	bf00      	nop

0000d480 <_wcsnrtombs_l>:
    d480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d484:	b08b      	sub	sp, #44	; 0x2c
    d486:	e9dd 8a15 	ldrd	r8, sl, [sp, #84]	; 0x54
    d48a:	9f14      	ldr	r7, [sp, #80]	; 0x50
    d48c:	9103      	str	r1, [sp, #12]
    d48e:	4681      	mov	r9, r0
    d490:	9205      	str	r2, [sp, #20]
    d492:	461e      	mov	r6, r3
    d494:	f1b8 0f00 	cmp.w	r8, #0
    d498:	d05c      	beq.n	d554 <_wcsnrtombs_l+0xd4>
    d49a:	9b03      	ldr	r3, [sp, #12]
    d49c:	2b00      	cmp	r3, #0
    d49e:	d05e      	beq.n	d55e <_wcsnrtombs_l+0xde>
    d4a0:	9b05      	ldr	r3, [sp, #20]
    d4a2:	681d      	ldr	r5, [r3, #0]
    d4a4:	2f00      	cmp	r7, #0
    d4a6:	d06a      	beq.n	d57e <_wcsnrtombs_l+0xfe>
    d4a8:	1e74      	subs	r4, r6, #1
    d4aa:	b34e      	cbz	r6, d500 <_wcsnrtombs_l+0x80>
    d4ac:	9b03      	ldr	r3, [sp, #12]
    d4ae:	9304      	str	r3, [sp, #16]
    d4b0:	3d04      	subs	r5, #4
    d4b2:	2600      	movs	r6, #0
    d4b4:	9501      	str	r5, [sp, #4]
    d4b6:	e00b      	b.n	d4d0 <_wcsnrtombs_l+0x50>
    d4b8:	9b03      	ldr	r3, [sp, #12]
    d4ba:	bb2b      	cbnz	r3, d508 <_wcsnrtombs_l+0x88>
    d4bc:	9b01      	ldr	r3, [sp, #4]
    d4be:	681a      	ldr	r2, [r3, #0]
    d4c0:	2a00      	cmp	r2, #0
    d4c2:	d03a      	beq.n	d53a <_wcsnrtombs_l+0xba>
    d4c4:	45bc      	cmp	ip, r7
    d4c6:	d25c      	bcs.n	d582 <_wcsnrtombs_l+0x102>
    d4c8:	3c01      	subs	r4, #1
    d4ca:	1c63      	adds	r3, r4, #1
    d4cc:	4666      	mov	r6, ip
    d4ce:	d017      	beq.n	d500 <_wcsnrtombs_l+0x80>
    d4d0:	f8d8 3000 	ldr.w	r3, [r8]
    d4d4:	9302      	str	r3, [sp, #8]
    d4d6:	9b01      	ldr	r3, [sp, #4]
    d4d8:	f8da 50e0 	ldr.w	r5, [sl, #224]	; 0xe0
    d4dc:	f853 2f04 	ldr.w	r2, [r3, #4]!
    d4e0:	9301      	str	r3, [sp, #4]
    d4e2:	a907      	add	r1, sp, #28
    d4e4:	4643      	mov	r3, r8
    d4e6:	4648      	mov	r0, r9
    d4e8:	f8d8 b004 	ldr.w	fp, [r8, #4]
    d4ec:	47a8      	blx	r5
    d4ee:	1c42      	adds	r2, r0, #1
    d4f0:	d03a      	beq.n	d568 <_wcsnrtombs_l+0xe8>
    d4f2:	eb00 0c06 	add.w	ip, r0, r6
    d4f6:	45bc      	cmp	ip, r7
    d4f8:	d9de      	bls.n	d4b8 <_wcsnrtombs_l+0x38>
    d4fa:	9b02      	ldr	r3, [sp, #8]
    d4fc:	e9c8 3b00 	strd	r3, fp, [r8]
    d500:	4630      	mov	r0, r6
    d502:	b00b      	add	sp, #44	; 0x2c
    d504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d508:	2800      	cmp	r0, #0
    d50a:	dd0e      	ble.n	d52a <_wcsnrtombs_l+0xaa>
    d50c:	9b04      	ldr	r3, [sp, #16]
    d50e:	9d01      	ldr	r5, [sp, #4]
    d510:	4418      	add	r0, r3
    d512:	1e5a      	subs	r2, r3, #1
    d514:	a907      	add	r1, sp, #28
    d516:	f100 3eff 	add.w	lr, r0, #4294967295
    d51a:	f811 3b01 	ldrb.w	r3, [r1], #1
    d51e:	f802 3f01 	strb.w	r3, [r2, #1]!
    d522:	4572      	cmp	r2, lr
    d524:	d1f9      	bne.n	d51a <_wcsnrtombs_l+0x9a>
    d526:	9501      	str	r5, [sp, #4]
    d528:	9004      	str	r0, [sp, #16]
    d52a:	9b05      	ldr	r3, [sp, #20]
    d52c:	681a      	ldr	r2, [r3, #0]
    d52e:	3204      	adds	r2, #4
    d530:	601a      	str	r2, [r3, #0]
    d532:	9b01      	ldr	r3, [sp, #4]
    d534:	681a      	ldr	r2, [r3, #0]
    d536:	2a00      	cmp	r2, #0
    d538:	d1c4      	bne.n	d4c4 <_wcsnrtombs_l+0x44>
    d53a:	9b03      	ldr	r3, [sp, #12]
    d53c:	b10b      	cbz	r3, d542 <_wcsnrtombs_l+0xc2>
    d53e:	9b05      	ldr	r3, [sp, #20]
    d540:	601a      	str	r2, [r3, #0]
    d542:	f10c 36ff 	add.w	r6, ip, #4294967295
    d546:	2200      	movs	r2, #0
    d548:	4630      	mov	r0, r6
    d54a:	f8c8 2000 	str.w	r2, [r8]
    d54e:	b00b      	add	sp, #44	; 0x2c
    d550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d554:	9b03      	ldr	r3, [sp, #12]
    d556:	f500 7886 	add.w	r8, r0, #268	; 0x10c
    d55a:	2b00      	cmp	r3, #0
    d55c:	d1a0      	bne.n	d4a0 <_wcsnrtombs_l+0x20>
    d55e:	9b05      	ldr	r3, [sp, #20]
    d560:	f04f 37ff 	mov.w	r7, #4294967295
    d564:	681d      	ldr	r5, [r3, #0]
    d566:	e79f      	b.n	d4a8 <_wcsnrtombs_l+0x28>
    d568:	4606      	mov	r6, r0
    d56a:	218a      	movs	r1, #138	; 0x8a
    d56c:	2200      	movs	r2, #0
    d56e:	4630      	mov	r0, r6
    d570:	f8c9 1000 	str.w	r1, [r9]
    d574:	f8c8 2000 	str.w	r2, [r8]
    d578:	b00b      	add	sp, #44	; 0x2c
    d57a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d57e:	463e      	mov	r6, r7
    d580:	e7be      	b.n	d500 <_wcsnrtombs_l+0x80>
    d582:	4666      	mov	r6, ip
    d584:	e7bc      	b.n	d500 <_wcsnrtombs_l+0x80>
    d586:	bf00      	nop

0000d588 <_wcsnrtombs_r>:
    d588:	b510      	push	{r4, lr}
    d58a:	b084      	sub	sp, #16
    d58c:	4c05      	ldr	r4, [pc, #20]	; (d5a4 <_wcsnrtombs_r+0x1c>)
    d58e:	9806      	ldr	r0, [sp, #24]
    d590:	9000      	str	r0, [sp, #0]
    d592:	9807      	ldr	r0, [sp, #28]
    d594:	9001      	str	r0, [sp, #4]
    d596:	4804      	ldr	r0, [pc, #16]	; (d5a8 <_wcsnrtombs_r+0x20>)
    d598:	6800      	ldr	r0, [r0, #0]
    d59a:	9402      	str	r4, [sp, #8]
    d59c:	f7ff ff70 	bl	d480 <_wcsnrtombs_l>
    d5a0:	b004      	add	sp, #16
    d5a2:	bd10      	pop	{r4, pc}
    d5a4:	20007a38 	.word	0x20007a38
    d5a8:	20007fc0 	.word	0x20007fc0

0000d5ac <category>:
    d5ac:	4b15      	ldr	r3, [pc, #84]	; (d604 <category+0x58>)
    d5ae:	4298      	cmp	r0, r3
    d5b0:	d823      	bhi.n	d5fa <category+0x4e>
    d5b2:	b570      	push	{r4, r5, r6, lr}
    d5b4:	4e14      	ldr	r6, [pc, #80]	; (d608 <category+0x5c>)
    d5b6:	f04f 0e00 	mov.w	lr, #0
    d5ba:	f640 04db 	movw	r4, #2267	; 0x8db
    d5be:	e003      	b.n	d5c8 <category+0x1c>
    d5c0:	f102 0e01 	add.w	lr, r2, #1
    d5c4:	45a6      	cmp	lr, r4
    d5c6:	dc16      	bgt.n	d5f6 <category+0x4a>
    d5c8:	eb04 020e 	add.w	r2, r4, lr
    d5cc:	f022 0301 	bic.w	r3, r2, #1
    d5d0:	eb03 0362 	add.w	r3, r3, r2, asr #1
    d5d4:	eb06 0343 	add.w	r3, r6, r3, lsl #1
    d5d8:	1052      	asrs	r2, r2, #1
    d5da:	7859      	ldrb	r1, [r3, #1]
    d5dc:	885d      	ldrh	r5, [r3, #2]
    d5de:	f8b3 c004 	ldrh.w	ip, [r3, #4]
    d5e2:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
    d5e6:	448c      	add	ip, r1
    d5e8:	4560      	cmp	r0, ip
    d5ea:	d8e9      	bhi.n	d5c0 <category+0x14>
    d5ec:	4288      	cmp	r0, r1
    d5ee:	d206      	bcs.n	d5fe <category+0x52>
    d5f0:	1e54      	subs	r4, r2, #1
    d5f2:	45a6      	cmp	lr, r4
    d5f4:	dde8      	ble.n	d5c8 <category+0x1c>
    d5f6:	20ff      	movs	r0, #255	; 0xff
    d5f8:	bd70      	pop	{r4, r5, r6, pc}
    d5fa:	20ff      	movs	r0, #255	; 0xff
    d5fc:	4770      	bx	lr
    d5fe:	7818      	ldrb	r0, [r3, #0]
    d600:	bd70      	pop	{r4, r5, r6, pc}
    d602:	bf00      	nop
    d604:	000e01ef 	.word	0x000e01ef
    d608:	200023a4 	.word	0x200023a4

0000d60c <__smakebuf_r>:
    d60c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d610:	898b      	ldrh	r3, [r1, #12]
    d612:	460c      	mov	r4, r1
    d614:	0799      	lsls	r1, r3, #30
    d616:	b096      	sub	sp, #88	; 0x58
    d618:	d508      	bpl.n	d62c <__smakebuf_r+0x20>
    d61a:	f104 0343 	add.w	r3, r4, #67	; 0x43
    d61e:	2201      	movs	r2, #1
    d620:	e9c4 3204 	strd	r3, r2, [r4, #16]
    d624:	6023      	str	r3, [r4, #0]
    d626:	b016      	add	sp, #88	; 0x58
    d628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d62c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    d630:	2900      	cmp	r1, #0
    d632:	4606      	mov	r6, r0
    d634:	db25      	blt.n	d682 <__smakebuf_r+0x76>
    d636:	466a      	mov	r2, sp
    d638:	f000 f8ac 	bl	d794 <_fstat_r>
    d63c:	2800      	cmp	r0, #0
    d63e:	db1f      	blt.n	d680 <__smakebuf_r+0x74>
    d640:	9d01      	ldr	r5, [sp, #4]
    d642:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
    d646:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
    d64a:	fab5 f585 	clz	r5, r5
    d64e:	f44f 6880 	mov.w	r8, #1024	; 0x400
    d652:	096d      	lsrs	r5, r5, #5
    d654:	f44f 6700 	mov.w	r7, #2048	; 0x800
    d658:	4641      	mov	r1, r8
    d65a:	4630      	mov	r0, r6
    d65c:	f7f5 ff22 	bl	34a4 <_malloc_r>
    d660:	b1e0      	cbz	r0, d69c <__smakebuf_r+0x90>
    d662:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    d666:	f8c4 8014 	str.w	r8, [r4, #20]
    d66a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d66e:	6020      	str	r0, [r4, #0]
    d670:	6120      	str	r0, [r4, #16]
    d672:	81a3      	strh	r3, [r4, #12]
    d674:	bb35      	cbnz	r5, d6c4 <__smakebuf_r+0xb8>
    d676:	433b      	orrs	r3, r7
    d678:	81a3      	strh	r3, [r4, #12]
    d67a:	b016      	add	sp, #88	; 0x58
    d67c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d680:	89a3      	ldrh	r3, [r4, #12]
    d682:	f013 0580 	ands.w	r5, r3, #128	; 0x80
    d686:	d019      	beq.n	d6bc <__smakebuf_r+0xb0>
    d688:	f04f 0840 	mov.w	r8, #64	; 0x40
    d68c:	2500      	movs	r5, #0
    d68e:	4641      	mov	r1, r8
    d690:	4630      	mov	r0, r6
    d692:	462f      	mov	r7, r5
    d694:	f7f5 ff06 	bl	34a4 <_malloc_r>
    d698:	2800      	cmp	r0, #0
    d69a:	d1e2      	bne.n	d662 <__smakebuf_r+0x56>
    d69c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    d6a0:	059a      	lsls	r2, r3, #22
    d6a2:	d4c0      	bmi.n	d626 <__smakebuf_r+0x1a>
    d6a4:	f023 0303 	bic.w	r3, r3, #3
    d6a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
    d6ac:	f043 0302 	orr.w	r3, r3, #2
    d6b0:	2101      	movs	r1, #1
    d6b2:	e9c4 2104 	strd	r2, r1, [r4, #16]
    d6b6:	81a3      	strh	r3, [r4, #12]
    d6b8:	6022      	str	r2, [r4, #0]
    d6ba:	e7b4      	b.n	d626 <__smakebuf_r+0x1a>
    d6bc:	f44f 6880 	mov.w	r8, #1024	; 0x400
    d6c0:	462f      	mov	r7, r5
    d6c2:	e7c9      	b.n	d658 <__smakebuf_r+0x4c>
    d6c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    d6c8:	4630      	mov	r0, r6
    d6ca:	f000 f879 	bl	d7c0 <_isatty_r>
    d6ce:	b910      	cbnz	r0, d6d6 <__smakebuf_r+0xca>
    d6d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    d6d4:	e7cf      	b.n	d676 <__smakebuf_r+0x6a>
    d6d6:	89a3      	ldrh	r3, [r4, #12]
    d6d8:	f023 0303 	bic.w	r3, r3, #3
    d6dc:	f043 0301 	orr.w	r3, r3, #1
    d6e0:	b21b      	sxth	r3, r3
    d6e2:	e7c8      	b.n	d676 <__smakebuf_r+0x6a>

0000d6e4 <__swbuf_r>:
    d6e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d6e6:	460d      	mov	r5, r1
    d6e8:	4614      	mov	r4, r2
    d6ea:	4606      	mov	r6, r0
    d6ec:	b110      	cbz	r0, d6f4 <__swbuf_r+0x10>
    d6ee:	6b43      	ldr	r3, [r0, #52]	; 0x34
    d6f0:	2b00      	cmp	r3, #0
    d6f2:	d04c      	beq.n	d78e <__swbuf_r+0xaa>
    d6f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    d6f8:	69a3      	ldr	r3, [r4, #24]
    d6fa:	60a3      	str	r3, [r4, #8]
    d6fc:	0717      	lsls	r7, r2, #28
    d6fe:	b290      	uxth	r0, r2
    d700:	d51b      	bpl.n	d73a <__swbuf_r+0x56>
    d702:	6923      	ldr	r3, [r4, #16]
    d704:	b1cb      	cbz	r3, d73a <__swbuf_r+0x56>
    d706:	b2ed      	uxtb	r5, r5
    d708:	0481      	lsls	r1, r0, #18
    d70a:	462f      	mov	r7, r5
    d70c:	d522      	bpl.n	d754 <__swbuf_r+0x70>
    d70e:	6822      	ldr	r2, [r4, #0]
    d710:	6961      	ldr	r1, [r4, #20]
    d712:	1ad3      	subs	r3, r2, r3
    d714:	4299      	cmp	r1, r3
    d716:	dd29      	ble.n	d76c <__swbuf_r+0x88>
    d718:	3301      	adds	r3, #1
    d71a:	68a1      	ldr	r1, [r4, #8]
    d71c:	3901      	subs	r1, #1
    d71e:	60a1      	str	r1, [r4, #8]
    d720:	1c51      	adds	r1, r2, #1
    d722:	6021      	str	r1, [r4, #0]
    d724:	7015      	strb	r5, [r2, #0]
    d726:	6962      	ldr	r2, [r4, #20]
    d728:	429a      	cmp	r2, r3
    d72a:	d027      	beq.n	d77c <__swbuf_r+0x98>
    d72c:	89a3      	ldrh	r3, [r4, #12]
    d72e:	07db      	lsls	r3, r3, #31
    d730:	d501      	bpl.n	d736 <__swbuf_r+0x52>
    d732:	2d0a      	cmp	r5, #10
    d734:	d022      	beq.n	d77c <__swbuf_r+0x98>
    d736:	4638      	mov	r0, r7
    d738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d73a:	4621      	mov	r1, r4
    d73c:	4630      	mov	r0, r6
    d73e:	f7ff fdaf 	bl	d2a0 <__swsetup_r>
    d742:	bb08      	cbnz	r0, d788 <__swbuf_r+0xa4>
    d744:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    d748:	6923      	ldr	r3, [r4, #16]
    d74a:	b290      	uxth	r0, r2
    d74c:	b2ed      	uxtb	r5, r5
    d74e:	0481      	lsls	r1, r0, #18
    d750:	462f      	mov	r7, r5
    d752:	d4dc      	bmi.n	d70e <__swbuf_r+0x2a>
    d754:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    d758:	81a2      	strh	r2, [r4, #12]
    d75a:	6e62      	ldr	r2, [r4, #100]	; 0x64
    d75c:	6961      	ldr	r1, [r4, #20]
    d75e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
    d762:	6662      	str	r2, [r4, #100]	; 0x64
    d764:	6822      	ldr	r2, [r4, #0]
    d766:	1ad3      	subs	r3, r2, r3
    d768:	4299      	cmp	r1, r3
    d76a:	dcd5      	bgt.n	d718 <__swbuf_r+0x34>
    d76c:	4621      	mov	r1, r4
    d76e:	4630      	mov	r0, r6
    d770:	f7fc fe30 	bl	a3d4 <_fflush_r>
    d774:	b940      	cbnz	r0, d788 <__swbuf_r+0xa4>
    d776:	6822      	ldr	r2, [r4, #0]
    d778:	2301      	movs	r3, #1
    d77a:	e7ce      	b.n	d71a <__swbuf_r+0x36>
    d77c:	4621      	mov	r1, r4
    d77e:	4630      	mov	r0, r6
    d780:	f7fc fe28 	bl	a3d4 <_fflush_r>
    d784:	2800      	cmp	r0, #0
    d786:	d0d6      	beq.n	d736 <__swbuf_r+0x52>
    d788:	f04f 37ff 	mov.w	r7, #4294967295
    d78c:	e7d3      	b.n	d736 <__swbuf_r+0x52>
    d78e:	f7f7 fbb7 	bl	4f00 <__sinit>
    d792:	e7af      	b.n	d6f4 <__swbuf_r+0x10>

0000d794 <_fstat_r>:
    d794:	b570      	push	{r4, r5, r6, lr}
    d796:	460c      	mov	r4, r1
    d798:	4d08      	ldr	r5, [pc, #32]	; (d7bc <_fstat_r+0x28>)
    d79a:	4603      	mov	r3, r0
    d79c:	2600      	movs	r6, #0
    d79e:	4620      	mov	r0, r4
    d7a0:	4611      	mov	r1, r2
    d7a2:	461c      	mov	r4, r3
    d7a4:	602e      	str	r6, [r5, #0]
    d7a6:	f7f4 f9c1 	bl	1b2c <_fstat>
    d7aa:	1c43      	adds	r3, r0, #1
    d7ac:	d000      	beq.n	d7b0 <_fstat_r+0x1c>
    d7ae:	bd70      	pop	{r4, r5, r6, pc}
    d7b0:	682b      	ldr	r3, [r5, #0]
    d7b2:	2b00      	cmp	r3, #0
    d7b4:	d0fb      	beq.n	d7ae <_fstat_r+0x1a>
    d7b6:	6023      	str	r3, [r4, #0]
    d7b8:	bd70      	pop	{r4, r5, r6, pc}
    d7ba:	bf00      	nop
    d7bc:	20008c38 	.word	0x20008c38

0000d7c0 <_isatty_r>:
    d7c0:	b538      	push	{r3, r4, r5, lr}
    d7c2:	4d07      	ldr	r5, [pc, #28]	; (d7e0 <_isatty_r+0x20>)
    d7c4:	2200      	movs	r2, #0
    d7c6:	4604      	mov	r4, r0
    d7c8:	4608      	mov	r0, r1
    d7ca:	602a      	str	r2, [r5, #0]
    d7cc:	f7f4 f9b4 	bl	1b38 <_isatty>
    d7d0:	1c43      	adds	r3, r0, #1
    d7d2:	d000      	beq.n	d7d6 <_isatty_r+0x16>
    d7d4:	bd38      	pop	{r3, r4, r5, pc}
    d7d6:	682b      	ldr	r3, [r5, #0]
    d7d8:	2b00      	cmp	r3, #0
    d7da:	d0fb      	beq.n	d7d4 <_isatty_r+0x14>
    d7dc:	6023      	str	r3, [r4, #0]
    d7de:	bd38      	pop	{r3, r4, r5, pc}
    d7e0:	20008c38 	.word	0x20008c38

0000d7e4 <__aeabi_drsub>:
    d7e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    d7e8:	e002      	b.n	d7f0 <__adddf3>
    d7ea:	bf00      	nop

0000d7ec <__aeabi_dsub>:
    d7ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000d7f0 <__adddf3>:
    d7f0:	b530      	push	{r4, r5, lr}
    d7f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
    d7f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
    d7fa:	ea94 0f05 	teq	r4, r5
    d7fe:	bf08      	it	eq
    d800:	ea90 0f02 	teqeq	r0, r2
    d804:	bf1f      	itttt	ne
    d806:	ea54 0c00 	orrsne.w	ip, r4, r0
    d80a:	ea55 0c02 	orrsne.w	ip, r5, r2
    d80e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    d812:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    d816:	f000 80e2 	beq.w	d9de <__adddf3+0x1ee>
    d81a:	ea4f 5454 	mov.w	r4, r4, lsr #21
    d81e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    d822:	bfb8      	it	lt
    d824:	426d      	neglt	r5, r5
    d826:	dd0c      	ble.n	d842 <__adddf3+0x52>
    d828:	442c      	add	r4, r5
    d82a:	ea80 0202 	eor.w	r2, r0, r2
    d82e:	ea81 0303 	eor.w	r3, r1, r3
    d832:	ea82 0000 	eor.w	r0, r2, r0
    d836:	ea83 0101 	eor.w	r1, r3, r1
    d83a:	ea80 0202 	eor.w	r2, r0, r2
    d83e:	ea81 0303 	eor.w	r3, r1, r3
    d842:	2d36      	cmp	r5, #54	; 0x36
    d844:	bf88      	it	hi
    d846:	bd30      	pophi	{r4, r5, pc}
    d848:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    d84c:	ea4f 3101 	mov.w	r1, r1, lsl #12
    d850:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    d854:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    d858:	d002      	beq.n	d860 <__adddf3+0x70>
    d85a:	4240      	negs	r0, r0
    d85c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    d860:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    d864:	ea4f 3303 	mov.w	r3, r3, lsl #12
    d868:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    d86c:	d002      	beq.n	d874 <__adddf3+0x84>
    d86e:	4252      	negs	r2, r2
    d870:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    d874:	ea94 0f05 	teq	r4, r5
    d878:	f000 80a7 	beq.w	d9ca <__adddf3+0x1da>
    d87c:	f1a4 0401 	sub.w	r4, r4, #1
    d880:	f1d5 0e20 	rsbs	lr, r5, #32
    d884:	db0d      	blt.n	d8a2 <__adddf3+0xb2>
    d886:	fa02 fc0e 	lsl.w	ip, r2, lr
    d88a:	fa22 f205 	lsr.w	r2, r2, r5
    d88e:	1880      	adds	r0, r0, r2
    d890:	f141 0100 	adc.w	r1, r1, #0
    d894:	fa03 f20e 	lsl.w	r2, r3, lr
    d898:	1880      	adds	r0, r0, r2
    d89a:	fa43 f305 	asr.w	r3, r3, r5
    d89e:	4159      	adcs	r1, r3
    d8a0:	e00e      	b.n	d8c0 <__adddf3+0xd0>
    d8a2:	f1a5 0520 	sub.w	r5, r5, #32
    d8a6:	f10e 0e20 	add.w	lr, lr, #32
    d8aa:	2a01      	cmp	r2, #1
    d8ac:	fa03 fc0e 	lsl.w	ip, r3, lr
    d8b0:	bf28      	it	cs
    d8b2:	f04c 0c02 	orrcs.w	ip, ip, #2
    d8b6:	fa43 f305 	asr.w	r3, r3, r5
    d8ba:	18c0      	adds	r0, r0, r3
    d8bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    d8c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    d8c4:	d507      	bpl.n	d8d6 <__adddf3+0xe6>
    d8c6:	f04f 0e00 	mov.w	lr, #0
    d8ca:	f1dc 0c00 	rsbs	ip, ip, #0
    d8ce:	eb7e 0000 	sbcs.w	r0, lr, r0
    d8d2:	eb6e 0101 	sbc.w	r1, lr, r1
    d8d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    d8da:	d31b      	bcc.n	d914 <__adddf3+0x124>
    d8dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    d8e0:	d30c      	bcc.n	d8fc <__adddf3+0x10c>
    d8e2:	0849      	lsrs	r1, r1, #1
    d8e4:	ea5f 0030 	movs.w	r0, r0, rrx
    d8e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
    d8ec:	f104 0401 	add.w	r4, r4, #1
    d8f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
    d8f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    d8f8:	f080 809a 	bcs.w	da30 <__adddf3+0x240>
    d8fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    d900:	bf08      	it	eq
    d902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    d906:	f150 0000 	adcs.w	r0, r0, #0
    d90a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    d90e:	ea41 0105 	orr.w	r1, r1, r5
    d912:	bd30      	pop	{r4, r5, pc}
    d914:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    d918:	4140      	adcs	r0, r0
    d91a:	eb41 0101 	adc.w	r1, r1, r1
    d91e:	3c01      	subs	r4, #1
    d920:	bf28      	it	cs
    d922:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    d926:	d2e9      	bcs.n	d8fc <__adddf3+0x10c>
    d928:	f091 0f00 	teq	r1, #0
    d92c:	bf04      	itt	eq
    d92e:	4601      	moveq	r1, r0
    d930:	2000      	moveq	r0, #0
    d932:	fab1 f381 	clz	r3, r1
    d936:	bf08      	it	eq
    d938:	3320      	addeq	r3, #32
    d93a:	f1a3 030b 	sub.w	r3, r3, #11
    d93e:	f1b3 0220 	subs.w	r2, r3, #32
    d942:	da0c      	bge.n	d95e <__adddf3+0x16e>
    d944:	320c      	adds	r2, #12
    d946:	dd08      	ble.n	d95a <__adddf3+0x16a>
    d948:	f102 0c14 	add.w	ip, r2, #20
    d94c:	f1c2 020c 	rsb	r2, r2, #12
    d950:	fa01 f00c 	lsl.w	r0, r1, ip
    d954:	fa21 f102 	lsr.w	r1, r1, r2
    d958:	e00c      	b.n	d974 <__adddf3+0x184>
    d95a:	f102 0214 	add.w	r2, r2, #20
    d95e:	bfd8      	it	le
    d960:	f1c2 0c20 	rsble	ip, r2, #32
    d964:	fa01 f102 	lsl.w	r1, r1, r2
    d968:	fa20 fc0c 	lsr.w	ip, r0, ip
    d96c:	bfdc      	itt	le
    d96e:	ea41 010c 	orrle.w	r1, r1, ip
    d972:	4090      	lslle	r0, r2
    d974:	1ae4      	subs	r4, r4, r3
    d976:	bfa2      	ittt	ge
    d978:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    d97c:	4329      	orrge	r1, r5
    d97e:	bd30      	popge	{r4, r5, pc}
    d980:	ea6f 0404 	mvn.w	r4, r4
    d984:	3c1f      	subs	r4, #31
    d986:	da1c      	bge.n	d9c2 <__adddf3+0x1d2>
    d988:	340c      	adds	r4, #12
    d98a:	dc0e      	bgt.n	d9aa <__adddf3+0x1ba>
    d98c:	f104 0414 	add.w	r4, r4, #20
    d990:	f1c4 0220 	rsb	r2, r4, #32
    d994:	fa20 f004 	lsr.w	r0, r0, r4
    d998:	fa01 f302 	lsl.w	r3, r1, r2
    d99c:	ea40 0003 	orr.w	r0, r0, r3
    d9a0:	fa21 f304 	lsr.w	r3, r1, r4
    d9a4:	ea45 0103 	orr.w	r1, r5, r3
    d9a8:	bd30      	pop	{r4, r5, pc}
    d9aa:	f1c4 040c 	rsb	r4, r4, #12
    d9ae:	f1c4 0220 	rsb	r2, r4, #32
    d9b2:	fa20 f002 	lsr.w	r0, r0, r2
    d9b6:	fa01 f304 	lsl.w	r3, r1, r4
    d9ba:	ea40 0003 	orr.w	r0, r0, r3
    d9be:	4629      	mov	r1, r5
    d9c0:	bd30      	pop	{r4, r5, pc}
    d9c2:	fa21 f004 	lsr.w	r0, r1, r4
    d9c6:	4629      	mov	r1, r5
    d9c8:	bd30      	pop	{r4, r5, pc}
    d9ca:	f094 0f00 	teq	r4, #0
    d9ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    d9d2:	bf06      	itte	eq
    d9d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    d9d8:	3401      	addeq	r4, #1
    d9da:	3d01      	subne	r5, #1
    d9dc:	e74e      	b.n	d87c <__adddf3+0x8c>
    d9de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    d9e2:	bf18      	it	ne
    d9e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    d9e8:	d029      	beq.n	da3e <__adddf3+0x24e>
    d9ea:	ea94 0f05 	teq	r4, r5
    d9ee:	bf08      	it	eq
    d9f0:	ea90 0f02 	teqeq	r0, r2
    d9f4:	d005      	beq.n	da02 <__adddf3+0x212>
    d9f6:	ea54 0c00 	orrs.w	ip, r4, r0
    d9fa:	bf04      	itt	eq
    d9fc:	4619      	moveq	r1, r3
    d9fe:	4610      	moveq	r0, r2
    da00:	bd30      	pop	{r4, r5, pc}
    da02:	ea91 0f03 	teq	r1, r3
    da06:	bf1e      	ittt	ne
    da08:	2100      	movne	r1, #0
    da0a:	2000      	movne	r0, #0
    da0c:	bd30      	popne	{r4, r5, pc}
    da0e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    da12:	d105      	bne.n	da20 <__adddf3+0x230>
    da14:	0040      	lsls	r0, r0, #1
    da16:	4149      	adcs	r1, r1
    da18:	bf28      	it	cs
    da1a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    da1e:	bd30      	pop	{r4, r5, pc}
    da20:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    da24:	bf3c      	itt	cc
    da26:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    da2a:	bd30      	popcc	{r4, r5, pc}
    da2c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    da30:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    da34:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    da38:	f04f 0000 	mov.w	r0, #0
    da3c:	bd30      	pop	{r4, r5, pc}
    da3e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    da42:	bf1a      	itte	ne
    da44:	4619      	movne	r1, r3
    da46:	4610      	movne	r0, r2
    da48:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    da4c:	bf1c      	itt	ne
    da4e:	460b      	movne	r3, r1
    da50:	4602      	movne	r2, r0
    da52:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    da56:	bf06      	itte	eq
    da58:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    da5c:	ea91 0f03 	teqeq	r1, r3
    da60:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    da64:	bd30      	pop	{r4, r5, pc}
    da66:	bf00      	nop

0000da68 <__aeabi_ui2d>:
    da68:	f090 0f00 	teq	r0, #0
    da6c:	bf04      	itt	eq
    da6e:	2100      	moveq	r1, #0
    da70:	4770      	bxeq	lr
    da72:	b530      	push	{r4, r5, lr}
    da74:	f44f 6480 	mov.w	r4, #1024	; 0x400
    da78:	f104 0432 	add.w	r4, r4, #50	; 0x32
    da7c:	f04f 0500 	mov.w	r5, #0
    da80:	f04f 0100 	mov.w	r1, #0
    da84:	e750      	b.n	d928 <__adddf3+0x138>
    da86:	bf00      	nop

0000da88 <__aeabi_i2d>:
    da88:	f090 0f00 	teq	r0, #0
    da8c:	bf04      	itt	eq
    da8e:	2100      	moveq	r1, #0
    da90:	4770      	bxeq	lr
    da92:	b530      	push	{r4, r5, lr}
    da94:	f44f 6480 	mov.w	r4, #1024	; 0x400
    da98:	f104 0432 	add.w	r4, r4, #50	; 0x32
    da9c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    daa0:	bf48      	it	mi
    daa2:	4240      	negmi	r0, r0
    daa4:	f04f 0100 	mov.w	r1, #0
    daa8:	e73e      	b.n	d928 <__adddf3+0x138>
    daaa:	bf00      	nop

0000daac <__aeabi_f2d>:
    daac:	0042      	lsls	r2, r0, #1
    daae:	ea4f 01e2 	mov.w	r1, r2, asr #3
    dab2:	ea4f 0131 	mov.w	r1, r1, rrx
    dab6:	ea4f 7002 	mov.w	r0, r2, lsl #28
    daba:	bf1f      	itttt	ne
    dabc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    dac0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    dac4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    dac8:	4770      	bxne	lr
    daca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    dace:	bf08      	it	eq
    dad0:	4770      	bxeq	lr
    dad2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    dad6:	bf04      	itt	eq
    dad8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    dadc:	4770      	bxeq	lr
    dade:	b530      	push	{r4, r5, lr}
    dae0:	f44f 7460 	mov.w	r4, #896	; 0x380
    dae4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    dae8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    daec:	e71c      	b.n	d928 <__adddf3+0x138>
    daee:	bf00      	nop

0000daf0 <__aeabi_ul2d>:
    daf0:	ea50 0201 	orrs.w	r2, r0, r1
    daf4:	bf08      	it	eq
    daf6:	4770      	bxeq	lr
    daf8:	b530      	push	{r4, r5, lr}
    dafa:	f04f 0500 	mov.w	r5, #0
    dafe:	e00a      	b.n	db16 <__aeabi_l2d+0x16>

0000db00 <__aeabi_l2d>:
    db00:	ea50 0201 	orrs.w	r2, r0, r1
    db04:	bf08      	it	eq
    db06:	4770      	bxeq	lr
    db08:	b530      	push	{r4, r5, lr}
    db0a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    db0e:	d502      	bpl.n	db16 <__aeabi_l2d+0x16>
    db10:	4240      	negs	r0, r0
    db12:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    db16:	f44f 6480 	mov.w	r4, #1024	; 0x400
    db1a:	f104 0432 	add.w	r4, r4, #50	; 0x32
    db1e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    db22:	f43f aed8 	beq.w	d8d6 <__adddf3+0xe6>
    db26:	f04f 0203 	mov.w	r2, #3
    db2a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    db2e:	bf18      	it	ne
    db30:	3203      	addne	r2, #3
    db32:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    db36:	bf18      	it	ne
    db38:	3203      	addne	r2, #3
    db3a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    db3e:	f1c2 0320 	rsb	r3, r2, #32
    db42:	fa00 fc03 	lsl.w	ip, r0, r3
    db46:	fa20 f002 	lsr.w	r0, r0, r2
    db4a:	fa01 fe03 	lsl.w	lr, r1, r3
    db4e:	ea40 000e 	orr.w	r0, r0, lr
    db52:	fa21 f102 	lsr.w	r1, r1, r2
    db56:	4414      	add	r4, r2
    db58:	e6bd      	b.n	d8d6 <__adddf3+0xe6>
    db5a:	bf00      	nop

0000db5c <__aeabi_d2lz>:
    db5c:	b508      	push	{r3, lr}
    db5e:	4602      	mov	r2, r0
    db60:	460b      	mov	r3, r1
    db62:	ec43 2b17 	vmov	d7, r2, r3
    db66:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    db6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    db6e:	d403      	bmi.n	db78 <__aeabi_d2lz+0x1c>
    db70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    db74:	f000 b80c 	b.w	db90 <__aeabi_d2ulz>
    db78:	eeb1 7b47 	vneg.f64	d7, d7
    db7c:	ec51 0b17 	vmov	r0, r1, d7
    db80:	f000 f806 	bl	db90 <__aeabi_d2ulz>
    db84:	4240      	negs	r0, r0
    db86:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    db8a:	bd08      	pop	{r3, pc}
    db8c:	0000      	movs	r0, r0
	...

0000db90 <__aeabi_d2ulz>:
    db90:	ed9f 6b0b 	vldr	d6, [pc, #44]	; dbc0 <__aeabi_d2ulz+0x30>
    db94:	ec41 0b17 	vmov	d7, r0, r1
    db98:	ed9f 5b0b 	vldr	d5, [pc, #44]	; dbc8 <__aeabi_d2ulz+0x38>
    db9c:	ee27 6b06 	vmul.f64	d6, d7, d6
    dba0:	eebc 6bc6 	vcvt.u32.f64	s12, d6
    dba4:	eeb8 4b46 	vcvt.f64.u32	d4, s12
    dba8:	eea4 7b45 	vfms.f64	d7, d4, d5
    dbac:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    dbb0:	ee16 1a10 	vmov	r1, s12
    dbb4:	ee17 0a90 	vmov	r0, s15
    dbb8:	4770      	bx	lr
    dbba:	bf00      	nop
    dbbc:	f3af 8000 	nop.w
    dbc0:	00000000 	.word	0x00000000
    dbc4:	3df00000 	.word	0x3df00000
    dbc8:	00000000 	.word	0x00000000
    dbcc:	41f00000 	.word	0x41f00000

0000dbd0 <___init_veneer>:
    dbd0:	f85f f000 	ldr.w	pc, [pc]	; dbd4 <___init_veneer+0x4>
    dbd4:	60001e35 	.word	0x60001e35

0000dbd8 <___reboot_Teensyduino__veneer>:
    dbd8:	f85f f000 	ldr.w	pc, [pc]	; dbdc <___reboot_Teensyduino__veneer+0x4>
    dbdc:	60001d8d 	.word	0x60001d8d

Disassembly of section .fini:

0000dbe0 <_fini>:
    dbe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dbe2:	bf00      	nop
