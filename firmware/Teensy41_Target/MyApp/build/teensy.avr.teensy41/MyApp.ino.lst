
C:\Users\johnw\AppData\Local\arduino\sketches\327AA1E20F62E69E5802DB70EF4C5A3B/MyApp.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
	if (dest == src) return;
	do {
		*dest++ = *src++;
	} while (dest < dest_end);
#else
	asm volatile(
60001400:	4281      	cmp	r1, r0
60001402:	d005      	beq.n	60001410 <memory_copy+0x10>
60001404:	f851 3b04 	ldr.w	r3, [r1], #4
60001408:	f840 3b04 	str.w	r3, [r0], #4
6000140c:	4282      	cmp	r2, r0
6000140e:	d8f9      	bhi.n	60001404 <memory_copy+0x4>
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	"2:					\n"
	: [dest] "+r" (dest), [src] "+r" (src) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001410:	4770      	bx	lr
60001412:	bf00      	nop

60001414 <memory_clear.constprop.0>:
#if 0
	while (dest < dest_end) {
		*dest++ = 0;
	}
#else
	asm volatile(
60001414:	4a04      	ldr	r2, [pc, #16]	; (60001428 <memory_clear.constprop.0+0x14>)
60001416:	4905      	ldr	r1, [pc, #20]	; (6000142c <memory_clear.constprop.0+0x18>)
60001418:	f04f 0300 	mov.w	r3, #0
6000141c:	f842 3b04 	str.w	r3, [r2], #4
60001420:	4291      	cmp	r1, r2
60001422:	d8fb      	bhi.n	6000141c <memory_clear.constprop.0+0x8>
	"1:	str.w	r3, [%[dest]], #4	\n"
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	: [dest] "+r" (dest) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001424:	4770      	bx	lr
60001426:	bf00      	nop
60001428:	200086c0 	.word	0x200086c0
6000142c:	20008ee0 	.word	0x20008ee0

60001430 <ResetHandler2>:
{
60001430:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	__asm__ volatile("dsb":::"memory");
60001434:	f3bf 8f4f 	dsb	sy
	asm volatile("nop");
60001438:	bf00      	nop
	asm volatile("nop");
6000143a:	bf00      	nop
	asm volatile("nop");
6000143c:	bf00      	nop
	asm volatile("nop");
6000143e:	bf00      	nop
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
60001440:	f000 f942 	bl	600016c8 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001444:	4b68      	ldr	r3, [pc, #416]	; (600015e8 <ResetHandler2+0x1b8>)
60001446:	2208      	movs	r2, #8
60001448:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	asm volatile("nop");
6000144c:	bf00      	nop
	asm volatile("nop");
6000144e:	bf00      	nop
	asm volatile("nop");
60001450:	bf00      	nop
	asm volatile("nop");
60001452:	bf00      	nop
	asm volatile("nop");
60001454:	bf00      	nop
	asm volatile("nop");
60001456:	bf00      	nop
	asm volatile("nop");
60001458:	bf00      	nop
	asm volatile("nop");
6000145a:	bf00      	nop
	asm volatile("nop");
6000145c:	bf00      	nop
	asm volatile("nop");
6000145e:	bf00      	nop
	asm volatile("nop");
60001460:	bf00      	nop
	asm volatile("nop");
60001462:	bf00      	nop
	asm volatile("nop");
60001464:	bf00      	nop
	asm volatile("nop");
60001466:	bf00      	nop
	asm volatile("nop");
60001468:	bf00      	nop
	asm volatile("nop");
6000146a:	bf00      	nop
	memory_copy(&_stext, &_stextload, &_etext);
6000146c:	4a5f      	ldr	r2, [pc, #380]	; (600015ec <ResetHandler2+0x1bc>)
6000146e:	4960      	ldr	r1, [pc, #384]	; (600015f0 <ResetHandler2+0x1c0>)
60001470:	4860      	ldr	r0, [pc, #384]	; (600015f4 <ResetHandler2+0x1c4>)
60001472:	f7ff ffc5 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001476:	4a60      	ldr	r2, [pc, #384]	; (600015f8 <ResetHandler2+0x1c8>)
60001478:	4960      	ldr	r1, [pc, #384]	; (600015fc <ResetHandler2+0x1cc>)
6000147a:	4861      	ldr	r0, [pc, #388]	; (60001600 <ResetHandler2+0x1d0>)
6000147c:	f7ff ffc0 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
60001480:	4c60      	ldr	r4, [pc, #384]	; (60001604 <ResetHandler2+0x1d4>)
60001482:	f7ff ffc7 	bl	60001414 <memory_clear.constprop.0>
	SCB_CPACR = 0x00F00000;
60001486:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
6000148a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000148e:	2300      	movs	r3, #0
60001490:	4a5d      	ldr	r2, [pc, #372]	; (60001608 <ResetHandler2+0x1d8>)
	SCB_CPACR = 0x00F00000;
60001492:	f8c1 0d88 	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001496:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
6000149a:	3301      	adds	r3, #1
6000149c:	2bb0      	cmp	r3, #176	; 0xb0
6000149e:	d1fa      	bne.n	60001496 <ResetHandler2+0x66>
600014a0:	4b5a      	ldr	r3, [pc, #360]	; (6000160c <ResetHandler2+0x1dc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600014a2:	2180      	movs	r1, #128	; 0x80
600014a4:	4a5a      	ldr	r2, [pc, #360]	; (60001610 <ResetHandler2+0x1e0>)
600014a6:	f803 1b01 	strb.w	r1, [r3], #1
600014aa:	4293      	cmp	r3, r2
600014ac:	d1fb      	bne.n	600014a6 <ResetHandler2+0x76>
	SCB_VTOR = (uint32_t)_VectorsRam;
600014ae:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014b2:	4e4d      	ldr	r6, [pc, #308]	; (600015e8 <ResetHandler2+0x1b8>)
600014b4:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014b8:	f8df b184 	ldr.w	fp, [pc, #388]	; 60001640 <ResetHandler2+0x210>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014bc:	f8df a184 	ldr.w	sl, [pc, #388]	; 60001644 <ResetHandler2+0x214>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014c0:	f04f 31ff 	mov.w	r1, #4294967295
	SCB_VTOR = (uint32_t)_VectorsRam;
600014c4:	f8c5 4d08 	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
600014c8:	2700      	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014ca:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014ce:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014d2:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014d6:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014da:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014de:	f8df 8168 	ldr.w	r8, [pc, #360]	; 60001648 <ResetHandler2+0x218>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014e6:	4a4b      	ldr	r2, [pc, #300]	; (60001614 <ResetHandler2+0x1e4>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e8:	f8c5 3d24 	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ec:	f8d8 301c 	ldr.w	r3, [r8, #28]
600014f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014f8:	f8c8 301c 	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014fc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
60001500:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
60001504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001508:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
6000150c:	6691      	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
6000150e:	66d1      	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001510:	6711      	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001512:	6751      	str	r1, [r2, #116]	; 0x74
	configure_cache();
60001514:	f000 f8e0 	bl	600016d8 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
60001518:	4b3f      	ldr	r3, [pc, #252]	; (60001618 <ResetHandler2+0x1e8>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000151a:	4940      	ldr	r1, [pc, #256]	; (6000161c <ResetHandler2+0x1ec>)
	_VectorsRam[14] = pendablesrvreq_isr;
6000151c:	63a3      	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
6000151e:	4b40      	ldr	r3, [pc, #256]	; (60001620 <ResetHandler2+0x1f0>)
60001520:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001522:	2363      	movs	r3, #99	; 0x63
60001524:	616b      	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001526:	2303      	movs	r3, #3
	SYST_CVR = 0;
60001528:	61af      	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000152a:	612b      	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000152c:	4b3d      	ldr	r3, [pc, #244]	; (60001624 <ResetHandler2+0x1f4>)
6000152e:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001532:	f8d5 3dfc 	ldr.w	r3, [r5, #3580]	; 0xdfc
60001536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000153a:	f8c5 3dfc 	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000153e:	4b3a      	ldr	r3, [pc, #232]	; (60001628 <ResetHandler2+0x1f8>)
60001540:	681a      	ldr	r2, [r3, #0]
60001542:	f042 0201 	orr.w	r2, r2, #1
60001546:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001548:	685b      	ldr	r3, [r3, #4]
6000154a:	600b      	str	r3, [r1, #0]
	usb_pll_start();	
6000154c:	f000 fb0e 	bl	60001b6c <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001550:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001554:	4835      	ldr	r0, [pc, #212]	; (6000162c <ResetHandler2+0x1fc>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001556:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000155a:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000155e:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001562:	f000 fc6d 	bl	60001e40 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001566:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
6000156a:	4b31      	ldr	r3, [pc, #196]	; (60001630 <ResetHandler2+0x200>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000156c:	4a31      	ldr	r2, [pc, #196]	; (60001634 <ResetHandler2+0x204>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000156e:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
60001572:	f8c8 106c 	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001576:	601f      	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001578:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000157c:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001580:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001584:	f8c3 7138 	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001588:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000158a:	07db      	lsls	r3, r3, #31
6000158c:	d408      	bmi.n	600015a0 <ResetHandler2+0x170>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000158e:	f642 6315 	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
60001592:	4929      	ldr	r1, [pc, #164]	; (60001638 <ResetHandler2+0x208>)
60001594:	6551      	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001596:	6513      	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001598:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000159a:	f043 0301 	orr.w	r3, r3, #1
6000159e:	6393      	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600015a0:	4a24      	ldr	r2, [pc, #144]	; (60001634 <ResetHandler2+0x204>)
600015a2:	4c26      	ldr	r4, [pc, #152]	; (6000163c <ResetHandler2+0x20c>)
600015a4:	6893      	ldr	r3, [r2, #8]
600015a6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
600015aa:	6093      	str	r3, [r2, #8]
	configure_external_ram();
600015ac:	f000 f91c 	bl	600017e8 <configure_external_ram>
	analog_init();
600015b0:	f000 f860 	bl	60001674 <analog_init>
	pwm_init();
600015b4:	f000 fc5c 	bl	60001e70 <__pwm_init_veneer>
	tempmon_init();
600015b8:	f000 fb06 	bl	60001bc8 <tempmon_init>
	startup_middle_hook();
600015bc:	f000 f886 	bl	600016cc <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
600015c0:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015c2:	2b13      	cmp	r3, #19
600015c4:	d9fc      	bls.n	600015c0 <ResetHandler2+0x190>
	usb_init();
600015c6:	f000 fb97 	bl	60001cf8 <usb_init>
600015ca:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015cc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015d0:	d3fb      	bcc.n	600015ca <ResetHandler2+0x19a>
	startup_debug_reset();
600015d2:	f000 f87f 	bl	600016d4 <startup_debug_reset>
	startup_late_hook();
600015d6:	f000 f87b 	bl	600016d0 <startup_default_late_hook>
	__libc_init_array();
600015da:	f000 fc3d 	bl	60001e58 <____libc_init_array_veneer>
	main();
600015de:	f000 fc3f 	bl	60001e60 <__main_veneer>
	while (1) asm("WFI");
600015e2:	bf30      	wfi
600015e4:	e7fd      	b.n	600015e2 <ResetHandler2+0x1b2>
600015e6:	bf00      	nop
600015e8:	400d8000 	.word	0x400d8000
600015ec:	0000ea38 	.word	0x0000ea38
600015f0:	60001f8c 	.word	0x60001f8c
600015f4:	00000000 	.word	0x00000000
600015f8:	200086c0 	.word	0x200086c0
600015fc:	600109c8 	.word	0x600109c8
60001600:	20000000 	.word	0x20000000
60001604:	20008400 	.word	0x20008400
60001608:	00002485 	.word	0x00002485
6000160c:	e000e400 	.word	0xe000e400
60001610:	e000e4a0 	.word	0xe000e4a0
60001614:	400ac000 	.word	0x400ac000
60001618:	000038a5 	.word	0x000038a5
6000161c:	20008e68 	.word	0x20008e68
60001620:	000038a9 	.word	0x000038a9
60001624:	20200000 	.word	0x20200000
60001628:	e0001000 	.word	0xe0001000
6000162c:	23c34600 	.word	0x23c34600
60001630:	40084000 	.word	0x40084000
60001634:	400d4000 	.word	0x400d4000
60001638:	56c00000 	.word	0x56c00000
6000163c:	20008e6c 	.word	0x20008e6c
60001640:	2018101b 	.word	0x2018101b
60001644:	13110d0c 	.word	0x13110d0c
60001648:	400fc000 	.word	0x400fc000

6000164c <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000164c:	4b05      	ldr	r3, [pc, #20]	; (60001664 <ResetHandler+0x18>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000164e:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001652:	4a05      	ldr	r2, [pc, #20]	; (60001668 <ResetHandler+0x1c>)
	IOMUXC_GPR_GPR16 = 0x00200007;
60001654:	4805      	ldr	r0, [pc, #20]	; (6000166c <ResetHandler+0x20>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001656:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001658:	6418      	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
6000165a:	4a05      	ldr	r2, [pc, #20]	; (60001670 <ResetHandler+0x24>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000165c:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
6000165e:	4695      	mov	sp, r2
	ResetHandler2();
60001660:	f7ff fee6 	bl	60001430 <ResetHandler2>
60001664:	400ac000 	.word	0x400ac000
60001668:	aaaaaaaf 	.word	0xaaaaaaaf
6000166c:	00200007 	.word	0x00200007
60001670:	20070000 	.word	0x20070000

60001674 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001674:	4b10      	ldr	r3, [pc, #64]	; (600016b8 <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001676:	20a0      	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001678:	4a10      	ldr	r2, [pc, #64]	; (600016bc <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000167a:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
6000167c:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
{
60001680:	b410      	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001682:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001684:	f240 6437 	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001688:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
6000168a:	f441 7140 	orr.w	r1, r1, #768	; 0x300
6000168e:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001690:	6454      	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001692:	6490      	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
60001694:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001696:	061b      	lsls	r3, r3, #24
60001698:	d4fc      	bmi.n	60001694 <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
6000169a:	4a09      	ldr	r2, [pc, #36]	; (600016c0 <analog_init+0x4c>)
6000169c:	f240 6137 	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600016a0:	23a0      	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600016a2:	6451      	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600016a4:	6493      	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
600016a6:	6c93      	ldr	r3, [r2, #72]	; 0x48
600016a8:	f013 0380 	ands.w	r3, r3, #128	; 0x80
600016ac:	d1fb      	bne.n	600016a6 <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
600016ae:	4a05      	ldr	r2, [pc, #20]	; (600016c4 <analog_init+0x50>)
600016b0:	7013      	strb	r3, [r2, #0]
}
600016b2:	f85d 4b04 	ldr.w	r4, [sp], #4
600016b6:	4770      	bx	lr
600016b8:	400fc000 	.word	0x400fc000
600016bc:	400c4000 	.word	0x400c4000
600016c0:	400c8000 	.word	0x400c8000
600016c4:	20008e9b 	.word	0x20008e9b

600016c8 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
600016c8:	4770      	bx	lr
600016ca:	bf00      	nop

600016cc <startup_default_middle_hook>:
600016cc:	4770      	bx	lr
600016ce:	bf00      	nop

600016d0 <startup_default_late_hook>:
600016d0:	4770      	bx	lr
600016d2:	bf00      	nop

600016d4 <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
600016d4:	bf00      	nop
600016d6:	4770      	bx	lr

600016d8 <configure_cache>:
{
600016d8:	b410      	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
600016da:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
600016de:	2100      	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600016e0:	2410      	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600016e2:	4831      	ldr	r0, [pc, #196]	; (600017a8 <configure_cache+0xd0>)
	SCB_MPU_CTRL = 0; // turn off MPU
600016e4:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600016e8:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600016ec:	2411      	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600016ee:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
600016f2:	482e      	ldr	r0, [pc, #184]	; (600017ac <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600016f4:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600016f8:	2412      	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
600016fa:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600016fe:	482c      	ldr	r0, [pc, #176]	; (600017b0 <configure_cache+0xd8>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001700:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001704:	4a2b      	ldr	r2, [pc, #172]	; (600017b4 <configure_cache+0xdc>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001706:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
6000170a:	4c2b      	ldr	r4, [pc, #172]	; (600017b8 <configure_cache+0xe0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
6000170c:	f042 0215 	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001710:	482a      	ldr	r0, [pc, #168]	; (600017bc <configure_cache+0xe4>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001712:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001716:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
6000171a:	4c29      	ldr	r4, [pc, #164]	; (600017c0 <configure_cache+0xe8>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
6000171c:	4829      	ldr	r0, [pc, #164]	; (600017c4 <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
6000171e:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001722:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001726:	4c28      	ldr	r4, [pc, #160]	; (600017c8 <configure_cache+0xf0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001728:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
6000172c:	4827      	ldr	r0, [pc, #156]	; (600017cc <configure_cache+0xf4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
6000172e:	4a28      	ldr	r2, [pc, #160]	; (600017d0 <configure_cache+0xf8>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001730:	f8c3 4da0 	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001734:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001738:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
6000173c:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001740:	4c24      	ldr	r4, [pc, #144]	; (600017d4 <configure_cache+0xfc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001742:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001744:	4824      	ldr	r0, [pc, #144]	; (600017d8 <configure_cache+0x100>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001746:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
6000174a:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
6000174e:	4a23      	ldr	r2, [pc, #140]	; (600017dc <configure_cache+0x104>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001750:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001754:	4c22      	ldr	r4, [pc, #136]	; (600017e0 <configure_cache+0x108>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001756:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
6000175a:	f102 6240 	add.w	r2, r2, #201326592	; 0xc000000
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000175e:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
60001762:	4820      	ldr	r0, [pc, #128]	; (600017e4 <configure_cache+0x10c>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001764:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
60001768:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
6000176a:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
6000176e:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	asm("nop"); // allow a few cycles for bus writes before enable MPU
60001772:	bf00      	nop
	asm("nop");
60001774:	bf00      	nop
	asm("nop");
60001776:	bf00      	nop
	asm("nop");
60001778:	bf00      	nop
	asm("nop");
6000177a:	bf00      	nop
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
6000177c:	2201      	movs	r2, #1
6000177e:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
60001782:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001786:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
6000178a:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
6000178e:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001792:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001796:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
}
6000179a:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000179e:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
600017a2:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
600017a6:	4770      	bx	lr
600017a8:	1000003f 	.word	0x1000003f
600017ac:	07080025 	.word	0x07080025
600017b0:	00100009 	.word	0x00100009
600017b4:	20008ee0 	.word	0x20008ee0
600017b8:	00200013 	.word	0x00200013
600017bc:	07020021 	.word	0x07020021
600017c0:	20000014 	.word	0x20000014
600017c4:	13080025 	.word	0x13080025
600017c8:	10000009 	.word	0x10000009
600017cc:	20200016 	.word	0x20200016
600017d0:	130b0027 	.word	0x130b0027
600017d4:	40000017 	.word	0x40000017
600017d8:	60000018 	.word	0x60000018
600017dc:	070b002f 	.word	0x070b002f
600017e0:	70000019 	.word	0x70000019
600017e4:	8000001a 	.word	0x8000001a

600017e8 <configure_external_ram>:
{
600017e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600017ea:	4bb8      	ldr	r3, [pc, #736]	; (60001acc <configure_external_ram+0x2e4>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
600017ec:	2218      	movs	r2, #24
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600017ee:	4eb8      	ldr	r6, [pc, #736]	; (60001ad0 <configure_external_ram+0x2e8>)
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600017f0:	2001      	movs	r0, #1
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
600017f2:	4fb8      	ldr	r7, [pc, #736]	; (60001ad4 <configure_external_ram+0x2ec>)
{
600017f4:	b083      	sub	sp, #12
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600017f6:	f8c3 625c 	str.w	r6, [r3, #604]	; 0x25c
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600017fa:	49b7      	ldr	r1, [pc, #732]	; (60001ad8 <configure_external_ram+0x2f0>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
600017fc:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001800:	4db6      	ldr	r5, [pc, #728]	; (60001adc <configure_external_ram+0x2f4>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001802:	f8c3 6264 	str.w	r6, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60001806:	f5a6 4630 	sub.w	r6, r6, #45056	; 0xb000
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
6000180a:	4cb5      	ldr	r4, [pc, #724]	; (60001ae0 <configure_external_ram+0x2f8>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
6000180c:	f8c3 6268 	str.w	r6, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001810:	f8c3 526c 	str.w	r5, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001814:	f8c3 5270 	str.w	r5, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001818:	f8c3 5274 	str.w	r5, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
6000181c:	f8c3 5278 	str.w	r5, [r3, #632]	; 0x278
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001820:	f248 750c 	movw	r5, #34572	; 0x870c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001824:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
60001826:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
60001828:	675a      	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
6000182a:	679a      	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
6000182c:	67da      	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
6000182e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
60001832:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
60001836:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
6000183a:	f8c1 032c 	str.w	r0, [r1, #812]	; 0x32c
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
6000183e:	4aa9      	ldr	r2, [pc, #676]	; (60001ae4 <configure_external_ram+0x2fc>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
60001840:	f8c1 0330 	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
60001844:	f8c1 0334 	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
60001848:	f8c1 0338 	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
6000184c:	f8c1 033c 	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
60001850:	f8c1 0350 	str.w	r0, [r1, #848]	; 0x350
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001854:	69a1      	ldr	r1, [r4, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001856:	4ba4      	ldr	r3, [pc, #656]	; (60001ae8 <configure_external_ram+0x300>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001858:	400a      	ands	r2, r1
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
6000185a:	48a4      	ldr	r0, [pc, #656]	; (60001aec <configure_external_ram+0x304>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000185c:	49a4      	ldr	r1, [pc, #656]	; (60001af0 <configure_external_ram+0x308>)
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
6000185e:	4313      	orrs	r3, r2
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001860:	4aa4      	ldr	r2, [pc, #656]	; (60001af4 <configure_external_ram+0x30c>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001862:	61a3      	str	r3, [r4, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60001864:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
60001868:	f043 030c 	orr.w	r3, r3, #12
6000186c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001870:	f04f 34ff 	mov.w	r4, #4294967295
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001874:	6803      	ldr	r3, [r0, #0]
60001876:	f043 0302 	orr.w	r3, r3, #2
6000187a:	6003      	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
6000187c:	6803      	ldr	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
6000187e:	402b      	ands	r3, r5
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001880:	f44f 5500 	mov.w	r5, #8192	; 0x2000
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001884:	431a      	orrs	r2, r3
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001886:	4b9c      	ldr	r3, [pc, #624]	; (60001af8 <configure_external_ram+0x310>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001888:	6002      	str	r2, [r0, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
6000188a:	6044      	str	r4, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000188c:	688a      	ldr	r2, [r1, #8]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000188e:	4c9b      	ldr	r4, [pc, #620]	; (60001afc <configure_external_ram+0x314>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001890:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001892:	4a9b      	ldr	r2, [pc, #620]	; (60001b00 <configure_external_ram+0x318>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001894:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001898:	6083      	str	r3, [r0, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
6000189a:	68c3      	ldr	r3, [r0, #12]
6000189c:	f023 0378 	bic.w	r3, r3, #120	; 0x78
600018a0:	60c3      	str	r3, [r0, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600018a2:	6a03      	ldr	r3, [r0, #32]
600018a4:	4013      	ands	r3, r2
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
600018a6:	4323      	orrs	r3, r4
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600018a8:	6203      	str	r3, [r0, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600018aa:	6a03      	ldr	r3, [r0, #32]
600018ac:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF2CR0 = mask;
600018ae:	4a95      	ldr	r2, [pc, #596]	; (60001b04 <configure_external_ram+0x31c>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
600018b0:	4323      	orrs	r3, r4
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
600018b2:	4c95      	ldr	r4, [pc, #596]	; (60001b08 <configure_external_ram+0x320>)
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600018b4:	6243      	str	r3, [r0, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
600018b6:	6282      	str	r2, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
600018b8:	62c2      	str	r2, [r0, #44]	; 0x2c
	FLEXSPI2_INTEN = 0;
600018ba:	2200      	movs	r2, #0
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
600018bc:	f8d1 30b8 	ldr.w	r3, [r1, #184]	; 0xb8
600018c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
600018c4:	f043 0301 	orr.w	r3, r3, #1
600018c8:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
600018cc:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600018d0:	498e      	ldr	r1, [pc, #568]	; (60001b0c <configure_external_ram+0x324>)
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
600018d2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
600018d6:	f043 0301 	orr.w	r3, r3, #1
600018da:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600018de:	f240 6305 	movw	r3, #1541	; 0x605
	FLEXSPI2_INTEN = 0;
600018e2:	6102      	str	r2, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
600018e4:	6605      	str	r5, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
600018e6:	6704      	str	r4, [r0, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600018e8:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
600018ec:	6645      	str	r5, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
600018ee:	6744      	str	r4, [r0, #116]	; 0x74
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600018f0:	2402      	movs	r4, #2
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600018f2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600018f6:	6803      	ldr	r3, [r0, #0]
600018f8:	f023 0302 	bic.w	r3, r3, #2
600018fc:	6003      	str	r3, [r0, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600018fe:	6181      	str	r1, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001900:	4b83      	ldr	r3, [pc, #524]	; (60001b10 <configure_external_ram+0x328>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001902:	4984      	ldr	r1, [pc, #528]	; (60001b14 <configure_external_ram+0x32c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001904:	61c4      	str	r4, [r0, #28]
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001906:	f843 2b04 	str.w	r2, [r3], #4
6000190a:	428b      	cmp	r3, r1
6000190c:	d1fb      	bne.n	60001906 <configure_external_ram+0x11e>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
6000190e:	4a77      	ldr	r2, [pc, #476]	; (60001aec <configure_external_ram+0x304>)
60001910:	6813      	ldr	r3, [r2, #0]
60001912:	f043 0301 	orr.w	r3, r3, #1
60001916:	6013      	str	r3, [r2, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
60001918:	6813      	ldr	r3, [r2, #0]
6000191a:	f013 0301 	ands.w	r3, r3, #1
6000191e:	d1fb      	bne.n	60001918 <configure_external_ram+0x130>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001920:	487a      	ldr	r0, [pc, #488]	; (60001b0c <configure_external_ram+0x324>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001922:	2102      	movs	r1, #2
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001924:	f240 64f5 	movw	r4, #1781	; 0x6f5
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001928:	6190      	str	r0, [r2, #24]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
6000192a:	f240 4099 	movw	r0, #1177	; 0x499
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
6000192e:	61d1      	str	r1, [r2, #28]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60001930:	f240 4166 	movw	r1, #1126	; 0x466
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001934:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001938:	f242 4401 	movw	r4, #9217	; 0x2401
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
6000193c:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60001940:	4975      	ldr	r1, [pc, #468]	; (60001b18 <configure_external_ram+0x330>)
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60001942:	f8c2 0220 	str.w	r0, [r2, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60001946:	f8c2 1230 	str.w	r1, [r2, #560]	; 0x230
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
6000194a:	f240 4135 	movw	r1, #1077	; 0x435
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
6000194e:	4873      	ldr	r0, [pc, #460]	; (60001b1c <configure_external_ram+0x334>)
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001950:	f8c2 4234 	str.w	r4, [r2, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001954:	f8c2 1240 	str.w	r1, [r2, #576]	; 0x240
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001958:	4c71      	ldr	r4, [pc, #452]	; (60001b20 <configure_external_ram+0x338>)
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
6000195a:	f8c2 0250 	str.w	r0, [r2, #592]	; 0x250
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
6000195e:	f242 2001 	movw	r0, #8705	; 0x2201
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001962:	4970      	ldr	r1, [pc, #448]	; (60001b24 <configure_external_ram+0x33c>)
60001964:	f8c2 1254 	str.w	r1, [r2, #596]	; 0x254
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001968:	2101      	movs	r1, #1
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
6000196a:	f8c2 4260 	str.w	r4, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
6000196e:	f8c2 0264 	str.w	r0, [r2, #612]	; 0x264
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001972:	485e      	ldr	r0, [pc, #376]	; (60001aec <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
60001974:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001978:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000197c:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001980:	6943      	ldr	r3, [r0, #20]
60001982:	07da      	lsls	r2, r3, #31
60001984:	d5fc      	bpl.n	60001980 <configure_external_ram+0x198>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001986:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001988:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000198a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000198e:	4957      	ldr	r1, [pc, #348]	; (60001aec <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001990:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
60001992:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001996:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000199a:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000199e:	694b      	ldr	r3, [r1, #20]
600019a0:	07db      	lsls	r3, r3, #31
600019a2:	d5fc      	bpl.n	6000199e <configure_external_ram+0x1b6>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019a4:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600019a6:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019a8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019ac:	4a4f      	ldr	r2, [pc, #316]	; (60001aec <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019ae:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
600019b0:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019b4:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019b8:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019bc:	6953      	ldr	r3, [r2, #20]
600019be:	07df      	lsls	r7, r3, #31
600019c0:	d5fc      	bpl.n	600019bc <configure_external_ram+0x1d4>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019c2:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600019c4:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600019c6:	4858      	ldr	r0, [pc, #352]	; (60001b28 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019c8:	4948      	ldr	r1, [pc, #288]	; (60001aec <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019ca:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
600019cc:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600019d0:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019d4:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019d8:	694b      	ldr	r3, [r1, #20]
600019da:	07de      	lsls	r6, r3, #31
600019dc:	d5fc      	bpl.n	600019d8 <configure_external_ram+0x1f0>
	uint32_t id = FLEXSPI2_RFDR0;
600019de:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
	if (flexspi2_psram_id(0) == 0x5D0D) {
600019e2:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600019e6:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
600019e8:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600019ea:	6148      	str	r0, [r1, #20]
	if (flexspi2_psram_id(0) == 0x5D0D) {
600019ec:	4293      	cmp	r3, r2
600019ee:	d165      	bne.n	60001abc <configure_external_ram+0x2d4>
	FLEXSPI2_IPCR0 = addr;
600019f0:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019f2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019f6:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019f8:	483c      	ldr	r0, [pc, #240]	; (60001aec <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
600019fa:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019fe:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a02:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a06:	6943      	ldr	r3, [r0, #20]
60001a08:	07dd      	lsls	r5, r3, #31
60001a0a:	d5fc      	bpl.n	60001a06 <configure_external_ram+0x21e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a0c:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001a0e:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a12:	2100      	movs	r1, #0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a14:	4a35      	ldr	r2, [pc, #212]	; (60001aec <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a16:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
60001a18:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a1c:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a20:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a24:	6953      	ldr	r3, [r2, #20]
60001a26:	07dc      	lsls	r4, r3, #31
60001a28:	d5fc      	bpl.n	60001a24 <configure_external_ram+0x23c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a2a:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001a2c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a30:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a34:	492d      	ldr	r1, [pc, #180]	; (60001aec <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a36:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001a38:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a3c:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a40:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a44:	694b      	ldr	r3, [r1, #20]
60001a46:	07d8      	lsls	r0, r3, #31
60001a48:	d5fc      	bpl.n	60001a44 <configure_external_ram+0x25c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a4a:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001a4c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a50:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a54:	4a25      	ldr	r2, [pc, #148]	; (60001aec <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a56:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60001a58:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a5c:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a60:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a64:	6953      	ldr	r3, [r2, #20]
60001a66:	07d9      	lsls	r1, r3, #31
60001a68:	d5fc      	bpl.n	60001a64 <configure_external_ram+0x27c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a6a:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001a6c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001a70:	482d      	ldr	r0, [pc, #180]	; (60001b28 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a72:	491e      	ldr	r1, [pc, #120]	; (60001aec <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a74:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001a76:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001a7a:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a7e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a82:	694b      	ldr	r3, [r1, #20]
60001a84:	07da      	lsls	r2, r3, #31
60001a86:	d5fc      	bpl.n	60001a82 <configure_external_ram+0x29a>
	uint32_t id = FLEXSPI2_RFDR0;
60001a88:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001a8c:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001a90:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60001a92:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001a94:	6148      	str	r0, [r1, #20]
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001a96:	4293      	cmp	r3, r2
60001a98:	d050      	beq.n	60001b3c <configure_external_ram+0x354>
60001a9a:	2508      	movs	r5, #8
60001a9c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
			external_psram_size * 0x100000 -
60001aa0:	4922      	ldr	r1, [pc, #136]	; (60001b2c <configure_external_ram+0x344>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001aa2:	2000      	movs	r0, #0
			external_psram_size * 0x100000 -
60001aa4:	4b22      	ldr	r3, [pc, #136]	; (60001b30 <configure_external_ram+0x348>)
			external_psram_size = 16;
60001aa6:	4a23      	ldr	r2, [pc, #140]	; (60001b34 <configure_external_ram+0x34c>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001aa8:	9000      	str	r0, [sp, #0]
			external_psram_size = 16;
60001aaa:	7015      	strb	r5, [r2, #0]
			external_psram_size * 0x100000 -
60001aac:	1a5a      	subs	r2, r3, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001aae:	2301      	movs	r3, #1
60001ab0:	4821      	ldr	r0, [pc, #132]	; (60001b38 <configure_external_ram+0x350>)
60001ab2:	4422      	add	r2, r4
60001ab4:	f000 f9d8 	bl	60001e68 <__sm_set_pool_veneer>
}
60001ab8:	b003      	add	sp, #12
60001aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001abc:	4b1e      	ldr	r3, [pc, #120]	; (60001b38 <configure_external_ram+0x350>)
60001abe:	2200      	movs	r2, #0
60001ac0:	e9c3 2200 	strd	r2, r2, [r3]
60001ac4:	e9c3 2202 	strd	r2, r2, [r3, #8]
}
60001ac8:	b003      	add	sp, #12
60001aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
60001acc:	401f8000 	.word	0x401f8000
60001ad0:	0001b0f9 	.word	0x0001b0f9
60001ad4:	000110f9 	.word	0x000110f9
60001ad8:	401f8400 	.word	0x401f8400
60001adc:	000170f9 	.word	0x000170f9
60001ae0:	400fc000 	.word	0x400fc000
60001ae4:	1ffffcff 	.word	0x1ffffcff
60001ae8:	a0000300 	.word	0xa0000300
60001aec:	402a4000 	.word	0x402a4000
60001af0:	402a8000 	.word	0x402a8000
60001af4:	ffff0012 	.word	0xffff0012
60001af8:	00f737ff 	.word	0x00f737ff
60001afc:	80000040 	.word	0x80000040
60001b00:	7cf0ff00 	.word	0x7cf0ff00
60001b04:	830f00ff 	.word	0x830f00ff
60001b08:	00020063 	.word	0x00020063
60001b0c:	5af05af0 	.word	0x5af05af0
60001b10:	402a4200 	.word	0x402a4200
60001b14:	402a4300 	.word	0x402a4300
60001b18:	3018049f 	.word	0x3018049f
60001b1c:	0a1806eb 	.word	0x0a1806eb
60001b20:	0a180638 	.word	0x0a180638
60001b24:	26013206 	.word	0x26013206
60001b28:	00030004 	.word	0x00030004
60001b2c:	70000000 	.word	0x70000000
60001b30:	70000000 	.word	0x70000000
60001b34:	20008e9c 	.word	0x20008e9c
60001b38:	20008de8 	.word	0x20008de8
	FLEXSPI2_IPCR0 = addr;
60001b3c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b40:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b44:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b46:	4808      	ldr	r0, [pc, #32]	; (60001b68 <configure_external_ram+0x380>)
	FLEXSPI2_IPCR0 = addr;
60001b48:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b4c:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b50:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b54:	6943      	ldr	r3, [r0, #20]
60001b56:	07db      	lsls	r3, r3, #31
60001b58:	d5fc      	bpl.n	60001b54 <configure_external_ram+0x36c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b5a:	2301      	movs	r3, #1
60001b5c:	2510      	movs	r5, #16
60001b5e:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
60001b62:	6143      	str	r3, [r0, #20]
			external_psram_size = 16;
60001b64:	e79c      	b.n	60001aa0 <configure_external_ram+0x2b8>
60001b66:	bf00      	nop
60001b68:	402a4000 	.word	0x402a4000

60001b6c <usb_pll_start>:
{
60001b6c:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001b6e:	4a15      	ldr	r2, [pc, #84]	; (60001bc4 <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001b70:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001b72:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001b76:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001b7a:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001b7e:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001b82:	f243 0042 	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001b86:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001b88:	f013 0f02 	tst.w	r3, #2
60001b8c:	d10e      	bne.n	60001bac <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001b8e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
60001b92:	d00f      	beq.n	60001bb4 <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001b94:	f413 5f80 	tst.w	r3, #4096	; 0x1000
60001b98:	d00e      	beq.n	60001bb8 <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001b9a:	2b00      	cmp	r3, #0
60001b9c:	daf3      	bge.n	60001b86 <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001b9e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
60001ba2:	d10b      	bne.n	60001bbc <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001ba4:	065b      	lsls	r3, r3, #25
60001ba6:	d50b      	bpl.n	60001bc0 <usb_pll_start+0x54>
}
60001ba8:	bcf0      	pop	{r4, r5, r6, r7}
60001baa:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001bac:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001bae:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001bb0:	6190      	str	r0, [r2, #24]
			continue;
60001bb2:	e7e8      	b.n	60001b86 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001bb4:	6155      	str	r5, [r2, #20]
			continue;
60001bb6:	e7e6      	b.n	60001b86 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001bb8:	6156      	str	r6, [r2, #20]
			continue;
60001bba:	e7e4      	b.n	60001b86 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001bbc:	6191      	str	r1, [r2, #24]
			continue;
60001bbe:	e7e2      	b.n	60001b86 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001bc0:	6157      	str	r7, [r2, #20]
			continue;
60001bc2:	e7e0      	b.n	60001b86 <usb_pll_start+0x1a>
60001bc4:	400d8000 	.word	0x400d8000

60001bc8 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001bc8:	4a3f      	ldr	r2, [pc, #252]	; (60001cc8 <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001bca:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001bcc:	493f      	ldr	r1, [pc, #252]	; (60001ccc <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001bce:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001bd2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001bd6:	f04f 0c00 	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bda:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 60001cd0 <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001bde:	f023 0301 	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001be2:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 60001cd4 <tempmon_init+0x10c>
{
60001be6:	b430      	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001be8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001bec:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60001bf0:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001bf4:	4d38      	ldr	r5, [pc, #224]	; (60001cd8 <tempmon_init+0x110>)
60001bf6:	b2cb      	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001bf8:	4c38      	ldr	r4, [pc, #224]	; (60001cdc <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001bfa:	4839      	ldr	r0, [pc, #228]	; (60001ce0 <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001bfc:	602b      	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001bfe:	ee07 3a90 	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001c02:	0d0b      	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001c04:	f3c1 210b 	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001c08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001c0c:	ee06 3a90 	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001c10:	ee07 1a10 	vmov	s14, r1
60001c14:	4b33      	ldr	r3, [pc, #204]	; (60001ce4 <tempmon_init+0x11c>)
60001c16:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001c1a:	6021      	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001c1c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c20:	4931      	ldr	r1, [pc, #196]	; (60001ce8 <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c22:	ee37 6ac6 	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c26:	ee37 5ac5 	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001c2a:	ee76 6ac7 	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001c2e:	ee77 7ae5 	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c32:	ee26 6a26 	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001c36:	edc3 6a00 	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c3a:	ee25 5a26 	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c3e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c42:	ee67 4aa6 	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001c46:	edc0 7a00 	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c4a:	eec6 5a27 	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001c4e:	4827      	ldr	r0, [pc, #156]	; (60001cec <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c50:	ee85 6a27 	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c54:	eec4 6aa7 	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c58:	ee75 5a87 	vadd.f32	s11, s11, s14
60001c5c:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c60:	ee36 6a07 	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c64:	ee15 4a90 	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c68:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c6c:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c70:	ee76 7a87 	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c74:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c78:	ee16 3a10 	vmov	r3, s12
60001c7c:	f8d2 4190 	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c84:	ea01 4103 	and.w	r1, r1, r3, lsl #16
60001c88:	4321      	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c8a:	ee17 3a90 	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c8e:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001c92:	f3c3 030b 	ubfx	r3, r3, #0, #12
60001c96:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
60001c9a:	430b      	orrs	r3, r1
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001c9c:	4914      	ldr	r1, [pc, #80]	; (60001cf0 <tempmon_init+0x128>)
60001c9e:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001ca2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
60001ca6:	f043 0302 	orr.w	r3, r3, #2
60001caa:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
60001cae:	4b11      	ldr	r3, [pc, #68]	; (60001cf4 <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001cb0:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
60001cb4:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001cb8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001cbc:	2201      	movs	r2, #1
}
60001cbe:	bc30      	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001cc0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
60001cc4:	4770      	bx	lr
60001cc6:	bf00      	nop
60001cc8:	400d8100 	.word	0x400d8100
60001ccc:	401f4400 	.word	0x401f4400
60001cd0:	42aa0000 	.word	0x42aa0000
60001cd4:	42b40000 	.word	0x42b40000
60001cd8:	20008e58 	.word	0x20008e58
60001cdc:	20008e54 	.word	0x20008e54
60001ce0:	20008e5c 	.word	0x20008e5c
60001ce4:	20008e60 	.word	0x20008e60
60001ce8:	0fff0000 	.word	0x0fff0000
60001cec:	e000e400 	.word	0xe000e400
60001cf0:	20008400 	.word	0x20008400
60001cf4:	0000266d 	.word	0x0000266d

60001cf8 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001cf8:	4b31      	ldr	r3, [pc, #196]	; (60001dc0 <usb_init+0xc8>)
60001cfa:	f640 7261 	movw	r2, #3937	; 0xf61
{
60001cfe:	b510      	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001d00:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001d04:	f240 4404 	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
60001d08:	f000 f8b6 	bl	60001e78 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001d0c:	4a2d      	ldr	r2, [pc, #180]	; (60001dc4 <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
60001d0e:	492e      	ldr	r1, [pc, #184]	; (60001dc8 <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001d10:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001d14:	482d      	ldr	r0, [pc, #180]	; (60001dcc <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001d16:	f043 0303 	orr.w	r3, r3, #3
60001d1a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001d1e:	4b2c      	ldr	r3, [pc, #176]	; (60001dd0 <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
60001d20:	f8c1 4160 	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001d24:	6802      	ldr	r2, [r0, #0]
60001d26:	421a      	tst	r2, r3
60001d28:	d103      	bne.n	60001d32 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
60001d2a:	f8d1 31a8 	ldr.w	r3, [r1, #424]	; 0x1a8
60001d2e:	079a      	lsls	r2, r3, #30
60001d30:	d01b      	beq.n	60001d6a <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001d32:	4a25      	ldr	r2, [pc, #148]	; (60001dc8 <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001d34:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
60001d38:	4b24      	ldr	r3, [pc, #144]	; (60001dcc <usb_init+0xd4>)
60001d3a:	6359      	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001d3c:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001d40:	f043 0302 	orr.w	r3, r3, #2
60001d44:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001d48:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001d4c:	079b      	lsls	r3, r3, #30
60001d4e:	d4fb      	bmi.n	60001d48 <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001d50:	f44f 3000 	mov.w	r0, #131072	; 0x20000
60001d54:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001d58:	4b1c      	ldr	r3, [pc, #112]	; (60001dcc <usb_init+0xd4>)
60001d5a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001d5e:	f8c1 028c 	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001d62:	2019      	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001d64:	639a      	str	r2, [r3, #56]	; 0x38
		delay(25);
60001d66:	f000 f873 	bl	60001e50 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001d6a:	4a18      	ldr	r2, [pc, #96]	; (60001dcc <usb_init+0xd4>)
60001d6c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001d70:	4c15      	ldr	r4, [pc, #84]	; (60001dc8 <usb_init+0xd0>)
	USBPHY1_PWD = 0;
60001d72:	2100      	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001d74:	6390      	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001d76:	200a      	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d78:	4b16      	ldr	r3, [pc, #88]	; (60001dd4 <usb_init+0xdc>)
	USBPHY1_PWD = 0;
60001d7a:	6011      	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d7c:	f44f 7220 	mov.w	r2, #640	; 0x280
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001d80:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d84:	4618      	mov	r0, r3
60001d86:	f000 f85f 	bl	60001e48 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
60001d8a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d8e:	4603      	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001d90:	f44f 0081 	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001d94:	f240 1143 	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001d98:	6018      	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001d9a:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
60001d9e:	641a      	str	r2, [r3, #64]	; 0x40
60001da0:	4b0d      	ldr	r3, [pc, #52]	; (60001dd8 <usb_init+0xe0>)
60001da2:	4a0e      	ldr	r2, [pc, #56]	; (60001ddc <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001da4:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
60001da8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001dac:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
60001db0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001db4:	2301      	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001db6:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
60001dba:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
60001dbe:	bd10      	pop	{r4, pc}
60001dc0:	400d8000 	.word	0x400d8000
60001dc4:	400fc000 	.word	0x400fc000
60001dc8:	402e0000 	.word	0x402e0000
60001dcc:	400d9000 	.word	0x400d9000
60001dd0:	001e1c00 	.word	0x001e1c00
60001dd4:	20000000 	.word	0x20000000
60001dd8:	20008400 	.word	0x20008400
60001ddc:	00002855 	.word	0x00002855

60001de0 <_reboot_Teensyduino_>:


FLASHMEM __attribute__((noinline)) void _reboot_Teensyduino_(void)
{
60001de0:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60001de2:	4b0e      	ldr	r3, [pc, #56]	; (60001e1c <_reboot_Teensyduino_+0x3c>)
60001de4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
60001de6:	079b      	lsls	r3, r3, #30
60001de8:	d400      	bmi.n	60001dec <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
60001dea:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60001dec:	b672      	cpsid	i
		USB1_USBCMD = 0;
60001dee:	4b0c      	ldr	r3, [pc, #48]	; (60001e20 <_reboot_Teensyduino_+0x40>)
60001df0:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
60001df2:	4a0c      	ldr	r2, [pc, #48]	; (60001e24 <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
60001df4:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001df8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001dfc:	490a      	ldr	r1, [pc, #40]	; (60001e28 <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001dfe:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001e02:	6411      	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001e04:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001e06:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001e0a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
60001e0e:	4807      	ldr	r0, [pc, #28]	; (60001e2c <_reboot_Teensyduino_+0x4c>)
60001e10:	4a07      	ldr	r2, [pc, #28]	; (60001e30 <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001e12:	69db      	ldr	r3, [r3, #28]
		*p = 0xEB120000;
60001e14:	6002      	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001e16:	689b      	ldr	r3, [r3, #8]
60001e18:	4798      	blx	r3
	}
	__builtin_unreachable();
60001e1a:	bf00      	nop
60001e1c:	401f4400 	.word	0x401f4400
60001e20:	402e0000 	.word	0x402e0000
60001e24:	400ac000 	.word	0x400ac000
60001e28:	00200003 	.word	0x00200003
60001e2c:	20208000 	.word	0x20208000
60001e30:	eb120000 	.word	0xeb120000

60001e34 <_init>:
60001e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60001e36:	bf00      	nop
60001e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
60001e3a:	bc08      	pop	{r3}
60001e3c:	469e      	mov	lr, r3
60001e3e:	4770      	bx	lr

60001e40 <__set_arm_clock_veneer>:
60001e40:	f85f f000 	ldr.w	pc, [pc]	; 60001e44 <__set_arm_clock_veneer+0x4>
60001e44:	000038c9 	.word	0x000038c9

60001e48 <__memset_veneer>:
60001e48:	f85f f000 	ldr.w	pc, [pc]	; 60001e4c <__memset_veneer+0x4>
60001e4c:	00005e19 	.word	0x00005e19

60001e50 <__delay_veneer>:
60001e50:	f85f f000 	ldr.w	pc, [pc]	; 60001e54 <__delay_veneer+0x4>
60001e54:	00001ddd 	.word	0x00001ddd

60001e58 <____libc_init_array_veneer>:
60001e58:	f85f f000 	ldr.w	pc, [pc]	; 60001e5c <____libc_init_array_veneer+0x4>
60001e5c:	0000615d 	.word	0x0000615d

60001e60 <__main_veneer>:
60001e60:	f85f f000 	ldr.w	pc, [pc]	; 60001e64 <__main_veneer+0x4>
60001e64:	0000216d 	.word	0x0000216d

60001e68 <__sm_set_pool_veneer>:
60001e68:	f85f f000 	ldr.w	pc, [pc]	; 60001e6c <__sm_set_pool_veneer+0x4>
60001e6c:	00003c29 	.word	0x00003c29

60001e70 <__pwm_init_veneer>:
60001e70:	f85f f000 	ldr.w	pc, [pc]	; 60001e74 <__pwm_init_veneer+0x4>
60001e74:	00002391 	.word	0x00002391

60001e78 <__usb_init_serialnumber_veneer>:
60001e78:	f85f f000 	ldr.w	pc, [pc]	; 60001e7c <__usb_init_serialnumber_veneer+0x4>
60001e7c:	00002fc5 	.word	0x00002fc5

60001e80 <__frame_dummy_init_array_entry>:
60001e80:	000000e5                                ....

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <flash_sector_not_erased>:
{
  int error = 0;
  uint32_t address = start;
  while (address < (start + size) && error == 0) { 
    if ((address & (FLASH_SECTOR_SIZE - 1)) == 0) {
      if (flash_sector_not_erased( address )) {
      20:	f420 607f 	bic.w	r0, r0, #4080	; 0xff0
      24:	f020 000f 	bic.w	r0, r0, #15
        #elif defined(KINETISK) || defined(KINETISL)
          error = flash_erase_sector( address, 0 );
	#endif
      }
    }
    address += FLASH_SECTOR_SIZE;
      28:	f500 5280 	add.w	r2, r0, #4096	; 0x1000
          eepromemu_flash_erase_sector( (void*)address );
      2c:	6803      	ldr	r3, [r0, #0]
      2e:	3004      	adds	r0, #4
  while (address < (start + size) && error == 0) { 
      30:	3301      	adds	r3, #1
      32:	d103      	bne.n	3c <_teensy_model_identifier+0x17>
  }
  return( error );
}
      34:	4290      	cmp	r0, r2
      36:	d1f9      	bne.n	2c <_teensy_model_identifier+0x7>
	SNVS_LPSRTCMR = t >> 17;
	// start the SRTC
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
	// start the RTC and sync it to the SRTC
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
      38:	2000      	movs	r0, #0
      3a:	4770      	bx	lr
      3c:	2001      	movs	r0, #1
      3e:	4770      	bx	lr

00000040 <flash_move>:
}
      40:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
      44:	4606      	mov	r6, r0
      46:	460d      	mov	r5, r1
		return 0;
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
      48:	4690      	mov	r8, r2
      4a:	2400      	movs	r4, #0
      4c:	4544      	cmp	r4, r8
      4e:	d214      	bcs.n	7a <flash_move+0x3a>
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
}
      50:	19a7      	adds	r7, r4, r6
      52:	f3c7 030b 	ubfx	r3, r7, #0, #12
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      56:	b933      	cbnz	r3, 66 <flash_move+0x26>
      58:	4638      	mov	r0, r7
      5a:	f7ff ffe1 	bl	20 <flash_sector_not_erased>
}
      5e:	b110      	cbz	r0, 66 <flash_move+0x26>
      60:	4638      	mov	r0, r7
      62:	f002 f827 	bl	20b4 <eepromemu_flash_erase_sector>
      66:	2204      	movs	r2, #4
      68:	5963      	ldr	r3, [r4, r5]
      6a:	4638      	mov	r0, r7
    offset += FLASH_WRITE_SIZE;
      6c:	3404      	adds	r4, #4
      eepromemu_flash_write( (void*)addr, &value, 4 );
      6e:	eb0d 0102 	add.w	r1, sp, r2
      uint32_t value = *(uint32_t *)(src + offset);     
      72:	9301      	str	r3, [sp, #4]
      eepromemu_flash_write( (void*)addr, &value, 4 );
      74:	f001 ffa8 	bl	1fc8 <eepromemu_flash_write>
    offset += FLASH_WRITE_SIZE;
      78:	e7e8      	b.n	4c <flash_move+0xc>
  if (IN_FLASH(src)) {
      7a:	f105 4520 	add.w	r5, r5, #2684354560	; 0xa0000000
      7e:	f5b5 0f00 	cmp.w	r5, #8388608	; 0x800000
      82:	d208      	bcs.n	96 <flash_move+0x56>
    while (offset < (FLASH_SIZE - FLASH_RESERVE) && error == 0) {
      84:	4d0c      	ldr	r5, [pc, #48]	; (b8 <flash_move+0x78>)
      86:	e004      	b.n	92 <flash_move+0x52>
      addr = dst + offset;
      88:	19a1      	adds	r1, r4, r6
      if ((addr & (FLASH_SECTOR_SIZE - 1)) == 0) {
      8a:	f3c1 030b 	ubfx	r3, r1, #0, #12
      8e:	b143      	cbz	r3, a2 <flash_move+0x62>
      offset += FLASH_WRITE_SIZE;
      90:	3404      	adds	r4, #4
    while (offset < (FLASH_SIZE - FLASH_RESERVE) && error == 0) {
      92:	42ac      	cmp	r4, r5
      94:	d3f8      	bcc.n	88 <flash_move+0x48>
  REBOOT;
      96:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
      9a:	4a08      	ldr	r2, [pc, #32]	; (bc <flash_move+0x7c>)
      9c:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
      a0:	e008      	b.n	b4 <flash_move+0x74>
        if (flash_sector_not_erased( addr )) {
      a2:	4608      	mov	r0, r1
      a4:	f7ff ffbc 	bl	20 <flash_sector_not_erased>
      a8:	2800      	cmp	r0, #0
      aa:	d0f1      	beq.n	90 <flash_move+0x50>
            eepromemu_flash_erase_sector( (void*)addr );
      ac:	4608      	mov	r0, r1
      ae:	f002 f801 	bl	20b4 <eepromemu_flash_erase_sector>
      b2:	e7ed      	b.n	90 <flash_move+0x50>
  for (;;) {}
      b4:	e7fe      	b.n	b4 <flash_move+0x74>
      b6:	bf00      	nop
      b8:	007fc000 	.word	0x007fc000
      bc:	05fa0004 	.word	0x05fa0004

000000c0 <register_tm_clones>:
void HardwareSerialIMXRT::setRX(uint8_t pin)
{
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
	if (pin != hardware->rx_pins[rx_pin_index_].pin) {
		for (uint8_t rx_pin_new_index = 0; rx_pin_new_index < cnt_rx_pins; rx_pin_new_index++) {
			if (pin == hardware->rx_pins[rx_pin_new_index].pin) {
      c0:	4805      	ldr	r0, [pc, #20]	; (d8 <register_tm_clones+0x18>)
      c2:	4b06      	ldr	r3, [pc, #24]	; (dc <register_tm_clones+0x1c>)
      c4:	1a1b      	subs	r3, r3, r0
      c6:	0fd9      	lsrs	r1, r3, #31
      c8:	eb01 01a3 	add.w	r1, r1, r3, asr #2
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
	p->SM[submodule].VAL1 = newdiv - 1;
	p->SM[submodule].VAL0 = (p->SM[submodule].VAL0 * newdiv) / olddiv;
	p->SM[submodule].VAL3 = (p->SM[submodule].VAL3 * newdiv) / olddiv;
	p->SM[submodule].VAL5 = (p->SM[submodule].VAL5 * newdiv) / olddiv;
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
      cc:	1049      	asrs	r1, r1, #1
      ce:	d002      	beq.n	d6 <register_tm_clones+0x16>
}
      d0:	4b03      	ldr	r3, [pc, #12]	; (e0 <register_tm_clones+0x20>)
	while (newdiv > 65535 && prescale < 7) {
      d2:	b103      	cbz	r3, d6 <register_tm_clones+0x16>
      d4:	4718      	bx	r3
      d6:	4770      	bx	lr
      d8:	200086c0 	.word	0x200086c0
		char *writeTo = buffer;
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			unsigned int n = foundAt - readFrom;
			memcpy(writeTo, readFrom, n);
			writeTo += n;
			memcpy(writeTo, replace.buffer, replace.len);
      dc:	200086c0 	.word	0x200086c0
			writeTo += replace.len;
      e0:	00000000 	.word	0x00000000

000000e4 <frame_dummy>:
			readFrom = foundAt + find.len;
			len += diff;
      e4:	b508      	push	{r3, lr}
			writeTo += replace.len;
      e6:	4b05      	ldr	r3, [pc, #20]	; (fc <frame_dummy+0x18>)
			readFrom = foundAt + find.len;
      e8:	b11b      	cbz	r3, f2 <frame_dummy+0xe>
			len += diff;
      ea:	4905      	ldr	r1, [pc, #20]	; (100 <frame_dummy+0x1c>)
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
      ec:	4805      	ldr	r0, [pc, #20]	; (104 <frame_dummy+0x20>)
      ee:	f3af 8000 	nop.w
      f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			memcpy(writeTo, readFrom, n);
      f6:	f7ff bfe3 	b.w	c0 <register_tm_clones>
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
      fa:	bf00      	nop
      fc:	00000000 	.word	0x00000000
		}
		strcpy(writeTo, readFrom);
     100:	20008e04 	.word	0x20008e04
     104:	6001a000 	.word	0x6001a000

00000108 <usb_serial_class::available()>:
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
	// Returns the number of bytes which have been received from your PC and
	// can be fetched using Serial.read() or Serial.readBytes().
        virtual int available() { return usb_serial_available(); }
     108:	f003 ba56 	b.w	35b8 <usb_serial_available>

0000010c <usb_serial_class::read()>:
	// Reads the next received byte, or returns -1 if nothing has been received
	// from your PC.
        virtual int read() { return usb_serial_getchar(); }
     10c:	f003 ba98 	b.w	3640 <usb_serial_getchar>

00000110 <hex_info_reset(hex_info_t*, char*)>:
	if (newbuffer) {
     110:	2300      	movs	r3, #0
     112:	f04f 32ff 	mov.w	r2, #4294967295
		capacity = maxStrLen;
     116:	e9c0 1300 	strd	r1, r3, [r0]
		return 1;
     11a:	e9c0 3302 	strd	r3, r3, [r0, #8]
void eeprom_write_byte(uint8_t *addr_ptr, uint8_t data)
{
	uint32_t addr = (uint32_t)addr_ptr;
	uint32_t sector, offset, index, i;
	uint16_t *p, *end;
	uint8_t olddata=0xFF;
     11e:	e9c0 3204 	strd	r3, r2, [r0, #16]
     122:	e9c0 3306 	strd	r3, r3, [r0, #24]
     126:	6203      	str	r3, [r0, #32]
     128:	4770      	bx	lr
     12a:	bf00      	nop

0000012c <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)>:
     12c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     130:	2400      	movs	r4, #0
     132:	b084      	sub	sp, #16
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
	mask = p->mask;
     134:	601c      	str	r4, [r3, #0]
	if (pinmode & mask) {
     136:	f890 c000 	ldrb.w	ip, [r0]
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     13a:	f1bc 0f3a 	cmp.w	ip, #58	; 0x3a
     13e:	d111      	bne.n	164 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0x38>
     140:	4605      	mov	r5, r0
     142:	461f      	mov	r7, r3
     144:	4688      	mov	r8, r1
     146:	4616      	mov	r6, r2
     148:	f006 fa1a 	bl	6580 <strlen>
     14c:	280a      	cmp	r0, #10
     14e:	d803      	bhi.n	158 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0x2c>
     150:	4620      	mov	r0, r4
     152:	b004      	add	sp, #16
     154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     158:	aa01      	add	r2, sp, #4
     15a:	4929      	ldr	r1, [pc, #164]	; (200 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0xd4>)
			remainder -= n; 
		}
		count += write(buf, count);
	}
	return count;
}
     15c:	1c68      	adds	r0, r5, #1
     15e:	f005 fccd 	bl	5afc <sscanf>
     162:	b918      	cbnz	r0, 16c <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0x40>
  out->printf("calling flash_move() to load new firmware...\n");
  out->flush();

  flash_move(FLASH_BASE_ADDR, buffer_addr, hex.max - hex.min);
  REBOOT; // should not return
}
     164:	2000      	movs	r0, #0
      out->printf("abort - invalid hex code %u\n", hex.code);
     166:	b004      	add	sp, #16
     168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     16c:	4628      	mov	r0, r5
     16e:	f006 fa07 	bl	6580 <strlen>
}
     172:	9b01      	ldr	r3, [sp, #4]
     174:	005b      	lsls	r3, r3, #1
        out->printf("abort - max address %08lX too large\n", (unsigned long)hex.max);
     176:	330b      	adds	r3, #11
     178:	4298      	cmp	r0, r3
     17a:	d3f3      	bcc.n	164 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0x38>
     17c:	4632      	mov	r2, r6
     17e:	4921      	ldr	r1, [pc, #132]	; (204 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0xd8>)
}
     180:	1ce8      	adds	r0, r5, #3
     182:	f005 fcbb 	bl	5afc <sscanf>
    out->printf("abort - new code missing target ID %s\n", FLASH_ID);
     186:	2800      	cmp	r0, #0
     188:	d0ec      	beq.n	164 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0x38>
}
     18a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
     18c:	1de8      	adds	r0, r5, #7
     18e:	491c      	ldr	r1, [pc, #112]	; (200 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0xd4>)
    out->printf("abort - new code missing target ID %s\n", FLASH_ID);
     190:	f005 fcb4 	bl	5afc <sscanf>
     194:	2800      	cmp	r0, #0
     196:	d0e5      	beq.n	164 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0x38>
     198:	9a0a      	ldr	r2, [sp, #40]	; 0x28
     19a:	3509      	adds	r5, #9
     19c:	9901      	ldr	r1, [sp, #4]
     19e:	7814      	ldrb	r4, [r2, #0]
     1a0:	6833      	ldr	r3, [r6, #0]
     1a2:	fa54 f481 	uxtab	r4, r4, r1
     1a6:	4e16      	ldr	r6, [pc, #88]	; (200 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0xd4>)
     1a8:	fa54 f483 	uxtab	r4, r4, r3
     1ac:	f3c3 2307 	ubfx	r3, r3, #8, #8
     1b0:	441c      	add	r4, r3
     1b2:	683b      	ldr	r3, [r7, #0]
     1b4:	e012      	b.n	1dc <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0xb0>
     1b6:	4631      	mov	r1, r6
     1b8:	3502      	adds	r5, #2
     1ba:	f005 fc9f 	bl	5afc <sscanf>
     1be:	2800      	cmp	r0, #0
     1c0:	d0d0      	beq.n	164 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0x38>
     1c2:	683b      	ldr	r3, [r7, #0]
     1c4:	9a03      	ldr	r2, [sp, #12]
     1c6:	f808 2003 	strb.w	r2, [r8, r3]
     1ca:	683b      	ldr	r3, [r7, #0]
     1cc:	f818 2003 	ldrb.w	r2, [r8, r3]
    (*num)++;
     1d0:	3301      	adds	r3, #1
    if (*num >= 256) return 0;
     1d2:	2bff      	cmp	r3, #255	; 0xff
    sum += (unsigned)(bytes[*num] & 255);
     1d4:	4414      	add	r4, r2
    (*num)++;
     1d6:	603b      	str	r3, [r7, #0]
    if (*num >= 256) return 0;
     1d8:	d8c4      	bhi.n	164 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0x38>
  while (*num != len) {
     1da:	9901      	ldr	r1, [sp, #4]
     1dc:	428b      	cmp	r3, r1
    if (!sscanf(ptr, "%02x", &temp)) return 0;
     1de:	4628      	mov	r0, r5
     1e0:	aa03      	add	r2, sp, #12
  while (*num != len) {
     1e2:	d1e8      	bne.n	1b6 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0x8a>
  if (!sscanf(ptr, "%02x", &cksum)) return 0;
     1e4:	aa02      	add	r2, sp, #8
     1e6:	4906      	ldr	r1, [pc, #24]	; (200 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0xd4>)
     1e8:	f005 fc88 	bl	5afc <sscanf>
     1ec:	2800      	cmp	r0, #0
     1ee:	d0b9      	beq.n	164 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0x38>
  if (((sum & 255) + (cksum & 255)) & 255) return 0; // checksum error
     1f0:	9b02      	ldr	r3, [sp, #8]
     1f2:	441c      	add	r4, r3
     1f4:	b2e4      	uxtb	r4, r4
     1f6:	fab4 f084 	clz	r0, r4
     1fa:	0940      	lsrs	r0, r0, #5
     1fc:	e7b3      	b.n	166 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0x3a>
     1fe:	bf00      	nop
     200:	20000398 	.word	0x20000398
     204:	200003a0 	.word	0x200003a0

00000208 <process_hex_record(hex_info_t*)>:
  if (hex->code == 0u) { // data
     208:	6882      	ldr	r2, [r0, #8]
int process_hex_record(hex_info_t* hex) {
     20a:	4603      	mov	r3, r0
  if (hex->code == 0u) { // data
     20c:	b992      	cbnz	r2, 234 <process_hex_record(hex_info_t*)+0x2c>
    uint32_t end = hex->base + hex->addr + hex->num;
     20e:	e9d0 1203 	ldrd	r1, r2, [r0, #12]
int process_hex_record(hex_info_t* hex) {
     212:	b410      	push	{r4}
    uint32_t end = hex->base + hex->addr + hex->num;
     214:	685c      	ldr	r4, [r3, #4]
    if (end > hex->max) hex->max = end;
     216:	6980      	ldr	r0, [r0, #24]
    uint32_t end = hex->base + hex->addr + hex->num;
     218:	4422      	add	r2, r4
     21a:	4411      	add	r1, r2
    if (end > hex->max) hex->max = end;
     21c:	4288      	cmp	r0, r1
  return 0;
     21e:	f04f 0000 	mov.w	r0, #0
    if (end > hex->max) hex->max = end;
     222:	bf38      	it	cc
     224:	6199      	strcc	r1, [r3, #24]
    if (beg < hex->min) hex->min = beg;
     226:	6959      	ldr	r1, [r3, #20]
     228:	428a      	cmp	r2, r1
     22a:	d200      	bcs.n	22e <process_hex_record(hex_info_t*)+0x26>
     22c:	615a      	str	r2, [r3, #20]
}
     22e:	f85d 4b04 	ldr.w	r4, [sp], #4
     232:	4770      	bx	lr
  } else if (hex->code == 1u) { // EOF
     234:	3a01      	subs	r2, #1
     236:	2a04      	cmp	r2, #4
     238:	d81d      	bhi.n	276 <process_hex_record(hex_info_t*)+0x6e>
     23a:	e8df f002 	tbb	[pc, r2]
     23e:	0d09      	.short	0x0d09
     240:	151c      	.short	0x151c
     242:	03          	.byte	0x03
     243:	00          	.byte	0x00
    hex->base =  ((uint8_t)hex->data[0] << 24) |
     244:	6802      	ldr	r2, [r0, #0]
  return 0;
     246:	2000      	movs	r0, #0
     248:	6812      	ldr	r2, [r2, #0]
     24a:	ba12      	rev	r2, r2
    hex->base =  ((uint8_t)hex->data[0] << 24) |
     24c:	611a      	str	r2, [r3, #16]
     24e:	4770      	bx	lr
    hex->eof = 1;
     250:	2201      	movs	r2, #1
  return 0;
     252:	2000      	movs	r0, #0
    hex->eof = 1;
     254:	61da      	str	r2, [r3, #28]
     256:	4770      	bx	lr
    hex->base = (((uint8_t)hex->data[0] << 8) | (uint8_t)hex->data[1]) << 4;
     258:	6802      	ldr	r2, [r0, #0]
  return 0;
     25a:	2000      	movs	r0, #0
    hex->base = (((uint8_t)hex->data[0] << 8) | (uint8_t)hex->data[1]) << 4;
     25c:	8812      	ldrh	r2, [r2, #0]
     25e:	ba52      	rev16	r2, r2
     260:	b292      	uxth	r2, r2
     262:	0112      	lsls	r2, r2, #4
     264:	611a      	str	r2, [r3, #16]
     266:	4770      	bx	lr
    hex->base = (((uint8_t)hex->data[0] << 8) | (uint8_t)hex->data[1]) << 16;
     268:	6802      	ldr	r2, [r0, #0]
  return 0;
     26a:	2000      	movs	r0, #0
    hex->base = (((uint8_t)hex->data[0] << 8) | (uint8_t)hex->data[1]) << 16;
     26c:	8812      	ldrh	r2, [r2, #0]
     26e:	ba52      	rev16	r2, r2
     270:	0412      	lsls	r2, r2, #16
     272:	611a      	str	r2, [r3, #16]
     274:	4770      	bx	lr
  if (hex->code == 0u) { // data
     276:	2001      	movs	r0, #1
}
     278:	4770      	bx	lr

			int newPrecision = precision;
			int newDecimalPoint;

			// shift decimal point
			while (newPrecision > 0) {
     27a:	bf00      	nop

0000027c <firmware_buffer_init>:
  *buffer_addr = FLASH_BASE_ADDR + FLASH_SIZE - FLASH_RESERVE - 4;
     27c:	4a13      	ldr	r2, [pc, #76]	; (2cc <firmware_buffer_init+0x50>)
  while (*buffer_addr > 0 && *((uint32_t *)*buffer_addr) == 0xFFFFFFFF)
     27e:	4613      	mov	r3, r2
  *buffer_addr = FLASH_BASE_ADDR + FLASH_SIZE - FLASH_RESERVE - 4;
     280:	6002      	str	r2, [r0, #0]
  while (*buffer_addr > 0 && *((uint32_t *)*buffer_addr) == 0xFFFFFFFF)
     282:	e002      	b.n	28a <firmware_buffer_init+0xe>
    *buffer_addr -= 4;
     284:	3b04      	subs	r3, #4
     286:	6003      	str	r3, [r0, #0]
  while (*buffer_addr > 0 && *((uint32_t *)*buffer_addr) == 0xFFFFFFFF)
     288:	b163      	cbz	r3, 2a4 <firmware_buffer_init+0x28>
     28a:	681a      	ldr	r2, [r3, #0]
     28c:	3201      	adds	r2, #1
     28e:	d0f9      	beq.n	284 <firmware_buffer_init+0x8>
  *buffer_addr += 4; // first address above code
     290:	3304      	adds	r3, #4
  if ((*buffer_addr % FLASH_SECTOR_SIZE) > 0)
     292:	f3c3 020b 	ubfx	r2, r3, #0, #12
  *buffer_addr += 4; // first address above code
     296:	6003      	str	r3, [r0, #0]
  if ((*buffer_addr % FLASH_SECTOR_SIZE) > 0)
     298:	b95a      	cbnz	r2, 2b2 <firmware_buffer_init+0x36>
  *buffer_size = FLASH_BASE_ADDR - *buffer_addr + FLASH_SIZE - FLASH_RESERVE;
     29a:	4a0d      	ldr	r2, [pc, #52]	; (2d0 <firmware_buffer_init+0x54>)
}
     29c:	2001      	movs	r0, #1
  *buffer_size = FLASH_BASE_ADDR - *buffer_addr + FLASH_SIZE - FLASH_RESERVE;
     29e:	1ad2      	subs	r2, r2, r3
     2a0:	600a      	str	r2, [r1, #0]
}
     2a2:	4770      	bx	lr
     2a4:	4a0b      	ldr	r2, [pc, #44]	; (2d4 <firmware_buffer_init+0x58>)
     2a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    *buffer_addr += FLASH_SECTOR_SIZE - (*buffer_addr % FLASH_SECTOR_SIZE);
     2aa:	6003      	str	r3, [r0, #0]
}
     2ac:	2001      	movs	r0, #1
  *buffer_size = FLASH_BASE_ADDR - *buffer_addr + FLASH_SIZE - FLASH_RESERVE;
     2ae:	600a      	str	r2, [r1, #0]
}
     2b0:	4770      	bx	lr
{
     2b2:	b410      	push	{r4}
    *buffer_addr += FLASH_SECTOR_SIZE - (*buffer_addr % FLASH_SECTOR_SIZE);
     2b4:	4c08      	ldr	r4, [pc, #32]	; (2d8 <firmware_buffer_init+0x5c>)
  *buffer_size = FLASH_BASE_ADDR - *buffer_addr + FLASH_SIZE - FLASH_RESERVE;
     2b6:	4a07      	ldr	r2, [pc, #28]	; (2d4 <firmware_buffer_init+0x58>)
    *buffer_addr += FLASH_SECTOR_SIZE - (*buffer_addr % FLASH_SECTOR_SIZE);
     2b8:	401c      	ands	r4, r3
     2ba:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
  *buffer_size = FLASH_BASE_ADDR - *buffer_addr + FLASH_SIZE - FLASH_RESERVE;
     2be:	1b12      	subs	r2, r2, r4
}
     2c0:	f85d 4b04 	ldr.w	r4, [sp], #4
    *buffer_addr += FLASH_SECTOR_SIZE - (*buffer_addr % FLASH_SECTOR_SIZE);
     2c4:	6003      	str	r3, [r0, #0]
}
     2c6:	2001      	movs	r0, #1
  *buffer_size = FLASH_BASE_ADDR - *buffer_addr + FLASH_SIZE - FLASH_RESERVE;
     2c8:	600a      	str	r2, [r1, #0]
}
     2ca:	4770      	bx	lr
     2cc:	607fbffc 	.word	0x607fbffc
     2d0:	607fc000 	.word	0x607fc000
     2d4:	607fb000 	.word	0x607fb000
     2d8:	fffff000 	.word	0xfffff000

000002dc <firmware_buffer_free>:
{
     2dc:	b538      	push	{r3, r4, r5, lr}
  if (IN_FLASH(buffer_addr))
     2de:	f100 4320 	add.w	r3, r0, #2684354560	; 0xa0000000
     2e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
     2e6:	d215      	bcs.n	314 <firmware_buffer_free+0x38>
  while (address < (start + size) && error == 0) { 
     2e8:	1845      	adds	r5, r0, r1
     2ea:	4604      	mov	r4, r0
     2ec:	42a8      	cmp	r0, r5
     2ee:	d307      	bcc.n	300 <firmware_buffer_free+0x24>
}
     2f0:	bd38      	pop	{r3, r4, r5, pc}
          eepromemu_flash_erase_sector( (void*)address );
     2f2:	4620      	mov	r0, r4
     2f4:	f001 fede 	bl	20b4 <eepromemu_flash_erase_sector>
    address += FLASH_SECTOR_SIZE;
     2f8:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
  while (address < (start + size) && error == 0) { 
     2fc:	42ac      	cmp	r4, r5
     2fe:	d2f7      	bcs.n	2f0 <firmware_buffer_free+0x14>
    if ((address & (FLASH_SECTOR_SIZE - 1)) == 0) {
     300:	f3c4 030b 	ubfx	r3, r4, #0, #12
      if (flash_sector_not_erased( address )) {
     304:	4620      	mov	r0, r4
    if ((address & (FLASH_SECTOR_SIZE - 1)) == 0) {
     306:	2b00      	cmp	r3, #0
     308:	d1f6      	bne.n	2f8 <firmware_buffer_free+0x1c>
      if (flash_sector_not_erased( address )) {
     30a:	f7ff fe89 	bl	20 <flash_sector_not_erased>
     30e:	2800      	cmp	r0, #0
     310:	d0f2      	beq.n	2f8 <firmware_buffer_free+0x1c>
     312:	e7ee      	b.n	2f2 <firmware_buffer_free+0x16>
}
     314:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    free( (void*)buffer_addr );
     318:	f003 be54 	b.w	3fc4 <free>

0000031c <check_flash_id>:
  for (uint32_t i = buffer; i < buffer + size - strlen(FLASH_ID); ++i) {
     31c:	390b      	subs	r1, #11
{
     31e:	b570      	push	{r4, r5, r6, lr}
  for (uint32_t i = buffer; i < buffer + size - strlen(FLASH_ID); ++i) {
     320:	180d      	adds	r5, r1, r0
     322:	42a8      	cmp	r0, r5
     324:	d20e      	bcs.n	344 <check_flash_id+0x28>
     326:	4604      	mov	r4, r0
    if (strncmp((char *)i, FLASH_ID, strlen(FLASH_ID)) == 0)
     328:	4e07      	ldr	r6, [pc, #28]	; (348 <check_flash_id+0x2c>)
     32a:	e001      	b.n	330 <check_flash_id+0x14>
  for (uint32_t i = buffer; i < buffer + size - strlen(FLASH_ID); ++i) {
     32c:	42ac      	cmp	r4, r5
     32e:	d009      	beq.n	344 <check_flash_id+0x28>
    if (strncmp((char *)i, FLASH_ID, strlen(FLASH_ID)) == 0)
     330:	4620      	mov	r0, r4
     332:	220b      	movs	r2, #11
     334:	4631      	mov	r1, r6
  for (uint32_t i = buffer; i < buffer + size - strlen(FLASH_ID); ++i) {
     336:	3401      	adds	r4, #1
    if (strncmp((char *)i, FLASH_ID, strlen(FLASH_ID)) == 0)
     338:	f005 fe26 	bl	5f88 <strncmp>
     33c:	2800      	cmp	r0, #0
     33e:	d1f5      	bne.n	32c <check_flash_id+0x10>
      return 1;
     340:	2001      	movs	r0, #1
}
     342:	bd70      	pop	{r4, r5, r6, pc}
  return 0;
     344:	2000      	movs	r0, #0
}
     346:	bd70      	pop	{r4, r5, r6, pc}
     348:	200058c8 	.word	0x200058c8

0000034c <flash_write_block>:

//******************************************************************************
// take a 32-bit aligned array of 32-bit values and write it to erased flash
//******************************************************************************
int flash_write_block( uint32_t addr, char *data, uint32_t count )
{
     34c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  static uint32_t next_addr = 0;			// expected address
  
  int ret = 0;						// return value
  uint32_t data_i = 0;					// index to data array

  if ((addr % 4) != 0 || (count % 4) != 0) {		// if not 32-bit aligned
     350:	ea40 0302 	orr.w	r3, r0, r2
     354:	079b      	lsls	r3, r3, #30
     356:	d002      	beq.n	35e <flash_write_block+0x12>
    return 1;	// "flash_block align error\n"		//   return error code 1
     358:	2001      	movs	r0, #1
    }
    buf_count = 0;					//   re-init buf count
    addr += FLASH_WRITE_SIZE;				//   advance address
  }  
  return 0;						// return success
}
     35a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (buf_count > 0 && addr != next_addr) {		// if unexpected address   
     35e:	4f15      	ldr	r7, [pc, #84]	; (3b4 <flash_write_block+0x68>)
     360:	4c15      	ldr	r4, [pc, #84]	; (3b8 <flash_write_block+0x6c>)
     362:	683b      	ldr	r3, [r7, #0]
     364:	b113      	cbz	r3, 36c <flash_write_block+0x20>
     366:	6825      	ldr	r5, [r4, #0]
     368:	4285      	cmp	r5, r0
     36a:	d120      	bne.n	3ae <flash_write_block+0x62>
  next_addr = addr + count;				//   compute next address
     36c:	1885      	adds	r5, r0, r2
     36e:	6025      	str	r5, [r4, #0]
  addr -= buf_count;					//   address of data[0]
     370:	1ac5      	subs	r5, r0, r3
  while (data_i < count) {				// while more data
     372:	b1ca      	cbz	r2, 3a8 <flash_write_block+0x5c>
     374:	1e4c      	subs	r4, r1, #1
     376:	f8df 8044 	ldr.w	r8, [pc, #68]	; 3bc <flash_write_block+0x70>
    buf_count = 0;					//   re-init buf count
     37a:	f04f 0900 	mov.w	r9, #0
     37e:	18a6      	adds	r6, r4, r2
     380:	e000      	b.n	384 <flash_write_block+0x38>
    ((char*)&buf)[buf_count++] = data[data_i++];	//   copy a byte to buf
     382:	683b      	ldr	r3, [r7, #0]
     384:	1c59      	adds	r1, r3, #1
     386:	f814 cf01 	ldrb.w	ip, [r4, #1]!
      eepromemu_flash_write((void*)addr,(void*)&buf,4);	//     flash_write()
     38a:	4628      	mov	r0, r5
     38c:	2204      	movs	r2, #4
    if (buf_count < FLASH_WRITE_SIZE) {			//   if buf not complete
     38e:	2903      	cmp	r1, #3
    ((char*)&buf)[buf_count++] = data[data_i++];	//   copy a byte to buf
     390:	6039      	str	r1, [r7, #0]
     392:	f808 c003 	strb.w	ip, [r8, r3]
      eepromemu_flash_write((void*)addr,(void*)&buf,4);	//     flash_write()
     396:	4641      	mov	r1, r8
    if (buf_count < FLASH_WRITE_SIZE) {			//   if buf not complete
     398:	d904      	bls.n	3a4 <flash_write_block+0x58>
    addr += FLASH_WRITE_SIZE;				//   advance address
     39a:	4415      	add	r5, r2
      eepromemu_flash_write((void*)addr,(void*)&buf,4);	//     flash_write()
     39c:	f001 fe14 	bl	1fc8 <eepromemu_flash_write>
    buf_count = 0;					//   re-init buf count
     3a0:	f8c7 9000 	str.w	r9, [r7]
  while (data_i < count) {				// while more data
     3a4:	42b4      	cmp	r4, r6
     3a6:	d1ec      	bne.n	382 <flash_write_block+0x36>
  return 0;						// return success
     3a8:	2000      	movs	r0, #0
}
     3aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return 2;	// "unexpected address\n"		//   return error code 2   
     3ae:	2002      	movs	r0, #2
     3b0:	e7d3      	b.n	35a <flash_write_block+0xe>
     3b2:	bf00      	nop
     3b4:	20008dd0 	.word	0x20008dd0
     3b8:	20008e00 	.word	0x20008e00
     3bc:	20008dcc 	.word	0x20008dcc

000003c0 <OtaConsole::printf(char const*, ...)>:
    s->print(msg);
    s->print("\r\n");
  }

  // Print formatted line (like printf) with prefix and CRLF
  inline void printf(const char* fmt, ...) {
     3c0:	b40f      	push	{r0, r1, r2, r3}
    if (!enabled || !s) return;
     3c2:	4b15      	ldr	r3, [pc, #84]	; (418 <OtaConsole::printf(char const*, ...)+0x58>)
     3c4:	781b      	ldrb	r3, [r3, #0]
  inline void printf(const char* fmt, ...) {
     3c6:	b530      	push	{r4, r5, lr}
     3c8:	b0b3      	sub	sp, #204	; 0xcc
    if (!enabled || !s) return;
     3ca:	b1fb      	cbz	r3, 40c <OtaConsole::printf(char const*, ...)+0x4c>
     3cc:	4c13      	ldr	r4, [pc, #76]	; (41c <OtaConsole::printf(char const*, ...)+0x5c>)
     3ce:	6823      	ldr	r3, [r4, #0]
     3d0:	b1e3      	cbz	r3, 40c <OtaConsole::printf(char const*, ...)+0x4c>
    char buf[192];
    va_list ap;
    va_start(ap, fmt);
     3d2:	ab37      	add	r3, sp, #220	; 0xdc
    vsnprintf(buf, sizeof(buf), fmt, ap);
     3d4:	9a36      	ldr	r2, [sp, #216]	; 0xd8
     3d6:	21c0      	movs	r1, #192	; 0xc0
     3d8:	a802      	add	r0, sp, #8
    va_start(ap, fmt);
     3da:	9301      	str	r3, [sp, #4]
    vsnprintf(buf, sizeof(buf), fmt, ap);
     3dc:	f005 fc36 	bl	5c4c <vsnprintf>
    va_end(ap);
    s->print("S ");
     3e0:	6820      	ldr	r0, [r4, #0]
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
     3e2:	2202      	movs	r2, #2
     3e4:	490e      	ldr	r1, [pc, #56]	; (420 <OtaConsole::printf(char const*, ...)+0x60>)
     3e6:	6803      	ldr	r3, [r0, #0]
     3e8:	685b      	ldr	r3, [r3, #4]
     3ea:	4798      	blx	r3
    s->print(buf);
     3ec:	6825      	ldr	r5, [r4, #0]
     3ee:	a802      	add	r0, sp, #8
     3f0:	f006 f8c6 	bl	6580 <strlen>
     3f4:	682b      	ldr	r3, [r5, #0]
     3f6:	4602      	mov	r2, r0
     3f8:	a902      	add	r1, sp, #8
     3fa:	685b      	ldr	r3, [r3, #4]
     3fc:	4628      	mov	r0, r5
     3fe:	4798      	blx	r3
    s->print("\r\n");
     400:	6820      	ldr	r0, [r4, #0]
     402:	2202      	movs	r2, #2
     404:	4907      	ldr	r1, [pc, #28]	; (424 <OtaConsole::printf(char const*, ...)+0x64>)
     406:	6803      	ldr	r3, [r0, #0]
     408:	685b      	ldr	r3, [r3, #4]
     40a:	4798      	blx	r3
  }
     40c:	b033      	add	sp, #204	; 0xcc
     40e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
     412:	b004      	add	sp, #16
     414:	4770      	bx	lr
     416:	bf00      	nop
     418:	20008263 	.word	0x20008263
     41c:	20007c60 	.word	0x20007c60
     420:	200003cc 	.word	0x200003cc
     424:	20007970 	.word	0x20007970

00000428 <loop>:

  Serial.println("[MyApp] boot");
  OtaConsole::printf("S MyApp FW=%s  (blink=%d ms)\r\n", APP_FW_VERSION, BLINK_MS);
}

void loop() {
     428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     42c:	b092      	sub	sp, #72	; 0x48
     42e:	4c6b      	ldr	r4, [pc, #428]	; (5dc <loop+0x1b4>)
  // Always service OTA (cheap when idle)
  OtaUpdater::tick();
     430:	f000 fbe0 	bl	bf4 <OtaUpdater::tick()>

  // Mute chatty logs during an active flash (optional)
  OtaConsole::setEnabled(!OtaUpdater::inProgress());
     434:	f000 fbd8 	bl	be8 <OtaUpdater::inProgress()>
  inline void setEnabled(bool on) { enabled = on; }
     438:	4969      	ldr	r1, [pc, #420]	; (5e0 <loop+0x1b8>)

  // Sample at ~10 Hz
  static uint32_t t_sample = 0;
  if (millis() - t_sample >= 100) {
     43a:	4a6a      	ldr	r2, [pc, #424]	; (5e4 <loop+0x1bc>)
  OtaConsole::setEnabled(!OtaUpdater::inProgress());
     43c:	f080 0001 	eor.w	r0, r0, #1
     440:	6823      	ldr	r3, [r4, #0]
     442:	7008      	strb	r0, [r1, #0]
  if (millis() - t_sample >= 100) {
     444:	6811      	ldr	r1, [r2, #0]
     446:	1a5b      	subs	r3, r3, r1
     448:	2b63      	cmp	r3, #99	; 0x63
     44a:	f200 80e9 	bhi.w	620 <loop+0x1f8>
    Desired des; computeDesired(des); applyOutputs(des);
  }

  // Blink (don’t blink during flash just to keep UART quiet)
  static uint32_t t_led = 0; static bool led = false;
  if (!OtaUpdater::inProgress() && millis() - t_led >= BLINK_MS) {
     44e:	f000 fbcb 	bl	be8 <OtaUpdater::inProgress()>
     452:	b928      	cbnz	r0, 460 <loop+0x38>
     454:	4a64      	ldr	r2, [pc, #400]	; (5e8 <loop+0x1c0>)
     456:	6823      	ldr	r3, [r4, #0]
     458:	6811      	ldr	r1, [r2, #0]
     45a:	1a5b      	subs	r3, r3, r1
     45c:	2b31      	cmp	r3, #49	; 0x31
     45e:	d828      	bhi.n	4b2 <loop+0x8a>
  static String line;
     460:	4c62      	ldr	r4, [pc, #392]	; (5ec <loop+0x1c4>)
     462:	6821      	ldr	r1, [r4, #0]
     464:	f011 0101 	ands.w	r1, r1, #1
     468:	d032      	beq.n	4d0 <loop+0xa8>
	String(double num, unsigned char digits=2) : String((float)num, digits) {}
	~String(void);

	// memory management
	unsigned char reserve(unsigned int size);
	inline unsigned int length(void) const {return len;}
     46a:	4c61      	ldr	r4, [pc, #388]	; (5f0 <loop+0x1c8>)
      line = "";
     46c:	4d61      	ldr	r5, [pc, #388]	; (5f4 <loop+0x1cc>)
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	//unsigned char equals(const __FlashStringHelper *pgmstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
     46e:	4e62      	ldr	r6, [pc, #392]	; (5f8 <loop+0x1d0>)
        virtual int available() { return usb_serial_available(); }
     470:	f003 f8a2 	bl	35b8 <usb_serial_available>
  while (Serial.available()) {
     474:	b180      	cbz	r0, 498 <loop+0x70>
        virtual int read() { return usb_serial_getchar(); }
     476:	f003 f8e3 	bl	3640 <usb_serial_getchar>
    char c = (char)Serial.read();
     47a:	b2c1      	uxtb	r1, r0
    if (c == '\r') continue;
     47c:	290d      	cmp	r1, #13
     47e:	d0f7      	beq.n	470 <loop+0x48>
    if (c == '\n') {
     480:	290a      	cmp	r1, #10
     482:	d00c      	beq.n	49e <loop+0x76>
      if (line.length() < 120) line += c;
     484:	68a3      	ldr	r3, [r4, #8]
     486:	2b77      	cmp	r3, #119	; 0x77
     488:	d8f2      	bhi.n	470 <loop+0x48>
	String & operator += (char c)			{return append(c);}
     48a:	4620      	mov	r0, r4
     48c:	f001 fb12 	bl	1ab4 <String::append(char)>
        virtual int available() { return usb_serial_available(); }
     490:	f003 f892 	bl	35b8 <usb_serial_available>
  while (Serial.available()) {
     494:	2800      	cmp	r0, #0
     496:	d1ee      	bne.n	476 <loop+0x4e>
    t_led = millis(); led = !led; digitalWrite(LED_PIN, led ? HIGH : LOW);
  }

  // Handle USB Serial commands
  handleUsbCommandsOnce();
}
     498:	b012      	add	sp, #72	; 0x48
     49a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      line.trim();
     49e:	4854      	ldr	r0, [pc, #336]	; (5f0 <loop+0x1c8>)
     4a0:	f001 fba4 	bl	1bec <String::trim()>
      if (line.length()) {
     4a4:	68a3      	ldr	r3, [r4, #8]
     4a6:	b9f3      	cbnz	r3, 4e6 <loop+0xbe>
      line = "";
     4a8:	4629      	mov	r1, r5
     4aa:	4620      	mov	r0, r4
     4ac:	f001 fab0 	bl	1a10 <String::operator=(char const*)>
     4b0:	e7de      	b.n	470 <loop+0x48>
    t_led = millis(); led = !led; digitalWrite(LED_PIN, led ? HIGH : LOW);
     4b2:	4b52      	ldr	r3, [pc, #328]	; (5fc <loop+0x1d4>)
     4b4:	6820      	ldr	r0, [r4, #0]
     4b6:	7819      	ldrb	r1, [r3, #0]
  static String line;
     4b8:	4c4c      	ldr	r4, [pc, #304]	; (5ec <loop+0x1c4>)
    t_led = millis(); led = !led; digitalWrite(LED_PIN, led ? HIGH : LOW);
     4ba:	f081 0101 	eor.w	r1, r1, #1
     4be:	6010      	str	r0, [r2, #0]
     4c0:	200d      	movs	r0, #13
     4c2:	7019      	strb	r1, [r3, #0]
     4c4:	f001 fcde 	bl	1e84 <digitalWrite>
  static String line;
     4c8:	6821      	ldr	r1, [r4, #0]
     4ca:	f011 0101 	ands.w	r1, r1, #1
     4ce:	d1cc      	bne.n	46a <loop+0x42>
     4d0:	4847      	ldr	r0, [pc, #284]	; (5f0 <loop+0x1c8>)
     4d2:	f001 fa25 	bl	1920 <String::String(char const*)>
     4d6:	2301      	movs	r3, #1
     4d8:	4a49      	ldr	r2, [pc, #292]	; (600 <loop+0x1d8>)
     4da:	494a      	ldr	r1, [pc, #296]	; (604 <loop+0x1dc>)
     4dc:	4844      	ldr	r0, [pc, #272]	; (5f0 <loop+0x1c8>)
     4de:	6023      	str	r3, [r4, #0]
     4e0:	f003 fbe4 	bl	3cac <__aeabi_atexit>
     4e4:	e7c1      	b.n	46a <loop+0x42>
        String verb, a1, a2;
     4e6:	2100      	movs	r1, #0
     4e8:	a803      	add	r0, sp, #12
     4ea:	f001 fa19 	bl	1920 <String::String(char const*)>
     4ee:	2100      	movs	r1, #0
     4f0:	a806      	add	r0, sp, #24
     4f2:	f001 fa15 	bl	1920 <String::String(char const*)>
     4f6:	2100      	movs	r1, #0
     4f8:	a809      	add	r0, sp, #36	; 0x24
     4fa:	f001 fa11 	bl	1920 <String::String(char const*)>
        int sp1 = line.indexOf(' ');
     4fe:	2120      	movs	r1, #32
     500:	4620      	mov	r0, r4
     502:	f001 fafd 	bl	1b00 <String::indexOf(char) const>
        if (sp1 < 0) { verb = line; }
     506:	1e07      	subs	r7, r0, #0
     508:	f2c0 81ae 	blt.w	868 <loop+0x440>
          verb = line.substring(0, sp1);
     50c:	463b      	mov	r3, r7
     50e:	2200      	movs	r2, #0
     510:	4621      	mov	r1, r4
     512:	a80f      	add	r0, sp, #60	; 0x3c
     514:	f001 fb30 	bl	1b78 <String::substring(unsigned int, unsigned int) const>
     518:	a90f      	add	r1, sp, #60	; 0x3c
     51a:	a803      	add	r0, sp, #12
     51c:	f001 fa62 	bl	19e4 <String::operator=(String&&)>
     520:	a80f      	add	r0, sp, #60	; 0x3c
     522:	f001 fa1b 	bl	195c <String::~String()>
          String rest = line.substring(sp1+1);
     526:	1c7a      	adds	r2, r7, #1
     528:	4621      	mov	r1, r4
     52a:	a80c      	add	r0, sp, #48	; 0x30
     52c:	f001 faf8 	bl	1b20 <String::substring(unsigned int) const>
          rest.trim();
     530:	a80c      	add	r0, sp, #48	; 0x30
     532:	f001 fb5b 	bl	1bec <String::trim()>
          int sp2 = rest.indexOf(' ');
     536:	2120      	movs	r1, #32
     538:	a80c      	add	r0, sp, #48	; 0x30
     53a:	f001 fae1 	bl	1b00 <String::indexOf(char) const>
          if (sp2 < 0) a1 = rest;
     53e:	1e07      	subs	r7, r0, #0
     540:	f2c0 816d 	blt.w	81e <loop+0x3f6>
          else { a1 = rest.substring(0, sp2); a2 = rest.substring(sp2+1); a2.trim(); }
     544:	463b      	mov	r3, r7
     546:	2200      	movs	r2, #0
     548:	a90c      	add	r1, sp, #48	; 0x30
     54a:	a80f      	add	r0, sp, #60	; 0x3c
     54c:	f001 fb14 	bl	1b78 <String::substring(unsigned int, unsigned int) const>
     550:	a90f      	add	r1, sp, #60	; 0x3c
     552:	a806      	add	r0, sp, #24
     554:	f001 fa46 	bl	19e4 <String::operator=(String&&)>
     558:	a80f      	add	r0, sp, #60	; 0x3c
     55a:	f001 f9ff 	bl	195c <String::~String()>
     55e:	1c7a      	adds	r2, r7, #1
     560:	a90c      	add	r1, sp, #48	; 0x30
     562:	a80f      	add	r0, sp, #60	; 0x3c
     564:	f001 fadc 	bl	1b20 <String::substring(unsigned int) const>
     568:	a90f      	add	r1, sp, #60	; 0x3c
     56a:	a809      	add	r0, sp, #36	; 0x24
     56c:	f001 fa3a 	bl	19e4 <String::operator=(String&&)>
     570:	a80f      	add	r0, sp, #60	; 0x3c
     572:	f001 f9f3 	bl	195c <String::~String()>
     576:	a809      	add	r0, sp, #36	; 0x24
     578:	f001 fb38 	bl	1bec <String::trim()>
        }
     57c:	a80c      	add	r0, sp, #48	; 0x30
     57e:	f001 f9ed 	bl	195c <String::~String()>
        verb.toUpperCase();
     582:	a803      	add	r0, sp, #12
     584:	f001 fb22 	bl	1bcc <String::toUpperCase()>
        a1.toUpperCase();
     588:	a806      	add	r0, sp, #24
     58a:	f001 fb1f 	bl	1bcc <String::toUpperCase()>
        a2.toUpperCase();
     58e:	a809      	add	r0, sp, #36	; 0x24
     590:	f001 fb1c 	bl	1bcc <String::toUpperCase()>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
     594:	4631      	mov	r1, r6
     596:	a803      	add	r0, sp, #12
     598:	f001 fa9c 	bl	1ad4 <String::equals(char const*) const>
        if (verb == "SRC") {
     59c:	2800      	cmp	r0, #0
     59e:	f000 8146 	beq.w	82e <loop+0x406>
     5a2:	4919      	ldr	r1, [pc, #100]	; (608 <loop+0x1e0>)
     5a4:	a806      	add	r0, sp, #24
     5a6:	f001 fa95 	bl	1ad4 <String::equals(char const*) const>
          if (a1 == "?") {
     5aa:	2800      	cmp	r0, #0
     5ac:	f000 81ec 	beq.w	988 <loop+0x560>
            Serial.printf("[MyApp] SRC=%s\r\n", g_srcRc ? "rc" : "local");
     5b0:	4b16      	ldr	r3, [pc, #88]	; (60c <loop+0x1e4>)
     5b2:	4a17      	ldr	r2, [pc, #92]	; (610 <loop+0x1e8>)
     5b4:	7819      	ldrb	r1, [r3, #0]
     5b6:	4b17      	ldr	r3, [pc, #92]	; (614 <loop+0x1ec>)
     5b8:	4817      	ldr	r0, [pc, #92]	; (618 <loop+0x1f0>)
     5ba:	2900      	cmp	r1, #0
     5bc:	bf08      	it	eq
     5be:	461a      	moveq	r2, r3
     5c0:	4916      	ldr	r1, [pc, #88]	; (61c <loop+0x1f4>)
     5c2:	f001 f98b 	bl	18dc <Print::printf(char const*, ...)>
      }
     5c6:	a809      	add	r0, sp, #36	; 0x24
     5c8:	f001 f9c8 	bl	195c <String::~String()>
     5cc:	a806      	add	r0, sp, #24
     5ce:	f001 f9c5 	bl	195c <String::~String()>
     5d2:	a803      	add	r0, sp, #12
     5d4:	f001 f9c2 	bl	195c <String::~String()>
     5d8:	e766      	b.n	4a8 <loop+0x80>
     5da:	bf00      	nop
     5dc:	20008e6c 	.word	0x20008e6c
     5e0:	20008263 	.word	0x20008263
     5e4:	200089e8 	.word	0x200089e8
     5e8:	200089e4 	.word	0x200089e4
     5ec:	20008948 	.word	0x20008948
     5f0:	200089ec 	.word	0x200089ec
     5f4:	200077d4 	.word	0x200077d4
     5f8:	200077c0 	.word	0x200077c0
     5fc:	20008e99 	.word	0x20008e99
     600:	20007c6c 	.word	0x20007c6c
     604:	0000195d 	.word	0x0000195d
     608:	2000782c 	.word	0x2000782c
     60c:	20008262 	.word	0x20008262
     610:	200076f4 	.word	0x200076f4
     614:	200076f8 	.word	0x200076f8
     618:	20007b88 	.word	0x20007b88
     61c:	200077c4 	.word	0x200077c4
     620:	6823      	ldr	r3, [r4, #0]
  g_s1 = analogRead(PIN_POT_S1);
     622:	2003      	movs	r0, #3
     624:	4ebc      	ldr	r6, [pc, #752]	; (918 <loop+0x4f0>)
    t_sample = millis();
     626:	6013      	str	r3, [r2, #0]
  g_s1 = analogRead(PIN_POT_S1);
     628:	f001 fb0c 	bl	1c44 <analogRead>
     62c:	8030      	strh	r0, [r6, #0]
  g_t1 = analogRead(PIN_POT_T1);
     62e:	201b      	movs	r0, #27
     630:	f001 fb08 	bl	1c44 <analogRead>
     634:	4db9      	ldr	r5, [pc, #740]	; (91c <loop+0x4f4>)
     636:	4603      	mov	r3, r0
  g_s2 = analogRead(PIN_POT_S2);
     638:	f8df 8340 	ldr.w	r8, [pc, #832]	; 97c <loop+0x554>
     63c:	2005      	movs	r0, #5
  g_t2 = analogRead(PIN_POT_T2);
     63e:	4fb8      	ldr	r7, [pc, #736]	; (920 <loop+0x4f8>)
  g_t1 = analogRead(PIN_POT_T1);
     640:	802b      	strh	r3, [r5, #0]
  g_s2 = analogRead(PIN_POT_S2);
     642:	f001 faff 	bl	1c44 <analogRead>
     646:	f8a8 0000 	strh.w	r0, [r8]
  g_t2 = analogRead(PIN_POT_T2);
     64a:	2004      	movs	r0, #4
     64c:	f001 fafa 	bl	1c44 <analogRead>
     650:	8038      	strh	r0, [r7, #0]
  bool fwd = (digitalRead(PIN_FWD) == LOW);
     652:	200a      	movs	r0, #10
     654:	f001 fc40 	bl	1ed8 <digitalRead>
     658:	4681      	mov	r9, r0
  bool rev = (digitalRead(PIN_REV) == LOW);
     65a:	200b      	movs	r0, #11
     65c:	f001 fc3c 	bl	1ed8 <digitalRead>
  g_fnr = (fwd && !rev) ? FNR_FWD : (!fwd && rev) ? FNR_REV : FNR_NEU;
     660:	f1b9 0200 	subs.w	r2, r9, #0
  bool rev = (digitalRead(PIN_REV) == LOW);
     664:	fab0 f380 	clz	r3, r0
  g_fnr = (fwd && !rev) ? FNR_FWD : (!fwd && rev) ? FNR_REV : FNR_NEU;
     668:	bf18      	it	ne
     66a:	2201      	movne	r2, #1
  bool rev = (digitalRead(PIN_REV) == LOW);
     66c:	095b      	lsrs	r3, r3, #5
  g_fnr = (fwd && !rev) ? FNR_FWD : (!fwd && rev) ? FNR_REV : FNR_NEU;
     66e:	2800      	cmp	r0, #0
     670:	f000 80da 	beq.w	828 <loop+0x400>
     674:	2a00      	cmp	r2, #0
     676:	f040 80d7 	bne.w	828 <loop+0x400>
     67a:	2301      	movs	r3, #1
    if (g_watch.s1) OtaConsole::printf("S S1 raw=%u v=%.3f steer=%d\r\n", g_s1, (double)g_s1*ADC_VREF/ADC_MAX, (int)scaleSteer(g_s1));
     67c:	f8df 9300 	ldr.w	r9, [pc, #768]	; 980 <loop+0x558>
  g_fnr = (fwd && !rev) ? FNR_FWD : (!fwd && rev) ? FNR_REV : FNR_NEU;
     680:	f8df a300 	ldr.w	sl, [pc, #768]	; 984 <loop+0x55c>
     684:	f88a 3000 	strb.w	r3, [sl]
    if (g_watch.s1) OtaConsole::printf("S S1 raw=%u v=%.3f steer=%d\r\n", g_s1, (double)g_s1*ADC_VREF/ADC_MAX, (int)scaleSteer(g_s1));
     688:	f899 3000 	ldrb.w	r3, [r9]
     68c:	b303      	cbz	r3, 6d0 <loop+0x2a8>
     68e:	8831      	ldrh	r1, [r6, #0]
  v = (v * 1000) / 2048;
     690:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  if (v > hi) return hi;
     694:	4aa3      	ldr	r2, [pc, #652]	; (924 <loop+0x4fc>)
    if (g_watch.s1) OtaConsole::printf("S S1 raw=%u v=%.3f steer=%d\r\n", g_s1, (double)g_s1*ADC_VREF/ADC_MAX, (int)scaleSteer(g_s1));
     696:	ee07 1a90 	vmov	s15, r1
  int32_t v = (int32_t)raw - 2048;
     69a:	f5a1 6000 	sub.w	r0, r1, #2048	; 0x800
    if (g_watch.s1) OtaConsole::printf("S S1 raw=%u v=%.3f steer=%d\r\n", g_s1, (double)g_s1*ADC_VREF/ADC_MAX, (int)scaleSteer(g_s1));
     69e:	ed9f 6b9a 	vldr	d6, [pc, #616]	; 908 <loop+0x4e0>
     6a2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
  v = (v * 1000) / 2048;
     6a6:	fb03 f000 	mul.w	r0, r3, r0
    if (g_watch.s1) OtaConsole::printf("S S1 raw=%u v=%.3f steer=%d\r\n", g_s1, (double)g_s1*ADC_VREF/ADC_MAX, (int)scaleSteer(g_s1));
     6aa:	ed9f 5b99 	vldr	d5, [pc, #612]	; 910 <loop+0x4e8>
     6ae:	ee27 7b06 	vmul.f64	d7, d7, d6
  if (v > hi) return hi;
     6b2:	4290      	cmp	r0, r2
    if (g_watch.s1) OtaConsole::printf("S S1 raw=%u v=%.3f steer=%d\r\n", g_s1, (double)g_s1*ADC_VREF/ADC_MAX, (int)scaleSteer(g_s1));
     6b4:	ee87 6b05 	vdiv.f64	d6, d7, d5
  if (v > hi) return hi;
     6b8:	dc04      	bgt.n	6c4 <loop+0x29c>
  v = (v * 1000) / 2048;
     6ba:	1e03      	subs	r3, r0, #0
     6bc:	bfb8      	it	lt
     6be:	f203 73ff 	addwlt	r3, r3, #2047	; 0x7ff
     6c2:	12db      	asrs	r3, r3, #11
    if (g_watch.s1) OtaConsole::printf("S S1 raw=%u v=%.3f steer=%d\r\n", g_s1, (double)g_s1*ADC_VREF/ADC_MAX, (int)scaleSteer(g_s1));
     6c4:	9300      	str	r3, [sp, #0]
     6c6:	4898      	ldr	r0, [pc, #608]	; (928 <loop+0x500>)
     6c8:	ec53 2b16 	vmov	r2, r3, d6
     6cc:	f7ff fe78 	bl	3c0 <OtaConsole::printf(char const*, ...)>
    if (g_watch.s2) OtaConsole::printf("S S2 raw=%u v=%.3f steer=%d\r\n", g_s2, (double)g_s2*ADC_VREF/ADC_MAX, (int)scaleSteer(g_s2));
     6d0:	f899 3001 	ldrb.w	r3, [r9, #1]
     6d4:	b30b      	cbz	r3, 71a <loop+0x2f2>
     6d6:	f8b8 1000 	ldrh.w	r1, [r8]
  v = (v * 1000) / 2048;
     6da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  if (v > hi) return hi;
     6de:	4a91      	ldr	r2, [pc, #580]	; (924 <loop+0x4fc>)
    if (g_watch.s2) OtaConsole::printf("S S2 raw=%u v=%.3f steer=%d\r\n", g_s2, (double)g_s2*ADC_VREF/ADC_MAX, (int)scaleSteer(g_s2));
     6e0:	ee07 1a90 	vmov	s15, r1
  int32_t v = (int32_t)raw - 2048;
     6e4:	f5a1 6000 	sub.w	r0, r1, #2048	; 0x800
    if (g_watch.s2) OtaConsole::printf("S S2 raw=%u v=%.3f steer=%d\r\n", g_s2, (double)g_s2*ADC_VREF/ADC_MAX, (int)scaleSteer(g_s2));
     6e8:	ed9f 6b87 	vldr	d6, [pc, #540]	; 908 <loop+0x4e0>
     6ec:	eeb8 7b67 	vcvt.f64.u32	d7, s15
  v = (v * 1000) / 2048;
     6f0:	fb03 f000 	mul.w	r0, r3, r0
    if (g_watch.s2) OtaConsole::printf("S S2 raw=%u v=%.3f steer=%d\r\n", g_s2, (double)g_s2*ADC_VREF/ADC_MAX, (int)scaleSteer(g_s2));
     6f4:	ed9f 5b86 	vldr	d5, [pc, #536]	; 910 <loop+0x4e8>
     6f8:	ee27 7b06 	vmul.f64	d7, d7, d6
  if (v > hi) return hi;
     6fc:	4290      	cmp	r0, r2
    if (g_watch.s2) OtaConsole::printf("S S2 raw=%u v=%.3f steer=%d\r\n", g_s2, (double)g_s2*ADC_VREF/ADC_MAX, (int)scaleSteer(g_s2));
     6fe:	ee87 6b05 	vdiv.f64	d6, d7, d5
  if (v > hi) return hi;
     702:	dc04      	bgt.n	70e <loop+0x2e6>
  v = (v * 1000) / 2048;
     704:	1e03      	subs	r3, r0, #0
     706:	bfb8      	it	lt
     708:	f203 73ff 	addwlt	r3, r3, #2047	; 0x7ff
     70c:	12db      	asrs	r3, r3, #11
    if (g_watch.s2) OtaConsole::printf("S S2 raw=%u v=%.3f steer=%d\r\n", g_s2, (double)g_s2*ADC_VREF/ADC_MAX, (int)scaleSteer(g_s2));
     70e:	9300      	str	r3, [sp, #0]
     710:	4886      	ldr	r0, [pc, #536]	; (92c <loop+0x504>)
     712:	ec53 2b16 	vmov	r2, r3, d6
     716:	f7ff fe53 	bl	3c0 <OtaConsole::printf(char const*, ...)>
    if (g_watch.t1) OtaConsole::printf("S T1 raw=%u v=%.3f thr=%d\r\n",  g_t1, (double)g_t1*ADC_VREF/ADC_MAX, (int)scaleThrottle(g_t1));
     71a:	f899 3002 	ldrb.w	r3, [r9, #2]
     71e:	b303      	cbz	r3, 762 <loop+0x33a>
     720:	8829      	ldrh	r1, [r5, #0]
  int32_t v = (int32_t)raw * 1000 / 4095;
     722:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  if (v > hi) return hi;
     726:	4a82      	ldr	r2, [pc, #520]	; (930 <loop+0x508>)
    if (g_watch.t1) OtaConsole::printf("S T1 raw=%u v=%.3f thr=%d\r\n",  g_t1, (double)g_t1*ADC_VREF/ADC_MAX, (int)scaleThrottle(g_t1));
     728:	ee07 1a90 	vmov	s15, r1
  int32_t v = (int32_t)raw * 1000 / 4095;
     72c:	fb03 f001 	mul.w	r0, r3, r1
    if (g_watch.t1) OtaConsole::printf("S T1 raw=%u v=%.3f thr=%d\r\n",  g_t1, (double)g_t1*ADC_VREF/ADC_MAX, (int)scaleThrottle(g_t1));
     730:	ed9f 6b75 	vldr	d6, [pc, #468]	; 908 <loop+0x4e0>
     734:	eeb8 7b67 	vcvt.f64.u32	d7, s15
  if (v > hi) return hi;
     738:	4290      	cmp	r0, r2
    if (g_watch.t1) OtaConsole::printf("S T1 raw=%u v=%.3f thr=%d\r\n",  g_t1, (double)g_t1*ADC_VREF/ADC_MAX, (int)scaleThrottle(g_t1));
     73a:	ed9f 5b75 	vldr	d5, [pc, #468]	; 910 <loop+0x4e8>
     73e:	ee27 7b06 	vmul.f64	d7, d7, d6
     742:	ee87 6b05 	vdiv.f64	d6, d7, d5
  if (v > hi) return hi;
     746:	dc06      	bgt.n	756 <loop+0x32e>
  int32_t v = (int32_t)raw * 1000 / 4095;
     748:	4b7a      	ldr	r3, [pc, #488]	; (934 <loop+0x50c>)
     74a:	fba3 2300 	umull	r2, r3, r3, r0
     74e:	1ac0      	subs	r0, r0, r3
     750:	eb03 0350 	add.w	r3, r3, r0, lsr #1
     754:	0adb      	lsrs	r3, r3, #11
    if (g_watch.t1) OtaConsole::printf("S T1 raw=%u v=%.3f thr=%d\r\n",  g_t1, (double)g_t1*ADC_VREF/ADC_MAX, (int)scaleThrottle(g_t1));
     756:	9300      	str	r3, [sp, #0]
     758:	4877      	ldr	r0, [pc, #476]	; (938 <loop+0x510>)
     75a:	ec53 2b16 	vmov	r2, r3, d6
     75e:	f7ff fe2f 	bl	3c0 <OtaConsole::printf(char const*, ...)>
    if (g_watch.t2) OtaConsole::printf("S T2 raw=%u v=%.3f thr=%d\r\n",  g_t2, (double)g_t2*ADC_VREF/ADC_MAX, (int)scaleThrottle(g_t2));
     762:	f899 3003 	ldrb.w	r3, [r9, #3]
     766:	b303      	cbz	r3, 7aa <loop+0x382>
     768:	8839      	ldrh	r1, [r7, #0]
  int32_t v = (int32_t)raw * 1000 / 4095;
     76a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  if (v > hi) return hi;
     76e:	4a70      	ldr	r2, [pc, #448]	; (930 <loop+0x508>)
    if (g_watch.t2) OtaConsole::printf("S T2 raw=%u v=%.3f thr=%d\r\n",  g_t2, (double)g_t2*ADC_VREF/ADC_MAX, (int)scaleThrottle(g_t2));
     770:	ee07 1a90 	vmov	s15, r1
  int32_t v = (int32_t)raw * 1000 / 4095;
     774:	fb03 f001 	mul.w	r0, r3, r1
    if (g_watch.t2) OtaConsole::printf("S T2 raw=%u v=%.3f thr=%d\r\n",  g_t2, (double)g_t2*ADC_VREF/ADC_MAX, (int)scaleThrottle(g_t2));
     778:	ed9f 6b63 	vldr	d6, [pc, #396]	; 908 <loop+0x4e0>
     77c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
  if (v > hi) return hi;
     780:	4290      	cmp	r0, r2
    if (g_watch.t2) OtaConsole::printf("S T2 raw=%u v=%.3f thr=%d\r\n",  g_t2, (double)g_t2*ADC_VREF/ADC_MAX, (int)scaleThrottle(g_t2));
     782:	ed9f 5b63 	vldr	d5, [pc, #396]	; 910 <loop+0x4e8>
     786:	ee27 7b06 	vmul.f64	d7, d7, d6
     78a:	ee87 6b05 	vdiv.f64	d6, d7, d5
  if (v > hi) return hi;
     78e:	dc06      	bgt.n	79e <loop+0x376>
  int32_t v = (int32_t)raw * 1000 / 4095;
     790:	4b68      	ldr	r3, [pc, #416]	; (934 <loop+0x50c>)
     792:	fba3 2300 	umull	r2, r3, r3, r0
     796:	1ac0      	subs	r0, r0, r3
     798:	eb03 0350 	add.w	r3, r3, r0, lsr #1
     79c:	0adb      	lsrs	r3, r3, #11
    if (g_watch.t2) OtaConsole::printf("S T2 raw=%u v=%.3f thr=%d\r\n",  g_t2, (double)g_t2*ADC_VREF/ADC_MAX, (int)scaleThrottle(g_t2));
     79e:	9300      	str	r3, [sp, #0]
     7a0:	4866      	ldr	r0, [pc, #408]	; (93c <loop+0x514>)
     7a2:	ec53 2b16 	vmov	r2, r3, d6
     7a6:	f7ff fe0b 	bl	3c0 <OtaConsole::printf(char const*, ...)>
    if (g_watch.fnr) {
     7aa:	f899 3004 	ldrb.w	r3, [r9, #4]
     7ae:	b163      	cbz	r3, 7ca <loop+0x3a2>
      const char* s = (g_fnr==FNR_FWD)?"FWD":(g_fnr==FNR_REV)?"REV":"NEU";
     7b0:	f89a 3000 	ldrb.w	r3, [sl]
     7b4:	2b01      	cmp	r3, #1
     7b6:	f000 80fd 	beq.w	9b4 <loop+0x58c>
     7ba:	4961      	ldr	r1, [pc, #388]	; (940 <loop+0x518>)
     7bc:	4a61      	ldr	r2, [pc, #388]	; (944 <loop+0x51c>)
     7be:	2b02      	cmp	r3, #2
     7c0:	bf18      	it	ne
     7c2:	4611      	movne	r1, r2
      OtaConsole::printf("S FNR=%s\r\n", s);
     7c4:	4860      	ldr	r0, [pc, #384]	; (948 <loop+0x520>)
     7c6:	f7ff fdfb 	bl	3c0 <OtaConsole::printf(char const*, ...)>
  bool useRc = g_srcRc;
     7ca:	4b60      	ldr	r3, [pc, #384]	; (94c <loop+0x524>)
  int16_t steer = useRc ? scaleSteer(g_s2) : scaleSteer(g_s1);
     7cc:	781b      	ldrb	r3, [r3, #0]
     7ce:	2b00      	cmp	r3, #0
     7d0:	d04f      	beq.n	872 <loop+0x44a>
  int32_t v = (int32_t)raw - 2048;
     7d2:	f8b8 2000 	ldrh.w	r2, [r8]
  v = (v * 1000) / 2048;
     7d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  if (v > hi) return hi;
     7da:	4952      	ldr	r1, [pc, #328]	; (924 <loop+0x4fc>)
  int32_t v = (int32_t)raw - 2048;
     7dc:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
  v = (v * 1000) / 2048;
     7e0:	fb03 f202 	mul.w	r2, r3, r2
  if (v > hi) return hi;
     7e4:	428a      	cmp	r2, r1
     7e6:	dc04      	bgt.n	7f2 <loop+0x3ca>
  v = (v * 1000) / 2048;
     7e8:	1e13      	subs	r3, r2, #0
     7ea:	bfb8      	it	lt
     7ec:	f203 73ff 	addwlt	r3, r3, #2047	; 0x7ff
     7f0:	12db      	asrs	r3, r3, #11
  int32_t v = (int32_t)raw * 1000 / 4095;
     7f2:	8839      	ldrh	r1, [r7, #0]
     7f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  if (v > hi) return hi;
     7f8:	484d      	ldr	r0, [pc, #308]	; (930 <loop+0x508>)
  int32_t v = (int32_t)raw * 1000 / 4095;
     7fa:	fb02 f101 	mul.w	r1, r2, r1
  if (v > hi) return hi;
     7fe:	4281      	cmp	r1, r0
     800:	dc06      	bgt.n	810 <loop+0x3e8>
  int32_t v = (int32_t)raw * 1000 / 4095;
     802:	4a4c      	ldr	r2, [pc, #304]	; (934 <loop+0x50c>)
     804:	fba2 0201 	umull	r0, r2, r2, r1
     808:	1a89      	subs	r1, r1, r2
     80a:	eb02 0251 	add.w	r2, r2, r1, lsr #1
     80e:	0ad2      	lsrs	r2, r2, #11
  const char* dirStr = (d.driveDir==DIR_FWD)?"FWD":(d.driveDir==DIR_REV)?"REV":"NEU";
     810:	2000      	movs	r0, #0
     812:	494f      	ldr	r1, [pc, #316]	; (950 <loop+0x528>)
  OtaConsole::printf("S OUT driveDir=%s driveCmd=%d steerCmd=%d steerNeutral=%d\r\n",
     814:	9000      	str	r0, [sp, #0]
     816:	484f      	ldr	r0, [pc, #316]	; (954 <loop+0x52c>)
     818:	f7ff fdd2 	bl	3c0 <OtaConsole::printf(char const*, ...)>
     81c:	e617      	b.n	44e <loop+0x26>
          if (sp2 < 0) a1 = rest;
     81e:	a90c      	add	r1, sp, #48	; 0x30
     820:	a806      	add	r0, sp, #24
     822:	f001 f8d7 	bl	19d4 <String::operator=(String const&)>
     826:	e6a9      	b.n	57c <loop+0x154>
  g_fnr = (fwd && !rev) ? FNR_FWD : (!fwd && rev) ? FNR_REV : FNR_NEU;
     828:	4013      	ands	r3, r2
     82a:	005b      	lsls	r3, r3, #1
     82c:	e726      	b.n	67c <loop+0x254>
     82e:	494a      	ldr	r1, [pc, #296]	; (958 <loop+0x530>)
     830:	a803      	add	r0, sp, #12
     832:	f001 f94f 	bl	1ad4 <String::equals(char const*) const>
        else if (verb == "WATCH") {
     836:	2800      	cmp	r0, #0
     838:	d044      	beq.n	8c4 <loop+0x49c>
     83a:	4948      	ldr	r1, [pc, #288]	; (95c <loop+0x534>)
     83c:	a809      	add	r0, sp, #36	; 0x24
     83e:	f001 f949 	bl	1ad4 <String::equals(char const*) const>
     842:	4607      	mov	r7, r0
     844:	4946      	ldr	r1, [pc, #280]	; (960 <loop+0x538>)
     846:	a809      	add	r0, sp, #36	; 0x24
     848:	f001 f944 	bl	1ad4 <String::equals(char const*) const>
          if (!(on||off)) { Serial.println("usage: WATCH <S1|S2|T1|T2|FNR> ON|OFF"); }
     84c:	ea47 0300 	orr.w	r3, r7, r0
     850:	b2db      	uxtb	r3, r3
     852:	2b00      	cmp	r3, #0
     854:	f040 80b2 	bne.w	9bc <loop+0x594>
	// Discard all received data which has not been read.
        virtual void clear(void) { usb_serial_flush_input(); }
	// Transmit a single byte to your PC
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
	// Transmit a buffer containing any number of bytes to your PC
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     858:	2125      	movs	r1, #37	; 0x25
     85a:	4842      	ldr	r0, [pc, #264]	; (964 <loop+0x53c>)
     85c:	f002 ff16 	bl	368c <usb_serial_write>
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
     860:	4841      	ldr	r0, [pc, #260]	; (968 <loop+0x540>)
     862:	f001 f81f 	bl	18a4 <Print::println()>
     866:	e6ae      	b.n	5c6 <loop+0x19e>
        if (sp1 < 0) { verb = line; }
     868:	4621      	mov	r1, r4
     86a:	a803      	add	r0, sp, #12
     86c:	f001 f8b2 	bl	19d4 <String::operator=(String const&)>
     870:	e687      	b.n	582 <loop+0x15a>
  int32_t v = (int32_t)raw - 2048;
     872:	8832      	ldrh	r2, [r6, #0]
  v = (v * 1000) / 2048;
     874:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  if (v > hi) return hi;
     878:	492a      	ldr	r1, [pc, #168]	; (924 <loop+0x4fc>)
  int32_t v = (int32_t)raw - 2048;
     87a:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
  v = (v * 1000) / 2048;
     87e:	fb03 f202 	mul.w	r2, r3, r2
  if (v > hi) return hi;
     882:	428a      	cmp	r2, r1
     884:	dc04      	bgt.n	890 <loop+0x468>
  v = (v * 1000) / 2048;
     886:	1e13      	subs	r3, r2, #0
     888:	bfb8      	it	lt
     88a:	f203 73ff 	addwlt	r3, r3, #2047	; 0x7ff
     88e:	12db      	asrs	r3, r3, #11
  int32_t v = (int32_t)raw * 1000 / 4095;
     890:	8829      	ldrh	r1, [r5, #0]
     892:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  if (v > hi) return hi;
     896:	4826      	ldr	r0, [pc, #152]	; (930 <loop+0x508>)
  int32_t v = (int32_t)raw * 1000 / 4095;
     898:	fb02 f101 	mul.w	r1, r2, r1
  if (v > hi) return hi;
     89c:	4281      	cmp	r1, r0
     89e:	f300 808b 	bgt.w	9b8 <loop+0x590>
  int32_t v = (int32_t)raw * 1000 / 4095;
     8a2:	4a24      	ldr	r2, [pc, #144]	; (934 <loop+0x50c>)
     8a4:	fba2 0201 	umull	r0, r2, r2, r1
     8a8:	1a89      	subs	r1, r1, r2
     8aa:	eb02 0251 	add.w	r2, r2, r1, lsr #1
     8ae:	f342 21cf 	sbfx	r1, r2, #11, #16
    if (g_fnr == FNR_NEU) {
     8b2:	f89a 2000 	ldrb.w	r2, [sl]
     8b6:	b312      	cbz	r2, 8fe <loop+0x4d6>
    } else if (g_fnr == FNR_FWD) {
     8b8:	2a01      	cmp	r2, #1
  OtaConsole::printf("S OUT driveDir=%s driveCmd=%d steerCmd=%d steerNeutral=%d\r\n",
     8ba:	460a      	mov	r2, r1
    } else if (g_fnr == FNR_FWD) {
     8bc:	d0a8      	beq.n	810 <loop+0x3e8>
  OtaConsole::printf("S OUT driveDir=%s driveCmd=%d steerCmd=%d steerNeutral=%d\r\n",
     8be:	2000      	movs	r0, #0
  const char* dirStr = (d.driveDir==DIR_FWD)?"FWD":(d.driveDir==DIR_REV)?"REV":"NEU";
     8c0:	491f      	ldr	r1, [pc, #124]	; (940 <loop+0x518>)
     8c2:	e7a7      	b.n	814 <loop+0x3ec>
     8c4:	4929      	ldr	r1, [pc, #164]	; (96c <loop+0x544>)
     8c6:	a803      	add	r0, sp, #12
     8c8:	f001 f904 	bl	1ad4 <String::equals(char const*) const>
        else if (verb == "HELP") {
     8cc:	2800      	cmp	r0, #0
     8ce:	f000 8080 	beq.w	9d2 <loop+0x5aa>
     8d2:	2109      	movs	r1, #9
     8d4:	4826      	ldr	r0, [pc, #152]	; (970 <loop+0x548>)
     8d6:	f002 fed9 	bl	368c <usb_serial_write>
     8da:	4823      	ldr	r0, [pc, #140]	; (968 <loop+0x540>)
     8dc:	f000 ffe2 	bl	18a4 <Print::println()>
     8e0:	2110      	movs	r1, #16
     8e2:	4824      	ldr	r0, [pc, #144]	; (974 <loop+0x54c>)
     8e4:	f002 fed2 	bl	368c <usb_serial_write>
     8e8:	481f      	ldr	r0, [pc, #124]	; (968 <loop+0x540>)
     8ea:	f000 ffdb 	bl	18a4 <Print::println()>
     8ee:	211e      	movs	r1, #30
     8f0:	4821      	ldr	r0, [pc, #132]	; (978 <loop+0x550>)
     8f2:	f002 fecb 	bl	368c <usb_serial_write>
     8f6:	481c      	ldr	r0, [pc, #112]	; (968 <loop+0x540>)
     8f8:	f000 ffd4 	bl	18a4 <Print::println()>
     8fc:	e663      	b.n	5c6 <loop+0x19e>
     8fe:	2001      	movs	r0, #1
  const char* dirStr = (d.driveDir==DIR_FWD)?"FWD":(d.driveDir==DIR_REV)?"REV":"NEU";
     900:	4910      	ldr	r1, [pc, #64]	; (944 <loop+0x51c>)
     902:	e787      	b.n	814 <loop+0x3ec>
     904:	f3af 8000 	nop.w
     908:	60000000 	.word	0x60000000
     90c:	400a6666 	.word	0x400a6666
     910:	00000000 	.word	0x00000000
     914:	40affe00 	.word	0x40affe00
     918:	20008e88 	.word	0x20008e88
     91c:	20008e8c 	.word	0x20008e8c
     920:	20008e8e 	.word	0x20008e8e
     924:	001f47ff 	.word	0x001f47ff
     928:	20007700 	.word	0x20007700
     92c:	20007720 	.word	0x20007720
     930:	003e8c16 	.word	0x003e8c16
     934:	00100101 	.word	0x00100101
     938:	20007740 	.word	0x20007740
     93c:	2000775c 	.word	0x2000775c
     940:	200076f0 	.word	0x200076f0
     944:	200076e8 	.word	0x200076e8
     948:	20007778 	.word	0x20007778
     94c:	20008262 	.word	0x20008262
     950:	200076ec 	.word	0x200076ec
     954:	20007784 	.word	0x20007784
     958:	20007830 	.word	0x20007830
     95c:	20007838 	.word	0x20007838
     960:	2000783c 	.word	0x2000783c
     964:	20007840 	.word	0x20007840
     968:	20007b88 	.word	0x20007b88
     96c:	200078a4 	.word	0x200078a4
     970:	200078ac 	.word	0x200078ac
     974:	200078b8 	.word	0x200078b8
     978:	200078cc 	.word	0x200078cc
     97c:	20008e8a 	.word	0x20008e8a
     980:	20008df8 	.word	0x20008df8
     984:	20008e96 	.word	0x20008e96
     988:	4934      	ldr	r1, [pc, #208]	; (a5c <loop+0x634>)
     98a:	a806      	add	r0, sp, #24
     98c:	f001 f8a2 	bl	1ad4 <String::equals(char const*) const>
          } else if (a1 == "RC") {
     990:	4607      	mov	r7, r0
     992:	bb30      	cbnz	r0, 9e2 <loop+0x5ba>
     994:	4932      	ldr	r1, [pc, #200]	; (a60 <loop+0x638>)
     996:	a806      	add	r0, sp, #24
     998:	f001 f89c 	bl	1ad4 <String::equals(char const*) const>
          } else if (a1 == "LOCAL") {
     99c:	2800      	cmp	r0, #0
     99e:	d033      	beq.n	a08 <loop+0x5e0>
            g_srcRc = false; Serial.println("[MyApp] SRC set to local");
     9a0:	4b30      	ldr	r3, [pc, #192]	; (a64 <loop+0x63c>)
     9a2:	2118      	movs	r1, #24
     9a4:	4830      	ldr	r0, [pc, #192]	; (a68 <loop+0x640>)
     9a6:	701f      	strb	r7, [r3, #0]
     9a8:	f002 fe70 	bl	368c <usb_serial_write>
     9ac:	482f      	ldr	r0, [pc, #188]	; (a6c <loop+0x644>)
     9ae:	f000 ff79 	bl	18a4 <Print::println()>
     9b2:	e608      	b.n	5c6 <loop+0x19e>
      const char* s = (g_fnr==FNR_FWD)?"FWD":(g_fnr==FNR_REV)?"REV":"NEU";
     9b4:	492e      	ldr	r1, [pc, #184]	; (a70 <loop+0x648>)
     9b6:	e705      	b.n	7c4 <loop+0x39c>
     9b8:	4611      	mov	r1, r2
     9ba:	e77a      	b.n	8b2 <loop+0x48a>
          bool on = (a2 == "ON");
     9bc:	3f00      	subs	r7, #0
     9be:	492d      	ldr	r1, [pc, #180]	; (a74 <loop+0x64c>)
     9c0:	a806      	add	r0, sp, #24
     9c2:	bf18      	it	ne
     9c4:	2701      	movne	r7, #1
     9c6:	f001 f885 	bl	1ad4 <String::equals(char const*) const>
            if (a1=="S1") g_watch.s1 = on;
     9ca:	b1a8      	cbz	r0, 9f8 <loop+0x5d0>
     9cc:	4b2a      	ldr	r3, [pc, #168]	; (a78 <loop+0x650>)
     9ce:	701f      	strb	r7, [r3, #0]
     9d0:	e5f9      	b.n	5c6 <loop+0x19e>
     9d2:	2111      	movs	r1, #17
     9d4:	4829      	ldr	r0, [pc, #164]	; (a7c <loop+0x654>)
     9d6:	f002 fe59 	bl	368c <usb_serial_write>
     9da:	4824      	ldr	r0, [pc, #144]	; (a6c <loop+0x644>)
     9dc:	f000 ff62 	bl	18a4 <Print::println()>
     9e0:	e5f1      	b.n	5c6 <loop+0x19e>
            g_srcRc = true;  Serial.println("[MyApp] SRC set to rc");
     9e2:	4b20      	ldr	r3, [pc, #128]	; (a64 <loop+0x63c>)
     9e4:	2201      	movs	r2, #1
     9e6:	2115      	movs	r1, #21
     9e8:	4825      	ldr	r0, [pc, #148]	; (a80 <loop+0x658>)
     9ea:	701a      	strb	r2, [r3, #0]
     9ec:	f002 fe4e 	bl	368c <usb_serial_write>
     9f0:	481e      	ldr	r0, [pc, #120]	; (a6c <loop+0x644>)
     9f2:	f000 ff57 	bl	18a4 <Print::println()>
     9f6:	e5e6      	b.n	5c6 <loop+0x19e>
     9f8:	4922      	ldr	r1, [pc, #136]	; (a84 <loop+0x65c>)
     9fa:	a806      	add	r0, sp, #24
     9fc:	f001 f86a 	bl	1ad4 <String::equals(char const*) const>
            else if (a1=="S2") g_watch.s2 = on;
     a00:	b150      	cbz	r0, a18 <loop+0x5f0>
     a02:	4b1d      	ldr	r3, [pc, #116]	; (a78 <loop+0x650>)
     a04:	705f      	strb	r7, [r3, #1]
     a06:	e5de      	b.n	5c6 <loop+0x19e>
     a08:	2115      	movs	r1, #21
     a0a:	481f      	ldr	r0, [pc, #124]	; (a88 <loop+0x660>)
     a0c:	f002 fe3e 	bl	368c <usb_serial_write>
     a10:	4816      	ldr	r0, [pc, #88]	; (a6c <loop+0x644>)
     a12:	f000 ff47 	bl	18a4 <Print::println()>
     a16:	e5d6      	b.n	5c6 <loop+0x19e>
     a18:	491c      	ldr	r1, [pc, #112]	; (a8c <loop+0x664>)
     a1a:	a806      	add	r0, sp, #24
     a1c:	f001 f85a 	bl	1ad4 <String::equals(char const*) const>
            else if (a1=="T1") g_watch.t1 = on;
     a20:	b110      	cbz	r0, a28 <loop+0x600>
     a22:	4b15      	ldr	r3, [pc, #84]	; (a78 <loop+0x650>)
     a24:	709f      	strb	r7, [r3, #2]
     a26:	e5ce      	b.n	5c6 <loop+0x19e>
     a28:	4919      	ldr	r1, [pc, #100]	; (a90 <loop+0x668>)
     a2a:	a806      	add	r0, sp, #24
     a2c:	f001 f852 	bl	1ad4 <String::equals(char const*) const>
            else if (a1=="T2") g_watch.t2 = on;
     a30:	b110      	cbz	r0, a38 <loop+0x610>
     a32:	4b11      	ldr	r3, [pc, #68]	; (a78 <loop+0x650>)
     a34:	70df      	strb	r7, [r3, #3]
     a36:	e5c6      	b.n	5c6 <loop+0x19e>
     a38:	4916      	ldr	r1, [pc, #88]	; (a94 <loop+0x66c>)
     a3a:	a806      	add	r0, sp, #24
     a3c:	f001 f84a 	bl	1ad4 <String::equals(char const*) const>
            else if (a1=="FNR") g_watch.fnr = on;
     a40:	b110      	cbz	r0, a48 <loop+0x620>
     a42:	4b0d      	ldr	r3, [pc, #52]	; (a78 <loop+0x650>)
     a44:	711f      	strb	r7, [r3, #4]
     a46:	e5be      	b.n	5c6 <loop+0x19e>
							  return write((const uint8_t *)str, strlen(str)); }
     a48:	2225      	movs	r2, #37	; 0x25
     a4a:	4913      	ldr	r1, [pc, #76]	; (a98 <loop+0x670>)
     a4c:	4807      	ldr	r0, [pc, #28]	; (a6c <loop+0x644>)
     a4e:	f002 faed 	bl	302c <usb_serial_class::write(unsigned char const*, unsigned int)>
	size_t println(const char s[])			{ return print(s) + println(); }
     a52:	4806      	ldr	r0, [pc, #24]	; (a6c <loop+0x644>)
     a54:	f000 ff26 	bl	18a4 <Print::println()>
     a58:	e5b5      	b.n	5c6 <loop+0x19e>
     a5a:	bf00      	nop
     a5c:	200077d8 	.word	0x200077d8
     a60:	200077f4 	.word	0x200077f4
     a64:	20008262 	.word	0x20008262
     a68:	200077fc 	.word	0x200077fc
     a6c:	20007b88 	.word	0x20007b88
     a70:	200076ec 	.word	0x200076ec
     a74:	20007868 	.word	0x20007868
     a78:	20008df8 	.word	0x20008df8
     a7c:	200078ec 	.word	0x200078ec
     a80:	200077dc 	.word	0x200077dc
     a84:	2000786c 	.word	0x2000786c
     a88:	20007818 	.word	0x20007818
     a8c:	20007870 	.word	0x20007870
     a90:	20007874 	.word	0x20007874
     a94:	20007878 	.word	0x20007878
     a98:	2000787c 	.word	0x2000787c

00000a9c <setup>:
void setup() {
     a9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  pinMode(LED_PIN, OUTPUT);
     aa0:	2101      	movs	r1, #1
     aa2:	200d      	movs	r0, #13
     aa4:	f001 fa2a 	bl	1efc <pinMode>
  digitalWrite(LED_PIN, LOW);
     aa8:	2100      	movs	r1, #0
     aaa:	200d      	movs	r0, #13
		uint32_t millis_begin = systick_millis_count;
     aac:	4d29      	ldr	r5, [pc, #164]	; (b54 <setup+0xb8>)
     aae:	f001 f9e9 	bl	1e84 <digitalWrite>
  pinMode(PIN_FWD, INPUT_PULLUP);
     ab2:	2102      	movs	r1, #2
     ab4:	200a      	movs	r0, #10
     ab6:	4c28      	ldr	r4, [pc, #160]	; (b58 <setup+0xbc>)
     ab8:	f001 fa20 	bl	1efc <pinMode>
  pinMode(PIN_REV, INPUT_PULLUP);
     abc:	2102      	movs	r1, #2
     abe:	200b      	movs	r0, #11
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     ac0:	4f26      	ldr	r7, [pc, #152]	; (b5c <setup+0xc0>)
     ac2:	f001 fa1b 	bl	1efc <pinMode>
static inline void analogReadResolution(unsigned int bits) { analogReadRes(bits); }
     ac6:	200c      	movs	r0, #12
     ac8:	f001 f914 	bl	1cf4 <analogReadRes>
  analogReadAveraging(8);
     acc:	2008      	movs	r0, #8
     ace:	f001 f941 	bl	1d54 <analogReadAveraging>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     ad2:	f8df 90a8 	ldr.w	r9, [pc, #168]	; b7c <setup+0xe0>
		uint32_t millis_begin = systick_millis_count;
     ad6:	682e      	ldr	r6, [r5, #0]
				if (elapsed > 750) break;
     ad8:	f240 28ee 	movw	r8, #750	; 0x2ee
		yield();
     adc:	f002 fe54 	bl	3788 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     ae0:	7823      	ldrb	r3, [r4, #0]
     ae2:	b353      	cbz	r3, b3a <setup+0x9e>
     ae4:	783b      	ldrb	r3, [r7, #0]
     ae6:	07db      	lsls	r3, r3, #31
     ae8:	d527      	bpl.n	b3a <setup+0x9e>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     aea:	682b      	ldr	r3, [r5, #0]
     aec:	f8d9 2000 	ldr.w	r2, [r9]
     af0:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     af2:	2b0e      	cmp	r3, #14
     af4:	d921      	bls.n	b3a <setup+0x9e>
  Serial2.begin(115200);       // to ESP32 (pins 7/8 on Teensy)
     af6:	4c1a      	ldr	r4, [pc, #104]	; (b60 <setup+0xc4>)
     af8:	2200      	movs	r2, #0
     afa:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
     afe:	4620      	mov	r0, r4
     b00:	f000 fbce 	bl	12a0 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)>
  OtaUpdater::begin(Serial2);
     b04:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
     b08:	4620      	mov	r0, r4
     b0a:	f000 f84b 	bl	ba4 <OtaUpdater::begin(HardwareSerial&, unsigned long)>
  OtaUpdater::setAppVersion(APP_FW_VERSION);  
     b0e:	4815      	ldr	r0, [pc, #84]	; (b64 <setup+0xc8>)
     b10:	f000 f836 	bl	b80 <OtaUpdater::setAppVersion(char const*)>
    s = &out;
     b14:	4814      	ldr	r0, [pc, #80]	; (b68 <setup+0xcc>)
    enabled = true;
     b16:	4b15      	ldr	r3, [pc, #84]	; (b6c <setup+0xd0>)
     b18:	2201      	movs	r2, #1
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     b1a:	210c      	movs	r1, #12
    s = &out;
     b1c:	6004      	str	r4, [r0, #0]
     b1e:	4814      	ldr	r0, [pc, #80]	; (b70 <setup+0xd4>)
    enabled = true;
     b20:	701a      	strb	r2, [r3, #0]
     b22:	f002 fdb3 	bl	368c <usb_serial_write>
     b26:	4813      	ldr	r0, [pc, #76]	; (b74 <setup+0xd8>)
     b28:	f000 febc 	bl	18a4 <Print::println()>
  OtaConsole::printf("S MyApp FW=%s  (blink=%d ms)\r\n", APP_FW_VERSION, BLINK_MS);
     b2c:	2232      	movs	r2, #50	; 0x32
     b2e:	490d      	ldr	r1, [pc, #52]	; (b64 <setup+0xc8>)
     b30:	4811      	ldr	r0, [pc, #68]	; (b78 <setup+0xdc>)
     b32:	f7ff fc45 	bl	3c0 <OtaConsole::printf(char const*, ...)>
}
     b36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			uint32_t elapsed = systick_millis_count - millis_begin;
     b3a:	682b      	ldr	r3, [r5, #0]
			if (usb_configuration) {
     b3c:	7822      	ldrb	r2, [r4, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
     b3e:	1b9b      	subs	r3, r3, r6
			if (usb_configuration) {
     b40:	b12a      	cbz	r2, b4e <setup+0xb2>
				if (elapsed > 2000) break;
     b42:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
     b46:	d8d6      	bhi.n	af6 <setup+0x5a>
			yield();
     b48:	f002 fe1e 	bl	3788 <yield>
     b4c:	e7c6      	b.n	adc <setup+0x40>
				if (elapsed > 750) break;
     b4e:	4543      	cmp	r3, r8
     b50:	d9fa      	bls.n	b48 <setup+0xac>
     b52:	e7d0      	b.n	af6 <setup+0x5a>
     b54:	20008e6c 	.word	0x20008e6c
     b58:	20008ea4 	.word	0x20008ea4
     b5c:	20008ea3 	.word	0x20008ea3
     b60:	20007b98 	.word	0x20007b98
     b64:	20007938 	.word	0x20007938
     b68:	20007c60 	.word	0x20007c60
     b6c:	20008263 	.word	0x20008263
     b70:	20007944 	.word	0x20007944
     b74:	20007b88 	.word	0x20007b88
     b78:	20007954 	.word	0x20007954
     b7c:	20008e7c 	.word	0x20008e7c

00000b80 <OtaUpdater::setAppVersion(char const*)>:
static const char*     LOADER_ID = "FlasherX v2.4 (in-app)";

// === App-provided version/name (set from your .ino via setAppVersion) ===
static const char* _appVersion = "MyApp";
void OtaUpdater::setAppVersion(const char* name) {
  _appVersion = (name && name[0]) ? name : "MyApp";
     b80:	b138      	cbz	r0, b92 <OtaUpdater::setAppVersion(char const*)+0x12>
     b82:	4b06      	ldr	r3, [pc, #24]	; (b9c <OtaUpdater::setAppVersion(char const*)+0x1c>)
     b84:	7802      	ldrb	r2, [r0, #0]
     b86:	2a00      	cmp	r2, #0
     b88:	bf08      	it	eq
     b8a:	4618      	moveq	r0, r3
     b8c:	4b04      	ldr	r3, [pc, #16]	; (ba0 <OtaUpdater::setAppVersion(char const*)+0x20>)
     b8e:	6018      	str	r0, [r3, #0]
}
     b90:	4770      	bx	lr
  _appVersion = (name && name[0]) ? name : "MyApp";
     b92:	4802      	ldr	r0, [pc, #8]	; (b9c <OtaUpdater::setAppVersion(char const*)+0x1c>)
     b94:	4b02      	ldr	r3, [pc, #8]	; (ba0 <OtaUpdater::setAppVersion(char const*)+0x20>)
     b96:	6018      	str	r0, [r3, #0]
}
     b98:	4770      	bx	lr
     b9a:	bf00      	nop
     b9c:	200003d0 	.word	0x200003d0
     ba0:	20007bf8 	.word	0x20007bf8

00000ba4 <OtaUpdater::begin(HardwareSerial&, unsigned long)>:
static void handleLine(const char* line);
static void beginHex();
static void handleHexRecord(const char* rec);
static void endHex();

void OtaUpdater::begin(HardwareSerial& otaPort, uint32_t baud) {
     ba4:	b538      	push	{r3, r4, r5, lr}
  _ota  = &otaPort;
  _baud = baud ? baud : 115200;
     ba6:	2900      	cmp	r1, #0
  _ota->begin(_baud);
     ba8:	6804      	ldr	r4, [r0, #0]
  _ota  = &otaPort;
     baa:	4d0d      	ldr	r5, [pc, #52]	; (be0 <OtaUpdater::begin(HardwareSerial&, unsigned long)+0x3c>)
  _ota->begin(_baud);
     bac:	f04f 0200 	mov.w	r2, #0
     bb0:	69e3      	ldr	r3, [r4, #28]
     bb2:	bf08      	it	eq
     bb4:	f44f 31e1 	moveq.w	r1, #115200	; 0x1c200
  _ota  = &otaPort;
     bb8:	6028      	str	r0, [r5, #0]
  _ota->begin(_baud);
     bba:	4798      	blx	r3
  ota.handshakeReady = false;
     bbc:	4b09      	ldr	r3, [pc, #36]	; (be4 <OtaUpdater::begin(HardwareSerial&, unsigned long)+0x40>)
     bbe:	2200      	movs	r2, #0
  hex_info_reset(&ota.hex, ota.hexData);
     bc0:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
     bc4:	f103 0078 	add.w	r0, r3, #120	; 0x78
  ota.handshakeReady = false;
     bc8:	801a      	strh	r2, [r3, #0]
  ota.fatal          = false;
     bca:	709a      	strb	r2, [r3, #2]
  ota.badLines       = 0;
     bcc:	615a      	str	r2, [r3, #20]
  ota.lastError[0]   = 0;
     bce:	761a      	strb	r2, [r3, #24]
  ota.bufferSize     = 0;
     bd0:	e9c3 2201 	strd	r2, r2, [r3, #4]
  ota.okLines        = 0;
     bd4:	e9c3 2203 	strd	r2, r2, [r3, #12]
  resetOtaSession();
}
     bd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hex_info_reset(&ota.hex, ota.hexData);
     bdc:	f7ff ba98 	b.w	110 <hex_info_reset(hex_info_t*, char*)>
     be0:	20007c5c 	.word	0x20007c5c
     be4:	20008880 	.word	0x20008880

00000be8 <OtaUpdater::inProgress()>:

bool OtaUpdater::inProgress() { return ota.inProgress; }
     be8:	4b01      	ldr	r3, [pc, #4]	; (bf0 <OtaUpdater::inProgress()+0x8>)
     bea:	7858      	ldrb	r0, [r3, #1]
     bec:	4770      	bx	lr
     bee:	bf00      	nop
     bf0:	20008880 	.word	0x20008880

00000bf4 <OtaUpdater::tick()>:

const char* OtaUpdater::loaderId() { return LOADER_ID; }

void OtaUpdater::tick() {
     bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     bf8:	4caa      	ldr	r4, [pc, #680]	; (ea4 <OtaUpdater::tick()+0x2b0>)
    handleHexRecord(line + 2);
    return;
  }

  // Commands
  if (!strncmp(line, "HELLO", 5)) {
     bfa:	4eab      	ldr	r6, [pc, #684]	; (ea8 <OtaUpdater::tick()+0x2b4>)
    if (!strcmp(tok, OTA_TOKEN)) { ota.handshakeReady = true; sendLine("READY"); }
    else { ota.handshakeReady = false; sendLine("NACK"); }
    return;
  }

  if (!strcmp(line, "BEGIN HEX")) { beginHex(); return; }
     bfc:	4fab      	ldr	r7, [pc, #684]	; (eac <OtaUpdater::tick()+0x2b8>)
  if (!strcmp(line, "END"))       { endHex();   return; }
     bfe:	f8df 82f4 	ldr.w	r8, [pc, #756]	; ef4 <OtaUpdater::tick()+0x300>
  if (!strcmp(line, "PING"))      { sendLine("PONG"); return; }
     c02:	f8df 92f4 	ldr.w	r9, [pc, #756]	; ef8 <OtaUpdater::tick()+0x304>

  // VERSION: now reports the string set from your .ino
  if (!strcmp(line, "VERSION")) {
     c06:	f8df b2f4 	ldr.w	fp, [pc, #756]	; efc <OtaUpdater::tick()+0x308>
void OtaUpdater::tick() {
     c0a:	ed2d 8b02 	vpush	{d8}
     c0e:	b087      	sub	sp, #28
  while (_ota->available()) {
     c10:	6820      	ldr	r0, [r4, #0]
     c12:	6803      	ldr	r3, [r0, #0]
     c14:	691b      	ldr	r3, [r3, #16]
     c16:	4798      	blx	r3
     c18:	b1d0      	cbz	r0, c50 <OtaUpdater::tick()+0x5c>
    char c = (char)_ota->read();
     c1a:	6820      	ldr	r0, [r4, #0]
     c1c:	6803      	ldr	r3, [r0, #0]
     c1e:	695b      	ldr	r3, [r3, #20]
     c20:	4798      	blx	r3
     c22:	b2c0      	uxtb	r0, r0
    if (c == '\r') continue;
     c24:	280d      	cmp	r0, #13
     c26:	d0f3      	beq.n	c10 <OtaUpdater::tick()+0x1c>
    if (c == '\n') {
     c28:	280a      	cmp	r0, #10
     c2a:	d008      	beq.n	c3e <OtaUpdater::tick()+0x4a>
    } else if (n + 1 < sizeof(buf)) {
     c2c:	4aa0      	ldr	r2, [pc, #640]	; (eb0 <OtaUpdater::tick()+0x2bc>)
     c2e:	6813      	ldr	r3, [r2, #0]
     c30:	1c59      	adds	r1, r3, #1
     c32:	29bf      	cmp	r1, #191	; 0xbf
     c34:	d8ec      	bhi.n	c10 <OtaUpdater::tick()+0x1c>
      buf[n++] = c;
     c36:	6011      	str	r1, [r2, #0]
     c38:	4a9e      	ldr	r2, [pc, #632]	; (eb4 <OtaUpdater::tick()+0x2c0>)
     c3a:	54d0      	strb	r0, [r2, r3]
     c3c:	e7e8      	b.n	c10 <OtaUpdater::tick()+0x1c>
      buf[n] = 0;
     c3e:	4d9c      	ldr	r5, [pc, #624]	; (eb0 <OtaUpdater::tick()+0x2bc>)
     c40:	2200      	movs	r2, #0
     c42:	489c      	ldr	r0, [pc, #624]	; (eb4 <OtaUpdater::tick()+0x2c0>)
     c44:	682b      	ldr	r3, [r5, #0]
     c46:	54c2      	strb	r2, [r0, r3]
      if (n) handleLine(buf);
     c48:	b93b      	cbnz	r3, c5a <OtaUpdater::tick()+0x66>
      n = 0;
     c4a:	2300      	movs	r3, #0
     c4c:	602b      	str	r3, [r5, #0]
     c4e:	e7df      	b.n	c10 <OtaUpdater::tick()+0x1c>
}
     c50:	b007      	add	sp, #28
     c52:	ecbd 8b02 	vpop	{d8}
     c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!line || !line[0]) return;
     c5a:	7803      	ldrb	r3, [r0, #0]
     c5c:	2b00      	cmp	r3, #0
     c5e:	d0f4      	beq.n	c4a <OtaUpdater::tick()+0x56>
  if (line[0] == 'L' && line[1] == ' ') {
     c60:	2b4c      	cmp	r3, #76	; 0x4c
     c62:	f000 8099 	beq.w	d98 <OtaUpdater::tick()+0x1a4>
  if (!strncmp(line, "HELLO", 5)) {
     c66:	6803      	ldr	r3, [r0, #0]
     c68:	42b3      	cmp	r3, r6
     c6a:	f000 80c2 	beq.w	df2 <OtaUpdater::tick()+0x1fe>
  if (!strcmp(line, "BEGIN HEX")) { beginHex(); return; }
     c6e:	6803      	ldr	r3, [r0, #0]
     c70:	42bb      	cmp	r3, r7
     c72:	f000 80e1 	beq.w	e38 <OtaUpdater::tick()+0x244>
  if (!strcmp(line, "END"))       { endHex();   return; }
     c76:	6803      	ldr	r3, [r0, #0]
     c78:	4543      	cmp	r3, r8
     c7a:	d013      	beq.n	ca4 <OtaUpdater::tick()+0xb0>
  if (!strcmp(line, "PING"))      { sendLine("PONG"); return; }
     c7c:	454b      	cmp	r3, r9
     c7e:	f000 8154 	beq.w	f2a <OtaUpdater::tick()+0x336>
  if (!strcmp(line, "VERSION")) {
     c82:	6803      	ldr	r3, [r0, #0]
     c84:	455b      	cmp	r3, fp
     c86:	f000 8158 	beq.w	f3a <OtaUpdater::tick()+0x346>
  _ota->print(s);
     c8a:	6820      	ldr	r0, [r4, #0]
							  return write((const uint8_t *)str, strlen(str)); }
     c8c:	2203      	movs	r2, #3
     c8e:	498a      	ldr	r1, [pc, #552]	; (eb8 <OtaUpdater::tick()+0x2c4>)
     c90:	6803      	ldr	r3, [r0, #0]
     c92:	685b      	ldr	r3, [r3, #4]
     c94:	4798      	blx	r3
    _ota->print("FW ");
    _ota->print(_appVersion);
    _ota->print("\r\n");
    _ota->print("FLASHERX ");
    _ota->print(LOADER_ID);
    _ota->print("\r\n");
     c96:	6820      	ldr	r0, [r4, #0]
     c98:	2202      	movs	r2, #2
     c9a:	4988      	ldr	r1, [pc, #544]	; (ebc <OtaUpdater::tick()+0x2c8>)
     c9c:	6803      	ldr	r3, [r0, #0]
     c9e:	685b      	ldr	r3, [r3, #4]
     ca0:	4798      	blx	r3
     ca2:	e7d2      	b.n	c4a <OtaUpdater::tick()+0x56>
    _ota->print("BAD "); _ota->print(lineNo);  _ota->print("\r\n");
  }
}

static void endHex() {
  if (!ota.inProgress) { sendLine("HEX IDLE"); return; }
     ca4:	f8df a244 	ldr.w	sl, [pc, #580]	; eec <OtaUpdater::tick()+0x2f8>
  if (!strcmp(line, "END"))       { endHex();   return; }
     ca8:	2200      	movs	r2, #0
  if (!ota.inProgress) { sendLine("HEX IDLE"); return; }
     caa:	f89a 3001 	ldrb.w	r3, [sl, #1]
     cae:	2b00      	cmp	r3, #0
     cb0:	f000 8133 	beq.w	f1a <OtaUpdater::tick()+0x326>

  ota.inProgress     = false;
  ota.handshakeReady = false;

  uint32_t payload = 0;
  if (ota.hex.min != 0xFFFFFFFF && ota.hex.max > ota.hex.min) {
     cb4:	f8da 308c 	ldr.w	r3, [sl, #140]	; 0x8c
  ota.handshakeReady = false;
     cb8:	f8aa 2000 	strh.w	r2, [sl]
  if (ota.hex.min != 0xFFFFFFFF && ota.hex.max > ota.hex.min) {
     cbc:	1c59      	adds	r1, r3, #1
     cbe:	f000 818d 	beq.w	fdc <OtaUpdater::tick()+0x3e8>
     cc2:	f8da 1090 	ldr.w	r1, [sl, #144]	; 0x90
     cc6:	428b      	cmp	r3, r1
     cc8:	f080 8188 	bcs.w	fdc <OtaUpdater::tick()+0x3e8>
    payload = ota.hex.max - ota.hex.min;
     ccc:	1acb      	subs	r3, r1, r3
     cce:	9302      	str	r3, [sp, #8]
  }

  bool success = (!ota.fatal && ota.badLines == 0);
     cd0:	f89a 3002 	ldrb.w	r3, [sl, #2]
     cd4:	2b00      	cmp	r3, #0
     cd6:	f040 815e 	bne.w	f96 <OtaUpdater::tick()+0x3a2>
     cda:	f8da 3014 	ldr.w	r3, [sl, #20]
     cde:	9303      	str	r3, [sp, #12]
     ce0:	2b00      	cmp	r3, #0
     ce2:	f040 8158 	bne.w	f96 <OtaUpdater::tick()+0x3a2>
  if (success && !ota.hex.eof) success = false;
     ce6:	f8da 3094 	ldr.w	r3, [sl, #148]	; 0x94
     cea:	2b00      	cmp	r3, #0
     cec:	f000 8153 	beq.w	f96 <OtaUpdater::tick()+0x3a2>
  if (success && ota.bytes == 0) success = false;
     cf0:	f8da 300c 	ldr.w	r3, [sl, #12]
     cf4:	2b00      	cmp	r3, #0
     cf6:	f000 814e 	beq.w	f96 <OtaUpdater::tick()+0x3a2>
    uint32_t v = *(uint32_t*)(0x40C + ota.bufferAddr);
    if (v != 0xFFFFF9DE) success = false;
  }
#endif

  if (success && !check_flash_id(ota.bufferAddr, payload)) success = false;
     cfa:	9902      	ldr	r1, [sp, #8]
     cfc:	f8da 0004 	ldr.w	r0, [sl, #4]
     d00:	f7ff fb0c 	bl	31c <check_flash_id>
     d04:	2800      	cmp	r0, #0
     d06:	f000 8146 	beq.w	f96 <OtaUpdater::tick()+0x3a2>

  if (success) {
    _ota->print("HEX OK lines="); _ota->print(ota.hex.lines);
     d0a:	6820      	ldr	r0, [r4, #0]
     d0c:	220d      	movs	r2, #13
     d0e:	496c      	ldr	r1, [pc, #432]	; (ec0 <OtaUpdater::tick()+0x2cc>)
     d10:	6803      	ldr	r3, [r0, #0]
     d12:	685b      	ldr	r3, [r3, #4]
     d14:	4798      	blx	r3
	size_t print(int n)				{ return print((long)n); }
     d16:	f8da 1098 	ldr.w	r1, [sl, #152]	; 0x98
     d1a:	6820      	ldr	r0, [r4, #0]
     d1c:	f000 fdb6 	bl	188c <Print::print(long)>
    _ota->print(" bytes=");       _ota->print(ota.bytes);
     d20:	6820      	ldr	r0, [r4, #0]
							  return write((const uint8_t *)str, strlen(str)); }
     d22:	2207      	movs	r2, #7
     d24:	4967      	ldr	r1, [pc, #412]	; (ec4 <OtaUpdater::tick()+0x2d0>)
     d26:	6803      	ldr	r3, [r0, #0]
     d28:	685b      	ldr	r3, [r3, #4]
     d2a:	4798      	blx	r3
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     d2c:	9b03      	ldr	r3, [sp, #12]
     d2e:	220a      	movs	r2, #10
     d30:	f8da 100c 	ldr.w	r1, [sl, #12]
     d34:	6820      	ldr	r0, [r4, #0]
     d36:	f000 fddf 	bl	18f8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    _ota->print("\r\n");
     d3a:	6820      	ldr	r0, [r4, #0]
							  return write((const uint8_t *)str, strlen(str)); }
     d3c:	2202      	movs	r2, #2
     d3e:	495f      	ldr	r1, [pc, #380]	; (ebc <OtaUpdater::tick()+0x2c8>)
     d40:	6803      	ldr	r3, [r0, #0]
     d42:	685b      	ldr	r3, [r3, #4]
     d44:	4798      	blx	r3
    _ota->print("APPLIED\r\n");
     d46:	6820      	ldr	r0, [r4, #0]
     d48:	495f      	ldr	r1, [pc, #380]	; (ec8 <OtaUpdater::tick()+0x2d4>)
     d4a:	2209      	movs	r2, #9
     d4c:	6803      	ldr	r3, [r0, #0]
     d4e:	685b      	ldr	r3, [r3, #4]
     d50:	4798      	blx	r3
    _ota->flush();
     d52:	6820      	ldr	r0, [r4, #0]
     d54:	6803      	ldr	r3, [r0, #0]
     d56:	68db      	ldr	r3, [r3, #12]
     d58:	4798      	blx	r3

    flash_move(FLASH_BASE_ADDR, ota.bufferAddr, payload);
     d5a:	9a02      	ldr	r2, [sp, #8]
     d5c:	f8da 1004 	ldr.w	r1, [sl, #4]
     d60:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
     d64:	f7ff f96c 	bl	40 <flash_move>
    REBOOT;
     d68:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     d6c:	4a57      	ldr	r2, [pc, #348]	; (ecc <OtaUpdater::tick()+0x2d8>)
     d6e:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
  ota.handshakeReady = false;
     d72:	2300      	movs	r3, #0
  hex_info_reset(&ota.hex, ota.hexData);
     d74:	4956      	ldr	r1, [pc, #344]	; (ed0 <OtaUpdater::tick()+0x2dc>)
  ota.handshakeReady = false;
     d76:	f8aa 3000 	strh.w	r3, [sl]
  hex_info_reset(&ota.hex, ota.hexData);
     d7a:	f1a1 0028 	sub.w	r0, r1, #40	; 0x28
  ota.lastError[0]   = 0;
     d7e:	f88a 3018 	strb.w	r3, [sl, #24]
  ota.fatal          = false;
     d82:	f88a 3002 	strb.w	r3, [sl, #2]
  ota.badLines       = 0;
     d86:	f8ca 3014 	str.w	r3, [sl, #20]
  ota.bufferSize     = 0;
     d8a:	e9ca 3301 	strd	r3, r3, [sl, #4]
  ota.okLines        = 0;
     d8e:	e9ca 3303 	strd	r3, r3, [sl, #12]
  hex_info_reset(&ota.hex, ota.hexData);
     d92:	f7ff f9bd 	bl	110 <hex_info_reset(hex_info_t*, char*)>
}
     d96:	e758      	b.n	c4a <OtaUpdater::tick()+0x56>
  if (line[0] == 'L' && line[1] == ' ') {
     d98:	7843      	ldrb	r3, [r0, #1]
     d9a:	2b20      	cmp	r3, #32
     d9c:	f47f af63 	bne.w	c66 <OtaUpdater::tick()+0x72>
  if (!ota.inProgress) { sendLine("HEX IDLE"); return; }
     da0:	f8df a148 	ldr.w	sl, [pc, #328]	; eec <OtaUpdater::tick()+0x2f8>
     da4:	f89a 3001 	ldrb.w	r3, [sl, #1]
     da8:	2b00      	cmp	r3, #0
     daa:	f000 80b6 	beq.w	f1a <OtaUpdater::tick()+0x326>
  ota.hex.lines++;
     dae:	f8da 3098 	ldr.w	r3, [sl, #152]	; 0x98
     db2:	3301      	adds	r3, #1
     db4:	ee08 3a10 	vmov	s16, r3
     db8:	f8ca 3098 	str.w	r3, [sl, #152]	; 0x98
  if (ok && (parse_hex_line(rec, ota.hex.data, &ota.hex.addr, &ota.hex.num, &ota.hex.code) == 0)) {
     dbc:	f89a 3002 	ldrb.w	r3, [sl, #2]
     dc0:	2b00      	cmp	r3, #0
     dc2:	f000 8111 	beq.w	fe8 <OtaUpdater::tick()+0x3f4>
    ota.badLines++;
     dc6:	f8da 3014 	ldr.w	r3, [sl, #20]
     dca:	2204      	movs	r2, #4
    _ota->print("BAD "); _ota->print(lineNo);  _ota->print("\r\n");
     dcc:	6820      	ldr	r0, [r4, #0]
    ota.badLines++;
     dce:	3301      	adds	r3, #1
     dd0:	4940      	ldr	r1, [pc, #256]	; (ed4 <OtaUpdater::tick()+0x2e0>)
     dd2:	f8ca 3014 	str.w	r3, [sl, #20]
    ota.fatal = true;
     dd6:	2301      	movs	r3, #1
     dd8:	f88a 3002 	strb.w	r3, [sl, #2]
     ddc:	6803      	ldr	r3, [r0, #0]
     dde:	685b      	ldr	r3, [r3, #4]
     de0:	4798      	blx	r3
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
     de2:	ee18 1a10 	vmov	r1, s16
     de6:	2300      	movs	r3, #0
     de8:	220a      	movs	r2, #10
     dea:	6820      	ldr	r0, [r4, #0]
     dec:	f000 fd84 	bl	18f8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    _ota->print("BAD "); _ota->print(lineNo);  _ota->print("\r\n");
     df0:	e751      	b.n	c96 <OtaUpdater::tick()+0xa2>
  if (!strncmp(line, "HELLO", 5)) {
     df2:	7903      	ldrb	r3, [r0, #4]
     df4:	2b4f      	cmp	r3, #79	; 0x4f
     df6:	f47f af3a 	bne.w	c6e <OtaUpdater::tick()+0x7a>
    if (ota.inProgress) { sendLine("BUSY"); return; }
     dfa:	f8df a0f0 	ldr.w	sl, [pc, #240]	; eec <OtaUpdater::tick()+0x2f8>
     dfe:	f89a 3001 	ldrb.w	r3, [sl, #1]
     e02:	2b00      	cmp	r3, #0
     e04:	f040 808d 	bne.w	f22 <OtaUpdater::tick()+0x32e>
    while (*tok == ' ') tok++;
     e08:	7943      	ldrb	r3, [r0, #5]
    const char* tok = line + 5;
     e0a:	4833      	ldr	r0, [pc, #204]	; (ed8 <OtaUpdater::tick()+0x2e4>)
    while (*tok == ' ') tok++;
     e0c:	2b20      	cmp	r3, #32
     e0e:	d103      	bne.n	e18 <OtaUpdater::tick()+0x224>
     e10:	f810 3f01 	ldrb.w	r3, [r0, #1]!
     e14:	2b20      	cmp	r3, #32
     e16:	d0fb      	beq.n	e10 <OtaUpdater::tick()+0x21c>
    if (!*tok) { sendLine("NACK"); return; }
     e18:	2b00      	cmp	r3, #0
     e1a:	d07a      	beq.n	f12 <OtaUpdater::tick()+0x31e>
    if (!strcmp(tok, OTA_TOKEN)) { ota.handshakeReady = true; sendLine("READY"); }
     e1c:	492f      	ldr	r1, [pc, #188]	; (edc <OtaUpdater::tick()+0x2e8>)
     e1e:	f005 f9d3 	bl	61c8 <strcmp>
     e22:	2800      	cmp	r0, #0
     e24:	d16c      	bne.n	f00 <OtaUpdater::tick()+0x30c>
     e26:	2301      	movs	r3, #1
  _ota->print(s);
     e28:	6820      	ldr	r0, [r4, #0]
							  return write((const uint8_t *)str, strlen(str)); }
     e2a:	2205      	movs	r2, #5
     e2c:	492c      	ldr	r1, [pc, #176]	; (ee0 <OtaUpdater::tick()+0x2ec>)
    if (!strcmp(tok, OTA_TOKEN)) { ota.handshakeReady = true; sendLine("READY"); }
     e2e:	f88a 3000 	strb.w	r3, [sl]
     e32:	6803      	ldr	r3, [r0, #0]
     e34:	685b      	ldr	r3, [r3, #4]
     e36:	e72d      	b.n	c94 <OtaUpdater::tick()+0xa0>
  if (!strcmp(line, "BEGIN HEX")) { beginHex(); return; }
     e38:	4b2a      	ldr	r3, [pc, #168]	; (ee4 <OtaUpdater::tick()+0x2f0>)
     e3a:	492b      	ldr	r1, [pc, #172]	; (ee8 <OtaUpdater::tick()+0x2f4>)
     e3c:	681a      	ldr	r2, [r3, #0]
     e3e:	428a      	cmp	r2, r1
     e40:	f47f af19 	bne.w	c76 <OtaUpdater::tick()+0x82>
     e44:	889b      	ldrh	r3, [r3, #4]
     e46:	2b58      	cmp	r3, #88	; 0x58
     e48:	f47f af15 	bne.w	c76 <OtaUpdater::tick()+0x82>
  if (!ota.handshakeReady || ota.inProgress) { sendLine("HEX IDLE"); return; }
     e4c:	4b27      	ldr	r3, [pc, #156]	; (eec <OtaUpdater::tick()+0x2f8>)
     e4e:	781a      	ldrb	r2, [r3, #0]
     e50:	2a00      	cmp	r2, #0
     e52:	d062      	beq.n	f1a <OtaUpdater::tick()+0x326>
     e54:	f893 a001 	ldrb.w	sl, [r3, #1]
     e58:	f1ba 0f00 	cmp.w	sl, #0
     e5c:	d15d      	bne.n	f1a <OtaUpdater::tick()+0x326>
  if (firmware_buffer_init(&addr, &size) == 0) {
     e5e:	a905      	add	r1, sp, #20
     e60:	a804      	add	r0, sp, #16
  uint32_t addr = 0, size = 0;
     e62:	e9cd aa04 	strd	sl, sl, [sp, #16]
  if (firmware_buffer_init(&addr, &size) == 0) {
     e66:	f7ff fa09 	bl	27c <firmware_buffer_init>
     e6a:	4b20      	ldr	r3, [pc, #128]	; (eec <OtaUpdater::tick()+0x2f8>)
     e6c:	2800      	cmp	r0, #0
     e6e:	f000 80b7 	beq.w	fe0 <OtaUpdater::tick()+0x3ec>
  ota.bufferAddr = addr;
     e72:	9a04      	ldr	r2, [sp, #16]
  hex_info_reset(&ota.hex, ota.hexData);
     e74:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
     e78:	f103 0078 	add.w	r0, r3, #120	; 0x78
  ota.lastError[0] = 0;
     e7c:	f883 a018 	strb.w	sl, [r3, #24]
  ota.bufferAddr = addr;
     e80:	605a      	str	r2, [r3, #4]
  ota.bufferSize = size;
     e82:	9a05      	ldr	r2, [sp, #20]
  ota.fatal      = false;
     e84:	f883 a002 	strb.w	sl, [r3, #2]
  ota.bufferSize = size;
     e88:	609a      	str	r2, [r3, #8]
  ota.inProgress = true;
     e8a:	2201      	movs	r2, #1
  ota.badLines   = 0;
     e8c:	f8c3 a014 	str.w	sl, [r3, #20]
  ota.inProgress = true;
     e90:	705a      	strb	r2, [r3, #1]
  ota.okLines    = 0;
     e92:	e9c3 aa03 	strd	sl, sl, [r3, #12]
  hex_info_reset(&ota.hex, ota.hexData);
     e96:	f7ff f93b 	bl	110 <hex_info_reset(hex_info_t*, char*)>
  _ota->print(s);
     e9a:	6820      	ldr	r0, [r4, #0]
     e9c:	2209      	movs	r2, #9
     e9e:	4914      	ldr	r1, [pc, #80]	; (ef0 <OtaUpdater::tick()+0x2fc>)
     ea0:	e6f6      	b.n	c90 <OtaUpdater::tick()+0x9c>
     ea2:	bf00      	nop
     ea4:	20007c5c 	.word	0x20007c5c
     ea8:	4c4c4548 	.word	0x4c4c4548
     eac:	49474542 	.word	0x49474542
     eb0:	200089f8 	.word	0x200089f8
     eb4:	200089fc 	.word	0x200089fc
     eb8:	2000049c 	.word	0x2000049c
     ebc:	20007970 	.word	0x20007970
     ec0:	20000438 	.word	0x20000438
     ec4:	20000448 	.word	0x20000448
     ec8:	20000450 	.word	0x20000450
     ecc:	05fa0004 	.word	0x05fa0004
     ed0:	20008920 	.word	0x20008920
     ed4:	200003e8 	.word	0x200003e8
     ed8:	20008a01 	.word	0x20008a01
     edc:	200003a8 	.word	0x200003a8
     ee0:	20000408 	.word	0x20000408
     ee4:	20008a00 	.word	0x20008a00
     ee8:	4548204e 	.word	0x4548204e
     eec:	20008880 	.word	0x20008880
     ef0:	20000428 	.word	0x20000428
     ef4:	00444e45 	.word	0x00444e45
     ef8:	474e4950 	.word	0x474e4950
     efc:	53524556 	.word	0x53524556
    else { ota.handshakeReady = false; sendLine("NACK"); }
     f00:	2300      	movs	r3, #0
  _ota->print(s);
     f02:	6820      	ldr	r0, [r4, #0]
     f04:	2204      	movs	r2, #4
     f06:	495f      	ldr	r1, [pc, #380]	; (1084 <OtaUpdater::tick()+0x490>)
    else { ota.handshakeReady = false; sendLine("NACK"); }
     f08:	f88a 3000 	strb.w	r3, [sl]
     f0c:	6803      	ldr	r3, [r0, #0]
     f0e:	685b      	ldr	r3, [r3, #4]
     f10:	e6c0      	b.n	c94 <OtaUpdater::tick()+0xa0>
  _ota->print(s);
     f12:	6820      	ldr	r0, [r4, #0]
     f14:	2204      	movs	r2, #4
     f16:	495b      	ldr	r1, [pc, #364]	; (1084 <OtaUpdater::tick()+0x490>)
     f18:	e6ba      	b.n	c90 <OtaUpdater::tick()+0x9c>
     f1a:	6820      	ldr	r0, [r4, #0]
     f1c:	2208      	movs	r2, #8
     f1e:	495a      	ldr	r1, [pc, #360]	; (1088 <OtaUpdater::tick()+0x494>)
     f20:	e6b6      	b.n	c90 <OtaUpdater::tick()+0x9c>
     f22:	6820      	ldr	r0, [r4, #0]
     f24:	2204      	movs	r2, #4
     f26:	4959      	ldr	r1, [pc, #356]	; (108c <OtaUpdater::tick()+0x498>)
     f28:	e6b2      	b.n	c90 <OtaUpdater::tick()+0x9c>
  if (!strcmp(line, "PING"))      { sendLine("PONG"); return; }
     f2a:	7903      	ldrb	r3, [r0, #4]
     f2c:	2b00      	cmp	r3, #0
     f2e:	f47f aea8 	bne.w	c82 <OtaUpdater::tick()+0x8e>
  _ota->print(s);
     f32:	6820      	ldr	r0, [r4, #0]
     f34:	2204      	movs	r2, #4
     f36:	4956      	ldr	r1, [pc, #344]	; (1090 <OtaUpdater::tick()+0x49c>)
     f38:	e6aa      	b.n	c90 <OtaUpdater::tick()+0x9c>
  if (!strcmp(line, "VERSION")) {
     f3a:	6842      	ldr	r2, [r0, #4]
     f3c:	4b55      	ldr	r3, [pc, #340]	; (1094 <OtaUpdater::tick()+0x4a0>)
     f3e:	429a      	cmp	r2, r3
     f40:	f47f aea3 	bne.w	c8a <OtaUpdater::tick()+0x96>
    _ota->print("FW ");
     f44:	6820      	ldr	r0, [r4, #0]
     f46:	2203      	movs	r2, #3
     f48:	4953      	ldr	r1, [pc, #332]	; (1098 <OtaUpdater::tick()+0x4a4>)
     f4a:	6803      	ldr	r3, [r0, #0]
     f4c:	685b      	ldr	r3, [r3, #4]
     f4e:	4798      	blx	r3
    _ota->print(_appVersion);
     f50:	4b52      	ldr	r3, [pc, #328]	; (109c <OtaUpdater::tick()+0x4a8>)
     f52:	f8d4 a000 	ldr.w	sl, [r4]
     f56:	6819      	ldr	r1, [r3, #0]
	size_t write(const char *str)			{ if (str == nullptr) return 0;
     f58:	b161      	cbz	r1, f74 <OtaUpdater::tick()+0x380>
							  return write((const uint8_t *)str, strlen(str)); }
     f5a:	4608      	mov	r0, r1
     f5c:	9102      	str	r1, [sp, #8]
     f5e:	f005 fb0f 	bl	6580 <strlen>
     f62:	f8da 3000 	ldr.w	r3, [sl]
     f66:	4602      	mov	r2, r0
     f68:	9902      	ldr	r1, [sp, #8]
     f6a:	4650      	mov	r0, sl
     f6c:	685b      	ldr	r3, [r3, #4]
     f6e:	4798      	blx	r3
    _ota->print("\r\n");
     f70:	f8d4 a000 	ldr.w	sl, [r4]
     f74:	f8da 3000 	ldr.w	r3, [sl]
     f78:	2202      	movs	r2, #2
     f7a:	4949      	ldr	r1, [pc, #292]	; (10a0 <OtaUpdater::tick()+0x4ac>)
     f7c:	4650      	mov	r0, sl
     f7e:	685b      	ldr	r3, [r3, #4]
     f80:	4798      	blx	r3
    _ota->print("FLASHERX ");
     f82:	6820      	ldr	r0, [r4, #0]
     f84:	2209      	movs	r2, #9
     f86:	4947      	ldr	r1, [pc, #284]	; (10a4 <OtaUpdater::tick()+0x4b0>)
     f88:	6803      	ldr	r3, [r0, #0]
     f8a:	685b      	ldr	r3, [r3, #4]
     f8c:	4798      	blx	r3
    _ota->print(LOADER_ID);
     f8e:	6820      	ldr	r0, [r4, #0]
     f90:	2216      	movs	r2, #22
     f92:	4945      	ldr	r1, [pc, #276]	; (10a8 <OtaUpdater::tick()+0x4b4>)
     f94:	e67c      	b.n	c90 <OtaUpdater::tick()+0x9c>
  } else {
    _ota->print("HEX ERR lines="); _ota->print(ota.hex.lines);
     f96:	6820      	ldr	r0, [r4, #0]
     f98:	220e      	movs	r2, #14
     f9a:	4944      	ldr	r1, [pc, #272]	; (10ac <OtaUpdater::tick()+0x4b8>)
     f9c:	6803      	ldr	r3, [r0, #0]
     f9e:	685b      	ldr	r3, [r3, #4]
     fa0:	4798      	blx	r3
	size_t print(int n)				{ return print((long)n); }
     fa2:	f8da 1098 	ldr.w	r1, [sl, #152]	; 0x98
     fa6:	6820      	ldr	r0, [r4, #0]
     fa8:	f000 fc70 	bl	188c <Print::print(long)>
    _ota->print(" bad=");          _ota->print(ota.badLines);
     fac:	6820      	ldr	r0, [r4, #0]
							  return write((const uint8_t *)str, strlen(str)); }
     fae:	2205      	movs	r2, #5
     fb0:	493f      	ldr	r1, [pc, #252]	; (10b0 <OtaUpdater::tick()+0x4bc>)
     fb2:	6803      	ldr	r3, [r0, #0]
     fb4:	685b      	ldr	r3, [r3, #4]
     fb6:	4798      	blx	r3
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     fb8:	f8da 1014 	ldr.w	r1, [sl, #20]
     fbc:	2300      	movs	r3, #0
     fbe:	220a      	movs	r2, #10
     fc0:	6820      	ldr	r0, [r4, #0]
     fc2:	f000 fc99 	bl	18f8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    _ota->print("\r\n");
     fc6:	6820      	ldr	r0, [r4, #0]
							  return write((const uint8_t *)str, strlen(str)); }
     fc8:	4935      	ldr	r1, [pc, #212]	; (10a0 <OtaUpdater::tick()+0x4ac>)
     fca:	2202      	movs	r2, #2
     fcc:	6803      	ldr	r3, [r0, #0]
     fce:	685b      	ldr	r3, [r3, #4]
     fd0:	4798      	blx	r3
    firmware_buffer_free(ota.bufferAddr, ota.bufferSize);
     fd2:	e9da 0101 	ldrd	r0, r1, [sl, #4]
     fd6:	f7ff f981 	bl	2dc <firmware_buffer_free>
     fda:	e6ca      	b.n	d72 <OtaUpdater::tick()+0x17e>
  uint32_t payload = 0;
     fdc:	9202      	str	r2, [sp, #8]
     fde:	e677      	b.n	cd0 <OtaUpdater::tick()+0xdc>
  _ota->print(s);
     fe0:	6820      	ldr	r0, [r4, #0]
     fe2:	2208      	movs	r2, #8
     fe4:	4933      	ldr	r1, [pc, #204]	; (10b4 <OtaUpdater::tick()+0x4c0>)
     fe6:	e653      	b.n	c90 <OtaUpdater::tick()+0x9c>
  if (ok && (parse_hex_line(rec, ota.hex.data, &ota.hex.addr, &ota.hex.num, &ota.hex.code) == 0)) {
     fe8:	f10a 0380 	add.w	r3, sl, #128	; 0x80
     fec:	3002      	adds	r0, #2
     fee:	f10a 027c 	add.w	r2, sl, #124	; 0x7c
     ff2:	9300      	str	r3, [sp, #0]
     ff4:	f10a 0384 	add.w	r3, sl, #132	; 0x84
     ff8:	f8da 1078 	ldr.w	r1, [sl, #120]	; 0x78
     ffc:	f7ff f896 	bl	12c <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)>
    1000:	2800      	cmp	r0, #0
    1002:	f43f aee0 	beq.w	dc6 <OtaUpdater::tick()+0x1d2>
  if (ok && (process_hex_record(&ota.hex) != 0)) {
    1006:	482c      	ldr	r0, [pc, #176]	; (10b8 <OtaUpdater::tick()+0x4c4>)
    1008:	f7ff f8fe 	bl	208 <process_hex_record(hex_info_t*)>
    100c:	2800      	cmp	r0, #0
    100e:	f47f aeda 	bne.w	dc6 <OtaUpdater::tick()+0x1d2>
  if (ok && ota.hex.code == 0) {
    1012:	f8da 3080 	ldr.w	r3, [sl, #128]	; 0x80
    1016:	bb23      	cbnz	r3, 1062 <OtaUpdater::tick()+0x46e>
    if (ota.hex.max > (FLASH_BASE_ADDR + ota.bufferSize)) {
    1018:	f8da 3008 	ldr.w	r3, [sl, #8]
    101c:	f8da 2090 	ldr.w	r2, [sl, #144]	; 0x90
    1020:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
    1024:	429a      	cmp	r2, r3
    1026:	f63f aece 	bhi.w	dc6 <OtaUpdater::tick()+0x1d2>
      uint32_t addr = ota.bufferAddr + ota.hex.base + ota.hex.addr - FLASH_BASE_ADDR;
    102a:	f8da 2004 	ldr.w	r2, [sl, #4]
    102e:	f8da 3088 	ldr.w	r3, [sl, #136]	; 0x88
        memcpy((void*)addr, (void*)ota.hex.data, ota.hex.num);
    1032:	f8da 1078 	ldr.w	r1, [sl, #120]	; 0x78
      uint32_t addr = ota.bufferAddr + ota.hex.base + ota.hex.addr - FLASH_BASE_ADDR;
    1036:	18d0      	adds	r0, r2, r3
      if (!IN_FLASH(ota.bufferAddr)) {
    1038:	f102 4220 	add.w	r2, r2, #2684354560	; 0xa0000000
      uint32_t addr = ota.bufferAddr + ota.hex.base + ota.hex.addr - FLASH_BASE_ADDR;
    103c:	f8da 307c 	ldr.w	r3, [sl, #124]	; 0x7c
    1040:	f100 4020 	add.w	r0, r0, #2684354560	; 0xa0000000
      if (!IN_FLASH(ota.bufferAddr)) {
    1044:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
        memcpy((void*)addr, (void*)ota.hex.data, ota.hex.num);
    1048:	f8da 2084 	ldr.w	r2, [sl, #132]	; 0x84
      uint32_t addr = ota.bufferAddr + ota.hex.base + ota.hex.addr - FLASH_BASE_ADDR;
    104c:	4418      	add	r0, r3
      if (!IN_FLASH(ota.bufferAddr)) {
    104e:	d313      	bcc.n	1078 <OtaUpdater::tick()+0x484>
        memcpy((void*)addr, (void*)ota.hex.data, ota.hex.num);
    1050:	f001 f894 	bl	217c <memcpy>
      if (ok) ota.bytes += ota.hex.num;
    1054:	f8da 300c 	ldr.w	r3, [sl, #12]
    1058:	f8da 2084 	ldr.w	r2, [sl, #132]	; 0x84
    105c:	4413      	add	r3, r2
    105e:	f8ca 300c 	str.w	r3, [sl, #12]
    ota.okLines++;
    1062:	f8da 3010 	ldr.w	r3, [sl, #16]
    1066:	2203      	movs	r2, #3
    _ota->print("OK ");  _ota->print(lineNo);  _ota->print("\r\n");
    1068:	6820      	ldr	r0, [r4, #0]
    ota.okLines++;
    106a:	3301      	adds	r3, #1
    106c:	4913      	ldr	r1, [pc, #76]	; (10bc <OtaUpdater::tick()+0x4c8>)
    106e:	f8ca 3010 	str.w	r3, [sl, #16]
    1072:	6803      	ldr	r3, [r0, #0]
    1074:	685b      	ldr	r3, [r3, #4]
    1076:	e6b3      	b.n	de0 <OtaUpdater::tick()+0x1ec>
        int e = flash_write_block(addr, ota.hex.data, ota.hex.num);
    1078:	f7ff f968 	bl	34c <flash_write_block>
        if (e) ok = false;
    107c:	2800      	cmp	r0, #0
    107e:	f47f aea2 	bne.w	dc6 <OtaUpdater::tick()+0x1d2>
    1082:	e7e7      	b.n	1054 <OtaUpdater::tick()+0x460>
    1084:	20000400 	.word	0x20000400
    1088:	200003d8 	.word	0x200003d8
    108c:	200003f8 	.word	0x200003f8
    1090:	2000047c 	.word	0x2000047c
    1094:	004e4f49 	.word	0x004e4f49
    1098:	2000048c 	.word	0x2000048c
    109c:	20007bf8 	.word	0x20007bf8
    10a0:	20007970 	.word	0x20007970
    10a4:	20000490 	.word	0x20000490
    10a8:	200004a0 	.word	0x200004a0
    10ac:	2000045c 	.word	0x2000045c
    10b0:	2000046c 	.word	0x2000046c
    10b4:	2000041c 	.word	0x2000041c
    10b8:	200088f8 	.word	0x200088f8
    10bc:	200003e4 	.word	0x200003e4

000010c0 <HardwareSerialIMXRT::operator bool()>:
	virtual void begin(uint32_t baud, uint32_t format) {
					  serial_begin(BAUD2DIV(baud));
					  serial_format(format); }
	*/

	operator bool()			{ return true; }
    10c0:	2001      	movs	r0, #1
    10c2:	4770      	bx	lr

000010c4 <HardwareSerialIMXRT::availableForWrite()>:

int HardwareSerialIMXRT::availableForWrite(void)
{
	uint32_t head, tail;

	head = tx_buffer_head_;
    10c4:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
	tail = tx_buffer_tail_;
    10c8:	f8b0 2048 	ldrh.w	r2, [r0, #72]	; 0x48
	head = tx_buffer_head_;
    10cc:	b29b      	uxth	r3, r3
	tail = tx_buffer_tail_;
    10ce:	b292      	uxth	r2, r2
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    10d0:	4293      	cmp	r3, r2
    10d2:	d202      	bcs.n	10da <HardwareSerialIMXRT::availableForWrite()+0x16>
	return tail - head - 1;
    10d4:	3a01      	subs	r2, #1
    10d6:	1ad0      	subs	r0, r2, r3
}
    10d8:	4770      	bx	lr
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    10da:	6b41      	ldr	r1, [r0, #52]	; 0x34
    10dc:	3901      	subs	r1, #1
    10de:	440a      	add	r2, r1
    10e0:	1ad0      	subs	r0, r2, r3
    10e2:	4770      	bx	lr

000010e4 <HardwareSerialIMXRT::available()>:



int HardwareSerialIMXRT::available(void)
{
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    10e4:	6901      	ldr	r1, [r0, #16]
	uint32_t head, tail;

	// WATER> 0 so IDLE involved may want to check if port has already has RX data to retrieve
	__disable_irq();
    10e6:	b672      	cpsid	i
	head = rx_buffer_head_;
    10e8:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
	tail = rx_buffer_tail_;
    10ec:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
	head = rx_buffer_head_;
    10f0:	b292      	uxth	r2, r2
	tail = rx_buffer_tail_;
    10f2:	b29b      	uxth	r3, r3
	int avail;
	if (head >= tail) avail = head - tail;
    10f4:	429a      	cmp	r2, r3
	else avail = rx_buffer_total_size_ + head - tail;	
    10f6:	bf3c      	itt	cc
    10f8:	6b80      	ldrcc	r0, [r0, #56]	; 0x38
    10fa:	1812      	addcc	r2, r2, r0
	avail += (port->WATER >> 24) & 0x7;
    10fc:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
	else avail = rx_buffer_total_size_ + head - tail;	
    10fe:	1ad3      	subs	r3, r2, r3
	__enable_irq();
    1100:	b662      	cpsie	i
	avail += (port->WATER >> 24) & 0x7;
    1102:	f3c0 6002 	ubfx	r0, r0, #24, #3
	return avail;
}
    1106:	4418      	add	r0, r3
    1108:	4770      	bx	lr
    110a:	bf00      	nop

0000110c <HardwareSerialIMXRT::peek()>:
int HardwareSerialIMXRT::peek(void)
{
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
	uint32_t head, tail;

	head = rx_buffer_head_;
    110c:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
{
    1110:	4602      	mov	r2, r0
	tail = rx_buffer_tail_;
    1112:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
	head = rx_buffer_head_;
    1116:	b289      	uxth	r1, r1
	tail = rx_buffer_tail_;
    1118:	b29b      	uxth	r3, r3
	if (head == tail) {
    111a:	4299      	cmp	r1, r3
{
    111c:	b410      	push	{r4}
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    111e:	6904      	ldr	r4, [r0, #16]
	if (head == tail) {
    1120:	d014      	beq.n	114c <HardwareSerialIMXRT::peek()+0x40>
			return c;
		}
		__enable_irq();

	} 
	if (++tail >= rx_buffer_total_size_) tail = 0;
    1122:	3301      	adds	r3, #1
    1124:	6b90      	ldr	r0, [r2, #56]	; 0x38
	if (tail < rx_buffer_size_) {
    1126:	6b11      	ldr	r1, [r2, #48]	; 0x30
	if (++tail >= rx_buffer_total_size_) tail = 0;
    1128:	4298      	cmp	r0, r3
    112a:	bf98      	it	ls
    112c:	2300      	movls	r3, #0
	if (tail < rx_buffer_size_) {
    112e:	4299      	cmp	r1, r3
    1130:	d806      	bhi.n	1140 <HardwareSerialIMXRT::peek()+0x34>
		return rx_buffer_[tail];
	} else {
		return rx_buffer_storage_[tail-rx_buffer_size_];
    1132:	1a5b      	subs	r3, r3, r1
    1134:	6a52      	ldr	r2, [r2, #36]	; 0x24
    1136:	5cd0      	ldrb	r0, [r2, r3]
    1138:	b2c0      	uxtb	r0, r0
	}
}
    113a:	f85d 4b04 	ldr.w	r4, [sp], #4
    113e:	4770      	bx	lr
		return rx_buffer_[tail];
    1140:	6a12      	ldr	r2, [r2, #32]
}
    1142:	f85d 4b04 	ldr.w	r4, [sp], #4
		return rx_buffer_[tail];
    1146:	5cd0      	ldrb	r0, [r2, r3]
    1148:	b2c0      	uxtb	r0, r0
}
    114a:	4770      	bx	lr
		__disable_irq();
    114c:	b672      	cpsid	i
		head = rx_buffer_head_;  // reread head to make sure no ISR happened
    114e:	f8b0 004a 	ldrh.w	r0, [r0, #74]	; 0x4a
    1152:	b280      	uxth	r0, r0
		if (head == tail) {
    1154:	4281      	cmp	r1, r0
    1156:	d001      	beq.n	115c <HardwareSerialIMXRT::peek()+0x50>
		__enable_irq();
    1158:	b662      	cpsie	i
    115a:	e7e2      	b.n	1122 <HardwareSerialIMXRT::peek()+0x16>
			if (port->WATER & 0x7000000) {
    115c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    115e:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
    1162:	d103      	bne.n	116c <HardwareSerialIMXRT::peek()+0x60>
			int c = -1;	// assume nothing to return
    1164:	f04f 30ff 	mov.w	r0, #4294967295
			__enable_irq();
    1168:	b662      	cpsie	i
			return c;
    116a:	e7e6      	b.n	113a <HardwareSerialIMXRT::peek()+0x2e>
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    116c:	69e3      	ldr	r3, [r4, #28]
				rx_buffer_head_ = 1;
    116e:	2001      	movs	r0, #1
				rx_buffer_tail_ = 0; 
    1170:	2400      	movs	r4, #0
				rx_buffer_[1] = c;
    1172:	6a11      	ldr	r1, [r2, #32]
				rx_buffer_head_ = 1;
    1174:	f8a2 004a 	strh.w	r0, [r2, #74]	; 0x4a
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    1178:	f3c3 0009 	ubfx	r0, r3, #0, #10
				rx_buffer_[1] = c;
    117c:	b2db      	uxtb	r3, r3
				rx_buffer_tail_ = 0; 
    117e:	f8a2 404c 	strh.w	r4, [r2, #76]	; 0x4c
				rx_buffer_[1] = c;
    1182:	704b      	strb	r3, [r1, #1]
    1184:	e7f0      	b.n	1168 <HardwareSerialIMXRT::peek()+0x5c>
    1186:	bf00      	nop

00001188 <HardwareSerialIMXRT::read()>:
{
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
	uint32_t head, tail;
	int c;

	head = rx_buffer_head_;
    1188:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
{
    118c:	4602      	mov	r2, r0
	tail = rx_buffer_tail_;
    118e:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
	head = rx_buffer_head_;
    1192:	b289      	uxth	r1, r1
	tail = rx_buffer_tail_;
    1194:	b29b      	uxth	r3, r3
	if (head == tail) {
    1196:	4299      	cmp	r1, r3
{
    1198:	b430      	push	{r4, r5}
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    119a:	6904      	ldr	r4, [r0, #16]
	if (head == tail) {
    119c:	d025      	beq.n	11ea <HardwareSerialIMXRT::read()+0x62>
			return c;
		}
		__enable_irq();

	}
	if (++tail >= rx_buffer_total_size_) tail = 0;
    119e:	3301      	adds	r3, #1
    11a0:	6b94      	ldr	r4, [r2, #56]	; 0x38
    11a2:	429c      	cmp	r4, r3
    11a4:	d916      	bls.n	11d4 <HardwareSerialIMXRT::read()+0x4c>
	if (tail < rx_buffer_size_) {
    11a6:	6b10      	ldr	r0, [r2, #48]	; 0x30
		c = rx_buffer_[tail];
	} else {
		c = rx_buffer_storage_[tail-rx_buffer_size_];
	}
	rx_buffer_tail_ = tail;
    11a8:	fa1f fc83 	uxth.w	ip, r3
	if (tail < rx_buffer_size_) {
    11ac:	4298      	cmp	r0, r3
    11ae:	d917      	bls.n	11e0 <HardwareSerialIMXRT::read()+0x58>
		c = rx_buffer_[tail];
    11b0:	6a10      	ldr	r0, [r2, #32]
    11b2:	5cc0      	ldrb	r0, [r0, r3]
    11b4:	b2c0      	uxtb	r0, r0
	if (rts_pin_baseReg_) {
    11b6:	6d95      	ldr	r5, [r2, #88]	; 0x58
	rx_buffer_tail_ = tail;
    11b8:	f8a2 c04c 	strh.w	ip, [r2, #76]	; 0x4c
	if (rts_pin_baseReg_) {
    11bc:	b145      	cbz	r5, 11d0 <HardwareSerialIMXRT::read()+0x48>
		uint32_t avail;
		if (head >= tail) avail = head - tail;
    11be:	4299      	cmp	r1, r3
    11c0:	d31c      	bcc.n	11fc <HardwareSerialIMXRT::read()+0x74>
    11c2:	1acb      	subs	r3, r1, r3
		else avail = rx_buffer_total_size_ + head - tail;

		if (avail <= rts_low_watermark_) rts_assert();
    11c4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
    11c6:	4299      	cmp	r1, r3
    11c8:	d302      	bcc.n	11d0 <HardwareSerialIMXRT::read()+0x48>
	DIRECT_WRITE_LOW(rts_pin_baseReg_, rts_pin_bitmask_);
    11ca:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
    11cc:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
	}
	return c;
}	
    11d0:	bc30      	pop	{r4, r5}
    11d2:	4770      	bx	lr
    11d4:	f04f 0c00 	mov.w	ip, #0
	if (tail < rx_buffer_size_) {
    11d8:	6b10      	ldr	r0, [r2, #48]	; 0x30
	if (++tail >= rx_buffer_total_size_) tail = 0;
    11da:	4663      	mov	r3, ip
	if (tail < rx_buffer_size_) {
    11dc:	4298      	cmp	r0, r3
    11de:	d8e7      	bhi.n	11b0 <HardwareSerialIMXRT::read()+0x28>
		c = rx_buffer_storage_[tail-rx_buffer_size_];
    11e0:	1a18      	subs	r0, r3, r0
    11e2:	6a55      	ldr	r5, [r2, #36]	; 0x24
    11e4:	5c28      	ldrb	r0, [r5, r0]
    11e6:	b2c0      	uxtb	r0, r0
    11e8:	e7e5      	b.n	11b6 <HardwareSerialIMXRT::read()+0x2e>
    11ea:	4608      	mov	r0, r1
		__disable_irq();
    11ec:	b672      	cpsid	i
		head = rx_buffer_head_;  // reread head to make sure no ISR happened
    11ee:	f8b2 104a 	ldrh.w	r1, [r2, #74]	; 0x4a
    11f2:	b289      	uxth	r1, r1
		if (head == tail) {
    11f4:	4288      	cmp	r0, r1
    11f6:	d004      	beq.n	1202 <HardwareSerialIMXRT::read()+0x7a>
		__enable_irq();
    11f8:	b662      	cpsie	i
    11fa:	e7d0      	b.n	119e <HardwareSerialIMXRT::read()+0x16>
		else avail = rx_buffer_total_size_ + head - tail;
    11fc:	440c      	add	r4, r1
    11fe:	1ae3      	subs	r3, r4, r3
    1200:	e7e0      	b.n	11c4 <HardwareSerialIMXRT::read()+0x3c>
			if (port->WATER & 0x7000000) {
    1202:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1204:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
    1208:	d103      	bne.n	1212 <HardwareSerialIMXRT::read()+0x8a>
			c = -1;	// assume nothing to return
    120a:	f04f 30ff 	mov.w	r0, #4294967295
			__enable_irq();
    120e:	b662      	cpsie	i
			return c;
    1210:	e7de      	b.n	11d0 <HardwareSerialIMXRT::read()+0x48>
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    1212:	69e0      	ldr	r0, [r4, #28]
    1214:	f3c0 0009 	ubfx	r0, r0, #0, #10
    1218:	e7f9      	b.n	120e <HardwareSerialIMXRT::read()+0x86>
    121a:	bf00      	nop

0000121c <HardwareSerialIMXRT::flush()>:

void HardwareSerialIMXRT::flush(void)
{
	while (transmitting_) yield(); // wait
    121c:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
    1220:	b143      	cbz	r3, 1234 <HardwareSerialIMXRT::flush()+0x18>
{
    1222:	b510      	push	{r4, lr}
    1224:	4604      	mov	r4, r0
	while (transmitting_) yield(); // wait
    1226:	f002 faaf 	bl	3788 <yield>
    122a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    122e:	2b00      	cmp	r3, #0
    1230:	d1f9      	bne.n	1226 <HardwareSerialIMXRT::flush()+0xa>
}
    1232:	bd10      	pop	{r4, pc}
    1234:	4770      	bx	lr
    1236:	bf00      	nop

00001238 <HardwareSerialIMXRT::end()>:
{
    1238:	b538      	push	{r3, r4, r5, lr}
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    123a:	e9d0 5304 	ldrd	r5, r3, [r0, #16]
	if (!(hardware->ccm_register & hardware->ccm_value)) return;
    123e:	e9d3 1203 	ldrd	r1, r2, [r3, #12]
    1242:	6809      	ldr	r1, [r1, #0]
    1244:	4211      	tst	r1, r2
    1246:	d028      	beq.n	129a <HardwareSerialIMXRT::end()+0x62>
	while (transmitting_) yield();  // wait for buffered data to send
    1248:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
    124c:	4604      	mov	r4, r0
    124e:	b132      	cbz	r2, 125e <HardwareSerialIMXRT::end()+0x26>
    1250:	f002 fa9a 	bl	3788 <yield>
    1254:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    1258:	2b00      	cmp	r3, #0
    125a:	d1f9      	bne.n	1250 <HardwareSerialIMXRT::end()+0x18>
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = 5;
    125c:	6963      	ldr	r3, [r4, #20]
	port->CTRL = 0;	// disable the TX and RX ...
    125e:	2100      	movs	r1, #0
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = 5;
    1260:	4a0e      	ldr	r2, [pc, #56]	; (129c <HardwareSerialIMXRT::end()+0x64>)
	port->CTRL = 0;	// disable the TX and RX ...
    1262:	61a9      	str	r1, [r5, #24]
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = 5;
    1264:	7e20      	ldrb	r0, [r4, #24]
    1266:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    126a:	7d00      	ldrb	r0, [r0, #20]
    126c:	eb02 1000 	add.w	r0, r2, r0, lsl #4
    1270:	6845      	ldr	r5, [r0, #4]
    1272:	2005      	movs	r0, #5
    1274:	6028      	str	r0, [r5, #0]
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = 5;
    1276:	7e65      	ldrb	r5, [r4, #25]
    1278:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    127c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
    1280:	eb02 1203 	add.w	r2, r2, r3, lsl #4
	if (rts_pin_baseReg_) rts_deassert();
    1284:	6da3      	ldr	r3, [r4, #88]	; 0x58
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = 5;
    1286:	6852      	ldr	r2, [r2, #4]
    1288:	6010      	str	r0, [r2, #0]
	rx_buffer_head_ = 0;
    128a:	f8a4 104a 	strh.w	r1, [r4, #74]	; 0x4a
	rx_buffer_tail_ = 0;
    128e:	f8a4 104c 	strh.w	r1, [r4, #76]	; 0x4c
	if (rts_pin_baseReg_) rts_deassert();
    1292:	b113      	cbz	r3, 129a <HardwareSerialIMXRT::end()+0x62>
	DIRECT_WRITE_HIGH(rts_pin_baseReg_, rts_pin_bitmask_);
    1294:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    1296:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    129a:	bd38      	pop	{r3, r4, r5, pc}
    129c:	20007350 	.word	0x20007350

000012a0 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)>:
	float base = (float)UART_CLOCK / (float)baud;
    12a0:	ee07 1a90 	vmov	s15, r1
    12a4:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 1510 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x270>
	for (int osr=4; osr <= 32; osr++) {
    12a8:	2104      	movs	r1, #4
		int divint = (int)(div + 0.5f);
    12aa:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
	float base = (float)UART_CLOCK / (float)baud;
    12ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
	float besterr = 1e20;
    12b2:	ed9f 6a98 	vldr	s12, [pc, #608]	; 1514 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x274>
    12b6:	f641 7cff 	movw	ip, #8191	; 0x1fff
	float base = (float)UART_CLOCK / (float)baud;
    12ba:	eec7 5a27 	vdiv.f32	s11, s14, s15
{
    12be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int bestosr = 4;
    12c2:	468e      	mov	lr, r1
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    12c4:	6905      	ldr	r5, [r0, #16]
	int bestdiv = 1;
    12c6:	2401      	movs	r4, #1
		float div = base / (float)osr;
    12c8:	ee07 1a90 	vmov	s15, r1
    12cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    12d0:	ee85 7aa7 	vdiv.f32	s14, s11, s15
		int divint = (int)(div + 0.5f);
    12d4:	ee77 7a05 	vadd.f32	s15, s14, s10
    12d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    12dc:	ee17 3a90 	vmov	r3, s15
    12e0:	4563      	cmp	r3, ip
    12e2:	bfa8      	it	ge
    12e4:	4663      	movge	r3, ip
    12e6:	2b01      	cmp	r3, #1
    12e8:	bfb8      	it	lt
    12ea:	2301      	movlt	r3, #1
		float err = ((float)divint - div) / div;
    12ec:	ee07 3a90 	vmov	s15, r3
    12f0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
    12f4:	ee76 6ac7 	vsub.f32	s13, s13, s14
    12f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
		if (err < 0.0f) err = -err;
    12fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    1300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1304:	bf48      	it	mi
    1306:	eef1 7a67 	vnegmi.f32	s15, s15
		if (err <= besterr) {
    130a:	eef4 7ac6 	vcmpe.f32	s15, s12
    130e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1312:	d803      	bhi.n	131c <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x7c>
			besterr = err;
    1314:	eeb0 6a67 	vmov.f32	s12, s15
		if (err <= besterr) {
    1318:	468e      	mov	lr, r1
			bestdiv = divint;
    131a:	461c      	mov	r4, r3
	for (int osr=4; osr <= 32; osr++) {
    131c:	3101      	adds	r1, #1
    131e:	2921      	cmp	r1, #33	; 0x21
    1320:	d1d2      	bne.n	12c8 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x28>
	rx_buffer_head_ = 0;
    1322:	2100      	movs	r1, #0
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    1324:	6943      	ldr	r3, [r0, #20]
    1326:	f402 7600 	and.w	r6, r2, #512	; 0x200
	rx_buffer_head_ = 0;
    132a:	f8a0 104a 	strh.w	r1, [r0, #74]	; 0x4a
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
    132e:	f8b3 c05a 	ldrh.w	ip, [r3, #90]	; 0x5a
	half_duplex_mode_ = (format & SERIAL_HALF_DUPLEX) != 0;
    1332:	428e      	cmp	r6, r1
	rx_buffer_tail_ = 0;
    1334:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    1338:	f8b3 6058 	ldrh.w	r6, [r3, #88]	; 0x58
	tx_buffer_head_ = 0;
    133c:	f8a0 1046 	strh.w	r1, [r0, #70]	; 0x46
	tx_buffer_tail_ = 0;
    1340:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
	transmitting_ = 0;
    1344:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    1348:	6b81      	ldr	r1, [r0, #56]	; 0x38
	hardware->ccm_register |= hardware->ccm_value;
    134a:	68df      	ldr	r7, [r3, #12]
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    134c:	eba1 0606 	sub.w	r6, r1, r6
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
    1350:	eba1 010c 	sub.w	r1, r1, ip
    1354:	e9c0 610f 	strd	r6, r1, [r0, #60]	; 0x3c
	hardware->ccm_register |= hardware->ccm_value;
    1358:	6839      	ldr	r1, [r7, #0]
    135a:	691e      	ldr	r6, [r3, #16]
    135c:	ea41 0106 	orr.w	r1, r1, r6
    1360:	6039      	str	r1, [r7, #0]
	half_duplex_mode_ = (format & SERIAL_HALF_DUPLEX) != 0;
    1362:	bf14      	ite	ne
    1364:	2101      	movne	r1, #1
    1366:	2100      	moveq	r1, #0
    1368:	7681      	strb	r1, [r0, #26]
	if (!half_duplex_mode_)  {
    136a:	f040 80ac 	bne.w	14c6 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x226>
		*(portControlRegister(hardware->rx_pins[rx_pin_index_].pin)) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    136e:	7e01      	ldrb	r1, [r0, #24]
    1370:	4e69      	ldr	r6, [pc, #420]	; (1518 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x278>)
    1372:	eb03 1801 	add.w	r8, r3, r1, lsl #4
    1376:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 1538 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x298>
    137a:	f898 7014 	ldrb.w	r7, [r8, #20]
		if (hardware->rx_pins[rx_pin_index_].select_input_register) {
    137e:	f8d8 a01c 	ldr.w	sl, [r8, #28]
		*(portControlRegister(hardware->rx_pins[rx_pin_index_].pin)) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    1382:	eb06 1707 	add.w	r7, r6, r7, lsl #4
    1386:	68b9      	ldr	r1, [r7, #8]
    1388:	f8c1 9000 	str.w	r9, [r1]
		*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = hardware->rx_pins[rx_pin_index_].mux_val;
    138c:	6879      	ldr	r1, [r7, #4]
    138e:	f8d8 7018 	ldr.w	r7, [r8, #24]
    1392:	600f      	str	r7, [r1, #0]
		if (hardware->rx_pins[rx_pin_index_].select_input_register) {
    1394:	f1ba 0f00 	cmp.w	sl, #0
    1398:	d003      	beq.n	13a2 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x102>
		 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
    139a:	f8d8 1020 	ldr.w	r1, [r8, #32]
    139e:	f8ca 1000 	str.w	r1, [sl]
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    13a2:	7e47      	ldrb	r7, [r0, #25]
    13a4:	21d9      	movs	r1, #217	; 0xd9
    13a6:	eb03 1807 	add.w	r8, r3, r7, lsl #4
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3) 
    13aa:	f898 c034 	ldrb.w	ip, [r8, #52]	; 0x34
    13ae:	eb06 1c0c 	add.w	ip, r6, ip, lsl #4
    13b2:	f8dc 7008 	ldr.w	r7, [ip, #8]
    13b6:	6039      	str	r1, [r7, #0]
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
    13b8:	f8dc 1004 	ldr.w	r1, [ip, #4]
    13bc:	f8d8 7038 	ldr.w	r7, [r8, #56]	; 0x38
    13c0:	600f      	str	r7, [r1, #0]
	if (hardware->tx_pins[tx_pin_index_].select_input_register) {
    13c2:	7e41      	ldrb	r1, [r0, #25]
    13c4:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    13c8:	6bcf      	ldr	r7, [r1, #60]	; 0x3c
    13ca:	b10f      	cbz	r7, 13d0 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x130>
	 	*(hardware->tx_pins[tx_pin_index_].select_input_register) =  hardware->tx_pins[tx_pin_index_].select_val;		
    13cc:	6c09      	ldr	r1, [r1, #64]	; 0x40
    13ce:	6039      	str	r1, [r7, #0]
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    13d0:	f10e 31ff 	add.w	r1, lr, #4294967295
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
    13d4:	f1be 0f08 	cmp.w	lr, #8
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    13d8:	ea4f 6101 	mov.w	r1, r1, lsl #24
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
    13dc:	bfcc      	ite	gt
    13de:	f04f 0e00 	movgt.w	lr, #0
    13e2:	f04f 0e01 	movle.w	lr, #1
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    13e6:	f001 51f8 	and.w	r1, r1, #520093696	; 0x1f000000
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
    13ea:	ea44 444e 	orr.w	r4, r4, lr, lsl #17
    13ee:	4321      	orrs	r1, r4
	attachInterruptVector(hardware->irq, hardware->irq_handler);
    13f0:	685c      	ldr	r4, [r3, #4]
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    13f2:	6129      	str	r1, [r5, #16]
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    13f4:	7859      	ldrb	r1, [r3, #1]
    13f6:	f101 0310 	add.w	r3, r1, #16
	port->PINCFG = 0;
    13fa:	2100      	movs	r1, #0
    13fc:	60e9      	str	r1, [r5, #12]
    13fe:	4947      	ldr	r1, [pc, #284]	; (151c <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x27c>)
    1400:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    1404:	6941      	ldr	r1, [r0, #20]
	NVIC_ENABLE_IRQ(hardware->irq);
    1406:	f04f 0e01 	mov.w	lr, #1
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    140a:	4c45      	ldr	r4, [pc, #276]	; (1520 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x280>)
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
    140c:	f002 0c03 	and.w	ip, r2, #3
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    1410:	784f      	ldrb	r7, [r1, #1]
    1412:	f891 1056 	ldrb.w	r1, [r1, #86]	; 0x56
	NVIC_ENABLE_IRQ(hardware->irq);
    1416:	4b43      	ldr	r3, [pc, #268]	; (1524 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x284>)
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    1418:	5539      	strb	r1, [r7, r4]
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
    141a:	f04f 1702 	mov.w	r7, #131074	; 0x20002
	NVIC_ENABLE_IRQ(hardware->irq);
    141e:	6944      	ldr	r4, [r0, #20]
    1420:	7861      	ldrb	r1, [r4, #1]
    1422:	eb03 1351 	add.w	r3, r3, r1, lsr #5
    1426:	f001 011f 	and.w	r1, r1, #31
    142a:	009b      	lsls	r3, r3, #2
    142c:	fa0e f101 	lsl.w	r1, lr, r1
    1430:	6019      	str	r1, [r3, #0]
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
    1432:	62ef      	str	r7, [r5, #44]	; 0x2c
	port->FIFO |= LPUART_FIFO_TXFE | LPUART_FIFO_RXFE;
    1434:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1436:	f043 0388 	orr.w	r3, r3, #136	; 0x88
    143a:	62ab      	str	r3, [r5, #40]	; 0x28
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
    143c:	0753      	lsls	r3, r2, #29
    143e:	d43e      	bmi.n	14be <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x21e>
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
    1440:	f44c 1370 	orr.w	r3, ip, #3932160	; 0x3c0000
	if ((format & 0x0F) == 0x04) ctrl |=  LPUART_CTRL_R9T8; // 8N2 is 9 bit with 9th bit always 1
    1444:	f002 010f 	and.w	r1, r2, #15
    1448:	2904      	cmp	r1, #4
    144a:	bf08      	it	eq
    144c:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
	if (format & 0x20) {
    1450:	0697      	lsls	r7, r2, #26
    1452:	d52e      	bpl.n	14b2 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x212>
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
    1454:	7e81      	ldrb	r1, [r0, #26]
		ctrl |= LPUART_CTRL_TXINV;		// tx invert
    1456:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
    145a:	2900      	cmp	r1, #0
    145c:	d13a      	bne.n	14d4 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x234>
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
    145e:	0716      	lsls	r6, r2, #28
	port->CTRL = ctrl;
    1460:	61ab      	str	r3, [r5, #24]
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
    1462:	d503      	bpl.n	146c <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1cc>
    1464:	692b      	ldr	r3, [r5, #16]
    1466:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    146a:	612b      	str	r3, [r5, #16]
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
    146c:	696b      	ldr	r3, [r5, #20]
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
    146e:	06d1      	lsls	r1, r2, #27
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
    1470:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
    1474:	bf48      	it	mi
    1476:	f043 5380 	orrmi.w	r3, r3, #268435456	; 0x10000000
	port->STAT = c;
    147a:	616b      	str	r3, [r5, #20]
	if ( format & 0x100) port->BAUD |= LPUART_BAUD_SBNS;	
    147c:	05d3      	lsls	r3, r2, #23
    147e:	d503      	bpl.n	1488 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1e8>
    1480:	692b      	ldr	r3, [r5, #16]
    1482:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1486:	612b      	str	r3, [r5, #16]
	if (hardware->_serialEvent) addToSerialEventsList();
    1488:	68a3      	ldr	r3, [r4, #8]
    148a:	b183      	cbz	r3, 14ae <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x20e>
	//digitalWrite(4, LOW);
}


void HardwareSerialIMXRT::addToSerialEventsList() {
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    148c:	4e26      	ldr	r6, [pc, #152]	; (1528 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x288>)
    148e:	7834      	ldrb	r4, [r6, #0]
    1490:	2c00      	cmp	r4, #0
    1492:	d03a      	beq.n	150a <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x26a>
    1494:	1e61      	subs	r1, r4, #1
    1496:	4d25      	ldr	r5, [pc, #148]	; (152c <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x28c>)
    1498:	b2c9      	uxtb	r1, r1
    149a:	1f2b      	subs	r3, r5, #4
    149c:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    14a0:	e001      	b.n	14a6 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x206>
    14a2:	4299      	cmp	r1, r3
    14a4:	d025      	beq.n	14f2 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x252>
		if (s_serials_with_serial_events[i] == this) return; // already in the list.
    14a6:	f853 2f04 	ldr.w	r2, [r3, #4]!
    14aa:	4290      	cmp	r0, r2
    14ac:	d1f9      	bne.n	14a2 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x202>
};
    14ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
    14b2:	7e81      	ldrb	r1, [r0, #26]
    14b4:	2900      	cmp	r1, #0
    14b6:	d0d2      	beq.n	145e <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1be>
    14b8:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
    14bc:	e7cf      	b.n	145e <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1be>
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
    14be:	4b1c      	ldr	r3, [pc, #112]	; (1530 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x290>)
    14c0:	ea4c 0303 	orr.w	r3, ip, r3
    14c4:	e7be      	b.n	1444 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1a4>
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3) 
    14c6:	7e47      	ldrb	r7, [r0, #25]
    14c8:	f24f 01d9 	movw	r1, #61657	; 0xf0d9
    14cc:	4e12      	ldr	r6, [pc, #72]	; (1518 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x278>)
    14ce:	eb03 1807 	add.w	r8, r3, r7, lsl #4
    14d2:	e76a      	b.n	13aa <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x10a>
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
    14d4:	7e41      	ldrb	r1, [r0, #25]
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
    14d6:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
    14da:	eb04 1101 	add.w	r1, r4, r1, lsl #4
    14de:	f891 1034 	ldrb.w	r1, [r1, #52]	; 0x34
    14e2:	eb06 1601 	add.w	r6, r6, r1, lsl #4
    14e6:	68b6      	ldr	r6, [r6, #8]
    14e8:	6831      	ldr	r1, [r6, #0]
    14ea:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
    14ee:	6031      	str	r1, [r6, #0]
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
    14f0:	e7b5      	b.n	145e <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1be>
	}
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    14f2:	1c63      	adds	r3, r4, #1
    14f4:	b2db      	uxtb	r3, r3
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    14f6:	4a0f      	ldr	r2, [pc, #60]	; (1534 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x294>)
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    14f8:	7033      	strb	r3, [r6, #0]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    14fa:	7813      	ldrb	r3, [r2, #0]
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    14fc:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    1500:	f043 0302 	orr.w	r3, r3, #2
    1504:	7013      	strb	r3, [r2, #0]
};
    1506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    150a:	2301      	movs	r3, #1
    150c:	4d07      	ldr	r5, [pc, #28]	; (152c <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x28c>)
    150e:	e7f2      	b.n	14f6 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x256>
    1510:	4bb71b00 	.word	0x4bb71b00
    1514:	60ad78ec 	.word	0x60ad78ec
    1518:	20007350 	.word	0x20007350
    151c:	20008400 	.word	0x20008400
    1520:	e000e400 	.word	0xe000e400
    1524:	38003840 	.word	0x38003840
    1528:	20008e98 	.word	0x20008e98
    152c:	200089c4 	.word	0x200089c4
    1530:	003c0010 	.word	0x003c0010
    1534:	20008ea7 	.word	0x20008ea7
    1538:	0001f038 	.word	0x0001f038

0000153c <nvic_execution_priority()>:
	__asm__ volatile("mrs %0, faultmask\n" : "=r" (faultmask)::);
    153c:	f3ef 8013 	mrs	r0, FAULTMASK
	if (faultmask) return -1;
    1540:	b9b8      	cbnz	r0, 1572 <nvic_execution_priority()+0x36>
	__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    1542:	f3ef 8310 	mrs	r3, PRIMASK
	if (primask) return 0;
    1546:	b94b      	cbnz	r3, 155c <nvic_execution_priority()+0x20>
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    1548:	f3ef 8205 	mrs	r2, IPSR
	if (ipsr) {
    154c:	b93a      	cbnz	r2, 155e <nvic_execution_priority()+0x22>
	uint32_t priority=256;
    154e:	f44f 7380 	mov.w	r3, #256	; 0x100
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    1552:	f3ef 8011 	mrs	r0, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    1556:	b150      	cbz	r0, 156e <nvic_execution_priority()+0x32>
    1558:	4298      	cmp	r0, r3
    155a:	d208      	bcs.n	156e <nvic_execution_priority()+0x32>
}
    155c:	4770      	bx	lr
		if (ipsr < 16) priority = 0; // could be non-zero
    155e:	2a0f      	cmp	r2, #15
    1560:	d9f7      	bls.n	1552 <nvic_execution_priority()+0x16>
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
    1562:	4b05      	ldr	r3, [pc, #20]	; (1578 <nvic_execution_priority()+0x3c>)
    1564:	5c9b      	ldrb	r3, [r3, r2]
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    1566:	f3ef 8011 	mrs	r0, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    156a:	2800      	cmp	r0, #0
    156c:	d1f4      	bne.n	1558 <nvic_execution_priority()+0x1c>
    156e:	4618      	mov	r0, r3
	return priority;
    1570:	4770      	bx	lr
	if (faultmask) return -1;
    1572:	f04f 30ff 	mov.w	r0, #4294967295
    1576:	e7f1      	b.n	155c <nvic_execution_priority()+0x20>
    1578:	e000e3f0 	.word	0xe000e3f0

0000157c <HardwareSerialIMXRT::write9bit(unsigned long)>:
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
    157c:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
    157e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1582:	4604      	mov	r4, r0
    1584:	460f      	mov	r7, r1
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    1586:	6906      	ldr	r6, [r0, #16]
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
    1588:	b113      	cbz	r3, 1590 <HardwareSerialIMXRT::write9bit(unsigned long)+0x14>
    158a:	6d42      	ldr	r2, [r0, #84]	; 0x54
    158c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	if(half_duplex_mode_) {		
    1590:	7ea3      	ldrb	r3, [r4, #26]
    1592:	b12b      	cbz	r3, 15a0 <HardwareSerialIMXRT::write9bit(unsigned long)+0x24>
		__disable_irq();
    1594:	b672      	cpsid	i
	    port->CTRL |= LPUART_CTRL_TXDIR;
    1596:	69b3      	ldr	r3, [r6, #24]
    1598:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    159c:	61b3      	str	r3, [r6, #24]
		__enable_irq();
    159e:	b662      	cpsie	i
	head = tx_buffer_head_;
    15a0:	f8b4 5046 	ldrh.w	r5, [r4, #70]	; 0x46
	if (++head >= tx_buffer_total_size_) head = 0;
    15a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
	head = tx_buffer_head_;
    15a6:	b2ad      	uxth	r5, r5
	if (++head >= tx_buffer_total_size_) head = 0;
    15a8:	3501      	adds	r5, #1
    15aa:	42ab      	cmp	r3, r5
    15ac:	d84c      	bhi.n	1648 <HardwareSerialIMXRT::write9bit(unsigned long)+0xcc>
    15ae:	f04f 0800 	mov.w	r8, #0
    15b2:	4645      	mov	r5, r8
	while (tx_buffer_tail_ == head) {
    15b4:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    15b8:	b29b      	uxth	r3, r3
    15ba:	429d      	cmp	r5, r3
    15bc:	d019      	beq.n	15f2 <HardwareSerialIMXRT::write9bit(unsigned long)+0x76>
    15be:	e028      	b.n	1612 <HardwareSerialIMXRT::write9bit(unsigned long)+0x96>
			if ((port->STAT & LPUART_STAT_TDRE)) {
    15c0:	6973      	ldr	r3, [r6, #20]
    15c2:	021b      	lsls	r3, r3, #8
    15c4:	d510      	bpl.n	15e8 <HardwareSerialIMXRT::write9bit(unsigned long)+0x6c>
				uint32_t tail = tx_buffer_tail_;
    15c6:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
				if (++tail >= tx_buffer_total_size_) tail = 0;
    15ca:	6b62      	ldr	r2, [r4, #52]	; 0x34
				uint32_t tail = tx_buffer_tail_;
    15cc:	b29b      	uxth	r3, r3
				if (++tail >= tx_buffer_total_size_) tail = 0;
    15ce:	3301      	adds	r3, #1
    15d0:	429a      	cmp	r2, r3
    15d2:	d936      	bls.n	1642 <HardwareSerialIMXRT::write9bit(unsigned long)+0xc6>
				tx_buffer_tail_ = tail;
    15d4:	b29a      	uxth	r2, r3
				if (tail < tx_buffer_size_) {
    15d6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    15d8:	4299      	cmp	r1, r3
    15da:	d92d      	bls.n	1638 <HardwareSerialIMXRT::write9bit(unsigned long)+0xbc>
					n = tx_buffer_[tail];
    15dc:	69e1      	ldr	r1, [r4, #28]
    15de:	5ccb      	ldrb	r3, [r1, r3]
    15e0:	b2db      	uxtb	r3, r3
				port->DATA  = n;
    15e2:	61f3      	str	r3, [r6, #28]
				tx_buffer_tail_ = tail;
    15e4:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
	while (tx_buffer_tail_ == head) {
    15e8:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    15ec:	b29b      	uxth	r3, r3
    15ee:	42ab      	cmp	r3, r5
    15f0:	d10f      	bne.n	1612 <HardwareSerialIMXRT::write9bit(unsigned long)+0x96>
		int priority = nvic_execution_priority();
    15f2:	f7ff ffa3 	bl	153c <nvic_execution_priority()>
		if (priority <= hardware->irq_priority) {
    15f6:	6963      	ldr	r3, [r4, #20]
    15f8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
    15fc:	4283      	cmp	r3, r0
    15fe:	dadf      	bge.n	15c0 <HardwareSerialIMXRT::write9bit(unsigned long)+0x44>
		} else if (priority >= 256) 
    1600:	28ff      	cmp	r0, #255	; 0xff
    1602:	ddf1      	ble.n	15e8 <HardwareSerialIMXRT::write9bit(unsigned long)+0x6c>
			yield(); // wait
    1604:	f002 f8c0 	bl	3788 <yield>
	while (tx_buffer_tail_ == head) {
    1608:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    160c:	b29b      	uxth	r3, r3
    160e:	42ab      	cmp	r3, r5
    1610:	d0ef      	beq.n	15f2 <HardwareSerialIMXRT::write9bit(unsigned long)+0x76>
	if (head < tx_buffer_size_) {
    1612:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1614:	42ab      	cmp	r3, r5
    1616:	d91a      	bls.n	164e <HardwareSerialIMXRT::write9bit(unsigned long)+0xd2>
		tx_buffer_[head] = c;
    1618:	b2ff      	uxtb	r7, r7
    161a:	69e3      	ldr	r3, [r4, #28]
    161c:	555f      	strb	r7, [r3, r5]
	__disable_irq();
    161e:	b672      	cpsid	i
	transmitting_ = 1;
    1620:	2001      	movs	r0, #1
    1622:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
	tx_buffer_head_ = head;
    1626:	f8a4 8046 	strh.w	r8, [r4, #70]	; 0x46
	port->CTRL |= LPUART_CTRL_TIE; // (may need to handle this issue)BITBAND_SET_BIT(LPUART0_CTRL, TIE_BIT);
    162a:	69b3      	ldr	r3, [r6, #24]
    162c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    1630:	61b3      	str	r3, [r6, #24]
	__enable_irq();
    1632:	b662      	cpsie	i
}
    1634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					n = tx_buffer_storage_[tail-tx_buffer_size_];
    1638:	1a5b      	subs	r3, r3, r1
    163a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    163c:	5ccb      	ldrb	r3, [r1, r3]
    163e:	b2db      	uxtb	r3, r3
    1640:	e7cf      	b.n	15e2 <HardwareSerialIMXRT::write9bit(unsigned long)+0x66>
    1642:	2200      	movs	r2, #0
				if (++tail >= tx_buffer_total_size_) tail = 0;
    1644:	4613      	mov	r3, r2
    1646:	e7c6      	b.n	15d6 <HardwareSerialIMXRT::write9bit(unsigned long)+0x5a>
	tx_buffer_head_ = head;
    1648:	fa1f f885 	uxth.w	r8, r5
    164c:	e7b2      	b.n	15b4 <HardwareSerialIMXRT::write9bit(unsigned long)+0x38>
		tx_buffer_storage_[head - tx_buffer_size_] = c;
    164e:	1aed      	subs	r5, r5, r3
    1650:	b2ff      	uxtb	r7, r7
    1652:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1654:	555f      	strb	r7, [r3, r5]
    1656:	e7e2      	b.n	161e <HardwareSerialIMXRT::write9bit(unsigned long)+0xa2>

00001658 <HardwareSerialIMXRT::write(unsigned char)>:
	return write9bit(c);
    1658:	f7ff bf90 	b.w	157c <HardwareSerialIMXRT::write9bit(unsigned long)>

0000165c <HardwareSerialIMXRT::IRQHandler()>:
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    165c:	6902      	ldr	r2, [r0, #16]
	if (port->STAT & (LPUART_STAT_RDRF | LPUART_STAT_IDLE)) {
    165e:	6953      	ldr	r3, [r2, #20]
    1660:	f413 1f40 	tst.w	r3, #3145728	; 0x300000
{
    1664:	b570      	push	{r4, r5, r6, lr}
	if (port->STAT & (LPUART_STAT_RDRF | LPUART_STAT_IDLE)) {
    1666:	d043      	beq.n	16f0 <HardwareSerialIMXRT::IRQHandler()+0x94>
		uint8_t avail = (port->WATER >> 24) & 0x7;
    1668:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
		if (avail) {
    166a:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
		uint8_t avail = (port->WATER >> 24) & 0x7;
    166e:	f3c3 6e02 	ubfx	lr, r3, #24, #3
		if (avail) {
    1672:	d03a      	beq.n	16ea <HardwareSerialIMXRT::IRQHandler()+0x8e>
			head = rx_buffer_head_;
    1674:	f8b0 504a 	ldrh.w	r5, [r0, #74]	; 0x4a
			tail = rx_buffer_tail_;
    1678:	f8b0 604c 	ldrh.w	r6, [r0, #76]	; 0x4c
			head = rx_buffer_head_;
    167c:	b2ad      	uxth	r5, r5
			tail = rx_buffer_tail_;
    167e:	b2b6      	uxth	r6, r6
    1680:	e007      	b.n	1692 <HardwareSerialIMXRT::IRQHandler()+0x36>
						rx_buffer_[head] = n;
    1682:	6a01      	ldr	r1, [r0, #32]
    1684:	f801 c003 	strb.w	ip, [r1, r3]
			} while (--avail > 0) ;
    1688:	f10e 33ff 	add.w	r3, lr, #4294967295
    168c:	f013 0eff 	ands.w	lr, r3, #255	; 0xff
    1690:	d01d      	beq.n	16ce <HardwareSerialIMXRT::IRQHandler()+0x72>
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    1692:	69d1      	ldr	r1, [r2, #28]
				newhead = head + 1;
    1694:	1c6b      	adds	r3, r5, #1
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    1696:	6b84      	ldr	r4, [r0, #56]	; 0x38
				if (newhead != rx_buffer_tail_) {
    1698:	f8b0 c04c 	ldrh.w	ip, [r0, #76]	; 0x4c
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    169c:	f3c1 0109 	ubfx	r1, r1, #0, #10
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    16a0:	429c      	cmp	r4, r3
    16a2:	bf98      	it	ls
    16a4:	2300      	movls	r3, #0
				if (newhead != rx_buffer_tail_) {
    16a6:	fa1f fc8c 	uxth.w	ip, ip
    16aa:	459c      	cmp	ip, r3
    16ac:	d0ec      	beq.n	1688 <HardwareSerialIMXRT::IRQHandler()+0x2c>
					if (newhead < rx_buffer_size_) {
    16ae:	6b04      	ldr	r4, [r0, #48]	; 0x30
						rx_buffer_[head] = n;
    16b0:	fa5f fc81 	uxtb.w	ip, r1
    16b4:	461d      	mov	r5, r3
					if (newhead < rx_buffer_size_) {
    16b6:	429c      	cmp	r4, r3
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    16b8:	eba3 0404 	sub.w	r4, r3, r4
					if (newhead < rx_buffer_size_) {
    16bc:	d8e1      	bhi.n	1682 <HardwareSerialIMXRT::IRQHandler()+0x26>
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    16be:	6a43      	ldr	r3, [r0, #36]	; 0x24
    16c0:	f803 c004 	strb.w	ip, [r3, r4]
			} while (--avail > 0) ;
    16c4:	f10e 33ff 	add.w	r3, lr, #4294967295
    16c8:	f013 0eff 	ands.w	lr, r3, #255	; 0xff
    16cc:	d1e1      	bne.n	1692 <HardwareSerialIMXRT::IRQHandler()+0x36>
			rx_buffer_head_ = head;
    16ce:	b2ab      	uxth	r3, r5
    16d0:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
			if (rts_pin_baseReg_) {
    16d4:	6d83      	ldr	r3, [r0, #88]	; 0x58
    16d6:	b143      	cbz	r3, 16ea <HardwareSerialIMXRT::IRQHandler()+0x8e>
				if (head >= tail) avail = head - tail;
    16d8:	42b5      	cmp	r5, r6
    16da:	d354      	bcc.n	1786 <HardwareSerialIMXRT::IRQHandler()+0x12a>
    16dc:	1bad      	subs	r5, r5, r6
				if (avail >= rts_high_watermark_) rts_deassert();
    16de:	6c01      	ldr	r1, [r0, #64]	; 0x40
    16e0:	42a9      	cmp	r1, r5
    16e2:	d802      	bhi.n	16ea <HardwareSerialIMXRT::IRQHandler()+0x8e>
	DIRECT_WRITE_HIGH(rts_pin_baseReg_, rts_pin_bitmask_);
    16e4:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
    16e6:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		if (port->STAT & LPUART_STAT_IDLE) {
    16ea:	6953      	ldr	r3, [r2, #20]
    16ec:	02d9      	lsls	r1, r3, #11
    16ee:	d445      	bmi.n	177c <HardwareSerialIMXRT::IRQHandler()+0x120>
	ctrl = port->CTRL;
    16f0:	6996      	ldr	r6, [r2, #24]
	if ((ctrl & LPUART_CTRL_TIE) && (port->STAT & LPUART_STAT_TDRE))
    16f2:	0233      	lsls	r3, r6, #8
    16f4:	d528      	bpl.n	1748 <HardwareSerialIMXRT::IRQHandler()+0xec>
    16f6:	6953      	ldr	r3, [r2, #20]
    16f8:	021d      	lsls	r5, r3, #8
    16fa:	d525      	bpl.n	1748 <HardwareSerialIMXRT::IRQHandler()+0xec>
		head = tx_buffer_head_;
    16fc:	f8b0 5046 	ldrh.w	r5, [r0, #70]	; 0x46
		tail = tx_buffer_tail_;
    1700:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
		head = tx_buffer_head_;
    1704:	b2ad      	uxth	r5, r5
		tail = tx_buffer_tail_;
    1706:	b29b      	uxth	r3, r3
    1708:	e006      	b.n	1718 <HardwareSerialIMXRT::IRQHandler()+0xbc>
				n = tx_buffer_[tail];
    170a:	69c1      	ldr	r1, [r0, #28]
    170c:	5cc9      	ldrb	r1, [r1, r3]
    170e:	b2c9      	uxtb	r1, r1
			port->DATA = n;
    1710:	61d1      	str	r1, [r2, #28]
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
    1712:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    1714:	054c      	lsls	r4, r1, #21
    1716:	d412      	bmi.n	173e <HardwareSerialIMXRT::IRQHandler()+0xe2>
			if (head == tail) break;
    1718:	42ab      	cmp	r3, r5
    171a:	d038      	beq.n	178e <HardwareSerialIMXRT::IRQHandler()+0x132>
			if (++tail >= tx_buffer_total_size_) tail = 0;
    171c:	6b44      	ldr	r4, [r0, #52]	; 0x34
    171e:	3301      	adds	r3, #1
			if (tail < tx_buffer_size_) {
    1720:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			if (++tail >= tx_buffer_total_size_) tail = 0;
    1722:	429c      	cmp	r4, r3
    1724:	bf98      	it	ls
    1726:	2300      	movls	r3, #0
			if (tail < tx_buffer_size_) {
    1728:	4299      	cmp	r1, r3
				n = tx_buffer_storage_[tail-tx_buffer_size_];
    172a:	eba3 0401 	sub.w	r4, r3, r1
			if (tail < tx_buffer_size_) {
    172e:	d8ec      	bhi.n	170a <HardwareSerialIMXRT::IRQHandler()+0xae>
				n = tx_buffer_storage_[tail-tx_buffer_size_];
    1730:	6a81      	ldr	r1, [r0, #40]	; 0x28
    1732:	5d09      	ldrb	r1, [r1, r4]
    1734:	b2c9      	uxtb	r1, r1
			port->DATA = n;
    1736:	61d1      	str	r1, [r2, #28]
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
    1738:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    173a:	054c      	lsls	r4, r1, #21
    173c:	d5ec      	bpl.n	1718 <HardwareSerialIMXRT::IRQHandler()+0xbc>
		tx_buffer_tail_ = tail;
    173e:	b299      	uxth	r1, r3
		if (head == tail) {
    1740:	42ab      	cmp	r3, r5
		tx_buffer_tail_ = tail;
    1742:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
		if (head == tail) {
    1746:	d025      	beq.n	1794 <HardwareSerialIMXRT::IRQHandler()+0x138>
	if ((ctrl & LPUART_CTRL_TCIE) && (port->STAT & LPUART_STAT_TC))
    1748:	0271      	lsls	r1, r6, #9
    174a:	d516      	bpl.n	177a <HardwareSerialIMXRT::IRQHandler()+0x11e>
    174c:	6953      	ldr	r3, [r2, #20]
    174e:	025b      	lsls	r3, r3, #9
    1750:	d513      	bpl.n	177a <HardwareSerialIMXRT::IRQHandler()+0x11e>
		transmitting_ = 0;
    1752:	2100      	movs	r1, #0
		if (transmit_pin_baseReg_) DIRECT_WRITE_LOW(transmit_pin_baseReg_, transmit_pin_bitmask_);
    1754:	6d03      	ldr	r3, [r0, #80]	; 0x50
		transmitting_ = 0;
    1756:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
		if (transmit_pin_baseReg_) DIRECT_WRITE_LOW(transmit_pin_baseReg_, transmit_pin_bitmask_);
    175a:	b113      	cbz	r3, 1762 <HardwareSerialIMXRT::IRQHandler()+0x106>
    175c:	6d41      	ldr	r1, [r0, #84]	; 0x54
    175e:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
		if(half_duplex_mode_) {		
    1762:	7e83      	ldrb	r3, [r0, #26]
    1764:	b12b      	cbz	r3, 1772 <HardwareSerialIMXRT::IRQHandler()+0x116>
			__disable_irq();
    1766:	b672      	cpsid	i
		    port->CTRL &= ~LPUART_CTRL_TXDIR;
    1768:	6993      	ldr	r3, [r2, #24]
    176a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
    176e:	6193      	str	r3, [r2, #24]
			__enable_irq();
    1770:	b662      	cpsie	i
		port->CTRL &= ~LPUART_CTRL_TCIE;
    1772:	6993      	ldr	r3, [r2, #24]
    1774:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
    1778:	6193      	str	r3, [r2, #24]
}
    177a:	bd70      	pop	{r4, r5, r6, pc}
			port->STAT |= LPUART_STAT_IDLE;	// writing a 1 to idle should clear it. 
    177c:	6953      	ldr	r3, [r2, #20]
    177e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    1782:	6153      	str	r3, [r2, #20]
    1784:	e7b4      	b.n	16f0 <HardwareSerialIMXRT::IRQHandler()+0x94>
				else avail = rx_buffer_total_size_ + head - tail;
    1786:	6b81      	ldr	r1, [r0, #56]	; 0x38
    1788:	1b89      	subs	r1, r1, r6
    178a:	440d      	add	r5, r1
    178c:	e7a7      	b.n	16de <HardwareSerialIMXRT::IRQHandler()+0x82>
		tx_buffer_tail_ = tail;
    178e:	b29b      	uxth	r3, r3
    1790:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
			port->CTRL &= ~LPUART_CTRL_TIE; 
    1794:	6993      	ldr	r3, [r2, #24]
    1796:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    179a:	6193      	str	r3, [r2, #24]
  			port->CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
    179c:	6993      	ldr	r3, [r2, #24]
    179e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    17a2:	6193      	str	r3, [r2, #24]
    17a4:	e7d0      	b.n	1748 <HardwareSerialIMXRT::IRQHandler()+0xec>
    17a6:	bf00      	nop

000017a8 <IRQHandler_Serial2>:
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest


void IRQHandler_Serial2()
{
	Serial2.IRQHandler();
    17a8:	4801      	ldr	r0, [pc, #4]	; (17b0 <IRQHandler_Serial2+0x8>)
    17aa:	f7ff bf57 	b.w	165c <HardwareSerialIMXRT::IRQHandler()>
    17ae:	bf00      	nop
    17b0:	20007b98 	.word	0x20007b98

000017b4 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    17b4:	4608      	mov	r0, r1
    17b6:	f001 bf53 	b.w	3660 <usb_serial_putchar>
    17ba:	bf00      	nop

000017bc <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>:
		base = 10;
    17bc:	2a01      	cmp	r2, #1
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    17be:	b570      	push	{r4, r5, r6, lr}
		base = 10;
    17c0:	bf08      	it	eq
    17c2:	220a      	moveq	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    17c4:	b08a      	sub	sp, #40	; 0x28
	if (n == 0) {
    17c6:	b391      	cbz	r1, 182e <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x72>
		i = sizeof(buf) - 1;
    17c8:	f04f 0e21 	mov.w	lr, #33	; 0x21
    17cc:	e001      	b.n	17d2 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x16>
			i--;
    17ce:	fa5f fe86 	uxtb.w	lr, r6
    17d2:	f10e 36ff 	add.w	r6, lr, #4294967295
			digit = n % base;
    17d6:	fbb1 f5f2 	udiv	r5, r1, r2
    17da:	fb02 1415 	mls	r4, r2, r5, r1
    17de:	fa5f fc84 	uxtb.w	ip, r4
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    17e2:	2c09      	cmp	r4, #9
    17e4:	f10c 0437 	add.w	r4, ip, #55	; 0x37
    17e8:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
    17ec:	bf98      	it	ls
    17ee:	fa5f f48c 	uxtbls.w	r4, ip
    17f2:	f10e 0c28 	add.w	ip, lr, #40	; 0x28
    17f6:	bf88      	it	hi
    17f8:	b2e4      	uxtbhi	r4, r4
			if (n == 0) break;
    17fa:	4291      	cmp	r1, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    17fc:	44ec      	add	ip, sp
			n /= base;
    17fe:	4629      	mov	r1, r5
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1800:	f80c 4c24 	strb.w	r4, [ip, #-36]
			if (n == 0) break;
    1804:	d2e3      	bcs.n	17ce <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x12>
	if (sign) {
    1806:	b14b      	cbz	r3, 181c <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x60>
		i--;
    1808:	f10e 3eff 	add.w	lr, lr, #4294967295
		buf[i] = '-';
    180c:	222d      	movs	r2, #45	; 0x2d
		i--;
    180e:	fa5f fe8e 	uxtb.w	lr, lr
		buf[i] = '-';
    1812:	f10e 0328 	add.w	r3, lr, #40	; 0x28
    1816:	446b      	add	r3, sp
    1818:	f803 2c24 	strb.w	r2, [r3, #-36]
	return write(buf + i, sizeof(buf) - i);
    181c:	6803      	ldr	r3, [r0, #0]
    181e:	a901      	add	r1, sp, #4
    1820:	f1ce 0222 	rsb	r2, lr, #34	; 0x22
    1824:	685b      	ldr	r3, [r3, #4]
    1826:	4471      	add	r1, lr
    1828:	4798      	blx	r3
}
    182a:	b00a      	add	sp, #40	; 0x28
    182c:	bd70      	pop	{r4, r5, r6, pc}
		buf[sizeof(buf) - 1] = '0';
    182e:	2230      	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    1830:	f04f 0e21 	mov.w	lr, #33	; 0x21
		buf[sizeof(buf) - 1] = '0';
    1834:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    1838:	e7e5      	b.n	1806 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x4a>
    183a:	bf00      	nop

0000183c <Print::write(unsigned char const*, unsigned int)>:
{
    183c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buffer == nullptr) return 0;
    1840:	460c      	mov	r4, r1
    1842:	b1d1      	cbz	r1, 187a <Print::write(unsigned char const*, unsigned int)+0x3e>
	while (size--) count += write(*buffer++);
    1844:	b1ea      	cbz	r2, 1882 <Print::write(unsigned char const*, unsigned int)+0x46>
    1846:	4680      	mov	r8, r0
    1848:	188e      	adds	r6, r1, r2
	size_t count = 0;
    184a:	2500      	movs	r5, #0
    184c:	4f0e      	ldr	r7, [pc, #56]	; (1888 <Print::write(unsigned char const*, unsigned int)+0x4c>)
    184e:	e004      	b.n	185a <Print::write(unsigned char const*, unsigned int)+0x1e>
    1850:	f001 ff06 	bl	3660 <usb_serial_putchar>
	while (size--) count += write(*buffer++);
    1854:	42b4      	cmp	r4, r6
    1856:	4405      	add	r5, r0
    1858:	d00c      	beq.n	1874 <Print::write(unsigned char const*, unsigned int)+0x38>
    185a:	f8d8 3000 	ldr.w	r3, [r8]
    185e:	f814 0b01 	ldrb.w	r0, [r4], #1
    1862:	681b      	ldr	r3, [r3, #0]
    1864:	42bb      	cmp	r3, r7
    1866:	d0f3      	beq.n	1850 <Print::write(unsigned char const*, unsigned int)+0x14>
    1868:	4601      	mov	r1, r0
    186a:	4640      	mov	r0, r8
    186c:	4798      	blx	r3
    186e:	42b4      	cmp	r4, r6
    1870:	4405      	add	r5, r0
    1872:	d1f2      	bne.n	185a <Print::write(unsigned char const*, unsigned int)+0x1e>
}
    1874:	4628      	mov	r0, r5
    1876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (buffer == nullptr) return 0;
    187a:	460d      	mov	r5, r1
}
    187c:	4628      	mov	r0, r5
    187e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (buffer == nullptr) return 0;
    1882:	4615      	mov	r5, r2
    1884:	e7f6      	b.n	1874 <Print::write(unsigned char const*, unsigned int)+0x38>
    1886:	bf00      	nop
    1888:	000017b5 	.word	0x000017b5

0000188c <Print::print(long)>:
	if (n < 0) {
    188c:	2900      	cmp	r1, #0
    188e:	db03      	blt.n	1898 <Print::print(long)+0xc>
	uint8_t sign=0;
    1890:	2300      	movs	r3, #0
	if (base == 0) {
    1892:	220a      	movs	r2, #10
    1894:	f7ff bf92 	b.w	17bc <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
		n = -n;
    1898:	4249      	negs	r1, r1
		sign = '-';
    189a:	232d      	movs	r3, #45	; 0x2d
	if (base == 0) {
    189c:	220a      	movs	r2, #10
    189e:	f7ff bf8d 	b.w	17bc <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    18a2:	bf00      	nop

000018a4 <Print::println()>:
{
    18a4:	b500      	push	{lr}
	return write(buf, 2);
    18a6:	6803      	ldr	r3, [r0, #0]
{
    18a8:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    18aa:	f640 2c0d 	movw	ip, #2573	; 0xa0d
	return write(buf, 2);
    18ae:	2202      	movs	r2, #2
    18b0:	a901      	add	r1, sp, #4
    18b2:	685b      	ldr	r3, [r3, #4]
	uint8_t buf[2]={'\r', '\n'};
    18b4:	f8ad c004 	strh.w	ip, [sp, #4]
	return write(buf, 2);
    18b8:	4798      	blx	r3
}
    18ba:	b003      	add	sp, #12
    18bc:	f85d fb04 	ldr.w	pc, [sp], #4

000018c0 <_write>:
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    18c0:	4b05      	ldr	r3, [pc, #20]	; (18d8 <_write+0x18>)
    18c2:	2802      	cmp	r0, #2
    18c4:	bf88      	it	hi
    18c6:	4603      	movhi	r3, r0
{
    18c8:	b410      	push	{r4}
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    18ca:	681c      	ldr	r4, [r3, #0]
    18cc:	4618      	mov	r0, r3
    18ce:	6863      	ldr	r3, [r4, #4]
}
    18d0:	f85d 4b04 	ldr.w	r4, [sp], #4
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    18d4:	4718      	bx	r3
    18d6:	bf00      	nop
    18d8:	20007b88 	.word	0x20007b88

000018dc <Print::printf(char const*, ...)>:
{
    18dc:	b40e      	push	{r1, r2, r3}
    18de:	b500      	push	{lr}
    18e0:	b082      	sub	sp, #8
    18e2:	aa03      	add	r2, sp, #12
    18e4:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, format);
    18e8:	9201      	str	r2, [sp, #4]
	int retval = vdprintf((int)this, format, ap);
    18ea:	f004 f9a1 	bl	5c30 <vdprintf>
}
    18ee:	b002      	add	sp, #8
    18f0:	f85d eb04 	ldr.w	lr, [sp], #4
    18f4:	b003      	add	sp, #12
    18f6:	4770      	bx	lr

000018f8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	if (base == 0) {
    18f8:	b95a      	cbnz	r2, 1912 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x1a>
		return write((uint8_t)n);
    18fa:	6803      	ldr	r3, [r0, #0]
    18fc:	b2c9      	uxtb	r1, r1
    18fe:	4a07      	ldr	r2, [pc, #28]	; (191c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x24>)
    1900:	681b      	ldr	r3, [r3, #0]
    1902:	4293      	cmp	r3, r2
{
    1904:	b500      	push	{lr}
    1906:	d106      	bne.n	1916 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x1e>
    1908:	4608      	mov	r0, r1
}
    190a:	f85d eb04 	ldr.w	lr, [sp], #4
    190e:	f001 bea7 	b.w	3660 <usb_serial_putchar>
    1912:	f7ff bf53 	b.w	17bc <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    1916:	f85d eb04 	ldr.w	lr, [sp], #4
		return write((uint8_t)n);
    191a:	4718      	bx	r3
    191c:	000017b5 	.word	0x000017b5

00001920 <String::String(char const*)>:
String::String(const char *cstr)
    1920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	buffer = NULL;
    1922:	2600      	movs	r6, #0
String::String(const char *cstr)
    1924:	4604      	mov	r4, r0
	capacity = 0;
    1926:	e9c0 6600 	strd	r6, r6, [r0]
	len = 0;
    192a:	6086      	str	r6, [r0, #8]
	if (cstr) copy(cstr, strlen(cstr));
    192c:	b129      	cbz	r1, 193a <String::String(char const*)+0x1a>
    192e:	4608      	mov	r0, r1
    1930:	460d      	mov	r5, r1
    1932:	f004 fe25 	bl	6580 <strlen>
	if (length == 0) {
    1936:	4607      	mov	r7, r0
    1938:	b908      	cbnz	r0, 193e <String::String(char const*)+0x1e>
}
    193a:	4620      	mov	r0, r4
    193c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    193e:	3001      	adds	r0, #1
    1940:	f002 fb38 	bl	3fb4 <malloc>
	if (newbuffer) {
    1944:	2800      	cmp	r0, #0
    1946:	d0f8      	beq.n	193a <String::String(char const*)+0x1a>
	strcpy(buffer, cstr);
    1948:	4629      	mov	r1, r5
		if (len == 0) buffer[0] = 0;
    194a:	7006      	strb	r6, [r0, #0]
		buffer = newbuffer;
    194c:	6020      	str	r0, [r4, #0]
	len = length;
    194e:	e9c4 7701 	strd	r7, r7, [r4, #4]
	strcpy(buffer, cstr);
    1952:	f004 fda3 	bl	649c <strcpy>
}
    1956:	4620      	mov	r0, r4
    1958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    195a:	bf00      	nop

0000195c <String::~String()>:
String::~String()
    195c:	b510      	push	{r4, lr}
    195e:	4604      	mov	r4, r0
	free(buffer);
    1960:	6800      	ldr	r0, [r0, #0]
    1962:	f002 fb2f 	bl	3fc4 <free>
}
    1966:	4620      	mov	r0, r4
    1968:	bd10      	pop	{r4, pc}
    196a:	bf00      	nop

0000196c <String::copy(char const*, unsigned int)>:
{
    196c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    196e:	4604      	mov	r4, r0
	if (length == 0) {
    1970:	4615      	mov	r5, r2
    1972:	b932      	cbnz	r2, 1982 <String::copy(char const*, unsigned int)+0x16>
		if (buffer) buffer[0] = 0;
    1974:	6803      	ldr	r3, [r0, #0]
    1976:	b103      	cbz	r3, 197a <String::copy(char const*, unsigned int)+0xe>
    1978:	701a      	strb	r2, [r3, #0]
		len = 0;
    197a:	2300      	movs	r3, #0
}
    197c:	4620      	mov	r0, r4
		len = 0;
    197e:	60a3      	str	r3, [r4, #8]
}
    1980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (capacity >= size) return 1;
    1982:	6843      	ldr	r3, [r0, #4]
    1984:	460e      	mov	r6, r1
    1986:	429a      	cmp	r2, r3
    1988:	d91c      	bls.n	19c4 <String::copy(char const*, unsigned int)+0x58>
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    198a:	1c51      	adds	r1, r2, #1
    198c:	6800      	ldr	r0, [r0, #0]
    198e:	f002 fddd 	bl	454c <realloc>
	if (newbuffer) {
    1992:	4607      	mov	r7, r0
    1994:	b160      	cbz	r0, 19b0 <String::copy(char const*, unsigned int)+0x44>
		if (len == 0) buffer[0] = 0;
    1996:	68a3      	ldr	r3, [r4, #8]
		capacity = maxStrLen;
    1998:	e9c4 0500 	strd	r0, r5, [r4]
		if (len == 0) buffer[0] = 0;
    199c:	b90b      	cbnz	r3, 19a2 <String::copy(char const*, unsigned int)+0x36>
    199e:	7003      	strb	r3, [r0, #0]
	strcpy(buffer, cstr);
    19a0:	6827      	ldr	r7, [r4, #0]
    19a2:	4631      	mov	r1, r6
    19a4:	4638      	mov	r0, r7
	len = length;
    19a6:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    19a8:	f004 fd78 	bl	649c <strcpy>
}
    19ac:	4620      	mov	r0, r4
    19ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (buffer) {
    19b0:	6820      	ldr	r0, [r4, #0]
    19b2:	b110      	cbz	r0, 19ba <String::copy(char const*, unsigned int)+0x4e>
			free(buffer);
    19b4:	f002 fb06 	bl	3fc4 <free>
			buffer = NULL;
    19b8:	6027      	str	r7, [r4, #0]
		len = capacity = 0;
    19ba:	2300      	movs	r3, #0
}
    19bc:	4620      	mov	r0, r4
		len = capacity = 0;
    19be:	e9c4 3301 	strd	r3, r3, [r4, #4]
}
    19c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (buffer) buffer[0] = 0;
    19c4:	6807      	ldr	r7, [r0, #0]
	strcpy(buffer, cstr);
    19c6:	4631      	mov	r1, r6
	len = length;
    19c8:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    19ca:	4638      	mov	r0, r7
    19cc:	f004 fd66 	bl	649c <strcpy>
	return *this;
    19d0:	e7ec      	b.n	19ac <String::copy(char const*, unsigned int)+0x40>
    19d2:	bf00      	nop

000019d4 <String::operator=(String const&)>:
	if (this == &rhs) return *this;
    19d4:	4281      	cmp	r1, r0
    19d6:	d003      	beq.n	19e0 <String::operator=(String const&)+0xc>
	return copy(rhs.buffer, rhs.len);
    19d8:	688a      	ldr	r2, [r1, #8]
    19da:	6809      	ldr	r1, [r1, #0]
    19dc:	f7ff bfc6 	b.w	196c <String::copy(char const*, unsigned int)>
}
    19e0:	4770      	bx	lr
    19e2:	bf00      	nop

000019e4 <String::operator=(String&&)>:
	if (this != &rval) move(rval);
    19e4:	4288      	cmp	r0, r1
{
    19e6:	b538      	push	{r3, r4, r5, lr}
    19e8:	4605      	mov	r5, r0
	if (this != &rval) move(rval);
    19ea:	d00e      	beq.n	1a0a <String::operator=(String&&)+0x26>
	if (buffer) free(buffer);
    19ec:	6800      	ldr	r0, [r0, #0]
    19ee:	460c      	mov	r4, r1
    19f0:	b108      	cbz	r0, 19f6 <String::operator=(String&&)+0x12>
    19f2:	f002 fae7 	bl	3fc4 <free>
	len = rhs.len;
    19f6:	68a0      	ldr	r0, [r4, #8]
	rhs.buffer = NULL;
    19f8:	2300      	movs	r3, #0
	capacity = rhs.capacity;
    19fa:	e9d4 1200 	ldrd	r1, r2, [r4]
	len = rhs.len;
    19fe:	60a8      	str	r0, [r5, #8]
	capacity = rhs.capacity;
    1a00:	e9c5 1200 	strd	r1, r2, [r5]
	rhs.capacity = 0;
    1a04:	e9c4 3300 	strd	r3, r3, [r4]
	rhs.len = 0;
    1a08:	60a3      	str	r3, [r4, #8]
}
    1a0a:	4628      	mov	r0, r5
    1a0c:	bd38      	pop	{r3, r4, r5, pc}
    1a0e:	bf00      	nop

00001a10 <String::operator=(char const*)>:
{
    1a10:	b538      	push	{r3, r4, r5, lr}
    1a12:	4605      	mov	r5, r0
	if (cstr) {
    1a14:	460c      	mov	r4, r1
    1a16:	b149      	cbz	r1, 1a2c <String::operator=(char const*)+0x1c>
		copy(cstr, strlen(cstr));
    1a18:	4608      	mov	r0, r1
    1a1a:	f004 fdb1 	bl	6580 <strlen>
    1a1e:	4621      	mov	r1, r4
    1a20:	4602      	mov	r2, r0
    1a22:	4628      	mov	r0, r5
    1a24:	f7ff ffa2 	bl	196c <String::copy(char const*, unsigned int)>
}
    1a28:	4628      	mov	r0, r5
    1a2a:	bd38      	pop	{r3, r4, r5, pc}
    1a2c:	4628      	mov	r0, r5
		len = 0;
    1a2e:	60a9      	str	r1, [r5, #8]
}
    1a30:	bd38      	pop	{r3, r4, r5, pc}
    1a32:	bf00      	nop

00001a34 <String::append(char const*, unsigned int)>:
{
    1a34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1a38:	4604      	mov	r4, r0
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    1a3a:	6800      	ldr	r0, [r0, #0]
{
    1a3c:	460d      	mov	r5, r1
    1a3e:	4616      	mov	r6, r2
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    1a40:	4288      	cmp	r0, r1
	unsigned int newlen = len + length;
    1a42:	68a3      	ldr	r3, [r4, #8]
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    1a44:	d809      	bhi.n	1a5a <String::append(char const*, unsigned int)+0x26>
    1a46:	18c2      	adds	r2, r0, r3
    1a48:	4291      	cmp	r1, r2
    1a4a:	d206      	bcs.n	1a5a <String::append(char const*, unsigned int)+0x26>
		buffer_offset = (unsigned int)(cstr-buffer);
    1a4c:	1a0f      	subs	r7, r1, r0
		self = true;
    1a4e:	f04f 0901 	mov.w	r9, #1
	if (length == 0 || !reserve(newlen)) return *this;
    1a52:	b936      	cbnz	r6, 1a62 <String::append(char const*, unsigned int)+0x2e>
}
    1a54:	4620      	mov	r0, r4
    1a56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	bool self = false;
    1a5a:	f04f 0900 	mov.w	r9, #0
	if (length == 0 || !reserve(newlen)) return *this;
    1a5e:	2e00      	cmp	r6, #0
    1a60:	d0f8      	beq.n	1a54 <String::append(char const*, unsigned int)+0x20>
	unsigned int newlen = len + length;
    1a62:	eb03 0806 	add.w	r8, r3, r6
	if (capacity >= size) return 1;
    1a66:	6862      	ldr	r2, [r4, #4]
    1a68:	4590      	cmp	r8, r2
    1a6a:	d90c      	bls.n	1a86 <String::append(char const*, unsigned int)+0x52>
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    1a6c:	f108 0101 	add.w	r1, r8, #1
    1a70:	f002 fd6c 	bl	454c <realloc>
	if (newbuffer) {
    1a74:	2800      	cmp	r0, #0
    1a76:	d0ed      	beq.n	1a54 <String::append(char const*, unsigned int)+0x20>
		buffer = newbuffer;
    1a78:	68a3      	ldr	r3, [r4, #8]
		capacity = maxStrLen;
    1a7a:	e9c4 0800 	strd	r0, r8, [r4]
		if (len == 0) buffer[0] = 0;
    1a7e:	b913      	cbnz	r3, 1a86 <String::append(char const*, unsigned int)+0x52>
    1a80:	7003      	strb	r3, [r0, #0]
		memcpy(buffer + len, buffer+buffer_offset, length);
    1a82:	6820      	ldr	r0, [r4, #0]
    1a84:	68a3      	ldr	r3, [r4, #8]
	if ( self ) {
    1a86:	f1b9 0f00 	cmp.w	r9, #0
    1a8a:	d108      	bne.n	1a9e <String::append(char const*, unsigned int)+0x6a>
		strcpy(buffer + len, cstr);
    1a8c:	4629      	mov	r1, r5
    1a8e:	4418      	add	r0, r3
    1a90:	f004 fd04 	bl	649c <strcpy>
}
    1a94:	4620      	mov	r0, r4
	len = newlen;
    1a96:	f8c4 8008 	str.w	r8, [r4, #8]
}
    1a9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		memcpy(buffer + len, buffer+buffer_offset, length);
    1a9e:	4632      	mov	r2, r6
    1aa0:	19c1      	adds	r1, r0, r7
    1aa2:	4418      	add	r0, r3
    1aa4:	f000 fb6a 	bl	217c <memcpy>
		buffer[newlen] = 0;
    1aa8:	6823      	ldr	r3, [r4, #0]
    1aaa:	2200      	movs	r2, #0
    1aac:	f803 2008 	strb.w	r2, [r3, r8]
    1ab0:	e7f0      	b.n	1a94 <String::append(char const*, unsigned int)+0x60>
    1ab2:	bf00      	nop

00001ab4 <String::append(char)>:
{
    1ab4:	b510      	push	{r4, lr}
    1ab6:	b082      	sub	sp, #8
	buf[1] = 0;
    1ab8:	2300      	movs	r3, #0
{
    1aba:	4604      	mov	r4, r0
	append(buf, 1);
    1abc:	2201      	movs	r2, #1
	buf[0] = c;
    1abe:	f88d 1004 	strb.w	r1, [sp, #4]
	append(buf, 1);
    1ac2:	a901      	add	r1, sp, #4
	buf[1] = 0;
    1ac4:	f88d 3005 	strb.w	r3, [sp, #5]
	append(buf, 1);
    1ac8:	f7ff ffb4 	bl	1a34 <String::append(char const*, unsigned int)>
}
    1acc:	4620      	mov	r0, r4
    1ace:	b002      	add	sp, #8
    1ad0:	bd10      	pop	{r4, pc}
    1ad2:	bf00      	nop

00001ad4 <String::equals(char const*) const>:
	if (len == 0) return (cstr == NULL || *cstr == 0);
    1ad4:	6882      	ldr	r2, [r0, #8]
{
    1ad6:	b508      	push	{r3, lr}
    1ad8:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
    1ada:	b13a      	cbz	r2, 1aec <String::equals(char const*) const+0x18>
	if (cstr == NULL) return buffer[0] == 0;
    1adc:	b161      	cbz	r1, 1af8 <String::equals(char const*) const+0x24>
	return strcmp(buffer, cstr) == 0;
    1ade:	6800      	ldr	r0, [r0, #0]
    1ae0:	f004 fb72 	bl	61c8 <strcmp>
    1ae4:	fab0 f080 	clz	r0, r0
    1ae8:	0940      	lsrs	r0, r0, #5
}
    1aea:	bd08      	pop	{r3, pc}
	if (len == 0) return (cstr == NULL || *cstr == 0);
    1aec:	b131      	cbz	r1, 1afc <String::equals(char const*) const+0x28>
	if (cstr == NULL) return buffer[0] == 0;
    1aee:	7818      	ldrb	r0, [r3, #0]
    1af0:	fab0 f080 	clz	r0, r0
    1af4:	0940      	lsrs	r0, r0, #5
}
    1af6:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
    1af8:	6803      	ldr	r3, [r0, #0]
    1afa:	e7f8      	b.n	1aee <String::equals(char const*) const+0x1a>
    1afc:	2001      	movs	r0, #1
}
    1afe:	bd08      	pop	{r3, pc}

00001b00 <String::indexOf(char) const>:
	if (fromIndex >= len) return -1;
    1b00:	6883      	ldr	r3, [r0, #8]
    1b02:	b13b      	cbz	r3, 1b14 <String::indexOf(char) const+0x14>
{
    1b04:	b510      	push	{r4, lr}
	const char* temp = strchr(buffer + fromIndex, ch);
    1b06:	6804      	ldr	r4, [r0, #0]
    1b08:	4620      	mov	r0, r4
    1b0a:	f004 f9d7 	bl	5ebc <strchr>
	if (temp == NULL) return -1;
    1b0e:	b120      	cbz	r0, 1b1a <String::indexOf(char) const+0x1a>
	return temp - buffer;
    1b10:	1b00      	subs	r0, r0, r4
}
    1b12:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
    1b14:	f04f 30ff 	mov.w	r0, #4294967295
}
    1b18:	4770      	bx	lr
	if (fromIndex >= len) return -1;
    1b1a:	f04f 30ff 	mov.w	r0, #4294967295
}
    1b1e:	bd10      	pop	{r4, pc}

00001b20 <String::substring(unsigned int) const>:
{
    1b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return substring(left, len);
    1b24:	688f      	ldr	r7, [r1, #8]
{
    1b26:	460e      	mov	r6, r1
    1b28:	4605      	mov	r5, r0
	if (left > right) {
    1b2a:	4297      	cmp	r7, r2
    1b2c:	d202      	bcs.n	1b34 <String::substring(unsigned int) const+0x14>
    1b2e:	4613      	mov	r3, r2
    1b30:	463a      	mov	r2, r7
    1b32:	461f      	mov	r7, r3
	buffer = NULL;
    1b34:	2300      	movs	r3, #0
	len = 0;
    1b36:	60ab      	str	r3, [r5, #8]
	if (left > len) return out;
    1b38:	68b0      	ldr	r0, [r6, #8]
    1b3a:	4290      	cmp	r0, r2
	capacity = 0;
    1b3c:	e9c5 3300 	strd	r3, r3, [r5]
	if (left > len) return out;
    1b40:	d314      	bcc.n	1b6c <String::substring(unsigned int) const+0x4c>
	if (right > len) right = len;
    1b42:	4287      	cmp	r7, r0
	char temp = buffer[right];  // save the replaced character
    1b44:	6831      	ldr	r1, [r6, #0]
    1b46:	bf28      	it	cs
    1b48:	4607      	movcs	r7, r0
    1b4a:	f811 8007 	ldrb.w	r8, [r1, r7]
	buffer[right] = '\0';	
    1b4e:	55cb      	strb	r3, [r1, r7]
	out = buffer + left;  // pointer arithmetic
    1b50:	6833      	ldr	r3, [r6, #0]
	if (cstr) {
    1b52:	189c      	adds	r4, r3, r2
    1b54:	d00d      	beq.n	1b72 <String::substring(unsigned int) const+0x52>
		copy(cstr, strlen(cstr));
    1b56:	4620      	mov	r0, r4
    1b58:	f004 fd12 	bl	6580 <strlen>
    1b5c:	4621      	mov	r1, r4
    1b5e:	4602      	mov	r2, r0
    1b60:	4628      	mov	r0, r5
    1b62:	f7ff ff03 	bl	196c <String::copy(char const*, unsigned int)>
	buffer[right] = temp;  //restore character
    1b66:	6833      	ldr	r3, [r6, #0]
    1b68:	f803 8007 	strb.w	r8, [r3, r7]
}
    1b6c:	4628      	mov	r0, r5
    1b6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = 0;
    1b72:	60ac      	str	r4, [r5, #8]
    1b74:	e7f8      	b.n	1b68 <String::substring(unsigned int) const+0x48>
    1b76:	bf00      	nop

00001b78 <String::substring(unsigned int, unsigned int) const>:
	if (left > right) {
    1b78:	429a      	cmp	r2, r3
{
    1b7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1b7e:	4605      	mov	r5, r0
    1b80:	460e      	mov	r6, r1
	if (left > right) {
    1b82:	d902      	bls.n	1b8a <String::substring(unsigned int, unsigned int) const+0x12>
    1b84:	4611      	mov	r1, r2
    1b86:	461a      	mov	r2, r3
    1b88:	460b      	mov	r3, r1
	buffer = NULL;
    1b8a:	2100      	movs	r1, #0
	len = 0;
    1b8c:	60a9      	str	r1, [r5, #8]
	if (left > len) return out;
    1b8e:	68b7      	ldr	r7, [r6, #8]
    1b90:	4297      	cmp	r7, r2
	capacity = 0;
    1b92:	e9c5 1100 	strd	r1, r1, [r5]
	if (left > len) return out;
    1b96:	d314      	bcc.n	1bc2 <String::substring(unsigned int, unsigned int) const+0x4a>
	if (right > len) right = len;
    1b98:	429f      	cmp	r7, r3
    1b9a:	bf28      	it	cs
    1b9c:	461f      	movcs	r7, r3
	char temp = buffer[right];  // save the replaced character
    1b9e:	6833      	ldr	r3, [r6, #0]
    1ba0:	f813 8007 	ldrb.w	r8, [r3, r7]
	buffer[right] = '\0';	
    1ba4:	55d9      	strb	r1, [r3, r7]
	out = buffer + left;  // pointer arithmetic
    1ba6:	6833      	ldr	r3, [r6, #0]
	if (cstr) {
    1ba8:	189c      	adds	r4, r3, r2
    1baa:	d00d      	beq.n	1bc8 <String::substring(unsigned int, unsigned int) const+0x50>
		copy(cstr, strlen(cstr));
    1bac:	4620      	mov	r0, r4
    1bae:	f004 fce7 	bl	6580 <strlen>
    1bb2:	4621      	mov	r1, r4
    1bb4:	4602      	mov	r2, r0
    1bb6:	4628      	mov	r0, r5
    1bb8:	f7ff fed8 	bl	196c <String::copy(char const*, unsigned int)>
	buffer[right] = temp;  //restore character
    1bbc:	6833      	ldr	r3, [r6, #0]
    1bbe:	f803 8007 	strb.w	r8, [r3, r7]
}
    1bc2:	4628      	mov	r0, r5
    1bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = 0;
    1bc8:	60ac      	str	r4, [r5, #8]
    1bca:	e7f8      	b.n	1bbe <String::substring(unsigned int, unsigned int) const+0x46>

00001bcc <String::toUpperCase()>:
	}
	return *this;
}

String & String::toUpperCase(void)
{
    1bcc:	b538      	push	{r3, r4, r5, lr}
	if (!buffer) return *this;
    1bce:	6804      	ldr	r4, [r0, #0]
{
    1bd0:	4605      	mov	r5, r0
	if (!buffer) return *this;
    1bd2:	b144      	cbz	r4, 1be6 <String::toUpperCase()+0x1a>
	for (char *p = buffer; *p; p++) {
    1bd4:	7820      	ldrb	r0, [r4, #0]
    1bd6:	b130      	cbz	r0, 1be6 <String::toUpperCase()+0x1a>
		*p = toupper(*p);
    1bd8:	f003 fea2 	bl	5920 <toupper>
    1bdc:	7020      	strb	r0, [r4, #0]
	for (char *p = buffer; *p; p++) {
    1bde:	f814 0f01 	ldrb.w	r0, [r4, #1]!
    1be2:	2800      	cmp	r0, #0
    1be4:	d1f8      	bne.n	1bd8 <String::toUpperCase()+0xc>
	}
	return *this;
}
    1be6:	4628      	mov	r0, r5
    1be8:	bd38      	pop	{r3, r4, r5, pc}
    1bea:	bf00      	nop

00001bec <String::trim()>:

String & String::trim(void)
{
    1bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!buffer || len == 0) return *this;
    1bf0:	6807      	ldr	r7, [r0, #0]
{
    1bf2:	4606      	mov	r6, r0
	if (!buffer || len == 0) return *this;
    1bf4:	b1e7      	cbz	r7, 1c30 <String::trim()+0x44>
    1bf6:	6884      	ldr	r4, [r0, #8]
    1bf8:	b1d4      	cbz	r4, 1c30 <String::trim()+0x44>
    1bfa:	46b8      	mov	r8, r7
    1bfc:	4645      	mov	r5, r8
	char *begin = buffer;
	while (isspace(*begin)) begin++;
    1bfe:	f818 0b01 	ldrb.w	r0, [r8], #1
    1c02:	f003 fe85 	bl	5910 <isspace>
    1c06:	2800      	cmp	r0, #0
    1c08:	d1f8      	bne.n	1bfc <String::trim()+0x10>
	char *end = buffer + len - 1;
    1c0a:	3c01      	subs	r4, #1
    1c0c:	443c      	add	r4, r7
	while (isspace(*end) && end >= begin) end--;
    1c0e:	e002      	b.n	1c16 <String::trim()+0x2a>
    1c10:	42a5      	cmp	r5, r4
    1c12:	d805      	bhi.n	1c20 <String::trim()+0x34>
    1c14:	3c01      	subs	r4, #1
    1c16:	7820      	ldrb	r0, [r4, #0]
    1c18:	f003 fe7a 	bl	5910 <isspace>
    1c1c:	2800      	cmp	r0, #0
    1c1e:	d1f7      	bne.n	1c10 <String::trim()+0x24>
	len = end + 1 - begin;
    1c20:	1c62      	adds	r2, r4, #1
	if (begin > buffer) memcpy(buffer, begin, len);
    1c22:	42af      	cmp	r7, r5
	len = end + 1 - begin;
    1c24:	eba2 0205 	sub.w	r2, r2, r5
    1c28:	60b2      	str	r2, [r6, #8]
	if (begin > buffer) memcpy(buffer, begin, len);
    1c2a:	d304      	bcc.n	1c36 <String::trim()+0x4a>
	buffer[len] = 0;
    1c2c:	2300      	movs	r3, #0
    1c2e:	54bb      	strb	r3, [r7, r2]
	return *this;
}
    1c30:	4630      	mov	r0, r6
    1c32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (begin > buffer) memcpy(buffer, begin, len);
    1c36:	4638      	mov	r0, r7
    1c38:	4629      	mov	r1, r5
    1c3a:	f000 fa9f 	bl	217c <memcpy>
	buffer[len] = 0;
    1c3e:	6837      	ldr	r7, [r6, #0]
    1c40:	68b2      	ldr	r2, [r6, #8]
    1c42:	e7f3      	b.n	1c2c <String::trim()+0x40>

00001c44 <analogRead>:
	if (pin > sizeof(pin_to_channel)) return 0;
    1c44:	282a      	cmp	r0, #42	; 0x2a
    1c46:	d849      	bhi.n	1cdc <analogRead+0x98>
{
    1c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (calibrating) wait_for_cal();
    1c4a:	4f25      	ldr	r7, [pc, #148]	; (1ce0 <analogRead+0x9c>)
    1c4c:	4604      	mov	r4, r0
    1c4e:	783b      	ldrb	r3, [r7, #0]
    1c50:	b9e3      	cbnz	r3, 1c8c <analogRead+0x48>
	uint8_t ch = pin_to_channel[pin];
    1c52:	4b24      	ldr	r3, [pc, #144]	; (1ce4 <analogRead+0xa0>)
    1c54:	5d1b      	ldrb	r3, [r3, r4]
	if (ch == 255) return 0;
    1c56:	2bff      	cmp	r3, #255	; 0xff
    1c58:	d029      	beq.n	1cae <analogRead+0x6a>
	volatile uint32_t *pad = portControlRegister(pin);
    1c5a:	4a23      	ldr	r2, [pc, #140]	; (1ce8 <analogRead+0xa4>)
    1c5c:	eb02 1204 	add.w	r2, r2, r4, lsl #4
    1c60:	6891      	ldr	r1, [r2, #8]
	uint32_t padval = *pad;
    1c62:	680a      	ldr	r2, [r1, #0]
	if ((padval & (IOMUXC_PAD_PUE | IOMUXC_PAD_PKE)) == IOMUXC_PAD_PKE) {
    1c64:	f402 5040 	and.w	r0, r2, #12288	; 0x3000
    1c68:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    1c6c:	d030      	beq.n	1cd0 <analogRead+0x8c>
	if(!(ch & 0x80)) {
    1c6e:	061c      	lsls	r4, r3, #24
    1c70:	d41f      	bmi.n	1cb2 <analogRead+0x6e>
		ADC1_HC0 = ch;
    1c72:	4c1e      	ldr	r4, [pc, #120]	; (1cec <analogRead+0xa8>)
    1c74:	6023      	str	r3, [r4, #0]
		while (!(ADC1_HS & ADC_HS_COCO0)) {
    1c76:	6a23      	ldr	r3, [r4, #32]
    1c78:	07d8      	lsls	r0, r3, #31
    1c7a:	d404      	bmi.n	1c86 <analogRead+0x42>
			yield(); // TODO: what happens if yield-called code uses analogRead()
    1c7c:	f001 fd84 	bl	3788 <yield>
		while (!(ADC1_HS & ADC_HS_COCO0)) {
    1c80:	6a23      	ldr	r3, [r4, #32]
    1c82:	07d9      	lsls	r1, r3, #31
    1c84:	d5fa      	bpl.n	1c7c <analogRead+0x38>
		return ADC1_R0;
    1c86:	4b19      	ldr	r3, [pc, #100]	; (1cec <analogRead+0xa8>)
    1c88:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    1c8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	while ((ADC1_GC & ADC_GC_CAL) || (ADC2_GC & ADC_GC_CAL)) {
    1c8c:	4d17      	ldr	r5, [pc, #92]	; (1cec <analogRead+0xa8>)
    1c8e:	4e18      	ldr	r6, [pc, #96]	; (1cf0 <analogRead+0xac>)
    1c90:	e001      	b.n	1c96 <analogRead+0x52>
		yield();
    1c92:	f001 fd79 	bl	3788 <yield>
	while ((ADC1_GC & ADC_GC_CAL) || (ADC2_GC & ADC_GC_CAL)) {
    1c96:	6cab      	ldr	r3, [r5, #72]	; 0x48
    1c98:	061b      	lsls	r3, r3, #24
    1c9a:	d4fa      	bmi.n	1c92 <analogRead+0x4e>
    1c9c:	6cb3      	ldr	r3, [r6, #72]	; 0x48
    1c9e:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    1ca2:	d1f6      	bne.n	1c92 <analogRead+0x4e>
	calibrating = 0;
    1ca4:	703b      	strb	r3, [r7, #0]
	uint8_t ch = pin_to_channel[pin];
    1ca6:	4b0f      	ldr	r3, [pc, #60]	; (1ce4 <analogRead+0xa0>)
    1ca8:	5d1b      	ldrb	r3, [r3, r4]
	if (ch == 255) return 0;
    1caa:	2bff      	cmp	r3, #255	; 0xff
    1cac:	d1d5      	bne.n	1c5a <analogRead+0x16>
	if (pin > sizeof(pin_to_channel)) return 0;
    1cae:	2000      	movs	r0, #0
}
    1cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ADC2_HC0 = ch & 0x7f;
    1cb2:	4c0f      	ldr	r4, [pc, #60]	; (1cf0 <analogRead+0xac>)
    1cb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    1cb8:	6023      	str	r3, [r4, #0]
		while (!(ADC2_HS & ADC_HS_COCO0)) {
    1cba:	6a23      	ldr	r3, [r4, #32]
    1cbc:	07da      	lsls	r2, r3, #31
    1cbe:	d404      	bmi.n	1cca <analogRead+0x86>
			yield(); // TODO: what happens if yield-called code uses analogRead()
    1cc0:	f001 fd62 	bl	3788 <yield>
		while (!(ADC2_HS & ADC_HS_COCO0)) {
    1cc4:	6a23      	ldr	r3, [r4, #32]
    1cc6:	07db      	lsls	r3, r3, #31
    1cc8:	d5fa      	bpl.n	1cc0 <analogRead+0x7c>
		return ADC2_R0;
    1cca:	4b09      	ldr	r3, [pc, #36]	; (1cf0 <analogRead+0xac>)
    1ccc:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    1cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*pad = padval & ~IOMUXC_PAD_PKE;
    1cd0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
	if(!(ch & 0x80)) {
    1cd4:	061c      	lsls	r4, r3, #24
		*pad = padval & ~IOMUXC_PAD_PKE;
    1cd6:	600a      	str	r2, [r1, #0]
	if(!(ch & 0x80)) {
    1cd8:	d4eb      	bmi.n	1cb2 <analogRead+0x6e>
    1cda:	e7ca      	b.n	1c72 <analogRead+0x2e>
	if (pin > sizeof(pin_to_channel)) return 0;
    1cdc:	2000      	movs	r0, #0
}
    1cde:	4770      	bx	lr
    1ce0:	20008e9b 	.word	0x20008e9b
    1ce4:	2000790c 	.word	0x2000790c
    1ce8:	20007350 	.word	0x20007350
    1cec:	400c4000 	.word	0x400c4000
    1cf0:	400c8000 	.word	0x400c8000

00001cf4 <analogReadRes>:
   if (bits == 8) {
    1cf4:	2808      	cmp	r0, #8
{
    1cf6:	b430      	push	{r4, r5}
   if (bits == 8) {
    1cf8:	d022      	beq.n	1d40 <analogReadRes+0x4c>
    mode = ADC_CFG_MODE(2) | ADC_CFG_ADSTS(3) | ADC_CFG_ADLSMP;
    1cfa:	280a      	cmp	r0, #10
    1cfc:	bf0c      	ite	eq
    1cfe:	f44f 7105 	moveq.w	r1, #532	; 0x214
    1d02:	f44f 7146 	movne.w	r1, #792	; 0x318
  tmp32  = (ADC1_CFG & (0xFFFFFC00));
    1d06:	4c10      	ldr	r4, [pc, #64]	; (1d48 <analogReadRes+0x54>)
    1d08:	4d10      	ldr	r5, [pc, #64]	; (1d4c <analogReadRes+0x58>)
    1d0a:	6c63      	ldr	r3, [r4, #68]	; 0x44
  tmp32 |= (ADC1_CFG & (0x03));  // ADICLK
    1d0c:	6c62      	ldr	r2, [r4, #68]	; 0x44
  tmp32  = (ADC1_CFG & (0xFFFFFC00));
    1d0e:	402b      	ands	r3, r5
  tmp32  = (ADC2_CFG & (0xFFFFFC00));
    1d10:	480f      	ldr	r0, [pc, #60]	; (1d50 <analogReadRes+0x5c>)
  tmp32 |= (ADC1_CFG & (0x03));  // ADICLK
    1d12:	f002 0203 	and.w	r2, r2, #3
    1d16:	431a      	orrs	r2, r3
  tmp32 |= (ADC1_CFG & (0xE0));  // ADIV & ADLPC
    1d18:	6c63      	ldr	r3, [r4, #68]	; 0x44
    1d1a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    1d1e:	4313      	orrs	r3, r2
  tmp32 |= mode; 
    1d20:	430b      	orrs	r3, r1
  ADC1_CFG = tmp32;
    1d22:	6463      	str	r3, [r4, #68]	; 0x44
  tmp32  = (ADC2_CFG & (0xFFFFFC00));
    1d24:	6c43      	ldr	r3, [r0, #68]	; 0x44
  tmp32 |= (ADC2_CFG & (0x03));  // ADICLK
    1d26:	6c42      	ldr	r2, [r0, #68]	; 0x44
  tmp32  = (ADC2_CFG & (0xFFFFFC00));
    1d28:	402b      	ands	r3, r5
  tmp32 |= (ADC2_CFG & (0x03));  // ADICLK
    1d2a:	f002 0203 	and.w	r2, r2, #3
    1d2e:	431a      	orrs	r2, r3
  tmp32 |= (ADC2_CFG & (0xE0));  // ADIV & ADLPC
    1d30:	6c43      	ldr	r3, [r0, #68]	; 0x44
    1d32:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    1d36:	4313      	orrs	r3, r2
  tmp32 |= mode; 
    1d38:	4319      	orrs	r1, r3
}
    1d3a:	bc30      	pop	{r4, r5}
  ADC2_CFG = tmp32;
    1d3c:	6441      	str	r1, [r0, #68]	; 0x44
}
    1d3e:	4770      	bx	lr
    mode = ADC_CFG_MODE(0) | ADC_CFG_ADSTS(3);
    1d40:	f44f 7140 	mov.w	r1, #768	; 0x300
    1d44:	e7df      	b.n	1d06 <analogReadRes+0x12>
    1d46:	bf00      	nop
    1d48:	400c4000 	.word	0x400c4000
    1d4c:	fffffc00 	.word	0xfffffc00
    1d50:	400c8000 	.word	0x400c8000

00001d54 <analogReadAveraging>:
{
    1d54:	b410      	push	{r4}
  ADC1_GC &= ~0x20;
    1d56:	4c1f      	ldr	r4, [pc, #124]	; (1dd4 <analogReadAveraging+0x80>)
    if (num >= 32) {
    1d58:	281f      	cmp	r0, #31
  ADC2_GC &= ~0x20;
    1d5a:	491f      	ldr	r1, [pc, #124]	; (1dd8 <analogReadAveraging+0x84>)
  ADC1_GC &= ~0x20;
    1d5c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    1d5e:	f023 0320 	bic.w	r3, r3, #32
    1d62:	64a3      	str	r3, [r4, #72]	; 0x48
  mode = ADC1_CFG & ~0xC000;
    1d64:	6c62      	ldr	r2, [r4, #68]	; 0x44
  ADC2_GC &= ~0x20;
    1d66:	6c8b      	ldr	r3, [r1, #72]	; 0x48
  mode = ADC1_CFG & ~0xC000;
    1d68:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
  ADC2_GC &= ~0x20;
    1d6c:	f023 0320 	bic.w	r3, r3, #32
    1d70:	648b      	str	r3, [r1, #72]	; 0x48
  mode1 = ADC2_CFG & ~0xC000;
    1d72:	6c4b      	ldr	r3, [r1, #68]	; 0x44
    1d74:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
    if (num >= 32) {
    1d78:	d912      	bls.n	1da0 <analogReadAveraging+0x4c>
      mode |= ADC_CFG_AVGS(3);
    1d7a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
      mode1 |= ADC_CFG_AVGS(3);
    1d7e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
  ADC1_CFG = mode;
    1d82:	6462      	str	r2, [r4, #68]	; 0x44
  ADC2_CFG = mode1;
    1d84:	644b      	str	r3, [r1, #68]	; 0x44
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
    1d86:	4913      	ldr	r1, [pc, #76]	; (1dd4 <analogReadAveraging+0x80>)
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
    1d88:	4a13      	ldr	r2, [pc, #76]	; (1dd8 <analogReadAveraging+0x84>)
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
    1d8a:	6c8b      	ldr	r3, [r1, #72]	; 0x48
}
    1d8c:	f85d 4b04 	ldr.w	r4, [sp], #4
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
    1d90:	f043 0320 	orr.w	r3, r3, #32
    1d94:	648b      	str	r3, [r1, #72]	; 0x48
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
    1d96:	6c93      	ldr	r3, [r2, #72]	; 0x48
    1d98:	f043 0320 	orr.w	r3, r3, #32
    1d9c:	6493      	str	r3, [r2, #72]	; 0x48
}
    1d9e:	4770      	bx	lr
    } else if (num >= 16) {
    1da0:	280f      	cmp	r0, #15
    1da2:	d908      	bls.n	1db6 <analogReadAveraging+0x62>
      mode |= ADC_CFG_AVGS(2);
    1da4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
      mode1 |= ADC_CFG_AVGS(2);
    1da8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  ADC1_CFG = mode;
    1dac:	4809      	ldr	r0, [pc, #36]	; (1dd4 <analogReadAveraging+0x80>)
  ADC2_CFG = mode1;
    1dae:	490a      	ldr	r1, [pc, #40]	; (1dd8 <analogReadAveraging+0x84>)
  ADC1_CFG = mode;
    1db0:	6442      	str	r2, [r0, #68]	; 0x44
  ADC2_CFG = mode1;
    1db2:	644b      	str	r3, [r1, #68]	; 0x44
  if(num >= 4){
    1db4:	e7e7      	b.n	1d86 <analogReadAveraging+0x32>
    } else if (num >= 8) {
    1db6:	2807      	cmp	r0, #7
    1db8:	d904      	bls.n	1dc4 <analogReadAveraging+0x70>
      mode |= ADC_CFG_AVGS(1);
    1dba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
      mode1 |= ADC_CFG_AVGS(1);
    1dbe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1dc2:	e7f3      	b.n	1dac <analogReadAveraging+0x58>
  if(num >= 4){
    1dc4:	2803      	cmp	r0, #3
  ADC1_CFG = mode;
    1dc6:	6462      	str	r2, [r4, #68]	; 0x44
  ADC2_CFG = mode1;
    1dc8:	644b      	str	r3, [r1, #68]	; 0x44
  if(num >= 4){
    1dca:	d8dc      	bhi.n	1d86 <analogReadAveraging+0x32>
}
    1dcc:	f85d 4b04 	ldr.w	r4, [sp], #4
    1dd0:	4770      	bx	lr
    1dd2:	bf00      	nop
    1dd4:	400c4000 	.word	0x400c4000
    1dd8:	400c8000 	.word	0x400c8000

00001ddc <delay>:
	if (msec == 0) return;
    1ddc:	b900      	cbnz	r0, 1de0 <delay+0x4>
    1dde:	4770      	bx	lr
{
    1de0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    1de4:	2101      	movs	r1, #1
    1de6:	4681      	mov	r9, r0
    1de8:	4c21      	ldr	r4, [pc, #132]	; (1e70 <delay+0x94>)
    1dea:	4d22      	ldr	r5, [pc, #136]	; (1e74 <delay+0x98>)
    1dec:	4e22      	ldr	r6, [pc, #136]	; (1e78 <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    1dee:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    1df2:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    1df4:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    1df6:	e844 1300 	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    1dfa:	2b00      	cmp	r3, #0
    1dfc:	d1f7      	bne.n	1dee <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    1dfe:	491f      	ldr	r1, [pc, #124]	; (1e7c <delay+0xa0>)
    1e00:	684b      	ldr	r3, [r1, #4]
	uint32_t usec = 1000*smc + frac;
    1e02:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1e06:	f8df a078 	ldr.w	sl, [pc, #120]	; 1e80 <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
    1e0a:	1a1b      	subs	r3, r3, r0
    1e0c:	2701      	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
    1e0e:	fb0b f802 	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1e12:	f8da 2000 	ldr.w	r2, [sl]
    1e16:	fba3 3202 	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
    1e1a:	455a      	cmp	r2, fp
    1e1c:	bf94      	ite	ls
    1e1e:	4490      	addls	r8, r2
    1e20:	44d8      	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    1e22:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    1e26:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    1e28:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    1e2a:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    1e2e:	2b00      	cmp	r3, #0
    1e30:	d1f7      	bne.n	1e22 <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    1e32:	684b      	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1e34:	f8da c000 	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
    1e38:	1a1b      	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
    1e3a:	fb0b f202 	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1e3e:	fba3 3c0c 	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
    1e42:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
    1e46:	bf94      	ite	ls
    1e48:	4462      	addls	r2, ip
    1e4a:	f502 727a 	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
    1e4e:	eba2 0208 	sub.w	r2, r2, r8
    1e52:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
    1e56:	d306      	bcc.n	1e66 <delay+0x8a>
			if (--msec == 0) return;
    1e58:	f1b9 0901 	subs.w	r9, r9, #1
			start += 1000;
    1e5c:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
    1e60:	d1df      	bne.n	1e22 <delay+0x46>
}
    1e62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
    1e66:	f001 fc8f 	bl	3788 <yield>
		while ((micros() - start) >= 1000) {
    1e6a:	4904      	ldr	r1, [pc, #16]	; (1e7c <delay+0xa0>)
    1e6c:	e7d9      	b.n	1e22 <delay+0x46>
    1e6e:	bf00      	nop
    1e70:	20008e70 	.word	0x20008e70
    1e74:	20008e6c 	.word	0x20008e6c
    1e78:	20008e68 	.word	0x20008e68
    1e7c:	e0001000 	.word	0xe0001000
    1e80:	20008e64 	.word	0x20008e64

00001e84 <digitalWrite>:
	if (pin >= CORE_NUM_DIGITAL) return;
    1e84:	2836      	cmp	r0, #54	; 0x36
    1e86:	d816      	bhi.n	1eb6 <digitalWrite+0x32>
	p = digital_pin_to_info_PGM + pin;
    1e88:	0102      	lsls	r2, r0, #4
    1e8a:	4b10      	ldr	r3, [pc, #64]	; (1ecc <digitalWrite+0x48>)
    1e8c:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
    1e90:	589b      	ldr	r3, [r3, r2]
{
    1e92:	b410      	push	{r4}
	mask = p->mask;
    1e94:	68c2      	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
    1e96:	685c      	ldr	r4, [r3, #4]
	if (pinmode & mask) {
    1e98:	4214      	tst	r4, r2
    1e9a:	d005      	beq.n	1ea8 <digitalWrite+0x24>
		if (val) {
    1e9c:	b961      	cbnz	r1, 1eb8 <digitalWrite+0x34>
		}
	}
}
    1e9e:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x22) = mask; // clear register
    1ea2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
    1ea6:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    1ea8:	6883      	ldr	r3, [r0, #8]
		if (val) {
    1eaa:	b151      	cbz	r1, 1ec2 <digitalWrite+0x3e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    1eac:	4a08      	ldr	r2, [pc, #32]	; (1ed0 <digitalWrite+0x4c>)
}
    1eae:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    1eb2:	601a      	str	r2, [r3, #0]
}
    1eb4:	4770      	bx	lr
    1eb6:	4770      	bx	lr
    1eb8:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x21) = mask; // set register
    1ebc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    1ec0:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    1ec2:	4a04      	ldr	r2, [pc, #16]	; (1ed4 <digitalWrite+0x50>)
}
    1ec4:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    1ec8:	601a      	str	r2, [r3, #0]
}
    1eca:	4770      	bx	lr
    1ecc:	20007350 	.word	0x20007350
    1ed0:	0001f038 	.word	0x0001f038
    1ed4:	00013038 	.word	0x00013038

00001ed8 <digitalRead>:

uint8_t digitalRead(uint8_t pin)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return 0;
    1ed8:	2836      	cmp	r0, #54	; 0x36
    1eda:	d80b      	bhi.n	1ef4 <digitalRead+0x1c>
	p = digital_pin_to_info_PGM + pin;
    1edc:	4b06      	ldr	r3, [pc, #24]	; (1ef8 <digitalRead+0x20>)
    1ede:	0102      	lsls	r2, r0, #4
    1ee0:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
    1ee4:	589a      	ldr	r2, [r3, r2]
    1ee6:	68c3      	ldr	r3, [r0, #12]
    1ee8:	6892      	ldr	r2, [r2, #8]
    1eea:	421a      	tst	r2, r3
    1eec:	bf14      	ite	ne
    1eee:	2001      	movne	r0, #1
    1ef0:	2000      	moveq	r0, #0
    1ef2:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return 0;
    1ef4:	2000      	movs	r0, #0
}
    1ef6:	4770      	bx	lr
    1ef8:	20007350 	.word	0x20007350

00001efc <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    1efc:	2836      	cmp	r0, #54	; 0x36
    1efe:	d829      	bhi.n	1f54 <pinMode+0x58>
	p = digital_pin_to_info_PGM + pin;
    1f00:	4b16      	ldr	r3, [pc, #88]	; (1f5c <pinMode+0x60>)
    1f02:	0102      	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    1f04:	2901      	cmp	r1, #1
	p = digital_pin_to_info_PGM + pin;
    1f06:	eb03 1000 	add.w	r0, r3, r0, lsl #4
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    1f0a:	589a      	ldr	r2, [r3, r2]
{
    1f0c:	b410      	push	{r4}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    1f0e:	6853      	ldr	r3, [r2, #4]
    1f10:	68c4      	ldr	r4, [r0, #12]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    1f12:	d00e      	beq.n	1f32 <pinMode+0x36>
    1f14:	2904      	cmp	r1, #4
    1f16:	d00c      	beq.n	1f32 <pinMode+0x36>
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    1f18:	ea23 0304 	bic.w	r3, r3, r4
    1f1c:	6053      	str	r3, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    1f1e:	6883      	ldr	r3, [r0, #8]
		if (mode == INPUT) {
    1f20:	b1a9      	cbz	r1, 1f4e <pinMode+0x52>
		} else if (mode == INPUT_PULLUP) {
    1f22:	2902      	cmp	r1, #2
    1f24:	d017      	beq.n	1f56 <pinMode+0x5a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    1f26:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    1f28:	bf0c      	ite	eq
    1f2a:	4a0d      	ldreq	r2, [pc, #52]	; (1f60 <pinMode+0x64>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    1f2c:	4a0d      	ldrne	r2, [pc, #52]	; (1f64 <pinMode+0x68>)
    1f2e:	601a      	str	r2, [r3, #0]
    1f30:	e007      	b.n	1f42 <pinMode+0x46>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    1f32:	4323      	orrs	r3, r4
		if (mode == OUTPUT) {
    1f34:	2901      	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
    1f36:	6053      	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
    1f38:	6883      	ldr	r3, [r0, #8]
		if (mode == OUTPUT) {
    1f3a:	d008      	beq.n	1f4e <pinMode+0x52>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    1f3c:	f640 0238 	movw	r2, #2104	; 0x838
    1f40:	601a      	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    1f42:	6843      	ldr	r3, [r0, #4]
    1f44:	2215      	movs	r2, #21
}
    1f46:	f85d 4b04 	ldr.w	r4, [sp], #4
	*(p->mux) = 5 | 0x10;
    1f4a:	601a      	str	r2, [r3, #0]
}
    1f4c:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7);
    1f4e:	2238      	movs	r2, #56	; 0x38
    1f50:	601a      	str	r2, [r3, #0]
    1f52:	e7f6      	b.n	1f42 <pinMode+0x46>
    1f54:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    1f56:	4a04      	ldr	r2, [pc, #16]	; (1f68 <pinMode+0x6c>)
    1f58:	601a      	str	r2, [r3, #0]
    1f5a:	e7f2      	b.n	1f42 <pinMode+0x46>
    1f5c:	20007350 	.word	0x20007350
    1f60:	00013038 	.word	0x00013038
    1f64:	00010038 	.word	0x00010038
    1f68:	0001f038 	.word	0x0001f038

00001f6c <flash_wait>:
#define WRITE_SDR       FLEXSPI_LUT_OPCODE_WRITE_SDR
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

static void flash_wait()
{
    1f6c:	b430      	push	{r4, r5}
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    1f6e:	4a12      	ldr	r2, [pc, #72]	; (1fb8 <flash_wait+0x4c>)
	FLEXSPI_LUT61 = 0;
    1f70:	2000      	movs	r0, #0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    1f72:	4b12      	ldr	r3, [pc, #72]	; (1fbc <flash_wait+0x50>)
	uint8_t status;
	do {
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
    1f74:	2101      	movs	r1, #1
		FLEXSPI_IPCR0 = 0;
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
    1f76:	4d12      	ldr	r5, [pc, #72]	; (1fc0 <flash_wait+0x54>)
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {;}
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
		asm("":::"memory");
		status = *(uint8_t *)&FLEXSPI_RFDR0;
    1f78:	4c12      	ldr	r4, [pc, #72]	; (1fc4 <flash_wait+0x58>)
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    1f7a:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
	FLEXSPI_LUT61 = 0;
    1f7e:	f8c2 02f4 	str.w	r0, [r2, #756]	; 0x2f4
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
    1f82:	f8c2 10b8 	str.w	r1, [r2, #184]	; 0xb8
		FLEXSPI_IPCR0 = 0;
    1f86:	f8c2 00a0 	str.w	r0, [r2, #160]	; 0xa0
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
    1f8a:	f8c2 50a4 	str.w	r5, [r2, #164]	; 0xa4
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    1f8e:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {;}
    1f92:	6953      	ldr	r3, [r2, #20]
    1f94:	07db      	lsls	r3, r3, #31
    1f96:	d5fc      	bpl.n	1f92 <flash_wait+0x26>
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    1f98:	6151      	str	r1, [r2, #20]
	} while (status & 1);
    1f9a:	7823      	ldrb	r3, [r4, #0]
    1f9c:	07db      	lsls	r3, r3, #31
    1f9e:	d4f0      	bmi.n	1f82 <flash_wait+0x16>
	FLEXSPI_MCR0 |= FLEXSPI_MCR0_SWRESET; // purge stale data from FlexSPI's AHB FIFO
    1fa0:	6813      	ldr	r3, [r2, #0]
	while (FLEXSPI_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
    1fa2:	4905      	ldr	r1, [pc, #20]	; (1fb8 <flash_wait+0x4c>)
	FLEXSPI_MCR0 |= FLEXSPI_MCR0_SWRESET; // purge stale data from FlexSPI's AHB FIFO
    1fa4:	f043 0301 	orr.w	r3, r3, #1
    1fa8:	6013      	str	r3, [r2, #0]
	while (FLEXSPI_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
    1faa:	680b      	ldr	r3, [r1, #0]
    1fac:	07db      	lsls	r3, r3, #31
    1fae:	d4fc      	bmi.n	1faa <flash_wait+0x3e>
	__enable_irq();
    1fb0:	b662      	cpsie	i
}
    1fb2:	bc30      	pop	{r4, r5}
    1fb4:	4770      	bx	lr
    1fb6:	bf00      	nop
    1fb8:	402a8000 	.word	0x402a8000
    1fbc:	24010405 	.word	0x24010405
    1fc0:	000f0001 	.word	0x000f0001
    1fc4:	402a8100 	.word	0x402a8100

00001fc8 <eepromemu_flash_write>:

// write bytes into flash memory (which is already erased to 0xFF)
void eepromemu_flash_write(void *addr, const void *data, uint32_t len)
{
    1fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1fca:	460f      	mov	r7, r1
    1fcc:	4616      	mov	r6, r2
	__disable_irq();
    1fce:	b672      	cpsid	i
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    1fd0:	4b34      	ldr	r3, [pc, #208]	; (20a4 <eepromemu_flash_write+0xdc>)
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	FLEXSPI_IPCR0 = 0;
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    1fd2:	f240 4106 	movw	r1, #1030	; 0x406
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    1fd6:	4a34      	ldr	r2, [pc, #208]	; (20a8 <eepromemu_flash_write+0xe0>)
    1fd8:	619a      	str	r2, [r3, #24]
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    1fda:	2202      	movs	r2, #2
    1fdc:	61da      	str	r2, [r3, #28]
	FLEXSPI_IPCR0 = 0;
    1fde:	2200      	movs	r2, #0
    1fe0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    1fe4:	f8c3 12f0 	str.w	r1, [r3, #752]	; 0x2f0
	FLEXSPI_LUT61 = 0;
    1fe8:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
	FLEXSPI_LUT62 = 0;
    1fec:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
	FLEXSPI_LUT63 = 0;
    1ff0:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    1ff4:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    1ff8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    1ffc:	2201      	movs	r2, #1
    1ffe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    2002:	f020 031f 	bic.w	r3, r0, #31
	uint32_t end_addr = (uint32_t)addr + size;
    2006:	1982      	adds	r2, r0, r6
	asm volatile("": : :"memory");
	asm("dsb");
    2008:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    200c:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    2010:	f8c4 3f5c 	str.w	r3, [r4, #3932]	; 0xf5c
		location += 32;
    2014:	3320      	adds	r3, #32
	} while (location < end_addr);
    2016:	429a      	cmp	r2, r3
    2018:	d8fa      	bhi.n	2010 <eepromemu_flash_write+0x48>
	asm("dsb");
    201a:	f3bf 8f4f 	dsb	sy
	asm("isb");
    201e:	f3bf 8f6f 	isb	sy
	arm_dcache_delete(addr, len); // purge old data from ARM's cache
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    2022:	4d20      	ldr	r5, [pc, #128]	; (20a4 <eepromemu_flash_write+0xdc>)
    2024:	696b      	ldr	r3, [r5, #20]
    2026:	07da      	lsls	r2, r3, #31
    2028:	d5fc      	bpl.n	2024 <eepromemu_flash_write+0x5c>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    202a:	2301      	movs	r3, #1
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
    202c:	491f      	ldr	r1, [pc, #124]	; (20ac <eepromemu_flash_write+0xe4>)
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFFFFF;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    202e:	b2b2      	uxth	r2, r6
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFFFFF;
    2030:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    2034:	616b      	str	r3, [r5, #20]
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    2036:	f442 2270 	orr.w	r2, r2, #983040	; 0xf0000
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
    203a:	f8c5 12f0 	str.w	r1, [r5, #752]	; 0x2f0
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
    203e:	f242 2101 	movw	r1, #8705	; 0x2201
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	const uint8_t *src = (const uint8_t *)data;
	uint32_t n;
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    2042:	4c18      	ldr	r4, [pc, #96]	; (20a4 <eepromemu_flash_write+0xdc>)
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
    2044:	f8c5 12f4 	str.w	r1, [r5, #756]	; 0x2f4
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
    2048:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFFFFF;
    204c:	f8c5 00a0 	str.w	r0, [r5, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    2050:	f8c5 20a4 	str.w	r2, [r5, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    2054:	f8c5 30b0 	str.w	r3, [r5, #176]	; 0xb0
		if (n & FLEXSPI_INTR_IPTXWE) {
			uint32_t wrlen = len;
			if (wrlen > 8) wrlen = 8;
			if (wrlen > 0) {
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    2058:	4d15      	ldr	r5, [pc, #84]	; (20b0 <eepromemu_flash_write+0xe8>)
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    205a:	e001      	b.n	2060 <eepromemu_flash_write+0x98>
		if (n & FLEXSPI_INTR_IPTXWE) {
    205c:	065b      	lsls	r3, r3, #25
    205e:	d409      	bmi.n	2074 <eepromemu_flash_write+0xac>
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    2060:	6963      	ldr	r3, [r4, #20]
    2062:	f013 0001 	ands.w	r0, r3, #1
    2066:	d0f9      	beq.n	205c <eepromemu_flash_write+0x94>
				len -= wrlen;
			}
			FLEXSPI_INTR = FLEXSPI_INTR_IPTXWE;
		}
	}
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPTXWE;
    2068:	2341      	movs	r3, #65	; 0x41
    206a:	6163      	str	r3, [r4, #20]
	flash_wait();
}
    206c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	flash_wait();
    2070:	f7ff bf7c 	b.w	1f6c <flash_wait>
			if (wrlen > 8) wrlen = 8;
    2074:	2e08      	cmp	r6, #8
    2076:	d80a      	bhi.n	208e <eepromemu_flash_write+0xc6>
			if (wrlen > 0) {
    2078:	b136      	cbz	r6, 2088 <eepromemu_flash_write+0xc0>
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    207a:	4632      	mov	r2, r6
    207c:	4639      	mov	r1, r7
				src += wrlen;
    207e:	4437      	add	r7, r6
				len -= wrlen;
    2080:	4606      	mov	r6, r0
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    2082:	4628      	mov	r0, r5
    2084:	f000 f87a 	bl	217c <memcpy>
			FLEXSPI_INTR = FLEXSPI_INTR_IPTXWE;
    2088:	2340      	movs	r3, #64	; 0x40
    208a:	6163      	str	r3, [r4, #20]
    208c:	e7e8      	b.n	2060 <eepromemu_flash_write+0x98>
    208e:	f1a6 0008 	sub.w	r0, r6, #8
			if (wrlen > 8) wrlen = 8;
    2092:	2608      	movs	r6, #8
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    2094:	4639      	mov	r1, r7
    2096:	4632      	mov	r2, r6
				src += wrlen;
    2098:	4437      	add	r7, r6
				len -= wrlen;
    209a:	4606      	mov	r6, r0
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    209c:	4628      	mov	r0, r5
    209e:	f000 f86d 	bl	217c <memcpy>
				len -= wrlen;
    20a2:	e7f1      	b.n	2088 <eepromemu_flash_write+0xc0>
    20a4:	402a8000 	.word	0x402a8000
    20a8:	5af05af0 	.word	0x5af05af0
    20ac:	08180432 	.word	0x08180432
    20b0:	402a8180 	.word	0x402a8180

000020b4 <eepromemu_flash_erase_sector>:

// erase a 4K sector
void eepromemu_flash_erase_sector(void *addr)
{
    20b4:	b410      	push	{r4}
	__disable_irq();
    20b6:	b672      	cpsid	i
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    20b8:	4b28      	ldr	r3, [pc, #160]	; (215c <eepromemu_flash_erase_sector+0xa8>)
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    20ba:	2102      	movs	r1, #2
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    20bc:	4c28      	ldr	r4, [pc, #160]	; (2160 <eepromemu_flash_erase_sector+0xac>)
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
	FLEXSPI_LUT61 = 0;
    20be:	2200      	movs	r2, #0
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    20c0:	619c      	str	r4, [r3, #24]
	FLEXSPI_LUT62 = 0;
	FLEXSPI_LUT63 = 0;
	FLEXSPI_IPCR0 = 0;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    20c2:	f44f 2470 	mov.w	r4, #983040	; 0xf0000
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    20c6:	61d9      	str	r1, [r3, #28]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    20c8:	f240 4106 	movw	r1, #1030	; 0x406
    20cc:	f8c3 12f0 	str.w	r1, [r3, #752]	; 0x2f0
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    20d0:	2101      	movs	r1, #1
	FLEXSPI_LUT61 = 0;
    20d2:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
	FLEXSPI_LUT62 = 0;
    20d6:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
	FLEXSPI_LUT63 = 0;
    20da:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
	FLEXSPI_IPCR0 = 0;
    20de:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arm_dcache_delete((void *)((uint32_t)addr & 0xFFFFF000), 4096); // purge data from cache
    20e2:	f5a2 5280 	sub.w	r2, r2, #4096	; 0x1000
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    20e6:	f8c3 40a4 	str.w	r4, [r3, #164]	; 0xa4
	arm_dcache_delete((void *)((uint32_t)addr & 0xFFFFF000), 4096); // purge data from cache
    20ea:	4002      	ands	r2, r0
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    20ec:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
	asm("dsb");
    20f0:	f3bf 8f4f 	dsb	sy
	uint32_t end_addr = (uint32_t)addr + size;
    20f4:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
    20f8:	f102 0320 	add.w	r3, r2, #32
		SCB_CACHE_DCIMVAC = location;
    20fc:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    2100:	4299      	cmp	r1, r3
    2102:	bf34      	ite	cc
    2104:	2101      	movcc	r1, #1
    2106:	2180      	movcs	r1, #128	; 0x80
    2108:	eb02 1141 	add.w	r1, r2, r1, lsl #5
	} while (location < end_addr);
    210c:	428b      	cmp	r3, r1
		SCB_CACHE_DCIMVAC = location;
    210e:	f8cc 2f5c 	str.w	r2, [ip, #3932]	; 0xf5c
		location += 32;
    2112:	461a      	mov	r2, r3
	} while (location < end_addr);
    2114:	f103 0320 	add.w	r3, r3, #32
    2118:	d1f8      	bne.n	210c <eepromemu_flash_erase_sector+0x58>
	asm("dsb");
    211a:	f3bf 8f4f 	dsb	sy
	asm("isb");
    211e:	f3bf 8f6f 	isb	sy
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    2122:	4a0e      	ldr	r2, [pc, #56]	; (215c <eepromemu_flash_erase_sector+0xa8>)
    2124:	6953      	ldr	r3, [r2, #20]
    2126:	07d9      	lsls	r1, r3, #31
    2128:	d5fc      	bpl.n	2124 <eepromemu_flash_erase_sector+0x70>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    212a:	2401      	movs	r4, #1
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
    212c:	490d      	ldr	r1, [pc, #52]	; (2164 <eepromemu_flash_erase_sector+0xb0>)
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFF000;
    212e:	4b0e      	ldr	r3, [pc, #56]	; (2168 <eepromemu_flash_erase_sector+0xb4>)
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    2130:	6154      	str	r4, [r2, #20]
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFF000;
    2132:	4003      	ands	r3, r0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
    2134:	f8c2 12f0 	str.w	r1, [r2, #752]	; 0x2f0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    2138:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    213c:	4907      	ldr	r1, [pc, #28]	; (215c <eepromemu_flash_erase_sector+0xa8>)
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFF000;
    213e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    2142:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    2146:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    214a:	694b      	ldr	r3, [r1, #20]
    214c:	07db      	lsls	r3, r3, #31
    214e:	d5fc      	bpl.n	214a <eepromemu_flash_erase_sector+0x96>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    2150:	2301      	movs	r3, #1
	flash_wait();
}
    2152:	f85d 4b04 	ldr.w	r4, [sp], #4
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    2156:	614b      	str	r3, [r1, #20]
	flash_wait();
    2158:	f7ff bf08 	b.w	1f6c <flash_wait>
    215c:	402a8000 	.word	0x402a8000
    2160:	5af05af0 	.word	0x5af05af0
    2164:	08180420 	.word	0x08180420
    2168:	00fff000 	.word	0x00fff000

0000216c <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    216c:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    216e:	f7fe fc95 	bl	a9c <setup>
	while (1) {
		loop();
    2172:	f7fe f959 	bl	428 <loop>
		yield();
    2176:	f001 fb07 	bl	3788 <yield>
	while (1) {
    217a:	e7fa      	b.n	2172 <main+0x6>

0000217c <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    217c:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    217e:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    2182:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    2186:	d16d      	bne.n	2264 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    2188:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    218a:	d341      	bcc.n	2210 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    218c:	f851 3b04 	ldr.w	r3, [r1], #4
    2190:	f840 3b04 	str.w	r3, [r0], #4
    2194:	f851 3b04 	ldr.w	r3, [r1], #4
    2198:	f840 3b04 	str.w	r3, [r0], #4
    219c:	f851 3b04 	ldr.w	r3, [r1], #4
    21a0:	f840 3b04 	str.w	r3, [r0], #4
    21a4:	f851 3b04 	ldr.w	r3, [r1], #4
    21a8:	f840 3b04 	str.w	r3, [r0], #4
    21ac:	f851 3b04 	ldr.w	r3, [r1], #4
    21b0:	f840 3b04 	str.w	r3, [r0], #4
    21b4:	f851 3b04 	ldr.w	r3, [r1], #4
    21b8:	f840 3b04 	str.w	r3, [r0], #4
    21bc:	f851 3b04 	ldr.w	r3, [r1], #4
    21c0:	f840 3b04 	str.w	r3, [r0], #4
    21c4:	f851 3b04 	ldr.w	r3, [r1], #4
    21c8:	f840 3b04 	str.w	r3, [r0], #4
    21cc:	f851 3b04 	ldr.w	r3, [r1], #4
    21d0:	f840 3b04 	str.w	r3, [r0], #4
    21d4:	f851 3b04 	ldr.w	r3, [r1], #4
    21d8:	f840 3b04 	str.w	r3, [r0], #4
    21dc:	f851 3b04 	ldr.w	r3, [r1], #4
    21e0:	f840 3b04 	str.w	r3, [r0], #4
    21e4:	f851 3b04 	ldr.w	r3, [r1], #4
    21e8:	f840 3b04 	str.w	r3, [r0], #4
    21ec:	f851 3b04 	ldr.w	r3, [r1], #4
    21f0:	f840 3b04 	str.w	r3, [r0], #4
    21f4:	f851 3b04 	ldr.w	r3, [r1], #4
    21f8:	f840 3b04 	str.w	r3, [r0], #4
    21fc:	f851 3b04 	ldr.w	r3, [r1], #4
    2200:	f840 3b04 	str.w	r3, [r0], #4
    2204:	f851 3b04 	ldr.w	r3, [r1], #4
    2208:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    220c:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    220e:	d2bd      	bcs.n	218c <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    2210:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    2212:	d311      	bcc.n	2238 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    2214:	f851 3b04 	ldr.w	r3, [r1], #4
    2218:	f840 3b04 	str.w	r3, [r0], #4
    221c:	f851 3b04 	ldr.w	r3, [r1], #4
    2220:	f840 3b04 	str.w	r3, [r0], #4
    2224:	f851 3b04 	ldr.w	r3, [r1], #4
    2228:	f840 3b04 	str.w	r3, [r0], #4
    222c:	f851 3b04 	ldr.w	r3, [r1], #4
    2230:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    2234:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    2236:	d2ed      	bcs.n	2214 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    2238:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    223a:	d305      	bcc.n	2248 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    223c:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    2240:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    2244:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    2246:	d2f9      	bcs.n	223c <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    2248:	3204      	adds	r2, #4
	beq	.Ldone
    224a:	d008      	beq.n	225e <memcpy+0xe2>

	lsls	r2, r2, #31
    224c:	07d2      	lsls	r2, r2, #31
	itt ne
    224e:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    2250:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    2254:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    2258:	d301      	bcc.n	225e <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    225a:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    225c:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    225e:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    2260:	4770      	bx	lr
    2262:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    2264:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    2266:	d313      	bcc.n	2290 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    2268:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    226a:	d08d      	beq.n	2188 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    226c:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    2270:	d08a      	beq.n	2188 <memcpy+0xc>

	rsb	r3, #4
    2272:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    2276:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    2278:	07db      	lsls	r3, r3, #31
	itt ne
    227a:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    227c:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    2280:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    2284:	d380      	bcc.n	2188 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    2286:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    228a:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    228e:	e77b      	b.n	2188 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    2290:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    2292:	d3d9      	bcc.n	2248 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    2294:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    2296:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    229a:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    229e:	d2f9      	bcs.n	2294 <memcpy+0x118>

	ldrb	r3, [r1]
    22a0:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    22a2:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    22a4:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    22a6:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    22a8:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    22aa:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    22ac:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    22ae:	4770      	bx	lr

000022b0 <ultoa>:
	int i=0, j;
    22b0:	f101 3cff 	add.w	ip, r1, #4294967295
{
    22b4:	b570      	push	{r4, r5, r6, lr}
		digit = val % radix;
    22b6:	4666      	mov	r6, ip
	int i=0, j;
    22b8:	2400      	movs	r4, #0
    22ba:	e000      	b.n	22be <ultoa+0xe>
		i++;
    22bc:	3401      	adds	r4, #1
		digit = val % radix;
    22be:	fbb0 f5f2 	udiv	r5, r0, r2
    22c2:	fb02 0315 	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    22c6:	2b09      	cmp	r3, #9
    22c8:	f103 0e37 	add.w	lr, r3, #55	; 0x37
    22cc:	f103 0330 	add.w	r3, r3, #48	; 0x30
    22d0:	fa5f fe8e 	uxtb.w	lr, lr
    22d4:	bf98      	it	ls
    22d6:	fa5f fe83 	uxtbls.w	lr, r3
		if (val == 0) break;
    22da:	4290      	cmp	r0, r2
		val /= radix;
    22dc:	4628      	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    22de:	f806 ef01 	strb.w	lr, [r6, #1]!
		if (val == 0) break;
    22e2:	d2eb      	bcs.n	22bc <ultoa+0xc>
	buf[i + 1] = 0;
    22e4:	1c63      	adds	r3, r4, #1
    22e6:	2200      	movs	r2, #0
    22e8:	18c8      	adds	r0, r1, r3
    22ea:	54ca      	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
    22ec:	b17c      	cbz	r4, 230e <ultoa+0x5e>
		t = buf[j];
    22ee:	4662      	mov	r2, ip
    22f0:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    22f4:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
    22f8:	eba1 030c 	sub.w	r3, r1, ip
    22fc:	3202      	adds	r2, #2
		buf[j] = buf[i];
    22fe:	f88c 6000 	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
    2302:	3b01      	subs	r3, #1
    2304:	1a52      	subs	r2, r2, r1
		buf[i] = t;
    2306:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    2308:	4423      	add	r3, r4
    230a:	429a      	cmp	r2, r3
    230c:	dbef      	blt.n	22ee <ultoa+0x3e>
}
    230e:	4608      	mov	r0, r1
    2310:	bd70      	pop	{r4, r5, r6, pc}
    2312:	bf00      	nop

00002314 <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    2314:	2300      	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
    2316:	220f      	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    2318:	f248 2cb8 	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
    231c:	4619      	mov	r1, r3
{
    231e:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    2320:	f44f 4470 	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    2324:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    2328:	f8a0 418c 	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    232c:	f44f 4460 	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
    2330:	f8a0 218e 	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
    2334:	460a      	mov	r2, r1
	p->FFILT0 = 0;
    2336:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    233a:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    233e:	b29b      	uxth	r3, r3
    2340:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    2344:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    2348:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
    234c:	3101      	adds	r1, #1
    234e:	eb00 1343 	add.w	r3, r0, r3, lsl #5
    2352:	2904      	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    2354:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    2356:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    235a:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    235c:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    235e:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    2360:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    2362:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
    2366:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    2368:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    236a:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    236c:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
    236e:	d1eb      	bne.n	2348 <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2370:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    2374:	b29b      	uxth	r3, r3
    2376:	f043 030f 	orr.w	r3, r3, #15
    237a:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    237e:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    2382:	b29b      	uxth	r3, r3
    2384:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    2388:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
    238c:	bd10      	pop	{r4, pc}
    238e:	bf00      	nop

00002390 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    2390:	4b37      	ldr	r3, [pc, #220]	; (2470 <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    2392:	4a38      	ldr	r2, [pc, #224]	; (2474 <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    2394:	6f99      	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    2396:	4838      	ldr	r0, [pc, #224]	; (2478 <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    2398:	f441 017f 	orr.w	r1, r1, #16711680	; 0xff0000
{
    239c:	b570      	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    239e:	6799      	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    23a0:	f241 0601 	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    23a4:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    23a8:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    23ac:	f243 0426 	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    23b0:	430a      	orrs	r2, r1
    23b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    23b6:	f7ff ffad 	bl	2314 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    23ba:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    23be:	f7ff ffa9 	bl	2314 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    23c2:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    23c6:	f7ff ffa5 	bl	2314 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    23ca:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    23ce:	f7ff ffa1 	bl	2314 <flexpwm_init>
	for (i=0; i < 4; i++) {
    23d2:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    23d4:	f5a0 1003 	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    23d8:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
    23dc:	4611      	mov	r1, r2
    23de:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    23e2:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    23e6:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    23e8:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    23ea:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    23ec:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    23ee:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    23f2:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    23f4:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    23f6:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    23fa:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    23fc:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    23fe:	d1ee      	bne.n	23de <pwm_init+0x4e>
    2400:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    2402:	481e      	ldr	r0, [pc, #120]	; (247c <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    2404:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    2408:	f241 0601 	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    240c:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    240e:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    2412:	f243 0426 	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    2416:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    241a:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    241e:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    2420:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    2422:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    2424:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    2426:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    242a:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    242c:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    242e:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    2432:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    2434:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    2436:	d1ee      	bne.n	2416 <pwm_init+0x86>
    2438:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    243a:	4811      	ldr	r0, [pc, #68]	; (2480 <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    243c:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    243e:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    2442:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    2444:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    2448:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    244c:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    2450:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    2454:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    2456:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    2458:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    245a:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    245c:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    245e:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    2460:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    2462:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    2466:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    2468:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
    246c:	d1ee      	bne.n	244c <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    246e:	bd70      	pop	{r4, r5, r6, pc}
    2470:	400fc000 	.word	0x400fc000
    2474:	fc030000 	.word	0xfc030000
    2478:	403dc000 	.word	0x403dc000
    247c:	401e0000 	.word	0x401e0000
    2480:	401e4000 	.word	0x401e4000

00002484 <unused_interrupt_vector>:
	__disable_irq();
    2484:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    2486:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
    248a:	4c52      	ldr	r4, [pc, #328]	; (25d4 <unused_interrupt_vector+0x150>)
    248c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("tst lr, #4\nite eq\nmrseq %0, msp\nmrsne %0, psp\n" : "=r" (stack) :: "memory");
    2490:	f01e 0f04 	tst.w	lr, #4
    2494:	bf0c      	ite	eq
    2496:	f3ef 8208 	mrseq	r2, MSP
    249a:	f3ef 8209 	mrsne	r2, PSP
	info->cfsr = SCB_CFSR;
    249e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
    24a2:	4e4d      	ldr	r6, [pc, #308]	; (25d8 <unused_interrupt_vector+0x154>)
	while (p < end) {
    24a4:	4d4d      	ldr	r5, [pc, #308]	; (25dc <unused_interrupt_vector+0x158>)
	info->cfsr = SCB_CFSR;
    24a6:	f8d3 0d28 	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
    24aa:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
    24ae:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
    24b2:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
    24b6:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
    24ba:	e9c4 1324 	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
    24be:	6993      	ldr	r3, [r2, #24]
    24c0:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    24c4:	69d3      	ldr	r3, [r2, #28]
    24c6:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    24ca:	f000 f8d1 	bl	2670 <tempmonGetTemp>
    24ce:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    24d2:	f001 fb71 	bl	3bb8 <rtc_get>
	info->len = sizeof(*info) / 4;
    24d6:	210b      	movs	r1, #11
	crc = 0xFFFFFFFF;
    24d8:	f04f 32ff 	mov.w	r2, #4294967295
	info->time = rtc_get();
    24dc:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    24e0:	460b      	mov	r3, r1
    24e2:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    24e6:	493e      	ldr	r1, [pc, #248]	; (25e0 <unused_interrupt_vector+0x15c>)
		crc ^= *p++;
    24e8:	1d30      	adds	r0, r6, #4
    24ea:	405a      	eors	r2, r3
    24ec:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    24ee:	f002 0301 	and.w	r3, r2, #1
    24f2:	3c01      	subs	r4, #1
    24f4:	fb01 f303 	mul.w	r3, r1, r3
    24f8:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
    24fc:	d1f7      	bne.n	24ee <unused_interrupt_vector+0x6a>
	while (p < end) {
    24fe:	42a8      	cmp	r0, r5
    2500:	d002      	beq.n	2508 <unused_interrupt_vector+0x84>
		crc ^= *p++;
    2502:	6873      	ldr	r3, [r6, #4]
    2504:	4606      	mov	r6, r0
    2506:	e7ef      	b.n	24e8 <unused_interrupt_vector+0x64>
	info->crc = crc;
    2508:	4b32      	ldr	r3, [pc, #200]	; (25d4 <unused_interrupt_vector+0x150>)
    250a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    250e:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    2512:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    2516:	4930      	ldr	r1, [pc, #192]	; (25d8 <unused_interrupt_vector+0x154>)
    2518:	4a32      	ldr	r2, [pc, #200]	; (25e4 <unused_interrupt_vector+0x160>)
    251a:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
    251e:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
    2522:	f3bf 8f4f 	dsb	sy
	asm("isb");
    2526:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    252a:	4a2f      	ldr	r2, [pc, #188]	; (25e8 <unused_interrupt_vector+0x164>)
	PIT_MCR = PIT_MCR_MDIS;
    252c:	2502      	movs	r5, #2
    252e:	482f      	ldr	r0, [pc, #188]	; (25ec <unused_interrupt_vector+0x168>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    2530:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    2532:	492f      	ldr	r1, [pc, #188]	; (25f0 <unused_interrupt_vector+0x16c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    2534:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    2538:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    253a:	6005      	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    253c:	69d3      	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    253e:	482d      	ldr	r0, [pc, #180]	; (25f4 <unused_interrupt_vector+0x170>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    2540:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    2544:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2548:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    254a:	680b      	ldr	r3, [r1, #0]
    254c:	4283      	cmp	r3, r0
    254e:	d83d      	bhi.n	25cc <unused_interrupt_vector+0x148>
	PIT_MCR = 0;
    2550:	4d26      	ldr	r5, [pc, #152]	; (25ec <unused_interrupt_vector+0x168>)
    2552:	2100      	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
    2554:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    2558:	f04f 32ff 	mov.w	r2, #4294967295
	PIT_MCR = 0;
    255c:	6029      	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    255e:	2601      	movs	r6, #1
	PIT_TCTRL0 = 0;
    2560:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    2564:	4924      	ldr	r1, [pc, #144]	; (25f8 <unused_interrupt_vector+0x174>)
    2566:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    256a:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
    256e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    2572:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    2576:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    257a:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    257e:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	count = 0;
    2582:	e001      	b.n	2588 <unused_interrupt_vector+0x104>
		usb_isr();
    2584:	f000 f966 	bl	2854 <usb_isr>
		if (PIT_TFLG0) {
    2588:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    258c:	2b00      	cmp	r3, #0
    258e:	d0f9      	beq.n	2584 <unused_interrupt_vector+0x100>
			if (++count >= 80) break;  // reboot after 8 seconds
    2590:	3401      	adds	r4, #1
			PIT_TFLG0 = 1;
    2592:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    2596:	2c4f      	cmp	r4, #79	; 0x4f
    2598:	d9f4      	bls.n	2584 <unused_interrupt_vector+0x100>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    259a:	4b18      	ldr	r3, [pc, #96]	; (25fc <unused_interrupt_vector+0x178>)
	USB1_USBCMD = USB_USBCMD_RST;
    259c:	2002      	movs	r0, #2
    259e:	4918      	ldr	r1, [pc, #96]	; (2600 <unused_interrupt_vector+0x17c>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    25a0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
    25a4:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    25a8:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    25aa:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    25ae:	b93b      	cbnz	r3, 25c0 <unused_interrupt_vector+0x13c>
	SRC_GPR5 = 0x0BAD00F1;
    25b0:	4814      	ldr	r0, [pc, #80]	; (2604 <unused_interrupt_vector+0x180>)
    25b2:	4915      	ldr	r1, [pc, #84]	; (2608 <unused_interrupt_vector+0x184>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    25b4:	4a0d      	ldr	r2, [pc, #52]	; (25ec <unused_interrupt_vector+0x168>)
	SRC_GPR5 = 0x0BAD00F1;
    25b6:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    25b8:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
    25bc:	2b00      	cmp	r3, #0
    25be:	d0fa      	beq.n	25b6 <unused_interrupt_vector+0x132>
	SCB_AIRCR = 0x05FA0004;
    25c0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    25c4:	4a11      	ldr	r2, [pc, #68]	; (260c <unused_interrupt_vector+0x188>)
    25c6:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    25ca:	e7fe      	b.n	25ca <unused_interrupt_vector+0x146>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    25cc:	f001 f97c 	bl	38c8 <set_arm_clock>
    25d0:	e7be      	b.n	2550 <unused_interrupt_vector+0xcc>
    25d2:	bf00      	nop
    25d4:	2027ff00 	.word	0x2027ff00
    25d8:	2027ff80 	.word	0x2027ff80
    25dc:	2027ffa8 	.word	0x2027ffa8
    25e0:	edb88320 	.word	0xedb88320
    25e4:	2027ffa0 	.word	0x2027ffa0
    25e8:	400fc000 	.word	0x400fc000
    25ec:	40084000 	.word	0x40084000
    25f0:	20007b84 	.word	0x20007b84
    25f4:	0bcd3d80 	.word	0x0bcd3d80
    25f8:	00249f00 	.word	0x00249f00
    25fc:	400d9000 	.word	0x400d9000
    2600:	402e0000 	.word	0x402e0000
    2604:	400f8000 	.word	0x400f8000
    2608:	0bad00f1 	.word	0x0bad00f1
    260c:	05fa0004 	.word	0x05fa0004

00002610 <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
    2610:	490a      	ldr	r1, [pc, #40]	; (263c <_sbrk+0x2c>)
    2612:	680a      	ldr	r2, [r1, #0]
        if (incr != 0) {
    2614:	b138      	cbz	r0, 2626 <_sbrk+0x16>
{
    2616:	b508      	push	{r3, lr}
                if (prev + incr > (char *)&_heap_end) {
    2618:	1813      	adds	r3, r2, r0
    261a:	4809      	ldr	r0, [pc, #36]	; (2640 <_sbrk+0x30>)
    261c:	4283      	cmp	r3, r0
    261e:	d804      	bhi.n	262a <_sbrk+0x1a>
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    2620:	4610      	mov	r0, r2
                __brkval = prev + incr;
    2622:	600b      	str	r3, [r1, #0]
}
    2624:	bd08      	pop	{r3, pc}
    2626:	4610      	mov	r0, r2
    2628:	4770      	bx	lr
                        errno = ENOMEM;
    262a:	f003 fd91 	bl	6150 <__errno>
    262e:	230c      	movs	r3, #12
                        return (void *)-1;
    2630:	f04f 32ff 	mov.w	r2, #4294967295
                        errno = ENOMEM;
    2634:	6003      	str	r3, [r0, #0]
}
    2636:	4610      	mov	r0, r2
    2638:	bd08      	pop	{r3, pc}
    263a:	bf00      	nop
    263c:	20007c68 	.word	0x20007c68
    2640:	20280000 	.word	0x20280000

00002644 <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
    2644:	2000      	movs	r0, #0
    2646:	4770      	bx	lr

00002648 <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
    2648:	f04f 30ff 	mov.w	r0, #4294967295
    264c:	4770      	bx	lr
    264e:	bf00      	nop

00002650 <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
    2650:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
    2654:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
    2656:	604b      	str	r3, [r1, #4]
}
    2658:	4770      	bx	lr
    265a:	bf00      	nop

0000265c <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
    265c:	2001      	movs	r0, #1
    265e:	4770      	bx	lr

00002660 <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
    2660:	f04f 30ff 	mov.w	r0, #4294967295
    2664:	4770      	bx	lr
    2666:	bf00      	nop

00002668 <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    2668:	bf30      	wfi
    266a:	e7fd      	b.n	2668 <abort>

0000266c <Panic_Temp_isr>:
  unused_interrupt_vector();
    266c:	f7ff bf0a 	b.w	2484 <unused_interrupt_vector>

00002670 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    2670:	4a12      	ldr	r2, [pc, #72]	; (26bc <tempmonGetTemp+0x4c>)
    2672:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    2676:	075b      	lsls	r3, r3, #29
    2678:	d5fb      	bpl.n	2672 <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    267a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    267e:	4810      	ldr	r0, [pc, #64]	; (26c0 <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    2680:	f3c3 230b 	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    2684:	490f      	ldr	r1, [pc, #60]	; (26c4 <tempmonGetTemp+0x54>)
    2686:	ed90 7a00 	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    268a:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    268e:	ed91 6a00 	vldr	s12, [r1]
    2692:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    2696:	4a0c      	ldr	r2, [pc, #48]	; (26c8 <tempmonGetTemp+0x58>)
    2698:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    269c:	4b0b      	ldr	r3, [pc, #44]	; (26cc <tempmonGetTemp+0x5c>)
    269e:	edd2 6a00 	vldr	s13, [r2]
    26a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
    26a6:	ed93 7a00 	vldr	s14, [r3]
    26aa:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    26ae:	ee67 7a86 	vmul.f32	s15, s15, s12
    26b2:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
    26b6:	ee37 0a40 	vsub.f32	s0, s14, s0
    26ba:	4770      	bx	lr
    26bc:	400d8100 	.word	0x400d8100
    26c0:	20008e54 	.word	0x20008e54
    26c4:	20008e5c 	.word	0x20008e5c
    26c8:	20008e60 	.word	0x20008e60
    26cc:	20008e58 	.word	0x20008e58

000026d0 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    26d0:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
    26d2:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
    26d4:	b11b      	cbz	r3, 26de <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    26d6:	6853      	ldr	r3, [r2, #4]
    26d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    26dc:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    26de:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    26e0:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    26e2:	b33c      	cbz	r4, 2734 <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    26e4:	4b1a      	ldr	r3, [pc, #104]	; (2750 <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
    26e6:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    26e8:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    26ec:	420c      	tst	r4, r1
    26ee:	d11d      	bne.n	272c <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    26f0:	4e18      	ldr	r6, [pc, #96]	; (2754 <schedule_transfer+0x84>)
    26f2:	6877      	ldr	r7, [r6, #4]
    26f4:	e004      	b.n	2700 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    26f6:	6874      	ldr	r4, [r6, #4]
    26f8:	1be4      	subs	r4, r4, r7
    26fa:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    26fe:	d20b      	bcs.n	2718 <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    2700:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    2704:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    2708:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    270c:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    2710:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    2714:	0464      	lsls	r4, r4, #17
    2716:	d5ee      	bpl.n	26f6 <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    2718:	400d      	ands	r5, r1
    271a:	d107      	bne.n	272c <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    271c:	4c0c      	ldr	r4, [pc, #48]	; (2750 <schedule_transfer+0x80>)
		endpoint->status = 0;
    271e:	e9c0 2502 	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    2722:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2726:	430b      	orrs	r3, r1
    2728:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    272c:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    272e:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    2730:	bcf0      	pop	{r4, r5, r6, r7}
    2732:	4770      	bx	lr
	USB1_ENDPTPRIME |= epmask;
    2734:	4d06      	ldr	r5, [pc, #24]	; (2750 <schedule_transfer+0x80>)
	endpoint->status = 0;
    2736:	e9c0 2402 	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    273a:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
    273e:	430b      	orrs	r3, r1
    2740:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    2744:	6302      	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
    2746:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    2748:	b662      	cpsie	i
}
    274a:	bcf0      	pop	{r4, r5, r6, r7}
    274c:	4770      	bx	lr
    274e:	bf00      	nop
    2750:	402e0000 	.word	0x402e0000
    2754:	e0001000 	.word	0xe0001000

00002758 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    2758:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    275a:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
    275c:	b19d      	cbz	r5, 2786 <run_callbacks+0x2e>
    275e:	4606      	mov	r6, r0
    2760:	462a      	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    2762:	2400      	movs	r4, #0
    2764:	e003      	b.n	276e <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    2766:	6812      	ldr	r2, [r2, #0]
		count++;
    2768:	3401      	adds	r4, #1
		if ((uint32_t)t == 1) {
    276a:	2a01      	cmp	r2, #1
    276c:	d00c      	beq.n	2788 <run_callbacks+0x30>
		if (t->status & (1<<7)) {
    276e:	6853      	ldr	r3, [r2, #4]
    2770:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    2774:	d0f7      	beq.n	2766 <run_callbacks+0xe>
			ep->first_transfer = t;
    2776:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    2778:	b12c      	cbz	r4, 2786 <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
    277a:	4628      	mov	r0, r5
		ep->callback_function(first);
    277c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
    277e:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
    2780:	4798      	blx	r3
	while (count) {
    2782:	3c01      	subs	r4, #1
    2784:	d1f9      	bne.n	277a <run_callbacks+0x22>
		first = next;
		count--;
	}
}
    2786:	bd70      	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
    2788:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
			break;
    278c:	e7f4      	b.n	2778 <run_callbacks+0x20>
    278e:	bf00      	nop

00002790 <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    2790:	b430      	push	{r4, r5}
	if (len > 0) {
    2792:	b9d9      	cbnz	r1, 27cc <endpoint0_transmit.constprop.0+0x3c>
    2794:	4c1f      	ldr	r4, [pc, #124]	; (2814 <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
    2796:	4b20      	ldr	r3, [pc, #128]	; (2818 <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
    2798:	2100      	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    279a:	4a20      	ldr	r2, [pc, #128]	; (281c <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
    279c:	2501      	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    279e:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    27a2:	6099      	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    27a4:	601d      	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
    27a6:	e9c4 3102 	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    27aa:	2480      	movs	r4, #128	; 0x80
    27ac:	605c      	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    27ae:	f8c2 01bc 	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    27b2:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    27b6:	481a      	ldr	r0, [pc, #104]	; (2820 <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
    27b8:	432b      	orrs	r3, r5
    27ba:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    27be:	6001      	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
    27c0:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    27c4:	2b00      	cmp	r3, #0
    27c6:	d1fb      	bne.n	27c0 <endpoint0_transmit.constprop.0+0x30>
}
    27c8:	bc30      	pop	{r4, r5}
    27ca:	4770      	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    27cc:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    27ce:	4b15      	ldr	r3, [pc, #84]	; (2824 <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    27d0:	4c10      	ldr	r4, [pc, #64]	; (2814 <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
    27d2:	2501      	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    27d4:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    27d8:	6098      	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
    27da:	4a10      	ldr	r2, [pc, #64]	; (281c <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    27dc:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    27de:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    27e2:	601d      	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    27e4:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    27e6:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    27ea:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
    27ec:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    27ee:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    27f2:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    27f6:	6159      	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
    27f8:	2100      	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
    27fa:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    27fc:	64e1      	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    27fe:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    2802:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    2806:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    280a:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    280e:	2b00      	cmp	r3, #0
    2810:	d1fb      	bne.n	280a <endpoint0_transmit.constprop.0+0x7a>
    2812:	e7c0      	b.n	2796 <endpoint0_transmit.constprop.0+0x6>
    2814:	20000000 	.word	0x20000000
    2818:	200086c0 	.word	0x200086c0
    281c:	402e0000 	.word	0x402e0000
    2820:	20008ddc 	.word	0x20008ddc
    2824:	200086e0 	.word	0x200086e0

00002828 <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    2828:	4908      	ldr	r1, [pc, #32]	; (284c <usb_stop_sof_interrupts+0x24>)
    282a:	2201      	movs	r2, #1
    282c:	780b      	ldrb	r3, [r1, #0]
    282e:	fa02 f000 	lsl.w	r0, r2, r0
    2832:	ea23 0000 	bic.w	r0, r3, r0
    2836:	7008      	strb	r0, [r1, #0]
	if (sof_usage == 0) {
    2838:	b930      	cbnz	r0, 2848 <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    283a:	4a05      	ldr	r2, [pc, #20]	; (2850 <usb_stop_sof_interrupts+0x28>)
    283c:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
    2840:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    2844:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
    2848:	4770      	bx	lr
    284a:	bf00      	nop
    284c:	20008e9f 	.word	0x20008e9f
    2850:	402e0000 	.word	0x402e0000

00002854 <usb_isr>:
{
    2854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
    2858:	4c97      	ldr	r4, [pc, #604]	; (2ab8 <usb_isr+0x264>)
{
    285a:	b083      	sub	sp, #12
	uint32_t status = USB1_USBSTS;
    285c:	f8d4 7144 	ldr.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    2860:	07fb      	lsls	r3, r7, #31
	USB1_USBSTS = status;
    2862:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    2866:	d553      	bpl.n	2910 <usb_isr+0xbc>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    2868:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    286c:	2a00      	cmp	r2, #0
    286e:	d04a      	beq.n	2906 <usb_isr+0xb2>
    2870:	4e92      	ldr	r6, [pc, #584]	; (2abc <usb_isr+0x268>)
    2872:	f8df a260 	ldr.w	sl, [pc, #608]	; 2ad4 <usb_isr+0x280>
		uint32_t addr = (uint32_t)data;
    2876:	f8df 9274 	ldr.w	r9, [pc, #628]	; 2aec <usb_isr+0x298>
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    287a:	f8df b274 	ldr.w	fp, [pc, #628]	; 2af0 <usb_isr+0x29c>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    287e:	f8df 8274 	ldr.w	r8, [pc, #628]	; 2af4 <usb_isr+0x2a0>
			USB1_ENDPTSETUPSTAT = setupstatus;
    2882:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
    2886:	e9d6 200a 	ldrd	r2, r0, [r6, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    288a:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    288e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    2892:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    2896:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    289a:	049d      	lsls	r5, r3, #18
    289c:	d5f5      	bpl.n	288a <usb_isr+0x36>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    289e:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    28a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    28a6:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    28aa:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    28ae:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    28b2:	f8d4 51b4 	ldr.w	r5, [r4, #436]	; 0x1b4
    28b6:	f015 1501 	ands.w	r5, r5, #65537	; 0x10001
    28ba:	d1fa      	bne.n	28b2 <usb_isr+0x5e>
			endpoint0_notify_mask = 0;
    28bc:	b293      	uxth	r3, r2
	setup.bothwords = setupdata;
    28be:	4684      	mov	ip, r0
			endpoint0_notify_mask = 0;
    28c0:	f8ca 5000 	str.w	r5, [sl]
	switch (setup.wRequestAndType) {
    28c4:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    28c8:	f000 81cf 	beq.w	2c6a <usb_isr+0x416>
    28cc:	f200 80db 	bhi.w	2a86 <usb_isr+0x232>
    28d0:	f240 3102 	movw	r1, #770	; 0x302
    28d4:	428b      	cmp	r3, r1
    28d6:	f000 81e7 	beq.w	2ca8 <usb_isr+0x454>
    28da:	f200 809a 	bhi.w	2a12 <usb_isr+0x1be>
    28de:	2b82      	cmp	r3, #130	; 0x82
    28e0:	f000 81cb 	beq.w	2c7a <usb_isr+0x426>
    28e4:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    28e8:	f040 808a 	bne.w	2a00 <usb_isr+0x1ac>
		if (endpoint > 7) break;
    28ec:	f010 0f78 	tst.w	r0, #120	; 0x78
    28f0:	b283      	uxth	r3, r0
    28f2:	f000 8203 	beq.w	2cfc <usb_isr+0x4a8>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    28f6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    28fa:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    28fe:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    2902:	2a00      	cmp	r2, #0
    2904:	d1bd      	bne.n	2882 <usb_isr+0x2e>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    2906:	4a6c      	ldr	r2, [pc, #432]	; (2ab8 <usb_isr+0x264>)
    2908:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    290c:	2b00      	cmp	r3, #0
    290e:	d142      	bne.n	2996 <usb_isr+0x142>
	if (status & USB_USBSTS_URI) { // page 3164
    2910:	067e      	lsls	r6, r7, #25
    2912:	d516      	bpl.n	2942 <usb_isr+0xee>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    2914:	4b68      	ldr	r3, [pc, #416]	; (2ab8 <usb_isr+0x264>)
    2916:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    291a:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    291e:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    2922:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    2926:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    292a:	2c00      	cmp	r4, #0
    292c:	d1fb      	bne.n	2926 <usb_isr+0xd2>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    292e:	f04f 32ff 	mov.w	r2, #4294967295
    2932:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    2936:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    293a:	f000 fd29 	bl	3390 <usb_serial_reset>
		endpointN_notify_mask = 0;
    293e:	4b60      	ldr	r3, [pc, #384]	; (2ac0 <usb_isr+0x26c>)
    2940:	601c      	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
    2942:	01fc      	lsls	r4, r7, #7
    2944:	d503      	bpl.n	294e <usb_isr+0xfa>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    2946:	4b5f      	ldr	r3, [pc, #380]	; (2ac4 <usb_isr+0x270>)
    2948:	681b      	ldr	r3, [r3, #0]
    294a:	b103      	cbz	r3, 294e <usb_isr+0xfa>
    294c:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
    294e:	01b8      	lsls	r0, r7, #6
    2950:	d503      	bpl.n	295a <usb_isr+0x106>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    2952:	4b5d      	ldr	r3, [pc, #372]	; (2ac8 <usb_isr+0x274>)
    2954:	681b      	ldr	r3, [r3, #0]
    2956:	b103      	cbz	r3, 295a <usb_isr+0x106>
    2958:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
    295a:	0779      	lsls	r1, r7, #29
    295c:	d508      	bpl.n	2970 <usb_isr+0x11c>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    295e:	4b56      	ldr	r3, [pc, #344]	; (2ab8 <usb_isr+0x264>)
    2960:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    2964:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    2968:	d047      	beq.n	29fa <usb_isr+0x1a6>
			usb_high_speed = 1;
    296a:	4b58      	ldr	r3, [pc, #352]	; (2acc <usb_isr+0x278>)
    296c:	2201      	movs	r2, #1
    296e:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    2970:	4b51      	ldr	r3, [pc, #324]	; (2ab8 <usb_isr+0x264>)
    2972:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
    2976:	061a      	lsls	r2, r3, #24
    2978:	d50a      	bpl.n	2990 <usb_isr+0x13c>
    297a:	063b      	lsls	r3, r7, #24
    297c:	d508      	bpl.n	2990 <usb_isr+0x13c>
		if (usb_reboot_timer) {
    297e:	4a54      	ldr	r2, [pc, #336]	; (2ad0 <usb_isr+0x27c>)
    2980:	7813      	ldrb	r3, [r2, #0]
    2982:	b12b      	cbz	r3, 2990 <usb_isr+0x13c>
			if (--usb_reboot_timer == 0) {
    2984:	3b01      	subs	r3, #1
    2986:	b2db      	uxtb	r3, r3
    2988:	7013      	strb	r3, [r2, #0]
    298a:	2b00      	cmp	r3, #0
    298c:	f000 8272 	beq.w	2e74 <usb_isr+0x620>
}
    2990:	b003      	add	sp, #12
    2992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (completestatus & endpoint0_notify_mask) {
    2996:	494f      	ldr	r1, [pc, #316]	; (2ad4 <usb_isr+0x280>)
			USB1_ENDPTCOMPLETE = completestatus;
    2998:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    299c:	6808      	ldr	r0, [r1, #0]
    299e:	4203      	tst	r3, r0
    29a0:	f040 81d1 	bne.w	2d46 <usb_isr+0x4f2>
			completestatus &= endpointN_notify_mask;
    29a4:	4a46      	ldr	r2, [pc, #280]	; (2ac0 <usb_isr+0x26c>)
    29a6:	6814      	ldr	r4, [r2, #0]
			if (completestatus) {
    29a8:	401c      	ands	r4, r3
    29aa:	d0b1      	beq.n	2910 <usb_isr+0xbc>
				while (tx) {
    29ac:	ea5f 4814 	movs.w	r8, r4, lsr #16
    29b0:	d010      	beq.n	29d4 <usb_isr+0x180>
    29b2:	4e42      	ldr	r6, [pc, #264]	; (2abc <usb_isr+0x268>)
					tx &= ~(1<<p);
    29b4:	f04f 0901 	mov.w	r9, #1
					int p=__builtin_ctz(tx);
    29b8:	fa98 f5a8 	rbit	r5, r8
    29bc:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    29c0:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					tx &= ~(1<<p);
    29c4:	fa09 f505 	lsl.w	r5, r9, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    29c8:	3040      	adds	r0, #64	; 0x40
    29ca:	f7ff fec5 	bl	2758 <run_callbacks>
				while (tx) {
    29ce:	ea38 0805 	bics.w	r8, r8, r5
    29d2:	d1f1      	bne.n	29b8 <usb_isr+0x164>
				uint32_t rx = completestatus & 0xffff;
    29d4:	b2a4      	uxth	r4, r4
				while(rx) {
    29d6:	2c00      	cmp	r4, #0
    29d8:	d09a      	beq.n	2910 <usb_isr+0xbc>
    29da:	4e38      	ldr	r6, [pc, #224]	; (2abc <usb_isr+0x268>)
					rx &= ~(1<<p);
    29dc:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(rx);
    29e0:	fa94 f5a4 	rbit	r5, r4
    29e4:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    29e8:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					rx &= ~(1<<p);
    29ec:	fa08 f505 	lsl.w	r5, r8, r5
					run_callbacks(endpoint_queue_head + p * 2);
    29f0:	f7ff feb2 	bl	2758 <run_callbacks>
				while(rx) {
    29f4:	43ac      	bics	r4, r5
    29f6:	d1f3      	bne.n	29e0 <usb_isr+0x18c>
    29f8:	e78a      	b.n	2910 <usb_isr+0xbc>
			usb_high_speed = 0;
    29fa:	4a34      	ldr	r2, [pc, #208]	; (2acc <usb_isr+0x278>)
    29fc:	7013      	strb	r3, [r2, #0]
    29fe:	e7b7      	b.n	2970 <usb_isr+0x11c>
	switch (setup.wRequestAndType) {
    2a00:	2b80      	cmp	r3, #128	; 0x80
    2a02:	f47f af78 	bne.w	28f6 <usb_isr+0xa2>
		reply_buffer[0] = 0;
    2a06:	4834      	ldr	r0, [pc, #208]	; (2ad8 <usb_isr+0x284>)
		endpoint0_transmit(reply_buffer, 2, 0);
    2a08:	2102      	movs	r1, #2
		reply_buffer[0] = 0;
    2a0a:	8005      	strh	r5, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    2a0c:	f7ff fec0 	bl	2790 <endpoint0_transmit.constprop.0>
		return;
    2a10:	e775      	b.n	28fe <usb_isr+0xaa>
	switch (setup.wRequestAndType) {
    2a12:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    2a16:	f000 810b 	beq.w	2c30 <usb_isr+0x3dc>
    2a1a:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
    2a1e:	2b01      	cmp	r3, #1
    2a20:	f63f af69 	bhi.w	28f6 <usb_isr+0xa2>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    2a24:	4b2d      	ldr	r3, [pc, #180]	; (2adc <usb_isr+0x288>)
    2a26:	685d      	ldr	r5, [r3, #4]
    2a28:	2d00      	cmp	r5, #0
    2a2a:	f43f af64 	beq.w	28f6 <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    2a2e:	fa1f fc8c 	uxth.w	ip, ip
    2a32:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    2a36:	e004      	b.n	2a42 <usb_isr+0x1ee>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    2a38:	691d      	ldr	r5, [r3, #16]
    2a3a:	330c      	adds	r3, #12
    2a3c:	2d00      	cmp	r5, #0
    2a3e:	f43f af5a 	beq.w	28f6 <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    2a42:	881a      	ldrh	r2, [r3, #0]
    2a44:	4572      	cmp	r2, lr
    2a46:	d1f7      	bne.n	2a38 <usb_isr+0x1e4>
    2a48:	885a      	ldrh	r2, [r3, #2]
    2a4a:	4562      	cmp	r2, ip
    2a4c:	d1f4      	bne.n	2a38 <usb_isr+0x1e4>
				if ((setup.wValue >> 8) == 3) {
    2a4e:	ea4f 221e 	mov.w	r2, lr, lsr #8
    2a52:	2a03      	cmp	r2, #3
    2a54:	f000 81a5 	beq.w	2da2 <usb_isr+0x54e>
					datalen = list->length;
    2a58:	891a      	ldrh	r2, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    2a5a:	0c00      	lsrs	r0, r0, #16
    2a5c:	4282      	cmp	r2, r0
    2a5e:	bf28      	it	cs
    2a60:	4602      	movcs	r2, r0
				if (setup.wValue == 0x200) {
    2a62:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    2a66:	f040 81a1 	bne.w	2dac <usb_isr+0x558>
					if (usb_high_speed) src = usb_config_descriptor_480;
    2a6a:	4b18      	ldr	r3, [pc, #96]	; (2acc <usb_isr+0x278>)
    2a6c:	491c      	ldr	r1, [pc, #112]	; (2ae0 <usb_isr+0x28c>)
    2a6e:	7818      	ldrb	r0, [r3, #0]
    2a70:	4b1c      	ldr	r3, [pc, #112]	; (2ae4 <usb_isr+0x290>)
					memcpy(usb_descriptor_buffer, src, datalen);
    2a72:	9201      	str	r2, [sp, #4]
    2a74:	2800      	cmp	r0, #0
    2a76:	bf18      	it	ne
    2a78:	4619      	movne	r1, r3
    2a7a:	481b      	ldr	r0, [pc, #108]	; (2ae8 <usb_isr+0x294>)
    2a7c:	f7ff fb7e 	bl	217c <memcpy>
    2a80:	4d19      	ldr	r5, [pc, #100]	; (2ae8 <usb_isr+0x294>)
    2a82:	9a01      	ldr	r2, [sp, #4]
    2a84:	e1e1      	b.n	2e4a <usb_isr+0x5f6>
	switch (setup.wRequestAndType) {
    2a86:	f242 2121 	movw	r1, #8737	; 0x2221
    2a8a:	428b      	cmp	r3, r1
    2a8c:	d07c      	beq.n	2b88 <usb_isr+0x334>
    2a8e:	d933      	bls.n	2af8 <usb_isr+0x2a4>
    2a90:	f242 3121 	movw	r1, #8993	; 0x2321
    2a94:	428b      	cmp	r3, r1
    2a96:	f000 8081 	beq.w	2b9c <usb_isr+0x348>
    2a9a:	f64f 01c0 	movw	r1, #63680	; 0xf8c0
    2a9e:	428b      	cmp	r3, r1
    2aa0:	f47f af29 	bne.w	28f6 <usb_isr+0xa2>
		if ((setup.wIndex & 0xFF00) != 0) break; // 1=Genre, 4=Compat ID, 5=Properties
    2aa4:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
    2aa8:	b283      	uxth	r3, r0
    2aaa:	f47f af24 	bne.w	28f6 <usb_isr+0xa2>
		setup.wIndex |= 0xEE00; // alter wIndex and treat as normal USB descriptor
    2aae:	f443 436e 	orr.w	r3, r3, #60928	; 0xee00
    2ab2:	f363 0c0f 	bfi	ip, r3, #0, #16
    2ab6:	e7b5      	b.n	2a24 <usb_isr+0x1d0>
    2ab8:	402e0000 	.word	0x402e0000
    2abc:	20000000 	.word	0x20000000
    2ac0:	20008de0 	.word	0x20008de0
    2ac4:	20008e80 	.word	0x20008e80
    2ac8:	20008e84 	.word	0x20008e84
    2acc:	20008ea5 	.word	0x20008ea5
    2ad0:	20008ea6 	.word	0x20008ea6
    2ad4:	20008ddc 	.word	0x20008ddc
    2ad8:	20008e1c 	.word	0x20008e1c
    2adc:	200079b8 	.word	0x200079b8
    2ae0:	60001eb8 	.word	0x60001eb8
    2ae4:	60001f1c 	.word	0x60001f1c
    2ae8:	20200000 	.word	0x20200000
    2aec:	20008dd4 	.word	0x20008dd4
    2af0:	b8c6cf5d 	.word	0xb8c6cf5d
    2af4:	402e01c0 	.word	0x402e01c0
	switch (setup.wRequestAndType) {
    2af8:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    2afc:	d066      	beq.n	2bcc <usb_isr+0x378>
    2afe:	f242 0121 	movw	r1, #8225	; 0x2021
    2b02:	428b      	cmp	r3, r1
    2b04:	f47f aef7 	bne.w	28f6 <usb_isr+0xa2>
		if (setup.wLength != 7) break;
    2b08:	0c03      	lsrs	r3, r0, #16
    2b0a:	2b07      	cmp	r3, #7
    2b0c:	f47f aef3 	bne.w	28f6 <usb_isr+0xa2>
		endpoint0_transfer_data.next = 1;
    2b10:	4bb2      	ldr	r3, [pc, #712]	; (2ddc <usb_isr+0x588>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
    2b12:	49b3      	ldr	r1, [pc, #716]	; (2de0 <usb_isr+0x58c>)
		endpoint_queue_head[0].status = 0;
    2b14:	60f5      	str	r5, [r6, #12]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    2b16:	60d9      	str	r1, [r3, #12]
		endpoint0_setupdata.bothwords = setupdata;
    2b18:	49b2      	ldr	r1, [pc, #712]	; (2de4 <usb_isr+0x590>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    2b1a:	60b3      	str	r3, [r6, #8]
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    2b1c:	f8c3 9008 	str.w	r9, [r3, #8]
		endpoint0_setupdata.bothwords = setupdata;
    2b20:	e9c1 2000 	strd	r2, r0, [r1]
		endpoint0_transfer_data.next = 1;
    2b24:	2201      	movs	r2, #1
    2b26:	601a      	str	r2, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    2b28:	4aaf      	ldr	r2, [pc, #700]	; (2de8 <usb_isr+0x594>)
    2b2a:	605a      	str	r2, [r3, #4]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    2b2c:	4aaf      	ldr	r2, [pc, #700]	; (2dec <usb_isr+0x598>)
    2b2e:	611a      	str	r2, [r3, #16]
		USB1_ENDPTPRIME |= (1<<0);
    2b30:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
    2b34:	f041 0101 	orr.w	r1, r1, #1
    2b38:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.pointer3 = addr + 12288;
    2b3c:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    2b40:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    2b44:	6159      	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    2b46:	619a      	str	r2, [r3, #24]
		while (USB1_ENDPTPRIME) ;
    2b48:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2b4c:	2b00      	cmp	r3, #0
    2b4e:	d1fb      	bne.n	2b48 <usb_isr+0x2f4>
	endpoint0_transfer_ack.next = 1;
    2b50:	4aa7      	ldr	r2, [pc, #668]	; (2df0 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    2b52:	64f3      	str	r3, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    2b54:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
    2b56:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    2b58:	64b2      	str	r2, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    2b5a:	6013      	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2b5c:	f248 0380 	movw	r3, #32896	; 0x8080
    2b60:	6053      	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    2b62:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    2b66:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2b6a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2b6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    2b72:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    2b76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2b7a:	f8ca 3000 	str.w	r3, [sl]
	while (USB1_ENDPTPRIME) ;
    2b7e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2b82:	2b00      	cmp	r3, #0
    2b84:	d1fb      	bne.n	2b7e <usb_isr+0x32a>
    2b86:	e6ba      	b.n	28fe <usb_isr+0xaa>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    2b88:	b280      	uxth	r0, r0
    2b8a:	b938      	cbnz	r0, 2b9c <usb_isr+0x348>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    2b8c:	4b99      	ldr	r3, [pc, #612]	; (2df4 <usb_isr+0x5a0>)
			usb_cdc_line_rtsdtr = setup.wValue;
    2b8e:	f3c2 4207 	ubfx	r2, r2, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    2b92:	6819      	ldr	r1, [r3, #0]
    2b94:	4b98      	ldr	r3, [pc, #608]	; (2df8 <usb_isr+0x5a4>)
    2b96:	6019      	str	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    2b98:	4b98      	ldr	r3, [pc, #608]	; (2dfc <usb_isr+0x5a8>)
    2b9a:	701a      	strb	r2, [r3, #0]
	endpoint0_transfer_ack.next = 1;
    2b9c:	4b94      	ldr	r3, [pc, #592]	; (2df0 <usb_isr+0x59c>)
	endpoint0_transfer_ack.pointer0 = 0;
    2b9e:	2200      	movs	r2, #0
    2ba0:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
    2ba2:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    2ba4:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    2ba6:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    2ba8:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2baa:	2280      	movs	r2, #128	; 0x80
    2bac:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    2bae:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    2bb2:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2bb6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2bba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    2bbe:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    2bc2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2bc6:	2b00      	cmp	r3, #0
    2bc8:	d1fb      	bne.n	2bc2 <usb_isr+0x36e>
    2bca:	e698      	b.n	28fe <usb_isr+0xaa>
		usb_configuration = setup.wValue;
    2bcc:	f3c2 4207 	ubfx	r2, r2, #16, #8
    2bd0:	4b8b      	ldr	r3, [pc, #556]	; (2e00 <usb_isr+0x5ac>)
    2bd2:	701a      	strb	r2, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    2bd4:	4b8b      	ldr	r3, [pc, #556]	; (2e04 <usb_isr+0x5b0>)
    2bd6:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    2bda:	4b8b      	ldr	r3, [pc, #556]	; (2e08 <usb_isr+0x5b4>)
    2bdc:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    2be0:	4b8a      	ldr	r3, [pc, #552]	; (2e0c <usb_isr+0x5b8>)
    2be2:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		usb_serial_configure();
    2be6:	f000 fbd5 	bl	3394 <usb_serial_configure>
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
    2bea:	2280      	movs	r2, #128	; 0x80
    2bec:	4629      	mov	r1, r5
    2bee:	4888      	ldr	r0, [pc, #544]	; (2e10 <usb_isr+0x5bc>)
    2bf0:	f003 f912 	bl	5e18 <memset>
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    2bf4:	4b87      	ldr	r3, [pc, #540]	; (2e14 <usb_isr+0x5c0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2bf6:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    2bf8:	f8c6 b0a0 	str.w	fp, [r6, #160]	; 0xa0
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    2bfc:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
	endpoint0_transfer_ack.next = 1;
    2c00:	4b7b      	ldr	r3, [pc, #492]	; (2df0 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    2c02:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2c04:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.next = 1;
    2c06:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    2c08:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.pointer0 = 0;
    2c0a:	609d      	str	r5, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    2c0c:	601a      	str	r2, [r3, #0]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    2c0e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    2c12:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2c16:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2c1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    2c1e:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    2c22:	f8ca 5000 	str.w	r5, [sl]
	while (USB1_ENDPTPRIME) ;
    2c26:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2c2a:	2b00      	cmp	r3, #0
    2c2c:	d1fb      	bne.n	2c26 <usb_isr+0x3d2>
    2c2e:	e666      	b.n	28fe <usb_isr+0xaa>
	endpoint0_transfer_ack.next = 1;
    2c30:	4b6f      	ldr	r3, [pc, #444]	; (2df0 <usb_isr+0x59c>)
    2c32:	2101      	movs	r1, #1
	endpoint_queue_head[1].status = 0;
    2c34:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    2c36:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2c38:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    2c3a:	609d      	str	r5, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    2c3c:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2c3e:	6059      	str	r1, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    2c40:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    2c44:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2c48:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    2c50:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    2c54:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2c58:	2b00      	cmp	r3, #0
    2c5a:	d1fb      	bne.n	2c54 <usb_isr+0x400>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    2c5c:	0c13      	lsrs	r3, r2, #16
    2c5e:	065b      	lsls	r3, r3, #25
    2c60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    2c64:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		return;
    2c68:	e649      	b.n	28fe <usb_isr+0xaa>
		reply_buffer[0] = usb_configuration;
    2c6a:	4b65      	ldr	r3, [pc, #404]	; (2e00 <usb_isr+0x5ac>)
		endpoint0_transmit(reply_buffer, 1, 0);
    2c6c:	2101      	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    2c6e:	486a      	ldr	r0, [pc, #424]	; (2e18 <usb_isr+0x5c4>)
    2c70:	781b      	ldrb	r3, [r3, #0]
    2c72:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    2c74:	f7ff fd8c 	bl	2790 <endpoint0_transmit.constprop.0>
		return;
    2c78:	e641      	b.n	28fe <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    2c7a:	b283      	uxth	r3, r0
		if (endpoint > 7) break;
    2c7c:	f010 0078 	ands.w	r0, r0, #120	; 0x78
    2c80:	f47f ae39 	bne.w	28f6 <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    2c84:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    2c88:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
		reply_buffer[0] = 0;
    2c8c:	4a62      	ldr	r2, [pc, #392]	; (2e18 <usb_isr+0x5c4>)
    2c8e:	8010      	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    2c90:	0618      	lsls	r0, r3, #24
    2c92:	f100 809e 	bmi.w	2dd2 <usb_isr+0x57e>
    2c96:	07cb      	lsls	r3, r1, #31
    2c98:	d501      	bpl.n	2c9e <usb_isr+0x44a>
			reply_buffer[0] = 1;
    2c9a:	2301      	movs	r3, #1
    2c9c:	7013      	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    2c9e:	2102      	movs	r1, #2
    2ca0:	485d      	ldr	r0, [pc, #372]	; (2e18 <usb_isr+0x5c4>)
    2ca2:	f7ff fd75 	bl	2790 <endpoint0_transmit.constprop.0>
		return;
    2ca6:	e62a      	b.n	28fe <usb_isr+0xaa>
		if (endpoint > 7) break;
    2ca8:	f010 0f78 	tst.w	r0, #120	; 0x78
    2cac:	b283      	uxth	r3, r0
    2cae:	f47f ae22 	bne.w	28f6 <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    2cb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    2cb6:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    2cba:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    2cbe:	bf14      	ite	ne
    2cc0:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    2cc4:	f043 0301 	orreq.w	r3, r3, #1
    2cc8:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    2ccc:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    2cce:	4b48      	ldr	r3, [pc, #288]	; (2df0 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    2cd0:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    2cd2:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    2cd4:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    2cd6:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    2cd8:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2cda:	2280      	movs	r2, #128	; 0x80
    2cdc:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    2cde:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    2ce2:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2ce6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2cea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    2cee:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    2cf2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2cf6:	2b00      	cmp	r3, #0
    2cf8:	d1fb      	bne.n	2cf2 <usb_isr+0x49e>
    2cfa:	e600      	b.n	28fe <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    2cfc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    2d00:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    2d04:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    2d08:	bf14      	ite	ne
    2d0a:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    2d0e:	f023 0301 	biceq.w	r3, r3, #1
    2d12:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    2d16:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    2d18:	4b35      	ldr	r3, [pc, #212]	; (2df0 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    2d1a:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    2d1c:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    2d1e:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    2d20:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    2d22:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2d24:	2280      	movs	r2, #128	; 0x80
    2d26:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    2d28:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    2d2c:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2d30:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    2d38:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    2d3c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2d40:	2b00      	cmp	r3, #0
    2d42:	d1fb      	bne.n	2d3c <usb_isr+0x4e8>
    2d44:	e5db      	b.n	28fe <usb_isr+0xaa>
				endpoint0_notify_mask = 0;
    2d46:	2000      	movs	r0, #0
    2d48:	6008      	str	r0, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    2d4a:	4926      	ldr	r1, [pc, #152]	; (2de4 <usb_isr+0x590>)
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    2d4c:	880c      	ldrh	r4, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    2d4e:	6848      	ldr	r0, [r1, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    2d50:	f242 0121 	movw	r1, #8225	; 0x2021
    2d54:	428c      	cmp	r4, r1
    2d56:	f47f ae25 	bne.w	29a4 <usb_isr+0x150>
    2d5a:	b280      	uxth	r0, r0
    2d5c:	2800      	cmp	r0, #0
    2d5e:	f47f ae21 	bne.w	29a4 <usb_isr+0x150>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    2d62:	492e      	ldr	r1, [pc, #184]	; (2e1c <usb_isr+0x5c8>)
    2d64:	4c2e      	ldr	r4, [pc, #184]	; (2e20 <usb_isr+0x5cc>)
    2d66:	c903      	ldmia	r1, {r0, r1}
    2d68:	80a1      	strh	r1, [r4, #4]
		if (usb_cdc_line_coding[0] == 134) {
    2d6a:	2886      	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    2d6c:	ea4f 4111 	mov.w	r1, r1, lsr #16
    2d70:	6020      	str	r0, [r4, #0]
    2d72:	71a1      	strb	r1, [r4, #6]
		if (usb_cdc_line_coding[0] == 134) {
    2d74:	f47f ae16 	bne.w	29a4 <usb_isr+0x150>
	__disable_irq();
    2d78:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    2d7a:	482a      	ldr	r0, [pc, #168]	; (2e24 <usb_isr+0x5d0>)
    2d7c:	7801      	ldrb	r1, [r0, #0]
    2d7e:	f041 0108 	orr.w	r1, r1, #8
    2d82:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    2d84:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    2d88:	060d      	lsls	r5, r1, #24
    2d8a:	d405      	bmi.n	2d98 <usb_isr+0x544>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    2d8c:	2080      	movs	r0, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    2d8e:	4301      	orrs	r1, r0
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    2d90:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    2d94:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	__enable_irq();
    2d98:	b662      	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    2d9a:	4a23      	ldr	r2, [pc, #140]	; (2e28 <usb_isr+0x5d4>)
    2d9c:	2150      	movs	r1, #80	; 0x50
    2d9e:	7011      	strb	r1, [r2, #0]
    2da0:	e600      	b.n	29a4 <usb_isr+0x150>
				if (datalen > setup.wLength) datalen = setup.wLength;
    2da2:	0c00      	lsrs	r0, r0, #16
					datalen = *(list->addr);
    2da4:	782a      	ldrb	r2, [r5, #0]
    2da6:	4282      	cmp	r2, r0
    2da8:	bf28      	it	cs
    2daa:	4602      	movcs	r2, r0
				} else if (setup.wValue == 0x700) {
    2dac:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
    2db0:	d144      	bne.n	2e3c <usb_isr+0x5e8>
					if (usb_high_speed) src = usb_config_descriptor_12;
    2db2:	4b1e      	ldr	r3, [pc, #120]	; (2e2c <usb_isr+0x5d8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    2db4:	4d1e      	ldr	r5, [pc, #120]	; (2e30 <usb_isr+0x5dc>)
					if (usb_high_speed) src = usb_config_descriptor_12;
    2db6:	7818      	ldrb	r0, [r3, #0]
    2db8:	491e      	ldr	r1, [pc, #120]	; (2e34 <usb_isr+0x5e0>)
    2dba:	4b1f      	ldr	r3, [pc, #124]	; (2e38 <usb_isr+0x5e4>)
					memcpy(usb_descriptor_buffer, src, datalen);
    2dbc:	9201      	str	r2, [sp, #4]
    2dbe:	2800      	cmp	r0, #0
    2dc0:	bf18      	it	ne
    2dc2:	4619      	movne	r1, r3
    2dc4:	4628      	mov	r0, r5
    2dc6:	f7ff f9d9 	bl	217c <memcpy>
					usb_descriptor_buffer[1] = 7;
    2dca:	2307      	movs	r3, #7
    2dcc:	706b      	strb	r3, [r5, #1]
    2dce:	9a01      	ldr	r2, [sp, #4]
    2dd0:	e03b      	b.n	2e4a <usb_isr+0x5f6>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    2dd2:	03c9      	lsls	r1, r1, #15
    2dd4:	f53f af61 	bmi.w	2c9a <usb_isr+0x446>
    2dd8:	e761      	b.n	2c9e <usb_isr+0x44a>
    2dda:	bf00      	nop
    2ddc:	200086e0 	.word	0x200086e0
    2de0:	20009dd4 	.word	0x20009dd4
    2de4:	20008940 	.word	0x20008940
    2de8:	00070080 	.word	0x00070080
    2dec:	2000add4 	.word	0x2000add4
    2df0:	200086c0 	.word	0x200086c0
    2df4:	20008e6c 	.word	0x20008e6c
    2df8:	20008e7c 	.word	0x20008e7c
    2dfc:	20008ea3 	.word	0x20008ea3
    2e00:	20008ea4 	.word	0x20008ea4
    2e04:	00cc0002 	.word	0x00cc0002
    2e08:	000200c8 	.word	0x000200c8
    2e0c:	00c80002 	.word	0x00c80002
    2e10:	20000080 	.word	0x20000080
    2e14:	74d59319 	.word	0x74d59319
    2e18:	20008e1c 	.word	0x20008e1c
    2e1c:	20008dd4 	.word	0x20008dd4
    2e20:	20008e74 	.word	0x20008e74
    2e24:	20008e9f 	.word	0x20008e9f
    2e28:	20008ea6 	.word	0x20008ea6
    2e2c:	20008ea5 	.word	0x20008ea5
    2e30:	20200000 	.word	0x20200000
    2e34:	60001f1c 	.word	0x60001f1c
    2e38:	60001eb8 	.word	0x60001eb8
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    2e3c:	4629      	mov	r1, r5
    2e3e:	4d10      	ldr	r5, [pc, #64]	; (2e80 <usb_isr+0x62c>)
    2e40:	9201      	str	r2, [sp, #4]
    2e42:	4628      	mov	r0, r5
    2e44:	f7ff f99a 	bl	217c <memcpy>
    2e48:	9a01      	ldr	r2, [sp, #4]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    2e4a:	f025 031f 	bic.w	r3, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
    2e4e:	4415      	add	r5, r2
	asm("dsb");
    2e50:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    2e54:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    2e58:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    2e5c:	3320      	adds	r3, #32
	} while (location < end_addr);
    2e5e:	429d      	cmp	r5, r3
    2e60:	d8fa      	bhi.n	2e58 <usb_isr+0x604>
	asm("dsb");
    2e62:	f3bf 8f4f 	dsb	sy
	asm("isb");
    2e66:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    2e6a:	4805      	ldr	r0, [pc, #20]	; (2e80 <usb_isr+0x62c>)
    2e6c:	4611      	mov	r1, r2
    2e6e:	f7ff fc8f 	bl	2790 <endpoint0_transmit.constprop.0>
				return;
    2e72:	e544      	b.n	28fe <usb_isr+0xaa>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    2e74:	2003      	movs	r0, #3
    2e76:	f7ff fcd7 	bl	2828 <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    2e7a:	f00b fdd1 	bl	ea20 <___reboot_Teensyduino__veneer>
    2e7e:	bf00      	nop
    2e80:	20200000 	.word	0x20200000

00002e84 <usb_config_rx>:
{
    2e84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2e88:	461f      	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    2e8a:	1e83      	subs	r3, r0, #2
    2e8c:	2b02      	cmp	r3, #2
    2e8e:	d901      	bls.n	2e94 <usb_config_rx+0x10>
}
    2e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    2e94:	f8df 904c 	ldr.w	r9, [pc, #76]	; 2ee4 <usb_config_rx+0x60>
    2e98:	4615      	mov	r5, r2
    2e9a:	460c      	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
    2e9c:	223c      	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    2e9e:	eb09 18c0 	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    2ea2:	4606      	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    2ea4:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    2ea8:	2100      	movs	r1, #0
    2eaa:	f108 0004 	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    2eae:	0424      	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
    2eb0:	f002 ffb2 	bl	5e18 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    2eb4:	fab5 f285 	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
    2eb8:	2301      	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    2eba:	0952      	lsrs	r2, r2, #5
    2ebc:	ea44 7442 	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
    2ec0:	f849 400a 	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    2ec4:	f8c8 7038 	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    2ec8:	f8c8 3008 	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    2ecc:	2f00      	cmp	r7, #0
    2ece:	d0df      	beq.n	2e90 <usb_config_rx+0xc>
    2ed0:	4a03      	ldr	r2, [pc, #12]	; (2ee0 <usb_config_rx+0x5c>)
    2ed2:	40b3      	lsls	r3, r6
    2ed4:	6811      	ldr	r1, [r2, #0]
    2ed6:	430b      	orrs	r3, r1
    2ed8:	6013      	str	r3, [r2, #0]
}
    2eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2ede:	bf00      	nop
    2ee0:	20008de0 	.word	0x20008de0
    2ee4:	20000000 	.word	0x20000000

00002ee8 <usb_config_tx>:
{
    2ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2eec:	460d      	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    2eee:	1e81      	subs	r1, r0, #2
    2ef0:	2902      	cmp	r1, #2
    2ef2:	d901      	bls.n	2ef8 <usb_config_tx+0x10>
}
    2ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    2ef8:	01c7      	lsls	r7, r0, #7
    2efa:	f8df 904c 	ldr.w	r9, [pc, #76]	; 2f48 <usb_config_tx+0x60>
    2efe:	4692      	mov	sl, r2
    2f00:	4604      	mov	r4, r0
    2f02:	3740      	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    2f04:	223c      	movs	r2, #60	; 0x3c
    2f06:	2100      	movs	r1, #0
    2f08:	461e      	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    2f0a:	eb09 0807 	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    2f0e:	042d      	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
    2f10:	f108 0004 	add.w	r0, r8, #4
    2f14:	f002 ff80 	bl	5e18 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    2f18:	faba f28a 	clz	r2, sl
    2f1c:	0952      	lsrs	r2, r2, #5
    2f1e:	ea45 7242 	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
    2f22:	f849 2007 	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
    2f26:	2201      	movs	r2, #1
	qh->callback_function = callback;
    2f28:	f8c8 6038 	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    2f2c:	f8c8 2008 	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    2f30:	2e00      	cmp	r6, #0
    2f32:	d0df      	beq.n	2ef4 <usb_config_tx+0xc>
    2f34:	4b03      	ldr	r3, [pc, #12]	; (2f44 <usb_config_tx+0x5c>)
    2f36:	3410      	adds	r4, #16
    2f38:	6819      	ldr	r1, [r3, #0]
    2f3a:	40a2      	lsls	r2, r4
    2f3c:	430a      	orrs	r2, r1
    2f3e:	601a      	str	r2, [r3, #0]
}
    2f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2f44:	20008de0 	.word	0x20008de0
    2f48:	20000000 	.word	0x20000000

00002f4c <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    2f4c:	0412      	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    2f4e:	6081      	str	r1, [r0, #8]
	transfer->callback_param = param;
    2f50:	61c3      	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
    2f52:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
    2f56:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
    2f5a:	b410      	push	{r4}
	transfer->next = 1;
    2f5c:	2401      	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
    2f5e:	6042      	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
    2f60:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
    2f64:	6004      	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
    2f66:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
    2f6a:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
    2f6e:	60c4      	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
    2f70:	6181      	str	r1, [r0, #24]
}
    2f72:	f85d 4b04 	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
    2f76:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
    2f7a:	4770      	bx	lr

00002f7c <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    2f7c:	1e83      	subs	r3, r0, #2
{
    2f7e:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    2f80:	2b02      	cmp	r3, #2
    2f82:	d900      	bls.n	2f86 <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    2f84:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    2f86:	4b06      	ldr	r3, [pc, #24]	; (2fa0 <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
    2f88:	f100 0110 	add.w	r1, r0, #16
    2f8c:	f04f 0c01 	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    2f90:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    2f94:	fa0c f101 	lsl.w	r1, ip, r1
    2f98:	3040      	adds	r0, #64	; 0x40
    2f9a:	f7ff bb99 	b.w	26d0 <schedule_transfer>
    2f9e:	bf00      	nop
    2fa0:	20000000 	.word	0x20000000

00002fa4 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    2fa4:	1e83      	subs	r3, r0, #2
{
    2fa6:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    2fa8:	2b02      	cmp	r3, #2
    2faa:	d900      	bls.n	2fae <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    2fac:	4770      	bx	lr
	uint32_t mask = 1 << endpoint_number;
    2fae:	2101      	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    2fb0:	4b02      	ldr	r3, [pc, #8]	; (2fbc <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
    2fb2:	4081      	lsls	r1, r0
    2fb4:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    2fb8:	f7ff bb8a 	b.w	26d0 <schedule_transfer>
    2fbc:	20000000 	.word	0x20000000

00002fc0 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    2fc0:	6840      	ldr	r0, [r0, #4]
#endif
}
    2fc2:	4770      	bx	lr

00002fc4 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    2fc4:	4a12      	ldr	r2, [pc, #72]	; (3010 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    2fc6:	4b13      	ldr	r3, [pc, #76]	; (3014 <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    2fc8:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    2fcc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    2fd0:	4298      	cmp	r0, r3
{
    2fd2:	b510      	push	{r4, lr}
    2fd4:	b084      	sub	sp, #16
	if (num < 10000000) num = num * 10;
    2fd6:	d202      	bcs.n	2fde <usb_init_serialnumber+0x1a>
    2fd8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    2fdc:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    2fde:	4c0e      	ldr	r4, [pc, #56]	; (3018 <usb_init_serialnumber+0x54>)
    2fe0:	a901      	add	r1, sp, #4
    2fe2:	220a      	movs	r2, #10
    2fe4:	f7ff f964 	bl	22b0 <ultoa>
	for (i=0; i<10; i++) {
    2fe8:	a901      	add	r1, sp, #4
    2fea:	2300      	movs	r3, #0
    2fec:	4620      	mov	r0, r4
		char c = buf[i];
    2fee:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    2ff2:	3301      	adds	r3, #1
		if (!c) break;
    2ff4:	b13a      	cbz	r2, 3006 <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
    2ff6:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    2ff8:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    2ffc:	d1f7      	bne.n	2fee <usb_init_serialnumber+0x2a>
    2ffe:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    3000:	7023      	strb	r3, [r4, #0]
}
    3002:	b004      	add	sp, #16
    3004:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    3006:	005b      	lsls	r3, r3, #1
    3008:	b2db      	uxtb	r3, r3
    300a:	7023      	strb	r3, [r4, #0]
}
    300c:	b004      	add	sp, #16
    300e:	bd10      	pop	{r4, pc}
    3010:	401f4400 	.word	0x401f4400
    3014:	00989680 	.word	0x00989680
    3018:	2000824c 	.word	0x2000824c

0000301c <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    301c:	f000 bad8 	b.w	35d0 <usb_serial_flush_input>

00003020 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    3020:	f000 baa8 	b.w	3574 <usb_serial_peekchar>

00003024 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    3024:	f000 bb66 	b.w	36f4 <usb_serial_flush_output>

00003028 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    3028:	f000 bb3c 	b.w	36a4 <usb_serial_write_buffer_free>

0000302c <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    302c:	4608      	mov	r0, r1
    302e:	4611      	mov	r1, r2
    3030:	f000 bb2c 	b.w	368c <usb_serial_write>

00003034 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    3034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    3036:	4c14      	ldr	r4, [pc, #80]	; (3088 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    3038:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    303c:	4e13      	ldr	r6, [pc, #76]	; (308c <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    303e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    3042:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    3046:	4f12      	ldr	r7, [pc, #72]	; (3090 <rx_queue_transfer+0x5c>)
    3048:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
    304c:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    304e:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    3052:	4621      	mov	r1, r4
    3054:	883a      	ldrh	r2, [r7, #0]
    3056:	4630      	mov	r0, r6
    3058:	f7ff ff78 	bl	2f4c <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    305c:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    305e:	4423      	add	r3, r4
	asm("dsb");
    3060:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    3064:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    3068:	3420      	adds	r4, #32
	} while (location < end_addr);
    306a:	42a3      	cmp	r3, r4
    306c:	d8fa      	bhi.n	3064 <rx_queue_transfer+0x30>
	asm("dsb");
    306e:	f3bf 8f4f 	dsb	sy
	asm("isb");
    3072:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    3076:	2003      	movs	r0, #3
    3078:	4631      	mov	r1, r6
    307a:	f7ff ff93 	bl	2fa4 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    307e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    3082:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
    3086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3088:	20200080 	.word	0x20200080
    308c:	20008700 	.word	0x20008700
    3090:	20008e90 	.word	0x20008e90

00003094 <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    3094:	4b24      	ldr	r3, [pc, #144]	; (3128 <rx_event+0x94>)
{
    3096:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    309a:	881c      	ldrh	r4, [r3, #0]
    309c:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
    309e:	69c5      	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    30a0:	f3c3 430e 	ubfx	r3, r3, #16, #15
    30a4:	1ae4      	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    30a6:	2c00      	cmp	r4, #0
    30a8:	dd24      	ble.n	30f4 <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
    30aa:	4920      	ldr	r1, [pc, #128]	; (312c <rx_event+0x98>)
		if (head != rx_tail) {
    30ac:	4820      	ldr	r0, [pc, #128]	; (3130 <rx_event+0x9c>)
		uint32_t head = rx_head;
    30ae:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    30b0:	7800      	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    30b2:	b2d3      	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
    30b4:	4e1f      	ldr	r6, [pc, #124]	; (3134 <rx_event+0xa0>)
		if (head != rx_tail) {
    30b6:	4282      	cmp	r2, r0
			uint32_t ii = rx_list[head];
    30b8:	481f      	ldr	r0, [pc, #124]	; (3138 <rx_event+0xa4>)
		if (head != rx_tail) {
    30ba:	d007      	beq.n	30cc <rx_event+0x38>
			uint32_t ii = rx_list[head];
    30bc:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    30c0:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    30c4:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    30c8:	4294      	cmp	r4, r2
    30ca:	d918      	bls.n	30fe <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    30cc:	3301      	adds	r3, #1
		rx_index[i] = 0;
    30ce:	2200      	movs	r2, #0
		rx_count[i] = len;
    30d0:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    30d4:	2b08      	cmp	r3, #8
		rx_index[i] = 0;
    30d6:	4e19      	ldr	r6, [pc, #100]	; (313c <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    30d8:	bf88      	it	hi
    30da:	4613      	movhi	r3, r2
		rx_index[i] = 0;
    30dc:	f826 2015 	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
    30e0:	bf98      	it	ls
    30e2:	b2da      	uxtbls	r2, r3
		rx_list[head] = i;
    30e4:	54c5      	strb	r5, [r0, r3]
		rx_available += len;
    30e6:	4b16      	ldr	r3, [pc, #88]	; (3140 <rx_event+0xac>)
		rx_head = head;
    30e8:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    30ea:	681a      	ldr	r2, [r3, #0]
    30ec:	4414      	add	r4, r2
    30ee:	601c      	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    30f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
    30f4:	4628      	mov	r0, r5
}
    30f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
    30fa:	f7ff bf9b 	b.w	3034 <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    30fe:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    3102:	4910      	ldr	r1, [pc, #64]	; (3144 <rx_event+0xb0>)
    3104:	4622      	mov	r2, r4
				rx_count[ii] = count + len;
    3106:	4427      	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    3108:	4408      	add	r0, r1
    310a:	eb01 2145 	add.w	r1, r1, r5, lsl #9
    310e:	f7ff f835 	bl	217c <memcpy>
				rx_available += len;
    3112:	4a0b      	ldr	r2, [pc, #44]	; (3140 <rx_event+0xac>)
				rx_queue_transfer(i);
    3114:	4628      	mov	r0, r5
				rx_count[ii] = count + len;
    3116:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    311a:	6813      	ldr	r3, [r2, #0]
    311c:	4423      	add	r3, r4
}
    311e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
    3122:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
    3124:	f7ff bf86 	b.w	3034 <rx_queue_transfer>
    3128:	20008e90 	.word	0x20008e90
    312c:	20008e9d 	.word	0x20008e9d
    3130:	20008e9e 	.word	0x20008e9e
    3134:	20008e28 	.word	0x20008e28
    3138:	20008e48 	.word	0x20008e48
    313c:	20008e38 	.word	0x20008e38
    3140:	20008e24 	.word	0x20008e24
    3144:	20200080 	.word	0x20200080

00003148 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    3148:	4b1d      	ldr	r3, [pc, #116]	; (31c0 <usb_serial_flush_callback+0x78>)
    314a:	781a      	ldrb	r2, [r3, #0]
    314c:	2a00      	cmp	r2, #0
    314e:	d136      	bne.n	31be <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
    3150:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    3154:	4a1b      	ldr	r2, [pc, #108]	; (31c4 <usb_serial_flush_callback+0x7c>)
    3156:	7812      	ldrb	r2, [r2, #0]
    3158:	b38a      	cbz	r2, 31be <usb_serial_flush_callback+0x76>
{
    315a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
    315e:	4d1a      	ldr	r5, [pc, #104]	; (31c8 <usb_serial_flush_callback+0x80>)
    3160:	882a      	ldrh	r2, [r5, #0]
    3162:	b352      	cbz	r2, 31ba <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    3164:	4e19      	ldr	r6, [pc, #100]	; (31cc <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    3166:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    316a:	4f19      	ldr	r7, [pc, #100]	; (31d0 <usb_serial_flush_callback+0x88>)
    316c:	7832      	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    316e:	4c19      	ldr	r4, [pc, #100]	; (31d4 <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    3170:	eb07 1742 	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    3174:	eb04 24c2 	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    3178:	4642      	mov	r2, r8
    317a:	4638      	mov	r0, r7
    317c:	4621      	mov	r1, r4
    317e:	f7ff fee5 	bl	2f4c <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    3182:	eb04 0208 	add.w	r2, r4, r8
	asm("dsb");
    3186:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    318a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    318e:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    3192:	3420      	adds	r4, #32
	} while (location < end_addr);
    3194:	42a2      	cmp	r2, r4
    3196:	d8fa      	bhi.n	318e <usb_serial_flush_callback+0x46>
	asm("dsb");
    3198:	f3bf 8f4f 	dsb	sy
	asm("isb");
    319c:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    31a0:	2004      	movs	r0, #4
    31a2:	4639      	mov	r1, r7
    31a4:	f7ff feea 	bl	2f7c <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    31a8:	7833      	ldrb	r3, [r6, #0]
    31aa:	3301      	adds	r3, #1
    31ac:	b2db      	uxtb	r3, r3
    31ae:	2b03      	cmp	r3, #3
    31b0:	bf88      	it	hi
    31b2:	2300      	movhi	r3, #0
    31b4:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    31b6:	2300      	movs	r3, #0
    31b8:	802b      	strh	r3, [r5, #0]
}
    31ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    31be:	4770      	bx	lr
    31c0:	20008ea2 	.word	0x20008ea2
    31c4:	20008ea4 	.word	0x20008ea4
    31c8:	20008e92 	.word	0x20008e92
    31cc:	20008ea1 	.word	0x20008ea1
    31d0:	20008800 	.word	0x20008800
    31d4:	20201080 	.word	0x20201080

000031d8 <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
    31d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    31dc:	b085      	sub	sp, #20
	while (size > 0) {
    31de:	e9cd 1001 	strd	r1, r0, [sp, #4]
    31e2:	2900      	cmp	r1, #0
    31e4:	f000 80bf 	beq.w	3366 <usb_serial_write.part.0+0x18e>
	uint32_t sent=0;
    31e8:	2300      	movs	r3, #0
    31ea:	4c60      	ldr	r4, [pc, #384]	; (336c <usb_serial_write.part.0+0x194>)
    31ec:	f8df 8198 	ldr.w	r8, [pc, #408]	; 3388 <usb_serial_write.part.0+0x1b0>
    31f0:	f8df a198 	ldr.w	sl, [pc, #408]	; 338c <usb_serial_write.part.0+0x1b4>
				wait_begin_at = systick_millis_count;
    31f4:	4f5e      	ldr	r7, [pc, #376]	; (3370 <usb_serial_write.part.0+0x198>)
	uint32_t sent=0;
    31f6:	9300      	str	r3, [sp, #0]
		tx_noautoflush = 1;
    31f8:	2301      	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    31fa:	4a5e      	ldr	r2, [pc, #376]	; (3374 <usb_serial_write.part.0+0x19c>)
		tx_noautoflush = 1;
    31fc:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    31fe:	4b5e      	ldr	r3, [pc, #376]	; (3378 <usb_serial_write.part.0+0x1a0>)
    3200:	7819      	ldrb	r1, [r3, #0]
		while (!tx_available) {
    3202:	f8b8 3000 	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
    3206:	eb02 1941 	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
    320a:	2b00      	cmp	r3, #0
    320c:	f040 80a7 	bne.w	335e <usb_serial_write.part.0+0x186>
		uint32_t wait_begin_at=0;
    3210:	461e      	mov	r6, r3
		int waiting=0;
    3212:	461d      	mov	r5, r3
			tx_noautoflush = 0;
    3214:	469b      	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
    3216:	4648      	mov	r0, r9
    3218:	f7ff fed2 	bl	2fc0 <usb_transfer_status>
			if (!(status & 0x80)) {
    321c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    3220:	f000 808c 	beq.w	333c <usb_serial_write.part.0+0x164>
			asm("dsb" ::: "memory");
    3224:	f3bf 8f4f 	dsb	sy
			if (transmit_previous_timeout) return sent;
    3228:	f89a 3000 	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
    322c:	f884 b000 	strb.w	fp, [r4]
			if (!waiting) {
    3230:	b905      	cbnz	r5, 3234 <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
    3232:	683e      	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
    3234:	2b00      	cmp	r3, #0
    3236:	d17d      	bne.n	3334 <usb_serial_write.part.0+0x15c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    3238:	683b      	ldr	r3, [r7, #0]
    323a:	1b9b      	subs	r3, r3, r6
    323c:	2b78      	cmp	r3, #120	; 0x78
    323e:	f200 8087 	bhi.w	3350 <usb_serial_write.part.0+0x178>
			if (!usb_configuration) return sent;
    3242:	4b4e      	ldr	r3, [pc, #312]	; (337c <usb_serial_write.part.0+0x1a4>)
    3244:	781b      	ldrb	r3, [r3, #0]
    3246:	2b00      	cmp	r3, #0
    3248:	d074      	beq.n	3334 <usb_serial_write.part.0+0x15c>
			yield();
    324a:	f000 fa9d 	bl	3788 <yield>
			tx_noautoflush = 1;
    324e:	2201      	movs	r2, #1
		while (!tx_available) {
    3250:	f8b8 3000 	ldrh.w	r3, [r8]
    3254:	4615      	mov	r5, r2
			tx_noautoflush = 1;
    3256:	7022      	strb	r2, [r4, #0]
		while (!tx_available) {
    3258:	2b00      	cmp	r3, #0
    325a:	d0dc      	beq.n	3216 <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    325c:	4a46      	ldr	r2, [pc, #280]	; (3378 <usb_serial_write.part.0+0x1a0>)
    325e:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    3262:	7811      	ldrb	r1, [r2, #0]
    3264:	461a      	mov	r2, r3
    3266:	eb00 20c1 	add.w	r0, r0, r1, lsl #11
    326a:	4d45      	ldr	r5, [pc, #276]	; (3380 <usb_serial_write.part.0+0x1a8>)
    326c:	02c9      	lsls	r1, r1, #11
    326e:	4428      	add	r0, r5
		if (size >= tx_available) {
    3270:	9d01      	ldr	r5, [sp, #4]
    3272:	4295      	cmp	r5, r2
    3274:	d217      	bcs.n	32a6 <usb_serial_write.part.0+0xce>
			memcpy(txdata, data, size);
    3276:	9303      	str	r3, [sp, #12]
    3278:	e9dd 5101 	ldrd	r5, r1, [sp, #4]
    327c:	462a      	mov	r2, r5
    327e:	f7fe ff7d 	bl	217c <memcpy>
			tx_available -= size;
    3282:	9b03      	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    3284:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
    3288:	1b5b      	subs	r3, r3, r5
    328a:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    328e:	4b3d      	ldr	r3, [pc, #244]	; (3384 <usb_serial_write.part.0+0x1ac>)
    3290:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
    3294:	f3bf 8f4f 	dsb	sy
			sent += size;
    3298:	9800      	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
    329a:	2300      	movs	r3, #0
			sent += size;
    329c:	4428      	add	r0, r5
		tx_noautoflush = 0;
    329e:	7023      	strb	r3, [r4, #0]
}
    32a0:	b005      	add	sp, #20
    32a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    32a6:	4b36      	ldr	r3, [pc, #216]	; (3380 <usb_serial_write.part.0+0x1a8>)
    32a8:	18cd      	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
    32aa:	9902      	ldr	r1, [sp, #8]
    32ac:	f7fe ff66 	bl	217c <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    32b0:	2300      	movs	r3, #0
    32b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
    32b6:	4629      	mov	r1, r5
    32b8:	4648      	mov	r0, r9
    32ba:	f7ff fe47 	bl	2f4c <usb_prepare_transfer>
	asm("dsb");
    32be:	f3bf 8f4f 	dsb	sy
    32c2:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    32c6:	f505 6300 	add.w	r3, r5, #2048	; 0x800
    32ca:	4293      	cmp	r3, r2
    32cc:	bf34      	ite	cc
    32ce:	2301      	movcc	r3, #1
    32d0:	2340      	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    32d2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    32d6:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    32da:	f8c2 5f70 	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
    32de:	3520      	adds	r5, #32
	} while (location < end_addr);
    32e0:	42ab      	cmp	r3, r5
    32e2:	d1fa      	bne.n	32da <usb_serial_write.part.0+0x102>
	asm("dsb");
    32e4:	f3bf 8f4f 	dsb	sy
	asm("isb");
    32e8:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    32ec:	2004      	movs	r0, #4
    32ee:	4649      	mov	r1, r9
    32f0:	f7ff fe44 	bl	2f7c <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    32f4:	4a20      	ldr	r2, [pc, #128]	; (3378 <usb_serial_write.part.0+0x1a0>)
    32f6:	7813      	ldrb	r3, [r2, #0]
    32f8:	3301      	adds	r3, #1
    32fa:	b2db      	uxtb	r3, r3
    32fc:	2b03      	cmp	r3, #3
    32fe:	bf84      	itt	hi
    3300:	2300      	movhi	r3, #0
    3302:	4a1d      	ldrhi	r2, [pc, #116]	; (3378 <usb_serial_write.part.0+0x1a0>)
    3304:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    3306:	f8b8 3000 	ldrh.w	r3, [r8]
    330a:	9a01      	ldr	r2, [sp, #4]
    330c:	1ad1      	subs	r1, r2, r3
			sent += tx_available;
    330e:	9a00      	ldr	r2, [sp, #0]
    3310:	441a      	add	r2, r3
			size -= tx_available;
    3312:	9101      	str	r1, [sp, #4]
			sent += tx_available;
    3314:	9200      	str	r2, [sp, #0]
			data += tx_available;
    3316:	9a02      	ldr	r2, [sp, #8]
    3318:	441a      	add	r2, r3
			tx_available = 0;
    331a:	2300      	movs	r3, #0
			data += tx_available;
    331c:	9202      	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
    331e:	4a19      	ldr	r2, [pc, #100]	; (3384 <usb_serial_write.part.0+0x1ac>)
			tx_available = 0;
    3320:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
    3324:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    3328:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
    332c:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
    332e:	2900      	cmp	r1, #0
    3330:	f47f af62 	bne.w	31f8 <usb_serial_write.part.0+0x20>
	return sent;
    3334:	9800      	ldr	r0, [sp, #0]
}
    3336:	b005      	add	sp, #20
    3338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
    333c:	f44f 6200 	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    3340:	4b0d      	ldr	r3, [pc, #52]	; (3378 <usb_serial_write.part.0+0x1a0>)
				transmit_previous_timeout = 0;
    3342:	f88a 0000 	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    3346:	7819      	ldrb	r1, [r3, #0]
				break;
    3348:	4613      	mov	r3, r2
				tx_available = TX_SIZE;
    334a:	f8a8 2000 	strh.w	r2, [r8]
				break;
    334e:	e78a      	b.n	3266 <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
    3350:	2301      	movs	r3, #1
				return sent;
    3352:	9800      	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
    3354:	f88a 3000 	strb.w	r3, [sl]
}
    3358:	b005      	add	sp, #20
    335a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    335e:	461a      	mov	r2, r3
    3360:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    3364:	e77f      	b.n	3266 <usb_serial_write.part.0+0x8e>
	while (size > 0) {
    3366:	9801      	ldr	r0, [sp, #4]
	return sent;
    3368:	e7e5      	b.n	3336 <usb_serial_write.part.0+0x15e>
    336a:	bf00      	nop
    336c:	20008ea2 	.word	0x20008ea2
    3370:	20008e6c 	.word	0x20008e6c
    3374:	20008800 	.word	0x20008800
    3378:	20008ea1 	.word	0x20008ea1
    337c:	20008ea4 	.word	0x20008ea4
    3380:	20201080 	.word	0x20201080
    3384:	402e0000 	.word	0x402e0000
    3388:	20008e92 	.word	0x20008e92
    338c:	20008ea0 	.word	0x20008ea0

00003390 <usb_serial_reset>:
}
    3390:	4770      	bx	lr
    3392:	bf00      	nop

00003394 <usb_serial_configure>:
	if (usb_high_speed) {
    3394:	4b2d      	ldr	r3, [pc, #180]	; (344c <usb_serial_configure+0xb8>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    3396:	2100      	movs	r1, #0
    3398:	2280      	movs	r2, #128	; 0x80
    339a:	482d      	ldr	r0, [pc, #180]	; (3450 <usb_serial_configure+0xbc>)
{
    339c:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    339e:	781b      	ldrb	r3, [r3, #0]
	tx_head = 0;
    33a0:	2400      	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    33a2:	4d2c      	ldr	r5, [pc, #176]	; (3454 <usb_serial_configure+0xc0>)
	if (usb_high_speed) {
    33a4:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
    33a6:	4e2c      	ldr	r6, [pc, #176]	; (3458 <usb_serial_configure+0xc4>)
	if (usb_high_speed) {
    33a8:	bf0c      	ite	eq
    33aa:	2340      	moveq	r3, #64	; 0x40
    33ac:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    33b0:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    33b2:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    33b4:	f002 fd30 	bl	5e18 <memset>
	tx_head = 0;
    33b8:	4a28      	ldr	r2, [pc, #160]	; (345c <usb_serial_configure+0xc8>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    33ba:	4621      	mov	r1, r4
	tx_available = 0;
    33bc:	4b28      	ldr	r3, [pc, #160]	; (3460 <usb_serial_configure+0xcc>)
	tx_head = 0;
    33be:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    33c0:	f44f 7280 	mov.w	r2, #256	; 0x100
    33c4:	4827      	ldr	r0, [pc, #156]	; (3464 <usb_serial_configure+0xd0>)
	tx_available = 0;
    33c6:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    33c8:	f002 fd26 	bl	5e18 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    33cc:	4a26      	ldr	r2, [pc, #152]	; (3468 <usb_serial_configure+0xd4>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    33ce:	2110      	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
    33d0:	4b26      	ldr	r3, [pc, #152]	; (346c <usb_serial_configure+0xd8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    33d2:	2002      	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
    33d4:	e9c2 4400 	strd	r4, r4, [r2]
    33d8:	e9c2 4402 	strd	r4, r4, [r2, #8]
	rx_head = 0;
    33dc:	4a24      	ldr	r2, [pc, #144]	; (3470 <usb_serial_configure+0xdc>)
	memset(rx_index, 0, sizeof(rx_index));
    33de:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
    33e2:	7014      	strb	r4, [r2, #0]
	rx_available = 0;
    33e4:	4a23      	ldr	r2, [pc, #140]	; (3474 <usb_serial_configure+0xe0>)
	memset(rx_index, 0, sizeof(rx_index));
    33e6:	e9c3 4402 	strd	r4, r4, [r3, #8]
	rx_tail = 0;
    33ea:	4b23      	ldr	r3, [pc, #140]	; (3478 <usb_serial_configure+0xe4>)
    33ec:	701c      	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    33ee:	4623      	mov	r3, r4
	rx_available = 0;
    33f0:	6014      	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    33f2:	4622      	mov	r2, r4
    33f4:	f7ff fd78 	bl	2ee8 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    33f8:	4622      	mov	r2, r4
    33fa:	8831      	ldrh	r1, [r6, #0]
    33fc:	2003      	movs	r0, #3
    33fe:	4b1f      	ldr	r3, [pc, #124]	; (347c <usb_serial_configure+0xe8>)
    3400:	f7ff fd40 	bl	2e84 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    3404:	4623      	mov	r3, r4
    3406:	2201      	movs	r2, #1
    3408:	8829      	ldrh	r1, [r5, #0]
    340a:	2004      	movs	r0, #4
    340c:	f7ff fd6c 	bl	2ee8 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    3410:	4620      	mov	r0, r4
    3412:	3401      	adds	r4, #1
    3414:	f7ff fe0e 	bl	3034 <rx_queue_transfer>
    3418:	2c08      	cmp	r4, #8
    341a:	d1f9      	bne.n	3410 <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
    341c:	4b18      	ldr	r3, [pc, #96]	; (3480 <usb_serial_configure+0xec>)
    341e:	2100      	movs	r1, #0
	USB1_GPTIMER0LD = microseconds - 1;
    3420:	224a      	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
    3422:	4818      	ldr	r0, [pc, #96]	; (3484 <usb_serial_configure+0xf0>)
    3424:	4c18      	ldr	r4, [pc, #96]	; (3488 <usb_serial_configure+0xf4>)
    3426:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    3428:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    342c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    3430:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    3434:	4915      	ldr	r1, [pc, #84]	; (348c <usb_serial_configure+0xf8>)
	USB1_USBINTR |= USB_USBINTR_TIE0;
    3436:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    343a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    343e:	b121      	cbz	r1, 344a <usb_serial_configure+0xb6>
    3440:	4a13      	ldr	r2, [pc, #76]	; (3490 <usb_serial_configure+0xfc>)
    3442:	7813      	ldrb	r3, [r2, #0]
    3444:	f043 0301 	orr.w	r3, r3, #1
    3448:	7013      	strb	r3, [r2, #0]
}
    344a:	bd70      	pop	{r4, r5, r6, pc}
    344c:	20008ea5 	.word	0x20008ea5
    3450:	20008800 	.word	0x20008800
    3454:	20008e94 	.word	0x20008e94
    3458:	20008e90 	.word	0x20008e90
    345c:	20008ea1 	.word	0x20008ea1
    3460:	20008e92 	.word	0x20008e92
    3464:	20008700 	.word	0x20008700
    3468:	20008e28 	.word	0x20008e28
    346c:	20008e38 	.word	0x20008e38
    3470:	20008e9d 	.word	0x20008e9d
    3474:	20008e24 	.word	0x20008e24
    3478:	20008e9e 	.word	0x20008e9e
    347c:	00003095 	.word	0x00003095
    3480:	402e0000 	.word	0x402e0000
    3484:	20008e80 	.word	0x20008e80
    3488:	00003149 	.word	0x00003149
    348c:	00000000 	.word	0x00000000
    3490:	20008ea7 	.word	0x20008ea7

00003494 <usb_serial_read>:
{
    3494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    3498:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    349c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	uint32_t tail = rx_tail;
    34a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 356c <usb_serial_read+0xd8>
{
    34a4:	b083      	sub	sp, #12
	NVIC_DISABLE_IRQ(IRQ_USB1);
    34a6:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	while (count < size && tail != rx_head) {
    34aa:	468b      	mov	fp, r1
	uint32_t tail = rx_tail;
    34ac:	f89a 4000 	ldrb.w	r4, [sl]
	while (count < size && tail != rx_head) {
    34b0:	2900      	cmp	r1, #0
    34b2:	d04f      	beq.n	3554 <usb_serial_read+0xc0>
    34b4:	4680      	mov	r8, r0
    34b6:	b2e4      	uxtb	r4, r4
	uint32_t count=0;
    34b8:	2700      	movs	r7, #0
		uint32_t avail = rx_count[i] - rx_index[i];
    34ba:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 3570 <usb_serial_read+0xdc>
	while (count < size && tail != rx_head) {
    34be:	4b26      	ldr	r3, [pc, #152]	; (3558 <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    34c0:	ebab 0207 	sub.w	r2, fp, r7
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    34c4:	4925      	ldr	r1, [pc, #148]	; (355c <usb_serial_read+0xc8>)
	while (count < size && tail != rx_head) {
    34c6:	781b      	ldrb	r3, [r3, #0]
    34c8:	42a3      	cmp	r3, r4
		if (++tail > RX_NUM) tail = 0;
    34ca:	f104 0401 	add.w	r4, r4, #1
	while (count < size && tail != rx_head) {
    34ce:	d03f      	beq.n	3550 <usb_serial_read+0xbc>
		if (++tail > RX_NUM) tail = 0;
    34d0:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
    34d2:	4b23      	ldr	r3, [pc, #140]	; (3560 <usb_serial_read+0xcc>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    34d4:	4640      	mov	r0, r8
		if (++tail > RX_NUM) tail = 0;
    34d6:	bf28      	it	cs
    34d8:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    34da:	5d1e      	ldrb	r6, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    34dc:	f839 c016 	ldrh.w	ip, [r9, r6, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    34e0:	eb0c 2346 	add.w	r3, ip, r6, lsl #9
    34e4:	4419      	add	r1, r3
		uint32_t avail = rx_count[i] - rx_index[i];
    34e6:	4b1f      	ldr	r3, [pc, #124]	; (3564 <usb_serial_read+0xd0>)
    34e8:	f833 5016 	ldrh.w	r5, [r3, r6, lsl #1]
    34ec:	eba5 050c 	sub.w	r5, r5, ip
		if (avail > len) {
    34f0:	42aa      	cmp	r2, r5
    34f2:	d21c      	bcs.n	352e <usb_serial_read+0x9a>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    34f4:	eb0c 2c46 	add.w	ip, ip, r6, lsl #9
    34f8:	4918      	ldr	r1, [pc, #96]	; (355c <usb_serial_read+0xc8>)
			rx_available -= len;
    34fa:	4c1b      	ldr	r4, [pc, #108]	; (3568 <usb_serial_read+0xd4>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    34fc:	4461      	add	r1, ip
    34fe:	9201      	str	r2, [sp, #4]
    3500:	f7fe fe3c 	bl	217c <memcpy>
			rx_available -= len;
    3504:	6821      	ldr	r1, [r4, #0]
			rx_index[i] += len;
    3506:	f839 5016 	ldrh.w	r5, [r9, r6, lsl #1]
	return count;
    350a:	4658      	mov	r0, fp
			rx_index[i] += len;
    350c:	9a01      	ldr	r2, [sp, #4]
			rx_available -= len;
    350e:	eba1 010b 	sub.w	r1, r1, fp
			rx_index[i] += len;
    3512:	442a      	add	r2, r5
			rx_available -= len;
    3514:	4439      	add	r1, r7
			rx_index[i] += len;
    3516:	f829 2016 	strh.w	r2, [r9, r6, lsl #1]
			rx_available -= len;
    351a:	6021      	str	r1, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
    351c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3520:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    3524:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
    3528:	b003      	add	sp, #12
    352a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    352e:	462a      	mov	r2, r5
			count += avail;
    3530:	442f      	add	r7, r5
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    3532:	f7fe fe23 	bl	217c <memcpy>
			rx_available -= avail;
    3536:	490c      	ldr	r1, [pc, #48]	; (3568 <usb_serial_read+0xd4>)
			rx_tail = tail;
    3538:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    353a:	4630      	mov	r0, r6
			rx_available -= avail;
    353c:	680a      	ldr	r2, [r1, #0]
			p += avail;
    353e:	44a8      	add	r8, r5
			rx_available -= avail;
    3540:	1b52      	subs	r2, r2, r5
    3542:	600a      	str	r2, [r1, #0]
			rx_tail = tail;
    3544:	f88a 3000 	strb.w	r3, [sl]
			rx_queue_transfer(i);
    3548:	f7ff fd74 	bl	3034 <rx_queue_transfer>
	while (count < size && tail != rx_head) {
    354c:	45bb      	cmp	fp, r7
    354e:	d8b6      	bhi.n	34be <usb_serial_read+0x2a>
	return count;
    3550:	4638      	mov	r0, r7
    3552:	e7e3      	b.n	351c <usb_serial_read+0x88>
	while (count < size && tail != rx_head) {
    3554:	4608      	mov	r0, r1
    3556:	e7e1      	b.n	351c <usb_serial_read+0x88>
    3558:	20008e9d 	.word	0x20008e9d
    355c:	20200080 	.word	0x20200080
    3560:	20008e48 	.word	0x20008e48
    3564:	20008e28 	.word	0x20008e28
    3568:	20008e24 	.word	0x20008e24
    356c:	20008e9e 	.word	0x20008e9e
    3570:	20008e38 	.word	0x20008e38

00003574 <usb_serial_peekchar>:
	if (tail == rx_head) return -1;
    3574:	4b0b      	ldr	r3, [pc, #44]	; (35a4 <usb_serial_peekchar+0x30>)
	uint32_t tail = rx_tail;
    3576:	4a0c      	ldr	r2, [pc, #48]	; (35a8 <usb_serial_peekchar+0x34>)
    3578:	7812      	ldrb	r2, [r2, #0]
	if (tail == rx_head) return -1;
    357a:	7819      	ldrb	r1, [r3, #0]
	uint32_t tail = rx_tail;
    357c:	b2d3      	uxtb	r3, r2
	if (tail == rx_head) return -1;
    357e:	428a      	cmp	r2, r1
    3580:	d00d      	beq.n	359e <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    3582:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    3584:	4809      	ldr	r0, [pc, #36]	; (35ac <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    3586:	4a0a      	ldr	r2, [pc, #40]	; (35b0 <usb_serial_peekchar+0x3c>)
	if (++tail > RX_NUM) tail = 0;
    3588:	2b09      	cmp	r3, #9
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    358a:	490a      	ldr	r1, [pc, #40]	; (35b4 <usb_serial_peekchar+0x40>)
	if (++tail > RX_NUM) tail = 0;
    358c:	bf28      	it	cs
    358e:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    3590:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    3592:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    3596:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    359a:	5c58      	ldrb	r0, [r3, r1]
    359c:	4770      	bx	lr
	if (tail == rx_head) return -1;
    359e:	f04f 30ff 	mov.w	r0, #4294967295
}
    35a2:	4770      	bx	lr
    35a4:	20008e9d 	.word	0x20008e9d
    35a8:	20008e9e 	.word	0x20008e9e
    35ac:	20008e48 	.word	0x20008e48
    35b0:	20200080 	.word	0x20200080
    35b4:	20008e38 	.word	0x20008e38

000035b8 <usb_serial_available>:
	uint32_t n = rx_available;
    35b8:	4b04      	ldr	r3, [pc, #16]	; (35cc <usb_serial_available+0x14>)
{
    35ba:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
    35bc:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
    35be:	b10c      	cbz	r4, 35c4 <usb_serial_available+0xc>
}
    35c0:	4620      	mov	r0, r4
    35c2:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
    35c4:	f000 f8e0 	bl	3788 <yield>
}
    35c8:	4620      	mov	r0, r4
    35ca:	bd10      	pop	{r4, pc}
    35cc:	20008e24 	.word	0x20008e24

000035d0 <usb_serial_flush_input>:
{
    35d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    35d4:	4e14      	ldr	r6, [pc, #80]	; (3628 <usb_serial_flush_input+0x58>)
	while (tail != rx_head) {
    35d6:	4d15      	ldr	r5, [pc, #84]	; (362c <usb_serial_flush_input+0x5c>)
	uint32_t tail = rx_tail;
    35d8:	7833      	ldrb	r3, [r6, #0]
	while (tail != rx_head) {
    35da:	782a      	ldrb	r2, [r5, #0]
    35dc:	4293      	cmp	r3, r2
    35de:	d021      	beq.n	3624 <usb_serial_flush_input+0x54>
    35e0:	b2dc      	uxtb	r4, r3
    35e2:	f8df 9050 	ldr.w	r9, [pc, #80]	; 3634 <usb_serial_flush_input+0x64>
    35e6:	f8df b050 	ldr.w	fp, [pc, #80]	; 3638 <usb_serial_flush_input+0x68>
    35ea:	f8df 8050 	ldr.w	r8, [pc, #80]	; 363c <usb_serial_flush_input+0x6c>
    35ee:	4f10      	ldr	r7, [pc, #64]	; (3630 <usb_serial_flush_input+0x60>)
		if (++tail > RX_NUM) tail = 0;
    35f0:	3401      	adds	r4, #1
    35f2:	2c08      	cmp	r4, #8
		rx_tail = tail;
    35f4:	fa5f fa84 	uxtb.w	sl, r4
		if (++tail > RX_NUM) tail = 0;
    35f8:	d901      	bls.n	35fe <usb_serial_flush_input+0x2e>
    35fa:	2400      	movs	r4, #0
    35fc:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    35fe:	f819 0004 	ldrb.w	r0, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    3602:	f8db 3000 	ldr.w	r3, [fp]
    3606:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
    360a:	f837 1010 	ldrh.w	r1, [r7, r0, lsl #1]
    360e:	1a52      	subs	r2, r2, r1
    3610:	1a9b      	subs	r3, r3, r2
    3612:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    3616:	f7ff fd0d 	bl	3034 <rx_queue_transfer>
		rx_tail = tail;
    361a:	f886 a000 	strb.w	sl, [r6]
	while (tail != rx_head) {
    361e:	782b      	ldrb	r3, [r5, #0]
    3620:	42a3      	cmp	r3, r4
    3622:	d1e5      	bne.n	35f0 <usb_serial_flush_input+0x20>
}
    3624:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3628:	20008e9e 	.word	0x20008e9e
    362c:	20008e9d 	.word	0x20008e9d
    3630:	20008e38 	.word	0x20008e38
    3634:	20008e48 	.word	0x20008e48
    3638:	20008e24 	.word	0x20008e24
    363c:	20008e28 	.word	0x20008e28

00003640 <usb_serial_getchar>:
{
    3640:	b500      	push	{lr}
    3642:	b083      	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
    3644:	2101      	movs	r1, #1
    3646:	f10d 0007 	add.w	r0, sp, #7
    364a:	f7ff ff23 	bl	3494 <usb_serial_read>
    364e:	b120      	cbz	r0, 365a <usb_serial_getchar+0x1a>
    3650:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
    3654:	b003      	add	sp, #12
    3656:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
    365a:	f04f 30ff 	mov.w	r0, #4294967295
    365e:	e7f9      	b.n	3654 <usb_serial_getchar+0x14>

00003660 <usb_serial_putchar>:
	if (!usb_configuration) return 0;
    3660:	4b09      	ldr	r3, [pc, #36]	; (3688 <usb_serial_putchar+0x28>)
{
    3662:	b500      	push	{lr}
    3664:	b083      	sub	sp, #12
	if (!usb_configuration) return 0;
    3666:	781b      	ldrb	r3, [r3, #0]
{
    3668:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!usb_configuration) return 0;
    366c:	b13b      	cbz	r3, 367e <usb_serial_putchar+0x1e>
    366e:	2101      	movs	r1, #1
    3670:	f10d 0007 	add.w	r0, sp, #7
    3674:	f7ff fdb0 	bl	31d8 <usb_serial_write.part.0>
}
    3678:	b003      	add	sp, #12
    367a:	f85d fb04 	ldr.w	pc, [sp], #4
    367e:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    3682:	b003      	add	sp, #12
    3684:	f85d fb04 	ldr.w	pc, [sp], #4
    3688:	20008ea4 	.word	0x20008ea4

0000368c <usb_serial_write>:
	if (!usb_configuration) return 0;
    368c:	4b04      	ldr	r3, [pc, #16]	; (36a0 <usb_serial_write+0x14>)
    368e:	781b      	ldrb	r3, [r3, #0]
    3690:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    3694:	b10b      	cbz	r3, 369a <usb_serial_write+0xe>
    3696:	f7ff bd9f 	b.w	31d8 <usb_serial_write.part.0>
}
    369a:	4610      	mov	r0, r2
    369c:	4770      	bx	lr
    369e:	bf00      	nop
    36a0:	20008ea4 	.word	0x20008ea4

000036a4 <usb_serial_write_buffer_free>:
{
    36a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    36a8:	2400      	movs	r4, #0
	tx_noautoflush = 1;
    36aa:	f8df 8044 	ldr.w	r8, [pc, #68]	; 36f0 <usb_serial_write_buffer_free+0x4c>
    36ae:	2301      	movs	r3, #1
    36b0:	4d0d      	ldr	r5, [pc, #52]	; (36e8 <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    36b2:	4627      	mov	r7, r4
    36b4:	4e0d      	ldr	r6, [pc, #52]	; (36ec <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
    36b6:	f888 3000 	strb.w	r3, [r8]
		if (i == tx_head) continue;
    36ba:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    36bc:	4628      	mov	r0, r5
	for (uint32_t i=0; i < TX_NUM; i++) {
    36be:	3520      	adds	r5, #32
		if (i == tx_head) continue;
    36c0:	42a3      	cmp	r3, r4
	for (uint32_t i=0; i < TX_NUM; i++) {
    36c2:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    36c6:	d005      	beq.n	36d4 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    36c8:	f7ff fc7a 	bl	2fc0 <usb_transfer_status>
    36cc:	0603      	lsls	r3, r0, #24
    36ce:	bf58      	it	pl
    36d0:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    36d4:	2c04      	cmp	r4, #4
    36d6:	d1f0      	bne.n	36ba <usb_serial_write_buffer_free+0x16>
	asm("dsb" ::: "memory");
    36d8:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    36dc:	2300      	movs	r3, #0
}
    36de:	4638      	mov	r0, r7
	tx_noautoflush = 0;
    36e0:	f888 3000 	strb.w	r3, [r8]
}
    36e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    36e8:	20008800 	.word	0x20008800
    36ec:	20008ea1 	.word	0x20008ea1
    36f0:	20008ea2 	.word	0x20008ea2

000036f4 <usb_serial_flush_output>:
{
    36f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    36f8:	4b1d      	ldr	r3, [pc, #116]	; (3770 <usb_serial_flush_output+0x7c>)
    36fa:	781b      	ldrb	r3, [r3, #0]
    36fc:	b113      	cbz	r3, 3704 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    36fe:	4d1d      	ldr	r5, [pc, #116]	; (3774 <usb_serial_flush_output+0x80>)
    3700:	882a      	ldrh	r2, [r5, #0]
    3702:	b90a      	cbnz	r2, 3708 <usb_serial_flush_output+0x14>
}
    3704:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	transfer_t *xfer = tx_transfer + tx_head;
    3708:	4e1b      	ldr	r6, [pc, #108]	; (3778 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    370a:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    370e:	491b      	ldr	r1, [pc, #108]	; (377c <usb_serial_flush_output+0x88>)
    3710:	7833      	ldrb	r3, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    3712:	464a      	mov	r2, r9
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    3714:	4c1a      	ldr	r4, [pc, #104]	; (3780 <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    3716:	eb01 1843 	add.w	r8, r1, r3, lsl #5
	tx_noautoflush = 1;
    371a:	4f1a      	ldr	r7, [pc, #104]	; (3784 <usb_serial_flush_output+0x90>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    371c:	eb04 24c3 	add.w	r4, r4, r3, lsl #11
	tx_noautoflush = 1;
    3720:	2301      	movs	r3, #1
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    3722:	4640      	mov	r0, r8
	tx_noautoflush = 1;
    3724:	703b      	strb	r3, [r7, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    3726:	4621      	mov	r1, r4
    3728:	2300      	movs	r3, #0
    372a:	f7ff fc0f 	bl	2f4c <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    372e:	eb04 0209 	add.w	r2, r4, r9
	asm("dsb");
    3732:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    3736:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    373a:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    373e:	3420      	adds	r4, #32
	} while (location < end_addr);
    3740:	42a2      	cmp	r2, r4
    3742:	d8fa      	bhi.n	373a <usb_serial_flush_output+0x46>
	asm("dsb");
    3744:	f3bf 8f4f 	dsb	sy
	asm("isb");
    3748:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    374c:	2004      	movs	r0, #4
    374e:	4641      	mov	r1, r8
    3750:	f7ff fc14 	bl	2f7c <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    3754:	7833      	ldrb	r3, [r6, #0]
    3756:	3301      	adds	r3, #1
    3758:	b2db      	uxtb	r3, r3
    375a:	2b03      	cmp	r3, #3
    375c:	bf88      	it	hi
    375e:	2300      	movhi	r3, #0
    3760:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    3762:	2300      	movs	r3, #0
    3764:	802b      	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
    3766:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    376a:	703b      	strb	r3, [r7, #0]
}
    376c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3770:	20008ea4 	.word	0x20008ea4
    3774:	20008e92 	.word	0x20008e92
    3778:	20008ea1 	.word	0x20008ea1
    377c:	20008800 	.word	0x20008800
    3780:	20201080 	.word	0x20201080
    3784:	20008ea2 	.word	0x20008ea2

00003788 <yield>:
uint8_t yield_active_check_flags = 0;


void yield(void) __attribute__ ((weak));
void yield(void)
{
    3788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t check_flags = yield_active_check_flags;
    378c:	4b2d      	ldr	r3, [pc, #180]	; (3844 <yield+0xbc>)
    378e:	781e      	ldrb	r6, [r3, #0]
	if (!check_flags) return;	// nothing to do
    3790:	b166      	cbz	r6, 37ac <yield+0x24>

	// TODO: do nothing if called from interrupt

	static uint8_t running=0;
	if (running) return; // TODO: does this need to be atomic?
    3792:	4f2d      	ldr	r7, [pc, #180]	; (3848 <yield+0xc0>)
    3794:	783b      	ldrb	r3, [r7, #0]
    3796:	b94b      	cbnz	r3, 37ac <yield+0x24>
	running = 1;
    3798:	2301      	movs	r3, #1

	// USB Serial - Add hack to minimize impact...
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    379a:	07f1      	lsls	r1, r6, #31
	running = 1;
    379c:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    379e:	d443      	bmi.n	3828 <yield+0xa0>
		if (SerialUSB2.available()) serialEventUSB2();
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    37a0:	07b2      	lsls	r2, r6, #30
    37a2:	d426      	bmi.n	37f2 <yield+0x6a>
		HardwareSerialIMXRT::processSerialEventsList();
	}

	running = 0;
    37a4:	2300      	movs	r3, #0
    37a6:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_EVENT_RESPONDER) {
    37a8:	0773      	lsls	r3, r6, #29
    37aa:	d401      	bmi.n	37b0 <yield+0x28>
		EventResponder::runFromYield();
	}
};
    37ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    37b0:	4b26      	ldr	r3, [pc, #152]	; (384c <yield+0xc4>)
    37b2:	681a      	ldr	r2, [r3, #0]
    37b4:	2a00      	cmp	r2, #0
    37b6:	d0f9      	beq.n	37ac <yield+0x24>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    37b8:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    37bc:	2a00      	cmp	r2, #0
    37be:	d1f5      	bne.n	37ac <yield+0x24>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    37c0:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    37c4:	b672      	cpsid	i
		EventResponder *first = firstYield;
    37c6:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    37c8:	2800      	cmp	r0, #0
    37ca:	d034      	beq.n	3836 <yield+0xae>
		if (runningFromYield) {
    37cc:	4c20      	ldr	r4, [pc, #128]	; (3850 <yield+0xc8>)
    37ce:	7821      	ldrb	r1, [r4, #0]
    37d0:	2900      	cmp	r1, #0
    37d2:	d130      	bne.n	3836 <yield+0xae>
		runningFromYield = true;
    37d4:	2201      	movs	r2, #1
    37d6:	7022      	strb	r2, [r4, #0]
		firstYield = first->_next;
    37d8:	6942      	ldr	r2, [r0, #20]
    37da:	601a      	str	r2, [r3, #0]
		if (firstYield) {
    37dc:	2a00      	cmp	r2, #0
    37de:	d02e      	beq.n	383e <yield+0xb6>
			firstYield->_prev = nullptr;
    37e0:	6191      	str	r1, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    37e2:	b905      	cbnz	r5, 37e6 <yield+0x5e>
    37e4:	b662      	cpsie	i
		first->_triggered = false;
    37e6:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    37e8:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    37ea:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    37ec:	4798      	blx	r3
		runningFromYield = false;
    37ee:	7025      	strb	r5, [r4, #0]
    37f0:	e7dc      	b.n	37ac <yield+0x24>

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    37f2:	f8df 8064 	ldr.w	r8, [pc, #100]	; 3858 <yield+0xd0>
    37f6:	f898 3000 	ldrb.w	r3, [r8]
    37fa:	2b00      	cmp	r3, #0
    37fc:	d0d2      	beq.n	37a4 <yield+0x1c>
    37fe:	2500      	movs	r5, #0
    3800:	f8df 9058 	ldr.w	r9, [pc, #88]	; 385c <yield+0xd4>
    3804:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    3806:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    380a:	3501      	adds	r5, #1
	static HardwareSerialIMXRT 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    380c:	6823      	ldr	r3, [r4, #0]
    380e:	4620      	mov	r0, r4
    3810:	691b      	ldr	r3, [r3, #16]
    3812:	4798      	blx	r3
    3814:	b110      	cbz	r0, 381c <yield+0x94>
    3816:	6963      	ldr	r3, [r4, #20]
    3818:	689b      	ldr	r3, [r3, #8]
    381a:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    381c:	f898 2000 	ldrb.w	r2, [r8]
    3820:	b2eb      	uxtb	r3, r5
    3822:	429a      	cmp	r2, r3
    3824:	d8ef      	bhi.n	3806 <yield+0x7e>
    3826:	e7bd      	b.n	37a4 <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    3828:	f7ff fec6 	bl	35b8 <usb_serial_available>
		if (Serial.available()) serialEvent();
    382c:	2800      	cmp	r0, #0
    382e:	d0b7      	beq.n	37a0 <yield+0x18>
    3830:	f3af 8000 	nop.w
    3834:	e7b4      	b.n	37a0 <yield+0x18>
		if (doit) __enable_irq();
    3836:	2d00      	cmp	r5, #0
    3838:	d1b8      	bne.n	37ac <yield+0x24>
    383a:	b662      	cpsie	i
    383c:	e7b6      	b.n	37ac <yield+0x24>
			lastYield = nullptr;
    383e:	4b05      	ldr	r3, [pc, #20]	; (3854 <yield+0xcc>)
    3840:	601a      	str	r2, [r3, #0]
    3842:	e7ce      	b.n	37e2 <yield+0x5a>
    3844:	20008ea7 	.word	0x20008ea7
    3848:	20008e9a 	.word	0x20008e9a
    384c:	200089b4 	.word	0x200089b4
    3850:	20008e97 	.word	0x20008e97
    3854:	200089c0 	.word	0x200089c0
    3858:	20008e98 	.word	0x20008e98
    385c:	200089c4 	.word	0x200089c4

00003860 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    3860:	b570      	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3862:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    3866:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    3868:	4c0c      	ldr	r4, [pc, #48]	; (389c <EventResponder::runFromInterrupt()+0x3c>)
    386a:	6820      	ldr	r0, [r4, #0]
		if (first) {
    386c:	b180      	cbz	r0, 3890 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    386e:	4e0c      	ldr	r6, [pc, #48]	; (38a0 <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    3870:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    3872:	6943      	ldr	r3, [r0, #20]
    3874:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    3876:	b173      	cbz	r3, 3896 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    3878:	619d      	str	r5, [r3, #24]
		if (doit) __enable_irq();
    387a:	b902      	cbnz	r2, 387e <EventResponder::runFromInterrupt()+0x1e>
    387c:	b662      	cpsie	i
			}
			enableInterrupts(irq);
			first->_triggered = false;
			(*(first->_function))(*first);
    387e:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    3880:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    3882:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3884:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    3888:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    388a:	6820      	ldr	r0, [r4, #0]
		if (first) {
    388c:	2800      	cmp	r0, #0
    388e:	d1f0      	bne.n	3872 <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    3890:	b902      	cbnz	r2, 3894 <EventResponder::runFromInterrupt()+0x34>
    3892:	b662      	cpsie	i
		} else {
			enableInterrupts(irq);
			break;
		}
	}
}
    3894:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    3896:	6033      	str	r3, [r6, #0]
    3898:	e7ef      	b.n	387a <EventResponder::runFromInterrupt()+0x1a>
    389a:	bf00      	nop
    389c:	200089bc 	.word	0x200089bc
    38a0:	200089b8 	.word	0x200089b8

000038a4 <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    38a4:	f7ff bfdc 	b.w	3860 <EventResponder::runFromInterrupt()>

000038a8 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    38a8:	4904      	ldr	r1, [pc, #16]	; (38bc <systick_isr+0x14>)
	systick_millis_count++;
    38aa:	4a05      	ldr	r2, [pc, #20]	; (38c0 <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
    38ac:	6849      	ldr	r1, [r1, #4]
    38ae:	4b05      	ldr	r3, [pc, #20]	; (38c4 <systick_isr+0x1c>)
    38b0:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    38b2:	6813      	ldr	r3, [r2, #0]
    38b4:	3301      	adds	r3, #1
    38b6:	6013      	str	r3, [r2, #0]
}
    38b8:	4770      	bx	lr
    38ba:	bf00      	nop
    38bc:	e0001000 	.word	0xe0001000
    38c0:	20008e6c 	.word	0x20008e6c
    38c4:	20008e68 	.word	0x20008e68

000038c8 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    38c8:	49a2      	ldr	r1, [pc, #648]	; (3b54 <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    38ca:	4ba3      	ldr	r3, [pc, #652]	; (3b58 <set_arm_clock+0x290>)
	if (frequency > 528000000) {
    38cc:	4288      	cmp	r0, r1
{
    38ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
    38d2:	4ca2      	ldr	r4, [pc, #648]	; (3b5c <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    38d4:	695e      	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    38d6:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    38d8:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
    38dc:	d91b      	bls.n	3916 <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    38de:	4ba0      	ldr	r3, [pc, #640]	; (3b60 <set_arm_clock+0x298>)
    38e0:	4298      	cmp	r0, r3
    38e2:	f240 8102 	bls.w	3aea <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    38e6:	1ac3      	subs	r3, r0, r3
    38e8:	499e      	ldr	r1, [pc, #632]	; (3b64 <set_arm_clock+0x29c>)
    38ea:	0a1b      	lsrs	r3, r3, #8
    38ec:	fba1 1303 	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    38f0:	f240 6127 	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    38f4:	09db      	lsrs	r3, r3, #7
    38f6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    38fa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    38fe:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    3902:	428b      	cmp	r3, r1
    3904:	bf28      	it	cs
    3906:	460b      	movcs	r3, r1
    3908:	f5a3 7748 	sub.w	r7, r3, #800	; 0x320
    390c:	4b96      	ldr	r3, [pc, #600]	; (3b68 <set_arm_clock+0x2a0>)
    390e:	fba3 3707 	umull	r3, r7, r3, r7
    3912:	08ff      	lsrs	r7, r7, #3
    3914:	e004      	b.n	3920 <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
    3916:	4f95      	ldr	r7, [pc, #596]	; (3b6c <set_arm_clock+0x2a4>)
    3918:	42b8      	cmp	r0, r7
    391a:	bf8c      	ite	hi
    391c:	270e      	movhi	r7, #14
    391e:	2706      	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    3920:	498d      	ldr	r1, [pc, #564]	; (3b58 <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    3922:	f008 091f 	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    3926:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    392a:	45b9      	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    392c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    3930:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    3934:	d20c      	bcs.n	3950 <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    3936:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    393a:	f5a1 21f8 	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    393e:	ea48 0807 	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
    3942:	f8c1 800c 	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    3946:	680b      	ldr	r3, [r1, #0]
    3948:	2b00      	cmp	r3, #0
    394a:	dafc      	bge.n	3946 <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    394c:	f008 091f 	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    3950:	f016 7300 	ands.w	r3, r6, #33554432	; 0x2000000
    3954:	d124      	bne.n	39a0 <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    3956:	4986      	ldr	r1, [pc, #536]	; (3b70 <set_arm_clock+0x2a8>)
    3958:	690c      	ldr	r4, [r1, #16]
    395a:	4986      	ldr	r1, [pc, #536]	; (3b74 <set_arm_clock+0x2ac>)
    395c:	43a1      	bics	r1, r4
    395e:	f000 80ea 	beq.w	3b36 <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    3962:	f482 5180 	eor.w	r1, r2, #4096	; 0x1000
    3966:	4634      	mov	r4, r6
    3968:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    396c:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    3970:	d004      	beq.n	397c <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    3972:	f026 5660 	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    3976:	431e      	orrs	r6, r3
			CCM_CBCDR = cbcdr;
    3978:	4b77      	ldr	r3, [pc, #476]	; (3b58 <set_arm_clock+0x290>)
    397a:	615e      	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    397c:	f411 5f40 	tst.w	r1, #12288	; 0x3000
    3980:	d007      	beq.n	3992 <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    3982:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
    3986:	4974      	ldr	r1, [pc, #464]	; (3b58 <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    3988:	432a      	orrs	r2, r5
			CCM_CBCMR = cbcmr;
    398a:	618a      	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    398c:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    398e:	071a      	lsls	r2, r3, #28
    3990:	d4fc      	bmi.n	398c <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    3992:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    3996:	4a70      	ldr	r2, [pc, #448]	; (3b58 <set_arm_clock+0x290>)
    3998:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    399a:	6c93      	ldr	r3, [r2, #72]	; 0x48
    399c:	069b      	lsls	r3, r3, #26
    399e:	d4fc      	bmi.n	399a <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
    39a0:	4c75      	ldr	r4, [pc, #468]	; (3b78 <set_arm_clock+0x2b0>)
    39a2:	42a0      	cmp	r0, r4
    39a4:	f200 80ce 	bhi.w	3b44 <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
    39a8:	f04f 0c01 	mov.w	ip, #1
    39ac:	4601      	mov	r1, r0
	uint32_t div_arm = 1;
    39ae:	4663      	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
    39b0:	fb03 1201 	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
    39b4:	f103 0e01 	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
    39b8:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    39bc:	42a2      	cmp	r2, r4
    39be:	d818      	bhi.n	39f2 <set_arm_clock+0x12a>
		if (div_arm < 8) {
    39c0:	f1be 0f08 	cmp.w	lr, #8
				div_arm = 1;
    39c4:	f04f 0301 	mov.w	r3, #1
		if (div_arm < 8) {
    39c8:	f040 808d 	bne.w	3ae6 <set_arm_clock+0x21e>
			if (div_ahb < 5) {
    39cc:	f1bc 0f04 	cmp.w	ip, #4
    39d0:	f200 8091 	bhi.w	3af6 <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
    39d4:	180a      	adds	r2, r1, r0
    39d6:	42a2      	cmp	r2, r4
    39d8:	f200 80a4 	bhi.w	3b24 <set_arm_clock+0x25c>
    39dc:	fb05 f100 	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
    39e0:	46ac      	mov	ip, r5
			div_arm = div_arm + 1;
    39e2:	f103 0e01 	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    39e6:	fb03 1201 	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
    39ea:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    39ee:	42a2      	cmp	r2, r4
    39f0:	d9e6      	bls.n	39c0 <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    39f2:	f10c 31ff 	add.w	r1, ip, #4294967295
    39f6:	028c      	lsls	r4, r1, #10
    39f8:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    39fc:	485f      	ldr	r0, [pc, #380]	; (3b7c <set_arm_clock+0x2b4>)
    39fe:	4410      	add	r0, r2
	if (mult > 108) mult = 108;
    3a00:	4a5f      	ldr	r2, [pc, #380]	; (3b80 <set_arm_clock+0x2b8>)
    3a02:	4290      	cmp	r0, r2
    3a04:	d97f      	bls.n	3b06 <set_arm_clock+0x23e>
    3a06:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 3bac <set_arm_clock+0x2e4>
    3a0a:	226c      	movs	r2, #108	; 0x6c
    3a0c:	485d      	ldr	r0, [pc, #372]	; (3b84 <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    3a0e:	4d58      	ldr	r5, [pc, #352]	; (3b70 <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    3a10:	fbb0 f0fe 	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    3a14:	f8d5 e000 	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
    3a18:	fbb0 f0fc 	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    3a1c:	f8df c190 	ldr.w	ip, [pc, #400]	; 3bb0 <set_arm_clock+0x2e8>
    3a20:	ea0e 0c0c 	and.w	ip, lr, ip
    3a24:	45d4      	cmp	ip, sl
    3a26:	d009      	beq.n	3a3c <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    3a28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    3a2c:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    3a30:	f8c5 c000 	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    3a34:	602a      	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    3a36:	682a      	ldr	r2, [r5, #0]
    3a38:	2a00      	cmp	r2, #0
    3a3a:	dafc      	bge.n	3a36 <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    3a3c:	4a46      	ldr	r2, [pc, #280]	; (3b58 <set_arm_clock+0x290>)
    3a3e:	6915      	ldr	r5, [r2, #16]
    3a40:	f005 0507 	and.w	r5, r5, #7
    3a44:	429d      	cmp	r5, r3
    3a46:	d003      	beq.n	3a50 <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    3a48:	6113      	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    3a4a:	6c93      	ldr	r3, [r2, #72]	; 0x48
    3a4c:	03dd      	lsls	r5, r3, #15
    3a4e:	d4fc      	bmi.n	3a4a <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    3a50:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
    3a54:	d009      	beq.n	3a6a <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    3a56:	f426 56e0 	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    3a5a:	f404 54e0 	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
    3a5e:	4a3e      	ldr	r2, [pc, #248]	; (3b58 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    3a60:	4326      	orrs	r6, r4
		CCM_CBCDR = cbcdr;
    3a62:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    3a64:	6c93      	ldr	r3, [r2, #72]	; 0x48
    3a66:	0799      	lsls	r1, r3, #30
    3a68:	d4fc      	bmi.n	3a64 <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    3a6a:	4947      	ldr	r1, [pc, #284]	; (3b88 <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
    3a6c:	4a47      	ldr	r2, [pc, #284]	; (3b8c <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    3a6e:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    3a70:	4291      	cmp	r1, r2
    3a72:	d83c      	bhi.n	3aee <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    3a74:	4b46      	ldr	r3, [pc, #280]	; (3b90 <set_arm_clock+0x2c8>)
    3a76:	09c9      	lsrs	r1, r1, #7
    3a78:	fba3 3101 	umull	r3, r1, r3, r1
    3a7c:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    3a7e:	1e4b      	subs	r3, r1, #1
    3a80:	021b      	lsls	r3, r3, #8
    3a82:	ea86 0203 	eor.w	r2, r6, r3
    3a86:	f412 7f40 	tst.w	r2, #768	; 0x300
    3a8a:	d006      	beq.n	3a9a <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    3a8c:	f426 7640 	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    3a90:	f403 7340 	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
    3a94:	4a30      	ldr	r2, [pc, #192]	; (3b58 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    3a96:	4333      	orrs	r3, r6
		CCM_CBCDR = cbcdr;
    3a98:	6153      	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    3a9a:	4a2f      	ldr	r2, [pc, #188]	; (3b58 <set_arm_clock+0x290>)
    3a9c:	6953      	ldr	r3, [r2, #20]
    3a9e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
    3aa2:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    3aa4:	6c93      	ldr	r3, [r2, #72]	; 0x48
    3aa6:	069b      	lsls	r3, r3, #26
    3aa8:	d4fc      	bmi.n	3aa4 <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    3aaa:	4b3a      	ldr	r3, [pc, #232]	; (3b94 <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    3aac:	454f      	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    3aae:	fba3 2300 	umull	r2, r3, r3, r0
    3ab2:	f04f 32ff 	mov.w	r2, #4294967295
    3ab6:	ea4f 4393 	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
    3aba:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    3abe:	fbb2 f3f3 	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
    3ac2:	4a35      	ldr	r2, [pc, #212]	; (3b98 <set_arm_clock+0x2d0>)
    3ac4:	6010      	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    3ac6:	4a35      	ldr	r2, [pc, #212]	; (3b9c <set_arm_clock+0x2d4>)
    3ac8:	6011      	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    3aca:	4a35      	ldr	r2, [pc, #212]	; (3ba0 <set_arm_clock+0x2d8>)
    3acc:	6013      	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    3ace:	d208      	bcs.n	3ae2 <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    3ad0:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    3ad4:	4a21      	ldr	r2, [pc, #132]	; (3b5c <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    3ad6:	ea48 0707 	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
    3ada:	60d7      	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    3adc:	6813      	ldr	r3, [r2, #0]
    3ade:	2b00      	cmp	r3, #0
    3ae0:	dafc      	bge.n	3adc <set_arm_clock+0x214>
	}

	return frequency;
}
    3ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3ae6:	4673      	mov	r3, lr
    3ae8:	e762      	b.n	39b0 <set_arm_clock+0xe8>
    3aea:	2712      	movs	r7, #18
    3aec:	e718      	b.n	3920 <set_arm_clock+0x58>
    3aee:	f44f 7340 	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
    3af2:	2104      	movs	r1, #4
    3af4:	e7c5      	b.n	3a82 <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    3af6:	f10c 31ff 	add.w	r1, ip, #4294967295
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    3afa:	4820      	ldr	r0, [pc, #128]	; (3b7c <set_arm_clock+0x2b4>)
    3afc:	2307      	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    3afe:	028c      	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    3b00:	4410      	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    3b02:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    3b06:	4a27      	ldr	r2, [pc, #156]	; (3ba4 <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    3b08:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 3bb4 <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    3b0c:	fba2 2000 	umull	r2, r0, r2, r0
    3b10:	0d02      	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
    3b12:	4825      	ldr	r0, [pc, #148]	; (3ba8 <set_arm_clock+0x2e0>)
    3b14:	2a36      	cmp	r2, #54	; 0x36
    3b16:	bf38      	it	cc
    3b18:	2236      	movcc	r2, #54	; 0x36
    3b1a:	fb02 f000 	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    3b1e:	ea42 0a0a 	orr.w	sl, r2, sl
    3b22:	e774      	b.n	3a0e <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    3b24:	ea4f 248c 	mov.w	r4, ip, lsl #10
    3b28:	2300      	movs	r3, #0
    3b2a:	ea86 218c 	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
    3b2e:	f04f 0e01 	mov.w	lr, #1
				div_ahb = div_ahb + 1;
    3b32:	46ac      	mov	ip, r5
    3b34:	e762      	b.n	39fc <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    3b36:	461d      	mov	r5, r3
    3b38:	f086 54c0 	eor.w	r4, r6, #402653184	; 0x18000000
    3b3c:	4611      	mov	r1, r2
    3b3e:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
    3b42:	e713      	b.n	396c <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
    3b44:	2400      	movs	r4, #0
	uint32_t div_ahb = 1;
    3b46:	f04f 0c01 	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    3b4a:	4602      	mov	r2, r0
    3b4c:	4631      	mov	r1, r6
    3b4e:	4623      	mov	r3, r4
	uint32_t div_arm = 1;
    3b50:	46e6      	mov	lr, ip
    3b52:	e753      	b.n	39fc <set_arm_clock+0x134>
    3b54:	1f78a400 	.word	0x1f78a400
    3b58:	400fc000 	.word	0x400fc000
    3b5c:	40080000 	.word	0x40080000
    3b60:	23c34600 	.word	0x23c34600
    3b64:	004cb223 	.word	0x004cb223
    3b68:	51eb851f 	.word	0x51eb851f
    3b6c:	016e3600 	.word	0x016e3600
    3b70:	400d8000 	.word	0x400d8000
    3b74:	80003040 	.word	0x80003040
    3b78:	269fb1ff 	.word	0x269fb1ff
    3b7c:	005b8d80 	.word	0x005b8d80
    3b80:	4df67eff 	.word	0x4df67eff
    3b84:	4d3f6400 	.word	0x4d3f6400
    3b88:	08f0d17f 	.word	0x08f0d17f
    3b8c:	2cb4177f 	.word	0x2cb4177f
    3b90:	00e5109f 	.word	0x00e5109f
    3b94:	431bde83 	.word	0x431bde83
    3b98:	20007b84 	.word	0x20007b84
    3b9c:	20007b80 	.word	0x20007b80
    3ba0:	20008e64 	.word	0x20008e64
    3ba4:	165e9f81 	.word	0x165e9f81
    3ba8:	00b71b00 	.word	0x00b71b00
    3bac:	8000206c 	.word	0x8000206c
    3bb0:	8001307f 	.word	0x8001307f
    3bb4:	80002000 	.word	0x80002000

00003bb8 <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    3bb8:	4a07      	ldr	r2, [pc, #28]	; (3bd8 <rtc_get+0x20>)
    3bba:	6a50      	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    3bbc:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uint32_t hi2 = SNVS_HPRTCMR;
    3bbe:	4619      	mov	r1, r3
    3bc0:	4684      	mov	ip, r0
    3bc2:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    3bc4:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    3bc6:	4299      	cmp	r1, r3
    3bc8:	d1f9      	bne.n	3bbe <rtc_get+0x6>
    3bca:	4584      	cmp	ip, r0
    3bcc:	d1f7      	bne.n	3bbe <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
    3bce:	0bdb      	lsrs	r3, r3, #15
}
    3bd0:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    3bd4:	4770      	bx	lr
    3bd6:	bf00      	nop
    3bd8:	400d4000 	.word	0x400d4000

00003bdc <sm_align_pool>:
{
    3bdc:	b508      	push	{r3, lr}
	x = spool->pool_size % HEADER_SZ;
    3bde:	e9d0 3200 	ldrd	r3, r2, [r0]
	if (!spool->pool || !spool->pool_size) return 0;
    3be2:	b15b      	cbz	r3, 3bfc <sm_align_pool+0x20>
    3be4:	b1ba      	cbz	r2, 3c16 <sm_align_pool+0x3a>
	if (spool->pool_size % HEADER_SZ) return 0;
    3be6:	4b0f      	ldr	r3, [pc, #60]	; (3c24 <sm_align_pool+0x48>)
    3be8:	fba3 1302 	umull	r1, r3, r3, r2
    3bec:	08db      	lsrs	r3, r3, #3
    3bee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3bf2:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    3bf6:	d10a      	bne.n	3c0e <sm_align_pool+0x32>
	if (smalloc_verify_pool(spool)) return 1;
    3bf8:	2001      	movs	r0, #1
}
    3bfa:	bd08      	pop	{r3, pc}
	x = spool->pool_size % HEADER_SZ;
    3bfc:	4b09      	ldr	r3, [pc, #36]	; (3c24 <sm_align_pool+0x48>)
    3bfe:	fba3 1302 	umull	r1, r3, r3, r2
    3c02:	08db      	lsrs	r3, r3, #3
    3c04:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
    3c08:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    3c0c:	d001      	beq.n	3c12 <sm_align_pool+0x36>
    3c0e:	1ad2      	subs	r2, r2, r3
    3c10:	6042      	str	r2, [r0, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    3c12:	2af0      	cmp	r2, #240	; 0xf0
    3c14:	d8f0      	bhi.n	3bf8 <sm_align_pool+0x1c>
		errno = ENOSPC;
    3c16:	f002 fa9b 	bl	6150 <__errno>
    3c1a:	221c      	movs	r2, #28
    3c1c:	4603      	mov	r3, r0
    3c1e:	2000      	movs	r0, #0
    3c20:	601a      	str	r2, [r3, #0]
}
    3c22:	bd08      	pop	{r3, pc}
    3c24:	aaaaaaab 	.word	0xaaaaaaab

00003c28 <sm_set_pool>:
{
    3c28:	b570      	push	{r4, r5, r6, lr}
	if (!spool) {
    3c2a:	4604      	mov	r4, r0
    3c2c:	b338      	cbz	r0, 3c7e <sm_set_pool+0x56>
	if (!new_pool || !new_pool_size) {
    3c2e:	b119      	cbz	r1, 3c38 <sm_set_pool+0x10>
    3c30:	fab2 f682 	clz	r6, r2
    3c34:	0976      	lsrs	r6, r6, #5
    3c36:	b9a2      	cbnz	r2, 3c62 <sm_set_pool+0x3a>
	if (!spool->pool || !spool->pool_size) return 0;
    3c38:	6820      	ldr	r0, [r4, #0]
    3c3a:	b300      	cbz	r0, 3c7e <sm_set_pool+0x56>
    3c3c:	6862      	ldr	r2, [r4, #4]
    3c3e:	b1f2      	cbz	r2, 3c7e <sm_set_pool+0x56>
	if (spool->pool_size % HEADER_SZ) return 0;
    3c40:	4b18      	ldr	r3, [pc, #96]	; (3ca4 <sm_set_pool+0x7c>)
    3c42:	4919      	ldr	r1, [pc, #100]	; (3ca8 <sm_set_pool+0x80>)
    3c44:	fb02 f303 	mul.w	r3, r2, r3
    3c48:	ebb1 0fb3 	cmp.w	r1, r3, ror #2
    3c4c:	d317      	bcc.n	3c7e <sm_set_pool+0x56>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    3c4e:	68a3      	ldr	r3, [r4, #8]
    3c50:	b9e3      	cbnz	r3, 3c8c <sm_set_pool+0x64>
			memset(spool, 0, sizeof(struct smalloc_pool));
    3c52:	2200      	movs	r2, #0
			return 1;
    3c54:	2301      	movs	r3, #1
			memset(spool, 0, sizeof(struct smalloc_pool));
    3c56:	6022      	str	r2, [r4, #0]
    3c58:	6062      	str	r2, [r4, #4]
    3c5a:	60a2      	str	r2, [r4, #8]
    3c5c:	60e2      	str	r2, [r4, #12]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    3c5e:	4618      	mov	r0, r3
    3c60:	bd70      	pop	{r4, r5, r6, pc}
	spool->pool = new_pool;
    3c62:	461d      	mov	r5, r3
	spool->oomfn = oom_handler;
    3c64:	9b04      	ldr	r3, [sp, #16]
	spool->pool_size = new_pool_size;
    3c66:	e9c0 1200 	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
    3c6a:	60c3      	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    3c6c:	f7ff ffb6 	bl	3bdc <sm_align_pool>
    3c70:	4603      	mov	r3, r0
    3c72:	2800      	cmp	r0, #0
    3c74:	d0f3      	beq.n	3c5e <sm_set_pool+0x36>
	if (do_zero) {
    3c76:	b96d      	cbnz	r5, 3c94 <sm_set_pool+0x6c>
	return 1;
    3c78:	2301      	movs	r3, #1
}
    3c7a:	4618      	mov	r0, r3
    3c7c:	bd70      	pop	{r4, r5, r6, pc}
		errno = EINVAL;
    3c7e:	f002 fa67 	bl	6150 <__errno>
    3c82:	2216      	movs	r2, #22
		return 0;
    3c84:	2300      	movs	r3, #0
		errno = EINVAL;
    3c86:	6002      	str	r2, [r0, #0]
}
    3c88:	4618      	mov	r0, r3
    3c8a:	bd70      	pop	{r4, r5, r6, pc}
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    3c8c:	2100      	movs	r1, #0
    3c8e:	f002 f8c3 	bl	5e18 <memset>
    3c92:	e7de      	b.n	3c52 <sm_set_pool+0x2a>
		memset(spool->pool, 0, spool->pool_size);
    3c94:	6862      	ldr	r2, [r4, #4]
    3c96:	4631      	mov	r1, r6
    3c98:	6820      	ldr	r0, [r4, #0]
		spool->do_zero = do_zero;
    3c9a:	60a5      	str	r5, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    3c9c:	f002 f8bc 	bl	5e18 <memset>
	return 1;
    3ca0:	2301      	movs	r3, #1
    3ca2:	e7dc      	b.n	3c5e <sm_set_pool+0x36>
    3ca4:	aaaaaaab 	.word	0xaaaaaaab
    3ca8:	15555555 	.word	0x15555555

00003cac <__aeabi_atexit>:
    3cac:	4603      	mov	r3, r0
    3cae:	4608      	mov	r0, r1
    3cb0:	4619      	mov	r1, r3
    3cb2:	f001 be27 	b.w	5904 <__cxa_atexit>
    3cb6:	bf00      	nop

00003cb8 <__aeabi_uldivmod>:
    3cb8:	b953      	cbnz	r3, 3cd0 <__aeabi_uldivmod+0x18>
    3cba:	b94a      	cbnz	r2, 3cd0 <__aeabi_uldivmod+0x18>
    3cbc:	2900      	cmp	r1, #0
    3cbe:	bf08      	it	eq
    3cc0:	2800      	cmpeq	r0, #0
    3cc2:	bf1c      	itt	ne
    3cc4:	f04f 31ff 	movne.w	r1, #4294967295
    3cc8:	f04f 30ff 	movne.w	r0, #4294967295
    3ccc:	f000 b970 	b.w	3fb0 <__aeabi_idiv0>
    3cd0:	f1ad 0c08 	sub.w	ip, sp, #8
    3cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    3cd8:	f000 f806 	bl	3ce8 <__udivmoddi4>
    3cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
    3ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    3ce4:	b004      	add	sp, #16
    3ce6:	4770      	bx	lr

00003ce8 <__udivmoddi4>:
    3ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3cec:	9e08      	ldr	r6, [sp, #32]
    3cee:	460d      	mov	r5, r1
    3cf0:	4604      	mov	r4, r0
    3cf2:	460f      	mov	r7, r1
    3cf4:	2b00      	cmp	r3, #0
    3cf6:	d14a      	bne.n	3d8e <__udivmoddi4+0xa6>
    3cf8:	428a      	cmp	r2, r1
    3cfa:	4694      	mov	ip, r2
    3cfc:	d965      	bls.n	3dca <__udivmoddi4+0xe2>
    3cfe:	fab2 f382 	clz	r3, r2
    3d02:	b143      	cbz	r3, 3d16 <__udivmoddi4+0x2e>
    3d04:	fa02 fc03 	lsl.w	ip, r2, r3
    3d08:	f1c3 0220 	rsb	r2, r3, #32
    3d0c:	409f      	lsls	r7, r3
    3d0e:	fa20 f202 	lsr.w	r2, r0, r2
    3d12:	4317      	orrs	r7, r2
    3d14:	409c      	lsls	r4, r3
    3d16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
    3d1a:	fa1f f58c 	uxth.w	r5, ip
    3d1e:	fbb7 f1fe 	udiv	r1, r7, lr
    3d22:	0c22      	lsrs	r2, r4, #16
    3d24:	fb0e 7711 	mls	r7, lr, r1, r7
    3d28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
    3d2c:	fb01 f005 	mul.w	r0, r1, r5
    3d30:	4290      	cmp	r0, r2
    3d32:	d90a      	bls.n	3d4a <__udivmoddi4+0x62>
    3d34:	eb1c 0202 	adds.w	r2, ip, r2
    3d38:	f101 37ff 	add.w	r7, r1, #4294967295
    3d3c:	f080 811c 	bcs.w	3f78 <__udivmoddi4+0x290>
    3d40:	4290      	cmp	r0, r2
    3d42:	f240 8119 	bls.w	3f78 <__udivmoddi4+0x290>
    3d46:	3902      	subs	r1, #2
    3d48:	4462      	add	r2, ip
    3d4a:	1a12      	subs	r2, r2, r0
    3d4c:	b2a4      	uxth	r4, r4
    3d4e:	fbb2 f0fe 	udiv	r0, r2, lr
    3d52:	fb0e 2210 	mls	r2, lr, r0, r2
    3d56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    3d5a:	fb00 f505 	mul.w	r5, r0, r5
    3d5e:	42a5      	cmp	r5, r4
    3d60:	d90a      	bls.n	3d78 <__udivmoddi4+0x90>
    3d62:	eb1c 0404 	adds.w	r4, ip, r4
    3d66:	f100 32ff 	add.w	r2, r0, #4294967295
    3d6a:	f080 8107 	bcs.w	3f7c <__udivmoddi4+0x294>
    3d6e:	42a5      	cmp	r5, r4
    3d70:	f240 8104 	bls.w	3f7c <__udivmoddi4+0x294>
    3d74:	4464      	add	r4, ip
    3d76:	3802      	subs	r0, #2
    3d78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
    3d7c:	1b64      	subs	r4, r4, r5
    3d7e:	2100      	movs	r1, #0
    3d80:	b11e      	cbz	r6, 3d8a <__udivmoddi4+0xa2>
    3d82:	40dc      	lsrs	r4, r3
    3d84:	2300      	movs	r3, #0
    3d86:	e9c6 4300 	strd	r4, r3, [r6]
    3d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3d8e:	428b      	cmp	r3, r1
    3d90:	d908      	bls.n	3da4 <__udivmoddi4+0xbc>
    3d92:	2e00      	cmp	r6, #0
    3d94:	f000 80ed 	beq.w	3f72 <__udivmoddi4+0x28a>
    3d98:	2100      	movs	r1, #0
    3d9a:	e9c6 0500 	strd	r0, r5, [r6]
    3d9e:	4608      	mov	r0, r1
    3da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3da4:	fab3 f183 	clz	r1, r3
    3da8:	2900      	cmp	r1, #0
    3daa:	d149      	bne.n	3e40 <__udivmoddi4+0x158>
    3dac:	42ab      	cmp	r3, r5
    3dae:	d302      	bcc.n	3db6 <__udivmoddi4+0xce>
    3db0:	4282      	cmp	r2, r0
    3db2:	f200 80f8 	bhi.w	3fa6 <__udivmoddi4+0x2be>
    3db6:	1a84      	subs	r4, r0, r2
    3db8:	eb65 0203 	sbc.w	r2, r5, r3
    3dbc:	2001      	movs	r0, #1
    3dbe:	4617      	mov	r7, r2
    3dc0:	2e00      	cmp	r6, #0
    3dc2:	d0e2      	beq.n	3d8a <__udivmoddi4+0xa2>
    3dc4:	e9c6 4700 	strd	r4, r7, [r6]
    3dc8:	e7df      	b.n	3d8a <__udivmoddi4+0xa2>
    3dca:	b902      	cbnz	r2, 3dce <__udivmoddi4+0xe6>
    3dcc:	deff      	udf	#255	; 0xff
    3dce:	fab2 f382 	clz	r3, r2
    3dd2:	2b00      	cmp	r3, #0
    3dd4:	f040 8090 	bne.w	3ef8 <__udivmoddi4+0x210>
    3dd8:	1a8a      	subs	r2, r1, r2
    3dda:	ea4f 471c 	mov.w	r7, ip, lsr #16
    3dde:	fa1f fe8c 	uxth.w	lr, ip
    3de2:	2101      	movs	r1, #1
    3de4:	fbb2 f5f7 	udiv	r5, r2, r7
    3de8:	fb07 2015 	mls	r0, r7, r5, r2
    3dec:	0c22      	lsrs	r2, r4, #16
    3dee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    3df2:	fb0e f005 	mul.w	r0, lr, r5
    3df6:	4290      	cmp	r0, r2
    3df8:	d908      	bls.n	3e0c <__udivmoddi4+0x124>
    3dfa:	eb1c 0202 	adds.w	r2, ip, r2
    3dfe:	f105 38ff 	add.w	r8, r5, #4294967295
    3e02:	d202      	bcs.n	3e0a <__udivmoddi4+0x122>
    3e04:	4290      	cmp	r0, r2
    3e06:	f200 80cb 	bhi.w	3fa0 <__udivmoddi4+0x2b8>
    3e0a:	4645      	mov	r5, r8
    3e0c:	1a12      	subs	r2, r2, r0
    3e0e:	b2a4      	uxth	r4, r4
    3e10:	fbb2 f0f7 	udiv	r0, r2, r7
    3e14:	fb07 2210 	mls	r2, r7, r0, r2
    3e18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    3e1c:	fb0e fe00 	mul.w	lr, lr, r0
    3e20:	45a6      	cmp	lr, r4
    3e22:	d908      	bls.n	3e36 <__udivmoddi4+0x14e>
    3e24:	eb1c 0404 	adds.w	r4, ip, r4
    3e28:	f100 32ff 	add.w	r2, r0, #4294967295
    3e2c:	d202      	bcs.n	3e34 <__udivmoddi4+0x14c>
    3e2e:	45a6      	cmp	lr, r4
    3e30:	f200 80bb 	bhi.w	3faa <__udivmoddi4+0x2c2>
    3e34:	4610      	mov	r0, r2
    3e36:	eba4 040e 	sub.w	r4, r4, lr
    3e3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
    3e3e:	e79f      	b.n	3d80 <__udivmoddi4+0x98>
    3e40:	f1c1 0720 	rsb	r7, r1, #32
    3e44:	408b      	lsls	r3, r1
    3e46:	fa22 fc07 	lsr.w	ip, r2, r7
    3e4a:	ea4c 0c03 	orr.w	ip, ip, r3
    3e4e:	fa05 f401 	lsl.w	r4, r5, r1
    3e52:	fa20 f307 	lsr.w	r3, r0, r7
    3e56:	40fd      	lsrs	r5, r7
    3e58:	ea4f 491c 	mov.w	r9, ip, lsr #16
    3e5c:	4323      	orrs	r3, r4
    3e5e:	fbb5 f8f9 	udiv	r8, r5, r9
    3e62:	fa1f fe8c 	uxth.w	lr, ip
    3e66:	fb09 5518 	mls	r5, r9, r8, r5
    3e6a:	0c1c      	lsrs	r4, r3, #16
    3e6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    3e70:	fb08 f50e 	mul.w	r5, r8, lr
    3e74:	42a5      	cmp	r5, r4
    3e76:	fa02 f201 	lsl.w	r2, r2, r1
    3e7a:	fa00 f001 	lsl.w	r0, r0, r1
    3e7e:	d90b      	bls.n	3e98 <__udivmoddi4+0x1b0>
    3e80:	eb1c 0404 	adds.w	r4, ip, r4
    3e84:	f108 3aff 	add.w	sl, r8, #4294967295
    3e88:	f080 8088 	bcs.w	3f9c <__udivmoddi4+0x2b4>
    3e8c:	42a5      	cmp	r5, r4
    3e8e:	f240 8085 	bls.w	3f9c <__udivmoddi4+0x2b4>
    3e92:	f1a8 0802 	sub.w	r8, r8, #2
    3e96:	4464      	add	r4, ip
    3e98:	1b64      	subs	r4, r4, r5
    3e9a:	b29d      	uxth	r5, r3
    3e9c:	fbb4 f3f9 	udiv	r3, r4, r9
    3ea0:	fb09 4413 	mls	r4, r9, r3, r4
    3ea4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
    3ea8:	fb03 fe0e 	mul.w	lr, r3, lr
    3eac:	45a6      	cmp	lr, r4
    3eae:	d908      	bls.n	3ec2 <__udivmoddi4+0x1da>
    3eb0:	eb1c 0404 	adds.w	r4, ip, r4
    3eb4:	f103 35ff 	add.w	r5, r3, #4294967295
    3eb8:	d26c      	bcs.n	3f94 <__udivmoddi4+0x2ac>
    3eba:	45a6      	cmp	lr, r4
    3ebc:	d96a      	bls.n	3f94 <__udivmoddi4+0x2ac>
    3ebe:	3b02      	subs	r3, #2
    3ec0:	4464      	add	r4, ip
    3ec2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    3ec6:	fba3 9502 	umull	r9, r5, r3, r2
    3eca:	eba4 040e 	sub.w	r4, r4, lr
    3ece:	42ac      	cmp	r4, r5
    3ed0:	46c8      	mov	r8, r9
    3ed2:	46ae      	mov	lr, r5
    3ed4:	d356      	bcc.n	3f84 <__udivmoddi4+0x29c>
    3ed6:	d053      	beq.n	3f80 <__udivmoddi4+0x298>
    3ed8:	b156      	cbz	r6, 3ef0 <__udivmoddi4+0x208>
    3eda:	ebb0 0208 	subs.w	r2, r0, r8
    3ede:	eb64 040e 	sbc.w	r4, r4, lr
    3ee2:	fa04 f707 	lsl.w	r7, r4, r7
    3ee6:	40ca      	lsrs	r2, r1
    3ee8:	40cc      	lsrs	r4, r1
    3eea:	4317      	orrs	r7, r2
    3eec:	e9c6 7400 	strd	r7, r4, [r6]
    3ef0:	4618      	mov	r0, r3
    3ef2:	2100      	movs	r1, #0
    3ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3ef8:	f1c3 0120 	rsb	r1, r3, #32
    3efc:	fa02 fc03 	lsl.w	ip, r2, r3
    3f00:	fa20 f201 	lsr.w	r2, r0, r1
    3f04:	fa25 f101 	lsr.w	r1, r5, r1
    3f08:	409d      	lsls	r5, r3
    3f0a:	432a      	orrs	r2, r5
    3f0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
    3f10:	fa1f fe8c 	uxth.w	lr, ip
    3f14:	fbb1 f0f7 	udiv	r0, r1, r7
    3f18:	fb07 1510 	mls	r5, r7, r0, r1
    3f1c:	0c11      	lsrs	r1, r2, #16
    3f1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
    3f22:	fb00 f50e 	mul.w	r5, r0, lr
    3f26:	428d      	cmp	r5, r1
    3f28:	fa04 f403 	lsl.w	r4, r4, r3
    3f2c:	d908      	bls.n	3f40 <__udivmoddi4+0x258>
    3f2e:	eb1c 0101 	adds.w	r1, ip, r1
    3f32:	f100 38ff 	add.w	r8, r0, #4294967295
    3f36:	d22f      	bcs.n	3f98 <__udivmoddi4+0x2b0>
    3f38:	428d      	cmp	r5, r1
    3f3a:	d92d      	bls.n	3f98 <__udivmoddi4+0x2b0>
    3f3c:	3802      	subs	r0, #2
    3f3e:	4461      	add	r1, ip
    3f40:	1b49      	subs	r1, r1, r5
    3f42:	b292      	uxth	r2, r2
    3f44:	fbb1 f5f7 	udiv	r5, r1, r7
    3f48:	fb07 1115 	mls	r1, r7, r5, r1
    3f4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    3f50:	fb05 f10e 	mul.w	r1, r5, lr
    3f54:	4291      	cmp	r1, r2
    3f56:	d908      	bls.n	3f6a <__udivmoddi4+0x282>
    3f58:	eb1c 0202 	adds.w	r2, ip, r2
    3f5c:	f105 38ff 	add.w	r8, r5, #4294967295
    3f60:	d216      	bcs.n	3f90 <__udivmoddi4+0x2a8>
    3f62:	4291      	cmp	r1, r2
    3f64:	d914      	bls.n	3f90 <__udivmoddi4+0x2a8>
    3f66:	3d02      	subs	r5, #2
    3f68:	4462      	add	r2, ip
    3f6a:	1a52      	subs	r2, r2, r1
    3f6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
    3f70:	e738      	b.n	3de4 <__udivmoddi4+0xfc>
    3f72:	4631      	mov	r1, r6
    3f74:	4630      	mov	r0, r6
    3f76:	e708      	b.n	3d8a <__udivmoddi4+0xa2>
    3f78:	4639      	mov	r1, r7
    3f7a:	e6e6      	b.n	3d4a <__udivmoddi4+0x62>
    3f7c:	4610      	mov	r0, r2
    3f7e:	e6fb      	b.n	3d78 <__udivmoddi4+0x90>
    3f80:	4548      	cmp	r0, r9
    3f82:	d2a9      	bcs.n	3ed8 <__udivmoddi4+0x1f0>
    3f84:	ebb9 0802 	subs.w	r8, r9, r2
    3f88:	eb65 0e0c 	sbc.w	lr, r5, ip
    3f8c:	3b01      	subs	r3, #1
    3f8e:	e7a3      	b.n	3ed8 <__udivmoddi4+0x1f0>
    3f90:	4645      	mov	r5, r8
    3f92:	e7ea      	b.n	3f6a <__udivmoddi4+0x282>
    3f94:	462b      	mov	r3, r5
    3f96:	e794      	b.n	3ec2 <__udivmoddi4+0x1da>
    3f98:	4640      	mov	r0, r8
    3f9a:	e7d1      	b.n	3f40 <__udivmoddi4+0x258>
    3f9c:	46d0      	mov	r8, sl
    3f9e:	e77b      	b.n	3e98 <__udivmoddi4+0x1b0>
    3fa0:	3d02      	subs	r5, #2
    3fa2:	4462      	add	r2, ip
    3fa4:	e732      	b.n	3e0c <__udivmoddi4+0x124>
    3fa6:	4608      	mov	r0, r1
    3fa8:	e70a      	b.n	3dc0 <__udivmoddi4+0xd8>
    3faa:	4464      	add	r4, ip
    3fac:	3802      	subs	r0, #2
    3fae:	e742      	b.n	3e36 <__udivmoddi4+0x14e>

00003fb0 <__aeabi_idiv0>:
    3fb0:	4770      	bx	lr
    3fb2:	bf00      	nop

00003fb4 <malloc>:
    3fb4:	4b02      	ldr	r3, [pc, #8]	; (3fc0 <malloc+0xc>)
    3fb6:	4601      	mov	r1, r0
    3fb8:	6818      	ldr	r0, [r3, #0]
    3fba:	f000 b80b 	b.w	3fd4 <_malloc_r>
    3fbe:	bf00      	nop
    3fc0:	200081f8 	.word	0x200081f8

00003fc4 <free>:
    3fc4:	4b02      	ldr	r3, [pc, #8]	; (3fd0 <free+0xc>)
    3fc6:	4601      	mov	r1, r0
    3fc8:	6818      	ldr	r0, [r3, #0]
    3fca:	f002 bbeb 	b.w	67a4 <_free_r>
    3fce:	bf00      	nop
    3fd0:	200081f8 	.word	0x200081f8

00003fd4 <_malloc_r>:
    3fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3fd8:	f101 060b 	add.w	r6, r1, #11
    3fdc:	2e16      	cmp	r6, #22
    3fde:	b083      	sub	sp, #12
    3fe0:	4604      	mov	r4, r0
    3fe2:	d824      	bhi.n	402e <_malloc_r+0x5a>
    3fe4:	2910      	cmp	r1, #16
    3fe6:	f200 80ba 	bhi.w	415e <_malloc_r+0x18a>
    3fea:	f000 faa3 	bl	4534 <__malloc_lock>
    3fee:	2610      	movs	r6, #16
    3ff0:	2218      	movs	r2, #24
    3ff2:	2002      	movs	r0, #2
    3ff4:	4fb5      	ldr	r7, [pc, #724]	; (42cc <_malloc_r+0x2f8>)
    3ff6:	443a      	add	r2, r7
    3ff8:	f1a2 0108 	sub.w	r1, r2, #8
    3ffc:	6853      	ldr	r3, [r2, #4]
    3ffe:	428b      	cmp	r3, r1
    4000:	f000 80ba 	beq.w	4178 <_malloc_r+0x1a4>
    4004:	685a      	ldr	r2, [r3, #4]
    4006:	68d9      	ldr	r1, [r3, #12]
    4008:	f022 0203 	bic.w	r2, r2, #3
    400c:	441a      	add	r2, r3
    400e:	689d      	ldr	r5, [r3, #8]
    4010:	60e9      	str	r1, [r5, #12]
    4012:	608d      	str	r5, [r1, #8]
    4014:	6851      	ldr	r1, [r2, #4]
    4016:	f041 0101 	orr.w	r1, r1, #1
    401a:	4620      	mov	r0, r4
    401c:	6051      	str	r1, [r2, #4]
    401e:	f103 0508 	add.w	r5, r3, #8
    4022:	f000 fa8d 	bl	4540 <__malloc_unlock>
    4026:	4628      	mov	r0, r5
    4028:	b003      	add	sp, #12
    402a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    402e:	f036 0607 	bics.w	r6, r6, #7
    4032:	f100 8094 	bmi.w	415e <_malloc_r+0x18a>
    4036:	42b1      	cmp	r1, r6
    4038:	f200 8091 	bhi.w	415e <_malloc_r+0x18a>
    403c:	f000 fa7a 	bl	4534 <__malloc_lock>
    4040:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
    4044:	f0c0 819a 	bcc.w	437c <_malloc_r+0x3a8>
    4048:	0a73      	lsrs	r3, r6, #9
    404a:	f000 808f 	beq.w	416c <_malloc_r+0x198>
    404e:	2b04      	cmp	r3, #4
    4050:	f200 816f 	bhi.w	4332 <_malloc_r+0x35e>
    4054:	09b3      	lsrs	r3, r6, #6
    4056:	f103 0039 	add.w	r0, r3, #57	; 0x39
    405a:	f103 0c38 	add.w	ip, r3, #56	; 0x38
    405e:	00c3      	lsls	r3, r0, #3
    4060:	4f9a      	ldr	r7, [pc, #616]	; (42cc <_malloc_r+0x2f8>)
    4062:	443b      	add	r3, r7
    4064:	f1a3 0508 	sub.w	r5, r3, #8
    4068:	685b      	ldr	r3, [r3, #4]
    406a:	429d      	cmp	r5, r3
    406c:	d106      	bne.n	407c <_malloc_r+0xa8>
    406e:	e00c      	b.n	408a <_malloc_r+0xb6>
    4070:	2900      	cmp	r1, #0
    4072:	f280 8127 	bge.w	42c4 <_malloc_r+0x2f0>
    4076:	68db      	ldr	r3, [r3, #12]
    4078:	429d      	cmp	r5, r3
    407a:	d006      	beq.n	408a <_malloc_r+0xb6>
    407c:	685a      	ldr	r2, [r3, #4]
    407e:	f022 0203 	bic.w	r2, r2, #3
    4082:	1b91      	subs	r1, r2, r6
    4084:	290f      	cmp	r1, #15
    4086:	ddf3      	ble.n	4070 <_malloc_r+0x9c>
    4088:	4660      	mov	r0, ip
    408a:	693d      	ldr	r5, [r7, #16]
    408c:	f8df c250 	ldr.w	ip, [pc, #592]	; 42e0 <_malloc_r+0x30c>
    4090:	4565      	cmp	r5, ip
    4092:	d07c      	beq.n	418e <_malloc_r+0x1ba>
    4094:	686a      	ldr	r2, [r5, #4]
    4096:	f022 0203 	bic.w	r2, r2, #3
    409a:	1b93      	subs	r3, r2, r6
    409c:	2b0f      	cmp	r3, #15
    409e:	f300 817b 	bgt.w	4398 <_malloc_r+0x3c4>
    40a2:	2b00      	cmp	r3, #0
    40a4:	e9c7 cc04 	strd	ip, ip, [r7, #16]
    40a8:	f280 816c 	bge.w	4384 <_malloc_r+0x3b0>
    40ac:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    40b0:	f080 811a 	bcs.w	42e8 <_malloc_r+0x314>
    40b4:	08d3      	lsrs	r3, r2, #3
    40b6:	6879      	ldr	r1, [r7, #4]
    40b8:	3301      	adds	r3, #1
    40ba:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    40be:	2201      	movs	r2, #1
    40c0:	fa02 f20e 	lsl.w	r2, r2, lr
    40c4:	430a      	orrs	r2, r1
    40c6:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
    40ca:	f8c5 e008 	str.w	lr, [r5, #8]
    40ce:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    40d2:	3908      	subs	r1, #8
    40d4:	60e9      	str	r1, [r5, #12]
    40d6:	607a      	str	r2, [r7, #4]
    40d8:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    40dc:	f8ce 500c 	str.w	r5, [lr, #12]
    40e0:	1083      	asrs	r3, r0, #2
    40e2:	2101      	movs	r1, #1
    40e4:	4099      	lsls	r1, r3
    40e6:	4291      	cmp	r1, r2
    40e8:	d857      	bhi.n	419a <_malloc_r+0x1c6>
    40ea:	4211      	tst	r1, r2
    40ec:	d106      	bne.n	40fc <_malloc_r+0x128>
    40ee:	f020 0003 	bic.w	r0, r0, #3
    40f2:	0049      	lsls	r1, r1, #1
    40f4:	4211      	tst	r1, r2
    40f6:	f100 0004 	add.w	r0, r0, #4
    40fa:	d0fa      	beq.n	40f2 <_malloc_r+0x11e>
    40fc:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    4100:	464d      	mov	r5, r9
    4102:	4686      	mov	lr, r0
    4104:	f8d5 800c 	ldr.w	r8, [r5, #12]
    4108:	4545      	cmp	r5, r8
    410a:	d108      	bne.n	411e <_malloc_r+0x14a>
    410c:	e11d      	b.n	434a <_malloc_r+0x376>
    410e:	2b00      	cmp	r3, #0
    4110:	f280 8124 	bge.w	435c <_malloc_r+0x388>
    4114:	f8d8 800c 	ldr.w	r8, [r8, #12]
    4118:	4545      	cmp	r5, r8
    411a:	f000 8116 	beq.w	434a <_malloc_r+0x376>
    411e:	f8d8 2004 	ldr.w	r2, [r8, #4]
    4122:	f022 0203 	bic.w	r2, r2, #3
    4126:	1b93      	subs	r3, r2, r6
    4128:	2b0f      	cmp	r3, #15
    412a:	ddf0      	ble.n	410e <_malloc_r+0x13a>
    412c:	4620      	mov	r0, r4
    412e:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
    4132:	eb08 0106 	add.w	r1, r8, r6
    4136:	f046 0601 	orr.w	r6, r6, #1
    413a:	f8c8 6004 	str.w	r6, [r8, #4]
    413e:	60ec      	str	r4, [r5, #12]
    4140:	60a5      	str	r5, [r4, #8]
    4142:	f043 0401 	orr.w	r4, r3, #1
    4146:	e9c7 1104 	strd	r1, r1, [r7, #16]
    414a:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    414e:	604c      	str	r4, [r1, #4]
    4150:	f848 3002 	str.w	r3, [r8, r2]
    4154:	f000 f9f4 	bl	4540 <__malloc_unlock>
    4158:	f108 0508 	add.w	r5, r8, #8
    415c:	e002      	b.n	4164 <_malloc_r+0x190>
    415e:	230c      	movs	r3, #12
    4160:	6023      	str	r3, [r4, #0]
    4162:	2500      	movs	r5, #0
    4164:	4628      	mov	r0, r5
    4166:	b003      	add	sp, #12
    4168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    416c:	f44f 7300 	mov.w	r3, #512	; 0x200
    4170:	2040      	movs	r0, #64	; 0x40
    4172:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    4176:	e773      	b.n	4060 <_malloc_r+0x8c>
    4178:	68d3      	ldr	r3, [r2, #12]
    417a:	429a      	cmp	r2, r3
    417c:	bf08      	it	eq
    417e:	3002      	addeq	r0, #2
    4180:	f47f af40 	bne.w	4004 <_malloc_r+0x30>
    4184:	693d      	ldr	r5, [r7, #16]
    4186:	f8df c158 	ldr.w	ip, [pc, #344]	; 42e0 <_malloc_r+0x30c>
    418a:	4565      	cmp	r5, ip
    418c:	d182      	bne.n	4094 <_malloc_r+0xc0>
    418e:	687a      	ldr	r2, [r7, #4]
    4190:	1083      	asrs	r3, r0, #2
    4192:	2101      	movs	r1, #1
    4194:	4099      	lsls	r1, r3
    4196:	4291      	cmp	r1, r2
    4198:	d9a7      	bls.n	40ea <_malloc_r+0x116>
    419a:	68bd      	ldr	r5, [r7, #8]
    419c:	686b      	ldr	r3, [r5, #4]
    419e:	f023 0903 	bic.w	r9, r3, #3
    41a2:	454e      	cmp	r6, r9
    41a4:	d803      	bhi.n	41ae <_malloc_r+0x1da>
    41a6:	eba9 0306 	sub.w	r3, r9, r6
    41aa:	2b0f      	cmp	r3, #15
    41ac:	dc7a      	bgt.n	42a4 <_malloc_r+0x2d0>
    41ae:	f8df b134 	ldr.w	fp, [pc, #308]	; 42e4 <_malloc_r+0x310>
    41b2:	4b47      	ldr	r3, [pc, #284]	; (42d0 <_malloc_r+0x2fc>)
    41b4:	f8db 2000 	ldr.w	r2, [fp]
    41b8:	681b      	ldr	r3, [r3, #0]
    41ba:	3201      	adds	r2, #1
    41bc:	4433      	add	r3, r6
    41be:	eb05 0a09 	add.w	sl, r5, r9
    41c2:	f000 8133 	beq.w	442c <_malloc_r+0x458>
    41c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    41ca:	330f      	adds	r3, #15
    41cc:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
    41d0:	f028 080f 	bic.w	r8, r8, #15
    41d4:	4641      	mov	r1, r8
    41d6:	4620      	mov	r0, r4
    41d8:	f001 ff92 	bl	6100 <_sbrk_r>
    41dc:	1c41      	adds	r1, r0, #1
    41de:	4602      	mov	r2, r0
    41e0:	f000 80f3 	beq.w	43ca <_malloc_r+0x3f6>
    41e4:	4582      	cmp	sl, r0
    41e6:	f200 80ee 	bhi.w	43c6 <_malloc_r+0x3f2>
    41ea:	4b3a      	ldr	r3, [pc, #232]	; (42d4 <_malloc_r+0x300>)
    41ec:	6819      	ldr	r1, [r3, #0]
    41ee:	4441      	add	r1, r8
    41f0:	6019      	str	r1, [r3, #0]
    41f2:	4608      	mov	r0, r1
    41f4:	f000 814e 	beq.w	4494 <_malloc_r+0x4c0>
    41f8:	f8db 1000 	ldr.w	r1, [fp]
    41fc:	9301      	str	r3, [sp, #4]
    41fe:	3101      	adds	r1, #1
    4200:	bf1b      	ittet	ne
    4202:	eba2 010a 	subne.w	r1, r2, sl
    4206:	1809      	addne	r1, r1, r0
    4208:	f8cb 2000 	streq.w	r2, [fp]
    420c:	6019      	strne	r1, [r3, #0]
    420e:	f012 0b07 	ands.w	fp, r2, #7
    4212:	f000 8117 	beq.w	4444 <_malloc_r+0x470>
    4216:	f1cb 0108 	rsb	r1, fp, #8
    421a:	440a      	add	r2, r1
    421c:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
    4220:	4490      	add	r8, r2
    4222:	3108      	adds	r1, #8
    4224:	eba1 0108 	sub.w	r1, r1, r8
    4228:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    422c:	4651      	mov	r1, sl
    422e:	4620      	mov	r0, r4
    4230:	9200      	str	r2, [sp, #0]
    4232:	f001 ff65 	bl	6100 <_sbrk_r>
    4236:	1c42      	adds	r2, r0, #1
    4238:	e9dd 2300 	ldrd	r2, r3, [sp]
    423c:	f000 814f 	beq.w	44de <_malloc_r+0x50a>
    4240:	1a80      	subs	r0, r0, r2
    4242:	eb00 080a 	add.w	r8, r0, sl
    4246:	6819      	ldr	r1, [r3, #0]
    4248:	60ba      	str	r2, [r7, #8]
    424a:	f048 0001 	orr.w	r0, r8, #1
    424e:	4451      	add	r1, sl
    4250:	42bd      	cmp	r5, r7
    4252:	6050      	str	r0, [r2, #4]
    4254:	6019      	str	r1, [r3, #0]
    4256:	f000 8129 	beq.w	44ac <_malloc_r+0x4d8>
    425a:	f1b9 0f0f 	cmp.w	r9, #15
    425e:	f240 8127 	bls.w	44b0 <_malloc_r+0x4dc>
    4262:	6868      	ldr	r0, [r5, #4]
    4264:	f1a9 0c0c 	sub.w	ip, r9, #12
    4268:	f02c 0c07 	bic.w	ip, ip, #7
    426c:	f000 0001 	and.w	r0, r0, #1
    4270:	ea40 000c 	orr.w	r0, r0, ip
    4274:	6068      	str	r0, [r5, #4]
    4276:	f04f 0e05 	mov.w	lr, #5
    427a:	eb05 000c 	add.w	r0, r5, ip
    427e:	f1bc 0f0f 	cmp.w	ip, #15
    4282:	e9c0 ee01 	strd	lr, lr, [r0, #4]
    4286:	f200 8132 	bhi.w	44ee <_malloc_r+0x51a>
    428a:	6850      	ldr	r0, [r2, #4]
    428c:	4615      	mov	r5, r2
    428e:	4b12      	ldr	r3, [pc, #72]	; (42d8 <_malloc_r+0x304>)
    4290:	681a      	ldr	r2, [r3, #0]
    4292:	428a      	cmp	r2, r1
    4294:	bf38      	it	cc
    4296:	6019      	strcc	r1, [r3, #0]
    4298:	4b10      	ldr	r3, [pc, #64]	; (42dc <_malloc_r+0x308>)
    429a:	681a      	ldr	r2, [r3, #0]
    429c:	428a      	cmp	r2, r1
    429e:	bf38      	it	cc
    42a0:	6019      	strcc	r1, [r3, #0]
    42a2:	e094      	b.n	43ce <_malloc_r+0x3fa>
    42a4:	19aa      	adds	r2, r5, r6
    42a6:	f043 0301 	orr.w	r3, r3, #1
    42aa:	f046 0601 	orr.w	r6, r6, #1
    42ae:	606e      	str	r6, [r5, #4]
    42b0:	4620      	mov	r0, r4
    42b2:	60ba      	str	r2, [r7, #8]
    42b4:	6053      	str	r3, [r2, #4]
    42b6:	f000 f943 	bl	4540 <__malloc_unlock>
    42ba:	3508      	adds	r5, #8
    42bc:	4628      	mov	r0, r5
    42be:	b003      	add	sp, #12
    42c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    42c4:	68d9      	ldr	r1, [r3, #12]
    42c6:	441a      	add	r2, r3
    42c8:	e6a1      	b.n	400e <_malloc_r+0x3a>
    42ca:	bf00      	nop
    42cc:	20007ddc 	.word	0x20007ddc
    42d0:	20008c8c 	.word	0x20008c8c
    42d4:	20008c5c 	.word	0x20008c5c
    42d8:	20008c84 	.word	0x20008c84
    42dc:	20008c88 	.word	0x20008c88
    42e0:	20007de4 	.word	0x20007de4
    42e4:	200081e4 	.word	0x200081e4
    42e8:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
    42ec:	ea4f 2352 	mov.w	r3, r2, lsr #9
    42f0:	d363      	bcc.n	43ba <_malloc_r+0x3e6>
    42f2:	2b14      	cmp	r3, #20
    42f4:	f200 80b7 	bhi.w	4466 <_malloc_r+0x492>
    42f8:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    42fc:	00c9      	lsls	r1, r1, #3
    42fe:	335b      	adds	r3, #91	; 0x5b
    4300:	eb07 0e01 	add.w	lr, r7, r1
    4304:	5879      	ldr	r1, [r7, r1]
    4306:	f1ae 0e08 	sub.w	lr, lr, #8
    430a:	458e      	cmp	lr, r1
    430c:	f000 8091 	beq.w	4432 <_malloc_r+0x45e>
    4310:	684b      	ldr	r3, [r1, #4]
    4312:	f023 0303 	bic.w	r3, r3, #3
    4316:	4293      	cmp	r3, r2
    4318:	d902      	bls.n	4320 <_malloc_r+0x34c>
    431a:	6889      	ldr	r1, [r1, #8]
    431c:	458e      	cmp	lr, r1
    431e:	d1f7      	bne.n	4310 <_malloc_r+0x33c>
    4320:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    4324:	687a      	ldr	r2, [r7, #4]
    4326:	e9c5 1e02 	strd	r1, lr, [r5, #8]
    432a:	f8ce 5008 	str.w	r5, [lr, #8]
    432e:	60cd      	str	r5, [r1, #12]
    4330:	e6d6      	b.n	40e0 <_malloc_r+0x10c>
    4332:	2b14      	cmp	r3, #20
    4334:	d959      	bls.n	43ea <_malloc_r+0x416>
    4336:	2b54      	cmp	r3, #84	; 0x54
    4338:	f200 809d 	bhi.w	4476 <_malloc_r+0x4a2>
    433c:	0b33      	lsrs	r3, r6, #12
    433e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    4342:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
    4346:	00c3      	lsls	r3, r0, #3
    4348:	e68a      	b.n	4060 <_malloc_r+0x8c>
    434a:	f10e 0e01 	add.w	lr, lr, #1
    434e:	f01e 0f03 	tst.w	lr, #3
    4352:	f105 0508 	add.w	r5, r5, #8
    4356:	f47f aed5 	bne.w	4104 <_malloc_r+0x130>
    435a:	e051      	b.n	4400 <_malloc_r+0x42c>
    435c:	4442      	add	r2, r8
    435e:	4645      	mov	r5, r8
    4360:	6853      	ldr	r3, [r2, #4]
    4362:	f8d8 100c 	ldr.w	r1, [r8, #12]
    4366:	f043 0301 	orr.w	r3, r3, #1
    436a:	6053      	str	r3, [r2, #4]
    436c:	f855 3f08 	ldr.w	r3, [r5, #8]!
    4370:	4620      	mov	r0, r4
    4372:	60d9      	str	r1, [r3, #12]
    4374:	608b      	str	r3, [r1, #8]
    4376:	f000 f8e3 	bl	4540 <__malloc_unlock>
    437a:	e6f3      	b.n	4164 <_malloc_r+0x190>
    437c:	08f0      	lsrs	r0, r6, #3
    437e:	f106 0208 	add.w	r2, r6, #8
    4382:	e637      	b.n	3ff4 <_malloc_r+0x20>
    4384:	442a      	add	r2, r5
    4386:	4620      	mov	r0, r4
    4388:	6853      	ldr	r3, [r2, #4]
    438a:	f043 0301 	orr.w	r3, r3, #1
    438e:	6053      	str	r3, [r2, #4]
    4390:	3508      	adds	r5, #8
    4392:	f000 f8d5 	bl	4540 <__malloc_unlock>
    4396:	e6e5      	b.n	4164 <_malloc_r+0x190>
    4398:	19a9      	adds	r1, r5, r6
    439a:	4620      	mov	r0, r4
    439c:	f046 0601 	orr.w	r6, r6, #1
    43a0:	f043 0401 	orr.w	r4, r3, #1
    43a4:	606e      	str	r6, [r5, #4]
    43a6:	e9c7 1104 	strd	r1, r1, [r7, #16]
    43aa:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    43ae:	604c      	str	r4, [r1, #4]
    43b0:	50ab      	str	r3, [r5, r2]
    43b2:	f000 f8c5 	bl	4540 <__malloc_unlock>
    43b6:	3508      	adds	r5, #8
    43b8:	e6d4      	b.n	4164 <_malloc_r+0x190>
    43ba:	0993      	lsrs	r3, r2, #6
    43bc:	f103 0139 	add.w	r1, r3, #57	; 0x39
    43c0:	00c9      	lsls	r1, r1, #3
    43c2:	3338      	adds	r3, #56	; 0x38
    43c4:	e79c      	b.n	4300 <_malloc_r+0x32c>
    43c6:	42bd      	cmp	r5, r7
    43c8:	d05f      	beq.n	448a <_malloc_r+0x4b6>
    43ca:	68bd      	ldr	r5, [r7, #8]
    43cc:	6868      	ldr	r0, [r5, #4]
    43ce:	f020 0803 	bic.w	r8, r0, #3
    43d2:	4546      	cmp	r6, r8
    43d4:	eba8 0306 	sub.w	r3, r8, r6
    43d8:	d802      	bhi.n	43e0 <_malloc_r+0x40c>
    43da:	2b0f      	cmp	r3, #15
    43dc:	f73f af62 	bgt.w	42a4 <_malloc_r+0x2d0>
    43e0:	4620      	mov	r0, r4
    43e2:	f000 f8ad 	bl	4540 <__malloc_unlock>
    43e6:	2500      	movs	r5, #0
    43e8:	e6bc      	b.n	4164 <_malloc_r+0x190>
    43ea:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    43ee:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
    43f2:	00c3      	lsls	r3, r0, #3
    43f4:	e634      	b.n	4060 <_malloc_r+0x8c>
    43f6:	f859 3908 	ldr.w	r3, [r9], #-8
    43fa:	454b      	cmp	r3, r9
    43fc:	f040 8096 	bne.w	452c <_malloc_r+0x558>
    4400:	f010 0f03 	tst.w	r0, #3
    4404:	f100 30ff 	add.w	r0, r0, #4294967295
    4408:	d1f5      	bne.n	43f6 <_malloc_r+0x422>
    440a:	687b      	ldr	r3, [r7, #4]
    440c:	ea23 0301 	bic.w	r3, r3, r1
    4410:	607b      	str	r3, [r7, #4]
    4412:	0049      	lsls	r1, r1, #1
    4414:	4299      	cmp	r1, r3
    4416:	f63f aec0 	bhi.w	419a <_malloc_r+0x1c6>
    441a:	b919      	cbnz	r1, 4424 <_malloc_r+0x450>
    441c:	e6bd      	b.n	419a <_malloc_r+0x1c6>
    441e:	0049      	lsls	r1, r1, #1
    4420:	f10e 0e04 	add.w	lr, lr, #4
    4424:	4219      	tst	r1, r3
    4426:	d0fa      	beq.n	441e <_malloc_r+0x44a>
    4428:	4670      	mov	r0, lr
    442a:	e667      	b.n	40fc <_malloc_r+0x128>
    442c:	f103 0810 	add.w	r8, r3, #16
    4430:	e6d0      	b.n	41d4 <_malloc_r+0x200>
    4432:	109a      	asrs	r2, r3, #2
    4434:	f04f 0801 	mov.w	r8, #1
    4438:	687b      	ldr	r3, [r7, #4]
    443a:	fa08 f202 	lsl.w	r2, r8, r2
    443e:	431a      	orrs	r2, r3
    4440:	607a      	str	r2, [r7, #4]
    4442:	e770      	b.n	4326 <_malloc_r+0x352>
    4444:	eb02 0108 	add.w	r1, r2, r8
    4448:	4249      	negs	r1, r1
    444a:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    444e:	4651      	mov	r1, sl
    4450:	4620      	mov	r0, r4
    4452:	9200      	str	r2, [sp, #0]
    4454:	f001 fe54 	bl	6100 <_sbrk_r>
    4458:	1c43      	adds	r3, r0, #1
    445a:	e9dd 2300 	ldrd	r2, r3, [sp]
    445e:	f47f aeef 	bne.w	4240 <_malloc_r+0x26c>
    4462:	46da      	mov	sl, fp
    4464:	e6ef      	b.n	4246 <_malloc_r+0x272>
    4466:	2b54      	cmp	r3, #84	; 0x54
    4468:	d825      	bhi.n	44b6 <_malloc_r+0x4e2>
    446a:	0b13      	lsrs	r3, r2, #12
    446c:	f103 016f 	add.w	r1, r3, #111	; 0x6f
    4470:	00c9      	lsls	r1, r1, #3
    4472:	336e      	adds	r3, #110	; 0x6e
    4474:	e744      	b.n	4300 <_malloc_r+0x32c>
    4476:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    447a:	d825      	bhi.n	44c8 <_malloc_r+0x4f4>
    447c:	0bf3      	lsrs	r3, r6, #15
    447e:	f103 0078 	add.w	r0, r3, #120	; 0x78
    4482:	f103 0c77 	add.w	ip, r3, #119	; 0x77
    4486:	00c3      	lsls	r3, r0, #3
    4488:	e5ea      	b.n	4060 <_malloc_r+0x8c>
    448a:	4b29      	ldr	r3, [pc, #164]	; (4530 <_malloc_r+0x55c>)
    448c:	6818      	ldr	r0, [r3, #0]
    448e:	4440      	add	r0, r8
    4490:	6018      	str	r0, [r3, #0]
    4492:	e6b1      	b.n	41f8 <_malloc_r+0x224>
    4494:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
    4498:	f1bc 0f00 	cmp.w	ip, #0
    449c:	f47f aeac 	bne.w	41f8 <_malloc_r+0x224>
    44a0:	68bd      	ldr	r5, [r7, #8]
    44a2:	44c8      	add	r8, r9
    44a4:	f048 0001 	orr.w	r0, r8, #1
    44a8:	6068      	str	r0, [r5, #4]
    44aa:	e6f0      	b.n	428e <_malloc_r+0x2ba>
    44ac:	4615      	mov	r5, r2
    44ae:	e6ee      	b.n	428e <_malloc_r+0x2ba>
    44b0:	2301      	movs	r3, #1
    44b2:	6053      	str	r3, [r2, #4]
    44b4:	e794      	b.n	43e0 <_malloc_r+0x40c>
    44b6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    44ba:	d823      	bhi.n	4504 <_malloc_r+0x530>
    44bc:	0bd3      	lsrs	r3, r2, #15
    44be:	f103 0178 	add.w	r1, r3, #120	; 0x78
    44c2:	00c9      	lsls	r1, r1, #3
    44c4:	3377      	adds	r3, #119	; 0x77
    44c6:	e71b      	b.n	4300 <_malloc_r+0x32c>
    44c8:	f240 5254 	movw	r2, #1364	; 0x554
    44cc:	4293      	cmp	r3, r2
    44ce:	d823      	bhi.n	4518 <_malloc_r+0x544>
    44d0:	0cb3      	lsrs	r3, r6, #18
    44d2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    44d6:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
    44da:	00c3      	lsls	r3, r0, #3
    44dc:	e5c0      	b.n	4060 <_malloc_r+0x8c>
    44de:	f1ab 0b08 	sub.w	fp, fp, #8
    44e2:	44d8      	add	r8, fp
    44e4:	eba8 0802 	sub.w	r8, r8, r2
    44e8:	f04f 0a00 	mov.w	sl, #0
    44ec:	e6ab      	b.n	4246 <_malloc_r+0x272>
    44ee:	f105 0108 	add.w	r1, r5, #8
    44f2:	4620      	mov	r0, r4
    44f4:	9300      	str	r3, [sp, #0]
    44f6:	f002 f955 	bl	67a4 <_free_r>
    44fa:	68bd      	ldr	r5, [r7, #8]
    44fc:	9b00      	ldr	r3, [sp, #0]
    44fe:	6868      	ldr	r0, [r5, #4]
    4500:	6819      	ldr	r1, [r3, #0]
    4502:	e6c4      	b.n	428e <_malloc_r+0x2ba>
    4504:	f240 5154 	movw	r1, #1364	; 0x554
    4508:	428b      	cmp	r3, r1
    450a:	d80b      	bhi.n	4524 <_malloc_r+0x550>
    450c:	0c93      	lsrs	r3, r2, #18
    450e:	f103 017d 	add.w	r1, r3, #125	; 0x7d
    4512:	00c9      	lsls	r1, r1, #3
    4514:	337c      	adds	r3, #124	; 0x7c
    4516:	e6f3      	b.n	4300 <_malloc_r+0x32c>
    4518:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    451c:	207f      	movs	r0, #127	; 0x7f
    451e:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
    4522:	e59d      	b.n	4060 <_malloc_r+0x8c>
    4524:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    4528:	237e      	movs	r3, #126	; 0x7e
    452a:	e6e9      	b.n	4300 <_malloc_r+0x32c>
    452c:	687b      	ldr	r3, [r7, #4]
    452e:	e770      	b.n	4412 <_malloc_r+0x43e>
    4530:	20008c5c 	.word	0x20008c5c

00004534 <__malloc_lock>:
    4534:	4801      	ldr	r0, [pc, #4]	; (453c <__malloc_lock+0x8>)
    4536:	f001 be39 	b.w	61ac <__retarget_lock_acquire_recursive>
    453a:	bf00      	nop
    453c:	20008c54 	.word	0x20008c54

00004540 <__malloc_unlock>:
    4540:	4801      	ldr	r0, [pc, #4]	; (4548 <__malloc_unlock+0x8>)
    4542:	f001 be35 	b.w	61b0 <__retarget_lock_release_recursive>
    4546:	bf00      	nop
    4548:	20008c54 	.word	0x20008c54

0000454c <realloc>:
    454c:	b410      	push	{r4}
    454e:	4c04      	ldr	r4, [pc, #16]	; (4560 <realloc+0x14>)
    4550:	4603      	mov	r3, r0
    4552:	460a      	mov	r2, r1
    4554:	6820      	ldr	r0, [r4, #0]
    4556:	f85d 4b04 	ldr.w	r4, [sp], #4
    455a:	4619      	mov	r1, r3
    455c:	f000 b802 	b.w	4564 <_realloc_r>
    4560:	200081f8 	.word	0x200081f8

00004564 <_realloc_r>:
    4564:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4568:	4617      	mov	r7, r2
    456a:	2900      	cmp	r1, #0
    456c:	f000 8098 	beq.w	46a0 <_realloc_r+0x13c>
    4570:	460c      	mov	r4, r1
    4572:	f107 050b 	add.w	r5, r7, #11
    4576:	4680      	mov	r8, r0
    4578:	f7ff ffdc 	bl	4534 <__malloc_lock>
    457c:	2d16      	cmp	r5, #22
    457e:	f854 1c04 	ldr.w	r1, [r4, #-4]
    4582:	d85b      	bhi.n	463c <_realloc_r+0xd8>
    4584:	2510      	movs	r5, #16
    4586:	462a      	mov	r2, r5
    4588:	42af      	cmp	r7, r5
    458a:	d85c      	bhi.n	4646 <_realloc_r+0xe2>
    458c:	f021 0603 	bic.w	r6, r1, #3
    4590:	4296      	cmp	r6, r2
    4592:	f1a4 0908 	sub.w	r9, r4, #8
    4596:	da62      	bge.n	465e <_realloc_r+0xfa>
    4598:	4bbc      	ldr	r3, [pc, #752]	; (488c <_realloc_r+0x328>)
    459a:	f8d3 c008 	ldr.w	ip, [r3, #8]
    459e:	eb09 0006 	add.w	r0, r9, r6
    45a2:	4584      	cmp	ip, r0
    45a4:	f000 8097 	beq.w	46d6 <_realloc_r+0x172>
    45a8:	f8d0 c004 	ldr.w	ip, [r0, #4]
    45ac:	f02c 0301 	bic.w	r3, ip, #1
    45b0:	4403      	add	r3, r0
    45b2:	685b      	ldr	r3, [r3, #4]
    45b4:	07db      	lsls	r3, r3, #31
    45b6:	d468      	bmi.n	468a <_realloc_r+0x126>
    45b8:	f02c 0c03 	bic.w	ip, ip, #3
    45bc:	eb06 030c 	add.w	r3, r6, ip
    45c0:	4293      	cmp	r3, r2
    45c2:	da47      	bge.n	4654 <_realloc_r+0xf0>
    45c4:	07cb      	lsls	r3, r1, #31
    45c6:	d410      	bmi.n	45ea <_realloc_r+0x86>
    45c8:	f854 3c08 	ldr.w	r3, [r4, #-8]
    45cc:	eba9 0a03 	sub.w	sl, r9, r3
    45d0:	f8da 3004 	ldr.w	r3, [sl, #4]
    45d4:	f023 0103 	bic.w	r1, r3, #3
    45d8:	448c      	add	ip, r1
    45da:	44b4      	add	ip, r6
    45dc:	4594      	cmp	ip, r2
    45de:	f280 8111 	bge.w	4804 <_realloc_r+0x2a0>
    45e2:	1873      	adds	r3, r6, r1
    45e4:	4293      	cmp	r3, r2
    45e6:	f280 80e8 	bge.w	47ba <_realloc_r+0x256>
    45ea:	4639      	mov	r1, r7
    45ec:	4640      	mov	r0, r8
    45ee:	f7ff fcf1 	bl	3fd4 <_malloc_r>
    45f2:	4607      	mov	r7, r0
    45f4:	b1e0      	cbz	r0, 4630 <_realloc_r+0xcc>
    45f6:	f854 3c04 	ldr.w	r3, [r4, #-4]
    45fa:	f023 0301 	bic.w	r3, r3, #1
    45fe:	444b      	add	r3, r9
    4600:	f1a0 0208 	sub.w	r2, r0, #8
    4604:	4293      	cmp	r3, r2
    4606:	f000 80d2 	beq.w	47ae <_realloc_r+0x24a>
    460a:	1f32      	subs	r2, r6, #4
    460c:	2a24      	cmp	r2, #36	; 0x24
    460e:	f200 80f5 	bhi.w	47fc <_realloc_r+0x298>
    4612:	2a13      	cmp	r2, #19
    4614:	f200 80ac 	bhi.w	4770 <_realloc_r+0x20c>
    4618:	4603      	mov	r3, r0
    461a:	4622      	mov	r2, r4
    461c:	6811      	ldr	r1, [r2, #0]
    461e:	6019      	str	r1, [r3, #0]
    4620:	6851      	ldr	r1, [r2, #4]
    4622:	6059      	str	r1, [r3, #4]
    4624:	6892      	ldr	r2, [r2, #8]
    4626:	609a      	str	r2, [r3, #8]
    4628:	4621      	mov	r1, r4
    462a:	4640      	mov	r0, r8
    462c:	f002 f8ba 	bl	67a4 <_free_r>
    4630:	4640      	mov	r0, r8
    4632:	f7ff ff85 	bl	4540 <__malloc_unlock>
    4636:	4638      	mov	r0, r7
    4638:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    463c:	f025 0507 	bic.w	r5, r5, #7
    4640:	2d00      	cmp	r5, #0
    4642:	462a      	mov	r2, r5
    4644:	daa0      	bge.n	4588 <_realloc_r+0x24>
    4646:	230c      	movs	r3, #12
    4648:	f8c8 3000 	str.w	r3, [r8]
    464c:	2700      	movs	r7, #0
    464e:	4638      	mov	r0, r7
    4650:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4654:	461e      	mov	r6, r3
    4656:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    465a:	60d3      	str	r3, [r2, #12]
    465c:	609a      	str	r2, [r3, #8]
    465e:	1b73      	subs	r3, r6, r5
    4660:	2b0f      	cmp	r3, #15
    4662:	d822      	bhi.n	46aa <_realloc_r+0x146>
    4664:	f8d9 3004 	ldr.w	r3, [r9, #4]
    4668:	f003 0301 	and.w	r3, r3, #1
    466c:	4333      	orrs	r3, r6
    466e:	444e      	add	r6, r9
    4670:	f8c9 3004 	str.w	r3, [r9, #4]
    4674:	6873      	ldr	r3, [r6, #4]
    4676:	f043 0301 	orr.w	r3, r3, #1
    467a:	6073      	str	r3, [r6, #4]
    467c:	4640      	mov	r0, r8
    467e:	4627      	mov	r7, r4
    4680:	f7ff ff5e 	bl	4540 <__malloc_unlock>
    4684:	4638      	mov	r0, r7
    4686:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    468a:	07c9      	lsls	r1, r1, #31
    468c:	d4ad      	bmi.n	45ea <_realloc_r+0x86>
    468e:	f854 3c08 	ldr.w	r3, [r4, #-8]
    4692:	eba9 0a03 	sub.w	sl, r9, r3
    4696:	f8da 1004 	ldr.w	r1, [sl, #4]
    469a:	f021 0103 	bic.w	r1, r1, #3
    469e:	e7a0      	b.n	45e2 <_realloc_r+0x7e>
    46a0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    46a4:	4611      	mov	r1, r2
    46a6:	f7ff bc95 	b.w	3fd4 <_malloc_r>
    46aa:	f8d9 2004 	ldr.w	r2, [r9, #4]
    46ae:	eb09 0105 	add.w	r1, r9, r5
    46b2:	f002 0201 	and.w	r2, r2, #1
    46b6:	444e      	add	r6, r9
    46b8:	f043 0301 	orr.w	r3, r3, #1
    46bc:	432a      	orrs	r2, r5
    46be:	f8c9 2004 	str.w	r2, [r9, #4]
    46c2:	604b      	str	r3, [r1, #4]
    46c4:	6873      	ldr	r3, [r6, #4]
    46c6:	f043 0301 	orr.w	r3, r3, #1
    46ca:	3108      	adds	r1, #8
    46cc:	6073      	str	r3, [r6, #4]
    46ce:	4640      	mov	r0, r8
    46d0:	f002 f868 	bl	67a4 <_free_r>
    46d4:	e7d2      	b.n	467c <_realloc_r+0x118>
    46d6:	f8dc 0004 	ldr.w	r0, [ip, #4]
    46da:	f020 0b03 	bic.w	fp, r0, #3
    46de:	eb06 0c0b 	add.w	ip, r6, fp
    46e2:	f105 0010 	add.w	r0, r5, #16
    46e6:	4584      	cmp	ip, r0
    46e8:	da4d      	bge.n	4786 <_realloc_r+0x222>
    46ea:	07c9      	lsls	r1, r1, #31
    46ec:	f53f af7d 	bmi.w	45ea <_realloc_r+0x86>
    46f0:	f854 1c08 	ldr.w	r1, [r4, #-8]
    46f4:	eba9 0a01 	sub.w	sl, r9, r1
    46f8:	f8da 1004 	ldr.w	r1, [sl, #4]
    46fc:	f021 0103 	bic.w	r1, r1, #3
    4700:	448b      	add	fp, r1
    4702:	44b3      	add	fp, r6
    4704:	4558      	cmp	r0, fp
    4706:	f73f af6c 	bgt.w	45e2 <_realloc_r+0x7e>
    470a:	4657      	mov	r7, sl
    470c:	f8da 100c 	ldr.w	r1, [sl, #12]
    4710:	f857 0f08 	ldr.w	r0, [r7, #8]!
    4714:	1f32      	subs	r2, r6, #4
    4716:	2a24      	cmp	r2, #36	; 0x24
    4718:	60c1      	str	r1, [r0, #12]
    471a:	6088      	str	r0, [r1, #8]
    471c:	f200 80db 	bhi.w	48d6 <_realloc_r+0x372>
    4720:	2a13      	cmp	r2, #19
    4722:	f240 80d6 	bls.w	48d2 <_realloc_r+0x36e>
    4726:	6821      	ldr	r1, [r4, #0]
    4728:	f8ca 1008 	str.w	r1, [sl, #8]
    472c:	6861      	ldr	r1, [r4, #4]
    472e:	f8ca 100c 	str.w	r1, [sl, #12]
    4732:	2a1b      	cmp	r2, #27
    4734:	f200 80df 	bhi.w	48f6 <_realloc_r+0x392>
    4738:	3408      	adds	r4, #8
    473a:	f10a 0210 	add.w	r2, sl, #16
    473e:	6821      	ldr	r1, [r4, #0]
    4740:	6011      	str	r1, [r2, #0]
    4742:	6861      	ldr	r1, [r4, #4]
    4744:	6051      	str	r1, [r2, #4]
    4746:	68a1      	ldr	r1, [r4, #8]
    4748:	6091      	str	r1, [r2, #8]
    474a:	eb0a 0105 	add.w	r1, sl, r5
    474e:	ebab 0205 	sub.w	r2, fp, r5
    4752:	f042 0201 	orr.w	r2, r2, #1
    4756:	6099      	str	r1, [r3, #8]
    4758:	604a      	str	r2, [r1, #4]
    475a:	f8da 3004 	ldr.w	r3, [sl, #4]
    475e:	f003 0301 	and.w	r3, r3, #1
    4762:	432b      	orrs	r3, r5
    4764:	4640      	mov	r0, r8
    4766:	f8ca 3004 	str.w	r3, [sl, #4]
    476a:	f7ff fee9 	bl	4540 <__malloc_unlock>
    476e:	e76e      	b.n	464e <_realloc_r+0xea>
    4770:	6823      	ldr	r3, [r4, #0]
    4772:	6003      	str	r3, [r0, #0]
    4774:	6863      	ldr	r3, [r4, #4]
    4776:	6043      	str	r3, [r0, #4]
    4778:	2a1b      	cmp	r2, #27
    477a:	d868      	bhi.n	484e <_realloc_r+0x2ea>
    477c:	f104 0208 	add.w	r2, r4, #8
    4780:	f100 0308 	add.w	r3, r0, #8
    4784:	e74a      	b.n	461c <_realloc_r+0xb8>
    4786:	eb09 0205 	add.w	r2, r9, r5
    478a:	609a      	str	r2, [r3, #8]
    478c:	ebac 0305 	sub.w	r3, ip, r5
    4790:	f043 0301 	orr.w	r3, r3, #1
    4794:	6053      	str	r3, [r2, #4]
    4796:	f854 3c04 	ldr.w	r3, [r4, #-4]
    479a:	f003 0301 	and.w	r3, r3, #1
    479e:	432b      	orrs	r3, r5
    47a0:	4640      	mov	r0, r8
    47a2:	f844 3c04 	str.w	r3, [r4, #-4]
    47a6:	f7ff fecb 	bl	4540 <__malloc_unlock>
    47aa:	4627      	mov	r7, r4
    47ac:	e74f      	b.n	464e <_realloc_r+0xea>
    47ae:	f850 3c04 	ldr.w	r3, [r0, #-4]
    47b2:	f023 0303 	bic.w	r3, r3, #3
    47b6:	441e      	add	r6, r3
    47b8:	e751      	b.n	465e <_realloc_r+0xfa>
    47ba:	4657      	mov	r7, sl
    47bc:	f8da 100c 	ldr.w	r1, [sl, #12]
    47c0:	f857 0f08 	ldr.w	r0, [r7, #8]!
    47c4:	1f32      	subs	r2, r6, #4
    47c6:	2a24      	cmp	r2, #36	; 0x24
    47c8:	60c1      	str	r1, [r0, #12]
    47ca:	6088      	str	r0, [r1, #8]
    47cc:	d84c      	bhi.n	4868 <_realloc_r+0x304>
    47ce:	2a13      	cmp	r2, #19
    47d0:	d948      	bls.n	4864 <_realloc_r+0x300>
    47d2:	6821      	ldr	r1, [r4, #0]
    47d4:	f8ca 1008 	str.w	r1, [sl, #8]
    47d8:	6861      	ldr	r1, [r4, #4]
    47da:	f8ca 100c 	str.w	r1, [sl, #12]
    47de:	2a1b      	cmp	r2, #27
    47e0:	d856      	bhi.n	4890 <_realloc_r+0x32c>
    47e2:	3408      	adds	r4, #8
    47e4:	f10a 0210 	add.w	r2, sl, #16
    47e8:	461e      	mov	r6, r3
    47ea:	6823      	ldr	r3, [r4, #0]
    47ec:	6013      	str	r3, [r2, #0]
    47ee:	6863      	ldr	r3, [r4, #4]
    47f0:	6053      	str	r3, [r2, #4]
    47f2:	68a3      	ldr	r3, [r4, #8]
    47f4:	6093      	str	r3, [r2, #8]
    47f6:	46d1      	mov	r9, sl
    47f8:	463c      	mov	r4, r7
    47fa:	e730      	b.n	465e <_realloc_r+0xfa>
    47fc:	4621      	mov	r1, r4
    47fe:	f001 fa8f 	bl	5d20 <memmove>
    4802:	e711      	b.n	4628 <_realloc_r+0xc4>
    4804:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
    4808:	4657      	mov	r7, sl
    480a:	60cb      	str	r3, [r1, #12]
    480c:	6099      	str	r1, [r3, #8]
    480e:	f857 1f08 	ldr.w	r1, [r7, #8]!
    4812:	f8da 300c 	ldr.w	r3, [sl, #12]
    4816:	60cb      	str	r3, [r1, #12]
    4818:	1f32      	subs	r2, r6, #4
    481a:	2a24      	cmp	r2, #36	; 0x24
    481c:	6099      	str	r1, [r3, #8]
    481e:	d82d      	bhi.n	487c <_realloc_r+0x318>
    4820:	2a13      	cmp	r2, #19
    4822:	d929      	bls.n	4878 <_realloc_r+0x314>
    4824:	6823      	ldr	r3, [r4, #0]
    4826:	f8ca 3008 	str.w	r3, [sl, #8]
    482a:	6863      	ldr	r3, [r4, #4]
    482c:	f8ca 300c 	str.w	r3, [sl, #12]
    4830:	2a1b      	cmp	r2, #27
    4832:	d842      	bhi.n	48ba <_realloc_r+0x356>
    4834:	3408      	adds	r4, #8
    4836:	f10a 0310 	add.w	r3, sl, #16
    483a:	6822      	ldr	r2, [r4, #0]
    483c:	601a      	str	r2, [r3, #0]
    483e:	6862      	ldr	r2, [r4, #4]
    4840:	605a      	str	r2, [r3, #4]
    4842:	68a2      	ldr	r2, [r4, #8]
    4844:	609a      	str	r2, [r3, #8]
    4846:	4666      	mov	r6, ip
    4848:	46d1      	mov	r9, sl
    484a:	463c      	mov	r4, r7
    484c:	e707      	b.n	465e <_realloc_r+0xfa>
    484e:	68a3      	ldr	r3, [r4, #8]
    4850:	6083      	str	r3, [r0, #8]
    4852:	68e3      	ldr	r3, [r4, #12]
    4854:	60c3      	str	r3, [r0, #12]
    4856:	2a24      	cmp	r2, #36	; 0x24
    4858:	d026      	beq.n	48a8 <_realloc_r+0x344>
    485a:	f104 0210 	add.w	r2, r4, #16
    485e:	f100 0310 	add.w	r3, r0, #16
    4862:	e6db      	b.n	461c <_realloc_r+0xb8>
    4864:	463a      	mov	r2, r7
    4866:	e7bf      	b.n	47e8 <_realloc_r+0x284>
    4868:	4621      	mov	r1, r4
    486a:	4638      	mov	r0, r7
    486c:	461e      	mov	r6, r3
    486e:	46d1      	mov	r9, sl
    4870:	f001 fa56 	bl	5d20 <memmove>
    4874:	463c      	mov	r4, r7
    4876:	e6f2      	b.n	465e <_realloc_r+0xfa>
    4878:	463b      	mov	r3, r7
    487a:	e7de      	b.n	483a <_realloc_r+0x2d6>
    487c:	4621      	mov	r1, r4
    487e:	4638      	mov	r0, r7
    4880:	4666      	mov	r6, ip
    4882:	46d1      	mov	r9, sl
    4884:	f001 fa4c 	bl	5d20 <memmove>
    4888:	463c      	mov	r4, r7
    488a:	e6e8      	b.n	465e <_realloc_r+0xfa>
    488c:	20007ddc 	.word	0x20007ddc
    4890:	68a1      	ldr	r1, [r4, #8]
    4892:	f8ca 1010 	str.w	r1, [sl, #16]
    4896:	68e1      	ldr	r1, [r4, #12]
    4898:	f8ca 1014 	str.w	r1, [sl, #20]
    489c:	2a24      	cmp	r2, #36	; 0x24
    489e:	d020      	beq.n	48e2 <_realloc_r+0x37e>
    48a0:	3410      	adds	r4, #16
    48a2:	f10a 0218 	add.w	r2, sl, #24
    48a6:	e79f      	b.n	47e8 <_realloc_r+0x284>
    48a8:	6923      	ldr	r3, [r4, #16]
    48aa:	6103      	str	r3, [r0, #16]
    48ac:	6961      	ldr	r1, [r4, #20]
    48ae:	6141      	str	r1, [r0, #20]
    48b0:	f104 0218 	add.w	r2, r4, #24
    48b4:	f100 0318 	add.w	r3, r0, #24
    48b8:	e6b0      	b.n	461c <_realloc_r+0xb8>
    48ba:	68a3      	ldr	r3, [r4, #8]
    48bc:	f8ca 3010 	str.w	r3, [sl, #16]
    48c0:	68e3      	ldr	r3, [r4, #12]
    48c2:	f8ca 3014 	str.w	r3, [sl, #20]
    48c6:	2a24      	cmp	r2, #36	; 0x24
    48c8:	d021      	beq.n	490e <_realloc_r+0x3aa>
    48ca:	3410      	adds	r4, #16
    48cc:	f10a 0318 	add.w	r3, sl, #24
    48d0:	e7b3      	b.n	483a <_realloc_r+0x2d6>
    48d2:	463a      	mov	r2, r7
    48d4:	e733      	b.n	473e <_realloc_r+0x1da>
    48d6:	4621      	mov	r1, r4
    48d8:	4638      	mov	r0, r7
    48da:	f001 fa21 	bl	5d20 <memmove>
    48de:	4b16      	ldr	r3, [pc, #88]	; (4938 <_realloc_r+0x3d4>)
    48e0:	e733      	b.n	474a <_realloc_r+0x1e6>
    48e2:	6922      	ldr	r2, [r4, #16]
    48e4:	f8ca 2018 	str.w	r2, [sl, #24]
    48e8:	6962      	ldr	r2, [r4, #20]
    48ea:	f8ca 201c 	str.w	r2, [sl, #28]
    48ee:	3418      	adds	r4, #24
    48f0:	f10a 0220 	add.w	r2, sl, #32
    48f4:	e778      	b.n	47e8 <_realloc_r+0x284>
    48f6:	68a1      	ldr	r1, [r4, #8]
    48f8:	f8ca 1010 	str.w	r1, [sl, #16]
    48fc:	68e1      	ldr	r1, [r4, #12]
    48fe:	f8ca 1014 	str.w	r1, [sl, #20]
    4902:	2a24      	cmp	r2, #36	; 0x24
    4904:	d00d      	beq.n	4922 <_realloc_r+0x3be>
    4906:	3410      	adds	r4, #16
    4908:	f10a 0218 	add.w	r2, sl, #24
    490c:	e717      	b.n	473e <_realloc_r+0x1da>
    490e:	6923      	ldr	r3, [r4, #16]
    4910:	f8ca 3018 	str.w	r3, [sl, #24]
    4914:	6963      	ldr	r3, [r4, #20]
    4916:	f8ca 301c 	str.w	r3, [sl, #28]
    491a:	3418      	adds	r4, #24
    491c:	f10a 0320 	add.w	r3, sl, #32
    4920:	e78b      	b.n	483a <_realloc_r+0x2d6>
    4922:	6922      	ldr	r2, [r4, #16]
    4924:	f8ca 2018 	str.w	r2, [sl, #24]
    4928:	6962      	ldr	r2, [r4, #20]
    492a:	f8ca 201c 	str.w	r2, [sl, #28]
    492e:	3418      	adds	r4, #24
    4930:	f10a 0220 	add.w	r2, sl, #32
    4934:	e703      	b.n	473e <_realloc_r+0x1da>
    4936:	bf00      	nop
    4938:	20007ddc 	.word	0x20007ddc
    493c:	00000000 	.word	0x00000000

00004940 <_strtod_l>:
    4940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4944:	ed2d 8b10 	vpush	{d8-d15}
    4948:	b097      	sub	sp, #92	; 0x5c
    494a:	468a      	mov	sl, r1
    494c:	2100      	movs	r1, #0
    494e:	9207      	str	r2, [sp, #28]
    4950:	9112      	str	r1, [sp, #72]	; 0x48
    4952:	2200      	movs	r2, #0
    4954:	2100      	movs	r1, #0
    4956:	e9cd 1204 	strd	r1, r2, [sp, #16]
    495a:	4680      	mov	r8, r0
    495c:	4651      	mov	r1, sl
    495e:	9111      	str	r1, [sp, #68]	; 0x44
    4960:	460f      	mov	r7, r1
    4962:	f811 2b01 	ldrb.w	r2, [r1], #1
    4966:	2a2d      	cmp	r2, #45	; 0x2d
    4968:	d85e      	bhi.n	4a28 <_strtod_l+0xe8>
    496a:	a001      	add	r0, pc, #4	; (adr r0, 4970 <_strtod_l+0x30>)
    496c:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
    4970:	00004b11 	.word	0x00004b11
    4974:	00004a29 	.word	0x00004a29
    4978:	00004a29 	.word	0x00004a29
    497c:	00004a29 	.word	0x00004a29
    4980:	00004a29 	.word	0x00004a29
    4984:	00004a29 	.word	0x00004a29
    4988:	00004a29 	.word	0x00004a29
    498c:	00004a29 	.word	0x00004a29
    4990:	00004a29 	.word	0x00004a29
    4994:	0000495f 	.word	0x0000495f
    4998:	0000495f 	.word	0x0000495f
    499c:	0000495f 	.word	0x0000495f
    49a0:	0000495f 	.word	0x0000495f
    49a4:	0000495f 	.word	0x0000495f
    49a8:	00004a29 	.word	0x00004a29
    49ac:	00004a29 	.word	0x00004a29
    49b0:	00004a29 	.word	0x00004a29
    49b4:	00004a29 	.word	0x00004a29
    49b8:	00004a29 	.word	0x00004a29
    49bc:	00004a29 	.word	0x00004a29
    49c0:	00004a29 	.word	0x00004a29
    49c4:	00004a29 	.word	0x00004a29
    49c8:	00004a29 	.word	0x00004a29
    49cc:	00004a29 	.word	0x00004a29
    49d0:	00004a29 	.word	0x00004a29
    49d4:	00004a29 	.word	0x00004a29
    49d8:	00004a29 	.word	0x00004a29
    49dc:	00004a29 	.word	0x00004a29
    49e0:	00004a29 	.word	0x00004a29
    49e4:	00004a29 	.word	0x00004a29
    49e8:	00004a29 	.word	0x00004a29
    49ec:	00004a29 	.word	0x00004a29
    49f0:	0000495f 	.word	0x0000495f
    49f4:	00004a29 	.word	0x00004a29
    49f8:	00004a29 	.word	0x00004a29
    49fc:	00004a29 	.word	0x00004a29
    4a00:	00004a29 	.word	0x00004a29
    4a04:	00004a29 	.word	0x00004a29
    4a08:	00004a29 	.word	0x00004a29
    4a0c:	00004a29 	.word	0x00004a29
    4a10:	00004a29 	.word	0x00004a29
    4a14:	00004a29 	.word	0x00004a29
    4a18:	00004a29 	.word	0x00004a29
    4a1c:	0000514b 	.word	0x0000514b
    4a20:	00004a29 	.word	0x00004a29
    4a24:	00005137 	.word	0x00005137
    4a28:	2100      	movs	r1, #0
    4a2a:	9109      	str	r1, [sp, #36]	; 0x24
    4a2c:	2a30      	cmp	r2, #48	; 0x30
    4a2e:	d07d      	beq.n	4b2c <_strtod_l+0x1ec>
    4a30:	2300      	movs	r3, #0
    4a32:	9308      	str	r3, [sp, #32]
    4a34:	2a2f      	cmp	r2, #47	; 0x2f
    4a36:	4614      	mov	r4, r2
    4a38:	f240 84cd 	bls.w	53d6 <_strtod_l+0xa96>
    4a3c:	f04f 0900 	mov.w	r9, #0
    4a40:	4638      	mov	r0, r7
    4a42:	464e      	mov	r6, r9
    4a44:	464d      	mov	r5, r9
    4a46:	e012      	b.n	4a6e <_strtod_l+0x12e>
    4a48:	3001      	adds	r0, #1
    4a4a:	2d08      	cmp	r5, #8
    4a4c:	9011      	str	r0, [sp, #68]	; 0x44
    4a4e:	bfc8      	it	gt
    4a50:	eb09 0989 	addgt.w	r9, r9, r9, lsl #2
    4a54:	7804      	ldrb	r4, [r0, #0]
    4a56:	bfc6      	itte	gt
    4a58:	eb02 0249 	addgt.w	r2, r2, r9, lsl #1
    4a5c:	f1a2 0930 	subgt.w	r9, r2, #48	; 0x30
    4a60:	f1a3 0630 	suble.w	r6, r3, #48	; 0x30
    4a64:	2c2f      	cmp	r4, #47	; 0x2f
    4a66:	f105 0501 	add.w	r5, r5, #1
    4a6a:	4622      	mov	r2, r4
    4a6c:	dd6f      	ble.n	4b4e <_strtod_l+0x20e>
    4a6e:	eb06 0386 	add.w	r3, r6, r6, lsl #2
    4a72:	2c39      	cmp	r4, #57	; 0x39
    4a74:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    4a78:	dde6      	ble.n	4a48 <_strtod_l+0x108>
    4a7a:	499f      	ldr	r1, [pc, #636]	; (4cf8 <_strtod_l+0x3b8>)
    4a7c:	2201      	movs	r2, #1
    4a7e:	f001 fa83 	bl	5f88 <strncmp>
    4a82:	2800      	cmp	r0, #0
    4a84:	d137      	bne.n	4af6 <_strtod_l+0x1b6>
    4a86:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4a88:	461a      	mov	r2, r3
    4a8a:	3301      	adds	r3, #1
    4a8c:	9311      	str	r3, [sp, #68]	; 0x44
    4a8e:	7854      	ldrb	r4, [r2, #1]
    4a90:	2d00      	cmp	r5, #0
    4a92:	f040 8543 	bne.w	551c <_strtod_l+0xbdc>
    4a96:	2c30      	cmp	r4, #48	; 0x30
    4a98:	f040 8524 	bne.w	54e4 <_strtod_l+0xba4>
    4a9c:	f1c3 0201 	rsb	r2, r3, #1
    4aa0:	1898      	adds	r0, r3, r2
    4aa2:	3301      	adds	r3, #1
    4aa4:	9311      	str	r3, [sp, #68]	; 0x44
    4aa6:	781c      	ldrb	r4, [r3, #0]
    4aa8:	2c30      	cmp	r4, #48	; 0x30
    4aaa:	d0f9      	beq.n	4aa0 <_strtod_l+0x160>
    4aac:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
    4ab0:	2b08      	cmp	r3, #8
    4ab2:	f200 8301 	bhi.w	50b8 <_strtod_l+0x778>
    4ab6:	9f11      	ldr	r7, [sp, #68]	; 0x44
    4ab8:	1c43      	adds	r3, r0, #1
    4aba:	f1a4 0b30 	sub.w	fp, r4, #48	; 0x30
    4abe:	930b      	str	r3, [sp, #44]	; 0x2c
    4ac0:	2501      	movs	r5, #1
    4ac2:	46bc      	mov	ip, r7
    4ac4:	f04f 0e00 	mov.w	lr, #0
    4ac8:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    4acc:	eb0b 0646 	add.w	r6, fp, r6, lsl #1
    4ad0:	2000      	movs	r0, #0
    4ad2:	f10c 0301 	add.w	r3, ip, #1
    4ad6:	9311      	str	r3, [sp, #68]	; 0x44
    4ad8:	f89c 4001 	ldrb.w	r4, [ip, #1]
    4adc:	f1a4 0130 	sub.w	r1, r4, #48	; 0x30
    4ae0:	2909      	cmp	r1, #9
    4ae2:	f200 82bb 	bhi.w	505c <_strtod_l+0x71c>
    4ae6:	3001      	adds	r0, #1
    4ae8:	468b      	mov	fp, r1
    4aea:	2900      	cmp	r1, #0
    4aec:	f040 844f 	bne.w	538e <_strtod_l+0xa4e>
    4af0:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
    4af4:	e7ed      	b.n	4ad2 <_strtod_l+0x192>
    4af6:	2000      	movs	r0, #0
    4af8:	2c65      	cmp	r4, #101	; 0x65
    4afa:	46ae      	mov	lr, r5
    4afc:	900b      	str	r0, [sp, #44]	; 0x2c
    4afe:	4684      	mov	ip, r0
    4b00:	d001      	beq.n	4b06 <_strtod_l+0x1c6>
    4b02:	2c45      	cmp	r4, #69	; 0x45
    4b04:	d130      	bne.n	4b68 <_strtod_l+0x228>
    4b06:	2d00      	cmp	r5, #0
    4b08:	d16b      	bne.n	4be2 <_strtod_l+0x2a2>
    4b0a:	9b08      	ldr	r3, [sp, #32]
    4b0c:	4303      	orrs	r3, r0
    4b0e:	d167      	bne.n	4be0 <_strtod_l+0x2a0>
    4b10:	9b07      	ldr	r3, [sp, #28]
    4b12:	ed9f 8b77 	vldr	d8, [pc, #476]	; 4cf0 <_strtod_l+0x3b0>
    4b16:	b113      	cbz	r3, 4b1e <_strtod_l+0x1de>
    4b18:	9b07      	ldr	r3, [sp, #28]
    4b1a:	f8c3 a000 	str.w	sl, [r3]
    4b1e:	eeb0 0b48 	vmov.f64	d0, d8
    4b22:	b017      	add	sp, #92	; 0x5c
    4b24:	ecbd 8b10 	vpop	{d8-d15}
    4b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4b2c:	787a      	ldrb	r2, [r7, #1]
    4b2e:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    4b32:	2a58      	cmp	r2, #88	; 0x58
    4b34:	f000 840c 	beq.w	5350 <_strtod_l+0xa10>
    4b38:	3701      	adds	r7, #1
    4b3a:	9711      	str	r7, [sp, #68]	; 0x44
    4b3c:	783a      	ldrb	r2, [r7, #0]
    4b3e:	2a30      	cmp	r2, #48	; 0x30
    4b40:	d0fa      	beq.n	4b38 <_strtod_l+0x1f8>
    4b42:	2a00      	cmp	r2, #0
    4b44:	f000 80b7 	beq.w	4cb6 <_strtod_l+0x376>
    4b48:	2301      	movs	r3, #1
    4b4a:	9308      	str	r3, [sp, #32]
    4b4c:	e772      	b.n	4a34 <_strtod_l+0xf4>
    4b4e:	496a      	ldr	r1, [pc, #424]	; (4cf8 <_strtod_l+0x3b8>)
    4b50:	2201      	movs	r2, #1
    4b52:	f001 fa19 	bl	5f88 <strncmp>
    4b56:	2800      	cmp	r0, #0
    4b58:	f000 80c0 	beq.w	4cdc <_strtod_l+0x39c>
    4b5c:	46ae      	mov	lr, r5
    4b5e:	f04f 0c00 	mov.w	ip, #0
    4b62:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
    4b66:	4660      	mov	r0, ip
    4b68:	f04f 0b00 	mov.w	fp, #0
    4b6c:	2d00      	cmp	r5, #0
    4b6e:	d07e      	beq.n	4c6e <_strtod_l+0x32e>
    4b70:	ee07 6a90 	vmov	s15, r6
    4b74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4b76:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    4b7a:	ebab 0303 	sub.w	r3, fp, r3
    4b7e:	f1be 0f00 	cmp.w	lr, #0
    4b82:	bf08      	it	eq
    4b84:	46ae      	moveq	lr, r5
    4b86:	2d10      	cmp	r5, #16
    4b88:	930a      	str	r3, [sp, #40]	; 0x28
    4b8a:	462b      	mov	r3, r5
    4b8c:	bfa8      	it	ge
    4b8e:	2310      	movge	r3, #16
    4b90:	2d09      	cmp	r5, #9
    4b92:	ed8d 7b04 	vstr	d7, [sp, #16]
    4b96:	dd0c      	ble.n	4bb2 <_strtod_l+0x272>
    4b98:	4a58      	ldr	r2, [pc, #352]	; (4cfc <_strtod_l+0x3bc>)
    4b9a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    4b9e:	ed12 5b12 	vldr	d5, [r2, #-72]	; 0xffffffb8
    4ba2:	ee06 9a90 	vmov	s13, r9
    4ba6:	eeb8 6b66 	vcvt.f64.u32	d6, s13
    4baa:	eea7 6b05 	vfma.f64	d6, d7, d5
    4bae:	ed8d 6b04 	vstr	d6, [sp, #16]
    4bb2:	2d0f      	cmp	r5, #15
    4bb4:	f300 80a8 	bgt.w	4d08 <_strtod_l+0x3c8>
    4bb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4bba:	2a00      	cmp	r2, #0
    4bbc:	f000 83e4 	beq.w	5388 <_strtod_l+0xa48>
    4bc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4bc2:	f340 833c 	ble.w	523e <_strtod_l+0x8fe>
    4bc6:	2a16      	cmp	r2, #22
    4bc8:	f340 8498 	ble.w	54fc <_strtod_l+0xbbc>
    4bcc:	990a      	ldr	r1, [sp, #40]	; 0x28
    4bce:	f1c5 0225 	rsb	r2, r5, #37	; 0x25
    4bd2:	428a      	cmp	r2, r1
    4bd4:	f280 84a6 	bge.w	5524 <_strtod_l+0xbe4>
    4bd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4bda:	1aeb      	subs	r3, r5, r3
    4bdc:	4413      	add	r3, r2
    4bde:	e099      	b.n	4d14 <_strtod_l+0x3d4>
    4be0:	2500      	movs	r5, #0
    4be2:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
    4be6:	f10a 0301 	add.w	r3, sl, #1
    4bea:	9311      	str	r3, [sp, #68]	; 0x44
    4bec:	f89a 4001 	ldrb.w	r4, [sl, #1]
    4bf0:	2c2b      	cmp	r4, #43	; 0x2b
    4bf2:	f000 825e 	beq.w	50b2 <_strtod_l+0x772>
    4bf6:	2c2d      	cmp	r4, #45	; 0x2d
    4bf8:	f000 81f7 	beq.w	4fea <_strtod_l+0x6aa>
    4bfc:	2300      	movs	r3, #0
    4bfe:	930a      	str	r3, [sp, #40]	; 0x28
    4c00:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    4c04:	2b09      	cmp	r3, #9
    4c06:	f200 81eb 	bhi.w	4fe0 <_strtod_l+0x6a0>
    4c0a:	2c30      	cmp	r4, #48	; 0x30
    4c0c:	d105      	bne.n	4c1a <_strtod_l+0x2da>
    4c0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4c10:	3301      	adds	r3, #1
    4c12:	9311      	str	r3, [sp, #68]	; 0x44
    4c14:	781c      	ldrb	r4, [r3, #0]
    4c16:	2c30      	cmp	r4, #48	; 0x30
    4c18:	d0fa      	beq.n	4c10 <_strtod_l+0x2d0>
    4c1a:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
    4c1e:	2b08      	cmp	r3, #8
    4c20:	d8a2      	bhi.n	4b68 <_strtod_l+0x228>
    4c22:	9a11      	ldr	r2, [sp, #68]	; 0x44
    4c24:	920c      	str	r2, [sp, #48]	; 0x30
    4c26:	1c53      	adds	r3, r2, #1
    4c28:	9311      	str	r3, [sp, #68]	; 0x44
    4c2a:	f1a4 0b30 	sub.w	fp, r4, #48	; 0x30
    4c2e:	7854      	ldrb	r4, [r2, #1]
    4c30:	2c2f      	cmp	r4, #47	; 0x2f
    4c32:	dc07      	bgt.n	4c44 <_strtod_l+0x304>
    4c34:	e3de      	b.n	53f4 <_strtod_l+0xab4>
    4c36:	3301      	adds	r3, #1
    4c38:	9311      	str	r3, [sp, #68]	; 0x44
    4c3a:	784c      	ldrb	r4, [r1, #1]
    4c3c:	2c2f      	cmp	r4, #47	; 0x2f
    4c3e:	f1a2 0b30 	sub.w	fp, r2, #48	; 0x30
    4c42:	dd06      	ble.n	4c52 <_strtod_l+0x312>
    4c44:	eb0b 028b 	add.w	r2, fp, fp, lsl #2
    4c48:	2c39      	cmp	r4, #57	; 0x39
    4c4a:	4619      	mov	r1, r3
    4c4c:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    4c50:	ddf1      	ble.n	4c36 <_strtod_l+0x2f6>
    4c52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4c54:	1a9b      	subs	r3, r3, r2
    4c56:	2b08      	cmp	r3, #8
    4c58:	f340 83cc 	ble.w	53f4 <_strtod_l+0xab4>
    4c5c:	f644 6b1f 	movw	fp, #19999	; 0x4e1f
    4c60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4c62:	2b00      	cmp	r3, #0
    4c64:	d082      	beq.n	4b6c <_strtod_l+0x22c>
    4c66:	f1cb 0b00 	rsb	fp, fp, #0
    4c6a:	2d00      	cmp	r5, #0
    4c6c:	d180      	bne.n	4b70 <_strtod_l+0x230>
    4c6e:	9b08      	ldr	r3, [sp, #32]
    4c70:	4303      	orrs	r3, r0
    4c72:	d120      	bne.n	4cb6 <_strtod_l+0x376>
    4c74:	f1bc 0f00 	cmp.w	ip, #0
    4c78:	f47f af4a 	bne.w	4b10 <_strtod_l+0x1d0>
    4c7c:	2c69      	cmp	r4, #105	; 0x69
    4c7e:	f000 83cf 	beq.w	5420 <_strtod_l+0xae0>
    4c82:	f300 82f3 	bgt.w	526c <_strtod_l+0x92c>
    4c86:	2c49      	cmp	r4, #73	; 0x49
    4c88:	f000 83ca 	beq.w	5420 <_strtod_l+0xae0>
    4c8c:	2c4e      	cmp	r4, #78	; 0x4e
    4c8e:	f47f af3f 	bne.w	4b10 <_strtod_l+0x1d0>
    4c92:	491b      	ldr	r1, [pc, #108]	; (4d00 <_strtod_l+0x3c0>)
    4c94:	a811      	add	r0, sp, #68	; 0x44
    4c96:	f002 f9a7 	bl	6fe8 <__match>
    4c9a:	2800      	cmp	r0, #0
    4c9c:	f43f af38 	beq.w	4b10 <_strtod_l+0x1d0>
    4ca0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4ca2:	781b      	ldrb	r3, [r3, #0]
    4ca4:	2b28      	cmp	r3, #40	; 0x28
    4ca6:	f000 84f2 	beq.w	568e <_strtod_l+0xd4e>
    4caa:	4816      	ldr	r0, [pc, #88]	; (4d04 <_strtod_l+0x3c4>)
    4cac:	f001 fcd8 	bl	6660 <nan>
    4cb0:	eeb0 8b40 	vmov.f64	d8, d0
    4cb4:	e001      	b.n	4cba <_strtod_l+0x37a>
    4cb6:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 4cf0 <_strtod_l+0x3b0>
    4cba:	9a07      	ldr	r2, [sp, #28]
    4cbc:	b10a      	cbz	r2, 4cc2 <_strtod_l+0x382>
    4cbe:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4cc0:	6013      	str	r3, [r2, #0]
    4cc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4cc4:	2b00      	cmp	r3, #0
    4cc6:	f43f af2a 	beq.w	4b1e <_strtod_l+0x1de>
    4cca:	eeb1 8b48 	vneg.f64	d8, d8
    4cce:	eeb0 0b48 	vmov.f64	d0, d8
    4cd2:	b017      	add	sp, #92	; 0x5c
    4cd4:	ecbd 8b10 	vpop	{d8-d15}
    4cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4cdc:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4cde:	900b      	str	r0, [sp, #44]	; 0x2c
    4ce0:	1c5a      	adds	r2, r3, #1
    4ce2:	9211      	str	r2, [sp, #68]	; 0x44
    4ce4:	785c      	ldrb	r4, [r3, #1]
    4ce6:	46ae      	mov	lr, r5
    4ce8:	e6f8      	b.n	4adc <_strtod_l+0x19c>
    4cea:	bf00      	nop
    4cec:	f3af 8000 	nop.w
	...
    4cf8:	200008b0 	.word	0x200008b0
    4cfc:	200002a8 	.word	0x200002a8
    4d00:	200008c0 	.word	0x200008c0
    4d04:	200077d4 	.word	0x200077d4
    4d08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4d0a:	1aeb      	subs	r3, r5, r3
    4d0c:	4413      	add	r3, r2
    4d0e:	2b00      	cmp	r3, #0
    4d10:	f340 82b0 	ble.w	5274 <_strtod_l+0x934>
    4d14:	f013 010f 	ands.w	r1, r3, #15
    4d18:	d00a      	beq.n	4d30 <_strtod_l+0x3f0>
    4d1a:	4ac3      	ldr	r2, [pc, #780]	; (5028 <_strtod_l+0x6e8>)
    4d1c:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    4d20:	ed9d 6b04 	vldr	d6, [sp, #16]
    4d24:	ed92 7b00 	vldr	d7, [r2]
    4d28:	ee27 7b06 	vmul.f64	d7, d7, d6
    4d2c:	ed8d 7b04 	vstr	d7, [sp, #16]
    4d30:	f033 020f 	bics.w	r2, r3, #15
    4d34:	f040 8238 	bne.w	51a8 <_strtod_l+0x868>
    4d38:	2300      	movs	r3, #0
    4d3a:	9308      	str	r3, [sp, #32]
    4d3c:	9600      	str	r6, [sp, #0]
    4d3e:	462b      	mov	r3, r5
    4d40:	4672      	mov	r2, lr
    4d42:	4639      	mov	r1, r7
    4d44:	4640      	mov	r0, r8
    4d46:	f002 fadb 	bl	7300 <__s2b>
    4d4a:	4681      	mov	r9, r0
    4d4c:	2800      	cmp	r0, #0
    4d4e:	f000 82e1 	beq.w	5314 <_strtod_l+0x9d4>
    4d52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4d54:	eba3 0b0b 	sub.w	fp, r3, fp
    4d58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4d5a:	ed9f eba9 	vldr	d14, [pc, #676]	; 5000 <_strtod_l+0x6c0>
    4d5e:	2b00      	cmp	r3, #0
    4d60:	ed9f cba9 	vldr	d12, [pc, #676]	; 5008 <_strtod_l+0x6c8>
    4d64:	ed9f dbaa 	vldr	d13, [pc, #680]	; 5010 <_strtod_l+0x6d0>
    4d68:	ed9f bbab 	vldr	d11, [pc, #684]	; 5018 <_strtod_l+0x6d8>
    4d6c:	bfb4      	ite	lt
    4d6e:	465a      	movlt	r2, fp
    4d70:	2200      	movge	r2, #0
    4d72:	f04f 0a00 	mov.w	sl, #0
    4d76:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    4d7a:	920b      	str	r2, [sp, #44]	; 0x2c
    4d7c:	930c      	str	r3, [sp, #48]	; 0x30
    4d7e:	4654      	mov	r4, sl
    4d80:	f8d9 1004 	ldr.w	r1, [r9, #4]
    4d84:	4640      	mov	r0, r8
    4d86:	f002 fa39 	bl	71fc <_Balloc>
    4d8a:	4606      	mov	r6, r0
    4d8c:	2800      	cmp	r0, #0
    4d8e:	f000 810e 	beq.w	4fae <_strtod_l+0x66e>
    4d92:	f8d9 2010 	ldr.w	r2, [r9, #16]
    4d96:	ed9d 8b04 	vldr	d8, [sp, #16]
    4d9a:	3202      	adds	r2, #2
    4d9c:	0092      	lsls	r2, r2, #2
    4d9e:	f109 010c 	add.w	r1, r9, #12
    4da2:	300c      	adds	r0, #12
    4da4:	f7fd f9ea 	bl	217c <memcpy>
    4da8:	eeb0 0b48 	vmov.f64	d0, d8
    4dac:	aa14      	add	r2, sp, #80	; 0x50
    4dae:	a913      	add	r1, sp, #76	; 0x4c
    4db0:	4640      	mov	r0, r8
    4db2:	f002 fe61 	bl	7a78 <__d2b>
    4db6:	9012      	str	r0, [sp, #72]	; 0x48
    4db8:	2800      	cmp	r0, #0
    4dba:	f000 80e4 	beq.w	4f86 <_strtod_l+0x646>
    4dbe:	2101      	movs	r1, #1
    4dc0:	4640      	mov	r0, r8
    4dc2:	f002 fb45 	bl	7450 <__i2b>
    4dc6:	4604      	mov	r4, r0
    4dc8:	2800      	cmp	r0, #0
    4dca:	f000 80f0 	beq.w	4fae <_strtod_l+0x66e>
    4dce:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    4dd0:	2a00      	cmp	r2, #0
    4dd2:	f2c0 80de 	blt.w	4f92 <_strtod_l+0x652>
    4dd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4dd8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    4dda:	eb02 0b03 	add.w	fp, r2, r3
    4dde:	9b08      	ldr	r3, [sp, #32]
    4de0:	9d14      	ldr	r5, [sp, #80]	; 0x50
    4de2:	1ad2      	subs	r2, r2, r3
    4de4:	442a      	add	r2, r5
    4de6:	4b91      	ldr	r3, [pc, #580]	; (502c <_strtod_l+0x6ec>)
    4de8:	3a01      	subs	r2, #1
    4dea:	429a      	cmp	r2, r3
    4dec:	f1c5 0536 	rsb	r5, r5, #54	; 0x36
    4df0:	f280 8098 	bge.w	4f24 <_strtod_l+0x5e4>
    4df4:	1a99      	subs	r1, r3, r2
    4df6:	291f      	cmp	r1, #31
    4df8:	eba5 0501 	sub.w	r5, r5, r1
    4dfc:	f300 80e3 	bgt.w	4fc6 <_strtod_l+0x686>
    4e00:	2201      	movs	r2, #1
    4e02:	fa02 f301 	lsl.w	r3, r2, r1
    4e06:	930d      	str	r3, [sp, #52]	; 0x34
    4e08:	2300      	movs	r3, #0
    4e0a:	930e      	str	r3, [sp, #56]	; 0x38
    4e0c:	442f      	add	r7, r5
    4e0e:	9b08      	ldr	r3, [sp, #32]
    4e10:	445d      	add	r5, fp
    4e12:	45ab      	cmp	fp, r5
    4e14:	465a      	mov	r2, fp
    4e16:	441f      	add	r7, r3
    4e18:	bfa8      	it	ge
    4e1a:	462a      	movge	r2, r5
    4e1c:	42ba      	cmp	r2, r7
    4e1e:	bfa8      	it	ge
    4e20:	463a      	movge	r2, r7
    4e22:	2a00      	cmp	r2, #0
    4e24:	dd03      	ble.n	4e2e <_strtod_l+0x4ee>
    4e26:	1aad      	subs	r5, r5, r2
    4e28:	1abf      	subs	r7, r7, r2
    4e2a:	ebab 0b02 	sub.w	fp, fp, r2
    4e2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4e30:	2b00      	cmp	r3, #0
    4e32:	f300 8088 	bgt.w	4f46 <_strtod_l+0x606>
    4e36:	2d00      	cmp	r5, #0
    4e38:	f300 809c 	bgt.w	4f74 <_strtod_l+0x634>
    4e3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4e3e:	2b00      	cmp	r3, #0
    4e40:	f300 80b7 	bgt.w	4fb2 <_strtod_l+0x672>
    4e44:	2f00      	cmp	r7, #0
    4e46:	f300 80a9 	bgt.w	4f9c <_strtod_l+0x65c>
    4e4a:	f1bb 0f00 	cmp.w	fp, #0
    4e4e:	dd08      	ble.n	4e62 <_strtod_l+0x522>
    4e50:	4621      	mov	r1, r4
    4e52:	465a      	mov	r2, fp
    4e54:	4640      	mov	r0, r8
    4e56:	f002 fc37 	bl	76c8 <__lshift>
    4e5a:	4604      	mov	r4, r0
    4e5c:	2800      	cmp	r0, #0
    4e5e:	f000 80a6 	beq.w	4fae <_strtod_l+0x66e>
    4e62:	9912      	ldr	r1, [sp, #72]	; 0x48
    4e64:	4632      	mov	r2, r6
    4e66:	4640      	mov	r0, r8
    4e68:	f002 fcc8 	bl	77fc <__mdiff>
    4e6c:	4682      	mov	sl, r0
    4e6e:	2800      	cmp	r0, #0
    4e70:	f000 809d 	beq.w	4fae <_strtod_l+0x66e>
    4e74:	2300      	movs	r3, #0
    4e76:	68c5      	ldr	r5, [r0, #12]
    4e78:	60c3      	str	r3, [r0, #12]
    4e7a:	4621      	mov	r1, r4
    4e7c:	f002 fc9c 	bl	77b8 <__mcmp>
    4e80:	2800      	cmp	r0, #0
    4e82:	f2c0 83c7 	blt.w	5614 <_strtod_l+0xcd4>
    4e86:	f000 8361 	beq.w	554c <_strtod_l+0xc0c>
    4e8a:	4621      	mov	r1, r4
    4e8c:	4650      	mov	r0, sl
    4e8e:	f002 fe5d 	bl	7b4c <__ratio>
    4e92:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
    4e96:	eeb4 0bc7 	vcmpe.f64	d0, d7
    4e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4e9e:	d846      	bhi.n	4f2e <_strtod_l+0x5ee>
    4ea0:	2d00      	cmp	r5, #0
    4ea2:	f000 80cb 	beq.w	503c <_strtod_l+0x6fc>
    4ea6:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
    4eaa:	9805      	ldr	r0, [sp, #20]
    4eac:	4b60      	ldr	r3, [pc, #384]	; (5030 <_strtod_l+0x6f0>)
    4eae:	2200      	movs	r2, #0
    4eb0:	4960      	ldr	r1, [pc, #384]	; (5034 <_strtod_l+0x6f4>)
    4eb2:	f8df c184 	ldr.w	ip, [pc, #388]	; 5038 <_strtod_l+0x6f8>
    4eb6:	ea00 0701 	and.w	r7, r0, r1
    4eba:	4567      	cmp	r7, ip
    4ebc:	f000 80d4 	beq.w	5068 <_strtod_l+0x728>
    4ec0:	9908      	ldr	r1, [sp, #32]
    4ec2:	b159      	cbz	r1, 4edc <_strtod_l+0x59c>
    4ec4:	f1b7 6fd4 	cmp.w	r7, #111149056	; 0x6a00000
    4ec8:	d808      	bhi.n	4edc <_strtod_l+0x59c>
    4eca:	eeb4 9bcb 	vcmpe.f64	d9, d11
    4ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4ed2:	f240 8156 	bls.w	5182 <_strtod_l+0x842>
    4ed6:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
    4eda:	1bcb      	subs	r3, r1, r7
    4edc:	eeb0 0b48 	vmov.f64	d0, d8
    4ee0:	ec43 2b1a 	vmov	d10, r2, r3
    4ee4:	f002 fd34 	bl	7950 <__ulp>
    4ee8:	eeaa 8b00 	vfma.f64	d8, d10, d0
    4eec:	ed8d 8b04 	vstr	d8, [sp, #16]
    4ef0:	ee18 3a90 	vmov	r3, s17
    4ef4:	9a08      	ldr	r2, [sp, #32]
    4ef6:	b922      	cbnz	r2, 4f02 <_strtod_l+0x5c2>
    4ef8:	4a4e      	ldr	r2, [pc, #312]	; (5034 <_strtod_l+0x6f4>)
    4efa:	401a      	ands	r2, r3
    4efc:	4297      	cmp	r7, r2
    4efe:	f000 80e4 	beq.w	50ca <_strtod_l+0x78a>
    4f02:	9912      	ldr	r1, [sp, #72]	; 0x48
    4f04:	4640      	mov	r0, r8
    4f06:	f002 f99f 	bl	7248 <_Bfree>
    4f0a:	4631      	mov	r1, r6
    4f0c:	4640      	mov	r0, r8
    4f0e:	f002 f99b 	bl	7248 <_Bfree>
    4f12:	4621      	mov	r1, r4
    4f14:	4640      	mov	r0, r8
    4f16:	f002 f997 	bl	7248 <_Bfree>
    4f1a:	4651      	mov	r1, sl
    4f1c:	4640      	mov	r0, r8
    4f1e:	f002 f993 	bl	7248 <_Bfree>
    4f22:	e72d      	b.n	4d80 <_strtod_l+0x440>
    4f24:	2301      	movs	r3, #1
    4f26:	2100      	movs	r1, #0
    4f28:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
    4f2c:	e76e      	b.n	4e0c <_strtod_l+0x4cc>
    4f2e:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
    4f32:	ee20 9b09 	vmul.f64	d9, d0, d9
    4f36:	2d00      	cmp	r5, #0
    4f38:	d15f      	bne.n	4ffa <_strtod_l+0x6ba>
    4f3a:	eeb1 7b49 	vneg.f64	d7, d9
    4f3e:	9805      	ldr	r0, [sp, #20]
    4f40:	ec53 2b17 	vmov	r2, r3, d7
    4f44:	e7b4      	b.n	4eb0 <_strtod_l+0x570>
    4f46:	4621      	mov	r1, r4
    4f48:	461a      	mov	r2, r3
    4f4a:	4640      	mov	r0, r8
    4f4c:	f002 fb5c 	bl	7608 <__pow5mult>
    4f50:	4604      	mov	r4, r0
    4f52:	b360      	cbz	r0, 4fae <_strtod_l+0x66e>
    4f54:	4601      	mov	r1, r0
    4f56:	9a12      	ldr	r2, [sp, #72]	; 0x48
    4f58:	4640      	mov	r0, r8
    4f5a:	f002 faa7 	bl	74ac <__multiply>
    4f5e:	b330      	cbz	r0, 4fae <_strtod_l+0x66e>
    4f60:	900f      	str	r0, [sp, #60]	; 0x3c
    4f62:	9912      	ldr	r1, [sp, #72]	; 0x48
    4f64:	4640      	mov	r0, r8
    4f66:	f002 f96f 	bl	7248 <_Bfree>
    4f6a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    4f6c:	9212      	str	r2, [sp, #72]	; 0x48
    4f6e:	2d00      	cmp	r5, #0
    4f70:	f77f af64 	ble.w	4e3c <_strtod_l+0x4fc>
    4f74:	9912      	ldr	r1, [sp, #72]	; 0x48
    4f76:	462a      	mov	r2, r5
    4f78:	4640      	mov	r0, r8
    4f7a:	f002 fba5 	bl	76c8 <__lshift>
    4f7e:	9012      	str	r0, [sp, #72]	; 0x48
    4f80:	2800      	cmp	r0, #0
    4f82:	f47f af5b 	bne.w	4e3c <_strtod_l+0x4fc>
    4f86:	2322      	movs	r3, #34	; 0x22
    4f88:	ed9f 8b25 	vldr	d8, [pc, #148]	; 5020 <_strtod_l+0x6e0>
    4f8c:	f8c8 3000 	str.w	r3, [r8]
    4f90:	e0bc      	b.n	510c <_strtod_l+0x7cc>
    4f92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4f94:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
    4f98:	1a9f      	subs	r7, r3, r2
    4f9a:	e720      	b.n	4dde <_strtod_l+0x49e>
    4f9c:	4631      	mov	r1, r6
    4f9e:	463a      	mov	r2, r7
    4fa0:	4640      	mov	r0, r8
    4fa2:	f002 fb91 	bl	76c8 <__lshift>
    4fa6:	4606      	mov	r6, r0
    4fa8:	2800      	cmp	r0, #0
    4faa:	f47f af4e 	bne.w	4e4a <_strtod_l+0x50a>
    4fae:	9812      	ldr	r0, [sp, #72]	; 0x48
    4fb0:	e7e9      	b.n	4f86 <_strtod_l+0x646>
    4fb2:	4631      	mov	r1, r6
    4fb4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4fb6:	4640      	mov	r0, r8
    4fb8:	f002 fb26 	bl	7608 <__pow5mult>
    4fbc:	4606      	mov	r6, r0
    4fbe:	2800      	cmp	r0, #0
    4fc0:	f47f af40 	bne.w	4e44 <_strtod_l+0x504>
    4fc4:	e7f3      	b.n	4fae <_strtod_l+0x66e>
    4fc6:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
    4fca:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
    4fce:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
    4fd2:	2101      	movs	r1, #1
    4fd4:	32e2      	adds	r2, #226	; 0xe2
    4fd6:	fa01 f302 	lsl.w	r3, r1, r2
    4fda:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
    4fde:	e715      	b.n	4e0c <_strtod_l+0x4cc>
    4fe0:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
    4fe4:	f04f 0b00 	mov.w	fp, #0
    4fe8:	e5c0      	b.n	4b6c <_strtod_l+0x22c>
    4fea:	2301      	movs	r3, #1
    4fec:	930a      	str	r3, [sp, #40]	; 0x28
    4fee:	f10a 0302 	add.w	r3, sl, #2
    4ff2:	9311      	str	r3, [sp, #68]	; 0x44
    4ff4:	f89a 4002 	ldrb.w	r4, [sl, #2]
    4ff8:	e602      	b.n	4c00 <_strtod_l+0x2c0>
    4ffa:	eeb0 7b49 	vmov.f64	d7, d9
    4ffe:	e79e      	b.n	4f3e <_strtod_l+0x5fe>
    5000:	94a03595 	.word	0x94a03595
    5004:	3fcfffff 	.word	0x3fcfffff
    5008:	94a03595 	.word	0x94a03595
    500c:	3fdfffff 	.word	0x3fdfffff
    5010:	35afe535 	.word	0x35afe535
    5014:	3fe00000 	.word	0x3fe00000
    5018:	ffc00000 	.word	0xffc00000
    501c:	41dfffff 	.word	0x41dfffff
    5020:	00000000 	.word	0x00000000
    5024:	7ff00000 	.word	0x7ff00000
    5028:	200002a8 	.word	0x200002a8
    502c:	fffffc02 	.word	0xfffffc02
    5030:	3ff00000 	.word	0x3ff00000
    5034:	7ff00000 	.word	0x7ff00000
    5038:	7fe00000 	.word	0x7fe00000
    503c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    5040:	2900      	cmp	r1, #0
    5042:	f000 8085 	beq.w	5150 <_strtod_l+0x810>
    5046:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    504a:	2901      	cmp	r1, #1
    504c:	f000 81d8 	beq.w	5400 <_strtod_l+0xac0>
    5050:	4610      	mov	r0, r2
    5052:	4bb7      	ldr	r3, [pc, #732]	; (5330 <_strtod_l+0x9f0>)
    5054:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
    5058:	2200      	movs	r2, #0
    505a:	e729      	b.n	4eb0 <_strtod_l+0x570>
    505c:	2c65      	cmp	r4, #101	; 0x65
    505e:	f04f 0c01 	mov.w	ip, #1
    5062:	f43f adbe 	beq.w	4be2 <_strtod_l+0x2a2>
    5066:	e54c      	b.n	4b02 <_strtod_l+0x1c2>
    5068:	ec43 2b1a 	vmov	d10, r2, r3
    506c:	f1a0 7354 	sub.w	r3, r0, #55574528	; 0x3500000
    5070:	9305      	str	r3, [sp, #20]
    5072:	ed9d fb04 	vldr	d15, [sp, #16]
    5076:	eeb0 0b4f 	vmov.f64	d0, d15
    507a:	f002 fc69 	bl	7950 <__ulp>
    507e:	49ad      	ldr	r1, [pc, #692]	; (5334 <_strtod_l+0x9f4>)
    5080:	eeaa fb00 	vfma.f64	d15, d10, d0
    5084:	ee1f 3a90 	vmov	r3, s31
    5088:	4aab      	ldr	r2, [pc, #684]	; (5338 <_strtod_l+0x9f8>)
    508a:	4019      	ands	r1, r3
    508c:	4291      	cmp	r1, r2
    508e:	ed8d fb04 	vstr	d15, [sp, #16]
    5092:	d972      	bls.n	517a <_strtod_l+0x83a>
    5094:	4ba9      	ldr	r3, [pc, #676]	; (533c <_strtod_l+0x9fc>)
    5096:	ee18 2a90 	vmov	r2, s17
    509a:	429a      	cmp	r2, r3
    509c:	d103      	bne.n	50a6 <_strtod_l+0x766>
    509e:	ee18 3a10 	vmov	r3, s16
    50a2:	3301      	adds	r3, #1
    50a4:	d083      	beq.n	4fae <_strtod_l+0x66e>
    50a6:	4aa5      	ldr	r2, [pc, #660]	; (533c <_strtod_l+0x9fc>)
    50a8:	f04f 33ff 	mov.w	r3, #4294967295
    50ac:	e9cd 3204 	strd	r3, r2, [sp, #16]
    50b0:	e727      	b.n	4f02 <_strtod_l+0x5c2>
    50b2:	2300      	movs	r3, #0
    50b4:	930a      	str	r3, [sp, #40]	; 0x28
    50b6:	e79a      	b.n	4fee <_strtod_l+0x6ae>
    50b8:	2c65      	cmp	r4, #101	; 0x65
    50ba:	f000 80d0 	beq.w	525e <_strtod_l+0x91e>
    50be:	2c45      	cmp	r4, #69	; 0x45
    50c0:	f000 80cd 	beq.w	525e <_strtod_l+0x91e>
    50c4:	f04f 0c01 	mov.w	ip, #1
    50c8:	e5d1      	b.n	4c6e <_strtod_l+0x32e>
    50ca:	ec51 0b19 	vmov	r0, r1, d9
    50ce:	930d      	str	r3, [sp, #52]	; 0x34
    50d0:	f009 fc6c 	bl	e9ac <__aeabi_d2lz>
    50d4:	f009 fc3c 	bl	e950 <__aeabi_l2d>
    50d8:	9b04      	ldr	r3, [sp, #16]
    50da:	431d      	orrs	r5, r3
    50dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    50de:	ec41 0b17 	vmov	d7, r0, r1
    50e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
    50e6:	431d      	orrs	r5, r3
    50e8:	ee39 9b47 	vsub.f64	d9, d9, d7
    50ec:	f000 80a0 	beq.w	5230 <_strtod_l+0x8f0>
    50f0:	eeb4 9bcc 	vcmpe.f64	d9, d12
    50f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    50f8:	d405      	bmi.n	5106 <_strtod_l+0x7c6>
    50fa:	eeb4 9bcd 	vcmpe.f64	d9, d13
    50fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5102:	f77f aefe 	ble.w	4f02 <_strtod_l+0x5c2>
    5106:	ed9d 8b04 	vldr	d8, [sp, #16]
    510a:	9812      	ldr	r0, [sp, #72]	; 0x48
    510c:	4601      	mov	r1, r0
    510e:	4640      	mov	r0, r8
    5110:	f002 f89a 	bl	7248 <_Bfree>
    5114:	4631      	mov	r1, r6
    5116:	4640      	mov	r0, r8
    5118:	f002 f896 	bl	7248 <_Bfree>
    511c:	4621      	mov	r1, r4
    511e:	4640      	mov	r0, r8
    5120:	f002 f892 	bl	7248 <_Bfree>
    5124:	4649      	mov	r1, r9
    5126:	4640      	mov	r0, r8
    5128:	f002 f88e 	bl	7248 <_Bfree>
    512c:	4651      	mov	r1, sl
    512e:	4640      	mov	r0, r8
    5130:	f002 f88a 	bl	7248 <_Bfree>
    5134:	e5c1      	b.n	4cba <_strtod_l+0x37a>
    5136:	2201      	movs	r2, #1
    5138:	9209      	str	r2, [sp, #36]	; 0x24
    513a:	1c79      	adds	r1, r7, #1
    513c:	9111      	str	r1, [sp, #68]	; 0x44
    513e:	787a      	ldrb	r2, [r7, #1]
    5140:	2a00      	cmp	r2, #0
    5142:	f43f ace5 	beq.w	4b10 <_strtod_l+0x1d0>
    5146:	460f      	mov	r7, r1
    5148:	e470      	b.n	4a2c <_strtod_l+0xec>
    514a:	2200      	movs	r2, #0
    514c:	9209      	str	r2, [sp, #36]	; 0x24
    514e:	e7f4      	b.n	513a <_strtod_l+0x7fa>
    5150:	f3c2 0313 	ubfx	r3, r2, #0, #20
    5154:	4610      	mov	r0, r2
    5156:	2b00      	cmp	r3, #0
    5158:	f47f af7b 	bne.w	5052 <_strtod_l+0x712>
    515c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    5160:	eeb4 0bc7 	vcmpe.f64	d0, d7
    5164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5168:	f100 81d3 	bmi.w	5512 <_strtod_l+0xbd2>
    516c:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
    5170:	ee20 9b09 	vmul.f64	d9, d0, d9
    5174:	eeb1 7b49 	vneg.f64	d7, d9
    5178:	e6e2      	b.n	4f40 <_strtod_l+0x600>
    517a:	f103 7354 	add.w	r3, r3, #55574528	; 0x3500000
    517e:	9305      	str	r3, [sp, #20]
    5180:	e6b8      	b.n	4ef4 <_strtod_l+0x5b4>
    5182:	eebc 9bc9 	vcvt.u32.f64	s18, d9
    5186:	ee19 3a10 	vmov	r3, s18
    518a:	2b01      	cmp	r3, #1
    518c:	bf38      	it	cc
    518e:	2301      	movcc	r3, #1
    5190:	ee09 3a10 	vmov	s18, r3
    5194:	eeb8 9b49 	vcvt.f64.u32	d9, s18
    5198:	2d00      	cmp	r5, #0
    519a:	f040 813e 	bne.w	541a <_strtod_l+0xada>
    519e:	eeb1 7b49 	vneg.f64	d7, d9
    51a2:	ec53 2b17 	vmov	r2, r3, d7
    51a6:	e696      	b.n	4ed6 <_strtod_l+0x596>
    51a8:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
    51ac:	f300 80b2 	bgt.w	5314 <_strtod_l+0x9d4>
    51b0:	2a10      	cmp	r2, #16
    51b2:	ea4f 1322 	mov.w	r3, r2, asr #4
    51b6:	f340 8286 	ble.w	56c6 <_strtod_l+0xd86>
    51ba:	4c61      	ldr	r4, [pc, #388]	; (5340 <_strtod_l+0xa00>)
    51bc:	ed9d 7b04 	vldr	d7, [sp, #16]
    51c0:	2000      	movs	r0, #0
    51c2:	4622      	mov	r2, r4
    51c4:	4601      	mov	r1, r0
    51c6:	f013 0f01 	tst.w	r3, #1
    51ca:	f101 0101 	add.w	r1, r1, #1
    51ce:	ea4f 0363 	mov.w	r3, r3, asr #1
    51d2:	d004      	beq.n	51de <_strtod_l+0x89e>
    51d4:	ed92 6b00 	vldr	d6, [r2]
    51d8:	2001      	movs	r0, #1
    51da:	ee27 7b06 	vmul.f64	d7, d7, d6
    51de:	2b01      	cmp	r3, #1
    51e0:	f102 0208 	add.w	r2, r2, #8
    51e4:	d1ef      	bne.n	51c6 <_strtod_l+0x886>
    51e6:	b108      	cbz	r0, 51ec <_strtod_l+0x8ac>
    51e8:	ed8d 7b04 	vstr	d7, [sp, #16]
    51ec:	9b05      	ldr	r3, [sp, #20]
    51ee:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
    51f2:	9305      	str	r3, [sp, #20]
    51f4:	eb04 04c1 	add.w	r4, r4, r1, lsl #3
    51f8:	ed9d 6b04 	vldr	d6, [sp, #16]
    51fc:	ed94 7b00 	vldr	d7, [r4]
    5200:	4b4c      	ldr	r3, [pc, #304]	; (5334 <_strtod_l+0x9f4>)
    5202:	ee27 7b06 	vmul.f64	d7, d7, d6
    5206:	ee17 2a90 	vmov	r2, s15
    520a:	494e      	ldr	r1, [pc, #312]	; (5344 <_strtod_l+0xa04>)
    520c:	4013      	ands	r3, r2
    520e:	428b      	cmp	r3, r1
    5210:	ed8d 7b04 	vstr	d7, [sp, #16]
    5214:	d87e      	bhi.n	5314 <_strtod_l+0x9d4>
    5216:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
    521a:	428b      	cmp	r3, r1
    521c:	f240 81d6 	bls.w	55cc <_strtod_l+0xc8c>
    5220:	4c46      	ldr	r4, [pc, #280]	; (533c <_strtod_l+0x9fc>)
    5222:	f04f 33ff 	mov.w	r3, #4294967295
    5226:	e9cd 3404 	strd	r3, r4, [sp, #16]
    522a:	2300      	movs	r3, #0
    522c:	9308      	str	r3, [sp, #32]
    522e:	e585      	b.n	4d3c <_strtod_l+0x3fc>
    5230:	eeb4 9bce 	vcmpe.f64	d9, d14
    5234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5238:	f57f ae63 	bpl.w	4f02 <_strtod_l+0x5c2>
    523c:	e763      	b.n	5106 <_strtod_l+0x7c6>
    523e:	3216      	adds	r2, #22
    5240:	f6ff ad62 	blt.w	4d08 <_strtod_l+0x3c8>
    5244:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5246:	eba3 0b0b 	sub.w	fp, r3, fp
    524a:	4b3f      	ldr	r3, [pc, #252]	; (5348 <_strtod_l+0xa08>)
    524c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
    5250:	ed93 7b00 	vldr	d7, [r3]
    5254:	ed9d 6b04 	vldr	d6, [sp, #16]
    5258:	ee86 8b07 	vdiv.f64	d8, d6, d7
    525c:	e52d      	b.n	4cba <_strtod_l+0x37a>
    525e:	f04f 0e00 	mov.w	lr, #0
    5262:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    5266:	f04f 0c01 	mov.w	ip, #1
    526a:	e44e      	b.n	4b0a <_strtod_l+0x1ca>
    526c:	2c6e      	cmp	r4, #110	; 0x6e
    526e:	f43f ad10 	beq.w	4c92 <_strtod_l+0x352>
    5272:	e44d      	b.n	4b10 <_strtod_l+0x1d0>
    5274:	f43f ad60 	beq.w	4d38 <_strtod_l+0x3f8>
    5278:	425b      	negs	r3, r3
    527a:	f013 010f 	ands.w	r1, r3, #15
    527e:	d00a      	beq.n	5296 <_strtod_l+0x956>
    5280:	4a31      	ldr	r2, [pc, #196]	; (5348 <_strtod_l+0xa08>)
    5282:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    5286:	ed9d 6b04 	vldr	d6, [sp, #16]
    528a:	ed92 7b00 	vldr	d7, [r2]
    528e:	ee86 7b07 	vdiv.f64	d7, d6, d7
    5292:	ed8d 7b04 	vstr	d7, [sp, #16]
    5296:	111b      	asrs	r3, r3, #4
    5298:	f43f ad4e 	beq.w	4d38 <_strtod_l+0x3f8>
    529c:	2b1f      	cmp	r3, #31
    529e:	dc33      	bgt.n	5308 <_strtod_l+0x9c8>
    52a0:	f013 0210 	ands.w	r2, r3, #16
    52a4:	bf18      	it	ne
    52a6:	226a      	movne	r2, #106	; 0x6a
    52a8:	ed9d 7b04 	vldr	d7, [sp, #16]
    52ac:	9208      	str	r2, [sp, #32]
    52ae:	4a27      	ldr	r2, [pc, #156]	; (534c <_strtod_l+0xa0c>)
    52b0:	2100      	movs	r1, #0
    52b2:	07d8      	lsls	r0, r3, #31
    52b4:	d504      	bpl.n	52c0 <_strtod_l+0x980>
    52b6:	ed92 6b00 	vldr	d6, [r2]
    52ba:	2101      	movs	r1, #1
    52bc:	ee27 7b06 	vmul.f64	d7, d7, d6
    52c0:	105b      	asrs	r3, r3, #1
    52c2:	f102 0208 	add.w	r2, r2, #8
    52c6:	d1f4      	bne.n	52b2 <_strtod_l+0x972>
    52c8:	b109      	cbz	r1, 52ce <_strtod_l+0x98e>
    52ca:	ed8d 7b04 	vstr	d7, [sp, #16]
    52ce:	9b08      	ldr	r3, [sp, #32]
    52d0:	b193      	cbz	r3, 52f8 <_strtod_l+0x9b8>
    52d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    52d6:	f3c1 520a 	ubfx	r2, r1, #20, #11
    52da:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
    52de:	2b00      	cmp	r3, #0
    52e0:	dd0a      	ble.n	52f8 <_strtod_l+0x9b8>
    52e2:	2b1f      	cmp	r3, #31
    52e4:	f340 822f 	ble.w	5746 <_strtod_l+0xe06>
    52e8:	2000      	movs	r0, #0
    52ea:	2b34      	cmp	r3, #52	; 0x34
    52ec:	9004      	str	r0, [sp, #16]
    52ee:	f340 8240 	ble.w	5772 <_strtod_l+0xe32>
    52f2:	f04f 735c 	mov.w	r3, #57671680	; 0x3700000
    52f6:	9305      	str	r3, [sp, #20]
    52f8:	ed9d 7b04 	vldr	d7, [sp, #16]
    52fc:	eeb5 7b40 	vcmp.f64	d7, #0.0
    5300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5304:	f47f ad1a 	bne.w	4d3c <_strtod_l+0x3fc>
    5308:	2322      	movs	r3, #34	; 0x22
    530a:	ed9f 8b05 	vldr	d8, [pc, #20]	; 5320 <_strtod_l+0x9e0>
    530e:	f8c8 3000 	str.w	r3, [r8]
    5312:	e4d2      	b.n	4cba <_strtod_l+0x37a>
    5314:	2322      	movs	r3, #34	; 0x22
    5316:	ed9f 8b04 	vldr	d8, [pc, #16]	; 5328 <_strtod_l+0x9e8>
    531a:	f8c8 3000 	str.w	r3, [r8]
    531e:	e4cc      	b.n	4cba <_strtod_l+0x37a>
	...
    532c:	7ff00000 	.word	0x7ff00000
    5330:	bff00000 	.word	0xbff00000
    5334:	7ff00000 	.word	0x7ff00000
    5338:	7c9fffff 	.word	0x7c9fffff
    533c:	7fefffff 	.word	0x7fefffff
    5340:	20000280 	.word	0x20000280
    5344:	7ca00000 	.word	0x7ca00000
    5348:	200002a8 	.word	0x200002a8
    534c:	20000370 	.word	0x20000370
    5350:	9302      	str	r3, [sp, #8]
    5352:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5354:	9301      	str	r3, [sp, #4]
    5356:	ab12      	add	r3, sp, #72	; 0x48
    5358:	9300      	str	r3, [sp, #0]
    535a:	4aa7      	ldr	r2, [pc, #668]	; (55f8 <_strtod_l+0xcb8>)
    535c:	ab13      	add	r3, sp, #76	; 0x4c
    535e:	a911      	add	r1, sp, #68	; 0x44
    5360:	4640      	mov	r0, r8
    5362:	f001 fb77 	bl	6a54 <__gethex>
    5366:	f010 050f 	ands.w	r5, r0, #15
    536a:	4604      	mov	r4, r0
    536c:	f43f aca3 	beq.w	4cb6 <_strtod_l+0x376>
    5370:	2d06      	cmp	r5, #6
    5372:	d174      	bne.n	545e <_strtod_l+0xb1e>
    5374:	9b07      	ldr	r3, [sp, #28]
    5376:	ed9f 8b9a 	vldr	d8, [pc, #616]	; 55e0 <_strtod_l+0xca0>
    537a:	3701      	adds	r7, #1
    537c:	2b00      	cmp	r3, #0
    537e:	f43f abce 	beq.w	4b1e <_strtod_l+0x1de>
    5382:	601f      	str	r7, [r3, #0]
    5384:	f7ff bbcb 	b.w	4b1e <_strtod_l+0x1de>
    5388:	ed9d 8b04 	vldr	d8, [sp, #16]
    538c:	e495      	b.n	4cba <_strtod_l+0x37a>
    538e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5390:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
    5394:	4403      	add	r3, r0
    5396:	930b      	str	r3, [sp, #44]	; 0x2c
    5398:	2801      	cmp	r0, #1
    539a:	f105 0301 	add.w	r3, r5, #1
    539e:	461a      	mov	r2, r3
    53a0:	d014      	beq.n	53cc <_strtod_l+0xa8c>
    53a2:	4428      	add	r0, r5
    53a4:	1e44      	subs	r4, r0, #1
    53a6:	e003      	b.n	53b0 <_strtod_l+0xa70>
    53a8:	0046      	lsls	r6, r0, #1
    53aa:	429c      	cmp	r4, r3
    53ac:	d00d      	beq.n	53ca <_strtod_l+0xa8a>
    53ae:	3301      	adds	r3, #1
    53b0:	462a      	mov	r2, r5
    53b2:	2a08      	cmp	r2, #8
    53b4:	461d      	mov	r5, r3
    53b6:	eb06 0086 	add.w	r0, r6, r6, lsl #2
    53ba:	d9f5      	bls.n	53a8 <_strtod_l+0xa68>
    53bc:	2b10      	cmp	r3, #16
    53be:	bfdc      	itt	le
    53c0:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
    53c4:	ea4f 0949 	movle.w	r9, r9, lsl #1
    53c8:	e7ef      	b.n	53aa <_strtod_l+0xa6a>
    53ca:	3202      	adds	r2, #2
    53cc:	2d08      	cmp	r5, #8
    53ce:	dc3c      	bgt.n	544a <_strtod_l+0xb0a>
    53d0:	4615      	mov	r5, r2
    53d2:	f7ff bb79 	b.w	4ac8 <_strtod_l+0x188>
    53d6:	4989      	ldr	r1, [pc, #548]	; (55fc <_strtod_l+0xcbc>)
    53d8:	2201      	movs	r2, #1
    53da:	4638      	mov	r0, r7
    53dc:	f000 fdd4 	bl	5f88 <strncmp>
    53e0:	2800      	cmp	r0, #0
    53e2:	f000 8082 	beq.w	54ea <_strtod_l+0xbaa>
    53e6:	f04f 0e00 	mov.w	lr, #0
    53ea:	46f1      	mov	r9, lr
    53ec:	4676      	mov	r6, lr
    53ee:	4675      	mov	r5, lr
    53f0:	f7ff bbb5 	b.w	4b5e <_strtod_l+0x21e>
    53f4:	f644 631f 	movw	r3, #19999	; 0x4e1f
    53f8:	459b      	cmp	fp, r3
    53fa:	bfa8      	it	ge
    53fc:	469b      	movge	fp, r3
    53fe:	e42f      	b.n	4c60 <_strtod_l+0x320>
    5400:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    5404:	4618      	mov	r0, r3
    5406:	2b00      	cmp	r3, #0
    5408:	f47f ae23 	bne.w	5052 <_strtod_l+0x712>
    540c:	2322      	movs	r3, #34	; 0x22
    540e:	ed9f 8b74 	vldr	d8, [pc, #464]	; 55e0 <_strtod_l+0xca0>
    5412:	9812      	ldr	r0, [sp, #72]	; 0x48
    5414:	f8c8 3000 	str.w	r3, [r8]
    5418:	e678      	b.n	510c <_strtod_l+0x7cc>
    541a:	eeb0 7b49 	vmov.f64	d7, d9
    541e:	e6c0      	b.n	51a2 <_strtod_l+0x862>
    5420:	4977      	ldr	r1, [pc, #476]	; (5600 <_strtod_l+0xcc0>)
    5422:	a811      	add	r0, sp, #68	; 0x44
    5424:	f001 fde0 	bl	6fe8 <__match>
    5428:	2800      	cmp	r0, #0
    542a:	f43f ab71 	beq.w	4b10 <_strtod_l+0x1d0>
    542e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    5430:	4974      	ldr	r1, [pc, #464]	; (5604 <_strtod_l+0xcc4>)
    5432:	3b01      	subs	r3, #1
    5434:	a811      	add	r0, sp, #68	; 0x44
    5436:	9311      	str	r3, [sp, #68]	; 0x44
    5438:	f001 fdd6 	bl	6fe8 <__match>
    543c:	b910      	cbnz	r0, 5444 <_strtod_l+0xb04>
    543e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    5440:	3301      	adds	r3, #1
    5442:	9311      	str	r3, [sp, #68]	; 0x44
    5444:	ed9f 8b68 	vldr	d8, [pc, #416]	; 55e8 <_strtod_l+0xca8>
    5448:	e437      	b.n	4cba <_strtod_l+0x37a>
    544a:	2a10      	cmp	r2, #16
    544c:	bfdc      	itt	le
    544e:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
    5452:	eb01 0949 	addle.w	r9, r1, r9, lsl #1
    5456:	4615      	mov	r5, r2
    5458:	2000      	movs	r0, #0
    545a:	f7ff bb3a 	b.w	4ad2 <_strtod_l+0x192>
    545e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    5460:	b13a      	cbz	r2, 5472 <_strtod_l+0xb32>
    5462:	2135      	movs	r1, #53	; 0x35
    5464:	a814      	add	r0, sp, #80	; 0x50
    5466:	f002 fba3 	bl	7bb0 <__copybits>
    546a:	9912      	ldr	r1, [sp, #72]	; 0x48
    546c:	4640      	mov	r0, r8
    546e:	f001 feeb 	bl	7248 <_Bfree>
    5472:	3d01      	subs	r5, #1
    5474:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    5476:	2d04      	cmp	r5, #4
    5478:	f200 818f 	bhi.w	579a <_strtod_l+0xe5a>
    547c:	e8df f005 	tbb	[pc, r5]
    5480:	1f2a2d03 	.word	0x1f2a2d03
    5484:	03          	.byte	0x03
    5485:	00          	.byte	0x00
    5486:	9a14      	ldr	r2, [sp, #80]	; 0x50
    5488:	9204      	str	r2, [sp, #16]
    548a:	f203 4233 	addw	r2, r3, #1075	; 0x433
    548e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    5490:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
    5494:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
    5498:	9305      	str	r3, [sp, #20]
    549a:	05e5      	lsls	r5, r4, #23
    549c:	d502      	bpl.n	54a4 <_strtod_l+0xb64>
    549e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    54a2:	9305      	str	r3, [sp, #20]
    54a4:	4a58      	ldr	r2, [pc, #352]	; (5608 <_strtod_l+0xcc8>)
    54a6:	401a      	ands	r2, r3
    54a8:	ed9d 8b04 	vldr	d8, [sp, #16]
    54ac:	2a00      	cmp	r2, #0
    54ae:	f47f ac04 	bne.w	4cba <_strtod_l+0x37a>
    54b2:	f000 fe4d 	bl	6150 <__errno>
    54b6:	2322      	movs	r3, #34	; 0x22
    54b8:	6003      	str	r3, [r0, #0]
    54ba:	f7ff bbfe 	b.w	4cba <_strtod_l+0x37a>
    54be:	f04f 33ff 	mov.w	r3, #4294967295
    54c2:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    54c6:	e9cd 3604 	strd	r3, r6, [sp, #16]
    54ca:	05e3      	lsls	r3, r4, #23
    54cc:	f57f af5c 	bpl.w	5388 <_strtod_l+0xa48>
    54d0:	9b05      	ldr	r3, [sp, #20]
    54d2:	e7e4      	b.n	549e <_strtod_l+0xb5e>
    54d4:	4b4c      	ldr	r3, [pc, #304]	; (5608 <_strtod_l+0xcc8>)
    54d6:	9305      	str	r3, [sp, #20]
    54d8:	e7f7      	b.n	54ca <_strtod_l+0xb8a>
    54da:	9b14      	ldr	r3, [sp, #80]	; 0x50
    54dc:	9304      	str	r3, [sp, #16]
    54de:	9b15      	ldr	r3, [sp, #84]	; 0x54
    54e0:	9305      	str	r3, [sp, #20]
    54e2:	e7da      	b.n	549a <_strtod_l+0xb5a>
    54e4:	2000      	movs	r0, #0
    54e6:	f7ff bae1 	b.w	4aac <_strtod_l+0x16c>
    54ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
    54ec:	461a      	mov	r2, r3
    54ee:	3301      	adds	r3, #1
    54f0:	9311      	str	r3, [sp, #68]	; 0x44
    54f2:	7854      	ldrb	r4, [r2, #1]
    54f4:	4606      	mov	r6, r0
    54f6:	4681      	mov	r9, r0
    54f8:	f7ff bacd 	b.w	4a96 <_strtod_l+0x156>
    54fc:	4b43      	ldr	r3, [pc, #268]	; (560c <_strtod_l+0xccc>)
    54fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    5502:	ed93 8b00 	vldr	d8, [r3]
    5506:	ed9d 7b04 	vldr	d7, [sp, #16]
    550a:	ee28 8b07 	vmul.f64	d8, d8, d7
    550e:	f7ff bbd4 	b.w	4cba <_strtod_l+0x37a>
    5512:	eebe 7b00 	vmov.f64	d7, #224	; 0xbf000000 -0.5
    5516:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
    551a:	e511      	b.n	4f40 <_strtod_l+0x600>
    551c:	46ae      	mov	lr, r5
    551e:	900b      	str	r0, [sp, #44]	; 0x2c
    5520:	f7ff badc 	b.w	4adc <_strtod_l+0x19c>
    5524:	4b39      	ldr	r3, [pc, #228]	; (560c <_strtod_l+0xccc>)
    5526:	f1c5 050f 	rsb	r5, r5, #15
    552a:	1b4a      	subs	r2, r1, r5
    552c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    5530:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    5534:	ed95 8b00 	vldr	d8, [r5]
    5538:	ed93 7b00 	vldr	d7, [r3]
    553c:	ed9d 6b04 	vldr	d6, [sp, #16]
    5540:	ee28 8b06 	vmul.f64	d8, d8, d6
    5544:	ee28 8b07 	vmul.f64	d8, d8, d7
    5548:	f7ff bbb7 	b.w	4cba <_strtod_l+0x37a>
    554c:	2d00      	cmp	r5, #0
    554e:	f000 8095 	beq.w	567c <_strtod_l+0xd3c>
    5552:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
    5556:	4b2e      	ldr	r3, [pc, #184]	; (5610 <_strtod_l+0xcd0>)
    5558:	f3cc 0113 	ubfx	r1, ip, #0, #20
    555c:	4299      	cmp	r1, r3
    555e:	4662      	mov	r2, ip
    5560:	f000 80d2 	beq.w	5708 <_strtod_l+0xdc8>
    5564:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    5566:	2b00      	cmp	r3, #0
    5568:	f000 80a5 	beq.w	56b6 <_strtod_l+0xd76>
    556c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    5570:	4213      	tst	r3, r2
    5572:	4617      	mov	r7, r2
    5574:	d01a      	beq.n	55ac <_strtod_l+0xc6c>
    5576:	eeb0 0b48 	vmov.f64	d0, d8
    557a:	2d00      	cmp	r5, #0
    557c:	f000 80a6 	beq.w	56cc <_strtod_l+0xd8c>
    5580:	f002 f9e6 	bl	7950 <__ulp>
    5584:	9b08      	ldr	r3, [sp, #32]
    5586:	b17b      	cbz	r3, 55a8 <_strtod_l+0xc68>
    5588:	f3c7 530a 	ubfx	r3, r7, #20, #11
    558c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    5590:	2b00      	cmp	r3, #0
    5592:	dd09      	ble.n	55a8 <_strtod_l+0xc68>
    5594:	051b      	lsls	r3, r3, #20
    5596:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
    559a:	2000      	movs	r0, #0
    559c:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
    55a0:	ec41 0b17 	vmov	d7, r0, r1
    55a4:	ee20 0b07 	vmul.f64	d0, d0, d7
    55a8:	ee38 8b00 	vadd.f64	d8, d8, d0
    55ac:	9b08      	ldr	r3, [sp, #32]
    55ae:	b15b      	cbz	r3, 55c8 <_strtod_l+0xc88>
    55b0:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 55f0 <_strtod_l+0xcb0>
    55b4:	4b14      	ldr	r3, [pc, #80]	; (5608 <_strtod_l+0xcc8>)
    55b6:	ee28 8b07 	vmul.f64	d8, d8, d7
    55ba:	ee18 2a90 	vmov	r2, s17
    55be:	4013      	ands	r3, r2
    55c0:	b913      	cbnz	r3, 55c8 <_strtod_l+0xc88>
    55c2:	2322      	movs	r3, #34	; 0x22
    55c4:	f8c8 3000 	str.w	r3, [r8]
    55c8:	9812      	ldr	r0, [sp, #72]	; 0x48
    55ca:	e59f      	b.n	510c <_strtod_l+0x7cc>
    55cc:	f102 7354 	add.w	r3, r2, #55574528	; 0x3500000
    55d0:	9305      	str	r3, [sp, #20]
    55d2:	2300      	movs	r3, #0
    55d4:	9308      	str	r3, [sp, #32]
    55d6:	f7ff bbb1 	b.w	4d3c <_strtod_l+0x3fc>
    55da:	bf00      	nop
    55dc:	f3af 8000 	nop.w
	...
    55ec:	7ff00000 	.word	0x7ff00000
    55f0:	00000000 	.word	0x00000000
    55f4:	39500000 	.word	0x39500000
    55f8:	200076c0 	.word	0x200076c0
    55fc:	200008b0 	.word	0x200008b0
    5600:	200008b4 	.word	0x200008b4
    5604:	200008b8 	.word	0x200008b8
    5608:	7ff00000 	.word	0x7ff00000
    560c:	200002a8 	.word	0x200002a8
    5610:	000fffff 	.word	0x000fffff
    5614:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    5618:	430d      	orrs	r5, r1
    561a:	d1c7      	bne.n	55ac <_strtod_l+0xc6c>
    561c:	f3c2 0313 	ubfx	r3, r2, #0, #20
    5620:	4617      	mov	r7, r2
    5622:	2b00      	cmp	r3, #0
    5624:	d1c2      	bne.n	55ac <_strtod_l+0xc6c>
    5626:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
    562a:	0d1b      	lsrs	r3, r3, #20
    562c:	051b      	lsls	r3, r3, #20
    562e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    5632:	d9bb      	bls.n	55ac <_strtod_l+0xc6c>
    5634:	f8da 3014 	ldr.w	r3, [sl, #20]
    5638:	b91b      	cbnz	r3, 5642 <_strtod_l+0xd02>
    563a:	f8da 3010 	ldr.w	r3, [sl, #16]
    563e:	2b01      	cmp	r3, #1
    5640:	ddb4      	ble.n	55ac <_strtod_l+0xc6c>
    5642:	4651      	mov	r1, sl
    5644:	2201      	movs	r2, #1
    5646:	4640      	mov	r0, r8
    5648:	f002 f83e 	bl	76c8 <__lshift>
    564c:	4621      	mov	r1, r4
    564e:	4682      	mov	sl, r0
    5650:	f002 f8b2 	bl	77b8 <__mcmp>
    5654:	2800      	cmp	r0, #0
    5656:	dda9      	ble.n	55ac <_strtod_l+0xc6c>
    5658:	9b08      	ldr	r3, [sp, #32]
    565a:	2b00      	cmp	r3, #0
    565c:	d17e      	bne.n	575c <_strtod_l+0xe1c>
    565e:	4b50      	ldr	r3, [pc, #320]	; (57a0 <_strtod_l+0xe60>)
    5660:	403b      	ands	r3, r7
    5662:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
    5666:	ea6f 5313 	mvn.w	r3, r3, lsr #20
    566a:	ea6f 5303 	mvn.w	r3, r3, lsl #20
    566e:	9305      	str	r3, [sp, #20]
    5670:	f04f 33ff 	mov.w	r3, #4294967295
    5674:	9304      	str	r3, [sp, #16]
    5676:	ed9d 8b04 	vldr	d8, [sp, #16]
    567a:	e797      	b.n	55ac <_strtod_l+0xc6c>
    567c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    5680:	f3c2 0313 	ubfx	r3, r2, #0, #20
    5684:	430b      	orrs	r3, r1
    5686:	4617      	mov	r7, r2
    5688:	f47f af6c 	bne.w	5564 <_strtod_l+0xc24>
    568c:	e7e4      	b.n	5658 <_strtod_l+0xd18>
    568e:	4945      	ldr	r1, [pc, #276]	; (57a4 <_strtod_l+0xe64>)
    5690:	a811      	add	r0, sp, #68	; 0x44
    5692:	aa14      	add	r2, sp, #80	; 0x50
    5694:	f001 fcc4 	bl	7020 <__hexnan>
    5698:	2805      	cmp	r0, #5
    569a:	f47f ab06 	bne.w	4caa <_strtod_l+0x36a>
    569e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    56a0:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
    56a4:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
    56a8:	9305      	str	r3, [sp, #20]
    56aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
    56ac:	9304      	str	r3, [sp, #16]
    56ae:	ed9d 8b04 	vldr	d8, [sp, #16]
    56b2:	f7ff bb02 	b.w	4cba <_strtod_l+0x37a>
    56b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    56ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    56bc:	4203      	tst	r3, r0
    56be:	f43f af75 	beq.w	55ac <_strtod_l+0xc6c>
    56c2:	460f      	mov	r7, r1
    56c4:	e757      	b.n	5576 <_strtod_l+0xc36>
    56c6:	4c38      	ldr	r4, [pc, #224]	; (57a8 <_strtod_l+0xe68>)
    56c8:	2100      	movs	r1, #0
    56ca:	e58f      	b.n	51ec <_strtod_l+0x8ac>
    56cc:	f002 f940 	bl	7950 <__ulp>
    56d0:	9b08      	ldr	r3, [sp, #32]
    56d2:	2b00      	cmp	r3, #0
    56d4:	d055      	beq.n	5782 <_strtod_l+0xe42>
    56d6:	f3c7 530a 	ubfx	r3, r7, #20, #11
    56da:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    56de:	2b00      	cmp	r3, #0
    56e0:	dd09      	ble.n	56f6 <_strtod_l+0xdb6>
    56e2:	051b      	lsls	r3, r3, #20
    56e4:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
    56e8:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
    56ec:	4628      	mov	r0, r5
    56ee:	ec41 0b17 	vmov	d7, r0, r1
    56f2:	ee20 0b07 	vmul.f64	d0, d0, d7
    56f6:	ee38 8b40 	vsub.f64	d8, d8, d0
    56fa:	eeb5 8b40 	vcmp.f64	d8, #0.0
    56fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5702:	f47f af55 	bne.w	55b0 <_strtod_l+0xc70>
    5706:	e681      	b.n	540c <_strtod_l+0xacc>
    5708:	9b08      	ldr	r3, [sp, #32]
    570a:	9904      	ldr	r1, [sp, #16]
    570c:	b31b      	cbz	r3, 5756 <_strtod_l+0xe16>
    570e:	4b24      	ldr	r3, [pc, #144]	; (57a0 <_strtod_l+0xe60>)
    5710:	4013      	ands	r3, r2
    5712:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
    5716:	d81e      	bhi.n	5756 <_strtod_l+0xe16>
    5718:	0d1b      	lsrs	r3, r3, #20
    571a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    571e:	f04f 30ff 	mov.w	r0, #4294967295
    5722:	fa00 f303 	lsl.w	r3, r0, r3
    5726:	4299      	cmp	r1, r3
    5728:	f47f af1c 	bne.w	5564 <_strtod_l+0xc24>
    572c:	4b1f      	ldr	r3, [pc, #124]	; (57ac <_strtod_l+0xe6c>)
    572e:	429a      	cmp	r2, r3
    5730:	d030      	beq.n	5794 <_strtod_l+0xe54>
    5732:	4b1b      	ldr	r3, [pc, #108]	; (57a0 <_strtod_l+0xe60>)
    5734:	4013      	ands	r3, r2
    5736:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
    573a:	9305      	str	r3, [sp, #20]
    573c:	2300      	movs	r3, #0
    573e:	9304      	str	r3, [sp, #16]
    5740:	ed9d 8b04 	vldr	d8, [sp, #16]
    5744:	e732      	b.n	55ac <_strtod_l+0xc6c>
    5746:	f04f 32ff 	mov.w	r2, #4294967295
    574a:	fa02 f303 	lsl.w	r3, r2, r3
    574e:	9a04      	ldr	r2, [sp, #16]
    5750:	401a      	ands	r2, r3
    5752:	9204      	str	r2, [sp, #16]
    5754:	e5d0      	b.n	52f8 <_strtod_l+0x9b8>
    5756:	f04f 33ff 	mov.w	r3, #4294967295
    575a:	e7e4      	b.n	5726 <_strtod_l+0xde6>
    575c:	4b10      	ldr	r3, [pc, #64]	; (57a0 <_strtod_l+0xe60>)
    575e:	403b      	ands	r3, r7
    5760:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    5764:	f73f af7d 	bgt.w	5662 <_strtod_l+0xd22>
    5768:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
    576c:	f73f af20 	bgt.w	55b0 <_strtod_l+0xc70>
    5770:	e64c      	b.n	540c <_strtod_l+0xacc>
    5772:	f1c2 024b 	rsb	r2, r2, #75	; 0x4b
    5776:	f04f 33ff 	mov.w	r3, #4294967295
    577a:	4093      	lsls	r3, r2
    577c:	400b      	ands	r3, r1
    577e:	9305      	str	r3, [sp, #20]
    5780:	e5ba      	b.n	52f8 <_strtod_l+0x9b8>
    5782:	ee38 8b40 	vsub.f64	d8, d8, d0
    5786:	eeb5 8b40 	vcmp.f64	d8, #0.0
    578a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    578e:	f47f af1b 	bne.w	55c8 <_strtod_l+0xc88>
    5792:	e63b      	b.n	540c <_strtod_l+0xacc>
    5794:	3101      	adds	r1, #1
    5796:	d1cc      	bne.n	5732 <_strtod_l+0xdf2>
    5798:	e409      	b.n	4fae <_strtod_l+0x66e>
    579a:	2300      	movs	r3, #0
    579c:	e67d      	b.n	549a <_strtod_l+0xb5a>
    579e:	bf00      	nop
    57a0:	7ff00000 	.word	0x7ff00000
    57a4:	200076d4 	.word	0x200076d4
    57a8:	20000280 	.word	0x20000280
    57ac:	7fefffff 	.word	0x7fefffff

000057b0 <_strtod_r>:
    57b0:	4b01      	ldr	r3, [pc, #4]	; (57b8 <_strtod_r+0x8>)
    57b2:	f7ff b8c5 	b.w	4940 <_strtod_l>
    57b6:	bf00      	nop
    57b8:	20007c70 	.word	0x20007c70

000057bc <_strtol_l.constprop.0>:
    57bc:	2b01      	cmp	r3, #1
    57be:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    57c2:	d040      	beq.n	5846 <_strtol_l.constprop.0+0x8a>
    57c4:	2b24      	cmp	r3, #36	; 0x24
    57c6:	4698      	mov	r8, r3
    57c8:	d83d      	bhi.n	5846 <_strtol_l.constprop.0+0x8a>
    57ca:	4d4c      	ldr	r5, [pc, #304]	; (58fc <_strtol_l.constprop.0+0x140>)
    57cc:	468e      	mov	lr, r1
    57ce:	4676      	mov	r6, lr
    57d0:	f81e bb01 	ldrb.w	fp, [lr], #1
    57d4:	f815 400b 	ldrb.w	r4, [r5, fp]
    57d8:	f014 0408 	ands.w	r4, r4, #8
    57dc:	d1f7      	bne.n	57ce <_strtol_l.constprop.0+0x12>
    57de:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
    57e2:	d072      	beq.n	58ca <_strtol_l.constprop.0+0x10e>
    57e4:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
    57e8:	bf08      	it	eq
    57ea:	f89e b000 	ldrbeq.w	fp, [lr]
    57ee:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
    57f2:	bf08      	it	eq
    57f4:	f106 0e02 	addeq.w	lr, r6, #2
    57f8:	2b00      	cmp	r3, #0
    57fa:	d042      	beq.n	5882 <_strtol_l.constprop.0+0xc6>
    57fc:	2b10      	cmp	r3, #16
    57fe:	d057      	beq.n	58b0 <_strtol_l.constprop.0+0xf4>
    5800:	fbb9 f7f8 	udiv	r7, r9, r8
    5804:	2500      	movs	r5, #0
    5806:	462e      	mov	r6, r5
    5808:	fb08 9a17 	mls	sl, r8, r7, r9
    580c:	e005      	b.n	581a <_strtol_l.constprop.0+0x5e>
    580e:	d033      	beq.n	5878 <_strtol_l.constprop.0+0xbc>
    5810:	fb08 c606 	mla	r6, r8, r6, ip
    5814:	2501      	movs	r5, #1
    5816:	f81e bb01 	ldrb.w	fp, [lr], #1
    581a:	f1ab 0c30 	sub.w	ip, fp, #48	; 0x30
    581e:	f1bc 0f09 	cmp.w	ip, #9
    5822:	d906      	bls.n	5832 <_strtol_l.constprop.0+0x76>
    5824:	f1ab 0c41 	sub.w	ip, fp, #65	; 0x41
    5828:	f1bc 0f19 	cmp.w	ip, #25
    582c:	d812      	bhi.n	5854 <_strtol_l.constprop.0+0x98>
    582e:	f1ab 0c37 	sub.w	ip, fp, #55	; 0x37
    5832:	4563      	cmp	r3, ip
    5834:	dd17      	ble.n	5866 <_strtol_l.constprop.0+0xaa>
    5836:	f1b5 3fff 	cmp.w	r5, #4294967295
    583a:	d0ec      	beq.n	5816 <_strtol_l.constprop.0+0x5a>
    583c:	42b7      	cmp	r7, r6
    583e:	d2e6      	bcs.n	580e <_strtol_l.constprop.0+0x52>
    5840:	f04f 35ff 	mov.w	r5, #4294967295
    5844:	e7e7      	b.n	5816 <_strtol_l.constprop.0+0x5a>
    5846:	f000 fc83 	bl	6150 <__errno>
    584a:	2316      	movs	r3, #22
    584c:	6003      	str	r3, [r0, #0]
    584e:	2000      	movs	r0, #0
    5850:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5854:	f1ab 0c61 	sub.w	ip, fp, #97	; 0x61
    5858:	f1bc 0f19 	cmp.w	ip, #25
    585c:	d803      	bhi.n	5866 <_strtol_l.constprop.0+0xaa>
    585e:	f1ab 0c57 	sub.w	ip, fp, #87	; 0x57
    5862:	4563      	cmp	r3, ip
    5864:	dce7      	bgt.n	5836 <_strtol_l.constprop.0+0x7a>
    5866:	1c6b      	adds	r3, r5, #1
    5868:	d027      	beq.n	58ba <_strtol_l.constprop.0+0xfe>
    586a:	b98c      	cbnz	r4, 5890 <_strtol_l.constprop.0+0xd4>
    586c:	b10a      	cbz	r2, 5872 <_strtol_l.constprop.0+0xb6>
    586e:	bba5      	cbnz	r5, 58da <_strtol_l.constprop.0+0x11e>
    5870:	6011      	str	r1, [r2, #0]
    5872:	4630      	mov	r0, r6
    5874:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5878:	45e2      	cmp	sl, ip
    587a:	dac9      	bge.n	5810 <_strtol_l.constprop.0+0x54>
    587c:	f04f 35ff 	mov.w	r5, #4294967295
    5880:	e7c9      	b.n	5816 <_strtol_l.constprop.0+0x5a>
    5882:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
    5886:	d005      	beq.n	5894 <_strtol_l.constprop.0+0xd8>
    5888:	f04f 080a 	mov.w	r8, #10
    588c:	4643      	mov	r3, r8
    588e:	e7b7      	b.n	5800 <_strtol_l.constprop.0+0x44>
    5890:	4276      	negs	r6, r6
    5892:	e7eb      	b.n	586c <_strtol_l.constprop.0+0xb0>
    5894:	f89e 3000 	ldrb.w	r3, [lr]
    5898:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    589c:	2b58      	cmp	r3, #88	; 0x58
    589e:	d121      	bne.n	58e4 <_strtol_l.constprop.0+0x128>
    58a0:	f04f 0810 	mov.w	r8, #16
    58a4:	f89e b001 	ldrb.w	fp, [lr, #1]
    58a8:	4643      	mov	r3, r8
    58aa:	f10e 0e02 	add.w	lr, lr, #2
    58ae:	e7a7      	b.n	5800 <_strtol_l.constprop.0+0x44>
    58b0:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
    58b4:	d01a      	beq.n	58ec <_strtol_l.constprop.0+0x130>
    58b6:	4698      	mov	r8, r3
    58b8:	e7a2      	b.n	5800 <_strtol_l.constprop.0+0x44>
    58ba:	2322      	movs	r3, #34	; 0x22
    58bc:	6003      	str	r3, [r0, #0]
    58be:	b172      	cbz	r2, 58de <_strtol_l.constprop.0+0x122>
    58c0:	f10e 31ff 	add.w	r1, lr, #4294967295
    58c4:	464e      	mov	r6, r9
    58c6:	6011      	str	r1, [r2, #0]
    58c8:	e7d3      	b.n	5872 <_strtol_l.constprop.0+0xb6>
    58ca:	f89e b000 	ldrb.w	fp, [lr]
    58ce:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
    58d2:	f106 0e02 	add.w	lr, r6, #2
    58d6:	2401      	movs	r4, #1
    58d8:	e78e      	b.n	57f8 <_strtol_l.constprop.0+0x3c>
    58da:	46b1      	mov	r9, r6
    58dc:	e7f0      	b.n	58c0 <_strtol_l.constprop.0+0x104>
    58de:	464e      	mov	r6, r9
    58e0:	4630      	mov	r0, r6
    58e2:	e7c7      	b.n	5874 <_strtol_l.constprop.0+0xb8>
    58e4:	f04f 0808 	mov.w	r8, #8
    58e8:	4643      	mov	r3, r8
    58ea:	e789      	b.n	5800 <_strtol_l.constprop.0+0x44>
    58ec:	f89e 5000 	ldrb.w	r5, [lr]
    58f0:	f005 05df 	and.w	r5, r5, #223	; 0xdf
    58f4:	2d58      	cmp	r5, #88	; 0x58
    58f6:	d0d3      	beq.n	58a0 <_strtol_l.constprop.0+0xe4>
    58f8:	4698      	mov	r8, r3
    58fa:	e781      	b.n	5800 <_strtol_l.constprop.0+0x44>
    58fc:	2000072d 	.word	0x2000072d

00005900 <_strtol_r>:
    5900:	f7ff bf5c 	b.w	57bc <_strtol_l.constprop.0>

00005904 <__cxa_atexit>:
    5904:	4613      	mov	r3, r2
    5906:	460a      	mov	r2, r1
    5908:	4601      	mov	r1, r0
    590a:	2002      	movs	r0, #2
    590c:	f000 beb6 	b.w	667c <__register_exitproc>

00005910 <isspace>:
    5910:	4b02      	ldr	r3, [pc, #8]	; (591c <isspace+0xc>)
    5912:	4418      	add	r0, r3
    5914:	7840      	ldrb	r0, [r0, #1]
    5916:	f000 0008 	and.w	r0, r0, #8
    591a:	4770      	bx	lr
    591c:	2000072c 	.word	0x2000072c

00005920 <toupper>:
    5920:	4b03      	ldr	r3, [pc, #12]	; (5930 <toupper+0x10>)
    5922:	5c1b      	ldrb	r3, [r3, r0]
    5924:	f003 0303 	and.w	r3, r3, #3
    5928:	2b02      	cmp	r3, #2
    592a:	bf08      	it	eq
    592c:	3820      	subeq	r0, #32
    592e:	4770      	bx	lr
    5930:	2000072d 	.word	0x2000072d

00005934 <stdio_exit_handler>:
    5934:	4a02      	ldr	r2, [pc, #8]	; (5940 <stdio_exit_handler+0xc>)
    5936:	4903      	ldr	r1, [pc, #12]	; (5944 <stdio_exit_handler+0x10>)
    5938:	4803      	ldr	r0, [pc, #12]	; (5948 <stdio_exit_handler+0x14>)
    593a:	f000 b8bb 	b.w	5ab4 <_fwalk_sglue>
    593e:	bf00      	nop
    5940:	200081ec 	.word	0x200081ec
    5944:	0000b025 	.word	0x0000b025
    5948:	20007a60 	.word	0x20007a60

0000594c <cleanup_stdio>:
    594c:	4b0c      	ldr	r3, [pc, #48]	; (5980 <cleanup_stdio+0x34>)
    594e:	6841      	ldr	r1, [r0, #4]
    5950:	4299      	cmp	r1, r3
    5952:	b510      	push	{r4, lr}
    5954:	4604      	mov	r4, r0
    5956:	d001      	beq.n	595c <cleanup_stdio+0x10>
    5958:	f005 fb64 	bl	b024 <_fclose_r>
    595c:	68a1      	ldr	r1, [r4, #8]
    595e:	4b09      	ldr	r3, [pc, #36]	; (5984 <cleanup_stdio+0x38>)
    5960:	4299      	cmp	r1, r3
    5962:	d002      	beq.n	596a <cleanup_stdio+0x1e>
    5964:	4620      	mov	r0, r4
    5966:	f005 fb5d 	bl	b024 <_fclose_r>
    596a:	68e1      	ldr	r1, [r4, #12]
    596c:	4b06      	ldr	r3, [pc, #24]	; (5988 <cleanup_stdio+0x3c>)
    596e:	4299      	cmp	r1, r3
    5970:	d004      	beq.n	597c <cleanup_stdio+0x30>
    5972:	4620      	mov	r0, r4
    5974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5978:	f005 bb54 	b.w	b024 <_fclose_r>
    597c:	bd10      	pop	{r4, pc}
    597e:	bf00      	nop
    5980:	20008c90 	.word	0x20008c90
    5984:	20008cf8 	.word	0x20008cf8
    5988:	20008d60 	.word	0x20008d60

0000598c <global_stdio_init.part.0>:
    598c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5990:	4c2a      	ldr	r4, [pc, #168]	; (5a3c <global_stdio_init.part.0+0xb0>)
    5992:	4b2b      	ldr	r3, [pc, #172]	; (5a40 <global_stdio_init.part.0+0xb4>)
    5994:	482b      	ldr	r0, [pc, #172]	; (5a44 <global_stdio_init.part.0+0xb8>)
    5996:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 5a58 <global_stdio_init.part.0+0xcc>
    599a:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 5a5c <global_stdio_init.part.0+0xd0>
    599e:	4f2a      	ldr	r7, [pc, #168]	; (5a48 <global_stdio_init.part.0+0xbc>)
    59a0:	6018      	str	r0, [r3, #0]
    59a2:	2500      	movs	r5, #0
    59a4:	2304      	movs	r3, #4
    59a6:	2208      	movs	r2, #8
    59a8:	4629      	mov	r1, r5
    59aa:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    59ae:	4e27      	ldr	r6, [pc, #156]	; (5a4c <global_stdio_init.part.0+0xc0>)
    59b0:	6665      	str	r5, [r4, #100]	; 0x64
    59b2:	e9c4 5302 	strd	r5, r3, [r4, #8]
    59b6:	e9c4 5500 	strd	r5, r5, [r4]
    59ba:	e9c4 5504 	strd	r5, r5, [r4, #16]
    59be:	61a5      	str	r5, [r4, #24]
    59c0:	f000 fa2a 	bl	5e18 <memset>
    59c4:	4b22      	ldr	r3, [pc, #136]	; (5a50 <global_stdio_init.part.0+0xc4>)
    59c6:	6763      	str	r3, [r4, #116]	; 0x74
    59c8:	2208      	movs	r2, #8
    59ca:	4629      	mov	r1, r5
    59cc:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    59d0:	e9c4 4907 	strd	r4, r9, [r4, #28]
    59d4:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
    59d8:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
    59dc:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
    59e0:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
    59e4:	6725      	str	r5, [r4, #112]	; 0x70
    59e6:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    59ea:	62e6      	str	r6, [r4, #44]	; 0x2c
    59ec:	f000 fa14 	bl	5e18 <memset>
    59f0:	4b18      	ldr	r3, [pc, #96]	; (5a54 <global_stdio_init.part.0+0xc8>)
    59f2:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    59f6:	4629      	mov	r1, r5
    59f8:	f104 0368 	add.w	r3, r4, #104	; 0x68
    59fc:	2208      	movs	r2, #8
    59fe:	f504 7096 	add.w	r0, r4, #300	; 0x12c
    5a02:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    5a06:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
    5a0a:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
    5a0e:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
    5a12:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
    5a16:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    5a1a:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
    5a1e:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    5a22:	f000 f9f9 	bl	5e18 <memset>
    5a26:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    5a2a:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
    5a2e:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
    5a32:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    5a36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5a3a:	bf00      	nop
    5a3c:	20008c90 	.word	0x20008c90
    5a40:	20008dc8 	.word	0x20008dc8
    5a44:	00005935 	.word	0x00005935
    5a48:	00005bbd 	.word	0x00005bbd
    5a4c:	00005bdd 	.word	0x00005bdd
    5a50:	00010009 	.word	0x00010009
    5a54:	00020012 	.word	0x00020012
    5a58:	00005b55 	.word	0x00005b55
    5a5c:	00005b7d 	.word	0x00005b7d

00005a60 <__sinit>:
    5a60:	b510      	push	{r4, lr}
    5a62:	4604      	mov	r4, r0
    5a64:	480a      	ldr	r0, [pc, #40]	; (5a90 <__sinit+0x30>)
    5a66:	f000 fba1 	bl	61ac <__retarget_lock_acquire_recursive>
    5a6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5a6c:	b923      	cbnz	r3, 5a78 <__sinit+0x18>
    5a6e:	4b09      	ldr	r3, [pc, #36]	; (5a94 <__sinit+0x34>)
    5a70:	4a09      	ldr	r2, [pc, #36]	; (5a98 <__sinit+0x38>)
    5a72:	681b      	ldr	r3, [r3, #0]
    5a74:	6362      	str	r2, [r4, #52]	; 0x34
    5a76:	b123      	cbz	r3, 5a82 <__sinit+0x22>
    5a78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5a7c:	4804      	ldr	r0, [pc, #16]	; (5a90 <__sinit+0x30>)
    5a7e:	f000 bb97 	b.w	61b0 <__retarget_lock_release_recursive>
    5a82:	f7ff ff83 	bl	598c <global_stdio_init.part.0>
    5a86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5a8a:	4801      	ldr	r0, [pc, #4]	; (5a90 <__sinit+0x30>)
    5a8c:	f000 bb90 	b.w	61b0 <__retarget_lock_release_recursive>
    5a90:	20008c58 	.word	0x20008c58
    5a94:	20008dc8 	.word	0x20008dc8
    5a98:	0000594d 	.word	0x0000594d

00005a9c <__sfp_lock_acquire>:
    5a9c:	4801      	ldr	r0, [pc, #4]	; (5aa4 <__sfp_lock_acquire+0x8>)
    5a9e:	f000 bb85 	b.w	61ac <__retarget_lock_acquire_recursive>
    5aa2:	bf00      	nop
    5aa4:	20008c58 	.word	0x20008c58

00005aa8 <__sfp_lock_release>:
    5aa8:	4801      	ldr	r0, [pc, #4]	; (5ab0 <__sfp_lock_release+0x8>)
    5aaa:	f000 bb81 	b.w	61b0 <__retarget_lock_release_recursive>
    5aae:	bf00      	nop
    5ab0:	20008c58 	.word	0x20008c58

00005ab4 <_fwalk_sglue>:
    5ab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5ab8:	4680      	mov	r8, r0
    5aba:	460f      	mov	r7, r1
    5abc:	4616      	mov	r6, r2
    5abe:	f04f 0900 	mov.w	r9, #0
    5ac2:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
    5ac6:	3d01      	subs	r5, #1
    5ac8:	d411      	bmi.n	5aee <_fwalk_sglue+0x3a>
    5aca:	89a3      	ldrh	r3, [r4, #12]
    5acc:	2b01      	cmp	r3, #1
    5ace:	f105 35ff 	add.w	r5, r5, #4294967295
    5ad2:	d908      	bls.n	5ae6 <_fwalk_sglue+0x32>
    5ad4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    5ad8:	3301      	adds	r3, #1
    5ada:	4621      	mov	r1, r4
    5adc:	d003      	beq.n	5ae6 <_fwalk_sglue+0x32>
    5ade:	4640      	mov	r0, r8
    5ae0:	47b8      	blx	r7
    5ae2:	ea49 0900 	orr.w	r9, r9, r0
    5ae6:	1c6b      	adds	r3, r5, #1
    5ae8:	f104 0468 	add.w	r4, r4, #104	; 0x68
    5aec:	d1ed      	bne.n	5aca <_fwalk_sglue+0x16>
    5aee:	6836      	ldr	r6, [r6, #0]
    5af0:	2e00      	cmp	r6, #0
    5af2:	d1e6      	bne.n	5ac2 <_fwalk_sglue+0xe>
    5af4:	4648      	mov	r0, r9
    5af6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5afa:	bf00      	nop

00005afc <sscanf>:
    5afc:	b40e      	push	{r1, r2, r3}
    5afe:	b510      	push	{r4, lr}
    5b00:	b09f      	sub	sp, #124	; 0x7c
    5b02:	ac21      	add	r4, sp, #132	; 0x84
    5b04:	f44f 7101 	mov.w	r1, #516	; 0x204
    5b08:	f854 2b04 	ldr.w	r2, [r4], #4
    5b0c:	9201      	str	r2, [sp, #4]
    5b0e:	f8ad 101c 	strh.w	r1, [sp, #28]
    5b12:	9004      	str	r0, [sp, #16]
    5b14:	9008      	str	r0, [sp, #32]
    5b16:	f000 fd33 	bl	6580 <strlen>
    5b1a:	9005      	str	r0, [sp, #20]
    5b1c:	9009      	str	r0, [sp, #36]	; 0x24
    5b1e:	480b      	ldr	r0, [pc, #44]	; (5b4c <sscanf+0x50>)
    5b20:	490b      	ldr	r1, [pc, #44]	; (5b50 <sscanf+0x54>)
    5b22:	910c      	str	r1, [sp, #48]	; 0x30
    5b24:	2300      	movs	r3, #0
    5b26:	f64f 7cff 	movw	ip, #65535	; 0xffff
    5b2a:	9310      	str	r3, [sp, #64]	; 0x40
    5b2c:	9315      	str	r3, [sp, #84]	; 0x54
    5b2e:	9a01      	ldr	r2, [sp, #4]
    5b30:	6800      	ldr	r0, [r0, #0]
    5b32:	f8ad c01e 	strh.w	ip, [sp, #30]
    5b36:	4623      	mov	r3, r4
    5b38:	a904      	add	r1, sp, #16
    5b3a:	9403      	str	r4, [sp, #12]
    5b3c:	f003 fe4a 	bl	97d4 <__ssvfscanf_r>
    5b40:	b01f      	add	sp, #124	; 0x7c
    5b42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5b46:	b003      	add	sp, #12
    5b48:	4770      	bx	lr
    5b4a:	bf00      	nop
    5b4c:	200081f8 	.word	0x200081f8
    5b50:	00005b79 	.word	0x00005b79

00005b54 <__sread>:
    5b54:	b510      	push	{r4, lr}
    5b56:	460c      	mov	r4, r1
    5b58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    5b5c:	f000 faba 	bl	60d4 <_read_r>
    5b60:	2800      	cmp	r0, #0
    5b62:	db03      	blt.n	5b6c <__sread+0x18>
    5b64:	6d23      	ldr	r3, [r4, #80]	; 0x50
    5b66:	4403      	add	r3, r0
    5b68:	6523      	str	r3, [r4, #80]	; 0x50
    5b6a:	bd10      	pop	{r4, pc}
    5b6c:	89a3      	ldrh	r3, [r4, #12]
    5b6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    5b72:	81a3      	strh	r3, [r4, #12]
    5b74:	bd10      	pop	{r4, pc}
    5b76:	bf00      	nop

00005b78 <__seofread>:
    5b78:	2000      	movs	r0, #0
    5b7a:	4770      	bx	lr

00005b7c <__swrite>:
    5b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5b80:	460c      	mov	r4, r1
    5b82:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
    5b86:	461f      	mov	r7, r3
    5b88:	05cb      	lsls	r3, r1, #23
    5b8a:	4605      	mov	r5, r0
    5b8c:	4616      	mov	r6, r2
    5b8e:	d40b      	bmi.n	5ba8 <__swrite+0x2c>
    5b90:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
    5b94:	81a1      	strh	r1, [r4, #12]
    5b96:	463b      	mov	r3, r7
    5b98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    5b9c:	4632      	mov	r2, r6
    5b9e:	4628      	mov	r0, r5
    5ba0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5ba4:	f000 babe 	b.w	6124 <_write_r>
    5ba8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    5bac:	2302      	movs	r3, #2
    5bae:	2200      	movs	r2, #0
    5bb0:	f000 fa7a 	bl	60a8 <_lseek_r>
    5bb4:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
    5bb8:	e7ea      	b.n	5b90 <__swrite+0x14>
    5bba:	bf00      	nop

00005bbc <__sseek>:
    5bbc:	b510      	push	{r4, lr}
    5bbe:	460c      	mov	r4, r1
    5bc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    5bc4:	f000 fa70 	bl	60a8 <_lseek_r>
    5bc8:	89a3      	ldrh	r3, [r4, #12]
    5bca:	1c42      	adds	r2, r0, #1
    5bcc:	bf0e      	itee	eq
    5bce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    5bd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    5bd6:	6520      	strne	r0, [r4, #80]	; 0x50
    5bd8:	81a3      	strh	r3, [r4, #12]
    5bda:	bd10      	pop	{r4, pc}

00005bdc <__sclose>:
    5bdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    5be0:	f000 ba50 	b.w	6084 <_close_r>

00005be4 <_vdprintf_r>:
    5be4:	b5f0      	push	{r4, r5, r6, r7, lr}
    5be6:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
    5bea:	af04      	add	r7, sp, #16
    5bec:	9300      	str	r3, [sp, #0]
    5bee:	4613      	mov	r3, r2
    5bf0:	f44f 7200 	mov.w	r2, #512	; 0x200
    5bf4:	460e      	mov	r6, r1
    5bf6:	9203      	str	r2, [sp, #12]
    5bf8:	4639      	mov	r1, r7
    5bfa:	aa03      	add	r2, sp, #12
    5bfc:	4605      	mov	r5, r0
    5bfe:	f000 f85d 	bl	5cbc <_vasnprintf_r>
    5c02:	b188      	cbz	r0, 5c28 <_vdprintf_r+0x44>
    5c04:	4604      	mov	r4, r0
    5c06:	4602      	mov	r2, r0
    5c08:	9b03      	ldr	r3, [sp, #12]
    5c0a:	4631      	mov	r1, r6
    5c0c:	4628      	mov	r0, r5
    5c0e:	f000 fa89 	bl	6124 <_write_r>
    5c12:	42bc      	cmp	r4, r7
    5c14:	9003      	str	r0, [sp, #12]
    5c16:	d004      	beq.n	5c22 <_vdprintf_r+0x3e>
    5c18:	4628      	mov	r0, r5
    5c1a:	4621      	mov	r1, r4
    5c1c:	f000 fdc2 	bl	67a4 <_free_r>
    5c20:	9803      	ldr	r0, [sp, #12]
    5c22:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
    5c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5c28:	f04f 30ff 	mov.w	r0, #4294967295
    5c2c:	e7f9      	b.n	5c22 <_vdprintf_r+0x3e>
    5c2e:	bf00      	nop

00005c30 <vdprintf>:
    5c30:	b410      	push	{r4}
    5c32:	4c05      	ldr	r4, [pc, #20]	; (5c48 <vdprintf+0x18>)
    5c34:	4684      	mov	ip, r0
    5c36:	4613      	mov	r3, r2
    5c38:	6820      	ldr	r0, [r4, #0]
    5c3a:	f85d 4b04 	ldr.w	r4, [sp], #4
    5c3e:	460a      	mov	r2, r1
    5c40:	4661      	mov	r1, ip
    5c42:	f7ff bfcf 	b.w	5be4 <_vdprintf_r>
    5c46:	bf00      	nop
    5c48:	200081f8 	.word	0x200081f8

00005c4c <vsnprintf>:
    5c4c:	b510      	push	{r4, lr}
    5c4e:	4c1a      	ldr	r4, [pc, #104]	; (5cb8 <vsnprintf+0x6c>)
    5c50:	2900      	cmp	r1, #0
    5c52:	6824      	ldr	r4, [r4, #0]
    5c54:	b09a      	sub	sp, #104	; 0x68
    5c56:	db2a      	blt.n	5cae <vsnprintf+0x62>
    5c58:	9000      	str	r0, [sp, #0]
    5c5a:	9004      	str	r0, [sp, #16]
    5c5c:	f44f 7002 	mov.w	r0, #520	; 0x208
    5c60:	f8ad 000c 	strh.w	r0, [sp, #12]
    5c64:	d013      	beq.n	5c8e <vsnprintf+0x42>
    5c66:	3901      	subs	r1, #1
    5c68:	f64f 70ff 	movw	r0, #65535	; 0xffff
    5c6c:	9102      	str	r1, [sp, #8]
    5c6e:	9105      	str	r1, [sp, #20]
    5c70:	f8ad 000e 	strh.w	r0, [sp, #14]
    5c74:	4669      	mov	r1, sp
    5c76:	4620      	mov	r0, r4
    5c78:	f002 f80a 	bl	7c90 <_svfprintf_r>
    5c7c:	1c42      	adds	r2, r0, #1
    5c7e:	da01      	bge.n	5c84 <vsnprintf+0x38>
    5c80:	238b      	movs	r3, #139	; 0x8b
    5c82:	6023      	str	r3, [r4, #0]
    5c84:	9b00      	ldr	r3, [sp, #0]
    5c86:	2200      	movs	r2, #0
    5c88:	701a      	strb	r2, [r3, #0]
    5c8a:	b01a      	add	sp, #104	; 0x68
    5c8c:	bd10      	pop	{r4, pc}
    5c8e:	f64f 70ff 	movw	r0, #65535	; 0xffff
    5c92:	9102      	str	r1, [sp, #8]
    5c94:	9105      	str	r1, [sp, #20]
    5c96:	f8ad 000e 	strh.w	r0, [sp, #14]
    5c9a:	4669      	mov	r1, sp
    5c9c:	4620      	mov	r0, r4
    5c9e:	f001 fff7 	bl	7c90 <_svfprintf_r>
    5ca2:	1c43      	adds	r3, r0, #1
    5ca4:	da01      	bge.n	5caa <vsnprintf+0x5e>
    5ca6:	238b      	movs	r3, #139	; 0x8b
    5ca8:	6023      	str	r3, [r4, #0]
    5caa:	b01a      	add	sp, #104	; 0x68
    5cac:	bd10      	pop	{r4, pc}
    5cae:	238b      	movs	r3, #139	; 0x8b
    5cb0:	6023      	str	r3, [r4, #0]
    5cb2:	f04f 30ff 	mov.w	r0, #4294967295
    5cb6:	e7f8      	b.n	5caa <vsnprintf+0x5e>
    5cb8:	200081f8 	.word	0x200081f8

00005cbc <_vasnprintf_r>:
    5cbc:	b530      	push	{r4, r5, lr}
    5cbe:	6814      	ldr	r4, [r2, #0]
    5cc0:	4615      	mov	r5, r2
    5cc2:	b09b      	sub	sp, #108	; 0x6c
    5cc4:	461a      	mov	r2, r3
    5cc6:	b109      	cbz	r1, 5ccc <_vasnprintf_r+0x10>
    5cc8:	2c00      	cmp	r4, #0
    5cca:	d119      	bne.n	5d00 <_vasnprintf_r+0x44>
    5ccc:	2100      	movs	r1, #0
    5cce:	f44f 7322 	mov.w	r3, #648	; 0x288
    5cd2:	f8ad 300c 	strh.w	r3, [sp, #12]
    5cd6:	9100      	str	r1, [sp, #0]
    5cd8:	9104      	str	r1, [sp, #16]
    5cda:	f64f 73ff 	movw	r3, #65535	; 0xffff
    5cde:	9102      	str	r1, [sp, #8]
    5ce0:	9105      	str	r1, [sp, #20]
    5ce2:	f8ad 300e 	strh.w	r3, [sp, #14]
    5ce6:	4669      	mov	r1, sp
    5ce8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    5cea:	f001 ffd1 	bl	7c90 <_svfprintf_r>
    5cee:	2800      	cmp	r0, #0
    5cf0:	db13      	blt.n	5d1a <_vasnprintf_r+0x5e>
    5cf2:	9b00      	ldr	r3, [sp, #0]
    5cf4:	6028      	str	r0, [r5, #0]
    5cf6:	2200      	movs	r2, #0
    5cf8:	701a      	strb	r2, [r3, #0]
    5cfa:	9804      	ldr	r0, [sp, #16]
    5cfc:	b01b      	add	sp, #108	; 0x6c
    5cfe:	bd30      	pop	{r4, r5, pc}
    5d00:	f44f 63c1 	mov.w	r3, #1544	; 0x608
    5d04:	9100      	str	r1, [sp, #0]
    5d06:	9104      	str	r1, [sp, #16]
    5d08:	f8ad 300c 	strh.w	r3, [sp, #12]
    5d0c:	4621      	mov	r1, r4
    5d0e:	dae4      	bge.n	5cda <_vasnprintf_r+0x1e>
    5d10:	238b      	movs	r3, #139	; 0x8b
    5d12:	6003      	str	r3, [r0, #0]
    5d14:	2000      	movs	r0, #0
    5d16:	b01b      	add	sp, #108	; 0x6c
    5d18:	bd30      	pop	{r4, r5, pc}
    5d1a:	2000      	movs	r0, #0
    5d1c:	e7ee      	b.n	5cfc <_vasnprintf_r+0x40>
    5d1e:	bf00      	nop

00005d20 <memmove>:
    5d20:	4288      	cmp	r0, r1
    5d22:	d90d      	bls.n	5d40 <memmove+0x20>
    5d24:	188b      	adds	r3, r1, r2
    5d26:	4283      	cmp	r3, r0
    5d28:	d90a      	bls.n	5d40 <memmove+0x20>
    5d2a:	eb00 0c02 	add.w	ip, r0, r2
    5d2e:	b1ba      	cbz	r2, 5d60 <memmove+0x40>
    5d30:	4662      	mov	r2, ip
    5d32:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
    5d36:	f802 cd01 	strb.w	ip, [r2, #-1]!
    5d3a:	4299      	cmp	r1, r3
    5d3c:	d1f9      	bne.n	5d32 <memmove+0x12>
    5d3e:	4770      	bx	lr
    5d40:	2a0f      	cmp	r2, #15
    5d42:	d80e      	bhi.n	5d62 <memmove+0x42>
    5d44:	4603      	mov	r3, r0
    5d46:	f102 3cff 	add.w	ip, r2, #4294967295
    5d4a:	b14a      	cbz	r2, 5d60 <memmove+0x40>
    5d4c:	f10c 0c01 	add.w	ip, ip, #1
    5d50:	3b01      	subs	r3, #1
    5d52:	448c      	add	ip, r1
    5d54:	f811 2b01 	ldrb.w	r2, [r1], #1
    5d58:	f803 2f01 	strb.w	r2, [r3, #1]!
    5d5c:	4561      	cmp	r1, ip
    5d5e:	d1f9      	bne.n	5d54 <memmove+0x34>
    5d60:	4770      	bx	lr
    5d62:	ea40 0301 	orr.w	r3, r0, r1
    5d66:	079b      	lsls	r3, r3, #30
    5d68:	d150      	bne.n	5e0c <memmove+0xec>
    5d6a:	f1a2 0310 	sub.w	r3, r2, #16
    5d6e:	b570      	push	{r4, r5, r6, lr}
    5d70:	f101 0c20 	add.w	ip, r1, #32
    5d74:	f023 050f 	bic.w	r5, r3, #15
    5d78:	f101 0e10 	add.w	lr, r1, #16
    5d7c:	f100 0410 	add.w	r4, r0, #16
    5d80:	44ac      	add	ip, r5
    5d82:	091b      	lsrs	r3, r3, #4
    5d84:	f85e 5c10 	ldr.w	r5, [lr, #-16]
    5d88:	f844 5c10 	str.w	r5, [r4, #-16]
    5d8c:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
    5d90:	f844 5c0c 	str.w	r5, [r4, #-12]
    5d94:	f85e 5c08 	ldr.w	r5, [lr, #-8]
    5d98:	f844 5c08 	str.w	r5, [r4, #-8]
    5d9c:	f85e 5c04 	ldr.w	r5, [lr, #-4]
    5da0:	f844 5c04 	str.w	r5, [r4, #-4]
    5da4:	f10e 0e10 	add.w	lr, lr, #16
    5da8:	45e6      	cmp	lr, ip
    5daa:	f104 0410 	add.w	r4, r4, #16
    5dae:	d1e9      	bne.n	5d84 <memmove+0x64>
    5db0:	3301      	adds	r3, #1
    5db2:	f012 0f0c 	tst.w	r2, #12
    5db6:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    5dba:	f002 040f 	and.w	r4, r2, #15
    5dbe:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    5dc2:	d027      	beq.n	5e14 <memmove+0xf4>
    5dc4:	3c04      	subs	r4, #4
    5dc6:	f024 0603 	bic.w	r6, r4, #3
    5dca:	ea4f 0c94 	mov.w	ip, r4, lsr #2
    5dce:	441e      	add	r6, r3
    5dd0:	1f1c      	subs	r4, r3, #4
    5dd2:	468e      	mov	lr, r1
    5dd4:	f85e 5b04 	ldr.w	r5, [lr], #4
    5dd8:	f844 5f04 	str.w	r5, [r4, #4]!
    5ddc:	42b4      	cmp	r4, r6
    5dde:	d1f9      	bne.n	5dd4 <memmove+0xb4>
    5de0:	f10c 0401 	add.w	r4, ip, #1
    5de4:	f002 0203 	and.w	r2, r2, #3
    5de8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    5dec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    5df0:	f102 3cff 	add.w	ip, r2, #4294967295
    5df4:	b14a      	cbz	r2, 5e0a <memmove+0xea>
    5df6:	f10c 0c01 	add.w	ip, ip, #1
    5dfa:	3b01      	subs	r3, #1
    5dfc:	448c      	add	ip, r1
    5dfe:	f811 2b01 	ldrb.w	r2, [r1], #1
    5e02:	f803 2f01 	strb.w	r2, [r3, #1]!
    5e06:	4561      	cmp	r1, ip
    5e08:	d1f9      	bne.n	5dfe <memmove+0xde>
    5e0a:	bd70      	pop	{r4, r5, r6, pc}
    5e0c:	f102 3cff 	add.w	ip, r2, #4294967295
    5e10:	4603      	mov	r3, r0
    5e12:	e79b      	b.n	5d4c <memmove+0x2c>
    5e14:	4622      	mov	r2, r4
    5e16:	e7eb      	b.n	5df0 <memmove+0xd0>

00005e18 <memset>:
    5e18:	0783      	lsls	r3, r0, #30
    5e1a:	b530      	push	{r4, r5, lr}
    5e1c:	d048      	beq.n	5eb0 <memset+0x98>
    5e1e:	1e54      	subs	r4, r2, #1
    5e20:	2a00      	cmp	r2, #0
    5e22:	d03f      	beq.n	5ea4 <memset+0x8c>
    5e24:	b2ca      	uxtb	r2, r1
    5e26:	4603      	mov	r3, r0
    5e28:	e001      	b.n	5e2e <memset+0x16>
    5e2a:	3c01      	subs	r4, #1
    5e2c:	d33a      	bcc.n	5ea4 <memset+0x8c>
    5e2e:	f803 2b01 	strb.w	r2, [r3], #1
    5e32:	079d      	lsls	r5, r3, #30
    5e34:	d1f9      	bne.n	5e2a <memset+0x12>
    5e36:	2c03      	cmp	r4, #3
    5e38:	d92d      	bls.n	5e96 <memset+0x7e>
    5e3a:	b2cd      	uxtb	r5, r1
    5e3c:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    5e40:	2c0f      	cmp	r4, #15
    5e42:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    5e46:	d936      	bls.n	5eb6 <memset+0x9e>
    5e48:	f1a4 0210 	sub.w	r2, r4, #16
    5e4c:	f022 0c0f 	bic.w	ip, r2, #15
    5e50:	f103 0e20 	add.w	lr, r3, #32
    5e54:	44e6      	add	lr, ip
    5e56:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    5e5a:	f103 0210 	add.w	r2, r3, #16
    5e5e:	e942 5504 	strd	r5, r5, [r2, #-16]
    5e62:	e942 5502 	strd	r5, r5, [r2, #-8]
    5e66:	3210      	adds	r2, #16
    5e68:	4572      	cmp	r2, lr
    5e6a:	d1f8      	bne.n	5e5e <memset+0x46>
    5e6c:	f10c 0201 	add.w	r2, ip, #1
    5e70:	f014 0f0c 	tst.w	r4, #12
    5e74:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    5e78:	f004 0c0f 	and.w	ip, r4, #15
    5e7c:	d013      	beq.n	5ea6 <memset+0x8e>
    5e7e:	f1ac 0304 	sub.w	r3, ip, #4
    5e82:	f023 0303 	bic.w	r3, r3, #3
    5e86:	3304      	adds	r3, #4
    5e88:	4413      	add	r3, r2
    5e8a:	f842 5b04 	str.w	r5, [r2], #4
    5e8e:	4293      	cmp	r3, r2
    5e90:	d1fb      	bne.n	5e8a <memset+0x72>
    5e92:	f00c 0403 	and.w	r4, ip, #3
    5e96:	b12c      	cbz	r4, 5ea4 <memset+0x8c>
    5e98:	b2c9      	uxtb	r1, r1
    5e9a:	441c      	add	r4, r3
    5e9c:	f803 1b01 	strb.w	r1, [r3], #1
    5ea0:	429c      	cmp	r4, r3
    5ea2:	d1fb      	bne.n	5e9c <memset+0x84>
    5ea4:	bd30      	pop	{r4, r5, pc}
    5ea6:	4664      	mov	r4, ip
    5ea8:	4613      	mov	r3, r2
    5eaa:	2c00      	cmp	r4, #0
    5eac:	d1f4      	bne.n	5e98 <memset+0x80>
    5eae:	e7f9      	b.n	5ea4 <memset+0x8c>
    5eb0:	4603      	mov	r3, r0
    5eb2:	4614      	mov	r4, r2
    5eb4:	e7bf      	b.n	5e36 <memset+0x1e>
    5eb6:	461a      	mov	r2, r3
    5eb8:	46a4      	mov	ip, r4
    5eba:	e7e0      	b.n	5e7e <memset+0x66>

00005ebc <strchr>:
    5ebc:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    5ec0:	4603      	mov	r3, r0
    5ec2:	d044      	beq.n	5f4e <strchr+0x92>
    5ec4:	0782      	lsls	r2, r0, #30
    5ec6:	d132      	bne.n	5f2e <strchr+0x72>
    5ec8:	b510      	push	{r4, lr}
    5eca:	6804      	ldr	r4, [r0, #0]
    5ecc:	ea41 2e01 	orr.w	lr, r1, r1, lsl #8
    5ed0:	ea4e 4e0e 	orr.w	lr, lr, lr, lsl #16
    5ed4:	ea8e 0204 	eor.w	r2, lr, r4
    5ed8:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
    5edc:	ea23 0302 	bic.w	r3, r3, r2
    5ee0:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    5ee4:	ea22 0204 	bic.w	r2, r2, r4
    5ee8:	4313      	orrs	r3, r2
    5eea:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    5eee:	d10f      	bne.n	5f10 <strchr+0x54>
    5ef0:	f850 4f04 	ldr.w	r4, [r0, #4]!
    5ef4:	ea84 0c0e 	eor.w	ip, r4, lr
    5ef8:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
    5efc:	f1ac 3201 	sub.w	r2, ip, #16843009	; 0x1010101
    5f00:	ea23 0304 	bic.w	r3, r3, r4
    5f04:	ea22 020c 	bic.w	r2, r2, ip
    5f08:	4313      	orrs	r3, r2
    5f0a:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    5f0e:	d0ef      	beq.n	5ef0 <strchr+0x34>
    5f10:	7803      	ldrb	r3, [r0, #0]
    5f12:	b923      	cbnz	r3, 5f1e <strchr+0x62>
    5f14:	e036      	b.n	5f84 <strchr+0xc8>
    5f16:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    5f1a:	2b00      	cmp	r3, #0
    5f1c:	d032      	beq.n	5f84 <strchr+0xc8>
    5f1e:	4299      	cmp	r1, r3
    5f20:	d1f9      	bne.n	5f16 <strchr+0x5a>
    5f22:	bd10      	pop	{r4, pc}
    5f24:	428a      	cmp	r2, r1
    5f26:	d011      	beq.n	5f4c <strchr+0x90>
    5f28:	079a      	lsls	r2, r3, #30
    5f2a:	4618      	mov	r0, r3
    5f2c:	d0cc      	beq.n	5ec8 <strchr+0xc>
    5f2e:	4618      	mov	r0, r3
    5f30:	f813 2b01 	ldrb.w	r2, [r3], #1
    5f34:	2a00      	cmp	r2, #0
    5f36:	d1f5      	bne.n	5f24 <strchr+0x68>
    5f38:	4610      	mov	r0, r2
    5f3a:	4770      	bx	lr
    5f3c:	0799      	lsls	r1, r3, #30
    5f3e:	4618      	mov	r0, r3
    5f40:	d007      	beq.n	5f52 <strchr+0x96>
    5f42:	4618      	mov	r0, r3
    5f44:	3301      	adds	r3, #1
    5f46:	7802      	ldrb	r2, [r0, #0]
    5f48:	2a00      	cmp	r2, #0
    5f4a:	d1f7      	bne.n	5f3c <strchr+0x80>
    5f4c:	4770      	bx	lr
    5f4e:	0782      	lsls	r2, r0, #30
    5f50:	d1f7      	bne.n	5f42 <strchr+0x86>
    5f52:	6802      	ldr	r2, [r0, #0]
    5f54:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
    5f58:	ea23 0302 	bic.w	r3, r3, r2
    5f5c:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    5f60:	d108      	bne.n	5f74 <strchr+0xb8>
    5f62:	f850 2f04 	ldr.w	r2, [r0, #4]!
    5f66:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
    5f6a:	ea23 0302 	bic.w	r3, r3, r2
    5f6e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    5f72:	d0f6      	beq.n	5f62 <strchr+0xa6>
    5f74:	7803      	ldrb	r3, [r0, #0]
    5f76:	2b00      	cmp	r3, #0
    5f78:	d0e8      	beq.n	5f4c <strchr+0x90>
    5f7a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    5f7e:	2b00      	cmp	r3, #0
    5f80:	d1fb      	bne.n	5f7a <strchr+0xbe>
    5f82:	4770      	bx	lr
    5f84:	4618      	mov	r0, r3
    5f86:	bd10      	pop	{r4, pc}

00005f88 <strncmp>:
    5f88:	2a00      	cmp	r2, #0
    5f8a:	d03e      	beq.n	600a <strncmp+0x82>
    5f8c:	ea40 0301 	orr.w	r3, r0, r1
    5f90:	079b      	lsls	r3, r3, #30
    5f92:	b530      	push	{r4, r5, lr}
    5f94:	4684      	mov	ip, r0
    5f96:	d12f      	bne.n	5ff8 <strncmp+0x70>
    5f98:	2a03      	cmp	r2, #3
    5f9a:	d92d      	bls.n	5ff8 <strncmp+0x70>
    5f9c:	460b      	mov	r3, r1
    5f9e:	e008      	b.n	5fb2 <strncmp+0x2a>
    5fa0:	3a04      	subs	r2, #4
    5fa2:	4684      	mov	ip, r0
    5fa4:	4619      	mov	r1, r3
    5fa6:	d025      	beq.n	5ff4 <strncmp+0x6c>
    5fa8:	f01e 3f80 	tst.w	lr, #2155905152	; 0x80808080
    5fac:	d122      	bne.n	5ff4 <strncmp+0x6c>
    5fae:	2a03      	cmp	r2, #3
    5fb0:	d922      	bls.n	5ff8 <strncmp+0x70>
    5fb2:	6804      	ldr	r4, [r0, #0]
    5fb4:	4619      	mov	r1, r3
    5fb6:	f853 5b04 	ldr.w	r5, [r3], #4
    5fba:	f1a4 3e01 	sub.w	lr, r4, #16843009	; 0x1010101
    5fbe:	42ac      	cmp	r4, r5
    5fc0:	4684      	mov	ip, r0
    5fc2:	ea2e 0e04 	bic.w	lr, lr, r4
    5fc6:	f100 0004 	add.w	r0, r0, #4
    5fca:	d0e9      	beq.n	5fa0 <strncmp+0x18>
    5fcc:	f89c 0000 	ldrb.w	r0, [ip]
    5fd0:	780c      	ldrb	r4, [r1, #0]
    5fd2:	42a0      	cmp	r0, r4
    5fd4:	d11b      	bne.n	600e <strncmp+0x86>
    5fd6:	46e6      	mov	lr, ip
    5fd8:	b168      	cbz	r0, 5ff6 <strncmp+0x6e>
    5fda:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
    5fde:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    5fe2:	eba2 030e 	sub.w	r3, r2, lr
    5fe6:	42a0      	cmp	r0, r4
    5fe8:	f103 33ff 	add.w	r3, r3, #4294967295
    5fec:	d10f      	bne.n	600e <strncmp+0x86>
    5fee:	eb1c 0303 	adds.w	r3, ip, r3
    5ff2:	d1f1      	bne.n	5fd8 <strncmp+0x50>
    5ff4:	2000      	movs	r0, #0
    5ff6:	bd30      	pop	{r4, r5, pc}
    5ff8:	f89c 0000 	ldrb.w	r0, [ip]
    5ffc:	780c      	ldrb	r4, [r1, #0]
    5ffe:	4284      	cmp	r4, r0
    6000:	d105      	bne.n	600e <strncmp+0x86>
    6002:	2a01      	cmp	r2, #1
    6004:	d0f6      	beq.n	5ff4 <strncmp+0x6c>
    6006:	46e6      	mov	lr, ip
    6008:	e7e6      	b.n	5fd8 <strncmp+0x50>
    600a:	4610      	mov	r0, r2
    600c:	4770      	bx	lr
    600e:	1b00      	subs	r0, r0, r4
    6010:	bd30      	pop	{r4, r5, pc}
    6012:	bf00      	nop

00006014 <strncpy>:
    6014:	ea40 0301 	orr.w	r3, r0, r1
    6018:	079b      	lsls	r3, r3, #30
    601a:	b530      	push	{r4, r5, lr}
    601c:	d101      	bne.n	6022 <strncpy+0xe>
    601e:	2a03      	cmp	r2, #3
    6020:	d80f      	bhi.n	6042 <strncpy+0x2e>
    6022:	4684      	mov	ip, r0
    6024:	f101 3eff 	add.w	lr, r1, #4294967295
    6028:	e007      	b.n	603a <strncpy+0x26>
    602a:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    602e:	f803 1b01 	strb.w	r1, [r3], #1
    6032:	1e54      	subs	r4, r2, #1
    6034:	b1c1      	cbz	r1, 6068 <strncpy+0x54>
    6036:	469c      	mov	ip, r3
    6038:	4622      	mov	r2, r4
    603a:	4663      	mov	r3, ip
    603c:	2a00      	cmp	r2, #0
    603e:	d1f4      	bne.n	602a <strncpy+0x16>
    6040:	bd30      	pop	{r4, r5, pc}
    6042:	460b      	mov	r3, r1
    6044:	4684      	mov	ip, r0
    6046:	4619      	mov	r1, r3
    6048:	f853 5b04 	ldr.w	r5, [r3], #4
    604c:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
    6050:	ea24 0405 	bic.w	r4, r4, r5
    6054:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    6058:	d1e4      	bne.n	6024 <strncpy+0x10>
    605a:	3a04      	subs	r2, #4
    605c:	2a03      	cmp	r2, #3
    605e:	f84c 5b04 	str.w	r5, [ip], #4
    6062:	4619      	mov	r1, r3
    6064:	d8ef      	bhi.n	6046 <strncpy+0x32>
    6066:	e7dd      	b.n	6024 <strncpy+0x10>
    6068:	4494      	add	ip, r2
    606a:	2c00      	cmp	r4, #0
    606c:	d0e8      	beq.n	6040 <strncpy+0x2c>
    606e:	f803 1b01 	strb.w	r1, [r3], #1
    6072:	4563      	cmp	r3, ip
    6074:	d1fb      	bne.n	606e <strncpy+0x5a>
    6076:	bd30      	pop	{r4, r5, pc}

00006078 <__locale_mb_cur_max>:
    6078:	4b01      	ldr	r3, [pc, #4]	; (6080 <__locale_mb_cur_max+0x8>)
    607a:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
    607e:	4770      	bx	lr
    6080:	20007c70 	.word	0x20007c70

00006084 <_close_r>:
    6084:	b538      	push	{r3, r4, r5, lr}
    6086:	4d07      	ldr	r5, [pc, #28]	; (60a4 <_close_r+0x20>)
    6088:	2200      	movs	r2, #0
    608a:	4604      	mov	r4, r0
    608c:	4608      	mov	r0, r1
    608e:	602a      	str	r2, [r5, #0]
    6090:	f7fc fada 	bl	2648 <_close>
    6094:	1c43      	adds	r3, r0, #1
    6096:	d000      	beq.n	609a <_close_r+0x16>
    6098:	bd38      	pop	{r3, r4, r5, pc}
    609a:	682b      	ldr	r3, [r5, #0]
    609c:	2b00      	cmp	r3, #0
    609e:	d0fb      	beq.n	6098 <_close_r+0x14>
    60a0:	6023      	str	r3, [r4, #0]
    60a2:	bd38      	pop	{r3, r4, r5, pc}
    60a4:	20008de4 	.word	0x20008de4

000060a8 <_lseek_r>:
    60a8:	b538      	push	{r3, r4, r5, lr}
    60aa:	460c      	mov	r4, r1
    60ac:	4d08      	ldr	r5, [pc, #32]	; (60d0 <_lseek_r+0x28>)
    60ae:	4684      	mov	ip, r0
    60b0:	4611      	mov	r1, r2
    60b2:	4620      	mov	r0, r4
    60b4:	461a      	mov	r2, r3
    60b6:	2300      	movs	r3, #0
    60b8:	602b      	str	r3, [r5, #0]
    60ba:	4664      	mov	r4, ip
    60bc:	f7fc fad0 	bl	2660 <_lseek>
    60c0:	1c43      	adds	r3, r0, #1
    60c2:	d000      	beq.n	60c6 <_lseek_r+0x1e>
    60c4:	bd38      	pop	{r3, r4, r5, pc}
    60c6:	682b      	ldr	r3, [r5, #0]
    60c8:	2b00      	cmp	r3, #0
    60ca:	d0fb      	beq.n	60c4 <_lseek_r+0x1c>
    60cc:	6023      	str	r3, [r4, #0]
    60ce:	bd38      	pop	{r3, r4, r5, pc}
    60d0:	20008de4 	.word	0x20008de4

000060d4 <_read_r>:
    60d4:	b538      	push	{r3, r4, r5, lr}
    60d6:	460c      	mov	r4, r1
    60d8:	4d08      	ldr	r5, [pc, #32]	; (60fc <_read_r+0x28>)
    60da:	4684      	mov	ip, r0
    60dc:	4611      	mov	r1, r2
    60de:	4620      	mov	r0, r4
    60e0:	461a      	mov	r2, r3
    60e2:	2300      	movs	r3, #0
    60e4:	602b      	str	r3, [r5, #0]
    60e6:	4664      	mov	r4, ip
    60e8:	f7fc faac 	bl	2644 <_read>
    60ec:	1c43      	adds	r3, r0, #1
    60ee:	d000      	beq.n	60f2 <_read_r+0x1e>
    60f0:	bd38      	pop	{r3, r4, r5, pc}
    60f2:	682b      	ldr	r3, [r5, #0]
    60f4:	2b00      	cmp	r3, #0
    60f6:	d0fb      	beq.n	60f0 <_read_r+0x1c>
    60f8:	6023      	str	r3, [r4, #0]
    60fa:	bd38      	pop	{r3, r4, r5, pc}
    60fc:	20008de4 	.word	0x20008de4

00006100 <_sbrk_r>:
    6100:	b538      	push	{r3, r4, r5, lr}
    6102:	4d07      	ldr	r5, [pc, #28]	; (6120 <_sbrk_r+0x20>)
    6104:	2200      	movs	r2, #0
    6106:	4604      	mov	r4, r0
    6108:	4608      	mov	r0, r1
    610a:	602a      	str	r2, [r5, #0]
    610c:	f7fc fa80 	bl	2610 <_sbrk>
    6110:	1c43      	adds	r3, r0, #1
    6112:	d000      	beq.n	6116 <_sbrk_r+0x16>
    6114:	bd38      	pop	{r3, r4, r5, pc}
    6116:	682b      	ldr	r3, [r5, #0]
    6118:	2b00      	cmp	r3, #0
    611a:	d0fb      	beq.n	6114 <_sbrk_r+0x14>
    611c:	6023      	str	r3, [r4, #0]
    611e:	bd38      	pop	{r3, r4, r5, pc}
    6120:	20008de4 	.word	0x20008de4

00006124 <_write_r>:
    6124:	b538      	push	{r3, r4, r5, lr}
    6126:	460c      	mov	r4, r1
    6128:	4d08      	ldr	r5, [pc, #32]	; (614c <_write_r+0x28>)
    612a:	4684      	mov	ip, r0
    612c:	4611      	mov	r1, r2
    612e:	4620      	mov	r0, r4
    6130:	461a      	mov	r2, r3
    6132:	2300      	movs	r3, #0
    6134:	602b      	str	r3, [r5, #0]
    6136:	4664      	mov	r4, ip
    6138:	f7fb fbc2 	bl	18c0 <_write>
    613c:	1c43      	adds	r3, r0, #1
    613e:	d000      	beq.n	6142 <_write_r+0x1e>
    6140:	bd38      	pop	{r3, r4, r5, pc}
    6142:	682b      	ldr	r3, [r5, #0]
    6144:	2b00      	cmp	r3, #0
    6146:	d0fb      	beq.n	6140 <_write_r+0x1c>
    6148:	6023      	str	r3, [r4, #0]
    614a:	bd38      	pop	{r3, r4, r5, pc}
    614c:	20008de4 	.word	0x20008de4

00006150 <__errno>:
    6150:	4b01      	ldr	r3, [pc, #4]	; (6158 <__errno+0x8>)
    6152:	6818      	ldr	r0, [r3, #0]
    6154:	4770      	bx	lr
    6156:	bf00      	nop
    6158:	200081f8 	.word	0x200081f8

0000615c <__libc_init_array>:
    615c:	b570      	push	{r4, r5, r6, lr}
    615e:	4e0d      	ldr	r6, [pc, #52]	; (6194 <__libc_init_array+0x38>)
    6160:	4d0d      	ldr	r5, [pc, #52]	; (6198 <__libc_init_array+0x3c>)
    6162:	1b76      	subs	r6, r6, r5
    6164:	10b6      	asrs	r6, r6, #2
    6166:	d006      	beq.n	6176 <__libc_init_array+0x1a>
    6168:	2400      	movs	r4, #0
    616a:	f855 3b04 	ldr.w	r3, [r5], #4
    616e:	3401      	adds	r4, #1
    6170:	4798      	blx	r3
    6172:	42a6      	cmp	r6, r4
    6174:	d1f9      	bne.n	616a <__libc_init_array+0xe>
    6176:	4e09      	ldr	r6, [pc, #36]	; (619c <__libc_init_array+0x40>)
    6178:	4d09      	ldr	r5, [pc, #36]	; (61a0 <__libc_init_array+0x44>)
    617a:	1b76      	subs	r6, r6, r5
    617c:	f008 fc54 	bl	ea28 <___init_veneer>
    6180:	10b6      	asrs	r6, r6, #2
    6182:	d006      	beq.n	6192 <__libc_init_array+0x36>
    6184:	2400      	movs	r4, #0
    6186:	f855 3b04 	ldr.w	r3, [r5], #4
    618a:	3401      	adds	r4, #1
    618c:	4798      	blx	r3
    618e:	42a6      	cmp	r6, r4
    6190:	d1f9      	bne.n	6186 <__libc_init_array+0x2a>
    6192:	bd70      	pop	{r4, r5, r6, pc}
    6194:	60001e80 	.word	0x60001e80
    6198:	60001e80 	.word	0x60001e80
    619c:	60001e84 	.word	0x60001e84
    61a0:	60001e80 	.word	0x60001e80

000061a4 <__retarget_lock_init_recursive>:
    61a4:	4770      	bx	lr
    61a6:	bf00      	nop

000061a8 <__retarget_lock_close_recursive>:
    61a8:	4770      	bx	lr
    61aa:	bf00      	nop

000061ac <__retarget_lock_acquire_recursive>:
    61ac:	4770      	bx	lr
    61ae:	bf00      	nop

000061b0 <__retarget_lock_release_recursive>:
    61b0:	4770      	bx	lr
    61b2:	bf00      	nop
	...
    61c0:	eba2 0003 	sub.w	r0, r2, r3
    61c4:	4770      	bx	lr
    61c6:	bf00      	nop

000061c8 <strcmp>:
    61c8:	7802      	ldrb	r2, [r0, #0]
    61ca:	780b      	ldrb	r3, [r1, #0]
    61cc:	2a01      	cmp	r2, #1
    61ce:	bf28      	it	cs
    61d0:	429a      	cmpcs	r2, r3
    61d2:	d1f5      	bne.n	61c0 <__retarget_lock_release_recursive+0x10>
    61d4:	e96d 4504 	strd	r4, r5, [sp, #-16]!
    61d8:	ea40 0401 	orr.w	r4, r0, r1
    61dc:	e9cd 6702 	strd	r6, r7, [sp, #8]
    61e0:	f06f 0c00 	mvn.w	ip, #0
    61e4:	ea4f 7244 	mov.w	r2, r4, lsl #29
    61e8:	b312      	cbz	r2, 6230 <strcmp+0x68>
    61ea:	ea80 0401 	eor.w	r4, r0, r1
    61ee:	f014 0f07 	tst.w	r4, #7
    61f2:	d16a      	bne.n	62ca <strcmp+0x102>
    61f4:	f000 0407 	and.w	r4, r0, #7
    61f8:	f020 0007 	bic.w	r0, r0, #7
    61fc:	f004 0503 	and.w	r5, r4, #3
    6200:	f021 0107 	bic.w	r1, r1, #7
    6204:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    6208:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    620c:	f014 0f04 	tst.w	r4, #4
    6210:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    6214:	fa0c f405 	lsl.w	r4, ip, r5
    6218:	ea62 0204 	orn	r2, r2, r4
    621c:	ea66 0604 	orn	r6, r6, r4
    6220:	d00a      	beq.n	6238 <strcmp+0x70>
    6222:	ea63 0304 	orn	r3, r3, r4
    6226:	4662      	mov	r2, ip
    6228:	ea67 0704 	orn	r7, r7, r4
    622c:	4666      	mov	r6, ip
    622e:	e003      	b.n	6238 <strcmp+0x70>
    6230:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    6234:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    6238:	fa82 f54c 	uadd8	r5, r2, ip
    623c:	ea82 0406 	eor.w	r4, r2, r6
    6240:	faa4 f48c 	sel	r4, r4, ip
    6244:	bb6c      	cbnz	r4, 62a2 <strcmp+0xda>
    6246:	fa83 f54c 	uadd8	r5, r3, ip
    624a:	ea83 0507 	eor.w	r5, r3, r7
    624e:	faa5 f58c 	sel	r5, r5, ip
    6252:	b995      	cbnz	r5, 627a <strcmp+0xb2>
    6254:	e950 2302 	ldrd	r2, r3, [r0, #-8]
    6258:	e951 6702 	ldrd	r6, r7, [r1, #-8]
    625c:	fa82 f54c 	uadd8	r5, r2, ip
    6260:	ea82 0406 	eor.w	r4, r2, r6
    6264:	faa4 f48c 	sel	r4, r4, ip
    6268:	fa83 f54c 	uadd8	r5, r3, ip
    626c:	ea83 0507 	eor.w	r5, r3, r7
    6270:	faa5 f58c 	sel	r5, r5, ip
    6274:	4325      	orrs	r5, r4
    6276:	d0db      	beq.n	6230 <strcmp+0x68>
    6278:	b99c      	cbnz	r4, 62a2 <strcmp+0xda>
    627a:	ba2d      	rev	r5, r5
    627c:	fab5 f485 	clz	r4, r5
    6280:	f024 0407 	bic.w	r4, r4, #7
    6284:	fa27 f104 	lsr.w	r1, r7, r4
    6288:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    628c:	fa23 f304 	lsr.w	r3, r3, r4
    6290:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    6294:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    6298:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    629c:	eba0 0001 	sub.w	r0, r0, r1
    62a0:	4770      	bx	lr
    62a2:	ba24      	rev	r4, r4
    62a4:	fab4 f484 	clz	r4, r4
    62a8:	f024 0407 	bic.w	r4, r4, #7
    62ac:	fa26 f104 	lsr.w	r1, r6, r4
    62b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    62b4:	fa22 f204 	lsr.w	r2, r2, r4
    62b8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    62bc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    62c0:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    62c4:	eba0 0001 	sub.w	r0, r0, r1
    62c8:	4770      	bx	lr
    62ca:	f014 0f03 	tst.w	r4, #3
    62ce:	d13c      	bne.n	634a <strcmp+0x182>
    62d0:	f010 0403 	ands.w	r4, r0, #3
    62d4:	d128      	bne.n	6328 <strcmp+0x160>
    62d6:	f850 2b08 	ldr.w	r2, [r0], #8
    62da:	f851 3b08 	ldr.w	r3, [r1], #8
    62de:	fa82 f54c 	uadd8	r5, r2, ip
    62e2:	ea82 0503 	eor.w	r5, r2, r3
    62e6:	faa5 f58c 	sel	r5, r5, ip
    62ea:	b95d      	cbnz	r5, 6304 <strcmp+0x13c>
    62ec:	f850 2c04 	ldr.w	r2, [r0, #-4]
    62f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
    62f4:	fa82 f54c 	uadd8	r5, r2, ip
    62f8:	ea82 0503 	eor.w	r5, r2, r3
    62fc:	faa5 f58c 	sel	r5, r5, ip
    6300:	2d00      	cmp	r5, #0
    6302:	d0e8      	beq.n	62d6 <strcmp+0x10e>
    6304:	ba2d      	rev	r5, r5
    6306:	fab5 f485 	clz	r4, r5
    630a:	f024 0407 	bic.w	r4, r4, #7
    630e:	fa23 f104 	lsr.w	r1, r3, r4
    6312:	fa22 f204 	lsr.w	r2, r2, r4
    6316:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    631a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    631e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    6322:	eba0 0001 	sub.w	r0, r0, r1
    6326:	4770      	bx	lr
    6328:	ea4f 04c4 	mov.w	r4, r4, lsl #3
    632c:	f020 0003 	bic.w	r0, r0, #3
    6330:	f850 2b08 	ldr.w	r2, [r0], #8
    6334:	f021 0103 	bic.w	r1, r1, #3
    6338:	f851 3b08 	ldr.w	r3, [r1], #8
    633c:	fa0c f404 	lsl.w	r4, ip, r4
    6340:	ea62 0204 	orn	r2, r2, r4
    6344:	ea63 0304 	orn	r3, r3, r4
    6348:	e7c9      	b.n	62de <strcmp+0x116>
    634a:	f010 0403 	ands.w	r4, r0, #3
    634e:	d01a      	beq.n	6386 <strcmp+0x1be>
    6350:	eba1 0104 	sub.w	r1, r1, r4
    6354:	f020 0003 	bic.w	r0, r0, #3
    6358:	07e4      	lsls	r4, r4, #31
    635a:	f850 2b04 	ldr.w	r2, [r0], #4
    635e:	d006      	beq.n	636e <strcmp+0x1a6>
    6360:	d20f      	bcs.n	6382 <strcmp+0x1ba>
    6362:	788b      	ldrb	r3, [r1, #2]
    6364:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
    6368:	1ae4      	subs	r4, r4, r3
    636a:	d106      	bne.n	637a <strcmp+0x1b2>
    636c:	b12b      	cbz	r3, 637a <strcmp+0x1b2>
    636e:	78cb      	ldrb	r3, [r1, #3]
    6370:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
    6374:	1ae4      	subs	r4, r4, r3
    6376:	d100      	bne.n	637a <strcmp+0x1b2>
    6378:	b91b      	cbnz	r3, 6382 <strcmp+0x1ba>
    637a:	4620      	mov	r0, r4
    637c:	f85d 4b10 	ldr.w	r4, [sp], #16
    6380:	4770      	bx	lr
    6382:	f101 0104 	add.w	r1, r1, #4
    6386:	f850 2b04 	ldr.w	r2, [r0], #4
    638a:	07cc      	lsls	r4, r1, #31
    638c:	f021 0103 	bic.w	r1, r1, #3
    6390:	f851 3b04 	ldr.w	r3, [r1], #4
    6394:	d848      	bhi.n	6428 <strcmp+0x260>
    6396:	d224      	bcs.n	63e2 <strcmp+0x21a>
    6398:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
    639c:	fa82 f54c 	uadd8	r5, r2, ip
    63a0:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
    63a4:	faa5 f58c 	sel	r5, r5, ip
    63a8:	d10a      	bne.n	63c0 <strcmp+0x1f8>
    63aa:	b965      	cbnz	r5, 63c6 <strcmp+0x1fe>
    63ac:	f851 3b04 	ldr.w	r3, [r1], #4
    63b0:	ea84 0402 	eor.w	r4, r4, r2
    63b4:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
    63b8:	d10e      	bne.n	63d8 <strcmp+0x210>
    63ba:	f850 2b04 	ldr.w	r2, [r0], #4
    63be:	e7eb      	b.n	6398 <strcmp+0x1d0>
    63c0:	ea4f 2313 	mov.w	r3, r3, lsr #8
    63c4:	e055      	b.n	6472 <strcmp+0x2aa>
    63c6:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
    63ca:	d14d      	bne.n	6468 <strcmp+0x2a0>
    63cc:	7808      	ldrb	r0, [r1, #0]
    63ce:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    63d2:	f1c0 0000 	rsb	r0, r0, #0
    63d6:	4770      	bx	lr
    63d8:	ea4f 6212 	mov.w	r2, r2, lsr #24
    63dc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    63e0:	e047      	b.n	6472 <strcmp+0x2aa>
    63e2:	ea02 441c 	and.w	r4, r2, ip, lsr #16
    63e6:	fa82 f54c 	uadd8	r5, r2, ip
    63ea:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
    63ee:	faa5 f58c 	sel	r5, r5, ip
    63f2:	d10a      	bne.n	640a <strcmp+0x242>
    63f4:	b965      	cbnz	r5, 6410 <strcmp+0x248>
    63f6:	f851 3b04 	ldr.w	r3, [r1], #4
    63fa:	ea84 0402 	eor.w	r4, r4, r2
    63fe:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
    6402:	d10c      	bne.n	641e <strcmp+0x256>
    6404:	f850 2b04 	ldr.w	r2, [r0], #4
    6408:	e7eb      	b.n	63e2 <strcmp+0x21a>
    640a:	ea4f 4313 	mov.w	r3, r3, lsr #16
    640e:	e030      	b.n	6472 <strcmp+0x2aa>
    6410:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
    6414:	d128      	bne.n	6468 <strcmp+0x2a0>
    6416:	880b      	ldrh	r3, [r1, #0]
    6418:	ea4f 4212 	mov.w	r2, r2, lsr #16
    641c:	e029      	b.n	6472 <strcmp+0x2aa>
    641e:	ea4f 4212 	mov.w	r2, r2, lsr #16
    6422:	ea03 431c 	and.w	r3, r3, ip, lsr #16
    6426:	e024      	b.n	6472 <strcmp+0x2aa>
    6428:	f002 04ff 	and.w	r4, r2, #255	; 0xff
    642c:	fa82 f54c 	uadd8	r5, r2, ip
    6430:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
    6434:	faa5 f58c 	sel	r5, r5, ip
    6438:	d10a      	bne.n	6450 <strcmp+0x288>
    643a:	b965      	cbnz	r5, 6456 <strcmp+0x28e>
    643c:	f851 3b04 	ldr.w	r3, [r1], #4
    6440:	ea84 0402 	eor.w	r4, r4, r2
    6444:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
    6448:	d109      	bne.n	645e <strcmp+0x296>
    644a:	f850 2b04 	ldr.w	r2, [r0], #4
    644e:	e7eb      	b.n	6428 <strcmp+0x260>
    6450:	ea4f 6313 	mov.w	r3, r3, lsr #24
    6454:	e00d      	b.n	6472 <strcmp+0x2aa>
    6456:	f015 0fff 	tst.w	r5, #255	; 0xff
    645a:	d105      	bne.n	6468 <strcmp+0x2a0>
    645c:	680b      	ldr	r3, [r1, #0]
    645e:	ea4f 2212 	mov.w	r2, r2, lsr #8
    6462:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    6466:	e004      	b.n	6472 <strcmp+0x2aa>
    6468:	f04f 0000 	mov.w	r0, #0
    646c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    6470:	4770      	bx	lr
    6472:	ba12      	rev	r2, r2
    6474:	ba1b      	rev	r3, r3
    6476:	fa82 f44c 	uadd8	r4, r2, ip
    647a:	ea82 0403 	eor.w	r4, r2, r3
    647e:	faa4 f58c 	sel	r5, r4, ip
    6482:	fab5 f485 	clz	r4, r5
    6486:	fa02 f204 	lsl.w	r2, r2, r4
    648a:	fa03 f304 	lsl.w	r3, r3, r4
    648e:	ea4f 6012 	mov.w	r0, r2, lsr #24
    6492:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    6496:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
    649a:	4770      	bx	lr

0000649c <strcpy>:
    649c:	ea80 0201 	eor.w	r2, r0, r1
    64a0:	4684      	mov	ip, r0
    64a2:	f012 0f03 	tst.w	r2, #3
    64a6:	d14f      	bne.n	6548 <strcpy+0xac>
    64a8:	f011 0f03 	tst.w	r1, #3
    64ac:	d132      	bne.n	6514 <strcpy+0x78>
    64ae:	f84d 4d04 	str.w	r4, [sp, #-4]!
    64b2:	f011 0f04 	tst.w	r1, #4
    64b6:	f851 3b04 	ldr.w	r3, [r1], #4
    64ba:	d00b      	beq.n	64d4 <strcpy+0x38>
    64bc:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    64c0:	439a      	bics	r2, r3
    64c2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    64c6:	bf04      	itt	eq
    64c8:	f84c 3b04 	streq.w	r3, [ip], #4
    64cc:	f851 3b04 	ldreq.w	r3, [r1], #4
    64d0:	d116      	bne.n	6500 <strcpy+0x64>
    64d2:	bf00      	nop
    64d4:	f851 4b04 	ldr.w	r4, [r1], #4
    64d8:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    64dc:	439a      	bics	r2, r3
    64de:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    64e2:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    64e6:	d10b      	bne.n	6500 <strcpy+0x64>
    64e8:	f84c 3b04 	str.w	r3, [ip], #4
    64ec:	43a2      	bics	r2, r4
    64ee:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    64f2:	bf04      	itt	eq
    64f4:	f851 3b04 	ldreq.w	r3, [r1], #4
    64f8:	f84c 4b04 	streq.w	r4, [ip], #4
    64fc:	d0ea      	beq.n	64d4 <strcpy+0x38>
    64fe:	4623      	mov	r3, r4
    6500:	f80c 3b01 	strb.w	r3, [ip], #1
    6504:	f013 0fff 	tst.w	r3, #255	; 0xff
    6508:	ea4f 2333 	mov.w	r3, r3, ror #8
    650c:	d1f8      	bne.n	6500 <strcpy+0x64>
    650e:	f85d 4b04 	ldr.w	r4, [sp], #4
    6512:	4770      	bx	lr
    6514:	f011 0f01 	tst.w	r1, #1
    6518:	d006      	beq.n	6528 <strcpy+0x8c>
    651a:	f811 2b01 	ldrb.w	r2, [r1], #1
    651e:	f80c 2b01 	strb.w	r2, [ip], #1
    6522:	2a00      	cmp	r2, #0
    6524:	bf08      	it	eq
    6526:	4770      	bxeq	lr
    6528:	f011 0f02 	tst.w	r1, #2
    652c:	d0bf      	beq.n	64ae <strcpy+0x12>
    652e:	f831 2b02 	ldrh.w	r2, [r1], #2
    6532:	f012 0fff 	tst.w	r2, #255	; 0xff
    6536:	bf16      	itet	ne
    6538:	f82c 2b02 	strhne.w	r2, [ip], #2
    653c:	f88c 2000 	strbeq.w	r2, [ip]
    6540:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
    6544:	d1b3      	bne.n	64ae <strcpy+0x12>
    6546:	4770      	bx	lr
    6548:	f811 2b01 	ldrb.w	r2, [r1], #1
    654c:	f80c 2b01 	strb.w	r2, [ip], #1
    6550:	2a00      	cmp	r2, #0
    6552:	d1f9      	bne.n	6548 <strcpy+0xac>
    6554:	4770      	bx	lr
    6556:	bf00      	nop
	...

00006580 <strlen>:
    6580:	f890 f000 	pld	[r0]
    6584:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    6588:	f020 0107 	bic.w	r1, r0, #7
    658c:	f06f 0c00 	mvn.w	ip, #0
    6590:	f010 0407 	ands.w	r4, r0, #7
    6594:	f891 f020 	pld	[r1, #32]
    6598:	f040 8049 	bne.w	662e <strlen+0xae>
    659c:	f04f 0400 	mov.w	r4, #0
    65a0:	f06f 0007 	mvn.w	r0, #7
    65a4:	e9d1 2300 	ldrd	r2, r3, [r1]
    65a8:	f891 f040 	pld	[r1, #64]	; 0x40
    65ac:	f100 0008 	add.w	r0, r0, #8
    65b0:	fa82 f24c 	uadd8	r2, r2, ip
    65b4:	faa4 f28c 	sel	r2, r4, ip
    65b8:	fa83 f34c 	uadd8	r3, r3, ip
    65bc:	faa2 f38c 	sel	r3, r2, ip
    65c0:	bb4b      	cbnz	r3, 6616 <strlen+0x96>
    65c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    65c6:	fa82 f24c 	uadd8	r2, r2, ip
    65ca:	f100 0008 	add.w	r0, r0, #8
    65ce:	faa4 f28c 	sel	r2, r4, ip
    65d2:	fa83 f34c 	uadd8	r3, r3, ip
    65d6:	faa2 f38c 	sel	r3, r2, ip
    65da:	b9e3      	cbnz	r3, 6616 <strlen+0x96>
    65dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    65e0:	fa82 f24c 	uadd8	r2, r2, ip
    65e4:	f100 0008 	add.w	r0, r0, #8
    65e8:	faa4 f28c 	sel	r2, r4, ip
    65ec:	fa83 f34c 	uadd8	r3, r3, ip
    65f0:	faa2 f38c 	sel	r3, r2, ip
    65f4:	b97b      	cbnz	r3, 6616 <strlen+0x96>
    65f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    65fa:	f101 0120 	add.w	r1, r1, #32
    65fe:	fa82 f24c 	uadd8	r2, r2, ip
    6602:	f100 0008 	add.w	r0, r0, #8
    6606:	faa4 f28c 	sel	r2, r4, ip
    660a:	fa83 f34c 	uadd8	r3, r3, ip
    660e:	faa2 f38c 	sel	r3, r2, ip
    6612:	2b00      	cmp	r3, #0
    6614:	d0c6      	beq.n	65a4 <strlen+0x24>
    6616:	2a00      	cmp	r2, #0
    6618:	bf04      	itt	eq
    661a:	3004      	addeq	r0, #4
    661c:	461a      	moveq	r2, r3
    661e:	ba12      	rev	r2, r2
    6620:	fab2 f282 	clz	r2, r2
    6624:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    6628:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    662c:	4770      	bx	lr
    662e:	e9d1 2300 	ldrd	r2, r3, [r1]
    6632:	f004 0503 	and.w	r5, r4, #3
    6636:	f1c4 0000 	rsb	r0, r4, #0
    663a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    663e:	f014 0f04 	tst.w	r4, #4
    6642:	f891 f040 	pld	[r1, #64]	; 0x40
    6646:	fa0c f505 	lsl.w	r5, ip, r5
    664a:	ea62 0205 	orn	r2, r2, r5
    664e:	bf1c      	itt	ne
    6650:	ea63 0305 	ornne	r3, r3, r5
    6654:	4662      	movne	r2, ip
    6656:	f04f 0400 	mov.w	r4, #0
    665a:	e7a9      	b.n	65b0 <strlen+0x30>
    665c:	0000      	movs	r0, r0
	...

00006660 <nan>:
    6660:	ed9f 0b01 	vldr	d0, [pc, #4]	; 6668 <nan+0x8>
    6664:	4770      	bx	lr
    6666:	bf00      	nop
    6668:	00000000 	.word	0x00000000
    666c:	7ff80000 	.word	0x7ff80000

00006670 <nanf>:
    6670:	ed9f 0a01 	vldr	s0, [pc, #4]	; 6678 <nanf+0x8>
    6674:	4770      	bx	lr
    6676:	bf00      	nop
    6678:	7fc00000 	.word	0x7fc00000

0000667c <__register_exitproc>:
    667c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6680:	f8df a07c 	ldr.w	sl, [pc, #124]	; 6700 <__register_exitproc+0x84>
    6684:	4606      	mov	r6, r0
    6686:	f8da 0000 	ldr.w	r0, [sl]
    668a:	4698      	mov	r8, r3
    668c:	460f      	mov	r7, r1
    668e:	4691      	mov	r9, r2
    6690:	f7ff fd8c 	bl	61ac <__retarget_lock_acquire_recursive>
    6694:	4b18      	ldr	r3, [pc, #96]	; (66f8 <__register_exitproc+0x7c>)
    6696:	681c      	ldr	r4, [r3, #0]
    6698:	b324      	cbz	r4, 66e4 <__register_exitproc+0x68>
    669a:	6865      	ldr	r5, [r4, #4]
    669c:	2d1f      	cmp	r5, #31
    669e:	dc24      	bgt.n	66ea <__register_exitproc+0x6e>
    66a0:	b95e      	cbnz	r6, 66ba <__register_exitproc+0x3e>
    66a2:	1c6b      	adds	r3, r5, #1
    66a4:	3502      	adds	r5, #2
    66a6:	f8da 0000 	ldr.w	r0, [sl]
    66aa:	6063      	str	r3, [r4, #4]
    66ac:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
    66b0:	f7ff fd7e 	bl	61b0 <__retarget_lock_release_recursive>
    66b4:	2000      	movs	r0, #0
    66b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    66ba:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    66be:	2301      	movs	r3, #1
    66c0:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    66c4:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
    66c8:	40ab      	lsls	r3, r5
    66ca:	431a      	orrs	r2, r3
    66cc:	2e02      	cmp	r6, #2
    66ce:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
    66d2:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    66d6:	d1e4      	bne.n	66a2 <__register_exitproc+0x26>
    66d8:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    66dc:	431a      	orrs	r2, r3
    66de:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    66e2:	e7de      	b.n	66a2 <__register_exitproc+0x26>
    66e4:	4c05      	ldr	r4, [pc, #20]	; (66fc <__register_exitproc+0x80>)
    66e6:	601c      	str	r4, [r3, #0]
    66e8:	e7d7      	b.n	669a <__register_exitproc+0x1e>
    66ea:	f8da 0000 	ldr.w	r0, [sl]
    66ee:	f7ff fd5f 	bl	61b0 <__retarget_lock_release_recursive>
    66f2:	f04f 30ff 	mov.w	r0, #4294967295
    66f6:	e7de      	b.n	66b6 <__register_exitproc+0x3a>
    66f8:	20008abc 	.word	0x20008abc
    66fc:	20008ac0 	.word	0x20008ac0
    6700:	20007c64 	.word	0x20007c64

00006704 <_malloc_trim_r>:
    6704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6706:	4f24      	ldr	r7, [pc, #144]	; (6798 <_malloc_trim_r+0x94>)
    6708:	460c      	mov	r4, r1
    670a:	4606      	mov	r6, r0
    670c:	f7fd ff12 	bl	4534 <__malloc_lock>
    6710:	68bb      	ldr	r3, [r7, #8]
    6712:	685d      	ldr	r5, [r3, #4]
    6714:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
    6718:	310f      	adds	r1, #15
    671a:	f025 0503 	bic.w	r5, r5, #3
    671e:	194b      	adds	r3, r1, r5
    6720:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    6724:	f023 030f 	bic.w	r3, r3, #15
    6728:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
    672c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    6730:	db07      	blt.n	6742 <_malloc_trim_r+0x3e>
    6732:	2100      	movs	r1, #0
    6734:	4630      	mov	r0, r6
    6736:	f7ff fce3 	bl	6100 <_sbrk_r>
    673a:	68bb      	ldr	r3, [r7, #8]
    673c:	442b      	add	r3, r5
    673e:	4298      	cmp	r0, r3
    6740:	d004      	beq.n	674c <_malloc_trim_r+0x48>
    6742:	4630      	mov	r0, r6
    6744:	f7fd fefc 	bl	4540 <__malloc_unlock>
    6748:	2000      	movs	r0, #0
    674a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    674c:	4261      	negs	r1, r4
    674e:	4630      	mov	r0, r6
    6750:	f7ff fcd6 	bl	6100 <_sbrk_r>
    6754:	3001      	adds	r0, #1
    6756:	d00d      	beq.n	6774 <_malloc_trim_r+0x70>
    6758:	4a10      	ldr	r2, [pc, #64]	; (679c <_malloc_trim_r+0x98>)
    675a:	68bb      	ldr	r3, [r7, #8]
    675c:	1b2d      	subs	r5, r5, r4
    675e:	f045 0501 	orr.w	r5, r5, #1
    6762:	605d      	str	r5, [r3, #4]
    6764:	6813      	ldr	r3, [r2, #0]
    6766:	4630      	mov	r0, r6
    6768:	1b1b      	subs	r3, r3, r4
    676a:	6013      	str	r3, [r2, #0]
    676c:	f7fd fee8 	bl	4540 <__malloc_unlock>
    6770:	2001      	movs	r0, #1
    6772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6774:	2100      	movs	r1, #0
    6776:	4630      	mov	r0, r6
    6778:	f7ff fcc2 	bl	6100 <_sbrk_r>
    677c:	68ba      	ldr	r2, [r7, #8]
    677e:	1a83      	subs	r3, r0, r2
    6780:	2b0f      	cmp	r3, #15
    6782:	ddde      	ble.n	6742 <_malloc_trim_r+0x3e>
    6784:	f043 0301 	orr.w	r3, r3, #1
    6788:	6053      	str	r3, [r2, #4]
    678a:	4b05      	ldr	r3, [pc, #20]	; (67a0 <_malloc_trim_r+0x9c>)
    678c:	4903      	ldr	r1, [pc, #12]	; (679c <_malloc_trim_r+0x98>)
    678e:	681b      	ldr	r3, [r3, #0]
    6790:	1ac0      	subs	r0, r0, r3
    6792:	6008      	str	r0, [r1, #0]
    6794:	e7d5      	b.n	6742 <_malloc_trim_r+0x3e>
    6796:	bf00      	nop
    6798:	20007ddc 	.word	0x20007ddc
    679c:	20008c5c 	.word	0x20008c5c
    67a0:	200081e4 	.word	0x200081e4

000067a4 <_free_r>:
    67a4:	2900      	cmp	r1, #0
    67a6:	d061      	beq.n	686c <_free_r+0xc8>
    67a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    67aa:	460c      	mov	r4, r1
    67ac:	4606      	mov	r6, r0
    67ae:	f7fd fec1 	bl	4534 <__malloc_lock>
    67b2:	f854 2c04 	ldr.w	r2, [r4, #-4]
    67b6:	4f7b      	ldr	r7, [pc, #492]	; (69a4 <_free_r+0x200>)
    67b8:	f1a4 0508 	sub.w	r5, r4, #8
    67bc:	f022 0101 	bic.w	r1, r2, #1
    67c0:	eb05 0c01 	add.w	ip, r5, r1
    67c4:	68b8      	ldr	r0, [r7, #8]
    67c6:	f8dc 3004 	ldr.w	r3, [ip, #4]
    67ca:	4560      	cmp	r0, ip
    67cc:	f023 0303 	bic.w	r3, r3, #3
    67d0:	f000 808b 	beq.w	68ea <_free_r+0x146>
    67d4:	07d2      	lsls	r2, r2, #31
    67d6:	f8cc 3004 	str.w	r3, [ip, #4]
    67da:	d432      	bmi.n	6842 <_free_r+0x9e>
    67dc:	f854 2c08 	ldr.w	r2, [r4, #-8]
    67e0:	1aad      	subs	r5, r5, r2
    67e2:	4411      	add	r1, r2
    67e4:	68aa      	ldr	r2, [r5, #8]
    67e6:	f107 0008 	add.w	r0, r7, #8
    67ea:	4282      	cmp	r2, r0
    67ec:	d06a      	beq.n	68c4 <_free_r+0x120>
    67ee:	eb0c 0403 	add.w	r4, ip, r3
    67f2:	f8d4 e004 	ldr.w	lr, [r4, #4]
    67f6:	68ec      	ldr	r4, [r5, #12]
    67f8:	60d4      	str	r4, [r2, #12]
    67fa:	f01e 0f01 	tst.w	lr, #1
    67fe:	60a2      	str	r2, [r4, #8]
    6800:	f000 8097 	beq.w	6932 <_free_r+0x18e>
    6804:	f041 0301 	orr.w	r3, r1, #1
    6808:	606b      	str	r3, [r5, #4]
    680a:	f8cc 1000 	str.w	r1, [ip]
    680e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    6812:	d235      	bcs.n	6880 <_free_r+0xdc>
    6814:	6878      	ldr	r0, [r7, #4]
    6816:	08cb      	lsrs	r3, r1, #3
    6818:	2201      	movs	r2, #1
    681a:	0949      	lsrs	r1, r1, #5
    681c:	3301      	adds	r3, #1
    681e:	408a      	lsls	r2, r1
    6820:	4302      	orrs	r2, r0
    6822:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    6826:	607a      	str	r2, [r7, #4]
    6828:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    682c:	3a08      	subs	r2, #8
    682e:	e9c5 1202 	strd	r1, r2, [r5, #8]
    6832:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    6836:	60cd      	str	r5, [r1, #12]
    6838:	4630      	mov	r0, r6
    683a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    683e:	f7fd be7f 	b.w	4540 <__malloc_unlock>
    6842:	eb0c 0203 	add.w	r2, ip, r3
    6846:	6852      	ldr	r2, [r2, #4]
    6848:	07d0      	lsls	r0, r2, #31
    684a:	d410      	bmi.n	686e <_free_r+0xca>
    684c:	4419      	add	r1, r3
    684e:	f107 0008 	add.w	r0, r7, #8
    6852:	f8dc 3008 	ldr.w	r3, [ip, #8]
    6856:	4283      	cmp	r3, r0
    6858:	d073      	beq.n	6942 <_free_r+0x19e>
    685a:	f8dc 200c 	ldr.w	r2, [ip, #12]
    685e:	60da      	str	r2, [r3, #12]
    6860:	6093      	str	r3, [r2, #8]
    6862:	f041 0301 	orr.w	r3, r1, #1
    6866:	606b      	str	r3, [r5, #4]
    6868:	5069      	str	r1, [r5, r1]
    686a:	e7d0      	b.n	680e <_free_r+0x6a>
    686c:	4770      	bx	lr
    686e:	f041 0301 	orr.w	r3, r1, #1
    6872:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    6876:	f844 3c04 	str.w	r3, [r4, #-4]
    687a:	f8cc 1000 	str.w	r1, [ip]
    687e:	d3c9      	bcc.n	6814 <_free_r+0x70>
    6880:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
    6884:	ea4f 2351 	mov.w	r3, r1, lsr #9
    6888:	d248      	bcs.n	691c <_free_r+0x178>
    688a:	098b      	lsrs	r3, r1, #6
    688c:	f103 0039 	add.w	r0, r3, #57	; 0x39
    6890:	f103 0238 	add.w	r2, r3, #56	; 0x38
    6894:	00c3      	lsls	r3, r0, #3
    6896:	18f8      	adds	r0, r7, r3
    6898:	58fb      	ldr	r3, [r7, r3]
    689a:	3808      	subs	r0, #8
    689c:	4298      	cmp	r0, r3
    689e:	d059      	beq.n	6954 <_free_r+0x1b0>
    68a0:	685a      	ldr	r2, [r3, #4]
    68a2:	f022 0203 	bic.w	r2, r2, #3
    68a6:	428a      	cmp	r2, r1
    68a8:	d902      	bls.n	68b0 <_free_r+0x10c>
    68aa:	689b      	ldr	r3, [r3, #8]
    68ac:	4298      	cmp	r0, r3
    68ae:	d1f7      	bne.n	68a0 <_free_r+0xfc>
    68b0:	68d8      	ldr	r0, [r3, #12]
    68b2:	e9c5 3002 	strd	r3, r0, [r5, #8]
    68b6:	6085      	str	r5, [r0, #8]
    68b8:	60dd      	str	r5, [r3, #12]
    68ba:	4630      	mov	r0, r6
    68bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    68c0:	f7fd be3e 	b.w	4540 <__malloc_unlock>
    68c4:	eb0c 0203 	add.w	r2, ip, r3
    68c8:	6852      	ldr	r2, [r2, #4]
    68ca:	07d2      	lsls	r2, r2, #31
    68cc:	d463      	bmi.n	6996 <_free_r+0x1f2>
    68ce:	440b      	add	r3, r1
    68d0:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
    68d4:	60ca      	str	r2, [r1, #12]
    68d6:	6091      	str	r1, [r2, #8]
    68d8:	f043 0201 	orr.w	r2, r3, #1
    68dc:	606a      	str	r2, [r5, #4]
    68de:	4630      	mov	r0, r6
    68e0:	50eb      	str	r3, [r5, r3]
    68e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    68e6:	f7fd be2b 	b.w	4540 <__malloc_unlock>
    68ea:	440b      	add	r3, r1
    68ec:	07d1      	lsls	r1, r2, #31
    68ee:	d407      	bmi.n	6900 <_free_r+0x15c>
    68f0:	f854 2c08 	ldr.w	r2, [r4, #-8]
    68f4:	1aad      	subs	r5, r5, r2
    68f6:	4413      	add	r3, r2
    68f8:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
    68fc:	60ca      	str	r2, [r1, #12]
    68fe:	6091      	str	r1, [r2, #8]
    6900:	f043 0201 	orr.w	r2, r3, #1
    6904:	606a      	str	r2, [r5, #4]
    6906:	4a28      	ldr	r2, [pc, #160]	; (69a8 <_free_r+0x204>)
    6908:	60bd      	str	r5, [r7, #8]
    690a:	6812      	ldr	r2, [r2, #0]
    690c:	429a      	cmp	r2, r3
    690e:	d893      	bhi.n	6838 <_free_r+0x94>
    6910:	4b26      	ldr	r3, [pc, #152]	; (69ac <_free_r+0x208>)
    6912:	4630      	mov	r0, r6
    6914:	6819      	ldr	r1, [r3, #0]
    6916:	f7ff fef5 	bl	6704 <_malloc_trim_r>
    691a:	e78d      	b.n	6838 <_free_r+0x94>
    691c:	2b14      	cmp	r3, #20
    691e:	d90a      	bls.n	6936 <_free_r+0x192>
    6920:	2b54      	cmp	r3, #84	; 0x54
    6922:	d81f      	bhi.n	6964 <_free_r+0x1c0>
    6924:	0b0b      	lsrs	r3, r1, #12
    6926:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    692a:	f103 026e 	add.w	r2, r3, #110	; 0x6e
    692e:	00c3      	lsls	r3, r0, #3
    6930:	e7b1      	b.n	6896 <_free_r+0xf2>
    6932:	4419      	add	r1, r3
    6934:	e78d      	b.n	6852 <_free_r+0xae>
    6936:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    693a:	f103 025b 	add.w	r2, r3, #91	; 0x5b
    693e:	00c3      	lsls	r3, r0, #3
    6940:	e7a9      	b.n	6896 <_free_r+0xf2>
    6942:	f041 0301 	orr.w	r3, r1, #1
    6946:	e9c7 5504 	strd	r5, r5, [r7, #16]
    694a:	e9c5 0002 	strd	r0, r0, [r5, #8]
    694e:	606b      	str	r3, [r5, #4]
    6950:	5069      	str	r1, [r5, r1]
    6952:	e771      	b.n	6838 <_free_r+0x94>
    6954:	6879      	ldr	r1, [r7, #4]
    6956:	1092      	asrs	r2, r2, #2
    6958:	2401      	movs	r4, #1
    695a:	fa04 f202 	lsl.w	r2, r4, r2
    695e:	430a      	orrs	r2, r1
    6960:	607a      	str	r2, [r7, #4]
    6962:	e7a6      	b.n	68b2 <_free_r+0x10e>
    6964:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    6968:	d806      	bhi.n	6978 <_free_r+0x1d4>
    696a:	0bcb      	lsrs	r3, r1, #15
    696c:	f103 0078 	add.w	r0, r3, #120	; 0x78
    6970:	f103 0277 	add.w	r2, r3, #119	; 0x77
    6974:	00c3      	lsls	r3, r0, #3
    6976:	e78e      	b.n	6896 <_free_r+0xf2>
    6978:	f240 5254 	movw	r2, #1364	; 0x554
    697c:	4293      	cmp	r3, r2
    697e:	d806      	bhi.n	698e <_free_r+0x1ea>
    6980:	0c8b      	lsrs	r3, r1, #18
    6982:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    6986:	f103 027c 	add.w	r2, r3, #124	; 0x7c
    698a:	00c3      	lsls	r3, r0, #3
    698c:	e783      	b.n	6896 <_free_r+0xf2>
    698e:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    6992:	227e      	movs	r2, #126	; 0x7e
    6994:	e77f      	b.n	6896 <_free_r+0xf2>
    6996:	f041 0301 	orr.w	r3, r1, #1
    699a:	606b      	str	r3, [r5, #4]
    699c:	f8cc 1000 	str.w	r1, [ip]
    69a0:	e74a      	b.n	6838 <_free_r+0x94>
    69a2:	bf00      	nop
    69a4:	20007ddc 	.word	0x20007ddc
    69a8:	200081e8 	.word	0x200081e8
    69ac:	20008c8c 	.word	0x20008c8c

000069b0 <rshift>:
    69b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    69b4:	6904      	ldr	r4, [r0, #16]
    69b6:	ebb4 1f61 	cmp.w	r4, r1, asr #5
    69ba:	dd2f      	ble.n	6a1c <rshift+0x6c>
    69bc:	f100 0e14 	add.w	lr, r0, #20
    69c0:	114e      	asrs	r6, r1, #5
    69c2:	f011 0c1f 	ands.w	ip, r1, #31
    69c6:	eb0e 0584 	add.w	r5, lr, r4, lsl #2
    69ca:	eb0e 0386 	add.w	r3, lr, r6, lsl #2
    69ce:	d02b      	beq.n	6a28 <rshift+0x78>
    69d0:	f85e 1026 	ldr.w	r1, [lr, r6, lsl #2]
    69d4:	3304      	adds	r3, #4
    69d6:	429d      	cmp	r5, r3
    69d8:	fa21 f10c 	lsr.w	r1, r1, ip
    69dc:	f1cc 0820 	rsb	r8, ip, #32
    69e0:	d918      	bls.n	6a14 <rshift+0x64>
    69e2:	4677      	mov	r7, lr
    69e4:	681a      	ldr	r2, [r3, #0]
    69e6:	fa02 f208 	lsl.w	r2, r2, r8
    69ea:	430a      	orrs	r2, r1
    69ec:	f847 2b04 	str.w	r2, [r7], #4
    69f0:	f853 1b04 	ldr.w	r1, [r3], #4
    69f4:	429d      	cmp	r5, r3
    69f6:	fa21 f10c 	lsr.w	r1, r1, ip
    69fa:	d8f3      	bhi.n	69e4 <rshift+0x34>
    69fc:	1ba3      	subs	r3, r4, r6
    69fe:	009b      	lsls	r3, r3, #2
    6a00:	3b05      	subs	r3, #5
    6a02:	089b      	lsrs	r3, r3, #2
    6a04:	3301      	adds	r3, #1
    6a06:	eb0e 0483 	add.w	r4, lr, r3, lsl #2
    6a0a:	f84e 1023 	str.w	r1, [lr, r3, lsl #2]
    6a0e:	b1c9      	cbz	r1, 6a44 <rshift+0x94>
    6a10:	3404      	adds	r4, #4
    6a12:	e017      	b.n	6a44 <rshift+0x94>
    6a14:	6141      	str	r1, [r0, #20]
    6a16:	4674      	mov	r4, lr
    6a18:	2900      	cmp	r1, #0
    6a1a:	d1f9      	bne.n	6a10 <rshift+0x60>
    6a1c:	2300      	movs	r3, #0
    6a1e:	6103      	str	r3, [r0, #16]
    6a20:	2300      	movs	r3, #0
    6a22:	6143      	str	r3, [r0, #20]
    6a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6a28:	429d      	cmp	r5, r3
    6a2a:	bf88      	it	hi
    6a2c:	f100 0210 	addhi.w	r2, r0, #16
    6a30:	d9f4      	bls.n	6a1c <rshift+0x6c>
    6a32:	f853 1b04 	ldr.w	r1, [r3], #4
    6a36:	f842 1f04 	str.w	r1, [r2, #4]!
    6a3a:	429d      	cmp	r5, r3
    6a3c:	d8f9      	bhi.n	6a32 <rshift+0x82>
    6a3e:	1ba4      	subs	r4, r4, r6
    6a40:	eb0e 0484 	add.w	r4, lr, r4, lsl #2
    6a44:	eba4 030e 	sub.w	r3, r4, lr
    6a48:	109b      	asrs	r3, r3, #2
    6a4a:	4574      	cmp	r4, lr
    6a4c:	6103      	str	r3, [r0, #16]
    6a4e:	d0e7      	beq.n	6a20 <rshift+0x70>
    6a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006a54 <__gethex>:
    6a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6a58:	ed2d 8b02 	vpush	{d8}
    6a5c:	680c      	ldr	r4, [r1, #0]
    6a5e:	468b      	mov	fp, r1
    6a60:	78a1      	ldrb	r1, [r4, #2]
    6a62:	b085      	sub	sp, #20
    6a64:	2930      	cmp	r1, #48	; 0x30
    6a66:	ee08 0a10 	vmov	s16, r0
    6a6a:	4692      	mov	sl, r2
    6a6c:	9302      	str	r3, [sp, #8]
    6a6e:	f040 81ce 	bne.w	6e0e <__gethex+0x3ba>
    6a72:	f06f 0001 	mvn.w	r0, #1
    6a76:	1b00      	subs	r0, r0, r4
    6a78:	1ce2      	adds	r2, r4, #3
    6a7a:	1883      	adds	r3, r0, r2
    6a7c:	4614      	mov	r4, r2
    6a7e:	f812 1b01 	ldrb.w	r1, [r2], #1
    6a82:	2930      	cmp	r1, #48	; 0x30
    6a84:	d0f9      	beq.n	6a7a <__gethex+0x26>
    6a86:	f8df 8300 	ldr.w	r8, [pc, #768]	; 6d88 <__gethex+0x334>
    6a8a:	f818 2001 	ldrb.w	r2, [r8, r1]
    6a8e:	2a00      	cmp	r2, #0
    6a90:	f000 80e5 	beq.w	6c5e <__gethex+0x20a>
    6a94:	7822      	ldrb	r2, [r4, #0]
    6a96:	2700      	movs	r7, #0
    6a98:	f818 2002 	ldrb.w	r2, [r8, r2]
    6a9c:	463d      	mov	r5, r7
    6a9e:	4626      	mov	r6, r4
    6aa0:	b12a      	cbz	r2, 6aae <__gethex+0x5a>
    6aa2:	f816 2f01 	ldrb.w	r2, [r6, #1]!
    6aa6:	f818 2002 	ldrb.w	r2, [r8, r2]
    6aaa:	2a00      	cmp	r2, #0
    6aac:	d1f9      	bne.n	6aa2 <__gethex+0x4e>
    6aae:	49b5      	ldr	r1, [pc, #724]	; (6d84 <__gethex+0x330>)
    6ab0:	9301      	str	r3, [sp, #4]
    6ab2:	2201      	movs	r2, #1
    6ab4:	4630      	mov	r0, r6
    6ab6:	f7ff fa67 	bl	5f88 <strncmp>
    6aba:	9b01      	ldr	r3, [sp, #4]
    6abc:	4681      	mov	r9, r0
    6abe:	2800      	cmp	r0, #0
    6ac0:	d04d      	beq.n	6b5e <__gethex+0x10a>
    6ac2:	2d00      	cmp	r5, #0
    6ac4:	d14e      	bne.n	6b64 <__gethex+0x110>
    6ac6:	7832      	ldrb	r2, [r6, #0]
    6ac8:	46a9      	mov	r9, r5
    6aca:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    6ace:	2a50      	cmp	r2, #80	; 0x50
    6ad0:	4635      	mov	r5, r6
    6ad2:	d050      	beq.n	6b76 <__gethex+0x122>
    6ad4:	f8cb 6000 	str.w	r6, [fp]
    6ad8:	2f00      	cmp	r7, #0
    6ada:	d169      	bne.n	6bb0 <__gethex+0x15c>
    6adc:	1b2b      	subs	r3, r5, r4
    6ade:	3b01      	subs	r3, #1
    6ae0:	2b07      	cmp	r3, #7
    6ae2:	4639      	mov	r1, r7
    6ae4:	dd04      	ble.n	6af0 <__gethex+0x9c>
    6ae6:	105b      	asrs	r3, r3, #1
    6ae8:	2b07      	cmp	r3, #7
    6aea:	f101 0101 	add.w	r1, r1, #1
    6aee:	dcfa      	bgt.n	6ae6 <__gethex+0x92>
    6af0:	ee18 0a10 	vmov	r0, s16
    6af4:	f000 fb82 	bl	71fc <_Balloc>
    6af8:	4683      	mov	fp, r0
    6afa:	2800      	cmp	r0, #0
    6afc:	f000 8266 	beq.w	6fcc <__gethex+0x578>
    6b00:	f100 0614 	add.w	r6, r0, #20
    6b04:	42ac      	cmp	r4, r5
    6b06:	9601      	str	r6, [sp, #4]
    6b08:	f080 81d2 	bcs.w	6eb0 <__gethex+0x45c>
    6b0c:	2700      	movs	r7, #0
    6b0e:	f8cd 900c 	str.w	r9, [sp, #12]
    6b12:	499c      	ldr	r1, [pc, #624]	; (6d84 <__gethex+0x330>)
    6b14:	46a1      	mov	r9, r4
    6b16:	463c      	mov	r4, r7
    6b18:	e00c      	b.n	6b34 <__gethex+0xe0>
    6b1a:	2f20      	cmp	r7, #32
    6b1c:	d019      	beq.n	6b52 <__gethex+0xfe>
    6b1e:	4638      	mov	r0, r7
    6b20:	3704      	adds	r7, #4
    6b22:	782a      	ldrb	r2, [r5, #0]
    6b24:	f818 2002 	ldrb.w	r2, [r8, r2]
    6b28:	f002 020f 	and.w	r2, r2, #15
    6b2c:	4082      	lsls	r2, r0
    6b2e:	4314      	orrs	r4, r2
    6b30:	454d      	cmp	r5, r9
    6b32:	d047      	beq.n	6bc4 <__gethex+0x170>
    6b34:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
    6b38:	2a2e      	cmp	r2, #46	; 0x2e
    6b3a:	d1ee      	bne.n	6b1a <__gethex+0xc6>
    6b3c:	454d      	cmp	r5, r9
    6b3e:	d3ec      	bcc.n	6b1a <__gethex+0xc6>
    6b40:	2201      	movs	r2, #1
    6b42:	4628      	mov	r0, r5
    6b44:	f7ff fa20 	bl	5f88 <strncmp>
    6b48:	498e      	ldr	r1, [pc, #568]	; (6d84 <__gethex+0x330>)
    6b4a:	2800      	cmp	r0, #0
    6b4c:	d0f0      	beq.n	6b30 <__gethex+0xdc>
    6b4e:	2f20      	cmp	r7, #32
    6b50:	d1e5      	bne.n	6b1e <__gethex+0xca>
    6b52:	2000      	movs	r0, #0
    6b54:	f846 4b04 	str.w	r4, [r6], #4
    6b58:	2704      	movs	r7, #4
    6b5a:	4604      	mov	r4, r0
    6b5c:	e7e1      	b.n	6b22 <__gethex+0xce>
    6b5e:	2d00      	cmp	r5, #0
    6b60:	f000 8142 	beq.w	6de8 <__gethex+0x394>
    6b64:	7832      	ldrb	r2, [r6, #0]
    6b66:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    6b6a:	1bad      	subs	r5, r5, r6
    6b6c:	2a50      	cmp	r2, #80	; 0x50
    6b6e:	ea4f 0985 	mov.w	r9, r5, lsl #2
    6b72:	4635      	mov	r5, r6
    6b74:	d1ae      	bne.n	6ad4 <__gethex+0x80>
    6b76:	786a      	ldrb	r2, [r5, #1]
    6b78:	2a2b      	cmp	r2, #43	; 0x2b
    6b7a:	f000 8125 	beq.w	6dc8 <__gethex+0x374>
    6b7e:	2a2d      	cmp	r2, #45	; 0x2d
    6b80:	f000 80a5 	beq.w	6cce <__gethex+0x27a>
    6b84:	1c6e      	adds	r6, r5, #1
    6b86:	2000      	movs	r0, #0
    6b88:	f818 1002 	ldrb.w	r1, [r8, r2]
    6b8c:	1e4a      	subs	r2, r1, #1
    6b8e:	2a18      	cmp	r2, #24
    6b90:	f200 809b 	bhi.w	6cca <__gethex+0x276>
    6b94:	7872      	ldrb	r2, [r6, #1]
    6b96:	f818 2002 	ldrb.w	r2, [r8, r2]
    6b9a:	3910      	subs	r1, #16
    6b9c:	3601      	adds	r6, #1
    6b9e:	2a00      	cmp	r2, #0
    6ba0:	d15a      	bne.n	6c58 <__gethex+0x204>
    6ba2:	b100      	cbz	r0, 6ba6 <__gethex+0x152>
    6ba4:	4249      	negs	r1, r1
    6ba6:	4489      	add	r9, r1
    6ba8:	f8cb 6000 	str.w	r6, [fp]
    6bac:	2f00      	cmp	r7, #0
    6bae:	d095      	beq.n	6adc <__gethex+0x88>
    6bb0:	2b00      	cmp	r3, #0
    6bb2:	bf14      	ite	ne
    6bb4:	2500      	movne	r5, #0
    6bb6:	2506      	moveq	r5, #6
    6bb8:	4628      	mov	r0, r5
    6bba:	b005      	add	sp, #20
    6bbc:	ecbd 8b02 	vpop	{d8}
    6bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6bc4:	f8dd 900c 	ldr.w	r9, [sp, #12]
    6bc8:	4623      	mov	r3, r4
    6bca:	f846 3b04 	str.w	r3, [r6], #4
    6bce:	4618      	mov	r0, r3
    6bd0:	9b01      	ldr	r3, [sp, #4]
    6bd2:	1af6      	subs	r6, r6, r3
    6bd4:	10b6      	asrs	r6, r6, #2
    6bd6:	f8cb 6010 	str.w	r6, [fp, #16]
    6bda:	f000 fbe9 	bl	73b0 <__hi0bits>
    6bde:	0176      	lsls	r6, r6, #5
    6be0:	f8da 4000 	ldr.w	r4, [sl]
    6be4:	1a30      	subs	r0, r6, r0
    6be6:	42a0      	cmp	r0, r4
    6be8:	dc75      	bgt.n	6cd6 <__gethex+0x282>
    6bea:	f2c0 80ef 	blt.w	6dcc <__gethex+0x378>
    6bee:	2700      	movs	r7, #0
    6bf0:	f8da 3008 	ldr.w	r3, [sl, #8]
    6bf4:	454b      	cmp	r3, r9
    6bf6:	f2c0 8151 	blt.w	6e9c <__gethex+0x448>
    6bfa:	f8da 3004 	ldr.w	r3, [sl, #4]
    6bfe:	454b      	cmp	r3, r9
    6c00:	dd4a      	ble.n	6c98 <__gethex+0x244>
    6c02:	eba3 0909 	sub.w	r9, r3, r9
    6c06:	454c      	cmp	r4, r9
    6c08:	f300 8082 	bgt.w	6d10 <__gethex+0x2bc>
    6c0c:	f8da 200c 	ldr.w	r2, [sl, #12]
    6c10:	2a02      	cmp	r2, #2
    6c12:	f000 8165 	beq.w	6ee0 <__gethex+0x48c>
    6c16:	2a03      	cmp	r2, #3
    6c18:	f000 8181 	beq.w	6f1e <__gethex+0x4ca>
    6c1c:	2a01      	cmp	r2, #1
    6c1e:	f000 816f 	beq.w	6f00 <__gethex+0x4ac>
    6c22:	ee18 0a10 	vmov	r0, s16
    6c26:	4659      	mov	r1, fp
    6c28:	f000 fb0e 	bl	7248 <_Bfree>
    6c2c:	2550      	movs	r5, #80	; 0x50
    6c2e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    6c30:	2300      	movs	r3, #0
    6c32:	4628      	mov	r0, r5
    6c34:	6013      	str	r3, [r2, #0]
    6c36:	b005      	add	sp, #20
    6c38:	ecbd 8b02 	vpop	{d8}
    6c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6c40:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    6c44:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    6c48:	f1a2 0110 	sub.w	r1, r2, #16
    6c4c:	f816 2f01 	ldrb.w	r2, [r6, #1]!
    6c50:	f818 2002 	ldrb.w	r2, [r8, r2]
    6c54:	2a00      	cmp	r2, #0
    6c56:	d0a4      	beq.n	6ba2 <__gethex+0x14e>
    6c58:	2a19      	cmp	r2, #25
    6c5a:	ddf1      	ble.n	6c40 <__gethex+0x1ec>
    6c5c:	e7a1      	b.n	6ba2 <__gethex+0x14e>
    6c5e:	4949      	ldr	r1, [pc, #292]	; (6d84 <__gethex+0x330>)
    6c60:	9301      	str	r3, [sp, #4]
    6c62:	2201      	movs	r2, #1
    6c64:	4620      	mov	r0, r4
    6c66:	f7ff f98f 	bl	5f88 <strncmp>
    6c6a:	9b01      	ldr	r3, [sp, #4]
    6c6c:	2800      	cmp	r0, #0
    6c6e:	d16d      	bne.n	6d4c <__gethex+0x2f8>
    6c70:	7861      	ldrb	r1, [r4, #1]
    6c72:	f818 2001 	ldrb.w	r2, [r8, r1]
    6c76:	1c65      	adds	r5, r4, #1
    6c78:	2a00      	cmp	r2, #0
    6c7a:	d069      	beq.n	6d50 <__gethex+0x2fc>
    6c7c:	2930      	cmp	r1, #48	; 0x30
    6c7e:	462c      	mov	r4, r5
    6c80:	d105      	bne.n	6c8e <__gethex+0x23a>
    6c82:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    6c86:	2b30      	cmp	r3, #48	; 0x30
    6c88:	d0fb      	beq.n	6c82 <__gethex+0x22e>
    6c8a:	f818 2003 	ldrb.w	r2, [r8, r3]
    6c8e:	fab2 f782 	clz	r7, r2
    6c92:	097f      	lsrs	r7, r7, #5
    6c94:	2301      	movs	r3, #1
    6c96:	e702      	b.n	6a9e <__gethex+0x4a>
    6c98:	2501      	movs	r5, #1
    6c9a:	b157      	cbz	r7, 6cb2 <__gethex+0x25e>
    6c9c:	f8da 300c 	ldr.w	r3, [sl, #12]
    6ca0:	2b02      	cmp	r3, #2
    6ca2:	d05d      	beq.n	6d60 <__gethex+0x30c>
    6ca4:	2b03      	cmp	r3, #3
    6ca6:	d05f      	beq.n	6d68 <__gethex+0x314>
    6ca8:	2b01      	cmp	r3, #1
    6caa:	f000 8084 	beq.w	6db6 <__gethex+0x362>
    6cae:	f045 0510 	orr.w	r5, r5, #16
    6cb2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6cb4:	f8c3 b000 	str.w	fp, [r3]
    6cb8:	9b02      	ldr	r3, [sp, #8]
    6cba:	4628      	mov	r0, r5
    6cbc:	f8c3 9000 	str.w	r9, [r3]
    6cc0:	b005      	add	sp, #20
    6cc2:	ecbd 8b02 	vpop	{d8}
    6cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6cca:	462e      	mov	r6, r5
    6ccc:	e702      	b.n	6ad4 <__gethex+0x80>
    6cce:	2001      	movs	r0, #1
    6cd0:	78aa      	ldrb	r2, [r5, #2]
    6cd2:	1cae      	adds	r6, r5, #2
    6cd4:	e758      	b.n	6b88 <__gethex+0x134>
    6cd6:	1b06      	subs	r6, r0, r4
    6cd8:	4631      	mov	r1, r6
    6cda:	4658      	mov	r0, fp
    6cdc:	f000 ff96 	bl	7c0c <__any_on>
    6ce0:	4607      	mov	r7, r0
    6ce2:	b178      	cbz	r0, 6d04 <__gethex+0x2b0>
    6ce4:	1e72      	subs	r2, r6, #1
    6ce6:	1153      	asrs	r3, r2, #5
    6ce8:	9901      	ldr	r1, [sp, #4]
    6cea:	2701      	movs	r7, #1
    6cec:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    6cf0:	f002 031f 	and.w	r3, r2, #31
    6cf4:	fa07 f303 	lsl.w	r3, r7, r3
    6cf8:	420b      	tst	r3, r1
    6cfa:	d003      	beq.n	6d04 <__gethex+0x2b0>
    6cfc:	42ba      	cmp	r2, r7
    6cfe:	f300 80e2 	bgt.w	6ec6 <__gethex+0x472>
    6d02:	2702      	movs	r7, #2
    6d04:	4631      	mov	r1, r6
    6d06:	4658      	mov	r0, fp
    6d08:	44b1      	add	r9, r6
    6d0a:	f7ff fe51 	bl	69b0 <rshift>
    6d0e:	e76f      	b.n	6bf0 <__gethex+0x19c>
    6d10:	f109 35ff 	add.w	r5, r9, #4294967295
    6d14:	2f00      	cmp	r7, #0
    6d16:	f040 80ce 	bne.w	6eb6 <__gethex+0x462>
    6d1a:	2d00      	cmp	r5, #0
    6d1c:	f040 80cd 	bne.w	6eba <__gethex+0x466>
    6d20:	116b      	asrs	r3, r5, #5
    6d22:	9a01      	ldr	r2, [sp, #4]
    6d24:	f005 051f 	and.w	r5, r5, #31
    6d28:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    6d2c:	2301      	movs	r3, #1
    6d2e:	40ab      	lsls	r3, r5
    6d30:	4213      	tst	r3, r2
    6d32:	4649      	mov	r1, r9
    6d34:	4658      	mov	r0, fp
    6d36:	bf18      	it	ne
    6d38:	f047 0702 	orrne.w	r7, r7, #2
    6d3c:	eba4 0409 	sub.w	r4, r4, r9
    6d40:	f7ff fe36 	bl	69b0 <rshift>
    6d44:	2502      	movs	r5, #2
    6d46:	f8da 9004 	ldr.w	r9, [sl, #4]
    6d4a:	e7a6      	b.n	6c9a <__gethex+0x246>
    6d4c:	7821      	ldrb	r1, [r4, #0]
    6d4e:	4625      	mov	r5, r4
    6d50:	f001 01df 	and.w	r1, r1, #223	; 0xdf
    6d54:	2950      	cmp	r1, #80	; 0x50
    6d56:	f000 80bf 	beq.w	6ed8 <__gethex+0x484>
    6d5a:	f8cb 5000 	str.w	r5, [fp]
    6d5e:	e727      	b.n	6bb0 <__gethex+0x15c>
    6d60:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6d62:	f1c3 0301 	rsb	r3, r3, #1
    6d66:	9311      	str	r3, [sp, #68]	; 0x44
    6d68:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6d6a:	2b00      	cmp	r3, #0
    6d6c:	d09f      	beq.n	6cae <__gethex+0x25a>
    6d6e:	f8db 7010 	ldr.w	r7, [fp, #16]
    6d72:	f8dd 8004 	ldr.w	r8, [sp, #4]
    6d76:	00ba      	lsls	r2, r7, #2
    6d78:	4643      	mov	r3, r8
    6d7a:	9201      	str	r2, [sp, #4]
    6d7c:	eb08 0087 	add.w	r0, r8, r7, lsl #2
    6d80:	2100      	movs	r1, #0
    6d82:	e007      	b.n	6d94 <__gethex+0x340>
    6d84:	200008b0 	.word	0x200008b0
    6d88:	200005c8 	.word	0x200005c8
    6d8c:	4298      	cmp	r0, r3
    6d8e:	f843 1c04 	str.w	r1, [r3, #-4]
    6d92:	d93f      	bls.n	6e14 <__gethex+0x3c0>
    6d94:	461e      	mov	r6, r3
    6d96:	f853 2b04 	ldr.w	r2, [r3], #4
    6d9a:	f1b2 3fff 	cmp.w	r2, #4294967295
    6d9e:	d0f5      	beq.n	6d8c <__gethex+0x338>
    6da0:	3201      	adds	r2, #1
    6da2:	2d02      	cmp	r5, #2
    6da4:	6032      	str	r2, [r6, #0]
    6da6:	f000 80bf 	beq.w	6f28 <__gethex+0x4d4>
    6daa:	f014 041f 	ands.w	r4, r4, #31
    6dae:	f040 80e7 	bne.w	6f80 <__gethex+0x52c>
    6db2:	2521      	movs	r5, #33	; 0x21
    6db4:	e77d      	b.n	6cb2 <__gethex+0x25e>
    6db6:	07ba      	lsls	r2, r7, #30
    6db8:	f57f af79 	bpl.w	6cae <__gethex+0x25a>
    6dbc:	9b01      	ldr	r3, [sp, #4]
    6dbe:	681b      	ldr	r3, [r3, #0]
    6dc0:	431f      	orrs	r7, r3
    6dc2:	07fb      	lsls	r3, r7, #31
    6dc4:	d4d3      	bmi.n	6d6e <__gethex+0x31a>
    6dc6:	e772      	b.n	6cae <__gethex+0x25a>
    6dc8:	2000      	movs	r0, #0
    6dca:	e781      	b.n	6cd0 <__gethex+0x27c>
    6dcc:	1a22      	subs	r2, r4, r0
    6dce:	4659      	mov	r1, fp
    6dd0:	ee18 0a10 	vmov	r0, s16
    6dd4:	eba9 0902 	sub.w	r9, r9, r2
    6dd8:	f000 fc76 	bl	76c8 <__lshift>
    6ddc:	f100 0314 	add.w	r3, r0, #20
    6de0:	4683      	mov	fp, r0
    6de2:	9301      	str	r3, [sp, #4]
    6de4:	2700      	movs	r7, #0
    6de6:	e703      	b.n	6bf0 <__gethex+0x19c>
    6de8:	7872      	ldrb	r2, [r6, #1]
    6dea:	f818 0002 	ldrb.w	r0, [r8, r2]
    6dee:	1c71      	adds	r1, r6, #1
    6df0:	2800      	cmp	r0, #0
    6df2:	f000 80a0 	beq.w	6f36 <__gethex+0x4e2>
    6df6:	460d      	mov	r5, r1
    6df8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    6dfc:	f818 0002 	ldrb.w	r0, [r8, r2]
    6e00:	2800      	cmp	r0, #0
    6e02:	d1f8      	bne.n	6df6 <__gethex+0x3a2>
    6e04:	1b75      	subs	r5, r6, r5
    6e06:	ea4f 0985 	mov.w	r9, r5, lsl #2
    6e0a:	460e      	mov	r6, r1
    6e0c:	e65d      	b.n	6aca <__gethex+0x76>
    6e0e:	3402      	adds	r4, #2
    6e10:	2300      	movs	r3, #0
    6e12:	e638      	b.n	6a86 <__gethex+0x32>
    6e14:	f8db 3008 	ldr.w	r3, [fp, #8]
    6e18:	429f      	cmp	r7, r3
    6e1a:	f280 808e 	bge.w	6f3a <__gethex+0x4e6>
    6e1e:	463b      	mov	r3, r7
    6e20:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
    6e24:	2101      	movs	r1, #1
    6e26:	3301      	adds	r3, #1
    6e28:	2d02      	cmp	r5, #2
    6e2a:	f8cb 3010 	str.w	r3, [fp, #16]
    6e2e:	6151      	str	r1, [r2, #20]
    6e30:	d07a      	beq.n	6f28 <__gethex+0x4d4>
    6e32:	429f      	cmp	r7, r3
    6e34:	dab9      	bge.n	6daa <__gethex+0x356>
    6e36:	2b00      	cmp	r3, #0
    6e38:	f340 809b 	ble.w	6f72 <__gethex+0x51e>
    6e3c:	f8db 2014 	ldr.w	r2, [fp, #20]
    6e40:	eb08 0383 	add.w	r3, r8, r3, lsl #2
    6e44:	f10b 0018 	add.w	r0, fp, #24
    6e48:	4283      	cmp	r3, r0
    6e4a:	ea4f 0252 	mov.w	r2, r2, lsr #1
    6e4e:	f240 80b1 	bls.w	6fb4 <__gethex+0x560>
    6e52:	4644      	mov	r4, r8
    6e54:	6801      	ldr	r1, [r0, #0]
    6e56:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
    6e5a:	f844 2b04 	str.w	r2, [r4], #4
    6e5e:	f850 2b04 	ldr.w	r2, [r0], #4
    6e62:	4283      	cmp	r3, r0
    6e64:	ea4f 0252 	mov.w	r2, r2, lsr #1
    6e68:	d8f4      	bhi.n	6e54 <__gethex+0x400>
    6e6a:	eba3 030b 	sub.w	r3, r3, fp
    6e6e:	3b19      	subs	r3, #25
    6e70:	089b      	lsrs	r3, r3, #2
    6e72:	3301      	adds	r3, #1
    6e74:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
    6e78:	eb08 0383 	add.w	r3, r8, r3, lsl #2
    6e7c:	2a00      	cmp	r2, #0
    6e7e:	f040 809d 	bne.w	6fbc <__gethex+0x568>
    6e82:	eba3 0208 	sub.w	r2, r3, r8
    6e86:	1092      	asrs	r2, r2, #2
    6e88:	4543      	cmp	r3, r8
    6e8a:	f8cb 2010 	str.w	r2, [fp, #16]
    6e8e:	d073      	beq.n	6f78 <__gethex+0x524>
    6e90:	f8da 3008 	ldr.w	r3, [sl, #8]
    6e94:	f109 0901 	add.w	r9, r9, #1
    6e98:	454b      	cmp	r3, r9
    6e9a:	da8a      	bge.n	6db2 <__gethex+0x35e>
    6e9c:	ee18 0a10 	vmov	r0, s16
    6ea0:	4659      	mov	r1, fp
    6ea2:	f000 f9d1 	bl	7248 <_Bfree>
    6ea6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    6ea8:	2300      	movs	r3, #0
    6eaa:	6013      	str	r3, [r2, #0]
    6eac:	25a3      	movs	r5, #163	; 0xa3
    6eae:	e683      	b.n	6bb8 <__gethex+0x164>
    6eb0:	9e01      	ldr	r6, [sp, #4]
    6eb2:	2300      	movs	r3, #0
    6eb4:	e689      	b.n	6bca <__gethex+0x176>
    6eb6:	2701      	movs	r7, #1
    6eb8:	e732      	b.n	6d20 <__gethex+0x2cc>
    6eba:	4629      	mov	r1, r5
    6ebc:	4658      	mov	r0, fp
    6ebe:	f000 fea5 	bl	7c0c <__any_on>
    6ec2:	4607      	mov	r7, r0
    6ec4:	e72c      	b.n	6d20 <__gethex+0x2cc>
    6ec6:	1eb1      	subs	r1, r6, #2
    6ec8:	4658      	mov	r0, fp
    6eca:	f000 fe9f 	bl	7c0c <__any_on>
    6ece:	2800      	cmp	r0, #0
    6ed0:	f43f af17 	beq.w	6d02 <__gethex+0x2ae>
    6ed4:	2703      	movs	r7, #3
    6ed6:	e715      	b.n	6d04 <__gethex+0x2b0>
    6ed8:	f04f 0900 	mov.w	r9, #0
    6edc:	2701      	movs	r7, #1
    6ede:	e64a      	b.n	6b76 <__gethex+0x122>
    6ee0:	9a11      	ldr	r2, [sp, #68]	; 0x44
    6ee2:	2a00      	cmp	r2, #0
    6ee4:	f47f ae9d 	bne.w	6c22 <__gethex+0x1ce>
    6ee8:	9902      	ldr	r1, [sp, #8]
    6eea:	600b      	str	r3, [r1, #0]
    6eec:	9b01      	ldr	r3, [sp, #4]
    6eee:	2201      	movs	r2, #1
    6ef0:	f8cb 2010 	str.w	r2, [fp, #16]
    6ef4:	601a      	str	r2, [r3, #0]
    6ef6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6ef8:	2562      	movs	r5, #98	; 0x62
    6efa:	f8c3 b000 	str.w	fp, [r3]
    6efe:	e65b      	b.n	6bb8 <__gethex+0x164>
    6f00:	454c      	cmp	r4, r9
    6f02:	f47f ae8e 	bne.w	6c22 <__gethex+0x1ce>
    6f06:	2c01      	cmp	r4, #1
    6f08:	d0ee      	beq.n	6ee8 <__gethex+0x494>
    6f0a:	1e61      	subs	r1, r4, #1
    6f0c:	4658      	mov	r0, fp
    6f0e:	f000 fe7d 	bl	7c0c <__any_on>
    6f12:	2800      	cmp	r0, #0
    6f14:	f43f ae85 	beq.w	6c22 <__gethex+0x1ce>
    6f18:	f8da 3004 	ldr.w	r3, [sl, #4]
    6f1c:	e7e4      	b.n	6ee8 <__gethex+0x494>
    6f1e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    6f20:	2a00      	cmp	r2, #0
    6f22:	f43f ae7e 	beq.w	6c22 <__gethex+0x1ce>
    6f26:	e7df      	b.n	6ee8 <__gethex+0x494>
    6f28:	f8da 3000 	ldr.w	r3, [sl]
    6f2c:	3b01      	subs	r3, #1
    6f2e:	42a3      	cmp	r3, r4
    6f30:	d034      	beq.n	6f9c <__gethex+0x548>
    6f32:	2522      	movs	r5, #34	; 0x22
    6f34:	e6bd      	b.n	6cb2 <__gethex+0x25e>
    6f36:	460e      	mov	r6, r1
    6f38:	e5c7      	b.n	6aca <__gethex+0x76>
    6f3a:	f8db 1004 	ldr.w	r1, [fp, #4]
    6f3e:	ee18 0a10 	vmov	r0, s16
    6f42:	3101      	adds	r1, #1
    6f44:	f000 f95a 	bl	71fc <_Balloc>
    6f48:	4606      	mov	r6, r0
    6f4a:	b3c8      	cbz	r0, 6fc0 <__gethex+0x56c>
    6f4c:	f8db 3010 	ldr.w	r3, [fp, #16]
    6f50:	3302      	adds	r3, #2
    6f52:	009a      	lsls	r2, r3, #2
    6f54:	f10b 010c 	add.w	r1, fp, #12
    6f58:	300c      	adds	r0, #12
    6f5a:	f7fb f90f 	bl	217c <memcpy>
    6f5e:	4659      	mov	r1, fp
    6f60:	ee18 0a10 	vmov	r0, s16
    6f64:	f000 f970 	bl	7248 <_Bfree>
    6f68:	f106 0814 	add.w	r8, r6, #20
    6f6c:	6933      	ldr	r3, [r6, #16]
    6f6e:	46b3      	mov	fp, r6
    6f70:	e756      	b.n	6e20 <__gethex+0x3cc>
    6f72:	2300      	movs	r3, #0
    6f74:	f8cb 3010 	str.w	r3, [fp, #16]
    6f78:	2300      	movs	r3, #0
    6f7a:	f8cb 3014 	str.w	r3, [fp, #20]
    6f7e:	e787      	b.n	6e90 <__gethex+0x43c>
    6f80:	9b01      	ldr	r3, [sp, #4]
    6f82:	4443      	add	r3, r8
    6f84:	f1c4 0420 	rsb	r4, r4, #32
    6f88:	f853 0c04 	ldr.w	r0, [r3, #-4]
    6f8c:	f000 fa10 	bl	73b0 <__hi0bits>
    6f90:	42a0      	cmp	r0, r4
    6f92:	f6bf af0e 	bge.w	6db2 <__gethex+0x35e>
    6f96:	f8db 3010 	ldr.w	r3, [fp, #16]
    6f9a:	e74c      	b.n	6e36 <__gethex+0x3e2>
    6f9c:	1163      	asrs	r3, r4, #5
    6f9e:	f004 041f 	and.w	r4, r4, #31
    6fa2:	f858 2023 	ldr.w	r2, [r8, r3, lsl #2]
    6fa6:	2301      	movs	r3, #1
    6fa8:	40a3      	lsls	r3, r4
    6faa:	4213      	tst	r3, r2
    6fac:	bf0c      	ite	eq
    6fae:	2522      	moveq	r5, #34	; 0x22
    6fb0:	2521      	movne	r5, #33	; 0x21
    6fb2:	e67e      	b.n	6cb2 <__gethex+0x25e>
    6fb4:	f8c8 2000 	str.w	r2, [r8]
    6fb8:	4643      	mov	r3, r8
    6fba:	b16a      	cbz	r2, 6fd8 <__gethex+0x584>
    6fbc:	3304      	adds	r3, #4
    6fbe:	e760      	b.n	6e82 <__gethex+0x42e>
    6fc0:	4b07      	ldr	r3, [pc, #28]	; (6fe0 <__gethex+0x58c>)
    6fc2:	4808      	ldr	r0, [pc, #32]	; (6fe4 <__gethex+0x590>)
    6fc4:	4632      	mov	r2, r6
    6fc6:	2184      	movs	r1, #132	; 0x84
    6fc8:	f004 fa7e 	bl	b4c8 <__assert_func>
    6fcc:	4b04      	ldr	r3, [pc, #16]	; (6fe0 <__gethex+0x58c>)
    6fce:	4805      	ldr	r0, [pc, #20]	; (6fe4 <__gethex+0x590>)
    6fd0:	465a      	mov	r2, fp
    6fd2:	21e4      	movs	r1, #228	; 0xe4
    6fd4:	f004 fa78 	bl	b4c8 <__assert_func>
    6fd8:	f8cb 2010 	str.w	r2, [fp, #16]
    6fdc:	e7cc      	b.n	6f78 <__gethex+0x524>
    6fde:	bf00      	nop
    6fe0:	20000550 	.word	0x20000550
    6fe4:	20000564 	.word	0x20000564

00006fe8 <__match>:
    6fe8:	b410      	push	{r4}
    6fea:	6804      	ldr	r4, [r0, #0]
    6fec:	e009      	b.n	7002 <__match+0x1a>
    6fee:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    6ff2:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
    6ff6:	f1bc 0f19 	cmp.w	ip, #25
    6ffa:	bf98      	it	ls
    6ffc:	3320      	addls	r3, #32
    6ffe:	4293      	cmp	r3, r2
    7000:	d109      	bne.n	7016 <__match+0x2e>
    7002:	f811 2b01 	ldrb.w	r2, [r1], #1
    7006:	2a00      	cmp	r2, #0
    7008:	d1f1      	bne.n	6fee <__match+0x6>
    700a:	3401      	adds	r4, #1
    700c:	6004      	str	r4, [r0, #0]
    700e:	2001      	movs	r0, #1
    7010:	f85d 4b04 	ldr.w	r4, [sp], #4
    7014:	4770      	bx	lr
    7016:	2000      	movs	r0, #0
    7018:	f85d 4b04 	ldr.w	r4, [sp], #4
    701c:	4770      	bx	lr
    701e:	bf00      	nop

00007020 <__hexnan>:
    7020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7024:	6809      	ldr	r1, [r1, #0]
    7026:	b085      	sub	sp, #20
    7028:	114b      	asrs	r3, r1, #5
    702a:	f011 011f 	ands.w	r1, r1, #31
    702e:	9002      	str	r0, [sp, #8]
    7030:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7034:	9103      	str	r1, [sp, #12]
    7036:	f040 808f 	bne.w	7158 <__hexnan+0x138>
    703a:	1f1d      	subs	r5, r3, #4
    703c:	9301      	str	r3, [sp, #4]
    703e:	9b02      	ldr	r3, [sp, #8]
    7040:	9901      	ldr	r1, [sp, #4]
    7042:	681c      	ldr	r4, [r3, #0]
    7044:	2300      	movs	r3, #0
    7046:	f841 3c04 	str.w	r3, [r1, #-4]
    704a:	7861      	ldrb	r1, [r4, #1]
    704c:	3401      	adds	r4, #1
    704e:	2900      	cmp	r1, #0
    7050:	f000 8098 	beq.w	7184 <__hexnan+0x164>
    7054:	f8df 9174 	ldr.w	r9, [pc, #372]	; 71cc <__hexnan+0x1ac>
    7058:	46a8      	mov	r8, r5
    705a:	46ac      	mov	ip, r5
    705c:	469a      	mov	sl, r3
    705e:	461e      	mov	r6, r3
    7060:	e00e      	b.n	7080 <__hexnan+0x60>
    7062:	2920      	cmp	r1, #32
    7064:	f200 808c 	bhi.w	7180 <__hexnan+0x160>
    7068:	4556      	cmp	r6, sl
    706a:	dd06      	ble.n	707a <__hexnan+0x5a>
    706c:	45c4      	cmp	ip, r8
    706e:	d201      	bcs.n	7074 <__hexnan+0x54>
    7070:	2b07      	cmp	r3, #7
    7072:	dd5b      	ble.n	712c <__hexnan+0x10c>
    7074:	4562      	cmp	r2, ip
    7076:	d351      	bcc.n	711c <__hexnan+0xfc>
    7078:	2308      	movs	r3, #8
    707a:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    707e:	b1a1      	cbz	r1, 70aa <__hexnan+0x8a>
    7080:	f819 0001 	ldrb.w	r0, [r9, r1]
    7084:	2800      	cmp	r0, #0
    7086:	d0ec      	beq.n	7062 <__hexnan+0x42>
    7088:	3301      	adds	r3, #1
    708a:	2b08      	cmp	r3, #8
    708c:	f106 0601 	add.w	r6, r6, #1
    7090:	dc3a      	bgt.n	7108 <__hexnan+0xe8>
    7092:	f8dc 1000 	ldr.w	r1, [ip]
    7096:	0109      	lsls	r1, r1, #4
    7098:	f000 000f 	and.w	r0, r0, #15
    709c:	4308      	orrs	r0, r1
    709e:	f8cc 0000 	str.w	r0, [ip]
    70a2:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    70a6:	2900      	cmp	r1, #0
    70a8:	d1ea      	bne.n	7080 <__hexnan+0x60>
    70aa:	2e00      	cmp	r6, #0
    70ac:	d06a      	beq.n	7184 <__hexnan+0x164>
    70ae:	45c4      	cmp	ip, r8
    70b0:	d201      	bcs.n	70b6 <__hexnan+0x96>
    70b2:	2b07      	cmp	r3, #7
    70b4:	dd74      	ble.n	71a0 <__hexnan+0x180>
    70b6:	4562      	cmp	r2, ip
    70b8:	d252      	bcs.n	7160 <__hexnan+0x140>
    70ba:	1f11      	subs	r1, r2, #4
    70bc:	4663      	mov	r3, ip
    70be:	f853 0b04 	ldr.w	r0, [r3], #4
    70c2:	f841 0f04 	str.w	r0, [r1, #4]!
    70c6:	42ab      	cmp	r3, r5
    70c8:	d9f9      	bls.n	70be <__hexnan+0x9e>
    70ca:	eba5 030c 	sub.w	r3, r5, ip
    70ce:	f023 0303 	bic.w	r3, r3, #3
    70d2:	1c69      	adds	r1, r5, #1
    70d4:	3304      	adds	r3, #4
    70d6:	f10c 0c01 	add.w	ip, ip, #1
    70da:	4561      	cmp	r1, ip
    70dc:	bf38      	it	cc
    70de:	2304      	movcc	r3, #4
    70e0:	4413      	add	r3, r2
    70e2:	2100      	movs	r1, #0
    70e4:	f843 1b04 	str.w	r1, [r3], #4
    70e8:	42ab      	cmp	r3, r5
    70ea:	d9fb      	bls.n	70e4 <__hexnan+0xc4>
    70ec:	9b01      	ldr	r3, [sp, #4]
    70ee:	f853 3c04 	ldr.w	r3, [r3, #-4]
    70f2:	b92b      	cbnz	r3, 7100 <__hexnan+0xe0>
    70f4:	42aa      	cmp	r2, r5
    70f6:	d049      	beq.n	718c <__hexnan+0x16c>
    70f8:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    70fc:	2b00      	cmp	r3, #0
    70fe:	d0f9      	beq.n	70f4 <__hexnan+0xd4>
    7100:	2005      	movs	r0, #5
    7102:	b005      	add	sp, #20
    7104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7108:	4562      	cmp	r2, ip
    710a:	d2b6      	bcs.n	707a <__hexnan+0x5a>
    710c:	2300      	movs	r3, #0
    710e:	f84c 3c04 	str.w	r3, [ip, #-4]
    7112:	4619      	mov	r1, r3
    7114:	f1ac 0c04 	sub.w	ip, ip, #4
    7118:	2301      	movs	r3, #1
    711a:	e7bd      	b.n	7098 <__hexnan+0x78>
    711c:	2300      	movs	r3, #0
    711e:	f1ac 0804 	sub.w	r8, ip, #4
    7122:	f84c 3c04 	str.w	r3, [ip, #-4]
    7126:	46b2      	mov	sl, r6
    7128:	46c4      	mov	ip, r8
    712a:	e7a6      	b.n	707a <__hexnan+0x5a>
    712c:	f1c3 0108 	rsb	r1, r3, #8
    7130:	f8dc 3000 	ldr.w	r3, [ip]
    7134:	0089      	lsls	r1, r1, #2
    7136:	f1c1 0e20 	rsb	lr, r1, #32
    713a:	4660      	mov	r0, ip
    713c:	469b      	mov	fp, r3
    713e:	6847      	ldr	r7, [r0, #4]
    7140:	fa07 f30e 	lsl.w	r3, r7, lr
    7144:	ea43 030b 	orr.w	r3, r3, fp
    7148:	fa27 fb01 	lsr.w	fp, r7, r1
    714c:	6003      	str	r3, [r0, #0]
    714e:	f840 bf04 	str.w	fp, [r0, #4]!
    7152:	4540      	cmp	r0, r8
    7154:	d3f3      	bcc.n	713e <__hexnan+0x11e>
    7156:	e78d      	b.n	7074 <__hexnan+0x54>
    7158:	1d19      	adds	r1, r3, #4
    715a:	9101      	str	r1, [sp, #4]
    715c:	461d      	mov	r5, r3
    715e:	e76e      	b.n	703e <__hexnan+0x1e>
    7160:	9b03      	ldr	r3, [sp, #12]
    7162:	2b00      	cmp	r3, #0
    7164:	d0c2      	beq.n	70ec <__hexnan+0xcc>
    7166:	9b03      	ldr	r3, [sp, #12]
    7168:	9801      	ldr	r0, [sp, #4]
    716a:	f1c3 0120 	rsb	r1, r3, #32
    716e:	f04f 33ff 	mov.w	r3, #4294967295
    7172:	40cb      	lsrs	r3, r1
    7174:	f850 1c04 	ldr.w	r1, [r0, #-4]
    7178:	400b      	ands	r3, r1
    717a:	f840 3c04 	str.w	r3, [r0, #-4]
    717e:	e7b8      	b.n	70f2 <__hexnan+0xd2>
    7180:	2929      	cmp	r1, #41	; 0x29
    7182:	d009      	beq.n	7198 <__hexnan+0x178>
    7184:	2004      	movs	r0, #4
    7186:	b005      	add	sp, #20
    7188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    718c:	2301      	movs	r3, #1
    718e:	2005      	movs	r0, #5
    7190:	602b      	str	r3, [r5, #0]
    7192:	b005      	add	sp, #20
    7194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7198:	9902      	ldr	r1, [sp, #8]
    719a:	3401      	adds	r4, #1
    719c:	600c      	str	r4, [r1, #0]
    719e:	e784      	b.n	70aa <__hexnan+0x8a>
    71a0:	f8dc 1000 	ldr.w	r1, [ip]
    71a4:	f1c3 0308 	rsb	r3, r3, #8
    71a8:	009b      	lsls	r3, r3, #2
    71aa:	f1c3 0720 	rsb	r7, r3, #32
    71ae:	4664      	mov	r4, ip
    71b0:	4608      	mov	r0, r1
    71b2:	6866      	ldr	r6, [r4, #4]
    71b4:	fa06 f107 	lsl.w	r1, r6, r7
    71b8:	4301      	orrs	r1, r0
    71ba:	fa26 f003 	lsr.w	r0, r6, r3
    71be:	6021      	str	r1, [r4, #0]
    71c0:	f844 0f04 	str.w	r0, [r4, #4]!
    71c4:	4544      	cmp	r4, r8
    71c6:	d3f4      	bcc.n	71b2 <__hexnan+0x192>
    71c8:	e775      	b.n	70b6 <__hexnan+0x96>
    71ca:	bf00      	nop
    71cc:	200005c8 	.word	0x200005c8

000071d0 <__ascii_mbtowc>:
    71d0:	b082      	sub	sp, #8
    71d2:	b149      	cbz	r1, 71e8 <__ascii_mbtowc+0x18>
    71d4:	b15a      	cbz	r2, 71ee <__ascii_mbtowc+0x1e>
    71d6:	b16b      	cbz	r3, 71f4 <__ascii_mbtowc+0x24>
    71d8:	7813      	ldrb	r3, [r2, #0]
    71da:	600b      	str	r3, [r1, #0]
    71dc:	7812      	ldrb	r2, [r2, #0]
    71de:	1e10      	subs	r0, r2, #0
    71e0:	bf18      	it	ne
    71e2:	2001      	movne	r0, #1
    71e4:	b002      	add	sp, #8
    71e6:	4770      	bx	lr
    71e8:	a901      	add	r1, sp, #4
    71ea:	2a00      	cmp	r2, #0
    71ec:	d1f3      	bne.n	71d6 <__ascii_mbtowc+0x6>
    71ee:	4610      	mov	r0, r2
    71f0:	b002      	add	sp, #8
    71f2:	4770      	bx	lr
    71f4:	f06f 0001 	mvn.w	r0, #1
    71f8:	e7f4      	b.n	71e4 <__ascii_mbtowc+0x14>
    71fa:	bf00      	nop

000071fc <_Balloc>:
    71fc:	6c43      	ldr	r3, [r0, #68]	; 0x44
    71fe:	b570      	push	{r4, r5, r6, lr}
    7200:	4605      	mov	r5, r0
    7202:	460c      	mov	r4, r1
    7204:	b14b      	cbz	r3, 721a <_Balloc+0x1e>
    7206:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    720a:	b180      	cbz	r0, 722e <_Balloc+0x32>
    720c:	6802      	ldr	r2, [r0, #0]
    720e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    7212:	2300      	movs	r3, #0
    7214:	e9c0 3303 	strd	r3, r3, [r0, #12]
    7218:	bd70      	pop	{r4, r5, r6, pc}
    721a:	2221      	movs	r2, #33	; 0x21
    721c:	2104      	movs	r1, #4
    721e:	f004 f973 	bl	b508 <_calloc_r>
    7222:	4603      	mov	r3, r0
    7224:	6468      	str	r0, [r5, #68]	; 0x44
    7226:	2800      	cmp	r0, #0
    7228:	d1ed      	bne.n	7206 <_Balloc+0xa>
    722a:	2000      	movs	r0, #0
    722c:	bd70      	pop	{r4, r5, r6, pc}
    722e:	2101      	movs	r1, #1
    7230:	fa01 f604 	lsl.w	r6, r1, r4
    7234:	1d72      	adds	r2, r6, #5
    7236:	0092      	lsls	r2, r2, #2
    7238:	4628      	mov	r0, r5
    723a:	f004 f965 	bl	b508 <_calloc_r>
    723e:	2800      	cmp	r0, #0
    7240:	d0f3      	beq.n	722a <_Balloc+0x2e>
    7242:	e9c0 4601 	strd	r4, r6, [r0, #4]
    7246:	e7e4      	b.n	7212 <_Balloc+0x16>

00007248 <_Bfree>:
    7248:	b131      	cbz	r1, 7258 <_Bfree+0x10>
    724a:	6c43      	ldr	r3, [r0, #68]	; 0x44
    724c:	684a      	ldr	r2, [r1, #4]
    724e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    7252:	6008      	str	r0, [r1, #0]
    7254:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    7258:	4770      	bx	lr
    725a:	bf00      	nop

0000725c <__multadd>:
    725c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7260:	690e      	ldr	r6, [r1, #16]
    7262:	4680      	mov	r8, r0
    7264:	460f      	mov	r7, r1
    7266:	461d      	mov	r5, r3
    7268:	f101 0e14 	add.w	lr, r1, #20
    726c:	2000      	movs	r0, #0
    726e:	f8de 1000 	ldr.w	r1, [lr]
    7272:	b28c      	uxth	r4, r1
    7274:	fb02 5304 	mla	r3, r2, r4, r5
    7278:	0c09      	lsrs	r1, r1, #16
    727a:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    727e:	fb02 cc01 	mla	ip, r2, r1, ip
    7282:	3001      	adds	r0, #1
    7284:	b29c      	uxth	r4, r3
    7286:	eb04 440c 	add.w	r4, r4, ip, lsl #16
    728a:	4286      	cmp	r6, r0
    728c:	f84e 4b04 	str.w	r4, [lr], #4
    7290:	ea4f 451c 	mov.w	r5, ip, lsr #16
    7294:	dceb      	bgt.n	726e <__multadd+0x12>
    7296:	b13d      	cbz	r5, 72a8 <__multadd+0x4c>
    7298:	68bb      	ldr	r3, [r7, #8]
    729a:	42b3      	cmp	r3, r6
    729c:	dd07      	ble.n	72ae <__multadd+0x52>
    729e:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    72a2:	3601      	adds	r6, #1
    72a4:	615d      	str	r5, [r3, #20]
    72a6:	613e      	str	r6, [r7, #16]
    72a8:	4638      	mov	r0, r7
    72aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    72ae:	6879      	ldr	r1, [r7, #4]
    72b0:	4640      	mov	r0, r8
    72b2:	3101      	adds	r1, #1
    72b4:	f7ff ffa2 	bl	71fc <_Balloc>
    72b8:	4604      	mov	r4, r0
    72ba:	b1b0      	cbz	r0, 72ea <__multadd+0x8e>
    72bc:	693a      	ldr	r2, [r7, #16]
    72be:	3202      	adds	r2, #2
    72c0:	f107 010c 	add.w	r1, r7, #12
    72c4:	0092      	lsls	r2, r2, #2
    72c6:	300c      	adds	r0, #12
    72c8:	f7fa ff58 	bl	217c <memcpy>
    72cc:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    72d0:	687a      	ldr	r2, [r7, #4]
    72d2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    72d6:	6039      	str	r1, [r7, #0]
    72d8:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    72dc:	4627      	mov	r7, r4
    72de:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    72e2:	3601      	adds	r6, #1
    72e4:	615d      	str	r5, [r3, #20]
    72e6:	613e      	str	r6, [r7, #16]
    72e8:	e7de      	b.n	72a8 <__multadd+0x4c>
    72ea:	4b03      	ldr	r3, [pc, #12]	; (72f8 <__multadd+0x9c>)
    72ec:	4803      	ldr	r0, [pc, #12]	; (72fc <__multadd+0xa0>)
    72ee:	4622      	mov	r2, r4
    72f0:	21ba      	movs	r1, #186	; 0xba
    72f2:	f004 f8e9 	bl	b4c8 <__assert_func>
    72f6:	bf00      	nop
    72f8:	20000550 	.word	0x20000550
    72fc:	200006c8 	.word	0x200006c8

00007300 <__s2b>:
    7300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7304:	4617      	mov	r7, r2
    7306:	4a27      	ldr	r2, [pc, #156]	; (73a4 <__s2b+0xa4>)
    7308:	461e      	mov	r6, r3
    730a:	3308      	adds	r3, #8
    730c:	460c      	mov	r4, r1
    730e:	2e09      	cmp	r6, #9
    7310:	fb82 1203 	smull	r1, r2, r2, r3
    7314:	ea4f 73e3 	mov.w	r3, r3, asr #31
    7318:	4605      	mov	r5, r0
    731a:	ebc3 0362 	rsb	r3, r3, r2, asr #1
    731e:	dd39      	ble.n	7394 <__s2b+0x94>
    7320:	f04f 0c01 	mov.w	ip, #1
    7324:	2100      	movs	r1, #0
    7326:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    732a:	4563      	cmp	r3, ip
    732c:	f101 0101 	add.w	r1, r1, #1
    7330:	dcf9      	bgt.n	7326 <__s2b+0x26>
    7332:	4628      	mov	r0, r5
    7334:	f7ff ff62 	bl	71fc <_Balloc>
    7338:	4601      	mov	r1, r0
    733a:	b368      	cbz	r0, 7398 <__s2b+0x98>
    733c:	9b08      	ldr	r3, [sp, #32]
    733e:	6143      	str	r3, [r0, #20]
    7340:	2f09      	cmp	r7, #9
    7342:	f04f 0301 	mov.w	r3, #1
    7346:	6103      	str	r3, [r0, #16]
    7348:	dc12      	bgt.n	7370 <__s2b+0x70>
    734a:	340a      	adds	r4, #10
    734c:	2709      	movs	r7, #9
    734e:	42be      	cmp	r6, r7
    7350:	dd0b      	ble.n	736a <__s2b+0x6a>
    7352:	1bf2      	subs	r2, r6, r7
    7354:	18a6      	adds	r6, r4, r2
    7356:	f814 3b01 	ldrb.w	r3, [r4], #1
    735a:	220a      	movs	r2, #10
    735c:	3b30      	subs	r3, #48	; 0x30
    735e:	4628      	mov	r0, r5
    7360:	f7ff ff7c 	bl	725c <__multadd>
    7364:	42a6      	cmp	r6, r4
    7366:	4601      	mov	r1, r0
    7368:	d1f5      	bne.n	7356 <__s2b+0x56>
    736a:	4608      	mov	r0, r1
    736c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7370:	f104 0909 	add.w	r9, r4, #9
    7374:	46c8      	mov	r8, r9
    7376:	443c      	add	r4, r7
    7378:	f818 3b01 	ldrb.w	r3, [r8], #1
    737c:	220a      	movs	r2, #10
    737e:	3b30      	subs	r3, #48	; 0x30
    7380:	4628      	mov	r0, r5
    7382:	f7ff ff6b 	bl	725c <__multadd>
    7386:	45a0      	cmp	r8, r4
    7388:	4601      	mov	r1, r0
    738a:	d1f5      	bne.n	7378 <__s2b+0x78>
    738c:	f1a7 0408 	sub.w	r4, r7, #8
    7390:	444c      	add	r4, r9
    7392:	e7dc      	b.n	734e <__s2b+0x4e>
    7394:	2100      	movs	r1, #0
    7396:	e7cc      	b.n	7332 <__s2b+0x32>
    7398:	460a      	mov	r2, r1
    739a:	4b03      	ldr	r3, [pc, #12]	; (73a8 <__s2b+0xa8>)
    739c:	4803      	ldr	r0, [pc, #12]	; (73ac <__s2b+0xac>)
    739e:	21d3      	movs	r1, #211	; 0xd3
    73a0:	f004 f892 	bl	b4c8 <__assert_func>
    73a4:	38e38e39 	.word	0x38e38e39
    73a8:	20000550 	.word	0x20000550
    73ac:	200006c8 	.word	0x200006c8

000073b0 <__hi0bits>:
    73b0:	0c03      	lsrs	r3, r0, #16
    73b2:	041b      	lsls	r3, r3, #16
    73b4:	b9d3      	cbnz	r3, 73ec <__hi0bits+0x3c>
    73b6:	0400      	lsls	r0, r0, #16
    73b8:	2310      	movs	r3, #16
    73ba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
    73be:	bf04      	itt	eq
    73c0:	0200      	lsleq	r0, r0, #8
    73c2:	3308      	addeq	r3, #8
    73c4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
    73c8:	bf04      	itt	eq
    73ca:	0100      	lsleq	r0, r0, #4
    73cc:	3304      	addeq	r3, #4
    73ce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
    73d2:	bf04      	itt	eq
    73d4:	0080      	lsleq	r0, r0, #2
    73d6:	3302      	addeq	r3, #2
    73d8:	2800      	cmp	r0, #0
    73da:	db05      	blt.n	73e8 <__hi0bits+0x38>
    73dc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
    73e0:	f103 0301 	add.w	r3, r3, #1
    73e4:	bf08      	it	eq
    73e6:	2320      	moveq	r3, #32
    73e8:	4618      	mov	r0, r3
    73ea:	4770      	bx	lr
    73ec:	2300      	movs	r3, #0
    73ee:	e7e4      	b.n	73ba <__hi0bits+0xa>

000073f0 <__lo0bits>:
    73f0:	6803      	ldr	r3, [r0, #0]
    73f2:	f013 0207 	ands.w	r2, r3, #7
    73f6:	d008      	beq.n	740a <__lo0bits+0x1a>
    73f8:	07d9      	lsls	r1, r3, #31
    73fa:	d41f      	bmi.n	743c <__lo0bits+0x4c>
    73fc:	079a      	lsls	r2, r3, #30
    73fe:	d522      	bpl.n	7446 <__lo0bits+0x56>
    7400:	085b      	lsrs	r3, r3, #1
    7402:	6003      	str	r3, [r0, #0]
    7404:	2201      	movs	r2, #1
    7406:	4610      	mov	r0, r2
    7408:	4770      	bx	lr
    740a:	b299      	uxth	r1, r3
    740c:	b909      	cbnz	r1, 7412 <__lo0bits+0x22>
    740e:	0c1b      	lsrs	r3, r3, #16
    7410:	2210      	movs	r2, #16
    7412:	b2d9      	uxtb	r1, r3
    7414:	b909      	cbnz	r1, 741a <__lo0bits+0x2a>
    7416:	3208      	adds	r2, #8
    7418:	0a1b      	lsrs	r3, r3, #8
    741a:	0719      	lsls	r1, r3, #28
    741c:	bf04      	itt	eq
    741e:	091b      	lsreq	r3, r3, #4
    7420:	3204      	addeq	r2, #4
    7422:	0799      	lsls	r1, r3, #30
    7424:	bf04      	itt	eq
    7426:	089b      	lsreq	r3, r3, #2
    7428:	3202      	addeq	r2, #2
    742a:	07d9      	lsls	r1, r3, #31
    742c:	d403      	bmi.n	7436 <__lo0bits+0x46>
    742e:	085b      	lsrs	r3, r3, #1
    7430:	f102 0201 	add.w	r2, r2, #1
    7434:	d005      	beq.n	7442 <__lo0bits+0x52>
    7436:	6003      	str	r3, [r0, #0]
    7438:	4610      	mov	r0, r2
    743a:	4770      	bx	lr
    743c:	2200      	movs	r2, #0
    743e:	4610      	mov	r0, r2
    7440:	4770      	bx	lr
    7442:	2220      	movs	r2, #32
    7444:	e7df      	b.n	7406 <__lo0bits+0x16>
    7446:	089b      	lsrs	r3, r3, #2
    7448:	2202      	movs	r2, #2
    744a:	6003      	str	r3, [r0, #0]
    744c:	4610      	mov	r0, r2
    744e:	4770      	bx	lr

00007450 <__i2b>:
    7450:	b538      	push	{r3, r4, r5, lr}
    7452:	6c43      	ldr	r3, [r0, #68]	; 0x44
    7454:	4604      	mov	r4, r0
    7456:	460d      	mov	r5, r1
    7458:	b14b      	cbz	r3, 746e <__i2b+0x1e>
    745a:	6858      	ldr	r0, [r3, #4]
    745c:	b1b0      	cbz	r0, 748c <__i2b+0x3c>
    745e:	6802      	ldr	r2, [r0, #0]
    7460:	605a      	str	r2, [r3, #4]
    7462:	2200      	movs	r2, #0
    7464:	2301      	movs	r3, #1
    7466:	e9c0 3504 	strd	r3, r5, [r0, #16]
    746a:	60c2      	str	r2, [r0, #12]
    746c:	bd38      	pop	{r3, r4, r5, pc}
    746e:	2221      	movs	r2, #33	; 0x21
    7470:	2104      	movs	r1, #4
    7472:	f004 f849 	bl	b508 <_calloc_r>
    7476:	4603      	mov	r3, r0
    7478:	6460      	str	r0, [r4, #68]	; 0x44
    747a:	2800      	cmp	r0, #0
    747c:	d1ed      	bne.n	745a <__i2b+0xa>
    747e:	4b09      	ldr	r3, [pc, #36]	; (74a4 <__i2b+0x54>)
    7480:	4809      	ldr	r0, [pc, #36]	; (74a8 <__i2b+0x58>)
    7482:	2200      	movs	r2, #0
    7484:	f240 1145 	movw	r1, #325	; 0x145
    7488:	f004 f81e 	bl	b4c8 <__assert_func>
    748c:	221c      	movs	r2, #28
    748e:	2101      	movs	r1, #1
    7490:	4620      	mov	r0, r4
    7492:	f004 f839 	bl	b508 <_calloc_r>
    7496:	2800      	cmp	r0, #0
    7498:	d0f1      	beq.n	747e <__i2b+0x2e>
    749a:	2201      	movs	r2, #1
    749c:	2302      	movs	r3, #2
    749e:	e9c0 2301 	strd	r2, r3, [r0, #4]
    74a2:	e7de      	b.n	7462 <__i2b+0x12>
    74a4:	20000550 	.word	0x20000550
    74a8:	200006c8 	.word	0x200006c8

000074ac <__multiply>:
    74ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    74b0:	690e      	ldr	r6, [r1, #16]
    74b2:	6915      	ldr	r5, [r2, #16]
    74b4:	42ae      	cmp	r6, r5
    74b6:	b085      	sub	sp, #20
    74b8:	4688      	mov	r8, r1
    74ba:	4614      	mov	r4, r2
    74bc:	db05      	blt.n	74ca <__multiply+0x1e>
    74be:	462a      	mov	r2, r5
    74c0:	4623      	mov	r3, r4
    74c2:	4635      	mov	r5, r6
    74c4:	460c      	mov	r4, r1
    74c6:	4616      	mov	r6, r2
    74c8:	4698      	mov	r8, r3
    74ca:	68a3      	ldr	r3, [r4, #8]
    74cc:	6861      	ldr	r1, [r4, #4]
    74ce:	19af      	adds	r7, r5, r6
    74d0:	42bb      	cmp	r3, r7
    74d2:	bfb8      	it	lt
    74d4:	3101      	addlt	r1, #1
    74d6:	f7ff fe91 	bl	71fc <_Balloc>
    74da:	9001      	str	r0, [sp, #4]
    74dc:	2800      	cmp	r0, #0
    74de:	f000 8087 	beq.w	75f0 <__multiply+0x144>
    74e2:	9b01      	ldr	r3, [sp, #4]
    74e4:	f103 0914 	add.w	r9, r3, #20
    74e8:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
    74ec:	45d1      	cmp	r9, sl
    74ee:	d205      	bcs.n	74fc <__multiply+0x50>
    74f0:	464b      	mov	r3, r9
    74f2:	2200      	movs	r2, #0
    74f4:	f843 2b04 	str.w	r2, [r3], #4
    74f8:	459a      	cmp	sl, r3
    74fa:	d8fb      	bhi.n	74f4 <__multiply+0x48>
    74fc:	f108 0814 	add.w	r8, r8, #20
    7500:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
    7504:	f104 0314 	add.w	r3, r4, #20
    7508:	45d8      	cmp	r8, fp
    750a:	461a      	mov	r2, r3
    750c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    7510:	d25f      	bcs.n	75d2 <__multiply+0x126>
    7512:	1b2b      	subs	r3, r5, r4
    7514:	3b15      	subs	r3, #21
    7516:	f023 0303 	bic.w	r3, r3, #3
    751a:	3304      	adds	r3, #4
    751c:	3415      	adds	r4, #21
    751e:	42a5      	cmp	r5, r4
    7520:	bf38      	it	cc
    7522:	2304      	movcc	r3, #4
    7524:	e9cd a702 	strd	sl, r7, [sp, #8]
    7528:	46ac      	mov	ip, r5
    752a:	461f      	mov	r7, r3
    752c:	4692      	mov	sl, r2
    752e:	e005      	b.n	753c <__multiply+0x90>
    7530:	0c09      	lsrs	r1, r1, #16
    7532:	d129      	bne.n	7588 <__multiply+0xdc>
    7534:	45c3      	cmp	fp, r8
    7536:	f109 0904 	add.w	r9, r9, #4
    753a:	d948      	bls.n	75ce <__multiply+0x122>
    753c:	f858 1b04 	ldr.w	r1, [r8], #4
    7540:	b28d      	uxth	r5, r1
    7542:	2d00      	cmp	r5, #0
    7544:	d0f4      	beq.n	7530 <__multiply+0x84>
    7546:	4656      	mov	r6, sl
    7548:	464c      	mov	r4, r9
    754a:	2300      	movs	r3, #0
    754c:	f856 1b04 	ldr.w	r1, [r6], #4
    7550:	6822      	ldr	r2, [r4, #0]
    7552:	fa1f fe81 	uxth.w	lr, r1
    7556:	b290      	uxth	r0, r2
    7558:	0c09      	lsrs	r1, r1, #16
    755a:	fb05 000e 	mla	r0, r5, lr, r0
    755e:	0c12      	lsrs	r2, r2, #16
    7560:	4403      	add	r3, r0
    7562:	fb05 2201 	mla	r2, r5, r1, r2
    7566:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    756a:	b29b      	uxth	r3, r3
    756c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    7570:	45b4      	cmp	ip, r6
    7572:	f844 3b04 	str.w	r3, [r4], #4
    7576:	ea4f 4312 	mov.w	r3, r2, lsr #16
    757a:	d8e7      	bhi.n	754c <__multiply+0xa0>
    757c:	f849 3007 	str.w	r3, [r9, r7]
    7580:	f858 1c04 	ldr.w	r1, [r8, #-4]
    7584:	0c09      	lsrs	r1, r1, #16
    7586:	d0d5      	beq.n	7534 <__multiply+0x88>
    7588:	f8d9 3000 	ldr.w	r3, [r9]
    758c:	4650      	mov	r0, sl
    758e:	461a      	mov	r2, r3
    7590:	464c      	mov	r4, r9
    7592:	2600      	movs	r6, #0
    7594:	8805      	ldrh	r5, [r0, #0]
    7596:	0c12      	lsrs	r2, r2, #16
    7598:	fb01 2205 	mla	r2, r1, r5, r2
    759c:	4416      	add	r6, r2
    759e:	b29b      	uxth	r3, r3
    75a0:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    75a4:	f844 3b04 	str.w	r3, [r4], #4
    75a8:	f850 5b04 	ldr.w	r5, [r0], #4
    75ac:	6822      	ldr	r2, [r4, #0]
    75ae:	0c2d      	lsrs	r5, r5, #16
    75b0:	b293      	uxth	r3, r2
    75b2:	fb01 3305 	mla	r3, r1, r5, r3
    75b6:	eb03 4316 	add.w	r3, r3, r6, lsr #16
    75ba:	4584      	cmp	ip, r0
    75bc:	ea4f 4613 	mov.w	r6, r3, lsr #16
    75c0:	d8e8      	bhi.n	7594 <__multiply+0xe8>
    75c2:	45c3      	cmp	fp, r8
    75c4:	f849 3007 	str.w	r3, [r9, r7]
    75c8:	f109 0904 	add.w	r9, r9, #4
    75cc:	d8b6      	bhi.n	753c <__multiply+0x90>
    75ce:	e9dd a702 	ldrd	sl, r7, [sp, #8]
    75d2:	2f00      	cmp	r7, #0
    75d4:	dc02      	bgt.n	75dc <__multiply+0x130>
    75d6:	e005      	b.n	75e4 <__multiply+0x138>
    75d8:	3f01      	subs	r7, #1
    75da:	d003      	beq.n	75e4 <__multiply+0x138>
    75dc:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
    75e0:	2b00      	cmp	r3, #0
    75e2:	d0f9      	beq.n	75d8 <__multiply+0x12c>
    75e4:	9b01      	ldr	r3, [sp, #4]
    75e6:	4618      	mov	r0, r3
    75e8:	611f      	str	r7, [r3, #16]
    75ea:	b005      	add	sp, #20
    75ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    75f0:	4b03      	ldr	r3, [pc, #12]	; (7600 <__multiply+0x154>)
    75f2:	4804      	ldr	r0, [pc, #16]	; (7604 <__multiply+0x158>)
    75f4:	9a01      	ldr	r2, [sp, #4]
    75f6:	f44f 71b1 	mov.w	r1, #354	; 0x162
    75fa:	f003 ff65 	bl	b4c8 <__assert_func>
    75fe:	bf00      	nop
    7600:	20000550 	.word	0x20000550
    7604:	200006c8 	.word	0x200006c8

00007608 <__pow5mult>:
    7608:	f012 0303 	ands.w	r3, r2, #3
    760c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7610:	4614      	mov	r4, r2
    7612:	4606      	mov	r6, r0
    7614:	d132      	bne.n	767c <__pow5mult+0x74>
    7616:	460d      	mov	r5, r1
    7618:	10a4      	asrs	r4, r4, #2
    761a:	d020      	beq.n	765e <__pow5mult+0x56>
    761c:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
    7620:	f1b8 0f00 	cmp.w	r8, #0
    7624:	d033      	beq.n	768e <__pow5mult+0x86>
    7626:	07e3      	lsls	r3, r4, #31
    7628:	f04f 0700 	mov.w	r7, #0
    762c:	d407      	bmi.n	763e <__pow5mult+0x36>
    762e:	1064      	asrs	r4, r4, #1
    7630:	d015      	beq.n	765e <__pow5mult+0x56>
    7632:	f8d8 0000 	ldr.w	r0, [r8]
    7636:	b1a8      	cbz	r0, 7664 <__pow5mult+0x5c>
    7638:	4680      	mov	r8, r0
    763a:	07e3      	lsls	r3, r4, #31
    763c:	d5f7      	bpl.n	762e <__pow5mult+0x26>
    763e:	4642      	mov	r2, r8
    7640:	4629      	mov	r1, r5
    7642:	4630      	mov	r0, r6
    7644:	f7ff ff32 	bl	74ac <__multiply>
    7648:	b1b5      	cbz	r5, 7678 <__pow5mult+0x70>
    764a:	6869      	ldr	r1, [r5, #4]
    764c:	6c73      	ldr	r3, [r6, #68]	; 0x44
    764e:	1064      	asrs	r4, r4, #1
    7650:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    7654:	602a      	str	r2, [r5, #0]
    7656:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
    765a:	4605      	mov	r5, r0
    765c:	d1e9      	bne.n	7632 <__pow5mult+0x2a>
    765e:	4628      	mov	r0, r5
    7660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7664:	4642      	mov	r2, r8
    7666:	4641      	mov	r1, r8
    7668:	4630      	mov	r0, r6
    766a:	f7ff ff1f 	bl	74ac <__multiply>
    766e:	f8c8 0000 	str.w	r0, [r8]
    7672:	6007      	str	r7, [r0, #0]
    7674:	4680      	mov	r8, r0
    7676:	e7e0      	b.n	763a <__pow5mult+0x32>
    7678:	4605      	mov	r5, r0
    767a:	e7d8      	b.n	762e <__pow5mult+0x26>
    767c:	3b01      	subs	r3, #1
    767e:	4a0f      	ldr	r2, [pc, #60]	; (76bc <__pow5mult+0xb4>)
    7680:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    7684:	2300      	movs	r3, #0
    7686:	f7ff fde9 	bl	725c <__multadd>
    768a:	4605      	mov	r5, r0
    768c:	e7c4      	b.n	7618 <__pow5mult+0x10>
    768e:	2101      	movs	r1, #1
    7690:	4630      	mov	r0, r6
    7692:	f7ff fdb3 	bl	71fc <_Balloc>
    7696:	4680      	mov	r8, r0
    7698:	b140      	cbz	r0, 76ac <__pow5mult+0xa4>
    769a:	2301      	movs	r3, #1
    769c:	f240 2271 	movw	r2, #625	; 0x271
    76a0:	e9c0 3204 	strd	r3, r2, [r0, #16]
    76a4:	2300      	movs	r3, #0
    76a6:	6430      	str	r0, [r6, #64]	; 0x40
    76a8:	6003      	str	r3, [r0, #0]
    76aa:	e7bc      	b.n	7626 <__pow5mult+0x1e>
    76ac:	4b04      	ldr	r3, [pc, #16]	; (76c0 <__pow5mult+0xb8>)
    76ae:	4805      	ldr	r0, [pc, #20]	; (76c4 <__pow5mult+0xbc>)
    76b0:	4642      	mov	r2, r8
    76b2:	f240 1145 	movw	r1, #325	; 0x145
    76b6:	f003 ff07 	bl	b4c8 <__assert_func>
    76ba:	bf00      	nop
    76bc:	20007900 	.word	0x20007900
    76c0:	20000550 	.word	0x20000550
    76c4:	200006c8 	.word	0x200006c8

000076c8 <__lshift>:
    76c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    76cc:	460d      	mov	r5, r1
    76ce:	4614      	mov	r4, r2
    76d0:	692f      	ldr	r7, [r5, #16]
    76d2:	68ab      	ldr	r3, [r5, #8]
    76d4:	6849      	ldr	r1, [r1, #4]
    76d6:	eb07 1762 	add.w	r7, r7, r2, asr #5
    76da:	1c7e      	adds	r6, r7, #1
    76dc:	429e      	cmp	r6, r3
    76de:	4680      	mov	r8, r0
    76e0:	ea4f 1962 	mov.w	r9, r2, asr #5
    76e4:	dd04      	ble.n	76f0 <__lshift+0x28>
    76e6:	005b      	lsls	r3, r3, #1
    76e8:	429e      	cmp	r6, r3
    76ea:	f101 0101 	add.w	r1, r1, #1
    76ee:	dcfa      	bgt.n	76e6 <__lshift+0x1e>
    76f0:	4640      	mov	r0, r8
    76f2:	f7ff fd83 	bl	71fc <_Balloc>
    76f6:	4684      	mov	ip, r0
    76f8:	2800      	cmp	r0, #0
    76fa:	d052      	beq.n	77a2 <__lshift+0xda>
    76fc:	f1b9 0f00 	cmp.w	r9, #0
    7700:	f100 0214 	add.w	r2, r0, #20
    7704:	dd0e      	ble.n	7724 <__lshift+0x5c>
    7706:	f109 0105 	add.w	r1, r9, #5
    770a:	ea4f 0e81 	mov.w	lr, r1, lsl #2
    770e:	4613      	mov	r3, r2
    7710:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    7714:	2000      	movs	r0, #0
    7716:	f843 0b04 	str.w	r0, [r3], #4
    771a:	428b      	cmp	r3, r1
    771c:	d1fb      	bne.n	7716 <__lshift+0x4e>
    771e:	f1ae 0314 	sub.w	r3, lr, #20
    7722:	441a      	add	r2, r3
    7724:	6929      	ldr	r1, [r5, #16]
    7726:	f105 0314 	add.w	r3, r5, #20
    772a:	f014 0e1f 	ands.w	lr, r4, #31
    772e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    7732:	d02e      	beq.n	7792 <__lshift+0xca>
    7734:	f1ce 0920 	rsb	r9, lr, #32
    7738:	4610      	mov	r0, r2
    773a:	f04f 0a00 	mov.w	sl, #0
    773e:	681c      	ldr	r4, [r3, #0]
    7740:	fa04 f40e 	lsl.w	r4, r4, lr
    7744:	ea44 040a 	orr.w	r4, r4, sl
    7748:	f840 4b04 	str.w	r4, [r0], #4
    774c:	f853 4b04 	ldr.w	r4, [r3], #4
    7750:	4299      	cmp	r1, r3
    7752:	fa24 fa09 	lsr.w	sl, r4, r9
    7756:	d8f2      	bhi.n	773e <__lshift+0x76>
    7758:	1b4b      	subs	r3, r1, r5
    775a:	3b15      	subs	r3, #21
    775c:	f023 0303 	bic.w	r3, r3, #3
    7760:	3304      	adds	r3, #4
    7762:	f105 0015 	add.w	r0, r5, #21
    7766:	4281      	cmp	r1, r0
    7768:	bf38      	it	cc
    776a:	2304      	movcc	r3, #4
    776c:	f1ba 0f00 	cmp.w	sl, #0
    7770:	bf18      	it	ne
    7772:	4637      	movne	r7, r6
    7774:	f842 a003 	str.w	sl, [r2, r3]
    7778:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    777c:	686a      	ldr	r2, [r5, #4]
    777e:	f8cc 7010 	str.w	r7, [ip, #16]
    7782:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    7786:	6029      	str	r1, [r5, #0]
    7788:	4660      	mov	r0, ip
    778a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
    778e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7792:	3a04      	subs	r2, #4
    7794:	f853 0b04 	ldr.w	r0, [r3], #4
    7798:	f842 0f04 	str.w	r0, [r2, #4]!
    779c:	4299      	cmp	r1, r3
    779e:	d8f9      	bhi.n	7794 <__lshift+0xcc>
    77a0:	e7ea      	b.n	7778 <__lshift+0xb0>
    77a2:	4b03      	ldr	r3, [pc, #12]	; (77b0 <__lshift+0xe8>)
    77a4:	4803      	ldr	r0, [pc, #12]	; (77b4 <__lshift+0xec>)
    77a6:	4662      	mov	r2, ip
    77a8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
    77ac:	f003 fe8c 	bl	b4c8 <__assert_func>
    77b0:	20000550 	.word	0x20000550
    77b4:	200006c8 	.word	0x200006c8

000077b8 <__mcmp>:
    77b8:	690b      	ldr	r3, [r1, #16]
    77ba:	4684      	mov	ip, r0
    77bc:	6900      	ldr	r0, [r0, #16]
    77be:	1ac0      	subs	r0, r0, r3
    77c0:	d116      	bne.n	77f0 <__mcmp+0x38>
    77c2:	f10c 0c14 	add.w	ip, ip, #20
    77c6:	3114      	adds	r1, #20
    77c8:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
    77cc:	b410      	push	{r4}
    77ce:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    77d2:	e001      	b.n	77d8 <__mcmp+0x20>
    77d4:	4594      	cmp	ip, r2
    77d6:	d208      	bcs.n	77ea <__mcmp+0x32>
    77d8:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    77dc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    77e0:	428c      	cmp	r4, r1
    77e2:	d0f7      	beq.n	77d4 <__mcmp+0x1c>
    77e4:	d205      	bcs.n	77f2 <__mcmp+0x3a>
    77e6:	f04f 30ff 	mov.w	r0, #4294967295
    77ea:	f85d 4b04 	ldr.w	r4, [sp], #4
    77ee:	4770      	bx	lr
    77f0:	4770      	bx	lr
    77f2:	2001      	movs	r0, #1
    77f4:	f85d 4b04 	ldr.w	r4, [sp], #4
    77f8:	4770      	bx	lr
    77fa:	bf00      	nop

000077fc <__mdiff>:
    77fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7800:	690f      	ldr	r7, [r1, #16]
    7802:	6913      	ldr	r3, [r2, #16]
    7804:	1aff      	subs	r7, r7, r3
    7806:	2f00      	cmp	r7, #0
    7808:	460e      	mov	r6, r1
    780a:	4690      	mov	r8, r2
    780c:	d17f      	bne.n	790e <__mdiff+0x112>
    780e:	f101 0514 	add.w	r5, r1, #20
    7812:	3214      	adds	r2, #20
    7814:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    7818:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    781c:	e001      	b.n	7822 <__mdiff+0x26>
    781e:	429d      	cmp	r5, r3
    7820:	d278      	bcs.n	7914 <__mdiff+0x118>
    7822:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    7826:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    782a:	42a1      	cmp	r1, r4
    782c:	d0f7      	beq.n	781e <__mdiff+0x22>
    782e:	d369      	bcc.n	7904 <__mdiff+0x108>
    7830:	6871      	ldr	r1, [r6, #4]
    7832:	f7ff fce3 	bl	71fc <_Balloc>
    7836:	4681      	mov	r9, r0
    7838:	2800      	cmp	r0, #0
    783a:	d077      	beq.n	792c <__mdiff+0x130>
    783c:	6935      	ldr	r5, [r6, #16]
    783e:	f8d8 2010 	ldr.w	r2, [r8, #16]
    7842:	60c7      	str	r7, [r0, #12]
    7844:	f108 0e14 	add.w	lr, r8, #20
    7848:	f106 0014 	add.w	r0, r6, #20
    784c:	f109 0a14 	add.w	sl, r9, #20
    7850:	f106 0110 	add.w	r1, r6, #16
    7854:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    7858:	eb00 0785 	add.w	r7, r0, r5, lsl #2
    785c:	4656      	mov	r6, sl
    785e:	f04f 0c00 	mov.w	ip, #0
    7862:	f85e 4b04 	ldr.w	r4, [lr], #4
    7866:	f851 bf04 	ldr.w	fp, [r1, #4]!
    786a:	b2a3      	uxth	r3, r4
    786c:	fa1c fc8b 	uxtah	ip, ip, fp
    7870:	ebac 0303 	sub.w	r3, ip, r3
    7874:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    7878:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
    787c:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
    7880:	b29b      	uxth	r3, r3
    7882:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    7886:	4572      	cmp	r2, lr
    7888:	f846 3b04 	str.w	r3, [r6], #4
    788c:	ea4f 4c2c 	mov.w	ip, ip, asr #16
    7890:	d8e7      	bhi.n	7862 <__mdiff+0x66>
    7892:	eba2 0108 	sub.w	r1, r2, r8
    7896:	3915      	subs	r1, #21
    7898:	f108 0815 	add.w	r8, r8, #21
    789c:	4542      	cmp	r2, r8
    789e:	f021 0403 	bic.w	r4, r1, #3
    78a2:	f104 0404 	add.w	r4, r4, #4
    78a6:	bf38      	it	cc
    78a8:	2404      	movcc	r4, #4
    78aa:	4420      	add	r0, r4
    78ac:	f021 0203 	bic.w	r2, r1, #3
    78b0:	bf38      	it	cc
    78b2:	2200      	movcc	r2, #0
    78b4:	4287      	cmp	r7, r0
    78b6:	4452      	add	r2, sl
    78b8:	4454      	add	r4, sl
    78ba:	d918      	bls.n	78ee <__mdiff+0xf2>
    78bc:	4626      	mov	r6, r4
    78be:	4601      	mov	r1, r0
    78c0:	f851 3b04 	ldr.w	r3, [r1], #4
    78c4:	fa1c fc83 	uxtah	ip, ip, r3
    78c8:	ea4f 422c 	mov.w	r2, ip, asr #16
    78cc:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    78d0:	fa1f fc8c 	uxth.w	ip, ip
    78d4:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
    78d8:	428f      	cmp	r7, r1
    78da:	f846 3b04 	str.w	r3, [r6], #4
    78de:	ea4f 4c22 	mov.w	ip, r2, asr #16
    78e2:	d8ed      	bhi.n	78c0 <__mdiff+0xc4>
    78e4:	3f01      	subs	r7, #1
    78e6:	1a3f      	subs	r7, r7, r0
    78e8:	f027 0703 	bic.w	r7, r7, #3
    78ec:	19e2      	adds	r2, r4, r7
    78ee:	b923      	cbnz	r3, 78fa <__mdiff+0xfe>
    78f0:	f852 3d04 	ldr.w	r3, [r2, #-4]!
    78f4:	3d01      	subs	r5, #1
    78f6:	2b00      	cmp	r3, #0
    78f8:	d0fa      	beq.n	78f0 <__mdiff+0xf4>
    78fa:	f8c9 5010 	str.w	r5, [r9, #16]
    78fe:	4648      	mov	r0, r9
    7900:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7904:	4633      	mov	r3, r6
    7906:	2701      	movs	r7, #1
    7908:	4646      	mov	r6, r8
    790a:	4698      	mov	r8, r3
    790c:	e790      	b.n	7830 <__mdiff+0x34>
    790e:	dbf9      	blt.n	7904 <__mdiff+0x108>
    7910:	2700      	movs	r7, #0
    7912:	e78d      	b.n	7830 <__mdiff+0x34>
    7914:	2100      	movs	r1, #0
    7916:	f7ff fc71 	bl	71fc <_Balloc>
    791a:	4681      	mov	r9, r0
    791c:	b168      	cbz	r0, 793a <__mdiff+0x13e>
    791e:	2201      	movs	r2, #1
    7920:	2300      	movs	r3, #0
    7922:	e9c9 2304 	strd	r2, r3, [r9, #16]
    7926:	4648      	mov	r0, r9
    7928:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    792c:	4b06      	ldr	r3, [pc, #24]	; (7948 <__mdiff+0x14c>)
    792e:	4807      	ldr	r0, [pc, #28]	; (794c <__mdiff+0x150>)
    7930:	464a      	mov	r2, r9
    7932:	f240 2145 	movw	r1, #581	; 0x245
    7936:	f003 fdc7 	bl	b4c8 <__assert_func>
    793a:	4b03      	ldr	r3, [pc, #12]	; (7948 <__mdiff+0x14c>)
    793c:	4803      	ldr	r0, [pc, #12]	; (794c <__mdiff+0x150>)
    793e:	464a      	mov	r2, r9
    7940:	f240 2137 	movw	r1, #567	; 0x237
    7944:	f003 fdc0 	bl	b4c8 <__assert_func>
    7948:	20000550 	.word	0x20000550
    794c:	200006c8 	.word	0x200006c8

00007950 <__ulp>:
    7950:	b082      	sub	sp, #8
    7952:	ed8d 0b00 	vstr	d0, [sp]
    7956:	4b16      	ldr	r3, [pc, #88]	; (79b0 <__ulp+0x60>)
    7958:	9a01      	ldr	r2, [sp, #4]
    795a:	4013      	ands	r3, r2
    795c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
    7960:	2b00      	cmp	r3, #0
    7962:	dd06      	ble.n	7972 <__ulp+0x22>
    7964:	2200      	movs	r2, #0
    7966:	4619      	mov	r1, r3
    7968:	4610      	mov	r0, r2
    796a:	ec41 0b10 	vmov	d0, r0, r1
    796e:	b002      	add	sp, #8
    7970:	4770      	bx	lr
    7972:	425b      	negs	r3, r3
    7974:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
    7978:	ea4f 5223 	mov.w	r2, r3, asr #20
    797c:	da09      	bge.n	7992 <__ulp+0x42>
    797e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
    7982:	4113      	asrs	r3, r2
    7984:	2200      	movs	r2, #0
    7986:	4619      	mov	r1, r3
    7988:	4610      	mov	r0, r2
    798a:	ec41 0b10 	vmov	d0, r0, r1
    798e:	b002      	add	sp, #8
    7990:	4770      	bx	lr
    7992:	f1a2 0314 	sub.w	r3, r2, #20
    7996:	2b1e      	cmp	r3, #30
    7998:	bfda      	itte	le
    799a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
    799e:	40da      	lsrle	r2, r3
    79a0:	2201      	movgt	r2, #1
    79a2:	2300      	movs	r3, #0
    79a4:	4619      	mov	r1, r3
    79a6:	4610      	mov	r0, r2
    79a8:	ec41 0b10 	vmov	d0, r0, r1
    79ac:	b002      	add	sp, #8
    79ae:	4770      	bx	lr
    79b0:	7ff00000 	.word	0x7ff00000

000079b4 <__b2d>:
    79b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    79b6:	6904      	ldr	r4, [r0, #16]
    79b8:	f100 0614 	add.w	r6, r0, #20
    79bc:	eb06 0484 	add.w	r4, r6, r4, lsl #2
    79c0:	1f27      	subs	r7, r4, #4
    79c2:	f854 5c04 	ldr.w	r5, [r4, #-4]
    79c6:	4628      	mov	r0, r5
    79c8:	f7ff fcf2 	bl	73b0 <__hi0bits>
    79cc:	f1c0 0320 	rsb	r3, r0, #32
    79d0:	280a      	cmp	r0, #10
    79d2:	600b      	str	r3, [r1, #0]
    79d4:	dd1b      	ble.n	7a0e <__b2d+0x5a>
    79d6:	42be      	cmp	r6, r7
    79d8:	d20b      	bcs.n	79f2 <__b2d+0x3e>
    79da:	380b      	subs	r0, #11
    79dc:	f854 1c08 	ldr.w	r1, [r4, #-8]
    79e0:	d12e      	bne.n	7a40 <__b2d+0x8c>
    79e2:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
    79e6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    79ea:	460a      	mov	r2, r1
    79ec:	ec43 2b10 	vmov	d0, r2, r3
    79f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    79f2:	f1b0 010b 	subs.w	r1, r0, #11
    79f6:	d0f4      	beq.n	79e2 <__b2d+0x2e>
    79f8:	fa05 f101 	lsl.w	r1, r5, r1
    79fc:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
    7a00:	2100      	movs	r1, #0
    7a02:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    7a06:	460a      	mov	r2, r1
    7a08:	ec43 2b10 	vmov	d0, r2, r3
    7a0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7a0e:	f1c0 0c0b 	rsb	ip, r0, #11
    7a12:	fa25 f10c 	lsr.w	r1, r5, ip
    7a16:	42be      	cmp	r6, r7
    7a18:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
    7a1c:	bf38      	it	cc
    7a1e:	f854 1c08 	ldrcc.w	r1, [r4, #-8]
    7a22:	f100 0015 	add.w	r0, r0, #21
    7a26:	bf34      	ite	cc
    7a28:	fa21 f10c 	lsrcc.w	r1, r1, ip
    7a2c:	2100      	movcs	r1, #0
    7a2e:	fa05 f000 	lsl.w	r0, r5, r0
    7a32:	4301      	orrs	r1, r0
    7a34:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    7a38:	460a      	mov	r2, r1
    7a3a:	ec43 2b10 	vmov	d0, r2, r3
    7a3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7a40:	f1c0 0c20 	rsb	ip, r0, #32
    7a44:	4085      	lsls	r5, r0
    7a46:	fa21 f30c 	lsr.w	r3, r1, ip
    7a4a:	ea45 0703 	orr.w	r7, r5, r3
    7a4e:	f1a4 0508 	sub.w	r5, r4, #8
    7a52:	42ae      	cmp	r6, r5
    7a54:	fa01 f100 	lsl.w	r1, r1, r0
    7a58:	bf3c      	itt	cc
    7a5a:	f854 0c0c 	ldrcc.w	r0, [r4, #-12]
    7a5e:	fa20 f00c 	lsrcc.w	r0, r0, ip
    7a62:	f047 537f 	orr.w	r3, r7, #1069547520	; 0x3fc00000
    7a66:	bf38      	it	cc
    7a68:	4301      	orrcc	r1, r0
    7a6a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    7a6e:	460a      	mov	r2, r1
    7a70:	ec43 2b10 	vmov	d0, r2, r3
    7a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7a76:	bf00      	nop

00007a78 <__d2b>:
    7a78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7a7c:	4688      	mov	r8, r1
    7a7e:	b083      	sub	sp, #12
    7a80:	2101      	movs	r1, #1
    7a82:	ec57 6b10 	vmov	r6, r7, d0
    7a86:	4615      	mov	r5, r2
    7a88:	f7ff fbb8 	bl	71fc <_Balloc>
    7a8c:	4604      	mov	r4, r0
    7a8e:	2800      	cmp	r0, #0
    7a90:	d051      	beq.n	7b36 <__d2b+0xbe>
    7a92:	f3c7 590a 	ubfx	r9, r7, #20, #11
    7a96:	f3c7 0313 	ubfx	r3, r7, #0, #20
    7a9a:	f1b9 0f00 	cmp.w	r9, #0
    7a9e:	d001      	beq.n	7aa4 <__d2b+0x2c>
    7aa0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    7aa4:	2e00      	cmp	r6, #0
    7aa6:	9301      	str	r3, [sp, #4]
    7aa8:	d118      	bne.n	7adc <__d2b+0x64>
    7aaa:	a801      	add	r0, sp, #4
    7aac:	f7ff fca0 	bl	73f0 <__lo0bits>
    7ab0:	9a01      	ldr	r2, [sp, #4]
    7ab2:	6162      	str	r2, [r4, #20]
    7ab4:	2201      	movs	r2, #1
    7ab6:	f100 0320 	add.w	r3, r0, #32
    7aba:	6122      	str	r2, [r4, #16]
    7abc:	f1b9 0f00 	cmp.w	r9, #0
    7ac0:	d025      	beq.n	7b0e <__d2b+0x96>
    7ac2:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
    7ac6:	eb09 0203 	add.w	r2, r9, r3
    7aca:	4620      	mov	r0, r4
    7acc:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
    7ad0:	f8c8 2000 	str.w	r2, [r8]
    7ad4:	602b      	str	r3, [r5, #0]
    7ad6:	b003      	add	sp, #12
    7ad8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    7adc:	4668      	mov	r0, sp
    7ade:	9600      	str	r6, [sp, #0]
    7ae0:	f7ff fc86 	bl	73f0 <__lo0bits>
    7ae4:	4603      	mov	r3, r0
    7ae6:	b310      	cbz	r0, 7b2e <__d2b+0xb6>
    7ae8:	e9dd 0200 	ldrd	r0, r2, [sp]
    7aec:	f1c3 0120 	rsb	r1, r3, #32
    7af0:	fa02 f101 	lsl.w	r1, r2, r1
    7af4:	4301      	orrs	r1, r0
    7af6:	40da      	lsrs	r2, r3
    7af8:	6161      	str	r1, [r4, #20]
    7afa:	9201      	str	r2, [sp, #4]
    7afc:	2a00      	cmp	r2, #0
    7afe:	61a2      	str	r2, [r4, #24]
    7b00:	bf14      	ite	ne
    7b02:	2202      	movne	r2, #2
    7b04:	2201      	moveq	r2, #1
    7b06:	6122      	str	r2, [r4, #16]
    7b08:	f1b9 0f00 	cmp.w	r9, #0
    7b0c:	d1d9      	bne.n	7ac2 <__d2b+0x4a>
    7b0e:	f2a3 4332 	subw	r3, r3, #1074	; 0x432
    7b12:	f8c8 3000 	str.w	r3, [r8]
    7b16:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    7b1a:	6918      	ldr	r0, [r3, #16]
    7b1c:	f7ff fc48 	bl	73b0 <__hi0bits>
    7b20:	ebc0 1342 	rsb	r3, r0, r2, lsl #5
    7b24:	4620      	mov	r0, r4
    7b26:	602b      	str	r3, [r5, #0]
    7b28:	b003      	add	sp, #12
    7b2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    7b2e:	9a00      	ldr	r2, [sp, #0]
    7b30:	6162      	str	r2, [r4, #20]
    7b32:	9a01      	ldr	r2, [sp, #4]
    7b34:	e7e2      	b.n	7afc <__d2b+0x84>
    7b36:	4b03      	ldr	r3, [pc, #12]	; (7b44 <__d2b+0xcc>)
    7b38:	4803      	ldr	r0, [pc, #12]	; (7b48 <__d2b+0xd0>)
    7b3a:	4622      	mov	r2, r4
    7b3c:	f240 310f 	movw	r1, #783	; 0x30f
    7b40:	f003 fcc2 	bl	b4c8 <__assert_func>
    7b44:	20000550 	.word	0x20000550
    7b48:	200006c8 	.word	0x200006c8

00007b4c <__ratio>:
    7b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    7b4e:	b083      	sub	sp, #12
    7b50:	460e      	mov	r6, r1
    7b52:	4669      	mov	r1, sp
    7b54:	4607      	mov	r7, r0
    7b56:	f7ff ff2d 	bl	79b4 <__b2d>
    7b5a:	a901      	add	r1, sp, #4
    7b5c:	4630      	mov	r0, r6
    7b5e:	ec55 4b10 	vmov	r4, r5, d0
    7b62:	eeb0 7b40 	vmov.f64	d7, d0
    7b66:	f7ff ff25 	bl	79b4 <__b2d>
    7b6a:	6933      	ldr	r3, [r6, #16]
    7b6c:	693a      	ldr	r2, [r7, #16]
    7b6e:	1ad2      	subs	r2, r2, r3
    7b70:	e9dd 3100 	ldrd	r3, r1, [sp]
    7b74:	1a5b      	subs	r3, r3, r1
    7b76:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    7b7a:	2b00      	cmp	r3, #0
    7b7c:	dd09      	ble.n	7b92 <__ratio+0x46>
    7b7e:	ee17 2a90 	vmov	r2, s15
    7b82:	eb02 5503 	add.w	r5, r2, r3, lsl #20
    7b86:	ec45 4b17 	vmov	d7, r4, r5
    7b8a:	ee87 0b00 	vdiv.f64	d0, d7, d0
    7b8e:	b003      	add	sp, #12
    7b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7b92:	ee10 2a90 	vmov	r2, s1
    7b96:	ec51 0b10 	vmov	r0, r1, d0
    7b9a:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
    7b9e:	eb02 5103 	add.w	r1, r2, r3, lsl #20
    7ba2:	ec41 0b10 	vmov	d0, r0, r1
    7ba6:	ee87 0b00 	vdiv.f64	d0, d7, d0
    7baa:	b003      	add	sp, #12
    7bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7bae:	bf00      	nop

00007bb0 <__copybits>:
    7bb0:	3901      	subs	r1, #1
    7bb2:	1149      	asrs	r1, r1, #5
    7bb4:	f101 0c01 	add.w	ip, r1, #1
    7bb8:	6911      	ldr	r1, [r2, #16]
    7bba:	f102 0314 	add.w	r3, r2, #20
    7bbe:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    7bc2:	428b      	cmp	r3, r1
    7bc4:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
    7bc8:	d217      	bcs.n	7bfa <__copybits+0x4a>
    7bca:	b510      	push	{r4, lr}
    7bcc:	f1a0 0e04 	sub.w	lr, r0, #4
    7bd0:	f853 4b04 	ldr.w	r4, [r3], #4
    7bd4:	f84e 4f04 	str.w	r4, [lr, #4]!
    7bd8:	4299      	cmp	r1, r3
    7bda:	d8f9      	bhi.n	7bd0 <__copybits+0x20>
    7bdc:	1a8a      	subs	r2, r1, r2
    7bde:	f1a2 0315 	sub.w	r3, r2, #21
    7be2:	f023 0303 	bic.w	r3, r3, #3
    7be6:	3304      	adds	r3, #4
    7be8:	4418      	add	r0, r3
    7bea:	4584      	cmp	ip, r0
    7bec:	d904      	bls.n	7bf8 <__copybits+0x48>
    7bee:	2300      	movs	r3, #0
    7bf0:	f840 3b04 	str.w	r3, [r0], #4
    7bf4:	4584      	cmp	ip, r0
    7bf6:	d8fb      	bhi.n	7bf0 <__copybits+0x40>
    7bf8:	bd10      	pop	{r4, pc}
    7bfa:	4584      	cmp	ip, r0
    7bfc:	d905      	bls.n	7c0a <__copybits+0x5a>
    7bfe:	2300      	movs	r3, #0
    7c00:	f840 3b04 	str.w	r3, [r0], #4
    7c04:	4584      	cmp	ip, r0
    7c06:	d8fb      	bhi.n	7c00 <__copybits+0x50>
    7c08:	4770      	bx	lr
    7c0a:	4770      	bx	lr

00007c0c <__any_on>:
    7c0c:	6903      	ldr	r3, [r0, #16]
    7c0e:	114a      	asrs	r2, r1, #5
    7c10:	4293      	cmp	r3, r2
    7c12:	f100 0014 	add.w	r0, r0, #20
    7c16:	da09      	bge.n	7c2c <__any_on+0x20>
    7c18:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    7c1c:	e002      	b.n	7c24 <__any_on+0x18>
    7c1e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
    7c22:	b9c2      	cbnz	r2, 7c56 <__any_on+0x4a>
    7c24:	4283      	cmp	r3, r0
    7c26:	d8fa      	bhi.n	7c1e <__any_on+0x12>
    7c28:	2000      	movs	r0, #0
    7c2a:	4770      	bx	lr
    7c2c:	dd10      	ble.n	7c50 <__any_on+0x44>
    7c2e:	f011 011f 	ands.w	r1, r1, #31
    7c32:	d00d      	beq.n	7c50 <__any_on+0x44>
    7c34:	b410      	push	{r4}
    7c36:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
    7c3a:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    7c3e:	fa24 f201 	lsr.w	r2, r4, r1
    7c42:	408a      	lsls	r2, r1
    7c44:	4294      	cmp	r4, r2
    7c46:	d00c      	beq.n	7c62 <__any_on+0x56>
    7c48:	2001      	movs	r0, #1
    7c4a:	f85d 4b04 	ldr.w	r4, [sp], #4
    7c4e:	4770      	bx	lr
    7c50:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    7c54:	e7e6      	b.n	7c24 <__any_on+0x18>
    7c56:	2001      	movs	r0, #1
    7c58:	4770      	bx	lr
    7c5a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
    7c5e:	2a00      	cmp	r2, #0
    7c60:	d1f2      	bne.n	7c48 <__any_on+0x3c>
    7c62:	4283      	cmp	r3, r0
    7c64:	d8f9      	bhi.n	7c5a <__any_on+0x4e>
    7c66:	2000      	movs	r0, #0
    7c68:	f85d 4b04 	ldr.w	r4, [sp], #4
    7c6c:	4770      	bx	lr
    7c6e:	bf00      	nop

00007c70 <__ascii_wctomb>:
    7c70:	b149      	cbz	r1, 7c86 <__ascii_wctomb+0x16>
    7c72:	2aff      	cmp	r2, #255	; 0xff
    7c74:	d802      	bhi.n	7c7c <__ascii_wctomb+0xc>
    7c76:	700a      	strb	r2, [r1, #0]
    7c78:	2001      	movs	r0, #1
    7c7a:	4770      	bx	lr
    7c7c:	238a      	movs	r3, #138	; 0x8a
    7c7e:	6003      	str	r3, [r0, #0]
    7c80:	f04f 30ff 	mov.w	r0, #4294967295
    7c84:	4770      	bx	lr
    7c86:	4608      	mov	r0, r1
    7c88:	4770      	bx	lr
    7c8a:	bf00      	nop
    7c8c:	0000      	movs	r0, r0
	...

00007c90 <_svfprintf_r>:
    7c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7c94:	ed2d 8b08 	vpush	{d8-d11}
    7c98:	b0d1      	sub	sp, #324	; 0x144
    7c9a:	460c      	mov	r4, r1
    7c9c:	ee0b 1a10 	vmov	s22, r1
    7ca0:	4690      	mov	r8, r2
    7ca2:	9308      	str	r3, [sp, #32]
    7ca4:	4683      	mov	fp, r0
    7ca6:	f003 fb79 	bl	b39c <_localeconv_r>
    7caa:	6803      	ldr	r3, [r0, #0]
    7cac:	9312      	str	r3, [sp, #72]	; 0x48
    7cae:	4618      	mov	r0, r3
    7cb0:	f7fe fc66 	bl	6580 <strlen>
    7cb4:	af20      	add	r7, sp, #128	; 0x80
    7cb6:	9010      	str	r0, [sp, #64]	; 0x40
    7cb8:	2208      	movs	r2, #8
    7cba:	2100      	movs	r1, #0
    7cbc:	4638      	mov	r0, r7
    7cbe:	f7fe f8ab 	bl	5e18 <memset>
    7cc2:	89a3      	ldrh	r3, [r4, #12]
    7cc4:	061b      	lsls	r3, r3, #24
    7cc6:	d503      	bpl.n	7cd0 <_svfprintf_r+0x40>
    7cc8:	6923      	ldr	r3, [r4, #16]
    7cca:	2b00      	cmp	r3, #0
    7ccc:	f000 8755 	beq.w	8b7a <_svfprintf_r+0xeea>
    7cd0:	2300      	movs	r3, #0
    7cd2:	ed9f 8b83 	vldr	d8, [pc, #524]	; 7ee0 <_svfprintf_r+0x250>
    7cd6:	ed9f 9b84 	vldr	d9, [pc, #528]	; 7ee8 <_svfprintf_r+0x258>
    7cda:	e9cd 3325 	strd	r3, r3, [sp, #148]	; 0x94
    7cde:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
    7ce2:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
    7ce6:	aa27      	add	r2, sp, #156	; 0x9c
    7ce8:	930e      	str	r3, [sp, #56]	; 0x38
    7cea:	9224      	str	r2, [sp, #144]	; 0x90
    7cec:	4692      	mov	sl, r2
    7cee:	9311      	str	r3, [sp, #68]	; 0x44
    7cf0:	9304      	str	r3, [sp, #16]
    7cf2:	4644      	mov	r4, r8
    7cf4:	46a1      	mov	r9, r4
    7cf6:	4b7e      	ldr	r3, [pc, #504]	; (7ef0 <_svfprintf_r+0x260>)
    7cf8:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    7cfc:	f7fe f9bc 	bl	6078 <__locale_mb_cur_max>
    7d00:	464a      	mov	r2, r9
    7d02:	4603      	mov	r3, r0
    7d04:	a91c      	add	r1, sp, #112	; 0x70
    7d06:	9700      	str	r7, [sp, #0]
    7d08:	4658      	mov	r0, fp
    7d0a:	47a8      	blx	r5
    7d0c:	2800      	cmp	r0, #0
    7d0e:	f000 80b0 	beq.w	7e72 <_svfprintf_r+0x1e2>
    7d12:	f2c0 80a6 	blt.w	7e62 <_svfprintf_r+0x1d2>
    7d16:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    7d18:	2a25      	cmp	r2, #37	; 0x25
    7d1a:	4603      	mov	r3, r0
    7d1c:	d001      	beq.n	7d22 <_svfprintf_r+0x92>
    7d1e:	4499      	add	r9, r3
    7d20:	e7e9      	b.n	7cf6 <_svfprintf_r+0x66>
    7d22:	ebb9 0504 	subs.w	r5, r9, r4
    7d26:	4606      	mov	r6, r0
    7d28:	f040 80a7 	bne.w	7e7a <_svfprintf_r+0x1ea>
    7d2c:	2300      	movs	r3, #0
    7d2e:	f04f 32ff 	mov.w	r2, #4294967295
    7d32:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    7d36:	4698      	mov	r8, r3
    7d38:	9306      	str	r3, [sp, #24]
    7d3a:	f109 0901 	add.w	r9, r9, #1
    7d3e:	f899 3000 	ldrb.w	r3, [r9]
    7d42:	9203      	str	r2, [sp, #12]
    7d44:	252b      	movs	r5, #43	; 0x2b
    7d46:	2620      	movs	r6, #32
    7d48:	f109 0901 	add.w	r9, r9, #1
    7d4c:	f1a3 0220 	sub.w	r2, r3, #32
    7d50:	2a5a      	cmp	r2, #90	; 0x5a
    7d52:	f200 80cf 	bhi.w	7ef4 <_svfprintf_r+0x264>
    7d56:	e8df f012 	tbh	[pc, r2, lsl #1]
    7d5a:	02e8      	.short	0x02e8
    7d5c:	00cd00cd 	.word	0x00cd00cd
    7d60:	00cd02e3 	.word	0x00cd02e3
    7d64:	00cd00cd 	.word	0x00cd00cd
    7d68:	00cd006a 	.word	0x00cd006a
    7d6c:	020500cd 	.word	0x020500cd
    7d70:	00cd0284 	.word	0x00cd0284
    7d74:	02c90210 	.word	0x02c90210
    7d78:	02bd00cd 	.word	0x02bd00cd
    7d7c:	005b005b 	.word	0x005b005b
    7d80:	005b005b 	.word	0x005b005b
    7d84:	005b005b 	.word	0x005b005b
    7d88:	005b005b 	.word	0x005b005b
    7d8c:	00cd005b 	.word	0x00cd005b
    7d90:	00cd00cd 	.word	0x00cd00cd
    7d94:	00cd00cd 	.word	0x00cd00cd
    7d98:	00cd00cd 	.word	0x00cd00cd
    7d9c:	00cd0153 	.word	0x00cd0153
    7da0:	021a0183 	.word	0x021a0183
    7da4:	01530153 	.word	0x01530153
    7da8:	00cd0153 	.word	0x00cd0153
    7dac:	00cd00cd 	.word	0x00cd00cd
    7db0:	021500cd 	.word	0x021500cd
    7db4:	00cd00cd 	.word	0x00cd00cd
    7db8:	00cd0296 	.word	0x00cd0296
    7dbc:	00cd00cd 	.word	0x00cd00cd
    7dc0:	00cd01ab 	.word	0x00cd01ab
    7dc4:	00cd02aa 	.word	0x00cd02aa
    7dc8:	06e300cd 	.word	0x06e300cd
    7dcc:	00cd00cd 	.word	0x00cd00cd
    7dd0:	00cd00cd 	.word	0x00cd00cd
    7dd4:	00cd00cd 	.word	0x00cd00cd
    7dd8:	00cd00cd 	.word	0x00cd00cd
    7ddc:	00cd0153 	.word	0x00cd0153
    7de0:	01de0183 	.word	0x01de0183
    7de4:	01530153 	.word	0x01530153
    7de8:	02770153 	.word	0x02770153
    7dec:	007f01de 	.word	0x007f01de
    7df0:	028900cd 	.word	0x028900cd
    7df4:	025f00cd 	.word	0x025f00cd
    7df8:	022f06e0 	.word	0x022f06e0
    7dfc:	00cd007f 	.word	0x00cd007f
    7e00:	007c01ab 	.word	0x007c01ab
    7e04:	00cd06b8 	.word	0x00cd06b8
    7e08:	06bd00cd 	.word	0x06bd00cd
    7e0c:	007c00cd 	.word	0x007c00cd
    7e10:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    7e14:	2100      	movs	r1, #0
    7e16:	f819 3b01 	ldrb.w	r3, [r9], #1
    7e1a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    7e1e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    7e22:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    7e26:	2a09      	cmp	r2, #9
    7e28:	d9f5      	bls.n	7e16 <_svfprintf_r+0x186>
    7e2a:	9106      	str	r1, [sp, #24]
    7e2c:	e78e      	b.n	7d4c <_svfprintf_r+0xbc>
    7e2e:	4658      	mov	r0, fp
    7e30:	f003 fab4 	bl	b39c <_localeconv_r>
    7e34:	6843      	ldr	r3, [r0, #4]
    7e36:	9315      	str	r3, [sp, #84]	; 0x54
    7e38:	4618      	mov	r0, r3
    7e3a:	f7fe fba1 	bl	6580 <strlen>
    7e3e:	9016      	str	r0, [sp, #88]	; 0x58
    7e40:	4658      	mov	r0, fp
    7e42:	f003 faab 	bl	b39c <_localeconv_r>
    7e46:	6883      	ldr	r3, [r0, #8]
    7e48:	9313      	str	r3, [sp, #76]	; 0x4c
    7e4a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    7e4c:	2b00      	cmp	r3, #0
    7e4e:	f040 862d 	bne.w	8aac <_svfprintf_r+0xe1c>
    7e52:	f899 3000 	ldrb.w	r3, [r9]
    7e56:	e777      	b.n	7d48 <_svfprintf_r+0xb8>
    7e58:	f899 3000 	ldrb.w	r3, [r9]
    7e5c:	f048 0820 	orr.w	r8, r8, #32
    7e60:	e772      	b.n	7d48 <_svfprintf_r+0xb8>
    7e62:	2208      	movs	r2, #8
    7e64:	2100      	movs	r1, #0
    7e66:	4638      	mov	r0, r7
    7e68:	f7fd ffd6 	bl	5e18 <memset>
    7e6c:	2301      	movs	r3, #1
    7e6e:	4499      	add	r9, r3
    7e70:	e741      	b.n	7cf6 <_svfprintf_r+0x66>
    7e72:	ebb9 0504 	subs.w	r5, r9, r4
    7e76:	4606      	mov	r6, r0
    7e78:	d011      	beq.n	7e9e <_svfprintf_r+0x20e>
    7e7a:	9b26      	ldr	r3, [sp, #152]	; 0x98
    7e7c:	442b      	add	r3, r5
    7e7e:	9326      	str	r3, [sp, #152]	; 0x98
    7e80:	9b25      	ldr	r3, [sp, #148]	; 0x94
    7e82:	3301      	adds	r3, #1
    7e84:	2b07      	cmp	r3, #7
    7e86:	e9ca 4500 	strd	r4, r5, [sl]
    7e8a:	9325      	str	r3, [sp, #148]	; 0x94
    7e8c:	dc1c      	bgt.n	7ec8 <_svfprintf_r+0x238>
    7e8e:	f10a 0a08 	add.w	sl, sl, #8
    7e92:	9b04      	ldr	r3, [sp, #16]
    7e94:	442b      	add	r3, r5
    7e96:	9304      	str	r3, [sp, #16]
    7e98:	2e00      	cmp	r6, #0
    7e9a:	f47f af47 	bne.w	7d2c <_svfprintf_r+0x9c>
    7e9e:	9b26      	ldr	r3, [sp, #152]	; 0x98
    7ea0:	2b00      	cmp	r3, #0
    7ea2:	f041 820b 	bne.w	92bc <_svfprintf_r+0x162c>
    7ea6:	ee1b 3a10 	vmov	r3, s22
    7eaa:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    7eae:	f013 0f40 	tst.w	r3, #64	; 0x40
    7eb2:	9b04      	ldr	r3, [sp, #16]
    7eb4:	bf18      	it	ne
    7eb6:	f04f 33ff 	movne.w	r3, #4294967295
    7eba:	9304      	str	r3, [sp, #16]
    7ebc:	9804      	ldr	r0, [sp, #16]
    7ebe:	b051      	add	sp, #324	; 0x144
    7ec0:	ecbd 8b08 	vpop	{d8-d11}
    7ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7ec8:	ee1b 1a10 	vmov	r1, s22
    7ecc:	aa24      	add	r2, sp, #144	; 0x90
    7ece:	4658      	mov	r0, fp
    7ed0:	f004 fdde 	bl	ca90 <__ssprint_r>
    7ed4:	2800      	cmp	r0, #0
    7ed6:	d1e6      	bne.n	7ea6 <_svfprintf_r+0x216>
    7ed8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    7edc:	e7d9      	b.n	7e92 <_svfprintf_r+0x202>
    7ede:	bf00      	nop
	...
    7ee8:	ffffffff 	.word	0xffffffff
    7eec:	7fefffff 	.word	0x7fefffff
    7ef0:	20007c70 	.word	0x20007c70
    7ef4:	930b      	str	r3, [sp, #44]	; 0x2c
    7ef6:	2b00      	cmp	r3, #0
    7ef8:	d0d1      	beq.n	7e9e <_svfprintf_r+0x20e>
    7efa:	2100      	movs	r1, #0
    7efc:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    7f00:	f88d 30dc 	strb.w	r3, [sp, #220]	; 0xdc
    7f04:	2301      	movs	r3, #1
    7f06:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    7f0a:	9302      	str	r3, [sp, #8]
    7f0c:	9107      	str	r1, [sp, #28]
    7f0e:	9305      	str	r3, [sp, #20]
    7f10:	9103      	str	r1, [sp, #12]
    7f12:	910f      	str	r1, [sp, #60]	; 0x3c
    7f14:	ac37      	add	r4, sp, #220	; 0xdc
    7f16:	f018 0302 	ands.w	r3, r8, #2
    7f1a:	9309      	str	r3, [sp, #36]	; 0x24
    7f1c:	d002      	beq.n	7f24 <_svfprintf_r+0x294>
    7f1e:	9b02      	ldr	r3, [sp, #8]
    7f20:	3302      	adds	r3, #2
    7f22:	9302      	str	r3, [sp, #8]
    7f24:	f018 0384 	ands.w	r3, r8, #132	; 0x84
    7f28:	930a      	str	r3, [sp, #40]	; 0x28
    7f2a:	d105      	bne.n	7f38 <_svfprintf_r+0x2a8>
    7f2c:	9b06      	ldr	r3, [sp, #24]
    7f2e:	9a02      	ldr	r2, [sp, #8]
    7f30:	1a9d      	subs	r5, r3, r2
    7f32:	2d00      	cmp	r5, #0
    7f34:	f300 8369 	bgt.w	860a <_svfprintf_r+0x97a>
    7f38:	9a26      	ldr	r2, [sp, #152]	; 0x98
    7f3a:	b189      	cbz	r1, 7f60 <_svfprintf_r+0x2d0>
    7f3c:	9925      	ldr	r1, [sp, #148]	; 0x94
    7f3e:	f10d 0067 	add.w	r0, sp, #103	; 0x67
    7f42:	3101      	adds	r1, #1
    7f44:	3201      	adds	r2, #1
    7f46:	f8ca 0000 	str.w	r0, [sl]
    7f4a:	2907      	cmp	r1, #7
    7f4c:	f04f 0001 	mov.w	r0, #1
    7f50:	9226      	str	r2, [sp, #152]	; 0x98
    7f52:	9125      	str	r1, [sp, #148]	; 0x94
    7f54:	f8ca 0004 	str.w	r0, [sl, #4]
    7f58:	f300 83a2 	bgt.w	86a0 <_svfprintf_r+0xa10>
    7f5c:	f10a 0a08 	add.w	sl, sl, #8
    7f60:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7f62:	b183      	cbz	r3, 7f86 <_svfprintf_r+0x2f6>
    7f64:	9b25      	ldr	r3, [sp, #148]	; 0x94
    7f66:	a91a      	add	r1, sp, #104	; 0x68
    7f68:	3301      	adds	r3, #1
    7f6a:	3202      	adds	r2, #2
    7f6c:	f8ca 1000 	str.w	r1, [sl]
    7f70:	2b07      	cmp	r3, #7
    7f72:	f04f 0102 	mov.w	r1, #2
    7f76:	9226      	str	r2, [sp, #152]	; 0x98
    7f78:	9325      	str	r3, [sp, #148]	; 0x94
    7f7a:	f8ca 1004 	str.w	r1, [sl, #4]
    7f7e:	f300 83a3 	bgt.w	86c8 <_svfprintf_r+0xa38>
    7f82:	f10a 0a08 	add.w	sl, sl, #8
    7f86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7f88:	2b80      	cmp	r3, #128	; 0x80
    7f8a:	f000 826c 	beq.w	8466 <_svfprintf_r+0x7d6>
    7f8e:	9b03      	ldr	r3, [sp, #12]
    7f90:	9905      	ldr	r1, [sp, #20]
    7f92:	1a5d      	subs	r5, r3, r1
    7f94:	2d00      	cmp	r5, #0
    7f96:	f300 82a5 	bgt.w	84e4 <_svfprintf_r+0x854>
    7f9a:	f418 7f80 	tst.w	r8, #256	; 0x100
    7f9e:	f040 820d 	bne.w	83bc <_svfprintf_r+0x72c>
    7fa2:	9b05      	ldr	r3, [sp, #20]
    7fa4:	f8ca 3004 	str.w	r3, [sl, #4]
    7fa8:	441a      	add	r2, r3
    7faa:	9b25      	ldr	r3, [sp, #148]	; 0x94
    7fac:	f8ca 4000 	str.w	r4, [sl]
    7fb0:	3301      	adds	r3, #1
    7fb2:	2b07      	cmp	r3, #7
    7fb4:	9226      	str	r2, [sp, #152]	; 0x98
    7fb6:	9325      	str	r3, [sp, #148]	; 0x94
    7fb8:	f300 831b 	bgt.w	85f2 <_svfprintf_r+0x962>
    7fbc:	f10a 0a08 	add.w	sl, sl, #8
    7fc0:	f018 0f04 	tst.w	r8, #4
    7fc4:	d005      	beq.n	7fd2 <_svfprintf_r+0x342>
    7fc6:	9b06      	ldr	r3, [sp, #24]
    7fc8:	9902      	ldr	r1, [sp, #8]
    7fca:	1a5c      	subs	r4, r3, r1
    7fcc:	2c00      	cmp	r4, #0
    7fce:	f300 8388 	bgt.w	86e2 <_svfprintf_r+0xa52>
    7fd2:	9b04      	ldr	r3, [sp, #16]
    7fd4:	9906      	ldr	r1, [sp, #24]
    7fd6:	9802      	ldr	r0, [sp, #8]
    7fd8:	4281      	cmp	r1, r0
    7fda:	bfac      	ite	ge
    7fdc:	185b      	addge	r3, r3, r1
    7fde:	181b      	addlt	r3, r3, r0
    7fe0:	9304      	str	r3, [sp, #16]
    7fe2:	2a00      	cmp	r2, #0
    7fe4:	f040 82b0 	bne.w	8548 <_svfprintf_r+0x8b8>
    7fe8:	2300      	movs	r3, #0
    7fea:	9325      	str	r3, [sp, #148]	; 0x94
    7fec:	9b07      	ldr	r3, [sp, #28]
    7fee:	b11b      	cbz	r3, 7ff8 <_svfprintf_r+0x368>
    7ff0:	9907      	ldr	r1, [sp, #28]
    7ff2:	4658      	mov	r0, fp
    7ff4:	f7fe fbd6 	bl	67a4 <_free_r>
    7ff8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    7ffc:	464c      	mov	r4, r9
    7ffe:	e679      	b.n	7cf4 <_svfprintf_r+0x64>
    8000:	930b      	str	r3, [sp, #44]	; 0x2c
    8002:	9b08      	ldr	r3, [sp, #32]
    8004:	3307      	adds	r3, #7
    8006:	f023 0307 	bic.w	r3, r3, #7
    800a:	ecb3 8b02 	vldmia	r3!, {d8}
    800e:	eeb0 7bc8 	vabs.f64	d7, d8
    8012:	eeb4 7b49 	vcmp.f64	d7, d9
    8016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    801a:	9308      	str	r3, [sp, #32]
    801c:	f340 84e9 	ble.w	89f2 <_svfprintf_r+0xd62>
    8020:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
    8024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8028:	f101 8059 	bmi.w	90de <_svfprintf_r+0x144e>
    802c:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    8030:	4cab      	ldr	r4, [pc, #684]	; (82e0 <_svfprintf_r+0x650>)
    8032:	4bac      	ldr	r3, [pc, #688]	; (82e4 <_svfprintf_r+0x654>)
    8034:	f028 0880 	bic.w	r8, r8, #128	; 0x80
    8038:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    803a:	2a47      	cmp	r2, #71	; 0x47
    803c:	bfc8      	it	gt
    803e:	461c      	movgt	r4, r3
    8040:	2300      	movs	r3, #0
    8042:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    8046:	2203      	movs	r2, #3
    8048:	9307      	str	r3, [sp, #28]
    804a:	9202      	str	r2, [sp, #8]
    804c:	9205      	str	r2, [sp, #20]
    804e:	9303      	str	r3, [sp, #12]
    8050:	930f      	str	r3, [sp, #60]	; 0x3c
    8052:	2900      	cmp	r1, #0
    8054:	f43f af5f 	beq.w	7f16 <_svfprintf_r+0x286>
    8058:	9b02      	ldr	r3, [sp, #8]
    805a:	3301      	adds	r3, #1
    805c:	9302      	str	r3, [sp, #8]
    805e:	e75a      	b.n	7f16 <_svfprintf_r+0x286>
    8060:	2b43      	cmp	r3, #67	; 0x43
    8062:	930b      	str	r3, [sp, #44]	; 0x2c
    8064:	d003      	beq.n	806e <_svfprintf_r+0x3de>
    8066:	f018 0f10 	tst.w	r8, #16
    806a:	f000 855d 	beq.w	8b28 <_svfprintf_r+0xe98>
    806e:	9d08      	ldr	r5, [sp, #32]
    8070:	2208      	movs	r2, #8
    8072:	2100      	movs	r1, #0
    8074:	a822      	add	r0, sp, #136	; 0x88
    8076:	ac37      	add	r4, sp, #220	; 0xdc
    8078:	f7fd fece 	bl	5e18 <memset>
    807c:	ab22      	add	r3, sp, #136	; 0x88
    807e:	f855 2b04 	ldr.w	r2, [r5], #4
    8082:	4621      	mov	r1, r4
    8084:	4658      	mov	r0, fp
    8086:	f004 fbd9 	bl	c83c <_wcrtomb_r>
    808a:	4603      	mov	r3, r0
    808c:	3301      	adds	r3, #1
    808e:	9005      	str	r0, [sp, #20]
    8090:	f001 82ee 	beq.w	9670 <_svfprintf_r+0x19e0>
    8094:	9b05      	ldr	r3, [sp, #20]
    8096:	9508      	str	r5, [sp, #32]
    8098:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    809c:	9302      	str	r3, [sp, #8]
    809e:	2100      	movs	r1, #0
    80a0:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    80a4:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    80a8:	9107      	str	r1, [sp, #28]
    80aa:	9103      	str	r1, [sp, #12]
    80ac:	910f      	str	r1, [sp, #60]	; 0x3c
    80ae:	e732      	b.n	7f16 <_svfprintf_r+0x286>
    80b0:	930b      	str	r3, [sp, #44]	; 0x2c
    80b2:	9b08      	ldr	r3, [sp, #32]
    80b4:	461a      	mov	r2, r3
    80b6:	2300      	movs	r3, #0
    80b8:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    80bc:	4613      	mov	r3, r2
    80be:	f853 4b04 	ldr.w	r4, [r3], #4
    80c2:	9308      	str	r3, [sp, #32]
    80c4:	2c00      	cmp	r4, #0
    80c6:	f000 8548 	beq.w	8b5a <_svfprintf_r+0xeca>
    80ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    80cc:	2b53      	cmp	r3, #83	; 0x53
    80ce:	f000 86ec 	beq.w	8eaa <_svfprintf_r+0x121a>
    80d2:	f018 0310 	ands.w	r3, r8, #16
    80d6:	930c      	str	r3, [sp, #48]	; 0x30
    80d8:	f040 86e7 	bne.w	8eaa <_svfprintf_r+0x121a>
    80dc:	9b03      	ldr	r3, [sp, #12]
    80de:	1c5d      	adds	r5, r3, #1
    80e0:	f001 80e5 	beq.w	92ae <_svfprintf_r+0x161e>
    80e4:	990c      	ldr	r1, [sp, #48]	; 0x30
    80e6:	461a      	mov	r2, r3
    80e8:	4620      	mov	r0, r4
    80ea:	f003 f961 	bl	b3b0 <memchr>
    80ee:	9007      	str	r0, [sp, #28]
    80f0:	2800      	cmp	r0, #0
    80f2:	f001 8328 	beq.w	9746 <_svfprintf_r+0x1ab6>
    80f6:	9b07      	ldr	r3, [sp, #28]
    80f8:	1b1a      	subs	r2, r3, r4
    80fa:	9205      	str	r2, [sp, #20]
    80fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    80fe:	9303      	str	r3, [sp, #12]
    8100:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    8104:	930f      	str	r3, [sp, #60]	; 0x3c
    8106:	930d      	str	r3, [sp, #52]	; 0x34
    8108:	9307      	str	r3, [sp, #28]
    810a:	2373      	movs	r3, #115	; 0x73
    810c:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    8110:	9202      	str	r2, [sp, #8]
    8112:	930b      	str	r3, [sp, #44]	; 0x2c
    8114:	e79d      	b.n	8052 <_svfprintf_r+0x3c2>
    8116:	f018 0f20 	tst.w	r8, #32
    811a:	930b      	str	r3, [sp, #44]	; 0x2c
    811c:	9b08      	ldr	r3, [sp, #32]
    811e:	d03d      	beq.n	819c <_svfprintf_r+0x50c>
    8120:	3307      	adds	r3, #7
    8122:	f023 0307 	bic.w	r3, r3, #7
    8126:	461a      	mov	r2, r3
    8128:	4611      	mov	r1, r2
    812a:	685b      	ldr	r3, [r3, #4]
    812c:	f851 2b08 	ldr.w	r2, [r1], #8
    8130:	9108      	str	r1, [sp, #32]
    8132:	4619      	mov	r1, r3
    8134:	2b00      	cmp	r3, #0
    8136:	f2c0 840c 	blt.w	8952 <_svfprintf_r+0xcc2>
    813a:	9b03      	ldr	r3, [sp, #12]
    813c:	3301      	adds	r3, #1
    813e:	f000 829e 	beq.w	867e <_svfprintf_r+0x9ee>
    8142:	f028 0080 	bic.w	r0, r8, #128	; 0x80
    8146:	ea52 0301 	orrs.w	r3, r2, r1
    814a:	9002      	str	r0, [sp, #8]
    814c:	f040 8299 	bne.w	8682 <_svfprintf_r+0x9f2>
    8150:	9b03      	ldr	r3, [sp, #12]
    8152:	2b00      	cmp	r3, #0
    8154:	f040 829a 	bne.w	868c <_svfprintf_r+0x9fc>
    8158:	4680      	mov	r8, r0
    815a:	2300      	movs	r3, #0
    815c:	9303      	str	r3, [sp, #12]
    815e:	9305      	str	r3, [sp, #20]
    8160:	ac50      	add	r4, sp, #320	; 0x140
    8162:	e106      	b.n	8372 <_svfprintf_r+0x6e2>
    8164:	9b08      	ldr	r3, [sp, #32]
    8166:	f853 2b04 	ldr.w	r2, [r3], #4
    816a:	9206      	str	r2, [sp, #24]
    816c:	2a00      	cmp	r2, #0
    816e:	f280 8419 	bge.w	89a4 <_svfprintf_r+0xd14>
    8172:	9a06      	ldr	r2, [sp, #24]
    8174:	9308      	str	r3, [sp, #32]
    8176:	4252      	negs	r2, r2
    8178:	9206      	str	r2, [sp, #24]
    817a:	f899 3000 	ldrb.w	r3, [r9]
    817e:	f048 0804 	orr.w	r8, r8, #4
    8182:	e5e1      	b.n	7d48 <_svfprintf_r+0xb8>
    8184:	f899 3000 	ldrb.w	r3, [r9]
    8188:	f048 0808 	orr.w	r8, r8, #8
    818c:	e5dc      	b.n	7d48 <_svfprintf_r+0xb8>
    818e:	f048 0810 	orr.w	r8, r8, #16
    8192:	f018 0f20 	tst.w	r8, #32
    8196:	930b      	str	r3, [sp, #44]	; 0x2c
    8198:	9b08      	ldr	r3, [sp, #32]
    819a:	d1c1      	bne.n	8120 <_svfprintf_r+0x490>
    819c:	f018 0f10 	tst.w	r8, #16
    81a0:	f040 840b 	bne.w	89ba <_svfprintf_r+0xd2a>
    81a4:	f018 0f40 	tst.w	r8, #64	; 0x40
    81a8:	f000 8403 	beq.w	89b2 <_svfprintf_r+0xd22>
    81ac:	f933 2b04 	ldrsh.w	r2, [r3], #4
    81b0:	9308      	str	r3, [sp, #32]
    81b2:	17d1      	asrs	r1, r2, #31
    81b4:	460b      	mov	r3, r1
    81b6:	e7bd      	b.n	8134 <_svfprintf_r+0x4a4>
    81b8:	9b08      	ldr	r3, [sp, #32]
    81ba:	f048 0202 	orr.w	r2, r8, #2
    81be:	9202      	str	r2, [sp, #8]
    81c0:	f853 2b04 	ldr.w	r2, [r3], #4
    81c4:	9308      	str	r3, [sp, #32]
    81c6:	f647 0330 	movw	r3, #30768	; 0x7830
    81ca:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    81ce:	2078      	movs	r0, #120	; 0x78
    81d0:	4b45      	ldr	r3, [pc, #276]	; (82e8 <_svfprintf_r+0x658>)
    81d2:	9311      	str	r3, [sp, #68]	; 0x44
    81d4:	2100      	movs	r1, #0
    81d6:	2302      	movs	r3, #2
    81d8:	900b      	str	r0, [sp, #44]	; 0x2c
    81da:	2000      	movs	r0, #0
    81dc:	9c03      	ldr	r4, [sp, #12]
    81de:	f88d 0067 	strb.w	r0, [sp, #103]	; 0x67
    81e2:	1c60      	adds	r0, r4, #1
    81e4:	f000 80ad 	beq.w	8342 <_svfprintf_r+0x6b2>
    81e8:	9802      	ldr	r0, [sp, #8]
    81ea:	f020 0880 	bic.w	r8, r0, #128	; 0x80
    81ee:	ea52 0001 	orrs.w	r0, r2, r1
    81f2:	f040 80a4 	bne.w	833e <_svfprintf_r+0x6ae>
    81f6:	2c00      	cmp	r4, #0
    81f8:	f040 86ae 	bne.w	8f58 <_svfprintf_r+0x12c8>
    81fc:	2b00      	cmp	r3, #0
    81fe:	d1ac      	bne.n	815a <_svfprintf_r+0x4ca>
    8200:	9b02      	ldr	r3, [sp, #8]
    8202:	f013 0301 	ands.w	r3, r3, #1
    8206:	9305      	str	r3, [sp, #20]
    8208:	f000 83d1 	beq.w	89ae <_svfprintf_r+0xd1e>
    820c:	2330      	movs	r3, #48	; 0x30
    820e:	f88d 313f 	strb.w	r3, [sp, #319]	; 0x13f
    8212:	f20d 143f 	addw	r4, sp, #319	; 0x13f
    8216:	e0ac      	b.n	8372 <_svfprintf_r+0x6e2>
    8218:	f018 0f20 	tst.w	r8, #32
    821c:	f040 83d4 	bne.w	89c8 <_svfprintf_r+0xd38>
    8220:	f018 0f10 	tst.w	r8, #16
    8224:	f040 869f 	bne.w	8f66 <_svfprintf_r+0x12d6>
    8228:	f018 0f40 	tst.w	r8, #64	; 0x40
    822c:	f040 8797 	bne.w	915e <_svfprintf_r+0x14ce>
    8230:	f418 7f00 	tst.w	r8, #512	; 0x200
    8234:	f000 8697 	beq.w	8f66 <_svfprintf_r+0x12d6>
    8238:	9b08      	ldr	r3, [sp, #32]
    823a:	9904      	ldr	r1, [sp, #16]
    823c:	f853 2b04 	ldr.w	r2, [r3], #4
    8240:	9308      	str	r3, [sp, #32]
    8242:	7011      	strb	r1, [r2, #0]
    8244:	464c      	mov	r4, r9
    8246:	e555      	b.n	7cf4 <_svfprintf_r+0x64>
    8248:	f899 3000 	ldrb.w	r3, [r9]
    824c:	2b68      	cmp	r3, #104	; 0x68
    824e:	bf03      	ittte	eq
    8250:	f899 3001 	ldrbeq.w	r3, [r9, #1]
    8254:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
    8258:	f109 0901 	addeq.w	r9, r9, #1
    825c:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
    8260:	e572      	b.n	7d48 <_svfprintf_r+0xb8>
    8262:	f899 3000 	ldrb.w	r3, [r9]
    8266:	f88d 5067 	strb.w	r5, [sp, #103]	; 0x67
    826a:	e56d      	b.n	7d48 <_svfprintf_r+0xb8>
    826c:	f899 3000 	ldrb.w	r3, [r9]
    8270:	2b6c      	cmp	r3, #108	; 0x6c
    8272:	bf03      	ittte	eq
    8274:	f899 3001 	ldrbeq.w	r3, [r9, #1]
    8278:	f048 0820 	orreq.w	r8, r8, #32
    827c:	f109 0901 	addeq.w	r9, r9, #1
    8280:	f048 0810 	orrne.w	r8, r8, #16
    8284:	e560      	b.n	7d48 <_svfprintf_r+0xb8>
    8286:	930b      	str	r3, [sp, #44]	; 0x2c
    8288:	f048 0810 	orr.w	r8, r8, #16
    828c:	f018 0120 	ands.w	r1, r8, #32
    8290:	f000 8351 	beq.w	8936 <_svfprintf_r+0xca6>
    8294:	9b08      	ldr	r3, [sp, #32]
    8296:	3307      	adds	r3, #7
    8298:	f023 0307 	bic.w	r3, r3, #7
    829c:	6859      	ldr	r1, [r3, #4]
    829e:	f853 2b08 	ldr.w	r2, [r3], #8
    82a2:	9308      	str	r3, [sp, #32]
    82a4:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
    82a8:	9302      	str	r3, [sp, #8]
    82aa:	2300      	movs	r3, #0
    82ac:	e795      	b.n	81da <_svfprintf_r+0x54a>
    82ae:	930b      	str	r3, [sp, #44]	; 0x2c
    82b0:	f048 0310 	orr.w	r3, r8, #16
    82b4:	9302      	str	r3, [sp, #8]
    82b6:	9b02      	ldr	r3, [sp, #8]
    82b8:	f013 0120 	ands.w	r1, r3, #32
    82bc:	f000 8329 	beq.w	8912 <_svfprintf_r+0xc82>
    82c0:	9b08      	ldr	r3, [sp, #32]
    82c2:	3307      	adds	r3, #7
    82c4:	f023 0307 	bic.w	r3, r3, #7
    82c8:	6859      	ldr	r1, [r3, #4]
    82ca:	f853 2b08 	ldr.w	r2, [r3], #8
    82ce:	9308      	str	r3, [sp, #32]
    82d0:	2301      	movs	r3, #1
    82d2:	e782      	b.n	81da <_svfprintf_r+0x54a>
    82d4:	f899 3000 	ldrb.w	r3, [r9]
    82d8:	f048 0880 	orr.w	r8, r8, #128	; 0x80
    82dc:	e534      	b.n	7d48 <_svfprintf_r+0xb8>
    82de:	bf00      	nop
    82e0:	200008c4 	.word	0x200008c4
    82e4:	200008c8 	.word	0x200008c8
    82e8:	200008d4 	.word	0x200008d4
    82ec:	4649      	mov	r1, r9
    82ee:	f811 3b01 	ldrb.w	r3, [r1], #1
    82f2:	2b2a      	cmp	r3, #42	; 0x2a
    82f4:	f001 8249 	beq.w	978a <_svfprintf_r+0x1afa>
    82f8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    82fc:	2a09      	cmp	r2, #9
    82fe:	4689      	mov	r9, r1
    8300:	bf98      	it	ls
    8302:	2100      	movls	r1, #0
    8304:	f201 8144 	bhi.w	9590 <_svfprintf_r+0x1900>
    8308:	f819 3b01 	ldrb.w	r3, [r9], #1
    830c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    8310:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    8314:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    8318:	2a09      	cmp	r2, #9
    831a:	d9f5      	bls.n	8308 <_svfprintf_r+0x678>
    831c:	9103      	str	r1, [sp, #12]
    831e:	e515      	b.n	7d4c <_svfprintf_r+0xbc>
    8320:	f899 3000 	ldrb.w	r3, [r9]
    8324:	f048 0801 	orr.w	r8, r8, #1
    8328:	e50e      	b.n	7d48 <_svfprintf_r+0xb8>
    832a:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
    832e:	2b00      	cmp	r3, #0
    8330:	f47f ad8f 	bne.w	7e52 <_svfprintf_r+0x1c2>
    8334:	f899 3000 	ldrb.w	r3, [r9]
    8338:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
    833c:	e504      	b.n	7d48 <_svfprintf_r+0xb8>
    833e:	f8cd 8008 	str.w	r8, [sp, #8]
    8342:	2b01      	cmp	r3, #1
    8344:	f000 819d 	beq.w	8682 <_svfprintf_r+0x9f2>
    8348:	2b02      	cmp	r3, #2
    834a:	ac50      	add	r4, sp, #320	; 0x140
    834c:	d120      	bne.n	8390 <_svfprintf_r+0x700>
    834e:	9811      	ldr	r0, [sp, #68]	; 0x44
    8350:	f002 030f 	and.w	r3, r2, #15
    8354:	0912      	lsrs	r2, r2, #4
    8356:	5cc3      	ldrb	r3, [r0, r3]
    8358:	f804 3d01 	strb.w	r3, [r4, #-1]!
    835c:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    8360:	0909      	lsrs	r1, r1, #4
    8362:	ea52 0301 	orrs.w	r3, r2, r1
    8366:	d1f3      	bne.n	8350 <_svfprintf_r+0x6c0>
    8368:	ab50      	add	r3, sp, #320	; 0x140
    836a:	1b1b      	subs	r3, r3, r4
    836c:	f8dd 8008 	ldr.w	r8, [sp, #8]
    8370:	9305      	str	r3, [sp, #20]
    8372:	9a05      	ldr	r2, [sp, #20]
    8374:	9803      	ldr	r0, [sp, #12]
    8376:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    837a:	4282      	cmp	r2, r0
    837c:	f04f 0300 	mov.w	r3, #0
    8380:	bfb8      	it	lt
    8382:	4602      	movlt	r2, r0
    8384:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    8388:	9307      	str	r3, [sp, #28]
    838a:	9202      	str	r2, [sp, #8]
    838c:	930f      	str	r3, [sp, #60]	; 0x3c
    838e:	e660      	b.n	8052 <_svfprintf_r+0x3c2>
    8390:	f002 0307 	and.w	r3, r2, #7
    8394:	08d2      	lsrs	r2, r2, #3
    8396:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    839a:	08c9      	lsrs	r1, r1, #3
    839c:	3330      	adds	r3, #48	; 0x30
    839e:	ea52 0501 	orrs.w	r5, r2, r1
    83a2:	4620      	mov	r0, r4
    83a4:	f804 3d01 	strb.w	r3, [r4, #-1]!
    83a8:	d1f2      	bne.n	8390 <_svfprintf_r+0x700>
    83aa:	9a02      	ldr	r2, [sp, #8]
    83ac:	07d1      	lsls	r1, r2, #31
    83ae:	f100 824d 	bmi.w	884c <_svfprintf_r+0xbbc>
    83b2:	ab50      	add	r3, sp, #320	; 0x140
    83b4:	1b1b      	subs	r3, r3, r4
    83b6:	4690      	mov	r8, r2
    83b8:	9305      	str	r3, [sp, #20]
    83ba:	e7da      	b.n	8372 <_svfprintf_r+0x6e2>
    83bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    83be:	2b65      	cmp	r3, #101	; 0x65
    83c0:	f340 80d4 	ble.w	856c <_svfprintf_r+0x8dc>
    83c4:	eeb5 8b40 	vcmp.f64	d8, #0.0
    83c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    83cc:	f040 81c1 	bne.w	8752 <_svfprintf_r+0xac2>
    83d0:	9b25      	ldr	r3, [sp, #148]	; 0x94
    83d2:	49ba      	ldr	r1, [pc, #744]	; (86bc <_svfprintf_r+0xa2c>)
    83d4:	f8ca 1000 	str.w	r1, [sl]
    83d8:	3301      	adds	r3, #1
    83da:	3201      	adds	r2, #1
    83dc:	2101      	movs	r1, #1
    83de:	2b07      	cmp	r3, #7
    83e0:	9226      	str	r2, [sp, #152]	; 0x98
    83e2:	9325      	str	r3, [sp, #148]	; 0x94
    83e4:	f8ca 1004 	str.w	r1, [sl, #4]
    83e8:	f300 8551 	bgt.w	8e8e <_svfprintf_r+0x11fe>
    83ec:	f10a 0a08 	add.w	sl, sl, #8
    83f0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    83f2:	990e      	ldr	r1, [sp, #56]	; 0x38
    83f4:	428b      	cmp	r3, r1
    83f6:	f280 82d0 	bge.w	899a <_svfprintf_r+0xd0a>
    83fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
    83fc:	9912      	ldr	r1, [sp, #72]	; 0x48
    83fe:	441a      	add	r2, r3
    8400:	e9ca 1300 	strd	r1, r3, [sl]
    8404:	9b25      	ldr	r3, [sp, #148]	; 0x94
    8406:	9226      	str	r2, [sp, #152]	; 0x98
    8408:	3301      	adds	r3, #1
    840a:	2b07      	cmp	r3, #7
    840c:	9325      	str	r3, [sp, #148]	; 0x94
    840e:	f300 8397 	bgt.w	8b40 <_svfprintf_r+0xeb0>
    8412:	f10a 0a08 	add.w	sl, sl, #8
    8416:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8418:	1e5c      	subs	r4, r3, #1
    841a:	2c00      	cmp	r4, #0
    841c:	f77f add0 	ble.w	7fc0 <_svfprintf_r+0x330>
    8420:	2c10      	cmp	r4, #16
    8422:	9b25      	ldr	r3, [sp, #148]	; 0x94
    8424:	f340 856e 	ble.w	8f04 <_svfprintf_r+0x1274>
    8428:	ee1b 6a10 	vmov	r6, s22
    842c:	2510      	movs	r5, #16
    842e:	e005      	b.n	843c <_svfprintf_r+0x7ac>
    8430:	f10a 0a08 	add.w	sl, sl, #8
    8434:	3c10      	subs	r4, #16
    8436:	2c10      	cmp	r4, #16
    8438:	f340 8564 	ble.w	8f04 <_svfprintf_r+0x1274>
    843c:	3301      	adds	r3, #1
    843e:	49a0      	ldr	r1, [pc, #640]	; (86c0 <_svfprintf_r+0xa30>)
    8440:	3210      	adds	r2, #16
    8442:	2b07      	cmp	r3, #7
    8444:	e9ca 1500 	strd	r1, r5, [sl]
    8448:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    844c:	ddf0      	ble.n	8430 <_svfprintf_r+0x7a0>
    844e:	aa24      	add	r2, sp, #144	; 0x90
    8450:	4631      	mov	r1, r6
    8452:	4658      	mov	r0, fp
    8454:	f004 fb1c 	bl	ca90 <__ssprint_r>
    8458:	2800      	cmp	r0, #0
    845a:	d17e      	bne.n	855a <_svfprintf_r+0x8ca>
    845c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    8460:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    8464:	e7e6      	b.n	8434 <_svfprintf_r+0x7a4>
    8466:	9b06      	ldr	r3, [sp, #24]
    8468:	9902      	ldr	r1, [sp, #8]
    846a:	1a5d      	subs	r5, r3, r1
    846c:	2d00      	cmp	r5, #0
    846e:	f77f ad8e 	ble.w	7f8e <_svfprintf_r+0x2fe>
    8472:	2d10      	cmp	r5, #16
    8474:	9b25      	ldr	r3, [sp, #148]	; 0x94
    8476:	dd21      	ble.n	84bc <_svfprintf_r+0x82c>
    8478:	9409      	str	r4, [sp, #36]	; 0x24
    847a:	2610      	movs	r6, #16
    847c:	ee1b 4a10 	vmov	r4, s22
    8480:	e004      	b.n	848c <_svfprintf_r+0x7fc>
    8482:	3d10      	subs	r5, #16
    8484:	2d10      	cmp	r5, #16
    8486:	f10a 0a08 	add.w	sl, sl, #8
    848a:	dd16      	ble.n	84ba <_svfprintf_r+0x82a>
    848c:	3301      	adds	r3, #1
    848e:	498c      	ldr	r1, [pc, #560]	; (86c0 <_svfprintf_r+0xa30>)
    8490:	3210      	adds	r2, #16
    8492:	2b07      	cmp	r3, #7
    8494:	e9ca 1600 	strd	r1, r6, [sl]
    8498:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    849c:	ddf1      	ble.n	8482 <_svfprintf_r+0x7f2>
    849e:	aa24      	add	r2, sp, #144	; 0x90
    84a0:	4621      	mov	r1, r4
    84a2:	4658      	mov	r0, fp
    84a4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    84a8:	f004 faf2 	bl	ca90 <__ssprint_r>
    84ac:	2800      	cmp	r0, #0
    84ae:	d154      	bne.n	855a <_svfprintf_r+0x8ca>
    84b0:	3d10      	subs	r5, #16
    84b2:	2d10      	cmp	r5, #16
    84b4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    84b8:	dce8      	bgt.n	848c <_svfprintf_r+0x7fc>
    84ba:	9c09      	ldr	r4, [sp, #36]	; 0x24
    84bc:	4980      	ldr	r1, [pc, #512]	; (86c0 <_svfprintf_r+0xa30>)
    84be:	f8ca 5004 	str.w	r5, [sl, #4]
    84c2:	3301      	adds	r3, #1
    84c4:	442a      	add	r2, r5
    84c6:	2b07      	cmp	r3, #7
    84c8:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    84cc:	f8ca 1000 	str.w	r1, [sl]
    84d0:	f300 8526 	bgt.w	8f20 <_svfprintf_r+0x1290>
    84d4:	9b03      	ldr	r3, [sp, #12]
    84d6:	9905      	ldr	r1, [sp, #20]
    84d8:	1a5d      	subs	r5, r3, r1
    84da:	2d00      	cmp	r5, #0
    84dc:	f10a 0a08 	add.w	sl, sl, #8
    84e0:	f77f ad5b 	ble.w	7f9a <_svfprintf_r+0x30a>
    84e4:	2d10      	cmp	r5, #16
    84e6:	9b25      	ldr	r3, [sp, #148]	; 0x94
    84e8:	dd1f      	ble.n	852a <_svfprintf_r+0x89a>
    84ea:	4651      	mov	r1, sl
    84ec:	2610      	movs	r6, #16
    84ee:	ee1b aa10 	vmov	sl, s22
    84f2:	e004      	b.n	84fe <_svfprintf_r+0x86e>
    84f4:	3d10      	subs	r5, #16
    84f6:	2d10      	cmp	r5, #16
    84f8:	f101 0108 	add.w	r1, r1, #8
    84fc:	dd14      	ble.n	8528 <_svfprintf_r+0x898>
    84fe:	3301      	adds	r3, #1
    8500:	486f      	ldr	r0, [pc, #444]	; (86c0 <_svfprintf_r+0xa30>)
    8502:	3210      	adds	r2, #16
    8504:	2b07      	cmp	r3, #7
    8506:	e9c1 0600 	strd	r0, r6, [r1]
    850a:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    850e:	ddf1      	ble.n	84f4 <_svfprintf_r+0x864>
    8510:	aa24      	add	r2, sp, #144	; 0x90
    8512:	4651      	mov	r1, sl
    8514:	4658      	mov	r0, fp
    8516:	f004 fabb 	bl	ca90 <__ssprint_r>
    851a:	b9f0      	cbnz	r0, 855a <_svfprintf_r+0x8ca>
    851c:	3d10      	subs	r5, #16
    851e:	2d10      	cmp	r5, #16
    8520:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    8524:	a927      	add	r1, sp, #156	; 0x9c
    8526:	dcea      	bgt.n	84fe <_svfprintf_r+0x86e>
    8528:	468a      	mov	sl, r1
    852a:	3301      	adds	r3, #1
    852c:	4964      	ldr	r1, [pc, #400]	; (86c0 <_svfprintf_r+0xa30>)
    852e:	f8ca 5004 	str.w	r5, [sl, #4]
    8532:	442a      	add	r2, r5
    8534:	2b07      	cmp	r3, #7
    8536:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    853a:	f8ca 1000 	str.w	r1, [sl]
    853e:	f300 81da 	bgt.w	88f6 <_svfprintf_r+0xc66>
    8542:	f10a 0a08 	add.w	sl, sl, #8
    8546:	e528      	b.n	7f9a <_svfprintf_r+0x30a>
    8548:	ee1b 1a10 	vmov	r1, s22
    854c:	aa24      	add	r2, sp, #144	; 0x90
    854e:	4658      	mov	r0, fp
    8550:	f004 fa9e 	bl	ca90 <__ssprint_r>
    8554:	2800      	cmp	r0, #0
    8556:	f43f ad47 	beq.w	7fe8 <_svfprintf_r+0x358>
    855a:	9b07      	ldr	r3, [sp, #28]
    855c:	2b00      	cmp	r3, #0
    855e:	f43f aca2 	beq.w	7ea6 <_svfprintf_r+0x216>
    8562:	9907      	ldr	r1, [sp, #28]
    8564:	4658      	mov	r0, fp
    8566:	f7fe f91d 	bl	67a4 <_free_r>
    856a:	e49c      	b.n	7ea6 <_svfprintf_r+0x216>
    856c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    856e:	2b01      	cmp	r3, #1
    8570:	f340 817a 	ble.w	8868 <_svfprintf_r+0xbd8>
    8574:	9b25      	ldr	r3, [sp, #148]	; 0x94
    8576:	f8ca 4000 	str.w	r4, [sl]
    857a:	3301      	adds	r3, #1
    857c:	3201      	adds	r2, #1
    857e:	2101      	movs	r1, #1
    8580:	2b07      	cmp	r3, #7
    8582:	9226      	str	r2, [sp, #152]	; 0x98
    8584:	9325      	str	r3, [sp, #148]	; 0x94
    8586:	f8ca 1004 	str.w	r1, [sl, #4]
    858a:	f300 81f8 	bgt.w	897e <_svfprintf_r+0xcee>
    858e:	f10a 0a08 	add.w	sl, sl, #8
    8592:	9910      	ldr	r1, [sp, #64]	; 0x40
    8594:	9812      	ldr	r0, [sp, #72]	; 0x48
    8596:	3301      	adds	r3, #1
    8598:	440a      	add	r2, r1
    859a:	2b07      	cmp	r3, #7
    859c:	e9ca 0100 	strd	r0, r1, [sl]
    85a0:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    85a4:	f300 81dd 	bgt.w	8962 <_svfprintf_r+0xcd2>
    85a8:	f10a 0a08 	add.w	sl, sl, #8
    85ac:	eeb5 8b40 	vcmp.f64	d8, #0.0
    85b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    85b4:	f000 8177 	beq.w	88a6 <_svfprintf_r+0xc16>
    85b8:	990e      	ldr	r1, [sp, #56]	; 0x38
    85ba:	3301      	adds	r3, #1
    85bc:	3901      	subs	r1, #1
    85be:	3401      	adds	r4, #1
    85c0:	440a      	add	r2, r1
    85c2:	2b07      	cmp	r3, #7
    85c4:	f8ca 4000 	str.w	r4, [sl]
    85c8:	9325      	str	r3, [sp, #148]	; 0x94
    85ca:	f8ca 1004 	str.w	r1, [sl, #4]
    85ce:	9226      	str	r2, [sp, #152]	; 0x98
    85d0:	f300 815b 	bgt.w	888a <_svfprintf_r+0xbfa>
    85d4:	f10a 0a08 	add.w	sl, sl, #8
    85d8:	9914      	ldr	r1, [sp, #80]	; 0x50
    85da:	f8ca 1004 	str.w	r1, [sl, #4]
    85de:	3301      	adds	r3, #1
    85e0:	440a      	add	r2, r1
    85e2:	2b07      	cmp	r3, #7
    85e4:	a91e      	add	r1, sp, #120	; 0x78
    85e6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    85ea:	f8ca 1000 	str.w	r1, [sl]
    85ee:	f77f ace5 	ble.w	7fbc <_svfprintf_r+0x32c>
    85f2:	ee1b 1a10 	vmov	r1, s22
    85f6:	aa24      	add	r2, sp, #144	; 0x90
    85f8:	4658      	mov	r0, fp
    85fa:	f004 fa49 	bl	ca90 <__ssprint_r>
    85fe:	2800      	cmp	r0, #0
    8600:	d1ab      	bne.n	855a <_svfprintf_r+0x8ca>
    8602:	9a26      	ldr	r2, [sp, #152]	; 0x98
    8604:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    8608:	e4da      	b.n	7fc0 <_svfprintf_r+0x330>
    860a:	2d10      	cmp	r5, #16
    860c:	e9dd 1225 	ldrd	r1, r2, [sp, #148]	; 0x94
    8610:	4e2c      	ldr	r6, [pc, #176]	; (86c4 <_svfprintf_r+0xa34>)
    8612:	dd24      	ble.n	865e <_svfprintf_r+0x9ce>
    8614:	9417      	str	r4, [sp, #92]	; 0x5c
    8616:	2310      	movs	r3, #16
    8618:	ee1b 4a10 	vmov	r4, s22
    861c:	4608      	mov	r0, r1
    861e:	e004      	b.n	862a <_svfprintf_r+0x99a>
    8620:	3d10      	subs	r5, #16
    8622:	2d10      	cmp	r5, #16
    8624:	f10a 0a08 	add.w	sl, sl, #8
    8628:	dd17      	ble.n	865a <_svfprintf_r+0x9ca>
    862a:	3001      	adds	r0, #1
    862c:	3210      	adds	r2, #16
    862e:	2807      	cmp	r0, #7
    8630:	e9ca 6300 	strd	r6, r3, [sl]
    8634:	e9cd 0225 	strd	r0, r2, [sp, #148]	; 0x94
    8638:	ddf2      	ble.n	8620 <_svfprintf_r+0x990>
    863a:	aa24      	add	r2, sp, #144	; 0x90
    863c:	4621      	mov	r1, r4
    863e:	4658      	mov	r0, fp
    8640:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    8644:	f004 fa24 	bl	ca90 <__ssprint_r>
    8648:	2800      	cmp	r0, #0
    864a:	d186      	bne.n	855a <_svfprintf_r+0x8ca>
    864c:	3d10      	subs	r5, #16
    864e:	2d10      	cmp	r5, #16
    8650:	e9dd 0225 	ldrd	r0, r2, [sp, #148]	; 0x94
    8654:	f04f 0310 	mov.w	r3, #16
    8658:	dce7      	bgt.n	862a <_svfprintf_r+0x99a>
    865a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    865c:	4601      	mov	r1, r0
    865e:	3101      	adds	r1, #1
    8660:	442a      	add	r2, r5
    8662:	2907      	cmp	r1, #7
    8664:	e9cd 1225 	strd	r1, r2, [sp, #148]	; 0x94
    8668:	f8ca 6000 	str.w	r6, [sl]
    866c:	f8ca 5004 	str.w	r5, [sl, #4]
    8670:	f300 83bd 	bgt.w	8dee <_svfprintf_r+0x115e>
    8674:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    8678:	f10a 0a08 	add.w	sl, sl, #8
    867c:	e45d      	b.n	7f3a <_svfprintf_r+0x2aa>
    867e:	f8cd 8008 	str.w	r8, [sp, #8]
    8682:	2a0a      	cmp	r2, #10
    8684:	f171 0300 	sbcs.w	r3, r1, #0
    8688:	f080 8345 	bcs.w	8d16 <_svfprintf_r+0x1086>
    868c:	3230      	adds	r2, #48	; 0x30
    868e:	2301      	movs	r3, #1
    8690:	f8dd 8008 	ldr.w	r8, [sp, #8]
    8694:	f88d 213f 	strb.w	r2, [sp, #319]	; 0x13f
    8698:	9305      	str	r3, [sp, #20]
    869a:	f20d 143f 	addw	r4, sp, #319	; 0x13f
    869e:	e668      	b.n	8372 <_svfprintf_r+0x6e2>
    86a0:	ee1b 1a10 	vmov	r1, s22
    86a4:	aa24      	add	r2, sp, #144	; 0x90
    86a6:	4658      	mov	r0, fp
    86a8:	f004 f9f2 	bl	ca90 <__ssprint_r>
    86ac:	2800      	cmp	r0, #0
    86ae:	f47f af54 	bne.w	855a <_svfprintf_r+0x8ca>
    86b2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    86b4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    86b8:	e452      	b.n	7f60 <_svfprintf_r+0x2d0>
    86ba:	bf00      	nop
    86bc:	20000904 	.word	0x20000904
    86c0:	20007a3c 	.word	0x20007a3c
    86c4:	20002380 	.word	0x20002380
    86c8:	ee1b 1a10 	vmov	r1, s22
    86cc:	aa24      	add	r2, sp, #144	; 0x90
    86ce:	4658      	mov	r0, fp
    86d0:	f004 f9de 	bl	ca90 <__ssprint_r>
    86d4:	2800      	cmp	r0, #0
    86d6:	f47f af40 	bne.w	855a <_svfprintf_r+0x8ca>
    86da:	9a26      	ldr	r2, [sp, #152]	; 0x98
    86dc:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    86e0:	e451      	b.n	7f86 <_svfprintf_r+0x2f6>
    86e2:	2c10      	cmp	r4, #16
    86e4:	9b25      	ldr	r3, [sp, #148]	; 0x94
    86e6:	4ebe      	ldr	r6, [pc, #760]	; (89e0 <_svfprintf_r+0xd50>)
    86e8:	dd1f      	ble.n	872a <_svfprintf_r+0xa9a>
    86ea:	ee1b 8a10 	vmov	r8, s22
    86ee:	2510      	movs	r5, #16
    86f0:	e004      	b.n	86fc <_svfprintf_r+0xa6c>
    86f2:	3c10      	subs	r4, #16
    86f4:	2c10      	cmp	r4, #16
    86f6:	f10a 0a08 	add.w	sl, sl, #8
    86fa:	dd16      	ble.n	872a <_svfprintf_r+0xa9a>
    86fc:	3301      	adds	r3, #1
    86fe:	3210      	adds	r2, #16
    8700:	2b07      	cmp	r3, #7
    8702:	e9ca 6500 	strd	r6, r5, [sl]
    8706:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    870a:	ddf2      	ble.n	86f2 <_svfprintf_r+0xa62>
    870c:	aa24      	add	r2, sp, #144	; 0x90
    870e:	4641      	mov	r1, r8
    8710:	4658      	mov	r0, fp
    8712:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    8716:	f004 f9bb 	bl	ca90 <__ssprint_r>
    871a:	2800      	cmp	r0, #0
    871c:	f47f af1d 	bne.w	855a <_svfprintf_r+0x8ca>
    8720:	3c10      	subs	r4, #16
    8722:	2c10      	cmp	r4, #16
    8724:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    8728:	dce8      	bgt.n	86fc <_svfprintf_r+0xa6c>
    872a:	3301      	adds	r3, #1
    872c:	4422      	add	r2, r4
    872e:	2b07      	cmp	r3, #7
    8730:	e9ca 6400 	strd	r6, r4, [sl]
    8734:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    8738:	f77f ac4b 	ble.w	7fd2 <_svfprintf_r+0x342>
    873c:	ee1b 1a10 	vmov	r1, s22
    8740:	aa24      	add	r2, sp, #144	; 0x90
    8742:	4658      	mov	r0, fp
    8744:	f004 f9a4 	bl	ca90 <__ssprint_r>
    8748:	2800      	cmp	r0, #0
    874a:	f47f af06 	bne.w	855a <_svfprintf_r+0x8ca>
    874e:	9a26      	ldr	r2, [sp, #152]	; 0x98
    8750:	e43f      	b.n	7fd2 <_svfprintf_r+0x342>
    8752:	991b      	ldr	r1, [sp, #108]	; 0x6c
    8754:	2900      	cmp	r1, #0
    8756:	f340 835a 	ble.w	8e0e <_svfprintf_r+0x117e>
    875a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    875c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    875e:	429e      	cmp	r6, r3
    8760:	bfa8      	it	ge
    8762:	461e      	movge	r6, r3
    8764:	2e00      	cmp	r6, #0
    8766:	dd0b      	ble.n	8780 <_svfprintf_r+0xaf0>
    8768:	9b25      	ldr	r3, [sp, #148]	; 0x94
    876a:	3301      	adds	r3, #1
    876c:	4432      	add	r2, r6
    876e:	2b07      	cmp	r3, #7
    8770:	e9ca 4600 	strd	r4, r6, [sl]
    8774:	9226      	str	r2, [sp, #152]	; 0x98
    8776:	9325      	str	r3, [sp, #148]	; 0x94
    8778:	f300 8689 	bgt.w	948e <_svfprintf_r+0x17fe>
    877c:	f10a 0a08 	add.w	sl, sl, #8
    8780:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    8782:	2e00      	cmp	r6, #0
    8784:	bfa8      	it	ge
    8786:	1bad      	subge	r5, r5, r6
    8788:	2d00      	cmp	r5, #0
    878a:	f300 8203 	bgt.w	8b94 <_svfprintf_r+0xf04>
    878e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8790:	f418 6f80 	tst.w	r8, #1024	; 0x400
    8794:	4423      	add	r3, r4
    8796:	9305      	str	r3, [sp, #20]
    8798:	f040 821f 	bne.w	8bda <_svfprintf_r+0xf4a>
    879c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    879e:	990e      	ldr	r1, [sp, #56]	; 0x38
    87a0:	428b      	cmp	r3, r1
    87a2:	db03      	blt.n	87ac <_svfprintf_r+0xb1c>
    87a4:	f018 0f01 	tst.w	r8, #1
    87a8:	f000 84cf 	beq.w	914a <_svfprintf_r+0x14ba>
    87ac:	9910      	ldr	r1, [sp, #64]	; 0x40
    87ae:	9812      	ldr	r0, [sp, #72]	; 0x48
    87b0:	440a      	add	r2, r1
    87b2:	e9ca 0100 	strd	r0, r1, [sl]
    87b6:	9925      	ldr	r1, [sp, #148]	; 0x94
    87b8:	9226      	str	r2, [sp, #152]	; 0x98
    87ba:	3101      	adds	r1, #1
    87bc:	2907      	cmp	r1, #7
    87be:	9125      	str	r1, [sp, #148]	; 0x94
    87c0:	f300 86a5 	bgt.w	950e <_svfprintf_r+0x187e>
    87c4:	f10a 0a08 	add.w	sl, sl, #8
    87c8:	990e      	ldr	r1, [sp, #56]	; 0x38
    87ca:	1865      	adds	r5, r4, r1
    87cc:	1acc      	subs	r4, r1, r3
    87ce:	9b05      	ldr	r3, [sp, #20]
    87d0:	1aed      	subs	r5, r5, r3
    87d2:	42a5      	cmp	r5, r4
    87d4:	bfa8      	it	ge
    87d6:	4625      	movge	r5, r4
    87d8:	2d00      	cmp	r5, #0
    87da:	dd0d      	ble.n	87f8 <_svfprintf_r+0xb68>
    87dc:	f8ca 3000 	str.w	r3, [sl]
    87e0:	9b25      	ldr	r3, [sp, #148]	; 0x94
    87e2:	f8ca 5004 	str.w	r5, [sl, #4]
    87e6:	3301      	adds	r3, #1
    87e8:	442a      	add	r2, r5
    87ea:	2b07      	cmp	r3, #7
    87ec:	9226      	str	r2, [sp, #152]	; 0x98
    87ee:	9325      	str	r3, [sp, #148]	; 0x94
    87f0:	f300 86bb 	bgt.w	956a <_svfprintf_r+0x18da>
    87f4:	f10a 0a08 	add.w	sl, sl, #8
    87f8:	2d00      	cmp	r5, #0
    87fa:	bfa8      	it	ge
    87fc:	1b64      	subge	r4, r4, r5
    87fe:	2c00      	cmp	r4, #0
    8800:	f77f abde 	ble.w	7fc0 <_svfprintf_r+0x330>
    8804:	2c10      	cmp	r4, #16
    8806:	9b25      	ldr	r3, [sp, #148]	; 0x94
    8808:	f340 837c 	ble.w	8f04 <_svfprintf_r+0x1274>
    880c:	ee1b 6a10 	vmov	r6, s22
    8810:	2510      	movs	r5, #16
    8812:	e005      	b.n	8820 <_svfprintf_r+0xb90>
    8814:	f10a 0a08 	add.w	sl, sl, #8
    8818:	3c10      	subs	r4, #16
    881a:	2c10      	cmp	r4, #16
    881c:	f340 8372 	ble.w	8f04 <_svfprintf_r+0x1274>
    8820:	3301      	adds	r3, #1
    8822:	4970      	ldr	r1, [pc, #448]	; (89e4 <_svfprintf_r+0xd54>)
    8824:	3210      	adds	r2, #16
    8826:	2b07      	cmp	r3, #7
    8828:	e9ca 1500 	strd	r1, r5, [sl]
    882c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    8830:	ddf0      	ble.n	8814 <_svfprintf_r+0xb84>
    8832:	aa24      	add	r2, sp, #144	; 0x90
    8834:	4631      	mov	r1, r6
    8836:	4658      	mov	r0, fp
    8838:	f004 f92a 	bl	ca90 <__ssprint_r>
    883c:	2800      	cmp	r0, #0
    883e:	f47f ae8c 	bne.w	855a <_svfprintf_r+0x8ca>
    8842:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    8846:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    884a:	e7e5      	b.n	8818 <_svfprintf_r+0xb88>
    884c:	2b30      	cmp	r3, #48	; 0x30
    884e:	f43f ad8b 	beq.w	8368 <_svfprintf_r+0x6d8>
    8852:	2330      	movs	r3, #48	; 0x30
    8854:	3802      	subs	r0, #2
    8856:	f804 3c01 	strb.w	r3, [r4, #-1]
    885a:	ab50      	add	r3, sp, #320	; 0x140
    885c:	1a1b      	subs	r3, r3, r0
    885e:	f8dd 8008 	ldr.w	r8, [sp, #8]
    8862:	9305      	str	r3, [sp, #20]
    8864:	4604      	mov	r4, r0
    8866:	e584      	b.n	8372 <_svfprintf_r+0x6e2>
    8868:	f018 0f01 	tst.w	r8, #1
    886c:	f47f ae82 	bne.w	8574 <_svfprintf_r+0x8e4>
    8870:	9b25      	ldr	r3, [sp, #148]	; 0x94
    8872:	f8ca 4000 	str.w	r4, [sl]
    8876:	3301      	adds	r3, #1
    8878:	3201      	adds	r2, #1
    887a:	2101      	movs	r1, #1
    887c:	2b07      	cmp	r3, #7
    887e:	9226      	str	r2, [sp, #152]	; 0x98
    8880:	9325      	str	r3, [sp, #148]	; 0x94
    8882:	f8ca 1004 	str.w	r1, [sl, #4]
    8886:	f77f aea5 	ble.w	85d4 <_svfprintf_r+0x944>
    888a:	ee1b 1a10 	vmov	r1, s22
    888e:	aa24      	add	r2, sp, #144	; 0x90
    8890:	4658      	mov	r0, fp
    8892:	f004 f8fd 	bl	ca90 <__ssprint_r>
    8896:	2800      	cmp	r0, #0
    8898:	f47f ae5f 	bne.w	855a <_svfprintf_r+0x8ca>
    889c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    88a0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    88a4:	e698      	b.n	85d8 <_svfprintf_r+0x948>
    88a6:	990e      	ldr	r1, [sp, #56]	; 0x38
    88a8:	1e4c      	subs	r4, r1, #1
    88aa:	2c00      	cmp	r4, #0
    88ac:	f77f ae94 	ble.w	85d8 <_svfprintf_r+0x948>
    88b0:	2c10      	cmp	r4, #16
    88b2:	f340 8361 	ble.w	8f78 <_svfprintf_r+0x12e8>
    88b6:	ee1b 6a10 	vmov	r6, s22
    88ba:	2510      	movs	r5, #16
    88bc:	e005      	b.n	88ca <_svfprintf_r+0xc3a>
    88be:	f10a 0a08 	add.w	sl, sl, #8
    88c2:	3c10      	subs	r4, #16
    88c4:	2c10      	cmp	r4, #16
    88c6:	f340 8357 	ble.w	8f78 <_svfprintf_r+0x12e8>
    88ca:	3301      	adds	r3, #1
    88cc:	4945      	ldr	r1, [pc, #276]	; (89e4 <_svfprintf_r+0xd54>)
    88ce:	3210      	adds	r2, #16
    88d0:	2b07      	cmp	r3, #7
    88d2:	e9ca 1500 	strd	r1, r5, [sl]
    88d6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    88da:	ddf0      	ble.n	88be <_svfprintf_r+0xc2e>
    88dc:	aa24      	add	r2, sp, #144	; 0x90
    88de:	4631      	mov	r1, r6
    88e0:	4658      	mov	r0, fp
    88e2:	f004 f8d5 	bl	ca90 <__ssprint_r>
    88e6:	2800      	cmp	r0, #0
    88e8:	f47f ae37 	bne.w	855a <_svfprintf_r+0x8ca>
    88ec:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    88f0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    88f4:	e7e5      	b.n	88c2 <_svfprintf_r+0xc32>
    88f6:	ee1b 1a10 	vmov	r1, s22
    88fa:	aa24      	add	r2, sp, #144	; 0x90
    88fc:	4658      	mov	r0, fp
    88fe:	f004 f8c7 	bl	ca90 <__ssprint_r>
    8902:	2800      	cmp	r0, #0
    8904:	f47f ae29 	bne.w	855a <_svfprintf_r+0x8ca>
    8908:	9a26      	ldr	r2, [sp, #152]	; 0x98
    890a:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    890e:	f7ff bb44 	b.w	7f9a <_svfprintf_r+0x30a>
    8912:	9b02      	ldr	r3, [sp, #8]
    8914:	f013 0310 	ands.w	r3, r3, #16
    8918:	f040 80c1 	bne.w	8a9e <_svfprintf_r+0xe0e>
    891c:	9a02      	ldr	r2, [sp, #8]
    891e:	f012 0240 	ands.w	r2, r2, #64	; 0x40
    8922:	f000 837a 	beq.w	901a <_svfprintf_r+0x138a>
    8926:	9808      	ldr	r0, [sp, #32]
    8928:	f850 2b04 	ldr.w	r2, [r0], #4
    892c:	9008      	str	r0, [sp, #32]
    892e:	4619      	mov	r1, r3
    8930:	b292      	uxth	r2, r2
    8932:	2301      	movs	r3, #1
    8934:	e451      	b.n	81da <_svfprintf_r+0x54a>
    8936:	f018 0310 	ands.w	r3, r8, #16
    893a:	d155      	bne.n	89e8 <_svfprintf_r+0xd58>
    893c:	f018 0240 	ands.w	r2, r8, #64	; 0x40
    8940:	f000 835d 	beq.w	8ffe <_svfprintf_r+0x136e>
    8944:	9808      	ldr	r0, [sp, #32]
    8946:	f850 2b04 	ldr.w	r2, [r0], #4
    894a:	9008      	str	r0, [sp, #32]
    894c:	4619      	mov	r1, r3
    894e:	b292      	uxth	r2, r2
    8950:	e4a8      	b.n	82a4 <_svfprintf_r+0x614>
    8952:	4252      	negs	r2, r2
    8954:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8958:	f8cd 8008 	str.w	r8, [sp, #8]
    895c:	202d      	movs	r0, #45	; 0x2d
    895e:	2301      	movs	r3, #1
    8960:	e43c      	b.n	81dc <_svfprintf_r+0x54c>
    8962:	ee1b 1a10 	vmov	r1, s22
    8966:	aa24      	add	r2, sp, #144	; 0x90
    8968:	4658      	mov	r0, fp
    896a:	f004 f891 	bl	ca90 <__ssprint_r>
    896e:	2800      	cmp	r0, #0
    8970:	f47f adf3 	bne.w	855a <_svfprintf_r+0x8ca>
    8974:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    8978:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    897c:	e616      	b.n	85ac <_svfprintf_r+0x91c>
    897e:	ee1b 1a10 	vmov	r1, s22
    8982:	aa24      	add	r2, sp, #144	; 0x90
    8984:	4658      	mov	r0, fp
    8986:	f004 f883 	bl	ca90 <__ssprint_r>
    898a:	2800      	cmp	r0, #0
    898c:	f47f ade5 	bne.w	855a <_svfprintf_r+0x8ca>
    8990:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    8994:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    8998:	e5fb      	b.n	8592 <_svfprintf_r+0x902>
    899a:	f018 0f01 	tst.w	r8, #1
    899e:	f43f ab0f 	beq.w	7fc0 <_svfprintf_r+0x330>
    89a2:	e52a      	b.n	83fa <_svfprintf_r+0x76a>
    89a4:	9308      	str	r3, [sp, #32]
    89a6:	f899 3000 	ldrb.w	r3, [r9]
    89aa:	f7ff b9cd 	b.w	7d48 <_svfprintf_r+0xb8>
    89ae:	ac50      	add	r4, sp, #320	; 0x140
    89b0:	e4df      	b.n	8372 <_svfprintf_r+0x6e2>
    89b2:	f418 7f00 	tst.w	r8, #512	; 0x200
    89b6:	f040 83db 	bne.w	9170 <_svfprintf_r+0x14e0>
    89ba:	f853 2b04 	ldr.w	r2, [r3], #4
    89be:	9308      	str	r3, [sp, #32]
    89c0:	17d1      	asrs	r1, r2, #31
    89c2:	460b      	mov	r3, r1
    89c4:	f7ff bbb6 	b.w	8134 <_svfprintf_r+0x4a4>
    89c8:	9b08      	ldr	r3, [sp, #32]
    89ca:	9804      	ldr	r0, [sp, #16]
    89cc:	f853 1b04 	ldr.w	r1, [r3], #4
    89d0:	9308      	str	r3, [sp, #32]
    89d2:	17c2      	asrs	r2, r0, #31
    89d4:	e9c1 0200 	strd	r0, r2, [r1]
    89d8:	464c      	mov	r4, r9
    89da:	f7ff b98b 	b.w	7cf4 <_svfprintf_r+0x64>
    89de:	bf00      	nop
    89e0:	20002380 	.word	0x20002380
    89e4:	20007a3c 	.word	0x20007a3c
    89e8:	9b08      	ldr	r3, [sp, #32]
    89ea:	f853 2b04 	ldr.w	r2, [r3], #4
    89ee:	9308      	str	r3, [sp, #32]
    89f0:	e458      	b.n	82a4 <_svfprintf_r+0x614>
    89f2:	eeb4 8b48 	vcmp.f64	d8, d8
    89f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    89fa:	f180 8694 	bvs.w	9726 <_svfprintf_r+0x1a96>
    89fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8a00:	2b61      	cmp	r3, #97	; 0x61
    8a02:	f000 8552 	beq.w	94aa <_svfprintf_r+0x181a>
    8a06:	2b41      	cmp	r3, #65	; 0x41
    8a08:	f000 85c0 	beq.w	958c <_svfprintf_r+0x18fc>
    8a0c:	9b03      	ldr	r3, [sp, #12]
    8a0e:	3301      	adds	r3, #1
    8a10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8a12:	f023 0520 	bic.w	r5, r3, #32
    8a16:	f000 8480 	beq.w	931a <_svfprintf_r+0x168a>
    8a1a:	2d47      	cmp	r5, #71	; 0x47
    8a1c:	d104      	bne.n	8a28 <_svfprintf_r+0xd98>
    8a1e:	9b03      	ldr	r3, [sp, #12]
    8a20:	2b00      	cmp	r3, #0
    8a22:	bf08      	it	eq
    8a24:	2301      	moveq	r3, #1
    8a26:	9303      	str	r3, [sp, #12]
    8a28:	ee18 3a90 	vmov	r3, s17
    8a2c:	2b00      	cmp	r3, #0
    8a2e:	f448 7280 	orr.w	r2, r8, #256	; 0x100
    8a32:	4646      	mov	r6, r8
    8a34:	f2c0 8618 	blt.w	9668 <_svfprintf_r+0x19d8>
    8a38:	eeb0 ab48 	vmov.f64	d10, d8
    8a3c:	2300      	movs	r3, #0
    8a3e:	4690      	mov	r8, r2
    8a40:	9309      	str	r3, [sp, #36]	; 0x24
    8a42:	9307      	str	r3, [sp, #28]
    8a44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8a46:	3b41      	subs	r3, #65	; 0x41
    8a48:	2b25      	cmp	r3, #37	; 0x25
    8a4a:	f200 8398 	bhi.w	917e <_svfprintf_r+0x14ee>
    8a4e:	e8df f013 	tbh	[pc, r3, lsl #1]
    8a52:	046f      	.short	0x046f
    8a54:	03960396 	.word	0x03960396
    8a58:	04680396 	.word	0x04680396
    8a5c:	0396046c 	.word	0x0396046c
    8a60:	03960396 	.word	0x03960396
    8a64:	03960396 	.word	0x03960396
    8a68:	03960396 	.word	0x03960396
    8a6c:	03960396 	.word	0x03960396
    8a70:	03960396 	.word	0x03960396
    8a74:	03960396 	.word	0x03960396
    8a78:	03960396 	.word	0x03960396
    8a7c:	03960396 	.word	0x03960396
    8a80:	03960396 	.word	0x03960396
    8a84:	03960396 	.word	0x03960396
    8a88:	03960396 	.word	0x03960396
    8a8c:	03960396 	.word	0x03960396
    8a90:	03960396 	.word	0x03960396
    8a94:	03960396 	.word	0x03960396
    8a98:	04680396 	.word	0x04680396
    8a9c:	046c      	.short	0x046c
    8a9e:	9b08      	ldr	r3, [sp, #32]
    8aa0:	f853 2b04 	ldr.w	r2, [r3], #4
    8aa4:	9308      	str	r3, [sp, #32]
    8aa6:	2301      	movs	r3, #1
    8aa8:	f7ff bb97 	b.w	81da <_svfprintf_r+0x54a>
    8aac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    8aae:	2b00      	cmp	r3, #0
    8ab0:	f43f a9cf 	beq.w	7e52 <_svfprintf_r+0x1c2>
    8ab4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    8ab6:	781b      	ldrb	r3, [r3, #0]
    8ab8:	2b00      	cmp	r3, #0
    8aba:	f43f a9ca 	beq.w	7e52 <_svfprintf_r+0x1c2>
    8abe:	f899 3000 	ldrb.w	r3, [r9]
    8ac2:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
    8ac6:	f7ff b93f 	b.w	7d48 <_svfprintf_r+0xb8>
    8aca:	930b      	str	r3, [sp, #44]	; 0x2c
    8acc:	f8cd 8008 	str.w	r8, [sp, #8]
    8ad0:	f7ff bbf1 	b.w	82b6 <_svfprintf_r+0x626>
    8ad4:	930b      	str	r3, [sp, #44]	; 0x2c
    8ad6:	4b9a      	ldr	r3, [pc, #616]	; (8d40 <_svfprintf_r+0x10b0>)
    8ad8:	9311      	str	r3, [sp, #68]	; 0x44
    8ada:	f018 0120 	ands.w	r1, r8, #32
    8ade:	f000 8105 	beq.w	8cec <_svfprintf_r+0x105c>
    8ae2:	9b08      	ldr	r3, [sp, #32]
    8ae4:	3307      	adds	r3, #7
    8ae6:	f023 0307 	bic.w	r3, r3, #7
    8aea:	6859      	ldr	r1, [r3, #4]
    8aec:	f853 2b08 	ldr.w	r2, [r3], #8
    8af0:	9308      	str	r3, [sp, #32]
    8af2:	f018 0f01 	tst.w	r8, #1
    8af6:	d00a      	beq.n	8b0e <_svfprintf_r+0xe7e>
    8af8:	ea52 0301 	orrs.w	r3, r2, r1
    8afc:	d007      	beq.n	8b0e <_svfprintf_r+0xe7e>
    8afe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8b00:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    8b04:	2330      	movs	r3, #48	; 0x30
    8b06:	f048 0802 	orr.w	r8, r8, #2
    8b0a:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    8b0e:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
    8b12:	9302      	str	r3, [sp, #8]
    8b14:	2302      	movs	r3, #2
    8b16:	f7ff bb60 	b.w	81da <_svfprintf_r+0x54a>
    8b1a:	930b      	str	r3, [sp, #44]	; 0x2c
    8b1c:	f7ff bbb6 	b.w	828c <_svfprintf_r+0x5fc>
    8b20:	930b      	str	r3, [sp, #44]	; 0x2c
    8b22:	4b88      	ldr	r3, [pc, #544]	; (8d44 <_svfprintf_r+0x10b4>)
    8b24:	9311      	str	r3, [sp, #68]	; 0x44
    8b26:	e7d8      	b.n	8ada <_svfprintf_r+0xe4a>
    8b28:	9b08      	ldr	r3, [sp, #32]
    8b2a:	2101      	movs	r1, #1
    8b2c:	f853 2b04 	ldr.w	r2, [r3], #4
    8b30:	9102      	str	r1, [sp, #8]
    8b32:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
    8b36:	9308      	str	r3, [sp, #32]
    8b38:	9105      	str	r1, [sp, #20]
    8b3a:	ac37      	add	r4, sp, #220	; 0xdc
    8b3c:	f7ff baaf 	b.w	809e <_svfprintf_r+0x40e>
    8b40:	ee1b 1a10 	vmov	r1, s22
    8b44:	aa24      	add	r2, sp, #144	; 0x90
    8b46:	4658      	mov	r0, fp
    8b48:	f003 ffa2 	bl	ca90 <__ssprint_r>
    8b4c:	2800      	cmp	r0, #0
    8b4e:	f47f ad04 	bne.w	855a <_svfprintf_r+0x8ca>
    8b52:	9a26      	ldr	r2, [sp, #152]	; 0x98
    8b54:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    8b58:	e45d      	b.n	8416 <_svfprintf_r+0x786>
    8b5a:	9b03      	ldr	r3, [sp, #12]
    8b5c:	9407      	str	r4, [sp, #28]
    8b5e:	2b06      	cmp	r3, #6
    8b60:	4622      	mov	r2, r4
    8b62:	bf28      	it	cs
    8b64:	2306      	movcs	r3, #6
    8b66:	9403      	str	r4, [sp, #12]
    8b68:	4621      	mov	r1, r4
    8b6a:	e9cd 220c 	strd	r2, r2, [sp, #48]	; 0x30
    8b6e:	4c76      	ldr	r4, [pc, #472]	; (8d48 <_svfprintf_r+0x10b8>)
    8b70:	9302      	str	r3, [sp, #8]
    8b72:	9305      	str	r3, [sp, #20]
    8b74:	920f      	str	r2, [sp, #60]	; 0x3c
    8b76:	f7ff ba6c 	b.w	8052 <_svfprintf_r+0x3c2>
    8b7a:	2140      	movs	r1, #64	; 0x40
    8b7c:	4658      	mov	r0, fp
    8b7e:	f7fb fa29 	bl	3fd4 <_malloc_r>
    8b82:	6020      	str	r0, [r4, #0]
    8b84:	6120      	str	r0, [r4, #16]
    8b86:	2800      	cmp	r0, #0
    8b88:	f000 860f 	beq.w	97aa <_svfprintf_r+0x1b1a>
    8b8c:	2340      	movs	r3, #64	; 0x40
    8b8e:	6163      	str	r3, [r4, #20]
    8b90:	f7ff b89e 	b.w	7cd0 <_svfprintf_r+0x40>
    8b94:	2d10      	cmp	r5, #16
    8b96:	9b25      	ldr	r3, [sp, #148]	; 0x94
    8b98:	f340 825d 	ble.w	9056 <_svfprintf_r+0x13c6>
    8b9c:	4651      	mov	r1, sl
    8b9e:	2610      	movs	r6, #16
    8ba0:	ee1b aa10 	vmov	sl, s22
    8ba4:	e004      	b.n	8bb0 <_svfprintf_r+0xf20>
    8ba6:	3108      	adds	r1, #8
    8ba8:	3d10      	subs	r5, #16
    8baa:	2d10      	cmp	r5, #16
    8bac:	f340 8252 	ble.w	9054 <_svfprintf_r+0x13c4>
    8bb0:	3301      	adds	r3, #1
    8bb2:	4866      	ldr	r0, [pc, #408]	; (8d4c <_svfprintf_r+0x10bc>)
    8bb4:	3210      	adds	r2, #16
    8bb6:	2b07      	cmp	r3, #7
    8bb8:	e9c1 0600 	strd	r0, r6, [r1]
    8bbc:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    8bc0:	ddf1      	ble.n	8ba6 <_svfprintf_r+0xf16>
    8bc2:	aa24      	add	r2, sp, #144	; 0x90
    8bc4:	4651      	mov	r1, sl
    8bc6:	4658      	mov	r0, fp
    8bc8:	f003 ff62 	bl	ca90 <__ssprint_r>
    8bcc:	2800      	cmp	r0, #0
    8bce:	f47f acc4 	bne.w	855a <_svfprintf_r+0x8ca>
    8bd2:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    8bd6:	a927      	add	r1, sp, #156	; 0x9c
    8bd8:	e7e6      	b.n	8ba8 <_svfprintf_r+0xf18>
    8bda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8bdc:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    8be0:	18e3      	adds	r3, r4, r3
    8be2:	9303      	str	r3, [sp, #12]
    8be4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8be6:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    8bea:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    8bec:	9d05      	ldr	r5, [sp, #20]
    8bee:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
    8bf2:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
    8bf6:	940b      	str	r4, [sp, #44]	; 0x2c
    8bf8:	ee1b 1a10 	vmov	r1, s22
    8bfc:	4650      	mov	r0, sl
    8bfe:	2b00      	cmp	r3, #0
    8c00:	d034      	beq.n	8c6c <_svfprintf_r+0xfdc>
    8c02:	f1b8 0f00 	cmp.w	r8, #0
    8c06:	d135      	bne.n	8c74 <_svfprintf_r+0xfe4>
    8c08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8c0a:	3b01      	subs	r3, #1
    8c0c:	3e01      	subs	r6, #1
    8c0e:	930d      	str	r3, [sp, #52]	; 0x34
    8c10:	9b15      	ldr	r3, [sp, #84]	; 0x54
    8c12:	e9c0 3900 	strd	r3, r9, [r0]
    8c16:	9b25      	ldr	r3, [sp, #148]	; 0x94
    8c18:	3301      	adds	r3, #1
    8c1a:	444a      	add	r2, r9
    8c1c:	2b07      	cmp	r3, #7
    8c1e:	9226      	str	r2, [sp, #152]	; 0x98
    8c20:	9325      	str	r3, [sp, #148]	; 0x94
    8c22:	dc6c      	bgt.n	8cfe <_svfprintf_r+0x106e>
    8c24:	3008      	adds	r0, #8
    8c26:	9b03      	ldr	r3, [sp, #12]
    8c28:	f896 c000 	ldrb.w	ip, [r6]
    8c2c:	1b5b      	subs	r3, r3, r5
    8c2e:	4563      	cmp	r3, ip
    8c30:	bfa8      	it	ge
    8c32:	4663      	movge	r3, ip
    8c34:	2b00      	cmp	r3, #0
    8c36:	469a      	mov	sl, r3
    8c38:	dd0c      	ble.n	8c54 <_svfprintf_r+0xfc4>
    8c3a:	9c25      	ldr	r4, [sp, #148]	; 0x94
    8c3c:	3401      	adds	r4, #1
    8c3e:	441a      	add	r2, r3
    8c40:	2c07      	cmp	r4, #7
    8c42:	e9c0 5300 	strd	r5, r3, [r0]
    8c46:	9226      	str	r2, [sp, #152]	; 0x98
    8c48:	9425      	str	r4, [sp, #148]	; 0x94
    8c4a:	f300 8177 	bgt.w	8f3c <_svfprintf_r+0x12ac>
    8c4e:	f896 c000 	ldrb.w	ip, [r6]
    8c52:	3008      	adds	r0, #8
    8c54:	f1ba 0f00 	cmp.w	sl, #0
    8c58:	bfac      	ite	ge
    8c5a:	ebac 040a 	subge.w	r4, ip, sl
    8c5e:	4664      	movlt	r4, ip
    8c60:	2c00      	cmp	r4, #0
    8c62:	dc0a      	bgt.n	8c7a <_svfprintf_r+0xfea>
    8c64:	4465      	add	r5, ip
    8c66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8c68:	2b00      	cmp	r3, #0
    8c6a:	d1ca      	bne.n	8c02 <_svfprintf_r+0xf72>
    8c6c:	f1b8 0f00 	cmp.w	r8, #0
    8c70:	f000 83ac 	beq.w	93cc <_svfprintf_r+0x173c>
    8c74:	f108 38ff 	add.w	r8, r8, #4294967295
    8c78:	e7ca      	b.n	8c10 <_svfprintf_r+0xf80>
    8c7a:	2c10      	cmp	r4, #16
    8c7c:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
    8c80:	dd24      	ble.n	8ccc <_svfprintf_r+0x103c>
    8c82:	9505      	str	r5, [sp, #20]
    8c84:	f04f 0a10 	mov.w	sl, #16
    8c88:	4663      	mov	r3, ip
    8c8a:	460d      	mov	r5, r1
    8c8c:	e004      	b.n	8c98 <_svfprintf_r+0x1008>
    8c8e:	3c10      	subs	r4, #16
    8c90:	2c10      	cmp	r4, #16
    8c92:	f100 0008 	add.w	r0, r0, #8
    8c96:	dd16      	ble.n	8cc6 <_svfprintf_r+0x1036>
    8c98:	3301      	adds	r3, #1
    8c9a:	492c      	ldr	r1, [pc, #176]	; (8d4c <_svfprintf_r+0x10bc>)
    8c9c:	3210      	adds	r2, #16
    8c9e:	2b07      	cmp	r3, #7
    8ca0:	e9c0 1a00 	strd	r1, sl, [r0]
    8ca4:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    8ca8:	ddf1      	ble.n	8c8e <_svfprintf_r+0xffe>
    8caa:	aa24      	add	r2, sp, #144	; 0x90
    8cac:	4629      	mov	r1, r5
    8cae:	4658      	mov	r0, fp
    8cb0:	f003 feee 	bl	ca90 <__ssprint_r>
    8cb4:	2800      	cmp	r0, #0
    8cb6:	f47f ac50 	bne.w	855a <_svfprintf_r+0x8ca>
    8cba:	3c10      	subs	r4, #16
    8cbc:	2c10      	cmp	r4, #16
    8cbe:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    8cc2:	a827      	add	r0, sp, #156	; 0x9c
    8cc4:	dce8      	bgt.n	8c98 <_svfprintf_r+0x1008>
    8cc6:	4629      	mov	r1, r5
    8cc8:	9d05      	ldr	r5, [sp, #20]
    8cca:	469c      	mov	ip, r3
    8ccc:	f10c 0301 	add.w	r3, ip, #1
    8cd0:	4422      	add	r2, r4
    8cd2:	6044      	str	r4, [r0, #4]
    8cd4:	2b07      	cmp	r3, #7
    8cd6:	4c1d      	ldr	r4, [pc, #116]	; (8d4c <_svfprintf_r+0x10bc>)
    8cd8:	6004      	str	r4, [r0, #0]
    8cda:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    8cde:	f300 83c6 	bgt.w	946e <_svfprintf_r+0x17de>
    8ce2:	f896 c000 	ldrb.w	ip, [r6]
    8ce6:	3008      	adds	r0, #8
    8ce8:	4465      	add	r5, ip
    8cea:	e7bc      	b.n	8c66 <_svfprintf_r+0xfd6>
    8cec:	f018 0310 	ands.w	r3, r8, #16
    8cf0:	f000 80c2 	beq.w	8e78 <_svfprintf_r+0x11e8>
    8cf4:	9b08      	ldr	r3, [sp, #32]
    8cf6:	f853 2b04 	ldr.w	r2, [r3], #4
    8cfa:	9308      	str	r3, [sp, #32]
    8cfc:	e6f9      	b.n	8af2 <_svfprintf_r+0xe62>
    8cfe:	aa24      	add	r2, sp, #144	; 0x90
    8d00:	4658      	mov	r0, fp
    8d02:	9105      	str	r1, [sp, #20]
    8d04:	f003 fec4 	bl	ca90 <__ssprint_r>
    8d08:	2800      	cmp	r0, #0
    8d0a:	f47f ac26 	bne.w	855a <_svfprintf_r+0x8ca>
    8d0e:	9a26      	ldr	r2, [sp, #152]	; 0x98
    8d10:	9905      	ldr	r1, [sp, #20]
    8d12:	a827      	add	r0, sp, #156	; 0x9c
    8d14:	e787      	b.n	8c26 <_svfprintf_r+0xf96>
    8d16:	9802      	ldr	r0, [sp, #8]
    8d18:	f8cd a01c 	str.w	sl, [sp, #28]
    8d1c:	ac50      	add	r4, sp, #320	; 0x140
    8d1e:	f400 6080 	and.w	r0, r0, #1024	; 0x400
    8d22:	2500      	movs	r5, #0
    8d24:	ee0a ba10 	vmov	s20, fp
    8d28:	4b09      	ldr	r3, [pc, #36]	; (8d50 <_svfprintf_r+0x10c0>)
    8d2a:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
    8d2e:	f8cd 9014 	str.w	r9, [sp, #20]
    8d32:	46a3      	mov	fp, r4
    8d34:	f04f 0805 	mov.w	r8, #5
    8d38:	46ac      	mov	ip, r5
    8d3a:	4604      	mov	r4, r0
    8d3c:	e010      	b.n	8d60 <_svfprintf_r+0x10d0>
    8d3e:	bf00      	nop
    8d40:	200008d4 	.word	0x200008d4
    8d44:	200008e8 	.word	0x200008e8
    8d48:	200008fc 	.word	0x200008fc
    8d4c:	20007a3c 	.word	0x20007a3c
    8d50:	cccccccd 	.word	0xcccccccd
    8d54:	2a0a      	cmp	r2, #10
    8d56:	f171 0100 	sbcs.w	r1, r1, #0
    8d5a:	d336      	bcc.n	8dca <_svfprintf_r+0x113a>
    8d5c:	464a      	mov	r2, r9
    8d5e:	4631      	mov	r1, r6
    8d60:	1850      	adds	r0, r2, r1
    8d62:	f140 0000 	adc.w	r0, r0, #0
    8d66:	fba3 5600 	umull	r5, r6, r3, r0
    8d6a:	f026 0503 	bic.w	r5, r6, #3
    8d6e:	eb05 0596 	add.w	r5, r5, r6, lsr #2
    8d72:	1b40      	subs	r0, r0, r5
    8d74:	1a15      	subs	r5, r2, r0
    8d76:	f04f 36cc 	mov.w	r6, #3435973836	; 0xcccccccc
    8d7a:	f161 0e00 	sbc.w	lr, r1, #0
    8d7e:	fb06 f605 	mul.w	r6, r6, r5
    8d82:	fba5 9503 	umull	r9, r5, r5, r3
    8d86:	fb03 660e 	mla	r6, r3, lr, r6
    8d8a:	f009 0e01 	and.w	lr, r9, #1
    8d8e:	442e      	add	r6, r5
    8d90:	fbae 5e08 	umull	r5, lr, lr, r8
    8d94:	182d      	adds	r5, r5, r0
    8d96:	ea4f 0959 	mov.w	r9, r9, lsr #1
    8d9a:	3530      	adds	r5, #48	; 0x30
    8d9c:	f80b 5c01 	strb.w	r5, [fp, #-1]
    8da0:	ea49 79c6 	orr.w	r9, r9, r6, lsl #31
    8da4:	f10c 0c01 	add.w	ip, ip, #1
    8da8:	f10b 3bff 	add.w	fp, fp, #4294967295
    8dac:	0876      	lsrs	r6, r6, #1
    8dae:	2c00      	cmp	r4, #0
    8db0:	d0d0      	beq.n	8d54 <_svfprintf_r+0x10c4>
    8db2:	f89a 0000 	ldrb.w	r0, [sl]
    8db6:	4584      	cmp	ip, r0
    8db8:	d1cc      	bne.n	8d54 <_svfprintf_r+0x10c4>
    8dba:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    8dbe:	d0c9      	beq.n	8d54 <_svfprintf_r+0x10c4>
    8dc0:	2a0a      	cmp	r2, #10
    8dc2:	f171 0100 	sbcs.w	r1, r1, #0
    8dc6:	f080 818f 	bcs.w	90e8 <_svfprintf_r+0x1458>
    8dca:	465c      	mov	r4, fp
    8dcc:	ab50      	add	r3, sp, #320	; 0x140
    8dce:	1b1b      	subs	r3, r3, r4
    8dd0:	f8dd 9014 	ldr.w	r9, [sp, #20]
    8dd4:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
    8dd8:	ee1a ba10 	vmov	fp, s20
    8ddc:	f8dd a01c 	ldr.w	sl, [sp, #28]
    8de0:	f8dd 8008 	ldr.w	r8, [sp, #8]
    8de4:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
    8de8:	9305      	str	r3, [sp, #20]
    8dea:	f7ff bac2 	b.w	8372 <_svfprintf_r+0x6e2>
    8dee:	ee1b 1a10 	vmov	r1, s22
    8df2:	aa24      	add	r2, sp, #144	; 0x90
    8df4:	4658      	mov	r0, fp
    8df6:	f003 fe4b 	bl	ca90 <__ssprint_r>
    8dfa:	2800      	cmp	r0, #0
    8dfc:	f47f abad 	bne.w	855a <_svfprintf_r+0x8ca>
    8e00:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    8e04:	9a26      	ldr	r2, [sp, #152]	; 0x98
    8e06:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    8e0a:	f7ff b896 	b.w	7f3a <_svfprintf_r+0x2aa>
    8e0e:	9b25      	ldr	r3, [sp, #148]	; 0x94
    8e10:	48be      	ldr	r0, [pc, #760]	; (910c <_svfprintf_r+0x147c>)
    8e12:	f8ca 0000 	str.w	r0, [sl]
    8e16:	3301      	adds	r3, #1
    8e18:	3201      	adds	r2, #1
    8e1a:	2001      	movs	r0, #1
    8e1c:	2b07      	cmp	r3, #7
    8e1e:	9226      	str	r2, [sp, #152]	; 0x98
    8e20:	9325      	str	r3, [sp, #148]	; 0x94
    8e22:	f8ca 0004 	str.w	r0, [sl, #4]
    8e26:	f300 8177 	bgt.w	9118 <_svfprintf_r+0x1488>
    8e2a:	f10a 0a08 	add.w	sl, sl, #8
    8e2e:	2900      	cmp	r1, #0
    8e30:	f040 80af 	bne.w	8f92 <_svfprintf_r+0x1302>
    8e34:	990e      	ldr	r1, [sp, #56]	; 0x38
    8e36:	f008 0301 	and.w	r3, r8, #1
    8e3a:	430b      	orrs	r3, r1
    8e3c:	f43f a8c0 	beq.w	7fc0 <_svfprintf_r+0x330>
    8e40:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8e42:	9912      	ldr	r1, [sp, #72]	; 0x48
    8e44:	441a      	add	r2, r3
    8e46:	e9ca 1300 	strd	r1, r3, [sl]
    8e4a:	9b25      	ldr	r3, [sp, #148]	; 0x94
    8e4c:	9226      	str	r2, [sp, #152]	; 0x98
    8e4e:	3301      	adds	r3, #1
    8e50:	2b07      	cmp	r3, #7
    8e52:	9325      	str	r3, [sp, #148]	; 0x94
    8e54:	f300 8252 	bgt.w	92fc <_svfprintf_r+0x166c>
    8e58:	f10a 0a08 	add.w	sl, sl, #8
    8e5c:	990e      	ldr	r1, [sp, #56]	; 0x38
    8e5e:	f8ca 4000 	str.w	r4, [sl]
    8e62:	3301      	adds	r3, #1
    8e64:	440a      	add	r2, r1
    8e66:	2b07      	cmp	r3, #7
    8e68:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    8e6c:	f8ca 1004 	str.w	r1, [sl, #4]
    8e70:	f77f a8a4 	ble.w	7fbc <_svfprintf_r+0x32c>
    8e74:	f7ff bbbd 	b.w	85f2 <_svfprintf_r+0x962>
    8e78:	f018 0240 	ands.w	r2, r8, #64	; 0x40
    8e7c:	f000 80dd 	beq.w	903a <_svfprintf_r+0x13aa>
    8e80:	9808      	ldr	r0, [sp, #32]
    8e82:	f850 2b04 	ldr.w	r2, [r0], #4
    8e86:	9008      	str	r0, [sp, #32]
    8e88:	4619      	mov	r1, r3
    8e8a:	b292      	uxth	r2, r2
    8e8c:	e631      	b.n	8af2 <_svfprintf_r+0xe62>
    8e8e:	ee1b 1a10 	vmov	r1, s22
    8e92:	aa24      	add	r2, sp, #144	; 0x90
    8e94:	4658      	mov	r0, fp
    8e96:	f003 fdfb 	bl	ca90 <__ssprint_r>
    8e9a:	2800      	cmp	r0, #0
    8e9c:	f47f ab5d 	bne.w	855a <_svfprintf_r+0x8ca>
    8ea0:	9a26      	ldr	r2, [sp, #152]	; 0x98
    8ea2:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    8ea6:	f7ff baa3 	b.w	83f0 <_svfprintf_r+0x760>
    8eaa:	ae22      	add	r6, sp, #136	; 0x88
    8eac:	2208      	movs	r2, #8
    8eae:	2100      	movs	r1, #0
    8eb0:	4630      	mov	r0, r6
    8eb2:	941d      	str	r4, [sp, #116]	; 0x74
    8eb4:	f7fc ffb0 	bl	5e18 <memset>
    8eb8:	9b03      	ldr	r3, [sp, #12]
    8eba:	1c5a      	adds	r2, r3, #1
    8ebc:	f000 80db 	beq.w	9076 <_svfprintf_r+0x13e6>
    8ec0:	2500      	movs	r5, #0
    8ec2:	f8cd 9008 	str.w	r9, [sp, #8]
    8ec6:	f8cd 801c 	str.w	r8, [sp, #28]
    8eca:	4699      	mov	r9, r3
    8ecc:	46a8      	mov	r8, r5
    8ece:	e00c      	b.n	8eea <_svfprintf_r+0x125a>
    8ed0:	a937      	add	r1, sp, #220	; 0xdc
    8ed2:	4658      	mov	r0, fp
    8ed4:	f003 fcb2 	bl	c83c <_wcrtomb_r>
    8ed8:	1c43      	adds	r3, r0, #1
    8eda:	4440      	add	r0, r8
    8edc:	f000 83c8 	beq.w	9670 <_svfprintf_r+0x19e0>
    8ee0:	4548      	cmp	r0, r9
    8ee2:	dc08      	bgt.n	8ef6 <_svfprintf_r+0x1266>
    8ee4:	f000 8418 	beq.w	9718 <_svfprintf_r+0x1a88>
    8ee8:	4680      	mov	r8, r0
    8eea:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    8eec:	5952      	ldr	r2, [r2, r5]
    8eee:	4633      	mov	r3, r6
    8ef0:	3504      	adds	r5, #4
    8ef2:	2a00      	cmp	r2, #0
    8ef4:	d1ec      	bne.n	8ed0 <_svfprintf_r+0x1240>
    8ef6:	f8cd 8014 	str.w	r8, [sp, #20]
    8efa:	f8dd 9008 	ldr.w	r9, [sp, #8]
    8efe:	f8dd 801c 	ldr.w	r8, [sp, #28]
    8f02:	e0c5      	b.n	9090 <_svfprintf_r+0x1400>
    8f04:	3301      	adds	r3, #1
    8f06:	4982      	ldr	r1, [pc, #520]	; (9110 <_svfprintf_r+0x1480>)
    8f08:	f8ca 4004 	str.w	r4, [sl, #4]
    8f0c:	4422      	add	r2, r4
    8f0e:	2b07      	cmp	r3, #7
    8f10:	f8ca 1000 	str.w	r1, [sl]
    8f14:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    8f18:	f77f a850 	ble.w	7fbc <_svfprintf_r+0x32c>
    8f1c:	f7ff bb69 	b.w	85f2 <_svfprintf_r+0x962>
    8f20:	ee1b 1a10 	vmov	r1, s22
    8f24:	aa24      	add	r2, sp, #144	; 0x90
    8f26:	4658      	mov	r0, fp
    8f28:	f003 fdb2 	bl	ca90 <__ssprint_r>
    8f2c:	2800      	cmp	r0, #0
    8f2e:	f47f ab14 	bne.w	855a <_svfprintf_r+0x8ca>
    8f32:	9a26      	ldr	r2, [sp, #152]	; 0x98
    8f34:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    8f38:	f7ff b829 	b.w	7f8e <_svfprintf_r+0x2fe>
    8f3c:	aa24      	add	r2, sp, #144	; 0x90
    8f3e:	4658      	mov	r0, fp
    8f40:	9105      	str	r1, [sp, #20]
    8f42:	f003 fda5 	bl	ca90 <__ssprint_r>
    8f46:	2800      	cmp	r0, #0
    8f48:	f47f ab07 	bne.w	855a <_svfprintf_r+0x8ca>
    8f4c:	f896 c000 	ldrb.w	ip, [r6]
    8f50:	9a26      	ldr	r2, [sp, #152]	; 0x98
    8f52:	9905      	ldr	r1, [sp, #20]
    8f54:	a827      	add	r0, sp, #156	; 0x9c
    8f56:	e67d      	b.n	8c54 <_svfprintf_r+0xfc4>
    8f58:	2b01      	cmp	r3, #1
    8f5a:	f8cd 8008 	str.w	r8, [sp, #8]
    8f5e:	f47f a9f3 	bne.w	8348 <_svfprintf_r+0x6b8>
    8f62:	f7ff bb93 	b.w	868c <_svfprintf_r+0x9fc>
    8f66:	9b08      	ldr	r3, [sp, #32]
    8f68:	9904      	ldr	r1, [sp, #16]
    8f6a:	f853 2b04 	ldr.w	r2, [r3], #4
    8f6e:	464c      	mov	r4, r9
    8f70:	6011      	str	r1, [r2, #0]
    8f72:	9308      	str	r3, [sp, #32]
    8f74:	f7fe bebe 	b.w	7cf4 <_svfprintf_r+0x64>
    8f78:	3301      	adds	r3, #1
    8f7a:	4965      	ldr	r1, [pc, #404]	; (9110 <_svfprintf_r+0x1480>)
    8f7c:	f8ca 4004 	str.w	r4, [sl, #4]
    8f80:	4422      	add	r2, r4
    8f82:	2b07      	cmp	r3, #7
    8f84:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    8f88:	f8ca 1000 	str.w	r1, [sl]
    8f8c:	f77f ab22 	ble.w	85d4 <_svfprintf_r+0x944>
    8f90:	e47b      	b.n	888a <_svfprintf_r+0xbfa>
    8f92:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8f94:	9812      	ldr	r0, [sp, #72]	; 0x48
    8f96:	441a      	add	r2, r3
    8f98:	e9ca 0300 	strd	r0, r3, [sl]
    8f9c:	9b25      	ldr	r3, [sp, #148]	; 0x94
    8f9e:	9226      	str	r2, [sp, #152]	; 0x98
    8fa0:	3301      	adds	r3, #1
    8fa2:	2b07      	cmp	r3, #7
    8fa4:	9325      	str	r3, [sp, #148]	; 0x94
    8fa6:	f300 81a9 	bgt.w	92fc <_svfprintf_r+0x166c>
    8faa:	f10a 0a08 	add.w	sl, sl, #8
    8fae:	2900      	cmp	r1, #0
    8fb0:	f6bf af54 	bge.w	8e5c <_svfprintf_r+0x11cc>
    8fb4:	424d      	negs	r5, r1
    8fb6:	3110      	adds	r1, #16
    8fb8:	f280 830f 	bge.w	95da <_svfprintf_r+0x194a>
    8fbc:	ee1b 1a10 	vmov	r1, s22
    8fc0:	2610      	movs	r6, #16
    8fc2:	e005      	b.n	8fd0 <_svfprintf_r+0x1340>
    8fc4:	f10a 0a08 	add.w	sl, sl, #8
    8fc8:	3d10      	subs	r5, #16
    8fca:	2d10      	cmp	r5, #16
    8fcc:	f340 8305 	ble.w	95da <_svfprintf_r+0x194a>
    8fd0:	3301      	adds	r3, #1
    8fd2:	484f      	ldr	r0, [pc, #316]	; (9110 <_svfprintf_r+0x1480>)
    8fd4:	3210      	adds	r2, #16
    8fd6:	2b07      	cmp	r3, #7
    8fd8:	e9ca 0600 	strd	r0, r6, [sl]
    8fdc:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    8fe0:	ddf0      	ble.n	8fc4 <_svfprintf_r+0x1334>
    8fe2:	aa24      	add	r2, sp, #144	; 0x90
    8fe4:	4658      	mov	r0, fp
    8fe6:	9103      	str	r1, [sp, #12]
    8fe8:	f003 fd52 	bl	ca90 <__ssprint_r>
    8fec:	2800      	cmp	r0, #0
    8fee:	f47f aab4 	bne.w	855a <_svfprintf_r+0x8ca>
    8ff2:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    8ff6:	9903      	ldr	r1, [sp, #12]
    8ff8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    8ffc:	e7e4      	b.n	8fc8 <_svfprintf_r+0x1338>
    8ffe:	9b08      	ldr	r3, [sp, #32]
    9000:	f418 7100 	ands.w	r1, r8, #512	; 0x200
    9004:	bf1a      	itte	ne
    9006:	4611      	movne	r1, r2
    9008:	f853 2b04 	ldrne.w	r2, [r3], #4
    900c:	f853 2b04 	ldreq.w	r2, [r3], #4
    9010:	9308      	str	r3, [sp, #32]
    9012:	bf18      	it	ne
    9014:	b2d2      	uxtbne	r2, r2
    9016:	f7ff b945 	b.w	82a4 <_svfprintf_r+0x614>
    901a:	9b02      	ldr	r3, [sp, #8]
    901c:	f413 7100 	ands.w	r1, r3, #512	; 0x200
    9020:	9b08      	ldr	r3, [sp, #32]
    9022:	bf1a      	itte	ne
    9024:	4611      	movne	r1, r2
    9026:	f853 2b04 	ldrne.w	r2, [r3], #4
    902a:	f853 2b04 	ldreq.w	r2, [r3], #4
    902e:	9308      	str	r3, [sp, #32]
    9030:	bf18      	it	ne
    9032:	b2d2      	uxtbne	r2, r2
    9034:	2301      	movs	r3, #1
    9036:	f7ff b8d0 	b.w	81da <_svfprintf_r+0x54a>
    903a:	9b08      	ldr	r3, [sp, #32]
    903c:	f418 7100 	ands.w	r1, r8, #512	; 0x200
    9040:	bf1a      	itte	ne
    9042:	4611      	movne	r1, r2
    9044:	f853 2b04 	ldrne.w	r2, [r3], #4
    9048:	f853 2b04 	ldreq.w	r2, [r3], #4
    904c:	9308      	str	r3, [sp, #32]
    904e:	bf18      	it	ne
    9050:	b2d2      	uxtbne	r2, r2
    9052:	e54e      	b.n	8af2 <_svfprintf_r+0xe62>
    9054:	468a      	mov	sl, r1
    9056:	3301      	adds	r3, #1
    9058:	492d      	ldr	r1, [pc, #180]	; (9110 <_svfprintf_r+0x1480>)
    905a:	f8ca 5004 	str.w	r5, [sl, #4]
    905e:	442a      	add	r2, r5
    9060:	2b07      	cmp	r3, #7
    9062:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    9066:	f8ca 1000 	str.w	r1, [sl]
    906a:	f300 8139 	bgt.w	92e0 <_svfprintf_r+0x1650>
    906e:	f10a 0a08 	add.w	sl, sl, #8
    9072:	f7ff bb8c 	b.w	878e <_svfprintf_r+0xafe>
    9076:	2300      	movs	r3, #0
    9078:	4619      	mov	r1, r3
    907a:	9600      	str	r6, [sp, #0]
    907c:	aa1d      	add	r2, sp, #116	; 0x74
    907e:	4658      	mov	r0, fp
    9080:	f003 fc02 	bl	c888 <_wcsrtombs_r>
    9084:	4603      	mov	r3, r0
    9086:	3301      	adds	r3, #1
    9088:	9005      	str	r0, [sp, #20]
    908a:	f000 82f1 	beq.w	9670 <_svfprintf_r+0x19e0>
    908e:	941d      	str	r4, [sp, #116]	; 0x74
    9090:	9b05      	ldr	r3, [sp, #20]
    9092:	2b00      	cmp	r3, #0
    9094:	d04e      	beq.n	9134 <_svfprintf_r+0x14a4>
    9096:	2b63      	cmp	r3, #99	; 0x63
    9098:	f300 8118 	bgt.w	92cc <_svfprintf_r+0x163c>
    909c:	2300      	movs	r3, #0
    909e:	9307      	str	r3, [sp, #28]
    90a0:	ac37      	add	r4, sp, #220	; 0xdc
    90a2:	2208      	movs	r2, #8
    90a4:	2100      	movs	r1, #0
    90a6:	4630      	mov	r0, r6
    90a8:	f7fc feb6 	bl	5e18 <memset>
    90ac:	9d05      	ldr	r5, [sp, #20]
    90ae:	9600      	str	r6, [sp, #0]
    90b0:	462b      	mov	r3, r5
    90b2:	aa1d      	add	r2, sp, #116	; 0x74
    90b4:	4621      	mov	r1, r4
    90b6:	4658      	mov	r0, fp
    90b8:	f003 fbe6 	bl	c888 <_wcsrtombs_r>
    90bc:	4285      	cmp	r5, r0
    90be:	f040 837c 	bne.w	97ba <_svfprintf_r+0x1b2a>
    90c2:	9a05      	ldr	r2, [sp, #20]
    90c4:	2300      	movs	r3, #0
    90c6:	54a3      	strb	r3, [r4, r2]
    90c8:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    90cc:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    90d0:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    90d4:	9303      	str	r3, [sp, #12]
    90d6:	9202      	str	r2, [sp, #8]
    90d8:	930f      	str	r3, [sp, #60]	; 0x3c
    90da:	f7fe bfba 	b.w	8052 <_svfprintf_r+0x3c2>
    90de:	212d      	movs	r1, #45	; 0x2d
    90e0:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    90e4:	f7fe bfa4 	b.w	8030 <_svfprintf_r+0x3a0>
    90e8:	9b16      	ldr	r3, [sp, #88]	; 0x58
    90ea:	9915      	ldr	r1, [sp, #84]	; 0x54
    90ec:	ebab 0b03 	sub.w	fp, fp, r3
    90f0:	461a      	mov	r2, r3
    90f2:	4658      	mov	r0, fp
    90f4:	f7fc ff8e 	bl	6014 <strncpy>
    90f8:	f89a 2001 	ldrb.w	r2, [sl, #1]
    90fc:	4b05      	ldr	r3, [pc, #20]	; (9114 <_svfprintf_r+0x1484>)
    90fe:	b10a      	cbz	r2, 9104 <_svfprintf_r+0x1474>
    9100:	f10a 0a01 	add.w	sl, sl, #1
    9104:	f04f 0c00 	mov.w	ip, #0
    9108:	e628      	b.n	8d5c <_svfprintf_r+0x10cc>
    910a:	bf00      	nop
    910c:	20000904 	.word	0x20000904
    9110:	20007a3c 	.word	0x20007a3c
    9114:	cccccccd 	.word	0xcccccccd
    9118:	ee1b 1a10 	vmov	r1, s22
    911c:	aa24      	add	r2, sp, #144	; 0x90
    911e:	4658      	mov	r0, fp
    9120:	f003 fcb6 	bl	ca90 <__ssprint_r>
    9124:	2800      	cmp	r0, #0
    9126:	f47f aa18 	bne.w	855a <_svfprintf_r+0x8ca>
    912a:	991b      	ldr	r1, [sp, #108]	; 0x6c
    912c:	9a26      	ldr	r2, [sp, #152]	; 0x98
    912e:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    9132:	e67c      	b.n	8e2e <_svfprintf_r+0x119e>
    9134:	9b05      	ldr	r3, [sp, #20]
    9136:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    913a:	930f      	str	r3, [sp, #60]	; 0x3c
    913c:	e9cd 3302 	strd	r3, r3, [sp, #8]
    9140:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    9144:	9307      	str	r3, [sp, #28]
    9146:	f7fe bf84 	b.w	8052 <_svfprintf_r+0x3c2>
    914a:	990e      	ldr	r1, [sp, #56]	; 0x38
    914c:	9805      	ldr	r0, [sp, #20]
    914e:	1865      	adds	r5, r4, r1
    9150:	1a2d      	subs	r5, r5, r0
    9152:	1acc      	subs	r4, r1, r3
    9154:	42a5      	cmp	r5, r4
    9156:	bfa8      	it	ge
    9158:	4625      	movge	r5, r4
    915a:	f7ff bb4d 	b.w	87f8 <_svfprintf_r+0xb68>
    915e:	9b08      	ldr	r3, [sp, #32]
    9160:	9904      	ldr	r1, [sp, #16]
    9162:	f853 2b04 	ldr.w	r2, [r3], #4
    9166:	9308      	str	r3, [sp, #32]
    9168:	8011      	strh	r1, [r2, #0]
    916a:	464c      	mov	r4, r9
    916c:	f7fe bdc2 	b.w	7cf4 <_svfprintf_r+0x64>
    9170:	f913 2b04 	ldrsb.w	r2, [r3], #4
    9174:	9308      	str	r3, [sp, #32]
    9176:	17d1      	asrs	r1, r2, #31
    9178:	460b      	mov	r3, r1
    917a:	f7fe bfdb 	b.w	8134 <_svfprintf_r+0x4a4>
    917e:	9a03      	ldr	r2, [sp, #12]
    9180:	2102      	movs	r1, #2
    9182:	ab22      	add	r3, sp, #136	; 0x88
    9184:	9301      	str	r3, [sp, #4]
    9186:	ab1d      	add	r3, sp, #116	; 0x74
    9188:	9300      	str	r3, [sp, #0]
    918a:	4658      	mov	r0, fp
    918c:	ab1b      	add	r3, sp, #108	; 0x6c
    918e:	eeb0 0b4a 	vmov.f64	d0, d10
    9192:	9202      	str	r2, [sp, #8]
    9194:	f002 fa88 	bl	b6a8 <_dtoa_r>
    9198:	2d47      	cmp	r5, #71	; 0x47
    919a:	9a02      	ldr	r2, [sp, #8]
    919c:	4604      	mov	r4, r0
    919e:	f000 8161 	beq.w	9464 <_svfprintf_r+0x17d4>
    91a2:	2d46      	cmp	r5, #70	; 0x46
    91a4:	4410      	add	r0, r2
    91a6:	d105      	bne.n	91b4 <_svfprintf_r+0x1524>
    91a8:	7823      	ldrb	r3, [r4, #0]
    91aa:	2b30      	cmp	r3, #48	; 0x30
    91ac:	f000 826f 	beq.w	968e <_svfprintf_r+0x19fe>
    91b0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    91b2:	4410      	add	r0, r2
    91b4:	eeb5 ab40 	vcmp.f64	d10, #0.0
    91b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    91bc:	f040 8146 	bne.w	944c <_svfprintf_r+0x17bc>
    91c0:	4603      	mov	r3, r0
    91c2:	1b1b      	subs	r3, r3, r4
    91c4:	930e      	str	r3, [sp, #56]	; 0x38
    91c6:	2d47      	cmp	r5, #71	; 0x47
    91c8:	f000 8110 	beq.w	93ec <_svfprintf_r+0x175c>
    91cc:	2d46      	cmp	r5, #70	; 0x46
    91ce:	f000 81b5 	beq.w	953c <_svfprintf_r+0x18ac>
    91d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    91d4:	930c      	str	r3, [sp, #48]	; 0x30
    91d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    91d8:	2d41      	cmp	r5, #65	; 0x41
    91da:	f103 33ff 	add.w	r3, r3, #4294967295
    91de:	931b      	str	r3, [sp, #108]	; 0x6c
    91e0:	f000 81e5 	beq.w	95ae <_svfprintf_r+0x191e>
    91e4:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
    91e8:	2100      	movs	r1, #0
    91ea:	2b00      	cmp	r3, #0
    91ec:	bfb8      	it	lt
    91ee:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
    91f0:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
    91f4:	bfba      	itte	lt
    91f6:	f1c3 0301 	rsblt	r3, r3, #1
    91fa:	222d      	movlt	r2, #45	; 0x2d
    91fc:	222b      	movge	r2, #43	; 0x2b
    91fe:	2b09      	cmp	r3, #9
    9200:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
    9204:	f340 81da 	ble.w	95bc <_svfprintf_r+0x192c>
    9208:	f10d 058f 	add.w	r5, sp, #143	; 0x8f
    920c:	f8df c41c 	ldr.w	ip, [pc, #1052]	; 962c <_svfprintf_r+0x199c>
    9210:	462a      	mov	r2, r5
    9212:	4610      	mov	r0, r2
    9214:	fb8c 2103 	smull	r2, r1, ip, r3
    9218:	17da      	asrs	r2, r3, #31
    921a:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
    921e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    9222:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
    9226:	3130      	adds	r1, #48	; 0x30
    9228:	f800 1c01 	strb.w	r1, [r0, #-1]
    922c:	4619      	mov	r1, r3
    922e:	2963      	cmp	r1, #99	; 0x63
    9230:	4613      	mov	r3, r2
    9232:	f100 32ff 	add.w	r2, r0, #4294967295
    9236:	dcec      	bgt.n	9212 <_svfprintf_r+0x1582>
    9238:	3330      	adds	r3, #48	; 0x30
    923a:	b2d9      	uxtb	r1, r3
    923c:	1e83      	subs	r3, r0, #2
    923e:	429d      	cmp	r5, r3
    9240:	f802 1c01 	strb.w	r1, [r2, #-1]
    9244:	f240 828b 	bls.w	975e <_svfprintf_r+0x1ace>
    9248:	4613      	mov	r3, r2
    924a:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    924e:	e001      	b.n	9254 <_svfprintf_r+0x15c4>
    9250:	f813 1b01 	ldrb.w	r1, [r3], #1
    9254:	f802 1b01 	strb.w	r1, [r2], #1
    9258:	429d      	cmp	r5, r3
    925a:	d1f9      	bne.n	9250 <_svfprintf_r+0x15c0>
    925c:	f10d 0391 	add.w	r3, sp, #145	; 0x91
    9260:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    9264:	1a1b      	subs	r3, r3, r0
    9266:	4413      	add	r3, r2
    9268:	aa1e      	add	r2, sp, #120	; 0x78
    926a:	1a9b      	subs	r3, r3, r2
    926c:	9314      	str	r3, [sp, #80]	; 0x50
    926e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9270:	9a14      	ldr	r2, [sp, #80]	; 0x50
    9272:	2b01      	cmp	r3, #1
    9274:	441a      	add	r2, r3
    9276:	9205      	str	r2, [sp, #20]
    9278:	f340 8203 	ble.w	9682 <_svfprintf_r+0x19f2>
    927c:	9b05      	ldr	r3, [sp, #20]
    927e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    9280:	4413      	add	r3, r2
    9282:	9305      	str	r3, [sp, #20]
    9284:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
    9288:	9a05      	ldr	r2, [sp, #20]
    928a:	f443 7880 	orr.w	r8, r3, #256	; 0x100
    928e:	2300      	movs	r3, #0
    9290:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    9294:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    9298:	930f      	str	r3, [sp, #60]	; 0x3c
    929a:	9202      	str	r2, [sp, #8]
    929c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    929e:	2b00      	cmp	r3, #0
    92a0:	f040 80b1 	bne.w	9406 <_svfprintf_r+0x1776>
    92a4:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    92a8:	9303      	str	r3, [sp, #12]
    92aa:	f7fe bed2 	b.w	8052 <_svfprintf_r+0x3c2>
    92ae:	4620      	mov	r0, r4
    92b0:	f7fd f966 	bl	6580 <strlen>
    92b4:	4602      	mov	r2, r0
    92b6:	9005      	str	r0, [sp, #20]
    92b8:	f7fe bf20 	b.w	80fc <_svfprintf_r+0x46c>
    92bc:	ee1b 1a10 	vmov	r1, s22
    92c0:	aa24      	add	r2, sp, #144	; 0x90
    92c2:	4658      	mov	r0, fp
    92c4:	f003 fbe4 	bl	ca90 <__ssprint_r>
    92c8:	f7fe bded 	b.w	7ea6 <_svfprintf_r+0x216>
    92cc:	1c59      	adds	r1, r3, #1
    92ce:	4658      	mov	r0, fp
    92d0:	f7fa fe80 	bl	3fd4 <_malloc_r>
    92d4:	4604      	mov	r4, r0
    92d6:	2800      	cmp	r0, #0
    92d8:	f000 81ca 	beq.w	9670 <_svfprintf_r+0x19e0>
    92dc:	9007      	str	r0, [sp, #28]
    92de:	e6e0      	b.n	90a2 <_svfprintf_r+0x1412>
    92e0:	ee1b 1a10 	vmov	r1, s22
    92e4:	aa24      	add	r2, sp, #144	; 0x90
    92e6:	4658      	mov	r0, fp
    92e8:	f003 fbd2 	bl	ca90 <__ssprint_r>
    92ec:	2800      	cmp	r0, #0
    92ee:	f47f a934 	bne.w	855a <_svfprintf_r+0x8ca>
    92f2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    92f4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    92f8:	f7ff ba49 	b.w	878e <_svfprintf_r+0xafe>
    92fc:	ee1b 1a10 	vmov	r1, s22
    9300:	aa24      	add	r2, sp, #144	; 0x90
    9302:	4658      	mov	r0, fp
    9304:	f003 fbc4 	bl	ca90 <__ssprint_r>
    9308:	2800      	cmp	r0, #0
    930a:	f47f a926 	bne.w	855a <_svfprintf_r+0x8ca>
    930e:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    9312:	991b      	ldr	r1, [sp, #108]	; 0x6c
    9314:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    9318:	e649      	b.n	8fae <_svfprintf_r+0x131e>
    931a:	2306      	movs	r3, #6
    931c:	9303      	str	r3, [sp, #12]
    931e:	f7ff bb83 	b.w	8a28 <_svfprintf_r+0xd98>
    9322:	9b03      	ldr	r3, [sp, #12]
    9324:	2102      	movs	r1, #2
    9326:	1c5a      	adds	r2, r3, #1
    9328:	e72b      	b.n	9182 <_svfprintf_r+0x14f2>
    932a:	9a03      	ldr	r2, [sp, #12]
    932c:	2103      	movs	r1, #3
    932e:	e728      	b.n	9182 <_svfprintf_r+0x14f2>
    9330:	a81b      	add	r0, sp, #108	; 0x6c
    9332:	eeb0 0b4a 	vmov.f64	d0, d10
    9336:	f002 f88b 	bl	b450 <frexp>
    933a:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
    933e:	ee20 0b07 	vmul.f64	d0, d0, d7
    9342:	eeb5 0b40 	vcmp.f64	d0, #0.0
    9346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    934a:	d101      	bne.n	9350 <_svfprintf_r+0x16c0>
    934c:	2301      	movs	r3, #1
    934e:	931b      	str	r3, [sp, #108]	; 0x6c
    9350:	48b3      	ldr	r0, [pc, #716]	; (9620 <_svfprintf_r+0x1990>)
    9352:	9b03      	ldr	r3, [sp, #12]
    9354:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
    9358:	3b01      	subs	r3, #1
    935a:	4622      	mov	r2, r4
    935c:	e004      	b.n	9368 <_svfprintf_r+0x16d8>
    935e:	eeb5 0b40 	vcmp.f64	d0, #0.0
    9362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9366:	d013      	beq.n	9390 <_svfprintf_r+0x1700>
    9368:	ee20 0b05 	vmul.f64	d0, d0, d5
    936c:	eefd 7bc0 	vcvt.s32.f64	s15, d0
    9370:	f1b3 3fff 	cmp.w	r3, #4294967295
    9374:	ee17 1a90 	vmov	r1, s15
    9378:	5c41      	ldrb	r1, [r0, r1]
    937a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    937e:	4694      	mov	ip, r2
    9380:	ee30 0b46 	vsub.f64	d0, d0, d6
    9384:	f802 1b01 	strb.w	r1, [r2], #1
    9388:	4619      	mov	r1, r3
    938a:	f103 33ff 	add.w	r3, r3, #4294967295
    938e:	d1e6      	bne.n	935e <_svfprintf_r+0x16ce>
    9390:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    9394:	eeb4 0bc6 	vcmpe.f64	d0, d6
    9398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    939c:	f300 8148 	bgt.w	9630 <_svfprintf_r+0x19a0>
    93a0:	eeb4 0b46 	vcmp.f64	d0, d6
    93a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    93a8:	d104      	bne.n	93b4 <_svfprintf_r+0x1724>
    93aa:	ee17 3a90 	vmov	r3, s15
    93ae:	07db      	lsls	r3, r3, #31
    93b0:	f100 813e 	bmi.w	9630 <_svfprintf_r+0x19a0>
    93b4:	2900      	cmp	r1, #0
    93b6:	db06      	blt.n	93c6 <_svfprintf_r+0x1736>
    93b8:	1c4b      	adds	r3, r1, #1
    93ba:	4413      	add	r3, r2
    93bc:	2130      	movs	r1, #48	; 0x30
    93be:	f802 1b01 	strb.w	r1, [r2], #1
    93c2:	4293      	cmp	r3, r2
    93c4:	d1fb      	bne.n	93be <_svfprintf_r+0x172e>
    93c6:	1b13      	subs	r3, r2, r4
    93c8:	930e      	str	r3, [sp, #56]	; 0x38
    93ca:	e6fc      	b.n	91c6 <_svfprintf_r+0x1536>
    93cc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    93ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    93d0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    93d4:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    93d8:	9613      	str	r6, [sp, #76]	; 0x4c
    93da:	18e3      	adds	r3, r4, r3
    93dc:	429d      	cmp	r5, r3
    93de:	4629      	mov	r1, r5
    93e0:	bf28      	it	cs
    93e2:	4619      	movcs	r1, r3
    93e4:	4682      	mov	sl, r0
    93e6:	9105      	str	r1, [sp, #20]
    93e8:	f7ff b9d8 	b.w	879c <_svfprintf_r+0xb0c>
    93ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    93ee:	930c      	str	r3, [sp, #48]	; 0x30
    93f0:	1cda      	adds	r2, r3, #3
    93f2:	db02      	blt.n	93fa <_svfprintf_r+0x176a>
    93f4:	9a03      	ldr	r2, [sp, #12]
    93f6:	4293      	cmp	r3, r2
    93f8:	dd0c      	ble.n	9414 <_svfprintf_r+0x1784>
    93fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    93fc:	3b02      	subs	r3, #2
    93fe:	930b      	str	r3, [sp, #44]	; 0x2c
    9400:	f023 0520 	bic.w	r5, r3, #32
    9404:	e6e7      	b.n	91d6 <_svfprintf_r+0x1546>
    9406:	212d      	movs	r1, #45	; 0x2d
    9408:	2300      	movs	r3, #0
    940a:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    940e:	9303      	str	r3, [sp, #12]
    9410:	f7fe be22 	b.w	8058 <_svfprintf_r+0x3c8>
    9414:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9416:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    9418:	4293      	cmp	r3, r2
    941a:	f2c0 80bd 	blt.w	9598 <_svfprintf_r+0x1908>
    941e:	07f0      	lsls	r0, r6, #31
    9420:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9422:	f140 8132 	bpl.w	968a <_svfprintf_r+0x19fa>
    9426:	9a10      	ldr	r2, [sp, #64]	; 0x40
    9428:	4413      	add	r3, r2
    942a:	9305      	str	r3, [sp, #20]
    942c:	0571      	lsls	r1, r6, #21
    942e:	d503      	bpl.n	9438 <_svfprintf_r+0x17a8>
    9430:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9432:	2b00      	cmp	r3, #0
    9434:	f300 8135 	bgt.w	96a2 <_svfprintf_r+0x1a12>
    9438:	9b05      	ldr	r3, [sp, #20]
    943a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    943e:	9302      	str	r3, [sp, #8]
    9440:	2367      	movs	r3, #103	; 0x67
    9442:	930b      	str	r3, [sp, #44]	; 0x2c
    9444:	2300      	movs	r3, #0
    9446:	930f      	str	r3, [sp, #60]	; 0x3c
    9448:	930d      	str	r3, [sp, #52]	; 0x34
    944a:	e727      	b.n	929c <_svfprintf_r+0x160c>
    944c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    944e:	4283      	cmp	r3, r0
    9450:	f4bf aeb7 	bcs.w	91c2 <_svfprintf_r+0x1532>
    9454:	2130      	movs	r1, #48	; 0x30
    9456:	1c5a      	adds	r2, r3, #1
    9458:	9222      	str	r2, [sp, #136]	; 0x88
    945a:	7019      	strb	r1, [r3, #0]
    945c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    945e:	4298      	cmp	r0, r3
    9460:	d8f9      	bhi.n	9456 <_svfprintf_r+0x17c6>
    9462:	e6ae      	b.n	91c2 <_svfprintf_r+0x1532>
    9464:	07f3      	lsls	r3, r6, #31
    9466:	f100 80a7 	bmi.w	95b8 <_svfprintf_r+0x1928>
    946a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    946c:	e6a9      	b.n	91c2 <_svfprintf_r+0x1532>
    946e:	aa24      	add	r2, sp, #144	; 0x90
    9470:	4658      	mov	r0, fp
    9472:	9105      	str	r1, [sp, #20]
    9474:	f003 fb0c 	bl	ca90 <__ssprint_r>
    9478:	2800      	cmp	r0, #0
    947a:	f47f a86e 	bne.w	855a <_svfprintf_r+0x8ca>
    947e:	f896 c000 	ldrb.w	ip, [r6]
    9482:	9a26      	ldr	r2, [sp, #152]	; 0x98
    9484:	9905      	ldr	r1, [sp, #20]
    9486:	a827      	add	r0, sp, #156	; 0x9c
    9488:	4465      	add	r5, ip
    948a:	f7ff bbec 	b.w	8c66 <_svfprintf_r+0xfd6>
    948e:	ee1b 1a10 	vmov	r1, s22
    9492:	aa24      	add	r2, sp, #144	; 0x90
    9494:	4658      	mov	r0, fp
    9496:	f003 fafb 	bl	ca90 <__ssprint_r>
    949a:	2800      	cmp	r0, #0
    949c:	f47f a85d 	bne.w	855a <_svfprintf_r+0x8ca>
    94a0:	9a26      	ldr	r2, [sp, #152]	; 0x98
    94a2:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    94a6:	f7ff b96b 	b.w	8780 <_svfprintf_r+0xaf0>
    94aa:	2378      	movs	r3, #120	; 0x78
    94ac:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    94b0:	2330      	movs	r3, #48	; 0x30
    94b2:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    94b6:	9b03      	ldr	r3, [sp, #12]
    94b8:	2b63      	cmp	r3, #99	; 0x63
    94ba:	f048 0602 	orr.w	r6, r8, #2
    94be:	f300 80a6 	bgt.w	960e <_svfprintf_r+0x197e>
    94c2:	2300      	movs	r3, #0
    94c4:	9307      	str	r3, [sp, #28]
    94c6:	ac37      	add	r4, sp, #220	; 0xdc
    94c8:	ee18 3a90 	vmov	r3, s17
    94cc:	2b00      	cmp	r3, #0
    94ce:	f448 7881 	orr.w	r8, r8, #258	; 0x102
    94d2:	db2b      	blt.n	952c <_svfprintf_r+0x189c>
    94d4:	eeb0 ab48 	vmov.f64	d10, d8
    94d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    94da:	f023 0520 	bic.w	r5, r3, #32
    94de:	2300      	movs	r3, #0
    94e0:	9309      	str	r3, [sp, #36]	; 0x24
    94e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    94e4:	2b61      	cmp	r3, #97	; 0x61
    94e6:	f47f aaad 	bne.w	8a44 <_svfprintf_r+0xdb4>
    94ea:	eeb0 0b4a 	vmov.f64	d0, d10
    94ee:	a81b      	add	r0, sp, #108	; 0x6c
    94f0:	f001 ffae 	bl	b450 <frexp>
    94f4:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
    94f8:	ee20 0b07 	vmul.f64	d0, d0, d7
    94fc:	eeb5 0b40 	vcmp.f64	d0, #0.0
    9500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9504:	d101      	bne.n	950a <_svfprintf_r+0x187a>
    9506:	2301      	movs	r3, #1
    9508:	931b      	str	r3, [sp, #108]	; 0x6c
    950a:	4846      	ldr	r0, [pc, #280]	; (9624 <_svfprintf_r+0x1994>)
    950c:	e721      	b.n	9352 <_svfprintf_r+0x16c2>
    950e:	ee1b 1a10 	vmov	r1, s22
    9512:	aa24      	add	r2, sp, #144	; 0x90
    9514:	4658      	mov	r0, fp
    9516:	f003 fabb 	bl	ca90 <__ssprint_r>
    951a:	2800      	cmp	r0, #0
    951c:	f47f a81d 	bne.w	855a <_svfprintf_r+0x8ca>
    9520:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    9522:	9a26      	ldr	r2, [sp, #152]	; 0x98
    9524:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    9528:	f7ff b94e 	b.w	87c8 <_svfprintf_r+0xb38>
    952c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    952e:	f023 0520 	bic.w	r5, r3, #32
    9532:	232d      	movs	r3, #45	; 0x2d
    9534:	9309      	str	r3, [sp, #36]	; 0x24
    9536:	eeb1 ab48 	vneg.f64	d10, d8
    953a:	e7d2      	b.n	94e2 <_svfprintf_r+0x1852>
    953c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    953e:	920c      	str	r2, [sp, #48]	; 0x30
    9540:	2a00      	cmp	r2, #0
    9542:	f006 0301 	and.w	r3, r6, #1
    9546:	f340 810d 	ble.w	9764 <_svfprintf_r+0x1ad4>
    954a:	9903      	ldr	r1, [sp, #12]
    954c:	430b      	orrs	r3, r1
    954e:	f040 80cf 	bne.w	96f0 <_svfprintf_r+0x1a60>
    9552:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9554:	9305      	str	r3, [sp, #20]
    9556:	2366      	movs	r3, #102	; 0x66
    9558:	930b      	str	r3, [sp, #44]	; 0x2c
    955a:	0572      	lsls	r2, r6, #21
    955c:	f100 80a3 	bmi.w	96a6 <_svfprintf_r+0x1a16>
    9560:	9b05      	ldr	r3, [sp, #20]
    9562:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    9566:	9302      	str	r3, [sp, #8]
    9568:	e76c      	b.n	9444 <_svfprintf_r+0x17b4>
    956a:	ee1b 1a10 	vmov	r1, s22
    956e:	aa24      	add	r2, sp, #144	; 0x90
    9570:	4658      	mov	r0, fp
    9572:	f003 fa8d 	bl	ca90 <__ssprint_r>
    9576:	2800      	cmp	r0, #0
    9578:	f47e afef 	bne.w	855a <_svfprintf_r+0x8ca>
    957c:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
    957e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9580:	9a26      	ldr	r2, [sp, #152]	; 0x98
    9582:	1b1c      	subs	r4, r3, r4
    9584:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    9588:	f7ff b936 	b.w	87f8 <_svfprintf_r+0xb68>
    958c:	2358      	movs	r3, #88	; 0x58
    958e:	e78d      	b.n	94ac <_svfprintf_r+0x181c>
    9590:	2200      	movs	r2, #0
    9592:	9203      	str	r2, [sp, #12]
    9594:	f7fe bbda 	b.w	7d4c <_svfprintf_r+0xbc>
    9598:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    959a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    959c:	189a      	adds	r2, r3, r2
    959e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    95a0:	9205      	str	r2, [sp, #20]
    95a2:	2b00      	cmp	r3, #0
    95a4:	f340 80ab 	ble.w	96fe <_svfprintf_r+0x1a6e>
    95a8:	2367      	movs	r3, #103	; 0x67
    95aa:	930b      	str	r3, [sp, #44]	; 0x2c
    95ac:	e7d5      	b.n	955a <_svfprintf_r+0x18ca>
    95ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    95b0:	320f      	adds	r2, #15
    95b2:	b2d2      	uxtb	r2, r2
    95b4:	2101      	movs	r1, #1
    95b6:	e618      	b.n	91ea <_svfprintf_r+0x155a>
    95b8:	18a0      	adds	r0, r4, r2
    95ba:	e5fb      	b.n	91b4 <_svfprintf_r+0x1524>
    95bc:	2900      	cmp	r1, #0
    95be:	f040 80a8 	bne.w	9712 <_svfprintf_r+0x1a82>
    95c2:	2230      	movs	r2, #48	; 0x30
    95c4:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
    95c8:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
    95cc:	3330      	adds	r3, #48	; 0x30
    95ce:	f802 3b01 	strb.w	r3, [r2], #1
    95d2:	ab1e      	add	r3, sp, #120	; 0x78
    95d4:	1ad3      	subs	r3, r2, r3
    95d6:	9314      	str	r3, [sp, #80]	; 0x50
    95d8:	e649      	b.n	926e <_svfprintf_r+0x15de>
    95da:	3301      	adds	r3, #1
    95dc:	4912      	ldr	r1, [pc, #72]	; (9628 <_svfprintf_r+0x1998>)
    95de:	f8ca 5004 	str.w	r5, [sl, #4]
    95e2:	442a      	add	r2, r5
    95e4:	2b07      	cmp	r3, #7
    95e6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    95ea:	f8ca 1000 	str.w	r1, [sl]
    95ee:	f77f ac33 	ble.w	8e58 <_svfprintf_r+0x11c8>
    95f2:	ee1b 1a10 	vmov	r1, s22
    95f6:	aa24      	add	r2, sp, #144	; 0x90
    95f8:	4658      	mov	r0, fp
    95fa:	f003 fa49 	bl	ca90 <__ssprint_r>
    95fe:	2800      	cmp	r0, #0
    9600:	f47e afab 	bne.w	855a <_svfprintf_r+0x8ca>
    9604:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    9608:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    960c:	e426      	b.n	8e5c <_svfprintf_r+0x11cc>
    960e:	1c59      	adds	r1, r3, #1
    9610:	4658      	mov	r0, fp
    9612:	f7fa fcdf 	bl	3fd4 <_malloc_r>
    9616:	4604      	mov	r4, r0
    9618:	b350      	cbz	r0, 9670 <_svfprintf_r+0x19e0>
    961a:	9007      	str	r0, [sp, #28]
    961c:	e754      	b.n	94c8 <_svfprintf_r+0x1838>
    961e:	bf00      	nop
    9620:	200008e8 	.word	0x200008e8
    9624:	200008d4 	.word	0x200008d4
    9628:	20007a3c 	.word	0x20007a3c
    962c:	66666667 	.word	0x66666667
    9630:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
    9634:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    9638:	f890 c00f 	ldrb.w	ip, [r0, #15]
    963c:	4561      	cmp	r1, ip
    963e:	4613      	mov	r3, r2
    9640:	d10a      	bne.n	9658 <_svfprintf_r+0x19c8>
    9642:	f04f 0e30 	mov.w	lr, #48	; 0x30
    9646:	f803 ec01 	strb.w	lr, [r3, #-1]
    964a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    964c:	1e59      	subs	r1, r3, #1
    964e:	9122      	str	r1, [sp, #136]	; 0x88
    9650:	f813 1c01 	ldrb.w	r1, [r3, #-1]
    9654:	458c      	cmp	ip, r1
    9656:	d0f6      	beq.n	9646 <_svfprintf_r+0x19b6>
    9658:	2939      	cmp	r1, #57	; 0x39
    965a:	bf16      	itet	ne
    965c:	3101      	addne	r1, #1
    965e:	7a81      	ldrbeq	r1, [r0, #10]
    9660:	b2c9      	uxtbne	r1, r1
    9662:	f803 1c01 	strb.w	r1, [r3, #-1]
    9666:	e6ae      	b.n	93c6 <_svfprintf_r+0x1736>
    9668:	2300      	movs	r3, #0
    966a:	4690      	mov	r8, r2
    966c:	9307      	str	r3, [sp, #28]
    966e:	e760      	b.n	9532 <_svfprintf_r+0x18a2>
    9670:	ee1b 2a10 	vmov	r2, s22
    9674:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    9678:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    967c:	8193      	strh	r3, [r2, #12]
    967e:	f7fe bc16 	b.w	7eae <_svfprintf_r+0x21e>
    9682:	07f5      	lsls	r5, r6, #31
    9684:	f57f adfe 	bpl.w	9284 <_svfprintf_r+0x15f4>
    9688:	e5f8      	b.n	927c <_svfprintf_r+0x15ec>
    968a:	9305      	str	r3, [sp, #20]
    968c:	e6ce      	b.n	942c <_svfprintf_r+0x179c>
    968e:	eeb5 ab40 	vcmp.f64	d10, #0.0
    9692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9696:	f43f ad8b 	beq.w	91b0 <_svfprintf_r+0x1520>
    969a:	f1c2 0201 	rsb	r2, r2, #1
    969e:	921b      	str	r2, [sp, #108]	; 0x6c
    96a0:	e587      	b.n	91b2 <_svfprintf_r+0x1522>
    96a2:	2367      	movs	r3, #103	; 0x67
    96a4:	930b      	str	r3, [sp, #44]	; 0x2c
    96a6:	9913      	ldr	r1, [sp, #76]	; 0x4c
    96a8:	780b      	ldrb	r3, [r1, #0]
    96aa:	2bff      	cmp	r3, #255	; 0xff
    96ac:	d079      	beq.n	97a2 <_svfprintf_r+0x1b12>
    96ae:	2500      	movs	r5, #0
    96b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    96b2:	4628      	mov	r0, r5
    96b4:	e003      	b.n	96be <_svfprintf_r+0x1a2e>
    96b6:	3001      	adds	r0, #1
    96b8:	3101      	adds	r1, #1
    96ba:	2bff      	cmp	r3, #255	; 0xff
    96bc:	d008      	beq.n	96d0 <_svfprintf_r+0x1a40>
    96be:	4293      	cmp	r3, r2
    96c0:	da06      	bge.n	96d0 <_svfprintf_r+0x1a40>
    96c2:	1ad2      	subs	r2, r2, r3
    96c4:	784b      	ldrb	r3, [r1, #1]
    96c6:	2b00      	cmp	r3, #0
    96c8:	d1f5      	bne.n	96b6 <_svfprintf_r+0x1a26>
    96ca:	780b      	ldrb	r3, [r1, #0]
    96cc:	3501      	adds	r5, #1
    96ce:	e7f4      	b.n	96ba <_svfprintf_r+0x1a2a>
    96d0:	920c      	str	r2, [sp, #48]	; 0x30
    96d2:	9113      	str	r1, [sp, #76]	; 0x4c
    96d4:	900d      	str	r0, [sp, #52]	; 0x34
    96d6:	950f      	str	r5, [sp, #60]	; 0x3c
    96d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    96da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    96dc:	9916      	ldr	r1, [sp, #88]	; 0x58
    96de:	4413      	add	r3, r2
    96e0:	9a05      	ldr	r2, [sp, #20]
    96e2:	fb01 2303 	mla	r3, r1, r3, r2
    96e6:	9305      	str	r3, [sp, #20]
    96e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    96ec:	9302      	str	r3, [sp, #8]
    96ee:	e5d5      	b.n	929c <_svfprintf_r+0x160c>
    96f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    96f2:	18d3      	adds	r3, r2, r3
    96f4:	4419      	add	r1, r3
    96f6:	2366      	movs	r3, #102	; 0x66
    96f8:	9105      	str	r1, [sp, #20]
    96fa:	930b      	str	r3, [sp, #44]	; 0x2c
    96fc:	e72d      	b.n	955a <_svfprintf_r+0x18ca>
    96fe:	f1c3 0301 	rsb	r3, r3, #1
    9702:	441a      	add	r2, r3
    9704:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    9708:	9302      	str	r3, [sp, #8]
    970a:	2367      	movs	r3, #103	; 0x67
    970c:	9205      	str	r2, [sp, #20]
    970e:	930b      	str	r3, [sp, #44]	; 0x2c
    9710:	e698      	b.n	9444 <_svfprintf_r+0x17b4>
    9712:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    9716:	e759      	b.n	95cc <_svfprintf_r+0x193c>
    9718:	9b03      	ldr	r3, [sp, #12]
    971a:	f8dd 9008 	ldr.w	r9, [sp, #8]
    971e:	f8dd 801c 	ldr.w	r8, [sp, #28]
    9722:	9305      	str	r3, [sp, #20]
    9724:	e4b4      	b.n	9090 <_svfprintf_r+0x1400>
    9726:	ee18 3a90 	vmov	r3, s17
    972a:	2b00      	cmp	r3, #0
    972c:	bfb4      	ite	lt
    972e:	212d      	movlt	r1, #45	; 0x2d
    9730:	f89d 1067 	ldrbge.w	r1, [sp, #103]	; 0x67
    9734:	4c25      	ldr	r4, [pc, #148]	; (97cc <_svfprintf_r+0x1b3c>)
    9736:	4b26      	ldr	r3, [pc, #152]	; (97d0 <_svfprintf_r+0x1b40>)
    9738:	bfb8      	it	lt
    973a:	f88d 1067 	strblt.w	r1, [sp, #103]	; 0x67
    973e:	f028 0880 	bic.w	r8, r8, #128	; 0x80
    9742:	f7fe bc79 	b.w	8038 <_svfprintf_r+0x3a8>
    9746:	9b03      	ldr	r3, [sp, #12]
    9748:	9302      	str	r3, [sp, #8]
    974a:	9305      	str	r3, [sp, #20]
    974c:	2373      	movs	r3, #115	; 0x73
    974e:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    9752:	9003      	str	r0, [sp, #12]
    9754:	900f      	str	r0, [sp, #60]	; 0x3c
    9756:	900d      	str	r0, [sp, #52]	; 0x34
    9758:	930b      	str	r3, [sp, #44]	; 0x2c
    975a:	f7fe bc7a 	b.w	8052 <_svfprintf_r+0x3c2>
    975e:	2302      	movs	r3, #2
    9760:	9314      	str	r3, [sp, #80]	; 0x50
    9762:	e584      	b.n	926e <_svfprintf_r+0x15de>
    9764:	9a03      	ldr	r2, [sp, #12]
    9766:	4313      	orrs	r3, r2
    9768:	d105      	bne.n	9776 <_svfprintf_r+0x1ae6>
    976a:	2301      	movs	r3, #1
    976c:	2266      	movs	r2, #102	; 0x66
    976e:	9302      	str	r3, [sp, #8]
    9770:	920b      	str	r2, [sp, #44]	; 0x2c
    9772:	9305      	str	r3, [sp, #20]
    9774:	e666      	b.n	9444 <_svfprintf_r+0x17b4>
    9776:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9778:	3301      	adds	r3, #1
    977a:	441a      	add	r2, r3
    977c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    9780:	9302      	str	r3, [sp, #8]
    9782:	2366      	movs	r3, #102	; 0x66
    9784:	9205      	str	r2, [sp, #20]
    9786:	930b      	str	r3, [sp, #44]	; 0x2c
    9788:	e65c      	b.n	9444 <_svfprintf_r+0x17b4>
    978a:	9a08      	ldr	r2, [sp, #32]
    978c:	f899 3001 	ldrb.w	r3, [r9, #1]
    9790:	4689      	mov	r9, r1
    9792:	f852 1b04 	ldr.w	r1, [r2], #4
    9796:	9208      	str	r2, [sp, #32]
    9798:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
    979c:	9103      	str	r1, [sp, #12]
    979e:	f7fe bad3 	b.w	7d48 <_svfprintf_r+0xb8>
    97a2:	2300      	movs	r3, #0
    97a4:	930f      	str	r3, [sp, #60]	; 0x3c
    97a6:	930d      	str	r3, [sp, #52]	; 0x34
    97a8:	e796      	b.n	96d8 <_svfprintf_r+0x1a48>
    97aa:	230c      	movs	r3, #12
    97ac:	f8cb 3000 	str.w	r3, [fp]
    97b0:	f04f 33ff 	mov.w	r3, #4294967295
    97b4:	9304      	str	r3, [sp, #16]
    97b6:	f7fe bb81 	b.w	7ebc <_svfprintf_r+0x22c>
    97ba:	ee1b 2a10 	vmov	r2, s22
    97be:	8993      	ldrh	r3, [r2, #12]
    97c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    97c4:	8193      	strh	r3, [r2, #12]
    97c6:	f7fe bec8 	b.w	855a <_svfprintf_r+0x8ca>
    97ca:	bf00      	nop
    97cc:	200008cc 	.word	0x200008cc
    97d0:	200008d0 	.word	0x200008d0

000097d4 <__ssvfscanf_r>:
    97d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    97d8:	ed2d 8b02 	vpush	{d8}
    97dc:	f5ad 7d37 	sub.w	sp, sp, #732	; 0x2dc
    97e0:	468b      	mov	fp, r1
    97e2:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
    97e6:	af02      	add	r7, sp, #8
    97e8:	048c      	lsls	r4, r1, #18
    97ea:	4681      	mov	r9, r0
    97ec:	64fa      	str	r2, [r7, #76]	; 0x4c
    97ee:	633b      	str	r3, [r7, #48]	; 0x30
    97f0:	d409      	bmi.n	9806 <__ssvfscanf_r+0x32>
    97f2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
    97f6:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
    97fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    97fe:	f8ab 100c 	strh.w	r1, [fp, #12]
    9802:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
    9806:	2300      	movs	r3, #0
    9808:	461c      	mov	r4, r3
    980a:	2208      	movs	r2, #8
    980c:	4619      	mov	r1, r3
    980e:	f107 0058 	add.w	r0, r7, #88	; 0x58
    9812:	62fb      	str	r3, [r7, #44]	; 0x2c
    9814:	46a2      	mov	sl, r4
    9816:	f7fc faff 	bl	5e18 <memset>
    981a:	643c      	str	r4, [r7, #64]	; 0x40
    981c:	627c      	str	r4, [r7, #36]	; 0x24
    981e:	63bc      	str	r4, [r7, #56]	; 0x38
    9820:	647c      	str	r4, [r7, #68]	; 0x44
    9822:	4b83      	ldr	r3, [pc, #524]	; (9a30 <__ssvfscanf_r+0x25c>)
    9824:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
    9828:	f7fc fc26 	bl	6078 <__locale_mb_cur_max>
    982c:	f107 0258 	add.w	r2, r7, #88	; 0x58
    9830:	4603      	mov	r3, r0
    9832:	9200      	str	r2, [sp, #0]
    9834:	f107 0154 	add.w	r1, r7, #84	; 0x54
    9838:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    983a:	4648      	mov	r0, r9
    983c:	47a0      	blx	r4
    983e:	1e05      	subs	r5, r0, #0
    9840:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    9842:	db33      	blt.n	98ac <__ssvfscanf_r+0xd8>
    9844:	442b      	add	r3, r5
    9846:	64fb      	str	r3, [r7, #76]	; 0x4c
    9848:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    984a:	462e      	mov	r6, r5
    984c:	2b00      	cmp	r3, #0
    984e:	f000 80b6 	beq.w	99be <__ssvfscanf_r+0x1ea>
    9852:	2d01      	cmp	r5, #1
    9854:	d038      	beq.n	98c8 <__ssvfscanf_r+0xf4>
    9856:	2b25      	cmp	r3, #37	; 0x25
    9858:	d040      	beq.n	98dc <__ssvfscanf_r+0x108>
    985a:	2d00      	cmp	r5, #0
    985c:	d0e1      	beq.n	9822 <__ssvfscanf_r+0x4e>
    985e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    9860:	1b9e      	subs	r6, r3, r6
    9862:	f8db 3004 	ldr.w	r3, [fp, #4]
    9866:	1e74      	subs	r4, r6, #1
    9868:	2b00      	cmp	r3, #0
    986a:	f340 8098 	ble.w	999e <__ssvfscanf_r+0x1ca>
    986e:	f8db 1000 	ldr.w	r1, [fp]
    9872:	f894 c001 	ldrb.w	ip, [r4, #1]
    9876:	f891 e000 	ldrb.w	lr, [r1]
    987a:	1ca3      	adds	r3, r4, #2
    987c:	eb0a 0003 	add.w	r0, sl, r3
    9880:	45e6      	cmp	lr, ip
    9882:	f101 0101 	add.w	r1, r1, #1
    9886:	eba3 0206 	sub.w	r2, r3, r6
    988a:	f104 0401 	add.w	r4, r4, #1
    988e:	eba0 0006 	sub.w	r0, r0, r6
    9892:	f040 8094 	bne.w	99be <__ssvfscanf_r+0x1ea>
    9896:	f8db 3004 	ldr.w	r3, [fp, #4]
    989a:	f8cb 1000 	str.w	r1, [fp]
    989e:	3b01      	subs	r3, #1
    98a0:	42aa      	cmp	r2, r5
    98a2:	f8cb 3004 	str.w	r3, [fp, #4]
    98a6:	dbdf      	blt.n	9868 <__ssvfscanf_r+0x94>
    98a8:	4682      	mov	sl, r0
    98aa:	e7ba      	b.n	9822 <__ssvfscanf_r+0x4e>
    98ac:	3301      	adds	r3, #1
    98ae:	64fb      	str	r3, [r7, #76]	; 0x4c
    98b0:	2208      	movs	r2, #8
    98b2:	f64f 73fd 	movw	r3, #65533	; 0xfffd
    98b6:	2100      	movs	r1, #0
    98b8:	f107 0058 	add.w	r0, r7, #88	; 0x58
    98bc:	657b      	str	r3, [r7, #84]	; 0x54
    98be:	f7fc faab 	bl	5e18 <memset>
    98c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    98c4:	2b00      	cmp	r3, #0
    98c6:	d07a      	beq.n	99be <__ssvfscanf_r+0x1ea>
    98c8:	4e5a      	ldr	r6, [pc, #360]	; (9a34 <__ssvfscanf_r+0x260>)
    98ca:	5cf2      	ldrb	r2, [r6, r3]
    98cc:	0710      	lsls	r0, r2, #28
    98ce:	f100 851c 	bmi.w	a30a <__ssvfscanf_r+0xb36>
    98d2:	2b25      	cmp	r3, #37	; 0x25
    98d4:	f040 8086 	bne.w	99e4 <__ssvfscanf_r+0x210>
    98d8:	2501      	movs	r5, #1
    98da:	462e      	mov	r6, r5
    98dc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    98de:	2400      	movs	r4, #0
    98e0:	7802      	ldrb	r2, [r0, #0]
    98e2:	46a0      	mov	r8, r4
    98e4:	f1a2 0325 	sub.w	r3, r2, #37	; 0x25
    98e8:	1c41      	adds	r1, r0, #1
    98ea:	2b55      	cmp	r3, #85	; 0x55
    98ec:	d867      	bhi.n	99be <__ssvfscanf_r+0x1ea>
    98ee:	e8df f013 	tbh	[pc, r3, lsl #1]
    98f2:	070a      	.short	0x070a
    98f4:	00660066 	.word	0x00660066
    98f8:	00660066 	.word	0x00660066
    98fc:	00660701 	.word	0x00660701
    9900:	00660066 	.word	0x00660066
    9904:	00660066 	.word	0x00660066
    9908:	060c060c 	.word	0x060c060c
    990c:	060c060c 	.word	0x060c060c
    9910:	060c060c 	.word	0x060c060c
    9914:	060c060c 	.word	0x060c060c
    9918:	060c060c 	.word	0x060c060c
    991c:	00660066 	.word	0x00660066
    9920:	00660066 	.word	0x00660066
    9924:	00660066 	.word	0x00660066
    9928:	06180066 	.word	0x06180066
    992c:	048e0066 	.word	0x048e0066
    9930:	061804c9 	.word	0x061804c9
    9934:	06180618 	.word	0x06180618
    9938:	00660066 	.word	0x00660066
    993c:	00660066 	.word	0x00660066
    9940:	00660082 	.word	0x00660082
    9944:	04bf0066 	.word	0x04bf0066
    9948:	00660066 	.word	0x00660066
    994c:	00890066 	.word	0x00890066
    9950:	00660066 	.word	0x00660066
    9954:	00660066 	.word	0x00660066
    9958:	0066066b 	.word	0x0066066b
    995c:	06dd0066 	.word	0x06dd0066
    9960:	00660066 	.word	0x00660066
    9964:	00660066 	.word	0x00660066
    9968:	06180066 	.word	0x06180066
    996c:	04900066 	.word	0x04900066
    9970:	061804cb 	.word	0x061804cb
    9974:	06180618 	.word	0x06180618
    9978:	06d206be 	.word	0x06d206be
    997c:	00660082 	.word	0x00660082
    9980:	06f306e7 	.word	0x06f306e7
    9984:	04c106ac 	.word	0x04c106ac
    9988:	006606da 	.word	0x006606da
    998c:	008b0066 	.word	0x008b0066
    9990:	06ca007d 	.word	0x06ca007d
    9994:	00660066 	.word	0x00660066
    9998:	0066066b 	.word	0x0066066b
    999c:	007d      	.short	0x007d
    999e:	4659      	mov	r1, fp
    99a0:	4648      	mov	r0, r9
    99a2:	f003 f935 	bl	cc10 <__ssrefill_r>
    99a6:	2800      	cmp	r0, #0
    99a8:	f43f af61 	beq.w	986e <__ssvfscanf_r+0x9a>
    99ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    99ae:	2b00      	cmp	r3, #0
    99b0:	f001 8052 	beq.w	aa58 <__ssvfscanf_r+0x1284>
    99b4:	f8bb 300c 	ldrh.w	r3, [fp, #12]
    99b8:	065a      	lsls	r2, r3, #25
    99ba:	f101 804d 	bmi.w	aa58 <__ssvfscanf_r+0x1284>
    99be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    99c0:	b143      	cbz	r3, 99d4 <__ssvfscanf_r+0x200>
    99c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    99c4:	f8d3 8000 	ldr.w	r8, [r3]
    99c8:	f1b8 0f00 	cmp.w	r8, #0
    99cc:	d002      	beq.n	99d4 <__ssvfscanf_r+0x200>
    99ce:	4640      	mov	r0, r8
    99d0:	f7fa faf8 	bl	3fc4 <free>
    99d4:	6c78      	ldr	r0, [r7, #68]	; 0x44
    99d6:	f507 7735 	add.w	r7, r7, #724	; 0x2d4
    99da:	46bd      	mov	sp, r7
    99dc:	ecbd 8b02 	vpop	{d8}
    99e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    99e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    99e6:	2501      	movs	r5, #1
    99e8:	1e5e      	subs	r6, r3, #1
    99ea:	e73a      	b.n	9862 <__ssvfscanf_r+0x8e>
    99ec:	0723      	lsls	r3, r4, #28
    99ee:	d1e6      	bne.n	99be <__ssvfscanf_r+0x1ea>
    99f0:	7842      	ldrb	r2, [r0, #1]
    99f2:	4608      	mov	r0, r1
    99f4:	e776      	b.n	98e4 <__ssvfscanf_r+0x110>
    99f6:	0722      	lsls	r2, r4, #28
    99f8:	d1e1      	bne.n	99be <__ssvfscanf_r+0x1ea>
    99fa:	7842      	ldrb	r2, [r0, #1]
    99fc:	f044 0402 	orr.w	r4, r4, #2
    9a00:	4608      	mov	r0, r1
    9a02:	e76f      	b.n	98e4 <__ssvfscanf_r+0x110>
    9a04:	f044 0401 	orr.w	r4, r4, #1
    9a08:	64f9      	str	r1, [r7, #76]	; 0x4c
    9a0a:	2502      	movs	r5, #2
    9a0c:	f8db 3004 	ldr.w	r3, [fp, #4]
    9a10:	2b00      	cmp	r3, #0
    9a12:	f340 8408 	ble.w	a226 <__ssvfscanf_r+0xa52>
    9a16:	0660      	lsls	r0, r4, #25
    9a18:	f140 840f 	bpl.w	a23a <__ssvfscanf_r+0xa66>
    9a1c:	1e6b      	subs	r3, r5, #1
    9a1e:	2b03      	cmp	r3, #3
    9a20:	f201 80eb 	bhi.w	abfa <__ssvfscanf_r+0x1426>
    9a24:	e8df f013 	tbh	[pc, r3, lsl #1]
    9a28:	01f1027b 	.word	0x01f1027b
    9a2c:	0008014b 	.word	0x0008014b
    9a30:	20007c70 	.word	0x20007c70
    9a34:	2000072d 	.word	0x2000072d
    9a38:	4648      	mov	r0, r9
    9a3a:	f001 fcaf 	bl	b39c <_localeconv_r>
    9a3e:	6803      	ldr	r3, [r0, #0]
    9a40:	623b      	str	r3, [r7, #32]
    9a42:	f108 33ff 	add.w	r3, r8, #4294967295
    9a46:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
    9a4a:	f240 855a 	bls.w	a502 <__ssvfscanf_r+0xd2e>
    9a4e:	f46f 75ae 	mvn.w	r5, #348	; 0x15c
    9a52:	eb08 0305 	add.w	r3, r8, r5
    9a56:	613b      	str	r3, [r7, #16]
    9a58:	f240 185d 	movw	r8, #349	; 0x15d
    9a5c:	2600      	movs	r6, #0
    9a5e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
    9a62:	ee08 9a10 	vmov	s16, r9
    9a66:	e9c7 6605 	strd	r6, r6, [r7, #20]
    9a6a:	63fe      	str	r6, [r7, #60]	; 0x3c
    9a6c:	637e      	str	r6, [r7, #52]	; 0x34
    9a6e:	61fe      	str	r6, [r7, #28]
    9a70:	64be      	str	r6, [r7, #72]	; 0x48
    9a72:	f444 64f0 	orr.w	r4, r4, #1920	; 0x780
    9a76:	62bb      	str	r3, [r7, #40]	; 0x28
    9a78:	461d      	mov	r5, r3
    9a7a:	4646      	mov	r6, r8
    9a7c:	f8db 1000 	ldr.w	r1, [fp]
    9a80:	780a      	ldrb	r2, [r1, #0]
    9a82:	f1a2 032b 	sub.w	r3, r2, #43	; 0x2b
    9a86:	2b4e      	cmp	r3, #78	; 0x4e
    9a88:	d850      	bhi.n	9b2c <__ssvfscanf_r+0x358>
    9a8a:	e8df f013 	tbh	[pc, r3, lsl #1]
    9a8e:	037e      	.short	0x037e
    9a90:	037e004f 	.word	0x037e004f
    9a94:	004f004f 	.word	0x004f004f
    9a98:	00a600a3 	.word	0x00a600a3
    9a9c:	00a600a6 	.word	0x00a600a6
    9aa0:	00a600a6 	.word	0x00a600a6
    9aa4:	00a600a6 	.word	0x00a600a6
    9aa8:	00a600a6 	.word	0x00a600a6
    9aac:	004f004f 	.word	0x004f004f
    9ab0:	004f004f 	.word	0x004f004f
    9ab4:	004f004f 	.word	0x004f004f
    9ab8:	0374004f 	.word	0x0374004f
    9abc:	030b030b 	.word	0x030b030b
    9ac0:	039e030b 	.word	0x039e030b
    9ac4:	004f0394 	.word	0x004f0394
    9ac8:	0384004f 	.word	0x0384004f
    9acc:	004f004f 	.word	0x004f004f
    9ad0:	004f004f 	.word	0x004f004f
    9ad4:	004f035d 	.word	0x004f035d
    9ad8:	004f033a 	.word	0x004f033a
    9adc:	004f004f 	.word	0x004f004f
    9ae0:	004f0333 	.word	0x004f0333
    9ae4:	004f004f 	.word	0x004f004f
    9ae8:	036d031e 	.word	0x036d031e
    9aec:	004f004f 	.word	0x004f004f
    9af0:	004f004f 	.word	0x004f004f
    9af4:	004f004f 	.word	0x004f004f
    9af8:	0374004f 	.word	0x0374004f
    9afc:	030b030b 	.word	0x030b030b
    9b00:	039e030b 	.word	0x039e030b
    9b04:	004f0394 	.word	0x004f0394
    9b08:	0384004f 	.word	0x0384004f
    9b0c:	004f004f 	.word	0x004f004f
    9b10:	004f004f 	.word	0x004f004f
    9b14:	004f035d 	.word	0x004f035d
    9b18:	004f033a 	.word	0x004f033a
    9b1c:	004f004f 	.word	0x004f004f
    9b20:	004f0333 	.word	0x004f0333
    9b24:	004f004f 	.word	0x004f004f
    9b28:	036d031e 	.word	0x036d031e
    9b2c:	05a0      	lsls	r0, r4, #22
    9b2e:	d56f      	bpl.n	9c10 <__ssvfscanf_r+0x43c>
    9b30:	6a38      	ldr	r0, [r7, #32]
    9b32:	7803      	ldrb	r3, [r0, #0]
    9b34:	4293      	cmp	r3, r2
    9b36:	d16b      	bne.n	9c10 <__ssvfscanf_r+0x43c>
    9b38:	e9c7 4502 	strd	r4, r5, [r7, #8]
    9b3c:	607e      	str	r6, [r7, #4]
    9b3e:	4681      	mov	r9, r0
    9b40:	ee18 6a10 	vmov	r6, s16
    9b44:	f04f 0800 	mov.w	r8, #0
    9b48:	465c      	mov	r4, fp
    9b4a:	e007      	b.n	9b5c <__ssvfscanf_r+0x388>
    9b4c:	6021      	str	r1, [r4, #0]
    9b4e:	f891 e000 	ldrb.w	lr, [r1]
    9b52:	f899 0000 	ldrb.w	r0, [r9]
    9b56:	4586      	cmp	lr, r0
    9b58:	d11c      	bne.n	9b94 <__ssvfscanf_r+0x3c0>
    9b5a:	46da      	mov	sl, fp
    9b5c:	f819 0f01 	ldrb.w	r0, [r9, #1]!
    9b60:	4645      	mov	r5, r8
    9b62:	f10a 0b01 	add.w	fp, sl, #1
    9b66:	3101      	adds	r1, #1
    9b68:	f108 0801 	add.w	r8, r8, #1
    9b6c:	2800      	cmp	r0, #0
    9b6e:	f000 8664 	beq.w	a83a <__ssvfscanf_r+0x1066>
    9b72:	6860      	ldr	r0, [r4, #4]
    9b74:	3801      	subs	r0, #1
    9b76:	2800      	cmp	r0, #0
    9b78:	6060      	str	r0, [r4, #4]
    9b7a:	dce7      	bgt.n	9b4c <__ssvfscanf_r+0x378>
    9b7c:	4621      	mov	r1, r4
    9b7e:	4630      	mov	r0, r6
    9b80:	f003 f846 	bl	cc10 <__ssrefill_r>
    9b84:	b930      	cbnz	r0, 9b94 <__ssvfscanf_r+0x3c0>
    9b86:	6821      	ldr	r1, [r4, #0]
    9b88:	f899 0000 	ldrb.w	r0, [r9]
    9b8c:	f891 e000 	ldrb.w	lr, [r1]
    9b90:	4586      	cmp	lr, r0
    9b92:	d0e2      	beq.n	9b5a <__ssvfscanf_r+0x386>
    9b94:	46a3      	mov	fp, r4
    9b96:	6a3a      	ldr	r2, [r7, #32]
    9b98:	68bc      	ldr	r4, [r7, #8]
    9b9a:	613d      	str	r5, [r7, #16]
    9b9c:	462b      	mov	r3, r5
    9b9e:	46b1      	mov	r9, r6
    9ba0:	6cbe      	ldr	r6, [r7, #72]	; 0x48
    9ba2:	68fd      	ldr	r5, [r7, #12]
    9ba4:	64bd      	str	r5, [r7, #72]	; 0x48
    9ba6:	3301      	adds	r3, #1
    9ba8:	465d      	mov	r5, fp
    9baa:	eb02 0803 	add.w	r8, r2, r3
    9bae:	46b3      	mov	fp, r6
    9bb0:	4626      	mov	r6, r4
    9bb2:	4614      	mov	r4, r2
    9bb4:	f818 1d01 	ldrb.w	r1, [r8, #-1]!
    9bb8:	462a      	mov	r2, r5
    9bba:	4648      	mov	r0, r9
    9bbc:	f002 ffe8 	bl	cb90 <_sungetc_r>
    9bc0:	4544      	cmp	r4, r8
    9bc2:	d1f7      	bne.n	9bb4 <__ssvfscanf_r+0x3e0>
    9bc4:	693b      	ldr	r3, [r7, #16]
    9bc6:	4634      	mov	r4, r6
    9bc8:	ebaa 0a03 	sub.w	sl, sl, r3
    9bcc:	465e      	mov	r6, fp
    9bce:	46ab      	mov	fp, r5
    9bd0:	6cbd      	ldr	r5, [r7, #72]	; 0x48
    9bd2:	e020      	b.n	9c16 <__ssvfscanf_r+0x442>
    9bd4:	05e0      	lsls	r0, r4, #23
    9bd6:	f100 8501 	bmi.w	a5dc <__ssvfscanf_r+0xe08>
    9bda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    9bdc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    9bde:	42d9      	cmn	r1, r3
    9be0:	d116      	bne.n	9c10 <__ssvfscanf_r+0x43c>
    9be2:	f424 74c0 	bic.w	r4, r4, #384	; 0x180
    9be6:	f805 2b01 	strb.w	r2, [r5], #1
    9bea:	3e01      	subs	r6, #1
    9bec:	f8db 3004 	ldr.w	r3, [fp, #4]
    9bf0:	3b01      	subs	r3, #1
    9bf2:	2b00      	cmp	r3, #0
    9bf4:	f10a 0a01 	add.w	sl, sl, #1
    9bf8:	f8cb 3004 	str.w	r3, [fp, #4]
    9bfc:	f340 836f 	ble.w	a2de <__ssvfscanf_r+0xb0a>
    9c00:	f8db 3000 	ldr.w	r3, [fp]
    9c04:	3301      	adds	r3, #1
    9c06:	f8cb 3000 	str.w	r3, [fp]
    9c0a:	2e00      	cmp	r6, #0
    9c0c:	f47f af36 	bne.w	9a7c <__ssvfscanf_r+0x2a8>
    9c10:	6cbe      	ldr	r6, [r7, #72]	; 0x48
    9c12:	ee18 9a10 	vmov	r9, s16
    9c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9c18:	2b00      	cmp	r3, #0
    9c1a:	f040 82dc 	bne.w	a1d6 <__ssvfscanf_r+0xa02>
    9c1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9c20:	3b01      	subs	r3, #1
    9c22:	2b01      	cmp	r3, #1
    9c24:	f241 8016 	bls.w	ac54 <__ssvfscanf_r+0x1480>
    9c28:	1e73      	subs	r3, r6, #1
    9c2a:	2b06      	cmp	r3, #6
    9c2c:	f240 8627 	bls.w	a87e <__ssvfscanf_r+0x10aa>
    9c30:	05e3      	lsls	r3, r4, #23
    9c32:	d51b      	bpl.n	9c6c <__ssvfscanf_r+0x498>
    9c34:	0566      	lsls	r6, r4, #21
    9c36:	f101 80b5 	bmi.w	ada4 <__ssvfscanf_r+0x15d0>
    9c3a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
    9c3e:	2965      	cmp	r1, #101	; 0x65
    9c40:	f105 33ff 	add.w	r3, r5, #4294967295
    9c44:	f10a 36ff 	add.w	r6, sl, #4294967295
    9c48:	d00a      	beq.n	9c60 <__ssvfscanf_r+0x48c>
    9c4a:	2945      	cmp	r1, #69	; 0x45
    9c4c:	d008      	beq.n	9c60 <__ssvfscanf_r+0x48c>
    9c4e:	465a      	mov	r2, fp
    9c50:	4648      	mov	r0, r9
    9c52:	f002 ff9d 	bl	cb90 <_sungetc_r>
    9c56:	f815 1c02 	ldrb.w	r1, [r5, #-2]
    9c5a:	f1aa 0602 	sub.w	r6, sl, #2
    9c5e:	1eab      	subs	r3, r5, #2
    9c60:	465a      	mov	r2, fp
    9c62:	4648      	mov	r0, r9
    9c64:	46b2      	mov	sl, r6
    9c66:	461d      	mov	r5, r3
    9c68:	f002 ff92 	bl	cb90 <_sungetc_r>
    9c6c:	f014 0210 	ands.w	r2, r4, #16
    9c70:	f47f add7 	bne.w	9822 <__ssvfscanf_r+0x4e>
    9c74:	f404 63c0 	and.w	r3, r4, #1536	; 0x600
    9c78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    9c7c:	702a      	strb	r2, [r5, #0]
    9c7e:	f000 84d2 	beq.w	a626 <__ssvfscanf_r+0xe52>
    9c82:	69bb      	ldr	r3, [r7, #24]
    9c84:	2b00      	cmp	r3, #0
    9c86:	f040 872c 	bne.w	aae2 <__ssvfscanf_r+0x130e>
    9c8a:	4648      	mov	r0, r9
    9c8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    9c8e:	2200      	movs	r2, #0
    9c90:	f7fb fd8e 	bl	57b0 <_strtod_r>
    9c94:	07e0      	lsls	r0, r4, #31
    9c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    9c98:	f100 85c9 	bmi.w	a82e <__ssvfscanf_r+0x105a>
    9c9c:	07a1      	lsls	r1, r4, #30
    9c9e:	f100 85c6 	bmi.w	a82e <__ssvfscanf_r+0x105a>
    9ca2:	eeb4 0b40 	vcmp.f64	d0, d0
    9ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9caa:	f853 4b04 	ldr.w	r4, [r3], #4
    9cae:	f180 86f4 	bvs.w	aa9a <__ssvfscanf_r+0x12c6>
    9cb2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    9cb6:	633b      	str	r3, [r7, #48]	; 0x30
    9cb8:	ed84 0a00 	vstr	s0, [r4]
    9cbc:	e3a2      	b.n	a404 <__ssvfscanf_r+0xc30>
    9cbe:	f108 33ff 	add.w	r3, r8, #4294967295
    9cc2:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
    9cc6:	f240 83a2 	bls.w	a40e <__ssvfscanf_r+0xc3a>
    9cca:	f46f 72ae 	mvn.w	r2, #348	; 0x15c
    9cce:	eb08 0302 	add.w	r3, r8, r2
    9cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
    9cd4:	f240 185d 	movw	r8, #349	; 0x15d
    9cd8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
    9cdc:	2200      	movs	r2, #0
    9cde:	6bbe      	ldr	r6, [r7, #56]	; 0x38
    9ce0:	62bb      	str	r3, [r7, #40]	; 0x28
    9ce2:	4659      	mov	r1, fp
    9ce4:	f444 6458 	orr.w	r4, r4, #3456	; 0xd80
    9ce8:	46d3      	mov	fp, sl
    9cea:	461d      	mov	r5, r3
    9cec:	4692      	mov	sl, r2
    9cee:	680a      	ldr	r2, [r1, #0]
    9cf0:	7810      	ldrb	r0, [r2, #0]
    9cf2:	f1a0 032b 	sub.w	r3, r0, #43	; 0x2b
    9cf6:	2b4d      	cmp	r3, #77	; 0x4d
    9cf8:	d860      	bhi.n	9dbc <__ssvfscanf_r+0x5e8>
    9cfa:	e8df f013 	tbh	[pc, r3, lsl #1]
    9cfe:	0282      	.short	0x0282
    9d00:	0282005f 	.word	0x0282005f
    9d04:	005f005f 	.word	0x005f005f
    9d08:	01e002cd 	.word	0x01e002cd
    9d0c:	01e001e0 	.word	0x01e001e0
    9d10:	01e001e0 	.word	0x01e001e0
    9d14:	01e001e0 	.word	0x01e001e0
    9d18:	026f026f 	.word	0x026f026f
    9d1c:	005f005f 	.word	0x005f005f
    9d20:	005f005f 	.word	0x005f005f
    9d24:	005f005f 	.word	0x005f005f
    9d28:	004e005f 	.word	0x004e005f
    9d2c:	004e004e 	.word	0x004e004e
    9d30:	004e004e 	.word	0x004e004e
    9d34:	005f004e 	.word	0x005f004e
    9d38:	005f005f 	.word	0x005f005f
    9d3c:	005f005f 	.word	0x005f005f
    9d40:	005f005f 	.word	0x005f005f
    9d44:	005f005f 	.word	0x005f005f
    9d48:	005f005f 	.word	0x005f005f
    9d4c:	005f005f 	.word	0x005f005f
    9d50:	005f005f 	.word	0x005f005f
    9d54:	005f005f 	.word	0x005f005f
    9d58:	005f0276 	.word	0x005f0276
    9d5c:	005f005f 	.word	0x005f005f
    9d60:	005f005f 	.word	0x005f005f
    9d64:	005f005f 	.word	0x005f005f
    9d68:	004e005f 	.word	0x004e005f
    9d6c:	004e004e 	.word	0x004e004e
    9d70:	004e004e 	.word	0x004e004e
    9d74:	005f004e 	.word	0x005f004e
    9d78:	005f005f 	.word	0x005f005f
    9d7c:	005f005f 	.word	0x005f005f
    9d80:	005f005f 	.word	0x005f005f
    9d84:	005f005f 	.word	0x005f005f
    9d88:	005f005f 	.word	0x005f005f
    9d8c:	005f005f 	.word	0x005f005f
    9d90:	005f005f 	.word	0x005f005f
    9d94:	005f005f 	.word	0x005f005f
    9d98:	0276      	.short	0x0276
    9d9a:	2e0a      	cmp	r6, #10
    9d9c:	dd0e      	ble.n	9dbc <__ssvfscanf_r+0x5e8>
    9d9e:	f424 6438 	bic.w	r4, r4, #2944	; 0xb80
    9da2:	684b      	ldr	r3, [r1, #4]
    9da4:	f805 0b01 	strb.w	r0, [r5], #1
    9da8:	3b01      	subs	r3, #1
    9daa:	2b00      	cmp	r3, #0
    9dac:	604b      	str	r3, [r1, #4]
    9dae:	f340 828d 	ble.w	a2cc <__ssvfscanf_r+0xaf8>
    9db2:	3201      	adds	r2, #1
    9db4:	600a      	str	r2, [r1, #0]
    9db6:	f1b8 0801 	subs.w	r8, r8, #1
    9dba:	d198      	bne.n	9cee <__ssvfscanf_r+0x51a>
    9dbc:	05e0      	lsls	r0, r4, #23
    9dbe:	46d0      	mov	r8, sl
    9dc0:	63be      	str	r6, [r7, #56]	; 0x38
    9dc2:	46da      	mov	sl, fp
    9dc4:	468b      	mov	fp, r1
    9dc6:	d507      	bpl.n	9dd8 <__ssvfscanf_r+0x604>
    9dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9dca:	429d      	cmp	r5, r3
    9dcc:	f200 8422 	bhi.w	a614 <__ssvfscanf_r+0xe40>
    9dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9dd2:	429d      	cmp	r5, r3
    9dd4:	f43f adf3 	beq.w	99be <__ssvfscanf_r+0x1ea>
    9dd8:	f014 0210 	ands.w	r2, r4, #16
    9ddc:	d110      	bne.n	9e00 <__ssvfscanf_r+0x62c>
    9dde:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    9de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    9de2:	6afe      	ldr	r6, [r7, #44]	; 0x2c
    9de4:	702a      	strb	r2, [r5, #0]
    9de6:	4648      	mov	r0, r9
    9de8:	47b0      	blx	r6
    9dea:	06a1      	lsls	r1, r4, #26
    9dec:	f140 8408 	bpl.w	a600 <__ssvfscanf_r+0xe2c>
    9df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    9df2:	f853 2b04 	ldr.w	r2, [r3], #4
    9df6:	6010      	str	r0, [r2, #0]
    9df8:	633b      	str	r3, [r7, #48]	; 0x30
    9dfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    9dfc:	3301      	adds	r3, #1
    9dfe:	647b      	str	r3, [r7, #68]	; 0x44
    9e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9e02:	1aed      	subs	r5, r5, r3
    9e04:	4445      	add	r5, r8
    9e06:	44aa      	add	sl, r5
    9e08:	e50b      	b.n	9822 <__ssvfscanf_r+0x4e>
    9e0a:	f1b8 0f00 	cmp.w	r8, #0
    9e0e:	bf08      	it	eq
    9e10:	f04f 38ff 	moveq.w	r8, #4294967295
    9e14:	07e0      	lsls	r0, r4, #31
    9e16:	f140 8295 	bpl.w	a344 <__ssvfscanf_r+0xb70>
    9e1a:	f014 0310 	ands.w	r3, r4, #16
    9e1e:	637b      	str	r3, [r7, #52]	; 0x34
    9e20:	f040 8474 	bne.w	a70c <__ssvfscanf_r+0xf38>
    9e24:	0621      	lsls	r1, r4, #24
    9e26:	f140 8666 	bpl.w	aaf6 <__ssvfscanf_r+0x1322>
    9e2a:	6b3c      	ldr	r4, [r7, #48]	; 0x30
    9e2c:	f854 3b04 	ldr.w	r3, [r4], #4
    9e30:	63fb      	str	r3, [r7, #60]	; 0x3c
    9e32:	2b00      	cmp	r3, #0
    9e34:	f43f adc3 	beq.w	99be <__ssvfscanf_r+0x1ea>
    9e38:	2080      	movs	r0, #128	; 0x80
    9e3a:	f7fa f8bb 	bl	3fb4 <malloc>
    9e3e:	64b8      	str	r0, [r7, #72]	; 0x48
    9e40:	2800      	cmp	r0, #0
    9e42:	f000 8778 	beq.w	ad36 <__ssvfscanf_r+0x1562>
    9e46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9e48:	6cba      	ldr	r2, [r7, #72]	; 0x48
    9e4a:	601a      	str	r2, [r3, #0]
    9e4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    9e4e:	88d5      	ldrh	r5, [r2, #6]
    9e50:	8893      	ldrh	r3, [r2, #4]
    9e52:	429d      	cmp	r5, r3
    9e54:	f080 8552 	bcs.w	a8fc <__ssvfscanf_r+0x1128>
    9e58:	6810      	ldr	r0, [r2, #0]
    9e5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9e5c:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
    9e60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    9e62:	633c      	str	r4, [r7, #48]	; 0x30
    9e64:	3501      	adds	r5, #1
    9e66:	80dd      	strh	r5, [r3, #6]
    9e68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    9e6a:	62bb      	str	r3, [r7, #40]	; 0x28
    9e6c:	2320      	movs	r3, #32
    9e6e:	623b      	str	r3, [r7, #32]
    9e70:	f8db 3000 	ldr.w	r3, [fp]
    9e74:	4eb1      	ldr	r6, [pc, #708]	; (a13c <__ssvfscanf_r+0x968>)
    9e76:	781b      	ldrb	r3, [r3, #0]
    9e78:	5cf3      	ldrb	r3, [r6, r3]
    9e7a:	f013 0308 	ands.w	r3, r3, #8
    9e7e:	f040 84bb 	bne.w	a7f8 <__ssvfscanf_r+0x1024>
    9e82:	6a7c      	ldr	r4, [r7, #36]	; 0x24
    9e84:	627e      	str	r6, [r7, #36]	; 0x24
    9e86:	461d      	mov	r5, r3
    9e88:	f7fc f8f6 	bl	6078 <__locale_mb_cur_max>
    9e8c:	42a8      	cmp	r0, r5
    9e8e:	f43f ad8d 	beq.w	99ac <__ssvfscanf_r+0x1d8>
    9e92:	e9db 3200 	ldrd	r3, r2, [fp]
    9e96:	f507 70b8 	add.w	r0, r7, #368	; 0x170
    9e9a:	f813 1b01 	ldrb.w	r1, [r3], #1
    9e9e:	5541      	strb	r1, [r0, r5]
    9ea0:	3a01      	subs	r2, #1
    9ea2:	2c03      	cmp	r4, #3
    9ea4:	e9cb 3200 	strd	r3, r2, [fp]
    9ea8:	f105 0501 	add.w	r5, r5, #1
    9eac:	f107 0668 	add.w	r6, r7, #104	; 0x68
    9eb0:	d102      	bne.n	9eb8 <__ssvfscanf_r+0x6e4>
    9eb2:	6833      	ldr	r3, [r6, #0]
    9eb4:	2b04      	cmp	r3, #4
    9eb6:	d004      	beq.n	9ec2 <__ssvfscanf_r+0x6ee>
    9eb8:	2208      	movs	r2, #8
    9eba:	2100      	movs	r1, #0
    9ebc:	4630      	mov	r0, r6
    9ebe:	f7fb ffab 	bl	5e18 <memset>
    9ec2:	f507 72b8 	add.w	r2, r7, #368	; 0x170
    9ec6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    9ec8:	9600      	str	r6, [sp, #0]
    9eca:	462b      	mov	r3, r5
    9ecc:	4648      	mov	r0, r9
    9ece:	f002 fc8b 	bl	c7e8 <_mbrtowc_r>
    9ed2:	1c42      	adds	r2, r0, #1
    9ed4:	4604      	mov	r4, r0
    9ed6:	f43f ad69 	beq.w	99ac <__ssvfscanf_r+0x1d8>
    9eda:	2800      	cmp	r0, #0
    9edc:	f040 8478 	bne.w	a7d0 <__ssvfscanf_r+0xffc>
    9ee0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    9ee2:	6018      	str	r0, [r3, #0]
    9ee4:	f002 fcdc 	bl	c8a0 <iswspace>
    9ee8:	2800      	cmp	r0, #0
    9eea:	f040 865c 	bne.w	aba6 <__ssvfscanf_r+0x13d2>
    9eee:	44aa      	add	sl, r5
    9ef0:	f108 38ff 	add.w	r8, r8, #4294967295
    9ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9ef6:	2b00      	cmp	r3, #0
    9ef8:	f040 8633 	bne.w	ab62 <__ssvfscanf_r+0x138e>
    9efc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    9efe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    9f00:	3304      	adds	r3, #4
    9f02:	64bb      	str	r3, [r7, #72]	; 0x48
    9f04:	2a00      	cmp	r2, #0
    9f06:	f000 862c 	beq.w	ab62 <__ssvfscanf_r+0x138e>
    9f0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9f0c:	1a9d      	subs	r5, r3, r2
    9f0e:	6a3b      	ldr	r3, [r7, #32]
    9f10:	ebb3 0fa5 	cmp.w	r3, r5, asr #2
    9f14:	f240 8756 	bls.w	adc4 <__ssvfscanf_r+0x15f0>
    9f18:	6b7d      	ldr	r5, [r7, #52]	; 0x34
    9f1a:	f000 bc5c 	b.w	a7d6 <__ssvfscanf_r+0x1002>
    9f1e:	f1b8 0f00 	cmp.w	r8, #0
    9f22:	bf08      	it	eq
    9f24:	f04f 38ff 	moveq.w	r8, #4294967295
    9f28:	07e0      	lsls	r0, r4, #31
    9f2a:	f140 827b 	bpl.w	a424 <__ssvfscanf_r+0xc50>
    9f2e:	f014 0310 	ands.w	r3, r4, #16
    9f32:	62bb      	str	r3, [r7, #40]	; 0x28
    9f34:	f040 83f3 	bne.w	a71e <__ssvfscanf_r+0xf4a>
    9f38:	0621      	lsls	r1, r4, #24
    9f3a:	f140 85ed 	bpl.w	ab18 <__ssvfscanf_r+0x1344>
    9f3e:	6b3e      	ldr	r6, [r7, #48]	; 0x30
    9f40:	f856 3b04 	ldr.w	r3, [r6], #4
    9f44:	623b      	str	r3, [r7, #32]
    9f46:	2b00      	cmp	r3, #0
    9f48:	f43f ad39 	beq.w	99be <__ssvfscanf_r+0x1ea>
    9f4c:	2080      	movs	r0, #128	; 0x80
    9f4e:	f7fa f831 	bl	3fb4 <malloc>
    9f52:	4604      	mov	r4, r0
    9f54:	2800      	cmp	r0, #0
    9f56:	f000 86ee 	beq.w	ad36 <__ssvfscanf_r+0x1562>
    9f5a:	6a3b      	ldr	r3, [r7, #32]
    9f5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    9f5e:	6018      	str	r0, [r3, #0]
    9f60:	88d5      	ldrh	r5, [r2, #6]
    9f62:	8893      	ldrh	r3, [r2, #4]
    9f64:	429d      	cmp	r5, r3
    9f66:	f080 84dd 	bcs.w	a924 <__ssvfscanf_r+0x1150>
    9f6a:	6810      	ldr	r0, [r2, #0]
    9f6c:	6a3b      	ldr	r3, [r7, #32]
    9f6e:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
    9f72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    9f74:	633e      	str	r6, [r7, #48]	; 0x30
    9f76:	3501      	adds	r5, #1
    9f78:	80dd      	strh	r5, [r3, #6]
    9f7a:	2320      	movs	r3, #32
    9f7c:	61fc      	str	r4, [r7, #28]
    9f7e:	61bb      	str	r3, [r7, #24]
    9f80:	6a7e      	ldr	r6, [r7, #36]	; 0x24
    9f82:	f8c7 a03c 	str.w	sl, [r7, #60]	; 0x3c
    9f86:	2500      	movs	r5, #0
    9f88:	46c2      	mov	sl, r8
    9f8a:	46a0      	mov	r8, r4
    9f8c:	f7fc f874 	bl	6078 <__locale_mb_cur_max>
    9f90:	42a8      	cmp	r0, r5
    9f92:	f43f ad0b 	beq.w	99ac <__ssvfscanf_r+0x1d8>
    9f96:	e9db 3200 	ldrd	r3, r2, [fp]
    9f9a:	f813 1b01 	ldrb.w	r1, [r3], #1
    9f9e:	3a01      	subs	r2, #1
    9fa0:	f507 70b8 	add.w	r0, r7, #368	; 0x170
    9fa4:	e9cb 3200 	strd	r3, r2, [fp]
    9fa8:	2e03      	cmp	r6, #3
    9faa:	f105 0301 	add.w	r3, r5, #1
    9fae:	5541      	strb	r1, [r0, r5]
    9fb0:	64bb      	str	r3, [r7, #72]	; 0x48
    9fb2:	f107 0460 	add.w	r4, r7, #96	; 0x60
    9fb6:	d102      	bne.n	9fbe <__ssvfscanf_r+0x7ea>
    9fb8:	6823      	ldr	r3, [r4, #0]
    9fba:	2b04      	cmp	r3, #4
    9fbc:	d004      	beq.n	9fc8 <__ssvfscanf_r+0x7f4>
    9fbe:	2208      	movs	r2, #8
    9fc0:	2100      	movs	r1, #0
    9fc2:	4620      	mov	r0, r4
    9fc4:	f7fb ff28 	bl	5e18 <memset>
    9fc8:	f507 72b8 	add.w	r2, r7, #368	; 0x170
    9fcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    9fce:	9400      	str	r4, [sp, #0]
    9fd0:	4641      	mov	r1, r8
    9fd2:	4648      	mov	r0, r9
    9fd4:	f002 fc08 	bl	c7e8 <_mbrtowc_r>
    9fd8:	1c42      	adds	r2, r0, #1
    9fda:	4606      	mov	r6, r0
    9fdc:	f43f ace6 	beq.w	99ac <__ssvfscanf_r+0x1d8>
    9fe0:	2800      	cmp	r0, #0
    9fe2:	f040 82ca 	bne.w	a57a <__ssvfscanf_r+0xda6>
    9fe6:	f8c8 0000 	str.w	r0, [r8]
    9fea:	4605      	mov	r5, r0
    9fec:	f107 0368 	add.w	r3, r7, #104	; 0x68
    9ff0:	2208      	movs	r2, #8
    9ff2:	2100      	movs	r1, #0
    9ff4:	4618      	mov	r0, r3
    9ff6:	637b      	str	r3, [r7, #52]	; 0x34
    9ff8:	f7fb ff0e 	bl	5e18 <memset>
    9ffc:	4950      	ldr	r1, [pc, #320]	; (a140 <__ssvfscanf_r+0x96c>)
    9ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a000:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    a004:	462a      	mov	r2, r5
    a006:	4648      	mov	r0, r9
    a008:	460d      	mov	r5, r1
    a00a:	f107 0150 	add.w	r1, r7, #80	; 0x50
    a00e:	47a8      	blx	r5
    a010:	2801      	cmp	r0, #1
    a012:	f000 83d5 	beq.w	a7c0 <__ssvfscanf_r+0xfec>
    a016:	2200      	movs	r2, #0
    a018:	f107 0370 	add.w	r3, r7, #112	; 0x70
    a01c:	5c9b      	ldrb	r3, [r3, r2]
    a01e:	2b00      	cmp	r3, #0
    a020:	f000 85a1 	beq.w	ab66 <__ssvfscanf_r+0x1392>
    a024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a026:	6cba      	ldr	r2, [r7, #72]	; 0x48
    a028:	2e03      	cmp	r6, #3
    a02a:	4413      	add	r3, r2
    a02c:	63fb      	str	r3, [r7, #60]	; 0x3c
    a02e:	f000 83ca 	beq.w	a7c6 <__ssvfscanf_r+0xff2>
    a032:	f10a 3aff 	add.w	sl, sl, #4294967295
    a036:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a038:	b95b      	cbnz	r3, a052 <__ssvfscanf_r+0x87e>
    a03a:	6a3b      	ldr	r3, [r7, #32]
    a03c:	f108 0804 	add.w	r8, r8, #4
    a040:	b13b      	cbz	r3, a052 <__ssvfscanf_r+0x87e>
    a042:	69fb      	ldr	r3, [r7, #28]
    a044:	eba8 0403 	sub.w	r4, r8, r3
    a048:	69bb      	ldr	r3, [r7, #24]
    a04a:	ebb3 0fa4 	cmp.w	r3, r4, asr #2
    a04e:	f240 8405 	bls.w	a85c <__ssvfscanf_r+0x1088>
    a052:	f8db 3004 	ldr.w	r3, [fp, #4]
    a056:	2b00      	cmp	r3, #0
    a058:	f04f 0500 	mov.w	r5, #0
    a05c:	f340 8296 	ble.w	a58c <__ssvfscanf_r+0xdb8>
    a060:	f1ba 0f00 	cmp.w	sl, #0
    a064:	d192      	bne.n	9f8c <__ssvfscanf_r+0x7b8>
    a066:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
    a06a:	627e      	str	r6, [r7, #36]	; 0x24
    a06c:	4644      	mov	r4, r8
    a06e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a070:	2b00      	cmp	r3, #0
    a072:	f47f abd6 	bne.w	9822 <__ssvfscanf_r+0x4e>
    a076:	6023      	str	r3, [r4, #0]
    a078:	6a3b      	ldr	r3, [r7, #32]
    a07a:	2b00      	cmp	r3, #0
    a07c:	f000 81c2 	beq.w	a404 <__ssvfscanf_r+0xc30>
    a080:	69fb      	ldr	r3, [r7, #28]
    a082:	69ba      	ldr	r2, [r7, #24]
    a084:	1ae1      	subs	r1, r4, r3
    a086:	108b      	asrs	r3, r1, #2
    a088:	3301      	adds	r3, #1
    a08a:	429a      	cmp	r2, r3
    a08c:	f240 81ba 	bls.w	a404 <__ssvfscanf_r+0xc30>
    a090:	6a3c      	ldr	r4, [r7, #32]
    a092:	3104      	adds	r1, #4
    a094:	6820      	ldr	r0, [r4, #0]
    a096:	f7fa fa59 	bl	454c <realloc>
    a09a:	2800      	cmp	r0, #0
    a09c:	f000 81b2 	beq.w	a404 <__ssvfscanf_r+0xc30>
    a0a0:	6020      	str	r0, [r4, #0]
    a0a2:	e1af      	b.n	a404 <__ssvfscanf_r+0xc30>
    a0a4:	0521      	lsls	r1, r4, #20
    a0a6:	f57f adb3 	bpl.w	9c10 <__ssvfscanf_r+0x43c>
    a0aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a0ac:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    a0ae:	185b      	adds	r3, r3, r1
    a0b0:	f47f adae 	bne.w	9c10 <__ssvfscanf_r+0x43c>
    a0b4:	64bb      	str	r3, [r7, #72]	; 0x48
    a0b6:	f424 74c0 	bic.w	r4, r4, #384	; 0x180
    a0ba:	63fb      	str	r3, [r7, #60]	; 0x3c
    a0bc:	e593      	b.n	9be6 <__ssvfscanf_r+0x412>
    a0be:	4b21      	ldr	r3, [pc, #132]	; (a144 <__ssvfscanf_r+0x970>)
    a0c0:	f424 6438 	bic.w	r4, r4, #2944	; 0xb80
    a0c4:	f933 6016 	ldrsh.w	r6, [r3, r6, lsl #1]
    a0c8:	e66b      	b.n	9da2 <__ssvfscanf_r+0x5ce>
    a0ca:	f404 6318 	and.w	r3, r4, #2432	; 0x980
    a0ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    a0d2:	f47f ad9d 	bne.w	9c10 <__ssvfscanf_r+0x43c>
    a0d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a0d8:	2b01      	cmp	r3, #1
    a0da:	f47f ad99 	bne.w	9c10 <__ssvfscanf_r+0x43c>
    a0de:	2330      	movs	r3, #48	; 0x30
    a0e0:	f805 3b01 	strb.w	r3, [r5], #1
    a0e4:	f424 7480 	bic.w	r4, r4, #256	; 0x100
    a0e8:	2300      	movs	r3, #0
    a0ea:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
    a0ee:	3e01      	subs	r6, #1
    a0f0:	637b      	str	r3, [r7, #52]	; 0x34
    a0f2:	e578      	b.n	9be6 <__ssvfscanf_r+0x412>
    a0f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a0f6:	2b06      	cmp	r3, #6
    a0f8:	f040 8574 	bne.w	abe4 <__ssvfscanf_r+0x1410>
    a0fc:	2307      	movs	r3, #7
    a0fe:	64bb      	str	r3, [r7, #72]	; 0x48
    a100:	e571      	b.n	9be6 <__ssvfscanf_r+0x412>
    a102:	0523      	lsls	r3, r4, #20
    a104:	f57f ad84 	bpl.w	9c10 <__ssvfscanf_r+0x43c>
    a108:	f404 63a0 	and.w	r3, r4, #1280	; 0x500
    a10c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    a110:	d005      	beq.n	a11e <__ssvfscanf_r+0x94a>
    a112:	0561      	lsls	r1, r4, #21
    a114:	f57f ad7c 	bpl.w	9c10 <__ssvfscanf_r+0x43c>
    a118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a11a:	2b00      	cmp	r3, #0
    a11c:	d047      	beq.n	a1ae <__ssvfscanf_r+0x9da>
    a11e:	05a3      	lsls	r3, r4, #22
    a120:	d404      	bmi.n	a12c <__ssvfscanf_r+0x958>
    a122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a124:	69f9      	ldr	r1, [r7, #28]
    a126:	1a5b      	subs	r3, r3, r1
    a128:	e9c7 5305 	strd	r5, r3, [r7, #20]
    a12c:	f424 6478 	bic.w	r4, r4, #3968	; 0xf80
    a130:	2300      	movs	r3, #0
    a132:	f444 74c0 	orr.w	r4, r4, #384	; 0x180
    a136:	637b      	str	r3, [r7, #52]	; 0x34
    a138:	e555      	b.n	9be6 <__ssvfscanf_r+0x412>
    a13a:	bf00      	nop
    a13c:	2000072d 	.word	0x2000072d
    a140:	20007c70 	.word	0x20007c70
    a144:	2000235c 	.word	0x2000235c
    a148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a14a:	2b00      	cmp	r3, #0
    a14c:	f000 81ff 	beq.w	a54e <__ssvfscanf_r+0xd7a>
    a150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a152:	2b02      	cmp	r3, #2
    a154:	f000 83b0 	beq.w	a8b8 <__ssvfscanf_r+0x10e4>
    a158:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a15a:	2b01      	cmp	r3, #1
    a15c:	f000 81f1 	beq.w	a542 <__ssvfscanf_r+0xd6e>
    a160:	2b04      	cmp	r3, #4
    a162:	f000 81ee 	beq.w	a542 <__ssvfscanf_r+0xd6e>
    a166:	e553      	b.n	9c10 <__ssvfscanf_r+0x43c>
    a168:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a16a:	2b07      	cmp	r3, #7
    a16c:	f040 853a 	bne.w	abe4 <__ssvfscanf_r+0x1410>
    a170:	2308      	movs	r3, #8
    a172:	64bb      	str	r3, [r7, #72]	; 0x48
    a174:	e537      	b.n	9be6 <__ssvfscanf_r+0x412>
    a176:	0520      	lsls	r0, r4, #20
    a178:	f100 81f9 	bmi.w	a56e <__ssvfscanf_r+0xd9a>
    a17c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a17e:	2b01      	cmp	r3, #1
    a180:	f47f ad46 	bne.w	9c10 <__ssvfscanf_r+0x43c>
    a184:	2302      	movs	r3, #2
    a186:	63fb      	str	r3, [r7, #60]	; 0x3c
    a188:	e52d      	b.n	9be6 <__ssvfscanf_r+0x412>
    a18a:	0623      	lsls	r3, r4, #24
    a18c:	f57f ad40 	bpl.w	9c10 <__ssvfscanf_r+0x43c>
    a190:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    a194:	e527      	b.n	9be6 <__ssvfscanf_r+0x412>
    a196:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a198:	2b00      	cmp	r3, #0
    a19a:	f040 81cc 	bne.w	a536 <__ssvfscanf_r+0xd62>
    a19e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a1a0:	b9b3      	cbnz	r3, a1d0 <__ssvfscanf_r+0x9fc>
    a1a2:	f404 63e0 	and.w	r3, r4, #1792	; 0x700
    a1a6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
    a1aa:	f000 8520 	beq.w	abee <__ssvfscanf_r+0x141a>
    a1ae:	6cbe      	ldr	r6, [r7, #72]	; 0x48
    a1b0:	ee18 9a10 	vmov	r9, s16
    a1b4:	e533      	b.n	9c1e <__ssvfscanf_r+0x44a>
    a1b6:	0521      	lsls	r1, r4, #20
    a1b8:	f100 81b7 	bmi.w	a52a <__ssvfscanf_r+0xd56>
    a1bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a1be:	2b02      	cmp	r3, #2
    a1c0:	f040 8510 	bne.w	abe4 <__ssvfscanf_r+0x1410>
    a1c4:	2303      	movs	r3, #3
    a1c6:	64bb      	str	r3, [r7, #72]	; 0x48
    a1c8:	e50d      	b.n	9be6 <__ssvfscanf_r+0x412>
    a1ca:	0520      	lsls	r0, r4, #20
    a1cc:	d59c      	bpl.n	a108 <__ssvfscanf_r+0x934>
    a1ce:	e76c      	b.n	a0aa <__ssvfscanf_r+0x8d6>
    a1d0:	6cbe      	ldr	r6, [r7, #72]	; 0x48
    a1d2:	ee18 9a10 	vmov	r9, s16
    a1d6:	f424 7480 	bic.w	r4, r4, #256	; 0x100
    a1da:	e520      	b.n	9c1e <__ssvfscanf_r+0x44a>
    a1dc:	4b8d      	ldr	r3, [pc, #564]	; (a414 <__ssvfscanf_r+0xc40>)
    a1de:	f933 6016 	ldrsh.w	r6, [r3, r6, lsl #1]
    a1e2:	2e08      	cmp	r6, #8
    a1e4:	f73f addb 	bgt.w	9d9e <__ssvfscanf_r+0x5ca>
    a1e8:	e5e8      	b.n	9dbc <__ssvfscanf_r+0x5e8>
    a1ea:	f404 63c0 	and.w	r3, r4, #1536	; 0x600
    a1ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    a1f2:	f47f ade3 	bne.w	9dbc <__ssvfscanf_r+0x5e8>
    a1f6:	f424 7400 	bic.w	r4, r4, #512	; 0x200
    a1fa:	f444 64a0 	orr.w	r4, r4, #1280	; 0x500
    a1fe:	2610      	movs	r6, #16
    a200:	e5cf      	b.n	9da2 <__ssvfscanf_r+0x5ce>
    a202:	0623      	lsls	r3, r4, #24
    a204:	f57f adda 	bpl.w	9dbc <__ssvfscanf_r+0x5e8>
    a208:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    a20c:	e5c9      	b.n	9da2 <__ssvfscanf_r+0x5ce>
    a20e:	f044 0401 	orr.w	r4, r4, #1
    a212:	f8db 3004 	ldr.w	r3, [fp, #4]
    a216:	64f9      	str	r1, [r7, #76]	; 0x4c
    a218:	2b00      	cmp	r3, #0
    a21a:	f044 0440 	orr.w	r4, r4, #64	; 0x40
    a21e:	f04f 0500 	mov.w	r5, #0
    a222:	f73f abf8 	bgt.w	9a16 <__ssvfscanf_r+0x242>
    a226:	4659      	mov	r1, fp
    a228:	4648      	mov	r0, r9
    a22a:	f002 fcf1 	bl	cc10 <__ssrefill_r>
    a22e:	2800      	cmp	r0, #0
    a230:	f47f abbc 	bne.w	99ac <__ssvfscanf_r+0x1d8>
    a234:	0660      	lsls	r0, r4, #25
    a236:	f53f abf1 	bmi.w	9a1c <__ssvfscanf_r+0x248>
    a23a:	f8db 2000 	ldr.w	r2, [fp]
    a23e:	4e76      	ldr	r6, [pc, #472]	; (a418 <__ssvfscanf_r+0xc44>)
    a240:	7813      	ldrb	r3, [r2, #0]
    a242:	5cf3      	ldrb	r3, [r6, r3]
    a244:	0719      	lsls	r1, r3, #28
    a246:	f57f abe9 	bpl.w	9a1c <__ssvfscanf_r+0x248>
    a24a:	f8db 3004 	ldr.w	r3, [fp, #4]
    a24e:	3b01      	subs	r3, #1
    a250:	2b00      	cmp	r3, #0
    a252:	f10a 0a01 	add.w	sl, sl, #1
    a256:	f8cb 3004 	str.w	r3, [fp, #4]
    a25a:	f102 0201 	add.w	r2, r2, #1
    a25e:	dd4a      	ble.n	a2f6 <__ssvfscanf_r+0xb22>
    a260:	f8cb 2000 	str.w	r2, [fp]
    a264:	7813      	ldrb	r3, [r2, #0]
    a266:	5cf3      	ldrb	r3, [r6, r3]
    a268:	0719      	lsls	r1, r3, #28
    a26a:	f57f abd7 	bpl.w	9a1c <__ssvfscanf_r+0x248>
    a26e:	e7ec      	b.n	a24a <__ssvfscanf_r+0xa76>
    a270:	f044 0401 	orr.w	r4, r4, #1
    a274:	4b69      	ldr	r3, [pc, #420]	; (a41c <__ssvfscanf_r+0xc48>)
    a276:	62fb      	str	r3, [r7, #44]	; 0x2c
    a278:	2308      	movs	r3, #8
    a27a:	64f9      	str	r1, [r7, #76]	; 0x4c
    a27c:	63bb      	str	r3, [r7, #56]	; 0x38
    a27e:	2503      	movs	r5, #3
    a280:	f7ff bbc4 	b.w	9a0c <__ssvfscanf_r+0x238>
    a284:	f044 0401 	orr.w	r4, r4, #1
    a288:	4b65      	ldr	r3, [pc, #404]	; (a420 <__ssvfscanf_r+0xc4c>)
    a28a:	62fb      	str	r3, [r7, #44]	; 0x2c
    a28c:	230a      	movs	r3, #10
    a28e:	64f9      	str	r1, [r7, #76]	; 0x4c
    a290:	63bb      	str	r3, [r7, #56]	; 0x38
    a292:	2503      	movs	r5, #3
    a294:	f7ff bbba 	b.w	9a0c <__ssvfscanf_r+0x238>
    a298:	0523      	lsls	r3, r4, #20
    a29a:	f57f ad82 	bpl.w	9da2 <__ssvfscanf_r+0x5ce>
    a29e:	b916      	cbnz	r6, a2a6 <__ssvfscanf_r+0xad2>
    a2a0:	f444 7400 	orr.w	r4, r4, #512	; 0x200
    a2a4:	2608      	movs	r6, #8
    a2a6:	0563      	lsls	r3, r4, #21
    a2a8:	f100 81a6 	bmi.w	a5f8 <__ssvfscanf_r+0xe24>
    a2ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a2ae:	f424 7460 	bic.w	r4, r4, #896	; 0x380
    a2b2:	b11b      	cbz	r3, a2bc <__ssvfscanf_r+0xae8>
    a2b4:	3b01      	subs	r3, #1
    a2b6:	63fb      	str	r3, [r7, #60]	; 0x3c
    a2b8:	f108 0801 	add.w	r8, r8, #1
    a2bc:	684b      	ldr	r3, [r1, #4]
    a2be:	3b01      	subs	r3, #1
    a2c0:	2b00      	cmp	r3, #0
    a2c2:	f10a 0a01 	add.w	sl, sl, #1
    a2c6:	604b      	str	r3, [r1, #4]
    a2c8:	f73f ad73 	bgt.w	9db2 <__ssvfscanf_r+0x5de>
    a2cc:	4648      	mov	r0, r9
    a2ce:	64b9      	str	r1, [r7, #72]	; 0x48
    a2d0:	f002 fc9e 	bl	cc10 <__ssrefill_r>
    a2d4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    a2d6:	2800      	cmp	r0, #0
    a2d8:	f43f ad6d 	beq.w	9db6 <__ssvfscanf_r+0x5e2>
    a2dc:	e56e      	b.n	9dbc <__ssvfscanf_r+0x5e8>
    a2de:	ee18 0a10 	vmov	r0, s16
    a2e2:	4659      	mov	r1, fp
    a2e4:	f002 fc94 	bl	cc10 <__ssrefill_r>
    a2e8:	2800      	cmp	r0, #0
    a2ea:	f47f ac91 	bne.w	9c10 <__ssvfscanf_r+0x43c>
    a2ee:	2e00      	cmp	r6, #0
    a2f0:	f47f abc4 	bne.w	9a7c <__ssvfscanf_r+0x2a8>
    a2f4:	e48c      	b.n	9c10 <__ssvfscanf_r+0x43c>
    a2f6:	4659      	mov	r1, fp
    a2f8:	4648      	mov	r0, r9
    a2fa:	f002 fc89 	bl	cc10 <__ssrefill_r>
    a2fe:	2800      	cmp	r0, #0
    a300:	f47f ab54 	bne.w	99ac <__ssvfscanf_r+0x1d8>
    a304:	f8db 2000 	ldr.w	r2, [fp]
    a308:	e79a      	b.n	a240 <__ssvfscanf_r+0xa6c>
    a30a:	f8db 2004 	ldr.w	r2, [fp, #4]
    a30e:	e00f      	b.n	a330 <__ssvfscanf_r+0xb5c>
    a310:	f8db 3000 	ldr.w	r3, [fp]
    a314:	781a      	ldrb	r2, [r3, #0]
    a316:	5cb2      	ldrb	r2, [r6, r2]
    a318:	0711      	lsls	r1, r2, #28
    a31a:	f103 0301 	add.w	r3, r3, #1
    a31e:	f57f aa80 	bpl.w	9822 <__ssvfscanf_r+0x4e>
    a322:	f8db 2004 	ldr.w	r2, [fp, #4]
    a326:	3a01      	subs	r2, #1
    a328:	e9cb 3200 	strd	r3, r2, [fp]
    a32c:	f10a 0a01 	add.w	sl, sl, #1
    a330:	2a00      	cmp	r2, #0
    a332:	dced      	bgt.n	a310 <__ssvfscanf_r+0xb3c>
    a334:	4659      	mov	r1, fp
    a336:	4648      	mov	r0, r9
    a338:	f002 fc6a 	bl	cc10 <__ssrefill_r>
    a33c:	2800      	cmp	r0, #0
    a33e:	d0e7      	beq.n	a310 <__ssvfscanf_r+0xb3c>
    a340:	f7ff ba6f 	b.w	9822 <__ssvfscanf_r+0x4e>
    a344:	06e1      	lsls	r1, r4, #27
    a346:	f100 8349 	bmi.w	a9dc <__ssvfscanf_r+0x1208>
    a34a:	f014 0480 	ands.w	r4, r4, #128	; 0x80
    a34e:	f000 83ab 	beq.w	aaa8 <__ssvfscanf_r+0x12d4>
    a352:	6b3c      	ldr	r4, [r7, #48]	; 0x30
    a354:	f854 6b04 	ldr.w	r6, [r4], #4
    a358:	64be      	str	r6, [r7, #72]	; 0x48
    a35a:	2e00      	cmp	r6, #0
    a35c:	f43f ab2f 	beq.w	99be <__ssvfscanf_r+0x1ea>
    a360:	2020      	movs	r0, #32
    a362:	f7f9 fe27 	bl	3fb4 <malloc>
    a366:	4605      	mov	r5, r0
    a368:	2800      	cmp	r0, #0
    a36a:	f000 8462 	beq.w	ac32 <__ssvfscanf_r+0x145e>
    a36e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    a370:	6030      	str	r0, [r6, #0]
    a372:	8893      	ldrh	r3, [r2, #4]
    a374:	88d6      	ldrh	r6, [r2, #6]
    a376:	429e      	cmp	r6, r3
    a378:	f080 82a8 	bcs.w	a8cc <__ssvfscanf_r+0x10f8>
    a37c:	6810      	ldr	r0, [r2, #0]
    a37e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a380:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
    a384:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    a386:	633c      	str	r4, [r7, #48]	; 0x30
    a388:	3601      	adds	r6, #1
    a38a:	80de      	strh	r6, [r3, #6]
    a38c:	2320      	movs	r3, #32
    a38e:	63fb      	str	r3, [r7, #60]	; 0x3c
    a390:	f8db 2000 	ldr.w	r2, [fp]
    a394:	4e20      	ldr	r6, [pc, #128]	; (a418 <__ssvfscanf_r+0xc44>)
    a396:	7811      	ldrb	r1, [r2, #0]
    a398:	5c71      	ldrb	r1, [r6, r1]
    a39a:	0708      	lsls	r0, r1, #28
    a39c:	f100 82ac 	bmi.w	a8f8 <__ssvfscanf_r+0x1124>
    a3a0:	4633      	mov	r3, r6
    a3a2:	462c      	mov	r4, r5
    a3a4:	4610      	mov	r0, r2
    a3a6:	462e      	mov	r6, r5
    a3a8:	f8db 1004 	ldr.w	r1, [fp, #4]
    a3ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
    a3ae:	3901      	subs	r1, #1
    a3b0:	f8cb 1004 	str.w	r1, [fp, #4]
    a3b4:	1c41      	adds	r1, r0, #1
    a3b6:	f8cb 1000 	str.w	r1, [fp]
    a3ba:	4635      	mov	r5, r6
    a3bc:	7801      	ldrb	r1, [r0, #0]
    a3be:	f805 1b01 	strb.w	r1, [r5], #1
    a3c2:	b122      	cbz	r2, a3ce <__ssvfscanf_r+0xbfa>
    a3c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    a3c6:	1b2e      	subs	r6, r5, r4
    a3c8:	4296      	cmp	r6, r2
    a3ca:	f080 837a 	bcs.w	aac2 <__ssvfscanf_r+0x12ee>
    a3ce:	f1b8 0801 	subs.w	r8, r8, #1
    a3d2:	d00b      	beq.n	a3ec <__ssvfscanf_r+0xc18>
    a3d4:	f8db 1004 	ldr.w	r1, [fp, #4]
    a3d8:	2900      	cmp	r1, #0
    a3da:	462e      	mov	r6, r5
    a3dc:	f340 83ae 	ble.w	ab3c <__ssvfscanf_r+0x1368>
    a3e0:	f8db 0000 	ldr.w	r0, [fp]
    a3e4:	7801      	ldrb	r1, [r0, #0]
    a3e6:	5c59      	ldrb	r1, [r3, r1]
    a3e8:	0709      	lsls	r1, r1, #28
    a3ea:	d5dd      	bpl.n	a3a8 <__ssvfscanf_r+0xbd4>
    a3ec:	1b29      	subs	r1, r5, r4
    a3ee:	448a      	add	sl, r1
    a3f0:	3101      	adds	r1, #1
    a3f2:	f04f 0300 	mov.w	r3, #0
    a3f6:	702b      	strb	r3, [r5, #0]
    a3f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a3fa:	b11b      	cbz	r3, a404 <__ssvfscanf_r+0xc30>
    a3fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a3fe:	428b      	cmp	r3, r1
    a400:	f200 8394 	bhi.w	ab2c <__ssvfscanf_r+0x1358>
    a404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    a406:	3301      	adds	r3, #1
    a408:	647b      	str	r3, [r7, #68]	; 0x44
    a40a:	f7ff ba0a 	b.w	9822 <__ssvfscanf_r+0x4e>
    a40e:	2300      	movs	r3, #0
    a410:	63fb      	str	r3, [r7, #60]	; 0x3c
    a412:	e461      	b.n	9cd8 <__ssvfscanf_r+0x504>
    a414:	2000235c 	.word	0x2000235c
    a418:	2000072d 	.word	0x2000072d
    a41c:	0000c4d5 	.word	0x0000c4d5
    a420:	00005901 	.word	0x00005901
    a424:	06e6      	lsls	r6, r4, #27
    a426:	f100 8181 	bmi.w	a72c <__ssvfscanf_r+0xf58>
    a42a:	f014 0480 	ands.w	r4, r4, #128	; 0x80
    a42e:	f000 836d 	beq.w	ab0c <__ssvfscanf_r+0x1338>
    a432:	6b3c      	ldr	r4, [r7, #48]	; 0x30
    a434:	f854 6b04 	ldr.w	r6, [r4], #4
    a438:	64be      	str	r6, [r7, #72]	; 0x48
    a43a:	2e00      	cmp	r6, #0
    a43c:	f43f aabf 	beq.w	99be <__ssvfscanf_r+0x1ea>
    a440:	2020      	movs	r0, #32
    a442:	f7f9 fdb7 	bl	3fb4 <malloc>
    a446:	4605      	mov	r5, r0
    a448:	2800      	cmp	r0, #0
    a44a:	f000 83f2 	beq.w	ac32 <__ssvfscanf_r+0x145e>
    a44e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    a450:	6030      	str	r0, [r6, #0]
    a452:	8893      	ldrh	r3, [r2, #4]
    a454:	88d6      	ldrh	r6, [r2, #6]
    a456:	429e      	cmp	r6, r3
    a458:	f080 827a 	bcs.w	a950 <__ssvfscanf_r+0x117c>
    a45c:	6810      	ldr	r0, [r2, #0]
    a45e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a460:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
    a464:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    a466:	633c      	str	r4, [r7, #48]	; 0x30
    a468:	3601      	adds	r6, #1
    a46a:	80de      	strh	r6, [r3, #6]
    a46c:	2420      	movs	r4, #32
    a46e:	f8db 2000 	ldr.w	r2, [fp]
    a472:	f107 0370 	add.w	r3, r7, #112	; 0x70
    a476:	4619      	mov	r1, r3
    a478:	7813      	ldrb	r3, [r2, #0]
    a47a:	5ccb      	ldrb	r3, [r1, r3]
    a47c:	2b00      	cmp	r3, #0
    a47e:	f43f aa9e 	beq.w	99be <__ssvfscanf_r+0x1ea>
    a482:	ee08 9a10 	vmov	s16, r9
    a486:	f8d7 9048 	ldr.w	r9, [r7, #72]	; 0x48
    a48a:	f8c7 a03c 	str.w	sl, [r7, #60]	; 0x3c
    a48e:	462e      	mov	r6, r5
    a490:	46a2      	mov	sl, r4
    a492:	4610      	mov	r0, r2
    a494:	460c      	mov	r4, r1
    a496:	f8db 1004 	ldr.w	r1, [fp, #4]
    a49a:	1c43      	adds	r3, r0, #1
    a49c:	3901      	subs	r1, #1
    a49e:	e9cb 3100 	strd	r3, r1, [fp]
    a4a2:	4629      	mov	r1, r5
    a4a4:	7800      	ldrb	r0, [r0, #0]
    a4a6:	f801 0b01 	strb.w	r0, [r1], #1
    a4aa:	f1b9 0f00 	cmp.w	r9, #0
    a4ae:	d002      	beq.n	a4b6 <__ssvfscanf_r+0xce2>
    a4b0:	1b8d      	subs	r5, r1, r6
    a4b2:	4555      	cmp	r5, sl
    a4b4:	d27a      	bcs.n	a5ac <__ssvfscanf_r+0xdd8>
    a4b6:	460d      	mov	r5, r1
    a4b8:	f1b8 0801 	subs.w	r8, r8, #1
    a4bc:	d00a      	beq.n	a4d4 <__ssvfscanf_r+0xd00>
    a4be:	f8db 1004 	ldr.w	r1, [fp, #4]
    a4c2:	2900      	cmp	r1, #0
    a4c4:	f340 816a 	ble.w	a79c <__ssvfscanf_r+0xfc8>
    a4c8:	f8db 0000 	ldr.w	r0, [fp]
    a4cc:	7801      	ldrb	r1, [r0, #0]
    a4ce:	5c61      	ldrb	r1, [r4, r1]
    a4d0:	2900      	cmp	r1, #0
    a4d2:	d1e0      	bne.n	a496 <__ssvfscanf_r+0xcc2>
    a4d4:	4654      	mov	r4, sl
    a4d6:	ee18 9a10 	vmov	r9, s16
    a4da:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
    a4de:	1bae      	subs	r6, r5, r6
    a4e0:	f43f aa6d 	beq.w	99be <__ssvfscanf_r+0x1ea>
    a4e4:	f04f 0300 	mov.w	r3, #0
    a4e8:	702b      	strb	r3, [r5, #0]
    a4ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a4ec:	b11b      	cbz	r3, a4f6 <__ssvfscanf_r+0xd22>
    a4ee:	1c71      	adds	r1, r6, #1
    a4f0:	428c      	cmp	r4, r1
    a4f2:	f200 832d 	bhi.w	ab50 <__ssvfscanf_r+0x137c>
    a4f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    a4f8:	3301      	adds	r3, #1
    a4fa:	44b2      	add	sl, r6
    a4fc:	647b      	str	r3, [r7, #68]	; 0x44
    a4fe:	f7ff b990 	b.w	9822 <__ssvfscanf_r+0x4e>
    a502:	2300      	movs	r3, #0
    a504:	613b      	str	r3, [r7, #16]
    a506:	f7ff baa9 	b.w	9a5c <__ssvfscanf_r+0x288>
    a50a:	f014 0f8f 	tst.w	r4, #143	; 0x8f
    a50e:	f47f aa56 	bne.w	99be <__ssvfscanf_r+0x1ea>
    a512:	eb08 0888 	add.w	r8, r8, r8, lsl #2
    a516:	eb02 0848 	add.w	r8, r2, r8, lsl #1
    a51a:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
    a51e:	f7ff ba67 	b.w	99f0 <__ssvfscanf_r+0x21c>
    a522:	64f9      	str	r1, [r7, #76]	; 0x4c
    a524:	2504      	movs	r5, #4
    a526:	f7ff ba71 	b.w	9a0c <__ssvfscanf_r+0x238>
    a52a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a52c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    a52e:	185b      	adds	r3, r3, r1
    a530:	f47f ae44 	bne.w	a1bc <__ssvfscanf_r+0x9e8>
    a534:	e5be      	b.n	a0b4 <__ssvfscanf_r+0x8e0>
    a536:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a538:	2b03      	cmp	r3, #3
    a53a:	d002      	beq.n	a542 <__ssvfscanf_r+0xd6e>
    a53c:	2b05      	cmp	r3, #5
    a53e:	f47f ab67 	bne.w	9c10 <__ssvfscanf_r+0x43c>
    a542:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a544:	3301      	adds	r3, #1
    a546:	b2db      	uxtb	r3, r3
    a548:	64bb      	str	r3, [r7, #72]	; 0x48
    a54a:	f7ff bb4c 	b.w	9be6 <__ssvfscanf_r+0x412>
    a54e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a550:	2b00      	cmp	r3, #0
    a552:	f47f ae01 	bne.w	a158 <__ssvfscanf_r+0x984>
    a556:	f404 63e0 	and.w	r3, r4, #1792	; 0x700
    a55a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
    a55e:	f47f adfb 	bne.w	a158 <__ssvfscanf_r+0x984>
    a562:	2301      	movs	r3, #1
    a564:	f424 64f0 	bic.w	r4, r4, #1920	; 0x780
    a568:	63fb      	str	r3, [r7, #60]	; 0x3c
    a56a:	f7ff bb3c 	b.w	9be6 <__ssvfscanf_r+0x412>
    a56e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a570:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    a572:	185b      	adds	r3, r3, r1
    a574:	f47f ae02 	bne.w	a17c <__ssvfscanf_r+0x9a8>
    a578:	e59c      	b.n	a0b4 <__ssvfscanf_r+0x8e0>
    a57a:	1c83      	adds	r3, r0, #2
    a57c:	f040 845b 	bne.w	ae36 <__ssvfscanf_r+0x1662>
    a580:	f8db 3004 	ldr.w	r3, [fp, #4]
    a584:	6cbd      	ldr	r5, [r7, #72]	; 0x48
    a586:	2b00      	cmp	r3, #0
    a588:	f73f ad00 	bgt.w	9f8c <__ssvfscanf_r+0x7b8>
    a58c:	4659      	mov	r1, fp
    a58e:	4648      	mov	r0, r9
    a590:	f002 fb3e 	bl	cc10 <__ssrefill_r>
    a594:	2800      	cmp	r0, #0
    a596:	f43f ad63 	beq.w	a060 <__ssvfscanf_r+0x88c>
    a59a:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
    a59e:	627e      	str	r6, [r7, #36]	; 0x24
    a5a0:	4644      	mov	r4, r8
    a5a2:	2d00      	cmp	r5, #0
    a5a4:	f43f ad63 	beq.w	a06e <__ssvfscanf_r+0x89a>
    a5a8:	f7ff ba00 	b.w	99ac <__ssvfscanf_r+0x1d8>
    a5ac:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
    a5b0:	4630      	mov	r0, r6
    a5b2:	4651      	mov	r1, sl
    a5b4:	f7f9 ffca 	bl	454c <realloc>
    a5b8:	4606      	mov	r6, r0
    a5ba:	2800      	cmp	r0, #0
    a5bc:	f000 8339 	beq.w	ac32 <__ssvfscanf_r+0x145e>
    a5c0:	4405      	add	r5, r0
    a5c2:	f8c9 0000 	str.w	r0, [r9]
    a5c6:	e777      	b.n	a4b8 <__ssvfscanf_r+0xce4>
    a5c8:	f444 7400 	orr.w	r4, r4, #512	; 0x200
    a5cc:	4bbc      	ldr	r3, [pc, #752]	; (a8c0 <__ssvfscanf_r+0x10ec>)
    a5ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    a5d0:	2310      	movs	r3, #16
    a5d2:	64f9      	str	r1, [r7, #76]	; 0x4c
    a5d4:	63bb      	str	r3, [r7, #56]	; 0x38
    a5d6:	2503      	movs	r5, #3
    a5d8:	f7ff ba18 	b.w	9a0c <__ssvfscanf_r+0x238>
    a5dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a5de:	3301      	adds	r3, #1
    a5e0:	637b      	str	r3, [r7, #52]	; 0x34
    a5e2:	693b      	ldr	r3, [r7, #16]
    a5e4:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    a5e8:	2b00      	cmp	r3, #0
    a5ea:	f43f aafe 	beq.w	9bea <__ssvfscanf_r+0x416>
    a5ee:	693b      	ldr	r3, [r7, #16]
    a5f0:	3b01      	subs	r3, #1
    a5f2:	613b      	str	r3, [r7, #16]
    a5f4:	f7ff bafa 	b.w	9bec <__ssvfscanf_r+0x418>
    a5f8:	f424 64b0 	bic.w	r4, r4, #1408	; 0x580
    a5fc:	f7ff bbd1 	b.w	9da2 <__ssvfscanf_r+0x5ce>
    a600:	0722      	lsls	r2, r4, #28
    a602:	f140 81c7 	bpl.w	a994 <__ssvfscanf_r+0x11c0>
    a606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    a608:	f853 2b04 	ldr.w	r2, [r3], #4
    a60c:	633b      	str	r3, [r7, #48]	; 0x30
    a60e:	7010      	strb	r0, [r2, #0]
    a610:	f7ff bbf3 	b.w	9dfa <__ssvfscanf_r+0x626>
    a614:	f815 1c01 	ldrb.w	r1, [r5, #-1]
    a618:	465a      	mov	r2, fp
    a61a:	4648      	mov	r0, r9
    a61c:	3d01      	subs	r5, #1
    a61e:	f002 fab7 	bl	cb90 <_sungetc_r>
    a622:	f7ff bbd5 	b.w	9dd0 <__ssvfscanf_r+0x5fc>
    a626:	69fb      	ldr	r3, [r7, #28]
    a628:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    a62a:	4293      	cmp	r3, r2
    a62c:	f43f ab2d 	beq.w	9c8a <__ssvfscanf_r+0x4b6>
    a630:	1a9a      	subs	r2, r3, r2
    a632:	f207 23c3 	addw	r3, r7, #707	; 0x2c3
    a636:	429d      	cmp	r5, r3
    a638:	bf28      	it	cs
    a63a:	f207 25c2 	addwcs	r5, r7, #706	; 0x2c2
    a63e:	49a1      	ldr	r1, [pc, #644]	; (a8c4 <__ssvfscanf_r+0x10f0>)
    a640:	4628      	mov	r0, r5
    a642:	f000 fe59 	bl	b2f8 <sprintf>
    a646:	f7ff bb20 	b.w	9c8a <__ssvfscanf_r+0x4b6>
    a64a:	06e2      	lsls	r2, r4, #27
    a64c:	f100 8131 	bmi.w	a8b2 <__ssvfscanf_r+0x10de>
    a650:	0723      	lsls	r3, r4, #28
    a652:	f100 81ba 	bmi.w	a9ca <__ssvfscanf_r+0x11f6>
    a656:	0766      	lsls	r6, r4, #29
    a658:	f140 82b4 	bpl.w	abc4 <__ssvfscanf_r+0x13f0>
    a65c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    a65e:	64f9      	str	r1, [r7, #76]	; 0x4c
    a660:	f853 2b04 	ldr.w	r2, [r3], #4
    a664:	633b      	str	r3, [r7, #48]	; 0x30
    a666:	f8a2 a000 	strh.w	sl, [r2]
    a66a:	f7ff b8da 	b.w	9822 <__ssvfscanf_r+0x4e>
    a66e:	0723      	lsls	r3, r4, #28
    a670:	f47f a9a5 	bne.w	99be <__ssvfscanf_r+0x1ea>
    a674:	7842      	ldrb	r2, [r0, #1]
    a676:	2a68      	cmp	r2, #104	; 0x68
    a678:	f000 8186 	beq.w	a988 <__ssvfscanf_r+0x11b4>
    a67c:	f044 0404 	orr.w	r4, r4, #4
    a680:	4608      	mov	r0, r1
    a682:	f7ff b92f 	b.w	98e4 <__ssvfscanf_r+0x110>
    a686:	4b8e      	ldr	r3, [pc, #568]	; (a8c0 <__ssvfscanf_r+0x10ec>)
    a688:	62fb      	str	r3, [r7, #44]	; 0x2c
    a68a:	230a      	movs	r3, #10
    a68c:	64f9      	str	r1, [r7, #76]	; 0x4c
    a68e:	63bb      	str	r3, [r7, #56]	; 0x38
    a690:	2503      	movs	r5, #3
    a692:	f7ff b9bb 	b.w	9a0c <__ssvfscanf_r+0x238>
    a696:	4b8c      	ldr	r3, [pc, #560]	; (a8c8 <__ssvfscanf_r+0x10f4>)
    a698:	62fb      	str	r3, [r7, #44]	; 0x2c
    a69a:	2300      	movs	r3, #0
    a69c:	64f9      	str	r1, [r7, #76]	; 0x4c
    a69e:	63bb      	str	r3, [r7, #56]	; 0x38
    a6a0:	2503      	movs	r5, #3
    a6a2:	f7ff b9b3 	b.w	9a0c <__ssvfscanf_r+0x238>
    a6a6:	f444 7408 	orr.w	r4, r4, #544	; 0x220
    a6aa:	e78f      	b.n	a5cc <__ssvfscanf_r+0xdf8>
    a6ac:	f107 0070 	add.w	r0, r7, #112	; 0x70
    a6b0:	f000 fdde 	bl	b270 <__sccl>
    a6b4:	f044 0440 	orr.w	r4, r4, #64	; 0x40
    a6b8:	64f8      	str	r0, [r7, #76]	; 0x4c
    a6ba:	2501      	movs	r5, #1
    a6bc:	f7ff b9a6 	b.w	9a0c <__ssvfscanf_r+0x238>
    a6c0:	0722      	lsls	r2, r4, #28
    a6c2:	f47f a97c 	bne.w	99be <__ssvfscanf_r+0x1ea>
    a6c6:	7842      	ldrb	r2, [r0, #1]
    a6c8:	2a6c      	cmp	r2, #108	; 0x6c
    a6ca:	f000 8157 	beq.w	a97c <__ssvfscanf_r+0x11a8>
    a6ce:	f044 0401 	orr.w	r4, r4, #1
    a6d2:	4608      	mov	r0, r1
    a6d4:	f7ff b906 	b.w	98e4 <__ssvfscanf_r+0x110>
    a6d8:	f014 038f 	ands.w	r3, r4, #143	; 0x8f
    a6dc:	f47f a96f 	bne.w	99be <__ssvfscanf_r+0x1ea>
    a6e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    a6e2:	2a00      	cmp	r2, #0
    a6e4:	f000 81e7 	beq.w	aab6 <__ssvfscanf_r+0x12e2>
    a6e8:	7842      	ldrb	r2, [r0, #1]
    a6ea:	f044 0480 	orr.w	r4, r4, #128	; 0x80
    a6ee:	4608      	mov	r0, r1
    a6f0:	f7ff b8f8 	b.w	98e4 <__ssvfscanf_r+0x110>
    a6f4:	ea58 0804 	orrs.w	r8, r8, r4
    a6f8:	f47f a961 	bne.w	99be <__ssvfscanf_r+0x1ea>
    a6fc:	7842      	ldrb	r2, [r0, #1]
    a6fe:	2410      	movs	r4, #16
    a700:	4608      	mov	r0, r1
    a702:	f7ff b8ef 	b.w	98e4 <__ssvfscanf_r+0x110>
    a706:	64f9      	str	r1, [r7, #76]	; 0x4c
    a708:	f7ff b8a7 	b.w	985a <__ssvfscanf_r+0x86>
    a70c:	2300      	movs	r3, #0
    a70e:	623b      	str	r3, [r7, #32]
    a710:	62bb      	str	r3, [r7, #40]	; 0x28
    a712:	63fb      	str	r3, [r7, #60]	; 0x3c
    a714:	f107 0354 	add.w	r3, r7, #84	; 0x54
    a718:	64bb      	str	r3, [r7, #72]	; 0x48
    a71a:	f7ff bba9 	b.w	9e70 <__ssvfscanf_r+0x69c>
    a71e:	2300      	movs	r3, #0
    a720:	e9c7 3306 	strd	r3, r3, [r7, #24]
    a724:	623b      	str	r3, [r7, #32]
    a726:	f107 0454 	add.w	r4, r7, #84	; 0x54
    a72a:	e429      	b.n	9f80 <__ssvfscanf_r+0x7ac>
    a72c:	f8db 3000 	ldr.w	r3, [fp]
    a730:	f107 0270 	add.w	r2, r7, #112	; 0x70
    a734:	4611      	mov	r1, r2
    a736:	781a      	ldrb	r2, [r3, #0]
    a738:	5c8a      	ldrb	r2, [r1, r2]
    a73a:	2a00      	cmp	r2, #0
    a73c:	f43f a93f 	beq.w	99be <__ssvfscanf_r+0x1ea>
    a740:	3301      	adds	r3, #1
    a742:	f8cb 3000 	str.w	r3, [fp]
    a746:	f8db 3004 	ldr.w	r3, [fp, #4]
    a74a:	f1b8 0f01 	cmp.w	r8, #1
    a74e:	f103 33ff 	add.w	r3, r3, #4294967295
    a752:	f8cb 3004 	str.w	r3, [fp, #4]
    a756:	bf18      	it	ne
    a758:	460c      	movne	r4, r1
    a75a:	d114      	bne.n	a786 <__ssvfscanf_r+0xfb2>
    a75c:	f7ff bb53 	b.w	9e06 <__ssvfscanf_r+0x632>
    a760:	f8db 3000 	ldr.w	r3, [fp]
    a764:	781a      	ldrb	r2, [r3, #0]
    a766:	5ca2      	ldrb	r2, [r4, r2]
    a768:	3301      	adds	r3, #1
    a76a:	2a00      	cmp	r2, #0
    a76c:	f43f ab4b 	beq.w	9e06 <__ssvfscanf_r+0x632>
    a770:	f8cb 3000 	str.w	r3, [fp]
    a774:	f8db 3004 	ldr.w	r3, [fp, #4]
    a778:	3501      	adds	r5, #1
    a77a:	3b01      	subs	r3, #1
    a77c:	4545      	cmp	r5, r8
    a77e:	f8cb 3004 	str.w	r3, [fp, #4]
    a782:	f43f ab40 	beq.w	9e06 <__ssvfscanf_r+0x632>
    a786:	2b00      	cmp	r3, #0
    a788:	dcea      	bgt.n	a760 <__ssvfscanf_r+0xf8c>
    a78a:	4659      	mov	r1, fp
    a78c:	4648      	mov	r0, r9
    a78e:	f002 fa3f 	bl	cc10 <__ssrefill_r>
    a792:	2800      	cmp	r0, #0
    a794:	d0e4      	beq.n	a760 <__ssvfscanf_r+0xf8c>
    a796:	44aa      	add	sl, r5
    a798:	f7ff b843 	b.w	9822 <__ssvfscanf_r+0x4e>
    a79c:	ee18 0a10 	vmov	r0, s16
    a7a0:	4659      	mov	r1, fp
    a7a2:	f002 fa35 	bl	cc10 <__ssrefill_r>
    a7a6:	2800      	cmp	r0, #0
    a7a8:	f43f ae8e 	beq.w	a4c8 <__ssvfscanf_r+0xcf4>
    a7ac:	42b5      	cmp	r5, r6
    a7ae:	4654      	mov	r4, sl
    a7b0:	ee18 9a10 	vmov	r9, s16
    a7b4:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
    a7b8:	f47f ae91 	bne.w	a4de <__ssvfscanf_r+0xd0a>
    a7bc:	f7ff b8f6 	b.w	99ac <__ssvfscanf_r+0x1d8>
    a7c0:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
    a7c4:	e428      	b.n	a018 <__ssvfscanf_r+0x844>
    a7c6:	6823      	ldr	r3, [r4, #0]
    a7c8:	2b04      	cmp	r3, #4
    a7ca:	f47f ac32 	bne.w	a032 <__ssvfscanf_r+0x85e>
    a7ce:	e432      	b.n	a036 <__ssvfscanf_r+0x862>
    a7d0:	1c83      	adds	r3, r0, #2
    a7d2:	f040 8339 	bne.w	ae48 <__ssvfscanf_r+0x1674>
    a7d6:	f8db 3004 	ldr.w	r3, [fp, #4]
    a7da:	2b00      	cmp	r3, #0
    a7dc:	f340 81d7 	ble.w	ab8e <__ssvfscanf_r+0x13ba>
    a7e0:	f8db 3000 	ldr.w	r3, [fp]
    a7e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    a7e6:	781b      	ldrb	r3, [r3, #0]
    a7e8:	5cd3      	ldrb	r3, [r2, r3]
    a7ea:	0718      	lsls	r0, r3, #28
    a7ec:	d403      	bmi.n	a7f6 <__ssvfscanf_r+0x1022>
    a7ee:	f1b8 0f00 	cmp.w	r8, #0
    a7f2:	f47f ab49 	bne.w	9e88 <__ssvfscanf_r+0x6b4>
    a7f6:	627c      	str	r4, [r7, #36]	; 0x24
    a7f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a7fa:	2b00      	cmp	r3, #0
    a7fc:	f47f a811 	bne.w	9822 <__ssvfscanf_r+0x4e>
    a800:	6cba      	ldr	r2, [r7, #72]	; 0x48
    a802:	6013      	str	r3, [r2, #0]
    a804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a806:	2b00      	cmp	r3, #0
    a808:	f43f adfc 	beq.w	a404 <__ssvfscanf_r+0xc30>
    a80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a80e:	1ad1      	subs	r1, r2, r3
    a810:	108b      	asrs	r3, r1, #2
    a812:	6a3a      	ldr	r2, [r7, #32]
    a814:	3301      	adds	r3, #1
    a816:	429a      	cmp	r2, r3
    a818:	f67f adf4 	bls.w	a404 <__ssvfscanf_r+0xc30>
    a81c:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
    a81e:	3104      	adds	r1, #4
    a820:	6820      	ldr	r0, [r4, #0]
    a822:	f7f9 fe93 	bl	454c <realloc>
    a826:	2800      	cmp	r0, #0
    a828:	f47f ac3a 	bne.w	a0a0 <__ssvfscanf_r+0x8cc>
    a82c:	e5ea      	b.n	a404 <__ssvfscanf_r+0xc30>
    a82e:	f853 2b04 	ldr.w	r2, [r3], #4
    a832:	ed82 0b00 	vstr	d0, [r2]
    a836:	633b      	str	r3, [r7, #48]	; 0x30
    a838:	e5e4      	b.n	a404 <__ssvfscanf_r+0xc30>
    a83a:	68fd      	ldr	r5, [r7, #12]
    a83c:	6a39      	ldr	r1, [r7, #32]
    a83e:	687e      	ldr	r6, [r7, #4]
    a840:	4628      	mov	r0, r5
    a842:	4642      	mov	r2, r8
    a844:	46a3      	mov	fp, r4
    a846:	68bc      	ldr	r4, [r7, #8]
    a848:	f000 fd76 	bl	b338 <stpncpy>
    a84c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a84e:	61fb      	str	r3, [r7, #28]
    a850:	f424 7420 	bic.w	r4, r4, #640	; 0x280
    a854:	3e01      	subs	r6, #1
    a856:	4605      	mov	r5, r0
    a858:	f7ff b9c8 	b.w	9bec <__ssvfscanf_r+0x418>
    a85c:	69f8      	ldr	r0, [r7, #28]
    a85e:	00d9      	lsls	r1, r3, #3
    a860:	461d      	mov	r5, r3
    a862:	f7f9 fe73 	bl	454c <realloc>
    a866:	61f8      	str	r0, [r7, #28]
    a868:	2800      	cmp	r0, #0
    a86a:	f000 8264 	beq.w	ad36 <__ssvfscanf_r+0x1562>
    a86e:	6a3a      	ldr	r2, [r7, #32]
    a870:	006b      	lsls	r3, r5, #1
    a872:	eb00 0804 	add.w	r8, r0, r4
    a876:	6010      	str	r0, [r2, #0]
    a878:	61bb      	str	r3, [r7, #24]
    a87a:	f7ff bbea 	b.w	a052 <__ssvfscanf_r+0x87e>
    a87e:	2e02      	cmp	r6, #2
    a880:	f240 82c4 	bls.w	ae0c <__ssvfscanf_r+0x1638>
    a884:	2e03      	cmp	r6, #3
    a886:	f43f a9d3 	beq.w	9c30 <__ssvfscanf_r+0x45c>
    a88a:	3e04      	subs	r6, #4
    a88c:	fa5f f886 	uxtb.w	r8, r6
    a890:	ea6f 0308 	mvn.w	r3, r8
    a894:	18ee      	adds	r6, r5, r3
    a896:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
    a89a:	465a      	mov	r2, fp
    a89c:	4648      	mov	r0, r9
    a89e:	f002 f977 	bl	cb90 <_sungetc_r>
    a8a2:	42ae      	cmp	r6, r5
    a8a4:	d1f7      	bne.n	a896 <__ssvfscanf_r+0x10c2>
    a8a6:	f10a 3aff 	add.w	sl, sl, #4294967295
    a8aa:	ebaa 0a08 	sub.w	sl, sl, r8
    a8ae:	f7ff b9bf 	b.w	9c30 <__ssvfscanf_r+0x45c>
    a8b2:	64f9      	str	r1, [r7, #76]	; 0x4c
    a8b4:	f7fe bfb5 	b.w	9822 <__ssvfscanf_r+0x4e>
    a8b8:	2303      	movs	r3, #3
    a8ba:	63fb      	str	r3, [r7, #60]	; 0x3c
    a8bc:	f7ff b993 	b.w	9be6 <__ssvfscanf_r+0x412>
    a8c0:	0000c4d5 	.word	0x0000c4d5
    a8c4:	20000724 	.word	0x20000724
    a8c8:	00005901 	.word	0x00005901
    a8cc:	f64f 72f6 	movw	r2, #65526	; 0xfff6
    a8d0:	4293      	cmp	r3, r2
    a8d2:	f200 8297 	bhi.w	ae04 <__ssvfscanf_r+0x1630>
    a8d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    a8d8:	3308      	adds	r3, #8
    a8da:	b29b      	uxth	r3, r3
    a8dc:	6810      	ldr	r0, [r2, #0]
    a8de:	63f8      	str	r0, [r7, #60]	; 0x3c
    a8e0:	0099      	lsls	r1, r3, #2
    a8e2:	637b      	str	r3, [r7, #52]	; 0x34
    a8e4:	f7f9 fe32 	bl	454c <realloc>
    a8e8:	2800      	cmp	r0, #0
    a8ea:	f000 827b 	beq.w	ade4 <__ssvfscanf_r+0x1610>
    a8ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    a8f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a8f2:	8093      	strh	r3, [r2, #4]
    a8f4:	6010      	str	r0, [r2, #0]
    a8f6:	e542      	b.n	a37e <__ssvfscanf_r+0xbaa>
    a8f8:	2101      	movs	r1, #1
    a8fa:	e57a      	b.n	a3f2 <__ssvfscanf_r+0xc1e>
    a8fc:	f64f 72f6 	movw	r2, #65526	; 0xfff6
    a900:	4293      	cmp	r3, r2
    a902:	f200 8293 	bhi.w	ae2c <__ssvfscanf_r+0x1658>
    a906:	3308      	adds	r3, #8
    a908:	b29e      	uxth	r6, r3
    a90a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    a90c:	00b1      	lsls	r1, r6, #2
    a90e:	6818      	ldr	r0, [r3, #0]
    a910:	f7f9 fe1c 	bl	454c <realloc>
    a914:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    a916:	2800      	cmp	r0, #0
    a918:	f000 823e 	beq.w	ad98 <__ssvfscanf_r+0x15c4>
    a91c:	809e      	strh	r6, [r3, #4]
    a91e:	6018      	str	r0, [r3, #0]
    a920:	f7ff ba9b 	b.w	9e5a <__ssvfscanf_r+0x686>
    a924:	f64f 72f6 	movw	r2, #65526	; 0xfff6
    a928:	4293      	cmp	r3, r2
    a92a:	f200 827f 	bhi.w	ae2c <__ssvfscanf_r+0x1658>
    a92e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    a930:	3308      	adds	r3, #8
    a932:	b29b      	uxth	r3, r3
    a934:	0099      	lsls	r1, r3, #2
    a936:	6810      	ldr	r0, [r2, #0]
    a938:	64bb      	str	r3, [r7, #72]	; 0x48
    a93a:	f7f9 fe07 	bl	454c <realloc>
    a93e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a940:	2800      	cmp	r0, #0
    a942:	f000 8228 	beq.w	ad96 <__ssvfscanf_r+0x15c2>
    a946:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    a948:	8093      	strh	r3, [r2, #4]
    a94a:	6010      	str	r0, [r2, #0]
    a94c:	f7ff bb0e 	b.w	9f6c <__ssvfscanf_r+0x798>
    a950:	f64f 72f6 	movw	r2, #65526	; 0xfff6
    a954:	4293      	cmp	r3, r2
    a956:	f200 8255 	bhi.w	ae04 <__ssvfscanf_r+0x1630>
    a95a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    a95c:	3308      	adds	r3, #8
    a95e:	b29b      	uxth	r3, r3
    a960:	6810      	ldr	r0, [r2, #0]
    a962:	63f8      	str	r0, [r7, #60]	; 0x3c
    a964:	0099      	lsls	r1, r3, #2
    a966:	637b      	str	r3, [r7, #52]	; 0x34
    a968:	f7f9 fdf0 	bl	454c <realloc>
    a96c:	2800      	cmp	r0, #0
    a96e:	f000 8239 	beq.w	ade4 <__ssvfscanf_r+0x1610>
    a972:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    a974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a976:	8093      	strh	r3, [r2, #4]
    a978:	6010      	str	r0, [r2, #0]
    a97a:	e570      	b.n	a45e <__ssvfscanf_r+0xc8a>
    a97c:	7882      	ldrb	r2, [r0, #2]
    a97e:	f044 0402 	orr.w	r4, r4, #2
    a982:	3002      	adds	r0, #2
    a984:	f7fe bfae 	b.w	98e4 <__ssvfscanf_r+0x110>
    a988:	7882      	ldrb	r2, [r0, #2]
    a98a:	f044 0408 	orr.w	r4, r4, #8
    a98e:	3002      	adds	r0, #2
    a990:	f7fe bfa8 	b.w	98e4 <__ssvfscanf_r+0x110>
    a994:	0763      	lsls	r3, r4, #29
    a996:	d458      	bmi.n	aa4a <__ssvfscanf_r+0x1276>
    a998:	f014 0201 	ands.w	r2, r4, #1
    a99c:	f47f aa28 	bne.w	9df0 <__ssvfscanf_r+0x61c>
    a9a0:	07a6      	lsls	r6, r4, #30
    a9a2:	f57f aa25 	bpl.w	9df0 <__ssvfscanf_r+0x61c>
    a9a6:	4bb3      	ldr	r3, [pc, #716]	; (ac74 <__ssvfscanf_r+0x14a0>)
    a9a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    a9aa:	4299      	cmp	r1, r3
    a9ac:	4648      	mov	r0, r9
    a9ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    a9b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    a9b2:	f000 823d 	beq.w	ae30 <__ssvfscanf_r+0x165c>
    a9b6:	f001 fe45 	bl	c644 <_strtoll_r>
    a9ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    a9bc:	f853 2b04 	ldr.w	r2, [r3], #4
    a9c0:	633b      	str	r3, [r7, #48]	; 0x30
    a9c2:	e9c2 0100 	strd	r0, r1, [r2]
    a9c6:	f7ff ba18 	b.w	9dfa <__ssvfscanf_r+0x626>
    a9ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    a9cc:	64f9      	str	r1, [r7, #76]	; 0x4c
    a9ce:	f853 2b04 	ldr.w	r2, [r3], #4
    a9d2:	633b      	str	r3, [r7, #48]	; 0x30
    a9d4:	f882 a000 	strb.w	sl, [r2]
    a9d8:	f7fe bf23 	b.w	9822 <__ssvfscanf_r+0x4e>
    a9dc:	f8db 3000 	ldr.w	r3, [fp]
    a9e0:	4ea5      	ldr	r6, [pc, #660]	; (ac78 <__ssvfscanf_r+0x14a4>)
    a9e2:	781a      	ldrb	r2, [r3, #0]
    a9e4:	5cb2      	ldrb	r2, [r6, r2]
    a9e6:	0712      	lsls	r2, r2, #28
    a9e8:	f53e af1b 	bmi.w	9822 <__ssvfscanf_r+0x4e>
    a9ec:	3301      	adds	r3, #1
    a9ee:	f8cb 3000 	str.w	r3, [fp]
    a9f2:	f8db 3004 	ldr.w	r3, [fp, #4]
    a9f6:	f1b8 0f01 	cmp.w	r8, #1
    a9fa:	f103 33ff 	add.w	r3, r3, #4294967295
    a9fe:	f8cb 3004 	str.w	r3, [fp, #4]
    aa02:	bf08      	it	eq
    aa04:	f10a 0a01 	addeq.w	sl, sl, #1
    aa08:	f43e af0b 	beq.w	9822 <__ssvfscanf_r+0x4e>
    aa0c:	2401      	movs	r4, #1
    aa0e:	e011      	b.n	aa34 <__ssvfscanf_r+0x1260>
    aa10:	f8db 3000 	ldr.w	r3, [fp]
    aa14:	781a      	ldrb	r2, [r3, #0]
    aa16:	5cb2      	ldrb	r2, [r6, r2]
    aa18:	0715      	lsls	r5, r2, #28
    aa1a:	f103 0301 	add.w	r3, r3, #1
    aa1e:	d411      	bmi.n	aa44 <__ssvfscanf_r+0x1270>
    aa20:	f8cb 3000 	str.w	r3, [fp]
    aa24:	f8db 3004 	ldr.w	r3, [fp, #4]
    aa28:	3401      	adds	r4, #1
    aa2a:	3b01      	subs	r3, #1
    aa2c:	4544      	cmp	r4, r8
    aa2e:	f8cb 3004 	str.w	r3, [fp, #4]
    aa32:	d007      	beq.n	aa44 <__ssvfscanf_r+0x1270>
    aa34:	2b00      	cmp	r3, #0
    aa36:	dceb      	bgt.n	aa10 <__ssvfscanf_r+0x123c>
    aa38:	4659      	mov	r1, fp
    aa3a:	4648      	mov	r0, r9
    aa3c:	f002 f8e8 	bl	cc10 <__ssrefill_r>
    aa40:	2800      	cmp	r0, #0
    aa42:	d0e5      	beq.n	aa10 <__ssvfscanf_r+0x123c>
    aa44:	44a2      	add	sl, r4
    aa46:	f7fe beec 	b.w	9822 <__ssvfscanf_r+0x4e>
    aa4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    aa4c:	f853 2b04 	ldr.w	r2, [r3], #4
    aa50:	633b      	str	r3, [r7, #48]	; 0x30
    aa52:	8010      	strh	r0, [r2, #0]
    aa54:	f7ff b9d1 	b.w	9dfa <__ssvfscanf_r+0x626>
    aa58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    aa5a:	2b00      	cmp	r3, #0
    aa5c:	f000 816e 	beq.w	ad3c <__ssvfscanf_r+0x1568>
    aa60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    aa62:	f8d3 8000 	ldr.w	r8, [r3]
    aa66:	88de      	ldrh	r6, [r3, #6]
    aa68:	b176      	cbz	r6, aa88 <__ssvfscanf_r+0x12b4>
    aa6a:	2400      	movs	r4, #0
    aa6c:	f1a8 0504 	sub.w	r5, r8, #4
    aa70:	46a1      	mov	r9, r4
    aa72:	f855 3f04 	ldr.w	r3, [r5, #4]!
    aa76:	6818      	ldr	r0, [r3, #0]
    aa78:	f7f9 faa4 	bl	3fc4 <free>
    aa7c:	3401      	adds	r4, #1
    aa7e:	682b      	ldr	r3, [r5, #0]
    aa80:	42a6      	cmp	r6, r4
    aa82:	f8c3 9000 	str.w	r9, [r3]
    aa86:	d1f4      	bne.n	aa72 <__ssvfscanf_r+0x129e>
    aa88:	f04f 33ff 	mov.w	r3, #4294967295
    aa8c:	647b      	str	r3, [r7, #68]	; 0x44
    aa8e:	f1b8 0f00 	cmp.w	r8, #0
    aa92:	f47e af9c 	bne.w	99ce <__ssvfscanf_r+0x1fa>
    aa96:	f7fe bf9d 	b.w	99d4 <__ssvfscanf_r+0x200>
    aa9a:	4878      	ldr	r0, [pc, #480]	; (ac7c <__ssvfscanf_r+0x14a8>)
    aa9c:	633b      	str	r3, [r7, #48]	; 0x30
    aa9e:	f7fb fde7 	bl	6670 <nanf>
    aaa2:	ed84 0a00 	vstr	s0, [r4]
    aaa6:	e4ad      	b.n	a404 <__ssvfscanf_r+0xc30>
    aaa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    aaaa:	63fc      	str	r4, [r7, #60]	; 0x3c
    aaac:	f852 5b04 	ldr.w	r5, [r2], #4
    aab0:	633a      	str	r2, [r7, #48]	; 0x30
    aab2:	64bc      	str	r4, [r7, #72]	; 0x48
    aab4:	e46c      	b.n	a390 <__ssvfscanf_r+0xbbc>
    aab6:	b082      	sub	sp, #8
    aab8:	e9cd 3302 	strd	r3, r3, [sp, #8]
    aabc:	ab02      	add	r3, sp, #8
    aabe:	643b      	str	r3, [r7, #64]	; 0x40
    aac0:	e612      	b.n	a6e8 <__ssvfscanf_r+0xf14>
    aac2:	637b      	str	r3, [r7, #52]	; 0x34
    aac4:	0053      	lsls	r3, r2, #1
    aac6:	4620      	mov	r0, r4
    aac8:	4619      	mov	r1, r3
    aaca:	63fb      	str	r3, [r7, #60]	; 0x3c
    aacc:	f7f9 fd3e 	bl	454c <realloc>
    aad0:	4604      	mov	r4, r0
    aad2:	2800      	cmp	r0, #0
    aad4:	f000 80ad 	beq.w	ac32 <__ssvfscanf_r+0x145e>
    aad8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    aada:	1985      	adds	r5, r0, r6
    aadc:	6018      	str	r0, [r3, #0]
    aade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    aae0:	e475      	b.n	a3ce <__ssvfscanf_r+0xbfa>
    aae2:	697d      	ldr	r5, [r7, #20]
    aae4:	4629      	mov	r1, r5
    aae6:	230a      	movs	r3, #10
    aae8:	3101      	adds	r1, #1
    aaea:	4648      	mov	r0, r9
    aaec:	f7fa ff08 	bl	5900 <_strtol_r>
    aaf0:	69bb      	ldr	r3, [r7, #24]
    aaf2:	1ac2      	subs	r2, r0, r3
    aaf4:	e59d      	b.n	a632 <__ssvfscanf_r+0xe5e>
    aaf6:	e9d7 320c 	ldrd	r3, r2, [r7, #48]	; 0x30
    aafa:	f853 1b04 	ldr.w	r1, [r3], #4
    aafe:	623a      	str	r2, [r7, #32]
    ab00:	64b9      	str	r1, [r7, #72]	; 0x48
    ab02:	633b      	str	r3, [r7, #48]	; 0x30
    ab04:	62ba      	str	r2, [r7, #40]	; 0x28
    ab06:	63fa      	str	r2, [r7, #60]	; 0x3c
    ab08:	f7ff b9b2 	b.w	9e70 <__ssvfscanf_r+0x69c>
    ab0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ab0e:	64bc      	str	r4, [r7, #72]	; 0x48
    ab10:	f853 5b04 	ldr.w	r5, [r3], #4
    ab14:	633b      	str	r3, [r7, #48]	; 0x30
    ab16:	e4aa      	b.n	a46e <__ssvfscanf_r+0xc9a>
    ab18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ab1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    ab1c:	f853 4b04 	ldr.w	r4, [r3], #4
    ab20:	61ba      	str	r2, [r7, #24]
    ab22:	e9c7 2207 	strd	r2, r2, [r7, #28]
    ab26:	633b      	str	r3, [r7, #48]	; 0x30
    ab28:	f7ff ba2a 	b.w	9f80 <__ssvfscanf_r+0x7ac>
    ab2c:	6cbc      	ldr	r4, [r7, #72]	; 0x48
    ab2e:	6820      	ldr	r0, [r4, #0]
    ab30:	f7f9 fd0c 	bl	454c <realloc>
    ab34:	2800      	cmp	r0, #0
    ab36:	f47f aab3 	bne.w	a0a0 <__ssvfscanf_r+0x8cc>
    ab3a:	e463      	b.n	a404 <__ssvfscanf_r+0xc30>
    ab3c:	4659      	mov	r1, fp
    ab3e:	4648      	mov	r0, r9
    ab40:	637b      	str	r3, [r7, #52]	; 0x34
    ab42:	f002 f865 	bl	cc10 <__ssrefill_r>
    ab46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ab48:	2800      	cmp	r0, #0
    ab4a:	f43f ac49 	beq.w	a3e0 <__ssvfscanf_r+0xc0c>
    ab4e:	e44d      	b.n	a3ec <__ssvfscanf_r+0xc18>
    ab50:	6818      	ldr	r0, [r3, #0]
    ab52:	461c      	mov	r4, r3
    ab54:	f7f9 fcfa 	bl	454c <realloc>
    ab58:	2800      	cmp	r0, #0
    ab5a:	f43f accc 	beq.w	a4f6 <__ssvfscanf_r+0xd22>
    ab5e:	6020      	str	r0, [r4, #0]
    ab60:	e4c9      	b.n	a4f6 <__ssvfscanf_r+0xd22>
    ab62:	2500      	movs	r5, #0
    ab64:	e637      	b.n	a7d6 <__ssvfscanf_r+0x1002>
    ab66:	6cbd      	ldr	r5, [r7, #72]	; 0x48
    ab68:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
    ab6c:	627e      	str	r6, [r7, #36]	; 0x24
    ab6e:	4644      	mov	r4, r8
    ab70:	2d00      	cmp	r5, #0
    ab72:	f43f aa7c 	beq.w	a06e <__ssvfscanf_r+0x89a>
    ab76:	3d01      	subs	r5, #1
    ab78:	f507 73b8 	add.w	r3, r7, #368	; 0x170
    ab7c:	465a      	mov	r2, fp
    ab7e:	5d59      	ldrb	r1, [r3, r5]
    ab80:	4648      	mov	r0, r9
    ab82:	f002 f805 	bl	cb90 <_sungetc_r>
    ab86:	2d00      	cmp	r5, #0
    ab88:	d1f5      	bne.n	ab76 <__ssvfscanf_r+0x13a2>
    ab8a:	f7ff ba70 	b.w	a06e <__ssvfscanf_r+0x89a>
    ab8e:	4659      	mov	r1, fp
    ab90:	4648      	mov	r0, r9
    ab92:	f002 f83d 	bl	cc10 <__ssrefill_r>
    ab96:	2800      	cmp	r0, #0
    ab98:	f43f ae22 	beq.w	a7e0 <__ssvfscanf_r+0x100c>
    ab9c:	627c      	str	r4, [r7, #36]	; 0x24
    ab9e:	2d00      	cmp	r5, #0
    aba0:	f47e af04 	bne.w	99ac <__ssvfscanf_r+0x1d8>
    aba4:	e628      	b.n	a7f8 <__ssvfscanf_r+0x1024>
    aba6:	627c      	str	r4, [r7, #36]	; 0x24
    aba8:	2d00      	cmp	r5, #0
    abaa:	f43f ae25 	beq.w	a7f8 <__ssvfscanf_r+0x1024>
    abae:	3d01      	subs	r5, #1
    abb0:	f507 73b8 	add.w	r3, r7, #368	; 0x170
    abb4:	465a      	mov	r2, fp
    abb6:	5d59      	ldrb	r1, [r3, r5]
    abb8:	4648      	mov	r0, r9
    abba:	f001 ffe9 	bl	cb90 <_sungetc_r>
    abbe:	2d00      	cmp	r5, #0
    abc0:	d1f5      	bne.n	abae <__ssvfscanf_r+0x13da>
    abc2:	e619      	b.n	a7f8 <__ssvfscanf_r+0x1024>
    abc4:	07e5      	lsls	r5, r4, #31
    abc6:	d43c      	bmi.n	ac42 <__ssvfscanf_r+0x146e>
    abc8:	07a4      	lsls	r4, r4, #30
    abca:	d53a      	bpl.n	ac42 <__ssvfscanf_r+0x146e>
    abcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    abce:	64f9      	str	r1, [r7, #76]	; 0x4c
    abd0:	f853 2b04 	ldr.w	r2, [r3], #4
    abd4:	633b      	str	r3, [r7, #48]	; 0x30
    abd6:	ea4f 73ea 	mov.w	r3, sl, asr #31
    abda:	f8c2 a000 	str.w	sl, [r2]
    abde:	6053      	str	r3, [r2, #4]
    abe0:	f7fe be1f 	b.w	9822 <__ssvfscanf_r+0x4e>
    abe4:	ee18 9a10 	vmov	r9, s16
    abe8:	461e      	mov	r6, r3
    abea:	f7ff b814 	b.w	9c16 <__ssvfscanf_r+0x442>
    abee:	2301      	movs	r3, #1
    abf0:	f424 64f0 	bic.w	r4, r4, #1920	; 0x780
    abf4:	64bb      	str	r3, [r7, #72]	; 0x48
    abf6:	f7fe bff6 	b.w	9be6 <__ssvfscanf_r+0x412>
    abfa:	f1b8 0f01 	cmp.w	r8, #1
    abfe:	bf38      	it	cc
    ac00:	f04f 0801 	movcc.w	r8, #1
    ac04:	f014 0301 	ands.w	r3, r4, #1
    ac08:	d13a      	bne.n	ac80 <__ssvfscanf_r+0x14ac>
    ac0a:	06e5      	lsls	r5, r4, #27
    ac0c:	f100 8136 	bmi.w	ae7c <__ssvfscanf_r+0x16a8>
    ac10:	0624      	lsls	r4, r4, #24
    ac12:	f140 814c 	bpl.w	aeae <__ssvfscanf_r+0x16da>
    ac16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ac18:	f853 5b04 	ldr.w	r5, [r3], #4
    ac1c:	64bb      	str	r3, [r7, #72]	; 0x48
    ac1e:	2d00      	cmp	r5, #0
    ac20:	f43e aecd 	beq.w	99be <__ssvfscanf_r+0x1ea>
    ac24:	4640      	mov	r0, r8
    ac26:	f7f9 f9c5 	bl	3fb4 <malloc>
    ac2a:	4603      	mov	r3, r0
    ac2c:	2800      	cmp	r0, #0
    ac2e:	f040 80dc 	bne.w	adea <__ssvfscanf_r+0x1616>
    ac32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ac34:	2b00      	cmp	r3, #0
    ac36:	f000 8081 	beq.w	ad3c <__ssvfscanf_r+0x1568>
    ac3a:	f8d3 8000 	ldr.w	r8, [r3]
    ac3e:	88de      	ldrh	r6, [r3, #6]
    ac40:	e712      	b.n	aa68 <__ssvfscanf_r+0x1294>
    ac42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ac44:	64f9      	str	r1, [r7, #76]	; 0x4c
    ac46:	f853 2b04 	ldr.w	r2, [r3], #4
    ac4a:	f8c2 a000 	str.w	sl, [r2]
    ac4e:	633b      	str	r3, [r7, #48]	; 0x30
    ac50:	f7fe bde7 	b.w	9822 <__ssvfscanf_r+0x4e>
    ac54:	462b      	mov	r3, r5
    ac56:	6abd      	ldr	r5, [r7, #40]	; 0x28
    ac58:	42ab      	cmp	r3, r5
    ac5a:	f67e aeb0 	bls.w	99be <__ssvfscanf_r+0x1ea>
    ac5e:	461c      	mov	r4, r3
    ac60:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
    ac64:	465a      	mov	r2, fp
    ac66:	4648      	mov	r0, r9
    ac68:	f001 ff92 	bl	cb90 <_sungetc_r>
    ac6c:	42ac      	cmp	r4, r5
    ac6e:	d1f7      	bne.n	ac60 <__ssvfscanf_r+0x148c>
    ac70:	f7fe bea5 	b.w	99be <__ssvfscanf_r+0x1ea>
    ac74:	0000c4d5 	.word	0x0000c4d5
    ac78:	2000072d 	.word	0x2000072d
    ac7c:	200077d4 	.word	0x200077d4
    ac80:	f014 0310 	ands.w	r3, r4, #16
    ac84:	637b      	str	r3, [r7, #52]	; 0x34
    ac86:	d05e      	beq.n	ad46 <__ssvfscanf_r+0x1572>
    ac88:	2500      	movs	r5, #0
    ac8a:	63fd      	str	r5, [r7, #60]	; 0x3c
    ac8c:	64bd      	str	r5, [r7, #72]	; 0x48
    ac8e:	462e      	mov	r6, r5
    ac90:	2400      	movs	r4, #0
    ac92:	464b      	mov	r3, r9
    ac94:	46c1      	mov	r9, r8
    ac96:	46a8      	mov	r8, r5
    ac98:	4625      	mov	r5, r4
    ac9a:	461c      	mov	r4, r3
    ac9c:	f7fb f9ec 	bl	6078 <__locale_mb_cur_max>
    aca0:	42a8      	cmp	r0, r5
    aca2:	f43e ae83 	beq.w	99ac <__ssvfscanf_r+0x1d8>
    aca6:	e9db 3200 	ldrd	r3, r2, [fp]
    acaa:	f813 1b01 	ldrb.w	r1, [r3], #1
    acae:	3a01      	subs	r2, #1
    acb0:	e9cb 3200 	strd	r3, r2, [fp]
    acb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    acb6:	f507 70b8 	add.w	r0, r7, #368	; 0x170
    acba:	2a03      	cmp	r2, #3
    acbc:	5541      	strb	r1, [r0, r5]
    acbe:	f105 0301 	add.w	r3, r5, #1
    acc2:	f107 0568 	add.w	r5, r7, #104	; 0x68
    acc6:	d102      	bne.n	acce <__ssvfscanf_r+0x14fa>
    acc8:	682a      	ldr	r2, [r5, #0]
    acca:	2a04      	cmp	r2, #4
    accc:	d006      	beq.n	acdc <__ssvfscanf_r+0x1508>
    acce:	2208      	movs	r2, #8
    acd0:	2100      	movs	r1, #0
    acd2:	4628      	mov	r0, r5
    acd4:	62bb      	str	r3, [r7, #40]	; 0x28
    acd6:	f7fb f89f 	bl	5e18 <memset>
    acda:	6abb      	ldr	r3, [r7, #40]	; 0x28
    acdc:	9500      	str	r5, [sp, #0]
    acde:	f507 72b8 	add.w	r2, r7, #368	; 0x170
    ace2:	4631      	mov	r1, r6
    ace4:	4620      	mov	r0, r4
    ace6:	62bb      	str	r3, [r7, #40]	; 0x28
    ace8:	f001 fd7e 	bl	c7e8 <_mbrtowc_r>
    acec:	1c43      	adds	r3, r0, #1
    acee:	6278      	str	r0, [r7, #36]	; 0x24
    acf0:	f43e ae5c 	beq.w	99ac <__ssvfscanf_r+0x1d8>
    acf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    acf6:	2800      	cmp	r0, #0
    acf8:	f040 8147 	bne.w	af8a <__ssvfscanf_r+0x17b6>
    acfc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    acfe:	b902      	cbnz	r2, ad02 <__ssvfscanf_r+0x152e>
    ad00:	6032      	str	r2, [r6, #0]
    ad02:	449a      	add	sl, r3
    ad04:	f109 39ff 	add.w	r9, r9, #4294967295
    ad08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ad0a:	2b00      	cmp	r3, #0
    ad0c:	f040 8175 	bne.w	affa <__ssvfscanf_r+0x1826>
    ad10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    ad12:	2b00      	cmp	r3, #0
    ad14:	f000 8170 	beq.w	aff8 <__ssvfscanf_r+0x1824>
    ad18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ad1a:	1af5      	subs	r5, r6, r3
    ad1c:	ebb8 0fa5 	cmp.w	r8, r5, asr #2
    ad20:	f200 816a 	bhi.w	aff8 <__ssvfscanf_r+0x1824>
    ad24:	4618      	mov	r0, r3
    ad26:	ea4f 01c8 	mov.w	r1, r8, lsl #3
    ad2a:	f7f9 fc0f 	bl	454c <realloc>
    ad2e:	63f8      	str	r0, [r7, #60]	; 0x3c
    ad30:	2800      	cmp	r0, #0
    ad32:	f040 815c 	bne.w	afee <__ssvfscanf_r+0x181a>
    ad36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ad38:	2b00      	cmp	r3, #0
    ad3a:	d12d      	bne.n	ad98 <__ssvfscanf_r+0x15c4>
    ad3c:	f04f 33ff 	mov.w	r3, #4294967295
    ad40:	647b      	str	r3, [r7, #68]	; 0x44
    ad42:	f7fe be47 	b.w	99d4 <__ssvfscanf_r+0x200>
    ad46:	0622      	lsls	r2, r4, #24
    ad48:	f140 808f 	bpl.w	ae6a <__ssvfscanf_r+0x1696>
    ad4c:	6b3c      	ldr	r4, [r7, #48]	; 0x30
    ad4e:	f854 3b04 	ldr.w	r3, [r4], #4
    ad52:	64bb      	str	r3, [r7, #72]	; 0x48
    ad54:	2b00      	cmp	r3, #0
    ad56:	f43e ae32 	beq.w	99be <__ssvfscanf_r+0x1ea>
    ad5a:	2080      	movs	r0, #128	; 0x80
    ad5c:	f7f9 f92a 	bl	3fb4 <malloc>
    ad60:	4606      	mov	r6, r0
    ad62:	2800      	cmp	r0, #0
    ad64:	d0e7      	beq.n	ad36 <__ssvfscanf_r+0x1562>
    ad66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    ad68:	6018      	str	r0, [r3, #0]
    ad6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ad6c:	88dd      	ldrh	r5, [r3, #6]
    ad6e:	889a      	ldrh	r2, [r3, #4]
    ad70:	4295      	cmp	r5, r2
    ad72:	f0c0 80b3 	bcc.w	aedc <__ssvfscanf_r+0x1708>
    ad76:	f64f 71f6 	movw	r1, #65526	; 0xfff6
    ad7a:	428a      	cmp	r2, r1
    ad7c:	d856      	bhi.n	ae2c <__ssvfscanf_r+0x1658>
    ad7e:	3208      	adds	r2, #8
    ad80:	b293      	uxth	r3, r2
    ad82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    ad84:	63fb      	str	r3, [r7, #60]	; 0x3c
    ad86:	0099      	lsls	r1, r3, #2
    ad88:	6810      	ldr	r0, [r2, #0]
    ad8a:	f7f9 fbdf 	bl	454c <realloc>
    ad8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ad90:	2800      	cmp	r0, #0
    ad92:	f040 80ae 	bne.w	aef2 <__ssvfscanf_r+0x171e>
    ad96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ad98:	88db      	ldrh	r3, [r3, #6]
    ad9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    ad9c:	461e      	mov	r6, r3
    ad9e:	f8d2 8000 	ldr.w	r8, [r2]
    ada2:	e661      	b.n	aa68 <__ssvfscanf_r+0x1294>
    ada4:	462b      	mov	r3, r5
    ada6:	6abd      	ldr	r5, [r7, #40]	; 0x28
    ada8:	42ab      	cmp	r3, r5
    adaa:	f67e ae08 	bls.w	99be <__ssvfscanf_r+0x1ea>
    adae:	461c      	mov	r4, r3
    adb0:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
    adb4:	465a      	mov	r2, fp
    adb6:	4648      	mov	r0, r9
    adb8:	f001 feea 	bl	cb90 <_sungetc_r>
    adbc:	42ac      	cmp	r4, r5
    adbe:	d1f7      	bne.n	adb0 <__ssvfscanf_r+0x15dc>
    adc0:	f7fe bdfd 	b.w	99be <__ssvfscanf_r+0x1ea>
    adc4:	4610      	mov	r0, r2
    adc6:	00d9      	lsls	r1, r3, #3
    adc8:	461e      	mov	r6, r3
    adca:	f7f9 fbbf 	bl	454c <realloc>
    adce:	62b8      	str	r0, [r7, #40]	; 0x28
    add0:	2800      	cmp	r0, #0
    add2:	d0b0      	beq.n	ad36 <__ssvfscanf_r+0x1562>
    add4:	1942      	adds	r2, r0, r5
    add6:	64ba      	str	r2, [r7, #72]	; 0x48
    add8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    adda:	6b7d      	ldr	r5, [r7, #52]	; 0x34
    addc:	6010      	str	r0, [r2, #0]
    adde:	0073      	lsls	r3, r6, #1
    ade0:	623b      	str	r3, [r7, #32]
    ade2:	e4f8      	b.n	a7d6 <__ssvfscanf_r+0x1002>
    ade4:	f8d7 803c 	ldr.w	r8, [r7, #60]	; 0x3c
    ade8:	e63e      	b.n	aa68 <__ssvfscanf_r+0x1294>
    adea:	6c39      	ldr	r1, [r7, #64]	; 0x40
    adec:	6028      	str	r0, [r5, #0]
    adee:	88ce      	ldrh	r6, [r1, #6]
    adf0:	888a      	ldrh	r2, [r1, #4]
    adf2:	4296      	cmp	r6, r2
    adf4:	f0c0 808e 	bcc.w	af14 <__ssvfscanf_r+0x1740>
    adf8:	f64f 71f6 	movw	r1, #65526	; 0xfff6
    adfc:	428a      	cmp	r2, r1
    adfe:	6338      	str	r0, [r7, #48]	; 0x30
    ae00:	f240 80a5 	bls.w	af4e <__ssvfscanf_r+0x177a>
    ae04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ae06:	f8d3 8000 	ldr.w	r8, [r3]
    ae0a:	e62d      	b.n	aa68 <__ssvfscanf_r+0x1294>
    ae0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    ae0e:	4295      	cmp	r5, r2
    ae10:	f67e add5 	bls.w	99be <__ssvfscanf_r+0x1ea>
    ae14:	462c      	mov	r4, r5
    ae16:	6abd      	ldr	r5, [r7, #40]	; 0x28
    ae18:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
    ae1c:	465a      	mov	r2, fp
    ae1e:	4648      	mov	r0, r9
    ae20:	f001 feb6 	bl	cb90 <_sungetc_r>
    ae24:	42ac      	cmp	r4, r5
    ae26:	d1f7      	bne.n	ae18 <__ssvfscanf_r+0x1644>
    ae28:	f7fe bdc9 	b.w	99be <__ssvfscanf_r+0x1ea>
    ae2c:	462b      	mov	r3, r5
    ae2e:	e7b4      	b.n	ad9a <__ssvfscanf_r+0x15c6>
    ae30:	f001 fcd8 	bl	c7e4 <_strtoull_r>
    ae34:	e5c1      	b.n	a9ba <__ssvfscanf_r+0x11e6>
    ae36:	f8d8 3000 	ldr.w	r3, [r8]
    ae3a:	461d      	mov	r5, r3
    ae3c:	3301      	adds	r3, #1
    ae3e:	f47f a8d5 	bne.w	9fec <__ssvfscanf_r+0x818>
    ae42:	462a      	mov	r2, r5
    ae44:	f7ff b8e8 	b.w	a018 <__ssvfscanf_r+0x844>
    ae48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    ae4a:	6818      	ldr	r0, [r3, #0]
    ae4c:	f001 fd28 	bl	c8a0 <iswspace>
    ae50:	2800      	cmp	r0, #0
    ae52:	f47f aea8 	bne.w	aba6 <__ssvfscanf_r+0x13d2>
    ae56:	2c03      	cmp	r4, #3
    ae58:	44aa      	add	sl, r5
    ae5a:	f47f a849 	bne.w	9ef0 <__ssvfscanf_r+0x71c>
    ae5e:	6833      	ldr	r3, [r6, #0]
    ae60:	2b04      	cmp	r3, #4
    ae62:	f47f a845 	bne.w	9ef0 <__ssvfscanf_r+0x71c>
    ae66:	f7ff b845 	b.w	9ef4 <__ssvfscanf_r+0x720>
    ae6a:	e9d7 320c 	ldrd	r3, r2, [r7, #48]	; 0x30
    ae6e:	f853 6b04 	ldr.w	r6, [r3], #4
    ae72:	633b      	str	r3, [r7, #48]	; 0x30
    ae74:	4615      	mov	r5, r2
    ae76:	63fa      	str	r2, [r7, #60]	; 0x3c
    ae78:	64ba      	str	r2, [r7, #72]	; 0x48
    ae7a:	e709      	b.n	ac90 <__ssvfscanf_r+0x14bc>
    ae7c:	461c      	mov	r4, r3
    ae7e:	f8db 3004 	ldr.w	r3, [fp, #4]
    ae82:	4598      	cmp	r8, r3
    ae84:	dd39      	ble.n	aefa <__ssvfscanf_r+0x1726>
    ae86:	f8db 2000 	ldr.w	r2, [fp]
    ae8a:	441a      	add	r2, r3
    ae8c:	f8cb 2000 	str.w	r2, [fp]
    ae90:	4659      	mov	r1, fp
    ae92:	4648      	mov	r0, r9
    ae94:	441c      	add	r4, r3
    ae96:	eba8 0803 	sub.w	r8, r8, r3
    ae9a:	f001 feb9 	bl	cc10 <__ssrefill_r>
    ae9e:	2800      	cmp	r0, #0
    aea0:	d0ed      	beq.n	ae7e <__ssvfscanf_r+0x16aa>
    aea2:	2c00      	cmp	r4, #0
    aea4:	f43e ad82 	beq.w	99ac <__ssvfscanf_r+0x1d8>
    aea8:	44a2      	add	sl, r4
    aeaa:	f7fe bcba 	b.w	9822 <__ssvfscanf_r+0x4e>
    aeae:	6b3d      	ldr	r5, [r7, #48]	; 0x30
    aeb0:	4643      	mov	r3, r8
    aeb2:	6829      	ldr	r1, [r5, #0]
    aeb4:	f8cd b000 	str.w	fp, [sp]
    aeb8:	2201      	movs	r2, #1
    aeba:	4648      	mov	r0, r9
    aebc:	f001 fec6 	bl	cc4c <_sfread_r>
    aec0:	4604      	mov	r4, r0
    aec2:	2800      	cmp	r0, #0
    aec4:	f43e ad72 	beq.w	99ac <__ssvfscanf_r+0x1d8>
    aec8:	3504      	adds	r5, #4
    aeca:	64bd      	str	r5, [r7, #72]	; 0x48
    aecc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    aece:	3301      	adds	r3, #1
    aed0:	647b      	str	r3, [r7, #68]	; 0x44
    aed2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    aed4:	633b      	str	r3, [r7, #48]	; 0x30
    aed6:	44a2      	add	sl, r4
    aed8:	f7fe bca3 	b.w	9822 <__ssvfscanf_r+0x4e>
    aedc:	6818      	ldr	r0, [r3, #0]
    aede:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    aee0:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
    aee4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    aee6:	633c      	str	r4, [r7, #48]	; 0x30
    aee8:	3501      	adds	r5, #1
    aeea:	80dd      	strh	r5, [r3, #6]
    aeec:	63fe      	str	r6, [r7, #60]	; 0x3c
    aeee:	2520      	movs	r5, #32
    aef0:	e6ce      	b.n	ac90 <__ssvfscanf_r+0x14bc>
    aef2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    aef4:	8093      	strh	r3, [r2, #4]
    aef6:	6010      	str	r0, [r2, #0]
    aef8:	e7f1      	b.n	aede <__ssvfscanf_r+0x170a>
    aefa:	eba3 0308 	sub.w	r3, r3, r8
    aefe:	f8cb 3004 	str.w	r3, [fp, #4]
    af02:	f8db 3000 	ldr.w	r3, [fp]
    af06:	4444      	add	r4, r8
    af08:	4443      	add	r3, r8
    af0a:	f8cb 3000 	str.w	r3, [fp]
    af0e:	44a2      	add	sl, r4
    af10:	f7fe bc87 	b.w	9822 <__ssvfscanf_r+0x4e>
    af14:	680a      	ldr	r2, [r1, #0]
    af16:	63fa      	str	r2, [r7, #60]	; 0x3c
    af18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    af1a:	f842 5026 	str.w	r5, [r2, r6, lsl #2]
    af1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    af20:	3601      	adds	r6, #1
    af22:	b2b6      	uxth	r6, r6
    af24:	80d6      	strh	r6, [r2, #6]
    af26:	4619      	mov	r1, r3
    af28:	f8cd b000 	str.w	fp, [sp]
    af2c:	4643      	mov	r3, r8
    af2e:	2201      	movs	r2, #1
    af30:	4648      	mov	r0, r9
    af32:	f001 fe8b 	bl	cc4c <_sfread_r>
    af36:	4604      	mov	r4, r0
    af38:	b1d8      	cbz	r0, af72 <__ssvfscanf_r+0x179e>
    af3a:	4580      	cmp	r8, r0
    af3c:	d9c6      	bls.n	aecc <__ssvfscanf_r+0x16f8>
    af3e:	6828      	ldr	r0, [r5, #0]
    af40:	4621      	mov	r1, r4
    af42:	f7f9 fb03 	bl	454c <realloc>
    af46:	2800      	cmp	r0, #0
    af48:	d0c0      	beq.n	aecc <__ssvfscanf_r+0x16f8>
    af4a:	6028      	str	r0, [r5, #0]
    af4c:	e7be      	b.n	aecc <__ssvfscanf_r+0x16f8>
    af4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    af50:	3208      	adds	r2, #8
    af52:	b294      	uxth	r4, r2
    af54:	681a      	ldr	r2, [r3, #0]
    af56:	637a      	str	r2, [r7, #52]	; 0x34
    af58:	4610      	mov	r0, r2
    af5a:	00a1      	lsls	r1, r4, #2
    af5c:	f7f9 faf6 	bl	454c <realloc>
    af60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    af62:	63f8      	str	r0, [r7, #60]	; 0x3c
    af64:	2800      	cmp	r0, #0
    af66:	d05b      	beq.n	b020 <__ssvfscanf_r+0x184c>
    af68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    af6a:	809c      	strh	r4, [r3, #4]
    af6c:	6018      	str	r0, [r3, #0]
    af6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    af70:	e7d2      	b.n	af18 <__ssvfscanf_r+0x1744>
    af72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    af74:	f8d7 803c 	ldr.w	r8, [r7, #60]	; 0x3c
    af78:	2b00      	cmp	r3, #0
    af7a:	f43f ad75 	beq.w	aa68 <__ssvfscanf_r+0x1294>
    af7e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
    af82:	065b      	lsls	r3, r3, #25
    af84:	f57e ad1d 	bpl.w	99c2 <__ssvfscanf_r+0x1ee>
    af88:	e56a      	b.n	aa60 <__ssvfscanf_r+0x128c>
    af8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    af8c:	3202      	adds	r2, #2
    af8e:	d11d      	bne.n	afcc <__ssvfscanf_r+0x17f8>
    af90:	f8db 2004 	ldr.w	r2, [fp, #4]
    af94:	2a00      	cmp	r2, #0
    af96:	461d      	mov	r5, r3
    af98:	f73f ae80 	bgt.w	ac9c <__ssvfscanf_r+0x14c8>
    af9c:	4659      	mov	r1, fp
    af9e:	4620      	mov	r0, r4
    afa0:	f001 fe36 	bl	cc10 <__ssrefill_r>
    afa4:	b9e0      	cbnz	r0, afe0 <__ssvfscanf_r+0x180c>
    afa6:	f1b9 0f00 	cmp.w	r9, #0
    afaa:	f47f ae77 	bne.w	ac9c <__ssvfscanf_r+0x14c8>
    afae:	4645      	mov	r5, r8
    afb0:	46a1      	mov	r9, r4
    afb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    afb4:	b123      	cbz	r3, afc0 <__ssvfscanf_r+0x17ec>
    afb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    afb8:	1af1      	subs	r1, r6, r3
    afba:	ebb5 0fa1 	cmp.w	r5, r1, asr #2
    afbe:	d827      	bhi.n	b010 <__ssvfscanf_r+0x183c>
    afc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    afc2:	2b00      	cmp	r3, #0
    afc4:	f47e ac2d 	bne.w	9822 <__ssvfscanf_r+0x4e>
    afc8:	f7ff ba1c 	b.w	a404 <__ssvfscanf_r+0xc30>
    afcc:	449a      	add	sl, r3
    afce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    afd0:	2b03      	cmp	r3, #3
    afd2:	f47f ae97 	bne.w	ad04 <__ssvfscanf_r+0x1530>
    afd6:	682b      	ldr	r3, [r5, #0]
    afd8:	2b04      	cmp	r3, #4
    afda:	f47f ae93 	bne.w	ad04 <__ssvfscanf_r+0x1530>
    afde:	e693      	b.n	ad08 <__ssvfscanf_r+0x1534>
    afe0:	46a1      	mov	r9, r4
    afe2:	462c      	mov	r4, r5
    afe4:	4645      	mov	r5, r8
    afe6:	2c00      	cmp	r4, #0
    afe8:	d0e3      	beq.n	afb2 <__ssvfscanf_r+0x17de>
    afea:	f7fe bcdf 	b.w	99ac <__ssvfscanf_r+0x1d8>
    afee:	6cba      	ldr	r2, [r7, #72]	; 0x48
    aff0:	1946      	adds	r6, r0, r5
    aff2:	6010      	str	r0, [r2, #0]
    aff4:	ea4f 0848 	mov.w	r8, r8, lsl #1
    aff8:	3604      	adds	r6, #4
    affa:	f8db 3004 	ldr.w	r3, [fp, #4]
    affe:	2b00      	cmp	r3, #0
    b000:	f04f 0500 	mov.w	r5, #0
    b004:	ddca      	ble.n	af9c <__ssvfscanf_r+0x17c8>
    b006:	f1b9 0f00 	cmp.w	r9, #0
    b00a:	f47f ae47 	bne.w	ac9c <__ssvfscanf_r+0x14c8>
    b00e:	e7ce      	b.n	afae <__ssvfscanf_r+0x17da>
    b010:	6cbc      	ldr	r4, [r7, #72]	; 0x48
    b012:	6820      	ldr	r0, [r4, #0]
    b014:	f7f9 fa9a 	bl	454c <realloc>
    b018:	2800      	cmp	r0, #0
    b01a:	d0d1      	beq.n	afc0 <__ssvfscanf_r+0x17ec>
    b01c:	6020      	str	r0, [r4, #0]
    b01e:	e7cf      	b.n	afc0 <__ssvfscanf_r+0x17ec>
    b020:	4690      	mov	r8, r2
    b022:	e521      	b.n	aa68 <__ssvfscanf_r+0x1294>

0000b024 <_fclose_r>:
    b024:	b570      	push	{r4, r5, r6, lr}
    b026:	2900      	cmp	r1, #0
    b028:	d04b      	beq.n	b0c2 <_fclose_r+0x9e>
    b02a:	4606      	mov	r6, r0
    b02c:	460c      	mov	r4, r1
    b02e:	b110      	cbz	r0, b036 <_fclose_r+0x12>
    b030:	6b43      	ldr	r3, [r0, #52]	; 0x34
    b032:	2b00      	cmp	r3, #0
    b034:	d048      	beq.n	b0c8 <_fclose_r+0xa4>
    b036:	6e63      	ldr	r3, [r4, #100]	; 0x64
    b038:	07d8      	lsls	r0, r3, #31
    b03a:	d534      	bpl.n	b0a6 <_fclose_r+0x82>
    b03c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    b040:	2b00      	cmp	r3, #0
    b042:	d03e      	beq.n	b0c2 <_fclose_r+0x9e>
    b044:	4621      	mov	r1, r4
    b046:	4630      	mov	r0, r6
    b048:	f000 f850 	bl	b0ec <__sflush_r>
    b04c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    b04e:	4605      	mov	r5, r0
    b050:	b133      	cbz	r3, b060 <_fclose_r+0x3c>
    b052:	69e1      	ldr	r1, [r4, #28]
    b054:	4630      	mov	r0, r6
    b056:	4798      	blx	r3
    b058:	2800      	cmp	r0, #0
    b05a:	bfb8      	it	lt
    b05c:	f04f 35ff 	movlt.w	r5, #4294967295
    b060:	89a3      	ldrh	r3, [r4, #12]
    b062:	061a      	lsls	r2, r3, #24
    b064:	d43c      	bmi.n	b0e0 <_fclose_r+0xbc>
    b066:	6b21      	ldr	r1, [r4, #48]	; 0x30
    b068:	b141      	cbz	r1, b07c <_fclose_r+0x58>
    b06a:	f104 0340 	add.w	r3, r4, #64	; 0x40
    b06e:	4299      	cmp	r1, r3
    b070:	d002      	beq.n	b078 <_fclose_r+0x54>
    b072:	4630      	mov	r0, r6
    b074:	f7fb fb96 	bl	67a4 <_free_r>
    b078:	2300      	movs	r3, #0
    b07a:	6323      	str	r3, [r4, #48]	; 0x30
    b07c:	6c61      	ldr	r1, [r4, #68]	; 0x44
    b07e:	b121      	cbz	r1, b08a <_fclose_r+0x66>
    b080:	4630      	mov	r0, r6
    b082:	f7fb fb8f 	bl	67a4 <_free_r>
    b086:	2300      	movs	r3, #0
    b088:	6463      	str	r3, [r4, #68]	; 0x44
    b08a:	f7fa fd07 	bl	5a9c <__sfp_lock_acquire>
    b08e:	6e63      	ldr	r3, [r4, #100]	; 0x64
    b090:	2200      	movs	r2, #0
    b092:	07db      	lsls	r3, r3, #31
    b094:	81a2      	strh	r2, [r4, #12]
    b096:	d51f      	bpl.n	b0d8 <_fclose_r+0xb4>
    b098:	6da0      	ldr	r0, [r4, #88]	; 0x58
    b09a:	f7fb f885 	bl	61a8 <__retarget_lock_close_recursive>
    b09e:	f7fa fd03 	bl	5aa8 <__sfp_lock_release>
    b0a2:	4628      	mov	r0, r5
    b0a4:	bd70      	pop	{r4, r5, r6, pc}
    b0a6:	89a3      	ldrh	r3, [r4, #12]
    b0a8:	0599      	lsls	r1, r3, #22
    b0aa:	d4cb      	bmi.n	b044 <_fclose_r+0x20>
    b0ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
    b0ae:	f7fb f87d 	bl	61ac <__retarget_lock_acquire_recursive>
    b0b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    b0b6:	2b00      	cmp	r3, #0
    b0b8:	d1c4      	bne.n	b044 <_fclose_r+0x20>
    b0ba:	6e65      	ldr	r5, [r4, #100]	; 0x64
    b0bc:	f015 0501 	ands.w	r5, r5, #1
    b0c0:	d005      	beq.n	b0ce <_fclose_r+0xaa>
    b0c2:	2500      	movs	r5, #0
    b0c4:	4628      	mov	r0, r5
    b0c6:	bd70      	pop	{r4, r5, r6, pc}
    b0c8:	f7fa fcca 	bl	5a60 <__sinit>
    b0cc:	e7b3      	b.n	b036 <_fclose_r+0x12>
    b0ce:	6da0      	ldr	r0, [r4, #88]	; 0x58
    b0d0:	f7fb f86e 	bl	61b0 <__retarget_lock_release_recursive>
    b0d4:	4628      	mov	r0, r5
    b0d6:	bd70      	pop	{r4, r5, r6, pc}
    b0d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    b0da:	f7fb f869 	bl	61b0 <__retarget_lock_release_recursive>
    b0de:	e7db      	b.n	b098 <_fclose_r+0x74>
    b0e0:	6921      	ldr	r1, [r4, #16]
    b0e2:	4630      	mov	r0, r6
    b0e4:	f7fb fb5e 	bl	67a4 <_free_r>
    b0e8:	e7bd      	b.n	b066 <_fclose_r+0x42>
    b0ea:	bf00      	nop

0000b0ec <__sflush_r>:
    b0ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
    b0f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b0f4:	460c      	mov	r4, r1
    b0f6:	0711      	lsls	r1, r2, #28
    b0f8:	4680      	mov	r8, r0
    b0fa:	d447      	bmi.n	b18c <__sflush_r+0xa0>
    b0fc:	6863      	ldr	r3, [r4, #4]
    b0fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    b102:	2b00      	cmp	r3, #0
    b104:	81a2      	strh	r2, [r4, #12]
    b106:	dd5e      	ble.n	b1c6 <__sflush_r+0xda>
    b108:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    b10a:	2d00      	cmp	r5, #0
    b10c:	d058      	beq.n	b1c0 <__sflush_r+0xd4>
    b10e:	2300      	movs	r3, #0
    b110:	f8d8 6000 	ldr.w	r6, [r8]
    b114:	f8c8 3000 	str.w	r3, [r8]
    b118:	b293      	uxth	r3, r2
    b11a:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    b11e:	d156      	bne.n	b1ce <__sflush_r+0xe2>
    b120:	2301      	movs	r3, #1
    b122:	69e1      	ldr	r1, [r4, #28]
    b124:	4640      	mov	r0, r8
    b126:	47a8      	blx	r5
    b128:	1c43      	adds	r3, r0, #1
    b12a:	d067      	beq.n	b1fc <__sflush_r+0x110>
    b12c:	89a3      	ldrh	r3, [r4, #12]
    b12e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    b130:	075f      	lsls	r7, r3, #29
    b132:	d505      	bpl.n	b140 <__sflush_r+0x54>
    b134:	6863      	ldr	r3, [r4, #4]
    b136:	1ac0      	subs	r0, r0, r3
    b138:	6b23      	ldr	r3, [r4, #48]	; 0x30
    b13a:	b10b      	cbz	r3, b140 <__sflush_r+0x54>
    b13c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    b13e:	1ac0      	subs	r0, r0, r3
    b140:	69e1      	ldr	r1, [r4, #28]
    b142:	4602      	mov	r2, r0
    b144:	2300      	movs	r3, #0
    b146:	4640      	mov	r0, r8
    b148:	47a8      	blx	r5
    b14a:	1c41      	adds	r1, r0, #1
    b14c:	d141      	bne.n	b1d2 <__sflush_r+0xe6>
    b14e:	f8d8 3000 	ldr.w	r3, [r8]
    b152:	2b00      	cmp	r3, #0
    b154:	d03d      	beq.n	b1d2 <__sflush_r+0xe6>
    b156:	2b1d      	cmp	r3, #29
    b158:	d001      	beq.n	b15e <__sflush_r+0x72>
    b15a:	2b16      	cmp	r3, #22
    b15c:	d156      	bne.n	b20c <__sflush_r+0x120>
    b15e:	89a3      	ldrh	r3, [r4, #12]
    b160:	6922      	ldr	r2, [r4, #16]
    b162:	6022      	str	r2, [r4, #0]
    b164:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    b168:	2100      	movs	r1, #0
    b16a:	6061      	str	r1, [r4, #4]
    b16c:	81a3      	strh	r3, [r4, #12]
    b16e:	6b21      	ldr	r1, [r4, #48]	; 0x30
    b170:	f8c8 6000 	str.w	r6, [r8]
    b174:	b321      	cbz	r1, b1c0 <__sflush_r+0xd4>
    b176:	f104 0340 	add.w	r3, r4, #64	; 0x40
    b17a:	4299      	cmp	r1, r3
    b17c:	d002      	beq.n	b184 <__sflush_r+0x98>
    b17e:	4640      	mov	r0, r8
    b180:	f7fb fb10 	bl	67a4 <_free_r>
    b184:	2000      	movs	r0, #0
    b186:	6320      	str	r0, [r4, #48]	; 0x30
    b188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b18c:	6926      	ldr	r6, [r4, #16]
    b18e:	b1be      	cbz	r6, b1c0 <__sflush_r+0xd4>
    b190:	b293      	uxth	r3, r2
    b192:	6825      	ldr	r5, [r4, #0]
    b194:	6026      	str	r6, [r4, #0]
    b196:	079a      	lsls	r2, r3, #30
    b198:	bf0c      	ite	eq
    b19a:	6963      	ldreq	r3, [r4, #20]
    b19c:	2300      	movne	r3, #0
    b19e:	1bad      	subs	r5, r5, r6
    b1a0:	60a3      	str	r3, [r4, #8]
    b1a2:	e00b      	b.n	b1bc <__sflush_r+0xd0>
    b1a4:	462b      	mov	r3, r5
    b1a6:	4632      	mov	r2, r6
    b1a8:	69e1      	ldr	r1, [r4, #28]
    b1aa:	6a67      	ldr	r7, [r4, #36]	; 0x24
    b1ac:	4640      	mov	r0, r8
    b1ae:	47b8      	blx	r7
    b1b0:	f1b0 0c00 	subs.w	ip, r0, #0
    b1b4:	eba5 050c 	sub.w	r5, r5, ip
    b1b8:	4466      	add	r6, ip
    b1ba:	dd17      	ble.n	b1ec <__sflush_r+0x100>
    b1bc:	2d00      	cmp	r5, #0
    b1be:	dcf1      	bgt.n	b1a4 <__sflush_r+0xb8>
    b1c0:	2000      	movs	r0, #0
    b1c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b1c6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    b1c8:	2b00      	cmp	r3, #0
    b1ca:	dc9d      	bgt.n	b108 <__sflush_r+0x1c>
    b1cc:	e7f8      	b.n	b1c0 <__sflush_r+0xd4>
    b1ce:	6d20      	ldr	r0, [r4, #80]	; 0x50
    b1d0:	e7ae      	b.n	b130 <__sflush_r+0x44>
    b1d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    b1d6:	6922      	ldr	r2, [r4, #16]
    b1d8:	6022      	str	r2, [r4, #0]
    b1da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    b1de:	81a3      	strh	r3, [r4, #12]
    b1e0:	2200      	movs	r2, #0
    b1e2:	04db      	lsls	r3, r3, #19
    b1e4:	6062      	str	r2, [r4, #4]
    b1e6:	d5c2      	bpl.n	b16e <__sflush_r+0x82>
    b1e8:	6520      	str	r0, [r4, #80]	; 0x50
    b1ea:	e7c0      	b.n	b16e <__sflush_r+0x82>
    b1ec:	89a3      	ldrh	r3, [r4, #12]
    b1ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b1f2:	f04f 30ff 	mov.w	r0, #4294967295
    b1f6:	81a3      	strh	r3, [r4, #12]
    b1f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b1fc:	f8d8 3000 	ldr.w	r3, [r8]
    b200:	2b00      	cmp	r3, #0
    b202:	d093      	beq.n	b12c <__sflush_r+0x40>
    b204:	2b1d      	cmp	r3, #29
    b206:	d006      	beq.n	b216 <__sflush_r+0x12a>
    b208:	2b16      	cmp	r3, #22
    b20a:	d004      	beq.n	b216 <__sflush_r+0x12a>
    b20c:	89a3      	ldrh	r3, [r4, #12]
    b20e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b212:	81a3      	strh	r3, [r4, #12]
    b214:	e7d5      	b.n	b1c2 <__sflush_r+0xd6>
    b216:	f8c8 6000 	str.w	r6, [r8]
    b21a:	e7d1      	b.n	b1c0 <__sflush_r+0xd4>

0000b21c <_fflush_r>:
    b21c:	b538      	push	{r3, r4, r5, lr}
    b21e:	460c      	mov	r4, r1
    b220:	4605      	mov	r5, r0
    b222:	b108      	cbz	r0, b228 <_fflush_r+0xc>
    b224:	6b43      	ldr	r3, [r0, #52]	; 0x34
    b226:	b303      	cbz	r3, b26a <_fflush_r+0x4e>
    b228:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
    b22c:	b188      	cbz	r0, b252 <_fflush_r+0x36>
    b22e:	6e63      	ldr	r3, [r4, #100]	; 0x64
    b230:	07db      	lsls	r3, r3, #31
    b232:	d401      	bmi.n	b238 <_fflush_r+0x1c>
    b234:	0581      	lsls	r1, r0, #22
    b236:	d50f      	bpl.n	b258 <_fflush_r+0x3c>
    b238:	4628      	mov	r0, r5
    b23a:	4621      	mov	r1, r4
    b23c:	f7ff ff56 	bl	b0ec <__sflush_r>
    b240:	6e63      	ldr	r3, [r4, #100]	; 0x64
    b242:	07da      	lsls	r2, r3, #31
    b244:	4605      	mov	r5, r0
    b246:	d402      	bmi.n	b24e <_fflush_r+0x32>
    b248:	89a3      	ldrh	r3, [r4, #12]
    b24a:	059b      	lsls	r3, r3, #22
    b24c:	d508      	bpl.n	b260 <_fflush_r+0x44>
    b24e:	4628      	mov	r0, r5
    b250:	bd38      	pop	{r3, r4, r5, pc}
    b252:	4605      	mov	r5, r0
    b254:	4628      	mov	r0, r5
    b256:	bd38      	pop	{r3, r4, r5, pc}
    b258:	6da0      	ldr	r0, [r4, #88]	; 0x58
    b25a:	f7fa ffa7 	bl	61ac <__retarget_lock_acquire_recursive>
    b25e:	e7eb      	b.n	b238 <_fflush_r+0x1c>
    b260:	6da0      	ldr	r0, [r4, #88]	; 0x58
    b262:	f7fa ffa5 	bl	61b0 <__retarget_lock_release_recursive>
    b266:	4628      	mov	r0, r5
    b268:	bd38      	pop	{r3, r4, r5, pc}
    b26a:	f7fa fbf9 	bl	5a60 <__sinit>
    b26e:	e7db      	b.n	b228 <_fflush_r+0xc>

0000b270 <__sccl>:
    b270:	b570      	push	{r4, r5, r6, lr}
    b272:	780c      	ldrb	r4, [r1, #0]
    b274:	2c5e      	cmp	r4, #94	; 0x5e
    b276:	4686      	mov	lr, r0
    b278:	d01e      	beq.n	b2b8 <__sccl+0x48>
    b27a:	2200      	movs	r2, #0
    b27c:	1c48      	adds	r0, r1, #1
    b27e:	4694      	mov	ip, r2
    b280:	f10e 33ff 	add.w	r3, lr, #4294967295
    b284:	f10e 01ff 	add.w	r1, lr, #255	; 0xff
    b288:	f803 2f01 	strb.w	r2, [r3, #1]!
    b28c:	428b      	cmp	r3, r1
    b28e:	d1fb      	bne.n	b288 <__sccl+0x18>
    b290:	b184      	cbz	r4, b2b4 <__sccl+0x44>
    b292:	f08c 0101 	eor.w	r1, ip, #1
    b296:	f80e 1004 	strb.w	r1, [lr, r4]
    b29a:	1c45      	adds	r5, r0, #1
    b29c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    b2a0:	2b2d      	cmp	r3, #45	; 0x2d
    b2a2:	d00e      	beq.n	b2c2 <__sccl+0x52>
    b2a4:	2b5d      	cmp	r3, #93	; 0x5d
    b2a6:	d003      	beq.n	b2b0 <__sccl+0x40>
    b2a8:	b11b      	cbz	r3, b2b2 <__sccl+0x42>
    b2aa:	461c      	mov	r4, r3
    b2ac:	4628      	mov	r0, r5
    b2ae:	e7f2      	b.n	b296 <__sccl+0x26>
    b2b0:	4628      	mov	r0, r5
    b2b2:	bd70      	pop	{r4, r5, r6, pc}
    b2b4:	3801      	subs	r0, #1
    b2b6:	bd70      	pop	{r4, r5, r6, pc}
    b2b8:	2201      	movs	r2, #1
    b2ba:	784c      	ldrb	r4, [r1, #1]
    b2bc:	1c88      	adds	r0, r1, #2
    b2be:	4694      	mov	ip, r2
    b2c0:	e7de      	b.n	b280 <__sccl+0x10>
    b2c2:	f890 c001 	ldrb.w	ip, [r0, #1]
    b2c6:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
    b2ca:	d0ee      	beq.n	b2aa <__sccl+0x3a>
    b2cc:	4564      	cmp	r4, ip
    b2ce:	dcec      	bgt.n	b2aa <__sccl+0x3a>
    b2d0:	1c66      	adds	r6, r4, #1
    b2d2:	3002      	adds	r0, #2
    b2d4:	eb0e 0206 	add.w	r2, lr, r6
    b2d8:	f802 1b01 	strb.w	r1, [r2], #1
    b2dc:	eba2 030e 	sub.w	r3, r2, lr
    b2e0:	3b01      	subs	r3, #1
    b2e2:	459c      	cmp	ip, r3
    b2e4:	dcf8      	bgt.n	b2d8 <__sccl+0x68>
    b2e6:	ebac 0304 	sub.w	r3, ip, r4
    b2ea:	3b01      	subs	r3, #1
    b2ec:	4564      	cmp	r4, ip
    b2ee:	bfa8      	it	ge
    b2f0:	2300      	movge	r3, #0
    b2f2:	3502      	adds	r5, #2
    b2f4:	199c      	adds	r4, r3, r6
    b2f6:	e7d1      	b.n	b29c <__sccl+0x2c>

0000b2f8 <sprintf>:
    b2f8:	b40e      	push	{r1, r2, r3}
    b2fa:	b510      	push	{r4, lr}
    b2fc:	b09d      	sub	sp, #116	; 0x74
    b2fe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    b302:	ab1f      	add	r3, sp, #124	; 0x7c
    b304:	e9cd 0106 	strd	r0, r1, [sp, #24]
    b308:	9104      	str	r1, [sp, #16]
    b30a:	4909      	ldr	r1, [pc, #36]	; (b330 <sprintf+0x38>)
    b30c:	f853 2b04 	ldr.w	r2, [r3], #4
    b310:	9002      	str	r0, [sp, #8]
    b312:	4c08      	ldr	r4, [pc, #32]	; (b334 <sprintf+0x3c>)
    b314:	6808      	ldr	r0, [r1, #0]
    b316:	9301      	str	r3, [sp, #4]
    b318:	a902      	add	r1, sp, #8
    b31a:	9405      	str	r4, [sp, #20]
    b31c:	f7fc fcb8 	bl	7c90 <_svfprintf_r>
    b320:	9b02      	ldr	r3, [sp, #8]
    b322:	2200      	movs	r2, #0
    b324:	701a      	strb	r2, [r3, #0]
    b326:	b01d      	add	sp, #116	; 0x74
    b328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b32c:	b003      	add	sp, #12
    b32e:	4770      	bx	lr
    b330:	200081f8 	.word	0x200081f8
    b334:	ffff0208 	.word	0xffff0208

0000b338 <stpncpy>:
    b338:	ea41 0300 	orr.w	r3, r1, r0
    b33c:	079b      	lsls	r3, r3, #30
    b33e:	b430      	push	{r4, r5}
    b340:	d101      	bne.n	b346 <stpncpy+0xe>
    b342:	2a03      	cmp	r2, #3
    b344:	d80f      	bhi.n	b366 <stpncpy+0x2e>
    b346:	f101 3cff 	add.w	ip, r1, #4294967295
    b34a:	e007      	b.n	b35c <stpncpy+0x24>
    b34c:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
    b350:	f803 1b01 	strb.w	r1, [r3], #1
    b354:	1e54      	subs	r4, r2, #1
    b356:	b1c1      	cbz	r1, b38a <stpncpy+0x52>
    b358:	4622      	mov	r2, r4
    b35a:	4618      	mov	r0, r3
    b35c:	4603      	mov	r3, r0
    b35e:	2a00      	cmp	r2, #0
    b360:	d1f4      	bne.n	b34c <stpncpy+0x14>
    b362:	bc30      	pop	{r4, r5}
    b364:	4770      	bx	lr
    b366:	460b      	mov	r3, r1
    b368:	4619      	mov	r1, r3
    b36a:	f853 5b04 	ldr.w	r5, [r3], #4
    b36e:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
    b372:	ea24 0405 	bic.w	r4, r4, r5
    b376:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    b37a:	d1e4      	bne.n	b346 <stpncpy+0xe>
    b37c:	3a04      	subs	r2, #4
    b37e:	2a03      	cmp	r2, #3
    b380:	f840 5b04 	str.w	r5, [r0], #4
    b384:	4619      	mov	r1, r3
    b386:	d8ef      	bhi.n	b368 <stpncpy+0x30>
    b388:	e7dd      	b.n	b346 <stpncpy+0xe>
    b38a:	4402      	add	r2, r0
    b38c:	2c00      	cmp	r4, #0
    b38e:	d0e8      	beq.n	b362 <stpncpy+0x2a>
    b390:	f803 1b01 	strb.w	r1, [r3], #1
    b394:	4293      	cmp	r3, r2
    b396:	d1fb      	bne.n	b390 <stpncpy+0x58>
    b398:	bc30      	pop	{r4, r5}
    b39a:	4770      	bx	lr

0000b39c <_localeconv_r>:
    b39c:	4800      	ldr	r0, [pc, #0]	; (b3a0 <_localeconv_r+0x4>)
    b39e:	4770      	bx	lr
    b3a0:	20007d60 	.word	0x20007d60
	...

0000b3b0 <memchr>:
    b3b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    b3b4:	2a10      	cmp	r2, #16
    b3b6:	db2b      	blt.n	b410 <memchr+0x60>
    b3b8:	f010 0f07 	tst.w	r0, #7
    b3bc:	d008      	beq.n	b3d0 <memchr+0x20>
    b3be:	f810 3b01 	ldrb.w	r3, [r0], #1
    b3c2:	3a01      	subs	r2, #1
    b3c4:	428b      	cmp	r3, r1
    b3c6:	d02d      	beq.n	b424 <memchr+0x74>
    b3c8:	f010 0f07 	tst.w	r0, #7
    b3cc:	b342      	cbz	r2, b420 <memchr+0x70>
    b3ce:	d1f6      	bne.n	b3be <memchr+0xe>
    b3d0:	b4f0      	push	{r4, r5, r6, r7}
    b3d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    b3d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    b3da:	f022 0407 	bic.w	r4, r2, #7
    b3de:	f07f 0700 	mvns.w	r7, #0
    b3e2:	2300      	movs	r3, #0
    b3e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    b3e8:	3c08      	subs	r4, #8
    b3ea:	ea85 0501 	eor.w	r5, r5, r1
    b3ee:	ea86 0601 	eor.w	r6, r6, r1
    b3f2:	fa85 f547 	uadd8	r5, r5, r7
    b3f6:	faa3 f587 	sel	r5, r3, r7
    b3fa:	fa86 f647 	uadd8	r6, r6, r7
    b3fe:	faa5 f687 	sel	r6, r5, r7
    b402:	b98e      	cbnz	r6, b428 <memchr+0x78>
    b404:	d1ee      	bne.n	b3e4 <memchr+0x34>
    b406:	bcf0      	pop	{r4, r5, r6, r7}
    b408:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    b40c:	f002 0207 	and.w	r2, r2, #7
    b410:	b132      	cbz	r2, b420 <memchr+0x70>
    b412:	f810 3b01 	ldrb.w	r3, [r0], #1
    b416:	3a01      	subs	r2, #1
    b418:	ea83 0301 	eor.w	r3, r3, r1
    b41c:	b113      	cbz	r3, b424 <memchr+0x74>
    b41e:	d1f8      	bne.n	b412 <memchr+0x62>
    b420:	2000      	movs	r0, #0
    b422:	4770      	bx	lr
    b424:	3801      	subs	r0, #1
    b426:	4770      	bx	lr
    b428:	2d00      	cmp	r5, #0
    b42a:	bf06      	itte	eq
    b42c:	4635      	moveq	r5, r6
    b42e:	3803      	subeq	r0, #3
    b430:	3807      	subne	r0, #7
    b432:	f015 0f01 	tst.w	r5, #1
    b436:	d107      	bne.n	b448 <memchr+0x98>
    b438:	3001      	adds	r0, #1
    b43a:	f415 7f80 	tst.w	r5, #256	; 0x100
    b43e:	bf02      	ittt	eq
    b440:	3001      	addeq	r0, #1
    b442:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    b446:	3001      	addeq	r0, #1
    b448:	bcf0      	pop	{r4, r5, r6, r7}
    b44a:	3801      	subs	r0, #1
    b44c:	4770      	bx	lr
    b44e:	bf00      	nop

0000b450 <frexp>:
    b450:	b430      	push	{r4, r5}
    b452:	b082      	sub	sp, #8
    b454:	ed8d 0b00 	vstr	d0, [sp]
    b458:	9a01      	ldr	r2, [sp, #4]
    b45a:	4c19      	ldr	r4, [pc, #100]	; (b4c0 <frexp+0x70>)
    b45c:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
    b460:	2100      	movs	r1, #0
    b462:	42a3      	cmp	r3, r4
    b464:	6001      	str	r1, [r0, #0]
    b466:	dc21      	bgt.n	b4ac <frexp+0x5c>
    b468:	9c00      	ldr	r4, [sp, #0]
    b46a:	431c      	orrs	r4, r3
    b46c:	d01e      	beq.n	b4ac <frexp+0x5c>
    b46e:	4c15      	ldr	r4, [pc, #84]	; (b4c4 <frexp+0x74>)
    b470:	4014      	ands	r4, r2
    b472:	b954      	cbnz	r4, b48a <frexp+0x3a>
    b474:	ed9f 7b10 	vldr	d7, [pc, #64]	; b4b8 <frexp+0x68>
    b478:	ee20 7b07 	vmul.f64	d7, d0, d7
    b47c:	ed8d 7b00 	vstr	d7, [sp]
    b480:	9a01      	ldr	r2, [sp, #4]
    b482:	f06f 0135 	mvn.w	r1, #53	; 0x35
    b486:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
    b48a:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
    b48e:	e9dd 4500 	ldrd	r4, r5, [sp]
    b492:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
    b496:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
    b49a:	151b      	asrs	r3, r3, #20
    b49c:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
    b4a0:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
    b4a4:	e9cd 4500 	strd	r4, r5, [sp]
    b4a8:	440b      	add	r3, r1
    b4aa:	6003      	str	r3, [r0, #0]
    b4ac:	ed9d 0b00 	vldr	d0, [sp]
    b4b0:	b002      	add	sp, #8
    b4b2:	bc30      	pop	{r4, r5}
    b4b4:	4770      	bx	lr
    b4b6:	bf00      	nop
    b4b8:	00000000 	.word	0x00000000
    b4bc:	43500000 	.word	0x43500000
    b4c0:	7fefffff 	.word	0x7fefffff
    b4c4:	7ff00000 	.word	0x7ff00000

0000b4c8 <__assert_func>:
    b4c8:	b500      	push	{lr}
    b4ca:	4c0b      	ldr	r4, [pc, #44]	; (b4f8 <__assert_func+0x30>)
    b4cc:	6825      	ldr	r5, [r4, #0]
    b4ce:	4614      	mov	r4, r2
    b4d0:	68ee      	ldr	r6, [r5, #12]
    b4d2:	461a      	mov	r2, r3
    b4d4:	b085      	sub	sp, #20
    b4d6:	4603      	mov	r3, r0
    b4d8:	460d      	mov	r5, r1
    b4da:	b14c      	cbz	r4, b4f0 <__assert_func+0x28>
    b4dc:	4907      	ldr	r1, [pc, #28]	; (b4fc <__assert_func+0x34>)
    b4de:	9500      	str	r5, [sp, #0]
    b4e0:	e9cd 1401 	strd	r1, r4, [sp, #4]
    b4e4:	4630      	mov	r0, r6
    b4e6:	4906      	ldr	r1, [pc, #24]	; (b500 <__assert_func+0x38>)
    b4e8:	f001 fabe 	bl	ca68 <fiprintf>
    b4ec:	f7f7 f8bc 	bl	2668 <abort>
    b4f0:	4904      	ldr	r1, [pc, #16]	; (b504 <__assert_func+0x3c>)
    b4f2:	460c      	mov	r4, r1
    b4f4:	e7f3      	b.n	b4de <__assert_func+0x16>
    b4f6:	bf00      	nop
    b4f8:	200081f8 	.word	0x200081f8
    b4fc:	20000510 	.word	0x20000510
    b500:	20000520 	.word	0x20000520
    b504:	200077d4 	.word	0x200077d4

0000b508 <_calloc_r>:
    b508:	b538      	push	{r3, r4, r5, lr}
    b50a:	fba1 1402 	umull	r1, r4, r1, r2
    b50e:	bb8c      	cbnz	r4, b574 <_calloc_r+0x6c>
    b510:	f7f8 fd60 	bl	3fd4 <_malloc_r>
    b514:	4605      	mov	r5, r0
    b516:	b1e0      	cbz	r0, b552 <_calloc_r+0x4a>
    b518:	f850 2c04 	ldr.w	r2, [r0, #-4]
    b51c:	f022 0203 	bic.w	r2, r2, #3
    b520:	3a04      	subs	r2, #4
    b522:	2a24      	cmp	r2, #36	; 0x24
    b524:	d817      	bhi.n	b556 <_calloc_r+0x4e>
    b526:	2a13      	cmp	r2, #19
    b528:	d91a      	bls.n	b560 <_calloc_r+0x58>
    b52a:	2a1b      	cmp	r2, #27
    b52c:	e9c0 4400 	strd	r4, r4, [r0]
    b530:	d91d      	bls.n	b56e <_calloc_r+0x66>
    b532:	2a24      	cmp	r2, #36	; 0x24
    b534:	bf14      	ite	ne
    b536:	f100 0210 	addne.w	r2, r0, #16
    b53a:	f100 0218 	addeq.w	r2, r0, #24
    b53e:	f04f 0300 	mov.w	r3, #0
    b542:	e9c0 4402 	strd	r4, r4, [r0, #8]
    b546:	bf04      	itt	eq
    b548:	6104      	streq	r4, [r0, #16]
    b54a:	6144      	streq	r4, [r0, #20]
    b54c:	e9c2 3300 	strd	r3, r3, [r2]
    b550:	6093      	str	r3, [r2, #8]
    b552:	4628      	mov	r0, r5
    b554:	bd38      	pop	{r3, r4, r5, pc}
    b556:	4621      	mov	r1, r4
    b558:	f7fa fc5e 	bl	5e18 <memset>
    b55c:	4628      	mov	r0, r5
    b55e:	bd38      	pop	{r3, r4, r5, pc}
    b560:	4602      	mov	r2, r0
    b562:	2300      	movs	r3, #0
    b564:	e9c2 3300 	strd	r3, r3, [r2]
    b568:	6093      	str	r3, [r2, #8]
    b56a:	4628      	mov	r0, r5
    b56c:	bd38      	pop	{r3, r4, r5, pc}
    b56e:	f100 0208 	add.w	r2, r0, #8
    b572:	e7f6      	b.n	b562 <_calloc_r+0x5a>
    b574:	f7fa fdec 	bl	6150 <__errno>
    b578:	230c      	movs	r3, #12
    b57a:	2500      	movs	r5, #0
    b57c:	6003      	str	r3, [r0, #0]
    b57e:	e7e8      	b.n	b552 <_calloc_r+0x4a>

0000b580 <quorem>:
    b580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b584:	6903      	ldr	r3, [r0, #16]
    b586:	690c      	ldr	r4, [r1, #16]
    b588:	42a3      	cmp	r3, r4
    b58a:	b083      	sub	sp, #12
    b58c:	f2c0 8087 	blt.w	b69e <quorem+0x11e>
    b590:	3c01      	subs	r4, #1
    b592:	f101 0514 	add.w	r5, r1, #20
    b596:	00a3      	lsls	r3, r4, #2
    b598:	f100 0814 	add.w	r8, r0, #20
    b59c:	9300      	str	r3, [sp, #0]
    b59e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    b5a2:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
    b5a6:	3301      	adds	r3, #1
    b5a8:	4681      	mov	r9, r0
    b5aa:	429a      	cmp	r2, r3
    b5ac:	eb08 0084 	add.w	r0, r8, r4, lsl #2
    b5b0:	eb05 0784 	add.w	r7, r5, r4, lsl #2
    b5b4:	9001      	str	r0, [sp, #4]
    b5b6:	fbb2 f6f3 	udiv	r6, r2, r3
    b5ba:	d33b      	bcc.n	b634 <quorem+0xb4>
    b5bc:	f04f 0c00 	mov.w	ip, #0
    b5c0:	46ae      	mov	lr, r5
    b5c2:	4640      	mov	r0, r8
    b5c4:	46e2      	mov	sl, ip
    b5c6:	4663      	mov	r3, ip
    b5c8:	f85e bb04 	ldr.w	fp, [lr], #4
    b5cc:	6802      	ldr	r2, [r0, #0]
    b5ce:	fa1f fc8b 	uxth.w	ip, fp
    b5d2:	fb06 330c 	mla	r3, r6, ip, r3
    b5d6:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    b5da:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
    b5de:	fb06 cc0b 	mla	ip, r6, fp, ip
    b5e2:	b29b      	uxth	r3, r3
    b5e4:	ebaa 0303 	sub.w	r3, sl, r3
    b5e8:	fa1f fa8c 	uxth.w	sl, ip
    b5ec:	fa13 f382 	uxtah	r3, r3, r2
    b5f0:	ebca 4212 	rsb	r2, sl, r2, lsr #16
    b5f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
    b5f8:	b29b      	uxth	r3, r3
    b5fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    b5fe:	4577      	cmp	r7, lr
    b600:	f840 3b04 	str.w	r3, [r0], #4
    b604:	ea4f 4a22 	mov.w	sl, r2, asr #16
    b608:	ea4f 431c 	mov.w	r3, ip, lsr #16
    b60c:	d2dc      	bcs.n	b5c8 <quorem+0x48>
    b60e:	9b00      	ldr	r3, [sp, #0]
    b610:	f858 3003 	ldr.w	r3, [r8, r3]
    b614:	b973      	cbnz	r3, b634 <quorem+0xb4>
    b616:	9b01      	ldr	r3, [sp, #4]
    b618:	3b04      	subs	r3, #4
    b61a:	4598      	cmp	r8, r3
    b61c:	d304      	bcc.n	b628 <quorem+0xa8>
    b61e:	e007      	b.n	b630 <quorem+0xb0>
    b620:	4598      	cmp	r8, r3
    b622:	f104 34ff 	add.w	r4, r4, #4294967295
    b626:	d203      	bcs.n	b630 <quorem+0xb0>
    b628:	f853 2904 	ldr.w	r2, [r3], #-4
    b62c:	2a00      	cmp	r2, #0
    b62e:	d0f7      	beq.n	b620 <quorem+0xa0>
    b630:	f8c9 4010 	str.w	r4, [r9, #16]
    b634:	4648      	mov	r0, r9
    b636:	f7fc f8bf 	bl	77b8 <__mcmp>
    b63a:	2800      	cmp	r0, #0
    b63c:	db2b      	blt.n	b696 <quorem+0x116>
    b63e:	3601      	adds	r6, #1
    b640:	4641      	mov	r1, r8
    b642:	2300      	movs	r3, #0
    b644:	f855 0b04 	ldr.w	r0, [r5], #4
    b648:	f8d1 c000 	ldr.w	ip, [r1]
    b64c:	b282      	uxth	r2, r0
    b64e:	1a9a      	subs	r2, r3, r2
    b650:	0c03      	lsrs	r3, r0, #16
    b652:	fa12 f28c 	uxtah	r2, r2, ip
    b656:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
    b65a:	eb03 4322 	add.w	r3, r3, r2, asr #16
    b65e:	b292      	uxth	r2, r2
    b660:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    b664:	42af      	cmp	r7, r5
    b666:	f841 2b04 	str.w	r2, [r1], #4
    b66a:	ea4f 4323 	mov.w	r3, r3, asr #16
    b66e:	d2e9      	bcs.n	b644 <quorem+0xc4>
    b670:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
    b674:	eb08 0384 	add.w	r3, r8, r4, lsl #2
    b678:	b96a      	cbnz	r2, b696 <quorem+0x116>
    b67a:	3b04      	subs	r3, #4
    b67c:	4598      	cmp	r8, r3
    b67e:	d304      	bcc.n	b68a <quorem+0x10a>
    b680:	e007      	b.n	b692 <quorem+0x112>
    b682:	4598      	cmp	r8, r3
    b684:	f104 34ff 	add.w	r4, r4, #4294967295
    b688:	d203      	bcs.n	b692 <quorem+0x112>
    b68a:	f853 2904 	ldr.w	r2, [r3], #-4
    b68e:	2a00      	cmp	r2, #0
    b690:	d0f7      	beq.n	b682 <quorem+0x102>
    b692:	f8c9 4010 	str.w	r4, [r9, #16]
    b696:	4630      	mov	r0, r6
    b698:	b003      	add	sp, #12
    b69a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b69e:	2000      	movs	r0, #0
    b6a0:	b003      	add	sp, #12
    b6a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b6a6:	bf00      	nop

0000b6a8 <_dtoa_r>:
    b6a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b6ac:	ed2d 8b02 	vpush	{d8}
    b6b0:	b08f      	sub	sp, #60	; 0x3c
    b6b2:	ed8d 0b02 	vstr	d0, [sp, #8]
    b6b6:	9101      	str	r1, [sp, #4]
    b6b8:	6b81      	ldr	r1, [r0, #56]	; 0x38
    b6ba:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    b6bc:	9305      	str	r3, [sp, #20]
    b6be:	ec57 6b10 	vmov	r6, r7, d0
    b6c2:	4604      	mov	r4, r0
    b6c4:	4693      	mov	fp, r2
    b6c6:	b141      	cbz	r1, b6da <_dtoa_r+0x32>
    b6c8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    b6ca:	604a      	str	r2, [r1, #4]
    b6cc:	2301      	movs	r3, #1
    b6ce:	4093      	lsls	r3, r2
    b6d0:	608b      	str	r3, [r1, #8]
    b6d2:	f7fb fdb9 	bl	7248 <_Bfree>
    b6d6:	2300      	movs	r3, #0
    b6d8:	63a3      	str	r3, [r4, #56]	; 0x38
    b6da:	f1b7 0800 	subs.w	r8, r7, #0
    b6de:	bfb4      	ite	lt
    b6e0:	2301      	movlt	r3, #1
    b6e2:	2300      	movge	r3, #0
    b6e4:	602b      	str	r3, [r5, #0]
    b6e6:	4bbe      	ldr	r3, [pc, #760]	; (b9e0 <_dtoa_r+0x338>)
    b6e8:	bfbc      	itt	lt
    b6ea:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
    b6ee:	f8cd 800c 	strlt.w	r8, [sp, #12]
    b6f2:	ea33 0308 	bics.w	r3, r3, r8
    b6f6:	f000 809f 	beq.w	b838 <_dtoa_r+0x190>
    b6fa:	ed9d 8b02 	vldr	d8, [sp, #8]
    b6fe:	eeb5 8b40 	vcmp.f64	d8, #0.0
    b702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b706:	d111      	bne.n	b72c <_dtoa_r+0x84>
    b708:	9a05      	ldr	r2, [sp, #20]
    b70a:	2301      	movs	r3, #1
    b70c:	6013      	str	r3, [r2, #0]
    b70e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    b710:	2b00      	cmp	r3, #0
    b712:	f000 823f 	beq.w	bb94 <_dtoa_r+0x4ec>
    b716:	4bb3      	ldr	r3, [pc, #716]	; (b9e4 <_dtoa_r+0x33c>)
    b718:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    b71a:	6013      	str	r3, [r2, #0]
    b71c:	3b01      	subs	r3, #1
    b71e:	9300      	str	r3, [sp, #0]
    b720:	9800      	ldr	r0, [sp, #0]
    b722:	b00f      	add	sp, #60	; 0x3c
    b724:	ecbd 8b02 	vpop	{d8}
    b728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b72c:	aa0c      	add	r2, sp, #48	; 0x30
    b72e:	a90d      	add	r1, sp, #52	; 0x34
    b730:	4620      	mov	r0, r4
    b732:	eeb0 0b48 	vmov.f64	d0, d8
    b736:	f7fc f99f 	bl	7a78 <__d2b>
    b73a:	ea5f 5318 	movs.w	r3, r8, lsr #20
    b73e:	4605      	mov	r5, r0
    b740:	f040 8092 	bne.w	b868 <_dtoa_r+0x1c0>
    b744:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
    b748:	440b      	add	r3, r1
    b74a:	f203 4232 	addw	r2, r3, #1074	; 0x432
    b74e:	2a20      	cmp	r2, #32
    b750:	f340 82fa 	ble.w	bd48 <_dtoa_r+0x6a0>
    b754:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
    b758:	fa08 f802 	lsl.w	r8, r8, r2
    b75c:	f203 4212 	addw	r2, r3, #1042	; 0x412
    b760:	40d6      	lsrs	r6, r2
    b762:	ea48 0206 	orr.w	r2, r8, r6
    b766:	ee07 2a10 	vmov	s14, r2
    b76a:	eeb8 7b47 	vcvt.f64.u32	d7, s14
    b76e:	1e58      	subs	r0, r3, #1
    b770:	ee17 6a90 	vmov	r6, s15
    b774:	ec53 2b17 	vmov	r2, r3, d7
    b778:	f04f 0a01 	mov.w	sl, #1
    b77c:	f1a6 73f8 	sub.w	r3, r6, #32505856	; 0x1f00000
    b780:	ed9f 3b91 	vldr	d3, [pc, #580]	; b9c8 <_dtoa_r+0x320>
    b784:	ed9f 7b92 	vldr	d7, [pc, #584]	; b9d0 <_dtoa_r+0x328>
    b788:	ed9f 5b93 	vldr	d5, [pc, #588]	; b9d8 <_dtoa_r+0x330>
    b78c:	ee06 0a90 	vmov	s13, r0
    b790:	ec43 2b12 	vmov	d2, r2, r3
    b794:	eeb8 4be6 	vcvt.f64.s32	d4, s13
    b798:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
    b79c:	ee32 6b46 	vsub.f64	d6, d2, d6
    b7a0:	eea6 7b03 	vfma.f64	d7, d6, d3
    b7a4:	eea4 7b05 	vfma.f64	d7, d4, d5
    b7a8:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    b7ac:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    b7b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b7b4:	ee16 7a90 	vmov	r7, s13
    b7b8:	d508      	bpl.n	b7cc <_dtoa_r+0x124>
    b7ba:	eeb8 6be6 	vcvt.f64.s32	d6, s13
    b7be:	eeb4 6b47 	vcmp.f64	d6, d7
    b7c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b7c6:	bf18      	it	ne
    b7c8:	f107 37ff 	addne.w	r7, r7, #4294967295
    b7cc:	2f16      	cmp	r7, #22
    b7ce:	f200 8145 	bhi.w	ba5c <_dtoa_r+0x3b4>
    b7d2:	4b85      	ldr	r3, [pc, #532]	; (b9e8 <_dtoa_r+0x340>)
    b7d4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    b7d8:	ed93 7b00 	vldr	d7, [r3]
    b7dc:	eeb4 8bc7 	vcmpe.f64	d8, d7
    b7e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b7e4:	d557      	bpl.n	b896 <_dtoa_r+0x1ee>
    b7e6:	1a09      	subs	r1, r1, r0
    b7e8:	2300      	movs	r3, #0
    b7ea:	f1b1 0801 	subs.w	r8, r1, #1
    b7ee:	f107 37ff 	add.w	r7, r7, #4294967295
    b7f2:	930a      	str	r3, [sp, #40]	; 0x28
    b7f4:	f100 8139 	bmi.w	ba6a <_dtoa_r+0x3c2>
    b7f8:	2300      	movs	r3, #0
    b7fa:	9306      	str	r3, [sp, #24]
    b7fc:	2f00      	cmp	r7, #0
    b7fe:	da52      	bge.n	b8a6 <_dtoa_r+0x1fe>
    b800:	9b06      	ldr	r3, [sp, #24]
    b802:	9704      	str	r7, [sp, #16]
    b804:	1bdb      	subs	r3, r3, r7
    b806:	9306      	str	r3, [sp, #24]
    b808:	427b      	negs	r3, r7
    b80a:	9308      	str	r3, [sp, #32]
    b80c:	9b01      	ldr	r3, [sp, #4]
    b80e:	2b09      	cmp	r3, #9
    b810:	f04f 0700 	mov.w	r7, #0
    b814:	d84e      	bhi.n	b8b4 <_dtoa_r+0x20c>
    b816:	2b05      	cmp	r3, #5
    b818:	f340 829d 	ble.w	bd56 <_dtoa_r+0x6ae>
    b81c:	3b04      	subs	r3, #4
    b81e:	9301      	str	r3, [sp, #4]
    b820:	2600      	movs	r6, #0
    b822:	9b01      	ldr	r3, [sp, #4]
    b824:	1e9a      	subs	r2, r3, #2
    b826:	2a03      	cmp	r2, #3
    b828:	f200 8125 	bhi.w	ba76 <_dtoa_r+0x3ce>
    b82c:	e8df f012 	tbh	[pc, r2, lsl #1]
    b830:	03a703aa 	.word	0x03a703aa
    b834:	037e039d 	.word	0x037e039d
    b838:	9a05      	ldr	r2, [sp, #20]
    b83a:	f3c8 0813 	ubfx	r8, r8, #0, #20
    b83e:	f242 730f 	movw	r3, #9999	; 0x270f
    b842:	ea58 0806 	orrs.w	r8, r8, r6
    b846:	6013      	str	r3, [r2, #0]
    b848:	d11e      	bne.n	b888 <_dtoa_r+0x1e0>
    b84a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    b84c:	2b00      	cmp	r3, #0
    b84e:	f000 8591 	beq.w	c374 <_dtoa_r+0xccc>
    b852:	4b66      	ldr	r3, [pc, #408]	; (b9ec <_dtoa_r+0x344>)
    b854:	9300      	str	r3, [sp, #0]
    b856:	3308      	adds	r3, #8
    b858:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    b85a:	9800      	ldr	r0, [sp, #0]
    b85c:	6013      	str	r3, [r2, #0]
    b85e:	b00f      	add	sp, #60	; 0x3c
    b860:	ecbd 8b02 	vpop	{d8}
    b864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b868:	ee18 6a90 	vmov	r6, s17
    b86c:	f3c6 0613 	ubfx	r6, r6, #0, #20
    b870:	f2a3 30ff 	subw	r0, r3, #1023	; 0x3ff
    b874:	ec53 2b18 	vmov	r2, r3, d8
    b878:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
    b87c:	990c      	ldr	r1, [sp, #48]	; 0x30
    b87e:	f04f 0a00 	mov.w	sl, #0
    b882:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    b886:	e77b      	b.n	b780 <_dtoa_r+0xd8>
    b888:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    b88a:	2b00      	cmp	r3, #0
    b88c:	f040 833b 	bne.w	bf06 <_dtoa_r+0x85e>
    b890:	4b57      	ldr	r3, [pc, #348]	; (b9f0 <_dtoa_r+0x348>)
    b892:	9300      	str	r3, [sp, #0]
    b894:	e744      	b.n	b720 <_dtoa_r+0x78>
    b896:	1a09      	subs	r1, r1, r0
    b898:	2300      	movs	r3, #0
    b89a:	f1b1 0801 	subs.w	r8, r1, #1
    b89e:	930a      	str	r3, [sp, #40]	; 0x28
    b8a0:	f100 80e3 	bmi.w	ba6a <_dtoa_r+0x3c2>
    b8a4:	9306      	str	r3, [sp, #24]
    b8a6:	2300      	movs	r3, #0
    b8a8:	9308      	str	r3, [sp, #32]
    b8aa:	9b01      	ldr	r3, [sp, #4]
    b8ac:	9704      	str	r7, [sp, #16]
    b8ae:	2b09      	cmp	r3, #9
    b8b0:	44b8      	add	r8, r7
    b8b2:	d9b0      	bls.n	b816 <_dtoa_r+0x16e>
    b8b4:	2300      	movs	r3, #0
    b8b6:	2601      	movs	r6, #1
    b8b8:	9301      	str	r3, [sp, #4]
    b8ba:	9607      	str	r6, [sp, #28]
    b8bc:	f04f 39ff 	mov.w	r9, #4294967295
    b8c0:	469b      	mov	fp, r3
    b8c2:	2100      	movs	r1, #0
    b8c4:	63e1      	str	r1, [r4, #60]	; 0x3c
    b8c6:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    b8ca:	4620      	mov	r0, r4
    b8cc:	f7fb fc96 	bl	71fc <_Balloc>
    b8d0:	9000      	str	r0, [sp, #0]
    b8d2:	2800      	cmp	r0, #0
    b8d4:	f000 8540 	beq.w	c358 <_dtoa_r+0xcb0>
    b8d8:	9b00      	ldr	r3, [sp, #0]
    b8da:	63a3      	str	r3, [r4, #56]	; 0x38
    b8dc:	f1b9 0f0e 	cmp.w	r9, #14
    b8e0:	f200 80dc 	bhi.w	ba9c <_dtoa_r+0x3f4>
    b8e4:	2e00      	cmp	r6, #0
    b8e6:	f000 80d9 	beq.w	ba9c <_dtoa_r+0x3f4>
    b8ea:	9b04      	ldr	r3, [sp, #16]
    b8ec:	2b00      	cmp	r3, #0
    b8ee:	f340 83de 	ble.w	c0ae <_dtoa_r+0xa06>
    b8f2:	4a3d      	ldr	r2, [pc, #244]	; (b9e8 <_dtoa_r+0x340>)
    b8f4:	f003 010f 	and.w	r1, r3, #15
    b8f8:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    b8fc:	ed92 7b00 	vldr	d7, [r2]
    b900:	111a      	asrs	r2, r3, #4
    b902:	05db      	lsls	r3, r3, #23
    b904:	f140 8382 	bpl.w	c00c <_dtoa_r+0x964>
    b908:	493a      	ldr	r1, [pc, #232]	; (b9f4 <_dtoa_r+0x34c>)
    b90a:	ed91 6b08 	vldr	d6, [r1, #32]
    b90e:	f002 020f 	and.w	r2, r2, #15
    b912:	2003      	movs	r0, #3
    b914:	ee88 5b06 	vdiv.f64	d5, d8, d6
    b918:	b15a      	cbz	r2, b932 <_dtoa_r+0x28a>
    b91a:	4936      	ldr	r1, [pc, #216]	; (b9f4 <_dtoa_r+0x34c>)
    b91c:	07d6      	lsls	r6, r2, #31
    b91e:	d504      	bpl.n	b92a <_dtoa_r+0x282>
    b920:	ed91 6b00 	vldr	d6, [r1]
    b924:	3001      	adds	r0, #1
    b926:	ee27 7b06 	vmul.f64	d7, d7, d6
    b92a:	1052      	asrs	r2, r2, #1
    b92c:	f101 0108 	add.w	r1, r1, #8
    b930:	d1f4      	bne.n	b91c <_dtoa_r+0x274>
    b932:	ee85 6b07 	vdiv.f64	d6, d5, d7
    b936:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b938:	b13b      	cbz	r3, b94a <_dtoa_r+0x2a2>
    b93a:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    b93e:	eeb4 6bc7 	vcmpe.f64	d6, d7
    b942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b946:	f100 84ae 	bmi.w	c2a6 <_dtoa_r+0xbfe>
    b94a:	ee07 0a90 	vmov	s15, r0
    b94e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
    b952:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    b956:	eea5 7b06 	vfma.f64	d7, d5, d6
    b95a:	ee17 2a90 	vmov	r2, s15
    b95e:	ec51 0b17 	vmov	r0, r1, d7
    b962:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
    b966:	f1b9 0f00 	cmp.w	r9, #0
    b96a:	f000 8388 	beq.w	c07e <_dtoa_r+0x9d6>
    b96e:	9e04      	ldr	r6, [sp, #16]
    b970:	464a      	mov	r2, r9
    b972:	9b07      	ldr	r3, [sp, #28]
    b974:	2b00      	cmp	r3, #0
    b976:	f000 8447 	beq.w	c208 <_dtoa_r+0xb60>
    b97a:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
    b97e:	4b1a      	ldr	r3, [pc, #104]	; (b9e8 <_dtoa_r+0x340>)
    b980:	eefd 4bc6 	vcvt.s32.f64	s9, d6
    b984:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
    b988:	eeb8 7be4 	vcvt.f64.s32	d7, s9
    b98c:	ee36 7b47 	vsub.f64	d7, d6, d7
    b990:	ed1c 6b02 	vldr	d6, [ip, #-8]
    b994:	ee83 5b06 	vdiv.f64	d5, d3, d6
    b998:	ec41 0b16 	vmov	d6, r0, r1
    b99c:	ee14 0a90 	vmov	r0, s9
    b9a0:	ee35 5b46 	vsub.f64	d5, d5, d6
    b9a4:	9900      	ldr	r1, [sp, #0]
    b9a6:	eeb4 5bc7 	vcmpe.f64	d5, d7
    b9aa:	3030      	adds	r0, #48	; 0x30
    b9ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b9b0:	f801 0b01 	strb.w	r0, [r1], #1
    b9b4:	f300 84ac 	bgt.w	c310 <_dtoa_r+0xc68>
    b9b8:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
    b9bc:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    b9c0:	f04f 0c00 	mov.w	ip, #0
    b9c4:	e031      	b.n	ba2a <_dtoa_r+0x382>
    b9c6:	bf00      	nop
    b9c8:	636f4361 	.word	0x636f4361
    b9cc:	3fd287a7 	.word	0x3fd287a7
    b9d0:	8b60c8b3 	.word	0x8b60c8b3
    b9d4:	3fc68a28 	.word	0x3fc68a28
    b9d8:	509f79fb 	.word	0x509f79fb
    b9dc:	3fd34413 	.word	0x3fd34413
    b9e0:	7ff00000 	.word	0x7ff00000
    b9e4:	20000905 	.word	0x20000905
    b9e8:	200002a8 	.word	0x200002a8
    b9ec:	20000830 	.word	0x20000830
    b9f0:	2000083c 	.word	0x2000083c
    b9f4:	20000280 	.word	0x20000280
    b9f8:	f10c 0c01 	add.w	ip, ip, #1
    b9fc:	4594      	cmp	ip, r2
    b9fe:	da4d      	bge.n	ba9c <_dtoa_r+0x3f4>
    ba00:	ee27 7b04 	vmul.f64	d7, d7, d4
    ba04:	ee25 5b04 	vmul.f64	d5, d5, d4
    ba08:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    ba0c:	ee16 3a90 	vmov	r3, s13
    ba10:	eeb8 3be6 	vcvt.f64.s32	d3, s13
    ba14:	3330      	adds	r3, #48	; 0x30
    ba16:	ee37 7b43 	vsub.f64	d7, d7, d3
    ba1a:	eeb4 7bc5 	vcmpe.f64	d7, d5
    ba1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ba22:	f801 3b01 	strb.w	r3, [r1], #1
    ba26:	f100 8473 	bmi.w	c310 <_dtoa_r+0xc68>
    ba2a:	ee32 6b47 	vsub.f64	d6, d2, d7
    ba2e:	eeb4 6bc5 	vcmpe.f64	d6, d5
    ba32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ba36:	d5df      	bpl.n	b9f8 <_dtoa_r+0x350>
    ba38:	9a00      	ldr	r2, [sp, #0]
    ba3a:	9604      	str	r6, [sp, #16]
    ba3c:	e002      	b.n	ba44 <_dtoa_r+0x39c>
    ba3e:	428a      	cmp	r2, r1
    ba40:	f000 8450 	beq.w	c2e4 <_dtoa_r+0xc3c>
    ba44:	4689      	mov	r9, r1
    ba46:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
    ba4a:	2b39      	cmp	r3, #57	; 0x39
    ba4c:	d0f7      	beq.n	ba3e <_dtoa_r+0x396>
    ba4e:	3301      	adds	r3, #1
    ba50:	b2db      	uxtb	r3, r3
    ba52:	700b      	strb	r3, [r1, #0]
    ba54:	9b04      	ldr	r3, [sp, #16]
    ba56:	3301      	adds	r3, #1
    ba58:	9304      	str	r3, [sp, #16]
    ba5a:	e155      	b.n	bd08 <_dtoa_r+0x660>
    ba5c:	1a09      	subs	r1, r1, r0
    ba5e:	2301      	movs	r3, #1
    ba60:	f1b1 0801 	subs.w	r8, r1, #1
    ba64:	930a      	str	r3, [sp, #40]	; 0x28
    ba66:	f57f aec7 	bpl.w	b7f8 <_dtoa_r+0x150>
    ba6a:	f1c1 0301 	rsb	r3, r1, #1
    ba6e:	9306      	str	r3, [sp, #24]
    ba70:	f04f 0800 	mov.w	r8, #0
    ba74:	e6c2      	b.n	b7fc <_dtoa_r+0x154>
    ba76:	2600      	movs	r6, #0
    ba78:	63e6      	str	r6, [r4, #60]	; 0x3c
    ba7a:	4631      	mov	r1, r6
    ba7c:	4620      	mov	r0, r4
    ba7e:	f7fb fbbd 	bl	71fc <_Balloc>
    ba82:	9000      	str	r0, [sp, #0]
    ba84:	2800      	cmp	r0, #0
    ba86:	f000 8467 	beq.w	c358 <_dtoa_r+0xcb0>
    ba8a:	9b00      	ldr	r3, [sp, #0]
    ba8c:	63a3      	str	r3, [r4, #56]	; 0x38
    ba8e:	f04f 33ff 	mov.w	r3, #4294967295
    ba92:	930b      	str	r3, [sp, #44]	; 0x2c
    ba94:	4699      	mov	r9, r3
    ba96:	2301      	movs	r3, #1
    ba98:	46b3      	mov	fp, r6
    ba9a:	9307      	str	r3, [sp, #28]
    ba9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    ba9e:	2a00      	cmp	r2, #0
    baa0:	db55      	blt.n	bb4e <_dtoa_r+0x4a6>
    baa2:	9904      	ldr	r1, [sp, #16]
    baa4:	290e      	cmp	r1, #14
    baa6:	dc52      	bgt.n	bb4e <_dtoa_r+0x4a6>
    baa8:	4bb7      	ldr	r3, [pc, #732]	; (bd88 <_dtoa_r+0x6e0>)
    baaa:	f1bb 0f00 	cmp.w	fp, #0
    baae:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    bab2:	ed93 6b00 	vldr	d6, [r3]
    bab6:	da15      	bge.n	bae4 <_dtoa_r+0x43c>
    bab8:	f1b9 0f00 	cmp.w	r9, #0
    babc:	dc12      	bgt.n	bae4 <_dtoa_r+0x43c>
    babe:	f040 82f2 	bne.w	c0a6 <_dtoa_r+0x9fe>
    bac2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
    bac6:	ee26 7b07 	vmul.f64	d7, d6, d7
    baca:	eeb4 8bc7 	vcmpe.f64	d8, d7
    bace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    bad2:	46ca      	mov	sl, r9
    bad4:	464e      	mov	r6, r9
    bad6:	f200 826d 	bhi.w	bfb4 <_dtoa_r+0x90c>
    bada:	f8dd 8000 	ldr.w	r8, [sp]
    bade:	ea6f 0b0b 	mvn.w	fp, fp
    bae2:	e270      	b.n	bfc6 <_dtoa_r+0x91e>
    bae4:	ee88 7b06 	vdiv.f64	d7, d8, d6
    bae8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    baec:	9900      	ldr	r1, [sp, #0]
    baee:	ee17 3a10 	vmov	r3, s14
    baf2:	f1b9 0f01 	cmp.w	r9, #1
    baf6:	f103 0330 	add.w	r3, r3, #48	; 0x30
    bafa:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
    bafe:	f801 3b01 	strb.w	r3, [r1], #1
    bb02:	eea5 8b46 	vfms.f64	d8, d5, d6
    bb06:	f000 8334 	beq.w	c172 <_dtoa_r+0xaca>
    bb0a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    bb0e:	2301      	movs	r3, #1
    bb10:	e011      	b.n	bb36 <_dtoa_r+0x48e>
    bb12:	ee88 7b06 	vdiv.f64	d7, d8, d6
    bb16:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    bb1a:	3301      	adds	r3, #1
    bb1c:	ee17 2a10 	vmov	r2, s14
    bb20:	454b      	cmp	r3, r9
    bb22:	f102 0230 	add.w	r2, r2, #48	; 0x30
    bb26:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
    bb2a:	f801 2b01 	strb.w	r2, [r1], #1
    bb2e:	eea5 8b46 	vfms.f64	d8, d5, d6
    bb32:	f000 831e 	beq.w	c172 <_dtoa_r+0xaca>
    bb36:	ee28 8b04 	vmul.f64	d8, d8, d4
    bb3a:	eeb5 8b40 	vcmp.f64	d8, #0.0
    bb3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    bb42:	d1e6      	bne.n	bb12 <_dtoa_r+0x46a>
    bb44:	9b04      	ldr	r3, [sp, #16]
    bb46:	3301      	adds	r3, #1
    bb48:	9304      	str	r3, [sp, #16]
    bb4a:	4689      	mov	r9, r1
    bb4c:	e0dc      	b.n	bd08 <_dtoa_r+0x660>
    bb4e:	9b07      	ldr	r3, [sp, #28]
    bb50:	b343      	cbz	r3, bba4 <_dtoa_r+0x4fc>
    bb52:	9b01      	ldr	r3, [sp, #4]
    bb54:	2b01      	cmp	r3, #1
    bb56:	f340 8276 	ble.w	c046 <_dtoa_r+0x99e>
    bb5a:	9b08      	ldr	r3, [sp, #32]
    bb5c:	f109 3aff 	add.w	sl, r9, #4294967295
    bb60:	4553      	cmp	r3, sl
    bb62:	f280 823f 	bge.w	bfe4 <_dtoa_r+0x93c>
    bb66:	9b08      	ldr	r3, [sp, #32]
    bb68:	f8cd a020 	str.w	sl, [sp, #32]
    bb6c:	ebaa 0203 	sub.w	r2, sl, r3
    bb70:	4417      	add	r7, r2
    bb72:	f04f 0a00 	mov.w	sl, #0
    bb76:	f1b9 0f00 	cmp.w	r9, #0
    bb7a:	f2c0 8325 	blt.w	c1c8 <_dtoa_r+0xb20>
    bb7e:	9b06      	ldr	r3, [sp, #24]
    bb80:	9309      	str	r3, [sp, #36]	; 0x24
    bb82:	444b      	add	r3, r9
    bb84:	44c8      	add	r8, r9
    bb86:	9306      	str	r3, [sp, #24]
    bb88:	2101      	movs	r1, #1
    bb8a:	4620      	mov	r0, r4
    bb8c:	f7fb fc60 	bl	7450 <__i2b>
    bb90:	4606      	mov	r6, r0
    bb92:	e00c      	b.n	bbae <_dtoa_r+0x506>
    bb94:	4b7d      	ldr	r3, [pc, #500]	; (bd8c <_dtoa_r+0x6e4>)
    bb96:	9300      	str	r3, [sp, #0]
    bb98:	9800      	ldr	r0, [sp, #0]
    bb9a:	b00f      	add	sp, #60	; 0x3c
    bb9c:	ecbd 8b02 	vpop	{d8}
    bba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bba4:	9b06      	ldr	r3, [sp, #24]
    bba6:	f8dd a020 	ldr.w	sl, [sp, #32]
    bbaa:	9e07      	ldr	r6, [sp, #28]
    bbac:	9309      	str	r3, [sp, #36]	; 0x24
    bbae:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bbb0:	b16b      	cbz	r3, bbce <_dtoa_r+0x526>
    bbb2:	f1b8 0f00 	cmp.w	r8, #0
    bbb6:	dd0a      	ble.n	bbce <_dtoa_r+0x526>
    bbb8:	4543      	cmp	r3, r8
    bbba:	9906      	ldr	r1, [sp, #24]
    bbbc:	461a      	mov	r2, r3
    bbbe:	bfa8      	it	ge
    bbc0:	4642      	movge	r2, r8
    bbc2:	1a89      	subs	r1, r1, r2
    bbc4:	1a9b      	subs	r3, r3, r2
    bbc6:	9106      	str	r1, [sp, #24]
    bbc8:	9309      	str	r3, [sp, #36]	; 0x24
    bbca:	eba8 0802 	sub.w	r8, r8, r2
    bbce:	9b08      	ldr	r3, [sp, #32]
    bbd0:	b163      	cbz	r3, bbec <_dtoa_r+0x544>
    bbd2:	9b07      	ldr	r3, [sp, #28]
    bbd4:	2b00      	cmp	r3, #0
    bbd6:	f000 82a7 	beq.w	c128 <_dtoa_r+0xa80>
    bbda:	f1ba 0f00 	cmp.w	sl, #0
    bbde:	f300 8204 	bgt.w	bfea <_dtoa_r+0x942>
    bbe2:	9b08      	ldr	r3, [sp, #32]
    bbe4:	ebb3 020a 	subs.w	r2, r3, sl
    bbe8:	f040 82ff 	bne.w	c1ea <_dtoa_r+0xb42>
    bbec:	2101      	movs	r1, #1
    bbee:	4620      	mov	r0, r4
    bbf0:	f7fb fc2e 	bl	7450 <__i2b>
    bbf4:	2f00      	cmp	r7, #0
    bbf6:	4682      	mov	sl, r0
    bbf8:	f300 80af 	bgt.w	bd5a <_dtoa_r+0x6b2>
    bbfc:	9b01      	ldr	r3, [sp, #4]
    bbfe:	2b01      	cmp	r3, #1
    bc00:	f340 8187 	ble.w	bf12 <_dtoa_r+0x86a>
    bc04:	2300      	movs	r3, #0
    bc06:	9308      	str	r3, [sp, #32]
    bc08:	2001      	movs	r0, #1
    bc0a:	2f00      	cmp	r7, #0
    bc0c:	f040 80b1 	bne.w	bd72 <_dtoa_r+0x6ca>
    bc10:	4440      	add	r0, r8
    bc12:	f010 001f 	ands.w	r0, r0, #31
    bc16:	f000 817a 	beq.w	bf0e <_dtoa_r+0x866>
    bc1a:	f1c0 0220 	rsb	r2, r0, #32
    bc1e:	2a04      	cmp	r2, #4
    bc20:	f300 8088 	bgt.w	bd34 <_dtoa_r+0x68c>
    bc24:	f040 81f6 	bne.w	c014 <_dtoa_r+0x96c>
    bc28:	9b06      	ldr	r3, [sp, #24]
    bc2a:	2b00      	cmp	r3, #0
    bc2c:	dd05      	ble.n	bc3a <_dtoa_r+0x592>
    bc2e:	4629      	mov	r1, r5
    bc30:	461a      	mov	r2, r3
    bc32:	4620      	mov	r0, r4
    bc34:	f7fb fd48 	bl	76c8 <__lshift>
    bc38:	4605      	mov	r5, r0
    bc3a:	f1b8 0f00 	cmp.w	r8, #0
    bc3e:	dd05      	ble.n	bc4c <_dtoa_r+0x5a4>
    bc40:	4651      	mov	r1, sl
    bc42:	4642      	mov	r2, r8
    bc44:	4620      	mov	r0, r4
    bc46:	f7fb fd3f 	bl	76c8 <__lshift>
    bc4a:	4682      	mov	sl, r0
    bc4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    bc4e:	2b00      	cmp	r3, #0
    bc50:	f040 813f 	bne.w	bed2 <_dtoa_r+0x82a>
    bc54:	f1b9 0f00 	cmp.w	r9, #0
    bc58:	f340 8125 	ble.w	bea6 <_dtoa_r+0x7fe>
    bc5c:	9b07      	ldr	r3, [sp, #28]
    bc5e:	2b00      	cmp	r3, #0
    bc60:	f040 80a3 	bne.w	bdaa <_dtoa_r+0x702>
    bc64:	9b04      	ldr	r3, [sp, #16]
    bc66:	3301      	adds	r3, #1
    bc68:	9304      	str	r3, [sp, #16]
    bc6a:	f8dd 8000 	ldr.w	r8, [sp]
    bc6e:	2701      	movs	r7, #1
    bc70:	e007      	b.n	bc82 <_dtoa_r+0x5da>
    bc72:	4629      	mov	r1, r5
    bc74:	2300      	movs	r3, #0
    bc76:	220a      	movs	r2, #10
    bc78:	4620      	mov	r0, r4
    bc7a:	f7fb faef 	bl	725c <__multadd>
    bc7e:	3701      	adds	r7, #1
    bc80:	4605      	mov	r5, r0
    bc82:	4651      	mov	r1, sl
    bc84:	4628      	mov	r0, r5
    bc86:	f7ff fc7b 	bl	b580 <quorem>
    bc8a:	45b9      	cmp	r9, r7
    bc8c:	f100 0030 	add.w	r0, r0, #48	; 0x30
    bc90:	f808 0b01 	strb.w	r0, [r8], #1
    bc94:	dced      	bgt.n	bc72 <_dtoa_r+0x5ca>
    bc96:	f1b9 0f00 	cmp.w	r9, #0
    bc9a:	9a00      	ldr	r2, [sp, #0]
    bc9c:	bfcc      	ite	gt
    bc9e:	46cb      	movgt	fp, r9
    bca0:	f04f 0b01 	movle.w	fp, #1
    bca4:	4603      	mov	r3, r0
    bca6:	4493      	add	fp, r2
    bca8:	2700      	movs	r7, #0
    bcaa:	4629      	mov	r1, r5
    bcac:	2201      	movs	r2, #1
    bcae:	4620      	mov	r0, r4
    bcb0:	9301      	str	r3, [sp, #4]
    bcb2:	f7fb fd09 	bl	76c8 <__lshift>
    bcb6:	4651      	mov	r1, sl
    bcb8:	4605      	mov	r5, r0
    bcba:	f7fb fd7d 	bl	77b8 <__mcmp>
    bcbe:	2800      	cmp	r0, #0
    bcc0:	f340 81af 	ble.w	c022 <_dtoa_r+0x97a>
    bcc4:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
    bcc8:	9a00      	ldr	r2, [sp, #0]
    bcca:	f10b 3bff 	add.w	fp, fp, #4294967295
    bcce:	e004      	b.n	bcda <_dtoa_r+0x632>
    bcd0:	455a      	cmp	r2, fp
    bcd2:	f000 81b1 	beq.w	c038 <_dtoa_r+0x990>
    bcd6:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
    bcda:	2b39      	cmp	r3, #57	; 0x39
    bcdc:	f10b 0901 	add.w	r9, fp, #1
    bce0:	d0f6      	beq.n	bcd0 <_dtoa_r+0x628>
    bce2:	3301      	adds	r3, #1
    bce4:	f88b 3000 	strb.w	r3, [fp]
    bce8:	4651      	mov	r1, sl
    bcea:	4620      	mov	r0, r4
    bcec:	f7fb faac 	bl	7248 <_Bfree>
    bcf0:	b156      	cbz	r6, bd08 <_dtoa_r+0x660>
    bcf2:	b12f      	cbz	r7, bd00 <_dtoa_r+0x658>
    bcf4:	42b7      	cmp	r7, r6
    bcf6:	d003      	beq.n	bd00 <_dtoa_r+0x658>
    bcf8:	4639      	mov	r1, r7
    bcfa:	4620      	mov	r0, r4
    bcfc:	f7fb faa4 	bl	7248 <_Bfree>
    bd00:	4631      	mov	r1, r6
    bd02:	4620      	mov	r0, r4
    bd04:	f7fb faa0 	bl	7248 <_Bfree>
    bd08:	4629      	mov	r1, r5
    bd0a:	4620      	mov	r0, r4
    bd0c:	f7fb fa9c 	bl	7248 <_Bfree>
    bd10:	2300      	movs	r3, #0
    bd12:	f889 3000 	strb.w	r3, [r9]
    bd16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    bd1a:	601a      	str	r2, [r3, #0]
    bd1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    bd1e:	2b00      	cmp	r3, #0
    bd20:	f43f acfe 	beq.w	b720 <_dtoa_r+0x78>
    bd24:	9800      	ldr	r0, [sp, #0]
    bd26:	f8c3 9000 	str.w	r9, [r3]
    bd2a:	b00f      	add	sp, #60	; 0x3c
    bd2c:	ecbd 8b02 	vpop	{d8}
    bd30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bd34:	f1c0 001c 	rsb	r0, r0, #28
    bd38:	9b06      	ldr	r3, [sp, #24]
    bd3a:	4403      	add	r3, r0
    bd3c:	9306      	str	r3, [sp, #24]
    bd3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bd40:	4403      	add	r3, r0
    bd42:	9309      	str	r3, [sp, #36]	; 0x24
    bd44:	4480      	add	r8, r0
    bd46:	e76f      	b.n	bc28 <_dtoa_r+0x580>
    bd48:	f1c2 0220 	rsb	r2, r2, #32
    bd4c:	fa06 f202 	lsl.w	r2, r6, r2
    bd50:	ee07 2a10 	vmov	s14, r2
    bd54:	e509      	b.n	b76a <_dtoa_r+0xc2>
    bd56:	2601      	movs	r6, #1
    bd58:	e563      	b.n	b822 <_dtoa_r+0x17a>
    bd5a:	4601      	mov	r1, r0
    bd5c:	463a      	mov	r2, r7
    bd5e:	4620      	mov	r0, r4
    bd60:	f7fb fc52 	bl	7608 <__pow5mult>
    bd64:	9b01      	ldr	r3, [sp, #4]
    bd66:	2b01      	cmp	r3, #1
    bd68:	4682      	mov	sl, r0
    bd6a:	f340 81c5 	ble.w	c0f8 <_dtoa_r+0xa50>
    bd6e:	2300      	movs	r3, #0
    bd70:	9308      	str	r3, [sp, #32]
    bd72:	f8da 2010 	ldr.w	r2, [sl, #16]
    bd76:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
    bd7a:	6910      	ldr	r0, [r2, #16]
    bd7c:	f7fb fb18 	bl	73b0 <__hi0bits>
    bd80:	f1c0 0020 	rsb	r0, r0, #32
    bd84:	e744      	b.n	bc10 <_dtoa_r+0x568>
    bd86:	bf00      	nop
    bd88:	200002a8 	.word	0x200002a8
    bd8c:	20000904 	.word	0x20000904
    bd90:	4631      	mov	r1, r6
    bd92:	2300      	movs	r3, #0
    bd94:	220a      	movs	r2, #10
    bd96:	4620      	mov	r0, r4
    bd98:	f7fb fa60 	bl	725c <__multadd>
    bd9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    bd9e:	2b00      	cmp	r3, #0
    bda0:	4606      	mov	r6, r0
    bda2:	f340 82ce 	ble.w	c342 <_dtoa_r+0xc9a>
    bda6:	9704      	str	r7, [sp, #16]
    bda8:	4699      	mov	r9, r3
    bdaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bdac:	2b00      	cmp	r3, #0
    bdae:	dd05      	ble.n	bdbc <_dtoa_r+0x714>
    bdb0:	4631      	mov	r1, r6
    bdb2:	461a      	mov	r2, r3
    bdb4:	4620      	mov	r0, r4
    bdb6:	f7fb fc87 	bl	76c8 <__lshift>
    bdba:	4606      	mov	r6, r0
    bdbc:	9b08      	ldr	r3, [sp, #32]
    bdbe:	2b00      	cmp	r3, #0
    bdc0:	f040 81eb 	bne.w	c19a <_dtoa_r+0xaf2>
    bdc4:	46b0      	mov	r8, r6
    bdc6:	9b02      	ldr	r3, [sp, #8]
    bdc8:	9f00      	ldr	r7, [sp, #0]
    bdca:	f003 0201 	and.w	r2, r3, #1
    bdce:	1e7b      	subs	r3, r7, #1
    bdd0:	444b      	add	r3, r9
    bdd2:	9308      	str	r3, [sp, #32]
    bdd4:	9b01      	ldr	r3, [sp, #4]
    bdd6:	920a      	str	r2, [sp, #40]	; 0x28
    bdd8:	4313      	orrs	r3, r2
    bdda:	9309      	str	r3, [sp, #36]	; 0x24
    bddc:	4651      	mov	r1, sl
    bdde:	4628      	mov	r0, r5
    bde0:	f7ff fbce 	bl	b580 <quorem>
    bde4:	4631      	mov	r1, r6
    bde6:	4683      	mov	fp, r0
    bde8:	4628      	mov	r0, r5
    bdea:	f7fb fce5 	bl	77b8 <__mcmp>
    bdee:	4642      	mov	r2, r8
    bdf0:	4651      	mov	r1, sl
    bdf2:	4681      	mov	r9, r0
    bdf4:	4620      	mov	r0, r4
    bdf6:	f7fb fd01 	bl	77fc <__mdiff>
    bdfa:	68c2      	ldr	r2, [r0, #12]
    bdfc:	4601      	mov	r1, r0
    bdfe:	f10b 0330 	add.w	r3, fp, #48	; 0x30
    be02:	2a00      	cmp	r2, #0
    be04:	d142      	bne.n	be8c <_dtoa_r+0x7e4>
    be06:	e9cd 0306 	strd	r0, r3, [sp, #24]
    be0a:	4628      	mov	r0, r5
    be0c:	f7fb fcd4 	bl	77b8 <__mcmp>
    be10:	9906      	ldr	r1, [sp, #24]
    be12:	9002      	str	r0, [sp, #8]
    be14:	4620      	mov	r0, r4
    be16:	f7fb fa17 	bl	7248 <_Bfree>
    be1a:	9a02      	ldr	r2, [sp, #8]
    be1c:	9b07      	ldr	r3, [sp, #28]
    be1e:	b91a      	cbnz	r2, be28 <_dtoa_r+0x780>
    be20:	9909      	ldr	r1, [sp, #36]	; 0x24
    be22:	2900      	cmp	r1, #0
    be24:	f000 827e 	beq.w	c324 <_dtoa_r+0xc7c>
    be28:	f1b9 0f00 	cmp.w	r9, #0
    be2c:	f2c0 8183 	blt.w	c136 <_dtoa_r+0xa8e>
    be30:	9901      	ldr	r1, [sp, #4]
    be32:	ea49 0901 	orr.w	r9, r9, r1
    be36:	990a      	ldr	r1, [sp, #40]	; 0x28
    be38:	ea51 0909 	orrs.w	r9, r1, r9
    be3c:	f000 817b 	beq.w	c136 <_dtoa_r+0xa8e>
    be40:	2a00      	cmp	r2, #0
    be42:	f300 81c6 	bgt.w	c1d2 <_dtoa_r+0xb2a>
    be46:	9a08      	ldr	r2, [sp, #32]
    be48:	703b      	strb	r3, [r7, #0]
    be4a:	f107 0901 	add.w	r9, r7, #1
    be4e:	4297      	cmp	r7, r2
    be50:	46cb      	mov	fp, r9
    be52:	f000 81c4 	beq.w	c1de <_dtoa_r+0xb36>
    be56:	4629      	mov	r1, r5
    be58:	2300      	movs	r3, #0
    be5a:	220a      	movs	r2, #10
    be5c:	4620      	mov	r0, r4
    be5e:	f7fb f9fd 	bl	725c <__multadd>
    be62:	4546      	cmp	r6, r8
    be64:	4605      	mov	r5, r0
    be66:	4631      	mov	r1, r6
    be68:	f04f 0300 	mov.w	r3, #0
    be6c:	f04f 020a 	mov.w	r2, #10
    be70:	4620      	mov	r0, r4
    be72:	d012      	beq.n	be9a <_dtoa_r+0x7f2>
    be74:	f7fb f9f2 	bl	725c <__multadd>
    be78:	4641      	mov	r1, r8
    be7a:	4606      	mov	r6, r0
    be7c:	2300      	movs	r3, #0
    be7e:	220a      	movs	r2, #10
    be80:	4620      	mov	r0, r4
    be82:	f7fb f9eb 	bl	725c <__multadd>
    be86:	464f      	mov	r7, r9
    be88:	4680      	mov	r8, r0
    be8a:	e7a7      	b.n	bddc <_dtoa_r+0x734>
    be8c:	4620      	mov	r0, r4
    be8e:	9302      	str	r3, [sp, #8]
    be90:	f7fb f9da 	bl	7248 <_Bfree>
    be94:	9b02      	ldr	r3, [sp, #8]
    be96:	2201      	movs	r2, #1
    be98:	e7c6      	b.n	be28 <_dtoa_r+0x780>
    be9a:	f7fb f9df 	bl	725c <__multadd>
    be9e:	464f      	mov	r7, r9
    bea0:	4606      	mov	r6, r0
    bea2:	4680      	mov	r8, r0
    bea4:	e79a      	b.n	bddc <_dtoa_r+0x734>
    bea6:	9b01      	ldr	r3, [sp, #4]
    bea8:	2b02      	cmp	r3, #2
    beaa:	dc71      	bgt.n	bf90 <_dtoa_r+0x8e8>
    beac:	9b07      	ldr	r3, [sp, #28]
    beae:	2b00      	cmp	r3, #0
    beb0:	f47f af7b 	bne.w	bdaa <_dtoa_r+0x702>
    beb4:	9b04      	ldr	r3, [sp, #16]
    beb6:	4651      	mov	r1, sl
    beb8:	3301      	adds	r3, #1
    beba:	4628      	mov	r0, r5
    bebc:	9304      	str	r3, [sp, #16]
    bebe:	f7ff fb5f 	bl	b580 <quorem>
    bec2:	f8dd b000 	ldr.w	fp, [sp]
    bec6:	f100 0330 	add.w	r3, r0, #48	; 0x30
    beca:	f80b 3b01 	strb.w	r3, [fp], #1
    bece:	2700      	movs	r7, #0
    bed0:	e6eb      	b.n	bcaa <_dtoa_r+0x602>
    bed2:	4651      	mov	r1, sl
    bed4:	4628      	mov	r0, r5
    bed6:	f7fb fc6f 	bl	77b8 <__mcmp>
    beda:	2800      	cmp	r0, #0
    bedc:	f6bf aeba 	bge.w	bc54 <_dtoa_r+0x5ac>
    bee0:	4629      	mov	r1, r5
    bee2:	2300      	movs	r3, #0
    bee4:	220a      	movs	r2, #10
    bee6:	4620      	mov	r0, r4
    bee8:	f7fb f9b8 	bl	725c <__multadd>
    beec:	9b04      	ldr	r3, [sp, #16]
    beee:	1e5f      	subs	r7, r3, #1
    bef0:	9b07      	ldr	r3, [sp, #28]
    bef2:	4605      	mov	r5, r0
    bef4:	2b00      	cmp	r3, #0
    bef6:	f47f af4b 	bne.w	bd90 <_dtoa_r+0x6e8>
    befa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    befc:	2b00      	cmp	r3, #0
    befe:	f340 8218 	ble.w	c332 <_dtoa_r+0xc8a>
    bf02:	4699      	mov	r9, r3
    bf04:	e6b1      	b.n	bc6a <_dtoa_r+0x5c2>
    bf06:	4bbc      	ldr	r3, [pc, #752]	; (c1f8 <_dtoa_r+0xb50>)
    bf08:	9300      	str	r3, [sp, #0]
    bf0a:	3303      	adds	r3, #3
    bf0c:	e4a4      	b.n	b858 <_dtoa_r+0x1b0>
    bf0e:	201c      	movs	r0, #28
    bf10:	e712      	b.n	bd38 <_dtoa_r+0x690>
    bf12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    bf16:	2800      	cmp	r0, #0
    bf18:	f47f ae74 	bne.w	bc04 <_dtoa_r+0x55c>
    bf1c:	f3c1 0213 	ubfx	r2, r1, #0, #20
    bf20:	2a00      	cmp	r2, #0
    bf22:	f000 80f4 	beq.w	c10e <_dtoa_r+0xa66>
    bf26:	9b02      	ldr	r3, [sp, #8]
    bf28:	9308      	str	r3, [sp, #32]
    bf2a:	e66d      	b.n	bc08 <_dtoa_r+0x560>
    bf2c:	2301      	movs	r3, #1
    bf2e:	9307      	str	r3, [sp, #28]
    bf30:	9b04      	ldr	r3, [sp, #16]
    bf32:	445b      	add	r3, fp
    bf34:	f103 0901 	add.w	r9, r3, #1
    bf38:	f1b9 0f01 	cmp.w	r9, #1
    bf3c:	46cc      	mov	ip, r9
    bf3e:	930b      	str	r3, [sp, #44]	; 0x2c
    bf40:	bfb8      	it	lt
    bf42:	f04f 0c01 	movlt.w	ip, #1
    bf46:	2100      	movs	r1, #0
    bf48:	f1bc 0f17 	cmp.w	ip, #23
    bf4c:	63e1      	str	r1, [r4, #60]	; 0x3c
    bf4e:	f77f acbc 	ble.w	b8ca <_dtoa_r+0x222>
    bf52:	2001      	movs	r0, #1
    bf54:	2204      	movs	r2, #4
    bf56:	0052      	lsls	r2, r2, #1
    bf58:	f102 0314 	add.w	r3, r2, #20
    bf5c:	4563      	cmp	r3, ip
    bf5e:	4601      	mov	r1, r0
    bf60:	f100 0001 	add.w	r0, r0, #1
    bf64:	d9f7      	bls.n	bf56 <_dtoa_r+0x8ae>
    bf66:	63e1      	str	r1, [r4, #60]	; 0x3c
    bf68:	e4af      	b.n	b8ca <_dtoa_r+0x222>
    bf6a:	2301      	movs	r3, #1
    bf6c:	9307      	str	r3, [sp, #28]
    bf6e:	f1bb 0f00 	cmp.w	fp, #0
    bf72:	dd52      	ble.n	c01a <_dtoa_r+0x972>
    bf74:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
    bf78:	46d9      	mov	r9, fp
    bf7a:	46dc      	mov	ip, fp
    bf7c:	e7e3      	b.n	bf46 <_dtoa_r+0x89e>
    bf7e:	2300      	movs	r3, #0
    bf80:	9307      	str	r3, [sp, #28]
    bf82:	e7d5      	b.n	bf30 <_dtoa_r+0x888>
    bf84:	2300      	movs	r3, #0
    bf86:	9307      	str	r3, [sp, #28]
    bf88:	e7f1      	b.n	bf6e <_dtoa_r+0x8c6>
    bf8a:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    bf8e:	9704      	str	r7, [sp, #16]
    bf90:	f1b9 0f00 	cmp.w	r9, #0
    bf94:	f47f ada1 	bne.w	bada <_dtoa_r+0x432>
    bf98:	4651      	mov	r1, sl
    bf9a:	464b      	mov	r3, r9
    bf9c:	2205      	movs	r2, #5
    bf9e:	4620      	mov	r0, r4
    bfa0:	f7fb f95c 	bl	725c <__multadd>
    bfa4:	4601      	mov	r1, r0
    bfa6:	4682      	mov	sl, r0
    bfa8:	4628      	mov	r0, r5
    bfaa:	f7fb fc05 	bl	77b8 <__mcmp>
    bfae:	2800      	cmp	r0, #0
    bfb0:	f77f ad93 	ble.w	bada <_dtoa_r+0x432>
    bfb4:	9b04      	ldr	r3, [sp, #16]
    bfb6:	f103 0b01 	add.w	fp, r3, #1
    bfba:	9b00      	ldr	r3, [sp, #0]
    bfbc:	2231      	movs	r2, #49	; 0x31
    bfbe:	4698      	mov	r8, r3
    bfc0:	f803 2b01 	strb.w	r2, [r3], #1
    bfc4:	9300      	str	r3, [sp, #0]
    bfc6:	4651      	mov	r1, sl
    bfc8:	4620      	mov	r0, r4
    bfca:	f7fb f93d 	bl	7248 <_Bfree>
    bfce:	f10b 0301 	add.w	r3, fp, #1
    bfd2:	f8dd 9000 	ldr.w	r9, [sp]
    bfd6:	9304      	str	r3, [sp, #16]
    bfd8:	f8cd 8000 	str.w	r8, [sp]
    bfdc:	2e00      	cmp	r6, #0
    bfde:	f47f ae8f 	bne.w	bd00 <_dtoa_r+0x658>
    bfe2:	e691      	b.n	bd08 <_dtoa_r+0x660>
    bfe4:	eba3 0a0a 	sub.w	sl, r3, sl
    bfe8:	e5c5      	b.n	bb76 <_dtoa_r+0x4ce>
    bfea:	4631      	mov	r1, r6
    bfec:	4652      	mov	r2, sl
    bfee:	4620      	mov	r0, r4
    bff0:	f7fb fb0a 	bl	7608 <__pow5mult>
    bff4:	462a      	mov	r2, r5
    bff6:	4601      	mov	r1, r0
    bff8:	4606      	mov	r6, r0
    bffa:	4620      	mov	r0, r4
    bffc:	f7fb fa56 	bl	74ac <__multiply>
    c000:	4629      	mov	r1, r5
    c002:	4605      	mov	r5, r0
    c004:	4620      	mov	r0, r4
    c006:	f7fb f91f 	bl	7248 <_Bfree>
    c00a:	e5ea      	b.n	bbe2 <_dtoa_r+0x53a>
    c00c:	2002      	movs	r0, #2
    c00e:	eeb0 5b48 	vmov.f64	d5, d8
    c012:	e481      	b.n	b918 <_dtoa_r+0x270>
    c014:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
    c018:	e68e      	b.n	bd38 <_dtoa_r+0x690>
    c01a:	f04f 0b01 	mov.w	fp, #1
    c01e:	46d9      	mov	r9, fp
    c020:	e44f      	b.n	b8c2 <_dtoa_r+0x21a>
    c022:	d103      	bne.n	c02c <_dtoa_r+0x984>
    c024:	9b01      	ldr	r3, [sp, #4]
    c026:	07db      	lsls	r3, r3, #31
    c028:	f53f ae4c 	bmi.w	bcc4 <_dtoa_r+0x61c>
    c02c:	46d9      	mov	r9, fp
    c02e:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
    c032:	2b30      	cmp	r3, #48	; 0x30
    c034:	d0fa      	beq.n	c02c <_dtoa_r+0x984>
    c036:	e657      	b.n	bce8 <_dtoa_r+0x640>
    c038:	9b04      	ldr	r3, [sp, #16]
    c03a:	9a00      	ldr	r2, [sp, #0]
    c03c:	3301      	adds	r3, #1
    c03e:	9304      	str	r3, [sp, #16]
    c040:	2331      	movs	r3, #49	; 0x31
    c042:	7013      	strb	r3, [r2, #0]
    c044:	e650      	b.n	bce8 <_dtoa_r+0x640>
    c046:	f1ba 0f00 	cmp.w	sl, #0
    c04a:	f000 8123 	beq.w	c294 <_dtoa_r+0xbec>
    c04e:	f202 4233 	addw	r2, r2, #1075	; 0x433
    c052:	9b06      	ldr	r3, [sp, #24]
    c054:	9309      	str	r3, [sp, #36]	; 0x24
    c056:	4413      	add	r3, r2
    c058:	f8dd a020 	ldr.w	sl, [sp, #32]
    c05c:	9306      	str	r3, [sp, #24]
    c05e:	4490      	add	r8, r2
    c060:	e592      	b.n	bb88 <_dtoa_r+0x4e0>
    c062:	ee07 0a90 	vmov	s15, r0
    c066:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
    c06a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    c06e:	eea6 5b07 	vfma.f64	d5, d6, d7
    c072:	ee15 2a90 	vmov	r2, s11
    c076:	ec51 0b15 	vmov	r0, r1, d5
    c07a:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
    c07e:	ec41 0b15 	vmov	d5, r0, r1
    c082:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
    c086:	ee36 7b47 	vsub.f64	d7, d6, d7
    c08a:	eeb4 7bc5 	vcmpe.f64	d7, d5
    c08e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c092:	f300 8137 	bgt.w	c304 <_dtoa_r+0xc5c>
    c096:	eeb1 5b45 	vneg.f64	d5, d5
    c09a:	eeb4 7bc5 	vcmpe.f64	d7, d5
    c09e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c0a2:	f57f acfb 	bpl.w	ba9c <_dtoa_r+0x3f4>
    c0a6:	f04f 0a00 	mov.w	sl, #0
    c0aa:	4656      	mov	r6, sl
    c0ac:	e515      	b.n	bada <_dtoa_r+0x432>
    c0ae:	f000 80f5 	beq.w	c29c <_dtoa_r+0xbf4>
    c0b2:	9b04      	ldr	r3, [sp, #16]
    c0b4:	4951      	ldr	r1, [pc, #324]	; (c1fc <_dtoa_r+0xb54>)
    c0b6:	425a      	negs	r2, r3
    c0b8:	f002 000f 	and.w	r0, r2, #15
    c0bc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    c0c0:	ed91 6b00 	vldr	d6, [r1]
    c0c4:	1112      	asrs	r2, r2, #4
    c0c6:	ee28 6b06 	vmul.f64	d6, d8, d6
    c0ca:	f000 8142 	beq.w	c352 <_dtoa_r+0xcaa>
    c0ce:	eeb0 7b46 	vmov.f64	d7, d6
    c0d2:	494b      	ldr	r1, [pc, #300]	; (c200 <_dtoa_r+0xb58>)
    c0d4:	2600      	movs	r6, #0
    c0d6:	2002      	movs	r0, #2
    c0d8:	07d3      	lsls	r3, r2, #31
    c0da:	d505      	bpl.n	c0e8 <_dtoa_r+0xa40>
    c0dc:	ed91 5b00 	vldr	d5, [r1]
    c0e0:	3001      	adds	r0, #1
    c0e2:	2601      	movs	r6, #1
    c0e4:	ee27 7b05 	vmul.f64	d7, d7, d5
    c0e8:	1052      	asrs	r2, r2, #1
    c0ea:	f101 0108 	add.w	r1, r1, #8
    c0ee:	d1f3      	bne.n	c0d8 <_dtoa_r+0xa30>
    c0f0:	2e00      	cmp	r6, #0
    c0f2:	fe06 6b07 	vseleq.f64	d6, d6, d7
    c0f6:	e41e      	b.n	b936 <_dtoa_r+0x28e>
    c0f8:	9b02      	ldr	r3, [sp, #8]
    c0fa:	2b00      	cmp	r3, #0
    c0fc:	f47f ae37 	bne.w	bd6e <_dtoa_r+0x6c6>
    c100:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    c104:	f3c1 0213 	ubfx	r2, r1, #0, #20
    c108:	2a00      	cmp	r2, #0
    c10a:	f040 8137 	bne.w	c37c <_dtoa_r+0xcd4>
    c10e:	4a3d      	ldr	r2, [pc, #244]	; (c204 <_dtoa_r+0xb5c>)
    c110:	400a      	ands	r2, r1
    c112:	2a00      	cmp	r2, #0
    c114:	f000 80fa 	beq.w	c30c <_dtoa_r+0xc64>
    c118:	9b06      	ldr	r3, [sp, #24]
    c11a:	3301      	adds	r3, #1
    c11c:	9306      	str	r3, [sp, #24]
    c11e:	2301      	movs	r3, #1
    c120:	f108 0801 	add.w	r8, r8, #1
    c124:	9308      	str	r3, [sp, #32]
    c126:	e56f      	b.n	bc08 <_dtoa_r+0x560>
    c128:	4629      	mov	r1, r5
    c12a:	9a08      	ldr	r2, [sp, #32]
    c12c:	4620      	mov	r0, r4
    c12e:	f7fb fa6b 	bl	7608 <__pow5mult>
    c132:	4605      	mov	r5, r0
    c134:	e55a      	b.n	bbec <_dtoa_r+0x544>
    c136:	2a00      	cmp	r2, #0
    c138:	dd12      	ble.n	c160 <_dtoa_r+0xab8>
    c13a:	4629      	mov	r1, r5
    c13c:	2201      	movs	r2, #1
    c13e:	4620      	mov	r0, r4
    c140:	9301      	str	r3, [sp, #4]
    c142:	f7fb fac1 	bl	76c8 <__lshift>
    c146:	4651      	mov	r1, sl
    c148:	4605      	mov	r5, r0
    c14a:	f7fb fb35 	bl	77b8 <__mcmp>
    c14e:	2800      	cmp	r0, #0
    c150:	9b01      	ldr	r3, [sp, #4]
    c152:	f340 80e1 	ble.w	c318 <_dtoa_r+0xc70>
    c156:	2b39      	cmp	r3, #57	; 0x39
    c158:	f000 80ca 	beq.w	c2f0 <_dtoa_r+0xc48>
    c15c:	f10b 0331 	add.w	r3, fp, #49	; 0x31
    c160:	46b9      	mov	r9, r7
    c162:	f809 3b01 	strb.w	r3, [r9], #1
    c166:	9b04      	ldr	r3, [sp, #16]
    c168:	3301      	adds	r3, #1
    c16a:	4637      	mov	r7, r6
    c16c:	9304      	str	r3, [sp, #16]
    c16e:	4646      	mov	r6, r8
    c170:	e5ba      	b.n	bce8 <_dtoa_r+0x640>
    c172:	ee38 8b08 	vadd.f64	d8, d8, d8
    c176:	eeb4 8bc6 	vcmpe.f64	d8, d6
    c17a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c17e:	dc0a      	bgt.n	c196 <_dtoa_r+0xaee>
    c180:	eeb4 8b46 	vcmp.f64	d8, d6
    c184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c188:	f47f acdc 	bne.w	bb44 <_dtoa_r+0x49c>
    c18c:	ee17 3a10 	vmov	r3, s14
    c190:	07d8      	lsls	r0, r3, #31
    c192:	f57f acd7 	bpl.w	bb44 <_dtoa_r+0x49c>
    c196:	9a00      	ldr	r2, [sp, #0]
    c198:	e454      	b.n	ba44 <_dtoa_r+0x39c>
    c19a:	6871      	ldr	r1, [r6, #4]
    c19c:	4620      	mov	r0, r4
    c19e:	f7fb f82d 	bl	71fc <_Balloc>
    c1a2:	4607      	mov	r7, r0
    c1a4:	2800      	cmp	r0, #0
    c1a6:	f000 80de 	beq.w	c366 <_dtoa_r+0xcbe>
    c1aa:	6933      	ldr	r3, [r6, #16]
    c1ac:	3302      	adds	r3, #2
    c1ae:	009a      	lsls	r2, r3, #2
    c1b0:	f106 010c 	add.w	r1, r6, #12
    c1b4:	300c      	adds	r0, #12
    c1b6:	f7f5 ffe1 	bl	217c <memcpy>
    c1ba:	4639      	mov	r1, r7
    c1bc:	2201      	movs	r2, #1
    c1be:	4620      	mov	r0, r4
    c1c0:	f7fb fa82 	bl	76c8 <__lshift>
    c1c4:	4680      	mov	r8, r0
    c1c6:	e5fe      	b.n	bdc6 <_dtoa_r+0x71e>
    c1c8:	9b06      	ldr	r3, [sp, #24]
    c1ca:	eba3 0309 	sub.w	r3, r3, r9
    c1ce:	9309      	str	r3, [sp, #36]	; 0x24
    c1d0:	e4da      	b.n	bb88 <_dtoa_r+0x4e0>
    c1d2:	2b39      	cmp	r3, #57	; 0x39
    c1d4:	f000 808c 	beq.w	c2f0 <_dtoa_r+0xc48>
    c1d8:	46b9      	mov	r9, r7
    c1da:	3301      	adds	r3, #1
    c1dc:	e7c1      	b.n	c162 <_dtoa_r+0xaba>
    c1de:	9a04      	ldr	r2, [sp, #16]
    c1e0:	3201      	adds	r2, #1
    c1e2:	4637      	mov	r7, r6
    c1e4:	9204      	str	r2, [sp, #16]
    c1e6:	4646      	mov	r6, r8
    c1e8:	e55f      	b.n	bcaa <_dtoa_r+0x602>
    c1ea:	4629      	mov	r1, r5
    c1ec:	4620      	mov	r0, r4
    c1ee:	f7fb fa0b 	bl	7608 <__pow5mult>
    c1f2:	4605      	mov	r5, r0
    c1f4:	e4fa      	b.n	bbec <_dtoa_r+0x544>
    c1f6:	bf00      	nop
    c1f8:	2000083c 	.word	0x2000083c
    c1fc:	200002a8 	.word	0x200002a8
    c200:	20000280 	.word	0x20000280
    c204:	7ff00000 	.word	0x7ff00000
    c208:	4b5e      	ldr	r3, [pc, #376]	; (c384 <_dtoa_r+0xcdc>)
    c20a:	eefd 5bc6 	vcvt.s32.f64	s11, d6
    c20e:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
    c212:	ed1c 3b02 	vldr	d3, [ip, #-8]
    c216:	eeb8 7be5 	vcvt.f64.s32	d7, s11
    c21a:	ee36 7b47 	vsub.f64	d7, d6, d7
    c21e:	ec41 0b16 	vmov	d6, r0, r1
    c222:	ee15 1a90 	vmov	r1, s11
    c226:	ee23 3b06 	vmul.f64	d3, d3, d6
    c22a:	9800      	ldr	r0, [sp, #0]
    c22c:	3130      	adds	r1, #48	; 0x30
    c22e:	2a01      	cmp	r2, #1
    c230:	f800 1b01 	strb.w	r1, [r0], #1
    c234:	f000 8083 	beq.w	c33e <_dtoa_r+0xc96>
    c238:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    c23c:	9b00      	ldr	r3, [sp, #0]
    c23e:	1899      	adds	r1, r3, r2
    c240:	ee27 7b04 	vmul.f64	d7, d7, d4
    c244:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    c248:	ee16 3a90 	vmov	r3, s13
    c24c:	3330      	adds	r3, #48	; 0x30
    c24e:	f800 3b01 	strb.w	r3, [r0], #1
    c252:	4281      	cmp	r1, r0
    c254:	eeb8 5be6 	vcvt.f64.s32	d5, s13
    c258:	ee37 7b45 	vsub.f64	d7, d7, d5
    c25c:	d1f0      	bne.n	c240 <_dtoa_r+0xb98>
    c25e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    c262:	ee33 5b06 	vadd.f64	d5, d3, d6
    c266:	eeb4 5bc7 	vcmpe.f64	d5, d7
    c26a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c26e:	f53f abe3 	bmi.w	ba38 <_dtoa_r+0x390>
    c272:	ee36 6b43 	vsub.f64	d6, d6, d3
    c276:	eeb4 6bc7 	vcmpe.f64	d6, d7
    c27a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c27e:	f77f ac0d 	ble.w	ba9c <_dtoa_r+0x3f4>
    c282:	4689      	mov	r9, r1
    c284:	3901      	subs	r1, #1
    c286:	f819 3c01 	ldrb.w	r3, [r9, #-1]
    c28a:	2b30      	cmp	r3, #48	; 0x30
    c28c:	d0f9      	beq.n	c282 <_dtoa_r+0xbda>
    c28e:	1c73      	adds	r3, r6, #1
    c290:	9304      	str	r3, [sp, #16]
    c292:	e539      	b.n	bd08 <_dtoa_r+0x660>
    c294:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c296:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
    c29a:	e6da      	b.n	c052 <_dtoa_r+0x9aa>
    c29c:	2002      	movs	r0, #2
    c29e:	eeb0 6b48 	vmov.f64	d6, d8
    c2a2:	f7ff bb48 	b.w	b936 <_dtoa_r+0x28e>
    c2a6:	f1b9 0f00 	cmp.w	r9, #0
    c2aa:	f43f aeda 	beq.w	c062 <_dtoa_r+0x9ba>
    c2ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c2b0:	2a00      	cmp	r2, #0
    c2b2:	f77f abf3 	ble.w	ba9c <_dtoa_r+0x3f4>
    c2b6:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    c2ba:	ee26 6b04 	vmul.f64	d6, d6, d4
    c2be:	3001      	adds	r0, #1
    c2c0:	ee07 0a90 	vmov	s15, r0
    c2c4:	9b04      	ldr	r3, [sp, #16]
    c2c6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
    c2ca:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    c2ce:	eea6 7b05 	vfma.f64	d7, d6, d5
    c2d2:	ee17 ca90 	vmov	ip, s15
    c2d6:	ec51 0b17 	vmov	r0, r1, d7
    c2da:	1e5e      	subs	r6, r3, #1
    c2dc:	f1ac 7150 	sub.w	r1, ip, #54525952	; 0x3400000
    c2e0:	f7ff bb47 	b.w	b972 <_dtoa_r+0x2ca>
    c2e4:	9b04      	ldr	r3, [sp, #16]
    c2e6:	3301      	adds	r3, #1
    c2e8:	9304      	str	r3, [sp, #16]
    c2ea:	2331      	movs	r3, #49	; 0x31
    c2ec:	f7ff bbb1 	b.w	ba52 <_dtoa_r+0x3aa>
    c2f0:	9b04      	ldr	r3, [sp, #16]
    c2f2:	46bb      	mov	fp, r7
    c2f4:	3301      	adds	r3, #1
    c2f6:	9304      	str	r3, [sp, #16]
    c2f8:	2339      	movs	r3, #57	; 0x39
    c2fa:	4637      	mov	r7, r6
    c2fc:	f80b 3b01 	strb.w	r3, [fp], #1
    c300:	4646      	mov	r6, r8
    c302:	e4e1      	b.n	bcc8 <_dtoa_r+0x620>
    c304:	f04f 0a00 	mov.w	sl, #0
    c308:	4656      	mov	r6, sl
    c30a:	e653      	b.n	bfb4 <_dtoa_r+0x90c>
    c30c:	9208      	str	r2, [sp, #32]
    c30e:	e47b      	b.n	bc08 <_dtoa_r+0x560>
    c310:	1c73      	adds	r3, r6, #1
    c312:	9304      	str	r3, [sp, #16]
    c314:	4689      	mov	r9, r1
    c316:	e4f7      	b.n	bd08 <_dtoa_r+0x660>
    c318:	f47f af22 	bne.w	c160 <_dtoa_r+0xab8>
    c31c:	07da      	lsls	r2, r3, #31
    c31e:	f57f af1f 	bpl.w	c160 <_dtoa_r+0xab8>
    c322:	e718      	b.n	c156 <_dtoa_r+0xaae>
    c324:	2b39      	cmp	r3, #57	; 0x39
    c326:	d0e3      	beq.n	c2f0 <_dtoa_r+0xc48>
    c328:	f1b9 0f00 	cmp.w	r9, #0
    c32c:	f73f af16 	bgt.w	c15c <_dtoa_r+0xab4>
    c330:	e716      	b.n	c160 <_dtoa_r+0xab8>
    c332:	9b01      	ldr	r3, [sp, #4]
    c334:	2b02      	cmp	r3, #2
    c336:	f73f ae28 	bgt.w	bf8a <_dtoa_r+0x8e2>
    c33a:	9704      	str	r7, [sp, #16]
    c33c:	e5ba      	b.n	beb4 <_dtoa_r+0x80c>
    c33e:	4601      	mov	r1, r0
    c340:	e78d      	b.n	c25e <_dtoa_r+0xbb6>
    c342:	9b01      	ldr	r3, [sp, #4]
    c344:	2b02      	cmp	r3, #2
    c346:	f73f ae20 	bgt.w	bf8a <_dtoa_r+0x8e2>
    c34a:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    c34e:	9704      	str	r7, [sp, #16]
    c350:	e52b      	b.n	bdaa <_dtoa_r+0x702>
    c352:	2002      	movs	r0, #2
    c354:	f7ff baef 	b.w	b936 <_dtoa_r+0x28e>
    c358:	4b0b      	ldr	r3, [pc, #44]	; (c388 <_dtoa_r+0xce0>)
    c35a:	480c      	ldr	r0, [pc, #48]	; (c38c <_dtoa_r+0xce4>)
    c35c:	2200      	movs	r2, #0
    c35e:	f240 11af 	movw	r1, #431	; 0x1af
    c362:	f7ff f8b1 	bl	b4c8 <__assert_func>
    c366:	4b08      	ldr	r3, [pc, #32]	; (c388 <_dtoa_r+0xce0>)
    c368:	4808      	ldr	r0, [pc, #32]	; (c38c <_dtoa_r+0xce4>)
    c36a:	463a      	mov	r2, r7
    c36c:	f240 21ef 	movw	r1, #751	; 0x2ef
    c370:	f7ff f8aa 	bl	b4c8 <__assert_func>
    c374:	4b06      	ldr	r3, [pc, #24]	; (c390 <_dtoa_r+0xce8>)
    c376:	9300      	str	r3, [sp, #0]
    c378:	f7ff b9d2 	b.w	b720 <_dtoa_r+0x78>
    c37c:	9b02      	ldr	r3, [sp, #8]
    c37e:	9308      	str	r3, [sp, #32]
    c380:	e4f7      	b.n	bd72 <_dtoa_r+0x6ca>
    c382:	bf00      	nop
    c384:	200002a8 	.word	0x200002a8
    c388:	20000550 	.word	0x20000550
    c38c:	20000840 	.word	0x20000840
    c390:	20000830 	.word	0x20000830

0000c394 <_strtoul_l.constprop.0>:
    c394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c398:	4607      	mov	r7, r0
    c39a:	484c      	ldr	r0, [pc, #304]	; (c4cc <_strtoul_l.constprop.0+0x138>)
    c39c:	460e      	mov	r6, r1
    c39e:	4635      	mov	r5, r6
    c3a0:	f816 eb01 	ldrb.w	lr, [r6], #1
    c3a4:	f810 c00e 	ldrb.w	ip, [r0, lr]
    c3a8:	f01c 0c08 	ands.w	ip, ip, #8
    c3ac:	d1f7      	bne.n	c39e <_strtoul_l.constprop.0+0xa>
    c3ae:	f1be 0f2d 	cmp.w	lr, #45	; 0x2d
    c3b2:	d05a      	beq.n	c46a <_strtoul_l.constprop.0+0xd6>
    c3b4:	f1be 0f2b 	cmp.w	lr, #43	; 0x2b
    c3b8:	bf03      	ittte	eq
    c3ba:	f896 e000 	ldrbeq.w	lr, [r6]
    c3be:	4664      	moveq	r4, ip
    c3c0:	1cae      	addeq	r6, r5, #2
    c3c2:	4664      	movne	r4, ip
    c3c4:	b15b      	cbz	r3, c3de <_strtoul_l.constprop.0+0x4a>
    c3c6:	2b10      	cmp	r3, #16
    c3c8:	d054      	beq.n	c474 <_strtoul_l.constprop.0+0xe0>
    c3ca:	f04f 38ff 	mov.w	r8, #4294967295
    c3ce:	fbb8 f8f3 	udiv	r8, r8, r3
    c3d2:	fb03 fa08 	mul.w	sl, r3, r8
    c3d6:	ea6f 0a0a 	mvn.w	sl, sl
    c3da:	4699      	mov	r9, r3
    c3dc:	e008      	b.n	c3f0 <_strtoul_l.constprop.0+0x5c>
    c3de:	f1be 0f30 	cmp.w	lr, #48	; 0x30
    c3e2:	d05a      	beq.n	c49a <_strtoul_l.constprop.0+0x106>
    c3e4:	230a      	movs	r3, #10
    c3e6:	f8df 80e8 	ldr.w	r8, [pc, #232]	; c4d0 <_strtoul_l.constprop.0+0x13c>
    c3ea:	f04f 0a05 	mov.w	sl, #5
    c3ee:	4699      	mov	r9, r3
    c3f0:	2500      	movs	r5, #0
    c3f2:	4628      	mov	r0, r5
    c3f4:	e005      	b.n	c402 <_strtoul_l.constprop.0+0x6e>
    c3f6:	d02c      	beq.n	c452 <_strtoul_l.constprop.0+0xbe>
    c3f8:	fb09 c000 	mla	r0, r9, r0, ip
    c3fc:	2501      	movs	r5, #1
    c3fe:	f816 eb01 	ldrb.w	lr, [r6], #1
    c402:	f1ae 0c30 	sub.w	ip, lr, #48	; 0x30
    c406:	f1bc 0f09 	cmp.w	ip, #9
    c40a:	d906      	bls.n	c41a <_strtoul_l.constprop.0+0x86>
    c40c:	f1ae 0c41 	sub.w	ip, lr, #65	; 0x41
    c410:	f1bc 0f19 	cmp.w	ip, #25
    c414:	d80b      	bhi.n	c42e <_strtoul_l.constprop.0+0x9a>
    c416:	f1ae 0c37 	sub.w	ip, lr, #55	; 0x37
    c41a:	4563      	cmp	r3, ip
    c41c:	dd10      	ble.n	c440 <_strtoul_l.constprop.0+0xac>
    c41e:	f1b5 3fff 	cmp.w	r5, #4294967295
    c422:	d0ec      	beq.n	c3fe <_strtoul_l.constprop.0+0x6a>
    c424:	4540      	cmp	r0, r8
    c426:	d9e6      	bls.n	c3f6 <_strtoul_l.constprop.0+0x62>
    c428:	f04f 35ff 	mov.w	r5, #4294967295
    c42c:	e7e7      	b.n	c3fe <_strtoul_l.constprop.0+0x6a>
    c42e:	f1ae 0c61 	sub.w	ip, lr, #97	; 0x61
    c432:	f1bc 0f19 	cmp.w	ip, #25
    c436:	d803      	bhi.n	c440 <_strtoul_l.constprop.0+0xac>
    c438:	f1ae 0c57 	sub.w	ip, lr, #87	; 0x57
    c43c:	4563      	cmp	r3, ip
    c43e:	dcee      	bgt.n	c41e <_strtoul_l.constprop.0+0x8a>
    c440:	1c6b      	adds	r3, r5, #1
    c442:	d00b      	beq.n	c45c <_strtoul_l.constprop.0+0xc8>
    c444:	b104      	cbz	r4, c448 <_strtoul_l.constprop.0+0xb4>
    c446:	4240      	negs	r0, r0
    c448:	b10a      	cbz	r2, c44e <_strtoul_l.constprop.0+0xba>
    c44a:	b965      	cbnz	r5, c466 <_strtoul_l.constprop.0+0xd2>
    c44c:	6011      	str	r1, [r2, #0]
    c44e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c452:	45d4      	cmp	ip, sl
    c454:	ddd0      	ble.n	c3f8 <_strtoul_l.constprop.0+0x64>
    c456:	f04f 35ff 	mov.w	r5, #4294967295
    c45a:	e7d0      	b.n	c3fe <_strtoul_l.constprop.0+0x6a>
    c45c:	2322      	movs	r3, #34	; 0x22
    c45e:	603b      	str	r3, [r7, #0]
    c460:	4628      	mov	r0, r5
    c462:	2a00      	cmp	r2, #0
    c464:	d0f3      	beq.n	c44e <_strtoul_l.constprop.0+0xba>
    c466:	1e71      	subs	r1, r6, #1
    c468:	e7f0      	b.n	c44c <_strtoul_l.constprop.0+0xb8>
    c46a:	f896 e000 	ldrb.w	lr, [r6]
    c46e:	2401      	movs	r4, #1
    c470:	1cae      	adds	r6, r5, #2
    c472:	e7a7      	b.n	c3c4 <_strtoul_l.constprop.0+0x30>
    c474:	f1be 0f30 	cmp.w	lr, #48	; 0x30
    c478:	d121      	bne.n	c4be <_strtoul_l.constprop.0+0x12a>
    c47a:	7830      	ldrb	r0, [r6, #0]
    c47c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
    c480:	2858      	cmp	r0, #88	; 0x58
    c482:	d116      	bne.n	c4b2 <_strtoul_l.constprop.0+0x11e>
    c484:	f04f 0910 	mov.w	r9, #16
    c488:	f896 e001 	ldrb.w	lr, [r6, #1]
    c48c:	f04f 0a0f 	mov.w	sl, #15
    c490:	3602      	adds	r6, #2
    c492:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
    c496:	464b      	mov	r3, r9
    c498:	e7aa      	b.n	c3f0 <_strtoul_l.constprop.0+0x5c>
    c49a:	7833      	ldrb	r3, [r6, #0]
    c49c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    c4a0:	2b58      	cmp	r3, #88	; 0x58
    c4a2:	d0ef      	beq.n	c484 <_strtoul_l.constprop.0+0xf0>
    c4a4:	2308      	movs	r3, #8
    c4a6:	f04f 0a07 	mov.w	sl, #7
    c4aa:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
    c4ae:	4699      	mov	r9, r3
    c4b0:	e79e      	b.n	c3f0 <_strtoul_l.constprop.0+0x5c>
    c4b2:	4699      	mov	r9, r3
    c4b4:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
    c4b8:	f04f 0a0f 	mov.w	sl, #15
    c4bc:	e798      	b.n	c3f0 <_strtoul_l.constprop.0+0x5c>
    c4be:	f04f 0a0f 	mov.w	sl, #15
    c4c2:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
    c4c6:	4699      	mov	r9, r3
    c4c8:	e792      	b.n	c3f0 <_strtoul_l.constprop.0+0x5c>
    c4ca:	bf00      	nop
    c4cc:	2000072d 	.word	0x2000072d
    c4d0:	19999999 	.word	0x19999999

0000c4d4 <_strtoul_r>:
    c4d4:	f7ff bf5e 	b.w	c394 <_strtoul_l.constprop.0>

0000c4d8 <_strtoll_l.constprop.0>:
    c4d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c4dc:	b085      	sub	sp, #20
    c4de:	461f      	mov	r7, r3
    c4e0:	4b57      	ldr	r3, [pc, #348]	; (c640 <_strtoll_l.constprop.0+0x168>)
    c4e2:	9003      	str	r0, [sp, #12]
    c4e4:	468a      	mov	sl, r1
    c4e6:	9200      	str	r2, [sp, #0]
    c4e8:	460d      	mov	r5, r1
    c4ea:	462a      	mov	r2, r5
    c4ec:	f815 4b01 	ldrb.w	r4, [r5], #1
    c4f0:	5d1e      	ldrb	r6, [r3, r4]
    c4f2:	f016 0608 	ands.w	r6, r6, #8
    c4f6:	d1f8      	bne.n	c4ea <_strtoll_l.constprop.0+0x12>
    c4f8:	2c2d      	cmp	r4, #45	; 0x2d
    c4fa:	d075      	beq.n	c5e8 <_strtoll_l.constprop.0+0x110>
    c4fc:	2c2b      	cmp	r4, #43	; 0x2b
    c4fe:	bf05      	ittet	eq
    c500:	782c      	ldrbeq	r4, [r5, #0]
    c502:	9602      	streq	r6, [sp, #8]
    c504:	9602      	strne	r6, [sp, #8]
    c506:	1c95      	addeq	r5, r2, #2
    c508:	f04f 36ff 	mov.w	r6, #4294967295
    c50c:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
    c510:	b12f      	cbz	r7, c51e <_strtoll_l.constprop.0+0x46>
    c512:	2f10      	cmp	r7, #16
    c514:	d06f      	beq.n	c5f6 <_strtoll_l.constprop.0+0x11e>
    c516:	46b8      	mov	r8, r7
    c518:	ea4f 79e7 	mov.w	r9, r7, asr #31
    c51c:	e005      	b.n	c52a <_strtoll_l.constprop.0+0x52>
    c51e:	2c30      	cmp	r4, #48	; 0x30
    c520:	d074      	beq.n	c60c <_strtoll_l.constprop.0+0x134>
    c522:	f04f 080a 	mov.w	r8, #10
    c526:	46b9      	mov	r9, r7
    c528:	4647      	mov	r7, r8
    c52a:	4642      	mov	r2, r8
    c52c:	464b      	mov	r3, r9
    c52e:	4630      	mov	r0, r6
    c530:	4659      	mov	r1, fp
    c532:	f7f7 fbc1 	bl	3cb8 <__aeabi_uldivmod>
    c536:	2300      	movs	r3, #0
    c538:	9201      	str	r2, [sp, #4]
    c53a:	4684      	mov	ip, r0
    c53c:	460a      	mov	r2, r1
    c53e:	4618      	mov	r0, r3
    c540:	4619      	mov	r1, r3
    c542:	e011      	b.n	c568 <_strtoll_l.constprop.0+0x90>
    c544:	428a      	cmp	r2, r1
    c546:	bf08      	it	eq
    c548:	4584      	cmpeq	ip, r0
    c54a:	d03d      	beq.n	c5c8 <_strtoll_l.constprop.0+0xf0>
    c54c:	fb00 f309 	mul.w	r3, r0, r9
    c550:	fb08 3301 	mla	r3, r8, r1, r3
    c554:	fba0 0108 	umull	r0, r1, r0, r8
    c558:	440b      	add	r3, r1
    c55a:	eb1e 0000 	adds.w	r0, lr, r0
    c55e:	eb43 71ee 	adc.w	r1, r3, lr, asr #31
    c562:	2301      	movs	r3, #1
    c564:	f815 4b01 	ldrb.w	r4, [r5], #1
    c568:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
    c56c:	f1be 0f09 	cmp.w	lr, #9
    c570:	d906      	bls.n	c580 <_strtoll_l.constprop.0+0xa8>
    c572:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
    c576:	f1be 0f19 	cmp.w	lr, #25
    c57a:	d80c      	bhi.n	c596 <_strtoll_l.constprop.0+0xbe>
    c57c:	f1a4 0e37 	sub.w	lr, r4, #55	; 0x37
    c580:	4577      	cmp	r7, lr
    c582:	dd11      	ble.n	c5a8 <_strtoll_l.constprop.0+0xd0>
    c584:	1c5c      	adds	r4, r3, #1
    c586:	d0ed      	beq.n	c564 <_strtoll_l.constprop.0+0x8c>
    c588:	4584      	cmp	ip, r0
    c58a:	eb72 0301 	sbcs.w	r3, r2, r1
    c58e:	d2d9      	bcs.n	c544 <_strtoll_l.constprop.0+0x6c>
    c590:	f04f 33ff 	mov.w	r3, #4294967295
    c594:	e7e6      	b.n	c564 <_strtoll_l.constprop.0+0x8c>
    c596:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
    c59a:	f1be 0f19 	cmp.w	lr, #25
    c59e:	d803      	bhi.n	c5a8 <_strtoll_l.constprop.0+0xd0>
    c5a0:	f1a4 0e57 	sub.w	lr, r4, #87	; 0x57
    c5a4:	4577      	cmp	r7, lr
    c5a6:	dced      	bgt.n	c584 <_strtoll_l.constprop.0+0xac>
    c5a8:	1c5a      	adds	r2, r3, #1
    c5aa:	d013      	beq.n	c5d4 <_strtoll_l.constprop.0+0xfc>
    c5ac:	9a02      	ldr	r2, [sp, #8]
    c5ae:	b112      	cbz	r2, c5b6 <_strtoll_l.constprop.0+0xde>
    c5b0:	4240      	negs	r0, r0
    c5b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c5b6:	9a00      	ldr	r2, [sp, #0]
    c5b8:	b11a      	cbz	r2, c5c2 <_strtoll_l.constprop.0+0xea>
    c5ba:	bba3      	cbnz	r3, c626 <_strtoll_l.constprop.0+0x14e>
    c5bc:	9b00      	ldr	r3, [sp, #0]
    c5be:	f8c3 a000 	str.w	sl, [r3]
    c5c2:	b005      	add	sp, #20
    c5c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c5c8:	9b01      	ldr	r3, [sp, #4]
    c5ca:	4573      	cmp	r3, lr
    c5cc:	dabe      	bge.n	c54c <_strtoll_l.constprop.0+0x74>
    c5ce:	f04f 33ff 	mov.w	r3, #4294967295
    c5d2:	e7c7      	b.n	c564 <_strtoll_l.constprop.0+0x8c>
    c5d4:	9a03      	ldr	r2, [sp, #12]
    c5d6:	2322      	movs	r3, #34	; 0x22
    c5d8:	6013      	str	r3, [r2, #0]
    c5da:	9b00      	ldr	r3, [sp, #0]
    c5dc:	b333      	cbz	r3, c62c <_strtoll_l.constprop.0+0x154>
    c5de:	f105 3aff 	add.w	sl, r5, #4294967295
    c5e2:	4630      	mov	r0, r6
    c5e4:	4659      	mov	r1, fp
    c5e6:	e7e9      	b.n	c5bc <_strtoll_l.constprop.0+0xe4>
    c5e8:	2301      	movs	r3, #1
    c5ea:	782c      	ldrb	r4, [r5, #0]
    c5ec:	9302      	str	r3, [sp, #8]
    c5ee:	1c95      	adds	r5, r2, #2
    c5f0:	f04f 4b00 	mov.w	fp, #2147483648	; 0x80000000
    c5f4:	e78c      	b.n	c510 <_strtoll_l.constprop.0+0x38>
    c5f6:	2c30      	cmp	r4, #48	; 0x30
    c5f8:	d104      	bne.n	c604 <_strtoll_l.constprop.0+0x12c>
    c5fa:	782b      	ldrb	r3, [r5, #0]
    c5fc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    c600:	2b58      	cmp	r3, #88	; 0x58
    c602:	d008      	beq.n	c616 <_strtoll_l.constprop.0+0x13e>
    c604:	46b8      	mov	r8, r7
    c606:	f04f 0900 	mov.w	r9, #0
    c60a:	e78e      	b.n	c52a <_strtoll_l.constprop.0+0x52>
    c60c:	782b      	ldrb	r3, [r5, #0]
    c60e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    c612:	2b58      	cmp	r3, #88	; 0x58
    c614:	d10f      	bne.n	c636 <_strtoll_l.constprop.0+0x15e>
    c616:	f04f 0810 	mov.w	r8, #16
    c61a:	786c      	ldrb	r4, [r5, #1]
    c61c:	f04f 0900 	mov.w	r9, #0
    c620:	3502      	adds	r5, #2
    c622:	4647      	mov	r7, r8
    c624:	e781      	b.n	c52a <_strtoll_l.constprop.0+0x52>
    c626:	4606      	mov	r6, r0
    c628:	468b      	mov	fp, r1
    c62a:	e7d8      	b.n	c5de <_strtoll_l.constprop.0+0x106>
    c62c:	4630      	mov	r0, r6
    c62e:	4659      	mov	r1, fp
    c630:	b005      	add	sp, #20
    c632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c636:	f04f 0808 	mov.w	r8, #8
    c63a:	46b9      	mov	r9, r7
    c63c:	4647      	mov	r7, r8
    c63e:	e774      	b.n	c52a <_strtoll_l.constprop.0+0x52>
    c640:	2000072d 	.word	0x2000072d

0000c644 <_strtoll_r>:
    c644:	f7ff bf48 	b.w	c4d8 <_strtoll_l.constprop.0>

0000c648 <_strtoull_l.constprop.0>:
    c648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c64c:	b085      	sub	sp, #20
    c64e:	468b      	mov	fp, r1
    c650:	9201      	str	r2, [sp, #4]
    c652:	4a62      	ldr	r2, [pc, #392]	; (c7dc <_strtoull_l.constprop.0+0x194>)
    c654:	9003      	str	r0, [sp, #12]
    c656:	461e      	mov	r6, r3
    c658:	460d      	mov	r5, r1
    c65a:	4629      	mov	r1, r5
    c65c:	f815 4b01 	ldrb.w	r4, [r5], #1
    c660:	5d13      	ldrb	r3, [r2, r4]
    c662:	f013 0308 	ands.w	r3, r3, #8
    c666:	d1f8      	bne.n	c65a <_strtoull_l.constprop.0+0x12>
    c668:	2c2d      	cmp	r4, #45	; 0x2d
    c66a:	f000 8082 	beq.w	c772 <_strtoull_l.constprop.0+0x12a>
    c66e:	2c2b      	cmp	r4, #43	; 0x2b
    c670:	bf03      	ittte	eq
    c672:	782c      	ldrbeq	r4, [r5, #0]
    c674:	9302      	streq	r3, [sp, #8]
    c676:	1c8d      	addeq	r5, r1, #2
    c678:	9302      	strne	r3, [sp, #8]
    c67a:	b1be      	cbz	r6, c6ac <_strtoull_l.constprop.0+0x64>
    c67c:	2e10      	cmp	r6, #16
    c67e:	d07d      	beq.n	c77c <_strtoull_l.constprop.0+0x134>
    c680:	ea4f 7ae6 	mov.w	sl, r6, asr #31
    c684:	4632      	mov	r2, r6
    c686:	4653      	mov	r3, sl
    c688:	f04f 30ff 	mov.w	r0, #4294967295
    c68c:	f04f 31ff 	mov.w	r1, #4294967295
    c690:	f7f7 fb12 	bl	3cb8 <__aeabi_uldivmod>
    c694:	4632      	mov	r2, r6
    c696:	4607      	mov	r7, r0
    c698:	4688      	mov	r8, r1
    c69a:	4653      	mov	r3, sl
    c69c:	f04f 30ff 	mov.w	r0, #4294967295
    c6a0:	f04f 31ff 	mov.w	r1, #4294967295
    c6a4:	46b1      	mov	r9, r6
    c6a6:	f7f7 fb07 	bl	3cb8 <__aeabi_uldivmod>
    c6aa:	e00a      	b.n	c6c2 <_strtoull_l.constprop.0+0x7a>
    c6ac:	2c30      	cmp	r4, #48	; 0x30
    c6ae:	d079      	beq.n	c7a4 <_strtoull_l.constprop.0+0x15c>
    c6b0:	f04f 090a 	mov.w	r9, #10
    c6b4:	f8df 8128 	ldr.w	r8, [pc, #296]	; c7e0 <_strtoull_l.constprop.0+0x198>
    c6b8:	46b2      	mov	sl, r6
    c6ba:	2205      	movs	r2, #5
    c6bc:	f04f 3799 	mov.w	r7, #2576980377	; 0x99999999
    c6c0:	464e      	mov	r6, r9
    c6c2:	f04f 0c00 	mov.w	ip, #0
    c6c6:	4660      	mov	r0, ip
    c6c8:	4661      	mov	r1, ip
    c6ca:	e011      	b.n	c6f0 <_strtoull_l.constprop.0+0xa8>
    c6cc:	4541      	cmp	r1, r8
    c6ce:	bf08      	it	eq
    c6d0:	42b8      	cmpeq	r0, r7
    c6d2:	d03e      	beq.n	c752 <_strtoull_l.constprop.0+0x10a>
    c6d4:	fb00 f40a 	mul.w	r4, r0, sl
    c6d8:	fb09 4101 	mla	r1, r9, r1, r4
    c6dc:	fba0 0409 	umull	r0, r4, r0, r9
    c6e0:	4421      	add	r1, r4
    c6e2:	1818      	adds	r0, r3, r0
    c6e4:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
    c6e8:	f04f 0c01 	mov.w	ip, #1
    c6ec:	f815 4b01 	ldrb.w	r4, [r5], #1
    c6f0:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    c6f4:	2b09      	cmp	r3, #9
    c6f6:	d905      	bls.n	c704 <_strtoull_l.constprop.0+0xbc>
    c6f8:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
    c6fc:	2b19      	cmp	r3, #25
    c6fe:	d80d      	bhi.n	c71c <_strtoull_l.constprop.0+0xd4>
    c700:	f1a4 0337 	sub.w	r3, r4, #55	; 0x37
    c704:	429e      	cmp	r6, r3
    c706:	dd11      	ble.n	c72c <_strtoull_l.constprop.0+0xe4>
    c708:	f1bc 3fff 	cmp.w	ip, #4294967295
    c70c:	d0ee      	beq.n	c6ec <_strtoull_l.constprop.0+0xa4>
    c70e:	4287      	cmp	r7, r0
    c710:	eb78 0401 	sbcs.w	r4, r8, r1
    c714:	d2da      	bcs.n	c6cc <_strtoull_l.constprop.0+0x84>
    c716:	f04f 3cff 	mov.w	ip, #4294967295
    c71a:	e7e7      	b.n	c6ec <_strtoull_l.constprop.0+0xa4>
    c71c:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
    c720:	2b19      	cmp	r3, #25
    c722:	d803      	bhi.n	c72c <_strtoull_l.constprop.0+0xe4>
    c724:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
    c728:	429e      	cmp	r6, r3
    c72a:	dced      	bgt.n	c708 <_strtoull_l.constprop.0+0xc0>
    c72c:	f1bc 3fff 	cmp.w	ip, #4294967295
    c730:	d014      	beq.n	c75c <_strtoull_l.constprop.0+0x114>
    c732:	9b02      	ldr	r3, [sp, #8]
    c734:	b113      	cbz	r3, c73c <_strtoull_l.constprop.0+0xf4>
    c736:	4240      	negs	r0, r0
    c738:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c73c:	9b01      	ldr	r3, [sp, #4]
    c73e:	b12b      	cbz	r3, c74c <_strtoull_l.constprop.0+0x104>
    c740:	f1bc 0f00 	cmp.w	ip, #0
    c744:	d112      	bne.n	c76c <_strtoull_l.constprop.0+0x124>
    c746:	9b01      	ldr	r3, [sp, #4]
    c748:	f8c3 b000 	str.w	fp, [r3]
    c74c:	b005      	add	sp, #20
    c74e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c752:	4293      	cmp	r3, r2
    c754:	ddbe      	ble.n	c6d4 <_strtoull_l.constprop.0+0x8c>
    c756:	f04f 3cff 	mov.w	ip, #4294967295
    c75a:	e7c7      	b.n	c6ec <_strtoull_l.constprop.0+0xa4>
    c75c:	9a03      	ldr	r2, [sp, #12]
    c75e:	2322      	movs	r3, #34	; 0x22
    c760:	6013      	str	r3, [r2, #0]
    c762:	9b01      	ldr	r3, [sp, #4]
    c764:	4660      	mov	r0, ip
    c766:	4661      	mov	r1, ip
    c768:	2b00      	cmp	r3, #0
    c76a:	d0ef      	beq.n	c74c <_strtoull_l.constprop.0+0x104>
    c76c:	f105 3bff 	add.w	fp, r5, #4294967295
    c770:	e7e9      	b.n	c746 <_strtoull_l.constprop.0+0xfe>
    c772:	2301      	movs	r3, #1
    c774:	782c      	ldrb	r4, [r5, #0]
    c776:	9302      	str	r3, [sp, #8]
    c778:	1c8d      	adds	r5, r1, #2
    c77a:	e77e      	b.n	c67a <_strtoull_l.constprop.0+0x32>
    c77c:	2c30      	cmp	r4, #48	; 0x30
    c77e:	d123      	bne.n	c7c8 <_strtoull_l.constprop.0+0x180>
    c780:	782b      	ldrb	r3, [r5, #0]
    c782:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    c786:	2b58      	cmp	r3, #88	; 0x58
    c788:	d11b      	bne.n	c7c2 <_strtoull_l.constprop.0+0x17a>
    c78a:	f04f 0910 	mov.w	r9, #16
    c78e:	786c      	ldrb	r4, [r5, #1]
    c790:	220f      	movs	r2, #15
    c792:	3502      	adds	r5, #2
    c794:	f04f 37ff 	mov.w	r7, #4294967295
    c798:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
    c79c:	f04f 0a00 	mov.w	sl, #0
    c7a0:	464e      	mov	r6, r9
    c7a2:	e78e      	b.n	c6c2 <_strtoull_l.constprop.0+0x7a>
    c7a4:	782b      	ldrb	r3, [r5, #0]
    c7a6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    c7aa:	2b58      	cmp	r3, #88	; 0x58
    c7ac:	d0ed      	beq.n	c78a <_strtoull_l.constprop.0+0x142>
    c7ae:	f04f 0908 	mov.w	r9, #8
    c7b2:	46b2      	mov	sl, r6
    c7b4:	2207      	movs	r2, #7
    c7b6:	f04f 37ff 	mov.w	r7, #4294967295
    c7ba:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
    c7be:	464e      	mov	r6, r9
    c7c0:	e77f      	b.n	c6c2 <_strtoull_l.constprop.0+0x7a>
    c7c2:	f04f 0a00 	mov.w	sl, #0
    c7c6:	e75d      	b.n	c684 <_strtoull_l.constprop.0+0x3c>
    c7c8:	220f      	movs	r2, #15
    c7ca:	f04f 37ff 	mov.w	r7, #4294967295
    c7ce:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
    c7d2:	46b1      	mov	r9, r6
    c7d4:	f04f 0a00 	mov.w	sl, #0
    c7d8:	e773      	b.n	c6c2 <_strtoull_l.constprop.0+0x7a>
    c7da:	bf00      	nop
    c7dc:	2000072d 	.word	0x2000072d
    c7e0:	19999999 	.word	0x19999999

0000c7e4 <_strtoull_r>:
    c7e4:	f7ff bf30 	b.w	c648 <_strtoull_l.constprop.0>

0000c7e8 <_mbrtowc_r>:
    c7e8:	b570      	push	{r4, r5, r6, lr}
    c7ea:	b082      	sub	sp, #8
    c7ec:	4604      	mov	r4, r0
    c7ee:	9d06      	ldr	r5, [sp, #24]
    c7f0:	b155      	cbz	r5, c808 <_mbrtowc_r+0x20>
    c7f2:	b16a      	cbz	r2, c810 <_mbrtowc_r+0x28>
    c7f4:	480f      	ldr	r0, [pc, #60]	; (c834 <_mbrtowc_r+0x4c>)
    c7f6:	9500      	str	r5, [sp, #0]
    c7f8:	f8d0 60e4 	ldr.w	r6, [r0, #228]	; 0xe4
    c7fc:	4620      	mov	r0, r4
    c7fe:	47b0      	blx	r6
    c800:	1c43      	adds	r3, r0, #1
    c802:	d010      	beq.n	c826 <_mbrtowc_r+0x3e>
    c804:	b002      	add	sp, #8
    c806:	bd70      	pop	{r4, r5, r6, pc}
    c808:	f100 05f4 	add.w	r5, r0, #244	; 0xf4
    c80c:	2a00      	cmp	r2, #0
    c80e:	d1f1      	bne.n	c7f4 <_mbrtowc_r+0xc>
    c810:	4b08      	ldr	r3, [pc, #32]	; (c834 <_mbrtowc_r+0x4c>)
    c812:	9500      	str	r5, [sp, #0]
    c814:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
    c818:	4611      	mov	r1, r2
    c81a:	2301      	movs	r3, #1
    c81c:	4a06      	ldr	r2, [pc, #24]	; (c838 <_mbrtowc_r+0x50>)
    c81e:	4620      	mov	r0, r4
    c820:	47b0      	blx	r6
    c822:	1c43      	adds	r3, r0, #1
    c824:	d1ee      	bne.n	c804 <_mbrtowc_r+0x1c>
    c826:	2200      	movs	r2, #0
    c828:	238a      	movs	r3, #138	; 0x8a
    c82a:	602a      	str	r2, [r5, #0]
    c82c:	6023      	str	r3, [r4, #0]
    c82e:	b002      	add	sp, #8
    c830:	bd70      	pop	{r4, r5, r6, pc}
    c832:	bf00      	nop
    c834:	20007c70 	.word	0x20007c70
    c838:	200077d4 	.word	0x200077d4

0000c83c <_wcrtomb_r>:
    c83c:	b570      	push	{r4, r5, r6, lr}
    c83e:	4605      	mov	r5, r0
    c840:	b084      	sub	sp, #16
    c842:	b15b      	cbz	r3, c85c <_wcrtomb_r+0x20>
    c844:	461c      	mov	r4, r3
    c846:	b169      	cbz	r1, c864 <_wcrtomb_r+0x28>
    c848:	4b0e      	ldr	r3, [pc, #56]	; (c884 <_wcrtomb_r+0x48>)
    c84a:	4628      	mov	r0, r5
    c84c:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
    c850:	4623      	mov	r3, r4
    c852:	47b0      	blx	r6
    c854:	1c43      	adds	r3, r0, #1
    c856:	d00f      	beq.n	c878 <_wcrtomb_r+0x3c>
    c858:	b004      	add	sp, #16
    c85a:	bd70      	pop	{r4, r5, r6, pc}
    c85c:	f500 7482 	add.w	r4, r0, #260	; 0x104
    c860:	2900      	cmp	r1, #0
    c862:	d1f1      	bne.n	c848 <_wcrtomb_r+0xc>
    c864:	4a07      	ldr	r2, [pc, #28]	; (c884 <_wcrtomb_r+0x48>)
    c866:	4623      	mov	r3, r4
    c868:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
    c86c:	4628      	mov	r0, r5
    c86e:	460a      	mov	r2, r1
    c870:	a901      	add	r1, sp, #4
    c872:	47b0      	blx	r6
    c874:	1c43      	adds	r3, r0, #1
    c876:	d1ef      	bne.n	c858 <_wcrtomb_r+0x1c>
    c878:	2200      	movs	r2, #0
    c87a:	238a      	movs	r3, #138	; 0x8a
    c87c:	6022      	str	r2, [r4, #0]
    c87e:	602b      	str	r3, [r5, #0]
    c880:	b004      	add	sp, #16
    c882:	bd70      	pop	{r4, r5, r6, pc}
    c884:	20007c70 	.word	0x20007c70

0000c888 <_wcsrtombs_r>:
    c888:	b510      	push	{r4, lr}
    c88a:	b082      	sub	sp, #8
    c88c:	9c04      	ldr	r4, [sp, #16]
    c88e:	e9cd 3400 	strd	r3, r4, [sp]
    c892:	f04f 33ff 	mov.w	r3, #4294967295
    c896:	f001 fd9f 	bl	e3d8 <_wcsnrtombs_r>
    c89a:	b002      	add	sp, #8
    c89c:	bd10      	pop	{r4, pc}
    c89e:	bf00      	nop

0000c8a0 <iswspace>:
    c8a0:	2100      	movs	r1, #0
    c8a2:	f000 b801 	b.w	c8a8 <iswspace_l>
    c8a6:	bf00      	nop

0000c8a8 <iswspace_l>:
    c8a8:	b510      	push	{r4, lr}
    c8aa:	f000 f8ab 	bl	ca04 <_jp2uc_l>
    c8ae:	4604      	mov	r4, r0
    c8b0:	f001 fda4 	bl	e3fc <category>
    c8b4:	f1a0 031a 	sub.w	r3, r0, #26
    c8b8:	b2db      	uxtb	r3, r3
    c8ba:	2b02      	cmp	r3, #2
    c8bc:	d906      	bls.n	c8cc <iswspace_l+0x24>
    c8be:	f1a4 0009 	sub.w	r0, r4, #9
    c8c2:	2804      	cmp	r0, #4
    c8c4:	bf8c      	ite	hi
    c8c6:	2000      	movhi	r0, #0
    c8c8:	2001      	movls	r0, #1
    c8ca:	bd10      	pop	{r4, pc}
    c8cc:	2001      	movs	r0, #1
    c8ce:	bd10      	pop	{r4, pc}

0000c8d0 <__jp2uc>:
    c8d0:	2902      	cmp	r1, #2
    c8d2:	d032      	beq.n	c93a <__jp2uc+0x6a>
    c8d4:	2903      	cmp	r1, #3
    c8d6:	f3c0 2307 	ubfx	r3, r0, #8, #8
    c8da:	bf1d      	ittte	ne
    c8dc:	f1a0 0280 	subne.w	r2, r0, #128	; 0x80
    c8e0:	f083 0380 	eorne.w	r3, r3, #128	; 0x80
    c8e4:	b2d2      	uxtbne	r2, r2
    c8e6:	b2c2      	uxtbeq	r2, r0
    c8e8:	f103 0150 	add.w	r1, r3, #80	; 0x50
    c8ec:	b2c9      	uxtb	r1, r1
    c8ee:	291f      	cmp	r1, #31
    c8f0:	d806      	bhi.n	c900 <__jp2uc+0x30>
    c8f2:	f64c 71d3 	movw	r1, #53203	; 0xcfd3
    c8f6:	4288      	cmp	r0, r1
    c8f8:	d969      	bls.n	c9ce <__jp2uc+0xfe>
    c8fa:	f04f 30ff 	mov.w	r0, #4294967295
    c8fe:	4770      	bx	lr
    c900:	f103 0130 	add.w	r1, r3, #48	; 0x30
    c904:	b2c9      	uxtb	r1, r1
    c906:	2924      	cmp	r1, #36	; 0x24
    c908:	d80e      	bhi.n	c928 <__jp2uc+0x58>
    c90a:	f24f 41a6 	movw	r1, #62630	; 0xf4a6
    c90e:	4288      	cmp	r0, r1
    c910:	d8f3      	bhi.n	c8fa <__jp2uc+0x2a>
    c912:	3bd0      	subs	r3, #208	; 0xd0
    c914:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
    c918:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
    c91c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    c920:	4a30      	ldr	r2, [pc, #192]	; (c9e4 <__jp2uc+0x114>)
    c922:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
    c926:	4770      	bx	lr
    c928:	3ba1      	subs	r3, #161	; 0xa1
    c92a:	2b07      	cmp	r3, #7
    c92c:	d8e5      	bhi.n	c8fa <__jp2uc+0x2a>
    c92e:	e8df f003 	tbb	[pc, r3]
    c932:	3e48      	.short	0x3e48
    c934:	25292e34 	.word	0x25292e34
    c938:	1921      	.short	0x1921
    c93a:	b2c2      	uxtb	r2, r0
    c93c:	2a9e      	cmp	r2, #158	; 0x9e
    c93e:	f3c0 2107 	ubfx	r1, r0, #8, #8
    c942:	d90b      	bls.n	c95c <__jp2uc+0x8c>
    c944:	3223      	adds	r2, #35	; 0x23
    c946:	b2d2      	uxtb	r2, r2
    c948:	2380      	movs	r3, #128	; 0x80
    c94a:	299f      	cmp	r1, #159	; 0x9f
    c94c:	bf94      	ite	ls
    c94e:	3970      	subls	r1, #112	; 0x70
    c950:	3150      	addhi	r1, #80	; 0x50
    c952:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    c956:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    c95a:	e7c5      	b.n	c8e8 <__jp2uc+0x18>
    c95c:	3a7e      	subs	r2, #126	; 0x7e
    c95e:	b2d2      	uxtb	r2, r2
    c960:	237f      	movs	r3, #127	; 0x7f
    c962:	e7f2      	b.n	c94a <__jp2uc+0x7a>
    c964:	2ac0      	cmp	r2, #192	; 0xc0
    c966:	d8c8      	bhi.n	c8fa <__jp2uc+0x2a>
    c968:	4b1f      	ldr	r3, [pc, #124]	; (c9e8 <__jp2uc+0x118>)
    c96a:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
    c96e:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    c972:	4770      	bx	lr
    c974:	2af1      	cmp	r2, #241	; 0xf1
    c976:	d8c0      	bhi.n	c8fa <__jp2uc+0x2a>
    c978:	4b1c      	ldr	r3, [pc, #112]	; (c9ec <__jp2uc+0x11c>)
    c97a:	e019      	b.n	c9b0 <__jp2uc+0xe0>
    c97c:	2ad8      	cmp	r2, #216	; 0xd8
    c97e:	d8bc      	bhi.n	c8fa <__jp2uc+0x2a>
    c980:	4b1b      	ldr	r3, [pc, #108]	; (c9f0 <__jp2uc+0x120>)
    c982:	e015      	b.n	c9b0 <__jp2uc+0xe0>
    c984:	2af6      	cmp	r2, #246	; 0xf6
    c986:	d8b8      	bhi.n	c8fa <__jp2uc+0x2a>
    c988:	f502 5040 	add.w	r0, r2, #12288	; 0x3000
    c98c:	4770      	bx	lr
    c98e:	2af3      	cmp	r2, #243	; 0xf3
    c990:	d8b3      	bhi.n	c8fa <__jp2uc+0x2a>
    c992:	f502 503e 	add.w	r0, r2, #12160	; 0x2f80
    c996:	3020      	adds	r0, #32
    c998:	4770      	bx	lr
    c99a:	4b16      	ldr	r3, [pc, #88]	; (c9f4 <__jp2uc+0x124>)
    c99c:	4413      	add	r3, r2
    c99e:	f813 3ca1 	ldrb.w	r3, [r3, #-161]
    c9a2:	2b00      	cmp	r3, #0
    c9a4:	d0a9      	beq.n	c8fa <__jp2uc+0x2a>
    c9a6:	f502 407e 	add.w	r0, r2, #65024	; 0xfe00
    c9aa:	3060      	adds	r0, #96	; 0x60
    c9ac:	4770      	bx	lr
    c9ae:	4b12      	ldr	r3, [pc, #72]	; (c9f8 <__jp2uc+0x128>)
    c9b0:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
    c9b4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    c9b8:	2800      	cmp	r0, #0
    c9ba:	bf08      	it	eq
    c9bc:	f04f 30ff 	moveq.w	r0, #4294967295
    c9c0:	4770      	bx	lr
    c9c2:	4b0e      	ldr	r3, [pc, #56]	; (c9fc <__jp2uc+0x12c>)
    c9c4:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
    c9c8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    c9cc:	4770      	bx	lr
    c9ce:	3bb0      	subs	r3, #176	; 0xb0
    c9d0:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
    c9d4:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
    c9d8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    c9dc:	4a08      	ldr	r2, [pc, #32]	; (ca00 <__jp2uc+0x130>)
    c9de:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
    c9e2:	4770      	bx	lr
    c9e4:	200058d4 	.word	0x200058d4
    c9e8:	20000bf0 	.word	0x20000bf0
    c9ec:	20000b4c 	.word	0x20000b4c
    c9f0:	20000adc 	.word	0x20000adc
    c9f4:	20000a80 	.word	0x20000a80
    c9f8:	200009c4 	.word	0x200009c4
    c9fc:	20000908 	.word	0x20000908
    ca00:	20000c30 	.word	0x20000c30

0000ca04 <_jp2uc_l>:
    ca04:	b538      	push	{r3, r4, r5, lr}
    ca06:	4605      	mov	r5, r0
    ca08:	b1b9      	cbz	r1, ca3a <_jp2uc_l+0x36>
    ca0a:	f501 7495 	add.w	r4, r1, #298	; 0x12a
    ca0e:	4912      	ldr	r1, [pc, #72]	; (ca58 <_jp2uc_l+0x54>)
    ca10:	4620      	mov	r0, r4
    ca12:	f7f9 fbd9 	bl	61c8 <strcmp>
    ca16:	b928      	cbnz	r0, ca24 <_jp2uc_l+0x20>
    ca18:	4628      	mov	r0, r5
    ca1a:	2101      	movs	r1, #1
    ca1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ca20:	f7ff bf56 	b.w	c8d0 <__jp2uc>
    ca24:	490d      	ldr	r1, [pc, #52]	; (ca5c <_jp2uc_l+0x58>)
    ca26:	4620      	mov	r0, r4
    ca28:	f7f9 fbce 	bl	61c8 <strcmp>
    ca2c:	b938      	cbnz	r0, ca3e <_jp2uc_l+0x3a>
    ca2e:	4628      	mov	r0, r5
    ca30:	2102      	movs	r1, #2
    ca32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ca36:	f7ff bf4b 	b.w	c8d0 <__jp2uc>
    ca3a:	4c09      	ldr	r4, [pc, #36]	; (ca60 <_jp2uc_l+0x5c>)
    ca3c:	e7e7      	b.n	ca0e <_jp2uc_l+0xa>
    ca3e:	4909      	ldr	r1, [pc, #36]	; (ca64 <_jp2uc_l+0x60>)
    ca40:	4620      	mov	r0, r4
    ca42:	f7f9 fbc1 	bl	61c8 <strcmp>
    ca46:	b928      	cbnz	r0, ca54 <_jp2uc_l+0x50>
    ca48:	4628      	mov	r0, r5
    ca4a:	2103      	movs	r1, #3
    ca4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ca50:	f7ff bf3e 	b.w	c8d0 <__jp2uc>
    ca54:	4628      	mov	r0, r5
    ca56:	bd38      	pop	{r3, r4, r5, pc}
    ca58:	2000089c 	.word	0x2000089c
    ca5c:	200008a0 	.word	0x200008a0
    ca60:	20007d9a 	.word	0x20007d9a
    ca64:	200008a8 	.word	0x200008a8

0000ca68 <fiprintf>:
    ca68:	b40e      	push	{r1, r2, r3}
    ca6a:	b510      	push	{r4, lr}
    ca6c:	b083      	sub	sp, #12
    ca6e:	ab05      	add	r3, sp, #20
    ca70:	4c06      	ldr	r4, [pc, #24]	; (ca8c <fiprintf+0x24>)
    ca72:	f853 2b04 	ldr.w	r2, [r3], #4
    ca76:	9301      	str	r3, [sp, #4]
    ca78:	4601      	mov	r1, r0
    ca7a:	6820      	ldr	r0, [r4, #0]
    ca7c:	f000 f97c 	bl	cd78 <_vfiprintf_r>
    ca80:	b003      	add	sp, #12
    ca82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ca86:	b003      	add	sp, #12
    ca88:	4770      	bx	lr
    ca8a:	bf00      	nop
    ca8c:	200081f8 	.word	0x200081f8

0000ca90 <__ssprint_r>:
    ca90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ca94:	6893      	ldr	r3, [r2, #8]
    ca96:	6817      	ldr	r7, [r2, #0]
    ca98:	b083      	sub	sp, #12
    ca9a:	4692      	mov	sl, r2
    ca9c:	2b00      	cmp	r3, #0
    ca9e:	d070      	beq.n	cb82 <__ssprint_r+0xf2>
    caa0:	4681      	mov	r9, r0
    caa2:	688a      	ldr	r2, [r1, #8]
    caa4:	6808      	ldr	r0, [r1, #0]
    caa6:	460c      	mov	r4, r1
    caa8:	3708      	adds	r7, #8
    caaa:	e043      	b.n	cb34 <__ssprint_r+0xa4>
    caac:	89a3      	ldrh	r3, [r4, #12]
    caae:	f413 6f90 	tst.w	r3, #1152	; 0x480
    cab2:	d02e      	beq.n	cb12 <__ssprint_r+0x82>
    cab4:	e9d4 1604 	ldrd	r1, r6, [r4, #16]
    cab8:	eba0 0801 	sub.w	r8, r0, r1
    cabc:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    cac0:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
    cac4:	f108 0001 	add.w	r0, r8, #1
    cac8:	1076      	asrs	r6, r6, #1
    caca:	4428      	add	r0, r5
    cacc:	42b0      	cmp	r0, r6
    cace:	4632      	mov	r2, r6
    cad0:	bf84      	itt	hi
    cad2:	4606      	movhi	r6, r0
    cad4:	4632      	movhi	r2, r6
    cad6:	055b      	lsls	r3, r3, #21
    cad8:	d537      	bpl.n	cb4a <__ssprint_r+0xba>
    cada:	4611      	mov	r1, r2
    cadc:	4648      	mov	r0, r9
    cade:	f7f7 fa79 	bl	3fd4 <_malloc_r>
    cae2:	9001      	str	r0, [sp, #4]
    cae4:	2800      	cmp	r0, #0
    cae6:	d03a      	beq.n	cb5e <__ssprint_r+0xce>
    cae8:	4642      	mov	r2, r8
    caea:	6921      	ldr	r1, [r4, #16]
    caec:	f7f5 fb46 	bl	217c <memcpy>
    caf0:	89a2      	ldrh	r2, [r4, #12]
    caf2:	9b01      	ldr	r3, [sp, #4]
    caf4:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
    caf8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    cafc:	81a2      	strh	r2, [r4, #12]
    cafe:	eba6 0208 	sub.w	r2, r6, r8
    cb02:	eb03 0008 	add.w	r0, r3, r8
    cb06:	6166      	str	r6, [r4, #20]
    cb08:	60a2      	str	r2, [r4, #8]
    cb0a:	6123      	str	r3, [r4, #16]
    cb0c:	6020      	str	r0, [r4, #0]
    cb0e:	462e      	mov	r6, r5
    cb10:	46a8      	mov	r8, r5
    cb12:	4642      	mov	r2, r8
    cb14:	4659      	mov	r1, fp
    cb16:	f7f9 f903 	bl	5d20 <memmove>
    cb1a:	f8da 3008 	ldr.w	r3, [sl, #8]
    cb1e:	68a2      	ldr	r2, [r4, #8]
    cb20:	6820      	ldr	r0, [r4, #0]
    cb22:	1b92      	subs	r2, r2, r6
    cb24:	4440      	add	r0, r8
    cb26:	1b5b      	subs	r3, r3, r5
    cb28:	60a2      	str	r2, [r4, #8]
    cb2a:	6020      	str	r0, [r4, #0]
    cb2c:	f8ca 3008 	str.w	r3, [sl, #8]
    cb30:	b33b      	cbz	r3, cb82 <__ssprint_r+0xf2>
    cb32:	3708      	adds	r7, #8
    cb34:	e957 b502 	ldrd	fp, r5, [r7, #-8]
    cb38:	2d00      	cmp	r5, #0
    cb3a:	d0fa      	beq.n	cb32 <__ssprint_r+0xa2>
    cb3c:	42aa      	cmp	r2, r5
    cb3e:	4616      	mov	r6, r2
    cb40:	4690      	mov	r8, r2
    cb42:	d9b3      	bls.n	caac <__ssprint_r+0x1c>
    cb44:	462e      	mov	r6, r5
    cb46:	46a8      	mov	r8, r5
    cb48:	e7e3      	b.n	cb12 <__ssprint_r+0x82>
    cb4a:	4648      	mov	r0, r9
    cb4c:	f7f7 fd0a 	bl	4564 <_realloc_r>
    cb50:	4603      	mov	r3, r0
    cb52:	2800      	cmp	r0, #0
    cb54:	d1d3      	bne.n	cafe <__ssprint_r+0x6e>
    cb56:	6921      	ldr	r1, [r4, #16]
    cb58:	4648      	mov	r0, r9
    cb5a:	f7f9 fe23 	bl	67a4 <_free_r>
    cb5e:	89a3      	ldrh	r3, [r4, #12]
    cb60:	220c      	movs	r2, #12
    cb62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    cb66:	f8c9 2000 	str.w	r2, [r9]
    cb6a:	f04f 30ff 	mov.w	r0, #4294967295
    cb6e:	81a3      	strh	r3, [r4, #12]
    cb70:	2200      	movs	r2, #0
    cb72:	2300      	movs	r3, #0
    cb74:	f8ca 2008 	str.w	r2, [sl, #8]
    cb78:	f8ca 3004 	str.w	r3, [sl, #4]
    cb7c:	b003      	add	sp, #12
    cb7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cb82:	2000      	movs	r0, #0
    cb84:	2300      	movs	r3, #0
    cb86:	f8ca 3004 	str.w	r3, [sl, #4]
    cb8a:	b003      	add	sp, #12
    cb8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000cb90 <_sungetc_r>:
    cb90:	b538      	push	{r3, r4, r5, lr}
    cb92:	1c4b      	adds	r3, r1, #1
    cb94:	d01a      	beq.n	cbcc <_sungetc_r+0x3c>
    cb96:	8993      	ldrh	r3, [r2, #12]
    cb98:	4614      	mov	r4, r2
    cb9a:	6b12      	ldr	r2, [r2, #48]	; 0x30
    cb9c:	f023 0320 	bic.w	r3, r3, #32
    cba0:	81a3      	strh	r3, [r4, #12]
    cba2:	b2cd      	uxtb	r5, r1
    cba4:	b1aa      	cbz	r2, cbd2 <_sungetc_r+0x42>
    cba6:	6862      	ldr	r2, [r4, #4]
    cba8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    cbaa:	429a      	cmp	r2, r3
    cbac:	da09      	bge.n	cbc2 <_sungetc_r+0x32>
    cbae:	6823      	ldr	r3, [r4, #0]
    cbb0:	1e5a      	subs	r2, r3, #1
    cbb2:	6022      	str	r2, [r4, #0]
    cbb4:	f803 5c01 	strb.w	r5, [r3, #-1]
    cbb8:	6863      	ldr	r3, [r4, #4]
    cbba:	3301      	adds	r3, #1
    cbbc:	6063      	str	r3, [r4, #4]
    cbbe:	4628      	mov	r0, r5
    cbc0:	bd38      	pop	{r3, r4, r5, pc}
    cbc2:	4621      	mov	r1, r4
    cbc4:	f001 fa58 	bl	e078 <__submore>
    cbc8:	2800      	cmp	r0, #0
    cbca:	d0f0      	beq.n	cbae <_sungetc_r+0x1e>
    cbcc:	f04f 35ff 	mov.w	r5, #4294967295
    cbd0:	e7f5      	b.n	cbbe <_sungetc_r+0x2e>
    cbd2:	6923      	ldr	r3, [r4, #16]
    cbd4:	6822      	ldr	r2, [r4, #0]
    cbd6:	b12b      	cbz	r3, cbe4 <_sungetc_r+0x54>
    cbd8:	4293      	cmp	r3, r2
    cbda:	d203      	bcs.n	cbe4 <_sungetc_r+0x54>
    cbdc:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    cbe0:	42ab      	cmp	r3, r5
    cbe2:	d00f      	beq.n	cc04 <_sungetc_r+0x74>
    cbe4:	6861      	ldr	r1, [r4, #4]
    cbe6:	63e1      	str	r1, [r4, #60]	; 0x3c
    cbe8:	4623      	mov	r3, r4
    cbea:	63a2      	str	r2, [r4, #56]	; 0x38
    cbec:	f104 0140 	add.w	r1, r4, #64	; 0x40
    cbf0:	2203      	movs	r2, #3
    cbf2:	6362      	str	r2, [r4, #52]	; 0x34
    cbf4:	6321      	str	r1, [r4, #48]	; 0x30
    cbf6:	f803 5f42 	strb.w	r5, [r3, #66]!
    cbfa:	2201      	movs	r2, #1
    cbfc:	e9c4 3200 	strd	r3, r2, [r4]
    cc00:	4628      	mov	r0, r5
    cc02:	bd38      	pop	{r3, r4, r5, pc}
    cc04:	6863      	ldr	r3, [r4, #4]
    cc06:	3a01      	subs	r2, #1
    cc08:	3301      	adds	r3, #1
    cc0a:	e9c4 2300 	strd	r2, r3, [r4]
    cc0e:	e7d6      	b.n	cbbe <_sungetc_r+0x2e>

0000cc10 <__ssrefill_r>:
    cc10:	b510      	push	{r4, lr}
    cc12:	460c      	mov	r4, r1
    cc14:	6b09      	ldr	r1, [r1, #48]	; 0x30
    cc16:	b169      	cbz	r1, cc34 <__ssrefill_r+0x24>
    cc18:	f104 0340 	add.w	r3, r4, #64	; 0x40
    cc1c:	4299      	cmp	r1, r3
    cc1e:	d001      	beq.n	cc24 <__ssrefill_r+0x14>
    cc20:	f7f9 fdc0 	bl	67a4 <_free_r>
    cc24:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    cc26:	6063      	str	r3, [r4, #4]
    cc28:	2000      	movs	r0, #0
    cc2a:	6320      	str	r0, [r4, #48]	; 0x30
    cc2c:	b113      	cbz	r3, cc34 <__ssrefill_r+0x24>
    cc2e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    cc30:	6023      	str	r3, [r4, #0]
    cc32:	bd10      	pop	{r4, pc}
    cc34:	89a3      	ldrh	r3, [r4, #12]
    cc36:	6921      	ldr	r1, [r4, #16]
    cc38:	2200      	movs	r2, #0
    cc3a:	f043 0320 	orr.w	r3, r3, #32
    cc3e:	e9c4 1200 	strd	r1, r2, [r4]
    cc42:	81a3      	strh	r3, [r4, #12]
    cc44:	f04f 30ff 	mov.w	r0, #4294967295
    cc48:	bd10      	pop	{r4, pc}
    cc4a:	bf00      	nop

0000cc4c <_sfread_r>:
    cc4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cc50:	b085      	sub	sp, #20
    cc52:	e9cd 3202 	strd	r3, r2, [sp, #8]
    cc56:	fb02 f303 	mul.w	r3, r2, r3
    cc5a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    cc5c:	9301      	str	r3, [sp, #4]
    cc5e:	b3a3      	cbz	r3, ccca <_sfread_r+0x7e>
    cc60:	f8d4 a004 	ldr.w	sl, [r4, #4]
    cc64:	9b01      	ldr	r3, [sp, #4]
    cc66:	4553      	cmp	r3, sl
    cc68:	468b      	mov	fp, r1
    cc6a:	d946      	bls.n	ccfa <_sfread_r+0xae>
    cc6c:	46a0      	mov	r8, r4
    cc6e:	9d01      	ldr	r5, [sp, #4]
    cc70:	f858 1b40 	ldr.w	r1, [r8], #64
    cc74:	4607      	mov	r7, r0
    cc76:	2600      	movs	r6, #0
    cc78:	4652      	mov	r2, sl
    cc7a:	4658      	mov	r0, fp
    cc7c:	f7f5 fa7e 	bl	217c <memcpy>
    cc80:	6823      	ldr	r3, [r4, #0]
    cc82:	6b22      	ldr	r2, [r4, #48]	; 0x30
    cc84:	4453      	add	r3, sl
    cc86:	46a9      	mov	r9, r5
    cc88:	e9c4 3600 	strd	r3, r6, [r4]
    cc8c:	4611      	mov	r1, r2
    cc8e:	4638      	mov	r0, r7
    cc90:	44d3      	add	fp, sl
    cc92:	eba5 050a 	sub.w	r5, r5, sl
    cc96:	b1e2      	cbz	r2, ccd2 <_sfread_r+0x86>
    cc98:	4542      	cmp	r2, r8
    cc9a:	d001      	beq.n	cca0 <_sfread_r+0x54>
    cc9c:	f7f9 fd82 	bl	67a4 <_free_r>
    cca0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    cca2:	6326      	str	r6, [r4, #48]	; 0x30
    cca4:	6063      	str	r3, [r4, #4]
    cca6:	b1a3      	cbz	r3, ccd2 <_sfread_r+0x86>
    cca8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    ccaa:	6021      	str	r1, [r4, #0]
    ccac:	42ab      	cmp	r3, r5
    ccae:	469a      	mov	sl, r3
    ccb0:	d3e2      	bcc.n	cc78 <_sfread_r+0x2c>
    ccb2:	9b02      	ldr	r3, [sp, #8]
    ccb4:	9301      	str	r3, [sp, #4]
    ccb6:	462a      	mov	r2, r5
    ccb8:	4658      	mov	r0, fp
    ccba:	f7f5 fa5f 	bl	217c <memcpy>
    ccbe:	e9d4 3200 	ldrd	r3, r2, [r4]
    ccc2:	1b52      	subs	r2, r2, r5
    ccc4:	442b      	add	r3, r5
    ccc6:	e9c4 3200 	strd	r3, r2, [r4]
    ccca:	9801      	ldr	r0, [sp, #4]
    cccc:	b005      	add	sp, #20
    ccce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ccd2:	9a01      	ldr	r2, [sp, #4]
    ccd4:	9b03      	ldr	r3, [sp, #12]
    ccd6:	4452      	add	r2, sl
    ccd8:	eba2 0209 	sub.w	r2, r2, r9
    ccdc:	fbb2 f3f3 	udiv	r3, r2, r3
    cce0:	9301      	str	r3, [sp, #4]
    cce2:	89a3      	ldrh	r3, [r4, #12]
    cce4:	6922      	ldr	r2, [r4, #16]
    cce6:	9801      	ldr	r0, [sp, #4]
    cce8:	f043 0320 	orr.w	r3, r3, #32
    ccec:	81a3      	strh	r3, [r4, #12]
    ccee:	2300      	movs	r3, #0
    ccf0:	e9c4 2300 	strd	r2, r3, [r4]
    ccf4:	b005      	add	sp, #20
    ccf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ccfa:	6821      	ldr	r1, [r4, #0]
    ccfc:	461d      	mov	r5, r3
    ccfe:	e7d8      	b.n	ccb2 <_sfread_r+0x66>

0000cd00 <__sprint_r.part.0>:
    cd00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cd04:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    cd06:	049c      	lsls	r4, r3, #18
    cd08:	4690      	mov	r8, r2
    cd0a:	d52d      	bpl.n	cd68 <__sprint_r.part.0+0x68>
    cd0c:	6893      	ldr	r3, [r2, #8]
    cd0e:	6812      	ldr	r2, [r2, #0]
    cd10:	b343      	cbz	r3, cd64 <__sprint_r.part.0+0x64>
    cd12:	468b      	mov	fp, r1
    cd14:	4606      	mov	r6, r0
    cd16:	f102 0908 	add.w	r9, r2, #8
    cd1a:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
    cd1e:	ea5f 079a 	movs.w	r7, sl, lsr #2
    cd22:	d015      	beq.n	cd50 <__sprint_r.part.0+0x50>
    cd24:	3d04      	subs	r5, #4
    cd26:	2400      	movs	r4, #0
    cd28:	e001      	b.n	cd2e <__sprint_r.part.0+0x2e>
    cd2a:	42a7      	cmp	r7, r4
    cd2c:	d00e      	beq.n	cd4c <__sprint_r.part.0+0x4c>
    cd2e:	f855 1f04 	ldr.w	r1, [r5, #4]!
    cd32:	465a      	mov	r2, fp
    cd34:	4630      	mov	r0, r6
    cd36:	f001 fa97 	bl	e268 <_fputwc_r>
    cd3a:	1c43      	adds	r3, r0, #1
    cd3c:	f104 0401 	add.w	r4, r4, #1
    cd40:	d1f3      	bne.n	cd2a <__sprint_r.part.0+0x2a>
    cd42:	2300      	movs	r3, #0
    cd44:	e9c8 3301 	strd	r3, r3, [r8, #4]
    cd48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cd4c:	f8d8 3008 	ldr.w	r3, [r8, #8]
    cd50:	f02a 0a03 	bic.w	sl, sl, #3
    cd54:	eba3 030a 	sub.w	r3, r3, sl
    cd58:	f8c8 3008 	str.w	r3, [r8, #8]
    cd5c:	f109 0908 	add.w	r9, r9, #8
    cd60:	2b00      	cmp	r3, #0
    cd62:	d1da      	bne.n	cd1a <__sprint_r.part.0+0x1a>
    cd64:	2000      	movs	r0, #0
    cd66:	e7ec      	b.n	cd42 <__sprint_r.part.0+0x42>
    cd68:	f001 f80c 	bl	dd84 <__sfvwrite_r>
    cd6c:	2300      	movs	r3, #0
    cd6e:	e9c8 3301 	strd	r3, r3, [r8, #4]
    cd72:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cd76:	bf00      	nop

0000cd78 <_vfiprintf_r>:
    cd78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cd7c:	ed2d 8b02 	vpush	{d8}
    cd80:	b0c5      	sub	sp, #276	; 0x114
    cd82:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
    cd86:	4683      	mov	fp, r0
    cd88:	ee08 1a10 	vmov	s16, r1
    cd8c:	4616      	mov	r6, r2
    cd8e:	2100      	movs	r1, #0
    cd90:	2208      	movs	r2, #8
    cd92:	4650      	mov	r0, sl
    cd94:	461c      	mov	r4, r3
    cd96:	9307      	str	r3, [sp, #28]
    cd98:	f7f9 f83e 	bl	5e18 <memset>
    cd9c:	f1bb 0f00 	cmp.w	fp, #0
    cda0:	d004      	beq.n	cdac <_vfiprintf_r+0x34>
    cda2:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
    cda6:	2b00      	cmp	r3, #0
    cda8:	f000 86a0 	beq.w	daec <_vfiprintf_r+0xd74>
    cdac:	ee18 2a10 	vmov	r2, s16
    cdb0:	6e53      	ldr	r3, [r2, #100]	; 0x64
    cdb2:	07db      	lsls	r3, r3, #31
    cdb4:	f140 8513 	bpl.w	d7de <_vfiprintf_r+0xa66>
    cdb8:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
    cdbc:	b28a      	uxth	r2, r1
    cdbe:	0495      	lsls	r5, r2, #18
    cdc0:	d40b      	bmi.n	cdda <_vfiprintf_r+0x62>
    cdc2:	ee18 3a10 	vmov	r3, s16
    cdc6:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
    cdca:	8199      	strh	r1, [r3, #12]
    cdcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    cdce:	b28a      	uxth	r2, r1
    cdd0:	ee18 1a10 	vmov	r1, s16
    cdd4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    cdd8:	664b      	str	r3, [r1, #100]	; 0x64
    cdda:	0710      	lsls	r0, r2, #28
    cddc:	f140 8105 	bpl.w	cfea <_vfiprintf_r+0x272>
    cde0:	ee18 3a10 	vmov	r3, s16
    cde4:	691b      	ldr	r3, [r3, #16]
    cde6:	2b00      	cmp	r3, #0
    cde8:	f000 80ff 	beq.w	cfea <_vfiprintf_r+0x272>
    cdec:	f002 031a 	and.w	r3, r2, #26
    cdf0:	2b0a      	cmp	r3, #10
    cdf2:	f000 810a 	beq.w	d00a <_vfiprintf_r+0x292>
    cdf6:	2300      	movs	r3, #0
    cdf8:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
    cdfc:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
    ce00:	aa1b      	add	r2, sp, #108	; 0x6c
    ce02:	930c      	str	r3, [sp, #48]	; 0x30
    ce04:	9218      	str	r2, [sp, #96]	; 0x60
    ce06:	4691      	mov	r9, r2
    ce08:	930b      	str	r3, [sp, #44]	; 0x2c
    ce0a:	9305      	str	r3, [sp, #20]
    ce0c:	46b0      	mov	r8, r6
    ce0e:	4644      	mov	r4, r8
    ce10:	4ba8      	ldr	r3, [pc, #672]	; (d0b4 <_vfiprintf_r+0x33c>)
    ce12:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    ce16:	f7f9 f92f 	bl	6078 <__locale_mb_cur_max>
    ce1a:	4622      	mov	r2, r4
    ce1c:	4603      	mov	r3, r0
    ce1e:	a912      	add	r1, sp, #72	; 0x48
    ce20:	f8cd a000 	str.w	sl, [sp]
    ce24:	4658      	mov	r0, fp
    ce26:	47a8      	blx	r5
    ce28:	2800      	cmp	r0, #0
    ce2a:	f000 8145 	beq.w	d0b8 <_vfiprintf_r+0x340>
    ce2e:	f2c0 8139 	blt.w	d0a4 <_vfiprintf_r+0x32c>
    ce32:	9a12      	ldr	r2, [sp, #72]	; 0x48
    ce34:	2a25      	cmp	r2, #37	; 0x25
    ce36:	4603      	mov	r3, r0
    ce38:	d001      	beq.n	ce3e <_vfiprintf_r+0xc6>
    ce3a:	441c      	add	r4, r3
    ce3c:	e7e8      	b.n	ce10 <_vfiprintf_r+0x98>
    ce3e:	ebb4 0608 	subs.w	r6, r4, r8
    ce42:	4605      	mov	r5, r0
    ce44:	f040 813c 	bne.w	d0c0 <_vfiprintf_r+0x348>
    ce48:	2300      	movs	r3, #0
    ce4a:	7861      	ldrb	r1, [r4, #1]
    ce4c:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    ce50:	f104 0801 	add.w	r8, r4, #1
    ce54:	9306      	str	r3, [sp, #24]
    ce56:	f04f 37ff 	mov.w	r7, #4294967295
    ce5a:	461e      	mov	r6, r3
    ce5c:	242b      	movs	r4, #43	; 0x2b
    ce5e:	f108 0801 	add.w	r8, r8, #1
    ce62:	f1a1 0320 	sub.w	r3, r1, #32
    ce66:	2b5a      	cmp	r3, #90	; 0x5a
    ce68:	f200 8178 	bhi.w	d15c <_vfiprintf_r+0x3e4>
    ce6c:	e8df f013 	tbh	[pc, r3, lsl #1]
    ce70:	017602b5 	.word	0x017602b5
    ce74:	02b00176 	.word	0x02b00176
    ce78:	01760176 	.word	0x01760176
    ce7c:	006a0176 	.word	0x006a0176
    ce80:	01760176 	.word	0x01760176
    ce84:	028d027d 	.word	0x028d027d
    ce88:	02880176 	.word	0x02880176
    ce8c:	01760297 	.word	0x01760297
    ce90:	005b0292 	.word	0x005b0292
    ce94:	005b005b 	.word	0x005b005b
    ce98:	005b005b 	.word	0x005b005b
    ce9c:	005b005b 	.word	0x005b005b
    cea0:	005b005b 	.word	0x005b005b
    cea4:	01760176 	.word	0x01760176
    cea8:	01760176 	.word	0x01760176
    ceac:	01760176 	.word	0x01760176
    ceb0:	01760176 	.word	0x01760176
    ceb4:	025c0176 	.word	0x025c0176
    ceb8:	01760084 	.word	0x01760084
    cebc:	01760176 	.word	0x01760176
    cec0:	01760176 	.word	0x01760176
    cec4:	01760176 	.word	0x01760176
    cec8:	01760176 	.word	0x01760176
    cecc:	00e80176 	.word	0x00e80176
    ced0:	01760176 	.word	0x01760176
    ced4:	02330176 	.word	0x02330176
    ced8:	02da0176 	.word	0x02da0176
    cedc:	01760176 	.word	0x01760176
    cee0:	0176058b 	.word	0x0176058b
    cee4:	01760176 	.word	0x01760176
    cee8:	01760176 	.word	0x01760176
    ceec:	01760176 	.word	0x01760176
    cef0:	01760176 	.word	0x01760176
    cef4:	025c0176 	.word	0x025c0176
    cef8:	01760086 	.word	0x01760086
    cefc:	01760176 	.word	0x01760176
    cf00:	008602cd 	.word	0x008602cd
    cf04:	0176007f 	.word	0x0176007f
    cf08:	017602c0 	.word	0x017602c0
    cf0c:	00ea02fd 	.word	0x00ea02fd
    cf10:	007f02ed 	.word	0x007f02ed
    cf14:	02330176 	.word	0x02330176
    cf18:	0569007c 	.word	0x0569007c
    cf1c:	01760176 	.word	0x01760176
    cf20:	0176056b 	.word	0x0176056b
    cf24:	007c      	.short	0x007c
    cf26:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    cf2a:	2200      	movs	r2, #0
    cf2c:	f818 1b01 	ldrb.w	r1, [r8], #1
    cf30:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    cf34:	eb03 0242 	add.w	r2, r3, r2, lsl #1
    cf38:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    cf3c:	2b09      	cmp	r3, #9
    cf3e:	d9f5      	bls.n	cf2c <_vfiprintf_r+0x1b4>
    cf40:	9206      	str	r2, [sp, #24]
    cf42:	e78e      	b.n	ce62 <_vfiprintf_r+0xea>
    cf44:	4658      	mov	r0, fp
    cf46:	f7fe fa29 	bl	b39c <_localeconv_r>
    cf4a:	6843      	ldr	r3, [r0, #4]
    cf4c:	930d      	str	r3, [sp, #52]	; 0x34
    cf4e:	4618      	mov	r0, r3
    cf50:	f7f9 fb16 	bl	6580 <strlen>
    cf54:	900e      	str	r0, [sp, #56]	; 0x38
    cf56:	4605      	mov	r5, r0
    cf58:	4658      	mov	r0, fp
    cf5a:	f7fe fa1f 	bl	b39c <_localeconv_r>
    cf5e:	6883      	ldr	r3, [r0, #8]
    cf60:	930b      	str	r3, [sp, #44]	; 0x2c
    cf62:	2d00      	cmp	r5, #0
    cf64:	f040 84d6 	bne.w	d914 <_vfiprintf_r+0xb9c>
    cf68:	f898 1000 	ldrb.w	r1, [r8]
    cf6c:	e777      	b.n	ce5e <_vfiprintf_r+0xe6>
    cf6e:	f898 1000 	ldrb.w	r1, [r8]
    cf72:	f046 0620 	orr.w	r6, r6, #32
    cf76:	e772      	b.n	ce5e <_vfiprintf_r+0xe6>
    cf78:	f046 0610 	orr.w	r6, r6, #16
    cf7c:	06b4      	lsls	r4, r6, #26
    cf7e:	f140 818e 	bpl.w	d29e <_vfiprintf_r+0x526>
    cf82:	9b07      	ldr	r3, [sp, #28]
    cf84:	3307      	adds	r3, #7
    cf86:	f023 0307 	bic.w	r3, r3, #7
    cf8a:	461a      	mov	r2, r3
    cf8c:	6859      	ldr	r1, [r3, #4]
    cf8e:	f852 3b08 	ldr.w	r3, [r2], #8
    cf92:	9207      	str	r2, [sp, #28]
    cf94:	460a      	mov	r2, r1
    cf96:	2900      	cmp	r1, #0
    cf98:	f2c0 8470 	blt.w	d87c <_vfiprintf_r+0xb04>
    cf9c:	1c79      	adds	r1, r7, #1
    cf9e:	f000 85a2 	beq.w	dae6 <_vfiprintf_r+0xd6e>
    cfa2:	f026 0180 	bic.w	r1, r6, #128	; 0x80
    cfa6:	9103      	str	r1, [sp, #12]
    cfa8:	ea53 0102 	orrs.w	r1, r3, r2
    cfac:	f000 843f 	beq.w	d82e <_vfiprintf_r+0xab6>
    cfb0:	2b0a      	cmp	r3, #10
    cfb2:	f172 0100 	sbcs.w	r1, r2, #0
    cfb6:	f080 8541 	bcs.w	da3c <_vfiprintf_r+0xcc4>
    cfba:	3330      	adds	r3, #48	; 0x30
    cfbc:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
    cfc0:	9e03      	ldr	r6, [sp, #12]
    cfc2:	2301      	movs	r3, #1
    cfc4:	9304      	str	r3, [sp, #16]
    cfc6:	f20d 140f 	addw	r4, sp, #271	; 0x10f
    cfca:	9b04      	ldr	r3, [sp, #16]
    cfcc:	42bb      	cmp	r3, r7
    cfce:	bfb8      	it	lt
    cfd0:	463b      	movlt	r3, r7
    cfd2:	9303      	str	r3, [sp, #12]
    cfd4:	2300      	movs	r3, #0
    cfd6:	9308      	str	r3, [sp, #32]
    cfd8:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    cfdc:	2b00      	cmp	r3, #0
    cfde:	f000 80cb 	beq.w	d178 <_vfiprintf_r+0x400>
    cfe2:	9b03      	ldr	r3, [sp, #12]
    cfe4:	3301      	adds	r3, #1
    cfe6:	9303      	str	r3, [sp, #12]
    cfe8:	e0c6      	b.n	d178 <_vfiprintf_r+0x400>
    cfea:	ee18 1a10 	vmov	r1, s16
    cfee:	4658      	mov	r0, fp
    cff0:	ee18 5a10 	vmov	r5, s16
    cff4:	f001 f87c 	bl	e0f0 <__swsetup_r>
    cff8:	2800      	cmp	r0, #0
    cffa:	f040 8652 	bne.w	dca2 <_vfiprintf_r+0xf2a>
    cffe:	89aa      	ldrh	r2, [r5, #12]
    d000:	f002 031a 	and.w	r3, r2, #26
    d004:	2b0a      	cmp	r3, #10
    d006:	f47f aef6 	bne.w	cdf6 <_vfiprintf_r+0x7e>
    d00a:	ee18 1a10 	vmov	r1, s16
    d00e:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
    d012:	2b00      	cmp	r3, #0
    d014:	f6ff aeef 	blt.w	cdf6 <_vfiprintf_r+0x7e>
    d018:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    d01a:	07db      	lsls	r3, r3, #31
    d01c:	d402      	bmi.n	d024 <_vfiprintf_r+0x2ac>
    d01e:	0597      	lsls	r7, r2, #22
    d020:	f140 8612 	bpl.w	dc48 <_vfiprintf_r+0xed0>
    d024:	ee18 1a10 	vmov	r1, s16
    d028:	4623      	mov	r3, r4
    d02a:	4632      	mov	r2, r6
    d02c:	4658      	mov	r0, fp
    d02e:	f000 fe69 	bl	dd04 <__sbprintf>
    d032:	9005      	str	r0, [sp, #20]
    d034:	9805      	ldr	r0, [sp, #20]
    d036:	b045      	add	sp, #276	; 0x114
    d038:	ecbd 8b02 	vpop	{d8}
    d03c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d040:	f046 0610 	orr.w	r6, r6, #16
    d044:	f016 0220 	ands.w	r2, r6, #32
    d048:	f000 8136 	beq.w	d2b8 <_vfiprintf_r+0x540>
    d04c:	9b07      	ldr	r3, [sp, #28]
    d04e:	3307      	adds	r3, #7
    d050:	f023 0307 	bic.w	r3, r3, #7
    d054:	4619      	mov	r1, r3
    d056:	685a      	ldr	r2, [r3, #4]
    d058:	f851 3b08 	ldr.w	r3, [r1], #8
    d05c:	9107      	str	r1, [sp, #28]
    d05e:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
    d062:	9103      	str	r1, [sp, #12]
    d064:	2100      	movs	r1, #0
    d066:	2000      	movs	r0, #0
    d068:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
    d06c:	1c78      	adds	r0, r7, #1
    d06e:	f000 8210 	beq.w	d492 <_vfiprintf_r+0x71a>
    d072:	9803      	ldr	r0, [sp, #12]
    d074:	f020 0680 	bic.w	r6, r0, #128	; 0x80
    d078:	ea53 0002 	orrs.w	r0, r3, r2
    d07c:	f040 8208 	bne.w	d490 <_vfiprintf_r+0x718>
    d080:	2f00      	cmp	r7, #0
    d082:	f040 8538 	bne.w	daf6 <_vfiprintf_r+0xd7e>
    d086:	2900      	cmp	r1, #0
    d088:	f040 83d5 	bne.w	d836 <_vfiprintf_r+0xabe>
    d08c:	9b03      	ldr	r3, [sp, #12]
    d08e:	f013 0301 	ands.w	r3, r3, #1
    d092:	9304      	str	r3, [sp, #16]
    d094:	f000 8411 	beq.w	d8ba <_vfiprintf_r+0xb42>
    d098:	2330      	movs	r3, #48	; 0x30
    d09a:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
    d09e:	f20d 140f 	addw	r4, sp, #271	; 0x10f
    d0a2:	e792      	b.n	cfca <_vfiprintf_r+0x252>
    d0a4:	2208      	movs	r2, #8
    d0a6:	2100      	movs	r1, #0
    d0a8:	4650      	mov	r0, sl
    d0aa:	f7f8 feb5 	bl	5e18 <memset>
    d0ae:	2301      	movs	r3, #1
    d0b0:	441c      	add	r4, r3
    d0b2:	e6ad      	b.n	ce10 <_vfiprintf_r+0x98>
    d0b4:	20007c70 	.word	0x20007c70
    d0b8:	ebb4 0608 	subs.w	r6, r4, r8
    d0bc:	4605      	mov	r5, r0
    d0be:	d01b      	beq.n	d0f8 <_vfiprintf_r+0x380>
    d0c0:	9b19      	ldr	r3, [sp, #100]	; 0x64
    d0c2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    d0c4:	3301      	adds	r3, #1
    d0c6:	4432      	add	r2, r6
    d0c8:	2b07      	cmp	r3, #7
    d0ca:	e9c9 8600 	strd	r8, r6, [r9]
    d0ce:	921a      	str	r2, [sp, #104]	; 0x68
    d0d0:	9319      	str	r3, [sp, #100]	; 0x64
    d0d2:	dd1c      	ble.n	d10e <_vfiprintf_r+0x396>
    d0d4:	2a00      	cmp	r2, #0
    d0d6:	f000 83a6 	beq.w	d826 <_vfiprintf_r+0xaae>
    d0da:	ee18 1a10 	vmov	r1, s16
    d0de:	aa18      	add	r2, sp, #96	; 0x60
    d0e0:	4658      	mov	r0, fp
    d0e2:	f7ff fe0d 	bl	cd00 <__sprint_r.part.0>
    d0e6:	bb20      	cbnz	r0, d132 <_vfiprintf_r+0x3ba>
    d0e8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d0ec:	9b05      	ldr	r3, [sp, #20]
    d0ee:	4433      	add	r3, r6
    d0f0:	9305      	str	r3, [sp, #20]
    d0f2:	2d00      	cmp	r5, #0
    d0f4:	f47f aea8 	bne.w	ce48 <_vfiprintf_r+0xd0>
    d0f8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    d0fa:	2b00      	cmp	r3, #0
    d0fc:	f040 85c1 	bne.w	dc82 <_vfiprintf_r+0xf0a>
    d100:	ee18 3a10 	vmov	r3, s16
    d104:	2200      	movs	r2, #0
    d106:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    d10a:	9219      	str	r2, [sp, #100]	; 0x64
    d10c:	e015      	b.n	d13a <_vfiprintf_r+0x3c2>
    d10e:	f109 0908 	add.w	r9, r9, #8
    d112:	e7eb      	b.n	d0ec <_vfiprintf_r+0x374>
    d114:	ee18 1a10 	vmov	r1, s16
    d118:	aa18      	add	r2, sp, #96	; 0x60
    d11a:	4658      	mov	r0, fp
    d11c:	f7ff fdf0 	bl	cd00 <__sprint_r.part.0>
    d120:	2800      	cmp	r0, #0
    d122:	f000 80a6 	beq.w	d272 <_vfiprintf_r+0x4fa>
    d126:	9b08      	ldr	r3, [sp, #32]
    d128:	b11b      	cbz	r3, d132 <_vfiprintf_r+0x3ba>
    d12a:	9908      	ldr	r1, [sp, #32]
    d12c:	4658      	mov	r0, fp
    d12e:	f7f9 fb39 	bl	67a4 <_free_r>
    d132:	ee18 3a10 	vmov	r3, s16
    d136:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    d13a:	ee18 2a10 	vmov	r2, s16
    d13e:	6e52      	ldr	r2, [r2, #100]	; 0x64
    d140:	f012 0f01 	tst.w	r2, #1
    d144:	b29a      	uxth	r2, r3
    d146:	f000 80a0 	beq.w	d28a <_vfiprintf_r+0x512>
    d14a:	0650      	lsls	r0, r2, #25
    d14c:	f100 85b2 	bmi.w	dcb4 <_vfiprintf_r+0xf3c>
    d150:	9805      	ldr	r0, [sp, #20]
    d152:	b045      	add	sp, #276	; 0x114
    d154:	ecbd 8b02 	vpop	{d8}
    d158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d15c:	2900      	cmp	r1, #0
    d15e:	d0cb      	beq.n	d0f8 <_vfiprintf_r+0x380>
    d160:	2300      	movs	r3, #0
    d162:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    d166:	2301      	movs	r3, #1
    d168:	e9cd 3303 	strd	r3, r3, [sp, #12]
    d16c:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
    d170:	ac2b      	add	r4, sp, #172	; 0xac
    d172:	2300      	movs	r3, #0
    d174:	9308      	str	r3, [sp, #32]
    d176:	461f      	mov	r7, r3
    d178:	f016 0302 	ands.w	r3, r6, #2
    d17c:	9309      	str	r3, [sp, #36]	; 0x24
    d17e:	d002      	beq.n	d186 <_vfiprintf_r+0x40e>
    d180:	9b03      	ldr	r3, [sp, #12]
    d182:	3302      	adds	r3, #2
    d184:	9303      	str	r3, [sp, #12]
    d186:	f016 0384 	ands.w	r3, r6, #132	; 0x84
    d18a:	930a      	str	r3, [sp, #40]	; 0x28
    d18c:	d105      	bne.n	d19a <_vfiprintf_r+0x422>
    d18e:	9b06      	ldr	r3, [sp, #24]
    d190:	9a03      	ldr	r2, [sp, #12]
    d192:	1a9d      	subs	r5, r3, r2
    d194:	2d00      	cmp	r5, #0
    d196:	f300 827b 	bgt.w	d690 <_vfiprintf_r+0x918>
    d19a:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    d19e:	1c41      	adds	r1, r0, #1
    d1a0:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
    d1a4:	b182      	cbz	r2, d1c8 <_vfiprintf_r+0x450>
    d1a6:	2201      	movs	r2, #1
    d1a8:	3301      	adds	r3, #1
    d1aa:	f8c9 2004 	str.w	r2, [r9, #4]
    d1ae:	2907      	cmp	r1, #7
    d1b0:	f10d 0243 	add.w	r2, sp, #67	; 0x43
    d1b4:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    d1b8:	f8c9 2000 	str.w	r2, [r9]
    d1bc:	f300 824a 	bgt.w	d654 <_vfiprintf_r+0x8dc>
    d1c0:	4608      	mov	r0, r1
    d1c2:	f109 0908 	add.w	r9, r9, #8
    d1c6:	3101      	adds	r1, #1
    d1c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    d1ca:	b1e2      	cbz	r2, d206 <_vfiprintf_r+0x48e>
    d1cc:	aa11      	add	r2, sp, #68	; 0x44
    d1ce:	3302      	adds	r3, #2
    d1d0:	f8c9 2000 	str.w	r2, [r9]
    d1d4:	2907      	cmp	r1, #7
    d1d6:	f04f 0202 	mov.w	r2, #2
    d1da:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    d1de:	f8c9 2004 	str.w	r2, [r9, #4]
    d1e2:	f340 8250 	ble.w	d686 <_vfiprintf_r+0x90e>
    d1e6:	2b00      	cmp	r3, #0
    d1e8:	f000 8343 	beq.w	d872 <_vfiprintf_r+0xafa>
    d1ec:	ee18 1a10 	vmov	r1, s16
    d1f0:	aa18      	add	r2, sp, #96	; 0x60
    d1f2:	4658      	mov	r0, fp
    d1f4:	f7ff fd84 	bl	cd00 <__sprint_r.part.0>
    d1f8:	2800      	cmp	r0, #0
    d1fa:	d194      	bne.n	d126 <_vfiprintf_r+0x3ae>
    d1fc:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    d200:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d204:	1c41      	adds	r1, r0, #1
    d206:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    d208:	2a80      	cmp	r2, #128	; 0x80
    d20a:	f000 8184 	beq.w	d516 <_vfiprintf_r+0x79e>
    d20e:	9a04      	ldr	r2, [sp, #16]
    d210:	1abd      	subs	r5, r7, r2
    d212:	2d00      	cmp	r5, #0
    d214:	f300 81d7 	bgt.w	d5c6 <_vfiprintf_r+0x84e>
    d218:	9a04      	ldr	r2, [sp, #16]
    d21a:	f8c9 4000 	str.w	r4, [r9]
    d21e:	4413      	add	r3, r2
    d220:	2907      	cmp	r1, #7
    d222:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    d226:	f8c9 2004 	str.w	r2, [r9, #4]
    d22a:	f340 816e 	ble.w	d50a <_vfiprintf_r+0x792>
    d22e:	2b00      	cmp	r3, #0
    d230:	f000 8275 	beq.w	d71e <_vfiprintf_r+0x9a6>
    d234:	ee18 1a10 	vmov	r1, s16
    d238:	aa18      	add	r2, sp, #96	; 0x60
    d23a:	4658      	mov	r0, fp
    d23c:	f7ff fd60 	bl	cd00 <__sprint_r.part.0>
    d240:	2800      	cmp	r0, #0
    d242:	f47f af70 	bne.w	d126 <_vfiprintf_r+0x3ae>
    d246:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    d248:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d24c:	0775      	lsls	r5, r6, #29
    d24e:	d505      	bpl.n	d25c <_vfiprintf_r+0x4e4>
    d250:	9a06      	ldr	r2, [sp, #24]
    d252:	9903      	ldr	r1, [sp, #12]
    d254:	1a54      	subs	r4, r2, r1
    d256:	2c00      	cmp	r4, #0
    d258:	f300 826b 	bgt.w	d732 <_vfiprintf_r+0x9ba>
    d25c:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
    d260:	9803      	ldr	r0, [sp, #12]
    d262:	4281      	cmp	r1, r0
    d264:	bfac      	ite	ge
    d266:	1852      	addge	r2, r2, r1
    d268:	1812      	addlt	r2, r2, r0
    d26a:	9205      	str	r2, [sp, #20]
    d26c:	2b00      	cmp	r3, #0
    d26e:	f47f af51 	bne.w	d114 <_vfiprintf_r+0x39c>
    d272:	9908      	ldr	r1, [sp, #32]
    d274:	2300      	movs	r3, #0
    d276:	9319      	str	r3, [sp, #100]	; 0x64
    d278:	2900      	cmp	r1, #0
    d27a:	f000 8149 	beq.w	d510 <_vfiprintf_r+0x798>
    d27e:	4658      	mov	r0, fp
    d280:	f7f9 fa90 	bl	67a4 <_free_r>
    d284:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d288:	e5c1      	b.n	ce0e <_vfiprintf_r+0x96>
    d28a:	059c      	lsls	r4, r3, #22
    d28c:	f53f af5d 	bmi.w	d14a <_vfiprintf_r+0x3d2>
    d290:	ee18 4a10 	vmov	r4, s16
    d294:	6da0      	ldr	r0, [r4, #88]	; 0x58
    d296:	f7f8 ff8b 	bl	61b0 <__retarget_lock_release_recursive>
    d29a:	89a2      	ldrh	r2, [r4, #12]
    d29c:	e755      	b.n	d14a <_vfiprintf_r+0x3d2>
    d29e:	06f0      	lsls	r0, r6, #27
    d2a0:	9a07      	ldr	r2, [sp, #28]
    d2a2:	f100 831f 	bmi.w	d8e4 <_vfiprintf_r+0xb6c>
    d2a6:	0671      	lsls	r1, r6, #25
    d2a8:	f140 8319 	bpl.w	d8de <_vfiprintf_r+0xb66>
    d2ac:	f932 3b04 	ldrsh.w	r3, [r2], #4
    d2b0:	9207      	str	r2, [sp, #28]
    d2b2:	17da      	asrs	r2, r3, #31
    d2b4:	4611      	mov	r1, r2
    d2b6:	e66e      	b.n	cf96 <_vfiprintf_r+0x21e>
    d2b8:	f016 0310 	ands.w	r3, r6, #16
    d2bc:	9907      	ldr	r1, [sp, #28]
    d2be:	f040 8309 	bne.w	d8d4 <_vfiprintf_r+0xb5c>
    d2c2:	f016 0040 	ands.w	r0, r6, #64	; 0x40
    d2c6:	f000 8301 	beq.w	d8cc <_vfiprintf_r+0xb54>
    d2ca:	461a      	mov	r2, r3
    d2cc:	f851 3b04 	ldr.w	r3, [r1], #4
    d2d0:	9107      	str	r1, [sp, #28]
    d2d2:	b29b      	uxth	r3, r3
    d2d4:	e6c3      	b.n	d05e <_vfiprintf_r+0x2e6>
    d2d6:	9b07      	ldr	r3, [sp, #28]
    d2d8:	461a      	mov	r2, r3
    d2da:	2300      	movs	r3, #0
    d2dc:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    d2e0:	4613      	mov	r3, r2
    d2e2:	f853 4b04 	ldr.w	r4, [r3], #4
    d2e6:	9303      	str	r3, [sp, #12]
    d2e8:	2c00      	cmp	r4, #0
    d2ea:	f000 8412 	beq.w	db12 <_vfiprintf_r+0xd9a>
    d2ee:	2953      	cmp	r1, #83	; 0x53
    d2f0:	f000 8365 	beq.w	d9be <_vfiprintf_r+0xc46>
    d2f4:	f016 0510 	ands.w	r5, r6, #16
    d2f8:	f040 8361 	bne.w	d9be <_vfiprintf_r+0xc46>
    d2fc:	1c7b      	adds	r3, r7, #1
    d2fe:	f000 84b3 	beq.w	dc68 <_vfiprintf_r+0xef0>
    d302:	463a      	mov	r2, r7
    d304:	4629      	mov	r1, r5
    d306:	4620      	mov	r0, r4
    d308:	f7fe f852 	bl	b3b0 <memchr>
    d30c:	9008      	str	r0, [sp, #32]
    d30e:	2800      	cmp	r0, #0
    d310:	f000 849f 	beq.w	dc52 <_vfiprintf_r+0xeda>
    d314:	1b03      	subs	r3, r0, r4
    d316:	9a03      	ldr	r2, [sp, #12]
    d318:	9304      	str	r3, [sp, #16]
    d31a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    d31e:	462f      	mov	r7, r5
    d320:	9207      	str	r2, [sp, #28]
    d322:	9303      	str	r3, [sp, #12]
    d324:	9508      	str	r5, [sp, #32]
    d326:	e657      	b.n	cfd8 <_vfiprintf_r+0x260>
    d328:	2943      	cmp	r1, #67	; 0x43
    d32a:	d002      	beq.n	d332 <_vfiprintf_r+0x5ba>
    d32c:	06f5      	lsls	r5, r6, #27
    d32e:	f140 832d 	bpl.w	d98c <_vfiprintf_r+0xc14>
    d332:	9d07      	ldr	r5, [sp, #28]
    d334:	2208      	movs	r2, #8
    d336:	2100      	movs	r1, #0
    d338:	a816      	add	r0, sp, #88	; 0x58
    d33a:	ac2b      	add	r4, sp, #172	; 0xac
    d33c:	f7f8 fd6c 	bl	5e18 <memset>
    d340:	ab16      	add	r3, sp, #88	; 0x58
    d342:	f855 2b04 	ldr.w	r2, [r5], #4
    d346:	4621      	mov	r1, r4
    d348:	4658      	mov	r0, fp
    d34a:	f7ff fa77 	bl	c83c <_wcrtomb_r>
    d34e:	4603      	mov	r3, r0
    d350:	3301      	adds	r3, #1
    d352:	9004      	str	r0, [sp, #16]
    d354:	f000 84b3 	beq.w	dcbe <_vfiprintf_r+0xf46>
    d358:	9b04      	ldr	r3, [sp, #16]
    d35a:	9507      	str	r5, [sp, #28]
    d35c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    d360:	9303      	str	r3, [sp, #12]
    d362:	2300      	movs	r3, #0
    d364:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    d368:	e703      	b.n	d172 <_vfiprintf_r+0x3fa>
    d36a:	9b07      	ldr	r3, [sp, #28]
    d36c:	f853 2b04 	ldr.w	r2, [r3], #4
    d370:	9206      	str	r2, [sp, #24]
    d372:	2a00      	cmp	r2, #0
    d374:	f280 829c 	bge.w	d8b0 <_vfiprintf_r+0xb38>
    d378:	9a06      	ldr	r2, [sp, #24]
    d37a:	4252      	negs	r2, r2
    d37c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    d380:	f898 1000 	ldrb.w	r1, [r8]
    d384:	f046 0604 	orr.w	r6, r6, #4
    d388:	e569      	b.n	ce5e <_vfiprintf_r+0xe6>
    d38a:	f898 1000 	ldrb.w	r1, [r8]
    d38e:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
    d392:	e564      	b.n	ce5e <_vfiprintf_r+0xe6>
    d394:	f898 1000 	ldrb.w	r1, [r8]
    d398:	f046 0680 	orr.w	r6, r6, #128	; 0x80
    d39c:	e55f      	b.n	ce5e <_vfiprintf_r+0xe6>
    d39e:	4642      	mov	r2, r8
    d3a0:	f812 1b01 	ldrb.w	r1, [r2], #1
    d3a4:	292a      	cmp	r1, #42	; 0x2a
    d3a6:	f000 8496 	beq.w	dcd6 <_vfiprintf_r+0xf5e>
    d3aa:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    d3ae:	2b09      	cmp	r3, #9
    d3b0:	4690      	mov	r8, r2
    d3b2:	f04f 0700 	mov.w	r7, #0
    d3b6:	f63f ad54 	bhi.w	ce62 <_vfiprintf_r+0xea>
    d3ba:	f818 1b01 	ldrb.w	r1, [r8], #1
    d3be:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    d3c2:	eb03 0747 	add.w	r7, r3, r7, lsl #1
    d3c6:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    d3ca:	2b09      	cmp	r3, #9
    d3cc:	d9f5      	bls.n	d3ba <_vfiprintf_r+0x642>
    d3ce:	e548      	b.n	ce62 <_vfiprintf_r+0xea>
    d3d0:	f898 1000 	ldrb.w	r1, [r8]
    d3d4:	f046 0601 	orr.w	r6, r6, #1
    d3d8:	e541      	b.n	ce5e <_vfiprintf_r+0xe6>
    d3da:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    d3de:	2b00      	cmp	r3, #0
    d3e0:	f47f adc2 	bne.w	cf68 <_vfiprintf_r+0x1f0>
    d3e4:	2320      	movs	r3, #32
    d3e6:	f898 1000 	ldrb.w	r1, [r8]
    d3ea:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    d3ee:	e536      	b.n	ce5e <_vfiprintf_r+0xe6>
    d3f0:	f898 1000 	ldrb.w	r1, [r8]
    d3f4:	296c      	cmp	r1, #108	; 0x6c
    d3f6:	bf03      	ittte	eq
    d3f8:	f898 1001 	ldrbeq.w	r1, [r8, #1]
    d3fc:	f046 0620 	orreq.w	r6, r6, #32
    d400:	f108 0801 	addeq.w	r8, r8, #1
    d404:	f046 0610 	orrne.w	r6, r6, #16
    d408:	e529      	b.n	ce5e <_vfiprintf_r+0xe6>
    d40a:	f898 1000 	ldrb.w	r1, [r8]
    d40e:	2968      	cmp	r1, #104	; 0x68
    d410:	bf03      	ittte	eq
    d412:	f898 1001 	ldrbeq.w	r1, [r8, #1]
    d416:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
    d41a:	f108 0801 	addeq.w	r8, r8, #1
    d41e:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
    d422:	e51c      	b.n	ce5e <_vfiprintf_r+0xe6>
    d424:	f046 0310 	orr.w	r3, r6, #16
    d428:	9303      	str	r3, [sp, #12]
    d42a:	9b03      	ldr	r3, [sp, #12]
    d42c:	f013 0220 	ands.w	r2, r3, #32
    d430:	f000 8206 	beq.w	d840 <_vfiprintf_r+0xac8>
    d434:	9b07      	ldr	r3, [sp, #28]
    d436:	3307      	adds	r3, #7
    d438:	f023 0307 	bic.w	r3, r3, #7
    d43c:	4619      	mov	r1, r3
    d43e:	685a      	ldr	r2, [r3, #4]
    d440:	f851 3b08 	ldr.w	r3, [r1], #8
    d444:	9107      	str	r1, [sp, #28]
    d446:	2101      	movs	r1, #1
    d448:	e60d      	b.n	d066 <_vfiprintf_r+0x2ee>
    d44a:	9a07      	ldr	r2, [sp, #28]
    d44c:	f046 0302 	orr.w	r3, r6, #2
    d450:	9303      	str	r3, [sp, #12]
    d452:	f852 3b04 	ldr.w	r3, [r2], #4
    d456:	9207      	str	r2, [sp, #28]
    d458:	f647 0230 	movw	r2, #30768	; 0x7830
    d45c:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
    d460:	4ab8      	ldr	r2, [pc, #736]	; (d744 <_vfiprintf_r+0x9cc>)
    d462:	920c      	str	r2, [sp, #48]	; 0x30
    d464:	2102      	movs	r1, #2
    d466:	2200      	movs	r2, #0
    d468:	e5fd      	b.n	d066 <_vfiprintf_r+0x2ee>
    d46a:	06b7      	lsls	r7, r6, #26
    d46c:	f100 8248 	bmi.w	d900 <_vfiprintf_r+0xb88>
    d470:	06f5      	lsls	r5, r6, #27
    d472:	f100 8346 	bmi.w	db02 <_vfiprintf_r+0xd8a>
    d476:	0674      	lsls	r4, r6, #25
    d478:	f100 83d5 	bmi.w	dc26 <_vfiprintf_r+0xeae>
    d47c:	05b0      	lsls	r0, r6, #22
    d47e:	f140 8340 	bpl.w	db02 <_vfiprintf_r+0xd8a>
    d482:	9b07      	ldr	r3, [sp, #28]
    d484:	9905      	ldr	r1, [sp, #20]
    d486:	f853 2b04 	ldr.w	r2, [r3], #4
    d48a:	9307      	str	r3, [sp, #28]
    d48c:	7011      	strb	r1, [r2, #0]
    d48e:	e4be      	b.n	ce0e <_vfiprintf_r+0x96>
    d490:	9603      	str	r6, [sp, #12]
    d492:	2901      	cmp	r1, #1
    d494:	f43f ad8c 	beq.w	cfb0 <_vfiprintf_r+0x238>
    d498:	2902      	cmp	r1, #2
    d49a:	ac44      	add	r4, sp, #272	; 0x110
    d49c:	d111      	bne.n	d4c2 <_vfiprintf_r+0x74a>
    d49e:	980c      	ldr	r0, [sp, #48]	; 0x30
    d4a0:	f003 010f 	and.w	r1, r3, #15
    d4a4:	091b      	lsrs	r3, r3, #4
    d4a6:	5c41      	ldrb	r1, [r0, r1]
    d4a8:	f804 1d01 	strb.w	r1, [r4, #-1]!
    d4ac:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    d4b0:	0912      	lsrs	r2, r2, #4
    d4b2:	ea53 0102 	orrs.w	r1, r3, r2
    d4b6:	d1f3      	bne.n	d4a0 <_vfiprintf_r+0x728>
    d4b8:	9e03      	ldr	r6, [sp, #12]
    d4ba:	ab44      	add	r3, sp, #272	; 0x110
    d4bc:	1b1b      	subs	r3, r3, r4
    d4be:	9304      	str	r3, [sp, #16]
    d4c0:	e583      	b.n	cfca <_vfiprintf_r+0x252>
    d4c2:	f003 0107 	and.w	r1, r3, #7
    d4c6:	08db      	lsrs	r3, r3, #3
    d4c8:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
    d4cc:	08d2      	lsrs	r2, r2, #3
    d4ce:	3130      	adds	r1, #48	; 0x30
    d4d0:	ea53 0502 	orrs.w	r5, r3, r2
    d4d4:	4620      	mov	r0, r4
    d4d6:	f804 1d01 	strb.w	r1, [r4, #-1]!
    d4da:	d1f2      	bne.n	d4c2 <_vfiprintf_r+0x74a>
    d4dc:	9e03      	ldr	r6, [sp, #12]
    d4de:	07f3      	lsls	r3, r6, #31
    d4e0:	d5eb      	bpl.n	d4ba <_vfiprintf_r+0x742>
    d4e2:	2930      	cmp	r1, #48	; 0x30
    d4e4:	d0e8      	beq.n	d4b8 <_vfiprintf_r+0x740>
    d4e6:	2330      	movs	r3, #48	; 0x30
    d4e8:	3802      	subs	r0, #2
    d4ea:	f804 3c01 	strb.w	r3, [r4, #-1]
    d4ee:	ab44      	add	r3, sp, #272	; 0x110
    d4f0:	1a1b      	subs	r3, r3, r0
    d4f2:	9e03      	ldr	r6, [sp, #12]
    d4f4:	9304      	str	r3, [sp, #16]
    d4f6:	4604      	mov	r4, r0
    d4f8:	e567      	b.n	cfca <_vfiprintf_r+0x252>
    d4fa:	9b04      	ldr	r3, [sp, #16]
    d4fc:	941b      	str	r4, [sp, #108]	; 0x6c
    d4fe:	2201      	movs	r2, #1
    d500:	931c      	str	r3, [sp, #112]	; 0x70
    d502:	931a      	str	r3, [sp, #104]	; 0x68
    d504:	9219      	str	r2, [sp, #100]	; 0x64
    d506:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d50a:	f109 0908 	add.w	r9, r9, #8
    d50e:	e69d      	b.n	d24c <_vfiprintf_r+0x4d4>
    d510:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d514:	e47b      	b.n	ce0e <_vfiprintf_r+0x96>
    d516:	9a06      	ldr	r2, [sp, #24]
    d518:	9d03      	ldr	r5, [sp, #12]
    d51a:	1b55      	subs	r5, r2, r5
    d51c:	2d00      	cmp	r5, #0
    d51e:	f77f ae76 	ble.w	d20e <_vfiprintf_r+0x496>
    d522:	2d10      	cmp	r5, #16
    d524:	f340 83bb 	ble.w	dc9e <_vfiprintf_r+0xf26>
    d528:	9409      	str	r4, [sp, #36]	; 0x24
    d52a:	ee18 4a10 	vmov	r4, s16
    d52e:	e007      	b.n	d540 <_vfiprintf_r+0x7c8>
    d530:	f100 0c02 	add.w	ip, r0, #2
    d534:	f109 0908 	add.w	r9, r9, #8
    d538:	4610      	mov	r0, r2
    d53a:	3d10      	subs	r5, #16
    d53c:	2d10      	cmp	r5, #16
    d53e:	dd1e      	ble.n	d57e <_vfiprintf_r+0x806>
    d540:	4981      	ldr	r1, [pc, #516]	; (d748 <_vfiprintf_r+0x9d0>)
    d542:	f8c9 1000 	str.w	r1, [r9]
    d546:	1c42      	adds	r2, r0, #1
    d548:	3310      	adds	r3, #16
    d54a:	2110      	movs	r1, #16
    d54c:	2a07      	cmp	r2, #7
    d54e:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    d552:	f8c9 1004 	str.w	r1, [r9, #4]
    d556:	ddeb      	ble.n	d530 <_vfiprintf_r+0x7b8>
    d558:	aa18      	add	r2, sp, #96	; 0x60
    d55a:	2b00      	cmp	r3, #0
    d55c:	d074      	beq.n	d648 <_vfiprintf_r+0x8d0>
    d55e:	4621      	mov	r1, r4
    d560:	4658      	mov	r0, fp
    d562:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d566:	f7ff fbcb 	bl	cd00 <__sprint_r.part.0>
    d56a:	2800      	cmp	r0, #0
    d56c:	f47f addb 	bne.w	d126 <_vfiprintf_r+0x3ae>
    d570:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    d574:	3d10      	subs	r5, #16
    d576:	2d10      	cmp	r5, #16
    d578:	f100 0c01 	add.w	ip, r0, #1
    d57c:	dce0      	bgt.n	d540 <_vfiprintf_r+0x7c8>
    d57e:	9c09      	ldr	r4, [sp, #36]	; 0x24
    d580:	4a71      	ldr	r2, [pc, #452]	; (d748 <_vfiprintf_r+0x9d0>)
    d582:	f8c9 5004 	str.w	r5, [r9, #4]
    d586:	442b      	add	r3, r5
    d588:	f1bc 0f07 	cmp.w	ip, #7
    d58c:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
    d590:	f8c9 2000 	str.w	r2, [r9]
    d594:	f340 8194 	ble.w	d8c0 <_vfiprintf_r+0xb48>
    d598:	2b00      	cmp	r3, #0
    d59a:	f000 831f 	beq.w	dbdc <_vfiprintf_r+0xe64>
    d59e:	ee18 1a10 	vmov	r1, s16
    d5a2:	aa18      	add	r2, sp, #96	; 0x60
    d5a4:	4658      	mov	r0, fp
    d5a6:	f7ff fbab 	bl	cd00 <__sprint_r.part.0>
    d5aa:	2800      	cmp	r0, #0
    d5ac:	f47f adbb 	bne.w	d126 <_vfiprintf_r+0x3ae>
    d5b0:	9a04      	ldr	r2, [sp, #16]
    d5b2:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    d5b6:	1abd      	subs	r5, r7, r2
    d5b8:	2d00      	cmp	r5, #0
    d5ba:	f100 0101 	add.w	r1, r0, #1
    d5be:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d5c2:	f77f ae29 	ble.w	d218 <_vfiprintf_r+0x4a0>
    d5c6:	2d10      	cmp	r5, #16
    d5c8:	dd29      	ble.n	d61e <_vfiprintf_r+0x8a6>
    d5ca:	9409      	str	r4, [sp, #36]	; 0x24
    d5cc:	2710      	movs	r7, #16
    d5ce:	ee18 4a10 	vmov	r4, s16
    d5d2:	e007      	b.n	d5e4 <_vfiprintf_r+0x86c>
    d5d4:	f100 0c02 	add.w	ip, r0, #2
    d5d8:	f109 0908 	add.w	r9, r9, #8
    d5dc:	4610      	mov	r0, r2
    d5de:	3d10      	subs	r5, #16
    d5e0:	2d10      	cmp	r5, #16
    d5e2:	dd1a      	ble.n	d61a <_vfiprintf_r+0x8a2>
    d5e4:	1c42      	adds	r2, r0, #1
    d5e6:	4958      	ldr	r1, [pc, #352]	; (d748 <_vfiprintf_r+0x9d0>)
    d5e8:	3310      	adds	r3, #16
    d5ea:	2a07      	cmp	r2, #7
    d5ec:	e9c9 1700 	strd	r1, r7, [r9]
    d5f0:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    d5f4:	ddee      	ble.n	d5d4 <_vfiprintf_r+0x85c>
    d5f6:	aa18      	add	r2, sp, #96	; 0x60
    d5f8:	b303      	cbz	r3, d63c <_vfiprintf_r+0x8c4>
    d5fa:	4621      	mov	r1, r4
    d5fc:	4658      	mov	r0, fp
    d5fe:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d602:	f7ff fb7d 	bl	cd00 <__sprint_r.part.0>
    d606:	2800      	cmp	r0, #0
    d608:	f47f ad8d 	bne.w	d126 <_vfiprintf_r+0x3ae>
    d60c:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    d610:	3d10      	subs	r5, #16
    d612:	2d10      	cmp	r5, #16
    d614:	f100 0c01 	add.w	ip, r0, #1
    d618:	dce4      	bgt.n	d5e4 <_vfiprintf_r+0x86c>
    d61a:	9c09      	ldr	r4, [sp, #36]	; 0x24
    d61c:	4661      	mov	r1, ip
    d61e:	4a4a      	ldr	r2, [pc, #296]	; (d748 <_vfiprintf_r+0x9d0>)
    d620:	f8c9 5004 	str.w	r5, [r9, #4]
    d624:	442b      	add	r3, r5
    d626:	2907      	cmp	r1, #7
    d628:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    d62c:	f8c9 2000 	str.w	r2, [r9]
    d630:	f300 80e7 	bgt.w	d802 <_vfiprintf_r+0xa8a>
    d634:	f109 0908 	add.w	r9, r9, #8
    d638:	3101      	adds	r1, #1
    d63a:	e5ed      	b.n	d218 <_vfiprintf_r+0x4a0>
    d63c:	f04f 0c01 	mov.w	ip, #1
    d640:	4618      	mov	r0, r3
    d642:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d646:	e7ca      	b.n	d5de <_vfiprintf_r+0x866>
    d648:	f04f 0c01 	mov.w	ip, #1
    d64c:	4618      	mov	r0, r3
    d64e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d652:	e772      	b.n	d53a <_vfiprintf_r+0x7c2>
    d654:	2b00      	cmp	r3, #0
    d656:	f000 8104 	beq.w	d862 <_vfiprintf_r+0xaea>
    d65a:	ee18 1a10 	vmov	r1, s16
    d65e:	aa18      	add	r2, sp, #96	; 0x60
    d660:	4658      	mov	r0, fp
    d662:	f7ff fb4d 	bl	cd00 <__sprint_r.part.0>
    d666:	2800      	cmp	r0, #0
    d668:	f47f ad5d 	bne.w	d126 <_vfiprintf_r+0x3ae>
    d66c:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    d670:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d674:	1c41      	adds	r1, r0, #1
    d676:	e5a7      	b.n	d1c8 <_vfiprintf_r+0x450>
    d678:	2302      	movs	r3, #2
    d67a:	aa11      	add	r2, sp, #68	; 0x44
    d67c:	931c      	str	r3, [sp, #112]	; 0x70
    d67e:	921b      	str	r2, [sp, #108]	; 0x6c
    d680:	2101      	movs	r1, #1
    d682:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d686:	4608      	mov	r0, r1
    d688:	f109 0908 	add.w	r9, r9, #8
    d68c:	1c41      	adds	r1, r0, #1
    d68e:	e5ba      	b.n	d206 <_vfiprintf_r+0x48e>
    d690:	2d10      	cmp	r5, #16
    d692:	f340 82e5 	ble.w	dc60 <_vfiprintf_r+0xee8>
    d696:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
    d69a:	940f      	str	r4, [sp, #60]	; 0x3c
    d69c:	4608      	mov	r0, r1
    d69e:	ee18 4a10 	vmov	r4, s16
    d6a2:	e007      	b.n	d6b4 <_vfiprintf_r+0x93c>
    d6a4:	f100 0c02 	add.w	ip, r0, #2
    d6a8:	f109 0908 	add.w	r9, r9, #8
    d6ac:	4610      	mov	r0, r2
    d6ae:	3d10      	subs	r5, #16
    d6b0:	2d10      	cmp	r5, #16
    d6b2:	dd1d      	ble.n	d6f0 <_vfiprintf_r+0x978>
    d6b4:	4925      	ldr	r1, [pc, #148]	; (d74c <_vfiprintf_r+0x9d4>)
    d6b6:	f8c9 1000 	str.w	r1, [r9]
    d6ba:	1c42      	adds	r2, r0, #1
    d6bc:	3310      	adds	r3, #16
    d6be:	2110      	movs	r1, #16
    d6c0:	2a07      	cmp	r2, #7
    d6c2:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    d6c6:	f8c9 1004 	str.w	r1, [r9, #4]
    d6ca:	ddeb      	ble.n	d6a4 <_vfiprintf_r+0x92c>
    d6cc:	aa18      	add	r2, sp, #96	; 0x60
    d6ce:	b303      	cbz	r3, d712 <_vfiprintf_r+0x99a>
    d6d0:	4621      	mov	r1, r4
    d6d2:	4658      	mov	r0, fp
    d6d4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d6d8:	f7ff fb12 	bl	cd00 <__sprint_r.part.0>
    d6dc:	2800      	cmp	r0, #0
    d6de:	f47f ad22 	bne.w	d126 <_vfiprintf_r+0x3ae>
    d6e2:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    d6e6:	3d10      	subs	r5, #16
    d6e8:	2d10      	cmp	r5, #16
    d6ea:	f100 0c01 	add.w	ip, r0, #1
    d6ee:	dce1      	bgt.n	d6b4 <_vfiprintf_r+0x93c>
    d6f0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    d6f2:	4660      	mov	r0, ip
    d6f4:	4a15      	ldr	r2, [pc, #84]	; (d74c <_vfiprintf_r+0x9d4>)
    d6f6:	f8c9 5004 	str.w	r5, [r9, #4]
    d6fa:	442b      	add	r3, r5
    d6fc:	2807      	cmp	r0, #7
    d6fe:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
    d702:	f8c9 2000 	str.w	r2, [r9]
    d706:	f300 80c1 	bgt.w	d88c <_vfiprintf_r+0xb14>
    d70a:	f109 0908 	add.w	r9, r9, #8
    d70e:	1c41      	adds	r1, r0, #1
    d710:	e546      	b.n	d1a0 <_vfiprintf_r+0x428>
    d712:	4618      	mov	r0, r3
    d714:	f04f 0c01 	mov.w	ip, #1
    d718:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d71c:	e7c7      	b.n	d6ae <_vfiprintf_r+0x936>
    d71e:	0776      	lsls	r6, r6, #29
    d720:	9319      	str	r3, [sp, #100]	; 0x64
    d722:	d553      	bpl.n	d7cc <_vfiprintf_r+0xa54>
    d724:	9a06      	ldr	r2, [sp, #24]
    d726:	9903      	ldr	r1, [sp, #12]
    d728:	1a54      	subs	r4, r2, r1
    d72a:	2c00      	cmp	r4, #0
    d72c:	dd4e      	ble.n	d7cc <_vfiprintf_r+0xa54>
    d72e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d732:	2c10      	cmp	r4, #16
    d734:	f340 82b0 	ble.w	dc98 <_vfiprintf_r+0xf20>
    d738:	9919      	ldr	r1, [sp, #100]	; 0x64
    d73a:	ee18 6a10 	vmov	r6, s16
    d73e:	2510      	movs	r5, #16
    d740:	e00d      	b.n	d75e <_vfiprintf_r+0x9e6>
    d742:	bf00      	nop
    d744:	200008d4 	.word	0x200008d4
    d748:	20007a4c 	.word	0x20007a4c
    d74c:	20002390 	.word	0x20002390
    d750:	1c88      	adds	r0, r1, #2
    d752:	f109 0908 	add.w	r9, r9, #8
    d756:	4611      	mov	r1, r2
    d758:	3c10      	subs	r4, #16
    d75a:	2c10      	cmp	r4, #16
    d75c:	dd1a      	ble.n	d794 <_vfiprintf_r+0xa1c>
    d75e:	1c4a      	adds	r2, r1, #1
    d760:	48b3      	ldr	r0, [pc, #716]	; (da30 <_vfiprintf_r+0xcb8>)
    d762:	3310      	adds	r3, #16
    d764:	2a07      	cmp	r2, #7
    d766:	e9c9 0500 	strd	r0, r5, [r9]
    d76a:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    d76e:	ddef      	ble.n	d750 <_vfiprintf_r+0x9d8>
    d770:	aa18      	add	r2, sp, #96	; 0x60
    d772:	b333      	cbz	r3, d7c2 <_vfiprintf_r+0xa4a>
    d774:	4631      	mov	r1, r6
    d776:	4658      	mov	r0, fp
    d778:	f7ff fac2 	bl	cd00 <__sprint_r.part.0>
    d77c:	2800      	cmp	r0, #0
    d77e:	f47f acd2 	bne.w	d126 <_vfiprintf_r+0x3ae>
    d782:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
    d786:	3c10      	subs	r4, #16
    d788:	2c10      	cmp	r4, #16
    d78a:	f101 0001 	add.w	r0, r1, #1
    d78e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d792:	dce4      	bgt.n	d75e <_vfiprintf_r+0x9e6>
    d794:	4aa6      	ldr	r2, [pc, #664]	; (da30 <_vfiprintf_r+0xcb8>)
    d796:	f8c9 4004 	str.w	r4, [r9, #4]
    d79a:	4423      	add	r3, r4
    d79c:	2807      	cmp	r0, #7
    d79e:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
    d7a2:	f8c9 2000 	str.w	r2, [r9]
    d7a6:	f77f ad59 	ble.w	d25c <_vfiprintf_r+0x4e4>
    d7aa:	b17b      	cbz	r3, d7cc <_vfiprintf_r+0xa54>
    d7ac:	ee18 1a10 	vmov	r1, s16
    d7b0:	aa18      	add	r2, sp, #96	; 0x60
    d7b2:	4658      	mov	r0, fp
    d7b4:	f7ff faa4 	bl	cd00 <__sprint_r.part.0>
    d7b8:	2800      	cmp	r0, #0
    d7ba:	f47f acb4 	bne.w	d126 <_vfiprintf_r+0x3ae>
    d7be:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    d7c0:	e54c      	b.n	d25c <_vfiprintf_r+0x4e4>
    d7c2:	2001      	movs	r0, #1
    d7c4:	4619      	mov	r1, r3
    d7c6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d7ca:	e7c5      	b.n	d758 <_vfiprintf_r+0x9e0>
    d7cc:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
    d7d0:	9903      	ldr	r1, [sp, #12]
    d7d2:	428a      	cmp	r2, r1
    d7d4:	bfac      	ite	ge
    d7d6:	189b      	addge	r3, r3, r2
    d7d8:	185b      	addlt	r3, r3, r1
    d7da:	9305      	str	r3, [sp, #20]
    d7dc:	e549      	b.n	d272 <_vfiprintf_r+0x4fa>
    d7de:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
    d7e2:	058f      	lsls	r7, r1, #22
    d7e4:	ee18 3a10 	vmov	r3, s16
    d7e8:	b28a      	uxth	r2, r1
    d7ea:	f53f aae8 	bmi.w	cdbe <_vfiprintf_r+0x46>
    d7ee:	ee18 5a10 	vmov	r5, s16
    d7f2:	6d98      	ldr	r0, [r3, #88]	; 0x58
    d7f4:	f7f8 fcda 	bl	61ac <__retarget_lock_acquire_recursive>
    d7f8:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
    d7fc:	b28a      	uxth	r2, r1
    d7fe:	f7ff bade 	b.w	cdbe <_vfiprintf_r+0x46>
    d802:	2b00      	cmp	r3, #0
    d804:	f43f ae79 	beq.w	d4fa <_vfiprintf_r+0x782>
    d808:	ee18 1a10 	vmov	r1, s16
    d80c:	aa18      	add	r2, sp, #96	; 0x60
    d80e:	4658      	mov	r0, fp
    d810:	f7ff fa76 	bl	cd00 <__sprint_r.part.0>
    d814:	2800      	cmp	r0, #0
    d816:	f47f ac86 	bne.w	d126 <_vfiprintf_r+0x3ae>
    d81a:	9919      	ldr	r1, [sp, #100]	; 0x64
    d81c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    d81e:	3101      	adds	r1, #1
    d820:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d824:	e4f8      	b.n	d218 <_vfiprintf_r+0x4a0>
    d826:	9219      	str	r2, [sp, #100]	; 0x64
    d828:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d82c:	e45e      	b.n	d0ec <_vfiprintf_r+0x374>
    d82e:	2f00      	cmp	r7, #0
    d830:	f47f abc3 	bne.w	cfba <_vfiprintf_r+0x242>
    d834:	9e03      	ldr	r6, [sp, #12]
    d836:	2700      	movs	r7, #0
    d838:	9704      	str	r7, [sp, #16]
    d83a:	ac44      	add	r4, sp, #272	; 0x110
    d83c:	f7ff bbc5 	b.w	cfca <_vfiprintf_r+0x252>
    d840:	9b03      	ldr	r3, [sp, #12]
    d842:	f013 0310 	ands.w	r3, r3, #16
    d846:	d154      	bne.n	d8f2 <_vfiprintf_r+0xb7a>
    d848:	9a03      	ldr	r2, [sp, #12]
    d84a:	f012 0040 	ands.w	r0, r2, #64	; 0x40
    d84e:	f000 816b 	beq.w	db28 <_vfiprintf_r+0xdb0>
    d852:	9907      	ldr	r1, [sp, #28]
    d854:	461a      	mov	r2, r3
    d856:	f851 3b04 	ldr.w	r3, [r1], #4
    d85a:	9107      	str	r1, [sp, #28]
    d85c:	b29b      	uxth	r3, r3
    d85e:	2101      	movs	r1, #1
    d860:	e401      	b.n	d066 <_vfiprintf_r+0x2ee>
    d862:	9a09      	ldr	r2, [sp, #36]	; 0x24
    d864:	2a00      	cmp	r2, #0
    d866:	d164      	bne.n	d932 <_vfiprintf_r+0xbba>
    d868:	4618      	mov	r0, r3
    d86a:	2101      	movs	r1, #1
    d86c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d870:	e4c9      	b.n	d206 <_vfiprintf_r+0x48e>
    d872:	2101      	movs	r1, #1
    d874:	4618      	mov	r0, r3
    d876:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d87a:	e4c4      	b.n	d206 <_vfiprintf_r+0x48e>
    d87c:	425b      	negs	r3, r3
    d87e:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
    d882:	9603      	str	r6, [sp, #12]
    d884:	202d      	movs	r0, #45	; 0x2d
    d886:	2101      	movs	r1, #1
    d888:	f7ff bbee 	b.w	d068 <_vfiprintf_r+0x2f0>
    d88c:	2b00      	cmp	r3, #0
    d88e:	f000 8088 	beq.w	d9a2 <_vfiprintf_r+0xc2a>
    d892:	ee18 1a10 	vmov	r1, s16
    d896:	aa18      	add	r2, sp, #96	; 0x60
    d898:	4658      	mov	r0, fp
    d89a:	f7ff fa31 	bl	cd00 <__sprint_r.part.0>
    d89e:	2800      	cmp	r0, #0
    d8a0:	f47f ac41 	bne.w	d126 <_vfiprintf_r+0x3ae>
    d8a4:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    d8a8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d8ac:	1c41      	adds	r1, r0, #1
    d8ae:	e477      	b.n	d1a0 <_vfiprintf_r+0x428>
    d8b0:	f898 1000 	ldrb.w	r1, [r8]
    d8b4:	9307      	str	r3, [sp, #28]
    d8b6:	f7ff bad2 	b.w	ce5e <_vfiprintf_r+0xe6>
    d8ba:	ac44      	add	r4, sp, #272	; 0x110
    d8bc:	f7ff bb85 	b.w	cfca <_vfiprintf_r+0x252>
    d8c0:	f109 0908 	add.w	r9, r9, #8
    d8c4:	f10c 0101 	add.w	r1, ip, #1
    d8c8:	4660      	mov	r0, ip
    d8ca:	e4a0      	b.n	d20e <_vfiprintf_r+0x496>
    d8cc:	f416 7200 	ands.w	r2, r6, #512	; 0x200
    d8d0:	f040 8197 	bne.w	dc02 <_vfiprintf_r+0xe8a>
    d8d4:	f851 3b04 	ldr.w	r3, [r1], #4
    d8d8:	9107      	str	r1, [sp, #28]
    d8da:	f7ff bbc0 	b.w	d05e <_vfiprintf_r+0x2e6>
    d8de:	05b3      	lsls	r3, r6, #22
    d8e0:	f100 8188 	bmi.w	dbf4 <_vfiprintf_r+0xe7c>
    d8e4:	f852 3b04 	ldr.w	r3, [r2], #4
    d8e8:	9207      	str	r2, [sp, #28]
    d8ea:	17da      	asrs	r2, r3, #31
    d8ec:	4611      	mov	r1, r2
    d8ee:	f7ff bb52 	b.w	cf96 <_vfiprintf_r+0x21e>
    d8f2:	9907      	ldr	r1, [sp, #28]
    d8f4:	f851 3b04 	ldr.w	r3, [r1], #4
    d8f8:	9107      	str	r1, [sp, #28]
    d8fa:	2101      	movs	r1, #1
    d8fc:	f7ff bbb3 	b.w	d066 <_vfiprintf_r+0x2ee>
    d900:	9b07      	ldr	r3, [sp, #28]
    d902:	9805      	ldr	r0, [sp, #20]
    d904:	f853 1b04 	ldr.w	r1, [r3], #4
    d908:	9307      	str	r3, [sp, #28]
    d90a:	17c2      	asrs	r2, r0, #31
    d90c:	e9c1 0200 	strd	r0, r2, [r1]
    d910:	f7ff ba7d 	b.w	ce0e <_vfiprintf_r+0x96>
    d914:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d916:	2b00      	cmp	r3, #0
    d918:	f43f ab26 	beq.w	cf68 <_vfiprintf_r+0x1f0>
    d91c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d91e:	781b      	ldrb	r3, [r3, #0]
    d920:	2b00      	cmp	r3, #0
    d922:	f43f ab21 	beq.w	cf68 <_vfiprintf_r+0x1f0>
    d926:	f898 1000 	ldrb.w	r1, [r8]
    d92a:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
    d92e:	f7ff ba96 	b.w	ce5e <_vfiprintf_r+0xe6>
    d932:	2302      	movs	r3, #2
    d934:	aa11      	add	r2, sp, #68	; 0x44
    d936:	931c      	str	r3, [sp, #112]	; 0x70
    d938:	921b      	str	r2, [sp, #108]	; 0x6c
    d93a:	2001      	movs	r0, #1
    d93c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d940:	e6a2      	b.n	d688 <_vfiprintf_r+0x910>
    d942:	9603      	str	r6, [sp, #12]
    d944:	e571      	b.n	d42a <_vfiprintf_r+0x6b2>
    d946:	4b3b      	ldr	r3, [pc, #236]	; (da34 <_vfiprintf_r+0xcbc>)
    d948:	930c      	str	r3, [sp, #48]	; 0x30
    d94a:	f016 0220 	ands.w	r2, r6, #32
    d94e:	d059      	beq.n	da04 <_vfiprintf_r+0xc8c>
    d950:	9b07      	ldr	r3, [sp, #28]
    d952:	3307      	adds	r3, #7
    d954:	f023 0307 	bic.w	r3, r3, #7
    d958:	4618      	mov	r0, r3
    d95a:	685a      	ldr	r2, [r3, #4]
    d95c:	f850 3b08 	ldr.w	r3, [r0], #8
    d960:	9007      	str	r0, [sp, #28]
    d962:	07f4      	lsls	r4, r6, #31
    d964:	d509      	bpl.n	d97a <_vfiprintf_r+0xc02>
    d966:	ea53 0002 	orrs.w	r0, r3, r2
    d96a:	d006      	beq.n	d97a <_vfiprintf_r+0xc02>
    d96c:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
    d970:	2130      	movs	r1, #48	; 0x30
    d972:	f046 0602 	orr.w	r6, r6, #2
    d976:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
    d97a:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
    d97e:	9103      	str	r1, [sp, #12]
    d980:	2102      	movs	r1, #2
    d982:	f7ff bb70 	b.w	d066 <_vfiprintf_r+0x2ee>
    d986:	4b2c      	ldr	r3, [pc, #176]	; (da38 <_vfiprintf_r+0xcc0>)
    d988:	930c      	str	r3, [sp, #48]	; 0x30
    d98a:	e7de      	b.n	d94a <_vfiprintf_r+0xbd2>
    d98c:	9b07      	ldr	r3, [sp, #28]
    d98e:	2101      	movs	r1, #1
    d990:	f853 2b04 	ldr.w	r2, [r3], #4
    d994:	9103      	str	r1, [sp, #12]
    d996:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
    d99a:	9307      	str	r3, [sp, #28]
    d99c:	9104      	str	r1, [sp, #16]
    d99e:	ac2b      	add	r4, sp, #172	; 0xac
    d9a0:	e4df      	b.n	d362 <_vfiprintf_r+0x5ea>
    d9a2:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
    d9a6:	2a00      	cmp	r2, #0
    d9a8:	f040 8132 	bne.w	dc10 <_vfiprintf_r+0xe98>
    d9ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
    d9ae:	2a00      	cmp	r2, #0
    d9b0:	f47f ae62 	bne.w	d678 <_vfiprintf_r+0x900>
    d9b4:	4618      	mov	r0, r3
    d9b6:	2101      	movs	r1, #1
    d9b8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d9bc:	e427      	b.n	d20e <_vfiprintf_r+0x496>
    d9be:	2100      	movs	r1, #0
    d9c0:	2208      	movs	r2, #8
    d9c2:	a816      	add	r0, sp, #88	; 0x58
    d9c4:	9413      	str	r4, [sp, #76]	; 0x4c
    d9c6:	f7f8 fa27 	bl	5e18 <memset>
    d9ca:	1c79      	adds	r1, r7, #1
    d9cc:	f000 80bc 	beq.w	db48 <_vfiprintf_r+0xdd0>
    d9d0:	2500      	movs	r5, #0
    d9d2:	9407      	str	r4, [sp, #28]
    d9d4:	462c      	mov	r4, r5
    d9d6:	e00c      	b.n	d9f2 <_vfiprintf_r+0xc7a>
    d9d8:	a92b      	add	r1, sp, #172	; 0xac
    d9da:	4658      	mov	r0, fp
    d9dc:	f7fe ff2e 	bl	c83c <_wcrtomb_r>
    d9e0:	1c42      	adds	r2, r0, #1
    d9e2:	4420      	add	r0, r4
    d9e4:	f000 816b 	beq.w	dcbe <_vfiprintf_r+0xf46>
    d9e8:	42b8      	cmp	r0, r7
    d9ea:	dc08      	bgt.n	d9fe <_vfiprintf_r+0xc86>
    d9ec:	f000 8170 	beq.w	dcd0 <_vfiprintf_r+0xf58>
    d9f0:	4604      	mov	r4, r0
    d9f2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    d9f4:	5952      	ldr	r2, [r2, r5]
    d9f6:	ab16      	add	r3, sp, #88	; 0x58
    d9f8:	3504      	adds	r5, #4
    d9fa:	2a00      	cmp	r2, #0
    d9fc:	d1ec      	bne.n	d9d8 <_vfiprintf_r+0xc60>
    d9fe:	9404      	str	r4, [sp, #16]
    da00:	9c07      	ldr	r4, [sp, #28]
    da02:	e0af      	b.n	db64 <_vfiprintf_r+0xdec>
    da04:	f016 0310 	ands.w	r3, r6, #16
    da08:	9807      	ldr	r0, [sp, #28]
    da0a:	d10c      	bne.n	da26 <_vfiprintf_r+0xcae>
    da0c:	f016 0440 	ands.w	r4, r6, #64	; 0x40
    da10:	d005      	beq.n	da1e <_vfiprintf_r+0xca6>
    da12:	461a      	mov	r2, r3
    da14:	f850 3b04 	ldr.w	r3, [r0], #4
    da18:	9007      	str	r0, [sp, #28]
    da1a:	b29b      	uxth	r3, r3
    da1c:	e7a1      	b.n	d962 <_vfiprintf_r+0xbea>
    da1e:	f416 7200 	ands.w	r2, r6, #512	; 0x200
    da22:	f040 80e1 	bne.w	dbe8 <_vfiprintf_r+0xe70>
    da26:	f850 3b04 	ldr.w	r3, [r0], #4
    da2a:	9007      	str	r0, [sp, #28]
    da2c:	e799      	b.n	d962 <_vfiprintf_r+0xbea>
    da2e:	bf00      	nop
    da30:	20002390 	.word	0x20002390
    da34:	200008d4 	.word	0x200008d4
    da38:	200008e8 	.word	0x200008e8
    da3c:	9903      	ldr	r1, [sp, #12]
    da3e:	9704      	str	r7, [sp, #16]
    da40:	ac44      	add	r4, sp, #272	; 0x110
    da42:	469e      	mov	lr, r3
    da44:	ee08 ba90 	vmov	s17, fp
    da48:	f401 6680 	and.w	r6, r1, #1024	; 0x400
    da4c:	f04f 0c00 	mov.w	ip, #0
    da50:	4623      	mov	r3, r4
    da52:	e006      	b.n	da62 <_vfiprintf_r+0xcea>
    da54:	f1be 0f0a 	cmp.w	lr, #10
    da58:	f172 0200 	sbcs.w	r2, r2, #0
    da5c:	d339      	bcc.n	dad2 <_vfiprintf_r+0xd5a>
    da5e:	46a6      	mov	lr, r4
    da60:	462a      	mov	r2, r5
    da62:	49a6      	ldr	r1, [pc, #664]	; (dcfc <_vfiprintf_r+0xf84>)
    da64:	eb1e 0002 	adds.w	r0, lr, r2
    da68:	f140 0000 	adc.w	r0, r0, #0
    da6c:	460f      	mov	r7, r1
    da6e:	fba1 1400 	umull	r1, r4, r1, r0
    da72:	f024 0103 	bic.w	r1, r4, #3
    da76:	eb01 0194 	add.w	r1, r1, r4, lsr #2
    da7a:	1a40      	subs	r0, r0, r1
    da7c:	ebbe 0100 	subs.w	r1, lr, r0
    da80:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
    da84:	f162 0400 	sbc.w	r4, r2, #0
    da88:	fb05 f501 	mul.w	r5, r5, r1
    da8c:	fb07 5504 	mla	r5, r7, r4, r5
    da90:	fba1 4107 	umull	r4, r1, r1, r7
    da94:	440d      	add	r5, r1
    da96:	2705      	movs	r7, #5
    da98:	f004 0101 	and.w	r1, r4, #1
    da9c:	fba1 1b07 	umull	r1, fp, r1, r7
    daa0:	1809      	adds	r1, r1, r0
    daa2:	0864      	lsrs	r4, r4, #1
    daa4:	3130      	adds	r1, #48	; 0x30
    daa6:	f803 1c01 	strb.w	r1, [r3, #-1]
    daaa:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
    daae:	f10c 0c01 	add.w	ip, ip, #1
    dab2:	3b01      	subs	r3, #1
    dab4:	086d      	lsrs	r5, r5, #1
    dab6:	2e00      	cmp	r6, #0
    dab8:	d0cc      	beq.n	da54 <_vfiprintf_r+0xcdc>
    daba:	990b      	ldr	r1, [sp, #44]	; 0x2c
    dabc:	7809      	ldrb	r1, [r1, #0]
    dabe:	4561      	cmp	r1, ip
    dac0:	d1c8      	bne.n	da54 <_vfiprintf_r+0xcdc>
    dac2:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    dac6:	d0c5      	beq.n	da54 <_vfiprintf_r+0xcdc>
    dac8:	f1be 0f0a 	cmp.w	lr, #10
    dacc:	f172 0200 	sbcs.w	r2, r2, #0
    dad0:	d26c      	bcs.n	dbac <_vfiprintf_r+0xe34>
    dad2:	461c      	mov	r4, r3
    dad4:	ab44      	add	r3, sp, #272	; 0x110
    dad6:	1b1b      	subs	r3, r3, r4
    dad8:	9f04      	ldr	r7, [sp, #16]
    dada:	9e03      	ldr	r6, [sp, #12]
    dadc:	9304      	str	r3, [sp, #16]
    dade:	ee18 ba90 	vmov	fp, s17
    dae2:	f7ff ba72 	b.w	cfca <_vfiprintf_r+0x252>
    dae6:	9603      	str	r6, [sp, #12]
    dae8:	f7ff ba62 	b.w	cfb0 <_vfiprintf_r+0x238>
    daec:	4658      	mov	r0, fp
    daee:	f7f7 ffb7 	bl	5a60 <__sinit>
    daf2:	f7ff b95b 	b.w	cdac <_vfiprintf_r+0x34>
    daf6:	2901      	cmp	r1, #1
    daf8:	9603      	str	r6, [sp, #12]
    dafa:	f47f accd 	bne.w	d498 <_vfiprintf_r+0x720>
    dafe:	f7ff ba5c 	b.w	cfba <_vfiprintf_r+0x242>
    db02:	9b07      	ldr	r3, [sp, #28]
    db04:	9905      	ldr	r1, [sp, #20]
    db06:	f853 2b04 	ldr.w	r2, [r3], #4
    db0a:	6011      	str	r1, [r2, #0]
    db0c:	9307      	str	r3, [sp, #28]
    db0e:	f7ff b97e 	b.w	ce0e <_vfiprintf_r+0x96>
    db12:	2f06      	cmp	r7, #6
    db14:	463b      	mov	r3, r7
    db16:	9a03      	ldr	r2, [sp, #12]
    db18:	4c79      	ldr	r4, [pc, #484]	; (dd00 <_vfiprintf_r+0xf88>)
    db1a:	9207      	str	r2, [sp, #28]
    db1c:	bf28      	it	cs
    db1e:	2306      	movcs	r3, #6
    db20:	9304      	str	r3, [sp, #16]
    db22:	9303      	str	r3, [sp, #12]
    db24:	f7ff bb25 	b.w	d172 <_vfiprintf_r+0x3fa>
    db28:	9b03      	ldr	r3, [sp, #12]
    db2a:	9907      	ldr	r1, [sp, #28]
    db2c:	f413 7200 	ands.w	r2, r3, #512	; 0x200
    db30:	bf14      	ite	ne
    db32:	f851 3b04 	ldrne.w	r3, [r1], #4
    db36:	f851 3b04 	ldreq.w	r3, [r1], #4
    db3a:	9107      	str	r1, [sp, #28]
    db3c:	bf1c      	itt	ne
    db3e:	4602      	movne	r2, r0
    db40:	b2db      	uxtbne	r3, r3
    db42:	2101      	movs	r1, #1
    db44:	f7ff ba8f 	b.w	d066 <_vfiprintf_r+0x2ee>
    db48:	ab16      	add	r3, sp, #88	; 0x58
    db4a:	9300      	str	r3, [sp, #0]
    db4c:	2300      	movs	r3, #0
    db4e:	4619      	mov	r1, r3
    db50:	aa13      	add	r2, sp, #76	; 0x4c
    db52:	4658      	mov	r0, fp
    db54:	f7fe fe98 	bl	c888 <_wcsrtombs_r>
    db58:	4603      	mov	r3, r0
    db5a:	3301      	adds	r3, #1
    db5c:	9004      	str	r0, [sp, #16]
    db5e:	f000 80ae 	beq.w	dcbe <_vfiprintf_r+0xf46>
    db62:	9413      	str	r4, [sp, #76]	; 0x4c
    db64:	9b04      	ldr	r3, [sp, #16]
    db66:	2b00      	cmp	r3, #0
    db68:	d030      	beq.n	dbcc <_vfiprintf_r+0xe54>
    db6a:	2b63      	cmp	r3, #99	; 0x63
    db6c:	dc63      	bgt.n	dc36 <_vfiprintf_r+0xebe>
    db6e:	2300      	movs	r3, #0
    db70:	9308      	str	r3, [sp, #32]
    db72:	ac2b      	add	r4, sp, #172	; 0xac
    db74:	2208      	movs	r2, #8
    db76:	2100      	movs	r1, #0
    db78:	a816      	add	r0, sp, #88	; 0x58
    db7a:	f7f8 f94d 	bl	5e18 <memset>
    db7e:	9d04      	ldr	r5, [sp, #16]
    db80:	ab16      	add	r3, sp, #88	; 0x58
    db82:	9300      	str	r3, [sp, #0]
    db84:	aa13      	add	r2, sp, #76	; 0x4c
    db86:	462b      	mov	r3, r5
    db88:	4621      	mov	r1, r4
    db8a:	4658      	mov	r0, fp
    db8c:	f7fe fe7c 	bl	c888 <_wcsrtombs_r>
    db90:	4285      	cmp	r5, r0
    db92:	f040 80ab 	bne.w	dcec <_vfiprintf_r+0xf74>
    db96:	9b03      	ldr	r3, [sp, #12]
    db98:	9a04      	ldr	r2, [sp, #16]
    db9a:	9307      	str	r3, [sp, #28]
    db9c:	2300      	movs	r3, #0
    db9e:	54a3      	strb	r3, [r4, r2]
    dba0:	461f      	mov	r7, r3
    dba2:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    dba6:	9303      	str	r3, [sp, #12]
    dba8:	f7ff ba16 	b.w	cfd8 <_vfiprintf_r+0x260>
    dbac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    dbae:	990d      	ldr	r1, [sp, #52]	; 0x34
    dbb0:	1a9b      	subs	r3, r3, r2
    dbb2:	4618      	mov	r0, r3
    dbb4:	9308      	str	r3, [sp, #32]
    dbb6:	f7f8 fa2d 	bl	6014 <strncpy>
    dbba:	990b      	ldr	r1, [sp, #44]	; 0x2c
    dbbc:	9b08      	ldr	r3, [sp, #32]
    dbbe:	784a      	ldrb	r2, [r1, #1]
    dbc0:	b10a      	cbz	r2, dbc6 <_vfiprintf_r+0xe4e>
    dbc2:	3101      	adds	r1, #1
    dbc4:	910b      	str	r1, [sp, #44]	; 0x2c
    dbc6:	f04f 0c00 	mov.w	ip, #0
    dbca:	e748      	b.n	da5e <_vfiprintf_r+0xce6>
    dbcc:	9b03      	ldr	r3, [sp, #12]
    dbce:	9307      	str	r3, [sp, #28]
    dbd0:	9b04      	ldr	r3, [sp, #16]
    dbd2:	9303      	str	r3, [sp, #12]
    dbd4:	461f      	mov	r7, r3
    dbd6:	9308      	str	r3, [sp, #32]
    dbd8:	f7ff b9fe 	b.w	cfd8 <_vfiprintf_r+0x260>
    dbdc:	2101      	movs	r1, #1
    dbde:	4618      	mov	r0, r3
    dbe0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    dbe4:	f7ff bb13 	b.w	d20e <_vfiprintf_r+0x496>
    dbe8:	f850 3b04 	ldr.w	r3, [r0], #4
    dbec:	9007      	str	r0, [sp, #28]
    dbee:	4622      	mov	r2, r4
    dbf0:	b2db      	uxtb	r3, r3
    dbf2:	e6b6      	b.n	d962 <_vfiprintf_r+0xbea>
    dbf4:	f912 3b04 	ldrsb.w	r3, [r2], #4
    dbf8:	9207      	str	r2, [sp, #28]
    dbfa:	17da      	asrs	r2, r3, #31
    dbfc:	4611      	mov	r1, r2
    dbfe:	f7ff b9ca 	b.w	cf96 <_vfiprintf_r+0x21e>
    dc02:	f851 3b04 	ldr.w	r3, [r1], #4
    dc06:	9107      	str	r1, [sp, #28]
    dc08:	4602      	mov	r2, r0
    dc0a:	b2db      	uxtb	r3, r3
    dc0c:	f7ff ba27 	b.w	d05e <_vfiprintf_r+0x2e6>
    dc10:	2301      	movs	r3, #1
    dc12:	931c      	str	r3, [sp, #112]	; 0x70
    dc14:	2101      	movs	r1, #1
    dc16:	f10d 0343 	add.w	r3, sp, #67	; 0x43
    dc1a:	931b      	str	r3, [sp, #108]	; 0x6c
    dc1c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    dc20:	460b      	mov	r3, r1
    dc22:	f7ff bacd 	b.w	d1c0 <_vfiprintf_r+0x448>
    dc26:	9b07      	ldr	r3, [sp, #28]
    dc28:	9905      	ldr	r1, [sp, #20]
    dc2a:	f853 2b04 	ldr.w	r2, [r3], #4
    dc2e:	9307      	str	r3, [sp, #28]
    dc30:	8011      	strh	r1, [r2, #0]
    dc32:	f7ff b8ec 	b.w	ce0e <_vfiprintf_r+0x96>
    dc36:	1c59      	adds	r1, r3, #1
    dc38:	4658      	mov	r0, fp
    dc3a:	f7f6 f9cb 	bl	3fd4 <_malloc_r>
    dc3e:	4604      	mov	r4, r0
    dc40:	2800      	cmp	r0, #0
    dc42:	d03c      	beq.n	dcbe <_vfiprintf_r+0xf46>
    dc44:	9008      	str	r0, [sp, #32]
    dc46:	e795      	b.n	db74 <_vfiprintf_r+0xdfc>
    dc48:	6d88      	ldr	r0, [r1, #88]	; 0x58
    dc4a:	f7f8 fab1 	bl	61b0 <__retarget_lock_release_recursive>
    dc4e:	f7ff b9e9 	b.w	d024 <_vfiprintf_r+0x2ac>
    dc52:	9b03      	ldr	r3, [sp, #12]
    dc54:	9307      	str	r3, [sp, #28]
    dc56:	e9cd 7703 	strd	r7, r7, [sp, #12]
    dc5a:	9f08      	ldr	r7, [sp, #32]
    dc5c:	f7ff b9bc 	b.w	cfd8 <_vfiprintf_r+0x260>
    dc60:	9819      	ldr	r0, [sp, #100]	; 0x64
    dc62:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    dc64:	3001      	adds	r0, #1
    dc66:	e545      	b.n	d6f4 <_vfiprintf_r+0x97c>
    dc68:	9b03      	ldr	r3, [sp, #12]
    dc6a:	9307      	str	r3, [sp, #28]
    dc6c:	4620      	mov	r0, r4
    dc6e:	f7f8 fc87 	bl	6580 <strlen>
    dc72:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
    dc76:	462f      	mov	r7, r5
    dc78:	9004      	str	r0, [sp, #16]
    dc7a:	9303      	str	r3, [sp, #12]
    dc7c:	9508      	str	r5, [sp, #32]
    dc7e:	f7ff b9ab 	b.w	cfd8 <_vfiprintf_r+0x260>
    dc82:	ee18 1a10 	vmov	r1, s16
    dc86:	aa18      	add	r2, sp, #96	; 0x60
    dc88:	4658      	mov	r0, fp
    dc8a:	f7ff f839 	bl	cd00 <__sprint_r.part.0>
    dc8e:	2800      	cmp	r0, #0
    dc90:	f43f aa36 	beq.w	d100 <_vfiprintf_r+0x388>
    dc94:	f7ff ba4d 	b.w	d132 <_vfiprintf_r+0x3ba>
    dc98:	9819      	ldr	r0, [sp, #100]	; 0x64
    dc9a:	3001      	adds	r0, #1
    dc9c:	e57a      	b.n	d794 <_vfiprintf_r+0xa1c>
    dc9e:	468c      	mov	ip, r1
    dca0:	e46e      	b.n	d580 <_vfiprintf_r+0x808>
    dca2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    dca4:	07d9      	lsls	r1, r3, #31
    dca6:	d405      	bmi.n	dcb4 <_vfiprintf_r+0xf3c>
    dca8:	89ab      	ldrh	r3, [r5, #12]
    dcaa:	059a      	lsls	r2, r3, #22
    dcac:	d402      	bmi.n	dcb4 <_vfiprintf_r+0xf3c>
    dcae:	6da8      	ldr	r0, [r5, #88]	; 0x58
    dcb0:	f7f8 fa7e 	bl	61b0 <__retarget_lock_release_recursive>
    dcb4:	f04f 33ff 	mov.w	r3, #4294967295
    dcb8:	9305      	str	r3, [sp, #20]
    dcba:	f7ff ba49 	b.w	d150 <_vfiprintf_r+0x3d8>
    dcbe:	ee18 2a10 	vmov	r2, s16
    dcc2:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    dcc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    dcca:	8193      	strh	r3, [r2, #12]
    dccc:	f7ff ba35 	b.w	d13a <_vfiprintf_r+0x3c2>
    dcd0:	9c07      	ldr	r4, [sp, #28]
    dcd2:	9704      	str	r7, [sp, #16]
    dcd4:	e746      	b.n	db64 <_vfiprintf_r+0xdec>
    dcd6:	9b07      	ldr	r3, [sp, #28]
    dcd8:	f898 1001 	ldrb.w	r1, [r8, #1]
    dcdc:	f853 7b04 	ldr.w	r7, [r3], #4
    dce0:	9307      	str	r3, [sp, #28]
    dce2:	4690      	mov	r8, r2
    dce4:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
    dce8:	f7ff b8b9 	b.w	ce5e <_vfiprintf_r+0xe6>
    dcec:	ee18 2a10 	vmov	r2, s16
    dcf0:	8993      	ldrh	r3, [r2, #12]
    dcf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    dcf6:	8193      	strh	r3, [r2, #12]
    dcf8:	f7ff ba15 	b.w	d126 <_vfiprintf_r+0x3ae>
    dcfc:	cccccccd 	.word	0xcccccccd
    dd00:	200008fc 	.word	0x200008fc

0000dd04 <__sbprintf>:
    dd04:	b570      	push	{r4, r5, r6, lr}
    dd06:	460c      	mov	r4, r1
    dd08:	8989      	ldrh	r1, [r1, #12]
    dd0a:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
    dd0e:	f021 0102 	bic.w	r1, r1, #2
    dd12:	f8ad 1014 	strh.w	r1, [sp, #20]
    dd16:	6e61      	ldr	r1, [r4, #100]	; 0x64
    dd18:	911b      	str	r1, [sp, #108]	; 0x6c
    dd1a:	89e1      	ldrh	r1, [r4, #14]
    dd1c:	f8ad 1016 	strh.w	r1, [sp, #22]
    dd20:	69e1      	ldr	r1, [r4, #28]
    dd22:	9109      	str	r1, [sp, #36]	; 0x24
    dd24:	6a61      	ldr	r1, [r4, #36]	; 0x24
    dd26:	910b      	str	r1, [sp, #44]	; 0x2c
    dd28:	a91c      	add	r1, sp, #112	; 0x70
    dd2a:	9102      	str	r1, [sp, #8]
    dd2c:	9106      	str	r1, [sp, #24]
    dd2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
    dd32:	4606      	mov	r6, r0
    dd34:	9104      	str	r1, [sp, #16]
    dd36:	9107      	str	r1, [sp, #28]
    dd38:	a818      	add	r0, sp, #96	; 0x60
    dd3a:	2100      	movs	r1, #0
    dd3c:	e9cd 3200 	strd	r3, r2, [sp]
    dd40:	9108      	str	r1, [sp, #32]
    dd42:	f7f8 fa2f 	bl	61a4 <__retarget_lock_init_recursive>
    dd46:	e9dd 3200 	ldrd	r3, r2, [sp]
    dd4a:	a902      	add	r1, sp, #8
    dd4c:	4630      	mov	r0, r6
    dd4e:	f7ff f813 	bl	cd78 <_vfiprintf_r>
    dd52:	1e05      	subs	r5, r0, #0
    dd54:	db07      	blt.n	dd66 <__sbprintf+0x62>
    dd56:	a902      	add	r1, sp, #8
    dd58:	4630      	mov	r0, r6
    dd5a:	f7fd fa5f 	bl	b21c <_fflush_r>
    dd5e:	2800      	cmp	r0, #0
    dd60:	bf18      	it	ne
    dd62:	f04f 35ff 	movne.w	r5, #4294967295
    dd66:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    dd6a:	065b      	lsls	r3, r3, #25
    dd6c:	d503      	bpl.n	dd76 <__sbprintf+0x72>
    dd6e:	89a3      	ldrh	r3, [r4, #12]
    dd70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    dd74:	81a3      	strh	r3, [r4, #12]
    dd76:	9818      	ldr	r0, [sp, #96]	; 0x60
    dd78:	f7f8 fa16 	bl	61a8 <__retarget_lock_close_recursive>
    dd7c:	4628      	mov	r0, r5
    dd7e:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
    dd82:	bd70      	pop	{r4, r5, r6, pc}

0000dd84 <__sfvwrite_r>:
    dd84:	6893      	ldr	r3, [r2, #8]
    dd86:	2b00      	cmp	r3, #0
    dd88:	f000 8085 	beq.w	de96 <__sfvwrite_r+0x112>
    dd8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dd90:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
    dd94:	460c      	mov	r4, r1
    dd96:	0719      	lsls	r1, r3, #28
    dd98:	4680      	mov	r8, r0
    dd9a:	b083      	sub	sp, #12
    dd9c:	4617      	mov	r7, r2
    dd9e:	b298      	uxth	r0, r3
    dda0:	d525      	bpl.n	ddee <__sfvwrite_r+0x6a>
    dda2:	6923      	ldr	r3, [r4, #16]
    dda4:	b31b      	cbz	r3, ddee <__sfvwrite_r+0x6a>
    dda6:	f010 0302 	ands.w	r3, r0, #2
    ddaa:	683d      	ldr	r5, [r7, #0]
    ddac:	d02d      	beq.n	de0a <__sfvwrite_r+0x86>
    ddae:	f04f 0a00 	mov.w	sl, #0
    ddb2:	f8df b2c0 	ldr.w	fp, [pc, #704]	; e074 <__sfvwrite_r+0x2f0>
    ddb6:	4656      	mov	r6, sl
    ddb8:	46b9      	mov	r9, r7
    ddba:	455e      	cmp	r6, fp
    ddbc:	4633      	mov	r3, r6
    ddbe:	4652      	mov	r2, sl
    ddc0:	bf28      	it	cs
    ddc2:	465b      	movcs	r3, fp
    ddc4:	4640      	mov	r0, r8
    ddc6:	2e00      	cmp	r6, #0
    ddc8:	d052      	beq.n	de70 <__sfvwrite_r+0xec>
    ddca:	69e1      	ldr	r1, [r4, #28]
    ddcc:	6a67      	ldr	r7, [r4, #36]	; 0x24
    ddce:	47b8      	blx	r7
    ddd0:	2800      	cmp	r0, #0
    ddd2:	dd56      	ble.n	de82 <__sfvwrite_r+0xfe>
    ddd4:	f8d9 3008 	ldr.w	r3, [r9, #8]
    ddd8:	1a1b      	subs	r3, r3, r0
    ddda:	4482      	add	sl, r0
    dddc:	1a36      	subs	r6, r6, r0
    ddde:	f8c9 3008 	str.w	r3, [r9, #8]
    dde2:	2b00      	cmp	r3, #0
    dde4:	d1e9      	bne.n	ddba <__sfvwrite_r+0x36>
    dde6:	2000      	movs	r0, #0
    dde8:	b003      	add	sp, #12
    ddea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ddee:	4621      	mov	r1, r4
    ddf0:	4640      	mov	r0, r8
    ddf2:	f000 f97d 	bl	e0f0 <__swsetup_r>
    ddf6:	2800      	cmp	r0, #0
    ddf8:	f040 8138 	bne.w	e06c <__sfvwrite_r+0x2e8>
    ddfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    de00:	683d      	ldr	r5, [r7, #0]
    de02:	b298      	uxth	r0, r3
    de04:	f010 0302 	ands.w	r3, r0, #2
    de08:	d1d1      	bne.n	ddae <__sfvwrite_r+0x2a>
    de0a:	f010 0901 	ands.w	r9, r0, #1
    de0e:	d144      	bne.n	de9a <__sfvwrite_r+0x116>
    de10:	464e      	mov	r6, r9
    de12:	9700      	str	r7, [sp, #0]
    de14:	b346      	cbz	r6, de68 <__sfvwrite_r+0xe4>
    de16:	0582      	lsls	r2, r0, #22
    de18:	f8d4 b008 	ldr.w	fp, [r4, #8]
    de1c:	f140 8085 	bpl.w	df2a <__sfvwrite_r+0x1a6>
    de20:	45b3      	cmp	fp, r6
    de22:	465a      	mov	r2, fp
    de24:	f200 80b4 	bhi.w	df90 <__sfvwrite_r+0x20c>
    de28:	f410 6f90 	tst.w	r0, #1152	; 0x480
    de2c:	f040 80c1 	bne.w	dfb2 <__sfvwrite_r+0x22e>
    de30:	6820      	ldr	r0, [r4, #0]
    de32:	9201      	str	r2, [sp, #4]
    de34:	4649      	mov	r1, r9
    de36:	f7f7 ff73 	bl	5d20 <memmove>
    de3a:	68a3      	ldr	r3, [r4, #8]
    de3c:	9a01      	ldr	r2, [sp, #4]
    de3e:	eba3 010b 	sub.w	r1, r3, fp
    de42:	6823      	ldr	r3, [r4, #0]
    de44:	60a1      	str	r1, [r4, #8]
    de46:	4413      	add	r3, r2
    de48:	46b2      	mov	sl, r6
    de4a:	6023      	str	r3, [r4, #0]
    de4c:	2600      	movs	r6, #0
    de4e:	9a00      	ldr	r2, [sp, #0]
    de50:	6893      	ldr	r3, [r2, #8]
    de52:	eba3 030a 	sub.w	r3, r3, sl
    de56:	44d1      	add	r9, sl
    de58:	6093      	str	r3, [r2, #8]
    de5a:	2b00      	cmp	r3, #0
    de5c:	d0c3      	beq.n	dde6 <__sfvwrite_r+0x62>
    de5e:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
    de62:	b280      	uxth	r0, r0
    de64:	2e00      	cmp	r6, #0
    de66:	d1d6      	bne.n	de16 <__sfvwrite_r+0x92>
    de68:	e9d5 9600 	ldrd	r9, r6, [r5]
    de6c:	3508      	adds	r5, #8
    de6e:	e7d1      	b.n	de14 <__sfvwrite_r+0x90>
    de70:	e9d5 a600 	ldrd	sl, r6, [r5]
    de74:	3508      	adds	r5, #8
    de76:	e7a0      	b.n	ddba <__sfvwrite_r+0x36>
    de78:	4621      	mov	r1, r4
    de7a:	4640      	mov	r0, r8
    de7c:	f7fd f9ce 	bl	b21c <_fflush_r>
    de80:	b388      	cbz	r0, dee6 <__sfvwrite_r+0x162>
    de82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    de86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    de8a:	f04f 30ff 	mov.w	r0, #4294967295
    de8e:	81a3      	strh	r3, [r4, #12]
    de90:	b003      	add	sp, #12
    de92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    de96:	2000      	movs	r0, #0
    de98:	4770      	bx	lr
    de9a:	461e      	mov	r6, r3
    de9c:	46ba      	mov	sl, r7
    de9e:	4699      	mov	r9, r3
    dea0:	4618      	mov	r0, r3
    dea2:	9500      	str	r5, [sp, #0]
    dea4:	461f      	mov	r7, r3
    dea6:	b366      	cbz	r6, df02 <__sfvwrite_r+0x17e>
    dea8:	2800      	cmp	r0, #0
    deaa:	d032      	beq.n	df12 <__sfvwrite_r+0x18e>
    deac:	464a      	mov	r2, r9
    deae:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
    deb2:	6820      	ldr	r0, [r4, #0]
    deb4:	68a5      	ldr	r5, [r4, #8]
    deb6:	42b2      	cmp	r2, r6
    deb8:	bf28      	it	cs
    deba:	4632      	movcs	r2, r6
    debc:	4288      	cmp	r0, r1
    debe:	d904      	bls.n	deca <__sfvwrite_r+0x146>
    dec0:	eb05 0b03 	add.w	fp, r5, r3
    dec4:	455a      	cmp	r2, fp
    dec6:	f300 80a7 	bgt.w	e018 <__sfvwrite_r+0x294>
    deca:	4293      	cmp	r3, r2
    decc:	dc64      	bgt.n	df98 <__sfvwrite_r+0x214>
    dece:	69e1      	ldr	r1, [r4, #28]
    ded0:	6a65      	ldr	r5, [r4, #36]	; 0x24
    ded2:	463a      	mov	r2, r7
    ded4:	4640      	mov	r0, r8
    ded6:	47a8      	blx	r5
    ded8:	f1b0 0b00 	subs.w	fp, r0, #0
    dedc:	ddd1      	ble.n	de82 <__sfvwrite_r+0xfe>
    dede:	ebb9 090b 	subs.w	r9, r9, fp
    dee2:	d0c9      	beq.n	de78 <__sfvwrite_r+0xf4>
    dee4:	2001      	movs	r0, #1
    dee6:	f8da 3008 	ldr.w	r3, [sl, #8]
    deea:	eba3 030b 	sub.w	r3, r3, fp
    deee:	445f      	add	r7, fp
    def0:	eba6 060b 	sub.w	r6, r6, fp
    def4:	f8ca 3008 	str.w	r3, [sl, #8]
    def8:	2b00      	cmp	r3, #0
    defa:	f43f af74 	beq.w	dde6 <__sfvwrite_r+0x62>
    defe:	2e00      	cmp	r6, #0
    df00:	d1d2      	bne.n	dea8 <__sfvwrite_r+0x124>
    df02:	9a00      	ldr	r2, [sp, #0]
    df04:	6856      	ldr	r6, [r2, #4]
    df06:	4613      	mov	r3, r2
    df08:	3208      	adds	r2, #8
    df0a:	9200      	str	r2, [sp, #0]
    df0c:	2e00      	cmp	r6, #0
    df0e:	d0f8      	beq.n	df02 <__sfvwrite_r+0x17e>
    df10:	681f      	ldr	r7, [r3, #0]
    df12:	4632      	mov	r2, r6
    df14:	210a      	movs	r1, #10
    df16:	4638      	mov	r0, r7
    df18:	f7fd fa4a 	bl	b3b0 <memchr>
    df1c:	2800      	cmp	r0, #0
    df1e:	f000 809c 	beq.w	e05a <__sfvwrite_r+0x2d6>
    df22:	3001      	adds	r0, #1
    df24:	eba0 0907 	sub.w	r9, r0, r7
    df28:	e7c0      	b.n	deac <__sfvwrite_r+0x128>
    df2a:	6820      	ldr	r0, [r4, #0]
    df2c:	6923      	ldr	r3, [r4, #16]
    df2e:	4298      	cmp	r0, r3
    df30:	d816      	bhi.n	df60 <__sfvwrite_r+0x1dc>
    df32:	6962      	ldr	r2, [r4, #20]
    df34:	42b2      	cmp	r2, r6
    df36:	d813      	bhi.n	df60 <__sfvwrite_r+0x1dc>
    df38:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    df3c:	42b3      	cmp	r3, r6
    df3e:	bf28      	it	cs
    df40:	4633      	movcs	r3, r6
    df42:	69e1      	ldr	r1, [r4, #28]
    df44:	fb93 f3f2 	sdiv	r3, r3, r2
    df48:	6a67      	ldr	r7, [r4, #36]	; 0x24
    df4a:	fb02 f303 	mul.w	r3, r2, r3
    df4e:	4640      	mov	r0, r8
    df50:	464a      	mov	r2, r9
    df52:	47b8      	blx	r7
    df54:	f1b0 0a00 	subs.w	sl, r0, #0
    df58:	dd93      	ble.n	de82 <__sfvwrite_r+0xfe>
    df5a:	eba6 060a 	sub.w	r6, r6, sl
    df5e:	e776      	b.n	de4e <__sfvwrite_r+0xca>
    df60:	45b3      	cmp	fp, r6
    df62:	46da      	mov	sl, fp
    df64:	bf28      	it	cs
    df66:	46b2      	movcs	sl, r6
    df68:	4652      	mov	r2, sl
    df6a:	4649      	mov	r1, r9
    df6c:	f7f7 fed8 	bl	5d20 <memmove>
    df70:	68a3      	ldr	r3, [r4, #8]
    df72:	6822      	ldr	r2, [r4, #0]
    df74:	eba3 030a 	sub.w	r3, r3, sl
    df78:	4452      	add	r2, sl
    df7a:	60a3      	str	r3, [r4, #8]
    df7c:	6022      	str	r2, [r4, #0]
    df7e:	2b00      	cmp	r3, #0
    df80:	d1eb      	bne.n	df5a <__sfvwrite_r+0x1d6>
    df82:	4621      	mov	r1, r4
    df84:	4640      	mov	r0, r8
    df86:	f7fd f949 	bl	b21c <_fflush_r>
    df8a:	2800      	cmp	r0, #0
    df8c:	d0e5      	beq.n	df5a <__sfvwrite_r+0x1d6>
    df8e:	e778      	b.n	de82 <__sfvwrite_r+0xfe>
    df90:	6820      	ldr	r0, [r4, #0]
    df92:	46b3      	mov	fp, r6
    df94:	4632      	mov	r2, r6
    df96:	e74c      	b.n	de32 <__sfvwrite_r+0xae>
    df98:	4639      	mov	r1, r7
    df9a:	9201      	str	r2, [sp, #4]
    df9c:	f7f7 fec0 	bl	5d20 <memmove>
    dfa0:	9a01      	ldr	r2, [sp, #4]
    dfa2:	68a3      	ldr	r3, [r4, #8]
    dfa4:	1a9b      	subs	r3, r3, r2
    dfa6:	60a3      	str	r3, [r4, #8]
    dfa8:	6823      	ldr	r3, [r4, #0]
    dfaa:	4413      	add	r3, r2
    dfac:	6023      	str	r3, [r4, #0]
    dfae:	4693      	mov	fp, r2
    dfb0:	e795      	b.n	dede <__sfvwrite_r+0x15a>
    dfb2:	6823      	ldr	r3, [r4, #0]
    dfb4:	6921      	ldr	r1, [r4, #16]
    dfb6:	eba3 0b01 	sub.w	fp, r3, r1
    dfba:	6963      	ldr	r3, [r4, #20]
    dfbc:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
    dfc0:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
    dfc4:	f10b 0301 	add.w	r3, fp, #1
    dfc8:	ea4f 0a6a 	mov.w	sl, sl, asr #1
    dfcc:	4433      	add	r3, r6
    dfce:	4553      	cmp	r3, sl
    dfd0:	4652      	mov	r2, sl
    dfd2:	bf84      	itt	hi
    dfd4:	469a      	movhi	sl, r3
    dfd6:	4652      	movhi	r2, sl
    dfd8:	0543      	lsls	r3, r0, #21
    dfda:	d52c      	bpl.n	e036 <__sfvwrite_r+0x2b2>
    dfdc:	4611      	mov	r1, r2
    dfde:	4640      	mov	r0, r8
    dfe0:	f7f5 fff8 	bl	3fd4 <_malloc_r>
    dfe4:	2800      	cmp	r0, #0
    dfe6:	d03b      	beq.n	e060 <__sfvwrite_r+0x2dc>
    dfe8:	465a      	mov	r2, fp
    dfea:	6921      	ldr	r1, [r4, #16]
    dfec:	9001      	str	r0, [sp, #4]
    dfee:	f7f4 f8c5 	bl	217c <memcpy>
    dff2:	89a2      	ldrh	r2, [r4, #12]
    dff4:	9b01      	ldr	r3, [sp, #4]
    dff6:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
    dffa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    dffe:	81a2      	strh	r2, [r4, #12]
    e000:	eb03 000b 	add.w	r0, r3, fp
    e004:	6123      	str	r3, [r4, #16]
    e006:	ebaa 030b 	sub.w	r3, sl, fp
    e00a:	f8c4 a014 	str.w	sl, [r4, #20]
    e00e:	60a3      	str	r3, [r4, #8]
    e010:	6020      	str	r0, [r4, #0]
    e012:	46b3      	mov	fp, r6
    e014:	4632      	mov	r2, r6
    e016:	e70c      	b.n	de32 <__sfvwrite_r+0xae>
    e018:	4639      	mov	r1, r7
    e01a:	465a      	mov	r2, fp
    e01c:	f7f7 fe80 	bl	5d20 <memmove>
    e020:	6823      	ldr	r3, [r4, #0]
    e022:	445b      	add	r3, fp
    e024:	6023      	str	r3, [r4, #0]
    e026:	4621      	mov	r1, r4
    e028:	4640      	mov	r0, r8
    e02a:	f7fd f8f7 	bl	b21c <_fflush_r>
    e02e:	2800      	cmp	r0, #0
    e030:	f43f af55 	beq.w	dede <__sfvwrite_r+0x15a>
    e034:	e725      	b.n	de82 <__sfvwrite_r+0xfe>
    e036:	4640      	mov	r0, r8
    e038:	f7f6 fa94 	bl	4564 <_realloc_r>
    e03c:	4603      	mov	r3, r0
    e03e:	2800      	cmp	r0, #0
    e040:	d1de      	bne.n	e000 <__sfvwrite_r+0x27c>
    e042:	6921      	ldr	r1, [r4, #16]
    e044:	4640      	mov	r0, r8
    e046:	f7f8 fbad 	bl	67a4 <_free_r>
    e04a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    e04e:	220c      	movs	r2, #12
    e050:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    e054:	f8c8 2000 	str.w	r2, [r8]
    e058:	e715      	b.n	de86 <__sfvwrite_r+0x102>
    e05a:	1c72      	adds	r2, r6, #1
    e05c:	4691      	mov	r9, r2
    e05e:	e726      	b.n	deae <__sfvwrite_r+0x12a>
    e060:	220c      	movs	r2, #12
    e062:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    e066:	f8c8 2000 	str.w	r2, [r8]
    e06a:	e70c      	b.n	de86 <__sfvwrite_r+0x102>
    e06c:	f04f 30ff 	mov.w	r0, #4294967295
    e070:	e6ba      	b.n	dde8 <__sfvwrite_r+0x64>
    e072:	bf00      	nop
    e074:	7ffffc00 	.word	0x7ffffc00

0000e078 <__submore>:
    e078:	f101 0340 	add.w	r3, r1, #64	; 0x40
    e07c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e080:	460c      	mov	r4, r1
    e082:	6b09      	ldr	r1, [r1, #48]	; 0x30
    e084:	4299      	cmp	r1, r3
    e086:	d014      	beq.n	e0b2 <__submore+0x3a>
    e088:	6b66      	ldr	r6, [r4, #52]	; 0x34
    e08a:	0077      	lsls	r7, r6, #1
    e08c:	463a      	mov	r2, r7
    e08e:	f7f6 fa69 	bl	4564 <_realloc_r>
    e092:	4605      	mov	r5, r0
    e094:	b340      	cbz	r0, e0e8 <__submore+0x70>
    e096:	eb00 0806 	add.w	r8, r0, r6
    e09a:	4601      	mov	r1, r0
    e09c:	4632      	mov	r2, r6
    e09e:	4640      	mov	r0, r8
    e0a0:	f7f4 f86c 	bl	217c <memcpy>
    e0a4:	e9c4 570c 	strd	r5, r7, [r4, #48]	; 0x30
    e0a8:	f8c4 8000 	str.w	r8, [r4]
    e0ac:	2000      	movs	r0, #0
    e0ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e0b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
    e0b6:	f7f5 ff8d 	bl	3fd4 <_malloc_r>
    e0ba:	b1a8      	cbz	r0, e0e8 <__submore+0x70>
    e0bc:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
    e0c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    e0c4:	e9c4 020c 	strd	r0, r2, [r4, #48]	; 0x30
    e0c8:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
    e0cc:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    e0d0:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
    e0d4:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
    e0d8:	f880 23fd 	strb.w	r2, [r0, #1021]	; 0x3fd
    e0dc:	f200 33fd 	addw	r3, r0, #1021	; 0x3fd
    e0e0:	6023      	str	r3, [r4, #0]
    e0e2:	2000      	movs	r0, #0
    e0e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e0e8:	f04f 30ff 	mov.w	r0, #4294967295
    e0ec:	e7df      	b.n	e0ae <__submore+0x36>
    e0ee:	bf00      	nop

0000e0f0 <__swsetup_r>:
    e0f0:	b538      	push	{r3, r4, r5, lr}
    e0f2:	4b31      	ldr	r3, [pc, #196]	; (e1b8 <__swsetup_r+0xc8>)
    e0f4:	681b      	ldr	r3, [r3, #0]
    e0f6:	4605      	mov	r5, r0
    e0f8:	460c      	mov	r4, r1
    e0fa:	b113      	cbz	r3, e102 <__swsetup_r+0x12>
    e0fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    e0fe:	2a00      	cmp	r2, #0
    e100:	d04e      	beq.n	e1a0 <__swsetup_r+0xb0>
    e102:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    e106:	0718      	lsls	r0, r3, #28
    e108:	b29a      	uxth	r2, r3
    e10a:	d51c      	bpl.n	e146 <__swsetup_r+0x56>
    e10c:	6921      	ldr	r1, [r4, #16]
    e10e:	b329      	cbz	r1, e15c <__swsetup_r+0x6c>
    e110:	f012 0001 	ands.w	r0, r2, #1
    e114:	d007      	beq.n	e126 <__swsetup_r+0x36>
    e116:	2000      	movs	r0, #0
    e118:	60a0      	str	r0, [r4, #8]
    e11a:	6960      	ldr	r0, [r4, #20]
    e11c:	4240      	negs	r0, r0
    e11e:	61a0      	str	r0, [r4, #24]
    e120:	b139      	cbz	r1, e132 <__swsetup_r+0x42>
    e122:	2000      	movs	r0, #0
    e124:	bd38      	pop	{r3, r4, r5, pc}
    e126:	0795      	lsls	r5, r2, #30
    e128:	bf58      	it	pl
    e12a:	6960      	ldrpl	r0, [r4, #20]
    e12c:	60a0      	str	r0, [r4, #8]
    e12e:	2900      	cmp	r1, #0
    e130:	d1f7      	bne.n	e122 <__swsetup_r+0x32>
    e132:	0612      	lsls	r2, r2, #24
    e134:	bf58      	it	pl
    e136:	4608      	movpl	r0, r1
    e138:	d5f4      	bpl.n	e124 <__swsetup_r+0x34>
    e13a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    e13e:	81a3      	strh	r3, [r4, #12]
    e140:	f04f 30ff 	mov.w	r0, #4294967295
    e144:	bd38      	pop	{r3, r4, r5, pc}
    e146:	06d1      	lsls	r1, r2, #27
    e148:	d52e      	bpl.n	e1a8 <__swsetup_r+0xb8>
    e14a:	0752      	lsls	r2, r2, #29
    e14c:	d414      	bmi.n	e178 <__swsetup_r+0x88>
    e14e:	6921      	ldr	r1, [r4, #16]
    e150:	f043 0308 	orr.w	r3, r3, #8
    e154:	81a3      	strh	r3, [r4, #12]
    e156:	b29a      	uxth	r2, r3
    e158:	2900      	cmp	r1, #0
    e15a:	d1d9      	bne.n	e110 <__swsetup_r+0x20>
    e15c:	f402 7020 	and.w	r0, r2, #640	; 0x280
    e160:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    e164:	d0d4      	beq.n	e110 <__swsetup_r+0x20>
    e166:	4621      	mov	r1, r4
    e168:	4628      	mov	r0, r5
    e16a:	f000 f977 	bl	e45c <__smakebuf_r>
    e16e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    e172:	6921      	ldr	r1, [r4, #16]
    e174:	b29a      	uxth	r2, r3
    e176:	e7cb      	b.n	e110 <__swsetup_r+0x20>
    e178:	6b21      	ldr	r1, [r4, #48]	; 0x30
    e17a:	b151      	cbz	r1, e192 <__swsetup_r+0xa2>
    e17c:	f104 0240 	add.w	r2, r4, #64	; 0x40
    e180:	4291      	cmp	r1, r2
    e182:	d004      	beq.n	e18e <__swsetup_r+0x9e>
    e184:	4628      	mov	r0, r5
    e186:	f7f8 fb0d 	bl	67a4 <_free_r>
    e18a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    e18e:	2200      	movs	r2, #0
    e190:	6322      	str	r2, [r4, #48]	; 0x30
    e192:	6921      	ldr	r1, [r4, #16]
    e194:	2200      	movs	r2, #0
    e196:	e9c4 1200 	strd	r1, r2, [r4]
    e19a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    e19e:	e7d7      	b.n	e150 <__swsetup_r+0x60>
    e1a0:	4618      	mov	r0, r3
    e1a2:	f7f7 fc5d 	bl	5a60 <__sinit>
    e1a6:	e7ac      	b.n	e102 <__swsetup_r+0x12>
    e1a8:	2209      	movs	r2, #9
    e1aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    e1ae:	602a      	str	r2, [r5, #0]
    e1b0:	f04f 30ff 	mov.w	r0, #4294967295
    e1b4:	81a3      	strh	r3, [r4, #12]
    e1b6:	bd38      	pop	{r3, r4, r5, pc}
    e1b8:	200081f8 	.word	0x200081f8

0000e1bc <__fputwc>:
    e1bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e1c0:	b082      	sub	sp, #8
    e1c2:	4682      	mov	sl, r0
    e1c4:	4688      	mov	r8, r1
    e1c6:	4614      	mov	r4, r2
    e1c8:	f7f7 ff56 	bl	6078 <__locale_mb_cur_max>
    e1cc:	2801      	cmp	r0, #1
    e1ce:	d103      	bne.n	e1d8 <__fputwc+0x1c>
    e1d0:	f108 33ff 	add.w	r3, r8, #4294967295
    e1d4:	2bfe      	cmp	r3, #254	; 0xfe
    e1d6:	d936      	bls.n	e246 <__fputwc+0x8a>
    e1d8:	f10d 0904 	add.w	r9, sp, #4
    e1dc:	4642      	mov	r2, r8
    e1de:	f104 035c 	add.w	r3, r4, #92	; 0x5c
    e1e2:	4649      	mov	r1, r9
    e1e4:	4650      	mov	r0, sl
    e1e6:	f7fe fb29 	bl	c83c <_wcrtomb_r>
    e1ea:	1c42      	adds	r2, r0, #1
    e1ec:	4606      	mov	r6, r0
    e1ee:	d032      	beq.n	e256 <__fputwc+0x9a>
    e1f0:	b320      	cbz	r0, e23c <__fputwc+0x80>
    e1f2:	f89d c004 	ldrb.w	ip, [sp, #4]
    e1f6:	2500      	movs	r5, #0
    e1f8:	e009      	b.n	e20e <__fputwc+0x52>
    e1fa:	6823      	ldr	r3, [r4, #0]
    e1fc:	1c5a      	adds	r2, r3, #1
    e1fe:	6022      	str	r2, [r4, #0]
    e200:	f883 c000 	strb.w	ip, [r3]
    e204:	3501      	adds	r5, #1
    e206:	42b5      	cmp	r5, r6
    e208:	d218      	bcs.n	e23c <__fputwc+0x80>
    e20a:	f819 cf01 	ldrb.w	ip, [r9, #1]!
    e20e:	68a3      	ldr	r3, [r4, #8]
    e210:	3b01      	subs	r3, #1
    e212:	2b00      	cmp	r3, #0
    e214:	60a3      	str	r3, [r4, #8]
    e216:	daf0      	bge.n	e1fa <__fputwc+0x3e>
    e218:	69a7      	ldr	r7, [r4, #24]
    e21a:	42bb      	cmp	r3, r7
    e21c:	4661      	mov	r1, ip
    e21e:	4622      	mov	r2, r4
    e220:	4650      	mov	r0, sl
    e222:	db02      	blt.n	e22a <__fputwc+0x6e>
    e224:	f1bc 0f0a 	cmp.w	ip, #10
    e228:	d1e7      	bne.n	e1fa <__fputwc+0x3e>
    e22a:	f000 f983 	bl	e534 <__swbuf_r>
    e22e:	1c43      	adds	r3, r0, #1
    e230:	d1e8      	bne.n	e204 <__fputwc+0x48>
    e232:	4606      	mov	r6, r0
    e234:	4630      	mov	r0, r6
    e236:	b002      	add	sp, #8
    e238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e23c:	4646      	mov	r6, r8
    e23e:	4630      	mov	r0, r6
    e240:	b002      	add	sp, #8
    e242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e246:	fa5f fc88 	uxtb.w	ip, r8
    e24a:	f88d c004 	strb.w	ip, [sp, #4]
    e24e:	4606      	mov	r6, r0
    e250:	f10d 0904 	add.w	r9, sp, #4
    e254:	e7cf      	b.n	e1f6 <__fputwc+0x3a>
    e256:	89a3      	ldrh	r3, [r4, #12]
    e258:	4630      	mov	r0, r6
    e25a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    e25e:	81a3      	strh	r3, [r4, #12]
    e260:	b002      	add	sp, #8
    e262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e266:	bf00      	nop

0000e268 <_fputwc_r>:
    e268:	b530      	push	{r4, r5, lr}
    e26a:	6e53      	ldr	r3, [r2, #100]	; 0x64
    e26c:	f013 0f01 	tst.w	r3, #1
    e270:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    e274:	4614      	mov	r4, r2
    e276:	b083      	sub	sp, #12
    e278:	4605      	mov	r5, r0
    e27a:	b29a      	uxth	r2, r3
    e27c:	d101      	bne.n	e282 <_fputwc_r+0x1a>
    e27e:	0598      	lsls	r0, r3, #22
    e280:	d51c      	bpl.n	e2bc <_fputwc_r+0x54>
    e282:	0490      	lsls	r0, r2, #18
    e284:	d406      	bmi.n	e294 <_fputwc_r+0x2c>
    e286:	6e62      	ldr	r2, [r4, #100]	; 0x64
    e288:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    e28c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    e290:	81a3      	strh	r3, [r4, #12]
    e292:	6662      	str	r2, [r4, #100]	; 0x64
    e294:	4622      	mov	r2, r4
    e296:	4628      	mov	r0, r5
    e298:	f7ff ff90 	bl	e1bc <__fputwc>
    e29c:	6e63      	ldr	r3, [r4, #100]	; 0x64
    e29e:	07da      	lsls	r2, r3, #31
    e2a0:	4605      	mov	r5, r0
    e2a2:	d402      	bmi.n	e2aa <_fputwc_r+0x42>
    e2a4:	89a3      	ldrh	r3, [r4, #12]
    e2a6:	059b      	lsls	r3, r3, #22
    e2a8:	d502      	bpl.n	e2b0 <_fputwc_r+0x48>
    e2aa:	4628      	mov	r0, r5
    e2ac:	b003      	add	sp, #12
    e2ae:	bd30      	pop	{r4, r5, pc}
    e2b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    e2b2:	f7f7 ff7d 	bl	61b0 <__retarget_lock_release_recursive>
    e2b6:	4628      	mov	r0, r5
    e2b8:	b003      	add	sp, #12
    e2ba:	bd30      	pop	{r4, r5, pc}
    e2bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
    e2be:	9101      	str	r1, [sp, #4]
    e2c0:	f7f7 ff74 	bl	61ac <__retarget_lock_acquire_recursive>
    e2c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    e2c8:	9901      	ldr	r1, [sp, #4]
    e2ca:	b29a      	uxth	r2, r3
    e2cc:	e7d9      	b.n	e282 <_fputwc_r+0x1a>
    e2ce:	bf00      	nop

0000e2d0 <_wcsnrtombs_l>:
    e2d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e2d4:	b08b      	sub	sp, #44	; 0x2c
    e2d6:	e9dd 8a15 	ldrd	r8, sl, [sp, #84]	; 0x54
    e2da:	9f14      	ldr	r7, [sp, #80]	; 0x50
    e2dc:	9103      	str	r1, [sp, #12]
    e2de:	4681      	mov	r9, r0
    e2e0:	9205      	str	r2, [sp, #20]
    e2e2:	461e      	mov	r6, r3
    e2e4:	f1b8 0f00 	cmp.w	r8, #0
    e2e8:	d05c      	beq.n	e3a4 <_wcsnrtombs_l+0xd4>
    e2ea:	9b03      	ldr	r3, [sp, #12]
    e2ec:	2b00      	cmp	r3, #0
    e2ee:	d05e      	beq.n	e3ae <_wcsnrtombs_l+0xde>
    e2f0:	9b05      	ldr	r3, [sp, #20]
    e2f2:	681d      	ldr	r5, [r3, #0]
    e2f4:	2f00      	cmp	r7, #0
    e2f6:	d06a      	beq.n	e3ce <_wcsnrtombs_l+0xfe>
    e2f8:	1e74      	subs	r4, r6, #1
    e2fa:	b34e      	cbz	r6, e350 <_wcsnrtombs_l+0x80>
    e2fc:	9b03      	ldr	r3, [sp, #12]
    e2fe:	9304      	str	r3, [sp, #16]
    e300:	3d04      	subs	r5, #4
    e302:	2600      	movs	r6, #0
    e304:	9501      	str	r5, [sp, #4]
    e306:	e00b      	b.n	e320 <_wcsnrtombs_l+0x50>
    e308:	9b03      	ldr	r3, [sp, #12]
    e30a:	bb2b      	cbnz	r3, e358 <_wcsnrtombs_l+0x88>
    e30c:	9b01      	ldr	r3, [sp, #4]
    e30e:	681a      	ldr	r2, [r3, #0]
    e310:	2a00      	cmp	r2, #0
    e312:	d03a      	beq.n	e38a <_wcsnrtombs_l+0xba>
    e314:	45bc      	cmp	ip, r7
    e316:	d25c      	bcs.n	e3d2 <_wcsnrtombs_l+0x102>
    e318:	3c01      	subs	r4, #1
    e31a:	1c63      	adds	r3, r4, #1
    e31c:	4666      	mov	r6, ip
    e31e:	d017      	beq.n	e350 <_wcsnrtombs_l+0x80>
    e320:	f8d8 3000 	ldr.w	r3, [r8]
    e324:	9302      	str	r3, [sp, #8]
    e326:	9b01      	ldr	r3, [sp, #4]
    e328:	f8da 50e0 	ldr.w	r5, [sl, #224]	; 0xe0
    e32c:	f853 2f04 	ldr.w	r2, [r3, #4]!
    e330:	9301      	str	r3, [sp, #4]
    e332:	a907      	add	r1, sp, #28
    e334:	4643      	mov	r3, r8
    e336:	4648      	mov	r0, r9
    e338:	f8d8 b004 	ldr.w	fp, [r8, #4]
    e33c:	47a8      	blx	r5
    e33e:	1c42      	adds	r2, r0, #1
    e340:	d03a      	beq.n	e3b8 <_wcsnrtombs_l+0xe8>
    e342:	eb00 0c06 	add.w	ip, r0, r6
    e346:	45bc      	cmp	ip, r7
    e348:	d9de      	bls.n	e308 <_wcsnrtombs_l+0x38>
    e34a:	9b02      	ldr	r3, [sp, #8]
    e34c:	e9c8 3b00 	strd	r3, fp, [r8]
    e350:	4630      	mov	r0, r6
    e352:	b00b      	add	sp, #44	; 0x2c
    e354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e358:	2800      	cmp	r0, #0
    e35a:	dd0e      	ble.n	e37a <_wcsnrtombs_l+0xaa>
    e35c:	9b04      	ldr	r3, [sp, #16]
    e35e:	9d01      	ldr	r5, [sp, #4]
    e360:	4418      	add	r0, r3
    e362:	1e5a      	subs	r2, r3, #1
    e364:	a907      	add	r1, sp, #28
    e366:	f100 3eff 	add.w	lr, r0, #4294967295
    e36a:	f811 3b01 	ldrb.w	r3, [r1], #1
    e36e:	f802 3f01 	strb.w	r3, [r2, #1]!
    e372:	4572      	cmp	r2, lr
    e374:	d1f9      	bne.n	e36a <_wcsnrtombs_l+0x9a>
    e376:	9501      	str	r5, [sp, #4]
    e378:	9004      	str	r0, [sp, #16]
    e37a:	9b05      	ldr	r3, [sp, #20]
    e37c:	681a      	ldr	r2, [r3, #0]
    e37e:	3204      	adds	r2, #4
    e380:	601a      	str	r2, [r3, #0]
    e382:	9b01      	ldr	r3, [sp, #4]
    e384:	681a      	ldr	r2, [r3, #0]
    e386:	2a00      	cmp	r2, #0
    e388:	d1c4      	bne.n	e314 <_wcsnrtombs_l+0x44>
    e38a:	9b03      	ldr	r3, [sp, #12]
    e38c:	b10b      	cbz	r3, e392 <_wcsnrtombs_l+0xc2>
    e38e:	9b05      	ldr	r3, [sp, #20]
    e390:	601a      	str	r2, [r3, #0]
    e392:	f10c 36ff 	add.w	r6, ip, #4294967295
    e396:	2200      	movs	r2, #0
    e398:	4630      	mov	r0, r6
    e39a:	f8c8 2000 	str.w	r2, [r8]
    e39e:	b00b      	add	sp, #44	; 0x2c
    e3a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e3a4:	9b03      	ldr	r3, [sp, #12]
    e3a6:	f500 7886 	add.w	r8, r0, #268	; 0x10c
    e3aa:	2b00      	cmp	r3, #0
    e3ac:	d1a0      	bne.n	e2f0 <_wcsnrtombs_l+0x20>
    e3ae:	9b05      	ldr	r3, [sp, #20]
    e3b0:	f04f 37ff 	mov.w	r7, #4294967295
    e3b4:	681d      	ldr	r5, [r3, #0]
    e3b6:	e79f      	b.n	e2f8 <_wcsnrtombs_l+0x28>
    e3b8:	4606      	mov	r6, r0
    e3ba:	218a      	movs	r1, #138	; 0x8a
    e3bc:	2200      	movs	r2, #0
    e3be:	4630      	mov	r0, r6
    e3c0:	f8c9 1000 	str.w	r1, [r9]
    e3c4:	f8c8 2000 	str.w	r2, [r8]
    e3c8:	b00b      	add	sp, #44	; 0x2c
    e3ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e3ce:	463e      	mov	r6, r7
    e3d0:	e7be      	b.n	e350 <_wcsnrtombs_l+0x80>
    e3d2:	4666      	mov	r6, ip
    e3d4:	e7bc      	b.n	e350 <_wcsnrtombs_l+0x80>
    e3d6:	bf00      	nop

0000e3d8 <_wcsnrtombs_r>:
    e3d8:	b510      	push	{r4, lr}
    e3da:	b084      	sub	sp, #16
    e3dc:	4c05      	ldr	r4, [pc, #20]	; (e3f4 <_wcsnrtombs_r+0x1c>)
    e3de:	9806      	ldr	r0, [sp, #24]
    e3e0:	9000      	str	r0, [sp, #0]
    e3e2:	9807      	ldr	r0, [sp, #28]
    e3e4:	9001      	str	r0, [sp, #4]
    e3e6:	4804      	ldr	r0, [pc, #16]	; (e3f8 <_wcsnrtombs_r+0x20>)
    e3e8:	6800      	ldr	r0, [r0, #0]
    e3ea:	9402      	str	r4, [sp, #8]
    e3ec:	f7ff ff70 	bl	e2d0 <_wcsnrtombs_l>
    e3f0:	b004      	add	sp, #16
    e3f2:	bd10      	pop	{r4, pc}
    e3f4:	20007c70 	.word	0x20007c70
    e3f8:	200081f8 	.word	0x200081f8

0000e3fc <category>:
    e3fc:	4b15      	ldr	r3, [pc, #84]	; (e454 <category+0x58>)
    e3fe:	4298      	cmp	r0, r3
    e400:	d823      	bhi.n	e44a <category+0x4e>
    e402:	b570      	push	{r4, r5, r6, lr}
    e404:	4e14      	ldr	r6, [pc, #80]	; (e458 <category+0x5c>)
    e406:	f04f 0e00 	mov.w	lr, #0
    e40a:	f640 04db 	movw	r4, #2267	; 0x8db
    e40e:	e003      	b.n	e418 <category+0x1c>
    e410:	f102 0e01 	add.w	lr, r2, #1
    e414:	45a6      	cmp	lr, r4
    e416:	dc16      	bgt.n	e446 <category+0x4a>
    e418:	eb04 020e 	add.w	r2, r4, lr
    e41c:	f022 0301 	bic.w	r3, r2, #1
    e420:	eb03 0362 	add.w	r3, r3, r2, asr #1
    e424:	eb06 0343 	add.w	r3, r6, r3, lsl #1
    e428:	1052      	asrs	r2, r2, #1
    e42a:	7859      	ldrb	r1, [r3, #1]
    e42c:	885d      	ldrh	r5, [r3, #2]
    e42e:	f8b3 c004 	ldrh.w	ip, [r3, #4]
    e432:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
    e436:	448c      	add	ip, r1
    e438:	4560      	cmp	r0, ip
    e43a:	d8e9      	bhi.n	e410 <category+0x14>
    e43c:	4288      	cmp	r0, r1
    e43e:	d206      	bcs.n	e44e <category+0x52>
    e440:	1e54      	subs	r4, r2, #1
    e442:	45a6      	cmp	lr, r4
    e444:	dde8      	ble.n	e418 <category+0x1c>
    e446:	20ff      	movs	r0, #255	; 0xff
    e448:	bd70      	pop	{r4, r5, r6, pc}
    e44a:	20ff      	movs	r0, #255	; 0xff
    e44c:	4770      	bx	lr
    e44e:	7818      	ldrb	r0, [r3, #0]
    e450:	bd70      	pop	{r4, r5, r6, pc}
    e452:	bf00      	nop
    e454:	000e01ef 	.word	0x000e01ef
    e458:	200023a0 	.word	0x200023a0

0000e45c <__smakebuf_r>:
    e45c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e460:	898b      	ldrh	r3, [r1, #12]
    e462:	460c      	mov	r4, r1
    e464:	0799      	lsls	r1, r3, #30
    e466:	b096      	sub	sp, #88	; 0x58
    e468:	d508      	bpl.n	e47c <__smakebuf_r+0x20>
    e46a:	f104 0343 	add.w	r3, r4, #67	; 0x43
    e46e:	2201      	movs	r2, #1
    e470:	e9c4 3204 	strd	r3, r2, [r4, #16]
    e474:	6023      	str	r3, [r4, #0]
    e476:	b016      	add	sp, #88	; 0x58
    e478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e47c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    e480:	2900      	cmp	r1, #0
    e482:	4606      	mov	r6, r0
    e484:	db25      	blt.n	e4d2 <__smakebuf_r+0x76>
    e486:	466a      	mov	r2, sp
    e488:	f000 f8ac 	bl	e5e4 <_fstat_r>
    e48c:	2800      	cmp	r0, #0
    e48e:	db1f      	blt.n	e4d0 <__smakebuf_r+0x74>
    e490:	9d01      	ldr	r5, [sp, #4]
    e492:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
    e496:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
    e49a:	fab5 f585 	clz	r5, r5
    e49e:	f44f 6880 	mov.w	r8, #1024	; 0x400
    e4a2:	096d      	lsrs	r5, r5, #5
    e4a4:	f44f 6700 	mov.w	r7, #2048	; 0x800
    e4a8:	4641      	mov	r1, r8
    e4aa:	4630      	mov	r0, r6
    e4ac:	f7f5 fd92 	bl	3fd4 <_malloc_r>
    e4b0:	b1e0      	cbz	r0, e4ec <__smakebuf_r+0x90>
    e4b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    e4b6:	f8c4 8014 	str.w	r8, [r4, #20]
    e4ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    e4be:	6020      	str	r0, [r4, #0]
    e4c0:	6120      	str	r0, [r4, #16]
    e4c2:	81a3      	strh	r3, [r4, #12]
    e4c4:	bb35      	cbnz	r5, e514 <__smakebuf_r+0xb8>
    e4c6:	433b      	orrs	r3, r7
    e4c8:	81a3      	strh	r3, [r4, #12]
    e4ca:	b016      	add	sp, #88	; 0x58
    e4cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e4d0:	89a3      	ldrh	r3, [r4, #12]
    e4d2:	f013 0580 	ands.w	r5, r3, #128	; 0x80
    e4d6:	d019      	beq.n	e50c <__smakebuf_r+0xb0>
    e4d8:	f04f 0840 	mov.w	r8, #64	; 0x40
    e4dc:	2500      	movs	r5, #0
    e4de:	4641      	mov	r1, r8
    e4e0:	4630      	mov	r0, r6
    e4e2:	462f      	mov	r7, r5
    e4e4:	f7f5 fd76 	bl	3fd4 <_malloc_r>
    e4e8:	2800      	cmp	r0, #0
    e4ea:	d1e2      	bne.n	e4b2 <__smakebuf_r+0x56>
    e4ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    e4f0:	059a      	lsls	r2, r3, #22
    e4f2:	d4c0      	bmi.n	e476 <__smakebuf_r+0x1a>
    e4f4:	f023 0303 	bic.w	r3, r3, #3
    e4f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
    e4fc:	f043 0302 	orr.w	r3, r3, #2
    e500:	2101      	movs	r1, #1
    e502:	e9c4 2104 	strd	r2, r1, [r4, #16]
    e506:	81a3      	strh	r3, [r4, #12]
    e508:	6022      	str	r2, [r4, #0]
    e50a:	e7b4      	b.n	e476 <__smakebuf_r+0x1a>
    e50c:	f44f 6880 	mov.w	r8, #1024	; 0x400
    e510:	462f      	mov	r7, r5
    e512:	e7c9      	b.n	e4a8 <__smakebuf_r+0x4c>
    e514:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    e518:	4630      	mov	r0, r6
    e51a:	f000 f879 	bl	e610 <_isatty_r>
    e51e:	b910      	cbnz	r0, e526 <__smakebuf_r+0xca>
    e520:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    e524:	e7cf      	b.n	e4c6 <__smakebuf_r+0x6a>
    e526:	89a3      	ldrh	r3, [r4, #12]
    e528:	f023 0303 	bic.w	r3, r3, #3
    e52c:	f043 0301 	orr.w	r3, r3, #1
    e530:	b21b      	sxth	r3, r3
    e532:	e7c8      	b.n	e4c6 <__smakebuf_r+0x6a>

0000e534 <__swbuf_r>:
    e534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e536:	460d      	mov	r5, r1
    e538:	4614      	mov	r4, r2
    e53a:	4606      	mov	r6, r0
    e53c:	b110      	cbz	r0, e544 <__swbuf_r+0x10>
    e53e:	6b43      	ldr	r3, [r0, #52]	; 0x34
    e540:	2b00      	cmp	r3, #0
    e542:	d04c      	beq.n	e5de <__swbuf_r+0xaa>
    e544:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    e548:	69a3      	ldr	r3, [r4, #24]
    e54a:	60a3      	str	r3, [r4, #8]
    e54c:	0717      	lsls	r7, r2, #28
    e54e:	b290      	uxth	r0, r2
    e550:	d51b      	bpl.n	e58a <__swbuf_r+0x56>
    e552:	6923      	ldr	r3, [r4, #16]
    e554:	b1cb      	cbz	r3, e58a <__swbuf_r+0x56>
    e556:	b2ed      	uxtb	r5, r5
    e558:	0481      	lsls	r1, r0, #18
    e55a:	462f      	mov	r7, r5
    e55c:	d522      	bpl.n	e5a4 <__swbuf_r+0x70>
    e55e:	6822      	ldr	r2, [r4, #0]
    e560:	6961      	ldr	r1, [r4, #20]
    e562:	1ad3      	subs	r3, r2, r3
    e564:	4299      	cmp	r1, r3
    e566:	dd29      	ble.n	e5bc <__swbuf_r+0x88>
    e568:	3301      	adds	r3, #1
    e56a:	68a1      	ldr	r1, [r4, #8]
    e56c:	3901      	subs	r1, #1
    e56e:	60a1      	str	r1, [r4, #8]
    e570:	1c51      	adds	r1, r2, #1
    e572:	6021      	str	r1, [r4, #0]
    e574:	7015      	strb	r5, [r2, #0]
    e576:	6962      	ldr	r2, [r4, #20]
    e578:	429a      	cmp	r2, r3
    e57a:	d027      	beq.n	e5cc <__swbuf_r+0x98>
    e57c:	89a3      	ldrh	r3, [r4, #12]
    e57e:	07db      	lsls	r3, r3, #31
    e580:	d501      	bpl.n	e586 <__swbuf_r+0x52>
    e582:	2d0a      	cmp	r5, #10
    e584:	d022      	beq.n	e5cc <__swbuf_r+0x98>
    e586:	4638      	mov	r0, r7
    e588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e58a:	4621      	mov	r1, r4
    e58c:	4630      	mov	r0, r6
    e58e:	f7ff fdaf 	bl	e0f0 <__swsetup_r>
    e592:	bb08      	cbnz	r0, e5d8 <__swbuf_r+0xa4>
    e594:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    e598:	6923      	ldr	r3, [r4, #16]
    e59a:	b290      	uxth	r0, r2
    e59c:	b2ed      	uxtb	r5, r5
    e59e:	0481      	lsls	r1, r0, #18
    e5a0:	462f      	mov	r7, r5
    e5a2:	d4dc      	bmi.n	e55e <__swbuf_r+0x2a>
    e5a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    e5a8:	81a2      	strh	r2, [r4, #12]
    e5aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
    e5ac:	6961      	ldr	r1, [r4, #20]
    e5ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
    e5b2:	6662      	str	r2, [r4, #100]	; 0x64
    e5b4:	6822      	ldr	r2, [r4, #0]
    e5b6:	1ad3      	subs	r3, r2, r3
    e5b8:	4299      	cmp	r1, r3
    e5ba:	dcd5      	bgt.n	e568 <__swbuf_r+0x34>
    e5bc:	4621      	mov	r1, r4
    e5be:	4630      	mov	r0, r6
    e5c0:	f7fc fe2c 	bl	b21c <_fflush_r>
    e5c4:	b940      	cbnz	r0, e5d8 <__swbuf_r+0xa4>
    e5c6:	6822      	ldr	r2, [r4, #0]
    e5c8:	2301      	movs	r3, #1
    e5ca:	e7ce      	b.n	e56a <__swbuf_r+0x36>
    e5cc:	4621      	mov	r1, r4
    e5ce:	4630      	mov	r0, r6
    e5d0:	f7fc fe24 	bl	b21c <_fflush_r>
    e5d4:	2800      	cmp	r0, #0
    e5d6:	d0d6      	beq.n	e586 <__swbuf_r+0x52>
    e5d8:	f04f 37ff 	mov.w	r7, #4294967295
    e5dc:	e7d3      	b.n	e586 <__swbuf_r+0x52>
    e5de:	f7f7 fa3f 	bl	5a60 <__sinit>
    e5e2:	e7af      	b.n	e544 <__swbuf_r+0x10>

0000e5e4 <_fstat_r>:
    e5e4:	b570      	push	{r4, r5, r6, lr}
    e5e6:	460c      	mov	r4, r1
    e5e8:	4d08      	ldr	r5, [pc, #32]	; (e60c <_fstat_r+0x28>)
    e5ea:	4603      	mov	r3, r0
    e5ec:	2600      	movs	r6, #0
    e5ee:	4620      	mov	r0, r4
    e5f0:	4611      	mov	r1, r2
    e5f2:	461c      	mov	r4, r3
    e5f4:	602e      	str	r6, [r5, #0]
    e5f6:	f7f4 f82b 	bl	2650 <_fstat>
    e5fa:	1c43      	adds	r3, r0, #1
    e5fc:	d000      	beq.n	e600 <_fstat_r+0x1c>
    e5fe:	bd70      	pop	{r4, r5, r6, pc}
    e600:	682b      	ldr	r3, [r5, #0]
    e602:	2b00      	cmp	r3, #0
    e604:	d0fb      	beq.n	e5fe <_fstat_r+0x1a>
    e606:	6023      	str	r3, [r4, #0]
    e608:	bd70      	pop	{r4, r5, r6, pc}
    e60a:	bf00      	nop
    e60c:	20008de4 	.word	0x20008de4

0000e610 <_isatty_r>:
    e610:	b538      	push	{r3, r4, r5, lr}
    e612:	4d07      	ldr	r5, [pc, #28]	; (e630 <_isatty_r+0x20>)
    e614:	2200      	movs	r2, #0
    e616:	4604      	mov	r4, r0
    e618:	4608      	mov	r0, r1
    e61a:	602a      	str	r2, [r5, #0]
    e61c:	f7f4 f81e 	bl	265c <_isatty>
    e620:	1c43      	adds	r3, r0, #1
    e622:	d000      	beq.n	e626 <_isatty_r+0x16>
    e624:	bd38      	pop	{r3, r4, r5, pc}
    e626:	682b      	ldr	r3, [r5, #0]
    e628:	2b00      	cmp	r3, #0
    e62a:	d0fb      	beq.n	e624 <_isatty_r+0x14>
    e62c:	6023      	str	r3, [r4, #0]
    e62e:	bd38      	pop	{r3, r4, r5, pc}
    e630:	20008de4 	.word	0x20008de4

0000e634 <__aeabi_drsub>:
    e634:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    e638:	e002      	b.n	e640 <__adddf3>
    e63a:	bf00      	nop

0000e63c <__aeabi_dsub>:
    e63c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000e640 <__adddf3>:
    e640:	b530      	push	{r4, r5, lr}
    e642:	ea4f 0441 	mov.w	r4, r1, lsl #1
    e646:	ea4f 0543 	mov.w	r5, r3, lsl #1
    e64a:	ea94 0f05 	teq	r4, r5
    e64e:	bf08      	it	eq
    e650:	ea90 0f02 	teqeq	r0, r2
    e654:	bf1f      	itttt	ne
    e656:	ea54 0c00 	orrsne.w	ip, r4, r0
    e65a:	ea55 0c02 	orrsne.w	ip, r5, r2
    e65e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    e662:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    e666:	f000 80e2 	beq.w	e82e <__adddf3+0x1ee>
    e66a:	ea4f 5454 	mov.w	r4, r4, lsr #21
    e66e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    e672:	bfb8      	it	lt
    e674:	426d      	neglt	r5, r5
    e676:	dd0c      	ble.n	e692 <__adddf3+0x52>
    e678:	442c      	add	r4, r5
    e67a:	ea80 0202 	eor.w	r2, r0, r2
    e67e:	ea81 0303 	eor.w	r3, r1, r3
    e682:	ea82 0000 	eor.w	r0, r2, r0
    e686:	ea83 0101 	eor.w	r1, r3, r1
    e68a:	ea80 0202 	eor.w	r2, r0, r2
    e68e:	ea81 0303 	eor.w	r3, r1, r3
    e692:	2d36      	cmp	r5, #54	; 0x36
    e694:	bf88      	it	hi
    e696:	bd30      	pophi	{r4, r5, pc}
    e698:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    e69c:	ea4f 3101 	mov.w	r1, r1, lsl #12
    e6a0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    e6a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    e6a8:	d002      	beq.n	e6b0 <__adddf3+0x70>
    e6aa:	4240      	negs	r0, r0
    e6ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    e6b0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    e6b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
    e6b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    e6bc:	d002      	beq.n	e6c4 <__adddf3+0x84>
    e6be:	4252      	negs	r2, r2
    e6c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    e6c4:	ea94 0f05 	teq	r4, r5
    e6c8:	f000 80a7 	beq.w	e81a <__adddf3+0x1da>
    e6cc:	f1a4 0401 	sub.w	r4, r4, #1
    e6d0:	f1d5 0e20 	rsbs	lr, r5, #32
    e6d4:	db0d      	blt.n	e6f2 <__adddf3+0xb2>
    e6d6:	fa02 fc0e 	lsl.w	ip, r2, lr
    e6da:	fa22 f205 	lsr.w	r2, r2, r5
    e6de:	1880      	adds	r0, r0, r2
    e6e0:	f141 0100 	adc.w	r1, r1, #0
    e6e4:	fa03 f20e 	lsl.w	r2, r3, lr
    e6e8:	1880      	adds	r0, r0, r2
    e6ea:	fa43 f305 	asr.w	r3, r3, r5
    e6ee:	4159      	adcs	r1, r3
    e6f0:	e00e      	b.n	e710 <__adddf3+0xd0>
    e6f2:	f1a5 0520 	sub.w	r5, r5, #32
    e6f6:	f10e 0e20 	add.w	lr, lr, #32
    e6fa:	2a01      	cmp	r2, #1
    e6fc:	fa03 fc0e 	lsl.w	ip, r3, lr
    e700:	bf28      	it	cs
    e702:	f04c 0c02 	orrcs.w	ip, ip, #2
    e706:	fa43 f305 	asr.w	r3, r3, r5
    e70a:	18c0      	adds	r0, r0, r3
    e70c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    e710:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    e714:	d507      	bpl.n	e726 <__adddf3+0xe6>
    e716:	f04f 0e00 	mov.w	lr, #0
    e71a:	f1dc 0c00 	rsbs	ip, ip, #0
    e71e:	eb7e 0000 	sbcs.w	r0, lr, r0
    e722:	eb6e 0101 	sbc.w	r1, lr, r1
    e726:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    e72a:	d31b      	bcc.n	e764 <__adddf3+0x124>
    e72c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    e730:	d30c      	bcc.n	e74c <__adddf3+0x10c>
    e732:	0849      	lsrs	r1, r1, #1
    e734:	ea5f 0030 	movs.w	r0, r0, rrx
    e738:	ea4f 0c3c 	mov.w	ip, ip, rrx
    e73c:	f104 0401 	add.w	r4, r4, #1
    e740:	ea4f 5244 	mov.w	r2, r4, lsl #21
    e744:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    e748:	f080 809a 	bcs.w	e880 <__adddf3+0x240>
    e74c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    e750:	bf08      	it	eq
    e752:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    e756:	f150 0000 	adcs.w	r0, r0, #0
    e75a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    e75e:	ea41 0105 	orr.w	r1, r1, r5
    e762:	bd30      	pop	{r4, r5, pc}
    e764:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    e768:	4140      	adcs	r0, r0
    e76a:	eb41 0101 	adc.w	r1, r1, r1
    e76e:	3c01      	subs	r4, #1
    e770:	bf28      	it	cs
    e772:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    e776:	d2e9      	bcs.n	e74c <__adddf3+0x10c>
    e778:	f091 0f00 	teq	r1, #0
    e77c:	bf04      	itt	eq
    e77e:	4601      	moveq	r1, r0
    e780:	2000      	moveq	r0, #0
    e782:	fab1 f381 	clz	r3, r1
    e786:	bf08      	it	eq
    e788:	3320      	addeq	r3, #32
    e78a:	f1a3 030b 	sub.w	r3, r3, #11
    e78e:	f1b3 0220 	subs.w	r2, r3, #32
    e792:	da0c      	bge.n	e7ae <__adddf3+0x16e>
    e794:	320c      	adds	r2, #12
    e796:	dd08      	ble.n	e7aa <__adddf3+0x16a>
    e798:	f102 0c14 	add.w	ip, r2, #20
    e79c:	f1c2 020c 	rsb	r2, r2, #12
    e7a0:	fa01 f00c 	lsl.w	r0, r1, ip
    e7a4:	fa21 f102 	lsr.w	r1, r1, r2
    e7a8:	e00c      	b.n	e7c4 <__adddf3+0x184>
    e7aa:	f102 0214 	add.w	r2, r2, #20
    e7ae:	bfd8      	it	le
    e7b0:	f1c2 0c20 	rsble	ip, r2, #32
    e7b4:	fa01 f102 	lsl.w	r1, r1, r2
    e7b8:	fa20 fc0c 	lsr.w	ip, r0, ip
    e7bc:	bfdc      	itt	le
    e7be:	ea41 010c 	orrle.w	r1, r1, ip
    e7c2:	4090      	lslle	r0, r2
    e7c4:	1ae4      	subs	r4, r4, r3
    e7c6:	bfa2      	ittt	ge
    e7c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    e7cc:	4329      	orrge	r1, r5
    e7ce:	bd30      	popge	{r4, r5, pc}
    e7d0:	ea6f 0404 	mvn.w	r4, r4
    e7d4:	3c1f      	subs	r4, #31
    e7d6:	da1c      	bge.n	e812 <__adddf3+0x1d2>
    e7d8:	340c      	adds	r4, #12
    e7da:	dc0e      	bgt.n	e7fa <__adddf3+0x1ba>
    e7dc:	f104 0414 	add.w	r4, r4, #20
    e7e0:	f1c4 0220 	rsb	r2, r4, #32
    e7e4:	fa20 f004 	lsr.w	r0, r0, r4
    e7e8:	fa01 f302 	lsl.w	r3, r1, r2
    e7ec:	ea40 0003 	orr.w	r0, r0, r3
    e7f0:	fa21 f304 	lsr.w	r3, r1, r4
    e7f4:	ea45 0103 	orr.w	r1, r5, r3
    e7f8:	bd30      	pop	{r4, r5, pc}
    e7fa:	f1c4 040c 	rsb	r4, r4, #12
    e7fe:	f1c4 0220 	rsb	r2, r4, #32
    e802:	fa20 f002 	lsr.w	r0, r0, r2
    e806:	fa01 f304 	lsl.w	r3, r1, r4
    e80a:	ea40 0003 	orr.w	r0, r0, r3
    e80e:	4629      	mov	r1, r5
    e810:	bd30      	pop	{r4, r5, pc}
    e812:	fa21 f004 	lsr.w	r0, r1, r4
    e816:	4629      	mov	r1, r5
    e818:	bd30      	pop	{r4, r5, pc}
    e81a:	f094 0f00 	teq	r4, #0
    e81e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    e822:	bf06      	itte	eq
    e824:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    e828:	3401      	addeq	r4, #1
    e82a:	3d01      	subne	r5, #1
    e82c:	e74e      	b.n	e6cc <__adddf3+0x8c>
    e82e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    e832:	bf18      	it	ne
    e834:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    e838:	d029      	beq.n	e88e <__adddf3+0x24e>
    e83a:	ea94 0f05 	teq	r4, r5
    e83e:	bf08      	it	eq
    e840:	ea90 0f02 	teqeq	r0, r2
    e844:	d005      	beq.n	e852 <__adddf3+0x212>
    e846:	ea54 0c00 	orrs.w	ip, r4, r0
    e84a:	bf04      	itt	eq
    e84c:	4619      	moveq	r1, r3
    e84e:	4610      	moveq	r0, r2
    e850:	bd30      	pop	{r4, r5, pc}
    e852:	ea91 0f03 	teq	r1, r3
    e856:	bf1e      	ittt	ne
    e858:	2100      	movne	r1, #0
    e85a:	2000      	movne	r0, #0
    e85c:	bd30      	popne	{r4, r5, pc}
    e85e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    e862:	d105      	bne.n	e870 <__adddf3+0x230>
    e864:	0040      	lsls	r0, r0, #1
    e866:	4149      	adcs	r1, r1
    e868:	bf28      	it	cs
    e86a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    e86e:	bd30      	pop	{r4, r5, pc}
    e870:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    e874:	bf3c      	itt	cc
    e876:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    e87a:	bd30      	popcc	{r4, r5, pc}
    e87c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    e880:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    e884:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    e888:	f04f 0000 	mov.w	r0, #0
    e88c:	bd30      	pop	{r4, r5, pc}
    e88e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    e892:	bf1a      	itte	ne
    e894:	4619      	movne	r1, r3
    e896:	4610      	movne	r0, r2
    e898:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    e89c:	bf1c      	itt	ne
    e89e:	460b      	movne	r3, r1
    e8a0:	4602      	movne	r2, r0
    e8a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    e8a6:	bf06      	itte	eq
    e8a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    e8ac:	ea91 0f03 	teqeq	r1, r3
    e8b0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    e8b4:	bd30      	pop	{r4, r5, pc}
    e8b6:	bf00      	nop

0000e8b8 <__aeabi_ui2d>:
    e8b8:	f090 0f00 	teq	r0, #0
    e8bc:	bf04      	itt	eq
    e8be:	2100      	moveq	r1, #0
    e8c0:	4770      	bxeq	lr
    e8c2:	b530      	push	{r4, r5, lr}
    e8c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
    e8c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
    e8cc:	f04f 0500 	mov.w	r5, #0
    e8d0:	f04f 0100 	mov.w	r1, #0
    e8d4:	e750      	b.n	e778 <__adddf3+0x138>
    e8d6:	bf00      	nop

0000e8d8 <__aeabi_i2d>:
    e8d8:	f090 0f00 	teq	r0, #0
    e8dc:	bf04      	itt	eq
    e8de:	2100      	moveq	r1, #0
    e8e0:	4770      	bxeq	lr
    e8e2:	b530      	push	{r4, r5, lr}
    e8e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
    e8e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
    e8ec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    e8f0:	bf48      	it	mi
    e8f2:	4240      	negmi	r0, r0
    e8f4:	f04f 0100 	mov.w	r1, #0
    e8f8:	e73e      	b.n	e778 <__adddf3+0x138>
    e8fa:	bf00      	nop

0000e8fc <__aeabi_f2d>:
    e8fc:	0042      	lsls	r2, r0, #1
    e8fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
    e902:	ea4f 0131 	mov.w	r1, r1, rrx
    e906:	ea4f 7002 	mov.w	r0, r2, lsl #28
    e90a:	bf1f      	itttt	ne
    e90c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    e910:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    e914:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    e918:	4770      	bxne	lr
    e91a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    e91e:	bf08      	it	eq
    e920:	4770      	bxeq	lr
    e922:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    e926:	bf04      	itt	eq
    e928:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    e92c:	4770      	bxeq	lr
    e92e:	b530      	push	{r4, r5, lr}
    e930:	f44f 7460 	mov.w	r4, #896	; 0x380
    e934:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    e938:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    e93c:	e71c      	b.n	e778 <__adddf3+0x138>
    e93e:	bf00      	nop

0000e940 <__aeabi_ul2d>:
    e940:	ea50 0201 	orrs.w	r2, r0, r1
    e944:	bf08      	it	eq
    e946:	4770      	bxeq	lr
    e948:	b530      	push	{r4, r5, lr}
    e94a:	f04f 0500 	mov.w	r5, #0
    e94e:	e00a      	b.n	e966 <__aeabi_l2d+0x16>

0000e950 <__aeabi_l2d>:
    e950:	ea50 0201 	orrs.w	r2, r0, r1
    e954:	bf08      	it	eq
    e956:	4770      	bxeq	lr
    e958:	b530      	push	{r4, r5, lr}
    e95a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    e95e:	d502      	bpl.n	e966 <__aeabi_l2d+0x16>
    e960:	4240      	negs	r0, r0
    e962:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    e966:	f44f 6480 	mov.w	r4, #1024	; 0x400
    e96a:	f104 0432 	add.w	r4, r4, #50	; 0x32
    e96e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    e972:	f43f aed8 	beq.w	e726 <__adddf3+0xe6>
    e976:	f04f 0203 	mov.w	r2, #3
    e97a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    e97e:	bf18      	it	ne
    e980:	3203      	addne	r2, #3
    e982:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    e986:	bf18      	it	ne
    e988:	3203      	addne	r2, #3
    e98a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    e98e:	f1c2 0320 	rsb	r3, r2, #32
    e992:	fa00 fc03 	lsl.w	ip, r0, r3
    e996:	fa20 f002 	lsr.w	r0, r0, r2
    e99a:	fa01 fe03 	lsl.w	lr, r1, r3
    e99e:	ea40 000e 	orr.w	r0, r0, lr
    e9a2:	fa21 f102 	lsr.w	r1, r1, r2
    e9a6:	4414      	add	r4, r2
    e9a8:	e6bd      	b.n	e726 <__adddf3+0xe6>
    e9aa:	bf00      	nop

0000e9ac <__aeabi_d2lz>:
    e9ac:	b508      	push	{r3, lr}
    e9ae:	4602      	mov	r2, r0
    e9b0:	460b      	mov	r3, r1
    e9b2:	ec43 2b17 	vmov	d7, r2, r3
    e9b6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    e9ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e9be:	d403      	bmi.n	e9c8 <__aeabi_d2lz+0x1c>
    e9c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    e9c4:	f000 b80c 	b.w	e9e0 <__aeabi_d2ulz>
    e9c8:	eeb1 7b47 	vneg.f64	d7, d7
    e9cc:	ec51 0b17 	vmov	r0, r1, d7
    e9d0:	f000 f806 	bl	e9e0 <__aeabi_d2ulz>
    e9d4:	4240      	negs	r0, r0
    e9d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    e9da:	bd08      	pop	{r3, pc}
    e9dc:	0000      	movs	r0, r0
	...

0000e9e0 <__aeabi_d2ulz>:
    e9e0:	ed9f 6b0b 	vldr	d6, [pc, #44]	; ea10 <__aeabi_d2ulz+0x30>
    e9e4:	ec41 0b17 	vmov	d7, r0, r1
    e9e8:	ed9f 5b0b 	vldr	d5, [pc, #44]	; ea18 <__aeabi_d2ulz+0x38>
    e9ec:	ee27 6b06 	vmul.f64	d6, d7, d6
    e9f0:	eebc 6bc6 	vcvt.u32.f64	s12, d6
    e9f4:	eeb8 4b46 	vcvt.f64.u32	d4, s12
    e9f8:	eea4 7b45 	vfms.f64	d7, d4, d5
    e9fc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    ea00:	ee16 1a10 	vmov	r1, s12
    ea04:	ee17 0a90 	vmov	r0, s15
    ea08:	4770      	bx	lr
    ea0a:	bf00      	nop
    ea0c:	f3af 8000 	nop.w
    ea10:	00000000 	.word	0x00000000
    ea14:	3df00000 	.word	0x3df00000
    ea18:	00000000 	.word	0x00000000
    ea1c:	41f00000 	.word	0x41f00000

0000ea20 <___reboot_Teensyduino__veneer>:
    ea20:	f85f f000 	ldr.w	pc, [pc]	; ea24 <___reboot_Teensyduino__veneer+0x4>
    ea24:	60001de1 	.word	0x60001de1

0000ea28 <___init_veneer>:
    ea28:	f85f f000 	ldr.w	pc, [pc]	; ea2c <___init_veneer+0x4>
    ea2c:	60001e35 	.word	0x60001e35

Disassembly of section .fini:

0000ea30 <_fini>:
    ea30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ea32:	bf00      	nop
