
C:\Users\johnw\AppData\Local\arduino\sketches\327AA1E20F62E69E5802DB70EF4C5A3B/MyApp.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
	if (dest == src) return;
	do {
		*dest++ = *src++;
	} while (dest < dest_end);
#else
	asm volatile(
60001400:	4281      	cmp	r1, r0
60001402:	d005      	beq.n	60001410 <memory_copy+0x10>
60001404:	f851 3b04 	ldr.w	r3, [r1], #4
60001408:	f840 3b04 	str.w	r3, [r0], #4
6000140c:	4282      	cmp	r2, r0
6000140e:	d8f9      	bhi.n	60001404 <memory_copy+0x4>
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	"2:					\n"
	: [dest] "+r" (dest), [src] "+r" (src) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001410:	4770      	bx	lr
60001412:	bf00      	nop

60001414 <memory_clear.constprop.0>:
#if 0
	while (dest < dest_end) {
		*dest++ = 0;
	}
#else
	asm volatile(
60001414:	4a04      	ldr	r2, [pc, #16]	; (60001428 <memory_clear.constprop.0+0x14>)
60001416:	4905      	ldr	r1, [pc, #20]	; (6000142c <memory_clear.constprop.0+0x18>)
60001418:	f04f 0300 	mov.w	r3, #0
6000141c:	f842 3b04 	str.w	r3, [r2], #4
60001420:	4291      	cmp	r1, r2
60001422:	d8fb      	bhi.n	6000141c <memory_clear.constprop.0+0x8>
	"1:	str.w	r3, [%[dest]], #4	\n"
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	: [dest] "+r" (dest) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001424:	4770      	bx	lr
60001426:	bf00      	nop
60001428:	200086c0 	.word	0x200086c0
6000142c:	20008ee0 	.word	0x20008ee0

60001430 <ResetHandler2>:
{
60001430:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	__asm__ volatile("dsb":::"memory");
60001434:	f3bf 8f4f 	dsb	sy
	asm volatile("nop");
60001438:	bf00      	nop
	asm volatile("nop");
6000143a:	bf00      	nop
	asm volatile("nop");
6000143c:	bf00      	nop
	asm volatile("nop");
6000143e:	bf00      	nop
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
60001440:	f000 f942 	bl	600016c8 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001444:	4b68      	ldr	r3, [pc, #416]	; (600015e8 <ResetHandler2+0x1b8>)
60001446:	2208      	movs	r2, #8
60001448:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	asm volatile("nop");
6000144c:	bf00      	nop
	asm volatile("nop");
6000144e:	bf00      	nop
	asm volatile("nop");
60001450:	bf00      	nop
	asm volatile("nop");
60001452:	bf00      	nop
	asm volatile("nop");
60001454:	bf00      	nop
	asm volatile("nop");
60001456:	bf00      	nop
	asm volatile("nop");
60001458:	bf00      	nop
	asm volatile("nop");
6000145a:	bf00      	nop
	asm volatile("nop");
6000145c:	bf00      	nop
	asm volatile("nop");
6000145e:	bf00      	nop
	asm volatile("nop");
60001460:	bf00      	nop
	asm volatile("nop");
60001462:	bf00      	nop
	asm volatile("nop");
60001464:	bf00      	nop
	asm volatile("nop");
60001466:	bf00      	nop
	asm volatile("nop");
60001468:	bf00      	nop
	asm volatile("nop");
6000146a:	bf00      	nop
	memory_copy(&_stext, &_stextload, &_etext);
6000146c:	4a5f      	ldr	r2, [pc, #380]	; (600015ec <ResetHandler2+0x1bc>)
6000146e:	4960      	ldr	r1, [pc, #384]	; (600015f0 <ResetHandler2+0x1c0>)
60001470:	4860      	ldr	r0, [pc, #384]	; (600015f4 <ResetHandler2+0x1c4>)
60001472:	f7ff ffc5 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001476:	4a60      	ldr	r2, [pc, #384]	; (600015f8 <ResetHandler2+0x1c8>)
60001478:	4960      	ldr	r1, [pc, #384]	; (600015fc <ResetHandler2+0x1cc>)
6000147a:	4861      	ldr	r0, [pc, #388]	; (60001600 <ResetHandler2+0x1d0>)
6000147c:	f7ff ffc0 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
60001480:	4c60      	ldr	r4, [pc, #384]	; (60001604 <ResetHandler2+0x1d4>)
60001482:	f7ff ffc7 	bl	60001414 <memory_clear.constprop.0>
	SCB_CPACR = 0x00F00000;
60001486:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
6000148a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000148e:	2300      	movs	r3, #0
60001490:	4a5d      	ldr	r2, [pc, #372]	; (60001608 <ResetHandler2+0x1d8>)
	SCB_CPACR = 0x00F00000;
60001492:	f8c1 0d88 	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001496:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
6000149a:	3301      	adds	r3, #1
6000149c:	2bb0      	cmp	r3, #176	; 0xb0
6000149e:	d1fa      	bne.n	60001496 <ResetHandler2+0x66>
600014a0:	4b5a      	ldr	r3, [pc, #360]	; (6000160c <ResetHandler2+0x1dc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600014a2:	2180      	movs	r1, #128	; 0x80
600014a4:	4a5a      	ldr	r2, [pc, #360]	; (60001610 <ResetHandler2+0x1e0>)
600014a6:	f803 1b01 	strb.w	r1, [r3], #1
600014aa:	4293      	cmp	r3, r2
600014ac:	d1fb      	bne.n	600014a6 <ResetHandler2+0x76>
	SCB_VTOR = (uint32_t)_VectorsRam;
600014ae:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014b2:	4e4d      	ldr	r6, [pc, #308]	; (600015e8 <ResetHandler2+0x1b8>)
600014b4:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014b8:	f8df b184 	ldr.w	fp, [pc, #388]	; 60001640 <ResetHandler2+0x210>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014bc:	f8df a184 	ldr.w	sl, [pc, #388]	; 60001644 <ResetHandler2+0x214>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014c0:	f04f 31ff 	mov.w	r1, #4294967295
	SCB_VTOR = (uint32_t)_VectorsRam;
600014c4:	f8c5 4d08 	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
600014c8:	2700      	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014ca:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014ce:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014d2:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014d6:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014da:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014de:	f8df 8168 	ldr.w	r8, [pc, #360]	; 60001648 <ResetHandler2+0x218>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014e6:	4a4b      	ldr	r2, [pc, #300]	; (60001614 <ResetHandler2+0x1e4>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e8:	f8c5 3d24 	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ec:	f8d8 301c 	ldr.w	r3, [r8, #28]
600014f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014f8:	f8c8 301c 	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014fc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
60001500:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
60001504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001508:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
6000150c:	6691      	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
6000150e:	66d1      	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001510:	6711      	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001512:	6751      	str	r1, [r2, #116]	; 0x74
	configure_cache();
60001514:	f000 f8e0 	bl	600016d8 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
60001518:	4b3f      	ldr	r3, [pc, #252]	; (60001618 <ResetHandler2+0x1e8>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000151a:	4940      	ldr	r1, [pc, #256]	; (6000161c <ResetHandler2+0x1ec>)
	_VectorsRam[14] = pendablesrvreq_isr;
6000151c:	63a3      	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
6000151e:	4b40      	ldr	r3, [pc, #256]	; (60001620 <ResetHandler2+0x1f0>)
60001520:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001522:	2363      	movs	r3, #99	; 0x63
60001524:	616b      	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001526:	2303      	movs	r3, #3
	SYST_CVR = 0;
60001528:	61af      	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000152a:	612b      	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000152c:	4b3d      	ldr	r3, [pc, #244]	; (60001624 <ResetHandler2+0x1f4>)
6000152e:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001532:	f8d5 3dfc 	ldr.w	r3, [r5, #3580]	; 0xdfc
60001536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000153a:	f8c5 3dfc 	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000153e:	4b3a      	ldr	r3, [pc, #232]	; (60001628 <ResetHandler2+0x1f8>)
60001540:	681a      	ldr	r2, [r3, #0]
60001542:	f042 0201 	orr.w	r2, r2, #1
60001546:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001548:	685b      	ldr	r3, [r3, #4]
6000154a:	600b      	str	r3, [r1, #0]
	usb_pll_start();	
6000154c:	f000 fb0e 	bl	60001b6c <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001550:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001554:	4835      	ldr	r0, [pc, #212]	; (6000162c <ResetHandler2+0x1fc>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001556:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000155a:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000155e:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001562:	f000 fc7d 	bl	60001e60 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001566:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
6000156a:	4b31      	ldr	r3, [pc, #196]	; (60001630 <ResetHandler2+0x200>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000156c:	4a31      	ldr	r2, [pc, #196]	; (60001634 <ResetHandler2+0x204>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000156e:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
60001572:	f8c8 106c 	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001576:	601f      	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001578:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000157c:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001580:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001584:	f8c3 7138 	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001588:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000158a:	07db      	lsls	r3, r3, #31
6000158c:	d408      	bmi.n	600015a0 <ResetHandler2+0x170>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000158e:	f642 6315 	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
60001592:	4929      	ldr	r1, [pc, #164]	; (60001638 <ResetHandler2+0x208>)
60001594:	6551      	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001596:	6513      	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001598:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000159a:	f043 0301 	orr.w	r3, r3, #1
6000159e:	6393      	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600015a0:	4a24      	ldr	r2, [pc, #144]	; (60001634 <ResetHandler2+0x204>)
600015a2:	4c26      	ldr	r4, [pc, #152]	; (6000163c <ResetHandler2+0x20c>)
600015a4:	6893      	ldr	r3, [r2, #8]
600015a6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
600015aa:	6093      	str	r3, [r2, #8]
	configure_external_ram();
600015ac:	f000 f91c 	bl	600017e8 <configure_external_ram>
	analog_init();
600015b0:	f000 f860 	bl	60001674 <analog_init>
	pwm_init();
600015b4:	f000 fc5c 	bl	60001e70 <__pwm_init_veneer>
	tempmon_init();
600015b8:	f000 fb06 	bl	60001bc8 <tempmon_init>
	startup_middle_hook();
600015bc:	f000 f886 	bl	600016cc <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
600015c0:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015c2:	2b13      	cmp	r3, #19
600015c4:	d9fc      	bls.n	600015c0 <ResetHandler2+0x190>
	usb_init();
600015c6:	f000 fb97 	bl	60001cf8 <usb_init>
600015ca:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015cc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015d0:	d3fb      	bcc.n	600015ca <ResetHandler2+0x19a>
	startup_debug_reset();
600015d2:	f000 f87f 	bl	600016d4 <startup_debug_reset>
	startup_late_hook();
600015d6:	f000 f87b 	bl	600016d0 <startup_default_late_hook>
	__libc_init_array();
600015da:	f000 fc35 	bl	60001e48 <____libc_init_array_veneer>
	main();
600015de:	f000 fc3b 	bl	60001e58 <__main_veneer>
	while (1) asm("WFI");
600015e2:	bf30      	wfi
600015e4:	e7fd      	b.n	600015e2 <ResetHandler2+0x1b2>
600015e6:	bf00      	nop
600015e8:	400d8000 	.word	0x400d8000
600015ec:	0000e8b8 	.word	0x0000e8b8
600015f0:	60001f8c 	.word	0x60001f8c
600015f4:	00000000 	.word	0x00000000
600015f8:	200086c0 	.word	0x200086c0
600015fc:	60010848 	.word	0x60010848
60001600:	20000000 	.word	0x20000000
60001604:	20008400 	.word	0x20008400
60001608:	00002319 	.word	0x00002319
6000160c:	e000e400 	.word	0xe000e400
60001610:	e000e4a0 	.word	0xe000e4a0
60001614:	400ac000 	.word	0x400ac000
60001618:	00003739 	.word	0x00003739
6000161c:	20008e68 	.word	0x20008e68
60001620:	0000373d 	.word	0x0000373d
60001624:	20200000 	.word	0x20200000
60001628:	e0001000 	.word	0xe0001000
6000162c:	23c34600 	.word	0x23c34600
60001630:	40084000 	.word	0x40084000
60001634:	400d4000 	.word	0x400d4000
60001638:	56c00000 	.word	0x56c00000
6000163c:	20008e6c 	.word	0x20008e6c
60001640:	2018101b 	.word	0x2018101b
60001644:	13110d0c 	.word	0x13110d0c
60001648:	400fc000 	.word	0x400fc000

6000164c <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000164c:	4b05      	ldr	r3, [pc, #20]	; (60001664 <ResetHandler+0x18>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000164e:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001652:	4a05      	ldr	r2, [pc, #20]	; (60001668 <ResetHandler+0x1c>)
	IOMUXC_GPR_GPR16 = 0x00200007;
60001654:	4805      	ldr	r0, [pc, #20]	; (6000166c <ResetHandler+0x20>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001656:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001658:	6418      	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
6000165a:	4a05      	ldr	r2, [pc, #20]	; (60001670 <ResetHandler+0x24>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000165c:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
6000165e:	4695      	mov	sp, r2
	ResetHandler2();
60001660:	f7ff fee6 	bl	60001430 <ResetHandler2>
60001664:	400ac000 	.word	0x400ac000
60001668:	aaaaaaaf 	.word	0xaaaaaaaf
6000166c:	00200007 	.word	0x00200007
60001670:	20070000 	.word	0x20070000

60001674 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001674:	4b10      	ldr	r3, [pc, #64]	; (600016b8 <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001676:	20a0      	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001678:	4a10      	ldr	r2, [pc, #64]	; (600016bc <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000167a:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
6000167c:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
{
60001680:	b410      	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001682:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001684:	f240 6437 	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001688:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
6000168a:	f441 7140 	orr.w	r1, r1, #768	; 0x300
6000168e:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001690:	6454      	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001692:	6490      	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
60001694:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001696:	061b      	lsls	r3, r3, #24
60001698:	d4fc      	bmi.n	60001694 <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
6000169a:	4a09      	ldr	r2, [pc, #36]	; (600016c0 <analog_init+0x4c>)
6000169c:	f240 6137 	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600016a0:	23a0      	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600016a2:	6451      	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600016a4:	6493      	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
600016a6:	6c93      	ldr	r3, [r2, #72]	; 0x48
600016a8:	f013 0380 	ands.w	r3, r3, #128	; 0x80
600016ac:	d1fb      	bne.n	600016a6 <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
600016ae:	4a05      	ldr	r2, [pc, #20]	; (600016c4 <analog_init+0x50>)
600016b0:	7013      	strb	r3, [r2, #0]
}
600016b2:	f85d 4b04 	ldr.w	r4, [sp], #4
600016b6:	4770      	bx	lr
600016b8:	400fc000 	.word	0x400fc000
600016bc:	400c4000 	.word	0x400c4000
600016c0:	400c8000 	.word	0x400c8000
600016c4:	20008e9b 	.word	0x20008e9b

600016c8 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
600016c8:	4770      	bx	lr
600016ca:	bf00      	nop

600016cc <startup_default_middle_hook>:
600016cc:	4770      	bx	lr
600016ce:	bf00      	nop

600016d0 <startup_default_late_hook>:
600016d0:	4770      	bx	lr
600016d2:	bf00      	nop

600016d4 <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
600016d4:	bf00      	nop
600016d6:	4770      	bx	lr

600016d8 <configure_cache>:
{
600016d8:	b410      	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
600016da:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
600016de:	2100      	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600016e0:	2410      	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600016e2:	4831      	ldr	r0, [pc, #196]	; (600017a8 <configure_cache+0xd0>)
	SCB_MPU_CTRL = 0; // turn off MPU
600016e4:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600016e8:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600016ec:	2411      	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600016ee:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
600016f2:	482e      	ldr	r0, [pc, #184]	; (600017ac <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600016f4:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600016f8:	2412      	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
600016fa:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600016fe:	482c      	ldr	r0, [pc, #176]	; (600017b0 <configure_cache+0xd8>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001700:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001704:	4a2b      	ldr	r2, [pc, #172]	; (600017b4 <configure_cache+0xdc>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001706:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
6000170a:	4c2b      	ldr	r4, [pc, #172]	; (600017b8 <configure_cache+0xe0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
6000170c:	f042 0215 	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001710:	482a      	ldr	r0, [pc, #168]	; (600017bc <configure_cache+0xe4>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001712:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001716:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
6000171a:	4c29      	ldr	r4, [pc, #164]	; (600017c0 <configure_cache+0xe8>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
6000171c:	4829      	ldr	r0, [pc, #164]	; (600017c4 <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
6000171e:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001722:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001726:	4c28      	ldr	r4, [pc, #160]	; (600017c8 <configure_cache+0xf0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001728:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
6000172c:	4827      	ldr	r0, [pc, #156]	; (600017cc <configure_cache+0xf4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
6000172e:	4a28      	ldr	r2, [pc, #160]	; (600017d0 <configure_cache+0xf8>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001730:	f8c3 4da0 	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001734:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001738:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
6000173c:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001740:	4c24      	ldr	r4, [pc, #144]	; (600017d4 <configure_cache+0xfc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001742:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001744:	4824      	ldr	r0, [pc, #144]	; (600017d8 <configure_cache+0x100>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001746:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
6000174a:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
6000174e:	4a23      	ldr	r2, [pc, #140]	; (600017dc <configure_cache+0x104>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001750:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001754:	4c22      	ldr	r4, [pc, #136]	; (600017e0 <configure_cache+0x108>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001756:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
6000175a:	f102 6240 	add.w	r2, r2, #201326592	; 0xc000000
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000175e:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
60001762:	4820      	ldr	r0, [pc, #128]	; (600017e4 <configure_cache+0x10c>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001764:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
60001768:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
6000176a:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
6000176e:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	asm("nop"); // allow a few cycles for bus writes before enable MPU
60001772:	bf00      	nop
	asm("nop");
60001774:	bf00      	nop
	asm("nop");
60001776:	bf00      	nop
	asm("nop");
60001778:	bf00      	nop
	asm("nop");
6000177a:	bf00      	nop
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
6000177c:	2201      	movs	r2, #1
6000177e:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
60001782:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001786:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
6000178a:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
6000178e:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001792:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001796:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
}
6000179a:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000179e:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
600017a2:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
600017a6:	4770      	bx	lr
600017a8:	1000003f 	.word	0x1000003f
600017ac:	07080025 	.word	0x07080025
600017b0:	00100009 	.word	0x00100009
600017b4:	20008ee0 	.word	0x20008ee0
600017b8:	00200013 	.word	0x00200013
600017bc:	07020021 	.word	0x07020021
600017c0:	20000014 	.word	0x20000014
600017c4:	13080025 	.word	0x13080025
600017c8:	10000009 	.word	0x10000009
600017cc:	20200016 	.word	0x20200016
600017d0:	130b0027 	.word	0x130b0027
600017d4:	40000017 	.word	0x40000017
600017d8:	60000018 	.word	0x60000018
600017dc:	070b002f 	.word	0x070b002f
600017e0:	70000019 	.word	0x70000019
600017e4:	8000001a 	.word	0x8000001a

600017e8 <configure_external_ram>:
{
600017e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600017ea:	4bb8      	ldr	r3, [pc, #736]	; (60001acc <configure_external_ram+0x2e4>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
600017ec:	2218      	movs	r2, #24
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600017ee:	4eb8      	ldr	r6, [pc, #736]	; (60001ad0 <configure_external_ram+0x2e8>)
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600017f0:	2001      	movs	r0, #1
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
600017f2:	4fb8      	ldr	r7, [pc, #736]	; (60001ad4 <configure_external_ram+0x2ec>)
{
600017f4:	b083      	sub	sp, #12
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600017f6:	f8c3 625c 	str.w	r6, [r3, #604]	; 0x25c
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600017fa:	49b7      	ldr	r1, [pc, #732]	; (60001ad8 <configure_external_ram+0x2f0>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
600017fc:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001800:	4db6      	ldr	r5, [pc, #728]	; (60001adc <configure_external_ram+0x2f4>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001802:	f8c3 6264 	str.w	r6, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60001806:	f5a6 4630 	sub.w	r6, r6, #45056	; 0xb000
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
6000180a:	4cb5      	ldr	r4, [pc, #724]	; (60001ae0 <configure_external_ram+0x2f8>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
6000180c:	f8c3 6268 	str.w	r6, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001810:	f8c3 526c 	str.w	r5, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001814:	f8c3 5270 	str.w	r5, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001818:	f8c3 5274 	str.w	r5, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
6000181c:	f8c3 5278 	str.w	r5, [r3, #632]	; 0x278
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001820:	f248 750c 	movw	r5, #34572	; 0x870c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001824:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
60001826:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
60001828:	675a      	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
6000182a:	679a      	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
6000182c:	67da      	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
6000182e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
60001832:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
60001836:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
6000183a:	f8c1 032c 	str.w	r0, [r1, #812]	; 0x32c
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
6000183e:	4aa9      	ldr	r2, [pc, #676]	; (60001ae4 <configure_external_ram+0x2fc>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
60001840:	f8c1 0330 	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
60001844:	f8c1 0334 	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
60001848:	f8c1 0338 	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
6000184c:	f8c1 033c 	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
60001850:	f8c1 0350 	str.w	r0, [r1, #848]	; 0x350
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001854:	69a1      	ldr	r1, [r4, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001856:	4ba4      	ldr	r3, [pc, #656]	; (60001ae8 <configure_external_ram+0x300>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001858:	400a      	ands	r2, r1
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
6000185a:	48a4      	ldr	r0, [pc, #656]	; (60001aec <configure_external_ram+0x304>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000185c:	49a4      	ldr	r1, [pc, #656]	; (60001af0 <configure_external_ram+0x308>)
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
6000185e:	4313      	orrs	r3, r2
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001860:	4aa4      	ldr	r2, [pc, #656]	; (60001af4 <configure_external_ram+0x30c>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001862:	61a3      	str	r3, [r4, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60001864:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
60001868:	f043 030c 	orr.w	r3, r3, #12
6000186c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001870:	f04f 34ff 	mov.w	r4, #4294967295
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001874:	6803      	ldr	r3, [r0, #0]
60001876:	f043 0302 	orr.w	r3, r3, #2
6000187a:	6003      	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
6000187c:	6803      	ldr	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
6000187e:	402b      	ands	r3, r5
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001880:	f44f 5500 	mov.w	r5, #8192	; 0x2000
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001884:	431a      	orrs	r2, r3
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001886:	4b9c      	ldr	r3, [pc, #624]	; (60001af8 <configure_external_ram+0x310>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001888:	6002      	str	r2, [r0, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
6000188a:	6044      	str	r4, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000188c:	688a      	ldr	r2, [r1, #8]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000188e:	4c9b      	ldr	r4, [pc, #620]	; (60001afc <configure_external_ram+0x314>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001890:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001892:	4a9b      	ldr	r2, [pc, #620]	; (60001b00 <configure_external_ram+0x318>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001894:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001898:	6083      	str	r3, [r0, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
6000189a:	68c3      	ldr	r3, [r0, #12]
6000189c:	f023 0378 	bic.w	r3, r3, #120	; 0x78
600018a0:	60c3      	str	r3, [r0, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600018a2:	6a03      	ldr	r3, [r0, #32]
600018a4:	4013      	ands	r3, r2
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
600018a6:	4323      	orrs	r3, r4
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600018a8:	6203      	str	r3, [r0, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600018aa:	6a03      	ldr	r3, [r0, #32]
600018ac:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF2CR0 = mask;
600018ae:	4a95      	ldr	r2, [pc, #596]	; (60001b04 <configure_external_ram+0x31c>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
600018b0:	4323      	orrs	r3, r4
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
600018b2:	4c95      	ldr	r4, [pc, #596]	; (60001b08 <configure_external_ram+0x320>)
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600018b4:	6243      	str	r3, [r0, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
600018b6:	6282      	str	r2, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
600018b8:	62c2      	str	r2, [r0, #44]	; 0x2c
	FLEXSPI2_INTEN = 0;
600018ba:	2200      	movs	r2, #0
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
600018bc:	f8d1 30b8 	ldr.w	r3, [r1, #184]	; 0xb8
600018c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
600018c4:	f043 0301 	orr.w	r3, r3, #1
600018c8:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
600018cc:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600018d0:	498e      	ldr	r1, [pc, #568]	; (60001b0c <configure_external_ram+0x324>)
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
600018d2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
600018d6:	f043 0301 	orr.w	r3, r3, #1
600018da:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600018de:	f240 6305 	movw	r3, #1541	; 0x605
	FLEXSPI2_INTEN = 0;
600018e2:	6102      	str	r2, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
600018e4:	6605      	str	r5, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
600018e6:	6704      	str	r4, [r0, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600018e8:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
600018ec:	6645      	str	r5, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
600018ee:	6744      	str	r4, [r0, #116]	; 0x74
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600018f0:	2402      	movs	r4, #2
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600018f2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600018f6:	6803      	ldr	r3, [r0, #0]
600018f8:	f023 0302 	bic.w	r3, r3, #2
600018fc:	6003      	str	r3, [r0, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600018fe:	6181      	str	r1, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001900:	4b83      	ldr	r3, [pc, #524]	; (60001b10 <configure_external_ram+0x328>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001902:	4984      	ldr	r1, [pc, #528]	; (60001b14 <configure_external_ram+0x32c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001904:	61c4      	str	r4, [r0, #28]
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001906:	f843 2b04 	str.w	r2, [r3], #4
6000190a:	428b      	cmp	r3, r1
6000190c:	d1fb      	bne.n	60001906 <configure_external_ram+0x11e>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
6000190e:	4a77      	ldr	r2, [pc, #476]	; (60001aec <configure_external_ram+0x304>)
60001910:	6813      	ldr	r3, [r2, #0]
60001912:	f043 0301 	orr.w	r3, r3, #1
60001916:	6013      	str	r3, [r2, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
60001918:	6813      	ldr	r3, [r2, #0]
6000191a:	f013 0301 	ands.w	r3, r3, #1
6000191e:	d1fb      	bne.n	60001918 <configure_external_ram+0x130>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001920:	487a      	ldr	r0, [pc, #488]	; (60001b0c <configure_external_ram+0x324>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001922:	2102      	movs	r1, #2
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001924:	f240 64f5 	movw	r4, #1781	; 0x6f5
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001928:	6190      	str	r0, [r2, #24]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
6000192a:	f240 4099 	movw	r0, #1177	; 0x499
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
6000192e:	61d1      	str	r1, [r2, #28]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60001930:	f240 4166 	movw	r1, #1126	; 0x466
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001934:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001938:	f242 4401 	movw	r4, #9217	; 0x2401
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
6000193c:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60001940:	4975      	ldr	r1, [pc, #468]	; (60001b18 <configure_external_ram+0x330>)
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60001942:	f8c2 0220 	str.w	r0, [r2, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60001946:	f8c2 1230 	str.w	r1, [r2, #560]	; 0x230
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
6000194a:	f240 4135 	movw	r1, #1077	; 0x435
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
6000194e:	4873      	ldr	r0, [pc, #460]	; (60001b1c <configure_external_ram+0x334>)
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001950:	f8c2 4234 	str.w	r4, [r2, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001954:	f8c2 1240 	str.w	r1, [r2, #576]	; 0x240
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001958:	4c71      	ldr	r4, [pc, #452]	; (60001b20 <configure_external_ram+0x338>)
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
6000195a:	f8c2 0250 	str.w	r0, [r2, #592]	; 0x250
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
6000195e:	f242 2001 	movw	r0, #8705	; 0x2201
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001962:	4970      	ldr	r1, [pc, #448]	; (60001b24 <configure_external_ram+0x33c>)
60001964:	f8c2 1254 	str.w	r1, [r2, #596]	; 0x254
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001968:	2101      	movs	r1, #1
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
6000196a:	f8c2 4260 	str.w	r4, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
6000196e:	f8c2 0264 	str.w	r0, [r2, #612]	; 0x264
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001972:	485e      	ldr	r0, [pc, #376]	; (60001aec <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
60001974:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001978:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000197c:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001980:	6943      	ldr	r3, [r0, #20]
60001982:	07da      	lsls	r2, r3, #31
60001984:	d5fc      	bpl.n	60001980 <configure_external_ram+0x198>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001986:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001988:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000198a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000198e:	4957      	ldr	r1, [pc, #348]	; (60001aec <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001990:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
60001992:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001996:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000199a:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000199e:	694b      	ldr	r3, [r1, #20]
600019a0:	07db      	lsls	r3, r3, #31
600019a2:	d5fc      	bpl.n	6000199e <configure_external_ram+0x1b6>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019a4:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600019a6:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019a8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019ac:	4a4f      	ldr	r2, [pc, #316]	; (60001aec <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019ae:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
600019b0:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019b4:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019b8:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019bc:	6953      	ldr	r3, [r2, #20]
600019be:	07df      	lsls	r7, r3, #31
600019c0:	d5fc      	bpl.n	600019bc <configure_external_ram+0x1d4>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019c2:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600019c4:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600019c6:	4858      	ldr	r0, [pc, #352]	; (60001b28 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019c8:	4948      	ldr	r1, [pc, #288]	; (60001aec <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019ca:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
600019cc:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600019d0:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019d4:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019d8:	694b      	ldr	r3, [r1, #20]
600019da:	07de      	lsls	r6, r3, #31
600019dc:	d5fc      	bpl.n	600019d8 <configure_external_ram+0x1f0>
	uint32_t id = FLEXSPI2_RFDR0;
600019de:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
	if (flexspi2_psram_id(0) == 0x5D0D) {
600019e2:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600019e6:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
600019e8:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600019ea:	6148      	str	r0, [r1, #20]
	if (flexspi2_psram_id(0) == 0x5D0D) {
600019ec:	4293      	cmp	r3, r2
600019ee:	d165      	bne.n	60001abc <configure_external_ram+0x2d4>
	FLEXSPI2_IPCR0 = addr;
600019f0:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019f2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019f6:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019f8:	483c      	ldr	r0, [pc, #240]	; (60001aec <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
600019fa:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019fe:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a02:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a06:	6943      	ldr	r3, [r0, #20]
60001a08:	07dd      	lsls	r5, r3, #31
60001a0a:	d5fc      	bpl.n	60001a06 <configure_external_ram+0x21e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a0c:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001a0e:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a12:	2100      	movs	r1, #0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a14:	4a35      	ldr	r2, [pc, #212]	; (60001aec <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a16:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
60001a18:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a1c:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a20:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a24:	6953      	ldr	r3, [r2, #20]
60001a26:	07dc      	lsls	r4, r3, #31
60001a28:	d5fc      	bpl.n	60001a24 <configure_external_ram+0x23c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a2a:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001a2c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a30:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a34:	492d      	ldr	r1, [pc, #180]	; (60001aec <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a36:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001a38:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a3c:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a40:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a44:	694b      	ldr	r3, [r1, #20]
60001a46:	07d8      	lsls	r0, r3, #31
60001a48:	d5fc      	bpl.n	60001a44 <configure_external_ram+0x25c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a4a:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001a4c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a50:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a54:	4a25      	ldr	r2, [pc, #148]	; (60001aec <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a56:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60001a58:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a5c:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a60:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a64:	6953      	ldr	r3, [r2, #20]
60001a66:	07d9      	lsls	r1, r3, #31
60001a68:	d5fc      	bpl.n	60001a64 <configure_external_ram+0x27c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a6a:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001a6c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001a70:	482d      	ldr	r0, [pc, #180]	; (60001b28 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a72:	491e      	ldr	r1, [pc, #120]	; (60001aec <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a74:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001a76:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001a7a:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a7e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a82:	694b      	ldr	r3, [r1, #20]
60001a84:	07da      	lsls	r2, r3, #31
60001a86:	d5fc      	bpl.n	60001a82 <configure_external_ram+0x29a>
	uint32_t id = FLEXSPI2_RFDR0;
60001a88:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001a8c:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001a90:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60001a92:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001a94:	6148      	str	r0, [r1, #20]
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001a96:	4293      	cmp	r3, r2
60001a98:	d050      	beq.n	60001b3c <configure_external_ram+0x354>
60001a9a:	2508      	movs	r5, #8
60001a9c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
			external_psram_size * 0x100000 -
60001aa0:	4922      	ldr	r1, [pc, #136]	; (60001b2c <configure_external_ram+0x344>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001aa2:	2000      	movs	r0, #0
			external_psram_size * 0x100000 -
60001aa4:	4b22      	ldr	r3, [pc, #136]	; (60001b30 <configure_external_ram+0x348>)
			external_psram_size = 16;
60001aa6:	4a23      	ldr	r2, [pc, #140]	; (60001b34 <configure_external_ram+0x34c>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001aa8:	9000      	str	r0, [sp, #0]
			external_psram_size = 16;
60001aaa:	7015      	strb	r5, [r2, #0]
			external_psram_size * 0x100000 -
60001aac:	1a5a      	subs	r2, r3, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001aae:	2301      	movs	r3, #1
60001ab0:	4821      	ldr	r0, [pc, #132]	; (60001b38 <configure_external_ram+0x350>)
60001ab2:	4422      	add	r2, r4
60001ab4:	f000 f9cc 	bl	60001e50 <__sm_set_pool_veneer>
}
60001ab8:	b003      	add	sp, #12
60001aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001abc:	4b1e      	ldr	r3, [pc, #120]	; (60001b38 <configure_external_ram+0x350>)
60001abe:	2200      	movs	r2, #0
60001ac0:	e9c3 2200 	strd	r2, r2, [r3]
60001ac4:	e9c3 2202 	strd	r2, r2, [r3, #8]
}
60001ac8:	b003      	add	sp, #12
60001aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
60001acc:	401f8000 	.word	0x401f8000
60001ad0:	0001b0f9 	.word	0x0001b0f9
60001ad4:	000110f9 	.word	0x000110f9
60001ad8:	401f8400 	.word	0x401f8400
60001adc:	000170f9 	.word	0x000170f9
60001ae0:	400fc000 	.word	0x400fc000
60001ae4:	1ffffcff 	.word	0x1ffffcff
60001ae8:	a0000300 	.word	0xa0000300
60001aec:	402a4000 	.word	0x402a4000
60001af0:	402a8000 	.word	0x402a8000
60001af4:	ffff0012 	.word	0xffff0012
60001af8:	00f737ff 	.word	0x00f737ff
60001afc:	80000040 	.word	0x80000040
60001b00:	7cf0ff00 	.word	0x7cf0ff00
60001b04:	830f00ff 	.word	0x830f00ff
60001b08:	00020063 	.word	0x00020063
60001b0c:	5af05af0 	.word	0x5af05af0
60001b10:	402a4200 	.word	0x402a4200
60001b14:	402a4300 	.word	0x402a4300
60001b18:	3018049f 	.word	0x3018049f
60001b1c:	0a1806eb 	.word	0x0a1806eb
60001b20:	0a180638 	.word	0x0a180638
60001b24:	26013206 	.word	0x26013206
60001b28:	00030004 	.word	0x00030004
60001b2c:	70000000 	.word	0x70000000
60001b30:	70000000 	.word	0x70000000
60001b34:	20008e9c 	.word	0x20008e9c
60001b38:	20008de8 	.word	0x20008de8
	FLEXSPI2_IPCR0 = addr;
60001b3c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b40:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b44:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b46:	4808      	ldr	r0, [pc, #32]	; (60001b68 <configure_external_ram+0x380>)
	FLEXSPI2_IPCR0 = addr;
60001b48:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b4c:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b50:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b54:	6943      	ldr	r3, [r0, #20]
60001b56:	07db      	lsls	r3, r3, #31
60001b58:	d5fc      	bpl.n	60001b54 <configure_external_ram+0x36c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b5a:	2301      	movs	r3, #1
60001b5c:	2510      	movs	r5, #16
60001b5e:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
60001b62:	6143      	str	r3, [r0, #20]
			external_psram_size = 16;
60001b64:	e79c      	b.n	60001aa0 <configure_external_ram+0x2b8>
60001b66:	bf00      	nop
60001b68:	402a4000 	.word	0x402a4000

60001b6c <usb_pll_start>:
{
60001b6c:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001b6e:	4a15      	ldr	r2, [pc, #84]	; (60001bc4 <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001b70:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001b72:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001b76:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001b7a:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001b7e:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001b82:	f243 0042 	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001b86:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001b88:	f013 0f02 	tst.w	r3, #2
60001b8c:	d10e      	bne.n	60001bac <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001b8e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
60001b92:	d00f      	beq.n	60001bb4 <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001b94:	f413 5f80 	tst.w	r3, #4096	; 0x1000
60001b98:	d00e      	beq.n	60001bb8 <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001b9a:	2b00      	cmp	r3, #0
60001b9c:	daf3      	bge.n	60001b86 <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001b9e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
60001ba2:	d10b      	bne.n	60001bbc <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001ba4:	065b      	lsls	r3, r3, #25
60001ba6:	d50b      	bpl.n	60001bc0 <usb_pll_start+0x54>
}
60001ba8:	bcf0      	pop	{r4, r5, r6, r7}
60001baa:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001bac:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001bae:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001bb0:	6190      	str	r0, [r2, #24]
			continue;
60001bb2:	e7e8      	b.n	60001b86 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001bb4:	6155      	str	r5, [r2, #20]
			continue;
60001bb6:	e7e6      	b.n	60001b86 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001bb8:	6156      	str	r6, [r2, #20]
			continue;
60001bba:	e7e4      	b.n	60001b86 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001bbc:	6191      	str	r1, [r2, #24]
			continue;
60001bbe:	e7e2      	b.n	60001b86 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001bc0:	6157      	str	r7, [r2, #20]
			continue;
60001bc2:	e7e0      	b.n	60001b86 <usb_pll_start+0x1a>
60001bc4:	400d8000 	.word	0x400d8000

60001bc8 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001bc8:	4a3f      	ldr	r2, [pc, #252]	; (60001cc8 <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001bca:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001bcc:	493f      	ldr	r1, [pc, #252]	; (60001ccc <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001bce:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001bd2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001bd6:	f04f 0c00 	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bda:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 60001cd0 <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001bde:	f023 0301 	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001be2:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 60001cd4 <tempmon_init+0x10c>
{
60001be6:	b430      	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001be8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001bec:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60001bf0:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001bf4:	4d38      	ldr	r5, [pc, #224]	; (60001cd8 <tempmon_init+0x110>)
60001bf6:	b2cb      	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001bf8:	4c38      	ldr	r4, [pc, #224]	; (60001cdc <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001bfa:	4839      	ldr	r0, [pc, #228]	; (60001ce0 <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001bfc:	602b      	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001bfe:	ee07 3a90 	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001c02:	0d0b      	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001c04:	f3c1 210b 	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001c08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001c0c:	ee06 3a90 	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001c10:	ee07 1a10 	vmov	s14, r1
60001c14:	4b33      	ldr	r3, [pc, #204]	; (60001ce4 <tempmon_init+0x11c>)
60001c16:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001c1a:	6021      	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001c1c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c20:	4931      	ldr	r1, [pc, #196]	; (60001ce8 <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c22:	ee37 6ac6 	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c26:	ee37 5ac5 	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001c2a:	ee76 6ac7 	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001c2e:	ee77 7ae5 	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c32:	ee26 6a26 	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001c36:	edc3 6a00 	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c3a:	ee25 5a26 	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c3e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c42:	ee67 4aa6 	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001c46:	edc0 7a00 	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c4a:	eec6 5a27 	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001c4e:	4827      	ldr	r0, [pc, #156]	; (60001cec <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c50:	ee85 6a27 	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c54:	eec4 6aa7 	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c58:	ee75 5a87 	vadd.f32	s11, s11, s14
60001c5c:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c60:	ee36 6a07 	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c64:	ee15 4a90 	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c68:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c6c:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c70:	ee76 7a87 	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c74:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c78:	ee16 3a10 	vmov	r3, s12
60001c7c:	f8d2 4190 	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c84:	ea01 4103 	and.w	r1, r1, r3, lsl #16
60001c88:	4321      	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c8a:	ee17 3a90 	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c8e:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001c92:	f3c3 030b 	ubfx	r3, r3, #0, #12
60001c96:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
60001c9a:	430b      	orrs	r3, r1
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001c9c:	4914      	ldr	r1, [pc, #80]	; (60001cf0 <tempmon_init+0x128>)
60001c9e:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001ca2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
60001ca6:	f043 0302 	orr.w	r3, r3, #2
60001caa:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
60001cae:	4b11      	ldr	r3, [pc, #68]	; (60001cf4 <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001cb0:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
60001cb4:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001cb8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001cbc:	2201      	movs	r2, #1
}
60001cbe:	bc30      	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001cc0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
60001cc4:	4770      	bx	lr
60001cc6:	bf00      	nop
60001cc8:	400d8100 	.word	0x400d8100
60001ccc:	401f4400 	.word	0x401f4400
60001cd0:	42aa0000 	.word	0x42aa0000
60001cd4:	42b40000 	.word	0x42b40000
60001cd8:	20008e58 	.word	0x20008e58
60001cdc:	20008e54 	.word	0x20008e54
60001ce0:	20008e5c 	.word	0x20008e5c
60001ce4:	20008e60 	.word	0x20008e60
60001ce8:	0fff0000 	.word	0x0fff0000
60001cec:	e000e400 	.word	0xe000e400
60001cf0:	20008400 	.word	0x20008400
60001cf4:	00002501 	.word	0x00002501

60001cf8 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001cf8:	4b31      	ldr	r3, [pc, #196]	; (60001dc0 <usb_init+0xc8>)
60001cfa:	f640 7261 	movw	r2, #3937	; 0xf61
{
60001cfe:	b510      	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001d00:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001d04:	f240 4404 	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
60001d08:	f000 f8ae 	bl	60001e68 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001d0c:	4a2d      	ldr	r2, [pc, #180]	; (60001dc4 <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
60001d0e:	492e      	ldr	r1, [pc, #184]	; (60001dc8 <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001d10:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001d14:	482d      	ldr	r0, [pc, #180]	; (60001dcc <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001d16:	f043 0303 	orr.w	r3, r3, #3
60001d1a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001d1e:	4b2c      	ldr	r3, [pc, #176]	; (60001dd0 <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
60001d20:	f8c1 4160 	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001d24:	6802      	ldr	r2, [r0, #0]
60001d26:	421a      	tst	r2, r3
60001d28:	d103      	bne.n	60001d32 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
60001d2a:	f8d1 31a8 	ldr.w	r3, [r1, #424]	; 0x1a8
60001d2e:	079a      	lsls	r2, r3, #30
60001d30:	d01b      	beq.n	60001d6a <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001d32:	4a25      	ldr	r2, [pc, #148]	; (60001dc8 <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001d34:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
60001d38:	4b24      	ldr	r3, [pc, #144]	; (60001dcc <usb_init+0xd4>)
60001d3a:	6359      	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001d3c:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001d40:	f043 0302 	orr.w	r3, r3, #2
60001d44:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001d48:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001d4c:	079b      	lsls	r3, r3, #30
60001d4e:	d4fb      	bmi.n	60001d48 <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001d50:	f44f 3000 	mov.w	r0, #131072	; 0x20000
60001d54:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001d58:	4b1c      	ldr	r3, [pc, #112]	; (60001dcc <usb_init+0xd4>)
60001d5a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001d5e:	f8c1 028c 	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001d62:	2019      	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001d64:	639a      	str	r2, [r3, #56]	; 0x38
		delay(25);
60001d66:	f000 f887 	bl	60001e78 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001d6a:	4a18      	ldr	r2, [pc, #96]	; (60001dcc <usb_init+0xd4>)
60001d6c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001d70:	4c15      	ldr	r4, [pc, #84]	; (60001dc8 <usb_init+0xd0>)
	USBPHY1_PWD = 0;
60001d72:	2100      	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001d74:	6390      	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001d76:	200a      	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d78:	4b16      	ldr	r3, [pc, #88]	; (60001dd4 <usb_init+0xdc>)
	USBPHY1_PWD = 0;
60001d7a:	6011      	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d7c:	f44f 7220 	mov.w	r2, #640	; 0x280
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001d80:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d84:	4618      	mov	r0, r3
60001d86:	f000 f85b 	bl	60001e40 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
60001d8a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d8e:	4603      	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001d90:	f44f 0081 	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001d94:	f240 1143 	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001d98:	6018      	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001d9a:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
60001d9e:	641a      	str	r2, [r3, #64]	; 0x40
60001da0:	4b0d      	ldr	r3, [pc, #52]	; (60001dd8 <usb_init+0xe0>)
60001da2:	4a0e      	ldr	r2, [pc, #56]	; (60001ddc <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001da4:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
60001da8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001dac:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
60001db0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001db4:	2301      	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001db6:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
60001dba:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
60001dbe:	bd10      	pop	{r4, pc}
60001dc0:	400d8000 	.word	0x400d8000
60001dc4:	400fc000 	.word	0x400fc000
60001dc8:	402e0000 	.word	0x402e0000
60001dcc:	400d9000 	.word	0x400d9000
60001dd0:	001e1c00 	.word	0x001e1c00
60001dd4:	20000000 	.word	0x20000000
60001dd8:	20008400 	.word	0x20008400
60001ddc:	000026e9 	.word	0x000026e9

60001de0 <_reboot_Teensyduino_>:


FLASHMEM __attribute__((noinline)) void _reboot_Teensyduino_(void)
{
60001de0:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60001de2:	4b0e      	ldr	r3, [pc, #56]	; (60001e1c <_reboot_Teensyduino_+0x3c>)
60001de4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
60001de6:	079b      	lsls	r3, r3, #30
60001de8:	d400      	bmi.n	60001dec <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
60001dea:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60001dec:	b672      	cpsid	i
		USB1_USBCMD = 0;
60001dee:	4b0c      	ldr	r3, [pc, #48]	; (60001e20 <_reboot_Teensyduino_+0x40>)
60001df0:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
60001df2:	4a0c      	ldr	r2, [pc, #48]	; (60001e24 <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
60001df4:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001df8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001dfc:	490a      	ldr	r1, [pc, #40]	; (60001e28 <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001dfe:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001e02:	6411      	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001e04:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001e06:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001e0a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
60001e0e:	4807      	ldr	r0, [pc, #28]	; (60001e2c <_reboot_Teensyduino_+0x4c>)
60001e10:	4a07      	ldr	r2, [pc, #28]	; (60001e30 <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001e12:	69db      	ldr	r3, [r3, #28]
		*p = 0xEB120000;
60001e14:	6002      	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001e16:	689b      	ldr	r3, [r3, #8]
60001e18:	4798      	blx	r3
	}
	__builtin_unreachable();
60001e1a:	bf00      	nop
60001e1c:	401f4400 	.word	0x401f4400
60001e20:	402e0000 	.word	0x402e0000
60001e24:	400ac000 	.word	0x400ac000
60001e28:	00200003 	.word	0x00200003
60001e2c:	20208000 	.word	0x20208000
60001e30:	eb120000 	.word	0xeb120000

60001e34 <_init>:
60001e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60001e36:	bf00      	nop
60001e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
60001e3a:	bc08      	pop	{r3}
60001e3c:	469e      	mov	lr, r3
60001e3e:	4770      	bx	lr

60001e40 <__memset_veneer>:
60001e40:	f85f f000 	ldr.w	pc, [pc]	; 60001e44 <__memset_veneer+0x4>
60001e44:	00005ca9 	.word	0x00005ca9

60001e48 <____libc_init_array_veneer>:
60001e48:	f85f f000 	ldr.w	pc, [pc]	; 60001e4c <____libc_init_array_veneer+0x4>
60001e4c:	00005fed 	.word	0x00005fed

60001e50 <__sm_set_pool_veneer>:
60001e50:	f85f f000 	ldr.w	pc, [pc]	; 60001e54 <__sm_set_pool_veneer+0x4>
60001e54:	00003abd 	.word	0x00003abd

60001e58 <__main_veneer>:
60001e58:	f85f f000 	ldr.w	pc, [pc]	; 60001e5c <__main_veneer+0x4>
60001e5c:	00002001 	.word	0x00002001

60001e60 <__set_arm_clock_veneer>:
60001e60:	f85f f000 	ldr.w	pc, [pc]	; 60001e64 <__set_arm_clock_veneer+0x4>
60001e64:	0000375d 	.word	0x0000375d

60001e68 <__usb_init_serialnumber_veneer>:
60001e68:	f85f f000 	ldr.w	pc, [pc]	; 60001e6c <__usb_init_serialnumber_veneer+0x4>
60001e6c:	00002e59 	.word	0x00002e59

60001e70 <__pwm_init_veneer>:
60001e70:	f85f f000 	ldr.w	pc, [pc]	; 60001e74 <__pwm_init_veneer+0x4>
60001e74:	00002225 	.word	0x00002225

60001e78 <__delay_veneer>:
60001e78:	f85f f000 	ldr.w	pc, [pc]	; 60001e7c <__delay_veneer+0x4>
60001e7c:	00001c71 	.word	0x00001c71

60001e80 <__frame_dummy_init_array_entry>:
60001e80:	000000e5                                ....

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <flash_sector_not_erased>:
{
  int error = 0;
  uint32_t address = start;
  while (address < (start + size) && error == 0) { 
    if ((address & (FLASH_SECTOR_SIZE - 1)) == 0) {
      if (flash_sector_not_erased( address )) {
      20:	f420 607f 	bic.w	r0, r0, #4080	; 0xff0
      24:	f020 000f 	bic.w	r0, r0, #15
        #elif defined(KINETISK) || defined(KINETISL)
          error = flash_erase_sector( address, 0 );
	#endif
      }
    }
    address += FLASH_SECTOR_SIZE;
      28:	f500 5280 	add.w	r2, r0, #4096	; 0x1000
          eepromemu_flash_erase_sector( (void*)address );
      2c:	6803      	ldr	r3, [r0, #0]
      2e:	3004      	adds	r0, #4
  while (address < (start + size) && error == 0) { 
      30:	3301      	adds	r3, #1
      32:	d103      	bne.n	3c <_teensy_model_identifier+0x17>
  }
  return( error );
}
      34:	4290      	cmp	r0, r2
      36:	d1f9      	bne.n	2c <_teensy_model_identifier+0x7>
	SNVS_LPSRTCMR = t >> 17;
	// start the SRTC
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
	// start the RTC and sync it to the SRTC
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
      38:	2000      	movs	r0, #0
      3a:	4770      	bx	lr
      3c:	2001      	movs	r0, #1
      3e:	4770      	bx	lr

00000040 <flash_move>:
}
      40:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
      44:	4606      	mov	r6, r0
      46:	460d      	mov	r5, r1
		return 0;
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
      48:	4690      	mov	r8, r2
      4a:	2400      	movs	r4, #0
      4c:	4544      	cmp	r4, r8
      4e:	d214      	bcs.n	7a <flash_move+0x3a>
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
}
      50:	19a7      	adds	r7, r4, r6
      52:	f3c7 030b 	ubfx	r3, r7, #0, #12
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      56:	b933      	cbnz	r3, 66 <flash_move+0x26>
      58:	4638      	mov	r0, r7
      5a:	f7ff ffe1 	bl	20 <flash_sector_not_erased>
}
      5e:	b110      	cbz	r0, 66 <flash_move+0x26>
      60:	4638      	mov	r0, r7
      62:	f001 ff71 	bl	1f48 <eepromemu_flash_erase_sector>
      66:	2204      	movs	r2, #4
      68:	5963      	ldr	r3, [r4, r5]
      6a:	4638      	mov	r0, r7
    offset += FLASH_WRITE_SIZE;
      6c:	3404      	adds	r4, #4
      eepromemu_flash_write( (void*)addr, &value, 4 );
      6e:	eb0d 0102 	add.w	r1, sp, r2
      uint32_t value = *(uint32_t *)(src + offset);     
      72:	9301      	str	r3, [sp, #4]
      eepromemu_flash_write( (void*)addr, &value, 4 );
      74:	f001 fef2 	bl	1e5c <eepromemu_flash_write>
    offset += FLASH_WRITE_SIZE;
      78:	e7e8      	b.n	4c <flash_move+0xc>
  if (IN_FLASH(src)) {
      7a:	f105 4520 	add.w	r5, r5, #2684354560	; 0xa0000000
      7e:	f5b5 0f00 	cmp.w	r5, #8388608	; 0x800000
      82:	d208      	bcs.n	96 <flash_move+0x56>
    while (offset < (FLASH_SIZE - FLASH_RESERVE) && error == 0) {
      84:	4d0c      	ldr	r5, [pc, #48]	; (b8 <flash_move+0x78>)
      86:	e004      	b.n	92 <flash_move+0x52>
      addr = dst + offset;
      88:	19a1      	adds	r1, r4, r6
      if ((addr & (FLASH_SECTOR_SIZE - 1)) == 0) {
      8a:	f3c1 030b 	ubfx	r3, r1, #0, #12
      8e:	b143      	cbz	r3, a2 <flash_move+0x62>
      offset += FLASH_WRITE_SIZE;
      90:	3404      	adds	r4, #4
    while (offset < (FLASH_SIZE - FLASH_RESERVE) && error == 0) {
      92:	42ac      	cmp	r4, r5
      94:	d3f8      	bcc.n	88 <flash_move+0x48>
  REBOOT;
      96:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
      9a:	4a08      	ldr	r2, [pc, #32]	; (bc <flash_move+0x7c>)
      9c:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
      a0:	e008      	b.n	b4 <flash_move+0x74>
        if (flash_sector_not_erased( addr )) {
      a2:	4608      	mov	r0, r1
      a4:	f7ff ffbc 	bl	20 <flash_sector_not_erased>
      a8:	2800      	cmp	r0, #0
      aa:	d0f1      	beq.n	90 <flash_move+0x50>
            eepromemu_flash_erase_sector( (void*)addr );
      ac:	4608      	mov	r0, r1
      ae:	f001 ff4b 	bl	1f48 <eepromemu_flash_erase_sector>
      b2:	e7ed      	b.n	90 <flash_move+0x50>
  for (;;) {}
      b4:	e7fe      	b.n	b4 <flash_move+0x74>
      b6:	bf00      	nop
      b8:	007fc000 	.word	0x007fc000
      bc:	05fa0004 	.word	0x05fa0004

000000c0 <register_tm_clones>:
void HardwareSerialIMXRT::setRX(uint8_t pin)
{
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
	if (pin != hardware->rx_pins[rx_pin_index_].pin) {
		for (uint8_t rx_pin_new_index = 0; rx_pin_new_index < cnt_rx_pins; rx_pin_new_index++) {
			if (pin == hardware->rx_pins[rx_pin_new_index].pin) {
      c0:	4805      	ldr	r0, [pc, #20]	; (d8 <register_tm_clones+0x18>)
      c2:	4b06      	ldr	r3, [pc, #24]	; (dc <register_tm_clones+0x1c>)
      c4:	1a1b      	subs	r3, r3, r0
      c6:	0fd9      	lsrs	r1, r3, #31
      c8:	eb01 01a3 	add.w	r1, r1, r3, asr #2
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
	p->SM[submodule].VAL1 = newdiv - 1;
	p->SM[submodule].VAL0 = (p->SM[submodule].VAL0 * newdiv) / olddiv;
	p->SM[submodule].VAL3 = (p->SM[submodule].VAL3 * newdiv) / olddiv;
	p->SM[submodule].VAL5 = (p->SM[submodule].VAL5 * newdiv) / olddiv;
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
      cc:	1049      	asrs	r1, r1, #1
      ce:	d002      	beq.n	d6 <register_tm_clones+0x16>
}
      d0:	4b03      	ldr	r3, [pc, #12]	; (e0 <register_tm_clones+0x20>)
	while (newdiv > 65535 && prescale < 7) {
      d2:	b103      	cbz	r3, d6 <register_tm_clones+0x16>
      d4:	4718      	bx	r3
      d6:	4770      	bx	lr
      d8:	200086c0 	.word	0x200086c0
		char *writeTo = buffer;
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			unsigned int n = foundAt - readFrom;
			memcpy(writeTo, readFrom, n);
			writeTo += n;
			memcpy(writeTo, replace.buffer, replace.len);
      dc:	200086c0 	.word	0x200086c0
			writeTo += replace.len;
      e0:	00000000 	.word	0x00000000

000000e4 <frame_dummy>:
			readFrom = foundAt + find.len;
			len += diff;
      e4:	b508      	push	{r3, lr}
			writeTo += replace.len;
      e6:	4b05      	ldr	r3, [pc, #20]	; (fc <frame_dummy+0x18>)
			readFrom = foundAt + find.len;
      e8:	b11b      	cbz	r3, f2 <frame_dummy+0xe>
			len += diff;
      ea:	4905      	ldr	r1, [pc, #20]	; (100 <frame_dummy+0x1c>)
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
      ec:	4805      	ldr	r0, [pc, #20]	; (104 <frame_dummy+0x20>)
      ee:	f3af 8000 	nop.w
      f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			memcpy(writeTo, readFrom, n);
      f6:	f7ff bfe3 	b.w	c0 <register_tm_clones>
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
      fa:	bf00      	nop
      fc:	00000000 	.word	0x00000000
		}
		strcpy(writeTo, readFrom);
     100:	20008e04 	.word	0x20008e04
     104:	60019c00 	.word	0x60019c00

00000108 <usb_serial_class::available()>:
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
	// Returns the number of bytes which have been received from your PC and
	// can be fetched using Serial.read() or Serial.readBytes().
        virtual int available() { return usb_serial_available(); }
     108:	f003 b9a0 	b.w	344c <usb_serial_available>

0000010c <usb_serial_class::read()>:
	// Reads the next received byte, or returns -1 if nothing has been received
	// from your PC.
        virtual int read() { return usb_serial_getchar(); }
     10c:	f003 b9e2 	b.w	34d4 <usb_serial_getchar>

00000110 <hex_info_reset(hex_info_t*, char*)>:
	if (newbuffer) {
     110:	2300      	movs	r3, #0
     112:	f04f 32ff 	mov.w	r2, #4294967295
		capacity = maxStrLen;
     116:	e9c0 1300 	strd	r1, r3, [r0]
		return 1;
     11a:	e9c0 3302 	strd	r3, r3, [r0, #8]
void eeprom_write_byte(uint8_t *addr_ptr, uint8_t data)
{
	uint32_t addr = (uint32_t)addr_ptr;
	uint32_t sector, offset, index, i;
	uint16_t *p, *end;
	uint8_t olddata=0xFF;
     11e:	e9c0 3204 	strd	r3, r2, [r0, #16]
     122:	e9c0 3306 	strd	r3, r3, [r0, #24]
     126:	6203      	str	r3, [r0, #32]
     128:	4770      	bx	lr
     12a:	bf00      	nop

0000012c <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)>:
     12c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     130:	2400      	movs	r4, #0
     132:	b084      	sub	sp, #16
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
	mask = p->mask;
     134:	601c      	str	r4, [r3, #0]
	if (pinmode & mask) {
     136:	f890 c000 	ldrb.w	ip, [r0]
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     13a:	f1bc 0f3a 	cmp.w	ip, #58	; 0x3a
     13e:	d111      	bne.n	164 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0x38>
     140:	4605      	mov	r5, r0
     142:	461f      	mov	r7, r3
     144:	4688      	mov	r8, r1
     146:	4616      	mov	r6, r2
     148:	f006 f95a 	bl	6400 <strlen>
     14c:	280a      	cmp	r0, #10
     14e:	d803      	bhi.n	158 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0x2c>
     150:	4620      	mov	r0, r4
     152:	b004      	add	sp, #16
     154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     158:	aa01      	add	r2, sp, #4
     15a:	4929      	ldr	r1, [pc, #164]	; (200 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0xd4>)
			remainder -= n; 
		}
		count += write(buf, count);
	}
	return count;
}
     15c:	1c68      	adds	r0, r5, #1
     15e:	f005 fc15 	bl	598c <sscanf>
     162:	b918      	cbnz	r0, 16c <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0x40>
  out->printf("calling flash_move() to load new firmware...\n");
  out->flush();

  flash_move(FLASH_BASE_ADDR, buffer_addr, hex.max - hex.min);
  REBOOT; // should not return
}
     164:	2000      	movs	r0, #0
      out->printf("abort - invalid hex code %u\n", hex.code);
     166:	b004      	add	sp, #16
     168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     16c:	4628      	mov	r0, r5
     16e:	f006 f947 	bl	6400 <strlen>
}
     172:	9b01      	ldr	r3, [sp, #4]
     174:	005b      	lsls	r3, r3, #1
        out->printf("abort - max address %08lX too large\n", (unsigned long)hex.max);
     176:	330b      	adds	r3, #11
     178:	4298      	cmp	r0, r3
     17a:	d3f3      	bcc.n	164 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0x38>
     17c:	4632      	mov	r2, r6
     17e:	4921      	ldr	r1, [pc, #132]	; (204 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0xd8>)
}
     180:	1ce8      	adds	r0, r5, #3
     182:	f005 fc03 	bl	598c <sscanf>
    out->printf("abort - new code missing target ID %s\n", FLASH_ID);
     186:	2800      	cmp	r0, #0
     188:	d0ec      	beq.n	164 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0x38>
}
     18a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
     18c:	1de8      	adds	r0, r5, #7
     18e:	491c      	ldr	r1, [pc, #112]	; (200 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0xd4>)
    out->printf("abort - new code missing target ID %s\n", FLASH_ID);
     190:	f005 fbfc 	bl	598c <sscanf>
     194:	2800      	cmp	r0, #0
     196:	d0e5      	beq.n	164 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0x38>
     198:	9a0a      	ldr	r2, [sp, #40]	; 0x28
     19a:	3509      	adds	r5, #9
     19c:	9901      	ldr	r1, [sp, #4]
     19e:	7814      	ldrb	r4, [r2, #0]
     1a0:	6833      	ldr	r3, [r6, #0]
     1a2:	fa54 f481 	uxtab	r4, r4, r1
     1a6:	4e16      	ldr	r6, [pc, #88]	; (200 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0xd4>)
     1a8:	fa54 f483 	uxtab	r4, r4, r3
     1ac:	f3c3 2307 	ubfx	r3, r3, #8, #8
     1b0:	441c      	add	r4, r3
     1b2:	683b      	ldr	r3, [r7, #0]
     1b4:	e012      	b.n	1dc <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0xb0>
     1b6:	4631      	mov	r1, r6
     1b8:	3502      	adds	r5, #2
     1ba:	f005 fbe7 	bl	598c <sscanf>
     1be:	2800      	cmp	r0, #0
     1c0:	d0d0      	beq.n	164 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0x38>
     1c2:	683b      	ldr	r3, [r7, #0]
     1c4:	9a03      	ldr	r2, [sp, #12]
     1c6:	f808 2003 	strb.w	r2, [r8, r3]
     1ca:	683b      	ldr	r3, [r7, #0]
     1cc:	f818 2003 	ldrb.w	r2, [r8, r3]
    (*num)++;
     1d0:	3301      	adds	r3, #1
    if (*num >= 256) return 0;
     1d2:	2bff      	cmp	r3, #255	; 0xff
    sum += (unsigned)(bytes[*num] & 255);
     1d4:	4414      	add	r4, r2
    (*num)++;
     1d6:	603b      	str	r3, [r7, #0]
    if (*num >= 256) return 0;
     1d8:	d8c4      	bhi.n	164 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0x38>
  while (*num != len) {
     1da:	9901      	ldr	r1, [sp, #4]
     1dc:	428b      	cmp	r3, r1
    if (!sscanf(ptr, "%02x", &temp)) return 0;
     1de:	4628      	mov	r0, r5
     1e0:	aa03      	add	r2, sp, #12
  while (*num != len) {
     1e2:	d1e8      	bne.n	1b6 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0x8a>
  if (!sscanf(ptr, "%02x", &cksum)) return 0;
     1e4:	aa02      	add	r2, sp, #8
     1e6:	4906      	ldr	r1, [pc, #24]	; (200 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0xd4>)
     1e8:	f005 fbd0 	bl	598c <sscanf>
     1ec:	2800      	cmp	r0, #0
     1ee:	d0b9      	beq.n	164 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0x38>
  if (((sum & 255) + (cksum & 255)) & 255) return 0; // checksum error
     1f0:	9b02      	ldr	r3, [sp, #8]
     1f2:	441c      	add	r4, r3
     1f4:	b2e4      	uxtb	r4, r4
     1f6:	fab4 f084 	clz	r0, r4
     1fa:	0940      	lsrs	r0, r0, #5
     1fc:	e7b3      	b.n	166 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0x3a>
     1fe:	bf00      	nop
     200:	200003a4 	.word	0x200003a4
     204:	200003ac 	.word	0x200003ac

00000208 <process_hex_record(hex_info_t*)>:
  if (hex->code == 0u) { // data
     208:	6882      	ldr	r2, [r0, #8]
int process_hex_record(hex_info_t* hex) {
     20a:	4603      	mov	r3, r0
  if (hex->code == 0u) { // data
     20c:	b992      	cbnz	r2, 234 <process_hex_record(hex_info_t*)+0x2c>
    uint32_t end = hex->base + hex->addr + hex->num;
     20e:	e9d0 1203 	ldrd	r1, r2, [r0, #12]
int process_hex_record(hex_info_t* hex) {
     212:	b410      	push	{r4}
    uint32_t end = hex->base + hex->addr + hex->num;
     214:	685c      	ldr	r4, [r3, #4]
    if (end > hex->max) hex->max = end;
     216:	6980      	ldr	r0, [r0, #24]
    uint32_t end = hex->base + hex->addr + hex->num;
     218:	4422      	add	r2, r4
     21a:	4411      	add	r1, r2
    if (end > hex->max) hex->max = end;
     21c:	4288      	cmp	r0, r1
  return 0;
     21e:	f04f 0000 	mov.w	r0, #0
    if (end > hex->max) hex->max = end;
     222:	bf38      	it	cc
     224:	6199      	strcc	r1, [r3, #24]
    if (beg < hex->min) hex->min = beg;
     226:	6959      	ldr	r1, [r3, #20]
     228:	428a      	cmp	r2, r1
     22a:	d200      	bcs.n	22e <process_hex_record(hex_info_t*)+0x26>
     22c:	615a      	str	r2, [r3, #20]
}
     22e:	f85d 4b04 	ldr.w	r4, [sp], #4
     232:	4770      	bx	lr
  } else if (hex->code == 1u) { // EOF
     234:	3a01      	subs	r2, #1
     236:	2a04      	cmp	r2, #4
     238:	d81d      	bhi.n	276 <process_hex_record(hex_info_t*)+0x6e>
     23a:	e8df f002 	tbb	[pc, r2]
     23e:	0d09      	.short	0x0d09
     240:	151c      	.short	0x151c
     242:	03          	.byte	0x03
     243:	00          	.byte	0x00
    hex->base =  ((uint8_t)hex->data[0] << 24) |
     244:	6802      	ldr	r2, [r0, #0]
  return 0;
     246:	2000      	movs	r0, #0
     248:	6812      	ldr	r2, [r2, #0]
     24a:	ba12      	rev	r2, r2
    hex->base =  ((uint8_t)hex->data[0] << 24) |
     24c:	611a      	str	r2, [r3, #16]
     24e:	4770      	bx	lr
    hex->eof = 1;
     250:	2201      	movs	r2, #1
  return 0;
     252:	2000      	movs	r0, #0
    hex->eof = 1;
     254:	61da      	str	r2, [r3, #28]
     256:	4770      	bx	lr
    hex->base = (((uint8_t)hex->data[0] << 8) | (uint8_t)hex->data[1]) << 4;
     258:	6802      	ldr	r2, [r0, #0]
  return 0;
     25a:	2000      	movs	r0, #0
    hex->base = (((uint8_t)hex->data[0] << 8) | (uint8_t)hex->data[1]) << 4;
     25c:	8812      	ldrh	r2, [r2, #0]
     25e:	ba52      	rev16	r2, r2
     260:	b292      	uxth	r2, r2
     262:	0112      	lsls	r2, r2, #4
     264:	611a      	str	r2, [r3, #16]
     266:	4770      	bx	lr
    hex->base = (((uint8_t)hex->data[0] << 8) | (uint8_t)hex->data[1]) << 16;
     268:	6802      	ldr	r2, [r0, #0]
  return 0;
     26a:	2000      	movs	r0, #0
    hex->base = (((uint8_t)hex->data[0] << 8) | (uint8_t)hex->data[1]) << 16;
     26c:	8812      	ldrh	r2, [r2, #0]
     26e:	ba52      	rev16	r2, r2
     270:	0412      	lsls	r2, r2, #16
     272:	611a      	str	r2, [r3, #16]
     274:	4770      	bx	lr
  if (hex->code == 0u) { // data
     276:	2001      	movs	r0, #1
}
     278:	4770      	bx	lr

			int newPrecision = precision;
			int newDecimalPoint;

			// shift decimal point
			while (newPrecision > 0) {
     27a:	bf00      	nop

0000027c <firmware_buffer_init>:
  *buffer_addr = FLASH_BASE_ADDR + FLASH_SIZE - FLASH_RESERVE - 4;
     27c:	4a13      	ldr	r2, [pc, #76]	; (2cc <firmware_buffer_init+0x50>)
  while (*buffer_addr > 0 && *((uint32_t *)*buffer_addr) == 0xFFFFFFFF)
     27e:	4613      	mov	r3, r2
  *buffer_addr = FLASH_BASE_ADDR + FLASH_SIZE - FLASH_RESERVE - 4;
     280:	6002      	str	r2, [r0, #0]
  while (*buffer_addr > 0 && *((uint32_t *)*buffer_addr) == 0xFFFFFFFF)
     282:	e002      	b.n	28a <firmware_buffer_init+0xe>
    *buffer_addr -= 4;
     284:	3b04      	subs	r3, #4
     286:	6003      	str	r3, [r0, #0]
  while (*buffer_addr > 0 && *((uint32_t *)*buffer_addr) == 0xFFFFFFFF)
     288:	b163      	cbz	r3, 2a4 <firmware_buffer_init+0x28>
     28a:	681a      	ldr	r2, [r3, #0]
     28c:	3201      	adds	r2, #1
     28e:	d0f9      	beq.n	284 <firmware_buffer_init+0x8>
  *buffer_addr += 4; // first address above code
     290:	3304      	adds	r3, #4
  if ((*buffer_addr % FLASH_SECTOR_SIZE) > 0)
     292:	f3c3 020b 	ubfx	r2, r3, #0, #12
  *buffer_addr += 4; // first address above code
     296:	6003      	str	r3, [r0, #0]
  if ((*buffer_addr % FLASH_SECTOR_SIZE) > 0)
     298:	b95a      	cbnz	r2, 2b2 <firmware_buffer_init+0x36>
  *buffer_size = FLASH_BASE_ADDR - *buffer_addr + FLASH_SIZE - FLASH_RESERVE;
     29a:	4a0d      	ldr	r2, [pc, #52]	; (2d0 <firmware_buffer_init+0x54>)
}
     29c:	2001      	movs	r0, #1
  *buffer_size = FLASH_BASE_ADDR - *buffer_addr + FLASH_SIZE - FLASH_RESERVE;
     29e:	1ad2      	subs	r2, r2, r3
     2a0:	600a      	str	r2, [r1, #0]
}
     2a2:	4770      	bx	lr
     2a4:	4a0b      	ldr	r2, [pc, #44]	; (2d4 <firmware_buffer_init+0x58>)
     2a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    *buffer_addr += FLASH_SECTOR_SIZE - (*buffer_addr % FLASH_SECTOR_SIZE);
     2aa:	6003      	str	r3, [r0, #0]
}
     2ac:	2001      	movs	r0, #1
  *buffer_size = FLASH_BASE_ADDR - *buffer_addr + FLASH_SIZE - FLASH_RESERVE;
     2ae:	600a      	str	r2, [r1, #0]
}
     2b0:	4770      	bx	lr
{
     2b2:	b410      	push	{r4}
    *buffer_addr += FLASH_SECTOR_SIZE - (*buffer_addr % FLASH_SECTOR_SIZE);
     2b4:	4c08      	ldr	r4, [pc, #32]	; (2d8 <firmware_buffer_init+0x5c>)
  *buffer_size = FLASH_BASE_ADDR - *buffer_addr + FLASH_SIZE - FLASH_RESERVE;
     2b6:	4a07      	ldr	r2, [pc, #28]	; (2d4 <firmware_buffer_init+0x58>)
    *buffer_addr += FLASH_SECTOR_SIZE - (*buffer_addr % FLASH_SECTOR_SIZE);
     2b8:	401c      	ands	r4, r3
     2ba:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
  *buffer_size = FLASH_BASE_ADDR - *buffer_addr + FLASH_SIZE - FLASH_RESERVE;
     2be:	1b12      	subs	r2, r2, r4
}
     2c0:	f85d 4b04 	ldr.w	r4, [sp], #4
    *buffer_addr += FLASH_SECTOR_SIZE - (*buffer_addr % FLASH_SECTOR_SIZE);
     2c4:	6003      	str	r3, [r0, #0]
}
     2c6:	2001      	movs	r0, #1
  *buffer_size = FLASH_BASE_ADDR - *buffer_addr + FLASH_SIZE - FLASH_RESERVE;
     2c8:	600a      	str	r2, [r1, #0]
}
     2ca:	4770      	bx	lr
     2cc:	607fbffc 	.word	0x607fbffc
     2d0:	607fc000 	.word	0x607fc000
     2d4:	607fb000 	.word	0x607fb000
     2d8:	fffff000 	.word	0xfffff000

000002dc <firmware_buffer_free>:
{
     2dc:	b538      	push	{r3, r4, r5, lr}
  if (IN_FLASH(buffer_addr))
     2de:	f100 4320 	add.w	r3, r0, #2684354560	; 0xa0000000
     2e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
     2e6:	d215      	bcs.n	314 <firmware_buffer_free+0x38>
  while (address < (start + size) && error == 0) { 
     2e8:	1845      	adds	r5, r0, r1
     2ea:	4604      	mov	r4, r0
     2ec:	42a8      	cmp	r0, r5
     2ee:	d307      	bcc.n	300 <firmware_buffer_free+0x24>
}
     2f0:	bd38      	pop	{r3, r4, r5, pc}
          eepromemu_flash_erase_sector( (void*)address );
     2f2:	4620      	mov	r0, r4
     2f4:	f001 fe28 	bl	1f48 <eepromemu_flash_erase_sector>
    address += FLASH_SECTOR_SIZE;
     2f8:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
  while (address < (start + size) && error == 0) { 
     2fc:	42ac      	cmp	r4, r5
     2fe:	d2f7      	bcs.n	2f0 <firmware_buffer_free+0x14>
    if ((address & (FLASH_SECTOR_SIZE - 1)) == 0) {
     300:	f3c4 030b 	ubfx	r3, r4, #0, #12
      if (flash_sector_not_erased( address )) {
     304:	4620      	mov	r0, r4
    if ((address & (FLASH_SECTOR_SIZE - 1)) == 0) {
     306:	2b00      	cmp	r3, #0
     308:	d1f6      	bne.n	2f8 <firmware_buffer_free+0x1c>
      if (flash_sector_not_erased( address )) {
     30a:	f7ff fe89 	bl	20 <flash_sector_not_erased>
     30e:	2800      	cmp	r0, #0
     310:	d0f2      	beq.n	2f8 <firmware_buffer_free+0x1c>
     312:	e7ee      	b.n	2f2 <firmware_buffer_free+0x16>
}
     314:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    free( (void*)buffer_addr );
     318:	f003 bd9e 	b.w	3e58 <free>

0000031c <check_flash_id>:
  for (uint32_t i = buffer; i < buffer + size - strlen(FLASH_ID); ++i) {
     31c:	390b      	subs	r1, #11
{
     31e:	b570      	push	{r4, r5, r6, lr}
  for (uint32_t i = buffer; i < buffer + size - strlen(FLASH_ID); ++i) {
     320:	180d      	adds	r5, r1, r0
     322:	42a8      	cmp	r0, r5
     324:	d20e      	bcs.n	344 <check_flash_id+0x28>
     326:	4604      	mov	r4, r0
    if (strncmp((char *)i, FLASH_ID, strlen(FLASH_ID)) == 0)
     328:	4e07      	ldr	r6, [pc, #28]	; (348 <check_flash_id+0x2c>)
     32a:	e001      	b.n	330 <check_flash_id+0x14>
  for (uint32_t i = buffer; i < buffer + size - strlen(FLASH_ID); ++i) {
     32c:	42ac      	cmp	r4, r5
     32e:	d009      	beq.n	344 <check_flash_id+0x28>
    if (strncmp((char *)i, FLASH_ID, strlen(FLASH_ID)) == 0)
     330:	4620      	mov	r0, r4
     332:	220b      	movs	r2, #11
     334:	4631      	mov	r1, r6
  for (uint32_t i = buffer; i < buffer + size - strlen(FLASH_ID); ++i) {
     336:	3401      	adds	r4, #1
    if (strncmp((char *)i, FLASH_ID, strlen(FLASH_ID)) == 0)
     338:	f005 fd6e 	bl	5e18 <strncmp>
     33c:	2800      	cmp	r0, #0
     33e:	d1f5      	bne.n	32c <check_flash_id+0x10>
      return 1;
     340:	2001      	movs	r0, #1
}
     342:	bd70      	pop	{r4, r5, r6, pc}
  return 0;
     344:	2000      	movs	r0, #0
}
     346:	bd70      	pop	{r4, r5, r6, pc}
     348:	200058d8 	.word	0x200058d8

0000034c <flash_write_block>:

//******************************************************************************
// take a 32-bit aligned array of 32-bit values and write it to erased flash
//******************************************************************************
int flash_write_block( uint32_t addr, char *data, uint32_t count )
{
     34c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  static uint32_t next_addr = 0;			// expected address
  
  int ret = 0;						// return value
  uint32_t data_i = 0;					// index to data array

  if ((addr % 4) != 0 || (count % 4) != 0) {		// if not 32-bit aligned
     350:	ea40 0302 	orr.w	r3, r0, r2
     354:	079b      	lsls	r3, r3, #30
     356:	d002      	beq.n	35e <flash_write_block+0x12>
    return 1;	// "flash_block align error\n"		//   return error code 1
     358:	2001      	movs	r0, #1
    }
    buf_count = 0;					//   re-init buf count
    addr += FLASH_WRITE_SIZE;				//   advance address
  }  
  return 0;						// return success
}
     35a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (buf_count > 0 && addr != next_addr) {		// if unexpected address   
     35e:	4f15      	ldr	r7, [pc, #84]	; (3b4 <flash_write_block+0x68>)
     360:	4c15      	ldr	r4, [pc, #84]	; (3b8 <flash_write_block+0x6c>)
     362:	683b      	ldr	r3, [r7, #0]
     364:	b113      	cbz	r3, 36c <flash_write_block+0x20>
     366:	6825      	ldr	r5, [r4, #0]
     368:	4285      	cmp	r5, r0
     36a:	d120      	bne.n	3ae <flash_write_block+0x62>
  next_addr = addr + count;				//   compute next address
     36c:	1885      	adds	r5, r0, r2
     36e:	6025      	str	r5, [r4, #0]
  addr -= buf_count;					//   address of data[0]
     370:	1ac5      	subs	r5, r0, r3
  while (data_i < count) {				// while more data
     372:	b1ca      	cbz	r2, 3a8 <flash_write_block+0x5c>
     374:	1e4c      	subs	r4, r1, #1
     376:	f8df 8044 	ldr.w	r8, [pc, #68]	; 3bc <flash_write_block+0x70>
    buf_count = 0;					//   re-init buf count
     37a:	f04f 0900 	mov.w	r9, #0
     37e:	18a6      	adds	r6, r4, r2
     380:	e000      	b.n	384 <flash_write_block+0x38>
    ((char*)&buf)[buf_count++] = data[data_i++];	//   copy a byte to buf
     382:	683b      	ldr	r3, [r7, #0]
     384:	1c59      	adds	r1, r3, #1
     386:	f814 cf01 	ldrb.w	ip, [r4, #1]!
      eepromemu_flash_write((void*)addr,(void*)&buf,4);	//     flash_write()
     38a:	4628      	mov	r0, r5
     38c:	2204      	movs	r2, #4
    if (buf_count < FLASH_WRITE_SIZE) {			//   if buf not complete
     38e:	2903      	cmp	r1, #3
    ((char*)&buf)[buf_count++] = data[data_i++];	//   copy a byte to buf
     390:	6039      	str	r1, [r7, #0]
     392:	f808 c003 	strb.w	ip, [r8, r3]
      eepromemu_flash_write((void*)addr,(void*)&buf,4);	//     flash_write()
     396:	4641      	mov	r1, r8
    if (buf_count < FLASH_WRITE_SIZE) {			//   if buf not complete
     398:	d904      	bls.n	3a4 <flash_write_block+0x58>
    addr += FLASH_WRITE_SIZE;				//   advance address
     39a:	4415      	add	r5, r2
      eepromemu_flash_write((void*)addr,(void*)&buf,4);	//     flash_write()
     39c:	f001 fd5e 	bl	1e5c <eepromemu_flash_write>
    buf_count = 0;					//   re-init buf count
     3a0:	f8c7 9000 	str.w	r9, [r7]
  while (data_i < count) {				// while more data
     3a4:	42b4      	cmp	r4, r6
     3a6:	d1ec      	bne.n	382 <flash_write_block+0x36>
  return 0;						// return success
     3a8:	2000      	movs	r0, #0
}
     3aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return 2;	// "unexpected address\n"		//   return error code 2   
     3ae:	2002      	movs	r0, #2
     3b0:	e7d3      	b.n	35a <flash_write_block+0xe>
     3b2:	bf00      	nop
     3b4:	20008dd0 	.word	0x20008dd0
     3b8:	20008e00 	.word	0x20008e00
     3bc:	20008dcc 	.word	0x20008dcc

000003c0 <OtaConsole::printf(char const*, ...)>:
    s->print(msg);
    s->print("\r\n");
  }

  // Print formatted line (like printf) with prefix and CRLF
  inline void printf(const char* fmt, ...) {
     3c0:	b40f      	push	{r0, r1, r2, r3}
    if (!enabled || !s) return;
     3c2:	4b15      	ldr	r3, [pc, #84]	; (418 <OtaConsole::printf(char const*, ...)+0x58>)
     3c4:	781b      	ldrb	r3, [r3, #0]
  inline void printf(const char* fmt, ...) {
     3c6:	b530      	push	{r4, r5, lr}
     3c8:	b0b3      	sub	sp, #204	; 0xcc
    if (!enabled || !s) return;
     3ca:	b1fb      	cbz	r3, 40c <OtaConsole::printf(char const*, ...)+0x4c>
     3cc:	4c13      	ldr	r4, [pc, #76]	; (41c <OtaConsole::printf(char const*, ...)+0x5c>)
     3ce:	6823      	ldr	r3, [r4, #0]
     3d0:	b1e3      	cbz	r3, 40c <OtaConsole::printf(char const*, ...)+0x4c>
    char buf[192];
    va_list ap;
    va_start(ap, fmt);
     3d2:	ab37      	add	r3, sp, #220	; 0xdc
    vsnprintf(buf, sizeof(buf), fmt, ap);
     3d4:	9a36      	ldr	r2, [sp, #216]	; 0xd8
     3d6:	21c0      	movs	r1, #192	; 0xc0
     3d8:	a802      	add	r0, sp, #8
    va_start(ap, fmt);
     3da:	9301      	str	r3, [sp, #4]
    vsnprintf(buf, sizeof(buf), fmt, ap);
     3dc:	f005 fb7e 	bl	5adc <vsnprintf>
    va_end(ap);
    s->print("S ");
     3e0:	6820      	ldr	r0, [r4, #0]
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
     3e2:	2202      	movs	r2, #2
     3e4:	490e      	ldr	r1, [pc, #56]	; (420 <OtaConsole::printf(char const*, ...)+0x60>)
     3e6:	6803      	ldr	r3, [r0, #0]
     3e8:	685b      	ldr	r3, [r3, #4]
     3ea:	4798      	blx	r3
    s->print(buf);
     3ec:	6825      	ldr	r5, [r4, #0]
     3ee:	a802      	add	r0, sp, #8
     3f0:	f006 f806 	bl	6400 <strlen>
     3f4:	682b      	ldr	r3, [r5, #0]
     3f6:	4602      	mov	r2, r0
     3f8:	a902      	add	r1, sp, #8
     3fa:	685b      	ldr	r3, [r3, #4]
     3fc:	4628      	mov	r0, r5
     3fe:	4798      	blx	r3
    s->print("\r\n");
     400:	6820      	ldr	r0, [r4, #0]
     402:	2202      	movs	r2, #2
     404:	4907      	ldr	r1, [pc, #28]	; (424 <OtaConsole::printf(char const*, ...)+0x64>)
     406:	6803      	ldr	r3, [r0, #0]
     408:	685b      	ldr	r3, [r3, #4]
     40a:	4798      	blx	r3
  }
     40c:	b033      	add	sp, #204	; 0xcc
     40e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
     412:	b004      	add	sp, #16
     414:	4770      	bx	lr
     416:	bf00      	nop
     418:	2000823b 	.word	0x2000823b
     41c:	20007c38 	.word	0x20007c38
     420:	200003dc 	.word	0x200003dc
     424:	2000793c 	.word	0x2000793c

00000428 <SLOGF(char const*, ...)>:
  int16_t   steerCmd;       // -1000..+1000
  bool      steerNeutralHold;
};

// ======== Mirrored logging helper (USB + OTA console) ========
static void SLOGF(const char* fmt, ...) {
     428:	b40f      	push	{r0, r1, r2, r3}
     42a:	b500      	push	{lr}
     42c:	b0c3      	sub	sp, #268	; 0x10c
  char buf[256];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
     42e:	f44f 7180 	mov.w	r1, #256	; 0x100
static void SLOGF(const char* fmt, ...) {
     432:	ab44      	add	r3, sp, #272	; 0x110
  vsnprintf(buf, sizeof(buf), fmt, ap);
     434:	a802      	add	r0, sp, #8
static void SLOGF(const char* fmt, ...) {
     436:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap, fmt);
     43a:	9301      	str	r3, [sp, #4]
  vsnprintf(buf, sizeof(buf), fmt, ap);
     43c:	f005 fb4e 	bl	5adc <vsnprintf>
     440:	a802      	add	r0, sp, #8
     442:	f005 ffdd 	bl	6400 <strlen>
     446:	4601      	mov	r1, r0
	// Discard all received data which has not been read.
        virtual void clear(void) { usb_serial_flush_input(); }
	// Transmit a single byte to your PC
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
	// Transmit a buffer containing any number of bytes to your PC
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     448:	a802      	add	r0, sp, #8
     44a:	f003 f869 	bl	3520 <usb_serial_write>
  va_end(ap);
  Serial.print(buf);                 // USB Serial
  OtaConsole::printf("%s", buf);    // OTA to ESP32
     44e:	a902      	add	r1, sp, #8
     450:	4803      	ldr	r0, [pc, #12]	; (460 <SLOGF(char const*, ...)+0x38>)
     452:	f7ff ffb5 	bl	3c0 <OtaConsole::printf(char const*, ...)>
}
     456:	b043      	add	sp, #268	; 0x10c
     458:	f85d eb04 	ldr.w	lr, [sp], #4
     45c:	b004      	add	sp, #16
     45e:	4770      	bx	lr
     460:	200003b4 	.word	0x200003b4
     464:	00000000 	.word	0x00000000

00000468 <loop>:
  delay(10);
  SLOGF("S BOOT_PINS fwd=%d rev=%d (0=LOW,1=HIGH)\r\n",
        (int)digitalRead(PIN_FWD), (int)digitalRead(PIN_REV));
}

void loop() {
     468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     46c:	b08c      	sub	sp, #48	; 0x30
     46e:	4c54      	ldr	r4, [pc, #336]	; (5c0 <loop+0x158>)
  OtaUpdater::tick();
     470:	f000 fb0a 	bl	a88 <OtaUpdater::tick()>
  OtaConsole::setEnabled(!OtaUpdater::inProgress());
     474:	f000 fb02 	bl	a7c <OtaUpdater::inProgress()>
  inline void setEnabled(bool on) { enabled = on; }
     478:	4952      	ldr	r1, [pc, #328]	; (5c4 <loop+0x15c>)

  static uint32_t t_sample = 0;
  if (millis() - t_sample >= 100) {
     47a:	4a53      	ldr	r2, [pc, #332]	; (5c8 <loop+0x160>)
  OtaConsole::setEnabled(!OtaUpdater::inProgress());
     47c:	f080 0001 	eor.w	r0, r0, #1
     480:	6823      	ldr	r3, [r4, #0]
     482:	7008      	strb	r0, [r1, #0]
  if (millis() - t_sample >= 100) {
     484:	6811      	ldr	r1, [r2, #0]
     486:	1a5b      	subs	r3, r3, r1
     488:	2b63      	cmp	r3, #99	; 0x63
     48a:	f200 80bb 	bhi.w	604 <loop+0x19c>
    if (g_watch.t2) SLOGF("S T2 raw=%u v=%.3f thr=%d\r\n",  g_t2, (double)g_t2*ADC_VREF/ADC_MAX, (int)scaleThrottle(g_t2));
    if (g_watch.fnr) SLOGF("S FNR=%s\r\n", fnrToken(g_fnr));
  }

  static uint32_t t_led = 0; static bool led = false;
  if (!OtaUpdater::inProgress() && millis() - t_led >= BLINK_MS) {
     48e:	f000 faf5 	bl	a7c <OtaUpdater::inProgress()>
     492:	b930      	cbnz	r0, 4a2 <loop+0x3a>
     494:	4a4d      	ldr	r2, [pc, #308]	; (5cc <loop+0x164>)
     496:	6823      	ldr	r3, [r4, #0]
     498:	6811      	ldr	r1, [r2, #0]
     49a:	1a5b      	subs	r3, r3, r1
     49c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
     4a0:	d228      	bcs.n	4f4 <loop+0x8c>
  static String line;
     4a2:	4c4b      	ldr	r4, [pc, #300]	; (5d0 <loop+0x168>)
     4a4:	6821      	ldr	r1, [r4, #0]
     4a6:	f011 0101 	ands.w	r1, r1, #1
     4aa:	d032      	beq.n	512 <loop+0xaa>
	String(double num, unsigned char digits=2) : String((float)num, digits) {}
	~String(void);

	// memory management
	unsigned char reserve(unsigned int size);
	inline unsigned int length(void) const {return len;}
     4ac:	4c49      	ldr	r4, [pc, #292]	; (5d4 <loop+0x16c>)
      line = "";
     4ae:	4d4a      	ldr	r5, [pc, #296]	; (5d8 <loop+0x170>)
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	//unsigned char equals(const __FlashStringHelper *pgmstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
     4b0:	4e4a      	ldr	r6, [pc, #296]	; (5dc <loop+0x174>)
        virtual int available() { return usb_serial_available(); }
     4b2:	f002 ffcb 	bl	344c <usb_serial_available>
  while (Serial.available()) {
     4b6:	b180      	cbz	r0, 4da <loop+0x72>
        virtual int read() { return usb_serial_getchar(); }
     4b8:	f003 f80c 	bl	34d4 <usb_serial_getchar>
    char c = (char)Serial.read();
     4bc:	b2c1      	uxtb	r1, r0
    if (c == '\r') continue;
     4be:	290d      	cmp	r1, #13
     4c0:	d0f7      	beq.n	4b2 <loop+0x4a>
    if (c == '\n') {
     4c2:	290a      	cmp	r1, #10
     4c4:	d00c      	beq.n	4e0 <loop+0x78>
    } else if (line.length() < 120) line += c;
     4c6:	68a3      	ldr	r3, [r4, #8]
     4c8:	2b77      	cmp	r3, #119	; 0x77
     4ca:	d8f2      	bhi.n	4b2 <loop+0x4a>
	String & operator += (char c)			{return append(c);}
     4cc:	4620      	mov	r0, r4
     4ce:	f001 fa3b 	bl	1948 <String::append(char)>
        virtual int available() { return usb_serial_available(); }
     4d2:	f002 ffbb 	bl	344c <usb_serial_available>
  while (Serial.available()) {
     4d6:	2800      	cmp	r0, #0
     4d8:	d1ee      	bne.n	4b8 <loop+0x50>
    t_led = millis(); led = !led; digitalWrite(LED_PIN, led ? HIGH : LOW);
  }

  handleUsbCommandsOnce();
}
     4da:	b00c      	add	sp, #48	; 0x30
     4dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      line.trim();
     4e0:	483c      	ldr	r0, [pc, #240]	; (5d4 <loop+0x16c>)
     4e2:	f001 facd 	bl	1a80 <String::trim()>
      if (line.length()) {
     4e6:	68a3      	ldr	r3, [r4, #8]
     4e8:	b9f3      	cbnz	r3, 528 <loop+0xc0>
      line = "";
     4ea:	4629      	mov	r1, r5
     4ec:	4620      	mov	r0, r4
     4ee:	f001 f9d9 	bl	18a4 <String::operator=(char const*)>
     4f2:	e7de      	b.n	4b2 <loop+0x4a>
    t_led = millis(); led = !led; digitalWrite(LED_PIN, led ? HIGH : LOW);
     4f4:	4b3a      	ldr	r3, [pc, #232]	; (5e0 <loop+0x178>)
     4f6:	6820      	ldr	r0, [r4, #0]
     4f8:	7819      	ldrb	r1, [r3, #0]
  static String line;
     4fa:	4c35      	ldr	r4, [pc, #212]	; (5d0 <loop+0x168>)
    t_led = millis(); led = !led; digitalWrite(LED_PIN, led ? HIGH : LOW);
     4fc:	f081 0101 	eor.w	r1, r1, #1
     500:	6010      	str	r0, [r2, #0]
     502:	200d      	movs	r0, #13
     504:	7019      	strb	r1, [r3, #0]
     506:	f001 fc07 	bl	1d18 <digitalWrite>
  static String line;
     50a:	6821      	ldr	r1, [r4, #0]
     50c:	f011 0101 	ands.w	r1, r1, #1
     510:	d1cc      	bne.n	4ac <loop+0x44>
     512:	4830      	ldr	r0, [pc, #192]	; (5d4 <loop+0x16c>)
     514:	f001 f94e 	bl	17b4 <String::String(char const*)>
     518:	2301      	movs	r3, #1
     51a:	4a32      	ldr	r2, [pc, #200]	; (5e4 <loop+0x17c>)
     51c:	4932      	ldr	r1, [pc, #200]	; (5e8 <loop+0x180>)
     51e:	482d      	ldr	r0, [pc, #180]	; (5d4 <loop+0x16c>)
     520:	6023      	str	r3, [r4, #0]
     522:	f003 fb0d 	bl	3b40 <__aeabi_atexit>
     526:	e7c1      	b.n	4ac <loop+0x44>
        String verb, a1;
     528:	2100      	movs	r1, #0
     52a:	a803      	add	r0, sp, #12
     52c:	f001 f942 	bl	17b4 <String::String(char const*)>
     530:	2100      	movs	r1, #0
     532:	a806      	add	r0, sp, #24
     534:	f001 f93e 	bl	17b4 <String::String(char const*)>
        int sp1 = line.indexOf(' ');
     538:	2120      	movs	r1, #32
     53a:	4620      	mov	r0, r4
     53c:	f001 fa2a 	bl	1994 <String::indexOf(char) const>
        if (sp1 < 0) { verb = line; }
     540:	1e07      	subs	r7, r0, #0
     542:	f2c0 8170 	blt.w	826 <loop+0x3be>
        else { verb = line.substring(0, sp1); a1 = line.substring(sp1+1); a1.trim(); }
     546:	463b      	mov	r3, r7
     548:	2200      	movs	r2, #0
     54a:	4621      	mov	r1, r4
     54c:	a809      	add	r0, sp, #36	; 0x24
     54e:	f001 fa5d 	bl	1a0c <String::substring(unsigned int, unsigned int) const>
     552:	a909      	add	r1, sp, #36	; 0x24
     554:	a803      	add	r0, sp, #12
     556:	f001 f98f 	bl	1878 <String::operator=(String&&)>
     55a:	a809      	add	r0, sp, #36	; 0x24
     55c:	f001 f948 	bl	17f0 <String::~String()>
     560:	1c7a      	adds	r2, r7, #1
     562:	4621      	mov	r1, r4
     564:	a809      	add	r0, sp, #36	; 0x24
     566:	f001 fa25 	bl	19b4 <String::substring(unsigned int) const>
     56a:	a909      	add	r1, sp, #36	; 0x24
     56c:	a806      	add	r0, sp, #24
     56e:	f001 f983 	bl	1878 <String::operator=(String&&)>
     572:	a809      	add	r0, sp, #36	; 0x24
     574:	f001 f93c 	bl	17f0 <String::~String()>
     578:	a806      	add	r0, sp, #24
     57a:	f001 fa81 	bl	1a80 <String::trim()>
        verb.toUpperCase(); a1.toUpperCase();
     57e:	a803      	add	r0, sp, #12
     580:	f001 fa6e 	bl	1a60 <String::toUpperCase()>
     584:	a806      	add	r0, sp, #24
     586:	f001 fa6b 	bl	1a60 <String::toUpperCase()>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
     58a:	4631      	mov	r1, r6
     58c:	a803      	add	r0, sp, #12
     58e:	f001 f9eb 	bl	1968 <String::equals(char const*) const>
        if (verb == "SRC") {
     592:	2800      	cmp	r0, #0
     594:	f000 811d 	beq.w	7d2 <loop+0x36a>
     598:	4914      	ldr	r1, [pc, #80]	; (5ec <loop+0x184>)
     59a:	a806      	add	r0, sp, #24
     59c:	f001 f9e4 	bl	1968 <String::equals(char const*) const>
          if      (a1 == "?")      Serial.printf("[MyApp] SRC=%s\r\n", g_srcRc ? "rc" : "local");
     5a0:	2800      	cmp	r0, #0
     5a2:	f000 812b 	beq.w	7fc <loop+0x394>
     5a6:	4b12      	ldr	r3, [pc, #72]	; (5f0 <loop+0x188>)
     5a8:	4a12      	ldr	r2, [pc, #72]	; (5f4 <loop+0x18c>)
     5aa:	7819      	ldrb	r1, [r3, #0]
     5ac:	4b12      	ldr	r3, [pc, #72]	; (5f8 <loop+0x190>)
     5ae:	4813      	ldr	r0, [pc, #76]	; (5fc <loop+0x194>)
     5b0:	2900      	cmp	r1, #0
     5b2:	bf08      	it	eq
     5b4:	461a      	moveq	r2, r3
     5b6:	4912      	ldr	r1, [pc, #72]	; (600 <loop+0x198>)
     5b8:	f001 f8da 	bl	1770 <Print::printf(char const*, ...)>
     5bc:	e110      	b.n	7e0 <loop+0x378>
     5be:	bf00      	nop
     5c0:	20008e6c 	.word	0x20008e6c
     5c4:	2000823b 	.word	0x2000823b
     5c8:	200089e8 	.word	0x200089e8
     5cc:	200089e4 	.word	0x200089e4
     5d0:	20008948 	.word	0x20008948
     5d4:	200089ec 	.word	0x200089ec
     5d8:	20007818 	.word	0x20007818
     5dc:	20007804 	.word	0x20007804
     5e0:	20008e99 	.word	0x20008e99
     5e4:	20007c44 	.word	0x20007c44
     5e8:	000017f1 	.word	0x000017f1
     5ec:	20007870 	.word	0x20007870
     5f0:	2000823a 	.word	0x2000823a
     5f4:	20007708 	.word	0x20007708
     5f8:	2000770c 	.word	0x2000770c
     5fc:	20007b60 	.word	0x20007b60
     600:	20007808 	.word	0x20007808
     604:	6823      	ldr	r3, [r4, #0]
  g_s1 = analogRead(PIN_POT_S1);
     606:	2003      	movs	r0, #3
     608:	f8df a2ec 	ldr.w	sl, [pc, #748]	; 8f8 <loop+0x490>
    t_sample = millis();
     60c:	6013      	str	r3, [r2, #0]
  g_s1 = analogRead(PIN_POT_S1);
     60e:	f001 fa63 	bl	1ad8 <analogRead>
     612:	f8aa 0000 	strh.w	r0, [sl]
  g_t1 = analogRead(PIN_POT_T1);
     616:	201b      	movs	r0, #27
     618:	f001 fa5e 	bl	1ad8 <analogRead>
     61c:	4e98      	ldr	r6, [pc, #608]	; (880 <loop+0x418>)
     61e:	4603      	mov	r3, r0
  g_s2 = analogRead(PIN_POT_S2);
     620:	4f98      	ldr	r7, [pc, #608]	; (884 <loop+0x41c>)
     622:	2005      	movs	r0, #5
  g_t2 = analogRead(PIN_POT_T2);
     624:	f8df 82d4 	ldr.w	r8, [pc, #724]	; 8fc <loop+0x494>
  g_t1 = analogRead(PIN_POT_T1);
     628:	8033      	strh	r3, [r6, #0]
  g_s2 = analogRead(PIN_POT_S2);
     62a:	f001 fa55 	bl	1ad8 <analogRead>
     62e:	8038      	strh	r0, [r7, #0]
  g_t2 = analogRead(PIN_POT_T2);
     630:	2004      	movs	r0, #4
     632:	f001 fa51 	bl	1ad8 <analogRead>
     636:	f8a8 0000 	strh.w	r0, [r8]
  const bool fwd_low = (digitalRead(PIN_FWD) == LOW);
     63a:	200a      	movs	r0, #10
     63c:	f001 fb96 	bl	1d6c <digitalRead>
     640:	4605      	mov	r5, r0
  const bool rev_low = (digitalRead(PIN_REV) == LOW);
     642:	200b      	movs	r0, #11
     644:	f001 fb92 	bl	1d6c <digitalRead>
  if ( fwd_low &&  rev_low) g_fnr = FNR_FAULT;
     648:	ea45 0300 	orr.w	r3, r5, r0
     64c:	b2db      	uxtb	r3, r3
     64e:	2b00      	cmp	r3, #0
     650:	f000 80cd 	beq.w	7ee <loop+0x386>
  else if ( fwd_low && !rev_low) g_fnr = FNR_FWD;
     654:	2d00      	cmp	r5, #0
     656:	f040 80ed 	bne.w	834 <loop+0x3cc>
     65a:	2800      	cmp	r0, #0
     65c:	f000 80eb 	beq.w	836 <loop+0x3ce>
     660:	2301      	movs	r3, #1
     662:	4989      	ldr	r1, [pc, #548]	; (888 <loop+0x420>)
  else                           g_fnr = FNR_NEU;
     664:	f8df 9298 	ldr.w	r9, [pc, #664]	; 900 <loop+0x498>
     668:	f889 3000 	strb.w	r3, [r9]
    SLOGF("S gear=%s\r\n", fnrWord(g_fnr));     // Forward / Neutral / Reverse / Fault
     66c:	4887      	ldr	r0, [pc, #540]	; (88c <loop+0x424>)
     66e:	f7ff fedb 	bl	428 <SLOGF(char const*, ...)>
    SLOGF("S STEER1=%u\r\n",    g_s1);
     672:	f8ba 1000 	ldrh.w	r1, [sl]
     676:	4886      	ldr	r0, [pc, #536]	; (890 <loop+0x428>)
     678:	f7ff fed6 	bl	428 <SLOGF(char const*, ...)>
    SLOGF("S THROTTLE1=%u\r\n", g_t1);
     67c:	8831      	ldrh	r1, [r6, #0]
     67e:	4885      	ldr	r0, [pc, #532]	; (894 <loop+0x42c>)
     680:	f7ff fed2 	bl	428 <SLOGF(char const*, ...)>
    SLOGF("S STEER2=%u\r\n",    g_s2);
     684:	8839      	ldrh	r1, [r7, #0]
     686:	4884      	ldr	r0, [pc, #528]	; (898 <loop+0x430>)
     688:	f7ff fece 	bl	428 <SLOGF(char const*, ...)>
    SLOGF("S THROTTLE2=%u\r\n", g_t2);
     68c:	f8b8 1000 	ldrh.w	r1, [r8]
     690:	4882      	ldr	r0, [pc, #520]	; (89c <loop+0x434>)
     692:	f7ff fec9 	bl	428 <SLOGF(char const*, ...)>
  const int16_t steer_local = scaleSteer(g_s1);
     696:	f8ba 1000 	ldrh.w	r1, [sl]
  int32_t v = (int32_t)raw - 2048; v = (v * 1000) / 2048; return clamp_i16(v, -1000, 1000);
     69a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  if (v < lo) return lo; if (v > hi) return hi; return (int16_t)v;
     69e:	4880      	ldr	r0, [pc, #512]	; (8a0 <loop+0x438>)
  int32_t v = (int32_t)raw - 2048; v = (v * 1000) / 2048; return clamp_i16(v, -1000, 1000);
     6a0:	f5a1 6200 	sub.w	r2, r1, #2048	; 0x800
     6a4:	fb03 f202 	mul.w	r2, r3, r2
  if (v < lo) return lo; if (v > hi) return hi; return (int16_t)v;
     6a8:	4282      	cmp	r2, r0
     6aa:	dc04      	bgt.n	6b6 <loop+0x24e>
  int32_t v = (int32_t)raw - 2048; v = (v * 1000) / 2048; return clamp_i16(v, -1000, 1000);
     6ac:	1e13      	subs	r3, r2, #0
     6ae:	bfb8      	it	lt
     6b0:	f203 73ff 	addwlt	r3, r3, #2047	; 0x7ff
     6b4:	12db      	asrs	r3, r3, #11
    if (g_watch.s1) SLOGF("S S1 raw=%u v=%.3f steer=%d\r\n", g_s1, (double)g_s1*ADC_VREF/ADC_MAX, (int)scaleSteer(g_s1));
     6b6:	4d7b      	ldr	r5, [pc, #492]	; (8a4 <loop+0x43c>)
     6b8:	782a      	ldrb	r2, [r5, #0]
     6ba:	b18a      	cbz	r2, 6e0 <loop+0x278>
     6bc:	ee07 1a90 	vmov	s15, r1
     6c0:	9300      	str	r3, [sp, #0]
     6c2:	4879      	ldr	r0, [pc, #484]	; (8a8 <loop+0x440>)
     6c4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     6c8:	ed9f 5b69 	vldr	d5, [pc, #420]	; 870 <loop+0x408>
     6cc:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 878 <loop+0x410>
     6d0:	ee27 7b05 	vmul.f64	d7, d7, d5
     6d4:	ee87 7b06 	vdiv.f64	d7, d7, d6
     6d8:	ec53 2b17 	vmov	r2, r3, d7
     6dc:	f7ff fea4 	bl	428 <SLOGF(char const*, ...)>
    if (g_watch.s2) SLOGF("S S2 raw=%u v=%.3f steer=%d\r\n", g_s2, (double)g_s2*ADC_VREF/ADC_MAX, (int)scaleSteer(g_s2));
     6e0:	786b      	ldrb	r3, [r5, #1]
     6e2:	b303      	cbz	r3, 726 <loop+0x2be>
     6e4:	8839      	ldrh	r1, [r7, #0]
  int32_t v = (int32_t)raw - 2048; v = (v * 1000) / 2048; return clamp_i16(v, -1000, 1000);
     6e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  if (v < lo) return lo; if (v > hi) return hi; return (int16_t)v;
     6ea:	4a6d      	ldr	r2, [pc, #436]	; (8a0 <loop+0x438>)
    if (g_watch.s2) SLOGF("S S2 raw=%u v=%.3f steer=%d\r\n", g_s2, (double)g_s2*ADC_VREF/ADC_MAX, (int)scaleSteer(g_s2));
     6ec:	ee07 1a90 	vmov	s15, r1
  int32_t v = (int32_t)raw - 2048; v = (v * 1000) / 2048; return clamp_i16(v, -1000, 1000);
     6f0:	f5a1 6000 	sub.w	r0, r1, #2048	; 0x800
    if (g_watch.s2) SLOGF("S S2 raw=%u v=%.3f steer=%d\r\n", g_s2, (double)g_s2*ADC_VREF/ADC_MAX, (int)scaleSteer(g_s2));
     6f4:	ed9f 6b5e 	vldr	d6, [pc, #376]	; 870 <loop+0x408>
     6f8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
  int32_t v = (int32_t)raw - 2048; v = (v * 1000) / 2048; return clamp_i16(v, -1000, 1000);
     6fc:	fb03 f000 	mul.w	r0, r3, r0
    if (g_watch.s2) SLOGF("S S2 raw=%u v=%.3f steer=%d\r\n", g_s2, (double)g_s2*ADC_VREF/ADC_MAX, (int)scaleSteer(g_s2));
     700:	ed9f 5b5d 	vldr	d5, [pc, #372]	; 878 <loop+0x410>
     704:	ee27 7b06 	vmul.f64	d7, d7, d6
  if (v < lo) return lo; if (v > hi) return hi; return (int16_t)v;
     708:	4290      	cmp	r0, r2
    if (g_watch.s2) SLOGF("S S2 raw=%u v=%.3f steer=%d\r\n", g_s2, (double)g_s2*ADC_VREF/ADC_MAX, (int)scaleSteer(g_s2));
     70a:	ee87 6b05 	vdiv.f64	d6, d7, d5
  if (v < lo) return lo; if (v > hi) return hi; return (int16_t)v;
     70e:	dc04      	bgt.n	71a <loop+0x2b2>
  int32_t v = (int32_t)raw - 2048; v = (v * 1000) / 2048; return clamp_i16(v, -1000, 1000);
     710:	1e03      	subs	r3, r0, #0
     712:	bfb8      	it	lt
     714:	f203 73ff 	addwlt	r3, r3, #2047	; 0x7ff
     718:	12db      	asrs	r3, r3, #11
    if (g_watch.s2) SLOGF("S S2 raw=%u v=%.3f steer=%d\r\n", g_s2, (double)g_s2*ADC_VREF/ADC_MAX, (int)scaleSteer(g_s2));
     71a:	9300      	str	r3, [sp, #0]
     71c:	4863      	ldr	r0, [pc, #396]	; (8ac <loop+0x444>)
     71e:	ec53 2b16 	vmov	r2, r3, d6
     722:	f7ff fe81 	bl	428 <SLOGF(char const*, ...)>
    if (g_watch.t1) SLOGF("S T1 raw=%u v=%.3f thr=%d\r\n",  g_t1, (double)g_t1*ADC_VREF/ADC_MAX, (int)scaleThrottle(g_t1));
     726:	78ab      	ldrb	r3, [r5, #2]
     728:	b303      	cbz	r3, 76c <loop+0x304>
     72a:	8831      	ldrh	r1, [r6, #0]
  int32_t v = (int32_t)raw * 1000 / 4095; return clamp_i16(v, 0, 1000);
     72c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  if (v < lo) return lo; if (v > hi) return hi; return (int16_t)v;
     730:	4a5f      	ldr	r2, [pc, #380]	; (8b0 <loop+0x448>)
    if (g_watch.t1) SLOGF("S T1 raw=%u v=%.3f thr=%d\r\n",  g_t1, (double)g_t1*ADC_VREF/ADC_MAX, (int)scaleThrottle(g_t1));
     732:	ee07 1a90 	vmov	s15, r1
  int32_t v = (int32_t)raw * 1000 / 4095; return clamp_i16(v, 0, 1000);
     736:	fb03 f001 	mul.w	r0, r3, r1
    if (g_watch.t1) SLOGF("S T1 raw=%u v=%.3f thr=%d\r\n",  g_t1, (double)g_t1*ADC_VREF/ADC_MAX, (int)scaleThrottle(g_t1));
     73a:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 870 <loop+0x408>
     73e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
  if (v < lo) return lo; if (v > hi) return hi; return (int16_t)v;
     742:	4290      	cmp	r0, r2
    if (g_watch.t1) SLOGF("S T1 raw=%u v=%.3f thr=%d\r\n",  g_t1, (double)g_t1*ADC_VREF/ADC_MAX, (int)scaleThrottle(g_t1));
     744:	ed9f 5b4c 	vldr	d5, [pc, #304]	; 878 <loop+0x410>
     748:	ee27 7b06 	vmul.f64	d7, d7, d6
     74c:	ee87 6b05 	vdiv.f64	d6, d7, d5
  if (v < lo) return lo; if (v > hi) return hi; return (int16_t)v;
     750:	dc06      	bgt.n	760 <loop+0x2f8>
  int32_t v = (int32_t)raw * 1000 / 4095; return clamp_i16(v, 0, 1000);
     752:	4b58      	ldr	r3, [pc, #352]	; (8b4 <loop+0x44c>)
     754:	fba3 2300 	umull	r2, r3, r3, r0
     758:	1ac0      	subs	r0, r0, r3
     75a:	eb03 0350 	add.w	r3, r3, r0, lsr #1
     75e:	0adb      	lsrs	r3, r3, #11
    if (g_watch.t1) SLOGF("S T1 raw=%u v=%.3f thr=%d\r\n",  g_t1, (double)g_t1*ADC_VREF/ADC_MAX, (int)scaleThrottle(g_t1));
     760:	9300      	str	r3, [sp, #0]
     762:	4855      	ldr	r0, [pc, #340]	; (8b8 <loop+0x450>)
     764:	ec53 2b16 	vmov	r2, r3, d6
     768:	f7ff fe5e 	bl	428 <SLOGF(char const*, ...)>
    if (g_watch.t2) SLOGF("S T2 raw=%u v=%.3f thr=%d\r\n",  g_t2, (double)g_t2*ADC_VREF/ADC_MAX, (int)scaleThrottle(g_t2));
     76c:	78eb      	ldrb	r3, [r5, #3]
     76e:	b30b      	cbz	r3, 7b4 <loop+0x34c>
     770:	f8b8 1000 	ldrh.w	r1, [r8]
  int32_t v = (int32_t)raw * 1000 / 4095; return clamp_i16(v, 0, 1000);
     774:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  if (v < lo) return lo; if (v > hi) return hi; return (int16_t)v;
     778:	4a4d      	ldr	r2, [pc, #308]	; (8b0 <loop+0x448>)
    if (g_watch.t2) SLOGF("S T2 raw=%u v=%.3f thr=%d\r\n",  g_t2, (double)g_t2*ADC_VREF/ADC_MAX, (int)scaleThrottle(g_t2));
     77a:	ee07 1a90 	vmov	s15, r1
  int32_t v = (int32_t)raw * 1000 / 4095; return clamp_i16(v, 0, 1000);
     77e:	fb03 f001 	mul.w	r0, r3, r1
    if (g_watch.t2) SLOGF("S T2 raw=%u v=%.3f thr=%d\r\n",  g_t2, (double)g_t2*ADC_VREF/ADC_MAX, (int)scaleThrottle(g_t2));
     782:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 870 <loop+0x408>
     786:	eeb8 7b67 	vcvt.f64.u32	d7, s15
  if (v < lo) return lo; if (v > hi) return hi; return (int16_t)v;
     78a:	4290      	cmp	r0, r2
    if (g_watch.t2) SLOGF("S T2 raw=%u v=%.3f thr=%d\r\n",  g_t2, (double)g_t2*ADC_VREF/ADC_MAX, (int)scaleThrottle(g_t2));
     78c:	ed9f 5b3a 	vldr	d5, [pc, #232]	; 878 <loop+0x410>
     790:	ee27 7b06 	vmul.f64	d7, d7, d6
     794:	ee87 6b05 	vdiv.f64	d6, d7, d5
  if (v < lo) return lo; if (v > hi) return hi; return (int16_t)v;
     798:	dc06      	bgt.n	7a8 <loop+0x340>
  int32_t v = (int32_t)raw * 1000 / 4095; return clamp_i16(v, 0, 1000);
     79a:	4b46      	ldr	r3, [pc, #280]	; (8b4 <loop+0x44c>)
     79c:	fba3 2300 	umull	r2, r3, r3, r0
     7a0:	1ac0      	subs	r0, r0, r3
     7a2:	eb03 0350 	add.w	r3, r3, r0, lsr #1
     7a6:	0adb      	lsrs	r3, r3, #11
    if (g_watch.t2) SLOGF("S T2 raw=%u v=%.3f thr=%d\r\n",  g_t2, (double)g_t2*ADC_VREF/ADC_MAX, (int)scaleThrottle(g_t2));
     7a8:	9300      	str	r3, [sp, #0]
     7aa:	4844      	ldr	r0, [pc, #272]	; (8bc <loop+0x454>)
     7ac:	ec53 2b16 	vmov	r2, r3, d6
     7b0:	f7ff fe3a 	bl	428 <SLOGF(char const*, ...)>
    if (g_watch.fnr) SLOGF("S FNR=%s\r\n", fnrToken(g_fnr));
     7b4:	792b      	ldrb	r3, [r5, #4]
     7b6:	2b00      	cmp	r3, #0
     7b8:	f43f ae69 	beq.w	48e <loop+0x26>
     7bc:	f899 3000 	ldrb.w	r3, [r9]
  switch (s) { case FNR_FWD: return "FWD"; case FNR_REV: return "REV";
     7c0:	2b02      	cmp	r3, #2
     7c2:	d835      	bhi.n	830 <loop+0x3c8>
     7c4:	4a3e      	ldr	r2, [pc, #248]	; (8c0 <loop+0x458>)
     7c6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    if (g_watch.fnr) SLOGF("S FNR=%s\r\n", fnrToken(g_fnr));
     7ca:	483e      	ldr	r0, [pc, #248]	; (8c4 <loop+0x45c>)
     7cc:	f7ff fe2c 	bl	428 <SLOGF(char const*, ...)>
     7d0:	e65d      	b.n	48e <loop+0x26>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     7d2:	211c      	movs	r1, #28
     7d4:	483c      	ldr	r0, [pc, #240]	; (8c8 <loop+0x460>)
     7d6:	f002 fea3 	bl	3520 <usb_serial_write>
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
     7da:	483c      	ldr	r0, [pc, #240]	; (8cc <loop+0x464>)
     7dc:	f000 ffac 	bl	1738 <Print::println()>
      }
     7e0:	a806      	add	r0, sp, #24
     7e2:	f001 f805 	bl	17f0 <String::~String()>
     7e6:	a803      	add	r0, sp, #12
     7e8:	f001 f802 	bl	17f0 <String::~String()>
     7ec:	e67d      	b.n	4ea <loop+0x82>
  if ( fwd_low &&  rev_low) g_fnr = FNR_FAULT;
     7ee:	f8df 9110 	ldr.w	r9, [pc, #272]	; 900 <loop+0x498>
     7f2:	2303      	movs	r3, #3
     7f4:	4936      	ldr	r1, [pc, #216]	; (8d0 <loop+0x468>)
     7f6:	f889 3000 	strb.w	r3, [r9]
  switch (s) { case FNR_FWD: return "Forward"; case FNR_REV: return "Reverse";
     7fa:	e737      	b.n	66c <loop+0x204>
     7fc:	4935      	ldr	r1, [pc, #212]	; (8d4 <loop+0x46c>)
     7fe:	a806      	add	r0, sp, #24
     800:	f001 f8b2 	bl	1968 <String::equals(char const*) const>
          else if (a1 == "RC")     { g_srcRc = true;  Serial.println("[MyApp] SRC set to rc"); }
     804:	4607      	mov	r7, r0
     806:	b9d0      	cbnz	r0, 83e <loop+0x3d6>
     808:	4933      	ldr	r1, [pc, #204]	; (8d8 <loop+0x470>)
     80a:	a806      	add	r0, sp, #24
     80c:	f001 f8ac 	bl	1968 <String::equals(char const*) const>
          else if (a1 == "LOCAL")  { g_srcRc = false; Serial.println("[MyApp] SRC set to local"); }
     810:	b318      	cbz	r0, 85a <loop+0x3f2>
     812:	4b32      	ldr	r3, [pc, #200]	; (8dc <loop+0x474>)
     814:	2118      	movs	r1, #24
     816:	4832      	ldr	r0, [pc, #200]	; (8e0 <loop+0x478>)
     818:	701f      	strb	r7, [r3, #0]
     81a:	f002 fe81 	bl	3520 <usb_serial_write>
     81e:	482b      	ldr	r0, [pc, #172]	; (8cc <loop+0x464>)
     820:	f000 ff8a 	bl	1738 <Print::println()>
     824:	e7dc      	b.n	7e0 <loop+0x378>
        if (sp1 < 0) { verb = line; }
     826:	4621      	mov	r1, r4
     828:	a803      	add	r0, sp, #12
     82a:	f001 f81d 	bl	1868 <String::operator=(String const&)>
     82e:	e6a6      	b.n	57e <loop+0x116>
    if (g_watch.fnr) SLOGF("S FNR=%s\r\n", fnrToken(g_fnr));
     830:	492c      	ldr	r1, [pc, #176]	; (8e4 <loop+0x47c>)
     832:	e7ca      	b.n	7ca <loop+0x362>
  else if (!fwd_low &&  rev_low) g_fnr = FNR_REV;
     834:	b970      	cbnz	r0, 854 <loop+0x3ec>
     836:	b16d      	cbz	r5, 854 <loop+0x3ec>
     838:	2302      	movs	r3, #2
     83a:	492b      	ldr	r1, [pc, #172]	; (8e8 <loop+0x480>)
     83c:	e712      	b.n	664 <loop+0x1fc>
          else if (a1 == "RC")     { g_srcRc = true;  Serial.println("[MyApp] SRC set to rc"); }
     83e:	4b27      	ldr	r3, [pc, #156]	; (8dc <loop+0x474>)
     840:	2201      	movs	r2, #1
     842:	2115      	movs	r1, #21
     844:	4829      	ldr	r0, [pc, #164]	; (8ec <loop+0x484>)
     846:	701a      	strb	r2, [r3, #0]
     848:	f002 fe6a 	bl	3520 <usb_serial_write>
     84c:	481f      	ldr	r0, [pc, #124]	; (8cc <loop+0x464>)
     84e:	f000 ff73 	bl	1738 <Print::println()>
     852:	e7c5      	b.n	7e0 <loop+0x378>
     854:	2300      	movs	r3, #0
     856:	4926      	ldr	r1, [pc, #152]	; (8f0 <loop+0x488>)
     858:	e704      	b.n	664 <loop+0x1fc>
     85a:	2115      	movs	r1, #21
     85c:	4825      	ldr	r0, [pc, #148]	; (8f4 <loop+0x48c>)
     85e:	f002 fe5f 	bl	3520 <usb_serial_write>
     862:	481a      	ldr	r0, [pc, #104]	; (8cc <loop+0x464>)
     864:	f000 ff68 	bl	1738 <Print::println()>
     868:	e7ba      	b.n	7e0 <loop+0x378>
     86a:	bf00      	nop
     86c:	f3af 8000 	nop.w
     870:	60000000 	.word	0x60000000
     874:	400a6666 	.word	0x400a6666
     878:	00000000 	.word	0x00000000
     87c:	40affe00 	.word	0x40affe00
     880:	20008e8c 	.word	0x20008e8c
     884:	20008e8a 	.word	0x20008e8a
     888:	20007724 	.word	0x20007724
     88c:	2000772c 	.word	0x2000772c
     890:	20007738 	.word	0x20007738
     894:	20007748 	.word	0x20007748
     898:	2000775c 	.word	0x2000775c
     89c:	2000776c 	.word	0x2000776c
     8a0:	001f47ff 	.word	0x001f47ff
     8a4:	20008df8 	.word	0x20008df8
     8a8:	20007780 	.word	0x20007780
     8ac:	200077a0 	.word	0x200077a0
     8b0:	003e8c16 	.word	0x003e8c16
     8b4:	00100101 	.word	0x00100101
     8b8:	200077c0 	.word	0x200077c0
     8bc:	200077dc 	.word	0x200077dc
     8c0:	20000398 	.word	0x20000398
     8c4:	200077f8 	.word	0x200077f8
     8c8:	20007874 	.word	0x20007874
     8cc:	20007b60 	.word	0x20007b60
     8d0:	200076f8 	.word	0x200076f8
     8d4:	2000781c 	.word	0x2000781c
     8d8:	20007838 	.word	0x20007838
     8dc:	2000823a 	.word	0x2000823a
     8e0:	20007840 	.word	0x20007840
     8e4:	20007700 	.word	0x20007700
     8e8:	2000771c 	.word	0x2000771c
     8ec:	20007820 	.word	0x20007820
     8f0:	20007714 	.word	0x20007714
     8f4:	2000785c 	.word	0x2000785c
     8f8:	20008e88 	.word	0x20008e88
     8fc:	20008e8e 	.word	0x20008e8e
     900:	20008e96 	.word	0x20008e96

00000904 <setup>:
void setup() {
     904:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pinMode(LED_PIN, OUTPUT);
     908:	2101      	movs	r1, #1
void setup() {
     90a:	b083      	sub	sp, #12
  pinMode(LED_PIN, OUTPUT);
     90c:	200d      	movs	r0, #13
		uint32_t millis_begin = systick_millis_count;
     90e:	4d35      	ldr	r5, [pc, #212]	; (9e4 <setup+0xe0>)
     910:	f001 fa3e 	bl	1d90 <pinMode>
  digitalWrite(LED_PIN, LOW);
     914:	2100      	movs	r1, #0
     916:	200d      	movs	r0, #13
     918:	4c33      	ldr	r4, [pc, #204]	; (9e8 <setup+0xe4>)
     91a:	f001 f9fd 	bl	1d18 <digitalWrite>
  pinMode(PIN_FWD, INPUT_PULLUP);
     91e:	2102      	movs	r1, #2
     920:	200a      	movs	r0, #10
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     922:	4f32      	ldr	r7, [pc, #200]	; (9ec <setup+0xe8>)
     924:	f001 fa34 	bl	1d90 <pinMode>
  pinMode(PIN_REV, INPUT_PULLUP);
     928:	2102      	movs	r1, #2
     92a:	200b      	movs	r0, #11
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     92c:	f8df 90e0 	ldr.w	r9, [pc, #224]	; a10 <setup+0x10c>
     930:	f001 fa2e 	bl	1d90 <pinMode>
static inline void analogReadResolution(unsigned int bits) { analogReadRes(bits); }
     934:	200c      	movs	r0, #12
     936:	f001 f927 	bl	1b88 <analogReadRes>
  analogReadAveraging(8);
     93a:	2008      	movs	r0, #8
     93c:	f001 f954 	bl	1be8 <analogReadAveraging>
				if (elapsed > 750) break;
     940:	f240 28ee 	movw	r8, #750	; 0x2ee
		uint32_t millis_begin = systick_millis_count;
     944:	682e      	ldr	r6, [r5, #0]
		yield();
     946:	f002 fe69 	bl	361c <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     94a:	7823      	ldrb	r3, [r4, #0]
     94c:	2b00      	cmp	r3, #0
     94e:	d03c      	beq.n	9ca <setup+0xc6>
     950:	783b      	ldrb	r3, [r7, #0]
     952:	07db      	lsls	r3, r3, #31
     954:	d539      	bpl.n	9ca <setup+0xc6>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     956:	682b      	ldr	r3, [r5, #0]
     958:	f8d9 2000 	ldr.w	r2, [r9]
     95c:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     95e:	2b0e      	cmp	r3, #14
     960:	d933      	bls.n	9ca <setup+0xc6>
  Serial2.begin(115200);       // to ESP32 (pins 7/8 on Teensy)
     962:	4c23      	ldr	r4, [pc, #140]	; (9f0 <setup+0xec>)
     964:	2200      	movs	r2, #0
     966:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
     96a:	4620      	mov	r0, r4
     96c:	f000 fbe2 	bl	1134 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)>
  OtaUpdater::begin(Serial2);
     970:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
     974:	4620      	mov	r0, r4
     976:	f000 f85f 	bl	a38 <OtaUpdater::begin(HardwareSerial&, unsigned long)>
  OtaUpdater::setAppVersion(APP_FW_VERSION);
     97a:	481e      	ldr	r0, [pc, #120]	; (9f4 <setup+0xf0>)
     97c:	f000 f84a 	bl	a14 <OtaUpdater::setAppVersion(char const*)>
    s = &out;
     980:	481d      	ldr	r0, [pc, #116]	; (9f8 <setup+0xf4>)
    enabled = true;
     982:	4b1e      	ldr	r3, [pc, #120]	; (9fc <setup+0xf8>)
     984:	2201      	movs	r2, #1
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     986:	210c      	movs	r1, #12
    s = &out;
     988:	6004      	str	r4, [r0, #0]
     98a:	481d      	ldr	r0, [pc, #116]	; (a00 <setup+0xfc>)
    enabled = true;
     98c:	701a      	strb	r2, [r3, #0]
     98e:	f002 fdc7 	bl	3520 <usb_serial_write>
     992:	481c      	ldr	r0, [pc, #112]	; (a04 <setup+0x100>)
     994:	f000 fed0 	bl	1738 <Print::println()>
  SLOGF("S MyApp FW=%s  (blink=%d ms)\r\n", APP_FW_VERSION, BLINK_MS);
     998:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     99c:	4915      	ldr	r1, [pc, #84]	; (9f4 <setup+0xf0>)
     99e:	481a      	ldr	r0, [pc, #104]	; (a08 <setup+0x104>)
     9a0:	f7ff fd42 	bl	428 <SLOGF(char const*, ...)>
  delay(10);
     9a4:	200a      	movs	r0, #10
     9a6:	f001 f963 	bl	1c70 <delay>
        (int)digitalRead(PIN_FWD), (int)digitalRead(PIN_REV));
     9aa:	200a      	movs	r0, #10
     9ac:	f001 f9de 	bl	1d6c <digitalRead>
     9b0:	4601      	mov	r1, r0
     9b2:	200b      	movs	r0, #11
     9b4:	9101      	str	r1, [sp, #4]
     9b6:	f001 f9d9 	bl	1d6c <digitalRead>
  SLOGF("S BOOT_PINS fwd=%d rev=%d (0=LOW,1=HIGH)\r\n",
     9ba:	9901      	ldr	r1, [sp, #4]
        (int)digitalRead(PIN_FWD), (int)digitalRead(PIN_REV));
     9bc:	4602      	mov	r2, r0
  SLOGF("S BOOT_PINS fwd=%d rev=%d (0=LOW,1=HIGH)\r\n",
     9be:	4813      	ldr	r0, [pc, #76]	; (a0c <setup+0x108>)
}
     9c0:	b003      	add	sp, #12
     9c2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  SLOGF("S BOOT_PINS fwd=%d rev=%d (0=LOW,1=HIGH)\r\n",
     9c6:	f7ff bd2f 	b.w	428 <SLOGF(char const*, ...)>
			uint32_t elapsed = systick_millis_count - millis_begin;
     9ca:	682b      	ldr	r3, [r5, #0]
			if (usb_configuration) {
     9cc:	7822      	ldrb	r2, [r4, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
     9ce:	1b9b      	subs	r3, r3, r6
			if (usb_configuration) {
     9d0:	b12a      	cbz	r2, 9de <setup+0xda>
				if (elapsed > 2000) break;
     9d2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
     9d6:	d8c4      	bhi.n	962 <setup+0x5e>
			yield();
     9d8:	f002 fe20 	bl	361c <yield>
     9dc:	e7b3      	b.n	946 <setup+0x42>
				if (elapsed > 750) break;
     9de:	4543      	cmp	r3, r8
     9e0:	d9fa      	bls.n	9d8 <setup+0xd4>
     9e2:	e7be      	b.n	962 <setup+0x5e>
     9e4:	20008e6c 	.word	0x20008e6c
     9e8:	20008ea4 	.word	0x20008ea4
     9ec:	20008ea3 	.word	0x20008ea3
     9f0:	20007b70 	.word	0x20007b70
     9f4:	200078cc 	.word	0x200078cc
     9f8:	20007c38 	.word	0x20007c38
     9fc:	2000823b 	.word	0x2000823b
     a00:	200078e4 	.word	0x200078e4
     a04:	20007b60 	.word	0x20007b60
     a08:	200078f4 	.word	0x200078f4
     a0c:	20007914 	.word	0x20007914
     a10:	20008e7c 	.word	0x20008e7c

00000a14 <OtaUpdater::setAppVersion(char const*)>:
static const char*     LOADER_ID = "FlasherX v2.4 (in-app)";

// === App-provided version/name (set from your .ino via setAppVersion) ===
static const char* _appVersion = "MyApp";
void OtaUpdater::setAppVersion(const char* name) {
  _appVersion = (name && name[0]) ? name : "MyApp";
     a14:	b138      	cbz	r0, a26 <OtaUpdater::setAppVersion(char const*)+0x12>
     a16:	4b06      	ldr	r3, [pc, #24]	; (a30 <OtaUpdater::setAppVersion(char const*)+0x1c>)
     a18:	7802      	ldrb	r2, [r0, #0]
     a1a:	2a00      	cmp	r2, #0
     a1c:	bf08      	it	eq
     a1e:	4618      	moveq	r0, r3
     a20:	4b04      	ldr	r3, [pc, #16]	; (a34 <OtaUpdater::setAppVersion(char const*)+0x20>)
     a22:	6018      	str	r0, [r3, #0]
}
     a24:	4770      	bx	lr
  _appVersion = (name && name[0]) ? name : "MyApp";
     a26:	4802      	ldr	r0, [pc, #8]	; (a30 <OtaUpdater::setAppVersion(char const*)+0x1c>)
     a28:	4b02      	ldr	r3, [pc, #8]	; (a34 <OtaUpdater::setAppVersion(char const*)+0x20>)
     a2a:	6018      	str	r0, [r3, #0]
}
     a2c:	4770      	bx	lr
     a2e:	bf00      	nop
     a30:	200003e0 	.word	0x200003e0
     a34:	20007bd0 	.word	0x20007bd0

00000a38 <OtaUpdater::begin(HardwareSerial&, unsigned long)>:
static void handleLine(const char* line);
static void beginHex();
static void handleHexRecord(const char* rec);
static void endHex();

void OtaUpdater::begin(HardwareSerial& otaPort, uint32_t baud) {
     a38:	b538      	push	{r3, r4, r5, lr}
  _ota  = &otaPort;
  _baud = baud ? baud : 115200;
     a3a:	2900      	cmp	r1, #0
  _ota->begin(_baud);
     a3c:	6804      	ldr	r4, [r0, #0]
  _ota  = &otaPort;
     a3e:	4d0d      	ldr	r5, [pc, #52]	; (a74 <OtaUpdater::begin(HardwareSerial&, unsigned long)+0x3c>)
  _ota->begin(_baud);
     a40:	f04f 0200 	mov.w	r2, #0
     a44:	69e3      	ldr	r3, [r4, #28]
     a46:	bf08      	it	eq
     a48:	f44f 31e1 	moveq.w	r1, #115200	; 0x1c200
  _ota  = &otaPort;
     a4c:	6028      	str	r0, [r5, #0]
  _ota->begin(_baud);
     a4e:	4798      	blx	r3
  ota.handshakeReady = false;
     a50:	4b09      	ldr	r3, [pc, #36]	; (a78 <OtaUpdater::begin(HardwareSerial&, unsigned long)+0x40>)
     a52:	2200      	movs	r2, #0
  hex_info_reset(&ota.hex, ota.hexData);
     a54:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
     a58:	f103 0078 	add.w	r0, r3, #120	; 0x78
  ota.handshakeReady = false;
     a5c:	801a      	strh	r2, [r3, #0]
  ota.fatal          = false;
     a5e:	709a      	strb	r2, [r3, #2]
  ota.badLines       = 0;
     a60:	615a      	str	r2, [r3, #20]
  ota.lastError[0]   = 0;
     a62:	761a      	strb	r2, [r3, #24]
  ota.bufferSize     = 0;
     a64:	e9c3 2201 	strd	r2, r2, [r3, #4]
  ota.okLines        = 0;
     a68:	e9c3 2203 	strd	r2, r2, [r3, #12]
  resetOtaSession();
}
     a6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hex_info_reset(&ota.hex, ota.hexData);
     a70:	f7ff bb4e 	b.w	110 <hex_info_reset(hex_info_t*, char*)>
     a74:	20007c34 	.word	0x20007c34
     a78:	20008880 	.word	0x20008880

00000a7c <OtaUpdater::inProgress()>:

bool OtaUpdater::inProgress() { return ota.inProgress; }
     a7c:	4b01      	ldr	r3, [pc, #4]	; (a84 <OtaUpdater::inProgress()+0x8>)
     a7e:	7858      	ldrb	r0, [r3, #1]
     a80:	4770      	bx	lr
     a82:	bf00      	nop
     a84:	20008880 	.word	0x20008880

00000a88 <OtaUpdater::tick()>:

const char* OtaUpdater::loaderId() { return LOADER_ID; }

void OtaUpdater::tick() {
     a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     a8c:	4caa      	ldr	r4, [pc, #680]	; (d38 <OtaUpdater::tick()+0x2b0>)
    handleHexRecord(line + 2);
    return;
  }

  // Commands
  if (!strncmp(line, "HELLO", 5)) {
     a8e:	4eab      	ldr	r6, [pc, #684]	; (d3c <OtaUpdater::tick()+0x2b4>)
    if (!strcmp(tok, OTA_TOKEN)) { ota.handshakeReady = true; sendLine("READY"); }
    else { ota.handshakeReady = false; sendLine("NACK"); }
    return;
  }

  if (!strcmp(line, "BEGIN HEX")) { beginHex(); return; }
     a90:	4fab      	ldr	r7, [pc, #684]	; (d40 <OtaUpdater::tick()+0x2b8>)
  if (!strcmp(line, "END"))       { endHex();   return; }
     a92:	f8df 82f4 	ldr.w	r8, [pc, #756]	; d88 <OtaUpdater::tick()+0x300>
  if (!strcmp(line, "PING"))      { sendLine("PONG"); return; }
     a96:	f8df 92f4 	ldr.w	r9, [pc, #756]	; d8c <OtaUpdater::tick()+0x304>

  // VERSION: now reports the string set from your .ino
  if (!strcmp(line, "VERSION")) {
     a9a:	f8df b2f4 	ldr.w	fp, [pc, #756]	; d90 <OtaUpdater::tick()+0x308>
void OtaUpdater::tick() {
     a9e:	ed2d 8b02 	vpush	{d8}
     aa2:	b087      	sub	sp, #28
  while (_ota->available()) {
     aa4:	6820      	ldr	r0, [r4, #0]
     aa6:	6803      	ldr	r3, [r0, #0]
     aa8:	691b      	ldr	r3, [r3, #16]
     aaa:	4798      	blx	r3
     aac:	b1d0      	cbz	r0, ae4 <OtaUpdater::tick()+0x5c>
    char c = (char)_ota->read();
     aae:	6820      	ldr	r0, [r4, #0]
     ab0:	6803      	ldr	r3, [r0, #0]
     ab2:	695b      	ldr	r3, [r3, #20]
     ab4:	4798      	blx	r3
     ab6:	b2c0      	uxtb	r0, r0
    if (c == '\r') continue;
     ab8:	280d      	cmp	r0, #13
     aba:	d0f3      	beq.n	aa4 <OtaUpdater::tick()+0x1c>
    if (c == '\n') {
     abc:	280a      	cmp	r0, #10
     abe:	d008      	beq.n	ad2 <OtaUpdater::tick()+0x4a>
    } else if (n + 1 < sizeof(buf)) {
     ac0:	4aa0      	ldr	r2, [pc, #640]	; (d44 <OtaUpdater::tick()+0x2bc>)
     ac2:	6813      	ldr	r3, [r2, #0]
     ac4:	1c59      	adds	r1, r3, #1
     ac6:	29bf      	cmp	r1, #191	; 0xbf
     ac8:	d8ec      	bhi.n	aa4 <OtaUpdater::tick()+0x1c>
      buf[n++] = c;
     aca:	6011      	str	r1, [r2, #0]
     acc:	4a9e      	ldr	r2, [pc, #632]	; (d48 <OtaUpdater::tick()+0x2c0>)
     ace:	54d0      	strb	r0, [r2, r3]
     ad0:	e7e8      	b.n	aa4 <OtaUpdater::tick()+0x1c>
      buf[n] = 0;
     ad2:	4d9c      	ldr	r5, [pc, #624]	; (d44 <OtaUpdater::tick()+0x2bc>)
     ad4:	2200      	movs	r2, #0
     ad6:	489c      	ldr	r0, [pc, #624]	; (d48 <OtaUpdater::tick()+0x2c0>)
     ad8:	682b      	ldr	r3, [r5, #0]
     ada:	54c2      	strb	r2, [r0, r3]
      if (n) handleLine(buf);
     adc:	b93b      	cbnz	r3, aee <OtaUpdater::tick()+0x66>
      n = 0;
     ade:	2300      	movs	r3, #0
     ae0:	602b      	str	r3, [r5, #0]
     ae2:	e7df      	b.n	aa4 <OtaUpdater::tick()+0x1c>
}
     ae4:	b007      	add	sp, #28
     ae6:	ecbd 8b02 	vpop	{d8}
     aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!line || !line[0]) return;
     aee:	7803      	ldrb	r3, [r0, #0]
     af0:	2b00      	cmp	r3, #0
     af2:	d0f4      	beq.n	ade <OtaUpdater::tick()+0x56>
  if (line[0] == 'L' && line[1] == ' ') {
     af4:	2b4c      	cmp	r3, #76	; 0x4c
     af6:	f000 8099 	beq.w	c2c <OtaUpdater::tick()+0x1a4>
  if (!strncmp(line, "HELLO", 5)) {
     afa:	6803      	ldr	r3, [r0, #0]
     afc:	42b3      	cmp	r3, r6
     afe:	f000 80c2 	beq.w	c86 <OtaUpdater::tick()+0x1fe>
  if (!strcmp(line, "BEGIN HEX")) { beginHex(); return; }
     b02:	6803      	ldr	r3, [r0, #0]
     b04:	42bb      	cmp	r3, r7
     b06:	f000 80e1 	beq.w	ccc <OtaUpdater::tick()+0x244>
  if (!strcmp(line, "END"))       { endHex();   return; }
     b0a:	6803      	ldr	r3, [r0, #0]
     b0c:	4543      	cmp	r3, r8
     b0e:	d013      	beq.n	b38 <OtaUpdater::tick()+0xb0>
  if (!strcmp(line, "PING"))      { sendLine("PONG"); return; }
     b10:	454b      	cmp	r3, r9
     b12:	f000 8154 	beq.w	dbe <OtaUpdater::tick()+0x336>
  if (!strcmp(line, "VERSION")) {
     b16:	6803      	ldr	r3, [r0, #0]
     b18:	455b      	cmp	r3, fp
     b1a:	f000 8158 	beq.w	dce <OtaUpdater::tick()+0x346>
  _ota->print(s);
     b1e:	6820      	ldr	r0, [r4, #0]
							  return write((const uint8_t *)str, strlen(str)); }
     b20:	2203      	movs	r2, #3
     b22:	498a      	ldr	r1, [pc, #552]	; (d4c <OtaUpdater::tick()+0x2c4>)
     b24:	6803      	ldr	r3, [r0, #0]
     b26:	685b      	ldr	r3, [r3, #4]
     b28:	4798      	blx	r3
    _ota->print("FW ");
    _ota->print(_appVersion);
    _ota->print("\r\n");
    _ota->print("FLASHERX ");
    _ota->print(LOADER_ID);
    _ota->print("\r\n");
     b2a:	6820      	ldr	r0, [r4, #0]
     b2c:	2202      	movs	r2, #2
     b2e:	4988      	ldr	r1, [pc, #544]	; (d50 <OtaUpdater::tick()+0x2c8>)
     b30:	6803      	ldr	r3, [r0, #0]
     b32:	685b      	ldr	r3, [r3, #4]
     b34:	4798      	blx	r3
     b36:	e7d2      	b.n	ade <OtaUpdater::tick()+0x56>
    _ota->print("BAD "); _ota->print(lineNo);  _ota->print("\r\n");
  }
}

static void endHex() {
  if (!ota.inProgress) { sendLine("HEX IDLE"); return; }
     b38:	f8df a244 	ldr.w	sl, [pc, #580]	; d80 <OtaUpdater::tick()+0x2f8>
  if (!strcmp(line, "END"))       { endHex();   return; }
     b3c:	2200      	movs	r2, #0
  if (!ota.inProgress) { sendLine("HEX IDLE"); return; }
     b3e:	f89a 3001 	ldrb.w	r3, [sl, #1]
     b42:	2b00      	cmp	r3, #0
     b44:	f000 8133 	beq.w	dae <OtaUpdater::tick()+0x326>

  ota.inProgress     = false;
  ota.handshakeReady = false;

  uint32_t payload = 0;
  if (ota.hex.min != 0xFFFFFFFF && ota.hex.max > ota.hex.min) {
     b48:	f8da 308c 	ldr.w	r3, [sl, #140]	; 0x8c
  ota.handshakeReady = false;
     b4c:	f8aa 2000 	strh.w	r2, [sl]
  if (ota.hex.min != 0xFFFFFFFF && ota.hex.max > ota.hex.min) {
     b50:	1c59      	adds	r1, r3, #1
     b52:	f000 818d 	beq.w	e70 <OtaUpdater::tick()+0x3e8>
     b56:	f8da 1090 	ldr.w	r1, [sl, #144]	; 0x90
     b5a:	428b      	cmp	r3, r1
     b5c:	f080 8188 	bcs.w	e70 <OtaUpdater::tick()+0x3e8>
    payload = ota.hex.max - ota.hex.min;
     b60:	1acb      	subs	r3, r1, r3
     b62:	9302      	str	r3, [sp, #8]
  }

  bool success = (!ota.fatal && ota.badLines == 0);
     b64:	f89a 3002 	ldrb.w	r3, [sl, #2]
     b68:	2b00      	cmp	r3, #0
     b6a:	f040 815e 	bne.w	e2a <OtaUpdater::tick()+0x3a2>
     b6e:	f8da 3014 	ldr.w	r3, [sl, #20]
     b72:	9303      	str	r3, [sp, #12]
     b74:	2b00      	cmp	r3, #0
     b76:	f040 8158 	bne.w	e2a <OtaUpdater::tick()+0x3a2>
  if (success && !ota.hex.eof) success = false;
     b7a:	f8da 3094 	ldr.w	r3, [sl, #148]	; 0x94
     b7e:	2b00      	cmp	r3, #0
     b80:	f000 8153 	beq.w	e2a <OtaUpdater::tick()+0x3a2>
  if (success && ota.bytes == 0) success = false;
     b84:	f8da 300c 	ldr.w	r3, [sl, #12]
     b88:	2b00      	cmp	r3, #0
     b8a:	f000 814e 	beq.w	e2a <OtaUpdater::tick()+0x3a2>
    uint32_t v = *(uint32_t*)(0x40C + ota.bufferAddr);
    if (v != 0xFFFFF9DE) success = false;
  }
#endif

  if (success && !check_flash_id(ota.bufferAddr, payload)) success = false;
     b8e:	9902      	ldr	r1, [sp, #8]
     b90:	f8da 0004 	ldr.w	r0, [sl, #4]
     b94:	f7ff fbc2 	bl	31c <check_flash_id>
     b98:	2800      	cmp	r0, #0
     b9a:	f000 8146 	beq.w	e2a <OtaUpdater::tick()+0x3a2>

  if (success) {
    _ota->print("HEX OK lines="); _ota->print(ota.hex.lines);
     b9e:	6820      	ldr	r0, [r4, #0]
     ba0:	220d      	movs	r2, #13
     ba2:	496c      	ldr	r1, [pc, #432]	; (d54 <OtaUpdater::tick()+0x2cc>)
     ba4:	6803      	ldr	r3, [r0, #0]
     ba6:	685b      	ldr	r3, [r3, #4]
     ba8:	4798      	blx	r3
	size_t print(int n)				{ return print((long)n); }
     baa:	f8da 1098 	ldr.w	r1, [sl, #152]	; 0x98
     bae:	6820      	ldr	r0, [r4, #0]
     bb0:	f000 fdb6 	bl	1720 <Print::print(long)>
    _ota->print(" bytes=");       _ota->print(ota.bytes);
     bb4:	6820      	ldr	r0, [r4, #0]
							  return write((const uint8_t *)str, strlen(str)); }
     bb6:	2207      	movs	r2, #7
     bb8:	4967      	ldr	r1, [pc, #412]	; (d58 <OtaUpdater::tick()+0x2d0>)
     bba:	6803      	ldr	r3, [r0, #0]
     bbc:	685b      	ldr	r3, [r3, #4]
     bbe:	4798      	blx	r3
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     bc0:	9b03      	ldr	r3, [sp, #12]
     bc2:	220a      	movs	r2, #10
     bc4:	f8da 100c 	ldr.w	r1, [sl, #12]
     bc8:	6820      	ldr	r0, [r4, #0]
     bca:	f000 fddf 	bl	178c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    _ota->print("\r\n");
     bce:	6820      	ldr	r0, [r4, #0]
							  return write((const uint8_t *)str, strlen(str)); }
     bd0:	2202      	movs	r2, #2
     bd2:	495f      	ldr	r1, [pc, #380]	; (d50 <OtaUpdater::tick()+0x2c8>)
     bd4:	6803      	ldr	r3, [r0, #0]
     bd6:	685b      	ldr	r3, [r3, #4]
     bd8:	4798      	blx	r3
    _ota->print("APPLIED\r\n");
     bda:	6820      	ldr	r0, [r4, #0]
     bdc:	495f      	ldr	r1, [pc, #380]	; (d5c <OtaUpdater::tick()+0x2d4>)
     bde:	2209      	movs	r2, #9
     be0:	6803      	ldr	r3, [r0, #0]
     be2:	685b      	ldr	r3, [r3, #4]
     be4:	4798      	blx	r3
    _ota->flush();
     be6:	6820      	ldr	r0, [r4, #0]
     be8:	6803      	ldr	r3, [r0, #0]
     bea:	68db      	ldr	r3, [r3, #12]
     bec:	4798      	blx	r3

    flash_move(FLASH_BASE_ADDR, ota.bufferAddr, payload);
     bee:	9a02      	ldr	r2, [sp, #8]
     bf0:	f8da 1004 	ldr.w	r1, [sl, #4]
     bf4:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
     bf8:	f7ff fa22 	bl	40 <flash_move>
    REBOOT;
     bfc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     c00:	4a57      	ldr	r2, [pc, #348]	; (d60 <OtaUpdater::tick()+0x2d8>)
     c02:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
  ota.handshakeReady = false;
     c06:	2300      	movs	r3, #0
  hex_info_reset(&ota.hex, ota.hexData);
     c08:	4956      	ldr	r1, [pc, #344]	; (d64 <OtaUpdater::tick()+0x2dc>)
  ota.handshakeReady = false;
     c0a:	f8aa 3000 	strh.w	r3, [sl]
  hex_info_reset(&ota.hex, ota.hexData);
     c0e:	f1a1 0028 	sub.w	r0, r1, #40	; 0x28
  ota.lastError[0]   = 0;
     c12:	f88a 3018 	strb.w	r3, [sl, #24]
  ota.fatal          = false;
     c16:	f88a 3002 	strb.w	r3, [sl, #2]
  ota.badLines       = 0;
     c1a:	f8ca 3014 	str.w	r3, [sl, #20]
  ota.bufferSize     = 0;
     c1e:	e9ca 3301 	strd	r3, r3, [sl, #4]
  ota.okLines        = 0;
     c22:	e9ca 3303 	strd	r3, r3, [sl, #12]
  hex_info_reset(&ota.hex, ota.hexData);
     c26:	f7ff fa73 	bl	110 <hex_info_reset(hex_info_t*, char*)>
}
     c2a:	e758      	b.n	ade <OtaUpdater::tick()+0x56>
  if (line[0] == 'L' && line[1] == ' ') {
     c2c:	7843      	ldrb	r3, [r0, #1]
     c2e:	2b20      	cmp	r3, #32
     c30:	f47f af63 	bne.w	afa <OtaUpdater::tick()+0x72>
  if (!ota.inProgress) { sendLine("HEX IDLE"); return; }
     c34:	f8df a148 	ldr.w	sl, [pc, #328]	; d80 <OtaUpdater::tick()+0x2f8>
     c38:	f89a 3001 	ldrb.w	r3, [sl, #1]
     c3c:	2b00      	cmp	r3, #0
     c3e:	f000 80b6 	beq.w	dae <OtaUpdater::tick()+0x326>
  ota.hex.lines++;
     c42:	f8da 3098 	ldr.w	r3, [sl, #152]	; 0x98
     c46:	3301      	adds	r3, #1
     c48:	ee08 3a10 	vmov	s16, r3
     c4c:	f8ca 3098 	str.w	r3, [sl, #152]	; 0x98
  if (ok && (parse_hex_line(rec, ota.hex.data, &ota.hex.addr, &ota.hex.num, &ota.hex.code) == 0)) {
     c50:	f89a 3002 	ldrb.w	r3, [sl, #2]
     c54:	2b00      	cmp	r3, #0
     c56:	f000 8111 	beq.w	e7c <OtaUpdater::tick()+0x3f4>
    ota.badLines++;
     c5a:	f8da 3014 	ldr.w	r3, [sl, #20]
     c5e:	2204      	movs	r2, #4
    _ota->print("BAD "); _ota->print(lineNo);  _ota->print("\r\n");
     c60:	6820      	ldr	r0, [r4, #0]
    ota.badLines++;
     c62:	3301      	adds	r3, #1
     c64:	4940      	ldr	r1, [pc, #256]	; (d68 <OtaUpdater::tick()+0x2e0>)
     c66:	f8ca 3014 	str.w	r3, [sl, #20]
    ota.fatal = true;
     c6a:	2301      	movs	r3, #1
     c6c:	f88a 3002 	strb.w	r3, [sl, #2]
     c70:	6803      	ldr	r3, [r0, #0]
     c72:	685b      	ldr	r3, [r3, #4]
     c74:	4798      	blx	r3
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
     c76:	ee18 1a10 	vmov	r1, s16
     c7a:	2300      	movs	r3, #0
     c7c:	220a      	movs	r2, #10
     c7e:	6820      	ldr	r0, [r4, #0]
     c80:	f000 fd84 	bl	178c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    _ota->print("BAD "); _ota->print(lineNo);  _ota->print("\r\n");
     c84:	e751      	b.n	b2a <OtaUpdater::tick()+0xa2>
  if (!strncmp(line, "HELLO", 5)) {
     c86:	7903      	ldrb	r3, [r0, #4]
     c88:	2b4f      	cmp	r3, #79	; 0x4f
     c8a:	f47f af3a 	bne.w	b02 <OtaUpdater::tick()+0x7a>
    if (ota.inProgress) { sendLine("BUSY"); return; }
     c8e:	f8df a0f0 	ldr.w	sl, [pc, #240]	; d80 <OtaUpdater::tick()+0x2f8>
     c92:	f89a 3001 	ldrb.w	r3, [sl, #1]
     c96:	2b00      	cmp	r3, #0
     c98:	f040 808d 	bne.w	db6 <OtaUpdater::tick()+0x32e>
    while (*tok == ' ') tok++;
     c9c:	7943      	ldrb	r3, [r0, #5]
    const char* tok = line + 5;
     c9e:	4833      	ldr	r0, [pc, #204]	; (d6c <OtaUpdater::tick()+0x2e4>)
    while (*tok == ' ') tok++;
     ca0:	2b20      	cmp	r3, #32
     ca2:	d103      	bne.n	cac <OtaUpdater::tick()+0x224>
     ca4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
     ca8:	2b20      	cmp	r3, #32
     caa:	d0fb      	beq.n	ca4 <OtaUpdater::tick()+0x21c>
    if (!*tok) { sendLine("NACK"); return; }
     cac:	2b00      	cmp	r3, #0
     cae:	d07a      	beq.n	da6 <OtaUpdater::tick()+0x31e>
    if (!strcmp(tok, OTA_TOKEN)) { ota.handshakeReady = true; sendLine("READY"); }
     cb0:	492f      	ldr	r1, [pc, #188]	; (d70 <OtaUpdater::tick()+0x2e8>)
     cb2:	f005 f9d9 	bl	6068 <strcmp>
     cb6:	2800      	cmp	r0, #0
     cb8:	d16c      	bne.n	d94 <OtaUpdater::tick()+0x30c>
     cba:	2301      	movs	r3, #1
  _ota->print(s);
     cbc:	6820      	ldr	r0, [r4, #0]
							  return write((const uint8_t *)str, strlen(str)); }
     cbe:	2205      	movs	r2, #5
     cc0:	492c      	ldr	r1, [pc, #176]	; (d74 <OtaUpdater::tick()+0x2ec>)
    if (!strcmp(tok, OTA_TOKEN)) { ota.handshakeReady = true; sendLine("READY"); }
     cc2:	f88a 3000 	strb.w	r3, [sl]
     cc6:	6803      	ldr	r3, [r0, #0]
     cc8:	685b      	ldr	r3, [r3, #4]
     cca:	e72d      	b.n	b28 <OtaUpdater::tick()+0xa0>
  if (!strcmp(line, "BEGIN HEX")) { beginHex(); return; }
     ccc:	4b2a      	ldr	r3, [pc, #168]	; (d78 <OtaUpdater::tick()+0x2f0>)
     cce:	492b      	ldr	r1, [pc, #172]	; (d7c <OtaUpdater::tick()+0x2f4>)
     cd0:	681a      	ldr	r2, [r3, #0]
     cd2:	428a      	cmp	r2, r1
     cd4:	f47f af19 	bne.w	b0a <OtaUpdater::tick()+0x82>
     cd8:	889b      	ldrh	r3, [r3, #4]
     cda:	2b58      	cmp	r3, #88	; 0x58
     cdc:	f47f af15 	bne.w	b0a <OtaUpdater::tick()+0x82>
  if (!ota.handshakeReady || ota.inProgress) { sendLine("HEX IDLE"); return; }
     ce0:	4b27      	ldr	r3, [pc, #156]	; (d80 <OtaUpdater::tick()+0x2f8>)
     ce2:	781a      	ldrb	r2, [r3, #0]
     ce4:	2a00      	cmp	r2, #0
     ce6:	d062      	beq.n	dae <OtaUpdater::tick()+0x326>
     ce8:	f893 a001 	ldrb.w	sl, [r3, #1]
     cec:	f1ba 0f00 	cmp.w	sl, #0
     cf0:	d15d      	bne.n	dae <OtaUpdater::tick()+0x326>
  if (firmware_buffer_init(&addr, &size) == 0) {
     cf2:	a905      	add	r1, sp, #20
     cf4:	a804      	add	r0, sp, #16
  uint32_t addr = 0, size = 0;
     cf6:	e9cd aa04 	strd	sl, sl, [sp, #16]
  if (firmware_buffer_init(&addr, &size) == 0) {
     cfa:	f7ff fabf 	bl	27c <firmware_buffer_init>
     cfe:	4b20      	ldr	r3, [pc, #128]	; (d80 <OtaUpdater::tick()+0x2f8>)
     d00:	2800      	cmp	r0, #0
     d02:	f000 80b7 	beq.w	e74 <OtaUpdater::tick()+0x3ec>
  ota.bufferAddr = addr;
     d06:	9a04      	ldr	r2, [sp, #16]
  hex_info_reset(&ota.hex, ota.hexData);
     d08:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
     d0c:	f103 0078 	add.w	r0, r3, #120	; 0x78
  ota.lastError[0] = 0;
     d10:	f883 a018 	strb.w	sl, [r3, #24]
  ota.bufferAddr = addr;
     d14:	605a      	str	r2, [r3, #4]
  ota.bufferSize = size;
     d16:	9a05      	ldr	r2, [sp, #20]
  ota.fatal      = false;
     d18:	f883 a002 	strb.w	sl, [r3, #2]
  ota.bufferSize = size;
     d1c:	609a      	str	r2, [r3, #8]
  ota.inProgress = true;
     d1e:	2201      	movs	r2, #1
  ota.badLines   = 0;
     d20:	f8c3 a014 	str.w	sl, [r3, #20]
  ota.inProgress = true;
     d24:	705a      	strb	r2, [r3, #1]
  ota.okLines    = 0;
     d26:	e9c3 aa03 	strd	sl, sl, [r3, #12]
  hex_info_reset(&ota.hex, ota.hexData);
     d2a:	f7ff f9f1 	bl	110 <hex_info_reset(hex_info_t*, char*)>
  _ota->print(s);
     d2e:	6820      	ldr	r0, [r4, #0]
     d30:	2209      	movs	r2, #9
     d32:	4914      	ldr	r1, [pc, #80]	; (d84 <OtaUpdater::tick()+0x2fc>)
     d34:	e6f6      	b.n	b24 <OtaUpdater::tick()+0x9c>
     d36:	bf00      	nop
     d38:	20007c34 	.word	0x20007c34
     d3c:	4c4c4548 	.word	0x4c4c4548
     d40:	49474542 	.word	0x49474542
     d44:	200089f8 	.word	0x200089f8
     d48:	200089fc 	.word	0x200089fc
     d4c:	200004ac 	.word	0x200004ac
     d50:	2000793c 	.word	0x2000793c
     d54:	20000448 	.word	0x20000448
     d58:	20000458 	.word	0x20000458
     d5c:	20000460 	.word	0x20000460
     d60:	05fa0004 	.word	0x05fa0004
     d64:	20008920 	.word	0x20008920
     d68:	200003f8 	.word	0x200003f8
     d6c:	20008a01 	.word	0x20008a01
     d70:	200003b8 	.word	0x200003b8
     d74:	20000418 	.word	0x20000418
     d78:	20008a00 	.word	0x20008a00
     d7c:	4548204e 	.word	0x4548204e
     d80:	20008880 	.word	0x20008880
     d84:	20000438 	.word	0x20000438
     d88:	00444e45 	.word	0x00444e45
     d8c:	474e4950 	.word	0x474e4950
     d90:	53524556 	.word	0x53524556
    else { ota.handshakeReady = false; sendLine("NACK"); }
     d94:	2300      	movs	r3, #0
  _ota->print(s);
     d96:	6820      	ldr	r0, [r4, #0]
     d98:	2204      	movs	r2, #4
     d9a:	495f      	ldr	r1, [pc, #380]	; (f18 <OtaUpdater::tick()+0x490>)
    else { ota.handshakeReady = false; sendLine("NACK"); }
     d9c:	f88a 3000 	strb.w	r3, [sl]
     da0:	6803      	ldr	r3, [r0, #0]
     da2:	685b      	ldr	r3, [r3, #4]
     da4:	e6c0      	b.n	b28 <OtaUpdater::tick()+0xa0>
  _ota->print(s);
     da6:	6820      	ldr	r0, [r4, #0]
     da8:	2204      	movs	r2, #4
     daa:	495b      	ldr	r1, [pc, #364]	; (f18 <OtaUpdater::tick()+0x490>)
     dac:	e6ba      	b.n	b24 <OtaUpdater::tick()+0x9c>
     dae:	6820      	ldr	r0, [r4, #0]
     db0:	2208      	movs	r2, #8
     db2:	495a      	ldr	r1, [pc, #360]	; (f1c <OtaUpdater::tick()+0x494>)
     db4:	e6b6      	b.n	b24 <OtaUpdater::tick()+0x9c>
     db6:	6820      	ldr	r0, [r4, #0]
     db8:	2204      	movs	r2, #4
     dba:	4959      	ldr	r1, [pc, #356]	; (f20 <OtaUpdater::tick()+0x498>)
     dbc:	e6b2      	b.n	b24 <OtaUpdater::tick()+0x9c>
  if (!strcmp(line, "PING"))      { sendLine("PONG"); return; }
     dbe:	7903      	ldrb	r3, [r0, #4]
     dc0:	2b00      	cmp	r3, #0
     dc2:	f47f aea8 	bne.w	b16 <OtaUpdater::tick()+0x8e>
  _ota->print(s);
     dc6:	6820      	ldr	r0, [r4, #0]
     dc8:	2204      	movs	r2, #4
     dca:	4956      	ldr	r1, [pc, #344]	; (f24 <OtaUpdater::tick()+0x49c>)
     dcc:	e6aa      	b.n	b24 <OtaUpdater::tick()+0x9c>
  if (!strcmp(line, "VERSION")) {
     dce:	6842      	ldr	r2, [r0, #4]
     dd0:	4b55      	ldr	r3, [pc, #340]	; (f28 <OtaUpdater::tick()+0x4a0>)
     dd2:	429a      	cmp	r2, r3
     dd4:	f47f aea3 	bne.w	b1e <OtaUpdater::tick()+0x96>
    _ota->print("FW ");
     dd8:	6820      	ldr	r0, [r4, #0]
     dda:	2203      	movs	r2, #3
     ddc:	4953      	ldr	r1, [pc, #332]	; (f2c <OtaUpdater::tick()+0x4a4>)
     dde:	6803      	ldr	r3, [r0, #0]
     de0:	685b      	ldr	r3, [r3, #4]
     de2:	4798      	blx	r3
    _ota->print(_appVersion);
     de4:	4b52      	ldr	r3, [pc, #328]	; (f30 <OtaUpdater::tick()+0x4a8>)
     de6:	f8d4 a000 	ldr.w	sl, [r4]
     dea:	6819      	ldr	r1, [r3, #0]
	size_t write(const char *str)			{ if (str == nullptr) return 0;
     dec:	b161      	cbz	r1, e08 <OtaUpdater::tick()+0x380>
							  return write((const uint8_t *)str, strlen(str)); }
     dee:	4608      	mov	r0, r1
     df0:	9102      	str	r1, [sp, #8]
     df2:	f005 fb05 	bl	6400 <strlen>
     df6:	f8da 3000 	ldr.w	r3, [sl]
     dfa:	4602      	mov	r2, r0
     dfc:	9902      	ldr	r1, [sp, #8]
     dfe:	4650      	mov	r0, sl
     e00:	685b      	ldr	r3, [r3, #4]
     e02:	4798      	blx	r3
    _ota->print("\r\n");
     e04:	f8d4 a000 	ldr.w	sl, [r4]
     e08:	f8da 3000 	ldr.w	r3, [sl]
     e0c:	2202      	movs	r2, #2
     e0e:	4949      	ldr	r1, [pc, #292]	; (f34 <OtaUpdater::tick()+0x4ac>)
     e10:	4650      	mov	r0, sl
     e12:	685b      	ldr	r3, [r3, #4]
     e14:	4798      	blx	r3
    _ota->print("FLASHERX ");
     e16:	6820      	ldr	r0, [r4, #0]
     e18:	2209      	movs	r2, #9
     e1a:	4947      	ldr	r1, [pc, #284]	; (f38 <OtaUpdater::tick()+0x4b0>)
     e1c:	6803      	ldr	r3, [r0, #0]
     e1e:	685b      	ldr	r3, [r3, #4]
     e20:	4798      	blx	r3
    _ota->print(LOADER_ID);
     e22:	6820      	ldr	r0, [r4, #0]
     e24:	2216      	movs	r2, #22
     e26:	4945      	ldr	r1, [pc, #276]	; (f3c <OtaUpdater::tick()+0x4b4>)
     e28:	e67c      	b.n	b24 <OtaUpdater::tick()+0x9c>
  } else {
    _ota->print("HEX ERR lines="); _ota->print(ota.hex.lines);
     e2a:	6820      	ldr	r0, [r4, #0]
     e2c:	220e      	movs	r2, #14
     e2e:	4944      	ldr	r1, [pc, #272]	; (f40 <OtaUpdater::tick()+0x4b8>)
     e30:	6803      	ldr	r3, [r0, #0]
     e32:	685b      	ldr	r3, [r3, #4]
     e34:	4798      	blx	r3
	size_t print(int n)				{ return print((long)n); }
     e36:	f8da 1098 	ldr.w	r1, [sl, #152]	; 0x98
     e3a:	6820      	ldr	r0, [r4, #0]
     e3c:	f000 fc70 	bl	1720 <Print::print(long)>
    _ota->print(" bad=");          _ota->print(ota.badLines);
     e40:	6820      	ldr	r0, [r4, #0]
							  return write((const uint8_t *)str, strlen(str)); }
     e42:	2205      	movs	r2, #5
     e44:	493f      	ldr	r1, [pc, #252]	; (f44 <OtaUpdater::tick()+0x4bc>)
     e46:	6803      	ldr	r3, [r0, #0]
     e48:	685b      	ldr	r3, [r3, #4]
     e4a:	4798      	blx	r3
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     e4c:	f8da 1014 	ldr.w	r1, [sl, #20]
     e50:	2300      	movs	r3, #0
     e52:	220a      	movs	r2, #10
     e54:	6820      	ldr	r0, [r4, #0]
     e56:	f000 fc99 	bl	178c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    _ota->print("\r\n");
     e5a:	6820      	ldr	r0, [r4, #0]
							  return write((const uint8_t *)str, strlen(str)); }
     e5c:	4935      	ldr	r1, [pc, #212]	; (f34 <OtaUpdater::tick()+0x4ac>)
     e5e:	2202      	movs	r2, #2
     e60:	6803      	ldr	r3, [r0, #0]
     e62:	685b      	ldr	r3, [r3, #4]
     e64:	4798      	blx	r3
    firmware_buffer_free(ota.bufferAddr, ota.bufferSize);
     e66:	e9da 0101 	ldrd	r0, r1, [sl, #4]
     e6a:	f7ff fa37 	bl	2dc <firmware_buffer_free>
     e6e:	e6ca      	b.n	c06 <OtaUpdater::tick()+0x17e>
  uint32_t payload = 0;
     e70:	9202      	str	r2, [sp, #8]
     e72:	e677      	b.n	b64 <OtaUpdater::tick()+0xdc>
  _ota->print(s);
     e74:	6820      	ldr	r0, [r4, #0]
     e76:	2208      	movs	r2, #8
     e78:	4933      	ldr	r1, [pc, #204]	; (f48 <OtaUpdater::tick()+0x4c0>)
     e7a:	e653      	b.n	b24 <OtaUpdater::tick()+0x9c>
  if (ok && (parse_hex_line(rec, ota.hex.data, &ota.hex.addr, &ota.hex.num, &ota.hex.code) == 0)) {
     e7c:	f10a 0380 	add.w	r3, sl, #128	; 0x80
     e80:	3002      	adds	r0, #2
     e82:	f10a 027c 	add.w	r2, sl, #124	; 0x7c
     e86:	9300      	str	r3, [sp, #0]
     e88:	f10a 0384 	add.w	r3, sl, #132	; 0x84
     e8c:	f8da 1078 	ldr.w	r1, [sl, #120]	; 0x78
     e90:	f7ff f94c 	bl	12c <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)>
     e94:	2800      	cmp	r0, #0
     e96:	f43f aee0 	beq.w	c5a <OtaUpdater::tick()+0x1d2>
  if (ok && (process_hex_record(&ota.hex) != 0)) {
     e9a:	482c      	ldr	r0, [pc, #176]	; (f4c <OtaUpdater::tick()+0x4c4>)
     e9c:	f7ff f9b4 	bl	208 <process_hex_record(hex_info_t*)>
     ea0:	2800      	cmp	r0, #0
     ea2:	f47f aeda 	bne.w	c5a <OtaUpdater::tick()+0x1d2>
  if (ok && ota.hex.code == 0) {
     ea6:	f8da 3080 	ldr.w	r3, [sl, #128]	; 0x80
     eaa:	bb23      	cbnz	r3, ef6 <OtaUpdater::tick()+0x46e>
    if (ota.hex.max > (FLASH_BASE_ADDR + ota.bufferSize)) {
     eac:	f8da 3008 	ldr.w	r3, [sl, #8]
     eb0:	f8da 2090 	ldr.w	r2, [sl, #144]	; 0x90
     eb4:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
     eb8:	429a      	cmp	r2, r3
     eba:	f63f aece 	bhi.w	c5a <OtaUpdater::tick()+0x1d2>
      uint32_t addr = ota.bufferAddr + ota.hex.base + ota.hex.addr - FLASH_BASE_ADDR;
     ebe:	f8da 2004 	ldr.w	r2, [sl, #4]
     ec2:	f8da 3088 	ldr.w	r3, [sl, #136]	; 0x88
        memcpy((void*)addr, (void*)ota.hex.data, ota.hex.num);
     ec6:	f8da 1078 	ldr.w	r1, [sl, #120]	; 0x78
      uint32_t addr = ota.bufferAddr + ota.hex.base + ota.hex.addr - FLASH_BASE_ADDR;
     eca:	18d0      	adds	r0, r2, r3
      if (!IN_FLASH(ota.bufferAddr)) {
     ecc:	f102 4220 	add.w	r2, r2, #2684354560	; 0xa0000000
      uint32_t addr = ota.bufferAddr + ota.hex.base + ota.hex.addr - FLASH_BASE_ADDR;
     ed0:	f8da 307c 	ldr.w	r3, [sl, #124]	; 0x7c
     ed4:	f100 4020 	add.w	r0, r0, #2684354560	; 0xa0000000
      if (!IN_FLASH(ota.bufferAddr)) {
     ed8:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
        memcpy((void*)addr, (void*)ota.hex.data, ota.hex.num);
     edc:	f8da 2084 	ldr.w	r2, [sl, #132]	; 0x84
      uint32_t addr = ota.bufferAddr + ota.hex.base + ota.hex.addr - FLASH_BASE_ADDR;
     ee0:	4418      	add	r0, r3
      if (!IN_FLASH(ota.bufferAddr)) {
     ee2:	d313      	bcc.n	f0c <OtaUpdater::tick()+0x484>
        memcpy((void*)addr, (void*)ota.hex.data, ota.hex.num);
     ee4:	f001 f894 	bl	2010 <memcpy>
      if (ok) ota.bytes += ota.hex.num;
     ee8:	f8da 300c 	ldr.w	r3, [sl, #12]
     eec:	f8da 2084 	ldr.w	r2, [sl, #132]	; 0x84
     ef0:	4413      	add	r3, r2
     ef2:	f8ca 300c 	str.w	r3, [sl, #12]
    ota.okLines++;
     ef6:	f8da 3010 	ldr.w	r3, [sl, #16]
     efa:	2203      	movs	r2, #3
    _ota->print("OK ");  _ota->print(lineNo);  _ota->print("\r\n");
     efc:	6820      	ldr	r0, [r4, #0]
    ota.okLines++;
     efe:	3301      	adds	r3, #1
     f00:	4913      	ldr	r1, [pc, #76]	; (f50 <OtaUpdater::tick()+0x4c8>)
     f02:	f8ca 3010 	str.w	r3, [sl, #16]
     f06:	6803      	ldr	r3, [r0, #0]
     f08:	685b      	ldr	r3, [r3, #4]
     f0a:	e6b3      	b.n	c74 <OtaUpdater::tick()+0x1ec>
        int e = flash_write_block(addr, ota.hex.data, ota.hex.num);
     f0c:	f7ff fa1e 	bl	34c <flash_write_block>
        if (e) ok = false;
     f10:	2800      	cmp	r0, #0
     f12:	f47f aea2 	bne.w	c5a <OtaUpdater::tick()+0x1d2>
     f16:	e7e7      	b.n	ee8 <OtaUpdater::tick()+0x460>
     f18:	20000410 	.word	0x20000410
     f1c:	200003e8 	.word	0x200003e8
     f20:	20000408 	.word	0x20000408
     f24:	2000048c 	.word	0x2000048c
     f28:	004e4f49 	.word	0x004e4f49
     f2c:	2000049c 	.word	0x2000049c
     f30:	20007bd0 	.word	0x20007bd0
     f34:	2000793c 	.word	0x2000793c
     f38:	200004a0 	.word	0x200004a0
     f3c:	200004b0 	.word	0x200004b0
     f40:	2000046c 	.word	0x2000046c
     f44:	2000047c 	.word	0x2000047c
     f48:	2000042c 	.word	0x2000042c
     f4c:	200088f8 	.word	0x200088f8
     f50:	200003f4 	.word	0x200003f4

00000f54 <HardwareSerialIMXRT::operator bool()>:
	virtual void begin(uint32_t baud, uint32_t format) {
					  serial_begin(BAUD2DIV(baud));
					  serial_format(format); }
	*/

	operator bool()			{ return true; }
     f54:	2001      	movs	r0, #1
     f56:	4770      	bx	lr

00000f58 <HardwareSerialIMXRT::availableForWrite()>:

int HardwareSerialIMXRT::availableForWrite(void)
{
	uint32_t head, tail;

	head = tx_buffer_head_;
     f58:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
	tail = tx_buffer_tail_;
     f5c:	f8b0 2048 	ldrh.w	r2, [r0, #72]	; 0x48
	head = tx_buffer_head_;
     f60:	b29b      	uxth	r3, r3
	tail = tx_buffer_tail_;
     f62:	b292      	uxth	r2, r2
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
     f64:	4293      	cmp	r3, r2
     f66:	d202      	bcs.n	f6e <HardwareSerialIMXRT::availableForWrite()+0x16>
	return tail - head - 1;
     f68:	3a01      	subs	r2, #1
     f6a:	1ad0      	subs	r0, r2, r3
}
     f6c:	4770      	bx	lr
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
     f6e:	6b41      	ldr	r1, [r0, #52]	; 0x34
     f70:	3901      	subs	r1, #1
     f72:	440a      	add	r2, r1
     f74:	1ad0      	subs	r0, r2, r3
     f76:	4770      	bx	lr

00000f78 <HardwareSerialIMXRT::available()>:



int HardwareSerialIMXRT::available(void)
{
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
     f78:	6901      	ldr	r1, [r0, #16]
	uint32_t head, tail;

	// WATER> 0 so IDLE involved may want to check if port has already has RX data to retrieve
	__disable_irq();
     f7a:	b672      	cpsid	i
	head = rx_buffer_head_;
     f7c:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
	tail = rx_buffer_tail_;
     f80:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
	head = rx_buffer_head_;
     f84:	b292      	uxth	r2, r2
	tail = rx_buffer_tail_;
     f86:	b29b      	uxth	r3, r3
	int avail;
	if (head >= tail) avail = head - tail;
     f88:	429a      	cmp	r2, r3
	else avail = rx_buffer_total_size_ + head - tail;	
     f8a:	bf3c      	itt	cc
     f8c:	6b80      	ldrcc	r0, [r0, #56]	; 0x38
     f8e:	1812      	addcc	r2, r2, r0
	avail += (port->WATER >> 24) & 0x7;
     f90:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
	else avail = rx_buffer_total_size_ + head - tail;	
     f92:	1ad3      	subs	r3, r2, r3
	__enable_irq();
     f94:	b662      	cpsie	i
	avail += (port->WATER >> 24) & 0x7;
     f96:	f3c0 6002 	ubfx	r0, r0, #24, #3
	return avail;
}
     f9a:	4418      	add	r0, r3
     f9c:	4770      	bx	lr
     f9e:	bf00      	nop

00000fa0 <HardwareSerialIMXRT::peek()>:
int HardwareSerialIMXRT::peek(void)
{
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
	uint32_t head, tail;

	head = rx_buffer_head_;
     fa0:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
{
     fa4:	4602      	mov	r2, r0
	tail = rx_buffer_tail_;
     fa6:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
	head = rx_buffer_head_;
     faa:	b289      	uxth	r1, r1
	tail = rx_buffer_tail_;
     fac:	b29b      	uxth	r3, r3
	if (head == tail) {
     fae:	4299      	cmp	r1, r3
{
     fb0:	b410      	push	{r4}
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
     fb2:	6904      	ldr	r4, [r0, #16]
	if (head == tail) {
     fb4:	d014      	beq.n	fe0 <HardwareSerialIMXRT::peek()+0x40>
			return c;
		}
		__enable_irq();

	} 
	if (++tail >= rx_buffer_total_size_) tail = 0;
     fb6:	3301      	adds	r3, #1
     fb8:	6b90      	ldr	r0, [r2, #56]	; 0x38
	if (tail < rx_buffer_size_) {
     fba:	6b11      	ldr	r1, [r2, #48]	; 0x30
	if (++tail >= rx_buffer_total_size_) tail = 0;
     fbc:	4298      	cmp	r0, r3
     fbe:	bf98      	it	ls
     fc0:	2300      	movls	r3, #0
	if (tail < rx_buffer_size_) {
     fc2:	4299      	cmp	r1, r3
     fc4:	d806      	bhi.n	fd4 <HardwareSerialIMXRT::peek()+0x34>
		return rx_buffer_[tail];
	} else {
		return rx_buffer_storage_[tail-rx_buffer_size_];
     fc6:	1a5b      	subs	r3, r3, r1
     fc8:	6a52      	ldr	r2, [r2, #36]	; 0x24
     fca:	5cd0      	ldrb	r0, [r2, r3]
     fcc:	b2c0      	uxtb	r0, r0
	}
}
     fce:	f85d 4b04 	ldr.w	r4, [sp], #4
     fd2:	4770      	bx	lr
		return rx_buffer_[tail];
     fd4:	6a12      	ldr	r2, [r2, #32]
}
     fd6:	f85d 4b04 	ldr.w	r4, [sp], #4
		return rx_buffer_[tail];
     fda:	5cd0      	ldrb	r0, [r2, r3]
     fdc:	b2c0      	uxtb	r0, r0
}
     fde:	4770      	bx	lr
		__disable_irq();
     fe0:	b672      	cpsid	i
		head = rx_buffer_head_;  // reread head to make sure no ISR happened
     fe2:	f8b0 004a 	ldrh.w	r0, [r0, #74]	; 0x4a
     fe6:	b280      	uxth	r0, r0
		if (head == tail) {
     fe8:	4281      	cmp	r1, r0
     fea:	d001      	beq.n	ff0 <HardwareSerialIMXRT::peek()+0x50>
		__enable_irq();
     fec:	b662      	cpsie	i
     fee:	e7e2      	b.n	fb6 <HardwareSerialIMXRT::peek()+0x16>
			if (port->WATER & 0x7000000) {
     ff0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     ff2:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
     ff6:	d103      	bne.n	1000 <HardwareSerialIMXRT::peek()+0x60>
			int c = -1;	// assume nothing to return
     ff8:	f04f 30ff 	mov.w	r0, #4294967295
			__enable_irq();
     ffc:	b662      	cpsie	i
			return c;
     ffe:	e7e6      	b.n	fce <HardwareSerialIMXRT::peek()+0x2e>
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    1000:	69e3      	ldr	r3, [r4, #28]
				rx_buffer_head_ = 1;
    1002:	2001      	movs	r0, #1
				rx_buffer_tail_ = 0; 
    1004:	2400      	movs	r4, #0
				rx_buffer_[1] = c;
    1006:	6a11      	ldr	r1, [r2, #32]
				rx_buffer_head_ = 1;
    1008:	f8a2 004a 	strh.w	r0, [r2, #74]	; 0x4a
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    100c:	f3c3 0009 	ubfx	r0, r3, #0, #10
				rx_buffer_[1] = c;
    1010:	b2db      	uxtb	r3, r3
				rx_buffer_tail_ = 0; 
    1012:	f8a2 404c 	strh.w	r4, [r2, #76]	; 0x4c
				rx_buffer_[1] = c;
    1016:	704b      	strb	r3, [r1, #1]
    1018:	e7f0      	b.n	ffc <HardwareSerialIMXRT::peek()+0x5c>
    101a:	bf00      	nop

0000101c <HardwareSerialIMXRT::read()>:
{
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
	uint32_t head, tail;
	int c;

	head = rx_buffer_head_;
    101c:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
{
    1020:	4602      	mov	r2, r0
	tail = rx_buffer_tail_;
    1022:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
	head = rx_buffer_head_;
    1026:	b289      	uxth	r1, r1
	tail = rx_buffer_tail_;
    1028:	b29b      	uxth	r3, r3
	if (head == tail) {
    102a:	4299      	cmp	r1, r3
{
    102c:	b430      	push	{r4, r5}
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    102e:	6904      	ldr	r4, [r0, #16]
	if (head == tail) {
    1030:	d025      	beq.n	107e <HardwareSerialIMXRT::read()+0x62>
			return c;
		}
		__enable_irq();

	}
	if (++tail >= rx_buffer_total_size_) tail = 0;
    1032:	3301      	adds	r3, #1
    1034:	6b94      	ldr	r4, [r2, #56]	; 0x38
    1036:	429c      	cmp	r4, r3
    1038:	d916      	bls.n	1068 <HardwareSerialIMXRT::read()+0x4c>
	if (tail < rx_buffer_size_) {
    103a:	6b10      	ldr	r0, [r2, #48]	; 0x30
		c = rx_buffer_[tail];
	} else {
		c = rx_buffer_storage_[tail-rx_buffer_size_];
	}
	rx_buffer_tail_ = tail;
    103c:	fa1f fc83 	uxth.w	ip, r3
	if (tail < rx_buffer_size_) {
    1040:	4298      	cmp	r0, r3
    1042:	d917      	bls.n	1074 <HardwareSerialIMXRT::read()+0x58>
		c = rx_buffer_[tail];
    1044:	6a10      	ldr	r0, [r2, #32]
    1046:	5cc0      	ldrb	r0, [r0, r3]
    1048:	b2c0      	uxtb	r0, r0
	if (rts_pin_baseReg_) {
    104a:	6d95      	ldr	r5, [r2, #88]	; 0x58
	rx_buffer_tail_ = tail;
    104c:	f8a2 c04c 	strh.w	ip, [r2, #76]	; 0x4c
	if (rts_pin_baseReg_) {
    1050:	b145      	cbz	r5, 1064 <HardwareSerialIMXRT::read()+0x48>
		uint32_t avail;
		if (head >= tail) avail = head - tail;
    1052:	4299      	cmp	r1, r3
    1054:	d31c      	bcc.n	1090 <HardwareSerialIMXRT::read()+0x74>
    1056:	1acb      	subs	r3, r1, r3
		else avail = rx_buffer_total_size_ + head - tail;

		if (avail <= rts_low_watermark_) rts_assert();
    1058:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
    105a:	4299      	cmp	r1, r3
    105c:	d302      	bcc.n	1064 <HardwareSerialIMXRT::read()+0x48>
	DIRECT_WRITE_LOW(rts_pin_baseReg_, rts_pin_bitmask_);
    105e:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
    1060:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
	}
	return c;
}	
    1064:	bc30      	pop	{r4, r5}
    1066:	4770      	bx	lr
    1068:	f04f 0c00 	mov.w	ip, #0
	if (tail < rx_buffer_size_) {
    106c:	6b10      	ldr	r0, [r2, #48]	; 0x30
	if (++tail >= rx_buffer_total_size_) tail = 0;
    106e:	4663      	mov	r3, ip
	if (tail < rx_buffer_size_) {
    1070:	4298      	cmp	r0, r3
    1072:	d8e7      	bhi.n	1044 <HardwareSerialIMXRT::read()+0x28>
		c = rx_buffer_storage_[tail-rx_buffer_size_];
    1074:	1a18      	subs	r0, r3, r0
    1076:	6a55      	ldr	r5, [r2, #36]	; 0x24
    1078:	5c28      	ldrb	r0, [r5, r0]
    107a:	b2c0      	uxtb	r0, r0
    107c:	e7e5      	b.n	104a <HardwareSerialIMXRT::read()+0x2e>
    107e:	4608      	mov	r0, r1
		__disable_irq();
    1080:	b672      	cpsid	i
		head = rx_buffer_head_;  // reread head to make sure no ISR happened
    1082:	f8b2 104a 	ldrh.w	r1, [r2, #74]	; 0x4a
    1086:	b289      	uxth	r1, r1
		if (head == tail) {
    1088:	4288      	cmp	r0, r1
    108a:	d004      	beq.n	1096 <HardwareSerialIMXRT::read()+0x7a>
		__enable_irq();
    108c:	b662      	cpsie	i
    108e:	e7d0      	b.n	1032 <HardwareSerialIMXRT::read()+0x16>
		else avail = rx_buffer_total_size_ + head - tail;
    1090:	440c      	add	r4, r1
    1092:	1ae3      	subs	r3, r4, r3
    1094:	e7e0      	b.n	1058 <HardwareSerialIMXRT::read()+0x3c>
			if (port->WATER & 0x7000000) {
    1096:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1098:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
    109c:	d103      	bne.n	10a6 <HardwareSerialIMXRT::read()+0x8a>
			c = -1;	// assume nothing to return
    109e:	f04f 30ff 	mov.w	r0, #4294967295
			__enable_irq();
    10a2:	b662      	cpsie	i
			return c;
    10a4:	e7de      	b.n	1064 <HardwareSerialIMXRT::read()+0x48>
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    10a6:	69e0      	ldr	r0, [r4, #28]
    10a8:	f3c0 0009 	ubfx	r0, r0, #0, #10
    10ac:	e7f9      	b.n	10a2 <HardwareSerialIMXRT::read()+0x86>
    10ae:	bf00      	nop

000010b0 <HardwareSerialIMXRT::flush()>:

void HardwareSerialIMXRT::flush(void)
{
	while (transmitting_) yield(); // wait
    10b0:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
    10b4:	b143      	cbz	r3, 10c8 <HardwareSerialIMXRT::flush()+0x18>
{
    10b6:	b510      	push	{r4, lr}
    10b8:	4604      	mov	r4, r0
	while (transmitting_) yield(); // wait
    10ba:	f002 faaf 	bl	361c <yield>
    10be:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    10c2:	2b00      	cmp	r3, #0
    10c4:	d1f9      	bne.n	10ba <HardwareSerialIMXRT::flush()+0xa>
}
    10c6:	bd10      	pop	{r4, pc}
    10c8:	4770      	bx	lr
    10ca:	bf00      	nop

000010cc <HardwareSerialIMXRT::end()>:
{
    10cc:	b538      	push	{r3, r4, r5, lr}
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    10ce:	e9d0 5304 	ldrd	r5, r3, [r0, #16]
	if (!(hardware->ccm_register & hardware->ccm_value)) return;
    10d2:	e9d3 1203 	ldrd	r1, r2, [r3, #12]
    10d6:	6809      	ldr	r1, [r1, #0]
    10d8:	4211      	tst	r1, r2
    10da:	d028      	beq.n	112e <HardwareSerialIMXRT::end()+0x62>
	while (transmitting_) yield();  // wait for buffered data to send
    10dc:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
    10e0:	4604      	mov	r4, r0
    10e2:	b132      	cbz	r2, 10f2 <HardwareSerialIMXRT::end()+0x26>
    10e4:	f002 fa9a 	bl	361c <yield>
    10e8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    10ec:	2b00      	cmp	r3, #0
    10ee:	d1f9      	bne.n	10e4 <HardwareSerialIMXRT::end()+0x18>
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = 5;
    10f0:	6963      	ldr	r3, [r4, #20]
	port->CTRL = 0;	// disable the TX and RX ...
    10f2:	2100      	movs	r1, #0
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = 5;
    10f4:	4a0e      	ldr	r2, [pc, #56]	; (1130 <HardwareSerialIMXRT::end()+0x64>)
	port->CTRL = 0;	// disable the TX and RX ...
    10f6:	61a9      	str	r1, [r5, #24]
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = 5;
    10f8:	7e20      	ldrb	r0, [r4, #24]
    10fa:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    10fe:	7d00      	ldrb	r0, [r0, #20]
    1100:	eb02 1000 	add.w	r0, r2, r0, lsl #4
    1104:	6845      	ldr	r5, [r0, #4]
    1106:	2005      	movs	r0, #5
    1108:	6028      	str	r0, [r5, #0]
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = 5;
    110a:	7e65      	ldrb	r5, [r4, #25]
    110c:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    1110:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
    1114:	eb02 1203 	add.w	r2, r2, r3, lsl #4
	if (rts_pin_baseReg_) rts_deassert();
    1118:	6da3      	ldr	r3, [r4, #88]	; 0x58
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = 5;
    111a:	6852      	ldr	r2, [r2, #4]
    111c:	6010      	str	r0, [r2, #0]
	rx_buffer_head_ = 0;
    111e:	f8a4 104a 	strh.w	r1, [r4, #74]	; 0x4a
	rx_buffer_tail_ = 0;
    1122:	f8a4 104c 	strh.w	r1, [r4, #76]	; 0x4c
	if (rts_pin_baseReg_) rts_deassert();
    1126:	b113      	cbz	r3, 112e <HardwareSerialIMXRT::end()+0x62>
	DIRECT_WRITE_HIGH(rts_pin_baseReg_, rts_pin_bitmask_);
    1128:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    112a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    112e:	bd38      	pop	{r3, r4, r5, pc}
    1130:	20007360 	.word	0x20007360

00001134 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)>:
	float base = (float)UART_CLOCK / (float)baud;
    1134:	ee07 1a90 	vmov	s15, r1
    1138:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 13a4 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x270>
	for (int osr=4; osr <= 32; osr++) {
    113c:	2104      	movs	r1, #4
		int divint = (int)(div + 0.5f);
    113e:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
	float base = (float)UART_CLOCK / (float)baud;
    1142:	eef8 7a67 	vcvt.f32.u32	s15, s15
	float besterr = 1e20;
    1146:	ed9f 6a98 	vldr	s12, [pc, #608]	; 13a8 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x274>
    114a:	f641 7cff 	movw	ip, #8191	; 0x1fff
	float base = (float)UART_CLOCK / (float)baud;
    114e:	eec7 5a27 	vdiv.f32	s11, s14, s15
{
    1152:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int bestosr = 4;
    1156:	468e      	mov	lr, r1
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    1158:	6905      	ldr	r5, [r0, #16]
	int bestdiv = 1;
    115a:	2401      	movs	r4, #1
		float div = base / (float)osr;
    115c:	ee07 1a90 	vmov	s15, r1
    1160:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    1164:	ee85 7aa7 	vdiv.f32	s14, s11, s15
		int divint = (int)(div + 0.5f);
    1168:	ee77 7a05 	vadd.f32	s15, s14, s10
    116c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    1170:	ee17 3a90 	vmov	r3, s15
    1174:	4563      	cmp	r3, ip
    1176:	bfa8      	it	ge
    1178:	4663      	movge	r3, ip
    117a:	2b01      	cmp	r3, #1
    117c:	bfb8      	it	lt
    117e:	2301      	movlt	r3, #1
		float err = ((float)divint - div) / div;
    1180:	ee07 3a90 	vmov	s15, r3
    1184:	eef8 6ae7 	vcvt.f32.s32	s13, s15
    1188:	ee76 6ac7 	vsub.f32	s13, s13, s14
    118c:	eec6 7a87 	vdiv.f32	s15, s13, s14
		if (err < 0.0f) err = -err;
    1190:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    1194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1198:	bf48      	it	mi
    119a:	eef1 7a67 	vnegmi.f32	s15, s15
		if (err <= besterr) {
    119e:	eef4 7ac6 	vcmpe.f32	s15, s12
    11a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    11a6:	d803      	bhi.n	11b0 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x7c>
			besterr = err;
    11a8:	eeb0 6a67 	vmov.f32	s12, s15
		if (err <= besterr) {
    11ac:	468e      	mov	lr, r1
			bestdiv = divint;
    11ae:	461c      	mov	r4, r3
	for (int osr=4; osr <= 32; osr++) {
    11b0:	3101      	adds	r1, #1
    11b2:	2921      	cmp	r1, #33	; 0x21
    11b4:	d1d2      	bne.n	115c <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x28>
	rx_buffer_head_ = 0;
    11b6:	2100      	movs	r1, #0
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    11b8:	6943      	ldr	r3, [r0, #20]
    11ba:	f402 7600 	and.w	r6, r2, #512	; 0x200
	rx_buffer_head_ = 0;
    11be:	f8a0 104a 	strh.w	r1, [r0, #74]	; 0x4a
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
    11c2:	f8b3 c05a 	ldrh.w	ip, [r3, #90]	; 0x5a
	half_duplex_mode_ = (format & SERIAL_HALF_DUPLEX) != 0;
    11c6:	428e      	cmp	r6, r1
	rx_buffer_tail_ = 0;
    11c8:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    11cc:	f8b3 6058 	ldrh.w	r6, [r3, #88]	; 0x58
	tx_buffer_head_ = 0;
    11d0:	f8a0 1046 	strh.w	r1, [r0, #70]	; 0x46
	tx_buffer_tail_ = 0;
    11d4:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
	transmitting_ = 0;
    11d8:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    11dc:	6b81      	ldr	r1, [r0, #56]	; 0x38
	hardware->ccm_register |= hardware->ccm_value;
    11de:	68df      	ldr	r7, [r3, #12]
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    11e0:	eba1 0606 	sub.w	r6, r1, r6
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
    11e4:	eba1 010c 	sub.w	r1, r1, ip
    11e8:	e9c0 610f 	strd	r6, r1, [r0, #60]	; 0x3c
	hardware->ccm_register |= hardware->ccm_value;
    11ec:	6839      	ldr	r1, [r7, #0]
    11ee:	691e      	ldr	r6, [r3, #16]
    11f0:	ea41 0106 	orr.w	r1, r1, r6
    11f4:	6039      	str	r1, [r7, #0]
	half_duplex_mode_ = (format & SERIAL_HALF_DUPLEX) != 0;
    11f6:	bf14      	ite	ne
    11f8:	2101      	movne	r1, #1
    11fa:	2100      	moveq	r1, #0
    11fc:	7681      	strb	r1, [r0, #26]
	if (!half_duplex_mode_)  {
    11fe:	f040 80ac 	bne.w	135a <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x226>
		*(portControlRegister(hardware->rx_pins[rx_pin_index_].pin)) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    1202:	7e01      	ldrb	r1, [r0, #24]
    1204:	4e69      	ldr	r6, [pc, #420]	; (13ac <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x278>)
    1206:	eb03 1801 	add.w	r8, r3, r1, lsl #4
    120a:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 13cc <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x298>
    120e:	f898 7014 	ldrb.w	r7, [r8, #20]
		if (hardware->rx_pins[rx_pin_index_].select_input_register) {
    1212:	f8d8 a01c 	ldr.w	sl, [r8, #28]
		*(portControlRegister(hardware->rx_pins[rx_pin_index_].pin)) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    1216:	eb06 1707 	add.w	r7, r6, r7, lsl #4
    121a:	68b9      	ldr	r1, [r7, #8]
    121c:	f8c1 9000 	str.w	r9, [r1]
		*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = hardware->rx_pins[rx_pin_index_].mux_val;
    1220:	6879      	ldr	r1, [r7, #4]
    1222:	f8d8 7018 	ldr.w	r7, [r8, #24]
    1226:	600f      	str	r7, [r1, #0]
		if (hardware->rx_pins[rx_pin_index_].select_input_register) {
    1228:	f1ba 0f00 	cmp.w	sl, #0
    122c:	d003      	beq.n	1236 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x102>
		 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
    122e:	f8d8 1020 	ldr.w	r1, [r8, #32]
    1232:	f8ca 1000 	str.w	r1, [sl]
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    1236:	7e47      	ldrb	r7, [r0, #25]
    1238:	21d9      	movs	r1, #217	; 0xd9
    123a:	eb03 1807 	add.w	r8, r3, r7, lsl #4
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3) 
    123e:	f898 c034 	ldrb.w	ip, [r8, #52]	; 0x34
    1242:	eb06 1c0c 	add.w	ip, r6, ip, lsl #4
    1246:	f8dc 7008 	ldr.w	r7, [ip, #8]
    124a:	6039      	str	r1, [r7, #0]
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
    124c:	f8dc 1004 	ldr.w	r1, [ip, #4]
    1250:	f8d8 7038 	ldr.w	r7, [r8, #56]	; 0x38
    1254:	600f      	str	r7, [r1, #0]
	if (hardware->tx_pins[tx_pin_index_].select_input_register) {
    1256:	7e41      	ldrb	r1, [r0, #25]
    1258:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    125c:	6bcf      	ldr	r7, [r1, #60]	; 0x3c
    125e:	b10f      	cbz	r7, 1264 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x130>
	 	*(hardware->tx_pins[tx_pin_index_].select_input_register) =  hardware->tx_pins[tx_pin_index_].select_val;		
    1260:	6c09      	ldr	r1, [r1, #64]	; 0x40
    1262:	6039      	str	r1, [r7, #0]
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    1264:	f10e 31ff 	add.w	r1, lr, #4294967295
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
    1268:	f1be 0f08 	cmp.w	lr, #8
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    126c:	ea4f 6101 	mov.w	r1, r1, lsl #24
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
    1270:	bfcc      	ite	gt
    1272:	f04f 0e00 	movgt.w	lr, #0
    1276:	f04f 0e01 	movle.w	lr, #1
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    127a:	f001 51f8 	and.w	r1, r1, #520093696	; 0x1f000000
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
    127e:	ea44 444e 	orr.w	r4, r4, lr, lsl #17
    1282:	4321      	orrs	r1, r4
	attachInterruptVector(hardware->irq, hardware->irq_handler);
    1284:	685c      	ldr	r4, [r3, #4]
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    1286:	6129      	str	r1, [r5, #16]
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    1288:	7859      	ldrb	r1, [r3, #1]
    128a:	f101 0310 	add.w	r3, r1, #16
	port->PINCFG = 0;
    128e:	2100      	movs	r1, #0
    1290:	60e9      	str	r1, [r5, #12]
    1292:	4947      	ldr	r1, [pc, #284]	; (13b0 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x27c>)
    1294:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    1298:	6941      	ldr	r1, [r0, #20]
	NVIC_ENABLE_IRQ(hardware->irq);
    129a:	f04f 0e01 	mov.w	lr, #1
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    129e:	4c45      	ldr	r4, [pc, #276]	; (13b4 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x280>)
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
    12a0:	f002 0c03 	and.w	ip, r2, #3
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    12a4:	784f      	ldrb	r7, [r1, #1]
    12a6:	f891 1056 	ldrb.w	r1, [r1, #86]	; 0x56
	NVIC_ENABLE_IRQ(hardware->irq);
    12aa:	4b43      	ldr	r3, [pc, #268]	; (13b8 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x284>)
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    12ac:	5539      	strb	r1, [r7, r4]
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
    12ae:	f04f 1702 	mov.w	r7, #131074	; 0x20002
	NVIC_ENABLE_IRQ(hardware->irq);
    12b2:	6944      	ldr	r4, [r0, #20]
    12b4:	7861      	ldrb	r1, [r4, #1]
    12b6:	eb03 1351 	add.w	r3, r3, r1, lsr #5
    12ba:	f001 011f 	and.w	r1, r1, #31
    12be:	009b      	lsls	r3, r3, #2
    12c0:	fa0e f101 	lsl.w	r1, lr, r1
    12c4:	6019      	str	r1, [r3, #0]
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
    12c6:	62ef      	str	r7, [r5, #44]	; 0x2c
	port->FIFO |= LPUART_FIFO_TXFE | LPUART_FIFO_RXFE;
    12c8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    12ca:	f043 0388 	orr.w	r3, r3, #136	; 0x88
    12ce:	62ab      	str	r3, [r5, #40]	; 0x28
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
    12d0:	0753      	lsls	r3, r2, #29
    12d2:	d43e      	bmi.n	1352 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x21e>
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
    12d4:	f44c 1370 	orr.w	r3, ip, #3932160	; 0x3c0000
	if ((format & 0x0F) == 0x04) ctrl |=  LPUART_CTRL_R9T8; // 8N2 is 9 bit with 9th bit always 1
    12d8:	f002 010f 	and.w	r1, r2, #15
    12dc:	2904      	cmp	r1, #4
    12de:	bf08      	it	eq
    12e0:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
	if (format & 0x20) {
    12e4:	0697      	lsls	r7, r2, #26
    12e6:	d52e      	bpl.n	1346 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x212>
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
    12e8:	7e81      	ldrb	r1, [r0, #26]
		ctrl |= LPUART_CTRL_TXINV;		// tx invert
    12ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
    12ee:	2900      	cmp	r1, #0
    12f0:	d13a      	bne.n	1368 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x234>
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
    12f2:	0716      	lsls	r6, r2, #28
	port->CTRL = ctrl;
    12f4:	61ab      	str	r3, [r5, #24]
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
    12f6:	d503      	bpl.n	1300 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1cc>
    12f8:	692b      	ldr	r3, [r5, #16]
    12fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    12fe:	612b      	str	r3, [r5, #16]
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
    1300:	696b      	ldr	r3, [r5, #20]
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
    1302:	06d1      	lsls	r1, r2, #27
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
    1304:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
    1308:	bf48      	it	mi
    130a:	f043 5380 	orrmi.w	r3, r3, #268435456	; 0x10000000
	port->STAT = c;
    130e:	616b      	str	r3, [r5, #20]
	if ( format & 0x100) port->BAUD |= LPUART_BAUD_SBNS;	
    1310:	05d3      	lsls	r3, r2, #23
    1312:	d503      	bpl.n	131c <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1e8>
    1314:	692b      	ldr	r3, [r5, #16]
    1316:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    131a:	612b      	str	r3, [r5, #16]
	if (hardware->_serialEvent) addToSerialEventsList();
    131c:	68a3      	ldr	r3, [r4, #8]
    131e:	b183      	cbz	r3, 1342 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x20e>
	//digitalWrite(4, LOW);
}


void HardwareSerialIMXRT::addToSerialEventsList() {
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    1320:	4e26      	ldr	r6, [pc, #152]	; (13bc <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x288>)
    1322:	7834      	ldrb	r4, [r6, #0]
    1324:	2c00      	cmp	r4, #0
    1326:	d03a      	beq.n	139e <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x26a>
    1328:	1e61      	subs	r1, r4, #1
    132a:	4d25      	ldr	r5, [pc, #148]	; (13c0 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x28c>)
    132c:	b2c9      	uxtb	r1, r1
    132e:	1f2b      	subs	r3, r5, #4
    1330:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    1334:	e001      	b.n	133a <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x206>
    1336:	4299      	cmp	r1, r3
    1338:	d025      	beq.n	1386 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x252>
		if (s_serials_with_serial_events[i] == this) return; // already in the list.
    133a:	f853 2f04 	ldr.w	r2, [r3, #4]!
    133e:	4290      	cmp	r0, r2
    1340:	d1f9      	bne.n	1336 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x202>
};
    1342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
    1346:	7e81      	ldrb	r1, [r0, #26]
    1348:	2900      	cmp	r1, #0
    134a:	d0d2      	beq.n	12f2 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1be>
    134c:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
    1350:	e7cf      	b.n	12f2 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1be>
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
    1352:	4b1c      	ldr	r3, [pc, #112]	; (13c4 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x290>)
    1354:	ea4c 0303 	orr.w	r3, ip, r3
    1358:	e7be      	b.n	12d8 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1a4>
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3) 
    135a:	7e47      	ldrb	r7, [r0, #25]
    135c:	f24f 01d9 	movw	r1, #61657	; 0xf0d9
    1360:	4e12      	ldr	r6, [pc, #72]	; (13ac <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x278>)
    1362:	eb03 1807 	add.w	r8, r3, r7, lsl #4
    1366:	e76a      	b.n	123e <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x10a>
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
    1368:	7e41      	ldrb	r1, [r0, #25]
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
    136a:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
    136e:	eb04 1101 	add.w	r1, r4, r1, lsl #4
    1372:	f891 1034 	ldrb.w	r1, [r1, #52]	; 0x34
    1376:	eb06 1601 	add.w	r6, r6, r1, lsl #4
    137a:	68b6      	ldr	r6, [r6, #8]
    137c:	6831      	ldr	r1, [r6, #0]
    137e:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
    1382:	6031      	str	r1, [r6, #0]
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
    1384:	e7b5      	b.n	12f2 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1be>
	}
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    1386:	1c63      	adds	r3, r4, #1
    1388:	b2db      	uxtb	r3, r3
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    138a:	4a0f      	ldr	r2, [pc, #60]	; (13c8 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x294>)
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    138c:	7033      	strb	r3, [r6, #0]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    138e:	7813      	ldrb	r3, [r2, #0]
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    1390:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    1394:	f043 0302 	orr.w	r3, r3, #2
    1398:	7013      	strb	r3, [r2, #0]
};
    139a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    139e:	2301      	movs	r3, #1
    13a0:	4d07      	ldr	r5, [pc, #28]	; (13c0 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x28c>)
    13a2:	e7f2      	b.n	138a <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x256>
    13a4:	4bb71b00 	.word	0x4bb71b00
    13a8:	60ad78ec 	.word	0x60ad78ec
    13ac:	20007360 	.word	0x20007360
    13b0:	20008400 	.word	0x20008400
    13b4:	e000e400 	.word	0xe000e400
    13b8:	38003840 	.word	0x38003840
    13bc:	20008e98 	.word	0x20008e98
    13c0:	200089c4 	.word	0x200089c4
    13c4:	003c0010 	.word	0x003c0010
    13c8:	20008ea7 	.word	0x20008ea7
    13cc:	0001f038 	.word	0x0001f038

000013d0 <nvic_execution_priority()>:
	__asm__ volatile("mrs %0, faultmask\n" : "=r" (faultmask)::);
    13d0:	f3ef 8013 	mrs	r0, FAULTMASK
	if (faultmask) return -1;
    13d4:	b9b8      	cbnz	r0, 1406 <nvic_execution_priority()+0x36>
	__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    13d6:	f3ef 8310 	mrs	r3, PRIMASK
	if (primask) return 0;
    13da:	b94b      	cbnz	r3, 13f0 <nvic_execution_priority()+0x20>
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    13dc:	f3ef 8205 	mrs	r2, IPSR
	if (ipsr) {
    13e0:	b93a      	cbnz	r2, 13f2 <nvic_execution_priority()+0x22>
	uint32_t priority=256;
    13e2:	f44f 7380 	mov.w	r3, #256	; 0x100
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    13e6:	f3ef 8011 	mrs	r0, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    13ea:	b150      	cbz	r0, 1402 <nvic_execution_priority()+0x32>
    13ec:	4298      	cmp	r0, r3
    13ee:	d208      	bcs.n	1402 <nvic_execution_priority()+0x32>
}
    13f0:	4770      	bx	lr
		if (ipsr < 16) priority = 0; // could be non-zero
    13f2:	2a0f      	cmp	r2, #15
    13f4:	d9f7      	bls.n	13e6 <nvic_execution_priority()+0x16>
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
    13f6:	4b05      	ldr	r3, [pc, #20]	; (140c <nvic_execution_priority()+0x3c>)
    13f8:	5c9b      	ldrb	r3, [r3, r2]
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    13fa:	f3ef 8011 	mrs	r0, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    13fe:	2800      	cmp	r0, #0
    1400:	d1f4      	bne.n	13ec <nvic_execution_priority()+0x1c>
    1402:	4618      	mov	r0, r3
	return priority;
    1404:	4770      	bx	lr
	if (faultmask) return -1;
    1406:	f04f 30ff 	mov.w	r0, #4294967295
    140a:	e7f1      	b.n	13f0 <nvic_execution_priority()+0x20>
    140c:	e000e3f0 	.word	0xe000e3f0

00001410 <HardwareSerialIMXRT::write9bit(unsigned long)>:
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
    1410:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
    1412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1416:	4604      	mov	r4, r0
    1418:	460f      	mov	r7, r1
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    141a:	6906      	ldr	r6, [r0, #16]
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
    141c:	b113      	cbz	r3, 1424 <HardwareSerialIMXRT::write9bit(unsigned long)+0x14>
    141e:	6d42      	ldr	r2, [r0, #84]	; 0x54
    1420:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	if(half_duplex_mode_) {		
    1424:	7ea3      	ldrb	r3, [r4, #26]
    1426:	b12b      	cbz	r3, 1434 <HardwareSerialIMXRT::write9bit(unsigned long)+0x24>
		__disable_irq();
    1428:	b672      	cpsid	i
	    port->CTRL |= LPUART_CTRL_TXDIR;
    142a:	69b3      	ldr	r3, [r6, #24]
    142c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    1430:	61b3      	str	r3, [r6, #24]
		__enable_irq();
    1432:	b662      	cpsie	i
	head = tx_buffer_head_;
    1434:	f8b4 5046 	ldrh.w	r5, [r4, #70]	; 0x46
	if (++head >= tx_buffer_total_size_) head = 0;
    1438:	6b63      	ldr	r3, [r4, #52]	; 0x34
	head = tx_buffer_head_;
    143a:	b2ad      	uxth	r5, r5
	if (++head >= tx_buffer_total_size_) head = 0;
    143c:	3501      	adds	r5, #1
    143e:	42ab      	cmp	r3, r5
    1440:	d84c      	bhi.n	14dc <HardwareSerialIMXRT::write9bit(unsigned long)+0xcc>
    1442:	f04f 0800 	mov.w	r8, #0
    1446:	4645      	mov	r5, r8
	while (tx_buffer_tail_ == head) {
    1448:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    144c:	b29b      	uxth	r3, r3
    144e:	429d      	cmp	r5, r3
    1450:	d019      	beq.n	1486 <HardwareSerialIMXRT::write9bit(unsigned long)+0x76>
    1452:	e028      	b.n	14a6 <HardwareSerialIMXRT::write9bit(unsigned long)+0x96>
			if ((port->STAT & LPUART_STAT_TDRE)) {
    1454:	6973      	ldr	r3, [r6, #20]
    1456:	021b      	lsls	r3, r3, #8
    1458:	d510      	bpl.n	147c <HardwareSerialIMXRT::write9bit(unsigned long)+0x6c>
				uint32_t tail = tx_buffer_tail_;
    145a:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
				if (++tail >= tx_buffer_total_size_) tail = 0;
    145e:	6b62      	ldr	r2, [r4, #52]	; 0x34
				uint32_t tail = tx_buffer_tail_;
    1460:	b29b      	uxth	r3, r3
				if (++tail >= tx_buffer_total_size_) tail = 0;
    1462:	3301      	adds	r3, #1
    1464:	429a      	cmp	r2, r3
    1466:	d936      	bls.n	14d6 <HardwareSerialIMXRT::write9bit(unsigned long)+0xc6>
				tx_buffer_tail_ = tail;
    1468:	b29a      	uxth	r2, r3
				if (tail < tx_buffer_size_) {
    146a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    146c:	4299      	cmp	r1, r3
    146e:	d92d      	bls.n	14cc <HardwareSerialIMXRT::write9bit(unsigned long)+0xbc>
					n = tx_buffer_[tail];
    1470:	69e1      	ldr	r1, [r4, #28]
    1472:	5ccb      	ldrb	r3, [r1, r3]
    1474:	b2db      	uxtb	r3, r3
				port->DATA  = n;
    1476:	61f3      	str	r3, [r6, #28]
				tx_buffer_tail_ = tail;
    1478:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
	while (tx_buffer_tail_ == head) {
    147c:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    1480:	b29b      	uxth	r3, r3
    1482:	42ab      	cmp	r3, r5
    1484:	d10f      	bne.n	14a6 <HardwareSerialIMXRT::write9bit(unsigned long)+0x96>
		int priority = nvic_execution_priority();
    1486:	f7ff ffa3 	bl	13d0 <nvic_execution_priority()>
		if (priority <= hardware->irq_priority) {
    148a:	6963      	ldr	r3, [r4, #20]
    148c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
    1490:	4283      	cmp	r3, r0
    1492:	dadf      	bge.n	1454 <HardwareSerialIMXRT::write9bit(unsigned long)+0x44>
		} else if (priority >= 256) 
    1494:	28ff      	cmp	r0, #255	; 0xff
    1496:	ddf1      	ble.n	147c <HardwareSerialIMXRT::write9bit(unsigned long)+0x6c>
			yield(); // wait
    1498:	f002 f8c0 	bl	361c <yield>
	while (tx_buffer_tail_ == head) {
    149c:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    14a0:	b29b      	uxth	r3, r3
    14a2:	42ab      	cmp	r3, r5
    14a4:	d0ef      	beq.n	1486 <HardwareSerialIMXRT::write9bit(unsigned long)+0x76>
	if (head < tx_buffer_size_) {
    14a6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    14a8:	42ab      	cmp	r3, r5
    14aa:	d91a      	bls.n	14e2 <HardwareSerialIMXRT::write9bit(unsigned long)+0xd2>
		tx_buffer_[head] = c;
    14ac:	b2ff      	uxtb	r7, r7
    14ae:	69e3      	ldr	r3, [r4, #28]
    14b0:	555f      	strb	r7, [r3, r5]
	__disable_irq();
    14b2:	b672      	cpsid	i
	transmitting_ = 1;
    14b4:	2001      	movs	r0, #1
    14b6:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
	tx_buffer_head_ = head;
    14ba:	f8a4 8046 	strh.w	r8, [r4, #70]	; 0x46
	port->CTRL |= LPUART_CTRL_TIE; // (may need to handle this issue)BITBAND_SET_BIT(LPUART0_CTRL, TIE_BIT);
    14be:	69b3      	ldr	r3, [r6, #24]
    14c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    14c4:	61b3      	str	r3, [r6, #24]
	__enable_irq();
    14c6:	b662      	cpsie	i
}
    14c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					n = tx_buffer_storage_[tail-tx_buffer_size_];
    14cc:	1a5b      	subs	r3, r3, r1
    14ce:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    14d0:	5ccb      	ldrb	r3, [r1, r3]
    14d2:	b2db      	uxtb	r3, r3
    14d4:	e7cf      	b.n	1476 <HardwareSerialIMXRT::write9bit(unsigned long)+0x66>
    14d6:	2200      	movs	r2, #0
				if (++tail >= tx_buffer_total_size_) tail = 0;
    14d8:	4613      	mov	r3, r2
    14da:	e7c6      	b.n	146a <HardwareSerialIMXRT::write9bit(unsigned long)+0x5a>
	tx_buffer_head_ = head;
    14dc:	fa1f f885 	uxth.w	r8, r5
    14e0:	e7b2      	b.n	1448 <HardwareSerialIMXRT::write9bit(unsigned long)+0x38>
		tx_buffer_storage_[head - tx_buffer_size_] = c;
    14e2:	1aed      	subs	r5, r5, r3
    14e4:	b2ff      	uxtb	r7, r7
    14e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    14e8:	555f      	strb	r7, [r3, r5]
    14ea:	e7e2      	b.n	14b2 <HardwareSerialIMXRT::write9bit(unsigned long)+0xa2>

000014ec <HardwareSerialIMXRT::write(unsigned char)>:
	return write9bit(c);
    14ec:	f7ff bf90 	b.w	1410 <HardwareSerialIMXRT::write9bit(unsigned long)>

000014f0 <HardwareSerialIMXRT::IRQHandler()>:
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    14f0:	6902      	ldr	r2, [r0, #16]
	if (port->STAT & (LPUART_STAT_RDRF | LPUART_STAT_IDLE)) {
    14f2:	6953      	ldr	r3, [r2, #20]
    14f4:	f413 1f40 	tst.w	r3, #3145728	; 0x300000
{
    14f8:	b570      	push	{r4, r5, r6, lr}
	if (port->STAT & (LPUART_STAT_RDRF | LPUART_STAT_IDLE)) {
    14fa:	d043      	beq.n	1584 <HardwareSerialIMXRT::IRQHandler()+0x94>
		uint8_t avail = (port->WATER >> 24) & 0x7;
    14fc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
		if (avail) {
    14fe:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
		uint8_t avail = (port->WATER >> 24) & 0x7;
    1502:	f3c3 6e02 	ubfx	lr, r3, #24, #3
		if (avail) {
    1506:	d03a      	beq.n	157e <HardwareSerialIMXRT::IRQHandler()+0x8e>
			head = rx_buffer_head_;
    1508:	f8b0 504a 	ldrh.w	r5, [r0, #74]	; 0x4a
			tail = rx_buffer_tail_;
    150c:	f8b0 604c 	ldrh.w	r6, [r0, #76]	; 0x4c
			head = rx_buffer_head_;
    1510:	b2ad      	uxth	r5, r5
			tail = rx_buffer_tail_;
    1512:	b2b6      	uxth	r6, r6
    1514:	e007      	b.n	1526 <HardwareSerialIMXRT::IRQHandler()+0x36>
						rx_buffer_[head] = n;
    1516:	6a01      	ldr	r1, [r0, #32]
    1518:	f801 c003 	strb.w	ip, [r1, r3]
			} while (--avail > 0) ;
    151c:	f10e 33ff 	add.w	r3, lr, #4294967295
    1520:	f013 0eff 	ands.w	lr, r3, #255	; 0xff
    1524:	d01d      	beq.n	1562 <HardwareSerialIMXRT::IRQHandler()+0x72>
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    1526:	69d1      	ldr	r1, [r2, #28]
				newhead = head + 1;
    1528:	1c6b      	adds	r3, r5, #1
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    152a:	6b84      	ldr	r4, [r0, #56]	; 0x38
				if (newhead != rx_buffer_tail_) {
    152c:	f8b0 c04c 	ldrh.w	ip, [r0, #76]	; 0x4c
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    1530:	f3c1 0109 	ubfx	r1, r1, #0, #10
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    1534:	429c      	cmp	r4, r3
    1536:	bf98      	it	ls
    1538:	2300      	movls	r3, #0
				if (newhead != rx_buffer_tail_) {
    153a:	fa1f fc8c 	uxth.w	ip, ip
    153e:	459c      	cmp	ip, r3
    1540:	d0ec      	beq.n	151c <HardwareSerialIMXRT::IRQHandler()+0x2c>
					if (newhead < rx_buffer_size_) {
    1542:	6b04      	ldr	r4, [r0, #48]	; 0x30
						rx_buffer_[head] = n;
    1544:	fa5f fc81 	uxtb.w	ip, r1
    1548:	461d      	mov	r5, r3
					if (newhead < rx_buffer_size_) {
    154a:	429c      	cmp	r4, r3
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    154c:	eba3 0404 	sub.w	r4, r3, r4
					if (newhead < rx_buffer_size_) {
    1550:	d8e1      	bhi.n	1516 <HardwareSerialIMXRT::IRQHandler()+0x26>
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    1552:	6a43      	ldr	r3, [r0, #36]	; 0x24
    1554:	f803 c004 	strb.w	ip, [r3, r4]
			} while (--avail > 0) ;
    1558:	f10e 33ff 	add.w	r3, lr, #4294967295
    155c:	f013 0eff 	ands.w	lr, r3, #255	; 0xff
    1560:	d1e1      	bne.n	1526 <HardwareSerialIMXRT::IRQHandler()+0x36>
			rx_buffer_head_ = head;
    1562:	b2ab      	uxth	r3, r5
    1564:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
			if (rts_pin_baseReg_) {
    1568:	6d83      	ldr	r3, [r0, #88]	; 0x58
    156a:	b143      	cbz	r3, 157e <HardwareSerialIMXRT::IRQHandler()+0x8e>
				if (head >= tail) avail = head - tail;
    156c:	42b5      	cmp	r5, r6
    156e:	d354      	bcc.n	161a <HardwareSerialIMXRT::IRQHandler()+0x12a>
    1570:	1bad      	subs	r5, r5, r6
				if (avail >= rts_high_watermark_) rts_deassert();
    1572:	6c01      	ldr	r1, [r0, #64]	; 0x40
    1574:	42a9      	cmp	r1, r5
    1576:	d802      	bhi.n	157e <HardwareSerialIMXRT::IRQHandler()+0x8e>
	DIRECT_WRITE_HIGH(rts_pin_baseReg_, rts_pin_bitmask_);
    1578:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
    157a:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		if (port->STAT & LPUART_STAT_IDLE) {
    157e:	6953      	ldr	r3, [r2, #20]
    1580:	02d9      	lsls	r1, r3, #11
    1582:	d445      	bmi.n	1610 <HardwareSerialIMXRT::IRQHandler()+0x120>
	ctrl = port->CTRL;
    1584:	6996      	ldr	r6, [r2, #24]
	if ((ctrl & LPUART_CTRL_TIE) && (port->STAT & LPUART_STAT_TDRE))
    1586:	0233      	lsls	r3, r6, #8
    1588:	d528      	bpl.n	15dc <HardwareSerialIMXRT::IRQHandler()+0xec>
    158a:	6953      	ldr	r3, [r2, #20]
    158c:	021d      	lsls	r5, r3, #8
    158e:	d525      	bpl.n	15dc <HardwareSerialIMXRT::IRQHandler()+0xec>
		head = tx_buffer_head_;
    1590:	f8b0 5046 	ldrh.w	r5, [r0, #70]	; 0x46
		tail = tx_buffer_tail_;
    1594:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
		head = tx_buffer_head_;
    1598:	b2ad      	uxth	r5, r5
		tail = tx_buffer_tail_;
    159a:	b29b      	uxth	r3, r3
    159c:	e006      	b.n	15ac <HardwareSerialIMXRT::IRQHandler()+0xbc>
				n = tx_buffer_[tail];
    159e:	69c1      	ldr	r1, [r0, #28]
    15a0:	5cc9      	ldrb	r1, [r1, r3]
    15a2:	b2c9      	uxtb	r1, r1
			port->DATA = n;
    15a4:	61d1      	str	r1, [r2, #28]
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
    15a6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    15a8:	054c      	lsls	r4, r1, #21
    15aa:	d412      	bmi.n	15d2 <HardwareSerialIMXRT::IRQHandler()+0xe2>
			if (head == tail) break;
    15ac:	42ab      	cmp	r3, r5
    15ae:	d038      	beq.n	1622 <HardwareSerialIMXRT::IRQHandler()+0x132>
			if (++tail >= tx_buffer_total_size_) tail = 0;
    15b0:	6b44      	ldr	r4, [r0, #52]	; 0x34
    15b2:	3301      	adds	r3, #1
			if (tail < tx_buffer_size_) {
    15b4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			if (++tail >= tx_buffer_total_size_) tail = 0;
    15b6:	429c      	cmp	r4, r3
    15b8:	bf98      	it	ls
    15ba:	2300      	movls	r3, #0
			if (tail < tx_buffer_size_) {
    15bc:	4299      	cmp	r1, r3
				n = tx_buffer_storage_[tail-tx_buffer_size_];
    15be:	eba3 0401 	sub.w	r4, r3, r1
			if (tail < tx_buffer_size_) {
    15c2:	d8ec      	bhi.n	159e <HardwareSerialIMXRT::IRQHandler()+0xae>
				n = tx_buffer_storage_[tail-tx_buffer_size_];
    15c4:	6a81      	ldr	r1, [r0, #40]	; 0x28
    15c6:	5d09      	ldrb	r1, [r1, r4]
    15c8:	b2c9      	uxtb	r1, r1
			port->DATA = n;
    15ca:	61d1      	str	r1, [r2, #28]
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
    15cc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    15ce:	054c      	lsls	r4, r1, #21
    15d0:	d5ec      	bpl.n	15ac <HardwareSerialIMXRT::IRQHandler()+0xbc>
		tx_buffer_tail_ = tail;
    15d2:	b299      	uxth	r1, r3
		if (head == tail) {
    15d4:	42ab      	cmp	r3, r5
		tx_buffer_tail_ = tail;
    15d6:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
		if (head == tail) {
    15da:	d025      	beq.n	1628 <HardwareSerialIMXRT::IRQHandler()+0x138>
	if ((ctrl & LPUART_CTRL_TCIE) && (port->STAT & LPUART_STAT_TC))
    15dc:	0271      	lsls	r1, r6, #9
    15de:	d516      	bpl.n	160e <HardwareSerialIMXRT::IRQHandler()+0x11e>
    15e0:	6953      	ldr	r3, [r2, #20]
    15e2:	025b      	lsls	r3, r3, #9
    15e4:	d513      	bpl.n	160e <HardwareSerialIMXRT::IRQHandler()+0x11e>
		transmitting_ = 0;
    15e6:	2100      	movs	r1, #0
		if (transmit_pin_baseReg_) DIRECT_WRITE_LOW(transmit_pin_baseReg_, transmit_pin_bitmask_);
    15e8:	6d03      	ldr	r3, [r0, #80]	; 0x50
		transmitting_ = 0;
    15ea:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
		if (transmit_pin_baseReg_) DIRECT_WRITE_LOW(transmit_pin_baseReg_, transmit_pin_bitmask_);
    15ee:	b113      	cbz	r3, 15f6 <HardwareSerialIMXRT::IRQHandler()+0x106>
    15f0:	6d41      	ldr	r1, [r0, #84]	; 0x54
    15f2:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
		if(half_duplex_mode_) {		
    15f6:	7e83      	ldrb	r3, [r0, #26]
    15f8:	b12b      	cbz	r3, 1606 <HardwareSerialIMXRT::IRQHandler()+0x116>
			__disable_irq();
    15fa:	b672      	cpsid	i
		    port->CTRL &= ~LPUART_CTRL_TXDIR;
    15fc:	6993      	ldr	r3, [r2, #24]
    15fe:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
    1602:	6193      	str	r3, [r2, #24]
			__enable_irq();
    1604:	b662      	cpsie	i
		port->CTRL &= ~LPUART_CTRL_TCIE;
    1606:	6993      	ldr	r3, [r2, #24]
    1608:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
    160c:	6193      	str	r3, [r2, #24]
}
    160e:	bd70      	pop	{r4, r5, r6, pc}
			port->STAT |= LPUART_STAT_IDLE;	// writing a 1 to idle should clear it. 
    1610:	6953      	ldr	r3, [r2, #20]
    1612:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    1616:	6153      	str	r3, [r2, #20]
    1618:	e7b4      	b.n	1584 <HardwareSerialIMXRT::IRQHandler()+0x94>
				else avail = rx_buffer_total_size_ + head - tail;
    161a:	6b81      	ldr	r1, [r0, #56]	; 0x38
    161c:	1b89      	subs	r1, r1, r6
    161e:	440d      	add	r5, r1
    1620:	e7a7      	b.n	1572 <HardwareSerialIMXRT::IRQHandler()+0x82>
		tx_buffer_tail_ = tail;
    1622:	b29b      	uxth	r3, r3
    1624:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
			port->CTRL &= ~LPUART_CTRL_TIE; 
    1628:	6993      	ldr	r3, [r2, #24]
    162a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    162e:	6193      	str	r3, [r2, #24]
  			port->CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
    1630:	6993      	ldr	r3, [r2, #24]
    1632:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    1636:	6193      	str	r3, [r2, #24]
    1638:	e7d0      	b.n	15dc <HardwareSerialIMXRT::IRQHandler()+0xec>
    163a:	bf00      	nop

0000163c <IRQHandler_Serial2>:
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest


void IRQHandler_Serial2()
{
	Serial2.IRQHandler();
    163c:	4801      	ldr	r0, [pc, #4]	; (1644 <IRQHandler_Serial2+0x8>)
    163e:	f7ff bf57 	b.w	14f0 <HardwareSerialIMXRT::IRQHandler()>
    1642:	bf00      	nop
    1644:	20007b70 	.word	0x20007b70

00001648 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    1648:	4608      	mov	r0, r1
    164a:	f001 bf53 	b.w	34f4 <usb_serial_putchar>
    164e:	bf00      	nop

00001650 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>:
		base = 10;
    1650:	2a01      	cmp	r2, #1
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    1652:	b570      	push	{r4, r5, r6, lr}
		base = 10;
    1654:	bf08      	it	eq
    1656:	220a      	moveq	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    1658:	b08a      	sub	sp, #40	; 0x28
	if (n == 0) {
    165a:	b391      	cbz	r1, 16c2 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x72>
		i = sizeof(buf) - 1;
    165c:	f04f 0e21 	mov.w	lr, #33	; 0x21
    1660:	e001      	b.n	1666 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x16>
			i--;
    1662:	fa5f fe86 	uxtb.w	lr, r6
    1666:	f10e 36ff 	add.w	r6, lr, #4294967295
			digit = n % base;
    166a:	fbb1 f5f2 	udiv	r5, r1, r2
    166e:	fb02 1415 	mls	r4, r2, r5, r1
    1672:	fa5f fc84 	uxtb.w	ip, r4
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1676:	2c09      	cmp	r4, #9
    1678:	f10c 0437 	add.w	r4, ip, #55	; 0x37
    167c:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
    1680:	bf98      	it	ls
    1682:	fa5f f48c 	uxtbls.w	r4, ip
    1686:	f10e 0c28 	add.w	ip, lr, #40	; 0x28
    168a:	bf88      	it	hi
    168c:	b2e4      	uxtbhi	r4, r4
			if (n == 0) break;
    168e:	4291      	cmp	r1, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1690:	44ec      	add	ip, sp
			n /= base;
    1692:	4629      	mov	r1, r5
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1694:	f80c 4c24 	strb.w	r4, [ip, #-36]
			if (n == 0) break;
    1698:	d2e3      	bcs.n	1662 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x12>
	if (sign) {
    169a:	b14b      	cbz	r3, 16b0 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x60>
		i--;
    169c:	f10e 3eff 	add.w	lr, lr, #4294967295
		buf[i] = '-';
    16a0:	222d      	movs	r2, #45	; 0x2d
		i--;
    16a2:	fa5f fe8e 	uxtb.w	lr, lr
		buf[i] = '-';
    16a6:	f10e 0328 	add.w	r3, lr, #40	; 0x28
    16aa:	446b      	add	r3, sp
    16ac:	f803 2c24 	strb.w	r2, [r3, #-36]
	return write(buf + i, sizeof(buf) - i);
    16b0:	6803      	ldr	r3, [r0, #0]
    16b2:	a901      	add	r1, sp, #4
    16b4:	f1ce 0222 	rsb	r2, lr, #34	; 0x22
    16b8:	685b      	ldr	r3, [r3, #4]
    16ba:	4471      	add	r1, lr
    16bc:	4798      	blx	r3
}
    16be:	b00a      	add	sp, #40	; 0x28
    16c0:	bd70      	pop	{r4, r5, r6, pc}
		buf[sizeof(buf) - 1] = '0';
    16c2:	2230      	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    16c4:	f04f 0e21 	mov.w	lr, #33	; 0x21
		buf[sizeof(buf) - 1] = '0';
    16c8:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    16cc:	e7e5      	b.n	169a <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x4a>
    16ce:	bf00      	nop

000016d0 <Print::write(unsigned char const*, unsigned int)>:
{
    16d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buffer == nullptr) return 0;
    16d4:	460c      	mov	r4, r1
    16d6:	b1d1      	cbz	r1, 170e <Print::write(unsigned char const*, unsigned int)+0x3e>
	while (size--) count += write(*buffer++);
    16d8:	b1ea      	cbz	r2, 1716 <Print::write(unsigned char const*, unsigned int)+0x46>
    16da:	4680      	mov	r8, r0
    16dc:	188e      	adds	r6, r1, r2
	size_t count = 0;
    16de:	2500      	movs	r5, #0
    16e0:	4f0e      	ldr	r7, [pc, #56]	; (171c <Print::write(unsigned char const*, unsigned int)+0x4c>)
    16e2:	e004      	b.n	16ee <Print::write(unsigned char const*, unsigned int)+0x1e>
    16e4:	f001 ff06 	bl	34f4 <usb_serial_putchar>
	while (size--) count += write(*buffer++);
    16e8:	42b4      	cmp	r4, r6
    16ea:	4405      	add	r5, r0
    16ec:	d00c      	beq.n	1708 <Print::write(unsigned char const*, unsigned int)+0x38>
    16ee:	f8d8 3000 	ldr.w	r3, [r8]
    16f2:	f814 0b01 	ldrb.w	r0, [r4], #1
    16f6:	681b      	ldr	r3, [r3, #0]
    16f8:	42bb      	cmp	r3, r7
    16fa:	d0f3      	beq.n	16e4 <Print::write(unsigned char const*, unsigned int)+0x14>
    16fc:	4601      	mov	r1, r0
    16fe:	4640      	mov	r0, r8
    1700:	4798      	blx	r3
    1702:	42b4      	cmp	r4, r6
    1704:	4405      	add	r5, r0
    1706:	d1f2      	bne.n	16ee <Print::write(unsigned char const*, unsigned int)+0x1e>
}
    1708:	4628      	mov	r0, r5
    170a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (buffer == nullptr) return 0;
    170e:	460d      	mov	r5, r1
}
    1710:	4628      	mov	r0, r5
    1712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (buffer == nullptr) return 0;
    1716:	4615      	mov	r5, r2
    1718:	e7f6      	b.n	1708 <Print::write(unsigned char const*, unsigned int)+0x38>
    171a:	bf00      	nop
    171c:	00001649 	.word	0x00001649

00001720 <Print::print(long)>:
	if (n < 0) {
    1720:	2900      	cmp	r1, #0
    1722:	db03      	blt.n	172c <Print::print(long)+0xc>
	uint8_t sign=0;
    1724:	2300      	movs	r3, #0
	if (base == 0) {
    1726:	220a      	movs	r2, #10
    1728:	f7ff bf92 	b.w	1650 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
		n = -n;
    172c:	4249      	negs	r1, r1
		sign = '-';
    172e:	232d      	movs	r3, #45	; 0x2d
	if (base == 0) {
    1730:	220a      	movs	r2, #10
    1732:	f7ff bf8d 	b.w	1650 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    1736:	bf00      	nop

00001738 <Print::println()>:
{
    1738:	b500      	push	{lr}
	return write(buf, 2);
    173a:	6803      	ldr	r3, [r0, #0]
{
    173c:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    173e:	f640 2c0d 	movw	ip, #2573	; 0xa0d
	return write(buf, 2);
    1742:	2202      	movs	r2, #2
    1744:	a901      	add	r1, sp, #4
    1746:	685b      	ldr	r3, [r3, #4]
	uint8_t buf[2]={'\r', '\n'};
    1748:	f8ad c004 	strh.w	ip, [sp, #4]
	return write(buf, 2);
    174c:	4798      	blx	r3
}
    174e:	b003      	add	sp, #12
    1750:	f85d fb04 	ldr.w	pc, [sp], #4

00001754 <_write>:
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    1754:	4b05      	ldr	r3, [pc, #20]	; (176c <_write+0x18>)
    1756:	2802      	cmp	r0, #2
    1758:	bf88      	it	hi
    175a:	4603      	movhi	r3, r0
{
    175c:	b410      	push	{r4}
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    175e:	681c      	ldr	r4, [r3, #0]
    1760:	4618      	mov	r0, r3
    1762:	6863      	ldr	r3, [r4, #4]
}
    1764:	f85d 4b04 	ldr.w	r4, [sp], #4
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    1768:	4718      	bx	r3
    176a:	bf00      	nop
    176c:	20007b60 	.word	0x20007b60

00001770 <Print::printf(char const*, ...)>:
{
    1770:	b40e      	push	{r1, r2, r3}
    1772:	b500      	push	{lr}
    1774:	b082      	sub	sp, #8
    1776:	aa03      	add	r2, sp, #12
    1778:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, format);
    177c:	9201      	str	r2, [sp, #4]
	int retval = vdprintf((int)this, format, ap);
    177e:	f004 f99f 	bl	5ac0 <vdprintf>
}
    1782:	b002      	add	sp, #8
    1784:	f85d eb04 	ldr.w	lr, [sp], #4
    1788:	b003      	add	sp, #12
    178a:	4770      	bx	lr

0000178c <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	if (base == 0) {
    178c:	b95a      	cbnz	r2, 17a6 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x1a>
		return write((uint8_t)n);
    178e:	6803      	ldr	r3, [r0, #0]
    1790:	b2c9      	uxtb	r1, r1
    1792:	4a07      	ldr	r2, [pc, #28]	; (17b0 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x24>)
    1794:	681b      	ldr	r3, [r3, #0]
    1796:	4293      	cmp	r3, r2
{
    1798:	b500      	push	{lr}
    179a:	d106      	bne.n	17aa <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x1e>
    179c:	4608      	mov	r0, r1
}
    179e:	f85d eb04 	ldr.w	lr, [sp], #4
    17a2:	f001 bea7 	b.w	34f4 <usb_serial_putchar>
    17a6:	f7ff bf53 	b.w	1650 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    17aa:	f85d eb04 	ldr.w	lr, [sp], #4
		return write((uint8_t)n);
    17ae:	4718      	bx	r3
    17b0:	00001649 	.word	0x00001649

000017b4 <String::String(char const*)>:
String::String(const char *cstr)
    17b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	buffer = NULL;
    17b6:	2600      	movs	r6, #0
String::String(const char *cstr)
    17b8:	4604      	mov	r4, r0
	capacity = 0;
    17ba:	e9c0 6600 	strd	r6, r6, [r0]
	len = 0;
    17be:	6086      	str	r6, [r0, #8]
	if (cstr) copy(cstr, strlen(cstr));
    17c0:	b129      	cbz	r1, 17ce <String::String(char const*)+0x1a>
    17c2:	4608      	mov	r0, r1
    17c4:	460d      	mov	r5, r1
    17c6:	f004 fe1b 	bl	6400 <strlen>
	if (length == 0) {
    17ca:	4607      	mov	r7, r0
    17cc:	b908      	cbnz	r0, 17d2 <String::String(char const*)+0x1e>
}
    17ce:	4620      	mov	r0, r4
    17d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    17d2:	3001      	adds	r0, #1
    17d4:	f002 fb38 	bl	3e48 <malloc>
	if (newbuffer) {
    17d8:	2800      	cmp	r0, #0
    17da:	d0f8      	beq.n	17ce <String::String(char const*)+0x1a>
	strcpy(buffer, cstr);
    17dc:	4629      	mov	r1, r5
		if (len == 0) buffer[0] = 0;
    17de:	7006      	strb	r6, [r0, #0]
		buffer = newbuffer;
    17e0:	6020      	str	r0, [r4, #0]
	len = length;
    17e2:	e9c4 7701 	strd	r7, r7, [r4, #4]
	strcpy(buffer, cstr);
    17e6:	f004 fda9 	bl	633c <strcpy>
}
    17ea:	4620      	mov	r0, r4
    17ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    17ee:	bf00      	nop

000017f0 <String::~String()>:
String::~String()
    17f0:	b510      	push	{r4, lr}
    17f2:	4604      	mov	r4, r0
	free(buffer);
    17f4:	6800      	ldr	r0, [r0, #0]
    17f6:	f002 fb2f 	bl	3e58 <free>
}
    17fa:	4620      	mov	r0, r4
    17fc:	bd10      	pop	{r4, pc}
    17fe:	bf00      	nop

00001800 <String::copy(char const*, unsigned int)>:
{
    1800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1802:	4604      	mov	r4, r0
	if (length == 0) {
    1804:	4615      	mov	r5, r2
    1806:	b932      	cbnz	r2, 1816 <String::copy(char const*, unsigned int)+0x16>
		if (buffer) buffer[0] = 0;
    1808:	6803      	ldr	r3, [r0, #0]
    180a:	b103      	cbz	r3, 180e <String::copy(char const*, unsigned int)+0xe>
    180c:	701a      	strb	r2, [r3, #0]
		len = 0;
    180e:	2300      	movs	r3, #0
}
    1810:	4620      	mov	r0, r4
		len = 0;
    1812:	60a3      	str	r3, [r4, #8]
}
    1814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (capacity >= size) return 1;
    1816:	6843      	ldr	r3, [r0, #4]
    1818:	460e      	mov	r6, r1
    181a:	429a      	cmp	r2, r3
    181c:	d91c      	bls.n	1858 <String::copy(char const*, unsigned int)+0x58>
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    181e:	1c51      	adds	r1, r2, #1
    1820:	6800      	ldr	r0, [r0, #0]
    1822:	f002 fddd 	bl	43e0 <realloc>
	if (newbuffer) {
    1826:	4607      	mov	r7, r0
    1828:	b160      	cbz	r0, 1844 <String::copy(char const*, unsigned int)+0x44>
		if (len == 0) buffer[0] = 0;
    182a:	68a3      	ldr	r3, [r4, #8]
		capacity = maxStrLen;
    182c:	e9c4 0500 	strd	r0, r5, [r4]
		if (len == 0) buffer[0] = 0;
    1830:	b90b      	cbnz	r3, 1836 <String::copy(char const*, unsigned int)+0x36>
    1832:	7003      	strb	r3, [r0, #0]
	strcpy(buffer, cstr);
    1834:	6827      	ldr	r7, [r4, #0]
    1836:	4631      	mov	r1, r6
    1838:	4638      	mov	r0, r7
	len = length;
    183a:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    183c:	f004 fd7e 	bl	633c <strcpy>
}
    1840:	4620      	mov	r0, r4
    1842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (buffer) {
    1844:	6820      	ldr	r0, [r4, #0]
    1846:	b110      	cbz	r0, 184e <String::copy(char const*, unsigned int)+0x4e>
			free(buffer);
    1848:	f002 fb06 	bl	3e58 <free>
			buffer = NULL;
    184c:	6027      	str	r7, [r4, #0]
		len = capacity = 0;
    184e:	2300      	movs	r3, #0
}
    1850:	4620      	mov	r0, r4
		len = capacity = 0;
    1852:	e9c4 3301 	strd	r3, r3, [r4, #4]
}
    1856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (buffer) buffer[0] = 0;
    1858:	6807      	ldr	r7, [r0, #0]
	strcpy(buffer, cstr);
    185a:	4631      	mov	r1, r6
	len = length;
    185c:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    185e:	4638      	mov	r0, r7
    1860:	f004 fd6c 	bl	633c <strcpy>
	return *this;
    1864:	e7ec      	b.n	1840 <String::copy(char const*, unsigned int)+0x40>
    1866:	bf00      	nop

00001868 <String::operator=(String const&)>:
	if (this == &rhs) return *this;
    1868:	4281      	cmp	r1, r0
    186a:	d003      	beq.n	1874 <String::operator=(String const&)+0xc>
	return copy(rhs.buffer, rhs.len);
    186c:	688a      	ldr	r2, [r1, #8]
    186e:	6809      	ldr	r1, [r1, #0]
    1870:	f7ff bfc6 	b.w	1800 <String::copy(char const*, unsigned int)>
}
    1874:	4770      	bx	lr
    1876:	bf00      	nop

00001878 <String::operator=(String&&)>:
	if (this != &rval) move(rval);
    1878:	4288      	cmp	r0, r1
{
    187a:	b538      	push	{r3, r4, r5, lr}
    187c:	4605      	mov	r5, r0
	if (this != &rval) move(rval);
    187e:	d00e      	beq.n	189e <String::operator=(String&&)+0x26>
	if (buffer) free(buffer);
    1880:	6800      	ldr	r0, [r0, #0]
    1882:	460c      	mov	r4, r1
    1884:	b108      	cbz	r0, 188a <String::operator=(String&&)+0x12>
    1886:	f002 fae7 	bl	3e58 <free>
	len = rhs.len;
    188a:	68a0      	ldr	r0, [r4, #8]
	rhs.buffer = NULL;
    188c:	2300      	movs	r3, #0
	capacity = rhs.capacity;
    188e:	e9d4 1200 	ldrd	r1, r2, [r4]
	len = rhs.len;
    1892:	60a8      	str	r0, [r5, #8]
	capacity = rhs.capacity;
    1894:	e9c5 1200 	strd	r1, r2, [r5]
	rhs.capacity = 0;
    1898:	e9c4 3300 	strd	r3, r3, [r4]
	rhs.len = 0;
    189c:	60a3      	str	r3, [r4, #8]
}
    189e:	4628      	mov	r0, r5
    18a0:	bd38      	pop	{r3, r4, r5, pc}
    18a2:	bf00      	nop

000018a4 <String::operator=(char const*)>:
{
    18a4:	b538      	push	{r3, r4, r5, lr}
    18a6:	4605      	mov	r5, r0
	if (cstr) {
    18a8:	460c      	mov	r4, r1
    18aa:	b149      	cbz	r1, 18c0 <String::operator=(char const*)+0x1c>
		copy(cstr, strlen(cstr));
    18ac:	4608      	mov	r0, r1
    18ae:	f004 fda7 	bl	6400 <strlen>
    18b2:	4621      	mov	r1, r4
    18b4:	4602      	mov	r2, r0
    18b6:	4628      	mov	r0, r5
    18b8:	f7ff ffa2 	bl	1800 <String::copy(char const*, unsigned int)>
}
    18bc:	4628      	mov	r0, r5
    18be:	bd38      	pop	{r3, r4, r5, pc}
    18c0:	4628      	mov	r0, r5
		len = 0;
    18c2:	60a9      	str	r1, [r5, #8]
}
    18c4:	bd38      	pop	{r3, r4, r5, pc}
    18c6:	bf00      	nop

000018c8 <String::append(char const*, unsigned int)>:
{
    18c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    18cc:	4604      	mov	r4, r0
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    18ce:	6800      	ldr	r0, [r0, #0]
{
    18d0:	460d      	mov	r5, r1
    18d2:	4616      	mov	r6, r2
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    18d4:	4288      	cmp	r0, r1
	unsigned int newlen = len + length;
    18d6:	68a3      	ldr	r3, [r4, #8]
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    18d8:	d809      	bhi.n	18ee <String::append(char const*, unsigned int)+0x26>
    18da:	18c2      	adds	r2, r0, r3
    18dc:	4291      	cmp	r1, r2
    18de:	d206      	bcs.n	18ee <String::append(char const*, unsigned int)+0x26>
		buffer_offset = (unsigned int)(cstr-buffer);
    18e0:	1a0f      	subs	r7, r1, r0
		self = true;
    18e2:	f04f 0901 	mov.w	r9, #1
	if (length == 0 || !reserve(newlen)) return *this;
    18e6:	b936      	cbnz	r6, 18f6 <String::append(char const*, unsigned int)+0x2e>
}
    18e8:	4620      	mov	r0, r4
    18ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	bool self = false;
    18ee:	f04f 0900 	mov.w	r9, #0
	if (length == 0 || !reserve(newlen)) return *this;
    18f2:	2e00      	cmp	r6, #0
    18f4:	d0f8      	beq.n	18e8 <String::append(char const*, unsigned int)+0x20>
	unsigned int newlen = len + length;
    18f6:	eb03 0806 	add.w	r8, r3, r6
	if (capacity >= size) return 1;
    18fa:	6862      	ldr	r2, [r4, #4]
    18fc:	4590      	cmp	r8, r2
    18fe:	d90c      	bls.n	191a <String::append(char const*, unsigned int)+0x52>
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    1900:	f108 0101 	add.w	r1, r8, #1
    1904:	f002 fd6c 	bl	43e0 <realloc>
	if (newbuffer) {
    1908:	2800      	cmp	r0, #0
    190a:	d0ed      	beq.n	18e8 <String::append(char const*, unsigned int)+0x20>
		buffer = newbuffer;
    190c:	68a3      	ldr	r3, [r4, #8]
		capacity = maxStrLen;
    190e:	e9c4 0800 	strd	r0, r8, [r4]
		if (len == 0) buffer[0] = 0;
    1912:	b913      	cbnz	r3, 191a <String::append(char const*, unsigned int)+0x52>
    1914:	7003      	strb	r3, [r0, #0]
		memcpy(buffer + len, buffer+buffer_offset, length);
    1916:	6820      	ldr	r0, [r4, #0]
    1918:	68a3      	ldr	r3, [r4, #8]
	if ( self ) {
    191a:	f1b9 0f00 	cmp.w	r9, #0
    191e:	d108      	bne.n	1932 <String::append(char const*, unsigned int)+0x6a>
		strcpy(buffer + len, cstr);
    1920:	4629      	mov	r1, r5
    1922:	4418      	add	r0, r3
    1924:	f004 fd0a 	bl	633c <strcpy>
}
    1928:	4620      	mov	r0, r4
	len = newlen;
    192a:	f8c4 8008 	str.w	r8, [r4, #8]
}
    192e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		memcpy(buffer + len, buffer+buffer_offset, length);
    1932:	4632      	mov	r2, r6
    1934:	19c1      	adds	r1, r0, r7
    1936:	4418      	add	r0, r3
    1938:	f000 fb6a 	bl	2010 <memcpy>
		buffer[newlen] = 0;
    193c:	6823      	ldr	r3, [r4, #0]
    193e:	2200      	movs	r2, #0
    1940:	f803 2008 	strb.w	r2, [r3, r8]
    1944:	e7f0      	b.n	1928 <String::append(char const*, unsigned int)+0x60>
    1946:	bf00      	nop

00001948 <String::append(char)>:
{
    1948:	b510      	push	{r4, lr}
    194a:	b082      	sub	sp, #8
	buf[1] = 0;
    194c:	2300      	movs	r3, #0
{
    194e:	4604      	mov	r4, r0
	append(buf, 1);
    1950:	2201      	movs	r2, #1
	buf[0] = c;
    1952:	f88d 1004 	strb.w	r1, [sp, #4]
	append(buf, 1);
    1956:	a901      	add	r1, sp, #4
	buf[1] = 0;
    1958:	f88d 3005 	strb.w	r3, [sp, #5]
	append(buf, 1);
    195c:	f7ff ffb4 	bl	18c8 <String::append(char const*, unsigned int)>
}
    1960:	4620      	mov	r0, r4
    1962:	b002      	add	sp, #8
    1964:	bd10      	pop	{r4, pc}
    1966:	bf00      	nop

00001968 <String::equals(char const*) const>:
	if (len == 0) return (cstr == NULL || *cstr == 0);
    1968:	6882      	ldr	r2, [r0, #8]
{
    196a:	b508      	push	{r3, lr}
    196c:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
    196e:	b13a      	cbz	r2, 1980 <String::equals(char const*) const+0x18>
	if (cstr == NULL) return buffer[0] == 0;
    1970:	b161      	cbz	r1, 198c <String::equals(char const*) const+0x24>
	return strcmp(buffer, cstr) == 0;
    1972:	6800      	ldr	r0, [r0, #0]
    1974:	f004 fb78 	bl	6068 <strcmp>
    1978:	fab0 f080 	clz	r0, r0
    197c:	0940      	lsrs	r0, r0, #5
}
    197e:	bd08      	pop	{r3, pc}
	if (len == 0) return (cstr == NULL || *cstr == 0);
    1980:	b131      	cbz	r1, 1990 <String::equals(char const*) const+0x28>
	if (cstr == NULL) return buffer[0] == 0;
    1982:	7818      	ldrb	r0, [r3, #0]
    1984:	fab0 f080 	clz	r0, r0
    1988:	0940      	lsrs	r0, r0, #5
}
    198a:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
    198c:	6803      	ldr	r3, [r0, #0]
    198e:	e7f8      	b.n	1982 <String::equals(char const*) const+0x1a>
    1990:	2001      	movs	r0, #1
}
    1992:	bd08      	pop	{r3, pc}

00001994 <String::indexOf(char) const>:
	if (fromIndex >= len) return -1;
    1994:	6883      	ldr	r3, [r0, #8]
    1996:	b13b      	cbz	r3, 19a8 <String::indexOf(char) const+0x14>
{
    1998:	b510      	push	{r4, lr}
	const char* temp = strchr(buffer + fromIndex, ch);
    199a:	6804      	ldr	r4, [r0, #0]
    199c:	4620      	mov	r0, r4
    199e:	f004 f9d5 	bl	5d4c <strchr>
	if (temp == NULL) return -1;
    19a2:	b120      	cbz	r0, 19ae <String::indexOf(char) const+0x1a>
	return temp - buffer;
    19a4:	1b00      	subs	r0, r0, r4
}
    19a6:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
    19a8:	f04f 30ff 	mov.w	r0, #4294967295
}
    19ac:	4770      	bx	lr
	if (fromIndex >= len) return -1;
    19ae:	f04f 30ff 	mov.w	r0, #4294967295
}
    19b2:	bd10      	pop	{r4, pc}

000019b4 <String::substring(unsigned int) const>:
{
    19b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return substring(left, len);
    19b8:	688f      	ldr	r7, [r1, #8]
{
    19ba:	460e      	mov	r6, r1
    19bc:	4605      	mov	r5, r0
	if (left > right) {
    19be:	4297      	cmp	r7, r2
    19c0:	d202      	bcs.n	19c8 <String::substring(unsigned int) const+0x14>
    19c2:	4613      	mov	r3, r2
    19c4:	463a      	mov	r2, r7
    19c6:	461f      	mov	r7, r3
	buffer = NULL;
    19c8:	2300      	movs	r3, #0
	len = 0;
    19ca:	60ab      	str	r3, [r5, #8]
	if (left > len) return out;
    19cc:	68b0      	ldr	r0, [r6, #8]
    19ce:	4290      	cmp	r0, r2
	capacity = 0;
    19d0:	e9c5 3300 	strd	r3, r3, [r5]
	if (left > len) return out;
    19d4:	d314      	bcc.n	1a00 <String::substring(unsigned int) const+0x4c>
	if (right > len) right = len;
    19d6:	4287      	cmp	r7, r0
	char temp = buffer[right];  // save the replaced character
    19d8:	6831      	ldr	r1, [r6, #0]
    19da:	bf28      	it	cs
    19dc:	4607      	movcs	r7, r0
    19de:	f811 8007 	ldrb.w	r8, [r1, r7]
	buffer[right] = '\0';	
    19e2:	55cb      	strb	r3, [r1, r7]
	out = buffer + left;  // pointer arithmetic
    19e4:	6833      	ldr	r3, [r6, #0]
	if (cstr) {
    19e6:	189c      	adds	r4, r3, r2
    19e8:	d00d      	beq.n	1a06 <String::substring(unsigned int) const+0x52>
		copy(cstr, strlen(cstr));
    19ea:	4620      	mov	r0, r4
    19ec:	f004 fd08 	bl	6400 <strlen>
    19f0:	4621      	mov	r1, r4
    19f2:	4602      	mov	r2, r0
    19f4:	4628      	mov	r0, r5
    19f6:	f7ff ff03 	bl	1800 <String::copy(char const*, unsigned int)>
	buffer[right] = temp;  //restore character
    19fa:	6833      	ldr	r3, [r6, #0]
    19fc:	f803 8007 	strb.w	r8, [r3, r7]
}
    1a00:	4628      	mov	r0, r5
    1a02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = 0;
    1a06:	60ac      	str	r4, [r5, #8]
    1a08:	e7f8      	b.n	19fc <String::substring(unsigned int) const+0x48>
    1a0a:	bf00      	nop

00001a0c <String::substring(unsigned int, unsigned int) const>:
	if (left > right) {
    1a0c:	429a      	cmp	r2, r3
{
    1a0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1a12:	4605      	mov	r5, r0
    1a14:	460e      	mov	r6, r1
	if (left > right) {
    1a16:	d902      	bls.n	1a1e <String::substring(unsigned int, unsigned int) const+0x12>
    1a18:	4611      	mov	r1, r2
    1a1a:	461a      	mov	r2, r3
    1a1c:	460b      	mov	r3, r1
	buffer = NULL;
    1a1e:	2100      	movs	r1, #0
	len = 0;
    1a20:	60a9      	str	r1, [r5, #8]
	if (left > len) return out;
    1a22:	68b7      	ldr	r7, [r6, #8]
    1a24:	4297      	cmp	r7, r2
	capacity = 0;
    1a26:	e9c5 1100 	strd	r1, r1, [r5]
	if (left > len) return out;
    1a2a:	d314      	bcc.n	1a56 <String::substring(unsigned int, unsigned int) const+0x4a>
	if (right > len) right = len;
    1a2c:	429f      	cmp	r7, r3
    1a2e:	bf28      	it	cs
    1a30:	461f      	movcs	r7, r3
	char temp = buffer[right];  // save the replaced character
    1a32:	6833      	ldr	r3, [r6, #0]
    1a34:	f813 8007 	ldrb.w	r8, [r3, r7]
	buffer[right] = '\0';	
    1a38:	55d9      	strb	r1, [r3, r7]
	out = buffer + left;  // pointer arithmetic
    1a3a:	6833      	ldr	r3, [r6, #0]
	if (cstr) {
    1a3c:	189c      	adds	r4, r3, r2
    1a3e:	d00d      	beq.n	1a5c <String::substring(unsigned int, unsigned int) const+0x50>
		copy(cstr, strlen(cstr));
    1a40:	4620      	mov	r0, r4
    1a42:	f004 fcdd 	bl	6400 <strlen>
    1a46:	4621      	mov	r1, r4
    1a48:	4602      	mov	r2, r0
    1a4a:	4628      	mov	r0, r5
    1a4c:	f7ff fed8 	bl	1800 <String::copy(char const*, unsigned int)>
	buffer[right] = temp;  //restore character
    1a50:	6833      	ldr	r3, [r6, #0]
    1a52:	f803 8007 	strb.w	r8, [r3, r7]
}
    1a56:	4628      	mov	r0, r5
    1a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = 0;
    1a5c:	60ac      	str	r4, [r5, #8]
    1a5e:	e7f8      	b.n	1a52 <String::substring(unsigned int, unsigned int) const+0x46>

00001a60 <String::toUpperCase()>:
	}
	return *this;
}

String & String::toUpperCase(void)
{
    1a60:	b538      	push	{r3, r4, r5, lr}
	if (!buffer) return *this;
    1a62:	6804      	ldr	r4, [r0, #0]
{
    1a64:	4605      	mov	r5, r0
	if (!buffer) return *this;
    1a66:	b144      	cbz	r4, 1a7a <String::toUpperCase()+0x1a>
	for (char *p = buffer; *p; p++) {
    1a68:	7820      	ldrb	r0, [r4, #0]
    1a6a:	b130      	cbz	r0, 1a7a <String::toUpperCase()+0x1a>
		*p = toupper(*p);
    1a6c:	f003 fea0 	bl	57b0 <toupper>
    1a70:	7020      	strb	r0, [r4, #0]
	for (char *p = buffer; *p; p++) {
    1a72:	f814 0f01 	ldrb.w	r0, [r4, #1]!
    1a76:	2800      	cmp	r0, #0
    1a78:	d1f8      	bne.n	1a6c <String::toUpperCase()+0xc>
	}
	return *this;
}
    1a7a:	4628      	mov	r0, r5
    1a7c:	bd38      	pop	{r3, r4, r5, pc}
    1a7e:	bf00      	nop

00001a80 <String::trim()>:

String & String::trim(void)
{
    1a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!buffer || len == 0) return *this;
    1a84:	6807      	ldr	r7, [r0, #0]
{
    1a86:	4606      	mov	r6, r0
	if (!buffer || len == 0) return *this;
    1a88:	b1e7      	cbz	r7, 1ac4 <String::trim()+0x44>
    1a8a:	6884      	ldr	r4, [r0, #8]
    1a8c:	b1d4      	cbz	r4, 1ac4 <String::trim()+0x44>
    1a8e:	46b8      	mov	r8, r7
    1a90:	4645      	mov	r5, r8
	char *begin = buffer;
	while (isspace(*begin)) begin++;
    1a92:	f818 0b01 	ldrb.w	r0, [r8], #1
    1a96:	f003 fe83 	bl	57a0 <isspace>
    1a9a:	2800      	cmp	r0, #0
    1a9c:	d1f8      	bne.n	1a90 <String::trim()+0x10>
	char *end = buffer + len - 1;
    1a9e:	3c01      	subs	r4, #1
    1aa0:	443c      	add	r4, r7
	while (isspace(*end) && end >= begin) end--;
    1aa2:	e002      	b.n	1aaa <String::trim()+0x2a>
    1aa4:	42a5      	cmp	r5, r4
    1aa6:	d805      	bhi.n	1ab4 <String::trim()+0x34>
    1aa8:	3c01      	subs	r4, #1
    1aaa:	7820      	ldrb	r0, [r4, #0]
    1aac:	f003 fe78 	bl	57a0 <isspace>
    1ab0:	2800      	cmp	r0, #0
    1ab2:	d1f7      	bne.n	1aa4 <String::trim()+0x24>
	len = end + 1 - begin;
    1ab4:	1c62      	adds	r2, r4, #1
	if (begin > buffer) memcpy(buffer, begin, len);
    1ab6:	42af      	cmp	r7, r5
	len = end + 1 - begin;
    1ab8:	eba2 0205 	sub.w	r2, r2, r5
    1abc:	60b2      	str	r2, [r6, #8]
	if (begin > buffer) memcpy(buffer, begin, len);
    1abe:	d304      	bcc.n	1aca <String::trim()+0x4a>
	buffer[len] = 0;
    1ac0:	2300      	movs	r3, #0
    1ac2:	54bb      	strb	r3, [r7, r2]
	return *this;
}
    1ac4:	4630      	mov	r0, r6
    1ac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (begin > buffer) memcpy(buffer, begin, len);
    1aca:	4638      	mov	r0, r7
    1acc:	4629      	mov	r1, r5
    1ace:	f000 fa9f 	bl	2010 <memcpy>
	buffer[len] = 0;
    1ad2:	6837      	ldr	r7, [r6, #0]
    1ad4:	68b2      	ldr	r2, [r6, #8]
    1ad6:	e7f3      	b.n	1ac0 <String::trim()+0x40>

00001ad8 <analogRead>:
	if (pin > sizeof(pin_to_channel)) return 0;
    1ad8:	282a      	cmp	r0, #42	; 0x2a
    1ada:	d849      	bhi.n	1b70 <analogRead+0x98>
{
    1adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (calibrating) wait_for_cal();
    1ade:	4f25      	ldr	r7, [pc, #148]	; (1b74 <analogRead+0x9c>)
    1ae0:	4604      	mov	r4, r0
    1ae2:	783b      	ldrb	r3, [r7, #0]
    1ae4:	b9e3      	cbnz	r3, 1b20 <analogRead+0x48>
	uint8_t ch = pin_to_channel[pin];
    1ae6:	4b24      	ldr	r3, [pc, #144]	; (1b78 <analogRead+0xa0>)
    1ae8:	5d1b      	ldrb	r3, [r3, r4]
	if (ch == 255) return 0;
    1aea:	2bff      	cmp	r3, #255	; 0xff
    1aec:	d029      	beq.n	1b42 <analogRead+0x6a>
	volatile uint32_t *pad = portControlRegister(pin);
    1aee:	4a23      	ldr	r2, [pc, #140]	; (1b7c <analogRead+0xa4>)
    1af0:	eb02 1204 	add.w	r2, r2, r4, lsl #4
    1af4:	6891      	ldr	r1, [r2, #8]
	uint32_t padval = *pad;
    1af6:	680a      	ldr	r2, [r1, #0]
	if ((padval & (IOMUXC_PAD_PUE | IOMUXC_PAD_PKE)) == IOMUXC_PAD_PKE) {
    1af8:	f402 5040 	and.w	r0, r2, #12288	; 0x3000
    1afc:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    1b00:	d030      	beq.n	1b64 <analogRead+0x8c>
	if(!(ch & 0x80)) {
    1b02:	061c      	lsls	r4, r3, #24
    1b04:	d41f      	bmi.n	1b46 <analogRead+0x6e>
		ADC1_HC0 = ch;
    1b06:	4c1e      	ldr	r4, [pc, #120]	; (1b80 <analogRead+0xa8>)
    1b08:	6023      	str	r3, [r4, #0]
		while (!(ADC1_HS & ADC_HS_COCO0)) {
    1b0a:	6a23      	ldr	r3, [r4, #32]
    1b0c:	07d8      	lsls	r0, r3, #31
    1b0e:	d404      	bmi.n	1b1a <analogRead+0x42>
			yield(); // TODO: what happens if yield-called code uses analogRead()
    1b10:	f001 fd84 	bl	361c <yield>
		while (!(ADC1_HS & ADC_HS_COCO0)) {
    1b14:	6a23      	ldr	r3, [r4, #32]
    1b16:	07d9      	lsls	r1, r3, #31
    1b18:	d5fa      	bpl.n	1b10 <analogRead+0x38>
		return ADC1_R0;
    1b1a:	4b19      	ldr	r3, [pc, #100]	; (1b80 <analogRead+0xa8>)
    1b1c:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    1b1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	while ((ADC1_GC & ADC_GC_CAL) || (ADC2_GC & ADC_GC_CAL)) {
    1b20:	4d17      	ldr	r5, [pc, #92]	; (1b80 <analogRead+0xa8>)
    1b22:	4e18      	ldr	r6, [pc, #96]	; (1b84 <analogRead+0xac>)
    1b24:	e001      	b.n	1b2a <analogRead+0x52>
		yield();
    1b26:	f001 fd79 	bl	361c <yield>
	while ((ADC1_GC & ADC_GC_CAL) || (ADC2_GC & ADC_GC_CAL)) {
    1b2a:	6cab      	ldr	r3, [r5, #72]	; 0x48
    1b2c:	061b      	lsls	r3, r3, #24
    1b2e:	d4fa      	bmi.n	1b26 <analogRead+0x4e>
    1b30:	6cb3      	ldr	r3, [r6, #72]	; 0x48
    1b32:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    1b36:	d1f6      	bne.n	1b26 <analogRead+0x4e>
	calibrating = 0;
    1b38:	703b      	strb	r3, [r7, #0]
	uint8_t ch = pin_to_channel[pin];
    1b3a:	4b0f      	ldr	r3, [pc, #60]	; (1b78 <analogRead+0xa0>)
    1b3c:	5d1b      	ldrb	r3, [r3, r4]
	if (ch == 255) return 0;
    1b3e:	2bff      	cmp	r3, #255	; 0xff
    1b40:	d1d5      	bne.n	1aee <analogRead+0x16>
	if (pin > sizeof(pin_to_channel)) return 0;
    1b42:	2000      	movs	r0, #0
}
    1b44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ADC2_HC0 = ch & 0x7f;
    1b46:	4c0f      	ldr	r4, [pc, #60]	; (1b84 <analogRead+0xac>)
    1b48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    1b4c:	6023      	str	r3, [r4, #0]
		while (!(ADC2_HS & ADC_HS_COCO0)) {
    1b4e:	6a23      	ldr	r3, [r4, #32]
    1b50:	07da      	lsls	r2, r3, #31
    1b52:	d404      	bmi.n	1b5e <analogRead+0x86>
			yield(); // TODO: what happens if yield-called code uses analogRead()
    1b54:	f001 fd62 	bl	361c <yield>
		while (!(ADC2_HS & ADC_HS_COCO0)) {
    1b58:	6a23      	ldr	r3, [r4, #32]
    1b5a:	07db      	lsls	r3, r3, #31
    1b5c:	d5fa      	bpl.n	1b54 <analogRead+0x7c>
		return ADC2_R0;
    1b5e:	4b09      	ldr	r3, [pc, #36]	; (1b84 <analogRead+0xac>)
    1b60:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    1b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*pad = padval & ~IOMUXC_PAD_PKE;
    1b64:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
	if(!(ch & 0x80)) {
    1b68:	061c      	lsls	r4, r3, #24
		*pad = padval & ~IOMUXC_PAD_PKE;
    1b6a:	600a      	str	r2, [r1, #0]
	if(!(ch & 0x80)) {
    1b6c:	d4eb      	bmi.n	1b46 <analogRead+0x6e>
    1b6e:	e7ca      	b.n	1b06 <analogRead+0x2e>
	if (pin > sizeof(pin_to_channel)) return 0;
    1b70:	2000      	movs	r0, #0
}
    1b72:	4770      	bx	lr
    1b74:	20008e9b 	.word	0x20008e9b
    1b78:	200078a0 	.word	0x200078a0
    1b7c:	20007360 	.word	0x20007360
    1b80:	400c4000 	.word	0x400c4000
    1b84:	400c8000 	.word	0x400c8000

00001b88 <analogReadRes>:
   if (bits == 8) {
    1b88:	2808      	cmp	r0, #8
{
    1b8a:	b430      	push	{r4, r5}
   if (bits == 8) {
    1b8c:	d022      	beq.n	1bd4 <analogReadRes+0x4c>
    mode = ADC_CFG_MODE(2) | ADC_CFG_ADSTS(3) | ADC_CFG_ADLSMP;
    1b8e:	280a      	cmp	r0, #10
    1b90:	bf0c      	ite	eq
    1b92:	f44f 7105 	moveq.w	r1, #532	; 0x214
    1b96:	f44f 7146 	movne.w	r1, #792	; 0x318
  tmp32  = (ADC1_CFG & (0xFFFFFC00));
    1b9a:	4c10      	ldr	r4, [pc, #64]	; (1bdc <analogReadRes+0x54>)
    1b9c:	4d10      	ldr	r5, [pc, #64]	; (1be0 <analogReadRes+0x58>)
    1b9e:	6c63      	ldr	r3, [r4, #68]	; 0x44
  tmp32 |= (ADC1_CFG & (0x03));  // ADICLK
    1ba0:	6c62      	ldr	r2, [r4, #68]	; 0x44
  tmp32  = (ADC1_CFG & (0xFFFFFC00));
    1ba2:	402b      	ands	r3, r5
  tmp32  = (ADC2_CFG & (0xFFFFFC00));
    1ba4:	480f      	ldr	r0, [pc, #60]	; (1be4 <analogReadRes+0x5c>)
  tmp32 |= (ADC1_CFG & (0x03));  // ADICLK
    1ba6:	f002 0203 	and.w	r2, r2, #3
    1baa:	431a      	orrs	r2, r3
  tmp32 |= (ADC1_CFG & (0xE0));  // ADIV & ADLPC
    1bac:	6c63      	ldr	r3, [r4, #68]	; 0x44
    1bae:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    1bb2:	4313      	orrs	r3, r2
  tmp32 |= mode; 
    1bb4:	430b      	orrs	r3, r1
  ADC1_CFG = tmp32;
    1bb6:	6463      	str	r3, [r4, #68]	; 0x44
  tmp32  = (ADC2_CFG & (0xFFFFFC00));
    1bb8:	6c43      	ldr	r3, [r0, #68]	; 0x44
  tmp32 |= (ADC2_CFG & (0x03));  // ADICLK
    1bba:	6c42      	ldr	r2, [r0, #68]	; 0x44
  tmp32  = (ADC2_CFG & (0xFFFFFC00));
    1bbc:	402b      	ands	r3, r5
  tmp32 |= (ADC2_CFG & (0x03));  // ADICLK
    1bbe:	f002 0203 	and.w	r2, r2, #3
    1bc2:	431a      	orrs	r2, r3
  tmp32 |= (ADC2_CFG & (0xE0));  // ADIV & ADLPC
    1bc4:	6c43      	ldr	r3, [r0, #68]	; 0x44
    1bc6:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    1bca:	4313      	orrs	r3, r2
  tmp32 |= mode; 
    1bcc:	4319      	orrs	r1, r3
}
    1bce:	bc30      	pop	{r4, r5}
  ADC2_CFG = tmp32;
    1bd0:	6441      	str	r1, [r0, #68]	; 0x44
}
    1bd2:	4770      	bx	lr
    mode = ADC_CFG_MODE(0) | ADC_CFG_ADSTS(3);
    1bd4:	f44f 7140 	mov.w	r1, #768	; 0x300
    1bd8:	e7df      	b.n	1b9a <analogReadRes+0x12>
    1bda:	bf00      	nop
    1bdc:	400c4000 	.word	0x400c4000
    1be0:	fffffc00 	.word	0xfffffc00
    1be4:	400c8000 	.word	0x400c8000

00001be8 <analogReadAveraging>:
{
    1be8:	b410      	push	{r4}
  ADC1_GC &= ~0x20;
    1bea:	4c1f      	ldr	r4, [pc, #124]	; (1c68 <analogReadAveraging+0x80>)
    if (num >= 32) {
    1bec:	281f      	cmp	r0, #31
  ADC2_GC &= ~0x20;
    1bee:	491f      	ldr	r1, [pc, #124]	; (1c6c <analogReadAveraging+0x84>)
  ADC1_GC &= ~0x20;
    1bf0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    1bf2:	f023 0320 	bic.w	r3, r3, #32
    1bf6:	64a3      	str	r3, [r4, #72]	; 0x48
  mode = ADC1_CFG & ~0xC000;
    1bf8:	6c62      	ldr	r2, [r4, #68]	; 0x44
  ADC2_GC &= ~0x20;
    1bfa:	6c8b      	ldr	r3, [r1, #72]	; 0x48
  mode = ADC1_CFG & ~0xC000;
    1bfc:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
  ADC2_GC &= ~0x20;
    1c00:	f023 0320 	bic.w	r3, r3, #32
    1c04:	648b      	str	r3, [r1, #72]	; 0x48
  mode1 = ADC2_CFG & ~0xC000;
    1c06:	6c4b      	ldr	r3, [r1, #68]	; 0x44
    1c08:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
    if (num >= 32) {
    1c0c:	d912      	bls.n	1c34 <analogReadAveraging+0x4c>
      mode |= ADC_CFG_AVGS(3);
    1c0e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
      mode1 |= ADC_CFG_AVGS(3);
    1c12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
  ADC1_CFG = mode;
    1c16:	6462      	str	r2, [r4, #68]	; 0x44
  ADC2_CFG = mode1;
    1c18:	644b      	str	r3, [r1, #68]	; 0x44
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
    1c1a:	4913      	ldr	r1, [pc, #76]	; (1c68 <analogReadAveraging+0x80>)
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
    1c1c:	4a13      	ldr	r2, [pc, #76]	; (1c6c <analogReadAveraging+0x84>)
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
    1c1e:	6c8b      	ldr	r3, [r1, #72]	; 0x48
}
    1c20:	f85d 4b04 	ldr.w	r4, [sp], #4
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
    1c24:	f043 0320 	orr.w	r3, r3, #32
    1c28:	648b      	str	r3, [r1, #72]	; 0x48
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
    1c2a:	6c93      	ldr	r3, [r2, #72]	; 0x48
    1c2c:	f043 0320 	orr.w	r3, r3, #32
    1c30:	6493      	str	r3, [r2, #72]	; 0x48
}
    1c32:	4770      	bx	lr
    } else if (num >= 16) {
    1c34:	280f      	cmp	r0, #15
    1c36:	d908      	bls.n	1c4a <analogReadAveraging+0x62>
      mode |= ADC_CFG_AVGS(2);
    1c38:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
      mode1 |= ADC_CFG_AVGS(2);
    1c3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  ADC1_CFG = mode;
    1c40:	4809      	ldr	r0, [pc, #36]	; (1c68 <analogReadAveraging+0x80>)
  ADC2_CFG = mode1;
    1c42:	490a      	ldr	r1, [pc, #40]	; (1c6c <analogReadAveraging+0x84>)
  ADC1_CFG = mode;
    1c44:	6442      	str	r2, [r0, #68]	; 0x44
  ADC2_CFG = mode1;
    1c46:	644b      	str	r3, [r1, #68]	; 0x44
  if(num >= 4){
    1c48:	e7e7      	b.n	1c1a <analogReadAveraging+0x32>
    } else if (num >= 8) {
    1c4a:	2807      	cmp	r0, #7
    1c4c:	d904      	bls.n	1c58 <analogReadAveraging+0x70>
      mode |= ADC_CFG_AVGS(1);
    1c4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
      mode1 |= ADC_CFG_AVGS(1);
    1c52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1c56:	e7f3      	b.n	1c40 <analogReadAveraging+0x58>
  if(num >= 4){
    1c58:	2803      	cmp	r0, #3
  ADC1_CFG = mode;
    1c5a:	6462      	str	r2, [r4, #68]	; 0x44
  ADC2_CFG = mode1;
    1c5c:	644b      	str	r3, [r1, #68]	; 0x44
  if(num >= 4){
    1c5e:	d8dc      	bhi.n	1c1a <analogReadAveraging+0x32>
}
    1c60:	f85d 4b04 	ldr.w	r4, [sp], #4
    1c64:	4770      	bx	lr
    1c66:	bf00      	nop
    1c68:	400c4000 	.word	0x400c4000
    1c6c:	400c8000 	.word	0x400c8000

00001c70 <delay>:
	if (msec == 0) return;
    1c70:	b900      	cbnz	r0, 1c74 <delay+0x4>
    1c72:	4770      	bx	lr
{
    1c74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    1c78:	2101      	movs	r1, #1
    1c7a:	4681      	mov	r9, r0
    1c7c:	4c21      	ldr	r4, [pc, #132]	; (1d04 <delay+0x94>)
    1c7e:	4d22      	ldr	r5, [pc, #136]	; (1d08 <delay+0x98>)
    1c80:	4e22      	ldr	r6, [pc, #136]	; (1d0c <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    1c82:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    1c86:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    1c88:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    1c8a:	e844 1300 	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    1c8e:	2b00      	cmp	r3, #0
    1c90:	d1f7      	bne.n	1c82 <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    1c92:	491f      	ldr	r1, [pc, #124]	; (1d10 <delay+0xa0>)
    1c94:	684b      	ldr	r3, [r1, #4]
	uint32_t usec = 1000*smc + frac;
    1c96:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1c9a:	f8df a078 	ldr.w	sl, [pc, #120]	; 1d14 <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
    1c9e:	1a1b      	subs	r3, r3, r0
    1ca0:	2701      	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
    1ca2:	fb0b f802 	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1ca6:	f8da 2000 	ldr.w	r2, [sl]
    1caa:	fba3 3202 	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
    1cae:	455a      	cmp	r2, fp
    1cb0:	bf94      	ite	ls
    1cb2:	4490      	addls	r8, r2
    1cb4:	44d8      	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    1cb6:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    1cba:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    1cbc:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    1cbe:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    1cc2:	2b00      	cmp	r3, #0
    1cc4:	d1f7      	bne.n	1cb6 <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    1cc6:	684b      	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1cc8:	f8da c000 	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
    1ccc:	1a1b      	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
    1cce:	fb0b f202 	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1cd2:	fba3 3c0c 	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
    1cd6:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
    1cda:	bf94      	ite	ls
    1cdc:	4462      	addls	r2, ip
    1cde:	f502 727a 	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
    1ce2:	eba2 0208 	sub.w	r2, r2, r8
    1ce6:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
    1cea:	d306      	bcc.n	1cfa <delay+0x8a>
			if (--msec == 0) return;
    1cec:	f1b9 0901 	subs.w	r9, r9, #1
			start += 1000;
    1cf0:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
    1cf4:	d1df      	bne.n	1cb6 <delay+0x46>
}
    1cf6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
    1cfa:	f001 fc8f 	bl	361c <yield>
		while ((micros() - start) >= 1000) {
    1cfe:	4904      	ldr	r1, [pc, #16]	; (1d10 <delay+0xa0>)
    1d00:	e7d9      	b.n	1cb6 <delay+0x46>
    1d02:	bf00      	nop
    1d04:	20008e70 	.word	0x20008e70
    1d08:	20008e6c 	.word	0x20008e6c
    1d0c:	20008e68 	.word	0x20008e68
    1d10:	e0001000 	.word	0xe0001000
    1d14:	20008e64 	.word	0x20008e64

00001d18 <digitalWrite>:
	if (pin >= CORE_NUM_DIGITAL) return;
    1d18:	2836      	cmp	r0, #54	; 0x36
    1d1a:	d816      	bhi.n	1d4a <digitalWrite+0x32>
	p = digital_pin_to_info_PGM + pin;
    1d1c:	0102      	lsls	r2, r0, #4
    1d1e:	4b10      	ldr	r3, [pc, #64]	; (1d60 <digitalWrite+0x48>)
    1d20:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
    1d24:	589b      	ldr	r3, [r3, r2]
{
    1d26:	b410      	push	{r4}
	mask = p->mask;
    1d28:	68c2      	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
    1d2a:	685c      	ldr	r4, [r3, #4]
	if (pinmode & mask) {
    1d2c:	4214      	tst	r4, r2
    1d2e:	d005      	beq.n	1d3c <digitalWrite+0x24>
		if (val) {
    1d30:	b961      	cbnz	r1, 1d4c <digitalWrite+0x34>
		}
	}
}
    1d32:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x22) = mask; // clear register
    1d36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
    1d3a:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    1d3c:	6883      	ldr	r3, [r0, #8]
		if (val) {
    1d3e:	b151      	cbz	r1, 1d56 <digitalWrite+0x3e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    1d40:	4a08      	ldr	r2, [pc, #32]	; (1d64 <digitalWrite+0x4c>)
}
    1d42:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    1d46:	601a      	str	r2, [r3, #0]
}
    1d48:	4770      	bx	lr
    1d4a:	4770      	bx	lr
    1d4c:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x21) = mask; // set register
    1d50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    1d54:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    1d56:	4a04      	ldr	r2, [pc, #16]	; (1d68 <digitalWrite+0x50>)
}
    1d58:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    1d5c:	601a      	str	r2, [r3, #0]
}
    1d5e:	4770      	bx	lr
    1d60:	20007360 	.word	0x20007360
    1d64:	0001f038 	.word	0x0001f038
    1d68:	00013038 	.word	0x00013038

00001d6c <digitalRead>:

uint8_t digitalRead(uint8_t pin)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return 0;
    1d6c:	2836      	cmp	r0, #54	; 0x36
    1d6e:	d80b      	bhi.n	1d88 <digitalRead+0x1c>
	p = digital_pin_to_info_PGM + pin;
    1d70:	4b06      	ldr	r3, [pc, #24]	; (1d8c <digitalRead+0x20>)
    1d72:	0102      	lsls	r2, r0, #4
    1d74:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
    1d78:	589a      	ldr	r2, [r3, r2]
    1d7a:	68c3      	ldr	r3, [r0, #12]
    1d7c:	6892      	ldr	r2, [r2, #8]
    1d7e:	421a      	tst	r2, r3
    1d80:	bf14      	ite	ne
    1d82:	2001      	movne	r0, #1
    1d84:	2000      	moveq	r0, #0
    1d86:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return 0;
    1d88:	2000      	movs	r0, #0
}
    1d8a:	4770      	bx	lr
    1d8c:	20007360 	.word	0x20007360

00001d90 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    1d90:	2836      	cmp	r0, #54	; 0x36
    1d92:	d829      	bhi.n	1de8 <pinMode+0x58>
	p = digital_pin_to_info_PGM + pin;
    1d94:	4b16      	ldr	r3, [pc, #88]	; (1df0 <pinMode+0x60>)
    1d96:	0102      	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    1d98:	2901      	cmp	r1, #1
	p = digital_pin_to_info_PGM + pin;
    1d9a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    1d9e:	589a      	ldr	r2, [r3, r2]
{
    1da0:	b410      	push	{r4}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    1da2:	6853      	ldr	r3, [r2, #4]
    1da4:	68c4      	ldr	r4, [r0, #12]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    1da6:	d00e      	beq.n	1dc6 <pinMode+0x36>
    1da8:	2904      	cmp	r1, #4
    1daa:	d00c      	beq.n	1dc6 <pinMode+0x36>
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    1dac:	ea23 0304 	bic.w	r3, r3, r4
    1db0:	6053      	str	r3, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    1db2:	6883      	ldr	r3, [r0, #8]
		if (mode == INPUT) {
    1db4:	b1a9      	cbz	r1, 1de2 <pinMode+0x52>
		} else if (mode == INPUT_PULLUP) {
    1db6:	2902      	cmp	r1, #2
    1db8:	d017      	beq.n	1dea <pinMode+0x5a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    1dba:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    1dbc:	bf0c      	ite	eq
    1dbe:	4a0d      	ldreq	r2, [pc, #52]	; (1df4 <pinMode+0x64>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    1dc0:	4a0d      	ldrne	r2, [pc, #52]	; (1df8 <pinMode+0x68>)
    1dc2:	601a      	str	r2, [r3, #0]
    1dc4:	e007      	b.n	1dd6 <pinMode+0x46>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    1dc6:	4323      	orrs	r3, r4
		if (mode == OUTPUT) {
    1dc8:	2901      	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
    1dca:	6053      	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
    1dcc:	6883      	ldr	r3, [r0, #8]
		if (mode == OUTPUT) {
    1dce:	d008      	beq.n	1de2 <pinMode+0x52>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    1dd0:	f640 0238 	movw	r2, #2104	; 0x838
    1dd4:	601a      	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    1dd6:	6843      	ldr	r3, [r0, #4]
    1dd8:	2215      	movs	r2, #21
}
    1dda:	f85d 4b04 	ldr.w	r4, [sp], #4
	*(p->mux) = 5 | 0x10;
    1dde:	601a      	str	r2, [r3, #0]
}
    1de0:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7);
    1de2:	2238      	movs	r2, #56	; 0x38
    1de4:	601a      	str	r2, [r3, #0]
    1de6:	e7f6      	b.n	1dd6 <pinMode+0x46>
    1de8:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    1dea:	4a04      	ldr	r2, [pc, #16]	; (1dfc <pinMode+0x6c>)
    1dec:	601a      	str	r2, [r3, #0]
    1dee:	e7f2      	b.n	1dd6 <pinMode+0x46>
    1df0:	20007360 	.word	0x20007360
    1df4:	00013038 	.word	0x00013038
    1df8:	00010038 	.word	0x00010038
    1dfc:	0001f038 	.word	0x0001f038

00001e00 <flash_wait>:
#define WRITE_SDR       FLEXSPI_LUT_OPCODE_WRITE_SDR
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

static void flash_wait()
{
    1e00:	b430      	push	{r4, r5}
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    1e02:	4a12      	ldr	r2, [pc, #72]	; (1e4c <flash_wait+0x4c>)
	FLEXSPI_LUT61 = 0;
    1e04:	2000      	movs	r0, #0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    1e06:	4b12      	ldr	r3, [pc, #72]	; (1e50 <flash_wait+0x50>)
	uint8_t status;
	do {
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
    1e08:	2101      	movs	r1, #1
		FLEXSPI_IPCR0 = 0;
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
    1e0a:	4d12      	ldr	r5, [pc, #72]	; (1e54 <flash_wait+0x54>)
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {;}
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
		asm("":::"memory");
		status = *(uint8_t *)&FLEXSPI_RFDR0;
    1e0c:	4c12      	ldr	r4, [pc, #72]	; (1e58 <flash_wait+0x58>)
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    1e0e:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
	FLEXSPI_LUT61 = 0;
    1e12:	f8c2 02f4 	str.w	r0, [r2, #756]	; 0x2f4
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
    1e16:	f8c2 10b8 	str.w	r1, [r2, #184]	; 0xb8
		FLEXSPI_IPCR0 = 0;
    1e1a:	f8c2 00a0 	str.w	r0, [r2, #160]	; 0xa0
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
    1e1e:	f8c2 50a4 	str.w	r5, [r2, #164]	; 0xa4
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    1e22:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {;}
    1e26:	6953      	ldr	r3, [r2, #20]
    1e28:	07db      	lsls	r3, r3, #31
    1e2a:	d5fc      	bpl.n	1e26 <flash_wait+0x26>
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    1e2c:	6151      	str	r1, [r2, #20]
	} while (status & 1);
    1e2e:	7823      	ldrb	r3, [r4, #0]
    1e30:	07db      	lsls	r3, r3, #31
    1e32:	d4f0      	bmi.n	1e16 <flash_wait+0x16>
	FLEXSPI_MCR0 |= FLEXSPI_MCR0_SWRESET; // purge stale data from FlexSPI's AHB FIFO
    1e34:	6813      	ldr	r3, [r2, #0]
	while (FLEXSPI_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
    1e36:	4905      	ldr	r1, [pc, #20]	; (1e4c <flash_wait+0x4c>)
	FLEXSPI_MCR0 |= FLEXSPI_MCR0_SWRESET; // purge stale data from FlexSPI's AHB FIFO
    1e38:	f043 0301 	orr.w	r3, r3, #1
    1e3c:	6013      	str	r3, [r2, #0]
	while (FLEXSPI_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
    1e3e:	680b      	ldr	r3, [r1, #0]
    1e40:	07db      	lsls	r3, r3, #31
    1e42:	d4fc      	bmi.n	1e3e <flash_wait+0x3e>
	__enable_irq();
    1e44:	b662      	cpsie	i
}
    1e46:	bc30      	pop	{r4, r5}
    1e48:	4770      	bx	lr
    1e4a:	bf00      	nop
    1e4c:	402a8000 	.word	0x402a8000
    1e50:	24010405 	.word	0x24010405
    1e54:	000f0001 	.word	0x000f0001
    1e58:	402a8100 	.word	0x402a8100

00001e5c <eepromemu_flash_write>:

// write bytes into flash memory (which is already erased to 0xFF)
void eepromemu_flash_write(void *addr, const void *data, uint32_t len)
{
    1e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1e5e:	460f      	mov	r7, r1
    1e60:	4616      	mov	r6, r2
	__disable_irq();
    1e62:	b672      	cpsid	i
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    1e64:	4b34      	ldr	r3, [pc, #208]	; (1f38 <eepromemu_flash_write+0xdc>)
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	FLEXSPI_IPCR0 = 0;
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    1e66:	f240 4106 	movw	r1, #1030	; 0x406
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    1e6a:	4a34      	ldr	r2, [pc, #208]	; (1f3c <eepromemu_flash_write+0xe0>)
    1e6c:	619a      	str	r2, [r3, #24]
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    1e6e:	2202      	movs	r2, #2
    1e70:	61da      	str	r2, [r3, #28]
	FLEXSPI_IPCR0 = 0;
    1e72:	2200      	movs	r2, #0
    1e74:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    1e78:	f8c3 12f0 	str.w	r1, [r3, #752]	; 0x2f0
	FLEXSPI_LUT61 = 0;
    1e7c:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
	FLEXSPI_LUT62 = 0;
    1e80:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
	FLEXSPI_LUT63 = 0;
    1e84:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    1e88:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    1e8c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    1e90:	2201      	movs	r2, #1
    1e92:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    1e96:	f020 031f 	bic.w	r3, r0, #31
	uint32_t end_addr = (uint32_t)addr + size;
    1e9a:	1982      	adds	r2, r0, r6
	asm volatile("": : :"memory");
	asm("dsb");
    1e9c:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    1ea0:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    1ea4:	f8c4 3f5c 	str.w	r3, [r4, #3932]	; 0xf5c
		location += 32;
    1ea8:	3320      	adds	r3, #32
	} while (location < end_addr);
    1eaa:	429a      	cmp	r2, r3
    1eac:	d8fa      	bhi.n	1ea4 <eepromemu_flash_write+0x48>
	asm("dsb");
    1eae:	f3bf 8f4f 	dsb	sy
	asm("isb");
    1eb2:	f3bf 8f6f 	isb	sy
	arm_dcache_delete(addr, len); // purge old data from ARM's cache
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    1eb6:	4d20      	ldr	r5, [pc, #128]	; (1f38 <eepromemu_flash_write+0xdc>)
    1eb8:	696b      	ldr	r3, [r5, #20]
    1eba:	07da      	lsls	r2, r3, #31
    1ebc:	d5fc      	bpl.n	1eb8 <eepromemu_flash_write+0x5c>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    1ebe:	2301      	movs	r3, #1
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
    1ec0:	491f      	ldr	r1, [pc, #124]	; (1f40 <eepromemu_flash_write+0xe4>)
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFFFFF;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    1ec2:	b2b2      	uxth	r2, r6
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFFFFF;
    1ec4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    1ec8:	616b      	str	r3, [r5, #20]
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    1eca:	f442 2270 	orr.w	r2, r2, #983040	; 0xf0000
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
    1ece:	f8c5 12f0 	str.w	r1, [r5, #752]	; 0x2f0
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
    1ed2:	f242 2101 	movw	r1, #8705	; 0x2201
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	const uint8_t *src = (const uint8_t *)data;
	uint32_t n;
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    1ed6:	4c18      	ldr	r4, [pc, #96]	; (1f38 <eepromemu_flash_write+0xdc>)
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
    1ed8:	f8c5 12f4 	str.w	r1, [r5, #756]	; 0x2f4
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
    1edc:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFFFFF;
    1ee0:	f8c5 00a0 	str.w	r0, [r5, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    1ee4:	f8c5 20a4 	str.w	r2, [r5, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    1ee8:	f8c5 30b0 	str.w	r3, [r5, #176]	; 0xb0
		if (n & FLEXSPI_INTR_IPTXWE) {
			uint32_t wrlen = len;
			if (wrlen > 8) wrlen = 8;
			if (wrlen > 0) {
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    1eec:	4d15      	ldr	r5, [pc, #84]	; (1f44 <eepromemu_flash_write+0xe8>)
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    1eee:	e001      	b.n	1ef4 <eepromemu_flash_write+0x98>
		if (n & FLEXSPI_INTR_IPTXWE) {
    1ef0:	065b      	lsls	r3, r3, #25
    1ef2:	d409      	bmi.n	1f08 <eepromemu_flash_write+0xac>
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    1ef4:	6963      	ldr	r3, [r4, #20]
    1ef6:	f013 0001 	ands.w	r0, r3, #1
    1efa:	d0f9      	beq.n	1ef0 <eepromemu_flash_write+0x94>
				len -= wrlen;
			}
			FLEXSPI_INTR = FLEXSPI_INTR_IPTXWE;
		}
	}
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPTXWE;
    1efc:	2341      	movs	r3, #65	; 0x41
    1efe:	6163      	str	r3, [r4, #20]
	flash_wait();
}
    1f00:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	flash_wait();
    1f04:	f7ff bf7c 	b.w	1e00 <flash_wait>
			if (wrlen > 8) wrlen = 8;
    1f08:	2e08      	cmp	r6, #8
    1f0a:	d80a      	bhi.n	1f22 <eepromemu_flash_write+0xc6>
			if (wrlen > 0) {
    1f0c:	b136      	cbz	r6, 1f1c <eepromemu_flash_write+0xc0>
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    1f0e:	4632      	mov	r2, r6
    1f10:	4639      	mov	r1, r7
				src += wrlen;
    1f12:	4437      	add	r7, r6
				len -= wrlen;
    1f14:	4606      	mov	r6, r0
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    1f16:	4628      	mov	r0, r5
    1f18:	f000 f87a 	bl	2010 <memcpy>
			FLEXSPI_INTR = FLEXSPI_INTR_IPTXWE;
    1f1c:	2340      	movs	r3, #64	; 0x40
    1f1e:	6163      	str	r3, [r4, #20]
    1f20:	e7e8      	b.n	1ef4 <eepromemu_flash_write+0x98>
    1f22:	f1a6 0008 	sub.w	r0, r6, #8
			if (wrlen > 8) wrlen = 8;
    1f26:	2608      	movs	r6, #8
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    1f28:	4639      	mov	r1, r7
    1f2a:	4632      	mov	r2, r6
				src += wrlen;
    1f2c:	4437      	add	r7, r6
				len -= wrlen;
    1f2e:	4606      	mov	r6, r0
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    1f30:	4628      	mov	r0, r5
    1f32:	f000 f86d 	bl	2010 <memcpy>
				len -= wrlen;
    1f36:	e7f1      	b.n	1f1c <eepromemu_flash_write+0xc0>
    1f38:	402a8000 	.word	0x402a8000
    1f3c:	5af05af0 	.word	0x5af05af0
    1f40:	08180432 	.word	0x08180432
    1f44:	402a8180 	.word	0x402a8180

00001f48 <eepromemu_flash_erase_sector>:

// erase a 4K sector
void eepromemu_flash_erase_sector(void *addr)
{
    1f48:	b410      	push	{r4}
	__disable_irq();
    1f4a:	b672      	cpsid	i
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    1f4c:	4b28      	ldr	r3, [pc, #160]	; (1ff0 <eepromemu_flash_erase_sector+0xa8>)
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    1f4e:	2102      	movs	r1, #2
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    1f50:	4c28      	ldr	r4, [pc, #160]	; (1ff4 <eepromemu_flash_erase_sector+0xac>)
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
	FLEXSPI_LUT61 = 0;
    1f52:	2200      	movs	r2, #0
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    1f54:	619c      	str	r4, [r3, #24]
	FLEXSPI_LUT62 = 0;
	FLEXSPI_LUT63 = 0;
	FLEXSPI_IPCR0 = 0;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    1f56:	f44f 2470 	mov.w	r4, #983040	; 0xf0000
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    1f5a:	61d9      	str	r1, [r3, #28]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    1f5c:	f240 4106 	movw	r1, #1030	; 0x406
    1f60:	f8c3 12f0 	str.w	r1, [r3, #752]	; 0x2f0
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    1f64:	2101      	movs	r1, #1
	FLEXSPI_LUT61 = 0;
    1f66:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
	FLEXSPI_LUT62 = 0;
    1f6a:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
	FLEXSPI_LUT63 = 0;
    1f6e:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
	FLEXSPI_IPCR0 = 0;
    1f72:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arm_dcache_delete((void *)((uint32_t)addr & 0xFFFFF000), 4096); // purge data from cache
    1f76:	f5a2 5280 	sub.w	r2, r2, #4096	; 0x1000
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    1f7a:	f8c3 40a4 	str.w	r4, [r3, #164]	; 0xa4
	arm_dcache_delete((void *)((uint32_t)addr & 0xFFFFF000), 4096); // purge data from cache
    1f7e:	4002      	ands	r2, r0
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    1f80:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
	asm("dsb");
    1f84:	f3bf 8f4f 	dsb	sy
	uint32_t end_addr = (uint32_t)addr + size;
    1f88:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
    1f8c:	f102 0320 	add.w	r3, r2, #32
		SCB_CACHE_DCIMVAC = location;
    1f90:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    1f94:	4299      	cmp	r1, r3
    1f96:	bf34      	ite	cc
    1f98:	2101      	movcc	r1, #1
    1f9a:	2180      	movcs	r1, #128	; 0x80
    1f9c:	eb02 1141 	add.w	r1, r2, r1, lsl #5
	} while (location < end_addr);
    1fa0:	428b      	cmp	r3, r1
		SCB_CACHE_DCIMVAC = location;
    1fa2:	f8cc 2f5c 	str.w	r2, [ip, #3932]	; 0xf5c
		location += 32;
    1fa6:	461a      	mov	r2, r3
	} while (location < end_addr);
    1fa8:	f103 0320 	add.w	r3, r3, #32
    1fac:	d1f8      	bne.n	1fa0 <eepromemu_flash_erase_sector+0x58>
	asm("dsb");
    1fae:	f3bf 8f4f 	dsb	sy
	asm("isb");
    1fb2:	f3bf 8f6f 	isb	sy
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    1fb6:	4a0e      	ldr	r2, [pc, #56]	; (1ff0 <eepromemu_flash_erase_sector+0xa8>)
    1fb8:	6953      	ldr	r3, [r2, #20]
    1fba:	07d9      	lsls	r1, r3, #31
    1fbc:	d5fc      	bpl.n	1fb8 <eepromemu_flash_erase_sector+0x70>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    1fbe:	2401      	movs	r4, #1
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
    1fc0:	490d      	ldr	r1, [pc, #52]	; (1ff8 <eepromemu_flash_erase_sector+0xb0>)
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFF000;
    1fc2:	4b0e      	ldr	r3, [pc, #56]	; (1ffc <eepromemu_flash_erase_sector+0xb4>)
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    1fc4:	6154      	str	r4, [r2, #20]
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFF000;
    1fc6:	4003      	ands	r3, r0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
    1fc8:	f8c2 12f0 	str.w	r1, [r2, #752]	; 0x2f0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    1fcc:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    1fd0:	4907      	ldr	r1, [pc, #28]	; (1ff0 <eepromemu_flash_erase_sector+0xa8>)
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFF000;
    1fd2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    1fd6:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    1fda:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    1fde:	694b      	ldr	r3, [r1, #20]
    1fe0:	07db      	lsls	r3, r3, #31
    1fe2:	d5fc      	bpl.n	1fde <eepromemu_flash_erase_sector+0x96>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    1fe4:	2301      	movs	r3, #1
	flash_wait();
}
    1fe6:	f85d 4b04 	ldr.w	r4, [sp], #4
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    1fea:	614b      	str	r3, [r1, #20]
	flash_wait();
    1fec:	f7ff bf08 	b.w	1e00 <flash_wait>
    1ff0:	402a8000 	.word	0x402a8000
    1ff4:	5af05af0 	.word	0x5af05af0
    1ff8:	08180420 	.word	0x08180420
    1ffc:	00fff000 	.word	0x00fff000

00002000 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    2000:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    2002:	f7fe fc7f 	bl	904 <setup>
	while (1) {
		loop();
    2006:	f7fe fa2f 	bl	468 <loop>
		yield();
    200a:	f001 fb07 	bl	361c <yield>
	while (1) {
    200e:	e7fa      	b.n	2006 <main+0x6>

00002010 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    2010:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    2012:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    2016:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    201a:	d16d      	bne.n	20f8 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    201c:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    201e:	d341      	bcc.n	20a4 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    2020:	f851 3b04 	ldr.w	r3, [r1], #4
    2024:	f840 3b04 	str.w	r3, [r0], #4
    2028:	f851 3b04 	ldr.w	r3, [r1], #4
    202c:	f840 3b04 	str.w	r3, [r0], #4
    2030:	f851 3b04 	ldr.w	r3, [r1], #4
    2034:	f840 3b04 	str.w	r3, [r0], #4
    2038:	f851 3b04 	ldr.w	r3, [r1], #4
    203c:	f840 3b04 	str.w	r3, [r0], #4
    2040:	f851 3b04 	ldr.w	r3, [r1], #4
    2044:	f840 3b04 	str.w	r3, [r0], #4
    2048:	f851 3b04 	ldr.w	r3, [r1], #4
    204c:	f840 3b04 	str.w	r3, [r0], #4
    2050:	f851 3b04 	ldr.w	r3, [r1], #4
    2054:	f840 3b04 	str.w	r3, [r0], #4
    2058:	f851 3b04 	ldr.w	r3, [r1], #4
    205c:	f840 3b04 	str.w	r3, [r0], #4
    2060:	f851 3b04 	ldr.w	r3, [r1], #4
    2064:	f840 3b04 	str.w	r3, [r0], #4
    2068:	f851 3b04 	ldr.w	r3, [r1], #4
    206c:	f840 3b04 	str.w	r3, [r0], #4
    2070:	f851 3b04 	ldr.w	r3, [r1], #4
    2074:	f840 3b04 	str.w	r3, [r0], #4
    2078:	f851 3b04 	ldr.w	r3, [r1], #4
    207c:	f840 3b04 	str.w	r3, [r0], #4
    2080:	f851 3b04 	ldr.w	r3, [r1], #4
    2084:	f840 3b04 	str.w	r3, [r0], #4
    2088:	f851 3b04 	ldr.w	r3, [r1], #4
    208c:	f840 3b04 	str.w	r3, [r0], #4
    2090:	f851 3b04 	ldr.w	r3, [r1], #4
    2094:	f840 3b04 	str.w	r3, [r0], #4
    2098:	f851 3b04 	ldr.w	r3, [r1], #4
    209c:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    20a0:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    20a2:	d2bd      	bcs.n	2020 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    20a4:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    20a6:	d311      	bcc.n	20cc <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    20a8:	f851 3b04 	ldr.w	r3, [r1], #4
    20ac:	f840 3b04 	str.w	r3, [r0], #4
    20b0:	f851 3b04 	ldr.w	r3, [r1], #4
    20b4:	f840 3b04 	str.w	r3, [r0], #4
    20b8:	f851 3b04 	ldr.w	r3, [r1], #4
    20bc:	f840 3b04 	str.w	r3, [r0], #4
    20c0:	f851 3b04 	ldr.w	r3, [r1], #4
    20c4:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    20c8:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    20ca:	d2ed      	bcs.n	20a8 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    20cc:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    20ce:	d305      	bcc.n	20dc <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    20d0:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    20d4:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    20d8:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    20da:	d2f9      	bcs.n	20d0 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    20dc:	3204      	adds	r2, #4
	beq	.Ldone
    20de:	d008      	beq.n	20f2 <memcpy+0xe2>

	lsls	r2, r2, #31
    20e0:	07d2      	lsls	r2, r2, #31
	itt ne
    20e2:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    20e4:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    20e8:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    20ec:	d301      	bcc.n	20f2 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    20ee:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    20f0:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    20f2:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    20f4:	4770      	bx	lr
    20f6:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    20f8:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    20fa:	d313      	bcc.n	2124 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    20fc:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    20fe:	d08d      	beq.n	201c <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    2100:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    2104:	d08a      	beq.n	201c <memcpy+0xc>

	rsb	r3, #4
    2106:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    210a:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    210c:	07db      	lsls	r3, r3, #31
	itt ne
    210e:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    2110:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    2114:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    2118:	d380      	bcc.n	201c <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    211a:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    211e:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    2122:	e77b      	b.n	201c <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    2124:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    2126:	d3d9      	bcc.n	20dc <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    2128:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    212a:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    212e:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    2132:	d2f9      	bcs.n	2128 <memcpy+0x118>

	ldrb	r3, [r1]
    2134:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    2136:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    2138:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    213a:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    213c:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    213e:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    2140:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    2142:	4770      	bx	lr

00002144 <ultoa>:
	int i=0, j;
    2144:	f101 3cff 	add.w	ip, r1, #4294967295
{
    2148:	b570      	push	{r4, r5, r6, lr}
		digit = val % radix;
    214a:	4666      	mov	r6, ip
	int i=0, j;
    214c:	2400      	movs	r4, #0
    214e:	e000      	b.n	2152 <ultoa+0xe>
		i++;
    2150:	3401      	adds	r4, #1
		digit = val % radix;
    2152:	fbb0 f5f2 	udiv	r5, r0, r2
    2156:	fb02 0315 	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    215a:	2b09      	cmp	r3, #9
    215c:	f103 0e37 	add.w	lr, r3, #55	; 0x37
    2160:	f103 0330 	add.w	r3, r3, #48	; 0x30
    2164:	fa5f fe8e 	uxtb.w	lr, lr
    2168:	bf98      	it	ls
    216a:	fa5f fe83 	uxtbls.w	lr, r3
		if (val == 0) break;
    216e:	4290      	cmp	r0, r2
		val /= radix;
    2170:	4628      	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    2172:	f806 ef01 	strb.w	lr, [r6, #1]!
		if (val == 0) break;
    2176:	d2eb      	bcs.n	2150 <ultoa+0xc>
	buf[i + 1] = 0;
    2178:	1c63      	adds	r3, r4, #1
    217a:	2200      	movs	r2, #0
    217c:	18c8      	adds	r0, r1, r3
    217e:	54ca      	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
    2180:	b17c      	cbz	r4, 21a2 <ultoa+0x5e>
		t = buf[j];
    2182:	4662      	mov	r2, ip
    2184:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    2188:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
    218c:	eba1 030c 	sub.w	r3, r1, ip
    2190:	3202      	adds	r2, #2
		buf[j] = buf[i];
    2192:	f88c 6000 	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
    2196:	3b01      	subs	r3, #1
    2198:	1a52      	subs	r2, r2, r1
		buf[i] = t;
    219a:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    219c:	4423      	add	r3, r4
    219e:	429a      	cmp	r2, r3
    21a0:	dbef      	blt.n	2182 <ultoa+0x3e>
}
    21a2:	4608      	mov	r0, r1
    21a4:	bd70      	pop	{r4, r5, r6, pc}
    21a6:	bf00      	nop

000021a8 <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    21a8:	2300      	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
    21aa:	220f      	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    21ac:	f248 2cb8 	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
    21b0:	4619      	mov	r1, r3
{
    21b2:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    21b4:	f44f 4470 	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    21b8:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    21bc:	f8a0 418c 	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    21c0:	f44f 4460 	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
    21c4:	f8a0 218e 	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
    21c8:	460a      	mov	r2, r1
	p->FFILT0 = 0;
    21ca:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    21ce:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    21d2:	b29b      	uxth	r3, r3
    21d4:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    21d8:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    21dc:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
    21e0:	3101      	adds	r1, #1
    21e2:	eb00 1343 	add.w	r3, r0, r3, lsl #5
    21e6:	2904      	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    21e8:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    21ea:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    21ee:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    21f0:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    21f2:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    21f4:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    21f6:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
    21fa:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    21fc:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    21fe:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    2200:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
    2202:	d1eb      	bne.n	21dc <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2204:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    2208:	b29b      	uxth	r3, r3
    220a:	f043 030f 	orr.w	r3, r3, #15
    220e:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    2212:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    2216:	b29b      	uxth	r3, r3
    2218:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    221c:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
    2220:	bd10      	pop	{r4, pc}
    2222:	bf00      	nop

00002224 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    2224:	4b37      	ldr	r3, [pc, #220]	; (2304 <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    2226:	4a38      	ldr	r2, [pc, #224]	; (2308 <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    2228:	6f99      	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    222a:	4838      	ldr	r0, [pc, #224]	; (230c <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    222c:	f441 017f 	orr.w	r1, r1, #16711680	; 0xff0000
{
    2230:	b570      	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    2232:	6799      	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    2234:	f241 0601 	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    2238:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    223c:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    2240:	f243 0426 	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    2244:	430a      	orrs	r2, r1
    2246:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    224a:	f7ff ffad 	bl	21a8 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    224e:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    2252:	f7ff ffa9 	bl	21a8 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    2256:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    225a:	f7ff ffa5 	bl	21a8 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    225e:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    2262:	f7ff ffa1 	bl	21a8 <flexpwm_init>
	for (i=0; i < 4; i++) {
    2266:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    2268:	f5a0 1003 	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    226c:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
    2270:	4611      	mov	r1, r2
    2272:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    2276:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    227a:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    227c:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    227e:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    2280:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    2282:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    2286:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    2288:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    228a:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    228e:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    2290:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    2292:	d1ee      	bne.n	2272 <pwm_init+0x4e>
    2294:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    2296:	481e      	ldr	r0, [pc, #120]	; (2310 <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    2298:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    229c:	f241 0601 	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    22a0:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    22a2:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    22a6:	f243 0426 	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    22aa:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    22ae:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    22b2:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    22b4:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    22b6:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    22b8:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    22ba:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    22be:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    22c0:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    22c2:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    22c6:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    22c8:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    22ca:	d1ee      	bne.n	22aa <pwm_init+0x86>
    22cc:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    22ce:	4811      	ldr	r0, [pc, #68]	; (2314 <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    22d0:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    22d2:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    22d6:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    22d8:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    22dc:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    22e0:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    22e4:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    22e8:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    22ea:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    22ec:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    22ee:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    22f0:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    22f2:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    22f4:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    22f6:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    22fa:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    22fc:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
    2300:	d1ee      	bne.n	22e0 <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    2302:	bd70      	pop	{r4, r5, r6, pc}
    2304:	400fc000 	.word	0x400fc000
    2308:	fc030000 	.word	0xfc030000
    230c:	403dc000 	.word	0x403dc000
    2310:	401e0000 	.word	0x401e0000
    2314:	401e4000 	.word	0x401e4000

00002318 <unused_interrupt_vector>:
	__disable_irq();
    2318:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    231a:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
    231e:	4c52      	ldr	r4, [pc, #328]	; (2468 <unused_interrupt_vector+0x150>)
    2320:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("tst lr, #4\nite eq\nmrseq %0, msp\nmrsne %0, psp\n" : "=r" (stack) :: "memory");
    2324:	f01e 0f04 	tst.w	lr, #4
    2328:	bf0c      	ite	eq
    232a:	f3ef 8208 	mrseq	r2, MSP
    232e:	f3ef 8209 	mrsne	r2, PSP
	info->cfsr = SCB_CFSR;
    2332:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
    2336:	4e4d      	ldr	r6, [pc, #308]	; (246c <unused_interrupt_vector+0x154>)
	while (p < end) {
    2338:	4d4d      	ldr	r5, [pc, #308]	; (2470 <unused_interrupt_vector+0x158>)
	info->cfsr = SCB_CFSR;
    233a:	f8d3 0d28 	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
    233e:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
    2342:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
    2346:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
    234a:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
    234e:	e9c4 1324 	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
    2352:	6993      	ldr	r3, [r2, #24]
    2354:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    2358:	69d3      	ldr	r3, [r2, #28]
    235a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    235e:	f000 f8d1 	bl	2504 <tempmonGetTemp>
    2362:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    2366:	f001 fb71 	bl	3a4c <rtc_get>
	info->len = sizeof(*info) / 4;
    236a:	210b      	movs	r1, #11
	crc = 0xFFFFFFFF;
    236c:	f04f 32ff 	mov.w	r2, #4294967295
	info->time = rtc_get();
    2370:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    2374:	460b      	mov	r3, r1
    2376:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    237a:	493e      	ldr	r1, [pc, #248]	; (2474 <unused_interrupt_vector+0x15c>)
		crc ^= *p++;
    237c:	1d30      	adds	r0, r6, #4
    237e:	405a      	eors	r2, r3
    2380:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    2382:	f002 0301 	and.w	r3, r2, #1
    2386:	3c01      	subs	r4, #1
    2388:	fb01 f303 	mul.w	r3, r1, r3
    238c:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
    2390:	d1f7      	bne.n	2382 <unused_interrupt_vector+0x6a>
	while (p < end) {
    2392:	42a8      	cmp	r0, r5
    2394:	d002      	beq.n	239c <unused_interrupt_vector+0x84>
		crc ^= *p++;
    2396:	6873      	ldr	r3, [r6, #4]
    2398:	4606      	mov	r6, r0
    239a:	e7ef      	b.n	237c <unused_interrupt_vector+0x64>
	info->crc = crc;
    239c:	4b32      	ldr	r3, [pc, #200]	; (2468 <unused_interrupt_vector+0x150>)
    239e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    23a2:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    23a6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    23aa:	4930      	ldr	r1, [pc, #192]	; (246c <unused_interrupt_vector+0x154>)
    23ac:	4a32      	ldr	r2, [pc, #200]	; (2478 <unused_interrupt_vector+0x160>)
    23ae:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
    23b2:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
    23b6:	f3bf 8f4f 	dsb	sy
	asm("isb");
    23ba:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    23be:	4a2f      	ldr	r2, [pc, #188]	; (247c <unused_interrupt_vector+0x164>)
	PIT_MCR = PIT_MCR_MDIS;
    23c0:	2502      	movs	r5, #2
    23c2:	482f      	ldr	r0, [pc, #188]	; (2480 <unused_interrupt_vector+0x168>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    23c4:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    23c6:	492f      	ldr	r1, [pc, #188]	; (2484 <unused_interrupt_vector+0x16c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    23c8:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    23cc:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    23ce:	6005      	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    23d0:	69d3      	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    23d2:	482d      	ldr	r0, [pc, #180]	; (2488 <unused_interrupt_vector+0x170>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    23d4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    23d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    23dc:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    23de:	680b      	ldr	r3, [r1, #0]
    23e0:	4283      	cmp	r3, r0
    23e2:	d83d      	bhi.n	2460 <unused_interrupt_vector+0x148>
	PIT_MCR = 0;
    23e4:	4d26      	ldr	r5, [pc, #152]	; (2480 <unused_interrupt_vector+0x168>)
    23e6:	2100      	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
    23e8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    23ec:	f04f 32ff 	mov.w	r2, #4294967295
	PIT_MCR = 0;
    23f0:	6029      	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    23f2:	2601      	movs	r6, #1
	PIT_TCTRL0 = 0;
    23f4:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    23f8:	4924      	ldr	r1, [pc, #144]	; (248c <unused_interrupt_vector+0x174>)
    23fa:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    23fe:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
    2402:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    2406:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    240a:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    240e:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    2412:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	count = 0;
    2416:	e001      	b.n	241c <unused_interrupt_vector+0x104>
		usb_isr();
    2418:	f000 f966 	bl	26e8 <usb_isr>
		if (PIT_TFLG0) {
    241c:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    2420:	2b00      	cmp	r3, #0
    2422:	d0f9      	beq.n	2418 <unused_interrupt_vector+0x100>
			if (++count >= 80) break;  // reboot after 8 seconds
    2424:	3401      	adds	r4, #1
			PIT_TFLG0 = 1;
    2426:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    242a:	2c4f      	cmp	r4, #79	; 0x4f
    242c:	d9f4      	bls.n	2418 <unused_interrupt_vector+0x100>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    242e:	4b18      	ldr	r3, [pc, #96]	; (2490 <unused_interrupt_vector+0x178>)
	USB1_USBCMD = USB_USBCMD_RST;
    2430:	2002      	movs	r0, #2
    2432:	4918      	ldr	r1, [pc, #96]	; (2494 <unused_interrupt_vector+0x17c>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    2434:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
    2438:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    243c:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    243e:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    2442:	b93b      	cbnz	r3, 2454 <unused_interrupt_vector+0x13c>
	SRC_GPR5 = 0x0BAD00F1;
    2444:	4814      	ldr	r0, [pc, #80]	; (2498 <unused_interrupt_vector+0x180>)
    2446:	4915      	ldr	r1, [pc, #84]	; (249c <unused_interrupt_vector+0x184>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    2448:	4a0d      	ldr	r2, [pc, #52]	; (2480 <unused_interrupt_vector+0x168>)
	SRC_GPR5 = 0x0BAD00F1;
    244a:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    244c:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
    2450:	2b00      	cmp	r3, #0
    2452:	d0fa      	beq.n	244a <unused_interrupt_vector+0x132>
	SCB_AIRCR = 0x05FA0004;
    2454:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    2458:	4a11      	ldr	r2, [pc, #68]	; (24a0 <unused_interrupt_vector+0x188>)
    245a:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    245e:	e7fe      	b.n	245e <unused_interrupt_vector+0x146>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    2460:	f001 f97c 	bl	375c <set_arm_clock>
    2464:	e7be      	b.n	23e4 <unused_interrupt_vector+0xcc>
    2466:	bf00      	nop
    2468:	2027ff00 	.word	0x2027ff00
    246c:	2027ff80 	.word	0x2027ff80
    2470:	2027ffa8 	.word	0x2027ffa8
    2474:	edb88320 	.word	0xedb88320
    2478:	2027ffa0 	.word	0x2027ffa0
    247c:	400fc000 	.word	0x400fc000
    2480:	40084000 	.word	0x40084000
    2484:	20007b5c 	.word	0x20007b5c
    2488:	0bcd3d80 	.word	0x0bcd3d80
    248c:	00249f00 	.word	0x00249f00
    2490:	400d9000 	.word	0x400d9000
    2494:	402e0000 	.word	0x402e0000
    2498:	400f8000 	.word	0x400f8000
    249c:	0bad00f1 	.word	0x0bad00f1
    24a0:	05fa0004 	.word	0x05fa0004

000024a4 <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
    24a4:	490a      	ldr	r1, [pc, #40]	; (24d0 <_sbrk+0x2c>)
    24a6:	680a      	ldr	r2, [r1, #0]
        if (incr != 0) {
    24a8:	b138      	cbz	r0, 24ba <_sbrk+0x16>
{
    24aa:	b508      	push	{r3, lr}
                if (prev + incr > (char *)&_heap_end) {
    24ac:	1813      	adds	r3, r2, r0
    24ae:	4809      	ldr	r0, [pc, #36]	; (24d4 <_sbrk+0x30>)
    24b0:	4283      	cmp	r3, r0
    24b2:	d804      	bhi.n	24be <_sbrk+0x1a>
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    24b4:	4610      	mov	r0, r2
                __brkval = prev + incr;
    24b6:	600b      	str	r3, [r1, #0]
}
    24b8:	bd08      	pop	{r3, pc}
    24ba:	4610      	mov	r0, r2
    24bc:	4770      	bx	lr
                        errno = ENOMEM;
    24be:	f003 fd8f 	bl	5fe0 <__errno>
    24c2:	230c      	movs	r3, #12
                        return (void *)-1;
    24c4:	f04f 32ff 	mov.w	r2, #4294967295
                        errno = ENOMEM;
    24c8:	6003      	str	r3, [r0, #0]
}
    24ca:	4610      	mov	r0, r2
    24cc:	bd08      	pop	{r3, pc}
    24ce:	bf00      	nop
    24d0:	20007c40 	.word	0x20007c40
    24d4:	20280000 	.word	0x20280000

000024d8 <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
    24d8:	2000      	movs	r0, #0
    24da:	4770      	bx	lr

000024dc <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
    24dc:	f04f 30ff 	mov.w	r0, #4294967295
    24e0:	4770      	bx	lr
    24e2:	bf00      	nop

000024e4 <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
    24e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
    24e8:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
    24ea:	604b      	str	r3, [r1, #4]
}
    24ec:	4770      	bx	lr
    24ee:	bf00      	nop

000024f0 <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
    24f0:	2001      	movs	r0, #1
    24f2:	4770      	bx	lr

000024f4 <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
    24f4:	f04f 30ff 	mov.w	r0, #4294967295
    24f8:	4770      	bx	lr
    24fa:	bf00      	nop

000024fc <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    24fc:	bf30      	wfi
    24fe:	e7fd      	b.n	24fc <abort>

00002500 <Panic_Temp_isr>:
  unused_interrupt_vector();
    2500:	f7ff bf0a 	b.w	2318 <unused_interrupt_vector>

00002504 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    2504:	4a12      	ldr	r2, [pc, #72]	; (2550 <tempmonGetTemp+0x4c>)
    2506:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    250a:	075b      	lsls	r3, r3, #29
    250c:	d5fb      	bpl.n	2506 <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    250e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    2512:	4810      	ldr	r0, [pc, #64]	; (2554 <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    2514:	f3c3 230b 	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    2518:	490f      	ldr	r1, [pc, #60]	; (2558 <tempmonGetTemp+0x54>)
    251a:	ed90 7a00 	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    251e:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    2522:	ed91 6a00 	vldr	s12, [r1]
    2526:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    252a:	4a0c      	ldr	r2, [pc, #48]	; (255c <tempmonGetTemp+0x58>)
    252c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2530:	4b0b      	ldr	r3, [pc, #44]	; (2560 <tempmonGetTemp+0x5c>)
    2532:	edd2 6a00 	vldr	s13, [r2]
    2536:	ee77 7ac7 	vsub.f32	s15, s15, s14
    253a:	ed93 7a00 	vldr	s14, [r3]
    253e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    2542:	ee67 7a86 	vmul.f32	s15, s15, s12
    2546:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
    254a:	ee37 0a40 	vsub.f32	s0, s14, s0
    254e:	4770      	bx	lr
    2550:	400d8100 	.word	0x400d8100
    2554:	20008e54 	.word	0x20008e54
    2558:	20008e5c 	.word	0x20008e5c
    255c:	20008e60 	.word	0x20008e60
    2560:	20008e58 	.word	0x20008e58

00002564 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    2564:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
    2566:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
    2568:	b11b      	cbz	r3, 2572 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    256a:	6853      	ldr	r3, [r2, #4]
    256c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    2570:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    2572:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    2574:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    2576:	b33c      	cbz	r4, 25c8 <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    2578:	4b1a      	ldr	r3, [pc, #104]	; (25e4 <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
    257a:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    257c:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    2580:	420c      	tst	r4, r1
    2582:	d11d      	bne.n	25c0 <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    2584:	4e18      	ldr	r6, [pc, #96]	; (25e8 <schedule_transfer+0x84>)
    2586:	6877      	ldr	r7, [r6, #4]
    2588:	e004      	b.n	2594 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    258a:	6874      	ldr	r4, [r6, #4]
    258c:	1be4      	subs	r4, r4, r7
    258e:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    2592:	d20b      	bcs.n	25ac <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    2594:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    2598:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    259c:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    25a0:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    25a4:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    25a8:	0464      	lsls	r4, r4, #17
    25aa:	d5ee      	bpl.n	258a <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    25ac:	400d      	ands	r5, r1
    25ae:	d107      	bne.n	25c0 <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    25b0:	4c0c      	ldr	r4, [pc, #48]	; (25e4 <schedule_transfer+0x80>)
		endpoint->status = 0;
    25b2:	e9c0 2502 	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    25b6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    25ba:	430b      	orrs	r3, r1
    25bc:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    25c0:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    25c2:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    25c4:	bcf0      	pop	{r4, r5, r6, r7}
    25c6:	4770      	bx	lr
	USB1_ENDPTPRIME |= epmask;
    25c8:	4d06      	ldr	r5, [pc, #24]	; (25e4 <schedule_transfer+0x80>)
	endpoint->status = 0;
    25ca:	e9c0 2402 	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    25ce:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
    25d2:	430b      	orrs	r3, r1
    25d4:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    25d8:	6302      	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
    25da:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    25dc:	b662      	cpsie	i
}
    25de:	bcf0      	pop	{r4, r5, r6, r7}
    25e0:	4770      	bx	lr
    25e2:	bf00      	nop
    25e4:	402e0000 	.word	0x402e0000
    25e8:	e0001000 	.word	0xe0001000

000025ec <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    25ec:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    25ee:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
    25f0:	b19d      	cbz	r5, 261a <run_callbacks+0x2e>
    25f2:	4606      	mov	r6, r0
    25f4:	462a      	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    25f6:	2400      	movs	r4, #0
    25f8:	e003      	b.n	2602 <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    25fa:	6812      	ldr	r2, [r2, #0]
		count++;
    25fc:	3401      	adds	r4, #1
		if ((uint32_t)t == 1) {
    25fe:	2a01      	cmp	r2, #1
    2600:	d00c      	beq.n	261c <run_callbacks+0x30>
		if (t->status & (1<<7)) {
    2602:	6853      	ldr	r3, [r2, #4]
    2604:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    2608:	d0f7      	beq.n	25fa <run_callbacks+0xe>
			ep->first_transfer = t;
    260a:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    260c:	b12c      	cbz	r4, 261a <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
    260e:	4628      	mov	r0, r5
		ep->callback_function(first);
    2610:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
    2612:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
    2614:	4798      	blx	r3
	while (count) {
    2616:	3c01      	subs	r4, #1
    2618:	d1f9      	bne.n	260e <run_callbacks+0x22>
		first = next;
		count--;
	}
}
    261a:	bd70      	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
    261c:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
			break;
    2620:	e7f4      	b.n	260c <run_callbacks+0x20>
    2622:	bf00      	nop

00002624 <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    2624:	b430      	push	{r4, r5}
	if (len > 0) {
    2626:	b9d9      	cbnz	r1, 2660 <endpoint0_transmit.constprop.0+0x3c>
    2628:	4c1f      	ldr	r4, [pc, #124]	; (26a8 <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
    262a:	4b20      	ldr	r3, [pc, #128]	; (26ac <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
    262c:	2100      	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    262e:	4a20      	ldr	r2, [pc, #128]	; (26b0 <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
    2630:	2501      	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    2632:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    2636:	6099      	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    2638:	601d      	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
    263a:	e9c4 3102 	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    263e:	2480      	movs	r4, #128	; 0x80
    2640:	605c      	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    2642:	f8c2 01bc 	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    2646:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    264a:	481a      	ldr	r0, [pc, #104]	; (26b4 <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
    264c:	432b      	orrs	r3, r5
    264e:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    2652:	6001      	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
    2654:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    2658:	2b00      	cmp	r3, #0
    265a:	d1fb      	bne.n	2654 <endpoint0_transmit.constprop.0+0x30>
}
    265c:	bc30      	pop	{r4, r5}
    265e:	4770      	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    2660:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    2662:	4b15      	ldr	r3, [pc, #84]	; (26b8 <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    2664:	4c10      	ldr	r4, [pc, #64]	; (26a8 <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
    2666:	2501      	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    2668:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    266c:	6098      	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
    266e:	4a10      	ldr	r2, [pc, #64]	; (26b0 <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    2670:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    2672:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    2676:	601d      	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    2678:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    267a:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    267e:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
    2680:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    2682:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    2686:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    268a:	6159      	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
    268c:	2100      	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
    268e:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    2690:	64e1      	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    2692:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    2696:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    269a:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    269e:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    26a2:	2b00      	cmp	r3, #0
    26a4:	d1fb      	bne.n	269e <endpoint0_transmit.constprop.0+0x7a>
    26a6:	e7c0      	b.n	262a <endpoint0_transmit.constprop.0+0x6>
    26a8:	20000000 	.word	0x20000000
    26ac:	200086c0 	.word	0x200086c0
    26b0:	402e0000 	.word	0x402e0000
    26b4:	20008ddc 	.word	0x20008ddc
    26b8:	200086e0 	.word	0x200086e0

000026bc <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    26bc:	4908      	ldr	r1, [pc, #32]	; (26e0 <usb_stop_sof_interrupts+0x24>)
    26be:	2201      	movs	r2, #1
    26c0:	780b      	ldrb	r3, [r1, #0]
    26c2:	fa02 f000 	lsl.w	r0, r2, r0
    26c6:	ea23 0000 	bic.w	r0, r3, r0
    26ca:	7008      	strb	r0, [r1, #0]
	if (sof_usage == 0) {
    26cc:	b930      	cbnz	r0, 26dc <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    26ce:	4a05      	ldr	r2, [pc, #20]	; (26e4 <usb_stop_sof_interrupts+0x28>)
    26d0:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
    26d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    26d8:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
    26dc:	4770      	bx	lr
    26de:	bf00      	nop
    26e0:	20008e9f 	.word	0x20008e9f
    26e4:	402e0000 	.word	0x402e0000

000026e8 <usb_isr>:
{
    26e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
    26ec:	4c97      	ldr	r4, [pc, #604]	; (294c <usb_isr+0x264>)
{
    26ee:	b083      	sub	sp, #12
	uint32_t status = USB1_USBSTS;
    26f0:	f8d4 7144 	ldr.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    26f4:	07fb      	lsls	r3, r7, #31
	USB1_USBSTS = status;
    26f6:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    26fa:	d553      	bpl.n	27a4 <usb_isr+0xbc>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    26fc:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    2700:	2a00      	cmp	r2, #0
    2702:	d04a      	beq.n	279a <usb_isr+0xb2>
    2704:	4e92      	ldr	r6, [pc, #584]	; (2950 <usb_isr+0x268>)
    2706:	f8df a260 	ldr.w	sl, [pc, #608]	; 2968 <usb_isr+0x280>
		uint32_t addr = (uint32_t)data;
    270a:	f8df 9274 	ldr.w	r9, [pc, #628]	; 2980 <usb_isr+0x298>
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    270e:	f8df b274 	ldr.w	fp, [pc, #628]	; 2984 <usb_isr+0x29c>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    2712:	f8df 8274 	ldr.w	r8, [pc, #628]	; 2988 <usb_isr+0x2a0>
			USB1_ENDPTSETUPSTAT = setupstatus;
    2716:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
    271a:	e9d6 200a 	ldrd	r2, r0, [r6, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    271e:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    2722:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    2726:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    272a:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    272e:	049d      	lsls	r5, r3, #18
    2730:	d5f5      	bpl.n	271e <usb_isr+0x36>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    2732:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    2736:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    273a:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    273e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    2742:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    2746:	f8d4 51b4 	ldr.w	r5, [r4, #436]	; 0x1b4
    274a:	f015 1501 	ands.w	r5, r5, #65537	; 0x10001
    274e:	d1fa      	bne.n	2746 <usb_isr+0x5e>
			endpoint0_notify_mask = 0;
    2750:	b293      	uxth	r3, r2
	setup.bothwords = setupdata;
    2752:	4684      	mov	ip, r0
			endpoint0_notify_mask = 0;
    2754:	f8ca 5000 	str.w	r5, [sl]
	switch (setup.wRequestAndType) {
    2758:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    275c:	f000 81cf 	beq.w	2afe <usb_isr+0x416>
    2760:	f200 80db 	bhi.w	291a <usb_isr+0x232>
    2764:	f240 3102 	movw	r1, #770	; 0x302
    2768:	428b      	cmp	r3, r1
    276a:	f000 81e7 	beq.w	2b3c <usb_isr+0x454>
    276e:	f200 809a 	bhi.w	28a6 <usb_isr+0x1be>
    2772:	2b82      	cmp	r3, #130	; 0x82
    2774:	f000 81cb 	beq.w	2b0e <usb_isr+0x426>
    2778:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    277c:	f040 808a 	bne.w	2894 <usb_isr+0x1ac>
		if (endpoint > 7) break;
    2780:	f010 0f78 	tst.w	r0, #120	; 0x78
    2784:	b283      	uxth	r3, r0
    2786:	f000 8203 	beq.w	2b90 <usb_isr+0x4a8>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    278a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    278e:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    2792:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    2796:	2a00      	cmp	r2, #0
    2798:	d1bd      	bne.n	2716 <usb_isr+0x2e>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    279a:	4a6c      	ldr	r2, [pc, #432]	; (294c <usb_isr+0x264>)
    279c:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    27a0:	2b00      	cmp	r3, #0
    27a2:	d142      	bne.n	282a <usb_isr+0x142>
	if (status & USB_USBSTS_URI) { // page 3164
    27a4:	067e      	lsls	r6, r7, #25
    27a6:	d516      	bpl.n	27d6 <usb_isr+0xee>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    27a8:	4b68      	ldr	r3, [pc, #416]	; (294c <usb_isr+0x264>)
    27aa:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    27ae:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    27b2:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    27b6:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    27ba:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    27be:	2c00      	cmp	r4, #0
    27c0:	d1fb      	bne.n	27ba <usb_isr+0xd2>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    27c2:	f04f 32ff 	mov.w	r2, #4294967295
    27c6:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    27ca:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    27ce:	f000 fd29 	bl	3224 <usb_serial_reset>
		endpointN_notify_mask = 0;
    27d2:	4b60      	ldr	r3, [pc, #384]	; (2954 <usb_isr+0x26c>)
    27d4:	601c      	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
    27d6:	01fc      	lsls	r4, r7, #7
    27d8:	d503      	bpl.n	27e2 <usb_isr+0xfa>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    27da:	4b5f      	ldr	r3, [pc, #380]	; (2958 <usb_isr+0x270>)
    27dc:	681b      	ldr	r3, [r3, #0]
    27de:	b103      	cbz	r3, 27e2 <usb_isr+0xfa>
    27e0:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
    27e2:	01b8      	lsls	r0, r7, #6
    27e4:	d503      	bpl.n	27ee <usb_isr+0x106>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    27e6:	4b5d      	ldr	r3, [pc, #372]	; (295c <usb_isr+0x274>)
    27e8:	681b      	ldr	r3, [r3, #0]
    27ea:	b103      	cbz	r3, 27ee <usb_isr+0x106>
    27ec:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
    27ee:	0779      	lsls	r1, r7, #29
    27f0:	d508      	bpl.n	2804 <usb_isr+0x11c>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    27f2:	4b56      	ldr	r3, [pc, #344]	; (294c <usb_isr+0x264>)
    27f4:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    27f8:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    27fc:	d047      	beq.n	288e <usb_isr+0x1a6>
			usb_high_speed = 1;
    27fe:	4b58      	ldr	r3, [pc, #352]	; (2960 <usb_isr+0x278>)
    2800:	2201      	movs	r2, #1
    2802:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    2804:	4b51      	ldr	r3, [pc, #324]	; (294c <usb_isr+0x264>)
    2806:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
    280a:	061a      	lsls	r2, r3, #24
    280c:	d50a      	bpl.n	2824 <usb_isr+0x13c>
    280e:	063b      	lsls	r3, r7, #24
    2810:	d508      	bpl.n	2824 <usb_isr+0x13c>
		if (usb_reboot_timer) {
    2812:	4a54      	ldr	r2, [pc, #336]	; (2964 <usb_isr+0x27c>)
    2814:	7813      	ldrb	r3, [r2, #0]
    2816:	b12b      	cbz	r3, 2824 <usb_isr+0x13c>
			if (--usb_reboot_timer == 0) {
    2818:	3b01      	subs	r3, #1
    281a:	b2db      	uxtb	r3, r3
    281c:	7013      	strb	r3, [r2, #0]
    281e:	2b00      	cmp	r3, #0
    2820:	f000 8272 	beq.w	2d08 <usb_isr+0x620>
}
    2824:	b003      	add	sp, #12
    2826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (completestatus & endpoint0_notify_mask) {
    282a:	494f      	ldr	r1, [pc, #316]	; (2968 <usb_isr+0x280>)
			USB1_ENDPTCOMPLETE = completestatus;
    282c:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    2830:	6808      	ldr	r0, [r1, #0]
    2832:	4203      	tst	r3, r0
    2834:	f040 81d1 	bne.w	2bda <usb_isr+0x4f2>
			completestatus &= endpointN_notify_mask;
    2838:	4a46      	ldr	r2, [pc, #280]	; (2954 <usb_isr+0x26c>)
    283a:	6814      	ldr	r4, [r2, #0]
			if (completestatus) {
    283c:	401c      	ands	r4, r3
    283e:	d0b1      	beq.n	27a4 <usb_isr+0xbc>
				while (tx) {
    2840:	ea5f 4814 	movs.w	r8, r4, lsr #16
    2844:	d010      	beq.n	2868 <usb_isr+0x180>
    2846:	4e42      	ldr	r6, [pc, #264]	; (2950 <usb_isr+0x268>)
					tx &= ~(1<<p);
    2848:	f04f 0901 	mov.w	r9, #1
					int p=__builtin_ctz(tx);
    284c:	fa98 f5a8 	rbit	r5, r8
    2850:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    2854:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					tx &= ~(1<<p);
    2858:	fa09 f505 	lsl.w	r5, r9, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    285c:	3040      	adds	r0, #64	; 0x40
    285e:	f7ff fec5 	bl	25ec <run_callbacks>
				while (tx) {
    2862:	ea38 0805 	bics.w	r8, r8, r5
    2866:	d1f1      	bne.n	284c <usb_isr+0x164>
				uint32_t rx = completestatus & 0xffff;
    2868:	b2a4      	uxth	r4, r4
				while(rx) {
    286a:	2c00      	cmp	r4, #0
    286c:	d09a      	beq.n	27a4 <usb_isr+0xbc>
    286e:	4e38      	ldr	r6, [pc, #224]	; (2950 <usb_isr+0x268>)
					rx &= ~(1<<p);
    2870:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(rx);
    2874:	fa94 f5a4 	rbit	r5, r4
    2878:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    287c:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					rx &= ~(1<<p);
    2880:	fa08 f505 	lsl.w	r5, r8, r5
					run_callbacks(endpoint_queue_head + p * 2);
    2884:	f7ff feb2 	bl	25ec <run_callbacks>
				while(rx) {
    2888:	43ac      	bics	r4, r5
    288a:	d1f3      	bne.n	2874 <usb_isr+0x18c>
    288c:	e78a      	b.n	27a4 <usb_isr+0xbc>
			usb_high_speed = 0;
    288e:	4a34      	ldr	r2, [pc, #208]	; (2960 <usb_isr+0x278>)
    2890:	7013      	strb	r3, [r2, #0]
    2892:	e7b7      	b.n	2804 <usb_isr+0x11c>
	switch (setup.wRequestAndType) {
    2894:	2b80      	cmp	r3, #128	; 0x80
    2896:	f47f af78 	bne.w	278a <usb_isr+0xa2>
		reply_buffer[0] = 0;
    289a:	4834      	ldr	r0, [pc, #208]	; (296c <usb_isr+0x284>)
		endpoint0_transmit(reply_buffer, 2, 0);
    289c:	2102      	movs	r1, #2
		reply_buffer[0] = 0;
    289e:	8005      	strh	r5, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    28a0:	f7ff fec0 	bl	2624 <endpoint0_transmit.constprop.0>
		return;
    28a4:	e775      	b.n	2792 <usb_isr+0xaa>
	switch (setup.wRequestAndType) {
    28a6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    28aa:	f000 810b 	beq.w	2ac4 <usb_isr+0x3dc>
    28ae:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
    28b2:	2b01      	cmp	r3, #1
    28b4:	f63f af69 	bhi.w	278a <usb_isr+0xa2>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    28b8:	4b2d      	ldr	r3, [pc, #180]	; (2970 <usb_isr+0x288>)
    28ba:	685d      	ldr	r5, [r3, #4]
    28bc:	2d00      	cmp	r5, #0
    28be:	f43f af64 	beq.w	278a <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    28c2:	fa1f fc8c 	uxth.w	ip, ip
    28c6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    28ca:	e004      	b.n	28d6 <usb_isr+0x1ee>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    28cc:	691d      	ldr	r5, [r3, #16]
    28ce:	330c      	adds	r3, #12
    28d0:	2d00      	cmp	r5, #0
    28d2:	f43f af5a 	beq.w	278a <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    28d6:	881a      	ldrh	r2, [r3, #0]
    28d8:	4572      	cmp	r2, lr
    28da:	d1f7      	bne.n	28cc <usb_isr+0x1e4>
    28dc:	885a      	ldrh	r2, [r3, #2]
    28de:	4562      	cmp	r2, ip
    28e0:	d1f4      	bne.n	28cc <usb_isr+0x1e4>
				if ((setup.wValue >> 8) == 3) {
    28e2:	ea4f 221e 	mov.w	r2, lr, lsr #8
    28e6:	2a03      	cmp	r2, #3
    28e8:	f000 81a5 	beq.w	2c36 <usb_isr+0x54e>
					datalen = list->length;
    28ec:	891a      	ldrh	r2, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    28ee:	0c00      	lsrs	r0, r0, #16
    28f0:	4282      	cmp	r2, r0
    28f2:	bf28      	it	cs
    28f4:	4602      	movcs	r2, r0
				if (setup.wValue == 0x200) {
    28f6:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    28fa:	f040 81a1 	bne.w	2c40 <usb_isr+0x558>
					if (usb_high_speed) src = usb_config_descriptor_480;
    28fe:	4b18      	ldr	r3, [pc, #96]	; (2960 <usb_isr+0x278>)
    2900:	491c      	ldr	r1, [pc, #112]	; (2974 <usb_isr+0x28c>)
    2902:	7818      	ldrb	r0, [r3, #0]
    2904:	4b1c      	ldr	r3, [pc, #112]	; (2978 <usb_isr+0x290>)
					memcpy(usb_descriptor_buffer, src, datalen);
    2906:	9201      	str	r2, [sp, #4]
    2908:	2800      	cmp	r0, #0
    290a:	bf18      	it	ne
    290c:	4619      	movne	r1, r3
    290e:	481b      	ldr	r0, [pc, #108]	; (297c <usb_isr+0x294>)
    2910:	f7ff fb7e 	bl	2010 <memcpy>
    2914:	4d19      	ldr	r5, [pc, #100]	; (297c <usb_isr+0x294>)
    2916:	9a01      	ldr	r2, [sp, #4]
    2918:	e1e1      	b.n	2cde <usb_isr+0x5f6>
	switch (setup.wRequestAndType) {
    291a:	f242 2121 	movw	r1, #8737	; 0x2221
    291e:	428b      	cmp	r3, r1
    2920:	d07c      	beq.n	2a1c <usb_isr+0x334>
    2922:	d933      	bls.n	298c <usb_isr+0x2a4>
    2924:	f242 3121 	movw	r1, #8993	; 0x2321
    2928:	428b      	cmp	r3, r1
    292a:	f000 8081 	beq.w	2a30 <usb_isr+0x348>
    292e:	f64f 01c0 	movw	r1, #63680	; 0xf8c0
    2932:	428b      	cmp	r3, r1
    2934:	f47f af29 	bne.w	278a <usb_isr+0xa2>
		if ((setup.wIndex & 0xFF00) != 0) break; // 1=Genre, 4=Compat ID, 5=Properties
    2938:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
    293c:	b283      	uxth	r3, r0
    293e:	f47f af24 	bne.w	278a <usb_isr+0xa2>
		setup.wIndex |= 0xEE00; // alter wIndex and treat as normal USB descriptor
    2942:	f443 436e 	orr.w	r3, r3, #60928	; 0xee00
    2946:	f363 0c0f 	bfi	ip, r3, #0, #16
    294a:	e7b5      	b.n	28b8 <usb_isr+0x1d0>
    294c:	402e0000 	.word	0x402e0000
    2950:	20000000 	.word	0x20000000
    2954:	20008de0 	.word	0x20008de0
    2958:	20008e80 	.word	0x20008e80
    295c:	20008e84 	.word	0x20008e84
    2960:	20008ea5 	.word	0x20008ea5
    2964:	20008ea6 	.word	0x20008ea6
    2968:	20008ddc 	.word	0x20008ddc
    296c:	20008e1c 	.word	0x20008e1c
    2970:	20007990 	.word	0x20007990
    2974:	60001eb8 	.word	0x60001eb8
    2978:	60001f1c 	.word	0x60001f1c
    297c:	20200000 	.word	0x20200000
    2980:	20008dd4 	.word	0x20008dd4
    2984:	b8c6cf5d 	.word	0xb8c6cf5d
    2988:	402e01c0 	.word	0x402e01c0
	switch (setup.wRequestAndType) {
    298c:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    2990:	d066      	beq.n	2a60 <usb_isr+0x378>
    2992:	f242 0121 	movw	r1, #8225	; 0x2021
    2996:	428b      	cmp	r3, r1
    2998:	f47f aef7 	bne.w	278a <usb_isr+0xa2>
		if (setup.wLength != 7) break;
    299c:	0c03      	lsrs	r3, r0, #16
    299e:	2b07      	cmp	r3, #7
    29a0:	f47f aef3 	bne.w	278a <usb_isr+0xa2>
		endpoint0_transfer_data.next = 1;
    29a4:	4bb2      	ldr	r3, [pc, #712]	; (2c70 <usb_isr+0x588>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
    29a6:	49b3      	ldr	r1, [pc, #716]	; (2c74 <usb_isr+0x58c>)
		endpoint_queue_head[0].status = 0;
    29a8:	60f5      	str	r5, [r6, #12]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    29aa:	60d9      	str	r1, [r3, #12]
		endpoint0_setupdata.bothwords = setupdata;
    29ac:	49b2      	ldr	r1, [pc, #712]	; (2c78 <usb_isr+0x590>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    29ae:	60b3      	str	r3, [r6, #8]
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    29b0:	f8c3 9008 	str.w	r9, [r3, #8]
		endpoint0_setupdata.bothwords = setupdata;
    29b4:	e9c1 2000 	strd	r2, r0, [r1]
		endpoint0_transfer_data.next = 1;
    29b8:	2201      	movs	r2, #1
    29ba:	601a      	str	r2, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    29bc:	4aaf      	ldr	r2, [pc, #700]	; (2c7c <usb_isr+0x594>)
    29be:	605a      	str	r2, [r3, #4]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    29c0:	4aaf      	ldr	r2, [pc, #700]	; (2c80 <usb_isr+0x598>)
    29c2:	611a      	str	r2, [r3, #16]
		USB1_ENDPTPRIME |= (1<<0);
    29c4:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
    29c8:	f041 0101 	orr.w	r1, r1, #1
    29cc:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.pointer3 = addr + 12288;
    29d0:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    29d4:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    29d8:	6159      	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    29da:	619a      	str	r2, [r3, #24]
		while (USB1_ENDPTPRIME) ;
    29dc:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    29e0:	2b00      	cmp	r3, #0
    29e2:	d1fb      	bne.n	29dc <usb_isr+0x2f4>
	endpoint0_transfer_ack.next = 1;
    29e4:	4aa7      	ldr	r2, [pc, #668]	; (2c84 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    29e6:	64f3      	str	r3, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    29e8:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
    29ea:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    29ec:	64b2      	str	r2, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    29ee:	6013      	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    29f0:	f248 0380 	movw	r3, #32896	; 0x8080
    29f4:	6053      	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    29f6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    29fa:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    29fe:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2a02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    2a06:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    2a0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2a0e:	f8ca 3000 	str.w	r3, [sl]
	while (USB1_ENDPTPRIME) ;
    2a12:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2a16:	2b00      	cmp	r3, #0
    2a18:	d1fb      	bne.n	2a12 <usb_isr+0x32a>
    2a1a:	e6ba      	b.n	2792 <usb_isr+0xaa>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    2a1c:	b280      	uxth	r0, r0
    2a1e:	b938      	cbnz	r0, 2a30 <usb_isr+0x348>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    2a20:	4b99      	ldr	r3, [pc, #612]	; (2c88 <usb_isr+0x5a0>)
			usb_cdc_line_rtsdtr = setup.wValue;
    2a22:	f3c2 4207 	ubfx	r2, r2, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    2a26:	6819      	ldr	r1, [r3, #0]
    2a28:	4b98      	ldr	r3, [pc, #608]	; (2c8c <usb_isr+0x5a4>)
    2a2a:	6019      	str	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    2a2c:	4b98      	ldr	r3, [pc, #608]	; (2c90 <usb_isr+0x5a8>)
    2a2e:	701a      	strb	r2, [r3, #0]
	endpoint0_transfer_ack.next = 1;
    2a30:	4b94      	ldr	r3, [pc, #592]	; (2c84 <usb_isr+0x59c>)
	endpoint0_transfer_ack.pointer0 = 0;
    2a32:	2200      	movs	r2, #0
    2a34:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
    2a36:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    2a38:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    2a3a:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    2a3c:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2a3e:	2280      	movs	r2, #128	; 0x80
    2a40:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    2a42:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    2a46:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2a4a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2a4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    2a52:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    2a56:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2a5a:	2b00      	cmp	r3, #0
    2a5c:	d1fb      	bne.n	2a56 <usb_isr+0x36e>
    2a5e:	e698      	b.n	2792 <usb_isr+0xaa>
		usb_configuration = setup.wValue;
    2a60:	f3c2 4207 	ubfx	r2, r2, #16, #8
    2a64:	4b8b      	ldr	r3, [pc, #556]	; (2c94 <usb_isr+0x5ac>)
    2a66:	701a      	strb	r2, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    2a68:	4b8b      	ldr	r3, [pc, #556]	; (2c98 <usb_isr+0x5b0>)
    2a6a:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    2a6e:	4b8b      	ldr	r3, [pc, #556]	; (2c9c <usb_isr+0x5b4>)
    2a70:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    2a74:	4b8a      	ldr	r3, [pc, #552]	; (2ca0 <usb_isr+0x5b8>)
    2a76:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		usb_serial_configure();
    2a7a:	f000 fbd5 	bl	3228 <usb_serial_configure>
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
    2a7e:	2280      	movs	r2, #128	; 0x80
    2a80:	4629      	mov	r1, r5
    2a82:	4888      	ldr	r0, [pc, #544]	; (2ca4 <usb_isr+0x5bc>)
    2a84:	f003 f910 	bl	5ca8 <memset>
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    2a88:	4b87      	ldr	r3, [pc, #540]	; (2ca8 <usb_isr+0x5c0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2a8a:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    2a8c:	f8c6 b0a0 	str.w	fp, [r6, #160]	; 0xa0
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    2a90:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
	endpoint0_transfer_ack.next = 1;
    2a94:	4b7b      	ldr	r3, [pc, #492]	; (2c84 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    2a96:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2a98:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.next = 1;
    2a9a:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    2a9c:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.pointer0 = 0;
    2a9e:	609d      	str	r5, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    2aa0:	601a      	str	r2, [r3, #0]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    2aa2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    2aa6:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2aaa:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2aae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    2ab2:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    2ab6:	f8ca 5000 	str.w	r5, [sl]
	while (USB1_ENDPTPRIME) ;
    2aba:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2abe:	2b00      	cmp	r3, #0
    2ac0:	d1fb      	bne.n	2aba <usb_isr+0x3d2>
    2ac2:	e666      	b.n	2792 <usb_isr+0xaa>
	endpoint0_transfer_ack.next = 1;
    2ac4:	4b6f      	ldr	r3, [pc, #444]	; (2c84 <usb_isr+0x59c>)
    2ac6:	2101      	movs	r1, #1
	endpoint_queue_head[1].status = 0;
    2ac8:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    2aca:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2acc:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    2ace:	609d      	str	r5, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    2ad0:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2ad2:	6059      	str	r1, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    2ad4:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    2ad8:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2adc:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2ae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    2ae4:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    2ae8:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2aec:	2b00      	cmp	r3, #0
    2aee:	d1fb      	bne.n	2ae8 <usb_isr+0x400>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    2af0:	0c13      	lsrs	r3, r2, #16
    2af2:	065b      	lsls	r3, r3, #25
    2af4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    2af8:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		return;
    2afc:	e649      	b.n	2792 <usb_isr+0xaa>
		reply_buffer[0] = usb_configuration;
    2afe:	4b65      	ldr	r3, [pc, #404]	; (2c94 <usb_isr+0x5ac>)
		endpoint0_transmit(reply_buffer, 1, 0);
    2b00:	2101      	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    2b02:	486a      	ldr	r0, [pc, #424]	; (2cac <usb_isr+0x5c4>)
    2b04:	781b      	ldrb	r3, [r3, #0]
    2b06:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    2b08:	f7ff fd8c 	bl	2624 <endpoint0_transmit.constprop.0>
		return;
    2b0c:	e641      	b.n	2792 <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    2b0e:	b283      	uxth	r3, r0
		if (endpoint > 7) break;
    2b10:	f010 0078 	ands.w	r0, r0, #120	; 0x78
    2b14:	f47f ae39 	bne.w	278a <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    2b18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    2b1c:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
		reply_buffer[0] = 0;
    2b20:	4a62      	ldr	r2, [pc, #392]	; (2cac <usb_isr+0x5c4>)
    2b22:	8010      	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    2b24:	0618      	lsls	r0, r3, #24
    2b26:	f100 809e 	bmi.w	2c66 <usb_isr+0x57e>
    2b2a:	07cb      	lsls	r3, r1, #31
    2b2c:	d501      	bpl.n	2b32 <usb_isr+0x44a>
			reply_buffer[0] = 1;
    2b2e:	2301      	movs	r3, #1
    2b30:	7013      	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    2b32:	2102      	movs	r1, #2
    2b34:	485d      	ldr	r0, [pc, #372]	; (2cac <usb_isr+0x5c4>)
    2b36:	f7ff fd75 	bl	2624 <endpoint0_transmit.constprop.0>
		return;
    2b3a:	e62a      	b.n	2792 <usb_isr+0xaa>
		if (endpoint > 7) break;
    2b3c:	f010 0f78 	tst.w	r0, #120	; 0x78
    2b40:	b283      	uxth	r3, r0
    2b42:	f47f ae22 	bne.w	278a <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    2b46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    2b4a:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    2b4e:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    2b52:	bf14      	ite	ne
    2b54:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    2b58:	f043 0301 	orreq.w	r3, r3, #1
    2b5c:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    2b60:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    2b62:	4b48      	ldr	r3, [pc, #288]	; (2c84 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    2b64:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    2b66:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    2b68:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    2b6a:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    2b6c:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2b6e:	2280      	movs	r2, #128	; 0x80
    2b70:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    2b72:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    2b76:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2b7a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2b7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    2b82:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    2b86:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2b8a:	2b00      	cmp	r3, #0
    2b8c:	d1fb      	bne.n	2b86 <usb_isr+0x49e>
    2b8e:	e600      	b.n	2792 <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    2b90:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    2b94:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    2b98:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    2b9c:	bf14      	ite	ne
    2b9e:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    2ba2:	f023 0301 	biceq.w	r3, r3, #1
    2ba6:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    2baa:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    2bac:	4b35      	ldr	r3, [pc, #212]	; (2c84 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    2bae:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    2bb0:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    2bb2:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    2bb4:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    2bb6:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2bb8:	2280      	movs	r2, #128	; 0x80
    2bba:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    2bbc:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    2bc0:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2bc4:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2bc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    2bcc:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    2bd0:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2bd4:	2b00      	cmp	r3, #0
    2bd6:	d1fb      	bne.n	2bd0 <usb_isr+0x4e8>
    2bd8:	e5db      	b.n	2792 <usb_isr+0xaa>
				endpoint0_notify_mask = 0;
    2bda:	2000      	movs	r0, #0
    2bdc:	6008      	str	r0, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    2bde:	4926      	ldr	r1, [pc, #152]	; (2c78 <usb_isr+0x590>)
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    2be0:	880c      	ldrh	r4, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    2be2:	6848      	ldr	r0, [r1, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    2be4:	f242 0121 	movw	r1, #8225	; 0x2021
    2be8:	428c      	cmp	r4, r1
    2bea:	f47f ae25 	bne.w	2838 <usb_isr+0x150>
    2bee:	b280      	uxth	r0, r0
    2bf0:	2800      	cmp	r0, #0
    2bf2:	f47f ae21 	bne.w	2838 <usb_isr+0x150>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    2bf6:	492e      	ldr	r1, [pc, #184]	; (2cb0 <usb_isr+0x5c8>)
    2bf8:	4c2e      	ldr	r4, [pc, #184]	; (2cb4 <usb_isr+0x5cc>)
    2bfa:	c903      	ldmia	r1, {r0, r1}
    2bfc:	80a1      	strh	r1, [r4, #4]
		if (usb_cdc_line_coding[0] == 134) {
    2bfe:	2886      	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    2c00:	ea4f 4111 	mov.w	r1, r1, lsr #16
    2c04:	6020      	str	r0, [r4, #0]
    2c06:	71a1      	strb	r1, [r4, #6]
		if (usb_cdc_line_coding[0] == 134) {
    2c08:	f47f ae16 	bne.w	2838 <usb_isr+0x150>
	__disable_irq();
    2c0c:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    2c0e:	482a      	ldr	r0, [pc, #168]	; (2cb8 <usb_isr+0x5d0>)
    2c10:	7801      	ldrb	r1, [r0, #0]
    2c12:	f041 0108 	orr.w	r1, r1, #8
    2c16:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    2c18:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    2c1c:	060d      	lsls	r5, r1, #24
    2c1e:	d405      	bmi.n	2c2c <usb_isr+0x544>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    2c20:	2080      	movs	r0, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    2c22:	4301      	orrs	r1, r0
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    2c24:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    2c28:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	__enable_irq();
    2c2c:	b662      	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    2c2e:	4a23      	ldr	r2, [pc, #140]	; (2cbc <usb_isr+0x5d4>)
    2c30:	2150      	movs	r1, #80	; 0x50
    2c32:	7011      	strb	r1, [r2, #0]
    2c34:	e600      	b.n	2838 <usb_isr+0x150>
				if (datalen > setup.wLength) datalen = setup.wLength;
    2c36:	0c00      	lsrs	r0, r0, #16
					datalen = *(list->addr);
    2c38:	782a      	ldrb	r2, [r5, #0]
    2c3a:	4282      	cmp	r2, r0
    2c3c:	bf28      	it	cs
    2c3e:	4602      	movcs	r2, r0
				} else if (setup.wValue == 0x700) {
    2c40:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
    2c44:	d144      	bne.n	2cd0 <usb_isr+0x5e8>
					if (usb_high_speed) src = usb_config_descriptor_12;
    2c46:	4b1e      	ldr	r3, [pc, #120]	; (2cc0 <usb_isr+0x5d8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    2c48:	4d1e      	ldr	r5, [pc, #120]	; (2cc4 <usb_isr+0x5dc>)
					if (usb_high_speed) src = usb_config_descriptor_12;
    2c4a:	7818      	ldrb	r0, [r3, #0]
    2c4c:	491e      	ldr	r1, [pc, #120]	; (2cc8 <usb_isr+0x5e0>)
    2c4e:	4b1f      	ldr	r3, [pc, #124]	; (2ccc <usb_isr+0x5e4>)
					memcpy(usb_descriptor_buffer, src, datalen);
    2c50:	9201      	str	r2, [sp, #4]
    2c52:	2800      	cmp	r0, #0
    2c54:	bf18      	it	ne
    2c56:	4619      	movne	r1, r3
    2c58:	4628      	mov	r0, r5
    2c5a:	f7ff f9d9 	bl	2010 <memcpy>
					usb_descriptor_buffer[1] = 7;
    2c5e:	2307      	movs	r3, #7
    2c60:	706b      	strb	r3, [r5, #1]
    2c62:	9a01      	ldr	r2, [sp, #4]
    2c64:	e03b      	b.n	2cde <usb_isr+0x5f6>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    2c66:	03c9      	lsls	r1, r1, #15
    2c68:	f53f af61 	bmi.w	2b2e <usb_isr+0x446>
    2c6c:	e761      	b.n	2b32 <usb_isr+0x44a>
    2c6e:	bf00      	nop
    2c70:	200086e0 	.word	0x200086e0
    2c74:	20009dd4 	.word	0x20009dd4
    2c78:	20008940 	.word	0x20008940
    2c7c:	00070080 	.word	0x00070080
    2c80:	2000add4 	.word	0x2000add4
    2c84:	200086c0 	.word	0x200086c0
    2c88:	20008e6c 	.word	0x20008e6c
    2c8c:	20008e7c 	.word	0x20008e7c
    2c90:	20008ea3 	.word	0x20008ea3
    2c94:	20008ea4 	.word	0x20008ea4
    2c98:	00cc0002 	.word	0x00cc0002
    2c9c:	000200c8 	.word	0x000200c8
    2ca0:	00c80002 	.word	0x00c80002
    2ca4:	20000080 	.word	0x20000080
    2ca8:	74d59319 	.word	0x74d59319
    2cac:	20008e1c 	.word	0x20008e1c
    2cb0:	20008dd4 	.word	0x20008dd4
    2cb4:	20008e74 	.word	0x20008e74
    2cb8:	20008e9f 	.word	0x20008e9f
    2cbc:	20008ea6 	.word	0x20008ea6
    2cc0:	20008ea5 	.word	0x20008ea5
    2cc4:	20200000 	.word	0x20200000
    2cc8:	60001f1c 	.word	0x60001f1c
    2ccc:	60001eb8 	.word	0x60001eb8
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    2cd0:	4629      	mov	r1, r5
    2cd2:	4d10      	ldr	r5, [pc, #64]	; (2d14 <usb_isr+0x62c>)
    2cd4:	9201      	str	r2, [sp, #4]
    2cd6:	4628      	mov	r0, r5
    2cd8:	f7ff f99a 	bl	2010 <memcpy>
    2cdc:	9a01      	ldr	r2, [sp, #4]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    2cde:	f025 031f 	bic.w	r3, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
    2ce2:	4415      	add	r5, r2
	asm("dsb");
    2ce4:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    2ce8:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    2cec:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    2cf0:	3320      	adds	r3, #32
	} while (location < end_addr);
    2cf2:	429d      	cmp	r5, r3
    2cf4:	d8fa      	bhi.n	2cec <usb_isr+0x604>
	asm("dsb");
    2cf6:	f3bf 8f4f 	dsb	sy
	asm("isb");
    2cfa:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    2cfe:	4805      	ldr	r0, [pc, #20]	; (2d14 <usb_isr+0x62c>)
    2d00:	4611      	mov	r1, r2
    2d02:	f7ff fc8f 	bl	2624 <endpoint0_transmit.constprop.0>
				return;
    2d06:	e544      	b.n	2792 <usb_isr+0xaa>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    2d08:	2003      	movs	r0, #3
    2d0a:	f7ff fcd7 	bl	26bc <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    2d0e:	f00b fdcb 	bl	e8a8 <___reboot_Teensyduino__veneer>
    2d12:	bf00      	nop
    2d14:	20200000 	.word	0x20200000

00002d18 <usb_config_rx>:
{
    2d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2d1c:	461f      	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    2d1e:	1e83      	subs	r3, r0, #2
    2d20:	2b02      	cmp	r3, #2
    2d22:	d901      	bls.n	2d28 <usb_config_rx+0x10>
}
    2d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    2d28:	f8df 904c 	ldr.w	r9, [pc, #76]	; 2d78 <usb_config_rx+0x60>
    2d2c:	4615      	mov	r5, r2
    2d2e:	460c      	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
    2d30:	223c      	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    2d32:	eb09 18c0 	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    2d36:	4606      	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    2d38:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    2d3c:	2100      	movs	r1, #0
    2d3e:	f108 0004 	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    2d42:	0424      	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
    2d44:	f002 ffb0 	bl	5ca8 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    2d48:	fab5 f285 	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
    2d4c:	2301      	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    2d4e:	0952      	lsrs	r2, r2, #5
    2d50:	ea44 7442 	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
    2d54:	f849 400a 	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    2d58:	f8c8 7038 	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    2d5c:	f8c8 3008 	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    2d60:	2f00      	cmp	r7, #0
    2d62:	d0df      	beq.n	2d24 <usb_config_rx+0xc>
    2d64:	4a03      	ldr	r2, [pc, #12]	; (2d74 <usb_config_rx+0x5c>)
    2d66:	40b3      	lsls	r3, r6
    2d68:	6811      	ldr	r1, [r2, #0]
    2d6a:	430b      	orrs	r3, r1
    2d6c:	6013      	str	r3, [r2, #0]
}
    2d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2d72:	bf00      	nop
    2d74:	20008de0 	.word	0x20008de0
    2d78:	20000000 	.word	0x20000000

00002d7c <usb_config_tx>:
{
    2d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2d80:	460d      	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    2d82:	1e81      	subs	r1, r0, #2
    2d84:	2902      	cmp	r1, #2
    2d86:	d901      	bls.n	2d8c <usb_config_tx+0x10>
}
    2d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    2d8c:	01c7      	lsls	r7, r0, #7
    2d8e:	f8df 904c 	ldr.w	r9, [pc, #76]	; 2ddc <usb_config_tx+0x60>
    2d92:	4692      	mov	sl, r2
    2d94:	4604      	mov	r4, r0
    2d96:	3740      	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    2d98:	223c      	movs	r2, #60	; 0x3c
    2d9a:	2100      	movs	r1, #0
    2d9c:	461e      	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    2d9e:	eb09 0807 	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    2da2:	042d      	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
    2da4:	f108 0004 	add.w	r0, r8, #4
    2da8:	f002 ff7e 	bl	5ca8 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    2dac:	faba f28a 	clz	r2, sl
    2db0:	0952      	lsrs	r2, r2, #5
    2db2:	ea45 7242 	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
    2db6:	f849 2007 	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
    2dba:	2201      	movs	r2, #1
	qh->callback_function = callback;
    2dbc:	f8c8 6038 	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    2dc0:	f8c8 2008 	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    2dc4:	2e00      	cmp	r6, #0
    2dc6:	d0df      	beq.n	2d88 <usb_config_tx+0xc>
    2dc8:	4b03      	ldr	r3, [pc, #12]	; (2dd8 <usb_config_tx+0x5c>)
    2dca:	3410      	adds	r4, #16
    2dcc:	6819      	ldr	r1, [r3, #0]
    2dce:	40a2      	lsls	r2, r4
    2dd0:	430a      	orrs	r2, r1
    2dd2:	601a      	str	r2, [r3, #0]
}
    2dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2dd8:	20008de0 	.word	0x20008de0
    2ddc:	20000000 	.word	0x20000000

00002de0 <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    2de0:	0412      	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    2de2:	6081      	str	r1, [r0, #8]
	transfer->callback_param = param;
    2de4:	61c3      	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
    2de6:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
    2dea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
    2dee:	b410      	push	{r4}
	transfer->next = 1;
    2df0:	2401      	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
    2df2:	6042      	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
    2df4:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
    2df8:	6004      	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
    2dfa:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
    2dfe:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
    2e02:	60c4      	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
    2e04:	6181      	str	r1, [r0, #24]
}
    2e06:	f85d 4b04 	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
    2e0a:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
    2e0e:	4770      	bx	lr

00002e10 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    2e10:	1e83      	subs	r3, r0, #2
{
    2e12:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    2e14:	2b02      	cmp	r3, #2
    2e16:	d900      	bls.n	2e1a <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    2e18:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    2e1a:	4b06      	ldr	r3, [pc, #24]	; (2e34 <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
    2e1c:	f100 0110 	add.w	r1, r0, #16
    2e20:	f04f 0c01 	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    2e24:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    2e28:	fa0c f101 	lsl.w	r1, ip, r1
    2e2c:	3040      	adds	r0, #64	; 0x40
    2e2e:	f7ff bb99 	b.w	2564 <schedule_transfer>
    2e32:	bf00      	nop
    2e34:	20000000 	.word	0x20000000

00002e38 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    2e38:	1e83      	subs	r3, r0, #2
{
    2e3a:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    2e3c:	2b02      	cmp	r3, #2
    2e3e:	d900      	bls.n	2e42 <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    2e40:	4770      	bx	lr
	uint32_t mask = 1 << endpoint_number;
    2e42:	2101      	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    2e44:	4b02      	ldr	r3, [pc, #8]	; (2e50 <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
    2e46:	4081      	lsls	r1, r0
    2e48:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    2e4c:	f7ff bb8a 	b.w	2564 <schedule_transfer>
    2e50:	20000000 	.word	0x20000000

00002e54 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    2e54:	6840      	ldr	r0, [r0, #4]
#endif
}
    2e56:	4770      	bx	lr

00002e58 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    2e58:	4a12      	ldr	r2, [pc, #72]	; (2ea4 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    2e5a:	4b13      	ldr	r3, [pc, #76]	; (2ea8 <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    2e5c:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    2e60:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    2e64:	4298      	cmp	r0, r3
{
    2e66:	b510      	push	{r4, lr}
    2e68:	b084      	sub	sp, #16
	if (num < 10000000) num = num * 10;
    2e6a:	d202      	bcs.n	2e72 <usb_init_serialnumber+0x1a>
    2e6c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    2e70:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    2e72:	4c0e      	ldr	r4, [pc, #56]	; (2eac <usb_init_serialnumber+0x54>)
    2e74:	a901      	add	r1, sp, #4
    2e76:	220a      	movs	r2, #10
    2e78:	f7ff f964 	bl	2144 <ultoa>
	for (i=0; i<10; i++) {
    2e7c:	a901      	add	r1, sp, #4
    2e7e:	2300      	movs	r3, #0
    2e80:	4620      	mov	r0, r4
		char c = buf[i];
    2e82:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    2e86:	3301      	adds	r3, #1
		if (!c) break;
    2e88:	b13a      	cbz	r2, 2e9a <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
    2e8a:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    2e8c:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    2e90:	d1f7      	bne.n	2e82 <usb_init_serialnumber+0x2a>
    2e92:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    2e94:	7023      	strb	r3, [r4, #0]
}
    2e96:	b004      	add	sp, #16
    2e98:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    2e9a:	005b      	lsls	r3, r3, #1
    2e9c:	b2db      	uxtb	r3, r3
    2e9e:	7023      	strb	r3, [r4, #0]
}
    2ea0:	b004      	add	sp, #16
    2ea2:	bd10      	pop	{r4, pc}
    2ea4:	401f4400 	.word	0x401f4400
    2ea8:	00989680 	.word	0x00989680
    2eac:	20008224 	.word	0x20008224

00002eb0 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    2eb0:	f000 bad8 	b.w	3464 <usb_serial_flush_input>

00002eb4 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    2eb4:	f000 baa8 	b.w	3408 <usb_serial_peekchar>

00002eb8 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    2eb8:	f000 bb66 	b.w	3588 <usb_serial_flush_output>

00002ebc <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    2ebc:	f000 bb3c 	b.w	3538 <usb_serial_write_buffer_free>

00002ec0 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    2ec0:	4608      	mov	r0, r1
    2ec2:	4611      	mov	r1, r2
    2ec4:	f000 bb2c 	b.w	3520 <usb_serial_write>

00002ec8 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    2ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    2eca:	4c14      	ldr	r4, [pc, #80]	; (2f1c <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    2ecc:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    2ed0:	4e13      	ldr	r6, [pc, #76]	; (2f20 <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    2ed2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    2ed6:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    2eda:	4f12      	ldr	r7, [pc, #72]	; (2f24 <rx_queue_transfer+0x5c>)
    2edc:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
    2ee0:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    2ee2:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    2ee6:	4621      	mov	r1, r4
    2ee8:	883a      	ldrh	r2, [r7, #0]
    2eea:	4630      	mov	r0, r6
    2eec:	f7ff ff78 	bl	2de0 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    2ef0:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    2ef2:	4423      	add	r3, r4
	asm("dsb");
    2ef4:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    2ef8:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    2efc:	3420      	adds	r4, #32
	} while (location < end_addr);
    2efe:	42a3      	cmp	r3, r4
    2f00:	d8fa      	bhi.n	2ef8 <rx_queue_transfer+0x30>
	asm("dsb");
    2f02:	f3bf 8f4f 	dsb	sy
	asm("isb");
    2f06:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    2f0a:	2003      	movs	r0, #3
    2f0c:	4631      	mov	r1, r6
    2f0e:	f7ff ff93 	bl	2e38 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    2f12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    2f16:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
    2f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2f1c:	20200080 	.word	0x20200080
    2f20:	20008700 	.word	0x20008700
    2f24:	20008e90 	.word	0x20008e90

00002f28 <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    2f28:	4b24      	ldr	r3, [pc, #144]	; (2fbc <rx_event+0x94>)
{
    2f2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    2f2e:	881c      	ldrh	r4, [r3, #0]
    2f30:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
    2f32:	69c5      	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    2f34:	f3c3 430e 	ubfx	r3, r3, #16, #15
    2f38:	1ae4      	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    2f3a:	2c00      	cmp	r4, #0
    2f3c:	dd24      	ble.n	2f88 <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
    2f3e:	4920      	ldr	r1, [pc, #128]	; (2fc0 <rx_event+0x98>)
		if (head != rx_tail) {
    2f40:	4820      	ldr	r0, [pc, #128]	; (2fc4 <rx_event+0x9c>)
		uint32_t head = rx_head;
    2f42:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    2f44:	7800      	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    2f46:	b2d3      	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
    2f48:	4e1f      	ldr	r6, [pc, #124]	; (2fc8 <rx_event+0xa0>)
		if (head != rx_tail) {
    2f4a:	4282      	cmp	r2, r0
			uint32_t ii = rx_list[head];
    2f4c:	481f      	ldr	r0, [pc, #124]	; (2fcc <rx_event+0xa4>)
		if (head != rx_tail) {
    2f4e:	d007      	beq.n	2f60 <rx_event+0x38>
			uint32_t ii = rx_list[head];
    2f50:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    2f54:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    2f58:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    2f5c:	4294      	cmp	r4, r2
    2f5e:	d918      	bls.n	2f92 <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    2f60:	3301      	adds	r3, #1
		rx_index[i] = 0;
    2f62:	2200      	movs	r2, #0
		rx_count[i] = len;
    2f64:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    2f68:	2b08      	cmp	r3, #8
		rx_index[i] = 0;
    2f6a:	4e19      	ldr	r6, [pc, #100]	; (2fd0 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    2f6c:	bf88      	it	hi
    2f6e:	4613      	movhi	r3, r2
		rx_index[i] = 0;
    2f70:	f826 2015 	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
    2f74:	bf98      	it	ls
    2f76:	b2da      	uxtbls	r2, r3
		rx_list[head] = i;
    2f78:	54c5      	strb	r5, [r0, r3]
		rx_available += len;
    2f7a:	4b16      	ldr	r3, [pc, #88]	; (2fd4 <rx_event+0xac>)
		rx_head = head;
    2f7c:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    2f7e:	681a      	ldr	r2, [r3, #0]
    2f80:	4414      	add	r4, r2
    2f82:	601c      	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    2f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
    2f88:	4628      	mov	r0, r5
}
    2f8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
    2f8e:	f7ff bf9b 	b.w	2ec8 <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    2f92:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    2f96:	4910      	ldr	r1, [pc, #64]	; (2fd8 <rx_event+0xb0>)
    2f98:	4622      	mov	r2, r4
				rx_count[ii] = count + len;
    2f9a:	4427      	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    2f9c:	4408      	add	r0, r1
    2f9e:	eb01 2145 	add.w	r1, r1, r5, lsl #9
    2fa2:	f7ff f835 	bl	2010 <memcpy>
				rx_available += len;
    2fa6:	4a0b      	ldr	r2, [pc, #44]	; (2fd4 <rx_event+0xac>)
				rx_queue_transfer(i);
    2fa8:	4628      	mov	r0, r5
				rx_count[ii] = count + len;
    2faa:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    2fae:	6813      	ldr	r3, [r2, #0]
    2fb0:	4423      	add	r3, r4
}
    2fb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
    2fb6:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
    2fb8:	f7ff bf86 	b.w	2ec8 <rx_queue_transfer>
    2fbc:	20008e90 	.word	0x20008e90
    2fc0:	20008e9d 	.word	0x20008e9d
    2fc4:	20008e9e 	.word	0x20008e9e
    2fc8:	20008e28 	.word	0x20008e28
    2fcc:	20008e48 	.word	0x20008e48
    2fd0:	20008e38 	.word	0x20008e38
    2fd4:	20008e24 	.word	0x20008e24
    2fd8:	20200080 	.word	0x20200080

00002fdc <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    2fdc:	4b1d      	ldr	r3, [pc, #116]	; (3054 <usb_serial_flush_callback+0x78>)
    2fde:	781a      	ldrb	r2, [r3, #0]
    2fe0:	2a00      	cmp	r2, #0
    2fe2:	d136      	bne.n	3052 <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
    2fe4:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    2fe8:	4a1b      	ldr	r2, [pc, #108]	; (3058 <usb_serial_flush_callback+0x7c>)
    2fea:	7812      	ldrb	r2, [r2, #0]
    2fec:	b38a      	cbz	r2, 3052 <usb_serial_flush_callback+0x76>
{
    2fee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
    2ff2:	4d1a      	ldr	r5, [pc, #104]	; (305c <usb_serial_flush_callback+0x80>)
    2ff4:	882a      	ldrh	r2, [r5, #0]
    2ff6:	b352      	cbz	r2, 304e <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    2ff8:	4e19      	ldr	r6, [pc, #100]	; (3060 <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    2ffa:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    2ffe:	4f19      	ldr	r7, [pc, #100]	; (3064 <usb_serial_flush_callback+0x88>)
    3000:	7832      	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    3002:	4c19      	ldr	r4, [pc, #100]	; (3068 <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    3004:	eb07 1742 	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    3008:	eb04 24c2 	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    300c:	4642      	mov	r2, r8
    300e:	4638      	mov	r0, r7
    3010:	4621      	mov	r1, r4
    3012:	f7ff fee5 	bl	2de0 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    3016:	eb04 0208 	add.w	r2, r4, r8
	asm("dsb");
    301a:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    301e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3022:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    3026:	3420      	adds	r4, #32
	} while (location < end_addr);
    3028:	42a2      	cmp	r2, r4
    302a:	d8fa      	bhi.n	3022 <usb_serial_flush_callback+0x46>
	asm("dsb");
    302c:	f3bf 8f4f 	dsb	sy
	asm("isb");
    3030:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    3034:	2004      	movs	r0, #4
    3036:	4639      	mov	r1, r7
    3038:	f7ff feea 	bl	2e10 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    303c:	7833      	ldrb	r3, [r6, #0]
    303e:	3301      	adds	r3, #1
    3040:	b2db      	uxtb	r3, r3
    3042:	2b03      	cmp	r3, #3
    3044:	bf88      	it	hi
    3046:	2300      	movhi	r3, #0
    3048:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    304a:	2300      	movs	r3, #0
    304c:	802b      	strh	r3, [r5, #0]
}
    304e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3052:	4770      	bx	lr
    3054:	20008ea2 	.word	0x20008ea2
    3058:	20008ea4 	.word	0x20008ea4
    305c:	20008e92 	.word	0x20008e92
    3060:	20008ea1 	.word	0x20008ea1
    3064:	20008800 	.word	0x20008800
    3068:	20201080 	.word	0x20201080

0000306c <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
    306c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3070:	b085      	sub	sp, #20
	while (size > 0) {
    3072:	e9cd 1001 	strd	r1, r0, [sp, #4]
    3076:	2900      	cmp	r1, #0
    3078:	f000 80bf 	beq.w	31fa <usb_serial_write.part.0+0x18e>
	uint32_t sent=0;
    307c:	2300      	movs	r3, #0
    307e:	4c60      	ldr	r4, [pc, #384]	; (3200 <usb_serial_write.part.0+0x194>)
    3080:	f8df 8198 	ldr.w	r8, [pc, #408]	; 321c <usb_serial_write.part.0+0x1b0>
    3084:	f8df a198 	ldr.w	sl, [pc, #408]	; 3220 <usb_serial_write.part.0+0x1b4>
				wait_begin_at = systick_millis_count;
    3088:	4f5e      	ldr	r7, [pc, #376]	; (3204 <usb_serial_write.part.0+0x198>)
	uint32_t sent=0;
    308a:	9300      	str	r3, [sp, #0]
		tx_noautoflush = 1;
    308c:	2301      	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    308e:	4a5e      	ldr	r2, [pc, #376]	; (3208 <usb_serial_write.part.0+0x19c>)
		tx_noautoflush = 1;
    3090:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    3092:	4b5e      	ldr	r3, [pc, #376]	; (320c <usb_serial_write.part.0+0x1a0>)
    3094:	7819      	ldrb	r1, [r3, #0]
		while (!tx_available) {
    3096:	f8b8 3000 	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
    309a:	eb02 1941 	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
    309e:	2b00      	cmp	r3, #0
    30a0:	f040 80a7 	bne.w	31f2 <usb_serial_write.part.0+0x186>
		uint32_t wait_begin_at=0;
    30a4:	461e      	mov	r6, r3
		int waiting=0;
    30a6:	461d      	mov	r5, r3
			tx_noautoflush = 0;
    30a8:	469b      	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
    30aa:	4648      	mov	r0, r9
    30ac:	f7ff fed2 	bl	2e54 <usb_transfer_status>
			if (!(status & 0x80)) {
    30b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    30b4:	f000 808c 	beq.w	31d0 <usb_serial_write.part.0+0x164>
			asm("dsb" ::: "memory");
    30b8:	f3bf 8f4f 	dsb	sy
			if (transmit_previous_timeout) return sent;
    30bc:	f89a 3000 	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
    30c0:	f884 b000 	strb.w	fp, [r4]
			if (!waiting) {
    30c4:	b905      	cbnz	r5, 30c8 <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
    30c6:	683e      	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
    30c8:	2b00      	cmp	r3, #0
    30ca:	d17d      	bne.n	31c8 <usb_serial_write.part.0+0x15c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    30cc:	683b      	ldr	r3, [r7, #0]
    30ce:	1b9b      	subs	r3, r3, r6
    30d0:	2b78      	cmp	r3, #120	; 0x78
    30d2:	f200 8087 	bhi.w	31e4 <usb_serial_write.part.0+0x178>
			if (!usb_configuration) return sent;
    30d6:	4b4e      	ldr	r3, [pc, #312]	; (3210 <usb_serial_write.part.0+0x1a4>)
    30d8:	781b      	ldrb	r3, [r3, #0]
    30da:	2b00      	cmp	r3, #0
    30dc:	d074      	beq.n	31c8 <usb_serial_write.part.0+0x15c>
			yield();
    30de:	f000 fa9d 	bl	361c <yield>
			tx_noautoflush = 1;
    30e2:	2201      	movs	r2, #1
		while (!tx_available) {
    30e4:	f8b8 3000 	ldrh.w	r3, [r8]
    30e8:	4615      	mov	r5, r2
			tx_noautoflush = 1;
    30ea:	7022      	strb	r2, [r4, #0]
		while (!tx_available) {
    30ec:	2b00      	cmp	r3, #0
    30ee:	d0dc      	beq.n	30aa <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    30f0:	4a46      	ldr	r2, [pc, #280]	; (320c <usb_serial_write.part.0+0x1a0>)
    30f2:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    30f6:	7811      	ldrb	r1, [r2, #0]
    30f8:	461a      	mov	r2, r3
    30fa:	eb00 20c1 	add.w	r0, r0, r1, lsl #11
    30fe:	4d45      	ldr	r5, [pc, #276]	; (3214 <usb_serial_write.part.0+0x1a8>)
    3100:	02c9      	lsls	r1, r1, #11
    3102:	4428      	add	r0, r5
		if (size >= tx_available) {
    3104:	9d01      	ldr	r5, [sp, #4]
    3106:	4295      	cmp	r5, r2
    3108:	d217      	bcs.n	313a <usb_serial_write.part.0+0xce>
			memcpy(txdata, data, size);
    310a:	9303      	str	r3, [sp, #12]
    310c:	e9dd 5101 	ldrd	r5, r1, [sp, #4]
    3110:	462a      	mov	r2, r5
    3112:	f7fe ff7d 	bl	2010 <memcpy>
			tx_available -= size;
    3116:	9b03      	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    3118:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
    311c:	1b5b      	subs	r3, r3, r5
    311e:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    3122:	4b3d      	ldr	r3, [pc, #244]	; (3218 <usb_serial_write.part.0+0x1ac>)
    3124:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
    3128:	f3bf 8f4f 	dsb	sy
			sent += size;
    312c:	9800      	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
    312e:	2300      	movs	r3, #0
			sent += size;
    3130:	4428      	add	r0, r5
		tx_noautoflush = 0;
    3132:	7023      	strb	r3, [r4, #0]
}
    3134:	b005      	add	sp, #20
    3136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    313a:	4b36      	ldr	r3, [pc, #216]	; (3214 <usb_serial_write.part.0+0x1a8>)
    313c:	18cd      	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
    313e:	9902      	ldr	r1, [sp, #8]
    3140:	f7fe ff66 	bl	2010 <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    3144:	2300      	movs	r3, #0
    3146:	f44f 6200 	mov.w	r2, #2048	; 0x800
    314a:	4629      	mov	r1, r5
    314c:	4648      	mov	r0, r9
    314e:	f7ff fe47 	bl	2de0 <usb_prepare_transfer>
	asm("dsb");
    3152:	f3bf 8f4f 	dsb	sy
    3156:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    315a:	f505 6300 	add.w	r3, r5, #2048	; 0x800
    315e:	4293      	cmp	r3, r2
    3160:	bf34      	ite	cc
    3162:	2301      	movcc	r3, #1
    3164:	2340      	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    3166:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    316a:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    316e:	f8c2 5f70 	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
    3172:	3520      	adds	r5, #32
	} while (location < end_addr);
    3174:	42ab      	cmp	r3, r5
    3176:	d1fa      	bne.n	316e <usb_serial_write.part.0+0x102>
	asm("dsb");
    3178:	f3bf 8f4f 	dsb	sy
	asm("isb");
    317c:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    3180:	2004      	movs	r0, #4
    3182:	4649      	mov	r1, r9
    3184:	f7ff fe44 	bl	2e10 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    3188:	4a20      	ldr	r2, [pc, #128]	; (320c <usb_serial_write.part.0+0x1a0>)
    318a:	7813      	ldrb	r3, [r2, #0]
    318c:	3301      	adds	r3, #1
    318e:	b2db      	uxtb	r3, r3
    3190:	2b03      	cmp	r3, #3
    3192:	bf84      	itt	hi
    3194:	2300      	movhi	r3, #0
    3196:	4a1d      	ldrhi	r2, [pc, #116]	; (320c <usb_serial_write.part.0+0x1a0>)
    3198:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    319a:	f8b8 3000 	ldrh.w	r3, [r8]
    319e:	9a01      	ldr	r2, [sp, #4]
    31a0:	1ad1      	subs	r1, r2, r3
			sent += tx_available;
    31a2:	9a00      	ldr	r2, [sp, #0]
    31a4:	441a      	add	r2, r3
			size -= tx_available;
    31a6:	9101      	str	r1, [sp, #4]
			sent += tx_available;
    31a8:	9200      	str	r2, [sp, #0]
			data += tx_available;
    31aa:	9a02      	ldr	r2, [sp, #8]
    31ac:	441a      	add	r2, r3
			tx_available = 0;
    31ae:	2300      	movs	r3, #0
			data += tx_available;
    31b0:	9202      	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
    31b2:	4a19      	ldr	r2, [pc, #100]	; (3218 <usb_serial_write.part.0+0x1ac>)
			tx_available = 0;
    31b4:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
    31b8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    31bc:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
    31c0:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
    31c2:	2900      	cmp	r1, #0
    31c4:	f47f af62 	bne.w	308c <usb_serial_write.part.0+0x20>
	return sent;
    31c8:	9800      	ldr	r0, [sp, #0]
}
    31ca:	b005      	add	sp, #20
    31cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
    31d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    31d4:	4b0d      	ldr	r3, [pc, #52]	; (320c <usb_serial_write.part.0+0x1a0>)
				transmit_previous_timeout = 0;
    31d6:	f88a 0000 	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    31da:	7819      	ldrb	r1, [r3, #0]
				break;
    31dc:	4613      	mov	r3, r2
				tx_available = TX_SIZE;
    31de:	f8a8 2000 	strh.w	r2, [r8]
				break;
    31e2:	e78a      	b.n	30fa <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
    31e4:	2301      	movs	r3, #1
				return sent;
    31e6:	9800      	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
    31e8:	f88a 3000 	strb.w	r3, [sl]
}
    31ec:	b005      	add	sp, #20
    31ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    31f2:	461a      	mov	r2, r3
    31f4:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    31f8:	e77f      	b.n	30fa <usb_serial_write.part.0+0x8e>
	while (size > 0) {
    31fa:	9801      	ldr	r0, [sp, #4]
	return sent;
    31fc:	e7e5      	b.n	31ca <usb_serial_write.part.0+0x15e>
    31fe:	bf00      	nop
    3200:	20008ea2 	.word	0x20008ea2
    3204:	20008e6c 	.word	0x20008e6c
    3208:	20008800 	.word	0x20008800
    320c:	20008ea1 	.word	0x20008ea1
    3210:	20008ea4 	.word	0x20008ea4
    3214:	20201080 	.word	0x20201080
    3218:	402e0000 	.word	0x402e0000
    321c:	20008e92 	.word	0x20008e92
    3220:	20008ea0 	.word	0x20008ea0

00003224 <usb_serial_reset>:
}
    3224:	4770      	bx	lr
    3226:	bf00      	nop

00003228 <usb_serial_configure>:
	if (usb_high_speed) {
    3228:	4b2d      	ldr	r3, [pc, #180]	; (32e0 <usb_serial_configure+0xb8>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    322a:	2100      	movs	r1, #0
    322c:	2280      	movs	r2, #128	; 0x80
    322e:	482d      	ldr	r0, [pc, #180]	; (32e4 <usb_serial_configure+0xbc>)
{
    3230:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    3232:	781b      	ldrb	r3, [r3, #0]
	tx_head = 0;
    3234:	2400      	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    3236:	4d2c      	ldr	r5, [pc, #176]	; (32e8 <usb_serial_configure+0xc0>)
	if (usb_high_speed) {
    3238:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
    323a:	4e2c      	ldr	r6, [pc, #176]	; (32ec <usb_serial_configure+0xc4>)
	if (usb_high_speed) {
    323c:	bf0c      	ite	eq
    323e:	2340      	moveq	r3, #64	; 0x40
    3240:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    3244:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    3246:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    3248:	f002 fd2e 	bl	5ca8 <memset>
	tx_head = 0;
    324c:	4a28      	ldr	r2, [pc, #160]	; (32f0 <usb_serial_configure+0xc8>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    324e:	4621      	mov	r1, r4
	tx_available = 0;
    3250:	4b28      	ldr	r3, [pc, #160]	; (32f4 <usb_serial_configure+0xcc>)
	tx_head = 0;
    3252:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    3254:	f44f 7280 	mov.w	r2, #256	; 0x100
    3258:	4827      	ldr	r0, [pc, #156]	; (32f8 <usb_serial_configure+0xd0>)
	tx_available = 0;
    325a:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    325c:	f002 fd24 	bl	5ca8 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    3260:	4a26      	ldr	r2, [pc, #152]	; (32fc <usb_serial_configure+0xd4>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    3262:	2110      	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
    3264:	4b26      	ldr	r3, [pc, #152]	; (3300 <usb_serial_configure+0xd8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    3266:	2002      	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
    3268:	e9c2 4400 	strd	r4, r4, [r2]
    326c:	e9c2 4402 	strd	r4, r4, [r2, #8]
	rx_head = 0;
    3270:	4a24      	ldr	r2, [pc, #144]	; (3304 <usb_serial_configure+0xdc>)
	memset(rx_index, 0, sizeof(rx_index));
    3272:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
    3276:	7014      	strb	r4, [r2, #0]
	rx_available = 0;
    3278:	4a23      	ldr	r2, [pc, #140]	; (3308 <usb_serial_configure+0xe0>)
	memset(rx_index, 0, sizeof(rx_index));
    327a:	e9c3 4402 	strd	r4, r4, [r3, #8]
	rx_tail = 0;
    327e:	4b23      	ldr	r3, [pc, #140]	; (330c <usb_serial_configure+0xe4>)
    3280:	701c      	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    3282:	4623      	mov	r3, r4
	rx_available = 0;
    3284:	6014      	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    3286:	4622      	mov	r2, r4
    3288:	f7ff fd78 	bl	2d7c <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    328c:	4622      	mov	r2, r4
    328e:	8831      	ldrh	r1, [r6, #0]
    3290:	2003      	movs	r0, #3
    3292:	4b1f      	ldr	r3, [pc, #124]	; (3310 <usb_serial_configure+0xe8>)
    3294:	f7ff fd40 	bl	2d18 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    3298:	4623      	mov	r3, r4
    329a:	2201      	movs	r2, #1
    329c:	8829      	ldrh	r1, [r5, #0]
    329e:	2004      	movs	r0, #4
    32a0:	f7ff fd6c 	bl	2d7c <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    32a4:	4620      	mov	r0, r4
    32a6:	3401      	adds	r4, #1
    32a8:	f7ff fe0e 	bl	2ec8 <rx_queue_transfer>
    32ac:	2c08      	cmp	r4, #8
    32ae:	d1f9      	bne.n	32a4 <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
    32b0:	4b18      	ldr	r3, [pc, #96]	; (3314 <usb_serial_configure+0xec>)
    32b2:	2100      	movs	r1, #0
	USB1_GPTIMER0LD = microseconds - 1;
    32b4:	224a      	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
    32b6:	4818      	ldr	r0, [pc, #96]	; (3318 <usb_serial_configure+0xf0>)
    32b8:	4c18      	ldr	r4, [pc, #96]	; (331c <usb_serial_configure+0xf4>)
    32ba:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    32bc:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    32c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    32c4:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    32c8:	4915      	ldr	r1, [pc, #84]	; (3320 <usb_serial_configure+0xf8>)
	USB1_USBINTR |= USB_USBINTR_TIE0;
    32ca:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    32ce:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    32d2:	b121      	cbz	r1, 32de <usb_serial_configure+0xb6>
    32d4:	4a13      	ldr	r2, [pc, #76]	; (3324 <usb_serial_configure+0xfc>)
    32d6:	7813      	ldrb	r3, [r2, #0]
    32d8:	f043 0301 	orr.w	r3, r3, #1
    32dc:	7013      	strb	r3, [r2, #0]
}
    32de:	bd70      	pop	{r4, r5, r6, pc}
    32e0:	20008ea5 	.word	0x20008ea5
    32e4:	20008800 	.word	0x20008800
    32e8:	20008e94 	.word	0x20008e94
    32ec:	20008e90 	.word	0x20008e90
    32f0:	20008ea1 	.word	0x20008ea1
    32f4:	20008e92 	.word	0x20008e92
    32f8:	20008700 	.word	0x20008700
    32fc:	20008e28 	.word	0x20008e28
    3300:	20008e38 	.word	0x20008e38
    3304:	20008e9d 	.word	0x20008e9d
    3308:	20008e24 	.word	0x20008e24
    330c:	20008e9e 	.word	0x20008e9e
    3310:	00002f29 	.word	0x00002f29
    3314:	402e0000 	.word	0x402e0000
    3318:	20008e80 	.word	0x20008e80
    331c:	00002fdd 	.word	0x00002fdd
    3320:	00000000 	.word	0x00000000
    3324:	20008ea7 	.word	0x20008ea7

00003328 <usb_serial_read>:
{
    3328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    332c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3330:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	uint32_t tail = rx_tail;
    3334:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 3400 <usb_serial_read+0xd8>
{
    3338:	b083      	sub	sp, #12
	NVIC_DISABLE_IRQ(IRQ_USB1);
    333a:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	while (count < size && tail != rx_head) {
    333e:	468b      	mov	fp, r1
	uint32_t tail = rx_tail;
    3340:	f89a 4000 	ldrb.w	r4, [sl]
	while (count < size && tail != rx_head) {
    3344:	2900      	cmp	r1, #0
    3346:	d04f      	beq.n	33e8 <usb_serial_read+0xc0>
    3348:	4680      	mov	r8, r0
    334a:	b2e4      	uxtb	r4, r4
	uint32_t count=0;
    334c:	2700      	movs	r7, #0
		uint32_t avail = rx_count[i] - rx_index[i];
    334e:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 3404 <usb_serial_read+0xdc>
	while (count < size && tail != rx_head) {
    3352:	4b26      	ldr	r3, [pc, #152]	; (33ec <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    3354:	ebab 0207 	sub.w	r2, fp, r7
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    3358:	4925      	ldr	r1, [pc, #148]	; (33f0 <usb_serial_read+0xc8>)
	while (count < size && tail != rx_head) {
    335a:	781b      	ldrb	r3, [r3, #0]
    335c:	42a3      	cmp	r3, r4
		if (++tail > RX_NUM) tail = 0;
    335e:	f104 0401 	add.w	r4, r4, #1
	while (count < size && tail != rx_head) {
    3362:	d03f      	beq.n	33e4 <usb_serial_read+0xbc>
		if (++tail > RX_NUM) tail = 0;
    3364:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
    3366:	4b23      	ldr	r3, [pc, #140]	; (33f4 <usb_serial_read+0xcc>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    3368:	4640      	mov	r0, r8
		if (++tail > RX_NUM) tail = 0;
    336a:	bf28      	it	cs
    336c:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    336e:	5d1e      	ldrb	r6, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    3370:	f839 c016 	ldrh.w	ip, [r9, r6, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    3374:	eb0c 2346 	add.w	r3, ip, r6, lsl #9
    3378:	4419      	add	r1, r3
		uint32_t avail = rx_count[i] - rx_index[i];
    337a:	4b1f      	ldr	r3, [pc, #124]	; (33f8 <usb_serial_read+0xd0>)
    337c:	f833 5016 	ldrh.w	r5, [r3, r6, lsl #1]
    3380:	eba5 050c 	sub.w	r5, r5, ip
		if (avail > len) {
    3384:	42aa      	cmp	r2, r5
    3386:	d21c      	bcs.n	33c2 <usb_serial_read+0x9a>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    3388:	eb0c 2c46 	add.w	ip, ip, r6, lsl #9
    338c:	4918      	ldr	r1, [pc, #96]	; (33f0 <usb_serial_read+0xc8>)
			rx_available -= len;
    338e:	4c1b      	ldr	r4, [pc, #108]	; (33fc <usb_serial_read+0xd4>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    3390:	4461      	add	r1, ip
    3392:	9201      	str	r2, [sp, #4]
    3394:	f7fe fe3c 	bl	2010 <memcpy>
			rx_available -= len;
    3398:	6821      	ldr	r1, [r4, #0]
			rx_index[i] += len;
    339a:	f839 5016 	ldrh.w	r5, [r9, r6, lsl #1]
	return count;
    339e:	4658      	mov	r0, fp
			rx_index[i] += len;
    33a0:	9a01      	ldr	r2, [sp, #4]
			rx_available -= len;
    33a2:	eba1 010b 	sub.w	r1, r1, fp
			rx_index[i] += len;
    33a6:	442a      	add	r2, r5
			rx_available -= len;
    33a8:	4439      	add	r1, r7
			rx_index[i] += len;
    33aa:	f829 2016 	strh.w	r2, [r9, r6, lsl #1]
			rx_available -= len;
    33ae:	6021      	str	r1, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
    33b0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    33b4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    33b8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
    33bc:	b003      	add	sp, #12
    33be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    33c2:	462a      	mov	r2, r5
			count += avail;
    33c4:	442f      	add	r7, r5
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    33c6:	f7fe fe23 	bl	2010 <memcpy>
			rx_available -= avail;
    33ca:	490c      	ldr	r1, [pc, #48]	; (33fc <usb_serial_read+0xd4>)
			rx_tail = tail;
    33cc:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    33ce:	4630      	mov	r0, r6
			rx_available -= avail;
    33d0:	680a      	ldr	r2, [r1, #0]
			p += avail;
    33d2:	44a8      	add	r8, r5
			rx_available -= avail;
    33d4:	1b52      	subs	r2, r2, r5
    33d6:	600a      	str	r2, [r1, #0]
			rx_tail = tail;
    33d8:	f88a 3000 	strb.w	r3, [sl]
			rx_queue_transfer(i);
    33dc:	f7ff fd74 	bl	2ec8 <rx_queue_transfer>
	while (count < size && tail != rx_head) {
    33e0:	45bb      	cmp	fp, r7
    33e2:	d8b6      	bhi.n	3352 <usb_serial_read+0x2a>
	return count;
    33e4:	4638      	mov	r0, r7
    33e6:	e7e3      	b.n	33b0 <usb_serial_read+0x88>
	while (count < size && tail != rx_head) {
    33e8:	4608      	mov	r0, r1
    33ea:	e7e1      	b.n	33b0 <usb_serial_read+0x88>
    33ec:	20008e9d 	.word	0x20008e9d
    33f0:	20200080 	.word	0x20200080
    33f4:	20008e48 	.word	0x20008e48
    33f8:	20008e28 	.word	0x20008e28
    33fc:	20008e24 	.word	0x20008e24
    3400:	20008e9e 	.word	0x20008e9e
    3404:	20008e38 	.word	0x20008e38

00003408 <usb_serial_peekchar>:
	if (tail == rx_head) return -1;
    3408:	4b0b      	ldr	r3, [pc, #44]	; (3438 <usb_serial_peekchar+0x30>)
	uint32_t tail = rx_tail;
    340a:	4a0c      	ldr	r2, [pc, #48]	; (343c <usb_serial_peekchar+0x34>)
    340c:	7812      	ldrb	r2, [r2, #0]
	if (tail == rx_head) return -1;
    340e:	7819      	ldrb	r1, [r3, #0]
	uint32_t tail = rx_tail;
    3410:	b2d3      	uxtb	r3, r2
	if (tail == rx_head) return -1;
    3412:	428a      	cmp	r2, r1
    3414:	d00d      	beq.n	3432 <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    3416:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    3418:	4809      	ldr	r0, [pc, #36]	; (3440 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    341a:	4a0a      	ldr	r2, [pc, #40]	; (3444 <usb_serial_peekchar+0x3c>)
	if (++tail > RX_NUM) tail = 0;
    341c:	2b09      	cmp	r3, #9
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    341e:	490a      	ldr	r1, [pc, #40]	; (3448 <usb_serial_peekchar+0x40>)
	if (++tail > RX_NUM) tail = 0;
    3420:	bf28      	it	cs
    3422:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    3424:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    3426:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    342a:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    342e:	5c58      	ldrb	r0, [r3, r1]
    3430:	4770      	bx	lr
	if (tail == rx_head) return -1;
    3432:	f04f 30ff 	mov.w	r0, #4294967295
}
    3436:	4770      	bx	lr
    3438:	20008e9d 	.word	0x20008e9d
    343c:	20008e9e 	.word	0x20008e9e
    3440:	20008e48 	.word	0x20008e48
    3444:	20200080 	.word	0x20200080
    3448:	20008e38 	.word	0x20008e38

0000344c <usb_serial_available>:
	uint32_t n = rx_available;
    344c:	4b04      	ldr	r3, [pc, #16]	; (3460 <usb_serial_available+0x14>)
{
    344e:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
    3450:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
    3452:	b10c      	cbz	r4, 3458 <usb_serial_available+0xc>
}
    3454:	4620      	mov	r0, r4
    3456:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
    3458:	f000 f8e0 	bl	361c <yield>
}
    345c:	4620      	mov	r0, r4
    345e:	bd10      	pop	{r4, pc}
    3460:	20008e24 	.word	0x20008e24

00003464 <usb_serial_flush_input>:
{
    3464:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    3468:	4e14      	ldr	r6, [pc, #80]	; (34bc <usb_serial_flush_input+0x58>)
	while (tail != rx_head) {
    346a:	4d15      	ldr	r5, [pc, #84]	; (34c0 <usb_serial_flush_input+0x5c>)
	uint32_t tail = rx_tail;
    346c:	7833      	ldrb	r3, [r6, #0]
	while (tail != rx_head) {
    346e:	782a      	ldrb	r2, [r5, #0]
    3470:	4293      	cmp	r3, r2
    3472:	d021      	beq.n	34b8 <usb_serial_flush_input+0x54>
    3474:	b2dc      	uxtb	r4, r3
    3476:	f8df 9050 	ldr.w	r9, [pc, #80]	; 34c8 <usb_serial_flush_input+0x64>
    347a:	f8df b050 	ldr.w	fp, [pc, #80]	; 34cc <usb_serial_flush_input+0x68>
    347e:	f8df 8050 	ldr.w	r8, [pc, #80]	; 34d0 <usb_serial_flush_input+0x6c>
    3482:	4f10      	ldr	r7, [pc, #64]	; (34c4 <usb_serial_flush_input+0x60>)
		if (++tail > RX_NUM) tail = 0;
    3484:	3401      	adds	r4, #1
    3486:	2c08      	cmp	r4, #8
		rx_tail = tail;
    3488:	fa5f fa84 	uxtb.w	sl, r4
		if (++tail > RX_NUM) tail = 0;
    348c:	d901      	bls.n	3492 <usb_serial_flush_input+0x2e>
    348e:	2400      	movs	r4, #0
    3490:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    3492:	f819 0004 	ldrb.w	r0, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    3496:	f8db 3000 	ldr.w	r3, [fp]
    349a:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
    349e:	f837 1010 	ldrh.w	r1, [r7, r0, lsl #1]
    34a2:	1a52      	subs	r2, r2, r1
    34a4:	1a9b      	subs	r3, r3, r2
    34a6:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    34aa:	f7ff fd0d 	bl	2ec8 <rx_queue_transfer>
		rx_tail = tail;
    34ae:	f886 a000 	strb.w	sl, [r6]
	while (tail != rx_head) {
    34b2:	782b      	ldrb	r3, [r5, #0]
    34b4:	42a3      	cmp	r3, r4
    34b6:	d1e5      	bne.n	3484 <usb_serial_flush_input+0x20>
}
    34b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    34bc:	20008e9e 	.word	0x20008e9e
    34c0:	20008e9d 	.word	0x20008e9d
    34c4:	20008e38 	.word	0x20008e38
    34c8:	20008e48 	.word	0x20008e48
    34cc:	20008e24 	.word	0x20008e24
    34d0:	20008e28 	.word	0x20008e28

000034d4 <usb_serial_getchar>:
{
    34d4:	b500      	push	{lr}
    34d6:	b083      	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
    34d8:	2101      	movs	r1, #1
    34da:	f10d 0007 	add.w	r0, sp, #7
    34de:	f7ff ff23 	bl	3328 <usb_serial_read>
    34e2:	b120      	cbz	r0, 34ee <usb_serial_getchar+0x1a>
    34e4:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
    34e8:	b003      	add	sp, #12
    34ea:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
    34ee:	f04f 30ff 	mov.w	r0, #4294967295
    34f2:	e7f9      	b.n	34e8 <usb_serial_getchar+0x14>

000034f4 <usb_serial_putchar>:
	if (!usb_configuration) return 0;
    34f4:	4b09      	ldr	r3, [pc, #36]	; (351c <usb_serial_putchar+0x28>)
{
    34f6:	b500      	push	{lr}
    34f8:	b083      	sub	sp, #12
	if (!usb_configuration) return 0;
    34fa:	781b      	ldrb	r3, [r3, #0]
{
    34fc:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!usb_configuration) return 0;
    3500:	b13b      	cbz	r3, 3512 <usb_serial_putchar+0x1e>
    3502:	2101      	movs	r1, #1
    3504:	f10d 0007 	add.w	r0, sp, #7
    3508:	f7ff fdb0 	bl	306c <usb_serial_write.part.0>
}
    350c:	b003      	add	sp, #12
    350e:	f85d fb04 	ldr.w	pc, [sp], #4
    3512:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    3516:	b003      	add	sp, #12
    3518:	f85d fb04 	ldr.w	pc, [sp], #4
    351c:	20008ea4 	.word	0x20008ea4

00003520 <usb_serial_write>:
	if (!usb_configuration) return 0;
    3520:	4b04      	ldr	r3, [pc, #16]	; (3534 <usb_serial_write+0x14>)
    3522:	781b      	ldrb	r3, [r3, #0]
    3524:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    3528:	b10b      	cbz	r3, 352e <usb_serial_write+0xe>
    352a:	f7ff bd9f 	b.w	306c <usb_serial_write.part.0>
}
    352e:	4610      	mov	r0, r2
    3530:	4770      	bx	lr
    3532:	bf00      	nop
    3534:	20008ea4 	.word	0x20008ea4

00003538 <usb_serial_write_buffer_free>:
{
    3538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    353c:	2400      	movs	r4, #0
	tx_noautoflush = 1;
    353e:	f8df 8044 	ldr.w	r8, [pc, #68]	; 3584 <usb_serial_write_buffer_free+0x4c>
    3542:	2301      	movs	r3, #1
    3544:	4d0d      	ldr	r5, [pc, #52]	; (357c <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    3546:	4627      	mov	r7, r4
    3548:	4e0d      	ldr	r6, [pc, #52]	; (3580 <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
    354a:	f888 3000 	strb.w	r3, [r8]
		if (i == tx_head) continue;
    354e:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    3550:	4628      	mov	r0, r5
	for (uint32_t i=0; i < TX_NUM; i++) {
    3552:	3520      	adds	r5, #32
		if (i == tx_head) continue;
    3554:	42a3      	cmp	r3, r4
	for (uint32_t i=0; i < TX_NUM; i++) {
    3556:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    355a:	d005      	beq.n	3568 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    355c:	f7ff fc7a 	bl	2e54 <usb_transfer_status>
    3560:	0603      	lsls	r3, r0, #24
    3562:	bf58      	it	pl
    3564:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    3568:	2c04      	cmp	r4, #4
    356a:	d1f0      	bne.n	354e <usb_serial_write_buffer_free+0x16>
	asm("dsb" ::: "memory");
    356c:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    3570:	2300      	movs	r3, #0
}
    3572:	4638      	mov	r0, r7
	tx_noautoflush = 0;
    3574:	f888 3000 	strb.w	r3, [r8]
}
    3578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    357c:	20008800 	.word	0x20008800
    3580:	20008ea1 	.word	0x20008ea1
    3584:	20008ea2 	.word	0x20008ea2

00003588 <usb_serial_flush_output>:
{
    3588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    358c:	4b1d      	ldr	r3, [pc, #116]	; (3604 <usb_serial_flush_output+0x7c>)
    358e:	781b      	ldrb	r3, [r3, #0]
    3590:	b113      	cbz	r3, 3598 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    3592:	4d1d      	ldr	r5, [pc, #116]	; (3608 <usb_serial_flush_output+0x80>)
    3594:	882a      	ldrh	r2, [r5, #0]
    3596:	b90a      	cbnz	r2, 359c <usb_serial_flush_output+0x14>
}
    3598:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	transfer_t *xfer = tx_transfer + tx_head;
    359c:	4e1b      	ldr	r6, [pc, #108]	; (360c <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    359e:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    35a2:	491b      	ldr	r1, [pc, #108]	; (3610 <usb_serial_flush_output+0x88>)
    35a4:	7833      	ldrb	r3, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    35a6:	464a      	mov	r2, r9
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    35a8:	4c1a      	ldr	r4, [pc, #104]	; (3614 <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    35aa:	eb01 1843 	add.w	r8, r1, r3, lsl #5
	tx_noautoflush = 1;
    35ae:	4f1a      	ldr	r7, [pc, #104]	; (3618 <usb_serial_flush_output+0x90>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    35b0:	eb04 24c3 	add.w	r4, r4, r3, lsl #11
	tx_noautoflush = 1;
    35b4:	2301      	movs	r3, #1
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    35b6:	4640      	mov	r0, r8
	tx_noautoflush = 1;
    35b8:	703b      	strb	r3, [r7, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    35ba:	4621      	mov	r1, r4
    35bc:	2300      	movs	r3, #0
    35be:	f7ff fc0f 	bl	2de0 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    35c2:	eb04 0209 	add.w	r2, r4, r9
	asm("dsb");
    35c6:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    35ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    35ce:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    35d2:	3420      	adds	r4, #32
	} while (location < end_addr);
    35d4:	42a2      	cmp	r2, r4
    35d6:	d8fa      	bhi.n	35ce <usb_serial_flush_output+0x46>
	asm("dsb");
    35d8:	f3bf 8f4f 	dsb	sy
	asm("isb");
    35dc:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    35e0:	2004      	movs	r0, #4
    35e2:	4641      	mov	r1, r8
    35e4:	f7ff fc14 	bl	2e10 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    35e8:	7833      	ldrb	r3, [r6, #0]
    35ea:	3301      	adds	r3, #1
    35ec:	b2db      	uxtb	r3, r3
    35ee:	2b03      	cmp	r3, #3
    35f0:	bf88      	it	hi
    35f2:	2300      	movhi	r3, #0
    35f4:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    35f6:	2300      	movs	r3, #0
    35f8:	802b      	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
    35fa:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    35fe:	703b      	strb	r3, [r7, #0]
}
    3600:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3604:	20008ea4 	.word	0x20008ea4
    3608:	20008e92 	.word	0x20008e92
    360c:	20008ea1 	.word	0x20008ea1
    3610:	20008800 	.word	0x20008800
    3614:	20201080 	.word	0x20201080
    3618:	20008ea2 	.word	0x20008ea2

0000361c <yield>:
uint8_t yield_active_check_flags = 0;


void yield(void) __attribute__ ((weak));
void yield(void)
{
    361c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t check_flags = yield_active_check_flags;
    3620:	4b2d      	ldr	r3, [pc, #180]	; (36d8 <yield+0xbc>)
    3622:	781e      	ldrb	r6, [r3, #0]
	if (!check_flags) return;	// nothing to do
    3624:	b166      	cbz	r6, 3640 <yield+0x24>

	// TODO: do nothing if called from interrupt

	static uint8_t running=0;
	if (running) return; // TODO: does this need to be atomic?
    3626:	4f2d      	ldr	r7, [pc, #180]	; (36dc <yield+0xc0>)
    3628:	783b      	ldrb	r3, [r7, #0]
    362a:	b94b      	cbnz	r3, 3640 <yield+0x24>
	running = 1;
    362c:	2301      	movs	r3, #1

	// USB Serial - Add hack to minimize impact...
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    362e:	07f1      	lsls	r1, r6, #31
	running = 1;
    3630:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    3632:	d443      	bmi.n	36bc <yield+0xa0>
		if (SerialUSB2.available()) serialEventUSB2();
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    3634:	07b2      	lsls	r2, r6, #30
    3636:	d426      	bmi.n	3686 <yield+0x6a>
		HardwareSerialIMXRT::processSerialEventsList();
	}

	running = 0;
    3638:	2300      	movs	r3, #0
    363a:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_EVENT_RESPONDER) {
    363c:	0773      	lsls	r3, r6, #29
    363e:	d401      	bmi.n	3644 <yield+0x28>
		EventResponder::runFromYield();
	}
};
    3640:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    3644:	4b26      	ldr	r3, [pc, #152]	; (36e0 <yield+0xc4>)
    3646:	681a      	ldr	r2, [r3, #0]
    3648:	2a00      	cmp	r2, #0
    364a:	d0f9      	beq.n	3640 <yield+0x24>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    364c:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    3650:	2a00      	cmp	r2, #0
    3652:	d1f5      	bne.n	3640 <yield+0x24>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3654:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    3658:	b672      	cpsid	i
		EventResponder *first = firstYield;
    365a:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    365c:	2800      	cmp	r0, #0
    365e:	d034      	beq.n	36ca <yield+0xae>
		if (runningFromYield) {
    3660:	4c20      	ldr	r4, [pc, #128]	; (36e4 <yield+0xc8>)
    3662:	7821      	ldrb	r1, [r4, #0]
    3664:	2900      	cmp	r1, #0
    3666:	d130      	bne.n	36ca <yield+0xae>
		runningFromYield = true;
    3668:	2201      	movs	r2, #1
    366a:	7022      	strb	r2, [r4, #0]
		firstYield = first->_next;
    366c:	6942      	ldr	r2, [r0, #20]
    366e:	601a      	str	r2, [r3, #0]
		if (firstYield) {
    3670:	2a00      	cmp	r2, #0
    3672:	d02e      	beq.n	36d2 <yield+0xb6>
			firstYield->_prev = nullptr;
    3674:	6191      	str	r1, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3676:	b905      	cbnz	r5, 367a <yield+0x5e>
    3678:	b662      	cpsie	i
		first->_triggered = false;
    367a:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    367c:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    367e:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    3680:	4798      	blx	r3
		runningFromYield = false;
    3682:	7025      	strb	r5, [r4, #0]
    3684:	e7dc      	b.n	3640 <yield+0x24>

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    3686:	f8df 8064 	ldr.w	r8, [pc, #100]	; 36ec <yield+0xd0>
    368a:	f898 3000 	ldrb.w	r3, [r8]
    368e:	2b00      	cmp	r3, #0
    3690:	d0d2      	beq.n	3638 <yield+0x1c>
    3692:	2500      	movs	r5, #0
    3694:	f8df 9058 	ldr.w	r9, [pc, #88]	; 36f0 <yield+0xd4>
    3698:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    369a:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    369e:	3501      	adds	r5, #1
	static HardwareSerialIMXRT 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    36a0:	6823      	ldr	r3, [r4, #0]
    36a2:	4620      	mov	r0, r4
    36a4:	691b      	ldr	r3, [r3, #16]
    36a6:	4798      	blx	r3
    36a8:	b110      	cbz	r0, 36b0 <yield+0x94>
    36aa:	6963      	ldr	r3, [r4, #20]
    36ac:	689b      	ldr	r3, [r3, #8]
    36ae:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    36b0:	f898 2000 	ldrb.w	r2, [r8]
    36b4:	b2eb      	uxtb	r3, r5
    36b6:	429a      	cmp	r2, r3
    36b8:	d8ef      	bhi.n	369a <yield+0x7e>
    36ba:	e7bd      	b.n	3638 <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    36bc:	f7ff fec6 	bl	344c <usb_serial_available>
		if (Serial.available()) serialEvent();
    36c0:	2800      	cmp	r0, #0
    36c2:	d0b7      	beq.n	3634 <yield+0x18>
    36c4:	f3af 8000 	nop.w
    36c8:	e7b4      	b.n	3634 <yield+0x18>
		if (doit) __enable_irq();
    36ca:	2d00      	cmp	r5, #0
    36cc:	d1b8      	bne.n	3640 <yield+0x24>
    36ce:	b662      	cpsie	i
    36d0:	e7b6      	b.n	3640 <yield+0x24>
			lastYield = nullptr;
    36d2:	4b05      	ldr	r3, [pc, #20]	; (36e8 <yield+0xcc>)
    36d4:	601a      	str	r2, [r3, #0]
    36d6:	e7ce      	b.n	3676 <yield+0x5a>
    36d8:	20008ea7 	.word	0x20008ea7
    36dc:	20008e9a 	.word	0x20008e9a
    36e0:	200089b4 	.word	0x200089b4
    36e4:	20008e97 	.word	0x20008e97
    36e8:	200089c0 	.word	0x200089c0
    36ec:	20008e98 	.word	0x20008e98
    36f0:	200089c4 	.word	0x200089c4

000036f4 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    36f4:	b570      	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    36f6:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    36fa:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    36fc:	4c0c      	ldr	r4, [pc, #48]	; (3730 <EventResponder::runFromInterrupt()+0x3c>)
    36fe:	6820      	ldr	r0, [r4, #0]
		if (first) {
    3700:	b180      	cbz	r0, 3724 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    3702:	4e0c      	ldr	r6, [pc, #48]	; (3734 <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    3704:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    3706:	6943      	ldr	r3, [r0, #20]
    3708:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    370a:	b173      	cbz	r3, 372a <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    370c:	619d      	str	r5, [r3, #24]
		if (doit) __enable_irq();
    370e:	b902      	cbnz	r2, 3712 <EventResponder::runFromInterrupt()+0x1e>
    3710:	b662      	cpsie	i
			}
			enableInterrupts(irq);
			first->_triggered = false;
			(*(first->_function))(*first);
    3712:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    3714:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    3716:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3718:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    371c:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    371e:	6820      	ldr	r0, [r4, #0]
		if (first) {
    3720:	2800      	cmp	r0, #0
    3722:	d1f0      	bne.n	3706 <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    3724:	b902      	cbnz	r2, 3728 <EventResponder::runFromInterrupt()+0x34>
    3726:	b662      	cpsie	i
		} else {
			enableInterrupts(irq);
			break;
		}
	}
}
    3728:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    372a:	6033      	str	r3, [r6, #0]
    372c:	e7ef      	b.n	370e <EventResponder::runFromInterrupt()+0x1a>
    372e:	bf00      	nop
    3730:	200089bc 	.word	0x200089bc
    3734:	200089b8 	.word	0x200089b8

00003738 <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    3738:	f7ff bfdc 	b.w	36f4 <EventResponder::runFromInterrupt()>

0000373c <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    373c:	4904      	ldr	r1, [pc, #16]	; (3750 <systick_isr+0x14>)
	systick_millis_count++;
    373e:	4a05      	ldr	r2, [pc, #20]	; (3754 <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
    3740:	6849      	ldr	r1, [r1, #4]
    3742:	4b05      	ldr	r3, [pc, #20]	; (3758 <systick_isr+0x1c>)
    3744:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    3746:	6813      	ldr	r3, [r2, #0]
    3748:	3301      	adds	r3, #1
    374a:	6013      	str	r3, [r2, #0]
}
    374c:	4770      	bx	lr
    374e:	bf00      	nop
    3750:	e0001000 	.word	0xe0001000
    3754:	20008e6c 	.word	0x20008e6c
    3758:	20008e68 	.word	0x20008e68

0000375c <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    375c:	49a2      	ldr	r1, [pc, #648]	; (39e8 <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    375e:	4ba3      	ldr	r3, [pc, #652]	; (39ec <set_arm_clock+0x290>)
	if (frequency > 528000000) {
    3760:	4288      	cmp	r0, r1
{
    3762:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
    3766:	4ca2      	ldr	r4, [pc, #648]	; (39f0 <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    3768:	695e      	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    376a:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    376c:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
    3770:	d91b      	bls.n	37aa <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    3772:	4ba0      	ldr	r3, [pc, #640]	; (39f4 <set_arm_clock+0x298>)
    3774:	4298      	cmp	r0, r3
    3776:	f240 8102 	bls.w	397e <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    377a:	1ac3      	subs	r3, r0, r3
    377c:	499e      	ldr	r1, [pc, #632]	; (39f8 <set_arm_clock+0x29c>)
    377e:	0a1b      	lsrs	r3, r3, #8
    3780:	fba1 1303 	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    3784:	f240 6127 	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    3788:	09db      	lsrs	r3, r3, #7
    378a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    378e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3792:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    3796:	428b      	cmp	r3, r1
    3798:	bf28      	it	cs
    379a:	460b      	movcs	r3, r1
    379c:	f5a3 7748 	sub.w	r7, r3, #800	; 0x320
    37a0:	4b96      	ldr	r3, [pc, #600]	; (39fc <set_arm_clock+0x2a0>)
    37a2:	fba3 3707 	umull	r3, r7, r3, r7
    37a6:	08ff      	lsrs	r7, r7, #3
    37a8:	e004      	b.n	37b4 <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
    37aa:	4f95      	ldr	r7, [pc, #596]	; (3a00 <set_arm_clock+0x2a4>)
    37ac:	42b8      	cmp	r0, r7
    37ae:	bf8c      	ite	hi
    37b0:	270e      	movhi	r7, #14
    37b2:	2706      	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    37b4:	498d      	ldr	r1, [pc, #564]	; (39ec <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    37b6:	f008 091f 	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    37ba:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    37be:	45b9      	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    37c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    37c4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    37c8:	d20c      	bcs.n	37e4 <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    37ca:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    37ce:	f5a1 21f8 	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    37d2:	ea48 0807 	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
    37d6:	f8c1 800c 	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    37da:	680b      	ldr	r3, [r1, #0]
    37dc:	2b00      	cmp	r3, #0
    37de:	dafc      	bge.n	37da <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    37e0:	f008 091f 	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    37e4:	f016 7300 	ands.w	r3, r6, #33554432	; 0x2000000
    37e8:	d124      	bne.n	3834 <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    37ea:	4986      	ldr	r1, [pc, #536]	; (3a04 <set_arm_clock+0x2a8>)
    37ec:	690c      	ldr	r4, [r1, #16]
    37ee:	4986      	ldr	r1, [pc, #536]	; (3a08 <set_arm_clock+0x2ac>)
    37f0:	43a1      	bics	r1, r4
    37f2:	f000 80ea 	beq.w	39ca <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    37f6:	f482 5180 	eor.w	r1, r2, #4096	; 0x1000
    37fa:	4634      	mov	r4, r6
    37fc:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    3800:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    3804:	d004      	beq.n	3810 <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    3806:	f026 5660 	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    380a:	431e      	orrs	r6, r3
			CCM_CBCDR = cbcdr;
    380c:	4b77      	ldr	r3, [pc, #476]	; (39ec <set_arm_clock+0x290>)
    380e:	615e      	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    3810:	f411 5f40 	tst.w	r1, #12288	; 0x3000
    3814:	d007      	beq.n	3826 <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    3816:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
    381a:	4974      	ldr	r1, [pc, #464]	; (39ec <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    381c:	432a      	orrs	r2, r5
			CCM_CBCMR = cbcmr;
    381e:	618a      	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    3820:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    3822:	071a      	lsls	r2, r3, #28
    3824:	d4fc      	bmi.n	3820 <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    3826:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    382a:	4a70      	ldr	r2, [pc, #448]	; (39ec <set_arm_clock+0x290>)
    382c:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    382e:	6c93      	ldr	r3, [r2, #72]	; 0x48
    3830:	069b      	lsls	r3, r3, #26
    3832:	d4fc      	bmi.n	382e <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
    3834:	4c75      	ldr	r4, [pc, #468]	; (3a0c <set_arm_clock+0x2b0>)
    3836:	42a0      	cmp	r0, r4
    3838:	f200 80ce 	bhi.w	39d8 <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
    383c:	f04f 0c01 	mov.w	ip, #1
    3840:	4601      	mov	r1, r0
	uint32_t div_arm = 1;
    3842:	4663      	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
    3844:	fb03 1201 	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
    3848:	f103 0e01 	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
    384c:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    3850:	42a2      	cmp	r2, r4
    3852:	d818      	bhi.n	3886 <set_arm_clock+0x12a>
		if (div_arm < 8) {
    3854:	f1be 0f08 	cmp.w	lr, #8
				div_arm = 1;
    3858:	f04f 0301 	mov.w	r3, #1
		if (div_arm < 8) {
    385c:	f040 808d 	bne.w	397a <set_arm_clock+0x21e>
			if (div_ahb < 5) {
    3860:	f1bc 0f04 	cmp.w	ip, #4
    3864:	f200 8091 	bhi.w	398a <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
    3868:	180a      	adds	r2, r1, r0
    386a:	42a2      	cmp	r2, r4
    386c:	f200 80a4 	bhi.w	39b8 <set_arm_clock+0x25c>
    3870:	fb05 f100 	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
    3874:	46ac      	mov	ip, r5
			div_arm = div_arm + 1;
    3876:	f103 0e01 	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    387a:	fb03 1201 	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
    387e:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    3882:	42a2      	cmp	r2, r4
    3884:	d9e6      	bls.n	3854 <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    3886:	f10c 31ff 	add.w	r1, ip, #4294967295
    388a:	028c      	lsls	r4, r1, #10
    388c:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    3890:	485f      	ldr	r0, [pc, #380]	; (3a10 <set_arm_clock+0x2b4>)
    3892:	4410      	add	r0, r2
	if (mult > 108) mult = 108;
    3894:	4a5f      	ldr	r2, [pc, #380]	; (3a14 <set_arm_clock+0x2b8>)
    3896:	4290      	cmp	r0, r2
    3898:	d97f      	bls.n	399a <set_arm_clock+0x23e>
    389a:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 3a40 <set_arm_clock+0x2e4>
    389e:	226c      	movs	r2, #108	; 0x6c
    38a0:	485d      	ldr	r0, [pc, #372]	; (3a18 <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    38a2:	4d58      	ldr	r5, [pc, #352]	; (3a04 <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    38a4:	fbb0 f0fe 	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    38a8:	f8d5 e000 	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
    38ac:	fbb0 f0fc 	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    38b0:	f8df c190 	ldr.w	ip, [pc, #400]	; 3a44 <set_arm_clock+0x2e8>
    38b4:	ea0e 0c0c 	and.w	ip, lr, ip
    38b8:	45d4      	cmp	ip, sl
    38ba:	d009      	beq.n	38d0 <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    38bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    38c0:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    38c4:	f8c5 c000 	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    38c8:	602a      	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    38ca:	682a      	ldr	r2, [r5, #0]
    38cc:	2a00      	cmp	r2, #0
    38ce:	dafc      	bge.n	38ca <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    38d0:	4a46      	ldr	r2, [pc, #280]	; (39ec <set_arm_clock+0x290>)
    38d2:	6915      	ldr	r5, [r2, #16]
    38d4:	f005 0507 	and.w	r5, r5, #7
    38d8:	429d      	cmp	r5, r3
    38da:	d003      	beq.n	38e4 <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    38dc:	6113      	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    38de:	6c93      	ldr	r3, [r2, #72]	; 0x48
    38e0:	03dd      	lsls	r5, r3, #15
    38e2:	d4fc      	bmi.n	38de <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    38e4:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
    38e8:	d009      	beq.n	38fe <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    38ea:	f426 56e0 	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    38ee:	f404 54e0 	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
    38f2:	4a3e      	ldr	r2, [pc, #248]	; (39ec <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    38f4:	4326      	orrs	r6, r4
		CCM_CBCDR = cbcdr;
    38f6:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    38f8:	6c93      	ldr	r3, [r2, #72]	; 0x48
    38fa:	0799      	lsls	r1, r3, #30
    38fc:	d4fc      	bmi.n	38f8 <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    38fe:	4947      	ldr	r1, [pc, #284]	; (3a1c <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
    3900:	4a47      	ldr	r2, [pc, #284]	; (3a20 <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    3902:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    3904:	4291      	cmp	r1, r2
    3906:	d83c      	bhi.n	3982 <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    3908:	4b46      	ldr	r3, [pc, #280]	; (3a24 <set_arm_clock+0x2c8>)
    390a:	09c9      	lsrs	r1, r1, #7
    390c:	fba3 3101 	umull	r3, r1, r3, r1
    3910:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    3912:	1e4b      	subs	r3, r1, #1
    3914:	021b      	lsls	r3, r3, #8
    3916:	ea86 0203 	eor.w	r2, r6, r3
    391a:	f412 7f40 	tst.w	r2, #768	; 0x300
    391e:	d006      	beq.n	392e <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    3920:	f426 7640 	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    3924:	f403 7340 	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
    3928:	4a30      	ldr	r2, [pc, #192]	; (39ec <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    392a:	4333      	orrs	r3, r6
		CCM_CBCDR = cbcdr;
    392c:	6153      	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    392e:	4a2f      	ldr	r2, [pc, #188]	; (39ec <set_arm_clock+0x290>)
    3930:	6953      	ldr	r3, [r2, #20]
    3932:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
    3936:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    3938:	6c93      	ldr	r3, [r2, #72]	; 0x48
    393a:	069b      	lsls	r3, r3, #26
    393c:	d4fc      	bmi.n	3938 <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    393e:	4b3a      	ldr	r3, [pc, #232]	; (3a28 <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    3940:	454f      	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    3942:	fba3 2300 	umull	r2, r3, r3, r0
    3946:	f04f 32ff 	mov.w	r2, #4294967295
    394a:	ea4f 4393 	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
    394e:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    3952:	fbb2 f3f3 	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
    3956:	4a35      	ldr	r2, [pc, #212]	; (3a2c <set_arm_clock+0x2d0>)
    3958:	6010      	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    395a:	4a35      	ldr	r2, [pc, #212]	; (3a30 <set_arm_clock+0x2d4>)
    395c:	6011      	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    395e:	4a35      	ldr	r2, [pc, #212]	; (3a34 <set_arm_clock+0x2d8>)
    3960:	6013      	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    3962:	d208      	bcs.n	3976 <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    3964:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    3968:	4a21      	ldr	r2, [pc, #132]	; (39f0 <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    396a:	ea48 0707 	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
    396e:	60d7      	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    3970:	6813      	ldr	r3, [r2, #0]
    3972:	2b00      	cmp	r3, #0
    3974:	dafc      	bge.n	3970 <set_arm_clock+0x214>
	}

	return frequency;
}
    3976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    397a:	4673      	mov	r3, lr
    397c:	e762      	b.n	3844 <set_arm_clock+0xe8>
    397e:	2712      	movs	r7, #18
    3980:	e718      	b.n	37b4 <set_arm_clock+0x58>
    3982:	f44f 7340 	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
    3986:	2104      	movs	r1, #4
    3988:	e7c5      	b.n	3916 <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    398a:	f10c 31ff 	add.w	r1, ip, #4294967295
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    398e:	4820      	ldr	r0, [pc, #128]	; (3a10 <set_arm_clock+0x2b4>)
    3990:	2307      	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    3992:	028c      	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    3994:	4410      	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    3996:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    399a:	4a27      	ldr	r2, [pc, #156]	; (3a38 <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    399c:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 3a48 <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    39a0:	fba2 2000 	umull	r2, r0, r2, r0
    39a4:	0d02      	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
    39a6:	4825      	ldr	r0, [pc, #148]	; (3a3c <set_arm_clock+0x2e0>)
    39a8:	2a36      	cmp	r2, #54	; 0x36
    39aa:	bf38      	it	cc
    39ac:	2236      	movcc	r2, #54	; 0x36
    39ae:	fb02 f000 	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    39b2:	ea42 0a0a 	orr.w	sl, r2, sl
    39b6:	e774      	b.n	38a2 <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    39b8:	ea4f 248c 	mov.w	r4, ip, lsl #10
    39bc:	2300      	movs	r3, #0
    39be:	ea86 218c 	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
    39c2:	f04f 0e01 	mov.w	lr, #1
				div_ahb = div_ahb + 1;
    39c6:	46ac      	mov	ip, r5
    39c8:	e762      	b.n	3890 <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    39ca:	461d      	mov	r5, r3
    39cc:	f086 54c0 	eor.w	r4, r6, #402653184	; 0x18000000
    39d0:	4611      	mov	r1, r2
    39d2:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
    39d6:	e713      	b.n	3800 <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
    39d8:	2400      	movs	r4, #0
	uint32_t div_ahb = 1;
    39da:	f04f 0c01 	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    39de:	4602      	mov	r2, r0
    39e0:	4631      	mov	r1, r6
    39e2:	4623      	mov	r3, r4
	uint32_t div_arm = 1;
    39e4:	46e6      	mov	lr, ip
    39e6:	e753      	b.n	3890 <set_arm_clock+0x134>
    39e8:	1f78a400 	.word	0x1f78a400
    39ec:	400fc000 	.word	0x400fc000
    39f0:	40080000 	.word	0x40080000
    39f4:	23c34600 	.word	0x23c34600
    39f8:	004cb223 	.word	0x004cb223
    39fc:	51eb851f 	.word	0x51eb851f
    3a00:	016e3600 	.word	0x016e3600
    3a04:	400d8000 	.word	0x400d8000
    3a08:	80003040 	.word	0x80003040
    3a0c:	269fb1ff 	.word	0x269fb1ff
    3a10:	005b8d80 	.word	0x005b8d80
    3a14:	4df67eff 	.word	0x4df67eff
    3a18:	4d3f6400 	.word	0x4d3f6400
    3a1c:	08f0d17f 	.word	0x08f0d17f
    3a20:	2cb4177f 	.word	0x2cb4177f
    3a24:	00e5109f 	.word	0x00e5109f
    3a28:	431bde83 	.word	0x431bde83
    3a2c:	20007b5c 	.word	0x20007b5c
    3a30:	20007b58 	.word	0x20007b58
    3a34:	20008e64 	.word	0x20008e64
    3a38:	165e9f81 	.word	0x165e9f81
    3a3c:	00b71b00 	.word	0x00b71b00
    3a40:	8000206c 	.word	0x8000206c
    3a44:	8001307f 	.word	0x8001307f
    3a48:	80002000 	.word	0x80002000

00003a4c <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    3a4c:	4a07      	ldr	r2, [pc, #28]	; (3a6c <rtc_get+0x20>)
    3a4e:	6a50      	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    3a50:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uint32_t hi2 = SNVS_HPRTCMR;
    3a52:	4619      	mov	r1, r3
    3a54:	4684      	mov	ip, r0
    3a56:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    3a58:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    3a5a:	4299      	cmp	r1, r3
    3a5c:	d1f9      	bne.n	3a52 <rtc_get+0x6>
    3a5e:	4584      	cmp	ip, r0
    3a60:	d1f7      	bne.n	3a52 <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
    3a62:	0bdb      	lsrs	r3, r3, #15
}
    3a64:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    3a68:	4770      	bx	lr
    3a6a:	bf00      	nop
    3a6c:	400d4000 	.word	0x400d4000

00003a70 <sm_align_pool>:
{
    3a70:	b508      	push	{r3, lr}
	x = spool->pool_size % HEADER_SZ;
    3a72:	e9d0 3200 	ldrd	r3, r2, [r0]
	if (!spool->pool || !spool->pool_size) return 0;
    3a76:	b15b      	cbz	r3, 3a90 <sm_align_pool+0x20>
    3a78:	b1ba      	cbz	r2, 3aaa <sm_align_pool+0x3a>
	if (spool->pool_size % HEADER_SZ) return 0;
    3a7a:	4b0f      	ldr	r3, [pc, #60]	; (3ab8 <sm_align_pool+0x48>)
    3a7c:	fba3 1302 	umull	r1, r3, r3, r2
    3a80:	08db      	lsrs	r3, r3, #3
    3a82:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3a86:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    3a8a:	d10a      	bne.n	3aa2 <sm_align_pool+0x32>
	if (smalloc_verify_pool(spool)) return 1;
    3a8c:	2001      	movs	r0, #1
}
    3a8e:	bd08      	pop	{r3, pc}
	x = spool->pool_size % HEADER_SZ;
    3a90:	4b09      	ldr	r3, [pc, #36]	; (3ab8 <sm_align_pool+0x48>)
    3a92:	fba3 1302 	umull	r1, r3, r3, r2
    3a96:	08db      	lsrs	r3, r3, #3
    3a98:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
    3a9c:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    3aa0:	d001      	beq.n	3aa6 <sm_align_pool+0x36>
    3aa2:	1ad2      	subs	r2, r2, r3
    3aa4:	6042      	str	r2, [r0, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    3aa6:	2af0      	cmp	r2, #240	; 0xf0
    3aa8:	d8f0      	bhi.n	3a8c <sm_align_pool+0x1c>
		errno = ENOSPC;
    3aaa:	f002 fa99 	bl	5fe0 <__errno>
    3aae:	221c      	movs	r2, #28
    3ab0:	4603      	mov	r3, r0
    3ab2:	2000      	movs	r0, #0
    3ab4:	601a      	str	r2, [r3, #0]
}
    3ab6:	bd08      	pop	{r3, pc}
    3ab8:	aaaaaaab 	.word	0xaaaaaaab

00003abc <sm_set_pool>:
{
    3abc:	b570      	push	{r4, r5, r6, lr}
	if (!spool) {
    3abe:	4604      	mov	r4, r0
    3ac0:	b338      	cbz	r0, 3b12 <sm_set_pool+0x56>
	if (!new_pool || !new_pool_size) {
    3ac2:	b119      	cbz	r1, 3acc <sm_set_pool+0x10>
    3ac4:	fab2 f682 	clz	r6, r2
    3ac8:	0976      	lsrs	r6, r6, #5
    3aca:	b9a2      	cbnz	r2, 3af6 <sm_set_pool+0x3a>
	if (!spool->pool || !spool->pool_size) return 0;
    3acc:	6820      	ldr	r0, [r4, #0]
    3ace:	b300      	cbz	r0, 3b12 <sm_set_pool+0x56>
    3ad0:	6862      	ldr	r2, [r4, #4]
    3ad2:	b1f2      	cbz	r2, 3b12 <sm_set_pool+0x56>
	if (spool->pool_size % HEADER_SZ) return 0;
    3ad4:	4b18      	ldr	r3, [pc, #96]	; (3b38 <sm_set_pool+0x7c>)
    3ad6:	4919      	ldr	r1, [pc, #100]	; (3b3c <sm_set_pool+0x80>)
    3ad8:	fb02 f303 	mul.w	r3, r2, r3
    3adc:	ebb1 0fb3 	cmp.w	r1, r3, ror #2
    3ae0:	d317      	bcc.n	3b12 <sm_set_pool+0x56>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    3ae2:	68a3      	ldr	r3, [r4, #8]
    3ae4:	b9e3      	cbnz	r3, 3b20 <sm_set_pool+0x64>
			memset(spool, 0, sizeof(struct smalloc_pool));
    3ae6:	2200      	movs	r2, #0
			return 1;
    3ae8:	2301      	movs	r3, #1
			memset(spool, 0, sizeof(struct smalloc_pool));
    3aea:	6022      	str	r2, [r4, #0]
    3aec:	6062      	str	r2, [r4, #4]
    3aee:	60a2      	str	r2, [r4, #8]
    3af0:	60e2      	str	r2, [r4, #12]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    3af2:	4618      	mov	r0, r3
    3af4:	bd70      	pop	{r4, r5, r6, pc}
	spool->pool = new_pool;
    3af6:	461d      	mov	r5, r3
	spool->oomfn = oom_handler;
    3af8:	9b04      	ldr	r3, [sp, #16]
	spool->pool_size = new_pool_size;
    3afa:	e9c0 1200 	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
    3afe:	60c3      	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    3b00:	f7ff ffb6 	bl	3a70 <sm_align_pool>
    3b04:	4603      	mov	r3, r0
    3b06:	2800      	cmp	r0, #0
    3b08:	d0f3      	beq.n	3af2 <sm_set_pool+0x36>
	if (do_zero) {
    3b0a:	b96d      	cbnz	r5, 3b28 <sm_set_pool+0x6c>
	return 1;
    3b0c:	2301      	movs	r3, #1
}
    3b0e:	4618      	mov	r0, r3
    3b10:	bd70      	pop	{r4, r5, r6, pc}
		errno = EINVAL;
    3b12:	f002 fa65 	bl	5fe0 <__errno>
    3b16:	2216      	movs	r2, #22
		return 0;
    3b18:	2300      	movs	r3, #0
		errno = EINVAL;
    3b1a:	6002      	str	r2, [r0, #0]
}
    3b1c:	4618      	mov	r0, r3
    3b1e:	bd70      	pop	{r4, r5, r6, pc}
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    3b20:	2100      	movs	r1, #0
    3b22:	f002 f8c1 	bl	5ca8 <memset>
    3b26:	e7de      	b.n	3ae6 <sm_set_pool+0x2a>
		memset(spool->pool, 0, spool->pool_size);
    3b28:	6862      	ldr	r2, [r4, #4]
    3b2a:	4631      	mov	r1, r6
    3b2c:	6820      	ldr	r0, [r4, #0]
		spool->do_zero = do_zero;
    3b2e:	60a5      	str	r5, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    3b30:	f002 f8ba 	bl	5ca8 <memset>
	return 1;
    3b34:	2301      	movs	r3, #1
    3b36:	e7dc      	b.n	3af2 <sm_set_pool+0x36>
    3b38:	aaaaaaab 	.word	0xaaaaaaab
    3b3c:	15555555 	.word	0x15555555

00003b40 <__aeabi_atexit>:
    3b40:	4603      	mov	r3, r0
    3b42:	4608      	mov	r0, r1
    3b44:	4619      	mov	r1, r3
    3b46:	f001 be25 	b.w	5794 <__cxa_atexit>
    3b4a:	bf00      	nop

00003b4c <__aeabi_uldivmod>:
    3b4c:	b953      	cbnz	r3, 3b64 <__aeabi_uldivmod+0x18>
    3b4e:	b94a      	cbnz	r2, 3b64 <__aeabi_uldivmod+0x18>
    3b50:	2900      	cmp	r1, #0
    3b52:	bf08      	it	eq
    3b54:	2800      	cmpeq	r0, #0
    3b56:	bf1c      	itt	ne
    3b58:	f04f 31ff 	movne.w	r1, #4294967295
    3b5c:	f04f 30ff 	movne.w	r0, #4294967295
    3b60:	f000 b970 	b.w	3e44 <__aeabi_idiv0>
    3b64:	f1ad 0c08 	sub.w	ip, sp, #8
    3b68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    3b6c:	f000 f806 	bl	3b7c <__udivmoddi4>
    3b70:	f8dd e004 	ldr.w	lr, [sp, #4]
    3b74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    3b78:	b004      	add	sp, #16
    3b7a:	4770      	bx	lr

00003b7c <__udivmoddi4>:
    3b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3b80:	9e08      	ldr	r6, [sp, #32]
    3b82:	460d      	mov	r5, r1
    3b84:	4604      	mov	r4, r0
    3b86:	460f      	mov	r7, r1
    3b88:	2b00      	cmp	r3, #0
    3b8a:	d14a      	bne.n	3c22 <__udivmoddi4+0xa6>
    3b8c:	428a      	cmp	r2, r1
    3b8e:	4694      	mov	ip, r2
    3b90:	d965      	bls.n	3c5e <__udivmoddi4+0xe2>
    3b92:	fab2 f382 	clz	r3, r2
    3b96:	b143      	cbz	r3, 3baa <__udivmoddi4+0x2e>
    3b98:	fa02 fc03 	lsl.w	ip, r2, r3
    3b9c:	f1c3 0220 	rsb	r2, r3, #32
    3ba0:	409f      	lsls	r7, r3
    3ba2:	fa20 f202 	lsr.w	r2, r0, r2
    3ba6:	4317      	orrs	r7, r2
    3ba8:	409c      	lsls	r4, r3
    3baa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
    3bae:	fa1f f58c 	uxth.w	r5, ip
    3bb2:	fbb7 f1fe 	udiv	r1, r7, lr
    3bb6:	0c22      	lsrs	r2, r4, #16
    3bb8:	fb0e 7711 	mls	r7, lr, r1, r7
    3bbc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
    3bc0:	fb01 f005 	mul.w	r0, r1, r5
    3bc4:	4290      	cmp	r0, r2
    3bc6:	d90a      	bls.n	3bde <__udivmoddi4+0x62>
    3bc8:	eb1c 0202 	adds.w	r2, ip, r2
    3bcc:	f101 37ff 	add.w	r7, r1, #4294967295
    3bd0:	f080 811c 	bcs.w	3e0c <__udivmoddi4+0x290>
    3bd4:	4290      	cmp	r0, r2
    3bd6:	f240 8119 	bls.w	3e0c <__udivmoddi4+0x290>
    3bda:	3902      	subs	r1, #2
    3bdc:	4462      	add	r2, ip
    3bde:	1a12      	subs	r2, r2, r0
    3be0:	b2a4      	uxth	r4, r4
    3be2:	fbb2 f0fe 	udiv	r0, r2, lr
    3be6:	fb0e 2210 	mls	r2, lr, r0, r2
    3bea:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    3bee:	fb00 f505 	mul.w	r5, r0, r5
    3bf2:	42a5      	cmp	r5, r4
    3bf4:	d90a      	bls.n	3c0c <__udivmoddi4+0x90>
    3bf6:	eb1c 0404 	adds.w	r4, ip, r4
    3bfa:	f100 32ff 	add.w	r2, r0, #4294967295
    3bfe:	f080 8107 	bcs.w	3e10 <__udivmoddi4+0x294>
    3c02:	42a5      	cmp	r5, r4
    3c04:	f240 8104 	bls.w	3e10 <__udivmoddi4+0x294>
    3c08:	4464      	add	r4, ip
    3c0a:	3802      	subs	r0, #2
    3c0c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
    3c10:	1b64      	subs	r4, r4, r5
    3c12:	2100      	movs	r1, #0
    3c14:	b11e      	cbz	r6, 3c1e <__udivmoddi4+0xa2>
    3c16:	40dc      	lsrs	r4, r3
    3c18:	2300      	movs	r3, #0
    3c1a:	e9c6 4300 	strd	r4, r3, [r6]
    3c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3c22:	428b      	cmp	r3, r1
    3c24:	d908      	bls.n	3c38 <__udivmoddi4+0xbc>
    3c26:	2e00      	cmp	r6, #0
    3c28:	f000 80ed 	beq.w	3e06 <__udivmoddi4+0x28a>
    3c2c:	2100      	movs	r1, #0
    3c2e:	e9c6 0500 	strd	r0, r5, [r6]
    3c32:	4608      	mov	r0, r1
    3c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3c38:	fab3 f183 	clz	r1, r3
    3c3c:	2900      	cmp	r1, #0
    3c3e:	d149      	bne.n	3cd4 <__udivmoddi4+0x158>
    3c40:	42ab      	cmp	r3, r5
    3c42:	d302      	bcc.n	3c4a <__udivmoddi4+0xce>
    3c44:	4282      	cmp	r2, r0
    3c46:	f200 80f8 	bhi.w	3e3a <__udivmoddi4+0x2be>
    3c4a:	1a84      	subs	r4, r0, r2
    3c4c:	eb65 0203 	sbc.w	r2, r5, r3
    3c50:	2001      	movs	r0, #1
    3c52:	4617      	mov	r7, r2
    3c54:	2e00      	cmp	r6, #0
    3c56:	d0e2      	beq.n	3c1e <__udivmoddi4+0xa2>
    3c58:	e9c6 4700 	strd	r4, r7, [r6]
    3c5c:	e7df      	b.n	3c1e <__udivmoddi4+0xa2>
    3c5e:	b902      	cbnz	r2, 3c62 <__udivmoddi4+0xe6>
    3c60:	deff      	udf	#255	; 0xff
    3c62:	fab2 f382 	clz	r3, r2
    3c66:	2b00      	cmp	r3, #0
    3c68:	f040 8090 	bne.w	3d8c <__udivmoddi4+0x210>
    3c6c:	1a8a      	subs	r2, r1, r2
    3c6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
    3c72:	fa1f fe8c 	uxth.w	lr, ip
    3c76:	2101      	movs	r1, #1
    3c78:	fbb2 f5f7 	udiv	r5, r2, r7
    3c7c:	fb07 2015 	mls	r0, r7, r5, r2
    3c80:	0c22      	lsrs	r2, r4, #16
    3c82:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    3c86:	fb0e f005 	mul.w	r0, lr, r5
    3c8a:	4290      	cmp	r0, r2
    3c8c:	d908      	bls.n	3ca0 <__udivmoddi4+0x124>
    3c8e:	eb1c 0202 	adds.w	r2, ip, r2
    3c92:	f105 38ff 	add.w	r8, r5, #4294967295
    3c96:	d202      	bcs.n	3c9e <__udivmoddi4+0x122>
    3c98:	4290      	cmp	r0, r2
    3c9a:	f200 80cb 	bhi.w	3e34 <__udivmoddi4+0x2b8>
    3c9e:	4645      	mov	r5, r8
    3ca0:	1a12      	subs	r2, r2, r0
    3ca2:	b2a4      	uxth	r4, r4
    3ca4:	fbb2 f0f7 	udiv	r0, r2, r7
    3ca8:	fb07 2210 	mls	r2, r7, r0, r2
    3cac:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    3cb0:	fb0e fe00 	mul.w	lr, lr, r0
    3cb4:	45a6      	cmp	lr, r4
    3cb6:	d908      	bls.n	3cca <__udivmoddi4+0x14e>
    3cb8:	eb1c 0404 	adds.w	r4, ip, r4
    3cbc:	f100 32ff 	add.w	r2, r0, #4294967295
    3cc0:	d202      	bcs.n	3cc8 <__udivmoddi4+0x14c>
    3cc2:	45a6      	cmp	lr, r4
    3cc4:	f200 80bb 	bhi.w	3e3e <__udivmoddi4+0x2c2>
    3cc8:	4610      	mov	r0, r2
    3cca:	eba4 040e 	sub.w	r4, r4, lr
    3cce:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
    3cd2:	e79f      	b.n	3c14 <__udivmoddi4+0x98>
    3cd4:	f1c1 0720 	rsb	r7, r1, #32
    3cd8:	408b      	lsls	r3, r1
    3cda:	fa22 fc07 	lsr.w	ip, r2, r7
    3cde:	ea4c 0c03 	orr.w	ip, ip, r3
    3ce2:	fa05 f401 	lsl.w	r4, r5, r1
    3ce6:	fa20 f307 	lsr.w	r3, r0, r7
    3cea:	40fd      	lsrs	r5, r7
    3cec:	ea4f 491c 	mov.w	r9, ip, lsr #16
    3cf0:	4323      	orrs	r3, r4
    3cf2:	fbb5 f8f9 	udiv	r8, r5, r9
    3cf6:	fa1f fe8c 	uxth.w	lr, ip
    3cfa:	fb09 5518 	mls	r5, r9, r8, r5
    3cfe:	0c1c      	lsrs	r4, r3, #16
    3d00:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    3d04:	fb08 f50e 	mul.w	r5, r8, lr
    3d08:	42a5      	cmp	r5, r4
    3d0a:	fa02 f201 	lsl.w	r2, r2, r1
    3d0e:	fa00 f001 	lsl.w	r0, r0, r1
    3d12:	d90b      	bls.n	3d2c <__udivmoddi4+0x1b0>
    3d14:	eb1c 0404 	adds.w	r4, ip, r4
    3d18:	f108 3aff 	add.w	sl, r8, #4294967295
    3d1c:	f080 8088 	bcs.w	3e30 <__udivmoddi4+0x2b4>
    3d20:	42a5      	cmp	r5, r4
    3d22:	f240 8085 	bls.w	3e30 <__udivmoddi4+0x2b4>
    3d26:	f1a8 0802 	sub.w	r8, r8, #2
    3d2a:	4464      	add	r4, ip
    3d2c:	1b64      	subs	r4, r4, r5
    3d2e:	b29d      	uxth	r5, r3
    3d30:	fbb4 f3f9 	udiv	r3, r4, r9
    3d34:	fb09 4413 	mls	r4, r9, r3, r4
    3d38:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
    3d3c:	fb03 fe0e 	mul.w	lr, r3, lr
    3d40:	45a6      	cmp	lr, r4
    3d42:	d908      	bls.n	3d56 <__udivmoddi4+0x1da>
    3d44:	eb1c 0404 	adds.w	r4, ip, r4
    3d48:	f103 35ff 	add.w	r5, r3, #4294967295
    3d4c:	d26c      	bcs.n	3e28 <__udivmoddi4+0x2ac>
    3d4e:	45a6      	cmp	lr, r4
    3d50:	d96a      	bls.n	3e28 <__udivmoddi4+0x2ac>
    3d52:	3b02      	subs	r3, #2
    3d54:	4464      	add	r4, ip
    3d56:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    3d5a:	fba3 9502 	umull	r9, r5, r3, r2
    3d5e:	eba4 040e 	sub.w	r4, r4, lr
    3d62:	42ac      	cmp	r4, r5
    3d64:	46c8      	mov	r8, r9
    3d66:	46ae      	mov	lr, r5
    3d68:	d356      	bcc.n	3e18 <__udivmoddi4+0x29c>
    3d6a:	d053      	beq.n	3e14 <__udivmoddi4+0x298>
    3d6c:	b156      	cbz	r6, 3d84 <__udivmoddi4+0x208>
    3d6e:	ebb0 0208 	subs.w	r2, r0, r8
    3d72:	eb64 040e 	sbc.w	r4, r4, lr
    3d76:	fa04 f707 	lsl.w	r7, r4, r7
    3d7a:	40ca      	lsrs	r2, r1
    3d7c:	40cc      	lsrs	r4, r1
    3d7e:	4317      	orrs	r7, r2
    3d80:	e9c6 7400 	strd	r7, r4, [r6]
    3d84:	4618      	mov	r0, r3
    3d86:	2100      	movs	r1, #0
    3d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3d8c:	f1c3 0120 	rsb	r1, r3, #32
    3d90:	fa02 fc03 	lsl.w	ip, r2, r3
    3d94:	fa20 f201 	lsr.w	r2, r0, r1
    3d98:	fa25 f101 	lsr.w	r1, r5, r1
    3d9c:	409d      	lsls	r5, r3
    3d9e:	432a      	orrs	r2, r5
    3da0:	ea4f 471c 	mov.w	r7, ip, lsr #16
    3da4:	fa1f fe8c 	uxth.w	lr, ip
    3da8:	fbb1 f0f7 	udiv	r0, r1, r7
    3dac:	fb07 1510 	mls	r5, r7, r0, r1
    3db0:	0c11      	lsrs	r1, r2, #16
    3db2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
    3db6:	fb00 f50e 	mul.w	r5, r0, lr
    3dba:	428d      	cmp	r5, r1
    3dbc:	fa04 f403 	lsl.w	r4, r4, r3
    3dc0:	d908      	bls.n	3dd4 <__udivmoddi4+0x258>
    3dc2:	eb1c 0101 	adds.w	r1, ip, r1
    3dc6:	f100 38ff 	add.w	r8, r0, #4294967295
    3dca:	d22f      	bcs.n	3e2c <__udivmoddi4+0x2b0>
    3dcc:	428d      	cmp	r5, r1
    3dce:	d92d      	bls.n	3e2c <__udivmoddi4+0x2b0>
    3dd0:	3802      	subs	r0, #2
    3dd2:	4461      	add	r1, ip
    3dd4:	1b49      	subs	r1, r1, r5
    3dd6:	b292      	uxth	r2, r2
    3dd8:	fbb1 f5f7 	udiv	r5, r1, r7
    3ddc:	fb07 1115 	mls	r1, r7, r5, r1
    3de0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    3de4:	fb05 f10e 	mul.w	r1, r5, lr
    3de8:	4291      	cmp	r1, r2
    3dea:	d908      	bls.n	3dfe <__udivmoddi4+0x282>
    3dec:	eb1c 0202 	adds.w	r2, ip, r2
    3df0:	f105 38ff 	add.w	r8, r5, #4294967295
    3df4:	d216      	bcs.n	3e24 <__udivmoddi4+0x2a8>
    3df6:	4291      	cmp	r1, r2
    3df8:	d914      	bls.n	3e24 <__udivmoddi4+0x2a8>
    3dfa:	3d02      	subs	r5, #2
    3dfc:	4462      	add	r2, ip
    3dfe:	1a52      	subs	r2, r2, r1
    3e00:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
    3e04:	e738      	b.n	3c78 <__udivmoddi4+0xfc>
    3e06:	4631      	mov	r1, r6
    3e08:	4630      	mov	r0, r6
    3e0a:	e708      	b.n	3c1e <__udivmoddi4+0xa2>
    3e0c:	4639      	mov	r1, r7
    3e0e:	e6e6      	b.n	3bde <__udivmoddi4+0x62>
    3e10:	4610      	mov	r0, r2
    3e12:	e6fb      	b.n	3c0c <__udivmoddi4+0x90>
    3e14:	4548      	cmp	r0, r9
    3e16:	d2a9      	bcs.n	3d6c <__udivmoddi4+0x1f0>
    3e18:	ebb9 0802 	subs.w	r8, r9, r2
    3e1c:	eb65 0e0c 	sbc.w	lr, r5, ip
    3e20:	3b01      	subs	r3, #1
    3e22:	e7a3      	b.n	3d6c <__udivmoddi4+0x1f0>
    3e24:	4645      	mov	r5, r8
    3e26:	e7ea      	b.n	3dfe <__udivmoddi4+0x282>
    3e28:	462b      	mov	r3, r5
    3e2a:	e794      	b.n	3d56 <__udivmoddi4+0x1da>
    3e2c:	4640      	mov	r0, r8
    3e2e:	e7d1      	b.n	3dd4 <__udivmoddi4+0x258>
    3e30:	46d0      	mov	r8, sl
    3e32:	e77b      	b.n	3d2c <__udivmoddi4+0x1b0>
    3e34:	3d02      	subs	r5, #2
    3e36:	4462      	add	r2, ip
    3e38:	e732      	b.n	3ca0 <__udivmoddi4+0x124>
    3e3a:	4608      	mov	r0, r1
    3e3c:	e70a      	b.n	3c54 <__udivmoddi4+0xd8>
    3e3e:	4464      	add	r4, ip
    3e40:	3802      	subs	r0, #2
    3e42:	e742      	b.n	3cca <__udivmoddi4+0x14e>

00003e44 <__aeabi_idiv0>:
    3e44:	4770      	bx	lr
    3e46:	bf00      	nop

00003e48 <malloc>:
    3e48:	4b02      	ldr	r3, [pc, #8]	; (3e54 <malloc+0xc>)
    3e4a:	4601      	mov	r1, r0
    3e4c:	6818      	ldr	r0, [r3, #0]
    3e4e:	f000 b80b 	b.w	3e68 <_malloc_r>
    3e52:	bf00      	nop
    3e54:	200081d0 	.word	0x200081d0

00003e58 <free>:
    3e58:	4b02      	ldr	r3, [pc, #8]	; (3e64 <free+0xc>)
    3e5a:	4601      	mov	r1, r0
    3e5c:	6818      	ldr	r0, [r3, #0]
    3e5e:	f002 bbe1 	b.w	6624 <_free_r>
    3e62:	bf00      	nop
    3e64:	200081d0 	.word	0x200081d0

00003e68 <_malloc_r>:
    3e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3e6c:	f101 060b 	add.w	r6, r1, #11
    3e70:	2e16      	cmp	r6, #22
    3e72:	b083      	sub	sp, #12
    3e74:	4604      	mov	r4, r0
    3e76:	d824      	bhi.n	3ec2 <_malloc_r+0x5a>
    3e78:	2910      	cmp	r1, #16
    3e7a:	f200 80ba 	bhi.w	3ff2 <_malloc_r+0x18a>
    3e7e:	f000 faa3 	bl	43c8 <__malloc_lock>
    3e82:	2610      	movs	r6, #16
    3e84:	2218      	movs	r2, #24
    3e86:	2002      	movs	r0, #2
    3e88:	4fb5      	ldr	r7, [pc, #724]	; (4160 <_malloc_r+0x2f8>)
    3e8a:	443a      	add	r2, r7
    3e8c:	f1a2 0108 	sub.w	r1, r2, #8
    3e90:	6853      	ldr	r3, [r2, #4]
    3e92:	428b      	cmp	r3, r1
    3e94:	f000 80ba 	beq.w	400c <_malloc_r+0x1a4>
    3e98:	685a      	ldr	r2, [r3, #4]
    3e9a:	68d9      	ldr	r1, [r3, #12]
    3e9c:	f022 0203 	bic.w	r2, r2, #3
    3ea0:	441a      	add	r2, r3
    3ea2:	689d      	ldr	r5, [r3, #8]
    3ea4:	60e9      	str	r1, [r5, #12]
    3ea6:	608d      	str	r5, [r1, #8]
    3ea8:	6851      	ldr	r1, [r2, #4]
    3eaa:	f041 0101 	orr.w	r1, r1, #1
    3eae:	4620      	mov	r0, r4
    3eb0:	6051      	str	r1, [r2, #4]
    3eb2:	f103 0508 	add.w	r5, r3, #8
    3eb6:	f000 fa8d 	bl	43d4 <__malloc_unlock>
    3eba:	4628      	mov	r0, r5
    3ebc:	b003      	add	sp, #12
    3ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3ec2:	f036 0607 	bics.w	r6, r6, #7
    3ec6:	f100 8094 	bmi.w	3ff2 <_malloc_r+0x18a>
    3eca:	42b1      	cmp	r1, r6
    3ecc:	f200 8091 	bhi.w	3ff2 <_malloc_r+0x18a>
    3ed0:	f000 fa7a 	bl	43c8 <__malloc_lock>
    3ed4:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
    3ed8:	f0c0 819a 	bcc.w	4210 <_malloc_r+0x3a8>
    3edc:	0a73      	lsrs	r3, r6, #9
    3ede:	f000 808f 	beq.w	4000 <_malloc_r+0x198>
    3ee2:	2b04      	cmp	r3, #4
    3ee4:	f200 816f 	bhi.w	41c6 <_malloc_r+0x35e>
    3ee8:	09b3      	lsrs	r3, r6, #6
    3eea:	f103 0039 	add.w	r0, r3, #57	; 0x39
    3eee:	f103 0c38 	add.w	ip, r3, #56	; 0x38
    3ef2:	00c3      	lsls	r3, r0, #3
    3ef4:	4f9a      	ldr	r7, [pc, #616]	; (4160 <_malloc_r+0x2f8>)
    3ef6:	443b      	add	r3, r7
    3ef8:	f1a3 0508 	sub.w	r5, r3, #8
    3efc:	685b      	ldr	r3, [r3, #4]
    3efe:	429d      	cmp	r5, r3
    3f00:	d106      	bne.n	3f10 <_malloc_r+0xa8>
    3f02:	e00c      	b.n	3f1e <_malloc_r+0xb6>
    3f04:	2900      	cmp	r1, #0
    3f06:	f280 8127 	bge.w	4158 <_malloc_r+0x2f0>
    3f0a:	68db      	ldr	r3, [r3, #12]
    3f0c:	429d      	cmp	r5, r3
    3f0e:	d006      	beq.n	3f1e <_malloc_r+0xb6>
    3f10:	685a      	ldr	r2, [r3, #4]
    3f12:	f022 0203 	bic.w	r2, r2, #3
    3f16:	1b91      	subs	r1, r2, r6
    3f18:	290f      	cmp	r1, #15
    3f1a:	ddf3      	ble.n	3f04 <_malloc_r+0x9c>
    3f1c:	4660      	mov	r0, ip
    3f1e:	693d      	ldr	r5, [r7, #16]
    3f20:	f8df c250 	ldr.w	ip, [pc, #592]	; 4174 <_malloc_r+0x30c>
    3f24:	4565      	cmp	r5, ip
    3f26:	d07c      	beq.n	4022 <_malloc_r+0x1ba>
    3f28:	686a      	ldr	r2, [r5, #4]
    3f2a:	f022 0203 	bic.w	r2, r2, #3
    3f2e:	1b93      	subs	r3, r2, r6
    3f30:	2b0f      	cmp	r3, #15
    3f32:	f300 817b 	bgt.w	422c <_malloc_r+0x3c4>
    3f36:	2b00      	cmp	r3, #0
    3f38:	e9c7 cc04 	strd	ip, ip, [r7, #16]
    3f3c:	f280 816c 	bge.w	4218 <_malloc_r+0x3b0>
    3f40:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    3f44:	f080 811a 	bcs.w	417c <_malloc_r+0x314>
    3f48:	08d3      	lsrs	r3, r2, #3
    3f4a:	6879      	ldr	r1, [r7, #4]
    3f4c:	3301      	adds	r3, #1
    3f4e:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    3f52:	2201      	movs	r2, #1
    3f54:	fa02 f20e 	lsl.w	r2, r2, lr
    3f58:	430a      	orrs	r2, r1
    3f5a:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
    3f5e:	f8c5 e008 	str.w	lr, [r5, #8]
    3f62:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    3f66:	3908      	subs	r1, #8
    3f68:	60e9      	str	r1, [r5, #12]
    3f6a:	607a      	str	r2, [r7, #4]
    3f6c:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    3f70:	f8ce 500c 	str.w	r5, [lr, #12]
    3f74:	1083      	asrs	r3, r0, #2
    3f76:	2101      	movs	r1, #1
    3f78:	4099      	lsls	r1, r3
    3f7a:	4291      	cmp	r1, r2
    3f7c:	d857      	bhi.n	402e <_malloc_r+0x1c6>
    3f7e:	4211      	tst	r1, r2
    3f80:	d106      	bne.n	3f90 <_malloc_r+0x128>
    3f82:	f020 0003 	bic.w	r0, r0, #3
    3f86:	0049      	lsls	r1, r1, #1
    3f88:	4211      	tst	r1, r2
    3f8a:	f100 0004 	add.w	r0, r0, #4
    3f8e:	d0fa      	beq.n	3f86 <_malloc_r+0x11e>
    3f90:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    3f94:	464d      	mov	r5, r9
    3f96:	4686      	mov	lr, r0
    3f98:	f8d5 800c 	ldr.w	r8, [r5, #12]
    3f9c:	4545      	cmp	r5, r8
    3f9e:	d108      	bne.n	3fb2 <_malloc_r+0x14a>
    3fa0:	e11d      	b.n	41de <_malloc_r+0x376>
    3fa2:	2b00      	cmp	r3, #0
    3fa4:	f280 8124 	bge.w	41f0 <_malloc_r+0x388>
    3fa8:	f8d8 800c 	ldr.w	r8, [r8, #12]
    3fac:	4545      	cmp	r5, r8
    3fae:	f000 8116 	beq.w	41de <_malloc_r+0x376>
    3fb2:	f8d8 2004 	ldr.w	r2, [r8, #4]
    3fb6:	f022 0203 	bic.w	r2, r2, #3
    3fba:	1b93      	subs	r3, r2, r6
    3fbc:	2b0f      	cmp	r3, #15
    3fbe:	ddf0      	ble.n	3fa2 <_malloc_r+0x13a>
    3fc0:	4620      	mov	r0, r4
    3fc2:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
    3fc6:	eb08 0106 	add.w	r1, r8, r6
    3fca:	f046 0601 	orr.w	r6, r6, #1
    3fce:	f8c8 6004 	str.w	r6, [r8, #4]
    3fd2:	60ec      	str	r4, [r5, #12]
    3fd4:	60a5      	str	r5, [r4, #8]
    3fd6:	f043 0401 	orr.w	r4, r3, #1
    3fda:	e9c7 1104 	strd	r1, r1, [r7, #16]
    3fde:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    3fe2:	604c      	str	r4, [r1, #4]
    3fe4:	f848 3002 	str.w	r3, [r8, r2]
    3fe8:	f000 f9f4 	bl	43d4 <__malloc_unlock>
    3fec:	f108 0508 	add.w	r5, r8, #8
    3ff0:	e002      	b.n	3ff8 <_malloc_r+0x190>
    3ff2:	230c      	movs	r3, #12
    3ff4:	6023      	str	r3, [r4, #0]
    3ff6:	2500      	movs	r5, #0
    3ff8:	4628      	mov	r0, r5
    3ffa:	b003      	add	sp, #12
    3ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4000:	f44f 7300 	mov.w	r3, #512	; 0x200
    4004:	2040      	movs	r0, #64	; 0x40
    4006:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    400a:	e773      	b.n	3ef4 <_malloc_r+0x8c>
    400c:	68d3      	ldr	r3, [r2, #12]
    400e:	429a      	cmp	r2, r3
    4010:	bf08      	it	eq
    4012:	3002      	addeq	r0, #2
    4014:	f47f af40 	bne.w	3e98 <_malloc_r+0x30>
    4018:	693d      	ldr	r5, [r7, #16]
    401a:	f8df c158 	ldr.w	ip, [pc, #344]	; 4174 <_malloc_r+0x30c>
    401e:	4565      	cmp	r5, ip
    4020:	d182      	bne.n	3f28 <_malloc_r+0xc0>
    4022:	687a      	ldr	r2, [r7, #4]
    4024:	1083      	asrs	r3, r0, #2
    4026:	2101      	movs	r1, #1
    4028:	4099      	lsls	r1, r3
    402a:	4291      	cmp	r1, r2
    402c:	d9a7      	bls.n	3f7e <_malloc_r+0x116>
    402e:	68bd      	ldr	r5, [r7, #8]
    4030:	686b      	ldr	r3, [r5, #4]
    4032:	f023 0903 	bic.w	r9, r3, #3
    4036:	454e      	cmp	r6, r9
    4038:	d803      	bhi.n	4042 <_malloc_r+0x1da>
    403a:	eba9 0306 	sub.w	r3, r9, r6
    403e:	2b0f      	cmp	r3, #15
    4040:	dc7a      	bgt.n	4138 <_malloc_r+0x2d0>
    4042:	f8df b134 	ldr.w	fp, [pc, #308]	; 4178 <_malloc_r+0x310>
    4046:	4b47      	ldr	r3, [pc, #284]	; (4164 <_malloc_r+0x2fc>)
    4048:	f8db 2000 	ldr.w	r2, [fp]
    404c:	681b      	ldr	r3, [r3, #0]
    404e:	3201      	adds	r2, #1
    4050:	4433      	add	r3, r6
    4052:	eb05 0a09 	add.w	sl, r5, r9
    4056:	f000 8133 	beq.w	42c0 <_malloc_r+0x458>
    405a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    405e:	330f      	adds	r3, #15
    4060:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
    4064:	f028 080f 	bic.w	r8, r8, #15
    4068:	4641      	mov	r1, r8
    406a:	4620      	mov	r0, r4
    406c:	f001 ff90 	bl	5f90 <_sbrk_r>
    4070:	1c41      	adds	r1, r0, #1
    4072:	4602      	mov	r2, r0
    4074:	f000 80f3 	beq.w	425e <_malloc_r+0x3f6>
    4078:	4582      	cmp	sl, r0
    407a:	f200 80ee 	bhi.w	425a <_malloc_r+0x3f2>
    407e:	4b3a      	ldr	r3, [pc, #232]	; (4168 <_malloc_r+0x300>)
    4080:	6819      	ldr	r1, [r3, #0]
    4082:	4441      	add	r1, r8
    4084:	6019      	str	r1, [r3, #0]
    4086:	4608      	mov	r0, r1
    4088:	f000 814e 	beq.w	4328 <_malloc_r+0x4c0>
    408c:	f8db 1000 	ldr.w	r1, [fp]
    4090:	9301      	str	r3, [sp, #4]
    4092:	3101      	adds	r1, #1
    4094:	bf1b      	ittet	ne
    4096:	eba2 010a 	subne.w	r1, r2, sl
    409a:	1809      	addne	r1, r1, r0
    409c:	f8cb 2000 	streq.w	r2, [fp]
    40a0:	6019      	strne	r1, [r3, #0]
    40a2:	f012 0b07 	ands.w	fp, r2, #7
    40a6:	f000 8117 	beq.w	42d8 <_malloc_r+0x470>
    40aa:	f1cb 0108 	rsb	r1, fp, #8
    40ae:	440a      	add	r2, r1
    40b0:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
    40b4:	4490      	add	r8, r2
    40b6:	3108      	adds	r1, #8
    40b8:	eba1 0108 	sub.w	r1, r1, r8
    40bc:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    40c0:	4651      	mov	r1, sl
    40c2:	4620      	mov	r0, r4
    40c4:	9200      	str	r2, [sp, #0]
    40c6:	f001 ff63 	bl	5f90 <_sbrk_r>
    40ca:	1c42      	adds	r2, r0, #1
    40cc:	e9dd 2300 	ldrd	r2, r3, [sp]
    40d0:	f000 814f 	beq.w	4372 <_malloc_r+0x50a>
    40d4:	1a80      	subs	r0, r0, r2
    40d6:	eb00 080a 	add.w	r8, r0, sl
    40da:	6819      	ldr	r1, [r3, #0]
    40dc:	60ba      	str	r2, [r7, #8]
    40de:	f048 0001 	orr.w	r0, r8, #1
    40e2:	4451      	add	r1, sl
    40e4:	42bd      	cmp	r5, r7
    40e6:	6050      	str	r0, [r2, #4]
    40e8:	6019      	str	r1, [r3, #0]
    40ea:	f000 8129 	beq.w	4340 <_malloc_r+0x4d8>
    40ee:	f1b9 0f0f 	cmp.w	r9, #15
    40f2:	f240 8127 	bls.w	4344 <_malloc_r+0x4dc>
    40f6:	6868      	ldr	r0, [r5, #4]
    40f8:	f1a9 0c0c 	sub.w	ip, r9, #12
    40fc:	f02c 0c07 	bic.w	ip, ip, #7
    4100:	f000 0001 	and.w	r0, r0, #1
    4104:	ea40 000c 	orr.w	r0, r0, ip
    4108:	6068      	str	r0, [r5, #4]
    410a:	f04f 0e05 	mov.w	lr, #5
    410e:	eb05 000c 	add.w	r0, r5, ip
    4112:	f1bc 0f0f 	cmp.w	ip, #15
    4116:	e9c0 ee01 	strd	lr, lr, [r0, #4]
    411a:	f200 8132 	bhi.w	4382 <_malloc_r+0x51a>
    411e:	6850      	ldr	r0, [r2, #4]
    4120:	4615      	mov	r5, r2
    4122:	4b12      	ldr	r3, [pc, #72]	; (416c <_malloc_r+0x304>)
    4124:	681a      	ldr	r2, [r3, #0]
    4126:	428a      	cmp	r2, r1
    4128:	bf38      	it	cc
    412a:	6019      	strcc	r1, [r3, #0]
    412c:	4b10      	ldr	r3, [pc, #64]	; (4170 <_malloc_r+0x308>)
    412e:	681a      	ldr	r2, [r3, #0]
    4130:	428a      	cmp	r2, r1
    4132:	bf38      	it	cc
    4134:	6019      	strcc	r1, [r3, #0]
    4136:	e094      	b.n	4262 <_malloc_r+0x3fa>
    4138:	19aa      	adds	r2, r5, r6
    413a:	f043 0301 	orr.w	r3, r3, #1
    413e:	f046 0601 	orr.w	r6, r6, #1
    4142:	606e      	str	r6, [r5, #4]
    4144:	4620      	mov	r0, r4
    4146:	60ba      	str	r2, [r7, #8]
    4148:	6053      	str	r3, [r2, #4]
    414a:	f000 f943 	bl	43d4 <__malloc_unlock>
    414e:	3508      	adds	r5, #8
    4150:	4628      	mov	r0, r5
    4152:	b003      	add	sp, #12
    4154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4158:	68d9      	ldr	r1, [r3, #12]
    415a:	441a      	add	r2, r3
    415c:	e6a1      	b.n	3ea2 <_malloc_r+0x3a>
    415e:	bf00      	nop
    4160:	20007db4 	.word	0x20007db4
    4164:	20008c8c 	.word	0x20008c8c
    4168:	20008c5c 	.word	0x20008c5c
    416c:	20008c84 	.word	0x20008c84
    4170:	20008c88 	.word	0x20008c88
    4174:	20007dbc 	.word	0x20007dbc
    4178:	200081bc 	.word	0x200081bc
    417c:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
    4180:	ea4f 2352 	mov.w	r3, r2, lsr #9
    4184:	d363      	bcc.n	424e <_malloc_r+0x3e6>
    4186:	2b14      	cmp	r3, #20
    4188:	f200 80b7 	bhi.w	42fa <_malloc_r+0x492>
    418c:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    4190:	00c9      	lsls	r1, r1, #3
    4192:	335b      	adds	r3, #91	; 0x5b
    4194:	eb07 0e01 	add.w	lr, r7, r1
    4198:	5879      	ldr	r1, [r7, r1]
    419a:	f1ae 0e08 	sub.w	lr, lr, #8
    419e:	458e      	cmp	lr, r1
    41a0:	f000 8091 	beq.w	42c6 <_malloc_r+0x45e>
    41a4:	684b      	ldr	r3, [r1, #4]
    41a6:	f023 0303 	bic.w	r3, r3, #3
    41aa:	4293      	cmp	r3, r2
    41ac:	d902      	bls.n	41b4 <_malloc_r+0x34c>
    41ae:	6889      	ldr	r1, [r1, #8]
    41b0:	458e      	cmp	lr, r1
    41b2:	d1f7      	bne.n	41a4 <_malloc_r+0x33c>
    41b4:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    41b8:	687a      	ldr	r2, [r7, #4]
    41ba:	e9c5 1e02 	strd	r1, lr, [r5, #8]
    41be:	f8ce 5008 	str.w	r5, [lr, #8]
    41c2:	60cd      	str	r5, [r1, #12]
    41c4:	e6d6      	b.n	3f74 <_malloc_r+0x10c>
    41c6:	2b14      	cmp	r3, #20
    41c8:	d959      	bls.n	427e <_malloc_r+0x416>
    41ca:	2b54      	cmp	r3, #84	; 0x54
    41cc:	f200 809d 	bhi.w	430a <_malloc_r+0x4a2>
    41d0:	0b33      	lsrs	r3, r6, #12
    41d2:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    41d6:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
    41da:	00c3      	lsls	r3, r0, #3
    41dc:	e68a      	b.n	3ef4 <_malloc_r+0x8c>
    41de:	f10e 0e01 	add.w	lr, lr, #1
    41e2:	f01e 0f03 	tst.w	lr, #3
    41e6:	f105 0508 	add.w	r5, r5, #8
    41ea:	f47f aed5 	bne.w	3f98 <_malloc_r+0x130>
    41ee:	e051      	b.n	4294 <_malloc_r+0x42c>
    41f0:	4442      	add	r2, r8
    41f2:	4645      	mov	r5, r8
    41f4:	6853      	ldr	r3, [r2, #4]
    41f6:	f8d8 100c 	ldr.w	r1, [r8, #12]
    41fa:	f043 0301 	orr.w	r3, r3, #1
    41fe:	6053      	str	r3, [r2, #4]
    4200:	f855 3f08 	ldr.w	r3, [r5, #8]!
    4204:	4620      	mov	r0, r4
    4206:	60d9      	str	r1, [r3, #12]
    4208:	608b      	str	r3, [r1, #8]
    420a:	f000 f8e3 	bl	43d4 <__malloc_unlock>
    420e:	e6f3      	b.n	3ff8 <_malloc_r+0x190>
    4210:	08f0      	lsrs	r0, r6, #3
    4212:	f106 0208 	add.w	r2, r6, #8
    4216:	e637      	b.n	3e88 <_malloc_r+0x20>
    4218:	442a      	add	r2, r5
    421a:	4620      	mov	r0, r4
    421c:	6853      	ldr	r3, [r2, #4]
    421e:	f043 0301 	orr.w	r3, r3, #1
    4222:	6053      	str	r3, [r2, #4]
    4224:	3508      	adds	r5, #8
    4226:	f000 f8d5 	bl	43d4 <__malloc_unlock>
    422a:	e6e5      	b.n	3ff8 <_malloc_r+0x190>
    422c:	19a9      	adds	r1, r5, r6
    422e:	4620      	mov	r0, r4
    4230:	f046 0601 	orr.w	r6, r6, #1
    4234:	f043 0401 	orr.w	r4, r3, #1
    4238:	606e      	str	r6, [r5, #4]
    423a:	e9c7 1104 	strd	r1, r1, [r7, #16]
    423e:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    4242:	604c      	str	r4, [r1, #4]
    4244:	50ab      	str	r3, [r5, r2]
    4246:	f000 f8c5 	bl	43d4 <__malloc_unlock>
    424a:	3508      	adds	r5, #8
    424c:	e6d4      	b.n	3ff8 <_malloc_r+0x190>
    424e:	0993      	lsrs	r3, r2, #6
    4250:	f103 0139 	add.w	r1, r3, #57	; 0x39
    4254:	00c9      	lsls	r1, r1, #3
    4256:	3338      	adds	r3, #56	; 0x38
    4258:	e79c      	b.n	4194 <_malloc_r+0x32c>
    425a:	42bd      	cmp	r5, r7
    425c:	d05f      	beq.n	431e <_malloc_r+0x4b6>
    425e:	68bd      	ldr	r5, [r7, #8]
    4260:	6868      	ldr	r0, [r5, #4]
    4262:	f020 0803 	bic.w	r8, r0, #3
    4266:	4546      	cmp	r6, r8
    4268:	eba8 0306 	sub.w	r3, r8, r6
    426c:	d802      	bhi.n	4274 <_malloc_r+0x40c>
    426e:	2b0f      	cmp	r3, #15
    4270:	f73f af62 	bgt.w	4138 <_malloc_r+0x2d0>
    4274:	4620      	mov	r0, r4
    4276:	f000 f8ad 	bl	43d4 <__malloc_unlock>
    427a:	2500      	movs	r5, #0
    427c:	e6bc      	b.n	3ff8 <_malloc_r+0x190>
    427e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    4282:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
    4286:	00c3      	lsls	r3, r0, #3
    4288:	e634      	b.n	3ef4 <_malloc_r+0x8c>
    428a:	f859 3908 	ldr.w	r3, [r9], #-8
    428e:	454b      	cmp	r3, r9
    4290:	f040 8096 	bne.w	43c0 <_malloc_r+0x558>
    4294:	f010 0f03 	tst.w	r0, #3
    4298:	f100 30ff 	add.w	r0, r0, #4294967295
    429c:	d1f5      	bne.n	428a <_malloc_r+0x422>
    429e:	687b      	ldr	r3, [r7, #4]
    42a0:	ea23 0301 	bic.w	r3, r3, r1
    42a4:	607b      	str	r3, [r7, #4]
    42a6:	0049      	lsls	r1, r1, #1
    42a8:	4299      	cmp	r1, r3
    42aa:	f63f aec0 	bhi.w	402e <_malloc_r+0x1c6>
    42ae:	b919      	cbnz	r1, 42b8 <_malloc_r+0x450>
    42b0:	e6bd      	b.n	402e <_malloc_r+0x1c6>
    42b2:	0049      	lsls	r1, r1, #1
    42b4:	f10e 0e04 	add.w	lr, lr, #4
    42b8:	4219      	tst	r1, r3
    42ba:	d0fa      	beq.n	42b2 <_malloc_r+0x44a>
    42bc:	4670      	mov	r0, lr
    42be:	e667      	b.n	3f90 <_malloc_r+0x128>
    42c0:	f103 0810 	add.w	r8, r3, #16
    42c4:	e6d0      	b.n	4068 <_malloc_r+0x200>
    42c6:	109a      	asrs	r2, r3, #2
    42c8:	f04f 0801 	mov.w	r8, #1
    42cc:	687b      	ldr	r3, [r7, #4]
    42ce:	fa08 f202 	lsl.w	r2, r8, r2
    42d2:	431a      	orrs	r2, r3
    42d4:	607a      	str	r2, [r7, #4]
    42d6:	e770      	b.n	41ba <_malloc_r+0x352>
    42d8:	eb02 0108 	add.w	r1, r2, r8
    42dc:	4249      	negs	r1, r1
    42de:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    42e2:	4651      	mov	r1, sl
    42e4:	4620      	mov	r0, r4
    42e6:	9200      	str	r2, [sp, #0]
    42e8:	f001 fe52 	bl	5f90 <_sbrk_r>
    42ec:	1c43      	adds	r3, r0, #1
    42ee:	e9dd 2300 	ldrd	r2, r3, [sp]
    42f2:	f47f aeef 	bne.w	40d4 <_malloc_r+0x26c>
    42f6:	46da      	mov	sl, fp
    42f8:	e6ef      	b.n	40da <_malloc_r+0x272>
    42fa:	2b54      	cmp	r3, #84	; 0x54
    42fc:	d825      	bhi.n	434a <_malloc_r+0x4e2>
    42fe:	0b13      	lsrs	r3, r2, #12
    4300:	f103 016f 	add.w	r1, r3, #111	; 0x6f
    4304:	00c9      	lsls	r1, r1, #3
    4306:	336e      	adds	r3, #110	; 0x6e
    4308:	e744      	b.n	4194 <_malloc_r+0x32c>
    430a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    430e:	d825      	bhi.n	435c <_malloc_r+0x4f4>
    4310:	0bf3      	lsrs	r3, r6, #15
    4312:	f103 0078 	add.w	r0, r3, #120	; 0x78
    4316:	f103 0c77 	add.w	ip, r3, #119	; 0x77
    431a:	00c3      	lsls	r3, r0, #3
    431c:	e5ea      	b.n	3ef4 <_malloc_r+0x8c>
    431e:	4b29      	ldr	r3, [pc, #164]	; (43c4 <_malloc_r+0x55c>)
    4320:	6818      	ldr	r0, [r3, #0]
    4322:	4440      	add	r0, r8
    4324:	6018      	str	r0, [r3, #0]
    4326:	e6b1      	b.n	408c <_malloc_r+0x224>
    4328:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
    432c:	f1bc 0f00 	cmp.w	ip, #0
    4330:	f47f aeac 	bne.w	408c <_malloc_r+0x224>
    4334:	68bd      	ldr	r5, [r7, #8]
    4336:	44c8      	add	r8, r9
    4338:	f048 0001 	orr.w	r0, r8, #1
    433c:	6068      	str	r0, [r5, #4]
    433e:	e6f0      	b.n	4122 <_malloc_r+0x2ba>
    4340:	4615      	mov	r5, r2
    4342:	e6ee      	b.n	4122 <_malloc_r+0x2ba>
    4344:	2301      	movs	r3, #1
    4346:	6053      	str	r3, [r2, #4]
    4348:	e794      	b.n	4274 <_malloc_r+0x40c>
    434a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    434e:	d823      	bhi.n	4398 <_malloc_r+0x530>
    4350:	0bd3      	lsrs	r3, r2, #15
    4352:	f103 0178 	add.w	r1, r3, #120	; 0x78
    4356:	00c9      	lsls	r1, r1, #3
    4358:	3377      	adds	r3, #119	; 0x77
    435a:	e71b      	b.n	4194 <_malloc_r+0x32c>
    435c:	f240 5254 	movw	r2, #1364	; 0x554
    4360:	4293      	cmp	r3, r2
    4362:	d823      	bhi.n	43ac <_malloc_r+0x544>
    4364:	0cb3      	lsrs	r3, r6, #18
    4366:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    436a:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
    436e:	00c3      	lsls	r3, r0, #3
    4370:	e5c0      	b.n	3ef4 <_malloc_r+0x8c>
    4372:	f1ab 0b08 	sub.w	fp, fp, #8
    4376:	44d8      	add	r8, fp
    4378:	eba8 0802 	sub.w	r8, r8, r2
    437c:	f04f 0a00 	mov.w	sl, #0
    4380:	e6ab      	b.n	40da <_malloc_r+0x272>
    4382:	f105 0108 	add.w	r1, r5, #8
    4386:	4620      	mov	r0, r4
    4388:	9300      	str	r3, [sp, #0]
    438a:	f002 f94b 	bl	6624 <_free_r>
    438e:	68bd      	ldr	r5, [r7, #8]
    4390:	9b00      	ldr	r3, [sp, #0]
    4392:	6868      	ldr	r0, [r5, #4]
    4394:	6819      	ldr	r1, [r3, #0]
    4396:	e6c4      	b.n	4122 <_malloc_r+0x2ba>
    4398:	f240 5154 	movw	r1, #1364	; 0x554
    439c:	428b      	cmp	r3, r1
    439e:	d80b      	bhi.n	43b8 <_malloc_r+0x550>
    43a0:	0c93      	lsrs	r3, r2, #18
    43a2:	f103 017d 	add.w	r1, r3, #125	; 0x7d
    43a6:	00c9      	lsls	r1, r1, #3
    43a8:	337c      	adds	r3, #124	; 0x7c
    43aa:	e6f3      	b.n	4194 <_malloc_r+0x32c>
    43ac:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    43b0:	207f      	movs	r0, #127	; 0x7f
    43b2:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
    43b6:	e59d      	b.n	3ef4 <_malloc_r+0x8c>
    43b8:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    43bc:	237e      	movs	r3, #126	; 0x7e
    43be:	e6e9      	b.n	4194 <_malloc_r+0x32c>
    43c0:	687b      	ldr	r3, [r7, #4]
    43c2:	e770      	b.n	42a6 <_malloc_r+0x43e>
    43c4:	20008c5c 	.word	0x20008c5c

000043c8 <__malloc_lock>:
    43c8:	4801      	ldr	r0, [pc, #4]	; (43d0 <__malloc_lock+0x8>)
    43ca:	f001 be37 	b.w	603c <__retarget_lock_acquire_recursive>
    43ce:	bf00      	nop
    43d0:	20008c54 	.word	0x20008c54

000043d4 <__malloc_unlock>:
    43d4:	4801      	ldr	r0, [pc, #4]	; (43dc <__malloc_unlock+0x8>)
    43d6:	f001 be33 	b.w	6040 <__retarget_lock_release_recursive>
    43da:	bf00      	nop
    43dc:	20008c54 	.word	0x20008c54

000043e0 <realloc>:
    43e0:	b410      	push	{r4}
    43e2:	4c04      	ldr	r4, [pc, #16]	; (43f4 <realloc+0x14>)
    43e4:	4603      	mov	r3, r0
    43e6:	460a      	mov	r2, r1
    43e8:	6820      	ldr	r0, [r4, #0]
    43ea:	f85d 4b04 	ldr.w	r4, [sp], #4
    43ee:	4619      	mov	r1, r3
    43f0:	f000 b802 	b.w	43f8 <_realloc_r>
    43f4:	200081d0 	.word	0x200081d0

000043f8 <_realloc_r>:
    43f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    43fc:	4617      	mov	r7, r2
    43fe:	2900      	cmp	r1, #0
    4400:	f000 8098 	beq.w	4534 <_realloc_r+0x13c>
    4404:	460c      	mov	r4, r1
    4406:	f107 050b 	add.w	r5, r7, #11
    440a:	4680      	mov	r8, r0
    440c:	f7ff ffdc 	bl	43c8 <__malloc_lock>
    4410:	2d16      	cmp	r5, #22
    4412:	f854 1c04 	ldr.w	r1, [r4, #-4]
    4416:	d85b      	bhi.n	44d0 <_realloc_r+0xd8>
    4418:	2510      	movs	r5, #16
    441a:	462a      	mov	r2, r5
    441c:	42af      	cmp	r7, r5
    441e:	d85c      	bhi.n	44da <_realloc_r+0xe2>
    4420:	f021 0603 	bic.w	r6, r1, #3
    4424:	4296      	cmp	r6, r2
    4426:	f1a4 0908 	sub.w	r9, r4, #8
    442a:	da62      	bge.n	44f2 <_realloc_r+0xfa>
    442c:	4bbc      	ldr	r3, [pc, #752]	; (4720 <_realloc_r+0x328>)
    442e:	f8d3 c008 	ldr.w	ip, [r3, #8]
    4432:	eb09 0006 	add.w	r0, r9, r6
    4436:	4584      	cmp	ip, r0
    4438:	f000 8097 	beq.w	456a <_realloc_r+0x172>
    443c:	f8d0 c004 	ldr.w	ip, [r0, #4]
    4440:	f02c 0301 	bic.w	r3, ip, #1
    4444:	4403      	add	r3, r0
    4446:	685b      	ldr	r3, [r3, #4]
    4448:	07db      	lsls	r3, r3, #31
    444a:	d468      	bmi.n	451e <_realloc_r+0x126>
    444c:	f02c 0c03 	bic.w	ip, ip, #3
    4450:	eb06 030c 	add.w	r3, r6, ip
    4454:	4293      	cmp	r3, r2
    4456:	da47      	bge.n	44e8 <_realloc_r+0xf0>
    4458:	07cb      	lsls	r3, r1, #31
    445a:	d410      	bmi.n	447e <_realloc_r+0x86>
    445c:	f854 3c08 	ldr.w	r3, [r4, #-8]
    4460:	eba9 0a03 	sub.w	sl, r9, r3
    4464:	f8da 3004 	ldr.w	r3, [sl, #4]
    4468:	f023 0103 	bic.w	r1, r3, #3
    446c:	448c      	add	ip, r1
    446e:	44b4      	add	ip, r6
    4470:	4594      	cmp	ip, r2
    4472:	f280 8111 	bge.w	4698 <_realloc_r+0x2a0>
    4476:	1873      	adds	r3, r6, r1
    4478:	4293      	cmp	r3, r2
    447a:	f280 80e8 	bge.w	464e <_realloc_r+0x256>
    447e:	4639      	mov	r1, r7
    4480:	4640      	mov	r0, r8
    4482:	f7ff fcf1 	bl	3e68 <_malloc_r>
    4486:	4607      	mov	r7, r0
    4488:	b1e0      	cbz	r0, 44c4 <_realloc_r+0xcc>
    448a:	f854 3c04 	ldr.w	r3, [r4, #-4]
    448e:	f023 0301 	bic.w	r3, r3, #1
    4492:	444b      	add	r3, r9
    4494:	f1a0 0208 	sub.w	r2, r0, #8
    4498:	4293      	cmp	r3, r2
    449a:	f000 80d2 	beq.w	4642 <_realloc_r+0x24a>
    449e:	1f32      	subs	r2, r6, #4
    44a0:	2a24      	cmp	r2, #36	; 0x24
    44a2:	f200 80f5 	bhi.w	4690 <_realloc_r+0x298>
    44a6:	2a13      	cmp	r2, #19
    44a8:	f200 80ac 	bhi.w	4604 <_realloc_r+0x20c>
    44ac:	4603      	mov	r3, r0
    44ae:	4622      	mov	r2, r4
    44b0:	6811      	ldr	r1, [r2, #0]
    44b2:	6019      	str	r1, [r3, #0]
    44b4:	6851      	ldr	r1, [r2, #4]
    44b6:	6059      	str	r1, [r3, #4]
    44b8:	6892      	ldr	r2, [r2, #8]
    44ba:	609a      	str	r2, [r3, #8]
    44bc:	4621      	mov	r1, r4
    44be:	4640      	mov	r0, r8
    44c0:	f002 f8b0 	bl	6624 <_free_r>
    44c4:	4640      	mov	r0, r8
    44c6:	f7ff ff85 	bl	43d4 <__malloc_unlock>
    44ca:	4638      	mov	r0, r7
    44cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    44d0:	f025 0507 	bic.w	r5, r5, #7
    44d4:	2d00      	cmp	r5, #0
    44d6:	462a      	mov	r2, r5
    44d8:	daa0      	bge.n	441c <_realloc_r+0x24>
    44da:	230c      	movs	r3, #12
    44dc:	f8c8 3000 	str.w	r3, [r8]
    44e0:	2700      	movs	r7, #0
    44e2:	4638      	mov	r0, r7
    44e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    44e8:	461e      	mov	r6, r3
    44ea:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    44ee:	60d3      	str	r3, [r2, #12]
    44f0:	609a      	str	r2, [r3, #8]
    44f2:	1b73      	subs	r3, r6, r5
    44f4:	2b0f      	cmp	r3, #15
    44f6:	d822      	bhi.n	453e <_realloc_r+0x146>
    44f8:	f8d9 3004 	ldr.w	r3, [r9, #4]
    44fc:	f003 0301 	and.w	r3, r3, #1
    4500:	4333      	orrs	r3, r6
    4502:	444e      	add	r6, r9
    4504:	f8c9 3004 	str.w	r3, [r9, #4]
    4508:	6873      	ldr	r3, [r6, #4]
    450a:	f043 0301 	orr.w	r3, r3, #1
    450e:	6073      	str	r3, [r6, #4]
    4510:	4640      	mov	r0, r8
    4512:	4627      	mov	r7, r4
    4514:	f7ff ff5e 	bl	43d4 <__malloc_unlock>
    4518:	4638      	mov	r0, r7
    451a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    451e:	07c9      	lsls	r1, r1, #31
    4520:	d4ad      	bmi.n	447e <_realloc_r+0x86>
    4522:	f854 3c08 	ldr.w	r3, [r4, #-8]
    4526:	eba9 0a03 	sub.w	sl, r9, r3
    452a:	f8da 1004 	ldr.w	r1, [sl, #4]
    452e:	f021 0103 	bic.w	r1, r1, #3
    4532:	e7a0      	b.n	4476 <_realloc_r+0x7e>
    4534:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4538:	4611      	mov	r1, r2
    453a:	f7ff bc95 	b.w	3e68 <_malloc_r>
    453e:	f8d9 2004 	ldr.w	r2, [r9, #4]
    4542:	eb09 0105 	add.w	r1, r9, r5
    4546:	f002 0201 	and.w	r2, r2, #1
    454a:	444e      	add	r6, r9
    454c:	f043 0301 	orr.w	r3, r3, #1
    4550:	432a      	orrs	r2, r5
    4552:	f8c9 2004 	str.w	r2, [r9, #4]
    4556:	604b      	str	r3, [r1, #4]
    4558:	6873      	ldr	r3, [r6, #4]
    455a:	f043 0301 	orr.w	r3, r3, #1
    455e:	3108      	adds	r1, #8
    4560:	6073      	str	r3, [r6, #4]
    4562:	4640      	mov	r0, r8
    4564:	f002 f85e 	bl	6624 <_free_r>
    4568:	e7d2      	b.n	4510 <_realloc_r+0x118>
    456a:	f8dc 0004 	ldr.w	r0, [ip, #4]
    456e:	f020 0b03 	bic.w	fp, r0, #3
    4572:	eb06 0c0b 	add.w	ip, r6, fp
    4576:	f105 0010 	add.w	r0, r5, #16
    457a:	4584      	cmp	ip, r0
    457c:	da4d      	bge.n	461a <_realloc_r+0x222>
    457e:	07c9      	lsls	r1, r1, #31
    4580:	f53f af7d 	bmi.w	447e <_realloc_r+0x86>
    4584:	f854 1c08 	ldr.w	r1, [r4, #-8]
    4588:	eba9 0a01 	sub.w	sl, r9, r1
    458c:	f8da 1004 	ldr.w	r1, [sl, #4]
    4590:	f021 0103 	bic.w	r1, r1, #3
    4594:	448b      	add	fp, r1
    4596:	44b3      	add	fp, r6
    4598:	4558      	cmp	r0, fp
    459a:	f73f af6c 	bgt.w	4476 <_realloc_r+0x7e>
    459e:	4657      	mov	r7, sl
    45a0:	f8da 100c 	ldr.w	r1, [sl, #12]
    45a4:	f857 0f08 	ldr.w	r0, [r7, #8]!
    45a8:	1f32      	subs	r2, r6, #4
    45aa:	2a24      	cmp	r2, #36	; 0x24
    45ac:	60c1      	str	r1, [r0, #12]
    45ae:	6088      	str	r0, [r1, #8]
    45b0:	f200 80db 	bhi.w	476a <_realloc_r+0x372>
    45b4:	2a13      	cmp	r2, #19
    45b6:	f240 80d6 	bls.w	4766 <_realloc_r+0x36e>
    45ba:	6821      	ldr	r1, [r4, #0]
    45bc:	f8ca 1008 	str.w	r1, [sl, #8]
    45c0:	6861      	ldr	r1, [r4, #4]
    45c2:	f8ca 100c 	str.w	r1, [sl, #12]
    45c6:	2a1b      	cmp	r2, #27
    45c8:	f200 80df 	bhi.w	478a <_realloc_r+0x392>
    45cc:	3408      	adds	r4, #8
    45ce:	f10a 0210 	add.w	r2, sl, #16
    45d2:	6821      	ldr	r1, [r4, #0]
    45d4:	6011      	str	r1, [r2, #0]
    45d6:	6861      	ldr	r1, [r4, #4]
    45d8:	6051      	str	r1, [r2, #4]
    45da:	68a1      	ldr	r1, [r4, #8]
    45dc:	6091      	str	r1, [r2, #8]
    45de:	eb0a 0105 	add.w	r1, sl, r5
    45e2:	ebab 0205 	sub.w	r2, fp, r5
    45e6:	f042 0201 	orr.w	r2, r2, #1
    45ea:	6099      	str	r1, [r3, #8]
    45ec:	604a      	str	r2, [r1, #4]
    45ee:	f8da 3004 	ldr.w	r3, [sl, #4]
    45f2:	f003 0301 	and.w	r3, r3, #1
    45f6:	432b      	orrs	r3, r5
    45f8:	4640      	mov	r0, r8
    45fa:	f8ca 3004 	str.w	r3, [sl, #4]
    45fe:	f7ff fee9 	bl	43d4 <__malloc_unlock>
    4602:	e76e      	b.n	44e2 <_realloc_r+0xea>
    4604:	6823      	ldr	r3, [r4, #0]
    4606:	6003      	str	r3, [r0, #0]
    4608:	6863      	ldr	r3, [r4, #4]
    460a:	6043      	str	r3, [r0, #4]
    460c:	2a1b      	cmp	r2, #27
    460e:	d868      	bhi.n	46e2 <_realloc_r+0x2ea>
    4610:	f104 0208 	add.w	r2, r4, #8
    4614:	f100 0308 	add.w	r3, r0, #8
    4618:	e74a      	b.n	44b0 <_realloc_r+0xb8>
    461a:	eb09 0205 	add.w	r2, r9, r5
    461e:	609a      	str	r2, [r3, #8]
    4620:	ebac 0305 	sub.w	r3, ip, r5
    4624:	f043 0301 	orr.w	r3, r3, #1
    4628:	6053      	str	r3, [r2, #4]
    462a:	f854 3c04 	ldr.w	r3, [r4, #-4]
    462e:	f003 0301 	and.w	r3, r3, #1
    4632:	432b      	orrs	r3, r5
    4634:	4640      	mov	r0, r8
    4636:	f844 3c04 	str.w	r3, [r4, #-4]
    463a:	f7ff fecb 	bl	43d4 <__malloc_unlock>
    463e:	4627      	mov	r7, r4
    4640:	e74f      	b.n	44e2 <_realloc_r+0xea>
    4642:	f850 3c04 	ldr.w	r3, [r0, #-4]
    4646:	f023 0303 	bic.w	r3, r3, #3
    464a:	441e      	add	r6, r3
    464c:	e751      	b.n	44f2 <_realloc_r+0xfa>
    464e:	4657      	mov	r7, sl
    4650:	f8da 100c 	ldr.w	r1, [sl, #12]
    4654:	f857 0f08 	ldr.w	r0, [r7, #8]!
    4658:	1f32      	subs	r2, r6, #4
    465a:	2a24      	cmp	r2, #36	; 0x24
    465c:	60c1      	str	r1, [r0, #12]
    465e:	6088      	str	r0, [r1, #8]
    4660:	d84c      	bhi.n	46fc <_realloc_r+0x304>
    4662:	2a13      	cmp	r2, #19
    4664:	d948      	bls.n	46f8 <_realloc_r+0x300>
    4666:	6821      	ldr	r1, [r4, #0]
    4668:	f8ca 1008 	str.w	r1, [sl, #8]
    466c:	6861      	ldr	r1, [r4, #4]
    466e:	f8ca 100c 	str.w	r1, [sl, #12]
    4672:	2a1b      	cmp	r2, #27
    4674:	d856      	bhi.n	4724 <_realloc_r+0x32c>
    4676:	3408      	adds	r4, #8
    4678:	f10a 0210 	add.w	r2, sl, #16
    467c:	461e      	mov	r6, r3
    467e:	6823      	ldr	r3, [r4, #0]
    4680:	6013      	str	r3, [r2, #0]
    4682:	6863      	ldr	r3, [r4, #4]
    4684:	6053      	str	r3, [r2, #4]
    4686:	68a3      	ldr	r3, [r4, #8]
    4688:	6093      	str	r3, [r2, #8]
    468a:	46d1      	mov	r9, sl
    468c:	463c      	mov	r4, r7
    468e:	e730      	b.n	44f2 <_realloc_r+0xfa>
    4690:	4621      	mov	r1, r4
    4692:	f001 fa8d 	bl	5bb0 <memmove>
    4696:	e711      	b.n	44bc <_realloc_r+0xc4>
    4698:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
    469c:	4657      	mov	r7, sl
    469e:	60cb      	str	r3, [r1, #12]
    46a0:	6099      	str	r1, [r3, #8]
    46a2:	f857 1f08 	ldr.w	r1, [r7, #8]!
    46a6:	f8da 300c 	ldr.w	r3, [sl, #12]
    46aa:	60cb      	str	r3, [r1, #12]
    46ac:	1f32      	subs	r2, r6, #4
    46ae:	2a24      	cmp	r2, #36	; 0x24
    46b0:	6099      	str	r1, [r3, #8]
    46b2:	d82d      	bhi.n	4710 <_realloc_r+0x318>
    46b4:	2a13      	cmp	r2, #19
    46b6:	d929      	bls.n	470c <_realloc_r+0x314>
    46b8:	6823      	ldr	r3, [r4, #0]
    46ba:	f8ca 3008 	str.w	r3, [sl, #8]
    46be:	6863      	ldr	r3, [r4, #4]
    46c0:	f8ca 300c 	str.w	r3, [sl, #12]
    46c4:	2a1b      	cmp	r2, #27
    46c6:	d842      	bhi.n	474e <_realloc_r+0x356>
    46c8:	3408      	adds	r4, #8
    46ca:	f10a 0310 	add.w	r3, sl, #16
    46ce:	6822      	ldr	r2, [r4, #0]
    46d0:	601a      	str	r2, [r3, #0]
    46d2:	6862      	ldr	r2, [r4, #4]
    46d4:	605a      	str	r2, [r3, #4]
    46d6:	68a2      	ldr	r2, [r4, #8]
    46d8:	609a      	str	r2, [r3, #8]
    46da:	4666      	mov	r6, ip
    46dc:	46d1      	mov	r9, sl
    46de:	463c      	mov	r4, r7
    46e0:	e707      	b.n	44f2 <_realloc_r+0xfa>
    46e2:	68a3      	ldr	r3, [r4, #8]
    46e4:	6083      	str	r3, [r0, #8]
    46e6:	68e3      	ldr	r3, [r4, #12]
    46e8:	60c3      	str	r3, [r0, #12]
    46ea:	2a24      	cmp	r2, #36	; 0x24
    46ec:	d026      	beq.n	473c <_realloc_r+0x344>
    46ee:	f104 0210 	add.w	r2, r4, #16
    46f2:	f100 0310 	add.w	r3, r0, #16
    46f6:	e6db      	b.n	44b0 <_realloc_r+0xb8>
    46f8:	463a      	mov	r2, r7
    46fa:	e7bf      	b.n	467c <_realloc_r+0x284>
    46fc:	4621      	mov	r1, r4
    46fe:	4638      	mov	r0, r7
    4700:	461e      	mov	r6, r3
    4702:	46d1      	mov	r9, sl
    4704:	f001 fa54 	bl	5bb0 <memmove>
    4708:	463c      	mov	r4, r7
    470a:	e6f2      	b.n	44f2 <_realloc_r+0xfa>
    470c:	463b      	mov	r3, r7
    470e:	e7de      	b.n	46ce <_realloc_r+0x2d6>
    4710:	4621      	mov	r1, r4
    4712:	4638      	mov	r0, r7
    4714:	4666      	mov	r6, ip
    4716:	46d1      	mov	r9, sl
    4718:	f001 fa4a 	bl	5bb0 <memmove>
    471c:	463c      	mov	r4, r7
    471e:	e6e8      	b.n	44f2 <_realloc_r+0xfa>
    4720:	20007db4 	.word	0x20007db4
    4724:	68a1      	ldr	r1, [r4, #8]
    4726:	f8ca 1010 	str.w	r1, [sl, #16]
    472a:	68e1      	ldr	r1, [r4, #12]
    472c:	f8ca 1014 	str.w	r1, [sl, #20]
    4730:	2a24      	cmp	r2, #36	; 0x24
    4732:	d020      	beq.n	4776 <_realloc_r+0x37e>
    4734:	3410      	adds	r4, #16
    4736:	f10a 0218 	add.w	r2, sl, #24
    473a:	e79f      	b.n	467c <_realloc_r+0x284>
    473c:	6923      	ldr	r3, [r4, #16]
    473e:	6103      	str	r3, [r0, #16]
    4740:	6961      	ldr	r1, [r4, #20]
    4742:	6141      	str	r1, [r0, #20]
    4744:	f104 0218 	add.w	r2, r4, #24
    4748:	f100 0318 	add.w	r3, r0, #24
    474c:	e6b0      	b.n	44b0 <_realloc_r+0xb8>
    474e:	68a3      	ldr	r3, [r4, #8]
    4750:	f8ca 3010 	str.w	r3, [sl, #16]
    4754:	68e3      	ldr	r3, [r4, #12]
    4756:	f8ca 3014 	str.w	r3, [sl, #20]
    475a:	2a24      	cmp	r2, #36	; 0x24
    475c:	d021      	beq.n	47a2 <_realloc_r+0x3aa>
    475e:	3410      	adds	r4, #16
    4760:	f10a 0318 	add.w	r3, sl, #24
    4764:	e7b3      	b.n	46ce <_realloc_r+0x2d6>
    4766:	463a      	mov	r2, r7
    4768:	e733      	b.n	45d2 <_realloc_r+0x1da>
    476a:	4621      	mov	r1, r4
    476c:	4638      	mov	r0, r7
    476e:	f001 fa1f 	bl	5bb0 <memmove>
    4772:	4b16      	ldr	r3, [pc, #88]	; (47cc <_realloc_r+0x3d4>)
    4774:	e733      	b.n	45de <_realloc_r+0x1e6>
    4776:	6922      	ldr	r2, [r4, #16]
    4778:	f8ca 2018 	str.w	r2, [sl, #24]
    477c:	6962      	ldr	r2, [r4, #20]
    477e:	f8ca 201c 	str.w	r2, [sl, #28]
    4782:	3418      	adds	r4, #24
    4784:	f10a 0220 	add.w	r2, sl, #32
    4788:	e778      	b.n	467c <_realloc_r+0x284>
    478a:	68a1      	ldr	r1, [r4, #8]
    478c:	f8ca 1010 	str.w	r1, [sl, #16]
    4790:	68e1      	ldr	r1, [r4, #12]
    4792:	f8ca 1014 	str.w	r1, [sl, #20]
    4796:	2a24      	cmp	r2, #36	; 0x24
    4798:	d00d      	beq.n	47b6 <_realloc_r+0x3be>
    479a:	3410      	adds	r4, #16
    479c:	f10a 0218 	add.w	r2, sl, #24
    47a0:	e717      	b.n	45d2 <_realloc_r+0x1da>
    47a2:	6923      	ldr	r3, [r4, #16]
    47a4:	f8ca 3018 	str.w	r3, [sl, #24]
    47a8:	6963      	ldr	r3, [r4, #20]
    47aa:	f8ca 301c 	str.w	r3, [sl, #28]
    47ae:	3418      	adds	r4, #24
    47b0:	f10a 0320 	add.w	r3, sl, #32
    47b4:	e78b      	b.n	46ce <_realloc_r+0x2d6>
    47b6:	6922      	ldr	r2, [r4, #16]
    47b8:	f8ca 2018 	str.w	r2, [sl, #24]
    47bc:	6962      	ldr	r2, [r4, #20]
    47be:	f8ca 201c 	str.w	r2, [sl, #28]
    47c2:	3418      	adds	r4, #24
    47c4:	f10a 0220 	add.w	r2, sl, #32
    47c8:	e703      	b.n	45d2 <_realloc_r+0x1da>
    47ca:	bf00      	nop
    47cc:	20007db4 	.word	0x20007db4

000047d0 <_strtod_l>:
    47d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    47d4:	ed2d 8b10 	vpush	{d8-d15}
    47d8:	b097      	sub	sp, #92	; 0x5c
    47da:	468a      	mov	sl, r1
    47dc:	2100      	movs	r1, #0
    47de:	9207      	str	r2, [sp, #28]
    47e0:	9112      	str	r1, [sp, #72]	; 0x48
    47e2:	2200      	movs	r2, #0
    47e4:	2100      	movs	r1, #0
    47e6:	e9cd 1204 	strd	r1, r2, [sp, #16]
    47ea:	4680      	mov	r8, r0
    47ec:	4651      	mov	r1, sl
    47ee:	9111      	str	r1, [sp, #68]	; 0x44
    47f0:	460f      	mov	r7, r1
    47f2:	f811 2b01 	ldrb.w	r2, [r1], #1
    47f6:	2a2d      	cmp	r2, #45	; 0x2d
    47f8:	d85e      	bhi.n	48b8 <_strtod_l+0xe8>
    47fa:	a001      	add	r0, pc, #4	; (adr r0, 4800 <_strtod_l+0x30>)
    47fc:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
    4800:	000049a1 	.word	0x000049a1
    4804:	000048b9 	.word	0x000048b9
    4808:	000048b9 	.word	0x000048b9
    480c:	000048b9 	.word	0x000048b9
    4810:	000048b9 	.word	0x000048b9
    4814:	000048b9 	.word	0x000048b9
    4818:	000048b9 	.word	0x000048b9
    481c:	000048b9 	.word	0x000048b9
    4820:	000048b9 	.word	0x000048b9
    4824:	000047ef 	.word	0x000047ef
    4828:	000047ef 	.word	0x000047ef
    482c:	000047ef 	.word	0x000047ef
    4830:	000047ef 	.word	0x000047ef
    4834:	000047ef 	.word	0x000047ef
    4838:	000048b9 	.word	0x000048b9
    483c:	000048b9 	.word	0x000048b9
    4840:	000048b9 	.word	0x000048b9
    4844:	000048b9 	.word	0x000048b9
    4848:	000048b9 	.word	0x000048b9
    484c:	000048b9 	.word	0x000048b9
    4850:	000048b9 	.word	0x000048b9
    4854:	000048b9 	.word	0x000048b9
    4858:	000048b9 	.word	0x000048b9
    485c:	000048b9 	.word	0x000048b9
    4860:	000048b9 	.word	0x000048b9
    4864:	000048b9 	.word	0x000048b9
    4868:	000048b9 	.word	0x000048b9
    486c:	000048b9 	.word	0x000048b9
    4870:	000048b9 	.word	0x000048b9
    4874:	000048b9 	.word	0x000048b9
    4878:	000048b9 	.word	0x000048b9
    487c:	000048b9 	.word	0x000048b9
    4880:	000047ef 	.word	0x000047ef
    4884:	000048b9 	.word	0x000048b9
    4888:	000048b9 	.word	0x000048b9
    488c:	000048b9 	.word	0x000048b9
    4890:	000048b9 	.word	0x000048b9
    4894:	000048b9 	.word	0x000048b9
    4898:	000048b9 	.word	0x000048b9
    489c:	000048b9 	.word	0x000048b9
    48a0:	000048b9 	.word	0x000048b9
    48a4:	000048b9 	.word	0x000048b9
    48a8:	000048b9 	.word	0x000048b9
    48ac:	00004fdb 	.word	0x00004fdb
    48b0:	000048b9 	.word	0x000048b9
    48b4:	00004fc7 	.word	0x00004fc7
    48b8:	2100      	movs	r1, #0
    48ba:	9109      	str	r1, [sp, #36]	; 0x24
    48bc:	2a30      	cmp	r2, #48	; 0x30
    48be:	d07d      	beq.n	49bc <_strtod_l+0x1ec>
    48c0:	2300      	movs	r3, #0
    48c2:	9308      	str	r3, [sp, #32]
    48c4:	2a2f      	cmp	r2, #47	; 0x2f
    48c6:	4614      	mov	r4, r2
    48c8:	f240 84cd 	bls.w	5266 <_strtod_l+0xa96>
    48cc:	f04f 0900 	mov.w	r9, #0
    48d0:	4638      	mov	r0, r7
    48d2:	464e      	mov	r6, r9
    48d4:	464d      	mov	r5, r9
    48d6:	e012      	b.n	48fe <_strtod_l+0x12e>
    48d8:	3001      	adds	r0, #1
    48da:	2d08      	cmp	r5, #8
    48dc:	9011      	str	r0, [sp, #68]	; 0x44
    48de:	bfc8      	it	gt
    48e0:	eb09 0989 	addgt.w	r9, r9, r9, lsl #2
    48e4:	7804      	ldrb	r4, [r0, #0]
    48e6:	bfc6      	itte	gt
    48e8:	eb02 0249 	addgt.w	r2, r2, r9, lsl #1
    48ec:	f1a2 0930 	subgt.w	r9, r2, #48	; 0x30
    48f0:	f1a3 0630 	suble.w	r6, r3, #48	; 0x30
    48f4:	2c2f      	cmp	r4, #47	; 0x2f
    48f6:	f105 0501 	add.w	r5, r5, #1
    48fa:	4622      	mov	r2, r4
    48fc:	dd6f      	ble.n	49de <_strtod_l+0x20e>
    48fe:	eb06 0386 	add.w	r3, r6, r6, lsl #2
    4902:	2c39      	cmp	r4, #57	; 0x39
    4904:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    4908:	dde6      	ble.n	48d8 <_strtod_l+0x108>
    490a:	499f      	ldr	r1, [pc, #636]	; (4b88 <_strtod_l+0x3b8>)
    490c:	2201      	movs	r2, #1
    490e:	f001 fa83 	bl	5e18 <strncmp>
    4912:	2800      	cmp	r0, #0
    4914:	d137      	bne.n	4986 <_strtod_l+0x1b6>
    4916:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4918:	461a      	mov	r2, r3
    491a:	3301      	adds	r3, #1
    491c:	9311      	str	r3, [sp, #68]	; 0x44
    491e:	7854      	ldrb	r4, [r2, #1]
    4920:	2d00      	cmp	r5, #0
    4922:	f040 8543 	bne.w	53ac <_strtod_l+0xbdc>
    4926:	2c30      	cmp	r4, #48	; 0x30
    4928:	f040 8524 	bne.w	5374 <_strtod_l+0xba4>
    492c:	f1c3 0201 	rsb	r2, r3, #1
    4930:	1898      	adds	r0, r3, r2
    4932:	3301      	adds	r3, #1
    4934:	9311      	str	r3, [sp, #68]	; 0x44
    4936:	781c      	ldrb	r4, [r3, #0]
    4938:	2c30      	cmp	r4, #48	; 0x30
    493a:	d0f9      	beq.n	4930 <_strtod_l+0x160>
    493c:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
    4940:	2b08      	cmp	r3, #8
    4942:	f200 8301 	bhi.w	4f48 <_strtod_l+0x778>
    4946:	9f11      	ldr	r7, [sp, #68]	; 0x44
    4948:	1c43      	adds	r3, r0, #1
    494a:	f1a4 0b30 	sub.w	fp, r4, #48	; 0x30
    494e:	930b      	str	r3, [sp, #44]	; 0x2c
    4950:	2501      	movs	r5, #1
    4952:	46bc      	mov	ip, r7
    4954:	f04f 0e00 	mov.w	lr, #0
    4958:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    495c:	eb0b 0646 	add.w	r6, fp, r6, lsl #1
    4960:	2000      	movs	r0, #0
    4962:	f10c 0301 	add.w	r3, ip, #1
    4966:	9311      	str	r3, [sp, #68]	; 0x44
    4968:	f89c 4001 	ldrb.w	r4, [ip, #1]
    496c:	f1a4 0130 	sub.w	r1, r4, #48	; 0x30
    4970:	2909      	cmp	r1, #9
    4972:	f200 82bb 	bhi.w	4eec <_strtod_l+0x71c>
    4976:	3001      	adds	r0, #1
    4978:	468b      	mov	fp, r1
    497a:	2900      	cmp	r1, #0
    497c:	f040 844f 	bne.w	521e <_strtod_l+0xa4e>
    4980:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
    4984:	e7ed      	b.n	4962 <_strtod_l+0x192>
    4986:	2000      	movs	r0, #0
    4988:	2c65      	cmp	r4, #101	; 0x65
    498a:	46ae      	mov	lr, r5
    498c:	900b      	str	r0, [sp, #44]	; 0x2c
    498e:	4684      	mov	ip, r0
    4990:	d001      	beq.n	4996 <_strtod_l+0x1c6>
    4992:	2c45      	cmp	r4, #69	; 0x45
    4994:	d130      	bne.n	49f8 <_strtod_l+0x228>
    4996:	2d00      	cmp	r5, #0
    4998:	d16b      	bne.n	4a72 <_strtod_l+0x2a2>
    499a:	9b08      	ldr	r3, [sp, #32]
    499c:	4303      	orrs	r3, r0
    499e:	d167      	bne.n	4a70 <_strtod_l+0x2a0>
    49a0:	9b07      	ldr	r3, [sp, #28]
    49a2:	ed9f 8b77 	vldr	d8, [pc, #476]	; 4b80 <_strtod_l+0x3b0>
    49a6:	b113      	cbz	r3, 49ae <_strtod_l+0x1de>
    49a8:	9b07      	ldr	r3, [sp, #28]
    49aa:	f8c3 a000 	str.w	sl, [r3]
    49ae:	eeb0 0b48 	vmov.f64	d0, d8
    49b2:	b017      	add	sp, #92	; 0x5c
    49b4:	ecbd 8b10 	vpop	{d8-d15}
    49b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    49bc:	787a      	ldrb	r2, [r7, #1]
    49be:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    49c2:	2a58      	cmp	r2, #88	; 0x58
    49c4:	f000 840c 	beq.w	51e0 <_strtod_l+0xa10>
    49c8:	3701      	adds	r7, #1
    49ca:	9711      	str	r7, [sp, #68]	; 0x44
    49cc:	783a      	ldrb	r2, [r7, #0]
    49ce:	2a30      	cmp	r2, #48	; 0x30
    49d0:	d0fa      	beq.n	49c8 <_strtod_l+0x1f8>
    49d2:	2a00      	cmp	r2, #0
    49d4:	f000 80b7 	beq.w	4b46 <_strtod_l+0x376>
    49d8:	2301      	movs	r3, #1
    49da:	9308      	str	r3, [sp, #32]
    49dc:	e772      	b.n	48c4 <_strtod_l+0xf4>
    49de:	496a      	ldr	r1, [pc, #424]	; (4b88 <_strtod_l+0x3b8>)
    49e0:	2201      	movs	r2, #1
    49e2:	f001 fa19 	bl	5e18 <strncmp>
    49e6:	2800      	cmp	r0, #0
    49e8:	f000 80c0 	beq.w	4b6c <_strtod_l+0x39c>
    49ec:	46ae      	mov	lr, r5
    49ee:	f04f 0c00 	mov.w	ip, #0
    49f2:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
    49f6:	4660      	mov	r0, ip
    49f8:	f04f 0b00 	mov.w	fp, #0
    49fc:	2d00      	cmp	r5, #0
    49fe:	d07e      	beq.n	4afe <_strtod_l+0x32e>
    4a00:	ee07 6a90 	vmov	s15, r6
    4a04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4a06:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    4a0a:	ebab 0303 	sub.w	r3, fp, r3
    4a0e:	f1be 0f00 	cmp.w	lr, #0
    4a12:	bf08      	it	eq
    4a14:	46ae      	moveq	lr, r5
    4a16:	2d10      	cmp	r5, #16
    4a18:	930a      	str	r3, [sp, #40]	; 0x28
    4a1a:	462b      	mov	r3, r5
    4a1c:	bfa8      	it	ge
    4a1e:	2310      	movge	r3, #16
    4a20:	2d09      	cmp	r5, #9
    4a22:	ed8d 7b04 	vstr	d7, [sp, #16]
    4a26:	dd0c      	ble.n	4a42 <_strtod_l+0x272>
    4a28:	4a58      	ldr	r2, [pc, #352]	; (4b8c <_strtod_l+0x3bc>)
    4a2a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    4a2e:	ed12 5b12 	vldr	d5, [r2, #-72]	; 0xffffffb8
    4a32:	ee06 9a90 	vmov	s13, r9
    4a36:	eeb8 6b66 	vcvt.f64.u32	d6, s13
    4a3a:	eea7 6b05 	vfma.f64	d6, d7, d5
    4a3e:	ed8d 6b04 	vstr	d6, [sp, #16]
    4a42:	2d0f      	cmp	r5, #15
    4a44:	f300 80a8 	bgt.w	4b98 <_strtod_l+0x3c8>
    4a48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4a4a:	2a00      	cmp	r2, #0
    4a4c:	f000 83e4 	beq.w	5218 <_strtod_l+0xa48>
    4a50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4a52:	f340 833c 	ble.w	50ce <_strtod_l+0x8fe>
    4a56:	2a16      	cmp	r2, #22
    4a58:	f340 8498 	ble.w	538c <_strtod_l+0xbbc>
    4a5c:	990a      	ldr	r1, [sp, #40]	; 0x28
    4a5e:	f1c5 0225 	rsb	r2, r5, #37	; 0x25
    4a62:	428a      	cmp	r2, r1
    4a64:	f280 84a6 	bge.w	53b4 <_strtod_l+0xbe4>
    4a68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4a6a:	1aeb      	subs	r3, r5, r3
    4a6c:	4413      	add	r3, r2
    4a6e:	e099      	b.n	4ba4 <_strtod_l+0x3d4>
    4a70:	2500      	movs	r5, #0
    4a72:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
    4a76:	f10a 0301 	add.w	r3, sl, #1
    4a7a:	9311      	str	r3, [sp, #68]	; 0x44
    4a7c:	f89a 4001 	ldrb.w	r4, [sl, #1]
    4a80:	2c2b      	cmp	r4, #43	; 0x2b
    4a82:	f000 825e 	beq.w	4f42 <_strtod_l+0x772>
    4a86:	2c2d      	cmp	r4, #45	; 0x2d
    4a88:	f000 81f7 	beq.w	4e7a <_strtod_l+0x6aa>
    4a8c:	2300      	movs	r3, #0
    4a8e:	930a      	str	r3, [sp, #40]	; 0x28
    4a90:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    4a94:	2b09      	cmp	r3, #9
    4a96:	f200 81eb 	bhi.w	4e70 <_strtod_l+0x6a0>
    4a9a:	2c30      	cmp	r4, #48	; 0x30
    4a9c:	d105      	bne.n	4aaa <_strtod_l+0x2da>
    4a9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4aa0:	3301      	adds	r3, #1
    4aa2:	9311      	str	r3, [sp, #68]	; 0x44
    4aa4:	781c      	ldrb	r4, [r3, #0]
    4aa6:	2c30      	cmp	r4, #48	; 0x30
    4aa8:	d0fa      	beq.n	4aa0 <_strtod_l+0x2d0>
    4aaa:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
    4aae:	2b08      	cmp	r3, #8
    4ab0:	d8a2      	bhi.n	49f8 <_strtod_l+0x228>
    4ab2:	9a11      	ldr	r2, [sp, #68]	; 0x44
    4ab4:	920c      	str	r2, [sp, #48]	; 0x30
    4ab6:	1c53      	adds	r3, r2, #1
    4ab8:	9311      	str	r3, [sp, #68]	; 0x44
    4aba:	f1a4 0b30 	sub.w	fp, r4, #48	; 0x30
    4abe:	7854      	ldrb	r4, [r2, #1]
    4ac0:	2c2f      	cmp	r4, #47	; 0x2f
    4ac2:	dc07      	bgt.n	4ad4 <_strtod_l+0x304>
    4ac4:	e3de      	b.n	5284 <_strtod_l+0xab4>
    4ac6:	3301      	adds	r3, #1
    4ac8:	9311      	str	r3, [sp, #68]	; 0x44
    4aca:	784c      	ldrb	r4, [r1, #1]
    4acc:	2c2f      	cmp	r4, #47	; 0x2f
    4ace:	f1a2 0b30 	sub.w	fp, r2, #48	; 0x30
    4ad2:	dd06      	ble.n	4ae2 <_strtod_l+0x312>
    4ad4:	eb0b 028b 	add.w	r2, fp, fp, lsl #2
    4ad8:	2c39      	cmp	r4, #57	; 0x39
    4ada:	4619      	mov	r1, r3
    4adc:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    4ae0:	ddf1      	ble.n	4ac6 <_strtod_l+0x2f6>
    4ae2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4ae4:	1a9b      	subs	r3, r3, r2
    4ae6:	2b08      	cmp	r3, #8
    4ae8:	f340 83cc 	ble.w	5284 <_strtod_l+0xab4>
    4aec:	f644 6b1f 	movw	fp, #19999	; 0x4e1f
    4af0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4af2:	2b00      	cmp	r3, #0
    4af4:	d082      	beq.n	49fc <_strtod_l+0x22c>
    4af6:	f1cb 0b00 	rsb	fp, fp, #0
    4afa:	2d00      	cmp	r5, #0
    4afc:	d180      	bne.n	4a00 <_strtod_l+0x230>
    4afe:	9b08      	ldr	r3, [sp, #32]
    4b00:	4303      	orrs	r3, r0
    4b02:	d120      	bne.n	4b46 <_strtod_l+0x376>
    4b04:	f1bc 0f00 	cmp.w	ip, #0
    4b08:	f47f af4a 	bne.w	49a0 <_strtod_l+0x1d0>
    4b0c:	2c69      	cmp	r4, #105	; 0x69
    4b0e:	f000 83cf 	beq.w	52b0 <_strtod_l+0xae0>
    4b12:	f300 82f3 	bgt.w	50fc <_strtod_l+0x92c>
    4b16:	2c49      	cmp	r4, #73	; 0x49
    4b18:	f000 83ca 	beq.w	52b0 <_strtod_l+0xae0>
    4b1c:	2c4e      	cmp	r4, #78	; 0x4e
    4b1e:	f47f af3f 	bne.w	49a0 <_strtod_l+0x1d0>
    4b22:	491b      	ldr	r1, [pc, #108]	; (4b90 <_strtod_l+0x3c0>)
    4b24:	a811      	add	r0, sp, #68	; 0x44
    4b26:	f002 f99f 	bl	6e68 <__match>
    4b2a:	2800      	cmp	r0, #0
    4b2c:	f43f af38 	beq.w	49a0 <_strtod_l+0x1d0>
    4b30:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4b32:	781b      	ldrb	r3, [r3, #0]
    4b34:	2b28      	cmp	r3, #40	; 0x28
    4b36:	f000 84f2 	beq.w	551e <_strtod_l+0xd4e>
    4b3a:	4816      	ldr	r0, [pc, #88]	; (4b94 <_strtod_l+0x3c4>)
    4b3c:	f001 fcd0 	bl	64e0 <nan>
    4b40:	eeb0 8b40 	vmov.f64	d8, d0
    4b44:	e001      	b.n	4b4a <_strtod_l+0x37a>
    4b46:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 4b80 <_strtod_l+0x3b0>
    4b4a:	9a07      	ldr	r2, [sp, #28]
    4b4c:	b10a      	cbz	r2, 4b52 <_strtod_l+0x382>
    4b4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4b50:	6013      	str	r3, [r2, #0]
    4b52:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4b54:	2b00      	cmp	r3, #0
    4b56:	f43f af2a 	beq.w	49ae <_strtod_l+0x1de>
    4b5a:	eeb1 8b48 	vneg.f64	d8, d8
    4b5e:	eeb0 0b48 	vmov.f64	d0, d8
    4b62:	b017      	add	sp, #92	; 0x5c
    4b64:	ecbd 8b10 	vpop	{d8-d15}
    4b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4b6c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4b6e:	900b      	str	r0, [sp, #44]	; 0x2c
    4b70:	1c5a      	adds	r2, r3, #1
    4b72:	9211      	str	r2, [sp, #68]	; 0x44
    4b74:	785c      	ldrb	r4, [r3, #1]
    4b76:	46ae      	mov	lr, r5
    4b78:	e6f8      	b.n	496c <_strtod_l+0x19c>
    4b7a:	bf00      	nop
    4b7c:	f3af 8000 	nop.w
	...
    4b88:	200008c0 	.word	0x200008c0
    4b8c:	200002a8 	.word	0x200002a8
    4b90:	200008d0 	.word	0x200008d0
    4b94:	20007818 	.word	0x20007818
    4b98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4b9a:	1aeb      	subs	r3, r5, r3
    4b9c:	4413      	add	r3, r2
    4b9e:	2b00      	cmp	r3, #0
    4ba0:	f340 82b0 	ble.w	5104 <_strtod_l+0x934>
    4ba4:	f013 010f 	ands.w	r1, r3, #15
    4ba8:	d00a      	beq.n	4bc0 <_strtod_l+0x3f0>
    4baa:	4ac3      	ldr	r2, [pc, #780]	; (4eb8 <_strtod_l+0x6e8>)
    4bac:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    4bb0:	ed9d 6b04 	vldr	d6, [sp, #16]
    4bb4:	ed92 7b00 	vldr	d7, [r2]
    4bb8:	ee27 7b06 	vmul.f64	d7, d7, d6
    4bbc:	ed8d 7b04 	vstr	d7, [sp, #16]
    4bc0:	f033 020f 	bics.w	r2, r3, #15
    4bc4:	f040 8238 	bne.w	5038 <_strtod_l+0x868>
    4bc8:	2300      	movs	r3, #0
    4bca:	9308      	str	r3, [sp, #32]
    4bcc:	9600      	str	r6, [sp, #0]
    4bce:	462b      	mov	r3, r5
    4bd0:	4672      	mov	r2, lr
    4bd2:	4639      	mov	r1, r7
    4bd4:	4640      	mov	r0, r8
    4bd6:	f002 fad3 	bl	7180 <__s2b>
    4bda:	4681      	mov	r9, r0
    4bdc:	2800      	cmp	r0, #0
    4bde:	f000 82e1 	beq.w	51a4 <_strtod_l+0x9d4>
    4be2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4be4:	eba3 0b0b 	sub.w	fp, r3, fp
    4be8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4bea:	ed9f eba9 	vldr	d14, [pc, #676]	; 4e90 <_strtod_l+0x6c0>
    4bee:	2b00      	cmp	r3, #0
    4bf0:	ed9f cba9 	vldr	d12, [pc, #676]	; 4e98 <_strtod_l+0x6c8>
    4bf4:	ed9f dbaa 	vldr	d13, [pc, #680]	; 4ea0 <_strtod_l+0x6d0>
    4bf8:	ed9f bbab 	vldr	d11, [pc, #684]	; 4ea8 <_strtod_l+0x6d8>
    4bfc:	bfb4      	ite	lt
    4bfe:	465a      	movlt	r2, fp
    4c00:	2200      	movge	r2, #0
    4c02:	f04f 0a00 	mov.w	sl, #0
    4c06:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    4c0a:	920b      	str	r2, [sp, #44]	; 0x2c
    4c0c:	930c      	str	r3, [sp, #48]	; 0x30
    4c0e:	4654      	mov	r4, sl
    4c10:	f8d9 1004 	ldr.w	r1, [r9, #4]
    4c14:	4640      	mov	r0, r8
    4c16:	f002 fa31 	bl	707c <_Balloc>
    4c1a:	4606      	mov	r6, r0
    4c1c:	2800      	cmp	r0, #0
    4c1e:	f000 810e 	beq.w	4e3e <_strtod_l+0x66e>
    4c22:	f8d9 2010 	ldr.w	r2, [r9, #16]
    4c26:	ed9d 8b04 	vldr	d8, [sp, #16]
    4c2a:	3202      	adds	r2, #2
    4c2c:	0092      	lsls	r2, r2, #2
    4c2e:	f109 010c 	add.w	r1, r9, #12
    4c32:	300c      	adds	r0, #12
    4c34:	f7fd f9ec 	bl	2010 <memcpy>
    4c38:	eeb0 0b48 	vmov.f64	d0, d8
    4c3c:	aa14      	add	r2, sp, #80	; 0x50
    4c3e:	a913      	add	r1, sp, #76	; 0x4c
    4c40:	4640      	mov	r0, r8
    4c42:	f002 fe59 	bl	78f8 <__d2b>
    4c46:	9012      	str	r0, [sp, #72]	; 0x48
    4c48:	2800      	cmp	r0, #0
    4c4a:	f000 80e4 	beq.w	4e16 <_strtod_l+0x646>
    4c4e:	2101      	movs	r1, #1
    4c50:	4640      	mov	r0, r8
    4c52:	f002 fb3d 	bl	72d0 <__i2b>
    4c56:	4604      	mov	r4, r0
    4c58:	2800      	cmp	r0, #0
    4c5a:	f000 80f0 	beq.w	4e3e <_strtod_l+0x66e>
    4c5e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    4c60:	2a00      	cmp	r2, #0
    4c62:	f2c0 80de 	blt.w	4e22 <_strtod_l+0x652>
    4c66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4c68:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    4c6a:	eb02 0b03 	add.w	fp, r2, r3
    4c6e:	9b08      	ldr	r3, [sp, #32]
    4c70:	9d14      	ldr	r5, [sp, #80]	; 0x50
    4c72:	1ad2      	subs	r2, r2, r3
    4c74:	442a      	add	r2, r5
    4c76:	4b91      	ldr	r3, [pc, #580]	; (4ebc <_strtod_l+0x6ec>)
    4c78:	3a01      	subs	r2, #1
    4c7a:	429a      	cmp	r2, r3
    4c7c:	f1c5 0536 	rsb	r5, r5, #54	; 0x36
    4c80:	f280 8098 	bge.w	4db4 <_strtod_l+0x5e4>
    4c84:	1a99      	subs	r1, r3, r2
    4c86:	291f      	cmp	r1, #31
    4c88:	eba5 0501 	sub.w	r5, r5, r1
    4c8c:	f300 80e3 	bgt.w	4e56 <_strtod_l+0x686>
    4c90:	2201      	movs	r2, #1
    4c92:	fa02 f301 	lsl.w	r3, r2, r1
    4c96:	930d      	str	r3, [sp, #52]	; 0x34
    4c98:	2300      	movs	r3, #0
    4c9a:	930e      	str	r3, [sp, #56]	; 0x38
    4c9c:	442f      	add	r7, r5
    4c9e:	9b08      	ldr	r3, [sp, #32]
    4ca0:	445d      	add	r5, fp
    4ca2:	45ab      	cmp	fp, r5
    4ca4:	465a      	mov	r2, fp
    4ca6:	441f      	add	r7, r3
    4ca8:	bfa8      	it	ge
    4caa:	462a      	movge	r2, r5
    4cac:	42ba      	cmp	r2, r7
    4cae:	bfa8      	it	ge
    4cb0:	463a      	movge	r2, r7
    4cb2:	2a00      	cmp	r2, #0
    4cb4:	dd03      	ble.n	4cbe <_strtod_l+0x4ee>
    4cb6:	1aad      	subs	r5, r5, r2
    4cb8:	1abf      	subs	r7, r7, r2
    4cba:	ebab 0b02 	sub.w	fp, fp, r2
    4cbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4cc0:	2b00      	cmp	r3, #0
    4cc2:	f300 8088 	bgt.w	4dd6 <_strtod_l+0x606>
    4cc6:	2d00      	cmp	r5, #0
    4cc8:	f300 809c 	bgt.w	4e04 <_strtod_l+0x634>
    4ccc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4cce:	2b00      	cmp	r3, #0
    4cd0:	f300 80b7 	bgt.w	4e42 <_strtod_l+0x672>
    4cd4:	2f00      	cmp	r7, #0
    4cd6:	f300 80a9 	bgt.w	4e2c <_strtod_l+0x65c>
    4cda:	f1bb 0f00 	cmp.w	fp, #0
    4cde:	dd08      	ble.n	4cf2 <_strtod_l+0x522>
    4ce0:	4621      	mov	r1, r4
    4ce2:	465a      	mov	r2, fp
    4ce4:	4640      	mov	r0, r8
    4ce6:	f002 fc2f 	bl	7548 <__lshift>
    4cea:	4604      	mov	r4, r0
    4cec:	2800      	cmp	r0, #0
    4cee:	f000 80a6 	beq.w	4e3e <_strtod_l+0x66e>
    4cf2:	9912      	ldr	r1, [sp, #72]	; 0x48
    4cf4:	4632      	mov	r2, r6
    4cf6:	4640      	mov	r0, r8
    4cf8:	f002 fcc0 	bl	767c <__mdiff>
    4cfc:	4682      	mov	sl, r0
    4cfe:	2800      	cmp	r0, #0
    4d00:	f000 809d 	beq.w	4e3e <_strtod_l+0x66e>
    4d04:	2300      	movs	r3, #0
    4d06:	68c5      	ldr	r5, [r0, #12]
    4d08:	60c3      	str	r3, [r0, #12]
    4d0a:	4621      	mov	r1, r4
    4d0c:	f002 fc94 	bl	7638 <__mcmp>
    4d10:	2800      	cmp	r0, #0
    4d12:	f2c0 83c7 	blt.w	54a4 <_strtod_l+0xcd4>
    4d16:	f000 8361 	beq.w	53dc <_strtod_l+0xc0c>
    4d1a:	4621      	mov	r1, r4
    4d1c:	4650      	mov	r0, sl
    4d1e:	f002 fe55 	bl	79cc <__ratio>
    4d22:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
    4d26:	eeb4 0bc7 	vcmpe.f64	d0, d7
    4d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4d2e:	d846      	bhi.n	4dbe <_strtod_l+0x5ee>
    4d30:	2d00      	cmp	r5, #0
    4d32:	f000 80cb 	beq.w	4ecc <_strtod_l+0x6fc>
    4d36:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
    4d3a:	9805      	ldr	r0, [sp, #20]
    4d3c:	4b60      	ldr	r3, [pc, #384]	; (4ec0 <_strtod_l+0x6f0>)
    4d3e:	2200      	movs	r2, #0
    4d40:	4960      	ldr	r1, [pc, #384]	; (4ec4 <_strtod_l+0x6f4>)
    4d42:	f8df c184 	ldr.w	ip, [pc, #388]	; 4ec8 <_strtod_l+0x6f8>
    4d46:	ea00 0701 	and.w	r7, r0, r1
    4d4a:	4567      	cmp	r7, ip
    4d4c:	f000 80d4 	beq.w	4ef8 <_strtod_l+0x728>
    4d50:	9908      	ldr	r1, [sp, #32]
    4d52:	b159      	cbz	r1, 4d6c <_strtod_l+0x59c>
    4d54:	f1b7 6fd4 	cmp.w	r7, #111149056	; 0x6a00000
    4d58:	d808      	bhi.n	4d6c <_strtod_l+0x59c>
    4d5a:	eeb4 9bcb 	vcmpe.f64	d9, d11
    4d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4d62:	f240 8156 	bls.w	5012 <_strtod_l+0x842>
    4d66:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
    4d6a:	1bcb      	subs	r3, r1, r7
    4d6c:	eeb0 0b48 	vmov.f64	d0, d8
    4d70:	ec43 2b1a 	vmov	d10, r2, r3
    4d74:	f002 fd2c 	bl	77d0 <__ulp>
    4d78:	eeaa 8b00 	vfma.f64	d8, d10, d0
    4d7c:	ed8d 8b04 	vstr	d8, [sp, #16]
    4d80:	ee18 3a90 	vmov	r3, s17
    4d84:	9a08      	ldr	r2, [sp, #32]
    4d86:	b922      	cbnz	r2, 4d92 <_strtod_l+0x5c2>
    4d88:	4a4e      	ldr	r2, [pc, #312]	; (4ec4 <_strtod_l+0x6f4>)
    4d8a:	401a      	ands	r2, r3
    4d8c:	4297      	cmp	r7, r2
    4d8e:	f000 80e4 	beq.w	4f5a <_strtod_l+0x78a>
    4d92:	9912      	ldr	r1, [sp, #72]	; 0x48
    4d94:	4640      	mov	r0, r8
    4d96:	f002 f997 	bl	70c8 <_Bfree>
    4d9a:	4631      	mov	r1, r6
    4d9c:	4640      	mov	r0, r8
    4d9e:	f002 f993 	bl	70c8 <_Bfree>
    4da2:	4621      	mov	r1, r4
    4da4:	4640      	mov	r0, r8
    4da6:	f002 f98f 	bl	70c8 <_Bfree>
    4daa:	4651      	mov	r1, sl
    4dac:	4640      	mov	r0, r8
    4dae:	f002 f98b 	bl	70c8 <_Bfree>
    4db2:	e72d      	b.n	4c10 <_strtod_l+0x440>
    4db4:	2301      	movs	r3, #1
    4db6:	2100      	movs	r1, #0
    4db8:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
    4dbc:	e76e      	b.n	4c9c <_strtod_l+0x4cc>
    4dbe:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
    4dc2:	ee20 9b09 	vmul.f64	d9, d0, d9
    4dc6:	2d00      	cmp	r5, #0
    4dc8:	d15f      	bne.n	4e8a <_strtod_l+0x6ba>
    4dca:	eeb1 7b49 	vneg.f64	d7, d9
    4dce:	9805      	ldr	r0, [sp, #20]
    4dd0:	ec53 2b17 	vmov	r2, r3, d7
    4dd4:	e7b4      	b.n	4d40 <_strtod_l+0x570>
    4dd6:	4621      	mov	r1, r4
    4dd8:	461a      	mov	r2, r3
    4dda:	4640      	mov	r0, r8
    4ddc:	f002 fb54 	bl	7488 <__pow5mult>
    4de0:	4604      	mov	r4, r0
    4de2:	b360      	cbz	r0, 4e3e <_strtod_l+0x66e>
    4de4:	4601      	mov	r1, r0
    4de6:	9a12      	ldr	r2, [sp, #72]	; 0x48
    4de8:	4640      	mov	r0, r8
    4dea:	f002 fa9f 	bl	732c <__multiply>
    4dee:	b330      	cbz	r0, 4e3e <_strtod_l+0x66e>
    4df0:	900f      	str	r0, [sp, #60]	; 0x3c
    4df2:	9912      	ldr	r1, [sp, #72]	; 0x48
    4df4:	4640      	mov	r0, r8
    4df6:	f002 f967 	bl	70c8 <_Bfree>
    4dfa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    4dfc:	9212      	str	r2, [sp, #72]	; 0x48
    4dfe:	2d00      	cmp	r5, #0
    4e00:	f77f af64 	ble.w	4ccc <_strtod_l+0x4fc>
    4e04:	9912      	ldr	r1, [sp, #72]	; 0x48
    4e06:	462a      	mov	r2, r5
    4e08:	4640      	mov	r0, r8
    4e0a:	f002 fb9d 	bl	7548 <__lshift>
    4e0e:	9012      	str	r0, [sp, #72]	; 0x48
    4e10:	2800      	cmp	r0, #0
    4e12:	f47f af5b 	bne.w	4ccc <_strtod_l+0x4fc>
    4e16:	2322      	movs	r3, #34	; 0x22
    4e18:	ed9f 8b25 	vldr	d8, [pc, #148]	; 4eb0 <_strtod_l+0x6e0>
    4e1c:	f8c8 3000 	str.w	r3, [r8]
    4e20:	e0bc      	b.n	4f9c <_strtod_l+0x7cc>
    4e22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4e24:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
    4e28:	1a9f      	subs	r7, r3, r2
    4e2a:	e720      	b.n	4c6e <_strtod_l+0x49e>
    4e2c:	4631      	mov	r1, r6
    4e2e:	463a      	mov	r2, r7
    4e30:	4640      	mov	r0, r8
    4e32:	f002 fb89 	bl	7548 <__lshift>
    4e36:	4606      	mov	r6, r0
    4e38:	2800      	cmp	r0, #0
    4e3a:	f47f af4e 	bne.w	4cda <_strtod_l+0x50a>
    4e3e:	9812      	ldr	r0, [sp, #72]	; 0x48
    4e40:	e7e9      	b.n	4e16 <_strtod_l+0x646>
    4e42:	4631      	mov	r1, r6
    4e44:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4e46:	4640      	mov	r0, r8
    4e48:	f002 fb1e 	bl	7488 <__pow5mult>
    4e4c:	4606      	mov	r6, r0
    4e4e:	2800      	cmp	r0, #0
    4e50:	f47f af40 	bne.w	4cd4 <_strtod_l+0x504>
    4e54:	e7f3      	b.n	4e3e <_strtod_l+0x66e>
    4e56:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
    4e5a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
    4e5e:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
    4e62:	2101      	movs	r1, #1
    4e64:	32e2      	adds	r2, #226	; 0xe2
    4e66:	fa01 f302 	lsl.w	r3, r1, r2
    4e6a:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
    4e6e:	e715      	b.n	4c9c <_strtod_l+0x4cc>
    4e70:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
    4e74:	f04f 0b00 	mov.w	fp, #0
    4e78:	e5c0      	b.n	49fc <_strtod_l+0x22c>
    4e7a:	2301      	movs	r3, #1
    4e7c:	930a      	str	r3, [sp, #40]	; 0x28
    4e7e:	f10a 0302 	add.w	r3, sl, #2
    4e82:	9311      	str	r3, [sp, #68]	; 0x44
    4e84:	f89a 4002 	ldrb.w	r4, [sl, #2]
    4e88:	e602      	b.n	4a90 <_strtod_l+0x2c0>
    4e8a:	eeb0 7b49 	vmov.f64	d7, d9
    4e8e:	e79e      	b.n	4dce <_strtod_l+0x5fe>
    4e90:	94a03595 	.word	0x94a03595
    4e94:	3fcfffff 	.word	0x3fcfffff
    4e98:	94a03595 	.word	0x94a03595
    4e9c:	3fdfffff 	.word	0x3fdfffff
    4ea0:	35afe535 	.word	0x35afe535
    4ea4:	3fe00000 	.word	0x3fe00000
    4ea8:	ffc00000 	.word	0xffc00000
    4eac:	41dfffff 	.word	0x41dfffff
    4eb0:	00000000 	.word	0x00000000
    4eb4:	7ff00000 	.word	0x7ff00000
    4eb8:	200002a8 	.word	0x200002a8
    4ebc:	fffffc02 	.word	0xfffffc02
    4ec0:	3ff00000 	.word	0x3ff00000
    4ec4:	7ff00000 	.word	0x7ff00000
    4ec8:	7fe00000 	.word	0x7fe00000
    4ecc:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    4ed0:	2900      	cmp	r1, #0
    4ed2:	f000 8085 	beq.w	4fe0 <_strtod_l+0x810>
    4ed6:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    4eda:	2901      	cmp	r1, #1
    4edc:	f000 81d8 	beq.w	5290 <_strtod_l+0xac0>
    4ee0:	4610      	mov	r0, r2
    4ee2:	4bb7      	ldr	r3, [pc, #732]	; (51c0 <_strtod_l+0x9f0>)
    4ee4:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
    4ee8:	2200      	movs	r2, #0
    4eea:	e729      	b.n	4d40 <_strtod_l+0x570>
    4eec:	2c65      	cmp	r4, #101	; 0x65
    4eee:	f04f 0c01 	mov.w	ip, #1
    4ef2:	f43f adbe 	beq.w	4a72 <_strtod_l+0x2a2>
    4ef6:	e54c      	b.n	4992 <_strtod_l+0x1c2>
    4ef8:	ec43 2b1a 	vmov	d10, r2, r3
    4efc:	f1a0 7354 	sub.w	r3, r0, #55574528	; 0x3500000
    4f00:	9305      	str	r3, [sp, #20]
    4f02:	ed9d fb04 	vldr	d15, [sp, #16]
    4f06:	eeb0 0b4f 	vmov.f64	d0, d15
    4f0a:	f002 fc61 	bl	77d0 <__ulp>
    4f0e:	49ad      	ldr	r1, [pc, #692]	; (51c4 <_strtod_l+0x9f4>)
    4f10:	eeaa fb00 	vfma.f64	d15, d10, d0
    4f14:	ee1f 3a90 	vmov	r3, s31
    4f18:	4aab      	ldr	r2, [pc, #684]	; (51c8 <_strtod_l+0x9f8>)
    4f1a:	4019      	ands	r1, r3
    4f1c:	4291      	cmp	r1, r2
    4f1e:	ed8d fb04 	vstr	d15, [sp, #16]
    4f22:	d972      	bls.n	500a <_strtod_l+0x83a>
    4f24:	4ba9      	ldr	r3, [pc, #676]	; (51cc <_strtod_l+0x9fc>)
    4f26:	ee18 2a90 	vmov	r2, s17
    4f2a:	429a      	cmp	r2, r3
    4f2c:	d103      	bne.n	4f36 <_strtod_l+0x766>
    4f2e:	ee18 3a10 	vmov	r3, s16
    4f32:	3301      	adds	r3, #1
    4f34:	d083      	beq.n	4e3e <_strtod_l+0x66e>
    4f36:	4aa5      	ldr	r2, [pc, #660]	; (51cc <_strtod_l+0x9fc>)
    4f38:	f04f 33ff 	mov.w	r3, #4294967295
    4f3c:	e9cd 3204 	strd	r3, r2, [sp, #16]
    4f40:	e727      	b.n	4d92 <_strtod_l+0x5c2>
    4f42:	2300      	movs	r3, #0
    4f44:	930a      	str	r3, [sp, #40]	; 0x28
    4f46:	e79a      	b.n	4e7e <_strtod_l+0x6ae>
    4f48:	2c65      	cmp	r4, #101	; 0x65
    4f4a:	f000 80d0 	beq.w	50ee <_strtod_l+0x91e>
    4f4e:	2c45      	cmp	r4, #69	; 0x45
    4f50:	f000 80cd 	beq.w	50ee <_strtod_l+0x91e>
    4f54:	f04f 0c01 	mov.w	ip, #1
    4f58:	e5d1      	b.n	4afe <_strtod_l+0x32e>
    4f5a:	ec51 0b19 	vmov	r0, r1, d9
    4f5e:	930d      	str	r3, [sp, #52]	; 0x34
    4f60:	f009 fc64 	bl	e82c <__aeabi_d2lz>
    4f64:	f009 fc34 	bl	e7d0 <__aeabi_l2d>
    4f68:	9b04      	ldr	r3, [sp, #16]
    4f6a:	431d      	orrs	r5, r3
    4f6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4f6e:	ec41 0b17 	vmov	d7, r0, r1
    4f72:	f3c3 0313 	ubfx	r3, r3, #0, #20
    4f76:	431d      	orrs	r5, r3
    4f78:	ee39 9b47 	vsub.f64	d9, d9, d7
    4f7c:	f000 80a0 	beq.w	50c0 <_strtod_l+0x8f0>
    4f80:	eeb4 9bcc 	vcmpe.f64	d9, d12
    4f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4f88:	d405      	bmi.n	4f96 <_strtod_l+0x7c6>
    4f8a:	eeb4 9bcd 	vcmpe.f64	d9, d13
    4f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4f92:	f77f aefe 	ble.w	4d92 <_strtod_l+0x5c2>
    4f96:	ed9d 8b04 	vldr	d8, [sp, #16]
    4f9a:	9812      	ldr	r0, [sp, #72]	; 0x48
    4f9c:	4601      	mov	r1, r0
    4f9e:	4640      	mov	r0, r8
    4fa0:	f002 f892 	bl	70c8 <_Bfree>
    4fa4:	4631      	mov	r1, r6
    4fa6:	4640      	mov	r0, r8
    4fa8:	f002 f88e 	bl	70c8 <_Bfree>
    4fac:	4621      	mov	r1, r4
    4fae:	4640      	mov	r0, r8
    4fb0:	f002 f88a 	bl	70c8 <_Bfree>
    4fb4:	4649      	mov	r1, r9
    4fb6:	4640      	mov	r0, r8
    4fb8:	f002 f886 	bl	70c8 <_Bfree>
    4fbc:	4651      	mov	r1, sl
    4fbe:	4640      	mov	r0, r8
    4fc0:	f002 f882 	bl	70c8 <_Bfree>
    4fc4:	e5c1      	b.n	4b4a <_strtod_l+0x37a>
    4fc6:	2201      	movs	r2, #1
    4fc8:	9209      	str	r2, [sp, #36]	; 0x24
    4fca:	1c79      	adds	r1, r7, #1
    4fcc:	9111      	str	r1, [sp, #68]	; 0x44
    4fce:	787a      	ldrb	r2, [r7, #1]
    4fd0:	2a00      	cmp	r2, #0
    4fd2:	f43f ace5 	beq.w	49a0 <_strtod_l+0x1d0>
    4fd6:	460f      	mov	r7, r1
    4fd8:	e470      	b.n	48bc <_strtod_l+0xec>
    4fda:	2200      	movs	r2, #0
    4fdc:	9209      	str	r2, [sp, #36]	; 0x24
    4fde:	e7f4      	b.n	4fca <_strtod_l+0x7fa>
    4fe0:	f3c2 0313 	ubfx	r3, r2, #0, #20
    4fe4:	4610      	mov	r0, r2
    4fe6:	2b00      	cmp	r3, #0
    4fe8:	f47f af7b 	bne.w	4ee2 <_strtod_l+0x712>
    4fec:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    4ff0:	eeb4 0bc7 	vcmpe.f64	d0, d7
    4ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4ff8:	f100 81d3 	bmi.w	53a2 <_strtod_l+0xbd2>
    4ffc:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
    5000:	ee20 9b09 	vmul.f64	d9, d0, d9
    5004:	eeb1 7b49 	vneg.f64	d7, d9
    5008:	e6e2      	b.n	4dd0 <_strtod_l+0x600>
    500a:	f103 7354 	add.w	r3, r3, #55574528	; 0x3500000
    500e:	9305      	str	r3, [sp, #20]
    5010:	e6b8      	b.n	4d84 <_strtod_l+0x5b4>
    5012:	eebc 9bc9 	vcvt.u32.f64	s18, d9
    5016:	ee19 3a10 	vmov	r3, s18
    501a:	2b01      	cmp	r3, #1
    501c:	bf38      	it	cc
    501e:	2301      	movcc	r3, #1
    5020:	ee09 3a10 	vmov	s18, r3
    5024:	eeb8 9b49 	vcvt.f64.u32	d9, s18
    5028:	2d00      	cmp	r5, #0
    502a:	f040 813e 	bne.w	52aa <_strtod_l+0xada>
    502e:	eeb1 7b49 	vneg.f64	d7, d9
    5032:	ec53 2b17 	vmov	r2, r3, d7
    5036:	e696      	b.n	4d66 <_strtod_l+0x596>
    5038:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
    503c:	f300 80b2 	bgt.w	51a4 <_strtod_l+0x9d4>
    5040:	2a10      	cmp	r2, #16
    5042:	ea4f 1322 	mov.w	r3, r2, asr #4
    5046:	f340 8286 	ble.w	5556 <_strtod_l+0xd86>
    504a:	4c61      	ldr	r4, [pc, #388]	; (51d0 <_strtod_l+0xa00>)
    504c:	ed9d 7b04 	vldr	d7, [sp, #16]
    5050:	2000      	movs	r0, #0
    5052:	4622      	mov	r2, r4
    5054:	4601      	mov	r1, r0
    5056:	f013 0f01 	tst.w	r3, #1
    505a:	f101 0101 	add.w	r1, r1, #1
    505e:	ea4f 0363 	mov.w	r3, r3, asr #1
    5062:	d004      	beq.n	506e <_strtod_l+0x89e>
    5064:	ed92 6b00 	vldr	d6, [r2]
    5068:	2001      	movs	r0, #1
    506a:	ee27 7b06 	vmul.f64	d7, d7, d6
    506e:	2b01      	cmp	r3, #1
    5070:	f102 0208 	add.w	r2, r2, #8
    5074:	d1ef      	bne.n	5056 <_strtod_l+0x886>
    5076:	b108      	cbz	r0, 507c <_strtod_l+0x8ac>
    5078:	ed8d 7b04 	vstr	d7, [sp, #16]
    507c:	9b05      	ldr	r3, [sp, #20]
    507e:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
    5082:	9305      	str	r3, [sp, #20]
    5084:	eb04 04c1 	add.w	r4, r4, r1, lsl #3
    5088:	ed9d 6b04 	vldr	d6, [sp, #16]
    508c:	ed94 7b00 	vldr	d7, [r4]
    5090:	4b4c      	ldr	r3, [pc, #304]	; (51c4 <_strtod_l+0x9f4>)
    5092:	ee27 7b06 	vmul.f64	d7, d7, d6
    5096:	ee17 2a90 	vmov	r2, s15
    509a:	494e      	ldr	r1, [pc, #312]	; (51d4 <_strtod_l+0xa04>)
    509c:	4013      	ands	r3, r2
    509e:	428b      	cmp	r3, r1
    50a0:	ed8d 7b04 	vstr	d7, [sp, #16]
    50a4:	d87e      	bhi.n	51a4 <_strtod_l+0x9d4>
    50a6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
    50aa:	428b      	cmp	r3, r1
    50ac:	f240 81d6 	bls.w	545c <_strtod_l+0xc8c>
    50b0:	4c46      	ldr	r4, [pc, #280]	; (51cc <_strtod_l+0x9fc>)
    50b2:	f04f 33ff 	mov.w	r3, #4294967295
    50b6:	e9cd 3404 	strd	r3, r4, [sp, #16]
    50ba:	2300      	movs	r3, #0
    50bc:	9308      	str	r3, [sp, #32]
    50be:	e585      	b.n	4bcc <_strtod_l+0x3fc>
    50c0:	eeb4 9bce 	vcmpe.f64	d9, d14
    50c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    50c8:	f57f ae63 	bpl.w	4d92 <_strtod_l+0x5c2>
    50cc:	e763      	b.n	4f96 <_strtod_l+0x7c6>
    50ce:	3216      	adds	r2, #22
    50d0:	f6ff ad62 	blt.w	4b98 <_strtod_l+0x3c8>
    50d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    50d6:	eba3 0b0b 	sub.w	fp, r3, fp
    50da:	4b3f      	ldr	r3, [pc, #252]	; (51d8 <_strtod_l+0xa08>)
    50dc:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
    50e0:	ed93 7b00 	vldr	d7, [r3]
    50e4:	ed9d 6b04 	vldr	d6, [sp, #16]
    50e8:	ee86 8b07 	vdiv.f64	d8, d6, d7
    50ec:	e52d      	b.n	4b4a <_strtod_l+0x37a>
    50ee:	f04f 0e00 	mov.w	lr, #0
    50f2:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    50f6:	f04f 0c01 	mov.w	ip, #1
    50fa:	e44e      	b.n	499a <_strtod_l+0x1ca>
    50fc:	2c6e      	cmp	r4, #110	; 0x6e
    50fe:	f43f ad10 	beq.w	4b22 <_strtod_l+0x352>
    5102:	e44d      	b.n	49a0 <_strtod_l+0x1d0>
    5104:	f43f ad60 	beq.w	4bc8 <_strtod_l+0x3f8>
    5108:	425b      	negs	r3, r3
    510a:	f013 010f 	ands.w	r1, r3, #15
    510e:	d00a      	beq.n	5126 <_strtod_l+0x956>
    5110:	4a31      	ldr	r2, [pc, #196]	; (51d8 <_strtod_l+0xa08>)
    5112:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    5116:	ed9d 6b04 	vldr	d6, [sp, #16]
    511a:	ed92 7b00 	vldr	d7, [r2]
    511e:	ee86 7b07 	vdiv.f64	d7, d6, d7
    5122:	ed8d 7b04 	vstr	d7, [sp, #16]
    5126:	111b      	asrs	r3, r3, #4
    5128:	f43f ad4e 	beq.w	4bc8 <_strtod_l+0x3f8>
    512c:	2b1f      	cmp	r3, #31
    512e:	dc33      	bgt.n	5198 <_strtod_l+0x9c8>
    5130:	f013 0210 	ands.w	r2, r3, #16
    5134:	bf18      	it	ne
    5136:	226a      	movne	r2, #106	; 0x6a
    5138:	ed9d 7b04 	vldr	d7, [sp, #16]
    513c:	9208      	str	r2, [sp, #32]
    513e:	4a27      	ldr	r2, [pc, #156]	; (51dc <_strtod_l+0xa0c>)
    5140:	2100      	movs	r1, #0
    5142:	07d8      	lsls	r0, r3, #31
    5144:	d504      	bpl.n	5150 <_strtod_l+0x980>
    5146:	ed92 6b00 	vldr	d6, [r2]
    514a:	2101      	movs	r1, #1
    514c:	ee27 7b06 	vmul.f64	d7, d7, d6
    5150:	105b      	asrs	r3, r3, #1
    5152:	f102 0208 	add.w	r2, r2, #8
    5156:	d1f4      	bne.n	5142 <_strtod_l+0x972>
    5158:	b109      	cbz	r1, 515e <_strtod_l+0x98e>
    515a:	ed8d 7b04 	vstr	d7, [sp, #16]
    515e:	9b08      	ldr	r3, [sp, #32]
    5160:	b193      	cbz	r3, 5188 <_strtod_l+0x9b8>
    5162:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    5166:	f3c1 520a 	ubfx	r2, r1, #20, #11
    516a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
    516e:	2b00      	cmp	r3, #0
    5170:	dd0a      	ble.n	5188 <_strtod_l+0x9b8>
    5172:	2b1f      	cmp	r3, #31
    5174:	f340 822f 	ble.w	55d6 <_strtod_l+0xe06>
    5178:	2000      	movs	r0, #0
    517a:	2b34      	cmp	r3, #52	; 0x34
    517c:	9004      	str	r0, [sp, #16]
    517e:	f340 8240 	ble.w	5602 <_strtod_l+0xe32>
    5182:	f04f 735c 	mov.w	r3, #57671680	; 0x3700000
    5186:	9305      	str	r3, [sp, #20]
    5188:	ed9d 7b04 	vldr	d7, [sp, #16]
    518c:	eeb5 7b40 	vcmp.f64	d7, #0.0
    5190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5194:	f47f ad1a 	bne.w	4bcc <_strtod_l+0x3fc>
    5198:	2322      	movs	r3, #34	; 0x22
    519a:	ed9f 8b05 	vldr	d8, [pc, #20]	; 51b0 <_strtod_l+0x9e0>
    519e:	f8c8 3000 	str.w	r3, [r8]
    51a2:	e4d2      	b.n	4b4a <_strtod_l+0x37a>
    51a4:	2322      	movs	r3, #34	; 0x22
    51a6:	ed9f 8b04 	vldr	d8, [pc, #16]	; 51b8 <_strtod_l+0x9e8>
    51aa:	f8c8 3000 	str.w	r3, [r8]
    51ae:	e4cc      	b.n	4b4a <_strtod_l+0x37a>
	...
    51bc:	7ff00000 	.word	0x7ff00000
    51c0:	bff00000 	.word	0xbff00000
    51c4:	7ff00000 	.word	0x7ff00000
    51c8:	7c9fffff 	.word	0x7c9fffff
    51cc:	7fefffff 	.word	0x7fefffff
    51d0:	20000280 	.word	0x20000280
    51d4:	7ca00000 	.word	0x7ca00000
    51d8:	200002a8 	.word	0x200002a8
    51dc:	20000370 	.word	0x20000370
    51e0:	9302      	str	r3, [sp, #8]
    51e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    51e4:	9301      	str	r3, [sp, #4]
    51e6:	ab12      	add	r3, sp, #72	; 0x48
    51e8:	9300      	str	r3, [sp, #0]
    51ea:	4aa7      	ldr	r2, [pc, #668]	; (5488 <_strtod_l+0xcb8>)
    51ec:	ab13      	add	r3, sp, #76	; 0x4c
    51ee:	a911      	add	r1, sp, #68	; 0x44
    51f0:	4640      	mov	r0, r8
    51f2:	f001 fb6f 	bl	68d4 <__gethex>
    51f6:	f010 050f 	ands.w	r5, r0, #15
    51fa:	4604      	mov	r4, r0
    51fc:	f43f aca3 	beq.w	4b46 <_strtod_l+0x376>
    5200:	2d06      	cmp	r5, #6
    5202:	d174      	bne.n	52ee <_strtod_l+0xb1e>
    5204:	9b07      	ldr	r3, [sp, #28]
    5206:	ed9f 8b9a 	vldr	d8, [pc, #616]	; 5470 <_strtod_l+0xca0>
    520a:	3701      	adds	r7, #1
    520c:	2b00      	cmp	r3, #0
    520e:	f43f abce 	beq.w	49ae <_strtod_l+0x1de>
    5212:	601f      	str	r7, [r3, #0]
    5214:	f7ff bbcb 	b.w	49ae <_strtod_l+0x1de>
    5218:	ed9d 8b04 	vldr	d8, [sp, #16]
    521c:	e495      	b.n	4b4a <_strtod_l+0x37a>
    521e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5220:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
    5224:	4403      	add	r3, r0
    5226:	930b      	str	r3, [sp, #44]	; 0x2c
    5228:	2801      	cmp	r0, #1
    522a:	f105 0301 	add.w	r3, r5, #1
    522e:	461a      	mov	r2, r3
    5230:	d014      	beq.n	525c <_strtod_l+0xa8c>
    5232:	4428      	add	r0, r5
    5234:	1e44      	subs	r4, r0, #1
    5236:	e003      	b.n	5240 <_strtod_l+0xa70>
    5238:	0046      	lsls	r6, r0, #1
    523a:	429c      	cmp	r4, r3
    523c:	d00d      	beq.n	525a <_strtod_l+0xa8a>
    523e:	3301      	adds	r3, #1
    5240:	462a      	mov	r2, r5
    5242:	2a08      	cmp	r2, #8
    5244:	461d      	mov	r5, r3
    5246:	eb06 0086 	add.w	r0, r6, r6, lsl #2
    524a:	d9f5      	bls.n	5238 <_strtod_l+0xa68>
    524c:	2b10      	cmp	r3, #16
    524e:	bfdc      	itt	le
    5250:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
    5254:	ea4f 0949 	movle.w	r9, r9, lsl #1
    5258:	e7ef      	b.n	523a <_strtod_l+0xa6a>
    525a:	3202      	adds	r2, #2
    525c:	2d08      	cmp	r5, #8
    525e:	dc3c      	bgt.n	52da <_strtod_l+0xb0a>
    5260:	4615      	mov	r5, r2
    5262:	f7ff bb79 	b.w	4958 <_strtod_l+0x188>
    5266:	4989      	ldr	r1, [pc, #548]	; (548c <_strtod_l+0xcbc>)
    5268:	2201      	movs	r2, #1
    526a:	4638      	mov	r0, r7
    526c:	f000 fdd4 	bl	5e18 <strncmp>
    5270:	2800      	cmp	r0, #0
    5272:	f000 8082 	beq.w	537a <_strtod_l+0xbaa>
    5276:	f04f 0e00 	mov.w	lr, #0
    527a:	46f1      	mov	r9, lr
    527c:	4676      	mov	r6, lr
    527e:	4675      	mov	r5, lr
    5280:	f7ff bbb5 	b.w	49ee <_strtod_l+0x21e>
    5284:	f644 631f 	movw	r3, #19999	; 0x4e1f
    5288:	459b      	cmp	fp, r3
    528a:	bfa8      	it	ge
    528c:	469b      	movge	fp, r3
    528e:	e42f      	b.n	4af0 <_strtod_l+0x320>
    5290:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    5294:	4618      	mov	r0, r3
    5296:	2b00      	cmp	r3, #0
    5298:	f47f ae23 	bne.w	4ee2 <_strtod_l+0x712>
    529c:	2322      	movs	r3, #34	; 0x22
    529e:	ed9f 8b74 	vldr	d8, [pc, #464]	; 5470 <_strtod_l+0xca0>
    52a2:	9812      	ldr	r0, [sp, #72]	; 0x48
    52a4:	f8c8 3000 	str.w	r3, [r8]
    52a8:	e678      	b.n	4f9c <_strtod_l+0x7cc>
    52aa:	eeb0 7b49 	vmov.f64	d7, d9
    52ae:	e6c0      	b.n	5032 <_strtod_l+0x862>
    52b0:	4977      	ldr	r1, [pc, #476]	; (5490 <_strtod_l+0xcc0>)
    52b2:	a811      	add	r0, sp, #68	; 0x44
    52b4:	f001 fdd8 	bl	6e68 <__match>
    52b8:	2800      	cmp	r0, #0
    52ba:	f43f ab71 	beq.w	49a0 <_strtod_l+0x1d0>
    52be:	9b11      	ldr	r3, [sp, #68]	; 0x44
    52c0:	4974      	ldr	r1, [pc, #464]	; (5494 <_strtod_l+0xcc4>)
    52c2:	3b01      	subs	r3, #1
    52c4:	a811      	add	r0, sp, #68	; 0x44
    52c6:	9311      	str	r3, [sp, #68]	; 0x44
    52c8:	f001 fdce 	bl	6e68 <__match>
    52cc:	b910      	cbnz	r0, 52d4 <_strtod_l+0xb04>
    52ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
    52d0:	3301      	adds	r3, #1
    52d2:	9311      	str	r3, [sp, #68]	; 0x44
    52d4:	ed9f 8b68 	vldr	d8, [pc, #416]	; 5478 <_strtod_l+0xca8>
    52d8:	e437      	b.n	4b4a <_strtod_l+0x37a>
    52da:	2a10      	cmp	r2, #16
    52dc:	bfdc      	itt	le
    52de:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
    52e2:	eb01 0949 	addle.w	r9, r1, r9, lsl #1
    52e6:	4615      	mov	r5, r2
    52e8:	2000      	movs	r0, #0
    52ea:	f7ff bb3a 	b.w	4962 <_strtod_l+0x192>
    52ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
    52f0:	b13a      	cbz	r2, 5302 <_strtod_l+0xb32>
    52f2:	2135      	movs	r1, #53	; 0x35
    52f4:	a814      	add	r0, sp, #80	; 0x50
    52f6:	f002 fb9b 	bl	7a30 <__copybits>
    52fa:	9912      	ldr	r1, [sp, #72]	; 0x48
    52fc:	4640      	mov	r0, r8
    52fe:	f001 fee3 	bl	70c8 <_Bfree>
    5302:	3d01      	subs	r5, #1
    5304:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    5306:	2d04      	cmp	r5, #4
    5308:	f200 818f 	bhi.w	562a <_strtod_l+0xe5a>
    530c:	e8df f005 	tbb	[pc, r5]
    5310:	1f2a2d03 	.word	0x1f2a2d03
    5314:	03          	.byte	0x03
    5315:	00          	.byte	0x00
    5316:	9a14      	ldr	r2, [sp, #80]	; 0x50
    5318:	9204      	str	r2, [sp, #16]
    531a:	f203 4233 	addw	r2, r3, #1075	; 0x433
    531e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    5320:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
    5324:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
    5328:	9305      	str	r3, [sp, #20]
    532a:	05e5      	lsls	r5, r4, #23
    532c:	d502      	bpl.n	5334 <_strtod_l+0xb64>
    532e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    5332:	9305      	str	r3, [sp, #20]
    5334:	4a58      	ldr	r2, [pc, #352]	; (5498 <_strtod_l+0xcc8>)
    5336:	401a      	ands	r2, r3
    5338:	ed9d 8b04 	vldr	d8, [sp, #16]
    533c:	2a00      	cmp	r2, #0
    533e:	f47f ac04 	bne.w	4b4a <_strtod_l+0x37a>
    5342:	f000 fe4d 	bl	5fe0 <__errno>
    5346:	2322      	movs	r3, #34	; 0x22
    5348:	6003      	str	r3, [r0, #0]
    534a:	f7ff bbfe 	b.w	4b4a <_strtod_l+0x37a>
    534e:	f04f 33ff 	mov.w	r3, #4294967295
    5352:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    5356:	e9cd 3604 	strd	r3, r6, [sp, #16]
    535a:	05e3      	lsls	r3, r4, #23
    535c:	f57f af5c 	bpl.w	5218 <_strtod_l+0xa48>
    5360:	9b05      	ldr	r3, [sp, #20]
    5362:	e7e4      	b.n	532e <_strtod_l+0xb5e>
    5364:	4b4c      	ldr	r3, [pc, #304]	; (5498 <_strtod_l+0xcc8>)
    5366:	9305      	str	r3, [sp, #20]
    5368:	e7f7      	b.n	535a <_strtod_l+0xb8a>
    536a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    536c:	9304      	str	r3, [sp, #16]
    536e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    5370:	9305      	str	r3, [sp, #20]
    5372:	e7da      	b.n	532a <_strtod_l+0xb5a>
    5374:	2000      	movs	r0, #0
    5376:	f7ff bae1 	b.w	493c <_strtod_l+0x16c>
    537a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    537c:	461a      	mov	r2, r3
    537e:	3301      	adds	r3, #1
    5380:	9311      	str	r3, [sp, #68]	; 0x44
    5382:	7854      	ldrb	r4, [r2, #1]
    5384:	4606      	mov	r6, r0
    5386:	4681      	mov	r9, r0
    5388:	f7ff bacd 	b.w	4926 <_strtod_l+0x156>
    538c:	4b43      	ldr	r3, [pc, #268]	; (549c <_strtod_l+0xccc>)
    538e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    5392:	ed93 8b00 	vldr	d8, [r3]
    5396:	ed9d 7b04 	vldr	d7, [sp, #16]
    539a:	ee28 8b07 	vmul.f64	d8, d8, d7
    539e:	f7ff bbd4 	b.w	4b4a <_strtod_l+0x37a>
    53a2:	eebe 7b00 	vmov.f64	d7, #224	; 0xbf000000 -0.5
    53a6:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
    53aa:	e511      	b.n	4dd0 <_strtod_l+0x600>
    53ac:	46ae      	mov	lr, r5
    53ae:	900b      	str	r0, [sp, #44]	; 0x2c
    53b0:	f7ff badc 	b.w	496c <_strtod_l+0x19c>
    53b4:	4b39      	ldr	r3, [pc, #228]	; (549c <_strtod_l+0xccc>)
    53b6:	f1c5 050f 	rsb	r5, r5, #15
    53ba:	1b4a      	subs	r2, r1, r5
    53bc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    53c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    53c4:	ed95 8b00 	vldr	d8, [r5]
    53c8:	ed93 7b00 	vldr	d7, [r3]
    53cc:	ed9d 6b04 	vldr	d6, [sp, #16]
    53d0:	ee28 8b06 	vmul.f64	d8, d8, d6
    53d4:	ee28 8b07 	vmul.f64	d8, d8, d7
    53d8:	f7ff bbb7 	b.w	4b4a <_strtod_l+0x37a>
    53dc:	2d00      	cmp	r5, #0
    53de:	f000 8095 	beq.w	550c <_strtod_l+0xd3c>
    53e2:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
    53e6:	4b2e      	ldr	r3, [pc, #184]	; (54a0 <_strtod_l+0xcd0>)
    53e8:	f3cc 0113 	ubfx	r1, ip, #0, #20
    53ec:	4299      	cmp	r1, r3
    53ee:	4662      	mov	r2, ip
    53f0:	f000 80d2 	beq.w	5598 <_strtod_l+0xdc8>
    53f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    53f6:	2b00      	cmp	r3, #0
    53f8:	f000 80a5 	beq.w	5546 <_strtod_l+0xd76>
    53fc:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    5400:	4213      	tst	r3, r2
    5402:	4617      	mov	r7, r2
    5404:	d01a      	beq.n	543c <_strtod_l+0xc6c>
    5406:	eeb0 0b48 	vmov.f64	d0, d8
    540a:	2d00      	cmp	r5, #0
    540c:	f000 80a6 	beq.w	555c <_strtod_l+0xd8c>
    5410:	f002 f9de 	bl	77d0 <__ulp>
    5414:	9b08      	ldr	r3, [sp, #32]
    5416:	b17b      	cbz	r3, 5438 <_strtod_l+0xc68>
    5418:	f3c7 530a 	ubfx	r3, r7, #20, #11
    541c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    5420:	2b00      	cmp	r3, #0
    5422:	dd09      	ble.n	5438 <_strtod_l+0xc68>
    5424:	051b      	lsls	r3, r3, #20
    5426:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
    542a:	2000      	movs	r0, #0
    542c:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
    5430:	ec41 0b17 	vmov	d7, r0, r1
    5434:	ee20 0b07 	vmul.f64	d0, d0, d7
    5438:	ee38 8b00 	vadd.f64	d8, d8, d0
    543c:	9b08      	ldr	r3, [sp, #32]
    543e:	b15b      	cbz	r3, 5458 <_strtod_l+0xc88>
    5440:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 5480 <_strtod_l+0xcb0>
    5444:	4b14      	ldr	r3, [pc, #80]	; (5498 <_strtod_l+0xcc8>)
    5446:	ee28 8b07 	vmul.f64	d8, d8, d7
    544a:	ee18 2a90 	vmov	r2, s17
    544e:	4013      	ands	r3, r2
    5450:	b913      	cbnz	r3, 5458 <_strtod_l+0xc88>
    5452:	2322      	movs	r3, #34	; 0x22
    5454:	f8c8 3000 	str.w	r3, [r8]
    5458:	9812      	ldr	r0, [sp, #72]	; 0x48
    545a:	e59f      	b.n	4f9c <_strtod_l+0x7cc>
    545c:	f102 7354 	add.w	r3, r2, #55574528	; 0x3500000
    5460:	9305      	str	r3, [sp, #20]
    5462:	2300      	movs	r3, #0
    5464:	9308      	str	r3, [sp, #32]
    5466:	f7ff bbb1 	b.w	4bcc <_strtod_l+0x3fc>
    546a:	bf00      	nop
    546c:	f3af 8000 	nop.w
	...
    547c:	7ff00000 	.word	0x7ff00000
    5480:	00000000 	.word	0x00000000
    5484:	39500000 	.word	0x39500000
    5488:	200076d0 	.word	0x200076d0
    548c:	200008c0 	.word	0x200008c0
    5490:	200008c4 	.word	0x200008c4
    5494:	200008c8 	.word	0x200008c8
    5498:	7ff00000 	.word	0x7ff00000
    549c:	200002a8 	.word	0x200002a8
    54a0:	000fffff 	.word	0x000fffff
    54a4:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    54a8:	430d      	orrs	r5, r1
    54aa:	d1c7      	bne.n	543c <_strtod_l+0xc6c>
    54ac:	f3c2 0313 	ubfx	r3, r2, #0, #20
    54b0:	4617      	mov	r7, r2
    54b2:	2b00      	cmp	r3, #0
    54b4:	d1c2      	bne.n	543c <_strtod_l+0xc6c>
    54b6:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
    54ba:	0d1b      	lsrs	r3, r3, #20
    54bc:	051b      	lsls	r3, r3, #20
    54be:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    54c2:	d9bb      	bls.n	543c <_strtod_l+0xc6c>
    54c4:	f8da 3014 	ldr.w	r3, [sl, #20]
    54c8:	b91b      	cbnz	r3, 54d2 <_strtod_l+0xd02>
    54ca:	f8da 3010 	ldr.w	r3, [sl, #16]
    54ce:	2b01      	cmp	r3, #1
    54d0:	ddb4      	ble.n	543c <_strtod_l+0xc6c>
    54d2:	4651      	mov	r1, sl
    54d4:	2201      	movs	r2, #1
    54d6:	4640      	mov	r0, r8
    54d8:	f002 f836 	bl	7548 <__lshift>
    54dc:	4621      	mov	r1, r4
    54de:	4682      	mov	sl, r0
    54e0:	f002 f8aa 	bl	7638 <__mcmp>
    54e4:	2800      	cmp	r0, #0
    54e6:	dda9      	ble.n	543c <_strtod_l+0xc6c>
    54e8:	9b08      	ldr	r3, [sp, #32]
    54ea:	2b00      	cmp	r3, #0
    54ec:	d17e      	bne.n	55ec <_strtod_l+0xe1c>
    54ee:	4b50      	ldr	r3, [pc, #320]	; (5630 <_strtod_l+0xe60>)
    54f0:	403b      	ands	r3, r7
    54f2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
    54f6:	ea6f 5313 	mvn.w	r3, r3, lsr #20
    54fa:	ea6f 5303 	mvn.w	r3, r3, lsl #20
    54fe:	9305      	str	r3, [sp, #20]
    5500:	f04f 33ff 	mov.w	r3, #4294967295
    5504:	9304      	str	r3, [sp, #16]
    5506:	ed9d 8b04 	vldr	d8, [sp, #16]
    550a:	e797      	b.n	543c <_strtod_l+0xc6c>
    550c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    5510:	f3c2 0313 	ubfx	r3, r2, #0, #20
    5514:	430b      	orrs	r3, r1
    5516:	4617      	mov	r7, r2
    5518:	f47f af6c 	bne.w	53f4 <_strtod_l+0xc24>
    551c:	e7e4      	b.n	54e8 <_strtod_l+0xd18>
    551e:	4945      	ldr	r1, [pc, #276]	; (5634 <_strtod_l+0xe64>)
    5520:	a811      	add	r0, sp, #68	; 0x44
    5522:	aa14      	add	r2, sp, #80	; 0x50
    5524:	f001 fcbc 	bl	6ea0 <__hexnan>
    5528:	2805      	cmp	r0, #5
    552a:	f47f ab06 	bne.w	4b3a <_strtod_l+0x36a>
    552e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    5530:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
    5534:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
    5538:	9305      	str	r3, [sp, #20]
    553a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    553c:	9304      	str	r3, [sp, #16]
    553e:	ed9d 8b04 	vldr	d8, [sp, #16]
    5542:	f7ff bb02 	b.w	4b4a <_strtod_l+0x37a>
    5546:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    554a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    554c:	4203      	tst	r3, r0
    554e:	f43f af75 	beq.w	543c <_strtod_l+0xc6c>
    5552:	460f      	mov	r7, r1
    5554:	e757      	b.n	5406 <_strtod_l+0xc36>
    5556:	4c38      	ldr	r4, [pc, #224]	; (5638 <_strtod_l+0xe68>)
    5558:	2100      	movs	r1, #0
    555a:	e58f      	b.n	507c <_strtod_l+0x8ac>
    555c:	f002 f938 	bl	77d0 <__ulp>
    5560:	9b08      	ldr	r3, [sp, #32]
    5562:	2b00      	cmp	r3, #0
    5564:	d055      	beq.n	5612 <_strtod_l+0xe42>
    5566:	f3c7 530a 	ubfx	r3, r7, #20, #11
    556a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    556e:	2b00      	cmp	r3, #0
    5570:	dd09      	ble.n	5586 <_strtod_l+0xdb6>
    5572:	051b      	lsls	r3, r3, #20
    5574:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
    5578:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
    557c:	4628      	mov	r0, r5
    557e:	ec41 0b17 	vmov	d7, r0, r1
    5582:	ee20 0b07 	vmul.f64	d0, d0, d7
    5586:	ee38 8b40 	vsub.f64	d8, d8, d0
    558a:	eeb5 8b40 	vcmp.f64	d8, #0.0
    558e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5592:	f47f af55 	bne.w	5440 <_strtod_l+0xc70>
    5596:	e681      	b.n	529c <_strtod_l+0xacc>
    5598:	9b08      	ldr	r3, [sp, #32]
    559a:	9904      	ldr	r1, [sp, #16]
    559c:	b31b      	cbz	r3, 55e6 <_strtod_l+0xe16>
    559e:	4b24      	ldr	r3, [pc, #144]	; (5630 <_strtod_l+0xe60>)
    55a0:	4013      	ands	r3, r2
    55a2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
    55a6:	d81e      	bhi.n	55e6 <_strtod_l+0xe16>
    55a8:	0d1b      	lsrs	r3, r3, #20
    55aa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    55ae:	f04f 30ff 	mov.w	r0, #4294967295
    55b2:	fa00 f303 	lsl.w	r3, r0, r3
    55b6:	4299      	cmp	r1, r3
    55b8:	f47f af1c 	bne.w	53f4 <_strtod_l+0xc24>
    55bc:	4b1f      	ldr	r3, [pc, #124]	; (563c <_strtod_l+0xe6c>)
    55be:	429a      	cmp	r2, r3
    55c0:	d030      	beq.n	5624 <_strtod_l+0xe54>
    55c2:	4b1b      	ldr	r3, [pc, #108]	; (5630 <_strtod_l+0xe60>)
    55c4:	4013      	ands	r3, r2
    55c6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
    55ca:	9305      	str	r3, [sp, #20]
    55cc:	2300      	movs	r3, #0
    55ce:	9304      	str	r3, [sp, #16]
    55d0:	ed9d 8b04 	vldr	d8, [sp, #16]
    55d4:	e732      	b.n	543c <_strtod_l+0xc6c>
    55d6:	f04f 32ff 	mov.w	r2, #4294967295
    55da:	fa02 f303 	lsl.w	r3, r2, r3
    55de:	9a04      	ldr	r2, [sp, #16]
    55e0:	401a      	ands	r2, r3
    55e2:	9204      	str	r2, [sp, #16]
    55e4:	e5d0      	b.n	5188 <_strtod_l+0x9b8>
    55e6:	f04f 33ff 	mov.w	r3, #4294967295
    55ea:	e7e4      	b.n	55b6 <_strtod_l+0xde6>
    55ec:	4b10      	ldr	r3, [pc, #64]	; (5630 <_strtod_l+0xe60>)
    55ee:	403b      	ands	r3, r7
    55f0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    55f4:	f73f af7d 	bgt.w	54f2 <_strtod_l+0xd22>
    55f8:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
    55fc:	f73f af20 	bgt.w	5440 <_strtod_l+0xc70>
    5600:	e64c      	b.n	529c <_strtod_l+0xacc>
    5602:	f1c2 024b 	rsb	r2, r2, #75	; 0x4b
    5606:	f04f 33ff 	mov.w	r3, #4294967295
    560a:	4093      	lsls	r3, r2
    560c:	400b      	ands	r3, r1
    560e:	9305      	str	r3, [sp, #20]
    5610:	e5ba      	b.n	5188 <_strtod_l+0x9b8>
    5612:	ee38 8b40 	vsub.f64	d8, d8, d0
    5616:	eeb5 8b40 	vcmp.f64	d8, #0.0
    561a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    561e:	f47f af1b 	bne.w	5458 <_strtod_l+0xc88>
    5622:	e63b      	b.n	529c <_strtod_l+0xacc>
    5624:	3101      	adds	r1, #1
    5626:	d1cc      	bne.n	55c2 <_strtod_l+0xdf2>
    5628:	e409      	b.n	4e3e <_strtod_l+0x66e>
    562a:	2300      	movs	r3, #0
    562c:	e67d      	b.n	532a <_strtod_l+0xb5a>
    562e:	bf00      	nop
    5630:	7ff00000 	.word	0x7ff00000
    5634:	200076e4 	.word	0x200076e4
    5638:	20000280 	.word	0x20000280
    563c:	7fefffff 	.word	0x7fefffff

00005640 <_strtod_r>:
    5640:	4b01      	ldr	r3, [pc, #4]	; (5648 <_strtod_r+0x8>)
    5642:	f7ff b8c5 	b.w	47d0 <_strtod_l>
    5646:	bf00      	nop
    5648:	20007c48 	.word	0x20007c48

0000564c <_strtol_l.constprop.0>:
    564c:	2b01      	cmp	r3, #1
    564e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5652:	d040      	beq.n	56d6 <_strtol_l.constprop.0+0x8a>
    5654:	2b24      	cmp	r3, #36	; 0x24
    5656:	4698      	mov	r8, r3
    5658:	d83d      	bhi.n	56d6 <_strtol_l.constprop.0+0x8a>
    565a:	4d4c      	ldr	r5, [pc, #304]	; (578c <_strtol_l.constprop.0+0x140>)
    565c:	468e      	mov	lr, r1
    565e:	4676      	mov	r6, lr
    5660:	f81e bb01 	ldrb.w	fp, [lr], #1
    5664:	f815 400b 	ldrb.w	r4, [r5, fp]
    5668:	f014 0408 	ands.w	r4, r4, #8
    566c:	d1f7      	bne.n	565e <_strtol_l.constprop.0+0x12>
    566e:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
    5672:	d072      	beq.n	575a <_strtol_l.constprop.0+0x10e>
    5674:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
    5678:	bf08      	it	eq
    567a:	f89e b000 	ldrbeq.w	fp, [lr]
    567e:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
    5682:	bf08      	it	eq
    5684:	f106 0e02 	addeq.w	lr, r6, #2
    5688:	2b00      	cmp	r3, #0
    568a:	d042      	beq.n	5712 <_strtol_l.constprop.0+0xc6>
    568c:	2b10      	cmp	r3, #16
    568e:	d057      	beq.n	5740 <_strtol_l.constprop.0+0xf4>
    5690:	fbb9 f7f8 	udiv	r7, r9, r8
    5694:	2500      	movs	r5, #0
    5696:	462e      	mov	r6, r5
    5698:	fb08 9a17 	mls	sl, r8, r7, r9
    569c:	e005      	b.n	56aa <_strtol_l.constprop.0+0x5e>
    569e:	d033      	beq.n	5708 <_strtol_l.constprop.0+0xbc>
    56a0:	fb08 c606 	mla	r6, r8, r6, ip
    56a4:	2501      	movs	r5, #1
    56a6:	f81e bb01 	ldrb.w	fp, [lr], #1
    56aa:	f1ab 0c30 	sub.w	ip, fp, #48	; 0x30
    56ae:	f1bc 0f09 	cmp.w	ip, #9
    56b2:	d906      	bls.n	56c2 <_strtol_l.constprop.0+0x76>
    56b4:	f1ab 0c41 	sub.w	ip, fp, #65	; 0x41
    56b8:	f1bc 0f19 	cmp.w	ip, #25
    56bc:	d812      	bhi.n	56e4 <_strtol_l.constprop.0+0x98>
    56be:	f1ab 0c37 	sub.w	ip, fp, #55	; 0x37
    56c2:	4563      	cmp	r3, ip
    56c4:	dd17      	ble.n	56f6 <_strtol_l.constprop.0+0xaa>
    56c6:	f1b5 3fff 	cmp.w	r5, #4294967295
    56ca:	d0ec      	beq.n	56a6 <_strtol_l.constprop.0+0x5a>
    56cc:	42b7      	cmp	r7, r6
    56ce:	d2e6      	bcs.n	569e <_strtol_l.constprop.0+0x52>
    56d0:	f04f 35ff 	mov.w	r5, #4294967295
    56d4:	e7e7      	b.n	56a6 <_strtol_l.constprop.0+0x5a>
    56d6:	f000 fc83 	bl	5fe0 <__errno>
    56da:	2316      	movs	r3, #22
    56dc:	6003      	str	r3, [r0, #0]
    56de:	2000      	movs	r0, #0
    56e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    56e4:	f1ab 0c61 	sub.w	ip, fp, #97	; 0x61
    56e8:	f1bc 0f19 	cmp.w	ip, #25
    56ec:	d803      	bhi.n	56f6 <_strtol_l.constprop.0+0xaa>
    56ee:	f1ab 0c57 	sub.w	ip, fp, #87	; 0x57
    56f2:	4563      	cmp	r3, ip
    56f4:	dce7      	bgt.n	56c6 <_strtol_l.constprop.0+0x7a>
    56f6:	1c6b      	adds	r3, r5, #1
    56f8:	d027      	beq.n	574a <_strtol_l.constprop.0+0xfe>
    56fa:	b98c      	cbnz	r4, 5720 <_strtol_l.constprop.0+0xd4>
    56fc:	b10a      	cbz	r2, 5702 <_strtol_l.constprop.0+0xb6>
    56fe:	bba5      	cbnz	r5, 576a <_strtol_l.constprop.0+0x11e>
    5700:	6011      	str	r1, [r2, #0]
    5702:	4630      	mov	r0, r6
    5704:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5708:	45e2      	cmp	sl, ip
    570a:	dac9      	bge.n	56a0 <_strtol_l.constprop.0+0x54>
    570c:	f04f 35ff 	mov.w	r5, #4294967295
    5710:	e7c9      	b.n	56a6 <_strtol_l.constprop.0+0x5a>
    5712:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
    5716:	d005      	beq.n	5724 <_strtol_l.constprop.0+0xd8>
    5718:	f04f 080a 	mov.w	r8, #10
    571c:	4643      	mov	r3, r8
    571e:	e7b7      	b.n	5690 <_strtol_l.constprop.0+0x44>
    5720:	4276      	negs	r6, r6
    5722:	e7eb      	b.n	56fc <_strtol_l.constprop.0+0xb0>
    5724:	f89e 3000 	ldrb.w	r3, [lr]
    5728:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    572c:	2b58      	cmp	r3, #88	; 0x58
    572e:	d121      	bne.n	5774 <_strtol_l.constprop.0+0x128>
    5730:	f04f 0810 	mov.w	r8, #16
    5734:	f89e b001 	ldrb.w	fp, [lr, #1]
    5738:	4643      	mov	r3, r8
    573a:	f10e 0e02 	add.w	lr, lr, #2
    573e:	e7a7      	b.n	5690 <_strtol_l.constprop.0+0x44>
    5740:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
    5744:	d01a      	beq.n	577c <_strtol_l.constprop.0+0x130>
    5746:	4698      	mov	r8, r3
    5748:	e7a2      	b.n	5690 <_strtol_l.constprop.0+0x44>
    574a:	2322      	movs	r3, #34	; 0x22
    574c:	6003      	str	r3, [r0, #0]
    574e:	b172      	cbz	r2, 576e <_strtol_l.constprop.0+0x122>
    5750:	f10e 31ff 	add.w	r1, lr, #4294967295
    5754:	464e      	mov	r6, r9
    5756:	6011      	str	r1, [r2, #0]
    5758:	e7d3      	b.n	5702 <_strtol_l.constprop.0+0xb6>
    575a:	f89e b000 	ldrb.w	fp, [lr]
    575e:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
    5762:	f106 0e02 	add.w	lr, r6, #2
    5766:	2401      	movs	r4, #1
    5768:	e78e      	b.n	5688 <_strtol_l.constprop.0+0x3c>
    576a:	46b1      	mov	r9, r6
    576c:	e7f0      	b.n	5750 <_strtol_l.constprop.0+0x104>
    576e:	464e      	mov	r6, r9
    5770:	4630      	mov	r0, r6
    5772:	e7c7      	b.n	5704 <_strtol_l.constprop.0+0xb8>
    5774:	f04f 0808 	mov.w	r8, #8
    5778:	4643      	mov	r3, r8
    577a:	e789      	b.n	5690 <_strtol_l.constprop.0+0x44>
    577c:	f89e 5000 	ldrb.w	r5, [lr]
    5780:	f005 05df 	and.w	r5, r5, #223	; 0xdf
    5784:	2d58      	cmp	r5, #88	; 0x58
    5786:	d0d3      	beq.n	5730 <_strtol_l.constprop.0+0xe4>
    5788:	4698      	mov	r8, r3
    578a:	e781      	b.n	5690 <_strtol_l.constprop.0+0x44>
    578c:	2000073d 	.word	0x2000073d

00005790 <_strtol_r>:
    5790:	f7ff bf5c 	b.w	564c <_strtol_l.constprop.0>

00005794 <__cxa_atexit>:
    5794:	4613      	mov	r3, r2
    5796:	460a      	mov	r2, r1
    5798:	4601      	mov	r1, r0
    579a:	2002      	movs	r0, #2
    579c:	f000 beae 	b.w	64fc <__register_exitproc>

000057a0 <isspace>:
    57a0:	4b02      	ldr	r3, [pc, #8]	; (57ac <isspace+0xc>)
    57a2:	4418      	add	r0, r3
    57a4:	7840      	ldrb	r0, [r0, #1]
    57a6:	f000 0008 	and.w	r0, r0, #8
    57aa:	4770      	bx	lr
    57ac:	2000073c 	.word	0x2000073c

000057b0 <toupper>:
    57b0:	4b03      	ldr	r3, [pc, #12]	; (57c0 <toupper+0x10>)
    57b2:	5c1b      	ldrb	r3, [r3, r0]
    57b4:	f003 0303 	and.w	r3, r3, #3
    57b8:	2b02      	cmp	r3, #2
    57ba:	bf08      	it	eq
    57bc:	3820      	subeq	r0, #32
    57be:	4770      	bx	lr
    57c0:	2000073d 	.word	0x2000073d

000057c4 <stdio_exit_handler>:
    57c4:	4a02      	ldr	r2, [pc, #8]	; (57d0 <stdio_exit_handler+0xc>)
    57c6:	4903      	ldr	r1, [pc, #12]	; (57d4 <stdio_exit_handler+0x10>)
    57c8:	4803      	ldr	r0, [pc, #12]	; (57d8 <stdio_exit_handler+0x14>)
    57ca:	f000 b8bb 	b.w	5944 <_fwalk_sglue>
    57ce:	bf00      	nop
    57d0:	200081c4 	.word	0x200081c4
    57d4:	0000aea5 	.word	0x0000aea5
    57d8:	20007a38 	.word	0x20007a38

000057dc <cleanup_stdio>:
    57dc:	4b0c      	ldr	r3, [pc, #48]	; (5810 <cleanup_stdio+0x34>)
    57de:	6841      	ldr	r1, [r0, #4]
    57e0:	4299      	cmp	r1, r3
    57e2:	b510      	push	{r4, lr}
    57e4:	4604      	mov	r4, r0
    57e6:	d001      	beq.n	57ec <cleanup_stdio+0x10>
    57e8:	f005 fb5c 	bl	aea4 <_fclose_r>
    57ec:	68a1      	ldr	r1, [r4, #8]
    57ee:	4b09      	ldr	r3, [pc, #36]	; (5814 <cleanup_stdio+0x38>)
    57f0:	4299      	cmp	r1, r3
    57f2:	d002      	beq.n	57fa <cleanup_stdio+0x1e>
    57f4:	4620      	mov	r0, r4
    57f6:	f005 fb55 	bl	aea4 <_fclose_r>
    57fa:	68e1      	ldr	r1, [r4, #12]
    57fc:	4b06      	ldr	r3, [pc, #24]	; (5818 <cleanup_stdio+0x3c>)
    57fe:	4299      	cmp	r1, r3
    5800:	d004      	beq.n	580c <cleanup_stdio+0x30>
    5802:	4620      	mov	r0, r4
    5804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5808:	f005 bb4c 	b.w	aea4 <_fclose_r>
    580c:	bd10      	pop	{r4, pc}
    580e:	bf00      	nop
    5810:	20008c90 	.word	0x20008c90
    5814:	20008cf8 	.word	0x20008cf8
    5818:	20008d60 	.word	0x20008d60

0000581c <global_stdio_init.part.0>:
    581c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5820:	4c2a      	ldr	r4, [pc, #168]	; (58cc <global_stdio_init.part.0+0xb0>)
    5822:	4b2b      	ldr	r3, [pc, #172]	; (58d0 <global_stdio_init.part.0+0xb4>)
    5824:	482b      	ldr	r0, [pc, #172]	; (58d4 <global_stdio_init.part.0+0xb8>)
    5826:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 58e8 <global_stdio_init.part.0+0xcc>
    582a:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 58ec <global_stdio_init.part.0+0xd0>
    582e:	4f2a      	ldr	r7, [pc, #168]	; (58d8 <global_stdio_init.part.0+0xbc>)
    5830:	6018      	str	r0, [r3, #0]
    5832:	2500      	movs	r5, #0
    5834:	2304      	movs	r3, #4
    5836:	2208      	movs	r2, #8
    5838:	4629      	mov	r1, r5
    583a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    583e:	4e27      	ldr	r6, [pc, #156]	; (58dc <global_stdio_init.part.0+0xc0>)
    5840:	6665      	str	r5, [r4, #100]	; 0x64
    5842:	e9c4 5302 	strd	r5, r3, [r4, #8]
    5846:	e9c4 5500 	strd	r5, r5, [r4]
    584a:	e9c4 5504 	strd	r5, r5, [r4, #16]
    584e:	61a5      	str	r5, [r4, #24]
    5850:	f000 fa2a 	bl	5ca8 <memset>
    5854:	4b22      	ldr	r3, [pc, #136]	; (58e0 <global_stdio_init.part.0+0xc4>)
    5856:	6763      	str	r3, [r4, #116]	; 0x74
    5858:	2208      	movs	r2, #8
    585a:	4629      	mov	r1, r5
    585c:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    5860:	e9c4 4907 	strd	r4, r9, [r4, #28]
    5864:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
    5868:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
    586c:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
    5870:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
    5874:	6725      	str	r5, [r4, #112]	; 0x70
    5876:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    587a:	62e6      	str	r6, [r4, #44]	; 0x2c
    587c:	f000 fa14 	bl	5ca8 <memset>
    5880:	4b18      	ldr	r3, [pc, #96]	; (58e4 <global_stdio_init.part.0+0xc8>)
    5882:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    5886:	4629      	mov	r1, r5
    5888:	f104 0368 	add.w	r3, r4, #104	; 0x68
    588c:	2208      	movs	r2, #8
    588e:	f504 7096 	add.w	r0, r4, #300	; 0x12c
    5892:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    5896:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
    589a:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
    589e:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
    58a2:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
    58a6:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    58aa:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
    58ae:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    58b2:	f000 f9f9 	bl	5ca8 <memset>
    58b6:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    58ba:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
    58be:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
    58c2:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    58c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    58ca:	bf00      	nop
    58cc:	20008c90 	.word	0x20008c90
    58d0:	20008dc8 	.word	0x20008dc8
    58d4:	000057c5 	.word	0x000057c5
    58d8:	00005a4d 	.word	0x00005a4d
    58dc:	00005a6d 	.word	0x00005a6d
    58e0:	00010009 	.word	0x00010009
    58e4:	00020012 	.word	0x00020012
    58e8:	000059e5 	.word	0x000059e5
    58ec:	00005a0d 	.word	0x00005a0d

000058f0 <__sinit>:
    58f0:	b510      	push	{r4, lr}
    58f2:	4604      	mov	r4, r0
    58f4:	480a      	ldr	r0, [pc, #40]	; (5920 <__sinit+0x30>)
    58f6:	f000 fba1 	bl	603c <__retarget_lock_acquire_recursive>
    58fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
    58fc:	b923      	cbnz	r3, 5908 <__sinit+0x18>
    58fe:	4b09      	ldr	r3, [pc, #36]	; (5924 <__sinit+0x34>)
    5900:	4a09      	ldr	r2, [pc, #36]	; (5928 <__sinit+0x38>)
    5902:	681b      	ldr	r3, [r3, #0]
    5904:	6362      	str	r2, [r4, #52]	; 0x34
    5906:	b123      	cbz	r3, 5912 <__sinit+0x22>
    5908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    590c:	4804      	ldr	r0, [pc, #16]	; (5920 <__sinit+0x30>)
    590e:	f000 bb97 	b.w	6040 <__retarget_lock_release_recursive>
    5912:	f7ff ff83 	bl	581c <global_stdio_init.part.0>
    5916:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    591a:	4801      	ldr	r0, [pc, #4]	; (5920 <__sinit+0x30>)
    591c:	f000 bb90 	b.w	6040 <__retarget_lock_release_recursive>
    5920:	20008c58 	.word	0x20008c58
    5924:	20008dc8 	.word	0x20008dc8
    5928:	000057dd 	.word	0x000057dd

0000592c <__sfp_lock_acquire>:
    592c:	4801      	ldr	r0, [pc, #4]	; (5934 <__sfp_lock_acquire+0x8>)
    592e:	f000 bb85 	b.w	603c <__retarget_lock_acquire_recursive>
    5932:	bf00      	nop
    5934:	20008c58 	.word	0x20008c58

00005938 <__sfp_lock_release>:
    5938:	4801      	ldr	r0, [pc, #4]	; (5940 <__sfp_lock_release+0x8>)
    593a:	f000 bb81 	b.w	6040 <__retarget_lock_release_recursive>
    593e:	bf00      	nop
    5940:	20008c58 	.word	0x20008c58

00005944 <_fwalk_sglue>:
    5944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5948:	4680      	mov	r8, r0
    594a:	460f      	mov	r7, r1
    594c:	4616      	mov	r6, r2
    594e:	f04f 0900 	mov.w	r9, #0
    5952:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
    5956:	3d01      	subs	r5, #1
    5958:	d411      	bmi.n	597e <_fwalk_sglue+0x3a>
    595a:	89a3      	ldrh	r3, [r4, #12]
    595c:	2b01      	cmp	r3, #1
    595e:	f105 35ff 	add.w	r5, r5, #4294967295
    5962:	d908      	bls.n	5976 <_fwalk_sglue+0x32>
    5964:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    5968:	3301      	adds	r3, #1
    596a:	4621      	mov	r1, r4
    596c:	d003      	beq.n	5976 <_fwalk_sglue+0x32>
    596e:	4640      	mov	r0, r8
    5970:	47b8      	blx	r7
    5972:	ea49 0900 	orr.w	r9, r9, r0
    5976:	1c6b      	adds	r3, r5, #1
    5978:	f104 0468 	add.w	r4, r4, #104	; 0x68
    597c:	d1ed      	bne.n	595a <_fwalk_sglue+0x16>
    597e:	6836      	ldr	r6, [r6, #0]
    5980:	2e00      	cmp	r6, #0
    5982:	d1e6      	bne.n	5952 <_fwalk_sglue+0xe>
    5984:	4648      	mov	r0, r9
    5986:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    598a:	bf00      	nop

0000598c <sscanf>:
    598c:	b40e      	push	{r1, r2, r3}
    598e:	b510      	push	{r4, lr}
    5990:	b09f      	sub	sp, #124	; 0x7c
    5992:	ac21      	add	r4, sp, #132	; 0x84
    5994:	f44f 7101 	mov.w	r1, #516	; 0x204
    5998:	f854 2b04 	ldr.w	r2, [r4], #4
    599c:	9201      	str	r2, [sp, #4]
    599e:	f8ad 101c 	strh.w	r1, [sp, #28]
    59a2:	9004      	str	r0, [sp, #16]
    59a4:	9008      	str	r0, [sp, #32]
    59a6:	f000 fd2b 	bl	6400 <strlen>
    59aa:	9005      	str	r0, [sp, #20]
    59ac:	9009      	str	r0, [sp, #36]	; 0x24
    59ae:	480b      	ldr	r0, [pc, #44]	; (59dc <sscanf+0x50>)
    59b0:	490b      	ldr	r1, [pc, #44]	; (59e0 <sscanf+0x54>)
    59b2:	910c      	str	r1, [sp, #48]	; 0x30
    59b4:	2300      	movs	r3, #0
    59b6:	f64f 7cff 	movw	ip, #65535	; 0xffff
    59ba:	9310      	str	r3, [sp, #64]	; 0x40
    59bc:	9315      	str	r3, [sp, #84]	; 0x54
    59be:	9a01      	ldr	r2, [sp, #4]
    59c0:	6800      	ldr	r0, [r0, #0]
    59c2:	f8ad c01e 	strh.w	ip, [sp, #30]
    59c6:	4623      	mov	r3, r4
    59c8:	a904      	add	r1, sp, #16
    59ca:	9403      	str	r4, [sp, #12]
    59cc:	f003 fe42 	bl	9654 <__ssvfscanf_r>
    59d0:	b01f      	add	sp, #124	; 0x7c
    59d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    59d6:	b003      	add	sp, #12
    59d8:	4770      	bx	lr
    59da:	bf00      	nop
    59dc:	200081d0 	.word	0x200081d0
    59e0:	00005a09 	.word	0x00005a09

000059e4 <__sread>:
    59e4:	b510      	push	{r4, lr}
    59e6:	460c      	mov	r4, r1
    59e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    59ec:	f000 faba 	bl	5f64 <_read_r>
    59f0:	2800      	cmp	r0, #0
    59f2:	db03      	blt.n	59fc <__sread+0x18>
    59f4:	6d23      	ldr	r3, [r4, #80]	; 0x50
    59f6:	4403      	add	r3, r0
    59f8:	6523      	str	r3, [r4, #80]	; 0x50
    59fa:	bd10      	pop	{r4, pc}
    59fc:	89a3      	ldrh	r3, [r4, #12]
    59fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    5a02:	81a3      	strh	r3, [r4, #12]
    5a04:	bd10      	pop	{r4, pc}
    5a06:	bf00      	nop

00005a08 <__seofread>:
    5a08:	2000      	movs	r0, #0
    5a0a:	4770      	bx	lr

00005a0c <__swrite>:
    5a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5a10:	460c      	mov	r4, r1
    5a12:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
    5a16:	461f      	mov	r7, r3
    5a18:	05cb      	lsls	r3, r1, #23
    5a1a:	4605      	mov	r5, r0
    5a1c:	4616      	mov	r6, r2
    5a1e:	d40b      	bmi.n	5a38 <__swrite+0x2c>
    5a20:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
    5a24:	81a1      	strh	r1, [r4, #12]
    5a26:	463b      	mov	r3, r7
    5a28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    5a2c:	4632      	mov	r2, r6
    5a2e:	4628      	mov	r0, r5
    5a30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5a34:	f000 babe 	b.w	5fb4 <_write_r>
    5a38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    5a3c:	2302      	movs	r3, #2
    5a3e:	2200      	movs	r2, #0
    5a40:	f000 fa7a 	bl	5f38 <_lseek_r>
    5a44:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
    5a48:	e7ea      	b.n	5a20 <__swrite+0x14>
    5a4a:	bf00      	nop

00005a4c <__sseek>:
    5a4c:	b510      	push	{r4, lr}
    5a4e:	460c      	mov	r4, r1
    5a50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    5a54:	f000 fa70 	bl	5f38 <_lseek_r>
    5a58:	89a3      	ldrh	r3, [r4, #12]
    5a5a:	1c42      	adds	r2, r0, #1
    5a5c:	bf0e      	itee	eq
    5a5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    5a62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    5a66:	6520      	strne	r0, [r4, #80]	; 0x50
    5a68:	81a3      	strh	r3, [r4, #12]
    5a6a:	bd10      	pop	{r4, pc}

00005a6c <__sclose>:
    5a6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    5a70:	f000 ba50 	b.w	5f14 <_close_r>

00005a74 <_vdprintf_r>:
    5a74:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a76:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
    5a7a:	af04      	add	r7, sp, #16
    5a7c:	9300      	str	r3, [sp, #0]
    5a7e:	4613      	mov	r3, r2
    5a80:	f44f 7200 	mov.w	r2, #512	; 0x200
    5a84:	460e      	mov	r6, r1
    5a86:	9203      	str	r2, [sp, #12]
    5a88:	4639      	mov	r1, r7
    5a8a:	aa03      	add	r2, sp, #12
    5a8c:	4605      	mov	r5, r0
    5a8e:	f000 f85d 	bl	5b4c <_vasnprintf_r>
    5a92:	b188      	cbz	r0, 5ab8 <_vdprintf_r+0x44>
    5a94:	4604      	mov	r4, r0
    5a96:	4602      	mov	r2, r0
    5a98:	9b03      	ldr	r3, [sp, #12]
    5a9a:	4631      	mov	r1, r6
    5a9c:	4628      	mov	r0, r5
    5a9e:	f000 fa89 	bl	5fb4 <_write_r>
    5aa2:	42bc      	cmp	r4, r7
    5aa4:	9003      	str	r0, [sp, #12]
    5aa6:	d004      	beq.n	5ab2 <_vdprintf_r+0x3e>
    5aa8:	4628      	mov	r0, r5
    5aaa:	4621      	mov	r1, r4
    5aac:	f000 fdba 	bl	6624 <_free_r>
    5ab0:	9803      	ldr	r0, [sp, #12]
    5ab2:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
    5ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5ab8:	f04f 30ff 	mov.w	r0, #4294967295
    5abc:	e7f9      	b.n	5ab2 <_vdprintf_r+0x3e>
    5abe:	bf00      	nop

00005ac0 <vdprintf>:
    5ac0:	b410      	push	{r4}
    5ac2:	4c05      	ldr	r4, [pc, #20]	; (5ad8 <vdprintf+0x18>)
    5ac4:	4684      	mov	ip, r0
    5ac6:	4613      	mov	r3, r2
    5ac8:	6820      	ldr	r0, [r4, #0]
    5aca:	f85d 4b04 	ldr.w	r4, [sp], #4
    5ace:	460a      	mov	r2, r1
    5ad0:	4661      	mov	r1, ip
    5ad2:	f7ff bfcf 	b.w	5a74 <_vdprintf_r>
    5ad6:	bf00      	nop
    5ad8:	200081d0 	.word	0x200081d0

00005adc <vsnprintf>:
    5adc:	b510      	push	{r4, lr}
    5ade:	4c1a      	ldr	r4, [pc, #104]	; (5b48 <vsnprintf+0x6c>)
    5ae0:	2900      	cmp	r1, #0
    5ae2:	6824      	ldr	r4, [r4, #0]
    5ae4:	b09a      	sub	sp, #104	; 0x68
    5ae6:	db2a      	blt.n	5b3e <vsnprintf+0x62>
    5ae8:	9000      	str	r0, [sp, #0]
    5aea:	9004      	str	r0, [sp, #16]
    5aec:	f44f 7002 	mov.w	r0, #520	; 0x208
    5af0:	f8ad 000c 	strh.w	r0, [sp, #12]
    5af4:	d013      	beq.n	5b1e <vsnprintf+0x42>
    5af6:	3901      	subs	r1, #1
    5af8:	f64f 70ff 	movw	r0, #65535	; 0xffff
    5afc:	9102      	str	r1, [sp, #8]
    5afe:	9105      	str	r1, [sp, #20]
    5b00:	f8ad 000e 	strh.w	r0, [sp, #14]
    5b04:	4669      	mov	r1, sp
    5b06:	4620      	mov	r0, r4
    5b08:	f002 f802 	bl	7b10 <_svfprintf_r>
    5b0c:	1c42      	adds	r2, r0, #1
    5b0e:	da01      	bge.n	5b14 <vsnprintf+0x38>
    5b10:	238b      	movs	r3, #139	; 0x8b
    5b12:	6023      	str	r3, [r4, #0]
    5b14:	9b00      	ldr	r3, [sp, #0]
    5b16:	2200      	movs	r2, #0
    5b18:	701a      	strb	r2, [r3, #0]
    5b1a:	b01a      	add	sp, #104	; 0x68
    5b1c:	bd10      	pop	{r4, pc}
    5b1e:	f64f 70ff 	movw	r0, #65535	; 0xffff
    5b22:	9102      	str	r1, [sp, #8]
    5b24:	9105      	str	r1, [sp, #20]
    5b26:	f8ad 000e 	strh.w	r0, [sp, #14]
    5b2a:	4669      	mov	r1, sp
    5b2c:	4620      	mov	r0, r4
    5b2e:	f001 ffef 	bl	7b10 <_svfprintf_r>
    5b32:	1c43      	adds	r3, r0, #1
    5b34:	da01      	bge.n	5b3a <vsnprintf+0x5e>
    5b36:	238b      	movs	r3, #139	; 0x8b
    5b38:	6023      	str	r3, [r4, #0]
    5b3a:	b01a      	add	sp, #104	; 0x68
    5b3c:	bd10      	pop	{r4, pc}
    5b3e:	238b      	movs	r3, #139	; 0x8b
    5b40:	6023      	str	r3, [r4, #0]
    5b42:	f04f 30ff 	mov.w	r0, #4294967295
    5b46:	e7f8      	b.n	5b3a <vsnprintf+0x5e>
    5b48:	200081d0 	.word	0x200081d0

00005b4c <_vasnprintf_r>:
    5b4c:	b530      	push	{r4, r5, lr}
    5b4e:	6814      	ldr	r4, [r2, #0]
    5b50:	4615      	mov	r5, r2
    5b52:	b09b      	sub	sp, #108	; 0x6c
    5b54:	461a      	mov	r2, r3
    5b56:	b109      	cbz	r1, 5b5c <_vasnprintf_r+0x10>
    5b58:	2c00      	cmp	r4, #0
    5b5a:	d119      	bne.n	5b90 <_vasnprintf_r+0x44>
    5b5c:	2100      	movs	r1, #0
    5b5e:	f44f 7322 	mov.w	r3, #648	; 0x288
    5b62:	f8ad 300c 	strh.w	r3, [sp, #12]
    5b66:	9100      	str	r1, [sp, #0]
    5b68:	9104      	str	r1, [sp, #16]
    5b6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    5b6e:	9102      	str	r1, [sp, #8]
    5b70:	9105      	str	r1, [sp, #20]
    5b72:	f8ad 300e 	strh.w	r3, [sp, #14]
    5b76:	4669      	mov	r1, sp
    5b78:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    5b7a:	f001 ffc9 	bl	7b10 <_svfprintf_r>
    5b7e:	2800      	cmp	r0, #0
    5b80:	db13      	blt.n	5baa <_vasnprintf_r+0x5e>
    5b82:	9b00      	ldr	r3, [sp, #0]
    5b84:	6028      	str	r0, [r5, #0]
    5b86:	2200      	movs	r2, #0
    5b88:	701a      	strb	r2, [r3, #0]
    5b8a:	9804      	ldr	r0, [sp, #16]
    5b8c:	b01b      	add	sp, #108	; 0x6c
    5b8e:	bd30      	pop	{r4, r5, pc}
    5b90:	f44f 63c1 	mov.w	r3, #1544	; 0x608
    5b94:	9100      	str	r1, [sp, #0]
    5b96:	9104      	str	r1, [sp, #16]
    5b98:	f8ad 300c 	strh.w	r3, [sp, #12]
    5b9c:	4621      	mov	r1, r4
    5b9e:	dae4      	bge.n	5b6a <_vasnprintf_r+0x1e>
    5ba0:	238b      	movs	r3, #139	; 0x8b
    5ba2:	6003      	str	r3, [r0, #0]
    5ba4:	2000      	movs	r0, #0
    5ba6:	b01b      	add	sp, #108	; 0x6c
    5ba8:	bd30      	pop	{r4, r5, pc}
    5baa:	2000      	movs	r0, #0
    5bac:	e7ee      	b.n	5b8c <_vasnprintf_r+0x40>
    5bae:	bf00      	nop

00005bb0 <memmove>:
    5bb0:	4288      	cmp	r0, r1
    5bb2:	d90d      	bls.n	5bd0 <memmove+0x20>
    5bb4:	188b      	adds	r3, r1, r2
    5bb6:	4283      	cmp	r3, r0
    5bb8:	d90a      	bls.n	5bd0 <memmove+0x20>
    5bba:	eb00 0c02 	add.w	ip, r0, r2
    5bbe:	b1ba      	cbz	r2, 5bf0 <memmove+0x40>
    5bc0:	4662      	mov	r2, ip
    5bc2:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
    5bc6:	f802 cd01 	strb.w	ip, [r2, #-1]!
    5bca:	4299      	cmp	r1, r3
    5bcc:	d1f9      	bne.n	5bc2 <memmove+0x12>
    5bce:	4770      	bx	lr
    5bd0:	2a0f      	cmp	r2, #15
    5bd2:	d80e      	bhi.n	5bf2 <memmove+0x42>
    5bd4:	4603      	mov	r3, r0
    5bd6:	f102 3cff 	add.w	ip, r2, #4294967295
    5bda:	b14a      	cbz	r2, 5bf0 <memmove+0x40>
    5bdc:	f10c 0c01 	add.w	ip, ip, #1
    5be0:	3b01      	subs	r3, #1
    5be2:	448c      	add	ip, r1
    5be4:	f811 2b01 	ldrb.w	r2, [r1], #1
    5be8:	f803 2f01 	strb.w	r2, [r3, #1]!
    5bec:	4561      	cmp	r1, ip
    5bee:	d1f9      	bne.n	5be4 <memmove+0x34>
    5bf0:	4770      	bx	lr
    5bf2:	ea40 0301 	orr.w	r3, r0, r1
    5bf6:	079b      	lsls	r3, r3, #30
    5bf8:	d150      	bne.n	5c9c <memmove+0xec>
    5bfa:	f1a2 0310 	sub.w	r3, r2, #16
    5bfe:	b570      	push	{r4, r5, r6, lr}
    5c00:	f101 0c20 	add.w	ip, r1, #32
    5c04:	f023 050f 	bic.w	r5, r3, #15
    5c08:	f101 0e10 	add.w	lr, r1, #16
    5c0c:	f100 0410 	add.w	r4, r0, #16
    5c10:	44ac      	add	ip, r5
    5c12:	091b      	lsrs	r3, r3, #4
    5c14:	f85e 5c10 	ldr.w	r5, [lr, #-16]
    5c18:	f844 5c10 	str.w	r5, [r4, #-16]
    5c1c:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
    5c20:	f844 5c0c 	str.w	r5, [r4, #-12]
    5c24:	f85e 5c08 	ldr.w	r5, [lr, #-8]
    5c28:	f844 5c08 	str.w	r5, [r4, #-8]
    5c2c:	f85e 5c04 	ldr.w	r5, [lr, #-4]
    5c30:	f844 5c04 	str.w	r5, [r4, #-4]
    5c34:	f10e 0e10 	add.w	lr, lr, #16
    5c38:	45e6      	cmp	lr, ip
    5c3a:	f104 0410 	add.w	r4, r4, #16
    5c3e:	d1e9      	bne.n	5c14 <memmove+0x64>
    5c40:	3301      	adds	r3, #1
    5c42:	f012 0f0c 	tst.w	r2, #12
    5c46:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    5c4a:	f002 040f 	and.w	r4, r2, #15
    5c4e:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    5c52:	d027      	beq.n	5ca4 <memmove+0xf4>
    5c54:	3c04      	subs	r4, #4
    5c56:	f024 0603 	bic.w	r6, r4, #3
    5c5a:	ea4f 0c94 	mov.w	ip, r4, lsr #2
    5c5e:	441e      	add	r6, r3
    5c60:	1f1c      	subs	r4, r3, #4
    5c62:	468e      	mov	lr, r1
    5c64:	f85e 5b04 	ldr.w	r5, [lr], #4
    5c68:	f844 5f04 	str.w	r5, [r4, #4]!
    5c6c:	42b4      	cmp	r4, r6
    5c6e:	d1f9      	bne.n	5c64 <memmove+0xb4>
    5c70:	f10c 0401 	add.w	r4, ip, #1
    5c74:	f002 0203 	and.w	r2, r2, #3
    5c78:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    5c7c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    5c80:	f102 3cff 	add.w	ip, r2, #4294967295
    5c84:	b14a      	cbz	r2, 5c9a <memmove+0xea>
    5c86:	f10c 0c01 	add.w	ip, ip, #1
    5c8a:	3b01      	subs	r3, #1
    5c8c:	448c      	add	ip, r1
    5c8e:	f811 2b01 	ldrb.w	r2, [r1], #1
    5c92:	f803 2f01 	strb.w	r2, [r3, #1]!
    5c96:	4561      	cmp	r1, ip
    5c98:	d1f9      	bne.n	5c8e <memmove+0xde>
    5c9a:	bd70      	pop	{r4, r5, r6, pc}
    5c9c:	f102 3cff 	add.w	ip, r2, #4294967295
    5ca0:	4603      	mov	r3, r0
    5ca2:	e79b      	b.n	5bdc <memmove+0x2c>
    5ca4:	4622      	mov	r2, r4
    5ca6:	e7eb      	b.n	5c80 <memmove+0xd0>

00005ca8 <memset>:
    5ca8:	0783      	lsls	r3, r0, #30
    5caa:	b530      	push	{r4, r5, lr}
    5cac:	d048      	beq.n	5d40 <memset+0x98>
    5cae:	1e54      	subs	r4, r2, #1
    5cb0:	2a00      	cmp	r2, #0
    5cb2:	d03f      	beq.n	5d34 <memset+0x8c>
    5cb4:	b2ca      	uxtb	r2, r1
    5cb6:	4603      	mov	r3, r0
    5cb8:	e001      	b.n	5cbe <memset+0x16>
    5cba:	3c01      	subs	r4, #1
    5cbc:	d33a      	bcc.n	5d34 <memset+0x8c>
    5cbe:	f803 2b01 	strb.w	r2, [r3], #1
    5cc2:	079d      	lsls	r5, r3, #30
    5cc4:	d1f9      	bne.n	5cba <memset+0x12>
    5cc6:	2c03      	cmp	r4, #3
    5cc8:	d92d      	bls.n	5d26 <memset+0x7e>
    5cca:	b2cd      	uxtb	r5, r1
    5ccc:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    5cd0:	2c0f      	cmp	r4, #15
    5cd2:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    5cd6:	d936      	bls.n	5d46 <memset+0x9e>
    5cd8:	f1a4 0210 	sub.w	r2, r4, #16
    5cdc:	f022 0c0f 	bic.w	ip, r2, #15
    5ce0:	f103 0e20 	add.w	lr, r3, #32
    5ce4:	44e6      	add	lr, ip
    5ce6:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    5cea:	f103 0210 	add.w	r2, r3, #16
    5cee:	e942 5504 	strd	r5, r5, [r2, #-16]
    5cf2:	e942 5502 	strd	r5, r5, [r2, #-8]
    5cf6:	3210      	adds	r2, #16
    5cf8:	4572      	cmp	r2, lr
    5cfa:	d1f8      	bne.n	5cee <memset+0x46>
    5cfc:	f10c 0201 	add.w	r2, ip, #1
    5d00:	f014 0f0c 	tst.w	r4, #12
    5d04:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    5d08:	f004 0c0f 	and.w	ip, r4, #15
    5d0c:	d013      	beq.n	5d36 <memset+0x8e>
    5d0e:	f1ac 0304 	sub.w	r3, ip, #4
    5d12:	f023 0303 	bic.w	r3, r3, #3
    5d16:	3304      	adds	r3, #4
    5d18:	4413      	add	r3, r2
    5d1a:	f842 5b04 	str.w	r5, [r2], #4
    5d1e:	4293      	cmp	r3, r2
    5d20:	d1fb      	bne.n	5d1a <memset+0x72>
    5d22:	f00c 0403 	and.w	r4, ip, #3
    5d26:	b12c      	cbz	r4, 5d34 <memset+0x8c>
    5d28:	b2c9      	uxtb	r1, r1
    5d2a:	441c      	add	r4, r3
    5d2c:	f803 1b01 	strb.w	r1, [r3], #1
    5d30:	429c      	cmp	r4, r3
    5d32:	d1fb      	bne.n	5d2c <memset+0x84>
    5d34:	bd30      	pop	{r4, r5, pc}
    5d36:	4664      	mov	r4, ip
    5d38:	4613      	mov	r3, r2
    5d3a:	2c00      	cmp	r4, #0
    5d3c:	d1f4      	bne.n	5d28 <memset+0x80>
    5d3e:	e7f9      	b.n	5d34 <memset+0x8c>
    5d40:	4603      	mov	r3, r0
    5d42:	4614      	mov	r4, r2
    5d44:	e7bf      	b.n	5cc6 <memset+0x1e>
    5d46:	461a      	mov	r2, r3
    5d48:	46a4      	mov	ip, r4
    5d4a:	e7e0      	b.n	5d0e <memset+0x66>

00005d4c <strchr>:
    5d4c:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    5d50:	4603      	mov	r3, r0
    5d52:	d044      	beq.n	5dde <strchr+0x92>
    5d54:	0782      	lsls	r2, r0, #30
    5d56:	d132      	bne.n	5dbe <strchr+0x72>
    5d58:	b510      	push	{r4, lr}
    5d5a:	6804      	ldr	r4, [r0, #0]
    5d5c:	ea41 2e01 	orr.w	lr, r1, r1, lsl #8
    5d60:	ea4e 4e0e 	orr.w	lr, lr, lr, lsl #16
    5d64:	ea8e 0204 	eor.w	r2, lr, r4
    5d68:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
    5d6c:	ea23 0302 	bic.w	r3, r3, r2
    5d70:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    5d74:	ea22 0204 	bic.w	r2, r2, r4
    5d78:	4313      	orrs	r3, r2
    5d7a:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    5d7e:	d10f      	bne.n	5da0 <strchr+0x54>
    5d80:	f850 4f04 	ldr.w	r4, [r0, #4]!
    5d84:	ea84 0c0e 	eor.w	ip, r4, lr
    5d88:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
    5d8c:	f1ac 3201 	sub.w	r2, ip, #16843009	; 0x1010101
    5d90:	ea23 0304 	bic.w	r3, r3, r4
    5d94:	ea22 020c 	bic.w	r2, r2, ip
    5d98:	4313      	orrs	r3, r2
    5d9a:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    5d9e:	d0ef      	beq.n	5d80 <strchr+0x34>
    5da0:	7803      	ldrb	r3, [r0, #0]
    5da2:	b923      	cbnz	r3, 5dae <strchr+0x62>
    5da4:	e036      	b.n	5e14 <strchr+0xc8>
    5da6:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    5daa:	2b00      	cmp	r3, #0
    5dac:	d032      	beq.n	5e14 <strchr+0xc8>
    5dae:	4299      	cmp	r1, r3
    5db0:	d1f9      	bne.n	5da6 <strchr+0x5a>
    5db2:	bd10      	pop	{r4, pc}
    5db4:	428a      	cmp	r2, r1
    5db6:	d011      	beq.n	5ddc <strchr+0x90>
    5db8:	079a      	lsls	r2, r3, #30
    5dba:	4618      	mov	r0, r3
    5dbc:	d0cc      	beq.n	5d58 <strchr+0xc>
    5dbe:	4618      	mov	r0, r3
    5dc0:	f813 2b01 	ldrb.w	r2, [r3], #1
    5dc4:	2a00      	cmp	r2, #0
    5dc6:	d1f5      	bne.n	5db4 <strchr+0x68>
    5dc8:	4610      	mov	r0, r2
    5dca:	4770      	bx	lr
    5dcc:	0799      	lsls	r1, r3, #30
    5dce:	4618      	mov	r0, r3
    5dd0:	d007      	beq.n	5de2 <strchr+0x96>
    5dd2:	4618      	mov	r0, r3
    5dd4:	3301      	adds	r3, #1
    5dd6:	7802      	ldrb	r2, [r0, #0]
    5dd8:	2a00      	cmp	r2, #0
    5dda:	d1f7      	bne.n	5dcc <strchr+0x80>
    5ddc:	4770      	bx	lr
    5dde:	0782      	lsls	r2, r0, #30
    5de0:	d1f7      	bne.n	5dd2 <strchr+0x86>
    5de2:	6802      	ldr	r2, [r0, #0]
    5de4:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
    5de8:	ea23 0302 	bic.w	r3, r3, r2
    5dec:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    5df0:	d108      	bne.n	5e04 <strchr+0xb8>
    5df2:	f850 2f04 	ldr.w	r2, [r0, #4]!
    5df6:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
    5dfa:	ea23 0302 	bic.w	r3, r3, r2
    5dfe:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    5e02:	d0f6      	beq.n	5df2 <strchr+0xa6>
    5e04:	7803      	ldrb	r3, [r0, #0]
    5e06:	2b00      	cmp	r3, #0
    5e08:	d0e8      	beq.n	5ddc <strchr+0x90>
    5e0a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    5e0e:	2b00      	cmp	r3, #0
    5e10:	d1fb      	bne.n	5e0a <strchr+0xbe>
    5e12:	4770      	bx	lr
    5e14:	4618      	mov	r0, r3
    5e16:	bd10      	pop	{r4, pc}

00005e18 <strncmp>:
    5e18:	2a00      	cmp	r2, #0
    5e1a:	d03e      	beq.n	5e9a <strncmp+0x82>
    5e1c:	ea40 0301 	orr.w	r3, r0, r1
    5e20:	079b      	lsls	r3, r3, #30
    5e22:	b530      	push	{r4, r5, lr}
    5e24:	4684      	mov	ip, r0
    5e26:	d12f      	bne.n	5e88 <strncmp+0x70>
    5e28:	2a03      	cmp	r2, #3
    5e2a:	d92d      	bls.n	5e88 <strncmp+0x70>
    5e2c:	460b      	mov	r3, r1
    5e2e:	e008      	b.n	5e42 <strncmp+0x2a>
    5e30:	3a04      	subs	r2, #4
    5e32:	4684      	mov	ip, r0
    5e34:	4619      	mov	r1, r3
    5e36:	d025      	beq.n	5e84 <strncmp+0x6c>
    5e38:	f01e 3f80 	tst.w	lr, #2155905152	; 0x80808080
    5e3c:	d122      	bne.n	5e84 <strncmp+0x6c>
    5e3e:	2a03      	cmp	r2, #3
    5e40:	d922      	bls.n	5e88 <strncmp+0x70>
    5e42:	6804      	ldr	r4, [r0, #0]
    5e44:	4619      	mov	r1, r3
    5e46:	f853 5b04 	ldr.w	r5, [r3], #4
    5e4a:	f1a4 3e01 	sub.w	lr, r4, #16843009	; 0x1010101
    5e4e:	42ac      	cmp	r4, r5
    5e50:	4684      	mov	ip, r0
    5e52:	ea2e 0e04 	bic.w	lr, lr, r4
    5e56:	f100 0004 	add.w	r0, r0, #4
    5e5a:	d0e9      	beq.n	5e30 <strncmp+0x18>
    5e5c:	f89c 0000 	ldrb.w	r0, [ip]
    5e60:	780c      	ldrb	r4, [r1, #0]
    5e62:	42a0      	cmp	r0, r4
    5e64:	d11b      	bne.n	5e9e <strncmp+0x86>
    5e66:	46e6      	mov	lr, ip
    5e68:	b168      	cbz	r0, 5e86 <strncmp+0x6e>
    5e6a:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
    5e6e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    5e72:	eba2 030e 	sub.w	r3, r2, lr
    5e76:	42a0      	cmp	r0, r4
    5e78:	f103 33ff 	add.w	r3, r3, #4294967295
    5e7c:	d10f      	bne.n	5e9e <strncmp+0x86>
    5e7e:	eb1c 0303 	adds.w	r3, ip, r3
    5e82:	d1f1      	bne.n	5e68 <strncmp+0x50>
    5e84:	2000      	movs	r0, #0
    5e86:	bd30      	pop	{r4, r5, pc}
    5e88:	f89c 0000 	ldrb.w	r0, [ip]
    5e8c:	780c      	ldrb	r4, [r1, #0]
    5e8e:	4284      	cmp	r4, r0
    5e90:	d105      	bne.n	5e9e <strncmp+0x86>
    5e92:	2a01      	cmp	r2, #1
    5e94:	d0f6      	beq.n	5e84 <strncmp+0x6c>
    5e96:	46e6      	mov	lr, ip
    5e98:	e7e6      	b.n	5e68 <strncmp+0x50>
    5e9a:	4610      	mov	r0, r2
    5e9c:	4770      	bx	lr
    5e9e:	1b00      	subs	r0, r0, r4
    5ea0:	bd30      	pop	{r4, r5, pc}
    5ea2:	bf00      	nop

00005ea4 <strncpy>:
    5ea4:	ea40 0301 	orr.w	r3, r0, r1
    5ea8:	079b      	lsls	r3, r3, #30
    5eaa:	b530      	push	{r4, r5, lr}
    5eac:	d101      	bne.n	5eb2 <strncpy+0xe>
    5eae:	2a03      	cmp	r2, #3
    5eb0:	d80f      	bhi.n	5ed2 <strncpy+0x2e>
    5eb2:	4684      	mov	ip, r0
    5eb4:	f101 3eff 	add.w	lr, r1, #4294967295
    5eb8:	e007      	b.n	5eca <strncpy+0x26>
    5eba:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    5ebe:	f803 1b01 	strb.w	r1, [r3], #1
    5ec2:	1e54      	subs	r4, r2, #1
    5ec4:	b1c1      	cbz	r1, 5ef8 <strncpy+0x54>
    5ec6:	469c      	mov	ip, r3
    5ec8:	4622      	mov	r2, r4
    5eca:	4663      	mov	r3, ip
    5ecc:	2a00      	cmp	r2, #0
    5ece:	d1f4      	bne.n	5eba <strncpy+0x16>
    5ed0:	bd30      	pop	{r4, r5, pc}
    5ed2:	460b      	mov	r3, r1
    5ed4:	4684      	mov	ip, r0
    5ed6:	4619      	mov	r1, r3
    5ed8:	f853 5b04 	ldr.w	r5, [r3], #4
    5edc:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
    5ee0:	ea24 0405 	bic.w	r4, r4, r5
    5ee4:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    5ee8:	d1e4      	bne.n	5eb4 <strncpy+0x10>
    5eea:	3a04      	subs	r2, #4
    5eec:	2a03      	cmp	r2, #3
    5eee:	f84c 5b04 	str.w	r5, [ip], #4
    5ef2:	4619      	mov	r1, r3
    5ef4:	d8ef      	bhi.n	5ed6 <strncpy+0x32>
    5ef6:	e7dd      	b.n	5eb4 <strncpy+0x10>
    5ef8:	4494      	add	ip, r2
    5efa:	2c00      	cmp	r4, #0
    5efc:	d0e8      	beq.n	5ed0 <strncpy+0x2c>
    5efe:	f803 1b01 	strb.w	r1, [r3], #1
    5f02:	4563      	cmp	r3, ip
    5f04:	d1fb      	bne.n	5efe <strncpy+0x5a>
    5f06:	bd30      	pop	{r4, r5, pc}

00005f08 <__locale_mb_cur_max>:
    5f08:	4b01      	ldr	r3, [pc, #4]	; (5f10 <__locale_mb_cur_max+0x8>)
    5f0a:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
    5f0e:	4770      	bx	lr
    5f10:	20007c48 	.word	0x20007c48

00005f14 <_close_r>:
    5f14:	b538      	push	{r3, r4, r5, lr}
    5f16:	4d07      	ldr	r5, [pc, #28]	; (5f34 <_close_r+0x20>)
    5f18:	2200      	movs	r2, #0
    5f1a:	4604      	mov	r4, r0
    5f1c:	4608      	mov	r0, r1
    5f1e:	602a      	str	r2, [r5, #0]
    5f20:	f7fc fadc 	bl	24dc <_close>
    5f24:	1c43      	adds	r3, r0, #1
    5f26:	d000      	beq.n	5f2a <_close_r+0x16>
    5f28:	bd38      	pop	{r3, r4, r5, pc}
    5f2a:	682b      	ldr	r3, [r5, #0]
    5f2c:	2b00      	cmp	r3, #0
    5f2e:	d0fb      	beq.n	5f28 <_close_r+0x14>
    5f30:	6023      	str	r3, [r4, #0]
    5f32:	bd38      	pop	{r3, r4, r5, pc}
    5f34:	20008de4 	.word	0x20008de4

00005f38 <_lseek_r>:
    5f38:	b538      	push	{r3, r4, r5, lr}
    5f3a:	460c      	mov	r4, r1
    5f3c:	4d08      	ldr	r5, [pc, #32]	; (5f60 <_lseek_r+0x28>)
    5f3e:	4684      	mov	ip, r0
    5f40:	4611      	mov	r1, r2
    5f42:	4620      	mov	r0, r4
    5f44:	461a      	mov	r2, r3
    5f46:	2300      	movs	r3, #0
    5f48:	602b      	str	r3, [r5, #0]
    5f4a:	4664      	mov	r4, ip
    5f4c:	f7fc fad2 	bl	24f4 <_lseek>
    5f50:	1c43      	adds	r3, r0, #1
    5f52:	d000      	beq.n	5f56 <_lseek_r+0x1e>
    5f54:	bd38      	pop	{r3, r4, r5, pc}
    5f56:	682b      	ldr	r3, [r5, #0]
    5f58:	2b00      	cmp	r3, #0
    5f5a:	d0fb      	beq.n	5f54 <_lseek_r+0x1c>
    5f5c:	6023      	str	r3, [r4, #0]
    5f5e:	bd38      	pop	{r3, r4, r5, pc}
    5f60:	20008de4 	.word	0x20008de4

00005f64 <_read_r>:
    5f64:	b538      	push	{r3, r4, r5, lr}
    5f66:	460c      	mov	r4, r1
    5f68:	4d08      	ldr	r5, [pc, #32]	; (5f8c <_read_r+0x28>)
    5f6a:	4684      	mov	ip, r0
    5f6c:	4611      	mov	r1, r2
    5f6e:	4620      	mov	r0, r4
    5f70:	461a      	mov	r2, r3
    5f72:	2300      	movs	r3, #0
    5f74:	602b      	str	r3, [r5, #0]
    5f76:	4664      	mov	r4, ip
    5f78:	f7fc faae 	bl	24d8 <_read>
    5f7c:	1c43      	adds	r3, r0, #1
    5f7e:	d000      	beq.n	5f82 <_read_r+0x1e>
    5f80:	bd38      	pop	{r3, r4, r5, pc}
    5f82:	682b      	ldr	r3, [r5, #0]
    5f84:	2b00      	cmp	r3, #0
    5f86:	d0fb      	beq.n	5f80 <_read_r+0x1c>
    5f88:	6023      	str	r3, [r4, #0]
    5f8a:	bd38      	pop	{r3, r4, r5, pc}
    5f8c:	20008de4 	.word	0x20008de4

00005f90 <_sbrk_r>:
    5f90:	b538      	push	{r3, r4, r5, lr}
    5f92:	4d07      	ldr	r5, [pc, #28]	; (5fb0 <_sbrk_r+0x20>)
    5f94:	2200      	movs	r2, #0
    5f96:	4604      	mov	r4, r0
    5f98:	4608      	mov	r0, r1
    5f9a:	602a      	str	r2, [r5, #0]
    5f9c:	f7fc fa82 	bl	24a4 <_sbrk>
    5fa0:	1c43      	adds	r3, r0, #1
    5fa2:	d000      	beq.n	5fa6 <_sbrk_r+0x16>
    5fa4:	bd38      	pop	{r3, r4, r5, pc}
    5fa6:	682b      	ldr	r3, [r5, #0]
    5fa8:	2b00      	cmp	r3, #0
    5faa:	d0fb      	beq.n	5fa4 <_sbrk_r+0x14>
    5fac:	6023      	str	r3, [r4, #0]
    5fae:	bd38      	pop	{r3, r4, r5, pc}
    5fb0:	20008de4 	.word	0x20008de4

00005fb4 <_write_r>:
    5fb4:	b538      	push	{r3, r4, r5, lr}
    5fb6:	460c      	mov	r4, r1
    5fb8:	4d08      	ldr	r5, [pc, #32]	; (5fdc <_write_r+0x28>)
    5fba:	4684      	mov	ip, r0
    5fbc:	4611      	mov	r1, r2
    5fbe:	4620      	mov	r0, r4
    5fc0:	461a      	mov	r2, r3
    5fc2:	2300      	movs	r3, #0
    5fc4:	602b      	str	r3, [r5, #0]
    5fc6:	4664      	mov	r4, ip
    5fc8:	f7fb fbc4 	bl	1754 <_write>
    5fcc:	1c43      	adds	r3, r0, #1
    5fce:	d000      	beq.n	5fd2 <_write_r+0x1e>
    5fd0:	bd38      	pop	{r3, r4, r5, pc}
    5fd2:	682b      	ldr	r3, [r5, #0]
    5fd4:	2b00      	cmp	r3, #0
    5fd6:	d0fb      	beq.n	5fd0 <_write_r+0x1c>
    5fd8:	6023      	str	r3, [r4, #0]
    5fda:	bd38      	pop	{r3, r4, r5, pc}
    5fdc:	20008de4 	.word	0x20008de4

00005fe0 <__errno>:
    5fe0:	4b01      	ldr	r3, [pc, #4]	; (5fe8 <__errno+0x8>)
    5fe2:	6818      	ldr	r0, [r3, #0]
    5fe4:	4770      	bx	lr
    5fe6:	bf00      	nop
    5fe8:	200081d0 	.word	0x200081d0

00005fec <__libc_init_array>:
    5fec:	b570      	push	{r4, r5, r6, lr}
    5fee:	4e0d      	ldr	r6, [pc, #52]	; (6024 <__libc_init_array+0x38>)
    5ff0:	4d0d      	ldr	r5, [pc, #52]	; (6028 <__libc_init_array+0x3c>)
    5ff2:	1b76      	subs	r6, r6, r5
    5ff4:	10b6      	asrs	r6, r6, #2
    5ff6:	d006      	beq.n	6006 <__libc_init_array+0x1a>
    5ff8:	2400      	movs	r4, #0
    5ffa:	f855 3b04 	ldr.w	r3, [r5], #4
    5ffe:	3401      	adds	r4, #1
    6000:	4798      	blx	r3
    6002:	42a6      	cmp	r6, r4
    6004:	d1f9      	bne.n	5ffa <__libc_init_array+0xe>
    6006:	4e09      	ldr	r6, [pc, #36]	; (602c <__libc_init_array+0x40>)
    6008:	4d09      	ldr	r5, [pc, #36]	; (6030 <__libc_init_array+0x44>)
    600a:	1b76      	subs	r6, r6, r5
    600c:	f008 fc48 	bl	e8a0 <___init_veneer>
    6010:	10b6      	asrs	r6, r6, #2
    6012:	d006      	beq.n	6022 <__libc_init_array+0x36>
    6014:	2400      	movs	r4, #0
    6016:	f855 3b04 	ldr.w	r3, [r5], #4
    601a:	3401      	adds	r4, #1
    601c:	4798      	blx	r3
    601e:	42a6      	cmp	r6, r4
    6020:	d1f9      	bne.n	6016 <__libc_init_array+0x2a>
    6022:	bd70      	pop	{r4, r5, r6, pc}
    6024:	60001e80 	.word	0x60001e80
    6028:	60001e80 	.word	0x60001e80
    602c:	60001e84 	.word	0x60001e84
    6030:	60001e80 	.word	0x60001e80

00006034 <__retarget_lock_init_recursive>:
    6034:	4770      	bx	lr
    6036:	bf00      	nop

00006038 <__retarget_lock_close_recursive>:
    6038:	4770      	bx	lr
    603a:	bf00      	nop

0000603c <__retarget_lock_acquire_recursive>:
    603c:	4770      	bx	lr
    603e:	bf00      	nop

00006040 <__retarget_lock_release_recursive>:
    6040:	4770      	bx	lr
    6042:	bf00      	nop
	...
    6060:	eba2 0003 	sub.w	r0, r2, r3
    6064:	4770      	bx	lr
    6066:	bf00      	nop

00006068 <strcmp>:
    6068:	7802      	ldrb	r2, [r0, #0]
    606a:	780b      	ldrb	r3, [r1, #0]
    606c:	2a01      	cmp	r2, #1
    606e:	bf28      	it	cs
    6070:	429a      	cmpcs	r2, r3
    6072:	d1f5      	bne.n	6060 <__retarget_lock_release_recursive+0x20>
    6074:	e96d 4504 	strd	r4, r5, [sp, #-16]!
    6078:	ea40 0401 	orr.w	r4, r0, r1
    607c:	e9cd 6702 	strd	r6, r7, [sp, #8]
    6080:	f06f 0c00 	mvn.w	ip, #0
    6084:	ea4f 7244 	mov.w	r2, r4, lsl #29
    6088:	b312      	cbz	r2, 60d0 <strcmp+0x68>
    608a:	ea80 0401 	eor.w	r4, r0, r1
    608e:	f014 0f07 	tst.w	r4, #7
    6092:	d16a      	bne.n	616a <strcmp+0x102>
    6094:	f000 0407 	and.w	r4, r0, #7
    6098:	f020 0007 	bic.w	r0, r0, #7
    609c:	f004 0503 	and.w	r5, r4, #3
    60a0:	f021 0107 	bic.w	r1, r1, #7
    60a4:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    60a8:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    60ac:	f014 0f04 	tst.w	r4, #4
    60b0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    60b4:	fa0c f405 	lsl.w	r4, ip, r5
    60b8:	ea62 0204 	orn	r2, r2, r4
    60bc:	ea66 0604 	orn	r6, r6, r4
    60c0:	d00a      	beq.n	60d8 <strcmp+0x70>
    60c2:	ea63 0304 	orn	r3, r3, r4
    60c6:	4662      	mov	r2, ip
    60c8:	ea67 0704 	orn	r7, r7, r4
    60cc:	4666      	mov	r6, ip
    60ce:	e003      	b.n	60d8 <strcmp+0x70>
    60d0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    60d4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    60d8:	fa82 f54c 	uadd8	r5, r2, ip
    60dc:	ea82 0406 	eor.w	r4, r2, r6
    60e0:	faa4 f48c 	sel	r4, r4, ip
    60e4:	bb6c      	cbnz	r4, 6142 <strcmp+0xda>
    60e6:	fa83 f54c 	uadd8	r5, r3, ip
    60ea:	ea83 0507 	eor.w	r5, r3, r7
    60ee:	faa5 f58c 	sel	r5, r5, ip
    60f2:	b995      	cbnz	r5, 611a <strcmp+0xb2>
    60f4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
    60f8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
    60fc:	fa82 f54c 	uadd8	r5, r2, ip
    6100:	ea82 0406 	eor.w	r4, r2, r6
    6104:	faa4 f48c 	sel	r4, r4, ip
    6108:	fa83 f54c 	uadd8	r5, r3, ip
    610c:	ea83 0507 	eor.w	r5, r3, r7
    6110:	faa5 f58c 	sel	r5, r5, ip
    6114:	4325      	orrs	r5, r4
    6116:	d0db      	beq.n	60d0 <strcmp+0x68>
    6118:	b99c      	cbnz	r4, 6142 <strcmp+0xda>
    611a:	ba2d      	rev	r5, r5
    611c:	fab5 f485 	clz	r4, r5
    6120:	f024 0407 	bic.w	r4, r4, #7
    6124:	fa27 f104 	lsr.w	r1, r7, r4
    6128:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    612c:	fa23 f304 	lsr.w	r3, r3, r4
    6130:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    6134:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    6138:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    613c:	eba0 0001 	sub.w	r0, r0, r1
    6140:	4770      	bx	lr
    6142:	ba24      	rev	r4, r4
    6144:	fab4 f484 	clz	r4, r4
    6148:	f024 0407 	bic.w	r4, r4, #7
    614c:	fa26 f104 	lsr.w	r1, r6, r4
    6150:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    6154:	fa22 f204 	lsr.w	r2, r2, r4
    6158:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    615c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    6160:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    6164:	eba0 0001 	sub.w	r0, r0, r1
    6168:	4770      	bx	lr
    616a:	f014 0f03 	tst.w	r4, #3
    616e:	d13c      	bne.n	61ea <strcmp+0x182>
    6170:	f010 0403 	ands.w	r4, r0, #3
    6174:	d128      	bne.n	61c8 <strcmp+0x160>
    6176:	f850 2b08 	ldr.w	r2, [r0], #8
    617a:	f851 3b08 	ldr.w	r3, [r1], #8
    617e:	fa82 f54c 	uadd8	r5, r2, ip
    6182:	ea82 0503 	eor.w	r5, r2, r3
    6186:	faa5 f58c 	sel	r5, r5, ip
    618a:	b95d      	cbnz	r5, 61a4 <strcmp+0x13c>
    618c:	f850 2c04 	ldr.w	r2, [r0, #-4]
    6190:	f851 3c04 	ldr.w	r3, [r1, #-4]
    6194:	fa82 f54c 	uadd8	r5, r2, ip
    6198:	ea82 0503 	eor.w	r5, r2, r3
    619c:	faa5 f58c 	sel	r5, r5, ip
    61a0:	2d00      	cmp	r5, #0
    61a2:	d0e8      	beq.n	6176 <strcmp+0x10e>
    61a4:	ba2d      	rev	r5, r5
    61a6:	fab5 f485 	clz	r4, r5
    61aa:	f024 0407 	bic.w	r4, r4, #7
    61ae:	fa23 f104 	lsr.w	r1, r3, r4
    61b2:	fa22 f204 	lsr.w	r2, r2, r4
    61b6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    61ba:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    61be:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    61c2:	eba0 0001 	sub.w	r0, r0, r1
    61c6:	4770      	bx	lr
    61c8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
    61cc:	f020 0003 	bic.w	r0, r0, #3
    61d0:	f850 2b08 	ldr.w	r2, [r0], #8
    61d4:	f021 0103 	bic.w	r1, r1, #3
    61d8:	f851 3b08 	ldr.w	r3, [r1], #8
    61dc:	fa0c f404 	lsl.w	r4, ip, r4
    61e0:	ea62 0204 	orn	r2, r2, r4
    61e4:	ea63 0304 	orn	r3, r3, r4
    61e8:	e7c9      	b.n	617e <strcmp+0x116>
    61ea:	f010 0403 	ands.w	r4, r0, #3
    61ee:	d01a      	beq.n	6226 <strcmp+0x1be>
    61f0:	eba1 0104 	sub.w	r1, r1, r4
    61f4:	f020 0003 	bic.w	r0, r0, #3
    61f8:	07e4      	lsls	r4, r4, #31
    61fa:	f850 2b04 	ldr.w	r2, [r0], #4
    61fe:	d006      	beq.n	620e <strcmp+0x1a6>
    6200:	d20f      	bcs.n	6222 <strcmp+0x1ba>
    6202:	788b      	ldrb	r3, [r1, #2]
    6204:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
    6208:	1ae4      	subs	r4, r4, r3
    620a:	d106      	bne.n	621a <strcmp+0x1b2>
    620c:	b12b      	cbz	r3, 621a <strcmp+0x1b2>
    620e:	78cb      	ldrb	r3, [r1, #3]
    6210:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
    6214:	1ae4      	subs	r4, r4, r3
    6216:	d100      	bne.n	621a <strcmp+0x1b2>
    6218:	b91b      	cbnz	r3, 6222 <strcmp+0x1ba>
    621a:	4620      	mov	r0, r4
    621c:	f85d 4b10 	ldr.w	r4, [sp], #16
    6220:	4770      	bx	lr
    6222:	f101 0104 	add.w	r1, r1, #4
    6226:	f850 2b04 	ldr.w	r2, [r0], #4
    622a:	07cc      	lsls	r4, r1, #31
    622c:	f021 0103 	bic.w	r1, r1, #3
    6230:	f851 3b04 	ldr.w	r3, [r1], #4
    6234:	d848      	bhi.n	62c8 <strcmp+0x260>
    6236:	d224      	bcs.n	6282 <strcmp+0x21a>
    6238:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
    623c:	fa82 f54c 	uadd8	r5, r2, ip
    6240:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
    6244:	faa5 f58c 	sel	r5, r5, ip
    6248:	d10a      	bne.n	6260 <strcmp+0x1f8>
    624a:	b965      	cbnz	r5, 6266 <strcmp+0x1fe>
    624c:	f851 3b04 	ldr.w	r3, [r1], #4
    6250:	ea84 0402 	eor.w	r4, r4, r2
    6254:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
    6258:	d10e      	bne.n	6278 <strcmp+0x210>
    625a:	f850 2b04 	ldr.w	r2, [r0], #4
    625e:	e7eb      	b.n	6238 <strcmp+0x1d0>
    6260:	ea4f 2313 	mov.w	r3, r3, lsr #8
    6264:	e055      	b.n	6312 <strcmp+0x2aa>
    6266:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
    626a:	d14d      	bne.n	6308 <strcmp+0x2a0>
    626c:	7808      	ldrb	r0, [r1, #0]
    626e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    6272:	f1c0 0000 	rsb	r0, r0, #0
    6276:	4770      	bx	lr
    6278:	ea4f 6212 	mov.w	r2, r2, lsr #24
    627c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    6280:	e047      	b.n	6312 <strcmp+0x2aa>
    6282:	ea02 441c 	and.w	r4, r2, ip, lsr #16
    6286:	fa82 f54c 	uadd8	r5, r2, ip
    628a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
    628e:	faa5 f58c 	sel	r5, r5, ip
    6292:	d10a      	bne.n	62aa <strcmp+0x242>
    6294:	b965      	cbnz	r5, 62b0 <strcmp+0x248>
    6296:	f851 3b04 	ldr.w	r3, [r1], #4
    629a:	ea84 0402 	eor.w	r4, r4, r2
    629e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
    62a2:	d10c      	bne.n	62be <strcmp+0x256>
    62a4:	f850 2b04 	ldr.w	r2, [r0], #4
    62a8:	e7eb      	b.n	6282 <strcmp+0x21a>
    62aa:	ea4f 4313 	mov.w	r3, r3, lsr #16
    62ae:	e030      	b.n	6312 <strcmp+0x2aa>
    62b0:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
    62b4:	d128      	bne.n	6308 <strcmp+0x2a0>
    62b6:	880b      	ldrh	r3, [r1, #0]
    62b8:	ea4f 4212 	mov.w	r2, r2, lsr #16
    62bc:	e029      	b.n	6312 <strcmp+0x2aa>
    62be:	ea4f 4212 	mov.w	r2, r2, lsr #16
    62c2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
    62c6:	e024      	b.n	6312 <strcmp+0x2aa>
    62c8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
    62cc:	fa82 f54c 	uadd8	r5, r2, ip
    62d0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
    62d4:	faa5 f58c 	sel	r5, r5, ip
    62d8:	d10a      	bne.n	62f0 <strcmp+0x288>
    62da:	b965      	cbnz	r5, 62f6 <strcmp+0x28e>
    62dc:	f851 3b04 	ldr.w	r3, [r1], #4
    62e0:	ea84 0402 	eor.w	r4, r4, r2
    62e4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
    62e8:	d109      	bne.n	62fe <strcmp+0x296>
    62ea:	f850 2b04 	ldr.w	r2, [r0], #4
    62ee:	e7eb      	b.n	62c8 <strcmp+0x260>
    62f0:	ea4f 6313 	mov.w	r3, r3, lsr #24
    62f4:	e00d      	b.n	6312 <strcmp+0x2aa>
    62f6:	f015 0fff 	tst.w	r5, #255	; 0xff
    62fa:	d105      	bne.n	6308 <strcmp+0x2a0>
    62fc:	680b      	ldr	r3, [r1, #0]
    62fe:	ea4f 2212 	mov.w	r2, r2, lsr #8
    6302:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    6306:	e004      	b.n	6312 <strcmp+0x2aa>
    6308:	f04f 0000 	mov.w	r0, #0
    630c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    6310:	4770      	bx	lr
    6312:	ba12      	rev	r2, r2
    6314:	ba1b      	rev	r3, r3
    6316:	fa82 f44c 	uadd8	r4, r2, ip
    631a:	ea82 0403 	eor.w	r4, r2, r3
    631e:	faa4 f58c 	sel	r5, r4, ip
    6322:	fab5 f485 	clz	r4, r5
    6326:	fa02 f204 	lsl.w	r2, r2, r4
    632a:	fa03 f304 	lsl.w	r3, r3, r4
    632e:	ea4f 6012 	mov.w	r0, r2, lsr #24
    6332:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    6336:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
    633a:	4770      	bx	lr

0000633c <strcpy>:
    633c:	ea80 0201 	eor.w	r2, r0, r1
    6340:	4684      	mov	ip, r0
    6342:	f012 0f03 	tst.w	r2, #3
    6346:	d14f      	bne.n	63e8 <strcpy+0xac>
    6348:	f011 0f03 	tst.w	r1, #3
    634c:	d132      	bne.n	63b4 <strcpy+0x78>
    634e:	f84d 4d04 	str.w	r4, [sp, #-4]!
    6352:	f011 0f04 	tst.w	r1, #4
    6356:	f851 3b04 	ldr.w	r3, [r1], #4
    635a:	d00b      	beq.n	6374 <strcpy+0x38>
    635c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    6360:	439a      	bics	r2, r3
    6362:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    6366:	bf04      	itt	eq
    6368:	f84c 3b04 	streq.w	r3, [ip], #4
    636c:	f851 3b04 	ldreq.w	r3, [r1], #4
    6370:	d116      	bne.n	63a0 <strcpy+0x64>
    6372:	bf00      	nop
    6374:	f851 4b04 	ldr.w	r4, [r1], #4
    6378:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    637c:	439a      	bics	r2, r3
    637e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    6382:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    6386:	d10b      	bne.n	63a0 <strcpy+0x64>
    6388:	f84c 3b04 	str.w	r3, [ip], #4
    638c:	43a2      	bics	r2, r4
    638e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    6392:	bf04      	itt	eq
    6394:	f851 3b04 	ldreq.w	r3, [r1], #4
    6398:	f84c 4b04 	streq.w	r4, [ip], #4
    639c:	d0ea      	beq.n	6374 <strcpy+0x38>
    639e:	4623      	mov	r3, r4
    63a0:	f80c 3b01 	strb.w	r3, [ip], #1
    63a4:	f013 0fff 	tst.w	r3, #255	; 0xff
    63a8:	ea4f 2333 	mov.w	r3, r3, ror #8
    63ac:	d1f8      	bne.n	63a0 <strcpy+0x64>
    63ae:	f85d 4b04 	ldr.w	r4, [sp], #4
    63b2:	4770      	bx	lr
    63b4:	f011 0f01 	tst.w	r1, #1
    63b8:	d006      	beq.n	63c8 <strcpy+0x8c>
    63ba:	f811 2b01 	ldrb.w	r2, [r1], #1
    63be:	f80c 2b01 	strb.w	r2, [ip], #1
    63c2:	2a00      	cmp	r2, #0
    63c4:	bf08      	it	eq
    63c6:	4770      	bxeq	lr
    63c8:	f011 0f02 	tst.w	r1, #2
    63cc:	d0bf      	beq.n	634e <strcpy+0x12>
    63ce:	f831 2b02 	ldrh.w	r2, [r1], #2
    63d2:	f012 0fff 	tst.w	r2, #255	; 0xff
    63d6:	bf16      	itet	ne
    63d8:	f82c 2b02 	strhne.w	r2, [ip], #2
    63dc:	f88c 2000 	strbeq.w	r2, [ip]
    63e0:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
    63e4:	d1b3      	bne.n	634e <strcpy+0x12>
    63e6:	4770      	bx	lr
    63e8:	f811 2b01 	ldrb.w	r2, [r1], #1
    63ec:	f80c 2b01 	strb.w	r2, [ip], #1
    63f0:	2a00      	cmp	r2, #0
    63f2:	d1f9      	bne.n	63e8 <strcpy+0xac>
    63f4:	4770      	bx	lr
    63f6:	bf00      	nop
	...

00006400 <strlen>:
    6400:	f890 f000 	pld	[r0]
    6404:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    6408:	f020 0107 	bic.w	r1, r0, #7
    640c:	f06f 0c00 	mvn.w	ip, #0
    6410:	f010 0407 	ands.w	r4, r0, #7
    6414:	f891 f020 	pld	[r1, #32]
    6418:	f040 8049 	bne.w	64ae <strlen+0xae>
    641c:	f04f 0400 	mov.w	r4, #0
    6420:	f06f 0007 	mvn.w	r0, #7
    6424:	e9d1 2300 	ldrd	r2, r3, [r1]
    6428:	f891 f040 	pld	[r1, #64]	; 0x40
    642c:	f100 0008 	add.w	r0, r0, #8
    6430:	fa82 f24c 	uadd8	r2, r2, ip
    6434:	faa4 f28c 	sel	r2, r4, ip
    6438:	fa83 f34c 	uadd8	r3, r3, ip
    643c:	faa2 f38c 	sel	r3, r2, ip
    6440:	bb4b      	cbnz	r3, 6496 <strlen+0x96>
    6442:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    6446:	fa82 f24c 	uadd8	r2, r2, ip
    644a:	f100 0008 	add.w	r0, r0, #8
    644e:	faa4 f28c 	sel	r2, r4, ip
    6452:	fa83 f34c 	uadd8	r3, r3, ip
    6456:	faa2 f38c 	sel	r3, r2, ip
    645a:	b9e3      	cbnz	r3, 6496 <strlen+0x96>
    645c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    6460:	fa82 f24c 	uadd8	r2, r2, ip
    6464:	f100 0008 	add.w	r0, r0, #8
    6468:	faa4 f28c 	sel	r2, r4, ip
    646c:	fa83 f34c 	uadd8	r3, r3, ip
    6470:	faa2 f38c 	sel	r3, r2, ip
    6474:	b97b      	cbnz	r3, 6496 <strlen+0x96>
    6476:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    647a:	f101 0120 	add.w	r1, r1, #32
    647e:	fa82 f24c 	uadd8	r2, r2, ip
    6482:	f100 0008 	add.w	r0, r0, #8
    6486:	faa4 f28c 	sel	r2, r4, ip
    648a:	fa83 f34c 	uadd8	r3, r3, ip
    648e:	faa2 f38c 	sel	r3, r2, ip
    6492:	2b00      	cmp	r3, #0
    6494:	d0c6      	beq.n	6424 <strlen+0x24>
    6496:	2a00      	cmp	r2, #0
    6498:	bf04      	itt	eq
    649a:	3004      	addeq	r0, #4
    649c:	461a      	moveq	r2, r3
    649e:	ba12      	rev	r2, r2
    64a0:	fab2 f282 	clz	r2, r2
    64a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    64a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    64ac:	4770      	bx	lr
    64ae:	e9d1 2300 	ldrd	r2, r3, [r1]
    64b2:	f004 0503 	and.w	r5, r4, #3
    64b6:	f1c4 0000 	rsb	r0, r4, #0
    64ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    64be:	f014 0f04 	tst.w	r4, #4
    64c2:	f891 f040 	pld	[r1, #64]	; 0x40
    64c6:	fa0c f505 	lsl.w	r5, ip, r5
    64ca:	ea62 0205 	orn	r2, r2, r5
    64ce:	bf1c      	itt	ne
    64d0:	ea63 0305 	ornne	r3, r3, r5
    64d4:	4662      	movne	r2, ip
    64d6:	f04f 0400 	mov.w	r4, #0
    64da:	e7a9      	b.n	6430 <strlen+0x30>
    64dc:	0000      	movs	r0, r0
	...

000064e0 <nan>:
    64e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 64e8 <nan+0x8>
    64e4:	4770      	bx	lr
    64e6:	bf00      	nop
    64e8:	00000000 	.word	0x00000000
    64ec:	7ff80000 	.word	0x7ff80000

000064f0 <nanf>:
    64f0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 64f8 <nanf+0x8>
    64f4:	4770      	bx	lr
    64f6:	bf00      	nop
    64f8:	7fc00000 	.word	0x7fc00000

000064fc <__register_exitproc>:
    64fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6500:	f8df a07c 	ldr.w	sl, [pc, #124]	; 6580 <__register_exitproc+0x84>
    6504:	4606      	mov	r6, r0
    6506:	f8da 0000 	ldr.w	r0, [sl]
    650a:	4698      	mov	r8, r3
    650c:	460f      	mov	r7, r1
    650e:	4691      	mov	r9, r2
    6510:	f7ff fd94 	bl	603c <__retarget_lock_acquire_recursive>
    6514:	4b18      	ldr	r3, [pc, #96]	; (6578 <__register_exitproc+0x7c>)
    6516:	681c      	ldr	r4, [r3, #0]
    6518:	b324      	cbz	r4, 6564 <__register_exitproc+0x68>
    651a:	6865      	ldr	r5, [r4, #4]
    651c:	2d1f      	cmp	r5, #31
    651e:	dc24      	bgt.n	656a <__register_exitproc+0x6e>
    6520:	b95e      	cbnz	r6, 653a <__register_exitproc+0x3e>
    6522:	1c6b      	adds	r3, r5, #1
    6524:	3502      	adds	r5, #2
    6526:	f8da 0000 	ldr.w	r0, [sl]
    652a:	6063      	str	r3, [r4, #4]
    652c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
    6530:	f7ff fd86 	bl	6040 <__retarget_lock_release_recursive>
    6534:	2000      	movs	r0, #0
    6536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    653a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    653e:	2301      	movs	r3, #1
    6540:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    6544:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
    6548:	40ab      	lsls	r3, r5
    654a:	431a      	orrs	r2, r3
    654c:	2e02      	cmp	r6, #2
    654e:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
    6552:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    6556:	d1e4      	bne.n	6522 <__register_exitproc+0x26>
    6558:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    655c:	431a      	orrs	r2, r3
    655e:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    6562:	e7de      	b.n	6522 <__register_exitproc+0x26>
    6564:	4c05      	ldr	r4, [pc, #20]	; (657c <__register_exitproc+0x80>)
    6566:	601c      	str	r4, [r3, #0]
    6568:	e7d7      	b.n	651a <__register_exitproc+0x1e>
    656a:	f8da 0000 	ldr.w	r0, [sl]
    656e:	f7ff fd67 	bl	6040 <__retarget_lock_release_recursive>
    6572:	f04f 30ff 	mov.w	r0, #4294967295
    6576:	e7de      	b.n	6536 <__register_exitproc+0x3a>
    6578:	20008abc 	.word	0x20008abc
    657c:	20008ac0 	.word	0x20008ac0
    6580:	20007c3c 	.word	0x20007c3c

00006584 <_malloc_trim_r>:
    6584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6586:	4f24      	ldr	r7, [pc, #144]	; (6618 <_malloc_trim_r+0x94>)
    6588:	460c      	mov	r4, r1
    658a:	4606      	mov	r6, r0
    658c:	f7fd ff1c 	bl	43c8 <__malloc_lock>
    6590:	68bb      	ldr	r3, [r7, #8]
    6592:	685d      	ldr	r5, [r3, #4]
    6594:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
    6598:	310f      	adds	r1, #15
    659a:	f025 0503 	bic.w	r5, r5, #3
    659e:	194b      	adds	r3, r1, r5
    65a0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    65a4:	f023 030f 	bic.w	r3, r3, #15
    65a8:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
    65ac:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    65b0:	db07      	blt.n	65c2 <_malloc_trim_r+0x3e>
    65b2:	2100      	movs	r1, #0
    65b4:	4630      	mov	r0, r6
    65b6:	f7ff fceb 	bl	5f90 <_sbrk_r>
    65ba:	68bb      	ldr	r3, [r7, #8]
    65bc:	442b      	add	r3, r5
    65be:	4298      	cmp	r0, r3
    65c0:	d004      	beq.n	65cc <_malloc_trim_r+0x48>
    65c2:	4630      	mov	r0, r6
    65c4:	f7fd ff06 	bl	43d4 <__malloc_unlock>
    65c8:	2000      	movs	r0, #0
    65ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    65cc:	4261      	negs	r1, r4
    65ce:	4630      	mov	r0, r6
    65d0:	f7ff fcde 	bl	5f90 <_sbrk_r>
    65d4:	3001      	adds	r0, #1
    65d6:	d00d      	beq.n	65f4 <_malloc_trim_r+0x70>
    65d8:	4a10      	ldr	r2, [pc, #64]	; (661c <_malloc_trim_r+0x98>)
    65da:	68bb      	ldr	r3, [r7, #8]
    65dc:	1b2d      	subs	r5, r5, r4
    65de:	f045 0501 	orr.w	r5, r5, #1
    65e2:	605d      	str	r5, [r3, #4]
    65e4:	6813      	ldr	r3, [r2, #0]
    65e6:	4630      	mov	r0, r6
    65e8:	1b1b      	subs	r3, r3, r4
    65ea:	6013      	str	r3, [r2, #0]
    65ec:	f7fd fef2 	bl	43d4 <__malloc_unlock>
    65f0:	2001      	movs	r0, #1
    65f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    65f4:	2100      	movs	r1, #0
    65f6:	4630      	mov	r0, r6
    65f8:	f7ff fcca 	bl	5f90 <_sbrk_r>
    65fc:	68ba      	ldr	r2, [r7, #8]
    65fe:	1a83      	subs	r3, r0, r2
    6600:	2b0f      	cmp	r3, #15
    6602:	ddde      	ble.n	65c2 <_malloc_trim_r+0x3e>
    6604:	f043 0301 	orr.w	r3, r3, #1
    6608:	6053      	str	r3, [r2, #4]
    660a:	4b05      	ldr	r3, [pc, #20]	; (6620 <_malloc_trim_r+0x9c>)
    660c:	4903      	ldr	r1, [pc, #12]	; (661c <_malloc_trim_r+0x98>)
    660e:	681b      	ldr	r3, [r3, #0]
    6610:	1ac0      	subs	r0, r0, r3
    6612:	6008      	str	r0, [r1, #0]
    6614:	e7d5      	b.n	65c2 <_malloc_trim_r+0x3e>
    6616:	bf00      	nop
    6618:	20007db4 	.word	0x20007db4
    661c:	20008c5c 	.word	0x20008c5c
    6620:	200081bc 	.word	0x200081bc

00006624 <_free_r>:
    6624:	2900      	cmp	r1, #0
    6626:	d061      	beq.n	66ec <_free_r+0xc8>
    6628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    662a:	460c      	mov	r4, r1
    662c:	4606      	mov	r6, r0
    662e:	f7fd fecb 	bl	43c8 <__malloc_lock>
    6632:	f854 2c04 	ldr.w	r2, [r4, #-4]
    6636:	4f7b      	ldr	r7, [pc, #492]	; (6824 <_free_r+0x200>)
    6638:	f1a4 0508 	sub.w	r5, r4, #8
    663c:	f022 0101 	bic.w	r1, r2, #1
    6640:	eb05 0c01 	add.w	ip, r5, r1
    6644:	68b8      	ldr	r0, [r7, #8]
    6646:	f8dc 3004 	ldr.w	r3, [ip, #4]
    664a:	4560      	cmp	r0, ip
    664c:	f023 0303 	bic.w	r3, r3, #3
    6650:	f000 808b 	beq.w	676a <_free_r+0x146>
    6654:	07d2      	lsls	r2, r2, #31
    6656:	f8cc 3004 	str.w	r3, [ip, #4]
    665a:	d432      	bmi.n	66c2 <_free_r+0x9e>
    665c:	f854 2c08 	ldr.w	r2, [r4, #-8]
    6660:	1aad      	subs	r5, r5, r2
    6662:	4411      	add	r1, r2
    6664:	68aa      	ldr	r2, [r5, #8]
    6666:	f107 0008 	add.w	r0, r7, #8
    666a:	4282      	cmp	r2, r0
    666c:	d06a      	beq.n	6744 <_free_r+0x120>
    666e:	eb0c 0403 	add.w	r4, ip, r3
    6672:	f8d4 e004 	ldr.w	lr, [r4, #4]
    6676:	68ec      	ldr	r4, [r5, #12]
    6678:	60d4      	str	r4, [r2, #12]
    667a:	f01e 0f01 	tst.w	lr, #1
    667e:	60a2      	str	r2, [r4, #8]
    6680:	f000 8097 	beq.w	67b2 <_free_r+0x18e>
    6684:	f041 0301 	orr.w	r3, r1, #1
    6688:	606b      	str	r3, [r5, #4]
    668a:	f8cc 1000 	str.w	r1, [ip]
    668e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    6692:	d235      	bcs.n	6700 <_free_r+0xdc>
    6694:	6878      	ldr	r0, [r7, #4]
    6696:	08cb      	lsrs	r3, r1, #3
    6698:	2201      	movs	r2, #1
    669a:	0949      	lsrs	r1, r1, #5
    669c:	3301      	adds	r3, #1
    669e:	408a      	lsls	r2, r1
    66a0:	4302      	orrs	r2, r0
    66a2:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    66a6:	607a      	str	r2, [r7, #4]
    66a8:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    66ac:	3a08      	subs	r2, #8
    66ae:	e9c5 1202 	strd	r1, r2, [r5, #8]
    66b2:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    66b6:	60cd      	str	r5, [r1, #12]
    66b8:	4630      	mov	r0, r6
    66ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    66be:	f7fd be89 	b.w	43d4 <__malloc_unlock>
    66c2:	eb0c 0203 	add.w	r2, ip, r3
    66c6:	6852      	ldr	r2, [r2, #4]
    66c8:	07d0      	lsls	r0, r2, #31
    66ca:	d410      	bmi.n	66ee <_free_r+0xca>
    66cc:	4419      	add	r1, r3
    66ce:	f107 0008 	add.w	r0, r7, #8
    66d2:	f8dc 3008 	ldr.w	r3, [ip, #8]
    66d6:	4283      	cmp	r3, r0
    66d8:	d073      	beq.n	67c2 <_free_r+0x19e>
    66da:	f8dc 200c 	ldr.w	r2, [ip, #12]
    66de:	60da      	str	r2, [r3, #12]
    66e0:	6093      	str	r3, [r2, #8]
    66e2:	f041 0301 	orr.w	r3, r1, #1
    66e6:	606b      	str	r3, [r5, #4]
    66e8:	5069      	str	r1, [r5, r1]
    66ea:	e7d0      	b.n	668e <_free_r+0x6a>
    66ec:	4770      	bx	lr
    66ee:	f041 0301 	orr.w	r3, r1, #1
    66f2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    66f6:	f844 3c04 	str.w	r3, [r4, #-4]
    66fa:	f8cc 1000 	str.w	r1, [ip]
    66fe:	d3c9      	bcc.n	6694 <_free_r+0x70>
    6700:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
    6704:	ea4f 2351 	mov.w	r3, r1, lsr #9
    6708:	d248      	bcs.n	679c <_free_r+0x178>
    670a:	098b      	lsrs	r3, r1, #6
    670c:	f103 0039 	add.w	r0, r3, #57	; 0x39
    6710:	f103 0238 	add.w	r2, r3, #56	; 0x38
    6714:	00c3      	lsls	r3, r0, #3
    6716:	18f8      	adds	r0, r7, r3
    6718:	58fb      	ldr	r3, [r7, r3]
    671a:	3808      	subs	r0, #8
    671c:	4298      	cmp	r0, r3
    671e:	d059      	beq.n	67d4 <_free_r+0x1b0>
    6720:	685a      	ldr	r2, [r3, #4]
    6722:	f022 0203 	bic.w	r2, r2, #3
    6726:	428a      	cmp	r2, r1
    6728:	d902      	bls.n	6730 <_free_r+0x10c>
    672a:	689b      	ldr	r3, [r3, #8]
    672c:	4298      	cmp	r0, r3
    672e:	d1f7      	bne.n	6720 <_free_r+0xfc>
    6730:	68d8      	ldr	r0, [r3, #12]
    6732:	e9c5 3002 	strd	r3, r0, [r5, #8]
    6736:	6085      	str	r5, [r0, #8]
    6738:	60dd      	str	r5, [r3, #12]
    673a:	4630      	mov	r0, r6
    673c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    6740:	f7fd be48 	b.w	43d4 <__malloc_unlock>
    6744:	eb0c 0203 	add.w	r2, ip, r3
    6748:	6852      	ldr	r2, [r2, #4]
    674a:	07d2      	lsls	r2, r2, #31
    674c:	d463      	bmi.n	6816 <_free_r+0x1f2>
    674e:	440b      	add	r3, r1
    6750:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
    6754:	60ca      	str	r2, [r1, #12]
    6756:	6091      	str	r1, [r2, #8]
    6758:	f043 0201 	orr.w	r2, r3, #1
    675c:	606a      	str	r2, [r5, #4]
    675e:	4630      	mov	r0, r6
    6760:	50eb      	str	r3, [r5, r3]
    6762:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    6766:	f7fd be35 	b.w	43d4 <__malloc_unlock>
    676a:	440b      	add	r3, r1
    676c:	07d1      	lsls	r1, r2, #31
    676e:	d407      	bmi.n	6780 <_free_r+0x15c>
    6770:	f854 2c08 	ldr.w	r2, [r4, #-8]
    6774:	1aad      	subs	r5, r5, r2
    6776:	4413      	add	r3, r2
    6778:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
    677c:	60ca      	str	r2, [r1, #12]
    677e:	6091      	str	r1, [r2, #8]
    6780:	f043 0201 	orr.w	r2, r3, #1
    6784:	606a      	str	r2, [r5, #4]
    6786:	4a28      	ldr	r2, [pc, #160]	; (6828 <_free_r+0x204>)
    6788:	60bd      	str	r5, [r7, #8]
    678a:	6812      	ldr	r2, [r2, #0]
    678c:	429a      	cmp	r2, r3
    678e:	d893      	bhi.n	66b8 <_free_r+0x94>
    6790:	4b26      	ldr	r3, [pc, #152]	; (682c <_free_r+0x208>)
    6792:	4630      	mov	r0, r6
    6794:	6819      	ldr	r1, [r3, #0]
    6796:	f7ff fef5 	bl	6584 <_malloc_trim_r>
    679a:	e78d      	b.n	66b8 <_free_r+0x94>
    679c:	2b14      	cmp	r3, #20
    679e:	d90a      	bls.n	67b6 <_free_r+0x192>
    67a0:	2b54      	cmp	r3, #84	; 0x54
    67a2:	d81f      	bhi.n	67e4 <_free_r+0x1c0>
    67a4:	0b0b      	lsrs	r3, r1, #12
    67a6:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    67aa:	f103 026e 	add.w	r2, r3, #110	; 0x6e
    67ae:	00c3      	lsls	r3, r0, #3
    67b0:	e7b1      	b.n	6716 <_free_r+0xf2>
    67b2:	4419      	add	r1, r3
    67b4:	e78d      	b.n	66d2 <_free_r+0xae>
    67b6:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    67ba:	f103 025b 	add.w	r2, r3, #91	; 0x5b
    67be:	00c3      	lsls	r3, r0, #3
    67c0:	e7a9      	b.n	6716 <_free_r+0xf2>
    67c2:	f041 0301 	orr.w	r3, r1, #1
    67c6:	e9c7 5504 	strd	r5, r5, [r7, #16]
    67ca:	e9c5 0002 	strd	r0, r0, [r5, #8]
    67ce:	606b      	str	r3, [r5, #4]
    67d0:	5069      	str	r1, [r5, r1]
    67d2:	e771      	b.n	66b8 <_free_r+0x94>
    67d4:	6879      	ldr	r1, [r7, #4]
    67d6:	1092      	asrs	r2, r2, #2
    67d8:	2401      	movs	r4, #1
    67da:	fa04 f202 	lsl.w	r2, r4, r2
    67de:	430a      	orrs	r2, r1
    67e0:	607a      	str	r2, [r7, #4]
    67e2:	e7a6      	b.n	6732 <_free_r+0x10e>
    67e4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    67e8:	d806      	bhi.n	67f8 <_free_r+0x1d4>
    67ea:	0bcb      	lsrs	r3, r1, #15
    67ec:	f103 0078 	add.w	r0, r3, #120	; 0x78
    67f0:	f103 0277 	add.w	r2, r3, #119	; 0x77
    67f4:	00c3      	lsls	r3, r0, #3
    67f6:	e78e      	b.n	6716 <_free_r+0xf2>
    67f8:	f240 5254 	movw	r2, #1364	; 0x554
    67fc:	4293      	cmp	r3, r2
    67fe:	d806      	bhi.n	680e <_free_r+0x1ea>
    6800:	0c8b      	lsrs	r3, r1, #18
    6802:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    6806:	f103 027c 	add.w	r2, r3, #124	; 0x7c
    680a:	00c3      	lsls	r3, r0, #3
    680c:	e783      	b.n	6716 <_free_r+0xf2>
    680e:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    6812:	227e      	movs	r2, #126	; 0x7e
    6814:	e77f      	b.n	6716 <_free_r+0xf2>
    6816:	f041 0301 	orr.w	r3, r1, #1
    681a:	606b      	str	r3, [r5, #4]
    681c:	f8cc 1000 	str.w	r1, [ip]
    6820:	e74a      	b.n	66b8 <_free_r+0x94>
    6822:	bf00      	nop
    6824:	20007db4 	.word	0x20007db4
    6828:	200081c0 	.word	0x200081c0
    682c:	20008c8c 	.word	0x20008c8c

00006830 <rshift>:
    6830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6834:	6904      	ldr	r4, [r0, #16]
    6836:	ebb4 1f61 	cmp.w	r4, r1, asr #5
    683a:	dd2f      	ble.n	689c <rshift+0x6c>
    683c:	f100 0e14 	add.w	lr, r0, #20
    6840:	114e      	asrs	r6, r1, #5
    6842:	f011 0c1f 	ands.w	ip, r1, #31
    6846:	eb0e 0584 	add.w	r5, lr, r4, lsl #2
    684a:	eb0e 0386 	add.w	r3, lr, r6, lsl #2
    684e:	d02b      	beq.n	68a8 <rshift+0x78>
    6850:	f85e 1026 	ldr.w	r1, [lr, r6, lsl #2]
    6854:	3304      	adds	r3, #4
    6856:	429d      	cmp	r5, r3
    6858:	fa21 f10c 	lsr.w	r1, r1, ip
    685c:	f1cc 0820 	rsb	r8, ip, #32
    6860:	d918      	bls.n	6894 <rshift+0x64>
    6862:	4677      	mov	r7, lr
    6864:	681a      	ldr	r2, [r3, #0]
    6866:	fa02 f208 	lsl.w	r2, r2, r8
    686a:	430a      	orrs	r2, r1
    686c:	f847 2b04 	str.w	r2, [r7], #4
    6870:	f853 1b04 	ldr.w	r1, [r3], #4
    6874:	429d      	cmp	r5, r3
    6876:	fa21 f10c 	lsr.w	r1, r1, ip
    687a:	d8f3      	bhi.n	6864 <rshift+0x34>
    687c:	1ba3      	subs	r3, r4, r6
    687e:	009b      	lsls	r3, r3, #2
    6880:	3b05      	subs	r3, #5
    6882:	089b      	lsrs	r3, r3, #2
    6884:	3301      	adds	r3, #1
    6886:	eb0e 0483 	add.w	r4, lr, r3, lsl #2
    688a:	f84e 1023 	str.w	r1, [lr, r3, lsl #2]
    688e:	b1c9      	cbz	r1, 68c4 <rshift+0x94>
    6890:	3404      	adds	r4, #4
    6892:	e017      	b.n	68c4 <rshift+0x94>
    6894:	6141      	str	r1, [r0, #20]
    6896:	4674      	mov	r4, lr
    6898:	2900      	cmp	r1, #0
    689a:	d1f9      	bne.n	6890 <rshift+0x60>
    689c:	2300      	movs	r3, #0
    689e:	6103      	str	r3, [r0, #16]
    68a0:	2300      	movs	r3, #0
    68a2:	6143      	str	r3, [r0, #20]
    68a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    68a8:	429d      	cmp	r5, r3
    68aa:	bf88      	it	hi
    68ac:	f100 0210 	addhi.w	r2, r0, #16
    68b0:	d9f4      	bls.n	689c <rshift+0x6c>
    68b2:	f853 1b04 	ldr.w	r1, [r3], #4
    68b6:	f842 1f04 	str.w	r1, [r2, #4]!
    68ba:	429d      	cmp	r5, r3
    68bc:	d8f9      	bhi.n	68b2 <rshift+0x82>
    68be:	1ba4      	subs	r4, r4, r6
    68c0:	eb0e 0484 	add.w	r4, lr, r4, lsl #2
    68c4:	eba4 030e 	sub.w	r3, r4, lr
    68c8:	109b      	asrs	r3, r3, #2
    68ca:	4574      	cmp	r4, lr
    68cc:	6103      	str	r3, [r0, #16]
    68ce:	d0e7      	beq.n	68a0 <rshift+0x70>
    68d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000068d4 <__gethex>:
    68d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    68d8:	ed2d 8b02 	vpush	{d8}
    68dc:	680c      	ldr	r4, [r1, #0]
    68de:	468b      	mov	fp, r1
    68e0:	78a1      	ldrb	r1, [r4, #2]
    68e2:	b085      	sub	sp, #20
    68e4:	2930      	cmp	r1, #48	; 0x30
    68e6:	ee08 0a10 	vmov	s16, r0
    68ea:	4692      	mov	sl, r2
    68ec:	9302      	str	r3, [sp, #8]
    68ee:	f040 81ce 	bne.w	6c8e <__gethex+0x3ba>
    68f2:	f06f 0001 	mvn.w	r0, #1
    68f6:	1b00      	subs	r0, r0, r4
    68f8:	1ce2      	adds	r2, r4, #3
    68fa:	1883      	adds	r3, r0, r2
    68fc:	4614      	mov	r4, r2
    68fe:	f812 1b01 	ldrb.w	r1, [r2], #1
    6902:	2930      	cmp	r1, #48	; 0x30
    6904:	d0f9      	beq.n	68fa <__gethex+0x26>
    6906:	f8df 8300 	ldr.w	r8, [pc, #768]	; 6c08 <__gethex+0x334>
    690a:	f818 2001 	ldrb.w	r2, [r8, r1]
    690e:	2a00      	cmp	r2, #0
    6910:	f000 80e5 	beq.w	6ade <__gethex+0x20a>
    6914:	7822      	ldrb	r2, [r4, #0]
    6916:	2700      	movs	r7, #0
    6918:	f818 2002 	ldrb.w	r2, [r8, r2]
    691c:	463d      	mov	r5, r7
    691e:	4626      	mov	r6, r4
    6920:	b12a      	cbz	r2, 692e <__gethex+0x5a>
    6922:	f816 2f01 	ldrb.w	r2, [r6, #1]!
    6926:	f818 2002 	ldrb.w	r2, [r8, r2]
    692a:	2a00      	cmp	r2, #0
    692c:	d1f9      	bne.n	6922 <__gethex+0x4e>
    692e:	49b5      	ldr	r1, [pc, #724]	; (6c04 <__gethex+0x330>)
    6930:	9301      	str	r3, [sp, #4]
    6932:	2201      	movs	r2, #1
    6934:	4630      	mov	r0, r6
    6936:	f7ff fa6f 	bl	5e18 <strncmp>
    693a:	9b01      	ldr	r3, [sp, #4]
    693c:	4681      	mov	r9, r0
    693e:	2800      	cmp	r0, #0
    6940:	d04d      	beq.n	69de <__gethex+0x10a>
    6942:	2d00      	cmp	r5, #0
    6944:	d14e      	bne.n	69e4 <__gethex+0x110>
    6946:	7832      	ldrb	r2, [r6, #0]
    6948:	46a9      	mov	r9, r5
    694a:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    694e:	2a50      	cmp	r2, #80	; 0x50
    6950:	4635      	mov	r5, r6
    6952:	d050      	beq.n	69f6 <__gethex+0x122>
    6954:	f8cb 6000 	str.w	r6, [fp]
    6958:	2f00      	cmp	r7, #0
    695a:	d169      	bne.n	6a30 <__gethex+0x15c>
    695c:	1b2b      	subs	r3, r5, r4
    695e:	3b01      	subs	r3, #1
    6960:	2b07      	cmp	r3, #7
    6962:	4639      	mov	r1, r7
    6964:	dd04      	ble.n	6970 <__gethex+0x9c>
    6966:	105b      	asrs	r3, r3, #1
    6968:	2b07      	cmp	r3, #7
    696a:	f101 0101 	add.w	r1, r1, #1
    696e:	dcfa      	bgt.n	6966 <__gethex+0x92>
    6970:	ee18 0a10 	vmov	r0, s16
    6974:	f000 fb82 	bl	707c <_Balloc>
    6978:	4683      	mov	fp, r0
    697a:	2800      	cmp	r0, #0
    697c:	f000 8266 	beq.w	6e4c <__gethex+0x578>
    6980:	f100 0614 	add.w	r6, r0, #20
    6984:	42ac      	cmp	r4, r5
    6986:	9601      	str	r6, [sp, #4]
    6988:	f080 81d2 	bcs.w	6d30 <__gethex+0x45c>
    698c:	2700      	movs	r7, #0
    698e:	f8cd 900c 	str.w	r9, [sp, #12]
    6992:	499c      	ldr	r1, [pc, #624]	; (6c04 <__gethex+0x330>)
    6994:	46a1      	mov	r9, r4
    6996:	463c      	mov	r4, r7
    6998:	e00c      	b.n	69b4 <__gethex+0xe0>
    699a:	2f20      	cmp	r7, #32
    699c:	d019      	beq.n	69d2 <__gethex+0xfe>
    699e:	4638      	mov	r0, r7
    69a0:	3704      	adds	r7, #4
    69a2:	782a      	ldrb	r2, [r5, #0]
    69a4:	f818 2002 	ldrb.w	r2, [r8, r2]
    69a8:	f002 020f 	and.w	r2, r2, #15
    69ac:	4082      	lsls	r2, r0
    69ae:	4314      	orrs	r4, r2
    69b0:	454d      	cmp	r5, r9
    69b2:	d047      	beq.n	6a44 <__gethex+0x170>
    69b4:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
    69b8:	2a2e      	cmp	r2, #46	; 0x2e
    69ba:	d1ee      	bne.n	699a <__gethex+0xc6>
    69bc:	454d      	cmp	r5, r9
    69be:	d3ec      	bcc.n	699a <__gethex+0xc6>
    69c0:	2201      	movs	r2, #1
    69c2:	4628      	mov	r0, r5
    69c4:	f7ff fa28 	bl	5e18 <strncmp>
    69c8:	498e      	ldr	r1, [pc, #568]	; (6c04 <__gethex+0x330>)
    69ca:	2800      	cmp	r0, #0
    69cc:	d0f0      	beq.n	69b0 <__gethex+0xdc>
    69ce:	2f20      	cmp	r7, #32
    69d0:	d1e5      	bne.n	699e <__gethex+0xca>
    69d2:	2000      	movs	r0, #0
    69d4:	f846 4b04 	str.w	r4, [r6], #4
    69d8:	2704      	movs	r7, #4
    69da:	4604      	mov	r4, r0
    69dc:	e7e1      	b.n	69a2 <__gethex+0xce>
    69de:	2d00      	cmp	r5, #0
    69e0:	f000 8142 	beq.w	6c68 <__gethex+0x394>
    69e4:	7832      	ldrb	r2, [r6, #0]
    69e6:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    69ea:	1bad      	subs	r5, r5, r6
    69ec:	2a50      	cmp	r2, #80	; 0x50
    69ee:	ea4f 0985 	mov.w	r9, r5, lsl #2
    69f2:	4635      	mov	r5, r6
    69f4:	d1ae      	bne.n	6954 <__gethex+0x80>
    69f6:	786a      	ldrb	r2, [r5, #1]
    69f8:	2a2b      	cmp	r2, #43	; 0x2b
    69fa:	f000 8125 	beq.w	6c48 <__gethex+0x374>
    69fe:	2a2d      	cmp	r2, #45	; 0x2d
    6a00:	f000 80a5 	beq.w	6b4e <__gethex+0x27a>
    6a04:	1c6e      	adds	r6, r5, #1
    6a06:	2000      	movs	r0, #0
    6a08:	f818 1002 	ldrb.w	r1, [r8, r2]
    6a0c:	1e4a      	subs	r2, r1, #1
    6a0e:	2a18      	cmp	r2, #24
    6a10:	f200 809b 	bhi.w	6b4a <__gethex+0x276>
    6a14:	7872      	ldrb	r2, [r6, #1]
    6a16:	f818 2002 	ldrb.w	r2, [r8, r2]
    6a1a:	3910      	subs	r1, #16
    6a1c:	3601      	adds	r6, #1
    6a1e:	2a00      	cmp	r2, #0
    6a20:	d15a      	bne.n	6ad8 <__gethex+0x204>
    6a22:	b100      	cbz	r0, 6a26 <__gethex+0x152>
    6a24:	4249      	negs	r1, r1
    6a26:	4489      	add	r9, r1
    6a28:	f8cb 6000 	str.w	r6, [fp]
    6a2c:	2f00      	cmp	r7, #0
    6a2e:	d095      	beq.n	695c <__gethex+0x88>
    6a30:	2b00      	cmp	r3, #0
    6a32:	bf14      	ite	ne
    6a34:	2500      	movne	r5, #0
    6a36:	2506      	moveq	r5, #6
    6a38:	4628      	mov	r0, r5
    6a3a:	b005      	add	sp, #20
    6a3c:	ecbd 8b02 	vpop	{d8}
    6a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6a44:	f8dd 900c 	ldr.w	r9, [sp, #12]
    6a48:	4623      	mov	r3, r4
    6a4a:	f846 3b04 	str.w	r3, [r6], #4
    6a4e:	4618      	mov	r0, r3
    6a50:	9b01      	ldr	r3, [sp, #4]
    6a52:	1af6      	subs	r6, r6, r3
    6a54:	10b6      	asrs	r6, r6, #2
    6a56:	f8cb 6010 	str.w	r6, [fp, #16]
    6a5a:	f000 fbe9 	bl	7230 <__hi0bits>
    6a5e:	0176      	lsls	r6, r6, #5
    6a60:	f8da 4000 	ldr.w	r4, [sl]
    6a64:	1a30      	subs	r0, r6, r0
    6a66:	42a0      	cmp	r0, r4
    6a68:	dc75      	bgt.n	6b56 <__gethex+0x282>
    6a6a:	f2c0 80ef 	blt.w	6c4c <__gethex+0x378>
    6a6e:	2700      	movs	r7, #0
    6a70:	f8da 3008 	ldr.w	r3, [sl, #8]
    6a74:	454b      	cmp	r3, r9
    6a76:	f2c0 8151 	blt.w	6d1c <__gethex+0x448>
    6a7a:	f8da 3004 	ldr.w	r3, [sl, #4]
    6a7e:	454b      	cmp	r3, r9
    6a80:	dd4a      	ble.n	6b18 <__gethex+0x244>
    6a82:	eba3 0909 	sub.w	r9, r3, r9
    6a86:	454c      	cmp	r4, r9
    6a88:	f300 8082 	bgt.w	6b90 <__gethex+0x2bc>
    6a8c:	f8da 200c 	ldr.w	r2, [sl, #12]
    6a90:	2a02      	cmp	r2, #2
    6a92:	f000 8165 	beq.w	6d60 <__gethex+0x48c>
    6a96:	2a03      	cmp	r2, #3
    6a98:	f000 8181 	beq.w	6d9e <__gethex+0x4ca>
    6a9c:	2a01      	cmp	r2, #1
    6a9e:	f000 816f 	beq.w	6d80 <__gethex+0x4ac>
    6aa2:	ee18 0a10 	vmov	r0, s16
    6aa6:	4659      	mov	r1, fp
    6aa8:	f000 fb0e 	bl	70c8 <_Bfree>
    6aac:	2550      	movs	r5, #80	; 0x50
    6aae:	9a10      	ldr	r2, [sp, #64]	; 0x40
    6ab0:	2300      	movs	r3, #0
    6ab2:	4628      	mov	r0, r5
    6ab4:	6013      	str	r3, [r2, #0]
    6ab6:	b005      	add	sp, #20
    6ab8:	ecbd 8b02 	vpop	{d8}
    6abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6ac0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    6ac4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    6ac8:	f1a2 0110 	sub.w	r1, r2, #16
    6acc:	f816 2f01 	ldrb.w	r2, [r6, #1]!
    6ad0:	f818 2002 	ldrb.w	r2, [r8, r2]
    6ad4:	2a00      	cmp	r2, #0
    6ad6:	d0a4      	beq.n	6a22 <__gethex+0x14e>
    6ad8:	2a19      	cmp	r2, #25
    6ada:	ddf1      	ble.n	6ac0 <__gethex+0x1ec>
    6adc:	e7a1      	b.n	6a22 <__gethex+0x14e>
    6ade:	4949      	ldr	r1, [pc, #292]	; (6c04 <__gethex+0x330>)
    6ae0:	9301      	str	r3, [sp, #4]
    6ae2:	2201      	movs	r2, #1
    6ae4:	4620      	mov	r0, r4
    6ae6:	f7ff f997 	bl	5e18 <strncmp>
    6aea:	9b01      	ldr	r3, [sp, #4]
    6aec:	2800      	cmp	r0, #0
    6aee:	d16d      	bne.n	6bcc <__gethex+0x2f8>
    6af0:	7861      	ldrb	r1, [r4, #1]
    6af2:	f818 2001 	ldrb.w	r2, [r8, r1]
    6af6:	1c65      	adds	r5, r4, #1
    6af8:	2a00      	cmp	r2, #0
    6afa:	d069      	beq.n	6bd0 <__gethex+0x2fc>
    6afc:	2930      	cmp	r1, #48	; 0x30
    6afe:	462c      	mov	r4, r5
    6b00:	d105      	bne.n	6b0e <__gethex+0x23a>
    6b02:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    6b06:	2b30      	cmp	r3, #48	; 0x30
    6b08:	d0fb      	beq.n	6b02 <__gethex+0x22e>
    6b0a:	f818 2003 	ldrb.w	r2, [r8, r3]
    6b0e:	fab2 f782 	clz	r7, r2
    6b12:	097f      	lsrs	r7, r7, #5
    6b14:	2301      	movs	r3, #1
    6b16:	e702      	b.n	691e <__gethex+0x4a>
    6b18:	2501      	movs	r5, #1
    6b1a:	b157      	cbz	r7, 6b32 <__gethex+0x25e>
    6b1c:	f8da 300c 	ldr.w	r3, [sl, #12]
    6b20:	2b02      	cmp	r3, #2
    6b22:	d05d      	beq.n	6be0 <__gethex+0x30c>
    6b24:	2b03      	cmp	r3, #3
    6b26:	d05f      	beq.n	6be8 <__gethex+0x314>
    6b28:	2b01      	cmp	r3, #1
    6b2a:	f000 8084 	beq.w	6c36 <__gethex+0x362>
    6b2e:	f045 0510 	orr.w	r5, r5, #16
    6b32:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6b34:	f8c3 b000 	str.w	fp, [r3]
    6b38:	9b02      	ldr	r3, [sp, #8]
    6b3a:	4628      	mov	r0, r5
    6b3c:	f8c3 9000 	str.w	r9, [r3]
    6b40:	b005      	add	sp, #20
    6b42:	ecbd 8b02 	vpop	{d8}
    6b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6b4a:	462e      	mov	r6, r5
    6b4c:	e702      	b.n	6954 <__gethex+0x80>
    6b4e:	2001      	movs	r0, #1
    6b50:	78aa      	ldrb	r2, [r5, #2]
    6b52:	1cae      	adds	r6, r5, #2
    6b54:	e758      	b.n	6a08 <__gethex+0x134>
    6b56:	1b06      	subs	r6, r0, r4
    6b58:	4631      	mov	r1, r6
    6b5a:	4658      	mov	r0, fp
    6b5c:	f000 ff96 	bl	7a8c <__any_on>
    6b60:	4607      	mov	r7, r0
    6b62:	b178      	cbz	r0, 6b84 <__gethex+0x2b0>
    6b64:	1e72      	subs	r2, r6, #1
    6b66:	1153      	asrs	r3, r2, #5
    6b68:	9901      	ldr	r1, [sp, #4]
    6b6a:	2701      	movs	r7, #1
    6b6c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    6b70:	f002 031f 	and.w	r3, r2, #31
    6b74:	fa07 f303 	lsl.w	r3, r7, r3
    6b78:	420b      	tst	r3, r1
    6b7a:	d003      	beq.n	6b84 <__gethex+0x2b0>
    6b7c:	42ba      	cmp	r2, r7
    6b7e:	f300 80e2 	bgt.w	6d46 <__gethex+0x472>
    6b82:	2702      	movs	r7, #2
    6b84:	4631      	mov	r1, r6
    6b86:	4658      	mov	r0, fp
    6b88:	44b1      	add	r9, r6
    6b8a:	f7ff fe51 	bl	6830 <rshift>
    6b8e:	e76f      	b.n	6a70 <__gethex+0x19c>
    6b90:	f109 35ff 	add.w	r5, r9, #4294967295
    6b94:	2f00      	cmp	r7, #0
    6b96:	f040 80ce 	bne.w	6d36 <__gethex+0x462>
    6b9a:	2d00      	cmp	r5, #0
    6b9c:	f040 80cd 	bne.w	6d3a <__gethex+0x466>
    6ba0:	116b      	asrs	r3, r5, #5
    6ba2:	9a01      	ldr	r2, [sp, #4]
    6ba4:	f005 051f 	and.w	r5, r5, #31
    6ba8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    6bac:	2301      	movs	r3, #1
    6bae:	40ab      	lsls	r3, r5
    6bb0:	4213      	tst	r3, r2
    6bb2:	4649      	mov	r1, r9
    6bb4:	4658      	mov	r0, fp
    6bb6:	bf18      	it	ne
    6bb8:	f047 0702 	orrne.w	r7, r7, #2
    6bbc:	eba4 0409 	sub.w	r4, r4, r9
    6bc0:	f7ff fe36 	bl	6830 <rshift>
    6bc4:	2502      	movs	r5, #2
    6bc6:	f8da 9004 	ldr.w	r9, [sl, #4]
    6bca:	e7a6      	b.n	6b1a <__gethex+0x246>
    6bcc:	7821      	ldrb	r1, [r4, #0]
    6bce:	4625      	mov	r5, r4
    6bd0:	f001 01df 	and.w	r1, r1, #223	; 0xdf
    6bd4:	2950      	cmp	r1, #80	; 0x50
    6bd6:	f000 80bf 	beq.w	6d58 <__gethex+0x484>
    6bda:	f8cb 5000 	str.w	r5, [fp]
    6bde:	e727      	b.n	6a30 <__gethex+0x15c>
    6be0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6be2:	f1c3 0301 	rsb	r3, r3, #1
    6be6:	9311      	str	r3, [sp, #68]	; 0x44
    6be8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6bea:	2b00      	cmp	r3, #0
    6bec:	d09f      	beq.n	6b2e <__gethex+0x25a>
    6bee:	f8db 7010 	ldr.w	r7, [fp, #16]
    6bf2:	f8dd 8004 	ldr.w	r8, [sp, #4]
    6bf6:	00ba      	lsls	r2, r7, #2
    6bf8:	4643      	mov	r3, r8
    6bfa:	9201      	str	r2, [sp, #4]
    6bfc:	eb08 0087 	add.w	r0, r8, r7, lsl #2
    6c00:	2100      	movs	r1, #0
    6c02:	e007      	b.n	6c14 <__gethex+0x340>
    6c04:	200008c0 	.word	0x200008c0
    6c08:	200005d8 	.word	0x200005d8
    6c0c:	4298      	cmp	r0, r3
    6c0e:	f843 1c04 	str.w	r1, [r3, #-4]
    6c12:	d93f      	bls.n	6c94 <__gethex+0x3c0>
    6c14:	461e      	mov	r6, r3
    6c16:	f853 2b04 	ldr.w	r2, [r3], #4
    6c1a:	f1b2 3fff 	cmp.w	r2, #4294967295
    6c1e:	d0f5      	beq.n	6c0c <__gethex+0x338>
    6c20:	3201      	adds	r2, #1
    6c22:	2d02      	cmp	r5, #2
    6c24:	6032      	str	r2, [r6, #0]
    6c26:	f000 80bf 	beq.w	6da8 <__gethex+0x4d4>
    6c2a:	f014 041f 	ands.w	r4, r4, #31
    6c2e:	f040 80e7 	bne.w	6e00 <__gethex+0x52c>
    6c32:	2521      	movs	r5, #33	; 0x21
    6c34:	e77d      	b.n	6b32 <__gethex+0x25e>
    6c36:	07ba      	lsls	r2, r7, #30
    6c38:	f57f af79 	bpl.w	6b2e <__gethex+0x25a>
    6c3c:	9b01      	ldr	r3, [sp, #4]
    6c3e:	681b      	ldr	r3, [r3, #0]
    6c40:	431f      	orrs	r7, r3
    6c42:	07fb      	lsls	r3, r7, #31
    6c44:	d4d3      	bmi.n	6bee <__gethex+0x31a>
    6c46:	e772      	b.n	6b2e <__gethex+0x25a>
    6c48:	2000      	movs	r0, #0
    6c4a:	e781      	b.n	6b50 <__gethex+0x27c>
    6c4c:	1a22      	subs	r2, r4, r0
    6c4e:	4659      	mov	r1, fp
    6c50:	ee18 0a10 	vmov	r0, s16
    6c54:	eba9 0902 	sub.w	r9, r9, r2
    6c58:	f000 fc76 	bl	7548 <__lshift>
    6c5c:	f100 0314 	add.w	r3, r0, #20
    6c60:	4683      	mov	fp, r0
    6c62:	9301      	str	r3, [sp, #4]
    6c64:	2700      	movs	r7, #0
    6c66:	e703      	b.n	6a70 <__gethex+0x19c>
    6c68:	7872      	ldrb	r2, [r6, #1]
    6c6a:	f818 0002 	ldrb.w	r0, [r8, r2]
    6c6e:	1c71      	adds	r1, r6, #1
    6c70:	2800      	cmp	r0, #0
    6c72:	f000 80a0 	beq.w	6db6 <__gethex+0x4e2>
    6c76:	460d      	mov	r5, r1
    6c78:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    6c7c:	f818 0002 	ldrb.w	r0, [r8, r2]
    6c80:	2800      	cmp	r0, #0
    6c82:	d1f8      	bne.n	6c76 <__gethex+0x3a2>
    6c84:	1b75      	subs	r5, r6, r5
    6c86:	ea4f 0985 	mov.w	r9, r5, lsl #2
    6c8a:	460e      	mov	r6, r1
    6c8c:	e65d      	b.n	694a <__gethex+0x76>
    6c8e:	3402      	adds	r4, #2
    6c90:	2300      	movs	r3, #0
    6c92:	e638      	b.n	6906 <__gethex+0x32>
    6c94:	f8db 3008 	ldr.w	r3, [fp, #8]
    6c98:	429f      	cmp	r7, r3
    6c9a:	f280 808e 	bge.w	6dba <__gethex+0x4e6>
    6c9e:	463b      	mov	r3, r7
    6ca0:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
    6ca4:	2101      	movs	r1, #1
    6ca6:	3301      	adds	r3, #1
    6ca8:	2d02      	cmp	r5, #2
    6caa:	f8cb 3010 	str.w	r3, [fp, #16]
    6cae:	6151      	str	r1, [r2, #20]
    6cb0:	d07a      	beq.n	6da8 <__gethex+0x4d4>
    6cb2:	429f      	cmp	r7, r3
    6cb4:	dab9      	bge.n	6c2a <__gethex+0x356>
    6cb6:	2b00      	cmp	r3, #0
    6cb8:	f340 809b 	ble.w	6df2 <__gethex+0x51e>
    6cbc:	f8db 2014 	ldr.w	r2, [fp, #20]
    6cc0:	eb08 0383 	add.w	r3, r8, r3, lsl #2
    6cc4:	f10b 0018 	add.w	r0, fp, #24
    6cc8:	4283      	cmp	r3, r0
    6cca:	ea4f 0252 	mov.w	r2, r2, lsr #1
    6cce:	f240 80b1 	bls.w	6e34 <__gethex+0x560>
    6cd2:	4644      	mov	r4, r8
    6cd4:	6801      	ldr	r1, [r0, #0]
    6cd6:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
    6cda:	f844 2b04 	str.w	r2, [r4], #4
    6cde:	f850 2b04 	ldr.w	r2, [r0], #4
    6ce2:	4283      	cmp	r3, r0
    6ce4:	ea4f 0252 	mov.w	r2, r2, lsr #1
    6ce8:	d8f4      	bhi.n	6cd4 <__gethex+0x400>
    6cea:	eba3 030b 	sub.w	r3, r3, fp
    6cee:	3b19      	subs	r3, #25
    6cf0:	089b      	lsrs	r3, r3, #2
    6cf2:	3301      	adds	r3, #1
    6cf4:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
    6cf8:	eb08 0383 	add.w	r3, r8, r3, lsl #2
    6cfc:	2a00      	cmp	r2, #0
    6cfe:	f040 809d 	bne.w	6e3c <__gethex+0x568>
    6d02:	eba3 0208 	sub.w	r2, r3, r8
    6d06:	1092      	asrs	r2, r2, #2
    6d08:	4543      	cmp	r3, r8
    6d0a:	f8cb 2010 	str.w	r2, [fp, #16]
    6d0e:	d073      	beq.n	6df8 <__gethex+0x524>
    6d10:	f8da 3008 	ldr.w	r3, [sl, #8]
    6d14:	f109 0901 	add.w	r9, r9, #1
    6d18:	454b      	cmp	r3, r9
    6d1a:	da8a      	bge.n	6c32 <__gethex+0x35e>
    6d1c:	ee18 0a10 	vmov	r0, s16
    6d20:	4659      	mov	r1, fp
    6d22:	f000 f9d1 	bl	70c8 <_Bfree>
    6d26:	9a10      	ldr	r2, [sp, #64]	; 0x40
    6d28:	2300      	movs	r3, #0
    6d2a:	6013      	str	r3, [r2, #0]
    6d2c:	25a3      	movs	r5, #163	; 0xa3
    6d2e:	e683      	b.n	6a38 <__gethex+0x164>
    6d30:	9e01      	ldr	r6, [sp, #4]
    6d32:	2300      	movs	r3, #0
    6d34:	e689      	b.n	6a4a <__gethex+0x176>
    6d36:	2701      	movs	r7, #1
    6d38:	e732      	b.n	6ba0 <__gethex+0x2cc>
    6d3a:	4629      	mov	r1, r5
    6d3c:	4658      	mov	r0, fp
    6d3e:	f000 fea5 	bl	7a8c <__any_on>
    6d42:	4607      	mov	r7, r0
    6d44:	e72c      	b.n	6ba0 <__gethex+0x2cc>
    6d46:	1eb1      	subs	r1, r6, #2
    6d48:	4658      	mov	r0, fp
    6d4a:	f000 fe9f 	bl	7a8c <__any_on>
    6d4e:	2800      	cmp	r0, #0
    6d50:	f43f af17 	beq.w	6b82 <__gethex+0x2ae>
    6d54:	2703      	movs	r7, #3
    6d56:	e715      	b.n	6b84 <__gethex+0x2b0>
    6d58:	f04f 0900 	mov.w	r9, #0
    6d5c:	2701      	movs	r7, #1
    6d5e:	e64a      	b.n	69f6 <__gethex+0x122>
    6d60:	9a11      	ldr	r2, [sp, #68]	; 0x44
    6d62:	2a00      	cmp	r2, #0
    6d64:	f47f ae9d 	bne.w	6aa2 <__gethex+0x1ce>
    6d68:	9902      	ldr	r1, [sp, #8]
    6d6a:	600b      	str	r3, [r1, #0]
    6d6c:	9b01      	ldr	r3, [sp, #4]
    6d6e:	2201      	movs	r2, #1
    6d70:	f8cb 2010 	str.w	r2, [fp, #16]
    6d74:	601a      	str	r2, [r3, #0]
    6d76:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6d78:	2562      	movs	r5, #98	; 0x62
    6d7a:	f8c3 b000 	str.w	fp, [r3]
    6d7e:	e65b      	b.n	6a38 <__gethex+0x164>
    6d80:	454c      	cmp	r4, r9
    6d82:	f47f ae8e 	bne.w	6aa2 <__gethex+0x1ce>
    6d86:	2c01      	cmp	r4, #1
    6d88:	d0ee      	beq.n	6d68 <__gethex+0x494>
    6d8a:	1e61      	subs	r1, r4, #1
    6d8c:	4658      	mov	r0, fp
    6d8e:	f000 fe7d 	bl	7a8c <__any_on>
    6d92:	2800      	cmp	r0, #0
    6d94:	f43f ae85 	beq.w	6aa2 <__gethex+0x1ce>
    6d98:	f8da 3004 	ldr.w	r3, [sl, #4]
    6d9c:	e7e4      	b.n	6d68 <__gethex+0x494>
    6d9e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    6da0:	2a00      	cmp	r2, #0
    6da2:	f43f ae7e 	beq.w	6aa2 <__gethex+0x1ce>
    6da6:	e7df      	b.n	6d68 <__gethex+0x494>
    6da8:	f8da 3000 	ldr.w	r3, [sl]
    6dac:	3b01      	subs	r3, #1
    6dae:	42a3      	cmp	r3, r4
    6db0:	d034      	beq.n	6e1c <__gethex+0x548>
    6db2:	2522      	movs	r5, #34	; 0x22
    6db4:	e6bd      	b.n	6b32 <__gethex+0x25e>
    6db6:	460e      	mov	r6, r1
    6db8:	e5c7      	b.n	694a <__gethex+0x76>
    6dba:	f8db 1004 	ldr.w	r1, [fp, #4]
    6dbe:	ee18 0a10 	vmov	r0, s16
    6dc2:	3101      	adds	r1, #1
    6dc4:	f000 f95a 	bl	707c <_Balloc>
    6dc8:	4606      	mov	r6, r0
    6dca:	b3c8      	cbz	r0, 6e40 <__gethex+0x56c>
    6dcc:	f8db 3010 	ldr.w	r3, [fp, #16]
    6dd0:	3302      	adds	r3, #2
    6dd2:	009a      	lsls	r2, r3, #2
    6dd4:	f10b 010c 	add.w	r1, fp, #12
    6dd8:	300c      	adds	r0, #12
    6dda:	f7fb f919 	bl	2010 <memcpy>
    6dde:	4659      	mov	r1, fp
    6de0:	ee18 0a10 	vmov	r0, s16
    6de4:	f000 f970 	bl	70c8 <_Bfree>
    6de8:	f106 0814 	add.w	r8, r6, #20
    6dec:	6933      	ldr	r3, [r6, #16]
    6dee:	46b3      	mov	fp, r6
    6df0:	e756      	b.n	6ca0 <__gethex+0x3cc>
    6df2:	2300      	movs	r3, #0
    6df4:	f8cb 3010 	str.w	r3, [fp, #16]
    6df8:	2300      	movs	r3, #0
    6dfa:	f8cb 3014 	str.w	r3, [fp, #20]
    6dfe:	e787      	b.n	6d10 <__gethex+0x43c>
    6e00:	9b01      	ldr	r3, [sp, #4]
    6e02:	4443      	add	r3, r8
    6e04:	f1c4 0420 	rsb	r4, r4, #32
    6e08:	f853 0c04 	ldr.w	r0, [r3, #-4]
    6e0c:	f000 fa10 	bl	7230 <__hi0bits>
    6e10:	42a0      	cmp	r0, r4
    6e12:	f6bf af0e 	bge.w	6c32 <__gethex+0x35e>
    6e16:	f8db 3010 	ldr.w	r3, [fp, #16]
    6e1a:	e74c      	b.n	6cb6 <__gethex+0x3e2>
    6e1c:	1163      	asrs	r3, r4, #5
    6e1e:	f004 041f 	and.w	r4, r4, #31
    6e22:	f858 2023 	ldr.w	r2, [r8, r3, lsl #2]
    6e26:	2301      	movs	r3, #1
    6e28:	40a3      	lsls	r3, r4
    6e2a:	4213      	tst	r3, r2
    6e2c:	bf0c      	ite	eq
    6e2e:	2522      	moveq	r5, #34	; 0x22
    6e30:	2521      	movne	r5, #33	; 0x21
    6e32:	e67e      	b.n	6b32 <__gethex+0x25e>
    6e34:	f8c8 2000 	str.w	r2, [r8]
    6e38:	4643      	mov	r3, r8
    6e3a:	b16a      	cbz	r2, 6e58 <__gethex+0x584>
    6e3c:	3304      	adds	r3, #4
    6e3e:	e760      	b.n	6d02 <__gethex+0x42e>
    6e40:	4b07      	ldr	r3, [pc, #28]	; (6e60 <__gethex+0x58c>)
    6e42:	4808      	ldr	r0, [pc, #32]	; (6e64 <__gethex+0x590>)
    6e44:	4632      	mov	r2, r6
    6e46:	2184      	movs	r1, #132	; 0x84
    6e48:	f004 fa7e 	bl	b348 <__assert_func>
    6e4c:	4b04      	ldr	r3, [pc, #16]	; (6e60 <__gethex+0x58c>)
    6e4e:	4805      	ldr	r0, [pc, #20]	; (6e64 <__gethex+0x590>)
    6e50:	465a      	mov	r2, fp
    6e52:	21e4      	movs	r1, #228	; 0xe4
    6e54:	f004 fa78 	bl	b348 <__assert_func>
    6e58:	f8cb 2010 	str.w	r2, [fp, #16]
    6e5c:	e7cc      	b.n	6df8 <__gethex+0x524>
    6e5e:	bf00      	nop
    6e60:	20000560 	.word	0x20000560
    6e64:	20000574 	.word	0x20000574

00006e68 <__match>:
    6e68:	b410      	push	{r4}
    6e6a:	6804      	ldr	r4, [r0, #0]
    6e6c:	e009      	b.n	6e82 <__match+0x1a>
    6e6e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    6e72:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
    6e76:	f1bc 0f19 	cmp.w	ip, #25
    6e7a:	bf98      	it	ls
    6e7c:	3320      	addls	r3, #32
    6e7e:	4293      	cmp	r3, r2
    6e80:	d109      	bne.n	6e96 <__match+0x2e>
    6e82:	f811 2b01 	ldrb.w	r2, [r1], #1
    6e86:	2a00      	cmp	r2, #0
    6e88:	d1f1      	bne.n	6e6e <__match+0x6>
    6e8a:	3401      	adds	r4, #1
    6e8c:	6004      	str	r4, [r0, #0]
    6e8e:	2001      	movs	r0, #1
    6e90:	f85d 4b04 	ldr.w	r4, [sp], #4
    6e94:	4770      	bx	lr
    6e96:	2000      	movs	r0, #0
    6e98:	f85d 4b04 	ldr.w	r4, [sp], #4
    6e9c:	4770      	bx	lr
    6e9e:	bf00      	nop

00006ea0 <__hexnan>:
    6ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6ea4:	6809      	ldr	r1, [r1, #0]
    6ea6:	b085      	sub	sp, #20
    6ea8:	114b      	asrs	r3, r1, #5
    6eaa:	f011 011f 	ands.w	r1, r1, #31
    6eae:	9002      	str	r0, [sp, #8]
    6eb0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    6eb4:	9103      	str	r1, [sp, #12]
    6eb6:	f040 808f 	bne.w	6fd8 <__hexnan+0x138>
    6eba:	1f1d      	subs	r5, r3, #4
    6ebc:	9301      	str	r3, [sp, #4]
    6ebe:	9b02      	ldr	r3, [sp, #8]
    6ec0:	9901      	ldr	r1, [sp, #4]
    6ec2:	681c      	ldr	r4, [r3, #0]
    6ec4:	2300      	movs	r3, #0
    6ec6:	f841 3c04 	str.w	r3, [r1, #-4]
    6eca:	7861      	ldrb	r1, [r4, #1]
    6ecc:	3401      	adds	r4, #1
    6ece:	2900      	cmp	r1, #0
    6ed0:	f000 8098 	beq.w	7004 <__hexnan+0x164>
    6ed4:	f8df 9174 	ldr.w	r9, [pc, #372]	; 704c <__hexnan+0x1ac>
    6ed8:	46a8      	mov	r8, r5
    6eda:	46ac      	mov	ip, r5
    6edc:	469a      	mov	sl, r3
    6ede:	461e      	mov	r6, r3
    6ee0:	e00e      	b.n	6f00 <__hexnan+0x60>
    6ee2:	2920      	cmp	r1, #32
    6ee4:	f200 808c 	bhi.w	7000 <__hexnan+0x160>
    6ee8:	4556      	cmp	r6, sl
    6eea:	dd06      	ble.n	6efa <__hexnan+0x5a>
    6eec:	45c4      	cmp	ip, r8
    6eee:	d201      	bcs.n	6ef4 <__hexnan+0x54>
    6ef0:	2b07      	cmp	r3, #7
    6ef2:	dd5b      	ble.n	6fac <__hexnan+0x10c>
    6ef4:	4562      	cmp	r2, ip
    6ef6:	d351      	bcc.n	6f9c <__hexnan+0xfc>
    6ef8:	2308      	movs	r3, #8
    6efa:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    6efe:	b1a1      	cbz	r1, 6f2a <__hexnan+0x8a>
    6f00:	f819 0001 	ldrb.w	r0, [r9, r1]
    6f04:	2800      	cmp	r0, #0
    6f06:	d0ec      	beq.n	6ee2 <__hexnan+0x42>
    6f08:	3301      	adds	r3, #1
    6f0a:	2b08      	cmp	r3, #8
    6f0c:	f106 0601 	add.w	r6, r6, #1
    6f10:	dc3a      	bgt.n	6f88 <__hexnan+0xe8>
    6f12:	f8dc 1000 	ldr.w	r1, [ip]
    6f16:	0109      	lsls	r1, r1, #4
    6f18:	f000 000f 	and.w	r0, r0, #15
    6f1c:	4308      	orrs	r0, r1
    6f1e:	f8cc 0000 	str.w	r0, [ip]
    6f22:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    6f26:	2900      	cmp	r1, #0
    6f28:	d1ea      	bne.n	6f00 <__hexnan+0x60>
    6f2a:	2e00      	cmp	r6, #0
    6f2c:	d06a      	beq.n	7004 <__hexnan+0x164>
    6f2e:	45c4      	cmp	ip, r8
    6f30:	d201      	bcs.n	6f36 <__hexnan+0x96>
    6f32:	2b07      	cmp	r3, #7
    6f34:	dd74      	ble.n	7020 <__hexnan+0x180>
    6f36:	4562      	cmp	r2, ip
    6f38:	d252      	bcs.n	6fe0 <__hexnan+0x140>
    6f3a:	1f11      	subs	r1, r2, #4
    6f3c:	4663      	mov	r3, ip
    6f3e:	f853 0b04 	ldr.w	r0, [r3], #4
    6f42:	f841 0f04 	str.w	r0, [r1, #4]!
    6f46:	42ab      	cmp	r3, r5
    6f48:	d9f9      	bls.n	6f3e <__hexnan+0x9e>
    6f4a:	eba5 030c 	sub.w	r3, r5, ip
    6f4e:	f023 0303 	bic.w	r3, r3, #3
    6f52:	1c69      	adds	r1, r5, #1
    6f54:	3304      	adds	r3, #4
    6f56:	f10c 0c01 	add.w	ip, ip, #1
    6f5a:	4561      	cmp	r1, ip
    6f5c:	bf38      	it	cc
    6f5e:	2304      	movcc	r3, #4
    6f60:	4413      	add	r3, r2
    6f62:	2100      	movs	r1, #0
    6f64:	f843 1b04 	str.w	r1, [r3], #4
    6f68:	42ab      	cmp	r3, r5
    6f6a:	d9fb      	bls.n	6f64 <__hexnan+0xc4>
    6f6c:	9b01      	ldr	r3, [sp, #4]
    6f6e:	f853 3c04 	ldr.w	r3, [r3, #-4]
    6f72:	b92b      	cbnz	r3, 6f80 <__hexnan+0xe0>
    6f74:	42aa      	cmp	r2, r5
    6f76:	d049      	beq.n	700c <__hexnan+0x16c>
    6f78:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    6f7c:	2b00      	cmp	r3, #0
    6f7e:	d0f9      	beq.n	6f74 <__hexnan+0xd4>
    6f80:	2005      	movs	r0, #5
    6f82:	b005      	add	sp, #20
    6f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6f88:	4562      	cmp	r2, ip
    6f8a:	d2b6      	bcs.n	6efa <__hexnan+0x5a>
    6f8c:	2300      	movs	r3, #0
    6f8e:	f84c 3c04 	str.w	r3, [ip, #-4]
    6f92:	4619      	mov	r1, r3
    6f94:	f1ac 0c04 	sub.w	ip, ip, #4
    6f98:	2301      	movs	r3, #1
    6f9a:	e7bd      	b.n	6f18 <__hexnan+0x78>
    6f9c:	2300      	movs	r3, #0
    6f9e:	f1ac 0804 	sub.w	r8, ip, #4
    6fa2:	f84c 3c04 	str.w	r3, [ip, #-4]
    6fa6:	46b2      	mov	sl, r6
    6fa8:	46c4      	mov	ip, r8
    6faa:	e7a6      	b.n	6efa <__hexnan+0x5a>
    6fac:	f1c3 0108 	rsb	r1, r3, #8
    6fb0:	f8dc 3000 	ldr.w	r3, [ip]
    6fb4:	0089      	lsls	r1, r1, #2
    6fb6:	f1c1 0e20 	rsb	lr, r1, #32
    6fba:	4660      	mov	r0, ip
    6fbc:	469b      	mov	fp, r3
    6fbe:	6847      	ldr	r7, [r0, #4]
    6fc0:	fa07 f30e 	lsl.w	r3, r7, lr
    6fc4:	ea43 030b 	orr.w	r3, r3, fp
    6fc8:	fa27 fb01 	lsr.w	fp, r7, r1
    6fcc:	6003      	str	r3, [r0, #0]
    6fce:	f840 bf04 	str.w	fp, [r0, #4]!
    6fd2:	4540      	cmp	r0, r8
    6fd4:	d3f3      	bcc.n	6fbe <__hexnan+0x11e>
    6fd6:	e78d      	b.n	6ef4 <__hexnan+0x54>
    6fd8:	1d19      	adds	r1, r3, #4
    6fda:	9101      	str	r1, [sp, #4]
    6fdc:	461d      	mov	r5, r3
    6fde:	e76e      	b.n	6ebe <__hexnan+0x1e>
    6fe0:	9b03      	ldr	r3, [sp, #12]
    6fe2:	2b00      	cmp	r3, #0
    6fe4:	d0c2      	beq.n	6f6c <__hexnan+0xcc>
    6fe6:	9b03      	ldr	r3, [sp, #12]
    6fe8:	9801      	ldr	r0, [sp, #4]
    6fea:	f1c3 0120 	rsb	r1, r3, #32
    6fee:	f04f 33ff 	mov.w	r3, #4294967295
    6ff2:	40cb      	lsrs	r3, r1
    6ff4:	f850 1c04 	ldr.w	r1, [r0, #-4]
    6ff8:	400b      	ands	r3, r1
    6ffa:	f840 3c04 	str.w	r3, [r0, #-4]
    6ffe:	e7b8      	b.n	6f72 <__hexnan+0xd2>
    7000:	2929      	cmp	r1, #41	; 0x29
    7002:	d009      	beq.n	7018 <__hexnan+0x178>
    7004:	2004      	movs	r0, #4
    7006:	b005      	add	sp, #20
    7008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    700c:	2301      	movs	r3, #1
    700e:	2005      	movs	r0, #5
    7010:	602b      	str	r3, [r5, #0]
    7012:	b005      	add	sp, #20
    7014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7018:	9902      	ldr	r1, [sp, #8]
    701a:	3401      	adds	r4, #1
    701c:	600c      	str	r4, [r1, #0]
    701e:	e784      	b.n	6f2a <__hexnan+0x8a>
    7020:	f8dc 1000 	ldr.w	r1, [ip]
    7024:	f1c3 0308 	rsb	r3, r3, #8
    7028:	009b      	lsls	r3, r3, #2
    702a:	f1c3 0720 	rsb	r7, r3, #32
    702e:	4664      	mov	r4, ip
    7030:	4608      	mov	r0, r1
    7032:	6866      	ldr	r6, [r4, #4]
    7034:	fa06 f107 	lsl.w	r1, r6, r7
    7038:	4301      	orrs	r1, r0
    703a:	fa26 f003 	lsr.w	r0, r6, r3
    703e:	6021      	str	r1, [r4, #0]
    7040:	f844 0f04 	str.w	r0, [r4, #4]!
    7044:	4544      	cmp	r4, r8
    7046:	d3f4      	bcc.n	7032 <__hexnan+0x192>
    7048:	e775      	b.n	6f36 <__hexnan+0x96>
    704a:	bf00      	nop
    704c:	200005d8 	.word	0x200005d8

00007050 <__ascii_mbtowc>:
    7050:	b082      	sub	sp, #8
    7052:	b149      	cbz	r1, 7068 <__ascii_mbtowc+0x18>
    7054:	b15a      	cbz	r2, 706e <__ascii_mbtowc+0x1e>
    7056:	b16b      	cbz	r3, 7074 <__ascii_mbtowc+0x24>
    7058:	7813      	ldrb	r3, [r2, #0]
    705a:	600b      	str	r3, [r1, #0]
    705c:	7812      	ldrb	r2, [r2, #0]
    705e:	1e10      	subs	r0, r2, #0
    7060:	bf18      	it	ne
    7062:	2001      	movne	r0, #1
    7064:	b002      	add	sp, #8
    7066:	4770      	bx	lr
    7068:	a901      	add	r1, sp, #4
    706a:	2a00      	cmp	r2, #0
    706c:	d1f3      	bne.n	7056 <__ascii_mbtowc+0x6>
    706e:	4610      	mov	r0, r2
    7070:	b002      	add	sp, #8
    7072:	4770      	bx	lr
    7074:	f06f 0001 	mvn.w	r0, #1
    7078:	e7f4      	b.n	7064 <__ascii_mbtowc+0x14>
    707a:	bf00      	nop

0000707c <_Balloc>:
    707c:	6c43      	ldr	r3, [r0, #68]	; 0x44
    707e:	b570      	push	{r4, r5, r6, lr}
    7080:	4605      	mov	r5, r0
    7082:	460c      	mov	r4, r1
    7084:	b14b      	cbz	r3, 709a <_Balloc+0x1e>
    7086:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    708a:	b180      	cbz	r0, 70ae <_Balloc+0x32>
    708c:	6802      	ldr	r2, [r0, #0]
    708e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    7092:	2300      	movs	r3, #0
    7094:	e9c0 3303 	strd	r3, r3, [r0, #12]
    7098:	bd70      	pop	{r4, r5, r6, pc}
    709a:	2221      	movs	r2, #33	; 0x21
    709c:	2104      	movs	r1, #4
    709e:	f004 f973 	bl	b388 <_calloc_r>
    70a2:	4603      	mov	r3, r0
    70a4:	6468      	str	r0, [r5, #68]	; 0x44
    70a6:	2800      	cmp	r0, #0
    70a8:	d1ed      	bne.n	7086 <_Balloc+0xa>
    70aa:	2000      	movs	r0, #0
    70ac:	bd70      	pop	{r4, r5, r6, pc}
    70ae:	2101      	movs	r1, #1
    70b0:	fa01 f604 	lsl.w	r6, r1, r4
    70b4:	1d72      	adds	r2, r6, #5
    70b6:	0092      	lsls	r2, r2, #2
    70b8:	4628      	mov	r0, r5
    70ba:	f004 f965 	bl	b388 <_calloc_r>
    70be:	2800      	cmp	r0, #0
    70c0:	d0f3      	beq.n	70aa <_Balloc+0x2e>
    70c2:	e9c0 4601 	strd	r4, r6, [r0, #4]
    70c6:	e7e4      	b.n	7092 <_Balloc+0x16>

000070c8 <_Bfree>:
    70c8:	b131      	cbz	r1, 70d8 <_Bfree+0x10>
    70ca:	6c43      	ldr	r3, [r0, #68]	; 0x44
    70cc:	684a      	ldr	r2, [r1, #4]
    70ce:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    70d2:	6008      	str	r0, [r1, #0]
    70d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    70d8:	4770      	bx	lr
    70da:	bf00      	nop

000070dc <__multadd>:
    70dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    70e0:	690e      	ldr	r6, [r1, #16]
    70e2:	4680      	mov	r8, r0
    70e4:	460f      	mov	r7, r1
    70e6:	461d      	mov	r5, r3
    70e8:	f101 0e14 	add.w	lr, r1, #20
    70ec:	2000      	movs	r0, #0
    70ee:	f8de 1000 	ldr.w	r1, [lr]
    70f2:	b28c      	uxth	r4, r1
    70f4:	fb02 5304 	mla	r3, r2, r4, r5
    70f8:	0c09      	lsrs	r1, r1, #16
    70fa:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    70fe:	fb02 cc01 	mla	ip, r2, r1, ip
    7102:	3001      	adds	r0, #1
    7104:	b29c      	uxth	r4, r3
    7106:	eb04 440c 	add.w	r4, r4, ip, lsl #16
    710a:	4286      	cmp	r6, r0
    710c:	f84e 4b04 	str.w	r4, [lr], #4
    7110:	ea4f 451c 	mov.w	r5, ip, lsr #16
    7114:	dceb      	bgt.n	70ee <__multadd+0x12>
    7116:	b13d      	cbz	r5, 7128 <__multadd+0x4c>
    7118:	68bb      	ldr	r3, [r7, #8]
    711a:	42b3      	cmp	r3, r6
    711c:	dd07      	ble.n	712e <__multadd+0x52>
    711e:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    7122:	3601      	adds	r6, #1
    7124:	615d      	str	r5, [r3, #20]
    7126:	613e      	str	r6, [r7, #16]
    7128:	4638      	mov	r0, r7
    712a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    712e:	6879      	ldr	r1, [r7, #4]
    7130:	4640      	mov	r0, r8
    7132:	3101      	adds	r1, #1
    7134:	f7ff ffa2 	bl	707c <_Balloc>
    7138:	4604      	mov	r4, r0
    713a:	b1b0      	cbz	r0, 716a <__multadd+0x8e>
    713c:	693a      	ldr	r2, [r7, #16]
    713e:	3202      	adds	r2, #2
    7140:	f107 010c 	add.w	r1, r7, #12
    7144:	0092      	lsls	r2, r2, #2
    7146:	300c      	adds	r0, #12
    7148:	f7fa ff62 	bl	2010 <memcpy>
    714c:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    7150:	687a      	ldr	r2, [r7, #4]
    7152:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    7156:	6039      	str	r1, [r7, #0]
    7158:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    715c:	4627      	mov	r7, r4
    715e:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    7162:	3601      	adds	r6, #1
    7164:	615d      	str	r5, [r3, #20]
    7166:	613e      	str	r6, [r7, #16]
    7168:	e7de      	b.n	7128 <__multadd+0x4c>
    716a:	4b03      	ldr	r3, [pc, #12]	; (7178 <__multadd+0x9c>)
    716c:	4803      	ldr	r0, [pc, #12]	; (717c <__multadd+0xa0>)
    716e:	4622      	mov	r2, r4
    7170:	21ba      	movs	r1, #186	; 0xba
    7172:	f004 f8e9 	bl	b348 <__assert_func>
    7176:	bf00      	nop
    7178:	20000560 	.word	0x20000560
    717c:	200006d8 	.word	0x200006d8

00007180 <__s2b>:
    7180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7184:	4617      	mov	r7, r2
    7186:	4a27      	ldr	r2, [pc, #156]	; (7224 <__s2b+0xa4>)
    7188:	461e      	mov	r6, r3
    718a:	3308      	adds	r3, #8
    718c:	460c      	mov	r4, r1
    718e:	2e09      	cmp	r6, #9
    7190:	fb82 1203 	smull	r1, r2, r2, r3
    7194:	ea4f 73e3 	mov.w	r3, r3, asr #31
    7198:	4605      	mov	r5, r0
    719a:	ebc3 0362 	rsb	r3, r3, r2, asr #1
    719e:	dd39      	ble.n	7214 <__s2b+0x94>
    71a0:	f04f 0c01 	mov.w	ip, #1
    71a4:	2100      	movs	r1, #0
    71a6:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    71aa:	4563      	cmp	r3, ip
    71ac:	f101 0101 	add.w	r1, r1, #1
    71b0:	dcf9      	bgt.n	71a6 <__s2b+0x26>
    71b2:	4628      	mov	r0, r5
    71b4:	f7ff ff62 	bl	707c <_Balloc>
    71b8:	4601      	mov	r1, r0
    71ba:	b368      	cbz	r0, 7218 <__s2b+0x98>
    71bc:	9b08      	ldr	r3, [sp, #32]
    71be:	6143      	str	r3, [r0, #20]
    71c0:	2f09      	cmp	r7, #9
    71c2:	f04f 0301 	mov.w	r3, #1
    71c6:	6103      	str	r3, [r0, #16]
    71c8:	dc12      	bgt.n	71f0 <__s2b+0x70>
    71ca:	340a      	adds	r4, #10
    71cc:	2709      	movs	r7, #9
    71ce:	42be      	cmp	r6, r7
    71d0:	dd0b      	ble.n	71ea <__s2b+0x6a>
    71d2:	1bf2      	subs	r2, r6, r7
    71d4:	18a6      	adds	r6, r4, r2
    71d6:	f814 3b01 	ldrb.w	r3, [r4], #1
    71da:	220a      	movs	r2, #10
    71dc:	3b30      	subs	r3, #48	; 0x30
    71de:	4628      	mov	r0, r5
    71e0:	f7ff ff7c 	bl	70dc <__multadd>
    71e4:	42a6      	cmp	r6, r4
    71e6:	4601      	mov	r1, r0
    71e8:	d1f5      	bne.n	71d6 <__s2b+0x56>
    71ea:	4608      	mov	r0, r1
    71ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    71f0:	f104 0909 	add.w	r9, r4, #9
    71f4:	46c8      	mov	r8, r9
    71f6:	443c      	add	r4, r7
    71f8:	f818 3b01 	ldrb.w	r3, [r8], #1
    71fc:	220a      	movs	r2, #10
    71fe:	3b30      	subs	r3, #48	; 0x30
    7200:	4628      	mov	r0, r5
    7202:	f7ff ff6b 	bl	70dc <__multadd>
    7206:	45a0      	cmp	r8, r4
    7208:	4601      	mov	r1, r0
    720a:	d1f5      	bne.n	71f8 <__s2b+0x78>
    720c:	f1a7 0408 	sub.w	r4, r7, #8
    7210:	444c      	add	r4, r9
    7212:	e7dc      	b.n	71ce <__s2b+0x4e>
    7214:	2100      	movs	r1, #0
    7216:	e7cc      	b.n	71b2 <__s2b+0x32>
    7218:	460a      	mov	r2, r1
    721a:	4b03      	ldr	r3, [pc, #12]	; (7228 <__s2b+0xa8>)
    721c:	4803      	ldr	r0, [pc, #12]	; (722c <__s2b+0xac>)
    721e:	21d3      	movs	r1, #211	; 0xd3
    7220:	f004 f892 	bl	b348 <__assert_func>
    7224:	38e38e39 	.word	0x38e38e39
    7228:	20000560 	.word	0x20000560
    722c:	200006d8 	.word	0x200006d8

00007230 <__hi0bits>:
    7230:	0c03      	lsrs	r3, r0, #16
    7232:	041b      	lsls	r3, r3, #16
    7234:	b9d3      	cbnz	r3, 726c <__hi0bits+0x3c>
    7236:	0400      	lsls	r0, r0, #16
    7238:	2310      	movs	r3, #16
    723a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
    723e:	bf04      	itt	eq
    7240:	0200      	lsleq	r0, r0, #8
    7242:	3308      	addeq	r3, #8
    7244:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
    7248:	bf04      	itt	eq
    724a:	0100      	lsleq	r0, r0, #4
    724c:	3304      	addeq	r3, #4
    724e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
    7252:	bf04      	itt	eq
    7254:	0080      	lsleq	r0, r0, #2
    7256:	3302      	addeq	r3, #2
    7258:	2800      	cmp	r0, #0
    725a:	db05      	blt.n	7268 <__hi0bits+0x38>
    725c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
    7260:	f103 0301 	add.w	r3, r3, #1
    7264:	bf08      	it	eq
    7266:	2320      	moveq	r3, #32
    7268:	4618      	mov	r0, r3
    726a:	4770      	bx	lr
    726c:	2300      	movs	r3, #0
    726e:	e7e4      	b.n	723a <__hi0bits+0xa>

00007270 <__lo0bits>:
    7270:	6803      	ldr	r3, [r0, #0]
    7272:	f013 0207 	ands.w	r2, r3, #7
    7276:	d008      	beq.n	728a <__lo0bits+0x1a>
    7278:	07d9      	lsls	r1, r3, #31
    727a:	d41f      	bmi.n	72bc <__lo0bits+0x4c>
    727c:	079a      	lsls	r2, r3, #30
    727e:	d522      	bpl.n	72c6 <__lo0bits+0x56>
    7280:	085b      	lsrs	r3, r3, #1
    7282:	6003      	str	r3, [r0, #0]
    7284:	2201      	movs	r2, #1
    7286:	4610      	mov	r0, r2
    7288:	4770      	bx	lr
    728a:	b299      	uxth	r1, r3
    728c:	b909      	cbnz	r1, 7292 <__lo0bits+0x22>
    728e:	0c1b      	lsrs	r3, r3, #16
    7290:	2210      	movs	r2, #16
    7292:	b2d9      	uxtb	r1, r3
    7294:	b909      	cbnz	r1, 729a <__lo0bits+0x2a>
    7296:	3208      	adds	r2, #8
    7298:	0a1b      	lsrs	r3, r3, #8
    729a:	0719      	lsls	r1, r3, #28
    729c:	bf04      	itt	eq
    729e:	091b      	lsreq	r3, r3, #4
    72a0:	3204      	addeq	r2, #4
    72a2:	0799      	lsls	r1, r3, #30
    72a4:	bf04      	itt	eq
    72a6:	089b      	lsreq	r3, r3, #2
    72a8:	3202      	addeq	r2, #2
    72aa:	07d9      	lsls	r1, r3, #31
    72ac:	d403      	bmi.n	72b6 <__lo0bits+0x46>
    72ae:	085b      	lsrs	r3, r3, #1
    72b0:	f102 0201 	add.w	r2, r2, #1
    72b4:	d005      	beq.n	72c2 <__lo0bits+0x52>
    72b6:	6003      	str	r3, [r0, #0]
    72b8:	4610      	mov	r0, r2
    72ba:	4770      	bx	lr
    72bc:	2200      	movs	r2, #0
    72be:	4610      	mov	r0, r2
    72c0:	4770      	bx	lr
    72c2:	2220      	movs	r2, #32
    72c4:	e7df      	b.n	7286 <__lo0bits+0x16>
    72c6:	089b      	lsrs	r3, r3, #2
    72c8:	2202      	movs	r2, #2
    72ca:	6003      	str	r3, [r0, #0]
    72cc:	4610      	mov	r0, r2
    72ce:	4770      	bx	lr

000072d0 <__i2b>:
    72d0:	b538      	push	{r3, r4, r5, lr}
    72d2:	6c43      	ldr	r3, [r0, #68]	; 0x44
    72d4:	4604      	mov	r4, r0
    72d6:	460d      	mov	r5, r1
    72d8:	b14b      	cbz	r3, 72ee <__i2b+0x1e>
    72da:	6858      	ldr	r0, [r3, #4]
    72dc:	b1b0      	cbz	r0, 730c <__i2b+0x3c>
    72de:	6802      	ldr	r2, [r0, #0]
    72e0:	605a      	str	r2, [r3, #4]
    72e2:	2200      	movs	r2, #0
    72e4:	2301      	movs	r3, #1
    72e6:	e9c0 3504 	strd	r3, r5, [r0, #16]
    72ea:	60c2      	str	r2, [r0, #12]
    72ec:	bd38      	pop	{r3, r4, r5, pc}
    72ee:	2221      	movs	r2, #33	; 0x21
    72f0:	2104      	movs	r1, #4
    72f2:	f004 f849 	bl	b388 <_calloc_r>
    72f6:	4603      	mov	r3, r0
    72f8:	6460      	str	r0, [r4, #68]	; 0x44
    72fa:	2800      	cmp	r0, #0
    72fc:	d1ed      	bne.n	72da <__i2b+0xa>
    72fe:	4b09      	ldr	r3, [pc, #36]	; (7324 <__i2b+0x54>)
    7300:	4809      	ldr	r0, [pc, #36]	; (7328 <__i2b+0x58>)
    7302:	2200      	movs	r2, #0
    7304:	f240 1145 	movw	r1, #325	; 0x145
    7308:	f004 f81e 	bl	b348 <__assert_func>
    730c:	221c      	movs	r2, #28
    730e:	2101      	movs	r1, #1
    7310:	4620      	mov	r0, r4
    7312:	f004 f839 	bl	b388 <_calloc_r>
    7316:	2800      	cmp	r0, #0
    7318:	d0f1      	beq.n	72fe <__i2b+0x2e>
    731a:	2201      	movs	r2, #1
    731c:	2302      	movs	r3, #2
    731e:	e9c0 2301 	strd	r2, r3, [r0, #4]
    7322:	e7de      	b.n	72e2 <__i2b+0x12>
    7324:	20000560 	.word	0x20000560
    7328:	200006d8 	.word	0x200006d8

0000732c <__multiply>:
    732c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7330:	690e      	ldr	r6, [r1, #16]
    7332:	6915      	ldr	r5, [r2, #16]
    7334:	42ae      	cmp	r6, r5
    7336:	b085      	sub	sp, #20
    7338:	4688      	mov	r8, r1
    733a:	4614      	mov	r4, r2
    733c:	db05      	blt.n	734a <__multiply+0x1e>
    733e:	462a      	mov	r2, r5
    7340:	4623      	mov	r3, r4
    7342:	4635      	mov	r5, r6
    7344:	460c      	mov	r4, r1
    7346:	4616      	mov	r6, r2
    7348:	4698      	mov	r8, r3
    734a:	68a3      	ldr	r3, [r4, #8]
    734c:	6861      	ldr	r1, [r4, #4]
    734e:	19af      	adds	r7, r5, r6
    7350:	42bb      	cmp	r3, r7
    7352:	bfb8      	it	lt
    7354:	3101      	addlt	r1, #1
    7356:	f7ff fe91 	bl	707c <_Balloc>
    735a:	9001      	str	r0, [sp, #4]
    735c:	2800      	cmp	r0, #0
    735e:	f000 8087 	beq.w	7470 <__multiply+0x144>
    7362:	9b01      	ldr	r3, [sp, #4]
    7364:	f103 0914 	add.w	r9, r3, #20
    7368:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
    736c:	45d1      	cmp	r9, sl
    736e:	d205      	bcs.n	737c <__multiply+0x50>
    7370:	464b      	mov	r3, r9
    7372:	2200      	movs	r2, #0
    7374:	f843 2b04 	str.w	r2, [r3], #4
    7378:	459a      	cmp	sl, r3
    737a:	d8fb      	bhi.n	7374 <__multiply+0x48>
    737c:	f108 0814 	add.w	r8, r8, #20
    7380:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
    7384:	f104 0314 	add.w	r3, r4, #20
    7388:	45d8      	cmp	r8, fp
    738a:	461a      	mov	r2, r3
    738c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    7390:	d25f      	bcs.n	7452 <__multiply+0x126>
    7392:	1b2b      	subs	r3, r5, r4
    7394:	3b15      	subs	r3, #21
    7396:	f023 0303 	bic.w	r3, r3, #3
    739a:	3304      	adds	r3, #4
    739c:	3415      	adds	r4, #21
    739e:	42a5      	cmp	r5, r4
    73a0:	bf38      	it	cc
    73a2:	2304      	movcc	r3, #4
    73a4:	e9cd a702 	strd	sl, r7, [sp, #8]
    73a8:	46ac      	mov	ip, r5
    73aa:	461f      	mov	r7, r3
    73ac:	4692      	mov	sl, r2
    73ae:	e005      	b.n	73bc <__multiply+0x90>
    73b0:	0c09      	lsrs	r1, r1, #16
    73b2:	d129      	bne.n	7408 <__multiply+0xdc>
    73b4:	45c3      	cmp	fp, r8
    73b6:	f109 0904 	add.w	r9, r9, #4
    73ba:	d948      	bls.n	744e <__multiply+0x122>
    73bc:	f858 1b04 	ldr.w	r1, [r8], #4
    73c0:	b28d      	uxth	r5, r1
    73c2:	2d00      	cmp	r5, #0
    73c4:	d0f4      	beq.n	73b0 <__multiply+0x84>
    73c6:	4656      	mov	r6, sl
    73c8:	464c      	mov	r4, r9
    73ca:	2300      	movs	r3, #0
    73cc:	f856 1b04 	ldr.w	r1, [r6], #4
    73d0:	6822      	ldr	r2, [r4, #0]
    73d2:	fa1f fe81 	uxth.w	lr, r1
    73d6:	b290      	uxth	r0, r2
    73d8:	0c09      	lsrs	r1, r1, #16
    73da:	fb05 000e 	mla	r0, r5, lr, r0
    73de:	0c12      	lsrs	r2, r2, #16
    73e0:	4403      	add	r3, r0
    73e2:	fb05 2201 	mla	r2, r5, r1, r2
    73e6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    73ea:	b29b      	uxth	r3, r3
    73ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    73f0:	45b4      	cmp	ip, r6
    73f2:	f844 3b04 	str.w	r3, [r4], #4
    73f6:	ea4f 4312 	mov.w	r3, r2, lsr #16
    73fa:	d8e7      	bhi.n	73cc <__multiply+0xa0>
    73fc:	f849 3007 	str.w	r3, [r9, r7]
    7400:	f858 1c04 	ldr.w	r1, [r8, #-4]
    7404:	0c09      	lsrs	r1, r1, #16
    7406:	d0d5      	beq.n	73b4 <__multiply+0x88>
    7408:	f8d9 3000 	ldr.w	r3, [r9]
    740c:	4650      	mov	r0, sl
    740e:	461a      	mov	r2, r3
    7410:	464c      	mov	r4, r9
    7412:	2600      	movs	r6, #0
    7414:	8805      	ldrh	r5, [r0, #0]
    7416:	0c12      	lsrs	r2, r2, #16
    7418:	fb01 2205 	mla	r2, r1, r5, r2
    741c:	4416      	add	r6, r2
    741e:	b29b      	uxth	r3, r3
    7420:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    7424:	f844 3b04 	str.w	r3, [r4], #4
    7428:	f850 5b04 	ldr.w	r5, [r0], #4
    742c:	6822      	ldr	r2, [r4, #0]
    742e:	0c2d      	lsrs	r5, r5, #16
    7430:	b293      	uxth	r3, r2
    7432:	fb01 3305 	mla	r3, r1, r5, r3
    7436:	eb03 4316 	add.w	r3, r3, r6, lsr #16
    743a:	4584      	cmp	ip, r0
    743c:	ea4f 4613 	mov.w	r6, r3, lsr #16
    7440:	d8e8      	bhi.n	7414 <__multiply+0xe8>
    7442:	45c3      	cmp	fp, r8
    7444:	f849 3007 	str.w	r3, [r9, r7]
    7448:	f109 0904 	add.w	r9, r9, #4
    744c:	d8b6      	bhi.n	73bc <__multiply+0x90>
    744e:	e9dd a702 	ldrd	sl, r7, [sp, #8]
    7452:	2f00      	cmp	r7, #0
    7454:	dc02      	bgt.n	745c <__multiply+0x130>
    7456:	e005      	b.n	7464 <__multiply+0x138>
    7458:	3f01      	subs	r7, #1
    745a:	d003      	beq.n	7464 <__multiply+0x138>
    745c:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
    7460:	2b00      	cmp	r3, #0
    7462:	d0f9      	beq.n	7458 <__multiply+0x12c>
    7464:	9b01      	ldr	r3, [sp, #4]
    7466:	4618      	mov	r0, r3
    7468:	611f      	str	r7, [r3, #16]
    746a:	b005      	add	sp, #20
    746c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7470:	4b03      	ldr	r3, [pc, #12]	; (7480 <__multiply+0x154>)
    7472:	4804      	ldr	r0, [pc, #16]	; (7484 <__multiply+0x158>)
    7474:	9a01      	ldr	r2, [sp, #4]
    7476:	f44f 71b1 	mov.w	r1, #354	; 0x162
    747a:	f003 ff65 	bl	b348 <__assert_func>
    747e:	bf00      	nop
    7480:	20000560 	.word	0x20000560
    7484:	200006d8 	.word	0x200006d8

00007488 <__pow5mult>:
    7488:	f012 0303 	ands.w	r3, r2, #3
    748c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7490:	4614      	mov	r4, r2
    7492:	4606      	mov	r6, r0
    7494:	d132      	bne.n	74fc <__pow5mult+0x74>
    7496:	460d      	mov	r5, r1
    7498:	10a4      	asrs	r4, r4, #2
    749a:	d020      	beq.n	74de <__pow5mult+0x56>
    749c:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
    74a0:	f1b8 0f00 	cmp.w	r8, #0
    74a4:	d033      	beq.n	750e <__pow5mult+0x86>
    74a6:	07e3      	lsls	r3, r4, #31
    74a8:	f04f 0700 	mov.w	r7, #0
    74ac:	d407      	bmi.n	74be <__pow5mult+0x36>
    74ae:	1064      	asrs	r4, r4, #1
    74b0:	d015      	beq.n	74de <__pow5mult+0x56>
    74b2:	f8d8 0000 	ldr.w	r0, [r8]
    74b6:	b1a8      	cbz	r0, 74e4 <__pow5mult+0x5c>
    74b8:	4680      	mov	r8, r0
    74ba:	07e3      	lsls	r3, r4, #31
    74bc:	d5f7      	bpl.n	74ae <__pow5mult+0x26>
    74be:	4642      	mov	r2, r8
    74c0:	4629      	mov	r1, r5
    74c2:	4630      	mov	r0, r6
    74c4:	f7ff ff32 	bl	732c <__multiply>
    74c8:	b1b5      	cbz	r5, 74f8 <__pow5mult+0x70>
    74ca:	6869      	ldr	r1, [r5, #4]
    74cc:	6c73      	ldr	r3, [r6, #68]	; 0x44
    74ce:	1064      	asrs	r4, r4, #1
    74d0:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    74d4:	602a      	str	r2, [r5, #0]
    74d6:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
    74da:	4605      	mov	r5, r0
    74dc:	d1e9      	bne.n	74b2 <__pow5mult+0x2a>
    74de:	4628      	mov	r0, r5
    74e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    74e4:	4642      	mov	r2, r8
    74e6:	4641      	mov	r1, r8
    74e8:	4630      	mov	r0, r6
    74ea:	f7ff ff1f 	bl	732c <__multiply>
    74ee:	f8c8 0000 	str.w	r0, [r8]
    74f2:	6007      	str	r7, [r0, #0]
    74f4:	4680      	mov	r8, r0
    74f6:	e7e0      	b.n	74ba <__pow5mult+0x32>
    74f8:	4605      	mov	r5, r0
    74fa:	e7d8      	b.n	74ae <__pow5mult+0x26>
    74fc:	3b01      	subs	r3, #1
    74fe:	4a0f      	ldr	r2, [pc, #60]	; (753c <__pow5mult+0xb4>)
    7500:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    7504:	2300      	movs	r3, #0
    7506:	f7ff fde9 	bl	70dc <__multadd>
    750a:	4605      	mov	r5, r0
    750c:	e7c4      	b.n	7498 <__pow5mult+0x10>
    750e:	2101      	movs	r1, #1
    7510:	4630      	mov	r0, r6
    7512:	f7ff fdb3 	bl	707c <_Balloc>
    7516:	4680      	mov	r8, r0
    7518:	b140      	cbz	r0, 752c <__pow5mult+0xa4>
    751a:	2301      	movs	r3, #1
    751c:	f240 2271 	movw	r2, #625	; 0x271
    7520:	e9c0 3204 	strd	r3, r2, [r0, #16]
    7524:	2300      	movs	r3, #0
    7526:	6430      	str	r0, [r6, #64]	; 0x40
    7528:	6003      	str	r3, [r0, #0]
    752a:	e7bc      	b.n	74a6 <__pow5mult+0x1e>
    752c:	4b04      	ldr	r3, [pc, #16]	; (7540 <__pow5mult+0xb8>)
    752e:	4805      	ldr	r0, [pc, #20]	; (7544 <__pow5mult+0xbc>)
    7530:	4642      	mov	r2, r8
    7532:	f240 1145 	movw	r1, #325	; 0x145
    7536:	f003 ff07 	bl	b348 <__assert_func>
    753a:	bf00      	nop
    753c:	20007894 	.word	0x20007894
    7540:	20000560 	.word	0x20000560
    7544:	200006d8 	.word	0x200006d8

00007548 <__lshift>:
    7548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    754c:	460d      	mov	r5, r1
    754e:	4614      	mov	r4, r2
    7550:	692f      	ldr	r7, [r5, #16]
    7552:	68ab      	ldr	r3, [r5, #8]
    7554:	6849      	ldr	r1, [r1, #4]
    7556:	eb07 1762 	add.w	r7, r7, r2, asr #5
    755a:	1c7e      	adds	r6, r7, #1
    755c:	429e      	cmp	r6, r3
    755e:	4680      	mov	r8, r0
    7560:	ea4f 1962 	mov.w	r9, r2, asr #5
    7564:	dd04      	ble.n	7570 <__lshift+0x28>
    7566:	005b      	lsls	r3, r3, #1
    7568:	429e      	cmp	r6, r3
    756a:	f101 0101 	add.w	r1, r1, #1
    756e:	dcfa      	bgt.n	7566 <__lshift+0x1e>
    7570:	4640      	mov	r0, r8
    7572:	f7ff fd83 	bl	707c <_Balloc>
    7576:	4684      	mov	ip, r0
    7578:	2800      	cmp	r0, #0
    757a:	d052      	beq.n	7622 <__lshift+0xda>
    757c:	f1b9 0f00 	cmp.w	r9, #0
    7580:	f100 0214 	add.w	r2, r0, #20
    7584:	dd0e      	ble.n	75a4 <__lshift+0x5c>
    7586:	f109 0105 	add.w	r1, r9, #5
    758a:	ea4f 0e81 	mov.w	lr, r1, lsl #2
    758e:	4613      	mov	r3, r2
    7590:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    7594:	2000      	movs	r0, #0
    7596:	f843 0b04 	str.w	r0, [r3], #4
    759a:	428b      	cmp	r3, r1
    759c:	d1fb      	bne.n	7596 <__lshift+0x4e>
    759e:	f1ae 0314 	sub.w	r3, lr, #20
    75a2:	441a      	add	r2, r3
    75a4:	6929      	ldr	r1, [r5, #16]
    75a6:	f105 0314 	add.w	r3, r5, #20
    75aa:	f014 0e1f 	ands.w	lr, r4, #31
    75ae:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    75b2:	d02e      	beq.n	7612 <__lshift+0xca>
    75b4:	f1ce 0920 	rsb	r9, lr, #32
    75b8:	4610      	mov	r0, r2
    75ba:	f04f 0a00 	mov.w	sl, #0
    75be:	681c      	ldr	r4, [r3, #0]
    75c0:	fa04 f40e 	lsl.w	r4, r4, lr
    75c4:	ea44 040a 	orr.w	r4, r4, sl
    75c8:	f840 4b04 	str.w	r4, [r0], #4
    75cc:	f853 4b04 	ldr.w	r4, [r3], #4
    75d0:	4299      	cmp	r1, r3
    75d2:	fa24 fa09 	lsr.w	sl, r4, r9
    75d6:	d8f2      	bhi.n	75be <__lshift+0x76>
    75d8:	1b4b      	subs	r3, r1, r5
    75da:	3b15      	subs	r3, #21
    75dc:	f023 0303 	bic.w	r3, r3, #3
    75e0:	3304      	adds	r3, #4
    75e2:	f105 0015 	add.w	r0, r5, #21
    75e6:	4281      	cmp	r1, r0
    75e8:	bf38      	it	cc
    75ea:	2304      	movcc	r3, #4
    75ec:	f1ba 0f00 	cmp.w	sl, #0
    75f0:	bf18      	it	ne
    75f2:	4637      	movne	r7, r6
    75f4:	f842 a003 	str.w	sl, [r2, r3]
    75f8:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    75fc:	686a      	ldr	r2, [r5, #4]
    75fe:	f8cc 7010 	str.w	r7, [ip, #16]
    7602:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    7606:	6029      	str	r1, [r5, #0]
    7608:	4660      	mov	r0, ip
    760a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
    760e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7612:	3a04      	subs	r2, #4
    7614:	f853 0b04 	ldr.w	r0, [r3], #4
    7618:	f842 0f04 	str.w	r0, [r2, #4]!
    761c:	4299      	cmp	r1, r3
    761e:	d8f9      	bhi.n	7614 <__lshift+0xcc>
    7620:	e7ea      	b.n	75f8 <__lshift+0xb0>
    7622:	4b03      	ldr	r3, [pc, #12]	; (7630 <__lshift+0xe8>)
    7624:	4803      	ldr	r0, [pc, #12]	; (7634 <__lshift+0xec>)
    7626:	4662      	mov	r2, ip
    7628:	f44f 71ef 	mov.w	r1, #478	; 0x1de
    762c:	f003 fe8c 	bl	b348 <__assert_func>
    7630:	20000560 	.word	0x20000560
    7634:	200006d8 	.word	0x200006d8

00007638 <__mcmp>:
    7638:	690b      	ldr	r3, [r1, #16]
    763a:	4684      	mov	ip, r0
    763c:	6900      	ldr	r0, [r0, #16]
    763e:	1ac0      	subs	r0, r0, r3
    7640:	d116      	bne.n	7670 <__mcmp+0x38>
    7642:	f10c 0c14 	add.w	ip, ip, #20
    7646:	3114      	adds	r1, #20
    7648:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
    764c:	b410      	push	{r4}
    764e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    7652:	e001      	b.n	7658 <__mcmp+0x20>
    7654:	4594      	cmp	ip, r2
    7656:	d208      	bcs.n	766a <__mcmp+0x32>
    7658:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    765c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    7660:	428c      	cmp	r4, r1
    7662:	d0f7      	beq.n	7654 <__mcmp+0x1c>
    7664:	d205      	bcs.n	7672 <__mcmp+0x3a>
    7666:	f04f 30ff 	mov.w	r0, #4294967295
    766a:	f85d 4b04 	ldr.w	r4, [sp], #4
    766e:	4770      	bx	lr
    7670:	4770      	bx	lr
    7672:	2001      	movs	r0, #1
    7674:	f85d 4b04 	ldr.w	r4, [sp], #4
    7678:	4770      	bx	lr
    767a:	bf00      	nop

0000767c <__mdiff>:
    767c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7680:	690f      	ldr	r7, [r1, #16]
    7682:	6913      	ldr	r3, [r2, #16]
    7684:	1aff      	subs	r7, r7, r3
    7686:	2f00      	cmp	r7, #0
    7688:	460e      	mov	r6, r1
    768a:	4690      	mov	r8, r2
    768c:	d17f      	bne.n	778e <__mdiff+0x112>
    768e:	f101 0514 	add.w	r5, r1, #20
    7692:	3214      	adds	r2, #20
    7694:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    7698:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    769c:	e001      	b.n	76a2 <__mdiff+0x26>
    769e:	429d      	cmp	r5, r3
    76a0:	d278      	bcs.n	7794 <__mdiff+0x118>
    76a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    76a6:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    76aa:	42a1      	cmp	r1, r4
    76ac:	d0f7      	beq.n	769e <__mdiff+0x22>
    76ae:	d369      	bcc.n	7784 <__mdiff+0x108>
    76b0:	6871      	ldr	r1, [r6, #4]
    76b2:	f7ff fce3 	bl	707c <_Balloc>
    76b6:	4681      	mov	r9, r0
    76b8:	2800      	cmp	r0, #0
    76ba:	d077      	beq.n	77ac <__mdiff+0x130>
    76bc:	6935      	ldr	r5, [r6, #16]
    76be:	f8d8 2010 	ldr.w	r2, [r8, #16]
    76c2:	60c7      	str	r7, [r0, #12]
    76c4:	f108 0e14 	add.w	lr, r8, #20
    76c8:	f106 0014 	add.w	r0, r6, #20
    76cc:	f109 0a14 	add.w	sl, r9, #20
    76d0:	f106 0110 	add.w	r1, r6, #16
    76d4:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    76d8:	eb00 0785 	add.w	r7, r0, r5, lsl #2
    76dc:	4656      	mov	r6, sl
    76de:	f04f 0c00 	mov.w	ip, #0
    76e2:	f85e 4b04 	ldr.w	r4, [lr], #4
    76e6:	f851 bf04 	ldr.w	fp, [r1, #4]!
    76ea:	b2a3      	uxth	r3, r4
    76ec:	fa1c fc8b 	uxtah	ip, ip, fp
    76f0:	ebac 0303 	sub.w	r3, ip, r3
    76f4:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    76f8:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
    76fc:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
    7700:	b29b      	uxth	r3, r3
    7702:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    7706:	4572      	cmp	r2, lr
    7708:	f846 3b04 	str.w	r3, [r6], #4
    770c:	ea4f 4c2c 	mov.w	ip, ip, asr #16
    7710:	d8e7      	bhi.n	76e2 <__mdiff+0x66>
    7712:	eba2 0108 	sub.w	r1, r2, r8
    7716:	3915      	subs	r1, #21
    7718:	f108 0815 	add.w	r8, r8, #21
    771c:	4542      	cmp	r2, r8
    771e:	f021 0403 	bic.w	r4, r1, #3
    7722:	f104 0404 	add.w	r4, r4, #4
    7726:	bf38      	it	cc
    7728:	2404      	movcc	r4, #4
    772a:	4420      	add	r0, r4
    772c:	f021 0203 	bic.w	r2, r1, #3
    7730:	bf38      	it	cc
    7732:	2200      	movcc	r2, #0
    7734:	4287      	cmp	r7, r0
    7736:	4452      	add	r2, sl
    7738:	4454      	add	r4, sl
    773a:	d918      	bls.n	776e <__mdiff+0xf2>
    773c:	4626      	mov	r6, r4
    773e:	4601      	mov	r1, r0
    7740:	f851 3b04 	ldr.w	r3, [r1], #4
    7744:	fa1c fc83 	uxtah	ip, ip, r3
    7748:	ea4f 422c 	mov.w	r2, ip, asr #16
    774c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    7750:	fa1f fc8c 	uxth.w	ip, ip
    7754:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
    7758:	428f      	cmp	r7, r1
    775a:	f846 3b04 	str.w	r3, [r6], #4
    775e:	ea4f 4c22 	mov.w	ip, r2, asr #16
    7762:	d8ed      	bhi.n	7740 <__mdiff+0xc4>
    7764:	3f01      	subs	r7, #1
    7766:	1a3f      	subs	r7, r7, r0
    7768:	f027 0703 	bic.w	r7, r7, #3
    776c:	19e2      	adds	r2, r4, r7
    776e:	b923      	cbnz	r3, 777a <__mdiff+0xfe>
    7770:	f852 3d04 	ldr.w	r3, [r2, #-4]!
    7774:	3d01      	subs	r5, #1
    7776:	2b00      	cmp	r3, #0
    7778:	d0fa      	beq.n	7770 <__mdiff+0xf4>
    777a:	f8c9 5010 	str.w	r5, [r9, #16]
    777e:	4648      	mov	r0, r9
    7780:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7784:	4633      	mov	r3, r6
    7786:	2701      	movs	r7, #1
    7788:	4646      	mov	r6, r8
    778a:	4698      	mov	r8, r3
    778c:	e790      	b.n	76b0 <__mdiff+0x34>
    778e:	dbf9      	blt.n	7784 <__mdiff+0x108>
    7790:	2700      	movs	r7, #0
    7792:	e78d      	b.n	76b0 <__mdiff+0x34>
    7794:	2100      	movs	r1, #0
    7796:	f7ff fc71 	bl	707c <_Balloc>
    779a:	4681      	mov	r9, r0
    779c:	b168      	cbz	r0, 77ba <__mdiff+0x13e>
    779e:	2201      	movs	r2, #1
    77a0:	2300      	movs	r3, #0
    77a2:	e9c9 2304 	strd	r2, r3, [r9, #16]
    77a6:	4648      	mov	r0, r9
    77a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    77ac:	4b06      	ldr	r3, [pc, #24]	; (77c8 <__mdiff+0x14c>)
    77ae:	4807      	ldr	r0, [pc, #28]	; (77cc <__mdiff+0x150>)
    77b0:	464a      	mov	r2, r9
    77b2:	f240 2145 	movw	r1, #581	; 0x245
    77b6:	f003 fdc7 	bl	b348 <__assert_func>
    77ba:	4b03      	ldr	r3, [pc, #12]	; (77c8 <__mdiff+0x14c>)
    77bc:	4803      	ldr	r0, [pc, #12]	; (77cc <__mdiff+0x150>)
    77be:	464a      	mov	r2, r9
    77c0:	f240 2137 	movw	r1, #567	; 0x237
    77c4:	f003 fdc0 	bl	b348 <__assert_func>
    77c8:	20000560 	.word	0x20000560
    77cc:	200006d8 	.word	0x200006d8

000077d0 <__ulp>:
    77d0:	b082      	sub	sp, #8
    77d2:	ed8d 0b00 	vstr	d0, [sp]
    77d6:	4b16      	ldr	r3, [pc, #88]	; (7830 <__ulp+0x60>)
    77d8:	9a01      	ldr	r2, [sp, #4]
    77da:	4013      	ands	r3, r2
    77dc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
    77e0:	2b00      	cmp	r3, #0
    77e2:	dd06      	ble.n	77f2 <__ulp+0x22>
    77e4:	2200      	movs	r2, #0
    77e6:	4619      	mov	r1, r3
    77e8:	4610      	mov	r0, r2
    77ea:	ec41 0b10 	vmov	d0, r0, r1
    77ee:	b002      	add	sp, #8
    77f0:	4770      	bx	lr
    77f2:	425b      	negs	r3, r3
    77f4:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
    77f8:	ea4f 5223 	mov.w	r2, r3, asr #20
    77fc:	da09      	bge.n	7812 <__ulp+0x42>
    77fe:	f44f 2300 	mov.w	r3, #524288	; 0x80000
    7802:	4113      	asrs	r3, r2
    7804:	2200      	movs	r2, #0
    7806:	4619      	mov	r1, r3
    7808:	4610      	mov	r0, r2
    780a:	ec41 0b10 	vmov	d0, r0, r1
    780e:	b002      	add	sp, #8
    7810:	4770      	bx	lr
    7812:	f1a2 0314 	sub.w	r3, r2, #20
    7816:	2b1e      	cmp	r3, #30
    7818:	bfda      	itte	le
    781a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
    781e:	40da      	lsrle	r2, r3
    7820:	2201      	movgt	r2, #1
    7822:	2300      	movs	r3, #0
    7824:	4619      	mov	r1, r3
    7826:	4610      	mov	r0, r2
    7828:	ec41 0b10 	vmov	d0, r0, r1
    782c:	b002      	add	sp, #8
    782e:	4770      	bx	lr
    7830:	7ff00000 	.word	0x7ff00000

00007834 <__b2d>:
    7834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7836:	6904      	ldr	r4, [r0, #16]
    7838:	f100 0614 	add.w	r6, r0, #20
    783c:	eb06 0484 	add.w	r4, r6, r4, lsl #2
    7840:	1f27      	subs	r7, r4, #4
    7842:	f854 5c04 	ldr.w	r5, [r4, #-4]
    7846:	4628      	mov	r0, r5
    7848:	f7ff fcf2 	bl	7230 <__hi0bits>
    784c:	f1c0 0320 	rsb	r3, r0, #32
    7850:	280a      	cmp	r0, #10
    7852:	600b      	str	r3, [r1, #0]
    7854:	dd1b      	ble.n	788e <__b2d+0x5a>
    7856:	42be      	cmp	r6, r7
    7858:	d20b      	bcs.n	7872 <__b2d+0x3e>
    785a:	380b      	subs	r0, #11
    785c:	f854 1c08 	ldr.w	r1, [r4, #-8]
    7860:	d12e      	bne.n	78c0 <__b2d+0x8c>
    7862:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
    7866:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    786a:	460a      	mov	r2, r1
    786c:	ec43 2b10 	vmov	d0, r2, r3
    7870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7872:	f1b0 010b 	subs.w	r1, r0, #11
    7876:	d0f4      	beq.n	7862 <__b2d+0x2e>
    7878:	fa05 f101 	lsl.w	r1, r5, r1
    787c:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
    7880:	2100      	movs	r1, #0
    7882:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    7886:	460a      	mov	r2, r1
    7888:	ec43 2b10 	vmov	d0, r2, r3
    788c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    788e:	f1c0 0c0b 	rsb	ip, r0, #11
    7892:	fa25 f10c 	lsr.w	r1, r5, ip
    7896:	42be      	cmp	r6, r7
    7898:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
    789c:	bf38      	it	cc
    789e:	f854 1c08 	ldrcc.w	r1, [r4, #-8]
    78a2:	f100 0015 	add.w	r0, r0, #21
    78a6:	bf34      	ite	cc
    78a8:	fa21 f10c 	lsrcc.w	r1, r1, ip
    78ac:	2100      	movcs	r1, #0
    78ae:	fa05 f000 	lsl.w	r0, r5, r0
    78b2:	4301      	orrs	r1, r0
    78b4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    78b8:	460a      	mov	r2, r1
    78ba:	ec43 2b10 	vmov	d0, r2, r3
    78be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    78c0:	f1c0 0c20 	rsb	ip, r0, #32
    78c4:	4085      	lsls	r5, r0
    78c6:	fa21 f30c 	lsr.w	r3, r1, ip
    78ca:	ea45 0703 	orr.w	r7, r5, r3
    78ce:	f1a4 0508 	sub.w	r5, r4, #8
    78d2:	42ae      	cmp	r6, r5
    78d4:	fa01 f100 	lsl.w	r1, r1, r0
    78d8:	bf3c      	itt	cc
    78da:	f854 0c0c 	ldrcc.w	r0, [r4, #-12]
    78de:	fa20 f00c 	lsrcc.w	r0, r0, ip
    78e2:	f047 537f 	orr.w	r3, r7, #1069547520	; 0x3fc00000
    78e6:	bf38      	it	cc
    78e8:	4301      	orrcc	r1, r0
    78ea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    78ee:	460a      	mov	r2, r1
    78f0:	ec43 2b10 	vmov	d0, r2, r3
    78f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    78f6:	bf00      	nop

000078f8 <__d2b>:
    78f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    78fc:	4688      	mov	r8, r1
    78fe:	b083      	sub	sp, #12
    7900:	2101      	movs	r1, #1
    7902:	ec57 6b10 	vmov	r6, r7, d0
    7906:	4615      	mov	r5, r2
    7908:	f7ff fbb8 	bl	707c <_Balloc>
    790c:	4604      	mov	r4, r0
    790e:	2800      	cmp	r0, #0
    7910:	d051      	beq.n	79b6 <__d2b+0xbe>
    7912:	f3c7 590a 	ubfx	r9, r7, #20, #11
    7916:	f3c7 0313 	ubfx	r3, r7, #0, #20
    791a:	f1b9 0f00 	cmp.w	r9, #0
    791e:	d001      	beq.n	7924 <__d2b+0x2c>
    7920:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    7924:	2e00      	cmp	r6, #0
    7926:	9301      	str	r3, [sp, #4]
    7928:	d118      	bne.n	795c <__d2b+0x64>
    792a:	a801      	add	r0, sp, #4
    792c:	f7ff fca0 	bl	7270 <__lo0bits>
    7930:	9a01      	ldr	r2, [sp, #4]
    7932:	6162      	str	r2, [r4, #20]
    7934:	2201      	movs	r2, #1
    7936:	f100 0320 	add.w	r3, r0, #32
    793a:	6122      	str	r2, [r4, #16]
    793c:	f1b9 0f00 	cmp.w	r9, #0
    7940:	d025      	beq.n	798e <__d2b+0x96>
    7942:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
    7946:	eb09 0203 	add.w	r2, r9, r3
    794a:	4620      	mov	r0, r4
    794c:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
    7950:	f8c8 2000 	str.w	r2, [r8]
    7954:	602b      	str	r3, [r5, #0]
    7956:	b003      	add	sp, #12
    7958:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    795c:	4668      	mov	r0, sp
    795e:	9600      	str	r6, [sp, #0]
    7960:	f7ff fc86 	bl	7270 <__lo0bits>
    7964:	4603      	mov	r3, r0
    7966:	b310      	cbz	r0, 79ae <__d2b+0xb6>
    7968:	e9dd 0200 	ldrd	r0, r2, [sp]
    796c:	f1c3 0120 	rsb	r1, r3, #32
    7970:	fa02 f101 	lsl.w	r1, r2, r1
    7974:	4301      	orrs	r1, r0
    7976:	40da      	lsrs	r2, r3
    7978:	6161      	str	r1, [r4, #20]
    797a:	9201      	str	r2, [sp, #4]
    797c:	2a00      	cmp	r2, #0
    797e:	61a2      	str	r2, [r4, #24]
    7980:	bf14      	ite	ne
    7982:	2202      	movne	r2, #2
    7984:	2201      	moveq	r2, #1
    7986:	6122      	str	r2, [r4, #16]
    7988:	f1b9 0f00 	cmp.w	r9, #0
    798c:	d1d9      	bne.n	7942 <__d2b+0x4a>
    798e:	f2a3 4332 	subw	r3, r3, #1074	; 0x432
    7992:	f8c8 3000 	str.w	r3, [r8]
    7996:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    799a:	6918      	ldr	r0, [r3, #16]
    799c:	f7ff fc48 	bl	7230 <__hi0bits>
    79a0:	ebc0 1342 	rsb	r3, r0, r2, lsl #5
    79a4:	4620      	mov	r0, r4
    79a6:	602b      	str	r3, [r5, #0]
    79a8:	b003      	add	sp, #12
    79aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    79ae:	9a00      	ldr	r2, [sp, #0]
    79b0:	6162      	str	r2, [r4, #20]
    79b2:	9a01      	ldr	r2, [sp, #4]
    79b4:	e7e2      	b.n	797c <__d2b+0x84>
    79b6:	4b03      	ldr	r3, [pc, #12]	; (79c4 <__d2b+0xcc>)
    79b8:	4803      	ldr	r0, [pc, #12]	; (79c8 <__d2b+0xd0>)
    79ba:	4622      	mov	r2, r4
    79bc:	f240 310f 	movw	r1, #783	; 0x30f
    79c0:	f003 fcc2 	bl	b348 <__assert_func>
    79c4:	20000560 	.word	0x20000560
    79c8:	200006d8 	.word	0x200006d8

000079cc <__ratio>:
    79cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    79ce:	b083      	sub	sp, #12
    79d0:	460e      	mov	r6, r1
    79d2:	4669      	mov	r1, sp
    79d4:	4607      	mov	r7, r0
    79d6:	f7ff ff2d 	bl	7834 <__b2d>
    79da:	a901      	add	r1, sp, #4
    79dc:	4630      	mov	r0, r6
    79de:	ec55 4b10 	vmov	r4, r5, d0
    79e2:	eeb0 7b40 	vmov.f64	d7, d0
    79e6:	f7ff ff25 	bl	7834 <__b2d>
    79ea:	6933      	ldr	r3, [r6, #16]
    79ec:	693a      	ldr	r2, [r7, #16]
    79ee:	1ad2      	subs	r2, r2, r3
    79f0:	e9dd 3100 	ldrd	r3, r1, [sp]
    79f4:	1a5b      	subs	r3, r3, r1
    79f6:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    79fa:	2b00      	cmp	r3, #0
    79fc:	dd09      	ble.n	7a12 <__ratio+0x46>
    79fe:	ee17 2a90 	vmov	r2, s15
    7a02:	eb02 5503 	add.w	r5, r2, r3, lsl #20
    7a06:	ec45 4b17 	vmov	d7, r4, r5
    7a0a:	ee87 0b00 	vdiv.f64	d0, d7, d0
    7a0e:	b003      	add	sp, #12
    7a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7a12:	ee10 2a90 	vmov	r2, s1
    7a16:	ec51 0b10 	vmov	r0, r1, d0
    7a1a:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
    7a1e:	eb02 5103 	add.w	r1, r2, r3, lsl #20
    7a22:	ec41 0b10 	vmov	d0, r0, r1
    7a26:	ee87 0b00 	vdiv.f64	d0, d7, d0
    7a2a:	b003      	add	sp, #12
    7a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7a2e:	bf00      	nop

00007a30 <__copybits>:
    7a30:	3901      	subs	r1, #1
    7a32:	1149      	asrs	r1, r1, #5
    7a34:	f101 0c01 	add.w	ip, r1, #1
    7a38:	6911      	ldr	r1, [r2, #16]
    7a3a:	f102 0314 	add.w	r3, r2, #20
    7a3e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    7a42:	428b      	cmp	r3, r1
    7a44:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
    7a48:	d217      	bcs.n	7a7a <__copybits+0x4a>
    7a4a:	b510      	push	{r4, lr}
    7a4c:	f1a0 0e04 	sub.w	lr, r0, #4
    7a50:	f853 4b04 	ldr.w	r4, [r3], #4
    7a54:	f84e 4f04 	str.w	r4, [lr, #4]!
    7a58:	4299      	cmp	r1, r3
    7a5a:	d8f9      	bhi.n	7a50 <__copybits+0x20>
    7a5c:	1a8a      	subs	r2, r1, r2
    7a5e:	f1a2 0315 	sub.w	r3, r2, #21
    7a62:	f023 0303 	bic.w	r3, r3, #3
    7a66:	3304      	adds	r3, #4
    7a68:	4418      	add	r0, r3
    7a6a:	4584      	cmp	ip, r0
    7a6c:	d904      	bls.n	7a78 <__copybits+0x48>
    7a6e:	2300      	movs	r3, #0
    7a70:	f840 3b04 	str.w	r3, [r0], #4
    7a74:	4584      	cmp	ip, r0
    7a76:	d8fb      	bhi.n	7a70 <__copybits+0x40>
    7a78:	bd10      	pop	{r4, pc}
    7a7a:	4584      	cmp	ip, r0
    7a7c:	d905      	bls.n	7a8a <__copybits+0x5a>
    7a7e:	2300      	movs	r3, #0
    7a80:	f840 3b04 	str.w	r3, [r0], #4
    7a84:	4584      	cmp	ip, r0
    7a86:	d8fb      	bhi.n	7a80 <__copybits+0x50>
    7a88:	4770      	bx	lr
    7a8a:	4770      	bx	lr

00007a8c <__any_on>:
    7a8c:	6903      	ldr	r3, [r0, #16]
    7a8e:	114a      	asrs	r2, r1, #5
    7a90:	4293      	cmp	r3, r2
    7a92:	f100 0014 	add.w	r0, r0, #20
    7a96:	da09      	bge.n	7aac <__any_on+0x20>
    7a98:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    7a9c:	e002      	b.n	7aa4 <__any_on+0x18>
    7a9e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
    7aa2:	b9c2      	cbnz	r2, 7ad6 <__any_on+0x4a>
    7aa4:	4283      	cmp	r3, r0
    7aa6:	d8fa      	bhi.n	7a9e <__any_on+0x12>
    7aa8:	2000      	movs	r0, #0
    7aaa:	4770      	bx	lr
    7aac:	dd10      	ble.n	7ad0 <__any_on+0x44>
    7aae:	f011 011f 	ands.w	r1, r1, #31
    7ab2:	d00d      	beq.n	7ad0 <__any_on+0x44>
    7ab4:	b410      	push	{r4}
    7ab6:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
    7aba:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    7abe:	fa24 f201 	lsr.w	r2, r4, r1
    7ac2:	408a      	lsls	r2, r1
    7ac4:	4294      	cmp	r4, r2
    7ac6:	d00c      	beq.n	7ae2 <__any_on+0x56>
    7ac8:	2001      	movs	r0, #1
    7aca:	f85d 4b04 	ldr.w	r4, [sp], #4
    7ace:	4770      	bx	lr
    7ad0:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    7ad4:	e7e6      	b.n	7aa4 <__any_on+0x18>
    7ad6:	2001      	movs	r0, #1
    7ad8:	4770      	bx	lr
    7ada:	f853 2d04 	ldr.w	r2, [r3, #-4]!
    7ade:	2a00      	cmp	r2, #0
    7ae0:	d1f2      	bne.n	7ac8 <__any_on+0x3c>
    7ae2:	4283      	cmp	r3, r0
    7ae4:	d8f9      	bhi.n	7ada <__any_on+0x4e>
    7ae6:	2000      	movs	r0, #0
    7ae8:	f85d 4b04 	ldr.w	r4, [sp], #4
    7aec:	4770      	bx	lr
    7aee:	bf00      	nop

00007af0 <__ascii_wctomb>:
    7af0:	b149      	cbz	r1, 7b06 <__ascii_wctomb+0x16>
    7af2:	2aff      	cmp	r2, #255	; 0xff
    7af4:	d802      	bhi.n	7afc <__ascii_wctomb+0xc>
    7af6:	700a      	strb	r2, [r1, #0]
    7af8:	2001      	movs	r0, #1
    7afa:	4770      	bx	lr
    7afc:	238a      	movs	r3, #138	; 0x8a
    7afe:	6003      	str	r3, [r0, #0]
    7b00:	f04f 30ff 	mov.w	r0, #4294967295
    7b04:	4770      	bx	lr
    7b06:	4608      	mov	r0, r1
    7b08:	4770      	bx	lr
    7b0a:	bf00      	nop
    7b0c:	0000      	movs	r0, r0
	...

00007b10 <_svfprintf_r>:
    7b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7b14:	ed2d 8b08 	vpush	{d8-d11}
    7b18:	b0d1      	sub	sp, #324	; 0x144
    7b1a:	460c      	mov	r4, r1
    7b1c:	ee0b 1a10 	vmov	s22, r1
    7b20:	4690      	mov	r8, r2
    7b22:	9308      	str	r3, [sp, #32]
    7b24:	4683      	mov	fp, r0
    7b26:	f003 fb79 	bl	b21c <_localeconv_r>
    7b2a:	6803      	ldr	r3, [r0, #0]
    7b2c:	9312      	str	r3, [sp, #72]	; 0x48
    7b2e:	4618      	mov	r0, r3
    7b30:	f7fe fc66 	bl	6400 <strlen>
    7b34:	af20      	add	r7, sp, #128	; 0x80
    7b36:	9010      	str	r0, [sp, #64]	; 0x40
    7b38:	2208      	movs	r2, #8
    7b3a:	2100      	movs	r1, #0
    7b3c:	4638      	mov	r0, r7
    7b3e:	f7fe f8b3 	bl	5ca8 <memset>
    7b42:	89a3      	ldrh	r3, [r4, #12]
    7b44:	061b      	lsls	r3, r3, #24
    7b46:	d503      	bpl.n	7b50 <_svfprintf_r+0x40>
    7b48:	6923      	ldr	r3, [r4, #16]
    7b4a:	2b00      	cmp	r3, #0
    7b4c:	f000 8755 	beq.w	89fa <_svfprintf_r+0xeea>
    7b50:	2300      	movs	r3, #0
    7b52:	ed9f 8b83 	vldr	d8, [pc, #524]	; 7d60 <_svfprintf_r+0x250>
    7b56:	ed9f 9b84 	vldr	d9, [pc, #528]	; 7d68 <_svfprintf_r+0x258>
    7b5a:	e9cd 3325 	strd	r3, r3, [sp, #148]	; 0x94
    7b5e:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
    7b62:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
    7b66:	aa27      	add	r2, sp, #156	; 0x9c
    7b68:	930e      	str	r3, [sp, #56]	; 0x38
    7b6a:	9224      	str	r2, [sp, #144]	; 0x90
    7b6c:	4692      	mov	sl, r2
    7b6e:	9311      	str	r3, [sp, #68]	; 0x44
    7b70:	9304      	str	r3, [sp, #16]
    7b72:	4644      	mov	r4, r8
    7b74:	46a1      	mov	r9, r4
    7b76:	4b7e      	ldr	r3, [pc, #504]	; (7d70 <_svfprintf_r+0x260>)
    7b78:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    7b7c:	f7fe f9c4 	bl	5f08 <__locale_mb_cur_max>
    7b80:	464a      	mov	r2, r9
    7b82:	4603      	mov	r3, r0
    7b84:	a91c      	add	r1, sp, #112	; 0x70
    7b86:	9700      	str	r7, [sp, #0]
    7b88:	4658      	mov	r0, fp
    7b8a:	47a8      	blx	r5
    7b8c:	2800      	cmp	r0, #0
    7b8e:	f000 80b0 	beq.w	7cf2 <_svfprintf_r+0x1e2>
    7b92:	f2c0 80a6 	blt.w	7ce2 <_svfprintf_r+0x1d2>
    7b96:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    7b98:	2a25      	cmp	r2, #37	; 0x25
    7b9a:	4603      	mov	r3, r0
    7b9c:	d001      	beq.n	7ba2 <_svfprintf_r+0x92>
    7b9e:	4499      	add	r9, r3
    7ba0:	e7e9      	b.n	7b76 <_svfprintf_r+0x66>
    7ba2:	ebb9 0504 	subs.w	r5, r9, r4
    7ba6:	4606      	mov	r6, r0
    7ba8:	f040 80a7 	bne.w	7cfa <_svfprintf_r+0x1ea>
    7bac:	2300      	movs	r3, #0
    7bae:	f04f 32ff 	mov.w	r2, #4294967295
    7bb2:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    7bb6:	4698      	mov	r8, r3
    7bb8:	9306      	str	r3, [sp, #24]
    7bba:	f109 0901 	add.w	r9, r9, #1
    7bbe:	f899 3000 	ldrb.w	r3, [r9]
    7bc2:	9203      	str	r2, [sp, #12]
    7bc4:	252b      	movs	r5, #43	; 0x2b
    7bc6:	2620      	movs	r6, #32
    7bc8:	f109 0901 	add.w	r9, r9, #1
    7bcc:	f1a3 0220 	sub.w	r2, r3, #32
    7bd0:	2a5a      	cmp	r2, #90	; 0x5a
    7bd2:	f200 80cf 	bhi.w	7d74 <_svfprintf_r+0x264>
    7bd6:	e8df f012 	tbh	[pc, r2, lsl #1]
    7bda:	02e8      	.short	0x02e8
    7bdc:	00cd00cd 	.word	0x00cd00cd
    7be0:	00cd02e3 	.word	0x00cd02e3
    7be4:	00cd00cd 	.word	0x00cd00cd
    7be8:	00cd006a 	.word	0x00cd006a
    7bec:	020500cd 	.word	0x020500cd
    7bf0:	00cd0284 	.word	0x00cd0284
    7bf4:	02c90210 	.word	0x02c90210
    7bf8:	02bd00cd 	.word	0x02bd00cd
    7bfc:	005b005b 	.word	0x005b005b
    7c00:	005b005b 	.word	0x005b005b
    7c04:	005b005b 	.word	0x005b005b
    7c08:	005b005b 	.word	0x005b005b
    7c0c:	00cd005b 	.word	0x00cd005b
    7c10:	00cd00cd 	.word	0x00cd00cd
    7c14:	00cd00cd 	.word	0x00cd00cd
    7c18:	00cd00cd 	.word	0x00cd00cd
    7c1c:	00cd0153 	.word	0x00cd0153
    7c20:	021a0183 	.word	0x021a0183
    7c24:	01530153 	.word	0x01530153
    7c28:	00cd0153 	.word	0x00cd0153
    7c2c:	00cd00cd 	.word	0x00cd00cd
    7c30:	021500cd 	.word	0x021500cd
    7c34:	00cd00cd 	.word	0x00cd00cd
    7c38:	00cd0296 	.word	0x00cd0296
    7c3c:	00cd00cd 	.word	0x00cd00cd
    7c40:	00cd01ab 	.word	0x00cd01ab
    7c44:	00cd02aa 	.word	0x00cd02aa
    7c48:	06e300cd 	.word	0x06e300cd
    7c4c:	00cd00cd 	.word	0x00cd00cd
    7c50:	00cd00cd 	.word	0x00cd00cd
    7c54:	00cd00cd 	.word	0x00cd00cd
    7c58:	00cd00cd 	.word	0x00cd00cd
    7c5c:	00cd0153 	.word	0x00cd0153
    7c60:	01de0183 	.word	0x01de0183
    7c64:	01530153 	.word	0x01530153
    7c68:	02770153 	.word	0x02770153
    7c6c:	007f01de 	.word	0x007f01de
    7c70:	028900cd 	.word	0x028900cd
    7c74:	025f00cd 	.word	0x025f00cd
    7c78:	022f06e0 	.word	0x022f06e0
    7c7c:	00cd007f 	.word	0x00cd007f
    7c80:	007c01ab 	.word	0x007c01ab
    7c84:	00cd06b8 	.word	0x00cd06b8
    7c88:	06bd00cd 	.word	0x06bd00cd
    7c8c:	007c00cd 	.word	0x007c00cd
    7c90:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    7c94:	2100      	movs	r1, #0
    7c96:	f819 3b01 	ldrb.w	r3, [r9], #1
    7c9a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    7c9e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    7ca2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    7ca6:	2a09      	cmp	r2, #9
    7ca8:	d9f5      	bls.n	7c96 <_svfprintf_r+0x186>
    7caa:	9106      	str	r1, [sp, #24]
    7cac:	e78e      	b.n	7bcc <_svfprintf_r+0xbc>
    7cae:	4658      	mov	r0, fp
    7cb0:	f003 fab4 	bl	b21c <_localeconv_r>
    7cb4:	6843      	ldr	r3, [r0, #4]
    7cb6:	9315      	str	r3, [sp, #84]	; 0x54
    7cb8:	4618      	mov	r0, r3
    7cba:	f7fe fba1 	bl	6400 <strlen>
    7cbe:	9016      	str	r0, [sp, #88]	; 0x58
    7cc0:	4658      	mov	r0, fp
    7cc2:	f003 faab 	bl	b21c <_localeconv_r>
    7cc6:	6883      	ldr	r3, [r0, #8]
    7cc8:	9313      	str	r3, [sp, #76]	; 0x4c
    7cca:	9b16      	ldr	r3, [sp, #88]	; 0x58
    7ccc:	2b00      	cmp	r3, #0
    7cce:	f040 862d 	bne.w	892c <_svfprintf_r+0xe1c>
    7cd2:	f899 3000 	ldrb.w	r3, [r9]
    7cd6:	e777      	b.n	7bc8 <_svfprintf_r+0xb8>
    7cd8:	f899 3000 	ldrb.w	r3, [r9]
    7cdc:	f048 0820 	orr.w	r8, r8, #32
    7ce0:	e772      	b.n	7bc8 <_svfprintf_r+0xb8>
    7ce2:	2208      	movs	r2, #8
    7ce4:	2100      	movs	r1, #0
    7ce6:	4638      	mov	r0, r7
    7ce8:	f7fd ffde 	bl	5ca8 <memset>
    7cec:	2301      	movs	r3, #1
    7cee:	4499      	add	r9, r3
    7cf0:	e741      	b.n	7b76 <_svfprintf_r+0x66>
    7cf2:	ebb9 0504 	subs.w	r5, r9, r4
    7cf6:	4606      	mov	r6, r0
    7cf8:	d011      	beq.n	7d1e <_svfprintf_r+0x20e>
    7cfa:	9b26      	ldr	r3, [sp, #152]	; 0x98
    7cfc:	442b      	add	r3, r5
    7cfe:	9326      	str	r3, [sp, #152]	; 0x98
    7d00:	9b25      	ldr	r3, [sp, #148]	; 0x94
    7d02:	3301      	adds	r3, #1
    7d04:	2b07      	cmp	r3, #7
    7d06:	e9ca 4500 	strd	r4, r5, [sl]
    7d0a:	9325      	str	r3, [sp, #148]	; 0x94
    7d0c:	dc1c      	bgt.n	7d48 <_svfprintf_r+0x238>
    7d0e:	f10a 0a08 	add.w	sl, sl, #8
    7d12:	9b04      	ldr	r3, [sp, #16]
    7d14:	442b      	add	r3, r5
    7d16:	9304      	str	r3, [sp, #16]
    7d18:	2e00      	cmp	r6, #0
    7d1a:	f47f af47 	bne.w	7bac <_svfprintf_r+0x9c>
    7d1e:	9b26      	ldr	r3, [sp, #152]	; 0x98
    7d20:	2b00      	cmp	r3, #0
    7d22:	f041 820b 	bne.w	913c <_svfprintf_r+0x162c>
    7d26:	ee1b 3a10 	vmov	r3, s22
    7d2a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    7d2e:	f013 0f40 	tst.w	r3, #64	; 0x40
    7d32:	9b04      	ldr	r3, [sp, #16]
    7d34:	bf18      	it	ne
    7d36:	f04f 33ff 	movne.w	r3, #4294967295
    7d3a:	9304      	str	r3, [sp, #16]
    7d3c:	9804      	ldr	r0, [sp, #16]
    7d3e:	b051      	add	sp, #324	; 0x144
    7d40:	ecbd 8b08 	vpop	{d8-d11}
    7d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7d48:	ee1b 1a10 	vmov	r1, s22
    7d4c:	aa24      	add	r2, sp, #144	; 0x90
    7d4e:	4658      	mov	r0, fp
    7d50:	f004 fdde 	bl	c910 <__ssprint_r>
    7d54:	2800      	cmp	r0, #0
    7d56:	d1e6      	bne.n	7d26 <_svfprintf_r+0x216>
    7d58:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    7d5c:	e7d9      	b.n	7d12 <_svfprintf_r+0x202>
    7d5e:	bf00      	nop
	...
    7d68:	ffffffff 	.word	0xffffffff
    7d6c:	7fefffff 	.word	0x7fefffff
    7d70:	20007c48 	.word	0x20007c48
    7d74:	930b      	str	r3, [sp, #44]	; 0x2c
    7d76:	2b00      	cmp	r3, #0
    7d78:	d0d1      	beq.n	7d1e <_svfprintf_r+0x20e>
    7d7a:	2100      	movs	r1, #0
    7d7c:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    7d80:	f88d 30dc 	strb.w	r3, [sp, #220]	; 0xdc
    7d84:	2301      	movs	r3, #1
    7d86:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    7d8a:	9302      	str	r3, [sp, #8]
    7d8c:	9107      	str	r1, [sp, #28]
    7d8e:	9305      	str	r3, [sp, #20]
    7d90:	9103      	str	r1, [sp, #12]
    7d92:	910f      	str	r1, [sp, #60]	; 0x3c
    7d94:	ac37      	add	r4, sp, #220	; 0xdc
    7d96:	f018 0302 	ands.w	r3, r8, #2
    7d9a:	9309      	str	r3, [sp, #36]	; 0x24
    7d9c:	d002      	beq.n	7da4 <_svfprintf_r+0x294>
    7d9e:	9b02      	ldr	r3, [sp, #8]
    7da0:	3302      	adds	r3, #2
    7da2:	9302      	str	r3, [sp, #8]
    7da4:	f018 0384 	ands.w	r3, r8, #132	; 0x84
    7da8:	930a      	str	r3, [sp, #40]	; 0x28
    7daa:	d105      	bne.n	7db8 <_svfprintf_r+0x2a8>
    7dac:	9b06      	ldr	r3, [sp, #24]
    7dae:	9a02      	ldr	r2, [sp, #8]
    7db0:	1a9d      	subs	r5, r3, r2
    7db2:	2d00      	cmp	r5, #0
    7db4:	f300 8369 	bgt.w	848a <_svfprintf_r+0x97a>
    7db8:	9a26      	ldr	r2, [sp, #152]	; 0x98
    7dba:	b189      	cbz	r1, 7de0 <_svfprintf_r+0x2d0>
    7dbc:	9925      	ldr	r1, [sp, #148]	; 0x94
    7dbe:	f10d 0067 	add.w	r0, sp, #103	; 0x67
    7dc2:	3101      	adds	r1, #1
    7dc4:	3201      	adds	r2, #1
    7dc6:	f8ca 0000 	str.w	r0, [sl]
    7dca:	2907      	cmp	r1, #7
    7dcc:	f04f 0001 	mov.w	r0, #1
    7dd0:	9226      	str	r2, [sp, #152]	; 0x98
    7dd2:	9125      	str	r1, [sp, #148]	; 0x94
    7dd4:	f8ca 0004 	str.w	r0, [sl, #4]
    7dd8:	f300 83a2 	bgt.w	8520 <_svfprintf_r+0xa10>
    7ddc:	f10a 0a08 	add.w	sl, sl, #8
    7de0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7de2:	b183      	cbz	r3, 7e06 <_svfprintf_r+0x2f6>
    7de4:	9b25      	ldr	r3, [sp, #148]	; 0x94
    7de6:	a91a      	add	r1, sp, #104	; 0x68
    7de8:	3301      	adds	r3, #1
    7dea:	3202      	adds	r2, #2
    7dec:	f8ca 1000 	str.w	r1, [sl]
    7df0:	2b07      	cmp	r3, #7
    7df2:	f04f 0102 	mov.w	r1, #2
    7df6:	9226      	str	r2, [sp, #152]	; 0x98
    7df8:	9325      	str	r3, [sp, #148]	; 0x94
    7dfa:	f8ca 1004 	str.w	r1, [sl, #4]
    7dfe:	f300 83a3 	bgt.w	8548 <_svfprintf_r+0xa38>
    7e02:	f10a 0a08 	add.w	sl, sl, #8
    7e06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7e08:	2b80      	cmp	r3, #128	; 0x80
    7e0a:	f000 826c 	beq.w	82e6 <_svfprintf_r+0x7d6>
    7e0e:	9b03      	ldr	r3, [sp, #12]
    7e10:	9905      	ldr	r1, [sp, #20]
    7e12:	1a5d      	subs	r5, r3, r1
    7e14:	2d00      	cmp	r5, #0
    7e16:	f300 82a5 	bgt.w	8364 <_svfprintf_r+0x854>
    7e1a:	f418 7f80 	tst.w	r8, #256	; 0x100
    7e1e:	f040 820d 	bne.w	823c <_svfprintf_r+0x72c>
    7e22:	9b05      	ldr	r3, [sp, #20]
    7e24:	f8ca 3004 	str.w	r3, [sl, #4]
    7e28:	441a      	add	r2, r3
    7e2a:	9b25      	ldr	r3, [sp, #148]	; 0x94
    7e2c:	f8ca 4000 	str.w	r4, [sl]
    7e30:	3301      	adds	r3, #1
    7e32:	2b07      	cmp	r3, #7
    7e34:	9226      	str	r2, [sp, #152]	; 0x98
    7e36:	9325      	str	r3, [sp, #148]	; 0x94
    7e38:	f300 831b 	bgt.w	8472 <_svfprintf_r+0x962>
    7e3c:	f10a 0a08 	add.w	sl, sl, #8
    7e40:	f018 0f04 	tst.w	r8, #4
    7e44:	d005      	beq.n	7e52 <_svfprintf_r+0x342>
    7e46:	9b06      	ldr	r3, [sp, #24]
    7e48:	9902      	ldr	r1, [sp, #8]
    7e4a:	1a5c      	subs	r4, r3, r1
    7e4c:	2c00      	cmp	r4, #0
    7e4e:	f300 8388 	bgt.w	8562 <_svfprintf_r+0xa52>
    7e52:	9b04      	ldr	r3, [sp, #16]
    7e54:	9906      	ldr	r1, [sp, #24]
    7e56:	9802      	ldr	r0, [sp, #8]
    7e58:	4281      	cmp	r1, r0
    7e5a:	bfac      	ite	ge
    7e5c:	185b      	addge	r3, r3, r1
    7e5e:	181b      	addlt	r3, r3, r0
    7e60:	9304      	str	r3, [sp, #16]
    7e62:	2a00      	cmp	r2, #0
    7e64:	f040 82b0 	bne.w	83c8 <_svfprintf_r+0x8b8>
    7e68:	2300      	movs	r3, #0
    7e6a:	9325      	str	r3, [sp, #148]	; 0x94
    7e6c:	9b07      	ldr	r3, [sp, #28]
    7e6e:	b11b      	cbz	r3, 7e78 <_svfprintf_r+0x368>
    7e70:	9907      	ldr	r1, [sp, #28]
    7e72:	4658      	mov	r0, fp
    7e74:	f7fe fbd6 	bl	6624 <_free_r>
    7e78:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    7e7c:	464c      	mov	r4, r9
    7e7e:	e679      	b.n	7b74 <_svfprintf_r+0x64>
    7e80:	930b      	str	r3, [sp, #44]	; 0x2c
    7e82:	9b08      	ldr	r3, [sp, #32]
    7e84:	3307      	adds	r3, #7
    7e86:	f023 0307 	bic.w	r3, r3, #7
    7e8a:	ecb3 8b02 	vldmia	r3!, {d8}
    7e8e:	eeb0 7bc8 	vabs.f64	d7, d8
    7e92:	eeb4 7b49 	vcmp.f64	d7, d9
    7e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7e9a:	9308      	str	r3, [sp, #32]
    7e9c:	f340 84e9 	ble.w	8872 <_svfprintf_r+0xd62>
    7ea0:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
    7ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7ea8:	f101 8059 	bmi.w	8f5e <_svfprintf_r+0x144e>
    7eac:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    7eb0:	4cab      	ldr	r4, [pc, #684]	; (8160 <_svfprintf_r+0x650>)
    7eb2:	4bac      	ldr	r3, [pc, #688]	; (8164 <_svfprintf_r+0x654>)
    7eb4:	f028 0880 	bic.w	r8, r8, #128	; 0x80
    7eb8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    7eba:	2a47      	cmp	r2, #71	; 0x47
    7ebc:	bfc8      	it	gt
    7ebe:	461c      	movgt	r4, r3
    7ec0:	2300      	movs	r3, #0
    7ec2:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    7ec6:	2203      	movs	r2, #3
    7ec8:	9307      	str	r3, [sp, #28]
    7eca:	9202      	str	r2, [sp, #8]
    7ecc:	9205      	str	r2, [sp, #20]
    7ece:	9303      	str	r3, [sp, #12]
    7ed0:	930f      	str	r3, [sp, #60]	; 0x3c
    7ed2:	2900      	cmp	r1, #0
    7ed4:	f43f af5f 	beq.w	7d96 <_svfprintf_r+0x286>
    7ed8:	9b02      	ldr	r3, [sp, #8]
    7eda:	3301      	adds	r3, #1
    7edc:	9302      	str	r3, [sp, #8]
    7ede:	e75a      	b.n	7d96 <_svfprintf_r+0x286>
    7ee0:	2b43      	cmp	r3, #67	; 0x43
    7ee2:	930b      	str	r3, [sp, #44]	; 0x2c
    7ee4:	d003      	beq.n	7eee <_svfprintf_r+0x3de>
    7ee6:	f018 0f10 	tst.w	r8, #16
    7eea:	f000 855d 	beq.w	89a8 <_svfprintf_r+0xe98>
    7eee:	9d08      	ldr	r5, [sp, #32]
    7ef0:	2208      	movs	r2, #8
    7ef2:	2100      	movs	r1, #0
    7ef4:	a822      	add	r0, sp, #136	; 0x88
    7ef6:	ac37      	add	r4, sp, #220	; 0xdc
    7ef8:	f7fd fed6 	bl	5ca8 <memset>
    7efc:	ab22      	add	r3, sp, #136	; 0x88
    7efe:	f855 2b04 	ldr.w	r2, [r5], #4
    7f02:	4621      	mov	r1, r4
    7f04:	4658      	mov	r0, fp
    7f06:	f004 fbd9 	bl	c6bc <_wcrtomb_r>
    7f0a:	4603      	mov	r3, r0
    7f0c:	3301      	adds	r3, #1
    7f0e:	9005      	str	r0, [sp, #20]
    7f10:	f001 82ee 	beq.w	94f0 <_svfprintf_r+0x19e0>
    7f14:	9b05      	ldr	r3, [sp, #20]
    7f16:	9508      	str	r5, [sp, #32]
    7f18:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    7f1c:	9302      	str	r3, [sp, #8]
    7f1e:	2100      	movs	r1, #0
    7f20:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    7f24:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    7f28:	9107      	str	r1, [sp, #28]
    7f2a:	9103      	str	r1, [sp, #12]
    7f2c:	910f      	str	r1, [sp, #60]	; 0x3c
    7f2e:	e732      	b.n	7d96 <_svfprintf_r+0x286>
    7f30:	930b      	str	r3, [sp, #44]	; 0x2c
    7f32:	9b08      	ldr	r3, [sp, #32]
    7f34:	461a      	mov	r2, r3
    7f36:	2300      	movs	r3, #0
    7f38:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    7f3c:	4613      	mov	r3, r2
    7f3e:	f853 4b04 	ldr.w	r4, [r3], #4
    7f42:	9308      	str	r3, [sp, #32]
    7f44:	2c00      	cmp	r4, #0
    7f46:	f000 8548 	beq.w	89da <_svfprintf_r+0xeca>
    7f4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7f4c:	2b53      	cmp	r3, #83	; 0x53
    7f4e:	f000 86ec 	beq.w	8d2a <_svfprintf_r+0x121a>
    7f52:	f018 0310 	ands.w	r3, r8, #16
    7f56:	930c      	str	r3, [sp, #48]	; 0x30
    7f58:	f040 86e7 	bne.w	8d2a <_svfprintf_r+0x121a>
    7f5c:	9b03      	ldr	r3, [sp, #12]
    7f5e:	1c5d      	adds	r5, r3, #1
    7f60:	f001 80e5 	beq.w	912e <_svfprintf_r+0x161e>
    7f64:	990c      	ldr	r1, [sp, #48]	; 0x30
    7f66:	461a      	mov	r2, r3
    7f68:	4620      	mov	r0, r4
    7f6a:	f003 f961 	bl	b230 <memchr>
    7f6e:	9007      	str	r0, [sp, #28]
    7f70:	2800      	cmp	r0, #0
    7f72:	f001 8328 	beq.w	95c6 <_svfprintf_r+0x1ab6>
    7f76:	9b07      	ldr	r3, [sp, #28]
    7f78:	1b1a      	subs	r2, r3, r4
    7f7a:	9205      	str	r2, [sp, #20]
    7f7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7f7e:	9303      	str	r3, [sp, #12]
    7f80:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    7f84:	930f      	str	r3, [sp, #60]	; 0x3c
    7f86:	930d      	str	r3, [sp, #52]	; 0x34
    7f88:	9307      	str	r3, [sp, #28]
    7f8a:	2373      	movs	r3, #115	; 0x73
    7f8c:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    7f90:	9202      	str	r2, [sp, #8]
    7f92:	930b      	str	r3, [sp, #44]	; 0x2c
    7f94:	e79d      	b.n	7ed2 <_svfprintf_r+0x3c2>
    7f96:	f018 0f20 	tst.w	r8, #32
    7f9a:	930b      	str	r3, [sp, #44]	; 0x2c
    7f9c:	9b08      	ldr	r3, [sp, #32]
    7f9e:	d03d      	beq.n	801c <_svfprintf_r+0x50c>
    7fa0:	3307      	adds	r3, #7
    7fa2:	f023 0307 	bic.w	r3, r3, #7
    7fa6:	461a      	mov	r2, r3
    7fa8:	4611      	mov	r1, r2
    7faa:	685b      	ldr	r3, [r3, #4]
    7fac:	f851 2b08 	ldr.w	r2, [r1], #8
    7fb0:	9108      	str	r1, [sp, #32]
    7fb2:	4619      	mov	r1, r3
    7fb4:	2b00      	cmp	r3, #0
    7fb6:	f2c0 840c 	blt.w	87d2 <_svfprintf_r+0xcc2>
    7fba:	9b03      	ldr	r3, [sp, #12]
    7fbc:	3301      	adds	r3, #1
    7fbe:	f000 829e 	beq.w	84fe <_svfprintf_r+0x9ee>
    7fc2:	f028 0080 	bic.w	r0, r8, #128	; 0x80
    7fc6:	ea52 0301 	orrs.w	r3, r2, r1
    7fca:	9002      	str	r0, [sp, #8]
    7fcc:	f040 8299 	bne.w	8502 <_svfprintf_r+0x9f2>
    7fd0:	9b03      	ldr	r3, [sp, #12]
    7fd2:	2b00      	cmp	r3, #0
    7fd4:	f040 829a 	bne.w	850c <_svfprintf_r+0x9fc>
    7fd8:	4680      	mov	r8, r0
    7fda:	2300      	movs	r3, #0
    7fdc:	9303      	str	r3, [sp, #12]
    7fde:	9305      	str	r3, [sp, #20]
    7fe0:	ac50      	add	r4, sp, #320	; 0x140
    7fe2:	e106      	b.n	81f2 <_svfprintf_r+0x6e2>
    7fe4:	9b08      	ldr	r3, [sp, #32]
    7fe6:	f853 2b04 	ldr.w	r2, [r3], #4
    7fea:	9206      	str	r2, [sp, #24]
    7fec:	2a00      	cmp	r2, #0
    7fee:	f280 8419 	bge.w	8824 <_svfprintf_r+0xd14>
    7ff2:	9a06      	ldr	r2, [sp, #24]
    7ff4:	9308      	str	r3, [sp, #32]
    7ff6:	4252      	negs	r2, r2
    7ff8:	9206      	str	r2, [sp, #24]
    7ffa:	f899 3000 	ldrb.w	r3, [r9]
    7ffe:	f048 0804 	orr.w	r8, r8, #4
    8002:	e5e1      	b.n	7bc8 <_svfprintf_r+0xb8>
    8004:	f899 3000 	ldrb.w	r3, [r9]
    8008:	f048 0808 	orr.w	r8, r8, #8
    800c:	e5dc      	b.n	7bc8 <_svfprintf_r+0xb8>
    800e:	f048 0810 	orr.w	r8, r8, #16
    8012:	f018 0f20 	tst.w	r8, #32
    8016:	930b      	str	r3, [sp, #44]	; 0x2c
    8018:	9b08      	ldr	r3, [sp, #32]
    801a:	d1c1      	bne.n	7fa0 <_svfprintf_r+0x490>
    801c:	f018 0f10 	tst.w	r8, #16
    8020:	f040 840b 	bne.w	883a <_svfprintf_r+0xd2a>
    8024:	f018 0f40 	tst.w	r8, #64	; 0x40
    8028:	f000 8403 	beq.w	8832 <_svfprintf_r+0xd22>
    802c:	f933 2b04 	ldrsh.w	r2, [r3], #4
    8030:	9308      	str	r3, [sp, #32]
    8032:	17d1      	asrs	r1, r2, #31
    8034:	460b      	mov	r3, r1
    8036:	e7bd      	b.n	7fb4 <_svfprintf_r+0x4a4>
    8038:	9b08      	ldr	r3, [sp, #32]
    803a:	f048 0202 	orr.w	r2, r8, #2
    803e:	9202      	str	r2, [sp, #8]
    8040:	f853 2b04 	ldr.w	r2, [r3], #4
    8044:	9308      	str	r3, [sp, #32]
    8046:	f647 0330 	movw	r3, #30768	; 0x7830
    804a:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    804e:	2078      	movs	r0, #120	; 0x78
    8050:	4b45      	ldr	r3, [pc, #276]	; (8168 <_svfprintf_r+0x658>)
    8052:	9311      	str	r3, [sp, #68]	; 0x44
    8054:	2100      	movs	r1, #0
    8056:	2302      	movs	r3, #2
    8058:	900b      	str	r0, [sp, #44]	; 0x2c
    805a:	2000      	movs	r0, #0
    805c:	9c03      	ldr	r4, [sp, #12]
    805e:	f88d 0067 	strb.w	r0, [sp, #103]	; 0x67
    8062:	1c60      	adds	r0, r4, #1
    8064:	f000 80ad 	beq.w	81c2 <_svfprintf_r+0x6b2>
    8068:	9802      	ldr	r0, [sp, #8]
    806a:	f020 0880 	bic.w	r8, r0, #128	; 0x80
    806e:	ea52 0001 	orrs.w	r0, r2, r1
    8072:	f040 80a4 	bne.w	81be <_svfprintf_r+0x6ae>
    8076:	2c00      	cmp	r4, #0
    8078:	f040 86ae 	bne.w	8dd8 <_svfprintf_r+0x12c8>
    807c:	2b00      	cmp	r3, #0
    807e:	d1ac      	bne.n	7fda <_svfprintf_r+0x4ca>
    8080:	9b02      	ldr	r3, [sp, #8]
    8082:	f013 0301 	ands.w	r3, r3, #1
    8086:	9305      	str	r3, [sp, #20]
    8088:	f000 83d1 	beq.w	882e <_svfprintf_r+0xd1e>
    808c:	2330      	movs	r3, #48	; 0x30
    808e:	f88d 313f 	strb.w	r3, [sp, #319]	; 0x13f
    8092:	f20d 143f 	addw	r4, sp, #319	; 0x13f
    8096:	e0ac      	b.n	81f2 <_svfprintf_r+0x6e2>
    8098:	f018 0f20 	tst.w	r8, #32
    809c:	f040 83d4 	bne.w	8848 <_svfprintf_r+0xd38>
    80a0:	f018 0f10 	tst.w	r8, #16
    80a4:	f040 869f 	bne.w	8de6 <_svfprintf_r+0x12d6>
    80a8:	f018 0f40 	tst.w	r8, #64	; 0x40
    80ac:	f040 8797 	bne.w	8fde <_svfprintf_r+0x14ce>
    80b0:	f418 7f00 	tst.w	r8, #512	; 0x200
    80b4:	f000 8697 	beq.w	8de6 <_svfprintf_r+0x12d6>
    80b8:	9b08      	ldr	r3, [sp, #32]
    80ba:	9904      	ldr	r1, [sp, #16]
    80bc:	f853 2b04 	ldr.w	r2, [r3], #4
    80c0:	9308      	str	r3, [sp, #32]
    80c2:	7011      	strb	r1, [r2, #0]
    80c4:	464c      	mov	r4, r9
    80c6:	e555      	b.n	7b74 <_svfprintf_r+0x64>
    80c8:	f899 3000 	ldrb.w	r3, [r9]
    80cc:	2b68      	cmp	r3, #104	; 0x68
    80ce:	bf03      	ittte	eq
    80d0:	f899 3001 	ldrbeq.w	r3, [r9, #1]
    80d4:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
    80d8:	f109 0901 	addeq.w	r9, r9, #1
    80dc:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
    80e0:	e572      	b.n	7bc8 <_svfprintf_r+0xb8>
    80e2:	f899 3000 	ldrb.w	r3, [r9]
    80e6:	f88d 5067 	strb.w	r5, [sp, #103]	; 0x67
    80ea:	e56d      	b.n	7bc8 <_svfprintf_r+0xb8>
    80ec:	f899 3000 	ldrb.w	r3, [r9]
    80f0:	2b6c      	cmp	r3, #108	; 0x6c
    80f2:	bf03      	ittte	eq
    80f4:	f899 3001 	ldrbeq.w	r3, [r9, #1]
    80f8:	f048 0820 	orreq.w	r8, r8, #32
    80fc:	f109 0901 	addeq.w	r9, r9, #1
    8100:	f048 0810 	orrne.w	r8, r8, #16
    8104:	e560      	b.n	7bc8 <_svfprintf_r+0xb8>
    8106:	930b      	str	r3, [sp, #44]	; 0x2c
    8108:	f048 0810 	orr.w	r8, r8, #16
    810c:	f018 0120 	ands.w	r1, r8, #32
    8110:	f000 8351 	beq.w	87b6 <_svfprintf_r+0xca6>
    8114:	9b08      	ldr	r3, [sp, #32]
    8116:	3307      	adds	r3, #7
    8118:	f023 0307 	bic.w	r3, r3, #7
    811c:	6859      	ldr	r1, [r3, #4]
    811e:	f853 2b08 	ldr.w	r2, [r3], #8
    8122:	9308      	str	r3, [sp, #32]
    8124:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
    8128:	9302      	str	r3, [sp, #8]
    812a:	2300      	movs	r3, #0
    812c:	e795      	b.n	805a <_svfprintf_r+0x54a>
    812e:	930b      	str	r3, [sp, #44]	; 0x2c
    8130:	f048 0310 	orr.w	r3, r8, #16
    8134:	9302      	str	r3, [sp, #8]
    8136:	9b02      	ldr	r3, [sp, #8]
    8138:	f013 0120 	ands.w	r1, r3, #32
    813c:	f000 8329 	beq.w	8792 <_svfprintf_r+0xc82>
    8140:	9b08      	ldr	r3, [sp, #32]
    8142:	3307      	adds	r3, #7
    8144:	f023 0307 	bic.w	r3, r3, #7
    8148:	6859      	ldr	r1, [r3, #4]
    814a:	f853 2b08 	ldr.w	r2, [r3], #8
    814e:	9308      	str	r3, [sp, #32]
    8150:	2301      	movs	r3, #1
    8152:	e782      	b.n	805a <_svfprintf_r+0x54a>
    8154:	f899 3000 	ldrb.w	r3, [r9]
    8158:	f048 0880 	orr.w	r8, r8, #128	; 0x80
    815c:	e534      	b.n	7bc8 <_svfprintf_r+0xb8>
    815e:	bf00      	nop
    8160:	200008d4 	.word	0x200008d4
    8164:	200008d8 	.word	0x200008d8
    8168:	200008e4 	.word	0x200008e4
    816c:	4649      	mov	r1, r9
    816e:	f811 3b01 	ldrb.w	r3, [r1], #1
    8172:	2b2a      	cmp	r3, #42	; 0x2a
    8174:	f001 8249 	beq.w	960a <_svfprintf_r+0x1afa>
    8178:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    817c:	2a09      	cmp	r2, #9
    817e:	4689      	mov	r9, r1
    8180:	bf98      	it	ls
    8182:	2100      	movls	r1, #0
    8184:	f201 8144 	bhi.w	9410 <_svfprintf_r+0x1900>
    8188:	f819 3b01 	ldrb.w	r3, [r9], #1
    818c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    8190:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    8194:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    8198:	2a09      	cmp	r2, #9
    819a:	d9f5      	bls.n	8188 <_svfprintf_r+0x678>
    819c:	9103      	str	r1, [sp, #12]
    819e:	e515      	b.n	7bcc <_svfprintf_r+0xbc>
    81a0:	f899 3000 	ldrb.w	r3, [r9]
    81a4:	f048 0801 	orr.w	r8, r8, #1
    81a8:	e50e      	b.n	7bc8 <_svfprintf_r+0xb8>
    81aa:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
    81ae:	2b00      	cmp	r3, #0
    81b0:	f47f ad8f 	bne.w	7cd2 <_svfprintf_r+0x1c2>
    81b4:	f899 3000 	ldrb.w	r3, [r9]
    81b8:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
    81bc:	e504      	b.n	7bc8 <_svfprintf_r+0xb8>
    81be:	f8cd 8008 	str.w	r8, [sp, #8]
    81c2:	2b01      	cmp	r3, #1
    81c4:	f000 819d 	beq.w	8502 <_svfprintf_r+0x9f2>
    81c8:	2b02      	cmp	r3, #2
    81ca:	ac50      	add	r4, sp, #320	; 0x140
    81cc:	d120      	bne.n	8210 <_svfprintf_r+0x700>
    81ce:	9811      	ldr	r0, [sp, #68]	; 0x44
    81d0:	f002 030f 	and.w	r3, r2, #15
    81d4:	0912      	lsrs	r2, r2, #4
    81d6:	5cc3      	ldrb	r3, [r0, r3]
    81d8:	f804 3d01 	strb.w	r3, [r4, #-1]!
    81dc:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    81e0:	0909      	lsrs	r1, r1, #4
    81e2:	ea52 0301 	orrs.w	r3, r2, r1
    81e6:	d1f3      	bne.n	81d0 <_svfprintf_r+0x6c0>
    81e8:	ab50      	add	r3, sp, #320	; 0x140
    81ea:	1b1b      	subs	r3, r3, r4
    81ec:	f8dd 8008 	ldr.w	r8, [sp, #8]
    81f0:	9305      	str	r3, [sp, #20]
    81f2:	9a05      	ldr	r2, [sp, #20]
    81f4:	9803      	ldr	r0, [sp, #12]
    81f6:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    81fa:	4282      	cmp	r2, r0
    81fc:	f04f 0300 	mov.w	r3, #0
    8200:	bfb8      	it	lt
    8202:	4602      	movlt	r2, r0
    8204:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    8208:	9307      	str	r3, [sp, #28]
    820a:	9202      	str	r2, [sp, #8]
    820c:	930f      	str	r3, [sp, #60]	; 0x3c
    820e:	e660      	b.n	7ed2 <_svfprintf_r+0x3c2>
    8210:	f002 0307 	and.w	r3, r2, #7
    8214:	08d2      	lsrs	r2, r2, #3
    8216:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    821a:	08c9      	lsrs	r1, r1, #3
    821c:	3330      	adds	r3, #48	; 0x30
    821e:	ea52 0501 	orrs.w	r5, r2, r1
    8222:	4620      	mov	r0, r4
    8224:	f804 3d01 	strb.w	r3, [r4, #-1]!
    8228:	d1f2      	bne.n	8210 <_svfprintf_r+0x700>
    822a:	9a02      	ldr	r2, [sp, #8]
    822c:	07d1      	lsls	r1, r2, #31
    822e:	f100 824d 	bmi.w	86cc <_svfprintf_r+0xbbc>
    8232:	ab50      	add	r3, sp, #320	; 0x140
    8234:	1b1b      	subs	r3, r3, r4
    8236:	4690      	mov	r8, r2
    8238:	9305      	str	r3, [sp, #20]
    823a:	e7da      	b.n	81f2 <_svfprintf_r+0x6e2>
    823c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    823e:	2b65      	cmp	r3, #101	; 0x65
    8240:	f340 80d4 	ble.w	83ec <_svfprintf_r+0x8dc>
    8244:	eeb5 8b40 	vcmp.f64	d8, #0.0
    8248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    824c:	f040 81c1 	bne.w	85d2 <_svfprintf_r+0xac2>
    8250:	9b25      	ldr	r3, [sp, #148]	; 0x94
    8252:	49ba      	ldr	r1, [pc, #744]	; (853c <_svfprintf_r+0xa2c>)
    8254:	f8ca 1000 	str.w	r1, [sl]
    8258:	3301      	adds	r3, #1
    825a:	3201      	adds	r2, #1
    825c:	2101      	movs	r1, #1
    825e:	2b07      	cmp	r3, #7
    8260:	9226      	str	r2, [sp, #152]	; 0x98
    8262:	9325      	str	r3, [sp, #148]	; 0x94
    8264:	f8ca 1004 	str.w	r1, [sl, #4]
    8268:	f300 8551 	bgt.w	8d0e <_svfprintf_r+0x11fe>
    826c:	f10a 0a08 	add.w	sl, sl, #8
    8270:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    8272:	990e      	ldr	r1, [sp, #56]	; 0x38
    8274:	428b      	cmp	r3, r1
    8276:	f280 82d0 	bge.w	881a <_svfprintf_r+0xd0a>
    827a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    827c:	9912      	ldr	r1, [sp, #72]	; 0x48
    827e:	441a      	add	r2, r3
    8280:	e9ca 1300 	strd	r1, r3, [sl]
    8284:	9b25      	ldr	r3, [sp, #148]	; 0x94
    8286:	9226      	str	r2, [sp, #152]	; 0x98
    8288:	3301      	adds	r3, #1
    828a:	2b07      	cmp	r3, #7
    828c:	9325      	str	r3, [sp, #148]	; 0x94
    828e:	f300 8397 	bgt.w	89c0 <_svfprintf_r+0xeb0>
    8292:	f10a 0a08 	add.w	sl, sl, #8
    8296:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8298:	1e5c      	subs	r4, r3, #1
    829a:	2c00      	cmp	r4, #0
    829c:	f77f add0 	ble.w	7e40 <_svfprintf_r+0x330>
    82a0:	2c10      	cmp	r4, #16
    82a2:	9b25      	ldr	r3, [sp, #148]	; 0x94
    82a4:	f340 856e 	ble.w	8d84 <_svfprintf_r+0x1274>
    82a8:	ee1b 6a10 	vmov	r6, s22
    82ac:	2510      	movs	r5, #16
    82ae:	e005      	b.n	82bc <_svfprintf_r+0x7ac>
    82b0:	f10a 0a08 	add.w	sl, sl, #8
    82b4:	3c10      	subs	r4, #16
    82b6:	2c10      	cmp	r4, #16
    82b8:	f340 8564 	ble.w	8d84 <_svfprintf_r+0x1274>
    82bc:	3301      	adds	r3, #1
    82be:	49a0      	ldr	r1, [pc, #640]	; (8540 <_svfprintf_r+0xa30>)
    82c0:	3210      	adds	r2, #16
    82c2:	2b07      	cmp	r3, #7
    82c4:	e9ca 1500 	strd	r1, r5, [sl]
    82c8:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    82cc:	ddf0      	ble.n	82b0 <_svfprintf_r+0x7a0>
    82ce:	aa24      	add	r2, sp, #144	; 0x90
    82d0:	4631      	mov	r1, r6
    82d2:	4658      	mov	r0, fp
    82d4:	f004 fb1c 	bl	c910 <__ssprint_r>
    82d8:	2800      	cmp	r0, #0
    82da:	d17e      	bne.n	83da <_svfprintf_r+0x8ca>
    82dc:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    82e0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    82e4:	e7e6      	b.n	82b4 <_svfprintf_r+0x7a4>
    82e6:	9b06      	ldr	r3, [sp, #24]
    82e8:	9902      	ldr	r1, [sp, #8]
    82ea:	1a5d      	subs	r5, r3, r1
    82ec:	2d00      	cmp	r5, #0
    82ee:	f77f ad8e 	ble.w	7e0e <_svfprintf_r+0x2fe>
    82f2:	2d10      	cmp	r5, #16
    82f4:	9b25      	ldr	r3, [sp, #148]	; 0x94
    82f6:	dd21      	ble.n	833c <_svfprintf_r+0x82c>
    82f8:	9409      	str	r4, [sp, #36]	; 0x24
    82fa:	2610      	movs	r6, #16
    82fc:	ee1b 4a10 	vmov	r4, s22
    8300:	e004      	b.n	830c <_svfprintf_r+0x7fc>
    8302:	3d10      	subs	r5, #16
    8304:	2d10      	cmp	r5, #16
    8306:	f10a 0a08 	add.w	sl, sl, #8
    830a:	dd16      	ble.n	833a <_svfprintf_r+0x82a>
    830c:	3301      	adds	r3, #1
    830e:	498c      	ldr	r1, [pc, #560]	; (8540 <_svfprintf_r+0xa30>)
    8310:	3210      	adds	r2, #16
    8312:	2b07      	cmp	r3, #7
    8314:	e9ca 1600 	strd	r1, r6, [sl]
    8318:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    831c:	ddf1      	ble.n	8302 <_svfprintf_r+0x7f2>
    831e:	aa24      	add	r2, sp, #144	; 0x90
    8320:	4621      	mov	r1, r4
    8322:	4658      	mov	r0, fp
    8324:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    8328:	f004 faf2 	bl	c910 <__ssprint_r>
    832c:	2800      	cmp	r0, #0
    832e:	d154      	bne.n	83da <_svfprintf_r+0x8ca>
    8330:	3d10      	subs	r5, #16
    8332:	2d10      	cmp	r5, #16
    8334:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    8338:	dce8      	bgt.n	830c <_svfprintf_r+0x7fc>
    833a:	9c09      	ldr	r4, [sp, #36]	; 0x24
    833c:	4980      	ldr	r1, [pc, #512]	; (8540 <_svfprintf_r+0xa30>)
    833e:	f8ca 5004 	str.w	r5, [sl, #4]
    8342:	3301      	adds	r3, #1
    8344:	442a      	add	r2, r5
    8346:	2b07      	cmp	r3, #7
    8348:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    834c:	f8ca 1000 	str.w	r1, [sl]
    8350:	f300 8526 	bgt.w	8da0 <_svfprintf_r+0x1290>
    8354:	9b03      	ldr	r3, [sp, #12]
    8356:	9905      	ldr	r1, [sp, #20]
    8358:	1a5d      	subs	r5, r3, r1
    835a:	2d00      	cmp	r5, #0
    835c:	f10a 0a08 	add.w	sl, sl, #8
    8360:	f77f ad5b 	ble.w	7e1a <_svfprintf_r+0x30a>
    8364:	2d10      	cmp	r5, #16
    8366:	9b25      	ldr	r3, [sp, #148]	; 0x94
    8368:	dd1f      	ble.n	83aa <_svfprintf_r+0x89a>
    836a:	4651      	mov	r1, sl
    836c:	2610      	movs	r6, #16
    836e:	ee1b aa10 	vmov	sl, s22
    8372:	e004      	b.n	837e <_svfprintf_r+0x86e>
    8374:	3d10      	subs	r5, #16
    8376:	2d10      	cmp	r5, #16
    8378:	f101 0108 	add.w	r1, r1, #8
    837c:	dd14      	ble.n	83a8 <_svfprintf_r+0x898>
    837e:	3301      	adds	r3, #1
    8380:	486f      	ldr	r0, [pc, #444]	; (8540 <_svfprintf_r+0xa30>)
    8382:	3210      	adds	r2, #16
    8384:	2b07      	cmp	r3, #7
    8386:	e9c1 0600 	strd	r0, r6, [r1]
    838a:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    838e:	ddf1      	ble.n	8374 <_svfprintf_r+0x864>
    8390:	aa24      	add	r2, sp, #144	; 0x90
    8392:	4651      	mov	r1, sl
    8394:	4658      	mov	r0, fp
    8396:	f004 fabb 	bl	c910 <__ssprint_r>
    839a:	b9f0      	cbnz	r0, 83da <_svfprintf_r+0x8ca>
    839c:	3d10      	subs	r5, #16
    839e:	2d10      	cmp	r5, #16
    83a0:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    83a4:	a927      	add	r1, sp, #156	; 0x9c
    83a6:	dcea      	bgt.n	837e <_svfprintf_r+0x86e>
    83a8:	468a      	mov	sl, r1
    83aa:	3301      	adds	r3, #1
    83ac:	4964      	ldr	r1, [pc, #400]	; (8540 <_svfprintf_r+0xa30>)
    83ae:	f8ca 5004 	str.w	r5, [sl, #4]
    83b2:	442a      	add	r2, r5
    83b4:	2b07      	cmp	r3, #7
    83b6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    83ba:	f8ca 1000 	str.w	r1, [sl]
    83be:	f300 81da 	bgt.w	8776 <_svfprintf_r+0xc66>
    83c2:	f10a 0a08 	add.w	sl, sl, #8
    83c6:	e528      	b.n	7e1a <_svfprintf_r+0x30a>
    83c8:	ee1b 1a10 	vmov	r1, s22
    83cc:	aa24      	add	r2, sp, #144	; 0x90
    83ce:	4658      	mov	r0, fp
    83d0:	f004 fa9e 	bl	c910 <__ssprint_r>
    83d4:	2800      	cmp	r0, #0
    83d6:	f43f ad47 	beq.w	7e68 <_svfprintf_r+0x358>
    83da:	9b07      	ldr	r3, [sp, #28]
    83dc:	2b00      	cmp	r3, #0
    83de:	f43f aca2 	beq.w	7d26 <_svfprintf_r+0x216>
    83e2:	9907      	ldr	r1, [sp, #28]
    83e4:	4658      	mov	r0, fp
    83e6:	f7fe f91d 	bl	6624 <_free_r>
    83ea:	e49c      	b.n	7d26 <_svfprintf_r+0x216>
    83ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    83ee:	2b01      	cmp	r3, #1
    83f0:	f340 817a 	ble.w	86e8 <_svfprintf_r+0xbd8>
    83f4:	9b25      	ldr	r3, [sp, #148]	; 0x94
    83f6:	f8ca 4000 	str.w	r4, [sl]
    83fa:	3301      	adds	r3, #1
    83fc:	3201      	adds	r2, #1
    83fe:	2101      	movs	r1, #1
    8400:	2b07      	cmp	r3, #7
    8402:	9226      	str	r2, [sp, #152]	; 0x98
    8404:	9325      	str	r3, [sp, #148]	; 0x94
    8406:	f8ca 1004 	str.w	r1, [sl, #4]
    840a:	f300 81f8 	bgt.w	87fe <_svfprintf_r+0xcee>
    840e:	f10a 0a08 	add.w	sl, sl, #8
    8412:	9910      	ldr	r1, [sp, #64]	; 0x40
    8414:	9812      	ldr	r0, [sp, #72]	; 0x48
    8416:	3301      	adds	r3, #1
    8418:	440a      	add	r2, r1
    841a:	2b07      	cmp	r3, #7
    841c:	e9ca 0100 	strd	r0, r1, [sl]
    8420:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    8424:	f300 81dd 	bgt.w	87e2 <_svfprintf_r+0xcd2>
    8428:	f10a 0a08 	add.w	sl, sl, #8
    842c:	eeb5 8b40 	vcmp.f64	d8, #0.0
    8430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8434:	f000 8177 	beq.w	8726 <_svfprintf_r+0xc16>
    8438:	990e      	ldr	r1, [sp, #56]	; 0x38
    843a:	3301      	adds	r3, #1
    843c:	3901      	subs	r1, #1
    843e:	3401      	adds	r4, #1
    8440:	440a      	add	r2, r1
    8442:	2b07      	cmp	r3, #7
    8444:	f8ca 4000 	str.w	r4, [sl]
    8448:	9325      	str	r3, [sp, #148]	; 0x94
    844a:	f8ca 1004 	str.w	r1, [sl, #4]
    844e:	9226      	str	r2, [sp, #152]	; 0x98
    8450:	f300 815b 	bgt.w	870a <_svfprintf_r+0xbfa>
    8454:	f10a 0a08 	add.w	sl, sl, #8
    8458:	9914      	ldr	r1, [sp, #80]	; 0x50
    845a:	f8ca 1004 	str.w	r1, [sl, #4]
    845e:	3301      	adds	r3, #1
    8460:	440a      	add	r2, r1
    8462:	2b07      	cmp	r3, #7
    8464:	a91e      	add	r1, sp, #120	; 0x78
    8466:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    846a:	f8ca 1000 	str.w	r1, [sl]
    846e:	f77f ace5 	ble.w	7e3c <_svfprintf_r+0x32c>
    8472:	ee1b 1a10 	vmov	r1, s22
    8476:	aa24      	add	r2, sp, #144	; 0x90
    8478:	4658      	mov	r0, fp
    847a:	f004 fa49 	bl	c910 <__ssprint_r>
    847e:	2800      	cmp	r0, #0
    8480:	d1ab      	bne.n	83da <_svfprintf_r+0x8ca>
    8482:	9a26      	ldr	r2, [sp, #152]	; 0x98
    8484:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    8488:	e4da      	b.n	7e40 <_svfprintf_r+0x330>
    848a:	2d10      	cmp	r5, #16
    848c:	e9dd 1225 	ldrd	r1, r2, [sp, #148]	; 0x94
    8490:	4e2c      	ldr	r6, [pc, #176]	; (8544 <_svfprintf_r+0xa34>)
    8492:	dd24      	ble.n	84de <_svfprintf_r+0x9ce>
    8494:	9417      	str	r4, [sp, #92]	; 0x5c
    8496:	2310      	movs	r3, #16
    8498:	ee1b 4a10 	vmov	r4, s22
    849c:	4608      	mov	r0, r1
    849e:	e004      	b.n	84aa <_svfprintf_r+0x99a>
    84a0:	3d10      	subs	r5, #16
    84a2:	2d10      	cmp	r5, #16
    84a4:	f10a 0a08 	add.w	sl, sl, #8
    84a8:	dd17      	ble.n	84da <_svfprintf_r+0x9ca>
    84aa:	3001      	adds	r0, #1
    84ac:	3210      	adds	r2, #16
    84ae:	2807      	cmp	r0, #7
    84b0:	e9ca 6300 	strd	r6, r3, [sl]
    84b4:	e9cd 0225 	strd	r0, r2, [sp, #148]	; 0x94
    84b8:	ddf2      	ble.n	84a0 <_svfprintf_r+0x990>
    84ba:	aa24      	add	r2, sp, #144	; 0x90
    84bc:	4621      	mov	r1, r4
    84be:	4658      	mov	r0, fp
    84c0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    84c4:	f004 fa24 	bl	c910 <__ssprint_r>
    84c8:	2800      	cmp	r0, #0
    84ca:	d186      	bne.n	83da <_svfprintf_r+0x8ca>
    84cc:	3d10      	subs	r5, #16
    84ce:	2d10      	cmp	r5, #16
    84d0:	e9dd 0225 	ldrd	r0, r2, [sp, #148]	; 0x94
    84d4:	f04f 0310 	mov.w	r3, #16
    84d8:	dce7      	bgt.n	84aa <_svfprintf_r+0x99a>
    84da:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    84dc:	4601      	mov	r1, r0
    84de:	3101      	adds	r1, #1
    84e0:	442a      	add	r2, r5
    84e2:	2907      	cmp	r1, #7
    84e4:	e9cd 1225 	strd	r1, r2, [sp, #148]	; 0x94
    84e8:	f8ca 6000 	str.w	r6, [sl]
    84ec:	f8ca 5004 	str.w	r5, [sl, #4]
    84f0:	f300 83bd 	bgt.w	8c6e <_svfprintf_r+0x115e>
    84f4:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    84f8:	f10a 0a08 	add.w	sl, sl, #8
    84fc:	e45d      	b.n	7dba <_svfprintf_r+0x2aa>
    84fe:	f8cd 8008 	str.w	r8, [sp, #8]
    8502:	2a0a      	cmp	r2, #10
    8504:	f171 0300 	sbcs.w	r3, r1, #0
    8508:	f080 8345 	bcs.w	8b96 <_svfprintf_r+0x1086>
    850c:	3230      	adds	r2, #48	; 0x30
    850e:	2301      	movs	r3, #1
    8510:	f8dd 8008 	ldr.w	r8, [sp, #8]
    8514:	f88d 213f 	strb.w	r2, [sp, #319]	; 0x13f
    8518:	9305      	str	r3, [sp, #20]
    851a:	f20d 143f 	addw	r4, sp, #319	; 0x13f
    851e:	e668      	b.n	81f2 <_svfprintf_r+0x6e2>
    8520:	ee1b 1a10 	vmov	r1, s22
    8524:	aa24      	add	r2, sp, #144	; 0x90
    8526:	4658      	mov	r0, fp
    8528:	f004 f9f2 	bl	c910 <__ssprint_r>
    852c:	2800      	cmp	r0, #0
    852e:	f47f af54 	bne.w	83da <_svfprintf_r+0x8ca>
    8532:	9a26      	ldr	r2, [sp, #152]	; 0x98
    8534:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    8538:	e452      	b.n	7de0 <_svfprintf_r+0x2d0>
    853a:	bf00      	nop
    853c:	20000914 	.word	0x20000914
    8540:	20007a14 	.word	0x20007a14
    8544:	20002390 	.word	0x20002390
    8548:	ee1b 1a10 	vmov	r1, s22
    854c:	aa24      	add	r2, sp, #144	; 0x90
    854e:	4658      	mov	r0, fp
    8550:	f004 f9de 	bl	c910 <__ssprint_r>
    8554:	2800      	cmp	r0, #0
    8556:	f47f af40 	bne.w	83da <_svfprintf_r+0x8ca>
    855a:	9a26      	ldr	r2, [sp, #152]	; 0x98
    855c:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    8560:	e451      	b.n	7e06 <_svfprintf_r+0x2f6>
    8562:	2c10      	cmp	r4, #16
    8564:	9b25      	ldr	r3, [sp, #148]	; 0x94
    8566:	4ebe      	ldr	r6, [pc, #760]	; (8860 <_svfprintf_r+0xd50>)
    8568:	dd1f      	ble.n	85aa <_svfprintf_r+0xa9a>
    856a:	ee1b 8a10 	vmov	r8, s22
    856e:	2510      	movs	r5, #16
    8570:	e004      	b.n	857c <_svfprintf_r+0xa6c>
    8572:	3c10      	subs	r4, #16
    8574:	2c10      	cmp	r4, #16
    8576:	f10a 0a08 	add.w	sl, sl, #8
    857a:	dd16      	ble.n	85aa <_svfprintf_r+0xa9a>
    857c:	3301      	adds	r3, #1
    857e:	3210      	adds	r2, #16
    8580:	2b07      	cmp	r3, #7
    8582:	e9ca 6500 	strd	r6, r5, [sl]
    8586:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    858a:	ddf2      	ble.n	8572 <_svfprintf_r+0xa62>
    858c:	aa24      	add	r2, sp, #144	; 0x90
    858e:	4641      	mov	r1, r8
    8590:	4658      	mov	r0, fp
    8592:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    8596:	f004 f9bb 	bl	c910 <__ssprint_r>
    859a:	2800      	cmp	r0, #0
    859c:	f47f af1d 	bne.w	83da <_svfprintf_r+0x8ca>
    85a0:	3c10      	subs	r4, #16
    85a2:	2c10      	cmp	r4, #16
    85a4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    85a8:	dce8      	bgt.n	857c <_svfprintf_r+0xa6c>
    85aa:	3301      	adds	r3, #1
    85ac:	4422      	add	r2, r4
    85ae:	2b07      	cmp	r3, #7
    85b0:	e9ca 6400 	strd	r6, r4, [sl]
    85b4:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    85b8:	f77f ac4b 	ble.w	7e52 <_svfprintf_r+0x342>
    85bc:	ee1b 1a10 	vmov	r1, s22
    85c0:	aa24      	add	r2, sp, #144	; 0x90
    85c2:	4658      	mov	r0, fp
    85c4:	f004 f9a4 	bl	c910 <__ssprint_r>
    85c8:	2800      	cmp	r0, #0
    85ca:	f47f af06 	bne.w	83da <_svfprintf_r+0x8ca>
    85ce:	9a26      	ldr	r2, [sp, #152]	; 0x98
    85d0:	e43f      	b.n	7e52 <_svfprintf_r+0x342>
    85d2:	991b      	ldr	r1, [sp, #108]	; 0x6c
    85d4:	2900      	cmp	r1, #0
    85d6:	f340 835a 	ble.w	8c8e <_svfprintf_r+0x117e>
    85da:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    85dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    85de:	429e      	cmp	r6, r3
    85e0:	bfa8      	it	ge
    85e2:	461e      	movge	r6, r3
    85e4:	2e00      	cmp	r6, #0
    85e6:	dd0b      	ble.n	8600 <_svfprintf_r+0xaf0>
    85e8:	9b25      	ldr	r3, [sp, #148]	; 0x94
    85ea:	3301      	adds	r3, #1
    85ec:	4432      	add	r2, r6
    85ee:	2b07      	cmp	r3, #7
    85f0:	e9ca 4600 	strd	r4, r6, [sl]
    85f4:	9226      	str	r2, [sp, #152]	; 0x98
    85f6:	9325      	str	r3, [sp, #148]	; 0x94
    85f8:	f300 8689 	bgt.w	930e <_svfprintf_r+0x17fe>
    85fc:	f10a 0a08 	add.w	sl, sl, #8
    8600:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    8602:	2e00      	cmp	r6, #0
    8604:	bfa8      	it	ge
    8606:	1bad      	subge	r5, r5, r6
    8608:	2d00      	cmp	r5, #0
    860a:	f300 8203 	bgt.w	8a14 <_svfprintf_r+0xf04>
    860e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8610:	f418 6f80 	tst.w	r8, #1024	; 0x400
    8614:	4423      	add	r3, r4
    8616:	9305      	str	r3, [sp, #20]
    8618:	f040 821f 	bne.w	8a5a <_svfprintf_r+0xf4a>
    861c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    861e:	990e      	ldr	r1, [sp, #56]	; 0x38
    8620:	428b      	cmp	r3, r1
    8622:	db03      	blt.n	862c <_svfprintf_r+0xb1c>
    8624:	f018 0f01 	tst.w	r8, #1
    8628:	f000 84cf 	beq.w	8fca <_svfprintf_r+0x14ba>
    862c:	9910      	ldr	r1, [sp, #64]	; 0x40
    862e:	9812      	ldr	r0, [sp, #72]	; 0x48
    8630:	440a      	add	r2, r1
    8632:	e9ca 0100 	strd	r0, r1, [sl]
    8636:	9925      	ldr	r1, [sp, #148]	; 0x94
    8638:	9226      	str	r2, [sp, #152]	; 0x98
    863a:	3101      	adds	r1, #1
    863c:	2907      	cmp	r1, #7
    863e:	9125      	str	r1, [sp, #148]	; 0x94
    8640:	f300 86a5 	bgt.w	938e <_svfprintf_r+0x187e>
    8644:	f10a 0a08 	add.w	sl, sl, #8
    8648:	990e      	ldr	r1, [sp, #56]	; 0x38
    864a:	1865      	adds	r5, r4, r1
    864c:	1acc      	subs	r4, r1, r3
    864e:	9b05      	ldr	r3, [sp, #20]
    8650:	1aed      	subs	r5, r5, r3
    8652:	42a5      	cmp	r5, r4
    8654:	bfa8      	it	ge
    8656:	4625      	movge	r5, r4
    8658:	2d00      	cmp	r5, #0
    865a:	dd0d      	ble.n	8678 <_svfprintf_r+0xb68>
    865c:	f8ca 3000 	str.w	r3, [sl]
    8660:	9b25      	ldr	r3, [sp, #148]	; 0x94
    8662:	f8ca 5004 	str.w	r5, [sl, #4]
    8666:	3301      	adds	r3, #1
    8668:	442a      	add	r2, r5
    866a:	2b07      	cmp	r3, #7
    866c:	9226      	str	r2, [sp, #152]	; 0x98
    866e:	9325      	str	r3, [sp, #148]	; 0x94
    8670:	f300 86bb 	bgt.w	93ea <_svfprintf_r+0x18da>
    8674:	f10a 0a08 	add.w	sl, sl, #8
    8678:	2d00      	cmp	r5, #0
    867a:	bfa8      	it	ge
    867c:	1b64      	subge	r4, r4, r5
    867e:	2c00      	cmp	r4, #0
    8680:	f77f abde 	ble.w	7e40 <_svfprintf_r+0x330>
    8684:	2c10      	cmp	r4, #16
    8686:	9b25      	ldr	r3, [sp, #148]	; 0x94
    8688:	f340 837c 	ble.w	8d84 <_svfprintf_r+0x1274>
    868c:	ee1b 6a10 	vmov	r6, s22
    8690:	2510      	movs	r5, #16
    8692:	e005      	b.n	86a0 <_svfprintf_r+0xb90>
    8694:	f10a 0a08 	add.w	sl, sl, #8
    8698:	3c10      	subs	r4, #16
    869a:	2c10      	cmp	r4, #16
    869c:	f340 8372 	ble.w	8d84 <_svfprintf_r+0x1274>
    86a0:	3301      	adds	r3, #1
    86a2:	4970      	ldr	r1, [pc, #448]	; (8864 <_svfprintf_r+0xd54>)
    86a4:	3210      	adds	r2, #16
    86a6:	2b07      	cmp	r3, #7
    86a8:	e9ca 1500 	strd	r1, r5, [sl]
    86ac:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    86b0:	ddf0      	ble.n	8694 <_svfprintf_r+0xb84>
    86b2:	aa24      	add	r2, sp, #144	; 0x90
    86b4:	4631      	mov	r1, r6
    86b6:	4658      	mov	r0, fp
    86b8:	f004 f92a 	bl	c910 <__ssprint_r>
    86bc:	2800      	cmp	r0, #0
    86be:	f47f ae8c 	bne.w	83da <_svfprintf_r+0x8ca>
    86c2:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    86c6:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    86ca:	e7e5      	b.n	8698 <_svfprintf_r+0xb88>
    86cc:	2b30      	cmp	r3, #48	; 0x30
    86ce:	f43f ad8b 	beq.w	81e8 <_svfprintf_r+0x6d8>
    86d2:	2330      	movs	r3, #48	; 0x30
    86d4:	3802      	subs	r0, #2
    86d6:	f804 3c01 	strb.w	r3, [r4, #-1]
    86da:	ab50      	add	r3, sp, #320	; 0x140
    86dc:	1a1b      	subs	r3, r3, r0
    86de:	f8dd 8008 	ldr.w	r8, [sp, #8]
    86e2:	9305      	str	r3, [sp, #20]
    86e4:	4604      	mov	r4, r0
    86e6:	e584      	b.n	81f2 <_svfprintf_r+0x6e2>
    86e8:	f018 0f01 	tst.w	r8, #1
    86ec:	f47f ae82 	bne.w	83f4 <_svfprintf_r+0x8e4>
    86f0:	9b25      	ldr	r3, [sp, #148]	; 0x94
    86f2:	f8ca 4000 	str.w	r4, [sl]
    86f6:	3301      	adds	r3, #1
    86f8:	3201      	adds	r2, #1
    86fa:	2101      	movs	r1, #1
    86fc:	2b07      	cmp	r3, #7
    86fe:	9226      	str	r2, [sp, #152]	; 0x98
    8700:	9325      	str	r3, [sp, #148]	; 0x94
    8702:	f8ca 1004 	str.w	r1, [sl, #4]
    8706:	f77f aea5 	ble.w	8454 <_svfprintf_r+0x944>
    870a:	ee1b 1a10 	vmov	r1, s22
    870e:	aa24      	add	r2, sp, #144	; 0x90
    8710:	4658      	mov	r0, fp
    8712:	f004 f8fd 	bl	c910 <__ssprint_r>
    8716:	2800      	cmp	r0, #0
    8718:	f47f ae5f 	bne.w	83da <_svfprintf_r+0x8ca>
    871c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    8720:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    8724:	e698      	b.n	8458 <_svfprintf_r+0x948>
    8726:	990e      	ldr	r1, [sp, #56]	; 0x38
    8728:	1e4c      	subs	r4, r1, #1
    872a:	2c00      	cmp	r4, #0
    872c:	f77f ae94 	ble.w	8458 <_svfprintf_r+0x948>
    8730:	2c10      	cmp	r4, #16
    8732:	f340 8361 	ble.w	8df8 <_svfprintf_r+0x12e8>
    8736:	ee1b 6a10 	vmov	r6, s22
    873a:	2510      	movs	r5, #16
    873c:	e005      	b.n	874a <_svfprintf_r+0xc3a>
    873e:	f10a 0a08 	add.w	sl, sl, #8
    8742:	3c10      	subs	r4, #16
    8744:	2c10      	cmp	r4, #16
    8746:	f340 8357 	ble.w	8df8 <_svfprintf_r+0x12e8>
    874a:	3301      	adds	r3, #1
    874c:	4945      	ldr	r1, [pc, #276]	; (8864 <_svfprintf_r+0xd54>)
    874e:	3210      	adds	r2, #16
    8750:	2b07      	cmp	r3, #7
    8752:	e9ca 1500 	strd	r1, r5, [sl]
    8756:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    875a:	ddf0      	ble.n	873e <_svfprintf_r+0xc2e>
    875c:	aa24      	add	r2, sp, #144	; 0x90
    875e:	4631      	mov	r1, r6
    8760:	4658      	mov	r0, fp
    8762:	f004 f8d5 	bl	c910 <__ssprint_r>
    8766:	2800      	cmp	r0, #0
    8768:	f47f ae37 	bne.w	83da <_svfprintf_r+0x8ca>
    876c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    8770:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    8774:	e7e5      	b.n	8742 <_svfprintf_r+0xc32>
    8776:	ee1b 1a10 	vmov	r1, s22
    877a:	aa24      	add	r2, sp, #144	; 0x90
    877c:	4658      	mov	r0, fp
    877e:	f004 f8c7 	bl	c910 <__ssprint_r>
    8782:	2800      	cmp	r0, #0
    8784:	f47f ae29 	bne.w	83da <_svfprintf_r+0x8ca>
    8788:	9a26      	ldr	r2, [sp, #152]	; 0x98
    878a:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    878e:	f7ff bb44 	b.w	7e1a <_svfprintf_r+0x30a>
    8792:	9b02      	ldr	r3, [sp, #8]
    8794:	f013 0310 	ands.w	r3, r3, #16
    8798:	f040 80c1 	bne.w	891e <_svfprintf_r+0xe0e>
    879c:	9a02      	ldr	r2, [sp, #8]
    879e:	f012 0240 	ands.w	r2, r2, #64	; 0x40
    87a2:	f000 837a 	beq.w	8e9a <_svfprintf_r+0x138a>
    87a6:	9808      	ldr	r0, [sp, #32]
    87a8:	f850 2b04 	ldr.w	r2, [r0], #4
    87ac:	9008      	str	r0, [sp, #32]
    87ae:	4619      	mov	r1, r3
    87b0:	b292      	uxth	r2, r2
    87b2:	2301      	movs	r3, #1
    87b4:	e451      	b.n	805a <_svfprintf_r+0x54a>
    87b6:	f018 0310 	ands.w	r3, r8, #16
    87ba:	d155      	bne.n	8868 <_svfprintf_r+0xd58>
    87bc:	f018 0240 	ands.w	r2, r8, #64	; 0x40
    87c0:	f000 835d 	beq.w	8e7e <_svfprintf_r+0x136e>
    87c4:	9808      	ldr	r0, [sp, #32]
    87c6:	f850 2b04 	ldr.w	r2, [r0], #4
    87ca:	9008      	str	r0, [sp, #32]
    87cc:	4619      	mov	r1, r3
    87ce:	b292      	uxth	r2, r2
    87d0:	e4a8      	b.n	8124 <_svfprintf_r+0x614>
    87d2:	4252      	negs	r2, r2
    87d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    87d8:	f8cd 8008 	str.w	r8, [sp, #8]
    87dc:	202d      	movs	r0, #45	; 0x2d
    87de:	2301      	movs	r3, #1
    87e0:	e43c      	b.n	805c <_svfprintf_r+0x54c>
    87e2:	ee1b 1a10 	vmov	r1, s22
    87e6:	aa24      	add	r2, sp, #144	; 0x90
    87e8:	4658      	mov	r0, fp
    87ea:	f004 f891 	bl	c910 <__ssprint_r>
    87ee:	2800      	cmp	r0, #0
    87f0:	f47f adf3 	bne.w	83da <_svfprintf_r+0x8ca>
    87f4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    87f8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    87fc:	e616      	b.n	842c <_svfprintf_r+0x91c>
    87fe:	ee1b 1a10 	vmov	r1, s22
    8802:	aa24      	add	r2, sp, #144	; 0x90
    8804:	4658      	mov	r0, fp
    8806:	f004 f883 	bl	c910 <__ssprint_r>
    880a:	2800      	cmp	r0, #0
    880c:	f47f ade5 	bne.w	83da <_svfprintf_r+0x8ca>
    8810:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    8814:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    8818:	e5fb      	b.n	8412 <_svfprintf_r+0x902>
    881a:	f018 0f01 	tst.w	r8, #1
    881e:	f43f ab0f 	beq.w	7e40 <_svfprintf_r+0x330>
    8822:	e52a      	b.n	827a <_svfprintf_r+0x76a>
    8824:	9308      	str	r3, [sp, #32]
    8826:	f899 3000 	ldrb.w	r3, [r9]
    882a:	f7ff b9cd 	b.w	7bc8 <_svfprintf_r+0xb8>
    882e:	ac50      	add	r4, sp, #320	; 0x140
    8830:	e4df      	b.n	81f2 <_svfprintf_r+0x6e2>
    8832:	f418 7f00 	tst.w	r8, #512	; 0x200
    8836:	f040 83db 	bne.w	8ff0 <_svfprintf_r+0x14e0>
    883a:	f853 2b04 	ldr.w	r2, [r3], #4
    883e:	9308      	str	r3, [sp, #32]
    8840:	17d1      	asrs	r1, r2, #31
    8842:	460b      	mov	r3, r1
    8844:	f7ff bbb6 	b.w	7fb4 <_svfprintf_r+0x4a4>
    8848:	9b08      	ldr	r3, [sp, #32]
    884a:	9804      	ldr	r0, [sp, #16]
    884c:	f853 1b04 	ldr.w	r1, [r3], #4
    8850:	9308      	str	r3, [sp, #32]
    8852:	17c2      	asrs	r2, r0, #31
    8854:	e9c1 0200 	strd	r0, r2, [r1]
    8858:	464c      	mov	r4, r9
    885a:	f7ff b98b 	b.w	7b74 <_svfprintf_r+0x64>
    885e:	bf00      	nop
    8860:	20002390 	.word	0x20002390
    8864:	20007a14 	.word	0x20007a14
    8868:	9b08      	ldr	r3, [sp, #32]
    886a:	f853 2b04 	ldr.w	r2, [r3], #4
    886e:	9308      	str	r3, [sp, #32]
    8870:	e458      	b.n	8124 <_svfprintf_r+0x614>
    8872:	eeb4 8b48 	vcmp.f64	d8, d8
    8876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    887a:	f180 8694 	bvs.w	95a6 <_svfprintf_r+0x1a96>
    887e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8880:	2b61      	cmp	r3, #97	; 0x61
    8882:	f000 8552 	beq.w	932a <_svfprintf_r+0x181a>
    8886:	2b41      	cmp	r3, #65	; 0x41
    8888:	f000 85c0 	beq.w	940c <_svfprintf_r+0x18fc>
    888c:	9b03      	ldr	r3, [sp, #12]
    888e:	3301      	adds	r3, #1
    8890:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8892:	f023 0520 	bic.w	r5, r3, #32
    8896:	f000 8480 	beq.w	919a <_svfprintf_r+0x168a>
    889a:	2d47      	cmp	r5, #71	; 0x47
    889c:	d104      	bne.n	88a8 <_svfprintf_r+0xd98>
    889e:	9b03      	ldr	r3, [sp, #12]
    88a0:	2b00      	cmp	r3, #0
    88a2:	bf08      	it	eq
    88a4:	2301      	moveq	r3, #1
    88a6:	9303      	str	r3, [sp, #12]
    88a8:	ee18 3a90 	vmov	r3, s17
    88ac:	2b00      	cmp	r3, #0
    88ae:	f448 7280 	orr.w	r2, r8, #256	; 0x100
    88b2:	4646      	mov	r6, r8
    88b4:	f2c0 8618 	blt.w	94e8 <_svfprintf_r+0x19d8>
    88b8:	eeb0 ab48 	vmov.f64	d10, d8
    88bc:	2300      	movs	r3, #0
    88be:	4690      	mov	r8, r2
    88c0:	9309      	str	r3, [sp, #36]	; 0x24
    88c2:	9307      	str	r3, [sp, #28]
    88c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    88c6:	3b41      	subs	r3, #65	; 0x41
    88c8:	2b25      	cmp	r3, #37	; 0x25
    88ca:	f200 8398 	bhi.w	8ffe <_svfprintf_r+0x14ee>
    88ce:	e8df f013 	tbh	[pc, r3, lsl #1]
    88d2:	046f      	.short	0x046f
    88d4:	03960396 	.word	0x03960396
    88d8:	04680396 	.word	0x04680396
    88dc:	0396046c 	.word	0x0396046c
    88e0:	03960396 	.word	0x03960396
    88e4:	03960396 	.word	0x03960396
    88e8:	03960396 	.word	0x03960396
    88ec:	03960396 	.word	0x03960396
    88f0:	03960396 	.word	0x03960396
    88f4:	03960396 	.word	0x03960396
    88f8:	03960396 	.word	0x03960396
    88fc:	03960396 	.word	0x03960396
    8900:	03960396 	.word	0x03960396
    8904:	03960396 	.word	0x03960396
    8908:	03960396 	.word	0x03960396
    890c:	03960396 	.word	0x03960396
    8910:	03960396 	.word	0x03960396
    8914:	03960396 	.word	0x03960396
    8918:	04680396 	.word	0x04680396
    891c:	046c      	.short	0x046c
    891e:	9b08      	ldr	r3, [sp, #32]
    8920:	f853 2b04 	ldr.w	r2, [r3], #4
    8924:	9308      	str	r3, [sp, #32]
    8926:	2301      	movs	r3, #1
    8928:	f7ff bb97 	b.w	805a <_svfprintf_r+0x54a>
    892c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    892e:	2b00      	cmp	r3, #0
    8930:	f43f a9cf 	beq.w	7cd2 <_svfprintf_r+0x1c2>
    8934:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    8936:	781b      	ldrb	r3, [r3, #0]
    8938:	2b00      	cmp	r3, #0
    893a:	f43f a9ca 	beq.w	7cd2 <_svfprintf_r+0x1c2>
    893e:	f899 3000 	ldrb.w	r3, [r9]
    8942:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
    8946:	f7ff b93f 	b.w	7bc8 <_svfprintf_r+0xb8>
    894a:	930b      	str	r3, [sp, #44]	; 0x2c
    894c:	f8cd 8008 	str.w	r8, [sp, #8]
    8950:	f7ff bbf1 	b.w	8136 <_svfprintf_r+0x626>
    8954:	930b      	str	r3, [sp, #44]	; 0x2c
    8956:	4b9a      	ldr	r3, [pc, #616]	; (8bc0 <_svfprintf_r+0x10b0>)
    8958:	9311      	str	r3, [sp, #68]	; 0x44
    895a:	f018 0120 	ands.w	r1, r8, #32
    895e:	f000 8105 	beq.w	8b6c <_svfprintf_r+0x105c>
    8962:	9b08      	ldr	r3, [sp, #32]
    8964:	3307      	adds	r3, #7
    8966:	f023 0307 	bic.w	r3, r3, #7
    896a:	6859      	ldr	r1, [r3, #4]
    896c:	f853 2b08 	ldr.w	r2, [r3], #8
    8970:	9308      	str	r3, [sp, #32]
    8972:	f018 0f01 	tst.w	r8, #1
    8976:	d00a      	beq.n	898e <_svfprintf_r+0xe7e>
    8978:	ea52 0301 	orrs.w	r3, r2, r1
    897c:	d007      	beq.n	898e <_svfprintf_r+0xe7e>
    897e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8980:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    8984:	2330      	movs	r3, #48	; 0x30
    8986:	f048 0802 	orr.w	r8, r8, #2
    898a:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    898e:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
    8992:	9302      	str	r3, [sp, #8]
    8994:	2302      	movs	r3, #2
    8996:	f7ff bb60 	b.w	805a <_svfprintf_r+0x54a>
    899a:	930b      	str	r3, [sp, #44]	; 0x2c
    899c:	f7ff bbb6 	b.w	810c <_svfprintf_r+0x5fc>
    89a0:	930b      	str	r3, [sp, #44]	; 0x2c
    89a2:	4b88      	ldr	r3, [pc, #544]	; (8bc4 <_svfprintf_r+0x10b4>)
    89a4:	9311      	str	r3, [sp, #68]	; 0x44
    89a6:	e7d8      	b.n	895a <_svfprintf_r+0xe4a>
    89a8:	9b08      	ldr	r3, [sp, #32]
    89aa:	2101      	movs	r1, #1
    89ac:	f853 2b04 	ldr.w	r2, [r3], #4
    89b0:	9102      	str	r1, [sp, #8]
    89b2:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
    89b6:	9308      	str	r3, [sp, #32]
    89b8:	9105      	str	r1, [sp, #20]
    89ba:	ac37      	add	r4, sp, #220	; 0xdc
    89bc:	f7ff baaf 	b.w	7f1e <_svfprintf_r+0x40e>
    89c0:	ee1b 1a10 	vmov	r1, s22
    89c4:	aa24      	add	r2, sp, #144	; 0x90
    89c6:	4658      	mov	r0, fp
    89c8:	f003 ffa2 	bl	c910 <__ssprint_r>
    89cc:	2800      	cmp	r0, #0
    89ce:	f47f ad04 	bne.w	83da <_svfprintf_r+0x8ca>
    89d2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    89d4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    89d8:	e45d      	b.n	8296 <_svfprintf_r+0x786>
    89da:	9b03      	ldr	r3, [sp, #12]
    89dc:	9407      	str	r4, [sp, #28]
    89de:	2b06      	cmp	r3, #6
    89e0:	4622      	mov	r2, r4
    89e2:	bf28      	it	cs
    89e4:	2306      	movcs	r3, #6
    89e6:	9403      	str	r4, [sp, #12]
    89e8:	4621      	mov	r1, r4
    89ea:	e9cd 220c 	strd	r2, r2, [sp, #48]	; 0x30
    89ee:	4c76      	ldr	r4, [pc, #472]	; (8bc8 <_svfprintf_r+0x10b8>)
    89f0:	9302      	str	r3, [sp, #8]
    89f2:	9305      	str	r3, [sp, #20]
    89f4:	920f      	str	r2, [sp, #60]	; 0x3c
    89f6:	f7ff ba6c 	b.w	7ed2 <_svfprintf_r+0x3c2>
    89fa:	2140      	movs	r1, #64	; 0x40
    89fc:	4658      	mov	r0, fp
    89fe:	f7fb fa33 	bl	3e68 <_malloc_r>
    8a02:	6020      	str	r0, [r4, #0]
    8a04:	6120      	str	r0, [r4, #16]
    8a06:	2800      	cmp	r0, #0
    8a08:	f000 860f 	beq.w	962a <_svfprintf_r+0x1b1a>
    8a0c:	2340      	movs	r3, #64	; 0x40
    8a0e:	6163      	str	r3, [r4, #20]
    8a10:	f7ff b89e 	b.w	7b50 <_svfprintf_r+0x40>
    8a14:	2d10      	cmp	r5, #16
    8a16:	9b25      	ldr	r3, [sp, #148]	; 0x94
    8a18:	f340 825d 	ble.w	8ed6 <_svfprintf_r+0x13c6>
    8a1c:	4651      	mov	r1, sl
    8a1e:	2610      	movs	r6, #16
    8a20:	ee1b aa10 	vmov	sl, s22
    8a24:	e004      	b.n	8a30 <_svfprintf_r+0xf20>
    8a26:	3108      	adds	r1, #8
    8a28:	3d10      	subs	r5, #16
    8a2a:	2d10      	cmp	r5, #16
    8a2c:	f340 8252 	ble.w	8ed4 <_svfprintf_r+0x13c4>
    8a30:	3301      	adds	r3, #1
    8a32:	4866      	ldr	r0, [pc, #408]	; (8bcc <_svfprintf_r+0x10bc>)
    8a34:	3210      	adds	r2, #16
    8a36:	2b07      	cmp	r3, #7
    8a38:	e9c1 0600 	strd	r0, r6, [r1]
    8a3c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    8a40:	ddf1      	ble.n	8a26 <_svfprintf_r+0xf16>
    8a42:	aa24      	add	r2, sp, #144	; 0x90
    8a44:	4651      	mov	r1, sl
    8a46:	4658      	mov	r0, fp
    8a48:	f003 ff62 	bl	c910 <__ssprint_r>
    8a4c:	2800      	cmp	r0, #0
    8a4e:	f47f acc4 	bne.w	83da <_svfprintf_r+0x8ca>
    8a52:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    8a56:	a927      	add	r1, sp, #156	; 0x9c
    8a58:	e7e6      	b.n	8a28 <_svfprintf_r+0xf18>
    8a5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8a5c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    8a60:	18e3      	adds	r3, r4, r3
    8a62:	9303      	str	r3, [sp, #12]
    8a64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8a66:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    8a6a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    8a6c:	9d05      	ldr	r5, [sp, #20]
    8a6e:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
    8a72:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
    8a76:	940b      	str	r4, [sp, #44]	; 0x2c
    8a78:	ee1b 1a10 	vmov	r1, s22
    8a7c:	4650      	mov	r0, sl
    8a7e:	2b00      	cmp	r3, #0
    8a80:	d034      	beq.n	8aec <_svfprintf_r+0xfdc>
    8a82:	f1b8 0f00 	cmp.w	r8, #0
    8a86:	d135      	bne.n	8af4 <_svfprintf_r+0xfe4>
    8a88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8a8a:	3b01      	subs	r3, #1
    8a8c:	3e01      	subs	r6, #1
    8a8e:	930d      	str	r3, [sp, #52]	; 0x34
    8a90:	9b15      	ldr	r3, [sp, #84]	; 0x54
    8a92:	e9c0 3900 	strd	r3, r9, [r0]
    8a96:	9b25      	ldr	r3, [sp, #148]	; 0x94
    8a98:	3301      	adds	r3, #1
    8a9a:	444a      	add	r2, r9
    8a9c:	2b07      	cmp	r3, #7
    8a9e:	9226      	str	r2, [sp, #152]	; 0x98
    8aa0:	9325      	str	r3, [sp, #148]	; 0x94
    8aa2:	dc6c      	bgt.n	8b7e <_svfprintf_r+0x106e>
    8aa4:	3008      	adds	r0, #8
    8aa6:	9b03      	ldr	r3, [sp, #12]
    8aa8:	f896 c000 	ldrb.w	ip, [r6]
    8aac:	1b5b      	subs	r3, r3, r5
    8aae:	4563      	cmp	r3, ip
    8ab0:	bfa8      	it	ge
    8ab2:	4663      	movge	r3, ip
    8ab4:	2b00      	cmp	r3, #0
    8ab6:	469a      	mov	sl, r3
    8ab8:	dd0c      	ble.n	8ad4 <_svfprintf_r+0xfc4>
    8aba:	9c25      	ldr	r4, [sp, #148]	; 0x94
    8abc:	3401      	adds	r4, #1
    8abe:	441a      	add	r2, r3
    8ac0:	2c07      	cmp	r4, #7
    8ac2:	e9c0 5300 	strd	r5, r3, [r0]
    8ac6:	9226      	str	r2, [sp, #152]	; 0x98
    8ac8:	9425      	str	r4, [sp, #148]	; 0x94
    8aca:	f300 8177 	bgt.w	8dbc <_svfprintf_r+0x12ac>
    8ace:	f896 c000 	ldrb.w	ip, [r6]
    8ad2:	3008      	adds	r0, #8
    8ad4:	f1ba 0f00 	cmp.w	sl, #0
    8ad8:	bfac      	ite	ge
    8ada:	ebac 040a 	subge.w	r4, ip, sl
    8ade:	4664      	movlt	r4, ip
    8ae0:	2c00      	cmp	r4, #0
    8ae2:	dc0a      	bgt.n	8afa <_svfprintf_r+0xfea>
    8ae4:	4465      	add	r5, ip
    8ae6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8ae8:	2b00      	cmp	r3, #0
    8aea:	d1ca      	bne.n	8a82 <_svfprintf_r+0xf72>
    8aec:	f1b8 0f00 	cmp.w	r8, #0
    8af0:	f000 83ac 	beq.w	924c <_svfprintf_r+0x173c>
    8af4:	f108 38ff 	add.w	r8, r8, #4294967295
    8af8:	e7ca      	b.n	8a90 <_svfprintf_r+0xf80>
    8afa:	2c10      	cmp	r4, #16
    8afc:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
    8b00:	dd24      	ble.n	8b4c <_svfprintf_r+0x103c>
    8b02:	9505      	str	r5, [sp, #20]
    8b04:	f04f 0a10 	mov.w	sl, #16
    8b08:	4663      	mov	r3, ip
    8b0a:	460d      	mov	r5, r1
    8b0c:	e004      	b.n	8b18 <_svfprintf_r+0x1008>
    8b0e:	3c10      	subs	r4, #16
    8b10:	2c10      	cmp	r4, #16
    8b12:	f100 0008 	add.w	r0, r0, #8
    8b16:	dd16      	ble.n	8b46 <_svfprintf_r+0x1036>
    8b18:	3301      	adds	r3, #1
    8b1a:	492c      	ldr	r1, [pc, #176]	; (8bcc <_svfprintf_r+0x10bc>)
    8b1c:	3210      	adds	r2, #16
    8b1e:	2b07      	cmp	r3, #7
    8b20:	e9c0 1a00 	strd	r1, sl, [r0]
    8b24:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    8b28:	ddf1      	ble.n	8b0e <_svfprintf_r+0xffe>
    8b2a:	aa24      	add	r2, sp, #144	; 0x90
    8b2c:	4629      	mov	r1, r5
    8b2e:	4658      	mov	r0, fp
    8b30:	f003 feee 	bl	c910 <__ssprint_r>
    8b34:	2800      	cmp	r0, #0
    8b36:	f47f ac50 	bne.w	83da <_svfprintf_r+0x8ca>
    8b3a:	3c10      	subs	r4, #16
    8b3c:	2c10      	cmp	r4, #16
    8b3e:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    8b42:	a827      	add	r0, sp, #156	; 0x9c
    8b44:	dce8      	bgt.n	8b18 <_svfprintf_r+0x1008>
    8b46:	4629      	mov	r1, r5
    8b48:	9d05      	ldr	r5, [sp, #20]
    8b4a:	469c      	mov	ip, r3
    8b4c:	f10c 0301 	add.w	r3, ip, #1
    8b50:	4422      	add	r2, r4
    8b52:	6044      	str	r4, [r0, #4]
    8b54:	2b07      	cmp	r3, #7
    8b56:	4c1d      	ldr	r4, [pc, #116]	; (8bcc <_svfprintf_r+0x10bc>)
    8b58:	6004      	str	r4, [r0, #0]
    8b5a:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    8b5e:	f300 83c6 	bgt.w	92ee <_svfprintf_r+0x17de>
    8b62:	f896 c000 	ldrb.w	ip, [r6]
    8b66:	3008      	adds	r0, #8
    8b68:	4465      	add	r5, ip
    8b6a:	e7bc      	b.n	8ae6 <_svfprintf_r+0xfd6>
    8b6c:	f018 0310 	ands.w	r3, r8, #16
    8b70:	f000 80c2 	beq.w	8cf8 <_svfprintf_r+0x11e8>
    8b74:	9b08      	ldr	r3, [sp, #32]
    8b76:	f853 2b04 	ldr.w	r2, [r3], #4
    8b7a:	9308      	str	r3, [sp, #32]
    8b7c:	e6f9      	b.n	8972 <_svfprintf_r+0xe62>
    8b7e:	aa24      	add	r2, sp, #144	; 0x90
    8b80:	4658      	mov	r0, fp
    8b82:	9105      	str	r1, [sp, #20]
    8b84:	f003 fec4 	bl	c910 <__ssprint_r>
    8b88:	2800      	cmp	r0, #0
    8b8a:	f47f ac26 	bne.w	83da <_svfprintf_r+0x8ca>
    8b8e:	9a26      	ldr	r2, [sp, #152]	; 0x98
    8b90:	9905      	ldr	r1, [sp, #20]
    8b92:	a827      	add	r0, sp, #156	; 0x9c
    8b94:	e787      	b.n	8aa6 <_svfprintf_r+0xf96>
    8b96:	9802      	ldr	r0, [sp, #8]
    8b98:	f8cd a01c 	str.w	sl, [sp, #28]
    8b9c:	ac50      	add	r4, sp, #320	; 0x140
    8b9e:	f400 6080 	and.w	r0, r0, #1024	; 0x400
    8ba2:	2500      	movs	r5, #0
    8ba4:	ee0a ba10 	vmov	s20, fp
    8ba8:	4b09      	ldr	r3, [pc, #36]	; (8bd0 <_svfprintf_r+0x10c0>)
    8baa:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
    8bae:	f8cd 9014 	str.w	r9, [sp, #20]
    8bb2:	46a3      	mov	fp, r4
    8bb4:	f04f 0805 	mov.w	r8, #5
    8bb8:	46ac      	mov	ip, r5
    8bba:	4604      	mov	r4, r0
    8bbc:	e010      	b.n	8be0 <_svfprintf_r+0x10d0>
    8bbe:	bf00      	nop
    8bc0:	200008e4 	.word	0x200008e4
    8bc4:	200008f8 	.word	0x200008f8
    8bc8:	2000090c 	.word	0x2000090c
    8bcc:	20007a14 	.word	0x20007a14
    8bd0:	cccccccd 	.word	0xcccccccd
    8bd4:	2a0a      	cmp	r2, #10
    8bd6:	f171 0100 	sbcs.w	r1, r1, #0
    8bda:	d336      	bcc.n	8c4a <_svfprintf_r+0x113a>
    8bdc:	464a      	mov	r2, r9
    8bde:	4631      	mov	r1, r6
    8be0:	1850      	adds	r0, r2, r1
    8be2:	f140 0000 	adc.w	r0, r0, #0
    8be6:	fba3 5600 	umull	r5, r6, r3, r0
    8bea:	f026 0503 	bic.w	r5, r6, #3
    8bee:	eb05 0596 	add.w	r5, r5, r6, lsr #2
    8bf2:	1b40      	subs	r0, r0, r5
    8bf4:	1a15      	subs	r5, r2, r0
    8bf6:	f04f 36cc 	mov.w	r6, #3435973836	; 0xcccccccc
    8bfa:	f161 0e00 	sbc.w	lr, r1, #0
    8bfe:	fb06 f605 	mul.w	r6, r6, r5
    8c02:	fba5 9503 	umull	r9, r5, r5, r3
    8c06:	fb03 660e 	mla	r6, r3, lr, r6
    8c0a:	f009 0e01 	and.w	lr, r9, #1
    8c0e:	442e      	add	r6, r5
    8c10:	fbae 5e08 	umull	r5, lr, lr, r8
    8c14:	182d      	adds	r5, r5, r0
    8c16:	ea4f 0959 	mov.w	r9, r9, lsr #1
    8c1a:	3530      	adds	r5, #48	; 0x30
    8c1c:	f80b 5c01 	strb.w	r5, [fp, #-1]
    8c20:	ea49 79c6 	orr.w	r9, r9, r6, lsl #31
    8c24:	f10c 0c01 	add.w	ip, ip, #1
    8c28:	f10b 3bff 	add.w	fp, fp, #4294967295
    8c2c:	0876      	lsrs	r6, r6, #1
    8c2e:	2c00      	cmp	r4, #0
    8c30:	d0d0      	beq.n	8bd4 <_svfprintf_r+0x10c4>
    8c32:	f89a 0000 	ldrb.w	r0, [sl]
    8c36:	4584      	cmp	ip, r0
    8c38:	d1cc      	bne.n	8bd4 <_svfprintf_r+0x10c4>
    8c3a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    8c3e:	d0c9      	beq.n	8bd4 <_svfprintf_r+0x10c4>
    8c40:	2a0a      	cmp	r2, #10
    8c42:	f171 0100 	sbcs.w	r1, r1, #0
    8c46:	f080 818f 	bcs.w	8f68 <_svfprintf_r+0x1458>
    8c4a:	465c      	mov	r4, fp
    8c4c:	ab50      	add	r3, sp, #320	; 0x140
    8c4e:	1b1b      	subs	r3, r3, r4
    8c50:	f8dd 9014 	ldr.w	r9, [sp, #20]
    8c54:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
    8c58:	ee1a ba10 	vmov	fp, s20
    8c5c:	f8dd a01c 	ldr.w	sl, [sp, #28]
    8c60:	f8dd 8008 	ldr.w	r8, [sp, #8]
    8c64:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
    8c68:	9305      	str	r3, [sp, #20]
    8c6a:	f7ff bac2 	b.w	81f2 <_svfprintf_r+0x6e2>
    8c6e:	ee1b 1a10 	vmov	r1, s22
    8c72:	aa24      	add	r2, sp, #144	; 0x90
    8c74:	4658      	mov	r0, fp
    8c76:	f003 fe4b 	bl	c910 <__ssprint_r>
    8c7a:	2800      	cmp	r0, #0
    8c7c:	f47f abad 	bne.w	83da <_svfprintf_r+0x8ca>
    8c80:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    8c84:	9a26      	ldr	r2, [sp, #152]	; 0x98
    8c86:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    8c8a:	f7ff b896 	b.w	7dba <_svfprintf_r+0x2aa>
    8c8e:	9b25      	ldr	r3, [sp, #148]	; 0x94
    8c90:	48be      	ldr	r0, [pc, #760]	; (8f8c <_svfprintf_r+0x147c>)
    8c92:	f8ca 0000 	str.w	r0, [sl]
    8c96:	3301      	adds	r3, #1
    8c98:	3201      	adds	r2, #1
    8c9a:	2001      	movs	r0, #1
    8c9c:	2b07      	cmp	r3, #7
    8c9e:	9226      	str	r2, [sp, #152]	; 0x98
    8ca0:	9325      	str	r3, [sp, #148]	; 0x94
    8ca2:	f8ca 0004 	str.w	r0, [sl, #4]
    8ca6:	f300 8177 	bgt.w	8f98 <_svfprintf_r+0x1488>
    8caa:	f10a 0a08 	add.w	sl, sl, #8
    8cae:	2900      	cmp	r1, #0
    8cb0:	f040 80af 	bne.w	8e12 <_svfprintf_r+0x1302>
    8cb4:	990e      	ldr	r1, [sp, #56]	; 0x38
    8cb6:	f008 0301 	and.w	r3, r8, #1
    8cba:	430b      	orrs	r3, r1
    8cbc:	f43f a8c0 	beq.w	7e40 <_svfprintf_r+0x330>
    8cc0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8cc2:	9912      	ldr	r1, [sp, #72]	; 0x48
    8cc4:	441a      	add	r2, r3
    8cc6:	e9ca 1300 	strd	r1, r3, [sl]
    8cca:	9b25      	ldr	r3, [sp, #148]	; 0x94
    8ccc:	9226      	str	r2, [sp, #152]	; 0x98
    8cce:	3301      	adds	r3, #1
    8cd0:	2b07      	cmp	r3, #7
    8cd2:	9325      	str	r3, [sp, #148]	; 0x94
    8cd4:	f300 8252 	bgt.w	917c <_svfprintf_r+0x166c>
    8cd8:	f10a 0a08 	add.w	sl, sl, #8
    8cdc:	990e      	ldr	r1, [sp, #56]	; 0x38
    8cde:	f8ca 4000 	str.w	r4, [sl]
    8ce2:	3301      	adds	r3, #1
    8ce4:	440a      	add	r2, r1
    8ce6:	2b07      	cmp	r3, #7
    8ce8:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    8cec:	f8ca 1004 	str.w	r1, [sl, #4]
    8cf0:	f77f a8a4 	ble.w	7e3c <_svfprintf_r+0x32c>
    8cf4:	f7ff bbbd 	b.w	8472 <_svfprintf_r+0x962>
    8cf8:	f018 0240 	ands.w	r2, r8, #64	; 0x40
    8cfc:	f000 80dd 	beq.w	8eba <_svfprintf_r+0x13aa>
    8d00:	9808      	ldr	r0, [sp, #32]
    8d02:	f850 2b04 	ldr.w	r2, [r0], #4
    8d06:	9008      	str	r0, [sp, #32]
    8d08:	4619      	mov	r1, r3
    8d0a:	b292      	uxth	r2, r2
    8d0c:	e631      	b.n	8972 <_svfprintf_r+0xe62>
    8d0e:	ee1b 1a10 	vmov	r1, s22
    8d12:	aa24      	add	r2, sp, #144	; 0x90
    8d14:	4658      	mov	r0, fp
    8d16:	f003 fdfb 	bl	c910 <__ssprint_r>
    8d1a:	2800      	cmp	r0, #0
    8d1c:	f47f ab5d 	bne.w	83da <_svfprintf_r+0x8ca>
    8d20:	9a26      	ldr	r2, [sp, #152]	; 0x98
    8d22:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    8d26:	f7ff baa3 	b.w	8270 <_svfprintf_r+0x760>
    8d2a:	ae22      	add	r6, sp, #136	; 0x88
    8d2c:	2208      	movs	r2, #8
    8d2e:	2100      	movs	r1, #0
    8d30:	4630      	mov	r0, r6
    8d32:	941d      	str	r4, [sp, #116]	; 0x74
    8d34:	f7fc ffb8 	bl	5ca8 <memset>
    8d38:	9b03      	ldr	r3, [sp, #12]
    8d3a:	1c5a      	adds	r2, r3, #1
    8d3c:	f000 80db 	beq.w	8ef6 <_svfprintf_r+0x13e6>
    8d40:	2500      	movs	r5, #0
    8d42:	f8cd 9008 	str.w	r9, [sp, #8]
    8d46:	f8cd 801c 	str.w	r8, [sp, #28]
    8d4a:	4699      	mov	r9, r3
    8d4c:	46a8      	mov	r8, r5
    8d4e:	e00c      	b.n	8d6a <_svfprintf_r+0x125a>
    8d50:	a937      	add	r1, sp, #220	; 0xdc
    8d52:	4658      	mov	r0, fp
    8d54:	f003 fcb2 	bl	c6bc <_wcrtomb_r>
    8d58:	1c43      	adds	r3, r0, #1
    8d5a:	4440      	add	r0, r8
    8d5c:	f000 83c8 	beq.w	94f0 <_svfprintf_r+0x19e0>
    8d60:	4548      	cmp	r0, r9
    8d62:	dc08      	bgt.n	8d76 <_svfprintf_r+0x1266>
    8d64:	f000 8418 	beq.w	9598 <_svfprintf_r+0x1a88>
    8d68:	4680      	mov	r8, r0
    8d6a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    8d6c:	5952      	ldr	r2, [r2, r5]
    8d6e:	4633      	mov	r3, r6
    8d70:	3504      	adds	r5, #4
    8d72:	2a00      	cmp	r2, #0
    8d74:	d1ec      	bne.n	8d50 <_svfprintf_r+0x1240>
    8d76:	f8cd 8014 	str.w	r8, [sp, #20]
    8d7a:	f8dd 9008 	ldr.w	r9, [sp, #8]
    8d7e:	f8dd 801c 	ldr.w	r8, [sp, #28]
    8d82:	e0c5      	b.n	8f10 <_svfprintf_r+0x1400>
    8d84:	3301      	adds	r3, #1
    8d86:	4982      	ldr	r1, [pc, #520]	; (8f90 <_svfprintf_r+0x1480>)
    8d88:	f8ca 4004 	str.w	r4, [sl, #4]
    8d8c:	4422      	add	r2, r4
    8d8e:	2b07      	cmp	r3, #7
    8d90:	f8ca 1000 	str.w	r1, [sl]
    8d94:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    8d98:	f77f a850 	ble.w	7e3c <_svfprintf_r+0x32c>
    8d9c:	f7ff bb69 	b.w	8472 <_svfprintf_r+0x962>
    8da0:	ee1b 1a10 	vmov	r1, s22
    8da4:	aa24      	add	r2, sp, #144	; 0x90
    8da6:	4658      	mov	r0, fp
    8da8:	f003 fdb2 	bl	c910 <__ssprint_r>
    8dac:	2800      	cmp	r0, #0
    8dae:	f47f ab14 	bne.w	83da <_svfprintf_r+0x8ca>
    8db2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    8db4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    8db8:	f7ff b829 	b.w	7e0e <_svfprintf_r+0x2fe>
    8dbc:	aa24      	add	r2, sp, #144	; 0x90
    8dbe:	4658      	mov	r0, fp
    8dc0:	9105      	str	r1, [sp, #20]
    8dc2:	f003 fda5 	bl	c910 <__ssprint_r>
    8dc6:	2800      	cmp	r0, #0
    8dc8:	f47f ab07 	bne.w	83da <_svfprintf_r+0x8ca>
    8dcc:	f896 c000 	ldrb.w	ip, [r6]
    8dd0:	9a26      	ldr	r2, [sp, #152]	; 0x98
    8dd2:	9905      	ldr	r1, [sp, #20]
    8dd4:	a827      	add	r0, sp, #156	; 0x9c
    8dd6:	e67d      	b.n	8ad4 <_svfprintf_r+0xfc4>
    8dd8:	2b01      	cmp	r3, #1
    8dda:	f8cd 8008 	str.w	r8, [sp, #8]
    8dde:	f47f a9f3 	bne.w	81c8 <_svfprintf_r+0x6b8>
    8de2:	f7ff bb93 	b.w	850c <_svfprintf_r+0x9fc>
    8de6:	9b08      	ldr	r3, [sp, #32]
    8de8:	9904      	ldr	r1, [sp, #16]
    8dea:	f853 2b04 	ldr.w	r2, [r3], #4
    8dee:	464c      	mov	r4, r9
    8df0:	6011      	str	r1, [r2, #0]
    8df2:	9308      	str	r3, [sp, #32]
    8df4:	f7fe bebe 	b.w	7b74 <_svfprintf_r+0x64>
    8df8:	3301      	adds	r3, #1
    8dfa:	4965      	ldr	r1, [pc, #404]	; (8f90 <_svfprintf_r+0x1480>)
    8dfc:	f8ca 4004 	str.w	r4, [sl, #4]
    8e00:	4422      	add	r2, r4
    8e02:	2b07      	cmp	r3, #7
    8e04:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    8e08:	f8ca 1000 	str.w	r1, [sl]
    8e0c:	f77f ab22 	ble.w	8454 <_svfprintf_r+0x944>
    8e10:	e47b      	b.n	870a <_svfprintf_r+0xbfa>
    8e12:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8e14:	9812      	ldr	r0, [sp, #72]	; 0x48
    8e16:	441a      	add	r2, r3
    8e18:	e9ca 0300 	strd	r0, r3, [sl]
    8e1c:	9b25      	ldr	r3, [sp, #148]	; 0x94
    8e1e:	9226      	str	r2, [sp, #152]	; 0x98
    8e20:	3301      	adds	r3, #1
    8e22:	2b07      	cmp	r3, #7
    8e24:	9325      	str	r3, [sp, #148]	; 0x94
    8e26:	f300 81a9 	bgt.w	917c <_svfprintf_r+0x166c>
    8e2a:	f10a 0a08 	add.w	sl, sl, #8
    8e2e:	2900      	cmp	r1, #0
    8e30:	f6bf af54 	bge.w	8cdc <_svfprintf_r+0x11cc>
    8e34:	424d      	negs	r5, r1
    8e36:	3110      	adds	r1, #16
    8e38:	f280 830f 	bge.w	945a <_svfprintf_r+0x194a>
    8e3c:	ee1b 1a10 	vmov	r1, s22
    8e40:	2610      	movs	r6, #16
    8e42:	e005      	b.n	8e50 <_svfprintf_r+0x1340>
    8e44:	f10a 0a08 	add.w	sl, sl, #8
    8e48:	3d10      	subs	r5, #16
    8e4a:	2d10      	cmp	r5, #16
    8e4c:	f340 8305 	ble.w	945a <_svfprintf_r+0x194a>
    8e50:	3301      	adds	r3, #1
    8e52:	484f      	ldr	r0, [pc, #316]	; (8f90 <_svfprintf_r+0x1480>)
    8e54:	3210      	adds	r2, #16
    8e56:	2b07      	cmp	r3, #7
    8e58:	e9ca 0600 	strd	r0, r6, [sl]
    8e5c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    8e60:	ddf0      	ble.n	8e44 <_svfprintf_r+0x1334>
    8e62:	aa24      	add	r2, sp, #144	; 0x90
    8e64:	4658      	mov	r0, fp
    8e66:	9103      	str	r1, [sp, #12]
    8e68:	f003 fd52 	bl	c910 <__ssprint_r>
    8e6c:	2800      	cmp	r0, #0
    8e6e:	f47f aab4 	bne.w	83da <_svfprintf_r+0x8ca>
    8e72:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    8e76:	9903      	ldr	r1, [sp, #12]
    8e78:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    8e7c:	e7e4      	b.n	8e48 <_svfprintf_r+0x1338>
    8e7e:	9b08      	ldr	r3, [sp, #32]
    8e80:	f418 7100 	ands.w	r1, r8, #512	; 0x200
    8e84:	bf1a      	itte	ne
    8e86:	4611      	movne	r1, r2
    8e88:	f853 2b04 	ldrne.w	r2, [r3], #4
    8e8c:	f853 2b04 	ldreq.w	r2, [r3], #4
    8e90:	9308      	str	r3, [sp, #32]
    8e92:	bf18      	it	ne
    8e94:	b2d2      	uxtbne	r2, r2
    8e96:	f7ff b945 	b.w	8124 <_svfprintf_r+0x614>
    8e9a:	9b02      	ldr	r3, [sp, #8]
    8e9c:	f413 7100 	ands.w	r1, r3, #512	; 0x200
    8ea0:	9b08      	ldr	r3, [sp, #32]
    8ea2:	bf1a      	itte	ne
    8ea4:	4611      	movne	r1, r2
    8ea6:	f853 2b04 	ldrne.w	r2, [r3], #4
    8eaa:	f853 2b04 	ldreq.w	r2, [r3], #4
    8eae:	9308      	str	r3, [sp, #32]
    8eb0:	bf18      	it	ne
    8eb2:	b2d2      	uxtbne	r2, r2
    8eb4:	2301      	movs	r3, #1
    8eb6:	f7ff b8d0 	b.w	805a <_svfprintf_r+0x54a>
    8eba:	9b08      	ldr	r3, [sp, #32]
    8ebc:	f418 7100 	ands.w	r1, r8, #512	; 0x200
    8ec0:	bf1a      	itte	ne
    8ec2:	4611      	movne	r1, r2
    8ec4:	f853 2b04 	ldrne.w	r2, [r3], #4
    8ec8:	f853 2b04 	ldreq.w	r2, [r3], #4
    8ecc:	9308      	str	r3, [sp, #32]
    8ece:	bf18      	it	ne
    8ed0:	b2d2      	uxtbne	r2, r2
    8ed2:	e54e      	b.n	8972 <_svfprintf_r+0xe62>
    8ed4:	468a      	mov	sl, r1
    8ed6:	3301      	adds	r3, #1
    8ed8:	492d      	ldr	r1, [pc, #180]	; (8f90 <_svfprintf_r+0x1480>)
    8eda:	f8ca 5004 	str.w	r5, [sl, #4]
    8ede:	442a      	add	r2, r5
    8ee0:	2b07      	cmp	r3, #7
    8ee2:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    8ee6:	f8ca 1000 	str.w	r1, [sl]
    8eea:	f300 8139 	bgt.w	9160 <_svfprintf_r+0x1650>
    8eee:	f10a 0a08 	add.w	sl, sl, #8
    8ef2:	f7ff bb8c 	b.w	860e <_svfprintf_r+0xafe>
    8ef6:	2300      	movs	r3, #0
    8ef8:	4619      	mov	r1, r3
    8efa:	9600      	str	r6, [sp, #0]
    8efc:	aa1d      	add	r2, sp, #116	; 0x74
    8efe:	4658      	mov	r0, fp
    8f00:	f003 fc02 	bl	c708 <_wcsrtombs_r>
    8f04:	4603      	mov	r3, r0
    8f06:	3301      	adds	r3, #1
    8f08:	9005      	str	r0, [sp, #20]
    8f0a:	f000 82f1 	beq.w	94f0 <_svfprintf_r+0x19e0>
    8f0e:	941d      	str	r4, [sp, #116]	; 0x74
    8f10:	9b05      	ldr	r3, [sp, #20]
    8f12:	2b00      	cmp	r3, #0
    8f14:	d04e      	beq.n	8fb4 <_svfprintf_r+0x14a4>
    8f16:	2b63      	cmp	r3, #99	; 0x63
    8f18:	f300 8118 	bgt.w	914c <_svfprintf_r+0x163c>
    8f1c:	2300      	movs	r3, #0
    8f1e:	9307      	str	r3, [sp, #28]
    8f20:	ac37      	add	r4, sp, #220	; 0xdc
    8f22:	2208      	movs	r2, #8
    8f24:	2100      	movs	r1, #0
    8f26:	4630      	mov	r0, r6
    8f28:	f7fc febe 	bl	5ca8 <memset>
    8f2c:	9d05      	ldr	r5, [sp, #20]
    8f2e:	9600      	str	r6, [sp, #0]
    8f30:	462b      	mov	r3, r5
    8f32:	aa1d      	add	r2, sp, #116	; 0x74
    8f34:	4621      	mov	r1, r4
    8f36:	4658      	mov	r0, fp
    8f38:	f003 fbe6 	bl	c708 <_wcsrtombs_r>
    8f3c:	4285      	cmp	r5, r0
    8f3e:	f040 837c 	bne.w	963a <_svfprintf_r+0x1b2a>
    8f42:	9a05      	ldr	r2, [sp, #20]
    8f44:	2300      	movs	r3, #0
    8f46:	54a3      	strb	r3, [r4, r2]
    8f48:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    8f4c:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    8f50:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    8f54:	9303      	str	r3, [sp, #12]
    8f56:	9202      	str	r2, [sp, #8]
    8f58:	930f      	str	r3, [sp, #60]	; 0x3c
    8f5a:	f7fe bfba 	b.w	7ed2 <_svfprintf_r+0x3c2>
    8f5e:	212d      	movs	r1, #45	; 0x2d
    8f60:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    8f64:	f7fe bfa4 	b.w	7eb0 <_svfprintf_r+0x3a0>
    8f68:	9b16      	ldr	r3, [sp, #88]	; 0x58
    8f6a:	9915      	ldr	r1, [sp, #84]	; 0x54
    8f6c:	ebab 0b03 	sub.w	fp, fp, r3
    8f70:	461a      	mov	r2, r3
    8f72:	4658      	mov	r0, fp
    8f74:	f7fc ff96 	bl	5ea4 <strncpy>
    8f78:	f89a 2001 	ldrb.w	r2, [sl, #1]
    8f7c:	4b05      	ldr	r3, [pc, #20]	; (8f94 <_svfprintf_r+0x1484>)
    8f7e:	b10a      	cbz	r2, 8f84 <_svfprintf_r+0x1474>
    8f80:	f10a 0a01 	add.w	sl, sl, #1
    8f84:	f04f 0c00 	mov.w	ip, #0
    8f88:	e628      	b.n	8bdc <_svfprintf_r+0x10cc>
    8f8a:	bf00      	nop
    8f8c:	20000914 	.word	0x20000914
    8f90:	20007a14 	.word	0x20007a14
    8f94:	cccccccd 	.word	0xcccccccd
    8f98:	ee1b 1a10 	vmov	r1, s22
    8f9c:	aa24      	add	r2, sp, #144	; 0x90
    8f9e:	4658      	mov	r0, fp
    8fa0:	f003 fcb6 	bl	c910 <__ssprint_r>
    8fa4:	2800      	cmp	r0, #0
    8fa6:	f47f aa18 	bne.w	83da <_svfprintf_r+0x8ca>
    8faa:	991b      	ldr	r1, [sp, #108]	; 0x6c
    8fac:	9a26      	ldr	r2, [sp, #152]	; 0x98
    8fae:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    8fb2:	e67c      	b.n	8cae <_svfprintf_r+0x119e>
    8fb4:	9b05      	ldr	r3, [sp, #20]
    8fb6:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    8fba:	930f      	str	r3, [sp, #60]	; 0x3c
    8fbc:	e9cd 3302 	strd	r3, r3, [sp, #8]
    8fc0:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    8fc4:	9307      	str	r3, [sp, #28]
    8fc6:	f7fe bf84 	b.w	7ed2 <_svfprintf_r+0x3c2>
    8fca:	990e      	ldr	r1, [sp, #56]	; 0x38
    8fcc:	9805      	ldr	r0, [sp, #20]
    8fce:	1865      	adds	r5, r4, r1
    8fd0:	1a2d      	subs	r5, r5, r0
    8fd2:	1acc      	subs	r4, r1, r3
    8fd4:	42a5      	cmp	r5, r4
    8fd6:	bfa8      	it	ge
    8fd8:	4625      	movge	r5, r4
    8fda:	f7ff bb4d 	b.w	8678 <_svfprintf_r+0xb68>
    8fde:	9b08      	ldr	r3, [sp, #32]
    8fe0:	9904      	ldr	r1, [sp, #16]
    8fe2:	f853 2b04 	ldr.w	r2, [r3], #4
    8fe6:	9308      	str	r3, [sp, #32]
    8fe8:	8011      	strh	r1, [r2, #0]
    8fea:	464c      	mov	r4, r9
    8fec:	f7fe bdc2 	b.w	7b74 <_svfprintf_r+0x64>
    8ff0:	f913 2b04 	ldrsb.w	r2, [r3], #4
    8ff4:	9308      	str	r3, [sp, #32]
    8ff6:	17d1      	asrs	r1, r2, #31
    8ff8:	460b      	mov	r3, r1
    8ffa:	f7fe bfdb 	b.w	7fb4 <_svfprintf_r+0x4a4>
    8ffe:	9a03      	ldr	r2, [sp, #12]
    9000:	2102      	movs	r1, #2
    9002:	ab22      	add	r3, sp, #136	; 0x88
    9004:	9301      	str	r3, [sp, #4]
    9006:	ab1d      	add	r3, sp, #116	; 0x74
    9008:	9300      	str	r3, [sp, #0]
    900a:	4658      	mov	r0, fp
    900c:	ab1b      	add	r3, sp, #108	; 0x6c
    900e:	eeb0 0b4a 	vmov.f64	d0, d10
    9012:	9202      	str	r2, [sp, #8]
    9014:	f002 fa88 	bl	b528 <_dtoa_r>
    9018:	2d47      	cmp	r5, #71	; 0x47
    901a:	9a02      	ldr	r2, [sp, #8]
    901c:	4604      	mov	r4, r0
    901e:	f000 8161 	beq.w	92e4 <_svfprintf_r+0x17d4>
    9022:	2d46      	cmp	r5, #70	; 0x46
    9024:	4410      	add	r0, r2
    9026:	d105      	bne.n	9034 <_svfprintf_r+0x1524>
    9028:	7823      	ldrb	r3, [r4, #0]
    902a:	2b30      	cmp	r3, #48	; 0x30
    902c:	f000 826f 	beq.w	950e <_svfprintf_r+0x19fe>
    9030:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    9032:	4410      	add	r0, r2
    9034:	eeb5 ab40 	vcmp.f64	d10, #0.0
    9038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    903c:	f040 8146 	bne.w	92cc <_svfprintf_r+0x17bc>
    9040:	4603      	mov	r3, r0
    9042:	1b1b      	subs	r3, r3, r4
    9044:	930e      	str	r3, [sp, #56]	; 0x38
    9046:	2d47      	cmp	r5, #71	; 0x47
    9048:	f000 8110 	beq.w	926c <_svfprintf_r+0x175c>
    904c:	2d46      	cmp	r5, #70	; 0x46
    904e:	f000 81b5 	beq.w	93bc <_svfprintf_r+0x18ac>
    9052:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    9054:	930c      	str	r3, [sp, #48]	; 0x30
    9056:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9058:	2d41      	cmp	r5, #65	; 0x41
    905a:	f103 33ff 	add.w	r3, r3, #4294967295
    905e:	931b      	str	r3, [sp, #108]	; 0x6c
    9060:	f000 81e5 	beq.w	942e <_svfprintf_r+0x191e>
    9064:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
    9068:	2100      	movs	r1, #0
    906a:	2b00      	cmp	r3, #0
    906c:	bfb8      	it	lt
    906e:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
    9070:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
    9074:	bfba      	itte	lt
    9076:	f1c3 0301 	rsblt	r3, r3, #1
    907a:	222d      	movlt	r2, #45	; 0x2d
    907c:	222b      	movge	r2, #43	; 0x2b
    907e:	2b09      	cmp	r3, #9
    9080:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
    9084:	f340 81da 	ble.w	943c <_svfprintf_r+0x192c>
    9088:	f10d 058f 	add.w	r5, sp, #143	; 0x8f
    908c:	f8df c41c 	ldr.w	ip, [pc, #1052]	; 94ac <_svfprintf_r+0x199c>
    9090:	462a      	mov	r2, r5
    9092:	4610      	mov	r0, r2
    9094:	fb8c 2103 	smull	r2, r1, ip, r3
    9098:	17da      	asrs	r2, r3, #31
    909a:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
    909e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    90a2:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
    90a6:	3130      	adds	r1, #48	; 0x30
    90a8:	f800 1c01 	strb.w	r1, [r0, #-1]
    90ac:	4619      	mov	r1, r3
    90ae:	2963      	cmp	r1, #99	; 0x63
    90b0:	4613      	mov	r3, r2
    90b2:	f100 32ff 	add.w	r2, r0, #4294967295
    90b6:	dcec      	bgt.n	9092 <_svfprintf_r+0x1582>
    90b8:	3330      	adds	r3, #48	; 0x30
    90ba:	b2d9      	uxtb	r1, r3
    90bc:	1e83      	subs	r3, r0, #2
    90be:	429d      	cmp	r5, r3
    90c0:	f802 1c01 	strb.w	r1, [r2, #-1]
    90c4:	f240 828b 	bls.w	95de <_svfprintf_r+0x1ace>
    90c8:	4613      	mov	r3, r2
    90ca:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    90ce:	e001      	b.n	90d4 <_svfprintf_r+0x15c4>
    90d0:	f813 1b01 	ldrb.w	r1, [r3], #1
    90d4:	f802 1b01 	strb.w	r1, [r2], #1
    90d8:	429d      	cmp	r5, r3
    90da:	d1f9      	bne.n	90d0 <_svfprintf_r+0x15c0>
    90dc:	f10d 0391 	add.w	r3, sp, #145	; 0x91
    90e0:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    90e4:	1a1b      	subs	r3, r3, r0
    90e6:	4413      	add	r3, r2
    90e8:	aa1e      	add	r2, sp, #120	; 0x78
    90ea:	1a9b      	subs	r3, r3, r2
    90ec:	9314      	str	r3, [sp, #80]	; 0x50
    90ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    90f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
    90f2:	2b01      	cmp	r3, #1
    90f4:	441a      	add	r2, r3
    90f6:	9205      	str	r2, [sp, #20]
    90f8:	f340 8203 	ble.w	9502 <_svfprintf_r+0x19f2>
    90fc:	9b05      	ldr	r3, [sp, #20]
    90fe:	9a10      	ldr	r2, [sp, #64]	; 0x40
    9100:	4413      	add	r3, r2
    9102:	9305      	str	r3, [sp, #20]
    9104:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
    9108:	9a05      	ldr	r2, [sp, #20]
    910a:	f443 7880 	orr.w	r8, r3, #256	; 0x100
    910e:	2300      	movs	r3, #0
    9110:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    9114:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    9118:	930f      	str	r3, [sp, #60]	; 0x3c
    911a:	9202      	str	r2, [sp, #8]
    911c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    911e:	2b00      	cmp	r3, #0
    9120:	f040 80b1 	bne.w	9286 <_svfprintf_r+0x1776>
    9124:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    9128:	9303      	str	r3, [sp, #12]
    912a:	f7fe bed2 	b.w	7ed2 <_svfprintf_r+0x3c2>
    912e:	4620      	mov	r0, r4
    9130:	f7fd f966 	bl	6400 <strlen>
    9134:	4602      	mov	r2, r0
    9136:	9005      	str	r0, [sp, #20]
    9138:	f7fe bf20 	b.w	7f7c <_svfprintf_r+0x46c>
    913c:	ee1b 1a10 	vmov	r1, s22
    9140:	aa24      	add	r2, sp, #144	; 0x90
    9142:	4658      	mov	r0, fp
    9144:	f003 fbe4 	bl	c910 <__ssprint_r>
    9148:	f7fe bded 	b.w	7d26 <_svfprintf_r+0x216>
    914c:	1c59      	adds	r1, r3, #1
    914e:	4658      	mov	r0, fp
    9150:	f7fa fe8a 	bl	3e68 <_malloc_r>
    9154:	4604      	mov	r4, r0
    9156:	2800      	cmp	r0, #0
    9158:	f000 81ca 	beq.w	94f0 <_svfprintf_r+0x19e0>
    915c:	9007      	str	r0, [sp, #28]
    915e:	e6e0      	b.n	8f22 <_svfprintf_r+0x1412>
    9160:	ee1b 1a10 	vmov	r1, s22
    9164:	aa24      	add	r2, sp, #144	; 0x90
    9166:	4658      	mov	r0, fp
    9168:	f003 fbd2 	bl	c910 <__ssprint_r>
    916c:	2800      	cmp	r0, #0
    916e:	f47f a934 	bne.w	83da <_svfprintf_r+0x8ca>
    9172:	9a26      	ldr	r2, [sp, #152]	; 0x98
    9174:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    9178:	f7ff ba49 	b.w	860e <_svfprintf_r+0xafe>
    917c:	ee1b 1a10 	vmov	r1, s22
    9180:	aa24      	add	r2, sp, #144	; 0x90
    9182:	4658      	mov	r0, fp
    9184:	f003 fbc4 	bl	c910 <__ssprint_r>
    9188:	2800      	cmp	r0, #0
    918a:	f47f a926 	bne.w	83da <_svfprintf_r+0x8ca>
    918e:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    9192:	991b      	ldr	r1, [sp, #108]	; 0x6c
    9194:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    9198:	e649      	b.n	8e2e <_svfprintf_r+0x131e>
    919a:	2306      	movs	r3, #6
    919c:	9303      	str	r3, [sp, #12]
    919e:	f7ff bb83 	b.w	88a8 <_svfprintf_r+0xd98>
    91a2:	9b03      	ldr	r3, [sp, #12]
    91a4:	2102      	movs	r1, #2
    91a6:	1c5a      	adds	r2, r3, #1
    91a8:	e72b      	b.n	9002 <_svfprintf_r+0x14f2>
    91aa:	9a03      	ldr	r2, [sp, #12]
    91ac:	2103      	movs	r1, #3
    91ae:	e728      	b.n	9002 <_svfprintf_r+0x14f2>
    91b0:	a81b      	add	r0, sp, #108	; 0x6c
    91b2:	eeb0 0b4a 	vmov.f64	d0, d10
    91b6:	f002 f88b 	bl	b2d0 <frexp>
    91ba:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
    91be:	ee20 0b07 	vmul.f64	d0, d0, d7
    91c2:	eeb5 0b40 	vcmp.f64	d0, #0.0
    91c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    91ca:	d101      	bne.n	91d0 <_svfprintf_r+0x16c0>
    91cc:	2301      	movs	r3, #1
    91ce:	931b      	str	r3, [sp, #108]	; 0x6c
    91d0:	48b3      	ldr	r0, [pc, #716]	; (94a0 <_svfprintf_r+0x1990>)
    91d2:	9b03      	ldr	r3, [sp, #12]
    91d4:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
    91d8:	3b01      	subs	r3, #1
    91da:	4622      	mov	r2, r4
    91dc:	e004      	b.n	91e8 <_svfprintf_r+0x16d8>
    91de:	eeb5 0b40 	vcmp.f64	d0, #0.0
    91e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    91e6:	d013      	beq.n	9210 <_svfprintf_r+0x1700>
    91e8:	ee20 0b05 	vmul.f64	d0, d0, d5
    91ec:	eefd 7bc0 	vcvt.s32.f64	s15, d0
    91f0:	f1b3 3fff 	cmp.w	r3, #4294967295
    91f4:	ee17 1a90 	vmov	r1, s15
    91f8:	5c41      	ldrb	r1, [r0, r1]
    91fa:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    91fe:	4694      	mov	ip, r2
    9200:	ee30 0b46 	vsub.f64	d0, d0, d6
    9204:	f802 1b01 	strb.w	r1, [r2], #1
    9208:	4619      	mov	r1, r3
    920a:	f103 33ff 	add.w	r3, r3, #4294967295
    920e:	d1e6      	bne.n	91de <_svfprintf_r+0x16ce>
    9210:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    9214:	eeb4 0bc6 	vcmpe.f64	d0, d6
    9218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    921c:	f300 8148 	bgt.w	94b0 <_svfprintf_r+0x19a0>
    9220:	eeb4 0b46 	vcmp.f64	d0, d6
    9224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9228:	d104      	bne.n	9234 <_svfprintf_r+0x1724>
    922a:	ee17 3a90 	vmov	r3, s15
    922e:	07db      	lsls	r3, r3, #31
    9230:	f100 813e 	bmi.w	94b0 <_svfprintf_r+0x19a0>
    9234:	2900      	cmp	r1, #0
    9236:	db06      	blt.n	9246 <_svfprintf_r+0x1736>
    9238:	1c4b      	adds	r3, r1, #1
    923a:	4413      	add	r3, r2
    923c:	2130      	movs	r1, #48	; 0x30
    923e:	f802 1b01 	strb.w	r1, [r2], #1
    9242:	4293      	cmp	r3, r2
    9244:	d1fb      	bne.n	923e <_svfprintf_r+0x172e>
    9246:	1b13      	subs	r3, r2, r4
    9248:	930e      	str	r3, [sp, #56]	; 0x38
    924a:	e6fc      	b.n	9046 <_svfprintf_r+0x1536>
    924c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    924e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9250:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    9254:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    9258:	9613      	str	r6, [sp, #76]	; 0x4c
    925a:	18e3      	adds	r3, r4, r3
    925c:	429d      	cmp	r5, r3
    925e:	4629      	mov	r1, r5
    9260:	bf28      	it	cs
    9262:	4619      	movcs	r1, r3
    9264:	4682      	mov	sl, r0
    9266:	9105      	str	r1, [sp, #20]
    9268:	f7ff b9d8 	b.w	861c <_svfprintf_r+0xb0c>
    926c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    926e:	930c      	str	r3, [sp, #48]	; 0x30
    9270:	1cda      	adds	r2, r3, #3
    9272:	db02      	blt.n	927a <_svfprintf_r+0x176a>
    9274:	9a03      	ldr	r2, [sp, #12]
    9276:	4293      	cmp	r3, r2
    9278:	dd0c      	ble.n	9294 <_svfprintf_r+0x1784>
    927a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    927c:	3b02      	subs	r3, #2
    927e:	930b      	str	r3, [sp, #44]	; 0x2c
    9280:	f023 0520 	bic.w	r5, r3, #32
    9284:	e6e7      	b.n	9056 <_svfprintf_r+0x1546>
    9286:	212d      	movs	r1, #45	; 0x2d
    9288:	2300      	movs	r3, #0
    928a:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    928e:	9303      	str	r3, [sp, #12]
    9290:	f7fe be22 	b.w	7ed8 <_svfprintf_r+0x3c8>
    9294:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9296:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    9298:	4293      	cmp	r3, r2
    929a:	f2c0 80bd 	blt.w	9418 <_svfprintf_r+0x1908>
    929e:	07f0      	lsls	r0, r6, #31
    92a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    92a2:	f140 8132 	bpl.w	950a <_svfprintf_r+0x19fa>
    92a6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    92a8:	4413      	add	r3, r2
    92aa:	9305      	str	r3, [sp, #20]
    92ac:	0571      	lsls	r1, r6, #21
    92ae:	d503      	bpl.n	92b8 <_svfprintf_r+0x17a8>
    92b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    92b2:	2b00      	cmp	r3, #0
    92b4:	f300 8135 	bgt.w	9522 <_svfprintf_r+0x1a12>
    92b8:	9b05      	ldr	r3, [sp, #20]
    92ba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    92be:	9302      	str	r3, [sp, #8]
    92c0:	2367      	movs	r3, #103	; 0x67
    92c2:	930b      	str	r3, [sp, #44]	; 0x2c
    92c4:	2300      	movs	r3, #0
    92c6:	930f      	str	r3, [sp, #60]	; 0x3c
    92c8:	930d      	str	r3, [sp, #52]	; 0x34
    92ca:	e727      	b.n	911c <_svfprintf_r+0x160c>
    92cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
    92ce:	4283      	cmp	r3, r0
    92d0:	f4bf aeb7 	bcs.w	9042 <_svfprintf_r+0x1532>
    92d4:	2130      	movs	r1, #48	; 0x30
    92d6:	1c5a      	adds	r2, r3, #1
    92d8:	9222      	str	r2, [sp, #136]	; 0x88
    92da:	7019      	strb	r1, [r3, #0]
    92dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
    92de:	4298      	cmp	r0, r3
    92e0:	d8f9      	bhi.n	92d6 <_svfprintf_r+0x17c6>
    92e2:	e6ae      	b.n	9042 <_svfprintf_r+0x1532>
    92e4:	07f3      	lsls	r3, r6, #31
    92e6:	f100 80a7 	bmi.w	9438 <_svfprintf_r+0x1928>
    92ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
    92ec:	e6a9      	b.n	9042 <_svfprintf_r+0x1532>
    92ee:	aa24      	add	r2, sp, #144	; 0x90
    92f0:	4658      	mov	r0, fp
    92f2:	9105      	str	r1, [sp, #20]
    92f4:	f003 fb0c 	bl	c910 <__ssprint_r>
    92f8:	2800      	cmp	r0, #0
    92fa:	f47f a86e 	bne.w	83da <_svfprintf_r+0x8ca>
    92fe:	f896 c000 	ldrb.w	ip, [r6]
    9302:	9a26      	ldr	r2, [sp, #152]	; 0x98
    9304:	9905      	ldr	r1, [sp, #20]
    9306:	a827      	add	r0, sp, #156	; 0x9c
    9308:	4465      	add	r5, ip
    930a:	f7ff bbec 	b.w	8ae6 <_svfprintf_r+0xfd6>
    930e:	ee1b 1a10 	vmov	r1, s22
    9312:	aa24      	add	r2, sp, #144	; 0x90
    9314:	4658      	mov	r0, fp
    9316:	f003 fafb 	bl	c910 <__ssprint_r>
    931a:	2800      	cmp	r0, #0
    931c:	f47f a85d 	bne.w	83da <_svfprintf_r+0x8ca>
    9320:	9a26      	ldr	r2, [sp, #152]	; 0x98
    9322:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    9326:	f7ff b96b 	b.w	8600 <_svfprintf_r+0xaf0>
    932a:	2378      	movs	r3, #120	; 0x78
    932c:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    9330:	2330      	movs	r3, #48	; 0x30
    9332:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    9336:	9b03      	ldr	r3, [sp, #12]
    9338:	2b63      	cmp	r3, #99	; 0x63
    933a:	f048 0602 	orr.w	r6, r8, #2
    933e:	f300 80a6 	bgt.w	948e <_svfprintf_r+0x197e>
    9342:	2300      	movs	r3, #0
    9344:	9307      	str	r3, [sp, #28]
    9346:	ac37      	add	r4, sp, #220	; 0xdc
    9348:	ee18 3a90 	vmov	r3, s17
    934c:	2b00      	cmp	r3, #0
    934e:	f448 7881 	orr.w	r8, r8, #258	; 0x102
    9352:	db2b      	blt.n	93ac <_svfprintf_r+0x189c>
    9354:	eeb0 ab48 	vmov.f64	d10, d8
    9358:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    935a:	f023 0520 	bic.w	r5, r3, #32
    935e:	2300      	movs	r3, #0
    9360:	9309      	str	r3, [sp, #36]	; 0x24
    9362:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9364:	2b61      	cmp	r3, #97	; 0x61
    9366:	f47f aaad 	bne.w	88c4 <_svfprintf_r+0xdb4>
    936a:	eeb0 0b4a 	vmov.f64	d0, d10
    936e:	a81b      	add	r0, sp, #108	; 0x6c
    9370:	f001 ffae 	bl	b2d0 <frexp>
    9374:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
    9378:	ee20 0b07 	vmul.f64	d0, d0, d7
    937c:	eeb5 0b40 	vcmp.f64	d0, #0.0
    9380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9384:	d101      	bne.n	938a <_svfprintf_r+0x187a>
    9386:	2301      	movs	r3, #1
    9388:	931b      	str	r3, [sp, #108]	; 0x6c
    938a:	4846      	ldr	r0, [pc, #280]	; (94a4 <_svfprintf_r+0x1994>)
    938c:	e721      	b.n	91d2 <_svfprintf_r+0x16c2>
    938e:	ee1b 1a10 	vmov	r1, s22
    9392:	aa24      	add	r2, sp, #144	; 0x90
    9394:	4658      	mov	r0, fp
    9396:	f003 fabb 	bl	c910 <__ssprint_r>
    939a:	2800      	cmp	r0, #0
    939c:	f47f a81d 	bne.w	83da <_svfprintf_r+0x8ca>
    93a0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    93a2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    93a4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    93a8:	f7ff b94e 	b.w	8648 <_svfprintf_r+0xb38>
    93ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    93ae:	f023 0520 	bic.w	r5, r3, #32
    93b2:	232d      	movs	r3, #45	; 0x2d
    93b4:	9309      	str	r3, [sp, #36]	; 0x24
    93b6:	eeb1 ab48 	vneg.f64	d10, d8
    93ba:	e7d2      	b.n	9362 <_svfprintf_r+0x1852>
    93bc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    93be:	920c      	str	r2, [sp, #48]	; 0x30
    93c0:	2a00      	cmp	r2, #0
    93c2:	f006 0301 	and.w	r3, r6, #1
    93c6:	f340 810d 	ble.w	95e4 <_svfprintf_r+0x1ad4>
    93ca:	9903      	ldr	r1, [sp, #12]
    93cc:	430b      	orrs	r3, r1
    93ce:	f040 80cf 	bne.w	9570 <_svfprintf_r+0x1a60>
    93d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    93d4:	9305      	str	r3, [sp, #20]
    93d6:	2366      	movs	r3, #102	; 0x66
    93d8:	930b      	str	r3, [sp, #44]	; 0x2c
    93da:	0572      	lsls	r2, r6, #21
    93dc:	f100 80a3 	bmi.w	9526 <_svfprintf_r+0x1a16>
    93e0:	9b05      	ldr	r3, [sp, #20]
    93e2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    93e6:	9302      	str	r3, [sp, #8]
    93e8:	e76c      	b.n	92c4 <_svfprintf_r+0x17b4>
    93ea:	ee1b 1a10 	vmov	r1, s22
    93ee:	aa24      	add	r2, sp, #144	; 0x90
    93f0:	4658      	mov	r0, fp
    93f2:	f003 fa8d 	bl	c910 <__ssprint_r>
    93f6:	2800      	cmp	r0, #0
    93f8:	f47e afef 	bne.w	83da <_svfprintf_r+0x8ca>
    93fc:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
    93fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9400:	9a26      	ldr	r2, [sp, #152]	; 0x98
    9402:	1b1c      	subs	r4, r3, r4
    9404:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    9408:	f7ff b936 	b.w	8678 <_svfprintf_r+0xb68>
    940c:	2358      	movs	r3, #88	; 0x58
    940e:	e78d      	b.n	932c <_svfprintf_r+0x181c>
    9410:	2200      	movs	r2, #0
    9412:	9203      	str	r2, [sp, #12]
    9414:	f7fe bbda 	b.w	7bcc <_svfprintf_r+0xbc>
    9418:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    941a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    941c:	189a      	adds	r2, r3, r2
    941e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9420:	9205      	str	r2, [sp, #20]
    9422:	2b00      	cmp	r3, #0
    9424:	f340 80ab 	ble.w	957e <_svfprintf_r+0x1a6e>
    9428:	2367      	movs	r3, #103	; 0x67
    942a:	930b      	str	r3, [sp, #44]	; 0x2c
    942c:	e7d5      	b.n	93da <_svfprintf_r+0x18ca>
    942e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9430:	320f      	adds	r2, #15
    9432:	b2d2      	uxtb	r2, r2
    9434:	2101      	movs	r1, #1
    9436:	e618      	b.n	906a <_svfprintf_r+0x155a>
    9438:	18a0      	adds	r0, r4, r2
    943a:	e5fb      	b.n	9034 <_svfprintf_r+0x1524>
    943c:	2900      	cmp	r1, #0
    943e:	f040 80a8 	bne.w	9592 <_svfprintf_r+0x1a82>
    9442:	2230      	movs	r2, #48	; 0x30
    9444:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
    9448:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
    944c:	3330      	adds	r3, #48	; 0x30
    944e:	f802 3b01 	strb.w	r3, [r2], #1
    9452:	ab1e      	add	r3, sp, #120	; 0x78
    9454:	1ad3      	subs	r3, r2, r3
    9456:	9314      	str	r3, [sp, #80]	; 0x50
    9458:	e649      	b.n	90ee <_svfprintf_r+0x15de>
    945a:	3301      	adds	r3, #1
    945c:	4912      	ldr	r1, [pc, #72]	; (94a8 <_svfprintf_r+0x1998>)
    945e:	f8ca 5004 	str.w	r5, [sl, #4]
    9462:	442a      	add	r2, r5
    9464:	2b07      	cmp	r3, #7
    9466:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    946a:	f8ca 1000 	str.w	r1, [sl]
    946e:	f77f ac33 	ble.w	8cd8 <_svfprintf_r+0x11c8>
    9472:	ee1b 1a10 	vmov	r1, s22
    9476:	aa24      	add	r2, sp, #144	; 0x90
    9478:	4658      	mov	r0, fp
    947a:	f003 fa49 	bl	c910 <__ssprint_r>
    947e:	2800      	cmp	r0, #0
    9480:	f47e afab 	bne.w	83da <_svfprintf_r+0x8ca>
    9484:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    9488:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    948c:	e426      	b.n	8cdc <_svfprintf_r+0x11cc>
    948e:	1c59      	adds	r1, r3, #1
    9490:	4658      	mov	r0, fp
    9492:	f7fa fce9 	bl	3e68 <_malloc_r>
    9496:	4604      	mov	r4, r0
    9498:	b350      	cbz	r0, 94f0 <_svfprintf_r+0x19e0>
    949a:	9007      	str	r0, [sp, #28]
    949c:	e754      	b.n	9348 <_svfprintf_r+0x1838>
    949e:	bf00      	nop
    94a0:	200008f8 	.word	0x200008f8
    94a4:	200008e4 	.word	0x200008e4
    94a8:	20007a14 	.word	0x20007a14
    94ac:	66666667 	.word	0x66666667
    94b0:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
    94b4:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    94b8:	f890 c00f 	ldrb.w	ip, [r0, #15]
    94bc:	4561      	cmp	r1, ip
    94be:	4613      	mov	r3, r2
    94c0:	d10a      	bne.n	94d8 <_svfprintf_r+0x19c8>
    94c2:	f04f 0e30 	mov.w	lr, #48	; 0x30
    94c6:	f803 ec01 	strb.w	lr, [r3, #-1]
    94ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
    94cc:	1e59      	subs	r1, r3, #1
    94ce:	9122      	str	r1, [sp, #136]	; 0x88
    94d0:	f813 1c01 	ldrb.w	r1, [r3, #-1]
    94d4:	458c      	cmp	ip, r1
    94d6:	d0f6      	beq.n	94c6 <_svfprintf_r+0x19b6>
    94d8:	2939      	cmp	r1, #57	; 0x39
    94da:	bf16      	itet	ne
    94dc:	3101      	addne	r1, #1
    94de:	7a81      	ldrbeq	r1, [r0, #10]
    94e0:	b2c9      	uxtbne	r1, r1
    94e2:	f803 1c01 	strb.w	r1, [r3, #-1]
    94e6:	e6ae      	b.n	9246 <_svfprintf_r+0x1736>
    94e8:	2300      	movs	r3, #0
    94ea:	4690      	mov	r8, r2
    94ec:	9307      	str	r3, [sp, #28]
    94ee:	e760      	b.n	93b2 <_svfprintf_r+0x18a2>
    94f0:	ee1b 2a10 	vmov	r2, s22
    94f4:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    94f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    94fc:	8193      	strh	r3, [r2, #12]
    94fe:	f7fe bc16 	b.w	7d2e <_svfprintf_r+0x21e>
    9502:	07f5      	lsls	r5, r6, #31
    9504:	f57f adfe 	bpl.w	9104 <_svfprintf_r+0x15f4>
    9508:	e5f8      	b.n	90fc <_svfprintf_r+0x15ec>
    950a:	9305      	str	r3, [sp, #20]
    950c:	e6ce      	b.n	92ac <_svfprintf_r+0x179c>
    950e:	eeb5 ab40 	vcmp.f64	d10, #0.0
    9512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9516:	f43f ad8b 	beq.w	9030 <_svfprintf_r+0x1520>
    951a:	f1c2 0201 	rsb	r2, r2, #1
    951e:	921b      	str	r2, [sp, #108]	; 0x6c
    9520:	e587      	b.n	9032 <_svfprintf_r+0x1522>
    9522:	2367      	movs	r3, #103	; 0x67
    9524:	930b      	str	r3, [sp, #44]	; 0x2c
    9526:	9913      	ldr	r1, [sp, #76]	; 0x4c
    9528:	780b      	ldrb	r3, [r1, #0]
    952a:	2bff      	cmp	r3, #255	; 0xff
    952c:	d079      	beq.n	9622 <_svfprintf_r+0x1b12>
    952e:	2500      	movs	r5, #0
    9530:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9532:	4628      	mov	r0, r5
    9534:	e003      	b.n	953e <_svfprintf_r+0x1a2e>
    9536:	3001      	adds	r0, #1
    9538:	3101      	adds	r1, #1
    953a:	2bff      	cmp	r3, #255	; 0xff
    953c:	d008      	beq.n	9550 <_svfprintf_r+0x1a40>
    953e:	4293      	cmp	r3, r2
    9540:	da06      	bge.n	9550 <_svfprintf_r+0x1a40>
    9542:	1ad2      	subs	r2, r2, r3
    9544:	784b      	ldrb	r3, [r1, #1]
    9546:	2b00      	cmp	r3, #0
    9548:	d1f5      	bne.n	9536 <_svfprintf_r+0x1a26>
    954a:	780b      	ldrb	r3, [r1, #0]
    954c:	3501      	adds	r5, #1
    954e:	e7f4      	b.n	953a <_svfprintf_r+0x1a2a>
    9550:	920c      	str	r2, [sp, #48]	; 0x30
    9552:	9113      	str	r1, [sp, #76]	; 0x4c
    9554:	900d      	str	r0, [sp, #52]	; 0x34
    9556:	950f      	str	r5, [sp, #60]	; 0x3c
    9558:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    955a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    955c:	9916      	ldr	r1, [sp, #88]	; 0x58
    955e:	4413      	add	r3, r2
    9560:	9a05      	ldr	r2, [sp, #20]
    9562:	fb01 2303 	mla	r3, r1, r3, r2
    9566:	9305      	str	r3, [sp, #20]
    9568:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    956c:	9302      	str	r3, [sp, #8]
    956e:	e5d5      	b.n	911c <_svfprintf_r+0x160c>
    9570:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9572:	18d3      	adds	r3, r2, r3
    9574:	4419      	add	r1, r3
    9576:	2366      	movs	r3, #102	; 0x66
    9578:	9105      	str	r1, [sp, #20]
    957a:	930b      	str	r3, [sp, #44]	; 0x2c
    957c:	e72d      	b.n	93da <_svfprintf_r+0x18ca>
    957e:	f1c3 0301 	rsb	r3, r3, #1
    9582:	441a      	add	r2, r3
    9584:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    9588:	9302      	str	r3, [sp, #8]
    958a:	2367      	movs	r3, #103	; 0x67
    958c:	9205      	str	r2, [sp, #20]
    958e:	930b      	str	r3, [sp, #44]	; 0x2c
    9590:	e698      	b.n	92c4 <_svfprintf_r+0x17b4>
    9592:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    9596:	e759      	b.n	944c <_svfprintf_r+0x193c>
    9598:	9b03      	ldr	r3, [sp, #12]
    959a:	f8dd 9008 	ldr.w	r9, [sp, #8]
    959e:	f8dd 801c 	ldr.w	r8, [sp, #28]
    95a2:	9305      	str	r3, [sp, #20]
    95a4:	e4b4      	b.n	8f10 <_svfprintf_r+0x1400>
    95a6:	ee18 3a90 	vmov	r3, s17
    95aa:	2b00      	cmp	r3, #0
    95ac:	bfb4      	ite	lt
    95ae:	212d      	movlt	r1, #45	; 0x2d
    95b0:	f89d 1067 	ldrbge.w	r1, [sp, #103]	; 0x67
    95b4:	4c25      	ldr	r4, [pc, #148]	; (964c <_svfprintf_r+0x1b3c>)
    95b6:	4b26      	ldr	r3, [pc, #152]	; (9650 <_svfprintf_r+0x1b40>)
    95b8:	bfb8      	it	lt
    95ba:	f88d 1067 	strblt.w	r1, [sp, #103]	; 0x67
    95be:	f028 0880 	bic.w	r8, r8, #128	; 0x80
    95c2:	f7fe bc79 	b.w	7eb8 <_svfprintf_r+0x3a8>
    95c6:	9b03      	ldr	r3, [sp, #12]
    95c8:	9302      	str	r3, [sp, #8]
    95ca:	9305      	str	r3, [sp, #20]
    95cc:	2373      	movs	r3, #115	; 0x73
    95ce:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    95d2:	9003      	str	r0, [sp, #12]
    95d4:	900f      	str	r0, [sp, #60]	; 0x3c
    95d6:	900d      	str	r0, [sp, #52]	; 0x34
    95d8:	930b      	str	r3, [sp, #44]	; 0x2c
    95da:	f7fe bc7a 	b.w	7ed2 <_svfprintf_r+0x3c2>
    95de:	2302      	movs	r3, #2
    95e0:	9314      	str	r3, [sp, #80]	; 0x50
    95e2:	e584      	b.n	90ee <_svfprintf_r+0x15de>
    95e4:	9a03      	ldr	r2, [sp, #12]
    95e6:	4313      	orrs	r3, r2
    95e8:	d105      	bne.n	95f6 <_svfprintf_r+0x1ae6>
    95ea:	2301      	movs	r3, #1
    95ec:	2266      	movs	r2, #102	; 0x66
    95ee:	9302      	str	r3, [sp, #8]
    95f0:	920b      	str	r2, [sp, #44]	; 0x2c
    95f2:	9305      	str	r3, [sp, #20]
    95f4:	e666      	b.n	92c4 <_svfprintf_r+0x17b4>
    95f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    95f8:	3301      	adds	r3, #1
    95fa:	441a      	add	r2, r3
    95fc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    9600:	9302      	str	r3, [sp, #8]
    9602:	2366      	movs	r3, #102	; 0x66
    9604:	9205      	str	r2, [sp, #20]
    9606:	930b      	str	r3, [sp, #44]	; 0x2c
    9608:	e65c      	b.n	92c4 <_svfprintf_r+0x17b4>
    960a:	9a08      	ldr	r2, [sp, #32]
    960c:	f899 3001 	ldrb.w	r3, [r9, #1]
    9610:	4689      	mov	r9, r1
    9612:	f852 1b04 	ldr.w	r1, [r2], #4
    9616:	9208      	str	r2, [sp, #32]
    9618:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
    961c:	9103      	str	r1, [sp, #12]
    961e:	f7fe bad3 	b.w	7bc8 <_svfprintf_r+0xb8>
    9622:	2300      	movs	r3, #0
    9624:	930f      	str	r3, [sp, #60]	; 0x3c
    9626:	930d      	str	r3, [sp, #52]	; 0x34
    9628:	e796      	b.n	9558 <_svfprintf_r+0x1a48>
    962a:	230c      	movs	r3, #12
    962c:	f8cb 3000 	str.w	r3, [fp]
    9630:	f04f 33ff 	mov.w	r3, #4294967295
    9634:	9304      	str	r3, [sp, #16]
    9636:	f7fe bb81 	b.w	7d3c <_svfprintf_r+0x22c>
    963a:	ee1b 2a10 	vmov	r2, s22
    963e:	8993      	ldrh	r3, [r2, #12]
    9640:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9644:	8193      	strh	r3, [r2, #12]
    9646:	f7fe bec8 	b.w	83da <_svfprintf_r+0x8ca>
    964a:	bf00      	nop
    964c:	200008dc 	.word	0x200008dc
    9650:	200008e0 	.word	0x200008e0

00009654 <__ssvfscanf_r>:
    9654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9658:	ed2d 8b02 	vpush	{d8}
    965c:	f5ad 7d37 	sub.w	sp, sp, #732	; 0x2dc
    9660:	468b      	mov	fp, r1
    9662:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
    9666:	af02      	add	r7, sp, #8
    9668:	048c      	lsls	r4, r1, #18
    966a:	4681      	mov	r9, r0
    966c:	64fa      	str	r2, [r7, #76]	; 0x4c
    966e:	633b      	str	r3, [r7, #48]	; 0x30
    9670:	d409      	bmi.n	9686 <__ssvfscanf_r+0x32>
    9672:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
    9676:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
    967a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    967e:	f8ab 100c 	strh.w	r1, [fp, #12]
    9682:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
    9686:	2300      	movs	r3, #0
    9688:	461c      	mov	r4, r3
    968a:	2208      	movs	r2, #8
    968c:	4619      	mov	r1, r3
    968e:	f107 0058 	add.w	r0, r7, #88	; 0x58
    9692:	62fb      	str	r3, [r7, #44]	; 0x2c
    9694:	46a2      	mov	sl, r4
    9696:	f7fc fb07 	bl	5ca8 <memset>
    969a:	643c      	str	r4, [r7, #64]	; 0x40
    969c:	627c      	str	r4, [r7, #36]	; 0x24
    969e:	63bc      	str	r4, [r7, #56]	; 0x38
    96a0:	647c      	str	r4, [r7, #68]	; 0x44
    96a2:	4b83      	ldr	r3, [pc, #524]	; (98b0 <__ssvfscanf_r+0x25c>)
    96a4:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
    96a8:	f7fc fc2e 	bl	5f08 <__locale_mb_cur_max>
    96ac:	f107 0258 	add.w	r2, r7, #88	; 0x58
    96b0:	4603      	mov	r3, r0
    96b2:	9200      	str	r2, [sp, #0]
    96b4:	f107 0154 	add.w	r1, r7, #84	; 0x54
    96b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    96ba:	4648      	mov	r0, r9
    96bc:	47a0      	blx	r4
    96be:	1e05      	subs	r5, r0, #0
    96c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    96c2:	db33      	blt.n	972c <__ssvfscanf_r+0xd8>
    96c4:	442b      	add	r3, r5
    96c6:	64fb      	str	r3, [r7, #76]	; 0x4c
    96c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    96ca:	462e      	mov	r6, r5
    96cc:	2b00      	cmp	r3, #0
    96ce:	f000 80b6 	beq.w	983e <__ssvfscanf_r+0x1ea>
    96d2:	2d01      	cmp	r5, #1
    96d4:	d038      	beq.n	9748 <__ssvfscanf_r+0xf4>
    96d6:	2b25      	cmp	r3, #37	; 0x25
    96d8:	d040      	beq.n	975c <__ssvfscanf_r+0x108>
    96da:	2d00      	cmp	r5, #0
    96dc:	d0e1      	beq.n	96a2 <__ssvfscanf_r+0x4e>
    96de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    96e0:	1b9e      	subs	r6, r3, r6
    96e2:	f8db 3004 	ldr.w	r3, [fp, #4]
    96e6:	1e74      	subs	r4, r6, #1
    96e8:	2b00      	cmp	r3, #0
    96ea:	f340 8098 	ble.w	981e <__ssvfscanf_r+0x1ca>
    96ee:	f8db 1000 	ldr.w	r1, [fp]
    96f2:	f894 c001 	ldrb.w	ip, [r4, #1]
    96f6:	f891 e000 	ldrb.w	lr, [r1]
    96fa:	1ca3      	adds	r3, r4, #2
    96fc:	eb0a 0003 	add.w	r0, sl, r3
    9700:	45e6      	cmp	lr, ip
    9702:	f101 0101 	add.w	r1, r1, #1
    9706:	eba3 0206 	sub.w	r2, r3, r6
    970a:	f104 0401 	add.w	r4, r4, #1
    970e:	eba0 0006 	sub.w	r0, r0, r6
    9712:	f040 8094 	bne.w	983e <__ssvfscanf_r+0x1ea>
    9716:	f8db 3004 	ldr.w	r3, [fp, #4]
    971a:	f8cb 1000 	str.w	r1, [fp]
    971e:	3b01      	subs	r3, #1
    9720:	42aa      	cmp	r2, r5
    9722:	f8cb 3004 	str.w	r3, [fp, #4]
    9726:	dbdf      	blt.n	96e8 <__ssvfscanf_r+0x94>
    9728:	4682      	mov	sl, r0
    972a:	e7ba      	b.n	96a2 <__ssvfscanf_r+0x4e>
    972c:	3301      	adds	r3, #1
    972e:	64fb      	str	r3, [r7, #76]	; 0x4c
    9730:	2208      	movs	r2, #8
    9732:	f64f 73fd 	movw	r3, #65533	; 0xfffd
    9736:	2100      	movs	r1, #0
    9738:	f107 0058 	add.w	r0, r7, #88	; 0x58
    973c:	657b      	str	r3, [r7, #84]	; 0x54
    973e:	f7fc fab3 	bl	5ca8 <memset>
    9742:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    9744:	2b00      	cmp	r3, #0
    9746:	d07a      	beq.n	983e <__ssvfscanf_r+0x1ea>
    9748:	4e5a      	ldr	r6, [pc, #360]	; (98b4 <__ssvfscanf_r+0x260>)
    974a:	5cf2      	ldrb	r2, [r6, r3]
    974c:	0710      	lsls	r0, r2, #28
    974e:	f100 851c 	bmi.w	a18a <__ssvfscanf_r+0xb36>
    9752:	2b25      	cmp	r3, #37	; 0x25
    9754:	f040 8086 	bne.w	9864 <__ssvfscanf_r+0x210>
    9758:	2501      	movs	r5, #1
    975a:	462e      	mov	r6, r5
    975c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    975e:	2400      	movs	r4, #0
    9760:	7802      	ldrb	r2, [r0, #0]
    9762:	46a0      	mov	r8, r4
    9764:	f1a2 0325 	sub.w	r3, r2, #37	; 0x25
    9768:	1c41      	adds	r1, r0, #1
    976a:	2b55      	cmp	r3, #85	; 0x55
    976c:	d867      	bhi.n	983e <__ssvfscanf_r+0x1ea>
    976e:	e8df f013 	tbh	[pc, r3, lsl #1]
    9772:	070a      	.short	0x070a
    9774:	00660066 	.word	0x00660066
    9778:	00660066 	.word	0x00660066
    977c:	00660701 	.word	0x00660701
    9780:	00660066 	.word	0x00660066
    9784:	00660066 	.word	0x00660066
    9788:	060c060c 	.word	0x060c060c
    978c:	060c060c 	.word	0x060c060c
    9790:	060c060c 	.word	0x060c060c
    9794:	060c060c 	.word	0x060c060c
    9798:	060c060c 	.word	0x060c060c
    979c:	00660066 	.word	0x00660066
    97a0:	00660066 	.word	0x00660066
    97a4:	00660066 	.word	0x00660066
    97a8:	06180066 	.word	0x06180066
    97ac:	048e0066 	.word	0x048e0066
    97b0:	061804c9 	.word	0x061804c9
    97b4:	06180618 	.word	0x06180618
    97b8:	00660066 	.word	0x00660066
    97bc:	00660066 	.word	0x00660066
    97c0:	00660082 	.word	0x00660082
    97c4:	04bf0066 	.word	0x04bf0066
    97c8:	00660066 	.word	0x00660066
    97cc:	00890066 	.word	0x00890066
    97d0:	00660066 	.word	0x00660066
    97d4:	00660066 	.word	0x00660066
    97d8:	0066066b 	.word	0x0066066b
    97dc:	06dd0066 	.word	0x06dd0066
    97e0:	00660066 	.word	0x00660066
    97e4:	00660066 	.word	0x00660066
    97e8:	06180066 	.word	0x06180066
    97ec:	04900066 	.word	0x04900066
    97f0:	061804cb 	.word	0x061804cb
    97f4:	06180618 	.word	0x06180618
    97f8:	06d206be 	.word	0x06d206be
    97fc:	00660082 	.word	0x00660082
    9800:	06f306e7 	.word	0x06f306e7
    9804:	04c106ac 	.word	0x04c106ac
    9808:	006606da 	.word	0x006606da
    980c:	008b0066 	.word	0x008b0066
    9810:	06ca007d 	.word	0x06ca007d
    9814:	00660066 	.word	0x00660066
    9818:	0066066b 	.word	0x0066066b
    981c:	007d      	.short	0x007d
    981e:	4659      	mov	r1, fp
    9820:	4648      	mov	r0, r9
    9822:	f003 f935 	bl	ca90 <__ssrefill_r>
    9826:	2800      	cmp	r0, #0
    9828:	f43f af61 	beq.w	96ee <__ssvfscanf_r+0x9a>
    982c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    982e:	2b00      	cmp	r3, #0
    9830:	f001 8052 	beq.w	a8d8 <__ssvfscanf_r+0x1284>
    9834:	f8bb 300c 	ldrh.w	r3, [fp, #12]
    9838:	065a      	lsls	r2, r3, #25
    983a:	f101 804d 	bmi.w	a8d8 <__ssvfscanf_r+0x1284>
    983e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    9840:	b143      	cbz	r3, 9854 <__ssvfscanf_r+0x200>
    9842:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    9844:	f8d3 8000 	ldr.w	r8, [r3]
    9848:	f1b8 0f00 	cmp.w	r8, #0
    984c:	d002      	beq.n	9854 <__ssvfscanf_r+0x200>
    984e:	4640      	mov	r0, r8
    9850:	f7fa fb02 	bl	3e58 <free>
    9854:	6c78      	ldr	r0, [r7, #68]	; 0x44
    9856:	f507 7735 	add.w	r7, r7, #724	; 0x2d4
    985a:	46bd      	mov	sp, r7
    985c:	ecbd 8b02 	vpop	{d8}
    9860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9864:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    9866:	2501      	movs	r5, #1
    9868:	1e5e      	subs	r6, r3, #1
    986a:	e73a      	b.n	96e2 <__ssvfscanf_r+0x8e>
    986c:	0723      	lsls	r3, r4, #28
    986e:	d1e6      	bne.n	983e <__ssvfscanf_r+0x1ea>
    9870:	7842      	ldrb	r2, [r0, #1]
    9872:	4608      	mov	r0, r1
    9874:	e776      	b.n	9764 <__ssvfscanf_r+0x110>
    9876:	0722      	lsls	r2, r4, #28
    9878:	d1e1      	bne.n	983e <__ssvfscanf_r+0x1ea>
    987a:	7842      	ldrb	r2, [r0, #1]
    987c:	f044 0402 	orr.w	r4, r4, #2
    9880:	4608      	mov	r0, r1
    9882:	e76f      	b.n	9764 <__ssvfscanf_r+0x110>
    9884:	f044 0401 	orr.w	r4, r4, #1
    9888:	64f9      	str	r1, [r7, #76]	; 0x4c
    988a:	2502      	movs	r5, #2
    988c:	f8db 3004 	ldr.w	r3, [fp, #4]
    9890:	2b00      	cmp	r3, #0
    9892:	f340 8408 	ble.w	a0a6 <__ssvfscanf_r+0xa52>
    9896:	0660      	lsls	r0, r4, #25
    9898:	f140 840f 	bpl.w	a0ba <__ssvfscanf_r+0xa66>
    989c:	1e6b      	subs	r3, r5, #1
    989e:	2b03      	cmp	r3, #3
    98a0:	f201 80eb 	bhi.w	aa7a <__ssvfscanf_r+0x1426>
    98a4:	e8df f013 	tbh	[pc, r3, lsl #1]
    98a8:	01f1027b 	.word	0x01f1027b
    98ac:	0008014b 	.word	0x0008014b
    98b0:	20007c48 	.word	0x20007c48
    98b4:	2000073d 	.word	0x2000073d
    98b8:	4648      	mov	r0, r9
    98ba:	f001 fcaf 	bl	b21c <_localeconv_r>
    98be:	6803      	ldr	r3, [r0, #0]
    98c0:	623b      	str	r3, [r7, #32]
    98c2:	f108 33ff 	add.w	r3, r8, #4294967295
    98c6:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
    98ca:	f240 855a 	bls.w	a382 <__ssvfscanf_r+0xd2e>
    98ce:	f46f 75ae 	mvn.w	r5, #348	; 0x15c
    98d2:	eb08 0305 	add.w	r3, r8, r5
    98d6:	613b      	str	r3, [r7, #16]
    98d8:	f240 185d 	movw	r8, #349	; 0x15d
    98dc:	2600      	movs	r6, #0
    98de:	f507 73b8 	add.w	r3, r7, #368	; 0x170
    98e2:	ee08 9a10 	vmov	s16, r9
    98e6:	e9c7 6605 	strd	r6, r6, [r7, #20]
    98ea:	63fe      	str	r6, [r7, #60]	; 0x3c
    98ec:	637e      	str	r6, [r7, #52]	; 0x34
    98ee:	61fe      	str	r6, [r7, #28]
    98f0:	64be      	str	r6, [r7, #72]	; 0x48
    98f2:	f444 64f0 	orr.w	r4, r4, #1920	; 0x780
    98f6:	62bb      	str	r3, [r7, #40]	; 0x28
    98f8:	461d      	mov	r5, r3
    98fa:	4646      	mov	r6, r8
    98fc:	f8db 1000 	ldr.w	r1, [fp]
    9900:	780a      	ldrb	r2, [r1, #0]
    9902:	f1a2 032b 	sub.w	r3, r2, #43	; 0x2b
    9906:	2b4e      	cmp	r3, #78	; 0x4e
    9908:	d850      	bhi.n	99ac <__ssvfscanf_r+0x358>
    990a:	e8df f013 	tbh	[pc, r3, lsl #1]
    990e:	037e      	.short	0x037e
    9910:	037e004f 	.word	0x037e004f
    9914:	004f004f 	.word	0x004f004f
    9918:	00a600a3 	.word	0x00a600a3
    991c:	00a600a6 	.word	0x00a600a6
    9920:	00a600a6 	.word	0x00a600a6
    9924:	00a600a6 	.word	0x00a600a6
    9928:	00a600a6 	.word	0x00a600a6
    992c:	004f004f 	.word	0x004f004f
    9930:	004f004f 	.word	0x004f004f
    9934:	004f004f 	.word	0x004f004f
    9938:	0374004f 	.word	0x0374004f
    993c:	030b030b 	.word	0x030b030b
    9940:	039e030b 	.word	0x039e030b
    9944:	004f0394 	.word	0x004f0394
    9948:	0384004f 	.word	0x0384004f
    994c:	004f004f 	.word	0x004f004f
    9950:	004f004f 	.word	0x004f004f
    9954:	004f035d 	.word	0x004f035d
    9958:	004f033a 	.word	0x004f033a
    995c:	004f004f 	.word	0x004f004f
    9960:	004f0333 	.word	0x004f0333
    9964:	004f004f 	.word	0x004f004f
    9968:	036d031e 	.word	0x036d031e
    996c:	004f004f 	.word	0x004f004f
    9970:	004f004f 	.word	0x004f004f
    9974:	004f004f 	.word	0x004f004f
    9978:	0374004f 	.word	0x0374004f
    997c:	030b030b 	.word	0x030b030b
    9980:	039e030b 	.word	0x039e030b
    9984:	004f0394 	.word	0x004f0394
    9988:	0384004f 	.word	0x0384004f
    998c:	004f004f 	.word	0x004f004f
    9990:	004f004f 	.word	0x004f004f
    9994:	004f035d 	.word	0x004f035d
    9998:	004f033a 	.word	0x004f033a
    999c:	004f004f 	.word	0x004f004f
    99a0:	004f0333 	.word	0x004f0333
    99a4:	004f004f 	.word	0x004f004f
    99a8:	036d031e 	.word	0x036d031e
    99ac:	05a0      	lsls	r0, r4, #22
    99ae:	d56f      	bpl.n	9a90 <__ssvfscanf_r+0x43c>
    99b0:	6a38      	ldr	r0, [r7, #32]
    99b2:	7803      	ldrb	r3, [r0, #0]
    99b4:	4293      	cmp	r3, r2
    99b6:	d16b      	bne.n	9a90 <__ssvfscanf_r+0x43c>
    99b8:	e9c7 4502 	strd	r4, r5, [r7, #8]
    99bc:	607e      	str	r6, [r7, #4]
    99be:	4681      	mov	r9, r0
    99c0:	ee18 6a10 	vmov	r6, s16
    99c4:	f04f 0800 	mov.w	r8, #0
    99c8:	465c      	mov	r4, fp
    99ca:	e007      	b.n	99dc <__ssvfscanf_r+0x388>
    99cc:	6021      	str	r1, [r4, #0]
    99ce:	f891 e000 	ldrb.w	lr, [r1]
    99d2:	f899 0000 	ldrb.w	r0, [r9]
    99d6:	4586      	cmp	lr, r0
    99d8:	d11c      	bne.n	9a14 <__ssvfscanf_r+0x3c0>
    99da:	46da      	mov	sl, fp
    99dc:	f819 0f01 	ldrb.w	r0, [r9, #1]!
    99e0:	4645      	mov	r5, r8
    99e2:	f10a 0b01 	add.w	fp, sl, #1
    99e6:	3101      	adds	r1, #1
    99e8:	f108 0801 	add.w	r8, r8, #1
    99ec:	2800      	cmp	r0, #0
    99ee:	f000 8664 	beq.w	a6ba <__ssvfscanf_r+0x1066>
    99f2:	6860      	ldr	r0, [r4, #4]
    99f4:	3801      	subs	r0, #1
    99f6:	2800      	cmp	r0, #0
    99f8:	6060      	str	r0, [r4, #4]
    99fa:	dce7      	bgt.n	99cc <__ssvfscanf_r+0x378>
    99fc:	4621      	mov	r1, r4
    99fe:	4630      	mov	r0, r6
    9a00:	f003 f846 	bl	ca90 <__ssrefill_r>
    9a04:	b930      	cbnz	r0, 9a14 <__ssvfscanf_r+0x3c0>
    9a06:	6821      	ldr	r1, [r4, #0]
    9a08:	f899 0000 	ldrb.w	r0, [r9]
    9a0c:	f891 e000 	ldrb.w	lr, [r1]
    9a10:	4586      	cmp	lr, r0
    9a12:	d0e2      	beq.n	99da <__ssvfscanf_r+0x386>
    9a14:	46a3      	mov	fp, r4
    9a16:	6a3a      	ldr	r2, [r7, #32]
    9a18:	68bc      	ldr	r4, [r7, #8]
    9a1a:	613d      	str	r5, [r7, #16]
    9a1c:	462b      	mov	r3, r5
    9a1e:	46b1      	mov	r9, r6
    9a20:	6cbe      	ldr	r6, [r7, #72]	; 0x48
    9a22:	68fd      	ldr	r5, [r7, #12]
    9a24:	64bd      	str	r5, [r7, #72]	; 0x48
    9a26:	3301      	adds	r3, #1
    9a28:	465d      	mov	r5, fp
    9a2a:	eb02 0803 	add.w	r8, r2, r3
    9a2e:	46b3      	mov	fp, r6
    9a30:	4626      	mov	r6, r4
    9a32:	4614      	mov	r4, r2
    9a34:	f818 1d01 	ldrb.w	r1, [r8, #-1]!
    9a38:	462a      	mov	r2, r5
    9a3a:	4648      	mov	r0, r9
    9a3c:	f002 ffe8 	bl	ca10 <_sungetc_r>
    9a40:	4544      	cmp	r4, r8
    9a42:	d1f7      	bne.n	9a34 <__ssvfscanf_r+0x3e0>
    9a44:	693b      	ldr	r3, [r7, #16]
    9a46:	4634      	mov	r4, r6
    9a48:	ebaa 0a03 	sub.w	sl, sl, r3
    9a4c:	465e      	mov	r6, fp
    9a4e:	46ab      	mov	fp, r5
    9a50:	6cbd      	ldr	r5, [r7, #72]	; 0x48
    9a52:	e020      	b.n	9a96 <__ssvfscanf_r+0x442>
    9a54:	05e0      	lsls	r0, r4, #23
    9a56:	f100 8501 	bmi.w	a45c <__ssvfscanf_r+0xe08>
    9a5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    9a5c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    9a5e:	42d9      	cmn	r1, r3
    9a60:	d116      	bne.n	9a90 <__ssvfscanf_r+0x43c>
    9a62:	f424 74c0 	bic.w	r4, r4, #384	; 0x180
    9a66:	f805 2b01 	strb.w	r2, [r5], #1
    9a6a:	3e01      	subs	r6, #1
    9a6c:	f8db 3004 	ldr.w	r3, [fp, #4]
    9a70:	3b01      	subs	r3, #1
    9a72:	2b00      	cmp	r3, #0
    9a74:	f10a 0a01 	add.w	sl, sl, #1
    9a78:	f8cb 3004 	str.w	r3, [fp, #4]
    9a7c:	f340 836f 	ble.w	a15e <__ssvfscanf_r+0xb0a>
    9a80:	f8db 3000 	ldr.w	r3, [fp]
    9a84:	3301      	adds	r3, #1
    9a86:	f8cb 3000 	str.w	r3, [fp]
    9a8a:	2e00      	cmp	r6, #0
    9a8c:	f47f af36 	bne.w	98fc <__ssvfscanf_r+0x2a8>
    9a90:	6cbe      	ldr	r6, [r7, #72]	; 0x48
    9a92:	ee18 9a10 	vmov	r9, s16
    9a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9a98:	2b00      	cmp	r3, #0
    9a9a:	f040 82dc 	bne.w	a056 <__ssvfscanf_r+0xa02>
    9a9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9aa0:	3b01      	subs	r3, #1
    9aa2:	2b01      	cmp	r3, #1
    9aa4:	f241 8016 	bls.w	aad4 <__ssvfscanf_r+0x1480>
    9aa8:	1e73      	subs	r3, r6, #1
    9aaa:	2b06      	cmp	r3, #6
    9aac:	f240 8627 	bls.w	a6fe <__ssvfscanf_r+0x10aa>
    9ab0:	05e3      	lsls	r3, r4, #23
    9ab2:	d51b      	bpl.n	9aec <__ssvfscanf_r+0x498>
    9ab4:	0566      	lsls	r6, r4, #21
    9ab6:	f101 80b5 	bmi.w	ac24 <__ssvfscanf_r+0x15d0>
    9aba:	f815 1c01 	ldrb.w	r1, [r5, #-1]
    9abe:	2965      	cmp	r1, #101	; 0x65
    9ac0:	f105 33ff 	add.w	r3, r5, #4294967295
    9ac4:	f10a 36ff 	add.w	r6, sl, #4294967295
    9ac8:	d00a      	beq.n	9ae0 <__ssvfscanf_r+0x48c>
    9aca:	2945      	cmp	r1, #69	; 0x45
    9acc:	d008      	beq.n	9ae0 <__ssvfscanf_r+0x48c>
    9ace:	465a      	mov	r2, fp
    9ad0:	4648      	mov	r0, r9
    9ad2:	f002 ff9d 	bl	ca10 <_sungetc_r>
    9ad6:	f815 1c02 	ldrb.w	r1, [r5, #-2]
    9ada:	f1aa 0602 	sub.w	r6, sl, #2
    9ade:	1eab      	subs	r3, r5, #2
    9ae0:	465a      	mov	r2, fp
    9ae2:	4648      	mov	r0, r9
    9ae4:	46b2      	mov	sl, r6
    9ae6:	461d      	mov	r5, r3
    9ae8:	f002 ff92 	bl	ca10 <_sungetc_r>
    9aec:	f014 0210 	ands.w	r2, r4, #16
    9af0:	f47f add7 	bne.w	96a2 <__ssvfscanf_r+0x4e>
    9af4:	f404 63c0 	and.w	r3, r4, #1536	; 0x600
    9af8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    9afc:	702a      	strb	r2, [r5, #0]
    9afe:	f000 84d2 	beq.w	a4a6 <__ssvfscanf_r+0xe52>
    9b02:	69bb      	ldr	r3, [r7, #24]
    9b04:	2b00      	cmp	r3, #0
    9b06:	f040 872c 	bne.w	a962 <__ssvfscanf_r+0x130e>
    9b0a:	4648      	mov	r0, r9
    9b0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    9b0e:	2200      	movs	r2, #0
    9b10:	f7fb fd96 	bl	5640 <_strtod_r>
    9b14:	07e0      	lsls	r0, r4, #31
    9b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    9b18:	f100 85c9 	bmi.w	a6ae <__ssvfscanf_r+0x105a>
    9b1c:	07a1      	lsls	r1, r4, #30
    9b1e:	f100 85c6 	bmi.w	a6ae <__ssvfscanf_r+0x105a>
    9b22:	eeb4 0b40 	vcmp.f64	d0, d0
    9b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9b2a:	f853 4b04 	ldr.w	r4, [r3], #4
    9b2e:	f180 86f4 	bvs.w	a91a <__ssvfscanf_r+0x12c6>
    9b32:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    9b36:	633b      	str	r3, [r7, #48]	; 0x30
    9b38:	ed84 0a00 	vstr	s0, [r4]
    9b3c:	e3a2      	b.n	a284 <__ssvfscanf_r+0xc30>
    9b3e:	f108 33ff 	add.w	r3, r8, #4294967295
    9b42:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
    9b46:	f240 83a2 	bls.w	a28e <__ssvfscanf_r+0xc3a>
    9b4a:	f46f 72ae 	mvn.w	r2, #348	; 0x15c
    9b4e:	eb08 0302 	add.w	r3, r8, r2
    9b52:	63fb      	str	r3, [r7, #60]	; 0x3c
    9b54:	f240 185d 	movw	r8, #349	; 0x15d
    9b58:	f507 73b8 	add.w	r3, r7, #368	; 0x170
    9b5c:	2200      	movs	r2, #0
    9b5e:	6bbe      	ldr	r6, [r7, #56]	; 0x38
    9b60:	62bb      	str	r3, [r7, #40]	; 0x28
    9b62:	4659      	mov	r1, fp
    9b64:	f444 6458 	orr.w	r4, r4, #3456	; 0xd80
    9b68:	46d3      	mov	fp, sl
    9b6a:	461d      	mov	r5, r3
    9b6c:	4692      	mov	sl, r2
    9b6e:	680a      	ldr	r2, [r1, #0]
    9b70:	7810      	ldrb	r0, [r2, #0]
    9b72:	f1a0 032b 	sub.w	r3, r0, #43	; 0x2b
    9b76:	2b4d      	cmp	r3, #77	; 0x4d
    9b78:	d860      	bhi.n	9c3c <__ssvfscanf_r+0x5e8>
    9b7a:	e8df f013 	tbh	[pc, r3, lsl #1]
    9b7e:	0282      	.short	0x0282
    9b80:	0282005f 	.word	0x0282005f
    9b84:	005f005f 	.word	0x005f005f
    9b88:	01e002cd 	.word	0x01e002cd
    9b8c:	01e001e0 	.word	0x01e001e0
    9b90:	01e001e0 	.word	0x01e001e0
    9b94:	01e001e0 	.word	0x01e001e0
    9b98:	026f026f 	.word	0x026f026f
    9b9c:	005f005f 	.word	0x005f005f
    9ba0:	005f005f 	.word	0x005f005f
    9ba4:	005f005f 	.word	0x005f005f
    9ba8:	004e005f 	.word	0x004e005f
    9bac:	004e004e 	.word	0x004e004e
    9bb0:	004e004e 	.word	0x004e004e
    9bb4:	005f004e 	.word	0x005f004e
    9bb8:	005f005f 	.word	0x005f005f
    9bbc:	005f005f 	.word	0x005f005f
    9bc0:	005f005f 	.word	0x005f005f
    9bc4:	005f005f 	.word	0x005f005f
    9bc8:	005f005f 	.word	0x005f005f
    9bcc:	005f005f 	.word	0x005f005f
    9bd0:	005f005f 	.word	0x005f005f
    9bd4:	005f005f 	.word	0x005f005f
    9bd8:	005f0276 	.word	0x005f0276
    9bdc:	005f005f 	.word	0x005f005f
    9be0:	005f005f 	.word	0x005f005f
    9be4:	005f005f 	.word	0x005f005f
    9be8:	004e005f 	.word	0x004e005f
    9bec:	004e004e 	.word	0x004e004e
    9bf0:	004e004e 	.word	0x004e004e
    9bf4:	005f004e 	.word	0x005f004e
    9bf8:	005f005f 	.word	0x005f005f
    9bfc:	005f005f 	.word	0x005f005f
    9c00:	005f005f 	.word	0x005f005f
    9c04:	005f005f 	.word	0x005f005f
    9c08:	005f005f 	.word	0x005f005f
    9c0c:	005f005f 	.word	0x005f005f
    9c10:	005f005f 	.word	0x005f005f
    9c14:	005f005f 	.word	0x005f005f
    9c18:	0276      	.short	0x0276
    9c1a:	2e0a      	cmp	r6, #10
    9c1c:	dd0e      	ble.n	9c3c <__ssvfscanf_r+0x5e8>
    9c1e:	f424 6438 	bic.w	r4, r4, #2944	; 0xb80
    9c22:	684b      	ldr	r3, [r1, #4]
    9c24:	f805 0b01 	strb.w	r0, [r5], #1
    9c28:	3b01      	subs	r3, #1
    9c2a:	2b00      	cmp	r3, #0
    9c2c:	604b      	str	r3, [r1, #4]
    9c2e:	f340 828d 	ble.w	a14c <__ssvfscanf_r+0xaf8>
    9c32:	3201      	adds	r2, #1
    9c34:	600a      	str	r2, [r1, #0]
    9c36:	f1b8 0801 	subs.w	r8, r8, #1
    9c3a:	d198      	bne.n	9b6e <__ssvfscanf_r+0x51a>
    9c3c:	05e0      	lsls	r0, r4, #23
    9c3e:	46d0      	mov	r8, sl
    9c40:	63be      	str	r6, [r7, #56]	; 0x38
    9c42:	46da      	mov	sl, fp
    9c44:	468b      	mov	fp, r1
    9c46:	d507      	bpl.n	9c58 <__ssvfscanf_r+0x604>
    9c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9c4a:	429d      	cmp	r5, r3
    9c4c:	f200 8422 	bhi.w	a494 <__ssvfscanf_r+0xe40>
    9c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9c52:	429d      	cmp	r5, r3
    9c54:	f43f adf3 	beq.w	983e <__ssvfscanf_r+0x1ea>
    9c58:	f014 0210 	ands.w	r2, r4, #16
    9c5c:	d110      	bne.n	9c80 <__ssvfscanf_r+0x62c>
    9c5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    9c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    9c62:	6afe      	ldr	r6, [r7, #44]	; 0x2c
    9c64:	702a      	strb	r2, [r5, #0]
    9c66:	4648      	mov	r0, r9
    9c68:	47b0      	blx	r6
    9c6a:	06a1      	lsls	r1, r4, #26
    9c6c:	f140 8408 	bpl.w	a480 <__ssvfscanf_r+0xe2c>
    9c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    9c72:	f853 2b04 	ldr.w	r2, [r3], #4
    9c76:	6010      	str	r0, [r2, #0]
    9c78:	633b      	str	r3, [r7, #48]	; 0x30
    9c7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    9c7c:	3301      	adds	r3, #1
    9c7e:	647b      	str	r3, [r7, #68]	; 0x44
    9c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9c82:	1aed      	subs	r5, r5, r3
    9c84:	4445      	add	r5, r8
    9c86:	44aa      	add	sl, r5
    9c88:	e50b      	b.n	96a2 <__ssvfscanf_r+0x4e>
    9c8a:	f1b8 0f00 	cmp.w	r8, #0
    9c8e:	bf08      	it	eq
    9c90:	f04f 38ff 	moveq.w	r8, #4294967295
    9c94:	07e0      	lsls	r0, r4, #31
    9c96:	f140 8295 	bpl.w	a1c4 <__ssvfscanf_r+0xb70>
    9c9a:	f014 0310 	ands.w	r3, r4, #16
    9c9e:	637b      	str	r3, [r7, #52]	; 0x34
    9ca0:	f040 8474 	bne.w	a58c <__ssvfscanf_r+0xf38>
    9ca4:	0621      	lsls	r1, r4, #24
    9ca6:	f140 8666 	bpl.w	a976 <__ssvfscanf_r+0x1322>
    9caa:	6b3c      	ldr	r4, [r7, #48]	; 0x30
    9cac:	f854 3b04 	ldr.w	r3, [r4], #4
    9cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
    9cb2:	2b00      	cmp	r3, #0
    9cb4:	f43f adc3 	beq.w	983e <__ssvfscanf_r+0x1ea>
    9cb8:	2080      	movs	r0, #128	; 0x80
    9cba:	f7fa f8c5 	bl	3e48 <malloc>
    9cbe:	64b8      	str	r0, [r7, #72]	; 0x48
    9cc0:	2800      	cmp	r0, #0
    9cc2:	f000 8778 	beq.w	abb6 <__ssvfscanf_r+0x1562>
    9cc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9cc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
    9cca:	601a      	str	r2, [r3, #0]
    9ccc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    9cce:	88d5      	ldrh	r5, [r2, #6]
    9cd0:	8893      	ldrh	r3, [r2, #4]
    9cd2:	429d      	cmp	r5, r3
    9cd4:	f080 8552 	bcs.w	a77c <__ssvfscanf_r+0x1128>
    9cd8:	6810      	ldr	r0, [r2, #0]
    9cda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9cdc:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
    9ce0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    9ce2:	633c      	str	r4, [r7, #48]	; 0x30
    9ce4:	3501      	adds	r5, #1
    9ce6:	80dd      	strh	r5, [r3, #6]
    9ce8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    9cea:	62bb      	str	r3, [r7, #40]	; 0x28
    9cec:	2320      	movs	r3, #32
    9cee:	623b      	str	r3, [r7, #32]
    9cf0:	f8db 3000 	ldr.w	r3, [fp]
    9cf4:	4eb1      	ldr	r6, [pc, #708]	; (9fbc <__ssvfscanf_r+0x968>)
    9cf6:	781b      	ldrb	r3, [r3, #0]
    9cf8:	5cf3      	ldrb	r3, [r6, r3]
    9cfa:	f013 0308 	ands.w	r3, r3, #8
    9cfe:	f040 84bb 	bne.w	a678 <__ssvfscanf_r+0x1024>
    9d02:	6a7c      	ldr	r4, [r7, #36]	; 0x24
    9d04:	627e      	str	r6, [r7, #36]	; 0x24
    9d06:	461d      	mov	r5, r3
    9d08:	f7fc f8fe 	bl	5f08 <__locale_mb_cur_max>
    9d0c:	42a8      	cmp	r0, r5
    9d0e:	f43f ad8d 	beq.w	982c <__ssvfscanf_r+0x1d8>
    9d12:	e9db 3200 	ldrd	r3, r2, [fp]
    9d16:	f507 70b8 	add.w	r0, r7, #368	; 0x170
    9d1a:	f813 1b01 	ldrb.w	r1, [r3], #1
    9d1e:	5541      	strb	r1, [r0, r5]
    9d20:	3a01      	subs	r2, #1
    9d22:	2c03      	cmp	r4, #3
    9d24:	e9cb 3200 	strd	r3, r2, [fp]
    9d28:	f105 0501 	add.w	r5, r5, #1
    9d2c:	f107 0668 	add.w	r6, r7, #104	; 0x68
    9d30:	d102      	bne.n	9d38 <__ssvfscanf_r+0x6e4>
    9d32:	6833      	ldr	r3, [r6, #0]
    9d34:	2b04      	cmp	r3, #4
    9d36:	d004      	beq.n	9d42 <__ssvfscanf_r+0x6ee>
    9d38:	2208      	movs	r2, #8
    9d3a:	2100      	movs	r1, #0
    9d3c:	4630      	mov	r0, r6
    9d3e:	f7fb ffb3 	bl	5ca8 <memset>
    9d42:	f507 72b8 	add.w	r2, r7, #368	; 0x170
    9d46:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    9d48:	9600      	str	r6, [sp, #0]
    9d4a:	462b      	mov	r3, r5
    9d4c:	4648      	mov	r0, r9
    9d4e:	f002 fc8b 	bl	c668 <_mbrtowc_r>
    9d52:	1c42      	adds	r2, r0, #1
    9d54:	4604      	mov	r4, r0
    9d56:	f43f ad69 	beq.w	982c <__ssvfscanf_r+0x1d8>
    9d5a:	2800      	cmp	r0, #0
    9d5c:	f040 8478 	bne.w	a650 <__ssvfscanf_r+0xffc>
    9d60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    9d62:	6018      	str	r0, [r3, #0]
    9d64:	f002 fcdc 	bl	c720 <iswspace>
    9d68:	2800      	cmp	r0, #0
    9d6a:	f040 865c 	bne.w	aa26 <__ssvfscanf_r+0x13d2>
    9d6e:	44aa      	add	sl, r5
    9d70:	f108 38ff 	add.w	r8, r8, #4294967295
    9d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9d76:	2b00      	cmp	r3, #0
    9d78:	f040 8633 	bne.w	a9e2 <__ssvfscanf_r+0x138e>
    9d7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    9d7e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    9d80:	3304      	adds	r3, #4
    9d82:	64bb      	str	r3, [r7, #72]	; 0x48
    9d84:	2a00      	cmp	r2, #0
    9d86:	f000 862c 	beq.w	a9e2 <__ssvfscanf_r+0x138e>
    9d8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9d8c:	1a9d      	subs	r5, r3, r2
    9d8e:	6a3b      	ldr	r3, [r7, #32]
    9d90:	ebb3 0fa5 	cmp.w	r3, r5, asr #2
    9d94:	f240 8756 	bls.w	ac44 <__ssvfscanf_r+0x15f0>
    9d98:	6b7d      	ldr	r5, [r7, #52]	; 0x34
    9d9a:	f000 bc5c 	b.w	a656 <__ssvfscanf_r+0x1002>
    9d9e:	f1b8 0f00 	cmp.w	r8, #0
    9da2:	bf08      	it	eq
    9da4:	f04f 38ff 	moveq.w	r8, #4294967295
    9da8:	07e0      	lsls	r0, r4, #31
    9daa:	f140 827b 	bpl.w	a2a4 <__ssvfscanf_r+0xc50>
    9dae:	f014 0310 	ands.w	r3, r4, #16
    9db2:	62bb      	str	r3, [r7, #40]	; 0x28
    9db4:	f040 83f3 	bne.w	a59e <__ssvfscanf_r+0xf4a>
    9db8:	0621      	lsls	r1, r4, #24
    9dba:	f140 85ed 	bpl.w	a998 <__ssvfscanf_r+0x1344>
    9dbe:	6b3e      	ldr	r6, [r7, #48]	; 0x30
    9dc0:	f856 3b04 	ldr.w	r3, [r6], #4
    9dc4:	623b      	str	r3, [r7, #32]
    9dc6:	2b00      	cmp	r3, #0
    9dc8:	f43f ad39 	beq.w	983e <__ssvfscanf_r+0x1ea>
    9dcc:	2080      	movs	r0, #128	; 0x80
    9dce:	f7fa f83b 	bl	3e48 <malloc>
    9dd2:	4604      	mov	r4, r0
    9dd4:	2800      	cmp	r0, #0
    9dd6:	f000 86ee 	beq.w	abb6 <__ssvfscanf_r+0x1562>
    9dda:	6a3b      	ldr	r3, [r7, #32]
    9ddc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    9dde:	6018      	str	r0, [r3, #0]
    9de0:	88d5      	ldrh	r5, [r2, #6]
    9de2:	8893      	ldrh	r3, [r2, #4]
    9de4:	429d      	cmp	r5, r3
    9de6:	f080 84dd 	bcs.w	a7a4 <__ssvfscanf_r+0x1150>
    9dea:	6810      	ldr	r0, [r2, #0]
    9dec:	6a3b      	ldr	r3, [r7, #32]
    9dee:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
    9df2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    9df4:	633e      	str	r6, [r7, #48]	; 0x30
    9df6:	3501      	adds	r5, #1
    9df8:	80dd      	strh	r5, [r3, #6]
    9dfa:	2320      	movs	r3, #32
    9dfc:	61fc      	str	r4, [r7, #28]
    9dfe:	61bb      	str	r3, [r7, #24]
    9e00:	6a7e      	ldr	r6, [r7, #36]	; 0x24
    9e02:	f8c7 a03c 	str.w	sl, [r7, #60]	; 0x3c
    9e06:	2500      	movs	r5, #0
    9e08:	46c2      	mov	sl, r8
    9e0a:	46a0      	mov	r8, r4
    9e0c:	f7fc f87c 	bl	5f08 <__locale_mb_cur_max>
    9e10:	42a8      	cmp	r0, r5
    9e12:	f43f ad0b 	beq.w	982c <__ssvfscanf_r+0x1d8>
    9e16:	e9db 3200 	ldrd	r3, r2, [fp]
    9e1a:	f813 1b01 	ldrb.w	r1, [r3], #1
    9e1e:	3a01      	subs	r2, #1
    9e20:	f507 70b8 	add.w	r0, r7, #368	; 0x170
    9e24:	e9cb 3200 	strd	r3, r2, [fp]
    9e28:	2e03      	cmp	r6, #3
    9e2a:	f105 0301 	add.w	r3, r5, #1
    9e2e:	5541      	strb	r1, [r0, r5]
    9e30:	64bb      	str	r3, [r7, #72]	; 0x48
    9e32:	f107 0460 	add.w	r4, r7, #96	; 0x60
    9e36:	d102      	bne.n	9e3e <__ssvfscanf_r+0x7ea>
    9e38:	6823      	ldr	r3, [r4, #0]
    9e3a:	2b04      	cmp	r3, #4
    9e3c:	d004      	beq.n	9e48 <__ssvfscanf_r+0x7f4>
    9e3e:	2208      	movs	r2, #8
    9e40:	2100      	movs	r1, #0
    9e42:	4620      	mov	r0, r4
    9e44:	f7fb ff30 	bl	5ca8 <memset>
    9e48:	f507 72b8 	add.w	r2, r7, #368	; 0x170
    9e4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    9e4e:	9400      	str	r4, [sp, #0]
    9e50:	4641      	mov	r1, r8
    9e52:	4648      	mov	r0, r9
    9e54:	f002 fc08 	bl	c668 <_mbrtowc_r>
    9e58:	1c42      	adds	r2, r0, #1
    9e5a:	4606      	mov	r6, r0
    9e5c:	f43f ace6 	beq.w	982c <__ssvfscanf_r+0x1d8>
    9e60:	2800      	cmp	r0, #0
    9e62:	f040 82ca 	bne.w	a3fa <__ssvfscanf_r+0xda6>
    9e66:	f8c8 0000 	str.w	r0, [r8]
    9e6a:	4605      	mov	r5, r0
    9e6c:	f107 0368 	add.w	r3, r7, #104	; 0x68
    9e70:	2208      	movs	r2, #8
    9e72:	2100      	movs	r1, #0
    9e74:	4618      	mov	r0, r3
    9e76:	637b      	str	r3, [r7, #52]	; 0x34
    9e78:	f7fb ff16 	bl	5ca8 <memset>
    9e7c:	4950      	ldr	r1, [pc, #320]	; (9fc0 <__ssvfscanf_r+0x96c>)
    9e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9e80:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    9e84:	462a      	mov	r2, r5
    9e86:	4648      	mov	r0, r9
    9e88:	460d      	mov	r5, r1
    9e8a:	f107 0150 	add.w	r1, r7, #80	; 0x50
    9e8e:	47a8      	blx	r5
    9e90:	2801      	cmp	r0, #1
    9e92:	f000 83d5 	beq.w	a640 <__ssvfscanf_r+0xfec>
    9e96:	2200      	movs	r2, #0
    9e98:	f107 0370 	add.w	r3, r7, #112	; 0x70
    9e9c:	5c9b      	ldrb	r3, [r3, r2]
    9e9e:	2b00      	cmp	r3, #0
    9ea0:	f000 85a1 	beq.w	a9e6 <__ssvfscanf_r+0x1392>
    9ea4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9ea6:	6cba      	ldr	r2, [r7, #72]	; 0x48
    9ea8:	2e03      	cmp	r6, #3
    9eaa:	4413      	add	r3, r2
    9eac:	63fb      	str	r3, [r7, #60]	; 0x3c
    9eae:	f000 83ca 	beq.w	a646 <__ssvfscanf_r+0xff2>
    9eb2:	f10a 3aff 	add.w	sl, sl, #4294967295
    9eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9eb8:	b95b      	cbnz	r3, 9ed2 <__ssvfscanf_r+0x87e>
    9eba:	6a3b      	ldr	r3, [r7, #32]
    9ebc:	f108 0804 	add.w	r8, r8, #4
    9ec0:	b13b      	cbz	r3, 9ed2 <__ssvfscanf_r+0x87e>
    9ec2:	69fb      	ldr	r3, [r7, #28]
    9ec4:	eba8 0403 	sub.w	r4, r8, r3
    9ec8:	69bb      	ldr	r3, [r7, #24]
    9eca:	ebb3 0fa4 	cmp.w	r3, r4, asr #2
    9ece:	f240 8405 	bls.w	a6dc <__ssvfscanf_r+0x1088>
    9ed2:	f8db 3004 	ldr.w	r3, [fp, #4]
    9ed6:	2b00      	cmp	r3, #0
    9ed8:	f04f 0500 	mov.w	r5, #0
    9edc:	f340 8296 	ble.w	a40c <__ssvfscanf_r+0xdb8>
    9ee0:	f1ba 0f00 	cmp.w	sl, #0
    9ee4:	d192      	bne.n	9e0c <__ssvfscanf_r+0x7b8>
    9ee6:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
    9eea:	627e      	str	r6, [r7, #36]	; 0x24
    9eec:	4644      	mov	r4, r8
    9eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9ef0:	2b00      	cmp	r3, #0
    9ef2:	f47f abd6 	bne.w	96a2 <__ssvfscanf_r+0x4e>
    9ef6:	6023      	str	r3, [r4, #0]
    9ef8:	6a3b      	ldr	r3, [r7, #32]
    9efa:	2b00      	cmp	r3, #0
    9efc:	f000 81c2 	beq.w	a284 <__ssvfscanf_r+0xc30>
    9f00:	69fb      	ldr	r3, [r7, #28]
    9f02:	69ba      	ldr	r2, [r7, #24]
    9f04:	1ae1      	subs	r1, r4, r3
    9f06:	108b      	asrs	r3, r1, #2
    9f08:	3301      	adds	r3, #1
    9f0a:	429a      	cmp	r2, r3
    9f0c:	f240 81ba 	bls.w	a284 <__ssvfscanf_r+0xc30>
    9f10:	6a3c      	ldr	r4, [r7, #32]
    9f12:	3104      	adds	r1, #4
    9f14:	6820      	ldr	r0, [r4, #0]
    9f16:	f7fa fa63 	bl	43e0 <realloc>
    9f1a:	2800      	cmp	r0, #0
    9f1c:	f000 81b2 	beq.w	a284 <__ssvfscanf_r+0xc30>
    9f20:	6020      	str	r0, [r4, #0]
    9f22:	e1af      	b.n	a284 <__ssvfscanf_r+0xc30>
    9f24:	0521      	lsls	r1, r4, #20
    9f26:	f57f adb3 	bpl.w	9a90 <__ssvfscanf_r+0x43c>
    9f2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9f2c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    9f2e:	185b      	adds	r3, r3, r1
    9f30:	f47f adae 	bne.w	9a90 <__ssvfscanf_r+0x43c>
    9f34:	64bb      	str	r3, [r7, #72]	; 0x48
    9f36:	f424 74c0 	bic.w	r4, r4, #384	; 0x180
    9f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
    9f3c:	e593      	b.n	9a66 <__ssvfscanf_r+0x412>
    9f3e:	4b21      	ldr	r3, [pc, #132]	; (9fc4 <__ssvfscanf_r+0x970>)
    9f40:	f424 6438 	bic.w	r4, r4, #2944	; 0xb80
    9f44:	f933 6016 	ldrsh.w	r6, [r3, r6, lsl #1]
    9f48:	e66b      	b.n	9c22 <__ssvfscanf_r+0x5ce>
    9f4a:	f404 6318 	and.w	r3, r4, #2432	; 0x980
    9f4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    9f52:	f47f ad9d 	bne.w	9a90 <__ssvfscanf_r+0x43c>
    9f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9f58:	2b01      	cmp	r3, #1
    9f5a:	f47f ad99 	bne.w	9a90 <__ssvfscanf_r+0x43c>
    9f5e:	2330      	movs	r3, #48	; 0x30
    9f60:	f805 3b01 	strb.w	r3, [r5], #1
    9f64:	f424 7480 	bic.w	r4, r4, #256	; 0x100
    9f68:	2300      	movs	r3, #0
    9f6a:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
    9f6e:	3e01      	subs	r6, #1
    9f70:	637b      	str	r3, [r7, #52]	; 0x34
    9f72:	e578      	b.n	9a66 <__ssvfscanf_r+0x412>
    9f74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    9f76:	2b06      	cmp	r3, #6
    9f78:	f040 8574 	bne.w	aa64 <__ssvfscanf_r+0x1410>
    9f7c:	2307      	movs	r3, #7
    9f7e:	64bb      	str	r3, [r7, #72]	; 0x48
    9f80:	e571      	b.n	9a66 <__ssvfscanf_r+0x412>
    9f82:	0523      	lsls	r3, r4, #20
    9f84:	f57f ad84 	bpl.w	9a90 <__ssvfscanf_r+0x43c>
    9f88:	f404 63a0 	and.w	r3, r4, #1280	; 0x500
    9f8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    9f90:	d005      	beq.n	9f9e <__ssvfscanf_r+0x94a>
    9f92:	0561      	lsls	r1, r4, #21
    9f94:	f57f ad7c 	bpl.w	9a90 <__ssvfscanf_r+0x43c>
    9f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9f9a:	2b00      	cmp	r3, #0
    9f9c:	d047      	beq.n	a02e <__ssvfscanf_r+0x9da>
    9f9e:	05a3      	lsls	r3, r4, #22
    9fa0:	d404      	bmi.n	9fac <__ssvfscanf_r+0x958>
    9fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9fa4:	69f9      	ldr	r1, [r7, #28]
    9fa6:	1a5b      	subs	r3, r3, r1
    9fa8:	e9c7 5305 	strd	r5, r3, [r7, #20]
    9fac:	f424 6478 	bic.w	r4, r4, #3968	; 0xf80
    9fb0:	2300      	movs	r3, #0
    9fb2:	f444 74c0 	orr.w	r4, r4, #384	; 0x180
    9fb6:	637b      	str	r3, [r7, #52]	; 0x34
    9fb8:	e555      	b.n	9a66 <__ssvfscanf_r+0x412>
    9fba:	bf00      	nop
    9fbc:	2000073d 	.word	0x2000073d
    9fc0:	20007c48 	.word	0x20007c48
    9fc4:	2000236c 	.word	0x2000236c
    9fc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9fca:	2b00      	cmp	r3, #0
    9fcc:	f000 81ff 	beq.w	a3ce <__ssvfscanf_r+0xd7a>
    9fd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9fd2:	2b02      	cmp	r3, #2
    9fd4:	f000 83b0 	beq.w	a738 <__ssvfscanf_r+0x10e4>
    9fd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    9fda:	2b01      	cmp	r3, #1
    9fdc:	f000 81f1 	beq.w	a3c2 <__ssvfscanf_r+0xd6e>
    9fe0:	2b04      	cmp	r3, #4
    9fe2:	f000 81ee 	beq.w	a3c2 <__ssvfscanf_r+0xd6e>
    9fe6:	e553      	b.n	9a90 <__ssvfscanf_r+0x43c>
    9fe8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    9fea:	2b07      	cmp	r3, #7
    9fec:	f040 853a 	bne.w	aa64 <__ssvfscanf_r+0x1410>
    9ff0:	2308      	movs	r3, #8
    9ff2:	64bb      	str	r3, [r7, #72]	; 0x48
    9ff4:	e537      	b.n	9a66 <__ssvfscanf_r+0x412>
    9ff6:	0520      	lsls	r0, r4, #20
    9ff8:	f100 81f9 	bmi.w	a3ee <__ssvfscanf_r+0xd9a>
    9ffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9ffe:	2b01      	cmp	r3, #1
    a000:	f47f ad46 	bne.w	9a90 <__ssvfscanf_r+0x43c>
    a004:	2302      	movs	r3, #2
    a006:	63fb      	str	r3, [r7, #60]	; 0x3c
    a008:	e52d      	b.n	9a66 <__ssvfscanf_r+0x412>
    a00a:	0623      	lsls	r3, r4, #24
    a00c:	f57f ad40 	bpl.w	9a90 <__ssvfscanf_r+0x43c>
    a010:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    a014:	e527      	b.n	9a66 <__ssvfscanf_r+0x412>
    a016:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a018:	2b00      	cmp	r3, #0
    a01a:	f040 81cc 	bne.w	a3b6 <__ssvfscanf_r+0xd62>
    a01e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a020:	b9b3      	cbnz	r3, a050 <__ssvfscanf_r+0x9fc>
    a022:	f404 63e0 	and.w	r3, r4, #1792	; 0x700
    a026:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
    a02a:	f000 8520 	beq.w	aa6e <__ssvfscanf_r+0x141a>
    a02e:	6cbe      	ldr	r6, [r7, #72]	; 0x48
    a030:	ee18 9a10 	vmov	r9, s16
    a034:	e533      	b.n	9a9e <__ssvfscanf_r+0x44a>
    a036:	0521      	lsls	r1, r4, #20
    a038:	f100 81b7 	bmi.w	a3aa <__ssvfscanf_r+0xd56>
    a03c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a03e:	2b02      	cmp	r3, #2
    a040:	f040 8510 	bne.w	aa64 <__ssvfscanf_r+0x1410>
    a044:	2303      	movs	r3, #3
    a046:	64bb      	str	r3, [r7, #72]	; 0x48
    a048:	e50d      	b.n	9a66 <__ssvfscanf_r+0x412>
    a04a:	0520      	lsls	r0, r4, #20
    a04c:	d59c      	bpl.n	9f88 <__ssvfscanf_r+0x934>
    a04e:	e76c      	b.n	9f2a <__ssvfscanf_r+0x8d6>
    a050:	6cbe      	ldr	r6, [r7, #72]	; 0x48
    a052:	ee18 9a10 	vmov	r9, s16
    a056:	f424 7480 	bic.w	r4, r4, #256	; 0x100
    a05a:	e520      	b.n	9a9e <__ssvfscanf_r+0x44a>
    a05c:	4b8d      	ldr	r3, [pc, #564]	; (a294 <__ssvfscanf_r+0xc40>)
    a05e:	f933 6016 	ldrsh.w	r6, [r3, r6, lsl #1]
    a062:	2e08      	cmp	r6, #8
    a064:	f73f addb 	bgt.w	9c1e <__ssvfscanf_r+0x5ca>
    a068:	e5e8      	b.n	9c3c <__ssvfscanf_r+0x5e8>
    a06a:	f404 63c0 	and.w	r3, r4, #1536	; 0x600
    a06e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    a072:	f47f ade3 	bne.w	9c3c <__ssvfscanf_r+0x5e8>
    a076:	f424 7400 	bic.w	r4, r4, #512	; 0x200
    a07a:	f444 64a0 	orr.w	r4, r4, #1280	; 0x500
    a07e:	2610      	movs	r6, #16
    a080:	e5cf      	b.n	9c22 <__ssvfscanf_r+0x5ce>
    a082:	0623      	lsls	r3, r4, #24
    a084:	f57f adda 	bpl.w	9c3c <__ssvfscanf_r+0x5e8>
    a088:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    a08c:	e5c9      	b.n	9c22 <__ssvfscanf_r+0x5ce>
    a08e:	f044 0401 	orr.w	r4, r4, #1
    a092:	f8db 3004 	ldr.w	r3, [fp, #4]
    a096:	64f9      	str	r1, [r7, #76]	; 0x4c
    a098:	2b00      	cmp	r3, #0
    a09a:	f044 0440 	orr.w	r4, r4, #64	; 0x40
    a09e:	f04f 0500 	mov.w	r5, #0
    a0a2:	f73f abf8 	bgt.w	9896 <__ssvfscanf_r+0x242>
    a0a6:	4659      	mov	r1, fp
    a0a8:	4648      	mov	r0, r9
    a0aa:	f002 fcf1 	bl	ca90 <__ssrefill_r>
    a0ae:	2800      	cmp	r0, #0
    a0b0:	f47f abbc 	bne.w	982c <__ssvfscanf_r+0x1d8>
    a0b4:	0660      	lsls	r0, r4, #25
    a0b6:	f53f abf1 	bmi.w	989c <__ssvfscanf_r+0x248>
    a0ba:	f8db 2000 	ldr.w	r2, [fp]
    a0be:	4e76      	ldr	r6, [pc, #472]	; (a298 <__ssvfscanf_r+0xc44>)
    a0c0:	7813      	ldrb	r3, [r2, #0]
    a0c2:	5cf3      	ldrb	r3, [r6, r3]
    a0c4:	0719      	lsls	r1, r3, #28
    a0c6:	f57f abe9 	bpl.w	989c <__ssvfscanf_r+0x248>
    a0ca:	f8db 3004 	ldr.w	r3, [fp, #4]
    a0ce:	3b01      	subs	r3, #1
    a0d0:	2b00      	cmp	r3, #0
    a0d2:	f10a 0a01 	add.w	sl, sl, #1
    a0d6:	f8cb 3004 	str.w	r3, [fp, #4]
    a0da:	f102 0201 	add.w	r2, r2, #1
    a0de:	dd4a      	ble.n	a176 <__ssvfscanf_r+0xb22>
    a0e0:	f8cb 2000 	str.w	r2, [fp]
    a0e4:	7813      	ldrb	r3, [r2, #0]
    a0e6:	5cf3      	ldrb	r3, [r6, r3]
    a0e8:	0719      	lsls	r1, r3, #28
    a0ea:	f57f abd7 	bpl.w	989c <__ssvfscanf_r+0x248>
    a0ee:	e7ec      	b.n	a0ca <__ssvfscanf_r+0xa76>
    a0f0:	f044 0401 	orr.w	r4, r4, #1
    a0f4:	4b69      	ldr	r3, [pc, #420]	; (a29c <__ssvfscanf_r+0xc48>)
    a0f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    a0f8:	2308      	movs	r3, #8
    a0fa:	64f9      	str	r1, [r7, #76]	; 0x4c
    a0fc:	63bb      	str	r3, [r7, #56]	; 0x38
    a0fe:	2503      	movs	r5, #3
    a100:	f7ff bbc4 	b.w	988c <__ssvfscanf_r+0x238>
    a104:	f044 0401 	orr.w	r4, r4, #1
    a108:	4b65      	ldr	r3, [pc, #404]	; (a2a0 <__ssvfscanf_r+0xc4c>)
    a10a:	62fb      	str	r3, [r7, #44]	; 0x2c
    a10c:	230a      	movs	r3, #10
    a10e:	64f9      	str	r1, [r7, #76]	; 0x4c
    a110:	63bb      	str	r3, [r7, #56]	; 0x38
    a112:	2503      	movs	r5, #3
    a114:	f7ff bbba 	b.w	988c <__ssvfscanf_r+0x238>
    a118:	0523      	lsls	r3, r4, #20
    a11a:	f57f ad82 	bpl.w	9c22 <__ssvfscanf_r+0x5ce>
    a11e:	b916      	cbnz	r6, a126 <__ssvfscanf_r+0xad2>
    a120:	f444 7400 	orr.w	r4, r4, #512	; 0x200
    a124:	2608      	movs	r6, #8
    a126:	0563      	lsls	r3, r4, #21
    a128:	f100 81a6 	bmi.w	a478 <__ssvfscanf_r+0xe24>
    a12c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a12e:	f424 7460 	bic.w	r4, r4, #896	; 0x380
    a132:	b11b      	cbz	r3, a13c <__ssvfscanf_r+0xae8>
    a134:	3b01      	subs	r3, #1
    a136:	63fb      	str	r3, [r7, #60]	; 0x3c
    a138:	f108 0801 	add.w	r8, r8, #1
    a13c:	684b      	ldr	r3, [r1, #4]
    a13e:	3b01      	subs	r3, #1
    a140:	2b00      	cmp	r3, #0
    a142:	f10a 0a01 	add.w	sl, sl, #1
    a146:	604b      	str	r3, [r1, #4]
    a148:	f73f ad73 	bgt.w	9c32 <__ssvfscanf_r+0x5de>
    a14c:	4648      	mov	r0, r9
    a14e:	64b9      	str	r1, [r7, #72]	; 0x48
    a150:	f002 fc9e 	bl	ca90 <__ssrefill_r>
    a154:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    a156:	2800      	cmp	r0, #0
    a158:	f43f ad6d 	beq.w	9c36 <__ssvfscanf_r+0x5e2>
    a15c:	e56e      	b.n	9c3c <__ssvfscanf_r+0x5e8>
    a15e:	ee18 0a10 	vmov	r0, s16
    a162:	4659      	mov	r1, fp
    a164:	f002 fc94 	bl	ca90 <__ssrefill_r>
    a168:	2800      	cmp	r0, #0
    a16a:	f47f ac91 	bne.w	9a90 <__ssvfscanf_r+0x43c>
    a16e:	2e00      	cmp	r6, #0
    a170:	f47f abc4 	bne.w	98fc <__ssvfscanf_r+0x2a8>
    a174:	e48c      	b.n	9a90 <__ssvfscanf_r+0x43c>
    a176:	4659      	mov	r1, fp
    a178:	4648      	mov	r0, r9
    a17a:	f002 fc89 	bl	ca90 <__ssrefill_r>
    a17e:	2800      	cmp	r0, #0
    a180:	f47f ab54 	bne.w	982c <__ssvfscanf_r+0x1d8>
    a184:	f8db 2000 	ldr.w	r2, [fp]
    a188:	e79a      	b.n	a0c0 <__ssvfscanf_r+0xa6c>
    a18a:	f8db 2004 	ldr.w	r2, [fp, #4]
    a18e:	e00f      	b.n	a1b0 <__ssvfscanf_r+0xb5c>
    a190:	f8db 3000 	ldr.w	r3, [fp]
    a194:	781a      	ldrb	r2, [r3, #0]
    a196:	5cb2      	ldrb	r2, [r6, r2]
    a198:	0711      	lsls	r1, r2, #28
    a19a:	f103 0301 	add.w	r3, r3, #1
    a19e:	f57f aa80 	bpl.w	96a2 <__ssvfscanf_r+0x4e>
    a1a2:	f8db 2004 	ldr.w	r2, [fp, #4]
    a1a6:	3a01      	subs	r2, #1
    a1a8:	e9cb 3200 	strd	r3, r2, [fp]
    a1ac:	f10a 0a01 	add.w	sl, sl, #1
    a1b0:	2a00      	cmp	r2, #0
    a1b2:	dced      	bgt.n	a190 <__ssvfscanf_r+0xb3c>
    a1b4:	4659      	mov	r1, fp
    a1b6:	4648      	mov	r0, r9
    a1b8:	f002 fc6a 	bl	ca90 <__ssrefill_r>
    a1bc:	2800      	cmp	r0, #0
    a1be:	d0e7      	beq.n	a190 <__ssvfscanf_r+0xb3c>
    a1c0:	f7ff ba6f 	b.w	96a2 <__ssvfscanf_r+0x4e>
    a1c4:	06e1      	lsls	r1, r4, #27
    a1c6:	f100 8349 	bmi.w	a85c <__ssvfscanf_r+0x1208>
    a1ca:	f014 0480 	ands.w	r4, r4, #128	; 0x80
    a1ce:	f000 83ab 	beq.w	a928 <__ssvfscanf_r+0x12d4>
    a1d2:	6b3c      	ldr	r4, [r7, #48]	; 0x30
    a1d4:	f854 6b04 	ldr.w	r6, [r4], #4
    a1d8:	64be      	str	r6, [r7, #72]	; 0x48
    a1da:	2e00      	cmp	r6, #0
    a1dc:	f43f ab2f 	beq.w	983e <__ssvfscanf_r+0x1ea>
    a1e0:	2020      	movs	r0, #32
    a1e2:	f7f9 fe31 	bl	3e48 <malloc>
    a1e6:	4605      	mov	r5, r0
    a1e8:	2800      	cmp	r0, #0
    a1ea:	f000 8462 	beq.w	aab2 <__ssvfscanf_r+0x145e>
    a1ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    a1f0:	6030      	str	r0, [r6, #0]
    a1f2:	8893      	ldrh	r3, [r2, #4]
    a1f4:	88d6      	ldrh	r6, [r2, #6]
    a1f6:	429e      	cmp	r6, r3
    a1f8:	f080 82a8 	bcs.w	a74c <__ssvfscanf_r+0x10f8>
    a1fc:	6810      	ldr	r0, [r2, #0]
    a1fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a200:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
    a204:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    a206:	633c      	str	r4, [r7, #48]	; 0x30
    a208:	3601      	adds	r6, #1
    a20a:	80de      	strh	r6, [r3, #6]
    a20c:	2320      	movs	r3, #32
    a20e:	63fb      	str	r3, [r7, #60]	; 0x3c
    a210:	f8db 2000 	ldr.w	r2, [fp]
    a214:	4e20      	ldr	r6, [pc, #128]	; (a298 <__ssvfscanf_r+0xc44>)
    a216:	7811      	ldrb	r1, [r2, #0]
    a218:	5c71      	ldrb	r1, [r6, r1]
    a21a:	0708      	lsls	r0, r1, #28
    a21c:	f100 82ac 	bmi.w	a778 <__ssvfscanf_r+0x1124>
    a220:	4633      	mov	r3, r6
    a222:	462c      	mov	r4, r5
    a224:	4610      	mov	r0, r2
    a226:	462e      	mov	r6, r5
    a228:	f8db 1004 	ldr.w	r1, [fp, #4]
    a22c:	6cba      	ldr	r2, [r7, #72]	; 0x48
    a22e:	3901      	subs	r1, #1
    a230:	f8cb 1004 	str.w	r1, [fp, #4]
    a234:	1c41      	adds	r1, r0, #1
    a236:	f8cb 1000 	str.w	r1, [fp]
    a23a:	4635      	mov	r5, r6
    a23c:	7801      	ldrb	r1, [r0, #0]
    a23e:	f805 1b01 	strb.w	r1, [r5], #1
    a242:	b122      	cbz	r2, a24e <__ssvfscanf_r+0xbfa>
    a244:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    a246:	1b2e      	subs	r6, r5, r4
    a248:	4296      	cmp	r6, r2
    a24a:	f080 837a 	bcs.w	a942 <__ssvfscanf_r+0x12ee>
    a24e:	f1b8 0801 	subs.w	r8, r8, #1
    a252:	d00b      	beq.n	a26c <__ssvfscanf_r+0xc18>
    a254:	f8db 1004 	ldr.w	r1, [fp, #4]
    a258:	2900      	cmp	r1, #0
    a25a:	462e      	mov	r6, r5
    a25c:	f340 83ae 	ble.w	a9bc <__ssvfscanf_r+0x1368>
    a260:	f8db 0000 	ldr.w	r0, [fp]
    a264:	7801      	ldrb	r1, [r0, #0]
    a266:	5c59      	ldrb	r1, [r3, r1]
    a268:	0709      	lsls	r1, r1, #28
    a26a:	d5dd      	bpl.n	a228 <__ssvfscanf_r+0xbd4>
    a26c:	1b29      	subs	r1, r5, r4
    a26e:	448a      	add	sl, r1
    a270:	3101      	adds	r1, #1
    a272:	f04f 0300 	mov.w	r3, #0
    a276:	702b      	strb	r3, [r5, #0]
    a278:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a27a:	b11b      	cbz	r3, a284 <__ssvfscanf_r+0xc30>
    a27c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a27e:	428b      	cmp	r3, r1
    a280:	f200 8394 	bhi.w	a9ac <__ssvfscanf_r+0x1358>
    a284:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    a286:	3301      	adds	r3, #1
    a288:	647b      	str	r3, [r7, #68]	; 0x44
    a28a:	f7ff ba0a 	b.w	96a2 <__ssvfscanf_r+0x4e>
    a28e:	2300      	movs	r3, #0
    a290:	63fb      	str	r3, [r7, #60]	; 0x3c
    a292:	e461      	b.n	9b58 <__ssvfscanf_r+0x504>
    a294:	2000236c 	.word	0x2000236c
    a298:	2000073d 	.word	0x2000073d
    a29c:	0000c355 	.word	0x0000c355
    a2a0:	00005791 	.word	0x00005791
    a2a4:	06e6      	lsls	r6, r4, #27
    a2a6:	f100 8181 	bmi.w	a5ac <__ssvfscanf_r+0xf58>
    a2aa:	f014 0480 	ands.w	r4, r4, #128	; 0x80
    a2ae:	f000 836d 	beq.w	a98c <__ssvfscanf_r+0x1338>
    a2b2:	6b3c      	ldr	r4, [r7, #48]	; 0x30
    a2b4:	f854 6b04 	ldr.w	r6, [r4], #4
    a2b8:	64be      	str	r6, [r7, #72]	; 0x48
    a2ba:	2e00      	cmp	r6, #0
    a2bc:	f43f aabf 	beq.w	983e <__ssvfscanf_r+0x1ea>
    a2c0:	2020      	movs	r0, #32
    a2c2:	f7f9 fdc1 	bl	3e48 <malloc>
    a2c6:	4605      	mov	r5, r0
    a2c8:	2800      	cmp	r0, #0
    a2ca:	f000 83f2 	beq.w	aab2 <__ssvfscanf_r+0x145e>
    a2ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    a2d0:	6030      	str	r0, [r6, #0]
    a2d2:	8893      	ldrh	r3, [r2, #4]
    a2d4:	88d6      	ldrh	r6, [r2, #6]
    a2d6:	429e      	cmp	r6, r3
    a2d8:	f080 827a 	bcs.w	a7d0 <__ssvfscanf_r+0x117c>
    a2dc:	6810      	ldr	r0, [r2, #0]
    a2de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a2e0:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
    a2e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    a2e6:	633c      	str	r4, [r7, #48]	; 0x30
    a2e8:	3601      	adds	r6, #1
    a2ea:	80de      	strh	r6, [r3, #6]
    a2ec:	2420      	movs	r4, #32
    a2ee:	f8db 2000 	ldr.w	r2, [fp]
    a2f2:	f107 0370 	add.w	r3, r7, #112	; 0x70
    a2f6:	4619      	mov	r1, r3
    a2f8:	7813      	ldrb	r3, [r2, #0]
    a2fa:	5ccb      	ldrb	r3, [r1, r3]
    a2fc:	2b00      	cmp	r3, #0
    a2fe:	f43f aa9e 	beq.w	983e <__ssvfscanf_r+0x1ea>
    a302:	ee08 9a10 	vmov	s16, r9
    a306:	f8d7 9048 	ldr.w	r9, [r7, #72]	; 0x48
    a30a:	f8c7 a03c 	str.w	sl, [r7, #60]	; 0x3c
    a30e:	462e      	mov	r6, r5
    a310:	46a2      	mov	sl, r4
    a312:	4610      	mov	r0, r2
    a314:	460c      	mov	r4, r1
    a316:	f8db 1004 	ldr.w	r1, [fp, #4]
    a31a:	1c43      	adds	r3, r0, #1
    a31c:	3901      	subs	r1, #1
    a31e:	e9cb 3100 	strd	r3, r1, [fp]
    a322:	4629      	mov	r1, r5
    a324:	7800      	ldrb	r0, [r0, #0]
    a326:	f801 0b01 	strb.w	r0, [r1], #1
    a32a:	f1b9 0f00 	cmp.w	r9, #0
    a32e:	d002      	beq.n	a336 <__ssvfscanf_r+0xce2>
    a330:	1b8d      	subs	r5, r1, r6
    a332:	4555      	cmp	r5, sl
    a334:	d27a      	bcs.n	a42c <__ssvfscanf_r+0xdd8>
    a336:	460d      	mov	r5, r1
    a338:	f1b8 0801 	subs.w	r8, r8, #1
    a33c:	d00a      	beq.n	a354 <__ssvfscanf_r+0xd00>
    a33e:	f8db 1004 	ldr.w	r1, [fp, #4]
    a342:	2900      	cmp	r1, #0
    a344:	f340 816a 	ble.w	a61c <__ssvfscanf_r+0xfc8>
    a348:	f8db 0000 	ldr.w	r0, [fp]
    a34c:	7801      	ldrb	r1, [r0, #0]
    a34e:	5c61      	ldrb	r1, [r4, r1]
    a350:	2900      	cmp	r1, #0
    a352:	d1e0      	bne.n	a316 <__ssvfscanf_r+0xcc2>
    a354:	4654      	mov	r4, sl
    a356:	ee18 9a10 	vmov	r9, s16
    a35a:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
    a35e:	1bae      	subs	r6, r5, r6
    a360:	f43f aa6d 	beq.w	983e <__ssvfscanf_r+0x1ea>
    a364:	f04f 0300 	mov.w	r3, #0
    a368:	702b      	strb	r3, [r5, #0]
    a36a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a36c:	b11b      	cbz	r3, a376 <__ssvfscanf_r+0xd22>
    a36e:	1c71      	adds	r1, r6, #1
    a370:	428c      	cmp	r4, r1
    a372:	f200 832d 	bhi.w	a9d0 <__ssvfscanf_r+0x137c>
    a376:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    a378:	3301      	adds	r3, #1
    a37a:	44b2      	add	sl, r6
    a37c:	647b      	str	r3, [r7, #68]	; 0x44
    a37e:	f7ff b990 	b.w	96a2 <__ssvfscanf_r+0x4e>
    a382:	2300      	movs	r3, #0
    a384:	613b      	str	r3, [r7, #16]
    a386:	f7ff baa9 	b.w	98dc <__ssvfscanf_r+0x288>
    a38a:	f014 0f8f 	tst.w	r4, #143	; 0x8f
    a38e:	f47f aa56 	bne.w	983e <__ssvfscanf_r+0x1ea>
    a392:	eb08 0888 	add.w	r8, r8, r8, lsl #2
    a396:	eb02 0848 	add.w	r8, r2, r8, lsl #1
    a39a:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
    a39e:	f7ff ba67 	b.w	9870 <__ssvfscanf_r+0x21c>
    a3a2:	64f9      	str	r1, [r7, #76]	; 0x4c
    a3a4:	2504      	movs	r5, #4
    a3a6:	f7ff ba71 	b.w	988c <__ssvfscanf_r+0x238>
    a3aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a3ac:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    a3ae:	185b      	adds	r3, r3, r1
    a3b0:	f47f ae44 	bne.w	a03c <__ssvfscanf_r+0x9e8>
    a3b4:	e5be      	b.n	9f34 <__ssvfscanf_r+0x8e0>
    a3b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a3b8:	2b03      	cmp	r3, #3
    a3ba:	d002      	beq.n	a3c2 <__ssvfscanf_r+0xd6e>
    a3bc:	2b05      	cmp	r3, #5
    a3be:	f47f ab67 	bne.w	9a90 <__ssvfscanf_r+0x43c>
    a3c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a3c4:	3301      	adds	r3, #1
    a3c6:	b2db      	uxtb	r3, r3
    a3c8:	64bb      	str	r3, [r7, #72]	; 0x48
    a3ca:	f7ff bb4c 	b.w	9a66 <__ssvfscanf_r+0x412>
    a3ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a3d0:	2b00      	cmp	r3, #0
    a3d2:	f47f ae01 	bne.w	9fd8 <__ssvfscanf_r+0x984>
    a3d6:	f404 63e0 	and.w	r3, r4, #1792	; 0x700
    a3da:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
    a3de:	f47f adfb 	bne.w	9fd8 <__ssvfscanf_r+0x984>
    a3e2:	2301      	movs	r3, #1
    a3e4:	f424 64f0 	bic.w	r4, r4, #1920	; 0x780
    a3e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    a3ea:	f7ff bb3c 	b.w	9a66 <__ssvfscanf_r+0x412>
    a3ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a3f0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    a3f2:	185b      	adds	r3, r3, r1
    a3f4:	f47f ae02 	bne.w	9ffc <__ssvfscanf_r+0x9a8>
    a3f8:	e59c      	b.n	9f34 <__ssvfscanf_r+0x8e0>
    a3fa:	1c83      	adds	r3, r0, #2
    a3fc:	f040 845b 	bne.w	acb6 <__ssvfscanf_r+0x1662>
    a400:	f8db 3004 	ldr.w	r3, [fp, #4]
    a404:	6cbd      	ldr	r5, [r7, #72]	; 0x48
    a406:	2b00      	cmp	r3, #0
    a408:	f73f ad00 	bgt.w	9e0c <__ssvfscanf_r+0x7b8>
    a40c:	4659      	mov	r1, fp
    a40e:	4648      	mov	r0, r9
    a410:	f002 fb3e 	bl	ca90 <__ssrefill_r>
    a414:	2800      	cmp	r0, #0
    a416:	f43f ad63 	beq.w	9ee0 <__ssvfscanf_r+0x88c>
    a41a:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
    a41e:	627e      	str	r6, [r7, #36]	; 0x24
    a420:	4644      	mov	r4, r8
    a422:	2d00      	cmp	r5, #0
    a424:	f43f ad63 	beq.w	9eee <__ssvfscanf_r+0x89a>
    a428:	f7ff ba00 	b.w	982c <__ssvfscanf_r+0x1d8>
    a42c:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
    a430:	4630      	mov	r0, r6
    a432:	4651      	mov	r1, sl
    a434:	f7f9 ffd4 	bl	43e0 <realloc>
    a438:	4606      	mov	r6, r0
    a43a:	2800      	cmp	r0, #0
    a43c:	f000 8339 	beq.w	aab2 <__ssvfscanf_r+0x145e>
    a440:	4405      	add	r5, r0
    a442:	f8c9 0000 	str.w	r0, [r9]
    a446:	e777      	b.n	a338 <__ssvfscanf_r+0xce4>
    a448:	f444 7400 	orr.w	r4, r4, #512	; 0x200
    a44c:	4bbc      	ldr	r3, [pc, #752]	; (a740 <__ssvfscanf_r+0x10ec>)
    a44e:	62fb      	str	r3, [r7, #44]	; 0x2c
    a450:	2310      	movs	r3, #16
    a452:	64f9      	str	r1, [r7, #76]	; 0x4c
    a454:	63bb      	str	r3, [r7, #56]	; 0x38
    a456:	2503      	movs	r5, #3
    a458:	f7ff ba18 	b.w	988c <__ssvfscanf_r+0x238>
    a45c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a45e:	3301      	adds	r3, #1
    a460:	637b      	str	r3, [r7, #52]	; 0x34
    a462:	693b      	ldr	r3, [r7, #16]
    a464:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    a468:	2b00      	cmp	r3, #0
    a46a:	f43f aafe 	beq.w	9a6a <__ssvfscanf_r+0x416>
    a46e:	693b      	ldr	r3, [r7, #16]
    a470:	3b01      	subs	r3, #1
    a472:	613b      	str	r3, [r7, #16]
    a474:	f7ff bafa 	b.w	9a6c <__ssvfscanf_r+0x418>
    a478:	f424 64b0 	bic.w	r4, r4, #1408	; 0x580
    a47c:	f7ff bbd1 	b.w	9c22 <__ssvfscanf_r+0x5ce>
    a480:	0722      	lsls	r2, r4, #28
    a482:	f140 81c7 	bpl.w	a814 <__ssvfscanf_r+0x11c0>
    a486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    a488:	f853 2b04 	ldr.w	r2, [r3], #4
    a48c:	633b      	str	r3, [r7, #48]	; 0x30
    a48e:	7010      	strb	r0, [r2, #0]
    a490:	f7ff bbf3 	b.w	9c7a <__ssvfscanf_r+0x626>
    a494:	f815 1c01 	ldrb.w	r1, [r5, #-1]
    a498:	465a      	mov	r2, fp
    a49a:	4648      	mov	r0, r9
    a49c:	3d01      	subs	r5, #1
    a49e:	f002 fab7 	bl	ca10 <_sungetc_r>
    a4a2:	f7ff bbd5 	b.w	9c50 <__ssvfscanf_r+0x5fc>
    a4a6:	69fb      	ldr	r3, [r7, #28]
    a4a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    a4aa:	4293      	cmp	r3, r2
    a4ac:	f43f ab2d 	beq.w	9b0a <__ssvfscanf_r+0x4b6>
    a4b0:	1a9a      	subs	r2, r3, r2
    a4b2:	f207 23c3 	addw	r3, r7, #707	; 0x2c3
    a4b6:	429d      	cmp	r5, r3
    a4b8:	bf28      	it	cs
    a4ba:	f207 25c2 	addwcs	r5, r7, #706	; 0x2c2
    a4be:	49a1      	ldr	r1, [pc, #644]	; (a744 <__ssvfscanf_r+0x10f0>)
    a4c0:	4628      	mov	r0, r5
    a4c2:	f000 fe59 	bl	b178 <sprintf>
    a4c6:	f7ff bb20 	b.w	9b0a <__ssvfscanf_r+0x4b6>
    a4ca:	06e2      	lsls	r2, r4, #27
    a4cc:	f100 8131 	bmi.w	a732 <__ssvfscanf_r+0x10de>
    a4d0:	0723      	lsls	r3, r4, #28
    a4d2:	f100 81ba 	bmi.w	a84a <__ssvfscanf_r+0x11f6>
    a4d6:	0766      	lsls	r6, r4, #29
    a4d8:	f140 82b4 	bpl.w	aa44 <__ssvfscanf_r+0x13f0>
    a4dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    a4de:	64f9      	str	r1, [r7, #76]	; 0x4c
    a4e0:	f853 2b04 	ldr.w	r2, [r3], #4
    a4e4:	633b      	str	r3, [r7, #48]	; 0x30
    a4e6:	f8a2 a000 	strh.w	sl, [r2]
    a4ea:	f7ff b8da 	b.w	96a2 <__ssvfscanf_r+0x4e>
    a4ee:	0723      	lsls	r3, r4, #28
    a4f0:	f47f a9a5 	bne.w	983e <__ssvfscanf_r+0x1ea>
    a4f4:	7842      	ldrb	r2, [r0, #1]
    a4f6:	2a68      	cmp	r2, #104	; 0x68
    a4f8:	f000 8186 	beq.w	a808 <__ssvfscanf_r+0x11b4>
    a4fc:	f044 0404 	orr.w	r4, r4, #4
    a500:	4608      	mov	r0, r1
    a502:	f7ff b92f 	b.w	9764 <__ssvfscanf_r+0x110>
    a506:	4b8e      	ldr	r3, [pc, #568]	; (a740 <__ssvfscanf_r+0x10ec>)
    a508:	62fb      	str	r3, [r7, #44]	; 0x2c
    a50a:	230a      	movs	r3, #10
    a50c:	64f9      	str	r1, [r7, #76]	; 0x4c
    a50e:	63bb      	str	r3, [r7, #56]	; 0x38
    a510:	2503      	movs	r5, #3
    a512:	f7ff b9bb 	b.w	988c <__ssvfscanf_r+0x238>
    a516:	4b8c      	ldr	r3, [pc, #560]	; (a748 <__ssvfscanf_r+0x10f4>)
    a518:	62fb      	str	r3, [r7, #44]	; 0x2c
    a51a:	2300      	movs	r3, #0
    a51c:	64f9      	str	r1, [r7, #76]	; 0x4c
    a51e:	63bb      	str	r3, [r7, #56]	; 0x38
    a520:	2503      	movs	r5, #3
    a522:	f7ff b9b3 	b.w	988c <__ssvfscanf_r+0x238>
    a526:	f444 7408 	orr.w	r4, r4, #544	; 0x220
    a52a:	e78f      	b.n	a44c <__ssvfscanf_r+0xdf8>
    a52c:	f107 0070 	add.w	r0, r7, #112	; 0x70
    a530:	f000 fdde 	bl	b0f0 <__sccl>
    a534:	f044 0440 	orr.w	r4, r4, #64	; 0x40
    a538:	64f8      	str	r0, [r7, #76]	; 0x4c
    a53a:	2501      	movs	r5, #1
    a53c:	f7ff b9a6 	b.w	988c <__ssvfscanf_r+0x238>
    a540:	0722      	lsls	r2, r4, #28
    a542:	f47f a97c 	bne.w	983e <__ssvfscanf_r+0x1ea>
    a546:	7842      	ldrb	r2, [r0, #1]
    a548:	2a6c      	cmp	r2, #108	; 0x6c
    a54a:	f000 8157 	beq.w	a7fc <__ssvfscanf_r+0x11a8>
    a54e:	f044 0401 	orr.w	r4, r4, #1
    a552:	4608      	mov	r0, r1
    a554:	f7ff b906 	b.w	9764 <__ssvfscanf_r+0x110>
    a558:	f014 038f 	ands.w	r3, r4, #143	; 0x8f
    a55c:	f47f a96f 	bne.w	983e <__ssvfscanf_r+0x1ea>
    a560:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    a562:	2a00      	cmp	r2, #0
    a564:	f000 81e7 	beq.w	a936 <__ssvfscanf_r+0x12e2>
    a568:	7842      	ldrb	r2, [r0, #1]
    a56a:	f044 0480 	orr.w	r4, r4, #128	; 0x80
    a56e:	4608      	mov	r0, r1
    a570:	f7ff b8f8 	b.w	9764 <__ssvfscanf_r+0x110>
    a574:	ea58 0804 	orrs.w	r8, r8, r4
    a578:	f47f a961 	bne.w	983e <__ssvfscanf_r+0x1ea>
    a57c:	7842      	ldrb	r2, [r0, #1]
    a57e:	2410      	movs	r4, #16
    a580:	4608      	mov	r0, r1
    a582:	f7ff b8ef 	b.w	9764 <__ssvfscanf_r+0x110>
    a586:	64f9      	str	r1, [r7, #76]	; 0x4c
    a588:	f7ff b8a7 	b.w	96da <__ssvfscanf_r+0x86>
    a58c:	2300      	movs	r3, #0
    a58e:	623b      	str	r3, [r7, #32]
    a590:	62bb      	str	r3, [r7, #40]	; 0x28
    a592:	63fb      	str	r3, [r7, #60]	; 0x3c
    a594:	f107 0354 	add.w	r3, r7, #84	; 0x54
    a598:	64bb      	str	r3, [r7, #72]	; 0x48
    a59a:	f7ff bba9 	b.w	9cf0 <__ssvfscanf_r+0x69c>
    a59e:	2300      	movs	r3, #0
    a5a0:	e9c7 3306 	strd	r3, r3, [r7, #24]
    a5a4:	623b      	str	r3, [r7, #32]
    a5a6:	f107 0454 	add.w	r4, r7, #84	; 0x54
    a5aa:	e429      	b.n	9e00 <__ssvfscanf_r+0x7ac>
    a5ac:	f8db 3000 	ldr.w	r3, [fp]
    a5b0:	f107 0270 	add.w	r2, r7, #112	; 0x70
    a5b4:	4611      	mov	r1, r2
    a5b6:	781a      	ldrb	r2, [r3, #0]
    a5b8:	5c8a      	ldrb	r2, [r1, r2]
    a5ba:	2a00      	cmp	r2, #0
    a5bc:	f43f a93f 	beq.w	983e <__ssvfscanf_r+0x1ea>
    a5c0:	3301      	adds	r3, #1
    a5c2:	f8cb 3000 	str.w	r3, [fp]
    a5c6:	f8db 3004 	ldr.w	r3, [fp, #4]
    a5ca:	f1b8 0f01 	cmp.w	r8, #1
    a5ce:	f103 33ff 	add.w	r3, r3, #4294967295
    a5d2:	f8cb 3004 	str.w	r3, [fp, #4]
    a5d6:	bf18      	it	ne
    a5d8:	460c      	movne	r4, r1
    a5da:	d114      	bne.n	a606 <__ssvfscanf_r+0xfb2>
    a5dc:	f7ff bb53 	b.w	9c86 <__ssvfscanf_r+0x632>
    a5e0:	f8db 3000 	ldr.w	r3, [fp]
    a5e4:	781a      	ldrb	r2, [r3, #0]
    a5e6:	5ca2      	ldrb	r2, [r4, r2]
    a5e8:	3301      	adds	r3, #1
    a5ea:	2a00      	cmp	r2, #0
    a5ec:	f43f ab4b 	beq.w	9c86 <__ssvfscanf_r+0x632>
    a5f0:	f8cb 3000 	str.w	r3, [fp]
    a5f4:	f8db 3004 	ldr.w	r3, [fp, #4]
    a5f8:	3501      	adds	r5, #1
    a5fa:	3b01      	subs	r3, #1
    a5fc:	4545      	cmp	r5, r8
    a5fe:	f8cb 3004 	str.w	r3, [fp, #4]
    a602:	f43f ab40 	beq.w	9c86 <__ssvfscanf_r+0x632>
    a606:	2b00      	cmp	r3, #0
    a608:	dcea      	bgt.n	a5e0 <__ssvfscanf_r+0xf8c>
    a60a:	4659      	mov	r1, fp
    a60c:	4648      	mov	r0, r9
    a60e:	f002 fa3f 	bl	ca90 <__ssrefill_r>
    a612:	2800      	cmp	r0, #0
    a614:	d0e4      	beq.n	a5e0 <__ssvfscanf_r+0xf8c>
    a616:	44aa      	add	sl, r5
    a618:	f7ff b843 	b.w	96a2 <__ssvfscanf_r+0x4e>
    a61c:	ee18 0a10 	vmov	r0, s16
    a620:	4659      	mov	r1, fp
    a622:	f002 fa35 	bl	ca90 <__ssrefill_r>
    a626:	2800      	cmp	r0, #0
    a628:	f43f ae8e 	beq.w	a348 <__ssvfscanf_r+0xcf4>
    a62c:	42b5      	cmp	r5, r6
    a62e:	4654      	mov	r4, sl
    a630:	ee18 9a10 	vmov	r9, s16
    a634:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
    a638:	f47f ae91 	bne.w	a35e <__ssvfscanf_r+0xd0a>
    a63c:	f7ff b8f6 	b.w	982c <__ssvfscanf_r+0x1d8>
    a640:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
    a644:	e428      	b.n	9e98 <__ssvfscanf_r+0x844>
    a646:	6823      	ldr	r3, [r4, #0]
    a648:	2b04      	cmp	r3, #4
    a64a:	f47f ac32 	bne.w	9eb2 <__ssvfscanf_r+0x85e>
    a64e:	e432      	b.n	9eb6 <__ssvfscanf_r+0x862>
    a650:	1c83      	adds	r3, r0, #2
    a652:	f040 8339 	bne.w	acc8 <__ssvfscanf_r+0x1674>
    a656:	f8db 3004 	ldr.w	r3, [fp, #4]
    a65a:	2b00      	cmp	r3, #0
    a65c:	f340 81d7 	ble.w	aa0e <__ssvfscanf_r+0x13ba>
    a660:	f8db 3000 	ldr.w	r3, [fp]
    a664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    a666:	781b      	ldrb	r3, [r3, #0]
    a668:	5cd3      	ldrb	r3, [r2, r3]
    a66a:	0718      	lsls	r0, r3, #28
    a66c:	d403      	bmi.n	a676 <__ssvfscanf_r+0x1022>
    a66e:	f1b8 0f00 	cmp.w	r8, #0
    a672:	f47f ab49 	bne.w	9d08 <__ssvfscanf_r+0x6b4>
    a676:	627c      	str	r4, [r7, #36]	; 0x24
    a678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a67a:	2b00      	cmp	r3, #0
    a67c:	f47f a811 	bne.w	96a2 <__ssvfscanf_r+0x4e>
    a680:	6cba      	ldr	r2, [r7, #72]	; 0x48
    a682:	6013      	str	r3, [r2, #0]
    a684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a686:	2b00      	cmp	r3, #0
    a688:	f43f adfc 	beq.w	a284 <__ssvfscanf_r+0xc30>
    a68c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a68e:	1ad1      	subs	r1, r2, r3
    a690:	108b      	asrs	r3, r1, #2
    a692:	6a3a      	ldr	r2, [r7, #32]
    a694:	3301      	adds	r3, #1
    a696:	429a      	cmp	r2, r3
    a698:	f67f adf4 	bls.w	a284 <__ssvfscanf_r+0xc30>
    a69c:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
    a69e:	3104      	adds	r1, #4
    a6a0:	6820      	ldr	r0, [r4, #0]
    a6a2:	f7f9 fe9d 	bl	43e0 <realloc>
    a6a6:	2800      	cmp	r0, #0
    a6a8:	f47f ac3a 	bne.w	9f20 <__ssvfscanf_r+0x8cc>
    a6ac:	e5ea      	b.n	a284 <__ssvfscanf_r+0xc30>
    a6ae:	f853 2b04 	ldr.w	r2, [r3], #4
    a6b2:	ed82 0b00 	vstr	d0, [r2]
    a6b6:	633b      	str	r3, [r7, #48]	; 0x30
    a6b8:	e5e4      	b.n	a284 <__ssvfscanf_r+0xc30>
    a6ba:	68fd      	ldr	r5, [r7, #12]
    a6bc:	6a39      	ldr	r1, [r7, #32]
    a6be:	687e      	ldr	r6, [r7, #4]
    a6c0:	4628      	mov	r0, r5
    a6c2:	4642      	mov	r2, r8
    a6c4:	46a3      	mov	fp, r4
    a6c6:	68bc      	ldr	r4, [r7, #8]
    a6c8:	f000 fd76 	bl	b1b8 <stpncpy>
    a6cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a6ce:	61fb      	str	r3, [r7, #28]
    a6d0:	f424 7420 	bic.w	r4, r4, #640	; 0x280
    a6d4:	3e01      	subs	r6, #1
    a6d6:	4605      	mov	r5, r0
    a6d8:	f7ff b9c8 	b.w	9a6c <__ssvfscanf_r+0x418>
    a6dc:	69f8      	ldr	r0, [r7, #28]
    a6de:	00d9      	lsls	r1, r3, #3
    a6e0:	461d      	mov	r5, r3
    a6e2:	f7f9 fe7d 	bl	43e0 <realloc>
    a6e6:	61f8      	str	r0, [r7, #28]
    a6e8:	2800      	cmp	r0, #0
    a6ea:	f000 8264 	beq.w	abb6 <__ssvfscanf_r+0x1562>
    a6ee:	6a3a      	ldr	r2, [r7, #32]
    a6f0:	006b      	lsls	r3, r5, #1
    a6f2:	eb00 0804 	add.w	r8, r0, r4
    a6f6:	6010      	str	r0, [r2, #0]
    a6f8:	61bb      	str	r3, [r7, #24]
    a6fa:	f7ff bbea 	b.w	9ed2 <__ssvfscanf_r+0x87e>
    a6fe:	2e02      	cmp	r6, #2
    a700:	f240 82c4 	bls.w	ac8c <__ssvfscanf_r+0x1638>
    a704:	2e03      	cmp	r6, #3
    a706:	f43f a9d3 	beq.w	9ab0 <__ssvfscanf_r+0x45c>
    a70a:	3e04      	subs	r6, #4
    a70c:	fa5f f886 	uxtb.w	r8, r6
    a710:	ea6f 0308 	mvn.w	r3, r8
    a714:	18ee      	adds	r6, r5, r3
    a716:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
    a71a:	465a      	mov	r2, fp
    a71c:	4648      	mov	r0, r9
    a71e:	f002 f977 	bl	ca10 <_sungetc_r>
    a722:	42ae      	cmp	r6, r5
    a724:	d1f7      	bne.n	a716 <__ssvfscanf_r+0x10c2>
    a726:	f10a 3aff 	add.w	sl, sl, #4294967295
    a72a:	ebaa 0a08 	sub.w	sl, sl, r8
    a72e:	f7ff b9bf 	b.w	9ab0 <__ssvfscanf_r+0x45c>
    a732:	64f9      	str	r1, [r7, #76]	; 0x4c
    a734:	f7fe bfb5 	b.w	96a2 <__ssvfscanf_r+0x4e>
    a738:	2303      	movs	r3, #3
    a73a:	63fb      	str	r3, [r7, #60]	; 0x3c
    a73c:	f7ff b993 	b.w	9a66 <__ssvfscanf_r+0x412>
    a740:	0000c355 	.word	0x0000c355
    a744:	20000734 	.word	0x20000734
    a748:	00005791 	.word	0x00005791
    a74c:	f64f 72f6 	movw	r2, #65526	; 0xfff6
    a750:	4293      	cmp	r3, r2
    a752:	f200 8297 	bhi.w	ac84 <__ssvfscanf_r+0x1630>
    a756:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    a758:	3308      	adds	r3, #8
    a75a:	b29b      	uxth	r3, r3
    a75c:	6810      	ldr	r0, [r2, #0]
    a75e:	63f8      	str	r0, [r7, #60]	; 0x3c
    a760:	0099      	lsls	r1, r3, #2
    a762:	637b      	str	r3, [r7, #52]	; 0x34
    a764:	f7f9 fe3c 	bl	43e0 <realloc>
    a768:	2800      	cmp	r0, #0
    a76a:	f000 827b 	beq.w	ac64 <__ssvfscanf_r+0x1610>
    a76e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    a770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a772:	8093      	strh	r3, [r2, #4]
    a774:	6010      	str	r0, [r2, #0]
    a776:	e542      	b.n	a1fe <__ssvfscanf_r+0xbaa>
    a778:	2101      	movs	r1, #1
    a77a:	e57a      	b.n	a272 <__ssvfscanf_r+0xc1e>
    a77c:	f64f 72f6 	movw	r2, #65526	; 0xfff6
    a780:	4293      	cmp	r3, r2
    a782:	f200 8293 	bhi.w	acac <__ssvfscanf_r+0x1658>
    a786:	3308      	adds	r3, #8
    a788:	b29e      	uxth	r6, r3
    a78a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    a78c:	00b1      	lsls	r1, r6, #2
    a78e:	6818      	ldr	r0, [r3, #0]
    a790:	f7f9 fe26 	bl	43e0 <realloc>
    a794:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    a796:	2800      	cmp	r0, #0
    a798:	f000 823e 	beq.w	ac18 <__ssvfscanf_r+0x15c4>
    a79c:	809e      	strh	r6, [r3, #4]
    a79e:	6018      	str	r0, [r3, #0]
    a7a0:	f7ff ba9b 	b.w	9cda <__ssvfscanf_r+0x686>
    a7a4:	f64f 72f6 	movw	r2, #65526	; 0xfff6
    a7a8:	4293      	cmp	r3, r2
    a7aa:	f200 827f 	bhi.w	acac <__ssvfscanf_r+0x1658>
    a7ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    a7b0:	3308      	adds	r3, #8
    a7b2:	b29b      	uxth	r3, r3
    a7b4:	0099      	lsls	r1, r3, #2
    a7b6:	6810      	ldr	r0, [r2, #0]
    a7b8:	64bb      	str	r3, [r7, #72]	; 0x48
    a7ba:	f7f9 fe11 	bl	43e0 <realloc>
    a7be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a7c0:	2800      	cmp	r0, #0
    a7c2:	f000 8228 	beq.w	ac16 <__ssvfscanf_r+0x15c2>
    a7c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    a7c8:	8093      	strh	r3, [r2, #4]
    a7ca:	6010      	str	r0, [r2, #0]
    a7cc:	f7ff bb0e 	b.w	9dec <__ssvfscanf_r+0x798>
    a7d0:	f64f 72f6 	movw	r2, #65526	; 0xfff6
    a7d4:	4293      	cmp	r3, r2
    a7d6:	f200 8255 	bhi.w	ac84 <__ssvfscanf_r+0x1630>
    a7da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    a7dc:	3308      	adds	r3, #8
    a7de:	b29b      	uxth	r3, r3
    a7e0:	6810      	ldr	r0, [r2, #0]
    a7e2:	63f8      	str	r0, [r7, #60]	; 0x3c
    a7e4:	0099      	lsls	r1, r3, #2
    a7e6:	637b      	str	r3, [r7, #52]	; 0x34
    a7e8:	f7f9 fdfa 	bl	43e0 <realloc>
    a7ec:	2800      	cmp	r0, #0
    a7ee:	f000 8239 	beq.w	ac64 <__ssvfscanf_r+0x1610>
    a7f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    a7f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a7f6:	8093      	strh	r3, [r2, #4]
    a7f8:	6010      	str	r0, [r2, #0]
    a7fa:	e570      	b.n	a2de <__ssvfscanf_r+0xc8a>
    a7fc:	7882      	ldrb	r2, [r0, #2]
    a7fe:	f044 0402 	orr.w	r4, r4, #2
    a802:	3002      	adds	r0, #2
    a804:	f7fe bfae 	b.w	9764 <__ssvfscanf_r+0x110>
    a808:	7882      	ldrb	r2, [r0, #2]
    a80a:	f044 0408 	orr.w	r4, r4, #8
    a80e:	3002      	adds	r0, #2
    a810:	f7fe bfa8 	b.w	9764 <__ssvfscanf_r+0x110>
    a814:	0763      	lsls	r3, r4, #29
    a816:	d458      	bmi.n	a8ca <__ssvfscanf_r+0x1276>
    a818:	f014 0201 	ands.w	r2, r4, #1
    a81c:	f47f aa28 	bne.w	9c70 <__ssvfscanf_r+0x61c>
    a820:	07a6      	lsls	r6, r4, #30
    a822:	f57f aa25 	bpl.w	9c70 <__ssvfscanf_r+0x61c>
    a826:	4bb3      	ldr	r3, [pc, #716]	; (aaf4 <__ssvfscanf_r+0x14a0>)
    a828:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    a82a:	4299      	cmp	r1, r3
    a82c:	4648      	mov	r0, r9
    a82e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    a830:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    a832:	f000 823d 	beq.w	acb0 <__ssvfscanf_r+0x165c>
    a836:	f001 fe45 	bl	c4c4 <_strtoll_r>
    a83a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    a83c:	f853 2b04 	ldr.w	r2, [r3], #4
    a840:	633b      	str	r3, [r7, #48]	; 0x30
    a842:	e9c2 0100 	strd	r0, r1, [r2]
    a846:	f7ff ba18 	b.w	9c7a <__ssvfscanf_r+0x626>
    a84a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    a84c:	64f9      	str	r1, [r7, #76]	; 0x4c
    a84e:	f853 2b04 	ldr.w	r2, [r3], #4
    a852:	633b      	str	r3, [r7, #48]	; 0x30
    a854:	f882 a000 	strb.w	sl, [r2]
    a858:	f7fe bf23 	b.w	96a2 <__ssvfscanf_r+0x4e>
    a85c:	f8db 3000 	ldr.w	r3, [fp]
    a860:	4ea5      	ldr	r6, [pc, #660]	; (aaf8 <__ssvfscanf_r+0x14a4>)
    a862:	781a      	ldrb	r2, [r3, #0]
    a864:	5cb2      	ldrb	r2, [r6, r2]
    a866:	0712      	lsls	r2, r2, #28
    a868:	f53e af1b 	bmi.w	96a2 <__ssvfscanf_r+0x4e>
    a86c:	3301      	adds	r3, #1
    a86e:	f8cb 3000 	str.w	r3, [fp]
    a872:	f8db 3004 	ldr.w	r3, [fp, #4]
    a876:	f1b8 0f01 	cmp.w	r8, #1
    a87a:	f103 33ff 	add.w	r3, r3, #4294967295
    a87e:	f8cb 3004 	str.w	r3, [fp, #4]
    a882:	bf08      	it	eq
    a884:	f10a 0a01 	addeq.w	sl, sl, #1
    a888:	f43e af0b 	beq.w	96a2 <__ssvfscanf_r+0x4e>
    a88c:	2401      	movs	r4, #1
    a88e:	e011      	b.n	a8b4 <__ssvfscanf_r+0x1260>
    a890:	f8db 3000 	ldr.w	r3, [fp]
    a894:	781a      	ldrb	r2, [r3, #0]
    a896:	5cb2      	ldrb	r2, [r6, r2]
    a898:	0715      	lsls	r5, r2, #28
    a89a:	f103 0301 	add.w	r3, r3, #1
    a89e:	d411      	bmi.n	a8c4 <__ssvfscanf_r+0x1270>
    a8a0:	f8cb 3000 	str.w	r3, [fp]
    a8a4:	f8db 3004 	ldr.w	r3, [fp, #4]
    a8a8:	3401      	adds	r4, #1
    a8aa:	3b01      	subs	r3, #1
    a8ac:	4544      	cmp	r4, r8
    a8ae:	f8cb 3004 	str.w	r3, [fp, #4]
    a8b2:	d007      	beq.n	a8c4 <__ssvfscanf_r+0x1270>
    a8b4:	2b00      	cmp	r3, #0
    a8b6:	dceb      	bgt.n	a890 <__ssvfscanf_r+0x123c>
    a8b8:	4659      	mov	r1, fp
    a8ba:	4648      	mov	r0, r9
    a8bc:	f002 f8e8 	bl	ca90 <__ssrefill_r>
    a8c0:	2800      	cmp	r0, #0
    a8c2:	d0e5      	beq.n	a890 <__ssvfscanf_r+0x123c>
    a8c4:	44a2      	add	sl, r4
    a8c6:	f7fe beec 	b.w	96a2 <__ssvfscanf_r+0x4e>
    a8ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    a8cc:	f853 2b04 	ldr.w	r2, [r3], #4
    a8d0:	633b      	str	r3, [r7, #48]	; 0x30
    a8d2:	8010      	strh	r0, [r2, #0]
    a8d4:	f7ff b9d1 	b.w	9c7a <__ssvfscanf_r+0x626>
    a8d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    a8da:	2b00      	cmp	r3, #0
    a8dc:	f000 816e 	beq.w	abbc <__ssvfscanf_r+0x1568>
    a8e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    a8e2:	f8d3 8000 	ldr.w	r8, [r3]
    a8e6:	88de      	ldrh	r6, [r3, #6]
    a8e8:	b176      	cbz	r6, a908 <__ssvfscanf_r+0x12b4>
    a8ea:	2400      	movs	r4, #0
    a8ec:	f1a8 0504 	sub.w	r5, r8, #4
    a8f0:	46a1      	mov	r9, r4
    a8f2:	f855 3f04 	ldr.w	r3, [r5, #4]!
    a8f6:	6818      	ldr	r0, [r3, #0]
    a8f8:	f7f9 faae 	bl	3e58 <free>
    a8fc:	3401      	adds	r4, #1
    a8fe:	682b      	ldr	r3, [r5, #0]
    a900:	42a6      	cmp	r6, r4
    a902:	f8c3 9000 	str.w	r9, [r3]
    a906:	d1f4      	bne.n	a8f2 <__ssvfscanf_r+0x129e>
    a908:	f04f 33ff 	mov.w	r3, #4294967295
    a90c:	647b      	str	r3, [r7, #68]	; 0x44
    a90e:	f1b8 0f00 	cmp.w	r8, #0
    a912:	f47e af9c 	bne.w	984e <__ssvfscanf_r+0x1fa>
    a916:	f7fe bf9d 	b.w	9854 <__ssvfscanf_r+0x200>
    a91a:	4878      	ldr	r0, [pc, #480]	; (aafc <__ssvfscanf_r+0x14a8>)
    a91c:	633b      	str	r3, [r7, #48]	; 0x30
    a91e:	f7fb fde7 	bl	64f0 <nanf>
    a922:	ed84 0a00 	vstr	s0, [r4]
    a926:	e4ad      	b.n	a284 <__ssvfscanf_r+0xc30>
    a928:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    a92a:	63fc      	str	r4, [r7, #60]	; 0x3c
    a92c:	f852 5b04 	ldr.w	r5, [r2], #4
    a930:	633a      	str	r2, [r7, #48]	; 0x30
    a932:	64bc      	str	r4, [r7, #72]	; 0x48
    a934:	e46c      	b.n	a210 <__ssvfscanf_r+0xbbc>
    a936:	b082      	sub	sp, #8
    a938:	e9cd 3302 	strd	r3, r3, [sp, #8]
    a93c:	ab02      	add	r3, sp, #8
    a93e:	643b      	str	r3, [r7, #64]	; 0x40
    a940:	e612      	b.n	a568 <__ssvfscanf_r+0xf14>
    a942:	637b      	str	r3, [r7, #52]	; 0x34
    a944:	0053      	lsls	r3, r2, #1
    a946:	4620      	mov	r0, r4
    a948:	4619      	mov	r1, r3
    a94a:	63fb      	str	r3, [r7, #60]	; 0x3c
    a94c:	f7f9 fd48 	bl	43e0 <realloc>
    a950:	4604      	mov	r4, r0
    a952:	2800      	cmp	r0, #0
    a954:	f000 80ad 	beq.w	aab2 <__ssvfscanf_r+0x145e>
    a958:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a95a:	1985      	adds	r5, r0, r6
    a95c:	6018      	str	r0, [r3, #0]
    a95e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a960:	e475      	b.n	a24e <__ssvfscanf_r+0xbfa>
    a962:	697d      	ldr	r5, [r7, #20]
    a964:	4629      	mov	r1, r5
    a966:	230a      	movs	r3, #10
    a968:	3101      	adds	r1, #1
    a96a:	4648      	mov	r0, r9
    a96c:	f7fa ff10 	bl	5790 <_strtol_r>
    a970:	69bb      	ldr	r3, [r7, #24]
    a972:	1ac2      	subs	r2, r0, r3
    a974:	e59d      	b.n	a4b2 <__ssvfscanf_r+0xe5e>
    a976:	e9d7 320c 	ldrd	r3, r2, [r7, #48]	; 0x30
    a97a:	f853 1b04 	ldr.w	r1, [r3], #4
    a97e:	623a      	str	r2, [r7, #32]
    a980:	64b9      	str	r1, [r7, #72]	; 0x48
    a982:	633b      	str	r3, [r7, #48]	; 0x30
    a984:	62ba      	str	r2, [r7, #40]	; 0x28
    a986:	63fa      	str	r2, [r7, #60]	; 0x3c
    a988:	f7ff b9b2 	b.w	9cf0 <__ssvfscanf_r+0x69c>
    a98c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    a98e:	64bc      	str	r4, [r7, #72]	; 0x48
    a990:	f853 5b04 	ldr.w	r5, [r3], #4
    a994:	633b      	str	r3, [r7, #48]	; 0x30
    a996:	e4aa      	b.n	a2ee <__ssvfscanf_r+0xc9a>
    a998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    a99a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    a99c:	f853 4b04 	ldr.w	r4, [r3], #4
    a9a0:	61ba      	str	r2, [r7, #24]
    a9a2:	e9c7 2207 	strd	r2, r2, [r7, #28]
    a9a6:	633b      	str	r3, [r7, #48]	; 0x30
    a9a8:	f7ff ba2a 	b.w	9e00 <__ssvfscanf_r+0x7ac>
    a9ac:	6cbc      	ldr	r4, [r7, #72]	; 0x48
    a9ae:	6820      	ldr	r0, [r4, #0]
    a9b0:	f7f9 fd16 	bl	43e0 <realloc>
    a9b4:	2800      	cmp	r0, #0
    a9b6:	f47f aab3 	bne.w	9f20 <__ssvfscanf_r+0x8cc>
    a9ba:	e463      	b.n	a284 <__ssvfscanf_r+0xc30>
    a9bc:	4659      	mov	r1, fp
    a9be:	4648      	mov	r0, r9
    a9c0:	637b      	str	r3, [r7, #52]	; 0x34
    a9c2:	f002 f865 	bl	ca90 <__ssrefill_r>
    a9c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a9c8:	2800      	cmp	r0, #0
    a9ca:	f43f ac49 	beq.w	a260 <__ssvfscanf_r+0xc0c>
    a9ce:	e44d      	b.n	a26c <__ssvfscanf_r+0xc18>
    a9d0:	6818      	ldr	r0, [r3, #0]
    a9d2:	461c      	mov	r4, r3
    a9d4:	f7f9 fd04 	bl	43e0 <realloc>
    a9d8:	2800      	cmp	r0, #0
    a9da:	f43f accc 	beq.w	a376 <__ssvfscanf_r+0xd22>
    a9de:	6020      	str	r0, [r4, #0]
    a9e0:	e4c9      	b.n	a376 <__ssvfscanf_r+0xd22>
    a9e2:	2500      	movs	r5, #0
    a9e4:	e637      	b.n	a656 <__ssvfscanf_r+0x1002>
    a9e6:	6cbd      	ldr	r5, [r7, #72]	; 0x48
    a9e8:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
    a9ec:	627e      	str	r6, [r7, #36]	; 0x24
    a9ee:	4644      	mov	r4, r8
    a9f0:	2d00      	cmp	r5, #0
    a9f2:	f43f aa7c 	beq.w	9eee <__ssvfscanf_r+0x89a>
    a9f6:	3d01      	subs	r5, #1
    a9f8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
    a9fc:	465a      	mov	r2, fp
    a9fe:	5d59      	ldrb	r1, [r3, r5]
    aa00:	4648      	mov	r0, r9
    aa02:	f002 f805 	bl	ca10 <_sungetc_r>
    aa06:	2d00      	cmp	r5, #0
    aa08:	d1f5      	bne.n	a9f6 <__ssvfscanf_r+0x13a2>
    aa0a:	f7ff ba70 	b.w	9eee <__ssvfscanf_r+0x89a>
    aa0e:	4659      	mov	r1, fp
    aa10:	4648      	mov	r0, r9
    aa12:	f002 f83d 	bl	ca90 <__ssrefill_r>
    aa16:	2800      	cmp	r0, #0
    aa18:	f43f ae22 	beq.w	a660 <__ssvfscanf_r+0x100c>
    aa1c:	627c      	str	r4, [r7, #36]	; 0x24
    aa1e:	2d00      	cmp	r5, #0
    aa20:	f47e af04 	bne.w	982c <__ssvfscanf_r+0x1d8>
    aa24:	e628      	b.n	a678 <__ssvfscanf_r+0x1024>
    aa26:	627c      	str	r4, [r7, #36]	; 0x24
    aa28:	2d00      	cmp	r5, #0
    aa2a:	f43f ae25 	beq.w	a678 <__ssvfscanf_r+0x1024>
    aa2e:	3d01      	subs	r5, #1
    aa30:	f507 73b8 	add.w	r3, r7, #368	; 0x170
    aa34:	465a      	mov	r2, fp
    aa36:	5d59      	ldrb	r1, [r3, r5]
    aa38:	4648      	mov	r0, r9
    aa3a:	f001 ffe9 	bl	ca10 <_sungetc_r>
    aa3e:	2d00      	cmp	r5, #0
    aa40:	d1f5      	bne.n	aa2e <__ssvfscanf_r+0x13da>
    aa42:	e619      	b.n	a678 <__ssvfscanf_r+0x1024>
    aa44:	07e5      	lsls	r5, r4, #31
    aa46:	d43c      	bmi.n	aac2 <__ssvfscanf_r+0x146e>
    aa48:	07a4      	lsls	r4, r4, #30
    aa4a:	d53a      	bpl.n	aac2 <__ssvfscanf_r+0x146e>
    aa4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    aa4e:	64f9      	str	r1, [r7, #76]	; 0x4c
    aa50:	f853 2b04 	ldr.w	r2, [r3], #4
    aa54:	633b      	str	r3, [r7, #48]	; 0x30
    aa56:	ea4f 73ea 	mov.w	r3, sl, asr #31
    aa5a:	f8c2 a000 	str.w	sl, [r2]
    aa5e:	6053      	str	r3, [r2, #4]
    aa60:	f7fe be1f 	b.w	96a2 <__ssvfscanf_r+0x4e>
    aa64:	ee18 9a10 	vmov	r9, s16
    aa68:	461e      	mov	r6, r3
    aa6a:	f7ff b814 	b.w	9a96 <__ssvfscanf_r+0x442>
    aa6e:	2301      	movs	r3, #1
    aa70:	f424 64f0 	bic.w	r4, r4, #1920	; 0x780
    aa74:	64bb      	str	r3, [r7, #72]	; 0x48
    aa76:	f7fe bff6 	b.w	9a66 <__ssvfscanf_r+0x412>
    aa7a:	f1b8 0f01 	cmp.w	r8, #1
    aa7e:	bf38      	it	cc
    aa80:	f04f 0801 	movcc.w	r8, #1
    aa84:	f014 0301 	ands.w	r3, r4, #1
    aa88:	d13a      	bne.n	ab00 <__ssvfscanf_r+0x14ac>
    aa8a:	06e5      	lsls	r5, r4, #27
    aa8c:	f100 8136 	bmi.w	acfc <__ssvfscanf_r+0x16a8>
    aa90:	0624      	lsls	r4, r4, #24
    aa92:	f140 814c 	bpl.w	ad2e <__ssvfscanf_r+0x16da>
    aa96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    aa98:	f853 5b04 	ldr.w	r5, [r3], #4
    aa9c:	64bb      	str	r3, [r7, #72]	; 0x48
    aa9e:	2d00      	cmp	r5, #0
    aaa0:	f43e aecd 	beq.w	983e <__ssvfscanf_r+0x1ea>
    aaa4:	4640      	mov	r0, r8
    aaa6:	f7f9 f9cf 	bl	3e48 <malloc>
    aaaa:	4603      	mov	r3, r0
    aaac:	2800      	cmp	r0, #0
    aaae:	f040 80dc 	bne.w	ac6a <__ssvfscanf_r+0x1616>
    aab2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    aab4:	2b00      	cmp	r3, #0
    aab6:	f000 8081 	beq.w	abbc <__ssvfscanf_r+0x1568>
    aaba:	f8d3 8000 	ldr.w	r8, [r3]
    aabe:	88de      	ldrh	r6, [r3, #6]
    aac0:	e712      	b.n	a8e8 <__ssvfscanf_r+0x1294>
    aac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    aac4:	64f9      	str	r1, [r7, #76]	; 0x4c
    aac6:	f853 2b04 	ldr.w	r2, [r3], #4
    aaca:	f8c2 a000 	str.w	sl, [r2]
    aace:	633b      	str	r3, [r7, #48]	; 0x30
    aad0:	f7fe bde7 	b.w	96a2 <__ssvfscanf_r+0x4e>
    aad4:	462b      	mov	r3, r5
    aad6:	6abd      	ldr	r5, [r7, #40]	; 0x28
    aad8:	42ab      	cmp	r3, r5
    aada:	f67e aeb0 	bls.w	983e <__ssvfscanf_r+0x1ea>
    aade:	461c      	mov	r4, r3
    aae0:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
    aae4:	465a      	mov	r2, fp
    aae6:	4648      	mov	r0, r9
    aae8:	f001 ff92 	bl	ca10 <_sungetc_r>
    aaec:	42ac      	cmp	r4, r5
    aaee:	d1f7      	bne.n	aae0 <__ssvfscanf_r+0x148c>
    aaf0:	f7fe bea5 	b.w	983e <__ssvfscanf_r+0x1ea>
    aaf4:	0000c355 	.word	0x0000c355
    aaf8:	2000073d 	.word	0x2000073d
    aafc:	20007818 	.word	0x20007818
    ab00:	f014 0310 	ands.w	r3, r4, #16
    ab04:	637b      	str	r3, [r7, #52]	; 0x34
    ab06:	d05e      	beq.n	abc6 <__ssvfscanf_r+0x1572>
    ab08:	2500      	movs	r5, #0
    ab0a:	63fd      	str	r5, [r7, #60]	; 0x3c
    ab0c:	64bd      	str	r5, [r7, #72]	; 0x48
    ab0e:	462e      	mov	r6, r5
    ab10:	2400      	movs	r4, #0
    ab12:	464b      	mov	r3, r9
    ab14:	46c1      	mov	r9, r8
    ab16:	46a8      	mov	r8, r5
    ab18:	4625      	mov	r5, r4
    ab1a:	461c      	mov	r4, r3
    ab1c:	f7fb f9f4 	bl	5f08 <__locale_mb_cur_max>
    ab20:	42a8      	cmp	r0, r5
    ab22:	f43e ae83 	beq.w	982c <__ssvfscanf_r+0x1d8>
    ab26:	e9db 3200 	ldrd	r3, r2, [fp]
    ab2a:	f813 1b01 	ldrb.w	r1, [r3], #1
    ab2e:	3a01      	subs	r2, #1
    ab30:	e9cb 3200 	strd	r3, r2, [fp]
    ab34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    ab36:	f507 70b8 	add.w	r0, r7, #368	; 0x170
    ab3a:	2a03      	cmp	r2, #3
    ab3c:	5541      	strb	r1, [r0, r5]
    ab3e:	f105 0301 	add.w	r3, r5, #1
    ab42:	f107 0568 	add.w	r5, r7, #104	; 0x68
    ab46:	d102      	bne.n	ab4e <__ssvfscanf_r+0x14fa>
    ab48:	682a      	ldr	r2, [r5, #0]
    ab4a:	2a04      	cmp	r2, #4
    ab4c:	d006      	beq.n	ab5c <__ssvfscanf_r+0x1508>
    ab4e:	2208      	movs	r2, #8
    ab50:	2100      	movs	r1, #0
    ab52:	4628      	mov	r0, r5
    ab54:	62bb      	str	r3, [r7, #40]	; 0x28
    ab56:	f7fb f8a7 	bl	5ca8 <memset>
    ab5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ab5c:	9500      	str	r5, [sp, #0]
    ab5e:	f507 72b8 	add.w	r2, r7, #368	; 0x170
    ab62:	4631      	mov	r1, r6
    ab64:	4620      	mov	r0, r4
    ab66:	62bb      	str	r3, [r7, #40]	; 0x28
    ab68:	f001 fd7e 	bl	c668 <_mbrtowc_r>
    ab6c:	1c43      	adds	r3, r0, #1
    ab6e:	6278      	str	r0, [r7, #36]	; 0x24
    ab70:	f43e ae5c 	beq.w	982c <__ssvfscanf_r+0x1d8>
    ab74:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ab76:	2800      	cmp	r0, #0
    ab78:	f040 8147 	bne.w	ae0a <__ssvfscanf_r+0x17b6>
    ab7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    ab7e:	b902      	cbnz	r2, ab82 <__ssvfscanf_r+0x152e>
    ab80:	6032      	str	r2, [r6, #0]
    ab82:	449a      	add	sl, r3
    ab84:	f109 39ff 	add.w	r9, r9, #4294967295
    ab88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ab8a:	2b00      	cmp	r3, #0
    ab8c:	f040 8175 	bne.w	ae7a <__ssvfscanf_r+0x1826>
    ab90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    ab92:	2b00      	cmp	r3, #0
    ab94:	f000 8170 	beq.w	ae78 <__ssvfscanf_r+0x1824>
    ab98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ab9a:	1af5      	subs	r5, r6, r3
    ab9c:	ebb8 0fa5 	cmp.w	r8, r5, asr #2
    aba0:	f200 816a 	bhi.w	ae78 <__ssvfscanf_r+0x1824>
    aba4:	4618      	mov	r0, r3
    aba6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
    abaa:	f7f9 fc19 	bl	43e0 <realloc>
    abae:	63f8      	str	r0, [r7, #60]	; 0x3c
    abb0:	2800      	cmp	r0, #0
    abb2:	f040 815c 	bne.w	ae6e <__ssvfscanf_r+0x181a>
    abb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    abb8:	2b00      	cmp	r3, #0
    abba:	d12d      	bne.n	ac18 <__ssvfscanf_r+0x15c4>
    abbc:	f04f 33ff 	mov.w	r3, #4294967295
    abc0:	647b      	str	r3, [r7, #68]	; 0x44
    abc2:	f7fe be47 	b.w	9854 <__ssvfscanf_r+0x200>
    abc6:	0622      	lsls	r2, r4, #24
    abc8:	f140 808f 	bpl.w	acea <__ssvfscanf_r+0x1696>
    abcc:	6b3c      	ldr	r4, [r7, #48]	; 0x30
    abce:	f854 3b04 	ldr.w	r3, [r4], #4
    abd2:	64bb      	str	r3, [r7, #72]	; 0x48
    abd4:	2b00      	cmp	r3, #0
    abd6:	f43e ae32 	beq.w	983e <__ssvfscanf_r+0x1ea>
    abda:	2080      	movs	r0, #128	; 0x80
    abdc:	f7f9 f934 	bl	3e48 <malloc>
    abe0:	4606      	mov	r6, r0
    abe2:	2800      	cmp	r0, #0
    abe4:	d0e7      	beq.n	abb6 <__ssvfscanf_r+0x1562>
    abe6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    abe8:	6018      	str	r0, [r3, #0]
    abea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    abec:	88dd      	ldrh	r5, [r3, #6]
    abee:	889a      	ldrh	r2, [r3, #4]
    abf0:	4295      	cmp	r5, r2
    abf2:	f0c0 80b3 	bcc.w	ad5c <__ssvfscanf_r+0x1708>
    abf6:	f64f 71f6 	movw	r1, #65526	; 0xfff6
    abfa:	428a      	cmp	r2, r1
    abfc:	d856      	bhi.n	acac <__ssvfscanf_r+0x1658>
    abfe:	3208      	adds	r2, #8
    ac00:	b293      	uxth	r3, r2
    ac02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    ac04:	63fb      	str	r3, [r7, #60]	; 0x3c
    ac06:	0099      	lsls	r1, r3, #2
    ac08:	6810      	ldr	r0, [r2, #0]
    ac0a:	f7f9 fbe9 	bl	43e0 <realloc>
    ac0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ac10:	2800      	cmp	r0, #0
    ac12:	f040 80ae 	bne.w	ad72 <__ssvfscanf_r+0x171e>
    ac16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ac18:	88db      	ldrh	r3, [r3, #6]
    ac1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    ac1c:	461e      	mov	r6, r3
    ac1e:	f8d2 8000 	ldr.w	r8, [r2]
    ac22:	e661      	b.n	a8e8 <__ssvfscanf_r+0x1294>
    ac24:	462b      	mov	r3, r5
    ac26:	6abd      	ldr	r5, [r7, #40]	; 0x28
    ac28:	42ab      	cmp	r3, r5
    ac2a:	f67e ae08 	bls.w	983e <__ssvfscanf_r+0x1ea>
    ac2e:	461c      	mov	r4, r3
    ac30:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
    ac34:	465a      	mov	r2, fp
    ac36:	4648      	mov	r0, r9
    ac38:	f001 feea 	bl	ca10 <_sungetc_r>
    ac3c:	42ac      	cmp	r4, r5
    ac3e:	d1f7      	bne.n	ac30 <__ssvfscanf_r+0x15dc>
    ac40:	f7fe bdfd 	b.w	983e <__ssvfscanf_r+0x1ea>
    ac44:	4610      	mov	r0, r2
    ac46:	00d9      	lsls	r1, r3, #3
    ac48:	461e      	mov	r6, r3
    ac4a:	f7f9 fbc9 	bl	43e0 <realloc>
    ac4e:	62b8      	str	r0, [r7, #40]	; 0x28
    ac50:	2800      	cmp	r0, #0
    ac52:	d0b0      	beq.n	abb6 <__ssvfscanf_r+0x1562>
    ac54:	1942      	adds	r2, r0, r5
    ac56:	64ba      	str	r2, [r7, #72]	; 0x48
    ac58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    ac5a:	6b7d      	ldr	r5, [r7, #52]	; 0x34
    ac5c:	6010      	str	r0, [r2, #0]
    ac5e:	0073      	lsls	r3, r6, #1
    ac60:	623b      	str	r3, [r7, #32]
    ac62:	e4f8      	b.n	a656 <__ssvfscanf_r+0x1002>
    ac64:	f8d7 803c 	ldr.w	r8, [r7, #60]	; 0x3c
    ac68:	e63e      	b.n	a8e8 <__ssvfscanf_r+0x1294>
    ac6a:	6c39      	ldr	r1, [r7, #64]	; 0x40
    ac6c:	6028      	str	r0, [r5, #0]
    ac6e:	88ce      	ldrh	r6, [r1, #6]
    ac70:	888a      	ldrh	r2, [r1, #4]
    ac72:	4296      	cmp	r6, r2
    ac74:	f0c0 808e 	bcc.w	ad94 <__ssvfscanf_r+0x1740>
    ac78:	f64f 71f6 	movw	r1, #65526	; 0xfff6
    ac7c:	428a      	cmp	r2, r1
    ac7e:	6338      	str	r0, [r7, #48]	; 0x30
    ac80:	f240 80a5 	bls.w	adce <__ssvfscanf_r+0x177a>
    ac84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ac86:	f8d3 8000 	ldr.w	r8, [r3]
    ac8a:	e62d      	b.n	a8e8 <__ssvfscanf_r+0x1294>
    ac8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    ac8e:	4295      	cmp	r5, r2
    ac90:	f67e add5 	bls.w	983e <__ssvfscanf_r+0x1ea>
    ac94:	462c      	mov	r4, r5
    ac96:	6abd      	ldr	r5, [r7, #40]	; 0x28
    ac98:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
    ac9c:	465a      	mov	r2, fp
    ac9e:	4648      	mov	r0, r9
    aca0:	f001 feb6 	bl	ca10 <_sungetc_r>
    aca4:	42ac      	cmp	r4, r5
    aca6:	d1f7      	bne.n	ac98 <__ssvfscanf_r+0x1644>
    aca8:	f7fe bdc9 	b.w	983e <__ssvfscanf_r+0x1ea>
    acac:	462b      	mov	r3, r5
    acae:	e7b4      	b.n	ac1a <__ssvfscanf_r+0x15c6>
    acb0:	f001 fcd8 	bl	c664 <_strtoull_r>
    acb4:	e5c1      	b.n	a83a <__ssvfscanf_r+0x11e6>
    acb6:	f8d8 3000 	ldr.w	r3, [r8]
    acba:	461d      	mov	r5, r3
    acbc:	3301      	adds	r3, #1
    acbe:	f47f a8d5 	bne.w	9e6c <__ssvfscanf_r+0x818>
    acc2:	462a      	mov	r2, r5
    acc4:	f7ff b8e8 	b.w	9e98 <__ssvfscanf_r+0x844>
    acc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    acca:	6818      	ldr	r0, [r3, #0]
    accc:	f001 fd28 	bl	c720 <iswspace>
    acd0:	2800      	cmp	r0, #0
    acd2:	f47f aea8 	bne.w	aa26 <__ssvfscanf_r+0x13d2>
    acd6:	2c03      	cmp	r4, #3
    acd8:	44aa      	add	sl, r5
    acda:	f47f a849 	bne.w	9d70 <__ssvfscanf_r+0x71c>
    acde:	6833      	ldr	r3, [r6, #0]
    ace0:	2b04      	cmp	r3, #4
    ace2:	f47f a845 	bne.w	9d70 <__ssvfscanf_r+0x71c>
    ace6:	f7ff b845 	b.w	9d74 <__ssvfscanf_r+0x720>
    acea:	e9d7 320c 	ldrd	r3, r2, [r7, #48]	; 0x30
    acee:	f853 6b04 	ldr.w	r6, [r3], #4
    acf2:	633b      	str	r3, [r7, #48]	; 0x30
    acf4:	4615      	mov	r5, r2
    acf6:	63fa      	str	r2, [r7, #60]	; 0x3c
    acf8:	64ba      	str	r2, [r7, #72]	; 0x48
    acfa:	e709      	b.n	ab10 <__ssvfscanf_r+0x14bc>
    acfc:	461c      	mov	r4, r3
    acfe:	f8db 3004 	ldr.w	r3, [fp, #4]
    ad02:	4598      	cmp	r8, r3
    ad04:	dd39      	ble.n	ad7a <__ssvfscanf_r+0x1726>
    ad06:	f8db 2000 	ldr.w	r2, [fp]
    ad0a:	441a      	add	r2, r3
    ad0c:	f8cb 2000 	str.w	r2, [fp]
    ad10:	4659      	mov	r1, fp
    ad12:	4648      	mov	r0, r9
    ad14:	441c      	add	r4, r3
    ad16:	eba8 0803 	sub.w	r8, r8, r3
    ad1a:	f001 feb9 	bl	ca90 <__ssrefill_r>
    ad1e:	2800      	cmp	r0, #0
    ad20:	d0ed      	beq.n	acfe <__ssvfscanf_r+0x16aa>
    ad22:	2c00      	cmp	r4, #0
    ad24:	f43e ad82 	beq.w	982c <__ssvfscanf_r+0x1d8>
    ad28:	44a2      	add	sl, r4
    ad2a:	f7fe bcba 	b.w	96a2 <__ssvfscanf_r+0x4e>
    ad2e:	6b3d      	ldr	r5, [r7, #48]	; 0x30
    ad30:	4643      	mov	r3, r8
    ad32:	6829      	ldr	r1, [r5, #0]
    ad34:	f8cd b000 	str.w	fp, [sp]
    ad38:	2201      	movs	r2, #1
    ad3a:	4648      	mov	r0, r9
    ad3c:	f001 fec6 	bl	cacc <_sfread_r>
    ad40:	4604      	mov	r4, r0
    ad42:	2800      	cmp	r0, #0
    ad44:	f43e ad72 	beq.w	982c <__ssvfscanf_r+0x1d8>
    ad48:	3504      	adds	r5, #4
    ad4a:	64bd      	str	r5, [r7, #72]	; 0x48
    ad4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    ad4e:	3301      	adds	r3, #1
    ad50:	647b      	str	r3, [r7, #68]	; 0x44
    ad52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    ad54:	633b      	str	r3, [r7, #48]	; 0x30
    ad56:	44a2      	add	sl, r4
    ad58:	f7fe bca3 	b.w	96a2 <__ssvfscanf_r+0x4e>
    ad5c:	6818      	ldr	r0, [r3, #0]
    ad5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    ad60:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
    ad64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ad66:	633c      	str	r4, [r7, #48]	; 0x30
    ad68:	3501      	adds	r5, #1
    ad6a:	80dd      	strh	r5, [r3, #6]
    ad6c:	63fe      	str	r6, [r7, #60]	; 0x3c
    ad6e:	2520      	movs	r5, #32
    ad70:	e6ce      	b.n	ab10 <__ssvfscanf_r+0x14bc>
    ad72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    ad74:	8093      	strh	r3, [r2, #4]
    ad76:	6010      	str	r0, [r2, #0]
    ad78:	e7f1      	b.n	ad5e <__ssvfscanf_r+0x170a>
    ad7a:	eba3 0308 	sub.w	r3, r3, r8
    ad7e:	f8cb 3004 	str.w	r3, [fp, #4]
    ad82:	f8db 3000 	ldr.w	r3, [fp]
    ad86:	4444      	add	r4, r8
    ad88:	4443      	add	r3, r8
    ad8a:	f8cb 3000 	str.w	r3, [fp]
    ad8e:	44a2      	add	sl, r4
    ad90:	f7fe bc87 	b.w	96a2 <__ssvfscanf_r+0x4e>
    ad94:	680a      	ldr	r2, [r1, #0]
    ad96:	63fa      	str	r2, [r7, #60]	; 0x3c
    ad98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    ad9a:	f842 5026 	str.w	r5, [r2, r6, lsl #2]
    ad9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    ada0:	3601      	adds	r6, #1
    ada2:	b2b6      	uxth	r6, r6
    ada4:	80d6      	strh	r6, [r2, #6]
    ada6:	4619      	mov	r1, r3
    ada8:	f8cd b000 	str.w	fp, [sp]
    adac:	4643      	mov	r3, r8
    adae:	2201      	movs	r2, #1
    adb0:	4648      	mov	r0, r9
    adb2:	f001 fe8b 	bl	cacc <_sfread_r>
    adb6:	4604      	mov	r4, r0
    adb8:	b1d8      	cbz	r0, adf2 <__ssvfscanf_r+0x179e>
    adba:	4580      	cmp	r8, r0
    adbc:	d9c6      	bls.n	ad4c <__ssvfscanf_r+0x16f8>
    adbe:	6828      	ldr	r0, [r5, #0]
    adc0:	4621      	mov	r1, r4
    adc2:	f7f9 fb0d 	bl	43e0 <realloc>
    adc6:	2800      	cmp	r0, #0
    adc8:	d0c0      	beq.n	ad4c <__ssvfscanf_r+0x16f8>
    adca:	6028      	str	r0, [r5, #0]
    adcc:	e7be      	b.n	ad4c <__ssvfscanf_r+0x16f8>
    adce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    add0:	3208      	adds	r2, #8
    add2:	b294      	uxth	r4, r2
    add4:	681a      	ldr	r2, [r3, #0]
    add6:	637a      	str	r2, [r7, #52]	; 0x34
    add8:	4610      	mov	r0, r2
    adda:	00a1      	lsls	r1, r4, #2
    addc:	f7f9 fb00 	bl	43e0 <realloc>
    ade0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    ade2:	63f8      	str	r0, [r7, #60]	; 0x3c
    ade4:	2800      	cmp	r0, #0
    ade6:	d05b      	beq.n	aea0 <__ssvfscanf_r+0x184c>
    ade8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    adea:	809c      	strh	r4, [r3, #4]
    adec:	6018      	str	r0, [r3, #0]
    adee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    adf0:	e7d2      	b.n	ad98 <__ssvfscanf_r+0x1744>
    adf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    adf4:	f8d7 803c 	ldr.w	r8, [r7, #60]	; 0x3c
    adf8:	2b00      	cmp	r3, #0
    adfa:	f43f ad75 	beq.w	a8e8 <__ssvfscanf_r+0x1294>
    adfe:	f8bb 300c 	ldrh.w	r3, [fp, #12]
    ae02:	065b      	lsls	r3, r3, #25
    ae04:	f57e ad1d 	bpl.w	9842 <__ssvfscanf_r+0x1ee>
    ae08:	e56a      	b.n	a8e0 <__ssvfscanf_r+0x128c>
    ae0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    ae0c:	3202      	adds	r2, #2
    ae0e:	d11d      	bne.n	ae4c <__ssvfscanf_r+0x17f8>
    ae10:	f8db 2004 	ldr.w	r2, [fp, #4]
    ae14:	2a00      	cmp	r2, #0
    ae16:	461d      	mov	r5, r3
    ae18:	f73f ae80 	bgt.w	ab1c <__ssvfscanf_r+0x14c8>
    ae1c:	4659      	mov	r1, fp
    ae1e:	4620      	mov	r0, r4
    ae20:	f001 fe36 	bl	ca90 <__ssrefill_r>
    ae24:	b9e0      	cbnz	r0, ae60 <__ssvfscanf_r+0x180c>
    ae26:	f1b9 0f00 	cmp.w	r9, #0
    ae2a:	f47f ae77 	bne.w	ab1c <__ssvfscanf_r+0x14c8>
    ae2e:	4645      	mov	r5, r8
    ae30:	46a1      	mov	r9, r4
    ae32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    ae34:	b123      	cbz	r3, ae40 <__ssvfscanf_r+0x17ec>
    ae36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ae38:	1af1      	subs	r1, r6, r3
    ae3a:	ebb5 0fa1 	cmp.w	r5, r1, asr #2
    ae3e:	d827      	bhi.n	ae90 <__ssvfscanf_r+0x183c>
    ae40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ae42:	2b00      	cmp	r3, #0
    ae44:	f47e ac2d 	bne.w	96a2 <__ssvfscanf_r+0x4e>
    ae48:	f7ff ba1c 	b.w	a284 <__ssvfscanf_r+0xc30>
    ae4c:	449a      	add	sl, r3
    ae4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ae50:	2b03      	cmp	r3, #3
    ae52:	f47f ae97 	bne.w	ab84 <__ssvfscanf_r+0x1530>
    ae56:	682b      	ldr	r3, [r5, #0]
    ae58:	2b04      	cmp	r3, #4
    ae5a:	f47f ae93 	bne.w	ab84 <__ssvfscanf_r+0x1530>
    ae5e:	e693      	b.n	ab88 <__ssvfscanf_r+0x1534>
    ae60:	46a1      	mov	r9, r4
    ae62:	462c      	mov	r4, r5
    ae64:	4645      	mov	r5, r8
    ae66:	2c00      	cmp	r4, #0
    ae68:	d0e3      	beq.n	ae32 <__ssvfscanf_r+0x17de>
    ae6a:	f7fe bcdf 	b.w	982c <__ssvfscanf_r+0x1d8>
    ae6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
    ae70:	1946      	adds	r6, r0, r5
    ae72:	6010      	str	r0, [r2, #0]
    ae74:	ea4f 0848 	mov.w	r8, r8, lsl #1
    ae78:	3604      	adds	r6, #4
    ae7a:	f8db 3004 	ldr.w	r3, [fp, #4]
    ae7e:	2b00      	cmp	r3, #0
    ae80:	f04f 0500 	mov.w	r5, #0
    ae84:	ddca      	ble.n	ae1c <__ssvfscanf_r+0x17c8>
    ae86:	f1b9 0f00 	cmp.w	r9, #0
    ae8a:	f47f ae47 	bne.w	ab1c <__ssvfscanf_r+0x14c8>
    ae8e:	e7ce      	b.n	ae2e <__ssvfscanf_r+0x17da>
    ae90:	6cbc      	ldr	r4, [r7, #72]	; 0x48
    ae92:	6820      	ldr	r0, [r4, #0]
    ae94:	f7f9 faa4 	bl	43e0 <realloc>
    ae98:	2800      	cmp	r0, #0
    ae9a:	d0d1      	beq.n	ae40 <__ssvfscanf_r+0x17ec>
    ae9c:	6020      	str	r0, [r4, #0]
    ae9e:	e7cf      	b.n	ae40 <__ssvfscanf_r+0x17ec>
    aea0:	4690      	mov	r8, r2
    aea2:	e521      	b.n	a8e8 <__ssvfscanf_r+0x1294>

0000aea4 <_fclose_r>:
    aea4:	b570      	push	{r4, r5, r6, lr}
    aea6:	2900      	cmp	r1, #0
    aea8:	d04b      	beq.n	af42 <_fclose_r+0x9e>
    aeaa:	4606      	mov	r6, r0
    aeac:	460c      	mov	r4, r1
    aeae:	b110      	cbz	r0, aeb6 <_fclose_r+0x12>
    aeb0:	6b43      	ldr	r3, [r0, #52]	; 0x34
    aeb2:	2b00      	cmp	r3, #0
    aeb4:	d048      	beq.n	af48 <_fclose_r+0xa4>
    aeb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
    aeb8:	07d8      	lsls	r0, r3, #31
    aeba:	d534      	bpl.n	af26 <_fclose_r+0x82>
    aebc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    aec0:	2b00      	cmp	r3, #0
    aec2:	d03e      	beq.n	af42 <_fclose_r+0x9e>
    aec4:	4621      	mov	r1, r4
    aec6:	4630      	mov	r0, r6
    aec8:	f000 f850 	bl	af6c <__sflush_r>
    aecc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    aece:	4605      	mov	r5, r0
    aed0:	b133      	cbz	r3, aee0 <_fclose_r+0x3c>
    aed2:	69e1      	ldr	r1, [r4, #28]
    aed4:	4630      	mov	r0, r6
    aed6:	4798      	blx	r3
    aed8:	2800      	cmp	r0, #0
    aeda:	bfb8      	it	lt
    aedc:	f04f 35ff 	movlt.w	r5, #4294967295
    aee0:	89a3      	ldrh	r3, [r4, #12]
    aee2:	061a      	lsls	r2, r3, #24
    aee4:	d43c      	bmi.n	af60 <_fclose_r+0xbc>
    aee6:	6b21      	ldr	r1, [r4, #48]	; 0x30
    aee8:	b141      	cbz	r1, aefc <_fclose_r+0x58>
    aeea:	f104 0340 	add.w	r3, r4, #64	; 0x40
    aeee:	4299      	cmp	r1, r3
    aef0:	d002      	beq.n	aef8 <_fclose_r+0x54>
    aef2:	4630      	mov	r0, r6
    aef4:	f7fb fb96 	bl	6624 <_free_r>
    aef8:	2300      	movs	r3, #0
    aefa:	6323      	str	r3, [r4, #48]	; 0x30
    aefc:	6c61      	ldr	r1, [r4, #68]	; 0x44
    aefe:	b121      	cbz	r1, af0a <_fclose_r+0x66>
    af00:	4630      	mov	r0, r6
    af02:	f7fb fb8f 	bl	6624 <_free_r>
    af06:	2300      	movs	r3, #0
    af08:	6463      	str	r3, [r4, #68]	; 0x44
    af0a:	f7fa fd0f 	bl	592c <__sfp_lock_acquire>
    af0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
    af10:	2200      	movs	r2, #0
    af12:	07db      	lsls	r3, r3, #31
    af14:	81a2      	strh	r2, [r4, #12]
    af16:	d51f      	bpl.n	af58 <_fclose_r+0xb4>
    af18:	6da0      	ldr	r0, [r4, #88]	; 0x58
    af1a:	f7fb f88d 	bl	6038 <__retarget_lock_close_recursive>
    af1e:	f7fa fd0b 	bl	5938 <__sfp_lock_release>
    af22:	4628      	mov	r0, r5
    af24:	bd70      	pop	{r4, r5, r6, pc}
    af26:	89a3      	ldrh	r3, [r4, #12]
    af28:	0599      	lsls	r1, r3, #22
    af2a:	d4cb      	bmi.n	aec4 <_fclose_r+0x20>
    af2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    af2e:	f7fb f885 	bl	603c <__retarget_lock_acquire_recursive>
    af32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    af36:	2b00      	cmp	r3, #0
    af38:	d1c4      	bne.n	aec4 <_fclose_r+0x20>
    af3a:	6e65      	ldr	r5, [r4, #100]	; 0x64
    af3c:	f015 0501 	ands.w	r5, r5, #1
    af40:	d005      	beq.n	af4e <_fclose_r+0xaa>
    af42:	2500      	movs	r5, #0
    af44:	4628      	mov	r0, r5
    af46:	bd70      	pop	{r4, r5, r6, pc}
    af48:	f7fa fcd2 	bl	58f0 <__sinit>
    af4c:	e7b3      	b.n	aeb6 <_fclose_r+0x12>
    af4e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    af50:	f7fb f876 	bl	6040 <__retarget_lock_release_recursive>
    af54:	4628      	mov	r0, r5
    af56:	bd70      	pop	{r4, r5, r6, pc}
    af58:	6da0      	ldr	r0, [r4, #88]	; 0x58
    af5a:	f7fb f871 	bl	6040 <__retarget_lock_release_recursive>
    af5e:	e7db      	b.n	af18 <_fclose_r+0x74>
    af60:	6921      	ldr	r1, [r4, #16]
    af62:	4630      	mov	r0, r6
    af64:	f7fb fb5e 	bl	6624 <_free_r>
    af68:	e7bd      	b.n	aee6 <_fclose_r+0x42>
    af6a:	bf00      	nop

0000af6c <__sflush_r>:
    af6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
    af70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    af74:	460c      	mov	r4, r1
    af76:	0711      	lsls	r1, r2, #28
    af78:	4680      	mov	r8, r0
    af7a:	d447      	bmi.n	b00c <__sflush_r+0xa0>
    af7c:	6863      	ldr	r3, [r4, #4]
    af7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    af82:	2b00      	cmp	r3, #0
    af84:	81a2      	strh	r2, [r4, #12]
    af86:	dd5e      	ble.n	b046 <__sflush_r+0xda>
    af88:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    af8a:	2d00      	cmp	r5, #0
    af8c:	d058      	beq.n	b040 <__sflush_r+0xd4>
    af8e:	2300      	movs	r3, #0
    af90:	f8d8 6000 	ldr.w	r6, [r8]
    af94:	f8c8 3000 	str.w	r3, [r8]
    af98:	b293      	uxth	r3, r2
    af9a:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    af9e:	d156      	bne.n	b04e <__sflush_r+0xe2>
    afa0:	2301      	movs	r3, #1
    afa2:	69e1      	ldr	r1, [r4, #28]
    afa4:	4640      	mov	r0, r8
    afa6:	47a8      	blx	r5
    afa8:	1c43      	adds	r3, r0, #1
    afaa:	d067      	beq.n	b07c <__sflush_r+0x110>
    afac:	89a3      	ldrh	r3, [r4, #12]
    afae:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    afb0:	075f      	lsls	r7, r3, #29
    afb2:	d505      	bpl.n	afc0 <__sflush_r+0x54>
    afb4:	6863      	ldr	r3, [r4, #4]
    afb6:	1ac0      	subs	r0, r0, r3
    afb8:	6b23      	ldr	r3, [r4, #48]	; 0x30
    afba:	b10b      	cbz	r3, afc0 <__sflush_r+0x54>
    afbc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    afbe:	1ac0      	subs	r0, r0, r3
    afc0:	69e1      	ldr	r1, [r4, #28]
    afc2:	4602      	mov	r2, r0
    afc4:	2300      	movs	r3, #0
    afc6:	4640      	mov	r0, r8
    afc8:	47a8      	blx	r5
    afca:	1c41      	adds	r1, r0, #1
    afcc:	d141      	bne.n	b052 <__sflush_r+0xe6>
    afce:	f8d8 3000 	ldr.w	r3, [r8]
    afd2:	2b00      	cmp	r3, #0
    afd4:	d03d      	beq.n	b052 <__sflush_r+0xe6>
    afd6:	2b1d      	cmp	r3, #29
    afd8:	d001      	beq.n	afde <__sflush_r+0x72>
    afda:	2b16      	cmp	r3, #22
    afdc:	d156      	bne.n	b08c <__sflush_r+0x120>
    afde:	89a3      	ldrh	r3, [r4, #12]
    afe0:	6922      	ldr	r2, [r4, #16]
    afe2:	6022      	str	r2, [r4, #0]
    afe4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    afe8:	2100      	movs	r1, #0
    afea:	6061      	str	r1, [r4, #4]
    afec:	81a3      	strh	r3, [r4, #12]
    afee:	6b21      	ldr	r1, [r4, #48]	; 0x30
    aff0:	f8c8 6000 	str.w	r6, [r8]
    aff4:	b321      	cbz	r1, b040 <__sflush_r+0xd4>
    aff6:	f104 0340 	add.w	r3, r4, #64	; 0x40
    affa:	4299      	cmp	r1, r3
    affc:	d002      	beq.n	b004 <__sflush_r+0x98>
    affe:	4640      	mov	r0, r8
    b000:	f7fb fb10 	bl	6624 <_free_r>
    b004:	2000      	movs	r0, #0
    b006:	6320      	str	r0, [r4, #48]	; 0x30
    b008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b00c:	6926      	ldr	r6, [r4, #16]
    b00e:	b1be      	cbz	r6, b040 <__sflush_r+0xd4>
    b010:	b293      	uxth	r3, r2
    b012:	6825      	ldr	r5, [r4, #0]
    b014:	6026      	str	r6, [r4, #0]
    b016:	079a      	lsls	r2, r3, #30
    b018:	bf0c      	ite	eq
    b01a:	6963      	ldreq	r3, [r4, #20]
    b01c:	2300      	movne	r3, #0
    b01e:	1bad      	subs	r5, r5, r6
    b020:	60a3      	str	r3, [r4, #8]
    b022:	e00b      	b.n	b03c <__sflush_r+0xd0>
    b024:	462b      	mov	r3, r5
    b026:	4632      	mov	r2, r6
    b028:	69e1      	ldr	r1, [r4, #28]
    b02a:	6a67      	ldr	r7, [r4, #36]	; 0x24
    b02c:	4640      	mov	r0, r8
    b02e:	47b8      	blx	r7
    b030:	f1b0 0c00 	subs.w	ip, r0, #0
    b034:	eba5 050c 	sub.w	r5, r5, ip
    b038:	4466      	add	r6, ip
    b03a:	dd17      	ble.n	b06c <__sflush_r+0x100>
    b03c:	2d00      	cmp	r5, #0
    b03e:	dcf1      	bgt.n	b024 <__sflush_r+0xb8>
    b040:	2000      	movs	r0, #0
    b042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b046:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    b048:	2b00      	cmp	r3, #0
    b04a:	dc9d      	bgt.n	af88 <__sflush_r+0x1c>
    b04c:	e7f8      	b.n	b040 <__sflush_r+0xd4>
    b04e:	6d20      	ldr	r0, [r4, #80]	; 0x50
    b050:	e7ae      	b.n	afb0 <__sflush_r+0x44>
    b052:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    b056:	6922      	ldr	r2, [r4, #16]
    b058:	6022      	str	r2, [r4, #0]
    b05a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    b05e:	81a3      	strh	r3, [r4, #12]
    b060:	2200      	movs	r2, #0
    b062:	04db      	lsls	r3, r3, #19
    b064:	6062      	str	r2, [r4, #4]
    b066:	d5c2      	bpl.n	afee <__sflush_r+0x82>
    b068:	6520      	str	r0, [r4, #80]	; 0x50
    b06a:	e7c0      	b.n	afee <__sflush_r+0x82>
    b06c:	89a3      	ldrh	r3, [r4, #12]
    b06e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b072:	f04f 30ff 	mov.w	r0, #4294967295
    b076:	81a3      	strh	r3, [r4, #12]
    b078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b07c:	f8d8 3000 	ldr.w	r3, [r8]
    b080:	2b00      	cmp	r3, #0
    b082:	d093      	beq.n	afac <__sflush_r+0x40>
    b084:	2b1d      	cmp	r3, #29
    b086:	d006      	beq.n	b096 <__sflush_r+0x12a>
    b088:	2b16      	cmp	r3, #22
    b08a:	d004      	beq.n	b096 <__sflush_r+0x12a>
    b08c:	89a3      	ldrh	r3, [r4, #12]
    b08e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b092:	81a3      	strh	r3, [r4, #12]
    b094:	e7d5      	b.n	b042 <__sflush_r+0xd6>
    b096:	f8c8 6000 	str.w	r6, [r8]
    b09a:	e7d1      	b.n	b040 <__sflush_r+0xd4>

0000b09c <_fflush_r>:
    b09c:	b538      	push	{r3, r4, r5, lr}
    b09e:	460c      	mov	r4, r1
    b0a0:	4605      	mov	r5, r0
    b0a2:	b108      	cbz	r0, b0a8 <_fflush_r+0xc>
    b0a4:	6b43      	ldr	r3, [r0, #52]	; 0x34
    b0a6:	b303      	cbz	r3, b0ea <_fflush_r+0x4e>
    b0a8:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
    b0ac:	b188      	cbz	r0, b0d2 <_fflush_r+0x36>
    b0ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
    b0b0:	07db      	lsls	r3, r3, #31
    b0b2:	d401      	bmi.n	b0b8 <_fflush_r+0x1c>
    b0b4:	0581      	lsls	r1, r0, #22
    b0b6:	d50f      	bpl.n	b0d8 <_fflush_r+0x3c>
    b0b8:	4628      	mov	r0, r5
    b0ba:	4621      	mov	r1, r4
    b0bc:	f7ff ff56 	bl	af6c <__sflush_r>
    b0c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
    b0c2:	07da      	lsls	r2, r3, #31
    b0c4:	4605      	mov	r5, r0
    b0c6:	d402      	bmi.n	b0ce <_fflush_r+0x32>
    b0c8:	89a3      	ldrh	r3, [r4, #12]
    b0ca:	059b      	lsls	r3, r3, #22
    b0cc:	d508      	bpl.n	b0e0 <_fflush_r+0x44>
    b0ce:	4628      	mov	r0, r5
    b0d0:	bd38      	pop	{r3, r4, r5, pc}
    b0d2:	4605      	mov	r5, r0
    b0d4:	4628      	mov	r0, r5
    b0d6:	bd38      	pop	{r3, r4, r5, pc}
    b0d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    b0da:	f7fa ffaf 	bl	603c <__retarget_lock_acquire_recursive>
    b0de:	e7eb      	b.n	b0b8 <_fflush_r+0x1c>
    b0e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    b0e2:	f7fa ffad 	bl	6040 <__retarget_lock_release_recursive>
    b0e6:	4628      	mov	r0, r5
    b0e8:	bd38      	pop	{r3, r4, r5, pc}
    b0ea:	f7fa fc01 	bl	58f0 <__sinit>
    b0ee:	e7db      	b.n	b0a8 <_fflush_r+0xc>

0000b0f0 <__sccl>:
    b0f0:	b570      	push	{r4, r5, r6, lr}
    b0f2:	780c      	ldrb	r4, [r1, #0]
    b0f4:	2c5e      	cmp	r4, #94	; 0x5e
    b0f6:	4686      	mov	lr, r0
    b0f8:	d01e      	beq.n	b138 <__sccl+0x48>
    b0fa:	2200      	movs	r2, #0
    b0fc:	1c48      	adds	r0, r1, #1
    b0fe:	4694      	mov	ip, r2
    b100:	f10e 33ff 	add.w	r3, lr, #4294967295
    b104:	f10e 01ff 	add.w	r1, lr, #255	; 0xff
    b108:	f803 2f01 	strb.w	r2, [r3, #1]!
    b10c:	428b      	cmp	r3, r1
    b10e:	d1fb      	bne.n	b108 <__sccl+0x18>
    b110:	b184      	cbz	r4, b134 <__sccl+0x44>
    b112:	f08c 0101 	eor.w	r1, ip, #1
    b116:	f80e 1004 	strb.w	r1, [lr, r4]
    b11a:	1c45      	adds	r5, r0, #1
    b11c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    b120:	2b2d      	cmp	r3, #45	; 0x2d
    b122:	d00e      	beq.n	b142 <__sccl+0x52>
    b124:	2b5d      	cmp	r3, #93	; 0x5d
    b126:	d003      	beq.n	b130 <__sccl+0x40>
    b128:	b11b      	cbz	r3, b132 <__sccl+0x42>
    b12a:	461c      	mov	r4, r3
    b12c:	4628      	mov	r0, r5
    b12e:	e7f2      	b.n	b116 <__sccl+0x26>
    b130:	4628      	mov	r0, r5
    b132:	bd70      	pop	{r4, r5, r6, pc}
    b134:	3801      	subs	r0, #1
    b136:	bd70      	pop	{r4, r5, r6, pc}
    b138:	2201      	movs	r2, #1
    b13a:	784c      	ldrb	r4, [r1, #1]
    b13c:	1c88      	adds	r0, r1, #2
    b13e:	4694      	mov	ip, r2
    b140:	e7de      	b.n	b100 <__sccl+0x10>
    b142:	f890 c001 	ldrb.w	ip, [r0, #1]
    b146:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
    b14a:	d0ee      	beq.n	b12a <__sccl+0x3a>
    b14c:	4564      	cmp	r4, ip
    b14e:	dcec      	bgt.n	b12a <__sccl+0x3a>
    b150:	1c66      	adds	r6, r4, #1
    b152:	3002      	adds	r0, #2
    b154:	eb0e 0206 	add.w	r2, lr, r6
    b158:	f802 1b01 	strb.w	r1, [r2], #1
    b15c:	eba2 030e 	sub.w	r3, r2, lr
    b160:	3b01      	subs	r3, #1
    b162:	459c      	cmp	ip, r3
    b164:	dcf8      	bgt.n	b158 <__sccl+0x68>
    b166:	ebac 0304 	sub.w	r3, ip, r4
    b16a:	3b01      	subs	r3, #1
    b16c:	4564      	cmp	r4, ip
    b16e:	bfa8      	it	ge
    b170:	2300      	movge	r3, #0
    b172:	3502      	adds	r5, #2
    b174:	199c      	adds	r4, r3, r6
    b176:	e7d1      	b.n	b11c <__sccl+0x2c>

0000b178 <sprintf>:
    b178:	b40e      	push	{r1, r2, r3}
    b17a:	b510      	push	{r4, lr}
    b17c:	b09d      	sub	sp, #116	; 0x74
    b17e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    b182:	ab1f      	add	r3, sp, #124	; 0x7c
    b184:	e9cd 0106 	strd	r0, r1, [sp, #24]
    b188:	9104      	str	r1, [sp, #16]
    b18a:	4909      	ldr	r1, [pc, #36]	; (b1b0 <sprintf+0x38>)
    b18c:	f853 2b04 	ldr.w	r2, [r3], #4
    b190:	9002      	str	r0, [sp, #8]
    b192:	4c08      	ldr	r4, [pc, #32]	; (b1b4 <sprintf+0x3c>)
    b194:	6808      	ldr	r0, [r1, #0]
    b196:	9301      	str	r3, [sp, #4]
    b198:	a902      	add	r1, sp, #8
    b19a:	9405      	str	r4, [sp, #20]
    b19c:	f7fc fcb8 	bl	7b10 <_svfprintf_r>
    b1a0:	9b02      	ldr	r3, [sp, #8]
    b1a2:	2200      	movs	r2, #0
    b1a4:	701a      	strb	r2, [r3, #0]
    b1a6:	b01d      	add	sp, #116	; 0x74
    b1a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b1ac:	b003      	add	sp, #12
    b1ae:	4770      	bx	lr
    b1b0:	200081d0 	.word	0x200081d0
    b1b4:	ffff0208 	.word	0xffff0208

0000b1b8 <stpncpy>:
    b1b8:	ea41 0300 	orr.w	r3, r1, r0
    b1bc:	079b      	lsls	r3, r3, #30
    b1be:	b430      	push	{r4, r5}
    b1c0:	d101      	bne.n	b1c6 <stpncpy+0xe>
    b1c2:	2a03      	cmp	r2, #3
    b1c4:	d80f      	bhi.n	b1e6 <stpncpy+0x2e>
    b1c6:	f101 3cff 	add.w	ip, r1, #4294967295
    b1ca:	e007      	b.n	b1dc <stpncpy+0x24>
    b1cc:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
    b1d0:	f803 1b01 	strb.w	r1, [r3], #1
    b1d4:	1e54      	subs	r4, r2, #1
    b1d6:	b1c1      	cbz	r1, b20a <stpncpy+0x52>
    b1d8:	4622      	mov	r2, r4
    b1da:	4618      	mov	r0, r3
    b1dc:	4603      	mov	r3, r0
    b1de:	2a00      	cmp	r2, #0
    b1e0:	d1f4      	bne.n	b1cc <stpncpy+0x14>
    b1e2:	bc30      	pop	{r4, r5}
    b1e4:	4770      	bx	lr
    b1e6:	460b      	mov	r3, r1
    b1e8:	4619      	mov	r1, r3
    b1ea:	f853 5b04 	ldr.w	r5, [r3], #4
    b1ee:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
    b1f2:	ea24 0405 	bic.w	r4, r4, r5
    b1f6:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    b1fa:	d1e4      	bne.n	b1c6 <stpncpy+0xe>
    b1fc:	3a04      	subs	r2, #4
    b1fe:	2a03      	cmp	r2, #3
    b200:	f840 5b04 	str.w	r5, [r0], #4
    b204:	4619      	mov	r1, r3
    b206:	d8ef      	bhi.n	b1e8 <stpncpy+0x30>
    b208:	e7dd      	b.n	b1c6 <stpncpy+0xe>
    b20a:	4402      	add	r2, r0
    b20c:	2c00      	cmp	r4, #0
    b20e:	d0e8      	beq.n	b1e2 <stpncpy+0x2a>
    b210:	f803 1b01 	strb.w	r1, [r3], #1
    b214:	4293      	cmp	r3, r2
    b216:	d1fb      	bne.n	b210 <stpncpy+0x58>
    b218:	bc30      	pop	{r4, r5}
    b21a:	4770      	bx	lr

0000b21c <_localeconv_r>:
    b21c:	4800      	ldr	r0, [pc, #0]	; (b220 <_localeconv_r+0x4>)
    b21e:	4770      	bx	lr
    b220:	20007d38 	.word	0x20007d38
	...

0000b230 <memchr>:
    b230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    b234:	2a10      	cmp	r2, #16
    b236:	db2b      	blt.n	b290 <memchr+0x60>
    b238:	f010 0f07 	tst.w	r0, #7
    b23c:	d008      	beq.n	b250 <memchr+0x20>
    b23e:	f810 3b01 	ldrb.w	r3, [r0], #1
    b242:	3a01      	subs	r2, #1
    b244:	428b      	cmp	r3, r1
    b246:	d02d      	beq.n	b2a4 <memchr+0x74>
    b248:	f010 0f07 	tst.w	r0, #7
    b24c:	b342      	cbz	r2, b2a0 <memchr+0x70>
    b24e:	d1f6      	bne.n	b23e <memchr+0xe>
    b250:	b4f0      	push	{r4, r5, r6, r7}
    b252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    b256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    b25a:	f022 0407 	bic.w	r4, r2, #7
    b25e:	f07f 0700 	mvns.w	r7, #0
    b262:	2300      	movs	r3, #0
    b264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    b268:	3c08      	subs	r4, #8
    b26a:	ea85 0501 	eor.w	r5, r5, r1
    b26e:	ea86 0601 	eor.w	r6, r6, r1
    b272:	fa85 f547 	uadd8	r5, r5, r7
    b276:	faa3 f587 	sel	r5, r3, r7
    b27a:	fa86 f647 	uadd8	r6, r6, r7
    b27e:	faa5 f687 	sel	r6, r5, r7
    b282:	b98e      	cbnz	r6, b2a8 <memchr+0x78>
    b284:	d1ee      	bne.n	b264 <memchr+0x34>
    b286:	bcf0      	pop	{r4, r5, r6, r7}
    b288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    b28c:	f002 0207 	and.w	r2, r2, #7
    b290:	b132      	cbz	r2, b2a0 <memchr+0x70>
    b292:	f810 3b01 	ldrb.w	r3, [r0], #1
    b296:	3a01      	subs	r2, #1
    b298:	ea83 0301 	eor.w	r3, r3, r1
    b29c:	b113      	cbz	r3, b2a4 <memchr+0x74>
    b29e:	d1f8      	bne.n	b292 <memchr+0x62>
    b2a0:	2000      	movs	r0, #0
    b2a2:	4770      	bx	lr
    b2a4:	3801      	subs	r0, #1
    b2a6:	4770      	bx	lr
    b2a8:	2d00      	cmp	r5, #0
    b2aa:	bf06      	itte	eq
    b2ac:	4635      	moveq	r5, r6
    b2ae:	3803      	subeq	r0, #3
    b2b0:	3807      	subne	r0, #7
    b2b2:	f015 0f01 	tst.w	r5, #1
    b2b6:	d107      	bne.n	b2c8 <memchr+0x98>
    b2b8:	3001      	adds	r0, #1
    b2ba:	f415 7f80 	tst.w	r5, #256	; 0x100
    b2be:	bf02      	ittt	eq
    b2c0:	3001      	addeq	r0, #1
    b2c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    b2c6:	3001      	addeq	r0, #1
    b2c8:	bcf0      	pop	{r4, r5, r6, r7}
    b2ca:	3801      	subs	r0, #1
    b2cc:	4770      	bx	lr
    b2ce:	bf00      	nop

0000b2d0 <frexp>:
    b2d0:	b430      	push	{r4, r5}
    b2d2:	b082      	sub	sp, #8
    b2d4:	ed8d 0b00 	vstr	d0, [sp]
    b2d8:	9a01      	ldr	r2, [sp, #4]
    b2da:	4c19      	ldr	r4, [pc, #100]	; (b340 <frexp+0x70>)
    b2dc:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
    b2e0:	2100      	movs	r1, #0
    b2e2:	42a3      	cmp	r3, r4
    b2e4:	6001      	str	r1, [r0, #0]
    b2e6:	dc21      	bgt.n	b32c <frexp+0x5c>
    b2e8:	9c00      	ldr	r4, [sp, #0]
    b2ea:	431c      	orrs	r4, r3
    b2ec:	d01e      	beq.n	b32c <frexp+0x5c>
    b2ee:	4c15      	ldr	r4, [pc, #84]	; (b344 <frexp+0x74>)
    b2f0:	4014      	ands	r4, r2
    b2f2:	b954      	cbnz	r4, b30a <frexp+0x3a>
    b2f4:	ed9f 7b10 	vldr	d7, [pc, #64]	; b338 <frexp+0x68>
    b2f8:	ee20 7b07 	vmul.f64	d7, d0, d7
    b2fc:	ed8d 7b00 	vstr	d7, [sp]
    b300:	9a01      	ldr	r2, [sp, #4]
    b302:	f06f 0135 	mvn.w	r1, #53	; 0x35
    b306:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
    b30a:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
    b30e:	e9dd 4500 	ldrd	r4, r5, [sp]
    b312:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
    b316:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
    b31a:	151b      	asrs	r3, r3, #20
    b31c:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
    b320:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
    b324:	e9cd 4500 	strd	r4, r5, [sp]
    b328:	440b      	add	r3, r1
    b32a:	6003      	str	r3, [r0, #0]
    b32c:	ed9d 0b00 	vldr	d0, [sp]
    b330:	b002      	add	sp, #8
    b332:	bc30      	pop	{r4, r5}
    b334:	4770      	bx	lr
    b336:	bf00      	nop
    b338:	00000000 	.word	0x00000000
    b33c:	43500000 	.word	0x43500000
    b340:	7fefffff 	.word	0x7fefffff
    b344:	7ff00000 	.word	0x7ff00000

0000b348 <__assert_func>:
    b348:	b500      	push	{lr}
    b34a:	4c0b      	ldr	r4, [pc, #44]	; (b378 <__assert_func+0x30>)
    b34c:	6825      	ldr	r5, [r4, #0]
    b34e:	4614      	mov	r4, r2
    b350:	68ee      	ldr	r6, [r5, #12]
    b352:	461a      	mov	r2, r3
    b354:	b085      	sub	sp, #20
    b356:	4603      	mov	r3, r0
    b358:	460d      	mov	r5, r1
    b35a:	b14c      	cbz	r4, b370 <__assert_func+0x28>
    b35c:	4907      	ldr	r1, [pc, #28]	; (b37c <__assert_func+0x34>)
    b35e:	9500      	str	r5, [sp, #0]
    b360:	e9cd 1401 	strd	r1, r4, [sp, #4]
    b364:	4630      	mov	r0, r6
    b366:	4906      	ldr	r1, [pc, #24]	; (b380 <__assert_func+0x38>)
    b368:	f001 fabe 	bl	c8e8 <fiprintf>
    b36c:	f7f7 f8c6 	bl	24fc <abort>
    b370:	4904      	ldr	r1, [pc, #16]	; (b384 <__assert_func+0x3c>)
    b372:	460c      	mov	r4, r1
    b374:	e7f3      	b.n	b35e <__assert_func+0x16>
    b376:	bf00      	nop
    b378:	200081d0 	.word	0x200081d0
    b37c:	20000520 	.word	0x20000520
    b380:	20000530 	.word	0x20000530
    b384:	20007818 	.word	0x20007818

0000b388 <_calloc_r>:
    b388:	b538      	push	{r3, r4, r5, lr}
    b38a:	fba1 1402 	umull	r1, r4, r1, r2
    b38e:	bb8c      	cbnz	r4, b3f4 <_calloc_r+0x6c>
    b390:	f7f8 fd6a 	bl	3e68 <_malloc_r>
    b394:	4605      	mov	r5, r0
    b396:	b1e0      	cbz	r0, b3d2 <_calloc_r+0x4a>
    b398:	f850 2c04 	ldr.w	r2, [r0, #-4]
    b39c:	f022 0203 	bic.w	r2, r2, #3
    b3a0:	3a04      	subs	r2, #4
    b3a2:	2a24      	cmp	r2, #36	; 0x24
    b3a4:	d817      	bhi.n	b3d6 <_calloc_r+0x4e>
    b3a6:	2a13      	cmp	r2, #19
    b3a8:	d91a      	bls.n	b3e0 <_calloc_r+0x58>
    b3aa:	2a1b      	cmp	r2, #27
    b3ac:	e9c0 4400 	strd	r4, r4, [r0]
    b3b0:	d91d      	bls.n	b3ee <_calloc_r+0x66>
    b3b2:	2a24      	cmp	r2, #36	; 0x24
    b3b4:	bf14      	ite	ne
    b3b6:	f100 0210 	addne.w	r2, r0, #16
    b3ba:	f100 0218 	addeq.w	r2, r0, #24
    b3be:	f04f 0300 	mov.w	r3, #0
    b3c2:	e9c0 4402 	strd	r4, r4, [r0, #8]
    b3c6:	bf04      	itt	eq
    b3c8:	6104      	streq	r4, [r0, #16]
    b3ca:	6144      	streq	r4, [r0, #20]
    b3cc:	e9c2 3300 	strd	r3, r3, [r2]
    b3d0:	6093      	str	r3, [r2, #8]
    b3d2:	4628      	mov	r0, r5
    b3d4:	bd38      	pop	{r3, r4, r5, pc}
    b3d6:	4621      	mov	r1, r4
    b3d8:	f7fa fc66 	bl	5ca8 <memset>
    b3dc:	4628      	mov	r0, r5
    b3de:	bd38      	pop	{r3, r4, r5, pc}
    b3e0:	4602      	mov	r2, r0
    b3e2:	2300      	movs	r3, #0
    b3e4:	e9c2 3300 	strd	r3, r3, [r2]
    b3e8:	6093      	str	r3, [r2, #8]
    b3ea:	4628      	mov	r0, r5
    b3ec:	bd38      	pop	{r3, r4, r5, pc}
    b3ee:	f100 0208 	add.w	r2, r0, #8
    b3f2:	e7f6      	b.n	b3e2 <_calloc_r+0x5a>
    b3f4:	f7fa fdf4 	bl	5fe0 <__errno>
    b3f8:	230c      	movs	r3, #12
    b3fa:	2500      	movs	r5, #0
    b3fc:	6003      	str	r3, [r0, #0]
    b3fe:	e7e8      	b.n	b3d2 <_calloc_r+0x4a>

0000b400 <quorem>:
    b400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b404:	6903      	ldr	r3, [r0, #16]
    b406:	690c      	ldr	r4, [r1, #16]
    b408:	42a3      	cmp	r3, r4
    b40a:	b083      	sub	sp, #12
    b40c:	f2c0 8087 	blt.w	b51e <quorem+0x11e>
    b410:	3c01      	subs	r4, #1
    b412:	f101 0514 	add.w	r5, r1, #20
    b416:	00a3      	lsls	r3, r4, #2
    b418:	f100 0814 	add.w	r8, r0, #20
    b41c:	9300      	str	r3, [sp, #0]
    b41e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    b422:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
    b426:	3301      	adds	r3, #1
    b428:	4681      	mov	r9, r0
    b42a:	429a      	cmp	r2, r3
    b42c:	eb08 0084 	add.w	r0, r8, r4, lsl #2
    b430:	eb05 0784 	add.w	r7, r5, r4, lsl #2
    b434:	9001      	str	r0, [sp, #4]
    b436:	fbb2 f6f3 	udiv	r6, r2, r3
    b43a:	d33b      	bcc.n	b4b4 <quorem+0xb4>
    b43c:	f04f 0c00 	mov.w	ip, #0
    b440:	46ae      	mov	lr, r5
    b442:	4640      	mov	r0, r8
    b444:	46e2      	mov	sl, ip
    b446:	4663      	mov	r3, ip
    b448:	f85e bb04 	ldr.w	fp, [lr], #4
    b44c:	6802      	ldr	r2, [r0, #0]
    b44e:	fa1f fc8b 	uxth.w	ip, fp
    b452:	fb06 330c 	mla	r3, r6, ip, r3
    b456:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    b45a:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
    b45e:	fb06 cc0b 	mla	ip, r6, fp, ip
    b462:	b29b      	uxth	r3, r3
    b464:	ebaa 0303 	sub.w	r3, sl, r3
    b468:	fa1f fa8c 	uxth.w	sl, ip
    b46c:	fa13 f382 	uxtah	r3, r3, r2
    b470:	ebca 4212 	rsb	r2, sl, r2, lsr #16
    b474:	eb02 4223 	add.w	r2, r2, r3, asr #16
    b478:	b29b      	uxth	r3, r3
    b47a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    b47e:	4577      	cmp	r7, lr
    b480:	f840 3b04 	str.w	r3, [r0], #4
    b484:	ea4f 4a22 	mov.w	sl, r2, asr #16
    b488:	ea4f 431c 	mov.w	r3, ip, lsr #16
    b48c:	d2dc      	bcs.n	b448 <quorem+0x48>
    b48e:	9b00      	ldr	r3, [sp, #0]
    b490:	f858 3003 	ldr.w	r3, [r8, r3]
    b494:	b973      	cbnz	r3, b4b4 <quorem+0xb4>
    b496:	9b01      	ldr	r3, [sp, #4]
    b498:	3b04      	subs	r3, #4
    b49a:	4598      	cmp	r8, r3
    b49c:	d304      	bcc.n	b4a8 <quorem+0xa8>
    b49e:	e007      	b.n	b4b0 <quorem+0xb0>
    b4a0:	4598      	cmp	r8, r3
    b4a2:	f104 34ff 	add.w	r4, r4, #4294967295
    b4a6:	d203      	bcs.n	b4b0 <quorem+0xb0>
    b4a8:	f853 2904 	ldr.w	r2, [r3], #-4
    b4ac:	2a00      	cmp	r2, #0
    b4ae:	d0f7      	beq.n	b4a0 <quorem+0xa0>
    b4b0:	f8c9 4010 	str.w	r4, [r9, #16]
    b4b4:	4648      	mov	r0, r9
    b4b6:	f7fc f8bf 	bl	7638 <__mcmp>
    b4ba:	2800      	cmp	r0, #0
    b4bc:	db2b      	blt.n	b516 <quorem+0x116>
    b4be:	3601      	adds	r6, #1
    b4c0:	4641      	mov	r1, r8
    b4c2:	2300      	movs	r3, #0
    b4c4:	f855 0b04 	ldr.w	r0, [r5], #4
    b4c8:	f8d1 c000 	ldr.w	ip, [r1]
    b4cc:	b282      	uxth	r2, r0
    b4ce:	1a9a      	subs	r2, r3, r2
    b4d0:	0c03      	lsrs	r3, r0, #16
    b4d2:	fa12 f28c 	uxtah	r2, r2, ip
    b4d6:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
    b4da:	eb03 4322 	add.w	r3, r3, r2, asr #16
    b4de:	b292      	uxth	r2, r2
    b4e0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    b4e4:	42af      	cmp	r7, r5
    b4e6:	f841 2b04 	str.w	r2, [r1], #4
    b4ea:	ea4f 4323 	mov.w	r3, r3, asr #16
    b4ee:	d2e9      	bcs.n	b4c4 <quorem+0xc4>
    b4f0:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
    b4f4:	eb08 0384 	add.w	r3, r8, r4, lsl #2
    b4f8:	b96a      	cbnz	r2, b516 <quorem+0x116>
    b4fa:	3b04      	subs	r3, #4
    b4fc:	4598      	cmp	r8, r3
    b4fe:	d304      	bcc.n	b50a <quorem+0x10a>
    b500:	e007      	b.n	b512 <quorem+0x112>
    b502:	4598      	cmp	r8, r3
    b504:	f104 34ff 	add.w	r4, r4, #4294967295
    b508:	d203      	bcs.n	b512 <quorem+0x112>
    b50a:	f853 2904 	ldr.w	r2, [r3], #-4
    b50e:	2a00      	cmp	r2, #0
    b510:	d0f7      	beq.n	b502 <quorem+0x102>
    b512:	f8c9 4010 	str.w	r4, [r9, #16]
    b516:	4630      	mov	r0, r6
    b518:	b003      	add	sp, #12
    b51a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b51e:	2000      	movs	r0, #0
    b520:	b003      	add	sp, #12
    b522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b526:	bf00      	nop

0000b528 <_dtoa_r>:
    b528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b52c:	ed2d 8b02 	vpush	{d8}
    b530:	b08f      	sub	sp, #60	; 0x3c
    b532:	ed8d 0b02 	vstr	d0, [sp, #8]
    b536:	9101      	str	r1, [sp, #4]
    b538:	6b81      	ldr	r1, [r0, #56]	; 0x38
    b53a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    b53c:	9305      	str	r3, [sp, #20]
    b53e:	ec57 6b10 	vmov	r6, r7, d0
    b542:	4604      	mov	r4, r0
    b544:	4693      	mov	fp, r2
    b546:	b141      	cbz	r1, b55a <_dtoa_r+0x32>
    b548:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    b54a:	604a      	str	r2, [r1, #4]
    b54c:	2301      	movs	r3, #1
    b54e:	4093      	lsls	r3, r2
    b550:	608b      	str	r3, [r1, #8]
    b552:	f7fb fdb9 	bl	70c8 <_Bfree>
    b556:	2300      	movs	r3, #0
    b558:	63a3      	str	r3, [r4, #56]	; 0x38
    b55a:	f1b7 0800 	subs.w	r8, r7, #0
    b55e:	bfb4      	ite	lt
    b560:	2301      	movlt	r3, #1
    b562:	2300      	movge	r3, #0
    b564:	602b      	str	r3, [r5, #0]
    b566:	4bbe      	ldr	r3, [pc, #760]	; (b860 <_dtoa_r+0x338>)
    b568:	bfbc      	itt	lt
    b56a:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
    b56e:	f8cd 800c 	strlt.w	r8, [sp, #12]
    b572:	ea33 0308 	bics.w	r3, r3, r8
    b576:	f000 809f 	beq.w	b6b8 <_dtoa_r+0x190>
    b57a:	ed9d 8b02 	vldr	d8, [sp, #8]
    b57e:	eeb5 8b40 	vcmp.f64	d8, #0.0
    b582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b586:	d111      	bne.n	b5ac <_dtoa_r+0x84>
    b588:	9a05      	ldr	r2, [sp, #20]
    b58a:	2301      	movs	r3, #1
    b58c:	6013      	str	r3, [r2, #0]
    b58e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    b590:	2b00      	cmp	r3, #0
    b592:	f000 823f 	beq.w	ba14 <_dtoa_r+0x4ec>
    b596:	4bb3      	ldr	r3, [pc, #716]	; (b864 <_dtoa_r+0x33c>)
    b598:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    b59a:	6013      	str	r3, [r2, #0]
    b59c:	3b01      	subs	r3, #1
    b59e:	9300      	str	r3, [sp, #0]
    b5a0:	9800      	ldr	r0, [sp, #0]
    b5a2:	b00f      	add	sp, #60	; 0x3c
    b5a4:	ecbd 8b02 	vpop	{d8}
    b5a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b5ac:	aa0c      	add	r2, sp, #48	; 0x30
    b5ae:	a90d      	add	r1, sp, #52	; 0x34
    b5b0:	4620      	mov	r0, r4
    b5b2:	eeb0 0b48 	vmov.f64	d0, d8
    b5b6:	f7fc f99f 	bl	78f8 <__d2b>
    b5ba:	ea5f 5318 	movs.w	r3, r8, lsr #20
    b5be:	4605      	mov	r5, r0
    b5c0:	f040 8092 	bne.w	b6e8 <_dtoa_r+0x1c0>
    b5c4:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
    b5c8:	440b      	add	r3, r1
    b5ca:	f203 4232 	addw	r2, r3, #1074	; 0x432
    b5ce:	2a20      	cmp	r2, #32
    b5d0:	f340 82fa 	ble.w	bbc8 <_dtoa_r+0x6a0>
    b5d4:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
    b5d8:	fa08 f802 	lsl.w	r8, r8, r2
    b5dc:	f203 4212 	addw	r2, r3, #1042	; 0x412
    b5e0:	40d6      	lsrs	r6, r2
    b5e2:	ea48 0206 	orr.w	r2, r8, r6
    b5e6:	ee07 2a10 	vmov	s14, r2
    b5ea:	eeb8 7b47 	vcvt.f64.u32	d7, s14
    b5ee:	1e58      	subs	r0, r3, #1
    b5f0:	ee17 6a90 	vmov	r6, s15
    b5f4:	ec53 2b17 	vmov	r2, r3, d7
    b5f8:	f04f 0a01 	mov.w	sl, #1
    b5fc:	f1a6 73f8 	sub.w	r3, r6, #32505856	; 0x1f00000
    b600:	ed9f 3b91 	vldr	d3, [pc, #580]	; b848 <_dtoa_r+0x320>
    b604:	ed9f 7b92 	vldr	d7, [pc, #584]	; b850 <_dtoa_r+0x328>
    b608:	ed9f 5b93 	vldr	d5, [pc, #588]	; b858 <_dtoa_r+0x330>
    b60c:	ee06 0a90 	vmov	s13, r0
    b610:	ec43 2b12 	vmov	d2, r2, r3
    b614:	eeb8 4be6 	vcvt.f64.s32	d4, s13
    b618:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
    b61c:	ee32 6b46 	vsub.f64	d6, d2, d6
    b620:	eea6 7b03 	vfma.f64	d7, d6, d3
    b624:	eea4 7b05 	vfma.f64	d7, d4, d5
    b628:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    b62c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    b630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b634:	ee16 7a90 	vmov	r7, s13
    b638:	d508      	bpl.n	b64c <_dtoa_r+0x124>
    b63a:	eeb8 6be6 	vcvt.f64.s32	d6, s13
    b63e:	eeb4 6b47 	vcmp.f64	d6, d7
    b642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b646:	bf18      	it	ne
    b648:	f107 37ff 	addne.w	r7, r7, #4294967295
    b64c:	2f16      	cmp	r7, #22
    b64e:	f200 8145 	bhi.w	b8dc <_dtoa_r+0x3b4>
    b652:	4b85      	ldr	r3, [pc, #532]	; (b868 <_dtoa_r+0x340>)
    b654:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    b658:	ed93 7b00 	vldr	d7, [r3]
    b65c:	eeb4 8bc7 	vcmpe.f64	d8, d7
    b660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b664:	d557      	bpl.n	b716 <_dtoa_r+0x1ee>
    b666:	1a09      	subs	r1, r1, r0
    b668:	2300      	movs	r3, #0
    b66a:	f1b1 0801 	subs.w	r8, r1, #1
    b66e:	f107 37ff 	add.w	r7, r7, #4294967295
    b672:	930a      	str	r3, [sp, #40]	; 0x28
    b674:	f100 8139 	bmi.w	b8ea <_dtoa_r+0x3c2>
    b678:	2300      	movs	r3, #0
    b67a:	9306      	str	r3, [sp, #24]
    b67c:	2f00      	cmp	r7, #0
    b67e:	da52      	bge.n	b726 <_dtoa_r+0x1fe>
    b680:	9b06      	ldr	r3, [sp, #24]
    b682:	9704      	str	r7, [sp, #16]
    b684:	1bdb      	subs	r3, r3, r7
    b686:	9306      	str	r3, [sp, #24]
    b688:	427b      	negs	r3, r7
    b68a:	9308      	str	r3, [sp, #32]
    b68c:	9b01      	ldr	r3, [sp, #4]
    b68e:	2b09      	cmp	r3, #9
    b690:	f04f 0700 	mov.w	r7, #0
    b694:	d84e      	bhi.n	b734 <_dtoa_r+0x20c>
    b696:	2b05      	cmp	r3, #5
    b698:	f340 829d 	ble.w	bbd6 <_dtoa_r+0x6ae>
    b69c:	3b04      	subs	r3, #4
    b69e:	9301      	str	r3, [sp, #4]
    b6a0:	2600      	movs	r6, #0
    b6a2:	9b01      	ldr	r3, [sp, #4]
    b6a4:	1e9a      	subs	r2, r3, #2
    b6a6:	2a03      	cmp	r2, #3
    b6a8:	f200 8125 	bhi.w	b8f6 <_dtoa_r+0x3ce>
    b6ac:	e8df f012 	tbh	[pc, r2, lsl #1]
    b6b0:	03a703aa 	.word	0x03a703aa
    b6b4:	037e039d 	.word	0x037e039d
    b6b8:	9a05      	ldr	r2, [sp, #20]
    b6ba:	f3c8 0813 	ubfx	r8, r8, #0, #20
    b6be:	f242 730f 	movw	r3, #9999	; 0x270f
    b6c2:	ea58 0806 	orrs.w	r8, r8, r6
    b6c6:	6013      	str	r3, [r2, #0]
    b6c8:	d11e      	bne.n	b708 <_dtoa_r+0x1e0>
    b6ca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    b6cc:	2b00      	cmp	r3, #0
    b6ce:	f000 8591 	beq.w	c1f4 <_dtoa_r+0xccc>
    b6d2:	4b66      	ldr	r3, [pc, #408]	; (b86c <_dtoa_r+0x344>)
    b6d4:	9300      	str	r3, [sp, #0]
    b6d6:	3308      	adds	r3, #8
    b6d8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    b6da:	9800      	ldr	r0, [sp, #0]
    b6dc:	6013      	str	r3, [r2, #0]
    b6de:	b00f      	add	sp, #60	; 0x3c
    b6e0:	ecbd 8b02 	vpop	{d8}
    b6e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b6e8:	ee18 6a90 	vmov	r6, s17
    b6ec:	f3c6 0613 	ubfx	r6, r6, #0, #20
    b6f0:	f2a3 30ff 	subw	r0, r3, #1023	; 0x3ff
    b6f4:	ec53 2b18 	vmov	r2, r3, d8
    b6f8:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
    b6fc:	990c      	ldr	r1, [sp, #48]	; 0x30
    b6fe:	f04f 0a00 	mov.w	sl, #0
    b702:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    b706:	e77b      	b.n	b600 <_dtoa_r+0xd8>
    b708:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    b70a:	2b00      	cmp	r3, #0
    b70c:	f040 833b 	bne.w	bd86 <_dtoa_r+0x85e>
    b710:	4b57      	ldr	r3, [pc, #348]	; (b870 <_dtoa_r+0x348>)
    b712:	9300      	str	r3, [sp, #0]
    b714:	e744      	b.n	b5a0 <_dtoa_r+0x78>
    b716:	1a09      	subs	r1, r1, r0
    b718:	2300      	movs	r3, #0
    b71a:	f1b1 0801 	subs.w	r8, r1, #1
    b71e:	930a      	str	r3, [sp, #40]	; 0x28
    b720:	f100 80e3 	bmi.w	b8ea <_dtoa_r+0x3c2>
    b724:	9306      	str	r3, [sp, #24]
    b726:	2300      	movs	r3, #0
    b728:	9308      	str	r3, [sp, #32]
    b72a:	9b01      	ldr	r3, [sp, #4]
    b72c:	9704      	str	r7, [sp, #16]
    b72e:	2b09      	cmp	r3, #9
    b730:	44b8      	add	r8, r7
    b732:	d9b0      	bls.n	b696 <_dtoa_r+0x16e>
    b734:	2300      	movs	r3, #0
    b736:	2601      	movs	r6, #1
    b738:	9301      	str	r3, [sp, #4]
    b73a:	9607      	str	r6, [sp, #28]
    b73c:	f04f 39ff 	mov.w	r9, #4294967295
    b740:	469b      	mov	fp, r3
    b742:	2100      	movs	r1, #0
    b744:	63e1      	str	r1, [r4, #60]	; 0x3c
    b746:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    b74a:	4620      	mov	r0, r4
    b74c:	f7fb fc96 	bl	707c <_Balloc>
    b750:	9000      	str	r0, [sp, #0]
    b752:	2800      	cmp	r0, #0
    b754:	f000 8540 	beq.w	c1d8 <_dtoa_r+0xcb0>
    b758:	9b00      	ldr	r3, [sp, #0]
    b75a:	63a3      	str	r3, [r4, #56]	; 0x38
    b75c:	f1b9 0f0e 	cmp.w	r9, #14
    b760:	f200 80dc 	bhi.w	b91c <_dtoa_r+0x3f4>
    b764:	2e00      	cmp	r6, #0
    b766:	f000 80d9 	beq.w	b91c <_dtoa_r+0x3f4>
    b76a:	9b04      	ldr	r3, [sp, #16]
    b76c:	2b00      	cmp	r3, #0
    b76e:	f340 83de 	ble.w	bf2e <_dtoa_r+0xa06>
    b772:	4a3d      	ldr	r2, [pc, #244]	; (b868 <_dtoa_r+0x340>)
    b774:	f003 010f 	and.w	r1, r3, #15
    b778:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    b77c:	ed92 7b00 	vldr	d7, [r2]
    b780:	111a      	asrs	r2, r3, #4
    b782:	05db      	lsls	r3, r3, #23
    b784:	f140 8382 	bpl.w	be8c <_dtoa_r+0x964>
    b788:	493a      	ldr	r1, [pc, #232]	; (b874 <_dtoa_r+0x34c>)
    b78a:	ed91 6b08 	vldr	d6, [r1, #32]
    b78e:	f002 020f 	and.w	r2, r2, #15
    b792:	2003      	movs	r0, #3
    b794:	ee88 5b06 	vdiv.f64	d5, d8, d6
    b798:	b15a      	cbz	r2, b7b2 <_dtoa_r+0x28a>
    b79a:	4936      	ldr	r1, [pc, #216]	; (b874 <_dtoa_r+0x34c>)
    b79c:	07d6      	lsls	r6, r2, #31
    b79e:	d504      	bpl.n	b7aa <_dtoa_r+0x282>
    b7a0:	ed91 6b00 	vldr	d6, [r1]
    b7a4:	3001      	adds	r0, #1
    b7a6:	ee27 7b06 	vmul.f64	d7, d7, d6
    b7aa:	1052      	asrs	r2, r2, #1
    b7ac:	f101 0108 	add.w	r1, r1, #8
    b7b0:	d1f4      	bne.n	b79c <_dtoa_r+0x274>
    b7b2:	ee85 6b07 	vdiv.f64	d6, d5, d7
    b7b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b7b8:	b13b      	cbz	r3, b7ca <_dtoa_r+0x2a2>
    b7ba:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    b7be:	eeb4 6bc7 	vcmpe.f64	d6, d7
    b7c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b7c6:	f100 84ae 	bmi.w	c126 <_dtoa_r+0xbfe>
    b7ca:	ee07 0a90 	vmov	s15, r0
    b7ce:	eeb8 5be7 	vcvt.f64.s32	d5, s15
    b7d2:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    b7d6:	eea5 7b06 	vfma.f64	d7, d5, d6
    b7da:	ee17 2a90 	vmov	r2, s15
    b7de:	ec51 0b17 	vmov	r0, r1, d7
    b7e2:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
    b7e6:	f1b9 0f00 	cmp.w	r9, #0
    b7ea:	f000 8388 	beq.w	befe <_dtoa_r+0x9d6>
    b7ee:	9e04      	ldr	r6, [sp, #16]
    b7f0:	464a      	mov	r2, r9
    b7f2:	9b07      	ldr	r3, [sp, #28]
    b7f4:	2b00      	cmp	r3, #0
    b7f6:	f000 8447 	beq.w	c088 <_dtoa_r+0xb60>
    b7fa:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
    b7fe:	4b1a      	ldr	r3, [pc, #104]	; (b868 <_dtoa_r+0x340>)
    b800:	eefd 4bc6 	vcvt.s32.f64	s9, d6
    b804:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
    b808:	eeb8 7be4 	vcvt.f64.s32	d7, s9
    b80c:	ee36 7b47 	vsub.f64	d7, d6, d7
    b810:	ed1c 6b02 	vldr	d6, [ip, #-8]
    b814:	ee83 5b06 	vdiv.f64	d5, d3, d6
    b818:	ec41 0b16 	vmov	d6, r0, r1
    b81c:	ee14 0a90 	vmov	r0, s9
    b820:	ee35 5b46 	vsub.f64	d5, d5, d6
    b824:	9900      	ldr	r1, [sp, #0]
    b826:	eeb4 5bc7 	vcmpe.f64	d5, d7
    b82a:	3030      	adds	r0, #48	; 0x30
    b82c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b830:	f801 0b01 	strb.w	r0, [r1], #1
    b834:	f300 84ac 	bgt.w	c190 <_dtoa_r+0xc68>
    b838:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
    b83c:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    b840:	f04f 0c00 	mov.w	ip, #0
    b844:	e031      	b.n	b8aa <_dtoa_r+0x382>
    b846:	bf00      	nop
    b848:	636f4361 	.word	0x636f4361
    b84c:	3fd287a7 	.word	0x3fd287a7
    b850:	8b60c8b3 	.word	0x8b60c8b3
    b854:	3fc68a28 	.word	0x3fc68a28
    b858:	509f79fb 	.word	0x509f79fb
    b85c:	3fd34413 	.word	0x3fd34413
    b860:	7ff00000 	.word	0x7ff00000
    b864:	20000915 	.word	0x20000915
    b868:	200002a8 	.word	0x200002a8
    b86c:	20000840 	.word	0x20000840
    b870:	2000084c 	.word	0x2000084c
    b874:	20000280 	.word	0x20000280
    b878:	f10c 0c01 	add.w	ip, ip, #1
    b87c:	4594      	cmp	ip, r2
    b87e:	da4d      	bge.n	b91c <_dtoa_r+0x3f4>
    b880:	ee27 7b04 	vmul.f64	d7, d7, d4
    b884:	ee25 5b04 	vmul.f64	d5, d5, d4
    b888:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    b88c:	ee16 3a90 	vmov	r3, s13
    b890:	eeb8 3be6 	vcvt.f64.s32	d3, s13
    b894:	3330      	adds	r3, #48	; 0x30
    b896:	ee37 7b43 	vsub.f64	d7, d7, d3
    b89a:	eeb4 7bc5 	vcmpe.f64	d7, d5
    b89e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b8a2:	f801 3b01 	strb.w	r3, [r1], #1
    b8a6:	f100 8473 	bmi.w	c190 <_dtoa_r+0xc68>
    b8aa:	ee32 6b47 	vsub.f64	d6, d2, d7
    b8ae:	eeb4 6bc5 	vcmpe.f64	d6, d5
    b8b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b8b6:	d5df      	bpl.n	b878 <_dtoa_r+0x350>
    b8b8:	9a00      	ldr	r2, [sp, #0]
    b8ba:	9604      	str	r6, [sp, #16]
    b8bc:	e002      	b.n	b8c4 <_dtoa_r+0x39c>
    b8be:	428a      	cmp	r2, r1
    b8c0:	f000 8450 	beq.w	c164 <_dtoa_r+0xc3c>
    b8c4:	4689      	mov	r9, r1
    b8c6:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
    b8ca:	2b39      	cmp	r3, #57	; 0x39
    b8cc:	d0f7      	beq.n	b8be <_dtoa_r+0x396>
    b8ce:	3301      	adds	r3, #1
    b8d0:	b2db      	uxtb	r3, r3
    b8d2:	700b      	strb	r3, [r1, #0]
    b8d4:	9b04      	ldr	r3, [sp, #16]
    b8d6:	3301      	adds	r3, #1
    b8d8:	9304      	str	r3, [sp, #16]
    b8da:	e155      	b.n	bb88 <_dtoa_r+0x660>
    b8dc:	1a09      	subs	r1, r1, r0
    b8de:	2301      	movs	r3, #1
    b8e0:	f1b1 0801 	subs.w	r8, r1, #1
    b8e4:	930a      	str	r3, [sp, #40]	; 0x28
    b8e6:	f57f aec7 	bpl.w	b678 <_dtoa_r+0x150>
    b8ea:	f1c1 0301 	rsb	r3, r1, #1
    b8ee:	9306      	str	r3, [sp, #24]
    b8f0:	f04f 0800 	mov.w	r8, #0
    b8f4:	e6c2      	b.n	b67c <_dtoa_r+0x154>
    b8f6:	2600      	movs	r6, #0
    b8f8:	63e6      	str	r6, [r4, #60]	; 0x3c
    b8fa:	4631      	mov	r1, r6
    b8fc:	4620      	mov	r0, r4
    b8fe:	f7fb fbbd 	bl	707c <_Balloc>
    b902:	9000      	str	r0, [sp, #0]
    b904:	2800      	cmp	r0, #0
    b906:	f000 8467 	beq.w	c1d8 <_dtoa_r+0xcb0>
    b90a:	9b00      	ldr	r3, [sp, #0]
    b90c:	63a3      	str	r3, [r4, #56]	; 0x38
    b90e:	f04f 33ff 	mov.w	r3, #4294967295
    b912:	930b      	str	r3, [sp, #44]	; 0x2c
    b914:	4699      	mov	r9, r3
    b916:	2301      	movs	r3, #1
    b918:	46b3      	mov	fp, r6
    b91a:	9307      	str	r3, [sp, #28]
    b91c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    b91e:	2a00      	cmp	r2, #0
    b920:	db55      	blt.n	b9ce <_dtoa_r+0x4a6>
    b922:	9904      	ldr	r1, [sp, #16]
    b924:	290e      	cmp	r1, #14
    b926:	dc52      	bgt.n	b9ce <_dtoa_r+0x4a6>
    b928:	4bb7      	ldr	r3, [pc, #732]	; (bc08 <_dtoa_r+0x6e0>)
    b92a:	f1bb 0f00 	cmp.w	fp, #0
    b92e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    b932:	ed93 6b00 	vldr	d6, [r3]
    b936:	da15      	bge.n	b964 <_dtoa_r+0x43c>
    b938:	f1b9 0f00 	cmp.w	r9, #0
    b93c:	dc12      	bgt.n	b964 <_dtoa_r+0x43c>
    b93e:	f040 82f2 	bne.w	bf26 <_dtoa_r+0x9fe>
    b942:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
    b946:	ee26 7b07 	vmul.f64	d7, d6, d7
    b94a:	eeb4 8bc7 	vcmpe.f64	d8, d7
    b94e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b952:	46ca      	mov	sl, r9
    b954:	464e      	mov	r6, r9
    b956:	f200 826d 	bhi.w	be34 <_dtoa_r+0x90c>
    b95a:	f8dd 8000 	ldr.w	r8, [sp]
    b95e:	ea6f 0b0b 	mvn.w	fp, fp
    b962:	e270      	b.n	be46 <_dtoa_r+0x91e>
    b964:	ee88 7b06 	vdiv.f64	d7, d8, d6
    b968:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    b96c:	9900      	ldr	r1, [sp, #0]
    b96e:	ee17 3a10 	vmov	r3, s14
    b972:	f1b9 0f01 	cmp.w	r9, #1
    b976:	f103 0330 	add.w	r3, r3, #48	; 0x30
    b97a:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
    b97e:	f801 3b01 	strb.w	r3, [r1], #1
    b982:	eea5 8b46 	vfms.f64	d8, d5, d6
    b986:	f000 8334 	beq.w	bff2 <_dtoa_r+0xaca>
    b98a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    b98e:	2301      	movs	r3, #1
    b990:	e011      	b.n	b9b6 <_dtoa_r+0x48e>
    b992:	ee88 7b06 	vdiv.f64	d7, d8, d6
    b996:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    b99a:	3301      	adds	r3, #1
    b99c:	ee17 2a10 	vmov	r2, s14
    b9a0:	454b      	cmp	r3, r9
    b9a2:	f102 0230 	add.w	r2, r2, #48	; 0x30
    b9a6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
    b9aa:	f801 2b01 	strb.w	r2, [r1], #1
    b9ae:	eea5 8b46 	vfms.f64	d8, d5, d6
    b9b2:	f000 831e 	beq.w	bff2 <_dtoa_r+0xaca>
    b9b6:	ee28 8b04 	vmul.f64	d8, d8, d4
    b9ba:	eeb5 8b40 	vcmp.f64	d8, #0.0
    b9be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b9c2:	d1e6      	bne.n	b992 <_dtoa_r+0x46a>
    b9c4:	9b04      	ldr	r3, [sp, #16]
    b9c6:	3301      	adds	r3, #1
    b9c8:	9304      	str	r3, [sp, #16]
    b9ca:	4689      	mov	r9, r1
    b9cc:	e0dc      	b.n	bb88 <_dtoa_r+0x660>
    b9ce:	9b07      	ldr	r3, [sp, #28]
    b9d0:	b343      	cbz	r3, ba24 <_dtoa_r+0x4fc>
    b9d2:	9b01      	ldr	r3, [sp, #4]
    b9d4:	2b01      	cmp	r3, #1
    b9d6:	f340 8276 	ble.w	bec6 <_dtoa_r+0x99e>
    b9da:	9b08      	ldr	r3, [sp, #32]
    b9dc:	f109 3aff 	add.w	sl, r9, #4294967295
    b9e0:	4553      	cmp	r3, sl
    b9e2:	f280 823f 	bge.w	be64 <_dtoa_r+0x93c>
    b9e6:	9b08      	ldr	r3, [sp, #32]
    b9e8:	f8cd a020 	str.w	sl, [sp, #32]
    b9ec:	ebaa 0203 	sub.w	r2, sl, r3
    b9f0:	4417      	add	r7, r2
    b9f2:	f04f 0a00 	mov.w	sl, #0
    b9f6:	f1b9 0f00 	cmp.w	r9, #0
    b9fa:	f2c0 8325 	blt.w	c048 <_dtoa_r+0xb20>
    b9fe:	9b06      	ldr	r3, [sp, #24]
    ba00:	9309      	str	r3, [sp, #36]	; 0x24
    ba02:	444b      	add	r3, r9
    ba04:	44c8      	add	r8, r9
    ba06:	9306      	str	r3, [sp, #24]
    ba08:	2101      	movs	r1, #1
    ba0a:	4620      	mov	r0, r4
    ba0c:	f7fb fc60 	bl	72d0 <__i2b>
    ba10:	4606      	mov	r6, r0
    ba12:	e00c      	b.n	ba2e <_dtoa_r+0x506>
    ba14:	4b7d      	ldr	r3, [pc, #500]	; (bc0c <_dtoa_r+0x6e4>)
    ba16:	9300      	str	r3, [sp, #0]
    ba18:	9800      	ldr	r0, [sp, #0]
    ba1a:	b00f      	add	sp, #60	; 0x3c
    ba1c:	ecbd 8b02 	vpop	{d8}
    ba20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ba24:	9b06      	ldr	r3, [sp, #24]
    ba26:	f8dd a020 	ldr.w	sl, [sp, #32]
    ba2a:	9e07      	ldr	r6, [sp, #28]
    ba2c:	9309      	str	r3, [sp, #36]	; 0x24
    ba2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ba30:	b16b      	cbz	r3, ba4e <_dtoa_r+0x526>
    ba32:	f1b8 0f00 	cmp.w	r8, #0
    ba36:	dd0a      	ble.n	ba4e <_dtoa_r+0x526>
    ba38:	4543      	cmp	r3, r8
    ba3a:	9906      	ldr	r1, [sp, #24]
    ba3c:	461a      	mov	r2, r3
    ba3e:	bfa8      	it	ge
    ba40:	4642      	movge	r2, r8
    ba42:	1a89      	subs	r1, r1, r2
    ba44:	1a9b      	subs	r3, r3, r2
    ba46:	9106      	str	r1, [sp, #24]
    ba48:	9309      	str	r3, [sp, #36]	; 0x24
    ba4a:	eba8 0802 	sub.w	r8, r8, r2
    ba4e:	9b08      	ldr	r3, [sp, #32]
    ba50:	b163      	cbz	r3, ba6c <_dtoa_r+0x544>
    ba52:	9b07      	ldr	r3, [sp, #28]
    ba54:	2b00      	cmp	r3, #0
    ba56:	f000 82a7 	beq.w	bfa8 <_dtoa_r+0xa80>
    ba5a:	f1ba 0f00 	cmp.w	sl, #0
    ba5e:	f300 8204 	bgt.w	be6a <_dtoa_r+0x942>
    ba62:	9b08      	ldr	r3, [sp, #32]
    ba64:	ebb3 020a 	subs.w	r2, r3, sl
    ba68:	f040 82ff 	bne.w	c06a <_dtoa_r+0xb42>
    ba6c:	2101      	movs	r1, #1
    ba6e:	4620      	mov	r0, r4
    ba70:	f7fb fc2e 	bl	72d0 <__i2b>
    ba74:	2f00      	cmp	r7, #0
    ba76:	4682      	mov	sl, r0
    ba78:	f300 80af 	bgt.w	bbda <_dtoa_r+0x6b2>
    ba7c:	9b01      	ldr	r3, [sp, #4]
    ba7e:	2b01      	cmp	r3, #1
    ba80:	f340 8187 	ble.w	bd92 <_dtoa_r+0x86a>
    ba84:	2300      	movs	r3, #0
    ba86:	9308      	str	r3, [sp, #32]
    ba88:	2001      	movs	r0, #1
    ba8a:	2f00      	cmp	r7, #0
    ba8c:	f040 80b1 	bne.w	bbf2 <_dtoa_r+0x6ca>
    ba90:	4440      	add	r0, r8
    ba92:	f010 001f 	ands.w	r0, r0, #31
    ba96:	f000 817a 	beq.w	bd8e <_dtoa_r+0x866>
    ba9a:	f1c0 0220 	rsb	r2, r0, #32
    ba9e:	2a04      	cmp	r2, #4
    baa0:	f300 8088 	bgt.w	bbb4 <_dtoa_r+0x68c>
    baa4:	f040 81f6 	bne.w	be94 <_dtoa_r+0x96c>
    baa8:	9b06      	ldr	r3, [sp, #24]
    baaa:	2b00      	cmp	r3, #0
    baac:	dd05      	ble.n	baba <_dtoa_r+0x592>
    baae:	4629      	mov	r1, r5
    bab0:	461a      	mov	r2, r3
    bab2:	4620      	mov	r0, r4
    bab4:	f7fb fd48 	bl	7548 <__lshift>
    bab8:	4605      	mov	r5, r0
    baba:	f1b8 0f00 	cmp.w	r8, #0
    babe:	dd05      	ble.n	bacc <_dtoa_r+0x5a4>
    bac0:	4651      	mov	r1, sl
    bac2:	4642      	mov	r2, r8
    bac4:	4620      	mov	r0, r4
    bac6:	f7fb fd3f 	bl	7548 <__lshift>
    baca:	4682      	mov	sl, r0
    bacc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    bace:	2b00      	cmp	r3, #0
    bad0:	f040 813f 	bne.w	bd52 <_dtoa_r+0x82a>
    bad4:	f1b9 0f00 	cmp.w	r9, #0
    bad8:	f340 8125 	ble.w	bd26 <_dtoa_r+0x7fe>
    badc:	9b07      	ldr	r3, [sp, #28]
    bade:	2b00      	cmp	r3, #0
    bae0:	f040 80a3 	bne.w	bc2a <_dtoa_r+0x702>
    bae4:	9b04      	ldr	r3, [sp, #16]
    bae6:	3301      	adds	r3, #1
    bae8:	9304      	str	r3, [sp, #16]
    baea:	f8dd 8000 	ldr.w	r8, [sp]
    baee:	2701      	movs	r7, #1
    baf0:	e007      	b.n	bb02 <_dtoa_r+0x5da>
    baf2:	4629      	mov	r1, r5
    baf4:	2300      	movs	r3, #0
    baf6:	220a      	movs	r2, #10
    baf8:	4620      	mov	r0, r4
    bafa:	f7fb faef 	bl	70dc <__multadd>
    bafe:	3701      	adds	r7, #1
    bb00:	4605      	mov	r5, r0
    bb02:	4651      	mov	r1, sl
    bb04:	4628      	mov	r0, r5
    bb06:	f7ff fc7b 	bl	b400 <quorem>
    bb0a:	45b9      	cmp	r9, r7
    bb0c:	f100 0030 	add.w	r0, r0, #48	; 0x30
    bb10:	f808 0b01 	strb.w	r0, [r8], #1
    bb14:	dced      	bgt.n	baf2 <_dtoa_r+0x5ca>
    bb16:	f1b9 0f00 	cmp.w	r9, #0
    bb1a:	9a00      	ldr	r2, [sp, #0]
    bb1c:	bfcc      	ite	gt
    bb1e:	46cb      	movgt	fp, r9
    bb20:	f04f 0b01 	movle.w	fp, #1
    bb24:	4603      	mov	r3, r0
    bb26:	4493      	add	fp, r2
    bb28:	2700      	movs	r7, #0
    bb2a:	4629      	mov	r1, r5
    bb2c:	2201      	movs	r2, #1
    bb2e:	4620      	mov	r0, r4
    bb30:	9301      	str	r3, [sp, #4]
    bb32:	f7fb fd09 	bl	7548 <__lshift>
    bb36:	4651      	mov	r1, sl
    bb38:	4605      	mov	r5, r0
    bb3a:	f7fb fd7d 	bl	7638 <__mcmp>
    bb3e:	2800      	cmp	r0, #0
    bb40:	f340 81af 	ble.w	bea2 <_dtoa_r+0x97a>
    bb44:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
    bb48:	9a00      	ldr	r2, [sp, #0]
    bb4a:	f10b 3bff 	add.w	fp, fp, #4294967295
    bb4e:	e004      	b.n	bb5a <_dtoa_r+0x632>
    bb50:	455a      	cmp	r2, fp
    bb52:	f000 81b1 	beq.w	beb8 <_dtoa_r+0x990>
    bb56:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
    bb5a:	2b39      	cmp	r3, #57	; 0x39
    bb5c:	f10b 0901 	add.w	r9, fp, #1
    bb60:	d0f6      	beq.n	bb50 <_dtoa_r+0x628>
    bb62:	3301      	adds	r3, #1
    bb64:	f88b 3000 	strb.w	r3, [fp]
    bb68:	4651      	mov	r1, sl
    bb6a:	4620      	mov	r0, r4
    bb6c:	f7fb faac 	bl	70c8 <_Bfree>
    bb70:	b156      	cbz	r6, bb88 <_dtoa_r+0x660>
    bb72:	b12f      	cbz	r7, bb80 <_dtoa_r+0x658>
    bb74:	42b7      	cmp	r7, r6
    bb76:	d003      	beq.n	bb80 <_dtoa_r+0x658>
    bb78:	4639      	mov	r1, r7
    bb7a:	4620      	mov	r0, r4
    bb7c:	f7fb faa4 	bl	70c8 <_Bfree>
    bb80:	4631      	mov	r1, r6
    bb82:	4620      	mov	r0, r4
    bb84:	f7fb faa0 	bl	70c8 <_Bfree>
    bb88:	4629      	mov	r1, r5
    bb8a:	4620      	mov	r0, r4
    bb8c:	f7fb fa9c 	bl	70c8 <_Bfree>
    bb90:	2300      	movs	r3, #0
    bb92:	f889 3000 	strb.w	r3, [r9]
    bb96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    bb9a:	601a      	str	r2, [r3, #0]
    bb9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    bb9e:	2b00      	cmp	r3, #0
    bba0:	f43f acfe 	beq.w	b5a0 <_dtoa_r+0x78>
    bba4:	9800      	ldr	r0, [sp, #0]
    bba6:	f8c3 9000 	str.w	r9, [r3]
    bbaa:	b00f      	add	sp, #60	; 0x3c
    bbac:	ecbd 8b02 	vpop	{d8}
    bbb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bbb4:	f1c0 001c 	rsb	r0, r0, #28
    bbb8:	9b06      	ldr	r3, [sp, #24]
    bbba:	4403      	add	r3, r0
    bbbc:	9306      	str	r3, [sp, #24]
    bbbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bbc0:	4403      	add	r3, r0
    bbc2:	9309      	str	r3, [sp, #36]	; 0x24
    bbc4:	4480      	add	r8, r0
    bbc6:	e76f      	b.n	baa8 <_dtoa_r+0x580>
    bbc8:	f1c2 0220 	rsb	r2, r2, #32
    bbcc:	fa06 f202 	lsl.w	r2, r6, r2
    bbd0:	ee07 2a10 	vmov	s14, r2
    bbd4:	e509      	b.n	b5ea <_dtoa_r+0xc2>
    bbd6:	2601      	movs	r6, #1
    bbd8:	e563      	b.n	b6a2 <_dtoa_r+0x17a>
    bbda:	4601      	mov	r1, r0
    bbdc:	463a      	mov	r2, r7
    bbde:	4620      	mov	r0, r4
    bbe0:	f7fb fc52 	bl	7488 <__pow5mult>
    bbe4:	9b01      	ldr	r3, [sp, #4]
    bbe6:	2b01      	cmp	r3, #1
    bbe8:	4682      	mov	sl, r0
    bbea:	f340 81c5 	ble.w	bf78 <_dtoa_r+0xa50>
    bbee:	2300      	movs	r3, #0
    bbf0:	9308      	str	r3, [sp, #32]
    bbf2:	f8da 2010 	ldr.w	r2, [sl, #16]
    bbf6:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
    bbfa:	6910      	ldr	r0, [r2, #16]
    bbfc:	f7fb fb18 	bl	7230 <__hi0bits>
    bc00:	f1c0 0020 	rsb	r0, r0, #32
    bc04:	e744      	b.n	ba90 <_dtoa_r+0x568>
    bc06:	bf00      	nop
    bc08:	200002a8 	.word	0x200002a8
    bc0c:	20000914 	.word	0x20000914
    bc10:	4631      	mov	r1, r6
    bc12:	2300      	movs	r3, #0
    bc14:	220a      	movs	r2, #10
    bc16:	4620      	mov	r0, r4
    bc18:	f7fb fa60 	bl	70dc <__multadd>
    bc1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    bc1e:	2b00      	cmp	r3, #0
    bc20:	4606      	mov	r6, r0
    bc22:	f340 82ce 	ble.w	c1c2 <_dtoa_r+0xc9a>
    bc26:	9704      	str	r7, [sp, #16]
    bc28:	4699      	mov	r9, r3
    bc2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bc2c:	2b00      	cmp	r3, #0
    bc2e:	dd05      	ble.n	bc3c <_dtoa_r+0x714>
    bc30:	4631      	mov	r1, r6
    bc32:	461a      	mov	r2, r3
    bc34:	4620      	mov	r0, r4
    bc36:	f7fb fc87 	bl	7548 <__lshift>
    bc3a:	4606      	mov	r6, r0
    bc3c:	9b08      	ldr	r3, [sp, #32]
    bc3e:	2b00      	cmp	r3, #0
    bc40:	f040 81eb 	bne.w	c01a <_dtoa_r+0xaf2>
    bc44:	46b0      	mov	r8, r6
    bc46:	9b02      	ldr	r3, [sp, #8]
    bc48:	9f00      	ldr	r7, [sp, #0]
    bc4a:	f003 0201 	and.w	r2, r3, #1
    bc4e:	1e7b      	subs	r3, r7, #1
    bc50:	444b      	add	r3, r9
    bc52:	9308      	str	r3, [sp, #32]
    bc54:	9b01      	ldr	r3, [sp, #4]
    bc56:	920a      	str	r2, [sp, #40]	; 0x28
    bc58:	4313      	orrs	r3, r2
    bc5a:	9309      	str	r3, [sp, #36]	; 0x24
    bc5c:	4651      	mov	r1, sl
    bc5e:	4628      	mov	r0, r5
    bc60:	f7ff fbce 	bl	b400 <quorem>
    bc64:	4631      	mov	r1, r6
    bc66:	4683      	mov	fp, r0
    bc68:	4628      	mov	r0, r5
    bc6a:	f7fb fce5 	bl	7638 <__mcmp>
    bc6e:	4642      	mov	r2, r8
    bc70:	4651      	mov	r1, sl
    bc72:	4681      	mov	r9, r0
    bc74:	4620      	mov	r0, r4
    bc76:	f7fb fd01 	bl	767c <__mdiff>
    bc7a:	68c2      	ldr	r2, [r0, #12]
    bc7c:	4601      	mov	r1, r0
    bc7e:	f10b 0330 	add.w	r3, fp, #48	; 0x30
    bc82:	2a00      	cmp	r2, #0
    bc84:	d142      	bne.n	bd0c <_dtoa_r+0x7e4>
    bc86:	e9cd 0306 	strd	r0, r3, [sp, #24]
    bc8a:	4628      	mov	r0, r5
    bc8c:	f7fb fcd4 	bl	7638 <__mcmp>
    bc90:	9906      	ldr	r1, [sp, #24]
    bc92:	9002      	str	r0, [sp, #8]
    bc94:	4620      	mov	r0, r4
    bc96:	f7fb fa17 	bl	70c8 <_Bfree>
    bc9a:	9a02      	ldr	r2, [sp, #8]
    bc9c:	9b07      	ldr	r3, [sp, #28]
    bc9e:	b91a      	cbnz	r2, bca8 <_dtoa_r+0x780>
    bca0:	9909      	ldr	r1, [sp, #36]	; 0x24
    bca2:	2900      	cmp	r1, #0
    bca4:	f000 827e 	beq.w	c1a4 <_dtoa_r+0xc7c>
    bca8:	f1b9 0f00 	cmp.w	r9, #0
    bcac:	f2c0 8183 	blt.w	bfb6 <_dtoa_r+0xa8e>
    bcb0:	9901      	ldr	r1, [sp, #4]
    bcb2:	ea49 0901 	orr.w	r9, r9, r1
    bcb6:	990a      	ldr	r1, [sp, #40]	; 0x28
    bcb8:	ea51 0909 	orrs.w	r9, r1, r9
    bcbc:	f000 817b 	beq.w	bfb6 <_dtoa_r+0xa8e>
    bcc0:	2a00      	cmp	r2, #0
    bcc2:	f300 81c6 	bgt.w	c052 <_dtoa_r+0xb2a>
    bcc6:	9a08      	ldr	r2, [sp, #32]
    bcc8:	703b      	strb	r3, [r7, #0]
    bcca:	f107 0901 	add.w	r9, r7, #1
    bcce:	4297      	cmp	r7, r2
    bcd0:	46cb      	mov	fp, r9
    bcd2:	f000 81c4 	beq.w	c05e <_dtoa_r+0xb36>
    bcd6:	4629      	mov	r1, r5
    bcd8:	2300      	movs	r3, #0
    bcda:	220a      	movs	r2, #10
    bcdc:	4620      	mov	r0, r4
    bcde:	f7fb f9fd 	bl	70dc <__multadd>
    bce2:	4546      	cmp	r6, r8
    bce4:	4605      	mov	r5, r0
    bce6:	4631      	mov	r1, r6
    bce8:	f04f 0300 	mov.w	r3, #0
    bcec:	f04f 020a 	mov.w	r2, #10
    bcf0:	4620      	mov	r0, r4
    bcf2:	d012      	beq.n	bd1a <_dtoa_r+0x7f2>
    bcf4:	f7fb f9f2 	bl	70dc <__multadd>
    bcf8:	4641      	mov	r1, r8
    bcfa:	4606      	mov	r6, r0
    bcfc:	2300      	movs	r3, #0
    bcfe:	220a      	movs	r2, #10
    bd00:	4620      	mov	r0, r4
    bd02:	f7fb f9eb 	bl	70dc <__multadd>
    bd06:	464f      	mov	r7, r9
    bd08:	4680      	mov	r8, r0
    bd0a:	e7a7      	b.n	bc5c <_dtoa_r+0x734>
    bd0c:	4620      	mov	r0, r4
    bd0e:	9302      	str	r3, [sp, #8]
    bd10:	f7fb f9da 	bl	70c8 <_Bfree>
    bd14:	9b02      	ldr	r3, [sp, #8]
    bd16:	2201      	movs	r2, #1
    bd18:	e7c6      	b.n	bca8 <_dtoa_r+0x780>
    bd1a:	f7fb f9df 	bl	70dc <__multadd>
    bd1e:	464f      	mov	r7, r9
    bd20:	4606      	mov	r6, r0
    bd22:	4680      	mov	r8, r0
    bd24:	e79a      	b.n	bc5c <_dtoa_r+0x734>
    bd26:	9b01      	ldr	r3, [sp, #4]
    bd28:	2b02      	cmp	r3, #2
    bd2a:	dc71      	bgt.n	be10 <_dtoa_r+0x8e8>
    bd2c:	9b07      	ldr	r3, [sp, #28]
    bd2e:	2b00      	cmp	r3, #0
    bd30:	f47f af7b 	bne.w	bc2a <_dtoa_r+0x702>
    bd34:	9b04      	ldr	r3, [sp, #16]
    bd36:	4651      	mov	r1, sl
    bd38:	3301      	adds	r3, #1
    bd3a:	4628      	mov	r0, r5
    bd3c:	9304      	str	r3, [sp, #16]
    bd3e:	f7ff fb5f 	bl	b400 <quorem>
    bd42:	f8dd b000 	ldr.w	fp, [sp]
    bd46:	f100 0330 	add.w	r3, r0, #48	; 0x30
    bd4a:	f80b 3b01 	strb.w	r3, [fp], #1
    bd4e:	2700      	movs	r7, #0
    bd50:	e6eb      	b.n	bb2a <_dtoa_r+0x602>
    bd52:	4651      	mov	r1, sl
    bd54:	4628      	mov	r0, r5
    bd56:	f7fb fc6f 	bl	7638 <__mcmp>
    bd5a:	2800      	cmp	r0, #0
    bd5c:	f6bf aeba 	bge.w	bad4 <_dtoa_r+0x5ac>
    bd60:	4629      	mov	r1, r5
    bd62:	2300      	movs	r3, #0
    bd64:	220a      	movs	r2, #10
    bd66:	4620      	mov	r0, r4
    bd68:	f7fb f9b8 	bl	70dc <__multadd>
    bd6c:	9b04      	ldr	r3, [sp, #16]
    bd6e:	1e5f      	subs	r7, r3, #1
    bd70:	9b07      	ldr	r3, [sp, #28]
    bd72:	4605      	mov	r5, r0
    bd74:	2b00      	cmp	r3, #0
    bd76:	f47f af4b 	bne.w	bc10 <_dtoa_r+0x6e8>
    bd7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    bd7c:	2b00      	cmp	r3, #0
    bd7e:	f340 8218 	ble.w	c1b2 <_dtoa_r+0xc8a>
    bd82:	4699      	mov	r9, r3
    bd84:	e6b1      	b.n	baea <_dtoa_r+0x5c2>
    bd86:	4bbc      	ldr	r3, [pc, #752]	; (c078 <_dtoa_r+0xb50>)
    bd88:	9300      	str	r3, [sp, #0]
    bd8a:	3303      	adds	r3, #3
    bd8c:	e4a4      	b.n	b6d8 <_dtoa_r+0x1b0>
    bd8e:	201c      	movs	r0, #28
    bd90:	e712      	b.n	bbb8 <_dtoa_r+0x690>
    bd92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    bd96:	2800      	cmp	r0, #0
    bd98:	f47f ae74 	bne.w	ba84 <_dtoa_r+0x55c>
    bd9c:	f3c1 0213 	ubfx	r2, r1, #0, #20
    bda0:	2a00      	cmp	r2, #0
    bda2:	f000 80f4 	beq.w	bf8e <_dtoa_r+0xa66>
    bda6:	9b02      	ldr	r3, [sp, #8]
    bda8:	9308      	str	r3, [sp, #32]
    bdaa:	e66d      	b.n	ba88 <_dtoa_r+0x560>
    bdac:	2301      	movs	r3, #1
    bdae:	9307      	str	r3, [sp, #28]
    bdb0:	9b04      	ldr	r3, [sp, #16]
    bdb2:	445b      	add	r3, fp
    bdb4:	f103 0901 	add.w	r9, r3, #1
    bdb8:	f1b9 0f01 	cmp.w	r9, #1
    bdbc:	46cc      	mov	ip, r9
    bdbe:	930b      	str	r3, [sp, #44]	; 0x2c
    bdc0:	bfb8      	it	lt
    bdc2:	f04f 0c01 	movlt.w	ip, #1
    bdc6:	2100      	movs	r1, #0
    bdc8:	f1bc 0f17 	cmp.w	ip, #23
    bdcc:	63e1      	str	r1, [r4, #60]	; 0x3c
    bdce:	f77f acbc 	ble.w	b74a <_dtoa_r+0x222>
    bdd2:	2001      	movs	r0, #1
    bdd4:	2204      	movs	r2, #4
    bdd6:	0052      	lsls	r2, r2, #1
    bdd8:	f102 0314 	add.w	r3, r2, #20
    bddc:	4563      	cmp	r3, ip
    bdde:	4601      	mov	r1, r0
    bde0:	f100 0001 	add.w	r0, r0, #1
    bde4:	d9f7      	bls.n	bdd6 <_dtoa_r+0x8ae>
    bde6:	63e1      	str	r1, [r4, #60]	; 0x3c
    bde8:	e4af      	b.n	b74a <_dtoa_r+0x222>
    bdea:	2301      	movs	r3, #1
    bdec:	9307      	str	r3, [sp, #28]
    bdee:	f1bb 0f00 	cmp.w	fp, #0
    bdf2:	dd52      	ble.n	be9a <_dtoa_r+0x972>
    bdf4:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
    bdf8:	46d9      	mov	r9, fp
    bdfa:	46dc      	mov	ip, fp
    bdfc:	e7e3      	b.n	bdc6 <_dtoa_r+0x89e>
    bdfe:	2300      	movs	r3, #0
    be00:	9307      	str	r3, [sp, #28]
    be02:	e7d5      	b.n	bdb0 <_dtoa_r+0x888>
    be04:	2300      	movs	r3, #0
    be06:	9307      	str	r3, [sp, #28]
    be08:	e7f1      	b.n	bdee <_dtoa_r+0x8c6>
    be0a:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    be0e:	9704      	str	r7, [sp, #16]
    be10:	f1b9 0f00 	cmp.w	r9, #0
    be14:	f47f ada1 	bne.w	b95a <_dtoa_r+0x432>
    be18:	4651      	mov	r1, sl
    be1a:	464b      	mov	r3, r9
    be1c:	2205      	movs	r2, #5
    be1e:	4620      	mov	r0, r4
    be20:	f7fb f95c 	bl	70dc <__multadd>
    be24:	4601      	mov	r1, r0
    be26:	4682      	mov	sl, r0
    be28:	4628      	mov	r0, r5
    be2a:	f7fb fc05 	bl	7638 <__mcmp>
    be2e:	2800      	cmp	r0, #0
    be30:	f77f ad93 	ble.w	b95a <_dtoa_r+0x432>
    be34:	9b04      	ldr	r3, [sp, #16]
    be36:	f103 0b01 	add.w	fp, r3, #1
    be3a:	9b00      	ldr	r3, [sp, #0]
    be3c:	2231      	movs	r2, #49	; 0x31
    be3e:	4698      	mov	r8, r3
    be40:	f803 2b01 	strb.w	r2, [r3], #1
    be44:	9300      	str	r3, [sp, #0]
    be46:	4651      	mov	r1, sl
    be48:	4620      	mov	r0, r4
    be4a:	f7fb f93d 	bl	70c8 <_Bfree>
    be4e:	f10b 0301 	add.w	r3, fp, #1
    be52:	f8dd 9000 	ldr.w	r9, [sp]
    be56:	9304      	str	r3, [sp, #16]
    be58:	f8cd 8000 	str.w	r8, [sp]
    be5c:	2e00      	cmp	r6, #0
    be5e:	f47f ae8f 	bne.w	bb80 <_dtoa_r+0x658>
    be62:	e691      	b.n	bb88 <_dtoa_r+0x660>
    be64:	eba3 0a0a 	sub.w	sl, r3, sl
    be68:	e5c5      	b.n	b9f6 <_dtoa_r+0x4ce>
    be6a:	4631      	mov	r1, r6
    be6c:	4652      	mov	r2, sl
    be6e:	4620      	mov	r0, r4
    be70:	f7fb fb0a 	bl	7488 <__pow5mult>
    be74:	462a      	mov	r2, r5
    be76:	4601      	mov	r1, r0
    be78:	4606      	mov	r6, r0
    be7a:	4620      	mov	r0, r4
    be7c:	f7fb fa56 	bl	732c <__multiply>
    be80:	4629      	mov	r1, r5
    be82:	4605      	mov	r5, r0
    be84:	4620      	mov	r0, r4
    be86:	f7fb f91f 	bl	70c8 <_Bfree>
    be8a:	e5ea      	b.n	ba62 <_dtoa_r+0x53a>
    be8c:	2002      	movs	r0, #2
    be8e:	eeb0 5b48 	vmov.f64	d5, d8
    be92:	e481      	b.n	b798 <_dtoa_r+0x270>
    be94:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
    be98:	e68e      	b.n	bbb8 <_dtoa_r+0x690>
    be9a:	f04f 0b01 	mov.w	fp, #1
    be9e:	46d9      	mov	r9, fp
    bea0:	e44f      	b.n	b742 <_dtoa_r+0x21a>
    bea2:	d103      	bne.n	beac <_dtoa_r+0x984>
    bea4:	9b01      	ldr	r3, [sp, #4]
    bea6:	07db      	lsls	r3, r3, #31
    bea8:	f53f ae4c 	bmi.w	bb44 <_dtoa_r+0x61c>
    beac:	46d9      	mov	r9, fp
    beae:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
    beb2:	2b30      	cmp	r3, #48	; 0x30
    beb4:	d0fa      	beq.n	beac <_dtoa_r+0x984>
    beb6:	e657      	b.n	bb68 <_dtoa_r+0x640>
    beb8:	9b04      	ldr	r3, [sp, #16]
    beba:	9a00      	ldr	r2, [sp, #0]
    bebc:	3301      	adds	r3, #1
    bebe:	9304      	str	r3, [sp, #16]
    bec0:	2331      	movs	r3, #49	; 0x31
    bec2:	7013      	strb	r3, [r2, #0]
    bec4:	e650      	b.n	bb68 <_dtoa_r+0x640>
    bec6:	f1ba 0f00 	cmp.w	sl, #0
    beca:	f000 8123 	beq.w	c114 <_dtoa_r+0xbec>
    bece:	f202 4233 	addw	r2, r2, #1075	; 0x433
    bed2:	9b06      	ldr	r3, [sp, #24]
    bed4:	9309      	str	r3, [sp, #36]	; 0x24
    bed6:	4413      	add	r3, r2
    bed8:	f8dd a020 	ldr.w	sl, [sp, #32]
    bedc:	9306      	str	r3, [sp, #24]
    bede:	4490      	add	r8, r2
    bee0:	e592      	b.n	ba08 <_dtoa_r+0x4e0>
    bee2:	ee07 0a90 	vmov	s15, r0
    bee6:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
    beea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    beee:	eea6 5b07 	vfma.f64	d5, d6, d7
    bef2:	ee15 2a90 	vmov	r2, s11
    bef6:	ec51 0b15 	vmov	r0, r1, d5
    befa:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
    befe:	ec41 0b15 	vmov	d5, r0, r1
    bf02:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
    bf06:	ee36 7b47 	vsub.f64	d7, d6, d7
    bf0a:	eeb4 7bc5 	vcmpe.f64	d7, d5
    bf0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    bf12:	f300 8137 	bgt.w	c184 <_dtoa_r+0xc5c>
    bf16:	eeb1 5b45 	vneg.f64	d5, d5
    bf1a:	eeb4 7bc5 	vcmpe.f64	d7, d5
    bf1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    bf22:	f57f acfb 	bpl.w	b91c <_dtoa_r+0x3f4>
    bf26:	f04f 0a00 	mov.w	sl, #0
    bf2a:	4656      	mov	r6, sl
    bf2c:	e515      	b.n	b95a <_dtoa_r+0x432>
    bf2e:	f000 80f5 	beq.w	c11c <_dtoa_r+0xbf4>
    bf32:	9b04      	ldr	r3, [sp, #16]
    bf34:	4951      	ldr	r1, [pc, #324]	; (c07c <_dtoa_r+0xb54>)
    bf36:	425a      	negs	r2, r3
    bf38:	f002 000f 	and.w	r0, r2, #15
    bf3c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    bf40:	ed91 6b00 	vldr	d6, [r1]
    bf44:	1112      	asrs	r2, r2, #4
    bf46:	ee28 6b06 	vmul.f64	d6, d8, d6
    bf4a:	f000 8142 	beq.w	c1d2 <_dtoa_r+0xcaa>
    bf4e:	eeb0 7b46 	vmov.f64	d7, d6
    bf52:	494b      	ldr	r1, [pc, #300]	; (c080 <_dtoa_r+0xb58>)
    bf54:	2600      	movs	r6, #0
    bf56:	2002      	movs	r0, #2
    bf58:	07d3      	lsls	r3, r2, #31
    bf5a:	d505      	bpl.n	bf68 <_dtoa_r+0xa40>
    bf5c:	ed91 5b00 	vldr	d5, [r1]
    bf60:	3001      	adds	r0, #1
    bf62:	2601      	movs	r6, #1
    bf64:	ee27 7b05 	vmul.f64	d7, d7, d5
    bf68:	1052      	asrs	r2, r2, #1
    bf6a:	f101 0108 	add.w	r1, r1, #8
    bf6e:	d1f3      	bne.n	bf58 <_dtoa_r+0xa30>
    bf70:	2e00      	cmp	r6, #0
    bf72:	fe06 6b07 	vseleq.f64	d6, d6, d7
    bf76:	e41e      	b.n	b7b6 <_dtoa_r+0x28e>
    bf78:	9b02      	ldr	r3, [sp, #8]
    bf7a:	2b00      	cmp	r3, #0
    bf7c:	f47f ae37 	bne.w	bbee <_dtoa_r+0x6c6>
    bf80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    bf84:	f3c1 0213 	ubfx	r2, r1, #0, #20
    bf88:	2a00      	cmp	r2, #0
    bf8a:	f040 8137 	bne.w	c1fc <_dtoa_r+0xcd4>
    bf8e:	4a3d      	ldr	r2, [pc, #244]	; (c084 <_dtoa_r+0xb5c>)
    bf90:	400a      	ands	r2, r1
    bf92:	2a00      	cmp	r2, #0
    bf94:	f000 80fa 	beq.w	c18c <_dtoa_r+0xc64>
    bf98:	9b06      	ldr	r3, [sp, #24]
    bf9a:	3301      	adds	r3, #1
    bf9c:	9306      	str	r3, [sp, #24]
    bf9e:	2301      	movs	r3, #1
    bfa0:	f108 0801 	add.w	r8, r8, #1
    bfa4:	9308      	str	r3, [sp, #32]
    bfa6:	e56f      	b.n	ba88 <_dtoa_r+0x560>
    bfa8:	4629      	mov	r1, r5
    bfaa:	9a08      	ldr	r2, [sp, #32]
    bfac:	4620      	mov	r0, r4
    bfae:	f7fb fa6b 	bl	7488 <__pow5mult>
    bfb2:	4605      	mov	r5, r0
    bfb4:	e55a      	b.n	ba6c <_dtoa_r+0x544>
    bfb6:	2a00      	cmp	r2, #0
    bfb8:	dd12      	ble.n	bfe0 <_dtoa_r+0xab8>
    bfba:	4629      	mov	r1, r5
    bfbc:	2201      	movs	r2, #1
    bfbe:	4620      	mov	r0, r4
    bfc0:	9301      	str	r3, [sp, #4]
    bfc2:	f7fb fac1 	bl	7548 <__lshift>
    bfc6:	4651      	mov	r1, sl
    bfc8:	4605      	mov	r5, r0
    bfca:	f7fb fb35 	bl	7638 <__mcmp>
    bfce:	2800      	cmp	r0, #0
    bfd0:	9b01      	ldr	r3, [sp, #4]
    bfd2:	f340 80e1 	ble.w	c198 <_dtoa_r+0xc70>
    bfd6:	2b39      	cmp	r3, #57	; 0x39
    bfd8:	f000 80ca 	beq.w	c170 <_dtoa_r+0xc48>
    bfdc:	f10b 0331 	add.w	r3, fp, #49	; 0x31
    bfe0:	46b9      	mov	r9, r7
    bfe2:	f809 3b01 	strb.w	r3, [r9], #1
    bfe6:	9b04      	ldr	r3, [sp, #16]
    bfe8:	3301      	adds	r3, #1
    bfea:	4637      	mov	r7, r6
    bfec:	9304      	str	r3, [sp, #16]
    bfee:	4646      	mov	r6, r8
    bff0:	e5ba      	b.n	bb68 <_dtoa_r+0x640>
    bff2:	ee38 8b08 	vadd.f64	d8, d8, d8
    bff6:	eeb4 8bc6 	vcmpe.f64	d8, d6
    bffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    bffe:	dc0a      	bgt.n	c016 <_dtoa_r+0xaee>
    c000:	eeb4 8b46 	vcmp.f64	d8, d6
    c004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c008:	f47f acdc 	bne.w	b9c4 <_dtoa_r+0x49c>
    c00c:	ee17 3a10 	vmov	r3, s14
    c010:	07d8      	lsls	r0, r3, #31
    c012:	f57f acd7 	bpl.w	b9c4 <_dtoa_r+0x49c>
    c016:	9a00      	ldr	r2, [sp, #0]
    c018:	e454      	b.n	b8c4 <_dtoa_r+0x39c>
    c01a:	6871      	ldr	r1, [r6, #4]
    c01c:	4620      	mov	r0, r4
    c01e:	f7fb f82d 	bl	707c <_Balloc>
    c022:	4607      	mov	r7, r0
    c024:	2800      	cmp	r0, #0
    c026:	f000 80de 	beq.w	c1e6 <_dtoa_r+0xcbe>
    c02a:	6933      	ldr	r3, [r6, #16]
    c02c:	3302      	adds	r3, #2
    c02e:	009a      	lsls	r2, r3, #2
    c030:	f106 010c 	add.w	r1, r6, #12
    c034:	300c      	adds	r0, #12
    c036:	f7f5 ffeb 	bl	2010 <memcpy>
    c03a:	4639      	mov	r1, r7
    c03c:	2201      	movs	r2, #1
    c03e:	4620      	mov	r0, r4
    c040:	f7fb fa82 	bl	7548 <__lshift>
    c044:	4680      	mov	r8, r0
    c046:	e5fe      	b.n	bc46 <_dtoa_r+0x71e>
    c048:	9b06      	ldr	r3, [sp, #24]
    c04a:	eba3 0309 	sub.w	r3, r3, r9
    c04e:	9309      	str	r3, [sp, #36]	; 0x24
    c050:	e4da      	b.n	ba08 <_dtoa_r+0x4e0>
    c052:	2b39      	cmp	r3, #57	; 0x39
    c054:	f000 808c 	beq.w	c170 <_dtoa_r+0xc48>
    c058:	46b9      	mov	r9, r7
    c05a:	3301      	adds	r3, #1
    c05c:	e7c1      	b.n	bfe2 <_dtoa_r+0xaba>
    c05e:	9a04      	ldr	r2, [sp, #16]
    c060:	3201      	adds	r2, #1
    c062:	4637      	mov	r7, r6
    c064:	9204      	str	r2, [sp, #16]
    c066:	4646      	mov	r6, r8
    c068:	e55f      	b.n	bb2a <_dtoa_r+0x602>
    c06a:	4629      	mov	r1, r5
    c06c:	4620      	mov	r0, r4
    c06e:	f7fb fa0b 	bl	7488 <__pow5mult>
    c072:	4605      	mov	r5, r0
    c074:	e4fa      	b.n	ba6c <_dtoa_r+0x544>
    c076:	bf00      	nop
    c078:	2000084c 	.word	0x2000084c
    c07c:	200002a8 	.word	0x200002a8
    c080:	20000280 	.word	0x20000280
    c084:	7ff00000 	.word	0x7ff00000
    c088:	4b5e      	ldr	r3, [pc, #376]	; (c204 <_dtoa_r+0xcdc>)
    c08a:	eefd 5bc6 	vcvt.s32.f64	s11, d6
    c08e:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
    c092:	ed1c 3b02 	vldr	d3, [ip, #-8]
    c096:	eeb8 7be5 	vcvt.f64.s32	d7, s11
    c09a:	ee36 7b47 	vsub.f64	d7, d6, d7
    c09e:	ec41 0b16 	vmov	d6, r0, r1
    c0a2:	ee15 1a90 	vmov	r1, s11
    c0a6:	ee23 3b06 	vmul.f64	d3, d3, d6
    c0aa:	9800      	ldr	r0, [sp, #0]
    c0ac:	3130      	adds	r1, #48	; 0x30
    c0ae:	2a01      	cmp	r2, #1
    c0b0:	f800 1b01 	strb.w	r1, [r0], #1
    c0b4:	f000 8083 	beq.w	c1be <_dtoa_r+0xc96>
    c0b8:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    c0bc:	9b00      	ldr	r3, [sp, #0]
    c0be:	1899      	adds	r1, r3, r2
    c0c0:	ee27 7b04 	vmul.f64	d7, d7, d4
    c0c4:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    c0c8:	ee16 3a90 	vmov	r3, s13
    c0cc:	3330      	adds	r3, #48	; 0x30
    c0ce:	f800 3b01 	strb.w	r3, [r0], #1
    c0d2:	4281      	cmp	r1, r0
    c0d4:	eeb8 5be6 	vcvt.f64.s32	d5, s13
    c0d8:	ee37 7b45 	vsub.f64	d7, d7, d5
    c0dc:	d1f0      	bne.n	c0c0 <_dtoa_r+0xb98>
    c0de:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    c0e2:	ee33 5b06 	vadd.f64	d5, d3, d6
    c0e6:	eeb4 5bc7 	vcmpe.f64	d5, d7
    c0ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c0ee:	f53f abe3 	bmi.w	b8b8 <_dtoa_r+0x390>
    c0f2:	ee36 6b43 	vsub.f64	d6, d6, d3
    c0f6:	eeb4 6bc7 	vcmpe.f64	d6, d7
    c0fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c0fe:	f77f ac0d 	ble.w	b91c <_dtoa_r+0x3f4>
    c102:	4689      	mov	r9, r1
    c104:	3901      	subs	r1, #1
    c106:	f819 3c01 	ldrb.w	r3, [r9, #-1]
    c10a:	2b30      	cmp	r3, #48	; 0x30
    c10c:	d0f9      	beq.n	c102 <_dtoa_r+0xbda>
    c10e:	1c73      	adds	r3, r6, #1
    c110:	9304      	str	r3, [sp, #16]
    c112:	e539      	b.n	bb88 <_dtoa_r+0x660>
    c114:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c116:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
    c11a:	e6da      	b.n	bed2 <_dtoa_r+0x9aa>
    c11c:	2002      	movs	r0, #2
    c11e:	eeb0 6b48 	vmov.f64	d6, d8
    c122:	f7ff bb48 	b.w	b7b6 <_dtoa_r+0x28e>
    c126:	f1b9 0f00 	cmp.w	r9, #0
    c12a:	f43f aeda 	beq.w	bee2 <_dtoa_r+0x9ba>
    c12e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c130:	2a00      	cmp	r2, #0
    c132:	f77f abf3 	ble.w	b91c <_dtoa_r+0x3f4>
    c136:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    c13a:	ee26 6b04 	vmul.f64	d6, d6, d4
    c13e:	3001      	adds	r0, #1
    c140:	ee07 0a90 	vmov	s15, r0
    c144:	9b04      	ldr	r3, [sp, #16]
    c146:	eeb8 5be7 	vcvt.f64.s32	d5, s15
    c14a:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    c14e:	eea6 7b05 	vfma.f64	d7, d6, d5
    c152:	ee17 ca90 	vmov	ip, s15
    c156:	ec51 0b17 	vmov	r0, r1, d7
    c15a:	1e5e      	subs	r6, r3, #1
    c15c:	f1ac 7150 	sub.w	r1, ip, #54525952	; 0x3400000
    c160:	f7ff bb47 	b.w	b7f2 <_dtoa_r+0x2ca>
    c164:	9b04      	ldr	r3, [sp, #16]
    c166:	3301      	adds	r3, #1
    c168:	9304      	str	r3, [sp, #16]
    c16a:	2331      	movs	r3, #49	; 0x31
    c16c:	f7ff bbb1 	b.w	b8d2 <_dtoa_r+0x3aa>
    c170:	9b04      	ldr	r3, [sp, #16]
    c172:	46bb      	mov	fp, r7
    c174:	3301      	adds	r3, #1
    c176:	9304      	str	r3, [sp, #16]
    c178:	2339      	movs	r3, #57	; 0x39
    c17a:	4637      	mov	r7, r6
    c17c:	f80b 3b01 	strb.w	r3, [fp], #1
    c180:	4646      	mov	r6, r8
    c182:	e4e1      	b.n	bb48 <_dtoa_r+0x620>
    c184:	f04f 0a00 	mov.w	sl, #0
    c188:	4656      	mov	r6, sl
    c18a:	e653      	b.n	be34 <_dtoa_r+0x90c>
    c18c:	9208      	str	r2, [sp, #32]
    c18e:	e47b      	b.n	ba88 <_dtoa_r+0x560>
    c190:	1c73      	adds	r3, r6, #1
    c192:	9304      	str	r3, [sp, #16]
    c194:	4689      	mov	r9, r1
    c196:	e4f7      	b.n	bb88 <_dtoa_r+0x660>
    c198:	f47f af22 	bne.w	bfe0 <_dtoa_r+0xab8>
    c19c:	07da      	lsls	r2, r3, #31
    c19e:	f57f af1f 	bpl.w	bfe0 <_dtoa_r+0xab8>
    c1a2:	e718      	b.n	bfd6 <_dtoa_r+0xaae>
    c1a4:	2b39      	cmp	r3, #57	; 0x39
    c1a6:	d0e3      	beq.n	c170 <_dtoa_r+0xc48>
    c1a8:	f1b9 0f00 	cmp.w	r9, #0
    c1ac:	f73f af16 	bgt.w	bfdc <_dtoa_r+0xab4>
    c1b0:	e716      	b.n	bfe0 <_dtoa_r+0xab8>
    c1b2:	9b01      	ldr	r3, [sp, #4]
    c1b4:	2b02      	cmp	r3, #2
    c1b6:	f73f ae28 	bgt.w	be0a <_dtoa_r+0x8e2>
    c1ba:	9704      	str	r7, [sp, #16]
    c1bc:	e5ba      	b.n	bd34 <_dtoa_r+0x80c>
    c1be:	4601      	mov	r1, r0
    c1c0:	e78d      	b.n	c0de <_dtoa_r+0xbb6>
    c1c2:	9b01      	ldr	r3, [sp, #4]
    c1c4:	2b02      	cmp	r3, #2
    c1c6:	f73f ae20 	bgt.w	be0a <_dtoa_r+0x8e2>
    c1ca:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    c1ce:	9704      	str	r7, [sp, #16]
    c1d0:	e52b      	b.n	bc2a <_dtoa_r+0x702>
    c1d2:	2002      	movs	r0, #2
    c1d4:	f7ff baef 	b.w	b7b6 <_dtoa_r+0x28e>
    c1d8:	4b0b      	ldr	r3, [pc, #44]	; (c208 <_dtoa_r+0xce0>)
    c1da:	480c      	ldr	r0, [pc, #48]	; (c20c <_dtoa_r+0xce4>)
    c1dc:	2200      	movs	r2, #0
    c1de:	f240 11af 	movw	r1, #431	; 0x1af
    c1e2:	f7ff f8b1 	bl	b348 <__assert_func>
    c1e6:	4b08      	ldr	r3, [pc, #32]	; (c208 <_dtoa_r+0xce0>)
    c1e8:	4808      	ldr	r0, [pc, #32]	; (c20c <_dtoa_r+0xce4>)
    c1ea:	463a      	mov	r2, r7
    c1ec:	f240 21ef 	movw	r1, #751	; 0x2ef
    c1f0:	f7ff f8aa 	bl	b348 <__assert_func>
    c1f4:	4b06      	ldr	r3, [pc, #24]	; (c210 <_dtoa_r+0xce8>)
    c1f6:	9300      	str	r3, [sp, #0]
    c1f8:	f7ff b9d2 	b.w	b5a0 <_dtoa_r+0x78>
    c1fc:	9b02      	ldr	r3, [sp, #8]
    c1fe:	9308      	str	r3, [sp, #32]
    c200:	e4f7      	b.n	bbf2 <_dtoa_r+0x6ca>
    c202:	bf00      	nop
    c204:	200002a8 	.word	0x200002a8
    c208:	20000560 	.word	0x20000560
    c20c:	20000850 	.word	0x20000850
    c210:	20000840 	.word	0x20000840

0000c214 <_strtoul_l.constprop.0>:
    c214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c218:	4607      	mov	r7, r0
    c21a:	484c      	ldr	r0, [pc, #304]	; (c34c <_strtoul_l.constprop.0+0x138>)
    c21c:	460e      	mov	r6, r1
    c21e:	4635      	mov	r5, r6
    c220:	f816 eb01 	ldrb.w	lr, [r6], #1
    c224:	f810 c00e 	ldrb.w	ip, [r0, lr]
    c228:	f01c 0c08 	ands.w	ip, ip, #8
    c22c:	d1f7      	bne.n	c21e <_strtoul_l.constprop.0+0xa>
    c22e:	f1be 0f2d 	cmp.w	lr, #45	; 0x2d
    c232:	d05a      	beq.n	c2ea <_strtoul_l.constprop.0+0xd6>
    c234:	f1be 0f2b 	cmp.w	lr, #43	; 0x2b
    c238:	bf03      	ittte	eq
    c23a:	f896 e000 	ldrbeq.w	lr, [r6]
    c23e:	4664      	moveq	r4, ip
    c240:	1cae      	addeq	r6, r5, #2
    c242:	4664      	movne	r4, ip
    c244:	b15b      	cbz	r3, c25e <_strtoul_l.constprop.0+0x4a>
    c246:	2b10      	cmp	r3, #16
    c248:	d054      	beq.n	c2f4 <_strtoul_l.constprop.0+0xe0>
    c24a:	f04f 38ff 	mov.w	r8, #4294967295
    c24e:	fbb8 f8f3 	udiv	r8, r8, r3
    c252:	fb03 fa08 	mul.w	sl, r3, r8
    c256:	ea6f 0a0a 	mvn.w	sl, sl
    c25a:	4699      	mov	r9, r3
    c25c:	e008      	b.n	c270 <_strtoul_l.constprop.0+0x5c>
    c25e:	f1be 0f30 	cmp.w	lr, #48	; 0x30
    c262:	d05a      	beq.n	c31a <_strtoul_l.constprop.0+0x106>
    c264:	230a      	movs	r3, #10
    c266:	f8df 80e8 	ldr.w	r8, [pc, #232]	; c350 <_strtoul_l.constprop.0+0x13c>
    c26a:	f04f 0a05 	mov.w	sl, #5
    c26e:	4699      	mov	r9, r3
    c270:	2500      	movs	r5, #0
    c272:	4628      	mov	r0, r5
    c274:	e005      	b.n	c282 <_strtoul_l.constprop.0+0x6e>
    c276:	d02c      	beq.n	c2d2 <_strtoul_l.constprop.0+0xbe>
    c278:	fb09 c000 	mla	r0, r9, r0, ip
    c27c:	2501      	movs	r5, #1
    c27e:	f816 eb01 	ldrb.w	lr, [r6], #1
    c282:	f1ae 0c30 	sub.w	ip, lr, #48	; 0x30
    c286:	f1bc 0f09 	cmp.w	ip, #9
    c28a:	d906      	bls.n	c29a <_strtoul_l.constprop.0+0x86>
    c28c:	f1ae 0c41 	sub.w	ip, lr, #65	; 0x41
    c290:	f1bc 0f19 	cmp.w	ip, #25
    c294:	d80b      	bhi.n	c2ae <_strtoul_l.constprop.0+0x9a>
    c296:	f1ae 0c37 	sub.w	ip, lr, #55	; 0x37
    c29a:	4563      	cmp	r3, ip
    c29c:	dd10      	ble.n	c2c0 <_strtoul_l.constprop.0+0xac>
    c29e:	f1b5 3fff 	cmp.w	r5, #4294967295
    c2a2:	d0ec      	beq.n	c27e <_strtoul_l.constprop.0+0x6a>
    c2a4:	4540      	cmp	r0, r8
    c2a6:	d9e6      	bls.n	c276 <_strtoul_l.constprop.0+0x62>
    c2a8:	f04f 35ff 	mov.w	r5, #4294967295
    c2ac:	e7e7      	b.n	c27e <_strtoul_l.constprop.0+0x6a>
    c2ae:	f1ae 0c61 	sub.w	ip, lr, #97	; 0x61
    c2b2:	f1bc 0f19 	cmp.w	ip, #25
    c2b6:	d803      	bhi.n	c2c0 <_strtoul_l.constprop.0+0xac>
    c2b8:	f1ae 0c57 	sub.w	ip, lr, #87	; 0x57
    c2bc:	4563      	cmp	r3, ip
    c2be:	dcee      	bgt.n	c29e <_strtoul_l.constprop.0+0x8a>
    c2c0:	1c6b      	adds	r3, r5, #1
    c2c2:	d00b      	beq.n	c2dc <_strtoul_l.constprop.0+0xc8>
    c2c4:	b104      	cbz	r4, c2c8 <_strtoul_l.constprop.0+0xb4>
    c2c6:	4240      	negs	r0, r0
    c2c8:	b10a      	cbz	r2, c2ce <_strtoul_l.constprop.0+0xba>
    c2ca:	b965      	cbnz	r5, c2e6 <_strtoul_l.constprop.0+0xd2>
    c2cc:	6011      	str	r1, [r2, #0]
    c2ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c2d2:	45d4      	cmp	ip, sl
    c2d4:	ddd0      	ble.n	c278 <_strtoul_l.constprop.0+0x64>
    c2d6:	f04f 35ff 	mov.w	r5, #4294967295
    c2da:	e7d0      	b.n	c27e <_strtoul_l.constprop.0+0x6a>
    c2dc:	2322      	movs	r3, #34	; 0x22
    c2de:	603b      	str	r3, [r7, #0]
    c2e0:	4628      	mov	r0, r5
    c2e2:	2a00      	cmp	r2, #0
    c2e4:	d0f3      	beq.n	c2ce <_strtoul_l.constprop.0+0xba>
    c2e6:	1e71      	subs	r1, r6, #1
    c2e8:	e7f0      	b.n	c2cc <_strtoul_l.constprop.0+0xb8>
    c2ea:	f896 e000 	ldrb.w	lr, [r6]
    c2ee:	2401      	movs	r4, #1
    c2f0:	1cae      	adds	r6, r5, #2
    c2f2:	e7a7      	b.n	c244 <_strtoul_l.constprop.0+0x30>
    c2f4:	f1be 0f30 	cmp.w	lr, #48	; 0x30
    c2f8:	d121      	bne.n	c33e <_strtoul_l.constprop.0+0x12a>
    c2fa:	7830      	ldrb	r0, [r6, #0]
    c2fc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
    c300:	2858      	cmp	r0, #88	; 0x58
    c302:	d116      	bne.n	c332 <_strtoul_l.constprop.0+0x11e>
    c304:	f04f 0910 	mov.w	r9, #16
    c308:	f896 e001 	ldrb.w	lr, [r6, #1]
    c30c:	f04f 0a0f 	mov.w	sl, #15
    c310:	3602      	adds	r6, #2
    c312:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
    c316:	464b      	mov	r3, r9
    c318:	e7aa      	b.n	c270 <_strtoul_l.constprop.0+0x5c>
    c31a:	7833      	ldrb	r3, [r6, #0]
    c31c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    c320:	2b58      	cmp	r3, #88	; 0x58
    c322:	d0ef      	beq.n	c304 <_strtoul_l.constprop.0+0xf0>
    c324:	2308      	movs	r3, #8
    c326:	f04f 0a07 	mov.w	sl, #7
    c32a:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
    c32e:	4699      	mov	r9, r3
    c330:	e79e      	b.n	c270 <_strtoul_l.constprop.0+0x5c>
    c332:	4699      	mov	r9, r3
    c334:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
    c338:	f04f 0a0f 	mov.w	sl, #15
    c33c:	e798      	b.n	c270 <_strtoul_l.constprop.0+0x5c>
    c33e:	f04f 0a0f 	mov.w	sl, #15
    c342:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
    c346:	4699      	mov	r9, r3
    c348:	e792      	b.n	c270 <_strtoul_l.constprop.0+0x5c>
    c34a:	bf00      	nop
    c34c:	2000073d 	.word	0x2000073d
    c350:	19999999 	.word	0x19999999

0000c354 <_strtoul_r>:
    c354:	f7ff bf5e 	b.w	c214 <_strtoul_l.constprop.0>

0000c358 <_strtoll_l.constprop.0>:
    c358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c35c:	b085      	sub	sp, #20
    c35e:	461f      	mov	r7, r3
    c360:	4b57      	ldr	r3, [pc, #348]	; (c4c0 <_strtoll_l.constprop.0+0x168>)
    c362:	9003      	str	r0, [sp, #12]
    c364:	468a      	mov	sl, r1
    c366:	9200      	str	r2, [sp, #0]
    c368:	460d      	mov	r5, r1
    c36a:	462a      	mov	r2, r5
    c36c:	f815 4b01 	ldrb.w	r4, [r5], #1
    c370:	5d1e      	ldrb	r6, [r3, r4]
    c372:	f016 0608 	ands.w	r6, r6, #8
    c376:	d1f8      	bne.n	c36a <_strtoll_l.constprop.0+0x12>
    c378:	2c2d      	cmp	r4, #45	; 0x2d
    c37a:	d075      	beq.n	c468 <_strtoll_l.constprop.0+0x110>
    c37c:	2c2b      	cmp	r4, #43	; 0x2b
    c37e:	bf05      	ittet	eq
    c380:	782c      	ldrbeq	r4, [r5, #0]
    c382:	9602      	streq	r6, [sp, #8]
    c384:	9602      	strne	r6, [sp, #8]
    c386:	1c95      	addeq	r5, r2, #2
    c388:	f04f 36ff 	mov.w	r6, #4294967295
    c38c:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
    c390:	b12f      	cbz	r7, c39e <_strtoll_l.constprop.0+0x46>
    c392:	2f10      	cmp	r7, #16
    c394:	d06f      	beq.n	c476 <_strtoll_l.constprop.0+0x11e>
    c396:	46b8      	mov	r8, r7
    c398:	ea4f 79e7 	mov.w	r9, r7, asr #31
    c39c:	e005      	b.n	c3aa <_strtoll_l.constprop.0+0x52>
    c39e:	2c30      	cmp	r4, #48	; 0x30
    c3a0:	d074      	beq.n	c48c <_strtoll_l.constprop.0+0x134>
    c3a2:	f04f 080a 	mov.w	r8, #10
    c3a6:	46b9      	mov	r9, r7
    c3a8:	4647      	mov	r7, r8
    c3aa:	4642      	mov	r2, r8
    c3ac:	464b      	mov	r3, r9
    c3ae:	4630      	mov	r0, r6
    c3b0:	4659      	mov	r1, fp
    c3b2:	f7f7 fbcb 	bl	3b4c <__aeabi_uldivmod>
    c3b6:	2300      	movs	r3, #0
    c3b8:	9201      	str	r2, [sp, #4]
    c3ba:	4684      	mov	ip, r0
    c3bc:	460a      	mov	r2, r1
    c3be:	4618      	mov	r0, r3
    c3c0:	4619      	mov	r1, r3
    c3c2:	e011      	b.n	c3e8 <_strtoll_l.constprop.0+0x90>
    c3c4:	428a      	cmp	r2, r1
    c3c6:	bf08      	it	eq
    c3c8:	4584      	cmpeq	ip, r0
    c3ca:	d03d      	beq.n	c448 <_strtoll_l.constprop.0+0xf0>
    c3cc:	fb00 f309 	mul.w	r3, r0, r9
    c3d0:	fb08 3301 	mla	r3, r8, r1, r3
    c3d4:	fba0 0108 	umull	r0, r1, r0, r8
    c3d8:	440b      	add	r3, r1
    c3da:	eb1e 0000 	adds.w	r0, lr, r0
    c3de:	eb43 71ee 	adc.w	r1, r3, lr, asr #31
    c3e2:	2301      	movs	r3, #1
    c3e4:	f815 4b01 	ldrb.w	r4, [r5], #1
    c3e8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
    c3ec:	f1be 0f09 	cmp.w	lr, #9
    c3f0:	d906      	bls.n	c400 <_strtoll_l.constprop.0+0xa8>
    c3f2:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
    c3f6:	f1be 0f19 	cmp.w	lr, #25
    c3fa:	d80c      	bhi.n	c416 <_strtoll_l.constprop.0+0xbe>
    c3fc:	f1a4 0e37 	sub.w	lr, r4, #55	; 0x37
    c400:	4577      	cmp	r7, lr
    c402:	dd11      	ble.n	c428 <_strtoll_l.constprop.0+0xd0>
    c404:	1c5c      	adds	r4, r3, #1
    c406:	d0ed      	beq.n	c3e4 <_strtoll_l.constprop.0+0x8c>
    c408:	4584      	cmp	ip, r0
    c40a:	eb72 0301 	sbcs.w	r3, r2, r1
    c40e:	d2d9      	bcs.n	c3c4 <_strtoll_l.constprop.0+0x6c>
    c410:	f04f 33ff 	mov.w	r3, #4294967295
    c414:	e7e6      	b.n	c3e4 <_strtoll_l.constprop.0+0x8c>
    c416:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
    c41a:	f1be 0f19 	cmp.w	lr, #25
    c41e:	d803      	bhi.n	c428 <_strtoll_l.constprop.0+0xd0>
    c420:	f1a4 0e57 	sub.w	lr, r4, #87	; 0x57
    c424:	4577      	cmp	r7, lr
    c426:	dced      	bgt.n	c404 <_strtoll_l.constprop.0+0xac>
    c428:	1c5a      	adds	r2, r3, #1
    c42a:	d013      	beq.n	c454 <_strtoll_l.constprop.0+0xfc>
    c42c:	9a02      	ldr	r2, [sp, #8]
    c42e:	b112      	cbz	r2, c436 <_strtoll_l.constprop.0+0xde>
    c430:	4240      	negs	r0, r0
    c432:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c436:	9a00      	ldr	r2, [sp, #0]
    c438:	b11a      	cbz	r2, c442 <_strtoll_l.constprop.0+0xea>
    c43a:	bba3      	cbnz	r3, c4a6 <_strtoll_l.constprop.0+0x14e>
    c43c:	9b00      	ldr	r3, [sp, #0]
    c43e:	f8c3 a000 	str.w	sl, [r3]
    c442:	b005      	add	sp, #20
    c444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c448:	9b01      	ldr	r3, [sp, #4]
    c44a:	4573      	cmp	r3, lr
    c44c:	dabe      	bge.n	c3cc <_strtoll_l.constprop.0+0x74>
    c44e:	f04f 33ff 	mov.w	r3, #4294967295
    c452:	e7c7      	b.n	c3e4 <_strtoll_l.constprop.0+0x8c>
    c454:	9a03      	ldr	r2, [sp, #12]
    c456:	2322      	movs	r3, #34	; 0x22
    c458:	6013      	str	r3, [r2, #0]
    c45a:	9b00      	ldr	r3, [sp, #0]
    c45c:	b333      	cbz	r3, c4ac <_strtoll_l.constprop.0+0x154>
    c45e:	f105 3aff 	add.w	sl, r5, #4294967295
    c462:	4630      	mov	r0, r6
    c464:	4659      	mov	r1, fp
    c466:	e7e9      	b.n	c43c <_strtoll_l.constprop.0+0xe4>
    c468:	2301      	movs	r3, #1
    c46a:	782c      	ldrb	r4, [r5, #0]
    c46c:	9302      	str	r3, [sp, #8]
    c46e:	1c95      	adds	r5, r2, #2
    c470:	f04f 4b00 	mov.w	fp, #2147483648	; 0x80000000
    c474:	e78c      	b.n	c390 <_strtoll_l.constprop.0+0x38>
    c476:	2c30      	cmp	r4, #48	; 0x30
    c478:	d104      	bne.n	c484 <_strtoll_l.constprop.0+0x12c>
    c47a:	782b      	ldrb	r3, [r5, #0]
    c47c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    c480:	2b58      	cmp	r3, #88	; 0x58
    c482:	d008      	beq.n	c496 <_strtoll_l.constprop.0+0x13e>
    c484:	46b8      	mov	r8, r7
    c486:	f04f 0900 	mov.w	r9, #0
    c48a:	e78e      	b.n	c3aa <_strtoll_l.constprop.0+0x52>
    c48c:	782b      	ldrb	r3, [r5, #0]
    c48e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    c492:	2b58      	cmp	r3, #88	; 0x58
    c494:	d10f      	bne.n	c4b6 <_strtoll_l.constprop.0+0x15e>
    c496:	f04f 0810 	mov.w	r8, #16
    c49a:	786c      	ldrb	r4, [r5, #1]
    c49c:	f04f 0900 	mov.w	r9, #0
    c4a0:	3502      	adds	r5, #2
    c4a2:	4647      	mov	r7, r8
    c4a4:	e781      	b.n	c3aa <_strtoll_l.constprop.0+0x52>
    c4a6:	4606      	mov	r6, r0
    c4a8:	468b      	mov	fp, r1
    c4aa:	e7d8      	b.n	c45e <_strtoll_l.constprop.0+0x106>
    c4ac:	4630      	mov	r0, r6
    c4ae:	4659      	mov	r1, fp
    c4b0:	b005      	add	sp, #20
    c4b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c4b6:	f04f 0808 	mov.w	r8, #8
    c4ba:	46b9      	mov	r9, r7
    c4bc:	4647      	mov	r7, r8
    c4be:	e774      	b.n	c3aa <_strtoll_l.constprop.0+0x52>
    c4c0:	2000073d 	.word	0x2000073d

0000c4c4 <_strtoll_r>:
    c4c4:	f7ff bf48 	b.w	c358 <_strtoll_l.constprop.0>

0000c4c8 <_strtoull_l.constprop.0>:
    c4c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c4cc:	b085      	sub	sp, #20
    c4ce:	468b      	mov	fp, r1
    c4d0:	9201      	str	r2, [sp, #4]
    c4d2:	4a62      	ldr	r2, [pc, #392]	; (c65c <_strtoull_l.constprop.0+0x194>)
    c4d4:	9003      	str	r0, [sp, #12]
    c4d6:	461e      	mov	r6, r3
    c4d8:	460d      	mov	r5, r1
    c4da:	4629      	mov	r1, r5
    c4dc:	f815 4b01 	ldrb.w	r4, [r5], #1
    c4e0:	5d13      	ldrb	r3, [r2, r4]
    c4e2:	f013 0308 	ands.w	r3, r3, #8
    c4e6:	d1f8      	bne.n	c4da <_strtoull_l.constprop.0+0x12>
    c4e8:	2c2d      	cmp	r4, #45	; 0x2d
    c4ea:	f000 8082 	beq.w	c5f2 <_strtoull_l.constprop.0+0x12a>
    c4ee:	2c2b      	cmp	r4, #43	; 0x2b
    c4f0:	bf03      	ittte	eq
    c4f2:	782c      	ldrbeq	r4, [r5, #0]
    c4f4:	9302      	streq	r3, [sp, #8]
    c4f6:	1c8d      	addeq	r5, r1, #2
    c4f8:	9302      	strne	r3, [sp, #8]
    c4fa:	b1be      	cbz	r6, c52c <_strtoull_l.constprop.0+0x64>
    c4fc:	2e10      	cmp	r6, #16
    c4fe:	d07d      	beq.n	c5fc <_strtoull_l.constprop.0+0x134>
    c500:	ea4f 7ae6 	mov.w	sl, r6, asr #31
    c504:	4632      	mov	r2, r6
    c506:	4653      	mov	r3, sl
    c508:	f04f 30ff 	mov.w	r0, #4294967295
    c50c:	f04f 31ff 	mov.w	r1, #4294967295
    c510:	f7f7 fb1c 	bl	3b4c <__aeabi_uldivmod>
    c514:	4632      	mov	r2, r6
    c516:	4607      	mov	r7, r0
    c518:	4688      	mov	r8, r1
    c51a:	4653      	mov	r3, sl
    c51c:	f04f 30ff 	mov.w	r0, #4294967295
    c520:	f04f 31ff 	mov.w	r1, #4294967295
    c524:	46b1      	mov	r9, r6
    c526:	f7f7 fb11 	bl	3b4c <__aeabi_uldivmod>
    c52a:	e00a      	b.n	c542 <_strtoull_l.constprop.0+0x7a>
    c52c:	2c30      	cmp	r4, #48	; 0x30
    c52e:	d079      	beq.n	c624 <_strtoull_l.constprop.0+0x15c>
    c530:	f04f 090a 	mov.w	r9, #10
    c534:	f8df 8128 	ldr.w	r8, [pc, #296]	; c660 <_strtoull_l.constprop.0+0x198>
    c538:	46b2      	mov	sl, r6
    c53a:	2205      	movs	r2, #5
    c53c:	f04f 3799 	mov.w	r7, #2576980377	; 0x99999999
    c540:	464e      	mov	r6, r9
    c542:	f04f 0c00 	mov.w	ip, #0
    c546:	4660      	mov	r0, ip
    c548:	4661      	mov	r1, ip
    c54a:	e011      	b.n	c570 <_strtoull_l.constprop.0+0xa8>
    c54c:	4541      	cmp	r1, r8
    c54e:	bf08      	it	eq
    c550:	42b8      	cmpeq	r0, r7
    c552:	d03e      	beq.n	c5d2 <_strtoull_l.constprop.0+0x10a>
    c554:	fb00 f40a 	mul.w	r4, r0, sl
    c558:	fb09 4101 	mla	r1, r9, r1, r4
    c55c:	fba0 0409 	umull	r0, r4, r0, r9
    c560:	4421      	add	r1, r4
    c562:	1818      	adds	r0, r3, r0
    c564:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
    c568:	f04f 0c01 	mov.w	ip, #1
    c56c:	f815 4b01 	ldrb.w	r4, [r5], #1
    c570:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    c574:	2b09      	cmp	r3, #9
    c576:	d905      	bls.n	c584 <_strtoull_l.constprop.0+0xbc>
    c578:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
    c57c:	2b19      	cmp	r3, #25
    c57e:	d80d      	bhi.n	c59c <_strtoull_l.constprop.0+0xd4>
    c580:	f1a4 0337 	sub.w	r3, r4, #55	; 0x37
    c584:	429e      	cmp	r6, r3
    c586:	dd11      	ble.n	c5ac <_strtoull_l.constprop.0+0xe4>
    c588:	f1bc 3fff 	cmp.w	ip, #4294967295
    c58c:	d0ee      	beq.n	c56c <_strtoull_l.constprop.0+0xa4>
    c58e:	4287      	cmp	r7, r0
    c590:	eb78 0401 	sbcs.w	r4, r8, r1
    c594:	d2da      	bcs.n	c54c <_strtoull_l.constprop.0+0x84>
    c596:	f04f 3cff 	mov.w	ip, #4294967295
    c59a:	e7e7      	b.n	c56c <_strtoull_l.constprop.0+0xa4>
    c59c:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
    c5a0:	2b19      	cmp	r3, #25
    c5a2:	d803      	bhi.n	c5ac <_strtoull_l.constprop.0+0xe4>
    c5a4:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
    c5a8:	429e      	cmp	r6, r3
    c5aa:	dced      	bgt.n	c588 <_strtoull_l.constprop.0+0xc0>
    c5ac:	f1bc 3fff 	cmp.w	ip, #4294967295
    c5b0:	d014      	beq.n	c5dc <_strtoull_l.constprop.0+0x114>
    c5b2:	9b02      	ldr	r3, [sp, #8]
    c5b4:	b113      	cbz	r3, c5bc <_strtoull_l.constprop.0+0xf4>
    c5b6:	4240      	negs	r0, r0
    c5b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c5bc:	9b01      	ldr	r3, [sp, #4]
    c5be:	b12b      	cbz	r3, c5cc <_strtoull_l.constprop.0+0x104>
    c5c0:	f1bc 0f00 	cmp.w	ip, #0
    c5c4:	d112      	bne.n	c5ec <_strtoull_l.constprop.0+0x124>
    c5c6:	9b01      	ldr	r3, [sp, #4]
    c5c8:	f8c3 b000 	str.w	fp, [r3]
    c5cc:	b005      	add	sp, #20
    c5ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c5d2:	4293      	cmp	r3, r2
    c5d4:	ddbe      	ble.n	c554 <_strtoull_l.constprop.0+0x8c>
    c5d6:	f04f 3cff 	mov.w	ip, #4294967295
    c5da:	e7c7      	b.n	c56c <_strtoull_l.constprop.0+0xa4>
    c5dc:	9a03      	ldr	r2, [sp, #12]
    c5de:	2322      	movs	r3, #34	; 0x22
    c5e0:	6013      	str	r3, [r2, #0]
    c5e2:	9b01      	ldr	r3, [sp, #4]
    c5e4:	4660      	mov	r0, ip
    c5e6:	4661      	mov	r1, ip
    c5e8:	2b00      	cmp	r3, #0
    c5ea:	d0ef      	beq.n	c5cc <_strtoull_l.constprop.0+0x104>
    c5ec:	f105 3bff 	add.w	fp, r5, #4294967295
    c5f0:	e7e9      	b.n	c5c6 <_strtoull_l.constprop.0+0xfe>
    c5f2:	2301      	movs	r3, #1
    c5f4:	782c      	ldrb	r4, [r5, #0]
    c5f6:	9302      	str	r3, [sp, #8]
    c5f8:	1c8d      	adds	r5, r1, #2
    c5fa:	e77e      	b.n	c4fa <_strtoull_l.constprop.0+0x32>
    c5fc:	2c30      	cmp	r4, #48	; 0x30
    c5fe:	d123      	bne.n	c648 <_strtoull_l.constprop.0+0x180>
    c600:	782b      	ldrb	r3, [r5, #0]
    c602:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    c606:	2b58      	cmp	r3, #88	; 0x58
    c608:	d11b      	bne.n	c642 <_strtoull_l.constprop.0+0x17a>
    c60a:	f04f 0910 	mov.w	r9, #16
    c60e:	786c      	ldrb	r4, [r5, #1]
    c610:	220f      	movs	r2, #15
    c612:	3502      	adds	r5, #2
    c614:	f04f 37ff 	mov.w	r7, #4294967295
    c618:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
    c61c:	f04f 0a00 	mov.w	sl, #0
    c620:	464e      	mov	r6, r9
    c622:	e78e      	b.n	c542 <_strtoull_l.constprop.0+0x7a>
    c624:	782b      	ldrb	r3, [r5, #0]
    c626:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    c62a:	2b58      	cmp	r3, #88	; 0x58
    c62c:	d0ed      	beq.n	c60a <_strtoull_l.constprop.0+0x142>
    c62e:	f04f 0908 	mov.w	r9, #8
    c632:	46b2      	mov	sl, r6
    c634:	2207      	movs	r2, #7
    c636:	f04f 37ff 	mov.w	r7, #4294967295
    c63a:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
    c63e:	464e      	mov	r6, r9
    c640:	e77f      	b.n	c542 <_strtoull_l.constprop.0+0x7a>
    c642:	f04f 0a00 	mov.w	sl, #0
    c646:	e75d      	b.n	c504 <_strtoull_l.constprop.0+0x3c>
    c648:	220f      	movs	r2, #15
    c64a:	f04f 37ff 	mov.w	r7, #4294967295
    c64e:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
    c652:	46b1      	mov	r9, r6
    c654:	f04f 0a00 	mov.w	sl, #0
    c658:	e773      	b.n	c542 <_strtoull_l.constprop.0+0x7a>
    c65a:	bf00      	nop
    c65c:	2000073d 	.word	0x2000073d
    c660:	19999999 	.word	0x19999999

0000c664 <_strtoull_r>:
    c664:	f7ff bf30 	b.w	c4c8 <_strtoull_l.constprop.0>

0000c668 <_mbrtowc_r>:
    c668:	b570      	push	{r4, r5, r6, lr}
    c66a:	b082      	sub	sp, #8
    c66c:	4604      	mov	r4, r0
    c66e:	9d06      	ldr	r5, [sp, #24]
    c670:	b155      	cbz	r5, c688 <_mbrtowc_r+0x20>
    c672:	b16a      	cbz	r2, c690 <_mbrtowc_r+0x28>
    c674:	480f      	ldr	r0, [pc, #60]	; (c6b4 <_mbrtowc_r+0x4c>)
    c676:	9500      	str	r5, [sp, #0]
    c678:	f8d0 60e4 	ldr.w	r6, [r0, #228]	; 0xe4
    c67c:	4620      	mov	r0, r4
    c67e:	47b0      	blx	r6
    c680:	1c43      	adds	r3, r0, #1
    c682:	d010      	beq.n	c6a6 <_mbrtowc_r+0x3e>
    c684:	b002      	add	sp, #8
    c686:	bd70      	pop	{r4, r5, r6, pc}
    c688:	f100 05f4 	add.w	r5, r0, #244	; 0xf4
    c68c:	2a00      	cmp	r2, #0
    c68e:	d1f1      	bne.n	c674 <_mbrtowc_r+0xc>
    c690:	4b08      	ldr	r3, [pc, #32]	; (c6b4 <_mbrtowc_r+0x4c>)
    c692:	9500      	str	r5, [sp, #0]
    c694:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
    c698:	4611      	mov	r1, r2
    c69a:	2301      	movs	r3, #1
    c69c:	4a06      	ldr	r2, [pc, #24]	; (c6b8 <_mbrtowc_r+0x50>)
    c69e:	4620      	mov	r0, r4
    c6a0:	47b0      	blx	r6
    c6a2:	1c43      	adds	r3, r0, #1
    c6a4:	d1ee      	bne.n	c684 <_mbrtowc_r+0x1c>
    c6a6:	2200      	movs	r2, #0
    c6a8:	238a      	movs	r3, #138	; 0x8a
    c6aa:	602a      	str	r2, [r5, #0]
    c6ac:	6023      	str	r3, [r4, #0]
    c6ae:	b002      	add	sp, #8
    c6b0:	bd70      	pop	{r4, r5, r6, pc}
    c6b2:	bf00      	nop
    c6b4:	20007c48 	.word	0x20007c48
    c6b8:	20007818 	.word	0x20007818

0000c6bc <_wcrtomb_r>:
    c6bc:	b570      	push	{r4, r5, r6, lr}
    c6be:	4605      	mov	r5, r0
    c6c0:	b084      	sub	sp, #16
    c6c2:	b15b      	cbz	r3, c6dc <_wcrtomb_r+0x20>
    c6c4:	461c      	mov	r4, r3
    c6c6:	b169      	cbz	r1, c6e4 <_wcrtomb_r+0x28>
    c6c8:	4b0e      	ldr	r3, [pc, #56]	; (c704 <_wcrtomb_r+0x48>)
    c6ca:	4628      	mov	r0, r5
    c6cc:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
    c6d0:	4623      	mov	r3, r4
    c6d2:	47b0      	blx	r6
    c6d4:	1c43      	adds	r3, r0, #1
    c6d6:	d00f      	beq.n	c6f8 <_wcrtomb_r+0x3c>
    c6d8:	b004      	add	sp, #16
    c6da:	bd70      	pop	{r4, r5, r6, pc}
    c6dc:	f500 7482 	add.w	r4, r0, #260	; 0x104
    c6e0:	2900      	cmp	r1, #0
    c6e2:	d1f1      	bne.n	c6c8 <_wcrtomb_r+0xc>
    c6e4:	4a07      	ldr	r2, [pc, #28]	; (c704 <_wcrtomb_r+0x48>)
    c6e6:	4623      	mov	r3, r4
    c6e8:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
    c6ec:	4628      	mov	r0, r5
    c6ee:	460a      	mov	r2, r1
    c6f0:	a901      	add	r1, sp, #4
    c6f2:	47b0      	blx	r6
    c6f4:	1c43      	adds	r3, r0, #1
    c6f6:	d1ef      	bne.n	c6d8 <_wcrtomb_r+0x1c>
    c6f8:	2200      	movs	r2, #0
    c6fa:	238a      	movs	r3, #138	; 0x8a
    c6fc:	6022      	str	r2, [r4, #0]
    c6fe:	602b      	str	r3, [r5, #0]
    c700:	b004      	add	sp, #16
    c702:	bd70      	pop	{r4, r5, r6, pc}
    c704:	20007c48 	.word	0x20007c48

0000c708 <_wcsrtombs_r>:
    c708:	b510      	push	{r4, lr}
    c70a:	b082      	sub	sp, #8
    c70c:	9c04      	ldr	r4, [sp, #16]
    c70e:	e9cd 3400 	strd	r3, r4, [sp]
    c712:	f04f 33ff 	mov.w	r3, #4294967295
    c716:	f001 fd9f 	bl	e258 <_wcsnrtombs_r>
    c71a:	b002      	add	sp, #8
    c71c:	bd10      	pop	{r4, pc}
    c71e:	bf00      	nop

0000c720 <iswspace>:
    c720:	2100      	movs	r1, #0
    c722:	f000 b801 	b.w	c728 <iswspace_l>
    c726:	bf00      	nop

0000c728 <iswspace_l>:
    c728:	b510      	push	{r4, lr}
    c72a:	f000 f8ab 	bl	c884 <_jp2uc_l>
    c72e:	4604      	mov	r4, r0
    c730:	f001 fda4 	bl	e27c <category>
    c734:	f1a0 031a 	sub.w	r3, r0, #26
    c738:	b2db      	uxtb	r3, r3
    c73a:	2b02      	cmp	r3, #2
    c73c:	d906      	bls.n	c74c <iswspace_l+0x24>
    c73e:	f1a4 0009 	sub.w	r0, r4, #9
    c742:	2804      	cmp	r0, #4
    c744:	bf8c      	ite	hi
    c746:	2000      	movhi	r0, #0
    c748:	2001      	movls	r0, #1
    c74a:	bd10      	pop	{r4, pc}
    c74c:	2001      	movs	r0, #1
    c74e:	bd10      	pop	{r4, pc}

0000c750 <__jp2uc>:
    c750:	2902      	cmp	r1, #2
    c752:	d032      	beq.n	c7ba <__jp2uc+0x6a>
    c754:	2903      	cmp	r1, #3
    c756:	f3c0 2307 	ubfx	r3, r0, #8, #8
    c75a:	bf1d      	ittte	ne
    c75c:	f1a0 0280 	subne.w	r2, r0, #128	; 0x80
    c760:	f083 0380 	eorne.w	r3, r3, #128	; 0x80
    c764:	b2d2      	uxtbne	r2, r2
    c766:	b2c2      	uxtbeq	r2, r0
    c768:	f103 0150 	add.w	r1, r3, #80	; 0x50
    c76c:	b2c9      	uxtb	r1, r1
    c76e:	291f      	cmp	r1, #31
    c770:	d806      	bhi.n	c780 <__jp2uc+0x30>
    c772:	f64c 71d3 	movw	r1, #53203	; 0xcfd3
    c776:	4288      	cmp	r0, r1
    c778:	d969      	bls.n	c84e <__jp2uc+0xfe>
    c77a:	f04f 30ff 	mov.w	r0, #4294967295
    c77e:	4770      	bx	lr
    c780:	f103 0130 	add.w	r1, r3, #48	; 0x30
    c784:	b2c9      	uxtb	r1, r1
    c786:	2924      	cmp	r1, #36	; 0x24
    c788:	d80e      	bhi.n	c7a8 <__jp2uc+0x58>
    c78a:	f24f 41a6 	movw	r1, #62630	; 0xf4a6
    c78e:	4288      	cmp	r0, r1
    c790:	d8f3      	bhi.n	c77a <__jp2uc+0x2a>
    c792:	3bd0      	subs	r3, #208	; 0xd0
    c794:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
    c798:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
    c79c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    c7a0:	4a30      	ldr	r2, [pc, #192]	; (c864 <__jp2uc+0x114>)
    c7a2:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
    c7a6:	4770      	bx	lr
    c7a8:	3ba1      	subs	r3, #161	; 0xa1
    c7aa:	2b07      	cmp	r3, #7
    c7ac:	d8e5      	bhi.n	c77a <__jp2uc+0x2a>
    c7ae:	e8df f003 	tbb	[pc, r3]
    c7b2:	3e48      	.short	0x3e48
    c7b4:	25292e34 	.word	0x25292e34
    c7b8:	1921      	.short	0x1921
    c7ba:	b2c2      	uxtb	r2, r0
    c7bc:	2a9e      	cmp	r2, #158	; 0x9e
    c7be:	f3c0 2107 	ubfx	r1, r0, #8, #8
    c7c2:	d90b      	bls.n	c7dc <__jp2uc+0x8c>
    c7c4:	3223      	adds	r2, #35	; 0x23
    c7c6:	b2d2      	uxtb	r2, r2
    c7c8:	2380      	movs	r3, #128	; 0x80
    c7ca:	299f      	cmp	r1, #159	; 0x9f
    c7cc:	bf94      	ite	ls
    c7ce:	3970      	subls	r1, #112	; 0x70
    c7d0:	3150      	addhi	r1, #80	; 0x50
    c7d2:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    c7d6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    c7da:	e7c5      	b.n	c768 <__jp2uc+0x18>
    c7dc:	3a7e      	subs	r2, #126	; 0x7e
    c7de:	b2d2      	uxtb	r2, r2
    c7e0:	237f      	movs	r3, #127	; 0x7f
    c7e2:	e7f2      	b.n	c7ca <__jp2uc+0x7a>
    c7e4:	2ac0      	cmp	r2, #192	; 0xc0
    c7e6:	d8c8      	bhi.n	c77a <__jp2uc+0x2a>
    c7e8:	4b1f      	ldr	r3, [pc, #124]	; (c868 <__jp2uc+0x118>)
    c7ea:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
    c7ee:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    c7f2:	4770      	bx	lr
    c7f4:	2af1      	cmp	r2, #241	; 0xf1
    c7f6:	d8c0      	bhi.n	c77a <__jp2uc+0x2a>
    c7f8:	4b1c      	ldr	r3, [pc, #112]	; (c86c <__jp2uc+0x11c>)
    c7fa:	e019      	b.n	c830 <__jp2uc+0xe0>
    c7fc:	2ad8      	cmp	r2, #216	; 0xd8
    c7fe:	d8bc      	bhi.n	c77a <__jp2uc+0x2a>
    c800:	4b1b      	ldr	r3, [pc, #108]	; (c870 <__jp2uc+0x120>)
    c802:	e015      	b.n	c830 <__jp2uc+0xe0>
    c804:	2af6      	cmp	r2, #246	; 0xf6
    c806:	d8b8      	bhi.n	c77a <__jp2uc+0x2a>
    c808:	f502 5040 	add.w	r0, r2, #12288	; 0x3000
    c80c:	4770      	bx	lr
    c80e:	2af3      	cmp	r2, #243	; 0xf3
    c810:	d8b3      	bhi.n	c77a <__jp2uc+0x2a>
    c812:	f502 503e 	add.w	r0, r2, #12160	; 0x2f80
    c816:	3020      	adds	r0, #32
    c818:	4770      	bx	lr
    c81a:	4b16      	ldr	r3, [pc, #88]	; (c874 <__jp2uc+0x124>)
    c81c:	4413      	add	r3, r2
    c81e:	f813 3ca1 	ldrb.w	r3, [r3, #-161]
    c822:	2b00      	cmp	r3, #0
    c824:	d0a9      	beq.n	c77a <__jp2uc+0x2a>
    c826:	f502 407e 	add.w	r0, r2, #65024	; 0xfe00
    c82a:	3060      	adds	r0, #96	; 0x60
    c82c:	4770      	bx	lr
    c82e:	4b12      	ldr	r3, [pc, #72]	; (c878 <__jp2uc+0x128>)
    c830:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
    c834:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    c838:	2800      	cmp	r0, #0
    c83a:	bf08      	it	eq
    c83c:	f04f 30ff 	moveq.w	r0, #4294967295
    c840:	4770      	bx	lr
    c842:	4b0e      	ldr	r3, [pc, #56]	; (c87c <__jp2uc+0x12c>)
    c844:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
    c848:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    c84c:	4770      	bx	lr
    c84e:	3bb0      	subs	r3, #176	; 0xb0
    c850:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
    c854:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
    c858:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    c85c:	4a08      	ldr	r2, [pc, #32]	; (c880 <__jp2uc+0x130>)
    c85e:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
    c862:	4770      	bx	lr
    c864:	200058e4 	.word	0x200058e4
    c868:	20000c00 	.word	0x20000c00
    c86c:	20000b5c 	.word	0x20000b5c
    c870:	20000aec 	.word	0x20000aec
    c874:	20000a90 	.word	0x20000a90
    c878:	200009d4 	.word	0x200009d4
    c87c:	20000918 	.word	0x20000918
    c880:	20000c40 	.word	0x20000c40

0000c884 <_jp2uc_l>:
    c884:	b538      	push	{r3, r4, r5, lr}
    c886:	4605      	mov	r5, r0
    c888:	b1b9      	cbz	r1, c8ba <_jp2uc_l+0x36>
    c88a:	f501 7495 	add.w	r4, r1, #298	; 0x12a
    c88e:	4912      	ldr	r1, [pc, #72]	; (c8d8 <_jp2uc_l+0x54>)
    c890:	4620      	mov	r0, r4
    c892:	f7f9 fbe9 	bl	6068 <strcmp>
    c896:	b928      	cbnz	r0, c8a4 <_jp2uc_l+0x20>
    c898:	4628      	mov	r0, r5
    c89a:	2101      	movs	r1, #1
    c89c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    c8a0:	f7ff bf56 	b.w	c750 <__jp2uc>
    c8a4:	490d      	ldr	r1, [pc, #52]	; (c8dc <_jp2uc_l+0x58>)
    c8a6:	4620      	mov	r0, r4
    c8a8:	f7f9 fbde 	bl	6068 <strcmp>
    c8ac:	b938      	cbnz	r0, c8be <_jp2uc_l+0x3a>
    c8ae:	4628      	mov	r0, r5
    c8b0:	2102      	movs	r1, #2
    c8b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    c8b6:	f7ff bf4b 	b.w	c750 <__jp2uc>
    c8ba:	4c09      	ldr	r4, [pc, #36]	; (c8e0 <_jp2uc_l+0x5c>)
    c8bc:	e7e7      	b.n	c88e <_jp2uc_l+0xa>
    c8be:	4909      	ldr	r1, [pc, #36]	; (c8e4 <_jp2uc_l+0x60>)
    c8c0:	4620      	mov	r0, r4
    c8c2:	f7f9 fbd1 	bl	6068 <strcmp>
    c8c6:	b928      	cbnz	r0, c8d4 <_jp2uc_l+0x50>
    c8c8:	4628      	mov	r0, r5
    c8ca:	2103      	movs	r1, #3
    c8cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    c8d0:	f7ff bf3e 	b.w	c750 <__jp2uc>
    c8d4:	4628      	mov	r0, r5
    c8d6:	bd38      	pop	{r3, r4, r5, pc}
    c8d8:	200008ac 	.word	0x200008ac
    c8dc:	200008b0 	.word	0x200008b0
    c8e0:	20007d72 	.word	0x20007d72
    c8e4:	200008b8 	.word	0x200008b8

0000c8e8 <fiprintf>:
    c8e8:	b40e      	push	{r1, r2, r3}
    c8ea:	b510      	push	{r4, lr}
    c8ec:	b083      	sub	sp, #12
    c8ee:	ab05      	add	r3, sp, #20
    c8f0:	4c06      	ldr	r4, [pc, #24]	; (c90c <fiprintf+0x24>)
    c8f2:	f853 2b04 	ldr.w	r2, [r3], #4
    c8f6:	9301      	str	r3, [sp, #4]
    c8f8:	4601      	mov	r1, r0
    c8fa:	6820      	ldr	r0, [r4, #0]
    c8fc:	f000 f97c 	bl	cbf8 <_vfiprintf_r>
    c900:	b003      	add	sp, #12
    c902:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c906:	b003      	add	sp, #12
    c908:	4770      	bx	lr
    c90a:	bf00      	nop
    c90c:	200081d0 	.word	0x200081d0

0000c910 <__ssprint_r>:
    c910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c914:	6893      	ldr	r3, [r2, #8]
    c916:	6817      	ldr	r7, [r2, #0]
    c918:	b083      	sub	sp, #12
    c91a:	4692      	mov	sl, r2
    c91c:	2b00      	cmp	r3, #0
    c91e:	d070      	beq.n	ca02 <__ssprint_r+0xf2>
    c920:	4681      	mov	r9, r0
    c922:	688a      	ldr	r2, [r1, #8]
    c924:	6808      	ldr	r0, [r1, #0]
    c926:	460c      	mov	r4, r1
    c928:	3708      	adds	r7, #8
    c92a:	e043      	b.n	c9b4 <__ssprint_r+0xa4>
    c92c:	89a3      	ldrh	r3, [r4, #12]
    c92e:	f413 6f90 	tst.w	r3, #1152	; 0x480
    c932:	d02e      	beq.n	c992 <__ssprint_r+0x82>
    c934:	e9d4 1604 	ldrd	r1, r6, [r4, #16]
    c938:	eba0 0801 	sub.w	r8, r0, r1
    c93c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    c940:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
    c944:	f108 0001 	add.w	r0, r8, #1
    c948:	1076      	asrs	r6, r6, #1
    c94a:	4428      	add	r0, r5
    c94c:	42b0      	cmp	r0, r6
    c94e:	4632      	mov	r2, r6
    c950:	bf84      	itt	hi
    c952:	4606      	movhi	r6, r0
    c954:	4632      	movhi	r2, r6
    c956:	055b      	lsls	r3, r3, #21
    c958:	d537      	bpl.n	c9ca <__ssprint_r+0xba>
    c95a:	4611      	mov	r1, r2
    c95c:	4648      	mov	r0, r9
    c95e:	f7f7 fa83 	bl	3e68 <_malloc_r>
    c962:	9001      	str	r0, [sp, #4]
    c964:	2800      	cmp	r0, #0
    c966:	d03a      	beq.n	c9de <__ssprint_r+0xce>
    c968:	4642      	mov	r2, r8
    c96a:	6921      	ldr	r1, [r4, #16]
    c96c:	f7f5 fb50 	bl	2010 <memcpy>
    c970:	89a2      	ldrh	r2, [r4, #12]
    c972:	9b01      	ldr	r3, [sp, #4]
    c974:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
    c978:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    c97c:	81a2      	strh	r2, [r4, #12]
    c97e:	eba6 0208 	sub.w	r2, r6, r8
    c982:	eb03 0008 	add.w	r0, r3, r8
    c986:	6166      	str	r6, [r4, #20]
    c988:	60a2      	str	r2, [r4, #8]
    c98a:	6123      	str	r3, [r4, #16]
    c98c:	6020      	str	r0, [r4, #0]
    c98e:	462e      	mov	r6, r5
    c990:	46a8      	mov	r8, r5
    c992:	4642      	mov	r2, r8
    c994:	4659      	mov	r1, fp
    c996:	f7f9 f90b 	bl	5bb0 <memmove>
    c99a:	f8da 3008 	ldr.w	r3, [sl, #8]
    c99e:	68a2      	ldr	r2, [r4, #8]
    c9a0:	6820      	ldr	r0, [r4, #0]
    c9a2:	1b92      	subs	r2, r2, r6
    c9a4:	4440      	add	r0, r8
    c9a6:	1b5b      	subs	r3, r3, r5
    c9a8:	60a2      	str	r2, [r4, #8]
    c9aa:	6020      	str	r0, [r4, #0]
    c9ac:	f8ca 3008 	str.w	r3, [sl, #8]
    c9b0:	b33b      	cbz	r3, ca02 <__ssprint_r+0xf2>
    c9b2:	3708      	adds	r7, #8
    c9b4:	e957 b502 	ldrd	fp, r5, [r7, #-8]
    c9b8:	2d00      	cmp	r5, #0
    c9ba:	d0fa      	beq.n	c9b2 <__ssprint_r+0xa2>
    c9bc:	42aa      	cmp	r2, r5
    c9be:	4616      	mov	r6, r2
    c9c0:	4690      	mov	r8, r2
    c9c2:	d9b3      	bls.n	c92c <__ssprint_r+0x1c>
    c9c4:	462e      	mov	r6, r5
    c9c6:	46a8      	mov	r8, r5
    c9c8:	e7e3      	b.n	c992 <__ssprint_r+0x82>
    c9ca:	4648      	mov	r0, r9
    c9cc:	f7f7 fd14 	bl	43f8 <_realloc_r>
    c9d0:	4603      	mov	r3, r0
    c9d2:	2800      	cmp	r0, #0
    c9d4:	d1d3      	bne.n	c97e <__ssprint_r+0x6e>
    c9d6:	6921      	ldr	r1, [r4, #16]
    c9d8:	4648      	mov	r0, r9
    c9da:	f7f9 fe23 	bl	6624 <_free_r>
    c9de:	89a3      	ldrh	r3, [r4, #12]
    c9e0:	220c      	movs	r2, #12
    c9e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c9e6:	f8c9 2000 	str.w	r2, [r9]
    c9ea:	f04f 30ff 	mov.w	r0, #4294967295
    c9ee:	81a3      	strh	r3, [r4, #12]
    c9f0:	2200      	movs	r2, #0
    c9f2:	2300      	movs	r3, #0
    c9f4:	f8ca 2008 	str.w	r2, [sl, #8]
    c9f8:	f8ca 3004 	str.w	r3, [sl, #4]
    c9fc:	b003      	add	sp, #12
    c9fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ca02:	2000      	movs	r0, #0
    ca04:	2300      	movs	r3, #0
    ca06:	f8ca 3004 	str.w	r3, [sl, #4]
    ca0a:	b003      	add	sp, #12
    ca0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000ca10 <_sungetc_r>:
    ca10:	b538      	push	{r3, r4, r5, lr}
    ca12:	1c4b      	adds	r3, r1, #1
    ca14:	d01a      	beq.n	ca4c <_sungetc_r+0x3c>
    ca16:	8993      	ldrh	r3, [r2, #12]
    ca18:	4614      	mov	r4, r2
    ca1a:	6b12      	ldr	r2, [r2, #48]	; 0x30
    ca1c:	f023 0320 	bic.w	r3, r3, #32
    ca20:	81a3      	strh	r3, [r4, #12]
    ca22:	b2cd      	uxtb	r5, r1
    ca24:	b1aa      	cbz	r2, ca52 <_sungetc_r+0x42>
    ca26:	6862      	ldr	r2, [r4, #4]
    ca28:	6b63      	ldr	r3, [r4, #52]	; 0x34
    ca2a:	429a      	cmp	r2, r3
    ca2c:	da09      	bge.n	ca42 <_sungetc_r+0x32>
    ca2e:	6823      	ldr	r3, [r4, #0]
    ca30:	1e5a      	subs	r2, r3, #1
    ca32:	6022      	str	r2, [r4, #0]
    ca34:	f803 5c01 	strb.w	r5, [r3, #-1]
    ca38:	6863      	ldr	r3, [r4, #4]
    ca3a:	3301      	adds	r3, #1
    ca3c:	6063      	str	r3, [r4, #4]
    ca3e:	4628      	mov	r0, r5
    ca40:	bd38      	pop	{r3, r4, r5, pc}
    ca42:	4621      	mov	r1, r4
    ca44:	f001 fa58 	bl	def8 <__submore>
    ca48:	2800      	cmp	r0, #0
    ca4a:	d0f0      	beq.n	ca2e <_sungetc_r+0x1e>
    ca4c:	f04f 35ff 	mov.w	r5, #4294967295
    ca50:	e7f5      	b.n	ca3e <_sungetc_r+0x2e>
    ca52:	6923      	ldr	r3, [r4, #16]
    ca54:	6822      	ldr	r2, [r4, #0]
    ca56:	b12b      	cbz	r3, ca64 <_sungetc_r+0x54>
    ca58:	4293      	cmp	r3, r2
    ca5a:	d203      	bcs.n	ca64 <_sungetc_r+0x54>
    ca5c:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    ca60:	42ab      	cmp	r3, r5
    ca62:	d00f      	beq.n	ca84 <_sungetc_r+0x74>
    ca64:	6861      	ldr	r1, [r4, #4]
    ca66:	63e1      	str	r1, [r4, #60]	; 0x3c
    ca68:	4623      	mov	r3, r4
    ca6a:	63a2      	str	r2, [r4, #56]	; 0x38
    ca6c:	f104 0140 	add.w	r1, r4, #64	; 0x40
    ca70:	2203      	movs	r2, #3
    ca72:	6362      	str	r2, [r4, #52]	; 0x34
    ca74:	6321      	str	r1, [r4, #48]	; 0x30
    ca76:	f803 5f42 	strb.w	r5, [r3, #66]!
    ca7a:	2201      	movs	r2, #1
    ca7c:	e9c4 3200 	strd	r3, r2, [r4]
    ca80:	4628      	mov	r0, r5
    ca82:	bd38      	pop	{r3, r4, r5, pc}
    ca84:	6863      	ldr	r3, [r4, #4]
    ca86:	3a01      	subs	r2, #1
    ca88:	3301      	adds	r3, #1
    ca8a:	e9c4 2300 	strd	r2, r3, [r4]
    ca8e:	e7d6      	b.n	ca3e <_sungetc_r+0x2e>

0000ca90 <__ssrefill_r>:
    ca90:	b510      	push	{r4, lr}
    ca92:	460c      	mov	r4, r1
    ca94:	6b09      	ldr	r1, [r1, #48]	; 0x30
    ca96:	b169      	cbz	r1, cab4 <__ssrefill_r+0x24>
    ca98:	f104 0340 	add.w	r3, r4, #64	; 0x40
    ca9c:	4299      	cmp	r1, r3
    ca9e:	d001      	beq.n	caa4 <__ssrefill_r+0x14>
    caa0:	f7f9 fdc0 	bl	6624 <_free_r>
    caa4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    caa6:	6063      	str	r3, [r4, #4]
    caa8:	2000      	movs	r0, #0
    caaa:	6320      	str	r0, [r4, #48]	; 0x30
    caac:	b113      	cbz	r3, cab4 <__ssrefill_r+0x24>
    caae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    cab0:	6023      	str	r3, [r4, #0]
    cab2:	bd10      	pop	{r4, pc}
    cab4:	89a3      	ldrh	r3, [r4, #12]
    cab6:	6921      	ldr	r1, [r4, #16]
    cab8:	2200      	movs	r2, #0
    caba:	f043 0320 	orr.w	r3, r3, #32
    cabe:	e9c4 1200 	strd	r1, r2, [r4]
    cac2:	81a3      	strh	r3, [r4, #12]
    cac4:	f04f 30ff 	mov.w	r0, #4294967295
    cac8:	bd10      	pop	{r4, pc}
    caca:	bf00      	nop

0000cacc <_sfread_r>:
    cacc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cad0:	b085      	sub	sp, #20
    cad2:	e9cd 3202 	strd	r3, r2, [sp, #8]
    cad6:	fb02 f303 	mul.w	r3, r2, r3
    cada:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    cadc:	9301      	str	r3, [sp, #4]
    cade:	b3a3      	cbz	r3, cb4a <_sfread_r+0x7e>
    cae0:	f8d4 a004 	ldr.w	sl, [r4, #4]
    cae4:	9b01      	ldr	r3, [sp, #4]
    cae6:	4553      	cmp	r3, sl
    cae8:	468b      	mov	fp, r1
    caea:	d946      	bls.n	cb7a <_sfread_r+0xae>
    caec:	46a0      	mov	r8, r4
    caee:	9d01      	ldr	r5, [sp, #4]
    caf0:	f858 1b40 	ldr.w	r1, [r8], #64
    caf4:	4607      	mov	r7, r0
    caf6:	2600      	movs	r6, #0
    caf8:	4652      	mov	r2, sl
    cafa:	4658      	mov	r0, fp
    cafc:	f7f5 fa88 	bl	2010 <memcpy>
    cb00:	6823      	ldr	r3, [r4, #0]
    cb02:	6b22      	ldr	r2, [r4, #48]	; 0x30
    cb04:	4453      	add	r3, sl
    cb06:	46a9      	mov	r9, r5
    cb08:	e9c4 3600 	strd	r3, r6, [r4]
    cb0c:	4611      	mov	r1, r2
    cb0e:	4638      	mov	r0, r7
    cb10:	44d3      	add	fp, sl
    cb12:	eba5 050a 	sub.w	r5, r5, sl
    cb16:	b1e2      	cbz	r2, cb52 <_sfread_r+0x86>
    cb18:	4542      	cmp	r2, r8
    cb1a:	d001      	beq.n	cb20 <_sfread_r+0x54>
    cb1c:	f7f9 fd82 	bl	6624 <_free_r>
    cb20:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    cb22:	6326      	str	r6, [r4, #48]	; 0x30
    cb24:	6063      	str	r3, [r4, #4]
    cb26:	b1a3      	cbz	r3, cb52 <_sfread_r+0x86>
    cb28:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    cb2a:	6021      	str	r1, [r4, #0]
    cb2c:	42ab      	cmp	r3, r5
    cb2e:	469a      	mov	sl, r3
    cb30:	d3e2      	bcc.n	caf8 <_sfread_r+0x2c>
    cb32:	9b02      	ldr	r3, [sp, #8]
    cb34:	9301      	str	r3, [sp, #4]
    cb36:	462a      	mov	r2, r5
    cb38:	4658      	mov	r0, fp
    cb3a:	f7f5 fa69 	bl	2010 <memcpy>
    cb3e:	e9d4 3200 	ldrd	r3, r2, [r4]
    cb42:	1b52      	subs	r2, r2, r5
    cb44:	442b      	add	r3, r5
    cb46:	e9c4 3200 	strd	r3, r2, [r4]
    cb4a:	9801      	ldr	r0, [sp, #4]
    cb4c:	b005      	add	sp, #20
    cb4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cb52:	9a01      	ldr	r2, [sp, #4]
    cb54:	9b03      	ldr	r3, [sp, #12]
    cb56:	4452      	add	r2, sl
    cb58:	eba2 0209 	sub.w	r2, r2, r9
    cb5c:	fbb2 f3f3 	udiv	r3, r2, r3
    cb60:	9301      	str	r3, [sp, #4]
    cb62:	89a3      	ldrh	r3, [r4, #12]
    cb64:	6922      	ldr	r2, [r4, #16]
    cb66:	9801      	ldr	r0, [sp, #4]
    cb68:	f043 0320 	orr.w	r3, r3, #32
    cb6c:	81a3      	strh	r3, [r4, #12]
    cb6e:	2300      	movs	r3, #0
    cb70:	e9c4 2300 	strd	r2, r3, [r4]
    cb74:	b005      	add	sp, #20
    cb76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cb7a:	6821      	ldr	r1, [r4, #0]
    cb7c:	461d      	mov	r5, r3
    cb7e:	e7d8      	b.n	cb32 <_sfread_r+0x66>

0000cb80 <__sprint_r.part.0>:
    cb80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cb84:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    cb86:	049c      	lsls	r4, r3, #18
    cb88:	4690      	mov	r8, r2
    cb8a:	d52d      	bpl.n	cbe8 <__sprint_r.part.0+0x68>
    cb8c:	6893      	ldr	r3, [r2, #8]
    cb8e:	6812      	ldr	r2, [r2, #0]
    cb90:	b343      	cbz	r3, cbe4 <__sprint_r.part.0+0x64>
    cb92:	468b      	mov	fp, r1
    cb94:	4606      	mov	r6, r0
    cb96:	f102 0908 	add.w	r9, r2, #8
    cb9a:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
    cb9e:	ea5f 079a 	movs.w	r7, sl, lsr #2
    cba2:	d015      	beq.n	cbd0 <__sprint_r.part.0+0x50>
    cba4:	3d04      	subs	r5, #4
    cba6:	2400      	movs	r4, #0
    cba8:	e001      	b.n	cbae <__sprint_r.part.0+0x2e>
    cbaa:	42a7      	cmp	r7, r4
    cbac:	d00e      	beq.n	cbcc <__sprint_r.part.0+0x4c>
    cbae:	f855 1f04 	ldr.w	r1, [r5, #4]!
    cbb2:	465a      	mov	r2, fp
    cbb4:	4630      	mov	r0, r6
    cbb6:	f001 fa97 	bl	e0e8 <_fputwc_r>
    cbba:	1c43      	adds	r3, r0, #1
    cbbc:	f104 0401 	add.w	r4, r4, #1
    cbc0:	d1f3      	bne.n	cbaa <__sprint_r.part.0+0x2a>
    cbc2:	2300      	movs	r3, #0
    cbc4:	e9c8 3301 	strd	r3, r3, [r8, #4]
    cbc8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cbcc:	f8d8 3008 	ldr.w	r3, [r8, #8]
    cbd0:	f02a 0a03 	bic.w	sl, sl, #3
    cbd4:	eba3 030a 	sub.w	r3, r3, sl
    cbd8:	f8c8 3008 	str.w	r3, [r8, #8]
    cbdc:	f109 0908 	add.w	r9, r9, #8
    cbe0:	2b00      	cmp	r3, #0
    cbe2:	d1da      	bne.n	cb9a <__sprint_r.part.0+0x1a>
    cbe4:	2000      	movs	r0, #0
    cbe6:	e7ec      	b.n	cbc2 <__sprint_r.part.0+0x42>
    cbe8:	f001 f80c 	bl	dc04 <__sfvwrite_r>
    cbec:	2300      	movs	r3, #0
    cbee:	e9c8 3301 	strd	r3, r3, [r8, #4]
    cbf2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cbf6:	bf00      	nop

0000cbf8 <_vfiprintf_r>:
    cbf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cbfc:	ed2d 8b02 	vpush	{d8}
    cc00:	b0c5      	sub	sp, #276	; 0x114
    cc02:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
    cc06:	4683      	mov	fp, r0
    cc08:	ee08 1a10 	vmov	s16, r1
    cc0c:	4616      	mov	r6, r2
    cc0e:	2100      	movs	r1, #0
    cc10:	2208      	movs	r2, #8
    cc12:	4650      	mov	r0, sl
    cc14:	461c      	mov	r4, r3
    cc16:	9307      	str	r3, [sp, #28]
    cc18:	f7f9 f846 	bl	5ca8 <memset>
    cc1c:	f1bb 0f00 	cmp.w	fp, #0
    cc20:	d004      	beq.n	cc2c <_vfiprintf_r+0x34>
    cc22:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
    cc26:	2b00      	cmp	r3, #0
    cc28:	f000 86a0 	beq.w	d96c <_vfiprintf_r+0xd74>
    cc2c:	ee18 2a10 	vmov	r2, s16
    cc30:	6e53      	ldr	r3, [r2, #100]	; 0x64
    cc32:	07db      	lsls	r3, r3, #31
    cc34:	f140 8513 	bpl.w	d65e <_vfiprintf_r+0xa66>
    cc38:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
    cc3c:	b28a      	uxth	r2, r1
    cc3e:	0495      	lsls	r5, r2, #18
    cc40:	d40b      	bmi.n	cc5a <_vfiprintf_r+0x62>
    cc42:	ee18 3a10 	vmov	r3, s16
    cc46:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
    cc4a:	8199      	strh	r1, [r3, #12]
    cc4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    cc4e:	b28a      	uxth	r2, r1
    cc50:	ee18 1a10 	vmov	r1, s16
    cc54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    cc58:	664b      	str	r3, [r1, #100]	; 0x64
    cc5a:	0710      	lsls	r0, r2, #28
    cc5c:	f140 8105 	bpl.w	ce6a <_vfiprintf_r+0x272>
    cc60:	ee18 3a10 	vmov	r3, s16
    cc64:	691b      	ldr	r3, [r3, #16]
    cc66:	2b00      	cmp	r3, #0
    cc68:	f000 80ff 	beq.w	ce6a <_vfiprintf_r+0x272>
    cc6c:	f002 031a 	and.w	r3, r2, #26
    cc70:	2b0a      	cmp	r3, #10
    cc72:	f000 810a 	beq.w	ce8a <_vfiprintf_r+0x292>
    cc76:	2300      	movs	r3, #0
    cc78:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
    cc7c:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
    cc80:	aa1b      	add	r2, sp, #108	; 0x6c
    cc82:	930c      	str	r3, [sp, #48]	; 0x30
    cc84:	9218      	str	r2, [sp, #96]	; 0x60
    cc86:	4691      	mov	r9, r2
    cc88:	930b      	str	r3, [sp, #44]	; 0x2c
    cc8a:	9305      	str	r3, [sp, #20]
    cc8c:	46b0      	mov	r8, r6
    cc8e:	4644      	mov	r4, r8
    cc90:	4ba8      	ldr	r3, [pc, #672]	; (cf34 <_vfiprintf_r+0x33c>)
    cc92:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    cc96:	f7f9 f937 	bl	5f08 <__locale_mb_cur_max>
    cc9a:	4622      	mov	r2, r4
    cc9c:	4603      	mov	r3, r0
    cc9e:	a912      	add	r1, sp, #72	; 0x48
    cca0:	f8cd a000 	str.w	sl, [sp]
    cca4:	4658      	mov	r0, fp
    cca6:	47a8      	blx	r5
    cca8:	2800      	cmp	r0, #0
    ccaa:	f000 8145 	beq.w	cf38 <_vfiprintf_r+0x340>
    ccae:	f2c0 8139 	blt.w	cf24 <_vfiprintf_r+0x32c>
    ccb2:	9a12      	ldr	r2, [sp, #72]	; 0x48
    ccb4:	2a25      	cmp	r2, #37	; 0x25
    ccb6:	4603      	mov	r3, r0
    ccb8:	d001      	beq.n	ccbe <_vfiprintf_r+0xc6>
    ccba:	441c      	add	r4, r3
    ccbc:	e7e8      	b.n	cc90 <_vfiprintf_r+0x98>
    ccbe:	ebb4 0608 	subs.w	r6, r4, r8
    ccc2:	4605      	mov	r5, r0
    ccc4:	f040 813c 	bne.w	cf40 <_vfiprintf_r+0x348>
    ccc8:	2300      	movs	r3, #0
    ccca:	7861      	ldrb	r1, [r4, #1]
    cccc:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    ccd0:	f104 0801 	add.w	r8, r4, #1
    ccd4:	9306      	str	r3, [sp, #24]
    ccd6:	f04f 37ff 	mov.w	r7, #4294967295
    ccda:	461e      	mov	r6, r3
    ccdc:	242b      	movs	r4, #43	; 0x2b
    ccde:	f108 0801 	add.w	r8, r8, #1
    cce2:	f1a1 0320 	sub.w	r3, r1, #32
    cce6:	2b5a      	cmp	r3, #90	; 0x5a
    cce8:	f200 8178 	bhi.w	cfdc <_vfiprintf_r+0x3e4>
    ccec:	e8df f013 	tbh	[pc, r3, lsl #1]
    ccf0:	017602b5 	.word	0x017602b5
    ccf4:	02b00176 	.word	0x02b00176
    ccf8:	01760176 	.word	0x01760176
    ccfc:	006a0176 	.word	0x006a0176
    cd00:	01760176 	.word	0x01760176
    cd04:	028d027d 	.word	0x028d027d
    cd08:	02880176 	.word	0x02880176
    cd0c:	01760297 	.word	0x01760297
    cd10:	005b0292 	.word	0x005b0292
    cd14:	005b005b 	.word	0x005b005b
    cd18:	005b005b 	.word	0x005b005b
    cd1c:	005b005b 	.word	0x005b005b
    cd20:	005b005b 	.word	0x005b005b
    cd24:	01760176 	.word	0x01760176
    cd28:	01760176 	.word	0x01760176
    cd2c:	01760176 	.word	0x01760176
    cd30:	01760176 	.word	0x01760176
    cd34:	025c0176 	.word	0x025c0176
    cd38:	01760084 	.word	0x01760084
    cd3c:	01760176 	.word	0x01760176
    cd40:	01760176 	.word	0x01760176
    cd44:	01760176 	.word	0x01760176
    cd48:	01760176 	.word	0x01760176
    cd4c:	00e80176 	.word	0x00e80176
    cd50:	01760176 	.word	0x01760176
    cd54:	02330176 	.word	0x02330176
    cd58:	02da0176 	.word	0x02da0176
    cd5c:	01760176 	.word	0x01760176
    cd60:	0176058b 	.word	0x0176058b
    cd64:	01760176 	.word	0x01760176
    cd68:	01760176 	.word	0x01760176
    cd6c:	01760176 	.word	0x01760176
    cd70:	01760176 	.word	0x01760176
    cd74:	025c0176 	.word	0x025c0176
    cd78:	01760086 	.word	0x01760086
    cd7c:	01760176 	.word	0x01760176
    cd80:	008602cd 	.word	0x008602cd
    cd84:	0176007f 	.word	0x0176007f
    cd88:	017602c0 	.word	0x017602c0
    cd8c:	00ea02fd 	.word	0x00ea02fd
    cd90:	007f02ed 	.word	0x007f02ed
    cd94:	02330176 	.word	0x02330176
    cd98:	0569007c 	.word	0x0569007c
    cd9c:	01760176 	.word	0x01760176
    cda0:	0176056b 	.word	0x0176056b
    cda4:	007c      	.short	0x007c
    cda6:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    cdaa:	2200      	movs	r2, #0
    cdac:	f818 1b01 	ldrb.w	r1, [r8], #1
    cdb0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    cdb4:	eb03 0242 	add.w	r2, r3, r2, lsl #1
    cdb8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    cdbc:	2b09      	cmp	r3, #9
    cdbe:	d9f5      	bls.n	cdac <_vfiprintf_r+0x1b4>
    cdc0:	9206      	str	r2, [sp, #24]
    cdc2:	e78e      	b.n	cce2 <_vfiprintf_r+0xea>
    cdc4:	4658      	mov	r0, fp
    cdc6:	f7fe fa29 	bl	b21c <_localeconv_r>
    cdca:	6843      	ldr	r3, [r0, #4]
    cdcc:	930d      	str	r3, [sp, #52]	; 0x34
    cdce:	4618      	mov	r0, r3
    cdd0:	f7f9 fb16 	bl	6400 <strlen>
    cdd4:	900e      	str	r0, [sp, #56]	; 0x38
    cdd6:	4605      	mov	r5, r0
    cdd8:	4658      	mov	r0, fp
    cdda:	f7fe fa1f 	bl	b21c <_localeconv_r>
    cdde:	6883      	ldr	r3, [r0, #8]
    cde0:	930b      	str	r3, [sp, #44]	; 0x2c
    cde2:	2d00      	cmp	r5, #0
    cde4:	f040 84d6 	bne.w	d794 <_vfiprintf_r+0xb9c>
    cde8:	f898 1000 	ldrb.w	r1, [r8]
    cdec:	e777      	b.n	ccde <_vfiprintf_r+0xe6>
    cdee:	f898 1000 	ldrb.w	r1, [r8]
    cdf2:	f046 0620 	orr.w	r6, r6, #32
    cdf6:	e772      	b.n	ccde <_vfiprintf_r+0xe6>
    cdf8:	f046 0610 	orr.w	r6, r6, #16
    cdfc:	06b4      	lsls	r4, r6, #26
    cdfe:	f140 818e 	bpl.w	d11e <_vfiprintf_r+0x526>
    ce02:	9b07      	ldr	r3, [sp, #28]
    ce04:	3307      	adds	r3, #7
    ce06:	f023 0307 	bic.w	r3, r3, #7
    ce0a:	461a      	mov	r2, r3
    ce0c:	6859      	ldr	r1, [r3, #4]
    ce0e:	f852 3b08 	ldr.w	r3, [r2], #8
    ce12:	9207      	str	r2, [sp, #28]
    ce14:	460a      	mov	r2, r1
    ce16:	2900      	cmp	r1, #0
    ce18:	f2c0 8470 	blt.w	d6fc <_vfiprintf_r+0xb04>
    ce1c:	1c79      	adds	r1, r7, #1
    ce1e:	f000 85a2 	beq.w	d966 <_vfiprintf_r+0xd6e>
    ce22:	f026 0180 	bic.w	r1, r6, #128	; 0x80
    ce26:	9103      	str	r1, [sp, #12]
    ce28:	ea53 0102 	orrs.w	r1, r3, r2
    ce2c:	f000 843f 	beq.w	d6ae <_vfiprintf_r+0xab6>
    ce30:	2b0a      	cmp	r3, #10
    ce32:	f172 0100 	sbcs.w	r1, r2, #0
    ce36:	f080 8541 	bcs.w	d8bc <_vfiprintf_r+0xcc4>
    ce3a:	3330      	adds	r3, #48	; 0x30
    ce3c:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
    ce40:	9e03      	ldr	r6, [sp, #12]
    ce42:	2301      	movs	r3, #1
    ce44:	9304      	str	r3, [sp, #16]
    ce46:	f20d 140f 	addw	r4, sp, #271	; 0x10f
    ce4a:	9b04      	ldr	r3, [sp, #16]
    ce4c:	42bb      	cmp	r3, r7
    ce4e:	bfb8      	it	lt
    ce50:	463b      	movlt	r3, r7
    ce52:	9303      	str	r3, [sp, #12]
    ce54:	2300      	movs	r3, #0
    ce56:	9308      	str	r3, [sp, #32]
    ce58:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    ce5c:	2b00      	cmp	r3, #0
    ce5e:	f000 80cb 	beq.w	cff8 <_vfiprintf_r+0x400>
    ce62:	9b03      	ldr	r3, [sp, #12]
    ce64:	3301      	adds	r3, #1
    ce66:	9303      	str	r3, [sp, #12]
    ce68:	e0c6      	b.n	cff8 <_vfiprintf_r+0x400>
    ce6a:	ee18 1a10 	vmov	r1, s16
    ce6e:	4658      	mov	r0, fp
    ce70:	ee18 5a10 	vmov	r5, s16
    ce74:	f001 f87c 	bl	df70 <__swsetup_r>
    ce78:	2800      	cmp	r0, #0
    ce7a:	f040 8652 	bne.w	db22 <_vfiprintf_r+0xf2a>
    ce7e:	89aa      	ldrh	r2, [r5, #12]
    ce80:	f002 031a 	and.w	r3, r2, #26
    ce84:	2b0a      	cmp	r3, #10
    ce86:	f47f aef6 	bne.w	cc76 <_vfiprintf_r+0x7e>
    ce8a:	ee18 1a10 	vmov	r1, s16
    ce8e:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
    ce92:	2b00      	cmp	r3, #0
    ce94:	f6ff aeef 	blt.w	cc76 <_vfiprintf_r+0x7e>
    ce98:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    ce9a:	07db      	lsls	r3, r3, #31
    ce9c:	d402      	bmi.n	cea4 <_vfiprintf_r+0x2ac>
    ce9e:	0597      	lsls	r7, r2, #22
    cea0:	f140 8612 	bpl.w	dac8 <_vfiprintf_r+0xed0>
    cea4:	ee18 1a10 	vmov	r1, s16
    cea8:	4623      	mov	r3, r4
    ceaa:	4632      	mov	r2, r6
    ceac:	4658      	mov	r0, fp
    ceae:	f000 fe69 	bl	db84 <__sbprintf>
    ceb2:	9005      	str	r0, [sp, #20]
    ceb4:	9805      	ldr	r0, [sp, #20]
    ceb6:	b045      	add	sp, #276	; 0x114
    ceb8:	ecbd 8b02 	vpop	{d8}
    cebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cec0:	f046 0610 	orr.w	r6, r6, #16
    cec4:	f016 0220 	ands.w	r2, r6, #32
    cec8:	f000 8136 	beq.w	d138 <_vfiprintf_r+0x540>
    cecc:	9b07      	ldr	r3, [sp, #28]
    cece:	3307      	adds	r3, #7
    ced0:	f023 0307 	bic.w	r3, r3, #7
    ced4:	4619      	mov	r1, r3
    ced6:	685a      	ldr	r2, [r3, #4]
    ced8:	f851 3b08 	ldr.w	r3, [r1], #8
    cedc:	9107      	str	r1, [sp, #28]
    cede:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
    cee2:	9103      	str	r1, [sp, #12]
    cee4:	2100      	movs	r1, #0
    cee6:	2000      	movs	r0, #0
    cee8:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
    ceec:	1c78      	adds	r0, r7, #1
    ceee:	f000 8210 	beq.w	d312 <_vfiprintf_r+0x71a>
    cef2:	9803      	ldr	r0, [sp, #12]
    cef4:	f020 0680 	bic.w	r6, r0, #128	; 0x80
    cef8:	ea53 0002 	orrs.w	r0, r3, r2
    cefc:	f040 8208 	bne.w	d310 <_vfiprintf_r+0x718>
    cf00:	2f00      	cmp	r7, #0
    cf02:	f040 8538 	bne.w	d976 <_vfiprintf_r+0xd7e>
    cf06:	2900      	cmp	r1, #0
    cf08:	f040 83d5 	bne.w	d6b6 <_vfiprintf_r+0xabe>
    cf0c:	9b03      	ldr	r3, [sp, #12]
    cf0e:	f013 0301 	ands.w	r3, r3, #1
    cf12:	9304      	str	r3, [sp, #16]
    cf14:	f000 8411 	beq.w	d73a <_vfiprintf_r+0xb42>
    cf18:	2330      	movs	r3, #48	; 0x30
    cf1a:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
    cf1e:	f20d 140f 	addw	r4, sp, #271	; 0x10f
    cf22:	e792      	b.n	ce4a <_vfiprintf_r+0x252>
    cf24:	2208      	movs	r2, #8
    cf26:	2100      	movs	r1, #0
    cf28:	4650      	mov	r0, sl
    cf2a:	f7f8 febd 	bl	5ca8 <memset>
    cf2e:	2301      	movs	r3, #1
    cf30:	441c      	add	r4, r3
    cf32:	e6ad      	b.n	cc90 <_vfiprintf_r+0x98>
    cf34:	20007c48 	.word	0x20007c48
    cf38:	ebb4 0608 	subs.w	r6, r4, r8
    cf3c:	4605      	mov	r5, r0
    cf3e:	d01b      	beq.n	cf78 <_vfiprintf_r+0x380>
    cf40:	9b19      	ldr	r3, [sp, #100]	; 0x64
    cf42:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    cf44:	3301      	adds	r3, #1
    cf46:	4432      	add	r2, r6
    cf48:	2b07      	cmp	r3, #7
    cf4a:	e9c9 8600 	strd	r8, r6, [r9]
    cf4e:	921a      	str	r2, [sp, #104]	; 0x68
    cf50:	9319      	str	r3, [sp, #100]	; 0x64
    cf52:	dd1c      	ble.n	cf8e <_vfiprintf_r+0x396>
    cf54:	2a00      	cmp	r2, #0
    cf56:	f000 83a6 	beq.w	d6a6 <_vfiprintf_r+0xaae>
    cf5a:	ee18 1a10 	vmov	r1, s16
    cf5e:	aa18      	add	r2, sp, #96	; 0x60
    cf60:	4658      	mov	r0, fp
    cf62:	f7ff fe0d 	bl	cb80 <__sprint_r.part.0>
    cf66:	bb20      	cbnz	r0, cfb2 <_vfiprintf_r+0x3ba>
    cf68:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    cf6c:	9b05      	ldr	r3, [sp, #20]
    cf6e:	4433      	add	r3, r6
    cf70:	9305      	str	r3, [sp, #20]
    cf72:	2d00      	cmp	r5, #0
    cf74:	f47f aea8 	bne.w	ccc8 <_vfiprintf_r+0xd0>
    cf78:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    cf7a:	2b00      	cmp	r3, #0
    cf7c:	f040 85c1 	bne.w	db02 <_vfiprintf_r+0xf0a>
    cf80:	ee18 3a10 	vmov	r3, s16
    cf84:	2200      	movs	r2, #0
    cf86:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    cf8a:	9219      	str	r2, [sp, #100]	; 0x64
    cf8c:	e015      	b.n	cfba <_vfiprintf_r+0x3c2>
    cf8e:	f109 0908 	add.w	r9, r9, #8
    cf92:	e7eb      	b.n	cf6c <_vfiprintf_r+0x374>
    cf94:	ee18 1a10 	vmov	r1, s16
    cf98:	aa18      	add	r2, sp, #96	; 0x60
    cf9a:	4658      	mov	r0, fp
    cf9c:	f7ff fdf0 	bl	cb80 <__sprint_r.part.0>
    cfa0:	2800      	cmp	r0, #0
    cfa2:	f000 80a6 	beq.w	d0f2 <_vfiprintf_r+0x4fa>
    cfa6:	9b08      	ldr	r3, [sp, #32]
    cfa8:	b11b      	cbz	r3, cfb2 <_vfiprintf_r+0x3ba>
    cfaa:	9908      	ldr	r1, [sp, #32]
    cfac:	4658      	mov	r0, fp
    cfae:	f7f9 fb39 	bl	6624 <_free_r>
    cfb2:	ee18 3a10 	vmov	r3, s16
    cfb6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    cfba:	ee18 2a10 	vmov	r2, s16
    cfbe:	6e52      	ldr	r2, [r2, #100]	; 0x64
    cfc0:	f012 0f01 	tst.w	r2, #1
    cfc4:	b29a      	uxth	r2, r3
    cfc6:	f000 80a0 	beq.w	d10a <_vfiprintf_r+0x512>
    cfca:	0650      	lsls	r0, r2, #25
    cfcc:	f100 85b2 	bmi.w	db34 <_vfiprintf_r+0xf3c>
    cfd0:	9805      	ldr	r0, [sp, #20]
    cfd2:	b045      	add	sp, #276	; 0x114
    cfd4:	ecbd 8b02 	vpop	{d8}
    cfd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cfdc:	2900      	cmp	r1, #0
    cfde:	d0cb      	beq.n	cf78 <_vfiprintf_r+0x380>
    cfe0:	2300      	movs	r3, #0
    cfe2:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    cfe6:	2301      	movs	r3, #1
    cfe8:	e9cd 3303 	strd	r3, r3, [sp, #12]
    cfec:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
    cff0:	ac2b      	add	r4, sp, #172	; 0xac
    cff2:	2300      	movs	r3, #0
    cff4:	9308      	str	r3, [sp, #32]
    cff6:	461f      	mov	r7, r3
    cff8:	f016 0302 	ands.w	r3, r6, #2
    cffc:	9309      	str	r3, [sp, #36]	; 0x24
    cffe:	d002      	beq.n	d006 <_vfiprintf_r+0x40e>
    d000:	9b03      	ldr	r3, [sp, #12]
    d002:	3302      	adds	r3, #2
    d004:	9303      	str	r3, [sp, #12]
    d006:	f016 0384 	ands.w	r3, r6, #132	; 0x84
    d00a:	930a      	str	r3, [sp, #40]	; 0x28
    d00c:	d105      	bne.n	d01a <_vfiprintf_r+0x422>
    d00e:	9b06      	ldr	r3, [sp, #24]
    d010:	9a03      	ldr	r2, [sp, #12]
    d012:	1a9d      	subs	r5, r3, r2
    d014:	2d00      	cmp	r5, #0
    d016:	f300 827b 	bgt.w	d510 <_vfiprintf_r+0x918>
    d01a:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    d01e:	1c41      	adds	r1, r0, #1
    d020:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
    d024:	b182      	cbz	r2, d048 <_vfiprintf_r+0x450>
    d026:	2201      	movs	r2, #1
    d028:	3301      	adds	r3, #1
    d02a:	f8c9 2004 	str.w	r2, [r9, #4]
    d02e:	2907      	cmp	r1, #7
    d030:	f10d 0243 	add.w	r2, sp, #67	; 0x43
    d034:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    d038:	f8c9 2000 	str.w	r2, [r9]
    d03c:	f300 824a 	bgt.w	d4d4 <_vfiprintf_r+0x8dc>
    d040:	4608      	mov	r0, r1
    d042:	f109 0908 	add.w	r9, r9, #8
    d046:	3101      	adds	r1, #1
    d048:	9a09      	ldr	r2, [sp, #36]	; 0x24
    d04a:	b1e2      	cbz	r2, d086 <_vfiprintf_r+0x48e>
    d04c:	aa11      	add	r2, sp, #68	; 0x44
    d04e:	3302      	adds	r3, #2
    d050:	f8c9 2000 	str.w	r2, [r9]
    d054:	2907      	cmp	r1, #7
    d056:	f04f 0202 	mov.w	r2, #2
    d05a:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    d05e:	f8c9 2004 	str.w	r2, [r9, #4]
    d062:	f340 8250 	ble.w	d506 <_vfiprintf_r+0x90e>
    d066:	2b00      	cmp	r3, #0
    d068:	f000 8343 	beq.w	d6f2 <_vfiprintf_r+0xafa>
    d06c:	ee18 1a10 	vmov	r1, s16
    d070:	aa18      	add	r2, sp, #96	; 0x60
    d072:	4658      	mov	r0, fp
    d074:	f7ff fd84 	bl	cb80 <__sprint_r.part.0>
    d078:	2800      	cmp	r0, #0
    d07a:	d194      	bne.n	cfa6 <_vfiprintf_r+0x3ae>
    d07c:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    d080:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d084:	1c41      	adds	r1, r0, #1
    d086:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    d088:	2a80      	cmp	r2, #128	; 0x80
    d08a:	f000 8184 	beq.w	d396 <_vfiprintf_r+0x79e>
    d08e:	9a04      	ldr	r2, [sp, #16]
    d090:	1abd      	subs	r5, r7, r2
    d092:	2d00      	cmp	r5, #0
    d094:	f300 81d7 	bgt.w	d446 <_vfiprintf_r+0x84e>
    d098:	9a04      	ldr	r2, [sp, #16]
    d09a:	f8c9 4000 	str.w	r4, [r9]
    d09e:	4413      	add	r3, r2
    d0a0:	2907      	cmp	r1, #7
    d0a2:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    d0a6:	f8c9 2004 	str.w	r2, [r9, #4]
    d0aa:	f340 816e 	ble.w	d38a <_vfiprintf_r+0x792>
    d0ae:	2b00      	cmp	r3, #0
    d0b0:	f000 8275 	beq.w	d59e <_vfiprintf_r+0x9a6>
    d0b4:	ee18 1a10 	vmov	r1, s16
    d0b8:	aa18      	add	r2, sp, #96	; 0x60
    d0ba:	4658      	mov	r0, fp
    d0bc:	f7ff fd60 	bl	cb80 <__sprint_r.part.0>
    d0c0:	2800      	cmp	r0, #0
    d0c2:	f47f af70 	bne.w	cfa6 <_vfiprintf_r+0x3ae>
    d0c6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    d0c8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d0cc:	0775      	lsls	r5, r6, #29
    d0ce:	d505      	bpl.n	d0dc <_vfiprintf_r+0x4e4>
    d0d0:	9a06      	ldr	r2, [sp, #24]
    d0d2:	9903      	ldr	r1, [sp, #12]
    d0d4:	1a54      	subs	r4, r2, r1
    d0d6:	2c00      	cmp	r4, #0
    d0d8:	f300 826b 	bgt.w	d5b2 <_vfiprintf_r+0x9ba>
    d0dc:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
    d0e0:	9803      	ldr	r0, [sp, #12]
    d0e2:	4281      	cmp	r1, r0
    d0e4:	bfac      	ite	ge
    d0e6:	1852      	addge	r2, r2, r1
    d0e8:	1812      	addlt	r2, r2, r0
    d0ea:	9205      	str	r2, [sp, #20]
    d0ec:	2b00      	cmp	r3, #0
    d0ee:	f47f af51 	bne.w	cf94 <_vfiprintf_r+0x39c>
    d0f2:	9908      	ldr	r1, [sp, #32]
    d0f4:	2300      	movs	r3, #0
    d0f6:	9319      	str	r3, [sp, #100]	; 0x64
    d0f8:	2900      	cmp	r1, #0
    d0fa:	f000 8149 	beq.w	d390 <_vfiprintf_r+0x798>
    d0fe:	4658      	mov	r0, fp
    d100:	f7f9 fa90 	bl	6624 <_free_r>
    d104:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d108:	e5c1      	b.n	cc8e <_vfiprintf_r+0x96>
    d10a:	059c      	lsls	r4, r3, #22
    d10c:	f53f af5d 	bmi.w	cfca <_vfiprintf_r+0x3d2>
    d110:	ee18 4a10 	vmov	r4, s16
    d114:	6da0      	ldr	r0, [r4, #88]	; 0x58
    d116:	f7f8 ff93 	bl	6040 <__retarget_lock_release_recursive>
    d11a:	89a2      	ldrh	r2, [r4, #12]
    d11c:	e755      	b.n	cfca <_vfiprintf_r+0x3d2>
    d11e:	06f0      	lsls	r0, r6, #27
    d120:	9a07      	ldr	r2, [sp, #28]
    d122:	f100 831f 	bmi.w	d764 <_vfiprintf_r+0xb6c>
    d126:	0671      	lsls	r1, r6, #25
    d128:	f140 8319 	bpl.w	d75e <_vfiprintf_r+0xb66>
    d12c:	f932 3b04 	ldrsh.w	r3, [r2], #4
    d130:	9207      	str	r2, [sp, #28]
    d132:	17da      	asrs	r2, r3, #31
    d134:	4611      	mov	r1, r2
    d136:	e66e      	b.n	ce16 <_vfiprintf_r+0x21e>
    d138:	f016 0310 	ands.w	r3, r6, #16
    d13c:	9907      	ldr	r1, [sp, #28]
    d13e:	f040 8309 	bne.w	d754 <_vfiprintf_r+0xb5c>
    d142:	f016 0040 	ands.w	r0, r6, #64	; 0x40
    d146:	f000 8301 	beq.w	d74c <_vfiprintf_r+0xb54>
    d14a:	461a      	mov	r2, r3
    d14c:	f851 3b04 	ldr.w	r3, [r1], #4
    d150:	9107      	str	r1, [sp, #28]
    d152:	b29b      	uxth	r3, r3
    d154:	e6c3      	b.n	cede <_vfiprintf_r+0x2e6>
    d156:	9b07      	ldr	r3, [sp, #28]
    d158:	461a      	mov	r2, r3
    d15a:	2300      	movs	r3, #0
    d15c:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    d160:	4613      	mov	r3, r2
    d162:	f853 4b04 	ldr.w	r4, [r3], #4
    d166:	9303      	str	r3, [sp, #12]
    d168:	2c00      	cmp	r4, #0
    d16a:	f000 8412 	beq.w	d992 <_vfiprintf_r+0xd9a>
    d16e:	2953      	cmp	r1, #83	; 0x53
    d170:	f000 8365 	beq.w	d83e <_vfiprintf_r+0xc46>
    d174:	f016 0510 	ands.w	r5, r6, #16
    d178:	f040 8361 	bne.w	d83e <_vfiprintf_r+0xc46>
    d17c:	1c7b      	adds	r3, r7, #1
    d17e:	f000 84b3 	beq.w	dae8 <_vfiprintf_r+0xef0>
    d182:	463a      	mov	r2, r7
    d184:	4629      	mov	r1, r5
    d186:	4620      	mov	r0, r4
    d188:	f7fe f852 	bl	b230 <memchr>
    d18c:	9008      	str	r0, [sp, #32]
    d18e:	2800      	cmp	r0, #0
    d190:	f000 849f 	beq.w	dad2 <_vfiprintf_r+0xeda>
    d194:	1b03      	subs	r3, r0, r4
    d196:	9a03      	ldr	r2, [sp, #12]
    d198:	9304      	str	r3, [sp, #16]
    d19a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    d19e:	462f      	mov	r7, r5
    d1a0:	9207      	str	r2, [sp, #28]
    d1a2:	9303      	str	r3, [sp, #12]
    d1a4:	9508      	str	r5, [sp, #32]
    d1a6:	e657      	b.n	ce58 <_vfiprintf_r+0x260>
    d1a8:	2943      	cmp	r1, #67	; 0x43
    d1aa:	d002      	beq.n	d1b2 <_vfiprintf_r+0x5ba>
    d1ac:	06f5      	lsls	r5, r6, #27
    d1ae:	f140 832d 	bpl.w	d80c <_vfiprintf_r+0xc14>
    d1b2:	9d07      	ldr	r5, [sp, #28]
    d1b4:	2208      	movs	r2, #8
    d1b6:	2100      	movs	r1, #0
    d1b8:	a816      	add	r0, sp, #88	; 0x58
    d1ba:	ac2b      	add	r4, sp, #172	; 0xac
    d1bc:	f7f8 fd74 	bl	5ca8 <memset>
    d1c0:	ab16      	add	r3, sp, #88	; 0x58
    d1c2:	f855 2b04 	ldr.w	r2, [r5], #4
    d1c6:	4621      	mov	r1, r4
    d1c8:	4658      	mov	r0, fp
    d1ca:	f7ff fa77 	bl	c6bc <_wcrtomb_r>
    d1ce:	4603      	mov	r3, r0
    d1d0:	3301      	adds	r3, #1
    d1d2:	9004      	str	r0, [sp, #16]
    d1d4:	f000 84b3 	beq.w	db3e <_vfiprintf_r+0xf46>
    d1d8:	9b04      	ldr	r3, [sp, #16]
    d1da:	9507      	str	r5, [sp, #28]
    d1dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    d1e0:	9303      	str	r3, [sp, #12]
    d1e2:	2300      	movs	r3, #0
    d1e4:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    d1e8:	e703      	b.n	cff2 <_vfiprintf_r+0x3fa>
    d1ea:	9b07      	ldr	r3, [sp, #28]
    d1ec:	f853 2b04 	ldr.w	r2, [r3], #4
    d1f0:	9206      	str	r2, [sp, #24]
    d1f2:	2a00      	cmp	r2, #0
    d1f4:	f280 829c 	bge.w	d730 <_vfiprintf_r+0xb38>
    d1f8:	9a06      	ldr	r2, [sp, #24]
    d1fa:	4252      	negs	r2, r2
    d1fc:	e9cd 2306 	strd	r2, r3, [sp, #24]
    d200:	f898 1000 	ldrb.w	r1, [r8]
    d204:	f046 0604 	orr.w	r6, r6, #4
    d208:	e569      	b.n	ccde <_vfiprintf_r+0xe6>
    d20a:	f898 1000 	ldrb.w	r1, [r8]
    d20e:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
    d212:	e564      	b.n	ccde <_vfiprintf_r+0xe6>
    d214:	f898 1000 	ldrb.w	r1, [r8]
    d218:	f046 0680 	orr.w	r6, r6, #128	; 0x80
    d21c:	e55f      	b.n	ccde <_vfiprintf_r+0xe6>
    d21e:	4642      	mov	r2, r8
    d220:	f812 1b01 	ldrb.w	r1, [r2], #1
    d224:	292a      	cmp	r1, #42	; 0x2a
    d226:	f000 8496 	beq.w	db56 <_vfiprintf_r+0xf5e>
    d22a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    d22e:	2b09      	cmp	r3, #9
    d230:	4690      	mov	r8, r2
    d232:	f04f 0700 	mov.w	r7, #0
    d236:	f63f ad54 	bhi.w	cce2 <_vfiprintf_r+0xea>
    d23a:	f818 1b01 	ldrb.w	r1, [r8], #1
    d23e:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    d242:	eb03 0747 	add.w	r7, r3, r7, lsl #1
    d246:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    d24a:	2b09      	cmp	r3, #9
    d24c:	d9f5      	bls.n	d23a <_vfiprintf_r+0x642>
    d24e:	e548      	b.n	cce2 <_vfiprintf_r+0xea>
    d250:	f898 1000 	ldrb.w	r1, [r8]
    d254:	f046 0601 	orr.w	r6, r6, #1
    d258:	e541      	b.n	ccde <_vfiprintf_r+0xe6>
    d25a:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    d25e:	2b00      	cmp	r3, #0
    d260:	f47f adc2 	bne.w	cde8 <_vfiprintf_r+0x1f0>
    d264:	2320      	movs	r3, #32
    d266:	f898 1000 	ldrb.w	r1, [r8]
    d26a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    d26e:	e536      	b.n	ccde <_vfiprintf_r+0xe6>
    d270:	f898 1000 	ldrb.w	r1, [r8]
    d274:	296c      	cmp	r1, #108	; 0x6c
    d276:	bf03      	ittte	eq
    d278:	f898 1001 	ldrbeq.w	r1, [r8, #1]
    d27c:	f046 0620 	orreq.w	r6, r6, #32
    d280:	f108 0801 	addeq.w	r8, r8, #1
    d284:	f046 0610 	orrne.w	r6, r6, #16
    d288:	e529      	b.n	ccde <_vfiprintf_r+0xe6>
    d28a:	f898 1000 	ldrb.w	r1, [r8]
    d28e:	2968      	cmp	r1, #104	; 0x68
    d290:	bf03      	ittte	eq
    d292:	f898 1001 	ldrbeq.w	r1, [r8, #1]
    d296:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
    d29a:	f108 0801 	addeq.w	r8, r8, #1
    d29e:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
    d2a2:	e51c      	b.n	ccde <_vfiprintf_r+0xe6>
    d2a4:	f046 0310 	orr.w	r3, r6, #16
    d2a8:	9303      	str	r3, [sp, #12]
    d2aa:	9b03      	ldr	r3, [sp, #12]
    d2ac:	f013 0220 	ands.w	r2, r3, #32
    d2b0:	f000 8206 	beq.w	d6c0 <_vfiprintf_r+0xac8>
    d2b4:	9b07      	ldr	r3, [sp, #28]
    d2b6:	3307      	adds	r3, #7
    d2b8:	f023 0307 	bic.w	r3, r3, #7
    d2bc:	4619      	mov	r1, r3
    d2be:	685a      	ldr	r2, [r3, #4]
    d2c0:	f851 3b08 	ldr.w	r3, [r1], #8
    d2c4:	9107      	str	r1, [sp, #28]
    d2c6:	2101      	movs	r1, #1
    d2c8:	e60d      	b.n	cee6 <_vfiprintf_r+0x2ee>
    d2ca:	9a07      	ldr	r2, [sp, #28]
    d2cc:	f046 0302 	orr.w	r3, r6, #2
    d2d0:	9303      	str	r3, [sp, #12]
    d2d2:	f852 3b04 	ldr.w	r3, [r2], #4
    d2d6:	9207      	str	r2, [sp, #28]
    d2d8:	f647 0230 	movw	r2, #30768	; 0x7830
    d2dc:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
    d2e0:	4ab8      	ldr	r2, [pc, #736]	; (d5c4 <_vfiprintf_r+0x9cc>)
    d2e2:	920c      	str	r2, [sp, #48]	; 0x30
    d2e4:	2102      	movs	r1, #2
    d2e6:	2200      	movs	r2, #0
    d2e8:	e5fd      	b.n	cee6 <_vfiprintf_r+0x2ee>
    d2ea:	06b7      	lsls	r7, r6, #26
    d2ec:	f100 8248 	bmi.w	d780 <_vfiprintf_r+0xb88>
    d2f0:	06f5      	lsls	r5, r6, #27
    d2f2:	f100 8346 	bmi.w	d982 <_vfiprintf_r+0xd8a>
    d2f6:	0674      	lsls	r4, r6, #25
    d2f8:	f100 83d5 	bmi.w	daa6 <_vfiprintf_r+0xeae>
    d2fc:	05b0      	lsls	r0, r6, #22
    d2fe:	f140 8340 	bpl.w	d982 <_vfiprintf_r+0xd8a>
    d302:	9b07      	ldr	r3, [sp, #28]
    d304:	9905      	ldr	r1, [sp, #20]
    d306:	f853 2b04 	ldr.w	r2, [r3], #4
    d30a:	9307      	str	r3, [sp, #28]
    d30c:	7011      	strb	r1, [r2, #0]
    d30e:	e4be      	b.n	cc8e <_vfiprintf_r+0x96>
    d310:	9603      	str	r6, [sp, #12]
    d312:	2901      	cmp	r1, #1
    d314:	f43f ad8c 	beq.w	ce30 <_vfiprintf_r+0x238>
    d318:	2902      	cmp	r1, #2
    d31a:	ac44      	add	r4, sp, #272	; 0x110
    d31c:	d111      	bne.n	d342 <_vfiprintf_r+0x74a>
    d31e:	980c      	ldr	r0, [sp, #48]	; 0x30
    d320:	f003 010f 	and.w	r1, r3, #15
    d324:	091b      	lsrs	r3, r3, #4
    d326:	5c41      	ldrb	r1, [r0, r1]
    d328:	f804 1d01 	strb.w	r1, [r4, #-1]!
    d32c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    d330:	0912      	lsrs	r2, r2, #4
    d332:	ea53 0102 	orrs.w	r1, r3, r2
    d336:	d1f3      	bne.n	d320 <_vfiprintf_r+0x728>
    d338:	9e03      	ldr	r6, [sp, #12]
    d33a:	ab44      	add	r3, sp, #272	; 0x110
    d33c:	1b1b      	subs	r3, r3, r4
    d33e:	9304      	str	r3, [sp, #16]
    d340:	e583      	b.n	ce4a <_vfiprintf_r+0x252>
    d342:	f003 0107 	and.w	r1, r3, #7
    d346:	08db      	lsrs	r3, r3, #3
    d348:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
    d34c:	08d2      	lsrs	r2, r2, #3
    d34e:	3130      	adds	r1, #48	; 0x30
    d350:	ea53 0502 	orrs.w	r5, r3, r2
    d354:	4620      	mov	r0, r4
    d356:	f804 1d01 	strb.w	r1, [r4, #-1]!
    d35a:	d1f2      	bne.n	d342 <_vfiprintf_r+0x74a>
    d35c:	9e03      	ldr	r6, [sp, #12]
    d35e:	07f3      	lsls	r3, r6, #31
    d360:	d5eb      	bpl.n	d33a <_vfiprintf_r+0x742>
    d362:	2930      	cmp	r1, #48	; 0x30
    d364:	d0e8      	beq.n	d338 <_vfiprintf_r+0x740>
    d366:	2330      	movs	r3, #48	; 0x30
    d368:	3802      	subs	r0, #2
    d36a:	f804 3c01 	strb.w	r3, [r4, #-1]
    d36e:	ab44      	add	r3, sp, #272	; 0x110
    d370:	1a1b      	subs	r3, r3, r0
    d372:	9e03      	ldr	r6, [sp, #12]
    d374:	9304      	str	r3, [sp, #16]
    d376:	4604      	mov	r4, r0
    d378:	e567      	b.n	ce4a <_vfiprintf_r+0x252>
    d37a:	9b04      	ldr	r3, [sp, #16]
    d37c:	941b      	str	r4, [sp, #108]	; 0x6c
    d37e:	2201      	movs	r2, #1
    d380:	931c      	str	r3, [sp, #112]	; 0x70
    d382:	931a      	str	r3, [sp, #104]	; 0x68
    d384:	9219      	str	r2, [sp, #100]	; 0x64
    d386:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d38a:	f109 0908 	add.w	r9, r9, #8
    d38e:	e69d      	b.n	d0cc <_vfiprintf_r+0x4d4>
    d390:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d394:	e47b      	b.n	cc8e <_vfiprintf_r+0x96>
    d396:	9a06      	ldr	r2, [sp, #24]
    d398:	9d03      	ldr	r5, [sp, #12]
    d39a:	1b55      	subs	r5, r2, r5
    d39c:	2d00      	cmp	r5, #0
    d39e:	f77f ae76 	ble.w	d08e <_vfiprintf_r+0x496>
    d3a2:	2d10      	cmp	r5, #16
    d3a4:	f340 83bb 	ble.w	db1e <_vfiprintf_r+0xf26>
    d3a8:	9409      	str	r4, [sp, #36]	; 0x24
    d3aa:	ee18 4a10 	vmov	r4, s16
    d3ae:	e007      	b.n	d3c0 <_vfiprintf_r+0x7c8>
    d3b0:	f100 0c02 	add.w	ip, r0, #2
    d3b4:	f109 0908 	add.w	r9, r9, #8
    d3b8:	4610      	mov	r0, r2
    d3ba:	3d10      	subs	r5, #16
    d3bc:	2d10      	cmp	r5, #16
    d3be:	dd1e      	ble.n	d3fe <_vfiprintf_r+0x806>
    d3c0:	4981      	ldr	r1, [pc, #516]	; (d5c8 <_vfiprintf_r+0x9d0>)
    d3c2:	f8c9 1000 	str.w	r1, [r9]
    d3c6:	1c42      	adds	r2, r0, #1
    d3c8:	3310      	adds	r3, #16
    d3ca:	2110      	movs	r1, #16
    d3cc:	2a07      	cmp	r2, #7
    d3ce:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    d3d2:	f8c9 1004 	str.w	r1, [r9, #4]
    d3d6:	ddeb      	ble.n	d3b0 <_vfiprintf_r+0x7b8>
    d3d8:	aa18      	add	r2, sp, #96	; 0x60
    d3da:	2b00      	cmp	r3, #0
    d3dc:	d074      	beq.n	d4c8 <_vfiprintf_r+0x8d0>
    d3de:	4621      	mov	r1, r4
    d3e0:	4658      	mov	r0, fp
    d3e2:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d3e6:	f7ff fbcb 	bl	cb80 <__sprint_r.part.0>
    d3ea:	2800      	cmp	r0, #0
    d3ec:	f47f addb 	bne.w	cfa6 <_vfiprintf_r+0x3ae>
    d3f0:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    d3f4:	3d10      	subs	r5, #16
    d3f6:	2d10      	cmp	r5, #16
    d3f8:	f100 0c01 	add.w	ip, r0, #1
    d3fc:	dce0      	bgt.n	d3c0 <_vfiprintf_r+0x7c8>
    d3fe:	9c09      	ldr	r4, [sp, #36]	; 0x24
    d400:	4a71      	ldr	r2, [pc, #452]	; (d5c8 <_vfiprintf_r+0x9d0>)
    d402:	f8c9 5004 	str.w	r5, [r9, #4]
    d406:	442b      	add	r3, r5
    d408:	f1bc 0f07 	cmp.w	ip, #7
    d40c:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
    d410:	f8c9 2000 	str.w	r2, [r9]
    d414:	f340 8194 	ble.w	d740 <_vfiprintf_r+0xb48>
    d418:	2b00      	cmp	r3, #0
    d41a:	f000 831f 	beq.w	da5c <_vfiprintf_r+0xe64>
    d41e:	ee18 1a10 	vmov	r1, s16
    d422:	aa18      	add	r2, sp, #96	; 0x60
    d424:	4658      	mov	r0, fp
    d426:	f7ff fbab 	bl	cb80 <__sprint_r.part.0>
    d42a:	2800      	cmp	r0, #0
    d42c:	f47f adbb 	bne.w	cfa6 <_vfiprintf_r+0x3ae>
    d430:	9a04      	ldr	r2, [sp, #16]
    d432:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    d436:	1abd      	subs	r5, r7, r2
    d438:	2d00      	cmp	r5, #0
    d43a:	f100 0101 	add.w	r1, r0, #1
    d43e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d442:	f77f ae29 	ble.w	d098 <_vfiprintf_r+0x4a0>
    d446:	2d10      	cmp	r5, #16
    d448:	dd29      	ble.n	d49e <_vfiprintf_r+0x8a6>
    d44a:	9409      	str	r4, [sp, #36]	; 0x24
    d44c:	2710      	movs	r7, #16
    d44e:	ee18 4a10 	vmov	r4, s16
    d452:	e007      	b.n	d464 <_vfiprintf_r+0x86c>
    d454:	f100 0c02 	add.w	ip, r0, #2
    d458:	f109 0908 	add.w	r9, r9, #8
    d45c:	4610      	mov	r0, r2
    d45e:	3d10      	subs	r5, #16
    d460:	2d10      	cmp	r5, #16
    d462:	dd1a      	ble.n	d49a <_vfiprintf_r+0x8a2>
    d464:	1c42      	adds	r2, r0, #1
    d466:	4958      	ldr	r1, [pc, #352]	; (d5c8 <_vfiprintf_r+0x9d0>)
    d468:	3310      	adds	r3, #16
    d46a:	2a07      	cmp	r2, #7
    d46c:	e9c9 1700 	strd	r1, r7, [r9]
    d470:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    d474:	ddee      	ble.n	d454 <_vfiprintf_r+0x85c>
    d476:	aa18      	add	r2, sp, #96	; 0x60
    d478:	b303      	cbz	r3, d4bc <_vfiprintf_r+0x8c4>
    d47a:	4621      	mov	r1, r4
    d47c:	4658      	mov	r0, fp
    d47e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d482:	f7ff fb7d 	bl	cb80 <__sprint_r.part.0>
    d486:	2800      	cmp	r0, #0
    d488:	f47f ad8d 	bne.w	cfa6 <_vfiprintf_r+0x3ae>
    d48c:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    d490:	3d10      	subs	r5, #16
    d492:	2d10      	cmp	r5, #16
    d494:	f100 0c01 	add.w	ip, r0, #1
    d498:	dce4      	bgt.n	d464 <_vfiprintf_r+0x86c>
    d49a:	9c09      	ldr	r4, [sp, #36]	; 0x24
    d49c:	4661      	mov	r1, ip
    d49e:	4a4a      	ldr	r2, [pc, #296]	; (d5c8 <_vfiprintf_r+0x9d0>)
    d4a0:	f8c9 5004 	str.w	r5, [r9, #4]
    d4a4:	442b      	add	r3, r5
    d4a6:	2907      	cmp	r1, #7
    d4a8:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    d4ac:	f8c9 2000 	str.w	r2, [r9]
    d4b0:	f300 80e7 	bgt.w	d682 <_vfiprintf_r+0xa8a>
    d4b4:	f109 0908 	add.w	r9, r9, #8
    d4b8:	3101      	adds	r1, #1
    d4ba:	e5ed      	b.n	d098 <_vfiprintf_r+0x4a0>
    d4bc:	f04f 0c01 	mov.w	ip, #1
    d4c0:	4618      	mov	r0, r3
    d4c2:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d4c6:	e7ca      	b.n	d45e <_vfiprintf_r+0x866>
    d4c8:	f04f 0c01 	mov.w	ip, #1
    d4cc:	4618      	mov	r0, r3
    d4ce:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d4d2:	e772      	b.n	d3ba <_vfiprintf_r+0x7c2>
    d4d4:	2b00      	cmp	r3, #0
    d4d6:	f000 8104 	beq.w	d6e2 <_vfiprintf_r+0xaea>
    d4da:	ee18 1a10 	vmov	r1, s16
    d4de:	aa18      	add	r2, sp, #96	; 0x60
    d4e0:	4658      	mov	r0, fp
    d4e2:	f7ff fb4d 	bl	cb80 <__sprint_r.part.0>
    d4e6:	2800      	cmp	r0, #0
    d4e8:	f47f ad5d 	bne.w	cfa6 <_vfiprintf_r+0x3ae>
    d4ec:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    d4f0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d4f4:	1c41      	adds	r1, r0, #1
    d4f6:	e5a7      	b.n	d048 <_vfiprintf_r+0x450>
    d4f8:	2302      	movs	r3, #2
    d4fa:	aa11      	add	r2, sp, #68	; 0x44
    d4fc:	931c      	str	r3, [sp, #112]	; 0x70
    d4fe:	921b      	str	r2, [sp, #108]	; 0x6c
    d500:	2101      	movs	r1, #1
    d502:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d506:	4608      	mov	r0, r1
    d508:	f109 0908 	add.w	r9, r9, #8
    d50c:	1c41      	adds	r1, r0, #1
    d50e:	e5ba      	b.n	d086 <_vfiprintf_r+0x48e>
    d510:	2d10      	cmp	r5, #16
    d512:	f340 82e5 	ble.w	dae0 <_vfiprintf_r+0xee8>
    d516:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
    d51a:	940f      	str	r4, [sp, #60]	; 0x3c
    d51c:	4608      	mov	r0, r1
    d51e:	ee18 4a10 	vmov	r4, s16
    d522:	e007      	b.n	d534 <_vfiprintf_r+0x93c>
    d524:	f100 0c02 	add.w	ip, r0, #2
    d528:	f109 0908 	add.w	r9, r9, #8
    d52c:	4610      	mov	r0, r2
    d52e:	3d10      	subs	r5, #16
    d530:	2d10      	cmp	r5, #16
    d532:	dd1d      	ble.n	d570 <_vfiprintf_r+0x978>
    d534:	4925      	ldr	r1, [pc, #148]	; (d5cc <_vfiprintf_r+0x9d4>)
    d536:	f8c9 1000 	str.w	r1, [r9]
    d53a:	1c42      	adds	r2, r0, #1
    d53c:	3310      	adds	r3, #16
    d53e:	2110      	movs	r1, #16
    d540:	2a07      	cmp	r2, #7
    d542:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    d546:	f8c9 1004 	str.w	r1, [r9, #4]
    d54a:	ddeb      	ble.n	d524 <_vfiprintf_r+0x92c>
    d54c:	aa18      	add	r2, sp, #96	; 0x60
    d54e:	b303      	cbz	r3, d592 <_vfiprintf_r+0x99a>
    d550:	4621      	mov	r1, r4
    d552:	4658      	mov	r0, fp
    d554:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d558:	f7ff fb12 	bl	cb80 <__sprint_r.part.0>
    d55c:	2800      	cmp	r0, #0
    d55e:	f47f ad22 	bne.w	cfa6 <_vfiprintf_r+0x3ae>
    d562:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    d566:	3d10      	subs	r5, #16
    d568:	2d10      	cmp	r5, #16
    d56a:	f100 0c01 	add.w	ip, r0, #1
    d56e:	dce1      	bgt.n	d534 <_vfiprintf_r+0x93c>
    d570:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    d572:	4660      	mov	r0, ip
    d574:	4a15      	ldr	r2, [pc, #84]	; (d5cc <_vfiprintf_r+0x9d4>)
    d576:	f8c9 5004 	str.w	r5, [r9, #4]
    d57a:	442b      	add	r3, r5
    d57c:	2807      	cmp	r0, #7
    d57e:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
    d582:	f8c9 2000 	str.w	r2, [r9]
    d586:	f300 80c1 	bgt.w	d70c <_vfiprintf_r+0xb14>
    d58a:	f109 0908 	add.w	r9, r9, #8
    d58e:	1c41      	adds	r1, r0, #1
    d590:	e546      	b.n	d020 <_vfiprintf_r+0x428>
    d592:	4618      	mov	r0, r3
    d594:	f04f 0c01 	mov.w	ip, #1
    d598:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d59c:	e7c7      	b.n	d52e <_vfiprintf_r+0x936>
    d59e:	0776      	lsls	r6, r6, #29
    d5a0:	9319      	str	r3, [sp, #100]	; 0x64
    d5a2:	d553      	bpl.n	d64c <_vfiprintf_r+0xa54>
    d5a4:	9a06      	ldr	r2, [sp, #24]
    d5a6:	9903      	ldr	r1, [sp, #12]
    d5a8:	1a54      	subs	r4, r2, r1
    d5aa:	2c00      	cmp	r4, #0
    d5ac:	dd4e      	ble.n	d64c <_vfiprintf_r+0xa54>
    d5ae:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d5b2:	2c10      	cmp	r4, #16
    d5b4:	f340 82b0 	ble.w	db18 <_vfiprintf_r+0xf20>
    d5b8:	9919      	ldr	r1, [sp, #100]	; 0x64
    d5ba:	ee18 6a10 	vmov	r6, s16
    d5be:	2510      	movs	r5, #16
    d5c0:	e00d      	b.n	d5de <_vfiprintf_r+0x9e6>
    d5c2:	bf00      	nop
    d5c4:	200008e4 	.word	0x200008e4
    d5c8:	20007a24 	.word	0x20007a24
    d5cc:	200023a0 	.word	0x200023a0
    d5d0:	1c88      	adds	r0, r1, #2
    d5d2:	f109 0908 	add.w	r9, r9, #8
    d5d6:	4611      	mov	r1, r2
    d5d8:	3c10      	subs	r4, #16
    d5da:	2c10      	cmp	r4, #16
    d5dc:	dd1a      	ble.n	d614 <_vfiprintf_r+0xa1c>
    d5de:	1c4a      	adds	r2, r1, #1
    d5e0:	48b3      	ldr	r0, [pc, #716]	; (d8b0 <_vfiprintf_r+0xcb8>)
    d5e2:	3310      	adds	r3, #16
    d5e4:	2a07      	cmp	r2, #7
    d5e6:	e9c9 0500 	strd	r0, r5, [r9]
    d5ea:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    d5ee:	ddef      	ble.n	d5d0 <_vfiprintf_r+0x9d8>
    d5f0:	aa18      	add	r2, sp, #96	; 0x60
    d5f2:	b333      	cbz	r3, d642 <_vfiprintf_r+0xa4a>
    d5f4:	4631      	mov	r1, r6
    d5f6:	4658      	mov	r0, fp
    d5f8:	f7ff fac2 	bl	cb80 <__sprint_r.part.0>
    d5fc:	2800      	cmp	r0, #0
    d5fe:	f47f acd2 	bne.w	cfa6 <_vfiprintf_r+0x3ae>
    d602:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
    d606:	3c10      	subs	r4, #16
    d608:	2c10      	cmp	r4, #16
    d60a:	f101 0001 	add.w	r0, r1, #1
    d60e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d612:	dce4      	bgt.n	d5de <_vfiprintf_r+0x9e6>
    d614:	4aa6      	ldr	r2, [pc, #664]	; (d8b0 <_vfiprintf_r+0xcb8>)
    d616:	f8c9 4004 	str.w	r4, [r9, #4]
    d61a:	4423      	add	r3, r4
    d61c:	2807      	cmp	r0, #7
    d61e:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
    d622:	f8c9 2000 	str.w	r2, [r9]
    d626:	f77f ad59 	ble.w	d0dc <_vfiprintf_r+0x4e4>
    d62a:	b17b      	cbz	r3, d64c <_vfiprintf_r+0xa54>
    d62c:	ee18 1a10 	vmov	r1, s16
    d630:	aa18      	add	r2, sp, #96	; 0x60
    d632:	4658      	mov	r0, fp
    d634:	f7ff faa4 	bl	cb80 <__sprint_r.part.0>
    d638:	2800      	cmp	r0, #0
    d63a:	f47f acb4 	bne.w	cfa6 <_vfiprintf_r+0x3ae>
    d63e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    d640:	e54c      	b.n	d0dc <_vfiprintf_r+0x4e4>
    d642:	2001      	movs	r0, #1
    d644:	4619      	mov	r1, r3
    d646:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d64a:	e7c5      	b.n	d5d8 <_vfiprintf_r+0x9e0>
    d64c:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
    d650:	9903      	ldr	r1, [sp, #12]
    d652:	428a      	cmp	r2, r1
    d654:	bfac      	ite	ge
    d656:	189b      	addge	r3, r3, r2
    d658:	185b      	addlt	r3, r3, r1
    d65a:	9305      	str	r3, [sp, #20]
    d65c:	e549      	b.n	d0f2 <_vfiprintf_r+0x4fa>
    d65e:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
    d662:	058f      	lsls	r7, r1, #22
    d664:	ee18 3a10 	vmov	r3, s16
    d668:	b28a      	uxth	r2, r1
    d66a:	f53f aae8 	bmi.w	cc3e <_vfiprintf_r+0x46>
    d66e:	ee18 5a10 	vmov	r5, s16
    d672:	6d98      	ldr	r0, [r3, #88]	; 0x58
    d674:	f7f8 fce2 	bl	603c <__retarget_lock_acquire_recursive>
    d678:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
    d67c:	b28a      	uxth	r2, r1
    d67e:	f7ff bade 	b.w	cc3e <_vfiprintf_r+0x46>
    d682:	2b00      	cmp	r3, #0
    d684:	f43f ae79 	beq.w	d37a <_vfiprintf_r+0x782>
    d688:	ee18 1a10 	vmov	r1, s16
    d68c:	aa18      	add	r2, sp, #96	; 0x60
    d68e:	4658      	mov	r0, fp
    d690:	f7ff fa76 	bl	cb80 <__sprint_r.part.0>
    d694:	2800      	cmp	r0, #0
    d696:	f47f ac86 	bne.w	cfa6 <_vfiprintf_r+0x3ae>
    d69a:	9919      	ldr	r1, [sp, #100]	; 0x64
    d69c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    d69e:	3101      	adds	r1, #1
    d6a0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d6a4:	e4f8      	b.n	d098 <_vfiprintf_r+0x4a0>
    d6a6:	9219      	str	r2, [sp, #100]	; 0x64
    d6a8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d6ac:	e45e      	b.n	cf6c <_vfiprintf_r+0x374>
    d6ae:	2f00      	cmp	r7, #0
    d6b0:	f47f abc3 	bne.w	ce3a <_vfiprintf_r+0x242>
    d6b4:	9e03      	ldr	r6, [sp, #12]
    d6b6:	2700      	movs	r7, #0
    d6b8:	9704      	str	r7, [sp, #16]
    d6ba:	ac44      	add	r4, sp, #272	; 0x110
    d6bc:	f7ff bbc5 	b.w	ce4a <_vfiprintf_r+0x252>
    d6c0:	9b03      	ldr	r3, [sp, #12]
    d6c2:	f013 0310 	ands.w	r3, r3, #16
    d6c6:	d154      	bne.n	d772 <_vfiprintf_r+0xb7a>
    d6c8:	9a03      	ldr	r2, [sp, #12]
    d6ca:	f012 0040 	ands.w	r0, r2, #64	; 0x40
    d6ce:	f000 816b 	beq.w	d9a8 <_vfiprintf_r+0xdb0>
    d6d2:	9907      	ldr	r1, [sp, #28]
    d6d4:	461a      	mov	r2, r3
    d6d6:	f851 3b04 	ldr.w	r3, [r1], #4
    d6da:	9107      	str	r1, [sp, #28]
    d6dc:	b29b      	uxth	r3, r3
    d6de:	2101      	movs	r1, #1
    d6e0:	e401      	b.n	cee6 <_vfiprintf_r+0x2ee>
    d6e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    d6e4:	2a00      	cmp	r2, #0
    d6e6:	d164      	bne.n	d7b2 <_vfiprintf_r+0xbba>
    d6e8:	4618      	mov	r0, r3
    d6ea:	2101      	movs	r1, #1
    d6ec:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d6f0:	e4c9      	b.n	d086 <_vfiprintf_r+0x48e>
    d6f2:	2101      	movs	r1, #1
    d6f4:	4618      	mov	r0, r3
    d6f6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d6fa:	e4c4      	b.n	d086 <_vfiprintf_r+0x48e>
    d6fc:	425b      	negs	r3, r3
    d6fe:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
    d702:	9603      	str	r6, [sp, #12]
    d704:	202d      	movs	r0, #45	; 0x2d
    d706:	2101      	movs	r1, #1
    d708:	f7ff bbee 	b.w	cee8 <_vfiprintf_r+0x2f0>
    d70c:	2b00      	cmp	r3, #0
    d70e:	f000 8088 	beq.w	d822 <_vfiprintf_r+0xc2a>
    d712:	ee18 1a10 	vmov	r1, s16
    d716:	aa18      	add	r2, sp, #96	; 0x60
    d718:	4658      	mov	r0, fp
    d71a:	f7ff fa31 	bl	cb80 <__sprint_r.part.0>
    d71e:	2800      	cmp	r0, #0
    d720:	f47f ac41 	bne.w	cfa6 <_vfiprintf_r+0x3ae>
    d724:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    d728:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d72c:	1c41      	adds	r1, r0, #1
    d72e:	e477      	b.n	d020 <_vfiprintf_r+0x428>
    d730:	f898 1000 	ldrb.w	r1, [r8]
    d734:	9307      	str	r3, [sp, #28]
    d736:	f7ff bad2 	b.w	ccde <_vfiprintf_r+0xe6>
    d73a:	ac44      	add	r4, sp, #272	; 0x110
    d73c:	f7ff bb85 	b.w	ce4a <_vfiprintf_r+0x252>
    d740:	f109 0908 	add.w	r9, r9, #8
    d744:	f10c 0101 	add.w	r1, ip, #1
    d748:	4660      	mov	r0, ip
    d74a:	e4a0      	b.n	d08e <_vfiprintf_r+0x496>
    d74c:	f416 7200 	ands.w	r2, r6, #512	; 0x200
    d750:	f040 8197 	bne.w	da82 <_vfiprintf_r+0xe8a>
    d754:	f851 3b04 	ldr.w	r3, [r1], #4
    d758:	9107      	str	r1, [sp, #28]
    d75a:	f7ff bbc0 	b.w	cede <_vfiprintf_r+0x2e6>
    d75e:	05b3      	lsls	r3, r6, #22
    d760:	f100 8188 	bmi.w	da74 <_vfiprintf_r+0xe7c>
    d764:	f852 3b04 	ldr.w	r3, [r2], #4
    d768:	9207      	str	r2, [sp, #28]
    d76a:	17da      	asrs	r2, r3, #31
    d76c:	4611      	mov	r1, r2
    d76e:	f7ff bb52 	b.w	ce16 <_vfiprintf_r+0x21e>
    d772:	9907      	ldr	r1, [sp, #28]
    d774:	f851 3b04 	ldr.w	r3, [r1], #4
    d778:	9107      	str	r1, [sp, #28]
    d77a:	2101      	movs	r1, #1
    d77c:	f7ff bbb3 	b.w	cee6 <_vfiprintf_r+0x2ee>
    d780:	9b07      	ldr	r3, [sp, #28]
    d782:	9805      	ldr	r0, [sp, #20]
    d784:	f853 1b04 	ldr.w	r1, [r3], #4
    d788:	9307      	str	r3, [sp, #28]
    d78a:	17c2      	asrs	r2, r0, #31
    d78c:	e9c1 0200 	strd	r0, r2, [r1]
    d790:	f7ff ba7d 	b.w	cc8e <_vfiprintf_r+0x96>
    d794:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d796:	2b00      	cmp	r3, #0
    d798:	f43f ab26 	beq.w	cde8 <_vfiprintf_r+0x1f0>
    d79c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d79e:	781b      	ldrb	r3, [r3, #0]
    d7a0:	2b00      	cmp	r3, #0
    d7a2:	f43f ab21 	beq.w	cde8 <_vfiprintf_r+0x1f0>
    d7a6:	f898 1000 	ldrb.w	r1, [r8]
    d7aa:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
    d7ae:	f7ff ba96 	b.w	ccde <_vfiprintf_r+0xe6>
    d7b2:	2302      	movs	r3, #2
    d7b4:	aa11      	add	r2, sp, #68	; 0x44
    d7b6:	931c      	str	r3, [sp, #112]	; 0x70
    d7b8:	921b      	str	r2, [sp, #108]	; 0x6c
    d7ba:	2001      	movs	r0, #1
    d7bc:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d7c0:	e6a2      	b.n	d508 <_vfiprintf_r+0x910>
    d7c2:	9603      	str	r6, [sp, #12]
    d7c4:	e571      	b.n	d2aa <_vfiprintf_r+0x6b2>
    d7c6:	4b3b      	ldr	r3, [pc, #236]	; (d8b4 <_vfiprintf_r+0xcbc>)
    d7c8:	930c      	str	r3, [sp, #48]	; 0x30
    d7ca:	f016 0220 	ands.w	r2, r6, #32
    d7ce:	d059      	beq.n	d884 <_vfiprintf_r+0xc8c>
    d7d0:	9b07      	ldr	r3, [sp, #28]
    d7d2:	3307      	adds	r3, #7
    d7d4:	f023 0307 	bic.w	r3, r3, #7
    d7d8:	4618      	mov	r0, r3
    d7da:	685a      	ldr	r2, [r3, #4]
    d7dc:	f850 3b08 	ldr.w	r3, [r0], #8
    d7e0:	9007      	str	r0, [sp, #28]
    d7e2:	07f4      	lsls	r4, r6, #31
    d7e4:	d509      	bpl.n	d7fa <_vfiprintf_r+0xc02>
    d7e6:	ea53 0002 	orrs.w	r0, r3, r2
    d7ea:	d006      	beq.n	d7fa <_vfiprintf_r+0xc02>
    d7ec:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
    d7f0:	2130      	movs	r1, #48	; 0x30
    d7f2:	f046 0602 	orr.w	r6, r6, #2
    d7f6:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
    d7fa:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
    d7fe:	9103      	str	r1, [sp, #12]
    d800:	2102      	movs	r1, #2
    d802:	f7ff bb70 	b.w	cee6 <_vfiprintf_r+0x2ee>
    d806:	4b2c      	ldr	r3, [pc, #176]	; (d8b8 <_vfiprintf_r+0xcc0>)
    d808:	930c      	str	r3, [sp, #48]	; 0x30
    d80a:	e7de      	b.n	d7ca <_vfiprintf_r+0xbd2>
    d80c:	9b07      	ldr	r3, [sp, #28]
    d80e:	2101      	movs	r1, #1
    d810:	f853 2b04 	ldr.w	r2, [r3], #4
    d814:	9103      	str	r1, [sp, #12]
    d816:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
    d81a:	9307      	str	r3, [sp, #28]
    d81c:	9104      	str	r1, [sp, #16]
    d81e:	ac2b      	add	r4, sp, #172	; 0xac
    d820:	e4df      	b.n	d1e2 <_vfiprintf_r+0x5ea>
    d822:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
    d826:	2a00      	cmp	r2, #0
    d828:	f040 8132 	bne.w	da90 <_vfiprintf_r+0xe98>
    d82c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    d82e:	2a00      	cmp	r2, #0
    d830:	f47f ae62 	bne.w	d4f8 <_vfiprintf_r+0x900>
    d834:	4618      	mov	r0, r3
    d836:	2101      	movs	r1, #1
    d838:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d83c:	e427      	b.n	d08e <_vfiprintf_r+0x496>
    d83e:	2100      	movs	r1, #0
    d840:	2208      	movs	r2, #8
    d842:	a816      	add	r0, sp, #88	; 0x58
    d844:	9413      	str	r4, [sp, #76]	; 0x4c
    d846:	f7f8 fa2f 	bl	5ca8 <memset>
    d84a:	1c79      	adds	r1, r7, #1
    d84c:	f000 80bc 	beq.w	d9c8 <_vfiprintf_r+0xdd0>
    d850:	2500      	movs	r5, #0
    d852:	9407      	str	r4, [sp, #28]
    d854:	462c      	mov	r4, r5
    d856:	e00c      	b.n	d872 <_vfiprintf_r+0xc7a>
    d858:	a92b      	add	r1, sp, #172	; 0xac
    d85a:	4658      	mov	r0, fp
    d85c:	f7fe ff2e 	bl	c6bc <_wcrtomb_r>
    d860:	1c42      	adds	r2, r0, #1
    d862:	4420      	add	r0, r4
    d864:	f000 816b 	beq.w	db3e <_vfiprintf_r+0xf46>
    d868:	42b8      	cmp	r0, r7
    d86a:	dc08      	bgt.n	d87e <_vfiprintf_r+0xc86>
    d86c:	f000 8170 	beq.w	db50 <_vfiprintf_r+0xf58>
    d870:	4604      	mov	r4, r0
    d872:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    d874:	5952      	ldr	r2, [r2, r5]
    d876:	ab16      	add	r3, sp, #88	; 0x58
    d878:	3504      	adds	r5, #4
    d87a:	2a00      	cmp	r2, #0
    d87c:	d1ec      	bne.n	d858 <_vfiprintf_r+0xc60>
    d87e:	9404      	str	r4, [sp, #16]
    d880:	9c07      	ldr	r4, [sp, #28]
    d882:	e0af      	b.n	d9e4 <_vfiprintf_r+0xdec>
    d884:	f016 0310 	ands.w	r3, r6, #16
    d888:	9807      	ldr	r0, [sp, #28]
    d88a:	d10c      	bne.n	d8a6 <_vfiprintf_r+0xcae>
    d88c:	f016 0440 	ands.w	r4, r6, #64	; 0x40
    d890:	d005      	beq.n	d89e <_vfiprintf_r+0xca6>
    d892:	461a      	mov	r2, r3
    d894:	f850 3b04 	ldr.w	r3, [r0], #4
    d898:	9007      	str	r0, [sp, #28]
    d89a:	b29b      	uxth	r3, r3
    d89c:	e7a1      	b.n	d7e2 <_vfiprintf_r+0xbea>
    d89e:	f416 7200 	ands.w	r2, r6, #512	; 0x200
    d8a2:	f040 80e1 	bne.w	da68 <_vfiprintf_r+0xe70>
    d8a6:	f850 3b04 	ldr.w	r3, [r0], #4
    d8aa:	9007      	str	r0, [sp, #28]
    d8ac:	e799      	b.n	d7e2 <_vfiprintf_r+0xbea>
    d8ae:	bf00      	nop
    d8b0:	200023a0 	.word	0x200023a0
    d8b4:	200008e4 	.word	0x200008e4
    d8b8:	200008f8 	.word	0x200008f8
    d8bc:	9903      	ldr	r1, [sp, #12]
    d8be:	9704      	str	r7, [sp, #16]
    d8c0:	ac44      	add	r4, sp, #272	; 0x110
    d8c2:	469e      	mov	lr, r3
    d8c4:	ee08 ba90 	vmov	s17, fp
    d8c8:	f401 6680 	and.w	r6, r1, #1024	; 0x400
    d8cc:	f04f 0c00 	mov.w	ip, #0
    d8d0:	4623      	mov	r3, r4
    d8d2:	e006      	b.n	d8e2 <_vfiprintf_r+0xcea>
    d8d4:	f1be 0f0a 	cmp.w	lr, #10
    d8d8:	f172 0200 	sbcs.w	r2, r2, #0
    d8dc:	d339      	bcc.n	d952 <_vfiprintf_r+0xd5a>
    d8de:	46a6      	mov	lr, r4
    d8e0:	462a      	mov	r2, r5
    d8e2:	49a6      	ldr	r1, [pc, #664]	; (db7c <_vfiprintf_r+0xf84>)
    d8e4:	eb1e 0002 	adds.w	r0, lr, r2
    d8e8:	f140 0000 	adc.w	r0, r0, #0
    d8ec:	460f      	mov	r7, r1
    d8ee:	fba1 1400 	umull	r1, r4, r1, r0
    d8f2:	f024 0103 	bic.w	r1, r4, #3
    d8f6:	eb01 0194 	add.w	r1, r1, r4, lsr #2
    d8fa:	1a40      	subs	r0, r0, r1
    d8fc:	ebbe 0100 	subs.w	r1, lr, r0
    d900:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
    d904:	f162 0400 	sbc.w	r4, r2, #0
    d908:	fb05 f501 	mul.w	r5, r5, r1
    d90c:	fb07 5504 	mla	r5, r7, r4, r5
    d910:	fba1 4107 	umull	r4, r1, r1, r7
    d914:	440d      	add	r5, r1
    d916:	2705      	movs	r7, #5
    d918:	f004 0101 	and.w	r1, r4, #1
    d91c:	fba1 1b07 	umull	r1, fp, r1, r7
    d920:	1809      	adds	r1, r1, r0
    d922:	0864      	lsrs	r4, r4, #1
    d924:	3130      	adds	r1, #48	; 0x30
    d926:	f803 1c01 	strb.w	r1, [r3, #-1]
    d92a:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
    d92e:	f10c 0c01 	add.w	ip, ip, #1
    d932:	3b01      	subs	r3, #1
    d934:	086d      	lsrs	r5, r5, #1
    d936:	2e00      	cmp	r6, #0
    d938:	d0cc      	beq.n	d8d4 <_vfiprintf_r+0xcdc>
    d93a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    d93c:	7809      	ldrb	r1, [r1, #0]
    d93e:	4561      	cmp	r1, ip
    d940:	d1c8      	bne.n	d8d4 <_vfiprintf_r+0xcdc>
    d942:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    d946:	d0c5      	beq.n	d8d4 <_vfiprintf_r+0xcdc>
    d948:	f1be 0f0a 	cmp.w	lr, #10
    d94c:	f172 0200 	sbcs.w	r2, r2, #0
    d950:	d26c      	bcs.n	da2c <_vfiprintf_r+0xe34>
    d952:	461c      	mov	r4, r3
    d954:	ab44      	add	r3, sp, #272	; 0x110
    d956:	1b1b      	subs	r3, r3, r4
    d958:	9f04      	ldr	r7, [sp, #16]
    d95a:	9e03      	ldr	r6, [sp, #12]
    d95c:	9304      	str	r3, [sp, #16]
    d95e:	ee18 ba90 	vmov	fp, s17
    d962:	f7ff ba72 	b.w	ce4a <_vfiprintf_r+0x252>
    d966:	9603      	str	r6, [sp, #12]
    d968:	f7ff ba62 	b.w	ce30 <_vfiprintf_r+0x238>
    d96c:	4658      	mov	r0, fp
    d96e:	f7f7 ffbf 	bl	58f0 <__sinit>
    d972:	f7ff b95b 	b.w	cc2c <_vfiprintf_r+0x34>
    d976:	2901      	cmp	r1, #1
    d978:	9603      	str	r6, [sp, #12]
    d97a:	f47f accd 	bne.w	d318 <_vfiprintf_r+0x720>
    d97e:	f7ff ba5c 	b.w	ce3a <_vfiprintf_r+0x242>
    d982:	9b07      	ldr	r3, [sp, #28]
    d984:	9905      	ldr	r1, [sp, #20]
    d986:	f853 2b04 	ldr.w	r2, [r3], #4
    d98a:	6011      	str	r1, [r2, #0]
    d98c:	9307      	str	r3, [sp, #28]
    d98e:	f7ff b97e 	b.w	cc8e <_vfiprintf_r+0x96>
    d992:	2f06      	cmp	r7, #6
    d994:	463b      	mov	r3, r7
    d996:	9a03      	ldr	r2, [sp, #12]
    d998:	4c79      	ldr	r4, [pc, #484]	; (db80 <_vfiprintf_r+0xf88>)
    d99a:	9207      	str	r2, [sp, #28]
    d99c:	bf28      	it	cs
    d99e:	2306      	movcs	r3, #6
    d9a0:	9304      	str	r3, [sp, #16]
    d9a2:	9303      	str	r3, [sp, #12]
    d9a4:	f7ff bb25 	b.w	cff2 <_vfiprintf_r+0x3fa>
    d9a8:	9b03      	ldr	r3, [sp, #12]
    d9aa:	9907      	ldr	r1, [sp, #28]
    d9ac:	f413 7200 	ands.w	r2, r3, #512	; 0x200
    d9b0:	bf14      	ite	ne
    d9b2:	f851 3b04 	ldrne.w	r3, [r1], #4
    d9b6:	f851 3b04 	ldreq.w	r3, [r1], #4
    d9ba:	9107      	str	r1, [sp, #28]
    d9bc:	bf1c      	itt	ne
    d9be:	4602      	movne	r2, r0
    d9c0:	b2db      	uxtbne	r3, r3
    d9c2:	2101      	movs	r1, #1
    d9c4:	f7ff ba8f 	b.w	cee6 <_vfiprintf_r+0x2ee>
    d9c8:	ab16      	add	r3, sp, #88	; 0x58
    d9ca:	9300      	str	r3, [sp, #0]
    d9cc:	2300      	movs	r3, #0
    d9ce:	4619      	mov	r1, r3
    d9d0:	aa13      	add	r2, sp, #76	; 0x4c
    d9d2:	4658      	mov	r0, fp
    d9d4:	f7fe fe98 	bl	c708 <_wcsrtombs_r>
    d9d8:	4603      	mov	r3, r0
    d9da:	3301      	adds	r3, #1
    d9dc:	9004      	str	r0, [sp, #16]
    d9de:	f000 80ae 	beq.w	db3e <_vfiprintf_r+0xf46>
    d9e2:	9413      	str	r4, [sp, #76]	; 0x4c
    d9e4:	9b04      	ldr	r3, [sp, #16]
    d9e6:	2b00      	cmp	r3, #0
    d9e8:	d030      	beq.n	da4c <_vfiprintf_r+0xe54>
    d9ea:	2b63      	cmp	r3, #99	; 0x63
    d9ec:	dc63      	bgt.n	dab6 <_vfiprintf_r+0xebe>
    d9ee:	2300      	movs	r3, #0
    d9f0:	9308      	str	r3, [sp, #32]
    d9f2:	ac2b      	add	r4, sp, #172	; 0xac
    d9f4:	2208      	movs	r2, #8
    d9f6:	2100      	movs	r1, #0
    d9f8:	a816      	add	r0, sp, #88	; 0x58
    d9fa:	f7f8 f955 	bl	5ca8 <memset>
    d9fe:	9d04      	ldr	r5, [sp, #16]
    da00:	ab16      	add	r3, sp, #88	; 0x58
    da02:	9300      	str	r3, [sp, #0]
    da04:	aa13      	add	r2, sp, #76	; 0x4c
    da06:	462b      	mov	r3, r5
    da08:	4621      	mov	r1, r4
    da0a:	4658      	mov	r0, fp
    da0c:	f7fe fe7c 	bl	c708 <_wcsrtombs_r>
    da10:	4285      	cmp	r5, r0
    da12:	f040 80ab 	bne.w	db6c <_vfiprintf_r+0xf74>
    da16:	9b03      	ldr	r3, [sp, #12]
    da18:	9a04      	ldr	r2, [sp, #16]
    da1a:	9307      	str	r3, [sp, #28]
    da1c:	2300      	movs	r3, #0
    da1e:	54a3      	strb	r3, [r4, r2]
    da20:	461f      	mov	r7, r3
    da22:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    da26:	9303      	str	r3, [sp, #12]
    da28:	f7ff ba16 	b.w	ce58 <_vfiprintf_r+0x260>
    da2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    da2e:	990d      	ldr	r1, [sp, #52]	; 0x34
    da30:	1a9b      	subs	r3, r3, r2
    da32:	4618      	mov	r0, r3
    da34:	9308      	str	r3, [sp, #32]
    da36:	f7f8 fa35 	bl	5ea4 <strncpy>
    da3a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    da3c:	9b08      	ldr	r3, [sp, #32]
    da3e:	784a      	ldrb	r2, [r1, #1]
    da40:	b10a      	cbz	r2, da46 <_vfiprintf_r+0xe4e>
    da42:	3101      	adds	r1, #1
    da44:	910b      	str	r1, [sp, #44]	; 0x2c
    da46:	f04f 0c00 	mov.w	ip, #0
    da4a:	e748      	b.n	d8de <_vfiprintf_r+0xce6>
    da4c:	9b03      	ldr	r3, [sp, #12]
    da4e:	9307      	str	r3, [sp, #28]
    da50:	9b04      	ldr	r3, [sp, #16]
    da52:	9303      	str	r3, [sp, #12]
    da54:	461f      	mov	r7, r3
    da56:	9308      	str	r3, [sp, #32]
    da58:	f7ff b9fe 	b.w	ce58 <_vfiprintf_r+0x260>
    da5c:	2101      	movs	r1, #1
    da5e:	4618      	mov	r0, r3
    da60:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    da64:	f7ff bb13 	b.w	d08e <_vfiprintf_r+0x496>
    da68:	f850 3b04 	ldr.w	r3, [r0], #4
    da6c:	9007      	str	r0, [sp, #28]
    da6e:	4622      	mov	r2, r4
    da70:	b2db      	uxtb	r3, r3
    da72:	e6b6      	b.n	d7e2 <_vfiprintf_r+0xbea>
    da74:	f912 3b04 	ldrsb.w	r3, [r2], #4
    da78:	9207      	str	r2, [sp, #28]
    da7a:	17da      	asrs	r2, r3, #31
    da7c:	4611      	mov	r1, r2
    da7e:	f7ff b9ca 	b.w	ce16 <_vfiprintf_r+0x21e>
    da82:	f851 3b04 	ldr.w	r3, [r1], #4
    da86:	9107      	str	r1, [sp, #28]
    da88:	4602      	mov	r2, r0
    da8a:	b2db      	uxtb	r3, r3
    da8c:	f7ff ba27 	b.w	cede <_vfiprintf_r+0x2e6>
    da90:	2301      	movs	r3, #1
    da92:	931c      	str	r3, [sp, #112]	; 0x70
    da94:	2101      	movs	r1, #1
    da96:	f10d 0343 	add.w	r3, sp, #67	; 0x43
    da9a:	931b      	str	r3, [sp, #108]	; 0x6c
    da9c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    daa0:	460b      	mov	r3, r1
    daa2:	f7ff bacd 	b.w	d040 <_vfiprintf_r+0x448>
    daa6:	9b07      	ldr	r3, [sp, #28]
    daa8:	9905      	ldr	r1, [sp, #20]
    daaa:	f853 2b04 	ldr.w	r2, [r3], #4
    daae:	9307      	str	r3, [sp, #28]
    dab0:	8011      	strh	r1, [r2, #0]
    dab2:	f7ff b8ec 	b.w	cc8e <_vfiprintf_r+0x96>
    dab6:	1c59      	adds	r1, r3, #1
    dab8:	4658      	mov	r0, fp
    daba:	f7f6 f9d5 	bl	3e68 <_malloc_r>
    dabe:	4604      	mov	r4, r0
    dac0:	2800      	cmp	r0, #0
    dac2:	d03c      	beq.n	db3e <_vfiprintf_r+0xf46>
    dac4:	9008      	str	r0, [sp, #32]
    dac6:	e795      	b.n	d9f4 <_vfiprintf_r+0xdfc>
    dac8:	6d88      	ldr	r0, [r1, #88]	; 0x58
    daca:	f7f8 fab9 	bl	6040 <__retarget_lock_release_recursive>
    dace:	f7ff b9e9 	b.w	cea4 <_vfiprintf_r+0x2ac>
    dad2:	9b03      	ldr	r3, [sp, #12]
    dad4:	9307      	str	r3, [sp, #28]
    dad6:	e9cd 7703 	strd	r7, r7, [sp, #12]
    dada:	9f08      	ldr	r7, [sp, #32]
    dadc:	f7ff b9bc 	b.w	ce58 <_vfiprintf_r+0x260>
    dae0:	9819      	ldr	r0, [sp, #100]	; 0x64
    dae2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    dae4:	3001      	adds	r0, #1
    dae6:	e545      	b.n	d574 <_vfiprintf_r+0x97c>
    dae8:	9b03      	ldr	r3, [sp, #12]
    daea:	9307      	str	r3, [sp, #28]
    daec:	4620      	mov	r0, r4
    daee:	f7f8 fc87 	bl	6400 <strlen>
    daf2:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
    daf6:	462f      	mov	r7, r5
    daf8:	9004      	str	r0, [sp, #16]
    dafa:	9303      	str	r3, [sp, #12]
    dafc:	9508      	str	r5, [sp, #32]
    dafe:	f7ff b9ab 	b.w	ce58 <_vfiprintf_r+0x260>
    db02:	ee18 1a10 	vmov	r1, s16
    db06:	aa18      	add	r2, sp, #96	; 0x60
    db08:	4658      	mov	r0, fp
    db0a:	f7ff f839 	bl	cb80 <__sprint_r.part.0>
    db0e:	2800      	cmp	r0, #0
    db10:	f43f aa36 	beq.w	cf80 <_vfiprintf_r+0x388>
    db14:	f7ff ba4d 	b.w	cfb2 <_vfiprintf_r+0x3ba>
    db18:	9819      	ldr	r0, [sp, #100]	; 0x64
    db1a:	3001      	adds	r0, #1
    db1c:	e57a      	b.n	d614 <_vfiprintf_r+0xa1c>
    db1e:	468c      	mov	ip, r1
    db20:	e46e      	b.n	d400 <_vfiprintf_r+0x808>
    db22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    db24:	07d9      	lsls	r1, r3, #31
    db26:	d405      	bmi.n	db34 <_vfiprintf_r+0xf3c>
    db28:	89ab      	ldrh	r3, [r5, #12]
    db2a:	059a      	lsls	r2, r3, #22
    db2c:	d402      	bmi.n	db34 <_vfiprintf_r+0xf3c>
    db2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
    db30:	f7f8 fa86 	bl	6040 <__retarget_lock_release_recursive>
    db34:	f04f 33ff 	mov.w	r3, #4294967295
    db38:	9305      	str	r3, [sp, #20]
    db3a:	f7ff ba49 	b.w	cfd0 <_vfiprintf_r+0x3d8>
    db3e:	ee18 2a10 	vmov	r2, s16
    db42:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    db46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    db4a:	8193      	strh	r3, [r2, #12]
    db4c:	f7ff ba35 	b.w	cfba <_vfiprintf_r+0x3c2>
    db50:	9c07      	ldr	r4, [sp, #28]
    db52:	9704      	str	r7, [sp, #16]
    db54:	e746      	b.n	d9e4 <_vfiprintf_r+0xdec>
    db56:	9b07      	ldr	r3, [sp, #28]
    db58:	f898 1001 	ldrb.w	r1, [r8, #1]
    db5c:	f853 7b04 	ldr.w	r7, [r3], #4
    db60:	9307      	str	r3, [sp, #28]
    db62:	4690      	mov	r8, r2
    db64:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
    db68:	f7ff b8b9 	b.w	ccde <_vfiprintf_r+0xe6>
    db6c:	ee18 2a10 	vmov	r2, s16
    db70:	8993      	ldrh	r3, [r2, #12]
    db72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    db76:	8193      	strh	r3, [r2, #12]
    db78:	f7ff ba15 	b.w	cfa6 <_vfiprintf_r+0x3ae>
    db7c:	cccccccd 	.word	0xcccccccd
    db80:	2000090c 	.word	0x2000090c

0000db84 <__sbprintf>:
    db84:	b570      	push	{r4, r5, r6, lr}
    db86:	460c      	mov	r4, r1
    db88:	8989      	ldrh	r1, [r1, #12]
    db8a:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
    db8e:	f021 0102 	bic.w	r1, r1, #2
    db92:	f8ad 1014 	strh.w	r1, [sp, #20]
    db96:	6e61      	ldr	r1, [r4, #100]	; 0x64
    db98:	911b      	str	r1, [sp, #108]	; 0x6c
    db9a:	89e1      	ldrh	r1, [r4, #14]
    db9c:	f8ad 1016 	strh.w	r1, [sp, #22]
    dba0:	69e1      	ldr	r1, [r4, #28]
    dba2:	9109      	str	r1, [sp, #36]	; 0x24
    dba4:	6a61      	ldr	r1, [r4, #36]	; 0x24
    dba6:	910b      	str	r1, [sp, #44]	; 0x2c
    dba8:	a91c      	add	r1, sp, #112	; 0x70
    dbaa:	9102      	str	r1, [sp, #8]
    dbac:	9106      	str	r1, [sp, #24]
    dbae:	f44f 6180 	mov.w	r1, #1024	; 0x400
    dbb2:	4606      	mov	r6, r0
    dbb4:	9104      	str	r1, [sp, #16]
    dbb6:	9107      	str	r1, [sp, #28]
    dbb8:	a818      	add	r0, sp, #96	; 0x60
    dbba:	2100      	movs	r1, #0
    dbbc:	e9cd 3200 	strd	r3, r2, [sp]
    dbc0:	9108      	str	r1, [sp, #32]
    dbc2:	f7f8 fa37 	bl	6034 <__retarget_lock_init_recursive>
    dbc6:	e9dd 3200 	ldrd	r3, r2, [sp]
    dbca:	a902      	add	r1, sp, #8
    dbcc:	4630      	mov	r0, r6
    dbce:	f7ff f813 	bl	cbf8 <_vfiprintf_r>
    dbd2:	1e05      	subs	r5, r0, #0
    dbd4:	db07      	blt.n	dbe6 <__sbprintf+0x62>
    dbd6:	a902      	add	r1, sp, #8
    dbd8:	4630      	mov	r0, r6
    dbda:	f7fd fa5f 	bl	b09c <_fflush_r>
    dbde:	2800      	cmp	r0, #0
    dbe0:	bf18      	it	ne
    dbe2:	f04f 35ff 	movne.w	r5, #4294967295
    dbe6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    dbea:	065b      	lsls	r3, r3, #25
    dbec:	d503      	bpl.n	dbf6 <__sbprintf+0x72>
    dbee:	89a3      	ldrh	r3, [r4, #12]
    dbf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    dbf4:	81a3      	strh	r3, [r4, #12]
    dbf6:	9818      	ldr	r0, [sp, #96]	; 0x60
    dbf8:	f7f8 fa1e 	bl	6038 <__retarget_lock_close_recursive>
    dbfc:	4628      	mov	r0, r5
    dbfe:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
    dc02:	bd70      	pop	{r4, r5, r6, pc}

0000dc04 <__sfvwrite_r>:
    dc04:	6893      	ldr	r3, [r2, #8]
    dc06:	2b00      	cmp	r3, #0
    dc08:	f000 8085 	beq.w	dd16 <__sfvwrite_r+0x112>
    dc0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dc10:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
    dc14:	460c      	mov	r4, r1
    dc16:	0719      	lsls	r1, r3, #28
    dc18:	4680      	mov	r8, r0
    dc1a:	b083      	sub	sp, #12
    dc1c:	4617      	mov	r7, r2
    dc1e:	b298      	uxth	r0, r3
    dc20:	d525      	bpl.n	dc6e <__sfvwrite_r+0x6a>
    dc22:	6923      	ldr	r3, [r4, #16]
    dc24:	b31b      	cbz	r3, dc6e <__sfvwrite_r+0x6a>
    dc26:	f010 0302 	ands.w	r3, r0, #2
    dc2a:	683d      	ldr	r5, [r7, #0]
    dc2c:	d02d      	beq.n	dc8a <__sfvwrite_r+0x86>
    dc2e:	f04f 0a00 	mov.w	sl, #0
    dc32:	f8df b2c0 	ldr.w	fp, [pc, #704]	; def4 <__sfvwrite_r+0x2f0>
    dc36:	4656      	mov	r6, sl
    dc38:	46b9      	mov	r9, r7
    dc3a:	455e      	cmp	r6, fp
    dc3c:	4633      	mov	r3, r6
    dc3e:	4652      	mov	r2, sl
    dc40:	bf28      	it	cs
    dc42:	465b      	movcs	r3, fp
    dc44:	4640      	mov	r0, r8
    dc46:	2e00      	cmp	r6, #0
    dc48:	d052      	beq.n	dcf0 <__sfvwrite_r+0xec>
    dc4a:	69e1      	ldr	r1, [r4, #28]
    dc4c:	6a67      	ldr	r7, [r4, #36]	; 0x24
    dc4e:	47b8      	blx	r7
    dc50:	2800      	cmp	r0, #0
    dc52:	dd56      	ble.n	dd02 <__sfvwrite_r+0xfe>
    dc54:	f8d9 3008 	ldr.w	r3, [r9, #8]
    dc58:	1a1b      	subs	r3, r3, r0
    dc5a:	4482      	add	sl, r0
    dc5c:	1a36      	subs	r6, r6, r0
    dc5e:	f8c9 3008 	str.w	r3, [r9, #8]
    dc62:	2b00      	cmp	r3, #0
    dc64:	d1e9      	bne.n	dc3a <__sfvwrite_r+0x36>
    dc66:	2000      	movs	r0, #0
    dc68:	b003      	add	sp, #12
    dc6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dc6e:	4621      	mov	r1, r4
    dc70:	4640      	mov	r0, r8
    dc72:	f000 f97d 	bl	df70 <__swsetup_r>
    dc76:	2800      	cmp	r0, #0
    dc78:	f040 8138 	bne.w	deec <__sfvwrite_r+0x2e8>
    dc7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    dc80:	683d      	ldr	r5, [r7, #0]
    dc82:	b298      	uxth	r0, r3
    dc84:	f010 0302 	ands.w	r3, r0, #2
    dc88:	d1d1      	bne.n	dc2e <__sfvwrite_r+0x2a>
    dc8a:	f010 0901 	ands.w	r9, r0, #1
    dc8e:	d144      	bne.n	dd1a <__sfvwrite_r+0x116>
    dc90:	464e      	mov	r6, r9
    dc92:	9700      	str	r7, [sp, #0]
    dc94:	b346      	cbz	r6, dce8 <__sfvwrite_r+0xe4>
    dc96:	0582      	lsls	r2, r0, #22
    dc98:	f8d4 b008 	ldr.w	fp, [r4, #8]
    dc9c:	f140 8085 	bpl.w	ddaa <__sfvwrite_r+0x1a6>
    dca0:	45b3      	cmp	fp, r6
    dca2:	465a      	mov	r2, fp
    dca4:	f200 80b4 	bhi.w	de10 <__sfvwrite_r+0x20c>
    dca8:	f410 6f90 	tst.w	r0, #1152	; 0x480
    dcac:	f040 80c1 	bne.w	de32 <__sfvwrite_r+0x22e>
    dcb0:	6820      	ldr	r0, [r4, #0]
    dcb2:	9201      	str	r2, [sp, #4]
    dcb4:	4649      	mov	r1, r9
    dcb6:	f7f7 ff7b 	bl	5bb0 <memmove>
    dcba:	68a3      	ldr	r3, [r4, #8]
    dcbc:	9a01      	ldr	r2, [sp, #4]
    dcbe:	eba3 010b 	sub.w	r1, r3, fp
    dcc2:	6823      	ldr	r3, [r4, #0]
    dcc4:	60a1      	str	r1, [r4, #8]
    dcc6:	4413      	add	r3, r2
    dcc8:	46b2      	mov	sl, r6
    dcca:	6023      	str	r3, [r4, #0]
    dccc:	2600      	movs	r6, #0
    dcce:	9a00      	ldr	r2, [sp, #0]
    dcd0:	6893      	ldr	r3, [r2, #8]
    dcd2:	eba3 030a 	sub.w	r3, r3, sl
    dcd6:	44d1      	add	r9, sl
    dcd8:	6093      	str	r3, [r2, #8]
    dcda:	2b00      	cmp	r3, #0
    dcdc:	d0c3      	beq.n	dc66 <__sfvwrite_r+0x62>
    dcde:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
    dce2:	b280      	uxth	r0, r0
    dce4:	2e00      	cmp	r6, #0
    dce6:	d1d6      	bne.n	dc96 <__sfvwrite_r+0x92>
    dce8:	e9d5 9600 	ldrd	r9, r6, [r5]
    dcec:	3508      	adds	r5, #8
    dcee:	e7d1      	b.n	dc94 <__sfvwrite_r+0x90>
    dcf0:	e9d5 a600 	ldrd	sl, r6, [r5]
    dcf4:	3508      	adds	r5, #8
    dcf6:	e7a0      	b.n	dc3a <__sfvwrite_r+0x36>
    dcf8:	4621      	mov	r1, r4
    dcfa:	4640      	mov	r0, r8
    dcfc:	f7fd f9ce 	bl	b09c <_fflush_r>
    dd00:	b388      	cbz	r0, dd66 <__sfvwrite_r+0x162>
    dd02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    dd06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    dd0a:	f04f 30ff 	mov.w	r0, #4294967295
    dd0e:	81a3      	strh	r3, [r4, #12]
    dd10:	b003      	add	sp, #12
    dd12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dd16:	2000      	movs	r0, #0
    dd18:	4770      	bx	lr
    dd1a:	461e      	mov	r6, r3
    dd1c:	46ba      	mov	sl, r7
    dd1e:	4699      	mov	r9, r3
    dd20:	4618      	mov	r0, r3
    dd22:	9500      	str	r5, [sp, #0]
    dd24:	461f      	mov	r7, r3
    dd26:	b366      	cbz	r6, dd82 <__sfvwrite_r+0x17e>
    dd28:	2800      	cmp	r0, #0
    dd2a:	d032      	beq.n	dd92 <__sfvwrite_r+0x18e>
    dd2c:	464a      	mov	r2, r9
    dd2e:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
    dd32:	6820      	ldr	r0, [r4, #0]
    dd34:	68a5      	ldr	r5, [r4, #8]
    dd36:	42b2      	cmp	r2, r6
    dd38:	bf28      	it	cs
    dd3a:	4632      	movcs	r2, r6
    dd3c:	4288      	cmp	r0, r1
    dd3e:	d904      	bls.n	dd4a <__sfvwrite_r+0x146>
    dd40:	eb05 0b03 	add.w	fp, r5, r3
    dd44:	455a      	cmp	r2, fp
    dd46:	f300 80a7 	bgt.w	de98 <__sfvwrite_r+0x294>
    dd4a:	4293      	cmp	r3, r2
    dd4c:	dc64      	bgt.n	de18 <__sfvwrite_r+0x214>
    dd4e:	69e1      	ldr	r1, [r4, #28]
    dd50:	6a65      	ldr	r5, [r4, #36]	; 0x24
    dd52:	463a      	mov	r2, r7
    dd54:	4640      	mov	r0, r8
    dd56:	47a8      	blx	r5
    dd58:	f1b0 0b00 	subs.w	fp, r0, #0
    dd5c:	ddd1      	ble.n	dd02 <__sfvwrite_r+0xfe>
    dd5e:	ebb9 090b 	subs.w	r9, r9, fp
    dd62:	d0c9      	beq.n	dcf8 <__sfvwrite_r+0xf4>
    dd64:	2001      	movs	r0, #1
    dd66:	f8da 3008 	ldr.w	r3, [sl, #8]
    dd6a:	eba3 030b 	sub.w	r3, r3, fp
    dd6e:	445f      	add	r7, fp
    dd70:	eba6 060b 	sub.w	r6, r6, fp
    dd74:	f8ca 3008 	str.w	r3, [sl, #8]
    dd78:	2b00      	cmp	r3, #0
    dd7a:	f43f af74 	beq.w	dc66 <__sfvwrite_r+0x62>
    dd7e:	2e00      	cmp	r6, #0
    dd80:	d1d2      	bne.n	dd28 <__sfvwrite_r+0x124>
    dd82:	9a00      	ldr	r2, [sp, #0]
    dd84:	6856      	ldr	r6, [r2, #4]
    dd86:	4613      	mov	r3, r2
    dd88:	3208      	adds	r2, #8
    dd8a:	9200      	str	r2, [sp, #0]
    dd8c:	2e00      	cmp	r6, #0
    dd8e:	d0f8      	beq.n	dd82 <__sfvwrite_r+0x17e>
    dd90:	681f      	ldr	r7, [r3, #0]
    dd92:	4632      	mov	r2, r6
    dd94:	210a      	movs	r1, #10
    dd96:	4638      	mov	r0, r7
    dd98:	f7fd fa4a 	bl	b230 <memchr>
    dd9c:	2800      	cmp	r0, #0
    dd9e:	f000 809c 	beq.w	deda <__sfvwrite_r+0x2d6>
    dda2:	3001      	adds	r0, #1
    dda4:	eba0 0907 	sub.w	r9, r0, r7
    dda8:	e7c0      	b.n	dd2c <__sfvwrite_r+0x128>
    ddaa:	6820      	ldr	r0, [r4, #0]
    ddac:	6923      	ldr	r3, [r4, #16]
    ddae:	4298      	cmp	r0, r3
    ddb0:	d816      	bhi.n	dde0 <__sfvwrite_r+0x1dc>
    ddb2:	6962      	ldr	r2, [r4, #20]
    ddb4:	42b2      	cmp	r2, r6
    ddb6:	d813      	bhi.n	dde0 <__sfvwrite_r+0x1dc>
    ddb8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    ddbc:	42b3      	cmp	r3, r6
    ddbe:	bf28      	it	cs
    ddc0:	4633      	movcs	r3, r6
    ddc2:	69e1      	ldr	r1, [r4, #28]
    ddc4:	fb93 f3f2 	sdiv	r3, r3, r2
    ddc8:	6a67      	ldr	r7, [r4, #36]	; 0x24
    ddca:	fb02 f303 	mul.w	r3, r2, r3
    ddce:	4640      	mov	r0, r8
    ddd0:	464a      	mov	r2, r9
    ddd2:	47b8      	blx	r7
    ddd4:	f1b0 0a00 	subs.w	sl, r0, #0
    ddd8:	dd93      	ble.n	dd02 <__sfvwrite_r+0xfe>
    ddda:	eba6 060a 	sub.w	r6, r6, sl
    ddde:	e776      	b.n	dcce <__sfvwrite_r+0xca>
    dde0:	45b3      	cmp	fp, r6
    dde2:	46da      	mov	sl, fp
    dde4:	bf28      	it	cs
    dde6:	46b2      	movcs	sl, r6
    dde8:	4652      	mov	r2, sl
    ddea:	4649      	mov	r1, r9
    ddec:	f7f7 fee0 	bl	5bb0 <memmove>
    ddf0:	68a3      	ldr	r3, [r4, #8]
    ddf2:	6822      	ldr	r2, [r4, #0]
    ddf4:	eba3 030a 	sub.w	r3, r3, sl
    ddf8:	4452      	add	r2, sl
    ddfa:	60a3      	str	r3, [r4, #8]
    ddfc:	6022      	str	r2, [r4, #0]
    ddfe:	2b00      	cmp	r3, #0
    de00:	d1eb      	bne.n	ddda <__sfvwrite_r+0x1d6>
    de02:	4621      	mov	r1, r4
    de04:	4640      	mov	r0, r8
    de06:	f7fd f949 	bl	b09c <_fflush_r>
    de0a:	2800      	cmp	r0, #0
    de0c:	d0e5      	beq.n	ddda <__sfvwrite_r+0x1d6>
    de0e:	e778      	b.n	dd02 <__sfvwrite_r+0xfe>
    de10:	6820      	ldr	r0, [r4, #0]
    de12:	46b3      	mov	fp, r6
    de14:	4632      	mov	r2, r6
    de16:	e74c      	b.n	dcb2 <__sfvwrite_r+0xae>
    de18:	4639      	mov	r1, r7
    de1a:	9201      	str	r2, [sp, #4]
    de1c:	f7f7 fec8 	bl	5bb0 <memmove>
    de20:	9a01      	ldr	r2, [sp, #4]
    de22:	68a3      	ldr	r3, [r4, #8]
    de24:	1a9b      	subs	r3, r3, r2
    de26:	60a3      	str	r3, [r4, #8]
    de28:	6823      	ldr	r3, [r4, #0]
    de2a:	4413      	add	r3, r2
    de2c:	6023      	str	r3, [r4, #0]
    de2e:	4693      	mov	fp, r2
    de30:	e795      	b.n	dd5e <__sfvwrite_r+0x15a>
    de32:	6823      	ldr	r3, [r4, #0]
    de34:	6921      	ldr	r1, [r4, #16]
    de36:	eba3 0b01 	sub.w	fp, r3, r1
    de3a:	6963      	ldr	r3, [r4, #20]
    de3c:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
    de40:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
    de44:	f10b 0301 	add.w	r3, fp, #1
    de48:	ea4f 0a6a 	mov.w	sl, sl, asr #1
    de4c:	4433      	add	r3, r6
    de4e:	4553      	cmp	r3, sl
    de50:	4652      	mov	r2, sl
    de52:	bf84      	itt	hi
    de54:	469a      	movhi	sl, r3
    de56:	4652      	movhi	r2, sl
    de58:	0543      	lsls	r3, r0, #21
    de5a:	d52c      	bpl.n	deb6 <__sfvwrite_r+0x2b2>
    de5c:	4611      	mov	r1, r2
    de5e:	4640      	mov	r0, r8
    de60:	f7f6 f802 	bl	3e68 <_malloc_r>
    de64:	2800      	cmp	r0, #0
    de66:	d03b      	beq.n	dee0 <__sfvwrite_r+0x2dc>
    de68:	465a      	mov	r2, fp
    de6a:	6921      	ldr	r1, [r4, #16]
    de6c:	9001      	str	r0, [sp, #4]
    de6e:	f7f4 f8cf 	bl	2010 <memcpy>
    de72:	89a2      	ldrh	r2, [r4, #12]
    de74:	9b01      	ldr	r3, [sp, #4]
    de76:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
    de7a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    de7e:	81a2      	strh	r2, [r4, #12]
    de80:	eb03 000b 	add.w	r0, r3, fp
    de84:	6123      	str	r3, [r4, #16]
    de86:	ebaa 030b 	sub.w	r3, sl, fp
    de8a:	f8c4 a014 	str.w	sl, [r4, #20]
    de8e:	60a3      	str	r3, [r4, #8]
    de90:	6020      	str	r0, [r4, #0]
    de92:	46b3      	mov	fp, r6
    de94:	4632      	mov	r2, r6
    de96:	e70c      	b.n	dcb2 <__sfvwrite_r+0xae>
    de98:	4639      	mov	r1, r7
    de9a:	465a      	mov	r2, fp
    de9c:	f7f7 fe88 	bl	5bb0 <memmove>
    dea0:	6823      	ldr	r3, [r4, #0]
    dea2:	445b      	add	r3, fp
    dea4:	6023      	str	r3, [r4, #0]
    dea6:	4621      	mov	r1, r4
    dea8:	4640      	mov	r0, r8
    deaa:	f7fd f8f7 	bl	b09c <_fflush_r>
    deae:	2800      	cmp	r0, #0
    deb0:	f43f af55 	beq.w	dd5e <__sfvwrite_r+0x15a>
    deb4:	e725      	b.n	dd02 <__sfvwrite_r+0xfe>
    deb6:	4640      	mov	r0, r8
    deb8:	f7f6 fa9e 	bl	43f8 <_realloc_r>
    debc:	4603      	mov	r3, r0
    debe:	2800      	cmp	r0, #0
    dec0:	d1de      	bne.n	de80 <__sfvwrite_r+0x27c>
    dec2:	6921      	ldr	r1, [r4, #16]
    dec4:	4640      	mov	r0, r8
    dec6:	f7f8 fbad 	bl	6624 <_free_r>
    deca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    dece:	220c      	movs	r2, #12
    ded0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    ded4:	f8c8 2000 	str.w	r2, [r8]
    ded8:	e715      	b.n	dd06 <__sfvwrite_r+0x102>
    deda:	1c72      	adds	r2, r6, #1
    dedc:	4691      	mov	r9, r2
    dede:	e726      	b.n	dd2e <__sfvwrite_r+0x12a>
    dee0:	220c      	movs	r2, #12
    dee2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    dee6:	f8c8 2000 	str.w	r2, [r8]
    deea:	e70c      	b.n	dd06 <__sfvwrite_r+0x102>
    deec:	f04f 30ff 	mov.w	r0, #4294967295
    def0:	e6ba      	b.n	dc68 <__sfvwrite_r+0x64>
    def2:	bf00      	nop
    def4:	7ffffc00 	.word	0x7ffffc00

0000def8 <__submore>:
    def8:	f101 0340 	add.w	r3, r1, #64	; 0x40
    defc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    df00:	460c      	mov	r4, r1
    df02:	6b09      	ldr	r1, [r1, #48]	; 0x30
    df04:	4299      	cmp	r1, r3
    df06:	d014      	beq.n	df32 <__submore+0x3a>
    df08:	6b66      	ldr	r6, [r4, #52]	; 0x34
    df0a:	0077      	lsls	r7, r6, #1
    df0c:	463a      	mov	r2, r7
    df0e:	f7f6 fa73 	bl	43f8 <_realloc_r>
    df12:	4605      	mov	r5, r0
    df14:	b340      	cbz	r0, df68 <__submore+0x70>
    df16:	eb00 0806 	add.w	r8, r0, r6
    df1a:	4601      	mov	r1, r0
    df1c:	4632      	mov	r2, r6
    df1e:	4640      	mov	r0, r8
    df20:	f7f4 f876 	bl	2010 <memcpy>
    df24:	e9c4 570c 	strd	r5, r7, [r4, #48]	; 0x30
    df28:	f8c4 8000 	str.w	r8, [r4]
    df2c:	2000      	movs	r0, #0
    df2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    df32:	f44f 6180 	mov.w	r1, #1024	; 0x400
    df36:	f7f5 ff97 	bl	3e68 <_malloc_r>
    df3a:	b1a8      	cbz	r0, df68 <__submore+0x70>
    df3c:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
    df40:	f44f 6280 	mov.w	r2, #1024	; 0x400
    df44:	e9c4 020c 	strd	r0, r2, [r4, #48]	; 0x30
    df48:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
    df4c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    df50:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
    df54:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
    df58:	f880 23fd 	strb.w	r2, [r0, #1021]	; 0x3fd
    df5c:	f200 33fd 	addw	r3, r0, #1021	; 0x3fd
    df60:	6023      	str	r3, [r4, #0]
    df62:	2000      	movs	r0, #0
    df64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    df68:	f04f 30ff 	mov.w	r0, #4294967295
    df6c:	e7df      	b.n	df2e <__submore+0x36>
    df6e:	bf00      	nop

0000df70 <__swsetup_r>:
    df70:	b538      	push	{r3, r4, r5, lr}
    df72:	4b31      	ldr	r3, [pc, #196]	; (e038 <__swsetup_r+0xc8>)
    df74:	681b      	ldr	r3, [r3, #0]
    df76:	4605      	mov	r5, r0
    df78:	460c      	mov	r4, r1
    df7a:	b113      	cbz	r3, df82 <__swsetup_r+0x12>
    df7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    df7e:	2a00      	cmp	r2, #0
    df80:	d04e      	beq.n	e020 <__swsetup_r+0xb0>
    df82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    df86:	0718      	lsls	r0, r3, #28
    df88:	b29a      	uxth	r2, r3
    df8a:	d51c      	bpl.n	dfc6 <__swsetup_r+0x56>
    df8c:	6921      	ldr	r1, [r4, #16]
    df8e:	b329      	cbz	r1, dfdc <__swsetup_r+0x6c>
    df90:	f012 0001 	ands.w	r0, r2, #1
    df94:	d007      	beq.n	dfa6 <__swsetup_r+0x36>
    df96:	2000      	movs	r0, #0
    df98:	60a0      	str	r0, [r4, #8]
    df9a:	6960      	ldr	r0, [r4, #20]
    df9c:	4240      	negs	r0, r0
    df9e:	61a0      	str	r0, [r4, #24]
    dfa0:	b139      	cbz	r1, dfb2 <__swsetup_r+0x42>
    dfa2:	2000      	movs	r0, #0
    dfa4:	bd38      	pop	{r3, r4, r5, pc}
    dfa6:	0795      	lsls	r5, r2, #30
    dfa8:	bf58      	it	pl
    dfaa:	6960      	ldrpl	r0, [r4, #20]
    dfac:	60a0      	str	r0, [r4, #8]
    dfae:	2900      	cmp	r1, #0
    dfb0:	d1f7      	bne.n	dfa2 <__swsetup_r+0x32>
    dfb2:	0612      	lsls	r2, r2, #24
    dfb4:	bf58      	it	pl
    dfb6:	4608      	movpl	r0, r1
    dfb8:	d5f4      	bpl.n	dfa4 <__swsetup_r+0x34>
    dfba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    dfbe:	81a3      	strh	r3, [r4, #12]
    dfc0:	f04f 30ff 	mov.w	r0, #4294967295
    dfc4:	bd38      	pop	{r3, r4, r5, pc}
    dfc6:	06d1      	lsls	r1, r2, #27
    dfc8:	d52e      	bpl.n	e028 <__swsetup_r+0xb8>
    dfca:	0752      	lsls	r2, r2, #29
    dfcc:	d414      	bmi.n	dff8 <__swsetup_r+0x88>
    dfce:	6921      	ldr	r1, [r4, #16]
    dfd0:	f043 0308 	orr.w	r3, r3, #8
    dfd4:	81a3      	strh	r3, [r4, #12]
    dfd6:	b29a      	uxth	r2, r3
    dfd8:	2900      	cmp	r1, #0
    dfda:	d1d9      	bne.n	df90 <__swsetup_r+0x20>
    dfdc:	f402 7020 	and.w	r0, r2, #640	; 0x280
    dfe0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    dfe4:	d0d4      	beq.n	df90 <__swsetup_r+0x20>
    dfe6:	4621      	mov	r1, r4
    dfe8:	4628      	mov	r0, r5
    dfea:	f000 f977 	bl	e2dc <__smakebuf_r>
    dfee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    dff2:	6921      	ldr	r1, [r4, #16]
    dff4:	b29a      	uxth	r2, r3
    dff6:	e7cb      	b.n	df90 <__swsetup_r+0x20>
    dff8:	6b21      	ldr	r1, [r4, #48]	; 0x30
    dffa:	b151      	cbz	r1, e012 <__swsetup_r+0xa2>
    dffc:	f104 0240 	add.w	r2, r4, #64	; 0x40
    e000:	4291      	cmp	r1, r2
    e002:	d004      	beq.n	e00e <__swsetup_r+0x9e>
    e004:	4628      	mov	r0, r5
    e006:	f7f8 fb0d 	bl	6624 <_free_r>
    e00a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    e00e:	2200      	movs	r2, #0
    e010:	6322      	str	r2, [r4, #48]	; 0x30
    e012:	6921      	ldr	r1, [r4, #16]
    e014:	2200      	movs	r2, #0
    e016:	e9c4 1200 	strd	r1, r2, [r4]
    e01a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    e01e:	e7d7      	b.n	dfd0 <__swsetup_r+0x60>
    e020:	4618      	mov	r0, r3
    e022:	f7f7 fc65 	bl	58f0 <__sinit>
    e026:	e7ac      	b.n	df82 <__swsetup_r+0x12>
    e028:	2209      	movs	r2, #9
    e02a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    e02e:	602a      	str	r2, [r5, #0]
    e030:	f04f 30ff 	mov.w	r0, #4294967295
    e034:	81a3      	strh	r3, [r4, #12]
    e036:	bd38      	pop	{r3, r4, r5, pc}
    e038:	200081d0 	.word	0x200081d0

0000e03c <__fputwc>:
    e03c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e040:	b082      	sub	sp, #8
    e042:	4682      	mov	sl, r0
    e044:	4688      	mov	r8, r1
    e046:	4614      	mov	r4, r2
    e048:	f7f7 ff5e 	bl	5f08 <__locale_mb_cur_max>
    e04c:	2801      	cmp	r0, #1
    e04e:	d103      	bne.n	e058 <__fputwc+0x1c>
    e050:	f108 33ff 	add.w	r3, r8, #4294967295
    e054:	2bfe      	cmp	r3, #254	; 0xfe
    e056:	d936      	bls.n	e0c6 <__fputwc+0x8a>
    e058:	f10d 0904 	add.w	r9, sp, #4
    e05c:	4642      	mov	r2, r8
    e05e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
    e062:	4649      	mov	r1, r9
    e064:	4650      	mov	r0, sl
    e066:	f7fe fb29 	bl	c6bc <_wcrtomb_r>
    e06a:	1c42      	adds	r2, r0, #1
    e06c:	4606      	mov	r6, r0
    e06e:	d032      	beq.n	e0d6 <__fputwc+0x9a>
    e070:	b320      	cbz	r0, e0bc <__fputwc+0x80>
    e072:	f89d c004 	ldrb.w	ip, [sp, #4]
    e076:	2500      	movs	r5, #0
    e078:	e009      	b.n	e08e <__fputwc+0x52>
    e07a:	6823      	ldr	r3, [r4, #0]
    e07c:	1c5a      	adds	r2, r3, #1
    e07e:	6022      	str	r2, [r4, #0]
    e080:	f883 c000 	strb.w	ip, [r3]
    e084:	3501      	adds	r5, #1
    e086:	42b5      	cmp	r5, r6
    e088:	d218      	bcs.n	e0bc <__fputwc+0x80>
    e08a:	f819 cf01 	ldrb.w	ip, [r9, #1]!
    e08e:	68a3      	ldr	r3, [r4, #8]
    e090:	3b01      	subs	r3, #1
    e092:	2b00      	cmp	r3, #0
    e094:	60a3      	str	r3, [r4, #8]
    e096:	daf0      	bge.n	e07a <__fputwc+0x3e>
    e098:	69a7      	ldr	r7, [r4, #24]
    e09a:	42bb      	cmp	r3, r7
    e09c:	4661      	mov	r1, ip
    e09e:	4622      	mov	r2, r4
    e0a0:	4650      	mov	r0, sl
    e0a2:	db02      	blt.n	e0aa <__fputwc+0x6e>
    e0a4:	f1bc 0f0a 	cmp.w	ip, #10
    e0a8:	d1e7      	bne.n	e07a <__fputwc+0x3e>
    e0aa:	f000 f983 	bl	e3b4 <__swbuf_r>
    e0ae:	1c43      	adds	r3, r0, #1
    e0b0:	d1e8      	bne.n	e084 <__fputwc+0x48>
    e0b2:	4606      	mov	r6, r0
    e0b4:	4630      	mov	r0, r6
    e0b6:	b002      	add	sp, #8
    e0b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e0bc:	4646      	mov	r6, r8
    e0be:	4630      	mov	r0, r6
    e0c0:	b002      	add	sp, #8
    e0c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e0c6:	fa5f fc88 	uxtb.w	ip, r8
    e0ca:	f88d c004 	strb.w	ip, [sp, #4]
    e0ce:	4606      	mov	r6, r0
    e0d0:	f10d 0904 	add.w	r9, sp, #4
    e0d4:	e7cf      	b.n	e076 <__fputwc+0x3a>
    e0d6:	89a3      	ldrh	r3, [r4, #12]
    e0d8:	4630      	mov	r0, r6
    e0da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    e0de:	81a3      	strh	r3, [r4, #12]
    e0e0:	b002      	add	sp, #8
    e0e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e0e6:	bf00      	nop

0000e0e8 <_fputwc_r>:
    e0e8:	b530      	push	{r4, r5, lr}
    e0ea:	6e53      	ldr	r3, [r2, #100]	; 0x64
    e0ec:	f013 0f01 	tst.w	r3, #1
    e0f0:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    e0f4:	4614      	mov	r4, r2
    e0f6:	b083      	sub	sp, #12
    e0f8:	4605      	mov	r5, r0
    e0fa:	b29a      	uxth	r2, r3
    e0fc:	d101      	bne.n	e102 <_fputwc_r+0x1a>
    e0fe:	0598      	lsls	r0, r3, #22
    e100:	d51c      	bpl.n	e13c <_fputwc_r+0x54>
    e102:	0490      	lsls	r0, r2, #18
    e104:	d406      	bmi.n	e114 <_fputwc_r+0x2c>
    e106:	6e62      	ldr	r2, [r4, #100]	; 0x64
    e108:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    e10c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    e110:	81a3      	strh	r3, [r4, #12]
    e112:	6662      	str	r2, [r4, #100]	; 0x64
    e114:	4622      	mov	r2, r4
    e116:	4628      	mov	r0, r5
    e118:	f7ff ff90 	bl	e03c <__fputwc>
    e11c:	6e63      	ldr	r3, [r4, #100]	; 0x64
    e11e:	07da      	lsls	r2, r3, #31
    e120:	4605      	mov	r5, r0
    e122:	d402      	bmi.n	e12a <_fputwc_r+0x42>
    e124:	89a3      	ldrh	r3, [r4, #12]
    e126:	059b      	lsls	r3, r3, #22
    e128:	d502      	bpl.n	e130 <_fputwc_r+0x48>
    e12a:	4628      	mov	r0, r5
    e12c:	b003      	add	sp, #12
    e12e:	bd30      	pop	{r4, r5, pc}
    e130:	6da0      	ldr	r0, [r4, #88]	; 0x58
    e132:	f7f7 ff85 	bl	6040 <__retarget_lock_release_recursive>
    e136:	4628      	mov	r0, r5
    e138:	b003      	add	sp, #12
    e13a:	bd30      	pop	{r4, r5, pc}
    e13c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    e13e:	9101      	str	r1, [sp, #4]
    e140:	f7f7 ff7c 	bl	603c <__retarget_lock_acquire_recursive>
    e144:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    e148:	9901      	ldr	r1, [sp, #4]
    e14a:	b29a      	uxth	r2, r3
    e14c:	e7d9      	b.n	e102 <_fputwc_r+0x1a>
    e14e:	bf00      	nop

0000e150 <_wcsnrtombs_l>:
    e150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e154:	b08b      	sub	sp, #44	; 0x2c
    e156:	e9dd 8a15 	ldrd	r8, sl, [sp, #84]	; 0x54
    e15a:	9f14      	ldr	r7, [sp, #80]	; 0x50
    e15c:	9103      	str	r1, [sp, #12]
    e15e:	4681      	mov	r9, r0
    e160:	9205      	str	r2, [sp, #20]
    e162:	461e      	mov	r6, r3
    e164:	f1b8 0f00 	cmp.w	r8, #0
    e168:	d05c      	beq.n	e224 <_wcsnrtombs_l+0xd4>
    e16a:	9b03      	ldr	r3, [sp, #12]
    e16c:	2b00      	cmp	r3, #0
    e16e:	d05e      	beq.n	e22e <_wcsnrtombs_l+0xde>
    e170:	9b05      	ldr	r3, [sp, #20]
    e172:	681d      	ldr	r5, [r3, #0]
    e174:	2f00      	cmp	r7, #0
    e176:	d06a      	beq.n	e24e <_wcsnrtombs_l+0xfe>
    e178:	1e74      	subs	r4, r6, #1
    e17a:	b34e      	cbz	r6, e1d0 <_wcsnrtombs_l+0x80>
    e17c:	9b03      	ldr	r3, [sp, #12]
    e17e:	9304      	str	r3, [sp, #16]
    e180:	3d04      	subs	r5, #4
    e182:	2600      	movs	r6, #0
    e184:	9501      	str	r5, [sp, #4]
    e186:	e00b      	b.n	e1a0 <_wcsnrtombs_l+0x50>
    e188:	9b03      	ldr	r3, [sp, #12]
    e18a:	bb2b      	cbnz	r3, e1d8 <_wcsnrtombs_l+0x88>
    e18c:	9b01      	ldr	r3, [sp, #4]
    e18e:	681a      	ldr	r2, [r3, #0]
    e190:	2a00      	cmp	r2, #0
    e192:	d03a      	beq.n	e20a <_wcsnrtombs_l+0xba>
    e194:	45bc      	cmp	ip, r7
    e196:	d25c      	bcs.n	e252 <_wcsnrtombs_l+0x102>
    e198:	3c01      	subs	r4, #1
    e19a:	1c63      	adds	r3, r4, #1
    e19c:	4666      	mov	r6, ip
    e19e:	d017      	beq.n	e1d0 <_wcsnrtombs_l+0x80>
    e1a0:	f8d8 3000 	ldr.w	r3, [r8]
    e1a4:	9302      	str	r3, [sp, #8]
    e1a6:	9b01      	ldr	r3, [sp, #4]
    e1a8:	f8da 50e0 	ldr.w	r5, [sl, #224]	; 0xe0
    e1ac:	f853 2f04 	ldr.w	r2, [r3, #4]!
    e1b0:	9301      	str	r3, [sp, #4]
    e1b2:	a907      	add	r1, sp, #28
    e1b4:	4643      	mov	r3, r8
    e1b6:	4648      	mov	r0, r9
    e1b8:	f8d8 b004 	ldr.w	fp, [r8, #4]
    e1bc:	47a8      	blx	r5
    e1be:	1c42      	adds	r2, r0, #1
    e1c0:	d03a      	beq.n	e238 <_wcsnrtombs_l+0xe8>
    e1c2:	eb00 0c06 	add.w	ip, r0, r6
    e1c6:	45bc      	cmp	ip, r7
    e1c8:	d9de      	bls.n	e188 <_wcsnrtombs_l+0x38>
    e1ca:	9b02      	ldr	r3, [sp, #8]
    e1cc:	e9c8 3b00 	strd	r3, fp, [r8]
    e1d0:	4630      	mov	r0, r6
    e1d2:	b00b      	add	sp, #44	; 0x2c
    e1d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e1d8:	2800      	cmp	r0, #0
    e1da:	dd0e      	ble.n	e1fa <_wcsnrtombs_l+0xaa>
    e1dc:	9b04      	ldr	r3, [sp, #16]
    e1de:	9d01      	ldr	r5, [sp, #4]
    e1e0:	4418      	add	r0, r3
    e1e2:	1e5a      	subs	r2, r3, #1
    e1e4:	a907      	add	r1, sp, #28
    e1e6:	f100 3eff 	add.w	lr, r0, #4294967295
    e1ea:	f811 3b01 	ldrb.w	r3, [r1], #1
    e1ee:	f802 3f01 	strb.w	r3, [r2, #1]!
    e1f2:	4572      	cmp	r2, lr
    e1f4:	d1f9      	bne.n	e1ea <_wcsnrtombs_l+0x9a>
    e1f6:	9501      	str	r5, [sp, #4]
    e1f8:	9004      	str	r0, [sp, #16]
    e1fa:	9b05      	ldr	r3, [sp, #20]
    e1fc:	681a      	ldr	r2, [r3, #0]
    e1fe:	3204      	adds	r2, #4
    e200:	601a      	str	r2, [r3, #0]
    e202:	9b01      	ldr	r3, [sp, #4]
    e204:	681a      	ldr	r2, [r3, #0]
    e206:	2a00      	cmp	r2, #0
    e208:	d1c4      	bne.n	e194 <_wcsnrtombs_l+0x44>
    e20a:	9b03      	ldr	r3, [sp, #12]
    e20c:	b10b      	cbz	r3, e212 <_wcsnrtombs_l+0xc2>
    e20e:	9b05      	ldr	r3, [sp, #20]
    e210:	601a      	str	r2, [r3, #0]
    e212:	f10c 36ff 	add.w	r6, ip, #4294967295
    e216:	2200      	movs	r2, #0
    e218:	4630      	mov	r0, r6
    e21a:	f8c8 2000 	str.w	r2, [r8]
    e21e:	b00b      	add	sp, #44	; 0x2c
    e220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e224:	9b03      	ldr	r3, [sp, #12]
    e226:	f500 7886 	add.w	r8, r0, #268	; 0x10c
    e22a:	2b00      	cmp	r3, #0
    e22c:	d1a0      	bne.n	e170 <_wcsnrtombs_l+0x20>
    e22e:	9b05      	ldr	r3, [sp, #20]
    e230:	f04f 37ff 	mov.w	r7, #4294967295
    e234:	681d      	ldr	r5, [r3, #0]
    e236:	e79f      	b.n	e178 <_wcsnrtombs_l+0x28>
    e238:	4606      	mov	r6, r0
    e23a:	218a      	movs	r1, #138	; 0x8a
    e23c:	2200      	movs	r2, #0
    e23e:	4630      	mov	r0, r6
    e240:	f8c9 1000 	str.w	r1, [r9]
    e244:	f8c8 2000 	str.w	r2, [r8]
    e248:	b00b      	add	sp, #44	; 0x2c
    e24a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e24e:	463e      	mov	r6, r7
    e250:	e7be      	b.n	e1d0 <_wcsnrtombs_l+0x80>
    e252:	4666      	mov	r6, ip
    e254:	e7bc      	b.n	e1d0 <_wcsnrtombs_l+0x80>
    e256:	bf00      	nop

0000e258 <_wcsnrtombs_r>:
    e258:	b510      	push	{r4, lr}
    e25a:	b084      	sub	sp, #16
    e25c:	4c05      	ldr	r4, [pc, #20]	; (e274 <_wcsnrtombs_r+0x1c>)
    e25e:	9806      	ldr	r0, [sp, #24]
    e260:	9000      	str	r0, [sp, #0]
    e262:	9807      	ldr	r0, [sp, #28]
    e264:	9001      	str	r0, [sp, #4]
    e266:	4804      	ldr	r0, [pc, #16]	; (e278 <_wcsnrtombs_r+0x20>)
    e268:	6800      	ldr	r0, [r0, #0]
    e26a:	9402      	str	r4, [sp, #8]
    e26c:	f7ff ff70 	bl	e150 <_wcsnrtombs_l>
    e270:	b004      	add	sp, #16
    e272:	bd10      	pop	{r4, pc}
    e274:	20007c48 	.word	0x20007c48
    e278:	200081d0 	.word	0x200081d0

0000e27c <category>:
    e27c:	4b15      	ldr	r3, [pc, #84]	; (e2d4 <category+0x58>)
    e27e:	4298      	cmp	r0, r3
    e280:	d823      	bhi.n	e2ca <category+0x4e>
    e282:	b570      	push	{r4, r5, r6, lr}
    e284:	4e14      	ldr	r6, [pc, #80]	; (e2d8 <category+0x5c>)
    e286:	f04f 0e00 	mov.w	lr, #0
    e28a:	f640 04db 	movw	r4, #2267	; 0x8db
    e28e:	e003      	b.n	e298 <category+0x1c>
    e290:	f102 0e01 	add.w	lr, r2, #1
    e294:	45a6      	cmp	lr, r4
    e296:	dc16      	bgt.n	e2c6 <category+0x4a>
    e298:	eb04 020e 	add.w	r2, r4, lr
    e29c:	f022 0301 	bic.w	r3, r2, #1
    e2a0:	eb03 0362 	add.w	r3, r3, r2, asr #1
    e2a4:	eb06 0343 	add.w	r3, r6, r3, lsl #1
    e2a8:	1052      	asrs	r2, r2, #1
    e2aa:	7859      	ldrb	r1, [r3, #1]
    e2ac:	885d      	ldrh	r5, [r3, #2]
    e2ae:	f8b3 c004 	ldrh.w	ip, [r3, #4]
    e2b2:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
    e2b6:	448c      	add	ip, r1
    e2b8:	4560      	cmp	r0, ip
    e2ba:	d8e9      	bhi.n	e290 <category+0x14>
    e2bc:	4288      	cmp	r0, r1
    e2be:	d206      	bcs.n	e2ce <category+0x52>
    e2c0:	1e54      	subs	r4, r2, #1
    e2c2:	45a6      	cmp	lr, r4
    e2c4:	dde8      	ble.n	e298 <category+0x1c>
    e2c6:	20ff      	movs	r0, #255	; 0xff
    e2c8:	bd70      	pop	{r4, r5, r6, pc}
    e2ca:	20ff      	movs	r0, #255	; 0xff
    e2cc:	4770      	bx	lr
    e2ce:	7818      	ldrb	r0, [r3, #0]
    e2d0:	bd70      	pop	{r4, r5, r6, pc}
    e2d2:	bf00      	nop
    e2d4:	000e01ef 	.word	0x000e01ef
    e2d8:	200023b0 	.word	0x200023b0

0000e2dc <__smakebuf_r>:
    e2dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e2e0:	898b      	ldrh	r3, [r1, #12]
    e2e2:	460c      	mov	r4, r1
    e2e4:	0799      	lsls	r1, r3, #30
    e2e6:	b096      	sub	sp, #88	; 0x58
    e2e8:	d508      	bpl.n	e2fc <__smakebuf_r+0x20>
    e2ea:	f104 0343 	add.w	r3, r4, #67	; 0x43
    e2ee:	2201      	movs	r2, #1
    e2f0:	e9c4 3204 	strd	r3, r2, [r4, #16]
    e2f4:	6023      	str	r3, [r4, #0]
    e2f6:	b016      	add	sp, #88	; 0x58
    e2f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e2fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    e300:	2900      	cmp	r1, #0
    e302:	4606      	mov	r6, r0
    e304:	db25      	blt.n	e352 <__smakebuf_r+0x76>
    e306:	466a      	mov	r2, sp
    e308:	f000 f8ac 	bl	e464 <_fstat_r>
    e30c:	2800      	cmp	r0, #0
    e30e:	db1f      	blt.n	e350 <__smakebuf_r+0x74>
    e310:	9d01      	ldr	r5, [sp, #4]
    e312:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
    e316:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
    e31a:	fab5 f585 	clz	r5, r5
    e31e:	f44f 6880 	mov.w	r8, #1024	; 0x400
    e322:	096d      	lsrs	r5, r5, #5
    e324:	f44f 6700 	mov.w	r7, #2048	; 0x800
    e328:	4641      	mov	r1, r8
    e32a:	4630      	mov	r0, r6
    e32c:	f7f5 fd9c 	bl	3e68 <_malloc_r>
    e330:	b1e0      	cbz	r0, e36c <__smakebuf_r+0x90>
    e332:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    e336:	f8c4 8014 	str.w	r8, [r4, #20]
    e33a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    e33e:	6020      	str	r0, [r4, #0]
    e340:	6120      	str	r0, [r4, #16]
    e342:	81a3      	strh	r3, [r4, #12]
    e344:	bb35      	cbnz	r5, e394 <__smakebuf_r+0xb8>
    e346:	433b      	orrs	r3, r7
    e348:	81a3      	strh	r3, [r4, #12]
    e34a:	b016      	add	sp, #88	; 0x58
    e34c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e350:	89a3      	ldrh	r3, [r4, #12]
    e352:	f013 0580 	ands.w	r5, r3, #128	; 0x80
    e356:	d019      	beq.n	e38c <__smakebuf_r+0xb0>
    e358:	f04f 0840 	mov.w	r8, #64	; 0x40
    e35c:	2500      	movs	r5, #0
    e35e:	4641      	mov	r1, r8
    e360:	4630      	mov	r0, r6
    e362:	462f      	mov	r7, r5
    e364:	f7f5 fd80 	bl	3e68 <_malloc_r>
    e368:	2800      	cmp	r0, #0
    e36a:	d1e2      	bne.n	e332 <__smakebuf_r+0x56>
    e36c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    e370:	059a      	lsls	r2, r3, #22
    e372:	d4c0      	bmi.n	e2f6 <__smakebuf_r+0x1a>
    e374:	f023 0303 	bic.w	r3, r3, #3
    e378:	f104 0243 	add.w	r2, r4, #67	; 0x43
    e37c:	f043 0302 	orr.w	r3, r3, #2
    e380:	2101      	movs	r1, #1
    e382:	e9c4 2104 	strd	r2, r1, [r4, #16]
    e386:	81a3      	strh	r3, [r4, #12]
    e388:	6022      	str	r2, [r4, #0]
    e38a:	e7b4      	b.n	e2f6 <__smakebuf_r+0x1a>
    e38c:	f44f 6880 	mov.w	r8, #1024	; 0x400
    e390:	462f      	mov	r7, r5
    e392:	e7c9      	b.n	e328 <__smakebuf_r+0x4c>
    e394:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    e398:	4630      	mov	r0, r6
    e39a:	f000 f879 	bl	e490 <_isatty_r>
    e39e:	b910      	cbnz	r0, e3a6 <__smakebuf_r+0xca>
    e3a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    e3a4:	e7cf      	b.n	e346 <__smakebuf_r+0x6a>
    e3a6:	89a3      	ldrh	r3, [r4, #12]
    e3a8:	f023 0303 	bic.w	r3, r3, #3
    e3ac:	f043 0301 	orr.w	r3, r3, #1
    e3b0:	b21b      	sxth	r3, r3
    e3b2:	e7c8      	b.n	e346 <__smakebuf_r+0x6a>

0000e3b4 <__swbuf_r>:
    e3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e3b6:	460d      	mov	r5, r1
    e3b8:	4614      	mov	r4, r2
    e3ba:	4606      	mov	r6, r0
    e3bc:	b110      	cbz	r0, e3c4 <__swbuf_r+0x10>
    e3be:	6b43      	ldr	r3, [r0, #52]	; 0x34
    e3c0:	2b00      	cmp	r3, #0
    e3c2:	d04c      	beq.n	e45e <__swbuf_r+0xaa>
    e3c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    e3c8:	69a3      	ldr	r3, [r4, #24]
    e3ca:	60a3      	str	r3, [r4, #8]
    e3cc:	0717      	lsls	r7, r2, #28
    e3ce:	b290      	uxth	r0, r2
    e3d0:	d51b      	bpl.n	e40a <__swbuf_r+0x56>
    e3d2:	6923      	ldr	r3, [r4, #16]
    e3d4:	b1cb      	cbz	r3, e40a <__swbuf_r+0x56>
    e3d6:	b2ed      	uxtb	r5, r5
    e3d8:	0481      	lsls	r1, r0, #18
    e3da:	462f      	mov	r7, r5
    e3dc:	d522      	bpl.n	e424 <__swbuf_r+0x70>
    e3de:	6822      	ldr	r2, [r4, #0]
    e3e0:	6961      	ldr	r1, [r4, #20]
    e3e2:	1ad3      	subs	r3, r2, r3
    e3e4:	4299      	cmp	r1, r3
    e3e6:	dd29      	ble.n	e43c <__swbuf_r+0x88>
    e3e8:	3301      	adds	r3, #1
    e3ea:	68a1      	ldr	r1, [r4, #8]
    e3ec:	3901      	subs	r1, #1
    e3ee:	60a1      	str	r1, [r4, #8]
    e3f0:	1c51      	adds	r1, r2, #1
    e3f2:	6021      	str	r1, [r4, #0]
    e3f4:	7015      	strb	r5, [r2, #0]
    e3f6:	6962      	ldr	r2, [r4, #20]
    e3f8:	429a      	cmp	r2, r3
    e3fa:	d027      	beq.n	e44c <__swbuf_r+0x98>
    e3fc:	89a3      	ldrh	r3, [r4, #12]
    e3fe:	07db      	lsls	r3, r3, #31
    e400:	d501      	bpl.n	e406 <__swbuf_r+0x52>
    e402:	2d0a      	cmp	r5, #10
    e404:	d022      	beq.n	e44c <__swbuf_r+0x98>
    e406:	4638      	mov	r0, r7
    e408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e40a:	4621      	mov	r1, r4
    e40c:	4630      	mov	r0, r6
    e40e:	f7ff fdaf 	bl	df70 <__swsetup_r>
    e412:	bb08      	cbnz	r0, e458 <__swbuf_r+0xa4>
    e414:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    e418:	6923      	ldr	r3, [r4, #16]
    e41a:	b290      	uxth	r0, r2
    e41c:	b2ed      	uxtb	r5, r5
    e41e:	0481      	lsls	r1, r0, #18
    e420:	462f      	mov	r7, r5
    e422:	d4dc      	bmi.n	e3de <__swbuf_r+0x2a>
    e424:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    e428:	81a2      	strh	r2, [r4, #12]
    e42a:	6e62      	ldr	r2, [r4, #100]	; 0x64
    e42c:	6961      	ldr	r1, [r4, #20]
    e42e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
    e432:	6662      	str	r2, [r4, #100]	; 0x64
    e434:	6822      	ldr	r2, [r4, #0]
    e436:	1ad3      	subs	r3, r2, r3
    e438:	4299      	cmp	r1, r3
    e43a:	dcd5      	bgt.n	e3e8 <__swbuf_r+0x34>
    e43c:	4621      	mov	r1, r4
    e43e:	4630      	mov	r0, r6
    e440:	f7fc fe2c 	bl	b09c <_fflush_r>
    e444:	b940      	cbnz	r0, e458 <__swbuf_r+0xa4>
    e446:	6822      	ldr	r2, [r4, #0]
    e448:	2301      	movs	r3, #1
    e44a:	e7ce      	b.n	e3ea <__swbuf_r+0x36>
    e44c:	4621      	mov	r1, r4
    e44e:	4630      	mov	r0, r6
    e450:	f7fc fe24 	bl	b09c <_fflush_r>
    e454:	2800      	cmp	r0, #0
    e456:	d0d6      	beq.n	e406 <__swbuf_r+0x52>
    e458:	f04f 37ff 	mov.w	r7, #4294967295
    e45c:	e7d3      	b.n	e406 <__swbuf_r+0x52>
    e45e:	f7f7 fa47 	bl	58f0 <__sinit>
    e462:	e7af      	b.n	e3c4 <__swbuf_r+0x10>

0000e464 <_fstat_r>:
    e464:	b570      	push	{r4, r5, r6, lr}
    e466:	460c      	mov	r4, r1
    e468:	4d08      	ldr	r5, [pc, #32]	; (e48c <_fstat_r+0x28>)
    e46a:	4603      	mov	r3, r0
    e46c:	2600      	movs	r6, #0
    e46e:	4620      	mov	r0, r4
    e470:	4611      	mov	r1, r2
    e472:	461c      	mov	r4, r3
    e474:	602e      	str	r6, [r5, #0]
    e476:	f7f4 f835 	bl	24e4 <_fstat>
    e47a:	1c43      	adds	r3, r0, #1
    e47c:	d000      	beq.n	e480 <_fstat_r+0x1c>
    e47e:	bd70      	pop	{r4, r5, r6, pc}
    e480:	682b      	ldr	r3, [r5, #0]
    e482:	2b00      	cmp	r3, #0
    e484:	d0fb      	beq.n	e47e <_fstat_r+0x1a>
    e486:	6023      	str	r3, [r4, #0]
    e488:	bd70      	pop	{r4, r5, r6, pc}
    e48a:	bf00      	nop
    e48c:	20008de4 	.word	0x20008de4

0000e490 <_isatty_r>:
    e490:	b538      	push	{r3, r4, r5, lr}
    e492:	4d07      	ldr	r5, [pc, #28]	; (e4b0 <_isatty_r+0x20>)
    e494:	2200      	movs	r2, #0
    e496:	4604      	mov	r4, r0
    e498:	4608      	mov	r0, r1
    e49a:	602a      	str	r2, [r5, #0]
    e49c:	f7f4 f828 	bl	24f0 <_isatty>
    e4a0:	1c43      	adds	r3, r0, #1
    e4a2:	d000      	beq.n	e4a6 <_isatty_r+0x16>
    e4a4:	bd38      	pop	{r3, r4, r5, pc}
    e4a6:	682b      	ldr	r3, [r5, #0]
    e4a8:	2b00      	cmp	r3, #0
    e4aa:	d0fb      	beq.n	e4a4 <_isatty_r+0x14>
    e4ac:	6023      	str	r3, [r4, #0]
    e4ae:	bd38      	pop	{r3, r4, r5, pc}
    e4b0:	20008de4 	.word	0x20008de4

0000e4b4 <__aeabi_drsub>:
    e4b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    e4b8:	e002      	b.n	e4c0 <__adddf3>
    e4ba:	bf00      	nop

0000e4bc <__aeabi_dsub>:
    e4bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000e4c0 <__adddf3>:
    e4c0:	b530      	push	{r4, r5, lr}
    e4c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
    e4c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
    e4ca:	ea94 0f05 	teq	r4, r5
    e4ce:	bf08      	it	eq
    e4d0:	ea90 0f02 	teqeq	r0, r2
    e4d4:	bf1f      	itttt	ne
    e4d6:	ea54 0c00 	orrsne.w	ip, r4, r0
    e4da:	ea55 0c02 	orrsne.w	ip, r5, r2
    e4de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    e4e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    e4e6:	f000 80e2 	beq.w	e6ae <__adddf3+0x1ee>
    e4ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
    e4ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    e4f2:	bfb8      	it	lt
    e4f4:	426d      	neglt	r5, r5
    e4f6:	dd0c      	ble.n	e512 <__adddf3+0x52>
    e4f8:	442c      	add	r4, r5
    e4fa:	ea80 0202 	eor.w	r2, r0, r2
    e4fe:	ea81 0303 	eor.w	r3, r1, r3
    e502:	ea82 0000 	eor.w	r0, r2, r0
    e506:	ea83 0101 	eor.w	r1, r3, r1
    e50a:	ea80 0202 	eor.w	r2, r0, r2
    e50e:	ea81 0303 	eor.w	r3, r1, r3
    e512:	2d36      	cmp	r5, #54	; 0x36
    e514:	bf88      	it	hi
    e516:	bd30      	pophi	{r4, r5, pc}
    e518:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    e51c:	ea4f 3101 	mov.w	r1, r1, lsl #12
    e520:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    e524:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    e528:	d002      	beq.n	e530 <__adddf3+0x70>
    e52a:	4240      	negs	r0, r0
    e52c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    e530:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    e534:	ea4f 3303 	mov.w	r3, r3, lsl #12
    e538:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    e53c:	d002      	beq.n	e544 <__adddf3+0x84>
    e53e:	4252      	negs	r2, r2
    e540:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    e544:	ea94 0f05 	teq	r4, r5
    e548:	f000 80a7 	beq.w	e69a <__adddf3+0x1da>
    e54c:	f1a4 0401 	sub.w	r4, r4, #1
    e550:	f1d5 0e20 	rsbs	lr, r5, #32
    e554:	db0d      	blt.n	e572 <__adddf3+0xb2>
    e556:	fa02 fc0e 	lsl.w	ip, r2, lr
    e55a:	fa22 f205 	lsr.w	r2, r2, r5
    e55e:	1880      	adds	r0, r0, r2
    e560:	f141 0100 	adc.w	r1, r1, #0
    e564:	fa03 f20e 	lsl.w	r2, r3, lr
    e568:	1880      	adds	r0, r0, r2
    e56a:	fa43 f305 	asr.w	r3, r3, r5
    e56e:	4159      	adcs	r1, r3
    e570:	e00e      	b.n	e590 <__adddf3+0xd0>
    e572:	f1a5 0520 	sub.w	r5, r5, #32
    e576:	f10e 0e20 	add.w	lr, lr, #32
    e57a:	2a01      	cmp	r2, #1
    e57c:	fa03 fc0e 	lsl.w	ip, r3, lr
    e580:	bf28      	it	cs
    e582:	f04c 0c02 	orrcs.w	ip, ip, #2
    e586:	fa43 f305 	asr.w	r3, r3, r5
    e58a:	18c0      	adds	r0, r0, r3
    e58c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    e590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    e594:	d507      	bpl.n	e5a6 <__adddf3+0xe6>
    e596:	f04f 0e00 	mov.w	lr, #0
    e59a:	f1dc 0c00 	rsbs	ip, ip, #0
    e59e:	eb7e 0000 	sbcs.w	r0, lr, r0
    e5a2:	eb6e 0101 	sbc.w	r1, lr, r1
    e5a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    e5aa:	d31b      	bcc.n	e5e4 <__adddf3+0x124>
    e5ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    e5b0:	d30c      	bcc.n	e5cc <__adddf3+0x10c>
    e5b2:	0849      	lsrs	r1, r1, #1
    e5b4:	ea5f 0030 	movs.w	r0, r0, rrx
    e5b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
    e5bc:	f104 0401 	add.w	r4, r4, #1
    e5c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
    e5c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    e5c8:	f080 809a 	bcs.w	e700 <__adddf3+0x240>
    e5cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    e5d0:	bf08      	it	eq
    e5d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    e5d6:	f150 0000 	adcs.w	r0, r0, #0
    e5da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    e5de:	ea41 0105 	orr.w	r1, r1, r5
    e5e2:	bd30      	pop	{r4, r5, pc}
    e5e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    e5e8:	4140      	adcs	r0, r0
    e5ea:	eb41 0101 	adc.w	r1, r1, r1
    e5ee:	3c01      	subs	r4, #1
    e5f0:	bf28      	it	cs
    e5f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    e5f6:	d2e9      	bcs.n	e5cc <__adddf3+0x10c>
    e5f8:	f091 0f00 	teq	r1, #0
    e5fc:	bf04      	itt	eq
    e5fe:	4601      	moveq	r1, r0
    e600:	2000      	moveq	r0, #0
    e602:	fab1 f381 	clz	r3, r1
    e606:	bf08      	it	eq
    e608:	3320      	addeq	r3, #32
    e60a:	f1a3 030b 	sub.w	r3, r3, #11
    e60e:	f1b3 0220 	subs.w	r2, r3, #32
    e612:	da0c      	bge.n	e62e <__adddf3+0x16e>
    e614:	320c      	adds	r2, #12
    e616:	dd08      	ble.n	e62a <__adddf3+0x16a>
    e618:	f102 0c14 	add.w	ip, r2, #20
    e61c:	f1c2 020c 	rsb	r2, r2, #12
    e620:	fa01 f00c 	lsl.w	r0, r1, ip
    e624:	fa21 f102 	lsr.w	r1, r1, r2
    e628:	e00c      	b.n	e644 <__adddf3+0x184>
    e62a:	f102 0214 	add.w	r2, r2, #20
    e62e:	bfd8      	it	le
    e630:	f1c2 0c20 	rsble	ip, r2, #32
    e634:	fa01 f102 	lsl.w	r1, r1, r2
    e638:	fa20 fc0c 	lsr.w	ip, r0, ip
    e63c:	bfdc      	itt	le
    e63e:	ea41 010c 	orrle.w	r1, r1, ip
    e642:	4090      	lslle	r0, r2
    e644:	1ae4      	subs	r4, r4, r3
    e646:	bfa2      	ittt	ge
    e648:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    e64c:	4329      	orrge	r1, r5
    e64e:	bd30      	popge	{r4, r5, pc}
    e650:	ea6f 0404 	mvn.w	r4, r4
    e654:	3c1f      	subs	r4, #31
    e656:	da1c      	bge.n	e692 <__adddf3+0x1d2>
    e658:	340c      	adds	r4, #12
    e65a:	dc0e      	bgt.n	e67a <__adddf3+0x1ba>
    e65c:	f104 0414 	add.w	r4, r4, #20
    e660:	f1c4 0220 	rsb	r2, r4, #32
    e664:	fa20 f004 	lsr.w	r0, r0, r4
    e668:	fa01 f302 	lsl.w	r3, r1, r2
    e66c:	ea40 0003 	orr.w	r0, r0, r3
    e670:	fa21 f304 	lsr.w	r3, r1, r4
    e674:	ea45 0103 	orr.w	r1, r5, r3
    e678:	bd30      	pop	{r4, r5, pc}
    e67a:	f1c4 040c 	rsb	r4, r4, #12
    e67e:	f1c4 0220 	rsb	r2, r4, #32
    e682:	fa20 f002 	lsr.w	r0, r0, r2
    e686:	fa01 f304 	lsl.w	r3, r1, r4
    e68a:	ea40 0003 	orr.w	r0, r0, r3
    e68e:	4629      	mov	r1, r5
    e690:	bd30      	pop	{r4, r5, pc}
    e692:	fa21 f004 	lsr.w	r0, r1, r4
    e696:	4629      	mov	r1, r5
    e698:	bd30      	pop	{r4, r5, pc}
    e69a:	f094 0f00 	teq	r4, #0
    e69e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    e6a2:	bf06      	itte	eq
    e6a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    e6a8:	3401      	addeq	r4, #1
    e6aa:	3d01      	subne	r5, #1
    e6ac:	e74e      	b.n	e54c <__adddf3+0x8c>
    e6ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    e6b2:	bf18      	it	ne
    e6b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    e6b8:	d029      	beq.n	e70e <__adddf3+0x24e>
    e6ba:	ea94 0f05 	teq	r4, r5
    e6be:	bf08      	it	eq
    e6c0:	ea90 0f02 	teqeq	r0, r2
    e6c4:	d005      	beq.n	e6d2 <__adddf3+0x212>
    e6c6:	ea54 0c00 	orrs.w	ip, r4, r0
    e6ca:	bf04      	itt	eq
    e6cc:	4619      	moveq	r1, r3
    e6ce:	4610      	moveq	r0, r2
    e6d0:	bd30      	pop	{r4, r5, pc}
    e6d2:	ea91 0f03 	teq	r1, r3
    e6d6:	bf1e      	ittt	ne
    e6d8:	2100      	movne	r1, #0
    e6da:	2000      	movne	r0, #0
    e6dc:	bd30      	popne	{r4, r5, pc}
    e6de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    e6e2:	d105      	bne.n	e6f0 <__adddf3+0x230>
    e6e4:	0040      	lsls	r0, r0, #1
    e6e6:	4149      	adcs	r1, r1
    e6e8:	bf28      	it	cs
    e6ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    e6ee:	bd30      	pop	{r4, r5, pc}
    e6f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    e6f4:	bf3c      	itt	cc
    e6f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    e6fa:	bd30      	popcc	{r4, r5, pc}
    e6fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    e700:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    e704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    e708:	f04f 0000 	mov.w	r0, #0
    e70c:	bd30      	pop	{r4, r5, pc}
    e70e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    e712:	bf1a      	itte	ne
    e714:	4619      	movne	r1, r3
    e716:	4610      	movne	r0, r2
    e718:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    e71c:	bf1c      	itt	ne
    e71e:	460b      	movne	r3, r1
    e720:	4602      	movne	r2, r0
    e722:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    e726:	bf06      	itte	eq
    e728:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    e72c:	ea91 0f03 	teqeq	r1, r3
    e730:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    e734:	bd30      	pop	{r4, r5, pc}
    e736:	bf00      	nop

0000e738 <__aeabi_ui2d>:
    e738:	f090 0f00 	teq	r0, #0
    e73c:	bf04      	itt	eq
    e73e:	2100      	moveq	r1, #0
    e740:	4770      	bxeq	lr
    e742:	b530      	push	{r4, r5, lr}
    e744:	f44f 6480 	mov.w	r4, #1024	; 0x400
    e748:	f104 0432 	add.w	r4, r4, #50	; 0x32
    e74c:	f04f 0500 	mov.w	r5, #0
    e750:	f04f 0100 	mov.w	r1, #0
    e754:	e750      	b.n	e5f8 <__adddf3+0x138>
    e756:	bf00      	nop

0000e758 <__aeabi_i2d>:
    e758:	f090 0f00 	teq	r0, #0
    e75c:	bf04      	itt	eq
    e75e:	2100      	moveq	r1, #0
    e760:	4770      	bxeq	lr
    e762:	b530      	push	{r4, r5, lr}
    e764:	f44f 6480 	mov.w	r4, #1024	; 0x400
    e768:	f104 0432 	add.w	r4, r4, #50	; 0x32
    e76c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    e770:	bf48      	it	mi
    e772:	4240      	negmi	r0, r0
    e774:	f04f 0100 	mov.w	r1, #0
    e778:	e73e      	b.n	e5f8 <__adddf3+0x138>
    e77a:	bf00      	nop

0000e77c <__aeabi_f2d>:
    e77c:	0042      	lsls	r2, r0, #1
    e77e:	ea4f 01e2 	mov.w	r1, r2, asr #3
    e782:	ea4f 0131 	mov.w	r1, r1, rrx
    e786:	ea4f 7002 	mov.w	r0, r2, lsl #28
    e78a:	bf1f      	itttt	ne
    e78c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    e790:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    e794:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    e798:	4770      	bxne	lr
    e79a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    e79e:	bf08      	it	eq
    e7a0:	4770      	bxeq	lr
    e7a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    e7a6:	bf04      	itt	eq
    e7a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    e7ac:	4770      	bxeq	lr
    e7ae:	b530      	push	{r4, r5, lr}
    e7b0:	f44f 7460 	mov.w	r4, #896	; 0x380
    e7b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    e7b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    e7bc:	e71c      	b.n	e5f8 <__adddf3+0x138>
    e7be:	bf00      	nop

0000e7c0 <__aeabi_ul2d>:
    e7c0:	ea50 0201 	orrs.w	r2, r0, r1
    e7c4:	bf08      	it	eq
    e7c6:	4770      	bxeq	lr
    e7c8:	b530      	push	{r4, r5, lr}
    e7ca:	f04f 0500 	mov.w	r5, #0
    e7ce:	e00a      	b.n	e7e6 <__aeabi_l2d+0x16>

0000e7d0 <__aeabi_l2d>:
    e7d0:	ea50 0201 	orrs.w	r2, r0, r1
    e7d4:	bf08      	it	eq
    e7d6:	4770      	bxeq	lr
    e7d8:	b530      	push	{r4, r5, lr}
    e7da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    e7de:	d502      	bpl.n	e7e6 <__aeabi_l2d+0x16>
    e7e0:	4240      	negs	r0, r0
    e7e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    e7e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
    e7ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
    e7ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    e7f2:	f43f aed8 	beq.w	e5a6 <__adddf3+0xe6>
    e7f6:	f04f 0203 	mov.w	r2, #3
    e7fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    e7fe:	bf18      	it	ne
    e800:	3203      	addne	r2, #3
    e802:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    e806:	bf18      	it	ne
    e808:	3203      	addne	r2, #3
    e80a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    e80e:	f1c2 0320 	rsb	r3, r2, #32
    e812:	fa00 fc03 	lsl.w	ip, r0, r3
    e816:	fa20 f002 	lsr.w	r0, r0, r2
    e81a:	fa01 fe03 	lsl.w	lr, r1, r3
    e81e:	ea40 000e 	orr.w	r0, r0, lr
    e822:	fa21 f102 	lsr.w	r1, r1, r2
    e826:	4414      	add	r4, r2
    e828:	e6bd      	b.n	e5a6 <__adddf3+0xe6>
    e82a:	bf00      	nop

0000e82c <__aeabi_d2lz>:
    e82c:	b508      	push	{r3, lr}
    e82e:	4602      	mov	r2, r0
    e830:	460b      	mov	r3, r1
    e832:	ec43 2b17 	vmov	d7, r2, r3
    e836:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    e83a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e83e:	d403      	bmi.n	e848 <__aeabi_d2lz+0x1c>
    e840:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    e844:	f000 b80c 	b.w	e860 <__aeabi_d2ulz>
    e848:	eeb1 7b47 	vneg.f64	d7, d7
    e84c:	ec51 0b17 	vmov	r0, r1, d7
    e850:	f000 f806 	bl	e860 <__aeabi_d2ulz>
    e854:	4240      	negs	r0, r0
    e856:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    e85a:	bd08      	pop	{r3, pc}
    e85c:	0000      	movs	r0, r0
	...

0000e860 <__aeabi_d2ulz>:
    e860:	ed9f 6b0b 	vldr	d6, [pc, #44]	; e890 <__aeabi_d2ulz+0x30>
    e864:	ec41 0b17 	vmov	d7, r0, r1
    e868:	ed9f 5b0b 	vldr	d5, [pc, #44]	; e898 <__aeabi_d2ulz+0x38>
    e86c:	ee27 6b06 	vmul.f64	d6, d7, d6
    e870:	eebc 6bc6 	vcvt.u32.f64	s12, d6
    e874:	eeb8 4b46 	vcvt.f64.u32	d4, s12
    e878:	eea4 7b45 	vfms.f64	d7, d4, d5
    e87c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    e880:	ee16 1a10 	vmov	r1, s12
    e884:	ee17 0a90 	vmov	r0, s15
    e888:	4770      	bx	lr
    e88a:	bf00      	nop
    e88c:	f3af 8000 	nop.w
    e890:	00000000 	.word	0x00000000
    e894:	3df00000 	.word	0x3df00000
    e898:	00000000 	.word	0x00000000
    e89c:	41f00000 	.word	0x41f00000

0000e8a0 <___init_veneer>:
    e8a0:	f85f f000 	ldr.w	pc, [pc]	; e8a4 <___init_veneer+0x4>
    e8a4:	60001e35 	.word	0x60001e35

0000e8a8 <___reboot_Teensyduino__veneer>:
    e8a8:	f85f f000 	ldr.w	pc, [pc]	; e8ac <___reboot_Teensyduino__veneer+0x4>
    e8ac:	60001de1 	.word	0x60001de1

Disassembly of section .fini:

0000e8b0 <_fini>:
    e8b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e8b2:	bf00      	nop
