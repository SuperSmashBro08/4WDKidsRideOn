
C:\Users\johnw\AppData\Local\arduino\sketches\327AA1E20F62E69E5802DB70EF4C5A3B/MyApp.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
	if (dest == src) return;
	do {
		*dest++ = *src++;
	} while (dest < dest_end);
#else
	asm volatile(
60001400:	4281      	cmp	r1, r0
60001402:	d005      	beq.n	60001410 <memory_copy+0x10>
60001404:	f851 3b04 	ldr.w	r3, [r1], #4
60001408:	f840 3b04 	str.w	r3, [r0], #4
6000140c:	4282      	cmp	r2, r0
6000140e:	d8f9      	bhi.n	60001404 <memory_copy+0x4>
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	"2:					\n"
	: [dest] "+r" (dest), [src] "+r" (src) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001410:	4770      	bx	lr
60001412:	bf00      	nop

60001414 <memory_clear.constprop.0>:
#if 0
	while (dest < dest_end) {
		*dest++ = 0;
	}
#else
	asm volatile(
60001414:	4a04      	ldr	r2, [pc, #16]	; (60001428 <memory_clear.constprop.0+0x14>)
60001416:	4905      	ldr	r1, [pc, #20]	; (6000142c <memory_clear.constprop.0+0x18>)
60001418:	f04f 0300 	mov.w	r3, #0
6000141c:	f842 3b04 	str.w	r3, [r2], #4
60001420:	4291      	cmp	r1, r2
60001422:	d8fb      	bhi.n	6000141c <memory_clear.constprop.0+0x8>
	"1:	str.w	r3, [%[dest]], #4	\n"
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	: [dest] "+r" (dest) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001424:	4770      	bx	lr
60001426:	bf00      	nop
60001428:	20008ac0 	.word	0x20008ac0
6000142c:	200092e0 	.word	0x200092e0

60001430 <ResetHandler2>:
{
60001430:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	__asm__ volatile("dsb":::"memory");
60001434:	f3bf 8f4f 	dsb	sy
	asm volatile("nop");
60001438:	bf00      	nop
	asm volatile("nop");
6000143a:	bf00      	nop
	asm volatile("nop");
6000143c:	bf00      	nop
	asm volatile("nop");
6000143e:	bf00      	nop
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
60001440:	f000 f942 	bl	600016c8 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001444:	4b68      	ldr	r3, [pc, #416]	; (600015e8 <ResetHandler2+0x1b8>)
60001446:	2208      	movs	r2, #8
60001448:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	asm volatile("nop");
6000144c:	bf00      	nop
	asm volatile("nop");
6000144e:	bf00      	nop
	asm volatile("nop");
60001450:	bf00      	nop
	asm volatile("nop");
60001452:	bf00      	nop
	asm volatile("nop");
60001454:	bf00      	nop
	asm volatile("nop");
60001456:	bf00      	nop
	asm volatile("nop");
60001458:	bf00      	nop
	asm volatile("nop");
6000145a:	bf00      	nop
	asm volatile("nop");
6000145c:	bf00      	nop
	asm volatile("nop");
6000145e:	bf00      	nop
	asm volatile("nop");
60001460:	bf00      	nop
	asm volatile("nop");
60001462:	bf00      	nop
	asm volatile("nop");
60001464:	bf00      	nop
	asm volatile("nop");
60001466:	bf00      	nop
	asm volatile("nop");
60001468:	bf00      	nop
	asm volatile("nop");
6000146a:	bf00      	nop
	memory_copy(&_stext, &_stextload, &_etext);
6000146c:	4a5f      	ldr	r2, [pc, #380]	; (600015ec <ResetHandler2+0x1bc>)
6000146e:	4960      	ldr	r1, [pc, #384]	; (600015f0 <ResetHandler2+0x1c0>)
60001470:	4860      	ldr	r0, [pc, #384]	; (600015f4 <ResetHandler2+0x1c4>)
60001472:	f7ff ffc5 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001476:	4a60      	ldr	r2, [pc, #384]	; (600015f8 <ResetHandler2+0x1c8>)
60001478:	4960      	ldr	r1, [pc, #384]	; (600015fc <ResetHandler2+0x1cc>)
6000147a:	4861      	ldr	r0, [pc, #388]	; (60001600 <ResetHandler2+0x1d0>)
6000147c:	f7ff ffc0 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
60001480:	4c60      	ldr	r4, [pc, #384]	; (60001604 <ResetHandler2+0x1d4>)
60001482:	f7ff ffc7 	bl	60001414 <memory_clear.constprop.0>
	SCB_CPACR = 0x00F00000;
60001486:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
6000148a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000148e:	2300      	movs	r3, #0
60001490:	4a5d      	ldr	r2, [pc, #372]	; (60001608 <ResetHandler2+0x1d8>)
	SCB_CPACR = 0x00F00000;
60001492:	f8c1 0d88 	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001496:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
6000149a:	3301      	adds	r3, #1
6000149c:	2bb0      	cmp	r3, #176	; 0xb0
6000149e:	d1fa      	bne.n	60001496 <ResetHandler2+0x66>
600014a0:	4b5a      	ldr	r3, [pc, #360]	; (6000160c <ResetHandler2+0x1dc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600014a2:	2180      	movs	r1, #128	; 0x80
600014a4:	4a5a      	ldr	r2, [pc, #360]	; (60001610 <ResetHandler2+0x1e0>)
600014a6:	f803 1b01 	strb.w	r1, [r3], #1
600014aa:	4293      	cmp	r3, r2
600014ac:	d1fb      	bne.n	600014a6 <ResetHandler2+0x76>
	SCB_VTOR = (uint32_t)_VectorsRam;
600014ae:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014b2:	4e4d      	ldr	r6, [pc, #308]	; (600015e8 <ResetHandler2+0x1b8>)
600014b4:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014b8:	f8df b184 	ldr.w	fp, [pc, #388]	; 60001640 <ResetHandler2+0x210>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014bc:	f8df a184 	ldr.w	sl, [pc, #388]	; 60001644 <ResetHandler2+0x214>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014c0:	f04f 31ff 	mov.w	r1, #4294967295
	SCB_VTOR = (uint32_t)_VectorsRam;
600014c4:	f8c5 4d08 	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
600014c8:	2700      	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014ca:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014ce:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014d2:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014d6:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014da:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014de:	f8df 8168 	ldr.w	r8, [pc, #360]	; 60001648 <ResetHandler2+0x218>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014e6:	4a4b      	ldr	r2, [pc, #300]	; (60001614 <ResetHandler2+0x1e4>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e8:	f8c5 3d24 	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ec:	f8d8 301c 	ldr.w	r3, [r8, #28]
600014f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014f8:	f8c8 301c 	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014fc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
60001500:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
60001504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001508:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
6000150c:	6691      	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
6000150e:	66d1      	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001510:	6711      	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001512:	6751      	str	r1, [r2, #116]	; 0x74
	configure_cache();
60001514:	f000 f8e0 	bl	600016d8 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
60001518:	4b3f      	ldr	r3, [pc, #252]	; (60001618 <ResetHandler2+0x1e8>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000151a:	4940      	ldr	r1, [pc, #256]	; (6000161c <ResetHandler2+0x1ec>)
	_VectorsRam[14] = pendablesrvreq_isr;
6000151c:	63a3      	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
6000151e:	4b40      	ldr	r3, [pc, #256]	; (60001620 <ResetHandler2+0x1f0>)
60001520:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001522:	2363      	movs	r3, #99	; 0x63
60001524:	616b      	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001526:	2303      	movs	r3, #3
	SYST_CVR = 0;
60001528:	61af      	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000152a:	612b      	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000152c:	4b3d      	ldr	r3, [pc, #244]	; (60001624 <ResetHandler2+0x1f4>)
6000152e:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001532:	f8d5 3dfc 	ldr.w	r3, [r5, #3580]	; 0xdfc
60001536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000153a:	f8c5 3dfc 	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000153e:	4b3a      	ldr	r3, [pc, #232]	; (60001628 <ResetHandler2+0x1f8>)
60001540:	681a      	ldr	r2, [r3, #0]
60001542:	f042 0201 	orr.w	r2, r2, #1
60001546:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001548:	685b      	ldr	r3, [r3, #4]
6000154a:	600b      	str	r3, [r1, #0]
	usb_pll_start();	
6000154c:	f000 fb0e 	bl	60001b6c <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001550:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001554:	4835      	ldr	r0, [pc, #212]	; (6000162c <ResetHandler2+0x1fc>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001556:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000155a:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000155e:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001562:	f000 fc81 	bl	60001e68 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001566:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
6000156a:	4b31      	ldr	r3, [pc, #196]	; (60001630 <ResetHandler2+0x200>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000156c:	4a31      	ldr	r2, [pc, #196]	; (60001634 <ResetHandler2+0x204>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000156e:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
60001572:	f8c8 106c 	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001576:	601f      	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001578:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000157c:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001580:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001584:	f8c3 7138 	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001588:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000158a:	07db      	lsls	r3, r3, #31
6000158c:	d408      	bmi.n	600015a0 <ResetHandler2+0x170>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000158e:	f642 6315 	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
60001592:	4929      	ldr	r1, [pc, #164]	; (60001638 <ResetHandler2+0x208>)
60001594:	6551      	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001596:	6513      	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001598:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000159a:	f043 0301 	orr.w	r3, r3, #1
6000159e:	6393      	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600015a0:	4a24      	ldr	r2, [pc, #144]	; (60001634 <ResetHandler2+0x204>)
600015a2:	4c26      	ldr	r4, [pc, #152]	; (6000163c <ResetHandler2+0x20c>)
600015a4:	6893      	ldr	r3, [r2, #8]
600015a6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
600015aa:	6093      	str	r3, [r2, #8]
	configure_external_ram();
600015ac:	f000 f91c 	bl	600017e8 <configure_external_ram>
	analog_init();
600015b0:	f000 f860 	bl	60001674 <analog_init>
	pwm_init();
600015b4:	f000 fc48 	bl	60001e48 <__pwm_init_veneer>
	tempmon_init();
600015b8:	f000 fb06 	bl	60001bc8 <tempmon_init>
	startup_middle_hook();
600015bc:	f000 f886 	bl	600016cc <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
600015c0:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015c2:	2b13      	cmp	r3, #19
600015c4:	d9fc      	bls.n	600015c0 <ResetHandler2+0x190>
	usb_init();
600015c6:	f000 fb97 	bl	60001cf8 <usb_init>
600015ca:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015cc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015d0:	d3fb      	bcc.n	600015ca <ResetHandler2+0x19a>
	startup_debug_reset();
600015d2:	f000 f87f 	bl	600016d4 <startup_debug_reset>
	startup_late_hook();
600015d6:	f000 f87b 	bl	600016d0 <startup_default_late_hook>
	__libc_init_array();
600015da:	f000 fc39 	bl	60001e50 <____libc_init_array_veneer>
	main();
600015de:	f000 fc3f 	bl	60001e60 <__main_veneer>
	while (1) asm("WFI");
600015e2:	bf30      	wfi
600015e4:	e7fd      	b.n	600015e2 <ResetHandler2+0x1b2>
600015e6:	bf00      	nop
600015e8:	400d8000 	.word	0x400d8000
600015ec:	0000ebb8 	.word	0x0000ebb8
600015f0:	60001f8c 	.word	0x60001f8c
600015f4:	00000000 	.word	0x00000000
600015f8:	20008ac0 	.word	0x20008ac0
600015fc:	60010b48 	.word	0x60010b48
60001600:	20000000 	.word	0x20000000
60001604:	20008800 	.word	0x20008800
60001608:	00002611 	.word	0x00002611
6000160c:	e000e400 	.word	0xe000e400
60001610:	e000e4a0 	.word	0xe000e4a0
60001614:	400ac000 	.word	0x400ac000
60001618:	00003a31 	.word	0x00003a31
6000161c:	20009278 	.word	0x20009278
60001620:	00003a35 	.word	0x00003a35
60001624:	20200000 	.word	0x20200000
60001628:	e0001000 	.word	0xe0001000
6000162c:	23c34600 	.word	0x23c34600
60001630:	40084000 	.word	0x40084000
60001634:	400d4000 	.word	0x400d4000
60001638:	56c00000 	.word	0x56c00000
6000163c:	2000927c 	.word	0x2000927c
60001640:	2018101b 	.word	0x2018101b
60001644:	13110d0c 	.word	0x13110d0c
60001648:	400fc000 	.word	0x400fc000

6000164c <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000164c:	4b05      	ldr	r3, [pc, #20]	; (60001664 <ResetHandler+0x18>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000164e:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001652:	4a05      	ldr	r2, [pc, #20]	; (60001668 <ResetHandler+0x1c>)
	IOMUXC_GPR_GPR16 = 0x00200007;
60001654:	4805      	ldr	r0, [pc, #20]	; (6000166c <ResetHandler+0x20>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001656:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001658:	6418      	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
6000165a:	4a05      	ldr	r2, [pc, #20]	; (60001670 <ResetHandler+0x24>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000165c:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
6000165e:	4695      	mov	sp, r2
	ResetHandler2();
60001660:	f7ff fee6 	bl	60001430 <ResetHandler2>
60001664:	400ac000 	.word	0x400ac000
60001668:	aaaaaaaf 	.word	0xaaaaaaaf
6000166c:	00200007 	.word	0x00200007
60001670:	20070000 	.word	0x20070000

60001674 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001674:	4b10      	ldr	r3, [pc, #64]	; (600016b8 <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001676:	20a0      	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001678:	4a10      	ldr	r2, [pc, #64]	; (600016bc <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000167a:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
6000167c:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
{
60001680:	b410      	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001682:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001684:	f240 6437 	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001688:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
6000168a:	f441 7140 	orr.w	r1, r1, #768	; 0x300
6000168e:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001690:	6454      	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001692:	6490      	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
60001694:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001696:	061b      	lsls	r3, r3, #24
60001698:	d4fc      	bmi.n	60001694 <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
6000169a:	4a09      	ldr	r2, [pc, #36]	; (600016c0 <analog_init+0x4c>)
6000169c:	f240 6137 	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600016a0:	23a0      	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600016a2:	6451      	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600016a4:	6493      	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
600016a6:	6c93      	ldr	r3, [r2, #72]	; 0x48
600016a8:	f013 0380 	ands.w	r3, r3, #128	; 0x80
600016ac:	d1fb      	bne.n	600016a6 <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
600016ae:	4a05      	ldr	r2, [pc, #20]	; (600016c4 <analog_init+0x50>)
600016b0:	7013      	strb	r3, [r2, #0]
}
600016b2:	f85d 4b04 	ldr.w	r4, [sp], #4
600016b6:	4770      	bx	lr
600016b8:	400fc000 	.word	0x400fc000
600016bc:	400c4000 	.word	0x400c4000
600016c0:	400c8000 	.word	0x400c8000
600016c4:	200092ab 	.word	0x200092ab

600016c8 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
600016c8:	4770      	bx	lr
600016ca:	bf00      	nop

600016cc <startup_default_middle_hook>:
600016cc:	4770      	bx	lr
600016ce:	bf00      	nop

600016d0 <startup_default_late_hook>:
600016d0:	4770      	bx	lr
600016d2:	bf00      	nop

600016d4 <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
600016d4:	bf00      	nop
600016d6:	4770      	bx	lr

600016d8 <configure_cache>:
{
600016d8:	b410      	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
600016da:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
600016de:	2100      	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600016e0:	2410      	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600016e2:	4831      	ldr	r0, [pc, #196]	; (600017a8 <configure_cache+0xd0>)
	SCB_MPU_CTRL = 0; // turn off MPU
600016e4:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600016e8:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600016ec:	2411      	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600016ee:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
600016f2:	482e      	ldr	r0, [pc, #184]	; (600017ac <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600016f4:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600016f8:	2412      	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
600016fa:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600016fe:	482c      	ldr	r0, [pc, #176]	; (600017b0 <configure_cache+0xd8>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001700:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001704:	4a2b      	ldr	r2, [pc, #172]	; (600017b4 <configure_cache+0xdc>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001706:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
6000170a:	4c2b      	ldr	r4, [pc, #172]	; (600017b8 <configure_cache+0xe0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
6000170c:	f042 0215 	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001710:	482a      	ldr	r0, [pc, #168]	; (600017bc <configure_cache+0xe4>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001712:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001716:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
6000171a:	4c29      	ldr	r4, [pc, #164]	; (600017c0 <configure_cache+0xe8>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
6000171c:	4829      	ldr	r0, [pc, #164]	; (600017c4 <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
6000171e:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001722:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001726:	4c28      	ldr	r4, [pc, #160]	; (600017c8 <configure_cache+0xf0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001728:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
6000172c:	4827      	ldr	r0, [pc, #156]	; (600017cc <configure_cache+0xf4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
6000172e:	4a28      	ldr	r2, [pc, #160]	; (600017d0 <configure_cache+0xf8>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001730:	f8c3 4da0 	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001734:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001738:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
6000173c:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001740:	4c24      	ldr	r4, [pc, #144]	; (600017d4 <configure_cache+0xfc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001742:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001744:	4824      	ldr	r0, [pc, #144]	; (600017d8 <configure_cache+0x100>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001746:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
6000174a:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
6000174e:	4a23      	ldr	r2, [pc, #140]	; (600017dc <configure_cache+0x104>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001750:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001754:	4c22      	ldr	r4, [pc, #136]	; (600017e0 <configure_cache+0x108>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001756:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
6000175a:	f102 6240 	add.w	r2, r2, #201326592	; 0xc000000
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000175e:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
60001762:	4820      	ldr	r0, [pc, #128]	; (600017e4 <configure_cache+0x10c>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001764:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
60001768:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
6000176a:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
6000176e:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	asm("nop"); // allow a few cycles for bus writes before enable MPU
60001772:	bf00      	nop
	asm("nop");
60001774:	bf00      	nop
	asm("nop");
60001776:	bf00      	nop
	asm("nop");
60001778:	bf00      	nop
	asm("nop");
6000177a:	bf00      	nop
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
6000177c:	2201      	movs	r2, #1
6000177e:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
60001782:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001786:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
6000178a:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
6000178e:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001792:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001796:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
}
6000179a:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000179e:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
600017a2:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
600017a6:	4770      	bx	lr
600017a8:	1000003f 	.word	0x1000003f
600017ac:	07080025 	.word	0x07080025
600017b0:	00100009 	.word	0x00100009
600017b4:	200092e0 	.word	0x200092e0
600017b8:	00200013 	.word	0x00200013
600017bc:	07020021 	.word	0x07020021
600017c0:	20000014 	.word	0x20000014
600017c4:	13080025 	.word	0x13080025
600017c8:	10000009 	.word	0x10000009
600017cc:	20200016 	.word	0x20200016
600017d0:	130b0027 	.word	0x130b0027
600017d4:	40000017 	.word	0x40000017
600017d8:	60000018 	.word	0x60000018
600017dc:	070b002f 	.word	0x070b002f
600017e0:	70000019 	.word	0x70000019
600017e4:	8000001a 	.word	0x8000001a

600017e8 <configure_external_ram>:
{
600017e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600017ea:	4bb8      	ldr	r3, [pc, #736]	; (60001acc <configure_external_ram+0x2e4>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
600017ec:	2218      	movs	r2, #24
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600017ee:	4eb8      	ldr	r6, [pc, #736]	; (60001ad0 <configure_external_ram+0x2e8>)
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600017f0:	2001      	movs	r0, #1
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
600017f2:	4fb8      	ldr	r7, [pc, #736]	; (60001ad4 <configure_external_ram+0x2ec>)
{
600017f4:	b083      	sub	sp, #12
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600017f6:	f8c3 625c 	str.w	r6, [r3, #604]	; 0x25c
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600017fa:	49b7      	ldr	r1, [pc, #732]	; (60001ad8 <configure_external_ram+0x2f0>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
600017fc:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001800:	4db6      	ldr	r5, [pc, #728]	; (60001adc <configure_external_ram+0x2f4>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001802:	f8c3 6264 	str.w	r6, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60001806:	f5a6 4630 	sub.w	r6, r6, #45056	; 0xb000
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
6000180a:	4cb5      	ldr	r4, [pc, #724]	; (60001ae0 <configure_external_ram+0x2f8>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
6000180c:	f8c3 6268 	str.w	r6, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001810:	f8c3 526c 	str.w	r5, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001814:	f8c3 5270 	str.w	r5, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001818:	f8c3 5274 	str.w	r5, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
6000181c:	f8c3 5278 	str.w	r5, [r3, #632]	; 0x278
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001820:	f248 750c 	movw	r5, #34572	; 0x870c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001824:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
60001826:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
60001828:	675a      	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
6000182a:	679a      	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
6000182c:	67da      	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
6000182e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
60001832:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
60001836:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
6000183a:	f8c1 032c 	str.w	r0, [r1, #812]	; 0x32c
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
6000183e:	4aa9      	ldr	r2, [pc, #676]	; (60001ae4 <configure_external_ram+0x2fc>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
60001840:	f8c1 0330 	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
60001844:	f8c1 0334 	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
60001848:	f8c1 0338 	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
6000184c:	f8c1 033c 	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
60001850:	f8c1 0350 	str.w	r0, [r1, #848]	; 0x350
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001854:	69a1      	ldr	r1, [r4, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001856:	4ba4      	ldr	r3, [pc, #656]	; (60001ae8 <configure_external_ram+0x300>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001858:	400a      	ands	r2, r1
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
6000185a:	48a4      	ldr	r0, [pc, #656]	; (60001aec <configure_external_ram+0x304>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000185c:	49a4      	ldr	r1, [pc, #656]	; (60001af0 <configure_external_ram+0x308>)
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
6000185e:	4313      	orrs	r3, r2
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001860:	4aa4      	ldr	r2, [pc, #656]	; (60001af4 <configure_external_ram+0x30c>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001862:	61a3      	str	r3, [r4, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60001864:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
60001868:	f043 030c 	orr.w	r3, r3, #12
6000186c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001870:	f04f 34ff 	mov.w	r4, #4294967295
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001874:	6803      	ldr	r3, [r0, #0]
60001876:	f043 0302 	orr.w	r3, r3, #2
6000187a:	6003      	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
6000187c:	6803      	ldr	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
6000187e:	402b      	ands	r3, r5
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001880:	f44f 5500 	mov.w	r5, #8192	; 0x2000
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001884:	431a      	orrs	r2, r3
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001886:	4b9c      	ldr	r3, [pc, #624]	; (60001af8 <configure_external_ram+0x310>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001888:	6002      	str	r2, [r0, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
6000188a:	6044      	str	r4, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000188c:	688a      	ldr	r2, [r1, #8]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000188e:	4c9b      	ldr	r4, [pc, #620]	; (60001afc <configure_external_ram+0x314>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001890:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001892:	4a9b      	ldr	r2, [pc, #620]	; (60001b00 <configure_external_ram+0x318>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001894:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001898:	6083      	str	r3, [r0, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
6000189a:	68c3      	ldr	r3, [r0, #12]
6000189c:	f023 0378 	bic.w	r3, r3, #120	; 0x78
600018a0:	60c3      	str	r3, [r0, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600018a2:	6a03      	ldr	r3, [r0, #32]
600018a4:	4013      	ands	r3, r2
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
600018a6:	4323      	orrs	r3, r4
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600018a8:	6203      	str	r3, [r0, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600018aa:	6a03      	ldr	r3, [r0, #32]
600018ac:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF2CR0 = mask;
600018ae:	4a95      	ldr	r2, [pc, #596]	; (60001b04 <configure_external_ram+0x31c>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
600018b0:	4323      	orrs	r3, r4
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
600018b2:	4c95      	ldr	r4, [pc, #596]	; (60001b08 <configure_external_ram+0x320>)
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600018b4:	6243      	str	r3, [r0, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
600018b6:	6282      	str	r2, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
600018b8:	62c2      	str	r2, [r0, #44]	; 0x2c
	FLEXSPI2_INTEN = 0;
600018ba:	2200      	movs	r2, #0
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
600018bc:	f8d1 30b8 	ldr.w	r3, [r1, #184]	; 0xb8
600018c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
600018c4:	f043 0301 	orr.w	r3, r3, #1
600018c8:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
600018cc:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600018d0:	498e      	ldr	r1, [pc, #568]	; (60001b0c <configure_external_ram+0x324>)
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
600018d2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
600018d6:	f043 0301 	orr.w	r3, r3, #1
600018da:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600018de:	f240 6305 	movw	r3, #1541	; 0x605
	FLEXSPI2_INTEN = 0;
600018e2:	6102      	str	r2, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
600018e4:	6605      	str	r5, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
600018e6:	6704      	str	r4, [r0, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600018e8:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
600018ec:	6645      	str	r5, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
600018ee:	6744      	str	r4, [r0, #116]	; 0x74
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600018f0:	2402      	movs	r4, #2
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600018f2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600018f6:	6803      	ldr	r3, [r0, #0]
600018f8:	f023 0302 	bic.w	r3, r3, #2
600018fc:	6003      	str	r3, [r0, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600018fe:	6181      	str	r1, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001900:	4b83      	ldr	r3, [pc, #524]	; (60001b10 <configure_external_ram+0x328>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001902:	4984      	ldr	r1, [pc, #528]	; (60001b14 <configure_external_ram+0x32c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001904:	61c4      	str	r4, [r0, #28]
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001906:	f843 2b04 	str.w	r2, [r3], #4
6000190a:	428b      	cmp	r3, r1
6000190c:	d1fb      	bne.n	60001906 <configure_external_ram+0x11e>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
6000190e:	4a77      	ldr	r2, [pc, #476]	; (60001aec <configure_external_ram+0x304>)
60001910:	6813      	ldr	r3, [r2, #0]
60001912:	f043 0301 	orr.w	r3, r3, #1
60001916:	6013      	str	r3, [r2, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
60001918:	6813      	ldr	r3, [r2, #0]
6000191a:	f013 0301 	ands.w	r3, r3, #1
6000191e:	d1fb      	bne.n	60001918 <configure_external_ram+0x130>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001920:	487a      	ldr	r0, [pc, #488]	; (60001b0c <configure_external_ram+0x324>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001922:	2102      	movs	r1, #2
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001924:	f240 64f5 	movw	r4, #1781	; 0x6f5
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001928:	6190      	str	r0, [r2, #24]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
6000192a:	f240 4099 	movw	r0, #1177	; 0x499
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
6000192e:	61d1      	str	r1, [r2, #28]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60001930:	f240 4166 	movw	r1, #1126	; 0x466
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001934:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001938:	f242 4401 	movw	r4, #9217	; 0x2401
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
6000193c:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60001940:	4975      	ldr	r1, [pc, #468]	; (60001b18 <configure_external_ram+0x330>)
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60001942:	f8c2 0220 	str.w	r0, [r2, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60001946:	f8c2 1230 	str.w	r1, [r2, #560]	; 0x230
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
6000194a:	f240 4135 	movw	r1, #1077	; 0x435
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
6000194e:	4873      	ldr	r0, [pc, #460]	; (60001b1c <configure_external_ram+0x334>)
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001950:	f8c2 4234 	str.w	r4, [r2, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001954:	f8c2 1240 	str.w	r1, [r2, #576]	; 0x240
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001958:	4c71      	ldr	r4, [pc, #452]	; (60001b20 <configure_external_ram+0x338>)
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
6000195a:	f8c2 0250 	str.w	r0, [r2, #592]	; 0x250
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
6000195e:	f242 2001 	movw	r0, #8705	; 0x2201
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001962:	4970      	ldr	r1, [pc, #448]	; (60001b24 <configure_external_ram+0x33c>)
60001964:	f8c2 1254 	str.w	r1, [r2, #596]	; 0x254
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001968:	2101      	movs	r1, #1
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
6000196a:	f8c2 4260 	str.w	r4, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
6000196e:	f8c2 0264 	str.w	r0, [r2, #612]	; 0x264
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001972:	485e      	ldr	r0, [pc, #376]	; (60001aec <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
60001974:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001978:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000197c:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001980:	6943      	ldr	r3, [r0, #20]
60001982:	07da      	lsls	r2, r3, #31
60001984:	d5fc      	bpl.n	60001980 <configure_external_ram+0x198>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001986:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001988:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000198a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000198e:	4957      	ldr	r1, [pc, #348]	; (60001aec <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001990:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
60001992:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001996:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000199a:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000199e:	694b      	ldr	r3, [r1, #20]
600019a0:	07db      	lsls	r3, r3, #31
600019a2:	d5fc      	bpl.n	6000199e <configure_external_ram+0x1b6>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019a4:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600019a6:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019a8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019ac:	4a4f      	ldr	r2, [pc, #316]	; (60001aec <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019ae:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
600019b0:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019b4:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019b8:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019bc:	6953      	ldr	r3, [r2, #20]
600019be:	07df      	lsls	r7, r3, #31
600019c0:	d5fc      	bpl.n	600019bc <configure_external_ram+0x1d4>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019c2:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600019c4:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600019c6:	4858      	ldr	r0, [pc, #352]	; (60001b28 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019c8:	4948      	ldr	r1, [pc, #288]	; (60001aec <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019ca:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
600019cc:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600019d0:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019d4:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019d8:	694b      	ldr	r3, [r1, #20]
600019da:	07de      	lsls	r6, r3, #31
600019dc:	d5fc      	bpl.n	600019d8 <configure_external_ram+0x1f0>
	uint32_t id = FLEXSPI2_RFDR0;
600019de:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
	if (flexspi2_psram_id(0) == 0x5D0D) {
600019e2:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600019e6:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
600019e8:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600019ea:	6148      	str	r0, [r1, #20]
	if (flexspi2_psram_id(0) == 0x5D0D) {
600019ec:	4293      	cmp	r3, r2
600019ee:	d165      	bne.n	60001abc <configure_external_ram+0x2d4>
	FLEXSPI2_IPCR0 = addr;
600019f0:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019f2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019f6:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019f8:	483c      	ldr	r0, [pc, #240]	; (60001aec <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
600019fa:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019fe:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a02:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a06:	6943      	ldr	r3, [r0, #20]
60001a08:	07dd      	lsls	r5, r3, #31
60001a0a:	d5fc      	bpl.n	60001a06 <configure_external_ram+0x21e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a0c:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001a0e:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a12:	2100      	movs	r1, #0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a14:	4a35      	ldr	r2, [pc, #212]	; (60001aec <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a16:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
60001a18:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a1c:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a20:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a24:	6953      	ldr	r3, [r2, #20]
60001a26:	07dc      	lsls	r4, r3, #31
60001a28:	d5fc      	bpl.n	60001a24 <configure_external_ram+0x23c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a2a:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001a2c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a30:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a34:	492d      	ldr	r1, [pc, #180]	; (60001aec <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a36:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001a38:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a3c:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a40:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a44:	694b      	ldr	r3, [r1, #20]
60001a46:	07d8      	lsls	r0, r3, #31
60001a48:	d5fc      	bpl.n	60001a44 <configure_external_ram+0x25c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a4a:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001a4c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a50:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a54:	4a25      	ldr	r2, [pc, #148]	; (60001aec <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a56:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60001a58:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a5c:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a60:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a64:	6953      	ldr	r3, [r2, #20]
60001a66:	07d9      	lsls	r1, r3, #31
60001a68:	d5fc      	bpl.n	60001a64 <configure_external_ram+0x27c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a6a:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001a6c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001a70:	482d      	ldr	r0, [pc, #180]	; (60001b28 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a72:	491e      	ldr	r1, [pc, #120]	; (60001aec <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a74:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001a76:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001a7a:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a7e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a82:	694b      	ldr	r3, [r1, #20]
60001a84:	07da      	lsls	r2, r3, #31
60001a86:	d5fc      	bpl.n	60001a82 <configure_external_ram+0x29a>
	uint32_t id = FLEXSPI2_RFDR0;
60001a88:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001a8c:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001a90:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60001a92:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001a94:	6148      	str	r0, [r1, #20]
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001a96:	4293      	cmp	r3, r2
60001a98:	d050      	beq.n	60001b3c <configure_external_ram+0x354>
60001a9a:	2508      	movs	r5, #8
60001a9c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
			external_psram_size * 0x100000 -
60001aa0:	4922      	ldr	r1, [pc, #136]	; (60001b2c <configure_external_ram+0x344>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001aa2:	2000      	movs	r0, #0
			external_psram_size * 0x100000 -
60001aa4:	4b22      	ldr	r3, [pc, #136]	; (60001b30 <configure_external_ram+0x348>)
			external_psram_size = 16;
60001aa6:	4a23      	ldr	r2, [pc, #140]	; (60001b34 <configure_external_ram+0x34c>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001aa8:	9000      	str	r0, [sp, #0]
			external_psram_size = 16;
60001aaa:	7015      	strb	r5, [r2, #0]
			external_psram_size * 0x100000 -
60001aac:	1a5a      	subs	r2, r3, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001aae:	2301      	movs	r3, #1
60001ab0:	4821      	ldr	r0, [pc, #132]	; (60001b38 <configure_external_ram+0x350>)
60001ab2:	4422      	add	r2, r4
60001ab4:	f000 f9d0 	bl	60001e58 <__sm_set_pool_veneer>
}
60001ab8:	b003      	add	sp, #12
60001aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001abc:	4b1e      	ldr	r3, [pc, #120]	; (60001b38 <configure_external_ram+0x350>)
60001abe:	2200      	movs	r2, #0
60001ac0:	e9c3 2200 	strd	r2, r2, [r3]
60001ac4:	e9c3 2202 	strd	r2, r2, [r3, #8]
}
60001ac8:	b003      	add	sp, #12
60001aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
60001acc:	401f8000 	.word	0x401f8000
60001ad0:	0001b0f9 	.word	0x0001b0f9
60001ad4:	000110f9 	.word	0x000110f9
60001ad8:	401f8400 	.word	0x401f8400
60001adc:	000170f9 	.word	0x000170f9
60001ae0:	400fc000 	.word	0x400fc000
60001ae4:	1ffffcff 	.word	0x1ffffcff
60001ae8:	a0000300 	.word	0xa0000300
60001aec:	402a4000 	.word	0x402a4000
60001af0:	402a8000 	.word	0x402a8000
60001af4:	ffff0012 	.word	0xffff0012
60001af8:	00f737ff 	.word	0x00f737ff
60001afc:	80000040 	.word	0x80000040
60001b00:	7cf0ff00 	.word	0x7cf0ff00
60001b04:	830f00ff 	.word	0x830f00ff
60001b08:	00020063 	.word	0x00020063
60001b0c:	5af05af0 	.word	0x5af05af0
60001b10:	402a4200 	.word	0x402a4200
60001b14:	402a4300 	.word	0x402a4300
60001b18:	3018049f 	.word	0x3018049f
60001b1c:	0a1806eb 	.word	0x0a1806eb
60001b20:	0a180638 	.word	0x0a180638
60001b24:	26013206 	.word	0x26013206
60001b28:	00030004 	.word	0x00030004
60001b2c:	70000000 	.word	0x70000000
60001b30:	70000000 	.word	0x70000000
60001b34:	200092ac 	.word	0x200092ac
60001b38:	200091f8 	.word	0x200091f8
	FLEXSPI2_IPCR0 = addr;
60001b3c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b40:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b44:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b46:	4808      	ldr	r0, [pc, #32]	; (60001b68 <configure_external_ram+0x380>)
	FLEXSPI2_IPCR0 = addr;
60001b48:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b4c:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b50:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b54:	6943      	ldr	r3, [r0, #20]
60001b56:	07db      	lsls	r3, r3, #31
60001b58:	d5fc      	bpl.n	60001b54 <configure_external_ram+0x36c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b5a:	2301      	movs	r3, #1
60001b5c:	2510      	movs	r5, #16
60001b5e:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
60001b62:	6143      	str	r3, [r0, #20]
			external_psram_size = 16;
60001b64:	e79c      	b.n	60001aa0 <configure_external_ram+0x2b8>
60001b66:	bf00      	nop
60001b68:	402a4000 	.word	0x402a4000

60001b6c <usb_pll_start>:
{
60001b6c:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001b6e:	4a15      	ldr	r2, [pc, #84]	; (60001bc4 <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001b70:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001b72:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001b76:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001b7a:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001b7e:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001b82:	f243 0042 	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001b86:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001b88:	f013 0f02 	tst.w	r3, #2
60001b8c:	d10e      	bne.n	60001bac <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001b8e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
60001b92:	d00f      	beq.n	60001bb4 <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001b94:	f413 5f80 	tst.w	r3, #4096	; 0x1000
60001b98:	d00e      	beq.n	60001bb8 <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001b9a:	2b00      	cmp	r3, #0
60001b9c:	daf3      	bge.n	60001b86 <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001b9e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
60001ba2:	d10b      	bne.n	60001bbc <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001ba4:	065b      	lsls	r3, r3, #25
60001ba6:	d50b      	bpl.n	60001bc0 <usb_pll_start+0x54>
}
60001ba8:	bcf0      	pop	{r4, r5, r6, r7}
60001baa:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001bac:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001bae:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001bb0:	6190      	str	r0, [r2, #24]
			continue;
60001bb2:	e7e8      	b.n	60001b86 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001bb4:	6155      	str	r5, [r2, #20]
			continue;
60001bb6:	e7e6      	b.n	60001b86 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001bb8:	6156      	str	r6, [r2, #20]
			continue;
60001bba:	e7e4      	b.n	60001b86 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001bbc:	6191      	str	r1, [r2, #24]
			continue;
60001bbe:	e7e2      	b.n	60001b86 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001bc0:	6157      	str	r7, [r2, #20]
			continue;
60001bc2:	e7e0      	b.n	60001b86 <usb_pll_start+0x1a>
60001bc4:	400d8000 	.word	0x400d8000

60001bc8 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001bc8:	4a3f      	ldr	r2, [pc, #252]	; (60001cc8 <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001bca:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001bcc:	493f      	ldr	r1, [pc, #252]	; (60001ccc <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001bce:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001bd2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001bd6:	f04f 0c00 	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bda:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 60001cd0 <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001bde:	f023 0301 	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001be2:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 60001cd4 <tempmon_init+0x10c>
{
60001be6:	b430      	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001be8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001bec:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60001bf0:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001bf4:	4d38      	ldr	r5, [pc, #224]	; (60001cd8 <tempmon_init+0x110>)
60001bf6:	b2cb      	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001bf8:	4c38      	ldr	r4, [pc, #224]	; (60001cdc <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001bfa:	4839      	ldr	r0, [pc, #228]	; (60001ce0 <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001bfc:	602b      	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001bfe:	ee07 3a90 	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001c02:	0d0b      	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001c04:	f3c1 210b 	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001c08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001c0c:	ee06 3a90 	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001c10:	ee07 1a10 	vmov	s14, r1
60001c14:	4b33      	ldr	r3, [pc, #204]	; (60001ce4 <tempmon_init+0x11c>)
60001c16:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001c1a:	6021      	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001c1c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c20:	4931      	ldr	r1, [pc, #196]	; (60001ce8 <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c22:	ee37 6ac6 	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c26:	ee37 5ac5 	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001c2a:	ee76 6ac7 	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001c2e:	ee77 7ae5 	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c32:	ee26 6a26 	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001c36:	edc3 6a00 	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c3a:	ee25 5a26 	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c3e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c42:	ee67 4aa6 	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001c46:	edc0 7a00 	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c4a:	eec6 5a27 	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001c4e:	4827      	ldr	r0, [pc, #156]	; (60001cec <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c50:	ee85 6a27 	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c54:	eec4 6aa7 	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c58:	ee75 5a87 	vadd.f32	s11, s11, s14
60001c5c:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c60:	ee36 6a07 	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c64:	ee15 4a90 	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c68:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c6c:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c70:	ee76 7a87 	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c74:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c78:	ee16 3a10 	vmov	r3, s12
60001c7c:	f8d2 4190 	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c84:	ea01 4103 	and.w	r1, r1, r3, lsl #16
60001c88:	4321      	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c8a:	ee17 3a90 	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c8e:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001c92:	f3c3 030b 	ubfx	r3, r3, #0, #12
60001c96:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
60001c9a:	430b      	orrs	r3, r1
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001c9c:	4914      	ldr	r1, [pc, #80]	; (60001cf0 <tempmon_init+0x128>)
60001c9e:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001ca2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
60001ca6:	f043 0302 	orr.w	r3, r3, #2
60001caa:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
60001cae:	4b11      	ldr	r3, [pc, #68]	; (60001cf4 <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001cb0:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
60001cb4:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001cb8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001cbc:	2201      	movs	r2, #1
}
60001cbe:	bc30      	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001cc0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
60001cc4:	4770      	bx	lr
60001cc6:	bf00      	nop
60001cc8:	400d8100 	.word	0x400d8100
60001ccc:	401f4400 	.word	0x401f4400
60001cd0:	42aa0000 	.word	0x42aa0000
60001cd4:	42b40000 	.word	0x42b40000
60001cd8:	20009268 	.word	0x20009268
60001cdc:	20009264 	.word	0x20009264
60001ce0:	2000926c 	.word	0x2000926c
60001ce4:	20009270 	.word	0x20009270
60001ce8:	0fff0000 	.word	0x0fff0000
60001cec:	e000e400 	.word	0xe000e400
60001cf0:	20008800 	.word	0x20008800
60001cf4:	000027f9 	.word	0x000027f9

60001cf8 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001cf8:	4b31      	ldr	r3, [pc, #196]	; (60001dc0 <usb_init+0xc8>)
60001cfa:	f640 7261 	movw	r2, #3937	; 0xf61
{
60001cfe:	b510      	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001d00:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001d04:	f240 4404 	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
60001d08:	f000 f8b6 	bl	60001e78 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001d0c:	4a2d      	ldr	r2, [pc, #180]	; (60001dc4 <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
60001d0e:	492e      	ldr	r1, [pc, #184]	; (60001dc8 <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001d10:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001d14:	482d      	ldr	r0, [pc, #180]	; (60001dcc <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001d16:	f043 0303 	orr.w	r3, r3, #3
60001d1a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001d1e:	4b2c      	ldr	r3, [pc, #176]	; (60001dd0 <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
60001d20:	f8c1 4160 	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001d24:	6802      	ldr	r2, [r0, #0]
60001d26:	421a      	tst	r2, r3
60001d28:	d103      	bne.n	60001d32 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
60001d2a:	f8d1 31a8 	ldr.w	r3, [r1, #424]	; 0x1a8
60001d2e:	079a      	lsls	r2, r3, #30
60001d30:	d01b      	beq.n	60001d6a <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001d32:	4a25      	ldr	r2, [pc, #148]	; (60001dc8 <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001d34:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
60001d38:	4b24      	ldr	r3, [pc, #144]	; (60001dcc <usb_init+0xd4>)
60001d3a:	6359      	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001d3c:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001d40:	f043 0302 	orr.w	r3, r3, #2
60001d44:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001d48:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001d4c:	079b      	lsls	r3, r3, #30
60001d4e:	d4fb      	bmi.n	60001d48 <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001d50:	f44f 3000 	mov.w	r0, #131072	; 0x20000
60001d54:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001d58:	4b1c      	ldr	r3, [pc, #112]	; (60001dcc <usb_init+0xd4>)
60001d5a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001d5e:	f8c1 028c 	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001d62:	2019      	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001d64:	639a      	str	r2, [r3, #56]	; 0x38
		delay(25);
60001d66:	f000 f883 	bl	60001e70 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001d6a:	4a18      	ldr	r2, [pc, #96]	; (60001dcc <usb_init+0xd4>)
60001d6c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001d70:	4c15      	ldr	r4, [pc, #84]	; (60001dc8 <usb_init+0xd0>)
	USBPHY1_PWD = 0;
60001d72:	2100      	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001d74:	6390      	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001d76:	200a      	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d78:	4b16      	ldr	r3, [pc, #88]	; (60001dd4 <usb_init+0xdc>)
	USBPHY1_PWD = 0;
60001d7a:	6011      	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d7c:	f44f 7220 	mov.w	r2, #640	; 0x280
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001d80:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d84:	4618      	mov	r0, r3
60001d86:	f000 f85b 	bl	60001e40 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
60001d8a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d8e:	4603      	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001d90:	f44f 0081 	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001d94:	f240 1143 	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001d98:	6018      	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001d9a:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
60001d9e:	641a      	str	r2, [r3, #64]	; 0x40
60001da0:	4b0d      	ldr	r3, [pc, #52]	; (60001dd8 <usb_init+0xe0>)
60001da2:	4a0e      	ldr	r2, [pc, #56]	; (60001ddc <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001da4:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
60001da8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001dac:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
60001db0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001db4:	2301      	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001db6:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
60001dba:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
60001dbe:	bd10      	pop	{r4, pc}
60001dc0:	400d8000 	.word	0x400d8000
60001dc4:	400fc000 	.word	0x400fc000
60001dc8:	402e0000 	.word	0x402e0000
60001dcc:	400d9000 	.word	0x400d9000
60001dd0:	001e1c00 	.word	0x001e1c00
60001dd4:	20000000 	.word	0x20000000
60001dd8:	20008800 	.word	0x20008800
60001ddc:	000029e1 	.word	0x000029e1

60001de0 <_reboot_Teensyduino_>:


FLASHMEM __attribute__((noinline)) void _reboot_Teensyduino_(void)
{
60001de0:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60001de2:	4b0e      	ldr	r3, [pc, #56]	; (60001e1c <_reboot_Teensyduino_+0x3c>)
60001de4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
60001de6:	079b      	lsls	r3, r3, #30
60001de8:	d400      	bmi.n	60001dec <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
60001dea:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60001dec:	b672      	cpsid	i
		USB1_USBCMD = 0;
60001dee:	4b0c      	ldr	r3, [pc, #48]	; (60001e20 <_reboot_Teensyduino_+0x40>)
60001df0:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
60001df2:	4a0c      	ldr	r2, [pc, #48]	; (60001e24 <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
60001df4:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001df8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001dfc:	490a      	ldr	r1, [pc, #40]	; (60001e28 <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001dfe:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001e02:	6411      	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001e04:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001e06:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001e0a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
60001e0e:	4807      	ldr	r0, [pc, #28]	; (60001e2c <_reboot_Teensyduino_+0x4c>)
60001e10:	4a07      	ldr	r2, [pc, #28]	; (60001e30 <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001e12:	69db      	ldr	r3, [r3, #28]
		*p = 0xEB120000;
60001e14:	6002      	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001e16:	689b      	ldr	r3, [r3, #8]
60001e18:	4798      	blx	r3
	}
	__builtin_unreachable();
60001e1a:	bf00      	nop
60001e1c:	401f4400 	.word	0x401f4400
60001e20:	402e0000 	.word	0x402e0000
60001e24:	400ac000 	.word	0x400ac000
60001e28:	00200003 	.word	0x00200003
60001e2c:	20208000 	.word	0x20208000
60001e30:	eb120000 	.word	0xeb120000

60001e34 <_init>:
60001e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60001e36:	bf00      	nop
60001e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
60001e3a:	bc08      	pop	{r3}
60001e3c:	469e      	mov	lr, r3
60001e3e:	4770      	bx	lr

60001e40 <__memset_veneer>:
60001e40:	f85f f000 	ldr.w	pc, [pc]	; 60001e44 <__memset_veneer+0x4>
60001e44:	00005fa1 	.word	0x00005fa1

60001e48 <__pwm_init_veneer>:
60001e48:	f85f f000 	ldr.w	pc, [pc]	; 60001e4c <__pwm_init_veneer+0x4>
60001e4c:	0000251d 	.word	0x0000251d

60001e50 <____libc_init_array_veneer>:
60001e50:	f85f f000 	ldr.w	pc, [pc]	; 60001e54 <____libc_init_array_veneer+0x4>
60001e54:	000062e5 	.word	0x000062e5

60001e58 <__sm_set_pool_veneer>:
60001e58:	f85f f000 	ldr.w	pc, [pc]	; 60001e5c <__sm_set_pool_veneer+0x4>
60001e5c:	00003db5 	.word	0x00003db5

60001e60 <__main_veneer>:
60001e60:	f85f f000 	ldr.w	pc, [pc]	; 60001e64 <__main_veneer+0x4>
60001e64:	000022f9 	.word	0x000022f9

60001e68 <__set_arm_clock_veneer>:
60001e68:	f85f f000 	ldr.w	pc, [pc]	; 60001e6c <__set_arm_clock_veneer+0x4>
60001e6c:	00003a55 	.word	0x00003a55

60001e70 <__delay_veneer>:
60001e70:	f85f f000 	ldr.w	pc, [pc]	; 60001e74 <__delay_veneer+0x4>
60001e74:	00001e0d 	.word	0x00001e0d

60001e78 <__usb_init_serialnumber_veneer>:
60001e78:	f85f f000 	ldr.w	pc, [pc]	; 60001e7c <__usb_init_serialnumber_veneer+0x4>
60001e7c:	00003151 	.word	0x00003151

60001e80 <__frame_dummy_init_array_entry>:
60001e80:	000001a5                                ....

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <flash_sector_not_erased>:
{
  int error = 0;
  uint32_t address = start;
  while (address < (start + size) && error == 0) { 
    if ((address & (FLASH_SECTOR_SIZE - 1)) == 0) {
      if (flash_sector_not_erased( address )) {
      20:	f420 607f 	bic.w	r0, r0, #4080	; 0xff0
      24:	f020 000f 	bic.w	r0, r0, #15
        #elif defined(KINETISK) || defined(KINETISL)
          error = flash_erase_sector( address, 0 );
	#endif
      }
    }
    address += FLASH_SECTOR_SIZE;
      28:	f500 5280 	add.w	r2, r0, #4096	; 0x1000
          eepromemu_flash_erase_sector( (void*)address );
      2c:	6803      	ldr	r3, [r0, #0]
      2e:	3004      	adds	r0, #4
  while (address < (start + size) && error == 0) { 
      30:	3301      	adds	r3, #1
      32:	d103      	bne.n	3c <_teensy_model_identifier+0x17>
  }
  return( error );
}
      34:	4290      	cmp	r0, r2
      36:	d1f9      	bne.n	2c <_teensy_model_identifier+0x7>
	SNVS_LPSRTCMR = t >> 17;
	// start the SRTC
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
	// start the RTC and sync it to the SRTC
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
      38:	2000      	movs	r0, #0
      3a:	4770      	bx	lr
      3c:	2001      	movs	r0, #1
      3e:	4770      	bx	lr

00000040 <flash_move>:
}
      40:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
      44:	4606      	mov	r6, r0
      46:	460d      	mov	r5, r1
		return 0;
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
      48:	4690      	mov	r8, r2
      4a:	2400      	movs	r4, #0
      4c:	4544      	cmp	r4, r8
      4e:	d214      	bcs.n	7a <flash_move+0x3a>
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      50:	19a7      	adds	r7, r4, r6
      52:	f3c7 030b 	ubfx	r3, r7, #0, #12
      56:	b933      	cbnz	r3, 66 <flash_move+0x26>
      58:	4638      	mov	r0, r7
      5a:	f7ff ffe1 	bl	20 <flash_sector_not_erased>
}
      5e:	b110      	cbz	r0, 66 <flash_move+0x26>
      60:	4638      	mov	r0, r7
      62:	f002 f869 	bl	2138 <eepromemu_flash_erase_sector>
      66:	2204      	movs	r2, #4
      68:	5963      	ldr	r3, [r4, r5]
      6a:	4638      	mov	r0, r7
    offset += FLASH_WRITE_SIZE;
      6c:	3404      	adds	r4, #4
      eepromemu_flash_write( (void*)addr, &value, 4 );
      6e:	eb0d 0102 	add.w	r1, sp, r2
      uint32_t value = *(uint32_t *)(src + offset);     
      72:	9301      	str	r3, [sp, #4]
      eepromemu_flash_write( (void*)addr, &value, 4 );
      74:	f001 ffea 	bl	204c <eepromemu_flash_write>
    offset += FLASH_WRITE_SIZE;
      78:	e7e8      	b.n	4c <flash_move+0xc>
  if (IN_FLASH(src)) {
      7a:	f105 4520 	add.w	r5, r5, #2684354560	; 0xa0000000
      7e:	f5b5 0f00 	cmp.w	r5, #8388608	; 0x800000
      82:	d208      	bcs.n	96 <flash_move+0x56>
    while (offset < (FLASH_SIZE - FLASH_RESERVE) && error == 0) {
      84:	4d0c      	ldr	r5, [pc, #48]	; (b8 <flash_move+0x78>)
      86:	e004      	b.n	92 <flash_move+0x52>
      addr = dst + offset;
      88:	19a1      	adds	r1, r4, r6
      if ((addr & (FLASH_SECTOR_SIZE - 1)) == 0) {
      8a:	f3c1 030b 	ubfx	r3, r1, #0, #12
      8e:	b143      	cbz	r3, a2 <flash_move+0x62>
      offset += FLASH_WRITE_SIZE;
      90:	3404      	adds	r4, #4
    while (offset < (FLASH_SIZE - FLASH_RESERVE) && error == 0) {
      92:	42ac      	cmp	r4, r5
      94:	d3f8      	bcc.n	88 <flash_move+0x48>
  REBOOT;
      96:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
      9a:	4a08      	ldr	r2, [pc, #32]	; (bc <flash_move+0x7c>)
      9c:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
      a0:	e008      	b.n	b4 <flash_move+0x74>
        if (flash_sector_not_erased( addr )) {
      a2:	4608      	mov	r0, r1
      a4:	f7ff ffbc 	bl	20 <flash_sector_not_erased>
      a8:	2800      	cmp	r0, #0
      aa:	d0f1      	beq.n	90 <flash_move+0x50>
            eepromemu_flash_erase_sector( (void*)addr );
      ac:	4608      	mov	r0, r1
      ae:	f002 f843 	bl	2138 <eepromemu_flash_erase_sector>
      b2:	e7ed      	b.n	90 <flash_move+0x50>
  for (;;) {}
      b4:	e7fe      	b.n	b4 <flash_move+0x74>
      b6:	bf00      	nop
      b8:	007fc000 	.word	0x007fc000
      bc:	05fa0004 	.word	0x05fa0004

000000c0 <irq_gpio6789>:
	}
}

FASTRUN
void irq_gpio6789(void)
{
      c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t status = gpio[ISR_INDEX] & gpio[IMR_INDEX];
      c2:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
      c6:	699d      	ldr	r5, [r3, #24]
      c8:	695a      	ldr	r2, [r3, #20]
	if (status) {
      ca:	4015      	ands	r5, r2
      cc:	d00d      	beq.n	ea <irq_gpio6789+0x2a>
		gpio[ISR_INDEX] = status;
      ce:	4f25      	ldr	r7, [pc, #148]	; (164 <irq_gpio6789+0xa4>)
			status = status & ~(1 << index);
      d0:	2601      	movs	r6, #1
		gpio[ISR_INDEX] = status;
      d2:	619d      	str	r5, [r3, #24]
			uint32_t index = __builtin_ctz(status);
      d4:	fa95 f4a5 	rbit	r4, r5
      d8:	fab4 f484 	clz	r4, r4
			table[index]();
      dc:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
			status = status & ~(1 << index);
      e0:	fa06 f404 	lsl.w	r4, r6, r4
			table[index]();
      e4:	4798      	blx	r3
		while (status) {
      e6:	43a5      	bics	r5, r4
      e8:	d1f4      	bne.n	d4 <irq_gpio6789+0x14>
	uint32_t status = gpio[ISR_INDEX] & gpio[IMR_INDEX];
      ea:	4b1f      	ldr	r3, [pc, #124]	; (168 <irq_gpio6789+0xa8>)
      ec:	699d      	ldr	r5, [r3, #24]
      ee:	695a      	ldr	r2, [r3, #20]
	if (status) {
      f0:	4015      	ands	r5, r2
      f2:	d00d      	beq.n	110 <irq_gpio6789+0x50>
		gpio[ISR_INDEX] = status;
      f4:	4f1d      	ldr	r7, [pc, #116]	; (16c <irq_gpio6789+0xac>)
			status = status & ~(1 << index);
      f6:	2601      	movs	r6, #1
		gpio[ISR_INDEX] = status;
      f8:	619d      	str	r5, [r3, #24]
			uint32_t index = __builtin_ctz(status);
      fa:	fa95 f4a5 	rbit	r4, r5
      fe:	fab4 f484 	clz	r4, r4
			table[index]();
     102:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
			status = status & ~(1 << index);
     106:	fa06 f404 	lsl.w	r4, r6, r4
			table[index]();
     10a:	4798      	blx	r3
		while (status) {
     10c:	43a5      	bics	r5, r4
     10e:	d1f4      	bne.n	fa <irq_gpio6789+0x3a>
	uint32_t status = gpio[ISR_INDEX] & gpio[IMR_INDEX];
     110:	4b17      	ldr	r3, [pc, #92]	; (170 <irq_gpio6789+0xb0>)
     112:	699d      	ldr	r5, [r3, #24]
     114:	695a      	ldr	r2, [r3, #20]
	if (status) {
     116:	4015      	ands	r5, r2
     118:	d00d      	beq.n	136 <irq_gpio6789+0x76>
		gpio[ISR_INDEX] = status;
     11a:	4f16      	ldr	r7, [pc, #88]	; (174 <irq_gpio6789+0xb4>)
			status = status & ~(1 << index);
     11c:	2601      	movs	r6, #1
		gpio[ISR_INDEX] = status;
     11e:	619d      	str	r5, [r3, #24]
			uint32_t index = __builtin_ctz(status);
     120:	fa95 f4a5 	rbit	r4, r5
     124:	fab4 f484 	clz	r4, r4
			table[index]();
     128:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
			status = status & ~(1 << index);
     12c:	fa06 f404 	lsl.w	r4, r6, r4
			table[index]();
     130:	4798      	blx	r3
		while (status) {
     132:	43a5      	bics	r5, r4
     134:	d1f4      	bne.n	120 <irq_gpio6789+0x60>
	uint32_t status = gpio[ISR_INDEX] & gpio[IMR_INDEX];
     136:	4b10      	ldr	r3, [pc, #64]	; (178 <irq_gpio6789+0xb8>)
     138:	699d      	ldr	r5, [r3, #24]
     13a:	695a      	ldr	r2, [r3, #20]
	if (status) {
     13c:	4015      	ands	r5, r2
     13e:	d00d      	beq.n	15c <irq_gpio6789+0x9c>
		gpio[ISR_INDEX] = status;
     140:	4f0e      	ldr	r7, [pc, #56]	; (17c <irq_gpio6789+0xbc>)
			status = status & ~(1 << index);
     142:	2601      	movs	r6, #1
		gpio[ISR_INDEX] = status;
     144:	619d      	str	r5, [r3, #24]
			uint32_t index = __builtin_ctz(status);
     146:	fa95 f4a5 	rbit	r4, r5
     14a:	fab4 f484 	clz	r4, r4
			table[index]();
     14e:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
			status = status & ~(1 << index);
     152:	fa06 f404 	lsl.w	r4, r6, r4
			table[index]();
     156:	4798      	blx	r3
		while (status) {
     158:	43a5      	bics	r5, r4
     15a:	d1f4      	bne.n	146 <irq_gpio6789+0x86>
	irq_anyport(&GPIO6_DR, isr_table_gpio1);
	irq_anyport(&GPIO7_DR, isr_table_gpio2);
	irq_anyport(&GPIO8_DR, isr_table_gpio3);
	irq_anyport(&GPIO9_DR, isr_table_gpio4);
	asm volatile ("dsb":::"memory");
     15c:	f3bf 8f4f 	dsb	sy
}
     160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     162:	bf00      	nop
     164:	200081d8 	.word	0x200081d8
     168:	42004000 	.word	0x42004000
     16c:	20008258 	.word	0x20008258
     170:	42008000 	.word	0x42008000
     174:	200082d8 	.word	0x200082d8
     178:	4200c000 	.word	0x4200c000
     17c:	20008358 	.word	0x20008358

00000180 <register_tm_clones>:
  out->printf("calling flash_move() to load new firmware...\n");
  out->flush();

  flash_move(FLASH_BASE_ADDR, buffer_addr, hex.max - hex.min);
  REBOOT; // should not return
}
     180:	4805      	ldr	r0, [pc, #20]	; (198 <register_tm_clones+0x18>)
     182:	4b06      	ldr	r3, [pc, #24]	; (19c <register_tm_clones+0x1c>)
     184:	1a1b      	subs	r3, r3, r0
    out->printf("abort - new code missing target ID %s\n", FLASH_ID);
     186:	0fd9      	lsrs	r1, r3, #31
     188:	eb01 01a3 	add.w	r1, r1, r3, asr #2
}
     18c:	1049      	asrs	r1, r1, #1
     18e:	d002      	beq.n	196 <register_tm_clones+0x16>
    out->printf("abort - new code missing target ID %s\n", FLASH_ID);
     190:	4b03      	ldr	r3, [pc, #12]	; (1a0 <register_tm_clones+0x20>)
     192:	b103      	cbz	r3, 196 <register_tm_clones+0x16>
     194:	4718      	bx	r3
     196:	4770      	bx	lr
     198:	20008ac0 	.word	0x20008ac0
     19c:	20008ac0 	.word	0x20008ac0
     1a0:	00000000 	.word	0x00000000

000001a4 <frame_dummy>:
     1a4:	b508      	push	{r3, lr}
     1a6:	4b05      	ldr	r3, [pc, #20]	; (1bc <frame_dummy+0x18>)
     1a8:	b11b      	cbz	r3, 1b2 <frame_dummy+0xe>
     1aa:	4905      	ldr	r1, [pc, #20]	; (1c0 <frame_dummy+0x1c>)
     1ac:	4805      	ldr	r0, [pc, #20]	; (1c4 <frame_dummy+0x20>)
     1ae:	f3af 8000 	nop.w
     1b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     1b6:	f7ff bfe3 	b.w	180 <register_tm_clones>
     1ba:	bf00      	nop
     1bc:	00000000 	.word	0x00000000
     1c0:	20009214 	.word	0x20009214
     1c4:	6001a400 	.word	0x6001a400

000001c8 <usb_serial_class::available()>:
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
	// Returns the number of bytes which have been received from your PC and
	// can be fetched using Serial.read() or Serial.readBytes().
        virtual int available() { return usb_serial_available(); }
     1c8:	f003 babc 	b.w	3744 <usb_serial_available>

000001cc <usb_serial_class::read()>:
	// Reads the next received byte, or returns -1 if nothing has been received
	// from your PC.
        virtual int read() { return usb_serial_getchar(); }
     1cc:	f003 bafe 	b.w	37cc <usb_serial_getchar>

000001d0 <hex_info_reset(hex_info_t*, char*)>:
  hex->addr  = 0u;
     1d0:	2300      	movs	r3, #0
  hex->min   = 0xFFFFFFFFu;
     1d2:	f04f 32ff 	mov.w	r2, #4294967295
  hex->addr  = 0u;
     1d6:	e9c0 1300 	strd	r1, r3, [r0]
  hex->num   = 0u;
     1da:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hex->min   = 0xFFFFFFFFu;
     1de:	e9c0 3204 	strd	r3, r2, [r0, #16]
  hex->eof   = 0;
     1e2:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hex->lines = 0;
     1e6:	6203      	str	r3, [r0, #32]
}
     1e8:	4770      	bx	lr
	if (sign) *p++ = '-';
	if (decpt == 0 && precision > 0) {
		*p++ = '0';
		*p++ = '.';
	}
	else if (decpt < 0 && precision > 0) {
     1ea:	bf00      	nop

000001ec <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)>:
                   unsigned int* addr, unsigned int* num, unsigned int* code) {
     1ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  *num = 0;
     1f0:	2400      	movs	r4, #0
                   unsigned int* addr, unsigned int* num, unsigned int* code) {
     1f2:	b084      	sub	sp, #16
  *num = 0;
     1f4:	601c      	str	r4, [r3, #0]
  if (theline[0] != ':') return 0;
     1f6:	f890 c000 	ldrb.w	ip, [r0]
     1fa:	f1bc 0f3a 	cmp.w	ip, #58	; 0x3a
     1fe:	d111      	bne.n	224 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0x38>
  if (strlen(theline) < 11) return 0;
     200:	4605      	mov	r5, r0
     202:	461f      	mov	r7, r3
     204:	4688      	mov	r8, r1
     206:	4616      	mov	r6, r2
     208:	f006 fa7a 	bl	6700 <strlen>
     20c:	280a      	cmp	r0, #10
     20e:	d803      	bhi.n	218 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0x2c>
  if (theline[0] != ':') return 0;
     210:	4620      	mov	r0, r4
}
     212:	b004      	add	sp, #16
     214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!sscanf(ptr, "%02x", &len)) return 0; ptr += 2;
     218:	aa01      	add	r2, sp, #4
     21a:	4929      	ldr	r1, [pc, #164]	; (2c0 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0xd4>)
     21c:	1c68      	adds	r0, r5, #1
     21e:	f005 fd31 	bl	5c84 <sscanf>
     222:	b918      	cbnz	r0, 22c <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0x40>
     224:	2000      	movs	r0, #0
}
     226:	b004      	add	sp, #16
     228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (strlen(theline) < (11 + (len * 2))) return 0;
     22c:	4628      	mov	r0, r5
     22e:	f006 fa67 	bl	6700 <strlen>
     232:	9b01      	ldr	r3, [sp, #4]
     234:	005b      	lsls	r3, r3, #1
     236:	330b      	adds	r3, #11
     238:	4298      	cmp	r0, r3
     23a:	d3f3      	bcc.n	224 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0x38>
  if (!sscanf(ptr, "%04x", addr)) return 0; ptr += 4;
     23c:	4632      	mov	r2, r6
     23e:	4921      	ldr	r1, [pc, #132]	; (2c4 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0xd8>)
     240:	1ce8      	adds	r0, r5, #3
     242:	f005 fd1f 	bl	5c84 <sscanf>
     246:	2800      	cmp	r0, #0
     248:	d0ec      	beq.n	224 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0x38>
  if (!sscanf(ptr, "%02x", code)) return 0; ptr += 2;
     24a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
     24c:	1de8      	adds	r0, r5, #7
     24e:	491c      	ldr	r1, [pc, #112]	; (2c0 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0xd4>)
     250:	f005 fd18 	bl	5c84 <sscanf>
     254:	2800      	cmp	r0, #0
     256:	d0e5      	beq.n	224 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0x38>
  sum = (len & 255) + (((*addr) >> 8) & 255) + ((*addr) & 255) + ((*code) & 255);
     258:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  if (!sscanf(ptr, "%02x", code)) return 0; ptr += 2;
     25a:	3509      	adds	r5, #9
  sum = (len & 255) + (((*addr) >> 8) & 255) + ((*addr) & 255) + ((*code) & 255);
     25c:	9901      	ldr	r1, [sp, #4]
     25e:	7814      	ldrb	r4, [r2, #0]
     260:	6833      	ldr	r3, [r6, #0]
     262:	fa54 f481 	uxtab	r4, r4, r1
    if (!sscanf(ptr, "%02x", &temp)) return 0;
     266:	4e16      	ldr	r6, [pc, #88]	; (2c0 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0xd4>)
  sum = (len & 255) + (((*addr) >> 8) & 255) + ((*addr) & 255) + ((*code) & 255);
     268:	fa54 f483 	uxtab	r4, r4, r3
     26c:	f3c3 2307 	ubfx	r3, r3, #8, #8
     270:	441c      	add	r4, r3
  while (*num != len) {
     272:	683b      	ldr	r3, [r7, #0]
     274:	e012      	b.n	29c <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0xb0>
    if (!sscanf(ptr, "%02x", &temp)) return 0;
     276:	4631      	mov	r1, r6
    ptr += 2;
     278:	3502      	adds	r5, #2
    if (!sscanf(ptr, "%02x", &temp)) return 0;
     27a:	f005 fd03 	bl	5c84 <sscanf>
     27e:	2800      	cmp	r0, #0
     280:	d0d0      	beq.n	224 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0x38>
    bytes[*num] = temp;
     282:	683b      	ldr	r3, [r7, #0]
     284:	9a03      	ldr	r2, [sp, #12]
     286:	f808 2003 	strb.w	r2, [r8, r3]
    sum += (unsigned)(bytes[*num] & 255);
     28a:	683b      	ldr	r3, [r7, #0]
     28c:	f818 2003 	ldrb.w	r2, [r8, r3]
    (*num)++;
     290:	3301      	adds	r3, #1
    if (*num >= 256) return 0;
     292:	2bff      	cmp	r3, #255	; 0xff
    sum += (unsigned)(bytes[*num] & 255);
     294:	4414      	add	r4, r2
    (*num)++;
     296:	603b      	str	r3, [r7, #0]
    if (*num >= 256) return 0;
     298:	d8c4      	bhi.n	224 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0x38>
  while (*num != len) {
     29a:	9901      	ldr	r1, [sp, #4]
     29c:	428b      	cmp	r3, r1
    if (!sscanf(ptr, "%02x", &temp)) return 0;
     29e:	4628      	mov	r0, r5
     2a0:	aa03      	add	r2, sp, #12
  while (*num != len) {
     2a2:	d1e8      	bne.n	276 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0x8a>
  if (!sscanf(ptr, "%02x", &cksum)) return 0;
     2a4:	aa02      	add	r2, sp, #8
     2a6:	4906      	ldr	r1, [pc, #24]	; (2c0 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0xd4>)
     2a8:	f005 fcec 	bl	5c84 <sscanf>
     2ac:	2800      	cmp	r0, #0
     2ae:	d0b9      	beq.n	224 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0x38>
  if (((sum & 255) + (cksum & 255)) & 255) return 0; // checksum error
     2b0:	9b02      	ldr	r3, [sp, #8]
     2b2:	441c      	add	r4, r3
     2b4:	b2e4      	uxtb	r4, r4
     2b6:	fab4 f084 	clz	r0, r4
     2ba:	0940      	lsrs	r0, r0, #5
     2bc:	e7b3      	b.n	226 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0x3a>
     2be:	bf00      	nop
     2c0:	200003c4 	.word	0x200003c4
     2c4:	200003cc 	.word	0x200003cc

000002c8 <process_hex_record(hex_info_t*)>:
  if (hex->code == 0u) { // data
     2c8:	6882      	ldr	r2, [r0, #8]
int process_hex_record(hex_info_t* hex) {
     2ca:	4603      	mov	r3, r0
  if (hex->code == 0u) { // data
     2cc:	b992      	cbnz	r2, 2f4 <process_hex_record(hex_info_t*)+0x2c>
    uint32_t end = hex->base + hex->addr + hex->num;
     2ce:	e9d0 1203 	ldrd	r1, r2, [r0, #12]
int process_hex_record(hex_info_t* hex) {
     2d2:	b410      	push	{r4}
    uint32_t end = hex->base + hex->addr + hex->num;
     2d4:	685c      	ldr	r4, [r3, #4]
    if (end > hex->max) hex->max = end;
     2d6:	6980      	ldr	r0, [r0, #24]
    uint32_t end = hex->base + hex->addr + hex->num;
     2d8:	4422      	add	r2, r4
     2da:	4411      	add	r1, r2
    if (end > hex->max) hex->max = end;
     2dc:	4288      	cmp	r0, r1
  return 0;
     2de:	f04f 0000 	mov.w	r0, #0
    if (end > hex->max) hex->max = end;
     2e2:	bf38      	it	cc
     2e4:	6199      	strcc	r1, [r3, #24]
    if (beg < hex->min) hex->min = beg;
     2e6:	6959      	ldr	r1, [r3, #20]
     2e8:	428a      	cmp	r2, r1
     2ea:	d200      	bcs.n	2ee <process_hex_record(hex_info_t*)+0x26>
     2ec:	615a      	str	r2, [r3, #20]
}
     2ee:	f85d 4b04 	ldr.w	r4, [sp], #4
     2f2:	4770      	bx	lr
  } else if (hex->code == 1u) { // EOF
     2f4:	3a01      	subs	r2, #1
     2f6:	2a04      	cmp	r2, #4
     2f8:	d81d      	bhi.n	336 <process_hex_record(hex_info_t*)+0x6e>
     2fa:	e8df f002 	tbb	[pc, r2]
     2fe:	0d09      	.short	0x0d09
     300:	151c      	.short	0x151c
     302:	03          	.byte	0x03
     303:	00          	.byte	0x00
    hex->base =  ((uint8_t)hex->data[0] << 24) |
     304:	6802      	ldr	r2, [r0, #0]
  return 0;
     306:	2000      	movs	r0, #0
     308:	6812      	ldr	r2, [r2, #0]
     30a:	ba12      	rev	r2, r2
    hex->base =  ((uint8_t)hex->data[0] << 24) |
     30c:	611a      	str	r2, [r3, #16]
     30e:	4770      	bx	lr
    hex->eof = 1;
     310:	2201      	movs	r2, #1
  return 0;
     312:	2000      	movs	r0, #0
    hex->eof = 1;
     314:	61da      	str	r2, [r3, #28]
     316:	4770      	bx	lr
    hex->base = (((uint8_t)hex->data[0] << 8) | (uint8_t)hex->data[1]) << 4;
     318:	6802      	ldr	r2, [r0, #0]
  return 0;
     31a:	2000      	movs	r0, #0
    hex->base = (((uint8_t)hex->data[0] << 8) | (uint8_t)hex->data[1]) << 4;
     31c:	8812      	ldrh	r2, [r2, #0]
     31e:	ba52      	rev16	r2, r2
     320:	b292      	uxth	r2, r2
     322:	0112      	lsls	r2, r2, #4
     324:	611a      	str	r2, [r3, #16]
     326:	4770      	bx	lr
    hex->base = (((uint8_t)hex->data[0] << 8) | (uint8_t)hex->data[1]) << 16;
     328:	6802      	ldr	r2, [r0, #0]
  return 0;
     32a:	2000      	movs	r0, #0
    hex->base = (((uint8_t)hex->data[0] << 8) | (uint8_t)hex->data[1]) << 16;
     32c:	8812      	ldrh	r2, [r2, #0]
     32e:	ba52      	rev16	r2, r2
     330:	0412      	lsls	r2, r2, #16
     332:	611a      	str	r2, [r3, #16]
     334:	4770      	bx	lr
  if (hex->code == 0u) { // data
     336:	2001      	movs	r0, #1
}
     338:	4770      	bx	lr
		if (val<0) *buf++ = '-';
     33a:	bf00      	nop

0000033c <firmware_buffer_init>:
  *buffer_addr = FLASH_BASE_ADDR + FLASH_SIZE - FLASH_RESERVE - 4;
     33c:	4a13      	ldr	r2, [pc, #76]	; (38c <firmware_buffer_init+0x50>)
  while (*buffer_addr > 0 && *((uint32_t *)*buffer_addr) == 0xFFFFFFFF)
     33e:	4613      	mov	r3, r2
  *buffer_addr = FLASH_BASE_ADDR + FLASH_SIZE - FLASH_RESERVE - 4;
     340:	6002      	str	r2, [r0, #0]
  while (*buffer_addr > 0 && *((uint32_t *)*buffer_addr) == 0xFFFFFFFF)
     342:	e002      	b.n	34a <firmware_buffer_init+0xe>
    *buffer_addr -= 4;
     344:	3b04      	subs	r3, #4
     346:	6003      	str	r3, [r0, #0]
  while (*buffer_addr > 0 && *((uint32_t *)*buffer_addr) == 0xFFFFFFFF)
     348:	b163      	cbz	r3, 364 <firmware_buffer_init+0x28>
     34a:	681a      	ldr	r2, [r3, #0]
     34c:	3201      	adds	r2, #1
     34e:	d0f9      	beq.n	344 <firmware_buffer_init+0x8>
  *buffer_addr += 4; // first address above code
     350:	3304      	adds	r3, #4
  if ((*buffer_addr % FLASH_SECTOR_SIZE) > 0)
     352:	f3c3 020b 	ubfx	r2, r3, #0, #12
  *buffer_addr += 4; // first address above code
     356:	6003      	str	r3, [r0, #0]
  if ((*buffer_addr % FLASH_SECTOR_SIZE) > 0)
     358:	b95a      	cbnz	r2, 372 <firmware_buffer_init+0x36>
  *buffer_size = FLASH_BASE_ADDR - *buffer_addr + FLASH_SIZE - FLASH_RESERVE;
     35a:	4a0d      	ldr	r2, [pc, #52]	; (390 <firmware_buffer_init+0x54>)
}
     35c:	2001      	movs	r0, #1
  *buffer_size = FLASH_BASE_ADDR - *buffer_addr + FLASH_SIZE - FLASH_RESERVE;
     35e:	1ad2      	subs	r2, r2, r3
     360:	600a      	str	r2, [r1, #0]
}
     362:	4770      	bx	lr
     364:	4a0b      	ldr	r2, [pc, #44]	; (394 <firmware_buffer_init+0x58>)
     366:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    *buffer_addr += FLASH_SECTOR_SIZE - (*buffer_addr % FLASH_SECTOR_SIZE);
     36a:	6003      	str	r3, [r0, #0]
}
     36c:	2001      	movs	r0, #1
  *buffer_size = FLASH_BASE_ADDR - *buffer_addr + FLASH_SIZE - FLASH_RESERVE;
     36e:	600a      	str	r2, [r1, #0]
}
     370:	4770      	bx	lr
{
     372:	b410      	push	{r4}
    *buffer_addr += FLASH_SECTOR_SIZE - (*buffer_addr % FLASH_SECTOR_SIZE);
     374:	4c08      	ldr	r4, [pc, #32]	; (398 <firmware_buffer_init+0x5c>)
  *buffer_size = FLASH_BASE_ADDR - *buffer_addr + FLASH_SIZE - FLASH_RESERVE;
     376:	4a07      	ldr	r2, [pc, #28]	; (394 <firmware_buffer_init+0x58>)
    *buffer_addr += FLASH_SECTOR_SIZE - (*buffer_addr % FLASH_SECTOR_SIZE);
     378:	401c      	ands	r4, r3
     37a:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
  *buffer_size = FLASH_BASE_ADDR - *buffer_addr + FLASH_SIZE - FLASH_RESERVE;
     37e:	1b12      	subs	r2, r2, r4
}
     380:	f85d 4b04 	ldr.w	r4, [sp], #4
    *buffer_addr += FLASH_SECTOR_SIZE - (*buffer_addr % FLASH_SECTOR_SIZE);
     384:	6003      	str	r3, [r0, #0]
}
     386:	2001      	movs	r0, #1
  *buffer_size = FLASH_BASE_ADDR - *buffer_addr + FLASH_SIZE - FLASH_RESERVE;
     388:	600a      	str	r2, [r1, #0]
}
     38a:	4770      	bx	lr
     38c:	607fbffc 	.word	0x607fbffc
     390:	607fc000 	.word	0x607fc000
     394:	607fb000 	.word	0x607fb000
     398:	fffff000 	.word	0xfffff000

0000039c <firmware_buffer_free>:
{
     39c:	b538      	push	{r3, r4, r5, lr}
  if (IN_FLASH(buffer_addr))
     39e:	f100 4320 	add.w	r3, r0, #2684354560	; 0xa0000000
     3a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
     3a6:	d215      	bcs.n	3d4 <firmware_buffer_free+0x38>
  while (address < (start + size) && error == 0) { 
     3a8:	1845      	adds	r5, r0, r1
     3aa:	4604      	mov	r4, r0
     3ac:	42a8      	cmp	r0, r5
     3ae:	d307      	bcc.n	3c0 <firmware_buffer_free+0x24>
}
     3b0:	bd38      	pop	{r3, r4, r5, pc}
          eepromemu_flash_erase_sector( (void*)address );
     3b2:	4620      	mov	r0, r4
     3b4:	f001 fec0 	bl	2138 <eepromemu_flash_erase_sector>
    address += FLASH_SECTOR_SIZE;
     3b8:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
  while (address < (start + size) && error == 0) { 
     3bc:	42ac      	cmp	r4, r5
     3be:	d2f7      	bcs.n	3b0 <firmware_buffer_free+0x14>
    if ((address & (FLASH_SECTOR_SIZE - 1)) == 0) {
     3c0:	f3c4 030b 	ubfx	r3, r4, #0, #12
      if (flash_sector_not_erased( address )) {
     3c4:	4620      	mov	r0, r4
    if ((address & (FLASH_SECTOR_SIZE - 1)) == 0) {
     3c6:	2b00      	cmp	r3, #0
     3c8:	d1f6      	bne.n	3b8 <firmware_buffer_free+0x1c>
      if (flash_sector_not_erased( address )) {
     3ca:	f7ff fe29 	bl	20 <flash_sector_not_erased>
     3ce:	2800      	cmp	r0, #0
     3d0:	d0f2      	beq.n	3b8 <firmware_buffer_free+0x1c>
     3d2:	e7ee      	b.n	3b2 <firmware_buffer_free+0x16>
}
     3d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    free( (void*)buffer_addr );
     3d8:	f003 beba 	b.w	4150 <free>

000003dc <check_flash_id>:
  for (uint32_t i = buffer; i < buffer + size - strlen(FLASH_ID); ++i) {
     3dc:	390b      	subs	r1, #11
{
     3de:	b570      	push	{r4, r5, r6, lr}
  for (uint32_t i = buffer; i < buffer + size - strlen(FLASH_ID); ++i) {
     3e0:	180d      	adds	r5, r1, r0
     3e2:	42a8      	cmp	r0, r5
     3e4:	d20e      	bcs.n	404 <check_flash_id+0x28>
     3e6:	4604      	mov	r4, r0
    if (strncmp((char *)i, FLASH_ID, strlen(FLASH_ID)) == 0)
     3e8:	4e07      	ldr	r6, [pc, #28]	; (408 <check_flash_id+0x2c>)
     3ea:	e001      	b.n	3f0 <check_flash_id+0x14>
  for (uint32_t i = buffer; i < buffer + size - strlen(FLASH_ID); ++i) {
     3ec:	42ac      	cmp	r4, r5
     3ee:	d009      	beq.n	404 <check_flash_id+0x28>
    if (strncmp((char *)i, FLASH_ID, strlen(FLASH_ID)) == 0)
     3f0:	4620      	mov	r0, r4
     3f2:	220b      	movs	r2, #11
     3f4:	4631      	mov	r1, r6
  for (uint32_t i = buffer; i < buffer + size - strlen(FLASH_ID); ++i) {
     3f6:	3401      	adds	r4, #1
    if (strncmp((char *)i, FLASH_ID, strlen(FLASH_ID)) == 0)
     3f8:	f005 fe8a 	bl	6110 <strncmp>
     3fc:	2800      	cmp	r0, #0
     3fe:	d1f5      	bne.n	3ec <check_flash_id+0x10>
      return 1;
     400:	2001      	movs	r0, #1
}
     402:	bd70      	pop	{r4, r5, r6, pc}
  return 0;
     404:	2000      	movs	r0, #0
}
     406:	bd70      	pop	{r4, r5, r6, pc}
     408:	200058f8 	.word	0x200058f8

0000040c <flash_write_block>:

//******************************************************************************
// take a 32-bit aligned array of 32-bit values and write it to erased flash
//******************************************************************************
int flash_write_block( uint32_t addr, char *data, uint32_t count )
{
     40c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  static uint32_t next_addr = 0;			// expected address
  
  int ret = 0;						// return value
  uint32_t data_i = 0;					// index to data array

  if ((addr % 4) != 0 || (count % 4) != 0) {		// if not 32-bit aligned
     410:	ea40 0302 	orr.w	r3, r0, r2
     414:	079b      	lsls	r3, r3, #30
     416:	d002      	beq.n	41e <flash_write_block+0x12>
    return 1;	// "flash_block align error\n"		//   return error code 1
     418:	2001      	movs	r0, #1
    }
    buf_count = 0;					//   re-init buf count
    addr += FLASH_WRITE_SIZE;				//   advance address
  }  
  return 0;						// return success
}
     41a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (buf_count > 0 && addr != next_addr) {		// if unexpected address   
     41e:	4f15      	ldr	r7, [pc, #84]	; (474 <flash_write_block+0x68>)
     420:	4c15      	ldr	r4, [pc, #84]	; (478 <flash_write_block+0x6c>)
     422:	683b      	ldr	r3, [r7, #0]
     424:	b113      	cbz	r3, 42c <flash_write_block+0x20>
     426:	6825      	ldr	r5, [r4, #0]
     428:	4285      	cmp	r5, r0
     42a:	d120      	bne.n	46e <flash_write_block+0x62>
  next_addr = addr + count;				//   compute next address
     42c:	1885      	adds	r5, r0, r2
     42e:	6025      	str	r5, [r4, #0]
  addr -= buf_count;					//   address of data[0]
     430:	1ac5      	subs	r5, r0, r3
  while (data_i < count) {				// while more data
     432:	b1ca      	cbz	r2, 468 <flash_write_block+0x5c>
     434:	1e4c      	subs	r4, r1, #1
     436:	f8df 8044 	ldr.w	r8, [pc, #68]	; 47c <flash_write_block+0x70>
    buf_count = 0;					//   re-init buf count
     43a:	f04f 0900 	mov.w	r9, #0
     43e:	18a6      	adds	r6, r4, r2
     440:	e000      	b.n	444 <flash_write_block+0x38>
    ((char*)&buf)[buf_count++] = data[data_i++];	//   copy a byte to buf
     442:	683b      	ldr	r3, [r7, #0]
     444:	1c59      	adds	r1, r3, #1
     446:	f814 cf01 	ldrb.w	ip, [r4, #1]!
      eepromemu_flash_write((void*)addr,(void*)&buf,4);	//     flash_write()
     44a:	4628      	mov	r0, r5
     44c:	2204      	movs	r2, #4
    if (buf_count < FLASH_WRITE_SIZE) {			//   if buf not complete
     44e:	2903      	cmp	r1, #3
    ((char*)&buf)[buf_count++] = data[data_i++];	//   copy a byte to buf
     450:	6039      	str	r1, [r7, #0]
     452:	f808 c003 	strb.w	ip, [r8, r3]
      eepromemu_flash_write((void*)addr,(void*)&buf,4);	//     flash_write()
     456:	4641      	mov	r1, r8
    if (buf_count < FLASH_WRITE_SIZE) {			//   if buf not complete
     458:	d904      	bls.n	464 <flash_write_block+0x58>
    addr += FLASH_WRITE_SIZE;				//   advance address
     45a:	4415      	add	r5, r2
      eepromemu_flash_write((void*)addr,(void*)&buf,4);	//     flash_write()
     45c:	f001 fdf6 	bl	204c <eepromemu_flash_write>
    buf_count = 0;					//   re-init buf count
     460:	f8c7 9000 	str.w	r9, [r7]
  while (data_i < count) {				// while more data
     464:	42b4      	cmp	r4, r6
     466:	d1ec      	bne.n	442 <flash_write_block+0x36>
  return 0;						// return success
     468:	2000      	movs	r0, #0
}
     46a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return 2;	// "unexpected address\n"		//   return error code 2   
     46e:	2002      	movs	r0, #2
     470:	e7d3      	b.n	41a <flash_write_block+0xe>
     472:	bf00      	nop
     474:	200091e0 	.word	0x200091e0
     478:	20009210 	.word	0x20009210
     47c:	200091dc 	.word	0x200091dc

00000480 <isrRcThrottle()>:
  } else {
    uint32_t w = now - rcS_rise_us;
    if (w <= 3000) { rcS_width_us = (uint16_t)w; rcS_last_update_us = now; }
  }
}
static void IRAM_ATTR isrRcThrottle() {
     480:	b510      	push	{r4, lr}
  uint32_t now = micros();
     482:	f001 fd17 	bl	1eb4 <micros>
     486:	4604      	mov	r4, r0
  if (digitalReadFast(PIN_RC_T)) {
     488:	2005      	movs	r0, #5
     48a:	f001 fd67 	bl	1f5c <digitalRead>
    rcT_rise_us = now;
     48e:	4b08      	ldr	r3, [pc, #32]	; (4b0 <isrRcThrottle()+0x30>)
  if (digitalReadFast(PIN_RC_T)) {
     490:	b108      	cbz	r0, 496 <isrRcThrottle()+0x16>
    rcT_rise_us = now;
     492:	601c      	str	r4, [r3, #0]
  } else {
    uint32_t w = now - rcT_rise_us;
    if (w <= 3000) { rcT_width_us = (uint16_t)w; rcT_last_update_us = now; }
  }
}
     494:	bd10      	pop	{r4, pc}
    uint32_t w = now - rcT_rise_us;
     496:	681b      	ldr	r3, [r3, #0]
    if (w <= 3000) { rcT_width_us = (uint16_t)w; rcT_last_update_us = now; }
     498:	f640 32b8 	movw	r2, #3000	; 0xbb8
    uint32_t w = now - rcT_rise_us;
     49c:	1ae3      	subs	r3, r4, r3
    if (w <= 3000) { rcT_width_us = (uint16_t)w; rcT_last_update_us = now; }
     49e:	4293      	cmp	r3, r2
     4a0:	d8f8      	bhi.n	494 <isrRcThrottle()+0x14>
     4a2:	b29b      	uxth	r3, r3
     4a4:	4903      	ldr	r1, [pc, #12]	; (4b4 <isrRcThrottle()+0x34>)
     4a6:	4a04      	ldr	r2, [pc, #16]	; (4b8 <isrRcThrottle()+0x38>)
     4a8:	800b      	strh	r3, [r1, #0]
     4aa:	6014      	str	r4, [r2, #0]
}
     4ac:	bd10      	pop	{r4, pc}
     4ae:	bf00      	nop
     4b0:	20008db8 	.word	0x20008db8
     4b4:	2000842c 	.word	0x2000842c
     4b8:	20008dc0 	.word	0x20008dc0

000004bc <isrRcSteer()>:
static void IRAM_ATTR isrRcSteer() {
     4bc:	b510      	push	{r4, lr}
  uint32_t now = micros();
     4be:	f001 fcf9 	bl	1eb4 <micros>
     4c2:	4604      	mov	r4, r0
  if (digitalReadFast(PIN_RC_S)) {
     4c4:	2004      	movs	r0, #4
     4c6:	f001 fd49 	bl	1f5c <digitalRead>
    rcS_rise_us = now;
     4ca:	4b08      	ldr	r3, [pc, #32]	; (4ec <isrRcSteer()+0x30>)
  if (digitalReadFast(PIN_RC_S)) {
     4cc:	b108      	cbz	r0, 4d2 <isrRcSteer()+0x16>
    rcS_rise_us = now;
     4ce:	601c      	str	r4, [r3, #0]
}
     4d0:	bd10      	pop	{r4, pc}
    uint32_t w = now - rcS_rise_us;
     4d2:	681b      	ldr	r3, [r3, #0]
    if (w <= 3000) { rcS_width_us = (uint16_t)w; rcS_last_update_us = now; }
     4d4:	f640 32b8 	movw	r2, #3000	; 0xbb8
    uint32_t w = now - rcS_rise_us;
     4d8:	1ae3      	subs	r3, r4, r3
    if (w <= 3000) { rcS_width_us = (uint16_t)w; rcS_last_update_us = now; }
     4da:	4293      	cmp	r3, r2
     4dc:	d8f8      	bhi.n	4d0 <isrRcSteer()+0x14>
     4de:	b29b      	uxth	r3, r3
     4e0:	4903      	ldr	r1, [pc, #12]	; (4f0 <isrRcSteer()+0x34>)
     4e2:	4a04      	ldr	r2, [pc, #16]	; (4f4 <isrRcSteer()+0x38>)
     4e4:	800b      	strh	r3, [r1, #0]
     4e6:	6014      	str	r4, [r2, #0]
}
     4e8:	bd10      	pop	{r4, pc}
     4ea:	bf00      	nop
     4ec:	20008db4 	.word	0x20008db4
     4f0:	2000842a 	.word	0x2000842a
     4f4:	20008dbc 	.word	0x20008dbc

000004f8 <OtaConsole::printf(char const*, ...)>:
    s->print(msg);
    s->print("\r\n");
  }

  // Print formatted line (like printf) with prefix and CRLF
  inline void printf(const char* fmt, ...) {
     4f8:	b40f      	push	{r0, r1, r2, r3}
    if (!enabled || !s) return;
     4fa:	4b15      	ldr	r3, [pc, #84]	; (550 <OtaConsole::printf(char const*, ...)+0x58>)
     4fc:	781b      	ldrb	r3, [r3, #0]
  inline void printf(const char* fmt, ...) {
     4fe:	b530      	push	{r4, r5, lr}
     500:	b0b3      	sub	sp, #204	; 0xcc
    if (!enabled || !s) return;
     502:	b1fb      	cbz	r3, 544 <OtaConsole::printf(char const*, ...)+0x4c>
     504:	4c13      	ldr	r4, [pc, #76]	; (554 <OtaConsole::printf(char const*, ...)+0x5c>)
     506:	6823      	ldr	r3, [r4, #0]
     508:	b1e3      	cbz	r3, 544 <OtaConsole::printf(char const*, ...)+0x4c>
    char buf[192];
    va_list ap;
    va_start(ap, fmt);
     50a:	ab37      	add	r3, sp, #220	; 0xdc
    vsnprintf(buf, sizeof(buf), fmt, ap);
     50c:	9a36      	ldr	r2, [sp, #216]	; 0xd8
     50e:	21c0      	movs	r1, #192	; 0xc0
     510:	a802      	add	r0, sp, #8
    va_start(ap, fmt);
     512:	9301      	str	r3, [sp, #4]
    vsnprintf(buf, sizeof(buf), fmt, ap);
     514:	f005 fc5e 	bl	5dd4 <vsnprintf>
    va_end(ap);
    s->print("S ");
     518:	6820      	ldr	r0, [r4, #0]
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
     51a:	2202      	movs	r2, #2
     51c:	490e      	ldr	r1, [pc, #56]	; (558 <OtaConsole::printf(char const*, ...)+0x60>)
     51e:	6803      	ldr	r3, [r0, #0]
     520:	685b      	ldr	r3, [r3, #4]
     522:	4798      	blx	r3
    s->print(buf);
     524:	6825      	ldr	r5, [r4, #0]
     526:	a802      	add	r0, sp, #8
     528:	f006 f8ea 	bl	6700 <strlen>
     52c:	682b      	ldr	r3, [r5, #0]
     52e:	4602      	mov	r2, r0
     530:	a902      	add	r1, sp, #8
     532:	685b      	ldr	r3, [r3, #4]
     534:	4628      	mov	r0, r5
     536:	4798      	blx	r3
    s->print("\r\n");
     538:	6820      	ldr	r0, [r4, #0]
     53a:	2202      	movs	r2, #2
     53c:	4907      	ldr	r1, [pc, #28]	; (55c <OtaConsole::printf(char const*, ...)+0x64>)
     53e:	6803      	ldr	r3, [r0, #0]
     540:	685b      	ldr	r3, [r3, #4]
     542:	4798      	blx	r3
  }
     544:	b033      	add	sp, #204	; 0xcc
     546:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
     54a:	b004      	add	sp, #16
     54c:	4770      	bx	lr
     54e:	bf00      	nop
     550:	2000842f 	.word	0x2000842f
     554:	20007c28 	.word	0x20007c28
     558:	200003fc 	.word	0x200003fc
     55c:	20007918 	.word	0x20007918

00000560 <SLOGF(char const*, ...)>:
static void SLOGF(const char* fmt, ...) {
     560:	b40f      	push	{r0, r1, r2, r3}
     562:	b500      	push	{lr}
     564:	b0c3      	sub	sp, #268	; 0x10c
  vsnprintf(buf, sizeof(buf), fmt, ap);
     566:	f44f 7180 	mov.w	r1, #256	; 0x100
static void SLOGF(const char* fmt, ...) {
     56a:	ab44      	add	r3, sp, #272	; 0x110
  vsnprintf(buf, sizeof(buf), fmt, ap);
     56c:	a802      	add	r0, sp, #8
static void SLOGF(const char* fmt, ...) {
     56e:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap, fmt);
     572:	9301      	str	r3, [sp, #4]
  vsnprintf(buf, sizeof(buf), fmt, ap);
     574:	f005 fc2e 	bl	5dd4 <vsnprintf>
     578:	a802      	add	r0, sp, #8
     57a:	f006 f8c1 	bl	6700 <strlen>
     57e:	4601      	mov	r1, r0
	// Discard all received data which has not been read.
        virtual void clear(void) { usb_serial_flush_input(); }
	// Transmit a single byte to your PC
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
	// Transmit a buffer containing any number of bytes to your PC
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     580:	a802      	add	r0, sp, #8
     582:	f003 f949 	bl	3818 <usb_serial_write>
  OtaConsole::printf("%s", buf);    // OTA to ESP32
     586:	a902      	add	r1, sp, #8
     588:	4803      	ldr	r0, [pc, #12]	; (598 <SLOGF(char const*, ...)+0x38>)
     58a:	f7ff ffb5 	bl	4f8 <OtaConsole::printf(char const*, ...)>
}
     58e:	b043      	add	sp, #268	; 0x10c
     590:	f85d eb04 	ldr.w	lr, [sp], #4
     594:	b004      	add	sp, #16
     596:	4770      	bx	lr
     598:	200003d4 	.word	0x200003d4
     59c:	00000000 	.word	0x00000000

000005a0 <loop>:
  delay(10);
  SLOGF("S BOOT_PINS fwd=%d rev=%d (0=LOW,1=HIGH)\r\n",
        (int)digitalRead(PIN_FWD), (int)digitalRead(PIN_REV));
}

void loop() {
     5a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     5a4:	b08d      	sub	sp, #52	; 0x34
     5a6:	4c54      	ldr	r4, [pc, #336]	; (6f8 <loop+0x158>)
  OtaUpdater::tick();
     5a8:	f000 fb3c 	bl	c24 <OtaUpdater::tick()>
  OtaConsole::setEnabled(!OtaUpdater::inProgress());
     5ac:	f000 fb34 	bl	c18 <OtaUpdater::inProgress()>
  inline void setEnabled(bool on) { enabled = on; }
     5b0:	4952      	ldr	r1, [pc, #328]	; (6fc <loop+0x15c>)

  static uint32_t t_sample = 0;
  if (millis() - t_sample >= 100) {
     5b2:	4a53      	ldr	r2, [pc, #332]	; (700 <loop+0x160>)
  OtaConsole::setEnabled(!OtaUpdater::inProgress());
     5b4:	f080 0001 	eor.w	r0, r0, #1
     5b8:	6823      	ldr	r3, [r4, #0]
     5ba:	7008      	strb	r0, [r1, #0]
  if (millis() - t_sample >= 100) {
     5bc:	6811      	ldr	r1, [r2, #0]
     5be:	1a5b      	subs	r3, r3, r1
     5c0:	2b63      	cmp	r3, #99	; 0x63
     5c2:	f200 80bb 	bhi.w	73c <loop+0x19c>
    if (g_watch.t2) SLOGF("S T2_CMD=%d\r\n", g_t2_cmd);
    if (g_watch.fnr) SLOGF("S FNR=%s\r\n", fnrToken(g_fnr));
  }

  static uint32_t t_led = 0; static bool led = false;
  if (!OtaUpdater::inProgress() && millis() - t_led >= BLINK_MS) {
     5c6:	f000 fb27 	bl	c18 <OtaUpdater::inProgress()>
     5ca:	b930      	cbnz	r0, 5da <loop+0x3a>
     5cc:	4a4d      	ldr	r2, [pc, #308]	; (704 <loop+0x164>)
     5ce:	6823      	ldr	r3, [r4, #0]
     5d0:	6811      	ldr	r1, [r2, #0]
     5d2:	1a5b      	subs	r3, r3, r1
     5d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
     5d8:	d228      	bcs.n	62c <loop+0x8c>
  static String line;
     5da:	4c4b      	ldr	r4, [pc, #300]	; (708 <loop+0x168>)
     5dc:	6821      	ldr	r1, [r4, #0]
     5de:	f011 0101 	ands.w	r1, r1, #1
     5e2:	d032      	beq.n	64a <loop+0xaa>
	String(double num, unsigned char digits=2) : String((float)num, digits) {}
	~String(void);

	// memory management
	unsigned char reserve(unsigned int size);
	inline unsigned int length(void) const {return len;}
     5e4:	4c49      	ldr	r4, [pc, #292]	; (70c <loop+0x16c>)
      line = "";
     5e6:	4d4a      	ldr	r5, [pc, #296]	; (710 <loop+0x170>)
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	//unsigned char equals(const __FlashStringHelper *pgmstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
     5e8:	4e4a      	ldr	r6, [pc, #296]	; (714 <loop+0x174>)
        virtual int available() { return usb_serial_available(); }
     5ea:	f003 f8ab 	bl	3744 <usb_serial_available>
  while (Serial.available()) {
     5ee:	b180      	cbz	r0, 612 <loop+0x72>
        virtual int read() { return usb_serial_getchar(); }
     5f0:	f003 f8ec 	bl	37cc <usb_serial_getchar>
    char c = (char)Serial.read();
     5f4:	b2c1      	uxtb	r1, r0
    if (c == '\r') continue;
     5f6:	290d      	cmp	r1, #13
     5f8:	d0f7      	beq.n	5ea <loop+0x4a>
    if (c == '\n') {
     5fa:	290a      	cmp	r1, #10
     5fc:	d00c      	beq.n	618 <loop+0x78>
    } else if (line.length() < 120) line += c;
     5fe:	68a3      	ldr	r3, [r4, #8]
     600:	2b77      	cmp	r3, #119	; 0x77
     602:	d8f2      	bhi.n	5ea <loop+0x4a>
	String & operator += (char c)			{return append(c);}
     604:	4620      	mov	r0, r4
     606:	f001 fa6d 	bl	1ae4 <String::append(char)>
        virtual int available() { return usb_serial_available(); }
     60a:	f003 f89b 	bl	3744 <usb_serial_available>
  while (Serial.available()) {
     60e:	2800      	cmp	r0, #0
     610:	d1ee      	bne.n	5f0 <loop+0x50>
    t_led = millis(); led = !led; digitalWrite(LED_PIN, led ? HIGH : LOW);
  }

  handleUsbCommandsOnce();
}
     612:	b00d      	add	sp, #52	; 0x34
     614:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      line.trim();
     618:	483c      	ldr	r0, [pc, #240]	; (70c <loop+0x16c>)
     61a:	f001 faff 	bl	1c1c <String::trim()>
      if (line.length()) {
     61e:	68a3      	ldr	r3, [r4, #8]
     620:	b9f3      	cbnz	r3, 660 <loop+0xc0>
      line = "";
     622:	4629      	mov	r1, r5
     624:	4620      	mov	r0, r4
     626:	f001 fa0b 	bl	1a40 <String::operator=(char const*)>
     62a:	e7de      	b.n	5ea <loop+0x4a>
    t_led = millis(); led = !led; digitalWrite(LED_PIN, led ? HIGH : LOW);
     62c:	4b3a      	ldr	r3, [pc, #232]	; (718 <loop+0x178>)
     62e:	6820      	ldr	r0, [r4, #0]
     630:	7819      	ldrb	r1, [r3, #0]
  static String line;
     632:	4c35      	ldr	r4, [pc, #212]	; (708 <loop+0x168>)
    t_led = millis(); led = !led; digitalWrite(LED_PIN, led ? HIGH : LOW);
     634:	f081 0101 	eor.w	r1, r1, #1
     638:	6010      	str	r0, [r2, #0]
     63a:	200d      	movs	r0, #13
     63c:	7019      	strb	r1, [r3, #0]
     63e:	f001 fc63 	bl	1f08 <digitalWrite>
  static String line;
     642:	6821      	ldr	r1, [r4, #0]
     644:	f011 0101 	ands.w	r1, r1, #1
     648:	d1cc      	bne.n	5e4 <loop+0x44>
     64a:	4830      	ldr	r0, [pc, #192]	; (70c <loop+0x16c>)
     64c:	f001 f980 	bl	1950 <String::String(char const*)>
     650:	2301      	movs	r3, #1
     652:	4a32      	ldr	r2, [pc, #200]	; (71c <loop+0x17c>)
     654:	4932      	ldr	r1, [pc, #200]	; (720 <loop+0x180>)
     656:	482d      	ldr	r0, [pc, #180]	; (70c <loop+0x16c>)
     658:	6023      	str	r3, [r4, #0]
     65a:	f003 fbed 	bl	3e38 <__aeabi_atexit>
     65e:	e7c1      	b.n	5e4 <loop+0x44>
        String verb, a1;
     660:	2100      	movs	r1, #0
     662:	a803      	add	r0, sp, #12
     664:	f001 f974 	bl	1950 <String::String(char const*)>
     668:	2100      	movs	r1, #0
     66a:	a806      	add	r0, sp, #24
     66c:	f001 f970 	bl	1950 <String::String(char const*)>
        int sp1 = line.indexOf(' ');
     670:	2120      	movs	r1, #32
     672:	4620      	mov	r0, r4
     674:	f001 fa5c 	bl	1b30 <String::indexOf(char) const>
        if (sp1 < 0) { verb = line; }
     678:	1e07      	subs	r7, r0, #0
     67a:	f2c0 817b 	blt.w	974 <loop+0x3d4>
        else { verb = line.substring(0, sp1); a1 = line.substring(sp1+1); a1.trim(); }
     67e:	463b      	mov	r3, r7
     680:	2200      	movs	r2, #0
     682:	4621      	mov	r1, r4
     684:	a809      	add	r0, sp, #36	; 0x24
     686:	f001 fa8f 	bl	1ba8 <String::substring(unsigned int, unsigned int) const>
     68a:	a909      	add	r1, sp, #36	; 0x24
     68c:	a803      	add	r0, sp, #12
     68e:	f001 f9c1 	bl	1a14 <String::operator=(String&&)>
     692:	a809      	add	r0, sp, #36	; 0x24
     694:	f001 f97a 	bl	198c <String::~String()>
     698:	1c7a      	adds	r2, r7, #1
     69a:	4621      	mov	r1, r4
     69c:	a809      	add	r0, sp, #36	; 0x24
     69e:	f001 fa57 	bl	1b50 <String::substring(unsigned int) const>
     6a2:	a909      	add	r1, sp, #36	; 0x24
     6a4:	a806      	add	r0, sp, #24
     6a6:	f001 f9b5 	bl	1a14 <String::operator=(String&&)>
     6aa:	a809      	add	r0, sp, #36	; 0x24
     6ac:	f001 f96e 	bl	198c <String::~String()>
     6b0:	a806      	add	r0, sp, #24
     6b2:	f001 fab3 	bl	1c1c <String::trim()>
        verb.toUpperCase(); a1.toUpperCase();
     6b6:	a803      	add	r0, sp, #12
     6b8:	f001 faa0 	bl	1bfc <String::toUpperCase()>
     6bc:	a806      	add	r0, sp, #24
     6be:	f001 fa9d 	bl	1bfc <String::toUpperCase()>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
     6c2:	4631      	mov	r1, r6
     6c4:	a803      	add	r0, sp, #12
     6c6:	f001 fa1d 	bl	1b04 <String::equals(char const*) const>
        if (verb == "SRC") {
     6ca:	2800      	cmp	r0, #0
     6cc:	f000 8116 	beq.w	8fc <loop+0x35c>
     6d0:	4914      	ldr	r1, [pc, #80]	; (724 <loop+0x184>)
     6d2:	a806      	add	r0, sp, #24
     6d4:	f001 fa16 	bl	1b04 <String::equals(char const*) const>
          if      (a1 == "?")      Serial.printf("[MyApp] SRC=%s\r\n", g_srcRc ? "rc" : "local");
     6d8:	2800      	cmp	r0, #0
     6da:	f000 811f 	beq.w	91c <loop+0x37c>
     6de:	4b12      	ldr	r3, [pc, #72]	; (728 <loop+0x188>)
     6e0:	4a12      	ldr	r2, [pc, #72]	; (72c <loop+0x18c>)
     6e2:	7819      	ldrb	r1, [r3, #0]
     6e4:	4b12      	ldr	r3, [pc, #72]	; (730 <loop+0x190>)
     6e6:	4813      	ldr	r0, [pc, #76]	; (734 <loop+0x194>)
     6e8:	2900      	cmp	r1, #0
     6ea:	bf08      	it	eq
     6ec:	461a      	moveq	r2, r3
     6ee:	4912      	ldr	r1, [pc, #72]	; (738 <loop+0x198>)
     6f0:	f001 f90c 	bl	190c <Print::printf(char const*, ...)>
     6f4:	e109      	b.n	90a <loop+0x36a>
     6f6:	bf00      	nop
     6f8:	2000927c 	.word	0x2000927c
     6fc:	2000842f 	.word	0x2000842f
     700:	20008df8 	.word	0x20008df8
     704:	20008df4 	.word	0x20008df4
     708:	20008d48 	.word	0x20008d48
     70c:	20008dfc 	.word	0x20008dfc
     710:	20007784 	.word	0x20007784
     714:	200077f0 	.word	0x200077f0
     718:	200092a9 	.word	0x200092a9
     71c:	20007c34 	.word	0x20007c34
     720:	0000198d 	.word	0x0000198d
     724:	2000785c 	.word	0x2000785c
     728:	2000842e 	.word	0x2000842e
     72c:	20007728 	.word	0x20007728
     730:	2000772c 	.word	0x2000772c
     734:	20007b50 	.word	0x20007b50
     738:	200077f4 	.word	0x200077f4
     73c:	6823      	ldr	r3, [r4, #0]
  g_s1 = analogRead(PIN_POT_S1);
     73e:	2003      	movs	r0, #3
     740:	4da9      	ldr	r5, [pc, #676]	; (9e8 <loop+0x448>)
    t_sample = millis();
     742:	6013      	str	r3, [r2, #0]
  g_s1 = analogRead(PIN_POT_S1);
     744:	f001 fa96 	bl	1c74 <analogRead>
     748:	8028      	strh	r0, [r5, #0]
  g_t1 = analogRead(PIN_POT_T1);
     74a:	201b      	movs	r0, #27
     74c:	f001 fa92 	bl	1c74 <analogRead>
     750:	4fa6      	ldr	r7, [pc, #664]	; (9ec <loop+0x44c>)
     752:	4603      	mov	r3, r0
  const bool fwd_low = (digitalRead(PIN_FWD) == LOW);
     754:	200a      	movs	r0, #10
  g_t1 = analogRead(PIN_POT_T1);
     756:	803b      	strh	r3, [r7, #0]
  const bool fwd_low = (digitalRead(PIN_FWD) == LOW);
     758:	f001 fc00 	bl	1f5c <digitalRead>
     75c:	4606      	mov	r6, r0
  const bool rev_low = (digitalRead(PIN_REV) == LOW);
     75e:	200b      	movs	r0, #11
     760:	f001 fbfc 	bl	1f5c <digitalRead>
  if ( fwd_low &&  rev_low) g_fnr = FNR_FAULT;
     764:	ea46 0300 	orr.w	r3, r6, r0
     768:	b2db      	uxtb	r3, r3
     76a:	2b00      	cmp	r3, #0
     76c:	f000 80d4 	beq.w	918 <loop+0x378>
  else if ( fwd_low && !rev_low) g_fnr = FNR_FWD;
     770:	2e00      	cmp	r6, #0
     772:	f040 8110 	bne.w	996 <loop+0x3f6>
     776:	2800      	cmp	r0, #0
     778:	f000 810d 	beq.w	996 <loop+0x3f6>
     77c:	2301      	movs	r3, #1
  if ( fwd_low &&  rev_low) g_fnr = FNR_FAULT;
     77e:	4e9c      	ldr	r6, [pc, #624]	; (9f0 <loop+0x450>)
     780:	7033      	strb	r3, [r6, #0]
  uint32_t s_age, t_age, now = micros();
     782:	f001 fb97 	bl	1eb4 <micros>
  noInterrupts();
     786:	b672      	cpsid	i
  s_age = now - rcS_last_update_us;
     788:	499a      	ldr	r1, [pc, #616]	; (9f4 <loop+0x454>)
  s_us = rcS_width_us;
     78a:	4b9b      	ldr	r3, [pc, #620]	; (9f8 <loop+0x458>)
  t_us = rcT_width_us;
     78c:	4a9b      	ldr	r2, [pc, #620]	; (9fc <loop+0x45c>)
  s_us = rcS_width_us;
     78e:	881b      	ldrh	r3, [r3, #0]
  t_us = rcT_width_us;
     790:	8812      	ldrh	r2, [r2, #0]
  s_age = now - rcS_last_update_us;
     792:	f8d1 c000 	ldr.w	ip, [r1]
  s_us = rcS_width_us;
     796:	b29b      	uxth	r3, r3
  t_age = now - rcT_last_update_us;
     798:	4999      	ldr	r1, [pc, #612]	; (a00 <loop+0x460>)
  t_us = rcT_width_us;
     79a:	b292      	uxth	r2, r2
  t_age = now - rcT_last_update_us;
     79c:	6809      	ldr	r1, [r1, #0]
     79e:	1a41      	subs	r1, r0, r1
  interrupts();
     7a0:	b662      	cpsie	i
  s_age = now - rcS_last_update_us;
     7a2:	eba0 000c 	sub.w	r0, r0, ip
  if (s_age <= RC_STALE_US) g_s2_cmd = mapPwmSigned1000(s_us);
     7a6:	f24c 3c50 	movw	ip, #50000	; 0xc350
     7aa:	4560      	cmp	r0, ip
     7ac:	f200 80cd 	bhi.w	94a <loop+0x3aa>
  int32_t x = (int32_t)us - RC_MID_US;
     7b0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
     7b4:	bf28      	it	cs
     7b6:	f44f 63fa 	movcs.w	r3, #2000	; 0x7d0
     7ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
     7be:	bf38      	it	cc
     7c0:	f44f 737a 	movcc.w	r3, #1000	; 0x3e8
     7c4:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc

  using ::abs;

#ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  inline long
  abs(long __i) { return __builtin_labs(__i); }
     7c8:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
     7cc:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
  if (abs(x) <= RC_DB_US) return 0;
     7d0:	2814      	cmp	r0, #20
     7d2:	f340 80ba 	ble.w	94a <loop+0x3aa>
  int32_t out = (x * 1000) / (RC_MAX_US - RC_MID_US); // / 500
     7d6:	005b      	lsls	r3, r3, #1
  if (s_age <= RC_STALE_US) g_s2_cmd = mapPwmSigned1000(s_us);
     7d8:	f8df 8290 	ldr.w	r8, [pc, #656]	; a6c <loop+0x4cc>
  if (v < lo) return lo; if (v > hi) return hi; return (int16_t)v;
     7dc:	b21b      	sxth	r3, r3
  if (s_age <= RC_STALE_US) g_s2_cmd = mapPwmSigned1000(s_us);
     7de:	f8a8 3000 	strh.w	r3, [r8]
  if (t_age <= RC_STALE_US) g_t2_cmd = mapPwmUnsigned1000(t_us);
     7e2:	f24c 3350 	movw	r3, #50000	; 0xc350
     7e6:	4299      	cmp	r1, r3
     7e8:	f200 80b9 	bhi.w	95e <loop+0x3be>
  int32_t out = ((int32_t)us - RC_MIN_US) * 1000 / (RC_MAX_US - RC_MIN_US); // /1000
     7ec:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
     7f0:	f8df 927c 	ldr.w	r9, [pc, #636]	; a70 <loop+0x4d0>
     7f4:	bf28      	it	cs
     7f6:	f44f 62fa 	movcs.w	r2, #2000	; 0x7d0
     7fa:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
     7fe:	bf38      	it	cc
     800:	f44f 727a 	movcc.w	r2, #1000	; 0x3e8
     804:	f5a2 737a 	sub.w	r3, r2, #1000	; 0x3e8
  return (int16_t)out;
     808:	b21b      	sxth	r3, r3
     80a:	f8a9 3000 	strh.w	r3, [r9]
    SLOGF("S gear=%s\r\n", fnrWord(g_fnr));            // Forward / Neutral / Reverse / Fault
     80e:	7833      	ldrb	r3, [r6, #0]
  switch (s) { case FNR_FWD: return "Forward"; case FNR_REV: return "Reverse";
     810:	2b02      	cmp	r3, #2
     812:	f200 80ad 	bhi.w	970 <loop+0x3d0>
     816:	4a7b      	ldr	r2, [pc, #492]	; (a04 <loop+0x464>)
     818:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    SLOGF("S gear=%s\r\n", fnrWord(g_fnr));            // Forward / Neutral / Reverse / Fault
     81c:	487a      	ldr	r0, [pc, #488]	; (a08 <loop+0x468>)
     81e:	f7ff fe9f 	bl	560 <SLOGF(char const*, ...)>
    SLOGF("S STEER1=%u\r\n",    g_s1);                 // raw ADC 0..4095
     822:	8829      	ldrh	r1, [r5, #0]
     824:	4879      	ldr	r0, [pc, #484]	; (a0c <loop+0x46c>)
     826:	f7ff fe9b 	bl	560 <SLOGF(char const*, ...)>
    SLOGF("S THROTTLE1=%u\r\n", g_t1);                 // raw ADC 0..4095
     82a:	8839      	ldrh	r1, [r7, #0]
     82c:	4878      	ldr	r0, [pc, #480]	; (a10 <loop+0x470>)
     82e:	f7ff fe97 	bl	560 <SLOGF(char const*, ...)>
    SLOGF("S STEER2=%d\r\n",    g_s2_cmd);             // RC mapped −1000..+1000
     832:	f9b8 1000 	ldrsh.w	r1, [r8]
     836:	4877      	ldr	r0, [pc, #476]	; (a14 <loop+0x474>)
     838:	f7ff fe92 	bl	560 <SLOGF(char const*, ...)>
    SLOGF("S THROTTLE2=%d\r\n", g_t2_cmd);             // RC mapped 0..1000 (or signed if enabled)
     83c:	f9b9 1000 	ldrsh.w	r1, [r9]
     840:	4875      	ldr	r0, [pc, #468]	; (a18 <loop+0x478>)
     842:	f7ff fe8d 	bl	560 <SLOGF(char const*, ...)>
  const int16_t steer_local = scaleSteerAnalog(g_s1);
     846:	8829      	ldrh	r1, [r5, #0]
  int32_t v = (int32_t)raw - 2048; v = (v * 1000) / 2048; return clamp_i16(v, -1000, 1000);
     848:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  if (v < lo) return lo; if (v > hi) return hi; return (int16_t)v;
     84c:	4873      	ldr	r0, [pc, #460]	; (a1c <loop+0x47c>)
  int32_t v = (int32_t)raw - 2048; v = (v * 1000) / 2048; return clamp_i16(v, -1000, 1000);
     84e:	f5a1 6200 	sub.w	r2, r1, #2048	; 0x800
     852:	fb03 f202 	mul.w	r2, r3, r2
  if (v < lo) return lo; if (v > hi) return hi; return (int16_t)v;
     856:	4282      	cmp	r2, r0
     858:	dc04      	bgt.n	864 <loop+0x2c4>
  int32_t v = (int32_t)raw - 2048; v = (v * 1000) / 2048; return clamp_i16(v, -1000, 1000);
     85a:	1e13      	subs	r3, r2, #0
     85c:	bfb8      	it	lt
     85e:	f203 73ff 	addwlt	r3, r3, #2047	; 0x7ff
     862:	12db      	asrs	r3, r3, #11
    if (g_watch.s1) SLOGF("S S1 raw=%u v=%.3f steer=%d\r\n", g_s1, (double)g_s1*ADC_VREF/ADC_MAX, (int)scaleSteerAnalog(g_s1));
     864:	4d6e      	ldr	r5, [pc, #440]	; (a20 <loop+0x480>)
     866:	782a      	ldrb	r2, [r5, #0]
     868:	b18a      	cbz	r2, 88e <loop+0x2ee>
     86a:	ee07 1a90 	vmov	s15, r1
     86e:	9300      	str	r3, [sp, #0]
     870:	486c      	ldr	r0, [pc, #432]	; (a24 <loop+0x484>)
     872:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     876:	ed9f 5b58 	vldr	d5, [pc, #352]	; 9d8 <loop+0x438>
     87a:	ed9f 6b59 	vldr	d6, [pc, #356]	; 9e0 <loop+0x440>
     87e:	ee27 7b05 	vmul.f64	d7, d7, d5
     882:	ee87 7b06 	vdiv.f64	d7, d7, d6
     886:	ec53 2b17 	vmov	r2, r3, d7
     88a:	f7ff fe69 	bl	560 <SLOGF(char const*, ...)>
    if (g_watch.t1) SLOGF("S T1 raw=%u v=%.3f thr=%d\r\n",  g_t1, (double)g_t1*ADC_VREF/ADC_MAX, (int)scaleThrottleAnalog(g_t1));
     88e:	78ab      	ldrb	r3, [r5, #2]
     890:	b303      	cbz	r3, 8d4 <loop+0x334>
     892:	8839      	ldrh	r1, [r7, #0]
  int32_t v = (int32_t)raw * 1000 / 4095; return clamp_i16(v, 0, 1000);
     894:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  if (v < lo) return lo; if (v > hi) return hi; return (int16_t)v;
     898:	4a63      	ldr	r2, [pc, #396]	; (a28 <loop+0x488>)
    if (g_watch.t1) SLOGF("S T1 raw=%u v=%.3f thr=%d\r\n",  g_t1, (double)g_t1*ADC_VREF/ADC_MAX, (int)scaleThrottleAnalog(g_t1));
     89a:	ee07 1a90 	vmov	s15, r1
  int32_t v = (int32_t)raw * 1000 / 4095; return clamp_i16(v, 0, 1000);
     89e:	fb03 f001 	mul.w	r0, r3, r1
    if (g_watch.t1) SLOGF("S T1 raw=%u v=%.3f thr=%d\r\n",  g_t1, (double)g_t1*ADC_VREF/ADC_MAX, (int)scaleThrottleAnalog(g_t1));
     8a2:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 9d8 <loop+0x438>
     8a6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
  if (v < lo) return lo; if (v > hi) return hi; return (int16_t)v;
     8aa:	4290      	cmp	r0, r2
    if (g_watch.t1) SLOGF("S T1 raw=%u v=%.3f thr=%d\r\n",  g_t1, (double)g_t1*ADC_VREF/ADC_MAX, (int)scaleThrottleAnalog(g_t1));
     8ac:	ed9f 5b4c 	vldr	d5, [pc, #304]	; 9e0 <loop+0x440>
     8b0:	ee27 7b06 	vmul.f64	d7, d7, d6
     8b4:	ee87 6b05 	vdiv.f64	d6, d7, d5
  if (v < lo) return lo; if (v > hi) return hi; return (int16_t)v;
     8b8:	dc06      	bgt.n	8c8 <loop+0x328>
  int32_t v = (int32_t)raw * 1000 / 4095; return clamp_i16(v, 0, 1000);
     8ba:	4b5c      	ldr	r3, [pc, #368]	; (a2c <loop+0x48c>)
     8bc:	fba3 2300 	umull	r2, r3, r3, r0
     8c0:	1ac0      	subs	r0, r0, r3
     8c2:	eb03 0350 	add.w	r3, r3, r0, lsr #1
     8c6:	0adb      	lsrs	r3, r3, #11
    if (g_watch.t1) SLOGF("S T1 raw=%u v=%.3f thr=%d\r\n",  g_t1, (double)g_t1*ADC_VREF/ADC_MAX, (int)scaleThrottleAnalog(g_t1));
     8c8:	9300      	str	r3, [sp, #0]
     8ca:	4859      	ldr	r0, [pc, #356]	; (a30 <loop+0x490>)
     8cc:	ec53 2b16 	vmov	r2, r3, d6
     8d0:	f7ff fe46 	bl	560 <SLOGF(char const*, ...)>
    if (g_watch.s2) SLOGF("S S2_CMD=%d\r\n", g_s2_cmd);
     8d4:	786b      	ldrb	r3, [r5, #1]
     8d6:	2b00      	cmp	r3, #0
     8d8:	d157      	bne.n	98a <loop+0x3ea>
    if (g_watch.t2) SLOGF("S T2_CMD=%d\r\n", g_t2_cmd);
     8da:	78eb      	ldrb	r3, [r5, #3]
     8dc:	2b00      	cmp	r3, #0
     8de:	d14e      	bne.n	97e <loop+0x3de>
    if (g_watch.fnr) SLOGF("S FNR=%s\r\n", fnrToken(g_fnr));
     8e0:	792b      	ldrb	r3, [r5, #4]
     8e2:	2b00      	cmp	r3, #0
     8e4:	f43f ae6f 	beq.w	5c6 <loop+0x26>
     8e8:	7833      	ldrb	r3, [r6, #0]
  switch (s) { case FNR_FWD: return "FWD"; case FNR_REV: return "REV";
     8ea:	2b02      	cmp	r3, #2
     8ec:	d85c      	bhi.n	9a8 <loop+0x408>
     8ee:	4a51      	ldr	r2, [pc, #324]	; (a34 <loop+0x494>)
     8f0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    if (g_watch.fnr) SLOGF("S FNR=%s\r\n", fnrToken(g_fnr));
     8f4:	4850      	ldr	r0, [pc, #320]	; (a38 <loop+0x498>)
     8f6:	f7ff fe33 	bl	560 <SLOGF(char const*, ...)>
     8fa:	e664      	b.n	5c6 <loop+0x26>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     8fc:	211c      	movs	r1, #28
     8fe:	484f      	ldr	r0, [pc, #316]	; (a3c <loop+0x49c>)
     900:	f002 ff8a 	bl	3818 <usb_serial_write>
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
     904:	484e      	ldr	r0, [pc, #312]	; (a40 <loop+0x4a0>)
     906:	f000 ffe5 	bl	18d4 <Print::println()>
      }
     90a:	a806      	add	r0, sp, #24
     90c:	f001 f83e 	bl	198c <String::~String()>
     910:	a803      	add	r0, sp, #12
     912:	f001 f83b 	bl	198c <String::~String()>
     916:	e684      	b.n	622 <loop+0x82>
     918:	2303      	movs	r3, #3
     91a:	e730      	b.n	77e <loop+0x1de>
     91c:	4949      	ldr	r1, [pc, #292]	; (a44 <loop+0x4a4>)
     91e:	a806      	add	r0, sp, #24
     920:	f001 f8f0 	bl	1b04 <String::equals(char const*) const>
          else if (a1 == "RC")     { g_srcRc = true;  Serial.println("[MyApp] SRC set to rc"); }
     924:	4607      	mov	r7, r0
     926:	2800      	cmp	r0, #0
     928:	d140      	bne.n	9ac <loop+0x40c>
     92a:	4947      	ldr	r1, [pc, #284]	; (a48 <loop+0x4a8>)
     92c:	a806      	add	r0, sp, #24
     92e:	f001 f8e9 	bl	1b04 <String::equals(char const*) const>
          else if (a1 == "LOCAL")  { g_srcRc = false; Serial.println("[MyApp] SRC set to local"); }
     932:	2800      	cmp	r0, #0
     934:	d045      	beq.n	9c2 <loop+0x422>
     936:	4b45      	ldr	r3, [pc, #276]	; (a4c <loop+0x4ac>)
     938:	2118      	movs	r1, #24
     93a:	4845      	ldr	r0, [pc, #276]	; (a50 <loop+0x4b0>)
     93c:	701f      	strb	r7, [r3, #0]
     93e:	f002 ff6b 	bl	3818 <usb_serial_write>
     942:	483f      	ldr	r0, [pc, #252]	; (a40 <loop+0x4a0>)
     944:	f000 ffc6 	bl	18d4 <Print::println()>
     948:	e7df      	b.n	90a <loop+0x36a>
     94a:	2300      	movs	r3, #0
  if (s_age <= RC_STALE_US) g_s2_cmd = mapPwmSigned1000(s_us);
     94c:	f8df 811c 	ldr.w	r8, [pc, #284]	; a6c <loop+0x4cc>
     950:	f8a8 3000 	strh.w	r3, [r8]
  if (t_age <= RC_STALE_US) g_t2_cmd = mapPwmUnsigned1000(t_us);
     954:	f24c 3350 	movw	r3, #50000	; 0xc350
     958:	4299      	cmp	r1, r3
     95a:	f67f af47 	bls.w	7ec <loop+0x24c>
  else                      g_t2_cmd = 0;
     95e:	2300      	movs	r3, #0
     960:	f8df 910c 	ldr.w	r9, [pc, #268]	; a70 <loop+0x4d0>
     964:	f8a9 3000 	strh.w	r3, [r9]
    SLOGF("S gear=%s\r\n", fnrWord(g_fnr));            // Forward / Neutral / Reverse / Fault
     968:	7833      	ldrb	r3, [r6, #0]
  switch (s) { case FNR_FWD: return "Forward"; case FNR_REV: return "Reverse";
     96a:	2b02      	cmp	r3, #2
     96c:	f67f af53 	bls.w	816 <loop+0x276>
    SLOGF("S gear=%s\r\n", fnrWord(g_fnr));            // Forward / Neutral / Reverse / Fault
     970:	4938      	ldr	r1, [pc, #224]	; (a54 <loop+0x4b4>)
     972:	e753      	b.n	81c <loop+0x27c>
        if (sp1 < 0) { verb = line; }
     974:	4621      	mov	r1, r4
     976:	a803      	add	r0, sp, #12
     978:	f001 f844 	bl	1a04 <String::operator=(String const&)>
     97c:	e69b      	b.n	6b6 <loop+0x116>
    if (g_watch.t2) SLOGF("S T2_CMD=%d\r\n", g_t2_cmd);
     97e:	f9b9 1000 	ldrsh.w	r1, [r9]
     982:	4835      	ldr	r0, [pc, #212]	; (a58 <loop+0x4b8>)
     984:	f7ff fdec 	bl	560 <SLOGF(char const*, ...)>
     988:	e7aa      	b.n	8e0 <loop+0x340>
    if (g_watch.s2) SLOGF("S S2_CMD=%d\r\n", g_s2_cmd);
     98a:	f9b8 1000 	ldrsh.w	r1, [r8]
     98e:	4833      	ldr	r0, [pc, #204]	; (a5c <loop+0x4bc>)
     990:	f7ff fde6 	bl	560 <SLOGF(char const*, ...)>
     994:	e7a1      	b.n	8da <loop+0x33a>
  else if (!fwd_low &&  rev_low) g_fnr = FNR_REV;
     996:	fab0 f380 	clz	r3, r0
     99a:	2e00      	cmp	r6, #0
     99c:	ea4f 1353 	mov.w	r3, r3, lsr #5
     9a0:	bf08      	it	eq
     9a2:	2300      	moveq	r3, #0
     9a4:	005b      	lsls	r3, r3, #1
     9a6:	e6ea      	b.n	77e <loop+0x1de>
    if (g_watch.fnr) SLOGF("S FNR=%s\r\n", fnrToken(g_fnr));
     9a8:	492d      	ldr	r1, [pc, #180]	; (a60 <loop+0x4c0>)
     9aa:	e7a3      	b.n	8f4 <loop+0x354>
          else if (a1 == "RC")     { g_srcRc = true;  Serial.println("[MyApp] SRC set to rc"); }
     9ac:	4b27      	ldr	r3, [pc, #156]	; (a4c <loop+0x4ac>)
     9ae:	2201      	movs	r2, #1
     9b0:	2115      	movs	r1, #21
     9b2:	482c      	ldr	r0, [pc, #176]	; (a64 <loop+0x4c4>)
     9b4:	701a      	strb	r2, [r3, #0]
     9b6:	f002 ff2f 	bl	3818 <usb_serial_write>
     9ba:	4821      	ldr	r0, [pc, #132]	; (a40 <loop+0x4a0>)
     9bc:	f000 ff8a 	bl	18d4 <Print::println()>
     9c0:	e7a3      	b.n	90a <loop+0x36a>
     9c2:	2115      	movs	r1, #21
     9c4:	4828      	ldr	r0, [pc, #160]	; (a68 <loop+0x4c8>)
     9c6:	f002 ff27 	bl	3818 <usb_serial_write>
     9ca:	481d      	ldr	r0, [pc, #116]	; (a40 <loop+0x4a0>)
     9cc:	f000 ff82 	bl	18d4 <Print::println()>
     9d0:	e79b      	b.n	90a <loop+0x36a>
     9d2:	bf00      	nop
     9d4:	f3af 8000 	nop.w
     9d8:	60000000 	.word	0x60000000
     9dc:	400a6666 	.word	0x400a6666
     9e0:	00000000 	.word	0x00000000
     9e4:	40affe00 	.word	0x40affe00
     9e8:	20009298 	.word	0x20009298
     9ec:	2000929a 	.word	0x2000929a
     9f0:	200092a6 	.word	0x200092a6
     9f4:	20008dbc 	.word	0x20008dbc
     9f8:	2000842a 	.word	0x2000842a
     9fc:	2000842c 	.word	0x2000842c
     a00:	20008dc0 	.word	0x20008dc0
     a04:	200003b8 	.word	0x200003b8
     a08:	20007734 	.word	0x20007734
     a0c:	20007740 	.word	0x20007740
     a10:	20007750 	.word	0x20007750
     a14:	20007764 	.word	0x20007764
     a18:	20007774 	.word	0x20007774
     a1c:	001f47ff 	.word	0x001f47ff
     a20:	20009208 	.word	0x20009208
     a24:	20007788 	.word	0x20007788
     a28:	003e8c16 	.word	0x003e8c16
     a2c:	00100101 	.word	0x00100101
     a30:	200077a8 	.word	0x200077a8
     a34:	20000398 	.word	0x20000398
     a38:	200077e4 	.word	0x200077e4
     a3c:	20007860 	.word	0x20007860
     a40:	20007b50 	.word	0x20007b50
     a44:	20007808 	.word	0x20007808
     a48:	20007824 	.word	0x20007824
     a4c:	2000842e 	.word	0x2000842e
     a50:	2000782c 	.word	0x2000782c
     a54:	20007718 	.word	0x20007718
     a58:	200077d4 	.word	0x200077d4
     a5c:	200077c4 	.word	0x200077c4
     a60:	20007720 	.word	0x20007720
     a64:	2000780c 	.word	0x2000780c
     a68:	20007848 	.word	0x20007848
     a6c:	2000929c 	.word	0x2000929c
     a70:	2000929e 	.word	0x2000929e

00000a74 <setup>:
void setup() {
     a74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pinMode(LED_PIN, OUTPUT);
     a78:	2101      	movs	r1, #1
void setup() {
     a7a:	b083      	sub	sp, #12
  pinMode(LED_PIN, OUTPUT);
     a7c:	200d      	movs	r0, #13
		uint32_t millis_begin = systick_millis_count;
     a7e:	4d3e      	ldr	r5, [pc, #248]	; (b78 <setup+0x104>)
     a80:	f001 fa7e 	bl	1f80 <pinMode>
  digitalWrite(LED_PIN, LOW);
     a84:	2100      	movs	r1, #0
     a86:	200d      	movs	r0, #13
     a88:	4c3c      	ldr	r4, [pc, #240]	; (b7c <setup+0x108>)
     a8a:	f001 fa3d 	bl	1f08 <digitalWrite>
  pinMode(PIN_FWD, INPUT_PULLUP);
     a8e:	2102      	movs	r1, #2
     a90:	200a      	movs	r0, #10
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     a92:	4f3b      	ldr	r7, [pc, #236]	; (b80 <setup+0x10c>)
     a94:	f001 fa74 	bl	1f80 <pinMode>
  pinMode(PIN_REV, INPUT_PULLUP);
     a98:	2102      	movs	r1, #2
     a9a:	200b      	movs	r0, #11
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     a9c:	f8df 910c 	ldr.w	r9, [pc, #268]	; bac <setup+0x138>
     aa0:	f001 fa6e 	bl	1f80 <pinMode>
static inline void analogReadResolution(unsigned int bits) { analogReadRes(bits); }
     aa4:	200c      	movs	r0, #12
     aa6:	f001 f93d 	bl	1d24 <analogReadRes>
  analogReadAveraging(8);
     aaa:	2008      	movs	r0, #8
     aac:	f001 f96a 	bl	1d84 <analogReadAveraging>
  pinMode(PIN_RC_S, INPUT);
     ab0:	2100      	movs	r1, #0
     ab2:	2004      	movs	r0, #4
				if (elapsed > 750) break;
     ab4:	f240 28ee 	movw	r8, #750	; 0x2ee
     ab8:	f001 fa62 	bl	1f80 <pinMode>
  pinMode(PIN_RC_T, INPUT);
     abc:	2100      	movs	r1, #0
     abe:	2005      	movs	r0, #5
     ac0:	f001 fa5e 	bl	1f80 <pinMode>
  attachInterrupt(digitalPinToInterrupt(PIN_RC_S), isrRcSteer,    CHANGE);
     ac4:	2204      	movs	r2, #4
     ac6:	492f      	ldr	r1, [pc, #188]	; (b84 <setup+0x110>)
     ac8:	4610      	mov	r0, r2
     aca:	f001 fb93 	bl	21f4 <attachInterrupt>
  attachInterrupt(digitalPinToInterrupt(PIN_RC_T), isrRcThrottle, CHANGE);
     ace:	2204      	movs	r2, #4
     ad0:	492d      	ldr	r1, [pc, #180]	; (b88 <setup+0x114>)
     ad2:	2005      	movs	r0, #5
     ad4:	f001 fb8e 	bl	21f4 <attachInterrupt>
		uint32_t millis_begin = systick_millis_count;
     ad8:	682e      	ldr	r6, [r5, #0]
		yield();
     ada:	f002 ff1b 	bl	3914 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     ade:	7823      	ldrb	r3, [r4, #0]
     ae0:	2b00      	cmp	r3, #0
     ae2:	d03c      	beq.n	b5e <setup+0xea>
     ae4:	783b      	ldrb	r3, [r7, #0]
     ae6:	07db      	lsls	r3, r3, #31
     ae8:	d539      	bpl.n	b5e <setup+0xea>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     aea:	682b      	ldr	r3, [r5, #0]
     aec:	f8d9 2000 	ldr.w	r2, [r9]
     af0:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     af2:	2b0e      	cmp	r3, #14
     af4:	d933      	bls.n	b5e <setup+0xea>
  Serial2.begin(115200);       // to ESP32 (pins 7/8 on Teensy)
     af6:	4c25      	ldr	r4, [pc, #148]	; (b8c <setup+0x118>)
     af8:	2200      	movs	r2, #0
     afa:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
     afe:	4620      	mov	r0, r4
     b00:	f000 fbe6 	bl	12d0 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)>
  OtaUpdater::begin(Serial2);
     b04:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
     b08:	4620      	mov	r0, r4
     b0a:	f000 f863 	bl	bd4 <OtaUpdater::begin(HardwareSerial&, unsigned long)>
  OtaUpdater::setAppVersion(APP_FW_VERSION);
     b0e:	4820      	ldr	r0, [pc, #128]	; (b90 <setup+0x11c>)
     b10:	f000 f84e 	bl	bb0 <OtaUpdater::setAppVersion(char const*)>
    s = &out;
     b14:	481f      	ldr	r0, [pc, #124]	; (b94 <setup+0x120>)
    enabled = true;
     b16:	4b20      	ldr	r3, [pc, #128]	; (b98 <setup+0x124>)
     b18:	2201      	movs	r2, #1
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     b1a:	210c      	movs	r1, #12
    s = &out;
     b1c:	6004      	str	r4, [r0, #0]
     b1e:	481f      	ldr	r0, [pc, #124]	; (b9c <setup+0x128>)
    enabled = true;
     b20:	701a      	strb	r2, [r3, #0]
     b22:	f002 fe79 	bl	3818 <usb_serial_write>
     b26:	481e      	ldr	r0, [pc, #120]	; (ba0 <setup+0x12c>)
     b28:	f000 fed4 	bl	18d4 <Print::println()>
  SLOGF("S MyApp FW=%s  (blink=%d ms)\r\n", APP_FW_VERSION, BLINK_MS);
     b2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     b30:	4917      	ldr	r1, [pc, #92]	; (b90 <setup+0x11c>)
     b32:	481c      	ldr	r0, [pc, #112]	; (ba4 <setup+0x130>)
     b34:	f7ff fd14 	bl	560 <SLOGF(char const*, ...)>
  delay(10);
     b38:	200a      	movs	r0, #10
     b3a:	f001 f967 	bl	1e0c <delay>
        (int)digitalRead(PIN_FWD), (int)digitalRead(PIN_REV));
     b3e:	200a      	movs	r0, #10
     b40:	f001 fa0c 	bl	1f5c <digitalRead>
     b44:	4601      	mov	r1, r0
     b46:	200b      	movs	r0, #11
     b48:	9101      	str	r1, [sp, #4]
     b4a:	f001 fa07 	bl	1f5c <digitalRead>
  SLOGF("S BOOT_PINS fwd=%d rev=%d (0=LOW,1=HIGH)\r\n",
     b4e:	9901      	ldr	r1, [sp, #4]
        (int)digitalRead(PIN_FWD), (int)digitalRead(PIN_REV));
     b50:	4602      	mov	r2, r0
  SLOGF("S BOOT_PINS fwd=%d rev=%d (0=LOW,1=HIGH)\r\n",
     b52:	4815      	ldr	r0, [pc, #84]	; (ba8 <setup+0x134>)
}
     b54:	b003      	add	sp, #12
     b56:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  SLOGF("S BOOT_PINS fwd=%d rev=%d (0=LOW,1=HIGH)\r\n",
     b5a:	f7ff bd01 	b.w	560 <SLOGF(char const*, ...)>
			uint32_t elapsed = systick_millis_count - millis_begin;
     b5e:	682b      	ldr	r3, [r5, #0]
			if (usb_configuration) {
     b60:	7822      	ldrb	r2, [r4, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
     b62:	1b9b      	subs	r3, r3, r6
			if (usb_configuration) {
     b64:	b12a      	cbz	r2, b72 <setup+0xfe>
				if (elapsed > 2000) break;
     b66:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
     b6a:	d8c4      	bhi.n	af6 <setup+0x82>
			yield();
     b6c:	f002 fed2 	bl	3914 <yield>
     b70:	e7b3      	b.n	ada <setup+0x66>
				if (elapsed > 750) break;
     b72:	4543      	cmp	r3, r8
     b74:	d9fa      	bls.n	b6c <setup+0xf8>
     b76:	e7be      	b.n	af6 <setup+0x82>
     b78:	2000927c 	.word	0x2000927c
     b7c:	200092b4 	.word	0x200092b4
     b80:	200092b3 	.word	0x200092b3
     b84:	000004bd 	.word	0x000004bd
     b88:	00000481 	.word	0x00000481
     b8c:	20007b60 	.word	0x20007b60
     b90:	200078b8 	.word	0x200078b8
     b94:	20007c28 	.word	0x20007c28
     b98:	2000842f 	.word	0x2000842f
     b9c:	200078c0 	.word	0x200078c0
     ba0:	20007b50 	.word	0x20007b50
     ba4:	200078d0 	.word	0x200078d0
     ba8:	200078f0 	.word	0x200078f0
     bac:	2000928c 	.word	0x2000928c

00000bb0 <OtaUpdater::setAppVersion(char const*)>:
static const char*     LOADER_ID = "FlasherX v2.4 (in-app)";

// === App-provided version/name (set from your .ino via setAppVersion) ===
static const char* _appVersion = "MyApp";
void OtaUpdater::setAppVersion(const char* name) {
  _appVersion = (name && name[0]) ? name : "MyApp";
     bb0:	b138      	cbz	r0, bc2 <OtaUpdater::setAppVersion(char const*)+0x12>
     bb2:	4b06      	ldr	r3, [pc, #24]	; (bcc <OtaUpdater::setAppVersion(char const*)+0x1c>)
     bb4:	7802      	ldrb	r2, [r0, #0]
     bb6:	2a00      	cmp	r2, #0
     bb8:	bf08      	it	eq
     bba:	4618      	moveq	r0, r3
     bbc:	4b04      	ldr	r3, [pc, #16]	; (bd0 <OtaUpdater::setAppVersion(char const*)+0x20>)
     bbe:	6018      	str	r0, [r3, #0]
}
     bc0:	4770      	bx	lr
  _appVersion = (name && name[0]) ? name : "MyApp";
     bc2:	4802      	ldr	r0, [pc, #8]	; (bcc <OtaUpdater::setAppVersion(char const*)+0x1c>)
     bc4:	4b02      	ldr	r3, [pc, #8]	; (bd0 <OtaUpdater::setAppVersion(char const*)+0x20>)
     bc6:	6018      	str	r0, [r3, #0]
}
     bc8:	4770      	bx	lr
     bca:	bf00      	nop
     bcc:	20000400 	.word	0x20000400
     bd0:	20007bc0 	.word	0x20007bc0

00000bd4 <OtaUpdater::begin(HardwareSerial&, unsigned long)>:
static void handleLine(const char* line);
static void beginHex();
static void handleHexRecord(const char* rec);
static void endHex();

void OtaUpdater::begin(HardwareSerial& otaPort, uint32_t baud) {
     bd4:	b538      	push	{r3, r4, r5, lr}
  _ota  = &otaPort;
  _baud = baud ? baud : 115200;
     bd6:	2900      	cmp	r1, #0
  _ota->begin(_baud);
     bd8:	6804      	ldr	r4, [r0, #0]
  _ota  = &otaPort;
     bda:	4d0d      	ldr	r5, [pc, #52]	; (c10 <OtaUpdater::begin(HardwareSerial&, unsigned long)+0x3c>)
  _ota->begin(_baud);
     bdc:	f04f 0200 	mov.w	r2, #0
     be0:	69e3      	ldr	r3, [r4, #28]
     be2:	bf08      	it	eq
     be4:	f44f 31e1 	moveq.w	r1, #115200	; 0x1c200
  _ota  = &otaPort;
     be8:	6028      	str	r0, [r5, #0]
  _ota->begin(_baud);
     bea:	4798      	blx	r3
  ota.handshakeReady = false;
     bec:	4b09      	ldr	r3, [pc, #36]	; (c14 <OtaUpdater::begin(HardwareSerial&, unsigned long)+0x40>)
     bee:	2200      	movs	r2, #0
  hex_info_reset(&ota.hex, ota.hexData);
     bf0:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
     bf4:	f103 0078 	add.w	r0, r3, #120	; 0x78
  ota.handshakeReady = false;
     bf8:	801a      	strh	r2, [r3, #0]
  ota.fatal          = false;
     bfa:	709a      	strb	r2, [r3, #2]
  ota.badLines       = 0;
     bfc:	615a      	str	r2, [r3, #20]
  ota.lastError[0]   = 0;
     bfe:	761a      	strb	r2, [r3, #24]
  ota.bufferSize     = 0;
     c00:	e9c3 2201 	strd	r2, r2, [r3, #4]
  ota.okLines        = 0;
     c04:	e9c3 2203 	strd	r2, r2, [r3, #12]
  resetOtaSession();
}
     c08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hex_info_reset(&ota.hex, ota.hexData);
     c0c:	f7ff bae0 	b.w	1d0 <hex_info_reset(hex_info_t*, char*)>
     c10:	20007c24 	.word	0x20007c24
     c14:	20008c80 	.word	0x20008c80

00000c18 <OtaUpdater::inProgress()>:

bool OtaUpdater::inProgress() { return ota.inProgress; }
     c18:	4b01      	ldr	r3, [pc, #4]	; (c20 <OtaUpdater::inProgress()+0x8>)
     c1a:	7858      	ldrb	r0, [r3, #1]
     c1c:	4770      	bx	lr
     c1e:	bf00      	nop
     c20:	20008c80 	.word	0x20008c80

00000c24 <OtaUpdater::tick()>:

const char* OtaUpdater::loaderId() { return LOADER_ID; }

void OtaUpdater::tick() {
     c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c28:	4caa      	ldr	r4, [pc, #680]	; (ed4 <OtaUpdater::tick()+0x2b0>)
    handleHexRecord(line + 2);
    return;
  }

  // Commands
  if (!strncmp(line, "HELLO", 5)) {
     c2a:	4eab      	ldr	r6, [pc, #684]	; (ed8 <OtaUpdater::tick()+0x2b4>)
    if (!strcmp(tok, OTA_TOKEN)) { ota.handshakeReady = true; sendLine("READY"); }
    else { ota.handshakeReady = false; sendLine("NACK"); }
    return;
  }

  if (!strcmp(line, "BEGIN HEX")) { beginHex(); return; }
     c2c:	4fab      	ldr	r7, [pc, #684]	; (edc <OtaUpdater::tick()+0x2b8>)
  if (!strcmp(line, "END"))       { endHex();   return; }
     c2e:	f8df 82f4 	ldr.w	r8, [pc, #756]	; f24 <OtaUpdater::tick()+0x300>
  if (!strcmp(line, "PING"))      { sendLine("PONG"); return; }
     c32:	f8df 92f4 	ldr.w	r9, [pc, #756]	; f28 <OtaUpdater::tick()+0x304>

  // VERSION: now reports the string set from your .ino
  if (!strcmp(line, "VERSION")) {
     c36:	f8df b2f4 	ldr.w	fp, [pc, #756]	; f2c <OtaUpdater::tick()+0x308>
void OtaUpdater::tick() {
     c3a:	ed2d 8b02 	vpush	{d8}
     c3e:	b087      	sub	sp, #28
  while (_ota->available()) {
     c40:	6820      	ldr	r0, [r4, #0]
     c42:	6803      	ldr	r3, [r0, #0]
     c44:	691b      	ldr	r3, [r3, #16]
     c46:	4798      	blx	r3
     c48:	b1d0      	cbz	r0, c80 <OtaUpdater::tick()+0x5c>
    char c = (char)_ota->read();
     c4a:	6820      	ldr	r0, [r4, #0]
     c4c:	6803      	ldr	r3, [r0, #0]
     c4e:	695b      	ldr	r3, [r3, #20]
     c50:	4798      	blx	r3
     c52:	b2c0      	uxtb	r0, r0
    if (c == '\r') continue;
     c54:	280d      	cmp	r0, #13
     c56:	d0f3      	beq.n	c40 <OtaUpdater::tick()+0x1c>
    if (c == '\n') {
     c58:	280a      	cmp	r0, #10
     c5a:	d008      	beq.n	c6e <OtaUpdater::tick()+0x4a>
    } else if (n + 1 < sizeof(buf)) {
     c5c:	4aa0      	ldr	r2, [pc, #640]	; (ee0 <OtaUpdater::tick()+0x2bc>)
     c5e:	6813      	ldr	r3, [r2, #0]
     c60:	1c59      	adds	r1, r3, #1
     c62:	29bf      	cmp	r1, #191	; 0xbf
     c64:	d8ec      	bhi.n	c40 <OtaUpdater::tick()+0x1c>
      buf[n++] = c;
     c66:	6011      	str	r1, [r2, #0]
     c68:	4a9e      	ldr	r2, [pc, #632]	; (ee4 <OtaUpdater::tick()+0x2c0>)
     c6a:	54d0      	strb	r0, [r2, r3]
     c6c:	e7e8      	b.n	c40 <OtaUpdater::tick()+0x1c>
      buf[n] = 0;
     c6e:	4d9c      	ldr	r5, [pc, #624]	; (ee0 <OtaUpdater::tick()+0x2bc>)
     c70:	2200      	movs	r2, #0
     c72:	489c      	ldr	r0, [pc, #624]	; (ee4 <OtaUpdater::tick()+0x2c0>)
     c74:	682b      	ldr	r3, [r5, #0]
     c76:	54c2      	strb	r2, [r0, r3]
      if (n) handleLine(buf);
     c78:	b93b      	cbnz	r3, c8a <OtaUpdater::tick()+0x66>
      n = 0;
     c7a:	2300      	movs	r3, #0
     c7c:	602b      	str	r3, [r5, #0]
     c7e:	e7df      	b.n	c40 <OtaUpdater::tick()+0x1c>
}
     c80:	b007      	add	sp, #28
     c82:	ecbd 8b02 	vpop	{d8}
     c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!line || !line[0]) return;
     c8a:	7803      	ldrb	r3, [r0, #0]
     c8c:	2b00      	cmp	r3, #0
     c8e:	d0f4      	beq.n	c7a <OtaUpdater::tick()+0x56>
  if (line[0] == 'L' && line[1] == ' ') {
     c90:	2b4c      	cmp	r3, #76	; 0x4c
     c92:	f000 8099 	beq.w	dc8 <OtaUpdater::tick()+0x1a4>
  if (!strncmp(line, "HELLO", 5)) {
     c96:	6803      	ldr	r3, [r0, #0]
     c98:	42b3      	cmp	r3, r6
     c9a:	f000 80c2 	beq.w	e22 <OtaUpdater::tick()+0x1fe>
  if (!strcmp(line, "BEGIN HEX")) { beginHex(); return; }
     c9e:	6803      	ldr	r3, [r0, #0]
     ca0:	42bb      	cmp	r3, r7
     ca2:	f000 80e1 	beq.w	e68 <OtaUpdater::tick()+0x244>
  if (!strcmp(line, "END"))       { endHex();   return; }
     ca6:	6803      	ldr	r3, [r0, #0]
     ca8:	4543      	cmp	r3, r8
     caa:	d013      	beq.n	cd4 <OtaUpdater::tick()+0xb0>
  if (!strcmp(line, "PING"))      { sendLine("PONG"); return; }
     cac:	454b      	cmp	r3, r9
     cae:	f000 8154 	beq.w	f5a <OtaUpdater::tick()+0x336>
  if (!strcmp(line, "VERSION")) {
     cb2:	6803      	ldr	r3, [r0, #0]
     cb4:	455b      	cmp	r3, fp
     cb6:	f000 8158 	beq.w	f6a <OtaUpdater::tick()+0x346>
  _ota->print(s);
     cba:	6820      	ldr	r0, [r4, #0]
							  return write((const uint8_t *)str, strlen(str)); }
     cbc:	2203      	movs	r2, #3
     cbe:	498a      	ldr	r1, [pc, #552]	; (ee8 <OtaUpdater::tick()+0x2c4>)
     cc0:	6803      	ldr	r3, [r0, #0]
     cc2:	685b      	ldr	r3, [r3, #4]
     cc4:	4798      	blx	r3
    _ota->print("FW ");
    _ota->print(_appVersion);
    _ota->print("\r\n");
    _ota->print("FLASHERX ");
    _ota->print(LOADER_ID);
    _ota->print("\r\n");
     cc6:	6820      	ldr	r0, [r4, #0]
     cc8:	2202      	movs	r2, #2
     cca:	4988      	ldr	r1, [pc, #544]	; (eec <OtaUpdater::tick()+0x2c8>)
     ccc:	6803      	ldr	r3, [r0, #0]
     cce:	685b      	ldr	r3, [r3, #4]
     cd0:	4798      	blx	r3
     cd2:	e7d2      	b.n	c7a <OtaUpdater::tick()+0x56>
    _ota->print("BAD "); _ota->print(lineNo);  _ota->print("\r\n");
  }
}

static void endHex() {
  if (!ota.inProgress) { sendLine("HEX IDLE"); return; }
     cd4:	f8df a244 	ldr.w	sl, [pc, #580]	; f1c <OtaUpdater::tick()+0x2f8>
  if (!strcmp(line, "END"))       { endHex();   return; }
     cd8:	2200      	movs	r2, #0
  if (!ota.inProgress) { sendLine("HEX IDLE"); return; }
     cda:	f89a 3001 	ldrb.w	r3, [sl, #1]
     cde:	2b00      	cmp	r3, #0
     ce0:	f000 8133 	beq.w	f4a <OtaUpdater::tick()+0x326>

  ota.inProgress     = false;
  ota.handshakeReady = false;

  uint32_t payload = 0;
  if (ota.hex.min != 0xFFFFFFFF && ota.hex.max > ota.hex.min) {
     ce4:	f8da 308c 	ldr.w	r3, [sl, #140]	; 0x8c
  ota.handshakeReady = false;
     ce8:	f8aa 2000 	strh.w	r2, [sl]
  if (ota.hex.min != 0xFFFFFFFF && ota.hex.max > ota.hex.min) {
     cec:	1c59      	adds	r1, r3, #1
     cee:	f000 818d 	beq.w	100c <OtaUpdater::tick()+0x3e8>
     cf2:	f8da 1090 	ldr.w	r1, [sl, #144]	; 0x90
     cf6:	428b      	cmp	r3, r1
     cf8:	f080 8188 	bcs.w	100c <OtaUpdater::tick()+0x3e8>
    payload = ota.hex.max - ota.hex.min;
     cfc:	1acb      	subs	r3, r1, r3
     cfe:	9302      	str	r3, [sp, #8]
  }

  bool success = (!ota.fatal && ota.badLines == 0);
     d00:	f89a 3002 	ldrb.w	r3, [sl, #2]
     d04:	2b00      	cmp	r3, #0
     d06:	f040 815e 	bne.w	fc6 <OtaUpdater::tick()+0x3a2>
     d0a:	f8da 3014 	ldr.w	r3, [sl, #20]
     d0e:	9303      	str	r3, [sp, #12]
     d10:	2b00      	cmp	r3, #0
     d12:	f040 8158 	bne.w	fc6 <OtaUpdater::tick()+0x3a2>
  if (success && !ota.hex.eof) success = false;
     d16:	f8da 3094 	ldr.w	r3, [sl, #148]	; 0x94
     d1a:	2b00      	cmp	r3, #0
     d1c:	f000 8153 	beq.w	fc6 <OtaUpdater::tick()+0x3a2>
  if (success && ota.bytes == 0) success = false;
     d20:	f8da 300c 	ldr.w	r3, [sl, #12]
     d24:	2b00      	cmp	r3, #0
     d26:	f000 814e 	beq.w	fc6 <OtaUpdater::tick()+0x3a2>
    uint32_t v = *(uint32_t*)(0x40C + ota.bufferAddr);
    if (v != 0xFFFFF9DE) success = false;
  }
#endif

  if (success && !check_flash_id(ota.bufferAddr, payload)) success = false;
     d2a:	9902      	ldr	r1, [sp, #8]
     d2c:	f8da 0004 	ldr.w	r0, [sl, #4]
     d30:	f7ff fb54 	bl	3dc <check_flash_id>
     d34:	2800      	cmp	r0, #0
     d36:	f000 8146 	beq.w	fc6 <OtaUpdater::tick()+0x3a2>

  if (success) {
    _ota->print("HEX OK lines="); _ota->print(ota.hex.lines);
     d3a:	6820      	ldr	r0, [r4, #0]
     d3c:	220d      	movs	r2, #13
     d3e:	496c      	ldr	r1, [pc, #432]	; (ef0 <OtaUpdater::tick()+0x2cc>)
     d40:	6803      	ldr	r3, [r0, #0]
     d42:	685b      	ldr	r3, [r3, #4]
     d44:	4798      	blx	r3
	size_t print(int n)				{ return print((long)n); }
     d46:	f8da 1098 	ldr.w	r1, [sl, #152]	; 0x98
     d4a:	6820      	ldr	r0, [r4, #0]
     d4c:	f000 fdb6 	bl	18bc <Print::print(long)>
    _ota->print(" bytes=");       _ota->print(ota.bytes);
     d50:	6820      	ldr	r0, [r4, #0]
							  return write((const uint8_t *)str, strlen(str)); }
     d52:	2207      	movs	r2, #7
     d54:	4967      	ldr	r1, [pc, #412]	; (ef4 <OtaUpdater::tick()+0x2d0>)
     d56:	6803      	ldr	r3, [r0, #0]
     d58:	685b      	ldr	r3, [r3, #4]
     d5a:	4798      	blx	r3
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     d5c:	9b03      	ldr	r3, [sp, #12]
     d5e:	220a      	movs	r2, #10
     d60:	f8da 100c 	ldr.w	r1, [sl, #12]
     d64:	6820      	ldr	r0, [r4, #0]
     d66:	f000 fddf 	bl	1928 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    _ota->print("\r\n");
     d6a:	6820      	ldr	r0, [r4, #0]
							  return write((const uint8_t *)str, strlen(str)); }
     d6c:	2202      	movs	r2, #2
     d6e:	495f      	ldr	r1, [pc, #380]	; (eec <OtaUpdater::tick()+0x2c8>)
     d70:	6803      	ldr	r3, [r0, #0]
     d72:	685b      	ldr	r3, [r3, #4]
     d74:	4798      	blx	r3
    _ota->print("APPLIED\r\n");
     d76:	6820      	ldr	r0, [r4, #0]
     d78:	495f      	ldr	r1, [pc, #380]	; (ef8 <OtaUpdater::tick()+0x2d4>)
     d7a:	2209      	movs	r2, #9
     d7c:	6803      	ldr	r3, [r0, #0]
     d7e:	685b      	ldr	r3, [r3, #4]
     d80:	4798      	blx	r3
    _ota->flush();
     d82:	6820      	ldr	r0, [r4, #0]
     d84:	6803      	ldr	r3, [r0, #0]
     d86:	68db      	ldr	r3, [r3, #12]
     d88:	4798      	blx	r3

    flash_move(FLASH_BASE_ADDR, ota.bufferAddr, payload);
     d8a:	9a02      	ldr	r2, [sp, #8]
     d8c:	f8da 1004 	ldr.w	r1, [sl, #4]
     d90:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
     d94:	f7ff f954 	bl	40 <flash_move>
    REBOOT;
     d98:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     d9c:	4a57      	ldr	r2, [pc, #348]	; (efc <OtaUpdater::tick()+0x2d8>)
     d9e:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
  ota.handshakeReady = false;
     da2:	2300      	movs	r3, #0
  hex_info_reset(&ota.hex, ota.hexData);
     da4:	4956      	ldr	r1, [pc, #344]	; (f00 <OtaUpdater::tick()+0x2dc>)
  ota.handshakeReady = false;
     da6:	f8aa 3000 	strh.w	r3, [sl]
  hex_info_reset(&ota.hex, ota.hexData);
     daa:	f1a1 0028 	sub.w	r0, r1, #40	; 0x28
  ota.lastError[0]   = 0;
     dae:	f88a 3018 	strb.w	r3, [sl, #24]
  ota.fatal          = false;
     db2:	f88a 3002 	strb.w	r3, [sl, #2]
  ota.badLines       = 0;
     db6:	f8ca 3014 	str.w	r3, [sl, #20]
  ota.bufferSize     = 0;
     dba:	e9ca 3301 	strd	r3, r3, [sl, #4]
  ota.okLines        = 0;
     dbe:	e9ca 3303 	strd	r3, r3, [sl, #12]
  hex_info_reset(&ota.hex, ota.hexData);
     dc2:	f7ff fa05 	bl	1d0 <hex_info_reset(hex_info_t*, char*)>
}
     dc6:	e758      	b.n	c7a <OtaUpdater::tick()+0x56>
  if (line[0] == 'L' && line[1] == ' ') {
     dc8:	7843      	ldrb	r3, [r0, #1]
     dca:	2b20      	cmp	r3, #32
     dcc:	f47f af63 	bne.w	c96 <OtaUpdater::tick()+0x72>
  if (!ota.inProgress) { sendLine("HEX IDLE"); return; }
     dd0:	f8df a148 	ldr.w	sl, [pc, #328]	; f1c <OtaUpdater::tick()+0x2f8>
     dd4:	f89a 3001 	ldrb.w	r3, [sl, #1]
     dd8:	2b00      	cmp	r3, #0
     dda:	f000 80b6 	beq.w	f4a <OtaUpdater::tick()+0x326>
  ota.hex.lines++;
     dde:	f8da 3098 	ldr.w	r3, [sl, #152]	; 0x98
     de2:	3301      	adds	r3, #1
     de4:	ee08 3a10 	vmov	s16, r3
     de8:	f8ca 3098 	str.w	r3, [sl, #152]	; 0x98
  if (ok && (parse_hex_line(rec, ota.hex.data, &ota.hex.addr, &ota.hex.num, &ota.hex.code) == 0)) {
     dec:	f89a 3002 	ldrb.w	r3, [sl, #2]
     df0:	2b00      	cmp	r3, #0
     df2:	f000 8111 	beq.w	1018 <OtaUpdater::tick()+0x3f4>
    ota.badLines++;
     df6:	f8da 3014 	ldr.w	r3, [sl, #20]
     dfa:	2204      	movs	r2, #4
    _ota->print("BAD "); _ota->print(lineNo);  _ota->print("\r\n");
     dfc:	6820      	ldr	r0, [r4, #0]
    ota.badLines++;
     dfe:	3301      	adds	r3, #1
     e00:	4940      	ldr	r1, [pc, #256]	; (f04 <OtaUpdater::tick()+0x2e0>)
     e02:	f8ca 3014 	str.w	r3, [sl, #20]
    ota.fatal = true;
     e06:	2301      	movs	r3, #1
     e08:	f88a 3002 	strb.w	r3, [sl, #2]
     e0c:	6803      	ldr	r3, [r0, #0]
     e0e:	685b      	ldr	r3, [r3, #4]
     e10:	4798      	blx	r3
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
     e12:	ee18 1a10 	vmov	r1, s16
     e16:	2300      	movs	r3, #0
     e18:	220a      	movs	r2, #10
     e1a:	6820      	ldr	r0, [r4, #0]
     e1c:	f000 fd84 	bl	1928 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    _ota->print("BAD "); _ota->print(lineNo);  _ota->print("\r\n");
     e20:	e751      	b.n	cc6 <OtaUpdater::tick()+0xa2>
  if (!strncmp(line, "HELLO", 5)) {
     e22:	7903      	ldrb	r3, [r0, #4]
     e24:	2b4f      	cmp	r3, #79	; 0x4f
     e26:	f47f af3a 	bne.w	c9e <OtaUpdater::tick()+0x7a>
    if (ota.inProgress) { sendLine("BUSY"); return; }
     e2a:	f8df a0f0 	ldr.w	sl, [pc, #240]	; f1c <OtaUpdater::tick()+0x2f8>
     e2e:	f89a 3001 	ldrb.w	r3, [sl, #1]
     e32:	2b00      	cmp	r3, #0
     e34:	f040 808d 	bne.w	f52 <OtaUpdater::tick()+0x32e>
    while (*tok == ' ') tok++;
     e38:	7943      	ldrb	r3, [r0, #5]
    const char* tok = line + 5;
     e3a:	4833      	ldr	r0, [pc, #204]	; (f08 <OtaUpdater::tick()+0x2e4>)
    while (*tok == ' ') tok++;
     e3c:	2b20      	cmp	r3, #32
     e3e:	d103      	bne.n	e48 <OtaUpdater::tick()+0x224>
     e40:	f810 3f01 	ldrb.w	r3, [r0, #1]!
     e44:	2b20      	cmp	r3, #32
     e46:	d0fb      	beq.n	e40 <OtaUpdater::tick()+0x21c>
    if (!*tok) { sendLine("NACK"); return; }
     e48:	2b00      	cmp	r3, #0
     e4a:	d07a      	beq.n	f42 <OtaUpdater::tick()+0x31e>
    if (!strcmp(tok, OTA_TOKEN)) { ota.handshakeReady = true; sendLine("READY"); }
     e4c:	492f      	ldr	r1, [pc, #188]	; (f0c <OtaUpdater::tick()+0x2e8>)
     e4e:	f005 fa7b 	bl	6348 <strcmp>
     e52:	2800      	cmp	r0, #0
     e54:	d16c      	bne.n	f30 <OtaUpdater::tick()+0x30c>
     e56:	2301      	movs	r3, #1
  _ota->print(s);
     e58:	6820      	ldr	r0, [r4, #0]
							  return write((const uint8_t *)str, strlen(str)); }
     e5a:	2205      	movs	r2, #5
     e5c:	492c      	ldr	r1, [pc, #176]	; (f10 <OtaUpdater::tick()+0x2ec>)
    if (!strcmp(tok, OTA_TOKEN)) { ota.handshakeReady = true; sendLine("READY"); }
     e5e:	f88a 3000 	strb.w	r3, [sl]
     e62:	6803      	ldr	r3, [r0, #0]
     e64:	685b      	ldr	r3, [r3, #4]
     e66:	e72d      	b.n	cc4 <OtaUpdater::tick()+0xa0>
  if (!strcmp(line, "BEGIN HEX")) { beginHex(); return; }
     e68:	4b2a      	ldr	r3, [pc, #168]	; (f14 <OtaUpdater::tick()+0x2f0>)
     e6a:	492b      	ldr	r1, [pc, #172]	; (f18 <OtaUpdater::tick()+0x2f4>)
     e6c:	681a      	ldr	r2, [r3, #0]
     e6e:	428a      	cmp	r2, r1
     e70:	f47f af19 	bne.w	ca6 <OtaUpdater::tick()+0x82>
     e74:	889b      	ldrh	r3, [r3, #4]
     e76:	2b58      	cmp	r3, #88	; 0x58
     e78:	f47f af15 	bne.w	ca6 <OtaUpdater::tick()+0x82>
  if (!ota.handshakeReady || ota.inProgress) { sendLine("HEX IDLE"); return; }
     e7c:	4b27      	ldr	r3, [pc, #156]	; (f1c <OtaUpdater::tick()+0x2f8>)
     e7e:	781a      	ldrb	r2, [r3, #0]
     e80:	2a00      	cmp	r2, #0
     e82:	d062      	beq.n	f4a <OtaUpdater::tick()+0x326>
     e84:	f893 a001 	ldrb.w	sl, [r3, #1]
     e88:	f1ba 0f00 	cmp.w	sl, #0
     e8c:	d15d      	bne.n	f4a <OtaUpdater::tick()+0x326>
  if (firmware_buffer_init(&addr, &size) == 0) {
     e8e:	a905      	add	r1, sp, #20
     e90:	a804      	add	r0, sp, #16
  uint32_t addr = 0, size = 0;
     e92:	e9cd aa04 	strd	sl, sl, [sp, #16]
  if (firmware_buffer_init(&addr, &size) == 0) {
     e96:	f7ff fa51 	bl	33c <firmware_buffer_init>
     e9a:	4b20      	ldr	r3, [pc, #128]	; (f1c <OtaUpdater::tick()+0x2f8>)
     e9c:	2800      	cmp	r0, #0
     e9e:	f000 80b7 	beq.w	1010 <OtaUpdater::tick()+0x3ec>
  ota.bufferAddr = addr;
     ea2:	9a04      	ldr	r2, [sp, #16]
  hex_info_reset(&ota.hex, ota.hexData);
     ea4:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
     ea8:	f103 0078 	add.w	r0, r3, #120	; 0x78
  ota.lastError[0] = 0;
     eac:	f883 a018 	strb.w	sl, [r3, #24]
  ota.bufferAddr = addr;
     eb0:	605a      	str	r2, [r3, #4]
  ota.bufferSize = size;
     eb2:	9a05      	ldr	r2, [sp, #20]
  ota.fatal      = false;
     eb4:	f883 a002 	strb.w	sl, [r3, #2]
  ota.bufferSize = size;
     eb8:	609a      	str	r2, [r3, #8]
  ota.inProgress = true;
     eba:	2201      	movs	r2, #1
  ota.badLines   = 0;
     ebc:	f8c3 a014 	str.w	sl, [r3, #20]
  ota.inProgress = true;
     ec0:	705a      	strb	r2, [r3, #1]
  ota.okLines    = 0;
     ec2:	e9c3 aa03 	strd	sl, sl, [r3, #12]
  hex_info_reset(&ota.hex, ota.hexData);
     ec6:	f7ff f983 	bl	1d0 <hex_info_reset(hex_info_t*, char*)>
  _ota->print(s);
     eca:	6820      	ldr	r0, [r4, #0]
     ecc:	2209      	movs	r2, #9
     ece:	4914      	ldr	r1, [pc, #80]	; (f20 <OtaUpdater::tick()+0x2fc>)
     ed0:	e6f6      	b.n	cc0 <OtaUpdater::tick()+0x9c>
     ed2:	bf00      	nop
     ed4:	20007c24 	.word	0x20007c24
     ed8:	4c4c4548 	.word	0x4c4c4548
     edc:	49474542 	.word	0x49474542
     ee0:	20008e08 	.word	0x20008e08
     ee4:	20008e0c 	.word	0x20008e0c
     ee8:	200004cc 	.word	0x200004cc
     eec:	20007918 	.word	0x20007918
     ef0:	20000468 	.word	0x20000468
     ef4:	20000478 	.word	0x20000478
     ef8:	20000480 	.word	0x20000480
     efc:	05fa0004 	.word	0x05fa0004
     f00:	20008d20 	.word	0x20008d20
     f04:	20000418 	.word	0x20000418
     f08:	20008e11 	.word	0x20008e11
     f0c:	200003d8 	.word	0x200003d8
     f10:	20000438 	.word	0x20000438
     f14:	20008e10 	.word	0x20008e10
     f18:	4548204e 	.word	0x4548204e
     f1c:	20008c80 	.word	0x20008c80
     f20:	20000458 	.word	0x20000458
     f24:	00444e45 	.word	0x00444e45
     f28:	474e4950 	.word	0x474e4950
     f2c:	53524556 	.word	0x53524556
    else { ota.handshakeReady = false; sendLine("NACK"); }
     f30:	2300      	movs	r3, #0
  _ota->print(s);
     f32:	6820      	ldr	r0, [r4, #0]
     f34:	2204      	movs	r2, #4
     f36:	495f      	ldr	r1, [pc, #380]	; (10b4 <OtaUpdater::tick()+0x490>)
    else { ota.handshakeReady = false; sendLine("NACK"); }
     f38:	f88a 3000 	strb.w	r3, [sl]
     f3c:	6803      	ldr	r3, [r0, #0]
     f3e:	685b      	ldr	r3, [r3, #4]
     f40:	e6c0      	b.n	cc4 <OtaUpdater::tick()+0xa0>
  _ota->print(s);
     f42:	6820      	ldr	r0, [r4, #0]
     f44:	2204      	movs	r2, #4
     f46:	495b      	ldr	r1, [pc, #364]	; (10b4 <OtaUpdater::tick()+0x490>)
     f48:	e6ba      	b.n	cc0 <OtaUpdater::tick()+0x9c>
     f4a:	6820      	ldr	r0, [r4, #0]
     f4c:	2208      	movs	r2, #8
     f4e:	495a      	ldr	r1, [pc, #360]	; (10b8 <OtaUpdater::tick()+0x494>)
     f50:	e6b6      	b.n	cc0 <OtaUpdater::tick()+0x9c>
     f52:	6820      	ldr	r0, [r4, #0]
     f54:	2204      	movs	r2, #4
     f56:	4959      	ldr	r1, [pc, #356]	; (10bc <OtaUpdater::tick()+0x498>)
     f58:	e6b2      	b.n	cc0 <OtaUpdater::tick()+0x9c>
  if (!strcmp(line, "PING"))      { sendLine("PONG"); return; }
     f5a:	7903      	ldrb	r3, [r0, #4]
     f5c:	2b00      	cmp	r3, #0
     f5e:	f47f aea8 	bne.w	cb2 <OtaUpdater::tick()+0x8e>
  _ota->print(s);
     f62:	6820      	ldr	r0, [r4, #0]
     f64:	2204      	movs	r2, #4
     f66:	4956      	ldr	r1, [pc, #344]	; (10c0 <OtaUpdater::tick()+0x49c>)
     f68:	e6aa      	b.n	cc0 <OtaUpdater::tick()+0x9c>
  if (!strcmp(line, "VERSION")) {
     f6a:	6842      	ldr	r2, [r0, #4]
     f6c:	4b55      	ldr	r3, [pc, #340]	; (10c4 <OtaUpdater::tick()+0x4a0>)
     f6e:	429a      	cmp	r2, r3
     f70:	f47f aea3 	bne.w	cba <OtaUpdater::tick()+0x96>
    _ota->print("FW ");
     f74:	6820      	ldr	r0, [r4, #0]
     f76:	2203      	movs	r2, #3
     f78:	4953      	ldr	r1, [pc, #332]	; (10c8 <OtaUpdater::tick()+0x4a4>)
     f7a:	6803      	ldr	r3, [r0, #0]
     f7c:	685b      	ldr	r3, [r3, #4]
     f7e:	4798      	blx	r3
    _ota->print(_appVersion);
     f80:	4b52      	ldr	r3, [pc, #328]	; (10cc <OtaUpdater::tick()+0x4a8>)
     f82:	f8d4 a000 	ldr.w	sl, [r4]
     f86:	6819      	ldr	r1, [r3, #0]
	size_t write(const char *str)			{ if (str == nullptr) return 0;
     f88:	b161      	cbz	r1, fa4 <OtaUpdater::tick()+0x380>
							  return write((const uint8_t *)str, strlen(str)); }
     f8a:	4608      	mov	r0, r1
     f8c:	9102      	str	r1, [sp, #8]
     f8e:	f005 fbb7 	bl	6700 <strlen>
     f92:	f8da 3000 	ldr.w	r3, [sl]
     f96:	4602      	mov	r2, r0
     f98:	9902      	ldr	r1, [sp, #8]
     f9a:	4650      	mov	r0, sl
     f9c:	685b      	ldr	r3, [r3, #4]
     f9e:	4798      	blx	r3
    _ota->print("\r\n");
     fa0:	f8d4 a000 	ldr.w	sl, [r4]
     fa4:	f8da 3000 	ldr.w	r3, [sl]
     fa8:	2202      	movs	r2, #2
     faa:	4949      	ldr	r1, [pc, #292]	; (10d0 <OtaUpdater::tick()+0x4ac>)
     fac:	4650      	mov	r0, sl
     fae:	685b      	ldr	r3, [r3, #4]
     fb0:	4798      	blx	r3
    _ota->print("FLASHERX ");
     fb2:	6820      	ldr	r0, [r4, #0]
     fb4:	2209      	movs	r2, #9
     fb6:	4947      	ldr	r1, [pc, #284]	; (10d4 <OtaUpdater::tick()+0x4b0>)
     fb8:	6803      	ldr	r3, [r0, #0]
     fba:	685b      	ldr	r3, [r3, #4]
     fbc:	4798      	blx	r3
    _ota->print(LOADER_ID);
     fbe:	6820      	ldr	r0, [r4, #0]
     fc0:	2216      	movs	r2, #22
     fc2:	4945      	ldr	r1, [pc, #276]	; (10d8 <OtaUpdater::tick()+0x4b4>)
     fc4:	e67c      	b.n	cc0 <OtaUpdater::tick()+0x9c>
  } else {
    _ota->print("HEX ERR lines="); _ota->print(ota.hex.lines);
     fc6:	6820      	ldr	r0, [r4, #0]
     fc8:	220e      	movs	r2, #14
     fca:	4944      	ldr	r1, [pc, #272]	; (10dc <OtaUpdater::tick()+0x4b8>)
     fcc:	6803      	ldr	r3, [r0, #0]
     fce:	685b      	ldr	r3, [r3, #4]
     fd0:	4798      	blx	r3
	size_t print(int n)				{ return print((long)n); }
     fd2:	f8da 1098 	ldr.w	r1, [sl, #152]	; 0x98
     fd6:	6820      	ldr	r0, [r4, #0]
     fd8:	f000 fc70 	bl	18bc <Print::print(long)>
    _ota->print(" bad=");          _ota->print(ota.badLines);
     fdc:	6820      	ldr	r0, [r4, #0]
							  return write((const uint8_t *)str, strlen(str)); }
     fde:	2205      	movs	r2, #5
     fe0:	493f      	ldr	r1, [pc, #252]	; (10e0 <OtaUpdater::tick()+0x4bc>)
     fe2:	6803      	ldr	r3, [r0, #0]
     fe4:	685b      	ldr	r3, [r3, #4]
     fe6:	4798      	blx	r3
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     fe8:	f8da 1014 	ldr.w	r1, [sl, #20]
     fec:	2300      	movs	r3, #0
     fee:	220a      	movs	r2, #10
     ff0:	6820      	ldr	r0, [r4, #0]
     ff2:	f000 fc99 	bl	1928 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    _ota->print("\r\n");
     ff6:	6820      	ldr	r0, [r4, #0]
							  return write((const uint8_t *)str, strlen(str)); }
     ff8:	4935      	ldr	r1, [pc, #212]	; (10d0 <OtaUpdater::tick()+0x4ac>)
     ffa:	2202      	movs	r2, #2
     ffc:	6803      	ldr	r3, [r0, #0]
     ffe:	685b      	ldr	r3, [r3, #4]
    1000:	4798      	blx	r3
    firmware_buffer_free(ota.bufferAddr, ota.bufferSize);
    1002:	e9da 0101 	ldrd	r0, r1, [sl, #4]
    1006:	f7ff f9c9 	bl	39c <firmware_buffer_free>
    100a:	e6ca      	b.n	da2 <OtaUpdater::tick()+0x17e>
  uint32_t payload = 0;
    100c:	9202      	str	r2, [sp, #8]
    100e:	e677      	b.n	d00 <OtaUpdater::tick()+0xdc>
  _ota->print(s);
    1010:	6820      	ldr	r0, [r4, #0]
    1012:	2208      	movs	r2, #8
    1014:	4933      	ldr	r1, [pc, #204]	; (10e4 <OtaUpdater::tick()+0x4c0>)
    1016:	e653      	b.n	cc0 <OtaUpdater::tick()+0x9c>
  if (ok && (parse_hex_line(rec, ota.hex.data, &ota.hex.addr, &ota.hex.num, &ota.hex.code) == 0)) {
    1018:	f10a 0380 	add.w	r3, sl, #128	; 0x80
    101c:	3002      	adds	r0, #2
    101e:	f10a 027c 	add.w	r2, sl, #124	; 0x7c
    1022:	9300      	str	r3, [sp, #0]
    1024:	f10a 0384 	add.w	r3, sl, #132	; 0x84
    1028:	f8da 1078 	ldr.w	r1, [sl, #120]	; 0x78
    102c:	f7ff f8de 	bl	1ec <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)>
    1030:	2800      	cmp	r0, #0
    1032:	f43f aee0 	beq.w	df6 <OtaUpdater::tick()+0x1d2>
  if (ok && (process_hex_record(&ota.hex) != 0)) {
    1036:	482c      	ldr	r0, [pc, #176]	; (10e8 <OtaUpdater::tick()+0x4c4>)
    1038:	f7ff f946 	bl	2c8 <process_hex_record(hex_info_t*)>
    103c:	2800      	cmp	r0, #0
    103e:	f47f aeda 	bne.w	df6 <OtaUpdater::tick()+0x1d2>
  if (ok && ota.hex.code == 0) {
    1042:	f8da 3080 	ldr.w	r3, [sl, #128]	; 0x80
    1046:	bb23      	cbnz	r3, 1092 <OtaUpdater::tick()+0x46e>
    if (ota.hex.max > (FLASH_BASE_ADDR + ota.bufferSize)) {
    1048:	f8da 3008 	ldr.w	r3, [sl, #8]
    104c:	f8da 2090 	ldr.w	r2, [sl, #144]	; 0x90
    1050:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
    1054:	429a      	cmp	r2, r3
    1056:	f63f aece 	bhi.w	df6 <OtaUpdater::tick()+0x1d2>
      uint32_t addr = ota.bufferAddr + ota.hex.base + ota.hex.addr - FLASH_BASE_ADDR;
    105a:	f8da 2004 	ldr.w	r2, [sl, #4]
    105e:	f8da 3088 	ldr.w	r3, [sl, #136]	; 0x88
        memcpy((void*)addr, (void*)ota.hex.data, ota.hex.num);
    1062:	f8da 1078 	ldr.w	r1, [sl, #120]	; 0x78
      uint32_t addr = ota.bufferAddr + ota.hex.base + ota.hex.addr - FLASH_BASE_ADDR;
    1066:	18d0      	adds	r0, r2, r3
      if (!IN_FLASH(ota.bufferAddr)) {
    1068:	f102 4220 	add.w	r2, r2, #2684354560	; 0xa0000000
      uint32_t addr = ota.bufferAddr + ota.hex.base + ota.hex.addr - FLASH_BASE_ADDR;
    106c:	f8da 307c 	ldr.w	r3, [sl, #124]	; 0x7c
    1070:	f100 4020 	add.w	r0, r0, #2684354560	; 0xa0000000
      if (!IN_FLASH(ota.bufferAddr)) {
    1074:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
        memcpy((void*)addr, (void*)ota.hex.data, ota.hex.num);
    1078:	f8da 2084 	ldr.w	r2, [sl, #132]	; 0x84
      uint32_t addr = ota.bufferAddr + ota.hex.base + ota.hex.addr - FLASH_BASE_ADDR;
    107c:	4418      	add	r0, r3
      if (!IN_FLASH(ota.bufferAddr)) {
    107e:	d313      	bcc.n	10a8 <OtaUpdater::tick()+0x484>
        memcpy((void*)addr, (void*)ota.hex.data, ota.hex.num);
    1080:	f001 f942 	bl	2308 <memcpy>
      if (ok) ota.bytes += ota.hex.num;
    1084:	f8da 300c 	ldr.w	r3, [sl, #12]
    1088:	f8da 2084 	ldr.w	r2, [sl, #132]	; 0x84
    108c:	4413      	add	r3, r2
    108e:	f8ca 300c 	str.w	r3, [sl, #12]
    ota.okLines++;
    1092:	f8da 3010 	ldr.w	r3, [sl, #16]
    1096:	2203      	movs	r2, #3
    _ota->print("OK ");  _ota->print(lineNo);  _ota->print("\r\n");
    1098:	6820      	ldr	r0, [r4, #0]
    ota.okLines++;
    109a:	3301      	adds	r3, #1
    109c:	4913      	ldr	r1, [pc, #76]	; (10ec <OtaUpdater::tick()+0x4c8>)
    109e:	f8ca 3010 	str.w	r3, [sl, #16]
    10a2:	6803      	ldr	r3, [r0, #0]
    10a4:	685b      	ldr	r3, [r3, #4]
    10a6:	e6b3      	b.n	e10 <OtaUpdater::tick()+0x1ec>
        int e = flash_write_block(addr, ota.hex.data, ota.hex.num);
    10a8:	f7ff f9b0 	bl	40c <flash_write_block>
        if (e) ok = false;
    10ac:	2800      	cmp	r0, #0
    10ae:	f47f aea2 	bne.w	df6 <OtaUpdater::tick()+0x1d2>
    10b2:	e7e7      	b.n	1084 <OtaUpdater::tick()+0x460>
    10b4:	20000430 	.word	0x20000430
    10b8:	20000408 	.word	0x20000408
    10bc:	20000428 	.word	0x20000428
    10c0:	200004ac 	.word	0x200004ac
    10c4:	004e4f49 	.word	0x004e4f49
    10c8:	200004bc 	.word	0x200004bc
    10cc:	20007bc0 	.word	0x20007bc0
    10d0:	20007918 	.word	0x20007918
    10d4:	200004c0 	.word	0x200004c0
    10d8:	200004d0 	.word	0x200004d0
    10dc:	2000048c 	.word	0x2000048c
    10e0:	2000049c 	.word	0x2000049c
    10e4:	2000044c 	.word	0x2000044c
    10e8:	20008cf8 	.word	0x20008cf8
    10ec:	20000414 	.word	0x20000414

000010f0 <HardwareSerialIMXRT::operator bool()>:
	virtual void begin(uint32_t baud, uint32_t format) {
					  serial_begin(BAUD2DIV(baud));
					  serial_format(format); }
	*/

	operator bool()			{ return true; }
    10f0:	2001      	movs	r0, #1
    10f2:	4770      	bx	lr

000010f4 <HardwareSerialIMXRT::availableForWrite()>:

int HardwareSerialIMXRT::availableForWrite(void)
{
	uint32_t head, tail;

	head = tx_buffer_head_;
    10f4:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
	tail = tx_buffer_tail_;
    10f8:	f8b0 2048 	ldrh.w	r2, [r0, #72]	; 0x48
	head = tx_buffer_head_;
    10fc:	b29b      	uxth	r3, r3
	tail = tx_buffer_tail_;
    10fe:	b292      	uxth	r2, r2
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    1100:	4293      	cmp	r3, r2
    1102:	d202      	bcs.n	110a <HardwareSerialIMXRT::availableForWrite()+0x16>
	return tail - head - 1;
    1104:	3a01      	subs	r2, #1
    1106:	1ad0      	subs	r0, r2, r3
}
    1108:	4770      	bx	lr
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    110a:	6b41      	ldr	r1, [r0, #52]	; 0x34
    110c:	3901      	subs	r1, #1
    110e:	440a      	add	r2, r1
    1110:	1ad0      	subs	r0, r2, r3
    1112:	4770      	bx	lr

00001114 <HardwareSerialIMXRT::available()>:



int HardwareSerialIMXRT::available(void)
{
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    1114:	6901      	ldr	r1, [r0, #16]
	uint32_t head, tail;

	// WATER> 0 so IDLE involved may want to check if port has already has RX data to retrieve
	__disable_irq();
    1116:	b672      	cpsid	i
	head = rx_buffer_head_;
    1118:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
	tail = rx_buffer_tail_;
    111c:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
	head = rx_buffer_head_;
    1120:	b292      	uxth	r2, r2
	tail = rx_buffer_tail_;
    1122:	b29b      	uxth	r3, r3
	int avail;
	if (head >= tail) avail = head - tail;
    1124:	429a      	cmp	r2, r3
	else avail = rx_buffer_total_size_ + head - tail;	
    1126:	bf3c      	itt	cc
    1128:	6b80      	ldrcc	r0, [r0, #56]	; 0x38
    112a:	1812      	addcc	r2, r2, r0
	avail += (port->WATER >> 24) & 0x7;
    112c:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
	else avail = rx_buffer_total_size_ + head - tail;	
    112e:	1ad3      	subs	r3, r2, r3
	__enable_irq();
    1130:	b662      	cpsie	i
	avail += (port->WATER >> 24) & 0x7;
    1132:	f3c0 6002 	ubfx	r0, r0, #24, #3
	return avail;
}
    1136:	4418      	add	r0, r3
    1138:	4770      	bx	lr
    113a:	bf00      	nop

0000113c <HardwareSerialIMXRT::peek()>:
int HardwareSerialIMXRT::peek(void)
{
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
	uint32_t head, tail;

	head = rx_buffer_head_;
    113c:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
{
    1140:	4602      	mov	r2, r0
	tail = rx_buffer_tail_;
    1142:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
	head = rx_buffer_head_;
    1146:	b289      	uxth	r1, r1
	tail = rx_buffer_tail_;
    1148:	b29b      	uxth	r3, r3
	if (head == tail) {
    114a:	4299      	cmp	r1, r3
{
    114c:	b410      	push	{r4}
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    114e:	6904      	ldr	r4, [r0, #16]
	if (head == tail) {
    1150:	d014      	beq.n	117c <HardwareSerialIMXRT::peek()+0x40>
			return c;
		}
		__enable_irq();

	} 
	if (++tail >= rx_buffer_total_size_) tail = 0;
    1152:	3301      	adds	r3, #1
    1154:	6b90      	ldr	r0, [r2, #56]	; 0x38
	if (tail < rx_buffer_size_) {
    1156:	6b11      	ldr	r1, [r2, #48]	; 0x30
	if (++tail >= rx_buffer_total_size_) tail = 0;
    1158:	4298      	cmp	r0, r3
    115a:	bf98      	it	ls
    115c:	2300      	movls	r3, #0
	if (tail < rx_buffer_size_) {
    115e:	4299      	cmp	r1, r3
    1160:	d806      	bhi.n	1170 <HardwareSerialIMXRT::peek()+0x34>
		return rx_buffer_[tail];
	} else {
		return rx_buffer_storage_[tail-rx_buffer_size_];
    1162:	1a5b      	subs	r3, r3, r1
    1164:	6a52      	ldr	r2, [r2, #36]	; 0x24
    1166:	5cd0      	ldrb	r0, [r2, r3]
    1168:	b2c0      	uxtb	r0, r0
	}
}
    116a:	f85d 4b04 	ldr.w	r4, [sp], #4
    116e:	4770      	bx	lr
		return rx_buffer_[tail];
    1170:	6a12      	ldr	r2, [r2, #32]
}
    1172:	f85d 4b04 	ldr.w	r4, [sp], #4
		return rx_buffer_[tail];
    1176:	5cd0      	ldrb	r0, [r2, r3]
    1178:	b2c0      	uxtb	r0, r0
}
    117a:	4770      	bx	lr
		__disable_irq();
    117c:	b672      	cpsid	i
		head = rx_buffer_head_;  // reread head to make sure no ISR happened
    117e:	f8b0 004a 	ldrh.w	r0, [r0, #74]	; 0x4a
    1182:	b280      	uxth	r0, r0
		if (head == tail) {
    1184:	4281      	cmp	r1, r0
    1186:	d001      	beq.n	118c <HardwareSerialIMXRT::peek()+0x50>
		__enable_irq();
    1188:	b662      	cpsie	i
    118a:	e7e2      	b.n	1152 <HardwareSerialIMXRT::peek()+0x16>
			if (port->WATER & 0x7000000) {
    118c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    118e:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
    1192:	d103      	bne.n	119c <HardwareSerialIMXRT::peek()+0x60>
			int c = -1;	// assume nothing to return
    1194:	f04f 30ff 	mov.w	r0, #4294967295
			__enable_irq();
    1198:	b662      	cpsie	i
			return c;
    119a:	e7e6      	b.n	116a <HardwareSerialIMXRT::peek()+0x2e>
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    119c:	69e3      	ldr	r3, [r4, #28]
				rx_buffer_head_ = 1;
    119e:	2001      	movs	r0, #1
				rx_buffer_tail_ = 0; 
    11a0:	2400      	movs	r4, #0
				rx_buffer_[1] = c;
    11a2:	6a11      	ldr	r1, [r2, #32]
				rx_buffer_head_ = 1;
    11a4:	f8a2 004a 	strh.w	r0, [r2, #74]	; 0x4a
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    11a8:	f3c3 0009 	ubfx	r0, r3, #0, #10
				rx_buffer_[1] = c;
    11ac:	b2db      	uxtb	r3, r3
				rx_buffer_tail_ = 0; 
    11ae:	f8a2 404c 	strh.w	r4, [r2, #76]	; 0x4c
				rx_buffer_[1] = c;
    11b2:	704b      	strb	r3, [r1, #1]
    11b4:	e7f0      	b.n	1198 <HardwareSerialIMXRT::peek()+0x5c>
    11b6:	bf00      	nop

000011b8 <HardwareSerialIMXRT::read()>:
{
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
	uint32_t head, tail;
	int c;

	head = rx_buffer_head_;
    11b8:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
{
    11bc:	4602      	mov	r2, r0
	tail = rx_buffer_tail_;
    11be:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
	head = rx_buffer_head_;
    11c2:	b289      	uxth	r1, r1
	tail = rx_buffer_tail_;
    11c4:	b29b      	uxth	r3, r3
	if (head == tail) {
    11c6:	4299      	cmp	r1, r3
{
    11c8:	b430      	push	{r4, r5}
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    11ca:	6904      	ldr	r4, [r0, #16]
	if (head == tail) {
    11cc:	d025      	beq.n	121a <HardwareSerialIMXRT::read()+0x62>
			return c;
		}
		__enable_irq();

	}
	if (++tail >= rx_buffer_total_size_) tail = 0;
    11ce:	3301      	adds	r3, #1
    11d0:	6b94      	ldr	r4, [r2, #56]	; 0x38
    11d2:	429c      	cmp	r4, r3
    11d4:	d916      	bls.n	1204 <HardwareSerialIMXRT::read()+0x4c>
	if (tail < rx_buffer_size_) {
    11d6:	6b10      	ldr	r0, [r2, #48]	; 0x30
		c = rx_buffer_[tail];
	} else {
		c = rx_buffer_storage_[tail-rx_buffer_size_];
	}
	rx_buffer_tail_ = tail;
    11d8:	fa1f fc83 	uxth.w	ip, r3
	if (tail < rx_buffer_size_) {
    11dc:	4298      	cmp	r0, r3
    11de:	d917      	bls.n	1210 <HardwareSerialIMXRT::read()+0x58>
		c = rx_buffer_[tail];
    11e0:	6a10      	ldr	r0, [r2, #32]
    11e2:	5cc0      	ldrb	r0, [r0, r3]
    11e4:	b2c0      	uxtb	r0, r0
	if (rts_pin_baseReg_) {
    11e6:	6d95      	ldr	r5, [r2, #88]	; 0x58
	rx_buffer_tail_ = tail;
    11e8:	f8a2 c04c 	strh.w	ip, [r2, #76]	; 0x4c
	if (rts_pin_baseReg_) {
    11ec:	b145      	cbz	r5, 1200 <HardwareSerialIMXRT::read()+0x48>
		uint32_t avail;
		if (head >= tail) avail = head - tail;
    11ee:	4299      	cmp	r1, r3
    11f0:	d31c      	bcc.n	122c <HardwareSerialIMXRT::read()+0x74>
    11f2:	1acb      	subs	r3, r1, r3
		else avail = rx_buffer_total_size_ + head - tail;

		if (avail <= rts_low_watermark_) rts_assert();
    11f4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
    11f6:	4299      	cmp	r1, r3
    11f8:	d302      	bcc.n	1200 <HardwareSerialIMXRT::read()+0x48>
	DIRECT_WRITE_LOW(rts_pin_baseReg_, rts_pin_bitmask_);
    11fa:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
    11fc:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
	}
	return c;
}	
    1200:	bc30      	pop	{r4, r5}
    1202:	4770      	bx	lr
    1204:	f04f 0c00 	mov.w	ip, #0
	if (tail < rx_buffer_size_) {
    1208:	6b10      	ldr	r0, [r2, #48]	; 0x30
	if (++tail >= rx_buffer_total_size_) tail = 0;
    120a:	4663      	mov	r3, ip
	if (tail < rx_buffer_size_) {
    120c:	4298      	cmp	r0, r3
    120e:	d8e7      	bhi.n	11e0 <HardwareSerialIMXRT::read()+0x28>
		c = rx_buffer_storage_[tail-rx_buffer_size_];
    1210:	1a18      	subs	r0, r3, r0
    1212:	6a55      	ldr	r5, [r2, #36]	; 0x24
    1214:	5c28      	ldrb	r0, [r5, r0]
    1216:	b2c0      	uxtb	r0, r0
    1218:	e7e5      	b.n	11e6 <HardwareSerialIMXRT::read()+0x2e>
    121a:	4608      	mov	r0, r1
		__disable_irq();
    121c:	b672      	cpsid	i
		head = rx_buffer_head_;  // reread head to make sure no ISR happened
    121e:	f8b2 104a 	ldrh.w	r1, [r2, #74]	; 0x4a
    1222:	b289      	uxth	r1, r1
		if (head == tail) {
    1224:	4288      	cmp	r0, r1
    1226:	d004      	beq.n	1232 <HardwareSerialIMXRT::read()+0x7a>
		__enable_irq();
    1228:	b662      	cpsie	i
    122a:	e7d0      	b.n	11ce <HardwareSerialIMXRT::read()+0x16>
		else avail = rx_buffer_total_size_ + head - tail;
    122c:	440c      	add	r4, r1
    122e:	1ae3      	subs	r3, r4, r3
    1230:	e7e0      	b.n	11f4 <HardwareSerialIMXRT::read()+0x3c>
			if (port->WATER & 0x7000000) {
    1232:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1234:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
    1238:	d103      	bne.n	1242 <HardwareSerialIMXRT::read()+0x8a>
			c = -1;	// assume nothing to return
    123a:	f04f 30ff 	mov.w	r0, #4294967295
			__enable_irq();
    123e:	b662      	cpsie	i
			return c;
    1240:	e7de      	b.n	1200 <HardwareSerialIMXRT::read()+0x48>
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    1242:	69e0      	ldr	r0, [r4, #28]
    1244:	f3c0 0009 	ubfx	r0, r0, #0, #10
    1248:	e7f9      	b.n	123e <HardwareSerialIMXRT::read()+0x86>
    124a:	bf00      	nop

0000124c <HardwareSerialIMXRT::flush()>:

void HardwareSerialIMXRT::flush(void)
{
	while (transmitting_) yield(); // wait
    124c:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
    1250:	b143      	cbz	r3, 1264 <HardwareSerialIMXRT::flush()+0x18>
{
    1252:	b510      	push	{r4, lr}
    1254:	4604      	mov	r4, r0
	while (transmitting_) yield(); // wait
    1256:	f002 fb5d 	bl	3914 <yield>
    125a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    125e:	2b00      	cmp	r3, #0
    1260:	d1f9      	bne.n	1256 <HardwareSerialIMXRT::flush()+0xa>
}
    1262:	bd10      	pop	{r4, pc}
    1264:	4770      	bx	lr
    1266:	bf00      	nop

00001268 <HardwareSerialIMXRT::end()>:
{
    1268:	b538      	push	{r3, r4, r5, lr}
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    126a:	e9d0 5304 	ldrd	r5, r3, [r0, #16]
	if (!(hardware->ccm_register & hardware->ccm_value)) return;
    126e:	e9d3 1203 	ldrd	r1, r2, [r3, #12]
    1272:	6809      	ldr	r1, [r1, #0]
    1274:	4211      	tst	r1, r2
    1276:	d028      	beq.n	12ca <HardwareSerialIMXRT::end()+0x62>
	while (transmitting_) yield();  // wait for buffered data to send
    1278:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
    127c:	4604      	mov	r4, r0
    127e:	b132      	cbz	r2, 128e <HardwareSerialIMXRT::end()+0x26>
    1280:	f002 fb48 	bl	3914 <yield>
    1284:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    1288:	2b00      	cmp	r3, #0
    128a:	d1f9      	bne.n	1280 <HardwareSerialIMXRT::end()+0x18>
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = 5;
    128c:	6963      	ldr	r3, [r4, #20]
	port->CTRL = 0;	// disable the TX and RX ...
    128e:	2100      	movs	r1, #0
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = 5;
    1290:	4a0e      	ldr	r2, [pc, #56]	; (12cc <HardwareSerialIMXRT::end()+0x64>)
	port->CTRL = 0;	// disable the TX and RX ...
    1292:	61a9      	str	r1, [r5, #24]
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = 5;
    1294:	7e20      	ldrb	r0, [r4, #24]
    1296:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    129a:	7d00      	ldrb	r0, [r0, #20]
    129c:	eb02 1000 	add.w	r0, r2, r0, lsl #4
    12a0:	6845      	ldr	r5, [r0, #4]
    12a2:	2005      	movs	r0, #5
    12a4:	6028      	str	r0, [r5, #0]
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = 5;
    12a6:	7e65      	ldrb	r5, [r4, #25]
    12a8:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    12ac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
    12b0:	eb02 1203 	add.w	r2, r2, r3, lsl #4
	if (rts_pin_baseReg_) rts_deassert();
    12b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = 5;
    12b6:	6852      	ldr	r2, [r2, #4]
    12b8:	6010      	str	r0, [r2, #0]
	rx_buffer_head_ = 0;
    12ba:	f8a4 104a 	strh.w	r1, [r4, #74]	; 0x4a
	rx_buffer_tail_ = 0;
    12be:	f8a4 104c 	strh.w	r1, [r4, #76]	; 0x4c
	if (rts_pin_baseReg_) rts_deassert();
    12c2:	b113      	cbz	r3, 12ca <HardwareSerialIMXRT::end()+0x62>
	DIRECT_WRITE_HIGH(rts_pin_baseReg_, rts_pin_bitmask_);
    12c4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    12c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    12ca:	bd38      	pop	{r3, r4, r5, pc}
    12cc:	20007380 	.word	0x20007380

000012d0 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)>:
	float base = (float)UART_CLOCK / (float)baud;
    12d0:	ee07 1a90 	vmov	s15, r1
    12d4:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 1540 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x270>
	for (int osr=4; osr <= 32; osr++) {
    12d8:	2104      	movs	r1, #4
		int divint = (int)(div + 0.5f);
    12da:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
	float base = (float)UART_CLOCK / (float)baud;
    12de:	eef8 7a67 	vcvt.f32.u32	s15, s15
	float besterr = 1e20;
    12e2:	ed9f 6a98 	vldr	s12, [pc, #608]	; 1544 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x274>
    12e6:	f641 7cff 	movw	ip, #8191	; 0x1fff
	float base = (float)UART_CLOCK / (float)baud;
    12ea:	eec7 5a27 	vdiv.f32	s11, s14, s15
{
    12ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int bestosr = 4;
    12f2:	468e      	mov	lr, r1
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    12f4:	6905      	ldr	r5, [r0, #16]
	int bestdiv = 1;
    12f6:	2401      	movs	r4, #1
		float div = base / (float)osr;
    12f8:	ee07 1a90 	vmov	s15, r1
    12fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    1300:	ee85 7aa7 	vdiv.f32	s14, s11, s15
		int divint = (int)(div + 0.5f);
    1304:	ee77 7a05 	vadd.f32	s15, s14, s10
    1308:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    130c:	ee17 3a90 	vmov	r3, s15
    1310:	4563      	cmp	r3, ip
    1312:	bfa8      	it	ge
    1314:	4663      	movge	r3, ip
    1316:	2b01      	cmp	r3, #1
    1318:	bfb8      	it	lt
    131a:	2301      	movlt	r3, #1
		float err = ((float)divint - div) / div;
    131c:	ee07 3a90 	vmov	s15, r3
    1320:	eef8 6ae7 	vcvt.f32.s32	s13, s15
    1324:	ee76 6ac7 	vsub.f32	s13, s13, s14
    1328:	eec6 7a87 	vdiv.f32	s15, s13, s14
		if (err < 0.0f) err = -err;
    132c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    1330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1334:	bf48      	it	mi
    1336:	eef1 7a67 	vnegmi.f32	s15, s15
		if (err <= besterr) {
    133a:	eef4 7ac6 	vcmpe.f32	s15, s12
    133e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1342:	d803      	bhi.n	134c <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x7c>
			besterr = err;
    1344:	eeb0 6a67 	vmov.f32	s12, s15
		if (err <= besterr) {
    1348:	468e      	mov	lr, r1
			bestdiv = divint;
    134a:	461c      	mov	r4, r3
	for (int osr=4; osr <= 32; osr++) {
    134c:	3101      	adds	r1, #1
    134e:	2921      	cmp	r1, #33	; 0x21
    1350:	d1d2      	bne.n	12f8 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x28>
	rx_buffer_head_ = 0;
    1352:	2100      	movs	r1, #0
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    1354:	6943      	ldr	r3, [r0, #20]
    1356:	f402 7600 	and.w	r6, r2, #512	; 0x200
	rx_buffer_head_ = 0;
    135a:	f8a0 104a 	strh.w	r1, [r0, #74]	; 0x4a
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
    135e:	f8b3 c05a 	ldrh.w	ip, [r3, #90]	; 0x5a
	half_duplex_mode_ = (format & SERIAL_HALF_DUPLEX) != 0;
    1362:	428e      	cmp	r6, r1
	rx_buffer_tail_ = 0;
    1364:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    1368:	f8b3 6058 	ldrh.w	r6, [r3, #88]	; 0x58
	tx_buffer_head_ = 0;
    136c:	f8a0 1046 	strh.w	r1, [r0, #70]	; 0x46
	tx_buffer_tail_ = 0;
    1370:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
	transmitting_ = 0;
    1374:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    1378:	6b81      	ldr	r1, [r0, #56]	; 0x38
	hardware->ccm_register |= hardware->ccm_value;
    137a:	68df      	ldr	r7, [r3, #12]
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    137c:	eba1 0606 	sub.w	r6, r1, r6
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
    1380:	eba1 010c 	sub.w	r1, r1, ip
    1384:	e9c0 610f 	strd	r6, r1, [r0, #60]	; 0x3c
	hardware->ccm_register |= hardware->ccm_value;
    1388:	6839      	ldr	r1, [r7, #0]
    138a:	691e      	ldr	r6, [r3, #16]
    138c:	ea41 0106 	orr.w	r1, r1, r6
    1390:	6039      	str	r1, [r7, #0]
	half_duplex_mode_ = (format & SERIAL_HALF_DUPLEX) != 0;
    1392:	bf14      	ite	ne
    1394:	2101      	movne	r1, #1
    1396:	2100      	moveq	r1, #0
    1398:	7681      	strb	r1, [r0, #26]
	if (!half_duplex_mode_)  {
    139a:	f040 80ac 	bne.w	14f6 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x226>
		*(portControlRegister(hardware->rx_pins[rx_pin_index_].pin)) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    139e:	7e01      	ldrb	r1, [r0, #24]
    13a0:	4e69      	ldr	r6, [pc, #420]	; (1548 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x278>)
    13a2:	eb03 1801 	add.w	r8, r3, r1, lsl #4
    13a6:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 1568 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x298>
    13aa:	f898 7014 	ldrb.w	r7, [r8, #20]
		if (hardware->rx_pins[rx_pin_index_].select_input_register) {
    13ae:	f8d8 a01c 	ldr.w	sl, [r8, #28]
		*(portControlRegister(hardware->rx_pins[rx_pin_index_].pin)) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    13b2:	eb06 1707 	add.w	r7, r6, r7, lsl #4
    13b6:	68b9      	ldr	r1, [r7, #8]
    13b8:	f8c1 9000 	str.w	r9, [r1]
		*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = hardware->rx_pins[rx_pin_index_].mux_val;
    13bc:	6879      	ldr	r1, [r7, #4]
    13be:	f8d8 7018 	ldr.w	r7, [r8, #24]
    13c2:	600f      	str	r7, [r1, #0]
		if (hardware->rx_pins[rx_pin_index_].select_input_register) {
    13c4:	f1ba 0f00 	cmp.w	sl, #0
    13c8:	d003      	beq.n	13d2 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x102>
		 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
    13ca:	f8d8 1020 	ldr.w	r1, [r8, #32]
    13ce:	f8ca 1000 	str.w	r1, [sl]
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    13d2:	7e47      	ldrb	r7, [r0, #25]
    13d4:	21d9      	movs	r1, #217	; 0xd9
    13d6:	eb03 1807 	add.w	r8, r3, r7, lsl #4
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3) 
    13da:	f898 c034 	ldrb.w	ip, [r8, #52]	; 0x34
    13de:	eb06 1c0c 	add.w	ip, r6, ip, lsl #4
    13e2:	f8dc 7008 	ldr.w	r7, [ip, #8]
    13e6:	6039      	str	r1, [r7, #0]
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
    13e8:	f8dc 1004 	ldr.w	r1, [ip, #4]
    13ec:	f8d8 7038 	ldr.w	r7, [r8, #56]	; 0x38
    13f0:	600f      	str	r7, [r1, #0]
	if (hardware->tx_pins[tx_pin_index_].select_input_register) {
    13f2:	7e41      	ldrb	r1, [r0, #25]
    13f4:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    13f8:	6bcf      	ldr	r7, [r1, #60]	; 0x3c
    13fa:	b10f      	cbz	r7, 1400 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x130>
	 	*(hardware->tx_pins[tx_pin_index_].select_input_register) =  hardware->tx_pins[tx_pin_index_].select_val;		
    13fc:	6c09      	ldr	r1, [r1, #64]	; 0x40
    13fe:	6039      	str	r1, [r7, #0]
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    1400:	f10e 31ff 	add.w	r1, lr, #4294967295
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
    1404:	f1be 0f08 	cmp.w	lr, #8
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    1408:	ea4f 6101 	mov.w	r1, r1, lsl #24
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
    140c:	bfcc      	ite	gt
    140e:	f04f 0e00 	movgt.w	lr, #0
    1412:	f04f 0e01 	movle.w	lr, #1
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    1416:	f001 51f8 	and.w	r1, r1, #520093696	; 0x1f000000
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
    141a:	ea44 444e 	orr.w	r4, r4, lr, lsl #17
    141e:	4321      	orrs	r1, r4
	attachInterruptVector(hardware->irq, hardware->irq_handler);
    1420:	685c      	ldr	r4, [r3, #4]
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    1422:	6129      	str	r1, [r5, #16]
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    1424:	7859      	ldrb	r1, [r3, #1]
    1426:	f101 0310 	add.w	r3, r1, #16
	port->PINCFG = 0;
    142a:	2100      	movs	r1, #0
    142c:	60e9      	str	r1, [r5, #12]
    142e:	4947      	ldr	r1, [pc, #284]	; (154c <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x27c>)
    1430:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    1434:	6941      	ldr	r1, [r0, #20]
	NVIC_ENABLE_IRQ(hardware->irq);
    1436:	f04f 0e01 	mov.w	lr, #1
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    143a:	4c45      	ldr	r4, [pc, #276]	; (1550 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x280>)
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
    143c:	f002 0c03 	and.w	ip, r2, #3
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    1440:	784f      	ldrb	r7, [r1, #1]
    1442:	f891 1056 	ldrb.w	r1, [r1, #86]	; 0x56
	NVIC_ENABLE_IRQ(hardware->irq);
    1446:	4b43      	ldr	r3, [pc, #268]	; (1554 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x284>)
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    1448:	5539      	strb	r1, [r7, r4]
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
    144a:	f04f 1702 	mov.w	r7, #131074	; 0x20002
	NVIC_ENABLE_IRQ(hardware->irq);
    144e:	6944      	ldr	r4, [r0, #20]
    1450:	7861      	ldrb	r1, [r4, #1]
    1452:	eb03 1351 	add.w	r3, r3, r1, lsr #5
    1456:	f001 011f 	and.w	r1, r1, #31
    145a:	009b      	lsls	r3, r3, #2
    145c:	fa0e f101 	lsl.w	r1, lr, r1
    1460:	6019      	str	r1, [r3, #0]
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
    1462:	62ef      	str	r7, [r5, #44]	; 0x2c
	port->FIFO |= LPUART_FIFO_TXFE | LPUART_FIFO_RXFE;
    1464:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1466:	f043 0388 	orr.w	r3, r3, #136	; 0x88
    146a:	62ab      	str	r3, [r5, #40]	; 0x28
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
    146c:	0753      	lsls	r3, r2, #29
    146e:	d43e      	bmi.n	14ee <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x21e>
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
    1470:	f44c 1370 	orr.w	r3, ip, #3932160	; 0x3c0000
	if ((format & 0x0F) == 0x04) ctrl |=  LPUART_CTRL_R9T8; // 8N2 is 9 bit with 9th bit always 1
    1474:	f002 010f 	and.w	r1, r2, #15
    1478:	2904      	cmp	r1, #4
    147a:	bf08      	it	eq
    147c:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
	if (format & 0x20) {
    1480:	0697      	lsls	r7, r2, #26
    1482:	d52e      	bpl.n	14e2 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x212>
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
    1484:	7e81      	ldrb	r1, [r0, #26]
		ctrl |= LPUART_CTRL_TXINV;		// tx invert
    1486:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
    148a:	2900      	cmp	r1, #0
    148c:	d13a      	bne.n	1504 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x234>
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
    148e:	0716      	lsls	r6, r2, #28
	port->CTRL = ctrl;
    1490:	61ab      	str	r3, [r5, #24]
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
    1492:	d503      	bpl.n	149c <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1cc>
    1494:	692b      	ldr	r3, [r5, #16]
    1496:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    149a:	612b      	str	r3, [r5, #16]
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
    149c:	696b      	ldr	r3, [r5, #20]
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
    149e:	06d1      	lsls	r1, r2, #27
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
    14a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
    14a4:	bf48      	it	mi
    14a6:	f043 5380 	orrmi.w	r3, r3, #268435456	; 0x10000000
	port->STAT = c;
    14aa:	616b      	str	r3, [r5, #20]
	if ( format & 0x100) port->BAUD |= LPUART_BAUD_SBNS;	
    14ac:	05d3      	lsls	r3, r2, #23
    14ae:	d503      	bpl.n	14b8 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1e8>
    14b0:	692b      	ldr	r3, [r5, #16]
    14b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    14b6:	612b      	str	r3, [r5, #16]
	if (hardware->_serialEvent) addToSerialEventsList();
    14b8:	68a3      	ldr	r3, [r4, #8]
    14ba:	b183      	cbz	r3, 14de <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x20e>
	//digitalWrite(4, LOW);
}


void HardwareSerialIMXRT::addToSerialEventsList() {
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    14bc:	4e26      	ldr	r6, [pc, #152]	; (1558 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x288>)
    14be:	7834      	ldrb	r4, [r6, #0]
    14c0:	2c00      	cmp	r4, #0
    14c2:	d03a      	beq.n	153a <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x26a>
    14c4:	1e61      	subs	r1, r4, #1
    14c6:	4d25      	ldr	r5, [pc, #148]	; (155c <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x28c>)
    14c8:	b2c9      	uxtb	r1, r1
    14ca:	1f2b      	subs	r3, r5, #4
    14cc:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    14d0:	e001      	b.n	14d6 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x206>
    14d2:	4299      	cmp	r1, r3
    14d4:	d025      	beq.n	1522 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x252>
		if (s_serials_with_serial_events[i] == this) return; // already in the list.
    14d6:	f853 2f04 	ldr.w	r2, [r3, #4]!
    14da:	4290      	cmp	r0, r2
    14dc:	d1f9      	bne.n	14d2 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x202>
};
    14de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
    14e2:	7e81      	ldrb	r1, [r0, #26]
    14e4:	2900      	cmp	r1, #0
    14e6:	d0d2      	beq.n	148e <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1be>
    14e8:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
    14ec:	e7cf      	b.n	148e <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1be>
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
    14ee:	4b1c      	ldr	r3, [pc, #112]	; (1560 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x290>)
    14f0:	ea4c 0303 	orr.w	r3, ip, r3
    14f4:	e7be      	b.n	1474 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1a4>
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3) 
    14f6:	7e47      	ldrb	r7, [r0, #25]
    14f8:	f24f 01d9 	movw	r1, #61657	; 0xf0d9
    14fc:	4e12      	ldr	r6, [pc, #72]	; (1548 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x278>)
    14fe:	eb03 1807 	add.w	r8, r3, r7, lsl #4
    1502:	e76a      	b.n	13da <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x10a>
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
    1504:	7e41      	ldrb	r1, [r0, #25]
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
    1506:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
    150a:	eb04 1101 	add.w	r1, r4, r1, lsl #4
    150e:	f891 1034 	ldrb.w	r1, [r1, #52]	; 0x34
    1512:	eb06 1601 	add.w	r6, r6, r1, lsl #4
    1516:	68b6      	ldr	r6, [r6, #8]
    1518:	6831      	ldr	r1, [r6, #0]
    151a:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
    151e:	6031      	str	r1, [r6, #0]
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
    1520:	e7b5      	b.n	148e <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1be>
	}
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    1522:	1c63      	adds	r3, r4, #1
    1524:	b2db      	uxtb	r3, r3
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    1526:	4a0f      	ldr	r2, [pc, #60]	; (1564 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x294>)
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    1528:	7033      	strb	r3, [r6, #0]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    152a:	7813      	ldrb	r3, [r2, #0]
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    152c:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    1530:	f043 0302 	orr.w	r3, r3, #2
    1534:	7013      	strb	r3, [r2, #0]
};
    1536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    153a:	2301      	movs	r3, #1
    153c:	4d07      	ldr	r5, [pc, #28]	; (155c <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x28c>)
    153e:	e7f2      	b.n	1526 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x256>
    1540:	4bb71b00 	.word	0x4bb71b00
    1544:	60ad78ec 	.word	0x60ad78ec
    1548:	20007380 	.word	0x20007380
    154c:	20008800 	.word	0x20008800
    1550:	e000e400 	.word	0xe000e400
    1554:	38003840 	.word	0x38003840
    1558:	200092a8 	.word	0x200092a8
    155c:	20008dd4 	.word	0x20008dd4
    1560:	003c0010 	.word	0x003c0010
    1564:	200092b7 	.word	0x200092b7
    1568:	0001f038 	.word	0x0001f038

0000156c <nvic_execution_priority()>:
	__asm__ volatile("mrs %0, faultmask\n" : "=r" (faultmask)::);
    156c:	f3ef 8013 	mrs	r0, FAULTMASK
	if (faultmask) return -1;
    1570:	b9b8      	cbnz	r0, 15a2 <nvic_execution_priority()+0x36>
	__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    1572:	f3ef 8310 	mrs	r3, PRIMASK
	if (primask) return 0;
    1576:	b94b      	cbnz	r3, 158c <nvic_execution_priority()+0x20>
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    1578:	f3ef 8205 	mrs	r2, IPSR
	if (ipsr) {
    157c:	b93a      	cbnz	r2, 158e <nvic_execution_priority()+0x22>
	uint32_t priority=256;
    157e:	f44f 7380 	mov.w	r3, #256	; 0x100
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    1582:	f3ef 8011 	mrs	r0, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    1586:	b150      	cbz	r0, 159e <nvic_execution_priority()+0x32>
    1588:	4298      	cmp	r0, r3
    158a:	d208      	bcs.n	159e <nvic_execution_priority()+0x32>
}
    158c:	4770      	bx	lr
		if (ipsr < 16) priority = 0; // could be non-zero
    158e:	2a0f      	cmp	r2, #15
    1590:	d9f7      	bls.n	1582 <nvic_execution_priority()+0x16>
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
    1592:	4b05      	ldr	r3, [pc, #20]	; (15a8 <nvic_execution_priority()+0x3c>)
    1594:	5c9b      	ldrb	r3, [r3, r2]
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    1596:	f3ef 8011 	mrs	r0, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    159a:	2800      	cmp	r0, #0
    159c:	d1f4      	bne.n	1588 <nvic_execution_priority()+0x1c>
    159e:	4618      	mov	r0, r3
	return priority;
    15a0:	4770      	bx	lr
	if (faultmask) return -1;
    15a2:	f04f 30ff 	mov.w	r0, #4294967295
    15a6:	e7f1      	b.n	158c <nvic_execution_priority()+0x20>
    15a8:	e000e3f0 	.word	0xe000e3f0

000015ac <HardwareSerialIMXRT::write9bit(unsigned long)>:
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
    15ac:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
    15ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    15b2:	4604      	mov	r4, r0
    15b4:	460f      	mov	r7, r1
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    15b6:	6906      	ldr	r6, [r0, #16]
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
    15b8:	b113      	cbz	r3, 15c0 <HardwareSerialIMXRT::write9bit(unsigned long)+0x14>
    15ba:	6d42      	ldr	r2, [r0, #84]	; 0x54
    15bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	if(half_duplex_mode_) {		
    15c0:	7ea3      	ldrb	r3, [r4, #26]
    15c2:	b12b      	cbz	r3, 15d0 <HardwareSerialIMXRT::write9bit(unsigned long)+0x24>
		__disable_irq();
    15c4:	b672      	cpsid	i
	    port->CTRL |= LPUART_CTRL_TXDIR;
    15c6:	69b3      	ldr	r3, [r6, #24]
    15c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    15cc:	61b3      	str	r3, [r6, #24]
		__enable_irq();
    15ce:	b662      	cpsie	i
	head = tx_buffer_head_;
    15d0:	f8b4 5046 	ldrh.w	r5, [r4, #70]	; 0x46
	if (++head >= tx_buffer_total_size_) head = 0;
    15d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
	head = tx_buffer_head_;
    15d6:	b2ad      	uxth	r5, r5
	if (++head >= tx_buffer_total_size_) head = 0;
    15d8:	3501      	adds	r5, #1
    15da:	42ab      	cmp	r3, r5
    15dc:	d84c      	bhi.n	1678 <HardwareSerialIMXRT::write9bit(unsigned long)+0xcc>
    15de:	f04f 0800 	mov.w	r8, #0
    15e2:	4645      	mov	r5, r8
	while (tx_buffer_tail_ == head) {
    15e4:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    15e8:	b29b      	uxth	r3, r3
    15ea:	429d      	cmp	r5, r3
    15ec:	d019      	beq.n	1622 <HardwareSerialIMXRT::write9bit(unsigned long)+0x76>
    15ee:	e028      	b.n	1642 <HardwareSerialIMXRT::write9bit(unsigned long)+0x96>
			if ((port->STAT & LPUART_STAT_TDRE)) {
    15f0:	6973      	ldr	r3, [r6, #20]
    15f2:	021b      	lsls	r3, r3, #8
    15f4:	d510      	bpl.n	1618 <HardwareSerialIMXRT::write9bit(unsigned long)+0x6c>
				uint32_t tail = tx_buffer_tail_;
    15f6:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
				if (++tail >= tx_buffer_total_size_) tail = 0;
    15fa:	6b62      	ldr	r2, [r4, #52]	; 0x34
				uint32_t tail = tx_buffer_tail_;
    15fc:	b29b      	uxth	r3, r3
				if (++tail >= tx_buffer_total_size_) tail = 0;
    15fe:	3301      	adds	r3, #1
    1600:	429a      	cmp	r2, r3
    1602:	d936      	bls.n	1672 <HardwareSerialIMXRT::write9bit(unsigned long)+0xc6>
				tx_buffer_tail_ = tail;
    1604:	b29a      	uxth	r2, r3
				if (tail < tx_buffer_size_) {
    1606:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    1608:	4299      	cmp	r1, r3
    160a:	d92d      	bls.n	1668 <HardwareSerialIMXRT::write9bit(unsigned long)+0xbc>
					n = tx_buffer_[tail];
    160c:	69e1      	ldr	r1, [r4, #28]
    160e:	5ccb      	ldrb	r3, [r1, r3]
    1610:	b2db      	uxtb	r3, r3
				port->DATA  = n;
    1612:	61f3      	str	r3, [r6, #28]
				tx_buffer_tail_ = tail;
    1614:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
	while (tx_buffer_tail_ == head) {
    1618:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    161c:	b29b      	uxth	r3, r3
    161e:	42ab      	cmp	r3, r5
    1620:	d10f      	bne.n	1642 <HardwareSerialIMXRT::write9bit(unsigned long)+0x96>
		int priority = nvic_execution_priority();
    1622:	f7ff ffa3 	bl	156c <nvic_execution_priority()>
		if (priority <= hardware->irq_priority) {
    1626:	6963      	ldr	r3, [r4, #20]
    1628:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
    162c:	4283      	cmp	r3, r0
    162e:	dadf      	bge.n	15f0 <HardwareSerialIMXRT::write9bit(unsigned long)+0x44>
		} else if (priority >= 256) 
    1630:	28ff      	cmp	r0, #255	; 0xff
    1632:	ddf1      	ble.n	1618 <HardwareSerialIMXRT::write9bit(unsigned long)+0x6c>
			yield(); // wait
    1634:	f002 f96e 	bl	3914 <yield>
	while (tx_buffer_tail_ == head) {
    1638:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    163c:	b29b      	uxth	r3, r3
    163e:	42ab      	cmp	r3, r5
    1640:	d0ef      	beq.n	1622 <HardwareSerialIMXRT::write9bit(unsigned long)+0x76>
	if (head < tx_buffer_size_) {
    1642:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1644:	42ab      	cmp	r3, r5
    1646:	d91a      	bls.n	167e <HardwareSerialIMXRT::write9bit(unsigned long)+0xd2>
		tx_buffer_[head] = c;
    1648:	b2ff      	uxtb	r7, r7
    164a:	69e3      	ldr	r3, [r4, #28]
    164c:	555f      	strb	r7, [r3, r5]
	__disable_irq();
    164e:	b672      	cpsid	i
	transmitting_ = 1;
    1650:	2001      	movs	r0, #1
    1652:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
	tx_buffer_head_ = head;
    1656:	f8a4 8046 	strh.w	r8, [r4, #70]	; 0x46
	port->CTRL |= LPUART_CTRL_TIE; // (may need to handle this issue)BITBAND_SET_BIT(LPUART0_CTRL, TIE_BIT);
    165a:	69b3      	ldr	r3, [r6, #24]
    165c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    1660:	61b3      	str	r3, [r6, #24]
	__enable_irq();
    1662:	b662      	cpsie	i
}
    1664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					n = tx_buffer_storage_[tail-tx_buffer_size_];
    1668:	1a5b      	subs	r3, r3, r1
    166a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    166c:	5ccb      	ldrb	r3, [r1, r3]
    166e:	b2db      	uxtb	r3, r3
    1670:	e7cf      	b.n	1612 <HardwareSerialIMXRT::write9bit(unsigned long)+0x66>
    1672:	2200      	movs	r2, #0
				if (++tail >= tx_buffer_total_size_) tail = 0;
    1674:	4613      	mov	r3, r2
    1676:	e7c6      	b.n	1606 <HardwareSerialIMXRT::write9bit(unsigned long)+0x5a>
	tx_buffer_head_ = head;
    1678:	fa1f f885 	uxth.w	r8, r5
    167c:	e7b2      	b.n	15e4 <HardwareSerialIMXRT::write9bit(unsigned long)+0x38>
		tx_buffer_storage_[head - tx_buffer_size_] = c;
    167e:	1aed      	subs	r5, r5, r3
    1680:	b2ff      	uxtb	r7, r7
    1682:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1684:	555f      	strb	r7, [r3, r5]
    1686:	e7e2      	b.n	164e <HardwareSerialIMXRT::write9bit(unsigned long)+0xa2>

00001688 <HardwareSerialIMXRT::write(unsigned char)>:
	return write9bit(c);
    1688:	f7ff bf90 	b.w	15ac <HardwareSerialIMXRT::write9bit(unsigned long)>

0000168c <HardwareSerialIMXRT::IRQHandler()>:
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    168c:	6902      	ldr	r2, [r0, #16]
	if (port->STAT & (LPUART_STAT_RDRF | LPUART_STAT_IDLE)) {
    168e:	6953      	ldr	r3, [r2, #20]
    1690:	f413 1f40 	tst.w	r3, #3145728	; 0x300000
{
    1694:	b570      	push	{r4, r5, r6, lr}
	if (port->STAT & (LPUART_STAT_RDRF | LPUART_STAT_IDLE)) {
    1696:	d043      	beq.n	1720 <HardwareSerialIMXRT::IRQHandler()+0x94>
		uint8_t avail = (port->WATER >> 24) & 0x7;
    1698:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
		if (avail) {
    169a:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
		uint8_t avail = (port->WATER >> 24) & 0x7;
    169e:	f3c3 6e02 	ubfx	lr, r3, #24, #3
		if (avail) {
    16a2:	d03a      	beq.n	171a <HardwareSerialIMXRT::IRQHandler()+0x8e>
			head = rx_buffer_head_;
    16a4:	f8b0 504a 	ldrh.w	r5, [r0, #74]	; 0x4a
			tail = rx_buffer_tail_;
    16a8:	f8b0 604c 	ldrh.w	r6, [r0, #76]	; 0x4c
			head = rx_buffer_head_;
    16ac:	b2ad      	uxth	r5, r5
			tail = rx_buffer_tail_;
    16ae:	b2b6      	uxth	r6, r6
    16b0:	e007      	b.n	16c2 <HardwareSerialIMXRT::IRQHandler()+0x36>
						rx_buffer_[head] = n;
    16b2:	6a01      	ldr	r1, [r0, #32]
    16b4:	f801 c003 	strb.w	ip, [r1, r3]
			} while (--avail > 0) ;
    16b8:	f10e 33ff 	add.w	r3, lr, #4294967295
    16bc:	f013 0eff 	ands.w	lr, r3, #255	; 0xff
    16c0:	d01d      	beq.n	16fe <HardwareSerialIMXRT::IRQHandler()+0x72>
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    16c2:	69d1      	ldr	r1, [r2, #28]
				newhead = head + 1;
    16c4:	1c6b      	adds	r3, r5, #1
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    16c6:	6b84      	ldr	r4, [r0, #56]	; 0x38
				if (newhead != rx_buffer_tail_) {
    16c8:	f8b0 c04c 	ldrh.w	ip, [r0, #76]	; 0x4c
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    16cc:	f3c1 0109 	ubfx	r1, r1, #0, #10
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    16d0:	429c      	cmp	r4, r3
    16d2:	bf98      	it	ls
    16d4:	2300      	movls	r3, #0
				if (newhead != rx_buffer_tail_) {
    16d6:	fa1f fc8c 	uxth.w	ip, ip
    16da:	459c      	cmp	ip, r3
    16dc:	d0ec      	beq.n	16b8 <HardwareSerialIMXRT::IRQHandler()+0x2c>
					if (newhead < rx_buffer_size_) {
    16de:	6b04      	ldr	r4, [r0, #48]	; 0x30
						rx_buffer_[head] = n;
    16e0:	fa5f fc81 	uxtb.w	ip, r1
    16e4:	461d      	mov	r5, r3
					if (newhead < rx_buffer_size_) {
    16e6:	429c      	cmp	r4, r3
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    16e8:	eba3 0404 	sub.w	r4, r3, r4
					if (newhead < rx_buffer_size_) {
    16ec:	d8e1      	bhi.n	16b2 <HardwareSerialIMXRT::IRQHandler()+0x26>
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    16ee:	6a43      	ldr	r3, [r0, #36]	; 0x24
    16f0:	f803 c004 	strb.w	ip, [r3, r4]
			} while (--avail > 0) ;
    16f4:	f10e 33ff 	add.w	r3, lr, #4294967295
    16f8:	f013 0eff 	ands.w	lr, r3, #255	; 0xff
    16fc:	d1e1      	bne.n	16c2 <HardwareSerialIMXRT::IRQHandler()+0x36>
			rx_buffer_head_ = head;
    16fe:	b2ab      	uxth	r3, r5
    1700:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
			if (rts_pin_baseReg_) {
    1704:	6d83      	ldr	r3, [r0, #88]	; 0x58
    1706:	b143      	cbz	r3, 171a <HardwareSerialIMXRT::IRQHandler()+0x8e>
				if (head >= tail) avail = head - tail;
    1708:	42b5      	cmp	r5, r6
    170a:	d354      	bcc.n	17b6 <HardwareSerialIMXRT::IRQHandler()+0x12a>
    170c:	1bad      	subs	r5, r5, r6
				if (avail >= rts_high_watermark_) rts_deassert();
    170e:	6c01      	ldr	r1, [r0, #64]	; 0x40
    1710:	42a9      	cmp	r1, r5
    1712:	d802      	bhi.n	171a <HardwareSerialIMXRT::IRQHandler()+0x8e>
	DIRECT_WRITE_HIGH(rts_pin_baseReg_, rts_pin_bitmask_);
    1714:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
    1716:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		if (port->STAT & LPUART_STAT_IDLE) {
    171a:	6953      	ldr	r3, [r2, #20]
    171c:	02d9      	lsls	r1, r3, #11
    171e:	d445      	bmi.n	17ac <HardwareSerialIMXRT::IRQHandler()+0x120>
	ctrl = port->CTRL;
    1720:	6996      	ldr	r6, [r2, #24]
	if ((ctrl & LPUART_CTRL_TIE) && (port->STAT & LPUART_STAT_TDRE))
    1722:	0233      	lsls	r3, r6, #8
    1724:	d528      	bpl.n	1778 <HardwareSerialIMXRT::IRQHandler()+0xec>
    1726:	6953      	ldr	r3, [r2, #20]
    1728:	021d      	lsls	r5, r3, #8
    172a:	d525      	bpl.n	1778 <HardwareSerialIMXRT::IRQHandler()+0xec>
		head = tx_buffer_head_;
    172c:	f8b0 5046 	ldrh.w	r5, [r0, #70]	; 0x46
		tail = tx_buffer_tail_;
    1730:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
		head = tx_buffer_head_;
    1734:	b2ad      	uxth	r5, r5
		tail = tx_buffer_tail_;
    1736:	b29b      	uxth	r3, r3
    1738:	e006      	b.n	1748 <HardwareSerialIMXRT::IRQHandler()+0xbc>
				n = tx_buffer_[tail];
    173a:	69c1      	ldr	r1, [r0, #28]
    173c:	5cc9      	ldrb	r1, [r1, r3]
    173e:	b2c9      	uxtb	r1, r1
			port->DATA = n;
    1740:	61d1      	str	r1, [r2, #28]
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
    1742:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    1744:	054c      	lsls	r4, r1, #21
    1746:	d412      	bmi.n	176e <HardwareSerialIMXRT::IRQHandler()+0xe2>
			if (head == tail) break;
    1748:	42ab      	cmp	r3, r5
    174a:	d038      	beq.n	17be <HardwareSerialIMXRT::IRQHandler()+0x132>
			if (++tail >= tx_buffer_total_size_) tail = 0;
    174c:	6b44      	ldr	r4, [r0, #52]	; 0x34
    174e:	3301      	adds	r3, #1
			if (tail < tx_buffer_size_) {
    1750:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			if (++tail >= tx_buffer_total_size_) tail = 0;
    1752:	429c      	cmp	r4, r3
    1754:	bf98      	it	ls
    1756:	2300      	movls	r3, #0
			if (tail < tx_buffer_size_) {
    1758:	4299      	cmp	r1, r3
				n = tx_buffer_storage_[tail-tx_buffer_size_];
    175a:	eba3 0401 	sub.w	r4, r3, r1
			if (tail < tx_buffer_size_) {
    175e:	d8ec      	bhi.n	173a <HardwareSerialIMXRT::IRQHandler()+0xae>
				n = tx_buffer_storage_[tail-tx_buffer_size_];
    1760:	6a81      	ldr	r1, [r0, #40]	; 0x28
    1762:	5d09      	ldrb	r1, [r1, r4]
    1764:	b2c9      	uxtb	r1, r1
			port->DATA = n;
    1766:	61d1      	str	r1, [r2, #28]
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
    1768:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    176a:	054c      	lsls	r4, r1, #21
    176c:	d5ec      	bpl.n	1748 <HardwareSerialIMXRT::IRQHandler()+0xbc>
		tx_buffer_tail_ = tail;
    176e:	b299      	uxth	r1, r3
		if (head == tail) {
    1770:	42ab      	cmp	r3, r5
		tx_buffer_tail_ = tail;
    1772:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
		if (head == tail) {
    1776:	d025      	beq.n	17c4 <HardwareSerialIMXRT::IRQHandler()+0x138>
	if ((ctrl & LPUART_CTRL_TCIE) && (port->STAT & LPUART_STAT_TC))
    1778:	0271      	lsls	r1, r6, #9
    177a:	d516      	bpl.n	17aa <HardwareSerialIMXRT::IRQHandler()+0x11e>
    177c:	6953      	ldr	r3, [r2, #20]
    177e:	025b      	lsls	r3, r3, #9
    1780:	d513      	bpl.n	17aa <HardwareSerialIMXRT::IRQHandler()+0x11e>
		transmitting_ = 0;
    1782:	2100      	movs	r1, #0
		if (transmit_pin_baseReg_) DIRECT_WRITE_LOW(transmit_pin_baseReg_, transmit_pin_bitmask_);
    1784:	6d03      	ldr	r3, [r0, #80]	; 0x50
		transmitting_ = 0;
    1786:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
		if (transmit_pin_baseReg_) DIRECT_WRITE_LOW(transmit_pin_baseReg_, transmit_pin_bitmask_);
    178a:	b113      	cbz	r3, 1792 <HardwareSerialIMXRT::IRQHandler()+0x106>
    178c:	6d41      	ldr	r1, [r0, #84]	; 0x54
    178e:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
		if(half_duplex_mode_) {		
    1792:	7e83      	ldrb	r3, [r0, #26]
    1794:	b12b      	cbz	r3, 17a2 <HardwareSerialIMXRT::IRQHandler()+0x116>
			__disable_irq();
    1796:	b672      	cpsid	i
		    port->CTRL &= ~LPUART_CTRL_TXDIR;
    1798:	6993      	ldr	r3, [r2, #24]
    179a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
    179e:	6193      	str	r3, [r2, #24]
			__enable_irq();
    17a0:	b662      	cpsie	i
		port->CTRL &= ~LPUART_CTRL_TCIE;
    17a2:	6993      	ldr	r3, [r2, #24]
    17a4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
    17a8:	6193      	str	r3, [r2, #24]
}
    17aa:	bd70      	pop	{r4, r5, r6, pc}
			port->STAT |= LPUART_STAT_IDLE;	// writing a 1 to idle should clear it. 
    17ac:	6953      	ldr	r3, [r2, #20]
    17ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    17b2:	6153      	str	r3, [r2, #20]
    17b4:	e7b4      	b.n	1720 <HardwareSerialIMXRT::IRQHandler()+0x94>
				else avail = rx_buffer_total_size_ + head - tail;
    17b6:	6b81      	ldr	r1, [r0, #56]	; 0x38
    17b8:	1b89      	subs	r1, r1, r6
    17ba:	440d      	add	r5, r1
    17bc:	e7a7      	b.n	170e <HardwareSerialIMXRT::IRQHandler()+0x82>
		tx_buffer_tail_ = tail;
    17be:	b29b      	uxth	r3, r3
    17c0:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
			port->CTRL &= ~LPUART_CTRL_TIE; 
    17c4:	6993      	ldr	r3, [r2, #24]
    17c6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    17ca:	6193      	str	r3, [r2, #24]
  			port->CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
    17cc:	6993      	ldr	r3, [r2, #24]
    17ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    17d2:	6193      	str	r3, [r2, #24]
    17d4:	e7d0      	b.n	1778 <HardwareSerialIMXRT::IRQHandler()+0xec>
    17d6:	bf00      	nop

000017d8 <IRQHandler_Serial2>:
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest


void IRQHandler_Serial2()
{
	Serial2.IRQHandler();
    17d8:	4801      	ldr	r0, [pc, #4]	; (17e0 <IRQHandler_Serial2+0x8>)
    17da:	f7ff bf57 	b.w	168c <HardwareSerialIMXRT::IRQHandler()>
    17de:	bf00      	nop
    17e0:	20007b60 	.word	0x20007b60

000017e4 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    17e4:	4608      	mov	r0, r1
    17e6:	f002 b801 	b.w	37ec <usb_serial_putchar>
    17ea:	bf00      	nop

000017ec <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>:
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    17ec:	2a01      	cmp	r2, #1
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    17ee:	b570      	push	{r4, r5, r6, lr}
		base = 10;
    17f0:	bf08      	it	eq
    17f2:	220a      	moveq	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    17f4:	b08a      	sub	sp, #40	; 0x28
	}


	if (n == 0) {
    17f6:	b391      	cbz	r1, 185e <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x72>
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
    17f8:	f04f 0e21 	mov.w	lr, #33	; 0x21
    17fc:	e001      	b.n	1802 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x16>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    17fe:	fa5f fe86 	uxtb.w	lr, r6
    1802:	f10e 36ff 	add.w	r6, lr, #4294967295
			digit = n % base;
    1806:	fbb1 f5f2 	udiv	r5, r1, r2
    180a:	fb02 1415 	mls	r4, r2, r5, r1
    180e:	fa5f fc84 	uxtb.w	ip, r4
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1812:	2c09      	cmp	r4, #9
    1814:	f10c 0437 	add.w	r4, ip, #55	; 0x37
    1818:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
    181c:	bf98      	it	ls
    181e:	fa5f f48c 	uxtbls.w	r4, ip
    1822:	f10e 0c28 	add.w	ip, lr, #40	; 0x28
    1826:	bf88      	it	hi
    1828:	b2e4      	uxtbhi	r4, r4
			if (n == 0) break;
    182a:	4291      	cmp	r1, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    182c:	44ec      	add	ip, sp
			n /= base;
    182e:	4629      	mov	r1, r5
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1830:	f80c 4c24 	strb.w	r4, [ip, #-36]
			if (n == 0) break;
    1834:	d2e3      	bcs.n	17fe <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x12>
		}
	}
	if (sign) {
    1836:	b14b      	cbz	r3, 184c <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x60>
		i--;
    1838:	f10e 3eff 	add.w	lr, lr, #4294967295
		buf[i] = '-';
    183c:	222d      	movs	r2, #45	; 0x2d
		i--;
    183e:	fa5f fe8e 	uxtb.w	lr, lr
		buf[i] = '-';
    1842:	f10e 0328 	add.w	r3, lr, #40	; 0x28
    1846:	446b      	add	r3, sp
    1848:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    184c:	6803      	ldr	r3, [r0, #0]
    184e:	a901      	add	r1, sp, #4
    1850:	f1ce 0222 	rsb	r2, lr, #34	; 0x22
    1854:	685b      	ldr	r3, [r3, #4]
    1856:	4471      	add	r1, lr
    1858:	4798      	blx	r3
}
    185a:	b00a      	add	sp, #40	; 0x28
    185c:	bd70      	pop	{r4, r5, r6, pc}
		buf[sizeof(buf) - 1] = '0';
    185e:	2230      	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    1860:	f04f 0e21 	mov.w	lr, #33	; 0x21
		buf[sizeof(buf) - 1] = '0';
    1864:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    1868:	e7e5      	b.n	1836 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x4a>
    186a:	bf00      	nop

0000186c <Print::write(unsigned char const*, unsigned int)>:
{
    186c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buffer == nullptr) return 0;
    1870:	460c      	mov	r4, r1
    1872:	b1d1      	cbz	r1, 18aa <Print::write(unsigned char const*, unsigned int)+0x3e>
	while (size--) count += write(*buffer++);
    1874:	b1ea      	cbz	r2, 18b2 <Print::write(unsigned char const*, unsigned int)+0x46>
    1876:	4680      	mov	r8, r0
    1878:	188e      	adds	r6, r1, r2
	size_t count = 0;
    187a:	2500      	movs	r5, #0
    187c:	4f0e      	ldr	r7, [pc, #56]	; (18b8 <Print::write(unsigned char const*, unsigned int)+0x4c>)
    187e:	e004      	b.n	188a <Print::write(unsigned char const*, unsigned int)+0x1e>
    1880:	f001 ffb4 	bl	37ec <usb_serial_putchar>
	while (size--) count += write(*buffer++);
    1884:	42b4      	cmp	r4, r6
    1886:	4405      	add	r5, r0
    1888:	d00c      	beq.n	18a4 <Print::write(unsigned char const*, unsigned int)+0x38>
    188a:	f8d8 3000 	ldr.w	r3, [r8]
    188e:	f814 0b01 	ldrb.w	r0, [r4], #1
    1892:	681b      	ldr	r3, [r3, #0]
    1894:	42bb      	cmp	r3, r7
    1896:	d0f3      	beq.n	1880 <Print::write(unsigned char const*, unsigned int)+0x14>
    1898:	4601      	mov	r1, r0
    189a:	4640      	mov	r0, r8
    189c:	4798      	blx	r3
    189e:	42b4      	cmp	r4, r6
    18a0:	4405      	add	r5, r0
    18a2:	d1f2      	bne.n	188a <Print::write(unsigned char const*, unsigned int)+0x1e>
}
    18a4:	4628      	mov	r0, r5
    18a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (buffer == nullptr) return 0;
    18aa:	460d      	mov	r5, r1
}
    18ac:	4628      	mov	r0, r5
    18ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (buffer == nullptr) return 0;
    18b2:	4615      	mov	r5, r2
    18b4:	e7f6      	b.n	18a4 <Print::write(unsigned char const*, unsigned int)+0x38>
    18b6:	bf00      	nop
    18b8:	000017e5 	.word	0x000017e5

000018bc <Print::print(long)>:
	if (n < 0) {
    18bc:	2900      	cmp	r1, #0
    18be:	db03      	blt.n	18c8 <Print::print(long)+0xc>
	uint8_t sign=0;
    18c0:	2300      	movs	r3, #0
	if (base == 0) {
    18c2:	220a      	movs	r2, #10
    18c4:	f7ff bf92 	b.w	17ec <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
		n = -n;
    18c8:	4249      	negs	r1, r1
		sign = '-';
    18ca:	232d      	movs	r3, #45	; 0x2d
	if (base == 0) {
    18cc:	220a      	movs	r2, #10
    18ce:	f7ff bf8d 	b.w	17ec <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    18d2:	bf00      	nop

000018d4 <Print::println()>:
{
    18d4:	b500      	push	{lr}
	return write(buf, 2);
    18d6:	6803      	ldr	r3, [r0, #0]
{
    18d8:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    18da:	f640 2c0d 	movw	ip, #2573	; 0xa0d
	return write(buf, 2);
    18de:	2202      	movs	r2, #2
    18e0:	a901      	add	r1, sp, #4
    18e2:	685b      	ldr	r3, [r3, #4]
	uint8_t buf[2]={'\r', '\n'};
    18e4:	f8ad c004 	strh.w	ip, [sp, #4]
	return write(buf, 2);
    18e8:	4798      	blx	r3
}
    18ea:	b003      	add	sp, #12
    18ec:	f85d fb04 	ldr.w	pc, [sp], #4

000018f0 <_write>:
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    18f0:	4b05      	ldr	r3, [pc, #20]	; (1908 <_write+0x18>)
    18f2:	2802      	cmp	r0, #2
    18f4:	bf88      	it	hi
    18f6:	4603      	movhi	r3, r0
{
    18f8:	b410      	push	{r4}
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    18fa:	681c      	ldr	r4, [r3, #0]
    18fc:	4618      	mov	r0, r3
    18fe:	6863      	ldr	r3, [r4, #4]
}
    1900:	f85d 4b04 	ldr.w	r4, [sp], #4
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    1904:	4718      	bx	r3
    1906:	bf00      	nop
    1908:	20007b50 	.word	0x20007b50

0000190c <Print::printf(char const*, ...)>:
{
    190c:	b40e      	push	{r1, r2, r3}
    190e:	b500      	push	{lr}
    1910:	b082      	sub	sp, #8
    1912:	aa03      	add	r2, sp, #12
    1914:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, format);
    1918:	9201      	str	r2, [sp, #4]
	int retval = vdprintf((int)this, format, ap);
    191a:	f004 fa4d 	bl	5db8 <vdprintf>
}
    191e:	b002      	add	sp, #8
    1920:	f85d eb04 	ldr.w	lr, [sp], #4
    1924:	b003      	add	sp, #12
    1926:	4770      	bx	lr

00001928 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	if (base == 0) {
    1928:	b95a      	cbnz	r2, 1942 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x1a>
		return write((uint8_t)n);
    192a:	6803      	ldr	r3, [r0, #0]
    192c:	b2c9      	uxtb	r1, r1
    192e:	4a07      	ldr	r2, [pc, #28]	; (194c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x24>)
    1930:	681b      	ldr	r3, [r3, #0]
    1932:	4293      	cmp	r3, r2
{
    1934:	b500      	push	{lr}
    1936:	d106      	bne.n	1946 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x1e>
    1938:	4608      	mov	r0, r1
}
    193a:	f85d eb04 	ldr.w	lr, [sp], #4
    193e:	f001 bf55 	b.w	37ec <usb_serial_putchar>
    1942:	f7ff bf53 	b.w	17ec <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    1946:	f85d eb04 	ldr.w	lr, [sp], #4
		return write((uint8_t)n);
    194a:	4718      	bx	r3
    194c:	000017e5 	.word	0x000017e5

00001950 <String::String(char const*)>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    1950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    1952:	2600      	movs	r6, #0
String::String(const char *cstr)
    1954:	4604      	mov	r4, r0
	capacity = 0;
    1956:	e9c0 6600 	strd	r6, r6, [r0]
	len = 0;
    195a:	6086      	str	r6, [r0, #8]
	if (cstr) copy(cstr, strlen(cstr));
    195c:	b129      	cbz	r1, 196a <String::String(char const*)+0x1a>
    195e:	4608      	mov	r0, r1
    1960:	460d      	mov	r5, r1
    1962:	f004 fecd 	bl	6700 <strlen>
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
	if (length == 0) {
    1966:	4607      	mov	r7, r0
    1968:	b908      	cbnz	r0, 196e <String::String(char const*)+0x1e>
}
    196a:	4620      	mov	r0, r4
    196c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    196e:	3001      	adds	r0, #1
    1970:	f002 fbe6 	bl	4140 <malloc>
	if (newbuffer) {
    1974:	2800      	cmp	r0, #0
    1976:	d0f8      	beq.n	196a <String::String(char const*)+0x1a>
		}
		len = capacity = 0;
		return *this;
	}
	len = length;
	strcpy(buffer, cstr);
    1978:	4629      	mov	r1, r5
		if (len == 0) buffer[0] = 0;
    197a:	7006      	strb	r6, [r0, #0]
		buffer = newbuffer;
    197c:	6020      	str	r0, [r4, #0]
	len = length;
    197e:	e9c4 7701 	strd	r7, r7, [r4, #4]
	strcpy(buffer, cstr);
    1982:	f004 fe4b 	bl	661c <strcpy>
}
    1986:	4620      	mov	r0, r4
    1988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    198a:	bf00      	nop

0000198c <String::~String()>:
String::~String()
    198c:	b510      	push	{r4, lr}
    198e:	4604      	mov	r4, r0
	free(buffer);
    1990:	6800      	ldr	r0, [r0, #0]
    1992:	f002 fbdd 	bl	4150 <free>
}
    1996:	4620      	mov	r0, r4
    1998:	bd10      	pop	{r4, pc}
    199a:	bf00      	nop

0000199c <String::copy(char const*, unsigned int)>:
{
    199c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    199e:	4604      	mov	r4, r0
	if (length == 0) {
    19a0:	4615      	mov	r5, r2
    19a2:	b932      	cbnz	r2, 19b2 <String::copy(char const*, unsigned int)+0x16>
		if (buffer) buffer[0] = 0;
    19a4:	6803      	ldr	r3, [r0, #0]
    19a6:	b103      	cbz	r3, 19aa <String::copy(char const*, unsigned int)+0xe>
    19a8:	701a      	strb	r2, [r3, #0]
		len = 0;
    19aa:	2300      	movs	r3, #0
	return *this;
}
    19ac:	4620      	mov	r0, r4
		len = 0;
    19ae:	60a3      	str	r3, [r4, #8]
}
    19b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (capacity >= size) return 1;
    19b2:	6843      	ldr	r3, [r0, #4]
    19b4:	460e      	mov	r6, r1
    19b6:	429a      	cmp	r2, r3
    19b8:	d91c      	bls.n	19f4 <String::copy(char const*, unsigned int)+0x58>
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    19ba:	1c51      	adds	r1, r2, #1
    19bc:	6800      	ldr	r0, [r0, #0]
    19be:	f002 fe8b 	bl	46d8 <realloc>
	if (newbuffer) {
    19c2:	4607      	mov	r7, r0
    19c4:	b160      	cbz	r0, 19e0 <String::copy(char const*, unsigned int)+0x44>
		if (len == 0) buffer[0] = 0;
    19c6:	68a3      	ldr	r3, [r4, #8]
		capacity = maxStrLen;
    19c8:	e9c4 0500 	strd	r0, r5, [r4]
		if (len == 0) buffer[0] = 0;
    19cc:	b90b      	cbnz	r3, 19d2 <String::copy(char const*, unsigned int)+0x36>
    19ce:	7003      	strb	r3, [r0, #0]
	strcpy(buffer, cstr);
    19d0:	6827      	ldr	r7, [r4, #0]
    19d2:	4631      	mov	r1, r6
    19d4:	4638      	mov	r0, r7
	len = length;
    19d6:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    19d8:	f004 fe20 	bl	661c <strcpy>
}
    19dc:	4620      	mov	r0, r4
    19de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (buffer) {
    19e0:	6820      	ldr	r0, [r4, #0]
    19e2:	b110      	cbz	r0, 19ea <String::copy(char const*, unsigned int)+0x4e>
			free(buffer);
    19e4:	f002 fbb4 	bl	4150 <free>
			buffer = NULL;
    19e8:	6027      	str	r7, [r4, #0]
		len = capacity = 0;
    19ea:	2300      	movs	r3, #0
}
    19ec:	4620      	mov	r0, r4
		len = capacity = 0;
    19ee:	e9c4 3301 	strd	r3, r3, [r4, #4]
}
    19f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (buffer) buffer[0] = 0;
    19f4:	6807      	ldr	r7, [r0, #0]
	strcpy(buffer, cstr);
    19f6:	4631      	mov	r1, r6
	len = length;
    19f8:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    19fa:	4638      	mov	r0, r7
    19fc:	f004 fe0e 	bl	661c <strcpy>
	return *this;
    1a00:	e7ec      	b.n	19dc <String::copy(char const*, unsigned int)+0x40>
    1a02:	bf00      	nop

00001a04 <String::operator=(String const&)>:
	rhs.len = 0;
}

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
    1a04:	4281      	cmp	r1, r0
    1a06:	d003      	beq.n	1a10 <String::operator=(String const&)+0xc>
	return copy(rhs.buffer, rhs.len);
    1a08:	688a      	ldr	r2, [r1, #8]
    1a0a:	6809      	ldr	r1, [r1, #0]
    1a0c:	f7ff bfc6 	b.w	199c <String::copy(char const*, unsigned int)>
}
    1a10:	4770      	bx	lr
    1a12:	bf00      	nop

00001a14 <String::operator=(String&&)>:

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
    1a14:	4288      	cmp	r0, r1
{
    1a16:	b538      	push	{r3, r4, r5, lr}
    1a18:	4605      	mov	r5, r0
	if (this != &rval) move(rval);
    1a1a:	d00e      	beq.n	1a3a <String::operator=(String&&)+0x26>
	if (buffer) free(buffer);
    1a1c:	6800      	ldr	r0, [r0, #0]
    1a1e:	460c      	mov	r4, r1
    1a20:	b108      	cbz	r0, 1a26 <String::operator=(String&&)+0x12>
    1a22:	f002 fb95 	bl	4150 <free>
	len = rhs.len;
    1a26:	68a0      	ldr	r0, [r4, #8]
	rhs.buffer = NULL;
    1a28:	2300      	movs	r3, #0
	capacity = rhs.capacity;
    1a2a:	e9d4 1200 	ldrd	r1, r2, [r4]
	len = rhs.len;
    1a2e:	60a8      	str	r0, [r5, #8]
	capacity = rhs.capacity;
    1a30:	e9c5 1200 	strd	r1, r2, [r5]
	rhs.capacity = 0;
    1a34:	e9c4 3300 	strd	r3, r3, [r4]
	rhs.len = 0;
    1a38:	60a3      	str	r3, [r4, #8]
	return *this;
}
    1a3a:	4628      	mov	r0, r5
    1a3c:	bd38      	pop	{r3, r4, r5, pc}
    1a3e:	bf00      	nop

00001a40 <String::operator=(char const*)>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
    1a40:	b538      	push	{r3, r4, r5, lr}
    1a42:	4605      	mov	r5, r0
	if (cstr) {
    1a44:	460c      	mov	r4, r1
    1a46:	b149      	cbz	r1, 1a5c <String::operator=(char const*)+0x1c>
		copy(cstr, strlen(cstr));
    1a48:	4608      	mov	r0, r1
    1a4a:	f004 fe59 	bl	6700 <strlen>
    1a4e:	4621      	mov	r1, r4
    1a50:	4602      	mov	r2, r0
    1a52:	4628      	mov	r0, r5
    1a54:	f7ff ffa2 	bl	199c <String::copy(char const*, unsigned int)>
	} else {
		len = 0;
	}
	return *this;
}
    1a58:	4628      	mov	r0, r5
    1a5a:	bd38      	pop	{r3, r4, r5, pc}
    1a5c:	4628      	mov	r0, r5
		len = 0;
    1a5e:	60a9      	str	r1, [r5, #8]
}
    1a60:	bd38      	pop	{r3, r4, r5, pc}
    1a62:	bf00      	nop

00001a64 <String::append(char const*, unsigned int)>:
{
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
    1a64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1a68:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    1a6a:	6800      	ldr	r0, [r0, #0]
{
    1a6c:	460d      	mov	r5, r1
    1a6e:	4616      	mov	r6, r2
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    1a70:	4288      	cmp	r0, r1
	unsigned int newlen = len + length;
    1a72:	68a3      	ldr	r3, [r4, #8]
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    1a74:	d809      	bhi.n	1a8a <String::append(char const*, unsigned int)+0x26>
    1a76:	18c2      	adds	r2, r0, r3
    1a78:	4291      	cmp	r1, r2
    1a7a:	d206      	bcs.n	1a8a <String::append(char const*, unsigned int)+0x26>
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
    1a7c:	1a0f      	subs	r7, r1, r0
		self = true;
    1a7e:	f04f 0901 	mov.w	r9, #1
	}
	if (length == 0 || !reserve(newlen)) return *this;
    1a82:	b936      	cbnz	r6, 1a92 <String::append(char const*, unsigned int)+0x2e>
		}
	else
		strcpy(buffer + len, cstr);
	len = newlen;
	return *this;
}
    1a84:	4620      	mov	r0, r4
    1a86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	bool self = false;
    1a8a:	f04f 0900 	mov.w	r9, #0
	if (length == 0 || !reserve(newlen)) return *this;
    1a8e:	2e00      	cmp	r6, #0
    1a90:	d0f8      	beq.n	1a84 <String::append(char const*, unsigned int)+0x20>
	unsigned int newlen = len + length;
    1a92:	eb03 0806 	add.w	r8, r3, r6
	if (capacity >= size) return 1;
    1a96:	6862      	ldr	r2, [r4, #4]
    1a98:	4590      	cmp	r8, r2
    1a9a:	d90c      	bls.n	1ab6 <String::append(char const*, unsigned int)+0x52>
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    1a9c:	f108 0101 	add.w	r1, r8, #1
    1aa0:	f002 fe1a 	bl	46d8 <realloc>
	if (newbuffer) {
    1aa4:	2800      	cmp	r0, #0
    1aa6:	d0ed      	beq.n	1a84 <String::append(char const*, unsigned int)+0x20>
		buffer = newbuffer;
    1aa8:	68a3      	ldr	r3, [r4, #8]
		capacity = maxStrLen;
    1aaa:	e9c4 0800 	strd	r0, r8, [r4]
		if (len == 0) buffer[0] = 0;
    1aae:	b913      	cbnz	r3, 1ab6 <String::append(char const*, unsigned int)+0x52>
    1ab0:	7003      	strb	r3, [r0, #0]
		memcpy(buffer + len, buffer+buffer_offset, length);
    1ab2:	6820      	ldr	r0, [r4, #0]
    1ab4:	68a3      	ldr	r3, [r4, #8]
	if ( self ) {
    1ab6:	f1b9 0f00 	cmp.w	r9, #0
    1aba:	d108      	bne.n	1ace <String::append(char const*, unsigned int)+0x6a>
		strcpy(buffer + len, cstr);
    1abc:	4629      	mov	r1, r5
    1abe:	4418      	add	r0, r3
    1ac0:	f004 fdac 	bl	661c <strcpy>
}
    1ac4:	4620      	mov	r0, r4
	len = newlen;
    1ac6:	f8c4 8008 	str.w	r8, [r4, #8]
}
    1aca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		memcpy(buffer + len, buffer+buffer_offset, length);
    1ace:	4632      	mov	r2, r6
    1ad0:	19c1      	adds	r1, r0, r7
    1ad2:	4418      	add	r0, r3
    1ad4:	f000 fc18 	bl	2308 <memcpy>
		buffer[newlen] = 0;
    1ad8:	6823      	ldr	r3, [r4, #0]
    1ada:	2200      	movs	r2, #0
    1adc:	f803 2008 	strb.w	r2, [r3, r8]
    1ae0:	e7f0      	b.n	1ac4 <String::append(char const*, unsigned int)+0x60>
    1ae2:	bf00      	nop

00001ae4 <String::append(char)>:
	if (cstr) append(cstr, strlen(cstr));
	return *this;
}

String & String::append(char c)
{
    1ae4:	b510      	push	{r4, lr}
    1ae6:	b082      	sub	sp, #8
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
    1ae8:	2300      	movs	r3, #0
{
    1aea:	4604      	mov	r4, r0
	append(buf, 1);
    1aec:	2201      	movs	r2, #1
	buf[0] = c;
    1aee:	f88d 1004 	strb.w	r1, [sp, #4]
	append(buf, 1);
    1af2:	a901      	add	r1, sp, #4
	buf[1] = 0;
    1af4:	f88d 3005 	strb.w	r3, [sp, #5]
	append(buf, 1);
    1af8:	f7ff ffb4 	bl	1a64 <String::append(char const*, unsigned int)>
	return *this;
}
    1afc:	4620      	mov	r0, r4
    1afe:	b002      	add	sp, #8
    1b00:	bd10      	pop	{r4, pc}
    1b02:	bf00      	nop

00001b04 <String::equals(char const*) const>:
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
	if (len == 0) return (cstr == NULL || *cstr == 0);
    1b04:	6882      	ldr	r2, [r0, #8]
{
    1b06:	b508      	push	{r3, lr}
    1b08:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
    1b0a:	b13a      	cbz	r2, 1b1c <String::equals(char const*) const+0x18>
	if (cstr == NULL) return buffer[0] == 0;
    1b0c:	b161      	cbz	r1, 1b28 <String::equals(char const*) const+0x24>
	return strcmp(buffer, cstr) == 0;
    1b0e:	6800      	ldr	r0, [r0, #0]
    1b10:	f004 fc1a 	bl	6348 <strcmp>
    1b14:	fab0 f080 	clz	r0, r0
    1b18:	0940      	lsrs	r0, r0, #5
}
    1b1a:	bd08      	pop	{r3, pc}
	if (len == 0) return (cstr == NULL || *cstr == 0);
    1b1c:	b131      	cbz	r1, 1b2c <String::equals(char const*) const+0x28>
	if (cstr == NULL) return buffer[0] == 0;
    1b1e:	7818      	ldrb	r0, [r3, #0]
    1b20:	fab0 f080 	clz	r0, r0
    1b24:	0940      	lsrs	r0, r0, #5
}
    1b26:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
    1b28:	6803      	ldr	r3, [r0, #0]
    1b2a:	e7f8      	b.n	1b1e <String::equals(char const*) const+0x1a>
    1b2c:	2001      	movs	r0, #1
}
    1b2e:	bd08      	pop	{r3, pc}

00001b30 <String::indexOf(char) const>:
	return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
{
	if (fromIndex >= len) return -1;
    1b30:	6883      	ldr	r3, [r0, #8]
    1b32:	b13b      	cbz	r3, 1b44 <String::indexOf(char) const+0x14>
{
    1b34:	b510      	push	{r4, lr}
	const char* temp = strchr(buffer + fromIndex, ch);
    1b36:	6804      	ldr	r4, [r0, #0]
    1b38:	4620      	mov	r0, r4
    1b3a:	f004 fa83 	bl	6044 <strchr>
	if (temp == NULL) return -1;
    1b3e:	b120      	cbz	r0, 1b4a <String::indexOf(char) const+0x1a>
	return temp - buffer;
    1b40:	1b00      	subs	r0, r0, r4
}
    1b42:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
    1b44:	f04f 30ff 	mov.w	r0, #4294967295
}
    1b48:	4770      	bx	lr
	if (fromIndex >= len) return -1;
    1b4a:	f04f 30ff 	mov.w	r0, #4294967295
}
    1b4e:	bd10      	pop	{r4, pc}

00001b50 <String::substring(unsigned int) const>:
	}
	return found;
}

String String::substring( unsigned int left ) const
{
    1b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return substring(left, len);
    1b54:	688f      	ldr	r7, [r1, #8]
{
    1b56:	460e      	mov	r6, r1
    1b58:	4605      	mov	r5, r0
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
    1b5a:	4297      	cmp	r7, r2
    1b5c:	d202      	bcs.n	1b64 <String::substring(unsigned int) const+0x14>
    1b5e:	4613      	mov	r3, r2
    1b60:	463a      	mov	r2, r7
    1b62:	461f      	mov	r7, r3
	buffer = NULL;
    1b64:	2300      	movs	r3, #0
	len = 0;
    1b66:	60ab      	str	r3, [r5, #8]
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
	if (left > len) return out;
    1b68:	68b0      	ldr	r0, [r6, #8]
    1b6a:	4290      	cmp	r0, r2
	capacity = 0;
    1b6c:	e9c5 3300 	strd	r3, r3, [r5]
	if (left > len) return out;
    1b70:	d314      	bcc.n	1b9c <String::substring(unsigned int) const+0x4c>
	if (right > len) right = len;
    1b72:	4287      	cmp	r7, r0
	char temp = buffer[right];  // save the replaced character
    1b74:	6831      	ldr	r1, [r6, #0]
    1b76:	bf28      	it	cs
    1b78:	4607      	movcs	r7, r0
    1b7a:	f811 8007 	ldrb.w	r8, [r1, r7]
	buffer[right] = '\0';	
    1b7e:	55cb      	strb	r3, [r1, r7]
	out = buffer + left;  // pointer arithmetic
    1b80:	6833      	ldr	r3, [r6, #0]
	if (cstr) {
    1b82:	189c      	adds	r4, r3, r2
    1b84:	d00d      	beq.n	1ba2 <String::substring(unsigned int) const+0x52>
		copy(cstr, strlen(cstr));
    1b86:	4620      	mov	r0, r4
    1b88:	f004 fdba 	bl	6700 <strlen>
    1b8c:	4621      	mov	r1, r4
    1b8e:	4602      	mov	r2, r0
    1b90:	4628      	mov	r0, r5
    1b92:	f7ff ff03 	bl	199c <String::copy(char const*, unsigned int)>
	buffer[right] = temp;  //restore character
    1b96:	6833      	ldr	r3, [r6, #0]
    1b98:	f803 8007 	strb.w	r8, [r3, r7]
}
    1b9c:	4628      	mov	r0, r5
    1b9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = 0;
    1ba2:	60ac      	str	r4, [r5, #8]
    1ba4:	e7f8      	b.n	1b98 <String::substring(unsigned int) const+0x48>
    1ba6:	bf00      	nop

00001ba8 <String::substring(unsigned int, unsigned int) const>:
	if (left > right) {
    1ba8:	429a      	cmp	r2, r3
{
    1baa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1bae:	4605      	mov	r5, r0
    1bb0:	460e      	mov	r6, r1
	if (left > right) {
    1bb2:	d902      	bls.n	1bba <String::substring(unsigned int, unsigned int) const+0x12>
    1bb4:	4611      	mov	r1, r2
    1bb6:	461a      	mov	r2, r3
    1bb8:	460b      	mov	r3, r1
	buffer = NULL;
    1bba:	2100      	movs	r1, #0
	len = 0;
    1bbc:	60a9      	str	r1, [r5, #8]
	if (left > len) return out;
    1bbe:	68b7      	ldr	r7, [r6, #8]
    1bc0:	4297      	cmp	r7, r2
	capacity = 0;
    1bc2:	e9c5 1100 	strd	r1, r1, [r5]
	if (left > len) return out;
    1bc6:	d314      	bcc.n	1bf2 <String::substring(unsigned int, unsigned int) const+0x4a>
	if (right > len) right = len;
    1bc8:	429f      	cmp	r7, r3
    1bca:	bf28      	it	cs
    1bcc:	461f      	movcs	r7, r3
	char temp = buffer[right];  // save the replaced character
    1bce:	6833      	ldr	r3, [r6, #0]
    1bd0:	f813 8007 	ldrb.w	r8, [r3, r7]
	buffer[right] = '\0';	
    1bd4:	55d9      	strb	r1, [r3, r7]
	out = buffer + left;  // pointer arithmetic
    1bd6:	6833      	ldr	r3, [r6, #0]
	if (cstr) {
    1bd8:	189c      	adds	r4, r3, r2
    1bda:	d00d      	beq.n	1bf8 <String::substring(unsigned int, unsigned int) const+0x50>
		copy(cstr, strlen(cstr));
    1bdc:	4620      	mov	r0, r4
    1bde:	f004 fd8f 	bl	6700 <strlen>
    1be2:	4621      	mov	r1, r4
    1be4:	4602      	mov	r2, r0
    1be6:	4628      	mov	r0, r5
    1be8:	f7ff fed8 	bl	199c <String::copy(char const*, unsigned int)>
	buffer[right] = temp;  //restore character
    1bec:	6833      	ldr	r3, [r6, #0]
    1bee:	f803 8007 	strb.w	r8, [r3, r7]
	return out;
}
    1bf2:	4628      	mov	r0, r5
    1bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = 0;
    1bf8:	60ac      	str	r4, [r5, #8]
    1bfa:	e7f8      	b.n	1bee <String::substring(unsigned int, unsigned int) const+0x46>

00001bfc <String::toUpperCase()>:
	}
	return *this;
}

String & String::toUpperCase(void)
{
    1bfc:	b538      	push	{r3, r4, r5, lr}
	if (!buffer) return *this;
    1bfe:	6804      	ldr	r4, [r0, #0]
{
    1c00:	4605      	mov	r5, r0
	if (!buffer) return *this;
    1c02:	b144      	cbz	r4, 1c16 <String::toUpperCase()+0x1a>
	for (char *p = buffer; *p; p++) {
    1c04:	7820      	ldrb	r0, [r4, #0]
    1c06:	b130      	cbz	r0, 1c16 <String::toUpperCase()+0x1a>
		*p = toupper(*p);
    1c08:	f003 ff4e 	bl	5aa8 <toupper>
    1c0c:	7020      	strb	r0, [r4, #0]
	for (char *p = buffer; *p; p++) {
    1c0e:	f814 0f01 	ldrb.w	r0, [r4, #1]!
    1c12:	2800      	cmp	r0, #0
    1c14:	d1f8      	bne.n	1c08 <String::toUpperCase()+0xc>
	}
	return *this;
}
    1c16:	4628      	mov	r0, r5
    1c18:	bd38      	pop	{r3, r4, r5, pc}
    1c1a:	bf00      	nop

00001c1c <String::trim()>:

String & String::trim(void)
{
    1c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!buffer || len == 0) return *this;
    1c20:	6807      	ldr	r7, [r0, #0]
{
    1c22:	4606      	mov	r6, r0
	if (!buffer || len == 0) return *this;
    1c24:	b1e7      	cbz	r7, 1c60 <String::trim()+0x44>
    1c26:	6884      	ldr	r4, [r0, #8]
    1c28:	b1d4      	cbz	r4, 1c60 <String::trim()+0x44>
    1c2a:	46b8      	mov	r8, r7
    1c2c:	4645      	mov	r5, r8
	char *begin = buffer;
	while (isspace(*begin)) begin++;
    1c2e:	f818 0b01 	ldrb.w	r0, [r8], #1
    1c32:	f003 ff31 	bl	5a98 <isspace>
    1c36:	2800      	cmp	r0, #0
    1c38:	d1f8      	bne.n	1c2c <String::trim()+0x10>
	char *end = buffer + len - 1;
    1c3a:	3c01      	subs	r4, #1
    1c3c:	443c      	add	r4, r7
	while (isspace(*end) && end >= begin) end--;
    1c3e:	e002      	b.n	1c46 <String::trim()+0x2a>
    1c40:	42a5      	cmp	r5, r4
    1c42:	d805      	bhi.n	1c50 <String::trim()+0x34>
    1c44:	3c01      	subs	r4, #1
    1c46:	7820      	ldrb	r0, [r4, #0]
    1c48:	f003 ff26 	bl	5a98 <isspace>
    1c4c:	2800      	cmp	r0, #0
    1c4e:	d1f7      	bne.n	1c40 <String::trim()+0x24>
	len = end + 1 - begin;
    1c50:	1c62      	adds	r2, r4, #1
	if (begin > buffer) memcpy(buffer, begin, len);
    1c52:	42af      	cmp	r7, r5
	len = end + 1 - begin;
    1c54:	eba2 0205 	sub.w	r2, r2, r5
    1c58:	60b2      	str	r2, [r6, #8]
	if (begin > buffer) memcpy(buffer, begin, len);
    1c5a:	d304      	bcc.n	1c66 <String::trim()+0x4a>
	buffer[len] = 0;
    1c5c:	2300      	movs	r3, #0
    1c5e:	54bb      	strb	r3, [r7, r2]
	return *this;
}
    1c60:	4630      	mov	r0, r6
    1c62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (begin > buffer) memcpy(buffer, begin, len);
    1c66:	4638      	mov	r0, r7
    1c68:	4629      	mov	r1, r5
    1c6a:	f000 fb4d 	bl	2308 <memcpy>
	buffer[len] = 0;
    1c6e:	6837      	ldr	r7, [r6, #0]
    1c70:	68b2      	ldr	r2, [r6, #8]
    1c72:	e7f3      	b.n	1c5c <String::trim()+0x40>

00001c74 <analogRead>:
	if (pin > sizeof(pin_to_channel)) return 0;
    1c74:	282a      	cmp	r0, #42	; 0x2a
    1c76:	d849      	bhi.n	1d0c <analogRead+0x98>
{
    1c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (calibrating) wait_for_cal();
    1c7a:	4f25      	ldr	r7, [pc, #148]	; (1d10 <analogRead+0x9c>)
    1c7c:	4604      	mov	r4, r0
    1c7e:	783b      	ldrb	r3, [r7, #0]
    1c80:	b9e3      	cbnz	r3, 1cbc <analogRead+0x48>
	uint8_t ch = pin_to_channel[pin];
    1c82:	4b24      	ldr	r3, [pc, #144]	; (1d14 <analogRead+0xa0>)
    1c84:	5d1b      	ldrb	r3, [r3, r4]
	if (ch == 255) return 0;
    1c86:	2bff      	cmp	r3, #255	; 0xff
    1c88:	d029      	beq.n	1cde <analogRead+0x6a>
	volatile uint32_t *pad = portControlRegister(pin);
    1c8a:	4a23      	ldr	r2, [pc, #140]	; (1d18 <analogRead+0xa4>)
    1c8c:	eb02 1204 	add.w	r2, r2, r4, lsl #4
    1c90:	6891      	ldr	r1, [r2, #8]
	uint32_t padval = *pad;
    1c92:	680a      	ldr	r2, [r1, #0]
	if ((padval & (IOMUXC_PAD_PUE | IOMUXC_PAD_PKE)) == IOMUXC_PAD_PKE) {
    1c94:	f402 5040 	and.w	r0, r2, #12288	; 0x3000
    1c98:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    1c9c:	d030      	beq.n	1d00 <analogRead+0x8c>
	if(!(ch & 0x80)) {
    1c9e:	061c      	lsls	r4, r3, #24
    1ca0:	d41f      	bmi.n	1ce2 <analogRead+0x6e>
		ADC1_HC0 = ch;
    1ca2:	4c1e      	ldr	r4, [pc, #120]	; (1d1c <analogRead+0xa8>)
    1ca4:	6023      	str	r3, [r4, #0]
		while (!(ADC1_HS & ADC_HS_COCO0)) {
    1ca6:	6a23      	ldr	r3, [r4, #32]
    1ca8:	07d8      	lsls	r0, r3, #31
    1caa:	d404      	bmi.n	1cb6 <analogRead+0x42>
			yield(); // TODO: what happens if yield-called code uses analogRead()
    1cac:	f001 fe32 	bl	3914 <yield>
		while (!(ADC1_HS & ADC_HS_COCO0)) {
    1cb0:	6a23      	ldr	r3, [r4, #32]
    1cb2:	07d9      	lsls	r1, r3, #31
    1cb4:	d5fa      	bpl.n	1cac <analogRead+0x38>
		return ADC1_R0;
    1cb6:	4b19      	ldr	r3, [pc, #100]	; (1d1c <analogRead+0xa8>)
    1cb8:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    1cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	while ((ADC1_GC & ADC_GC_CAL) || (ADC2_GC & ADC_GC_CAL)) {
    1cbc:	4d17      	ldr	r5, [pc, #92]	; (1d1c <analogRead+0xa8>)
    1cbe:	4e18      	ldr	r6, [pc, #96]	; (1d20 <analogRead+0xac>)
    1cc0:	e001      	b.n	1cc6 <analogRead+0x52>
		yield();
    1cc2:	f001 fe27 	bl	3914 <yield>
	while ((ADC1_GC & ADC_GC_CAL) || (ADC2_GC & ADC_GC_CAL)) {
    1cc6:	6cab      	ldr	r3, [r5, #72]	; 0x48
    1cc8:	061b      	lsls	r3, r3, #24
    1cca:	d4fa      	bmi.n	1cc2 <analogRead+0x4e>
    1ccc:	6cb3      	ldr	r3, [r6, #72]	; 0x48
    1cce:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    1cd2:	d1f6      	bne.n	1cc2 <analogRead+0x4e>
	calibrating = 0;
    1cd4:	703b      	strb	r3, [r7, #0]
	uint8_t ch = pin_to_channel[pin];
    1cd6:	4b0f      	ldr	r3, [pc, #60]	; (1d14 <analogRead+0xa0>)
    1cd8:	5d1b      	ldrb	r3, [r3, r4]
	if (ch == 255) return 0;
    1cda:	2bff      	cmp	r3, #255	; 0xff
    1cdc:	d1d5      	bne.n	1c8a <analogRead+0x16>
	if (pin > sizeof(pin_to_channel)) return 0;
    1cde:	2000      	movs	r0, #0
}
    1ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ADC2_HC0 = ch & 0x7f;
    1ce2:	4c0f      	ldr	r4, [pc, #60]	; (1d20 <analogRead+0xac>)
    1ce4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    1ce8:	6023      	str	r3, [r4, #0]
		while (!(ADC2_HS & ADC_HS_COCO0)) {
    1cea:	6a23      	ldr	r3, [r4, #32]
    1cec:	07da      	lsls	r2, r3, #31
    1cee:	d404      	bmi.n	1cfa <analogRead+0x86>
			yield(); // TODO: what happens if yield-called code uses analogRead()
    1cf0:	f001 fe10 	bl	3914 <yield>
		while (!(ADC2_HS & ADC_HS_COCO0)) {
    1cf4:	6a23      	ldr	r3, [r4, #32]
    1cf6:	07db      	lsls	r3, r3, #31
    1cf8:	d5fa      	bpl.n	1cf0 <analogRead+0x7c>
		return ADC2_R0;
    1cfa:	4b09      	ldr	r3, [pc, #36]	; (1d20 <analogRead+0xac>)
    1cfc:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    1cfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*pad = padval & ~IOMUXC_PAD_PKE;
    1d00:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
	if(!(ch & 0x80)) {
    1d04:	061c      	lsls	r4, r3, #24
		*pad = padval & ~IOMUXC_PAD_PKE;
    1d06:	600a      	str	r2, [r1, #0]
	if(!(ch & 0x80)) {
    1d08:	d4eb      	bmi.n	1ce2 <analogRead+0x6e>
    1d0a:	e7ca      	b.n	1ca2 <analogRead+0x2e>
	if (pin > sizeof(pin_to_channel)) return 0;
    1d0c:	2000      	movs	r0, #0
}
    1d0e:	4770      	bx	lr
    1d10:	200092ab 	.word	0x200092ab
    1d14:	2000788c 	.word	0x2000788c
    1d18:	20007380 	.word	0x20007380
    1d1c:	400c4000 	.word	0x400c4000
    1d20:	400c8000 	.word	0x400c8000

00001d24 <analogReadRes>:
   if (bits == 8) {
    1d24:	2808      	cmp	r0, #8
{
    1d26:	b430      	push	{r4, r5}
   if (bits == 8) {
    1d28:	d022      	beq.n	1d70 <analogReadRes+0x4c>
    mode = ADC_CFG_MODE(2) | ADC_CFG_ADSTS(3) | ADC_CFG_ADLSMP;
    1d2a:	280a      	cmp	r0, #10
    1d2c:	bf0c      	ite	eq
    1d2e:	f44f 7105 	moveq.w	r1, #532	; 0x214
    1d32:	f44f 7146 	movne.w	r1, #792	; 0x318
  tmp32  = (ADC1_CFG & (0xFFFFFC00));
    1d36:	4c10      	ldr	r4, [pc, #64]	; (1d78 <analogReadRes+0x54>)
    1d38:	4d10      	ldr	r5, [pc, #64]	; (1d7c <analogReadRes+0x58>)
    1d3a:	6c63      	ldr	r3, [r4, #68]	; 0x44
  tmp32 |= (ADC1_CFG & (0x03));  // ADICLK
    1d3c:	6c62      	ldr	r2, [r4, #68]	; 0x44
  tmp32  = (ADC1_CFG & (0xFFFFFC00));
    1d3e:	402b      	ands	r3, r5
  tmp32  = (ADC2_CFG & (0xFFFFFC00));
    1d40:	480f      	ldr	r0, [pc, #60]	; (1d80 <analogReadRes+0x5c>)
  tmp32 |= (ADC1_CFG & (0x03));  // ADICLK
    1d42:	f002 0203 	and.w	r2, r2, #3
    1d46:	431a      	orrs	r2, r3
  tmp32 |= (ADC1_CFG & (0xE0));  // ADIV & ADLPC
    1d48:	6c63      	ldr	r3, [r4, #68]	; 0x44
    1d4a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    1d4e:	4313      	orrs	r3, r2
  tmp32 |= mode; 
    1d50:	430b      	orrs	r3, r1
  ADC1_CFG = tmp32;
    1d52:	6463      	str	r3, [r4, #68]	; 0x44
  tmp32  = (ADC2_CFG & (0xFFFFFC00));
    1d54:	6c43      	ldr	r3, [r0, #68]	; 0x44
  tmp32 |= (ADC2_CFG & (0x03));  // ADICLK
    1d56:	6c42      	ldr	r2, [r0, #68]	; 0x44
  tmp32  = (ADC2_CFG & (0xFFFFFC00));
    1d58:	402b      	ands	r3, r5
  tmp32 |= (ADC2_CFG & (0x03));  // ADICLK
    1d5a:	f002 0203 	and.w	r2, r2, #3
    1d5e:	431a      	orrs	r2, r3
  tmp32 |= (ADC2_CFG & (0xE0));  // ADIV & ADLPC
    1d60:	6c43      	ldr	r3, [r0, #68]	; 0x44
    1d62:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    1d66:	4313      	orrs	r3, r2
  tmp32 |= mode; 
    1d68:	4319      	orrs	r1, r3
}
    1d6a:	bc30      	pop	{r4, r5}
  ADC2_CFG = tmp32;
    1d6c:	6441      	str	r1, [r0, #68]	; 0x44
}
    1d6e:	4770      	bx	lr
    mode = ADC_CFG_MODE(0) | ADC_CFG_ADSTS(3);
    1d70:	f44f 7140 	mov.w	r1, #768	; 0x300
    1d74:	e7df      	b.n	1d36 <analogReadRes+0x12>
    1d76:	bf00      	nop
    1d78:	400c4000 	.word	0x400c4000
    1d7c:	fffffc00 	.word	0xfffffc00
    1d80:	400c8000 	.word	0x400c8000

00001d84 <analogReadAveraging>:
{
    1d84:	b410      	push	{r4}
  ADC1_GC &= ~0x20;
    1d86:	4c1f      	ldr	r4, [pc, #124]	; (1e04 <analogReadAveraging+0x80>)
    if (num >= 32) {
    1d88:	281f      	cmp	r0, #31
  ADC2_GC &= ~0x20;
    1d8a:	491f      	ldr	r1, [pc, #124]	; (1e08 <analogReadAveraging+0x84>)
  ADC1_GC &= ~0x20;
    1d8c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    1d8e:	f023 0320 	bic.w	r3, r3, #32
    1d92:	64a3      	str	r3, [r4, #72]	; 0x48
  mode = ADC1_CFG & ~0xC000;
    1d94:	6c62      	ldr	r2, [r4, #68]	; 0x44
  ADC2_GC &= ~0x20;
    1d96:	6c8b      	ldr	r3, [r1, #72]	; 0x48
  mode = ADC1_CFG & ~0xC000;
    1d98:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
  ADC2_GC &= ~0x20;
    1d9c:	f023 0320 	bic.w	r3, r3, #32
    1da0:	648b      	str	r3, [r1, #72]	; 0x48
  mode1 = ADC2_CFG & ~0xC000;
    1da2:	6c4b      	ldr	r3, [r1, #68]	; 0x44
    1da4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
    if (num >= 32) {
    1da8:	d912      	bls.n	1dd0 <analogReadAveraging+0x4c>
      mode |= ADC_CFG_AVGS(3);
    1daa:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
      mode1 |= ADC_CFG_AVGS(3);
    1dae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
  ADC1_CFG = mode;
    1db2:	6462      	str	r2, [r4, #68]	; 0x44
  ADC2_CFG = mode1;
    1db4:	644b      	str	r3, [r1, #68]	; 0x44
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
    1db6:	4913      	ldr	r1, [pc, #76]	; (1e04 <analogReadAveraging+0x80>)
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
    1db8:	4a13      	ldr	r2, [pc, #76]	; (1e08 <analogReadAveraging+0x84>)
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
    1dba:	6c8b      	ldr	r3, [r1, #72]	; 0x48
}
    1dbc:	f85d 4b04 	ldr.w	r4, [sp], #4
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
    1dc0:	f043 0320 	orr.w	r3, r3, #32
    1dc4:	648b      	str	r3, [r1, #72]	; 0x48
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
    1dc6:	6c93      	ldr	r3, [r2, #72]	; 0x48
    1dc8:	f043 0320 	orr.w	r3, r3, #32
    1dcc:	6493      	str	r3, [r2, #72]	; 0x48
}
    1dce:	4770      	bx	lr
    } else if (num >= 16) {
    1dd0:	280f      	cmp	r0, #15
    1dd2:	d908      	bls.n	1de6 <analogReadAveraging+0x62>
      mode |= ADC_CFG_AVGS(2);
    1dd4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
      mode1 |= ADC_CFG_AVGS(2);
    1dd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  ADC1_CFG = mode;
    1ddc:	4809      	ldr	r0, [pc, #36]	; (1e04 <analogReadAveraging+0x80>)
  ADC2_CFG = mode1;
    1dde:	490a      	ldr	r1, [pc, #40]	; (1e08 <analogReadAveraging+0x84>)
  ADC1_CFG = mode;
    1de0:	6442      	str	r2, [r0, #68]	; 0x44
  ADC2_CFG = mode1;
    1de2:	644b      	str	r3, [r1, #68]	; 0x44
  if(num >= 4){
    1de4:	e7e7      	b.n	1db6 <analogReadAveraging+0x32>
    } else if (num >= 8) {
    1de6:	2807      	cmp	r0, #7
    1de8:	d904      	bls.n	1df4 <analogReadAveraging+0x70>
      mode |= ADC_CFG_AVGS(1);
    1dea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
      mode1 |= ADC_CFG_AVGS(1);
    1dee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1df2:	e7f3      	b.n	1ddc <analogReadAveraging+0x58>
  if(num >= 4){
    1df4:	2803      	cmp	r0, #3
  ADC1_CFG = mode;
    1df6:	6462      	str	r2, [r4, #68]	; 0x44
  ADC2_CFG = mode1;
    1df8:	644b      	str	r3, [r1, #68]	; 0x44
  if(num >= 4){
    1dfa:	d8dc      	bhi.n	1db6 <analogReadAveraging+0x32>
}
    1dfc:	f85d 4b04 	ldr.w	r4, [sp], #4
    1e00:	4770      	bx	lr
    1e02:	bf00      	nop
    1e04:	400c4000 	.word	0x400c4000
    1e08:	400c8000 	.word	0x400c8000

00001e0c <delay>:
// or delayNanoseconds().
void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    1e0c:	b900      	cbnz	r0, 1e10 <delay+0x4>
    1e0e:	4770      	bx	lr
{
    1e10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    1e14:	2101      	movs	r1, #1
    1e16:	4681      	mov	r9, r0
    1e18:	4c21      	ldr	r4, [pc, #132]	; (1ea0 <delay+0x94>)
    1e1a:	4d22      	ldr	r5, [pc, #136]	; (1ea4 <delay+0x98>)
    1e1c:	4e22      	ldr	r6, [pc, #136]	; (1ea8 <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    1e1e:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    1e22:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    1e24:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    1e26:	e844 1300 	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    1e2a:	2b00      	cmp	r3, #0
    1e2c:	d1f7      	bne.n	1e1e <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    1e2e:	491f      	ldr	r1, [pc, #124]	; (1eac <delay+0xa0>)
    1e30:	684b      	ldr	r3, [r1, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    1e32:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1e36:	f8df a078 	ldr.w	sl, [pc, #120]	; 1eb0 <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
    1e3a:	1a1b      	subs	r3, r3, r0
    1e3c:	2701      	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
    1e3e:	fb0b f802 	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1e42:	f8da 2000 	ldr.w	r2, [sl]
    1e46:	fba3 3202 	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
    1e4a:	455a      	cmp	r2, fp
    1e4c:	bf94      	ite	ls
    1e4e:	4490      	addls	r8, r2
    1e50:	44d8      	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    1e52:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    1e56:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    1e58:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    1e5a:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    1e5e:	2b00      	cmp	r3, #0
    1e60:	d1f7      	bne.n	1e52 <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    1e62:	684b      	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1e64:	f8da c000 	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
    1e68:	1a1b      	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
    1e6a:	fb0b f202 	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1e6e:	fba3 3c0c 	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
    1e72:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
    1e76:	bf94      	ite	ls
    1e78:	4462      	addls	r2, ip
    1e7a:	f502 727a 	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
    1e7e:	eba2 0208 	sub.w	r2, r2, r8
    1e82:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
    1e86:	d306      	bcc.n	1e96 <delay+0x8a>
			if (--msec == 0) return;
    1e88:	f1b9 0901 	subs.w	r9, r9, #1
			start += 1000;
    1e8c:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
    1e90:	d1df      	bne.n	1e52 <delay+0x46>
}
    1e92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
    1e96:	f001 fd3d 	bl	3914 <yield>
		while ((micros() - start) >= 1000) {
    1e9a:	4904      	ldr	r1, [pc, #16]	; (1eac <delay+0xa0>)
    1e9c:	e7d9      	b.n	1e52 <delay+0x46>
    1e9e:	bf00      	nop
    1ea0:	20009280 	.word	0x20009280
    1ea4:	2000927c 	.word	0x2000927c
    1ea8:	20009278 	.word	0x20009278
    1eac:	e0001000 	.word	0xe0001000
    1eb0:	20009274 	.word	0x20009274

00001eb4 <micros>:
{
    1eb4:	b430      	push	{r4, r5}
    1eb6:	4b0f      	ldr	r3, [pc, #60]	; (1ef4 <micros+0x40>)
    1eb8:	f04f 0c01 	mov.w	ip, #1
    1ebc:	4d0e      	ldr	r5, [pc, #56]	; (1ef8 <micros+0x44>)
    1ebe:	4c0f      	ldr	r4, [pc, #60]	; (1efc <micros+0x48>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    1ec0:	e853 2f00 	ldrex	r2, [r3]
		smc = systick_millis_count;
    1ec4:	6828      	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    1ec6:	6821      	ldr	r1, [r4, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    1ec8:	e843 c200 	strex	r2, ip, [r3]
	} while ( __STREXW(1, &systick_safe_read));
    1ecc:	2a00      	cmp	r2, #0
    1ece:	d1f7      	bne.n	1ec0 <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    1ed0:	4b0b      	ldr	r3, [pc, #44]	; (1f00 <micros+0x4c>)
    1ed2:	685b      	ldr	r3, [r3, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1ed4:	4a0b      	ldr	r2, [pc, #44]	; (1f04 <micros+0x50>)
	uint32_t ccdelta = cyccnt - scc;
    1ed6:	1a5b      	subs	r3, r3, r1
	uint32_t usec = 1000*smc + frac;
    1ed8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1edc:	6812      	ldr	r2, [r2, #0]
	uint32_t usec = 1000*smc + frac;
    1ede:	fb01 f000 	mul.w	r0, r1, r0
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1ee2:	fba3 3202 	umull	r3, r2, r3, r2
	return usec;
}
    1ee6:	bc30      	pop	{r4, r5}
    1ee8:	428a      	cmp	r2, r1
    1eea:	bf94      	ite	ls
    1eec:	1880      	addls	r0, r0, r2
    1eee:	1840      	addhi	r0, r0, r1
    1ef0:	4770      	bx	lr
    1ef2:	bf00      	nop
    1ef4:	20009280 	.word	0x20009280
    1ef8:	2000927c 	.word	0x2000927c
    1efc:	20009278 	.word	0x20009278
    1f00:	e0001000 	.word	0xe0001000
    1f04:	20009274 	.word	0x20009274

00001f08 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    1f08:	2836      	cmp	r0, #54	; 0x36
    1f0a:	d816      	bhi.n	1f3a <digitalWrite+0x32>
	p = digital_pin_to_info_PGM + pin;
    1f0c:	0102      	lsls	r2, r0, #4
    1f0e:	4b10      	ldr	r3, [pc, #64]	; (1f50 <digitalWrite+0x48>)
    1f10:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
    1f14:	589b      	ldr	r3, [r3, r2]
{
    1f16:	b410      	push	{r4}
	mask = p->mask;
    1f18:	68c2      	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
    1f1a:	685c      	ldr	r4, [r3, #4]
	if (pinmode & mask) {
    1f1c:	4214      	tst	r4, r2
    1f1e:	d005      	beq.n	1f2c <digitalWrite+0x24>
		// pin is configured for output mode
		if (val) {
    1f20:	b961      	cbnz	r1, 1f3c <digitalWrite+0x34>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    1f22:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x22) = mask; // clear register
    1f26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
    1f2a:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    1f2c:	6883      	ldr	r3, [r0, #8]
		if (val) {
    1f2e:	b151      	cbz	r1, 1f46 <digitalWrite+0x3e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    1f30:	4a08      	ldr	r2, [pc, #32]	; (1f54 <digitalWrite+0x4c>)
}
    1f32:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    1f36:	601a      	str	r2, [r3, #0]
}
    1f38:	4770      	bx	lr
    1f3a:	4770      	bx	lr
    1f3c:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x21) = mask; // set register
    1f40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    1f44:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    1f46:	4a04      	ldr	r2, [pc, #16]	; (1f58 <digitalWrite+0x50>)
}
    1f48:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    1f4c:	601a      	str	r2, [r3, #0]
}
    1f4e:	4770      	bx	lr
    1f50:	20007380 	.word	0x20007380
    1f54:	0001f038 	.word	0x0001f038
    1f58:	00013038 	.word	0x00013038

00001f5c <digitalRead>:

uint8_t digitalRead(uint8_t pin)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return 0;
    1f5c:	2836      	cmp	r0, #54	; 0x36
    1f5e:	d80b      	bhi.n	1f78 <digitalRead+0x1c>
	p = digital_pin_to_info_PGM + pin;
    1f60:	4b06      	ldr	r3, [pc, #24]	; (1f7c <digitalRead+0x20>)
    1f62:	0102      	lsls	r2, r0, #4
    1f64:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
    1f68:	589a      	ldr	r2, [r3, r2]
    1f6a:	68c3      	ldr	r3, [r0, #12]
    1f6c:	6892      	ldr	r2, [r2, #8]
    1f6e:	421a      	tst	r2, r3
    1f70:	bf14      	ite	ne
    1f72:	2001      	movne	r0, #1
    1f74:	2000      	moveq	r0, #0
    1f76:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return 0;
    1f78:	2000      	movs	r0, #0
}
    1f7a:	4770      	bx	lr
    1f7c:	20007380 	.word	0x20007380

00001f80 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    1f80:	2836      	cmp	r0, #54	; 0x36
    1f82:	d829      	bhi.n	1fd8 <pinMode+0x58>
	p = digital_pin_to_info_PGM + pin;
    1f84:	4b16      	ldr	r3, [pc, #88]	; (1fe0 <pinMode+0x60>)
    1f86:	0102      	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    1f88:	2901      	cmp	r1, #1
	p = digital_pin_to_info_PGM + pin;
    1f8a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    1f8e:	589a      	ldr	r2, [r3, r2]
{
    1f90:	b410      	push	{r4}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    1f92:	6853      	ldr	r3, [r2, #4]
    1f94:	68c4      	ldr	r4, [r0, #12]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    1f96:	d00e      	beq.n	1fb6 <pinMode+0x36>
    1f98:	2904      	cmp	r1, #4
    1f9a:	d00c      	beq.n	1fb6 <pinMode+0x36>
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    1f9c:	ea23 0304 	bic.w	r3, r3, r4
    1fa0:	6053      	str	r3, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    1fa2:	6883      	ldr	r3, [r0, #8]
		if (mode == INPUT) {
    1fa4:	b1a9      	cbz	r1, 1fd2 <pinMode+0x52>
		} else if (mode == INPUT_PULLUP) {
    1fa6:	2902      	cmp	r1, #2
    1fa8:	d017      	beq.n	1fda <pinMode+0x5a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    1faa:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    1fac:	bf0c      	ite	eq
    1fae:	4a0d      	ldreq	r2, [pc, #52]	; (1fe4 <pinMode+0x64>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    1fb0:	4a0d      	ldrne	r2, [pc, #52]	; (1fe8 <pinMode+0x68>)
    1fb2:	601a      	str	r2, [r3, #0]
    1fb4:	e007      	b.n	1fc6 <pinMode+0x46>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    1fb6:	4323      	orrs	r3, r4
		if (mode == OUTPUT) {
    1fb8:	2901      	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
    1fba:	6053      	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
    1fbc:	6883      	ldr	r3, [r0, #8]
		if (mode == OUTPUT) {
    1fbe:	d008      	beq.n	1fd2 <pinMode+0x52>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    1fc0:	f640 0238 	movw	r2, #2104	; 0x838
    1fc4:	601a      	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    1fc6:	6843      	ldr	r3, [r0, #4]
    1fc8:	2215      	movs	r2, #21
}
    1fca:	f85d 4b04 	ldr.w	r4, [sp], #4
	*(p->mux) = 5 | 0x10;
    1fce:	601a      	str	r2, [r3, #0]
}
    1fd0:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7);
    1fd2:	2238      	movs	r2, #56	; 0x38
    1fd4:	601a      	str	r2, [r3, #0]
    1fd6:	e7f6      	b.n	1fc6 <pinMode+0x46>
    1fd8:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    1fda:	4a04      	ldr	r2, [pc, #16]	; (1fec <pinMode+0x6c>)
    1fdc:	601a      	str	r2, [r3, #0]
    1fde:	e7f2      	b.n	1fc6 <pinMode+0x46>
    1fe0:	20007380 	.word	0x20007380
    1fe4:	00013038 	.word	0x00013038
    1fe8:	00010038 	.word	0x00010038
    1fec:	0001f038 	.word	0x0001f038

00001ff0 <flash_wait>:
#define WRITE_SDR       FLEXSPI_LUT_OPCODE_WRITE_SDR
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

static void flash_wait()
{
    1ff0:	b430      	push	{r4, r5}
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    1ff2:	4a12      	ldr	r2, [pc, #72]	; (203c <flash_wait+0x4c>)
	FLEXSPI_LUT61 = 0;
    1ff4:	2000      	movs	r0, #0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    1ff6:	4b12      	ldr	r3, [pc, #72]	; (2040 <flash_wait+0x50>)
	uint8_t status;
	do {
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
    1ff8:	2101      	movs	r1, #1
		FLEXSPI_IPCR0 = 0;
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
    1ffa:	4d12      	ldr	r5, [pc, #72]	; (2044 <flash_wait+0x54>)
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {;}
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
		asm("":::"memory");
		status = *(uint8_t *)&FLEXSPI_RFDR0;
    1ffc:	4c12      	ldr	r4, [pc, #72]	; (2048 <flash_wait+0x58>)
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    1ffe:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
	FLEXSPI_LUT61 = 0;
    2002:	f8c2 02f4 	str.w	r0, [r2, #756]	; 0x2f4
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
    2006:	f8c2 10b8 	str.w	r1, [r2, #184]	; 0xb8
		FLEXSPI_IPCR0 = 0;
    200a:	f8c2 00a0 	str.w	r0, [r2, #160]	; 0xa0
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
    200e:	f8c2 50a4 	str.w	r5, [r2, #164]	; 0xa4
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    2012:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {;}
    2016:	6953      	ldr	r3, [r2, #20]
    2018:	07db      	lsls	r3, r3, #31
    201a:	d5fc      	bpl.n	2016 <flash_wait+0x26>
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    201c:	6151      	str	r1, [r2, #20]
	} while (status & 1);
    201e:	7823      	ldrb	r3, [r4, #0]
    2020:	07db      	lsls	r3, r3, #31
    2022:	d4f0      	bmi.n	2006 <flash_wait+0x16>
	FLEXSPI_MCR0 |= FLEXSPI_MCR0_SWRESET; // purge stale data from FlexSPI's AHB FIFO
    2024:	6813      	ldr	r3, [r2, #0]
	while (FLEXSPI_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
    2026:	4905      	ldr	r1, [pc, #20]	; (203c <flash_wait+0x4c>)
	FLEXSPI_MCR0 |= FLEXSPI_MCR0_SWRESET; // purge stale data from FlexSPI's AHB FIFO
    2028:	f043 0301 	orr.w	r3, r3, #1
    202c:	6013      	str	r3, [r2, #0]
	while (FLEXSPI_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
    202e:	680b      	ldr	r3, [r1, #0]
    2030:	07db      	lsls	r3, r3, #31
    2032:	d4fc      	bmi.n	202e <flash_wait+0x3e>
	__enable_irq();
    2034:	b662      	cpsie	i
}
    2036:	bc30      	pop	{r4, r5}
    2038:	4770      	bx	lr
    203a:	bf00      	nop
    203c:	402a8000 	.word	0x402a8000
    2040:	24010405 	.word	0x24010405
    2044:	000f0001 	.word	0x000f0001
    2048:	402a8100 	.word	0x402a8100

0000204c <eepromemu_flash_write>:

// write bytes into flash memory (which is already erased to 0xFF)
void eepromemu_flash_write(void *addr, const void *data, uint32_t len)
{
    204c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    204e:	460f      	mov	r7, r1
    2050:	4616      	mov	r6, r2
	__disable_irq();
    2052:	b672      	cpsid	i
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    2054:	4b34      	ldr	r3, [pc, #208]	; (2128 <eepromemu_flash_write+0xdc>)
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	FLEXSPI_IPCR0 = 0;
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    2056:	f240 4106 	movw	r1, #1030	; 0x406
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    205a:	4a34      	ldr	r2, [pc, #208]	; (212c <eepromemu_flash_write+0xe0>)
    205c:	619a      	str	r2, [r3, #24]
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    205e:	2202      	movs	r2, #2
    2060:	61da      	str	r2, [r3, #28]
	FLEXSPI_IPCR0 = 0;
    2062:	2200      	movs	r2, #0
    2064:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    2068:	f8c3 12f0 	str.w	r1, [r3, #752]	; 0x2f0
	FLEXSPI_LUT61 = 0;
    206c:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
	FLEXSPI_LUT62 = 0;
    2070:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
	FLEXSPI_LUT63 = 0;
    2074:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    2078:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    207c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    2080:	2201      	movs	r2, #1
    2082:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    2086:	f020 031f 	bic.w	r3, r0, #31
	uint32_t end_addr = (uint32_t)addr + size;
    208a:	1982      	adds	r2, r0, r6
	asm volatile("": : :"memory");
	asm("dsb");
    208c:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    2090:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    2094:	f8c4 3f5c 	str.w	r3, [r4, #3932]	; 0xf5c
		location += 32;
    2098:	3320      	adds	r3, #32
	} while (location < end_addr);
    209a:	429a      	cmp	r2, r3
    209c:	d8fa      	bhi.n	2094 <eepromemu_flash_write+0x48>
	asm("dsb");
    209e:	f3bf 8f4f 	dsb	sy
	asm("isb");
    20a2:	f3bf 8f6f 	isb	sy
	arm_dcache_delete(addr, len); // purge old data from ARM's cache
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    20a6:	4d20      	ldr	r5, [pc, #128]	; (2128 <eepromemu_flash_write+0xdc>)
    20a8:	696b      	ldr	r3, [r5, #20]
    20aa:	07da      	lsls	r2, r3, #31
    20ac:	d5fc      	bpl.n	20a8 <eepromemu_flash_write+0x5c>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    20ae:	2301      	movs	r3, #1
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
    20b0:	491f      	ldr	r1, [pc, #124]	; (2130 <eepromemu_flash_write+0xe4>)
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFFFFF;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    20b2:	b2b2      	uxth	r2, r6
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFFFFF;
    20b4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    20b8:	616b      	str	r3, [r5, #20]
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    20ba:	f442 2270 	orr.w	r2, r2, #983040	; 0xf0000
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
    20be:	f8c5 12f0 	str.w	r1, [r5, #752]	; 0x2f0
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
    20c2:	f242 2101 	movw	r1, #8705	; 0x2201
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	const uint8_t *src = (const uint8_t *)data;
	uint32_t n;
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    20c6:	4c18      	ldr	r4, [pc, #96]	; (2128 <eepromemu_flash_write+0xdc>)
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
    20c8:	f8c5 12f4 	str.w	r1, [r5, #756]	; 0x2f4
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
    20cc:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFFFFF;
    20d0:	f8c5 00a0 	str.w	r0, [r5, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    20d4:	f8c5 20a4 	str.w	r2, [r5, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    20d8:	f8c5 30b0 	str.w	r3, [r5, #176]	; 0xb0
		if (n & FLEXSPI_INTR_IPTXWE) {
			uint32_t wrlen = len;
			if (wrlen > 8) wrlen = 8;
			if (wrlen > 0) {
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    20dc:	4d15      	ldr	r5, [pc, #84]	; (2134 <eepromemu_flash_write+0xe8>)
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    20de:	e001      	b.n	20e4 <eepromemu_flash_write+0x98>
		if (n & FLEXSPI_INTR_IPTXWE) {
    20e0:	065b      	lsls	r3, r3, #25
    20e2:	d409      	bmi.n	20f8 <eepromemu_flash_write+0xac>
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    20e4:	6963      	ldr	r3, [r4, #20]
    20e6:	f013 0001 	ands.w	r0, r3, #1
    20ea:	d0f9      	beq.n	20e0 <eepromemu_flash_write+0x94>
				len -= wrlen;
			}
			FLEXSPI_INTR = FLEXSPI_INTR_IPTXWE;
		}
	}
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPTXWE;
    20ec:	2341      	movs	r3, #65	; 0x41
    20ee:	6163      	str	r3, [r4, #20]
	flash_wait();
}
    20f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	flash_wait();
    20f4:	f7ff bf7c 	b.w	1ff0 <flash_wait>
			if (wrlen > 8) wrlen = 8;
    20f8:	2e08      	cmp	r6, #8
    20fa:	d80a      	bhi.n	2112 <eepromemu_flash_write+0xc6>
			if (wrlen > 0) {
    20fc:	b136      	cbz	r6, 210c <eepromemu_flash_write+0xc0>
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    20fe:	4632      	mov	r2, r6
    2100:	4639      	mov	r1, r7
				src += wrlen;
    2102:	4437      	add	r7, r6
				len -= wrlen;
    2104:	4606      	mov	r6, r0
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    2106:	4628      	mov	r0, r5
    2108:	f000 f8fe 	bl	2308 <memcpy>
			FLEXSPI_INTR = FLEXSPI_INTR_IPTXWE;
    210c:	2340      	movs	r3, #64	; 0x40
    210e:	6163      	str	r3, [r4, #20]
    2110:	e7e8      	b.n	20e4 <eepromemu_flash_write+0x98>
    2112:	f1a6 0008 	sub.w	r0, r6, #8
			if (wrlen > 8) wrlen = 8;
    2116:	2608      	movs	r6, #8
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    2118:	4639      	mov	r1, r7
    211a:	4632      	mov	r2, r6
				src += wrlen;
    211c:	4437      	add	r7, r6
				len -= wrlen;
    211e:	4606      	mov	r6, r0
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    2120:	4628      	mov	r0, r5
    2122:	f000 f8f1 	bl	2308 <memcpy>
				len -= wrlen;
    2126:	e7f1      	b.n	210c <eepromemu_flash_write+0xc0>
    2128:	402a8000 	.word	0x402a8000
    212c:	5af05af0 	.word	0x5af05af0
    2130:	08180432 	.word	0x08180432
    2134:	402a8180 	.word	0x402a8180

00002138 <eepromemu_flash_erase_sector>:

// erase a 4K sector
void eepromemu_flash_erase_sector(void *addr)
{
    2138:	b410      	push	{r4}
	__disable_irq();
    213a:	b672      	cpsid	i
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    213c:	4b28      	ldr	r3, [pc, #160]	; (21e0 <eepromemu_flash_erase_sector+0xa8>)
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    213e:	2102      	movs	r1, #2
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    2140:	4c28      	ldr	r4, [pc, #160]	; (21e4 <eepromemu_flash_erase_sector+0xac>)
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
	FLEXSPI_LUT61 = 0;
    2142:	2200      	movs	r2, #0
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    2144:	619c      	str	r4, [r3, #24]
	FLEXSPI_LUT62 = 0;
	FLEXSPI_LUT63 = 0;
	FLEXSPI_IPCR0 = 0;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    2146:	f44f 2470 	mov.w	r4, #983040	; 0xf0000
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    214a:	61d9      	str	r1, [r3, #28]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    214c:	f240 4106 	movw	r1, #1030	; 0x406
    2150:	f8c3 12f0 	str.w	r1, [r3, #752]	; 0x2f0
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    2154:	2101      	movs	r1, #1
	FLEXSPI_LUT61 = 0;
    2156:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
	FLEXSPI_LUT62 = 0;
    215a:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
	FLEXSPI_LUT63 = 0;
    215e:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
	FLEXSPI_IPCR0 = 0;
    2162:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arm_dcache_delete((void *)((uint32_t)addr & 0xFFFFF000), 4096); // purge data from cache
    2166:	f5a2 5280 	sub.w	r2, r2, #4096	; 0x1000
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    216a:	f8c3 40a4 	str.w	r4, [r3, #164]	; 0xa4
	arm_dcache_delete((void *)((uint32_t)addr & 0xFFFFF000), 4096); // purge data from cache
    216e:	4002      	ands	r2, r0
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    2170:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
	asm("dsb");
    2174:	f3bf 8f4f 	dsb	sy
	uint32_t end_addr = (uint32_t)addr + size;
    2178:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
    217c:	f102 0320 	add.w	r3, r2, #32
		SCB_CACHE_DCIMVAC = location;
    2180:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    2184:	4299      	cmp	r1, r3
    2186:	bf34      	ite	cc
    2188:	2101      	movcc	r1, #1
    218a:	2180      	movcs	r1, #128	; 0x80
    218c:	eb02 1141 	add.w	r1, r2, r1, lsl #5
	} while (location < end_addr);
    2190:	428b      	cmp	r3, r1
		SCB_CACHE_DCIMVAC = location;
    2192:	f8cc 2f5c 	str.w	r2, [ip, #3932]	; 0xf5c
		location += 32;
    2196:	461a      	mov	r2, r3
	} while (location < end_addr);
    2198:	f103 0320 	add.w	r3, r3, #32
    219c:	d1f8      	bne.n	2190 <eepromemu_flash_erase_sector+0x58>
	asm("dsb");
    219e:	f3bf 8f4f 	dsb	sy
	asm("isb");
    21a2:	f3bf 8f6f 	isb	sy
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    21a6:	4a0e      	ldr	r2, [pc, #56]	; (21e0 <eepromemu_flash_erase_sector+0xa8>)
    21a8:	6953      	ldr	r3, [r2, #20]
    21aa:	07d9      	lsls	r1, r3, #31
    21ac:	d5fc      	bpl.n	21a8 <eepromemu_flash_erase_sector+0x70>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    21ae:	2401      	movs	r4, #1
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
    21b0:	490d      	ldr	r1, [pc, #52]	; (21e8 <eepromemu_flash_erase_sector+0xb0>)
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFF000;
    21b2:	4b0e      	ldr	r3, [pc, #56]	; (21ec <eepromemu_flash_erase_sector+0xb4>)
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    21b4:	6154      	str	r4, [r2, #20]
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFF000;
    21b6:	4003      	ands	r3, r0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
    21b8:	f8c2 12f0 	str.w	r1, [r2, #752]	; 0x2f0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    21bc:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    21c0:	4907      	ldr	r1, [pc, #28]	; (21e0 <eepromemu_flash_erase_sector+0xa8>)
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFF000;
    21c2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    21c6:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    21ca:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    21ce:	694b      	ldr	r3, [r1, #20]
    21d0:	07db      	lsls	r3, r3, #31
    21d2:	d5fc      	bpl.n	21ce <eepromemu_flash_erase_sector+0x96>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    21d4:	2301      	movs	r3, #1
	flash_wait();
}
    21d6:	f85d 4b04 	ldr.w	r4, [sp], #4
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    21da:	614b      	str	r3, [r1, #20]
	flash_wait();
    21dc:	f7ff bf08 	b.w	1ff0 <flash_wait>
    21e0:	402a8000 	.word	0x402a8000
    21e4:	5af05af0 	.word	0x5af05af0
    21e8:	08180420 	.word	0x08180420
    21ec:	00fff000 	.word	0x00fff000

000021f0 <dummy_isr>:
static void dummy_isr() {};
    21f0:	4770      	bx	lr
    21f2:	bf00      	nop

000021f4 <attachInterrupt>:

#endif

void attachInterrupt(uint8_t pin, void (*function)(void), int mode)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    21f4:	2836      	cmp	r0, #54	; 0x36
    21f6:	d858      	bhi.n	22aa <attachInterrupt+0xb6>
	//printf("attachInterrupt, pin=%u\n", pin);
	volatile uint32_t *gpio = portOutputRegister(pin);
    21f8:	0100      	lsls	r0, r0, #4
{
    21fa:	b4f0      	push	{r4, r5, r6, r7}
	volatile uint32_t *gpio = portOutputRegister(pin);
    21fc:	4c34      	ldr	r4, [pc, #208]	; (22d0 <attachInterrupt+0xdc>)

	voidFuncPtr *table;

#if defined(__IMXRT1062__)

	switch((uint32_t)gpio) {
    21fe:	4d35      	ldr	r5, [pc, #212]	; (22d4 <attachInterrupt+0xe0>)
	volatile uint32_t *gpio = portOutputRegister(pin);
    2200:	5823      	ldr	r3, [r4, r0]
	switch((uint32_t)gpio) {
    2202:	42ab      	cmp	r3, r5
    2204:	d056      	beq.n	22b4 <attachInterrupt+0xc0>
    2206:	d849      	bhi.n	229c <attachInterrupt+0xa8>
    2208:	f1b3 4f84 	cmp.w	r3, #1107296256	; 0x42000000
    220c:	d04b      	beq.n	22a6 <attachInterrupt+0xb2>
    220e:	f5a5 4580 	sub.w	r5, r5, #16384	; 0x4000
    2212:	42ab      	cmp	r3, r5
    2214:	d140      	bne.n	2298 <attachInterrupt+0xa4>
    2216:	4d30      	ldr	r5, [pc, #192]	; (22d8 <attachInterrupt+0xe4>)
	volatile uint32_t *mux = portConfigRegister(pin);
    2218:	4420      	add	r0, r4
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    221a:	4e30      	ldr	r6, [pc, #192]	; (22dc <attachInterrupt+0xe8>)
    221c:	4c30      	ldr	r4, [pc, #192]	; (22e0 <attachInterrupt+0xec>)
    221e:	f8c4 62b4 	str.w	r6, [r4, #692]	; 0x2b4
	volatile uint32_t *pad = portControlRegister(pin);
    2222:	e9d0 c401 	ldrd	ip, r4, [r0, #4]
	uint32_t mask = digitalPinToBitMask(pin);
    2226:	68c0      	ldr	r0, [r0, #12]
		default:
			return;
	}

	attachInterruptVector(IRQ_GPIO6789, &irq_gpio6789);
	NVIC_ENABLE_IRQ(IRQ_GPIO6789);
    2228:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    222c:	f04f 5700 	mov.w	r7, #536870912	; 0x20000000
    2230:	2a04      	cmp	r2, #4
    2232:	f8c6 7110 	str.w	r7, [r6, #272]	; 0x110

#endif

	uint32_t icr;
	switch (mode) {
    2236:	d82f      	bhi.n	2298 <attachInterrupt+0xa4>
		case HIGH:    icr = 1; break;
		default: return;
	}

	// TODO: global interrupt disable to protect these read-modify-write accesses?
	gpio[IMR_INDEX] &= ~mask;	// disable interrupt
    2238:	695e      	ldr	r6, [r3, #20]
    223a:	ea26 0600 	bic.w	r6, r6, r0
    223e:	615e      	str	r6, [r3, #20]
	*mux = 5;			// pin is GPIO
    2240:	f04f 0605 	mov.w	r6, #5
    2244:	f8cc 6000 	str.w	r6, [ip]
	*pad |= IOMUXC_PAD_HYS;		// use hystersis avoid false trigger by slow signals
    2248:	6826      	ldr	r6, [r4, #0]
    224a:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
    224e:	6026      	str	r6, [r4, #0]
	gpio[GDIR_INDEX] &= ~mask;	// pin to input mode
    2250:	685c      	ldr	r4, [r3, #4]
    2252:	ea24 0400 	bic.w	r4, r4, r0
    2256:	605c      	str	r4, [r3, #4]
    2258:	4c22      	ldr	r4, [pc, #136]	; (22e4 <attachInterrupt+0xf0>)
    225a:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
	uint32_t index = __builtin_ctz(mask);
    225e:	fa90 f2a0 	rbit	r2, r0
    2262:	fab2 f282 	clz	r2, r2
	table[index] = function;
    2266:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
	gpio[IMR_INDEX] &= ~mask;	// disable interrupt
    226a:	ea6f 0100 	mvn.w	r1, r0
	if (mode == CHANGE) {
    226e:	d01d      	beq.n	22ac <attachInterrupt+0xb8>
		gpio[EDGE_INDEX] |= mask;
	} else {
		gpio[EDGE_INDEX] &= ~mask;
    2270:	69dd      	ldr	r5, [r3, #28]
		if (index < 16) {
    2272:	2a0f      	cmp	r2, #15
		gpio[EDGE_INDEX] &= ~mask;
    2274:	ea01 0105 	and.w	r1, r1, r5
    2278:	61d9      	str	r1, [r3, #28]
		if (index < 16) {
    227a:	dc1d      	bgt.n	22b8 <attachInterrupt+0xc4>
			uint32_t shift = index * 2;
    227c:	0052      	lsls	r2, r2, #1
			gpio[ICR1_INDEX] = (gpio[ICR1_INDEX] & ~(3 << shift)) | (icr << shift);
    227e:	2503      	movs	r5, #3
    2280:	68d9      	ldr	r1, [r3, #12]
    2282:	4094      	lsls	r4, r2
    2284:	fa05 f202 	lsl.w	r2, r5, r2
    2288:	ea21 0202 	bic.w	r2, r1, r2
    228c:	4322      	orrs	r2, r4
    228e:	60da      	str	r2, [r3, #12]
		} else {
			uint32_t shift = (index - 16) * 2;
			gpio[ICR2_INDEX] = (gpio[ICR2_INDEX] & ~(3 << shift)) | (icr << shift);
		}
	}
	gpio[ISR_INDEX] = mask;  // clear any prior pending interrupt
    2290:	6198      	str	r0, [r3, #24]
	gpio[IMR_INDEX] |= mask; // enable interrupt
    2292:	695a      	ldr	r2, [r3, #20]
    2294:	4302      	orrs	r2, r0
    2296:	615a      	str	r2, [r3, #20]
}
    2298:	bcf0      	pop	{r4, r5, r6, r7}
    229a:	4770      	bx	lr
	switch((uint32_t)gpio) {
    229c:	4d12      	ldr	r5, [pc, #72]	; (22e8 <attachInterrupt+0xf4>)
    229e:	42ab      	cmp	r3, r5
    22a0:	d1fa      	bne.n	2298 <attachInterrupt+0xa4>
			table = isr_table_gpio4;
    22a2:	4d12      	ldr	r5, [pc, #72]	; (22ec <attachInterrupt+0xf8>)
    22a4:	e7b8      	b.n	2218 <attachInterrupt+0x24>
			table = isr_table_gpio1;
    22a6:	4d12      	ldr	r5, [pc, #72]	; (22f0 <attachInterrupt+0xfc>)
    22a8:	e7b6      	b.n	2218 <attachInterrupt+0x24>
    22aa:	4770      	bx	lr
		gpio[EDGE_INDEX] |= mask;
    22ac:	69da      	ldr	r2, [r3, #28]
    22ae:	4302      	orrs	r2, r0
    22b0:	61da      	str	r2, [r3, #28]
    22b2:	e7ed      	b.n	2290 <attachInterrupt+0x9c>
			table = isr_table_gpio3;
    22b4:	4d0f      	ldr	r5, [pc, #60]	; (22f4 <attachInterrupt+0x100>)
    22b6:	e7af      	b.n	2218 <attachInterrupt+0x24>
			uint32_t shift = (index - 16) * 2;
    22b8:	3a10      	subs	r2, #16
			gpio[ICR2_INDEX] = (gpio[ICR2_INDEX] & ~(3 << shift)) | (icr << shift);
    22ba:	2503      	movs	r5, #3
    22bc:	6919      	ldr	r1, [r3, #16]
			uint32_t shift = (index - 16) * 2;
    22be:	0052      	lsls	r2, r2, #1
			gpio[ICR2_INDEX] = (gpio[ICR2_INDEX] & ~(3 << shift)) | (icr << shift);
    22c0:	4094      	lsls	r4, r2
    22c2:	fa05 f202 	lsl.w	r2, r5, r2
    22c6:	ea21 0202 	bic.w	r2, r1, r2
    22ca:	4322      	orrs	r2, r4
    22cc:	611a      	str	r2, [r3, #16]
    22ce:	e7df      	b.n	2290 <attachInterrupt+0x9c>
    22d0:	20007380 	.word	0x20007380
    22d4:	42008000 	.word	0x42008000
    22d8:	20008258 	.word	0x20008258
    22dc:	000000c1 	.word	0x000000c1
    22e0:	20008800 	.word	0x20008800
    22e4:	200003a4 	.word	0x200003a4
    22e8:	4200c000 	.word	0x4200c000
    22ec:	20008358 	.word	0x20008358
    22f0:	200081d8 	.word	0x200081d8
    22f4:	200082d8 	.word	0x200082d8

000022f8 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    22f8:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    22fa:	f7fe fbbb 	bl	a74 <setup>
	while (1) {
		loop();
    22fe:	f7fe f94f 	bl	5a0 <loop>
		yield();
    2302:	f001 fb07 	bl	3914 <yield>
	while (1) {
    2306:	e7fa      	b.n	22fe <main+0x6>

00002308 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    2308:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    230a:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    230e:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    2312:	d16d      	bne.n	23f0 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    2314:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    2316:	d341      	bcc.n	239c <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    2318:	f851 3b04 	ldr.w	r3, [r1], #4
    231c:	f840 3b04 	str.w	r3, [r0], #4
    2320:	f851 3b04 	ldr.w	r3, [r1], #4
    2324:	f840 3b04 	str.w	r3, [r0], #4
    2328:	f851 3b04 	ldr.w	r3, [r1], #4
    232c:	f840 3b04 	str.w	r3, [r0], #4
    2330:	f851 3b04 	ldr.w	r3, [r1], #4
    2334:	f840 3b04 	str.w	r3, [r0], #4
    2338:	f851 3b04 	ldr.w	r3, [r1], #4
    233c:	f840 3b04 	str.w	r3, [r0], #4
    2340:	f851 3b04 	ldr.w	r3, [r1], #4
    2344:	f840 3b04 	str.w	r3, [r0], #4
    2348:	f851 3b04 	ldr.w	r3, [r1], #4
    234c:	f840 3b04 	str.w	r3, [r0], #4
    2350:	f851 3b04 	ldr.w	r3, [r1], #4
    2354:	f840 3b04 	str.w	r3, [r0], #4
    2358:	f851 3b04 	ldr.w	r3, [r1], #4
    235c:	f840 3b04 	str.w	r3, [r0], #4
    2360:	f851 3b04 	ldr.w	r3, [r1], #4
    2364:	f840 3b04 	str.w	r3, [r0], #4
    2368:	f851 3b04 	ldr.w	r3, [r1], #4
    236c:	f840 3b04 	str.w	r3, [r0], #4
    2370:	f851 3b04 	ldr.w	r3, [r1], #4
    2374:	f840 3b04 	str.w	r3, [r0], #4
    2378:	f851 3b04 	ldr.w	r3, [r1], #4
    237c:	f840 3b04 	str.w	r3, [r0], #4
    2380:	f851 3b04 	ldr.w	r3, [r1], #4
    2384:	f840 3b04 	str.w	r3, [r0], #4
    2388:	f851 3b04 	ldr.w	r3, [r1], #4
    238c:	f840 3b04 	str.w	r3, [r0], #4
    2390:	f851 3b04 	ldr.w	r3, [r1], #4
    2394:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    2398:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    239a:	d2bd      	bcs.n	2318 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    239c:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    239e:	d311      	bcc.n	23c4 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    23a0:	f851 3b04 	ldr.w	r3, [r1], #4
    23a4:	f840 3b04 	str.w	r3, [r0], #4
    23a8:	f851 3b04 	ldr.w	r3, [r1], #4
    23ac:	f840 3b04 	str.w	r3, [r0], #4
    23b0:	f851 3b04 	ldr.w	r3, [r1], #4
    23b4:	f840 3b04 	str.w	r3, [r0], #4
    23b8:	f851 3b04 	ldr.w	r3, [r1], #4
    23bc:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    23c0:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    23c2:	d2ed      	bcs.n	23a0 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    23c4:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    23c6:	d305      	bcc.n	23d4 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    23c8:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    23cc:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    23d0:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    23d2:	d2f9      	bcs.n	23c8 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    23d4:	3204      	adds	r2, #4
	beq	.Ldone
    23d6:	d008      	beq.n	23ea <memcpy+0xe2>

	lsls	r2, r2, #31
    23d8:	07d2      	lsls	r2, r2, #31
	itt ne
    23da:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    23dc:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    23e0:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    23e4:	d301      	bcc.n	23ea <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    23e6:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    23e8:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    23ea:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    23ec:	4770      	bx	lr
    23ee:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    23f0:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    23f2:	d313      	bcc.n	241c <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    23f4:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    23f6:	d08d      	beq.n	2314 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    23f8:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    23fc:	d08a      	beq.n	2314 <memcpy+0xc>

	rsb	r3, #4
    23fe:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    2402:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    2404:	07db      	lsls	r3, r3, #31
	itt ne
    2406:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    2408:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    240c:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    2410:	d380      	bcc.n	2314 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    2412:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    2416:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    241a:	e77b      	b.n	2314 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    241c:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    241e:	d3d9      	bcc.n	23d4 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    2420:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    2422:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    2426:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    242a:	d2f9      	bcs.n	2420 <memcpy+0x118>

	ldrb	r3, [r1]
    242c:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    242e:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    2430:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    2432:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    2434:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    2436:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    2438:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    243a:	4770      	bx	lr

0000243c <ultoa>:
	int i=0, j;
    243c:	f101 3cff 	add.w	ip, r1, #4294967295
{
    2440:	b570      	push	{r4, r5, r6, lr}
		digit = val % radix;
    2442:	4666      	mov	r6, ip
	int i=0, j;
    2444:	2400      	movs	r4, #0
    2446:	e000      	b.n	244a <ultoa+0xe>
		i++;
    2448:	3401      	adds	r4, #1
		digit = val % radix;
    244a:	fbb0 f5f2 	udiv	r5, r0, r2
    244e:	fb02 0315 	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    2452:	2b09      	cmp	r3, #9
    2454:	f103 0e37 	add.w	lr, r3, #55	; 0x37
    2458:	f103 0330 	add.w	r3, r3, #48	; 0x30
    245c:	fa5f fe8e 	uxtb.w	lr, lr
    2460:	bf98      	it	ls
    2462:	fa5f fe83 	uxtbls.w	lr, r3
		if (val == 0) break;
    2466:	4290      	cmp	r0, r2
		val /= radix;
    2468:	4628      	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    246a:	f806 ef01 	strb.w	lr, [r6, #1]!
		if (val == 0) break;
    246e:	d2eb      	bcs.n	2448 <ultoa+0xc>
	buf[i + 1] = 0;
    2470:	1c63      	adds	r3, r4, #1
    2472:	2200      	movs	r2, #0
    2474:	18c8      	adds	r0, r1, r3
    2476:	54ca      	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
    2478:	b17c      	cbz	r4, 249a <ultoa+0x5e>
		t = buf[j];
    247a:	4662      	mov	r2, ip
    247c:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    2480:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
    2484:	eba1 030c 	sub.w	r3, r1, ip
    2488:	3202      	adds	r2, #2
		buf[j] = buf[i];
    248a:	f88c 6000 	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
    248e:	3b01      	subs	r3, #1
    2490:	1a52      	subs	r2, r2, r1
		buf[i] = t;
    2492:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    2494:	4423      	add	r3, r4
    2496:	429a      	cmp	r2, r3
    2498:	dbef      	blt.n	247a <ultoa+0x3e>
}
    249a:	4608      	mov	r0, r1
    249c:	bd70      	pop	{r4, r5, r6, pc}
    249e:	bf00      	nop

000024a0 <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    24a0:	2300      	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
    24a2:	220f      	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    24a4:	f248 2cb8 	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
    24a8:	4619      	mov	r1, r3
{
    24aa:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    24ac:	f44f 4470 	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    24b0:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    24b4:	f8a0 418c 	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    24b8:	f44f 4460 	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
    24bc:	f8a0 218e 	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
    24c0:	460a      	mov	r2, r1
	p->FFILT0 = 0;
    24c2:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    24c6:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    24ca:	b29b      	uxth	r3, r3
    24cc:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    24d0:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    24d4:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
    24d8:	3101      	adds	r1, #1
    24da:	eb00 1343 	add.w	r3, r0, r3, lsl #5
    24de:	2904      	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    24e0:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    24e2:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    24e6:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    24e8:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    24ea:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    24ec:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    24ee:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
    24f2:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    24f4:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    24f6:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    24f8:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
    24fa:	d1eb      	bne.n	24d4 <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    24fc:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    2500:	b29b      	uxth	r3, r3
    2502:	f043 030f 	orr.w	r3, r3, #15
    2506:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    250a:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    250e:	b29b      	uxth	r3, r3
    2510:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    2514:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
    2518:	bd10      	pop	{r4, pc}
    251a:	bf00      	nop

0000251c <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    251c:	4b37      	ldr	r3, [pc, #220]	; (25fc <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    251e:	4a38      	ldr	r2, [pc, #224]	; (2600 <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    2520:	6f99      	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    2522:	4838      	ldr	r0, [pc, #224]	; (2604 <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    2524:	f441 017f 	orr.w	r1, r1, #16711680	; 0xff0000
{
    2528:	b570      	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    252a:	6799      	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    252c:	f241 0601 	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    2530:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    2534:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    2538:	f243 0426 	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    253c:	430a      	orrs	r2, r1
    253e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    2542:	f7ff ffad 	bl	24a0 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    2546:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    254a:	f7ff ffa9 	bl	24a0 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    254e:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    2552:	f7ff ffa5 	bl	24a0 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    2556:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    255a:	f7ff ffa1 	bl	24a0 <flexpwm_init>
	for (i=0; i < 4; i++) {
    255e:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    2560:	f5a0 1003 	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    2564:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
    2568:	4611      	mov	r1, r2
    256a:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    256e:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    2572:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    2574:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    2576:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    2578:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    257a:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    257e:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    2580:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    2582:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    2586:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    2588:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    258a:	d1ee      	bne.n	256a <pwm_init+0x4e>
    258c:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    258e:	481e      	ldr	r0, [pc, #120]	; (2608 <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    2590:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    2594:	f241 0601 	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    2598:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    259a:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    259e:	f243 0426 	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    25a2:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    25a6:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    25aa:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    25ac:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    25ae:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    25b0:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    25b2:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    25b6:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    25b8:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    25ba:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    25be:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    25c0:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    25c2:	d1ee      	bne.n	25a2 <pwm_init+0x86>
    25c4:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    25c6:	4811      	ldr	r0, [pc, #68]	; (260c <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    25c8:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    25ca:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    25ce:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    25d0:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    25d4:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    25d8:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    25dc:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    25e0:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    25e2:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    25e4:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    25e6:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    25e8:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    25ea:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    25ec:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    25ee:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    25f2:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    25f4:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
    25f8:	d1ee      	bne.n	25d8 <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    25fa:	bd70      	pop	{r4, r5, r6, pc}
    25fc:	400fc000 	.word	0x400fc000
    2600:	fc030000 	.word	0xfc030000
    2604:	403dc000 	.word	0x403dc000
    2608:	401e0000 	.word	0x401e0000
    260c:	401e4000 	.word	0x401e4000

00002610 <unused_interrupt_vector>:
	__disable_irq();
    2610:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    2612:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
    2616:	4c52      	ldr	r4, [pc, #328]	; (2760 <unused_interrupt_vector+0x150>)
    2618:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("tst lr, #4\nite eq\nmrseq %0, msp\nmrsne %0, psp\n" : "=r" (stack) :: "memory");
    261c:	f01e 0f04 	tst.w	lr, #4
    2620:	bf0c      	ite	eq
    2622:	f3ef 8208 	mrseq	r2, MSP
    2626:	f3ef 8209 	mrsne	r2, PSP
	info->cfsr = SCB_CFSR;
    262a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
    262e:	4e4d      	ldr	r6, [pc, #308]	; (2764 <unused_interrupt_vector+0x154>)
	while (p < end) {
    2630:	4d4d      	ldr	r5, [pc, #308]	; (2768 <unused_interrupt_vector+0x158>)
	info->cfsr = SCB_CFSR;
    2632:	f8d3 0d28 	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
    2636:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
    263a:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
    263e:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
    2642:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
    2646:	e9c4 1324 	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
    264a:	6993      	ldr	r3, [r2, #24]
    264c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    2650:	69d3      	ldr	r3, [r2, #28]
    2652:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    2656:	f000 f8d1 	bl	27fc <tempmonGetTemp>
    265a:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    265e:	f001 fb71 	bl	3d44 <rtc_get>
	info->len = sizeof(*info) / 4;
    2662:	210b      	movs	r1, #11
	crc = 0xFFFFFFFF;
    2664:	f04f 32ff 	mov.w	r2, #4294967295
	info->time = rtc_get();
    2668:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    266c:	460b      	mov	r3, r1
    266e:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    2672:	493e      	ldr	r1, [pc, #248]	; (276c <unused_interrupt_vector+0x15c>)
		crc ^= *p++;
    2674:	1d30      	adds	r0, r6, #4
    2676:	405a      	eors	r2, r3
    2678:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    267a:	f002 0301 	and.w	r3, r2, #1
    267e:	3c01      	subs	r4, #1
    2680:	fb01 f303 	mul.w	r3, r1, r3
    2684:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
    2688:	d1f7      	bne.n	267a <unused_interrupt_vector+0x6a>
	while (p < end) {
    268a:	42a8      	cmp	r0, r5
    268c:	d002      	beq.n	2694 <unused_interrupt_vector+0x84>
		crc ^= *p++;
    268e:	6873      	ldr	r3, [r6, #4]
    2690:	4606      	mov	r6, r0
    2692:	e7ef      	b.n	2674 <unused_interrupt_vector+0x64>
	info->crc = crc;
    2694:	4b32      	ldr	r3, [pc, #200]	; (2760 <unused_interrupt_vector+0x150>)
    2696:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    269a:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    269e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    26a2:	4930      	ldr	r1, [pc, #192]	; (2764 <unused_interrupt_vector+0x154>)
    26a4:	4a32      	ldr	r2, [pc, #200]	; (2770 <unused_interrupt_vector+0x160>)
    26a6:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
    26aa:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
    26ae:	f3bf 8f4f 	dsb	sy
	asm("isb");
    26b2:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    26b6:	4a2f      	ldr	r2, [pc, #188]	; (2774 <unused_interrupt_vector+0x164>)
	PIT_MCR = PIT_MCR_MDIS;
    26b8:	2502      	movs	r5, #2
    26ba:	482f      	ldr	r0, [pc, #188]	; (2778 <unused_interrupt_vector+0x168>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    26bc:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    26be:	492f      	ldr	r1, [pc, #188]	; (277c <unused_interrupt_vector+0x16c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    26c0:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    26c4:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    26c6:	6005      	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    26c8:	69d3      	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    26ca:	482d      	ldr	r0, [pc, #180]	; (2780 <unused_interrupt_vector+0x170>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    26cc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    26d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    26d4:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    26d6:	680b      	ldr	r3, [r1, #0]
    26d8:	4283      	cmp	r3, r0
    26da:	d83d      	bhi.n	2758 <unused_interrupt_vector+0x148>
	PIT_MCR = 0;
    26dc:	4d26      	ldr	r5, [pc, #152]	; (2778 <unused_interrupt_vector+0x168>)
    26de:	2100      	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
    26e0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    26e4:	f04f 32ff 	mov.w	r2, #4294967295
	PIT_MCR = 0;
    26e8:	6029      	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    26ea:	2601      	movs	r6, #1
	PIT_TCTRL0 = 0;
    26ec:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    26f0:	4924      	ldr	r1, [pc, #144]	; (2784 <unused_interrupt_vector+0x174>)
    26f2:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    26f6:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
    26fa:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    26fe:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    2702:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    2706:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    270a:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	count = 0;
    270e:	e001      	b.n	2714 <unused_interrupt_vector+0x104>
		usb_isr();
    2710:	f000 f966 	bl	29e0 <usb_isr>
		if (PIT_TFLG0) {
    2714:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    2718:	2b00      	cmp	r3, #0
    271a:	d0f9      	beq.n	2710 <unused_interrupt_vector+0x100>
			if (++count >= 80) break;  // reboot after 8 seconds
    271c:	3401      	adds	r4, #1
			PIT_TFLG0 = 1;
    271e:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    2722:	2c4f      	cmp	r4, #79	; 0x4f
    2724:	d9f4      	bls.n	2710 <unused_interrupt_vector+0x100>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    2726:	4b18      	ldr	r3, [pc, #96]	; (2788 <unused_interrupt_vector+0x178>)
	USB1_USBCMD = USB_USBCMD_RST;
    2728:	2002      	movs	r0, #2
    272a:	4918      	ldr	r1, [pc, #96]	; (278c <unused_interrupt_vector+0x17c>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    272c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
    2730:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    2734:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    2736:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    273a:	b93b      	cbnz	r3, 274c <unused_interrupt_vector+0x13c>
	SRC_GPR5 = 0x0BAD00F1;
    273c:	4814      	ldr	r0, [pc, #80]	; (2790 <unused_interrupt_vector+0x180>)
    273e:	4915      	ldr	r1, [pc, #84]	; (2794 <unused_interrupt_vector+0x184>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    2740:	4a0d      	ldr	r2, [pc, #52]	; (2778 <unused_interrupt_vector+0x168>)
	SRC_GPR5 = 0x0BAD00F1;
    2742:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    2744:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
    2748:	2b00      	cmp	r3, #0
    274a:	d0fa      	beq.n	2742 <unused_interrupt_vector+0x132>
	SCB_AIRCR = 0x05FA0004;
    274c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    2750:	4a11      	ldr	r2, [pc, #68]	; (2798 <unused_interrupt_vector+0x188>)
    2752:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    2756:	e7fe      	b.n	2756 <unused_interrupt_vector+0x146>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    2758:	f001 f97c 	bl	3a54 <set_arm_clock>
    275c:	e7be      	b.n	26dc <unused_interrupt_vector+0xcc>
    275e:	bf00      	nop
    2760:	2027ff00 	.word	0x2027ff00
    2764:	2027ff80 	.word	0x2027ff80
    2768:	2027ffa8 	.word	0x2027ffa8
    276c:	edb88320 	.word	0xedb88320
    2770:	2027ffa0 	.word	0x2027ffa0
    2774:	400fc000 	.word	0x400fc000
    2778:	40084000 	.word	0x40084000
    277c:	20007b4c 	.word	0x20007b4c
    2780:	0bcd3d80 	.word	0x0bcd3d80
    2784:	00249f00 	.word	0x00249f00
    2788:	400d9000 	.word	0x400d9000
    278c:	402e0000 	.word	0x402e0000
    2790:	400f8000 	.word	0x400f8000
    2794:	0bad00f1 	.word	0x0bad00f1
    2798:	05fa0004 	.word	0x05fa0004

0000279c <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
    279c:	490a      	ldr	r1, [pc, #40]	; (27c8 <_sbrk+0x2c>)
    279e:	680a      	ldr	r2, [r1, #0]
        if (incr != 0) {
    27a0:	b138      	cbz	r0, 27b2 <_sbrk+0x16>
{
    27a2:	b508      	push	{r3, lr}
                if (prev + incr > (char *)&_heap_end) {
    27a4:	1813      	adds	r3, r2, r0
    27a6:	4809      	ldr	r0, [pc, #36]	; (27cc <_sbrk+0x30>)
    27a8:	4283      	cmp	r3, r0
    27aa:	d804      	bhi.n	27b6 <_sbrk+0x1a>
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    27ac:	4610      	mov	r0, r2
                __brkval = prev + incr;
    27ae:	600b      	str	r3, [r1, #0]
}
    27b0:	bd08      	pop	{r3, pc}
    27b2:	4610      	mov	r0, r2
    27b4:	4770      	bx	lr
                        errno = ENOMEM;
    27b6:	f003 fd8f 	bl	62d8 <__errno>
    27ba:	230c      	movs	r3, #12
                        return (void *)-1;
    27bc:	f04f 32ff 	mov.w	r2, #4294967295
                        errno = ENOMEM;
    27c0:	6003      	str	r3, [r0, #0]
}
    27c2:	4610      	mov	r0, r2
    27c4:	bd08      	pop	{r3, pc}
    27c6:	bf00      	nop
    27c8:	20007c30 	.word	0x20007c30
    27cc:	20280000 	.word	0x20280000

000027d0 <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
    27d0:	2000      	movs	r0, #0
    27d2:	4770      	bx	lr

000027d4 <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
    27d4:	f04f 30ff 	mov.w	r0, #4294967295
    27d8:	4770      	bx	lr
    27da:	bf00      	nop

000027dc <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
    27dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
    27e0:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
    27e2:	604b      	str	r3, [r1, #4]
}
    27e4:	4770      	bx	lr
    27e6:	bf00      	nop

000027e8 <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
    27e8:	2001      	movs	r0, #1
    27ea:	4770      	bx	lr

000027ec <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
    27ec:	f04f 30ff 	mov.w	r0, #4294967295
    27f0:	4770      	bx	lr
    27f2:	bf00      	nop

000027f4 <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    27f4:	bf30      	wfi
    27f6:	e7fd      	b.n	27f4 <abort>

000027f8 <Panic_Temp_isr>:
  unused_interrupt_vector();
    27f8:	f7ff bf0a 	b.w	2610 <unused_interrupt_vector>

000027fc <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    27fc:	4a12      	ldr	r2, [pc, #72]	; (2848 <tempmonGetTemp+0x4c>)
    27fe:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    2802:	075b      	lsls	r3, r3, #29
    2804:	d5fb      	bpl.n	27fe <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    2806:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    280a:	4810      	ldr	r0, [pc, #64]	; (284c <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    280c:	f3c3 230b 	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    2810:	490f      	ldr	r1, [pc, #60]	; (2850 <tempmonGetTemp+0x54>)
    2812:	ed90 7a00 	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    2816:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    281a:	ed91 6a00 	vldr	s12, [r1]
    281e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    2822:	4a0c      	ldr	r2, [pc, #48]	; (2854 <tempmonGetTemp+0x58>)
    2824:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2828:	4b0b      	ldr	r3, [pc, #44]	; (2858 <tempmonGetTemp+0x5c>)
    282a:	edd2 6a00 	vldr	s13, [r2]
    282e:	ee77 7ac7 	vsub.f32	s15, s15, s14
    2832:	ed93 7a00 	vldr	s14, [r3]
    2836:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    283a:	ee67 7a86 	vmul.f32	s15, s15, s12
    283e:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
    2842:	ee37 0a40 	vsub.f32	s0, s14, s0
    2846:	4770      	bx	lr
    2848:	400d8100 	.word	0x400d8100
    284c:	20009264 	.word	0x20009264
    2850:	2000926c 	.word	0x2000926c
    2854:	20009270 	.word	0x20009270
    2858:	20009268 	.word	0x20009268

0000285c <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    285c:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
    285e:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
    2860:	b11b      	cbz	r3, 286a <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    2862:	6853      	ldr	r3, [r2, #4]
    2864:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    2868:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    286a:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    286c:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    286e:	b33c      	cbz	r4, 28c0 <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    2870:	4b1a      	ldr	r3, [pc, #104]	; (28dc <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
    2872:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    2874:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    2878:	420c      	tst	r4, r1
    287a:	d11d      	bne.n	28b8 <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    287c:	4e18      	ldr	r6, [pc, #96]	; (28e0 <schedule_transfer+0x84>)
    287e:	6877      	ldr	r7, [r6, #4]
    2880:	e004      	b.n	288c <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    2882:	6874      	ldr	r4, [r6, #4]
    2884:	1be4      	subs	r4, r4, r7
    2886:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    288a:	d20b      	bcs.n	28a4 <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    288c:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    2890:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    2894:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    2898:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    289c:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    28a0:	0464      	lsls	r4, r4, #17
    28a2:	d5ee      	bpl.n	2882 <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    28a4:	400d      	ands	r5, r1
    28a6:	d107      	bne.n	28b8 <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    28a8:	4c0c      	ldr	r4, [pc, #48]	; (28dc <schedule_transfer+0x80>)
		endpoint->status = 0;
    28aa:	e9c0 2502 	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    28ae:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    28b2:	430b      	orrs	r3, r1
    28b4:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    28b8:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    28ba:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    28bc:	bcf0      	pop	{r4, r5, r6, r7}
    28be:	4770      	bx	lr
	USB1_ENDPTPRIME |= epmask;
    28c0:	4d06      	ldr	r5, [pc, #24]	; (28dc <schedule_transfer+0x80>)
	endpoint->status = 0;
    28c2:	e9c0 2402 	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    28c6:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
    28ca:	430b      	orrs	r3, r1
    28cc:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    28d0:	6302      	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
    28d2:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    28d4:	b662      	cpsie	i
}
    28d6:	bcf0      	pop	{r4, r5, r6, r7}
    28d8:	4770      	bx	lr
    28da:	bf00      	nop
    28dc:	402e0000 	.word	0x402e0000
    28e0:	e0001000 	.word	0xe0001000

000028e4 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    28e4:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    28e6:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
    28e8:	b19d      	cbz	r5, 2912 <run_callbacks+0x2e>
    28ea:	4606      	mov	r6, r0
    28ec:	462a      	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    28ee:	2400      	movs	r4, #0
    28f0:	e003      	b.n	28fa <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    28f2:	6812      	ldr	r2, [r2, #0]
		count++;
    28f4:	3401      	adds	r4, #1
		if ((uint32_t)t == 1) {
    28f6:	2a01      	cmp	r2, #1
    28f8:	d00c      	beq.n	2914 <run_callbacks+0x30>
		if (t->status & (1<<7)) {
    28fa:	6853      	ldr	r3, [r2, #4]
    28fc:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    2900:	d0f7      	beq.n	28f2 <run_callbacks+0xe>
			ep->first_transfer = t;
    2902:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    2904:	b12c      	cbz	r4, 2912 <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
    2906:	4628      	mov	r0, r5
		ep->callback_function(first);
    2908:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
    290a:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
    290c:	4798      	blx	r3
	while (count) {
    290e:	3c01      	subs	r4, #1
    2910:	d1f9      	bne.n	2906 <run_callbacks+0x22>
		first = next;
		count--;
	}
}
    2912:	bd70      	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
    2914:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
			break;
    2918:	e7f4      	b.n	2904 <run_callbacks+0x20>
    291a:	bf00      	nop

0000291c <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    291c:	b430      	push	{r4, r5}
	if (len > 0) {
    291e:	b9d9      	cbnz	r1, 2958 <endpoint0_transmit.constprop.0+0x3c>
    2920:	4c1f      	ldr	r4, [pc, #124]	; (29a0 <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
    2922:	4b20      	ldr	r3, [pc, #128]	; (29a4 <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
    2924:	2100      	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    2926:	4a20      	ldr	r2, [pc, #128]	; (29a8 <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
    2928:	2501      	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    292a:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    292e:	6099      	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    2930:	601d      	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
    2932:	e9c4 3102 	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2936:	2480      	movs	r4, #128	; 0x80
    2938:	605c      	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    293a:	f8c2 01bc 	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    293e:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    2942:	481a      	ldr	r0, [pc, #104]	; (29ac <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
    2944:	432b      	orrs	r3, r5
    2946:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    294a:	6001      	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
    294c:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    2950:	2b00      	cmp	r3, #0
    2952:	d1fb      	bne.n	294c <endpoint0_transmit.constprop.0+0x30>
}
    2954:	bc30      	pop	{r4, r5}
    2956:	4770      	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    2958:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    295a:	4b15      	ldr	r3, [pc, #84]	; (29b0 <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    295c:	4c10      	ldr	r4, [pc, #64]	; (29a0 <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
    295e:	2501      	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    2960:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    2964:	6098      	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
    2966:	4a10      	ldr	r2, [pc, #64]	; (29a8 <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    2968:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    296a:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    296e:	601d      	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    2970:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    2972:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    2976:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
    2978:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    297a:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    297e:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    2982:	6159      	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
    2984:	2100      	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
    2986:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    2988:	64e1      	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    298a:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    298e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    2992:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    2996:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    299a:	2b00      	cmp	r3, #0
    299c:	d1fb      	bne.n	2996 <endpoint0_transmit.constprop.0+0x7a>
    299e:	e7c0      	b.n	2922 <endpoint0_transmit.constprop.0+0x6>
    29a0:	20000000 	.word	0x20000000
    29a4:	20008ac0 	.word	0x20008ac0
    29a8:	402e0000 	.word	0x402e0000
    29ac:	200091ec 	.word	0x200091ec
    29b0:	20008ae0 	.word	0x20008ae0

000029b4 <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    29b4:	4908      	ldr	r1, [pc, #32]	; (29d8 <usb_stop_sof_interrupts+0x24>)
    29b6:	2201      	movs	r2, #1
    29b8:	780b      	ldrb	r3, [r1, #0]
    29ba:	fa02 f000 	lsl.w	r0, r2, r0
    29be:	ea23 0000 	bic.w	r0, r3, r0
    29c2:	7008      	strb	r0, [r1, #0]
	if (sof_usage == 0) {
    29c4:	b930      	cbnz	r0, 29d4 <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    29c6:	4a05      	ldr	r2, [pc, #20]	; (29dc <usb_stop_sof_interrupts+0x28>)
    29c8:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
    29cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    29d0:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
    29d4:	4770      	bx	lr
    29d6:	bf00      	nop
    29d8:	200092af 	.word	0x200092af
    29dc:	402e0000 	.word	0x402e0000

000029e0 <usb_isr>:
{
    29e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
    29e4:	4c97      	ldr	r4, [pc, #604]	; (2c44 <usb_isr+0x264>)
{
    29e6:	b083      	sub	sp, #12
	uint32_t status = USB1_USBSTS;
    29e8:	f8d4 7144 	ldr.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    29ec:	07fb      	lsls	r3, r7, #31
	USB1_USBSTS = status;
    29ee:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    29f2:	d553      	bpl.n	2a9c <usb_isr+0xbc>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    29f4:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    29f8:	2a00      	cmp	r2, #0
    29fa:	d04a      	beq.n	2a92 <usb_isr+0xb2>
    29fc:	4e92      	ldr	r6, [pc, #584]	; (2c48 <usb_isr+0x268>)
    29fe:	f8df a260 	ldr.w	sl, [pc, #608]	; 2c60 <usb_isr+0x280>
		uint32_t addr = (uint32_t)data;
    2a02:	f8df 9274 	ldr.w	r9, [pc, #628]	; 2c78 <usb_isr+0x298>
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    2a06:	f8df b274 	ldr.w	fp, [pc, #628]	; 2c7c <usb_isr+0x29c>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    2a0a:	f8df 8274 	ldr.w	r8, [pc, #628]	; 2c80 <usb_isr+0x2a0>
			USB1_ENDPTSETUPSTAT = setupstatus;
    2a0e:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
    2a12:	e9d6 200a 	ldrd	r2, r0, [r6, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    2a16:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    2a1a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    2a1e:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    2a22:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    2a26:	049d      	lsls	r5, r3, #18
    2a28:	d5f5      	bpl.n	2a16 <usb_isr+0x36>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    2a2a:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    2a2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    2a32:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    2a36:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    2a3a:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    2a3e:	f8d4 51b4 	ldr.w	r5, [r4, #436]	; 0x1b4
    2a42:	f015 1501 	ands.w	r5, r5, #65537	; 0x10001
    2a46:	d1fa      	bne.n	2a3e <usb_isr+0x5e>
			endpoint0_notify_mask = 0;
    2a48:	b293      	uxth	r3, r2
	setup.bothwords = setupdata;
    2a4a:	4684      	mov	ip, r0
			endpoint0_notify_mask = 0;
    2a4c:	f8ca 5000 	str.w	r5, [sl]
	switch (setup.wRequestAndType) {
    2a50:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    2a54:	f000 81cf 	beq.w	2df6 <usb_isr+0x416>
    2a58:	f200 80db 	bhi.w	2c12 <usb_isr+0x232>
    2a5c:	f240 3102 	movw	r1, #770	; 0x302
    2a60:	428b      	cmp	r3, r1
    2a62:	f000 81e7 	beq.w	2e34 <usb_isr+0x454>
    2a66:	f200 809a 	bhi.w	2b9e <usb_isr+0x1be>
    2a6a:	2b82      	cmp	r3, #130	; 0x82
    2a6c:	f000 81cb 	beq.w	2e06 <usb_isr+0x426>
    2a70:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    2a74:	f040 808a 	bne.w	2b8c <usb_isr+0x1ac>
		if (endpoint > 7) break;
    2a78:	f010 0f78 	tst.w	r0, #120	; 0x78
    2a7c:	b283      	uxth	r3, r0
    2a7e:	f000 8203 	beq.w	2e88 <usb_isr+0x4a8>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    2a82:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    2a86:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    2a8a:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    2a8e:	2a00      	cmp	r2, #0
    2a90:	d1bd      	bne.n	2a0e <usb_isr+0x2e>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    2a92:	4a6c      	ldr	r2, [pc, #432]	; (2c44 <usb_isr+0x264>)
    2a94:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    2a98:	2b00      	cmp	r3, #0
    2a9a:	d142      	bne.n	2b22 <usb_isr+0x142>
	if (status & USB_USBSTS_URI) { // page 3164
    2a9c:	067e      	lsls	r6, r7, #25
    2a9e:	d516      	bpl.n	2ace <usb_isr+0xee>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    2aa0:	4b68      	ldr	r3, [pc, #416]	; (2c44 <usb_isr+0x264>)
    2aa2:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    2aa6:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    2aaa:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    2aae:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    2ab2:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    2ab6:	2c00      	cmp	r4, #0
    2ab8:	d1fb      	bne.n	2ab2 <usb_isr+0xd2>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    2aba:	f04f 32ff 	mov.w	r2, #4294967295
    2abe:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    2ac2:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    2ac6:	f000 fd29 	bl	351c <usb_serial_reset>
		endpointN_notify_mask = 0;
    2aca:	4b60      	ldr	r3, [pc, #384]	; (2c4c <usb_isr+0x26c>)
    2acc:	601c      	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
    2ace:	01fc      	lsls	r4, r7, #7
    2ad0:	d503      	bpl.n	2ada <usb_isr+0xfa>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    2ad2:	4b5f      	ldr	r3, [pc, #380]	; (2c50 <usb_isr+0x270>)
    2ad4:	681b      	ldr	r3, [r3, #0]
    2ad6:	b103      	cbz	r3, 2ada <usb_isr+0xfa>
    2ad8:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
    2ada:	01b8      	lsls	r0, r7, #6
    2adc:	d503      	bpl.n	2ae6 <usb_isr+0x106>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    2ade:	4b5d      	ldr	r3, [pc, #372]	; (2c54 <usb_isr+0x274>)
    2ae0:	681b      	ldr	r3, [r3, #0]
    2ae2:	b103      	cbz	r3, 2ae6 <usb_isr+0x106>
    2ae4:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
    2ae6:	0779      	lsls	r1, r7, #29
    2ae8:	d508      	bpl.n	2afc <usb_isr+0x11c>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    2aea:	4b56      	ldr	r3, [pc, #344]	; (2c44 <usb_isr+0x264>)
    2aec:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    2af0:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    2af4:	d047      	beq.n	2b86 <usb_isr+0x1a6>
			usb_high_speed = 1;
    2af6:	4b58      	ldr	r3, [pc, #352]	; (2c58 <usb_isr+0x278>)
    2af8:	2201      	movs	r2, #1
    2afa:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    2afc:	4b51      	ldr	r3, [pc, #324]	; (2c44 <usb_isr+0x264>)
    2afe:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
    2b02:	061a      	lsls	r2, r3, #24
    2b04:	d50a      	bpl.n	2b1c <usb_isr+0x13c>
    2b06:	063b      	lsls	r3, r7, #24
    2b08:	d508      	bpl.n	2b1c <usb_isr+0x13c>
		if (usb_reboot_timer) {
    2b0a:	4a54      	ldr	r2, [pc, #336]	; (2c5c <usb_isr+0x27c>)
    2b0c:	7813      	ldrb	r3, [r2, #0]
    2b0e:	b12b      	cbz	r3, 2b1c <usb_isr+0x13c>
			if (--usb_reboot_timer == 0) {
    2b10:	3b01      	subs	r3, #1
    2b12:	b2db      	uxtb	r3, r3
    2b14:	7013      	strb	r3, [r2, #0]
    2b16:	2b00      	cmp	r3, #0
    2b18:	f000 8272 	beq.w	3000 <usb_isr+0x620>
}
    2b1c:	b003      	add	sp, #12
    2b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (completestatus & endpoint0_notify_mask) {
    2b22:	494f      	ldr	r1, [pc, #316]	; (2c60 <usb_isr+0x280>)
			USB1_ENDPTCOMPLETE = completestatus;
    2b24:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    2b28:	6808      	ldr	r0, [r1, #0]
    2b2a:	4203      	tst	r3, r0
    2b2c:	f040 81d1 	bne.w	2ed2 <usb_isr+0x4f2>
			completestatus &= endpointN_notify_mask;
    2b30:	4a46      	ldr	r2, [pc, #280]	; (2c4c <usb_isr+0x26c>)
    2b32:	6814      	ldr	r4, [r2, #0]
			if (completestatus) {
    2b34:	401c      	ands	r4, r3
    2b36:	d0b1      	beq.n	2a9c <usb_isr+0xbc>
				while (tx) {
    2b38:	ea5f 4814 	movs.w	r8, r4, lsr #16
    2b3c:	d010      	beq.n	2b60 <usb_isr+0x180>
    2b3e:	4e42      	ldr	r6, [pc, #264]	; (2c48 <usb_isr+0x268>)
					tx &= ~(1<<p);
    2b40:	f04f 0901 	mov.w	r9, #1
					int p=__builtin_ctz(tx);
    2b44:	fa98 f5a8 	rbit	r5, r8
    2b48:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    2b4c:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					tx &= ~(1<<p);
    2b50:	fa09 f505 	lsl.w	r5, r9, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    2b54:	3040      	adds	r0, #64	; 0x40
    2b56:	f7ff fec5 	bl	28e4 <run_callbacks>
				while (tx) {
    2b5a:	ea38 0805 	bics.w	r8, r8, r5
    2b5e:	d1f1      	bne.n	2b44 <usb_isr+0x164>
				uint32_t rx = completestatus & 0xffff;
    2b60:	b2a4      	uxth	r4, r4
				while(rx) {
    2b62:	2c00      	cmp	r4, #0
    2b64:	d09a      	beq.n	2a9c <usb_isr+0xbc>
    2b66:	4e38      	ldr	r6, [pc, #224]	; (2c48 <usb_isr+0x268>)
					rx &= ~(1<<p);
    2b68:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(rx);
    2b6c:	fa94 f5a4 	rbit	r5, r4
    2b70:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    2b74:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					rx &= ~(1<<p);
    2b78:	fa08 f505 	lsl.w	r5, r8, r5
					run_callbacks(endpoint_queue_head + p * 2);
    2b7c:	f7ff feb2 	bl	28e4 <run_callbacks>
				while(rx) {
    2b80:	43ac      	bics	r4, r5
    2b82:	d1f3      	bne.n	2b6c <usb_isr+0x18c>
    2b84:	e78a      	b.n	2a9c <usb_isr+0xbc>
			usb_high_speed = 0;
    2b86:	4a34      	ldr	r2, [pc, #208]	; (2c58 <usb_isr+0x278>)
    2b88:	7013      	strb	r3, [r2, #0]
    2b8a:	e7b7      	b.n	2afc <usb_isr+0x11c>
	switch (setup.wRequestAndType) {
    2b8c:	2b80      	cmp	r3, #128	; 0x80
    2b8e:	f47f af78 	bne.w	2a82 <usb_isr+0xa2>
		reply_buffer[0] = 0;
    2b92:	4834      	ldr	r0, [pc, #208]	; (2c64 <usb_isr+0x284>)
		endpoint0_transmit(reply_buffer, 2, 0);
    2b94:	2102      	movs	r1, #2
		reply_buffer[0] = 0;
    2b96:	8005      	strh	r5, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    2b98:	f7ff fec0 	bl	291c <endpoint0_transmit.constprop.0>
		return;
    2b9c:	e775      	b.n	2a8a <usb_isr+0xaa>
	switch (setup.wRequestAndType) {
    2b9e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    2ba2:	f000 810b 	beq.w	2dbc <usb_isr+0x3dc>
    2ba6:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
    2baa:	2b01      	cmp	r3, #1
    2bac:	f63f af69 	bhi.w	2a82 <usb_isr+0xa2>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    2bb0:	4b2d      	ldr	r3, [pc, #180]	; (2c68 <usb_isr+0x288>)
    2bb2:	685d      	ldr	r5, [r3, #4]
    2bb4:	2d00      	cmp	r5, #0
    2bb6:	f43f af64 	beq.w	2a82 <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    2bba:	fa1f fc8c 	uxth.w	ip, ip
    2bbe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    2bc2:	e004      	b.n	2bce <usb_isr+0x1ee>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    2bc4:	691d      	ldr	r5, [r3, #16]
    2bc6:	330c      	adds	r3, #12
    2bc8:	2d00      	cmp	r5, #0
    2bca:	f43f af5a 	beq.w	2a82 <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    2bce:	881a      	ldrh	r2, [r3, #0]
    2bd0:	4572      	cmp	r2, lr
    2bd2:	d1f7      	bne.n	2bc4 <usb_isr+0x1e4>
    2bd4:	885a      	ldrh	r2, [r3, #2]
    2bd6:	4562      	cmp	r2, ip
    2bd8:	d1f4      	bne.n	2bc4 <usb_isr+0x1e4>
				if ((setup.wValue >> 8) == 3) {
    2bda:	ea4f 221e 	mov.w	r2, lr, lsr #8
    2bde:	2a03      	cmp	r2, #3
    2be0:	f000 81a5 	beq.w	2f2e <usb_isr+0x54e>
					datalen = list->length;
    2be4:	891a      	ldrh	r2, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    2be6:	0c00      	lsrs	r0, r0, #16
    2be8:	4282      	cmp	r2, r0
    2bea:	bf28      	it	cs
    2bec:	4602      	movcs	r2, r0
				if (setup.wValue == 0x200) {
    2bee:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    2bf2:	f040 81a1 	bne.w	2f38 <usb_isr+0x558>
					if (usb_high_speed) src = usb_config_descriptor_480;
    2bf6:	4b18      	ldr	r3, [pc, #96]	; (2c58 <usb_isr+0x278>)
    2bf8:	491c      	ldr	r1, [pc, #112]	; (2c6c <usb_isr+0x28c>)
    2bfa:	7818      	ldrb	r0, [r3, #0]
    2bfc:	4b1c      	ldr	r3, [pc, #112]	; (2c70 <usb_isr+0x290>)
					memcpy(usb_descriptor_buffer, src, datalen);
    2bfe:	9201      	str	r2, [sp, #4]
    2c00:	2800      	cmp	r0, #0
    2c02:	bf18      	it	ne
    2c04:	4619      	movne	r1, r3
    2c06:	481b      	ldr	r0, [pc, #108]	; (2c74 <usb_isr+0x294>)
    2c08:	f7ff fb7e 	bl	2308 <memcpy>
    2c0c:	4d19      	ldr	r5, [pc, #100]	; (2c74 <usb_isr+0x294>)
    2c0e:	9a01      	ldr	r2, [sp, #4]
    2c10:	e1e1      	b.n	2fd6 <usb_isr+0x5f6>
	switch (setup.wRequestAndType) {
    2c12:	f242 2121 	movw	r1, #8737	; 0x2221
    2c16:	428b      	cmp	r3, r1
    2c18:	d07c      	beq.n	2d14 <usb_isr+0x334>
    2c1a:	d933      	bls.n	2c84 <usb_isr+0x2a4>
    2c1c:	f242 3121 	movw	r1, #8993	; 0x2321
    2c20:	428b      	cmp	r3, r1
    2c22:	f000 8081 	beq.w	2d28 <usb_isr+0x348>
    2c26:	f64f 01c0 	movw	r1, #63680	; 0xf8c0
    2c2a:	428b      	cmp	r3, r1
    2c2c:	f47f af29 	bne.w	2a82 <usb_isr+0xa2>
		if ((setup.wIndex & 0xFF00) != 0) break; // 1=Genre, 4=Compat ID, 5=Properties
    2c30:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
    2c34:	b283      	uxth	r3, r0
    2c36:	f47f af24 	bne.w	2a82 <usb_isr+0xa2>
		setup.wIndex |= 0xEE00; // alter wIndex and treat as normal USB descriptor
    2c3a:	f443 436e 	orr.w	r3, r3, #60928	; 0xee00
    2c3e:	f363 0c0f 	bfi	ip, r3, #0, #16
    2c42:	e7b5      	b.n	2bb0 <usb_isr+0x1d0>
    2c44:	402e0000 	.word	0x402e0000
    2c48:	20000000 	.word	0x20000000
    2c4c:	200091f0 	.word	0x200091f0
    2c50:	20009290 	.word	0x20009290
    2c54:	20009294 	.word	0x20009294
    2c58:	200092b5 	.word	0x200092b5
    2c5c:	200092b6 	.word	0x200092b6
    2c60:	200091ec 	.word	0x200091ec
    2c64:	2000922c 	.word	0x2000922c
    2c68:	20007984 	.word	0x20007984
    2c6c:	60001eb8 	.word	0x60001eb8
    2c70:	60001f1c 	.word	0x60001f1c
    2c74:	20200000 	.word	0x20200000
    2c78:	200091e4 	.word	0x200091e4
    2c7c:	b8c6cf5d 	.word	0xb8c6cf5d
    2c80:	402e01c0 	.word	0x402e01c0
	switch (setup.wRequestAndType) {
    2c84:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    2c88:	d066      	beq.n	2d58 <usb_isr+0x378>
    2c8a:	f242 0121 	movw	r1, #8225	; 0x2021
    2c8e:	428b      	cmp	r3, r1
    2c90:	f47f aef7 	bne.w	2a82 <usb_isr+0xa2>
		if (setup.wLength != 7) break;
    2c94:	0c03      	lsrs	r3, r0, #16
    2c96:	2b07      	cmp	r3, #7
    2c98:	f47f aef3 	bne.w	2a82 <usb_isr+0xa2>
		endpoint0_transfer_data.next = 1;
    2c9c:	4bb2      	ldr	r3, [pc, #712]	; (2f68 <usb_isr+0x588>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
    2c9e:	49b3      	ldr	r1, [pc, #716]	; (2f6c <usb_isr+0x58c>)
		endpoint_queue_head[0].status = 0;
    2ca0:	60f5      	str	r5, [r6, #12]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    2ca2:	60d9      	str	r1, [r3, #12]
		endpoint0_setupdata.bothwords = setupdata;
    2ca4:	49b2      	ldr	r1, [pc, #712]	; (2f70 <usb_isr+0x590>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    2ca6:	60b3      	str	r3, [r6, #8]
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    2ca8:	f8c3 9008 	str.w	r9, [r3, #8]
		endpoint0_setupdata.bothwords = setupdata;
    2cac:	e9c1 2000 	strd	r2, r0, [r1]
		endpoint0_transfer_data.next = 1;
    2cb0:	2201      	movs	r2, #1
    2cb2:	601a      	str	r2, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    2cb4:	4aaf      	ldr	r2, [pc, #700]	; (2f74 <usb_isr+0x594>)
    2cb6:	605a      	str	r2, [r3, #4]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    2cb8:	4aaf      	ldr	r2, [pc, #700]	; (2f78 <usb_isr+0x598>)
    2cba:	611a      	str	r2, [r3, #16]
		USB1_ENDPTPRIME |= (1<<0);
    2cbc:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
    2cc0:	f041 0101 	orr.w	r1, r1, #1
    2cc4:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.pointer3 = addr + 12288;
    2cc8:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    2ccc:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    2cd0:	6159      	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    2cd2:	619a      	str	r2, [r3, #24]
		while (USB1_ENDPTPRIME) ;
    2cd4:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2cd8:	2b00      	cmp	r3, #0
    2cda:	d1fb      	bne.n	2cd4 <usb_isr+0x2f4>
	endpoint0_transfer_ack.next = 1;
    2cdc:	4aa7      	ldr	r2, [pc, #668]	; (2f7c <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    2cde:	64f3      	str	r3, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    2ce0:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
    2ce2:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    2ce4:	64b2      	str	r2, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    2ce6:	6013      	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2ce8:	f248 0380 	movw	r3, #32896	; 0x8080
    2cec:	6053      	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    2cee:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    2cf2:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2cf6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2cfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    2cfe:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    2d02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2d06:	f8ca 3000 	str.w	r3, [sl]
	while (USB1_ENDPTPRIME) ;
    2d0a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2d0e:	2b00      	cmp	r3, #0
    2d10:	d1fb      	bne.n	2d0a <usb_isr+0x32a>
    2d12:	e6ba      	b.n	2a8a <usb_isr+0xaa>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    2d14:	b280      	uxth	r0, r0
    2d16:	b938      	cbnz	r0, 2d28 <usb_isr+0x348>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    2d18:	4b99      	ldr	r3, [pc, #612]	; (2f80 <usb_isr+0x5a0>)
			usb_cdc_line_rtsdtr = setup.wValue;
    2d1a:	f3c2 4207 	ubfx	r2, r2, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    2d1e:	6819      	ldr	r1, [r3, #0]
    2d20:	4b98      	ldr	r3, [pc, #608]	; (2f84 <usb_isr+0x5a4>)
    2d22:	6019      	str	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    2d24:	4b98      	ldr	r3, [pc, #608]	; (2f88 <usb_isr+0x5a8>)
    2d26:	701a      	strb	r2, [r3, #0]
	endpoint0_transfer_ack.next = 1;
    2d28:	4b94      	ldr	r3, [pc, #592]	; (2f7c <usb_isr+0x59c>)
	endpoint0_transfer_ack.pointer0 = 0;
    2d2a:	2200      	movs	r2, #0
    2d2c:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
    2d2e:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    2d30:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    2d32:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    2d34:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2d36:	2280      	movs	r2, #128	; 0x80
    2d38:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    2d3a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    2d3e:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2d42:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2d46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    2d4a:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    2d4e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2d52:	2b00      	cmp	r3, #0
    2d54:	d1fb      	bne.n	2d4e <usb_isr+0x36e>
    2d56:	e698      	b.n	2a8a <usb_isr+0xaa>
		usb_configuration = setup.wValue;
    2d58:	f3c2 4207 	ubfx	r2, r2, #16, #8
    2d5c:	4b8b      	ldr	r3, [pc, #556]	; (2f8c <usb_isr+0x5ac>)
    2d5e:	701a      	strb	r2, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    2d60:	4b8b      	ldr	r3, [pc, #556]	; (2f90 <usb_isr+0x5b0>)
    2d62:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    2d66:	4b8b      	ldr	r3, [pc, #556]	; (2f94 <usb_isr+0x5b4>)
    2d68:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    2d6c:	4b8a      	ldr	r3, [pc, #552]	; (2f98 <usb_isr+0x5b8>)
    2d6e:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		usb_serial_configure();
    2d72:	f000 fbd5 	bl	3520 <usb_serial_configure>
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
    2d76:	2280      	movs	r2, #128	; 0x80
    2d78:	4629      	mov	r1, r5
    2d7a:	4888      	ldr	r0, [pc, #544]	; (2f9c <usb_isr+0x5bc>)
    2d7c:	f003 f910 	bl	5fa0 <memset>
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    2d80:	4b87      	ldr	r3, [pc, #540]	; (2fa0 <usb_isr+0x5c0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2d82:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    2d84:	f8c6 b0a0 	str.w	fp, [r6, #160]	; 0xa0
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    2d88:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
	endpoint0_transfer_ack.next = 1;
    2d8c:	4b7b      	ldr	r3, [pc, #492]	; (2f7c <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    2d8e:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2d90:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.next = 1;
    2d92:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    2d94:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.pointer0 = 0;
    2d96:	609d      	str	r5, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    2d98:	601a      	str	r2, [r3, #0]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    2d9a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    2d9e:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2da2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2da6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    2daa:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    2dae:	f8ca 5000 	str.w	r5, [sl]
	while (USB1_ENDPTPRIME) ;
    2db2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2db6:	2b00      	cmp	r3, #0
    2db8:	d1fb      	bne.n	2db2 <usb_isr+0x3d2>
    2dba:	e666      	b.n	2a8a <usb_isr+0xaa>
	endpoint0_transfer_ack.next = 1;
    2dbc:	4b6f      	ldr	r3, [pc, #444]	; (2f7c <usb_isr+0x59c>)
    2dbe:	2101      	movs	r1, #1
	endpoint_queue_head[1].status = 0;
    2dc0:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    2dc2:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2dc4:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    2dc6:	609d      	str	r5, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    2dc8:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2dca:	6059      	str	r1, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    2dcc:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    2dd0:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2dd4:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    2ddc:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    2de0:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2de4:	2b00      	cmp	r3, #0
    2de6:	d1fb      	bne.n	2de0 <usb_isr+0x400>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    2de8:	0c13      	lsrs	r3, r2, #16
    2dea:	065b      	lsls	r3, r3, #25
    2dec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    2df0:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		return;
    2df4:	e649      	b.n	2a8a <usb_isr+0xaa>
		reply_buffer[0] = usb_configuration;
    2df6:	4b65      	ldr	r3, [pc, #404]	; (2f8c <usb_isr+0x5ac>)
		endpoint0_transmit(reply_buffer, 1, 0);
    2df8:	2101      	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    2dfa:	486a      	ldr	r0, [pc, #424]	; (2fa4 <usb_isr+0x5c4>)
    2dfc:	781b      	ldrb	r3, [r3, #0]
    2dfe:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    2e00:	f7ff fd8c 	bl	291c <endpoint0_transmit.constprop.0>
		return;
    2e04:	e641      	b.n	2a8a <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    2e06:	b283      	uxth	r3, r0
		if (endpoint > 7) break;
    2e08:	f010 0078 	ands.w	r0, r0, #120	; 0x78
    2e0c:	f47f ae39 	bne.w	2a82 <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    2e10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    2e14:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
		reply_buffer[0] = 0;
    2e18:	4a62      	ldr	r2, [pc, #392]	; (2fa4 <usb_isr+0x5c4>)
    2e1a:	8010      	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    2e1c:	0618      	lsls	r0, r3, #24
    2e1e:	f100 809e 	bmi.w	2f5e <usb_isr+0x57e>
    2e22:	07cb      	lsls	r3, r1, #31
    2e24:	d501      	bpl.n	2e2a <usb_isr+0x44a>
			reply_buffer[0] = 1;
    2e26:	2301      	movs	r3, #1
    2e28:	7013      	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    2e2a:	2102      	movs	r1, #2
    2e2c:	485d      	ldr	r0, [pc, #372]	; (2fa4 <usb_isr+0x5c4>)
    2e2e:	f7ff fd75 	bl	291c <endpoint0_transmit.constprop.0>
		return;
    2e32:	e62a      	b.n	2a8a <usb_isr+0xaa>
		if (endpoint > 7) break;
    2e34:	f010 0f78 	tst.w	r0, #120	; 0x78
    2e38:	b283      	uxth	r3, r0
    2e3a:	f47f ae22 	bne.w	2a82 <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    2e3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    2e42:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    2e46:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    2e4a:	bf14      	ite	ne
    2e4c:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    2e50:	f043 0301 	orreq.w	r3, r3, #1
    2e54:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    2e58:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    2e5a:	4b48      	ldr	r3, [pc, #288]	; (2f7c <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    2e5c:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    2e5e:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    2e60:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    2e62:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    2e64:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2e66:	2280      	movs	r2, #128	; 0x80
    2e68:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    2e6a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    2e6e:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2e72:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2e76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    2e7a:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    2e7e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2e82:	2b00      	cmp	r3, #0
    2e84:	d1fb      	bne.n	2e7e <usb_isr+0x49e>
    2e86:	e600      	b.n	2a8a <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    2e88:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    2e8c:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    2e90:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    2e94:	bf14      	ite	ne
    2e96:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    2e9a:	f023 0301 	biceq.w	r3, r3, #1
    2e9e:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    2ea2:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    2ea4:	4b35      	ldr	r3, [pc, #212]	; (2f7c <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    2ea6:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    2ea8:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    2eaa:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    2eac:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    2eae:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2eb0:	2280      	movs	r2, #128	; 0x80
    2eb2:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    2eb4:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    2eb8:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2ebc:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2ec0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    2ec4:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    2ec8:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2ecc:	2b00      	cmp	r3, #0
    2ece:	d1fb      	bne.n	2ec8 <usb_isr+0x4e8>
    2ed0:	e5db      	b.n	2a8a <usb_isr+0xaa>
				endpoint0_notify_mask = 0;
    2ed2:	2000      	movs	r0, #0
    2ed4:	6008      	str	r0, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    2ed6:	4926      	ldr	r1, [pc, #152]	; (2f70 <usb_isr+0x590>)
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    2ed8:	880c      	ldrh	r4, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    2eda:	6848      	ldr	r0, [r1, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    2edc:	f242 0121 	movw	r1, #8225	; 0x2021
    2ee0:	428c      	cmp	r4, r1
    2ee2:	f47f ae25 	bne.w	2b30 <usb_isr+0x150>
    2ee6:	b280      	uxth	r0, r0
    2ee8:	2800      	cmp	r0, #0
    2eea:	f47f ae21 	bne.w	2b30 <usb_isr+0x150>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    2eee:	492e      	ldr	r1, [pc, #184]	; (2fa8 <usb_isr+0x5c8>)
    2ef0:	4c2e      	ldr	r4, [pc, #184]	; (2fac <usb_isr+0x5cc>)
    2ef2:	c903      	ldmia	r1, {r0, r1}
    2ef4:	80a1      	strh	r1, [r4, #4]
		if (usb_cdc_line_coding[0] == 134) {
    2ef6:	2886      	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    2ef8:	ea4f 4111 	mov.w	r1, r1, lsr #16
    2efc:	6020      	str	r0, [r4, #0]
    2efe:	71a1      	strb	r1, [r4, #6]
		if (usb_cdc_line_coding[0] == 134) {
    2f00:	f47f ae16 	bne.w	2b30 <usb_isr+0x150>
	__disable_irq();
    2f04:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    2f06:	482a      	ldr	r0, [pc, #168]	; (2fb0 <usb_isr+0x5d0>)
    2f08:	7801      	ldrb	r1, [r0, #0]
    2f0a:	f041 0108 	orr.w	r1, r1, #8
    2f0e:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    2f10:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    2f14:	060d      	lsls	r5, r1, #24
    2f16:	d405      	bmi.n	2f24 <usb_isr+0x544>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    2f18:	2080      	movs	r0, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    2f1a:	4301      	orrs	r1, r0
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    2f1c:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    2f20:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	__enable_irq();
    2f24:	b662      	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    2f26:	4a23      	ldr	r2, [pc, #140]	; (2fb4 <usb_isr+0x5d4>)
    2f28:	2150      	movs	r1, #80	; 0x50
    2f2a:	7011      	strb	r1, [r2, #0]
    2f2c:	e600      	b.n	2b30 <usb_isr+0x150>
				if (datalen > setup.wLength) datalen = setup.wLength;
    2f2e:	0c00      	lsrs	r0, r0, #16
					datalen = *(list->addr);
    2f30:	782a      	ldrb	r2, [r5, #0]
    2f32:	4282      	cmp	r2, r0
    2f34:	bf28      	it	cs
    2f36:	4602      	movcs	r2, r0
				} else if (setup.wValue == 0x700) {
    2f38:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
    2f3c:	d144      	bne.n	2fc8 <usb_isr+0x5e8>
					if (usb_high_speed) src = usb_config_descriptor_12;
    2f3e:	4b1e      	ldr	r3, [pc, #120]	; (2fb8 <usb_isr+0x5d8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    2f40:	4d1e      	ldr	r5, [pc, #120]	; (2fbc <usb_isr+0x5dc>)
					if (usb_high_speed) src = usb_config_descriptor_12;
    2f42:	7818      	ldrb	r0, [r3, #0]
    2f44:	491e      	ldr	r1, [pc, #120]	; (2fc0 <usb_isr+0x5e0>)
    2f46:	4b1f      	ldr	r3, [pc, #124]	; (2fc4 <usb_isr+0x5e4>)
					memcpy(usb_descriptor_buffer, src, datalen);
    2f48:	9201      	str	r2, [sp, #4]
    2f4a:	2800      	cmp	r0, #0
    2f4c:	bf18      	it	ne
    2f4e:	4619      	movne	r1, r3
    2f50:	4628      	mov	r0, r5
    2f52:	f7ff f9d9 	bl	2308 <memcpy>
					usb_descriptor_buffer[1] = 7;
    2f56:	2307      	movs	r3, #7
    2f58:	706b      	strb	r3, [r5, #1]
    2f5a:	9a01      	ldr	r2, [sp, #4]
    2f5c:	e03b      	b.n	2fd6 <usb_isr+0x5f6>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    2f5e:	03c9      	lsls	r1, r1, #15
    2f60:	f53f af61 	bmi.w	2e26 <usb_isr+0x446>
    2f64:	e761      	b.n	2e2a <usb_isr+0x44a>
    2f66:	bf00      	nop
    2f68:	20008ae0 	.word	0x20008ae0
    2f6c:	2000a1e4 	.word	0x2000a1e4
    2f70:	20008d40 	.word	0x20008d40
    2f74:	00070080 	.word	0x00070080
    2f78:	2000b1e4 	.word	0x2000b1e4
    2f7c:	20008ac0 	.word	0x20008ac0
    2f80:	2000927c 	.word	0x2000927c
    2f84:	2000928c 	.word	0x2000928c
    2f88:	200092b3 	.word	0x200092b3
    2f8c:	200092b4 	.word	0x200092b4
    2f90:	00cc0002 	.word	0x00cc0002
    2f94:	000200c8 	.word	0x000200c8
    2f98:	00c80002 	.word	0x00c80002
    2f9c:	20000080 	.word	0x20000080
    2fa0:	74d59319 	.word	0x74d59319
    2fa4:	2000922c 	.word	0x2000922c
    2fa8:	200091e4 	.word	0x200091e4
    2fac:	20009284 	.word	0x20009284
    2fb0:	200092af 	.word	0x200092af
    2fb4:	200092b6 	.word	0x200092b6
    2fb8:	200092b5 	.word	0x200092b5
    2fbc:	20200000 	.word	0x20200000
    2fc0:	60001f1c 	.word	0x60001f1c
    2fc4:	60001eb8 	.word	0x60001eb8
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    2fc8:	4629      	mov	r1, r5
    2fca:	4d10      	ldr	r5, [pc, #64]	; (300c <usb_isr+0x62c>)
    2fcc:	9201      	str	r2, [sp, #4]
    2fce:	4628      	mov	r0, r5
    2fd0:	f7ff f99a 	bl	2308 <memcpy>
    2fd4:	9a01      	ldr	r2, [sp, #4]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    2fd6:	f025 031f 	bic.w	r3, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
    2fda:	4415      	add	r5, r2
	asm("dsb");
    2fdc:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    2fe0:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    2fe4:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    2fe8:	3320      	adds	r3, #32
	} while (location < end_addr);
    2fea:	429d      	cmp	r5, r3
    2fec:	d8fa      	bhi.n	2fe4 <usb_isr+0x604>
	asm("dsb");
    2fee:	f3bf 8f4f 	dsb	sy
	asm("isb");
    2ff2:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    2ff6:	4805      	ldr	r0, [pc, #20]	; (300c <usb_isr+0x62c>)
    2ff8:	4611      	mov	r1, r2
    2ffa:	f7ff fc8f 	bl	291c <endpoint0_transmit.constprop.0>
				return;
    2ffe:	e544      	b.n	2a8a <usb_isr+0xaa>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    3000:	2003      	movs	r0, #3
    3002:	f7ff fcd7 	bl	29b4 <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    3006:	f00b fdcb 	bl	eba0 <___reboot_Teensyduino__veneer>
    300a:	bf00      	nop
    300c:	20200000 	.word	0x20200000

00003010 <usb_config_rx>:
{
    3010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3014:	461f      	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    3016:	1e83      	subs	r3, r0, #2
    3018:	2b02      	cmp	r3, #2
    301a:	d901      	bls.n	3020 <usb_config_rx+0x10>
}
    301c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    3020:	f8df 904c 	ldr.w	r9, [pc, #76]	; 3070 <usb_config_rx+0x60>
    3024:	4615      	mov	r5, r2
    3026:	460c      	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
    3028:	223c      	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    302a:	eb09 18c0 	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    302e:	4606      	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    3030:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    3034:	2100      	movs	r1, #0
    3036:	f108 0004 	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    303a:	0424      	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
    303c:	f002 ffb0 	bl	5fa0 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    3040:	fab5 f285 	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
    3044:	2301      	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    3046:	0952      	lsrs	r2, r2, #5
    3048:	ea44 7442 	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
    304c:	f849 400a 	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    3050:	f8c8 7038 	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    3054:	f8c8 3008 	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    3058:	2f00      	cmp	r7, #0
    305a:	d0df      	beq.n	301c <usb_config_rx+0xc>
    305c:	4a03      	ldr	r2, [pc, #12]	; (306c <usb_config_rx+0x5c>)
    305e:	40b3      	lsls	r3, r6
    3060:	6811      	ldr	r1, [r2, #0]
    3062:	430b      	orrs	r3, r1
    3064:	6013      	str	r3, [r2, #0]
}
    3066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    306a:	bf00      	nop
    306c:	200091f0 	.word	0x200091f0
    3070:	20000000 	.word	0x20000000

00003074 <usb_config_tx>:
{
    3074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3078:	460d      	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    307a:	1e81      	subs	r1, r0, #2
    307c:	2902      	cmp	r1, #2
    307e:	d901      	bls.n	3084 <usb_config_tx+0x10>
}
    3080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    3084:	01c7      	lsls	r7, r0, #7
    3086:	f8df 904c 	ldr.w	r9, [pc, #76]	; 30d4 <usb_config_tx+0x60>
    308a:	4692      	mov	sl, r2
    308c:	4604      	mov	r4, r0
    308e:	3740      	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    3090:	223c      	movs	r2, #60	; 0x3c
    3092:	2100      	movs	r1, #0
    3094:	461e      	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    3096:	eb09 0807 	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    309a:	042d      	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
    309c:	f108 0004 	add.w	r0, r8, #4
    30a0:	f002 ff7e 	bl	5fa0 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    30a4:	faba f28a 	clz	r2, sl
    30a8:	0952      	lsrs	r2, r2, #5
    30aa:	ea45 7242 	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
    30ae:	f849 2007 	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
    30b2:	2201      	movs	r2, #1
	qh->callback_function = callback;
    30b4:	f8c8 6038 	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    30b8:	f8c8 2008 	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    30bc:	2e00      	cmp	r6, #0
    30be:	d0df      	beq.n	3080 <usb_config_tx+0xc>
    30c0:	4b03      	ldr	r3, [pc, #12]	; (30d0 <usb_config_tx+0x5c>)
    30c2:	3410      	adds	r4, #16
    30c4:	6819      	ldr	r1, [r3, #0]
    30c6:	40a2      	lsls	r2, r4
    30c8:	430a      	orrs	r2, r1
    30ca:	601a      	str	r2, [r3, #0]
}
    30cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    30d0:	200091f0 	.word	0x200091f0
    30d4:	20000000 	.word	0x20000000

000030d8 <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    30d8:	0412      	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    30da:	6081      	str	r1, [r0, #8]
	transfer->callback_param = param;
    30dc:	61c3      	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
    30de:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
    30e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
    30e6:	b410      	push	{r4}
	transfer->next = 1;
    30e8:	2401      	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
    30ea:	6042      	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
    30ec:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
    30f0:	6004      	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
    30f2:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
    30f6:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
    30fa:	60c4      	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
    30fc:	6181      	str	r1, [r0, #24]
}
    30fe:	f85d 4b04 	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
    3102:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
    3106:	4770      	bx	lr

00003108 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    3108:	1e83      	subs	r3, r0, #2
{
    310a:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    310c:	2b02      	cmp	r3, #2
    310e:	d900      	bls.n	3112 <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    3110:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    3112:	4b06      	ldr	r3, [pc, #24]	; (312c <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
    3114:	f100 0110 	add.w	r1, r0, #16
    3118:	f04f 0c01 	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    311c:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    3120:	fa0c f101 	lsl.w	r1, ip, r1
    3124:	3040      	adds	r0, #64	; 0x40
    3126:	f7ff bb99 	b.w	285c <schedule_transfer>
    312a:	bf00      	nop
    312c:	20000000 	.word	0x20000000

00003130 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    3130:	1e83      	subs	r3, r0, #2
{
    3132:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    3134:	2b02      	cmp	r3, #2
    3136:	d900      	bls.n	313a <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    3138:	4770      	bx	lr
	uint32_t mask = 1 << endpoint_number;
    313a:	2101      	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    313c:	4b02      	ldr	r3, [pc, #8]	; (3148 <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
    313e:	4081      	lsls	r1, r0
    3140:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    3144:	f7ff bb8a 	b.w	285c <schedule_transfer>
    3148:	20000000 	.word	0x20000000

0000314c <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    314c:	6840      	ldr	r0, [r0, #4]
#endif
}
    314e:	4770      	bx	lr

00003150 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    3150:	4a12      	ldr	r2, [pc, #72]	; (319c <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    3152:	4b13      	ldr	r3, [pc, #76]	; (31a0 <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    3154:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    3158:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    315c:	4298      	cmp	r0, r3
{
    315e:	b510      	push	{r4, lr}
    3160:	b084      	sub	sp, #16
	if (num < 10000000) num = num * 10;
    3162:	d202      	bcs.n	316a <usb_init_serialnumber+0x1a>
    3164:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    3168:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    316a:	4c0e      	ldr	r4, [pc, #56]	; (31a4 <usb_init_serialnumber+0x54>)
    316c:	a901      	add	r1, sp, #4
    316e:	220a      	movs	r2, #10
    3170:	f7ff f964 	bl	243c <ultoa>
	for (i=0; i<10; i++) {
    3174:	a901      	add	r1, sp, #4
    3176:	2300      	movs	r3, #0
    3178:	4620      	mov	r0, r4
		char c = buf[i];
    317a:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    317e:	3301      	adds	r3, #1
		if (!c) break;
    3180:	b13a      	cbz	r2, 3192 <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
    3182:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    3184:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    3188:	d1f7      	bne.n	317a <usb_init_serialnumber+0x2a>
    318a:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    318c:	7023      	strb	r3, [r4, #0]
}
    318e:	b004      	add	sp, #16
    3190:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    3192:	005b      	lsls	r3, r3, #1
    3194:	b2db      	uxtb	r3, r3
    3196:	7023      	strb	r3, [r4, #0]
}
    3198:	b004      	add	sp, #16
    319a:	bd10      	pop	{r4, pc}
    319c:	401f4400 	.word	0x401f4400
    31a0:	00989680 	.word	0x00989680
    31a4:	20008414 	.word	0x20008414

000031a8 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    31a8:	f000 bad8 	b.w	375c <usb_serial_flush_input>

000031ac <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    31ac:	f000 baa8 	b.w	3700 <usb_serial_peekchar>

000031b0 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    31b0:	f000 bb66 	b.w	3880 <usb_serial_flush_output>

000031b4 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    31b4:	f000 bb3c 	b.w	3830 <usb_serial_write_buffer_free>

000031b8 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    31b8:	4608      	mov	r0, r1
    31ba:	4611      	mov	r1, r2
    31bc:	f000 bb2c 	b.w	3818 <usb_serial_write>

000031c0 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    31c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    31c2:	4c14      	ldr	r4, [pc, #80]	; (3214 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    31c4:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    31c8:	4e13      	ldr	r6, [pc, #76]	; (3218 <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    31ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    31ce:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    31d2:	4f12      	ldr	r7, [pc, #72]	; (321c <rx_queue_transfer+0x5c>)
    31d4:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
    31d8:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    31da:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    31de:	4621      	mov	r1, r4
    31e0:	883a      	ldrh	r2, [r7, #0]
    31e2:	4630      	mov	r0, r6
    31e4:	f7ff ff78 	bl	30d8 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    31e8:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    31ea:	4423      	add	r3, r4
	asm("dsb");
    31ec:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    31f0:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    31f4:	3420      	adds	r4, #32
	} while (location < end_addr);
    31f6:	42a3      	cmp	r3, r4
    31f8:	d8fa      	bhi.n	31f0 <rx_queue_transfer+0x30>
	asm("dsb");
    31fa:	f3bf 8f4f 	dsb	sy
	asm("isb");
    31fe:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    3202:	2003      	movs	r0, #3
    3204:	4631      	mov	r1, r6
    3206:	f7ff ff93 	bl	3130 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    320a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    320e:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
    3212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3214:	20200080 	.word	0x20200080
    3218:	20008b00 	.word	0x20008b00
    321c:	200092a0 	.word	0x200092a0

00003220 <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    3220:	4b24      	ldr	r3, [pc, #144]	; (32b4 <rx_event+0x94>)
{
    3222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    3226:	881c      	ldrh	r4, [r3, #0]
    3228:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
    322a:	69c5      	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    322c:	f3c3 430e 	ubfx	r3, r3, #16, #15
    3230:	1ae4      	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    3232:	2c00      	cmp	r4, #0
    3234:	dd24      	ble.n	3280 <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
    3236:	4920      	ldr	r1, [pc, #128]	; (32b8 <rx_event+0x98>)
		if (head != rx_tail) {
    3238:	4820      	ldr	r0, [pc, #128]	; (32bc <rx_event+0x9c>)
		uint32_t head = rx_head;
    323a:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    323c:	7800      	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    323e:	b2d3      	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
    3240:	4e1f      	ldr	r6, [pc, #124]	; (32c0 <rx_event+0xa0>)
		if (head != rx_tail) {
    3242:	4282      	cmp	r2, r0
			uint32_t ii = rx_list[head];
    3244:	481f      	ldr	r0, [pc, #124]	; (32c4 <rx_event+0xa4>)
		if (head != rx_tail) {
    3246:	d007      	beq.n	3258 <rx_event+0x38>
			uint32_t ii = rx_list[head];
    3248:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    324c:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    3250:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    3254:	4294      	cmp	r4, r2
    3256:	d918      	bls.n	328a <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    3258:	3301      	adds	r3, #1
		rx_index[i] = 0;
    325a:	2200      	movs	r2, #0
		rx_count[i] = len;
    325c:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    3260:	2b08      	cmp	r3, #8
		rx_index[i] = 0;
    3262:	4e19      	ldr	r6, [pc, #100]	; (32c8 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    3264:	bf88      	it	hi
    3266:	4613      	movhi	r3, r2
		rx_index[i] = 0;
    3268:	f826 2015 	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
    326c:	bf98      	it	ls
    326e:	b2da      	uxtbls	r2, r3
		rx_list[head] = i;
    3270:	54c5      	strb	r5, [r0, r3]
		rx_available += len;
    3272:	4b16      	ldr	r3, [pc, #88]	; (32cc <rx_event+0xac>)
		rx_head = head;
    3274:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    3276:	681a      	ldr	r2, [r3, #0]
    3278:	4414      	add	r4, r2
    327a:	601c      	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    327c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
    3280:	4628      	mov	r0, r5
}
    3282:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
    3286:	f7ff bf9b 	b.w	31c0 <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    328a:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    328e:	4910      	ldr	r1, [pc, #64]	; (32d0 <rx_event+0xb0>)
    3290:	4622      	mov	r2, r4
				rx_count[ii] = count + len;
    3292:	4427      	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    3294:	4408      	add	r0, r1
    3296:	eb01 2145 	add.w	r1, r1, r5, lsl #9
    329a:	f7ff f835 	bl	2308 <memcpy>
				rx_available += len;
    329e:	4a0b      	ldr	r2, [pc, #44]	; (32cc <rx_event+0xac>)
				rx_queue_transfer(i);
    32a0:	4628      	mov	r0, r5
				rx_count[ii] = count + len;
    32a2:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    32a6:	6813      	ldr	r3, [r2, #0]
    32a8:	4423      	add	r3, r4
}
    32aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
    32ae:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
    32b0:	f7ff bf86 	b.w	31c0 <rx_queue_transfer>
    32b4:	200092a0 	.word	0x200092a0
    32b8:	200092ad 	.word	0x200092ad
    32bc:	200092ae 	.word	0x200092ae
    32c0:	20009238 	.word	0x20009238
    32c4:	20009258 	.word	0x20009258
    32c8:	20009248 	.word	0x20009248
    32cc:	20009234 	.word	0x20009234
    32d0:	20200080 	.word	0x20200080

000032d4 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    32d4:	4b1d      	ldr	r3, [pc, #116]	; (334c <usb_serial_flush_callback+0x78>)
    32d6:	781a      	ldrb	r2, [r3, #0]
    32d8:	2a00      	cmp	r2, #0
    32da:	d136      	bne.n	334a <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
    32dc:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    32e0:	4a1b      	ldr	r2, [pc, #108]	; (3350 <usb_serial_flush_callback+0x7c>)
    32e2:	7812      	ldrb	r2, [r2, #0]
    32e4:	b38a      	cbz	r2, 334a <usb_serial_flush_callback+0x76>
{
    32e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
    32ea:	4d1a      	ldr	r5, [pc, #104]	; (3354 <usb_serial_flush_callback+0x80>)
    32ec:	882a      	ldrh	r2, [r5, #0]
    32ee:	b352      	cbz	r2, 3346 <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    32f0:	4e19      	ldr	r6, [pc, #100]	; (3358 <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    32f2:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    32f6:	4f19      	ldr	r7, [pc, #100]	; (335c <usb_serial_flush_callback+0x88>)
    32f8:	7832      	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    32fa:	4c19      	ldr	r4, [pc, #100]	; (3360 <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    32fc:	eb07 1742 	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    3300:	eb04 24c2 	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    3304:	4642      	mov	r2, r8
    3306:	4638      	mov	r0, r7
    3308:	4621      	mov	r1, r4
    330a:	f7ff fee5 	bl	30d8 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    330e:	eb04 0208 	add.w	r2, r4, r8
	asm("dsb");
    3312:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    3316:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    331a:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    331e:	3420      	adds	r4, #32
	} while (location < end_addr);
    3320:	42a2      	cmp	r2, r4
    3322:	d8fa      	bhi.n	331a <usb_serial_flush_callback+0x46>
	asm("dsb");
    3324:	f3bf 8f4f 	dsb	sy
	asm("isb");
    3328:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    332c:	2004      	movs	r0, #4
    332e:	4639      	mov	r1, r7
    3330:	f7ff feea 	bl	3108 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    3334:	7833      	ldrb	r3, [r6, #0]
    3336:	3301      	adds	r3, #1
    3338:	b2db      	uxtb	r3, r3
    333a:	2b03      	cmp	r3, #3
    333c:	bf88      	it	hi
    333e:	2300      	movhi	r3, #0
    3340:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    3342:	2300      	movs	r3, #0
    3344:	802b      	strh	r3, [r5, #0]
}
    3346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    334a:	4770      	bx	lr
    334c:	200092b2 	.word	0x200092b2
    3350:	200092b4 	.word	0x200092b4
    3354:	200092a2 	.word	0x200092a2
    3358:	200092b1 	.word	0x200092b1
    335c:	20008c00 	.word	0x20008c00
    3360:	20201080 	.word	0x20201080

00003364 <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
    3364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3368:	b085      	sub	sp, #20
	while (size > 0) {
    336a:	e9cd 1001 	strd	r1, r0, [sp, #4]
    336e:	2900      	cmp	r1, #0
    3370:	f000 80bf 	beq.w	34f2 <usb_serial_write.part.0+0x18e>
	uint32_t sent=0;
    3374:	2300      	movs	r3, #0
    3376:	4c60      	ldr	r4, [pc, #384]	; (34f8 <usb_serial_write.part.0+0x194>)
    3378:	f8df 8198 	ldr.w	r8, [pc, #408]	; 3514 <usb_serial_write.part.0+0x1b0>
    337c:	f8df a198 	ldr.w	sl, [pc, #408]	; 3518 <usb_serial_write.part.0+0x1b4>
				wait_begin_at = systick_millis_count;
    3380:	4f5e      	ldr	r7, [pc, #376]	; (34fc <usb_serial_write.part.0+0x198>)
	uint32_t sent=0;
    3382:	9300      	str	r3, [sp, #0]
		tx_noautoflush = 1;
    3384:	2301      	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    3386:	4a5e      	ldr	r2, [pc, #376]	; (3500 <usb_serial_write.part.0+0x19c>)
		tx_noautoflush = 1;
    3388:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    338a:	4b5e      	ldr	r3, [pc, #376]	; (3504 <usb_serial_write.part.0+0x1a0>)
    338c:	7819      	ldrb	r1, [r3, #0]
		while (!tx_available) {
    338e:	f8b8 3000 	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
    3392:	eb02 1941 	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
    3396:	2b00      	cmp	r3, #0
    3398:	f040 80a7 	bne.w	34ea <usb_serial_write.part.0+0x186>
		uint32_t wait_begin_at=0;
    339c:	461e      	mov	r6, r3
		int waiting=0;
    339e:	461d      	mov	r5, r3
			tx_noautoflush = 0;
    33a0:	469b      	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
    33a2:	4648      	mov	r0, r9
    33a4:	f7ff fed2 	bl	314c <usb_transfer_status>
			if (!(status & 0x80)) {
    33a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    33ac:	f000 808c 	beq.w	34c8 <usb_serial_write.part.0+0x164>
			asm("dsb" ::: "memory");
    33b0:	f3bf 8f4f 	dsb	sy
			if (transmit_previous_timeout) return sent;
    33b4:	f89a 3000 	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
    33b8:	f884 b000 	strb.w	fp, [r4]
			if (!waiting) {
    33bc:	b905      	cbnz	r5, 33c0 <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
    33be:	683e      	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
    33c0:	2b00      	cmp	r3, #0
    33c2:	d17d      	bne.n	34c0 <usb_serial_write.part.0+0x15c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    33c4:	683b      	ldr	r3, [r7, #0]
    33c6:	1b9b      	subs	r3, r3, r6
    33c8:	2b78      	cmp	r3, #120	; 0x78
    33ca:	f200 8087 	bhi.w	34dc <usb_serial_write.part.0+0x178>
			if (!usb_configuration) return sent;
    33ce:	4b4e      	ldr	r3, [pc, #312]	; (3508 <usb_serial_write.part.0+0x1a4>)
    33d0:	781b      	ldrb	r3, [r3, #0]
    33d2:	2b00      	cmp	r3, #0
    33d4:	d074      	beq.n	34c0 <usb_serial_write.part.0+0x15c>
			yield();
    33d6:	f000 fa9d 	bl	3914 <yield>
			tx_noautoflush = 1;
    33da:	2201      	movs	r2, #1
		while (!tx_available) {
    33dc:	f8b8 3000 	ldrh.w	r3, [r8]
    33e0:	4615      	mov	r5, r2
			tx_noautoflush = 1;
    33e2:	7022      	strb	r2, [r4, #0]
		while (!tx_available) {
    33e4:	2b00      	cmp	r3, #0
    33e6:	d0dc      	beq.n	33a2 <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    33e8:	4a46      	ldr	r2, [pc, #280]	; (3504 <usb_serial_write.part.0+0x1a0>)
    33ea:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    33ee:	7811      	ldrb	r1, [r2, #0]
    33f0:	461a      	mov	r2, r3
    33f2:	eb00 20c1 	add.w	r0, r0, r1, lsl #11
    33f6:	4d45      	ldr	r5, [pc, #276]	; (350c <usb_serial_write.part.0+0x1a8>)
    33f8:	02c9      	lsls	r1, r1, #11
    33fa:	4428      	add	r0, r5
		if (size >= tx_available) {
    33fc:	9d01      	ldr	r5, [sp, #4]
    33fe:	4295      	cmp	r5, r2
    3400:	d217      	bcs.n	3432 <usb_serial_write.part.0+0xce>
			memcpy(txdata, data, size);
    3402:	9303      	str	r3, [sp, #12]
    3404:	e9dd 5101 	ldrd	r5, r1, [sp, #4]
    3408:	462a      	mov	r2, r5
    340a:	f7fe ff7d 	bl	2308 <memcpy>
			tx_available -= size;
    340e:	9b03      	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    3410:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
    3414:	1b5b      	subs	r3, r3, r5
    3416:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    341a:	4b3d      	ldr	r3, [pc, #244]	; (3510 <usb_serial_write.part.0+0x1ac>)
    341c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
    3420:	f3bf 8f4f 	dsb	sy
			sent += size;
    3424:	9800      	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
    3426:	2300      	movs	r3, #0
			sent += size;
    3428:	4428      	add	r0, r5
		tx_noautoflush = 0;
    342a:	7023      	strb	r3, [r4, #0]
}
    342c:	b005      	add	sp, #20
    342e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    3432:	4b36      	ldr	r3, [pc, #216]	; (350c <usb_serial_write.part.0+0x1a8>)
    3434:	18cd      	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
    3436:	9902      	ldr	r1, [sp, #8]
    3438:	f7fe ff66 	bl	2308 <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    343c:	2300      	movs	r3, #0
    343e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    3442:	4629      	mov	r1, r5
    3444:	4648      	mov	r0, r9
    3446:	f7ff fe47 	bl	30d8 <usb_prepare_transfer>
	asm("dsb");
    344a:	f3bf 8f4f 	dsb	sy
    344e:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    3452:	f505 6300 	add.w	r3, r5, #2048	; 0x800
    3456:	4293      	cmp	r3, r2
    3458:	bf34      	ite	cc
    345a:	2301      	movcc	r3, #1
    345c:	2340      	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    345e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    3462:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    3466:	f8c2 5f70 	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
    346a:	3520      	adds	r5, #32
	} while (location < end_addr);
    346c:	42ab      	cmp	r3, r5
    346e:	d1fa      	bne.n	3466 <usb_serial_write.part.0+0x102>
	asm("dsb");
    3470:	f3bf 8f4f 	dsb	sy
	asm("isb");
    3474:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    3478:	2004      	movs	r0, #4
    347a:	4649      	mov	r1, r9
    347c:	f7ff fe44 	bl	3108 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    3480:	4a20      	ldr	r2, [pc, #128]	; (3504 <usb_serial_write.part.0+0x1a0>)
    3482:	7813      	ldrb	r3, [r2, #0]
    3484:	3301      	adds	r3, #1
    3486:	b2db      	uxtb	r3, r3
    3488:	2b03      	cmp	r3, #3
    348a:	bf84      	itt	hi
    348c:	2300      	movhi	r3, #0
    348e:	4a1d      	ldrhi	r2, [pc, #116]	; (3504 <usb_serial_write.part.0+0x1a0>)
    3490:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    3492:	f8b8 3000 	ldrh.w	r3, [r8]
    3496:	9a01      	ldr	r2, [sp, #4]
    3498:	1ad1      	subs	r1, r2, r3
			sent += tx_available;
    349a:	9a00      	ldr	r2, [sp, #0]
    349c:	441a      	add	r2, r3
			size -= tx_available;
    349e:	9101      	str	r1, [sp, #4]
			sent += tx_available;
    34a0:	9200      	str	r2, [sp, #0]
			data += tx_available;
    34a2:	9a02      	ldr	r2, [sp, #8]
    34a4:	441a      	add	r2, r3
			tx_available = 0;
    34a6:	2300      	movs	r3, #0
			data += tx_available;
    34a8:	9202      	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
    34aa:	4a19      	ldr	r2, [pc, #100]	; (3510 <usb_serial_write.part.0+0x1ac>)
			tx_available = 0;
    34ac:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
    34b0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    34b4:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
    34b8:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
    34ba:	2900      	cmp	r1, #0
    34bc:	f47f af62 	bne.w	3384 <usb_serial_write.part.0+0x20>
	return sent;
    34c0:	9800      	ldr	r0, [sp, #0]
}
    34c2:	b005      	add	sp, #20
    34c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
    34c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    34cc:	4b0d      	ldr	r3, [pc, #52]	; (3504 <usb_serial_write.part.0+0x1a0>)
				transmit_previous_timeout = 0;
    34ce:	f88a 0000 	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    34d2:	7819      	ldrb	r1, [r3, #0]
				break;
    34d4:	4613      	mov	r3, r2
				tx_available = TX_SIZE;
    34d6:	f8a8 2000 	strh.w	r2, [r8]
				break;
    34da:	e78a      	b.n	33f2 <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
    34dc:	2301      	movs	r3, #1
				return sent;
    34de:	9800      	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
    34e0:	f88a 3000 	strb.w	r3, [sl]
}
    34e4:	b005      	add	sp, #20
    34e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    34ea:	461a      	mov	r2, r3
    34ec:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    34f0:	e77f      	b.n	33f2 <usb_serial_write.part.0+0x8e>
	while (size > 0) {
    34f2:	9801      	ldr	r0, [sp, #4]
	return sent;
    34f4:	e7e5      	b.n	34c2 <usb_serial_write.part.0+0x15e>
    34f6:	bf00      	nop
    34f8:	200092b2 	.word	0x200092b2
    34fc:	2000927c 	.word	0x2000927c
    3500:	20008c00 	.word	0x20008c00
    3504:	200092b1 	.word	0x200092b1
    3508:	200092b4 	.word	0x200092b4
    350c:	20201080 	.word	0x20201080
    3510:	402e0000 	.word	0x402e0000
    3514:	200092a2 	.word	0x200092a2
    3518:	200092b0 	.word	0x200092b0

0000351c <usb_serial_reset>:
}
    351c:	4770      	bx	lr
    351e:	bf00      	nop

00003520 <usb_serial_configure>:
	if (usb_high_speed) {
    3520:	4b2d      	ldr	r3, [pc, #180]	; (35d8 <usb_serial_configure+0xb8>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    3522:	2100      	movs	r1, #0
    3524:	2280      	movs	r2, #128	; 0x80
    3526:	482d      	ldr	r0, [pc, #180]	; (35dc <usb_serial_configure+0xbc>)
{
    3528:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    352a:	781b      	ldrb	r3, [r3, #0]
	tx_head = 0;
    352c:	2400      	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    352e:	4d2c      	ldr	r5, [pc, #176]	; (35e0 <usb_serial_configure+0xc0>)
	if (usb_high_speed) {
    3530:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
    3532:	4e2c      	ldr	r6, [pc, #176]	; (35e4 <usb_serial_configure+0xc4>)
	if (usb_high_speed) {
    3534:	bf0c      	ite	eq
    3536:	2340      	moveq	r3, #64	; 0x40
    3538:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    353c:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    353e:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    3540:	f002 fd2e 	bl	5fa0 <memset>
	tx_head = 0;
    3544:	4a28      	ldr	r2, [pc, #160]	; (35e8 <usb_serial_configure+0xc8>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    3546:	4621      	mov	r1, r4
	tx_available = 0;
    3548:	4b28      	ldr	r3, [pc, #160]	; (35ec <usb_serial_configure+0xcc>)
	tx_head = 0;
    354a:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    354c:	f44f 7280 	mov.w	r2, #256	; 0x100
    3550:	4827      	ldr	r0, [pc, #156]	; (35f0 <usb_serial_configure+0xd0>)
	tx_available = 0;
    3552:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    3554:	f002 fd24 	bl	5fa0 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    3558:	4a26      	ldr	r2, [pc, #152]	; (35f4 <usb_serial_configure+0xd4>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    355a:	2110      	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
    355c:	4b26      	ldr	r3, [pc, #152]	; (35f8 <usb_serial_configure+0xd8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    355e:	2002      	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
    3560:	e9c2 4400 	strd	r4, r4, [r2]
    3564:	e9c2 4402 	strd	r4, r4, [r2, #8]
	rx_head = 0;
    3568:	4a24      	ldr	r2, [pc, #144]	; (35fc <usb_serial_configure+0xdc>)
	memset(rx_index, 0, sizeof(rx_index));
    356a:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
    356e:	7014      	strb	r4, [r2, #0]
	rx_available = 0;
    3570:	4a23      	ldr	r2, [pc, #140]	; (3600 <usb_serial_configure+0xe0>)
	memset(rx_index, 0, sizeof(rx_index));
    3572:	e9c3 4402 	strd	r4, r4, [r3, #8]
	rx_tail = 0;
    3576:	4b23      	ldr	r3, [pc, #140]	; (3604 <usb_serial_configure+0xe4>)
    3578:	701c      	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    357a:	4623      	mov	r3, r4
	rx_available = 0;
    357c:	6014      	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    357e:	4622      	mov	r2, r4
    3580:	f7ff fd78 	bl	3074 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    3584:	4622      	mov	r2, r4
    3586:	8831      	ldrh	r1, [r6, #0]
    3588:	2003      	movs	r0, #3
    358a:	4b1f      	ldr	r3, [pc, #124]	; (3608 <usb_serial_configure+0xe8>)
    358c:	f7ff fd40 	bl	3010 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    3590:	4623      	mov	r3, r4
    3592:	2201      	movs	r2, #1
    3594:	8829      	ldrh	r1, [r5, #0]
    3596:	2004      	movs	r0, #4
    3598:	f7ff fd6c 	bl	3074 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    359c:	4620      	mov	r0, r4
    359e:	3401      	adds	r4, #1
    35a0:	f7ff fe0e 	bl	31c0 <rx_queue_transfer>
    35a4:	2c08      	cmp	r4, #8
    35a6:	d1f9      	bne.n	359c <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
    35a8:	4b18      	ldr	r3, [pc, #96]	; (360c <usb_serial_configure+0xec>)
    35aa:	2100      	movs	r1, #0
	USB1_GPTIMER0LD = microseconds - 1;
    35ac:	224a      	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
    35ae:	4818      	ldr	r0, [pc, #96]	; (3610 <usb_serial_configure+0xf0>)
    35b0:	4c18      	ldr	r4, [pc, #96]	; (3614 <usb_serial_configure+0xf4>)
    35b2:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    35b4:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    35b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    35bc:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    35c0:	4915      	ldr	r1, [pc, #84]	; (3618 <usb_serial_configure+0xf8>)
	USB1_USBINTR |= USB_USBINTR_TIE0;
    35c2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    35c6:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    35ca:	b121      	cbz	r1, 35d6 <usb_serial_configure+0xb6>
    35cc:	4a13      	ldr	r2, [pc, #76]	; (361c <usb_serial_configure+0xfc>)
    35ce:	7813      	ldrb	r3, [r2, #0]
    35d0:	f043 0301 	orr.w	r3, r3, #1
    35d4:	7013      	strb	r3, [r2, #0]
}
    35d6:	bd70      	pop	{r4, r5, r6, pc}
    35d8:	200092b5 	.word	0x200092b5
    35dc:	20008c00 	.word	0x20008c00
    35e0:	200092a4 	.word	0x200092a4
    35e4:	200092a0 	.word	0x200092a0
    35e8:	200092b1 	.word	0x200092b1
    35ec:	200092a2 	.word	0x200092a2
    35f0:	20008b00 	.word	0x20008b00
    35f4:	20009238 	.word	0x20009238
    35f8:	20009248 	.word	0x20009248
    35fc:	200092ad 	.word	0x200092ad
    3600:	20009234 	.word	0x20009234
    3604:	200092ae 	.word	0x200092ae
    3608:	00003221 	.word	0x00003221
    360c:	402e0000 	.word	0x402e0000
    3610:	20009290 	.word	0x20009290
    3614:	000032d5 	.word	0x000032d5
    3618:	00000000 	.word	0x00000000
    361c:	200092b7 	.word	0x200092b7

00003620 <usb_serial_read>:
{
    3620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    3624:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3628:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	uint32_t tail = rx_tail;
    362c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 36f8 <usb_serial_read+0xd8>
{
    3630:	b083      	sub	sp, #12
	NVIC_DISABLE_IRQ(IRQ_USB1);
    3632:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	while (count < size && tail != rx_head) {
    3636:	468b      	mov	fp, r1
	uint32_t tail = rx_tail;
    3638:	f89a 4000 	ldrb.w	r4, [sl]
	while (count < size && tail != rx_head) {
    363c:	2900      	cmp	r1, #0
    363e:	d04f      	beq.n	36e0 <usb_serial_read+0xc0>
    3640:	4680      	mov	r8, r0
    3642:	b2e4      	uxtb	r4, r4
	uint32_t count=0;
    3644:	2700      	movs	r7, #0
		uint32_t avail = rx_count[i] - rx_index[i];
    3646:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 36fc <usb_serial_read+0xdc>
	while (count < size && tail != rx_head) {
    364a:	4b26      	ldr	r3, [pc, #152]	; (36e4 <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    364c:	ebab 0207 	sub.w	r2, fp, r7
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    3650:	4925      	ldr	r1, [pc, #148]	; (36e8 <usb_serial_read+0xc8>)
	while (count < size && tail != rx_head) {
    3652:	781b      	ldrb	r3, [r3, #0]
    3654:	42a3      	cmp	r3, r4
		if (++tail > RX_NUM) tail = 0;
    3656:	f104 0401 	add.w	r4, r4, #1
	while (count < size && tail != rx_head) {
    365a:	d03f      	beq.n	36dc <usb_serial_read+0xbc>
		if (++tail > RX_NUM) tail = 0;
    365c:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
    365e:	4b23      	ldr	r3, [pc, #140]	; (36ec <usb_serial_read+0xcc>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    3660:	4640      	mov	r0, r8
		if (++tail > RX_NUM) tail = 0;
    3662:	bf28      	it	cs
    3664:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    3666:	5d1e      	ldrb	r6, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    3668:	f839 c016 	ldrh.w	ip, [r9, r6, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    366c:	eb0c 2346 	add.w	r3, ip, r6, lsl #9
    3670:	4419      	add	r1, r3
		uint32_t avail = rx_count[i] - rx_index[i];
    3672:	4b1f      	ldr	r3, [pc, #124]	; (36f0 <usb_serial_read+0xd0>)
    3674:	f833 5016 	ldrh.w	r5, [r3, r6, lsl #1]
    3678:	eba5 050c 	sub.w	r5, r5, ip
		if (avail > len) {
    367c:	42aa      	cmp	r2, r5
    367e:	d21c      	bcs.n	36ba <usb_serial_read+0x9a>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    3680:	eb0c 2c46 	add.w	ip, ip, r6, lsl #9
    3684:	4918      	ldr	r1, [pc, #96]	; (36e8 <usb_serial_read+0xc8>)
			rx_available -= len;
    3686:	4c1b      	ldr	r4, [pc, #108]	; (36f4 <usb_serial_read+0xd4>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    3688:	4461      	add	r1, ip
    368a:	9201      	str	r2, [sp, #4]
    368c:	f7fe fe3c 	bl	2308 <memcpy>
			rx_available -= len;
    3690:	6821      	ldr	r1, [r4, #0]
			rx_index[i] += len;
    3692:	f839 5016 	ldrh.w	r5, [r9, r6, lsl #1]
	return count;
    3696:	4658      	mov	r0, fp
			rx_index[i] += len;
    3698:	9a01      	ldr	r2, [sp, #4]
			rx_available -= len;
    369a:	eba1 010b 	sub.w	r1, r1, fp
			rx_index[i] += len;
    369e:	442a      	add	r2, r5
			rx_available -= len;
    36a0:	4439      	add	r1, r7
			rx_index[i] += len;
    36a2:	f829 2016 	strh.w	r2, [r9, r6, lsl #1]
			rx_available -= len;
    36a6:	6021      	str	r1, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
    36a8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    36ac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    36b0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
    36b4:	b003      	add	sp, #12
    36b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    36ba:	462a      	mov	r2, r5
			count += avail;
    36bc:	442f      	add	r7, r5
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    36be:	f7fe fe23 	bl	2308 <memcpy>
			rx_available -= avail;
    36c2:	490c      	ldr	r1, [pc, #48]	; (36f4 <usb_serial_read+0xd4>)
			rx_tail = tail;
    36c4:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    36c6:	4630      	mov	r0, r6
			rx_available -= avail;
    36c8:	680a      	ldr	r2, [r1, #0]
			p += avail;
    36ca:	44a8      	add	r8, r5
			rx_available -= avail;
    36cc:	1b52      	subs	r2, r2, r5
    36ce:	600a      	str	r2, [r1, #0]
			rx_tail = tail;
    36d0:	f88a 3000 	strb.w	r3, [sl]
			rx_queue_transfer(i);
    36d4:	f7ff fd74 	bl	31c0 <rx_queue_transfer>
	while (count < size && tail != rx_head) {
    36d8:	45bb      	cmp	fp, r7
    36da:	d8b6      	bhi.n	364a <usb_serial_read+0x2a>
	return count;
    36dc:	4638      	mov	r0, r7
    36de:	e7e3      	b.n	36a8 <usb_serial_read+0x88>
	while (count < size && tail != rx_head) {
    36e0:	4608      	mov	r0, r1
    36e2:	e7e1      	b.n	36a8 <usb_serial_read+0x88>
    36e4:	200092ad 	.word	0x200092ad
    36e8:	20200080 	.word	0x20200080
    36ec:	20009258 	.word	0x20009258
    36f0:	20009238 	.word	0x20009238
    36f4:	20009234 	.word	0x20009234
    36f8:	200092ae 	.word	0x200092ae
    36fc:	20009248 	.word	0x20009248

00003700 <usb_serial_peekchar>:
	if (tail == rx_head) return -1;
    3700:	4b0b      	ldr	r3, [pc, #44]	; (3730 <usb_serial_peekchar+0x30>)
	uint32_t tail = rx_tail;
    3702:	4a0c      	ldr	r2, [pc, #48]	; (3734 <usb_serial_peekchar+0x34>)
    3704:	7812      	ldrb	r2, [r2, #0]
	if (tail == rx_head) return -1;
    3706:	7819      	ldrb	r1, [r3, #0]
	uint32_t tail = rx_tail;
    3708:	b2d3      	uxtb	r3, r2
	if (tail == rx_head) return -1;
    370a:	428a      	cmp	r2, r1
    370c:	d00d      	beq.n	372a <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    370e:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    3710:	4809      	ldr	r0, [pc, #36]	; (3738 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    3712:	4a0a      	ldr	r2, [pc, #40]	; (373c <usb_serial_peekchar+0x3c>)
	if (++tail > RX_NUM) tail = 0;
    3714:	2b09      	cmp	r3, #9
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    3716:	490a      	ldr	r1, [pc, #40]	; (3740 <usb_serial_peekchar+0x40>)
	if (++tail > RX_NUM) tail = 0;
    3718:	bf28      	it	cs
    371a:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    371c:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    371e:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    3722:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    3726:	5c58      	ldrb	r0, [r3, r1]
    3728:	4770      	bx	lr
	if (tail == rx_head) return -1;
    372a:	f04f 30ff 	mov.w	r0, #4294967295
}
    372e:	4770      	bx	lr
    3730:	200092ad 	.word	0x200092ad
    3734:	200092ae 	.word	0x200092ae
    3738:	20009258 	.word	0x20009258
    373c:	20200080 	.word	0x20200080
    3740:	20009248 	.word	0x20009248

00003744 <usb_serial_available>:
	uint32_t n = rx_available;
    3744:	4b04      	ldr	r3, [pc, #16]	; (3758 <usb_serial_available+0x14>)
{
    3746:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
    3748:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
    374a:	b10c      	cbz	r4, 3750 <usb_serial_available+0xc>
}
    374c:	4620      	mov	r0, r4
    374e:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
    3750:	f000 f8e0 	bl	3914 <yield>
}
    3754:	4620      	mov	r0, r4
    3756:	bd10      	pop	{r4, pc}
    3758:	20009234 	.word	0x20009234

0000375c <usb_serial_flush_input>:
{
    375c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    3760:	4e14      	ldr	r6, [pc, #80]	; (37b4 <usb_serial_flush_input+0x58>)
	while (tail != rx_head) {
    3762:	4d15      	ldr	r5, [pc, #84]	; (37b8 <usb_serial_flush_input+0x5c>)
	uint32_t tail = rx_tail;
    3764:	7833      	ldrb	r3, [r6, #0]
	while (tail != rx_head) {
    3766:	782a      	ldrb	r2, [r5, #0]
    3768:	4293      	cmp	r3, r2
    376a:	d021      	beq.n	37b0 <usb_serial_flush_input+0x54>
    376c:	b2dc      	uxtb	r4, r3
    376e:	f8df 9050 	ldr.w	r9, [pc, #80]	; 37c0 <usb_serial_flush_input+0x64>
    3772:	f8df b050 	ldr.w	fp, [pc, #80]	; 37c4 <usb_serial_flush_input+0x68>
    3776:	f8df 8050 	ldr.w	r8, [pc, #80]	; 37c8 <usb_serial_flush_input+0x6c>
    377a:	4f10      	ldr	r7, [pc, #64]	; (37bc <usb_serial_flush_input+0x60>)
		if (++tail > RX_NUM) tail = 0;
    377c:	3401      	adds	r4, #1
    377e:	2c08      	cmp	r4, #8
		rx_tail = tail;
    3780:	fa5f fa84 	uxtb.w	sl, r4
		if (++tail > RX_NUM) tail = 0;
    3784:	d901      	bls.n	378a <usb_serial_flush_input+0x2e>
    3786:	2400      	movs	r4, #0
    3788:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    378a:	f819 0004 	ldrb.w	r0, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    378e:	f8db 3000 	ldr.w	r3, [fp]
    3792:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
    3796:	f837 1010 	ldrh.w	r1, [r7, r0, lsl #1]
    379a:	1a52      	subs	r2, r2, r1
    379c:	1a9b      	subs	r3, r3, r2
    379e:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    37a2:	f7ff fd0d 	bl	31c0 <rx_queue_transfer>
		rx_tail = tail;
    37a6:	f886 a000 	strb.w	sl, [r6]
	while (tail != rx_head) {
    37aa:	782b      	ldrb	r3, [r5, #0]
    37ac:	42a3      	cmp	r3, r4
    37ae:	d1e5      	bne.n	377c <usb_serial_flush_input+0x20>
}
    37b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    37b4:	200092ae 	.word	0x200092ae
    37b8:	200092ad 	.word	0x200092ad
    37bc:	20009248 	.word	0x20009248
    37c0:	20009258 	.word	0x20009258
    37c4:	20009234 	.word	0x20009234
    37c8:	20009238 	.word	0x20009238

000037cc <usb_serial_getchar>:
{
    37cc:	b500      	push	{lr}
    37ce:	b083      	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
    37d0:	2101      	movs	r1, #1
    37d2:	f10d 0007 	add.w	r0, sp, #7
    37d6:	f7ff ff23 	bl	3620 <usb_serial_read>
    37da:	b120      	cbz	r0, 37e6 <usb_serial_getchar+0x1a>
    37dc:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
    37e0:	b003      	add	sp, #12
    37e2:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
    37e6:	f04f 30ff 	mov.w	r0, #4294967295
    37ea:	e7f9      	b.n	37e0 <usb_serial_getchar+0x14>

000037ec <usb_serial_putchar>:
	if (!usb_configuration) return 0;
    37ec:	4b09      	ldr	r3, [pc, #36]	; (3814 <usb_serial_putchar+0x28>)
{
    37ee:	b500      	push	{lr}
    37f0:	b083      	sub	sp, #12
	if (!usb_configuration) return 0;
    37f2:	781b      	ldrb	r3, [r3, #0]
{
    37f4:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!usb_configuration) return 0;
    37f8:	b13b      	cbz	r3, 380a <usb_serial_putchar+0x1e>
    37fa:	2101      	movs	r1, #1
    37fc:	f10d 0007 	add.w	r0, sp, #7
    3800:	f7ff fdb0 	bl	3364 <usb_serial_write.part.0>
}
    3804:	b003      	add	sp, #12
    3806:	f85d fb04 	ldr.w	pc, [sp], #4
    380a:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    380e:	b003      	add	sp, #12
    3810:	f85d fb04 	ldr.w	pc, [sp], #4
    3814:	200092b4 	.word	0x200092b4

00003818 <usb_serial_write>:
	if (!usb_configuration) return 0;
    3818:	4b04      	ldr	r3, [pc, #16]	; (382c <usb_serial_write+0x14>)
    381a:	781b      	ldrb	r3, [r3, #0]
    381c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    3820:	b10b      	cbz	r3, 3826 <usb_serial_write+0xe>
    3822:	f7ff bd9f 	b.w	3364 <usb_serial_write.part.0>
}
    3826:	4610      	mov	r0, r2
    3828:	4770      	bx	lr
    382a:	bf00      	nop
    382c:	200092b4 	.word	0x200092b4

00003830 <usb_serial_write_buffer_free>:
{
    3830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    3834:	2400      	movs	r4, #0
	tx_noautoflush = 1;
    3836:	f8df 8044 	ldr.w	r8, [pc, #68]	; 387c <usb_serial_write_buffer_free+0x4c>
    383a:	2301      	movs	r3, #1
    383c:	4d0d      	ldr	r5, [pc, #52]	; (3874 <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    383e:	4627      	mov	r7, r4
    3840:	4e0d      	ldr	r6, [pc, #52]	; (3878 <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
    3842:	f888 3000 	strb.w	r3, [r8]
		if (i == tx_head) continue;
    3846:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    3848:	4628      	mov	r0, r5
	for (uint32_t i=0; i < TX_NUM; i++) {
    384a:	3520      	adds	r5, #32
		if (i == tx_head) continue;
    384c:	42a3      	cmp	r3, r4
	for (uint32_t i=0; i < TX_NUM; i++) {
    384e:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    3852:	d005      	beq.n	3860 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    3854:	f7ff fc7a 	bl	314c <usb_transfer_status>
    3858:	0603      	lsls	r3, r0, #24
    385a:	bf58      	it	pl
    385c:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    3860:	2c04      	cmp	r4, #4
    3862:	d1f0      	bne.n	3846 <usb_serial_write_buffer_free+0x16>
	asm("dsb" ::: "memory");
    3864:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    3868:	2300      	movs	r3, #0
}
    386a:	4638      	mov	r0, r7
	tx_noautoflush = 0;
    386c:	f888 3000 	strb.w	r3, [r8]
}
    3870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3874:	20008c00 	.word	0x20008c00
    3878:	200092b1 	.word	0x200092b1
    387c:	200092b2 	.word	0x200092b2

00003880 <usb_serial_flush_output>:
{
    3880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    3884:	4b1d      	ldr	r3, [pc, #116]	; (38fc <usb_serial_flush_output+0x7c>)
    3886:	781b      	ldrb	r3, [r3, #0]
    3888:	b113      	cbz	r3, 3890 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    388a:	4d1d      	ldr	r5, [pc, #116]	; (3900 <usb_serial_flush_output+0x80>)
    388c:	882a      	ldrh	r2, [r5, #0]
    388e:	b90a      	cbnz	r2, 3894 <usb_serial_flush_output+0x14>
}
    3890:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	transfer_t *xfer = tx_transfer + tx_head;
    3894:	4e1b      	ldr	r6, [pc, #108]	; (3904 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    3896:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    389a:	491b      	ldr	r1, [pc, #108]	; (3908 <usb_serial_flush_output+0x88>)
    389c:	7833      	ldrb	r3, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    389e:	464a      	mov	r2, r9
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    38a0:	4c1a      	ldr	r4, [pc, #104]	; (390c <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    38a2:	eb01 1843 	add.w	r8, r1, r3, lsl #5
	tx_noautoflush = 1;
    38a6:	4f1a      	ldr	r7, [pc, #104]	; (3910 <usb_serial_flush_output+0x90>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    38a8:	eb04 24c3 	add.w	r4, r4, r3, lsl #11
	tx_noautoflush = 1;
    38ac:	2301      	movs	r3, #1
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    38ae:	4640      	mov	r0, r8
	tx_noautoflush = 1;
    38b0:	703b      	strb	r3, [r7, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    38b2:	4621      	mov	r1, r4
    38b4:	2300      	movs	r3, #0
    38b6:	f7ff fc0f 	bl	30d8 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    38ba:	eb04 0209 	add.w	r2, r4, r9
	asm("dsb");
    38be:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    38c2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    38c6:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    38ca:	3420      	adds	r4, #32
	} while (location < end_addr);
    38cc:	42a2      	cmp	r2, r4
    38ce:	d8fa      	bhi.n	38c6 <usb_serial_flush_output+0x46>
	asm("dsb");
    38d0:	f3bf 8f4f 	dsb	sy
	asm("isb");
    38d4:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    38d8:	2004      	movs	r0, #4
    38da:	4641      	mov	r1, r8
    38dc:	f7ff fc14 	bl	3108 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    38e0:	7833      	ldrb	r3, [r6, #0]
    38e2:	3301      	adds	r3, #1
    38e4:	b2db      	uxtb	r3, r3
    38e6:	2b03      	cmp	r3, #3
    38e8:	bf88      	it	hi
    38ea:	2300      	movhi	r3, #0
    38ec:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    38ee:	2300      	movs	r3, #0
    38f0:	802b      	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
    38f2:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    38f6:	703b      	strb	r3, [r7, #0]
}
    38f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    38fc:	200092b4 	.word	0x200092b4
    3900:	200092a2 	.word	0x200092a2
    3904:	200092b1 	.word	0x200092b1
    3908:	20008c00 	.word	0x20008c00
    390c:	20201080 	.word	0x20201080
    3910:	200092b2 	.word	0x200092b2

00003914 <yield>:
uint8_t yield_active_check_flags = 0;


void yield(void) __attribute__ ((weak));
void yield(void)
{
    3914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t check_flags = yield_active_check_flags;
    3918:	4b2d      	ldr	r3, [pc, #180]	; (39d0 <yield+0xbc>)
    391a:	781e      	ldrb	r6, [r3, #0]
	if (!check_flags) return;	// nothing to do
    391c:	b166      	cbz	r6, 3938 <yield+0x24>

	// TODO: do nothing if called from interrupt

	static uint8_t running=0;
	if (running) return; // TODO: does this need to be atomic?
    391e:	4f2d      	ldr	r7, [pc, #180]	; (39d4 <yield+0xc0>)
    3920:	783b      	ldrb	r3, [r7, #0]
    3922:	b94b      	cbnz	r3, 3938 <yield+0x24>
	running = 1;
    3924:	2301      	movs	r3, #1

	// USB Serial - Add hack to minimize impact...
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    3926:	07f1      	lsls	r1, r6, #31
	running = 1;
    3928:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    392a:	d443      	bmi.n	39b4 <yield+0xa0>
		if (SerialUSB2.available()) serialEventUSB2();
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    392c:	07b2      	lsls	r2, r6, #30
    392e:	d426      	bmi.n	397e <yield+0x6a>
		HardwareSerialIMXRT::processSerialEventsList();
	}

	running = 0;
    3930:	2300      	movs	r3, #0
    3932:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_EVENT_RESPONDER) {
    3934:	0773      	lsls	r3, r6, #29
    3936:	d401      	bmi.n	393c <yield+0x28>
		EventResponder::runFromYield();
	}
};
    3938:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    393c:	4b26      	ldr	r3, [pc, #152]	; (39d8 <yield+0xc4>)
    393e:	681a      	ldr	r2, [r3, #0]
    3940:	2a00      	cmp	r2, #0
    3942:	d0f9      	beq.n	3938 <yield+0x24>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    3944:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    3948:	2a00      	cmp	r2, #0
    394a:	d1f5      	bne.n	3938 <yield+0x24>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    394c:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    3950:	b672      	cpsid	i
		EventResponder *first = firstYield;
    3952:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    3954:	2800      	cmp	r0, #0
    3956:	d034      	beq.n	39c2 <yield+0xae>
		if (runningFromYield) {
    3958:	4c20      	ldr	r4, [pc, #128]	; (39dc <yield+0xc8>)
    395a:	7821      	ldrb	r1, [r4, #0]
    395c:	2900      	cmp	r1, #0
    395e:	d130      	bne.n	39c2 <yield+0xae>
		runningFromYield = true;
    3960:	2201      	movs	r2, #1
    3962:	7022      	strb	r2, [r4, #0]
		firstYield = first->_next;
    3964:	6942      	ldr	r2, [r0, #20]
    3966:	601a      	str	r2, [r3, #0]
		if (firstYield) {
    3968:	2a00      	cmp	r2, #0
    396a:	d02e      	beq.n	39ca <yield+0xb6>
			firstYield->_prev = nullptr;
    396c:	6191      	str	r1, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    396e:	b905      	cbnz	r5, 3972 <yield+0x5e>
    3970:	b662      	cpsie	i
		first->_triggered = false;
    3972:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    3974:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    3976:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    3978:	4798      	blx	r3
		runningFromYield = false;
    397a:	7025      	strb	r5, [r4, #0]
    397c:	e7dc      	b.n	3938 <yield+0x24>

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    397e:	f8df 8064 	ldr.w	r8, [pc, #100]	; 39e4 <yield+0xd0>
    3982:	f898 3000 	ldrb.w	r3, [r8]
    3986:	2b00      	cmp	r3, #0
    3988:	d0d2      	beq.n	3930 <yield+0x1c>
    398a:	2500      	movs	r5, #0
    398c:	f8df 9058 	ldr.w	r9, [pc, #88]	; 39e8 <yield+0xd4>
    3990:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    3992:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    3996:	3501      	adds	r5, #1
	static HardwareSerialIMXRT 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    3998:	6823      	ldr	r3, [r4, #0]
    399a:	4620      	mov	r0, r4
    399c:	691b      	ldr	r3, [r3, #16]
    399e:	4798      	blx	r3
    39a0:	b110      	cbz	r0, 39a8 <yield+0x94>
    39a2:	6963      	ldr	r3, [r4, #20]
    39a4:	689b      	ldr	r3, [r3, #8]
    39a6:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    39a8:	f898 2000 	ldrb.w	r2, [r8]
    39ac:	b2eb      	uxtb	r3, r5
    39ae:	429a      	cmp	r2, r3
    39b0:	d8ef      	bhi.n	3992 <yield+0x7e>
    39b2:	e7bd      	b.n	3930 <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    39b4:	f7ff fec6 	bl	3744 <usb_serial_available>
		if (Serial.available()) serialEvent();
    39b8:	2800      	cmp	r0, #0
    39ba:	d0b7      	beq.n	392c <yield+0x18>
    39bc:	f3af 8000 	nop.w
    39c0:	e7b4      	b.n	392c <yield+0x18>
		if (doit) __enable_irq();
    39c2:	2d00      	cmp	r5, #0
    39c4:	d1b8      	bne.n	3938 <yield+0x24>
    39c6:	b662      	cpsie	i
    39c8:	e7b6      	b.n	3938 <yield+0x24>
			lastYield = nullptr;
    39ca:	4b05      	ldr	r3, [pc, #20]	; (39e0 <yield+0xcc>)
    39cc:	601a      	str	r2, [r3, #0]
    39ce:	e7ce      	b.n	396e <yield+0x5a>
    39d0:	200092b7 	.word	0x200092b7
    39d4:	200092aa 	.word	0x200092aa
    39d8:	20008dc4 	.word	0x20008dc4
    39dc:	200092a7 	.word	0x200092a7
    39e0:	20008dd0 	.word	0x20008dd0
    39e4:	200092a8 	.word	0x200092a8
    39e8:	20008dd4 	.word	0x20008dd4

000039ec <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    39ec:	b570      	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    39ee:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    39f2:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    39f4:	4c0c      	ldr	r4, [pc, #48]	; (3a28 <EventResponder::runFromInterrupt()+0x3c>)
    39f6:	6820      	ldr	r0, [r4, #0]
		if (first) {
    39f8:	b180      	cbz	r0, 3a1c <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    39fa:	4e0c      	ldr	r6, [pc, #48]	; (3a2c <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    39fc:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    39fe:	6943      	ldr	r3, [r0, #20]
    3a00:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    3a02:	b173      	cbz	r3, 3a22 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    3a04:	619d      	str	r5, [r3, #24]
		if (doit) __enable_irq();
    3a06:	b902      	cbnz	r2, 3a0a <EventResponder::runFromInterrupt()+0x1e>
    3a08:	b662      	cpsie	i
			}
			enableInterrupts(irq);
			first->_triggered = false;
			(*(first->_function))(*first);
    3a0a:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    3a0c:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    3a0e:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3a10:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    3a14:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    3a16:	6820      	ldr	r0, [r4, #0]
		if (first) {
    3a18:	2800      	cmp	r0, #0
    3a1a:	d1f0      	bne.n	39fe <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    3a1c:	b902      	cbnz	r2, 3a20 <EventResponder::runFromInterrupt()+0x34>
    3a1e:	b662      	cpsie	i
		} else {
			enableInterrupts(irq);
			break;
		}
	}
}
    3a20:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    3a22:	6033      	str	r3, [r6, #0]
    3a24:	e7ef      	b.n	3a06 <EventResponder::runFromInterrupt()+0x1a>
    3a26:	bf00      	nop
    3a28:	20008dcc 	.word	0x20008dcc
    3a2c:	20008dc8 	.word	0x20008dc8

00003a30 <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    3a30:	f7ff bfdc 	b.w	39ec <EventResponder::runFromInterrupt()>

00003a34 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    3a34:	4904      	ldr	r1, [pc, #16]	; (3a48 <systick_isr+0x14>)
	systick_millis_count++;
    3a36:	4a05      	ldr	r2, [pc, #20]	; (3a4c <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
    3a38:	6849      	ldr	r1, [r1, #4]
    3a3a:	4b05      	ldr	r3, [pc, #20]	; (3a50 <systick_isr+0x1c>)
    3a3c:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    3a3e:	6813      	ldr	r3, [r2, #0]
    3a40:	3301      	adds	r3, #1
    3a42:	6013      	str	r3, [r2, #0]
}
    3a44:	4770      	bx	lr
    3a46:	bf00      	nop
    3a48:	e0001000 	.word	0xe0001000
    3a4c:	2000927c 	.word	0x2000927c
    3a50:	20009278 	.word	0x20009278

00003a54 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    3a54:	49a2      	ldr	r1, [pc, #648]	; (3ce0 <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    3a56:	4ba3      	ldr	r3, [pc, #652]	; (3ce4 <set_arm_clock+0x290>)
	if (frequency > 528000000) {
    3a58:	4288      	cmp	r0, r1
{
    3a5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
    3a5e:	4ca2      	ldr	r4, [pc, #648]	; (3ce8 <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    3a60:	695e      	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    3a62:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    3a64:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
    3a68:	d91b      	bls.n	3aa2 <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    3a6a:	4ba0      	ldr	r3, [pc, #640]	; (3cec <set_arm_clock+0x298>)
    3a6c:	4298      	cmp	r0, r3
    3a6e:	f240 8102 	bls.w	3c76 <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    3a72:	1ac3      	subs	r3, r0, r3
    3a74:	499e      	ldr	r1, [pc, #632]	; (3cf0 <set_arm_clock+0x29c>)
    3a76:	0a1b      	lsrs	r3, r3, #8
    3a78:	fba1 1303 	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    3a7c:	f240 6127 	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    3a80:	09db      	lsrs	r3, r3, #7
    3a82:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3a86:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3a8a:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    3a8e:	428b      	cmp	r3, r1
    3a90:	bf28      	it	cs
    3a92:	460b      	movcs	r3, r1
    3a94:	f5a3 7748 	sub.w	r7, r3, #800	; 0x320
    3a98:	4b96      	ldr	r3, [pc, #600]	; (3cf4 <set_arm_clock+0x2a0>)
    3a9a:	fba3 3707 	umull	r3, r7, r3, r7
    3a9e:	08ff      	lsrs	r7, r7, #3
    3aa0:	e004      	b.n	3aac <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
    3aa2:	4f95      	ldr	r7, [pc, #596]	; (3cf8 <set_arm_clock+0x2a4>)
    3aa4:	42b8      	cmp	r0, r7
    3aa6:	bf8c      	ite	hi
    3aa8:	270e      	movhi	r7, #14
    3aaa:	2706      	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    3aac:	498d      	ldr	r1, [pc, #564]	; (3ce4 <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    3aae:	f008 091f 	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    3ab2:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    3ab6:	45b9      	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    3ab8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    3abc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    3ac0:	d20c      	bcs.n	3adc <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    3ac2:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    3ac6:	f5a1 21f8 	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    3aca:	ea48 0807 	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
    3ace:	f8c1 800c 	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    3ad2:	680b      	ldr	r3, [r1, #0]
    3ad4:	2b00      	cmp	r3, #0
    3ad6:	dafc      	bge.n	3ad2 <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    3ad8:	f008 091f 	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    3adc:	f016 7300 	ands.w	r3, r6, #33554432	; 0x2000000
    3ae0:	d124      	bne.n	3b2c <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    3ae2:	4986      	ldr	r1, [pc, #536]	; (3cfc <set_arm_clock+0x2a8>)
    3ae4:	690c      	ldr	r4, [r1, #16]
    3ae6:	4986      	ldr	r1, [pc, #536]	; (3d00 <set_arm_clock+0x2ac>)
    3ae8:	43a1      	bics	r1, r4
    3aea:	f000 80ea 	beq.w	3cc2 <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    3aee:	f482 5180 	eor.w	r1, r2, #4096	; 0x1000
    3af2:	4634      	mov	r4, r6
    3af4:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    3af8:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    3afc:	d004      	beq.n	3b08 <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    3afe:	f026 5660 	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    3b02:	431e      	orrs	r6, r3
			CCM_CBCDR = cbcdr;
    3b04:	4b77      	ldr	r3, [pc, #476]	; (3ce4 <set_arm_clock+0x290>)
    3b06:	615e      	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    3b08:	f411 5f40 	tst.w	r1, #12288	; 0x3000
    3b0c:	d007      	beq.n	3b1e <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    3b0e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
    3b12:	4974      	ldr	r1, [pc, #464]	; (3ce4 <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    3b14:	432a      	orrs	r2, r5
			CCM_CBCMR = cbcmr;
    3b16:	618a      	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    3b18:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    3b1a:	071a      	lsls	r2, r3, #28
    3b1c:	d4fc      	bmi.n	3b18 <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    3b1e:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    3b22:	4a70      	ldr	r2, [pc, #448]	; (3ce4 <set_arm_clock+0x290>)
    3b24:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    3b26:	6c93      	ldr	r3, [r2, #72]	; 0x48
    3b28:	069b      	lsls	r3, r3, #26
    3b2a:	d4fc      	bmi.n	3b26 <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
    3b2c:	4c75      	ldr	r4, [pc, #468]	; (3d04 <set_arm_clock+0x2b0>)
    3b2e:	42a0      	cmp	r0, r4
    3b30:	f200 80ce 	bhi.w	3cd0 <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
    3b34:	f04f 0c01 	mov.w	ip, #1
    3b38:	4601      	mov	r1, r0
	uint32_t div_arm = 1;
    3b3a:	4663      	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
    3b3c:	fb03 1201 	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
    3b40:	f103 0e01 	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
    3b44:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    3b48:	42a2      	cmp	r2, r4
    3b4a:	d818      	bhi.n	3b7e <set_arm_clock+0x12a>
		if (div_arm < 8) {
    3b4c:	f1be 0f08 	cmp.w	lr, #8
				div_arm = 1;
    3b50:	f04f 0301 	mov.w	r3, #1
		if (div_arm < 8) {
    3b54:	f040 808d 	bne.w	3c72 <set_arm_clock+0x21e>
			if (div_ahb < 5) {
    3b58:	f1bc 0f04 	cmp.w	ip, #4
    3b5c:	f200 8091 	bhi.w	3c82 <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
    3b60:	180a      	adds	r2, r1, r0
    3b62:	42a2      	cmp	r2, r4
    3b64:	f200 80a4 	bhi.w	3cb0 <set_arm_clock+0x25c>
    3b68:	fb05 f100 	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
    3b6c:	46ac      	mov	ip, r5
			div_arm = div_arm + 1;
    3b6e:	f103 0e01 	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    3b72:	fb03 1201 	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
    3b76:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    3b7a:	42a2      	cmp	r2, r4
    3b7c:	d9e6      	bls.n	3b4c <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    3b7e:	f10c 31ff 	add.w	r1, ip, #4294967295
    3b82:	028c      	lsls	r4, r1, #10
    3b84:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    3b88:	485f      	ldr	r0, [pc, #380]	; (3d08 <set_arm_clock+0x2b4>)
    3b8a:	4410      	add	r0, r2
	if (mult > 108) mult = 108;
    3b8c:	4a5f      	ldr	r2, [pc, #380]	; (3d0c <set_arm_clock+0x2b8>)
    3b8e:	4290      	cmp	r0, r2
    3b90:	d97f      	bls.n	3c92 <set_arm_clock+0x23e>
    3b92:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 3d38 <set_arm_clock+0x2e4>
    3b96:	226c      	movs	r2, #108	; 0x6c
    3b98:	485d      	ldr	r0, [pc, #372]	; (3d10 <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    3b9a:	4d58      	ldr	r5, [pc, #352]	; (3cfc <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    3b9c:	fbb0 f0fe 	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    3ba0:	f8d5 e000 	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
    3ba4:	fbb0 f0fc 	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    3ba8:	f8df c190 	ldr.w	ip, [pc, #400]	; 3d3c <set_arm_clock+0x2e8>
    3bac:	ea0e 0c0c 	and.w	ip, lr, ip
    3bb0:	45d4      	cmp	ip, sl
    3bb2:	d009      	beq.n	3bc8 <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    3bb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    3bb8:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    3bbc:	f8c5 c000 	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    3bc0:	602a      	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    3bc2:	682a      	ldr	r2, [r5, #0]
    3bc4:	2a00      	cmp	r2, #0
    3bc6:	dafc      	bge.n	3bc2 <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    3bc8:	4a46      	ldr	r2, [pc, #280]	; (3ce4 <set_arm_clock+0x290>)
    3bca:	6915      	ldr	r5, [r2, #16]
    3bcc:	f005 0507 	and.w	r5, r5, #7
    3bd0:	429d      	cmp	r5, r3
    3bd2:	d003      	beq.n	3bdc <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    3bd4:	6113      	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    3bd6:	6c93      	ldr	r3, [r2, #72]	; 0x48
    3bd8:	03dd      	lsls	r5, r3, #15
    3bda:	d4fc      	bmi.n	3bd6 <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    3bdc:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
    3be0:	d009      	beq.n	3bf6 <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    3be2:	f426 56e0 	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    3be6:	f404 54e0 	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
    3bea:	4a3e      	ldr	r2, [pc, #248]	; (3ce4 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    3bec:	4326      	orrs	r6, r4
		CCM_CBCDR = cbcdr;
    3bee:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    3bf0:	6c93      	ldr	r3, [r2, #72]	; 0x48
    3bf2:	0799      	lsls	r1, r3, #30
    3bf4:	d4fc      	bmi.n	3bf0 <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    3bf6:	4947      	ldr	r1, [pc, #284]	; (3d14 <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
    3bf8:	4a47      	ldr	r2, [pc, #284]	; (3d18 <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    3bfa:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    3bfc:	4291      	cmp	r1, r2
    3bfe:	d83c      	bhi.n	3c7a <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    3c00:	4b46      	ldr	r3, [pc, #280]	; (3d1c <set_arm_clock+0x2c8>)
    3c02:	09c9      	lsrs	r1, r1, #7
    3c04:	fba3 3101 	umull	r3, r1, r3, r1
    3c08:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    3c0a:	1e4b      	subs	r3, r1, #1
    3c0c:	021b      	lsls	r3, r3, #8
    3c0e:	ea86 0203 	eor.w	r2, r6, r3
    3c12:	f412 7f40 	tst.w	r2, #768	; 0x300
    3c16:	d006      	beq.n	3c26 <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    3c18:	f426 7640 	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    3c1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
    3c20:	4a30      	ldr	r2, [pc, #192]	; (3ce4 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    3c22:	4333      	orrs	r3, r6
		CCM_CBCDR = cbcdr;
    3c24:	6153      	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    3c26:	4a2f      	ldr	r2, [pc, #188]	; (3ce4 <set_arm_clock+0x290>)
    3c28:	6953      	ldr	r3, [r2, #20]
    3c2a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
    3c2e:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    3c30:	6c93      	ldr	r3, [r2, #72]	; 0x48
    3c32:	069b      	lsls	r3, r3, #26
    3c34:	d4fc      	bmi.n	3c30 <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    3c36:	4b3a      	ldr	r3, [pc, #232]	; (3d20 <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    3c38:	454f      	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    3c3a:	fba3 2300 	umull	r2, r3, r3, r0
    3c3e:	f04f 32ff 	mov.w	r2, #4294967295
    3c42:	ea4f 4393 	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
    3c46:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    3c4a:	fbb2 f3f3 	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
    3c4e:	4a35      	ldr	r2, [pc, #212]	; (3d24 <set_arm_clock+0x2d0>)
    3c50:	6010      	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    3c52:	4a35      	ldr	r2, [pc, #212]	; (3d28 <set_arm_clock+0x2d4>)
    3c54:	6011      	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    3c56:	4a35      	ldr	r2, [pc, #212]	; (3d2c <set_arm_clock+0x2d8>)
    3c58:	6013      	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    3c5a:	d208      	bcs.n	3c6e <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    3c5c:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    3c60:	4a21      	ldr	r2, [pc, #132]	; (3ce8 <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    3c62:	ea48 0707 	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
    3c66:	60d7      	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    3c68:	6813      	ldr	r3, [r2, #0]
    3c6a:	2b00      	cmp	r3, #0
    3c6c:	dafc      	bge.n	3c68 <set_arm_clock+0x214>
	}

	return frequency;
}
    3c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3c72:	4673      	mov	r3, lr
    3c74:	e762      	b.n	3b3c <set_arm_clock+0xe8>
    3c76:	2712      	movs	r7, #18
    3c78:	e718      	b.n	3aac <set_arm_clock+0x58>
    3c7a:	f44f 7340 	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
    3c7e:	2104      	movs	r1, #4
    3c80:	e7c5      	b.n	3c0e <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    3c82:	f10c 31ff 	add.w	r1, ip, #4294967295
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    3c86:	4820      	ldr	r0, [pc, #128]	; (3d08 <set_arm_clock+0x2b4>)
    3c88:	2307      	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    3c8a:	028c      	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    3c8c:	4410      	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    3c8e:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    3c92:	4a27      	ldr	r2, [pc, #156]	; (3d30 <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    3c94:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 3d40 <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    3c98:	fba2 2000 	umull	r2, r0, r2, r0
    3c9c:	0d02      	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
    3c9e:	4825      	ldr	r0, [pc, #148]	; (3d34 <set_arm_clock+0x2e0>)
    3ca0:	2a36      	cmp	r2, #54	; 0x36
    3ca2:	bf38      	it	cc
    3ca4:	2236      	movcc	r2, #54	; 0x36
    3ca6:	fb02 f000 	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    3caa:	ea42 0a0a 	orr.w	sl, r2, sl
    3cae:	e774      	b.n	3b9a <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    3cb0:	ea4f 248c 	mov.w	r4, ip, lsl #10
    3cb4:	2300      	movs	r3, #0
    3cb6:	ea86 218c 	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
    3cba:	f04f 0e01 	mov.w	lr, #1
				div_ahb = div_ahb + 1;
    3cbe:	46ac      	mov	ip, r5
    3cc0:	e762      	b.n	3b88 <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    3cc2:	461d      	mov	r5, r3
    3cc4:	f086 54c0 	eor.w	r4, r6, #402653184	; 0x18000000
    3cc8:	4611      	mov	r1, r2
    3cca:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
    3cce:	e713      	b.n	3af8 <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
    3cd0:	2400      	movs	r4, #0
	uint32_t div_ahb = 1;
    3cd2:	f04f 0c01 	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    3cd6:	4602      	mov	r2, r0
    3cd8:	4631      	mov	r1, r6
    3cda:	4623      	mov	r3, r4
	uint32_t div_arm = 1;
    3cdc:	46e6      	mov	lr, ip
    3cde:	e753      	b.n	3b88 <set_arm_clock+0x134>
    3ce0:	1f78a400 	.word	0x1f78a400
    3ce4:	400fc000 	.word	0x400fc000
    3ce8:	40080000 	.word	0x40080000
    3cec:	23c34600 	.word	0x23c34600
    3cf0:	004cb223 	.word	0x004cb223
    3cf4:	51eb851f 	.word	0x51eb851f
    3cf8:	016e3600 	.word	0x016e3600
    3cfc:	400d8000 	.word	0x400d8000
    3d00:	80003040 	.word	0x80003040
    3d04:	269fb1ff 	.word	0x269fb1ff
    3d08:	005b8d80 	.word	0x005b8d80
    3d0c:	4df67eff 	.word	0x4df67eff
    3d10:	4d3f6400 	.word	0x4d3f6400
    3d14:	08f0d17f 	.word	0x08f0d17f
    3d18:	2cb4177f 	.word	0x2cb4177f
    3d1c:	00e5109f 	.word	0x00e5109f
    3d20:	431bde83 	.word	0x431bde83
    3d24:	20007b4c 	.word	0x20007b4c
    3d28:	20007b48 	.word	0x20007b48
    3d2c:	20009274 	.word	0x20009274
    3d30:	165e9f81 	.word	0x165e9f81
    3d34:	00b71b00 	.word	0x00b71b00
    3d38:	8000206c 	.word	0x8000206c
    3d3c:	8001307f 	.word	0x8001307f
    3d40:	80002000 	.word	0x80002000

00003d44 <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    3d44:	4a07      	ldr	r2, [pc, #28]	; (3d64 <rtc_get+0x20>)
    3d46:	6a50      	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    3d48:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uint32_t hi2 = SNVS_HPRTCMR;
    3d4a:	4619      	mov	r1, r3
    3d4c:	4684      	mov	ip, r0
    3d4e:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    3d50:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    3d52:	4299      	cmp	r1, r3
    3d54:	d1f9      	bne.n	3d4a <rtc_get+0x6>
    3d56:	4584      	cmp	ip, r0
    3d58:	d1f7      	bne.n	3d4a <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
    3d5a:	0bdb      	lsrs	r3, r3, #15
}
    3d5c:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    3d60:	4770      	bx	lr
    3d62:	bf00      	nop
    3d64:	400d4000 	.word	0x400d4000

00003d68 <sm_align_pool>:
{
    3d68:	b508      	push	{r3, lr}
	x = spool->pool_size % HEADER_SZ;
    3d6a:	e9d0 3200 	ldrd	r3, r2, [r0]
	if (!spool->pool || !spool->pool_size) return 0;
    3d6e:	b15b      	cbz	r3, 3d88 <sm_align_pool+0x20>
    3d70:	b1ba      	cbz	r2, 3da2 <sm_align_pool+0x3a>
	if (spool->pool_size % HEADER_SZ) return 0;
    3d72:	4b0f      	ldr	r3, [pc, #60]	; (3db0 <sm_align_pool+0x48>)
    3d74:	fba3 1302 	umull	r1, r3, r3, r2
    3d78:	08db      	lsrs	r3, r3, #3
    3d7a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3d7e:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    3d82:	d10a      	bne.n	3d9a <sm_align_pool+0x32>
	if (smalloc_verify_pool(spool)) return 1;
    3d84:	2001      	movs	r0, #1
}
    3d86:	bd08      	pop	{r3, pc}
	x = spool->pool_size % HEADER_SZ;
    3d88:	4b09      	ldr	r3, [pc, #36]	; (3db0 <sm_align_pool+0x48>)
    3d8a:	fba3 1302 	umull	r1, r3, r3, r2
    3d8e:	08db      	lsrs	r3, r3, #3
    3d90:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
    3d94:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    3d98:	d001      	beq.n	3d9e <sm_align_pool+0x36>
    3d9a:	1ad2      	subs	r2, r2, r3
    3d9c:	6042      	str	r2, [r0, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    3d9e:	2af0      	cmp	r2, #240	; 0xf0
    3da0:	d8f0      	bhi.n	3d84 <sm_align_pool+0x1c>
		errno = ENOSPC;
    3da2:	f002 fa99 	bl	62d8 <__errno>
    3da6:	221c      	movs	r2, #28
    3da8:	4603      	mov	r3, r0
    3daa:	2000      	movs	r0, #0
    3dac:	601a      	str	r2, [r3, #0]
}
    3dae:	bd08      	pop	{r3, pc}
    3db0:	aaaaaaab 	.word	0xaaaaaaab

00003db4 <sm_set_pool>:
{
    3db4:	b570      	push	{r4, r5, r6, lr}
	if (!spool) {
    3db6:	4604      	mov	r4, r0
    3db8:	b338      	cbz	r0, 3e0a <sm_set_pool+0x56>
	if (!new_pool || !new_pool_size) {
    3dba:	b119      	cbz	r1, 3dc4 <sm_set_pool+0x10>
    3dbc:	fab2 f682 	clz	r6, r2
    3dc0:	0976      	lsrs	r6, r6, #5
    3dc2:	b9a2      	cbnz	r2, 3dee <sm_set_pool+0x3a>
	if (!spool->pool || !spool->pool_size) return 0;
    3dc4:	6820      	ldr	r0, [r4, #0]
    3dc6:	b300      	cbz	r0, 3e0a <sm_set_pool+0x56>
    3dc8:	6862      	ldr	r2, [r4, #4]
    3dca:	b1f2      	cbz	r2, 3e0a <sm_set_pool+0x56>
	if (spool->pool_size % HEADER_SZ) return 0;
    3dcc:	4b18      	ldr	r3, [pc, #96]	; (3e30 <sm_set_pool+0x7c>)
    3dce:	4919      	ldr	r1, [pc, #100]	; (3e34 <sm_set_pool+0x80>)
    3dd0:	fb02 f303 	mul.w	r3, r2, r3
    3dd4:	ebb1 0fb3 	cmp.w	r1, r3, ror #2
    3dd8:	d317      	bcc.n	3e0a <sm_set_pool+0x56>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    3dda:	68a3      	ldr	r3, [r4, #8]
    3ddc:	b9e3      	cbnz	r3, 3e18 <sm_set_pool+0x64>
			memset(spool, 0, sizeof(struct smalloc_pool));
    3dde:	2200      	movs	r2, #0
			return 1;
    3de0:	2301      	movs	r3, #1
			memset(spool, 0, sizeof(struct smalloc_pool));
    3de2:	6022      	str	r2, [r4, #0]
    3de4:	6062      	str	r2, [r4, #4]
    3de6:	60a2      	str	r2, [r4, #8]
    3de8:	60e2      	str	r2, [r4, #12]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    3dea:	4618      	mov	r0, r3
    3dec:	bd70      	pop	{r4, r5, r6, pc}
	spool->pool = new_pool;
    3dee:	461d      	mov	r5, r3
	spool->oomfn = oom_handler;
    3df0:	9b04      	ldr	r3, [sp, #16]
	spool->pool_size = new_pool_size;
    3df2:	e9c0 1200 	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
    3df6:	60c3      	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    3df8:	f7ff ffb6 	bl	3d68 <sm_align_pool>
    3dfc:	4603      	mov	r3, r0
    3dfe:	2800      	cmp	r0, #0
    3e00:	d0f3      	beq.n	3dea <sm_set_pool+0x36>
	if (do_zero) {
    3e02:	b96d      	cbnz	r5, 3e20 <sm_set_pool+0x6c>
	return 1;
    3e04:	2301      	movs	r3, #1
}
    3e06:	4618      	mov	r0, r3
    3e08:	bd70      	pop	{r4, r5, r6, pc}
		errno = EINVAL;
    3e0a:	f002 fa65 	bl	62d8 <__errno>
    3e0e:	2216      	movs	r2, #22
		return 0;
    3e10:	2300      	movs	r3, #0
		errno = EINVAL;
    3e12:	6002      	str	r2, [r0, #0]
}
    3e14:	4618      	mov	r0, r3
    3e16:	bd70      	pop	{r4, r5, r6, pc}
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    3e18:	2100      	movs	r1, #0
    3e1a:	f002 f8c1 	bl	5fa0 <memset>
    3e1e:	e7de      	b.n	3dde <sm_set_pool+0x2a>
		memset(spool->pool, 0, spool->pool_size);
    3e20:	6862      	ldr	r2, [r4, #4]
    3e22:	4631      	mov	r1, r6
    3e24:	6820      	ldr	r0, [r4, #0]
		spool->do_zero = do_zero;
    3e26:	60a5      	str	r5, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    3e28:	f002 f8ba 	bl	5fa0 <memset>
	return 1;
    3e2c:	2301      	movs	r3, #1
    3e2e:	e7dc      	b.n	3dea <sm_set_pool+0x36>
    3e30:	aaaaaaab 	.word	0xaaaaaaab
    3e34:	15555555 	.word	0x15555555

00003e38 <__aeabi_atexit>:
    3e38:	4603      	mov	r3, r0
    3e3a:	4608      	mov	r0, r1
    3e3c:	4619      	mov	r1, r3
    3e3e:	f001 be25 	b.w	5a8c <__cxa_atexit>
    3e42:	bf00      	nop

00003e44 <__aeabi_uldivmod>:
    3e44:	b953      	cbnz	r3, 3e5c <__aeabi_uldivmod+0x18>
    3e46:	b94a      	cbnz	r2, 3e5c <__aeabi_uldivmod+0x18>
    3e48:	2900      	cmp	r1, #0
    3e4a:	bf08      	it	eq
    3e4c:	2800      	cmpeq	r0, #0
    3e4e:	bf1c      	itt	ne
    3e50:	f04f 31ff 	movne.w	r1, #4294967295
    3e54:	f04f 30ff 	movne.w	r0, #4294967295
    3e58:	f000 b970 	b.w	413c <__aeabi_idiv0>
    3e5c:	f1ad 0c08 	sub.w	ip, sp, #8
    3e60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    3e64:	f000 f806 	bl	3e74 <__udivmoddi4>
    3e68:	f8dd e004 	ldr.w	lr, [sp, #4]
    3e6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    3e70:	b004      	add	sp, #16
    3e72:	4770      	bx	lr

00003e74 <__udivmoddi4>:
    3e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3e78:	9e08      	ldr	r6, [sp, #32]
    3e7a:	460d      	mov	r5, r1
    3e7c:	4604      	mov	r4, r0
    3e7e:	460f      	mov	r7, r1
    3e80:	2b00      	cmp	r3, #0
    3e82:	d14a      	bne.n	3f1a <__udivmoddi4+0xa6>
    3e84:	428a      	cmp	r2, r1
    3e86:	4694      	mov	ip, r2
    3e88:	d965      	bls.n	3f56 <__udivmoddi4+0xe2>
    3e8a:	fab2 f382 	clz	r3, r2
    3e8e:	b143      	cbz	r3, 3ea2 <__udivmoddi4+0x2e>
    3e90:	fa02 fc03 	lsl.w	ip, r2, r3
    3e94:	f1c3 0220 	rsb	r2, r3, #32
    3e98:	409f      	lsls	r7, r3
    3e9a:	fa20 f202 	lsr.w	r2, r0, r2
    3e9e:	4317      	orrs	r7, r2
    3ea0:	409c      	lsls	r4, r3
    3ea2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
    3ea6:	fa1f f58c 	uxth.w	r5, ip
    3eaa:	fbb7 f1fe 	udiv	r1, r7, lr
    3eae:	0c22      	lsrs	r2, r4, #16
    3eb0:	fb0e 7711 	mls	r7, lr, r1, r7
    3eb4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
    3eb8:	fb01 f005 	mul.w	r0, r1, r5
    3ebc:	4290      	cmp	r0, r2
    3ebe:	d90a      	bls.n	3ed6 <__udivmoddi4+0x62>
    3ec0:	eb1c 0202 	adds.w	r2, ip, r2
    3ec4:	f101 37ff 	add.w	r7, r1, #4294967295
    3ec8:	f080 811c 	bcs.w	4104 <__udivmoddi4+0x290>
    3ecc:	4290      	cmp	r0, r2
    3ece:	f240 8119 	bls.w	4104 <__udivmoddi4+0x290>
    3ed2:	3902      	subs	r1, #2
    3ed4:	4462      	add	r2, ip
    3ed6:	1a12      	subs	r2, r2, r0
    3ed8:	b2a4      	uxth	r4, r4
    3eda:	fbb2 f0fe 	udiv	r0, r2, lr
    3ede:	fb0e 2210 	mls	r2, lr, r0, r2
    3ee2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    3ee6:	fb00 f505 	mul.w	r5, r0, r5
    3eea:	42a5      	cmp	r5, r4
    3eec:	d90a      	bls.n	3f04 <__udivmoddi4+0x90>
    3eee:	eb1c 0404 	adds.w	r4, ip, r4
    3ef2:	f100 32ff 	add.w	r2, r0, #4294967295
    3ef6:	f080 8107 	bcs.w	4108 <__udivmoddi4+0x294>
    3efa:	42a5      	cmp	r5, r4
    3efc:	f240 8104 	bls.w	4108 <__udivmoddi4+0x294>
    3f00:	4464      	add	r4, ip
    3f02:	3802      	subs	r0, #2
    3f04:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
    3f08:	1b64      	subs	r4, r4, r5
    3f0a:	2100      	movs	r1, #0
    3f0c:	b11e      	cbz	r6, 3f16 <__udivmoddi4+0xa2>
    3f0e:	40dc      	lsrs	r4, r3
    3f10:	2300      	movs	r3, #0
    3f12:	e9c6 4300 	strd	r4, r3, [r6]
    3f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3f1a:	428b      	cmp	r3, r1
    3f1c:	d908      	bls.n	3f30 <__udivmoddi4+0xbc>
    3f1e:	2e00      	cmp	r6, #0
    3f20:	f000 80ed 	beq.w	40fe <__udivmoddi4+0x28a>
    3f24:	2100      	movs	r1, #0
    3f26:	e9c6 0500 	strd	r0, r5, [r6]
    3f2a:	4608      	mov	r0, r1
    3f2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3f30:	fab3 f183 	clz	r1, r3
    3f34:	2900      	cmp	r1, #0
    3f36:	d149      	bne.n	3fcc <__udivmoddi4+0x158>
    3f38:	42ab      	cmp	r3, r5
    3f3a:	d302      	bcc.n	3f42 <__udivmoddi4+0xce>
    3f3c:	4282      	cmp	r2, r0
    3f3e:	f200 80f8 	bhi.w	4132 <__udivmoddi4+0x2be>
    3f42:	1a84      	subs	r4, r0, r2
    3f44:	eb65 0203 	sbc.w	r2, r5, r3
    3f48:	2001      	movs	r0, #1
    3f4a:	4617      	mov	r7, r2
    3f4c:	2e00      	cmp	r6, #0
    3f4e:	d0e2      	beq.n	3f16 <__udivmoddi4+0xa2>
    3f50:	e9c6 4700 	strd	r4, r7, [r6]
    3f54:	e7df      	b.n	3f16 <__udivmoddi4+0xa2>
    3f56:	b902      	cbnz	r2, 3f5a <__udivmoddi4+0xe6>
    3f58:	deff      	udf	#255	; 0xff
    3f5a:	fab2 f382 	clz	r3, r2
    3f5e:	2b00      	cmp	r3, #0
    3f60:	f040 8090 	bne.w	4084 <__udivmoddi4+0x210>
    3f64:	1a8a      	subs	r2, r1, r2
    3f66:	ea4f 471c 	mov.w	r7, ip, lsr #16
    3f6a:	fa1f fe8c 	uxth.w	lr, ip
    3f6e:	2101      	movs	r1, #1
    3f70:	fbb2 f5f7 	udiv	r5, r2, r7
    3f74:	fb07 2015 	mls	r0, r7, r5, r2
    3f78:	0c22      	lsrs	r2, r4, #16
    3f7a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    3f7e:	fb0e f005 	mul.w	r0, lr, r5
    3f82:	4290      	cmp	r0, r2
    3f84:	d908      	bls.n	3f98 <__udivmoddi4+0x124>
    3f86:	eb1c 0202 	adds.w	r2, ip, r2
    3f8a:	f105 38ff 	add.w	r8, r5, #4294967295
    3f8e:	d202      	bcs.n	3f96 <__udivmoddi4+0x122>
    3f90:	4290      	cmp	r0, r2
    3f92:	f200 80cb 	bhi.w	412c <__udivmoddi4+0x2b8>
    3f96:	4645      	mov	r5, r8
    3f98:	1a12      	subs	r2, r2, r0
    3f9a:	b2a4      	uxth	r4, r4
    3f9c:	fbb2 f0f7 	udiv	r0, r2, r7
    3fa0:	fb07 2210 	mls	r2, r7, r0, r2
    3fa4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    3fa8:	fb0e fe00 	mul.w	lr, lr, r0
    3fac:	45a6      	cmp	lr, r4
    3fae:	d908      	bls.n	3fc2 <__udivmoddi4+0x14e>
    3fb0:	eb1c 0404 	adds.w	r4, ip, r4
    3fb4:	f100 32ff 	add.w	r2, r0, #4294967295
    3fb8:	d202      	bcs.n	3fc0 <__udivmoddi4+0x14c>
    3fba:	45a6      	cmp	lr, r4
    3fbc:	f200 80bb 	bhi.w	4136 <__udivmoddi4+0x2c2>
    3fc0:	4610      	mov	r0, r2
    3fc2:	eba4 040e 	sub.w	r4, r4, lr
    3fc6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
    3fca:	e79f      	b.n	3f0c <__udivmoddi4+0x98>
    3fcc:	f1c1 0720 	rsb	r7, r1, #32
    3fd0:	408b      	lsls	r3, r1
    3fd2:	fa22 fc07 	lsr.w	ip, r2, r7
    3fd6:	ea4c 0c03 	orr.w	ip, ip, r3
    3fda:	fa05 f401 	lsl.w	r4, r5, r1
    3fde:	fa20 f307 	lsr.w	r3, r0, r7
    3fe2:	40fd      	lsrs	r5, r7
    3fe4:	ea4f 491c 	mov.w	r9, ip, lsr #16
    3fe8:	4323      	orrs	r3, r4
    3fea:	fbb5 f8f9 	udiv	r8, r5, r9
    3fee:	fa1f fe8c 	uxth.w	lr, ip
    3ff2:	fb09 5518 	mls	r5, r9, r8, r5
    3ff6:	0c1c      	lsrs	r4, r3, #16
    3ff8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    3ffc:	fb08 f50e 	mul.w	r5, r8, lr
    4000:	42a5      	cmp	r5, r4
    4002:	fa02 f201 	lsl.w	r2, r2, r1
    4006:	fa00 f001 	lsl.w	r0, r0, r1
    400a:	d90b      	bls.n	4024 <__udivmoddi4+0x1b0>
    400c:	eb1c 0404 	adds.w	r4, ip, r4
    4010:	f108 3aff 	add.w	sl, r8, #4294967295
    4014:	f080 8088 	bcs.w	4128 <__udivmoddi4+0x2b4>
    4018:	42a5      	cmp	r5, r4
    401a:	f240 8085 	bls.w	4128 <__udivmoddi4+0x2b4>
    401e:	f1a8 0802 	sub.w	r8, r8, #2
    4022:	4464      	add	r4, ip
    4024:	1b64      	subs	r4, r4, r5
    4026:	b29d      	uxth	r5, r3
    4028:	fbb4 f3f9 	udiv	r3, r4, r9
    402c:	fb09 4413 	mls	r4, r9, r3, r4
    4030:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
    4034:	fb03 fe0e 	mul.w	lr, r3, lr
    4038:	45a6      	cmp	lr, r4
    403a:	d908      	bls.n	404e <__udivmoddi4+0x1da>
    403c:	eb1c 0404 	adds.w	r4, ip, r4
    4040:	f103 35ff 	add.w	r5, r3, #4294967295
    4044:	d26c      	bcs.n	4120 <__udivmoddi4+0x2ac>
    4046:	45a6      	cmp	lr, r4
    4048:	d96a      	bls.n	4120 <__udivmoddi4+0x2ac>
    404a:	3b02      	subs	r3, #2
    404c:	4464      	add	r4, ip
    404e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    4052:	fba3 9502 	umull	r9, r5, r3, r2
    4056:	eba4 040e 	sub.w	r4, r4, lr
    405a:	42ac      	cmp	r4, r5
    405c:	46c8      	mov	r8, r9
    405e:	46ae      	mov	lr, r5
    4060:	d356      	bcc.n	4110 <__udivmoddi4+0x29c>
    4062:	d053      	beq.n	410c <__udivmoddi4+0x298>
    4064:	b156      	cbz	r6, 407c <__udivmoddi4+0x208>
    4066:	ebb0 0208 	subs.w	r2, r0, r8
    406a:	eb64 040e 	sbc.w	r4, r4, lr
    406e:	fa04 f707 	lsl.w	r7, r4, r7
    4072:	40ca      	lsrs	r2, r1
    4074:	40cc      	lsrs	r4, r1
    4076:	4317      	orrs	r7, r2
    4078:	e9c6 7400 	strd	r7, r4, [r6]
    407c:	4618      	mov	r0, r3
    407e:	2100      	movs	r1, #0
    4080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4084:	f1c3 0120 	rsb	r1, r3, #32
    4088:	fa02 fc03 	lsl.w	ip, r2, r3
    408c:	fa20 f201 	lsr.w	r2, r0, r1
    4090:	fa25 f101 	lsr.w	r1, r5, r1
    4094:	409d      	lsls	r5, r3
    4096:	432a      	orrs	r2, r5
    4098:	ea4f 471c 	mov.w	r7, ip, lsr #16
    409c:	fa1f fe8c 	uxth.w	lr, ip
    40a0:	fbb1 f0f7 	udiv	r0, r1, r7
    40a4:	fb07 1510 	mls	r5, r7, r0, r1
    40a8:	0c11      	lsrs	r1, r2, #16
    40aa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
    40ae:	fb00 f50e 	mul.w	r5, r0, lr
    40b2:	428d      	cmp	r5, r1
    40b4:	fa04 f403 	lsl.w	r4, r4, r3
    40b8:	d908      	bls.n	40cc <__udivmoddi4+0x258>
    40ba:	eb1c 0101 	adds.w	r1, ip, r1
    40be:	f100 38ff 	add.w	r8, r0, #4294967295
    40c2:	d22f      	bcs.n	4124 <__udivmoddi4+0x2b0>
    40c4:	428d      	cmp	r5, r1
    40c6:	d92d      	bls.n	4124 <__udivmoddi4+0x2b0>
    40c8:	3802      	subs	r0, #2
    40ca:	4461      	add	r1, ip
    40cc:	1b49      	subs	r1, r1, r5
    40ce:	b292      	uxth	r2, r2
    40d0:	fbb1 f5f7 	udiv	r5, r1, r7
    40d4:	fb07 1115 	mls	r1, r7, r5, r1
    40d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    40dc:	fb05 f10e 	mul.w	r1, r5, lr
    40e0:	4291      	cmp	r1, r2
    40e2:	d908      	bls.n	40f6 <__udivmoddi4+0x282>
    40e4:	eb1c 0202 	adds.w	r2, ip, r2
    40e8:	f105 38ff 	add.w	r8, r5, #4294967295
    40ec:	d216      	bcs.n	411c <__udivmoddi4+0x2a8>
    40ee:	4291      	cmp	r1, r2
    40f0:	d914      	bls.n	411c <__udivmoddi4+0x2a8>
    40f2:	3d02      	subs	r5, #2
    40f4:	4462      	add	r2, ip
    40f6:	1a52      	subs	r2, r2, r1
    40f8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
    40fc:	e738      	b.n	3f70 <__udivmoddi4+0xfc>
    40fe:	4631      	mov	r1, r6
    4100:	4630      	mov	r0, r6
    4102:	e708      	b.n	3f16 <__udivmoddi4+0xa2>
    4104:	4639      	mov	r1, r7
    4106:	e6e6      	b.n	3ed6 <__udivmoddi4+0x62>
    4108:	4610      	mov	r0, r2
    410a:	e6fb      	b.n	3f04 <__udivmoddi4+0x90>
    410c:	4548      	cmp	r0, r9
    410e:	d2a9      	bcs.n	4064 <__udivmoddi4+0x1f0>
    4110:	ebb9 0802 	subs.w	r8, r9, r2
    4114:	eb65 0e0c 	sbc.w	lr, r5, ip
    4118:	3b01      	subs	r3, #1
    411a:	e7a3      	b.n	4064 <__udivmoddi4+0x1f0>
    411c:	4645      	mov	r5, r8
    411e:	e7ea      	b.n	40f6 <__udivmoddi4+0x282>
    4120:	462b      	mov	r3, r5
    4122:	e794      	b.n	404e <__udivmoddi4+0x1da>
    4124:	4640      	mov	r0, r8
    4126:	e7d1      	b.n	40cc <__udivmoddi4+0x258>
    4128:	46d0      	mov	r8, sl
    412a:	e77b      	b.n	4024 <__udivmoddi4+0x1b0>
    412c:	3d02      	subs	r5, #2
    412e:	4462      	add	r2, ip
    4130:	e732      	b.n	3f98 <__udivmoddi4+0x124>
    4132:	4608      	mov	r0, r1
    4134:	e70a      	b.n	3f4c <__udivmoddi4+0xd8>
    4136:	4464      	add	r4, ip
    4138:	3802      	subs	r0, #2
    413a:	e742      	b.n	3fc2 <__udivmoddi4+0x14e>

0000413c <__aeabi_idiv0>:
    413c:	4770      	bx	lr
    413e:	bf00      	nop

00004140 <malloc>:
    4140:	4b02      	ldr	r3, [pc, #8]	; (414c <malloc+0xc>)
    4142:	4601      	mov	r1, r0
    4144:	6818      	ldr	r0, [r3, #0]
    4146:	f000 b80b 	b.w	4160 <_malloc_r>
    414a:	bf00      	nop
    414c:	200081c0 	.word	0x200081c0

00004150 <free>:
    4150:	4b02      	ldr	r3, [pc, #8]	; (415c <free+0xc>)
    4152:	4601      	mov	r1, r0
    4154:	6818      	ldr	r0, [r3, #0]
    4156:	f002 bbe5 	b.w	6924 <_free_r>
    415a:	bf00      	nop
    415c:	200081c0 	.word	0x200081c0

00004160 <_malloc_r>:
    4160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4164:	f101 060b 	add.w	r6, r1, #11
    4168:	2e16      	cmp	r6, #22
    416a:	b083      	sub	sp, #12
    416c:	4604      	mov	r4, r0
    416e:	d824      	bhi.n	41ba <_malloc_r+0x5a>
    4170:	2910      	cmp	r1, #16
    4172:	f200 80ba 	bhi.w	42ea <_malloc_r+0x18a>
    4176:	f000 faa3 	bl	46c0 <__malloc_lock>
    417a:	2610      	movs	r6, #16
    417c:	2218      	movs	r2, #24
    417e:	2002      	movs	r0, #2
    4180:	4fb5      	ldr	r7, [pc, #724]	; (4458 <_malloc_r+0x2f8>)
    4182:	443a      	add	r2, r7
    4184:	f1a2 0108 	sub.w	r1, r2, #8
    4188:	6853      	ldr	r3, [r2, #4]
    418a:	428b      	cmp	r3, r1
    418c:	f000 80ba 	beq.w	4304 <_malloc_r+0x1a4>
    4190:	685a      	ldr	r2, [r3, #4]
    4192:	68d9      	ldr	r1, [r3, #12]
    4194:	f022 0203 	bic.w	r2, r2, #3
    4198:	441a      	add	r2, r3
    419a:	689d      	ldr	r5, [r3, #8]
    419c:	60e9      	str	r1, [r5, #12]
    419e:	608d      	str	r5, [r1, #8]
    41a0:	6851      	ldr	r1, [r2, #4]
    41a2:	f041 0101 	orr.w	r1, r1, #1
    41a6:	4620      	mov	r0, r4
    41a8:	6051      	str	r1, [r2, #4]
    41aa:	f103 0508 	add.w	r5, r3, #8
    41ae:	f000 fa8d 	bl	46cc <__malloc_unlock>
    41b2:	4628      	mov	r0, r5
    41b4:	b003      	add	sp, #12
    41b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    41ba:	f036 0607 	bics.w	r6, r6, #7
    41be:	f100 8094 	bmi.w	42ea <_malloc_r+0x18a>
    41c2:	42b1      	cmp	r1, r6
    41c4:	f200 8091 	bhi.w	42ea <_malloc_r+0x18a>
    41c8:	f000 fa7a 	bl	46c0 <__malloc_lock>
    41cc:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
    41d0:	f0c0 819a 	bcc.w	4508 <_malloc_r+0x3a8>
    41d4:	0a73      	lsrs	r3, r6, #9
    41d6:	f000 808f 	beq.w	42f8 <_malloc_r+0x198>
    41da:	2b04      	cmp	r3, #4
    41dc:	f200 816f 	bhi.w	44be <_malloc_r+0x35e>
    41e0:	09b3      	lsrs	r3, r6, #6
    41e2:	f103 0039 	add.w	r0, r3, #57	; 0x39
    41e6:	f103 0c38 	add.w	ip, r3, #56	; 0x38
    41ea:	00c3      	lsls	r3, r0, #3
    41ec:	4f9a      	ldr	r7, [pc, #616]	; (4458 <_malloc_r+0x2f8>)
    41ee:	443b      	add	r3, r7
    41f0:	f1a3 0508 	sub.w	r5, r3, #8
    41f4:	685b      	ldr	r3, [r3, #4]
    41f6:	429d      	cmp	r5, r3
    41f8:	d106      	bne.n	4208 <_malloc_r+0xa8>
    41fa:	e00c      	b.n	4216 <_malloc_r+0xb6>
    41fc:	2900      	cmp	r1, #0
    41fe:	f280 8127 	bge.w	4450 <_malloc_r+0x2f0>
    4202:	68db      	ldr	r3, [r3, #12]
    4204:	429d      	cmp	r5, r3
    4206:	d006      	beq.n	4216 <_malloc_r+0xb6>
    4208:	685a      	ldr	r2, [r3, #4]
    420a:	f022 0203 	bic.w	r2, r2, #3
    420e:	1b91      	subs	r1, r2, r6
    4210:	290f      	cmp	r1, #15
    4212:	ddf3      	ble.n	41fc <_malloc_r+0x9c>
    4214:	4660      	mov	r0, ip
    4216:	693d      	ldr	r5, [r7, #16]
    4218:	f8df c250 	ldr.w	ip, [pc, #592]	; 446c <_malloc_r+0x30c>
    421c:	4565      	cmp	r5, ip
    421e:	d07c      	beq.n	431a <_malloc_r+0x1ba>
    4220:	686a      	ldr	r2, [r5, #4]
    4222:	f022 0203 	bic.w	r2, r2, #3
    4226:	1b93      	subs	r3, r2, r6
    4228:	2b0f      	cmp	r3, #15
    422a:	f300 817b 	bgt.w	4524 <_malloc_r+0x3c4>
    422e:	2b00      	cmp	r3, #0
    4230:	e9c7 cc04 	strd	ip, ip, [r7, #16]
    4234:	f280 816c 	bge.w	4510 <_malloc_r+0x3b0>
    4238:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    423c:	f080 811a 	bcs.w	4474 <_malloc_r+0x314>
    4240:	08d3      	lsrs	r3, r2, #3
    4242:	6879      	ldr	r1, [r7, #4]
    4244:	3301      	adds	r3, #1
    4246:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    424a:	2201      	movs	r2, #1
    424c:	fa02 f20e 	lsl.w	r2, r2, lr
    4250:	430a      	orrs	r2, r1
    4252:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
    4256:	f8c5 e008 	str.w	lr, [r5, #8]
    425a:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    425e:	3908      	subs	r1, #8
    4260:	60e9      	str	r1, [r5, #12]
    4262:	607a      	str	r2, [r7, #4]
    4264:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    4268:	f8ce 500c 	str.w	r5, [lr, #12]
    426c:	1083      	asrs	r3, r0, #2
    426e:	2101      	movs	r1, #1
    4270:	4099      	lsls	r1, r3
    4272:	4291      	cmp	r1, r2
    4274:	d857      	bhi.n	4326 <_malloc_r+0x1c6>
    4276:	4211      	tst	r1, r2
    4278:	d106      	bne.n	4288 <_malloc_r+0x128>
    427a:	f020 0003 	bic.w	r0, r0, #3
    427e:	0049      	lsls	r1, r1, #1
    4280:	4211      	tst	r1, r2
    4282:	f100 0004 	add.w	r0, r0, #4
    4286:	d0fa      	beq.n	427e <_malloc_r+0x11e>
    4288:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    428c:	464d      	mov	r5, r9
    428e:	4686      	mov	lr, r0
    4290:	f8d5 800c 	ldr.w	r8, [r5, #12]
    4294:	4545      	cmp	r5, r8
    4296:	d108      	bne.n	42aa <_malloc_r+0x14a>
    4298:	e11d      	b.n	44d6 <_malloc_r+0x376>
    429a:	2b00      	cmp	r3, #0
    429c:	f280 8124 	bge.w	44e8 <_malloc_r+0x388>
    42a0:	f8d8 800c 	ldr.w	r8, [r8, #12]
    42a4:	4545      	cmp	r5, r8
    42a6:	f000 8116 	beq.w	44d6 <_malloc_r+0x376>
    42aa:	f8d8 2004 	ldr.w	r2, [r8, #4]
    42ae:	f022 0203 	bic.w	r2, r2, #3
    42b2:	1b93      	subs	r3, r2, r6
    42b4:	2b0f      	cmp	r3, #15
    42b6:	ddf0      	ble.n	429a <_malloc_r+0x13a>
    42b8:	4620      	mov	r0, r4
    42ba:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
    42be:	eb08 0106 	add.w	r1, r8, r6
    42c2:	f046 0601 	orr.w	r6, r6, #1
    42c6:	f8c8 6004 	str.w	r6, [r8, #4]
    42ca:	60ec      	str	r4, [r5, #12]
    42cc:	60a5      	str	r5, [r4, #8]
    42ce:	f043 0401 	orr.w	r4, r3, #1
    42d2:	e9c7 1104 	strd	r1, r1, [r7, #16]
    42d6:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    42da:	604c      	str	r4, [r1, #4]
    42dc:	f848 3002 	str.w	r3, [r8, r2]
    42e0:	f000 f9f4 	bl	46cc <__malloc_unlock>
    42e4:	f108 0508 	add.w	r5, r8, #8
    42e8:	e002      	b.n	42f0 <_malloc_r+0x190>
    42ea:	230c      	movs	r3, #12
    42ec:	6023      	str	r3, [r4, #0]
    42ee:	2500      	movs	r5, #0
    42f0:	4628      	mov	r0, r5
    42f2:	b003      	add	sp, #12
    42f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    42f8:	f44f 7300 	mov.w	r3, #512	; 0x200
    42fc:	2040      	movs	r0, #64	; 0x40
    42fe:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    4302:	e773      	b.n	41ec <_malloc_r+0x8c>
    4304:	68d3      	ldr	r3, [r2, #12]
    4306:	429a      	cmp	r2, r3
    4308:	bf08      	it	eq
    430a:	3002      	addeq	r0, #2
    430c:	f47f af40 	bne.w	4190 <_malloc_r+0x30>
    4310:	693d      	ldr	r5, [r7, #16]
    4312:	f8df c158 	ldr.w	ip, [pc, #344]	; 446c <_malloc_r+0x30c>
    4316:	4565      	cmp	r5, ip
    4318:	d182      	bne.n	4220 <_malloc_r+0xc0>
    431a:	687a      	ldr	r2, [r7, #4]
    431c:	1083      	asrs	r3, r0, #2
    431e:	2101      	movs	r1, #1
    4320:	4099      	lsls	r1, r3
    4322:	4291      	cmp	r1, r2
    4324:	d9a7      	bls.n	4276 <_malloc_r+0x116>
    4326:	68bd      	ldr	r5, [r7, #8]
    4328:	686b      	ldr	r3, [r5, #4]
    432a:	f023 0903 	bic.w	r9, r3, #3
    432e:	454e      	cmp	r6, r9
    4330:	d803      	bhi.n	433a <_malloc_r+0x1da>
    4332:	eba9 0306 	sub.w	r3, r9, r6
    4336:	2b0f      	cmp	r3, #15
    4338:	dc7a      	bgt.n	4430 <_malloc_r+0x2d0>
    433a:	f8df b134 	ldr.w	fp, [pc, #308]	; 4470 <_malloc_r+0x310>
    433e:	4b47      	ldr	r3, [pc, #284]	; (445c <_malloc_r+0x2fc>)
    4340:	f8db 2000 	ldr.w	r2, [fp]
    4344:	681b      	ldr	r3, [r3, #0]
    4346:	3201      	adds	r2, #1
    4348:	4433      	add	r3, r6
    434a:	eb05 0a09 	add.w	sl, r5, r9
    434e:	f000 8133 	beq.w	45b8 <_malloc_r+0x458>
    4352:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    4356:	330f      	adds	r3, #15
    4358:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
    435c:	f028 080f 	bic.w	r8, r8, #15
    4360:	4641      	mov	r1, r8
    4362:	4620      	mov	r0, r4
    4364:	f001 ff90 	bl	6288 <_sbrk_r>
    4368:	1c41      	adds	r1, r0, #1
    436a:	4602      	mov	r2, r0
    436c:	f000 80f3 	beq.w	4556 <_malloc_r+0x3f6>
    4370:	4582      	cmp	sl, r0
    4372:	f200 80ee 	bhi.w	4552 <_malloc_r+0x3f2>
    4376:	4b3a      	ldr	r3, [pc, #232]	; (4460 <_malloc_r+0x300>)
    4378:	6819      	ldr	r1, [r3, #0]
    437a:	4441      	add	r1, r8
    437c:	6019      	str	r1, [r3, #0]
    437e:	4608      	mov	r0, r1
    4380:	f000 814e 	beq.w	4620 <_malloc_r+0x4c0>
    4384:	f8db 1000 	ldr.w	r1, [fp]
    4388:	9301      	str	r3, [sp, #4]
    438a:	3101      	adds	r1, #1
    438c:	bf1b      	ittet	ne
    438e:	eba2 010a 	subne.w	r1, r2, sl
    4392:	1809      	addne	r1, r1, r0
    4394:	f8cb 2000 	streq.w	r2, [fp]
    4398:	6019      	strne	r1, [r3, #0]
    439a:	f012 0b07 	ands.w	fp, r2, #7
    439e:	f000 8117 	beq.w	45d0 <_malloc_r+0x470>
    43a2:	f1cb 0108 	rsb	r1, fp, #8
    43a6:	440a      	add	r2, r1
    43a8:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
    43ac:	4490      	add	r8, r2
    43ae:	3108      	adds	r1, #8
    43b0:	eba1 0108 	sub.w	r1, r1, r8
    43b4:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    43b8:	4651      	mov	r1, sl
    43ba:	4620      	mov	r0, r4
    43bc:	9200      	str	r2, [sp, #0]
    43be:	f001 ff63 	bl	6288 <_sbrk_r>
    43c2:	1c42      	adds	r2, r0, #1
    43c4:	e9dd 2300 	ldrd	r2, r3, [sp]
    43c8:	f000 814f 	beq.w	466a <_malloc_r+0x50a>
    43cc:	1a80      	subs	r0, r0, r2
    43ce:	eb00 080a 	add.w	r8, r0, sl
    43d2:	6819      	ldr	r1, [r3, #0]
    43d4:	60ba      	str	r2, [r7, #8]
    43d6:	f048 0001 	orr.w	r0, r8, #1
    43da:	4451      	add	r1, sl
    43dc:	42bd      	cmp	r5, r7
    43de:	6050      	str	r0, [r2, #4]
    43e0:	6019      	str	r1, [r3, #0]
    43e2:	f000 8129 	beq.w	4638 <_malloc_r+0x4d8>
    43e6:	f1b9 0f0f 	cmp.w	r9, #15
    43ea:	f240 8127 	bls.w	463c <_malloc_r+0x4dc>
    43ee:	6868      	ldr	r0, [r5, #4]
    43f0:	f1a9 0c0c 	sub.w	ip, r9, #12
    43f4:	f02c 0c07 	bic.w	ip, ip, #7
    43f8:	f000 0001 	and.w	r0, r0, #1
    43fc:	ea40 000c 	orr.w	r0, r0, ip
    4400:	6068      	str	r0, [r5, #4]
    4402:	f04f 0e05 	mov.w	lr, #5
    4406:	eb05 000c 	add.w	r0, r5, ip
    440a:	f1bc 0f0f 	cmp.w	ip, #15
    440e:	e9c0 ee01 	strd	lr, lr, [r0, #4]
    4412:	f200 8132 	bhi.w	467a <_malloc_r+0x51a>
    4416:	6850      	ldr	r0, [r2, #4]
    4418:	4615      	mov	r5, r2
    441a:	4b12      	ldr	r3, [pc, #72]	; (4464 <_malloc_r+0x304>)
    441c:	681a      	ldr	r2, [r3, #0]
    441e:	428a      	cmp	r2, r1
    4420:	bf38      	it	cc
    4422:	6019      	strcc	r1, [r3, #0]
    4424:	4b10      	ldr	r3, [pc, #64]	; (4468 <_malloc_r+0x308>)
    4426:	681a      	ldr	r2, [r3, #0]
    4428:	428a      	cmp	r2, r1
    442a:	bf38      	it	cc
    442c:	6019      	strcc	r1, [r3, #0]
    442e:	e094      	b.n	455a <_malloc_r+0x3fa>
    4430:	19aa      	adds	r2, r5, r6
    4432:	f043 0301 	orr.w	r3, r3, #1
    4436:	f046 0601 	orr.w	r6, r6, #1
    443a:	606e      	str	r6, [r5, #4]
    443c:	4620      	mov	r0, r4
    443e:	60ba      	str	r2, [r7, #8]
    4440:	6053      	str	r3, [r2, #4]
    4442:	f000 f943 	bl	46cc <__malloc_unlock>
    4446:	3508      	adds	r5, #8
    4448:	4628      	mov	r0, r5
    444a:	b003      	add	sp, #12
    444c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4450:	68d9      	ldr	r1, [r3, #12]
    4452:	441a      	add	r2, r3
    4454:	e6a1      	b.n	419a <_malloc_r+0x3a>
    4456:	bf00      	nop
    4458:	20007da4 	.word	0x20007da4
    445c:	2000909c 	.word	0x2000909c
    4460:	2000906c 	.word	0x2000906c
    4464:	20009094 	.word	0x20009094
    4468:	20009098 	.word	0x20009098
    446c:	20007dac 	.word	0x20007dac
    4470:	200081ac 	.word	0x200081ac
    4474:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
    4478:	ea4f 2352 	mov.w	r3, r2, lsr #9
    447c:	d363      	bcc.n	4546 <_malloc_r+0x3e6>
    447e:	2b14      	cmp	r3, #20
    4480:	f200 80b7 	bhi.w	45f2 <_malloc_r+0x492>
    4484:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    4488:	00c9      	lsls	r1, r1, #3
    448a:	335b      	adds	r3, #91	; 0x5b
    448c:	eb07 0e01 	add.w	lr, r7, r1
    4490:	5879      	ldr	r1, [r7, r1]
    4492:	f1ae 0e08 	sub.w	lr, lr, #8
    4496:	458e      	cmp	lr, r1
    4498:	f000 8091 	beq.w	45be <_malloc_r+0x45e>
    449c:	684b      	ldr	r3, [r1, #4]
    449e:	f023 0303 	bic.w	r3, r3, #3
    44a2:	4293      	cmp	r3, r2
    44a4:	d902      	bls.n	44ac <_malloc_r+0x34c>
    44a6:	6889      	ldr	r1, [r1, #8]
    44a8:	458e      	cmp	lr, r1
    44aa:	d1f7      	bne.n	449c <_malloc_r+0x33c>
    44ac:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    44b0:	687a      	ldr	r2, [r7, #4]
    44b2:	e9c5 1e02 	strd	r1, lr, [r5, #8]
    44b6:	f8ce 5008 	str.w	r5, [lr, #8]
    44ba:	60cd      	str	r5, [r1, #12]
    44bc:	e6d6      	b.n	426c <_malloc_r+0x10c>
    44be:	2b14      	cmp	r3, #20
    44c0:	d959      	bls.n	4576 <_malloc_r+0x416>
    44c2:	2b54      	cmp	r3, #84	; 0x54
    44c4:	f200 809d 	bhi.w	4602 <_malloc_r+0x4a2>
    44c8:	0b33      	lsrs	r3, r6, #12
    44ca:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    44ce:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
    44d2:	00c3      	lsls	r3, r0, #3
    44d4:	e68a      	b.n	41ec <_malloc_r+0x8c>
    44d6:	f10e 0e01 	add.w	lr, lr, #1
    44da:	f01e 0f03 	tst.w	lr, #3
    44de:	f105 0508 	add.w	r5, r5, #8
    44e2:	f47f aed5 	bne.w	4290 <_malloc_r+0x130>
    44e6:	e051      	b.n	458c <_malloc_r+0x42c>
    44e8:	4442      	add	r2, r8
    44ea:	4645      	mov	r5, r8
    44ec:	6853      	ldr	r3, [r2, #4]
    44ee:	f8d8 100c 	ldr.w	r1, [r8, #12]
    44f2:	f043 0301 	orr.w	r3, r3, #1
    44f6:	6053      	str	r3, [r2, #4]
    44f8:	f855 3f08 	ldr.w	r3, [r5, #8]!
    44fc:	4620      	mov	r0, r4
    44fe:	60d9      	str	r1, [r3, #12]
    4500:	608b      	str	r3, [r1, #8]
    4502:	f000 f8e3 	bl	46cc <__malloc_unlock>
    4506:	e6f3      	b.n	42f0 <_malloc_r+0x190>
    4508:	08f0      	lsrs	r0, r6, #3
    450a:	f106 0208 	add.w	r2, r6, #8
    450e:	e637      	b.n	4180 <_malloc_r+0x20>
    4510:	442a      	add	r2, r5
    4512:	4620      	mov	r0, r4
    4514:	6853      	ldr	r3, [r2, #4]
    4516:	f043 0301 	orr.w	r3, r3, #1
    451a:	6053      	str	r3, [r2, #4]
    451c:	3508      	adds	r5, #8
    451e:	f000 f8d5 	bl	46cc <__malloc_unlock>
    4522:	e6e5      	b.n	42f0 <_malloc_r+0x190>
    4524:	19a9      	adds	r1, r5, r6
    4526:	4620      	mov	r0, r4
    4528:	f046 0601 	orr.w	r6, r6, #1
    452c:	f043 0401 	orr.w	r4, r3, #1
    4530:	606e      	str	r6, [r5, #4]
    4532:	e9c7 1104 	strd	r1, r1, [r7, #16]
    4536:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    453a:	604c      	str	r4, [r1, #4]
    453c:	50ab      	str	r3, [r5, r2]
    453e:	f000 f8c5 	bl	46cc <__malloc_unlock>
    4542:	3508      	adds	r5, #8
    4544:	e6d4      	b.n	42f0 <_malloc_r+0x190>
    4546:	0993      	lsrs	r3, r2, #6
    4548:	f103 0139 	add.w	r1, r3, #57	; 0x39
    454c:	00c9      	lsls	r1, r1, #3
    454e:	3338      	adds	r3, #56	; 0x38
    4550:	e79c      	b.n	448c <_malloc_r+0x32c>
    4552:	42bd      	cmp	r5, r7
    4554:	d05f      	beq.n	4616 <_malloc_r+0x4b6>
    4556:	68bd      	ldr	r5, [r7, #8]
    4558:	6868      	ldr	r0, [r5, #4]
    455a:	f020 0803 	bic.w	r8, r0, #3
    455e:	4546      	cmp	r6, r8
    4560:	eba8 0306 	sub.w	r3, r8, r6
    4564:	d802      	bhi.n	456c <_malloc_r+0x40c>
    4566:	2b0f      	cmp	r3, #15
    4568:	f73f af62 	bgt.w	4430 <_malloc_r+0x2d0>
    456c:	4620      	mov	r0, r4
    456e:	f000 f8ad 	bl	46cc <__malloc_unlock>
    4572:	2500      	movs	r5, #0
    4574:	e6bc      	b.n	42f0 <_malloc_r+0x190>
    4576:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    457a:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
    457e:	00c3      	lsls	r3, r0, #3
    4580:	e634      	b.n	41ec <_malloc_r+0x8c>
    4582:	f859 3908 	ldr.w	r3, [r9], #-8
    4586:	454b      	cmp	r3, r9
    4588:	f040 8096 	bne.w	46b8 <_malloc_r+0x558>
    458c:	f010 0f03 	tst.w	r0, #3
    4590:	f100 30ff 	add.w	r0, r0, #4294967295
    4594:	d1f5      	bne.n	4582 <_malloc_r+0x422>
    4596:	687b      	ldr	r3, [r7, #4]
    4598:	ea23 0301 	bic.w	r3, r3, r1
    459c:	607b      	str	r3, [r7, #4]
    459e:	0049      	lsls	r1, r1, #1
    45a0:	4299      	cmp	r1, r3
    45a2:	f63f aec0 	bhi.w	4326 <_malloc_r+0x1c6>
    45a6:	b919      	cbnz	r1, 45b0 <_malloc_r+0x450>
    45a8:	e6bd      	b.n	4326 <_malloc_r+0x1c6>
    45aa:	0049      	lsls	r1, r1, #1
    45ac:	f10e 0e04 	add.w	lr, lr, #4
    45b0:	4219      	tst	r1, r3
    45b2:	d0fa      	beq.n	45aa <_malloc_r+0x44a>
    45b4:	4670      	mov	r0, lr
    45b6:	e667      	b.n	4288 <_malloc_r+0x128>
    45b8:	f103 0810 	add.w	r8, r3, #16
    45bc:	e6d0      	b.n	4360 <_malloc_r+0x200>
    45be:	109a      	asrs	r2, r3, #2
    45c0:	f04f 0801 	mov.w	r8, #1
    45c4:	687b      	ldr	r3, [r7, #4]
    45c6:	fa08 f202 	lsl.w	r2, r8, r2
    45ca:	431a      	orrs	r2, r3
    45cc:	607a      	str	r2, [r7, #4]
    45ce:	e770      	b.n	44b2 <_malloc_r+0x352>
    45d0:	eb02 0108 	add.w	r1, r2, r8
    45d4:	4249      	negs	r1, r1
    45d6:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    45da:	4651      	mov	r1, sl
    45dc:	4620      	mov	r0, r4
    45de:	9200      	str	r2, [sp, #0]
    45e0:	f001 fe52 	bl	6288 <_sbrk_r>
    45e4:	1c43      	adds	r3, r0, #1
    45e6:	e9dd 2300 	ldrd	r2, r3, [sp]
    45ea:	f47f aeef 	bne.w	43cc <_malloc_r+0x26c>
    45ee:	46da      	mov	sl, fp
    45f0:	e6ef      	b.n	43d2 <_malloc_r+0x272>
    45f2:	2b54      	cmp	r3, #84	; 0x54
    45f4:	d825      	bhi.n	4642 <_malloc_r+0x4e2>
    45f6:	0b13      	lsrs	r3, r2, #12
    45f8:	f103 016f 	add.w	r1, r3, #111	; 0x6f
    45fc:	00c9      	lsls	r1, r1, #3
    45fe:	336e      	adds	r3, #110	; 0x6e
    4600:	e744      	b.n	448c <_malloc_r+0x32c>
    4602:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    4606:	d825      	bhi.n	4654 <_malloc_r+0x4f4>
    4608:	0bf3      	lsrs	r3, r6, #15
    460a:	f103 0078 	add.w	r0, r3, #120	; 0x78
    460e:	f103 0c77 	add.w	ip, r3, #119	; 0x77
    4612:	00c3      	lsls	r3, r0, #3
    4614:	e5ea      	b.n	41ec <_malloc_r+0x8c>
    4616:	4b29      	ldr	r3, [pc, #164]	; (46bc <_malloc_r+0x55c>)
    4618:	6818      	ldr	r0, [r3, #0]
    461a:	4440      	add	r0, r8
    461c:	6018      	str	r0, [r3, #0]
    461e:	e6b1      	b.n	4384 <_malloc_r+0x224>
    4620:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
    4624:	f1bc 0f00 	cmp.w	ip, #0
    4628:	f47f aeac 	bne.w	4384 <_malloc_r+0x224>
    462c:	68bd      	ldr	r5, [r7, #8]
    462e:	44c8      	add	r8, r9
    4630:	f048 0001 	orr.w	r0, r8, #1
    4634:	6068      	str	r0, [r5, #4]
    4636:	e6f0      	b.n	441a <_malloc_r+0x2ba>
    4638:	4615      	mov	r5, r2
    463a:	e6ee      	b.n	441a <_malloc_r+0x2ba>
    463c:	2301      	movs	r3, #1
    463e:	6053      	str	r3, [r2, #4]
    4640:	e794      	b.n	456c <_malloc_r+0x40c>
    4642:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    4646:	d823      	bhi.n	4690 <_malloc_r+0x530>
    4648:	0bd3      	lsrs	r3, r2, #15
    464a:	f103 0178 	add.w	r1, r3, #120	; 0x78
    464e:	00c9      	lsls	r1, r1, #3
    4650:	3377      	adds	r3, #119	; 0x77
    4652:	e71b      	b.n	448c <_malloc_r+0x32c>
    4654:	f240 5254 	movw	r2, #1364	; 0x554
    4658:	4293      	cmp	r3, r2
    465a:	d823      	bhi.n	46a4 <_malloc_r+0x544>
    465c:	0cb3      	lsrs	r3, r6, #18
    465e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    4662:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
    4666:	00c3      	lsls	r3, r0, #3
    4668:	e5c0      	b.n	41ec <_malloc_r+0x8c>
    466a:	f1ab 0b08 	sub.w	fp, fp, #8
    466e:	44d8      	add	r8, fp
    4670:	eba8 0802 	sub.w	r8, r8, r2
    4674:	f04f 0a00 	mov.w	sl, #0
    4678:	e6ab      	b.n	43d2 <_malloc_r+0x272>
    467a:	f105 0108 	add.w	r1, r5, #8
    467e:	4620      	mov	r0, r4
    4680:	9300      	str	r3, [sp, #0]
    4682:	f002 f94f 	bl	6924 <_free_r>
    4686:	68bd      	ldr	r5, [r7, #8]
    4688:	9b00      	ldr	r3, [sp, #0]
    468a:	6868      	ldr	r0, [r5, #4]
    468c:	6819      	ldr	r1, [r3, #0]
    468e:	e6c4      	b.n	441a <_malloc_r+0x2ba>
    4690:	f240 5154 	movw	r1, #1364	; 0x554
    4694:	428b      	cmp	r3, r1
    4696:	d80b      	bhi.n	46b0 <_malloc_r+0x550>
    4698:	0c93      	lsrs	r3, r2, #18
    469a:	f103 017d 	add.w	r1, r3, #125	; 0x7d
    469e:	00c9      	lsls	r1, r1, #3
    46a0:	337c      	adds	r3, #124	; 0x7c
    46a2:	e6f3      	b.n	448c <_malloc_r+0x32c>
    46a4:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    46a8:	207f      	movs	r0, #127	; 0x7f
    46aa:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
    46ae:	e59d      	b.n	41ec <_malloc_r+0x8c>
    46b0:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    46b4:	237e      	movs	r3, #126	; 0x7e
    46b6:	e6e9      	b.n	448c <_malloc_r+0x32c>
    46b8:	687b      	ldr	r3, [r7, #4]
    46ba:	e770      	b.n	459e <_malloc_r+0x43e>
    46bc:	2000906c 	.word	0x2000906c

000046c0 <__malloc_lock>:
    46c0:	4801      	ldr	r0, [pc, #4]	; (46c8 <__malloc_lock+0x8>)
    46c2:	f001 be37 	b.w	6334 <__retarget_lock_acquire_recursive>
    46c6:	bf00      	nop
    46c8:	20009064 	.word	0x20009064

000046cc <__malloc_unlock>:
    46cc:	4801      	ldr	r0, [pc, #4]	; (46d4 <__malloc_unlock+0x8>)
    46ce:	f001 be33 	b.w	6338 <__retarget_lock_release_recursive>
    46d2:	bf00      	nop
    46d4:	20009064 	.word	0x20009064

000046d8 <realloc>:
    46d8:	b410      	push	{r4}
    46da:	4c04      	ldr	r4, [pc, #16]	; (46ec <realloc+0x14>)
    46dc:	4603      	mov	r3, r0
    46de:	460a      	mov	r2, r1
    46e0:	6820      	ldr	r0, [r4, #0]
    46e2:	f85d 4b04 	ldr.w	r4, [sp], #4
    46e6:	4619      	mov	r1, r3
    46e8:	f000 b802 	b.w	46f0 <_realloc_r>
    46ec:	200081c0 	.word	0x200081c0

000046f0 <_realloc_r>:
    46f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    46f4:	4617      	mov	r7, r2
    46f6:	2900      	cmp	r1, #0
    46f8:	f000 8098 	beq.w	482c <_realloc_r+0x13c>
    46fc:	460c      	mov	r4, r1
    46fe:	f107 050b 	add.w	r5, r7, #11
    4702:	4680      	mov	r8, r0
    4704:	f7ff ffdc 	bl	46c0 <__malloc_lock>
    4708:	2d16      	cmp	r5, #22
    470a:	f854 1c04 	ldr.w	r1, [r4, #-4]
    470e:	d85b      	bhi.n	47c8 <_realloc_r+0xd8>
    4710:	2510      	movs	r5, #16
    4712:	462a      	mov	r2, r5
    4714:	42af      	cmp	r7, r5
    4716:	d85c      	bhi.n	47d2 <_realloc_r+0xe2>
    4718:	f021 0603 	bic.w	r6, r1, #3
    471c:	4296      	cmp	r6, r2
    471e:	f1a4 0908 	sub.w	r9, r4, #8
    4722:	da62      	bge.n	47ea <_realloc_r+0xfa>
    4724:	4bbc      	ldr	r3, [pc, #752]	; (4a18 <_realloc_r+0x328>)
    4726:	f8d3 c008 	ldr.w	ip, [r3, #8]
    472a:	eb09 0006 	add.w	r0, r9, r6
    472e:	4584      	cmp	ip, r0
    4730:	f000 8097 	beq.w	4862 <_realloc_r+0x172>
    4734:	f8d0 c004 	ldr.w	ip, [r0, #4]
    4738:	f02c 0301 	bic.w	r3, ip, #1
    473c:	4403      	add	r3, r0
    473e:	685b      	ldr	r3, [r3, #4]
    4740:	07db      	lsls	r3, r3, #31
    4742:	d468      	bmi.n	4816 <_realloc_r+0x126>
    4744:	f02c 0c03 	bic.w	ip, ip, #3
    4748:	eb06 030c 	add.w	r3, r6, ip
    474c:	4293      	cmp	r3, r2
    474e:	da47      	bge.n	47e0 <_realloc_r+0xf0>
    4750:	07cb      	lsls	r3, r1, #31
    4752:	d410      	bmi.n	4776 <_realloc_r+0x86>
    4754:	f854 3c08 	ldr.w	r3, [r4, #-8]
    4758:	eba9 0a03 	sub.w	sl, r9, r3
    475c:	f8da 3004 	ldr.w	r3, [sl, #4]
    4760:	f023 0103 	bic.w	r1, r3, #3
    4764:	448c      	add	ip, r1
    4766:	44b4      	add	ip, r6
    4768:	4594      	cmp	ip, r2
    476a:	f280 8111 	bge.w	4990 <_realloc_r+0x2a0>
    476e:	1873      	adds	r3, r6, r1
    4770:	4293      	cmp	r3, r2
    4772:	f280 80e8 	bge.w	4946 <_realloc_r+0x256>
    4776:	4639      	mov	r1, r7
    4778:	4640      	mov	r0, r8
    477a:	f7ff fcf1 	bl	4160 <_malloc_r>
    477e:	4607      	mov	r7, r0
    4780:	b1e0      	cbz	r0, 47bc <_realloc_r+0xcc>
    4782:	f854 3c04 	ldr.w	r3, [r4, #-4]
    4786:	f023 0301 	bic.w	r3, r3, #1
    478a:	444b      	add	r3, r9
    478c:	f1a0 0208 	sub.w	r2, r0, #8
    4790:	4293      	cmp	r3, r2
    4792:	f000 80d2 	beq.w	493a <_realloc_r+0x24a>
    4796:	1f32      	subs	r2, r6, #4
    4798:	2a24      	cmp	r2, #36	; 0x24
    479a:	f200 80f5 	bhi.w	4988 <_realloc_r+0x298>
    479e:	2a13      	cmp	r2, #19
    47a0:	f200 80ac 	bhi.w	48fc <_realloc_r+0x20c>
    47a4:	4603      	mov	r3, r0
    47a6:	4622      	mov	r2, r4
    47a8:	6811      	ldr	r1, [r2, #0]
    47aa:	6019      	str	r1, [r3, #0]
    47ac:	6851      	ldr	r1, [r2, #4]
    47ae:	6059      	str	r1, [r3, #4]
    47b0:	6892      	ldr	r2, [r2, #8]
    47b2:	609a      	str	r2, [r3, #8]
    47b4:	4621      	mov	r1, r4
    47b6:	4640      	mov	r0, r8
    47b8:	f002 f8b4 	bl	6924 <_free_r>
    47bc:	4640      	mov	r0, r8
    47be:	f7ff ff85 	bl	46cc <__malloc_unlock>
    47c2:	4638      	mov	r0, r7
    47c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    47c8:	f025 0507 	bic.w	r5, r5, #7
    47cc:	2d00      	cmp	r5, #0
    47ce:	462a      	mov	r2, r5
    47d0:	daa0      	bge.n	4714 <_realloc_r+0x24>
    47d2:	230c      	movs	r3, #12
    47d4:	f8c8 3000 	str.w	r3, [r8]
    47d8:	2700      	movs	r7, #0
    47da:	4638      	mov	r0, r7
    47dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    47e0:	461e      	mov	r6, r3
    47e2:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    47e6:	60d3      	str	r3, [r2, #12]
    47e8:	609a      	str	r2, [r3, #8]
    47ea:	1b73      	subs	r3, r6, r5
    47ec:	2b0f      	cmp	r3, #15
    47ee:	d822      	bhi.n	4836 <_realloc_r+0x146>
    47f0:	f8d9 3004 	ldr.w	r3, [r9, #4]
    47f4:	f003 0301 	and.w	r3, r3, #1
    47f8:	4333      	orrs	r3, r6
    47fa:	444e      	add	r6, r9
    47fc:	f8c9 3004 	str.w	r3, [r9, #4]
    4800:	6873      	ldr	r3, [r6, #4]
    4802:	f043 0301 	orr.w	r3, r3, #1
    4806:	6073      	str	r3, [r6, #4]
    4808:	4640      	mov	r0, r8
    480a:	4627      	mov	r7, r4
    480c:	f7ff ff5e 	bl	46cc <__malloc_unlock>
    4810:	4638      	mov	r0, r7
    4812:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4816:	07c9      	lsls	r1, r1, #31
    4818:	d4ad      	bmi.n	4776 <_realloc_r+0x86>
    481a:	f854 3c08 	ldr.w	r3, [r4, #-8]
    481e:	eba9 0a03 	sub.w	sl, r9, r3
    4822:	f8da 1004 	ldr.w	r1, [sl, #4]
    4826:	f021 0103 	bic.w	r1, r1, #3
    482a:	e7a0      	b.n	476e <_realloc_r+0x7e>
    482c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4830:	4611      	mov	r1, r2
    4832:	f7ff bc95 	b.w	4160 <_malloc_r>
    4836:	f8d9 2004 	ldr.w	r2, [r9, #4]
    483a:	eb09 0105 	add.w	r1, r9, r5
    483e:	f002 0201 	and.w	r2, r2, #1
    4842:	444e      	add	r6, r9
    4844:	f043 0301 	orr.w	r3, r3, #1
    4848:	432a      	orrs	r2, r5
    484a:	f8c9 2004 	str.w	r2, [r9, #4]
    484e:	604b      	str	r3, [r1, #4]
    4850:	6873      	ldr	r3, [r6, #4]
    4852:	f043 0301 	orr.w	r3, r3, #1
    4856:	3108      	adds	r1, #8
    4858:	6073      	str	r3, [r6, #4]
    485a:	4640      	mov	r0, r8
    485c:	f002 f862 	bl	6924 <_free_r>
    4860:	e7d2      	b.n	4808 <_realloc_r+0x118>
    4862:	f8dc 0004 	ldr.w	r0, [ip, #4]
    4866:	f020 0b03 	bic.w	fp, r0, #3
    486a:	eb06 0c0b 	add.w	ip, r6, fp
    486e:	f105 0010 	add.w	r0, r5, #16
    4872:	4584      	cmp	ip, r0
    4874:	da4d      	bge.n	4912 <_realloc_r+0x222>
    4876:	07c9      	lsls	r1, r1, #31
    4878:	f53f af7d 	bmi.w	4776 <_realloc_r+0x86>
    487c:	f854 1c08 	ldr.w	r1, [r4, #-8]
    4880:	eba9 0a01 	sub.w	sl, r9, r1
    4884:	f8da 1004 	ldr.w	r1, [sl, #4]
    4888:	f021 0103 	bic.w	r1, r1, #3
    488c:	448b      	add	fp, r1
    488e:	44b3      	add	fp, r6
    4890:	4558      	cmp	r0, fp
    4892:	f73f af6c 	bgt.w	476e <_realloc_r+0x7e>
    4896:	4657      	mov	r7, sl
    4898:	f8da 100c 	ldr.w	r1, [sl, #12]
    489c:	f857 0f08 	ldr.w	r0, [r7, #8]!
    48a0:	1f32      	subs	r2, r6, #4
    48a2:	2a24      	cmp	r2, #36	; 0x24
    48a4:	60c1      	str	r1, [r0, #12]
    48a6:	6088      	str	r0, [r1, #8]
    48a8:	f200 80db 	bhi.w	4a62 <_realloc_r+0x372>
    48ac:	2a13      	cmp	r2, #19
    48ae:	f240 80d6 	bls.w	4a5e <_realloc_r+0x36e>
    48b2:	6821      	ldr	r1, [r4, #0]
    48b4:	f8ca 1008 	str.w	r1, [sl, #8]
    48b8:	6861      	ldr	r1, [r4, #4]
    48ba:	f8ca 100c 	str.w	r1, [sl, #12]
    48be:	2a1b      	cmp	r2, #27
    48c0:	f200 80df 	bhi.w	4a82 <_realloc_r+0x392>
    48c4:	3408      	adds	r4, #8
    48c6:	f10a 0210 	add.w	r2, sl, #16
    48ca:	6821      	ldr	r1, [r4, #0]
    48cc:	6011      	str	r1, [r2, #0]
    48ce:	6861      	ldr	r1, [r4, #4]
    48d0:	6051      	str	r1, [r2, #4]
    48d2:	68a1      	ldr	r1, [r4, #8]
    48d4:	6091      	str	r1, [r2, #8]
    48d6:	eb0a 0105 	add.w	r1, sl, r5
    48da:	ebab 0205 	sub.w	r2, fp, r5
    48de:	f042 0201 	orr.w	r2, r2, #1
    48e2:	6099      	str	r1, [r3, #8]
    48e4:	604a      	str	r2, [r1, #4]
    48e6:	f8da 3004 	ldr.w	r3, [sl, #4]
    48ea:	f003 0301 	and.w	r3, r3, #1
    48ee:	432b      	orrs	r3, r5
    48f0:	4640      	mov	r0, r8
    48f2:	f8ca 3004 	str.w	r3, [sl, #4]
    48f6:	f7ff fee9 	bl	46cc <__malloc_unlock>
    48fa:	e76e      	b.n	47da <_realloc_r+0xea>
    48fc:	6823      	ldr	r3, [r4, #0]
    48fe:	6003      	str	r3, [r0, #0]
    4900:	6863      	ldr	r3, [r4, #4]
    4902:	6043      	str	r3, [r0, #4]
    4904:	2a1b      	cmp	r2, #27
    4906:	d868      	bhi.n	49da <_realloc_r+0x2ea>
    4908:	f104 0208 	add.w	r2, r4, #8
    490c:	f100 0308 	add.w	r3, r0, #8
    4910:	e74a      	b.n	47a8 <_realloc_r+0xb8>
    4912:	eb09 0205 	add.w	r2, r9, r5
    4916:	609a      	str	r2, [r3, #8]
    4918:	ebac 0305 	sub.w	r3, ip, r5
    491c:	f043 0301 	orr.w	r3, r3, #1
    4920:	6053      	str	r3, [r2, #4]
    4922:	f854 3c04 	ldr.w	r3, [r4, #-4]
    4926:	f003 0301 	and.w	r3, r3, #1
    492a:	432b      	orrs	r3, r5
    492c:	4640      	mov	r0, r8
    492e:	f844 3c04 	str.w	r3, [r4, #-4]
    4932:	f7ff fecb 	bl	46cc <__malloc_unlock>
    4936:	4627      	mov	r7, r4
    4938:	e74f      	b.n	47da <_realloc_r+0xea>
    493a:	f850 3c04 	ldr.w	r3, [r0, #-4]
    493e:	f023 0303 	bic.w	r3, r3, #3
    4942:	441e      	add	r6, r3
    4944:	e751      	b.n	47ea <_realloc_r+0xfa>
    4946:	4657      	mov	r7, sl
    4948:	f8da 100c 	ldr.w	r1, [sl, #12]
    494c:	f857 0f08 	ldr.w	r0, [r7, #8]!
    4950:	1f32      	subs	r2, r6, #4
    4952:	2a24      	cmp	r2, #36	; 0x24
    4954:	60c1      	str	r1, [r0, #12]
    4956:	6088      	str	r0, [r1, #8]
    4958:	d84c      	bhi.n	49f4 <_realloc_r+0x304>
    495a:	2a13      	cmp	r2, #19
    495c:	d948      	bls.n	49f0 <_realloc_r+0x300>
    495e:	6821      	ldr	r1, [r4, #0]
    4960:	f8ca 1008 	str.w	r1, [sl, #8]
    4964:	6861      	ldr	r1, [r4, #4]
    4966:	f8ca 100c 	str.w	r1, [sl, #12]
    496a:	2a1b      	cmp	r2, #27
    496c:	d856      	bhi.n	4a1c <_realloc_r+0x32c>
    496e:	3408      	adds	r4, #8
    4970:	f10a 0210 	add.w	r2, sl, #16
    4974:	461e      	mov	r6, r3
    4976:	6823      	ldr	r3, [r4, #0]
    4978:	6013      	str	r3, [r2, #0]
    497a:	6863      	ldr	r3, [r4, #4]
    497c:	6053      	str	r3, [r2, #4]
    497e:	68a3      	ldr	r3, [r4, #8]
    4980:	6093      	str	r3, [r2, #8]
    4982:	46d1      	mov	r9, sl
    4984:	463c      	mov	r4, r7
    4986:	e730      	b.n	47ea <_realloc_r+0xfa>
    4988:	4621      	mov	r1, r4
    498a:	f001 fa8d 	bl	5ea8 <memmove>
    498e:	e711      	b.n	47b4 <_realloc_r+0xc4>
    4990:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
    4994:	4657      	mov	r7, sl
    4996:	60cb      	str	r3, [r1, #12]
    4998:	6099      	str	r1, [r3, #8]
    499a:	f857 1f08 	ldr.w	r1, [r7, #8]!
    499e:	f8da 300c 	ldr.w	r3, [sl, #12]
    49a2:	60cb      	str	r3, [r1, #12]
    49a4:	1f32      	subs	r2, r6, #4
    49a6:	2a24      	cmp	r2, #36	; 0x24
    49a8:	6099      	str	r1, [r3, #8]
    49aa:	d82d      	bhi.n	4a08 <_realloc_r+0x318>
    49ac:	2a13      	cmp	r2, #19
    49ae:	d929      	bls.n	4a04 <_realloc_r+0x314>
    49b0:	6823      	ldr	r3, [r4, #0]
    49b2:	f8ca 3008 	str.w	r3, [sl, #8]
    49b6:	6863      	ldr	r3, [r4, #4]
    49b8:	f8ca 300c 	str.w	r3, [sl, #12]
    49bc:	2a1b      	cmp	r2, #27
    49be:	d842      	bhi.n	4a46 <_realloc_r+0x356>
    49c0:	3408      	adds	r4, #8
    49c2:	f10a 0310 	add.w	r3, sl, #16
    49c6:	6822      	ldr	r2, [r4, #0]
    49c8:	601a      	str	r2, [r3, #0]
    49ca:	6862      	ldr	r2, [r4, #4]
    49cc:	605a      	str	r2, [r3, #4]
    49ce:	68a2      	ldr	r2, [r4, #8]
    49d0:	609a      	str	r2, [r3, #8]
    49d2:	4666      	mov	r6, ip
    49d4:	46d1      	mov	r9, sl
    49d6:	463c      	mov	r4, r7
    49d8:	e707      	b.n	47ea <_realloc_r+0xfa>
    49da:	68a3      	ldr	r3, [r4, #8]
    49dc:	6083      	str	r3, [r0, #8]
    49de:	68e3      	ldr	r3, [r4, #12]
    49e0:	60c3      	str	r3, [r0, #12]
    49e2:	2a24      	cmp	r2, #36	; 0x24
    49e4:	d026      	beq.n	4a34 <_realloc_r+0x344>
    49e6:	f104 0210 	add.w	r2, r4, #16
    49ea:	f100 0310 	add.w	r3, r0, #16
    49ee:	e6db      	b.n	47a8 <_realloc_r+0xb8>
    49f0:	463a      	mov	r2, r7
    49f2:	e7bf      	b.n	4974 <_realloc_r+0x284>
    49f4:	4621      	mov	r1, r4
    49f6:	4638      	mov	r0, r7
    49f8:	461e      	mov	r6, r3
    49fa:	46d1      	mov	r9, sl
    49fc:	f001 fa54 	bl	5ea8 <memmove>
    4a00:	463c      	mov	r4, r7
    4a02:	e6f2      	b.n	47ea <_realloc_r+0xfa>
    4a04:	463b      	mov	r3, r7
    4a06:	e7de      	b.n	49c6 <_realloc_r+0x2d6>
    4a08:	4621      	mov	r1, r4
    4a0a:	4638      	mov	r0, r7
    4a0c:	4666      	mov	r6, ip
    4a0e:	46d1      	mov	r9, sl
    4a10:	f001 fa4a 	bl	5ea8 <memmove>
    4a14:	463c      	mov	r4, r7
    4a16:	e6e8      	b.n	47ea <_realloc_r+0xfa>
    4a18:	20007da4 	.word	0x20007da4
    4a1c:	68a1      	ldr	r1, [r4, #8]
    4a1e:	f8ca 1010 	str.w	r1, [sl, #16]
    4a22:	68e1      	ldr	r1, [r4, #12]
    4a24:	f8ca 1014 	str.w	r1, [sl, #20]
    4a28:	2a24      	cmp	r2, #36	; 0x24
    4a2a:	d020      	beq.n	4a6e <_realloc_r+0x37e>
    4a2c:	3410      	adds	r4, #16
    4a2e:	f10a 0218 	add.w	r2, sl, #24
    4a32:	e79f      	b.n	4974 <_realloc_r+0x284>
    4a34:	6923      	ldr	r3, [r4, #16]
    4a36:	6103      	str	r3, [r0, #16]
    4a38:	6961      	ldr	r1, [r4, #20]
    4a3a:	6141      	str	r1, [r0, #20]
    4a3c:	f104 0218 	add.w	r2, r4, #24
    4a40:	f100 0318 	add.w	r3, r0, #24
    4a44:	e6b0      	b.n	47a8 <_realloc_r+0xb8>
    4a46:	68a3      	ldr	r3, [r4, #8]
    4a48:	f8ca 3010 	str.w	r3, [sl, #16]
    4a4c:	68e3      	ldr	r3, [r4, #12]
    4a4e:	f8ca 3014 	str.w	r3, [sl, #20]
    4a52:	2a24      	cmp	r2, #36	; 0x24
    4a54:	d021      	beq.n	4a9a <_realloc_r+0x3aa>
    4a56:	3410      	adds	r4, #16
    4a58:	f10a 0318 	add.w	r3, sl, #24
    4a5c:	e7b3      	b.n	49c6 <_realloc_r+0x2d6>
    4a5e:	463a      	mov	r2, r7
    4a60:	e733      	b.n	48ca <_realloc_r+0x1da>
    4a62:	4621      	mov	r1, r4
    4a64:	4638      	mov	r0, r7
    4a66:	f001 fa1f 	bl	5ea8 <memmove>
    4a6a:	4b16      	ldr	r3, [pc, #88]	; (4ac4 <_realloc_r+0x3d4>)
    4a6c:	e733      	b.n	48d6 <_realloc_r+0x1e6>
    4a6e:	6922      	ldr	r2, [r4, #16]
    4a70:	f8ca 2018 	str.w	r2, [sl, #24]
    4a74:	6962      	ldr	r2, [r4, #20]
    4a76:	f8ca 201c 	str.w	r2, [sl, #28]
    4a7a:	3418      	adds	r4, #24
    4a7c:	f10a 0220 	add.w	r2, sl, #32
    4a80:	e778      	b.n	4974 <_realloc_r+0x284>
    4a82:	68a1      	ldr	r1, [r4, #8]
    4a84:	f8ca 1010 	str.w	r1, [sl, #16]
    4a88:	68e1      	ldr	r1, [r4, #12]
    4a8a:	f8ca 1014 	str.w	r1, [sl, #20]
    4a8e:	2a24      	cmp	r2, #36	; 0x24
    4a90:	d00d      	beq.n	4aae <_realloc_r+0x3be>
    4a92:	3410      	adds	r4, #16
    4a94:	f10a 0218 	add.w	r2, sl, #24
    4a98:	e717      	b.n	48ca <_realloc_r+0x1da>
    4a9a:	6923      	ldr	r3, [r4, #16]
    4a9c:	f8ca 3018 	str.w	r3, [sl, #24]
    4aa0:	6963      	ldr	r3, [r4, #20]
    4aa2:	f8ca 301c 	str.w	r3, [sl, #28]
    4aa6:	3418      	adds	r4, #24
    4aa8:	f10a 0320 	add.w	r3, sl, #32
    4aac:	e78b      	b.n	49c6 <_realloc_r+0x2d6>
    4aae:	6922      	ldr	r2, [r4, #16]
    4ab0:	f8ca 2018 	str.w	r2, [sl, #24]
    4ab4:	6962      	ldr	r2, [r4, #20]
    4ab6:	f8ca 201c 	str.w	r2, [sl, #28]
    4aba:	3418      	adds	r4, #24
    4abc:	f10a 0220 	add.w	r2, sl, #32
    4ac0:	e703      	b.n	48ca <_realloc_r+0x1da>
    4ac2:	bf00      	nop
    4ac4:	20007da4 	.word	0x20007da4

00004ac8 <_strtod_l>:
    4ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4acc:	ed2d 8b10 	vpush	{d8-d15}
    4ad0:	b097      	sub	sp, #92	; 0x5c
    4ad2:	468a      	mov	sl, r1
    4ad4:	2100      	movs	r1, #0
    4ad6:	9207      	str	r2, [sp, #28]
    4ad8:	9112      	str	r1, [sp, #72]	; 0x48
    4ada:	2200      	movs	r2, #0
    4adc:	2100      	movs	r1, #0
    4ade:	e9cd 1204 	strd	r1, r2, [sp, #16]
    4ae2:	4680      	mov	r8, r0
    4ae4:	4651      	mov	r1, sl
    4ae6:	9111      	str	r1, [sp, #68]	; 0x44
    4ae8:	460f      	mov	r7, r1
    4aea:	f811 2b01 	ldrb.w	r2, [r1], #1
    4aee:	2a2d      	cmp	r2, #45	; 0x2d
    4af0:	d85e      	bhi.n	4bb0 <_strtod_l+0xe8>
    4af2:	a001      	add	r0, pc, #4	; (adr r0, 4af8 <_strtod_l+0x30>)
    4af4:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
    4af8:	00004c99 	.word	0x00004c99
    4afc:	00004bb1 	.word	0x00004bb1
    4b00:	00004bb1 	.word	0x00004bb1
    4b04:	00004bb1 	.word	0x00004bb1
    4b08:	00004bb1 	.word	0x00004bb1
    4b0c:	00004bb1 	.word	0x00004bb1
    4b10:	00004bb1 	.word	0x00004bb1
    4b14:	00004bb1 	.word	0x00004bb1
    4b18:	00004bb1 	.word	0x00004bb1
    4b1c:	00004ae7 	.word	0x00004ae7
    4b20:	00004ae7 	.word	0x00004ae7
    4b24:	00004ae7 	.word	0x00004ae7
    4b28:	00004ae7 	.word	0x00004ae7
    4b2c:	00004ae7 	.word	0x00004ae7
    4b30:	00004bb1 	.word	0x00004bb1
    4b34:	00004bb1 	.word	0x00004bb1
    4b38:	00004bb1 	.word	0x00004bb1
    4b3c:	00004bb1 	.word	0x00004bb1
    4b40:	00004bb1 	.word	0x00004bb1
    4b44:	00004bb1 	.word	0x00004bb1
    4b48:	00004bb1 	.word	0x00004bb1
    4b4c:	00004bb1 	.word	0x00004bb1
    4b50:	00004bb1 	.word	0x00004bb1
    4b54:	00004bb1 	.word	0x00004bb1
    4b58:	00004bb1 	.word	0x00004bb1
    4b5c:	00004bb1 	.word	0x00004bb1
    4b60:	00004bb1 	.word	0x00004bb1
    4b64:	00004bb1 	.word	0x00004bb1
    4b68:	00004bb1 	.word	0x00004bb1
    4b6c:	00004bb1 	.word	0x00004bb1
    4b70:	00004bb1 	.word	0x00004bb1
    4b74:	00004bb1 	.word	0x00004bb1
    4b78:	00004ae7 	.word	0x00004ae7
    4b7c:	00004bb1 	.word	0x00004bb1
    4b80:	00004bb1 	.word	0x00004bb1
    4b84:	00004bb1 	.word	0x00004bb1
    4b88:	00004bb1 	.word	0x00004bb1
    4b8c:	00004bb1 	.word	0x00004bb1
    4b90:	00004bb1 	.word	0x00004bb1
    4b94:	00004bb1 	.word	0x00004bb1
    4b98:	00004bb1 	.word	0x00004bb1
    4b9c:	00004bb1 	.word	0x00004bb1
    4ba0:	00004bb1 	.word	0x00004bb1
    4ba4:	000052d3 	.word	0x000052d3
    4ba8:	00004bb1 	.word	0x00004bb1
    4bac:	000052bf 	.word	0x000052bf
    4bb0:	2100      	movs	r1, #0
    4bb2:	9109      	str	r1, [sp, #36]	; 0x24
    4bb4:	2a30      	cmp	r2, #48	; 0x30
    4bb6:	d07d      	beq.n	4cb4 <_strtod_l+0x1ec>
    4bb8:	2300      	movs	r3, #0
    4bba:	9308      	str	r3, [sp, #32]
    4bbc:	2a2f      	cmp	r2, #47	; 0x2f
    4bbe:	4614      	mov	r4, r2
    4bc0:	f240 84cd 	bls.w	555e <_strtod_l+0xa96>
    4bc4:	f04f 0900 	mov.w	r9, #0
    4bc8:	4638      	mov	r0, r7
    4bca:	464e      	mov	r6, r9
    4bcc:	464d      	mov	r5, r9
    4bce:	e012      	b.n	4bf6 <_strtod_l+0x12e>
    4bd0:	3001      	adds	r0, #1
    4bd2:	2d08      	cmp	r5, #8
    4bd4:	9011      	str	r0, [sp, #68]	; 0x44
    4bd6:	bfc8      	it	gt
    4bd8:	eb09 0989 	addgt.w	r9, r9, r9, lsl #2
    4bdc:	7804      	ldrb	r4, [r0, #0]
    4bde:	bfc6      	itte	gt
    4be0:	eb02 0249 	addgt.w	r2, r2, r9, lsl #1
    4be4:	f1a2 0930 	subgt.w	r9, r2, #48	; 0x30
    4be8:	f1a3 0630 	suble.w	r6, r3, #48	; 0x30
    4bec:	2c2f      	cmp	r4, #47	; 0x2f
    4bee:	f105 0501 	add.w	r5, r5, #1
    4bf2:	4622      	mov	r2, r4
    4bf4:	dd6f      	ble.n	4cd6 <_strtod_l+0x20e>
    4bf6:	eb06 0386 	add.w	r3, r6, r6, lsl #2
    4bfa:	2c39      	cmp	r4, #57	; 0x39
    4bfc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    4c00:	dde6      	ble.n	4bd0 <_strtod_l+0x108>
    4c02:	499f      	ldr	r1, [pc, #636]	; (4e80 <_strtod_l+0x3b8>)
    4c04:	2201      	movs	r2, #1
    4c06:	f001 fa83 	bl	6110 <strncmp>
    4c0a:	2800      	cmp	r0, #0
    4c0c:	d137      	bne.n	4c7e <_strtod_l+0x1b6>
    4c0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4c10:	461a      	mov	r2, r3
    4c12:	3301      	adds	r3, #1
    4c14:	9311      	str	r3, [sp, #68]	; 0x44
    4c16:	7854      	ldrb	r4, [r2, #1]
    4c18:	2d00      	cmp	r5, #0
    4c1a:	f040 8543 	bne.w	56a4 <_strtod_l+0xbdc>
    4c1e:	2c30      	cmp	r4, #48	; 0x30
    4c20:	f040 8524 	bne.w	566c <_strtod_l+0xba4>
    4c24:	f1c3 0201 	rsb	r2, r3, #1
    4c28:	1898      	adds	r0, r3, r2
    4c2a:	3301      	adds	r3, #1
    4c2c:	9311      	str	r3, [sp, #68]	; 0x44
    4c2e:	781c      	ldrb	r4, [r3, #0]
    4c30:	2c30      	cmp	r4, #48	; 0x30
    4c32:	d0f9      	beq.n	4c28 <_strtod_l+0x160>
    4c34:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
    4c38:	2b08      	cmp	r3, #8
    4c3a:	f200 8301 	bhi.w	5240 <_strtod_l+0x778>
    4c3e:	9f11      	ldr	r7, [sp, #68]	; 0x44
    4c40:	1c43      	adds	r3, r0, #1
    4c42:	f1a4 0b30 	sub.w	fp, r4, #48	; 0x30
    4c46:	930b      	str	r3, [sp, #44]	; 0x2c
    4c48:	2501      	movs	r5, #1
    4c4a:	46bc      	mov	ip, r7
    4c4c:	f04f 0e00 	mov.w	lr, #0
    4c50:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    4c54:	eb0b 0646 	add.w	r6, fp, r6, lsl #1
    4c58:	2000      	movs	r0, #0
    4c5a:	f10c 0301 	add.w	r3, ip, #1
    4c5e:	9311      	str	r3, [sp, #68]	; 0x44
    4c60:	f89c 4001 	ldrb.w	r4, [ip, #1]
    4c64:	f1a4 0130 	sub.w	r1, r4, #48	; 0x30
    4c68:	2909      	cmp	r1, #9
    4c6a:	f200 82bb 	bhi.w	51e4 <_strtod_l+0x71c>
    4c6e:	3001      	adds	r0, #1
    4c70:	468b      	mov	fp, r1
    4c72:	2900      	cmp	r1, #0
    4c74:	f040 844f 	bne.w	5516 <_strtod_l+0xa4e>
    4c78:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
    4c7c:	e7ed      	b.n	4c5a <_strtod_l+0x192>
    4c7e:	2000      	movs	r0, #0
    4c80:	2c65      	cmp	r4, #101	; 0x65
    4c82:	46ae      	mov	lr, r5
    4c84:	900b      	str	r0, [sp, #44]	; 0x2c
    4c86:	4684      	mov	ip, r0
    4c88:	d001      	beq.n	4c8e <_strtod_l+0x1c6>
    4c8a:	2c45      	cmp	r4, #69	; 0x45
    4c8c:	d130      	bne.n	4cf0 <_strtod_l+0x228>
    4c8e:	2d00      	cmp	r5, #0
    4c90:	d16b      	bne.n	4d6a <_strtod_l+0x2a2>
    4c92:	9b08      	ldr	r3, [sp, #32]
    4c94:	4303      	orrs	r3, r0
    4c96:	d167      	bne.n	4d68 <_strtod_l+0x2a0>
    4c98:	9b07      	ldr	r3, [sp, #28]
    4c9a:	ed9f 8b77 	vldr	d8, [pc, #476]	; 4e78 <_strtod_l+0x3b0>
    4c9e:	b113      	cbz	r3, 4ca6 <_strtod_l+0x1de>
    4ca0:	9b07      	ldr	r3, [sp, #28]
    4ca2:	f8c3 a000 	str.w	sl, [r3]
    4ca6:	eeb0 0b48 	vmov.f64	d0, d8
    4caa:	b017      	add	sp, #92	; 0x5c
    4cac:	ecbd 8b10 	vpop	{d8-d15}
    4cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4cb4:	787a      	ldrb	r2, [r7, #1]
    4cb6:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    4cba:	2a58      	cmp	r2, #88	; 0x58
    4cbc:	f000 840c 	beq.w	54d8 <_strtod_l+0xa10>
    4cc0:	3701      	adds	r7, #1
    4cc2:	9711      	str	r7, [sp, #68]	; 0x44
    4cc4:	783a      	ldrb	r2, [r7, #0]
    4cc6:	2a30      	cmp	r2, #48	; 0x30
    4cc8:	d0fa      	beq.n	4cc0 <_strtod_l+0x1f8>
    4cca:	2a00      	cmp	r2, #0
    4ccc:	f000 80b7 	beq.w	4e3e <_strtod_l+0x376>
    4cd0:	2301      	movs	r3, #1
    4cd2:	9308      	str	r3, [sp, #32]
    4cd4:	e772      	b.n	4bbc <_strtod_l+0xf4>
    4cd6:	496a      	ldr	r1, [pc, #424]	; (4e80 <_strtod_l+0x3b8>)
    4cd8:	2201      	movs	r2, #1
    4cda:	f001 fa19 	bl	6110 <strncmp>
    4cde:	2800      	cmp	r0, #0
    4ce0:	f000 80c0 	beq.w	4e64 <_strtod_l+0x39c>
    4ce4:	46ae      	mov	lr, r5
    4ce6:	f04f 0c00 	mov.w	ip, #0
    4cea:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
    4cee:	4660      	mov	r0, ip
    4cf0:	f04f 0b00 	mov.w	fp, #0
    4cf4:	2d00      	cmp	r5, #0
    4cf6:	d07e      	beq.n	4df6 <_strtod_l+0x32e>
    4cf8:	ee07 6a90 	vmov	s15, r6
    4cfc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4cfe:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    4d02:	ebab 0303 	sub.w	r3, fp, r3
    4d06:	f1be 0f00 	cmp.w	lr, #0
    4d0a:	bf08      	it	eq
    4d0c:	46ae      	moveq	lr, r5
    4d0e:	2d10      	cmp	r5, #16
    4d10:	930a      	str	r3, [sp, #40]	; 0x28
    4d12:	462b      	mov	r3, r5
    4d14:	bfa8      	it	ge
    4d16:	2310      	movge	r3, #16
    4d18:	2d09      	cmp	r5, #9
    4d1a:	ed8d 7b04 	vstr	d7, [sp, #16]
    4d1e:	dd0c      	ble.n	4d3a <_strtod_l+0x272>
    4d20:	4a58      	ldr	r2, [pc, #352]	; (4e84 <_strtod_l+0x3bc>)
    4d22:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    4d26:	ed12 5b12 	vldr	d5, [r2, #-72]	; 0xffffffb8
    4d2a:	ee06 9a90 	vmov	s13, r9
    4d2e:	eeb8 6b66 	vcvt.f64.u32	d6, s13
    4d32:	eea7 6b05 	vfma.f64	d6, d7, d5
    4d36:	ed8d 6b04 	vstr	d6, [sp, #16]
    4d3a:	2d0f      	cmp	r5, #15
    4d3c:	f300 80a8 	bgt.w	4e90 <_strtod_l+0x3c8>
    4d40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4d42:	2a00      	cmp	r2, #0
    4d44:	f000 83e4 	beq.w	5510 <_strtod_l+0xa48>
    4d48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4d4a:	f340 833c 	ble.w	53c6 <_strtod_l+0x8fe>
    4d4e:	2a16      	cmp	r2, #22
    4d50:	f340 8498 	ble.w	5684 <_strtod_l+0xbbc>
    4d54:	990a      	ldr	r1, [sp, #40]	; 0x28
    4d56:	f1c5 0225 	rsb	r2, r5, #37	; 0x25
    4d5a:	428a      	cmp	r2, r1
    4d5c:	f280 84a6 	bge.w	56ac <_strtod_l+0xbe4>
    4d60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4d62:	1aeb      	subs	r3, r5, r3
    4d64:	4413      	add	r3, r2
    4d66:	e099      	b.n	4e9c <_strtod_l+0x3d4>
    4d68:	2500      	movs	r5, #0
    4d6a:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
    4d6e:	f10a 0301 	add.w	r3, sl, #1
    4d72:	9311      	str	r3, [sp, #68]	; 0x44
    4d74:	f89a 4001 	ldrb.w	r4, [sl, #1]
    4d78:	2c2b      	cmp	r4, #43	; 0x2b
    4d7a:	f000 825e 	beq.w	523a <_strtod_l+0x772>
    4d7e:	2c2d      	cmp	r4, #45	; 0x2d
    4d80:	f000 81f7 	beq.w	5172 <_strtod_l+0x6aa>
    4d84:	2300      	movs	r3, #0
    4d86:	930a      	str	r3, [sp, #40]	; 0x28
    4d88:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    4d8c:	2b09      	cmp	r3, #9
    4d8e:	f200 81eb 	bhi.w	5168 <_strtod_l+0x6a0>
    4d92:	2c30      	cmp	r4, #48	; 0x30
    4d94:	d105      	bne.n	4da2 <_strtod_l+0x2da>
    4d96:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4d98:	3301      	adds	r3, #1
    4d9a:	9311      	str	r3, [sp, #68]	; 0x44
    4d9c:	781c      	ldrb	r4, [r3, #0]
    4d9e:	2c30      	cmp	r4, #48	; 0x30
    4da0:	d0fa      	beq.n	4d98 <_strtod_l+0x2d0>
    4da2:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
    4da6:	2b08      	cmp	r3, #8
    4da8:	d8a2      	bhi.n	4cf0 <_strtod_l+0x228>
    4daa:	9a11      	ldr	r2, [sp, #68]	; 0x44
    4dac:	920c      	str	r2, [sp, #48]	; 0x30
    4dae:	1c53      	adds	r3, r2, #1
    4db0:	9311      	str	r3, [sp, #68]	; 0x44
    4db2:	f1a4 0b30 	sub.w	fp, r4, #48	; 0x30
    4db6:	7854      	ldrb	r4, [r2, #1]
    4db8:	2c2f      	cmp	r4, #47	; 0x2f
    4dba:	dc07      	bgt.n	4dcc <_strtod_l+0x304>
    4dbc:	e3de      	b.n	557c <_strtod_l+0xab4>
    4dbe:	3301      	adds	r3, #1
    4dc0:	9311      	str	r3, [sp, #68]	; 0x44
    4dc2:	784c      	ldrb	r4, [r1, #1]
    4dc4:	2c2f      	cmp	r4, #47	; 0x2f
    4dc6:	f1a2 0b30 	sub.w	fp, r2, #48	; 0x30
    4dca:	dd06      	ble.n	4dda <_strtod_l+0x312>
    4dcc:	eb0b 028b 	add.w	r2, fp, fp, lsl #2
    4dd0:	2c39      	cmp	r4, #57	; 0x39
    4dd2:	4619      	mov	r1, r3
    4dd4:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    4dd8:	ddf1      	ble.n	4dbe <_strtod_l+0x2f6>
    4dda:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4ddc:	1a9b      	subs	r3, r3, r2
    4dde:	2b08      	cmp	r3, #8
    4de0:	f340 83cc 	ble.w	557c <_strtod_l+0xab4>
    4de4:	f644 6b1f 	movw	fp, #19999	; 0x4e1f
    4de8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4dea:	2b00      	cmp	r3, #0
    4dec:	d082      	beq.n	4cf4 <_strtod_l+0x22c>
    4dee:	f1cb 0b00 	rsb	fp, fp, #0
    4df2:	2d00      	cmp	r5, #0
    4df4:	d180      	bne.n	4cf8 <_strtod_l+0x230>
    4df6:	9b08      	ldr	r3, [sp, #32]
    4df8:	4303      	orrs	r3, r0
    4dfa:	d120      	bne.n	4e3e <_strtod_l+0x376>
    4dfc:	f1bc 0f00 	cmp.w	ip, #0
    4e00:	f47f af4a 	bne.w	4c98 <_strtod_l+0x1d0>
    4e04:	2c69      	cmp	r4, #105	; 0x69
    4e06:	f000 83cf 	beq.w	55a8 <_strtod_l+0xae0>
    4e0a:	f300 82f3 	bgt.w	53f4 <_strtod_l+0x92c>
    4e0e:	2c49      	cmp	r4, #73	; 0x49
    4e10:	f000 83ca 	beq.w	55a8 <_strtod_l+0xae0>
    4e14:	2c4e      	cmp	r4, #78	; 0x4e
    4e16:	f47f af3f 	bne.w	4c98 <_strtod_l+0x1d0>
    4e1a:	491b      	ldr	r1, [pc, #108]	; (4e88 <_strtod_l+0x3c0>)
    4e1c:	a811      	add	r0, sp, #68	; 0x44
    4e1e:	f002 f9a3 	bl	7168 <__match>
    4e22:	2800      	cmp	r0, #0
    4e24:	f43f af38 	beq.w	4c98 <_strtod_l+0x1d0>
    4e28:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4e2a:	781b      	ldrb	r3, [r3, #0]
    4e2c:	2b28      	cmp	r3, #40	; 0x28
    4e2e:	f000 84f2 	beq.w	5816 <_strtod_l+0xd4e>
    4e32:	4816      	ldr	r0, [pc, #88]	; (4e8c <_strtod_l+0x3c4>)
    4e34:	f001 fcd4 	bl	67e0 <nan>
    4e38:	eeb0 8b40 	vmov.f64	d8, d0
    4e3c:	e001      	b.n	4e42 <_strtod_l+0x37a>
    4e3e:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 4e78 <_strtod_l+0x3b0>
    4e42:	9a07      	ldr	r2, [sp, #28]
    4e44:	b10a      	cbz	r2, 4e4a <_strtod_l+0x382>
    4e46:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4e48:	6013      	str	r3, [r2, #0]
    4e4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4e4c:	2b00      	cmp	r3, #0
    4e4e:	f43f af2a 	beq.w	4ca6 <_strtod_l+0x1de>
    4e52:	eeb1 8b48 	vneg.f64	d8, d8
    4e56:	eeb0 0b48 	vmov.f64	d0, d8
    4e5a:	b017      	add	sp, #92	; 0x5c
    4e5c:	ecbd 8b10 	vpop	{d8-d15}
    4e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4e64:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4e66:	900b      	str	r0, [sp, #44]	; 0x2c
    4e68:	1c5a      	adds	r2, r3, #1
    4e6a:	9211      	str	r2, [sp, #68]	; 0x44
    4e6c:	785c      	ldrb	r4, [r3, #1]
    4e6e:	46ae      	mov	lr, r5
    4e70:	e6f8      	b.n	4c64 <_strtod_l+0x19c>
    4e72:	bf00      	nop
    4e74:	f3af 8000 	nop.w
	...
    4e80:	200008e0 	.word	0x200008e0
    4e84:	200002a8 	.word	0x200002a8
    4e88:	200008f0 	.word	0x200008f0
    4e8c:	20007784 	.word	0x20007784
    4e90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4e92:	1aeb      	subs	r3, r5, r3
    4e94:	4413      	add	r3, r2
    4e96:	2b00      	cmp	r3, #0
    4e98:	f340 82b0 	ble.w	53fc <_strtod_l+0x934>
    4e9c:	f013 010f 	ands.w	r1, r3, #15
    4ea0:	d00a      	beq.n	4eb8 <_strtod_l+0x3f0>
    4ea2:	4ac3      	ldr	r2, [pc, #780]	; (51b0 <_strtod_l+0x6e8>)
    4ea4:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    4ea8:	ed9d 6b04 	vldr	d6, [sp, #16]
    4eac:	ed92 7b00 	vldr	d7, [r2]
    4eb0:	ee27 7b06 	vmul.f64	d7, d7, d6
    4eb4:	ed8d 7b04 	vstr	d7, [sp, #16]
    4eb8:	f033 020f 	bics.w	r2, r3, #15
    4ebc:	f040 8238 	bne.w	5330 <_strtod_l+0x868>
    4ec0:	2300      	movs	r3, #0
    4ec2:	9308      	str	r3, [sp, #32]
    4ec4:	9600      	str	r6, [sp, #0]
    4ec6:	462b      	mov	r3, r5
    4ec8:	4672      	mov	r2, lr
    4eca:	4639      	mov	r1, r7
    4ecc:	4640      	mov	r0, r8
    4ece:	f002 fad7 	bl	7480 <__s2b>
    4ed2:	4681      	mov	r9, r0
    4ed4:	2800      	cmp	r0, #0
    4ed6:	f000 82e1 	beq.w	549c <_strtod_l+0x9d4>
    4eda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4edc:	eba3 0b0b 	sub.w	fp, r3, fp
    4ee0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4ee2:	ed9f eba9 	vldr	d14, [pc, #676]	; 5188 <_strtod_l+0x6c0>
    4ee6:	2b00      	cmp	r3, #0
    4ee8:	ed9f cba9 	vldr	d12, [pc, #676]	; 5190 <_strtod_l+0x6c8>
    4eec:	ed9f dbaa 	vldr	d13, [pc, #680]	; 5198 <_strtod_l+0x6d0>
    4ef0:	ed9f bbab 	vldr	d11, [pc, #684]	; 51a0 <_strtod_l+0x6d8>
    4ef4:	bfb4      	ite	lt
    4ef6:	465a      	movlt	r2, fp
    4ef8:	2200      	movge	r2, #0
    4efa:	f04f 0a00 	mov.w	sl, #0
    4efe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    4f02:	920b      	str	r2, [sp, #44]	; 0x2c
    4f04:	930c      	str	r3, [sp, #48]	; 0x30
    4f06:	4654      	mov	r4, sl
    4f08:	f8d9 1004 	ldr.w	r1, [r9, #4]
    4f0c:	4640      	mov	r0, r8
    4f0e:	f002 fa35 	bl	737c <_Balloc>
    4f12:	4606      	mov	r6, r0
    4f14:	2800      	cmp	r0, #0
    4f16:	f000 810e 	beq.w	5136 <_strtod_l+0x66e>
    4f1a:	f8d9 2010 	ldr.w	r2, [r9, #16]
    4f1e:	ed9d 8b04 	vldr	d8, [sp, #16]
    4f22:	3202      	adds	r2, #2
    4f24:	0092      	lsls	r2, r2, #2
    4f26:	f109 010c 	add.w	r1, r9, #12
    4f2a:	300c      	adds	r0, #12
    4f2c:	f7fd f9ec 	bl	2308 <memcpy>
    4f30:	eeb0 0b48 	vmov.f64	d0, d8
    4f34:	aa14      	add	r2, sp, #80	; 0x50
    4f36:	a913      	add	r1, sp, #76	; 0x4c
    4f38:	4640      	mov	r0, r8
    4f3a:	f002 fe5d 	bl	7bf8 <__d2b>
    4f3e:	9012      	str	r0, [sp, #72]	; 0x48
    4f40:	2800      	cmp	r0, #0
    4f42:	f000 80e4 	beq.w	510e <_strtod_l+0x646>
    4f46:	2101      	movs	r1, #1
    4f48:	4640      	mov	r0, r8
    4f4a:	f002 fb41 	bl	75d0 <__i2b>
    4f4e:	4604      	mov	r4, r0
    4f50:	2800      	cmp	r0, #0
    4f52:	f000 80f0 	beq.w	5136 <_strtod_l+0x66e>
    4f56:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    4f58:	2a00      	cmp	r2, #0
    4f5a:	f2c0 80de 	blt.w	511a <_strtod_l+0x652>
    4f5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4f60:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    4f62:	eb02 0b03 	add.w	fp, r2, r3
    4f66:	9b08      	ldr	r3, [sp, #32]
    4f68:	9d14      	ldr	r5, [sp, #80]	; 0x50
    4f6a:	1ad2      	subs	r2, r2, r3
    4f6c:	442a      	add	r2, r5
    4f6e:	4b91      	ldr	r3, [pc, #580]	; (51b4 <_strtod_l+0x6ec>)
    4f70:	3a01      	subs	r2, #1
    4f72:	429a      	cmp	r2, r3
    4f74:	f1c5 0536 	rsb	r5, r5, #54	; 0x36
    4f78:	f280 8098 	bge.w	50ac <_strtod_l+0x5e4>
    4f7c:	1a99      	subs	r1, r3, r2
    4f7e:	291f      	cmp	r1, #31
    4f80:	eba5 0501 	sub.w	r5, r5, r1
    4f84:	f300 80e3 	bgt.w	514e <_strtod_l+0x686>
    4f88:	2201      	movs	r2, #1
    4f8a:	fa02 f301 	lsl.w	r3, r2, r1
    4f8e:	930d      	str	r3, [sp, #52]	; 0x34
    4f90:	2300      	movs	r3, #0
    4f92:	930e      	str	r3, [sp, #56]	; 0x38
    4f94:	442f      	add	r7, r5
    4f96:	9b08      	ldr	r3, [sp, #32]
    4f98:	445d      	add	r5, fp
    4f9a:	45ab      	cmp	fp, r5
    4f9c:	465a      	mov	r2, fp
    4f9e:	441f      	add	r7, r3
    4fa0:	bfa8      	it	ge
    4fa2:	462a      	movge	r2, r5
    4fa4:	42ba      	cmp	r2, r7
    4fa6:	bfa8      	it	ge
    4fa8:	463a      	movge	r2, r7
    4faa:	2a00      	cmp	r2, #0
    4fac:	dd03      	ble.n	4fb6 <_strtod_l+0x4ee>
    4fae:	1aad      	subs	r5, r5, r2
    4fb0:	1abf      	subs	r7, r7, r2
    4fb2:	ebab 0b02 	sub.w	fp, fp, r2
    4fb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4fb8:	2b00      	cmp	r3, #0
    4fba:	f300 8088 	bgt.w	50ce <_strtod_l+0x606>
    4fbe:	2d00      	cmp	r5, #0
    4fc0:	f300 809c 	bgt.w	50fc <_strtod_l+0x634>
    4fc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4fc6:	2b00      	cmp	r3, #0
    4fc8:	f300 80b7 	bgt.w	513a <_strtod_l+0x672>
    4fcc:	2f00      	cmp	r7, #0
    4fce:	f300 80a9 	bgt.w	5124 <_strtod_l+0x65c>
    4fd2:	f1bb 0f00 	cmp.w	fp, #0
    4fd6:	dd08      	ble.n	4fea <_strtod_l+0x522>
    4fd8:	4621      	mov	r1, r4
    4fda:	465a      	mov	r2, fp
    4fdc:	4640      	mov	r0, r8
    4fde:	f002 fc33 	bl	7848 <__lshift>
    4fe2:	4604      	mov	r4, r0
    4fe4:	2800      	cmp	r0, #0
    4fe6:	f000 80a6 	beq.w	5136 <_strtod_l+0x66e>
    4fea:	9912      	ldr	r1, [sp, #72]	; 0x48
    4fec:	4632      	mov	r2, r6
    4fee:	4640      	mov	r0, r8
    4ff0:	f002 fcc4 	bl	797c <__mdiff>
    4ff4:	4682      	mov	sl, r0
    4ff6:	2800      	cmp	r0, #0
    4ff8:	f000 809d 	beq.w	5136 <_strtod_l+0x66e>
    4ffc:	2300      	movs	r3, #0
    4ffe:	68c5      	ldr	r5, [r0, #12]
    5000:	60c3      	str	r3, [r0, #12]
    5002:	4621      	mov	r1, r4
    5004:	f002 fc98 	bl	7938 <__mcmp>
    5008:	2800      	cmp	r0, #0
    500a:	f2c0 83c7 	blt.w	579c <_strtod_l+0xcd4>
    500e:	f000 8361 	beq.w	56d4 <_strtod_l+0xc0c>
    5012:	4621      	mov	r1, r4
    5014:	4650      	mov	r0, sl
    5016:	f002 fe59 	bl	7ccc <__ratio>
    501a:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
    501e:	eeb4 0bc7 	vcmpe.f64	d0, d7
    5022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5026:	d846      	bhi.n	50b6 <_strtod_l+0x5ee>
    5028:	2d00      	cmp	r5, #0
    502a:	f000 80cb 	beq.w	51c4 <_strtod_l+0x6fc>
    502e:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
    5032:	9805      	ldr	r0, [sp, #20]
    5034:	4b60      	ldr	r3, [pc, #384]	; (51b8 <_strtod_l+0x6f0>)
    5036:	2200      	movs	r2, #0
    5038:	4960      	ldr	r1, [pc, #384]	; (51bc <_strtod_l+0x6f4>)
    503a:	f8df c184 	ldr.w	ip, [pc, #388]	; 51c0 <_strtod_l+0x6f8>
    503e:	ea00 0701 	and.w	r7, r0, r1
    5042:	4567      	cmp	r7, ip
    5044:	f000 80d4 	beq.w	51f0 <_strtod_l+0x728>
    5048:	9908      	ldr	r1, [sp, #32]
    504a:	b159      	cbz	r1, 5064 <_strtod_l+0x59c>
    504c:	f1b7 6fd4 	cmp.w	r7, #111149056	; 0x6a00000
    5050:	d808      	bhi.n	5064 <_strtod_l+0x59c>
    5052:	eeb4 9bcb 	vcmpe.f64	d9, d11
    5056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    505a:	f240 8156 	bls.w	530a <_strtod_l+0x842>
    505e:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
    5062:	1bcb      	subs	r3, r1, r7
    5064:	eeb0 0b48 	vmov.f64	d0, d8
    5068:	ec43 2b1a 	vmov	d10, r2, r3
    506c:	f002 fd30 	bl	7ad0 <__ulp>
    5070:	eeaa 8b00 	vfma.f64	d8, d10, d0
    5074:	ed8d 8b04 	vstr	d8, [sp, #16]
    5078:	ee18 3a90 	vmov	r3, s17
    507c:	9a08      	ldr	r2, [sp, #32]
    507e:	b922      	cbnz	r2, 508a <_strtod_l+0x5c2>
    5080:	4a4e      	ldr	r2, [pc, #312]	; (51bc <_strtod_l+0x6f4>)
    5082:	401a      	ands	r2, r3
    5084:	4297      	cmp	r7, r2
    5086:	f000 80e4 	beq.w	5252 <_strtod_l+0x78a>
    508a:	9912      	ldr	r1, [sp, #72]	; 0x48
    508c:	4640      	mov	r0, r8
    508e:	f002 f99b 	bl	73c8 <_Bfree>
    5092:	4631      	mov	r1, r6
    5094:	4640      	mov	r0, r8
    5096:	f002 f997 	bl	73c8 <_Bfree>
    509a:	4621      	mov	r1, r4
    509c:	4640      	mov	r0, r8
    509e:	f002 f993 	bl	73c8 <_Bfree>
    50a2:	4651      	mov	r1, sl
    50a4:	4640      	mov	r0, r8
    50a6:	f002 f98f 	bl	73c8 <_Bfree>
    50aa:	e72d      	b.n	4f08 <_strtod_l+0x440>
    50ac:	2301      	movs	r3, #1
    50ae:	2100      	movs	r1, #0
    50b0:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
    50b4:	e76e      	b.n	4f94 <_strtod_l+0x4cc>
    50b6:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
    50ba:	ee20 9b09 	vmul.f64	d9, d0, d9
    50be:	2d00      	cmp	r5, #0
    50c0:	d15f      	bne.n	5182 <_strtod_l+0x6ba>
    50c2:	eeb1 7b49 	vneg.f64	d7, d9
    50c6:	9805      	ldr	r0, [sp, #20]
    50c8:	ec53 2b17 	vmov	r2, r3, d7
    50cc:	e7b4      	b.n	5038 <_strtod_l+0x570>
    50ce:	4621      	mov	r1, r4
    50d0:	461a      	mov	r2, r3
    50d2:	4640      	mov	r0, r8
    50d4:	f002 fb58 	bl	7788 <__pow5mult>
    50d8:	4604      	mov	r4, r0
    50da:	b360      	cbz	r0, 5136 <_strtod_l+0x66e>
    50dc:	4601      	mov	r1, r0
    50de:	9a12      	ldr	r2, [sp, #72]	; 0x48
    50e0:	4640      	mov	r0, r8
    50e2:	f002 faa3 	bl	762c <__multiply>
    50e6:	b330      	cbz	r0, 5136 <_strtod_l+0x66e>
    50e8:	900f      	str	r0, [sp, #60]	; 0x3c
    50ea:	9912      	ldr	r1, [sp, #72]	; 0x48
    50ec:	4640      	mov	r0, r8
    50ee:	f002 f96b 	bl	73c8 <_Bfree>
    50f2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    50f4:	9212      	str	r2, [sp, #72]	; 0x48
    50f6:	2d00      	cmp	r5, #0
    50f8:	f77f af64 	ble.w	4fc4 <_strtod_l+0x4fc>
    50fc:	9912      	ldr	r1, [sp, #72]	; 0x48
    50fe:	462a      	mov	r2, r5
    5100:	4640      	mov	r0, r8
    5102:	f002 fba1 	bl	7848 <__lshift>
    5106:	9012      	str	r0, [sp, #72]	; 0x48
    5108:	2800      	cmp	r0, #0
    510a:	f47f af5b 	bne.w	4fc4 <_strtod_l+0x4fc>
    510e:	2322      	movs	r3, #34	; 0x22
    5110:	ed9f 8b25 	vldr	d8, [pc, #148]	; 51a8 <_strtod_l+0x6e0>
    5114:	f8c8 3000 	str.w	r3, [r8]
    5118:	e0bc      	b.n	5294 <_strtod_l+0x7cc>
    511a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    511c:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
    5120:	1a9f      	subs	r7, r3, r2
    5122:	e720      	b.n	4f66 <_strtod_l+0x49e>
    5124:	4631      	mov	r1, r6
    5126:	463a      	mov	r2, r7
    5128:	4640      	mov	r0, r8
    512a:	f002 fb8d 	bl	7848 <__lshift>
    512e:	4606      	mov	r6, r0
    5130:	2800      	cmp	r0, #0
    5132:	f47f af4e 	bne.w	4fd2 <_strtod_l+0x50a>
    5136:	9812      	ldr	r0, [sp, #72]	; 0x48
    5138:	e7e9      	b.n	510e <_strtod_l+0x646>
    513a:	4631      	mov	r1, r6
    513c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    513e:	4640      	mov	r0, r8
    5140:	f002 fb22 	bl	7788 <__pow5mult>
    5144:	4606      	mov	r6, r0
    5146:	2800      	cmp	r0, #0
    5148:	f47f af40 	bne.w	4fcc <_strtod_l+0x504>
    514c:	e7f3      	b.n	5136 <_strtod_l+0x66e>
    514e:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
    5152:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
    5156:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
    515a:	2101      	movs	r1, #1
    515c:	32e2      	adds	r2, #226	; 0xe2
    515e:	fa01 f302 	lsl.w	r3, r1, r2
    5162:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
    5166:	e715      	b.n	4f94 <_strtod_l+0x4cc>
    5168:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
    516c:	f04f 0b00 	mov.w	fp, #0
    5170:	e5c0      	b.n	4cf4 <_strtod_l+0x22c>
    5172:	2301      	movs	r3, #1
    5174:	930a      	str	r3, [sp, #40]	; 0x28
    5176:	f10a 0302 	add.w	r3, sl, #2
    517a:	9311      	str	r3, [sp, #68]	; 0x44
    517c:	f89a 4002 	ldrb.w	r4, [sl, #2]
    5180:	e602      	b.n	4d88 <_strtod_l+0x2c0>
    5182:	eeb0 7b49 	vmov.f64	d7, d9
    5186:	e79e      	b.n	50c6 <_strtod_l+0x5fe>
    5188:	94a03595 	.word	0x94a03595
    518c:	3fcfffff 	.word	0x3fcfffff
    5190:	94a03595 	.word	0x94a03595
    5194:	3fdfffff 	.word	0x3fdfffff
    5198:	35afe535 	.word	0x35afe535
    519c:	3fe00000 	.word	0x3fe00000
    51a0:	ffc00000 	.word	0xffc00000
    51a4:	41dfffff 	.word	0x41dfffff
    51a8:	00000000 	.word	0x00000000
    51ac:	7ff00000 	.word	0x7ff00000
    51b0:	200002a8 	.word	0x200002a8
    51b4:	fffffc02 	.word	0xfffffc02
    51b8:	3ff00000 	.word	0x3ff00000
    51bc:	7ff00000 	.word	0x7ff00000
    51c0:	7fe00000 	.word	0x7fe00000
    51c4:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    51c8:	2900      	cmp	r1, #0
    51ca:	f000 8085 	beq.w	52d8 <_strtod_l+0x810>
    51ce:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    51d2:	2901      	cmp	r1, #1
    51d4:	f000 81d8 	beq.w	5588 <_strtod_l+0xac0>
    51d8:	4610      	mov	r0, r2
    51da:	4bb7      	ldr	r3, [pc, #732]	; (54b8 <_strtod_l+0x9f0>)
    51dc:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
    51e0:	2200      	movs	r2, #0
    51e2:	e729      	b.n	5038 <_strtod_l+0x570>
    51e4:	2c65      	cmp	r4, #101	; 0x65
    51e6:	f04f 0c01 	mov.w	ip, #1
    51ea:	f43f adbe 	beq.w	4d6a <_strtod_l+0x2a2>
    51ee:	e54c      	b.n	4c8a <_strtod_l+0x1c2>
    51f0:	ec43 2b1a 	vmov	d10, r2, r3
    51f4:	f1a0 7354 	sub.w	r3, r0, #55574528	; 0x3500000
    51f8:	9305      	str	r3, [sp, #20]
    51fa:	ed9d fb04 	vldr	d15, [sp, #16]
    51fe:	eeb0 0b4f 	vmov.f64	d0, d15
    5202:	f002 fc65 	bl	7ad0 <__ulp>
    5206:	49ad      	ldr	r1, [pc, #692]	; (54bc <_strtod_l+0x9f4>)
    5208:	eeaa fb00 	vfma.f64	d15, d10, d0
    520c:	ee1f 3a90 	vmov	r3, s31
    5210:	4aab      	ldr	r2, [pc, #684]	; (54c0 <_strtod_l+0x9f8>)
    5212:	4019      	ands	r1, r3
    5214:	4291      	cmp	r1, r2
    5216:	ed8d fb04 	vstr	d15, [sp, #16]
    521a:	d972      	bls.n	5302 <_strtod_l+0x83a>
    521c:	4ba9      	ldr	r3, [pc, #676]	; (54c4 <_strtod_l+0x9fc>)
    521e:	ee18 2a90 	vmov	r2, s17
    5222:	429a      	cmp	r2, r3
    5224:	d103      	bne.n	522e <_strtod_l+0x766>
    5226:	ee18 3a10 	vmov	r3, s16
    522a:	3301      	adds	r3, #1
    522c:	d083      	beq.n	5136 <_strtod_l+0x66e>
    522e:	4aa5      	ldr	r2, [pc, #660]	; (54c4 <_strtod_l+0x9fc>)
    5230:	f04f 33ff 	mov.w	r3, #4294967295
    5234:	e9cd 3204 	strd	r3, r2, [sp, #16]
    5238:	e727      	b.n	508a <_strtod_l+0x5c2>
    523a:	2300      	movs	r3, #0
    523c:	930a      	str	r3, [sp, #40]	; 0x28
    523e:	e79a      	b.n	5176 <_strtod_l+0x6ae>
    5240:	2c65      	cmp	r4, #101	; 0x65
    5242:	f000 80d0 	beq.w	53e6 <_strtod_l+0x91e>
    5246:	2c45      	cmp	r4, #69	; 0x45
    5248:	f000 80cd 	beq.w	53e6 <_strtod_l+0x91e>
    524c:	f04f 0c01 	mov.w	ip, #1
    5250:	e5d1      	b.n	4df6 <_strtod_l+0x32e>
    5252:	ec51 0b19 	vmov	r0, r1, d9
    5256:	930d      	str	r3, [sp, #52]	; 0x34
    5258:	f009 fc68 	bl	eb2c <__aeabi_d2lz>
    525c:	f009 fc38 	bl	ead0 <__aeabi_l2d>
    5260:	9b04      	ldr	r3, [sp, #16]
    5262:	431d      	orrs	r5, r3
    5264:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5266:	ec41 0b17 	vmov	d7, r0, r1
    526a:	f3c3 0313 	ubfx	r3, r3, #0, #20
    526e:	431d      	orrs	r5, r3
    5270:	ee39 9b47 	vsub.f64	d9, d9, d7
    5274:	f000 80a0 	beq.w	53b8 <_strtod_l+0x8f0>
    5278:	eeb4 9bcc 	vcmpe.f64	d9, d12
    527c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5280:	d405      	bmi.n	528e <_strtod_l+0x7c6>
    5282:	eeb4 9bcd 	vcmpe.f64	d9, d13
    5286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    528a:	f77f aefe 	ble.w	508a <_strtod_l+0x5c2>
    528e:	ed9d 8b04 	vldr	d8, [sp, #16]
    5292:	9812      	ldr	r0, [sp, #72]	; 0x48
    5294:	4601      	mov	r1, r0
    5296:	4640      	mov	r0, r8
    5298:	f002 f896 	bl	73c8 <_Bfree>
    529c:	4631      	mov	r1, r6
    529e:	4640      	mov	r0, r8
    52a0:	f002 f892 	bl	73c8 <_Bfree>
    52a4:	4621      	mov	r1, r4
    52a6:	4640      	mov	r0, r8
    52a8:	f002 f88e 	bl	73c8 <_Bfree>
    52ac:	4649      	mov	r1, r9
    52ae:	4640      	mov	r0, r8
    52b0:	f002 f88a 	bl	73c8 <_Bfree>
    52b4:	4651      	mov	r1, sl
    52b6:	4640      	mov	r0, r8
    52b8:	f002 f886 	bl	73c8 <_Bfree>
    52bc:	e5c1      	b.n	4e42 <_strtod_l+0x37a>
    52be:	2201      	movs	r2, #1
    52c0:	9209      	str	r2, [sp, #36]	; 0x24
    52c2:	1c79      	adds	r1, r7, #1
    52c4:	9111      	str	r1, [sp, #68]	; 0x44
    52c6:	787a      	ldrb	r2, [r7, #1]
    52c8:	2a00      	cmp	r2, #0
    52ca:	f43f ace5 	beq.w	4c98 <_strtod_l+0x1d0>
    52ce:	460f      	mov	r7, r1
    52d0:	e470      	b.n	4bb4 <_strtod_l+0xec>
    52d2:	2200      	movs	r2, #0
    52d4:	9209      	str	r2, [sp, #36]	; 0x24
    52d6:	e7f4      	b.n	52c2 <_strtod_l+0x7fa>
    52d8:	f3c2 0313 	ubfx	r3, r2, #0, #20
    52dc:	4610      	mov	r0, r2
    52de:	2b00      	cmp	r3, #0
    52e0:	f47f af7b 	bne.w	51da <_strtod_l+0x712>
    52e4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    52e8:	eeb4 0bc7 	vcmpe.f64	d0, d7
    52ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    52f0:	f100 81d3 	bmi.w	569a <_strtod_l+0xbd2>
    52f4:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
    52f8:	ee20 9b09 	vmul.f64	d9, d0, d9
    52fc:	eeb1 7b49 	vneg.f64	d7, d9
    5300:	e6e2      	b.n	50c8 <_strtod_l+0x600>
    5302:	f103 7354 	add.w	r3, r3, #55574528	; 0x3500000
    5306:	9305      	str	r3, [sp, #20]
    5308:	e6b8      	b.n	507c <_strtod_l+0x5b4>
    530a:	eebc 9bc9 	vcvt.u32.f64	s18, d9
    530e:	ee19 3a10 	vmov	r3, s18
    5312:	2b01      	cmp	r3, #1
    5314:	bf38      	it	cc
    5316:	2301      	movcc	r3, #1
    5318:	ee09 3a10 	vmov	s18, r3
    531c:	eeb8 9b49 	vcvt.f64.u32	d9, s18
    5320:	2d00      	cmp	r5, #0
    5322:	f040 813e 	bne.w	55a2 <_strtod_l+0xada>
    5326:	eeb1 7b49 	vneg.f64	d7, d9
    532a:	ec53 2b17 	vmov	r2, r3, d7
    532e:	e696      	b.n	505e <_strtod_l+0x596>
    5330:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
    5334:	f300 80b2 	bgt.w	549c <_strtod_l+0x9d4>
    5338:	2a10      	cmp	r2, #16
    533a:	ea4f 1322 	mov.w	r3, r2, asr #4
    533e:	f340 8286 	ble.w	584e <_strtod_l+0xd86>
    5342:	4c61      	ldr	r4, [pc, #388]	; (54c8 <_strtod_l+0xa00>)
    5344:	ed9d 7b04 	vldr	d7, [sp, #16]
    5348:	2000      	movs	r0, #0
    534a:	4622      	mov	r2, r4
    534c:	4601      	mov	r1, r0
    534e:	f013 0f01 	tst.w	r3, #1
    5352:	f101 0101 	add.w	r1, r1, #1
    5356:	ea4f 0363 	mov.w	r3, r3, asr #1
    535a:	d004      	beq.n	5366 <_strtod_l+0x89e>
    535c:	ed92 6b00 	vldr	d6, [r2]
    5360:	2001      	movs	r0, #1
    5362:	ee27 7b06 	vmul.f64	d7, d7, d6
    5366:	2b01      	cmp	r3, #1
    5368:	f102 0208 	add.w	r2, r2, #8
    536c:	d1ef      	bne.n	534e <_strtod_l+0x886>
    536e:	b108      	cbz	r0, 5374 <_strtod_l+0x8ac>
    5370:	ed8d 7b04 	vstr	d7, [sp, #16]
    5374:	9b05      	ldr	r3, [sp, #20]
    5376:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
    537a:	9305      	str	r3, [sp, #20]
    537c:	eb04 04c1 	add.w	r4, r4, r1, lsl #3
    5380:	ed9d 6b04 	vldr	d6, [sp, #16]
    5384:	ed94 7b00 	vldr	d7, [r4]
    5388:	4b4c      	ldr	r3, [pc, #304]	; (54bc <_strtod_l+0x9f4>)
    538a:	ee27 7b06 	vmul.f64	d7, d7, d6
    538e:	ee17 2a90 	vmov	r2, s15
    5392:	494e      	ldr	r1, [pc, #312]	; (54cc <_strtod_l+0xa04>)
    5394:	4013      	ands	r3, r2
    5396:	428b      	cmp	r3, r1
    5398:	ed8d 7b04 	vstr	d7, [sp, #16]
    539c:	d87e      	bhi.n	549c <_strtod_l+0x9d4>
    539e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
    53a2:	428b      	cmp	r3, r1
    53a4:	f240 81d6 	bls.w	5754 <_strtod_l+0xc8c>
    53a8:	4c46      	ldr	r4, [pc, #280]	; (54c4 <_strtod_l+0x9fc>)
    53aa:	f04f 33ff 	mov.w	r3, #4294967295
    53ae:	e9cd 3404 	strd	r3, r4, [sp, #16]
    53b2:	2300      	movs	r3, #0
    53b4:	9308      	str	r3, [sp, #32]
    53b6:	e585      	b.n	4ec4 <_strtod_l+0x3fc>
    53b8:	eeb4 9bce 	vcmpe.f64	d9, d14
    53bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    53c0:	f57f ae63 	bpl.w	508a <_strtod_l+0x5c2>
    53c4:	e763      	b.n	528e <_strtod_l+0x7c6>
    53c6:	3216      	adds	r2, #22
    53c8:	f6ff ad62 	blt.w	4e90 <_strtod_l+0x3c8>
    53cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    53ce:	eba3 0b0b 	sub.w	fp, r3, fp
    53d2:	4b3f      	ldr	r3, [pc, #252]	; (54d0 <_strtod_l+0xa08>)
    53d4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
    53d8:	ed93 7b00 	vldr	d7, [r3]
    53dc:	ed9d 6b04 	vldr	d6, [sp, #16]
    53e0:	ee86 8b07 	vdiv.f64	d8, d6, d7
    53e4:	e52d      	b.n	4e42 <_strtod_l+0x37a>
    53e6:	f04f 0e00 	mov.w	lr, #0
    53ea:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    53ee:	f04f 0c01 	mov.w	ip, #1
    53f2:	e44e      	b.n	4c92 <_strtod_l+0x1ca>
    53f4:	2c6e      	cmp	r4, #110	; 0x6e
    53f6:	f43f ad10 	beq.w	4e1a <_strtod_l+0x352>
    53fa:	e44d      	b.n	4c98 <_strtod_l+0x1d0>
    53fc:	f43f ad60 	beq.w	4ec0 <_strtod_l+0x3f8>
    5400:	425b      	negs	r3, r3
    5402:	f013 010f 	ands.w	r1, r3, #15
    5406:	d00a      	beq.n	541e <_strtod_l+0x956>
    5408:	4a31      	ldr	r2, [pc, #196]	; (54d0 <_strtod_l+0xa08>)
    540a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    540e:	ed9d 6b04 	vldr	d6, [sp, #16]
    5412:	ed92 7b00 	vldr	d7, [r2]
    5416:	ee86 7b07 	vdiv.f64	d7, d6, d7
    541a:	ed8d 7b04 	vstr	d7, [sp, #16]
    541e:	111b      	asrs	r3, r3, #4
    5420:	f43f ad4e 	beq.w	4ec0 <_strtod_l+0x3f8>
    5424:	2b1f      	cmp	r3, #31
    5426:	dc33      	bgt.n	5490 <_strtod_l+0x9c8>
    5428:	f013 0210 	ands.w	r2, r3, #16
    542c:	bf18      	it	ne
    542e:	226a      	movne	r2, #106	; 0x6a
    5430:	ed9d 7b04 	vldr	d7, [sp, #16]
    5434:	9208      	str	r2, [sp, #32]
    5436:	4a27      	ldr	r2, [pc, #156]	; (54d4 <_strtod_l+0xa0c>)
    5438:	2100      	movs	r1, #0
    543a:	07d8      	lsls	r0, r3, #31
    543c:	d504      	bpl.n	5448 <_strtod_l+0x980>
    543e:	ed92 6b00 	vldr	d6, [r2]
    5442:	2101      	movs	r1, #1
    5444:	ee27 7b06 	vmul.f64	d7, d7, d6
    5448:	105b      	asrs	r3, r3, #1
    544a:	f102 0208 	add.w	r2, r2, #8
    544e:	d1f4      	bne.n	543a <_strtod_l+0x972>
    5450:	b109      	cbz	r1, 5456 <_strtod_l+0x98e>
    5452:	ed8d 7b04 	vstr	d7, [sp, #16]
    5456:	9b08      	ldr	r3, [sp, #32]
    5458:	b193      	cbz	r3, 5480 <_strtod_l+0x9b8>
    545a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    545e:	f3c1 520a 	ubfx	r2, r1, #20, #11
    5462:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
    5466:	2b00      	cmp	r3, #0
    5468:	dd0a      	ble.n	5480 <_strtod_l+0x9b8>
    546a:	2b1f      	cmp	r3, #31
    546c:	f340 822f 	ble.w	58ce <_strtod_l+0xe06>
    5470:	2000      	movs	r0, #0
    5472:	2b34      	cmp	r3, #52	; 0x34
    5474:	9004      	str	r0, [sp, #16]
    5476:	f340 8240 	ble.w	58fa <_strtod_l+0xe32>
    547a:	f04f 735c 	mov.w	r3, #57671680	; 0x3700000
    547e:	9305      	str	r3, [sp, #20]
    5480:	ed9d 7b04 	vldr	d7, [sp, #16]
    5484:	eeb5 7b40 	vcmp.f64	d7, #0.0
    5488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    548c:	f47f ad1a 	bne.w	4ec4 <_strtod_l+0x3fc>
    5490:	2322      	movs	r3, #34	; 0x22
    5492:	ed9f 8b05 	vldr	d8, [pc, #20]	; 54a8 <_strtod_l+0x9e0>
    5496:	f8c8 3000 	str.w	r3, [r8]
    549a:	e4d2      	b.n	4e42 <_strtod_l+0x37a>
    549c:	2322      	movs	r3, #34	; 0x22
    549e:	ed9f 8b04 	vldr	d8, [pc, #16]	; 54b0 <_strtod_l+0x9e8>
    54a2:	f8c8 3000 	str.w	r3, [r8]
    54a6:	e4cc      	b.n	4e42 <_strtod_l+0x37a>
	...
    54b4:	7ff00000 	.word	0x7ff00000
    54b8:	bff00000 	.word	0xbff00000
    54bc:	7ff00000 	.word	0x7ff00000
    54c0:	7c9fffff 	.word	0x7c9fffff
    54c4:	7fefffff 	.word	0x7fefffff
    54c8:	20000280 	.word	0x20000280
    54cc:	7ca00000 	.word	0x7ca00000
    54d0:	200002a8 	.word	0x200002a8
    54d4:	20000370 	.word	0x20000370
    54d8:	9302      	str	r3, [sp, #8]
    54da:	9b09      	ldr	r3, [sp, #36]	; 0x24
    54dc:	9301      	str	r3, [sp, #4]
    54de:	ab12      	add	r3, sp, #72	; 0x48
    54e0:	9300      	str	r3, [sp, #0]
    54e2:	4aa7      	ldr	r2, [pc, #668]	; (5780 <_strtod_l+0xcb8>)
    54e4:	ab13      	add	r3, sp, #76	; 0x4c
    54e6:	a911      	add	r1, sp, #68	; 0x44
    54e8:	4640      	mov	r0, r8
    54ea:	f001 fb73 	bl	6bd4 <__gethex>
    54ee:	f010 050f 	ands.w	r5, r0, #15
    54f2:	4604      	mov	r4, r0
    54f4:	f43f aca3 	beq.w	4e3e <_strtod_l+0x376>
    54f8:	2d06      	cmp	r5, #6
    54fa:	d174      	bne.n	55e6 <_strtod_l+0xb1e>
    54fc:	9b07      	ldr	r3, [sp, #28]
    54fe:	ed9f 8b9a 	vldr	d8, [pc, #616]	; 5768 <_strtod_l+0xca0>
    5502:	3701      	adds	r7, #1
    5504:	2b00      	cmp	r3, #0
    5506:	f43f abce 	beq.w	4ca6 <_strtod_l+0x1de>
    550a:	601f      	str	r7, [r3, #0]
    550c:	f7ff bbcb 	b.w	4ca6 <_strtod_l+0x1de>
    5510:	ed9d 8b04 	vldr	d8, [sp, #16]
    5514:	e495      	b.n	4e42 <_strtod_l+0x37a>
    5516:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5518:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
    551c:	4403      	add	r3, r0
    551e:	930b      	str	r3, [sp, #44]	; 0x2c
    5520:	2801      	cmp	r0, #1
    5522:	f105 0301 	add.w	r3, r5, #1
    5526:	461a      	mov	r2, r3
    5528:	d014      	beq.n	5554 <_strtod_l+0xa8c>
    552a:	4428      	add	r0, r5
    552c:	1e44      	subs	r4, r0, #1
    552e:	e003      	b.n	5538 <_strtod_l+0xa70>
    5530:	0046      	lsls	r6, r0, #1
    5532:	429c      	cmp	r4, r3
    5534:	d00d      	beq.n	5552 <_strtod_l+0xa8a>
    5536:	3301      	adds	r3, #1
    5538:	462a      	mov	r2, r5
    553a:	2a08      	cmp	r2, #8
    553c:	461d      	mov	r5, r3
    553e:	eb06 0086 	add.w	r0, r6, r6, lsl #2
    5542:	d9f5      	bls.n	5530 <_strtod_l+0xa68>
    5544:	2b10      	cmp	r3, #16
    5546:	bfdc      	itt	le
    5548:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
    554c:	ea4f 0949 	movle.w	r9, r9, lsl #1
    5550:	e7ef      	b.n	5532 <_strtod_l+0xa6a>
    5552:	3202      	adds	r2, #2
    5554:	2d08      	cmp	r5, #8
    5556:	dc3c      	bgt.n	55d2 <_strtod_l+0xb0a>
    5558:	4615      	mov	r5, r2
    555a:	f7ff bb79 	b.w	4c50 <_strtod_l+0x188>
    555e:	4989      	ldr	r1, [pc, #548]	; (5784 <_strtod_l+0xcbc>)
    5560:	2201      	movs	r2, #1
    5562:	4638      	mov	r0, r7
    5564:	f000 fdd4 	bl	6110 <strncmp>
    5568:	2800      	cmp	r0, #0
    556a:	f000 8082 	beq.w	5672 <_strtod_l+0xbaa>
    556e:	f04f 0e00 	mov.w	lr, #0
    5572:	46f1      	mov	r9, lr
    5574:	4676      	mov	r6, lr
    5576:	4675      	mov	r5, lr
    5578:	f7ff bbb5 	b.w	4ce6 <_strtod_l+0x21e>
    557c:	f644 631f 	movw	r3, #19999	; 0x4e1f
    5580:	459b      	cmp	fp, r3
    5582:	bfa8      	it	ge
    5584:	469b      	movge	fp, r3
    5586:	e42f      	b.n	4de8 <_strtod_l+0x320>
    5588:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    558c:	4618      	mov	r0, r3
    558e:	2b00      	cmp	r3, #0
    5590:	f47f ae23 	bne.w	51da <_strtod_l+0x712>
    5594:	2322      	movs	r3, #34	; 0x22
    5596:	ed9f 8b74 	vldr	d8, [pc, #464]	; 5768 <_strtod_l+0xca0>
    559a:	9812      	ldr	r0, [sp, #72]	; 0x48
    559c:	f8c8 3000 	str.w	r3, [r8]
    55a0:	e678      	b.n	5294 <_strtod_l+0x7cc>
    55a2:	eeb0 7b49 	vmov.f64	d7, d9
    55a6:	e6c0      	b.n	532a <_strtod_l+0x862>
    55a8:	4977      	ldr	r1, [pc, #476]	; (5788 <_strtod_l+0xcc0>)
    55aa:	a811      	add	r0, sp, #68	; 0x44
    55ac:	f001 fddc 	bl	7168 <__match>
    55b0:	2800      	cmp	r0, #0
    55b2:	f43f ab71 	beq.w	4c98 <_strtod_l+0x1d0>
    55b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    55b8:	4974      	ldr	r1, [pc, #464]	; (578c <_strtod_l+0xcc4>)
    55ba:	3b01      	subs	r3, #1
    55bc:	a811      	add	r0, sp, #68	; 0x44
    55be:	9311      	str	r3, [sp, #68]	; 0x44
    55c0:	f001 fdd2 	bl	7168 <__match>
    55c4:	b910      	cbnz	r0, 55cc <_strtod_l+0xb04>
    55c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    55c8:	3301      	adds	r3, #1
    55ca:	9311      	str	r3, [sp, #68]	; 0x44
    55cc:	ed9f 8b68 	vldr	d8, [pc, #416]	; 5770 <_strtod_l+0xca8>
    55d0:	e437      	b.n	4e42 <_strtod_l+0x37a>
    55d2:	2a10      	cmp	r2, #16
    55d4:	bfdc      	itt	le
    55d6:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
    55da:	eb01 0949 	addle.w	r9, r1, r9, lsl #1
    55de:	4615      	mov	r5, r2
    55e0:	2000      	movs	r0, #0
    55e2:	f7ff bb3a 	b.w	4c5a <_strtod_l+0x192>
    55e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
    55e8:	b13a      	cbz	r2, 55fa <_strtod_l+0xb32>
    55ea:	2135      	movs	r1, #53	; 0x35
    55ec:	a814      	add	r0, sp, #80	; 0x50
    55ee:	f002 fb9f 	bl	7d30 <__copybits>
    55f2:	9912      	ldr	r1, [sp, #72]	; 0x48
    55f4:	4640      	mov	r0, r8
    55f6:	f001 fee7 	bl	73c8 <_Bfree>
    55fa:	3d01      	subs	r5, #1
    55fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    55fe:	2d04      	cmp	r5, #4
    5600:	f200 818f 	bhi.w	5922 <_strtod_l+0xe5a>
    5604:	e8df f005 	tbb	[pc, r5]
    5608:	1f2a2d03 	.word	0x1f2a2d03
    560c:	03          	.byte	0x03
    560d:	00          	.byte	0x00
    560e:	9a14      	ldr	r2, [sp, #80]	; 0x50
    5610:	9204      	str	r2, [sp, #16]
    5612:	f203 4233 	addw	r2, r3, #1075	; 0x433
    5616:	9b15      	ldr	r3, [sp, #84]	; 0x54
    5618:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
    561c:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
    5620:	9305      	str	r3, [sp, #20]
    5622:	05e5      	lsls	r5, r4, #23
    5624:	d502      	bpl.n	562c <_strtod_l+0xb64>
    5626:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    562a:	9305      	str	r3, [sp, #20]
    562c:	4a58      	ldr	r2, [pc, #352]	; (5790 <_strtod_l+0xcc8>)
    562e:	401a      	ands	r2, r3
    5630:	ed9d 8b04 	vldr	d8, [sp, #16]
    5634:	2a00      	cmp	r2, #0
    5636:	f47f ac04 	bne.w	4e42 <_strtod_l+0x37a>
    563a:	f000 fe4d 	bl	62d8 <__errno>
    563e:	2322      	movs	r3, #34	; 0x22
    5640:	6003      	str	r3, [r0, #0]
    5642:	f7ff bbfe 	b.w	4e42 <_strtod_l+0x37a>
    5646:	f04f 33ff 	mov.w	r3, #4294967295
    564a:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    564e:	e9cd 3604 	strd	r3, r6, [sp, #16]
    5652:	05e3      	lsls	r3, r4, #23
    5654:	f57f af5c 	bpl.w	5510 <_strtod_l+0xa48>
    5658:	9b05      	ldr	r3, [sp, #20]
    565a:	e7e4      	b.n	5626 <_strtod_l+0xb5e>
    565c:	4b4c      	ldr	r3, [pc, #304]	; (5790 <_strtod_l+0xcc8>)
    565e:	9305      	str	r3, [sp, #20]
    5660:	e7f7      	b.n	5652 <_strtod_l+0xb8a>
    5662:	9b14      	ldr	r3, [sp, #80]	; 0x50
    5664:	9304      	str	r3, [sp, #16]
    5666:	9b15      	ldr	r3, [sp, #84]	; 0x54
    5668:	9305      	str	r3, [sp, #20]
    566a:	e7da      	b.n	5622 <_strtod_l+0xb5a>
    566c:	2000      	movs	r0, #0
    566e:	f7ff bae1 	b.w	4c34 <_strtod_l+0x16c>
    5672:	9b11      	ldr	r3, [sp, #68]	; 0x44
    5674:	461a      	mov	r2, r3
    5676:	3301      	adds	r3, #1
    5678:	9311      	str	r3, [sp, #68]	; 0x44
    567a:	7854      	ldrb	r4, [r2, #1]
    567c:	4606      	mov	r6, r0
    567e:	4681      	mov	r9, r0
    5680:	f7ff bacd 	b.w	4c1e <_strtod_l+0x156>
    5684:	4b43      	ldr	r3, [pc, #268]	; (5794 <_strtod_l+0xccc>)
    5686:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    568a:	ed93 8b00 	vldr	d8, [r3]
    568e:	ed9d 7b04 	vldr	d7, [sp, #16]
    5692:	ee28 8b07 	vmul.f64	d8, d8, d7
    5696:	f7ff bbd4 	b.w	4e42 <_strtod_l+0x37a>
    569a:	eebe 7b00 	vmov.f64	d7, #224	; 0xbf000000 -0.5
    569e:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
    56a2:	e511      	b.n	50c8 <_strtod_l+0x600>
    56a4:	46ae      	mov	lr, r5
    56a6:	900b      	str	r0, [sp, #44]	; 0x2c
    56a8:	f7ff badc 	b.w	4c64 <_strtod_l+0x19c>
    56ac:	4b39      	ldr	r3, [pc, #228]	; (5794 <_strtod_l+0xccc>)
    56ae:	f1c5 050f 	rsb	r5, r5, #15
    56b2:	1b4a      	subs	r2, r1, r5
    56b4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    56b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    56bc:	ed95 8b00 	vldr	d8, [r5]
    56c0:	ed93 7b00 	vldr	d7, [r3]
    56c4:	ed9d 6b04 	vldr	d6, [sp, #16]
    56c8:	ee28 8b06 	vmul.f64	d8, d8, d6
    56cc:	ee28 8b07 	vmul.f64	d8, d8, d7
    56d0:	f7ff bbb7 	b.w	4e42 <_strtod_l+0x37a>
    56d4:	2d00      	cmp	r5, #0
    56d6:	f000 8095 	beq.w	5804 <_strtod_l+0xd3c>
    56da:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
    56de:	4b2e      	ldr	r3, [pc, #184]	; (5798 <_strtod_l+0xcd0>)
    56e0:	f3cc 0113 	ubfx	r1, ip, #0, #20
    56e4:	4299      	cmp	r1, r3
    56e6:	4662      	mov	r2, ip
    56e8:	f000 80d2 	beq.w	5890 <_strtod_l+0xdc8>
    56ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    56ee:	2b00      	cmp	r3, #0
    56f0:	f000 80a5 	beq.w	583e <_strtod_l+0xd76>
    56f4:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    56f8:	4213      	tst	r3, r2
    56fa:	4617      	mov	r7, r2
    56fc:	d01a      	beq.n	5734 <_strtod_l+0xc6c>
    56fe:	eeb0 0b48 	vmov.f64	d0, d8
    5702:	2d00      	cmp	r5, #0
    5704:	f000 80a6 	beq.w	5854 <_strtod_l+0xd8c>
    5708:	f002 f9e2 	bl	7ad0 <__ulp>
    570c:	9b08      	ldr	r3, [sp, #32]
    570e:	b17b      	cbz	r3, 5730 <_strtod_l+0xc68>
    5710:	f3c7 530a 	ubfx	r3, r7, #20, #11
    5714:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    5718:	2b00      	cmp	r3, #0
    571a:	dd09      	ble.n	5730 <_strtod_l+0xc68>
    571c:	051b      	lsls	r3, r3, #20
    571e:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
    5722:	2000      	movs	r0, #0
    5724:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
    5728:	ec41 0b17 	vmov	d7, r0, r1
    572c:	ee20 0b07 	vmul.f64	d0, d0, d7
    5730:	ee38 8b00 	vadd.f64	d8, d8, d0
    5734:	9b08      	ldr	r3, [sp, #32]
    5736:	b15b      	cbz	r3, 5750 <_strtod_l+0xc88>
    5738:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 5778 <_strtod_l+0xcb0>
    573c:	4b14      	ldr	r3, [pc, #80]	; (5790 <_strtod_l+0xcc8>)
    573e:	ee28 8b07 	vmul.f64	d8, d8, d7
    5742:	ee18 2a90 	vmov	r2, s17
    5746:	4013      	ands	r3, r2
    5748:	b913      	cbnz	r3, 5750 <_strtod_l+0xc88>
    574a:	2322      	movs	r3, #34	; 0x22
    574c:	f8c8 3000 	str.w	r3, [r8]
    5750:	9812      	ldr	r0, [sp, #72]	; 0x48
    5752:	e59f      	b.n	5294 <_strtod_l+0x7cc>
    5754:	f102 7354 	add.w	r3, r2, #55574528	; 0x3500000
    5758:	9305      	str	r3, [sp, #20]
    575a:	2300      	movs	r3, #0
    575c:	9308      	str	r3, [sp, #32]
    575e:	f7ff bbb1 	b.w	4ec4 <_strtod_l+0x3fc>
    5762:	bf00      	nop
    5764:	f3af 8000 	nop.w
	...
    5774:	7ff00000 	.word	0x7ff00000
    5778:	00000000 	.word	0x00000000
    577c:	39500000 	.word	0x39500000
    5780:	200076f0 	.word	0x200076f0
    5784:	200008e0 	.word	0x200008e0
    5788:	200008e4 	.word	0x200008e4
    578c:	200008e8 	.word	0x200008e8
    5790:	7ff00000 	.word	0x7ff00000
    5794:	200002a8 	.word	0x200002a8
    5798:	000fffff 	.word	0x000fffff
    579c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    57a0:	430d      	orrs	r5, r1
    57a2:	d1c7      	bne.n	5734 <_strtod_l+0xc6c>
    57a4:	f3c2 0313 	ubfx	r3, r2, #0, #20
    57a8:	4617      	mov	r7, r2
    57aa:	2b00      	cmp	r3, #0
    57ac:	d1c2      	bne.n	5734 <_strtod_l+0xc6c>
    57ae:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
    57b2:	0d1b      	lsrs	r3, r3, #20
    57b4:	051b      	lsls	r3, r3, #20
    57b6:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    57ba:	d9bb      	bls.n	5734 <_strtod_l+0xc6c>
    57bc:	f8da 3014 	ldr.w	r3, [sl, #20]
    57c0:	b91b      	cbnz	r3, 57ca <_strtod_l+0xd02>
    57c2:	f8da 3010 	ldr.w	r3, [sl, #16]
    57c6:	2b01      	cmp	r3, #1
    57c8:	ddb4      	ble.n	5734 <_strtod_l+0xc6c>
    57ca:	4651      	mov	r1, sl
    57cc:	2201      	movs	r2, #1
    57ce:	4640      	mov	r0, r8
    57d0:	f002 f83a 	bl	7848 <__lshift>
    57d4:	4621      	mov	r1, r4
    57d6:	4682      	mov	sl, r0
    57d8:	f002 f8ae 	bl	7938 <__mcmp>
    57dc:	2800      	cmp	r0, #0
    57de:	dda9      	ble.n	5734 <_strtod_l+0xc6c>
    57e0:	9b08      	ldr	r3, [sp, #32]
    57e2:	2b00      	cmp	r3, #0
    57e4:	d17e      	bne.n	58e4 <_strtod_l+0xe1c>
    57e6:	4b50      	ldr	r3, [pc, #320]	; (5928 <_strtod_l+0xe60>)
    57e8:	403b      	ands	r3, r7
    57ea:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
    57ee:	ea6f 5313 	mvn.w	r3, r3, lsr #20
    57f2:	ea6f 5303 	mvn.w	r3, r3, lsl #20
    57f6:	9305      	str	r3, [sp, #20]
    57f8:	f04f 33ff 	mov.w	r3, #4294967295
    57fc:	9304      	str	r3, [sp, #16]
    57fe:	ed9d 8b04 	vldr	d8, [sp, #16]
    5802:	e797      	b.n	5734 <_strtod_l+0xc6c>
    5804:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    5808:	f3c2 0313 	ubfx	r3, r2, #0, #20
    580c:	430b      	orrs	r3, r1
    580e:	4617      	mov	r7, r2
    5810:	f47f af6c 	bne.w	56ec <_strtod_l+0xc24>
    5814:	e7e4      	b.n	57e0 <_strtod_l+0xd18>
    5816:	4945      	ldr	r1, [pc, #276]	; (592c <_strtod_l+0xe64>)
    5818:	a811      	add	r0, sp, #68	; 0x44
    581a:	aa14      	add	r2, sp, #80	; 0x50
    581c:	f001 fcc0 	bl	71a0 <__hexnan>
    5820:	2805      	cmp	r0, #5
    5822:	f47f ab06 	bne.w	4e32 <_strtod_l+0x36a>
    5826:	9b15      	ldr	r3, [sp, #84]	; 0x54
    5828:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
    582c:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
    5830:	9305      	str	r3, [sp, #20]
    5832:	9b14      	ldr	r3, [sp, #80]	; 0x50
    5834:	9304      	str	r3, [sp, #16]
    5836:	ed9d 8b04 	vldr	d8, [sp, #16]
    583a:	f7ff bb02 	b.w	4e42 <_strtod_l+0x37a>
    583e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    5842:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5844:	4203      	tst	r3, r0
    5846:	f43f af75 	beq.w	5734 <_strtod_l+0xc6c>
    584a:	460f      	mov	r7, r1
    584c:	e757      	b.n	56fe <_strtod_l+0xc36>
    584e:	4c38      	ldr	r4, [pc, #224]	; (5930 <_strtod_l+0xe68>)
    5850:	2100      	movs	r1, #0
    5852:	e58f      	b.n	5374 <_strtod_l+0x8ac>
    5854:	f002 f93c 	bl	7ad0 <__ulp>
    5858:	9b08      	ldr	r3, [sp, #32]
    585a:	2b00      	cmp	r3, #0
    585c:	d055      	beq.n	590a <_strtod_l+0xe42>
    585e:	f3c7 530a 	ubfx	r3, r7, #20, #11
    5862:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    5866:	2b00      	cmp	r3, #0
    5868:	dd09      	ble.n	587e <_strtod_l+0xdb6>
    586a:	051b      	lsls	r3, r3, #20
    586c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
    5870:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
    5874:	4628      	mov	r0, r5
    5876:	ec41 0b17 	vmov	d7, r0, r1
    587a:	ee20 0b07 	vmul.f64	d0, d0, d7
    587e:	ee38 8b40 	vsub.f64	d8, d8, d0
    5882:	eeb5 8b40 	vcmp.f64	d8, #0.0
    5886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    588a:	f47f af55 	bne.w	5738 <_strtod_l+0xc70>
    588e:	e681      	b.n	5594 <_strtod_l+0xacc>
    5890:	9b08      	ldr	r3, [sp, #32]
    5892:	9904      	ldr	r1, [sp, #16]
    5894:	b31b      	cbz	r3, 58de <_strtod_l+0xe16>
    5896:	4b24      	ldr	r3, [pc, #144]	; (5928 <_strtod_l+0xe60>)
    5898:	4013      	ands	r3, r2
    589a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
    589e:	d81e      	bhi.n	58de <_strtod_l+0xe16>
    58a0:	0d1b      	lsrs	r3, r3, #20
    58a2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    58a6:	f04f 30ff 	mov.w	r0, #4294967295
    58aa:	fa00 f303 	lsl.w	r3, r0, r3
    58ae:	4299      	cmp	r1, r3
    58b0:	f47f af1c 	bne.w	56ec <_strtod_l+0xc24>
    58b4:	4b1f      	ldr	r3, [pc, #124]	; (5934 <_strtod_l+0xe6c>)
    58b6:	429a      	cmp	r2, r3
    58b8:	d030      	beq.n	591c <_strtod_l+0xe54>
    58ba:	4b1b      	ldr	r3, [pc, #108]	; (5928 <_strtod_l+0xe60>)
    58bc:	4013      	ands	r3, r2
    58be:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
    58c2:	9305      	str	r3, [sp, #20]
    58c4:	2300      	movs	r3, #0
    58c6:	9304      	str	r3, [sp, #16]
    58c8:	ed9d 8b04 	vldr	d8, [sp, #16]
    58cc:	e732      	b.n	5734 <_strtod_l+0xc6c>
    58ce:	f04f 32ff 	mov.w	r2, #4294967295
    58d2:	fa02 f303 	lsl.w	r3, r2, r3
    58d6:	9a04      	ldr	r2, [sp, #16]
    58d8:	401a      	ands	r2, r3
    58da:	9204      	str	r2, [sp, #16]
    58dc:	e5d0      	b.n	5480 <_strtod_l+0x9b8>
    58de:	f04f 33ff 	mov.w	r3, #4294967295
    58e2:	e7e4      	b.n	58ae <_strtod_l+0xde6>
    58e4:	4b10      	ldr	r3, [pc, #64]	; (5928 <_strtod_l+0xe60>)
    58e6:	403b      	ands	r3, r7
    58e8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    58ec:	f73f af7d 	bgt.w	57ea <_strtod_l+0xd22>
    58f0:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
    58f4:	f73f af20 	bgt.w	5738 <_strtod_l+0xc70>
    58f8:	e64c      	b.n	5594 <_strtod_l+0xacc>
    58fa:	f1c2 024b 	rsb	r2, r2, #75	; 0x4b
    58fe:	f04f 33ff 	mov.w	r3, #4294967295
    5902:	4093      	lsls	r3, r2
    5904:	400b      	ands	r3, r1
    5906:	9305      	str	r3, [sp, #20]
    5908:	e5ba      	b.n	5480 <_strtod_l+0x9b8>
    590a:	ee38 8b40 	vsub.f64	d8, d8, d0
    590e:	eeb5 8b40 	vcmp.f64	d8, #0.0
    5912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5916:	f47f af1b 	bne.w	5750 <_strtod_l+0xc88>
    591a:	e63b      	b.n	5594 <_strtod_l+0xacc>
    591c:	3101      	adds	r1, #1
    591e:	d1cc      	bne.n	58ba <_strtod_l+0xdf2>
    5920:	e409      	b.n	5136 <_strtod_l+0x66e>
    5922:	2300      	movs	r3, #0
    5924:	e67d      	b.n	5622 <_strtod_l+0xb5a>
    5926:	bf00      	nop
    5928:	7ff00000 	.word	0x7ff00000
    592c:	20007704 	.word	0x20007704
    5930:	20000280 	.word	0x20000280
    5934:	7fefffff 	.word	0x7fefffff

00005938 <_strtod_r>:
    5938:	4b01      	ldr	r3, [pc, #4]	; (5940 <_strtod_r+0x8>)
    593a:	f7ff b8c5 	b.w	4ac8 <_strtod_l>
    593e:	bf00      	nop
    5940:	20007c38 	.word	0x20007c38

00005944 <_strtol_l.constprop.0>:
    5944:	2b01      	cmp	r3, #1
    5946:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    594a:	d040      	beq.n	59ce <_strtol_l.constprop.0+0x8a>
    594c:	2b24      	cmp	r3, #36	; 0x24
    594e:	4698      	mov	r8, r3
    5950:	d83d      	bhi.n	59ce <_strtol_l.constprop.0+0x8a>
    5952:	4d4c      	ldr	r5, [pc, #304]	; (5a84 <_strtol_l.constprop.0+0x140>)
    5954:	468e      	mov	lr, r1
    5956:	4676      	mov	r6, lr
    5958:	f81e bb01 	ldrb.w	fp, [lr], #1
    595c:	f815 400b 	ldrb.w	r4, [r5, fp]
    5960:	f014 0408 	ands.w	r4, r4, #8
    5964:	d1f7      	bne.n	5956 <_strtol_l.constprop.0+0x12>
    5966:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
    596a:	d072      	beq.n	5a52 <_strtol_l.constprop.0+0x10e>
    596c:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
    5970:	bf08      	it	eq
    5972:	f89e b000 	ldrbeq.w	fp, [lr]
    5976:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
    597a:	bf08      	it	eq
    597c:	f106 0e02 	addeq.w	lr, r6, #2
    5980:	2b00      	cmp	r3, #0
    5982:	d042      	beq.n	5a0a <_strtol_l.constprop.0+0xc6>
    5984:	2b10      	cmp	r3, #16
    5986:	d057      	beq.n	5a38 <_strtol_l.constprop.0+0xf4>
    5988:	fbb9 f7f8 	udiv	r7, r9, r8
    598c:	2500      	movs	r5, #0
    598e:	462e      	mov	r6, r5
    5990:	fb08 9a17 	mls	sl, r8, r7, r9
    5994:	e005      	b.n	59a2 <_strtol_l.constprop.0+0x5e>
    5996:	d033      	beq.n	5a00 <_strtol_l.constprop.0+0xbc>
    5998:	fb08 c606 	mla	r6, r8, r6, ip
    599c:	2501      	movs	r5, #1
    599e:	f81e bb01 	ldrb.w	fp, [lr], #1
    59a2:	f1ab 0c30 	sub.w	ip, fp, #48	; 0x30
    59a6:	f1bc 0f09 	cmp.w	ip, #9
    59aa:	d906      	bls.n	59ba <_strtol_l.constprop.0+0x76>
    59ac:	f1ab 0c41 	sub.w	ip, fp, #65	; 0x41
    59b0:	f1bc 0f19 	cmp.w	ip, #25
    59b4:	d812      	bhi.n	59dc <_strtol_l.constprop.0+0x98>
    59b6:	f1ab 0c37 	sub.w	ip, fp, #55	; 0x37
    59ba:	4563      	cmp	r3, ip
    59bc:	dd17      	ble.n	59ee <_strtol_l.constprop.0+0xaa>
    59be:	f1b5 3fff 	cmp.w	r5, #4294967295
    59c2:	d0ec      	beq.n	599e <_strtol_l.constprop.0+0x5a>
    59c4:	42b7      	cmp	r7, r6
    59c6:	d2e6      	bcs.n	5996 <_strtol_l.constprop.0+0x52>
    59c8:	f04f 35ff 	mov.w	r5, #4294967295
    59cc:	e7e7      	b.n	599e <_strtol_l.constprop.0+0x5a>
    59ce:	f000 fc83 	bl	62d8 <__errno>
    59d2:	2316      	movs	r3, #22
    59d4:	6003      	str	r3, [r0, #0]
    59d6:	2000      	movs	r0, #0
    59d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    59dc:	f1ab 0c61 	sub.w	ip, fp, #97	; 0x61
    59e0:	f1bc 0f19 	cmp.w	ip, #25
    59e4:	d803      	bhi.n	59ee <_strtol_l.constprop.0+0xaa>
    59e6:	f1ab 0c57 	sub.w	ip, fp, #87	; 0x57
    59ea:	4563      	cmp	r3, ip
    59ec:	dce7      	bgt.n	59be <_strtol_l.constprop.0+0x7a>
    59ee:	1c6b      	adds	r3, r5, #1
    59f0:	d027      	beq.n	5a42 <_strtol_l.constprop.0+0xfe>
    59f2:	b98c      	cbnz	r4, 5a18 <_strtol_l.constprop.0+0xd4>
    59f4:	b10a      	cbz	r2, 59fa <_strtol_l.constprop.0+0xb6>
    59f6:	bba5      	cbnz	r5, 5a62 <_strtol_l.constprop.0+0x11e>
    59f8:	6011      	str	r1, [r2, #0]
    59fa:	4630      	mov	r0, r6
    59fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5a00:	45e2      	cmp	sl, ip
    5a02:	dac9      	bge.n	5998 <_strtol_l.constprop.0+0x54>
    5a04:	f04f 35ff 	mov.w	r5, #4294967295
    5a08:	e7c9      	b.n	599e <_strtol_l.constprop.0+0x5a>
    5a0a:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
    5a0e:	d005      	beq.n	5a1c <_strtol_l.constprop.0+0xd8>
    5a10:	f04f 080a 	mov.w	r8, #10
    5a14:	4643      	mov	r3, r8
    5a16:	e7b7      	b.n	5988 <_strtol_l.constprop.0+0x44>
    5a18:	4276      	negs	r6, r6
    5a1a:	e7eb      	b.n	59f4 <_strtol_l.constprop.0+0xb0>
    5a1c:	f89e 3000 	ldrb.w	r3, [lr]
    5a20:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    5a24:	2b58      	cmp	r3, #88	; 0x58
    5a26:	d121      	bne.n	5a6c <_strtol_l.constprop.0+0x128>
    5a28:	f04f 0810 	mov.w	r8, #16
    5a2c:	f89e b001 	ldrb.w	fp, [lr, #1]
    5a30:	4643      	mov	r3, r8
    5a32:	f10e 0e02 	add.w	lr, lr, #2
    5a36:	e7a7      	b.n	5988 <_strtol_l.constprop.0+0x44>
    5a38:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
    5a3c:	d01a      	beq.n	5a74 <_strtol_l.constprop.0+0x130>
    5a3e:	4698      	mov	r8, r3
    5a40:	e7a2      	b.n	5988 <_strtol_l.constprop.0+0x44>
    5a42:	2322      	movs	r3, #34	; 0x22
    5a44:	6003      	str	r3, [r0, #0]
    5a46:	b172      	cbz	r2, 5a66 <_strtol_l.constprop.0+0x122>
    5a48:	f10e 31ff 	add.w	r1, lr, #4294967295
    5a4c:	464e      	mov	r6, r9
    5a4e:	6011      	str	r1, [r2, #0]
    5a50:	e7d3      	b.n	59fa <_strtol_l.constprop.0+0xb6>
    5a52:	f89e b000 	ldrb.w	fp, [lr]
    5a56:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
    5a5a:	f106 0e02 	add.w	lr, r6, #2
    5a5e:	2401      	movs	r4, #1
    5a60:	e78e      	b.n	5980 <_strtol_l.constprop.0+0x3c>
    5a62:	46b1      	mov	r9, r6
    5a64:	e7f0      	b.n	5a48 <_strtol_l.constprop.0+0x104>
    5a66:	464e      	mov	r6, r9
    5a68:	4630      	mov	r0, r6
    5a6a:	e7c7      	b.n	59fc <_strtol_l.constprop.0+0xb8>
    5a6c:	f04f 0808 	mov.w	r8, #8
    5a70:	4643      	mov	r3, r8
    5a72:	e789      	b.n	5988 <_strtol_l.constprop.0+0x44>
    5a74:	f89e 5000 	ldrb.w	r5, [lr]
    5a78:	f005 05df 	and.w	r5, r5, #223	; 0xdf
    5a7c:	2d58      	cmp	r5, #88	; 0x58
    5a7e:	d0d3      	beq.n	5a28 <_strtol_l.constprop.0+0xe4>
    5a80:	4698      	mov	r8, r3
    5a82:	e781      	b.n	5988 <_strtol_l.constprop.0+0x44>
    5a84:	2000075d 	.word	0x2000075d

00005a88 <_strtol_r>:
    5a88:	f7ff bf5c 	b.w	5944 <_strtol_l.constprop.0>

00005a8c <__cxa_atexit>:
    5a8c:	4613      	mov	r3, r2
    5a8e:	460a      	mov	r2, r1
    5a90:	4601      	mov	r1, r0
    5a92:	2002      	movs	r0, #2
    5a94:	f000 beb2 	b.w	67fc <__register_exitproc>

00005a98 <isspace>:
    5a98:	4b02      	ldr	r3, [pc, #8]	; (5aa4 <isspace+0xc>)
    5a9a:	4418      	add	r0, r3
    5a9c:	7840      	ldrb	r0, [r0, #1]
    5a9e:	f000 0008 	and.w	r0, r0, #8
    5aa2:	4770      	bx	lr
    5aa4:	2000075c 	.word	0x2000075c

00005aa8 <toupper>:
    5aa8:	4b03      	ldr	r3, [pc, #12]	; (5ab8 <toupper+0x10>)
    5aaa:	5c1b      	ldrb	r3, [r3, r0]
    5aac:	f003 0303 	and.w	r3, r3, #3
    5ab0:	2b02      	cmp	r3, #2
    5ab2:	bf08      	it	eq
    5ab4:	3820      	subeq	r0, #32
    5ab6:	4770      	bx	lr
    5ab8:	2000075d 	.word	0x2000075d

00005abc <stdio_exit_handler>:
    5abc:	4a02      	ldr	r2, [pc, #8]	; (5ac8 <stdio_exit_handler+0xc>)
    5abe:	4903      	ldr	r1, [pc, #12]	; (5acc <stdio_exit_handler+0x10>)
    5ac0:	4803      	ldr	r0, [pc, #12]	; (5ad0 <stdio_exit_handler+0x14>)
    5ac2:	f000 b8bb 	b.w	5c3c <_fwalk_sglue>
    5ac6:	bf00      	nop
    5ac8:	200081b4 	.word	0x200081b4
    5acc:	0000b1a5 	.word	0x0000b1a5
    5ad0:	20007a28 	.word	0x20007a28

00005ad4 <cleanup_stdio>:
    5ad4:	4b0c      	ldr	r3, [pc, #48]	; (5b08 <cleanup_stdio+0x34>)
    5ad6:	6841      	ldr	r1, [r0, #4]
    5ad8:	4299      	cmp	r1, r3
    5ada:	b510      	push	{r4, lr}
    5adc:	4604      	mov	r4, r0
    5ade:	d001      	beq.n	5ae4 <cleanup_stdio+0x10>
    5ae0:	f005 fb60 	bl	b1a4 <_fclose_r>
    5ae4:	68a1      	ldr	r1, [r4, #8]
    5ae6:	4b09      	ldr	r3, [pc, #36]	; (5b0c <cleanup_stdio+0x38>)
    5ae8:	4299      	cmp	r1, r3
    5aea:	d002      	beq.n	5af2 <cleanup_stdio+0x1e>
    5aec:	4620      	mov	r0, r4
    5aee:	f005 fb59 	bl	b1a4 <_fclose_r>
    5af2:	68e1      	ldr	r1, [r4, #12]
    5af4:	4b06      	ldr	r3, [pc, #24]	; (5b10 <cleanup_stdio+0x3c>)
    5af6:	4299      	cmp	r1, r3
    5af8:	d004      	beq.n	5b04 <cleanup_stdio+0x30>
    5afa:	4620      	mov	r0, r4
    5afc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5b00:	f005 bb50 	b.w	b1a4 <_fclose_r>
    5b04:	bd10      	pop	{r4, pc}
    5b06:	bf00      	nop
    5b08:	200090a0 	.word	0x200090a0
    5b0c:	20009108 	.word	0x20009108
    5b10:	20009170 	.word	0x20009170

00005b14 <global_stdio_init.part.0>:
    5b14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5b18:	4c2a      	ldr	r4, [pc, #168]	; (5bc4 <global_stdio_init.part.0+0xb0>)
    5b1a:	4b2b      	ldr	r3, [pc, #172]	; (5bc8 <global_stdio_init.part.0+0xb4>)
    5b1c:	482b      	ldr	r0, [pc, #172]	; (5bcc <global_stdio_init.part.0+0xb8>)
    5b1e:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 5be0 <global_stdio_init.part.0+0xcc>
    5b22:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 5be4 <global_stdio_init.part.0+0xd0>
    5b26:	4f2a      	ldr	r7, [pc, #168]	; (5bd0 <global_stdio_init.part.0+0xbc>)
    5b28:	6018      	str	r0, [r3, #0]
    5b2a:	2500      	movs	r5, #0
    5b2c:	2304      	movs	r3, #4
    5b2e:	2208      	movs	r2, #8
    5b30:	4629      	mov	r1, r5
    5b32:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    5b36:	4e27      	ldr	r6, [pc, #156]	; (5bd4 <global_stdio_init.part.0+0xc0>)
    5b38:	6665      	str	r5, [r4, #100]	; 0x64
    5b3a:	e9c4 5302 	strd	r5, r3, [r4, #8]
    5b3e:	e9c4 5500 	strd	r5, r5, [r4]
    5b42:	e9c4 5504 	strd	r5, r5, [r4, #16]
    5b46:	61a5      	str	r5, [r4, #24]
    5b48:	f000 fa2a 	bl	5fa0 <memset>
    5b4c:	4b22      	ldr	r3, [pc, #136]	; (5bd8 <global_stdio_init.part.0+0xc4>)
    5b4e:	6763      	str	r3, [r4, #116]	; 0x74
    5b50:	2208      	movs	r2, #8
    5b52:	4629      	mov	r1, r5
    5b54:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    5b58:	e9c4 4907 	strd	r4, r9, [r4, #28]
    5b5c:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
    5b60:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
    5b64:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
    5b68:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
    5b6c:	6725      	str	r5, [r4, #112]	; 0x70
    5b6e:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    5b72:	62e6      	str	r6, [r4, #44]	; 0x2c
    5b74:	f000 fa14 	bl	5fa0 <memset>
    5b78:	4b18      	ldr	r3, [pc, #96]	; (5bdc <global_stdio_init.part.0+0xc8>)
    5b7a:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    5b7e:	4629      	mov	r1, r5
    5b80:	f104 0368 	add.w	r3, r4, #104	; 0x68
    5b84:	2208      	movs	r2, #8
    5b86:	f504 7096 	add.w	r0, r4, #300	; 0x12c
    5b8a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    5b8e:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
    5b92:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
    5b96:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
    5b9a:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
    5b9e:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    5ba2:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
    5ba6:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    5baa:	f000 f9f9 	bl	5fa0 <memset>
    5bae:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    5bb2:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
    5bb6:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
    5bba:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    5bbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5bc2:	bf00      	nop
    5bc4:	200090a0 	.word	0x200090a0
    5bc8:	200091d8 	.word	0x200091d8
    5bcc:	00005abd 	.word	0x00005abd
    5bd0:	00005d45 	.word	0x00005d45
    5bd4:	00005d65 	.word	0x00005d65
    5bd8:	00010009 	.word	0x00010009
    5bdc:	00020012 	.word	0x00020012
    5be0:	00005cdd 	.word	0x00005cdd
    5be4:	00005d05 	.word	0x00005d05

00005be8 <__sinit>:
    5be8:	b510      	push	{r4, lr}
    5bea:	4604      	mov	r4, r0
    5bec:	480a      	ldr	r0, [pc, #40]	; (5c18 <__sinit+0x30>)
    5bee:	f000 fba1 	bl	6334 <__retarget_lock_acquire_recursive>
    5bf2:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5bf4:	b923      	cbnz	r3, 5c00 <__sinit+0x18>
    5bf6:	4b09      	ldr	r3, [pc, #36]	; (5c1c <__sinit+0x34>)
    5bf8:	4a09      	ldr	r2, [pc, #36]	; (5c20 <__sinit+0x38>)
    5bfa:	681b      	ldr	r3, [r3, #0]
    5bfc:	6362      	str	r2, [r4, #52]	; 0x34
    5bfe:	b123      	cbz	r3, 5c0a <__sinit+0x22>
    5c00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5c04:	4804      	ldr	r0, [pc, #16]	; (5c18 <__sinit+0x30>)
    5c06:	f000 bb97 	b.w	6338 <__retarget_lock_release_recursive>
    5c0a:	f7ff ff83 	bl	5b14 <global_stdio_init.part.0>
    5c0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5c12:	4801      	ldr	r0, [pc, #4]	; (5c18 <__sinit+0x30>)
    5c14:	f000 bb90 	b.w	6338 <__retarget_lock_release_recursive>
    5c18:	20009068 	.word	0x20009068
    5c1c:	200091d8 	.word	0x200091d8
    5c20:	00005ad5 	.word	0x00005ad5

00005c24 <__sfp_lock_acquire>:
    5c24:	4801      	ldr	r0, [pc, #4]	; (5c2c <__sfp_lock_acquire+0x8>)
    5c26:	f000 bb85 	b.w	6334 <__retarget_lock_acquire_recursive>
    5c2a:	bf00      	nop
    5c2c:	20009068 	.word	0x20009068

00005c30 <__sfp_lock_release>:
    5c30:	4801      	ldr	r0, [pc, #4]	; (5c38 <__sfp_lock_release+0x8>)
    5c32:	f000 bb81 	b.w	6338 <__retarget_lock_release_recursive>
    5c36:	bf00      	nop
    5c38:	20009068 	.word	0x20009068

00005c3c <_fwalk_sglue>:
    5c3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5c40:	4680      	mov	r8, r0
    5c42:	460f      	mov	r7, r1
    5c44:	4616      	mov	r6, r2
    5c46:	f04f 0900 	mov.w	r9, #0
    5c4a:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
    5c4e:	3d01      	subs	r5, #1
    5c50:	d411      	bmi.n	5c76 <_fwalk_sglue+0x3a>
    5c52:	89a3      	ldrh	r3, [r4, #12]
    5c54:	2b01      	cmp	r3, #1
    5c56:	f105 35ff 	add.w	r5, r5, #4294967295
    5c5a:	d908      	bls.n	5c6e <_fwalk_sglue+0x32>
    5c5c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    5c60:	3301      	adds	r3, #1
    5c62:	4621      	mov	r1, r4
    5c64:	d003      	beq.n	5c6e <_fwalk_sglue+0x32>
    5c66:	4640      	mov	r0, r8
    5c68:	47b8      	blx	r7
    5c6a:	ea49 0900 	orr.w	r9, r9, r0
    5c6e:	1c6b      	adds	r3, r5, #1
    5c70:	f104 0468 	add.w	r4, r4, #104	; 0x68
    5c74:	d1ed      	bne.n	5c52 <_fwalk_sglue+0x16>
    5c76:	6836      	ldr	r6, [r6, #0]
    5c78:	2e00      	cmp	r6, #0
    5c7a:	d1e6      	bne.n	5c4a <_fwalk_sglue+0xe>
    5c7c:	4648      	mov	r0, r9
    5c7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5c82:	bf00      	nop

00005c84 <sscanf>:
    5c84:	b40e      	push	{r1, r2, r3}
    5c86:	b510      	push	{r4, lr}
    5c88:	b09f      	sub	sp, #124	; 0x7c
    5c8a:	ac21      	add	r4, sp, #132	; 0x84
    5c8c:	f44f 7101 	mov.w	r1, #516	; 0x204
    5c90:	f854 2b04 	ldr.w	r2, [r4], #4
    5c94:	9201      	str	r2, [sp, #4]
    5c96:	f8ad 101c 	strh.w	r1, [sp, #28]
    5c9a:	9004      	str	r0, [sp, #16]
    5c9c:	9008      	str	r0, [sp, #32]
    5c9e:	f000 fd2f 	bl	6700 <strlen>
    5ca2:	9005      	str	r0, [sp, #20]
    5ca4:	9009      	str	r0, [sp, #36]	; 0x24
    5ca6:	480b      	ldr	r0, [pc, #44]	; (5cd4 <sscanf+0x50>)
    5ca8:	490b      	ldr	r1, [pc, #44]	; (5cd8 <sscanf+0x54>)
    5caa:	910c      	str	r1, [sp, #48]	; 0x30
    5cac:	2300      	movs	r3, #0
    5cae:	f64f 7cff 	movw	ip, #65535	; 0xffff
    5cb2:	9310      	str	r3, [sp, #64]	; 0x40
    5cb4:	9315      	str	r3, [sp, #84]	; 0x54
    5cb6:	9a01      	ldr	r2, [sp, #4]
    5cb8:	6800      	ldr	r0, [r0, #0]
    5cba:	f8ad c01e 	strh.w	ip, [sp, #30]
    5cbe:	4623      	mov	r3, r4
    5cc0:	a904      	add	r1, sp, #16
    5cc2:	9403      	str	r4, [sp, #12]
    5cc4:	f003 fe46 	bl	9954 <__ssvfscanf_r>
    5cc8:	b01f      	add	sp, #124	; 0x7c
    5cca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5cce:	b003      	add	sp, #12
    5cd0:	4770      	bx	lr
    5cd2:	bf00      	nop
    5cd4:	200081c0 	.word	0x200081c0
    5cd8:	00005d01 	.word	0x00005d01

00005cdc <__sread>:
    5cdc:	b510      	push	{r4, lr}
    5cde:	460c      	mov	r4, r1
    5ce0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    5ce4:	f000 faba 	bl	625c <_read_r>
    5ce8:	2800      	cmp	r0, #0
    5cea:	db03      	blt.n	5cf4 <__sread+0x18>
    5cec:	6d23      	ldr	r3, [r4, #80]	; 0x50
    5cee:	4403      	add	r3, r0
    5cf0:	6523      	str	r3, [r4, #80]	; 0x50
    5cf2:	bd10      	pop	{r4, pc}
    5cf4:	89a3      	ldrh	r3, [r4, #12]
    5cf6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    5cfa:	81a3      	strh	r3, [r4, #12]
    5cfc:	bd10      	pop	{r4, pc}
    5cfe:	bf00      	nop

00005d00 <__seofread>:
    5d00:	2000      	movs	r0, #0
    5d02:	4770      	bx	lr

00005d04 <__swrite>:
    5d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5d08:	460c      	mov	r4, r1
    5d0a:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
    5d0e:	461f      	mov	r7, r3
    5d10:	05cb      	lsls	r3, r1, #23
    5d12:	4605      	mov	r5, r0
    5d14:	4616      	mov	r6, r2
    5d16:	d40b      	bmi.n	5d30 <__swrite+0x2c>
    5d18:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
    5d1c:	81a1      	strh	r1, [r4, #12]
    5d1e:	463b      	mov	r3, r7
    5d20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    5d24:	4632      	mov	r2, r6
    5d26:	4628      	mov	r0, r5
    5d28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5d2c:	f000 babe 	b.w	62ac <_write_r>
    5d30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    5d34:	2302      	movs	r3, #2
    5d36:	2200      	movs	r2, #0
    5d38:	f000 fa7a 	bl	6230 <_lseek_r>
    5d3c:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
    5d40:	e7ea      	b.n	5d18 <__swrite+0x14>
    5d42:	bf00      	nop

00005d44 <__sseek>:
    5d44:	b510      	push	{r4, lr}
    5d46:	460c      	mov	r4, r1
    5d48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    5d4c:	f000 fa70 	bl	6230 <_lseek_r>
    5d50:	89a3      	ldrh	r3, [r4, #12]
    5d52:	1c42      	adds	r2, r0, #1
    5d54:	bf0e      	itee	eq
    5d56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    5d5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    5d5e:	6520      	strne	r0, [r4, #80]	; 0x50
    5d60:	81a3      	strh	r3, [r4, #12]
    5d62:	bd10      	pop	{r4, pc}

00005d64 <__sclose>:
    5d64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    5d68:	f000 ba50 	b.w	620c <_close_r>

00005d6c <_vdprintf_r>:
    5d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5d6e:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
    5d72:	af04      	add	r7, sp, #16
    5d74:	9300      	str	r3, [sp, #0]
    5d76:	4613      	mov	r3, r2
    5d78:	f44f 7200 	mov.w	r2, #512	; 0x200
    5d7c:	460e      	mov	r6, r1
    5d7e:	9203      	str	r2, [sp, #12]
    5d80:	4639      	mov	r1, r7
    5d82:	aa03      	add	r2, sp, #12
    5d84:	4605      	mov	r5, r0
    5d86:	f000 f85d 	bl	5e44 <_vasnprintf_r>
    5d8a:	b188      	cbz	r0, 5db0 <_vdprintf_r+0x44>
    5d8c:	4604      	mov	r4, r0
    5d8e:	4602      	mov	r2, r0
    5d90:	9b03      	ldr	r3, [sp, #12]
    5d92:	4631      	mov	r1, r6
    5d94:	4628      	mov	r0, r5
    5d96:	f000 fa89 	bl	62ac <_write_r>
    5d9a:	42bc      	cmp	r4, r7
    5d9c:	9003      	str	r0, [sp, #12]
    5d9e:	d004      	beq.n	5daa <_vdprintf_r+0x3e>
    5da0:	4628      	mov	r0, r5
    5da2:	4621      	mov	r1, r4
    5da4:	f000 fdbe 	bl	6924 <_free_r>
    5da8:	9803      	ldr	r0, [sp, #12]
    5daa:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
    5dae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5db0:	f04f 30ff 	mov.w	r0, #4294967295
    5db4:	e7f9      	b.n	5daa <_vdprintf_r+0x3e>
    5db6:	bf00      	nop

00005db8 <vdprintf>:
    5db8:	b410      	push	{r4}
    5dba:	4c05      	ldr	r4, [pc, #20]	; (5dd0 <vdprintf+0x18>)
    5dbc:	4684      	mov	ip, r0
    5dbe:	4613      	mov	r3, r2
    5dc0:	6820      	ldr	r0, [r4, #0]
    5dc2:	f85d 4b04 	ldr.w	r4, [sp], #4
    5dc6:	460a      	mov	r2, r1
    5dc8:	4661      	mov	r1, ip
    5dca:	f7ff bfcf 	b.w	5d6c <_vdprintf_r>
    5dce:	bf00      	nop
    5dd0:	200081c0 	.word	0x200081c0

00005dd4 <vsnprintf>:
    5dd4:	b510      	push	{r4, lr}
    5dd6:	4c1a      	ldr	r4, [pc, #104]	; (5e40 <vsnprintf+0x6c>)
    5dd8:	2900      	cmp	r1, #0
    5dda:	6824      	ldr	r4, [r4, #0]
    5ddc:	b09a      	sub	sp, #104	; 0x68
    5dde:	db2a      	blt.n	5e36 <vsnprintf+0x62>
    5de0:	9000      	str	r0, [sp, #0]
    5de2:	9004      	str	r0, [sp, #16]
    5de4:	f44f 7002 	mov.w	r0, #520	; 0x208
    5de8:	f8ad 000c 	strh.w	r0, [sp, #12]
    5dec:	d013      	beq.n	5e16 <vsnprintf+0x42>
    5dee:	3901      	subs	r1, #1
    5df0:	f64f 70ff 	movw	r0, #65535	; 0xffff
    5df4:	9102      	str	r1, [sp, #8]
    5df6:	9105      	str	r1, [sp, #20]
    5df8:	f8ad 000e 	strh.w	r0, [sp, #14]
    5dfc:	4669      	mov	r1, sp
    5dfe:	4620      	mov	r0, r4
    5e00:	f002 f806 	bl	7e10 <_svfprintf_r>
    5e04:	1c42      	adds	r2, r0, #1
    5e06:	da01      	bge.n	5e0c <vsnprintf+0x38>
    5e08:	238b      	movs	r3, #139	; 0x8b
    5e0a:	6023      	str	r3, [r4, #0]
    5e0c:	9b00      	ldr	r3, [sp, #0]
    5e0e:	2200      	movs	r2, #0
    5e10:	701a      	strb	r2, [r3, #0]
    5e12:	b01a      	add	sp, #104	; 0x68
    5e14:	bd10      	pop	{r4, pc}
    5e16:	f64f 70ff 	movw	r0, #65535	; 0xffff
    5e1a:	9102      	str	r1, [sp, #8]
    5e1c:	9105      	str	r1, [sp, #20]
    5e1e:	f8ad 000e 	strh.w	r0, [sp, #14]
    5e22:	4669      	mov	r1, sp
    5e24:	4620      	mov	r0, r4
    5e26:	f001 fff3 	bl	7e10 <_svfprintf_r>
    5e2a:	1c43      	adds	r3, r0, #1
    5e2c:	da01      	bge.n	5e32 <vsnprintf+0x5e>
    5e2e:	238b      	movs	r3, #139	; 0x8b
    5e30:	6023      	str	r3, [r4, #0]
    5e32:	b01a      	add	sp, #104	; 0x68
    5e34:	bd10      	pop	{r4, pc}
    5e36:	238b      	movs	r3, #139	; 0x8b
    5e38:	6023      	str	r3, [r4, #0]
    5e3a:	f04f 30ff 	mov.w	r0, #4294967295
    5e3e:	e7f8      	b.n	5e32 <vsnprintf+0x5e>
    5e40:	200081c0 	.word	0x200081c0

00005e44 <_vasnprintf_r>:
    5e44:	b530      	push	{r4, r5, lr}
    5e46:	6814      	ldr	r4, [r2, #0]
    5e48:	4615      	mov	r5, r2
    5e4a:	b09b      	sub	sp, #108	; 0x6c
    5e4c:	461a      	mov	r2, r3
    5e4e:	b109      	cbz	r1, 5e54 <_vasnprintf_r+0x10>
    5e50:	2c00      	cmp	r4, #0
    5e52:	d119      	bne.n	5e88 <_vasnprintf_r+0x44>
    5e54:	2100      	movs	r1, #0
    5e56:	f44f 7322 	mov.w	r3, #648	; 0x288
    5e5a:	f8ad 300c 	strh.w	r3, [sp, #12]
    5e5e:	9100      	str	r1, [sp, #0]
    5e60:	9104      	str	r1, [sp, #16]
    5e62:	f64f 73ff 	movw	r3, #65535	; 0xffff
    5e66:	9102      	str	r1, [sp, #8]
    5e68:	9105      	str	r1, [sp, #20]
    5e6a:	f8ad 300e 	strh.w	r3, [sp, #14]
    5e6e:	4669      	mov	r1, sp
    5e70:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    5e72:	f001 ffcd 	bl	7e10 <_svfprintf_r>
    5e76:	2800      	cmp	r0, #0
    5e78:	db13      	blt.n	5ea2 <_vasnprintf_r+0x5e>
    5e7a:	9b00      	ldr	r3, [sp, #0]
    5e7c:	6028      	str	r0, [r5, #0]
    5e7e:	2200      	movs	r2, #0
    5e80:	701a      	strb	r2, [r3, #0]
    5e82:	9804      	ldr	r0, [sp, #16]
    5e84:	b01b      	add	sp, #108	; 0x6c
    5e86:	bd30      	pop	{r4, r5, pc}
    5e88:	f44f 63c1 	mov.w	r3, #1544	; 0x608
    5e8c:	9100      	str	r1, [sp, #0]
    5e8e:	9104      	str	r1, [sp, #16]
    5e90:	f8ad 300c 	strh.w	r3, [sp, #12]
    5e94:	4621      	mov	r1, r4
    5e96:	dae4      	bge.n	5e62 <_vasnprintf_r+0x1e>
    5e98:	238b      	movs	r3, #139	; 0x8b
    5e9a:	6003      	str	r3, [r0, #0]
    5e9c:	2000      	movs	r0, #0
    5e9e:	b01b      	add	sp, #108	; 0x6c
    5ea0:	bd30      	pop	{r4, r5, pc}
    5ea2:	2000      	movs	r0, #0
    5ea4:	e7ee      	b.n	5e84 <_vasnprintf_r+0x40>
    5ea6:	bf00      	nop

00005ea8 <memmove>:
    5ea8:	4288      	cmp	r0, r1
    5eaa:	d90d      	bls.n	5ec8 <memmove+0x20>
    5eac:	188b      	adds	r3, r1, r2
    5eae:	4283      	cmp	r3, r0
    5eb0:	d90a      	bls.n	5ec8 <memmove+0x20>
    5eb2:	eb00 0c02 	add.w	ip, r0, r2
    5eb6:	b1ba      	cbz	r2, 5ee8 <memmove+0x40>
    5eb8:	4662      	mov	r2, ip
    5eba:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
    5ebe:	f802 cd01 	strb.w	ip, [r2, #-1]!
    5ec2:	4299      	cmp	r1, r3
    5ec4:	d1f9      	bne.n	5eba <memmove+0x12>
    5ec6:	4770      	bx	lr
    5ec8:	2a0f      	cmp	r2, #15
    5eca:	d80e      	bhi.n	5eea <memmove+0x42>
    5ecc:	4603      	mov	r3, r0
    5ece:	f102 3cff 	add.w	ip, r2, #4294967295
    5ed2:	b14a      	cbz	r2, 5ee8 <memmove+0x40>
    5ed4:	f10c 0c01 	add.w	ip, ip, #1
    5ed8:	3b01      	subs	r3, #1
    5eda:	448c      	add	ip, r1
    5edc:	f811 2b01 	ldrb.w	r2, [r1], #1
    5ee0:	f803 2f01 	strb.w	r2, [r3, #1]!
    5ee4:	4561      	cmp	r1, ip
    5ee6:	d1f9      	bne.n	5edc <memmove+0x34>
    5ee8:	4770      	bx	lr
    5eea:	ea40 0301 	orr.w	r3, r0, r1
    5eee:	079b      	lsls	r3, r3, #30
    5ef0:	d150      	bne.n	5f94 <memmove+0xec>
    5ef2:	f1a2 0310 	sub.w	r3, r2, #16
    5ef6:	b570      	push	{r4, r5, r6, lr}
    5ef8:	f101 0c20 	add.w	ip, r1, #32
    5efc:	f023 050f 	bic.w	r5, r3, #15
    5f00:	f101 0e10 	add.w	lr, r1, #16
    5f04:	f100 0410 	add.w	r4, r0, #16
    5f08:	44ac      	add	ip, r5
    5f0a:	091b      	lsrs	r3, r3, #4
    5f0c:	f85e 5c10 	ldr.w	r5, [lr, #-16]
    5f10:	f844 5c10 	str.w	r5, [r4, #-16]
    5f14:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
    5f18:	f844 5c0c 	str.w	r5, [r4, #-12]
    5f1c:	f85e 5c08 	ldr.w	r5, [lr, #-8]
    5f20:	f844 5c08 	str.w	r5, [r4, #-8]
    5f24:	f85e 5c04 	ldr.w	r5, [lr, #-4]
    5f28:	f844 5c04 	str.w	r5, [r4, #-4]
    5f2c:	f10e 0e10 	add.w	lr, lr, #16
    5f30:	45e6      	cmp	lr, ip
    5f32:	f104 0410 	add.w	r4, r4, #16
    5f36:	d1e9      	bne.n	5f0c <memmove+0x64>
    5f38:	3301      	adds	r3, #1
    5f3a:	f012 0f0c 	tst.w	r2, #12
    5f3e:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    5f42:	f002 040f 	and.w	r4, r2, #15
    5f46:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    5f4a:	d027      	beq.n	5f9c <memmove+0xf4>
    5f4c:	3c04      	subs	r4, #4
    5f4e:	f024 0603 	bic.w	r6, r4, #3
    5f52:	ea4f 0c94 	mov.w	ip, r4, lsr #2
    5f56:	441e      	add	r6, r3
    5f58:	1f1c      	subs	r4, r3, #4
    5f5a:	468e      	mov	lr, r1
    5f5c:	f85e 5b04 	ldr.w	r5, [lr], #4
    5f60:	f844 5f04 	str.w	r5, [r4, #4]!
    5f64:	42b4      	cmp	r4, r6
    5f66:	d1f9      	bne.n	5f5c <memmove+0xb4>
    5f68:	f10c 0401 	add.w	r4, ip, #1
    5f6c:	f002 0203 	and.w	r2, r2, #3
    5f70:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    5f74:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    5f78:	f102 3cff 	add.w	ip, r2, #4294967295
    5f7c:	b14a      	cbz	r2, 5f92 <memmove+0xea>
    5f7e:	f10c 0c01 	add.w	ip, ip, #1
    5f82:	3b01      	subs	r3, #1
    5f84:	448c      	add	ip, r1
    5f86:	f811 2b01 	ldrb.w	r2, [r1], #1
    5f8a:	f803 2f01 	strb.w	r2, [r3, #1]!
    5f8e:	4561      	cmp	r1, ip
    5f90:	d1f9      	bne.n	5f86 <memmove+0xde>
    5f92:	bd70      	pop	{r4, r5, r6, pc}
    5f94:	f102 3cff 	add.w	ip, r2, #4294967295
    5f98:	4603      	mov	r3, r0
    5f9a:	e79b      	b.n	5ed4 <memmove+0x2c>
    5f9c:	4622      	mov	r2, r4
    5f9e:	e7eb      	b.n	5f78 <memmove+0xd0>

00005fa0 <memset>:
    5fa0:	0783      	lsls	r3, r0, #30
    5fa2:	b530      	push	{r4, r5, lr}
    5fa4:	d048      	beq.n	6038 <memset+0x98>
    5fa6:	1e54      	subs	r4, r2, #1
    5fa8:	2a00      	cmp	r2, #0
    5faa:	d03f      	beq.n	602c <memset+0x8c>
    5fac:	b2ca      	uxtb	r2, r1
    5fae:	4603      	mov	r3, r0
    5fb0:	e001      	b.n	5fb6 <memset+0x16>
    5fb2:	3c01      	subs	r4, #1
    5fb4:	d33a      	bcc.n	602c <memset+0x8c>
    5fb6:	f803 2b01 	strb.w	r2, [r3], #1
    5fba:	079d      	lsls	r5, r3, #30
    5fbc:	d1f9      	bne.n	5fb2 <memset+0x12>
    5fbe:	2c03      	cmp	r4, #3
    5fc0:	d92d      	bls.n	601e <memset+0x7e>
    5fc2:	b2cd      	uxtb	r5, r1
    5fc4:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    5fc8:	2c0f      	cmp	r4, #15
    5fca:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    5fce:	d936      	bls.n	603e <memset+0x9e>
    5fd0:	f1a4 0210 	sub.w	r2, r4, #16
    5fd4:	f022 0c0f 	bic.w	ip, r2, #15
    5fd8:	f103 0e20 	add.w	lr, r3, #32
    5fdc:	44e6      	add	lr, ip
    5fde:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    5fe2:	f103 0210 	add.w	r2, r3, #16
    5fe6:	e942 5504 	strd	r5, r5, [r2, #-16]
    5fea:	e942 5502 	strd	r5, r5, [r2, #-8]
    5fee:	3210      	adds	r2, #16
    5ff0:	4572      	cmp	r2, lr
    5ff2:	d1f8      	bne.n	5fe6 <memset+0x46>
    5ff4:	f10c 0201 	add.w	r2, ip, #1
    5ff8:	f014 0f0c 	tst.w	r4, #12
    5ffc:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    6000:	f004 0c0f 	and.w	ip, r4, #15
    6004:	d013      	beq.n	602e <memset+0x8e>
    6006:	f1ac 0304 	sub.w	r3, ip, #4
    600a:	f023 0303 	bic.w	r3, r3, #3
    600e:	3304      	adds	r3, #4
    6010:	4413      	add	r3, r2
    6012:	f842 5b04 	str.w	r5, [r2], #4
    6016:	4293      	cmp	r3, r2
    6018:	d1fb      	bne.n	6012 <memset+0x72>
    601a:	f00c 0403 	and.w	r4, ip, #3
    601e:	b12c      	cbz	r4, 602c <memset+0x8c>
    6020:	b2c9      	uxtb	r1, r1
    6022:	441c      	add	r4, r3
    6024:	f803 1b01 	strb.w	r1, [r3], #1
    6028:	429c      	cmp	r4, r3
    602a:	d1fb      	bne.n	6024 <memset+0x84>
    602c:	bd30      	pop	{r4, r5, pc}
    602e:	4664      	mov	r4, ip
    6030:	4613      	mov	r3, r2
    6032:	2c00      	cmp	r4, #0
    6034:	d1f4      	bne.n	6020 <memset+0x80>
    6036:	e7f9      	b.n	602c <memset+0x8c>
    6038:	4603      	mov	r3, r0
    603a:	4614      	mov	r4, r2
    603c:	e7bf      	b.n	5fbe <memset+0x1e>
    603e:	461a      	mov	r2, r3
    6040:	46a4      	mov	ip, r4
    6042:	e7e0      	b.n	6006 <memset+0x66>

00006044 <strchr>:
    6044:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    6048:	4603      	mov	r3, r0
    604a:	d044      	beq.n	60d6 <strchr+0x92>
    604c:	0782      	lsls	r2, r0, #30
    604e:	d132      	bne.n	60b6 <strchr+0x72>
    6050:	b510      	push	{r4, lr}
    6052:	6804      	ldr	r4, [r0, #0]
    6054:	ea41 2e01 	orr.w	lr, r1, r1, lsl #8
    6058:	ea4e 4e0e 	orr.w	lr, lr, lr, lsl #16
    605c:	ea8e 0204 	eor.w	r2, lr, r4
    6060:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
    6064:	ea23 0302 	bic.w	r3, r3, r2
    6068:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    606c:	ea22 0204 	bic.w	r2, r2, r4
    6070:	4313      	orrs	r3, r2
    6072:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    6076:	d10f      	bne.n	6098 <strchr+0x54>
    6078:	f850 4f04 	ldr.w	r4, [r0, #4]!
    607c:	ea84 0c0e 	eor.w	ip, r4, lr
    6080:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
    6084:	f1ac 3201 	sub.w	r2, ip, #16843009	; 0x1010101
    6088:	ea23 0304 	bic.w	r3, r3, r4
    608c:	ea22 020c 	bic.w	r2, r2, ip
    6090:	4313      	orrs	r3, r2
    6092:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    6096:	d0ef      	beq.n	6078 <strchr+0x34>
    6098:	7803      	ldrb	r3, [r0, #0]
    609a:	b923      	cbnz	r3, 60a6 <strchr+0x62>
    609c:	e036      	b.n	610c <strchr+0xc8>
    609e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    60a2:	2b00      	cmp	r3, #0
    60a4:	d032      	beq.n	610c <strchr+0xc8>
    60a6:	4299      	cmp	r1, r3
    60a8:	d1f9      	bne.n	609e <strchr+0x5a>
    60aa:	bd10      	pop	{r4, pc}
    60ac:	428a      	cmp	r2, r1
    60ae:	d011      	beq.n	60d4 <strchr+0x90>
    60b0:	079a      	lsls	r2, r3, #30
    60b2:	4618      	mov	r0, r3
    60b4:	d0cc      	beq.n	6050 <strchr+0xc>
    60b6:	4618      	mov	r0, r3
    60b8:	f813 2b01 	ldrb.w	r2, [r3], #1
    60bc:	2a00      	cmp	r2, #0
    60be:	d1f5      	bne.n	60ac <strchr+0x68>
    60c0:	4610      	mov	r0, r2
    60c2:	4770      	bx	lr
    60c4:	0799      	lsls	r1, r3, #30
    60c6:	4618      	mov	r0, r3
    60c8:	d007      	beq.n	60da <strchr+0x96>
    60ca:	4618      	mov	r0, r3
    60cc:	3301      	adds	r3, #1
    60ce:	7802      	ldrb	r2, [r0, #0]
    60d0:	2a00      	cmp	r2, #0
    60d2:	d1f7      	bne.n	60c4 <strchr+0x80>
    60d4:	4770      	bx	lr
    60d6:	0782      	lsls	r2, r0, #30
    60d8:	d1f7      	bne.n	60ca <strchr+0x86>
    60da:	6802      	ldr	r2, [r0, #0]
    60dc:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
    60e0:	ea23 0302 	bic.w	r3, r3, r2
    60e4:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    60e8:	d108      	bne.n	60fc <strchr+0xb8>
    60ea:	f850 2f04 	ldr.w	r2, [r0, #4]!
    60ee:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
    60f2:	ea23 0302 	bic.w	r3, r3, r2
    60f6:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    60fa:	d0f6      	beq.n	60ea <strchr+0xa6>
    60fc:	7803      	ldrb	r3, [r0, #0]
    60fe:	2b00      	cmp	r3, #0
    6100:	d0e8      	beq.n	60d4 <strchr+0x90>
    6102:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    6106:	2b00      	cmp	r3, #0
    6108:	d1fb      	bne.n	6102 <strchr+0xbe>
    610a:	4770      	bx	lr
    610c:	4618      	mov	r0, r3
    610e:	bd10      	pop	{r4, pc}

00006110 <strncmp>:
    6110:	2a00      	cmp	r2, #0
    6112:	d03e      	beq.n	6192 <strncmp+0x82>
    6114:	ea40 0301 	orr.w	r3, r0, r1
    6118:	079b      	lsls	r3, r3, #30
    611a:	b530      	push	{r4, r5, lr}
    611c:	4684      	mov	ip, r0
    611e:	d12f      	bne.n	6180 <strncmp+0x70>
    6120:	2a03      	cmp	r2, #3
    6122:	d92d      	bls.n	6180 <strncmp+0x70>
    6124:	460b      	mov	r3, r1
    6126:	e008      	b.n	613a <strncmp+0x2a>
    6128:	3a04      	subs	r2, #4
    612a:	4684      	mov	ip, r0
    612c:	4619      	mov	r1, r3
    612e:	d025      	beq.n	617c <strncmp+0x6c>
    6130:	f01e 3f80 	tst.w	lr, #2155905152	; 0x80808080
    6134:	d122      	bne.n	617c <strncmp+0x6c>
    6136:	2a03      	cmp	r2, #3
    6138:	d922      	bls.n	6180 <strncmp+0x70>
    613a:	6804      	ldr	r4, [r0, #0]
    613c:	4619      	mov	r1, r3
    613e:	f853 5b04 	ldr.w	r5, [r3], #4
    6142:	f1a4 3e01 	sub.w	lr, r4, #16843009	; 0x1010101
    6146:	42ac      	cmp	r4, r5
    6148:	4684      	mov	ip, r0
    614a:	ea2e 0e04 	bic.w	lr, lr, r4
    614e:	f100 0004 	add.w	r0, r0, #4
    6152:	d0e9      	beq.n	6128 <strncmp+0x18>
    6154:	f89c 0000 	ldrb.w	r0, [ip]
    6158:	780c      	ldrb	r4, [r1, #0]
    615a:	42a0      	cmp	r0, r4
    615c:	d11b      	bne.n	6196 <strncmp+0x86>
    615e:	46e6      	mov	lr, ip
    6160:	b168      	cbz	r0, 617e <strncmp+0x6e>
    6162:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
    6166:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    616a:	eba2 030e 	sub.w	r3, r2, lr
    616e:	42a0      	cmp	r0, r4
    6170:	f103 33ff 	add.w	r3, r3, #4294967295
    6174:	d10f      	bne.n	6196 <strncmp+0x86>
    6176:	eb1c 0303 	adds.w	r3, ip, r3
    617a:	d1f1      	bne.n	6160 <strncmp+0x50>
    617c:	2000      	movs	r0, #0
    617e:	bd30      	pop	{r4, r5, pc}
    6180:	f89c 0000 	ldrb.w	r0, [ip]
    6184:	780c      	ldrb	r4, [r1, #0]
    6186:	4284      	cmp	r4, r0
    6188:	d105      	bne.n	6196 <strncmp+0x86>
    618a:	2a01      	cmp	r2, #1
    618c:	d0f6      	beq.n	617c <strncmp+0x6c>
    618e:	46e6      	mov	lr, ip
    6190:	e7e6      	b.n	6160 <strncmp+0x50>
    6192:	4610      	mov	r0, r2
    6194:	4770      	bx	lr
    6196:	1b00      	subs	r0, r0, r4
    6198:	bd30      	pop	{r4, r5, pc}
    619a:	bf00      	nop

0000619c <strncpy>:
    619c:	ea40 0301 	orr.w	r3, r0, r1
    61a0:	079b      	lsls	r3, r3, #30
    61a2:	b530      	push	{r4, r5, lr}
    61a4:	d101      	bne.n	61aa <strncpy+0xe>
    61a6:	2a03      	cmp	r2, #3
    61a8:	d80f      	bhi.n	61ca <strncpy+0x2e>
    61aa:	4684      	mov	ip, r0
    61ac:	f101 3eff 	add.w	lr, r1, #4294967295
    61b0:	e007      	b.n	61c2 <strncpy+0x26>
    61b2:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    61b6:	f803 1b01 	strb.w	r1, [r3], #1
    61ba:	1e54      	subs	r4, r2, #1
    61bc:	b1c1      	cbz	r1, 61f0 <strncpy+0x54>
    61be:	469c      	mov	ip, r3
    61c0:	4622      	mov	r2, r4
    61c2:	4663      	mov	r3, ip
    61c4:	2a00      	cmp	r2, #0
    61c6:	d1f4      	bne.n	61b2 <strncpy+0x16>
    61c8:	bd30      	pop	{r4, r5, pc}
    61ca:	460b      	mov	r3, r1
    61cc:	4684      	mov	ip, r0
    61ce:	4619      	mov	r1, r3
    61d0:	f853 5b04 	ldr.w	r5, [r3], #4
    61d4:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
    61d8:	ea24 0405 	bic.w	r4, r4, r5
    61dc:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    61e0:	d1e4      	bne.n	61ac <strncpy+0x10>
    61e2:	3a04      	subs	r2, #4
    61e4:	2a03      	cmp	r2, #3
    61e6:	f84c 5b04 	str.w	r5, [ip], #4
    61ea:	4619      	mov	r1, r3
    61ec:	d8ef      	bhi.n	61ce <strncpy+0x32>
    61ee:	e7dd      	b.n	61ac <strncpy+0x10>
    61f0:	4494      	add	ip, r2
    61f2:	2c00      	cmp	r4, #0
    61f4:	d0e8      	beq.n	61c8 <strncpy+0x2c>
    61f6:	f803 1b01 	strb.w	r1, [r3], #1
    61fa:	4563      	cmp	r3, ip
    61fc:	d1fb      	bne.n	61f6 <strncpy+0x5a>
    61fe:	bd30      	pop	{r4, r5, pc}

00006200 <__locale_mb_cur_max>:
    6200:	4b01      	ldr	r3, [pc, #4]	; (6208 <__locale_mb_cur_max+0x8>)
    6202:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
    6206:	4770      	bx	lr
    6208:	20007c38 	.word	0x20007c38

0000620c <_close_r>:
    620c:	b538      	push	{r3, r4, r5, lr}
    620e:	4d07      	ldr	r5, [pc, #28]	; (622c <_close_r+0x20>)
    6210:	2200      	movs	r2, #0
    6212:	4604      	mov	r4, r0
    6214:	4608      	mov	r0, r1
    6216:	602a      	str	r2, [r5, #0]
    6218:	f7fc fadc 	bl	27d4 <_close>
    621c:	1c43      	adds	r3, r0, #1
    621e:	d000      	beq.n	6222 <_close_r+0x16>
    6220:	bd38      	pop	{r3, r4, r5, pc}
    6222:	682b      	ldr	r3, [r5, #0]
    6224:	2b00      	cmp	r3, #0
    6226:	d0fb      	beq.n	6220 <_close_r+0x14>
    6228:	6023      	str	r3, [r4, #0]
    622a:	bd38      	pop	{r3, r4, r5, pc}
    622c:	200091f4 	.word	0x200091f4

00006230 <_lseek_r>:
    6230:	b538      	push	{r3, r4, r5, lr}
    6232:	460c      	mov	r4, r1
    6234:	4d08      	ldr	r5, [pc, #32]	; (6258 <_lseek_r+0x28>)
    6236:	4684      	mov	ip, r0
    6238:	4611      	mov	r1, r2
    623a:	4620      	mov	r0, r4
    623c:	461a      	mov	r2, r3
    623e:	2300      	movs	r3, #0
    6240:	602b      	str	r3, [r5, #0]
    6242:	4664      	mov	r4, ip
    6244:	f7fc fad2 	bl	27ec <_lseek>
    6248:	1c43      	adds	r3, r0, #1
    624a:	d000      	beq.n	624e <_lseek_r+0x1e>
    624c:	bd38      	pop	{r3, r4, r5, pc}
    624e:	682b      	ldr	r3, [r5, #0]
    6250:	2b00      	cmp	r3, #0
    6252:	d0fb      	beq.n	624c <_lseek_r+0x1c>
    6254:	6023      	str	r3, [r4, #0]
    6256:	bd38      	pop	{r3, r4, r5, pc}
    6258:	200091f4 	.word	0x200091f4

0000625c <_read_r>:
    625c:	b538      	push	{r3, r4, r5, lr}
    625e:	460c      	mov	r4, r1
    6260:	4d08      	ldr	r5, [pc, #32]	; (6284 <_read_r+0x28>)
    6262:	4684      	mov	ip, r0
    6264:	4611      	mov	r1, r2
    6266:	4620      	mov	r0, r4
    6268:	461a      	mov	r2, r3
    626a:	2300      	movs	r3, #0
    626c:	602b      	str	r3, [r5, #0]
    626e:	4664      	mov	r4, ip
    6270:	f7fc faae 	bl	27d0 <_read>
    6274:	1c43      	adds	r3, r0, #1
    6276:	d000      	beq.n	627a <_read_r+0x1e>
    6278:	bd38      	pop	{r3, r4, r5, pc}
    627a:	682b      	ldr	r3, [r5, #0]
    627c:	2b00      	cmp	r3, #0
    627e:	d0fb      	beq.n	6278 <_read_r+0x1c>
    6280:	6023      	str	r3, [r4, #0]
    6282:	bd38      	pop	{r3, r4, r5, pc}
    6284:	200091f4 	.word	0x200091f4

00006288 <_sbrk_r>:
    6288:	b538      	push	{r3, r4, r5, lr}
    628a:	4d07      	ldr	r5, [pc, #28]	; (62a8 <_sbrk_r+0x20>)
    628c:	2200      	movs	r2, #0
    628e:	4604      	mov	r4, r0
    6290:	4608      	mov	r0, r1
    6292:	602a      	str	r2, [r5, #0]
    6294:	f7fc fa82 	bl	279c <_sbrk>
    6298:	1c43      	adds	r3, r0, #1
    629a:	d000      	beq.n	629e <_sbrk_r+0x16>
    629c:	bd38      	pop	{r3, r4, r5, pc}
    629e:	682b      	ldr	r3, [r5, #0]
    62a0:	2b00      	cmp	r3, #0
    62a2:	d0fb      	beq.n	629c <_sbrk_r+0x14>
    62a4:	6023      	str	r3, [r4, #0]
    62a6:	bd38      	pop	{r3, r4, r5, pc}
    62a8:	200091f4 	.word	0x200091f4

000062ac <_write_r>:
    62ac:	b538      	push	{r3, r4, r5, lr}
    62ae:	460c      	mov	r4, r1
    62b0:	4d08      	ldr	r5, [pc, #32]	; (62d4 <_write_r+0x28>)
    62b2:	4684      	mov	ip, r0
    62b4:	4611      	mov	r1, r2
    62b6:	4620      	mov	r0, r4
    62b8:	461a      	mov	r2, r3
    62ba:	2300      	movs	r3, #0
    62bc:	602b      	str	r3, [r5, #0]
    62be:	4664      	mov	r4, ip
    62c0:	f7fb fb16 	bl	18f0 <_write>
    62c4:	1c43      	adds	r3, r0, #1
    62c6:	d000      	beq.n	62ca <_write_r+0x1e>
    62c8:	bd38      	pop	{r3, r4, r5, pc}
    62ca:	682b      	ldr	r3, [r5, #0]
    62cc:	2b00      	cmp	r3, #0
    62ce:	d0fb      	beq.n	62c8 <_write_r+0x1c>
    62d0:	6023      	str	r3, [r4, #0]
    62d2:	bd38      	pop	{r3, r4, r5, pc}
    62d4:	200091f4 	.word	0x200091f4

000062d8 <__errno>:
    62d8:	4b01      	ldr	r3, [pc, #4]	; (62e0 <__errno+0x8>)
    62da:	6818      	ldr	r0, [r3, #0]
    62dc:	4770      	bx	lr
    62de:	bf00      	nop
    62e0:	200081c0 	.word	0x200081c0

000062e4 <__libc_init_array>:
    62e4:	b570      	push	{r4, r5, r6, lr}
    62e6:	4e0d      	ldr	r6, [pc, #52]	; (631c <__libc_init_array+0x38>)
    62e8:	4d0d      	ldr	r5, [pc, #52]	; (6320 <__libc_init_array+0x3c>)
    62ea:	1b76      	subs	r6, r6, r5
    62ec:	10b6      	asrs	r6, r6, #2
    62ee:	d006      	beq.n	62fe <__libc_init_array+0x1a>
    62f0:	2400      	movs	r4, #0
    62f2:	f855 3b04 	ldr.w	r3, [r5], #4
    62f6:	3401      	adds	r4, #1
    62f8:	4798      	blx	r3
    62fa:	42a6      	cmp	r6, r4
    62fc:	d1f9      	bne.n	62f2 <__libc_init_array+0xe>
    62fe:	4e09      	ldr	r6, [pc, #36]	; (6324 <__libc_init_array+0x40>)
    6300:	4d09      	ldr	r5, [pc, #36]	; (6328 <__libc_init_array+0x44>)
    6302:	1b76      	subs	r6, r6, r5
    6304:	f008 fc50 	bl	eba8 <___init_veneer>
    6308:	10b6      	asrs	r6, r6, #2
    630a:	d006      	beq.n	631a <__libc_init_array+0x36>
    630c:	2400      	movs	r4, #0
    630e:	f855 3b04 	ldr.w	r3, [r5], #4
    6312:	3401      	adds	r4, #1
    6314:	4798      	blx	r3
    6316:	42a6      	cmp	r6, r4
    6318:	d1f9      	bne.n	630e <__libc_init_array+0x2a>
    631a:	bd70      	pop	{r4, r5, r6, pc}
    631c:	60001e80 	.word	0x60001e80
    6320:	60001e80 	.word	0x60001e80
    6324:	60001e84 	.word	0x60001e84
    6328:	60001e80 	.word	0x60001e80

0000632c <__retarget_lock_init_recursive>:
    632c:	4770      	bx	lr
    632e:	bf00      	nop

00006330 <__retarget_lock_close_recursive>:
    6330:	4770      	bx	lr
    6332:	bf00      	nop

00006334 <__retarget_lock_acquire_recursive>:
    6334:	4770      	bx	lr
    6336:	bf00      	nop

00006338 <__retarget_lock_release_recursive>:
    6338:	4770      	bx	lr
    633a:	bf00      	nop
    633c:	0000      	movs	r0, r0
    633e:	0000      	movs	r0, r0
    6340:	eba2 0003 	sub.w	r0, r2, r3
    6344:	4770      	bx	lr
    6346:	bf00      	nop

00006348 <strcmp>:
    6348:	7802      	ldrb	r2, [r0, #0]
    634a:	780b      	ldrb	r3, [r1, #0]
    634c:	2a01      	cmp	r2, #1
    634e:	bf28      	it	cs
    6350:	429a      	cmpcs	r2, r3
    6352:	d1f5      	bne.n	6340 <__retarget_lock_release_recursive+0x8>
    6354:	e96d 4504 	strd	r4, r5, [sp, #-16]!
    6358:	ea40 0401 	orr.w	r4, r0, r1
    635c:	e9cd 6702 	strd	r6, r7, [sp, #8]
    6360:	f06f 0c00 	mvn.w	ip, #0
    6364:	ea4f 7244 	mov.w	r2, r4, lsl #29
    6368:	b312      	cbz	r2, 63b0 <strcmp+0x68>
    636a:	ea80 0401 	eor.w	r4, r0, r1
    636e:	f014 0f07 	tst.w	r4, #7
    6372:	d16a      	bne.n	644a <strcmp+0x102>
    6374:	f000 0407 	and.w	r4, r0, #7
    6378:	f020 0007 	bic.w	r0, r0, #7
    637c:	f004 0503 	and.w	r5, r4, #3
    6380:	f021 0107 	bic.w	r1, r1, #7
    6384:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    6388:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    638c:	f014 0f04 	tst.w	r4, #4
    6390:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    6394:	fa0c f405 	lsl.w	r4, ip, r5
    6398:	ea62 0204 	orn	r2, r2, r4
    639c:	ea66 0604 	orn	r6, r6, r4
    63a0:	d00a      	beq.n	63b8 <strcmp+0x70>
    63a2:	ea63 0304 	orn	r3, r3, r4
    63a6:	4662      	mov	r2, ip
    63a8:	ea67 0704 	orn	r7, r7, r4
    63ac:	4666      	mov	r6, ip
    63ae:	e003      	b.n	63b8 <strcmp+0x70>
    63b0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    63b4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    63b8:	fa82 f54c 	uadd8	r5, r2, ip
    63bc:	ea82 0406 	eor.w	r4, r2, r6
    63c0:	faa4 f48c 	sel	r4, r4, ip
    63c4:	bb6c      	cbnz	r4, 6422 <strcmp+0xda>
    63c6:	fa83 f54c 	uadd8	r5, r3, ip
    63ca:	ea83 0507 	eor.w	r5, r3, r7
    63ce:	faa5 f58c 	sel	r5, r5, ip
    63d2:	b995      	cbnz	r5, 63fa <strcmp+0xb2>
    63d4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
    63d8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
    63dc:	fa82 f54c 	uadd8	r5, r2, ip
    63e0:	ea82 0406 	eor.w	r4, r2, r6
    63e4:	faa4 f48c 	sel	r4, r4, ip
    63e8:	fa83 f54c 	uadd8	r5, r3, ip
    63ec:	ea83 0507 	eor.w	r5, r3, r7
    63f0:	faa5 f58c 	sel	r5, r5, ip
    63f4:	4325      	orrs	r5, r4
    63f6:	d0db      	beq.n	63b0 <strcmp+0x68>
    63f8:	b99c      	cbnz	r4, 6422 <strcmp+0xda>
    63fa:	ba2d      	rev	r5, r5
    63fc:	fab5 f485 	clz	r4, r5
    6400:	f024 0407 	bic.w	r4, r4, #7
    6404:	fa27 f104 	lsr.w	r1, r7, r4
    6408:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    640c:	fa23 f304 	lsr.w	r3, r3, r4
    6410:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    6414:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    6418:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    641c:	eba0 0001 	sub.w	r0, r0, r1
    6420:	4770      	bx	lr
    6422:	ba24      	rev	r4, r4
    6424:	fab4 f484 	clz	r4, r4
    6428:	f024 0407 	bic.w	r4, r4, #7
    642c:	fa26 f104 	lsr.w	r1, r6, r4
    6430:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    6434:	fa22 f204 	lsr.w	r2, r2, r4
    6438:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    643c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    6440:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    6444:	eba0 0001 	sub.w	r0, r0, r1
    6448:	4770      	bx	lr
    644a:	f014 0f03 	tst.w	r4, #3
    644e:	d13c      	bne.n	64ca <strcmp+0x182>
    6450:	f010 0403 	ands.w	r4, r0, #3
    6454:	d128      	bne.n	64a8 <strcmp+0x160>
    6456:	f850 2b08 	ldr.w	r2, [r0], #8
    645a:	f851 3b08 	ldr.w	r3, [r1], #8
    645e:	fa82 f54c 	uadd8	r5, r2, ip
    6462:	ea82 0503 	eor.w	r5, r2, r3
    6466:	faa5 f58c 	sel	r5, r5, ip
    646a:	b95d      	cbnz	r5, 6484 <strcmp+0x13c>
    646c:	f850 2c04 	ldr.w	r2, [r0, #-4]
    6470:	f851 3c04 	ldr.w	r3, [r1, #-4]
    6474:	fa82 f54c 	uadd8	r5, r2, ip
    6478:	ea82 0503 	eor.w	r5, r2, r3
    647c:	faa5 f58c 	sel	r5, r5, ip
    6480:	2d00      	cmp	r5, #0
    6482:	d0e8      	beq.n	6456 <strcmp+0x10e>
    6484:	ba2d      	rev	r5, r5
    6486:	fab5 f485 	clz	r4, r5
    648a:	f024 0407 	bic.w	r4, r4, #7
    648e:	fa23 f104 	lsr.w	r1, r3, r4
    6492:	fa22 f204 	lsr.w	r2, r2, r4
    6496:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    649a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    649e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    64a2:	eba0 0001 	sub.w	r0, r0, r1
    64a6:	4770      	bx	lr
    64a8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
    64ac:	f020 0003 	bic.w	r0, r0, #3
    64b0:	f850 2b08 	ldr.w	r2, [r0], #8
    64b4:	f021 0103 	bic.w	r1, r1, #3
    64b8:	f851 3b08 	ldr.w	r3, [r1], #8
    64bc:	fa0c f404 	lsl.w	r4, ip, r4
    64c0:	ea62 0204 	orn	r2, r2, r4
    64c4:	ea63 0304 	orn	r3, r3, r4
    64c8:	e7c9      	b.n	645e <strcmp+0x116>
    64ca:	f010 0403 	ands.w	r4, r0, #3
    64ce:	d01a      	beq.n	6506 <strcmp+0x1be>
    64d0:	eba1 0104 	sub.w	r1, r1, r4
    64d4:	f020 0003 	bic.w	r0, r0, #3
    64d8:	07e4      	lsls	r4, r4, #31
    64da:	f850 2b04 	ldr.w	r2, [r0], #4
    64de:	d006      	beq.n	64ee <strcmp+0x1a6>
    64e0:	d20f      	bcs.n	6502 <strcmp+0x1ba>
    64e2:	788b      	ldrb	r3, [r1, #2]
    64e4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
    64e8:	1ae4      	subs	r4, r4, r3
    64ea:	d106      	bne.n	64fa <strcmp+0x1b2>
    64ec:	b12b      	cbz	r3, 64fa <strcmp+0x1b2>
    64ee:	78cb      	ldrb	r3, [r1, #3]
    64f0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
    64f4:	1ae4      	subs	r4, r4, r3
    64f6:	d100      	bne.n	64fa <strcmp+0x1b2>
    64f8:	b91b      	cbnz	r3, 6502 <strcmp+0x1ba>
    64fa:	4620      	mov	r0, r4
    64fc:	f85d 4b10 	ldr.w	r4, [sp], #16
    6500:	4770      	bx	lr
    6502:	f101 0104 	add.w	r1, r1, #4
    6506:	f850 2b04 	ldr.w	r2, [r0], #4
    650a:	07cc      	lsls	r4, r1, #31
    650c:	f021 0103 	bic.w	r1, r1, #3
    6510:	f851 3b04 	ldr.w	r3, [r1], #4
    6514:	d848      	bhi.n	65a8 <strcmp+0x260>
    6516:	d224      	bcs.n	6562 <strcmp+0x21a>
    6518:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
    651c:	fa82 f54c 	uadd8	r5, r2, ip
    6520:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
    6524:	faa5 f58c 	sel	r5, r5, ip
    6528:	d10a      	bne.n	6540 <strcmp+0x1f8>
    652a:	b965      	cbnz	r5, 6546 <strcmp+0x1fe>
    652c:	f851 3b04 	ldr.w	r3, [r1], #4
    6530:	ea84 0402 	eor.w	r4, r4, r2
    6534:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
    6538:	d10e      	bne.n	6558 <strcmp+0x210>
    653a:	f850 2b04 	ldr.w	r2, [r0], #4
    653e:	e7eb      	b.n	6518 <strcmp+0x1d0>
    6540:	ea4f 2313 	mov.w	r3, r3, lsr #8
    6544:	e055      	b.n	65f2 <strcmp+0x2aa>
    6546:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
    654a:	d14d      	bne.n	65e8 <strcmp+0x2a0>
    654c:	7808      	ldrb	r0, [r1, #0]
    654e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    6552:	f1c0 0000 	rsb	r0, r0, #0
    6556:	4770      	bx	lr
    6558:	ea4f 6212 	mov.w	r2, r2, lsr #24
    655c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    6560:	e047      	b.n	65f2 <strcmp+0x2aa>
    6562:	ea02 441c 	and.w	r4, r2, ip, lsr #16
    6566:	fa82 f54c 	uadd8	r5, r2, ip
    656a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
    656e:	faa5 f58c 	sel	r5, r5, ip
    6572:	d10a      	bne.n	658a <strcmp+0x242>
    6574:	b965      	cbnz	r5, 6590 <strcmp+0x248>
    6576:	f851 3b04 	ldr.w	r3, [r1], #4
    657a:	ea84 0402 	eor.w	r4, r4, r2
    657e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
    6582:	d10c      	bne.n	659e <strcmp+0x256>
    6584:	f850 2b04 	ldr.w	r2, [r0], #4
    6588:	e7eb      	b.n	6562 <strcmp+0x21a>
    658a:	ea4f 4313 	mov.w	r3, r3, lsr #16
    658e:	e030      	b.n	65f2 <strcmp+0x2aa>
    6590:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
    6594:	d128      	bne.n	65e8 <strcmp+0x2a0>
    6596:	880b      	ldrh	r3, [r1, #0]
    6598:	ea4f 4212 	mov.w	r2, r2, lsr #16
    659c:	e029      	b.n	65f2 <strcmp+0x2aa>
    659e:	ea4f 4212 	mov.w	r2, r2, lsr #16
    65a2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
    65a6:	e024      	b.n	65f2 <strcmp+0x2aa>
    65a8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
    65ac:	fa82 f54c 	uadd8	r5, r2, ip
    65b0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
    65b4:	faa5 f58c 	sel	r5, r5, ip
    65b8:	d10a      	bne.n	65d0 <strcmp+0x288>
    65ba:	b965      	cbnz	r5, 65d6 <strcmp+0x28e>
    65bc:	f851 3b04 	ldr.w	r3, [r1], #4
    65c0:	ea84 0402 	eor.w	r4, r4, r2
    65c4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
    65c8:	d109      	bne.n	65de <strcmp+0x296>
    65ca:	f850 2b04 	ldr.w	r2, [r0], #4
    65ce:	e7eb      	b.n	65a8 <strcmp+0x260>
    65d0:	ea4f 6313 	mov.w	r3, r3, lsr #24
    65d4:	e00d      	b.n	65f2 <strcmp+0x2aa>
    65d6:	f015 0fff 	tst.w	r5, #255	; 0xff
    65da:	d105      	bne.n	65e8 <strcmp+0x2a0>
    65dc:	680b      	ldr	r3, [r1, #0]
    65de:	ea4f 2212 	mov.w	r2, r2, lsr #8
    65e2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    65e6:	e004      	b.n	65f2 <strcmp+0x2aa>
    65e8:	f04f 0000 	mov.w	r0, #0
    65ec:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    65f0:	4770      	bx	lr
    65f2:	ba12      	rev	r2, r2
    65f4:	ba1b      	rev	r3, r3
    65f6:	fa82 f44c 	uadd8	r4, r2, ip
    65fa:	ea82 0403 	eor.w	r4, r2, r3
    65fe:	faa4 f58c 	sel	r5, r4, ip
    6602:	fab5 f485 	clz	r4, r5
    6606:	fa02 f204 	lsl.w	r2, r2, r4
    660a:	fa03 f304 	lsl.w	r3, r3, r4
    660e:	ea4f 6012 	mov.w	r0, r2, lsr #24
    6612:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    6616:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
    661a:	4770      	bx	lr

0000661c <strcpy>:
    661c:	ea80 0201 	eor.w	r2, r0, r1
    6620:	4684      	mov	ip, r0
    6622:	f012 0f03 	tst.w	r2, #3
    6626:	d14f      	bne.n	66c8 <strcpy+0xac>
    6628:	f011 0f03 	tst.w	r1, #3
    662c:	d132      	bne.n	6694 <strcpy+0x78>
    662e:	f84d 4d04 	str.w	r4, [sp, #-4]!
    6632:	f011 0f04 	tst.w	r1, #4
    6636:	f851 3b04 	ldr.w	r3, [r1], #4
    663a:	d00b      	beq.n	6654 <strcpy+0x38>
    663c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    6640:	439a      	bics	r2, r3
    6642:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    6646:	bf04      	itt	eq
    6648:	f84c 3b04 	streq.w	r3, [ip], #4
    664c:	f851 3b04 	ldreq.w	r3, [r1], #4
    6650:	d116      	bne.n	6680 <strcpy+0x64>
    6652:	bf00      	nop
    6654:	f851 4b04 	ldr.w	r4, [r1], #4
    6658:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    665c:	439a      	bics	r2, r3
    665e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    6662:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    6666:	d10b      	bne.n	6680 <strcpy+0x64>
    6668:	f84c 3b04 	str.w	r3, [ip], #4
    666c:	43a2      	bics	r2, r4
    666e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    6672:	bf04      	itt	eq
    6674:	f851 3b04 	ldreq.w	r3, [r1], #4
    6678:	f84c 4b04 	streq.w	r4, [ip], #4
    667c:	d0ea      	beq.n	6654 <strcpy+0x38>
    667e:	4623      	mov	r3, r4
    6680:	f80c 3b01 	strb.w	r3, [ip], #1
    6684:	f013 0fff 	tst.w	r3, #255	; 0xff
    6688:	ea4f 2333 	mov.w	r3, r3, ror #8
    668c:	d1f8      	bne.n	6680 <strcpy+0x64>
    668e:	f85d 4b04 	ldr.w	r4, [sp], #4
    6692:	4770      	bx	lr
    6694:	f011 0f01 	tst.w	r1, #1
    6698:	d006      	beq.n	66a8 <strcpy+0x8c>
    669a:	f811 2b01 	ldrb.w	r2, [r1], #1
    669e:	f80c 2b01 	strb.w	r2, [ip], #1
    66a2:	2a00      	cmp	r2, #0
    66a4:	bf08      	it	eq
    66a6:	4770      	bxeq	lr
    66a8:	f011 0f02 	tst.w	r1, #2
    66ac:	d0bf      	beq.n	662e <strcpy+0x12>
    66ae:	f831 2b02 	ldrh.w	r2, [r1], #2
    66b2:	f012 0fff 	tst.w	r2, #255	; 0xff
    66b6:	bf16      	itet	ne
    66b8:	f82c 2b02 	strhne.w	r2, [ip], #2
    66bc:	f88c 2000 	strbeq.w	r2, [ip]
    66c0:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
    66c4:	d1b3      	bne.n	662e <strcpy+0x12>
    66c6:	4770      	bx	lr
    66c8:	f811 2b01 	ldrb.w	r2, [r1], #1
    66cc:	f80c 2b01 	strb.w	r2, [ip], #1
    66d0:	2a00      	cmp	r2, #0
    66d2:	d1f9      	bne.n	66c8 <strcpy+0xac>
    66d4:	4770      	bx	lr
    66d6:	bf00      	nop
	...

00006700 <strlen>:
    6700:	f890 f000 	pld	[r0]
    6704:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    6708:	f020 0107 	bic.w	r1, r0, #7
    670c:	f06f 0c00 	mvn.w	ip, #0
    6710:	f010 0407 	ands.w	r4, r0, #7
    6714:	f891 f020 	pld	[r1, #32]
    6718:	f040 8049 	bne.w	67ae <strlen+0xae>
    671c:	f04f 0400 	mov.w	r4, #0
    6720:	f06f 0007 	mvn.w	r0, #7
    6724:	e9d1 2300 	ldrd	r2, r3, [r1]
    6728:	f891 f040 	pld	[r1, #64]	; 0x40
    672c:	f100 0008 	add.w	r0, r0, #8
    6730:	fa82 f24c 	uadd8	r2, r2, ip
    6734:	faa4 f28c 	sel	r2, r4, ip
    6738:	fa83 f34c 	uadd8	r3, r3, ip
    673c:	faa2 f38c 	sel	r3, r2, ip
    6740:	bb4b      	cbnz	r3, 6796 <strlen+0x96>
    6742:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    6746:	fa82 f24c 	uadd8	r2, r2, ip
    674a:	f100 0008 	add.w	r0, r0, #8
    674e:	faa4 f28c 	sel	r2, r4, ip
    6752:	fa83 f34c 	uadd8	r3, r3, ip
    6756:	faa2 f38c 	sel	r3, r2, ip
    675a:	b9e3      	cbnz	r3, 6796 <strlen+0x96>
    675c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    6760:	fa82 f24c 	uadd8	r2, r2, ip
    6764:	f100 0008 	add.w	r0, r0, #8
    6768:	faa4 f28c 	sel	r2, r4, ip
    676c:	fa83 f34c 	uadd8	r3, r3, ip
    6770:	faa2 f38c 	sel	r3, r2, ip
    6774:	b97b      	cbnz	r3, 6796 <strlen+0x96>
    6776:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    677a:	f101 0120 	add.w	r1, r1, #32
    677e:	fa82 f24c 	uadd8	r2, r2, ip
    6782:	f100 0008 	add.w	r0, r0, #8
    6786:	faa4 f28c 	sel	r2, r4, ip
    678a:	fa83 f34c 	uadd8	r3, r3, ip
    678e:	faa2 f38c 	sel	r3, r2, ip
    6792:	2b00      	cmp	r3, #0
    6794:	d0c6      	beq.n	6724 <strlen+0x24>
    6796:	2a00      	cmp	r2, #0
    6798:	bf04      	itt	eq
    679a:	3004      	addeq	r0, #4
    679c:	461a      	moveq	r2, r3
    679e:	ba12      	rev	r2, r2
    67a0:	fab2 f282 	clz	r2, r2
    67a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    67a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    67ac:	4770      	bx	lr
    67ae:	e9d1 2300 	ldrd	r2, r3, [r1]
    67b2:	f004 0503 	and.w	r5, r4, #3
    67b6:	f1c4 0000 	rsb	r0, r4, #0
    67ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    67be:	f014 0f04 	tst.w	r4, #4
    67c2:	f891 f040 	pld	[r1, #64]	; 0x40
    67c6:	fa0c f505 	lsl.w	r5, ip, r5
    67ca:	ea62 0205 	orn	r2, r2, r5
    67ce:	bf1c      	itt	ne
    67d0:	ea63 0305 	ornne	r3, r3, r5
    67d4:	4662      	movne	r2, ip
    67d6:	f04f 0400 	mov.w	r4, #0
    67da:	e7a9      	b.n	6730 <strlen+0x30>
    67dc:	0000      	movs	r0, r0
	...

000067e0 <nan>:
    67e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 67e8 <nan+0x8>
    67e4:	4770      	bx	lr
    67e6:	bf00      	nop
    67e8:	00000000 	.word	0x00000000
    67ec:	7ff80000 	.word	0x7ff80000

000067f0 <nanf>:
    67f0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 67f8 <nanf+0x8>
    67f4:	4770      	bx	lr
    67f6:	bf00      	nop
    67f8:	7fc00000 	.word	0x7fc00000

000067fc <__register_exitproc>:
    67fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6800:	f8df a07c 	ldr.w	sl, [pc, #124]	; 6880 <__register_exitproc+0x84>
    6804:	4606      	mov	r6, r0
    6806:	f8da 0000 	ldr.w	r0, [sl]
    680a:	4698      	mov	r8, r3
    680c:	460f      	mov	r7, r1
    680e:	4691      	mov	r9, r2
    6810:	f7ff fd90 	bl	6334 <__retarget_lock_acquire_recursive>
    6814:	4b18      	ldr	r3, [pc, #96]	; (6878 <__register_exitproc+0x7c>)
    6816:	681c      	ldr	r4, [r3, #0]
    6818:	b324      	cbz	r4, 6864 <__register_exitproc+0x68>
    681a:	6865      	ldr	r5, [r4, #4]
    681c:	2d1f      	cmp	r5, #31
    681e:	dc24      	bgt.n	686a <__register_exitproc+0x6e>
    6820:	b95e      	cbnz	r6, 683a <__register_exitproc+0x3e>
    6822:	1c6b      	adds	r3, r5, #1
    6824:	3502      	adds	r5, #2
    6826:	f8da 0000 	ldr.w	r0, [sl]
    682a:	6063      	str	r3, [r4, #4]
    682c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
    6830:	f7ff fd82 	bl	6338 <__retarget_lock_release_recursive>
    6834:	2000      	movs	r0, #0
    6836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    683a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    683e:	2301      	movs	r3, #1
    6840:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    6844:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
    6848:	40ab      	lsls	r3, r5
    684a:	431a      	orrs	r2, r3
    684c:	2e02      	cmp	r6, #2
    684e:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
    6852:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    6856:	d1e4      	bne.n	6822 <__register_exitproc+0x26>
    6858:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    685c:	431a      	orrs	r2, r3
    685e:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    6862:	e7de      	b.n	6822 <__register_exitproc+0x26>
    6864:	4c05      	ldr	r4, [pc, #20]	; (687c <__register_exitproc+0x80>)
    6866:	601c      	str	r4, [r3, #0]
    6868:	e7d7      	b.n	681a <__register_exitproc+0x1e>
    686a:	f8da 0000 	ldr.w	r0, [sl]
    686e:	f7ff fd63 	bl	6338 <__retarget_lock_release_recursive>
    6872:	f04f 30ff 	mov.w	r0, #4294967295
    6876:	e7de      	b.n	6836 <__register_exitproc+0x3a>
    6878:	20008ecc 	.word	0x20008ecc
    687c:	20008ed0 	.word	0x20008ed0
    6880:	20007c2c 	.word	0x20007c2c

00006884 <_malloc_trim_r>:
    6884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6886:	4f24      	ldr	r7, [pc, #144]	; (6918 <_malloc_trim_r+0x94>)
    6888:	460c      	mov	r4, r1
    688a:	4606      	mov	r6, r0
    688c:	f7fd ff18 	bl	46c0 <__malloc_lock>
    6890:	68bb      	ldr	r3, [r7, #8]
    6892:	685d      	ldr	r5, [r3, #4]
    6894:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
    6898:	310f      	adds	r1, #15
    689a:	f025 0503 	bic.w	r5, r5, #3
    689e:	194b      	adds	r3, r1, r5
    68a0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    68a4:	f023 030f 	bic.w	r3, r3, #15
    68a8:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
    68ac:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    68b0:	db07      	blt.n	68c2 <_malloc_trim_r+0x3e>
    68b2:	2100      	movs	r1, #0
    68b4:	4630      	mov	r0, r6
    68b6:	f7ff fce7 	bl	6288 <_sbrk_r>
    68ba:	68bb      	ldr	r3, [r7, #8]
    68bc:	442b      	add	r3, r5
    68be:	4298      	cmp	r0, r3
    68c0:	d004      	beq.n	68cc <_malloc_trim_r+0x48>
    68c2:	4630      	mov	r0, r6
    68c4:	f7fd ff02 	bl	46cc <__malloc_unlock>
    68c8:	2000      	movs	r0, #0
    68ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    68cc:	4261      	negs	r1, r4
    68ce:	4630      	mov	r0, r6
    68d0:	f7ff fcda 	bl	6288 <_sbrk_r>
    68d4:	3001      	adds	r0, #1
    68d6:	d00d      	beq.n	68f4 <_malloc_trim_r+0x70>
    68d8:	4a10      	ldr	r2, [pc, #64]	; (691c <_malloc_trim_r+0x98>)
    68da:	68bb      	ldr	r3, [r7, #8]
    68dc:	1b2d      	subs	r5, r5, r4
    68de:	f045 0501 	orr.w	r5, r5, #1
    68e2:	605d      	str	r5, [r3, #4]
    68e4:	6813      	ldr	r3, [r2, #0]
    68e6:	4630      	mov	r0, r6
    68e8:	1b1b      	subs	r3, r3, r4
    68ea:	6013      	str	r3, [r2, #0]
    68ec:	f7fd feee 	bl	46cc <__malloc_unlock>
    68f0:	2001      	movs	r0, #1
    68f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    68f4:	2100      	movs	r1, #0
    68f6:	4630      	mov	r0, r6
    68f8:	f7ff fcc6 	bl	6288 <_sbrk_r>
    68fc:	68ba      	ldr	r2, [r7, #8]
    68fe:	1a83      	subs	r3, r0, r2
    6900:	2b0f      	cmp	r3, #15
    6902:	ddde      	ble.n	68c2 <_malloc_trim_r+0x3e>
    6904:	f043 0301 	orr.w	r3, r3, #1
    6908:	6053      	str	r3, [r2, #4]
    690a:	4b05      	ldr	r3, [pc, #20]	; (6920 <_malloc_trim_r+0x9c>)
    690c:	4903      	ldr	r1, [pc, #12]	; (691c <_malloc_trim_r+0x98>)
    690e:	681b      	ldr	r3, [r3, #0]
    6910:	1ac0      	subs	r0, r0, r3
    6912:	6008      	str	r0, [r1, #0]
    6914:	e7d5      	b.n	68c2 <_malloc_trim_r+0x3e>
    6916:	bf00      	nop
    6918:	20007da4 	.word	0x20007da4
    691c:	2000906c 	.word	0x2000906c
    6920:	200081ac 	.word	0x200081ac

00006924 <_free_r>:
    6924:	2900      	cmp	r1, #0
    6926:	d061      	beq.n	69ec <_free_r+0xc8>
    6928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    692a:	460c      	mov	r4, r1
    692c:	4606      	mov	r6, r0
    692e:	f7fd fec7 	bl	46c0 <__malloc_lock>
    6932:	f854 2c04 	ldr.w	r2, [r4, #-4]
    6936:	4f7b      	ldr	r7, [pc, #492]	; (6b24 <_free_r+0x200>)
    6938:	f1a4 0508 	sub.w	r5, r4, #8
    693c:	f022 0101 	bic.w	r1, r2, #1
    6940:	eb05 0c01 	add.w	ip, r5, r1
    6944:	68b8      	ldr	r0, [r7, #8]
    6946:	f8dc 3004 	ldr.w	r3, [ip, #4]
    694a:	4560      	cmp	r0, ip
    694c:	f023 0303 	bic.w	r3, r3, #3
    6950:	f000 808b 	beq.w	6a6a <_free_r+0x146>
    6954:	07d2      	lsls	r2, r2, #31
    6956:	f8cc 3004 	str.w	r3, [ip, #4]
    695a:	d432      	bmi.n	69c2 <_free_r+0x9e>
    695c:	f854 2c08 	ldr.w	r2, [r4, #-8]
    6960:	1aad      	subs	r5, r5, r2
    6962:	4411      	add	r1, r2
    6964:	68aa      	ldr	r2, [r5, #8]
    6966:	f107 0008 	add.w	r0, r7, #8
    696a:	4282      	cmp	r2, r0
    696c:	d06a      	beq.n	6a44 <_free_r+0x120>
    696e:	eb0c 0403 	add.w	r4, ip, r3
    6972:	f8d4 e004 	ldr.w	lr, [r4, #4]
    6976:	68ec      	ldr	r4, [r5, #12]
    6978:	60d4      	str	r4, [r2, #12]
    697a:	f01e 0f01 	tst.w	lr, #1
    697e:	60a2      	str	r2, [r4, #8]
    6980:	f000 8097 	beq.w	6ab2 <_free_r+0x18e>
    6984:	f041 0301 	orr.w	r3, r1, #1
    6988:	606b      	str	r3, [r5, #4]
    698a:	f8cc 1000 	str.w	r1, [ip]
    698e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    6992:	d235      	bcs.n	6a00 <_free_r+0xdc>
    6994:	6878      	ldr	r0, [r7, #4]
    6996:	08cb      	lsrs	r3, r1, #3
    6998:	2201      	movs	r2, #1
    699a:	0949      	lsrs	r1, r1, #5
    699c:	3301      	adds	r3, #1
    699e:	408a      	lsls	r2, r1
    69a0:	4302      	orrs	r2, r0
    69a2:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    69a6:	607a      	str	r2, [r7, #4]
    69a8:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    69ac:	3a08      	subs	r2, #8
    69ae:	e9c5 1202 	strd	r1, r2, [r5, #8]
    69b2:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    69b6:	60cd      	str	r5, [r1, #12]
    69b8:	4630      	mov	r0, r6
    69ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    69be:	f7fd be85 	b.w	46cc <__malloc_unlock>
    69c2:	eb0c 0203 	add.w	r2, ip, r3
    69c6:	6852      	ldr	r2, [r2, #4]
    69c8:	07d0      	lsls	r0, r2, #31
    69ca:	d410      	bmi.n	69ee <_free_r+0xca>
    69cc:	4419      	add	r1, r3
    69ce:	f107 0008 	add.w	r0, r7, #8
    69d2:	f8dc 3008 	ldr.w	r3, [ip, #8]
    69d6:	4283      	cmp	r3, r0
    69d8:	d073      	beq.n	6ac2 <_free_r+0x19e>
    69da:	f8dc 200c 	ldr.w	r2, [ip, #12]
    69de:	60da      	str	r2, [r3, #12]
    69e0:	6093      	str	r3, [r2, #8]
    69e2:	f041 0301 	orr.w	r3, r1, #1
    69e6:	606b      	str	r3, [r5, #4]
    69e8:	5069      	str	r1, [r5, r1]
    69ea:	e7d0      	b.n	698e <_free_r+0x6a>
    69ec:	4770      	bx	lr
    69ee:	f041 0301 	orr.w	r3, r1, #1
    69f2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    69f6:	f844 3c04 	str.w	r3, [r4, #-4]
    69fa:	f8cc 1000 	str.w	r1, [ip]
    69fe:	d3c9      	bcc.n	6994 <_free_r+0x70>
    6a00:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
    6a04:	ea4f 2351 	mov.w	r3, r1, lsr #9
    6a08:	d248      	bcs.n	6a9c <_free_r+0x178>
    6a0a:	098b      	lsrs	r3, r1, #6
    6a0c:	f103 0039 	add.w	r0, r3, #57	; 0x39
    6a10:	f103 0238 	add.w	r2, r3, #56	; 0x38
    6a14:	00c3      	lsls	r3, r0, #3
    6a16:	18f8      	adds	r0, r7, r3
    6a18:	58fb      	ldr	r3, [r7, r3]
    6a1a:	3808      	subs	r0, #8
    6a1c:	4298      	cmp	r0, r3
    6a1e:	d059      	beq.n	6ad4 <_free_r+0x1b0>
    6a20:	685a      	ldr	r2, [r3, #4]
    6a22:	f022 0203 	bic.w	r2, r2, #3
    6a26:	428a      	cmp	r2, r1
    6a28:	d902      	bls.n	6a30 <_free_r+0x10c>
    6a2a:	689b      	ldr	r3, [r3, #8]
    6a2c:	4298      	cmp	r0, r3
    6a2e:	d1f7      	bne.n	6a20 <_free_r+0xfc>
    6a30:	68d8      	ldr	r0, [r3, #12]
    6a32:	e9c5 3002 	strd	r3, r0, [r5, #8]
    6a36:	6085      	str	r5, [r0, #8]
    6a38:	60dd      	str	r5, [r3, #12]
    6a3a:	4630      	mov	r0, r6
    6a3c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    6a40:	f7fd be44 	b.w	46cc <__malloc_unlock>
    6a44:	eb0c 0203 	add.w	r2, ip, r3
    6a48:	6852      	ldr	r2, [r2, #4]
    6a4a:	07d2      	lsls	r2, r2, #31
    6a4c:	d463      	bmi.n	6b16 <_free_r+0x1f2>
    6a4e:	440b      	add	r3, r1
    6a50:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
    6a54:	60ca      	str	r2, [r1, #12]
    6a56:	6091      	str	r1, [r2, #8]
    6a58:	f043 0201 	orr.w	r2, r3, #1
    6a5c:	606a      	str	r2, [r5, #4]
    6a5e:	4630      	mov	r0, r6
    6a60:	50eb      	str	r3, [r5, r3]
    6a62:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    6a66:	f7fd be31 	b.w	46cc <__malloc_unlock>
    6a6a:	440b      	add	r3, r1
    6a6c:	07d1      	lsls	r1, r2, #31
    6a6e:	d407      	bmi.n	6a80 <_free_r+0x15c>
    6a70:	f854 2c08 	ldr.w	r2, [r4, #-8]
    6a74:	1aad      	subs	r5, r5, r2
    6a76:	4413      	add	r3, r2
    6a78:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
    6a7c:	60ca      	str	r2, [r1, #12]
    6a7e:	6091      	str	r1, [r2, #8]
    6a80:	f043 0201 	orr.w	r2, r3, #1
    6a84:	606a      	str	r2, [r5, #4]
    6a86:	4a28      	ldr	r2, [pc, #160]	; (6b28 <_free_r+0x204>)
    6a88:	60bd      	str	r5, [r7, #8]
    6a8a:	6812      	ldr	r2, [r2, #0]
    6a8c:	429a      	cmp	r2, r3
    6a8e:	d893      	bhi.n	69b8 <_free_r+0x94>
    6a90:	4b26      	ldr	r3, [pc, #152]	; (6b2c <_free_r+0x208>)
    6a92:	4630      	mov	r0, r6
    6a94:	6819      	ldr	r1, [r3, #0]
    6a96:	f7ff fef5 	bl	6884 <_malloc_trim_r>
    6a9a:	e78d      	b.n	69b8 <_free_r+0x94>
    6a9c:	2b14      	cmp	r3, #20
    6a9e:	d90a      	bls.n	6ab6 <_free_r+0x192>
    6aa0:	2b54      	cmp	r3, #84	; 0x54
    6aa2:	d81f      	bhi.n	6ae4 <_free_r+0x1c0>
    6aa4:	0b0b      	lsrs	r3, r1, #12
    6aa6:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    6aaa:	f103 026e 	add.w	r2, r3, #110	; 0x6e
    6aae:	00c3      	lsls	r3, r0, #3
    6ab0:	e7b1      	b.n	6a16 <_free_r+0xf2>
    6ab2:	4419      	add	r1, r3
    6ab4:	e78d      	b.n	69d2 <_free_r+0xae>
    6ab6:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    6aba:	f103 025b 	add.w	r2, r3, #91	; 0x5b
    6abe:	00c3      	lsls	r3, r0, #3
    6ac0:	e7a9      	b.n	6a16 <_free_r+0xf2>
    6ac2:	f041 0301 	orr.w	r3, r1, #1
    6ac6:	e9c7 5504 	strd	r5, r5, [r7, #16]
    6aca:	e9c5 0002 	strd	r0, r0, [r5, #8]
    6ace:	606b      	str	r3, [r5, #4]
    6ad0:	5069      	str	r1, [r5, r1]
    6ad2:	e771      	b.n	69b8 <_free_r+0x94>
    6ad4:	6879      	ldr	r1, [r7, #4]
    6ad6:	1092      	asrs	r2, r2, #2
    6ad8:	2401      	movs	r4, #1
    6ada:	fa04 f202 	lsl.w	r2, r4, r2
    6ade:	430a      	orrs	r2, r1
    6ae0:	607a      	str	r2, [r7, #4]
    6ae2:	e7a6      	b.n	6a32 <_free_r+0x10e>
    6ae4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    6ae8:	d806      	bhi.n	6af8 <_free_r+0x1d4>
    6aea:	0bcb      	lsrs	r3, r1, #15
    6aec:	f103 0078 	add.w	r0, r3, #120	; 0x78
    6af0:	f103 0277 	add.w	r2, r3, #119	; 0x77
    6af4:	00c3      	lsls	r3, r0, #3
    6af6:	e78e      	b.n	6a16 <_free_r+0xf2>
    6af8:	f240 5254 	movw	r2, #1364	; 0x554
    6afc:	4293      	cmp	r3, r2
    6afe:	d806      	bhi.n	6b0e <_free_r+0x1ea>
    6b00:	0c8b      	lsrs	r3, r1, #18
    6b02:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    6b06:	f103 027c 	add.w	r2, r3, #124	; 0x7c
    6b0a:	00c3      	lsls	r3, r0, #3
    6b0c:	e783      	b.n	6a16 <_free_r+0xf2>
    6b0e:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    6b12:	227e      	movs	r2, #126	; 0x7e
    6b14:	e77f      	b.n	6a16 <_free_r+0xf2>
    6b16:	f041 0301 	orr.w	r3, r1, #1
    6b1a:	606b      	str	r3, [r5, #4]
    6b1c:	f8cc 1000 	str.w	r1, [ip]
    6b20:	e74a      	b.n	69b8 <_free_r+0x94>
    6b22:	bf00      	nop
    6b24:	20007da4 	.word	0x20007da4
    6b28:	200081b0 	.word	0x200081b0
    6b2c:	2000909c 	.word	0x2000909c

00006b30 <rshift>:
    6b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6b34:	6904      	ldr	r4, [r0, #16]
    6b36:	ebb4 1f61 	cmp.w	r4, r1, asr #5
    6b3a:	dd2f      	ble.n	6b9c <rshift+0x6c>
    6b3c:	f100 0e14 	add.w	lr, r0, #20
    6b40:	114e      	asrs	r6, r1, #5
    6b42:	f011 0c1f 	ands.w	ip, r1, #31
    6b46:	eb0e 0584 	add.w	r5, lr, r4, lsl #2
    6b4a:	eb0e 0386 	add.w	r3, lr, r6, lsl #2
    6b4e:	d02b      	beq.n	6ba8 <rshift+0x78>
    6b50:	f85e 1026 	ldr.w	r1, [lr, r6, lsl #2]
    6b54:	3304      	adds	r3, #4
    6b56:	429d      	cmp	r5, r3
    6b58:	fa21 f10c 	lsr.w	r1, r1, ip
    6b5c:	f1cc 0820 	rsb	r8, ip, #32
    6b60:	d918      	bls.n	6b94 <rshift+0x64>
    6b62:	4677      	mov	r7, lr
    6b64:	681a      	ldr	r2, [r3, #0]
    6b66:	fa02 f208 	lsl.w	r2, r2, r8
    6b6a:	430a      	orrs	r2, r1
    6b6c:	f847 2b04 	str.w	r2, [r7], #4
    6b70:	f853 1b04 	ldr.w	r1, [r3], #4
    6b74:	429d      	cmp	r5, r3
    6b76:	fa21 f10c 	lsr.w	r1, r1, ip
    6b7a:	d8f3      	bhi.n	6b64 <rshift+0x34>
    6b7c:	1ba3      	subs	r3, r4, r6
    6b7e:	009b      	lsls	r3, r3, #2
    6b80:	3b05      	subs	r3, #5
    6b82:	089b      	lsrs	r3, r3, #2
    6b84:	3301      	adds	r3, #1
    6b86:	eb0e 0483 	add.w	r4, lr, r3, lsl #2
    6b8a:	f84e 1023 	str.w	r1, [lr, r3, lsl #2]
    6b8e:	b1c9      	cbz	r1, 6bc4 <rshift+0x94>
    6b90:	3404      	adds	r4, #4
    6b92:	e017      	b.n	6bc4 <rshift+0x94>
    6b94:	6141      	str	r1, [r0, #20]
    6b96:	4674      	mov	r4, lr
    6b98:	2900      	cmp	r1, #0
    6b9a:	d1f9      	bne.n	6b90 <rshift+0x60>
    6b9c:	2300      	movs	r3, #0
    6b9e:	6103      	str	r3, [r0, #16]
    6ba0:	2300      	movs	r3, #0
    6ba2:	6143      	str	r3, [r0, #20]
    6ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6ba8:	429d      	cmp	r5, r3
    6baa:	bf88      	it	hi
    6bac:	f100 0210 	addhi.w	r2, r0, #16
    6bb0:	d9f4      	bls.n	6b9c <rshift+0x6c>
    6bb2:	f853 1b04 	ldr.w	r1, [r3], #4
    6bb6:	f842 1f04 	str.w	r1, [r2, #4]!
    6bba:	429d      	cmp	r5, r3
    6bbc:	d8f9      	bhi.n	6bb2 <rshift+0x82>
    6bbe:	1ba4      	subs	r4, r4, r6
    6bc0:	eb0e 0484 	add.w	r4, lr, r4, lsl #2
    6bc4:	eba4 030e 	sub.w	r3, r4, lr
    6bc8:	109b      	asrs	r3, r3, #2
    6bca:	4574      	cmp	r4, lr
    6bcc:	6103      	str	r3, [r0, #16]
    6bce:	d0e7      	beq.n	6ba0 <rshift+0x70>
    6bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006bd4 <__gethex>:
    6bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6bd8:	ed2d 8b02 	vpush	{d8}
    6bdc:	680c      	ldr	r4, [r1, #0]
    6bde:	468b      	mov	fp, r1
    6be0:	78a1      	ldrb	r1, [r4, #2]
    6be2:	b085      	sub	sp, #20
    6be4:	2930      	cmp	r1, #48	; 0x30
    6be6:	ee08 0a10 	vmov	s16, r0
    6bea:	4692      	mov	sl, r2
    6bec:	9302      	str	r3, [sp, #8]
    6bee:	f040 81ce 	bne.w	6f8e <__gethex+0x3ba>
    6bf2:	f06f 0001 	mvn.w	r0, #1
    6bf6:	1b00      	subs	r0, r0, r4
    6bf8:	1ce2      	adds	r2, r4, #3
    6bfa:	1883      	adds	r3, r0, r2
    6bfc:	4614      	mov	r4, r2
    6bfe:	f812 1b01 	ldrb.w	r1, [r2], #1
    6c02:	2930      	cmp	r1, #48	; 0x30
    6c04:	d0f9      	beq.n	6bfa <__gethex+0x26>
    6c06:	f8df 8300 	ldr.w	r8, [pc, #768]	; 6f08 <__gethex+0x334>
    6c0a:	f818 2001 	ldrb.w	r2, [r8, r1]
    6c0e:	2a00      	cmp	r2, #0
    6c10:	f000 80e5 	beq.w	6dde <__gethex+0x20a>
    6c14:	7822      	ldrb	r2, [r4, #0]
    6c16:	2700      	movs	r7, #0
    6c18:	f818 2002 	ldrb.w	r2, [r8, r2]
    6c1c:	463d      	mov	r5, r7
    6c1e:	4626      	mov	r6, r4
    6c20:	b12a      	cbz	r2, 6c2e <__gethex+0x5a>
    6c22:	f816 2f01 	ldrb.w	r2, [r6, #1]!
    6c26:	f818 2002 	ldrb.w	r2, [r8, r2]
    6c2a:	2a00      	cmp	r2, #0
    6c2c:	d1f9      	bne.n	6c22 <__gethex+0x4e>
    6c2e:	49b5      	ldr	r1, [pc, #724]	; (6f04 <__gethex+0x330>)
    6c30:	9301      	str	r3, [sp, #4]
    6c32:	2201      	movs	r2, #1
    6c34:	4630      	mov	r0, r6
    6c36:	f7ff fa6b 	bl	6110 <strncmp>
    6c3a:	9b01      	ldr	r3, [sp, #4]
    6c3c:	4681      	mov	r9, r0
    6c3e:	2800      	cmp	r0, #0
    6c40:	d04d      	beq.n	6cde <__gethex+0x10a>
    6c42:	2d00      	cmp	r5, #0
    6c44:	d14e      	bne.n	6ce4 <__gethex+0x110>
    6c46:	7832      	ldrb	r2, [r6, #0]
    6c48:	46a9      	mov	r9, r5
    6c4a:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    6c4e:	2a50      	cmp	r2, #80	; 0x50
    6c50:	4635      	mov	r5, r6
    6c52:	d050      	beq.n	6cf6 <__gethex+0x122>
    6c54:	f8cb 6000 	str.w	r6, [fp]
    6c58:	2f00      	cmp	r7, #0
    6c5a:	d169      	bne.n	6d30 <__gethex+0x15c>
    6c5c:	1b2b      	subs	r3, r5, r4
    6c5e:	3b01      	subs	r3, #1
    6c60:	2b07      	cmp	r3, #7
    6c62:	4639      	mov	r1, r7
    6c64:	dd04      	ble.n	6c70 <__gethex+0x9c>
    6c66:	105b      	asrs	r3, r3, #1
    6c68:	2b07      	cmp	r3, #7
    6c6a:	f101 0101 	add.w	r1, r1, #1
    6c6e:	dcfa      	bgt.n	6c66 <__gethex+0x92>
    6c70:	ee18 0a10 	vmov	r0, s16
    6c74:	f000 fb82 	bl	737c <_Balloc>
    6c78:	4683      	mov	fp, r0
    6c7a:	2800      	cmp	r0, #0
    6c7c:	f000 8266 	beq.w	714c <__gethex+0x578>
    6c80:	f100 0614 	add.w	r6, r0, #20
    6c84:	42ac      	cmp	r4, r5
    6c86:	9601      	str	r6, [sp, #4]
    6c88:	f080 81d2 	bcs.w	7030 <__gethex+0x45c>
    6c8c:	2700      	movs	r7, #0
    6c8e:	f8cd 900c 	str.w	r9, [sp, #12]
    6c92:	499c      	ldr	r1, [pc, #624]	; (6f04 <__gethex+0x330>)
    6c94:	46a1      	mov	r9, r4
    6c96:	463c      	mov	r4, r7
    6c98:	e00c      	b.n	6cb4 <__gethex+0xe0>
    6c9a:	2f20      	cmp	r7, #32
    6c9c:	d019      	beq.n	6cd2 <__gethex+0xfe>
    6c9e:	4638      	mov	r0, r7
    6ca0:	3704      	adds	r7, #4
    6ca2:	782a      	ldrb	r2, [r5, #0]
    6ca4:	f818 2002 	ldrb.w	r2, [r8, r2]
    6ca8:	f002 020f 	and.w	r2, r2, #15
    6cac:	4082      	lsls	r2, r0
    6cae:	4314      	orrs	r4, r2
    6cb0:	454d      	cmp	r5, r9
    6cb2:	d047      	beq.n	6d44 <__gethex+0x170>
    6cb4:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
    6cb8:	2a2e      	cmp	r2, #46	; 0x2e
    6cba:	d1ee      	bne.n	6c9a <__gethex+0xc6>
    6cbc:	454d      	cmp	r5, r9
    6cbe:	d3ec      	bcc.n	6c9a <__gethex+0xc6>
    6cc0:	2201      	movs	r2, #1
    6cc2:	4628      	mov	r0, r5
    6cc4:	f7ff fa24 	bl	6110 <strncmp>
    6cc8:	498e      	ldr	r1, [pc, #568]	; (6f04 <__gethex+0x330>)
    6cca:	2800      	cmp	r0, #0
    6ccc:	d0f0      	beq.n	6cb0 <__gethex+0xdc>
    6cce:	2f20      	cmp	r7, #32
    6cd0:	d1e5      	bne.n	6c9e <__gethex+0xca>
    6cd2:	2000      	movs	r0, #0
    6cd4:	f846 4b04 	str.w	r4, [r6], #4
    6cd8:	2704      	movs	r7, #4
    6cda:	4604      	mov	r4, r0
    6cdc:	e7e1      	b.n	6ca2 <__gethex+0xce>
    6cde:	2d00      	cmp	r5, #0
    6ce0:	f000 8142 	beq.w	6f68 <__gethex+0x394>
    6ce4:	7832      	ldrb	r2, [r6, #0]
    6ce6:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    6cea:	1bad      	subs	r5, r5, r6
    6cec:	2a50      	cmp	r2, #80	; 0x50
    6cee:	ea4f 0985 	mov.w	r9, r5, lsl #2
    6cf2:	4635      	mov	r5, r6
    6cf4:	d1ae      	bne.n	6c54 <__gethex+0x80>
    6cf6:	786a      	ldrb	r2, [r5, #1]
    6cf8:	2a2b      	cmp	r2, #43	; 0x2b
    6cfa:	f000 8125 	beq.w	6f48 <__gethex+0x374>
    6cfe:	2a2d      	cmp	r2, #45	; 0x2d
    6d00:	f000 80a5 	beq.w	6e4e <__gethex+0x27a>
    6d04:	1c6e      	adds	r6, r5, #1
    6d06:	2000      	movs	r0, #0
    6d08:	f818 1002 	ldrb.w	r1, [r8, r2]
    6d0c:	1e4a      	subs	r2, r1, #1
    6d0e:	2a18      	cmp	r2, #24
    6d10:	f200 809b 	bhi.w	6e4a <__gethex+0x276>
    6d14:	7872      	ldrb	r2, [r6, #1]
    6d16:	f818 2002 	ldrb.w	r2, [r8, r2]
    6d1a:	3910      	subs	r1, #16
    6d1c:	3601      	adds	r6, #1
    6d1e:	2a00      	cmp	r2, #0
    6d20:	d15a      	bne.n	6dd8 <__gethex+0x204>
    6d22:	b100      	cbz	r0, 6d26 <__gethex+0x152>
    6d24:	4249      	negs	r1, r1
    6d26:	4489      	add	r9, r1
    6d28:	f8cb 6000 	str.w	r6, [fp]
    6d2c:	2f00      	cmp	r7, #0
    6d2e:	d095      	beq.n	6c5c <__gethex+0x88>
    6d30:	2b00      	cmp	r3, #0
    6d32:	bf14      	ite	ne
    6d34:	2500      	movne	r5, #0
    6d36:	2506      	moveq	r5, #6
    6d38:	4628      	mov	r0, r5
    6d3a:	b005      	add	sp, #20
    6d3c:	ecbd 8b02 	vpop	{d8}
    6d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6d44:	f8dd 900c 	ldr.w	r9, [sp, #12]
    6d48:	4623      	mov	r3, r4
    6d4a:	f846 3b04 	str.w	r3, [r6], #4
    6d4e:	4618      	mov	r0, r3
    6d50:	9b01      	ldr	r3, [sp, #4]
    6d52:	1af6      	subs	r6, r6, r3
    6d54:	10b6      	asrs	r6, r6, #2
    6d56:	f8cb 6010 	str.w	r6, [fp, #16]
    6d5a:	f000 fbe9 	bl	7530 <__hi0bits>
    6d5e:	0176      	lsls	r6, r6, #5
    6d60:	f8da 4000 	ldr.w	r4, [sl]
    6d64:	1a30      	subs	r0, r6, r0
    6d66:	42a0      	cmp	r0, r4
    6d68:	dc75      	bgt.n	6e56 <__gethex+0x282>
    6d6a:	f2c0 80ef 	blt.w	6f4c <__gethex+0x378>
    6d6e:	2700      	movs	r7, #0
    6d70:	f8da 3008 	ldr.w	r3, [sl, #8]
    6d74:	454b      	cmp	r3, r9
    6d76:	f2c0 8151 	blt.w	701c <__gethex+0x448>
    6d7a:	f8da 3004 	ldr.w	r3, [sl, #4]
    6d7e:	454b      	cmp	r3, r9
    6d80:	dd4a      	ble.n	6e18 <__gethex+0x244>
    6d82:	eba3 0909 	sub.w	r9, r3, r9
    6d86:	454c      	cmp	r4, r9
    6d88:	f300 8082 	bgt.w	6e90 <__gethex+0x2bc>
    6d8c:	f8da 200c 	ldr.w	r2, [sl, #12]
    6d90:	2a02      	cmp	r2, #2
    6d92:	f000 8165 	beq.w	7060 <__gethex+0x48c>
    6d96:	2a03      	cmp	r2, #3
    6d98:	f000 8181 	beq.w	709e <__gethex+0x4ca>
    6d9c:	2a01      	cmp	r2, #1
    6d9e:	f000 816f 	beq.w	7080 <__gethex+0x4ac>
    6da2:	ee18 0a10 	vmov	r0, s16
    6da6:	4659      	mov	r1, fp
    6da8:	f000 fb0e 	bl	73c8 <_Bfree>
    6dac:	2550      	movs	r5, #80	; 0x50
    6dae:	9a10      	ldr	r2, [sp, #64]	; 0x40
    6db0:	2300      	movs	r3, #0
    6db2:	4628      	mov	r0, r5
    6db4:	6013      	str	r3, [r2, #0]
    6db6:	b005      	add	sp, #20
    6db8:	ecbd 8b02 	vpop	{d8}
    6dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6dc0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    6dc4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    6dc8:	f1a2 0110 	sub.w	r1, r2, #16
    6dcc:	f816 2f01 	ldrb.w	r2, [r6, #1]!
    6dd0:	f818 2002 	ldrb.w	r2, [r8, r2]
    6dd4:	2a00      	cmp	r2, #0
    6dd6:	d0a4      	beq.n	6d22 <__gethex+0x14e>
    6dd8:	2a19      	cmp	r2, #25
    6dda:	ddf1      	ble.n	6dc0 <__gethex+0x1ec>
    6ddc:	e7a1      	b.n	6d22 <__gethex+0x14e>
    6dde:	4949      	ldr	r1, [pc, #292]	; (6f04 <__gethex+0x330>)
    6de0:	9301      	str	r3, [sp, #4]
    6de2:	2201      	movs	r2, #1
    6de4:	4620      	mov	r0, r4
    6de6:	f7ff f993 	bl	6110 <strncmp>
    6dea:	9b01      	ldr	r3, [sp, #4]
    6dec:	2800      	cmp	r0, #0
    6dee:	d16d      	bne.n	6ecc <__gethex+0x2f8>
    6df0:	7861      	ldrb	r1, [r4, #1]
    6df2:	f818 2001 	ldrb.w	r2, [r8, r1]
    6df6:	1c65      	adds	r5, r4, #1
    6df8:	2a00      	cmp	r2, #0
    6dfa:	d069      	beq.n	6ed0 <__gethex+0x2fc>
    6dfc:	2930      	cmp	r1, #48	; 0x30
    6dfe:	462c      	mov	r4, r5
    6e00:	d105      	bne.n	6e0e <__gethex+0x23a>
    6e02:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    6e06:	2b30      	cmp	r3, #48	; 0x30
    6e08:	d0fb      	beq.n	6e02 <__gethex+0x22e>
    6e0a:	f818 2003 	ldrb.w	r2, [r8, r3]
    6e0e:	fab2 f782 	clz	r7, r2
    6e12:	097f      	lsrs	r7, r7, #5
    6e14:	2301      	movs	r3, #1
    6e16:	e702      	b.n	6c1e <__gethex+0x4a>
    6e18:	2501      	movs	r5, #1
    6e1a:	b157      	cbz	r7, 6e32 <__gethex+0x25e>
    6e1c:	f8da 300c 	ldr.w	r3, [sl, #12]
    6e20:	2b02      	cmp	r3, #2
    6e22:	d05d      	beq.n	6ee0 <__gethex+0x30c>
    6e24:	2b03      	cmp	r3, #3
    6e26:	d05f      	beq.n	6ee8 <__gethex+0x314>
    6e28:	2b01      	cmp	r3, #1
    6e2a:	f000 8084 	beq.w	6f36 <__gethex+0x362>
    6e2e:	f045 0510 	orr.w	r5, r5, #16
    6e32:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6e34:	f8c3 b000 	str.w	fp, [r3]
    6e38:	9b02      	ldr	r3, [sp, #8]
    6e3a:	4628      	mov	r0, r5
    6e3c:	f8c3 9000 	str.w	r9, [r3]
    6e40:	b005      	add	sp, #20
    6e42:	ecbd 8b02 	vpop	{d8}
    6e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6e4a:	462e      	mov	r6, r5
    6e4c:	e702      	b.n	6c54 <__gethex+0x80>
    6e4e:	2001      	movs	r0, #1
    6e50:	78aa      	ldrb	r2, [r5, #2]
    6e52:	1cae      	adds	r6, r5, #2
    6e54:	e758      	b.n	6d08 <__gethex+0x134>
    6e56:	1b06      	subs	r6, r0, r4
    6e58:	4631      	mov	r1, r6
    6e5a:	4658      	mov	r0, fp
    6e5c:	f000 ff96 	bl	7d8c <__any_on>
    6e60:	4607      	mov	r7, r0
    6e62:	b178      	cbz	r0, 6e84 <__gethex+0x2b0>
    6e64:	1e72      	subs	r2, r6, #1
    6e66:	1153      	asrs	r3, r2, #5
    6e68:	9901      	ldr	r1, [sp, #4]
    6e6a:	2701      	movs	r7, #1
    6e6c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    6e70:	f002 031f 	and.w	r3, r2, #31
    6e74:	fa07 f303 	lsl.w	r3, r7, r3
    6e78:	420b      	tst	r3, r1
    6e7a:	d003      	beq.n	6e84 <__gethex+0x2b0>
    6e7c:	42ba      	cmp	r2, r7
    6e7e:	f300 80e2 	bgt.w	7046 <__gethex+0x472>
    6e82:	2702      	movs	r7, #2
    6e84:	4631      	mov	r1, r6
    6e86:	4658      	mov	r0, fp
    6e88:	44b1      	add	r9, r6
    6e8a:	f7ff fe51 	bl	6b30 <rshift>
    6e8e:	e76f      	b.n	6d70 <__gethex+0x19c>
    6e90:	f109 35ff 	add.w	r5, r9, #4294967295
    6e94:	2f00      	cmp	r7, #0
    6e96:	f040 80ce 	bne.w	7036 <__gethex+0x462>
    6e9a:	2d00      	cmp	r5, #0
    6e9c:	f040 80cd 	bne.w	703a <__gethex+0x466>
    6ea0:	116b      	asrs	r3, r5, #5
    6ea2:	9a01      	ldr	r2, [sp, #4]
    6ea4:	f005 051f 	and.w	r5, r5, #31
    6ea8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    6eac:	2301      	movs	r3, #1
    6eae:	40ab      	lsls	r3, r5
    6eb0:	4213      	tst	r3, r2
    6eb2:	4649      	mov	r1, r9
    6eb4:	4658      	mov	r0, fp
    6eb6:	bf18      	it	ne
    6eb8:	f047 0702 	orrne.w	r7, r7, #2
    6ebc:	eba4 0409 	sub.w	r4, r4, r9
    6ec0:	f7ff fe36 	bl	6b30 <rshift>
    6ec4:	2502      	movs	r5, #2
    6ec6:	f8da 9004 	ldr.w	r9, [sl, #4]
    6eca:	e7a6      	b.n	6e1a <__gethex+0x246>
    6ecc:	7821      	ldrb	r1, [r4, #0]
    6ece:	4625      	mov	r5, r4
    6ed0:	f001 01df 	and.w	r1, r1, #223	; 0xdf
    6ed4:	2950      	cmp	r1, #80	; 0x50
    6ed6:	f000 80bf 	beq.w	7058 <__gethex+0x484>
    6eda:	f8cb 5000 	str.w	r5, [fp]
    6ede:	e727      	b.n	6d30 <__gethex+0x15c>
    6ee0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6ee2:	f1c3 0301 	rsb	r3, r3, #1
    6ee6:	9311      	str	r3, [sp, #68]	; 0x44
    6ee8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6eea:	2b00      	cmp	r3, #0
    6eec:	d09f      	beq.n	6e2e <__gethex+0x25a>
    6eee:	f8db 7010 	ldr.w	r7, [fp, #16]
    6ef2:	f8dd 8004 	ldr.w	r8, [sp, #4]
    6ef6:	00ba      	lsls	r2, r7, #2
    6ef8:	4643      	mov	r3, r8
    6efa:	9201      	str	r2, [sp, #4]
    6efc:	eb08 0087 	add.w	r0, r8, r7, lsl #2
    6f00:	2100      	movs	r1, #0
    6f02:	e007      	b.n	6f14 <__gethex+0x340>
    6f04:	200008e0 	.word	0x200008e0
    6f08:	200005f8 	.word	0x200005f8
    6f0c:	4298      	cmp	r0, r3
    6f0e:	f843 1c04 	str.w	r1, [r3, #-4]
    6f12:	d93f      	bls.n	6f94 <__gethex+0x3c0>
    6f14:	461e      	mov	r6, r3
    6f16:	f853 2b04 	ldr.w	r2, [r3], #4
    6f1a:	f1b2 3fff 	cmp.w	r2, #4294967295
    6f1e:	d0f5      	beq.n	6f0c <__gethex+0x338>
    6f20:	3201      	adds	r2, #1
    6f22:	2d02      	cmp	r5, #2
    6f24:	6032      	str	r2, [r6, #0]
    6f26:	f000 80bf 	beq.w	70a8 <__gethex+0x4d4>
    6f2a:	f014 041f 	ands.w	r4, r4, #31
    6f2e:	f040 80e7 	bne.w	7100 <__gethex+0x52c>
    6f32:	2521      	movs	r5, #33	; 0x21
    6f34:	e77d      	b.n	6e32 <__gethex+0x25e>
    6f36:	07ba      	lsls	r2, r7, #30
    6f38:	f57f af79 	bpl.w	6e2e <__gethex+0x25a>
    6f3c:	9b01      	ldr	r3, [sp, #4]
    6f3e:	681b      	ldr	r3, [r3, #0]
    6f40:	431f      	orrs	r7, r3
    6f42:	07fb      	lsls	r3, r7, #31
    6f44:	d4d3      	bmi.n	6eee <__gethex+0x31a>
    6f46:	e772      	b.n	6e2e <__gethex+0x25a>
    6f48:	2000      	movs	r0, #0
    6f4a:	e781      	b.n	6e50 <__gethex+0x27c>
    6f4c:	1a22      	subs	r2, r4, r0
    6f4e:	4659      	mov	r1, fp
    6f50:	ee18 0a10 	vmov	r0, s16
    6f54:	eba9 0902 	sub.w	r9, r9, r2
    6f58:	f000 fc76 	bl	7848 <__lshift>
    6f5c:	f100 0314 	add.w	r3, r0, #20
    6f60:	4683      	mov	fp, r0
    6f62:	9301      	str	r3, [sp, #4]
    6f64:	2700      	movs	r7, #0
    6f66:	e703      	b.n	6d70 <__gethex+0x19c>
    6f68:	7872      	ldrb	r2, [r6, #1]
    6f6a:	f818 0002 	ldrb.w	r0, [r8, r2]
    6f6e:	1c71      	adds	r1, r6, #1
    6f70:	2800      	cmp	r0, #0
    6f72:	f000 80a0 	beq.w	70b6 <__gethex+0x4e2>
    6f76:	460d      	mov	r5, r1
    6f78:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    6f7c:	f818 0002 	ldrb.w	r0, [r8, r2]
    6f80:	2800      	cmp	r0, #0
    6f82:	d1f8      	bne.n	6f76 <__gethex+0x3a2>
    6f84:	1b75      	subs	r5, r6, r5
    6f86:	ea4f 0985 	mov.w	r9, r5, lsl #2
    6f8a:	460e      	mov	r6, r1
    6f8c:	e65d      	b.n	6c4a <__gethex+0x76>
    6f8e:	3402      	adds	r4, #2
    6f90:	2300      	movs	r3, #0
    6f92:	e638      	b.n	6c06 <__gethex+0x32>
    6f94:	f8db 3008 	ldr.w	r3, [fp, #8]
    6f98:	429f      	cmp	r7, r3
    6f9a:	f280 808e 	bge.w	70ba <__gethex+0x4e6>
    6f9e:	463b      	mov	r3, r7
    6fa0:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
    6fa4:	2101      	movs	r1, #1
    6fa6:	3301      	adds	r3, #1
    6fa8:	2d02      	cmp	r5, #2
    6faa:	f8cb 3010 	str.w	r3, [fp, #16]
    6fae:	6151      	str	r1, [r2, #20]
    6fb0:	d07a      	beq.n	70a8 <__gethex+0x4d4>
    6fb2:	429f      	cmp	r7, r3
    6fb4:	dab9      	bge.n	6f2a <__gethex+0x356>
    6fb6:	2b00      	cmp	r3, #0
    6fb8:	f340 809b 	ble.w	70f2 <__gethex+0x51e>
    6fbc:	f8db 2014 	ldr.w	r2, [fp, #20]
    6fc0:	eb08 0383 	add.w	r3, r8, r3, lsl #2
    6fc4:	f10b 0018 	add.w	r0, fp, #24
    6fc8:	4283      	cmp	r3, r0
    6fca:	ea4f 0252 	mov.w	r2, r2, lsr #1
    6fce:	f240 80b1 	bls.w	7134 <__gethex+0x560>
    6fd2:	4644      	mov	r4, r8
    6fd4:	6801      	ldr	r1, [r0, #0]
    6fd6:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
    6fda:	f844 2b04 	str.w	r2, [r4], #4
    6fde:	f850 2b04 	ldr.w	r2, [r0], #4
    6fe2:	4283      	cmp	r3, r0
    6fe4:	ea4f 0252 	mov.w	r2, r2, lsr #1
    6fe8:	d8f4      	bhi.n	6fd4 <__gethex+0x400>
    6fea:	eba3 030b 	sub.w	r3, r3, fp
    6fee:	3b19      	subs	r3, #25
    6ff0:	089b      	lsrs	r3, r3, #2
    6ff2:	3301      	adds	r3, #1
    6ff4:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
    6ff8:	eb08 0383 	add.w	r3, r8, r3, lsl #2
    6ffc:	2a00      	cmp	r2, #0
    6ffe:	f040 809d 	bne.w	713c <__gethex+0x568>
    7002:	eba3 0208 	sub.w	r2, r3, r8
    7006:	1092      	asrs	r2, r2, #2
    7008:	4543      	cmp	r3, r8
    700a:	f8cb 2010 	str.w	r2, [fp, #16]
    700e:	d073      	beq.n	70f8 <__gethex+0x524>
    7010:	f8da 3008 	ldr.w	r3, [sl, #8]
    7014:	f109 0901 	add.w	r9, r9, #1
    7018:	454b      	cmp	r3, r9
    701a:	da8a      	bge.n	6f32 <__gethex+0x35e>
    701c:	ee18 0a10 	vmov	r0, s16
    7020:	4659      	mov	r1, fp
    7022:	f000 f9d1 	bl	73c8 <_Bfree>
    7026:	9a10      	ldr	r2, [sp, #64]	; 0x40
    7028:	2300      	movs	r3, #0
    702a:	6013      	str	r3, [r2, #0]
    702c:	25a3      	movs	r5, #163	; 0xa3
    702e:	e683      	b.n	6d38 <__gethex+0x164>
    7030:	9e01      	ldr	r6, [sp, #4]
    7032:	2300      	movs	r3, #0
    7034:	e689      	b.n	6d4a <__gethex+0x176>
    7036:	2701      	movs	r7, #1
    7038:	e732      	b.n	6ea0 <__gethex+0x2cc>
    703a:	4629      	mov	r1, r5
    703c:	4658      	mov	r0, fp
    703e:	f000 fea5 	bl	7d8c <__any_on>
    7042:	4607      	mov	r7, r0
    7044:	e72c      	b.n	6ea0 <__gethex+0x2cc>
    7046:	1eb1      	subs	r1, r6, #2
    7048:	4658      	mov	r0, fp
    704a:	f000 fe9f 	bl	7d8c <__any_on>
    704e:	2800      	cmp	r0, #0
    7050:	f43f af17 	beq.w	6e82 <__gethex+0x2ae>
    7054:	2703      	movs	r7, #3
    7056:	e715      	b.n	6e84 <__gethex+0x2b0>
    7058:	f04f 0900 	mov.w	r9, #0
    705c:	2701      	movs	r7, #1
    705e:	e64a      	b.n	6cf6 <__gethex+0x122>
    7060:	9a11      	ldr	r2, [sp, #68]	; 0x44
    7062:	2a00      	cmp	r2, #0
    7064:	f47f ae9d 	bne.w	6da2 <__gethex+0x1ce>
    7068:	9902      	ldr	r1, [sp, #8]
    706a:	600b      	str	r3, [r1, #0]
    706c:	9b01      	ldr	r3, [sp, #4]
    706e:	2201      	movs	r2, #1
    7070:	f8cb 2010 	str.w	r2, [fp, #16]
    7074:	601a      	str	r2, [r3, #0]
    7076:	9b10      	ldr	r3, [sp, #64]	; 0x40
    7078:	2562      	movs	r5, #98	; 0x62
    707a:	f8c3 b000 	str.w	fp, [r3]
    707e:	e65b      	b.n	6d38 <__gethex+0x164>
    7080:	454c      	cmp	r4, r9
    7082:	f47f ae8e 	bne.w	6da2 <__gethex+0x1ce>
    7086:	2c01      	cmp	r4, #1
    7088:	d0ee      	beq.n	7068 <__gethex+0x494>
    708a:	1e61      	subs	r1, r4, #1
    708c:	4658      	mov	r0, fp
    708e:	f000 fe7d 	bl	7d8c <__any_on>
    7092:	2800      	cmp	r0, #0
    7094:	f43f ae85 	beq.w	6da2 <__gethex+0x1ce>
    7098:	f8da 3004 	ldr.w	r3, [sl, #4]
    709c:	e7e4      	b.n	7068 <__gethex+0x494>
    709e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    70a0:	2a00      	cmp	r2, #0
    70a2:	f43f ae7e 	beq.w	6da2 <__gethex+0x1ce>
    70a6:	e7df      	b.n	7068 <__gethex+0x494>
    70a8:	f8da 3000 	ldr.w	r3, [sl]
    70ac:	3b01      	subs	r3, #1
    70ae:	42a3      	cmp	r3, r4
    70b0:	d034      	beq.n	711c <__gethex+0x548>
    70b2:	2522      	movs	r5, #34	; 0x22
    70b4:	e6bd      	b.n	6e32 <__gethex+0x25e>
    70b6:	460e      	mov	r6, r1
    70b8:	e5c7      	b.n	6c4a <__gethex+0x76>
    70ba:	f8db 1004 	ldr.w	r1, [fp, #4]
    70be:	ee18 0a10 	vmov	r0, s16
    70c2:	3101      	adds	r1, #1
    70c4:	f000 f95a 	bl	737c <_Balloc>
    70c8:	4606      	mov	r6, r0
    70ca:	b3c8      	cbz	r0, 7140 <__gethex+0x56c>
    70cc:	f8db 3010 	ldr.w	r3, [fp, #16]
    70d0:	3302      	adds	r3, #2
    70d2:	009a      	lsls	r2, r3, #2
    70d4:	f10b 010c 	add.w	r1, fp, #12
    70d8:	300c      	adds	r0, #12
    70da:	f7fb f915 	bl	2308 <memcpy>
    70de:	4659      	mov	r1, fp
    70e0:	ee18 0a10 	vmov	r0, s16
    70e4:	f000 f970 	bl	73c8 <_Bfree>
    70e8:	f106 0814 	add.w	r8, r6, #20
    70ec:	6933      	ldr	r3, [r6, #16]
    70ee:	46b3      	mov	fp, r6
    70f0:	e756      	b.n	6fa0 <__gethex+0x3cc>
    70f2:	2300      	movs	r3, #0
    70f4:	f8cb 3010 	str.w	r3, [fp, #16]
    70f8:	2300      	movs	r3, #0
    70fa:	f8cb 3014 	str.w	r3, [fp, #20]
    70fe:	e787      	b.n	7010 <__gethex+0x43c>
    7100:	9b01      	ldr	r3, [sp, #4]
    7102:	4443      	add	r3, r8
    7104:	f1c4 0420 	rsb	r4, r4, #32
    7108:	f853 0c04 	ldr.w	r0, [r3, #-4]
    710c:	f000 fa10 	bl	7530 <__hi0bits>
    7110:	42a0      	cmp	r0, r4
    7112:	f6bf af0e 	bge.w	6f32 <__gethex+0x35e>
    7116:	f8db 3010 	ldr.w	r3, [fp, #16]
    711a:	e74c      	b.n	6fb6 <__gethex+0x3e2>
    711c:	1163      	asrs	r3, r4, #5
    711e:	f004 041f 	and.w	r4, r4, #31
    7122:	f858 2023 	ldr.w	r2, [r8, r3, lsl #2]
    7126:	2301      	movs	r3, #1
    7128:	40a3      	lsls	r3, r4
    712a:	4213      	tst	r3, r2
    712c:	bf0c      	ite	eq
    712e:	2522      	moveq	r5, #34	; 0x22
    7130:	2521      	movne	r5, #33	; 0x21
    7132:	e67e      	b.n	6e32 <__gethex+0x25e>
    7134:	f8c8 2000 	str.w	r2, [r8]
    7138:	4643      	mov	r3, r8
    713a:	b16a      	cbz	r2, 7158 <__gethex+0x584>
    713c:	3304      	adds	r3, #4
    713e:	e760      	b.n	7002 <__gethex+0x42e>
    7140:	4b07      	ldr	r3, [pc, #28]	; (7160 <__gethex+0x58c>)
    7142:	4808      	ldr	r0, [pc, #32]	; (7164 <__gethex+0x590>)
    7144:	4632      	mov	r2, r6
    7146:	2184      	movs	r1, #132	; 0x84
    7148:	f004 fa7e 	bl	b648 <__assert_func>
    714c:	4b04      	ldr	r3, [pc, #16]	; (7160 <__gethex+0x58c>)
    714e:	4805      	ldr	r0, [pc, #20]	; (7164 <__gethex+0x590>)
    7150:	465a      	mov	r2, fp
    7152:	21e4      	movs	r1, #228	; 0xe4
    7154:	f004 fa78 	bl	b648 <__assert_func>
    7158:	f8cb 2010 	str.w	r2, [fp, #16]
    715c:	e7cc      	b.n	70f8 <__gethex+0x524>
    715e:	bf00      	nop
    7160:	20000580 	.word	0x20000580
    7164:	20000594 	.word	0x20000594

00007168 <__match>:
    7168:	b410      	push	{r4}
    716a:	6804      	ldr	r4, [r0, #0]
    716c:	e009      	b.n	7182 <__match+0x1a>
    716e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    7172:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
    7176:	f1bc 0f19 	cmp.w	ip, #25
    717a:	bf98      	it	ls
    717c:	3320      	addls	r3, #32
    717e:	4293      	cmp	r3, r2
    7180:	d109      	bne.n	7196 <__match+0x2e>
    7182:	f811 2b01 	ldrb.w	r2, [r1], #1
    7186:	2a00      	cmp	r2, #0
    7188:	d1f1      	bne.n	716e <__match+0x6>
    718a:	3401      	adds	r4, #1
    718c:	6004      	str	r4, [r0, #0]
    718e:	2001      	movs	r0, #1
    7190:	f85d 4b04 	ldr.w	r4, [sp], #4
    7194:	4770      	bx	lr
    7196:	2000      	movs	r0, #0
    7198:	f85d 4b04 	ldr.w	r4, [sp], #4
    719c:	4770      	bx	lr
    719e:	bf00      	nop

000071a0 <__hexnan>:
    71a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    71a4:	6809      	ldr	r1, [r1, #0]
    71a6:	b085      	sub	sp, #20
    71a8:	114b      	asrs	r3, r1, #5
    71aa:	f011 011f 	ands.w	r1, r1, #31
    71ae:	9002      	str	r0, [sp, #8]
    71b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    71b4:	9103      	str	r1, [sp, #12]
    71b6:	f040 808f 	bne.w	72d8 <__hexnan+0x138>
    71ba:	1f1d      	subs	r5, r3, #4
    71bc:	9301      	str	r3, [sp, #4]
    71be:	9b02      	ldr	r3, [sp, #8]
    71c0:	9901      	ldr	r1, [sp, #4]
    71c2:	681c      	ldr	r4, [r3, #0]
    71c4:	2300      	movs	r3, #0
    71c6:	f841 3c04 	str.w	r3, [r1, #-4]
    71ca:	7861      	ldrb	r1, [r4, #1]
    71cc:	3401      	adds	r4, #1
    71ce:	2900      	cmp	r1, #0
    71d0:	f000 8098 	beq.w	7304 <__hexnan+0x164>
    71d4:	f8df 9174 	ldr.w	r9, [pc, #372]	; 734c <__hexnan+0x1ac>
    71d8:	46a8      	mov	r8, r5
    71da:	46ac      	mov	ip, r5
    71dc:	469a      	mov	sl, r3
    71de:	461e      	mov	r6, r3
    71e0:	e00e      	b.n	7200 <__hexnan+0x60>
    71e2:	2920      	cmp	r1, #32
    71e4:	f200 808c 	bhi.w	7300 <__hexnan+0x160>
    71e8:	4556      	cmp	r6, sl
    71ea:	dd06      	ble.n	71fa <__hexnan+0x5a>
    71ec:	45c4      	cmp	ip, r8
    71ee:	d201      	bcs.n	71f4 <__hexnan+0x54>
    71f0:	2b07      	cmp	r3, #7
    71f2:	dd5b      	ble.n	72ac <__hexnan+0x10c>
    71f4:	4562      	cmp	r2, ip
    71f6:	d351      	bcc.n	729c <__hexnan+0xfc>
    71f8:	2308      	movs	r3, #8
    71fa:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    71fe:	b1a1      	cbz	r1, 722a <__hexnan+0x8a>
    7200:	f819 0001 	ldrb.w	r0, [r9, r1]
    7204:	2800      	cmp	r0, #0
    7206:	d0ec      	beq.n	71e2 <__hexnan+0x42>
    7208:	3301      	adds	r3, #1
    720a:	2b08      	cmp	r3, #8
    720c:	f106 0601 	add.w	r6, r6, #1
    7210:	dc3a      	bgt.n	7288 <__hexnan+0xe8>
    7212:	f8dc 1000 	ldr.w	r1, [ip]
    7216:	0109      	lsls	r1, r1, #4
    7218:	f000 000f 	and.w	r0, r0, #15
    721c:	4308      	orrs	r0, r1
    721e:	f8cc 0000 	str.w	r0, [ip]
    7222:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    7226:	2900      	cmp	r1, #0
    7228:	d1ea      	bne.n	7200 <__hexnan+0x60>
    722a:	2e00      	cmp	r6, #0
    722c:	d06a      	beq.n	7304 <__hexnan+0x164>
    722e:	45c4      	cmp	ip, r8
    7230:	d201      	bcs.n	7236 <__hexnan+0x96>
    7232:	2b07      	cmp	r3, #7
    7234:	dd74      	ble.n	7320 <__hexnan+0x180>
    7236:	4562      	cmp	r2, ip
    7238:	d252      	bcs.n	72e0 <__hexnan+0x140>
    723a:	1f11      	subs	r1, r2, #4
    723c:	4663      	mov	r3, ip
    723e:	f853 0b04 	ldr.w	r0, [r3], #4
    7242:	f841 0f04 	str.w	r0, [r1, #4]!
    7246:	42ab      	cmp	r3, r5
    7248:	d9f9      	bls.n	723e <__hexnan+0x9e>
    724a:	eba5 030c 	sub.w	r3, r5, ip
    724e:	f023 0303 	bic.w	r3, r3, #3
    7252:	1c69      	adds	r1, r5, #1
    7254:	3304      	adds	r3, #4
    7256:	f10c 0c01 	add.w	ip, ip, #1
    725a:	4561      	cmp	r1, ip
    725c:	bf38      	it	cc
    725e:	2304      	movcc	r3, #4
    7260:	4413      	add	r3, r2
    7262:	2100      	movs	r1, #0
    7264:	f843 1b04 	str.w	r1, [r3], #4
    7268:	42ab      	cmp	r3, r5
    726a:	d9fb      	bls.n	7264 <__hexnan+0xc4>
    726c:	9b01      	ldr	r3, [sp, #4]
    726e:	f853 3c04 	ldr.w	r3, [r3, #-4]
    7272:	b92b      	cbnz	r3, 7280 <__hexnan+0xe0>
    7274:	42aa      	cmp	r2, r5
    7276:	d049      	beq.n	730c <__hexnan+0x16c>
    7278:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    727c:	2b00      	cmp	r3, #0
    727e:	d0f9      	beq.n	7274 <__hexnan+0xd4>
    7280:	2005      	movs	r0, #5
    7282:	b005      	add	sp, #20
    7284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7288:	4562      	cmp	r2, ip
    728a:	d2b6      	bcs.n	71fa <__hexnan+0x5a>
    728c:	2300      	movs	r3, #0
    728e:	f84c 3c04 	str.w	r3, [ip, #-4]
    7292:	4619      	mov	r1, r3
    7294:	f1ac 0c04 	sub.w	ip, ip, #4
    7298:	2301      	movs	r3, #1
    729a:	e7bd      	b.n	7218 <__hexnan+0x78>
    729c:	2300      	movs	r3, #0
    729e:	f1ac 0804 	sub.w	r8, ip, #4
    72a2:	f84c 3c04 	str.w	r3, [ip, #-4]
    72a6:	46b2      	mov	sl, r6
    72a8:	46c4      	mov	ip, r8
    72aa:	e7a6      	b.n	71fa <__hexnan+0x5a>
    72ac:	f1c3 0108 	rsb	r1, r3, #8
    72b0:	f8dc 3000 	ldr.w	r3, [ip]
    72b4:	0089      	lsls	r1, r1, #2
    72b6:	f1c1 0e20 	rsb	lr, r1, #32
    72ba:	4660      	mov	r0, ip
    72bc:	469b      	mov	fp, r3
    72be:	6847      	ldr	r7, [r0, #4]
    72c0:	fa07 f30e 	lsl.w	r3, r7, lr
    72c4:	ea43 030b 	orr.w	r3, r3, fp
    72c8:	fa27 fb01 	lsr.w	fp, r7, r1
    72cc:	6003      	str	r3, [r0, #0]
    72ce:	f840 bf04 	str.w	fp, [r0, #4]!
    72d2:	4540      	cmp	r0, r8
    72d4:	d3f3      	bcc.n	72be <__hexnan+0x11e>
    72d6:	e78d      	b.n	71f4 <__hexnan+0x54>
    72d8:	1d19      	adds	r1, r3, #4
    72da:	9101      	str	r1, [sp, #4]
    72dc:	461d      	mov	r5, r3
    72de:	e76e      	b.n	71be <__hexnan+0x1e>
    72e0:	9b03      	ldr	r3, [sp, #12]
    72e2:	2b00      	cmp	r3, #0
    72e4:	d0c2      	beq.n	726c <__hexnan+0xcc>
    72e6:	9b03      	ldr	r3, [sp, #12]
    72e8:	9801      	ldr	r0, [sp, #4]
    72ea:	f1c3 0120 	rsb	r1, r3, #32
    72ee:	f04f 33ff 	mov.w	r3, #4294967295
    72f2:	40cb      	lsrs	r3, r1
    72f4:	f850 1c04 	ldr.w	r1, [r0, #-4]
    72f8:	400b      	ands	r3, r1
    72fa:	f840 3c04 	str.w	r3, [r0, #-4]
    72fe:	e7b8      	b.n	7272 <__hexnan+0xd2>
    7300:	2929      	cmp	r1, #41	; 0x29
    7302:	d009      	beq.n	7318 <__hexnan+0x178>
    7304:	2004      	movs	r0, #4
    7306:	b005      	add	sp, #20
    7308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    730c:	2301      	movs	r3, #1
    730e:	2005      	movs	r0, #5
    7310:	602b      	str	r3, [r5, #0]
    7312:	b005      	add	sp, #20
    7314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7318:	9902      	ldr	r1, [sp, #8]
    731a:	3401      	adds	r4, #1
    731c:	600c      	str	r4, [r1, #0]
    731e:	e784      	b.n	722a <__hexnan+0x8a>
    7320:	f8dc 1000 	ldr.w	r1, [ip]
    7324:	f1c3 0308 	rsb	r3, r3, #8
    7328:	009b      	lsls	r3, r3, #2
    732a:	f1c3 0720 	rsb	r7, r3, #32
    732e:	4664      	mov	r4, ip
    7330:	4608      	mov	r0, r1
    7332:	6866      	ldr	r6, [r4, #4]
    7334:	fa06 f107 	lsl.w	r1, r6, r7
    7338:	4301      	orrs	r1, r0
    733a:	fa26 f003 	lsr.w	r0, r6, r3
    733e:	6021      	str	r1, [r4, #0]
    7340:	f844 0f04 	str.w	r0, [r4, #4]!
    7344:	4544      	cmp	r4, r8
    7346:	d3f4      	bcc.n	7332 <__hexnan+0x192>
    7348:	e775      	b.n	7236 <__hexnan+0x96>
    734a:	bf00      	nop
    734c:	200005f8 	.word	0x200005f8

00007350 <__ascii_mbtowc>:
    7350:	b082      	sub	sp, #8
    7352:	b149      	cbz	r1, 7368 <__ascii_mbtowc+0x18>
    7354:	b15a      	cbz	r2, 736e <__ascii_mbtowc+0x1e>
    7356:	b16b      	cbz	r3, 7374 <__ascii_mbtowc+0x24>
    7358:	7813      	ldrb	r3, [r2, #0]
    735a:	600b      	str	r3, [r1, #0]
    735c:	7812      	ldrb	r2, [r2, #0]
    735e:	1e10      	subs	r0, r2, #0
    7360:	bf18      	it	ne
    7362:	2001      	movne	r0, #1
    7364:	b002      	add	sp, #8
    7366:	4770      	bx	lr
    7368:	a901      	add	r1, sp, #4
    736a:	2a00      	cmp	r2, #0
    736c:	d1f3      	bne.n	7356 <__ascii_mbtowc+0x6>
    736e:	4610      	mov	r0, r2
    7370:	b002      	add	sp, #8
    7372:	4770      	bx	lr
    7374:	f06f 0001 	mvn.w	r0, #1
    7378:	e7f4      	b.n	7364 <__ascii_mbtowc+0x14>
    737a:	bf00      	nop

0000737c <_Balloc>:
    737c:	6c43      	ldr	r3, [r0, #68]	; 0x44
    737e:	b570      	push	{r4, r5, r6, lr}
    7380:	4605      	mov	r5, r0
    7382:	460c      	mov	r4, r1
    7384:	b14b      	cbz	r3, 739a <_Balloc+0x1e>
    7386:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    738a:	b180      	cbz	r0, 73ae <_Balloc+0x32>
    738c:	6802      	ldr	r2, [r0, #0]
    738e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    7392:	2300      	movs	r3, #0
    7394:	e9c0 3303 	strd	r3, r3, [r0, #12]
    7398:	bd70      	pop	{r4, r5, r6, pc}
    739a:	2221      	movs	r2, #33	; 0x21
    739c:	2104      	movs	r1, #4
    739e:	f004 f973 	bl	b688 <_calloc_r>
    73a2:	4603      	mov	r3, r0
    73a4:	6468      	str	r0, [r5, #68]	; 0x44
    73a6:	2800      	cmp	r0, #0
    73a8:	d1ed      	bne.n	7386 <_Balloc+0xa>
    73aa:	2000      	movs	r0, #0
    73ac:	bd70      	pop	{r4, r5, r6, pc}
    73ae:	2101      	movs	r1, #1
    73b0:	fa01 f604 	lsl.w	r6, r1, r4
    73b4:	1d72      	adds	r2, r6, #5
    73b6:	0092      	lsls	r2, r2, #2
    73b8:	4628      	mov	r0, r5
    73ba:	f004 f965 	bl	b688 <_calloc_r>
    73be:	2800      	cmp	r0, #0
    73c0:	d0f3      	beq.n	73aa <_Balloc+0x2e>
    73c2:	e9c0 4601 	strd	r4, r6, [r0, #4]
    73c6:	e7e4      	b.n	7392 <_Balloc+0x16>

000073c8 <_Bfree>:
    73c8:	b131      	cbz	r1, 73d8 <_Bfree+0x10>
    73ca:	6c43      	ldr	r3, [r0, #68]	; 0x44
    73cc:	684a      	ldr	r2, [r1, #4]
    73ce:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    73d2:	6008      	str	r0, [r1, #0]
    73d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    73d8:	4770      	bx	lr
    73da:	bf00      	nop

000073dc <__multadd>:
    73dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    73e0:	690e      	ldr	r6, [r1, #16]
    73e2:	4680      	mov	r8, r0
    73e4:	460f      	mov	r7, r1
    73e6:	461d      	mov	r5, r3
    73e8:	f101 0e14 	add.w	lr, r1, #20
    73ec:	2000      	movs	r0, #0
    73ee:	f8de 1000 	ldr.w	r1, [lr]
    73f2:	b28c      	uxth	r4, r1
    73f4:	fb02 5304 	mla	r3, r2, r4, r5
    73f8:	0c09      	lsrs	r1, r1, #16
    73fa:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    73fe:	fb02 cc01 	mla	ip, r2, r1, ip
    7402:	3001      	adds	r0, #1
    7404:	b29c      	uxth	r4, r3
    7406:	eb04 440c 	add.w	r4, r4, ip, lsl #16
    740a:	4286      	cmp	r6, r0
    740c:	f84e 4b04 	str.w	r4, [lr], #4
    7410:	ea4f 451c 	mov.w	r5, ip, lsr #16
    7414:	dceb      	bgt.n	73ee <__multadd+0x12>
    7416:	b13d      	cbz	r5, 7428 <__multadd+0x4c>
    7418:	68bb      	ldr	r3, [r7, #8]
    741a:	42b3      	cmp	r3, r6
    741c:	dd07      	ble.n	742e <__multadd+0x52>
    741e:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    7422:	3601      	adds	r6, #1
    7424:	615d      	str	r5, [r3, #20]
    7426:	613e      	str	r6, [r7, #16]
    7428:	4638      	mov	r0, r7
    742a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    742e:	6879      	ldr	r1, [r7, #4]
    7430:	4640      	mov	r0, r8
    7432:	3101      	adds	r1, #1
    7434:	f7ff ffa2 	bl	737c <_Balloc>
    7438:	4604      	mov	r4, r0
    743a:	b1b0      	cbz	r0, 746a <__multadd+0x8e>
    743c:	693a      	ldr	r2, [r7, #16]
    743e:	3202      	adds	r2, #2
    7440:	f107 010c 	add.w	r1, r7, #12
    7444:	0092      	lsls	r2, r2, #2
    7446:	300c      	adds	r0, #12
    7448:	f7fa ff5e 	bl	2308 <memcpy>
    744c:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    7450:	687a      	ldr	r2, [r7, #4]
    7452:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    7456:	6039      	str	r1, [r7, #0]
    7458:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    745c:	4627      	mov	r7, r4
    745e:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    7462:	3601      	adds	r6, #1
    7464:	615d      	str	r5, [r3, #20]
    7466:	613e      	str	r6, [r7, #16]
    7468:	e7de      	b.n	7428 <__multadd+0x4c>
    746a:	4b03      	ldr	r3, [pc, #12]	; (7478 <__multadd+0x9c>)
    746c:	4803      	ldr	r0, [pc, #12]	; (747c <__multadd+0xa0>)
    746e:	4622      	mov	r2, r4
    7470:	21ba      	movs	r1, #186	; 0xba
    7472:	f004 f8e9 	bl	b648 <__assert_func>
    7476:	bf00      	nop
    7478:	20000580 	.word	0x20000580
    747c:	200006f8 	.word	0x200006f8

00007480 <__s2b>:
    7480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7484:	4617      	mov	r7, r2
    7486:	4a27      	ldr	r2, [pc, #156]	; (7524 <__s2b+0xa4>)
    7488:	461e      	mov	r6, r3
    748a:	3308      	adds	r3, #8
    748c:	460c      	mov	r4, r1
    748e:	2e09      	cmp	r6, #9
    7490:	fb82 1203 	smull	r1, r2, r2, r3
    7494:	ea4f 73e3 	mov.w	r3, r3, asr #31
    7498:	4605      	mov	r5, r0
    749a:	ebc3 0362 	rsb	r3, r3, r2, asr #1
    749e:	dd39      	ble.n	7514 <__s2b+0x94>
    74a0:	f04f 0c01 	mov.w	ip, #1
    74a4:	2100      	movs	r1, #0
    74a6:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    74aa:	4563      	cmp	r3, ip
    74ac:	f101 0101 	add.w	r1, r1, #1
    74b0:	dcf9      	bgt.n	74a6 <__s2b+0x26>
    74b2:	4628      	mov	r0, r5
    74b4:	f7ff ff62 	bl	737c <_Balloc>
    74b8:	4601      	mov	r1, r0
    74ba:	b368      	cbz	r0, 7518 <__s2b+0x98>
    74bc:	9b08      	ldr	r3, [sp, #32]
    74be:	6143      	str	r3, [r0, #20]
    74c0:	2f09      	cmp	r7, #9
    74c2:	f04f 0301 	mov.w	r3, #1
    74c6:	6103      	str	r3, [r0, #16]
    74c8:	dc12      	bgt.n	74f0 <__s2b+0x70>
    74ca:	340a      	adds	r4, #10
    74cc:	2709      	movs	r7, #9
    74ce:	42be      	cmp	r6, r7
    74d0:	dd0b      	ble.n	74ea <__s2b+0x6a>
    74d2:	1bf2      	subs	r2, r6, r7
    74d4:	18a6      	adds	r6, r4, r2
    74d6:	f814 3b01 	ldrb.w	r3, [r4], #1
    74da:	220a      	movs	r2, #10
    74dc:	3b30      	subs	r3, #48	; 0x30
    74de:	4628      	mov	r0, r5
    74e0:	f7ff ff7c 	bl	73dc <__multadd>
    74e4:	42a6      	cmp	r6, r4
    74e6:	4601      	mov	r1, r0
    74e8:	d1f5      	bne.n	74d6 <__s2b+0x56>
    74ea:	4608      	mov	r0, r1
    74ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    74f0:	f104 0909 	add.w	r9, r4, #9
    74f4:	46c8      	mov	r8, r9
    74f6:	443c      	add	r4, r7
    74f8:	f818 3b01 	ldrb.w	r3, [r8], #1
    74fc:	220a      	movs	r2, #10
    74fe:	3b30      	subs	r3, #48	; 0x30
    7500:	4628      	mov	r0, r5
    7502:	f7ff ff6b 	bl	73dc <__multadd>
    7506:	45a0      	cmp	r8, r4
    7508:	4601      	mov	r1, r0
    750a:	d1f5      	bne.n	74f8 <__s2b+0x78>
    750c:	f1a7 0408 	sub.w	r4, r7, #8
    7510:	444c      	add	r4, r9
    7512:	e7dc      	b.n	74ce <__s2b+0x4e>
    7514:	2100      	movs	r1, #0
    7516:	e7cc      	b.n	74b2 <__s2b+0x32>
    7518:	460a      	mov	r2, r1
    751a:	4b03      	ldr	r3, [pc, #12]	; (7528 <__s2b+0xa8>)
    751c:	4803      	ldr	r0, [pc, #12]	; (752c <__s2b+0xac>)
    751e:	21d3      	movs	r1, #211	; 0xd3
    7520:	f004 f892 	bl	b648 <__assert_func>
    7524:	38e38e39 	.word	0x38e38e39
    7528:	20000580 	.word	0x20000580
    752c:	200006f8 	.word	0x200006f8

00007530 <__hi0bits>:
    7530:	0c03      	lsrs	r3, r0, #16
    7532:	041b      	lsls	r3, r3, #16
    7534:	b9d3      	cbnz	r3, 756c <__hi0bits+0x3c>
    7536:	0400      	lsls	r0, r0, #16
    7538:	2310      	movs	r3, #16
    753a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
    753e:	bf04      	itt	eq
    7540:	0200      	lsleq	r0, r0, #8
    7542:	3308      	addeq	r3, #8
    7544:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
    7548:	bf04      	itt	eq
    754a:	0100      	lsleq	r0, r0, #4
    754c:	3304      	addeq	r3, #4
    754e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
    7552:	bf04      	itt	eq
    7554:	0080      	lsleq	r0, r0, #2
    7556:	3302      	addeq	r3, #2
    7558:	2800      	cmp	r0, #0
    755a:	db05      	blt.n	7568 <__hi0bits+0x38>
    755c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
    7560:	f103 0301 	add.w	r3, r3, #1
    7564:	bf08      	it	eq
    7566:	2320      	moveq	r3, #32
    7568:	4618      	mov	r0, r3
    756a:	4770      	bx	lr
    756c:	2300      	movs	r3, #0
    756e:	e7e4      	b.n	753a <__hi0bits+0xa>

00007570 <__lo0bits>:
    7570:	6803      	ldr	r3, [r0, #0]
    7572:	f013 0207 	ands.w	r2, r3, #7
    7576:	d008      	beq.n	758a <__lo0bits+0x1a>
    7578:	07d9      	lsls	r1, r3, #31
    757a:	d41f      	bmi.n	75bc <__lo0bits+0x4c>
    757c:	079a      	lsls	r2, r3, #30
    757e:	d522      	bpl.n	75c6 <__lo0bits+0x56>
    7580:	085b      	lsrs	r3, r3, #1
    7582:	6003      	str	r3, [r0, #0]
    7584:	2201      	movs	r2, #1
    7586:	4610      	mov	r0, r2
    7588:	4770      	bx	lr
    758a:	b299      	uxth	r1, r3
    758c:	b909      	cbnz	r1, 7592 <__lo0bits+0x22>
    758e:	0c1b      	lsrs	r3, r3, #16
    7590:	2210      	movs	r2, #16
    7592:	b2d9      	uxtb	r1, r3
    7594:	b909      	cbnz	r1, 759a <__lo0bits+0x2a>
    7596:	3208      	adds	r2, #8
    7598:	0a1b      	lsrs	r3, r3, #8
    759a:	0719      	lsls	r1, r3, #28
    759c:	bf04      	itt	eq
    759e:	091b      	lsreq	r3, r3, #4
    75a0:	3204      	addeq	r2, #4
    75a2:	0799      	lsls	r1, r3, #30
    75a4:	bf04      	itt	eq
    75a6:	089b      	lsreq	r3, r3, #2
    75a8:	3202      	addeq	r2, #2
    75aa:	07d9      	lsls	r1, r3, #31
    75ac:	d403      	bmi.n	75b6 <__lo0bits+0x46>
    75ae:	085b      	lsrs	r3, r3, #1
    75b0:	f102 0201 	add.w	r2, r2, #1
    75b4:	d005      	beq.n	75c2 <__lo0bits+0x52>
    75b6:	6003      	str	r3, [r0, #0]
    75b8:	4610      	mov	r0, r2
    75ba:	4770      	bx	lr
    75bc:	2200      	movs	r2, #0
    75be:	4610      	mov	r0, r2
    75c0:	4770      	bx	lr
    75c2:	2220      	movs	r2, #32
    75c4:	e7df      	b.n	7586 <__lo0bits+0x16>
    75c6:	089b      	lsrs	r3, r3, #2
    75c8:	2202      	movs	r2, #2
    75ca:	6003      	str	r3, [r0, #0]
    75cc:	4610      	mov	r0, r2
    75ce:	4770      	bx	lr

000075d0 <__i2b>:
    75d0:	b538      	push	{r3, r4, r5, lr}
    75d2:	6c43      	ldr	r3, [r0, #68]	; 0x44
    75d4:	4604      	mov	r4, r0
    75d6:	460d      	mov	r5, r1
    75d8:	b14b      	cbz	r3, 75ee <__i2b+0x1e>
    75da:	6858      	ldr	r0, [r3, #4]
    75dc:	b1b0      	cbz	r0, 760c <__i2b+0x3c>
    75de:	6802      	ldr	r2, [r0, #0]
    75e0:	605a      	str	r2, [r3, #4]
    75e2:	2200      	movs	r2, #0
    75e4:	2301      	movs	r3, #1
    75e6:	e9c0 3504 	strd	r3, r5, [r0, #16]
    75ea:	60c2      	str	r2, [r0, #12]
    75ec:	bd38      	pop	{r3, r4, r5, pc}
    75ee:	2221      	movs	r2, #33	; 0x21
    75f0:	2104      	movs	r1, #4
    75f2:	f004 f849 	bl	b688 <_calloc_r>
    75f6:	4603      	mov	r3, r0
    75f8:	6460      	str	r0, [r4, #68]	; 0x44
    75fa:	2800      	cmp	r0, #0
    75fc:	d1ed      	bne.n	75da <__i2b+0xa>
    75fe:	4b09      	ldr	r3, [pc, #36]	; (7624 <__i2b+0x54>)
    7600:	4809      	ldr	r0, [pc, #36]	; (7628 <__i2b+0x58>)
    7602:	2200      	movs	r2, #0
    7604:	f240 1145 	movw	r1, #325	; 0x145
    7608:	f004 f81e 	bl	b648 <__assert_func>
    760c:	221c      	movs	r2, #28
    760e:	2101      	movs	r1, #1
    7610:	4620      	mov	r0, r4
    7612:	f004 f839 	bl	b688 <_calloc_r>
    7616:	2800      	cmp	r0, #0
    7618:	d0f1      	beq.n	75fe <__i2b+0x2e>
    761a:	2201      	movs	r2, #1
    761c:	2302      	movs	r3, #2
    761e:	e9c0 2301 	strd	r2, r3, [r0, #4]
    7622:	e7de      	b.n	75e2 <__i2b+0x12>
    7624:	20000580 	.word	0x20000580
    7628:	200006f8 	.word	0x200006f8

0000762c <__multiply>:
    762c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7630:	690e      	ldr	r6, [r1, #16]
    7632:	6915      	ldr	r5, [r2, #16]
    7634:	42ae      	cmp	r6, r5
    7636:	b085      	sub	sp, #20
    7638:	4688      	mov	r8, r1
    763a:	4614      	mov	r4, r2
    763c:	db05      	blt.n	764a <__multiply+0x1e>
    763e:	462a      	mov	r2, r5
    7640:	4623      	mov	r3, r4
    7642:	4635      	mov	r5, r6
    7644:	460c      	mov	r4, r1
    7646:	4616      	mov	r6, r2
    7648:	4698      	mov	r8, r3
    764a:	68a3      	ldr	r3, [r4, #8]
    764c:	6861      	ldr	r1, [r4, #4]
    764e:	19af      	adds	r7, r5, r6
    7650:	42bb      	cmp	r3, r7
    7652:	bfb8      	it	lt
    7654:	3101      	addlt	r1, #1
    7656:	f7ff fe91 	bl	737c <_Balloc>
    765a:	9001      	str	r0, [sp, #4]
    765c:	2800      	cmp	r0, #0
    765e:	f000 8087 	beq.w	7770 <__multiply+0x144>
    7662:	9b01      	ldr	r3, [sp, #4]
    7664:	f103 0914 	add.w	r9, r3, #20
    7668:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
    766c:	45d1      	cmp	r9, sl
    766e:	d205      	bcs.n	767c <__multiply+0x50>
    7670:	464b      	mov	r3, r9
    7672:	2200      	movs	r2, #0
    7674:	f843 2b04 	str.w	r2, [r3], #4
    7678:	459a      	cmp	sl, r3
    767a:	d8fb      	bhi.n	7674 <__multiply+0x48>
    767c:	f108 0814 	add.w	r8, r8, #20
    7680:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
    7684:	f104 0314 	add.w	r3, r4, #20
    7688:	45d8      	cmp	r8, fp
    768a:	461a      	mov	r2, r3
    768c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    7690:	d25f      	bcs.n	7752 <__multiply+0x126>
    7692:	1b2b      	subs	r3, r5, r4
    7694:	3b15      	subs	r3, #21
    7696:	f023 0303 	bic.w	r3, r3, #3
    769a:	3304      	adds	r3, #4
    769c:	3415      	adds	r4, #21
    769e:	42a5      	cmp	r5, r4
    76a0:	bf38      	it	cc
    76a2:	2304      	movcc	r3, #4
    76a4:	e9cd a702 	strd	sl, r7, [sp, #8]
    76a8:	46ac      	mov	ip, r5
    76aa:	461f      	mov	r7, r3
    76ac:	4692      	mov	sl, r2
    76ae:	e005      	b.n	76bc <__multiply+0x90>
    76b0:	0c09      	lsrs	r1, r1, #16
    76b2:	d129      	bne.n	7708 <__multiply+0xdc>
    76b4:	45c3      	cmp	fp, r8
    76b6:	f109 0904 	add.w	r9, r9, #4
    76ba:	d948      	bls.n	774e <__multiply+0x122>
    76bc:	f858 1b04 	ldr.w	r1, [r8], #4
    76c0:	b28d      	uxth	r5, r1
    76c2:	2d00      	cmp	r5, #0
    76c4:	d0f4      	beq.n	76b0 <__multiply+0x84>
    76c6:	4656      	mov	r6, sl
    76c8:	464c      	mov	r4, r9
    76ca:	2300      	movs	r3, #0
    76cc:	f856 1b04 	ldr.w	r1, [r6], #4
    76d0:	6822      	ldr	r2, [r4, #0]
    76d2:	fa1f fe81 	uxth.w	lr, r1
    76d6:	b290      	uxth	r0, r2
    76d8:	0c09      	lsrs	r1, r1, #16
    76da:	fb05 000e 	mla	r0, r5, lr, r0
    76de:	0c12      	lsrs	r2, r2, #16
    76e0:	4403      	add	r3, r0
    76e2:	fb05 2201 	mla	r2, r5, r1, r2
    76e6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    76ea:	b29b      	uxth	r3, r3
    76ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    76f0:	45b4      	cmp	ip, r6
    76f2:	f844 3b04 	str.w	r3, [r4], #4
    76f6:	ea4f 4312 	mov.w	r3, r2, lsr #16
    76fa:	d8e7      	bhi.n	76cc <__multiply+0xa0>
    76fc:	f849 3007 	str.w	r3, [r9, r7]
    7700:	f858 1c04 	ldr.w	r1, [r8, #-4]
    7704:	0c09      	lsrs	r1, r1, #16
    7706:	d0d5      	beq.n	76b4 <__multiply+0x88>
    7708:	f8d9 3000 	ldr.w	r3, [r9]
    770c:	4650      	mov	r0, sl
    770e:	461a      	mov	r2, r3
    7710:	464c      	mov	r4, r9
    7712:	2600      	movs	r6, #0
    7714:	8805      	ldrh	r5, [r0, #0]
    7716:	0c12      	lsrs	r2, r2, #16
    7718:	fb01 2205 	mla	r2, r1, r5, r2
    771c:	4416      	add	r6, r2
    771e:	b29b      	uxth	r3, r3
    7720:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    7724:	f844 3b04 	str.w	r3, [r4], #4
    7728:	f850 5b04 	ldr.w	r5, [r0], #4
    772c:	6822      	ldr	r2, [r4, #0]
    772e:	0c2d      	lsrs	r5, r5, #16
    7730:	b293      	uxth	r3, r2
    7732:	fb01 3305 	mla	r3, r1, r5, r3
    7736:	eb03 4316 	add.w	r3, r3, r6, lsr #16
    773a:	4584      	cmp	ip, r0
    773c:	ea4f 4613 	mov.w	r6, r3, lsr #16
    7740:	d8e8      	bhi.n	7714 <__multiply+0xe8>
    7742:	45c3      	cmp	fp, r8
    7744:	f849 3007 	str.w	r3, [r9, r7]
    7748:	f109 0904 	add.w	r9, r9, #4
    774c:	d8b6      	bhi.n	76bc <__multiply+0x90>
    774e:	e9dd a702 	ldrd	sl, r7, [sp, #8]
    7752:	2f00      	cmp	r7, #0
    7754:	dc02      	bgt.n	775c <__multiply+0x130>
    7756:	e005      	b.n	7764 <__multiply+0x138>
    7758:	3f01      	subs	r7, #1
    775a:	d003      	beq.n	7764 <__multiply+0x138>
    775c:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
    7760:	2b00      	cmp	r3, #0
    7762:	d0f9      	beq.n	7758 <__multiply+0x12c>
    7764:	9b01      	ldr	r3, [sp, #4]
    7766:	4618      	mov	r0, r3
    7768:	611f      	str	r7, [r3, #16]
    776a:	b005      	add	sp, #20
    776c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7770:	4b03      	ldr	r3, [pc, #12]	; (7780 <__multiply+0x154>)
    7772:	4804      	ldr	r0, [pc, #16]	; (7784 <__multiply+0x158>)
    7774:	9a01      	ldr	r2, [sp, #4]
    7776:	f44f 71b1 	mov.w	r1, #354	; 0x162
    777a:	f003 ff65 	bl	b648 <__assert_func>
    777e:	bf00      	nop
    7780:	20000580 	.word	0x20000580
    7784:	200006f8 	.word	0x200006f8

00007788 <__pow5mult>:
    7788:	f012 0303 	ands.w	r3, r2, #3
    778c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7790:	4614      	mov	r4, r2
    7792:	4606      	mov	r6, r0
    7794:	d132      	bne.n	77fc <__pow5mult+0x74>
    7796:	460d      	mov	r5, r1
    7798:	10a4      	asrs	r4, r4, #2
    779a:	d020      	beq.n	77de <__pow5mult+0x56>
    779c:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
    77a0:	f1b8 0f00 	cmp.w	r8, #0
    77a4:	d033      	beq.n	780e <__pow5mult+0x86>
    77a6:	07e3      	lsls	r3, r4, #31
    77a8:	f04f 0700 	mov.w	r7, #0
    77ac:	d407      	bmi.n	77be <__pow5mult+0x36>
    77ae:	1064      	asrs	r4, r4, #1
    77b0:	d015      	beq.n	77de <__pow5mult+0x56>
    77b2:	f8d8 0000 	ldr.w	r0, [r8]
    77b6:	b1a8      	cbz	r0, 77e4 <__pow5mult+0x5c>
    77b8:	4680      	mov	r8, r0
    77ba:	07e3      	lsls	r3, r4, #31
    77bc:	d5f7      	bpl.n	77ae <__pow5mult+0x26>
    77be:	4642      	mov	r2, r8
    77c0:	4629      	mov	r1, r5
    77c2:	4630      	mov	r0, r6
    77c4:	f7ff ff32 	bl	762c <__multiply>
    77c8:	b1b5      	cbz	r5, 77f8 <__pow5mult+0x70>
    77ca:	6869      	ldr	r1, [r5, #4]
    77cc:	6c73      	ldr	r3, [r6, #68]	; 0x44
    77ce:	1064      	asrs	r4, r4, #1
    77d0:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    77d4:	602a      	str	r2, [r5, #0]
    77d6:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
    77da:	4605      	mov	r5, r0
    77dc:	d1e9      	bne.n	77b2 <__pow5mult+0x2a>
    77de:	4628      	mov	r0, r5
    77e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    77e4:	4642      	mov	r2, r8
    77e6:	4641      	mov	r1, r8
    77e8:	4630      	mov	r0, r6
    77ea:	f7ff ff1f 	bl	762c <__multiply>
    77ee:	f8c8 0000 	str.w	r0, [r8]
    77f2:	6007      	str	r7, [r0, #0]
    77f4:	4680      	mov	r8, r0
    77f6:	e7e0      	b.n	77ba <__pow5mult+0x32>
    77f8:	4605      	mov	r5, r0
    77fa:	e7d8      	b.n	77ae <__pow5mult+0x26>
    77fc:	3b01      	subs	r3, #1
    77fe:	4a0f      	ldr	r2, [pc, #60]	; (783c <__pow5mult+0xb4>)
    7800:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    7804:	2300      	movs	r3, #0
    7806:	f7ff fde9 	bl	73dc <__multadd>
    780a:	4605      	mov	r5, r0
    780c:	e7c4      	b.n	7798 <__pow5mult+0x10>
    780e:	2101      	movs	r1, #1
    7810:	4630      	mov	r0, r6
    7812:	f7ff fdb3 	bl	737c <_Balloc>
    7816:	4680      	mov	r8, r0
    7818:	b140      	cbz	r0, 782c <__pow5mult+0xa4>
    781a:	2301      	movs	r3, #1
    781c:	f240 2271 	movw	r2, #625	; 0x271
    7820:	e9c0 3204 	strd	r3, r2, [r0, #16]
    7824:	2300      	movs	r3, #0
    7826:	6430      	str	r0, [r6, #64]	; 0x40
    7828:	6003      	str	r3, [r0, #0]
    782a:	e7bc      	b.n	77a6 <__pow5mult+0x1e>
    782c:	4b04      	ldr	r3, [pc, #16]	; (7840 <__pow5mult+0xb8>)
    782e:	4805      	ldr	r0, [pc, #20]	; (7844 <__pow5mult+0xbc>)
    7830:	4642      	mov	r2, r8
    7832:	f240 1145 	movw	r1, #325	; 0x145
    7836:	f003 ff07 	bl	b648 <__assert_func>
    783a:	bf00      	nop
    783c:	20007880 	.word	0x20007880
    7840:	20000580 	.word	0x20000580
    7844:	200006f8 	.word	0x200006f8

00007848 <__lshift>:
    7848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    784c:	460d      	mov	r5, r1
    784e:	4614      	mov	r4, r2
    7850:	692f      	ldr	r7, [r5, #16]
    7852:	68ab      	ldr	r3, [r5, #8]
    7854:	6849      	ldr	r1, [r1, #4]
    7856:	eb07 1762 	add.w	r7, r7, r2, asr #5
    785a:	1c7e      	adds	r6, r7, #1
    785c:	429e      	cmp	r6, r3
    785e:	4680      	mov	r8, r0
    7860:	ea4f 1962 	mov.w	r9, r2, asr #5
    7864:	dd04      	ble.n	7870 <__lshift+0x28>
    7866:	005b      	lsls	r3, r3, #1
    7868:	429e      	cmp	r6, r3
    786a:	f101 0101 	add.w	r1, r1, #1
    786e:	dcfa      	bgt.n	7866 <__lshift+0x1e>
    7870:	4640      	mov	r0, r8
    7872:	f7ff fd83 	bl	737c <_Balloc>
    7876:	4684      	mov	ip, r0
    7878:	2800      	cmp	r0, #0
    787a:	d052      	beq.n	7922 <__lshift+0xda>
    787c:	f1b9 0f00 	cmp.w	r9, #0
    7880:	f100 0214 	add.w	r2, r0, #20
    7884:	dd0e      	ble.n	78a4 <__lshift+0x5c>
    7886:	f109 0105 	add.w	r1, r9, #5
    788a:	ea4f 0e81 	mov.w	lr, r1, lsl #2
    788e:	4613      	mov	r3, r2
    7890:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    7894:	2000      	movs	r0, #0
    7896:	f843 0b04 	str.w	r0, [r3], #4
    789a:	428b      	cmp	r3, r1
    789c:	d1fb      	bne.n	7896 <__lshift+0x4e>
    789e:	f1ae 0314 	sub.w	r3, lr, #20
    78a2:	441a      	add	r2, r3
    78a4:	6929      	ldr	r1, [r5, #16]
    78a6:	f105 0314 	add.w	r3, r5, #20
    78aa:	f014 0e1f 	ands.w	lr, r4, #31
    78ae:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    78b2:	d02e      	beq.n	7912 <__lshift+0xca>
    78b4:	f1ce 0920 	rsb	r9, lr, #32
    78b8:	4610      	mov	r0, r2
    78ba:	f04f 0a00 	mov.w	sl, #0
    78be:	681c      	ldr	r4, [r3, #0]
    78c0:	fa04 f40e 	lsl.w	r4, r4, lr
    78c4:	ea44 040a 	orr.w	r4, r4, sl
    78c8:	f840 4b04 	str.w	r4, [r0], #4
    78cc:	f853 4b04 	ldr.w	r4, [r3], #4
    78d0:	4299      	cmp	r1, r3
    78d2:	fa24 fa09 	lsr.w	sl, r4, r9
    78d6:	d8f2      	bhi.n	78be <__lshift+0x76>
    78d8:	1b4b      	subs	r3, r1, r5
    78da:	3b15      	subs	r3, #21
    78dc:	f023 0303 	bic.w	r3, r3, #3
    78e0:	3304      	adds	r3, #4
    78e2:	f105 0015 	add.w	r0, r5, #21
    78e6:	4281      	cmp	r1, r0
    78e8:	bf38      	it	cc
    78ea:	2304      	movcc	r3, #4
    78ec:	f1ba 0f00 	cmp.w	sl, #0
    78f0:	bf18      	it	ne
    78f2:	4637      	movne	r7, r6
    78f4:	f842 a003 	str.w	sl, [r2, r3]
    78f8:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    78fc:	686a      	ldr	r2, [r5, #4]
    78fe:	f8cc 7010 	str.w	r7, [ip, #16]
    7902:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    7906:	6029      	str	r1, [r5, #0]
    7908:	4660      	mov	r0, ip
    790a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
    790e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7912:	3a04      	subs	r2, #4
    7914:	f853 0b04 	ldr.w	r0, [r3], #4
    7918:	f842 0f04 	str.w	r0, [r2, #4]!
    791c:	4299      	cmp	r1, r3
    791e:	d8f9      	bhi.n	7914 <__lshift+0xcc>
    7920:	e7ea      	b.n	78f8 <__lshift+0xb0>
    7922:	4b03      	ldr	r3, [pc, #12]	; (7930 <__lshift+0xe8>)
    7924:	4803      	ldr	r0, [pc, #12]	; (7934 <__lshift+0xec>)
    7926:	4662      	mov	r2, ip
    7928:	f44f 71ef 	mov.w	r1, #478	; 0x1de
    792c:	f003 fe8c 	bl	b648 <__assert_func>
    7930:	20000580 	.word	0x20000580
    7934:	200006f8 	.word	0x200006f8

00007938 <__mcmp>:
    7938:	690b      	ldr	r3, [r1, #16]
    793a:	4684      	mov	ip, r0
    793c:	6900      	ldr	r0, [r0, #16]
    793e:	1ac0      	subs	r0, r0, r3
    7940:	d116      	bne.n	7970 <__mcmp+0x38>
    7942:	f10c 0c14 	add.w	ip, ip, #20
    7946:	3114      	adds	r1, #20
    7948:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
    794c:	b410      	push	{r4}
    794e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    7952:	e001      	b.n	7958 <__mcmp+0x20>
    7954:	4594      	cmp	ip, r2
    7956:	d208      	bcs.n	796a <__mcmp+0x32>
    7958:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    795c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    7960:	428c      	cmp	r4, r1
    7962:	d0f7      	beq.n	7954 <__mcmp+0x1c>
    7964:	d205      	bcs.n	7972 <__mcmp+0x3a>
    7966:	f04f 30ff 	mov.w	r0, #4294967295
    796a:	f85d 4b04 	ldr.w	r4, [sp], #4
    796e:	4770      	bx	lr
    7970:	4770      	bx	lr
    7972:	2001      	movs	r0, #1
    7974:	f85d 4b04 	ldr.w	r4, [sp], #4
    7978:	4770      	bx	lr
    797a:	bf00      	nop

0000797c <__mdiff>:
    797c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7980:	690f      	ldr	r7, [r1, #16]
    7982:	6913      	ldr	r3, [r2, #16]
    7984:	1aff      	subs	r7, r7, r3
    7986:	2f00      	cmp	r7, #0
    7988:	460e      	mov	r6, r1
    798a:	4690      	mov	r8, r2
    798c:	d17f      	bne.n	7a8e <__mdiff+0x112>
    798e:	f101 0514 	add.w	r5, r1, #20
    7992:	3214      	adds	r2, #20
    7994:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    7998:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    799c:	e001      	b.n	79a2 <__mdiff+0x26>
    799e:	429d      	cmp	r5, r3
    79a0:	d278      	bcs.n	7a94 <__mdiff+0x118>
    79a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    79a6:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    79aa:	42a1      	cmp	r1, r4
    79ac:	d0f7      	beq.n	799e <__mdiff+0x22>
    79ae:	d369      	bcc.n	7a84 <__mdiff+0x108>
    79b0:	6871      	ldr	r1, [r6, #4]
    79b2:	f7ff fce3 	bl	737c <_Balloc>
    79b6:	4681      	mov	r9, r0
    79b8:	2800      	cmp	r0, #0
    79ba:	d077      	beq.n	7aac <__mdiff+0x130>
    79bc:	6935      	ldr	r5, [r6, #16]
    79be:	f8d8 2010 	ldr.w	r2, [r8, #16]
    79c2:	60c7      	str	r7, [r0, #12]
    79c4:	f108 0e14 	add.w	lr, r8, #20
    79c8:	f106 0014 	add.w	r0, r6, #20
    79cc:	f109 0a14 	add.w	sl, r9, #20
    79d0:	f106 0110 	add.w	r1, r6, #16
    79d4:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    79d8:	eb00 0785 	add.w	r7, r0, r5, lsl #2
    79dc:	4656      	mov	r6, sl
    79de:	f04f 0c00 	mov.w	ip, #0
    79e2:	f85e 4b04 	ldr.w	r4, [lr], #4
    79e6:	f851 bf04 	ldr.w	fp, [r1, #4]!
    79ea:	b2a3      	uxth	r3, r4
    79ec:	fa1c fc8b 	uxtah	ip, ip, fp
    79f0:	ebac 0303 	sub.w	r3, ip, r3
    79f4:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    79f8:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
    79fc:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
    7a00:	b29b      	uxth	r3, r3
    7a02:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    7a06:	4572      	cmp	r2, lr
    7a08:	f846 3b04 	str.w	r3, [r6], #4
    7a0c:	ea4f 4c2c 	mov.w	ip, ip, asr #16
    7a10:	d8e7      	bhi.n	79e2 <__mdiff+0x66>
    7a12:	eba2 0108 	sub.w	r1, r2, r8
    7a16:	3915      	subs	r1, #21
    7a18:	f108 0815 	add.w	r8, r8, #21
    7a1c:	4542      	cmp	r2, r8
    7a1e:	f021 0403 	bic.w	r4, r1, #3
    7a22:	f104 0404 	add.w	r4, r4, #4
    7a26:	bf38      	it	cc
    7a28:	2404      	movcc	r4, #4
    7a2a:	4420      	add	r0, r4
    7a2c:	f021 0203 	bic.w	r2, r1, #3
    7a30:	bf38      	it	cc
    7a32:	2200      	movcc	r2, #0
    7a34:	4287      	cmp	r7, r0
    7a36:	4452      	add	r2, sl
    7a38:	4454      	add	r4, sl
    7a3a:	d918      	bls.n	7a6e <__mdiff+0xf2>
    7a3c:	4626      	mov	r6, r4
    7a3e:	4601      	mov	r1, r0
    7a40:	f851 3b04 	ldr.w	r3, [r1], #4
    7a44:	fa1c fc83 	uxtah	ip, ip, r3
    7a48:	ea4f 422c 	mov.w	r2, ip, asr #16
    7a4c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    7a50:	fa1f fc8c 	uxth.w	ip, ip
    7a54:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
    7a58:	428f      	cmp	r7, r1
    7a5a:	f846 3b04 	str.w	r3, [r6], #4
    7a5e:	ea4f 4c22 	mov.w	ip, r2, asr #16
    7a62:	d8ed      	bhi.n	7a40 <__mdiff+0xc4>
    7a64:	3f01      	subs	r7, #1
    7a66:	1a3f      	subs	r7, r7, r0
    7a68:	f027 0703 	bic.w	r7, r7, #3
    7a6c:	19e2      	adds	r2, r4, r7
    7a6e:	b923      	cbnz	r3, 7a7a <__mdiff+0xfe>
    7a70:	f852 3d04 	ldr.w	r3, [r2, #-4]!
    7a74:	3d01      	subs	r5, #1
    7a76:	2b00      	cmp	r3, #0
    7a78:	d0fa      	beq.n	7a70 <__mdiff+0xf4>
    7a7a:	f8c9 5010 	str.w	r5, [r9, #16]
    7a7e:	4648      	mov	r0, r9
    7a80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7a84:	4633      	mov	r3, r6
    7a86:	2701      	movs	r7, #1
    7a88:	4646      	mov	r6, r8
    7a8a:	4698      	mov	r8, r3
    7a8c:	e790      	b.n	79b0 <__mdiff+0x34>
    7a8e:	dbf9      	blt.n	7a84 <__mdiff+0x108>
    7a90:	2700      	movs	r7, #0
    7a92:	e78d      	b.n	79b0 <__mdiff+0x34>
    7a94:	2100      	movs	r1, #0
    7a96:	f7ff fc71 	bl	737c <_Balloc>
    7a9a:	4681      	mov	r9, r0
    7a9c:	b168      	cbz	r0, 7aba <__mdiff+0x13e>
    7a9e:	2201      	movs	r2, #1
    7aa0:	2300      	movs	r3, #0
    7aa2:	e9c9 2304 	strd	r2, r3, [r9, #16]
    7aa6:	4648      	mov	r0, r9
    7aa8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7aac:	4b06      	ldr	r3, [pc, #24]	; (7ac8 <__mdiff+0x14c>)
    7aae:	4807      	ldr	r0, [pc, #28]	; (7acc <__mdiff+0x150>)
    7ab0:	464a      	mov	r2, r9
    7ab2:	f240 2145 	movw	r1, #581	; 0x245
    7ab6:	f003 fdc7 	bl	b648 <__assert_func>
    7aba:	4b03      	ldr	r3, [pc, #12]	; (7ac8 <__mdiff+0x14c>)
    7abc:	4803      	ldr	r0, [pc, #12]	; (7acc <__mdiff+0x150>)
    7abe:	464a      	mov	r2, r9
    7ac0:	f240 2137 	movw	r1, #567	; 0x237
    7ac4:	f003 fdc0 	bl	b648 <__assert_func>
    7ac8:	20000580 	.word	0x20000580
    7acc:	200006f8 	.word	0x200006f8

00007ad0 <__ulp>:
    7ad0:	b082      	sub	sp, #8
    7ad2:	ed8d 0b00 	vstr	d0, [sp]
    7ad6:	4b16      	ldr	r3, [pc, #88]	; (7b30 <__ulp+0x60>)
    7ad8:	9a01      	ldr	r2, [sp, #4]
    7ada:	4013      	ands	r3, r2
    7adc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
    7ae0:	2b00      	cmp	r3, #0
    7ae2:	dd06      	ble.n	7af2 <__ulp+0x22>
    7ae4:	2200      	movs	r2, #0
    7ae6:	4619      	mov	r1, r3
    7ae8:	4610      	mov	r0, r2
    7aea:	ec41 0b10 	vmov	d0, r0, r1
    7aee:	b002      	add	sp, #8
    7af0:	4770      	bx	lr
    7af2:	425b      	negs	r3, r3
    7af4:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
    7af8:	ea4f 5223 	mov.w	r2, r3, asr #20
    7afc:	da09      	bge.n	7b12 <__ulp+0x42>
    7afe:	f44f 2300 	mov.w	r3, #524288	; 0x80000
    7b02:	4113      	asrs	r3, r2
    7b04:	2200      	movs	r2, #0
    7b06:	4619      	mov	r1, r3
    7b08:	4610      	mov	r0, r2
    7b0a:	ec41 0b10 	vmov	d0, r0, r1
    7b0e:	b002      	add	sp, #8
    7b10:	4770      	bx	lr
    7b12:	f1a2 0314 	sub.w	r3, r2, #20
    7b16:	2b1e      	cmp	r3, #30
    7b18:	bfda      	itte	le
    7b1a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
    7b1e:	40da      	lsrle	r2, r3
    7b20:	2201      	movgt	r2, #1
    7b22:	2300      	movs	r3, #0
    7b24:	4619      	mov	r1, r3
    7b26:	4610      	mov	r0, r2
    7b28:	ec41 0b10 	vmov	d0, r0, r1
    7b2c:	b002      	add	sp, #8
    7b2e:	4770      	bx	lr
    7b30:	7ff00000 	.word	0x7ff00000

00007b34 <__b2d>:
    7b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7b36:	6904      	ldr	r4, [r0, #16]
    7b38:	f100 0614 	add.w	r6, r0, #20
    7b3c:	eb06 0484 	add.w	r4, r6, r4, lsl #2
    7b40:	1f27      	subs	r7, r4, #4
    7b42:	f854 5c04 	ldr.w	r5, [r4, #-4]
    7b46:	4628      	mov	r0, r5
    7b48:	f7ff fcf2 	bl	7530 <__hi0bits>
    7b4c:	f1c0 0320 	rsb	r3, r0, #32
    7b50:	280a      	cmp	r0, #10
    7b52:	600b      	str	r3, [r1, #0]
    7b54:	dd1b      	ble.n	7b8e <__b2d+0x5a>
    7b56:	42be      	cmp	r6, r7
    7b58:	d20b      	bcs.n	7b72 <__b2d+0x3e>
    7b5a:	380b      	subs	r0, #11
    7b5c:	f854 1c08 	ldr.w	r1, [r4, #-8]
    7b60:	d12e      	bne.n	7bc0 <__b2d+0x8c>
    7b62:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
    7b66:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    7b6a:	460a      	mov	r2, r1
    7b6c:	ec43 2b10 	vmov	d0, r2, r3
    7b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7b72:	f1b0 010b 	subs.w	r1, r0, #11
    7b76:	d0f4      	beq.n	7b62 <__b2d+0x2e>
    7b78:	fa05 f101 	lsl.w	r1, r5, r1
    7b7c:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
    7b80:	2100      	movs	r1, #0
    7b82:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    7b86:	460a      	mov	r2, r1
    7b88:	ec43 2b10 	vmov	d0, r2, r3
    7b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7b8e:	f1c0 0c0b 	rsb	ip, r0, #11
    7b92:	fa25 f10c 	lsr.w	r1, r5, ip
    7b96:	42be      	cmp	r6, r7
    7b98:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
    7b9c:	bf38      	it	cc
    7b9e:	f854 1c08 	ldrcc.w	r1, [r4, #-8]
    7ba2:	f100 0015 	add.w	r0, r0, #21
    7ba6:	bf34      	ite	cc
    7ba8:	fa21 f10c 	lsrcc.w	r1, r1, ip
    7bac:	2100      	movcs	r1, #0
    7bae:	fa05 f000 	lsl.w	r0, r5, r0
    7bb2:	4301      	orrs	r1, r0
    7bb4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    7bb8:	460a      	mov	r2, r1
    7bba:	ec43 2b10 	vmov	d0, r2, r3
    7bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7bc0:	f1c0 0c20 	rsb	ip, r0, #32
    7bc4:	4085      	lsls	r5, r0
    7bc6:	fa21 f30c 	lsr.w	r3, r1, ip
    7bca:	ea45 0703 	orr.w	r7, r5, r3
    7bce:	f1a4 0508 	sub.w	r5, r4, #8
    7bd2:	42ae      	cmp	r6, r5
    7bd4:	fa01 f100 	lsl.w	r1, r1, r0
    7bd8:	bf3c      	itt	cc
    7bda:	f854 0c0c 	ldrcc.w	r0, [r4, #-12]
    7bde:	fa20 f00c 	lsrcc.w	r0, r0, ip
    7be2:	f047 537f 	orr.w	r3, r7, #1069547520	; 0x3fc00000
    7be6:	bf38      	it	cc
    7be8:	4301      	orrcc	r1, r0
    7bea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    7bee:	460a      	mov	r2, r1
    7bf0:	ec43 2b10 	vmov	d0, r2, r3
    7bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7bf6:	bf00      	nop

00007bf8 <__d2b>:
    7bf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7bfc:	4688      	mov	r8, r1
    7bfe:	b083      	sub	sp, #12
    7c00:	2101      	movs	r1, #1
    7c02:	ec57 6b10 	vmov	r6, r7, d0
    7c06:	4615      	mov	r5, r2
    7c08:	f7ff fbb8 	bl	737c <_Balloc>
    7c0c:	4604      	mov	r4, r0
    7c0e:	2800      	cmp	r0, #0
    7c10:	d051      	beq.n	7cb6 <__d2b+0xbe>
    7c12:	f3c7 590a 	ubfx	r9, r7, #20, #11
    7c16:	f3c7 0313 	ubfx	r3, r7, #0, #20
    7c1a:	f1b9 0f00 	cmp.w	r9, #0
    7c1e:	d001      	beq.n	7c24 <__d2b+0x2c>
    7c20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    7c24:	2e00      	cmp	r6, #0
    7c26:	9301      	str	r3, [sp, #4]
    7c28:	d118      	bne.n	7c5c <__d2b+0x64>
    7c2a:	a801      	add	r0, sp, #4
    7c2c:	f7ff fca0 	bl	7570 <__lo0bits>
    7c30:	9a01      	ldr	r2, [sp, #4]
    7c32:	6162      	str	r2, [r4, #20]
    7c34:	2201      	movs	r2, #1
    7c36:	f100 0320 	add.w	r3, r0, #32
    7c3a:	6122      	str	r2, [r4, #16]
    7c3c:	f1b9 0f00 	cmp.w	r9, #0
    7c40:	d025      	beq.n	7c8e <__d2b+0x96>
    7c42:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
    7c46:	eb09 0203 	add.w	r2, r9, r3
    7c4a:	4620      	mov	r0, r4
    7c4c:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
    7c50:	f8c8 2000 	str.w	r2, [r8]
    7c54:	602b      	str	r3, [r5, #0]
    7c56:	b003      	add	sp, #12
    7c58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    7c5c:	4668      	mov	r0, sp
    7c5e:	9600      	str	r6, [sp, #0]
    7c60:	f7ff fc86 	bl	7570 <__lo0bits>
    7c64:	4603      	mov	r3, r0
    7c66:	b310      	cbz	r0, 7cae <__d2b+0xb6>
    7c68:	e9dd 0200 	ldrd	r0, r2, [sp]
    7c6c:	f1c3 0120 	rsb	r1, r3, #32
    7c70:	fa02 f101 	lsl.w	r1, r2, r1
    7c74:	4301      	orrs	r1, r0
    7c76:	40da      	lsrs	r2, r3
    7c78:	6161      	str	r1, [r4, #20]
    7c7a:	9201      	str	r2, [sp, #4]
    7c7c:	2a00      	cmp	r2, #0
    7c7e:	61a2      	str	r2, [r4, #24]
    7c80:	bf14      	ite	ne
    7c82:	2202      	movne	r2, #2
    7c84:	2201      	moveq	r2, #1
    7c86:	6122      	str	r2, [r4, #16]
    7c88:	f1b9 0f00 	cmp.w	r9, #0
    7c8c:	d1d9      	bne.n	7c42 <__d2b+0x4a>
    7c8e:	f2a3 4332 	subw	r3, r3, #1074	; 0x432
    7c92:	f8c8 3000 	str.w	r3, [r8]
    7c96:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    7c9a:	6918      	ldr	r0, [r3, #16]
    7c9c:	f7ff fc48 	bl	7530 <__hi0bits>
    7ca0:	ebc0 1342 	rsb	r3, r0, r2, lsl #5
    7ca4:	4620      	mov	r0, r4
    7ca6:	602b      	str	r3, [r5, #0]
    7ca8:	b003      	add	sp, #12
    7caa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    7cae:	9a00      	ldr	r2, [sp, #0]
    7cb0:	6162      	str	r2, [r4, #20]
    7cb2:	9a01      	ldr	r2, [sp, #4]
    7cb4:	e7e2      	b.n	7c7c <__d2b+0x84>
    7cb6:	4b03      	ldr	r3, [pc, #12]	; (7cc4 <__d2b+0xcc>)
    7cb8:	4803      	ldr	r0, [pc, #12]	; (7cc8 <__d2b+0xd0>)
    7cba:	4622      	mov	r2, r4
    7cbc:	f240 310f 	movw	r1, #783	; 0x30f
    7cc0:	f003 fcc2 	bl	b648 <__assert_func>
    7cc4:	20000580 	.word	0x20000580
    7cc8:	200006f8 	.word	0x200006f8

00007ccc <__ratio>:
    7ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
    7cce:	b083      	sub	sp, #12
    7cd0:	460e      	mov	r6, r1
    7cd2:	4669      	mov	r1, sp
    7cd4:	4607      	mov	r7, r0
    7cd6:	f7ff ff2d 	bl	7b34 <__b2d>
    7cda:	a901      	add	r1, sp, #4
    7cdc:	4630      	mov	r0, r6
    7cde:	ec55 4b10 	vmov	r4, r5, d0
    7ce2:	eeb0 7b40 	vmov.f64	d7, d0
    7ce6:	f7ff ff25 	bl	7b34 <__b2d>
    7cea:	6933      	ldr	r3, [r6, #16]
    7cec:	693a      	ldr	r2, [r7, #16]
    7cee:	1ad2      	subs	r2, r2, r3
    7cf0:	e9dd 3100 	ldrd	r3, r1, [sp]
    7cf4:	1a5b      	subs	r3, r3, r1
    7cf6:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    7cfa:	2b00      	cmp	r3, #0
    7cfc:	dd09      	ble.n	7d12 <__ratio+0x46>
    7cfe:	ee17 2a90 	vmov	r2, s15
    7d02:	eb02 5503 	add.w	r5, r2, r3, lsl #20
    7d06:	ec45 4b17 	vmov	d7, r4, r5
    7d0a:	ee87 0b00 	vdiv.f64	d0, d7, d0
    7d0e:	b003      	add	sp, #12
    7d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7d12:	ee10 2a90 	vmov	r2, s1
    7d16:	ec51 0b10 	vmov	r0, r1, d0
    7d1a:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
    7d1e:	eb02 5103 	add.w	r1, r2, r3, lsl #20
    7d22:	ec41 0b10 	vmov	d0, r0, r1
    7d26:	ee87 0b00 	vdiv.f64	d0, d7, d0
    7d2a:	b003      	add	sp, #12
    7d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7d2e:	bf00      	nop

00007d30 <__copybits>:
    7d30:	3901      	subs	r1, #1
    7d32:	1149      	asrs	r1, r1, #5
    7d34:	f101 0c01 	add.w	ip, r1, #1
    7d38:	6911      	ldr	r1, [r2, #16]
    7d3a:	f102 0314 	add.w	r3, r2, #20
    7d3e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    7d42:	428b      	cmp	r3, r1
    7d44:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
    7d48:	d217      	bcs.n	7d7a <__copybits+0x4a>
    7d4a:	b510      	push	{r4, lr}
    7d4c:	f1a0 0e04 	sub.w	lr, r0, #4
    7d50:	f853 4b04 	ldr.w	r4, [r3], #4
    7d54:	f84e 4f04 	str.w	r4, [lr, #4]!
    7d58:	4299      	cmp	r1, r3
    7d5a:	d8f9      	bhi.n	7d50 <__copybits+0x20>
    7d5c:	1a8a      	subs	r2, r1, r2
    7d5e:	f1a2 0315 	sub.w	r3, r2, #21
    7d62:	f023 0303 	bic.w	r3, r3, #3
    7d66:	3304      	adds	r3, #4
    7d68:	4418      	add	r0, r3
    7d6a:	4584      	cmp	ip, r0
    7d6c:	d904      	bls.n	7d78 <__copybits+0x48>
    7d6e:	2300      	movs	r3, #0
    7d70:	f840 3b04 	str.w	r3, [r0], #4
    7d74:	4584      	cmp	ip, r0
    7d76:	d8fb      	bhi.n	7d70 <__copybits+0x40>
    7d78:	bd10      	pop	{r4, pc}
    7d7a:	4584      	cmp	ip, r0
    7d7c:	d905      	bls.n	7d8a <__copybits+0x5a>
    7d7e:	2300      	movs	r3, #0
    7d80:	f840 3b04 	str.w	r3, [r0], #4
    7d84:	4584      	cmp	ip, r0
    7d86:	d8fb      	bhi.n	7d80 <__copybits+0x50>
    7d88:	4770      	bx	lr
    7d8a:	4770      	bx	lr

00007d8c <__any_on>:
    7d8c:	6903      	ldr	r3, [r0, #16]
    7d8e:	114a      	asrs	r2, r1, #5
    7d90:	4293      	cmp	r3, r2
    7d92:	f100 0014 	add.w	r0, r0, #20
    7d96:	da09      	bge.n	7dac <__any_on+0x20>
    7d98:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    7d9c:	e002      	b.n	7da4 <__any_on+0x18>
    7d9e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
    7da2:	b9c2      	cbnz	r2, 7dd6 <__any_on+0x4a>
    7da4:	4283      	cmp	r3, r0
    7da6:	d8fa      	bhi.n	7d9e <__any_on+0x12>
    7da8:	2000      	movs	r0, #0
    7daa:	4770      	bx	lr
    7dac:	dd10      	ble.n	7dd0 <__any_on+0x44>
    7dae:	f011 011f 	ands.w	r1, r1, #31
    7db2:	d00d      	beq.n	7dd0 <__any_on+0x44>
    7db4:	b410      	push	{r4}
    7db6:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
    7dba:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    7dbe:	fa24 f201 	lsr.w	r2, r4, r1
    7dc2:	408a      	lsls	r2, r1
    7dc4:	4294      	cmp	r4, r2
    7dc6:	d00c      	beq.n	7de2 <__any_on+0x56>
    7dc8:	2001      	movs	r0, #1
    7dca:	f85d 4b04 	ldr.w	r4, [sp], #4
    7dce:	4770      	bx	lr
    7dd0:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    7dd4:	e7e6      	b.n	7da4 <__any_on+0x18>
    7dd6:	2001      	movs	r0, #1
    7dd8:	4770      	bx	lr
    7dda:	f853 2d04 	ldr.w	r2, [r3, #-4]!
    7dde:	2a00      	cmp	r2, #0
    7de0:	d1f2      	bne.n	7dc8 <__any_on+0x3c>
    7de2:	4283      	cmp	r3, r0
    7de4:	d8f9      	bhi.n	7dda <__any_on+0x4e>
    7de6:	2000      	movs	r0, #0
    7de8:	f85d 4b04 	ldr.w	r4, [sp], #4
    7dec:	4770      	bx	lr
    7dee:	bf00      	nop

00007df0 <__ascii_wctomb>:
    7df0:	b149      	cbz	r1, 7e06 <__ascii_wctomb+0x16>
    7df2:	2aff      	cmp	r2, #255	; 0xff
    7df4:	d802      	bhi.n	7dfc <__ascii_wctomb+0xc>
    7df6:	700a      	strb	r2, [r1, #0]
    7df8:	2001      	movs	r0, #1
    7dfa:	4770      	bx	lr
    7dfc:	238a      	movs	r3, #138	; 0x8a
    7dfe:	6003      	str	r3, [r0, #0]
    7e00:	f04f 30ff 	mov.w	r0, #4294967295
    7e04:	4770      	bx	lr
    7e06:	4608      	mov	r0, r1
    7e08:	4770      	bx	lr
    7e0a:	bf00      	nop
    7e0c:	0000      	movs	r0, r0
	...

00007e10 <_svfprintf_r>:
    7e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7e14:	ed2d 8b08 	vpush	{d8-d11}
    7e18:	b0d1      	sub	sp, #324	; 0x144
    7e1a:	460c      	mov	r4, r1
    7e1c:	ee0b 1a10 	vmov	s22, r1
    7e20:	4690      	mov	r8, r2
    7e22:	9308      	str	r3, [sp, #32]
    7e24:	4683      	mov	fp, r0
    7e26:	f003 fb79 	bl	b51c <_localeconv_r>
    7e2a:	6803      	ldr	r3, [r0, #0]
    7e2c:	9312      	str	r3, [sp, #72]	; 0x48
    7e2e:	4618      	mov	r0, r3
    7e30:	f7fe fc66 	bl	6700 <strlen>
    7e34:	af20      	add	r7, sp, #128	; 0x80
    7e36:	9010      	str	r0, [sp, #64]	; 0x40
    7e38:	2208      	movs	r2, #8
    7e3a:	2100      	movs	r1, #0
    7e3c:	4638      	mov	r0, r7
    7e3e:	f7fe f8af 	bl	5fa0 <memset>
    7e42:	89a3      	ldrh	r3, [r4, #12]
    7e44:	061b      	lsls	r3, r3, #24
    7e46:	d503      	bpl.n	7e50 <_svfprintf_r+0x40>
    7e48:	6923      	ldr	r3, [r4, #16]
    7e4a:	2b00      	cmp	r3, #0
    7e4c:	f000 8755 	beq.w	8cfa <_svfprintf_r+0xeea>
    7e50:	2300      	movs	r3, #0
    7e52:	ed9f 8b83 	vldr	d8, [pc, #524]	; 8060 <_svfprintf_r+0x250>
    7e56:	ed9f 9b84 	vldr	d9, [pc, #528]	; 8068 <_svfprintf_r+0x258>
    7e5a:	e9cd 3325 	strd	r3, r3, [sp, #148]	; 0x94
    7e5e:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
    7e62:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
    7e66:	aa27      	add	r2, sp, #156	; 0x9c
    7e68:	930e      	str	r3, [sp, #56]	; 0x38
    7e6a:	9224      	str	r2, [sp, #144]	; 0x90
    7e6c:	4692      	mov	sl, r2
    7e6e:	9311      	str	r3, [sp, #68]	; 0x44
    7e70:	9304      	str	r3, [sp, #16]
    7e72:	4644      	mov	r4, r8
    7e74:	46a1      	mov	r9, r4
    7e76:	4b7e      	ldr	r3, [pc, #504]	; (8070 <_svfprintf_r+0x260>)
    7e78:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    7e7c:	f7fe f9c0 	bl	6200 <__locale_mb_cur_max>
    7e80:	464a      	mov	r2, r9
    7e82:	4603      	mov	r3, r0
    7e84:	a91c      	add	r1, sp, #112	; 0x70
    7e86:	9700      	str	r7, [sp, #0]
    7e88:	4658      	mov	r0, fp
    7e8a:	47a8      	blx	r5
    7e8c:	2800      	cmp	r0, #0
    7e8e:	f000 80b0 	beq.w	7ff2 <_svfprintf_r+0x1e2>
    7e92:	f2c0 80a6 	blt.w	7fe2 <_svfprintf_r+0x1d2>
    7e96:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    7e98:	2a25      	cmp	r2, #37	; 0x25
    7e9a:	4603      	mov	r3, r0
    7e9c:	d001      	beq.n	7ea2 <_svfprintf_r+0x92>
    7e9e:	4499      	add	r9, r3
    7ea0:	e7e9      	b.n	7e76 <_svfprintf_r+0x66>
    7ea2:	ebb9 0504 	subs.w	r5, r9, r4
    7ea6:	4606      	mov	r6, r0
    7ea8:	f040 80a7 	bne.w	7ffa <_svfprintf_r+0x1ea>
    7eac:	2300      	movs	r3, #0
    7eae:	f04f 32ff 	mov.w	r2, #4294967295
    7eb2:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    7eb6:	4698      	mov	r8, r3
    7eb8:	9306      	str	r3, [sp, #24]
    7eba:	f109 0901 	add.w	r9, r9, #1
    7ebe:	f899 3000 	ldrb.w	r3, [r9]
    7ec2:	9203      	str	r2, [sp, #12]
    7ec4:	252b      	movs	r5, #43	; 0x2b
    7ec6:	2620      	movs	r6, #32
    7ec8:	f109 0901 	add.w	r9, r9, #1
    7ecc:	f1a3 0220 	sub.w	r2, r3, #32
    7ed0:	2a5a      	cmp	r2, #90	; 0x5a
    7ed2:	f200 80cf 	bhi.w	8074 <_svfprintf_r+0x264>
    7ed6:	e8df f012 	tbh	[pc, r2, lsl #1]
    7eda:	02e8      	.short	0x02e8
    7edc:	00cd00cd 	.word	0x00cd00cd
    7ee0:	00cd02e3 	.word	0x00cd02e3
    7ee4:	00cd00cd 	.word	0x00cd00cd
    7ee8:	00cd006a 	.word	0x00cd006a
    7eec:	020500cd 	.word	0x020500cd
    7ef0:	00cd0284 	.word	0x00cd0284
    7ef4:	02c90210 	.word	0x02c90210
    7ef8:	02bd00cd 	.word	0x02bd00cd
    7efc:	005b005b 	.word	0x005b005b
    7f00:	005b005b 	.word	0x005b005b
    7f04:	005b005b 	.word	0x005b005b
    7f08:	005b005b 	.word	0x005b005b
    7f0c:	00cd005b 	.word	0x00cd005b
    7f10:	00cd00cd 	.word	0x00cd00cd
    7f14:	00cd00cd 	.word	0x00cd00cd
    7f18:	00cd00cd 	.word	0x00cd00cd
    7f1c:	00cd0153 	.word	0x00cd0153
    7f20:	021a0183 	.word	0x021a0183
    7f24:	01530153 	.word	0x01530153
    7f28:	00cd0153 	.word	0x00cd0153
    7f2c:	00cd00cd 	.word	0x00cd00cd
    7f30:	021500cd 	.word	0x021500cd
    7f34:	00cd00cd 	.word	0x00cd00cd
    7f38:	00cd0296 	.word	0x00cd0296
    7f3c:	00cd00cd 	.word	0x00cd00cd
    7f40:	00cd01ab 	.word	0x00cd01ab
    7f44:	00cd02aa 	.word	0x00cd02aa
    7f48:	06e300cd 	.word	0x06e300cd
    7f4c:	00cd00cd 	.word	0x00cd00cd
    7f50:	00cd00cd 	.word	0x00cd00cd
    7f54:	00cd00cd 	.word	0x00cd00cd
    7f58:	00cd00cd 	.word	0x00cd00cd
    7f5c:	00cd0153 	.word	0x00cd0153
    7f60:	01de0183 	.word	0x01de0183
    7f64:	01530153 	.word	0x01530153
    7f68:	02770153 	.word	0x02770153
    7f6c:	007f01de 	.word	0x007f01de
    7f70:	028900cd 	.word	0x028900cd
    7f74:	025f00cd 	.word	0x025f00cd
    7f78:	022f06e0 	.word	0x022f06e0
    7f7c:	00cd007f 	.word	0x00cd007f
    7f80:	007c01ab 	.word	0x007c01ab
    7f84:	00cd06b8 	.word	0x00cd06b8
    7f88:	06bd00cd 	.word	0x06bd00cd
    7f8c:	007c00cd 	.word	0x007c00cd
    7f90:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    7f94:	2100      	movs	r1, #0
    7f96:	f819 3b01 	ldrb.w	r3, [r9], #1
    7f9a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    7f9e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    7fa2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    7fa6:	2a09      	cmp	r2, #9
    7fa8:	d9f5      	bls.n	7f96 <_svfprintf_r+0x186>
    7faa:	9106      	str	r1, [sp, #24]
    7fac:	e78e      	b.n	7ecc <_svfprintf_r+0xbc>
    7fae:	4658      	mov	r0, fp
    7fb0:	f003 fab4 	bl	b51c <_localeconv_r>
    7fb4:	6843      	ldr	r3, [r0, #4]
    7fb6:	9315      	str	r3, [sp, #84]	; 0x54
    7fb8:	4618      	mov	r0, r3
    7fba:	f7fe fba1 	bl	6700 <strlen>
    7fbe:	9016      	str	r0, [sp, #88]	; 0x58
    7fc0:	4658      	mov	r0, fp
    7fc2:	f003 faab 	bl	b51c <_localeconv_r>
    7fc6:	6883      	ldr	r3, [r0, #8]
    7fc8:	9313      	str	r3, [sp, #76]	; 0x4c
    7fca:	9b16      	ldr	r3, [sp, #88]	; 0x58
    7fcc:	2b00      	cmp	r3, #0
    7fce:	f040 862d 	bne.w	8c2c <_svfprintf_r+0xe1c>
    7fd2:	f899 3000 	ldrb.w	r3, [r9]
    7fd6:	e777      	b.n	7ec8 <_svfprintf_r+0xb8>
    7fd8:	f899 3000 	ldrb.w	r3, [r9]
    7fdc:	f048 0820 	orr.w	r8, r8, #32
    7fe0:	e772      	b.n	7ec8 <_svfprintf_r+0xb8>
    7fe2:	2208      	movs	r2, #8
    7fe4:	2100      	movs	r1, #0
    7fe6:	4638      	mov	r0, r7
    7fe8:	f7fd ffda 	bl	5fa0 <memset>
    7fec:	2301      	movs	r3, #1
    7fee:	4499      	add	r9, r3
    7ff0:	e741      	b.n	7e76 <_svfprintf_r+0x66>
    7ff2:	ebb9 0504 	subs.w	r5, r9, r4
    7ff6:	4606      	mov	r6, r0
    7ff8:	d011      	beq.n	801e <_svfprintf_r+0x20e>
    7ffa:	9b26      	ldr	r3, [sp, #152]	; 0x98
    7ffc:	442b      	add	r3, r5
    7ffe:	9326      	str	r3, [sp, #152]	; 0x98
    8000:	9b25      	ldr	r3, [sp, #148]	; 0x94
    8002:	3301      	adds	r3, #1
    8004:	2b07      	cmp	r3, #7
    8006:	e9ca 4500 	strd	r4, r5, [sl]
    800a:	9325      	str	r3, [sp, #148]	; 0x94
    800c:	dc1c      	bgt.n	8048 <_svfprintf_r+0x238>
    800e:	f10a 0a08 	add.w	sl, sl, #8
    8012:	9b04      	ldr	r3, [sp, #16]
    8014:	442b      	add	r3, r5
    8016:	9304      	str	r3, [sp, #16]
    8018:	2e00      	cmp	r6, #0
    801a:	f47f af47 	bne.w	7eac <_svfprintf_r+0x9c>
    801e:	9b26      	ldr	r3, [sp, #152]	; 0x98
    8020:	2b00      	cmp	r3, #0
    8022:	f041 820b 	bne.w	943c <_svfprintf_r+0x162c>
    8026:	ee1b 3a10 	vmov	r3, s22
    802a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    802e:	f013 0f40 	tst.w	r3, #64	; 0x40
    8032:	9b04      	ldr	r3, [sp, #16]
    8034:	bf18      	it	ne
    8036:	f04f 33ff 	movne.w	r3, #4294967295
    803a:	9304      	str	r3, [sp, #16]
    803c:	9804      	ldr	r0, [sp, #16]
    803e:	b051      	add	sp, #324	; 0x144
    8040:	ecbd 8b08 	vpop	{d8-d11}
    8044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8048:	ee1b 1a10 	vmov	r1, s22
    804c:	aa24      	add	r2, sp, #144	; 0x90
    804e:	4658      	mov	r0, fp
    8050:	f004 fdde 	bl	cc10 <__ssprint_r>
    8054:	2800      	cmp	r0, #0
    8056:	d1e6      	bne.n	8026 <_svfprintf_r+0x216>
    8058:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    805c:	e7d9      	b.n	8012 <_svfprintf_r+0x202>
    805e:	bf00      	nop
	...
    8068:	ffffffff 	.word	0xffffffff
    806c:	7fefffff 	.word	0x7fefffff
    8070:	20007c38 	.word	0x20007c38
    8074:	930b      	str	r3, [sp, #44]	; 0x2c
    8076:	2b00      	cmp	r3, #0
    8078:	d0d1      	beq.n	801e <_svfprintf_r+0x20e>
    807a:	2100      	movs	r1, #0
    807c:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    8080:	f88d 30dc 	strb.w	r3, [sp, #220]	; 0xdc
    8084:	2301      	movs	r3, #1
    8086:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    808a:	9302      	str	r3, [sp, #8]
    808c:	9107      	str	r1, [sp, #28]
    808e:	9305      	str	r3, [sp, #20]
    8090:	9103      	str	r1, [sp, #12]
    8092:	910f      	str	r1, [sp, #60]	; 0x3c
    8094:	ac37      	add	r4, sp, #220	; 0xdc
    8096:	f018 0302 	ands.w	r3, r8, #2
    809a:	9309      	str	r3, [sp, #36]	; 0x24
    809c:	d002      	beq.n	80a4 <_svfprintf_r+0x294>
    809e:	9b02      	ldr	r3, [sp, #8]
    80a0:	3302      	adds	r3, #2
    80a2:	9302      	str	r3, [sp, #8]
    80a4:	f018 0384 	ands.w	r3, r8, #132	; 0x84
    80a8:	930a      	str	r3, [sp, #40]	; 0x28
    80aa:	d105      	bne.n	80b8 <_svfprintf_r+0x2a8>
    80ac:	9b06      	ldr	r3, [sp, #24]
    80ae:	9a02      	ldr	r2, [sp, #8]
    80b0:	1a9d      	subs	r5, r3, r2
    80b2:	2d00      	cmp	r5, #0
    80b4:	f300 8369 	bgt.w	878a <_svfprintf_r+0x97a>
    80b8:	9a26      	ldr	r2, [sp, #152]	; 0x98
    80ba:	b189      	cbz	r1, 80e0 <_svfprintf_r+0x2d0>
    80bc:	9925      	ldr	r1, [sp, #148]	; 0x94
    80be:	f10d 0067 	add.w	r0, sp, #103	; 0x67
    80c2:	3101      	adds	r1, #1
    80c4:	3201      	adds	r2, #1
    80c6:	f8ca 0000 	str.w	r0, [sl]
    80ca:	2907      	cmp	r1, #7
    80cc:	f04f 0001 	mov.w	r0, #1
    80d0:	9226      	str	r2, [sp, #152]	; 0x98
    80d2:	9125      	str	r1, [sp, #148]	; 0x94
    80d4:	f8ca 0004 	str.w	r0, [sl, #4]
    80d8:	f300 83a2 	bgt.w	8820 <_svfprintf_r+0xa10>
    80dc:	f10a 0a08 	add.w	sl, sl, #8
    80e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    80e2:	b183      	cbz	r3, 8106 <_svfprintf_r+0x2f6>
    80e4:	9b25      	ldr	r3, [sp, #148]	; 0x94
    80e6:	a91a      	add	r1, sp, #104	; 0x68
    80e8:	3301      	adds	r3, #1
    80ea:	3202      	adds	r2, #2
    80ec:	f8ca 1000 	str.w	r1, [sl]
    80f0:	2b07      	cmp	r3, #7
    80f2:	f04f 0102 	mov.w	r1, #2
    80f6:	9226      	str	r2, [sp, #152]	; 0x98
    80f8:	9325      	str	r3, [sp, #148]	; 0x94
    80fa:	f8ca 1004 	str.w	r1, [sl, #4]
    80fe:	f300 83a3 	bgt.w	8848 <_svfprintf_r+0xa38>
    8102:	f10a 0a08 	add.w	sl, sl, #8
    8106:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8108:	2b80      	cmp	r3, #128	; 0x80
    810a:	f000 826c 	beq.w	85e6 <_svfprintf_r+0x7d6>
    810e:	9b03      	ldr	r3, [sp, #12]
    8110:	9905      	ldr	r1, [sp, #20]
    8112:	1a5d      	subs	r5, r3, r1
    8114:	2d00      	cmp	r5, #0
    8116:	f300 82a5 	bgt.w	8664 <_svfprintf_r+0x854>
    811a:	f418 7f80 	tst.w	r8, #256	; 0x100
    811e:	f040 820d 	bne.w	853c <_svfprintf_r+0x72c>
    8122:	9b05      	ldr	r3, [sp, #20]
    8124:	f8ca 3004 	str.w	r3, [sl, #4]
    8128:	441a      	add	r2, r3
    812a:	9b25      	ldr	r3, [sp, #148]	; 0x94
    812c:	f8ca 4000 	str.w	r4, [sl]
    8130:	3301      	adds	r3, #1
    8132:	2b07      	cmp	r3, #7
    8134:	9226      	str	r2, [sp, #152]	; 0x98
    8136:	9325      	str	r3, [sp, #148]	; 0x94
    8138:	f300 831b 	bgt.w	8772 <_svfprintf_r+0x962>
    813c:	f10a 0a08 	add.w	sl, sl, #8
    8140:	f018 0f04 	tst.w	r8, #4
    8144:	d005      	beq.n	8152 <_svfprintf_r+0x342>
    8146:	9b06      	ldr	r3, [sp, #24]
    8148:	9902      	ldr	r1, [sp, #8]
    814a:	1a5c      	subs	r4, r3, r1
    814c:	2c00      	cmp	r4, #0
    814e:	f300 8388 	bgt.w	8862 <_svfprintf_r+0xa52>
    8152:	9b04      	ldr	r3, [sp, #16]
    8154:	9906      	ldr	r1, [sp, #24]
    8156:	9802      	ldr	r0, [sp, #8]
    8158:	4281      	cmp	r1, r0
    815a:	bfac      	ite	ge
    815c:	185b      	addge	r3, r3, r1
    815e:	181b      	addlt	r3, r3, r0
    8160:	9304      	str	r3, [sp, #16]
    8162:	2a00      	cmp	r2, #0
    8164:	f040 82b0 	bne.w	86c8 <_svfprintf_r+0x8b8>
    8168:	2300      	movs	r3, #0
    816a:	9325      	str	r3, [sp, #148]	; 0x94
    816c:	9b07      	ldr	r3, [sp, #28]
    816e:	b11b      	cbz	r3, 8178 <_svfprintf_r+0x368>
    8170:	9907      	ldr	r1, [sp, #28]
    8172:	4658      	mov	r0, fp
    8174:	f7fe fbd6 	bl	6924 <_free_r>
    8178:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    817c:	464c      	mov	r4, r9
    817e:	e679      	b.n	7e74 <_svfprintf_r+0x64>
    8180:	930b      	str	r3, [sp, #44]	; 0x2c
    8182:	9b08      	ldr	r3, [sp, #32]
    8184:	3307      	adds	r3, #7
    8186:	f023 0307 	bic.w	r3, r3, #7
    818a:	ecb3 8b02 	vldmia	r3!, {d8}
    818e:	eeb0 7bc8 	vabs.f64	d7, d8
    8192:	eeb4 7b49 	vcmp.f64	d7, d9
    8196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    819a:	9308      	str	r3, [sp, #32]
    819c:	f340 84e9 	ble.w	8b72 <_svfprintf_r+0xd62>
    81a0:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
    81a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    81a8:	f101 8059 	bmi.w	925e <_svfprintf_r+0x144e>
    81ac:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    81b0:	4cab      	ldr	r4, [pc, #684]	; (8460 <_svfprintf_r+0x650>)
    81b2:	4bac      	ldr	r3, [pc, #688]	; (8464 <_svfprintf_r+0x654>)
    81b4:	f028 0880 	bic.w	r8, r8, #128	; 0x80
    81b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    81ba:	2a47      	cmp	r2, #71	; 0x47
    81bc:	bfc8      	it	gt
    81be:	461c      	movgt	r4, r3
    81c0:	2300      	movs	r3, #0
    81c2:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    81c6:	2203      	movs	r2, #3
    81c8:	9307      	str	r3, [sp, #28]
    81ca:	9202      	str	r2, [sp, #8]
    81cc:	9205      	str	r2, [sp, #20]
    81ce:	9303      	str	r3, [sp, #12]
    81d0:	930f      	str	r3, [sp, #60]	; 0x3c
    81d2:	2900      	cmp	r1, #0
    81d4:	f43f af5f 	beq.w	8096 <_svfprintf_r+0x286>
    81d8:	9b02      	ldr	r3, [sp, #8]
    81da:	3301      	adds	r3, #1
    81dc:	9302      	str	r3, [sp, #8]
    81de:	e75a      	b.n	8096 <_svfprintf_r+0x286>
    81e0:	2b43      	cmp	r3, #67	; 0x43
    81e2:	930b      	str	r3, [sp, #44]	; 0x2c
    81e4:	d003      	beq.n	81ee <_svfprintf_r+0x3de>
    81e6:	f018 0f10 	tst.w	r8, #16
    81ea:	f000 855d 	beq.w	8ca8 <_svfprintf_r+0xe98>
    81ee:	9d08      	ldr	r5, [sp, #32]
    81f0:	2208      	movs	r2, #8
    81f2:	2100      	movs	r1, #0
    81f4:	a822      	add	r0, sp, #136	; 0x88
    81f6:	ac37      	add	r4, sp, #220	; 0xdc
    81f8:	f7fd fed2 	bl	5fa0 <memset>
    81fc:	ab22      	add	r3, sp, #136	; 0x88
    81fe:	f855 2b04 	ldr.w	r2, [r5], #4
    8202:	4621      	mov	r1, r4
    8204:	4658      	mov	r0, fp
    8206:	f004 fbd9 	bl	c9bc <_wcrtomb_r>
    820a:	4603      	mov	r3, r0
    820c:	3301      	adds	r3, #1
    820e:	9005      	str	r0, [sp, #20]
    8210:	f001 82ee 	beq.w	97f0 <_svfprintf_r+0x19e0>
    8214:	9b05      	ldr	r3, [sp, #20]
    8216:	9508      	str	r5, [sp, #32]
    8218:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    821c:	9302      	str	r3, [sp, #8]
    821e:	2100      	movs	r1, #0
    8220:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    8224:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    8228:	9107      	str	r1, [sp, #28]
    822a:	9103      	str	r1, [sp, #12]
    822c:	910f      	str	r1, [sp, #60]	; 0x3c
    822e:	e732      	b.n	8096 <_svfprintf_r+0x286>
    8230:	930b      	str	r3, [sp, #44]	; 0x2c
    8232:	9b08      	ldr	r3, [sp, #32]
    8234:	461a      	mov	r2, r3
    8236:	2300      	movs	r3, #0
    8238:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    823c:	4613      	mov	r3, r2
    823e:	f853 4b04 	ldr.w	r4, [r3], #4
    8242:	9308      	str	r3, [sp, #32]
    8244:	2c00      	cmp	r4, #0
    8246:	f000 8548 	beq.w	8cda <_svfprintf_r+0xeca>
    824a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    824c:	2b53      	cmp	r3, #83	; 0x53
    824e:	f000 86ec 	beq.w	902a <_svfprintf_r+0x121a>
    8252:	f018 0310 	ands.w	r3, r8, #16
    8256:	930c      	str	r3, [sp, #48]	; 0x30
    8258:	f040 86e7 	bne.w	902a <_svfprintf_r+0x121a>
    825c:	9b03      	ldr	r3, [sp, #12]
    825e:	1c5d      	adds	r5, r3, #1
    8260:	f001 80e5 	beq.w	942e <_svfprintf_r+0x161e>
    8264:	990c      	ldr	r1, [sp, #48]	; 0x30
    8266:	461a      	mov	r2, r3
    8268:	4620      	mov	r0, r4
    826a:	f003 f961 	bl	b530 <memchr>
    826e:	9007      	str	r0, [sp, #28]
    8270:	2800      	cmp	r0, #0
    8272:	f001 8328 	beq.w	98c6 <_svfprintf_r+0x1ab6>
    8276:	9b07      	ldr	r3, [sp, #28]
    8278:	1b1a      	subs	r2, r3, r4
    827a:	9205      	str	r2, [sp, #20]
    827c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    827e:	9303      	str	r3, [sp, #12]
    8280:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    8284:	930f      	str	r3, [sp, #60]	; 0x3c
    8286:	930d      	str	r3, [sp, #52]	; 0x34
    8288:	9307      	str	r3, [sp, #28]
    828a:	2373      	movs	r3, #115	; 0x73
    828c:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    8290:	9202      	str	r2, [sp, #8]
    8292:	930b      	str	r3, [sp, #44]	; 0x2c
    8294:	e79d      	b.n	81d2 <_svfprintf_r+0x3c2>
    8296:	f018 0f20 	tst.w	r8, #32
    829a:	930b      	str	r3, [sp, #44]	; 0x2c
    829c:	9b08      	ldr	r3, [sp, #32]
    829e:	d03d      	beq.n	831c <_svfprintf_r+0x50c>
    82a0:	3307      	adds	r3, #7
    82a2:	f023 0307 	bic.w	r3, r3, #7
    82a6:	461a      	mov	r2, r3
    82a8:	4611      	mov	r1, r2
    82aa:	685b      	ldr	r3, [r3, #4]
    82ac:	f851 2b08 	ldr.w	r2, [r1], #8
    82b0:	9108      	str	r1, [sp, #32]
    82b2:	4619      	mov	r1, r3
    82b4:	2b00      	cmp	r3, #0
    82b6:	f2c0 840c 	blt.w	8ad2 <_svfprintf_r+0xcc2>
    82ba:	9b03      	ldr	r3, [sp, #12]
    82bc:	3301      	adds	r3, #1
    82be:	f000 829e 	beq.w	87fe <_svfprintf_r+0x9ee>
    82c2:	f028 0080 	bic.w	r0, r8, #128	; 0x80
    82c6:	ea52 0301 	orrs.w	r3, r2, r1
    82ca:	9002      	str	r0, [sp, #8]
    82cc:	f040 8299 	bne.w	8802 <_svfprintf_r+0x9f2>
    82d0:	9b03      	ldr	r3, [sp, #12]
    82d2:	2b00      	cmp	r3, #0
    82d4:	f040 829a 	bne.w	880c <_svfprintf_r+0x9fc>
    82d8:	4680      	mov	r8, r0
    82da:	2300      	movs	r3, #0
    82dc:	9303      	str	r3, [sp, #12]
    82de:	9305      	str	r3, [sp, #20]
    82e0:	ac50      	add	r4, sp, #320	; 0x140
    82e2:	e106      	b.n	84f2 <_svfprintf_r+0x6e2>
    82e4:	9b08      	ldr	r3, [sp, #32]
    82e6:	f853 2b04 	ldr.w	r2, [r3], #4
    82ea:	9206      	str	r2, [sp, #24]
    82ec:	2a00      	cmp	r2, #0
    82ee:	f280 8419 	bge.w	8b24 <_svfprintf_r+0xd14>
    82f2:	9a06      	ldr	r2, [sp, #24]
    82f4:	9308      	str	r3, [sp, #32]
    82f6:	4252      	negs	r2, r2
    82f8:	9206      	str	r2, [sp, #24]
    82fa:	f899 3000 	ldrb.w	r3, [r9]
    82fe:	f048 0804 	orr.w	r8, r8, #4
    8302:	e5e1      	b.n	7ec8 <_svfprintf_r+0xb8>
    8304:	f899 3000 	ldrb.w	r3, [r9]
    8308:	f048 0808 	orr.w	r8, r8, #8
    830c:	e5dc      	b.n	7ec8 <_svfprintf_r+0xb8>
    830e:	f048 0810 	orr.w	r8, r8, #16
    8312:	f018 0f20 	tst.w	r8, #32
    8316:	930b      	str	r3, [sp, #44]	; 0x2c
    8318:	9b08      	ldr	r3, [sp, #32]
    831a:	d1c1      	bne.n	82a0 <_svfprintf_r+0x490>
    831c:	f018 0f10 	tst.w	r8, #16
    8320:	f040 840b 	bne.w	8b3a <_svfprintf_r+0xd2a>
    8324:	f018 0f40 	tst.w	r8, #64	; 0x40
    8328:	f000 8403 	beq.w	8b32 <_svfprintf_r+0xd22>
    832c:	f933 2b04 	ldrsh.w	r2, [r3], #4
    8330:	9308      	str	r3, [sp, #32]
    8332:	17d1      	asrs	r1, r2, #31
    8334:	460b      	mov	r3, r1
    8336:	e7bd      	b.n	82b4 <_svfprintf_r+0x4a4>
    8338:	9b08      	ldr	r3, [sp, #32]
    833a:	f048 0202 	orr.w	r2, r8, #2
    833e:	9202      	str	r2, [sp, #8]
    8340:	f853 2b04 	ldr.w	r2, [r3], #4
    8344:	9308      	str	r3, [sp, #32]
    8346:	f647 0330 	movw	r3, #30768	; 0x7830
    834a:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    834e:	2078      	movs	r0, #120	; 0x78
    8350:	4b45      	ldr	r3, [pc, #276]	; (8468 <_svfprintf_r+0x658>)
    8352:	9311      	str	r3, [sp, #68]	; 0x44
    8354:	2100      	movs	r1, #0
    8356:	2302      	movs	r3, #2
    8358:	900b      	str	r0, [sp, #44]	; 0x2c
    835a:	2000      	movs	r0, #0
    835c:	9c03      	ldr	r4, [sp, #12]
    835e:	f88d 0067 	strb.w	r0, [sp, #103]	; 0x67
    8362:	1c60      	adds	r0, r4, #1
    8364:	f000 80ad 	beq.w	84c2 <_svfprintf_r+0x6b2>
    8368:	9802      	ldr	r0, [sp, #8]
    836a:	f020 0880 	bic.w	r8, r0, #128	; 0x80
    836e:	ea52 0001 	orrs.w	r0, r2, r1
    8372:	f040 80a4 	bne.w	84be <_svfprintf_r+0x6ae>
    8376:	2c00      	cmp	r4, #0
    8378:	f040 86ae 	bne.w	90d8 <_svfprintf_r+0x12c8>
    837c:	2b00      	cmp	r3, #0
    837e:	d1ac      	bne.n	82da <_svfprintf_r+0x4ca>
    8380:	9b02      	ldr	r3, [sp, #8]
    8382:	f013 0301 	ands.w	r3, r3, #1
    8386:	9305      	str	r3, [sp, #20]
    8388:	f000 83d1 	beq.w	8b2e <_svfprintf_r+0xd1e>
    838c:	2330      	movs	r3, #48	; 0x30
    838e:	f88d 313f 	strb.w	r3, [sp, #319]	; 0x13f
    8392:	f20d 143f 	addw	r4, sp, #319	; 0x13f
    8396:	e0ac      	b.n	84f2 <_svfprintf_r+0x6e2>
    8398:	f018 0f20 	tst.w	r8, #32
    839c:	f040 83d4 	bne.w	8b48 <_svfprintf_r+0xd38>
    83a0:	f018 0f10 	tst.w	r8, #16
    83a4:	f040 869f 	bne.w	90e6 <_svfprintf_r+0x12d6>
    83a8:	f018 0f40 	tst.w	r8, #64	; 0x40
    83ac:	f040 8797 	bne.w	92de <_svfprintf_r+0x14ce>
    83b0:	f418 7f00 	tst.w	r8, #512	; 0x200
    83b4:	f000 8697 	beq.w	90e6 <_svfprintf_r+0x12d6>
    83b8:	9b08      	ldr	r3, [sp, #32]
    83ba:	9904      	ldr	r1, [sp, #16]
    83bc:	f853 2b04 	ldr.w	r2, [r3], #4
    83c0:	9308      	str	r3, [sp, #32]
    83c2:	7011      	strb	r1, [r2, #0]
    83c4:	464c      	mov	r4, r9
    83c6:	e555      	b.n	7e74 <_svfprintf_r+0x64>
    83c8:	f899 3000 	ldrb.w	r3, [r9]
    83cc:	2b68      	cmp	r3, #104	; 0x68
    83ce:	bf03      	ittte	eq
    83d0:	f899 3001 	ldrbeq.w	r3, [r9, #1]
    83d4:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
    83d8:	f109 0901 	addeq.w	r9, r9, #1
    83dc:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
    83e0:	e572      	b.n	7ec8 <_svfprintf_r+0xb8>
    83e2:	f899 3000 	ldrb.w	r3, [r9]
    83e6:	f88d 5067 	strb.w	r5, [sp, #103]	; 0x67
    83ea:	e56d      	b.n	7ec8 <_svfprintf_r+0xb8>
    83ec:	f899 3000 	ldrb.w	r3, [r9]
    83f0:	2b6c      	cmp	r3, #108	; 0x6c
    83f2:	bf03      	ittte	eq
    83f4:	f899 3001 	ldrbeq.w	r3, [r9, #1]
    83f8:	f048 0820 	orreq.w	r8, r8, #32
    83fc:	f109 0901 	addeq.w	r9, r9, #1
    8400:	f048 0810 	orrne.w	r8, r8, #16
    8404:	e560      	b.n	7ec8 <_svfprintf_r+0xb8>
    8406:	930b      	str	r3, [sp, #44]	; 0x2c
    8408:	f048 0810 	orr.w	r8, r8, #16
    840c:	f018 0120 	ands.w	r1, r8, #32
    8410:	f000 8351 	beq.w	8ab6 <_svfprintf_r+0xca6>
    8414:	9b08      	ldr	r3, [sp, #32]
    8416:	3307      	adds	r3, #7
    8418:	f023 0307 	bic.w	r3, r3, #7
    841c:	6859      	ldr	r1, [r3, #4]
    841e:	f853 2b08 	ldr.w	r2, [r3], #8
    8422:	9308      	str	r3, [sp, #32]
    8424:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
    8428:	9302      	str	r3, [sp, #8]
    842a:	2300      	movs	r3, #0
    842c:	e795      	b.n	835a <_svfprintf_r+0x54a>
    842e:	930b      	str	r3, [sp, #44]	; 0x2c
    8430:	f048 0310 	orr.w	r3, r8, #16
    8434:	9302      	str	r3, [sp, #8]
    8436:	9b02      	ldr	r3, [sp, #8]
    8438:	f013 0120 	ands.w	r1, r3, #32
    843c:	f000 8329 	beq.w	8a92 <_svfprintf_r+0xc82>
    8440:	9b08      	ldr	r3, [sp, #32]
    8442:	3307      	adds	r3, #7
    8444:	f023 0307 	bic.w	r3, r3, #7
    8448:	6859      	ldr	r1, [r3, #4]
    844a:	f853 2b08 	ldr.w	r2, [r3], #8
    844e:	9308      	str	r3, [sp, #32]
    8450:	2301      	movs	r3, #1
    8452:	e782      	b.n	835a <_svfprintf_r+0x54a>
    8454:	f899 3000 	ldrb.w	r3, [r9]
    8458:	f048 0880 	orr.w	r8, r8, #128	; 0x80
    845c:	e534      	b.n	7ec8 <_svfprintf_r+0xb8>
    845e:	bf00      	nop
    8460:	200008f4 	.word	0x200008f4
    8464:	200008f8 	.word	0x200008f8
    8468:	20000904 	.word	0x20000904
    846c:	4649      	mov	r1, r9
    846e:	f811 3b01 	ldrb.w	r3, [r1], #1
    8472:	2b2a      	cmp	r3, #42	; 0x2a
    8474:	f001 8249 	beq.w	990a <_svfprintf_r+0x1afa>
    8478:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    847c:	2a09      	cmp	r2, #9
    847e:	4689      	mov	r9, r1
    8480:	bf98      	it	ls
    8482:	2100      	movls	r1, #0
    8484:	f201 8144 	bhi.w	9710 <_svfprintf_r+0x1900>
    8488:	f819 3b01 	ldrb.w	r3, [r9], #1
    848c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    8490:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    8494:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    8498:	2a09      	cmp	r2, #9
    849a:	d9f5      	bls.n	8488 <_svfprintf_r+0x678>
    849c:	9103      	str	r1, [sp, #12]
    849e:	e515      	b.n	7ecc <_svfprintf_r+0xbc>
    84a0:	f899 3000 	ldrb.w	r3, [r9]
    84a4:	f048 0801 	orr.w	r8, r8, #1
    84a8:	e50e      	b.n	7ec8 <_svfprintf_r+0xb8>
    84aa:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
    84ae:	2b00      	cmp	r3, #0
    84b0:	f47f ad8f 	bne.w	7fd2 <_svfprintf_r+0x1c2>
    84b4:	f899 3000 	ldrb.w	r3, [r9]
    84b8:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
    84bc:	e504      	b.n	7ec8 <_svfprintf_r+0xb8>
    84be:	f8cd 8008 	str.w	r8, [sp, #8]
    84c2:	2b01      	cmp	r3, #1
    84c4:	f000 819d 	beq.w	8802 <_svfprintf_r+0x9f2>
    84c8:	2b02      	cmp	r3, #2
    84ca:	ac50      	add	r4, sp, #320	; 0x140
    84cc:	d120      	bne.n	8510 <_svfprintf_r+0x700>
    84ce:	9811      	ldr	r0, [sp, #68]	; 0x44
    84d0:	f002 030f 	and.w	r3, r2, #15
    84d4:	0912      	lsrs	r2, r2, #4
    84d6:	5cc3      	ldrb	r3, [r0, r3]
    84d8:	f804 3d01 	strb.w	r3, [r4, #-1]!
    84dc:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    84e0:	0909      	lsrs	r1, r1, #4
    84e2:	ea52 0301 	orrs.w	r3, r2, r1
    84e6:	d1f3      	bne.n	84d0 <_svfprintf_r+0x6c0>
    84e8:	ab50      	add	r3, sp, #320	; 0x140
    84ea:	1b1b      	subs	r3, r3, r4
    84ec:	f8dd 8008 	ldr.w	r8, [sp, #8]
    84f0:	9305      	str	r3, [sp, #20]
    84f2:	9a05      	ldr	r2, [sp, #20]
    84f4:	9803      	ldr	r0, [sp, #12]
    84f6:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    84fa:	4282      	cmp	r2, r0
    84fc:	f04f 0300 	mov.w	r3, #0
    8500:	bfb8      	it	lt
    8502:	4602      	movlt	r2, r0
    8504:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    8508:	9307      	str	r3, [sp, #28]
    850a:	9202      	str	r2, [sp, #8]
    850c:	930f      	str	r3, [sp, #60]	; 0x3c
    850e:	e660      	b.n	81d2 <_svfprintf_r+0x3c2>
    8510:	f002 0307 	and.w	r3, r2, #7
    8514:	08d2      	lsrs	r2, r2, #3
    8516:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    851a:	08c9      	lsrs	r1, r1, #3
    851c:	3330      	adds	r3, #48	; 0x30
    851e:	ea52 0501 	orrs.w	r5, r2, r1
    8522:	4620      	mov	r0, r4
    8524:	f804 3d01 	strb.w	r3, [r4, #-1]!
    8528:	d1f2      	bne.n	8510 <_svfprintf_r+0x700>
    852a:	9a02      	ldr	r2, [sp, #8]
    852c:	07d1      	lsls	r1, r2, #31
    852e:	f100 824d 	bmi.w	89cc <_svfprintf_r+0xbbc>
    8532:	ab50      	add	r3, sp, #320	; 0x140
    8534:	1b1b      	subs	r3, r3, r4
    8536:	4690      	mov	r8, r2
    8538:	9305      	str	r3, [sp, #20]
    853a:	e7da      	b.n	84f2 <_svfprintf_r+0x6e2>
    853c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    853e:	2b65      	cmp	r3, #101	; 0x65
    8540:	f340 80d4 	ble.w	86ec <_svfprintf_r+0x8dc>
    8544:	eeb5 8b40 	vcmp.f64	d8, #0.0
    8548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    854c:	f040 81c1 	bne.w	88d2 <_svfprintf_r+0xac2>
    8550:	9b25      	ldr	r3, [sp, #148]	; 0x94
    8552:	49ba      	ldr	r1, [pc, #744]	; (883c <_svfprintf_r+0xa2c>)
    8554:	f8ca 1000 	str.w	r1, [sl]
    8558:	3301      	adds	r3, #1
    855a:	3201      	adds	r2, #1
    855c:	2101      	movs	r1, #1
    855e:	2b07      	cmp	r3, #7
    8560:	9226      	str	r2, [sp, #152]	; 0x98
    8562:	9325      	str	r3, [sp, #148]	; 0x94
    8564:	f8ca 1004 	str.w	r1, [sl, #4]
    8568:	f300 8551 	bgt.w	900e <_svfprintf_r+0x11fe>
    856c:	f10a 0a08 	add.w	sl, sl, #8
    8570:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    8572:	990e      	ldr	r1, [sp, #56]	; 0x38
    8574:	428b      	cmp	r3, r1
    8576:	f280 82d0 	bge.w	8b1a <_svfprintf_r+0xd0a>
    857a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    857c:	9912      	ldr	r1, [sp, #72]	; 0x48
    857e:	441a      	add	r2, r3
    8580:	e9ca 1300 	strd	r1, r3, [sl]
    8584:	9b25      	ldr	r3, [sp, #148]	; 0x94
    8586:	9226      	str	r2, [sp, #152]	; 0x98
    8588:	3301      	adds	r3, #1
    858a:	2b07      	cmp	r3, #7
    858c:	9325      	str	r3, [sp, #148]	; 0x94
    858e:	f300 8397 	bgt.w	8cc0 <_svfprintf_r+0xeb0>
    8592:	f10a 0a08 	add.w	sl, sl, #8
    8596:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8598:	1e5c      	subs	r4, r3, #1
    859a:	2c00      	cmp	r4, #0
    859c:	f77f add0 	ble.w	8140 <_svfprintf_r+0x330>
    85a0:	2c10      	cmp	r4, #16
    85a2:	9b25      	ldr	r3, [sp, #148]	; 0x94
    85a4:	f340 856e 	ble.w	9084 <_svfprintf_r+0x1274>
    85a8:	ee1b 6a10 	vmov	r6, s22
    85ac:	2510      	movs	r5, #16
    85ae:	e005      	b.n	85bc <_svfprintf_r+0x7ac>
    85b0:	f10a 0a08 	add.w	sl, sl, #8
    85b4:	3c10      	subs	r4, #16
    85b6:	2c10      	cmp	r4, #16
    85b8:	f340 8564 	ble.w	9084 <_svfprintf_r+0x1274>
    85bc:	3301      	adds	r3, #1
    85be:	49a0      	ldr	r1, [pc, #640]	; (8840 <_svfprintf_r+0xa30>)
    85c0:	3210      	adds	r2, #16
    85c2:	2b07      	cmp	r3, #7
    85c4:	e9ca 1500 	strd	r1, r5, [sl]
    85c8:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    85cc:	ddf0      	ble.n	85b0 <_svfprintf_r+0x7a0>
    85ce:	aa24      	add	r2, sp, #144	; 0x90
    85d0:	4631      	mov	r1, r6
    85d2:	4658      	mov	r0, fp
    85d4:	f004 fb1c 	bl	cc10 <__ssprint_r>
    85d8:	2800      	cmp	r0, #0
    85da:	d17e      	bne.n	86da <_svfprintf_r+0x8ca>
    85dc:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    85e0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    85e4:	e7e6      	b.n	85b4 <_svfprintf_r+0x7a4>
    85e6:	9b06      	ldr	r3, [sp, #24]
    85e8:	9902      	ldr	r1, [sp, #8]
    85ea:	1a5d      	subs	r5, r3, r1
    85ec:	2d00      	cmp	r5, #0
    85ee:	f77f ad8e 	ble.w	810e <_svfprintf_r+0x2fe>
    85f2:	2d10      	cmp	r5, #16
    85f4:	9b25      	ldr	r3, [sp, #148]	; 0x94
    85f6:	dd21      	ble.n	863c <_svfprintf_r+0x82c>
    85f8:	9409      	str	r4, [sp, #36]	; 0x24
    85fa:	2610      	movs	r6, #16
    85fc:	ee1b 4a10 	vmov	r4, s22
    8600:	e004      	b.n	860c <_svfprintf_r+0x7fc>
    8602:	3d10      	subs	r5, #16
    8604:	2d10      	cmp	r5, #16
    8606:	f10a 0a08 	add.w	sl, sl, #8
    860a:	dd16      	ble.n	863a <_svfprintf_r+0x82a>
    860c:	3301      	adds	r3, #1
    860e:	498c      	ldr	r1, [pc, #560]	; (8840 <_svfprintf_r+0xa30>)
    8610:	3210      	adds	r2, #16
    8612:	2b07      	cmp	r3, #7
    8614:	e9ca 1600 	strd	r1, r6, [sl]
    8618:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    861c:	ddf1      	ble.n	8602 <_svfprintf_r+0x7f2>
    861e:	aa24      	add	r2, sp, #144	; 0x90
    8620:	4621      	mov	r1, r4
    8622:	4658      	mov	r0, fp
    8624:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    8628:	f004 faf2 	bl	cc10 <__ssprint_r>
    862c:	2800      	cmp	r0, #0
    862e:	d154      	bne.n	86da <_svfprintf_r+0x8ca>
    8630:	3d10      	subs	r5, #16
    8632:	2d10      	cmp	r5, #16
    8634:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    8638:	dce8      	bgt.n	860c <_svfprintf_r+0x7fc>
    863a:	9c09      	ldr	r4, [sp, #36]	; 0x24
    863c:	4980      	ldr	r1, [pc, #512]	; (8840 <_svfprintf_r+0xa30>)
    863e:	f8ca 5004 	str.w	r5, [sl, #4]
    8642:	3301      	adds	r3, #1
    8644:	442a      	add	r2, r5
    8646:	2b07      	cmp	r3, #7
    8648:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    864c:	f8ca 1000 	str.w	r1, [sl]
    8650:	f300 8526 	bgt.w	90a0 <_svfprintf_r+0x1290>
    8654:	9b03      	ldr	r3, [sp, #12]
    8656:	9905      	ldr	r1, [sp, #20]
    8658:	1a5d      	subs	r5, r3, r1
    865a:	2d00      	cmp	r5, #0
    865c:	f10a 0a08 	add.w	sl, sl, #8
    8660:	f77f ad5b 	ble.w	811a <_svfprintf_r+0x30a>
    8664:	2d10      	cmp	r5, #16
    8666:	9b25      	ldr	r3, [sp, #148]	; 0x94
    8668:	dd1f      	ble.n	86aa <_svfprintf_r+0x89a>
    866a:	4651      	mov	r1, sl
    866c:	2610      	movs	r6, #16
    866e:	ee1b aa10 	vmov	sl, s22
    8672:	e004      	b.n	867e <_svfprintf_r+0x86e>
    8674:	3d10      	subs	r5, #16
    8676:	2d10      	cmp	r5, #16
    8678:	f101 0108 	add.w	r1, r1, #8
    867c:	dd14      	ble.n	86a8 <_svfprintf_r+0x898>
    867e:	3301      	adds	r3, #1
    8680:	486f      	ldr	r0, [pc, #444]	; (8840 <_svfprintf_r+0xa30>)
    8682:	3210      	adds	r2, #16
    8684:	2b07      	cmp	r3, #7
    8686:	e9c1 0600 	strd	r0, r6, [r1]
    868a:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    868e:	ddf1      	ble.n	8674 <_svfprintf_r+0x864>
    8690:	aa24      	add	r2, sp, #144	; 0x90
    8692:	4651      	mov	r1, sl
    8694:	4658      	mov	r0, fp
    8696:	f004 fabb 	bl	cc10 <__ssprint_r>
    869a:	b9f0      	cbnz	r0, 86da <_svfprintf_r+0x8ca>
    869c:	3d10      	subs	r5, #16
    869e:	2d10      	cmp	r5, #16
    86a0:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    86a4:	a927      	add	r1, sp, #156	; 0x9c
    86a6:	dcea      	bgt.n	867e <_svfprintf_r+0x86e>
    86a8:	468a      	mov	sl, r1
    86aa:	3301      	adds	r3, #1
    86ac:	4964      	ldr	r1, [pc, #400]	; (8840 <_svfprintf_r+0xa30>)
    86ae:	f8ca 5004 	str.w	r5, [sl, #4]
    86b2:	442a      	add	r2, r5
    86b4:	2b07      	cmp	r3, #7
    86b6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    86ba:	f8ca 1000 	str.w	r1, [sl]
    86be:	f300 81da 	bgt.w	8a76 <_svfprintf_r+0xc66>
    86c2:	f10a 0a08 	add.w	sl, sl, #8
    86c6:	e528      	b.n	811a <_svfprintf_r+0x30a>
    86c8:	ee1b 1a10 	vmov	r1, s22
    86cc:	aa24      	add	r2, sp, #144	; 0x90
    86ce:	4658      	mov	r0, fp
    86d0:	f004 fa9e 	bl	cc10 <__ssprint_r>
    86d4:	2800      	cmp	r0, #0
    86d6:	f43f ad47 	beq.w	8168 <_svfprintf_r+0x358>
    86da:	9b07      	ldr	r3, [sp, #28]
    86dc:	2b00      	cmp	r3, #0
    86de:	f43f aca2 	beq.w	8026 <_svfprintf_r+0x216>
    86e2:	9907      	ldr	r1, [sp, #28]
    86e4:	4658      	mov	r0, fp
    86e6:	f7fe f91d 	bl	6924 <_free_r>
    86ea:	e49c      	b.n	8026 <_svfprintf_r+0x216>
    86ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    86ee:	2b01      	cmp	r3, #1
    86f0:	f340 817a 	ble.w	89e8 <_svfprintf_r+0xbd8>
    86f4:	9b25      	ldr	r3, [sp, #148]	; 0x94
    86f6:	f8ca 4000 	str.w	r4, [sl]
    86fa:	3301      	adds	r3, #1
    86fc:	3201      	adds	r2, #1
    86fe:	2101      	movs	r1, #1
    8700:	2b07      	cmp	r3, #7
    8702:	9226      	str	r2, [sp, #152]	; 0x98
    8704:	9325      	str	r3, [sp, #148]	; 0x94
    8706:	f8ca 1004 	str.w	r1, [sl, #4]
    870a:	f300 81f8 	bgt.w	8afe <_svfprintf_r+0xcee>
    870e:	f10a 0a08 	add.w	sl, sl, #8
    8712:	9910      	ldr	r1, [sp, #64]	; 0x40
    8714:	9812      	ldr	r0, [sp, #72]	; 0x48
    8716:	3301      	adds	r3, #1
    8718:	440a      	add	r2, r1
    871a:	2b07      	cmp	r3, #7
    871c:	e9ca 0100 	strd	r0, r1, [sl]
    8720:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    8724:	f300 81dd 	bgt.w	8ae2 <_svfprintf_r+0xcd2>
    8728:	f10a 0a08 	add.w	sl, sl, #8
    872c:	eeb5 8b40 	vcmp.f64	d8, #0.0
    8730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8734:	f000 8177 	beq.w	8a26 <_svfprintf_r+0xc16>
    8738:	990e      	ldr	r1, [sp, #56]	; 0x38
    873a:	3301      	adds	r3, #1
    873c:	3901      	subs	r1, #1
    873e:	3401      	adds	r4, #1
    8740:	440a      	add	r2, r1
    8742:	2b07      	cmp	r3, #7
    8744:	f8ca 4000 	str.w	r4, [sl]
    8748:	9325      	str	r3, [sp, #148]	; 0x94
    874a:	f8ca 1004 	str.w	r1, [sl, #4]
    874e:	9226      	str	r2, [sp, #152]	; 0x98
    8750:	f300 815b 	bgt.w	8a0a <_svfprintf_r+0xbfa>
    8754:	f10a 0a08 	add.w	sl, sl, #8
    8758:	9914      	ldr	r1, [sp, #80]	; 0x50
    875a:	f8ca 1004 	str.w	r1, [sl, #4]
    875e:	3301      	adds	r3, #1
    8760:	440a      	add	r2, r1
    8762:	2b07      	cmp	r3, #7
    8764:	a91e      	add	r1, sp, #120	; 0x78
    8766:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    876a:	f8ca 1000 	str.w	r1, [sl]
    876e:	f77f ace5 	ble.w	813c <_svfprintf_r+0x32c>
    8772:	ee1b 1a10 	vmov	r1, s22
    8776:	aa24      	add	r2, sp, #144	; 0x90
    8778:	4658      	mov	r0, fp
    877a:	f004 fa49 	bl	cc10 <__ssprint_r>
    877e:	2800      	cmp	r0, #0
    8780:	d1ab      	bne.n	86da <_svfprintf_r+0x8ca>
    8782:	9a26      	ldr	r2, [sp, #152]	; 0x98
    8784:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    8788:	e4da      	b.n	8140 <_svfprintf_r+0x330>
    878a:	2d10      	cmp	r5, #16
    878c:	e9dd 1225 	ldrd	r1, r2, [sp, #148]	; 0x94
    8790:	4e2c      	ldr	r6, [pc, #176]	; (8844 <_svfprintf_r+0xa34>)
    8792:	dd24      	ble.n	87de <_svfprintf_r+0x9ce>
    8794:	9417      	str	r4, [sp, #92]	; 0x5c
    8796:	2310      	movs	r3, #16
    8798:	ee1b 4a10 	vmov	r4, s22
    879c:	4608      	mov	r0, r1
    879e:	e004      	b.n	87aa <_svfprintf_r+0x99a>
    87a0:	3d10      	subs	r5, #16
    87a2:	2d10      	cmp	r5, #16
    87a4:	f10a 0a08 	add.w	sl, sl, #8
    87a8:	dd17      	ble.n	87da <_svfprintf_r+0x9ca>
    87aa:	3001      	adds	r0, #1
    87ac:	3210      	adds	r2, #16
    87ae:	2807      	cmp	r0, #7
    87b0:	e9ca 6300 	strd	r6, r3, [sl]
    87b4:	e9cd 0225 	strd	r0, r2, [sp, #148]	; 0x94
    87b8:	ddf2      	ble.n	87a0 <_svfprintf_r+0x990>
    87ba:	aa24      	add	r2, sp, #144	; 0x90
    87bc:	4621      	mov	r1, r4
    87be:	4658      	mov	r0, fp
    87c0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    87c4:	f004 fa24 	bl	cc10 <__ssprint_r>
    87c8:	2800      	cmp	r0, #0
    87ca:	d186      	bne.n	86da <_svfprintf_r+0x8ca>
    87cc:	3d10      	subs	r5, #16
    87ce:	2d10      	cmp	r5, #16
    87d0:	e9dd 0225 	ldrd	r0, r2, [sp, #148]	; 0x94
    87d4:	f04f 0310 	mov.w	r3, #16
    87d8:	dce7      	bgt.n	87aa <_svfprintf_r+0x99a>
    87da:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    87dc:	4601      	mov	r1, r0
    87de:	3101      	adds	r1, #1
    87e0:	442a      	add	r2, r5
    87e2:	2907      	cmp	r1, #7
    87e4:	e9cd 1225 	strd	r1, r2, [sp, #148]	; 0x94
    87e8:	f8ca 6000 	str.w	r6, [sl]
    87ec:	f8ca 5004 	str.w	r5, [sl, #4]
    87f0:	f300 83bd 	bgt.w	8f6e <_svfprintf_r+0x115e>
    87f4:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    87f8:	f10a 0a08 	add.w	sl, sl, #8
    87fc:	e45d      	b.n	80ba <_svfprintf_r+0x2aa>
    87fe:	f8cd 8008 	str.w	r8, [sp, #8]
    8802:	2a0a      	cmp	r2, #10
    8804:	f171 0300 	sbcs.w	r3, r1, #0
    8808:	f080 8345 	bcs.w	8e96 <_svfprintf_r+0x1086>
    880c:	3230      	adds	r2, #48	; 0x30
    880e:	2301      	movs	r3, #1
    8810:	f8dd 8008 	ldr.w	r8, [sp, #8]
    8814:	f88d 213f 	strb.w	r2, [sp, #319]	; 0x13f
    8818:	9305      	str	r3, [sp, #20]
    881a:	f20d 143f 	addw	r4, sp, #319	; 0x13f
    881e:	e668      	b.n	84f2 <_svfprintf_r+0x6e2>
    8820:	ee1b 1a10 	vmov	r1, s22
    8824:	aa24      	add	r2, sp, #144	; 0x90
    8826:	4658      	mov	r0, fp
    8828:	f004 f9f2 	bl	cc10 <__ssprint_r>
    882c:	2800      	cmp	r0, #0
    882e:	f47f af54 	bne.w	86da <_svfprintf_r+0x8ca>
    8832:	9a26      	ldr	r2, [sp, #152]	; 0x98
    8834:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    8838:	e452      	b.n	80e0 <_svfprintf_r+0x2d0>
    883a:	bf00      	nop
    883c:	20000934 	.word	0x20000934
    8840:	20007a08 	.word	0x20007a08
    8844:	200023b0 	.word	0x200023b0
    8848:	ee1b 1a10 	vmov	r1, s22
    884c:	aa24      	add	r2, sp, #144	; 0x90
    884e:	4658      	mov	r0, fp
    8850:	f004 f9de 	bl	cc10 <__ssprint_r>
    8854:	2800      	cmp	r0, #0
    8856:	f47f af40 	bne.w	86da <_svfprintf_r+0x8ca>
    885a:	9a26      	ldr	r2, [sp, #152]	; 0x98
    885c:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    8860:	e451      	b.n	8106 <_svfprintf_r+0x2f6>
    8862:	2c10      	cmp	r4, #16
    8864:	9b25      	ldr	r3, [sp, #148]	; 0x94
    8866:	4ebe      	ldr	r6, [pc, #760]	; (8b60 <_svfprintf_r+0xd50>)
    8868:	dd1f      	ble.n	88aa <_svfprintf_r+0xa9a>
    886a:	ee1b 8a10 	vmov	r8, s22
    886e:	2510      	movs	r5, #16
    8870:	e004      	b.n	887c <_svfprintf_r+0xa6c>
    8872:	3c10      	subs	r4, #16
    8874:	2c10      	cmp	r4, #16
    8876:	f10a 0a08 	add.w	sl, sl, #8
    887a:	dd16      	ble.n	88aa <_svfprintf_r+0xa9a>
    887c:	3301      	adds	r3, #1
    887e:	3210      	adds	r2, #16
    8880:	2b07      	cmp	r3, #7
    8882:	e9ca 6500 	strd	r6, r5, [sl]
    8886:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    888a:	ddf2      	ble.n	8872 <_svfprintf_r+0xa62>
    888c:	aa24      	add	r2, sp, #144	; 0x90
    888e:	4641      	mov	r1, r8
    8890:	4658      	mov	r0, fp
    8892:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    8896:	f004 f9bb 	bl	cc10 <__ssprint_r>
    889a:	2800      	cmp	r0, #0
    889c:	f47f af1d 	bne.w	86da <_svfprintf_r+0x8ca>
    88a0:	3c10      	subs	r4, #16
    88a2:	2c10      	cmp	r4, #16
    88a4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    88a8:	dce8      	bgt.n	887c <_svfprintf_r+0xa6c>
    88aa:	3301      	adds	r3, #1
    88ac:	4422      	add	r2, r4
    88ae:	2b07      	cmp	r3, #7
    88b0:	e9ca 6400 	strd	r6, r4, [sl]
    88b4:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    88b8:	f77f ac4b 	ble.w	8152 <_svfprintf_r+0x342>
    88bc:	ee1b 1a10 	vmov	r1, s22
    88c0:	aa24      	add	r2, sp, #144	; 0x90
    88c2:	4658      	mov	r0, fp
    88c4:	f004 f9a4 	bl	cc10 <__ssprint_r>
    88c8:	2800      	cmp	r0, #0
    88ca:	f47f af06 	bne.w	86da <_svfprintf_r+0x8ca>
    88ce:	9a26      	ldr	r2, [sp, #152]	; 0x98
    88d0:	e43f      	b.n	8152 <_svfprintf_r+0x342>
    88d2:	991b      	ldr	r1, [sp, #108]	; 0x6c
    88d4:	2900      	cmp	r1, #0
    88d6:	f340 835a 	ble.w	8f8e <_svfprintf_r+0x117e>
    88da:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    88dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    88de:	429e      	cmp	r6, r3
    88e0:	bfa8      	it	ge
    88e2:	461e      	movge	r6, r3
    88e4:	2e00      	cmp	r6, #0
    88e6:	dd0b      	ble.n	8900 <_svfprintf_r+0xaf0>
    88e8:	9b25      	ldr	r3, [sp, #148]	; 0x94
    88ea:	3301      	adds	r3, #1
    88ec:	4432      	add	r2, r6
    88ee:	2b07      	cmp	r3, #7
    88f0:	e9ca 4600 	strd	r4, r6, [sl]
    88f4:	9226      	str	r2, [sp, #152]	; 0x98
    88f6:	9325      	str	r3, [sp, #148]	; 0x94
    88f8:	f300 8689 	bgt.w	960e <_svfprintf_r+0x17fe>
    88fc:	f10a 0a08 	add.w	sl, sl, #8
    8900:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    8902:	2e00      	cmp	r6, #0
    8904:	bfa8      	it	ge
    8906:	1bad      	subge	r5, r5, r6
    8908:	2d00      	cmp	r5, #0
    890a:	f300 8203 	bgt.w	8d14 <_svfprintf_r+0xf04>
    890e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8910:	f418 6f80 	tst.w	r8, #1024	; 0x400
    8914:	4423      	add	r3, r4
    8916:	9305      	str	r3, [sp, #20]
    8918:	f040 821f 	bne.w	8d5a <_svfprintf_r+0xf4a>
    891c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    891e:	990e      	ldr	r1, [sp, #56]	; 0x38
    8920:	428b      	cmp	r3, r1
    8922:	db03      	blt.n	892c <_svfprintf_r+0xb1c>
    8924:	f018 0f01 	tst.w	r8, #1
    8928:	f000 84cf 	beq.w	92ca <_svfprintf_r+0x14ba>
    892c:	9910      	ldr	r1, [sp, #64]	; 0x40
    892e:	9812      	ldr	r0, [sp, #72]	; 0x48
    8930:	440a      	add	r2, r1
    8932:	e9ca 0100 	strd	r0, r1, [sl]
    8936:	9925      	ldr	r1, [sp, #148]	; 0x94
    8938:	9226      	str	r2, [sp, #152]	; 0x98
    893a:	3101      	adds	r1, #1
    893c:	2907      	cmp	r1, #7
    893e:	9125      	str	r1, [sp, #148]	; 0x94
    8940:	f300 86a5 	bgt.w	968e <_svfprintf_r+0x187e>
    8944:	f10a 0a08 	add.w	sl, sl, #8
    8948:	990e      	ldr	r1, [sp, #56]	; 0x38
    894a:	1865      	adds	r5, r4, r1
    894c:	1acc      	subs	r4, r1, r3
    894e:	9b05      	ldr	r3, [sp, #20]
    8950:	1aed      	subs	r5, r5, r3
    8952:	42a5      	cmp	r5, r4
    8954:	bfa8      	it	ge
    8956:	4625      	movge	r5, r4
    8958:	2d00      	cmp	r5, #0
    895a:	dd0d      	ble.n	8978 <_svfprintf_r+0xb68>
    895c:	f8ca 3000 	str.w	r3, [sl]
    8960:	9b25      	ldr	r3, [sp, #148]	; 0x94
    8962:	f8ca 5004 	str.w	r5, [sl, #4]
    8966:	3301      	adds	r3, #1
    8968:	442a      	add	r2, r5
    896a:	2b07      	cmp	r3, #7
    896c:	9226      	str	r2, [sp, #152]	; 0x98
    896e:	9325      	str	r3, [sp, #148]	; 0x94
    8970:	f300 86bb 	bgt.w	96ea <_svfprintf_r+0x18da>
    8974:	f10a 0a08 	add.w	sl, sl, #8
    8978:	2d00      	cmp	r5, #0
    897a:	bfa8      	it	ge
    897c:	1b64      	subge	r4, r4, r5
    897e:	2c00      	cmp	r4, #0
    8980:	f77f abde 	ble.w	8140 <_svfprintf_r+0x330>
    8984:	2c10      	cmp	r4, #16
    8986:	9b25      	ldr	r3, [sp, #148]	; 0x94
    8988:	f340 837c 	ble.w	9084 <_svfprintf_r+0x1274>
    898c:	ee1b 6a10 	vmov	r6, s22
    8990:	2510      	movs	r5, #16
    8992:	e005      	b.n	89a0 <_svfprintf_r+0xb90>
    8994:	f10a 0a08 	add.w	sl, sl, #8
    8998:	3c10      	subs	r4, #16
    899a:	2c10      	cmp	r4, #16
    899c:	f340 8372 	ble.w	9084 <_svfprintf_r+0x1274>
    89a0:	3301      	adds	r3, #1
    89a2:	4970      	ldr	r1, [pc, #448]	; (8b64 <_svfprintf_r+0xd54>)
    89a4:	3210      	adds	r2, #16
    89a6:	2b07      	cmp	r3, #7
    89a8:	e9ca 1500 	strd	r1, r5, [sl]
    89ac:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    89b0:	ddf0      	ble.n	8994 <_svfprintf_r+0xb84>
    89b2:	aa24      	add	r2, sp, #144	; 0x90
    89b4:	4631      	mov	r1, r6
    89b6:	4658      	mov	r0, fp
    89b8:	f004 f92a 	bl	cc10 <__ssprint_r>
    89bc:	2800      	cmp	r0, #0
    89be:	f47f ae8c 	bne.w	86da <_svfprintf_r+0x8ca>
    89c2:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    89c6:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    89ca:	e7e5      	b.n	8998 <_svfprintf_r+0xb88>
    89cc:	2b30      	cmp	r3, #48	; 0x30
    89ce:	f43f ad8b 	beq.w	84e8 <_svfprintf_r+0x6d8>
    89d2:	2330      	movs	r3, #48	; 0x30
    89d4:	3802      	subs	r0, #2
    89d6:	f804 3c01 	strb.w	r3, [r4, #-1]
    89da:	ab50      	add	r3, sp, #320	; 0x140
    89dc:	1a1b      	subs	r3, r3, r0
    89de:	f8dd 8008 	ldr.w	r8, [sp, #8]
    89e2:	9305      	str	r3, [sp, #20]
    89e4:	4604      	mov	r4, r0
    89e6:	e584      	b.n	84f2 <_svfprintf_r+0x6e2>
    89e8:	f018 0f01 	tst.w	r8, #1
    89ec:	f47f ae82 	bne.w	86f4 <_svfprintf_r+0x8e4>
    89f0:	9b25      	ldr	r3, [sp, #148]	; 0x94
    89f2:	f8ca 4000 	str.w	r4, [sl]
    89f6:	3301      	adds	r3, #1
    89f8:	3201      	adds	r2, #1
    89fa:	2101      	movs	r1, #1
    89fc:	2b07      	cmp	r3, #7
    89fe:	9226      	str	r2, [sp, #152]	; 0x98
    8a00:	9325      	str	r3, [sp, #148]	; 0x94
    8a02:	f8ca 1004 	str.w	r1, [sl, #4]
    8a06:	f77f aea5 	ble.w	8754 <_svfprintf_r+0x944>
    8a0a:	ee1b 1a10 	vmov	r1, s22
    8a0e:	aa24      	add	r2, sp, #144	; 0x90
    8a10:	4658      	mov	r0, fp
    8a12:	f004 f8fd 	bl	cc10 <__ssprint_r>
    8a16:	2800      	cmp	r0, #0
    8a18:	f47f ae5f 	bne.w	86da <_svfprintf_r+0x8ca>
    8a1c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    8a20:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    8a24:	e698      	b.n	8758 <_svfprintf_r+0x948>
    8a26:	990e      	ldr	r1, [sp, #56]	; 0x38
    8a28:	1e4c      	subs	r4, r1, #1
    8a2a:	2c00      	cmp	r4, #0
    8a2c:	f77f ae94 	ble.w	8758 <_svfprintf_r+0x948>
    8a30:	2c10      	cmp	r4, #16
    8a32:	f340 8361 	ble.w	90f8 <_svfprintf_r+0x12e8>
    8a36:	ee1b 6a10 	vmov	r6, s22
    8a3a:	2510      	movs	r5, #16
    8a3c:	e005      	b.n	8a4a <_svfprintf_r+0xc3a>
    8a3e:	f10a 0a08 	add.w	sl, sl, #8
    8a42:	3c10      	subs	r4, #16
    8a44:	2c10      	cmp	r4, #16
    8a46:	f340 8357 	ble.w	90f8 <_svfprintf_r+0x12e8>
    8a4a:	3301      	adds	r3, #1
    8a4c:	4945      	ldr	r1, [pc, #276]	; (8b64 <_svfprintf_r+0xd54>)
    8a4e:	3210      	adds	r2, #16
    8a50:	2b07      	cmp	r3, #7
    8a52:	e9ca 1500 	strd	r1, r5, [sl]
    8a56:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    8a5a:	ddf0      	ble.n	8a3e <_svfprintf_r+0xc2e>
    8a5c:	aa24      	add	r2, sp, #144	; 0x90
    8a5e:	4631      	mov	r1, r6
    8a60:	4658      	mov	r0, fp
    8a62:	f004 f8d5 	bl	cc10 <__ssprint_r>
    8a66:	2800      	cmp	r0, #0
    8a68:	f47f ae37 	bne.w	86da <_svfprintf_r+0x8ca>
    8a6c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    8a70:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    8a74:	e7e5      	b.n	8a42 <_svfprintf_r+0xc32>
    8a76:	ee1b 1a10 	vmov	r1, s22
    8a7a:	aa24      	add	r2, sp, #144	; 0x90
    8a7c:	4658      	mov	r0, fp
    8a7e:	f004 f8c7 	bl	cc10 <__ssprint_r>
    8a82:	2800      	cmp	r0, #0
    8a84:	f47f ae29 	bne.w	86da <_svfprintf_r+0x8ca>
    8a88:	9a26      	ldr	r2, [sp, #152]	; 0x98
    8a8a:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    8a8e:	f7ff bb44 	b.w	811a <_svfprintf_r+0x30a>
    8a92:	9b02      	ldr	r3, [sp, #8]
    8a94:	f013 0310 	ands.w	r3, r3, #16
    8a98:	f040 80c1 	bne.w	8c1e <_svfprintf_r+0xe0e>
    8a9c:	9a02      	ldr	r2, [sp, #8]
    8a9e:	f012 0240 	ands.w	r2, r2, #64	; 0x40
    8aa2:	f000 837a 	beq.w	919a <_svfprintf_r+0x138a>
    8aa6:	9808      	ldr	r0, [sp, #32]
    8aa8:	f850 2b04 	ldr.w	r2, [r0], #4
    8aac:	9008      	str	r0, [sp, #32]
    8aae:	4619      	mov	r1, r3
    8ab0:	b292      	uxth	r2, r2
    8ab2:	2301      	movs	r3, #1
    8ab4:	e451      	b.n	835a <_svfprintf_r+0x54a>
    8ab6:	f018 0310 	ands.w	r3, r8, #16
    8aba:	d155      	bne.n	8b68 <_svfprintf_r+0xd58>
    8abc:	f018 0240 	ands.w	r2, r8, #64	; 0x40
    8ac0:	f000 835d 	beq.w	917e <_svfprintf_r+0x136e>
    8ac4:	9808      	ldr	r0, [sp, #32]
    8ac6:	f850 2b04 	ldr.w	r2, [r0], #4
    8aca:	9008      	str	r0, [sp, #32]
    8acc:	4619      	mov	r1, r3
    8ace:	b292      	uxth	r2, r2
    8ad0:	e4a8      	b.n	8424 <_svfprintf_r+0x614>
    8ad2:	4252      	negs	r2, r2
    8ad4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8ad8:	f8cd 8008 	str.w	r8, [sp, #8]
    8adc:	202d      	movs	r0, #45	; 0x2d
    8ade:	2301      	movs	r3, #1
    8ae0:	e43c      	b.n	835c <_svfprintf_r+0x54c>
    8ae2:	ee1b 1a10 	vmov	r1, s22
    8ae6:	aa24      	add	r2, sp, #144	; 0x90
    8ae8:	4658      	mov	r0, fp
    8aea:	f004 f891 	bl	cc10 <__ssprint_r>
    8aee:	2800      	cmp	r0, #0
    8af0:	f47f adf3 	bne.w	86da <_svfprintf_r+0x8ca>
    8af4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    8af8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    8afc:	e616      	b.n	872c <_svfprintf_r+0x91c>
    8afe:	ee1b 1a10 	vmov	r1, s22
    8b02:	aa24      	add	r2, sp, #144	; 0x90
    8b04:	4658      	mov	r0, fp
    8b06:	f004 f883 	bl	cc10 <__ssprint_r>
    8b0a:	2800      	cmp	r0, #0
    8b0c:	f47f ade5 	bne.w	86da <_svfprintf_r+0x8ca>
    8b10:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    8b14:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    8b18:	e5fb      	b.n	8712 <_svfprintf_r+0x902>
    8b1a:	f018 0f01 	tst.w	r8, #1
    8b1e:	f43f ab0f 	beq.w	8140 <_svfprintf_r+0x330>
    8b22:	e52a      	b.n	857a <_svfprintf_r+0x76a>
    8b24:	9308      	str	r3, [sp, #32]
    8b26:	f899 3000 	ldrb.w	r3, [r9]
    8b2a:	f7ff b9cd 	b.w	7ec8 <_svfprintf_r+0xb8>
    8b2e:	ac50      	add	r4, sp, #320	; 0x140
    8b30:	e4df      	b.n	84f2 <_svfprintf_r+0x6e2>
    8b32:	f418 7f00 	tst.w	r8, #512	; 0x200
    8b36:	f040 83db 	bne.w	92f0 <_svfprintf_r+0x14e0>
    8b3a:	f853 2b04 	ldr.w	r2, [r3], #4
    8b3e:	9308      	str	r3, [sp, #32]
    8b40:	17d1      	asrs	r1, r2, #31
    8b42:	460b      	mov	r3, r1
    8b44:	f7ff bbb6 	b.w	82b4 <_svfprintf_r+0x4a4>
    8b48:	9b08      	ldr	r3, [sp, #32]
    8b4a:	9804      	ldr	r0, [sp, #16]
    8b4c:	f853 1b04 	ldr.w	r1, [r3], #4
    8b50:	9308      	str	r3, [sp, #32]
    8b52:	17c2      	asrs	r2, r0, #31
    8b54:	e9c1 0200 	strd	r0, r2, [r1]
    8b58:	464c      	mov	r4, r9
    8b5a:	f7ff b98b 	b.w	7e74 <_svfprintf_r+0x64>
    8b5e:	bf00      	nop
    8b60:	200023b0 	.word	0x200023b0
    8b64:	20007a08 	.word	0x20007a08
    8b68:	9b08      	ldr	r3, [sp, #32]
    8b6a:	f853 2b04 	ldr.w	r2, [r3], #4
    8b6e:	9308      	str	r3, [sp, #32]
    8b70:	e458      	b.n	8424 <_svfprintf_r+0x614>
    8b72:	eeb4 8b48 	vcmp.f64	d8, d8
    8b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8b7a:	f180 8694 	bvs.w	98a6 <_svfprintf_r+0x1a96>
    8b7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8b80:	2b61      	cmp	r3, #97	; 0x61
    8b82:	f000 8552 	beq.w	962a <_svfprintf_r+0x181a>
    8b86:	2b41      	cmp	r3, #65	; 0x41
    8b88:	f000 85c0 	beq.w	970c <_svfprintf_r+0x18fc>
    8b8c:	9b03      	ldr	r3, [sp, #12]
    8b8e:	3301      	adds	r3, #1
    8b90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8b92:	f023 0520 	bic.w	r5, r3, #32
    8b96:	f000 8480 	beq.w	949a <_svfprintf_r+0x168a>
    8b9a:	2d47      	cmp	r5, #71	; 0x47
    8b9c:	d104      	bne.n	8ba8 <_svfprintf_r+0xd98>
    8b9e:	9b03      	ldr	r3, [sp, #12]
    8ba0:	2b00      	cmp	r3, #0
    8ba2:	bf08      	it	eq
    8ba4:	2301      	moveq	r3, #1
    8ba6:	9303      	str	r3, [sp, #12]
    8ba8:	ee18 3a90 	vmov	r3, s17
    8bac:	2b00      	cmp	r3, #0
    8bae:	f448 7280 	orr.w	r2, r8, #256	; 0x100
    8bb2:	4646      	mov	r6, r8
    8bb4:	f2c0 8618 	blt.w	97e8 <_svfprintf_r+0x19d8>
    8bb8:	eeb0 ab48 	vmov.f64	d10, d8
    8bbc:	2300      	movs	r3, #0
    8bbe:	4690      	mov	r8, r2
    8bc0:	9309      	str	r3, [sp, #36]	; 0x24
    8bc2:	9307      	str	r3, [sp, #28]
    8bc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8bc6:	3b41      	subs	r3, #65	; 0x41
    8bc8:	2b25      	cmp	r3, #37	; 0x25
    8bca:	f200 8398 	bhi.w	92fe <_svfprintf_r+0x14ee>
    8bce:	e8df f013 	tbh	[pc, r3, lsl #1]
    8bd2:	046f      	.short	0x046f
    8bd4:	03960396 	.word	0x03960396
    8bd8:	04680396 	.word	0x04680396
    8bdc:	0396046c 	.word	0x0396046c
    8be0:	03960396 	.word	0x03960396
    8be4:	03960396 	.word	0x03960396
    8be8:	03960396 	.word	0x03960396
    8bec:	03960396 	.word	0x03960396
    8bf0:	03960396 	.word	0x03960396
    8bf4:	03960396 	.word	0x03960396
    8bf8:	03960396 	.word	0x03960396
    8bfc:	03960396 	.word	0x03960396
    8c00:	03960396 	.word	0x03960396
    8c04:	03960396 	.word	0x03960396
    8c08:	03960396 	.word	0x03960396
    8c0c:	03960396 	.word	0x03960396
    8c10:	03960396 	.word	0x03960396
    8c14:	03960396 	.word	0x03960396
    8c18:	04680396 	.word	0x04680396
    8c1c:	046c      	.short	0x046c
    8c1e:	9b08      	ldr	r3, [sp, #32]
    8c20:	f853 2b04 	ldr.w	r2, [r3], #4
    8c24:	9308      	str	r3, [sp, #32]
    8c26:	2301      	movs	r3, #1
    8c28:	f7ff bb97 	b.w	835a <_svfprintf_r+0x54a>
    8c2c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    8c2e:	2b00      	cmp	r3, #0
    8c30:	f43f a9cf 	beq.w	7fd2 <_svfprintf_r+0x1c2>
    8c34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    8c36:	781b      	ldrb	r3, [r3, #0]
    8c38:	2b00      	cmp	r3, #0
    8c3a:	f43f a9ca 	beq.w	7fd2 <_svfprintf_r+0x1c2>
    8c3e:	f899 3000 	ldrb.w	r3, [r9]
    8c42:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
    8c46:	f7ff b93f 	b.w	7ec8 <_svfprintf_r+0xb8>
    8c4a:	930b      	str	r3, [sp, #44]	; 0x2c
    8c4c:	f8cd 8008 	str.w	r8, [sp, #8]
    8c50:	f7ff bbf1 	b.w	8436 <_svfprintf_r+0x626>
    8c54:	930b      	str	r3, [sp, #44]	; 0x2c
    8c56:	4b9a      	ldr	r3, [pc, #616]	; (8ec0 <_svfprintf_r+0x10b0>)
    8c58:	9311      	str	r3, [sp, #68]	; 0x44
    8c5a:	f018 0120 	ands.w	r1, r8, #32
    8c5e:	f000 8105 	beq.w	8e6c <_svfprintf_r+0x105c>
    8c62:	9b08      	ldr	r3, [sp, #32]
    8c64:	3307      	adds	r3, #7
    8c66:	f023 0307 	bic.w	r3, r3, #7
    8c6a:	6859      	ldr	r1, [r3, #4]
    8c6c:	f853 2b08 	ldr.w	r2, [r3], #8
    8c70:	9308      	str	r3, [sp, #32]
    8c72:	f018 0f01 	tst.w	r8, #1
    8c76:	d00a      	beq.n	8c8e <_svfprintf_r+0xe7e>
    8c78:	ea52 0301 	orrs.w	r3, r2, r1
    8c7c:	d007      	beq.n	8c8e <_svfprintf_r+0xe7e>
    8c7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8c80:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    8c84:	2330      	movs	r3, #48	; 0x30
    8c86:	f048 0802 	orr.w	r8, r8, #2
    8c8a:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    8c8e:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
    8c92:	9302      	str	r3, [sp, #8]
    8c94:	2302      	movs	r3, #2
    8c96:	f7ff bb60 	b.w	835a <_svfprintf_r+0x54a>
    8c9a:	930b      	str	r3, [sp, #44]	; 0x2c
    8c9c:	f7ff bbb6 	b.w	840c <_svfprintf_r+0x5fc>
    8ca0:	930b      	str	r3, [sp, #44]	; 0x2c
    8ca2:	4b88      	ldr	r3, [pc, #544]	; (8ec4 <_svfprintf_r+0x10b4>)
    8ca4:	9311      	str	r3, [sp, #68]	; 0x44
    8ca6:	e7d8      	b.n	8c5a <_svfprintf_r+0xe4a>
    8ca8:	9b08      	ldr	r3, [sp, #32]
    8caa:	2101      	movs	r1, #1
    8cac:	f853 2b04 	ldr.w	r2, [r3], #4
    8cb0:	9102      	str	r1, [sp, #8]
    8cb2:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
    8cb6:	9308      	str	r3, [sp, #32]
    8cb8:	9105      	str	r1, [sp, #20]
    8cba:	ac37      	add	r4, sp, #220	; 0xdc
    8cbc:	f7ff baaf 	b.w	821e <_svfprintf_r+0x40e>
    8cc0:	ee1b 1a10 	vmov	r1, s22
    8cc4:	aa24      	add	r2, sp, #144	; 0x90
    8cc6:	4658      	mov	r0, fp
    8cc8:	f003 ffa2 	bl	cc10 <__ssprint_r>
    8ccc:	2800      	cmp	r0, #0
    8cce:	f47f ad04 	bne.w	86da <_svfprintf_r+0x8ca>
    8cd2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    8cd4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    8cd8:	e45d      	b.n	8596 <_svfprintf_r+0x786>
    8cda:	9b03      	ldr	r3, [sp, #12]
    8cdc:	9407      	str	r4, [sp, #28]
    8cde:	2b06      	cmp	r3, #6
    8ce0:	4622      	mov	r2, r4
    8ce2:	bf28      	it	cs
    8ce4:	2306      	movcs	r3, #6
    8ce6:	9403      	str	r4, [sp, #12]
    8ce8:	4621      	mov	r1, r4
    8cea:	e9cd 220c 	strd	r2, r2, [sp, #48]	; 0x30
    8cee:	4c76      	ldr	r4, [pc, #472]	; (8ec8 <_svfprintf_r+0x10b8>)
    8cf0:	9302      	str	r3, [sp, #8]
    8cf2:	9305      	str	r3, [sp, #20]
    8cf4:	920f      	str	r2, [sp, #60]	; 0x3c
    8cf6:	f7ff ba6c 	b.w	81d2 <_svfprintf_r+0x3c2>
    8cfa:	2140      	movs	r1, #64	; 0x40
    8cfc:	4658      	mov	r0, fp
    8cfe:	f7fb fa2f 	bl	4160 <_malloc_r>
    8d02:	6020      	str	r0, [r4, #0]
    8d04:	6120      	str	r0, [r4, #16]
    8d06:	2800      	cmp	r0, #0
    8d08:	f000 860f 	beq.w	992a <_svfprintf_r+0x1b1a>
    8d0c:	2340      	movs	r3, #64	; 0x40
    8d0e:	6163      	str	r3, [r4, #20]
    8d10:	f7ff b89e 	b.w	7e50 <_svfprintf_r+0x40>
    8d14:	2d10      	cmp	r5, #16
    8d16:	9b25      	ldr	r3, [sp, #148]	; 0x94
    8d18:	f340 825d 	ble.w	91d6 <_svfprintf_r+0x13c6>
    8d1c:	4651      	mov	r1, sl
    8d1e:	2610      	movs	r6, #16
    8d20:	ee1b aa10 	vmov	sl, s22
    8d24:	e004      	b.n	8d30 <_svfprintf_r+0xf20>
    8d26:	3108      	adds	r1, #8
    8d28:	3d10      	subs	r5, #16
    8d2a:	2d10      	cmp	r5, #16
    8d2c:	f340 8252 	ble.w	91d4 <_svfprintf_r+0x13c4>
    8d30:	3301      	adds	r3, #1
    8d32:	4866      	ldr	r0, [pc, #408]	; (8ecc <_svfprintf_r+0x10bc>)
    8d34:	3210      	adds	r2, #16
    8d36:	2b07      	cmp	r3, #7
    8d38:	e9c1 0600 	strd	r0, r6, [r1]
    8d3c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    8d40:	ddf1      	ble.n	8d26 <_svfprintf_r+0xf16>
    8d42:	aa24      	add	r2, sp, #144	; 0x90
    8d44:	4651      	mov	r1, sl
    8d46:	4658      	mov	r0, fp
    8d48:	f003 ff62 	bl	cc10 <__ssprint_r>
    8d4c:	2800      	cmp	r0, #0
    8d4e:	f47f acc4 	bne.w	86da <_svfprintf_r+0x8ca>
    8d52:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    8d56:	a927      	add	r1, sp, #156	; 0x9c
    8d58:	e7e6      	b.n	8d28 <_svfprintf_r+0xf18>
    8d5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8d5c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    8d60:	18e3      	adds	r3, r4, r3
    8d62:	9303      	str	r3, [sp, #12]
    8d64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8d66:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    8d6a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    8d6c:	9d05      	ldr	r5, [sp, #20]
    8d6e:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
    8d72:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
    8d76:	940b      	str	r4, [sp, #44]	; 0x2c
    8d78:	ee1b 1a10 	vmov	r1, s22
    8d7c:	4650      	mov	r0, sl
    8d7e:	2b00      	cmp	r3, #0
    8d80:	d034      	beq.n	8dec <_svfprintf_r+0xfdc>
    8d82:	f1b8 0f00 	cmp.w	r8, #0
    8d86:	d135      	bne.n	8df4 <_svfprintf_r+0xfe4>
    8d88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8d8a:	3b01      	subs	r3, #1
    8d8c:	3e01      	subs	r6, #1
    8d8e:	930d      	str	r3, [sp, #52]	; 0x34
    8d90:	9b15      	ldr	r3, [sp, #84]	; 0x54
    8d92:	e9c0 3900 	strd	r3, r9, [r0]
    8d96:	9b25      	ldr	r3, [sp, #148]	; 0x94
    8d98:	3301      	adds	r3, #1
    8d9a:	444a      	add	r2, r9
    8d9c:	2b07      	cmp	r3, #7
    8d9e:	9226      	str	r2, [sp, #152]	; 0x98
    8da0:	9325      	str	r3, [sp, #148]	; 0x94
    8da2:	dc6c      	bgt.n	8e7e <_svfprintf_r+0x106e>
    8da4:	3008      	adds	r0, #8
    8da6:	9b03      	ldr	r3, [sp, #12]
    8da8:	f896 c000 	ldrb.w	ip, [r6]
    8dac:	1b5b      	subs	r3, r3, r5
    8dae:	4563      	cmp	r3, ip
    8db0:	bfa8      	it	ge
    8db2:	4663      	movge	r3, ip
    8db4:	2b00      	cmp	r3, #0
    8db6:	469a      	mov	sl, r3
    8db8:	dd0c      	ble.n	8dd4 <_svfprintf_r+0xfc4>
    8dba:	9c25      	ldr	r4, [sp, #148]	; 0x94
    8dbc:	3401      	adds	r4, #1
    8dbe:	441a      	add	r2, r3
    8dc0:	2c07      	cmp	r4, #7
    8dc2:	e9c0 5300 	strd	r5, r3, [r0]
    8dc6:	9226      	str	r2, [sp, #152]	; 0x98
    8dc8:	9425      	str	r4, [sp, #148]	; 0x94
    8dca:	f300 8177 	bgt.w	90bc <_svfprintf_r+0x12ac>
    8dce:	f896 c000 	ldrb.w	ip, [r6]
    8dd2:	3008      	adds	r0, #8
    8dd4:	f1ba 0f00 	cmp.w	sl, #0
    8dd8:	bfac      	ite	ge
    8dda:	ebac 040a 	subge.w	r4, ip, sl
    8dde:	4664      	movlt	r4, ip
    8de0:	2c00      	cmp	r4, #0
    8de2:	dc0a      	bgt.n	8dfa <_svfprintf_r+0xfea>
    8de4:	4465      	add	r5, ip
    8de6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8de8:	2b00      	cmp	r3, #0
    8dea:	d1ca      	bne.n	8d82 <_svfprintf_r+0xf72>
    8dec:	f1b8 0f00 	cmp.w	r8, #0
    8df0:	f000 83ac 	beq.w	954c <_svfprintf_r+0x173c>
    8df4:	f108 38ff 	add.w	r8, r8, #4294967295
    8df8:	e7ca      	b.n	8d90 <_svfprintf_r+0xf80>
    8dfa:	2c10      	cmp	r4, #16
    8dfc:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
    8e00:	dd24      	ble.n	8e4c <_svfprintf_r+0x103c>
    8e02:	9505      	str	r5, [sp, #20]
    8e04:	f04f 0a10 	mov.w	sl, #16
    8e08:	4663      	mov	r3, ip
    8e0a:	460d      	mov	r5, r1
    8e0c:	e004      	b.n	8e18 <_svfprintf_r+0x1008>
    8e0e:	3c10      	subs	r4, #16
    8e10:	2c10      	cmp	r4, #16
    8e12:	f100 0008 	add.w	r0, r0, #8
    8e16:	dd16      	ble.n	8e46 <_svfprintf_r+0x1036>
    8e18:	3301      	adds	r3, #1
    8e1a:	492c      	ldr	r1, [pc, #176]	; (8ecc <_svfprintf_r+0x10bc>)
    8e1c:	3210      	adds	r2, #16
    8e1e:	2b07      	cmp	r3, #7
    8e20:	e9c0 1a00 	strd	r1, sl, [r0]
    8e24:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    8e28:	ddf1      	ble.n	8e0e <_svfprintf_r+0xffe>
    8e2a:	aa24      	add	r2, sp, #144	; 0x90
    8e2c:	4629      	mov	r1, r5
    8e2e:	4658      	mov	r0, fp
    8e30:	f003 feee 	bl	cc10 <__ssprint_r>
    8e34:	2800      	cmp	r0, #0
    8e36:	f47f ac50 	bne.w	86da <_svfprintf_r+0x8ca>
    8e3a:	3c10      	subs	r4, #16
    8e3c:	2c10      	cmp	r4, #16
    8e3e:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    8e42:	a827      	add	r0, sp, #156	; 0x9c
    8e44:	dce8      	bgt.n	8e18 <_svfprintf_r+0x1008>
    8e46:	4629      	mov	r1, r5
    8e48:	9d05      	ldr	r5, [sp, #20]
    8e4a:	469c      	mov	ip, r3
    8e4c:	f10c 0301 	add.w	r3, ip, #1
    8e50:	4422      	add	r2, r4
    8e52:	6044      	str	r4, [r0, #4]
    8e54:	2b07      	cmp	r3, #7
    8e56:	4c1d      	ldr	r4, [pc, #116]	; (8ecc <_svfprintf_r+0x10bc>)
    8e58:	6004      	str	r4, [r0, #0]
    8e5a:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    8e5e:	f300 83c6 	bgt.w	95ee <_svfprintf_r+0x17de>
    8e62:	f896 c000 	ldrb.w	ip, [r6]
    8e66:	3008      	adds	r0, #8
    8e68:	4465      	add	r5, ip
    8e6a:	e7bc      	b.n	8de6 <_svfprintf_r+0xfd6>
    8e6c:	f018 0310 	ands.w	r3, r8, #16
    8e70:	f000 80c2 	beq.w	8ff8 <_svfprintf_r+0x11e8>
    8e74:	9b08      	ldr	r3, [sp, #32]
    8e76:	f853 2b04 	ldr.w	r2, [r3], #4
    8e7a:	9308      	str	r3, [sp, #32]
    8e7c:	e6f9      	b.n	8c72 <_svfprintf_r+0xe62>
    8e7e:	aa24      	add	r2, sp, #144	; 0x90
    8e80:	4658      	mov	r0, fp
    8e82:	9105      	str	r1, [sp, #20]
    8e84:	f003 fec4 	bl	cc10 <__ssprint_r>
    8e88:	2800      	cmp	r0, #0
    8e8a:	f47f ac26 	bne.w	86da <_svfprintf_r+0x8ca>
    8e8e:	9a26      	ldr	r2, [sp, #152]	; 0x98
    8e90:	9905      	ldr	r1, [sp, #20]
    8e92:	a827      	add	r0, sp, #156	; 0x9c
    8e94:	e787      	b.n	8da6 <_svfprintf_r+0xf96>
    8e96:	9802      	ldr	r0, [sp, #8]
    8e98:	f8cd a01c 	str.w	sl, [sp, #28]
    8e9c:	ac50      	add	r4, sp, #320	; 0x140
    8e9e:	f400 6080 	and.w	r0, r0, #1024	; 0x400
    8ea2:	2500      	movs	r5, #0
    8ea4:	ee0a ba10 	vmov	s20, fp
    8ea8:	4b09      	ldr	r3, [pc, #36]	; (8ed0 <_svfprintf_r+0x10c0>)
    8eaa:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
    8eae:	f8cd 9014 	str.w	r9, [sp, #20]
    8eb2:	46a3      	mov	fp, r4
    8eb4:	f04f 0805 	mov.w	r8, #5
    8eb8:	46ac      	mov	ip, r5
    8eba:	4604      	mov	r4, r0
    8ebc:	e010      	b.n	8ee0 <_svfprintf_r+0x10d0>
    8ebe:	bf00      	nop
    8ec0:	20000904 	.word	0x20000904
    8ec4:	20000918 	.word	0x20000918
    8ec8:	2000092c 	.word	0x2000092c
    8ecc:	20007a08 	.word	0x20007a08
    8ed0:	cccccccd 	.word	0xcccccccd
    8ed4:	2a0a      	cmp	r2, #10
    8ed6:	f171 0100 	sbcs.w	r1, r1, #0
    8eda:	d336      	bcc.n	8f4a <_svfprintf_r+0x113a>
    8edc:	464a      	mov	r2, r9
    8ede:	4631      	mov	r1, r6
    8ee0:	1850      	adds	r0, r2, r1
    8ee2:	f140 0000 	adc.w	r0, r0, #0
    8ee6:	fba3 5600 	umull	r5, r6, r3, r0
    8eea:	f026 0503 	bic.w	r5, r6, #3
    8eee:	eb05 0596 	add.w	r5, r5, r6, lsr #2
    8ef2:	1b40      	subs	r0, r0, r5
    8ef4:	1a15      	subs	r5, r2, r0
    8ef6:	f04f 36cc 	mov.w	r6, #3435973836	; 0xcccccccc
    8efa:	f161 0e00 	sbc.w	lr, r1, #0
    8efe:	fb06 f605 	mul.w	r6, r6, r5
    8f02:	fba5 9503 	umull	r9, r5, r5, r3
    8f06:	fb03 660e 	mla	r6, r3, lr, r6
    8f0a:	f009 0e01 	and.w	lr, r9, #1
    8f0e:	442e      	add	r6, r5
    8f10:	fbae 5e08 	umull	r5, lr, lr, r8
    8f14:	182d      	adds	r5, r5, r0
    8f16:	ea4f 0959 	mov.w	r9, r9, lsr #1
    8f1a:	3530      	adds	r5, #48	; 0x30
    8f1c:	f80b 5c01 	strb.w	r5, [fp, #-1]
    8f20:	ea49 79c6 	orr.w	r9, r9, r6, lsl #31
    8f24:	f10c 0c01 	add.w	ip, ip, #1
    8f28:	f10b 3bff 	add.w	fp, fp, #4294967295
    8f2c:	0876      	lsrs	r6, r6, #1
    8f2e:	2c00      	cmp	r4, #0
    8f30:	d0d0      	beq.n	8ed4 <_svfprintf_r+0x10c4>
    8f32:	f89a 0000 	ldrb.w	r0, [sl]
    8f36:	4584      	cmp	ip, r0
    8f38:	d1cc      	bne.n	8ed4 <_svfprintf_r+0x10c4>
    8f3a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    8f3e:	d0c9      	beq.n	8ed4 <_svfprintf_r+0x10c4>
    8f40:	2a0a      	cmp	r2, #10
    8f42:	f171 0100 	sbcs.w	r1, r1, #0
    8f46:	f080 818f 	bcs.w	9268 <_svfprintf_r+0x1458>
    8f4a:	465c      	mov	r4, fp
    8f4c:	ab50      	add	r3, sp, #320	; 0x140
    8f4e:	1b1b      	subs	r3, r3, r4
    8f50:	f8dd 9014 	ldr.w	r9, [sp, #20]
    8f54:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
    8f58:	ee1a ba10 	vmov	fp, s20
    8f5c:	f8dd a01c 	ldr.w	sl, [sp, #28]
    8f60:	f8dd 8008 	ldr.w	r8, [sp, #8]
    8f64:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
    8f68:	9305      	str	r3, [sp, #20]
    8f6a:	f7ff bac2 	b.w	84f2 <_svfprintf_r+0x6e2>
    8f6e:	ee1b 1a10 	vmov	r1, s22
    8f72:	aa24      	add	r2, sp, #144	; 0x90
    8f74:	4658      	mov	r0, fp
    8f76:	f003 fe4b 	bl	cc10 <__ssprint_r>
    8f7a:	2800      	cmp	r0, #0
    8f7c:	f47f abad 	bne.w	86da <_svfprintf_r+0x8ca>
    8f80:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    8f84:	9a26      	ldr	r2, [sp, #152]	; 0x98
    8f86:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    8f8a:	f7ff b896 	b.w	80ba <_svfprintf_r+0x2aa>
    8f8e:	9b25      	ldr	r3, [sp, #148]	; 0x94
    8f90:	48be      	ldr	r0, [pc, #760]	; (928c <_svfprintf_r+0x147c>)
    8f92:	f8ca 0000 	str.w	r0, [sl]
    8f96:	3301      	adds	r3, #1
    8f98:	3201      	adds	r2, #1
    8f9a:	2001      	movs	r0, #1
    8f9c:	2b07      	cmp	r3, #7
    8f9e:	9226      	str	r2, [sp, #152]	; 0x98
    8fa0:	9325      	str	r3, [sp, #148]	; 0x94
    8fa2:	f8ca 0004 	str.w	r0, [sl, #4]
    8fa6:	f300 8177 	bgt.w	9298 <_svfprintf_r+0x1488>
    8faa:	f10a 0a08 	add.w	sl, sl, #8
    8fae:	2900      	cmp	r1, #0
    8fb0:	f040 80af 	bne.w	9112 <_svfprintf_r+0x1302>
    8fb4:	990e      	ldr	r1, [sp, #56]	; 0x38
    8fb6:	f008 0301 	and.w	r3, r8, #1
    8fba:	430b      	orrs	r3, r1
    8fbc:	f43f a8c0 	beq.w	8140 <_svfprintf_r+0x330>
    8fc0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8fc2:	9912      	ldr	r1, [sp, #72]	; 0x48
    8fc4:	441a      	add	r2, r3
    8fc6:	e9ca 1300 	strd	r1, r3, [sl]
    8fca:	9b25      	ldr	r3, [sp, #148]	; 0x94
    8fcc:	9226      	str	r2, [sp, #152]	; 0x98
    8fce:	3301      	adds	r3, #1
    8fd0:	2b07      	cmp	r3, #7
    8fd2:	9325      	str	r3, [sp, #148]	; 0x94
    8fd4:	f300 8252 	bgt.w	947c <_svfprintf_r+0x166c>
    8fd8:	f10a 0a08 	add.w	sl, sl, #8
    8fdc:	990e      	ldr	r1, [sp, #56]	; 0x38
    8fde:	f8ca 4000 	str.w	r4, [sl]
    8fe2:	3301      	adds	r3, #1
    8fe4:	440a      	add	r2, r1
    8fe6:	2b07      	cmp	r3, #7
    8fe8:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    8fec:	f8ca 1004 	str.w	r1, [sl, #4]
    8ff0:	f77f a8a4 	ble.w	813c <_svfprintf_r+0x32c>
    8ff4:	f7ff bbbd 	b.w	8772 <_svfprintf_r+0x962>
    8ff8:	f018 0240 	ands.w	r2, r8, #64	; 0x40
    8ffc:	f000 80dd 	beq.w	91ba <_svfprintf_r+0x13aa>
    9000:	9808      	ldr	r0, [sp, #32]
    9002:	f850 2b04 	ldr.w	r2, [r0], #4
    9006:	9008      	str	r0, [sp, #32]
    9008:	4619      	mov	r1, r3
    900a:	b292      	uxth	r2, r2
    900c:	e631      	b.n	8c72 <_svfprintf_r+0xe62>
    900e:	ee1b 1a10 	vmov	r1, s22
    9012:	aa24      	add	r2, sp, #144	; 0x90
    9014:	4658      	mov	r0, fp
    9016:	f003 fdfb 	bl	cc10 <__ssprint_r>
    901a:	2800      	cmp	r0, #0
    901c:	f47f ab5d 	bne.w	86da <_svfprintf_r+0x8ca>
    9020:	9a26      	ldr	r2, [sp, #152]	; 0x98
    9022:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    9026:	f7ff baa3 	b.w	8570 <_svfprintf_r+0x760>
    902a:	ae22      	add	r6, sp, #136	; 0x88
    902c:	2208      	movs	r2, #8
    902e:	2100      	movs	r1, #0
    9030:	4630      	mov	r0, r6
    9032:	941d      	str	r4, [sp, #116]	; 0x74
    9034:	f7fc ffb4 	bl	5fa0 <memset>
    9038:	9b03      	ldr	r3, [sp, #12]
    903a:	1c5a      	adds	r2, r3, #1
    903c:	f000 80db 	beq.w	91f6 <_svfprintf_r+0x13e6>
    9040:	2500      	movs	r5, #0
    9042:	f8cd 9008 	str.w	r9, [sp, #8]
    9046:	f8cd 801c 	str.w	r8, [sp, #28]
    904a:	4699      	mov	r9, r3
    904c:	46a8      	mov	r8, r5
    904e:	e00c      	b.n	906a <_svfprintf_r+0x125a>
    9050:	a937      	add	r1, sp, #220	; 0xdc
    9052:	4658      	mov	r0, fp
    9054:	f003 fcb2 	bl	c9bc <_wcrtomb_r>
    9058:	1c43      	adds	r3, r0, #1
    905a:	4440      	add	r0, r8
    905c:	f000 83c8 	beq.w	97f0 <_svfprintf_r+0x19e0>
    9060:	4548      	cmp	r0, r9
    9062:	dc08      	bgt.n	9076 <_svfprintf_r+0x1266>
    9064:	f000 8418 	beq.w	9898 <_svfprintf_r+0x1a88>
    9068:	4680      	mov	r8, r0
    906a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    906c:	5952      	ldr	r2, [r2, r5]
    906e:	4633      	mov	r3, r6
    9070:	3504      	adds	r5, #4
    9072:	2a00      	cmp	r2, #0
    9074:	d1ec      	bne.n	9050 <_svfprintf_r+0x1240>
    9076:	f8cd 8014 	str.w	r8, [sp, #20]
    907a:	f8dd 9008 	ldr.w	r9, [sp, #8]
    907e:	f8dd 801c 	ldr.w	r8, [sp, #28]
    9082:	e0c5      	b.n	9210 <_svfprintf_r+0x1400>
    9084:	3301      	adds	r3, #1
    9086:	4982      	ldr	r1, [pc, #520]	; (9290 <_svfprintf_r+0x1480>)
    9088:	f8ca 4004 	str.w	r4, [sl, #4]
    908c:	4422      	add	r2, r4
    908e:	2b07      	cmp	r3, #7
    9090:	f8ca 1000 	str.w	r1, [sl]
    9094:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    9098:	f77f a850 	ble.w	813c <_svfprintf_r+0x32c>
    909c:	f7ff bb69 	b.w	8772 <_svfprintf_r+0x962>
    90a0:	ee1b 1a10 	vmov	r1, s22
    90a4:	aa24      	add	r2, sp, #144	; 0x90
    90a6:	4658      	mov	r0, fp
    90a8:	f003 fdb2 	bl	cc10 <__ssprint_r>
    90ac:	2800      	cmp	r0, #0
    90ae:	f47f ab14 	bne.w	86da <_svfprintf_r+0x8ca>
    90b2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    90b4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    90b8:	f7ff b829 	b.w	810e <_svfprintf_r+0x2fe>
    90bc:	aa24      	add	r2, sp, #144	; 0x90
    90be:	4658      	mov	r0, fp
    90c0:	9105      	str	r1, [sp, #20]
    90c2:	f003 fda5 	bl	cc10 <__ssprint_r>
    90c6:	2800      	cmp	r0, #0
    90c8:	f47f ab07 	bne.w	86da <_svfprintf_r+0x8ca>
    90cc:	f896 c000 	ldrb.w	ip, [r6]
    90d0:	9a26      	ldr	r2, [sp, #152]	; 0x98
    90d2:	9905      	ldr	r1, [sp, #20]
    90d4:	a827      	add	r0, sp, #156	; 0x9c
    90d6:	e67d      	b.n	8dd4 <_svfprintf_r+0xfc4>
    90d8:	2b01      	cmp	r3, #1
    90da:	f8cd 8008 	str.w	r8, [sp, #8]
    90de:	f47f a9f3 	bne.w	84c8 <_svfprintf_r+0x6b8>
    90e2:	f7ff bb93 	b.w	880c <_svfprintf_r+0x9fc>
    90e6:	9b08      	ldr	r3, [sp, #32]
    90e8:	9904      	ldr	r1, [sp, #16]
    90ea:	f853 2b04 	ldr.w	r2, [r3], #4
    90ee:	464c      	mov	r4, r9
    90f0:	6011      	str	r1, [r2, #0]
    90f2:	9308      	str	r3, [sp, #32]
    90f4:	f7fe bebe 	b.w	7e74 <_svfprintf_r+0x64>
    90f8:	3301      	adds	r3, #1
    90fa:	4965      	ldr	r1, [pc, #404]	; (9290 <_svfprintf_r+0x1480>)
    90fc:	f8ca 4004 	str.w	r4, [sl, #4]
    9100:	4422      	add	r2, r4
    9102:	2b07      	cmp	r3, #7
    9104:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    9108:	f8ca 1000 	str.w	r1, [sl]
    910c:	f77f ab22 	ble.w	8754 <_svfprintf_r+0x944>
    9110:	e47b      	b.n	8a0a <_svfprintf_r+0xbfa>
    9112:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9114:	9812      	ldr	r0, [sp, #72]	; 0x48
    9116:	441a      	add	r2, r3
    9118:	e9ca 0300 	strd	r0, r3, [sl]
    911c:	9b25      	ldr	r3, [sp, #148]	; 0x94
    911e:	9226      	str	r2, [sp, #152]	; 0x98
    9120:	3301      	adds	r3, #1
    9122:	2b07      	cmp	r3, #7
    9124:	9325      	str	r3, [sp, #148]	; 0x94
    9126:	f300 81a9 	bgt.w	947c <_svfprintf_r+0x166c>
    912a:	f10a 0a08 	add.w	sl, sl, #8
    912e:	2900      	cmp	r1, #0
    9130:	f6bf af54 	bge.w	8fdc <_svfprintf_r+0x11cc>
    9134:	424d      	negs	r5, r1
    9136:	3110      	adds	r1, #16
    9138:	f280 830f 	bge.w	975a <_svfprintf_r+0x194a>
    913c:	ee1b 1a10 	vmov	r1, s22
    9140:	2610      	movs	r6, #16
    9142:	e005      	b.n	9150 <_svfprintf_r+0x1340>
    9144:	f10a 0a08 	add.w	sl, sl, #8
    9148:	3d10      	subs	r5, #16
    914a:	2d10      	cmp	r5, #16
    914c:	f340 8305 	ble.w	975a <_svfprintf_r+0x194a>
    9150:	3301      	adds	r3, #1
    9152:	484f      	ldr	r0, [pc, #316]	; (9290 <_svfprintf_r+0x1480>)
    9154:	3210      	adds	r2, #16
    9156:	2b07      	cmp	r3, #7
    9158:	e9ca 0600 	strd	r0, r6, [sl]
    915c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    9160:	ddf0      	ble.n	9144 <_svfprintf_r+0x1334>
    9162:	aa24      	add	r2, sp, #144	; 0x90
    9164:	4658      	mov	r0, fp
    9166:	9103      	str	r1, [sp, #12]
    9168:	f003 fd52 	bl	cc10 <__ssprint_r>
    916c:	2800      	cmp	r0, #0
    916e:	f47f aab4 	bne.w	86da <_svfprintf_r+0x8ca>
    9172:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    9176:	9903      	ldr	r1, [sp, #12]
    9178:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    917c:	e7e4      	b.n	9148 <_svfprintf_r+0x1338>
    917e:	9b08      	ldr	r3, [sp, #32]
    9180:	f418 7100 	ands.w	r1, r8, #512	; 0x200
    9184:	bf1a      	itte	ne
    9186:	4611      	movne	r1, r2
    9188:	f853 2b04 	ldrne.w	r2, [r3], #4
    918c:	f853 2b04 	ldreq.w	r2, [r3], #4
    9190:	9308      	str	r3, [sp, #32]
    9192:	bf18      	it	ne
    9194:	b2d2      	uxtbne	r2, r2
    9196:	f7ff b945 	b.w	8424 <_svfprintf_r+0x614>
    919a:	9b02      	ldr	r3, [sp, #8]
    919c:	f413 7100 	ands.w	r1, r3, #512	; 0x200
    91a0:	9b08      	ldr	r3, [sp, #32]
    91a2:	bf1a      	itte	ne
    91a4:	4611      	movne	r1, r2
    91a6:	f853 2b04 	ldrne.w	r2, [r3], #4
    91aa:	f853 2b04 	ldreq.w	r2, [r3], #4
    91ae:	9308      	str	r3, [sp, #32]
    91b0:	bf18      	it	ne
    91b2:	b2d2      	uxtbne	r2, r2
    91b4:	2301      	movs	r3, #1
    91b6:	f7ff b8d0 	b.w	835a <_svfprintf_r+0x54a>
    91ba:	9b08      	ldr	r3, [sp, #32]
    91bc:	f418 7100 	ands.w	r1, r8, #512	; 0x200
    91c0:	bf1a      	itte	ne
    91c2:	4611      	movne	r1, r2
    91c4:	f853 2b04 	ldrne.w	r2, [r3], #4
    91c8:	f853 2b04 	ldreq.w	r2, [r3], #4
    91cc:	9308      	str	r3, [sp, #32]
    91ce:	bf18      	it	ne
    91d0:	b2d2      	uxtbne	r2, r2
    91d2:	e54e      	b.n	8c72 <_svfprintf_r+0xe62>
    91d4:	468a      	mov	sl, r1
    91d6:	3301      	adds	r3, #1
    91d8:	492d      	ldr	r1, [pc, #180]	; (9290 <_svfprintf_r+0x1480>)
    91da:	f8ca 5004 	str.w	r5, [sl, #4]
    91de:	442a      	add	r2, r5
    91e0:	2b07      	cmp	r3, #7
    91e2:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    91e6:	f8ca 1000 	str.w	r1, [sl]
    91ea:	f300 8139 	bgt.w	9460 <_svfprintf_r+0x1650>
    91ee:	f10a 0a08 	add.w	sl, sl, #8
    91f2:	f7ff bb8c 	b.w	890e <_svfprintf_r+0xafe>
    91f6:	2300      	movs	r3, #0
    91f8:	4619      	mov	r1, r3
    91fa:	9600      	str	r6, [sp, #0]
    91fc:	aa1d      	add	r2, sp, #116	; 0x74
    91fe:	4658      	mov	r0, fp
    9200:	f003 fc02 	bl	ca08 <_wcsrtombs_r>
    9204:	4603      	mov	r3, r0
    9206:	3301      	adds	r3, #1
    9208:	9005      	str	r0, [sp, #20]
    920a:	f000 82f1 	beq.w	97f0 <_svfprintf_r+0x19e0>
    920e:	941d      	str	r4, [sp, #116]	; 0x74
    9210:	9b05      	ldr	r3, [sp, #20]
    9212:	2b00      	cmp	r3, #0
    9214:	d04e      	beq.n	92b4 <_svfprintf_r+0x14a4>
    9216:	2b63      	cmp	r3, #99	; 0x63
    9218:	f300 8118 	bgt.w	944c <_svfprintf_r+0x163c>
    921c:	2300      	movs	r3, #0
    921e:	9307      	str	r3, [sp, #28]
    9220:	ac37      	add	r4, sp, #220	; 0xdc
    9222:	2208      	movs	r2, #8
    9224:	2100      	movs	r1, #0
    9226:	4630      	mov	r0, r6
    9228:	f7fc feba 	bl	5fa0 <memset>
    922c:	9d05      	ldr	r5, [sp, #20]
    922e:	9600      	str	r6, [sp, #0]
    9230:	462b      	mov	r3, r5
    9232:	aa1d      	add	r2, sp, #116	; 0x74
    9234:	4621      	mov	r1, r4
    9236:	4658      	mov	r0, fp
    9238:	f003 fbe6 	bl	ca08 <_wcsrtombs_r>
    923c:	4285      	cmp	r5, r0
    923e:	f040 837c 	bne.w	993a <_svfprintf_r+0x1b2a>
    9242:	9a05      	ldr	r2, [sp, #20]
    9244:	2300      	movs	r3, #0
    9246:	54a3      	strb	r3, [r4, r2]
    9248:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    924c:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    9250:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    9254:	9303      	str	r3, [sp, #12]
    9256:	9202      	str	r2, [sp, #8]
    9258:	930f      	str	r3, [sp, #60]	; 0x3c
    925a:	f7fe bfba 	b.w	81d2 <_svfprintf_r+0x3c2>
    925e:	212d      	movs	r1, #45	; 0x2d
    9260:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    9264:	f7fe bfa4 	b.w	81b0 <_svfprintf_r+0x3a0>
    9268:	9b16      	ldr	r3, [sp, #88]	; 0x58
    926a:	9915      	ldr	r1, [sp, #84]	; 0x54
    926c:	ebab 0b03 	sub.w	fp, fp, r3
    9270:	461a      	mov	r2, r3
    9272:	4658      	mov	r0, fp
    9274:	f7fc ff92 	bl	619c <strncpy>
    9278:	f89a 2001 	ldrb.w	r2, [sl, #1]
    927c:	4b05      	ldr	r3, [pc, #20]	; (9294 <_svfprintf_r+0x1484>)
    927e:	b10a      	cbz	r2, 9284 <_svfprintf_r+0x1474>
    9280:	f10a 0a01 	add.w	sl, sl, #1
    9284:	f04f 0c00 	mov.w	ip, #0
    9288:	e628      	b.n	8edc <_svfprintf_r+0x10cc>
    928a:	bf00      	nop
    928c:	20000934 	.word	0x20000934
    9290:	20007a08 	.word	0x20007a08
    9294:	cccccccd 	.word	0xcccccccd
    9298:	ee1b 1a10 	vmov	r1, s22
    929c:	aa24      	add	r2, sp, #144	; 0x90
    929e:	4658      	mov	r0, fp
    92a0:	f003 fcb6 	bl	cc10 <__ssprint_r>
    92a4:	2800      	cmp	r0, #0
    92a6:	f47f aa18 	bne.w	86da <_svfprintf_r+0x8ca>
    92aa:	991b      	ldr	r1, [sp, #108]	; 0x6c
    92ac:	9a26      	ldr	r2, [sp, #152]	; 0x98
    92ae:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    92b2:	e67c      	b.n	8fae <_svfprintf_r+0x119e>
    92b4:	9b05      	ldr	r3, [sp, #20]
    92b6:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    92ba:	930f      	str	r3, [sp, #60]	; 0x3c
    92bc:	e9cd 3302 	strd	r3, r3, [sp, #8]
    92c0:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    92c4:	9307      	str	r3, [sp, #28]
    92c6:	f7fe bf84 	b.w	81d2 <_svfprintf_r+0x3c2>
    92ca:	990e      	ldr	r1, [sp, #56]	; 0x38
    92cc:	9805      	ldr	r0, [sp, #20]
    92ce:	1865      	adds	r5, r4, r1
    92d0:	1a2d      	subs	r5, r5, r0
    92d2:	1acc      	subs	r4, r1, r3
    92d4:	42a5      	cmp	r5, r4
    92d6:	bfa8      	it	ge
    92d8:	4625      	movge	r5, r4
    92da:	f7ff bb4d 	b.w	8978 <_svfprintf_r+0xb68>
    92de:	9b08      	ldr	r3, [sp, #32]
    92e0:	9904      	ldr	r1, [sp, #16]
    92e2:	f853 2b04 	ldr.w	r2, [r3], #4
    92e6:	9308      	str	r3, [sp, #32]
    92e8:	8011      	strh	r1, [r2, #0]
    92ea:	464c      	mov	r4, r9
    92ec:	f7fe bdc2 	b.w	7e74 <_svfprintf_r+0x64>
    92f0:	f913 2b04 	ldrsb.w	r2, [r3], #4
    92f4:	9308      	str	r3, [sp, #32]
    92f6:	17d1      	asrs	r1, r2, #31
    92f8:	460b      	mov	r3, r1
    92fa:	f7fe bfdb 	b.w	82b4 <_svfprintf_r+0x4a4>
    92fe:	9a03      	ldr	r2, [sp, #12]
    9300:	2102      	movs	r1, #2
    9302:	ab22      	add	r3, sp, #136	; 0x88
    9304:	9301      	str	r3, [sp, #4]
    9306:	ab1d      	add	r3, sp, #116	; 0x74
    9308:	9300      	str	r3, [sp, #0]
    930a:	4658      	mov	r0, fp
    930c:	ab1b      	add	r3, sp, #108	; 0x6c
    930e:	eeb0 0b4a 	vmov.f64	d0, d10
    9312:	9202      	str	r2, [sp, #8]
    9314:	f002 fa88 	bl	b828 <_dtoa_r>
    9318:	2d47      	cmp	r5, #71	; 0x47
    931a:	9a02      	ldr	r2, [sp, #8]
    931c:	4604      	mov	r4, r0
    931e:	f000 8161 	beq.w	95e4 <_svfprintf_r+0x17d4>
    9322:	2d46      	cmp	r5, #70	; 0x46
    9324:	4410      	add	r0, r2
    9326:	d105      	bne.n	9334 <_svfprintf_r+0x1524>
    9328:	7823      	ldrb	r3, [r4, #0]
    932a:	2b30      	cmp	r3, #48	; 0x30
    932c:	f000 826f 	beq.w	980e <_svfprintf_r+0x19fe>
    9330:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    9332:	4410      	add	r0, r2
    9334:	eeb5 ab40 	vcmp.f64	d10, #0.0
    9338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    933c:	f040 8146 	bne.w	95cc <_svfprintf_r+0x17bc>
    9340:	4603      	mov	r3, r0
    9342:	1b1b      	subs	r3, r3, r4
    9344:	930e      	str	r3, [sp, #56]	; 0x38
    9346:	2d47      	cmp	r5, #71	; 0x47
    9348:	f000 8110 	beq.w	956c <_svfprintf_r+0x175c>
    934c:	2d46      	cmp	r5, #70	; 0x46
    934e:	f000 81b5 	beq.w	96bc <_svfprintf_r+0x18ac>
    9352:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    9354:	930c      	str	r3, [sp, #48]	; 0x30
    9356:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9358:	2d41      	cmp	r5, #65	; 0x41
    935a:	f103 33ff 	add.w	r3, r3, #4294967295
    935e:	931b      	str	r3, [sp, #108]	; 0x6c
    9360:	f000 81e5 	beq.w	972e <_svfprintf_r+0x191e>
    9364:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
    9368:	2100      	movs	r1, #0
    936a:	2b00      	cmp	r3, #0
    936c:	bfb8      	it	lt
    936e:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
    9370:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
    9374:	bfba      	itte	lt
    9376:	f1c3 0301 	rsblt	r3, r3, #1
    937a:	222d      	movlt	r2, #45	; 0x2d
    937c:	222b      	movge	r2, #43	; 0x2b
    937e:	2b09      	cmp	r3, #9
    9380:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
    9384:	f340 81da 	ble.w	973c <_svfprintf_r+0x192c>
    9388:	f10d 058f 	add.w	r5, sp, #143	; 0x8f
    938c:	f8df c41c 	ldr.w	ip, [pc, #1052]	; 97ac <_svfprintf_r+0x199c>
    9390:	462a      	mov	r2, r5
    9392:	4610      	mov	r0, r2
    9394:	fb8c 2103 	smull	r2, r1, ip, r3
    9398:	17da      	asrs	r2, r3, #31
    939a:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
    939e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    93a2:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
    93a6:	3130      	adds	r1, #48	; 0x30
    93a8:	f800 1c01 	strb.w	r1, [r0, #-1]
    93ac:	4619      	mov	r1, r3
    93ae:	2963      	cmp	r1, #99	; 0x63
    93b0:	4613      	mov	r3, r2
    93b2:	f100 32ff 	add.w	r2, r0, #4294967295
    93b6:	dcec      	bgt.n	9392 <_svfprintf_r+0x1582>
    93b8:	3330      	adds	r3, #48	; 0x30
    93ba:	b2d9      	uxtb	r1, r3
    93bc:	1e83      	subs	r3, r0, #2
    93be:	429d      	cmp	r5, r3
    93c0:	f802 1c01 	strb.w	r1, [r2, #-1]
    93c4:	f240 828b 	bls.w	98de <_svfprintf_r+0x1ace>
    93c8:	4613      	mov	r3, r2
    93ca:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    93ce:	e001      	b.n	93d4 <_svfprintf_r+0x15c4>
    93d0:	f813 1b01 	ldrb.w	r1, [r3], #1
    93d4:	f802 1b01 	strb.w	r1, [r2], #1
    93d8:	429d      	cmp	r5, r3
    93da:	d1f9      	bne.n	93d0 <_svfprintf_r+0x15c0>
    93dc:	f10d 0391 	add.w	r3, sp, #145	; 0x91
    93e0:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    93e4:	1a1b      	subs	r3, r3, r0
    93e6:	4413      	add	r3, r2
    93e8:	aa1e      	add	r2, sp, #120	; 0x78
    93ea:	1a9b      	subs	r3, r3, r2
    93ec:	9314      	str	r3, [sp, #80]	; 0x50
    93ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    93f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
    93f2:	2b01      	cmp	r3, #1
    93f4:	441a      	add	r2, r3
    93f6:	9205      	str	r2, [sp, #20]
    93f8:	f340 8203 	ble.w	9802 <_svfprintf_r+0x19f2>
    93fc:	9b05      	ldr	r3, [sp, #20]
    93fe:	9a10      	ldr	r2, [sp, #64]	; 0x40
    9400:	4413      	add	r3, r2
    9402:	9305      	str	r3, [sp, #20]
    9404:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
    9408:	9a05      	ldr	r2, [sp, #20]
    940a:	f443 7880 	orr.w	r8, r3, #256	; 0x100
    940e:	2300      	movs	r3, #0
    9410:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    9414:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    9418:	930f      	str	r3, [sp, #60]	; 0x3c
    941a:	9202      	str	r2, [sp, #8]
    941c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    941e:	2b00      	cmp	r3, #0
    9420:	f040 80b1 	bne.w	9586 <_svfprintf_r+0x1776>
    9424:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    9428:	9303      	str	r3, [sp, #12]
    942a:	f7fe bed2 	b.w	81d2 <_svfprintf_r+0x3c2>
    942e:	4620      	mov	r0, r4
    9430:	f7fd f966 	bl	6700 <strlen>
    9434:	4602      	mov	r2, r0
    9436:	9005      	str	r0, [sp, #20]
    9438:	f7fe bf20 	b.w	827c <_svfprintf_r+0x46c>
    943c:	ee1b 1a10 	vmov	r1, s22
    9440:	aa24      	add	r2, sp, #144	; 0x90
    9442:	4658      	mov	r0, fp
    9444:	f003 fbe4 	bl	cc10 <__ssprint_r>
    9448:	f7fe bded 	b.w	8026 <_svfprintf_r+0x216>
    944c:	1c59      	adds	r1, r3, #1
    944e:	4658      	mov	r0, fp
    9450:	f7fa fe86 	bl	4160 <_malloc_r>
    9454:	4604      	mov	r4, r0
    9456:	2800      	cmp	r0, #0
    9458:	f000 81ca 	beq.w	97f0 <_svfprintf_r+0x19e0>
    945c:	9007      	str	r0, [sp, #28]
    945e:	e6e0      	b.n	9222 <_svfprintf_r+0x1412>
    9460:	ee1b 1a10 	vmov	r1, s22
    9464:	aa24      	add	r2, sp, #144	; 0x90
    9466:	4658      	mov	r0, fp
    9468:	f003 fbd2 	bl	cc10 <__ssprint_r>
    946c:	2800      	cmp	r0, #0
    946e:	f47f a934 	bne.w	86da <_svfprintf_r+0x8ca>
    9472:	9a26      	ldr	r2, [sp, #152]	; 0x98
    9474:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    9478:	f7ff ba49 	b.w	890e <_svfprintf_r+0xafe>
    947c:	ee1b 1a10 	vmov	r1, s22
    9480:	aa24      	add	r2, sp, #144	; 0x90
    9482:	4658      	mov	r0, fp
    9484:	f003 fbc4 	bl	cc10 <__ssprint_r>
    9488:	2800      	cmp	r0, #0
    948a:	f47f a926 	bne.w	86da <_svfprintf_r+0x8ca>
    948e:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    9492:	991b      	ldr	r1, [sp, #108]	; 0x6c
    9494:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    9498:	e649      	b.n	912e <_svfprintf_r+0x131e>
    949a:	2306      	movs	r3, #6
    949c:	9303      	str	r3, [sp, #12]
    949e:	f7ff bb83 	b.w	8ba8 <_svfprintf_r+0xd98>
    94a2:	9b03      	ldr	r3, [sp, #12]
    94a4:	2102      	movs	r1, #2
    94a6:	1c5a      	adds	r2, r3, #1
    94a8:	e72b      	b.n	9302 <_svfprintf_r+0x14f2>
    94aa:	9a03      	ldr	r2, [sp, #12]
    94ac:	2103      	movs	r1, #3
    94ae:	e728      	b.n	9302 <_svfprintf_r+0x14f2>
    94b0:	a81b      	add	r0, sp, #108	; 0x6c
    94b2:	eeb0 0b4a 	vmov.f64	d0, d10
    94b6:	f002 f88b 	bl	b5d0 <frexp>
    94ba:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
    94be:	ee20 0b07 	vmul.f64	d0, d0, d7
    94c2:	eeb5 0b40 	vcmp.f64	d0, #0.0
    94c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    94ca:	d101      	bne.n	94d0 <_svfprintf_r+0x16c0>
    94cc:	2301      	movs	r3, #1
    94ce:	931b      	str	r3, [sp, #108]	; 0x6c
    94d0:	48b3      	ldr	r0, [pc, #716]	; (97a0 <_svfprintf_r+0x1990>)
    94d2:	9b03      	ldr	r3, [sp, #12]
    94d4:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
    94d8:	3b01      	subs	r3, #1
    94da:	4622      	mov	r2, r4
    94dc:	e004      	b.n	94e8 <_svfprintf_r+0x16d8>
    94de:	eeb5 0b40 	vcmp.f64	d0, #0.0
    94e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    94e6:	d013      	beq.n	9510 <_svfprintf_r+0x1700>
    94e8:	ee20 0b05 	vmul.f64	d0, d0, d5
    94ec:	eefd 7bc0 	vcvt.s32.f64	s15, d0
    94f0:	f1b3 3fff 	cmp.w	r3, #4294967295
    94f4:	ee17 1a90 	vmov	r1, s15
    94f8:	5c41      	ldrb	r1, [r0, r1]
    94fa:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    94fe:	4694      	mov	ip, r2
    9500:	ee30 0b46 	vsub.f64	d0, d0, d6
    9504:	f802 1b01 	strb.w	r1, [r2], #1
    9508:	4619      	mov	r1, r3
    950a:	f103 33ff 	add.w	r3, r3, #4294967295
    950e:	d1e6      	bne.n	94de <_svfprintf_r+0x16ce>
    9510:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    9514:	eeb4 0bc6 	vcmpe.f64	d0, d6
    9518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    951c:	f300 8148 	bgt.w	97b0 <_svfprintf_r+0x19a0>
    9520:	eeb4 0b46 	vcmp.f64	d0, d6
    9524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9528:	d104      	bne.n	9534 <_svfprintf_r+0x1724>
    952a:	ee17 3a90 	vmov	r3, s15
    952e:	07db      	lsls	r3, r3, #31
    9530:	f100 813e 	bmi.w	97b0 <_svfprintf_r+0x19a0>
    9534:	2900      	cmp	r1, #0
    9536:	db06      	blt.n	9546 <_svfprintf_r+0x1736>
    9538:	1c4b      	adds	r3, r1, #1
    953a:	4413      	add	r3, r2
    953c:	2130      	movs	r1, #48	; 0x30
    953e:	f802 1b01 	strb.w	r1, [r2], #1
    9542:	4293      	cmp	r3, r2
    9544:	d1fb      	bne.n	953e <_svfprintf_r+0x172e>
    9546:	1b13      	subs	r3, r2, r4
    9548:	930e      	str	r3, [sp, #56]	; 0x38
    954a:	e6fc      	b.n	9346 <_svfprintf_r+0x1536>
    954c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    954e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9550:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    9554:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    9558:	9613      	str	r6, [sp, #76]	; 0x4c
    955a:	18e3      	adds	r3, r4, r3
    955c:	429d      	cmp	r5, r3
    955e:	4629      	mov	r1, r5
    9560:	bf28      	it	cs
    9562:	4619      	movcs	r1, r3
    9564:	4682      	mov	sl, r0
    9566:	9105      	str	r1, [sp, #20]
    9568:	f7ff b9d8 	b.w	891c <_svfprintf_r+0xb0c>
    956c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    956e:	930c      	str	r3, [sp, #48]	; 0x30
    9570:	1cda      	adds	r2, r3, #3
    9572:	db02      	blt.n	957a <_svfprintf_r+0x176a>
    9574:	9a03      	ldr	r2, [sp, #12]
    9576:	4293      	cmp	r3, r2
    9578:	dd0c      	ble.n	9594 <_svfprintf_r+0x1784>
    957a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    957c:	3b02      	subs	r3, #2
    957e:	930b      	str	r3, [sp, #44]	; 0x2c
    9580:	f023 0520 	bic.w	r5, r3, #32
    9584:	e6e7      	b.n	9356 <_svfprintf_r+0x1546>
    9586:	212d      	movs	r1, #45	; 0x2d
    9588:	2300      	movs	r3, #0
    958a:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    958e:	9303      	str	r3, [sp, #12]
    9590:	f7fe be22 	b.w	81d8 <_svfprintf_r+0x3c8>
    9594:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9596:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    9598:	4293      	cmp	r3, r2
    959a:	f2c0 80bd 	blt.w	9718 <_svfprintf_r+0x1908>
    959e:	07f0      	lsls	r0, r6, #31
    95a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    95a2:	f140 8132 	bpl.w	980a <_svfprintf_r+0x19fa>
    95a6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    95a8:	4413      	add	r3, r2
    95aa:	9305      	str	r3, [sp, #20]
    95ac:	0571      	lsls	r1, r6, #21
    95ae:	d503      	bpl.n	95b8 <_svfprintf_r+0x17a8>
    95b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    95b2:	2b00      	cmp	r3, #0
    95b4:	f300 8135 	bgt.w	9822 <_svfprintf_r+0x1a12>
    95b8:	9b05      	ldr	r3, [sp, #20]
    95ba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    95be:	9302      	str	r3, [sp, #8]
    95c0:	2367      	movs	r3, #103	; 0x67
    95c2:	930b      	str	r3, [sp, #44]	; 0x2c
    95c4:	2300      	movs	r3, #0
    95c6:	930f      	str	r3, [sp, #60]	; 0x3c
    95c8:	930d      	str	r3, [sp, #52]	; 0x34
    95ca:	e727      	b.n	941c <_svfprintf_r+0x160c>
    95cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
    95ce:	4283      	cmp	r3, r0
    95d0:	f4bf aeb7 	bcs.w	9342 <_svfprintf_r+0x1532>
    95d4:	2130      	movs	r1, #48	; 0x30
    95d6:	1c5a      	adds	r2, r3, #1
    95d8:	9222      	str	r2, [sp, #136]	; 0x88
    95da:	7019      	strb	r1, [r3, #0]
    95dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
    95de:	4298      	cmp	r0, r3
    95e0:	d8f9      	bhi.n	95d6 <_svfprintf_r+0x17c6>
    95e2:	e6ae      	b.n	9342 <_svfprintf_r+0x1532>
    95e4:	07f3      	lsls	r3, r6, #31
    95e6:	f100 80a7 	bmi.w	9738 <_svfprintf_r+0x1928>
    95ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
    95ec:	e6a9      	b.n	9342 <_svfprintf_r+0x1532>
    95ee:	aa24      	add	r2, sp, #144	; 0x90
    95f0:	4658      	mov	r0, fp
    95f2:	9105      	str	r1, [sp, #20]
    95f4:	f003 fb0c 	bl	cc10 <__ssprint_r>
    95f8:	2800      	cmp	r0, #0
    95fa:	f47f a86e 	bne.w	86da <_svfprintf_r+0x8ca>
    95fe:	f896 c000 	ldrb.w	ip, [r6]
    9602:	9a26      	ldr	r2, [sp, #152]	; 0x98
    9604:	9905      	ldr	r1, [sp, #20]
    9606:	a827      	add	r0, sp, #156	; 0x9c
    9608:	4465      	add	r5, ip
    960a:	f7ff bbec 	b.w	8de6 <_svfprintf_r+0xfd6>
    960e:	ee1b 1a10 	vmov	r1, s22
    9612:	aa24      	add	r2, sp, #144	; 0x90
    9614:	4658      	mov	r0, fp
    9616:	f003 fafb 	bl	cc10 <__ssprint_r>
    961a:	2800      	cmp	r0, #0
    961c:	f47f a85d 	bne.w	86da <_svfprintf_r+0x8ca>
    9620:	9a26      	ldr	r2, [sp, #152]	; 0x98
    9622:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    9626:	f7ff b96b 	b.w	8900 <_svfprintf_r+0xaf0>
    962a:	2378      	movs	r3, #120	; 0x78
    962c:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    9630:	2330      	movs	r3, #48	; 0x30
    9632:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    9636:	9b03      	ldr	r3, [sp, #12]
    9638:	2b63      	cmp	r3, #99	; 0x63
    963a:	f048 0602 	orr.w	r6, r8, #2
    963e:	f300 80a6 	bgt.w	978e <_svfprintf_r+0x197e>
    9642:	2300      	movs	r3, #0
    9644:	9307      	str	r3, [sp, #28]
    9646:	ac37      	add	r4, sp, #220	; 0xdc
    9648:	ee18 3a90 	vmov	r3, s17
    964c:	2b00      	cmp	r3, #0
    964e:	f448 7881 	orr.w	r8, r8, #258	; 0x102
    9652:	db2b      	blt.n	96ac <_svfprintf_r+0x189c>
    9654:	eeb0 ab48 	vmov.f64	d10, d8
    9658:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    965a:	f023 0520 	bic.w	r5, r3, #32
    965e:	2300      	movs	r3, #0
    9660:	9309      	str	r3, [sp, #36]	; 0x24
    9662:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9664:	2b61      	cmp	r3, #97	; 0x61
    9666:	f47f aaad 	bne.w	8bc4 <_svfprintf_r+0xdb4>
    966a:	eeb0 0b4a 	vmov.f64	d0, d10
    966e:	a81b      	add	r0, sp, #108	; 0x6c
    9670:	f001 ffae 	bl	b5d0 <frexp>
    9674:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
    9678:	ee20 0b07 	vmul.f64	d0, d0, d7
    967c:	eeb5 0b40 	vcmp.f64	d0, #0.0
    9680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9684:	d101      	bne.n	968a <_svfprintf_r+0x187a>
    9686:	2301      	movs	r3, #1
    9688:	931b      	str	r3, [sp, #108]	; 0x6c
    968a:	4846      	ldr	r0, [pc, #280]	; (97a4 <_svfprintf_r+0x1994>)
    968c:	e721      	b.n	94d2 <_svfprintf_r+0x16c2>
    968e:	ee1b 1a10 	vmov	r1, s22
    9692:	aa24      	add	r2, sp, #144	; 0x90
    9694:	4658      	mov	r0, fp
    9696:	f003 fabb 	bl	cc10 <__ssprint_r>
    969a:	2800      	cmp	r0, #0
    969c:	f47f a81d 	bne.w	86da <_svfprintf_r+0x8ca>
    96a0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    96a2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    96a4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    96a8:	f7ff b94e 	b.w	8948 <_svfprintf_r+0xb38>
    96ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    96ae:	f023 0520 	bic.w	r5, r3, #32
    96b2:	232d      	movs	r3, #45	; 0x2d
    96b4:	9309      	str	r3, [sp, #36]	; 0x24
    96b6:	eeb1 ab48 	vneg.f64	d10, d8
    96ba:	e7d2      	b.n	9662 <_svfprintf_r+0x1852>
    96bc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    96be:	920c      	str	r2, [sp, #48]	; 0x30
    96c0:	2a00      	cmp	r2, #0
    96c2:	f006 0301 	and.w	r3, r6, #1
    96c6:	f340 810d 	ble.w	98e4 <_svfprintf_r+0x1ad4>
    96ca:	9903      	ldr	r1, [sp, #12]
    96cc:	430b      	orrs	r3, r1
    96ce:	f040 80cf 	bne.w	9870 <_svfprintf_r+0x1a60>
    96d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    96d4:	9305      	str	r3, [sp, #20]
    96d6:	2366      	movs	r3, #102	; 0x66
    96d8:	930b      	str	r3, [sp, #44]	; 0x2c
    96da:	0572      	lsls	r2, r6, #21
    96dc:	f100 80a3 	bmi.w	9826 <_svfprintf_r+0x1a16>
    96e0:	9b05      	ldr	r3, [sp, #20]
    96e2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    96e6:	9302      	str	r3, [sp, #8]
    96e8:	e76c      	b.n	95c4 <_svfprintf_r+0x17b4>
    96ea:	ee1b 1a10 	vmov	r1, s22
    96ee:	aa24      	add	r2, sp, #144	; 0x90
    96f0:	4658      	mov	r0, fp
    96f2:	f003 fa8d 	bl	cc10 <__ssprint_r>
    96f6:	2800      	cmp	r0, #0
    96f8:	f47e afef 	bne.w	86da <_svfprintf_r+0x8ca>
    96fc:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
    96fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9700:	9a26      	ldr	r2, [sp, #152]	; 0x98
    9702:	1b1c      	subs	r4, r3, r4
    9704:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    9708:	f7ff b936 	b.w	8978 <_svfprintf_r+0xb68>
    970c:	2358      	movs	r3, #88	; 0x58
    970e:	e78d      	b.n	962c <_svfprintf_r+0x181c>
    9710:	2200      	movs	r2, #0
    9712:	9203      	str	r2, [sp, #12]
    9714:	f7fe bbda 	b.w	7ecc <_svfprintf_r+0xbc>
    9718:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    971a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    971c:	189a      	adds	r2, r3, r2
    971e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9720:	9205      	str	r2, [sp, #20]
    9722:	2b00      	cmp	r3, #0
    9724:	f340 80ab 	ble.w	987e <_svfprintf_r+0x1a6e>
    9728:	2367      	movs	r3, #103	; 0x67
    972a:	930b      	str	r3, [sp, #44]	; 0x2c
    972c:	e7d5      	b.n	96da <_svfprintf_r+0x18ca>
    972e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9730:	320f      	adds	r2, #15
    9732:	b2d2      	uxtb	r2, r2
    9734:	2101      	movs	r1, #1
    9736:	e618      	b.n	936a <_svfprintf_r+0x155a>
    9738:	18a0      	adds	r0, r4, r2
    973a:	e5fb      	b.n	9334 <_svfprintf_r+0x1524>
    973c:	2900      	cmp	r1, #0
    973e:	f040 80a8 	bne.w	9892 <_svfprintf_r+0x1a82>
    9742:	2230      	movs	r2, #48	; 0x30
    9744:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
    9748:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
    974c:	3330      	adds	r3, #48	; 0x30
    974e:	f802 3b01 	strb.w	r3, [r2], #1
    9752:	ab1e      	add	r3, sp, #120	; 0x78
    9754:	1ad3      	subs	r3, r2, r3
    9756:	9314      	str	r3, [sp, #80]	; 0x50
    9758:	e649      	b.n	93ee <_svfprintf_r+0x15de>
    975a:	3301      	adds	r3, #1
    975c:	4912      	ldr	r1, [pc, #72]	; (97a8 <_svfprintf_r+0x1998>)
    975e:	f8ca 5004 	str.w	r5, [sl, #4]
    9762:	442a      	add	r2, r5
    9764:	2b07      	cmp	r3, #7
    9766:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    976a:	f8ca 1000 	str.w	r1, [sl]
    976e:	f77f ac33 	ble.w	8fd8 <_svfprintf_r+0x11c8>
    9772:	ee1b 1a10 	vmov	r1, s22
    9776:	aa24      	add	r2, sp, #144	; 0x90
    9778:	4658      	mov	r0, fp
    977a:	f003 fa49 	bl	cc10 <__ssprint_r>
    977e:	2800      	cmp	r0, #0
    9780:	f47e afab 	bne.w	86da <_svfprintf_r+0x8ca>
    9784:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    9788:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    978c:	e426      	b.n	8fdc <_svfprintf_r+0x11cc>
    978e:	1c59      	adds	r1, r3, #1
    9790:	4658      	mov	r0, fp
    9792:	f7fa fce5 	bl	4160 <_malloc_r>
    9796:	4604      	mov	r4, r0
    9798:	b350      	cbz	r0, 97f0 <_svfprintf_r+0x19e0>
    979a:	9007      	str	r0, [sp, #28]
    979c:	e754      	b.n	9648 <_svfprintf_r+0x1838>
    979e:	bf00      	nop
    97a0:	20000918 	.word	0x20000918
    97a4:	20000904 	.word	0x20000904
    97a8:	20007a08 	.word	0x20007a08
    97ac:	66666667 	.word	0x66666667
    97b0:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
    97b4:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    97b8:	f890 c00f 	ldrb.w	ip, [r0, #15]
    97bc:	4561      	cmp	r1, ip
    97be:	4613      	mov	r3, r2
    97c0:	d10a      	bne.n	97d8 <_svfprintf_r+0x19c8>
    97c2:	f04f 0e30 	mov.w	lr, #48	; 0x30
    97c6:	f803 ec01 	strb.w	lr, [r3, #-1]
    97ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
    97cc:	1e59      	subs	r1, r3, #1
    97ce:	9122      	str	r1, [sp, #136]	; 0x88
    97d0:	f813 1c01 	ldrb.w	r1, [r3, #-1]
    97d4:	458c      	cmp	ip, r1
    97d6:	d0f6      	beq.n	97c6 <_svfprintf_r+0x19b6>
    97d8:	2939      	cmp	r1, #57	; 0x39
    97da:	bf16      	itet	ne
    97dc:	3101      	addne	r1, #1
    97de:	7a81      	ldrbeq	r1, [r0, #10]
    97e0:	b2c9      	uxtbne	r1, r1
    97e2:	f803 1c01 	strb.w	r1, [r3, #-1]
    97e6:	e6ae      	b.n	9546 <_svfprintf_r+0x1736>
    97e8:	2300      	movs	r3, #0
    97ea:	4690      	mov	r8, r2
    97ec:	9307      	str	r3, [sp, #28]
    97ee:	e760      	b.n	96b2 <_svfprintf_r+0x18a2>
    97f0:	ee1b 2a10 	vmov	r2, s22
    97f4:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    97f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    97fc:	8193      	strh	r3, [r2, #12]
    97fe:	f7fe bc16 	b.w	802e <_svfprintf_r+0x21e>
    9802:	07f5      	lsls	r5, r6, #31
    9804:	f57f adfe 	bpl.w	9404 <_svfprintf_r+0x15f4>
    9808:	e5f8      	b.n	93fc <_svfprintf_r+0x15ec>
    980a:	9305      	str	r3, [sp, #20]
    980c:	e6ce      	b.n	95ac <_svfprintf_r+0x179c>
    980e:	eeb5 ab40 	vcmp.f64	d10, #0.0
    9812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9816:	f43f ad8b 	beq.w	9330 <_svfprintf_r+0x1520>
    981a:	f1c2 0201 	rsb	r2, r2, #1
    981e:	921b      	str	r2, [sp, #108]	; 0x6c
    9820:	e587      	b.n	9332 <_svfprintf_r+0x1522>
    9822:	2367      	movs	r3, #103	; 0x67
    9824:	930b      	str	r3, [sp, #44]	; 0x2c
    9826:	9913      	ldr	r1, [sp, #76]	; 0x4c
    9828:	780b      	ldrb	r3, [r1, #0]
    982a:	2bff      	cmp	r3, #255	; 0xff
    982c:	d079      	beq.n	9922 <_svfprintf_r+0x1b12>
    982e:	2500      	movs	r5, #0
    9830:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9832:	4628      	mov	r0, r5
    9834:	e003      	b.n	983e <_svfprintf_r+0x1a2e>
    9836:	3001      	adds	r0, #1
    9838:	3101      	adds	r1, #1
    983a:	2bff      	cmp	r3, #255	; 0xff
    983c:	d008      	beq.n	9850 <_svfprintf_r+0x1a40>
    983e:	4293      	cmp	r3, r2
    9840:	da06      	bge.n	9850 <_svfprintf_r+0x1a40>
    9842:	1ad2      	subs	r2, r2, r3
    9844:	784b      	ldrb	r3, [r1, #1]
    9846:	2b00      	cmp	r3, #0
    9848:	d1f5      	bne.n	9836 <_svfprintf_r+0x1a26>
    984a:	780b      	ldrb	r3, [r1, #0]
    984c:	3501      	adds	r5, #1
    984e:	e7f4      	b.n	983a <_svfprintf_r+0x1a2a>
    9850:	920c      	str	r2, [sp, #48]	; 0x30
    9852:	9113      	str	r1, [sp, #76]	; 0x4c
    9854:	900d      	str	r0, [sp, #52]	; 0x34
    9856:	950f      	str	r5, [sp, #60]	; 0x3c
    9858:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    985a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    985c:	9916      	ldr	r1, [sp, #88]	; 0x58
    985e:	4413      	add	r3, r2
    9860:	9a05      	ldr	r2, [sp, #20]
    9862:	fb01 2303 	mla	r3, r1, r3, r2
    9866:	9305      	str	r3, [sp, #20]
    9868:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    986c:	9302      	str	r3, [sp, #8]
    986e:	e5d5      	b.n	941c <_svfprintf_r+0x160c>
    9870:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9872:	18d3      	adds	r3, r2, r3
    9874:	4419      	add	r1, r3
    9876:	2366      	movs	r3, #102	; 0x66
    9878:	9105      	str	r1, [sp, #20]
    987a:	930b      	str	r3, [sp, #44]	; 0x2c
    987c:	e72d      	b.n	96da <_svfprintf_r+0x18ca>
    987e:	f1c3 0301 	rsb	r3, r3, #1
    9882:	441a      	add	r2, r3
    9884:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    9888:	9302      	str	r3, [sp, #8]
    988a:	2367      	movs	r3, #103	; 0x67
    988c:	9205      	str	r2, [sp, #20]
    988e:	930b      	str	r3, [sp, #44]	; 0x2c
    9890:	e698      	b.n	95c4 <_svfprintf_r+0x17b4>
    9892:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    9896:	e759      	b.n	974c <_svfprintf_r+0x193c>
    9898:	9b03      	ldr	r3, [sp, #12]
    989a:	f8dd 9008 	ldr.w	r9, [sp, #8]
    989e:	f8dd 801c 	ldr.w	r8, [sp, #28]
    98a2:	9305      	str	r3, [sp, #20]
    98a4:	e4b4      	b.n	9210 <_svfprintf_r+0x1400>
    98a6:	ee18 3a90 	vmov	r3, s17
    98aa:	2b00      	cmp	r3, #0
    98ac:	bfb4      	ite	lt
    98ae:	212d      	movlt	r1, #45	; 0x2d
    98b0:	f89d 1067 	ldrbge.w	r1, [sp, #103]	; 0x67
    98b4:	4c25      	ldr	r4, [pc, #148]	; (994c <_svfprintf_r+0x1b3c>)
    98b6:	4b26      	ldr	r3, [pc, #152]	; (9950 <_svfprintf_r+0x1b40>)
    98b8:	bfb8      	it	lt
    98ba:	f88d 1067 	strblt.w	r1, [sp, #103]	; 0x67
    98be:	f028 0880 	bic.w	r8, r8, #128	; 0x80
    98c2:	f7fe bc79 	b.w	81b8 <_svfprintf_r+0x3a8>
    98c6:	9b03      	ldr	r3, [sp, #12]
    98c8:	9302      	str	r3, [sp, #8]
    98ca:	9305      	str	r3, [sp, #20]
    98cc:	2373      	movs	r3, #115	; 0x73
    98ce:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    98d2:	9003      	str	r0, [sp, #12]
    98d4:	900f      	str	r0, [sp, #60]	; 0x3c
    98d6:	900d      	str	r0, [sp, #52]	; 0x34
    98d8:	930b      	str	r3, [sp, #44]	; 0x2c
    98da:	f7fe bc7a 	b.w	81d2 <_svfprintf_r+0x3c2>
    98de:	2302      	movs	r3, #2
    98e0:	9314      	str	r3, [sp, #80]	; 0x50
    98e2:	e584      	b.n	93ee <_svfprintf_r+0x15de>
    98e4:	9a03      	ldr	r2, [sp, #12]
    98e6:	4313      	orrs	r3, r2
    98e8:	d105      	bne.n	98f6 <_svfprintf_r+0x1ae6>
    98ea:	2301      	movs	r3, #1
    98ec:	2266      	movs	r2, #102	; 0x66
    98ee:	9302      	str	r3, [sp, #8]
    98f0:	920b      	str	r2, [sp, #44]	; 0x2c
    98f2:	9305      	str	r3, [sp, #20]
    98f4:	e666      	b.n	95c4 <_svfprintf_r+0x17b4>
    98f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    98f8:	3301      	adds	r3, #1
    98fa:	441a      	add	r2, r3
    98fc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    9900:	9302      	str	r3, [sp, #8]
    9902:	2366      	movs	r3, #102	; 0x66
    9904:	9205      	str	r2, [sp, #20]
    9906:	930b      	str	r3, [sp, #44]	; 0x2c
    9908:	e65c      	b.n	95c4 <_svfprintf_r+0x17b4>
    990a:	9a08      	ldr	r2, [sp, #32]
    990c:	f899 3001 	ldrb.w	r3, [r9, #1]
    9910:	4689      	mov	r9, r1
    9912:	f852 1b04 	ldr.w	r1, [r2], #4
    9916:	9208      	str	r2, [sp, #32]
    9918:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
    991c:	9103      	str	r1, [sp, #12]
    991e:	f7fe bad3 	b.w	7ec8 <_svfprintf_r+0xb8>
    9922:	2300      	movs	r3, #0
    9924:	930f      	str	r3, [sp, #60]	; 0x3c
    9926:	930d      	str	r3, [sp, #52]	; 0x34
    9928:	e796      	b.n	9858 <_svfprintf_r+0x1a48>
    992a:	230c      	movs	r3, #12
    992c:	f8cb 3000 	str.w	r3, [fp]
    9930:	f04f 33ff 	mov.w	r3, #4294967295
    9934:	9304      	str	r3, [sp, #16]
    9936:	f7fe bb81 	b.w	803c <_svfprintf_r+0x22c>
    993a:	ee1b 2a10 	vmov	r2, s22
    993e:	8993      	ldrh	r3, [r2, #12]
    9940:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9944:	8193      	strh	r3, [r2, #12]
    9946:	f7fe bec8 	b.w	86da <_svfprintf_r+0x8ca>
    994a:	bf00      	nop
    994c:	200008fc 	.word	0x200008fc
    9950:	20000900 	.word	0x20000900

00009954 <__ssvfscanf_r>:
    9954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9958:	ed2d 8b02 	vpush	{d8}
    995c:	f5ad 7d37 	sub.w	sp, sp, #732	; 0x2dc
    9960:	468b      	mov	fp, r1
    9962:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
    9966:	af02      	add	r7, sp, #8
    9968:	048c      	lsls	r4, r1, #18
    996a:	4681      	mov	r9, r0
    996c:	64fa      	str	r2, [r7, #76]	; 0x4c
    996e:	633b      	str	r3, [r7, #48]	; 0x30
    9970:	d409      	bmi.n	9986 <__ssvfscanf_r+0x32>
    9972:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
    9976:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
    997a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    997e:	f8ab 100c 	strh.w	r1, [fp, #12]
    9982:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
    9986:	2300      	movs	r3, #0
    9988:	461c      	mov	r4, r3
    998a:	2208      	movs	r2, #8
    998c:	4619      	mov	r1, r3
    998e:	f107 0058 	add.w	r0, r7, #88	; 0x58
    9992:	62fb      	str	r3, [r7, #44]	; 0x2c
    9994:	46a2      	mov	sl, r4
    9996:	f7fc fb03 	bl	5fa0 <memset>
    999a:	643c      	str	r4, [r7, #64]	; 0x40
    999c:	627c      	str	r4, [r7, #36]	; 0x24
    999e:	63bc      	str	r4, [r7, #56]	; 0x38
    99a0:	647c      	str	r4, [r7, #68]	; 0x44
    99a2:	4b83      	ldr	r3, [pc, #524]	; (9bb0 <__ssvfscanf_r+0x25c>)
    99a4:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
    99a8:	f7fc fc2a 	bl	6200 <__locale_mb_cur_max>
    99ac:	f107 0258 	add.w	r2, r7, #88	; 0x58
    99b0:	4603      	mov	r3, r0
    99b2:	9200      	str	r2, [sp, #0]
    99b4:	f107 0154 	add.w	r1, r7, #84	; 0x54
    99b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    99ba:	4648      	mov	r0, r9
    99bc:	47a0      	blx	r4
    99be:	1e05      	subs	r5, r0, #0
    99c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    99c2:	db33      	blt.n	9a2c <__ssvfscanf_r+0xd8>
    99c4:	442b      	add	r3, r5
    99c6:	64fb      	str	r3, [r7, #76]	; 0x4c
    99c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    99ca:	462e      	mov	r6, r5
    99cc:	2b00      	cmp	r3, #0
    99ce:	f000 80b6 	beq.w	9b3e <__ssvfscanf_r+0x1ea>
    99d2:	2d01      	cmp	r5, #1
    99d4:	d038      	beq.n	9a48 <__ssvfscanf_r+0xf4>
    99d6:	2b25      	cmp	r3, #37	; 0x25
    99d8:	d040      	beq.n	9a5c <__ssvfscanf_r+0x108>
    99da:	2d00      	cmp	r5, #0
    99dc:	d0e1      	beq.n	99a2 <__ssvfscanf_r+0x4e>
    99de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    99e0:	1b9e      	subs	r6, r3, r6
    99e2:	f8db 3004 	ldr.w	r3, [fp, #4]
    99e6:	1e74      	subs	r4, r6, #1
    99e8:	2b00      	cmp	r3, #0
    99ea:	f340 8098 	ble.w	9b1e <__ssvfscanf_r+0x1ca>
    99ee:	f8db 1000 	ldr.w	r1, [fp]
    99f2:	f894 c001 	ldrb.w	ip, [r4, #1]
    99f6:	f891 e000 	ldrb.w	lr, [r1]
    99fa:	1ca3      	adds	r3, r4, #2
    99fc:	eb0a 0003 	add.w	r0, sl, r3
    9a00:	45e6      	cmp	lr, ip
    9a02:	f101 0101 	add.w	r1, r1, #1
    9a06:	eba3 0206 	sub.w	r2, r3, r6
    9a0a:	f104 0401 	add.w	r4, r4, #1
    9a0e:	eba0 0006 	sub.w	r0, r0, r6
    9a12:	f040 8094 	bne.w	9b3e <__ssvfscanf_r+0x1ea>
    9a16:	f8db 3004 	ldr.w	r3, [fp, #4]
    9a1a:	f8cb 1000 	str.w	r1, [fp]
    9a1e:	3b01      	subs	r3, #1
    9a20:	42aa      	cmp	r2, r5
    9a22:	f8cb 3004 	str.w	r3, [fp, #4]
    9a26:	dbdf      	blt.n	99e8 <__ssvfscanf_r+0x94>
    9a28:	4682      	mov	sl, r0
    9a2a:	e7ba      	b.n	99a2 <__ssvfscanf_r+0x4e>
    9a2c:	3301      	adds	r3, #1
    9a2e:	64fb      	str	r3, [r7, #76]	; 0x4c
    9a30:	2208      	movs	r2, #8
    9a32:	f64f 73fd 	movw	r3, #65533	; 0xfffd
    9a36:	2100      	movs	r1, #0
    9a38:	f107 0058 	add.w	r0, r7, #88	; 0x58
    9a3c:	657b      	str	r3, [r7, #84]	; 0x54
    9a3e:	f7fc faaf 	bl	5fa0 <memset>
    9a42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    9a44:	2b00      	cmp	r3, #0
    9a46:	d07a      	beq.n	9b3e <__ssvfscanf_r+0x1ea>
    9a48:	4e5a      	ldr	r6, [pc, #360]	; (9bb4 <__ssvfscanf_r+0x260>)
    9a4a:	5cf2      	ldrb	r2, [r6, r3]
    9a4c:	0710      	lsls	r0, r2, #28
    9a4e:	f100 851c 	bmi.w	a48a <__ssvfscanf_r+0xb36>
    9a52:	2b25      	cmp	r3, #37	; 0x25
    9a54:	f040 8086 	bne.w	9b64 <__ssvfscanf_r+0x210>
    9a58:	2501      	movs	r5, #1
    9a5a:	462e      	mov	r6, r5
    9a5c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    9a5e:	2400      	movs	r4, #0
    9a60:	7802      	ldrb	r2, [r0, #0]
    9a62:	46a0      	mov	r8, r4
    9a64:	f1a2 0325 	sub.w	r3, r2, #37	; 0x25
    9a68:	1c41      	adds	r1, r0, #1
    9a6a:	2b55      	cmp	r3, #85	; 0x55
    9a6c:	d867      	bhi.n	9b3e <__ssvfscanf_r+0x1ea>
    9a6e:	e8df f013 	tbh	[pc, r3, lsl #1]
    9a72:	070a      	.short	0x070a
    9a74:	00660066 	.word	0x00660066
    9a78:	00660066 	.word	0x00660066
    9a7c:	00660701 	.word	0x00660701
    9a80:	00660066 	.word	0x00660066
    9a84:	00660066 	.word	0x00660066
    9a88:	060c060c 	.word	0x060c060c
    9a8c:	060c060c 	.word	0x060c060c
    9a90:	060c060c 	.word	0x060c060c
    9a94:	060c060c 	.word	0x060c060c
    9a98:	060c060c 	.word	0x060c060c
    9a9c:	00660066 	.word	0x00660066
    9aa0:	00660066 	.word	0x00660066
    9aa4:	00660066 	.word	0x00660066
    9aa8:	06180066 	.word	0x06180066
    9aac:	048e0066 	.word	0x048e0066
    9ab0:	061804c9 	.word	0x061804c9
    9ab4:	06180618 	.word	0x06180618
    9ab8:	00660066 	.word	0x00660066
    9abc:	00660066 	.word	0x00660066
    9ac0:	00660082 	.word	0x00660082
    9ac4:	04bf0066 	.word	0x04bf0066
    9ac8:	00660066 	.word	0x00660066
    9acc:	00890066 	.word	0x00890066
    9ad0:	00660066 	.word	0x00660066
    9ad4:	00660066 	.word	0x00660066
    9ad8:	0066066b 	.word	0x0066066b
    9adc:	06dd0066 	.word	0x06dd0066
    9ae0:	00660066 	.word	0x00660066
    9ae4:	00660066 	.word	0x00660066
    9ae8:	06180066 	.word	0x06180066
    9aec:	04900066 	.word	0x04900066
    9af0:	061804cb 	.word	0x061804cb
    9af4:	06180618 	.word	0x06180618
    9af8:	06d206be 	.word	0x06d206be
    9afc:	00660082 	.word	0x00660082
    9b00:	06f306e7 	.word	0x06f306e7
    9b04:	04c106ac 	.word	0x04c106ac
    9b08:	006606da 	.word	0x006606da
    9b0c:	008b0066 	.word	0x008b0066
    9b10:	06ca007d 	.word	0x06ca007d
    9b14:	00660066 	.word	0x00660066
    9b18:	0066066b 	.word	0x0066066b
    9b1c:	007d      	.short	0x007d
    9b1e:	4659      	mov	r1, fp
    9b20:	4648      	mov	r0, r9
    9b22:	f003 f935 	bl	cd90 <__ssrefill_r>
    9b26:	2800      	cmp	r0, #0
    9b28:	f43f af61 	beq.w	99ee <__ssvfscanf_r+0x9a>
    9b2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    9b2e:	2b00      	cmp	r3, #0
    9b30:	f001 8052 	beq.w	abd8 <__ssvfscanf_r+0x1284>
    9b34:	f8bb 300c 	ldrh.w	r3, [fp, #12]
    9b38:	065a      	lsls	r2, r3, #25
    9b3a:	f101 804d 	bmi.w	abd8 <__ssvfscanf_r+0x1284>
    9b3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    9b40:	b143      	cbz	r3, 9b54 <__ssvfscanf_r+0x200>
    9b42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    9b44:	f8d3 8000 	ldr.w	r8, [r3]
    9b48:	f1b8 0f00 	cmp.w	r8, #0
    9b4c:	d002      	beq.n	9b54 <__ssvfscanf_r+0x200>
    9b4e:	4640      	mov	r0, r8
    9b50:	f7fa fafe 	bl	4150 <free>
    9b54:	6c78      	ldr	r0, [r7, #68]	; 0x44
    9b56:	f507 7735 	add.w	r7, r7, #724	; 0x2d4
    9b5a:	46bd      	mov	sp, r7
    9b5c:	ecbd 8b02 	vpop	{d8}
    9b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9b64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    9b66:	2501      	movs	r5, #1
    9b68:	1e5e      	subs	r6, r3, #1
    9b6a:	e73a      	b.n	99e2 <__ssvfscanf_r+0x8e>
    9b6c:	0723      	lsls	r3, r4, #28
    9b6e:	d1e6      	bne.n	9b3e <__ssvfscanf_r+0x1ea>
    9b70:	7842      	ldrb	r2, [r0, #1]
    9b72:	4608      	mov	r0, r1
    9b74:	e776      	b.n	9a64 <__ssvfscanf_r+0x110>
    9b76:	0722      	lsls	r2, r4, #28
    9b78:	d1e1      	bne.n	9b3e <__ssvfscanf_r+0x1ea>
    9b7a:	7842      	ldrb	r2, [r0, #1]
    9b7c:	f044 0402 	orr.w	r4, r4, #2
    9b80:	4608      	mov	r0, r1
    9b82:	e76f      	b.n	9a64 <__ssvfscanf_r+0x110>
    9b84:	f044 0401 	orr.w	r4, r4, #1
    9b88:	64f9      	str	r1, [r7, #76]	; 0x4c
    9b8a:	2502      	movs	r5, #2
    9b8c:	f8db 3004 	ldr.w	r3, [fp, #4]
    9b90:	2b00      	cmp	r3, #0
    9b92:	f340 8408 	ble.w	a3a6 <__ssvfscanf_r+0xa52>
    9b96:	0660      	lsls	r0, r4, #25
    9b98:	f140 840f 	bpl.w	a3ba <__ssvfscanf_r+0xa66>
    9b9c:	1e6b      	subs	r3, r5, #1
    9b9e:	2b03      	cmp	r3, #3
    9ba0:	f201 80eb 	bhi.w	ad7a <__ssvfscanf_r+0x1426>
    9ba4:	e8df f013 	tbh	[pc, r3, lsl #1]
    9ba8:	01f1027b 	.word	0x01f1027b
    9bac:	0008014b 	.word	0x0008014b
    9bb0:	20007c38 	.word	0x20007c38
    9bb4:	2000075d 	.word	0x2000075d
    9bb8:	4648      	mov	r0, r9
    9bba:	f001 fcaf 	bl	b51c <_localeconv_r>
    9bbe:	6803      	ldr	r3, [r0, #0]
    9bc0:	623b      	str	r3, [r7, #32]
    9bc2:	f108 33ff 	add.w	r3, r8, #4294967295
    9bc6:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
    9bca:	f240 855a 	bls.w	a682 <__ssvfscanf_r+0xd2e>
    9bce:	f46f 75ae 	mvn.w	r5, #348	; 0x15c
    9bd2:	eb08 0305 	add.w	r3, r8, r5
    9bd6:	613b      	str	r3, [r7, #16]
    9bd8:	f240 185d 	movw	r8, #349	; 0x15d
    9bdc:	2600      	movs	r6, #0
    9bde:	f507 73b8 	add.w	r3, r7, #368	; 0x170
    9be2:	ee08 9a10 	vmov	s16, r9
    9be6:	e9c7 6605 	strd	r6, r6, [r7, #20]
    9bea:	63fe      	str	r6, [r7, #60]	; 0x3c
    9bec:	637e      	str	r6, [r7, #52]	; 0x34
    9bee:	61fe      	str	r6, [r7, #28]
    9bf0:	64be      	str	r6, [r7, #72]	; 0x48
    9bf2:	f444 64f0 	orr.w	r4, r4, #1920	; 0x780
    9bf6:	62bb      	str	r3, [r7, #40]	; 0x28
    9bf8:	461d      	mov	r5, r3
    9bfa:	4646      	mov	r6, r8
    9bfc:	f8db 1000 	ldr.w	r1, [fp]
    9c00:	780a      	ldrb	r2, [r1, #0]
    9c02:	f1a2 032b 	sub.w	r3, r2, #43	; 0x2b
    9c06:	2b4e      	cmp	r3, #78	; 0x4e
    9c08:	d850      	bhi.n	9cac <__ssvfscanf_r+0x358>
    9c0a:	e8df f013 	tbh	[pc, r3, lsl #1]
    9c0e:	037e      	.short	0x037e
    9c10:	037e004f 	.word	0x037e004f
    9c14:	004f004f 	.word	0x004f004f
    9c18:	00a600a3 	.word	0x00a600a3
    9c1c:	00a600a6 	.word	0x00a600a6
    9c20:	00a600a6 	.word	0x00a600a6
    9c24:	00a600a6 	.word	0x00a600a6
    9c28:	00a600a6 	.word	0x00a600a6
    9c2c:	004f004f 	.word	0x004f004f
    9c30:	004f004f 	.word	0x004f004f
    9c34:	004f004f 	.word	0x004f004f
    9c38:	0374004f 	.word	0x0374004f
    9c3c:	030b030b 	.word	0x030b030b
    9c40:	039e030b 	.word	0x039e030b
    9c44:	004f0394 	.word	0x004f0394
    9c48:	0384004f 	.word	0x0384004f
    9c4c:	004f004f 	.word	0x004f004f
    9c50:	004f004f 	.word	0x004f004f
    9c54:	004f035d 	.word	0x004f035d
    9c58:	004f033a 	.word	0x004f033a
    9c5c:	004f004f 	.word	0x004f004f
    9c60:	004f0333 	.word	0x004f0333
    9c64:	004f004f 	.word	0x004f004f
    9c68:	036d031e 	.word	0x036d031e
    9c6c:	004f004f 	.word	0x004f004f
    9c70:	004f004f 	.word	0x004f004f
    9c74:	004f004f 	.word	0x004f004f
    9c78:	0374004f 	.word	0x0374004f
    9c7c:	030b030b 	.word	0x030b030b
    9c80:	039e030b 	.word	0x039e030b
    9c84:	004f0394 	.word	0x004f0394
    9c88:	0384004f 	.word	0x0384004f
    9c8c:	004f004f 	.word	0x004f004f
    9c90:	004f004f 	.word	0x004f004f
    9c94:	004f035d 	.word	0x004f035d
    9c98:	004f033a 	.word	0x004f033a
    9c9c:	004f004f 	.word	0x004f004f
    9ca0:	004f0333 	.word	0x004f0333
    9ca4:	004f004f 	.word	0x004f004f
    9ca8:	036d031e 	.word	0x036d031e
    9cac:	05a0      	lsls	r0, r4, #22
    9cae:	d56f      	bpl.n	9d90 <__ssvfscanf_r+0x43c>
    9cb0:	6a38      	ldr	r0, [r7, #32]
    9cb2:	7803      	ldrb	r3, [r0, #0]
    9cb4:	4293      	cmp	r3, r2
    9cb6:	d16b      	bne.n	9d90 <__ssvfscanf_r+0x43c>
    9cb8:	e9c7 4502 	strd	r4, r5, [r7, #8]
    9cbc:	607e      	str	r6, [r7, #4]
    9cbe:	4681      	mov	r9, r0
    9cc0:	ee18 6a10 	vmov	r6, s16
    9cc4:	f04f 0800 	mov.w	r8, #0
    9cc8:	465c      	mov	r4, fp
    9cca:	e007      	b.n	9cdc <__ssvfscanf_r+0x388>
    9ccc:	6021      	str	r1, [r4, #0]
    9cce:	f891 e000 	ldrb.w	lr, [r1]
    9cd2:	f899 0000 	ldrb.w	r0, [r9]
    9cd6:	4586      	cmp	lr, r0
    9cd8:	d11c      	bne.n	9d14 <__ssvfscanf_r+0x3c0>
    9cda:	46da      	mov	sl, fp
    9cdc:	f819 0f01 	ldrb.w	r0, [r9, #1]!
    9ce0:	4645      	mov	r5, r8
    9ce2:	f10a 0b01 	add.w	fp, sl, #1
    9ce6:	3101      	adds	r1, #1
    9ce8:	f108 0801 	add.w	r8, r8, #1
    9cec:	2800      	cmp	r0, #0
    9cee:	f000 8664 	beq.w	a9ba <__ssvfscanf_r+0x1066>
    9cf2:	6860      	ldr	r0, [r4, #4]
    9cf4:	3801      	subs	r0, #1
    9cf6:	2800      	cmp	r0, #0
    9cf8:	6060      	str	r0, [r4, #4]
    9cfa:	dce7      	bgt.n	9ccc <__ssvfscanf_r+0x378>
    9cfc:	4621      	mov	r1, r4
    9cfe:	4630      	mov	r0, r6
    9d00:	f003 f846 	bl	cd90 <__ssrefill_r>
    9d04:	b930      	cbnz	r0, 9d14 <__ssvfscanf_r+0x3c0>
    9d06:	6821      	ldr	r1, [r4, #0]
    9d08:	f899 0000 	ldrb.w	r0, [r9]
    9d0c:	f891 e000 	ldrb.w	lr, [r1]
    9d10:	4586      	cmp	lr, r0
    9d12:	d0e2      	beq.n	9cda <__ssvfscanf_r+0x386>
    9d14:	46a3      	mov	fp, r4
    9d16:	6a3a      	ldr	r2, [r7, #32]
    9d18:	68bc      	ldr	r4, [r7, #8]
    9d1a:	613d      	str	r5, [r7, #16]
    9d1c:	462b      	mov	r3, r5
    9d1e:	46b1      	mov	r9, r6
    9d20:	6cbe      	ldr	r6, [r7, #72]	; 0x48
    9d22:	68fd      	ldr	r5, [r7, #12]
    9d24:	64bd      	str	r5, [r7, #72]	; 0x48
    9d26:	3301      	adds	r3, #1
    9d28:	465d      	mov	r5, fp
    9d2a:	eb02 0803 	add.w	r8, r2, r3
    9d2e:	46b3      	mov	fp, r6
    9d30:	4626      	mov	r6, r4
    9d32:	4614      	mov	r4, r2
    9d34:	f818 1d01 	ldrb.w	r1, [r8, #-1]!
    9d38:	462a      	mov	r2, r5
    9d3a:	4648      	mov	r0, r9
    9d3c:	f002 ffe8 	bl	cd10 <_sungetc_r>
    9d40:	4544      	cmp	r4, r8
    9d42:	d1f7      	bne.n	9d34 <__ssvfscanf_r+0x3e0>
    9d44:	693b      	ldr	r3, [r7, #16]
    9d46:	4634      	mov	r4, r6
    9d48:	ebaa 0a03 	sub.w	sl, sl, r3
    9d4c:	465e      	mov	r6, fp
    9d4e:	46ab      	mov	fp, r5
    9d50:	6cbd      	ldr	r5, [r7, #72]	; 0x48
    9d52:	e020      	b.n	9d96 <__ssvfscanf_r+0x442>
    9d54:	05e0      	lsls	r0, r4, #23
    9d56:	f100 8501 	bmi.w	a75c <__ssvfscanf_r+0xe08>
    9d5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    9d5c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    9d5e:	42d9      	cmn	r1, r3
    9d60:	d116      	bne.n	9d90 <__ssvfscanf_r+0x43c>
    9d62:	f424 74c0 	bic.w	r4, r4, #384	; 0x180
    9d66:	f805 2b01 	strb.w	r2, [r5], #1
    9d6a:	3e01      	subs	r6, #1
    9d6c:	f8db 3004 	ldr.w	r3, [fp, #4]
    9d70:	3b01      	subs	r3, #1
    9d72:	2b00      	cmp	r3, #0
    9d74:	f10a 0a01 	add.w	sl, sl, #1
    9d78:	f8cb 3004 	str.w	r3, [fp, #4]
    9d7c:	f340 836f 	ble.w	a45e <__ssvfscanf_r+0xb0a>
    9d80:	f8db 3000 	ldr.w	r3, [fp]
    9d84:	3301      	adds	r3, #1
    9d86:	f8cb 3000 	str.w	r3, [fp]
    9d8a:	2e00      	cmp	r6, #0
    9d8c:	f47f af36 	bne.w	9bfc <__ssvfscanf_r+0x2a8>
    9d90:	6cbe      	ldr	r6, [r7, #72]	; 0x48
    9d92:	ee18 9a10 	vmov	r9, s16
    9d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9d98:	2b00      	cmp	r3, #0
    9d9a:	f040 82dc 	bne.w	a356 <__ssvfscanf_r+0xa02>
    9d9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9da0:	3b01      	subs	r3, #1
    9da2:	2b01      	cmp	r3, #1
    9da4:	f241 8016 	bls.w	add4 <__ssvfscanf_r+0x1480>
    9da8:	1e73      	subs	r3, r6, #1
    9daa:	2b06      	cmp	r3, #6
    9dac:	f240 8627 	bls.w	a9fe <__ssvfscanf_r+0x10aa>
    9db0:	05e3      	lsls	r3, r4, #23
    9db2:	d51b      	bpl.n	9dec <__ssvfscanf_r+0x498>
    9db4:	0566      	lsls	r6, r4, #21
    9db6:	f101 80b5 	bmi.w	af24 <__ssvfscanf_r+0x15d0>
    9dba:	f815 1c01 	ldrb.w	r1, [r5, #-1]
    9dbe:	2965      	cmp	r1, #101	; 0x65
    9dc0:	f105 33ff 	add.w	r3, r5, #4294967295
    9dc4:	f10a 36ff 	add.w	r6, sl, #4294967295
    9dc8:	d00a      	beq.n	9de0 <__ssvfscanf_r+0x48c>
    9dca:	2945      	cmp	r1, #69	; 0x45
    9dcc:	d008      	beq.n	9de0 <__ssvfscanf_r+0x48c>
    9dce:	465a      	mov	r2, fp
    9dd0:	4648      	mov	r0, r9
    9dd2:	f002 ff9d 	bl	cd10 <_sungetc_r>
    9dd6:	f815 1c02 	ldrb.w	r1, [r5, #-2]
    9dda:	f1aa 0602 	sub.w	r6, sl, #2
    9dde:	1eab      	subs	r3, r5, #2
    9de0:	465a      	mov	r2, fp
    9de2:	4648      	mov	r0, r9
    9de4:	46b2      	mov	sl, r6
    9de6:	461d      	mov	r5, r3
    9de8:	f002 ff92 	bl	cd10 <_sungetc_r>
    9dec:	f014 0210 	ands.w	r2, r4, #16
    9df0:	f47f add7 	bne.w	99a2 <__ssvfscanf_r+0x4e>
    9df4:	f404 63c0 	and.w	r3, r4, #1536	; 0x600
    9df8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    9dfc:	702a      	strb	r2, [r5, #0]
    9dfe:	f000 84d2 	beq.w	a7a6 <__ssvfscanf_r+0xe52>
    9e02:	69bb      	ldr	r3, [r7, #24]
    9e04:	2b00      	cmp	r3, #0
    9e06:	f040 872c 	bne.w	ac62 <__ssvfscanf_r+0x130e>
    9e0a:	4648      	mov	r0, r9
    9e0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    9e0e:	2200      	movs	r2, #0
    9e10:	f7fb fd92 	bl	5938 <_strtod_r>
    9e14:	07e0      	lsls	r0, r4, #31
    9e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    9e18:	f100 85c9 	bmi.w	a9ae <__ssvfscanf_r+0x105a>
    9e1c:	07a1      	lsls	r1, r4, #30
    9e1e:	f100 85c6 	bmi.w	a9ae <__ssvfscanf_r+0x105a>
    9e22:	eeb4 0b40 	vcmp.f64	d0, d0
    9e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9e2a:	f853 4b04 	ldr.w	r4, [r3], #4
    9e2e:	f180 86f4 	bvs.w	ac1a <__ssvfscanf_r+0x12c6>
    9e32:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    9e36:	633b      	str	r3, [r7, #48]	; 0x30
    9e38:	ed84 0a00 	vstr	s0, [r4]
    9e3c:	e3a2      	b.n	a584 <__ssvfscanf_r+0xc30>
    9e3e:	f108 33ff 	add.w	r3, r8, #4294967295
    9e42:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
    9e46:	f240 83a2 	bls.w	a58e <__ssvfscanf_r+0xc3a>
    9e4a:	f46f 72ae 	mvn.w	r2, #348	; 0x15c
    9e4e:	eb08 0302 	add.w	r3, r8, r2
    9e52:	63fb      	str	r3, [r7, #60]	; 0x3c
    9e54:	f240 185d 	movw	r8, #349	; 0x15d
    9e58:	f507 73b8 	add.w	r3, r7, #368	; 0x170
    9e5c:	2200      	movs	r2, #0
    9e5e:	6bbe      	ldr	r6, [r7, #56]	; 0x38
    9e60:	62bb      	str	r3, [r7, #40]	; 0x28
    9e62:	4659      	mov	r1, fp
    9e64:	f444 6458 	orr.w	r4, r4, #3456	; 0xd80
    9e68:	46d3      	mov	fp, sl
    9e6a:	461d      	mov	r5, r3
    9e6c:	4692      	mov	sl, r2
    9e6e:	680a      	ldr	r2, [r1, #0]
    9e70:	7810      	ldrb	r0, [r2, #0]
    9e72:	f1a0 032b 	sub.w	r3, r0, #43	; 0x2b
    9e76:	2b4d      	cmp	r3, #77	; 0x4d
    9e78:	d860      	bhi.n	9f3c <__ssvfscanf_r+0x5e8>
    9e7a:	e8df f013 	tbh	[pc, r3, lsl #1]
    9e7e:	0282      	.short	0x0282
    9e80:	0282005f 	.word	0x0282005f
    9e84:	005f005f 	.word	0x005f005f
    9e88:	01e002cd 	.word	0x01e002cd
    9e8c:	01e001e0 	.word	0x01e001e0
    9e90:	01e001e0 	.word	0x01e001e0
    9e94:	01e001e0 	.word	0x01e001e0
    9e98:	026f026f 	.word	0x026f026f
    9e9c:	005f005f 	.word	0x005f005f
    9ea0:	005f005f 	.word	0x005f005f
    9ea4:	005f005f 	.word	0x005f005f
    9ea8:	004e005f 	.word	0x004e005f
    9eac:	004e004e 	.word	0x004e004e
    9eb0:	004e004e 	.word	0x004e004e
    9eb4:	005f004e 	.word	0x005f004e
    9eb8:	005f005f 	.word	0x005f005f
    9ebc:	005f005f 	.word	0x005f005f
    9ec0:	005f005f 	.word	0x005f005f
    9ec4:	005f005f 	.word	0x005f005f
    9ec8:	005f005f 	.word	0x005f005f
    9ecc:	005f005f 	.word	0x005f005f
    9ed0:	005f005f 	.word	0x005f005f
    9ed4:	005f005f 	.word	0x005f005f
    9ed8:	005f0276 	.word	0x005f0276
    9edc:	005f005f 	.word	0x005f005f
    9ee0:	005f005f 	.word	0x005f005f
    9ee4:	005f005f 	.word	0x005f005f
    9ee8:	004e005f 	.word	0x004e005f
    9eec:	004e004e 	.word	0x004e004e
    9ef0:	004e004e 	.word	0x004e004e
    9ef4:	005f004e 	.word	0x005f004e
    9ef8:	005f005f 	.word	0x005f005f
    9efc:	005f005f 	.word	0x005f005f
    9f00:	005f005f 	.word	0x005f005f
    9f04:	005f005f 	.word	0x005f005f
    9f08:	005f005f 	.word	0x005f005f
    9f0c:	005f005f 	.word	0x005f005f
    9f10:	005f005f 	.word	0x005f005f
    9f14:	005f005f 	.word	0x005f005f
    9f18:	0276      	.short	0x0276
    9f1a:	2e0a      	cmp	r6, #10
    9f1c:	dd0e      	ble.n	9f3c <__ssvfscanf_r+0x5e8>
    9f1e:	f424 6438 	bic.w	r4, r4, #2944	; 0xb80
    9f22:	684b      	ldr	r3, [r1, #4]
    9f24:	f805 0b01 	strb.w	r0, [r5], #1
    9f28:	3b01      	subs	r3, #1
    9f2a:	2b00      	cmp	r3, #0
    9f2c:	604b      	str	r3, [r1, #4]
    9f2e:	f340 828d 	ble.w	a44c <__ssvfscanf_r+0xaf8>
    9f32:	3201      	adds	r2, #1
    9f34:	600a      	str	r2, [r1, #0]
    9f36:	f1b8 0801 	subs.w	r8, r8, #1
    9f3a:	d198      	bne.n	9e6e <__ssvfscanf_r+0x51a>
    9f3c:	05e0      	lsls	r0, r4, #23
    9f3e:	46d0      	mov	r8, sl
    9f40:	63be      	str	r6, [r7, #56]	; 0x38
    9f42:	46da      	mov	sl, fp
    9f44:	468b      	mov	fp, r1
    9f46:	d507      	bpl.n	9f58 <__ssvfscanf_r+0x604>
    9f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9f4a:	429d      	cmp	r5, r3
    9f4c:	f200 8422 	bhi.w	a794 <__ssvfscanf_r+0xe40>
    9f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9f52:	429d      	cmp	r5, r3
    9f54:	f43f adf3 	beq.w	9b3e <__ssvfscanf_r+0x1ea>
    9f58:	f014 0210 	ands.w	r2, r4, #16
    9f5c:	d110      	bne.n	9f80 <__ssvfscanf_r+0x62c>
    9f5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    9f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    9f62:	6afe      	ldr	r6, [r7, #44]	; 0x2c
    9f64:	702a      	strb	r2, [r5, #0]
    9f66:	4648      	mov	r0, r9
    9f68:	47b0      	blx	r6
    9f6a:	06a1      	lsls	r1, r4, #26
    9f6c:	f140 8408 	bpl.w	a780 <__ssvfscanf_r+0xe2c>
    9f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    9f72:	f853 2b04 	ldr.w	r2, [r3], #4
    9f76:	6010      	str	r0, [r2, #0]
    9f78:	633b      	str	r3, [r7, #48]	; 0x30
    9f7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    9f7c:	3301      	adds	r3, #1
    9f7e:	647b      	str	r3, [r7, #68]	; 0x44
    9f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9f82:	1aed      	subs	r5, r5, r3
    9f84:	4445      	add	r5, r8
    9f86:	44aa      	add	sl, r5
    9f88:	e50b      	b.n	99a2 <__ssvfscanf_r+0x4e>
    9f8a:	f1b8 0f00 	cmp.w	r8, #0
    9f8e:	bf08      	it	eq
    9f90:	f04f 38ff 	moveq.w	r8, #4294967295
    9f94:	07e0      	lsls	r0, r4, #31
    9f96:	f140 8295 	bpl.w	a4c4 <__ssvfscanf_r+0xb70>
    9f9a:	f014 0310 	ands.w	r3, r4, #16
    9f9e:	637b      	str	r3, [r7, #52]	; 0x34
    9fa0:	f040 8474 	bne.w	a88c <__ssvfscanf_r+0xf38>
    9fa4:	0621      	lsls	r1, r4, #24
    9fa6:	f140 8666 	bpl.w	ac76 <__ssvfscanf_r+0x1322>
    9faa:	6b3c      	ldr	r4, [r7, #48]	; 0x30
    9fac:	f854 3b04 	ldr.w	r3, [r4], #4
    9fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
    9fb2:	2b00      	cmp	r3, #0
    9fb4:	f43f adc3 	beq.w	9b3e <__ssvfscanf_r+0x1ea>
    9fb8:	2080      	movs	r0, #128	; 0x80
    9fba:	f7fa f8c1 	bl	4140 <malloc>
    9fbe:	64b8      	str	r0, [r7, #72]	; 0x48
    9fc0:	2800      	cmp	r0, #0
    9fc2:	f000 8778 	beq.w	aeb6 <__ssvfscanf_r+0x1562>
    9fc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9fc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
    9fca:	601a      	str	r2, [r3, #0]
    9fcc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    9fce:	88d5      	ldrh	r5, [r2, #6]
    9fd0:	8893      	ldrh	r3, [r2, #4]
    9fd2:	429d      	cmp	r5, r3
    9fd4:	f080 8552 	bcs.w	aa7c <__ssvfscanf_r+0x1128>
    9fd8:	6810      	ldr	r0, [r2, #0]
    9fda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9fdc:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
    9fe0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    9fe2:	633c      	str	r4, [r7, #48]	; 0x30
    9fe4:	3501      	adds	r5, #1
    9fe6:	80dd      	strh	r5, [r3, #6]
    9fe8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    9fea:	62bb      	str	r3, [r7, #40]	; 0x28
    9fec:	2320      	movs	r3, #32
    9fee:	623b      	str	r3, [r7, #32]
    9ff0:	f8db 3000 	ldr.w	r3, [fp]
    9ff4:	4eb1      	ldr	r6, [pc, #708]	; (a2bc <__ssvfscanf_r+0x968>)
    9ff6:	781b      	ldrb	r3, [r3, #0]
    9ff8:	5cf3      	ldrb	r3, [r6, r3]
    9ffa:	f013 0308 	ands.w	r3, r3, #8
    9ffe:	f040 84bb 	bne.w	a978 <__ssvfscanf_r+0x1024>
    a002:	6a7c      	ldr	r4, [r7, #36]	; 0x24
    a004:	627e      	str	r6, [r7, #36]	; 0x24
    a006:	461d      	mov	r5, r3
    a008:	f7fc f8fa 	bl	6200 <__locale_mb_cur_max>
    a00c:	42a8      	cmp	r0, r5
    a00e:	f43f ad8d 	beq.w	9b2c <__ssvfscanf_r+0x1d8>
    a012:	e9db 3200 	ldrd	r3, r2, [fp]
    a016:	f507 70b8 	add.w	r0, r7, #368	; 0x170
    a01a:	f813 1b01 	ldrb.w	r1, [r3], #1
    a01e:	5541      	strb	r1, [r0, r5]
    a020:	3a01      	subs	r2, #1
    a022:	2c03      	cmp	r4, #3
    a024:	e9cb 3200 	strd	r3, r2, [fp]
    a028:	f105 0501 	add.w	r5, r5, #1
    a02c:	f107 0668 	add.w	r6, r7, #104	; 0x68
    a030:	d102      	bne.n	a038 <__ssvfscanf_r+0x6e4>
    a032:	6833      	ldr	r3, [r6, #0]
    a034:	2b04      	cmp	r3, #4
    a036:	d004      	beq.n	a042 <__ssvfscanf_r+0x6ee>
    a038:	2208      	movs	r2, #8
    a03a:	2100      	movs	r1, #0
    a03c:	4630      	mov	r0, r6
    a03e:	f7fb ffaf 	bl	5fa0 <memset>
    a042:	f507 72b8 	add.w	r2, r7, #368	; 0x170
    a046:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    a048:	9600      	str	r6, [sp, #0]
    a04a:	462b      	mov	r3, r5
    a04c:	4648      	mov	r0, r9
    a04e:	f002 fc8b 	bl	c968 <_mbrtowc_r>
    a052:	1c42      	adds	r2, r0, #1
    a054:	4604      	mov	r4, r0
    a056:	f43f ad69 	beq.w	9b2c <__ssvfscanf_r+0x1d8>
    a05a:	2800      	cmp	r0, #0
    a05c:	f040 8478 	bne.w	a950 <__ssvfscanf_r+0xffc>
    a060:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a062:	6018      	str	r0, [r3, #0]
    a064:	f002 fcdc 	bl	ca20 <iswspace>
    a068:	2800      	cmp	r0, #0
    a06a:	f040 865c 	bne.w	ad26 <__ssvfscanf_r+0x13d2>
    a06e:	44aa      	add	sl, r5
    a070:	f108 38ff 	add.w	r8, r8, #4294967295
    a074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a076:	2b00      	cmp	r3, #0
    a078:	f040 8633 	bne.w	ace2 <__ssvfscanf_r+0x138e>
    a07c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a07e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    a080:	3304      	adds	r3, #4
    a082:	64bb      	str	r3, [r7, #72]	; 0x48
    a084:	2a00      	cmp	r2, #0
    a086:	f000 862c 	beq.w	ace2 <__ssvfscanf_r+0x138e>
    a08a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    a08c:	1a9d      	subs	r5, r3, r2
    a08e:	6a3b      	ldr	r3, [r7, #32]
    a090:	ebb3 0fa5 	cmp.w	r3, r5, asr #2
    a094:	f240 8756 	bls.w	af44 <__ssvfscanf_r+0x15f0>
    a098:	6b7d      	ldr	r5, [r7, #52]	; 0x34
    a09a:	f000 bc5c 	b.w	a956 <__ssvfscanf_r+0x1002>
    a09e:	f1b8 0f00 	cmp.w	r8, #0
    a0a2:	bf08      	it	eq
    a0a4:	f04f 38ff 	moveq.w	r8, #4294967295
    a0a8:	07e0      	lsls	r0, r4, #31
    a0aa:	f140 827b 	bpl.w	a5a4 <__ssvfscanf_r+0xc50>
    a0ae:	f014 0310 	ands.w	r3, r4, #16
    a0b2:	62bb      	str	r3, [r7, #40]	; 0x28
    a0b4:	f040 83f3 	bne.w	a89e <__ssvfscanf_r+0xf4a>
    a0b8:	0621      	lsls	r1, r4, #24
    a0ba:	f140 85ed 	bpl.w	ac98 <__ssvfscanf_r+0x1344>
    a0be:	6b3e      	ldr	r6, [r7, #48]	; 0x30
    a0c0:	f856 3b04 	ldr.w	r3, [r6], #4
    a0c4:	623b      	str	r3, [r7, #32]
    a0c6:	2b00      	cmp	r3, #0
    a0c8:	f43f ad39 	beq.w	9b3e <__ssvfscanf_r+0x1ea>
    a0cc:	2080      	movs	r0, #128	; 0x80
    a0ce:	f7fa f837 	bl	4140 <malloc>
    a0d2:	4604      	mov	r4, r0
    a0d4:	2800      	cmp	r0, #0
    a0d6:	f000 86ee 	beq.w	aeb6 <__ssvfscanf_r+0x1562>
    a0da:	6a3b      	ldr	r3, [r7, #32]
    a0dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    a0de:	6018      	str	r0, [r3, #0]
    a0e0:	88d5      	ldrh	r5, [r2, #6]
    a0e2:	8893      	ldrh	r3, [r2, #4]
    a0e4:	429d      	cmp	r5, r3
    a0e6:	f080 84dd 	bcs.w	aaa4 <__ssvfscanf_r+0x1150>
    a0ea:	6810      	ldr	r0, [r2, #0]
    a0ec:	6a3b      	ldr	r3, [r7, #32]
    a0ee:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
    a0f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    a0f4:	633e      	str	r6, [r7, #48]	; 0x30
    a0f6:	3501      	adds	r5, #1
    a0f8:	80dd      	strh	r5, [r3, #6]
    a0fa:	2320      	movs	r3, #32
    a0fc:	61fc      	str	r4, [r7, #28]
    a0fe:	61bb      	str	r3, [r7, #24]
    a100:	6a7e      	ldr	r6, [r7, #36]	; 0x24
    a102:	f8c7 a03c 	str.w	sl, [r7, #60]	; 0x3c
    a106:	2500      	movs	r5, #0
    a108:	46c2      	mov	sl, r8
    a10a:	46a0      	mov	r8, r4
    a10c:	f7fc f878 	bl	6200 <__locale_mb_cur_max>
    a110:	42a8      	cmp	r0, r5
    a112:	f43f ad0b 	beq.w	9b2c <__ssvfscanf_r+0x1d8>
    a116:	e9db 3200 	ldrd	r3, r2, [fp]
    a11a:	f813 1b01 	ldrb.w	r1, [r3], #1
    a11e:	3a01      	subs	r2, #1
    a120:	f507 70b8 	add.w	r0, r7, #368	; 0x170
    a124:	e9cb 3200 	strd	r3, r2, [fp]
    a128:	2e03      	cmp	r6, #3
    a12a:	f105 0301 	add.w	r3, r5, #1
    a12e:	5541      	strb	r1, [r0, r5]
    a130:	64bb      	str	r3, [r7, #72]	; 0x48
    a132:	f107 0460 	add.w	r4, r7, #96	; 0x60
    a136:	d102      	bne.n	a13e <__ssvfscanf_r+0x7ea>
    a138:	6823      	ldr	r3, [r4, #0]
    a13a:	2b04      	cmp	r3, #4
    a13c:	d004      	beq.n	a148 <__ssvfscanf_r+0x7f4>
    a13e:	2208      	movs	r2, #8
    a140:	2100      	movs	r1, #0
    a142:	4620      	mov	r0, r4
    a144:	f7fb ff2c 	bl	5fa0 <memset>
    a148:	f507 72b8 	add.w	r2, r7, #368	; 0x170
    a14c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a14e:	9400      	str	r4, [sp, #0]
    a150:	4641      	mov	r1, r8
    a152:	4648      	mov	r0, r9
    a154:	f002 fc08 	bl	c968 <_mbrtowc_r>
    a158:	1c42      	adds	r2, r0, #1
    a15a:	4606      	mov	r6, r0
    a15c:	f43f ace6 	beq.w	9b2c <__ssvfscanf_r+0x1d8>
    a160:	2800      	cmp	r0, #0
    a162:	f040 82ca 	bne.w	a6fa <__ssvfscanf_r+0xda6>
    a166:	f8c8 0000 	str.w	r0, [r8]
    a16a:	4605      	mov	r5, r0
    a16c:	f107 0368 	add.w	r3, r7, #104	; 0x68
    a170:	2208      	movs	r2, #8
    a172:	2100      	movs	r1, #0
    a174:	4618      	mov	r0, r3
    a176:	637b      	str	r3, [r7, #52]	; 0x34
    a178:	f7fb ff12 	bl	5fa0 <memset>
    a17c:	4950      	ldr	r1, [pc, #320]	; (a2c0 <__ssvfscanf_r+0x96c>)
    a17e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a180:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    a184:	462a      	mov	r2, r5
    a186:	4648      	mov	r0, r9
    a188:	460d      	mov	r5, r1
    a18a:	f107 0150 	add.w	r1, r7, #80	; 0x50
    a18e:	47a8      	blx	r5
    a190:	2801      	cmp	r0, #1
    a192:	f000 83d5 	beq.w	a940 <__ssvfscanf_r+0xfec>
    a196:	2200      	movs	r2, #0
    a198:	f107 0370 	add.w	r3, r7, #112	; 0x70
    a19c:	5c9b      	ldrb	r3, [r3, r2]
    a19e:	2b00      	cmp	r3, #0
    a1a0:	f000 85a1 	beq.w	ace6 <__ssvfscanf_r+0x1392>
    a1a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a1a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
    a1a8:	2e03      	cmp	r6, #3
    a1aa:	4413      	add	r3, r2
    a1ac:	63fb      	str	r3, [r7, #60]	; 0x3c
    a1ae:	f000 83ca 	beq.w	a946 <__ssvfscanf_r+0xff2>
    a1b2:	f10a 3aff 	add.w	sl, sl, #4294967295
    a1b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a1b8:	b95b      	cbnz	r3, a1d2 <__ssvfscanf_r+0x87e>
    a1ba:	6a3b      	ldr	r3, [r7, #32]
    a1bc:	f108 0804 	add.w	r8, r8, #4
    a1c0:	b13b      	cbz	r3, a1d2 <__ssvfscanf_r+0x87e>
    a1c2:	69fb      	ldr	r3, [r7, #28]
    a1c4:	eba8 0403 	sub.w	r4, r8, r3
    a1c8:	69bb      	ldr	r3, [r7, #24]
    a1ca:	ebb3 0fa4 	cmp.w	r3, r4, asr #2
    a1ce:	f240 8405 	bls.w	a9dc <__ssvfscanf_r+0x1088>
    a1d2:	f8db 3004 	ldr.w	r3, [fp, #4]
    a1d6:	2b00      	cmp	r3, #0
    a1d8:	f04f 0500 	mov.w	r5, #0
    a1dc:	f340 8296 	ble.w	a70c <__ssvfscanf_r+0xdb8>
    a1e0:	f1ba 0f00 	cmp.w	sl, #0
    a1e4:	d192      	bne.n	a10c <__ssvfscanf_r+0x7b8>
    a1e6:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
    a1ea:	627e      	str	r6, [r7, #36]	; 0x24
    a1ec:	4644      	mov	r4, r8
    a1ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a1f0:	2b00      	cmp	r3, #0
    a1f2:	f47f abd6 	bne.w	99a2 <__ssvfscanf_r+0x4e>
    a1f6:	6023      	str	r3, [r4, #0]
    a1f8:	6a3b      	ldr	r3, [r7, #32]
    a1fa:	2b00      	cmp	r3, #0
    a1fc:	f000 81c2 	beq.w	a584 <__ssvfscanf_r+0xc30>
    a200:	69fb      	ldr	r3, [r7, #28]
    a202:	69ba      	ldr	r2, [r7, #24]
    a204:	1ae1      	subs	r1, r4, r3
    a206:	108b      	asrs	r3, r1, #2
    a208:	3301      	adds	r3, #1
    a20a:	429a      	cmp	r2, r3
    a20c:	f240 81ba 	bls.w	a584 <__ssvfscanf_r+0xc30>
    a210:	6a3c      	ldr	r4, [r7, #32]
    a212:	3104      	adds	r1, #4
    a214:	6820      	ldr	r0, [r4, #0]
    a216:	f7fa fa5f 	bl	46d8 <realloc>
    a21a:	2800      	cmp	r0, #0
    a21c:	f000 81b2 	beq.w	a584 <__ssvfscanf_r+0xc30>
    a220:	6020      	str	r0, [r4, #0]
    a222:	e1af      	b.n	a584 <__ssvfscanf_r+0xc30>
    a224:	0521      	lsls	r1, r4, #20
    a226:	f57f adb3 	bpl.w	9d90 <__ssvfscanf_r+0x43c>
    a22a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a22c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    a22e:	185b      	adds	r3, r3, r1
    a230:	f47f adae 	bne.w	9d90 <__ssvfscanf_r+0x43c>
    a234:	64bb      	str	r3, [r7, #72]	; 0x48
    a236:	f424 74c0 	bic.w	r4, r4, #384	; 0x180
    a23a:	63fb      	str	r3, [r7, #60]	; 0x3c
    a23c:	e593      	b.n	9d66 <__ssvfscanf_r+0x412>
    a23e:	4b21      	ldr	r3, [pc, #132]	; (a2c4 <__ssvfscanf_r+0x970>)
    a240:	f424 6438 	bic.w	r4, r4, #2944	; 0xb80
    a244:	f933 6016 	ldrsh.w	r6, [r3, r6, lsl #1]
    a248:	e66b      	b.n	9f22 <__ssvfscanf_r+0x5ce>
    a24a:	f404 6318 	and.w	r3, r4, #2432	; 0x980
    a24e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    a252:	f47f ad9d 	bne.w	9d90 <__ssvfscanf_r+0x43c>
    a256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a258:	2b01      	cmp	r3, #1
    a25a:	f47f ad99 	bne.w	9d90 <__ssvfscanf_r+0x43c>
    a25e:	2330      	movs	r3, #48	; 0x30
    a260:	f805 3b01 	strb.w	r3, [r5], #1
    a264:	f424 7480 	bic.w	r4, r4, #256	; 0x100
    a268:	2300      	movs	r3, #0
    a26a:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
    a26e:	3e01      	subs	r6, #1
    a270:	637b      	str	r3, [r7, #52]	; 0x34
    a272:	e578      	b.n	9d66 <__ssvfscanf_r+0x412>
    a274:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a276:	2b06      	cmp	r3, #6
    a278:	f040 8574 	bne.w	ad64 <__ssvfscanf_r+0x1410>
    a27c:	2307      	movs	r3, #7
    a27e:	64bb      	str	r3, [r7, #72]	; 0x48
    a280:	e571      	b.n	9d66 <__ssvfscanf_r+0x412>
    a282:	0523      	lsls	r3, r4, #20
    a284:	f57f ad84 	bpl.w	9d90 <__ssvfscanf_r+0x43c>
    a288:	f404 63a0 	and.w	r3, r4, #1280	; 0x500
    a28c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    a290:	d005      	beq.n	a29e <__ssvfscanf_r+0x94a>
    a292:	0561      	lsls	r1, r4, #21
    a294:	f57f ad7c 	bpl.w	9d90 <__ssvfscanf_r+0x43c>
    a298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a29a:	2b00      	cmp	r3, #0
    a29c:	d047      	beq.n	a32e <__ssvfscanf_r+0x9da>
    a29e:	05a3      	lsls	r3, r4, #22
    a2a0:	d404      	bmi.n	a2ac <__ssvfscanf_r+0x958>
    a2a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a2a4:	69f9      	ldr	r1, [r7, #28]
    a2a6:	1a5b      	subs	r3, r3, r1
    a2a8:	e9c7 5305 	strd	r5, r3, [r7, #20]
    a2ac:	f424 6478 	bic.w	r4, r4, #3968	; 0xf80
    a2b0:	2300      	movs	r3, #0
    a2b2:	f444 74c0 	orr.w	r4, r4, #384	; 0x180
    a2b6:	637b      	str	r3, [r7, #52]	; 0x34
    a2b8:	e555      	b.n	9d66 <__ssvfscanf_r+0x412>
    a2ba:	bf00      	nop
    a2bc:	2000075d 	.word	0x2000075d
    a2c0:	20007c38 	.word	0x20007c38
    a2c4:	2000238c 	.word	0x2000238c
    a2c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a2ca:	2b00      	cmp	r3, #0
    a2cc:	f000 81ff 	beq.w	a6ce <__ssvfscanf_r+0xd7a>
    a2d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a2d2:	2b02      	cmp	r3, #2
    a2d4:	f000 83b0 	beq.w	aa38 <__ssvfscanf_r+0x10e4>
    a2d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a2da:	2b01      	cmp	r3, #1
    a2dc:	f000 81f1 	beq.w	a6c2 <__ssvfscanf_r+0xd6e>
    a2e0:	2b04      	cmp	r3, #4
    a2e2:	f000 81ee 	beq.w	a6c2 <__ssvfscanf_r+0xd6e>
    a2e6:	e553      	b.n	9d90 <__ssvfscanf_r+0x43c>
    a2e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a2ea:	2b07      	cmp	r3, #7
    a2ec:	f040 853a 	bne.w	ad64 <__ssvfscanf_r+0x1410>
    a2f0:	2308      	movs	r3, #8
    a2f2:	64bb      	str	r3, [r7, #72]	; 0x48
    a2f4:	e537      	b.n	9d66 <__ssvfscanf_r+0x412>
    a2f6:	0520      	lsls	r0, r4, #20
    a2f8:	f100 81f9 	bmi.w	a6ee <__ssvfscanf_r+0xd9a>
    a2fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a2fe:	2b01      	cmp	r3, #1
    a300:	f47f ad46 	bne.w	9d90 <__ssvfscanf_r+0x43c>
    a304:	2302      	movs	r3, #2
    a306:	63fb      	str	r3, [r7, #60]	; 0x3c
    a308:	e52d      	b.n	9d66 <__ssvfscanf_r+0x412>
    a30a:	0623      	lsls	r3, r4, #24
    a30c:	f57f ad40 	bpl.w	9d90 <__ssvfscanf_r+0x43c>
    a310:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    a314:	e527      	b.n	9d66 <__ssvfscanf_r+0x412>
    a316:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a318:	2b00      	cmp	r3, #0
    a31a:	f040 81cc 	bne.w	a6b6 <__ssvfscanf_r+0xd62>
    a31e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a320:	b9b3      	cbnz	r3, a350 <__ssvfscanf_r+0x9fc>
    a322:	f404 63e0 	and.w	r3, r4, #1792	; 0x700
    a326:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
    a32a:	f000 8520 	beq.w	ad6e <__ssvfscanf_r+0x141a>
    a32e:	6cbe      	ldr	r6, [r7, #72]	; 0x48
    a330:	ee18 9a10 	vmov	r9, s16
    a334:	e533      	b.n	9d9e <__ssvfscanf_r+0x44a>
    a336:	0521      	lsls	r1, r4, #20
    a338:	f100 81b7 	bmi.w	a6aa <__ssvfscanf_r+0xd56>
    a33c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a33e:	2b02      	cmp	r3, #2
    a340:	f040 8510 	bne.w	ad64 <__ssvfscanf_r+0x1410>
    a344:	2303      	movs	r3, #3
    a346:	64bb      	str	r3, [r7, #72]	; 0x48
    a348:	e50d      	b.n	9d66 <__ssvfscanf_r+0x412>
    a34a:	0520      	lsls	r0, r4, #20
    a34c:	d59c      	bpl.n	a288 <__ssvfscanf_r+0x934>
    a34e:	e76c      	b.n	a22a <__ssvfscanf_r+0x8d6>
    a350:	6cbe      	ldr	r6, [r7, #72]	; 0x48
    a352:	ee18 9a10 	vmov	r9, s16
    a356:	f424 7480 	bic.w	r4, r4, #256	; 0x100
    a35a:	e520      	b.n	9d9e <__ssvfscanf_r+0x44a>
    a35c:	4b8d      	ldr	r3, [pc, #564]	; (a594 <__ssvfscanf_r+0xc40>)
    a35e:	f933 6016 	ldrsh.w	r6, [r3, r6, lsl #1]
    a362:	2e08      	cmp	r6, #8
    a364:	f73f addb 	bgt.w	9f1e <__ssvfscanf_r+0x5ca>
    a368:	e5e8      	b.n	9f3c <__ssvfscanf_r+0x5e8>
    a36a:	f404 63c0 	and.w	r3, r4, #1536	; 0x600
    a36e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    a372:	f47f ade3 	bne.w	9f3c <__ssvfscanf_r+0x5e8>
    a376:	f424 7400 	bic.w	r4, r4, #512	; 0x200
    a37a:	f444 64a0 	orr.w	r4, r4, #1280	; 0x500
    a37e:	2610      	movs	r6, #16
    a380:	e5cf      	b.n	9f22 <__ssvfscanf_r+0x5ce>
    a382:	0623      	lsls	r3, r4, #24
    a384:	f57f adda 	bpl.w	9f3c <__ssvfscanf_r+0x5e8>
    a388:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    a38c:	e5c9      	b.n	9f22 <__ssvfscanf_r+0x5ce>
    a38e:	f044 0401 	orr.w	r4, r4, #1
    a392:	f8db 3004 	ldr.w	r3, [fp, #4]
    a396:	64f9      	str	r1, [r7, #76]	; 0x4c
    a398:	2b00      	cmp	r3, #0
    a39a:	f044 0440 	orr.w	r4, r4, #64	; 0x40
    a39e:	f04f 0500 	mov.w	r5, #0
    a3a2:	f73f abf8 	bgt.w	9b96 <__ssvfscanf_r+0x242>
    a3a6:	4659      	mov	r1, fp
    a3a8:	4648      	mov	r0, r9
    a3aa:	f002 fcf1 	bl	cd90 <__ssrefill_r>
    a3ae:	2800      	cmp	r0, #0
    a3b0:	f47f abbc 	bne.w	9b2c <__ssvfscanf_r+0x1d8>
    a3b4:	0660      	lsls	r0, r4, #25
    a3b6:	f53f abf1 	bmi.w	9b9c <__ssvfscanf_r+0x248>
    a3ba:	f8db 2000 	ldr.w	r2, [fp]
    a3be:	4e76      	ldr	r6, [pc, #472]	; (a598 <__ssvfscanf_r+0xc44>)
    a3c0:	7813      	ldrb	r3, [r2, #0]
    a3c2:	5cf3      	ldrb	r3, [r6, r3]
    a3c4:	0719      	lsls	r1, r3, #28
    a3c6:	f57f abe9 	bpl.w	9b9c <__ssvfscanf_r+0x248>
    a3ca:	f8db 3004 	ldr.w	r3, [fp, #4]
    a3ce:	3b01      	subs	r3, #1
    a3d0:	2b00      	cmp	r3, #0
    a3d2:	f10a 0a01 	add.w	sl, sl, #1
    a3d6:	f8cb 3004 	str.w	r3, [fp, #4]
    a3da:	f102 0201 	add.w	r2, r2, #1
    a3de:	dd4a      	ble.n	a476 <__ssvfscanf_r+0xb22>
    a3e0:	f8cb 2000 	str.w	r2, [fp]
    a3e4:	7813      	ldrb	r3, [r2, #0]
    a3e6:	5cf3      	ldrb	r3, [r6, r3]
    a3e8:	0719      	lsls	r1, r3, #28
    a3ea:	f57f abd7 	bpl.w	9b9c <__ssvfscanf_r+0x248>
    a3ee:	e7ec      	b.n	a3ca <__ssvfscanf_r+0xa76>
    a3f0:	f044 0401 	orr.w	r4, r4, #1
    a3f4:	4b69      	ldr	r3, [pc, #420]	; (a59c <__ssvfscanf_r+0xc48>)
    a3f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    a3f8:	2308      	movs	r3, #8
    a3fa:	64f9      	str	r1, [r7, #76]	; 0x4c
    a3fc:	63bb      	str	r3, [r7, #56]	; 0x38
    a3fe:	2503      	movs	r5, #3
    a400:	f7ff bbc4 	b.w	9b8c <__ssvfscanf_r+0x238>
    a404:	f044 0401 	orr.w	r4, r4, #1
    a408:	4b65      	ldr	r3, [pc, #404]	; (a5a0 <__ssvfscanf_r+0xc4c>)
    a40a:	62fb      	str	r3, [r7, #44]	; 0x2c
    a40c:	230a      	movs	r3, #10
    a40e:	64f9      	str	r1, [r7, #76]	; 0x4c
    a410:	63bb      	str	r3, [r7, #56]	; 0x38
    a412:	2503      	movs	r5, #3
    a414:	f7ff bbba 	b.w	9b8c <__ssvfscanf_r+0x238>
    a418:	0523      	lsls	r3, r4, #20
    a41a:	f57f ad82 	bpl.w	9f22 <__ssvfscanf_r+0x5ce>
    a41e:	b916      	cbnz	r6, a426 <__ssvfscanf_r+0xad2>
    a420:	f444 7400 	orr.w	r4, r4, #512	; 0x200
    a424:	2608      	movs	r6, #8
    a426:	0563      	lsls	r3, r4, #21
    a428:	f100 81a6 	bmi.w	a778 <__ssvfscanf_r+0xe24>
    a42c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a42e:	f424 7460 	bic.w	r4, r4, #896	; 0x380
    a432:	b11b      	cbz	r3, a43c <__ssvfscanf_r+0xae8>
    a434:	3b01      	subs	r3, #1
    a436:	63fb      	str	r3, [r7, #60]	; 0x3c
    a438:	f108 0801 	add.w	r8, r8, #1
    a43c:	684b      	ldr	r3, [r1, #4]
    a43e:	3b01      	subs	r3, #1
    a440:	2b00      	cmp	r3, #0
    a442:	f10a 0a01 	add.w	sl, sl, #1
    a446:	604b      	str	r3, [r1, #4]
    a448:	f73f ad73 	bgt.w	9f32 <__ssvfscanf_r+0x5de>
    a44c:	4648      	mov	r0, r9
    a44e:	64b9      	str	r1, [r7, #72]	; 0x48
    a450:	f002 fc9e 	bl	cd90 <__ssrefill_r>
    a454:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    a456:	2800      	cmp	r0, #0
    a458:	f43f ad6d 	beq.w	9f36 <__ssvfscanf_r+0x5e2>
    a45c:	e56e      	b.n	9f3c <__ssvfscanf_r+0x5e8>
    a45e:	ee18 0a10 	vmov	r0, s16
    a462:	4659      	mov	r1, fp
    a464:	f002 fc94 	bl	cd90 <__ssrefill_r>
    a468:	2800      	cmp	r0, #0
    a46a:	f47f ac91 	bne.w	9d90 <__ssvfscanf_r+0x43c>
    a46e:	2e00      	cmp	r6, #0
    a470:	f47f abc4 	bne.w	9bfc <__ssvfscanf_r+0x2a8>
    a474:	e48c      	b.n	9d90 <__ssvfscanf_r+0x43c>
    a476:	4659      	mov	r1, fp
    a478:	4648      	mov	r0, r9
    a47a:	f002 fc89 	bl	cd90 <__ssrefill_r>
    a47e:	2800      	cmp	r0, #0
    a480:	f47f ab54 	bne.w	9b2c <__ssvfscanf_r+0x1d8>
    a484:	f8db 2000 	ldr.w	r2, [fp]
    a488:	e79a      	b.n	a3c0 <__ssvfscanf_r+0xa6c>
    a48a:	f8db 2004 	ldr.w	r2, [fp, #4]
    a48e:	e00f      	b.n	a4b0 <__ssvfscanf_r+0xb5c>
    a490:	f8db 3000 	ldr.w	r3, [fp]
    a494:	781a      	ldrb	r2, [r3, #0]
    a496:	5cb2      	ldrb	r2, [r6, r2]
    a498:	0711      	lsls	r1, r2, #28
    a49a:	f103 0301 	add.w	r3, r3, #1
    a49e:	f57f aa80 	bpl.w	99a2 <__ssvfscanf_r+0x4e>
    a4a2:	f8db 2004 	ldr.w	r2, [fp, #4]
    a4a6:	3a01      	subs	r2, #1
    a4a8:	e9cb 3200 	strd	r3, r2, [fp]
    a4ac:	f10a 0a01 	add.w	sl, sl, #1
    a4b0:	2a00      	cmp	r2, #0
    a4b2:	dced      	bgt.n	a490 <__ssvfscanf_r+0xb3c>
    a4b4:	4659      	mov	r1, fp
    a4b6:	4648      	mov	r0, r9
    a4b8:	f002 fc6a 	bl	cd90 <__ssrefill_r>
    a4bc:	2800      	cmp	r0, #0
    a4be:	d0e7      	beq.n	a490 <__ssvfscanf_r+0xb3c>
    a4c0:	f7ff ba6f 	b.w	99a2 <__ssvfscanf_r+0x4e>
    a4c4:	06e1      	lsls	r1, r4, #27
    a4c6:	f100 8349 	bmi.w	ab5c <__ssvfscanf_r+0x1208>
    a4ca:	f014 0480 	ands.w	r4, r4, #128	; 0x80
    a4ce:	f000 83ab 	beq.w	ac28 <__ssvfscanf_r+0x12d4>
    a4d2:	6b3c      	ldr	r4, [r7, #48]	; 0x30
    a4d4:	f854 6b04 	ldr.w	r6, [r4], #4
    a4d8:	64be      	str	r6, [r7, #72]	; 0x48
    a4da:	2e00      	cmp	r6, #0
    a4dc:	f43f ab2f 	beq.w	9b3e <__ssvfscanf_r+0x1ea>
    a4e0:	2020      	movs	r0, #32
    a4e2:	f7f9 fe2d 	bl	4140 <malloc>
    a4e6:	4605      	mov	r5, r0
    a4e8:	2800      	cmp	r0, #0
    a4ea:	f000 8462 	beq.w	adb2 <__ssvfscanf_r+0x145e>
    a4ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    a4f0:	6030      	str	r0, [r6, #0]
    a4f2:	8893      	ldrh	r3, [r2, #4]
    a4f4:	88d6      	ldrh	r6, [r2, #6]
    a4f6:	429e      	cmp	r6, r3
    a4f8:	f080 82a8 	bcs.w	aa4c <__ssvfscanf_r+0x10f8>
    a4fc:	6810      	ldr	r0, [r2, #0]
    a4fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a500:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
    a504:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    a506:	633c      	str	r4, [r7, #48]	; 0x30
    a508:	3601      	adds	r6, #1
    a50a:	80de      	strh	r6, [r3, #6]
    a50c:	2320      	movs	r3, #32
    a50e:	63fb      	str	r3, [r7, #60]	; 0x3c
    a510:	f8db 2000 	ldr.w	r2, [fp]
    a514:	4e20      	ldr	r6, [pc, #128]	; (a598 <__ssvfscanf_r+0xc44>)
    a516:	7811      	ldrb	r1, [r2, #0]
    a518:	5c71      	ldrb	r1, [r6, r1]
    a51a:	0708      	lsls	r0, r1, #28
    a51c:	f100 82ac 	bmi.w	aa78 <__ssvfscanf_r+0x1124>
    a520:	4633      	mov	r3, r6
    a522:	462c      	mov	r4, r5
    a524:	4610      	mov	r0, r2
    a526:	462e      	mov	r6, r5
    a528:	f8db 1004 	ldr.w	r1, [fp, #4]
    a52c:	6cba      	ldr	r2, [r7, #72]	; 0x48
    a52e:	3901      	subs	r1, #1
    a530:	f8cb 1004 	str.w	r1, [fp, #4]
    a534:	1c41      	adds	r1, r0, #1
    a536:	f8cb 1000 	str.w	r1, [fp]
    a53a:	4635      	mov	r5, r6
    a53c:	7801      	ldrb	r1, [r0, #0]
    a53e:	f805 1b01 	strb.w	r1, [r5], #1
    a542:	b122      	cbz	r2, a54e <__ssvfscanf_r+0xbfa>
    a544:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    a546:	1b2e      	subs	r6, r5, r4
    a548:	4296      	cmp	r6, r2
    a54a:	f080 837a 	bcs.w	ac42 <__ssvfscanf_r+0x12ee>
    a54e:	f1b8 0801 	subs.w	r8, r8, #1
    a552:	d00b      	beq.n	a56c <__ssvfscanf_r+0xc18>
    a554:	f8db 1004 	ldr.w	r1, [fp, #4]
    a558:	2900      	cmp	r1, #0
    a55a:	462e      	mov	r6, r5
    a55c:	f340 83ae 	ble.w	acbc <__ssvfscanf_r+0x1368>
    a560:	f8db 0000 	ldr.w	r0, [fp]
    a564:	7801      	ldrb	r1, [r0, #0]
    a566:	5c59      	ldrb	r1, [r3, r1]
    a568:	0709      	lsls	r1, r1, #28
    a56a:	d5dd      	bpl.n	a528 <__ssvfscanf_r+0xbd4>
    a56c:	1b29      	subs	r1, r5, r4
    a56e:	448a      	add	sl, r1
    a570:	3101      	adds	r1, #1
    a572:	f04f 0300 	mov.w	r3, #0
    a576:	702b      	strb	r3, [r5, #0]
    a578:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a57a:	b11b      	cbz	r3, a584 <__ssvfscanf_r+0xc30>
    a57c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a57e:	428b      	cmp	r3, r1
    a580:	f200 8394 	bhi.w	acac <__ssvfscanf_r+0x1358>
    a584:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    a586:	3301      	adds	r3, #1
    a588:	647b      	str	r3, [r7, #68]	; 0x44
    a58a:	f7ff ba0a 	b.w	99a2 <__ssvfscanf_r+0x4e>
    a58e:	2300      	movs	r3, #0
    a590:	63fb      	str	r3, [r7, #60]	; 0x3c
    a592:	e461      	b.n	9e58 <__ssvfscanf_r+0x504>
    a594:	2000238c 	.word	0x2000238c
    a598:	2000075d 	.word	0x2000075d
    a59c:	0000c655 	.word	0x0000c655
    a5a0:	00005a89 	.word	0x00005a89
    a5a4:	06e6      	lsls	r6, r4, #27
    a5a6:	f100 8181 	bmi.w	a8ac <__ssvfscanf_r+0xf58>
    a5aa:	f014 0480 	ands.w	r4, r4, #128	; 0x80
    a5ae:	f000 836d 	beq.w	ac8c <__ssvfscanf_r+0x1338>
    a5b2:	6b3c      	ldr	r4, [r7, #48]	; 0x30
    a5b4:	f854 6b04 	ldr.w	r6, [r4], #4
    a5b8:	64be      	str	r6, [r7, #72]	; 0x48
    a5ba:	2e00      	cmp	r6, #0
    a5bc:	f43f aabf 	beq.w	9b3e <__ssvfscanf_r+0x1ea>
    a5c0:	2020      	movs	r0, #32
    a5c2:	f7f9 fdbd 	bl	4140 <malloc>
    a5c6:	4605      	mov	r5, r0
    a5c8:	2800      	cmp	r0, #0
    a5ca:	f000 83f2 	beq.w	adb2 <__ssvfscanf_r+0x145e>
    a5ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    a5d0:	6030      	str	r0, [r6, #0]
    a5d2:	8893      	ldrh	r3, [r2, #4]
    a5d4:	88d6      	ldrh	r6, [r2, #6]
    a5d6:	429e      	cmp	r6, r3
    a5d8:	f080 827a 	bcs.w	aad0 <__ssvfscanf_r+0x117c>
    a5dc:	6810      	ldr	r0, [r2, #0]
    a5de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a5e0:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
    a5e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    a5e6:	633c      	str	r4, [r7, #48]	; 0x30
    a5e8:	3601      	adds	r6, #1
    a5ea:	80de      	strh	r6, [r3, #6]
    a5ec:	2420      	movs	r4, #32
    a5ee:	f8db 2000 	ldr.w	r2, [fp]
    a5f2:	f107 0370 	add.w	r3, r7, #112	; 0x70
    a5f6:	4619      	mov	r1, r3
    a5f8:	7813      	ldrb	r3, [r2, #0]
    a5fa:	5ccb      	ldrb	r3, [r1, r3]
    a5fc:	2b00      	cmp	r3, #0
    a5fe:	f43f aa9e 	beq.w	9b3e <__ssvfscanf_r+0x1ea>
    a602:	ee08 9a10 	vmov	s16, r9
    a606:	f8d7 9048 	ldr.w	r9, [r7, #72]	; 0x48
    a60a:	f8c7 a03c 	str.w	sl, [r7, #60]	; 0x3c
    a60e:	462e      	mov	r6, r5
    a610:	46a2      	mov	sl, r4
    a612:	4610      	mov	r0, r2
    a614:	460c      	mov	r4, r1
    a616:	f8db 1004 	ldr.w	r1, [fp, #4]
    a61a:	1c43      	adds	r3, r0, #1
    a61c:	3901      	subs	r1, #1
    a61e:	e9cb 3100 	strd	r3, r1, [fp]
    a622:	4629      	mov	r1, r5
    a624:	7800      	ldrb	r0, [r0, #0]
    a626:	f801 0b01 	strb.w	r0, [r1], #1
    a62a:	f1b9 0f00 	cmp.w	r9, #0
    a62e:	d002      	beq.n	a636 <__ssvfscanf_r+0xce2>
    a630:	1b8d      	subs	r5, r1, r6
    a632:	4555      	cmp	r5, sl
    a634:	d27a      	bcs.n	a72c <__ssvfscanf_r+0xdd8>
    a636:	460d      	mov	r5, r1
    a638:	f1b8 0801 	subs.w	r8, r8, #1
    a63c:	d00a      	beq.n	a654 <__ssvfscanf_r+0xd00>
    a63e:	f8db 1004 	ldr.w	r1, [fp, #4]
    a642:	2900      	cmp	r1, #0
    a644:	f340 816a 	ble.w	a91c <__ssvfscanf_r+0xfc8>
    a648:	f8db 0000 	ldr.w	r0, [fp]
    a64c:	7801      	ldrb	r1, [r0, #0]
    a64e:	5c61      	ldrb	r1, [r4, r1]
    a650:	2900      	cmp	r1, #0
    a652:	d1e0      	bne.n	a616 <__ssvfscanf_r+0xcc2>
    a654:	4654      	mov	r4, sl
    a656:	ee18 9a10 	vmov	r9, s16
    a65a:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
    a65e:	1bae      	subs	r6, r5, r6
    a660:	f43f aa6d 	beq.w	9b3e <__ssvfscanf_r+0x1ea>
    a664:	f04f 0300 	mov.w	r3, #0
    a668:	702b      	strb	r3, [r5, #0]
    a66a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a66c:	b11b      	cbz	r3, a676 <__ssvfscanf_r+0xd22>
    a66e:	1c71      	adds	r1, r6, #1
    a670:	428c      	cmp	r4, r1
    a672:	f200 832d 	bhi.w	acd0 <__ssvfscanf_r+0x137c>
    a676:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    a678:	3301      	adds	r3, #1
    a67a:	44b2      	add	sl, r6
    a67c:	647b      	str	r3, [r7, #68]	; 0x44
    a67e:	f7ff b990 	b.w	99a2 <__ssvfscanf_r+0x4e>
    a682:	2300      	movs	r3, #0
    a684:	613b      	str	r3, [r7, #16]
    a686:	f7ff baa9 	b.w	9bdc <__ssvfscanf_r+0x288>
    a68a:	f014 0f8f 	tst.w	r4, #143	; 0x8f
    a68e:	f47f aa56 	bne.w	9b3e <__ssvfscanf_r+0x1ea>
    a692:	eb08 0888 	add.w	r8, r8, r8, lsl #2
    a696:	eb02 0848 	add.w	r8, r2, r8, lsl #1
    a69a:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
    a69e:	f7ff ba67 	b.w	9b70 <__ssvfscanf_r+0x21c>
    a6a2:	64f9      	str	r1, [r7, #76]	; 0x4c
    a6a4:	2504      	movs	r5, #4
    a6a6:	f7ff ba71 	b.w	9b8c <__ssvfscanf_r+0x238>
    a6aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a6ac:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    a6ae:	185b      	adds	r3, r3, r1
    a6b0:	f47f ae44 	bne.w	a33c <__ssvfscanf_r+0x9e8>
    a6b4:	e5be      	b.n	a234 <__ssvfscanf_r+0x8e0>
    a6b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a6b8:	2b03      	cmp	r3, #3
    a6ba:	d002      	beq.n	a6c2 <__ssvfscanf_r+0xd6e>
    a6bc:	2b05      	cmp	r3, #5
    a6be:	f47f ab67 	bne.w	9d90 <__ssvfscanf_r+0x43c>
    a6c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a6c4:	3301      	adds	r3, #1
    a6c6:	b2db      	uxtb	r3, r3
    a6c8:	64bb      	str	r3, [r7, #72]	; 0x48
    a6ca:	f7ff bb4c 	b.w	9d66 <__ssvfscanf_r+0x412>
    a6ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a6d0:	2b00      	cmp	r3, #0
    a6d2:	f47f ae01 	bne.w	a2d8 <__ssvfscanf_r+0x984>
    a6d6:	f404 63e0 	and.w	r3, r4, #1792	; 0x700
    a6da:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
    a6de:	f47f adfb 	bne.w	a2d8 <__ssvfscanf_r+0x984>
    a6e2:	2301      	movs	r3, #1
    a6e4:	f424 64f0 	bic.w	r4, r4, #1920	; 0x780
    a6e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    a6ea:	f7ff bb3c 	b.w	9d66 <__ssvfscanf_r+0x412>
    a6ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a6f0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    a6f2:	185b      	adds	r3, r3, r1
    a6f4:	f47f ae02 	bne.w	a2fc <__ssvfscanf_r+0x9a8>
    a6f8:	e59c      	b.n	a234 <__ssvfscanf_r+0x8e0>
    a6fa:	1c83      	adds	r3, r0, #2
    a6fc:	f040 845b 	bne.w	afb6 <__ssvfscanf_r+0x1662>
    a700:	f8db 3004 	ldr.w	r3, [fp, #4]
    a704:	6cbd      	ldr	r5, [r7, #72]	; 0x48
    a706:	2b00      	cmp	r3, #0
    a708:	f73f ad00 	bgt.w	a10c <__ssvfscanf_r+0x7b8>
    a70c:	4659      	mov	r1, fp
    a70e:	4648      	mov	r0, r9
    a710:	f002 fb3e 	bl	cd90 <__ssrefill_r>
    a714:	2800      	cmp	r0, #0
    a716:	f43f ad63 	beq.w	a1e0 <__ssvfscanf_r+0x88c>
    a71a:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
    a71e:	627e      	str	r6, [r7, #36]	; 0x24
    a720:	4644      	mov	r4, r8
    a722:	2d00      	cmp	r5, #0
    a724:	f43f ad63 	beq.w	a1ee <__ssvfscanf_r+0x89a>
    a728:	f7ff ba00 	b.w	9b2c <__ssvfscanf_r+0x1d8>
    a72c:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
    a730:	4630      	mov	r0, r6
    a732:	4651      	mov	r1, sl
    a734:	f7f9 ffd0 	bl	46d8 <realloc>
    a738:	4606      	mov	r6, r0
    a73a:	2800      	cmp	r0, #0
    a73c:	f000 8339 	beq.w	adb2 <__ssvfscanf_r+0x145e>
    a740:	4405      	add	r5, r0
    a742:	f8c9 0000 	str.w	r0, [r9]
    a746:	e777      	b.n	a638 <__ssvfscanf_r+0xce4>
    a748:	f444 7400 	orr.w	r4, r4, #512	; 0x200
    a74c:	4bbc      	ldr	r3, [pc, #752]	; (aa40 <__ssvfscanf_r+0x10ec>)
    a74e:	62fb      	str	r3, [r7, #44]	; 0x2c
    a750:	2310      	movs	r3, #16
    a752:	64f9      	str	r1, [r7, #76]	; 0x4c
    a754:	63bb      	str	r3, [r7, #56]	; 0x38
    a756:	2503      	movs	r5, #3
    a758:	f7ff ba18 	b.w	9b8c <__ssvfscanf_r+0x238>
    a75c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a75e:	3301      	adds	r3, #1
    a760:	637b      	str	r3, [r7, #52]	; 0x34
    a762:	693b      	ldr	r3, [r7, #16]
    a764:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    a768:	2b00      	cmp	r3, #0
    a76a:	f43f aafe 	beq.w	9d6a <__ssvfscanf_r+0x416>
    a76e:	693b      	ldr	r3, [r7, #16]
    a770:	3b01      	subs	r3, #1
    a772:	613b      	str	r3, [r7, #16]
    a774:	f7ff bafa 	b.w	9d6c <__ssvfscanf_r+0x418>
    a778:	f424 64b0 	bic.w	r4, r4, #1408	; 0x580
    a77c:	f7ff bbd1 	b.w	9f22 <__ssvfscanf_r+0x5ce>
    a780:	0722      	lsls	r2, r4, #28
    a782:	f140 81c7 	bpl.w	ab14 <__ssvfscanf_r+0x11c0>
    a786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    a788:	f853 2b04 	ldr.w	r2, [r3], #4
    a78c:	633b      	str	r3, [r7, #48]	; 0x30
    a78e:	7010      	strb	r0, [r2, #0]
    a790:	f7ff bbf3 	b.w	9f7a <__ssvfscanf_r+0x626>
    a794:	f815 1c01 	ldrb.w	r1, [r5, #-1]
    a798:	465a      	mov	r2, fp
    a79a:	4648      	mov	r0, r9
    a79c:	3d01      	subs	r5, #1
    a79e:	f002 fab7 	bl	cd10 <_sungetc_r>
    a7a2:	f7ff bbd5 	b.w	9f50 <__ssvfscanf_r+0x5fc>
    a7a6:	69fb      	ldr	r3, [r7, #28]
    a7a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    a7aa:	4293      	cmp	r3, r2
    a7ac:	f43f ab2d 	beq.w	9e0a <__ssvfscanf_r+0x4b6>
    a7b0:	1a9a      	subs	r2, r3, r2
    a7b2:	f207 23c3 	addw	r3, r7, #707	; 0x2c3
    a7b6:	429d      	cmp	r5, r3
    a7b8:	bf28      	it	cs
    a7ba:	f207 25c2 	addwcs	r5, r7, #706	; 0x2c2
    a7be:	49a1      	ldr	r1, [pc, #644]	; (aa44 <__ssvfscanf_r+0x10f0>)
    a7c0:	4628      	mov	r0, r5
    a7c2:	f000 fe59 	bl	b478 <sprintf>
    a7c6:	f7ff bb20 	b.w	9e0a <__ssvfscanf_r+0x4b6>
    a7ca:	06e2      	lsls	r2, r4, #27
    a7cc:	f100 8131 	bmi.w	aa32 <__ssvfscanf_r+0x10de>
    a7d0:	0723      	lsls	r3, r4, #28
    a7d2:	f100 81ba 	bmi.w	ab4a <__ssvfscanf_r+0x11f6>
    a7d6:	0766      	lsls	r6, r4, #29
    a7d8:	f140 82b4 	bpl.w	ad44 <__ssvfscanf_r+0x13f0>
    a7dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    a7de:	64f9      	str	r1, [r7, #76]	; 0x4c
    a7e0:	f853 2b04 	ldr.w	r2, [r3], #4
    a7e4:	633b      	str	r3, [r7, #48]	; 0x30
    a7e6:	f8a2 a000 	strh.w	sl, [r2]
    a7ea:	f7ff b8da 	b.w	99a2 <__ssvfscanf_r+0x4e>
    a7ee:	0723      	lsls	r3, r4, #28
    a7f0:	f47f a9a5 	bne.w	9b3e <__ssvfscanf_r+0x1ea>
    a7f4:	7842      	ldrb	r2, [r0, #1]
    a7f6:	2a68      	cmp	r2, #104	; 0x68
    a7f8:	f000 8186 	beq.w	ab08 <__ssvfscanf_r+0x11b4>
    a7fc:	f044 0404 	orr.w	r4, r4, #4
    a800:	4608      	mov	r0, r1
    a802:	f7ff b92f 	b.w	9a64 <__ssvfscanf_r+0x110>
    a806:	4b8e      	ldr	r3, [pc, #568]	; (aa40 <__ssvfscanf_r+0x10ec>)
    a808:	62fb      	str	r3, [r7, #44]	; 0x2c
    a80a:	230a      	movs	r3, #10
    a80c:	64f9      	str	r1, [r7, #76]	; 0x4c
    a80e:	63bb      	str	r3, [r7, #56]	; 0x38
    a810:	2503      	movs	r5, #3
    a812:	f7ff b9bb 	b.w	9b8c <__ssvfscanf_r+0x238>
    a816:	4b8c      	ldr	r3, [pc, #560]	; (aa48 <__ssvfscanf_r+0x10f4>)
    a818:	62fb      	str	r3, [r7, #44]	; 0x2c
    a81a:	2300      	movs	r3, #0
    a81c:	64f9      	str	r1, [r7, #76]	; 0x4c
    a81e:	63bb      	str	r3, [r7, #56]	; 0x38
    a820:	2503      	movs	r5, #3
    a822:	f7ff b9b3 	b.w	9b8c <__ssvfscanf_r+0x238>
    a826:	f444 7408 	orr.w	r4, r4, #544	; 0x220
    a82a:	e78f      	b.n	a74c <__ssvfscanf_r+0xdf8>
    a82c:	f107 0070 	add.w	r0, r7, #112	; 0x70
    a830:	f000 fdde 	bl	b3f0 <__sccl>
    a834:	f044 0440 	orr.w	r4, r4, #64	; 0x40
    a838:	64f8      	str	r0, [r7, #76]	; 0x4c
    a83a:	2501      	movs	r5, #1
    a83c:	f7ff b9a6 	b.w	9b8c <__ssvfscanf_r+0x238>
    a840:	0722      	lsls	r2, r4, #28
    a842:	f47f a97c 	bne.w	9b3e <__ssvfscanf_r+0x1ea>
    a846:	7842      	ldrb	r2, [r0, #1]
    a848:	2a6c      	cmp	r2, #108	; 0x6c
    a84a:	f000 8157 	beq.w	aafc <__ssvfscanf_r+0x11a8>
    a84e:	f044 0401 	orr.w	r4, r4, #1
    a852:	4608      	mov	r0, r1
    a854:	f7ff b906 	b.w	9a64 <__ssvfscanf_r+0x110>
    a858:	f014 038f 	ands.w	r3, r4, #143	; 0x8f
    a85c:	f47f a96f 	bne.w	9b3e <__ssvfscanf_r+0x1ea>
    a860:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    a862:	2a00      	cmp	r2, #0
    a864:	f000 81e7 	beq.w	ac36 <__ssvfscanf_r+0x12e2>
    a868:	7842      	ldrb	r2, [r0, #1]
    a86a:	f044 0480 	orr.w	r4, r4, #128	; 0x80
    a86e:	4608      	mov	r0, r1
    a870:	f7ff b8f8 	b.w	9a64 <__ssvfscanf_r+0x110>
    a874:	ea58 0804 	orrs.w	r8, r8, r4
    a878:	f47f a961 	bne.w	9b3e <__ssvfscanf_r+0x1ea>
    a87c:	7842      	ldrb	r2, [r0, #1]
    a87e:	2410      	movs	r4, #16
    a880:	4608      	mov	r0, r1
    a882:	f7ff b8ef 	b.w	9a64 <__ssvfscanf_r+0x110>
    a886:	64f9      	str	r1, [r7, #76]	; 0x4c
    a888:	f7ff b8a7 	b.w	99da <__ssvfscanf_r+0x86>
    a88c:	2300      	movs	r3, #0
    a88e:	623b      	str	r3, [r7, #32]
    a890:	62bb      	str	r3, [r7, #40]	; 0x28
    a892:	63fb      	str	r3, [r7, #60]	; 0x3c
    a894:	f107 0354 	add.w	r3, r7, #84	; 0x54
    a898:	64bb      	str	r3, [r7, #72]	; 0x48
    a89a:	f7ff bba9 	b.w	9ff0 <__ssvfscanf_r+0x69c>
    a89e:	2300      	movs	r3, #0
    a8a0:	e9c7 3306 	strd	r3, r3, [r7, #24]
    a8a4:	623b      	str	r3, [r7, #32]
    a8a6:	f107 0454 	add.w	r4, r7, #84	; 0x54
    a8aa:	e429      	b.n	a100 <__ssvfscanf_r+0x7ac>
    a8ac:	f8db 3000 	ldr.w	r3, [fp]
    a8b0:	f107 0270 	add.w	r2, r7, #112	; 0x70
    a8b4:	4611      	mov	r1, r2
    a8b6:	781a      	ldrb	r2, [r3, #0]
    a8b8:	5c8a      	ldrb	r2, [r1, r2]
    a8ba:	2a00      	cmp	r2, #0
    a8bc:	f43f a93f 	beq.w	9b3e <__ssvfscanf_r+0x1ea>
    a8c0:	3301      	adds	r3, #1
    a8c2:	f8cb 3000 	str.w	r3, [fp]
    a8c6:	f8db 3004 	ldr.w	r3, [fp, #4]
    a8ca:	f1b8 0f01 	cmp.w	r8, #1
    a8ce:	f103 33ff 	add.w	r3, r3, #4294967295
    a8d2:	f8cb 3004 	str.w	r3, [fp, #4]
    a8d6:	bf18      	it	ne
    a8d8:	460c      	movne	r4, r1
    a8da:	d114      	bne.n	a906 <__ssvfscanf_r+0xfb2>
    a8dc:	f7ff bb53 	b.w	9f86 <__ssvfscanf_r+0x632>
    a8e0:	f8db 3000 	ldr.w	r3, [fp]
    a8e4:	781a      	ldrb	r2, [r3, #0]
    a8e6:	5ca2      	ldrb	r2, [r4, r2]
    a8e8:	3301      	adds	r3, #1
    a8ea:	2a00      	cmp	r2, #0
    a8ec:	f43f ab4b 	beq.w	9f86 <__ssvfscanf_r+0x632>
    a8f0:	f8cb 3000 	str.w	r3, [fp]
    a8f4:	f8db 3004 	ldr.w	r3, [fp, #4]
    a8f8:	3501      	adds	r5, #1
    a8fa:	3b01      	subs	r3, #1
    a8fc:	4545      	cmp	r5, r8
    a8fe:	f8cb 3004 	str.w	r3, [fp, #4]
    a902:	f43f ab40 	beq.w	9f86 <__ssvfscanf_r+0x632>
    a906:	2b00      	cmp	r3, #0
    a908:	dcea      	bgt.n	a8e0 <__ssvfscanf_r+0xf8c>
    a90a:	4659      	mov	r1, fp
    a90c:	4648      	mov	r0, r9
    a90e:	f002 fa3f 	bl	cd90 <__ssrefill_r>
    a912:	2800      	cmp	r0, #0
    a914:	d0e4      	beq.n	a8e0 <__ssvfscanf_r+0xf8c>
    a916:	44aa      	add	sl, r5
    a918:	f7ff b843 	b.w	99a2 <__ssvfscanf_r+0x4e>
    a91c:	ee18 0a10 	vmov	r0, s16
    a920:	4659      	mov	r1, fp
    a922:	f002 fa35 	bl	cd90 <__ssrefill_r>
    a926:	2800      	cmp	r0, #0
    a928:	f43f ae8e 	beq.w	a648 <__ssvfscanf_r+0xcf4>
    a92c:	42b5      	cmp	r5, r6
    a92e:	4654      	mov	r4, sl
    a930:	ee18 9a10 	vmov	r9, s16
    a934:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
    a938:	f47f ae91 	bne.w	a65e <__ssvfscanf_r+0xd0a>
    a93c:	f7ff b8f6 	b.w	9b2c <__ssvfscanf_r+0x1d8>
    a940:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
    a944:	e428      	b.n	a198 <__ssvfscanf_r+0x844>
    a946:	6823      	ldr	r3, [r4, #0]
    a948:	2b04      	cmp	r3, #4
    a94a:	f47f ac32 	bne.w	a1b2 <__ssvfscanf_r+0x85e>
    a94e:	e432      	b.n	a1b6 <__ssvfscanf_r+0x862>
    a950:	1c83      	adds	r3, r0, #2
    a952:	f040 8339 	bne.w	afc8 <__ssvfscanf_r+0x1674>
    a956:	f8db 3004 	ldr.w	r3, [fp, #4]
    a95a:	2b00      	cmp	r3, #0
    a95c:	f340 81d7 	ble.w	ad0e <__ssvfscanf_r+0x13ba>
    a960:	f8db 3000 	ldr.w	r3, [fp]
    a964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    a966:	781b      	ldrb	r3, [r3, #0]
    a968:	5cd3      	ldrb	r3, [r2, r3]
    a96a:	0718      	lsls	r0, r3, #28
    a96c:	d403      	bmi.n	a976 <__ssvfscanf_r+0x1022>
    a96e:	f1b8 0f00 	cmp.w	r8, #0
    a972:	f47f ab49 	bne.w	a008 <__ssvfscanf_r+0x6b4>
    a976:	627c      	str	r4, [r7, #36]	; 0x24
    a978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a97a:	2b00      	cmp	r3, #0
    a97c:	f47f a811 	bne.w	99a2 <__ssvfscanf_r+0x4e>
    a980:	6cba      	ldr	r2, [r7, #72]	; 0x48
    a982:	6013      	str	r3, [r2, #0]
    a984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a986:	2b00      	cmp	r3, #0
    a988:	f43f adfc 	beq.w	a584 <__ssvfscanf_r+0xc30>
    a98c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a98e:	1ad1      	subs	r1, r2, r3
    a990:	108b      	asrs	r3, r1, #2
    a992:	6a3a      	ldr	r2, [r7, #32]
    a994:	3301      	adds	r3, #1
    a996:	429a      	cmp	r2, r3
    a998:	f67f adf4 	bls.w	a584 <__ssvfscanf_r+0xc30>
    a99c:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
    a99e:	3104      	adds	r1, #4
    a9a0:	6820      	ldr	r0, [r4, #0]
    a9a2:	f7f9 fe99 	bl	46d8 <realloc>
    a9a6:	2800      	cmp	r0, #0
    a9a8:	f47f ac3a 	bne.w	a220 <__ssvfscanf_r+0x8cc>
    a9ac:	e5ea      	b.n	a584 <__ssvfscanf_r+0xc30>
    a9ae:	f853 2b04 	ldr.w	r2, [r3], #4
    a9b2:	ed82 0b00 	vstr	d0, [r2]
    a9b6:	633b      	str	r3, [r7, #48]	; 0x30
    a9b8:	e5e4      	b.n	a584 <__ssvfscanf_r+0xc30>
    a9ba:	68fd      	ldr	r5, [r7, #12]
    a9bc:	6a39      	ldr	r1, [r7, #32]
    a9be:	687e      	ldr	r6, [r7, #4]
    a9c0:	4628      	mov	r0, r5
    a9c2:	4642      	mov	r2, r8
    a9c4:	46a3      	mov	fp, r4
    a9c6:	68bc      	ldr	r4, [r7, #8]
    a9c8:	f000 fd76 	bl	b4b8 <stpncpy>
    a9cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a9ce:	61fb      	str	r3, [r7, #28]
    a9d0:	f424 7420 	bic.w	r4, r4, #640	; 0x280
    a9d4:	3e01      	subs	r6, #1
    a9d6:	4605      	mov	r5, r0
    a9d8:	f7ff b9c8 	b.w	9d6c <__ssvfscanf_r+0x418>
    a9dc:	69f8      	ldr	r0, [r7, #28]
    a9de:	00d9      	lsls	r1, r3, #3
    a9e0:	461d      	mov	r5, r3
    a9e2:	f7f9 fe79 	bl	46d8 <realloc>
    a9e6:	61f8      	str	r0, [r7, #28]
    a9e8:	2800      	cmp	r0, #0
    a9ea:	f000 8264 	beq.w	aeb6 <__ssvfscanf_r+0x1562>
    a9ee:	6a3a      	ldr	r2, [r7, #32]
    a9f0:	006b      	lsls	r3, r5, #1
    a9f2:	eb00 0804 	add.w	r8, r0, r4
    a9f6:	6010      	str	r0, [r2, #0]
    a9f8:	61bb      	str	r3, [r7, #24]
    a9fa:	f7ff bbea 	b.w	a1d2 <__ssvfscanf_r+0x87e>
    a9fe:	2e02      	cmp	r6, #2
    aa00:	f240 82c4 	bls.w	af8c <__ssvfscanf_r+0x1638>
    aa04:	2e03      	cmp	r6, #3
    aa06:	f43f a9d3 	beq.w	9db0 <__ssvfscanf_r+0x45c>
    aa0a:	3e04      	subs	r6, #4
    aa0c:	fa5f f886 	uxtb.w	r8, r6
    aa10:	ea6f 0308 	mvn.w	r3, r8
    aa14:	18ee      	adds	r6, r5, r3
    aa16:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
    aa1a:	465a      	mov	r2, fp
    aa1c:	4648      	mov	r0, r9
    aa1e:	f002 f977 	bl	cd10 <_sungetc_r>
    aa22:	42ae      	cmp	r6, r5
    aa24:	d1f7      	bne.n	aa16 <__ssvfscanf_r+0x10c2>
    aa26:	f10a 3aff 	add.w	sl, sl, #4294967295
    aa2a:	ebaa 0a08 	sub.w	sl, sl, r8
    aa2e:	f7ff b9bf 	b.w	9db0 <__ssvfscanf_r+0x45c>
    aa32:	64f9      	str	r1, [r7, #76]	; 0x4c
    aa34:	f7fe bfb5 	b.w	99a2 <__ssvfscanf_r+0x4e>
    aa38:	2303      	movs	r3, #3
    aa3a:	63fb      	str	r3, [r7, #60]	; 0x3c
    aa3c:	f7ff b993 	b.w	9d66 <__ssvfscanf_r+0x412>
    aa40:	0000c655 	.word	0x0000c655
    aa44:	20000754 	.word	0x20000754
    aa48:	00005a89 	.word	0x00005a89
    aa4c:	f64f 72f6 	movw	r2, #65526	; 0xfff6
    aa50:	4293      	cmp	r3, r2
    aa52:	f200 8297 	bhi.w	af84 <__ssvfscanf_r+0x1630>
    aa56:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    aa58:	3308      	adds	r3, #8
    aa5a:	b29b      	uxth	r3, r3
    aa5c:	6810      	ldr	r0, [r2, #0]
    aa5e:	63f8      	str	r0, [r7, #60]	; 0x3c
    aa60:	0099      	lsls	r1, r3, #2
    aa62:	637b      	str	r3, [r7, #52]	; 0x34
    aa64:	f7f9 fe38 	bl	46d8 <realloc>
    aa68:	2800      	cmp	r0, #0
    aa6a:	f000 827b 	beq.w	af64 <__ssvfscanf_r+0x1610>
    aa6e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    aa70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    aa72:	8093      	strh	r3, [r2, #4]
    aa74:	6010      	str	r0, [r2, #0]
    aa76:	e542      	b.n	a4fe <__ssvfscanf_r+0xbaa>
    aa78:	2101      	movs	r1, #1
    aa7a:	e57a      	b.n	a572 <__ssvfscanf_r+0xc1e>
    aa7c:	f64f 72f6 	movw	r2, #65526	; 0xfff6
    aa80:	4293      	cmp	r3, r2
    aa82:	f200 8293 	bhi.w	afac <__ssvfscanf_r+0x1658>
    aa86:	3308      	adds	r3, #8
    aa88:	b29e      	uxth	r6, r3
    aa8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    aa8c:	00b1      	lsls	r1, r6, #2
    aa8e:	6818      	ldr	r0, [r3, #0]
    aa90:	f7f9 fe22 	bl	46d8 <realloc>
    aa94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    aa96:	2800      	cmp	r0, #0
    aa98:	f000 823e 	beq.w	af18 <__ssvfscanf_r+0x15c4>
    aa9c:	809e      	strh	r6, [r3, #4]
    aa9e:	6018      	str	r0, [r3, #0]
    aaa0:	f7ff ba9b 	b.w	9fda <__ssvfscanf_r+0x686>
    aaa4:	f64f 72f6 	movw	r2, #65526	; 0xfff6
    aaa8:	4293      	cmp	r3, r2
    aaaa:	f200 827f 	bhi.w	afac <__ssvfscanf_r+0x1658>
    aaae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    aab0:	3308      	adds	r3, #8
    aab2:	b29b      	uxth	r3, r3
    aab4:	0099      	lsls	r1, r3, #2
    aab6:	6810      	ldr	r0, [r2, #0]
    aab8:	64bb      	str	r3, [r7, #72]	; 0x48
    aaba:	f7f9 fe0d 	bl	46d8 <realloc>
    aabe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    aac0:	2800      	cmp	r0, #0
    aac2:	f000 8228 	beq.w	af16 <__ssvfscanf_r+0x15c2>
    aac6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    aac8:	8093      	strh	r3, [r2, #4]
    aaca:	6010      	str	r0, [r2, #0]
    aacc:	f7ff bb0e 	b.w	a0ec <__ssvfscanf_r+0x798>
    aad0:	f64f 72f6 	movw	r2, #65526	; 0xfff6
    aad4:	4293      	cmp	r3, r2
    aad6:	f200 8255 	bhi.w	af84 <__ssvfscanf_r+0x1630>
    aada:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    aadc:	3308      	adds	r3, #8
    aade:	b29b      	uxth	r3, r3
    aae0:	6810      	ldr	r0, [r2, #0]
    aae2:	63f8      	str	r0, [r7, #60]	; 0x3c
    aae4:	0099      	lsls	r1, r3, #2
    aae6:	637b      	str	r3, [r7, #52]	; 0x34
    aae8:	f7f9 fdf6 	bl	46d8 <realloc>
    aaec:	2800      	cmp	r0, #0
    aaee:	f000 8239 	beq.w	af64 <__ssvfscanf_r+0x1610>
    aaf2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    aaf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    aaf6:	8093      	strh	r3, [r2, #4]
    aaf8:	6010      	str	r0, [r2, #0]
    aafa:	e570      	b.n	a5de <__ssvfscanf_r+0xc8a>
    aafc:	7882      	ldrb	r2, [r0, #2]
    aafe:	f044 0402 	orr.w	r4, r4, #2
    ab02:	3002      	adds	r0, #2
    ab04:	f7fe bfae 	b.w	9a64 <__ssvfscanf_r+0x110>
    ab08:	7882      	ldrb	r2, [r0, #2]
    ab0a:	f044 0408 	orr.w	r4, r4, #8
    ab0e:	3002      	adds	r0, #2
    ab10:	f7fe bfa8 	b.w	9a64 <__ssvfscanf_r+0x110>
    ab14:	0763      	lsls	r3, r4, #29
    ab16:	d458      	bmi.n	abca <__ssvfscanf_r+0x1276>
    ab18:	f014 0201 	ands.w	r2, r4, #1
    ab1c:	f47f aa28 	bne.w	9f70 <__ssvfscanf_r+0x61c>
    ab20:	07a6      	lsls	r6, r4, #30
    ab22:	f57f aa25 	bpl.w	9f70 <__ssvfscanf_r+0x61c>
    ab26:	4bb3      	ldr	r3, [pc, #716]	; (adf4 <__ssvfscanf_r+0x14a0>)
    ab28:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    ab2a:	4299      	cmp	r1, r3
    ab2c:	4648      	mov	r0, r9
    ab2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ab30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    ab32:	f000 823d 	beq.w	afb0 <__ssvfscanf_r+0x165c>
    ab36:	f001 fe45 	bl	c7c4 <_strtoll_r>
    ab3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ab3c:	f853 2b04 	ldr.w	r2, [r3], #4
    ab40:	633b      	str	r3, [r7, #48]	; 0x30
    ab42:	e9c2 0100 	strd	r0, r1, [r2]
    ab46:	f7ff ba18 	b.w	9f7a <__ssvfscanf_r+0x626>
    ab4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ab4c:	64f9      	str	r1, [r7, #76]	; 0x4c
    ab4e:	f853 2b04 	ldr.w	r2, [r3], #4
    ab52:	633b      	str	r3, [r7, #48]	; 0x30
    ab54:	f882 a000 	strb.w	sl, [r2]
    ab58:	f7fe bf23 	b.w	99a2 <__ssvfscanf_r+0x4e>
    ab5c:	f8db 3000 	ldr.w	r3, [fp]
    ab60:	4ea5      	ldr	r6, [pc, #660]	; (adf8 <__ssvfscanf_r+0x14a4>)
    ab62:	781a      	ldrb	r2, [r3, #0]
    ab64:	5cb2      	ldrb	r2, [r6, r2]
    ab66:	0712      	lsls	r2, r2, #28
    ab68:	f53e af1b 	bmi.w	99a2 <__ssvfscanf_r+0x4e>
    ab6c:	3301      	adds	r3, #1
    ab6e:	f8cb 3000 	str.w	r3, [fp]
    ab72:	f8db 3004 	ldr.w	r3, [fp, #4]
    ab76:	f1b8 0f01 	cmp.w	r8, #1
    ab7a:	f103 33ff 	add.w	r3, r3, #4294967295
    ab7e:	f8cb 3004 	str.w	r3, [fp, #4]
    ab82:	bf08      	it	eq
    ab84:	f10a 0a01 	addeq.w	sl, sl, #1
    ab88:	f43e af0b 	beq.w	99a2 <__ssvfscanf_r+0x4e>
    ab8c:	2401      	movs	r4, #1
    ab8e:	e011      	b.n	abb4 <__ssvfscanf_r+0x1260>
    ab90:	f8db 3000 	ldr.w	r3, [fp]
    ab94:	781a      	ldrb	r2, [r3, #0]
    ab96:	5cb2      	ldrb	r2, [r6, r2]
    ab98:	0715      	lsls	r5, r2, #28
    ab9a:	f103 0301 	add.w	r3, r3, #1
    ab9e:	d411      	bmi.n	abc4 <__ssvfscanf_r+0x1270>
    aba0:	f8cb 3000 	str.w	r3, [fp]
    aba4:	f8db 3004 	ldr.w	r3, [fp, #4]
    aba8:	3401      	adds	r4, #1
    abaa:	3b01      	subs	r3, #1
    abac:	4544      	cmp	r4, r8
    abae:	f8cb 3004 	str.w	r3, [fp, #4]
    abb2:	d007      	beq.n	abc4 <__ssvfscanf_r+0x1270>
    abb4:	2b00      	cmp	r3, #0
    abb6:	dceb      	bgt.n	ab90 <__ssvfscanf_r+0x123c>
    abb8:	4659      	mov	r1, fp
    abba:	4648      	mov	r0, r9
    abbc:	f002 f8e8 	bl	cd90 <__ssrefill_r>
    abc0:	2800      	cmp	r0, #0
    abc2:	d0e5      	beq.n	ab90 <__ssvfscanf_r+0x123c>
    abc4:	44a2      	add	sl, r4
    abc6:	f7fe beec 	b.w	99a2 <__ssvfscanf_r+0x4e>
    abca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    abcc:	f853 2b04 	ldr.w	r2, [r3], #4
    abd0:	633b      	str	r3, [r7, #48]	; 0x30
    abd2:	8010      	strh	r0, [r2, #0]
    abd4:	f7ff b9d1 	b.w	9f7a <__ssvfscanf_r+0x626>
    abd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    abda:	2b00      	cmp	r3, #0
    abdc:	f000 816e 	beq.w	aebc <__ssvfscanf_r+0x1568>
    abe0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    abe2:	f8d3 8000 	ldr.w	r8, [r3]
    abe6:	88de      	ldrh	r6, [r3, #6]
    abe8:	b176      	cbz	r6, ac08 <__ssvfscanf_r+0x12b4>
    abea:	2400      	movs	r4, #0
    abec:	f1a8 0504 	sub.w	r5, r8, #4
    abf0:	46a1      	mov	r9, r4
    abf2:	f855 3f04 	ldr.w	r3, [r5, #4]!
    abf6:	6818      	ldr	r0, [r3, #0]
    abf8:	f7f9 faaa 	bl	4150 <free>
    abfc:	3401      	adds	r4, #1
    abfe:	682b      	ldr	r3, [r5, #0]
    ac00:	42a6      	cmp	r6, r4
    ac02:	f8c3 9000 	str.w	r9, [r3]
    ac06:	d1f4      	bne.n	abf2 <__ssvfscanf_r+0x129e>
    ac08:	f04f 33ff 	mov.w	r3, #4294967295
    ac0c:	647b      	str	r3, [r7, #68]	; 0x44
    ac0e:	f1b8 0f00 	cmp.w	r8, #0
    ac12:	f47e af9c 	bne.w	9b4e <__ssvfscanf_r+0x1fa>
    ac16:	f7fe bf9d 	b.w	9b54 <__ssvfscanf_r+0x200>
    ac1a:	4878      	ldr	r0, [pc, #480]	; (adfc <__ssvfscanf_r+0x14a8>)
    ac1c:	633b      	str	r3, [r7, #48]	; 0x30
    ac1e:	f7fb fde7 	bl	67f0 <nanf>
    ac22:	ed84 0a00 	vstr	s0, [r4]
    ac26:	e4ad      	b.n	a584 <__ssvfscanf_r+0xc30>
    ac28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    ac2a:	63fc      	str	r4, [r7, #60]	; 0x3c
    ac2c:	f852 5b04 	ldr.w	r5, [r2], #4
    ac30:	633a      	str	r2, [r7, #48]	; 0x30
    ac32:	64bc      	str	r4, [r7, #72]	; 0x48
    ac34:	e46c      	b.n	a510 <__ssvfscanf_r+0xbbc>
    ac36:	b082      	sub	sp, #8
    ac38:	e9cd 3302 	strd	r3, r3, [sp, #8]
    ac3c:	ab02      	add	r3, sp, #8
    ac3e:	643b      	str	r3, [r7, #64]	; 0x40
    ac40:	e612      	b.n	a868 <__ssvfscanf_r+0xf14>
    ac42:	637b      	str	r3, [r7, #52]	; 0x34
    ac44:	0053      	lsls	r3, r2, #1
    ac46:	4620      	mov	r0, r4
    ac48:	4619      	mov	r1, r3
    ac4a:	63fb      	str	r3, [r7, #60]	; 0x3c
    ac4c:	f7f9 fd44 	bl	46d8 <realloc>
    ac50:	4604      	mov	r4, r0
    ac52:	2800      	cmp	r0, #0
    ac54:	f000 80ad 	beq.w	adb2 <__ssvfscanf_r+0x145e>
    ac58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    ac5a:	1985      	adds	r5, r0, r6
    ac5c:	6018      	str	r0, [r3, #0]
    ac5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ac60:	e475      	b.n	a54e <__ssvfscanf_r+0xbfa>
    ac62:	697d      	ldr	r5, [r7, #20]
    ac64:	4629      	mov	r1, r5
    ac66:	230a      	movs	r3, #10
    ac68:	3101      	adds	r1, #1
    ac6a:	4648      	mov	r0, r9
    ac6c:	f7fa ff0c 	bl	5a88 <_strtol_r>
    ac70:	69bb      	ldr	r3, [r7, #24]
    ac72:	1ac2      	subs	r2, r0, r3
    ac74:	e59d      	b.n	a7b2 <__ssvfscanf_r+0xe5e>
    ac76:	e9d7 320c 	ldrd	r3, r2, [r7, #48]	; 0x30
    ac7a:	f853 1b04 	ldr.w	r1, [r3], #4
    ac7e:	623a      	str	r2, [r7, #32]
    ac80:	64b9      	str	r1, [r7, #72]	; 0x48
    ac82:	633b      	str	r3, [r7, #48]	; 0x30
    ac84:	62ba      	str	r2, [r7, #40]	; 0x28
    ac86:	63fa      	str	r2, [r7, #60]	; 0x3c
    ac88:	f7ff b9b2 	b.w	9ff0 <__ssvfscanf_r+0x69c>
    ac8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ac8e:	64bc      	str	r4, [r7, #72]	; 0x48
    ac90:	f853 5b04 	ldr.w	r5, [r3], #4
    ac94:	633b      	str	r3, [r7, #48]	; 0x30
    ac96:	e4aa      	b.n	a5ee <__ssvfscanf_r+0xc9a>
    ac98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ac9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    ac9c:	f853 4b04 	ldr.w	r4, [r3], #4
    aca0:	61ba      	str	r2, [r7, #24]
    aca2:	e9c7 2207 	strd	r2, r2, [r7, #28]
    aca6:	633b      	str	r3, [r7, #48]	; 0x30
    aca8:	f7ff ba2a 	b.w	a100 <__ssvfscanf_r+0x7ac>
    acac:	6cbc      	ldr	r4, [r7, #72]	; 0x48
    acae:	6820      	ldr	r0, [r4, #0]
    acb0:	f7f9 fd12 	bl	46d8 <realloc>
    acb4:	2800      	cmp	r0, #0
    acb6:	f47f aab3 	bne.w	a220 <__ssvfscanf_r+0x8cc>
    acba:	e463      	b.n	a584 <__ssvfscanf_r+0xc30>
    acbc:	4659      	mov	r1, fp
    acbe:	4648      	mov	r0, r9
    acc0:	637b      	str	r3, [r7, #52]	; 0x34
    acc2:	f002 f865 	bl	cd90 <__ssrefill_r>
    acc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    acc8:	2800      	cmp	r0, #0
    acca:	f43f ac49 	beq.w	a560 <__ssvfscanf_r+0xc0c>
    acce:	e44d      	b.n	a56c <__ssvfscanf_r+0xc18>
    acd0:	6818      	ldr	r0, [r3, #0]
    acd2:	461c      	mov	r4, r3
    acd4:	f7f9 fd00 	bl	46d8 <realloc>
    acd8:	2800      	cmp	r0, #0
    acda:	f43f accc 	beq.w	a676 <__ssvfscanf_r+0xd22>
    acde:	6020      	str	r0, [r4, #0]
    ace0:	e4c9      	b.n	a676 <__ssvfscanf_r+0xd22>
    ace2:	2500      	movs	r5, #0
    ace4:	e637      	b.n	a956 <__ssvfscanf_r+0x1002>
    ace6:	6cbd      	ldr	r5, [r7, #72]	; 0x48
    ace8:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
    acec:	627e      	str	r6, [r7, #36]	; 0x24
    acee:	4644      	mov	r4, r8
    acf0:	2d00      	cmp	r5, #0
    acf2:	f43f aa7c 	beq.w	a1ee <__ssvfscanf_r+0x89a>
    acf6:	3d01      	subs	r5, #1
    acf8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
    acfc:	465a      	mov	r2, fp
    acfe:	5d59      	ldrb	r1, [r3, r5]
    ad00:	4648      	mov	r0, r9
    ad02:	f002 f805 	bl	cd10 <_sungetc_r>
    ad06:	2d00      	cmp	r5, #0
    ad08:	d1f5      	bne.n	acf6 <__ssvfscanf_r+0x13a2>
    ad0a:	f7ff ba70 	b.w	a1ee <__ssvfscanf_r+0x89a>
    ad0e:	4659      	mov	r1, fp
    ad10:	4648      	mov	r0, r9
    ad12:	f002 f83d 	bl	cd90 <__ssrefill_r>
    ad16:	2800      	cmp	r0, #0
    ad18:	f43f ae22 	beq.w	a960 <__ssvfscanf_r+0x100c>
    ad1c:	627c      	str	r4, [r7, #36]	; 0x24
    ad1e:	2d00      	cmp	r5, #0
    ad20:	f47e af04 	bne.w	9b2c <__ssvfscanf_r+0x1d8>
    ad24:	e628      	b.n	a978 <__ssvfscanf_r+0x1024>
    ad26:	627c      	str	r4, [r7, #36]	; 0x24
    ad28:	2d00      	cmp	r5, #0
    ad2a:	f43f ae25 	beq.w	a978 <__ssvfscanf_r+0x1024>
    ad2e:	3d01      	subs	r5, #1
    ad30:	f507 73b8 	add.w	r3, r7, #368	; 0x170
    ad34:	465a      	mov	r2, fp
    ad36:	5d59      	ldrb	r1, [r3, r5]
    ad38:	4648      	mov	r0, r9
    ad3a:	f001 ffe9 	bl	cd10 <_sungetc_r>
    ad3e:	2d00      	cmp	r5, #0
    ad40:	d1f5      	bne.n	ad2e <__ssvfscanf_r+0x13da>
    ad42:	e619      	b.n	a978 <__ssvfscanf_r+0x1024>
    ad44:	07e5      	lsls	r5, r4, #31
    ad46:	d43c      	bmi.n	adc2 <__ssvfscanf_r+0x146e>
    ad48:	07a4      	lsls	r4, r4, #30
    ad4a:	d53a      	bpl.n	adc2 <__ssvfscanf_r+0x146e>
    ad4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ad4e:	64f9      	str	r1, [r7, #76]	; 0x4c
    ad50:	f853 2b04 	ldr.w	r2, [r3], #4
    ad54:	633b      	str	r3, [r7, #48]	; 0x30
    ad56:	ea4f 73ea 	mov.w	r3, sl, asr #31
    ad5a:	f8c2 a000 	str.w	sl, [r2]
    ad5e:	6053      	str	r3, [r2, #4]
    ad60:	f7fe be1f 	b.w	99a2 <__ssvfscanf_r+0x4e>
    ad64:	ee18 9a10 	vmov	r9, s16
    ad68:	461e      	mov	r6, r3
    ad6a:	f7ff b814 	b.w	9d96 <__ssvfscanf_r+0x442>
    ad6e:	2301      	movs	r3, #1
    ad70:	f424 64f0 	bic.w	r4, r4, #1920	; 0x780
    ad74:	64bb      	str	r3, [r7, #72]	; 0x48
    ad76:	f7fe bff6 	b.w	9d66 <__ssvfscanf_r+0x412>
    ad7a:	f1b8 0f01 	cmp.w	r8, #1
    ad7e:	bf38      	it	cc
    ad80:	f04f 0801 	movcc.w	r8, #1
    ad84:	f014 0301 	ands.w	r3, r4, #1
    ad88:	d13a      	bne.n	ae00 <__ssvfscanf_r+0x14ac>
    ad8a:	06e5      	lsls	r5, r4, #27
    ad8c:	f100 8136 	bmi.w	affc <__ssvfscanf_r+0x16a8>
    ad90:	0624      	lsls	r4, r4, #24
    ad92:	f140 814c 	bpl.w	b02e <__ssvfscanf_r+0x16da>
    ad96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ad98:	f853 5b04 	ldr.w	r5, [r3], #4
    ad9c:	64bb      	str	r3, [r7, #72]	; 0x48
    ad9e:	2d00      	cmp	r5, #0
    ada0:	f43e aecd 	beq.w	9b3e <__ssvfscanf_r+0x1ea>
    ada4:	4640      	mov	r0, r8
    ada6:	f7f9 f9cb 	bl	4140 <malloc>
    adaa:	4603      	mov	r3, r0
    adac:	2800      	cmp	r0, #0
    adae:	f040 80dc 	bne.w	af6a <__ssvfscanf_r+0x1616>
    adb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    adb4:	2b00      	cmp	r3, #0
    adb6:	f000 8081 	beq.w	aebc <__ssvfscanf_r+0x1568>
    adba:	f8d3 8000 	ldr.w	r8, [r3]
    adbe:	88de      	ldrh	r6, [r3, #6]
    adc0:	e712      	b.n	abe8 <__ssvfscanf_r+0x1294>
    adc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    adc4:	64f9      	str	r1, [r7, #76]	; 0x4c
    adc6:	f853 2b04 	ldr.w	r2, [r3], #4
    adca:	f8c2 a000 	str.w	sl, [r2]
    adce:	633b      	str	r3, [r7, #48]	; 0x30
    add0:	f7fe bde7 	b.w	99a2 <__ssvfscanf_r+0x4e>
    add4:	462b      	mov	r3, r5
    add6:	6abd      	ldr	r5, [r7, #40]	; 0x28
    add8:	42ab      	cmp	r3, r5
    adda:	f67e aeb0 	bls.w	9b3e <__ssvfscanf_r+0x1ea>
    adde:	461c      	mov	r4, r3
    ade0:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
    ade4:	465a      	mov	r2, fp
    ade6:	4648      	mov	r0, r9
    ade8:	f001 ff92 	bl	cd10 <_sungetc_r>
    adec:	42ac      	cmp	r4, r5
    adee:	d1f7      	bne.n	ade0 <__ssvfscanf_r+0x148c>
    adf0:	f7fe bea5 	b.w	9b3e <__ssvfscanf_r+0x1ea>
    adf4:	0000c655 	.word	0x0000c655
    adf8:	2000075d 	.word	0x2000075d
    adfc:	20007784 	.word	0x20007784
    ae00:	f014 0310 	ands.w	r3, r4, #16
    ae04:	637b      	str	r3, [r7, #52]	; 0x34
    ae06:	d05e      	beq.n	aec6 <__ssvfscanf_r+0x1572>
    ae08:	2500      	movs	r5, #0
    ae0a:	63fd      	str	r5, [r7, #60]	; 0x3c
    ae0c:	64bd      	str	r5, [r7, #72]	; 0x48
    ae0e:	462e      	mov	r6, r5
    ae10:	2400      	movs	r4, #0
    ae12:	464b      	mov	r3, r9
    ae14:	46c1      	mov	r9, r8
    ae16:	46a8      	mov	r8, r5
    ae18:	4625      	mov	r5, r4
    ae1a:	461c      	mov	r4, r3
    ae1c:	f7fb f9f0 	bl	6200 <__locale_mb_cur_max>
    ae20:	42a8      	cmp	r0, r5
    ae22:	f43e ae83 	beq.w	9b2c <__ssvfscanf_r+0x1d8>
    ae26:	e9db 3200 	ldrd	r3, r2, [fp]
    ae2a:	f813 1b01 	ldrb.w	r1, [r3], #1
    ae2e:	3a01      	subs	r2, #1
    ae30:	e9cb 3200 	strd	r3, r2, [fp]
    ae34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    ae36:	f507 70b8 	add.w	r0, r7, #368	; 0x170
    ae3a:	2a03      	cmp	r2, #3
    ae3c:	5541      	strb	r1, [r0, r5]
    ae3e:	f105 0301 	add.w	r3, r5, #1
    ae42:	f107 0568 	add.w	r5, r7, #104	; 0x68
    ae46:	d102      	bne.n	ae4e <__ssvfscanf_r+0x14fa>
    ae48:	682a      	ldr	r2, [r5, #0]
    ae4a:	2a04      	cmp	r2, #4
    ae4c:	d006      	beq.n	ae5c <__ssvfscanf_r+0x1508>
    ae4e:	2208      	movs	r2, #8
    ae50:	2100      	movs	r1, #0
    ae52:	4628      	mov	r0, r5
    ae54:	62bb      	str	r3, [r7, #40]	; 0x28
    ae56:	f7fb f8a3 	bl	5fa0 <memset>
    ae5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ae5c:	9500      	str	r5, [sp, #0]
    ae5e:	f507 72b8 	add.w	r2, r7, #368	; 0x170
    ae62:	4631      	mov	r1, r6
    ae64:	4620      	mov	r0, r4
    ae66:	62bb      	str	r3, [r7, #40]	; 0x28
    ae68:	f001 fd7e 	bl	c968 <_mbrtowc_r>
    ae6c:	1c43      	adds	r3, r0, #1
    ae6e:	6278      	str	r0, [r7, #36]	; 0x24
    ae70:	f43e ae5c 	beq.w	9b2c <__ssvfscanf_r+0x1d8>
    ae74:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ae76:	2800      	cmp	r0, #0
    ae78:	f040 8147 	bne.w	b10a <__ssvfscanf_r+0x17b6>
    ae7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    ae7e:	b902      	cbnz	r2, ae82 <__ssvfscanf_r+0x152e>
    ae80:	6032      	str	r2, [r6, #0]
    ae82:	449a      	add	sl, r3
    ae84:	f109 39ff 	add.w	r9, r9, #4294967295
    ae88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ae8a:	2b00      	cmp	r3, #0
    ae8c:	f040 8175 	bne.w	b17a <__ssvfscanf_r+0x1826>
    ae90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    ae92:	2b00      	cmp	r3, #0
    ae94:	f000 8170 	beq.w	b178 <__ssvfscanf_r+0x1824>
    ae98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ae9a:	1af5      	subs	r5, r6, r3
    ae9c:	ebb8 0fa5 	cmp.w	r8, r5, asr #2
    aea0:	f200 816a 	bhi.w	b178 <__ssvfscanf_r+0x1824>
    aea4:	4618      	mov	r0, r3
    aea6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
    aeaa:	f7f9 fc15 	bl	46d8 <realloc>
    aeae:	63f8      	str	r0, [r7, #60]	; 0x3c
    aeb0:	2800      	cmp	r0, #0
    aeb2:	f040 815c 	bne.w	b16e <__ssvfscanf_r+0x181a>
    aeb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    aeb8:	2b00      	cmp	r3, #0
    aeba:	d12d      	bne.n	af18 <__ssvfscanf_r+0x15c4>
    aebc:	f04f 33ff 	mov.w	r3, #4294967295
    aec0:	647b      	str	r3, [r7, #68]	; 0x44
    aec2:	f7fe be47 	b.w	9b54 <__ssvfscanf_r+0x200>
    aec6:	0622      	lsls	r2, r4, #24
    aec8:	f140 808f 	bpl.w	afea <__ssvfscanf_r+0x1696>
    aecc:	6b3c      	ldr	r4, [r7, #48]	; 0x30
    aece:	f854 3b04 	ldr.w	r3, [r4], #4
    aed2:	64bb      	str	r3, [r7, #72]	; 0x48
    aed4:	2b00      	cmp	r3, #0
    aed6:	f43e ae32 	beq.w	9b3e <__ssvfscanf_r+0x1ea>
    aeda:	2080      	movs	r0, #128	; 0x80
    aedc:	f7f9 f930 	bl	4140 <malloc>
    aee0:	4606      	mov	r6, r0
    aee2:	2800      	cmp	r0, #0
    aee4:	d0e7      	beq.n	aeb6 <__ssvfscanf_r+0x1562>
    aee6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    aee8:	6018      	str	r0, [r3, #0]
    aeea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    aeec:	88dd      	ldrh	r5, [r3, #6]
    aeee:	889a      	ldrh	r2, [r3, #4]
    aef0:	4295      	cmp	r5, r2
    aef2:	f0c0 80b3 	bcc.w	b05c <__ssvfscanf_r+0x1708>
    aef6:	f64f 71f6 	movw	r1, #65526	; 0xfff6
    aefa:	428a      	cmp	r2, r1
    aefc:	d856      	bhi.n	afac <__ssvfscanf_r+0x1658>
    aefe:	3208      	adds	r2, #8
    af00:	b293      	uxth	r3, r2
    af02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    af04:	63fb      	str	r3, [r7, #60]	; 0x3c
    af06:	0099      	lsls	r1, r3, #2
    af08:	6810      	ldr	r0, [r2, #0]
    af0a:	f7f9 fbe5 	bl	46d8 <realloc>
    af0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    af10:	2800      	cmp	r0, #0
    af12:	f040 80ae 	bne.w	b072 <__ssvfscanf_r+0x171e>
    af16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    af18:	88db      	ldrh	r3, [r3, #6]
    af1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    af1c:	461e      	mov	r6, r3
    af1e:	f8d2 8000 	ldr.w	r8, [r2]
    af22:	e661      	b.n	abe8 <__ssvfscanf_r+0x1294>
    af24:	462b      	mov	r3, r5
    af26:	6abd      	ldr	r5, [r7, #40]	; 0x28
    af28:	42ab      	cmp	r3, r5
    af2a:	f67e ae08 	bls.w	9b3e <__ssvfscanf_r+0x1ea>
    af2e:	461c      	mov	r4, r3
    af30:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
    af34:	465a      	mov	r2, fp
    af36:	4648      	mov	r0, r9
    af38:	f001 feea 	bl	cd10 <_sungetc_r>
    af3c:	42ac      	cmp	r4, r5
    af3e:	d1f7      	bne.n	af30 <__ssvfscanf_r+0x15dc>
    af40:	f7fe bdfd 	b.w	9b3e <__ssvfscanf_r+0x1ea>
    af44:	4610      	mov	r0, r2
    af46:	00d9      	lsls	r1, r3, #3
    af48:	461e      	mov	r6, r3
    af4a:	f7f9 fbc5 	bl	46d8 <realloc>
    af4e:	62b8      	str	r0, [r7, #40]	; 0x28
    af50:	2800      	cmp	r0, #0
    af52:	d0b0      	beq.n	aeb6 <__ssvfscanf_r+0x1562>
    af54:	1942      	adds	r2, r0, r5
    af56:	64ba      	str	r2, [r7, #72]	; 0x48
    af58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    af5a:	6b7d      	ldr	r5, [r7, #52]	; 0x34
    af5c:	6010      	str	r0, [r2, #0]
    af5e:	0073      	lsls	r3, r6, #1
    af60:	623b      	str	r3, [r7, #32]
    af62:	e4f8      	b.n	a956 <__ssvfscanf_r+0x1002>
    af64:	f8d7 803c 	ldr.w	r8, [r7, #60]	; 0x3c
    af68:	e63e      	b.n	abe8 <__ssvfscanf_r+0x1294>
    af6a:	6c39      	ldr	r1, [r7, #64]	; 0x40
    af6c:	6028      	str	r0, [r5, #0]
    af6e:	88ce      	ldrh	r6, [r1, #6]
    af70:	888a      	ldrh	r2, [r1, #4]
    af72:	4296      	cmp	r6, r2
    af74:	f0c0 808e 	bcc.w	b094 <__ssvfscanf_r+0x1740>
    af78:	f64f 71f6 	movw	r1, #65526	; 0xfff6
    af7c:	428a      	cmp	r2, r1
    af7e:	6338      	str	r0, [r7, #48]	; 0x30
    af80:	f240 80a5 	bls.w	b0ce <__ssvfscanf_r+0x177a>
    af84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    af86:	f8d3 8000 	ldr.w	r8, [r3]
    af8a:	e62d      	b.n	abe8 <__ssvfscanf_r+0x1294>
    af8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    af8e:	4295      	cmp	r5, r2
    af90:	f67e add5 	bls.w	9b3e <__ssvfscanf_r+0x1ea>
    af94:	462c      	mov	r4, r5
    af96:	6abd      	ldr	r5, [r7, #40]	; 0x28
    af98:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
    af9c:	465a      	mov	r2, fp
    af9e:	4648      	mov	r0, r9
    afa0:	f001 feb6 	bl	cd10 <_sungetc_r>
    afa4:	42ac      	cmp	r4, r5
    afa6:	d1f7      	bne.n	af98 <__ssvfscanf_r+0x1644>
    afa8:	f7fe bdc9 	b.w	9b3e <__ssvfscanf_r+0x1ea>
    afac:	462b      	mov	r3, r5
    afae:	e7b4      	b.n	af1a <__ssvfscanf_r+0x15c6>
    afb0:	f001 fcd8 	bl	c964 <_strtoull_r>
    afb4:	e5c1      	b.n	ab3a <__ssvfscanf_r+0x11e6>
    afb6:	f8d8 3000 	ldr.w	r3, [r8]
    afba:	461d      	mov	r5, r3
    afbc:	3301      	adds	r3, #1
    afbe:	f47f a8d5 	bne.w	a16c <__ssvfscanf_r+0x818>
    afc2:	462a      	mov	r2, r5
    afc4:	f7ff b8e8 	b.w	a198 <__ssvfscanf_r+0x844>
    afc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    afca:	6818      	ldr	r0, [r3, #0]
    afcc:	f001 fd28 	bl	ca20 <iswspace>
    afd0:	2800      	cmp	r0, #0
    afd2:	f47f aea8 	bne.w	ad26 <__ssvfscanf_r+0x13d2>
    afd6:	2c03      	cmp	r4, #3
    afd8:	44aa      	add	sl, r5
    afda:	f47f a849 	bne.w	a070 <__ssvfscanf_r+0x71c>
    afde:	6833      	ldr	r3, [r6, #0]
    afe0:	2b04      	cmp	r3, #4
    afe2:	f47f a845 	bne.w	a070 <__ssvfscanf_r+0x71c>
    afe6:	f7ff b845 	b.w	a074 <__ssvfscanf_r+0x720>
    afea:	e9d7 320c 	ldrd	r3, r2, [r7, #48]	; 0x30
    afee:	f853 6b04 	ldr.w	r6, [r3], #4
    aff2:	633b      	str	r3, [r7, #48]	; 0x30
    aff4:	4615      	mov	r5, r2
    aff6:	63fa      	str	r2, [r7, #60]	; 0x3c
    aff8:	64ba      	str	r2, [r7, #72]	; 0x48
    affa:	e709      	b.n	ae10 <__ssvfscanf_r+0x14bc>
    affc:	461c      	mov	r4, r3
    affe:	f8db 3004 	ldr.w	r3, [fp, #4]
    b002:	4598      	cmp	r8, r3
    b004:	dd39      	ble.n	b07a <__ssvfscanf_r+0x1726>
    b006:	f8db 2000 	ldr.w	r2, [fp]
    b00a:	441a      	add	r2, r3
    b00c:	f8cb 2000 	str.w	r2, [fp]
    b010:	4659      	mov	r1, fp
    b012:	4648      	mov	r0, r9
    b014:	441c      	add	r4, r3
    b016:	eba8 0803 	sub.w	r8, r8, r3
    b01a:	f001 feb9 	bl	cd90 <__ssrefill_r>
    b01e:	2800      	cmp	r0, #0
    b020:	d0ed      	beq.n	affe <__ssvfscanf_r+0x16aa>
    b022:	2c00      	cmp	r4, #0
    b024:	f43e ad82 	beq.w	9b2c <__ssvfscanf_r+0x1d8>
    b028:	44a2      	add	sl, r4
    b02a:	f7fe bcba 	b.w	99a2 <__ssvfscanf_r+0x4e>
    b02e:	6b3d      	ldr	r5, [r7, #48]	; 0x30
    b030:	4643      	mov	r3, r8
    b032:	6829      	ldr	r1, [r5, #0]
    b034:	f8cd b000 	str.w	fp, [sp]
    b038:	2201      	movs	r2, #1
    b03a:	4648      	mov	r0, r9
    b03c:	f001 fec6 	bl	cdcc <_sfread_r>
    b040:	4604      	mov	r4, r0
    b042:	2800      	cmp	r0, #0
    b044:	f43e ad72 	beq.w	9b2c <__ssvfscanf_r+0x1d8>
    b048:	3504      	adds	r5, #4
    b04a:	64bd      	str	r5, [r7, #72]	; 0x48
    b04c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    b04e:	3301      	adds	r3, #1
    b050:	647b      	str	r3, [r7, #68]	; 0x44
    b052:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    b054:	633b      	str	r3, [r7, #48]	; 0x30
    b056:	44a2      	add	sl, r4
    b058:	f7fe bca3 	b.w	99a2 <__ssvfscanf_r+0x4e>
    b05c:	6818      	ldr	r0, [r3, #0]
    b05e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    b060:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
    b064:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    b066:	633c      	str	r4, [r7, #48]	; 0x30
    b068:	3501      	adds	r5, #1
    b06a:	80dd      	strh	r5, [r3, #6]
    b06c:	63fe      	str	r6, [r7, #60]	; 0x3c
    b06e:	2520      	movs	r5, #32
    b070:	e6ce      	b.n	ae10 <__ssvfscanf_r+0x14bc>
    b072:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    b074:	8093      	strh	r3, [r2, #4]
    b076:	6010      	str	r0, [r2, #0]
    b078:	e7f1      	b.n	b05e <__ssvfscanf_r+0x170a>
    b07a:	eba3 0308 	sub.w	r3, r3, r8
    b07e:	f8cb 3004 	str.w	r3, [fp, #4]
    b082:	f8db 3000 	ldr.w	r3, [fp]
    b086:	4444      	add	r4, r8
    b088:	4443      	add	r3, r8
    b08a:	f8cb 3000 	str.w	r3, [fp]
    b08e:	44a2      	add	sl, r4
    b090:	f7fe bc87 	b.w	99a2 <__ssvfscanf_r+0x4e>
    b094:	680a      	ldr	r2, [r1, #0]
    b096:	63fa      	str	r2, [r7, #60]	; 0x3c
    b098:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    b09a:	f842 5026 	str.w	r5, [r2, r6, lsl #2]
    b09e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    b0a0:	3601      	adds	r6, #1
    b0a2:	b2b6      	uxth	r6, r6
    b0a4:	80d6      	strh	r6, [r2, #6]
    b0a6:	4619      	mov	r1, r3
    b0a8:	f8cd b000 	str.w	fp, [sp]
    b0ac:	4643      	mov	r3, r8
    b0ae:	2201      	movs	r2, #1
    b0b0:	4648      	mov	r0, r9
    b0b2:	f001 fe8b 	bl	cdcc <_sfread_r>
    b0b6:	4604      	mov	r4, r0
    b0b8:	b1d8      	cbz	r0, b0f2 <__ssvfscanf_r+0x179e>
    b0ba:	4580      	cmp	r8, r0
    b0bc:	d9c6      	bls.n	b04c <__ssvfscanf_r+0x16f8>
    b0be:	6828      	ldr	r0, [r5, #0]
    b0c0:	4621      	mov	r1, r4
    b0c2:	f7f9 fb09 	bl	46d8 <realloc>
    b0c6:	2800      	cmp	r0, #0
    b0c8:	d0c0      	beq.n	b04c <__ssvfscanf_r+0x16f8>
    b0ca:	6028      	str	r0, [r5, #0]
    b0cc:	e7be      	b.n	b04c <__ssvfscanf_r+0x16f8>
    b0ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    b0d0:	3208      	adds	r2, #8
    b0d2:	b294      	uxth	r4, r2
    b0d4:	681a      	ldr	r2, [r3, #0]
    b0d6:	637a      	str	r2, [r7, #52]	; 0x34
    b0d8:	4610      	mov	r0, r2
    b0da:	00a1      	lsls	r1, r4, #2
    b0dc:	f7f9 fafc 	bl	46d8 <realloc>
    b0e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    b0e2:	63f8      	str	r0, [r7, #60]	; 0x3c
    b0e4:	2800      	cmp	r0, #0
    b0e6:	d05b      	beq.n	b1a0 <__ssvfscanf_r+0x184c>
    b0e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    b0ea:	809c      	strh	r4, [r3, #4]
    b0ec:	6018      	str	r0, [r3, #0]
    b0ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b0f0:	e7d2      	b.n	b098 <__ssvfscanf_r+0x1744>
    b0f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    b0f4:	f8d7 803c 	ldr.w	r8, [r7, #60]	; 0x3c
    b0f8:	2b00      	cmp	r3, #0
    b0fa:	f43f ad75 	beq.w	abe8 <__ssvfscanf_r+0x1294>
    b0fe:	f8bb 300c 	ldrh.w	r3, [fp, #12]
    b102:	065b      	lsls	r3, r3, #25
    b104:	f57e ad1d 	bpl.w	9b42 <__ssvfscanf_r+0x1ee>
    b108:	e56a      	b.n	abe0 <__ssvfscanf_r+0x128c>
    b10a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    b10c:	3202      	adds	r2, #2
    b10e:	d11d      	bne.n	b14c <__ssvfscanf_r+0x17f8>
    b110:	f8db 2004 	ldr.w	r2, [fp, #4]
    b114:	2a00      	cmp	r2, #0
    b116:	461d      	mov	r5, r3
    b118:	f73f ae80 	bgt.w	ae1c <__ssvfscanf_r+0x14c8>
    b11c:	4659      	mov	r1, fp
    b11e:	4620      	mov	r0, r4
    b120:	f001 fe36 	bl	cd90 <__ssrefill_r>
    b124:	b9e0      	cbnz	r0, b160 <__ssvfscanf_r+0x180c>
    b126:	f1b9 0f00 	cmp.w	r9, #0
    b12a:	f47f ae77 	bne.w	ae1c <__ssvfscanf_r+0x14c8>
    b12e:	4645      	mov	r5, r8
    b130:	46a1      	mov	r9, r4
    b132:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    b134:	b123      	cbz	r3, b140 <__ssvfscanf_r+0x17ec>
    b136:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b138:	1af1      	subs	r1, r6, r3
    b13a:	ebb5 0fa1 	cmp.w	r5, r1, asr #2
    b13e:	d827      	bhi.n	b190 <__ssvfscanf_r+0x183c>
    b140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    b142:	2b00      	cmp	r3, #0
    b144:	f47e ac2d 	bne.w	99a2 <__ssvfscanf_r+0x4e>
    b148:	f7ff ba1c 	b.w	a584 <__ssvfscanf_r+0xc30>
    b14c:	449a      	add	sl, r3
    b14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b150:	2b03      	cmp	r3, #3
    b152:	f47f ae97 	bne.w	ae84 <__ssvfscanf_r+0x1530>
    b156:	682b      	ldr	r3, [r5, #0]
    b158:	2b04      	cmp	r3, #4
    b15a:	f47f ae93 	bne.w	ae84 <__ssvfscanf_r+0x1530>
    b15e:	e693      	b.n	ae88 <__ssvfscanf_r+0x1534>
    b160:	46a1      	mov	r9, r4
    b162:	462c      	mov	r4, r5
    b164:	4645      	mov	r5, r8
    b166:	2c00      	cmp	r4, #0
    b168:	d0e3      	beq.n	b132 <__ssvfscanf_r+0x17de>
    b16a:	f7fe bcdf 	b.w	9b2c <__ssvfscanf_r+0x1d8>
    b16e:	6cba      	ldr	r2, [r7, #72]	; 0x48
    b170:	1946      	adds	r6, r0, r5
    b172:	6010      	str	r0, [r2, #0]
    b174:	ea4f 0848 	mov.w	r8, r8, lsl #1
    b178:	3604      	adds	r6, #4
    b17a:	f8db 3004 	ldr.w	r3, [fp, #4]
    b17e:	2b00      	cmp	r3, #0
    b180:	f04f 0500 	mov.w	r5, #0
    b184:	ddca      	ble.n	b11c <__ssvfscanf_r+0x17c8>
    b186:	f1b9 0f00 	cmp.w	r9, #0
    b18a:	f47f ae47 	bne.w	ae1c <__ssvfscanf_r+0x14c8>
    b18e:	e7ce      	b.n	b12e <__ssvfscanf_r+0x17da>
    b190:	6cbc      	ldr	r4, [r7, #72]	; 0x48
    b192:	6820      	ldr	r0, [r4, #0]
    b194:	f7f9 faa0 	bl	46d8 <realloc>
    b198:	2800      	cmp	r0, #0
    b19a:	d0d1      	beq.n	b140 <__ssvfscanf_r+0x17ec>
    b19c:	6020      	str	r0, [r4, #0]
    b19e:	e7cf      	b.n	b140 <__ssvfscanf_r+0x17ec>
    b1a0:	4690      	mov	r8, r2
    b1a2:	e521      	b.n	abe8 <__ssvfscanf_r+0x1294>

0000b1a4 <_fclose_r>:
    b1a4:	b570      	push	{r4, r5, r6, lr}
    b1a6:	2900      	cmp	r1, #0
    b1a8:	d04b      	beq.n	b242 <_fclose_r+0x9e>
    b1aa:	4606      	mov	r6, r0
    b1ac:	460c      	mov	r4, r1
    b1ae:	b110      	cbz	r0, b1b6 <_fclose_r+0x12>
    b1b0:	6b43      	ldr	r3, [r0, #52]	; 0x34
    b1b2:	2b00      	cmp	r3, #0
    b1b4:	d048      	beq.n	b248 <_fclose_r+0xa4>
    b1b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
    b1b8:	07d8      	lsls	r0, r3, #31
    b1ba:	d534      	bpl.n	b226 <_fclose_r+0x82>
    b1bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    b1c0:	2b00      	cmp	r3, #0
    b1c2:	d03e      	beq.n	b242 <_fclose_r+0x9e>
    b1c4:	4621      	mov	r1, r4
    b1c6:	4630      	mov	r0, r6
    b1c8:	f000 f850 	bl	b26c <__sflush_r>
    b1cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    b1ce:	4605      	mov	r5, r0
    b1d0:	b133      	cbz	r3, b1e0 <_fclose_r+0x3c>
    b1d2:	69e1      	ldr	r1, [r4, #28]
    b1d4:	4630      	mov	r0, r6
    b1d6:	4798      	blx	r3
    b1d8:	2800      	cmp	r0, #0
    b1da:	bfb8      	it	lt
    b1dc:	f04f 35ff 	movlt.w	r5, #4294967295
    b1e0:	89a3      	ldrh	r3, [r4, #12]
    b1e2:	061a      	lsls	r2, r3, #24
    b1e4:	d43c      	bmi.n	b260 <_fclose_r+0xbc>
    b1e6:	6b21      	ldr	r1, [r4, #48]	; 0x30
    b1e8:	b141      	cbz	r1, b1fc <_fclose_r+0x58>
    b1ea:	f104 0340 	add.w	r3, r4, #64	; 0x40
    b1ee:	4299      	cmp	r1, r3
    b1f0:	d002      	beq.n	b1f8 <_fclose_r+0x54>
    b1f2:	4630      	mov	r0, r6
    b1f4:	f7fb fb96 	bl	6924 <_free_r>
    b1f8:	2300      	movs	r3, #0
    b1fa:	6323      	str	r3, [r4, #48]	; 0x30
    b1fc:	6c61      	ldr	r1, [r4, #68]	; 0x44
    b1fe:	b121      	cbz	r1, b20a <_fclose_r+0x66>
    b200:	4630      	mov	r0, r6
    b202:	f7fb fb8f 	bl	6924 <_free_r>
    b206:	2300      	movs	r3, #0
    b208:	6463      	str	r3, [r4, #68]	; 0x44
    b20a:	f7fa fd0b 	bl	5c24 <__sfp_lock_acquire>
    b20e:	6e63      	ldr	r3, [r4, #100]	; 0x64
    b210:	2200      	movs	r2, #0
    b212:	07db      	lsls	r3, r3, #31
    b214:	81a2      	strh	r2, [r4, #12]
    b216:	d51f      	bpl.n	b258 <_fclose_r+0xb4>
    b218:	6da0      	ldr	r0, [r4, #88]	; 0x58
    b21a:	f7fb f889 	bl	6330 <__retarget_lock_close_recursive>
    b21e:	f7fa fd07 	bl	5c30 <__sfp_lock_release>
    b222:	4628      	mov	r0, r5
    b224:	bd70      	pop	{r4, r5, r6, pc}
    b226:	89a3      	ldrh	r3, [r4, #12]
    b228:	0599      	lsls	r1, r3, #22
    b22a:	d4cb      	bmi.n	b1c4 <_fclose_r+0x20>
    b22c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    b22e:	f7fb f881 	bl	6334 <__retarget_lock_acquire_recursive>
    b232:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    b236:	2b00      	cmp	r3, #0
    b238:	d1c4      	bne.n	b1c4 <_fclose_r+0x20>
    b23a:	6e65      	ldr	r5, [r4, #100]	; 0x64
    b23c:	f015 0501 	ands.w	r5, r5, #1
    b240:	d005      	beq.n	b24e <_fclose_r+0xaa>
    b242:	2500      	movs	r5, #0
    b244:	4628      	mov	r0, r5
    b246:	bd70      	pop	{r4, r5, r6, pc}
    b248:	f7fa fcce 	bl	5be8 <__sinit>
    b24c:	e7b3      	b.n	b1b6 <_fclose_r+0x12>
    b24e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    b250:	f7fb f872 	bl	6338 <__retarget_lock_release_recursive>
    b254:	4628      	mov	r0, r5
    b256:	bd70      	pop	{r4, r5, r6, pc}
    b258:	6da0      	ldr	r0, [r4, #88]	; 0x58
    b25a:	f7fb f86d 	bl	6338 <__retarget_lock_release_recursive>
    b25e:	e7db      	b.n	b218 <_fclose_r+0x74>
    b260:	6921      	ldr	r1, [r4, #16]
    b262:	4630      	mov	r0, r6
    b264:	f7fb fb5e 	bl	6924 <_free_r>
    b268:	e7bd      	b.n	b1e6 <_fclose_r+0x42>
    b26a:	bf00      	nop

0000b26c <__sflush_r>:
    b26c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
    b270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b274:	460c      	mov	r4, r1
    b276:	0711      	lsls	r1, r2, #28
    b278:	4680      	mov	r8, r0
    b27a:	d447      	bmi.n	b30c <__sflush_r+0xa0>
    b27c:	6863      	ldr	r3, [r4, #4]
    b27e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    b282:	2b00      	cmp	r3, #0
    b284:	81a2      	strh	r2, [r4, #12]
    b286:	dd5e      	ble.n	b346 <__sflush_r+0xda>
    b288:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    b28a:	2d00      	cmp	r5, #0
    b28c:	d058      	beq.n	b340 <__sflush_r+0xd4>
    b28e:	2300      	movs	r3, #0
    b290:	f8d8 6000 	ldr.w	r6, [r8]
    b294:	f8c8 3000 	str.w	r3, [r8]
    b298:	b293      	uxth	r3, r2
    b29a:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    b29e:	d156      	bne.n	b34e <__sflush_r+0xe2>
    b2a0:	2301      	movs	r3, #1
    b2a2:	69e1      	ldr	r1, [r4, #28]
    b2a4:	4640      	mov	r0, r8
    b2a6:	47a8      	blx	r5
    b2a8:	1c43      	adds	r3, r0, #1
    b2aa:	d067      	beq.n	b37c <__sflush_r+0x110>
    b2ac:	89a3      	ldrh	r3, [r4, #12]
    b2ae:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    b2b0:	075f      	lsls	r7, r3, #29
    b2b2:	d505      	bpl.n	b2c0 <__sflush_r+0x54>
    b2b4:	6863      	ldr	r3, [r4, #4]
    b2b6:	1ac0      	subs	r0, r0, r3
    b2b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
    b2ba:	b10b      	cbz	r3, b2c0 <__sflush_r+0x54>
    b2bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    b2be:	1ac0      	subs	r0, r0, r3
    b2c0:	69e1      	ldr	r1, [r4, #28]
    b2c2:	4602      	mov	r2, r0
    b2c4:	2300      	movs	r3, #0
    b2c6:	4640      	mov	r0, r8
    b2c8:	47a8      	blx	r5
    b2ca:	1c41      	adds	r1, r0, #1
    b2cc:	d141      	bne.n	b352 <__sflush_r+0xe6>
    b2ce:	f8d8 3000 	ldr.w	r3, [r8]
    b2d2:	2b00      	cmp	r3, #0
    b2d4:	d03d      	beq.n	b352 <__sflush_r+0xe6>
    b2d6:	2b1d      	cmp	r3, #29
    b2d8:	d001      	beq.n	b2de <__sflush_r+0x72>
    b2da:	2b16      	cmp	r3, #22
    b2dc:	d156      	bne.n	b38c <__sflush_r+0x120>
    b2de:	89a3      	ldrh	r3, [r4, #12]
    b2e0:	6922      	ldr	r2, [r4, #16]
    b2e2:	6022      	str	r2, [r4, #0]
    b2e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    b2e8:	2100      	movs	r1, #0
    b2ea:	6061      	str	r1, [r4, #4]
    b2ec:	81a3      	strh	r3, [r4, #12]
    b2ee:	6b21      	ldr	r1, [r4, #48]	; 0x30
    b2f0:	f8c8 6000 	str.w	r6, [r8]
    b2f4:	b321      	cbz	r1, b340 <__sflush_r+0xd4>
    b2f6:	f104 0340 	add.w	r3, r4, #64	; 0x40
    b2fa:	4299      	cmp	r1, r3
    b2fc:	d002      	beq.n	b304 <__sflush_r+0x98>
    b2fe:	4640      	mov	r0, r8
    b300:	f7fb fb10 	bl	6924 <_free_r>
    b304:	2000      	movs	r0, #0
    b306:	6320      	str	r0, [r4, #48]	; 0x30
    b308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b30c:	6926      	ldr	r6, [r4, #16]
    b30e:	b1be      	cbz	r6, b340 <__sflush_r+0xd4>
    b310:	b293      	uxth	r3, r2
    b312:	6825      	ldr	r5, [r4, #0]
    b314:	6026      	str	r6, [r4, #0]
    b316:	079a      	lsls	r2, r3, #30
    b318:	bf0c      	ite	eq
    b31a:	6963      	ldreq	r3, [r4, #20]
    b31c:	2300      	movne	r3, #0
    b31e:	1bad      	subs	r5, r5, r6
    b320:	60a3      	str	r3, [r4, #8]
    b322:	e00b      	b.n	b33c <__sflush_r+0xd0>
    b324:	462b      	mov	r3, r5
    b326:	4632      	mov	r2, r6
    b328:	69e1      	ldr	r1, [r4, #28]
    b32a:	6a67      	ldr	r7, [r4, #36]	; 0x24
    b32c:	4640      	mov	r0, r8
    b32e:	47b8      	blx	r7
    b330:	f1b0 0c00 	subs.w	ip, r0, #0
    b334:	eba5 050c 	sub.w	r5, r5, ip
    b338:	4466      	add	r6, ip
    b33a:	dd17      	ble.n	b36c <__sflush_r+0x100>
    b33c:	2d00      	cmp	r5, #0
    b33e:	dcf1      	bgt.n	b324 <__sflush_r+0xb8>
    b340:	2000      	movs	r0, #0
    b342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b346:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    b348:	2b00      	cmp	r3, #0
    b34a:	dc9d      	bgt.n	b288 <__sflush_r+0x1c>
    b34c:	e7f8      	b.n	b340 <__sflush_r+0xd4>
    b34e:	6d20      	ldr	r0, [r4, #80]	; 0x50
    b350:	e7ae      	b.n	b2b0 <__sflush_r+0x44>
    b352:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    b356:	6922      	ldr	r2, [r4, #16]
    b358:	6022      	str	r2, [r4, #0]
    b35a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    b35e:	81a3      	strh	r3, [r4, #12]
    b360:	2200      	movs	r2, #0
    b362:	04db      	lsls	r3, r3, #19
    b364:	6062      	str	r2, [r4, #4]
    b366:	d5c2      	bpl.n	b2ee <__sflush_r+0x82>
    b368:	6520      	str	r0, [r4, #80]	; 0x50
    b36a:	e7c0      	b.n	b2ee <__sflush_r+0x82>
    b36c:	89a3      	ldrh	r3, [r4, #12]
    b36e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b372:	f04f 30ff 	mov.w	r0, #4294967295
    b376:	81a3      	strh	r3, [r4, #12]
    b378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b37c:	f8d8 3000 	ldr.w	r3, [r8]
    b380:	2b00      	cmp	r3, #0
    b382:	d093      	beq.n	b2ac <__sflush_r+0x40>
    b384:	2b1d      	cmp	r3, #29
    b386:	d006      	beq.n	b396 <__sflush_r+0x12a>
    b388:	2b16      	cmp	r3, #22
    b38a:	d004      	beq.n	b396 <__sflush_r+0x12a>
    b38c:	89a3      	ldrh	r3, [r4, #12]
    b38e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b392:	81a3      	strh	r3, [r4, #12]
    b394:	e7d5      	b.n	b342 <__sflush_r+0xd6>
    b396:	f8c8 6000 	str.w	r6, [r8]
    b39a:	e7d1      	b.n	b340 <__sflush_r+0xd4>

0000b39c <_fflush_r>:
    b39c:	b538      	push	{r3, r4, r5, lr}
    b39e:	460c      	mov	r4, r1
    b3a0:	4605      	mov	r5, r0
    b3a2:	b108      	cbz	r0, b3a8 <_fflush_r+0xc>
    b3a4:	6b43      	ldr	r3, [r0, #52]	; 0x34
    b3a6:	b303      	cbz	r3, b3ea <_fflush_r+0x4e>
    b3a8:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
    b3ac:	b188      	cbz	r0, b3d2 <_fflush_r+0x36>
    b3ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
    b3b0:	07db      	lsls	r3, r3, #31
    b3b2:	d401      	bmi.n	b3b8 <_fflush_r+0x1c>
    b3b4:	0581      	lsls	r1, r0, #22
    b3b6:	d50f      	bpl.n	b3d8 <_fflush_r+0x3c>
    b3b8:	4628      	mov	r0, r5
    b3ba:	4621      	mov	r1, r4
    b3bc:	f7ff ff56 	bl	b26c <__sflush_r>
    b3c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
    b3c2:	07da      	lsls	r2, r3, #31
    b3c4:	4605      	mov	r5, r0
    b3c6:	d402      	bmi.n	b3ce <_fflush_r+0x32>
    b3c8:	89a3      	ldrh	r3, [r4, #12]
    b3ca:	059b      	lsls	r3, r3, #22
    b3cc:	d508      	bpl.n	b3e0 <_fflush_r+0x44>
    b3ce:	4628      	mov	r0, r5
    b3d0:	bd38      	pop	{r3, r4, r5, pc}
    b3d2:	4605      	mov	r5, r0
    b3d4:	4628      	mov	r0, r5
    b3d6:	bd38      	pop	{r3, r4, r5, pc}
    b3d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    b3da:	f7fa ffab 	bl	6334 <__retarget_lock_acquire_recursive>
    b3de:	e7eb      	b.n	b3b8 <_fflush_r+0x1c>
    b3e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    b3e2:	f7fa ffa9 	bl	6338 <__retarget_lock_release_recursive>
    b3e6:	4628      	mov	r0, r5
    b3e8:	bd38      	pop	{r3, r4, r5, pc}
    b3ea:	f7fa fbfd 	bl	5be8 <__sinit>
    b3ee:	e7db      	b.n	b3a8 <_fflush_r+0xc>

0000b3f0 <__sccl>:
    b3f0:	b570      	push	{r4, r5, r6, lr}
    b3f2:	780c      	ldrb	r4, [r1, #0]
    b3f4:	2c5e      	cmp	r4, #94	; 0x5e
    b3f6:	4686      	mov	lr, r0
    b3f8:	d01e      	beq.n	b438 <__sccl+0x48>
    b3fa:	2200      	movs	r2, #0
    b3fc:	1c48      	adds	r0, r1, #1
    b3fe:	4694      	mov	ip, r2
    b400:	f10e 33ff 	add.w	r3, lr, #4294967295
    b404:	f10e 01ff 	add.w	r1, lr, #255	; 0xff
    b408:	f803 2f01 	strb.w	r2, [r3, #1]!
    b40c:	428b      	cmp	r3, r1
    b40e:	d1fb      	bne.n	b408 <__sccl+0x18>
    b410:	b184      	cbz	r4, b434 <__sccl+0x44>
    b412:	f08c 0101 	eor.w	r1, ip, #1
    b416:	f80e 1004 	strb.w	r1, [lr, r4]
    b41a:	1c45      	adds	r5, r0, #1
    b41c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    b420:	2b2d      	cmp	r3, #45	; 0x2d
    b422:	d00e      	beq.n	b442 <__sccl+0x52>
    b424:	2b5d      	cmp	r3, #93	; 0x5d
    b426:	d003      	beq.n	b430 <__sccl+0x40>
    b428:	b11b      	cbz	r3, b432 <__sccl+0x42>
    b42a:	461c      	mov	r4, r3
    b42c:	4628      	mov	r0, r5
    b42e:	e7f2      	b.n	b416 <__sccl+0x26>
    b430:	4628      	mov	r0, r5
    b432:	bd70      	pop	{r4, r5, r6, pc}
    b434:	3801      	subs	r0, #1
    b436:	bd70      	pop	{r4, r5, r6, pc}
    b438:	2201      	movs	r2, #1
    b43a:	784c      	ldrb	r4, [r1, #1]
    b43c:	1c88      	adds	r0, r1, #2
    b43e:	4694      	mov	ip, r2
    b440:	e7de      	b.n	b400 <__sccl+0x10>
    b442:	f890 c001 	ldrb.w	ip, [r0, #1]
    b446:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
    b44a:	d0ee      	beq.n	b42a <__sccl+0x3a>
    b44c:	4564      	cmp	r4, ip
    b44e:	dcec      	bgt.n	b42a <__sccl+0x3a>
    b450:	1c66      	adds	r6, r4, #1
    b452:	3002      	adds	r0, #2
    b454:	eb0e 0206 	add.w	r2, lr, r6
    b458:	f802 1b01 	strb.w	r1, [r2], #1
    b45c:	eba2 030e 	sub.w	r3, r2, lr
    b460:	3b01      	subs	r3, #1
    b462:	459c      	cmp	ip, r3
    b464:	dcf8      	bgt.n	b458 <__sccl+0x68>
    b466:	ebac 0304 	sub.w	r3, ip, r4
    b46a:	3b01      	subs	r3, #1
    b46c:	4564      	cmp	r4, ip
    b46e:	bfa8      	it	ge
    b470:	2300      	movge	r3, #0
    b472:	3502      	adds	r5, #2
    b474:	199c      	adds	r4, r3, r6
    b476:	e7d1      	b.n	b41c <__sccl+0x2c>

0000b478 <sprintf>:
    b478:	b40e      	push	{r1, r2, r3}
    b47a:	b510      	push	{r4, lr}
    b47c:	b09d      	sub	sp, #116	; 0x74
    b47e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    b482:	ab1f      	add	r3, sp, #124	; 0x7c
    b484:	e9cd 0106 	strd	r0, r1, [sp, #24]
    b488:	9104      	str	r1, [sp, #16]
    b48a:	4909      	ldr	r1, [pc, #36]	; (b4b0 <sprintf+0x38>)
    b48c:	f853 2b04 	ldr.w	r2, [r3], #4
    b490:	9002      	str	r0, [sp, #8]
    b492:	4c08      	ldr	r4, [pc, #32]	; (b4b4 <sprintf+0x3c>)
    b494:	6808      	ldr	r0, [r1, #0]
    b496:	9301      	str	r3, [sp, #4]
    b498:	a902      	add	r1, sp, #8
    b49a:	9405      	str	r4, [sp, #20]
    b49c:	f7fc fcb8 	bl	7e10 <_svfprintf_r>
    b4a0:	9b02      	ldr	r3, [sp, #8]
    b4a2:	2200      	movs	r2, #0
    b4a4:	701a      	strb	r2, [r3, #0]
    b4a6:	b01d      	add	sp, #116	; 0x74
    b4a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b4ac:	b003      	add	sp, #12
    b4ae:	4770      	bx	lr
    b4b0:	200081c0 	.word	0x200081c0
    b4b4:	ffff0208 	.word	0xffff0208

0000b4b8 <stpncpy>:
    b4b8:	ea41 0300 	orr.w	r3, r1, r0
    b4bc:	079b      	lsls	r3, r3, #30
    b4be:	b430      	push	{r4, r5}
    b4c0:	d101      	bne.n	b4c6 <stpncpy+0xe>
    b4c2:	2a03      	cmp	r2, #3
    b4c4:	d80f      	bhi.n	b4e6 <stpncpy+0x2e>
    b4c6:	f101 3cff 	add.w	ip, r1, #4294967295
    b4ca:	e007      	b.n	b4dc <stpncpy+0x24>
    b4cc:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
    b4d0:	f803 1b01 	strb.w	r1, [r3], #1
    b4d4:	1e54      	subs	r4, r2, #1
    b4d6:	b1c1      	cbz	r1, b50a <stpncpy+0x52>
    b4d8:	4622      	mov	r2, r4
    b4da:	4618      	mov	r0, r3
    b4dc:	4603      	mov	r3, r0
    b4de:	2a00      	cmp	r2, #0
    b4e0:	d1f4      	bne.n	b4cc <stpncpy+0x14>
    b4e2:	bc30      	pop	{r4, r5}
    b4e4:	4770      	bx	lr
    b4e6:	460b      	mov	r3, r1
    b4e8:	4619      	mov	r1, r3
    b4ea:	f853 5b04 	ldr.w	r5, [r3], #4
    b4ee:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
    b4f2:	ea24 0405 	bic.w	r4, r4, r5
    b4f6:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    b4fa:	d1e4      	bne.n	b4c6 <stpncpy+0xe>
    b4fc:	3a04      	subs	r2, #4
    b4fe:	2a03      	cmp	r2, #3
    b500:	f840 5b04 	str.w	r5, [r0], #4
    b504:	4619      	mov	r1, r3
    b506:	d8ef      	bhi.n	b4e8 <stpncpy+0x30>
    b508:	e7dd      	b.n	b4c6 <stpncpy+0xe>
    b50a:	4402      	add	r2, r0
    b50c:	2c00      	cmp	r4, #0
    b50e:	d0e8      	beq.n	b4e2 <stpncpy+0x2a>
    b510:	f803 1b01 	strb.w	r1, [r3], #1
    b514:	4293      	cmp	r3, r2
    b516:	d1fb      	bne.n	b510 <stpncpy+0x58>
    b518:	bc30      	pop	{r4, r5}
    b51a:	4770      	bx	lr

0000b51c <_localeconv_r>:
    b51c:	4800      	ldr	r0, [pc, #0]	; (b520 <_localeconv_r+0x4>)
    b51e:	4770      	bx	lr
    b520:	20007d28 	.word	0x20007d28
	...

0000b530 <memchr>:
    b530:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    b534:	2a10      	cmp	r2, #16
    b536:	db2b      	blt.n	b590 <memchr+0x60>
    b538:	f010 0f07 	tst.w	r0, #7
    b53c:	d008      	beq.n	b550 <memchr+0x20>
    b53e:	f810 3b01 	ldrb.w	r3, [r0], #1
    b542:	3a01      	subs	r2, #1
    b544:	428b      	cmp	r3, r1
    b546:	d02d      	beq.n	b5a4 <memchr+0x74>
    b548:	f010 0f07 	tst.w	r0, #7
    b54c:	b342      	cbz	r2, b5a0 <memchr+0x70>
    b54e:	d1f6      	bne.n	b53e <memchr+0xe>
    b550:	b4f0      	push	{r4, r5, r6, r7}
    b552:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    b556:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    b55a:	f022 0407 	bic.w	r4, r2, #7
    b55e:	f07f 0700 	mvns.w	r7, #0
    b562:	2300      	movs	r3, #0
    b564:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    b568:	3c08      	subs	r4, #8
    b56a:	ea85 0501 	eor.w	r5, r5, r1
    b56e:	ea86 0601 	eor.w	r6, r6, r1
    b572:	fa85 f547 	uadd8	r5, r5, r7
    b576:	faa3 f587 	sel	r5, r3, r7
    b57a:	fa86 f647 	uadd8	r6, r6, r7
    b57e:	faa5 f687 	sel	r6, r5, r7
    b582:	b98e      	cbnz	r6, b5a8 <memchr+0x78>
    b584:	d1ee      	bne.n	b564 <memchr+0x34>
    b586:	bcf0      	pop	{r4, r5, r6, r7}
    b588:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    b58c:	f002 0207 	and.w	r2, r2, #7
    b590:	b132      	cbz	r2, b5a0 <memchr+0x70>
    b592:	f810 3b01 	ldrb.w	r3, [r0], #1
    b596:	3a01      	subs	r2, #1
    b598:	ea83 0301 	eor.w	r3, r3, r1
    b59c:	b113      	cbz	r3, b5a4 <memchr+0x74>
    b59e:	d1f8      	bne.n	b592 <memchr+0x62>
    b5a0:	2000      	movs	r0, #0
    b5a2:	4770      	bx	lr
    b5a4:	3801      	subs	r0, #1
    b5a6:	4770      	bx	lr
    b5a8:	2d00      	cmp	r5, #0
    b5aa:	bf06      	itte	eq
    b5ac:	4635      	moveq	r5, r6
    b5ae:	3803      	subeq	r0, #3
    b5b0:	3807      	subne	r0, #7
    b5b2:	f015 0f01 	tst.w	r5, #1
    b5b6:	d107      	bne.n	b5c8 <memchr+0x98>
    b5b8:	3001      	adds	r0, #1
    b5ba:	f415 7f80 	tst.w	r5, #256	; 0x100
    b5be:	bf02      	ittt	eq
    b5c0:	3001      	addeq	r0, #1
    b5c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    b5c6:	3001      	addeq	r0, #1
    b5c8:	bcf0      	pop	{r4, r5, r6, r7}
    b5ca:	3801      	subs	r0, #1
    b5cc:	4770      	bx	lr
    b5ce:	bf00      	nop

0000b5d0 <frexp>:
    b5d0:	b430      	push	{r4, r5}
    b5d2:	b082      	sub	sp, #8
    b5d4:	ed8d 0b00 	vstr	d0, [sp]
    b5d8:	9a01      	ldr	r2, [sp, #4]
    b5da:	4c19      	ldr	r4, [pc, #100]	; (b640 <frexp+0x70>)
    b5dc:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
    b5e0:	2100      	movs	r1, #0
    b5e2:	42a3      	cmp	r3, r4
    b5e4:	6001      	str	r1, [r0, #0]
    b5e6:	dc21      	bgt.n	b62c <frexp+0x5c>
    b5e8:	9c00      	ldr	r4, [sp, #0]
    b5ea:	431c      	orrs	r4, r3
    b5ec:	d01e      	beq.n	b62c <frexp+0x5c>
    b5ee:	4c15      	ldr	r4, [pc, #84]	; (b644 <frexp+0x74>)
    b5f0:	4014      	ands	r4, r2
    b5f2:	b954      	cbnz	r4, b60a <frexp+0x3a>
    b5f4:	ed9f 7b10 	vldr	d7, [pc, #64]	; b638 <frexp+0x68>
    b5f8:	ee20 7b07 	vmul.f64	d7, d0, d7
    b5fc:	ed8d 7b00 	vstr	d7, [sp]
    b600:	9a01      	ldr	r2, [sp, #4]
    b602:	f06f 0135 	mvn.w	r1, #53	; 0x35
    b606:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
    b60a:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
    b60e:	e9dd 4500 	ldrd	r4, r5, [sp]
    b612:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
    b616:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
    b61a:	151b      	asrs	r3, r3, #20
    b61c:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
    b620:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
    b624:	e9cd 4500 	strd	r4, r5, [sp]
    b628:	440b      	add	r3, r1
    b62a:	6003      	str	r3, [r0, #0]
    b62c:	ed9d 0b00 	vldr	d0, [sp]
    b630:	b002      	add	sp, #8
    b632:	bc30      	pop	{r4, r5}
    b634:	4770      	bx	lr
    b636:	bf00      	nop
    b638:	00000000 	.word	0x00000000
    b63c:	43500000 	.word	0x43500000
    b640:	7fefffff 	.word	0x7fefffff
    b644:	7ff00000 	.word	0x7ff00000

0000b648 <__assert_func>:
    b648:	b500      	push	{lr}
    b64a:	4c0b      	ldr	r4, [pc, #44]	; (b678 <__assert_func+0x30>)
    b64c:	6825      	ldr	r5, [r4, #0]
    b64e:	4614      	mov	r4, r2
    b650:	68ee      	ldr	r6, [r5, #12]
    b652:	461a      	mov	r2, r3
    b654:	b085      	sub	sp, #20
    b656:	4603      	mov	r3, r0
    b658:	460d      	mov	r5, r1
    b65a:	b14c      	cbz	r4, b670 <__assert_func+0x28>
    b65c:	4907      	ldr	r1, [pc, #28]	; (b67c <__assert_func+0x34>)
    b65e:	9500      	str	r5, [sp, #0]
    b660:	e9cd 1401 	strd	r1, r4, [sp, #4]
    b664:	4630      	mov	r0, r6
    b666:	4906      	ldr	r1, [pc, #24]	; (b680 <__assert_func+0x38>)
    b668:	f001 fabe 	bl	cbe8 <fiprintf>
    b66c:	f7f7 f8c2 	bl	27f4 <abort>
    b670:	4904      	ldr	r1, [pc, #16]	; (b684 <__assert_func+0x3c>)
    b672:	460c      	mov	r4, r1
    b674:	e7f3      	b.n	b65e <__assert_func+0x16>
    b676:	bf00      	nop
    b678:	200081c0 	.word	0x200081c0
    b67c:	20000540 	.word	0x20000540
    b680:	20000550 	.word	0x20000550
    b684:	20007784 	.word	0x20007784

0000b688 <_calloc_r>:
    b688:	b538      	push	{r3, r4, r5, lr}
    b68a:	fba1 1402 	umull	r1, r4, r1, r2
    b68e:	bb8c      	cbnz	r4, b6f4 <_calloc_r+0x6c>
    b690:	f7f8 fd66 	bl	4160 <_malloc_r>
    b694:	4605      	mov	r5, r0
    b696:	b1e0      	cbz	r0, b6d2 <_calloc_r+0x4a>
    b698:	f850 2c04 	ldr.w	r2, [r0, #-4]
    b69c:	f022 0203 	bic.w	r2, r2, #3
    b6a0:	3a04      	subs	r2, #4
    b6a2:	2a24      	cmp	r2, #36	; 0x24
    b6a4:	d817      	bhi.n	b6d6 <_calloc_r+0x4e>
    b6a6:	2a13      	cmp	r2, #19
    b6a8:	d91a      	bls.n	b6e0 <_calloc_r+0x58>
    b6aa:	2a1b      	cmp	r2, #27
    b6ac:	e9c0 4400 	strd	r4, r4, [r0]
    b6b0:	d91d      	bls.n	b6ee <_calloc_r+0x66>
    b6b2:	2a24      	cmp	r2, #36	; 0x24
    b6b4:	bf14      	ite	ne
    b6b6:	f100 0210 	addne.w	r2, r0, #16
    b6ba:	f100 0218 	addeq.w	r2, r0, #24
    b6be:	f04f 0300 	mov.w	r3, #0
    b6c2:	e9c0 4402 	strd	r4, r4, [r0, #8]
    b6c6:	bf04      	itt	eq
    b6c8:	6104      	streq	r4, [r0, #16]
    b6ca:	6144      	streq	r4, [r0, #20]
    b6cc:	e9c2 3300 	strd	r3, r3, [r2]
    b6d0:	6093      	str	r3, [r2, #8]
    b6d2:	4628      	mov	r0, r5
    b6d4:	bd38      	pop	{r3, r4, r5, pc}
    b6d6:	4621      	mov	r1, r4
    b6d8:	f7fa fc62 	bl	5fa0 <memset>
    b6dc:	4628      	mov	r0, r5
    b6de:	bd38      	pop	{r3, r4, r5, pc}
    b6e0:	4602      	mov	r2, r0
    b6e2:	2300      	movs	r3, #0
    b6e4:	e9c2 3300 	strd	r3, r3, [r2]
    b6e8:	6093      	str	r3, [r2, #8]
    b6ea:	4628      	mov	r0, r5
    b6ec:	bd38      	pop	{r3, r4, r5, pc}
    b6ee:	f100 0208 	add.w	r2, r0, #8
    b6f2:	e7f6      	b.n	b6e2 <_calloc_r+0x5a>
    b6f4:	f7fa fdf0 	bl	62d8 <__errno>
    b6f8:	230c      	movs	r3, #12
    b6fa:	2500      	movs	r5, #0
    b6fc:	6003      	str	r3, [r0, #0]
    b6fe:	e7e8      	b.n	b6d2 <_calloc_r+0x4a>

0000b700 <quorem>:
    b700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b704:	6903      	ldr	r3, [r0, #16]
    b706:	690c      	ldr	r4, [r1, #16]
    b708:	42a3      	cmp	r3, r4
    b70a:	b083      	sub	sp, #12
    b70c:	f2c0 8087 	blt.w	b81e <quorem+0x11e>
    b710:	3c01      	subs	r4, #1
    b712:	f101 0514 	add.w	r5, r1, #20
    b716:	00a3      	lsls	r3, r4, #2
    b718:	f100 0814 	add.w	r8, r0, #20
    b71c:	9300      	str	r3, [sp, #0]
    b71e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    b722:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
    b726:	3301      	adds	r3, #1
    b728:	4681      	mov	r9, r0
    b72a:	429a      	cmp	r2, r3
    b72c:	eb08 0084 	add.w	r0, r8, r4, lsl #2
    b730:	eb05 0784 	add.w	r7, r5, r4, lsl #2
    b734:	9001      	str	r0, [sp, #4]
    b736:	fbb2 f6f3 	udiv	r6, r2, r3
    b73a:	d33b      	bcc.n	b7b4 <quorem+0xb4>
    b73c:	f04f 0c00 	mov.w	ip, #0
    b740:	46ae      	mov	lr, r5
    b742:	4640      	mov	r0, r8
    b744:	46e2      	mov	sl, ip
    b746:	4663      	mov	r3, ip
    b748:	f85e bb04 	ldr.w	fp, [lr], #4
    b74c:	6802      	ldr	r2, [r0, #0]
    b74e:	fa1f fc8b 	uxth.w	ip, fp
    b752:	fb06 330c 	mla	r3, r6, ip, r3
    b756:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    b75a:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
    b75e:	fb06 cc0b 	mla	ip, r6, fp, ip
    b762:	b29b      	uxth	r3, r3
    b764:	ebaa 0303 	sub.w	r3, sl, r3
    b768:	fa1f fa8c 	uxth.w	sl, ip
    b76c:	fa13 f382 	uxtah	r3, r3, r2
    b770:	ebca 4212 	rsb	r2, sl, r2, lsr #16
    b774:	eb02 4223 	add.w	r2, r2, r3, asr #16
    b778:	b29b      	uxth	r3, r3
    b77a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    b77e:	4577      	cmp	r7, lr
    b780:	f840 3b04 	str.w	r3, [r0], #4
    b784:	ea4f 4a22 	mov.w	sl, r2, asr #16
    b788:	ea4f 431c 	mov.w	r3, ip, lsr #16
    b78c:	d2dc      	bcs.n	b748 <quorem+0x48>
    b78e:	9b00      	ldr	r3, [sp, #0]
    b790:	f858 3003 	ldr.w	r3, [r8, r3]
    b794:	b973      	cbnz	r3, b7b4 <quorem+0xb4>
    b796:	9b01      	ldr	r3, [sp, #4]
    b798:	3b04      	subs	r3, #4
    b79a:	4598      	cmp	r8, r3
    b79c:	d304      	bcc.n	b7a8 <quorem+0xa8>
    b79e:	e007      	b.n	b7b0 <quorem+0xb0>
    b7a0:	4598      	cmp	r8, r3
    b7a2:	f104 34ff 	add.w	r4, r4, #4294967295
    b7a6:	d203      	bcs.n	b7b0 <quorem+0xb0>
    b7a8:	f853 2904 	ldr.w	r2, [r3], #-4
    b7ac:	2a00      	cmp	r2, #0
    b7ae:	d0f7      	beq.n	b7a0 <quorem+0xa0>
    b7b0:	f8c9 4010 	str.w	r4, [r9, #16]
    b7b4:	4648      	mov	r0, r9
    b7b6:	f7fc f8bf 	bl	7938 <__mcmp>
    b7ba:	2800      	cmp	r0, #0
    b7bc:	db2b      	blt.n	b816 <quorem+0x116>
    b7be:	3601      	adds	r6, #1
    b7c0:	4641      	mov	r1, r8
    b7c2:	2300      	movs	r3, #0
    b7c4:	f855 0b04 	ldr.w	r0, [r5], #4
    b7c8:	f8d1 c000 	ldr.w	ip, [r1]
    b7cc:	b282      	uxth	r2, r0
    b7ce:	1a9a      	subs	r2, r3, r2
    b7d0:	0c03      	lsrs	r3, r0, #16
    b7d2:	fa12 f28c 	uxtah	r2, r2, ip
    b7d6:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
    b7da:	eb03 4322 	add.w	r3, r3, r2, asr #16
    b7de:	b292      	uxth	r2, r2
    b7e0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    b7e4:	42af      	cmp	r7, r5
    b7e6:	f841 2b04 	str.w	r2, [r1], #4
    b7ea:	ea4f 4323 	mov.w	r3, r3, asr #16
    b7ee:	d2e9      	bcs.n	b7c4 <quorem+0xc4>
    b7f0:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
    b7f4:	eb08 0384 	add.w	r3, r8, r4, lsl #2
    b7f8:	b96a      	cbnz	r2, b816 <quorem+0x116>
    b7fa:	3b04      	subs	r3, #4
    b7fc:	4598      	cmp	r8, r3
    b7fe:	d304      	bcc.n	b80a <quorem+0x10a>
    b800:	e007      	b.n	b812 <quorem+0x112>
    b802:	4598      	cmp	r8, r3
    b804:	f104 34ff 	add.w	r4, r4, #4294967295
    b808:	d203      	bcs.n	b812 <quorem+0x112>
    b80a:	f853 2904 	ldr.w	r2, [r3], #-4
    b80e:	2a00      	cmp	r2, #0
    b810:	d0f7      	beq.n	b802 <quorem+0x102>
    b812:	f8c9 4010 	str.w	r4, [r9, #16]
    b816:	4630      	mov	r0, r6
    b818:	b003      	add	sp, #12
    b81a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b81e:	2000      	movs	r0, #0
    b820:	b003      	add	sp, #12
    b822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b826:	bf00      	nop

0000b828 <_dtoa_r>:
    b828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b82c:	ed2d 8b02 	vpush	{d8}
    b830:	b08f      	sub	sp, #60	; 0x3c
    b832:	ed8d 0b02 	vstr	d0, [sp, #8]
    b836:	9101      	str	r1, [sp, #4]
    b838:	6b81      	ldr	r1, [r0, #56]	; 0x38
    b83a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    b83c:	9305      	str	r3, [sp, #20]
    b83e:	ec57 6b10 	vmov	r6, r7, d0
    b842:	4604      	mov	r4, r0
    b844:	4693      	mov	fp, r2
    b846:	b141      	cbz	r1, b85a <_dtoa_r+0x32>
    b848:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    b84a:	604a      	str	r2, [r1, #4]
    b84c:	2301      	movs	r3, #1
    b84e:	4093      	lsls	r3, r2
    b850:	608b      	str	r3, [r1, #8]
    b852:	f7fb fdb9 	bl	73c8 <_Bfree>
    b856:	2300      	movs	r3, #0
    b858:	63a3      	str	r3, [r4, #56]	; 0x38
    b85a:	f1b7 0800 	subs.w	r8, r7, #0
    b85e:	bfb4      	ite	lt
    b860:	2301      	movlt	r3, #1
    b862:	2300      	movge	r3, #0
    b864:	602b      	str	r3, [r5, #0]
    b866:	4bbe      	ldr	r3, [pc, #760]	; (bb60 <_dtoa_r+0x338>)
    b868:	bfbc      	itt	lt
    b86a:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
    b86e:	f8cd 800c 	strlt.w	r8, [sp, #12]
    b872:	ea33 0308 	bics.w	r3, r3, r8
    b876:	f000 809f 	beq.w	b9b8 <_dtoa_r+0x190>
    b87a:	ed9d 8b02 	vldr	d8, [sp, #8]
    b87e:	eeb5 8b40 	vcmp.f64	d8, #0.0
    b882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b886:	d111      	bne.n	b8ac <_dtoa_r+0x84>
    b888:	9a05      	ldr	r2, [sp, #20]
    b88a:	2301      	movs	r3, #1
    b88c:	6013      	str	r3, [r2, #0]
    b88e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    b890:	2b00      	cmp	r3, #0
    b892:	f000 823f 	beq.w	bd14 <_dtoa_r+0x4ec>
    b896:	4bb3      	ldr	r3, [pc, #716]	; (bb64 <_dtoa_r+0x33c>)
    b898:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    b89a:	6013      	str	r3, [r2, #0]
    b89c:	3b01      	subs	r3, #1
    b89e:	9300      	str	r3, [sp, #0]
    b8a0:	9800      	ldr	r0, [sp, #0]
    b8a2:	b00f      	add	sp, #60	; 0x3c
    b8a4:	ecbd 8b02 	vpop	{d8}
    b8a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b8ac:	aa0c      	add	r2, sp, #48	; 0x30
    b8ae:	a90d      	add	r1, sp, #52	; 0x34
    b8b0:	4620      	mov	r0, r4
    b8b2:	eeb0 0b48 	vmov.f64	d0, d8
    b8b6:	f7fc f99f 	bl	7bf8 <__d2b>
    b8ba:	ea5f 5318 	movs.w	r3, r8, lsr #20
    b8be:	4605      	mov	r5, r0
    b8c0:	f040 8092 	bne.w	b9e8 <_dtoa_r+0x1c0>
    b8c4:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
    b8c8:	440b      	add	r3, r1
    b8ca:	f203 4232 	addw	r2, r3, #1074	; 0x432
    b8ce:	2a20      	cmp	r2, #32
    b8d0:	f340 82fa 	ble.w	bec8 <_dtoa_r+0x6a0>
    b8d4:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
    b8d8:	fa08 f802 	lsl.w	r8, r8, r2
    b8dc:	f203 4212 	addw	r2, r3, #1042	; 0x412
    b8e0:	40d6      	lsrs	r6, r2
    b8e2:	ea48 0206 	orr.w	r2, r8, r6
    b8e6:	ee07 2a10 	vmov	s14, r2
    b8ea:	eeb8 7b47 	vcvt.f64.u32	d7, s14
    b8ee:	1e58      	subs	r0, r3, #1
    b8f0:	ee17 6a90 	vmov	r6, s15
    b8f4:	ec53 2b17 	vmov	r2, r3, d7
    b8f8:	f04f 0a01 	mov.w	sl, #1
    b8fc:	f1a6 73f8 	sub.w	r3, r6, #32505856	; 0x1f00000
    b900:	ed9f 3b91 	vldr	d3, [pc, #580]	; bb48 <_dtoa_r+0x320>
    b904:	ed9f 7b92 	vldr	d7, [pc, #584]	; bb50 <_dtoa_r+0x328>
    b908:	ed9f 5b93 	vldr	d5, [pc, #588]	; bb58 <_dtoa_r+0x330>
    b90c:	ee06 0a90 	vmov	s13, r0
    b910:	ec43 2b12 	vmov	d2, r2, r3
    b914:	eeb8 4be6 	vcvt.f64.s32	d4, s13
    b918:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
    b91c:	ee32 6b46 	vsub.f64	d6, d2, d6
    b920:	eea6 7b03 	vfma.f64	d7, d6, d3
    b924:	eea4 7b05 	vfma.f64	d7, d4, d5
    b928:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    b92c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    b930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b934:	ee16 7a90 	vmov	r7, s13
    b938:	d508      	bpl.n	b94c <_dtoa_r+0x124>
    b93a:	eeb8 6be6 	vcvt.f64.s32	d6, s13
    b93e:	eeb4 6b47 	vcmp.f64	d6, d7
    b942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b946:	bf18      	it	ne
    b948:	f107 37ff 	addne.w	r7, r7, #4294967295
    b94c:	2f16      	cmp	r7, #22
    b94e:	f200 8145 	bhi.w	bbdc <_dtoa_r+0x3b4>
    b952:	4b85      	ldr	r3, [pc, #532]	; (bb68 <_dtoa_r+0x340>)
    b954:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    b958:	ed93 7b00 	vldr	d7, [r3]
    b95c:	eeb4 8bc7 	vcmpe.f64	d8, d7
    b960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b964:	d557      	bpl.n	ba16 <_dtoa_r+0x1ee>
    b966:	1a09      	subs	r1, r1, r0
    b968:	2300      	movs	r3, #0
    b96a:	f1b1 0801 	subs.w	r8, r1, #1
    b96e:	f107 37ff 	add.w	r7, r7, #4294967295
    b972:	930a      	str	r3, [sp, #40]	; 0x28
    b974:	f100 8139 	bmi.w	bbea <_dtoa_r+0x3c2>
    b978:	2300      	movs	r3, #0
    b97a:	9306      	str	r3, [sp, #24]
    b97c:	2f00      	cmp	r7, #0
    b97e:	da52      	bge.n	ba26 <_dtoa_r+0x1fe>
    b980:	9b06      	ldr	r3, [sp, #24]
    b982:	9704      	str	r7, [sp, #16]
    b984:	1bdb      	subs	r3, r3, r7
    b986:	9306      	str	r3, [sp, #24]
    b988:	427b      	negs	r3, r7
    b98a:	9308      	str	r3, [sp, #32]
    b98c:	9b01      	ldr	r3, [sp, #4]
    b98e:	2b09      	cmp	r3, #9
    b990:	f04f 0700 	mov.w	r7, #0
    b994:	d84e      	bhi.n	ba34 <_dtoa_r+0x20c>
    b996:	2b05      	cmp	r3, #5
    b998:	f340 829d 	ble.w	bed6 <_dtoa_r+0x6ae>
    b99c:	3b04      	subs	r3, #4
    b99e:	9301      	str	r3, [sp, #4]
    b9a0:	2600      	movs	r6, #0
    b9a2:	9b01      	ldr	r3, [sp, #4]
    b9a4:	1e9a      	subs	r2, r3, #2
    b9a6:	2a03      	cmp	r2, #3
    b9a8:	f200 8125 	bhi.w	bbf6 <_dtoa_r+0x3ce>
    b9ac:	e8df f012 	tbh	[pc, r2, lsl #1]
    b9b0:	03a703aa 	.word	0x03a703aa
    b9b4:	037e039d 	.word	0x037e039d
    b9b8:	9a05      	ldr	r2, [sp, #20]
    b9ba:	f3c8 0813 	ubfx	r8, r8, #0, #20
    b9be:	f242 730f 	movw	r3, #9999	; 0x270f
    b9c2:	ea58 0806 	orrs.w	r8, r8, r6
    b9c6:	6013      	str	r3, [r2, #0]
    b9c8:	d11e      	bne.n	ba08 <_dtoa_r+0x1e0>
    b9ca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    b9cc:	2b00      	cmp	r3, #0
    b9ce:	f000 8591 	beq.w	c4f4 <_dtoa_r+0xccc>
    b9d2:	4b66      	ldr	r3, [pc, #408]	; (bb6c <_dtoa_r+0x344>)
    b9d4:	9300      	str	r3, [sp, #0]
    b9d6:	3308      	adds	r3, #8
    b9d8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    b9da:	9800      	ldr	r0, [sp, #0]
    b9dc:	6013      	str	r3, [r2, #0]
    b9de:	b00f      	add	sp, #60	; 0x3c
    b9e0:	ecbd 8b02 	vpop	{d8}
    b9e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b9e8:	ee18 6a90 	vmov	r6, s17
    b9ec:	f3c6 0613 	ubfx	r6, r6, #0, #20
    b9f0:	f2a3 30ff 	subw	r0, r3, #1023	; 0x3ff
    b9f4:	ec53 2b18 	vmov	r2, r3, d8
    b9f8:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
    b9fc:	990c      	ldr	r1, [sp, #48]	; 0x30
    b9fe:	f04f 0a00 	mov.w	sl, #0
    ba02:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    ba06:	e77b      	b.n	b900 <_dtoa_r+0xd8>
    ba08:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    ba0a:	2b00      	cmp	r3, #0
    ba0c:	f040 833b 	bne.w	c086 <_dtoa_r+0x85e>
    ba10:	4b57      	ldr	r3, [pc, #348]	; (bb70 <_dtoa_r+0x348>)
    ba12:	9300      	str	r3, [sp, #0]
    ba14:	e744      	b.n	b8a0 <_dtoa_r+0x78>
    ba16:	1a09      	subs	r1, r1, r0
    ba18:	2300      	movs	r3, #0
    ba1a:	f1b1 0801 	subs.w	r8, r1, #1
    ba1e:	930a      	str	r3, [sp, #40]	; 0x28
    ba20:	f100 80e3 	bmi.w	bbea <_dtoa_r+0x3c2>
    ba24:	9306      	str	r3, [sp, #24]
    ba26:	2300      	movs	r3, #0
    ba28:	9308      	str	r3, [sp, #32]
    ba2a:	9b01      	ldr	r3, [sp, #4]
    ba2c:	9704      	str	r7, [sp, #16]
    ba2e:	2b09      	cmp	r3, #9
    ba30:	44b8      	add	r8, r7
    ba32:	d9b0      	bls.n	b996 <_dtoa_r+0x16e>
    ba34:	2300      	movs	r3, #0
    ba36:	2601      	movs	r6, #1
    ba38:	9301      	str	r3, [sp, #4]
    ba3a:	9607      	str	r6, [sp, #28]
    ba3c:	f04f 39ff 	mov.w	r9, #4294967295
    ba40:	469b      	mov	fp, r3
    ba42:	2100      	movs	r1, #0
    ba44:	63e1      	str	r1, [r4, #60]	; 0x3c
    ba46:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    ba4a:	4620      	mov	r0, r4
    ba4c:	f7fb fc96 	bl	737c <_Balloc>
    ba50:	9000      	str	r0, [sp, #0]
    ba52:	2800      	cmp	r0, #0
    ba54:	f000 8540 	beq.w	c4d8 <_dtoa_r+0xcb0>
    ba58:	9b00      	ldr	r3, [sp, #0]
    ba5a:	63a3      	str	r3, [r4, #56]	; 0x38
    ba5c:	f1b9 0f0e 	cmp.w	r9, #14
    ba60:	f200 80dc 	bhi.w	bc1c <_dtoa_r+0x3f4>
    ba64:	2e00      	cmp	r6, #0
    ba66:	f000 80d9 	beq.w	bc1c <_dtoa_r+0x3f4>
    ba6a:	9b04      	ldr	r3, [sp, #16]
    ba6c:	2b00      	cmp	r3, #0
    ba6e:	f340 83de 	ble.w	c22e <_dtoa_r+0xa06>
    ba72:	4a3d      	ldr	r2, [pc, #244]	; (bb68 <_dtoa_r+0x340>)
    ba74:	f003 010f 	and.w	r1, r3, #15
    ba78:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    ba7c:	ed92 7b00 	vldr	d7, [r2]
    ba80:	111a      	asrs	r2, r3, #4
    ba82:	05db      	lsls	r3, r3, #23
    ba84:	f140 8382 	bpl.w	c18c <_dtoa_r+0x964>
    ba88:	493a      	ldr	r1, [pc, #232]	; (bb74 <_dtoa_r+0x34c>)
    ba8a:	ed91 6b08 	vldr	d6, [r1, #32]
    ba8e:	f002 020f 	and.w	r2, r2, #15
    ba92:	2003      	movs	r0, #3
    ba94:	ee88 5b06 	vdiv.f64	d5, d8, d6
    ba98:	b15a      	cbz	r2, bab2 <_dtoa_r+0x28a>
    ba9a:	4936      	ldr	r1, [pc, #216]	; (bb74 <_dtoa_r+0x34c>)
    ba9c:	07d6      	lsls	r6, r2, #31
    ba9e:	d504      	bpl.n	baaa <_dtoa_r+0x282>
    baa0:	ed91 6b00 	vldr	d6, [r1]
    baa4:	3001      	adds	r0, #1
    baa6:	ee27 7b06 	vmul.f64	d7, d7, d6
    baaa:	1052      	asrs	r2, r2, #1
    baac:	f101 0108 	add.w	r1, r1, #8
    bab0:	d1f4      	bne.n	ba9c <_dtoa_r+0x274>
    bab2:	ee85 6b07 	vdiv.f64	d6, d5, d7
    bab6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    bab8:	b13b      	cbz	r3, baca <_dtoa_r+0x2a2>
    baba:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    babe:	eeb4 6bc7 	vcmpe.f64	d6, d7
    bac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    bac6:	f100 84ae 	bmi.w	c426 <_dtoa_r+0xbfe>
    baca:	ee07 0a90 	vmov	s15, r0
    bace:	eeb8 5be7 	vcvt.f64.s32	d5, s15
    bad2:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    bad6:	eea5 7b06 	vfma.f64	d7, d5, d6
    bada:	ee17 2a90 	vmov	r2, s15
    bade:	ec51 0b17 	vmov	r0, r1, d7
    bae2:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
    bae6:	f1b9 0f00 	cmp.w	r9, #0
    baea:	f000 8388 	beq.w	c1fe <_dtoa_r+0x9d6>
    baee:	9e04      	ldr	r6, [sp, #16]
    baf0:	464a      	mov	r2, r9
    baf2:	9b07      	ldr	r3, [sp, #28]
    baf4:	2b00      	cmp	r3, #0
    baf6:	f000 8447 	beq.w	c388 <_dtoa_r+0xb60>
    bafa:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
    bafe:	4b1a      	ldr	r3, [pc, #104]	; (bb68 <_dtoa_r+0x340>)
    bb00:	eefd 4bc6 	vcvt.s32.f64	s9, d6
    bb04:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
    bb08:	eeb8 7be4 	vcvt.f64.s32	d7, s9
    bb0c:	ee36 7b47 	vsub.f64	d7, d6, d7
    bb10:	ed1c 6b02 	vldr	d6, [ip, #-8]
    bb14:	ee83 5b06 	vdiv.f64	d5, d3, d6
    bb18:	ec41 0b16 	vmov	d6, r0, r1
    bb1c:	ee14 0a90 	vmov	r0, s9
    bb20:	ee35 5b46 	vsub.f64	d5, d5, d6
    bb24:	9900      	ldr	r1, [sp, #0]
    bb26:	eeb4 5bc7 	vcmpe.f64	d5, d7
    bb2a:	3030      	adds	r0, #48	; 0x30
    bb2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    bb30:	f801 0b01 	strb.w	r0, [r1], #1
    bb34:	f300 84ac 	bgt.w	c490 <_dtoa_r+0xc68>
    bb38:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
    bb3c:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    bb40:	f04f 0c00 	mov.w	ip, #0
    bb44:	e031      	b.n	bbaa <_dtoa_r+0x382>
    bb46:	bf00      	nop
    bb48:	636f4361 	.word	0x636f4361
    bb4c:	3fd287a7 	.word	0x3fd287a7
    bb50:	8b60c8b3 	.word	0x8b60c8b3
    bb54:	3fc68a28 	.word	0x3fc68a28
    bb58:	509f79fb 	.word	0x509f79fb
    bb5c:	3fd34413 	.word	0x3fd34413
    bb60:	7ff00000 	.word	0x7ff00000
    bb64:	20000935 	.word	0x20000935
    bb68:	200002a8 	.word	0x200002a8
    bb6c:	20000860 	.word	0x20000860
    bb70:	2000086c 	.word	0x2000086c
    bb74:	20000280 	.word	0x20000280
    bb78:	f10c 0c01 	add.w	ip, ip, #1
    bb7c:	4594      	cmp	ip, r2
    bb7e:	da4d      	bge.n	bc1c <_dtoa_r+0x3f4>
    bb80:	ee27 7b04 	vmul.f64	d7, d7, d4
    bb84:	ee25 5b04 	vmul.f64	d5, d5, d4
    bb88:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    bb8c:	ee16 3a90 	vmov	r3, s13
    bb90:	eeb8 3be6 	vcvt.f64.s32	d3, s13
    bb94:	3330      	adds	r3, #48	; 0x30
    bb96:	ee37 7b43 	vsub.f64	d7, d7, d3
    bb9a:	eeb4 7bc5 	vcmpe.f64	d7, d5
    bb9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    bba2:	f801 3b01 	strb.w	r3, [r1], #1
    bba6:	f100 8473 	bmi.w	c490 <_dtoa_r+0xc68>
    bbaa:	ee32 6b47 	vsub.f64	d6, d2, d7
    bbae:	eeb4 6bc5 	vcmpe.f64	d6, d5
    bbb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    bbb6:	d5df      	bpl.n	bb78 <_dtoa_r+0x350>
    bbb8:	9a00      	ldr	r2, [sp, #0]
    bbba:	9604      	str	r6, [sp, #16]
    bbbc:	e002      	b.n	bbc4 <_dtoa_r+0x39c>
    bbbe:	428a      	cmp	r2, r1
    bbc0:	f000 8450 	beq.w	c464 <_dtoa_r+0xc3c>
    bbc4:	4689      	mov	r9, r1
    bbc6:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
    bbca:	2b39      	cmp	r3, #57	; 0x39
    bbcc:	d0f7      	beq.n	bbbe <_dtoa_r+0x396>
    bbce:	3301      	adds	r3, #1
    bbd0:	b2db      	uxtb	r3, r3
    bbd2:	700b      	strb	r3, [r1, #0]
    bbd4:	9b04      	ldr	r3, [sp, #16]
    bbd6:	3301      	adds	r3, #1
    bbd8:	9304      	str	r3, [sp, #16]
    bbda:	e155      	b.n	be88 <_dtoa_r+0x660>
    bbdc:	1a09      	subs	r1, r1, r0
    bbde:	2301      	movs	r3, #1
    bbe0:	f1b1 0801 	subs.w	r8, r1, #1
    bbe4:	930a      	str	r3, [sp, #40]	; 0x28
    bbe6:	f57f aec7 	bpl.w	b978 <_dtoa_r+0x150>
    bbea:	f1c1 0301 	rsb	r3, r1, #1
    bbee:	9306      	str	r3, [sp, #24]
    bbf0:	f04f 0800 	mov.w	r8, #0
    bbf4:	e6c2      	b.n	b97c <_dtoa_r+0x154>
    bbf6:	2600      	movs	r6, #0
    bbf8:	63e6      	str	r6, [r4, #60]	; 0x3c
    bbfa:	4631      	mov	r1, r6
    bbfc:	4620      	mov	r0, r4
    bbfe:	f7fb fbbd 	bl	737c <_Balloc>
    bc02:	9000      	str	r0, [sp, #0]
    bc04:	2800      	cmp	r0, #0
    bc06:	f000 8467 	beq.w	c4d8 <_dtoa_r+0xcb0>
    bc0a:	9b00      	ldr	r3, [sp, #0]
    bc0c:	63a3      	str	r3, [r4, #56]	; 0x38
    bc0e:	f04f 33ff 	mov.w	r3, #4294967295
    bc12:	930b      	str	r3, [sp, #44]	; 0x2c
    bc14:	4699      	mov	r9, r3
    bc16:	2301      	movs	r3, #1
    bc18:	46b3      	mov	fp, r6
    bc1a:	9307      	str	r3, [sp, #28]
    bc1c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    bc1e:	2a00      	cmp	r2, #0
    bc20:	db55      	blt.n	bcce <_dtoa_r+0x4a6>
    bc22:	9904      	ldr	r1, [sp, #16]
    bc24:	290e      	cmp	r1, #14
    bc26:	dc52      	bgt.n	bcce <_dtoa_r+0x4a6>
    bc28:	4bb7      	ldr	r3, [pc, #732]	; (bf08 <_dtoa_r+0x6e0>)
    bc2a:	f1bb 0f00 	cmp.w	fp, #0
    bc2e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    bc32:	ed93 6b00 	vldr	d6, [r3]
    bc36:	da15      	bge.n	bc64 <_dtoa_r+0x43c>
    bc38:	f1b9 0f00 	cmp.w	r9, #0
    bc3c:	dc12      	bgt.n	bc64 <_dtoa_r+0x43c>
    bc3e:	f040 82f2 	bne.w	c226 <_dtoa_r+0x9fe>
    bc42:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
    bc46:	ee26 7b07 	vmul.f64	d7, d6, d7
    bc4a:	eeb4 8bc7 	vcmpe.f64	d8, d7
    bc4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    bc52:	46ca      	mov	sl, r9
    bc54:	464e      	mov	r6, r9
    bc56:	f200 826d 	bhi.w	c134 <_dtoa_r+0x90c>
    bc5a:	f8dd 8000 	ldr.w	r8, [sp]
    bc5e:	ea6f 0b0b 	mvn.w	fp, fp
    bc62:	e270      	b.n	c146 <_dtoa_r+0x91e>
    bc64:	ee88 7b06 	vdiv.f64	d7, d8, d6
    bc68:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    bc6c:	9900      	ldr	r1, [sp, #0]
    bc6e:	ee17 3a10 	vmov	r3, s14
    bc72:	f1b9 0f01 	cmp.w	r9, #1
    bc76:	f103 0330 	add.w	r3, r3, #48	; 0x30
    bc7a:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
    bc7e:	f801 3b01 	strb.w	r3, [r1], #1
    bc82:	eea5 8b46 	vfms.f64	d8, d5, d6
    bc86:	f000 8334 	beq.w	c2f2 <_dtoa_r+0xaca>
    bc8a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    bc8e:	2301      	movs	r3, #1
    bc90:	e011      	b.n	bcb6 <_dtoa_r+0x48e>
    bc92:	ee88 7b06 	vdiv.f64	d7, d8, d6
    bc96:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    bc9a:	3301      	adds	r3, #1
    bc9c:	ee17 2a10 	vmov	r2, s14
    bca0:	454b      	cmp	r3, r9
    bca2:	f102 0230 	add.w	r2, r2, #48	; 0x30
    bca6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
    bcaa:	f801 2b01 	strb.w	r2, [r1], #1
    bcae:	eea5 8b46 	vfms.f64	d8, d5, d6
    bcb2:	f000 831e 	beq.w	c2f2 <_dtoa_r+0xaca>
    bcb6:	ee28 8b04 	vmul.f64	d8, d8, d4
    bcba:	eeb5 8b40 	vcmp.f64	d8, #0.0
    bcbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    bcc2:	d1e6      	bne.n	bc92 <_dtoa_r+0x46a>
    bcc4:	9b04      	ldr	r3, [sp, #16]
    bcc6:	3301      	adds	r3, #1
    bcc8:	9304      	str	r3, [sp, #16]
    bcca:	4689      	mov	r9, r1
    bccc:	e0dc      	b.n	be88 <_dtoa_r+0x660>
    bcce:	9b07      	ldr	r3, [sp, #28]
    bcd0:	b343      	cbz	r3, bd24 <_dtoa_r+0x4fc>
    bcd2:	9b01      	ldr	r3, [sp, #4]
    bcd4:	2b01      	cmp	r3, #1
    bcd6:	f340 8276 	ble.w	c1c6 <_dtoa_r+0x99e>
    bcda:	9b08      	ldr	r3, [sp, #32]
    bcdc:	f109 3aff 	add.w	sl, r9, #4294967295
    bce0:	4553      	cmp	r3, sl
    bce2:	f280 823f 	bge.w	c164 <_dtoa_r+0x93c>
    bce6:	9b08      	ldr	r3, [sp, #32]
    bce8:	f8cd a020 	str.w	sl, [sp, #32]
    bcec:	ebaa 0203 	sub.w	r2, sl, r3
    bcf0:	4417      	add	r7, r2
    bcf2:	f04f 0a00 	mov.w	sl, #0
    bcf6:	f1b9 0f00 	cmp.w	r9, #0
    bcfa:	f2c0 8325 	blt.w	c348 <_dtoa_r+0xb20>
    bcfe:	9b06      	ldr	r3, [sp, #24]
    bd00:	9309      	str	r3, [sp, #36]	; 0x24
    bd02:	444b      	add	r3, r9
    bd04:	44c8      	add	r8, r9
    bd06:	9306      	str	r3, [sp, #24]
    bd08:	2101      	movs	r1, #1
    bd0a:	4620      	mov	r0, r4
    bd0c:	f7fb fc60 	bl	75d0 <__i2b>
    bd10:	4606      	mov	r6, r0
    bd12:	e00c      	b.n	bd2e <_dtoa_r+0x506>
    bd14:	4b7d      	ldr	r3, [pc, #500]	; (bf0c <_dtoa_r+0x6e4>)
    bd16:	9300      	str	r3, [sp, #0]
    bd18:	9800      	ldr	r0, [sp, #0]
    bd1a:	b00f      	add	sp, #60	; 0x3c
    bd1c:	ecbd 8b02 	vpop	{d8}
    bd20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bd24:	9b06      	ldr	r3, [sp, #24]
    bd26:	f8dd a020 	ldr.w	sl, [sp, #32]
    bd2a:	9e07      	ldr	r6, [sp, #28]
    bd2c:	9309      	str	r3, [sp, #36]	; 0x24
    bd2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bd30:	b16b      	cbz	r3, bd4e <_dtoa_r+0x526>
    bd32:	f1b8 0f00 	cmp.w	r8, #0
    bd36:	dd0a      	ble.n	bd4e <_dtoa_r+0x526>
    bd38:	4543      	cmp	r3, r8
    bd3a:	9906      	ldr	r1, [sp, #24]
    bd3c:	461a      	mov	r2, r3
    bd3e:	bfa8      	it	ge
    bd40:	4642      	movge	r2, r8
    bd42:	1a89      	subs	r1, r1, r2
    bd44:	1a9b      	subs	r3, r3, r2
    bd46:	9106      	str	r1, [sp, #24]
    bd48:	9309      	str	r3, [sp, #36]	; 0x24
    bd4a:	eba8 0802 	sub.w	r8, r8, r2
    bd4e:	9b08      	ldr	r3, [sp, #32]
    bd50:	b163      	cbz	r3, bd6c <_dtoa_r+0x544>
    bd52:	9b07      	ldr	r3, [sp, #28]
    bd54:	2b00      	cmp	r3, #0
    bd56:	f000 82a7 	beq.w	c2a8 <_dtoa_r+0xa80>
    bd5a:	f1ba 0f00 	cmp.w	sl, #0
    bd5e:	f300 8204 	bgt.w	c16a <_dtoa_r+0x942>
    bd62:	9b08      	ldr	r3, [sp, #32]
    bd64:	ebb3 020a 	subs.w	r2, r3, sl
    bd68:	f040 82ff 	bne.w	c36a <_dtoa_r+0xb42>
    bd6c:	2101      	movs	r1, #1
    bd6e:	4620      	mov	r0, r4
    bd70:	f7fb fc2e 	bl	75d0 <__i2b>
    bd74:	2f00      	cmp	r7, #0
    bd76:	4682      	mov	sl, r0
    bd78:	f300 80af 	bgt.w	beda <_dtoa_r+0x6b2>
    bd7c:	9b01      	ldr	r3, [sp, #4]
    bd7e:	2b01      	cmp	r3, #1
    bd80:	f340 8187 	ble.w	c092 <_dtoa_r+0x86a>
    bd84:	2300      	movs	r3, #0
    bd86:	9308      	str	r3, [sp, #32]
    bd88:	2001      	movs	r0, #1
    bd8a:	2f00      	cmp	r7, #0
    bd8c:	f040 80b1 	bne.w	bef2 <_dtoa_r+0x6ca>
    bd90:	4440      	add	r0, r8
    bd92:	f010 001f 	ands.w	r0, r0, #31
    bd96:	f000 817a 	beq.w	c08e <_dtoa_r+0x866>
    bd9a:	f1c0 0220 	rsb	r2, r0, #32
    bd9e:	2a04      	cmp	r2, #4
    bda0:	f300 8088 	bgt.w	beb4 <_dtoa_r+0x68c>
    bda4:	f040 81f6 	bne.w	c194 <_dtoa_r+0x96c>
    bda8:	9b06      	ldr	r3, [sp, #24]
    bdaa:	2b00      	cmp	r3, #0
    bdac:	dd05      	ble.n	bdba <_dtoa_r+0x592>
    bdae:	4629      	mov	r1, r5
    bdb0:	461a      	mov	r2, r3
    bdb2:	4620      	mov	r0, r4
    bdb4:	f7fb fd48 	bl	7848 <__lshift>
    bdb8:	4605      	mov	r5, r0
    bdba:	f1b8 0f00 	cmp.w	r8, #0
    bdbe:	dd05      	ble.n	bdcc <_dtoa_r+0x5a4>
    bdc0:	4651      	mov	r1, sl
    bdc2:	4642      	mov	r2, r8
    bdc4:	4620      	mov	r0, r4
    bdc6:	f7fb fd3f 	bl	7848 <__lshift>
    bdca:	4682      	mov	sl, r0
    bdcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    bdce:	2b00      	cmp	r3, #0
    bdd0:	f040 813f 	bne.w	c052 <_dtoa_r+0x82a>
    bdd4:	f1b9 0f00 	cmp.w	r9, #0
    bdd8:	f340 8125 	ble.w	c026 <_dtoa_r+0x7fe>
    bddc:	9b07      	ldr	r3, [sp, #28]
    bdde:	2b00      	cmp	r3, #0
    bde0:	f040 80a3 	bne.w	bf2a <_dtoa_r+0x702>
    bde4:	9b04      	ldr	r3, [sp, #16]
    bde6:	3301      	adds	r3, #1
    bde8:	9304      	str	r3, [sp, #16]
    bdea:	f8dd 8000 	ldr.w	r8, [sp]
    bdee:	2701      	movs	r7, #1
    bdf0:	e007      	b.n	be02 <_dtoa_r+0x5da>
    bdf2:	4629      	mov	r1, r5
    bdf4:	2300      	movs	r3, #0
    bdf6:	220a      	movs	r2, #10
    bdf8:	4620      	mov	r0, r4
    bdfa:	f7fb faef 	bl	73dc <__multadd>
    bdfe:	3701      	adds	r7, #1
    be00:	4605      	mov	r5, r0
    be02:	4651      	mov	r1, sl
    be04:	4628      	mov	r0, r5
    be06:	f7ff fc7b 	bl	b700 <quorem>
    be0a:	45b9      	cmp	r9, r7
    be0c:	f100 0030 	add.w	r0, r0, #48	; 0x30
    be10:	f808 0b01 	strb.w	r0, [r8], #1
    be14:	dced      	bgt.n	bdf2 <_dtoa_r+0x5ca>
    be16:	f1b9 0f00 	cmp.w	r9, #0
    be1a:	9a00      	ldr	r2, [sp, #0]
    be1c:	bfcc      	ite	gt
    be1e:	46cb      	movgt	fp, r9
    be20:	f04f 0b01 	movle.w	fp, #1
    be24:	4603      	mov	r3, r0
    be26:	4493      	add	fp, r2
    be28:	2700      	movs	r7, #0
    be2a:	4629      	mov	r1, r5
    be2c:	2201      	movs	r2, #1
    be2e:	4620      	mov	r0, r4
    be30:	9301      	str	r3, [sp, #4]
    be32:	f7fb fd09 	bl	7848 <__lshift>
    be36:	4651      	mov	r1, sl
    be38:	4605      	mov	r5, r0
    be3a:	f7fb fd7d 	bl	7938 <__mcmp>
    be3e:	2800      	cmp	r0, #0
    be40:	f340 81af 	ble.w	c1a2 <_dtoa_r+0x97a>
    be44:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
    be48:	9a00      	ldr	r2, [sp, #0]
    be4a:	f10b 3bff 	add.w	fp, fp, #4294967295
    be4e:	e004      	b.n	be5a <_dtoa_r+0x632>
    be50:	455a      	cmp	r2, fp
    be52:	f000 81b1 	beq.w	c1b8 <_dtoa_r+0x990>
    be56:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
    be5a:	2b39      	cmp	r3, #57	; 0x39
    be5c:	f10b 0901 	add.w	r9, fp, #1
    be60:	d0f6      	beq.n	be50 <_dtoa_r+0x628>
    be62:	3301      	adds	r3, #1
    be64:	f88b 3000 	strb.w	r3, [fp]
    be68:	4651      	mov	r1, sl
    be6a:	4620      	mov	r0, r4
    be6c:	f7fb faac 	bl	73c8 <_Bfree>
    be70:	b156      	cbz	r6, be88 <_dtoa_r+0x660>
    be72:	b12f      	cbz	r7, be80 <_dtoa_r+0x658>
    be74:	42b7      	cmp	r7, r6
    be76:	d003      	beq.n	be80 <_dtoa_r+0x658>
    be78:	4639      	mov	r1, r7
    be7a:	4620      	mov	r0, r4
    be7c:	f7fb faa4 	bl	73c8 <_Bfree>
    be80:	4631      	mov	r1, r6
    be82:	4620      	mov	r0, r4
    be84:	f7fb faa0 	bl	73c8 <_Bfree>
    be88:	4629      	mov	r1, r5
    be8a:	4620      	mov	r0, r4
    be8c:	f7fb fa9c 	bl	73c8 <_Bfree>
    be90:	2300      	movs	r3, #0
    be92:	f889 3000 	strb.w	r3, [r9]
    be96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    be9a:	601a      	str	r2, [r3, #0]
    be9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    be9e:	2b00      	cmp	r3, #0
    bea0:	f43f acfe 	beq.w	b8a0 <_dtoa_r+0x78>
    bea4:	9800      	ldr	r0, [sp, #0]
    bea6:	f8c3 9000 	str.w	r9, [r3]
    beaa:	b00f      	add	sp, #60	; 0x3c
    beac:	ecbd 8b02 	vpop	{d8}
    beb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    beb4:	f1c0 001c 	rsb	r0, r0, #28
    beb8:	9b06      	ldr	r3, [sp, #24]
    beba:	4403      	add	r3, r0
    bebc:	9306      	str	r3, [sp, #24]
    bebe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bec0:	4403      	add	r3, r0
    bec2:	9309      	str	r3, [sp, #36]	; 0x24
    bec4:	4480      	add	r8, r0
    bec6:	e76f      	b.n	bda8 <_dtoa_r+0x580>
    bec8:	f1c2 0220 	rsb	r2, r2, #32
    becc:	fa06 f202 	lsl.w	r2, r6, r2
    bed0:	ee07 2a10 	vmov	s14, r2
    bed4:	e509      	b.n	b8ea <_dtoa_r+0xc2>
    bed6:	2601      	movs	r6, #1
    bed8:	e563      	b.n	b9a2 <_dtoa_r+0x17a>
    beda:	4601      	mov	r1, r0
    bedc:	463a      	mov	r2, r7
    bede:	4620      	mov	r0, r4
    bee0:	f7fb fc52 	bl	7788 <__pow5mult>
    bee4:	9b01      	ldr	r3, [sp, #4]
    bee6:	2b01      	cmp	r3, #1
    bee8:	4682      	mov	sl, r0
    beea:	f340 81c5 	ble.w	c278 <_dtoa_r+0xa50>
    beee:	2300      	movs	r3, #0
    bef0:	9308      	str	r3, [sp, #32]
    bef2:	f8da 2010 	ldr.w	r2, [sl, #16]
    bef6:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
    befa:	6910      	ldr	r0, [r2, #16]
    befc:	f7fb fb18 	bl	7530 <__hi0bits>
    bf00:	f1c0 0020 	rsb	r0, r0, #32
    bf04:	e744      	b.n	bd90 <_dtoa_r+0x568>
    bf06:	bf00      	nop
    bf08:	200002a8 	.word	0x200002a8
    bf0c:	20000934 	.word	0x20000934
    bf10:	4631      	mov	r1, r6
    bf12:	2300      	movs	r3, #0
    bf14:	220a      	movs	r2, #10
    bf16:	4620      	mov	r0, r4
    bf18:	f7fb fa60 	bl	73dc <__multadd>
    bf1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    bf1e:	2b00      	cmp	r3, #0
    bf20:	4606      	mov	r6, r0
    bf22:	f340 82ce 	ble.w	c4c2 <_dtoa_r+0xc9a>
    bf26:	9704      	str	r7, [sp, #16]
    bf28:	4699      	mov	r9, r3
    bf2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bf2c:	2b00      	cmp	r3, #0
    bf2e:	dd05      	ble.n	bf3c <_dtoa_r+0x714>
    bf30:	4631      	mov	r1, r6
    bf32:	461a      	mov	r2, r3
    bf34:	4620      	mov	r0, r4
    bf36:	f7fb fc87 	bl	7848 <__lshift>
    bf3a:	4606      	mov	r6, r0
    bf3c:	9b08      	ldr	r3, [sp, #32]
    bf3e:	2b00      	cmp	r3, #0
    bf40:	f040 81eb 	bne.w	c31a <_dtoa_r+0xaf2>
    bf44:	46b0      	mov	r8, r6
    bf46:	9b02      	ldr	r3, [sp, #8]
    bf48:	9f00      	ldr	r7, [sp, #0]
    bf4a:	f003 0201 	and.w	r2, r3, #1
    bf4e:	1e7b      	subs	r3, r7, #1
    bf50:	444b      	add	r3, r9
    bf52:	9308      	str	r3, [sp, #32]
    bf54:	9b01      	ldr	r3, [sp, #4]
    bf56:	920a      	str	r2, [sp, #40]	; 0x28
    bf58:	4313      	orrs	r3, r2
    bf5a:	9309      	str	r3, [sp, #36]	; 0x24
    bf5c:	4651      	mov	r1, sl
    bf5e:	4628      	mov	r0, r5
    bf60:	f7ff fbce 	bl	b700 <quorem>
    bf64:	4631      	mov	r1, r6
    bf66:	4683      	mov	fp, r0
    bf68:	4628      	mov	r0, r5
    bf6a:	f7fb fce5 	bl	7938 <__mcmp>
    bf6e:	4642      	mov	r2, r8
    bf70:	4651      	mov	r1, sl
    bf72:	4681      	mov	r9, r0
    bf74:	4620      	mov	r0, r4
    bf76:	f7fb fd01 	bl	797c <__mdiff>
    bf7a:	68c2      	ldr	r2, [r0, #12]
    bf7c:	4601      	mov	r1, r0
    bf7e:	f10b 0330 	add.w	r3, fp, #48	; 0x30
    bf82:	2a00      	cmp	r2, #0
    bf84:	d142      	bne.n	c00c <_dtoa_r+0x7e4>
    bf86:	e9cd 0306 	strd	r0, r3, [sp, #24]
    bf8a:	4628      	mov	r0, r5
    bf8c:	f7fb fcd4 	bl	7938 <__mcmp>
    bf90:	9906      	ldr	r1, [sp, #24]
    bf92:	9002      	str	r0, [sp, #8]
    bf94:	4620      	mov	r0, r4
    bf96:	f7fb fa17 	bl	73c8 <_Bfree>
    bf9a:	9a02      	ldr	r2, [sp, #8]
    bf9c:	9b07      	ldr	r3, [sp, #28]
    bf9e:	b91a      	cbnz	r2, bfa8 <_dtoa_r+0x780>
    bfa0:	9909      	ldr	r1, [sp, #36]	; 0x24
    bfa2:	2900      	cmp	r1, #0
    bfa4:	f000 827e 	beq.w	c4a4 <_dtoa_r+0xc7c>
    bfa8:	f1b9 0f00 	cmp.w	r9, #0
    bfac:	f2c0 8183 	blt.w	c2b6 <_dtoa_r+0xa8e>
    bfb0:	9901      	ldr	r1, [sp, #4]
    bfb2:	ea49 0901 	orr.w	r9, r9, r1
    bfb6:	990a      	ldr	r1, [sp, #40]	; 0x28
    bfb8:	ea51 0909 	orrs.w	r9, r1, r9
    bfbc:	f000 817b 	beq.w	c2b6 <_dtoa_r+0xa8e>
    bfc0:	2a00      	cmp	r2, #0
    bfc2:	f300 81c6 	bgt.w	c352 <_dtoa_r+0xb2a>
    bfc6:	9a08      	ldr	r2, [sp, #32]
    bfc8:	703b      	strb	r3, [r7, #0]
    bfca:	f107 0901 	add.w	r9, r7, #1
    bfce:	4297      	cmp	r7, r2
    bfd0:	46cb      	mov	fp, r9
    bfd2:	f000 81c4 	beq.w	c35e <_dtoa_r+0xb36>
    bfd6:	4629      	mov	r1, r5
    bfd8:	2300      	movs	r3, #0
    bfda:	220a      	movs	r2, #10
    bfdc:	4620      	mov	r0, r4
    bfde:	f7fb f9fd 	bl	73dc <__multadd>
    bfe2:	4546      	cmp	r6, r8
    bfe4:	4605      	mov	r5, r0
    bfe6:	4631      	mov	r1, r6
    bfe8:	f04f 0300 	mov.w	r3, #0
    bfec:	f04f 020a 	mov.w	r2, #10
    bff0:	4620      	mov	r0, r4
    bff2:	d012      	beq.n	c01a <_dtoa_r+0x7f2>
    bff4:	f7fb f9f2 	bl	73dc <__multadd>
    bff8:	4641      	mov	r1, r8
    bffa:	4606      	mov	r6, r0
    bffc:	2300      	movs	r3, #0
    bffe:	220a      	movs	r2, #10
    c000:	4620      	mov	r0, r4
    c002:	f7fb f9eb 	bl	73dc <__multadd>
    c006:	464f      	mov	r7, r9
    c008:	4680      	mov	r8, r0
    c00a:	e7a7      	b.n	bf5c <_dtoa_r+0x734>
    c00c:	4620      	mov	r0, r4
    c00e:	9302      	str	r3, [sp, #8]
    c010:	f7fb f9da 	bl	73c8 <_Bfree>
    c014:	9b02      	ldr	r3, [sp, #8]
    c016:	2201      	movs	r2, #1
    c018:	e7c6      	b.n	bfa8 <_dtoa_r+0x780>
    c01a:	f7fb f9df 	bl	73dc <__multadd>
    c01e:	464f      	mov	r7, r9
    c020:	4606      	mov	r6, r0
    c022:	4680      	mov	r8, r0
    c024:	e79a      	b.n	bf5c <_dtoa_r+0x734>
    c026:	9b01      	ldr	r3, [sp, #4]
    c028:	2b02      	cmp	r3, #2
    c02a:	dc71      	bgt.n	c110 <_dtoa_r+0x8e8>
    c02c:	9b07      	ldr	r3, [sp, #28]
    c02e:	2b00      	cmp	r3, #0
    c030:	f47f af7b 	bne.w	bf2a <_dtoa_r+0x702>
    c034:	9b04      	ldr	r3, [sp, #16]
    c036:	4651      	mov	r1, sl
    c038:	3301      	adds	r3, #1
    c03a:	4628      	mov	r0, r5
    c03c:	9304      	str	r3, [sp, #16]
    c03e:	f7ff fb5f 	bl	b700 <quorem>
    c042:	f8dd b000 	ldr.w	fp, [sp]
    c046:	f100 0330 	add.w	r3, r0, #48	; 0x30
    c04a:	f80b 3b01 	strb.w	r3, [fp], #1
    c04e:	2700      	movs	r7, #0
    c050:	e6eb      	b.n	be2a <_dtoa_r+0x602>
    c052:	4651      	mov	r1, sl
    c054:	4628      	mov	r0, r5
    c056:	f7fb fc6f 	bl	7938 <__mcmp>
    c05a:	2800      	cmp	r0, #0
    c05c:	f6bf aeba 	bge.w	bdd4 <_dtoa_r+0x5ac>
    c060:	4629      	mov	r1, r5
    c062:	2300      	movs	r3, #0
    c064:	220a      	movs	r2, #10
    c066:	4620      	mov	r0, r4
    c068:	f7fb f9b8 	bl	73dc <__multadd>
    c06c:	9b04      	ldr	r3, [sp, #16]
    c06e:	1e5f      	subs	r7, r3, #1
    c070:	9b07      	ldr	r3, [sp, #28]
    c072:	4605      	mov	r5, r0
    c074:	2b00      	cmp	r3, #0
    c076:	f47f af4b 	bne.w	bf10 <_dtoa_r+0x6e8>
    c07a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c07c:	2b00      	cmp	r3, #0
    c07e:	f340 8218 	ble.w	c4b2 <_dtoa_r+0xc8a>
    c082:	4699      	mov	r9, r3
    c084:	e6b1      	b.n	bdea <_dtoa_r+0x5c2>
    c086:	4bbc      	ldr	r3, [pc, #752]	; (c378 <_dtoa_r+0xb50>)
    c088:	9300      	str	r3, [sp, #0]
    c08a:	3303      	adds	r3, #3
    c08c:	e4a4      	b.n	b9d8 <_dtoa_r+0x1b0>
    c08e:	201c      	movs	r0, #28
    c090:	e712      	b.n	beb8 <_dtoa_r+0x690>
    c092:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    c096:	2800      	cmp	r0, #0
    c098:	f47f ae74 	bne.w	bd84 <_dtoa_r+0x55c>
    c09c:	f3c1 0213 	ubfx	r2, r1, #0, #20
    c0a0:	2a00      	cmp	r2, #0
    c0a2:	f000 80f4 	beq.w	c28e <_dtoa_r+0xa66>
    c0a6:	9b02      	ldr	r3, [sp, #8]
    c0a8:	9308      	str	r3, [sp, #32]
    c0aa:	e66d      	b.n	bd88 <_dtoa_r+0x560>
    c0ac:	2301      	movs	r3, #1
    c0ae:	9307      	str	r3, [sp, #28]
    c0b0:	9b04      	ldr	r3, [sp, #16]
    c0b2:	445b      	add	r3, fp
    c0b4:	f103 0901 	add.w	r9, r3, #1
    c0b8:	f1b9 0f01 	cmp.w	r9, #1
    c0bc:	46cc      	mov	ip, r9
    c0be:	930b      	str	r3, [sp, #44]	; 0x2c
    c0c0:	bfb8      	it	lt
    c0c2:	f04f 0c01 	movlt.w	ip, #1
    c0c6:	2100      	movs	r1, #0
    c0c8:	f1bc 0f17 	cmp.w	ip, #23
    c0cc:	63e1      	str	r1, [r4, #60]	; 0x3c
    c0ce:	f77f acbc 	ble.w	ba4a <_dtoa_r+0x222>
    c0d2:	2001      	movs	r0, #1
    c0d4:	2204      	movs	r2, #4
    c0d6:	0052      	lsls	r2, r2, #1
    c0d8:	f102 0314 	add.w	r3, r2, #20
    c0dc:	4563      	cmp	r3, ip
    c0de:	4601      	mov	r1, r0
    c0e0:	f100 0001 	add.w	r0, r0, #1
    c0e4:	d9f7      	bls.n	c0d6 <_dtoa_r+0x8ae>
    c0e6:	63e1      	str	r1, [r4, #60]	; 0x3c
    c0e8:	e4af      	b.n	ba4a <_dtoa_r+0x222>
    c0ea:	2301      	movs	r3, #1
    c0ec:	9307      	str	r3, [sp, #28]
    c0ee:	f1bb 0f00 	cmp.w	fp, #0
    c0f2:	dd52      	ble.n	c19a <_dtoa_r+0x972>
    c0f4:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
    c0f8:	46d9      	mov	r9, fp
    c0fa:	46dc      	mov	ip, fp
    c0fc:	e7e3      	b.n	c0c6 <_dtoa_r+0x89e>
    c0fe:	2300      	movs	r3, #0
    c100:	9307      	str	r3, [sp, #28]
    c102:	e7d5      	b.n	c0b0 <_dtoa_r+0x888>
    c104:	2300      	movs	r3, #0
    c106:	9307      	str	r3, [sp, #28]
    c108:	e7f1      	b.n	c0ee <_dtoa_r+0x8c6>
    c10a:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    c10e:	9704      	str	r7, [sp, #16]
    c110:	f1b9 0f00 	cmp.w	r9, #0
    c114:	f47f ada1 	bne.w	bc5a <_dtoa_r+0x432>
    c118:	4651      	mov	r1, sl
    c11a:	464b      	mov	r3, r9
    c11c:	2205      	movs	r2, #5
    c11e:	4620      	mov	r0, r4
    c120:	f7fb f95c 	bl	73dc <__multadd>
    c124:	4601      	mov	r1, r0
    c126:	4682      	mov	sl, r0
    c128:	4628      	mov	r0, r5
    c12a:	f7fb fc05 	bl	7938 <__mcmp>
    c12e:	2800      	cmp	r0, #0
    c130:	f77f ad93 	ble.w	bc5a <_dtoa_r+0x432>
    c134:	9b04      	ldr	r3, [sp, #16]
    c136:	f103 0b01 	add.w	fp, r3, #1
    c13a:	9b00      	ldr	r3, [sp, #0]
    c13c:	2231      	movs	r2, #49	; 0x31
    c13e:	4698      	mov	r8, r3
    c140:	f803 2b01 	strb.w	r2, [r3], #1
    c144:	9300      	str	r3, [sp, #0]
    c146:	4651      	mov	r1, sl
    c148:	4620      	mov	r0, r4
    c14a:	f7fb f93d 	bl	73c8 <_Bfree>
    c14e:	f10b 0301 	add.w	r3, fp, #1
    c152:	f8dd 9000 	ldr.w	r9, [sp]
    c156:	9304      	str	r3, [sp, #16]
    c158:	f8cd 8000 	str.w	r8, [sp]
    c15c:	2e00      	cmp	r6, #0
    c15e:	f47f ae8f 	bne.w	be80 <_dtoa_r+0x658>
    c162:	e691      	b.n	be88 <_dtoa_r+0x660>
    c164:	eba3 0a0a 	sub.w	sl, r3, sl
    c168:	e5c5      	b.n	bcf6 <_dtoa_r+0x4ce>
    c16a:	4631      	mov	r1, r6
    c16c:	4652      	mov	r2, sl
    c16e:	4620      	mov	r0, r4
    c170:	f7fb fb0a 	bl	7788 <__pow5mult>
    c174:	462a      	mov	r2, r5
    c176:	4601      	mov	r1, r0
    c178:	4606      	mov	r6, r0
    c17a:	4620      	mov	r0, r4
    c17c:	f7fb fa56 	bl	762c <__multiply>
    c180:	4629      	mov	r1, r5
    c182:	4605      	mov	r5, r0
    c184:	4620      	mov	r0, r4
    c186:	f7fb f91f 	bl	73c8 <_Bfree>
    c18a:	e5ea      	b.n	bd62 <_dtoa_r+0x53a>
    c18c:	2002      	movs	r0, #2
    c18e:	eeb0 5b48 	vmov.f64	d5, d8
    c192:	e481      	b.n	ba98 <_dtoa_r+0x270>
    c194:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
    c198:	e68e      	b.n	beb8 <_dtoa_r+0x690>
    c19a:	f04f 0b01 	mov.w	fp, #1
    c19e:	46d9      	mov	r9, fp
    c1a0:	e44f      	b.n	ba42 <_dtoa_r+0x21a>
    c1a2:	d103      	bne.n	c1ac <_dtoa_r+0x984>
    c1a4:	9b01      	ldr	r3, [sp, #4]
    c1a6:	07db      	lsls	r3, r3, #31
    c1a8:	f53f ae4c 	bmi.w	be44 <_dtoa_r+0x61c>
    c1ac:	46d9      	mov	r9, fp
    c1ae:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
    c1b2:	2b30      	cmp	r3, #48	; 0x30
    c1b4:	d0fa      	beq.n	c1ac <_dtoa_r+0x984>
    c1b6:	e657      	b.n	be68 <_dtoa_r+0x640>
    c1b8:	9b04      	ldr	r3, [sp, #16]
    c1ba:	9a00      	ldr	r2, [sp, #0]
    c1bc:	3301      	adds	r3, #1
    c1be:	9304      	str	r3, [sp, #16]
    c1c0:	2331      	movs	r3, #49	; 0x31
    c1c2:	7013      	strb	r3, [r2, #0]
    c1c4:	e650      	b.n	be68 <_dtoa_r+0x640>
    c1c6:	f1ba 0f00 	cmp.w	sl, #0
    c1ca:	f000 8123 	beq.w	c414 <_dtoa_r+0xbec>
    c1ce:	f202 4233 	addw	r2, r2, #1075	; 0x433
    c1d2:	9b06      	ldr	r3, [sp, #24]
    c1d4:	9309      	str	r3, [sp, #36]	; 0x24
    c1d6:	4413      	add	r3, r2
    c1d8:	f8dd a020 	ldr.w	sl, [sp, #32]
    c1dc:	9306      	str	r3, [sp, #24]
    c1de:	4490      	add	r8, r2
    c1e0:	e592      	b.n	bd08 <_dtoa_r+0x4e0>
    c1e2:	ee07 0a90 	vmov	s15, r0
    c1e6:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
    c1ea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    c1ee:	eea6 5b07 	vfma.f64	d5, d6, d7
    c1f2:	ee15 2a90 	vmov	r2, s11
    c1f6:	ec51 0b15 	vmov	r0, r1, d5
    c1fa:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
    c1fe:	ec41 0b15 	vmov	d5, r0, r1
    c202:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
    c206:	ee36 7b47 	vsub.f64	d7, d6, d7
    c20a:	eeb4 7bc5 	vcmpe.f64	d7, d5
    c20e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c212:	f300 8137 	bgt.w	c484 <_dtoa_r+0xc5c>
    c216:	eeb1 5b45 	vneg.f64	d5, d5
    c21a:	eeb4 7bc5 	vcmpe.f64	d7, d5
    c21e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c222:	f57f acfb 	bpl.w	bc1c <_dtoa_r+0x3f4>
    c226:	f04f 0a00 	mov.w	sl, #0
    c22a:	4656      	mov	r6, sl
    c22c:	e515      	b.n	bc5a <_dtoa_r+0x432>
    c22e:	f000 80f5 	beq.w	c41c <_dtoa_r+0xbf4>
    c232:	9b04      	ldr	r3, [sp, #16]
    c234:	4951      	ldr	r1, [pc, #324]	; (c37c <_dtoa_r+0xb54>)
    c236:	425a      	negs	r2, r3
    c238:	f002 000f 	and.w	r0, r2, #15
    c23c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    c240:	ed91 6b00 	vldr	d6, [r1]
    c244:	1112      	asrs	r2, r2, #4
    c246:	ee28 6b06 	vmul.f64	d6, d8, d6
    c24a:	f000 8142 	beq.w	c4d2 <_dtoa_r+0xcaa>
    c24e:	eeb0 7b46 	vmov.f64	d7, d6
    c252:	494b      	ldr	r1, [pc, #300]	; (c380 <_dtoa_r+0xb58>)
    c254:	2600      	movs	r6, #0
    c256:	2002      	movs	r0, #2
    c258:	07d3      	lsls	r3, r2, #31
    c25a:	d505      	bpl.n	c268 <_dtoa_r+0xa40>
    c25c:	ed91 5b00 	vldr	d5, [r1]
    c260:	3001      	adds	r0, #1
    c262:	2601      	movs	r6, #1
    c264:	ee27 7b05 	vmul.f64	d7, d7, d5
    c268:	1052      	asrs	r2, r2, #1
    c26a:	f101 0108 	add.w	r1, r1, #8
    c26e:	d1f3      	bne.n	c258 <_dtoa_r+0xa30>
    c270:	2e00      	cmp	r6, #0
    c272:	fe06 6b07 	vseleq.f64	d6, d6, d7
    c276:	e41e      	b.n	bab6 <_dtoa_r+0x28e>
    c278:	9b02      	ldr	r3, [sp, #8]
    c27a:	2b00      	cmp	r3, #0
    c27c:	f47f ae37 	bne.w	beee <_dtoa_r+0x6c6>
    c280:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    c284:	f3c1 0213 	ubfx	r2, r1, #0, #20
    c288:	2a00      	cmp	r2, #0
    c28a:	f040 8137 	bne.w	c4fc <_dtoa_r+0xcd4>
    c28e:	4a3d      	ldr	r2, [pc, #244]	; (c384 <_dtoa_r+0xb5c>)
    c290:	400a      	ands	r2, r1
    c292:	2a00      	cmp	r2, #0
    c294:	f000 80fa 	beq.w	c48c <_dtoa_r+0xc64>
    c298:	9b06      	ldr	r3, [sp, #24]
    c29a:	3301      	adds	r3, #1
    c29c:	9306      	str	r3, [sp, #24]
    c29e:	2301      	movs	r3, #1
    c2a0:	f108 0801 	add.w	r8, r8, #1
    c2a4:	9308      	str	r3, [sp, #32]
    c2a6:	e56f      	b.n	bd88 <_dtoa_r+0x560>
    c2a8:	4629      	mov	r1, r5
    c2aa:	9a08      	ldr	r2, [sp, #32]
    c2ac:	4620      	mov	r0, r4
    c2ae:	f7fb fa6b 	bl	7788 <__pow5mult>
    c2b2:	4605      	mov	r5, r0
    c2b4:	e55a      	b.n	bd6c <_dtoa_r+0x544>
    c2b6:	2a00      	cmp	r2, #0
    c2b8:	dd12      	ble.n	c2e0 <_dtoa_r+0xab8>
    c2ba:	4629      	mov	r1, r5
    c2bc:	2201      	movs	r2, #1
    c2be:	4620      	mov	r0, r4
    c2c0:	9301      	str	r3, [sp, #4]
    c2c2:	f7fb fac1 	bl	7848 <__lshift>
    c2c6:	4651      	mov	r1, sl
    c2c8:	4605      	mov	r5, r0
    c2ca:	f7fb fb35 	bl	7938 <__mcmp>
    c2ce:	2800      	cmp	r0, #0
    c2d0:	9b01      	ldr	r3, [sp, #4]
    c2d2:	f340 80e1 	ble.w	c498 <_dtoa_r+0xc70>
    c2d6:	2b39      	cmp	r3, #57	; 0x39
    c2d8:	f000 80ca 	beq.w	c470 <_dtoa_r+0xc48>
    c2dc:	f10b 0331 	add.w	r3, fp, #49	; 0x31
    c2e0:	46b9      	mov	r9, r7
    c2e2:	f809 3b01 	strb.w	r3, [r9], #1
    c2e6:	9b04      	ldr	r3, [sp, #16]
    c2e8:	3301      	adds	r3, #1
    c2ea:	4637      	mov	r7, r6
    c2ec:	9304      	str	r3, [sp, #16]
    c2ee:	4646      	mov	r6, r8
    c2f0:	e5ba      	b.n	be68 <_dtoa_r+0x640>
    c2f2:	ee38 8b08 	vadd.f64	d8, d8, d8
    c2f6:	eeb4 8bc6 	vcmpe.f64	d8, d6
    c2fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c2fe:	dc0a      	bgt.n	c316 <_dtoa_r+0xaee>
    c300:	eeb4 8b46 	vcmp.f64	d8, d6
    c304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c308:	f47f acdc 	bne.w	bcc4 <_dtoa_r+0x49c>
    c30c:	ee17 3a10 	vmov	r3, s14
    c310:	07d8      	lsls	r0, r3, #31
    c312:	f57f acd7 	bpl.w	bcc4 <_dtoa_r+0x49c>
    c316:	9a00      	ldr	r2, [sp, #0]
    c318:	e454      	b.n	bbc4 <_dtoa_r+0x39c>
    c31a:	6871      	ldr	r1, [r6, #4]
    c31c:	4620      	mov	r0, r4
    c31e:	f7fb f82d 	bl	737c <_Balloc>
    c322:	4607      	mov	r7, r0
    c324:	2800      	cmp	r0, #0
    c326:	f000 80de 	beq.w	c4e6 <_dtoa_r+0xcbe>
    c32a:	6933      	ldr	r3, [r6, #16]
    c32c:	3302      	adds	r3, #2
    c32e:	009a      	lsls	r2, r3, #2
    c330:	f106 010c 	add.w	r1, r6, #12
    c334:	300c      	adds	r0, #12
    c336:	f7f5 ffe7 	bl	2308 <memcpy>
    c33a:	4639      	mov	r1, r7
    c33c:	2201      	movs	r2, #1
    c33e:	4620      	mov	r0, r4
    c340:	f7fb fa82 	bl	7848 <__lshift>
    c344:	4680      	mov	r8, r0
    c346:	e5fe      	b.n	bf46 <_dtoa_r+0x71e>
    c348:	9b06      	ldr	r3, [sp, #24]
    c34a:	eba3 0309 	sub.w	r3, r3, r9
    c34e:	9309      	str	r3, [sp, #36]	; 0x24
    c350:	e4da      	b.n	bd08 <_dtoa_r+0x4e0>
    c352:	2b39      	cmp	r3, #57	; 0x39
    c354:	f000 808c 	beq.w	c470 <_dtoa_r+0xc48>
    c358:	46b9      	mov	r9, r7
    c35a:	3301      	adds	r3, #1
    c35c:	e7c1      	b.n	c2e2 <_dtoa_r+0xaba>
    c35e:	9a04      	ldr	r2, [sp, #16]
    c360:	3201      	adds	r2, #1
    c362:	4637      	mov	r7, r6
    c364:	9204      	str	r2, [sp, #16]
    c366:	4646      	mov	r6, r8
    c368:	e55f      	b.n	be2a <_dtoa_r+0x602>
    c36a:	4629      	mov	r1, r5
    c36c:	4620      	mov	r0, r4
    c36e:	f7fb fa0b 	bl	7788 <__pow5mult>
    c372:	4605      	mov	r5, r0
    c374:	e4fa      	b.n	bd6c <_dtoa_r+0x544>
    c376:	bf00      	nop
    c378:	2000086c 	.word	0x2000086c
    c37c:	200002a8 	.word	0x200002a8
    c380:	20000280 	.word	0x20000280
    c384:	7ff00000 	.word	0x7ff00000
    c388:	4b5e      	ldr	r3, [pc, #376]	; (c504 <_dtoa_r+0xcdc>)
    c38a:	eefd 5bc6 	vcvt.s32.f64	s11, d6
    c38e:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
    c392:	ed1c 3b02 	vldr	d3, [ip, #-8]
    c396:	eeb8 7be5 	vcvt.f64.s32	d7, s11
    c39a:	ee36 7b47 	vsub.f64	d7, d6, d7
    c39e:	ec41 0b16 	vmov	d6, r0, r1
    c3a2:	ee15 1a90 	vmov	r1, s11
    c3a6:	ee23 3b06 	vmul.f64	d3, d3, d6
    c3aa:	9800      	ldr	r0, [sp, #0]
    c3ac:	3130      	adds	r1, #48	; 0x30
    c3ae:	2a01      	cmp	r2, #1
    c3b0:	f800 1b01 	strb.w	r1, [r0], #1
    c3b4:	f000 8083 	beq.w	c4be <_dtoa_r+0xc96>
    c3b8:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    c3bc:	9b00      	ldr	r3, [sp, #0]
    c3be:	1899      	adds	r1, r3, r2
    c3c0:	ee27 7b04 	vmul.f64	d7, d7, d4
    c3c4:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    c3c8:	ee16 3a90 	vmov	r3, s13
    c3cc:	3330      	adds	r3, #48	; 0x30
    c3ce:	f800 3b01 	strb.w	r3, [r0], #1
    c3d2:	4281      	cmp	r1, r0
    c3d4:	eeb8 5be6 	vcvt.f64.s32	d5, s13
    c3d8:	ee37 7b45 	vsub.f64	d7, d7, d5
    c3dc:	d1f0      	bne.n	c3c0 <_dtoa_r+0xb98>
    c3de:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    c3e2:	ee33 5b06 	vadd.f64	d5, d3, d6
    c3e6:	eeb4 5bc7 	vcmpe.f64	d5, d7
    c3ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c3ee:	f53f abe3 	bmi.w	bbb8 <_dtoa_r+0x390>
    c3f2:	ee36 6b43 	vsub.f64	d6, d6, d3
    c3f6:	eeb4 6bc7 	vcmpe.f64	d6, d7
    c3fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c3fe:	f77f ac0d 	ble.w	bc1c <_dtoa_r+0x3f4>
    c402:	4689      	mov	r9, r1
    c404:	3901      	subs	r1, #1
    c406:	f819 3c01 	ldrb.w	r3, [r9, #-1]
    c40a:	2b30      	cmp	r3, #48	; 0x30
    c40c:	d0f9      	beq.n	c402 <_dtoa_r+0xbda>
    c40e:	1c73      	adds	r3, r6, #1
    c410:	9304      	str	r3, [sp, #16]
    c412:	e539      	b.n	be88 <_dtoa_r+0x660>
    c414:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c416:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
    c41a:	e6da      	b.n	c1d2 <_dtoa_r+0x9aa>
    c41c:	2002      	movs	r0, #2
    c41e:	eeb0 6b48 	vmov.f64	d6, d8
    c422:	f7ff bb48 	b.w	bab6 <_dtoa_r+0x28e>
    c426:	f1b9 0f00 	cmp.w	r9, #0
    c42a:	f43f aeda 	beq.w	c1e2 <_dtoa_r+0x9ba>
    c42e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c430:	2a00      	cmp	r2, #0
    c432:	f77f abf3 	ble.w	bc1c <_dtoa_r+0x3f4>
    c436:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    c43a:	ee26 6b04 	vmul.f64	d6, d6, d4
    c43e:	3001      	adds	r0, #1
    c440:	ee07 0a90 	vmov	s15, r0
    c444:	9b04      	ldr	r3, [sp, #16]
    c446:	eeb8 5be7 	vcvt.f64.s32	d5, s15
    c44a:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    c44e:	eea6 7b05 	vfma.f64	d7, d6, d5
    c452:	ee17 ca90 	vmov	ip, s15
    c456:	ec51 0b17 	vmov	r0, r1, d7
    c45a:	1e5e      	subs	r6, r3, #1
    c45c:	f1ac 7150 	sub.w	r1, ip, #54525952	; 0x3400000
    c460:	f7ff bb47 	b.w	baf2 <_dtoa_r+0x2ca>
    c464:	9b04      	ldr	r3, [sp, #16]
    c466:	3301      	adds	r3, #1
    c468:	9304      	str	r3, [sp, #16]
    c46a:	2331      	movs	r3, #49	; 0x31
    c46c:	f7ff bbb1 	b.w	bbd2 <_dtoa_r+0x3aa>
    c470:	9b04      	ldr	r3, [sp, #16]
    c472:	46bb      	mov	fp, r7
    c474:	3301      	adds	r3, #1
    c476:	9304      	str	r3, [sp, #16]
    c478:	2339      	movs	r3, #57	; 0x39
    c47a:	4637      	mov	r7, r6
    c47c:	f80b 3b01 	strb.w	r3, [fp], #1
    c480:	4646      	mov	r6, r8
    c482:	e4e1      	b.n	be48 <_dtoa_r+0x620>
    c484:	f04f 0a00 	mov.w	sl, #0
    c488:	4656      	mov	r6, sl
    c48a:	e653      	b.n	c134 <_dtoa_r+0x90c>
    c48c:	9208      	str	r2, [sp, #32]
    c48e:	e47b      	b.n	bd88 <_dtoa_r+0x560>
    c490:	1c73      	adds	r3, r6, #1
    c492:	9304      	str	r3, [sp, #16]
    c494:	4689      	mov	r9, r1
    c496:	e4f7      	b.n	be88 <_dtoa_r+0x660>
    c498:	f47f af22 	bne.w	c2e0 <_dtoa_r+0xab8>
    c49c:	07da      	lsls	r2, r3, #31
    c49e:	f57f af1f 	bpl.w	c2e0 <_dtoa_r+0xab8>
    c4a2:	e718      	b.n	c2d6 <_dtoa_r+0xaae>
    c4a4:	2b39      	cmp	r3, #57	; 0x39
    c4a6:	d0e3      	beq.n	c470 <_dtoa_r+0xc48>
    c4a8:	f1b9 0f00 	cmp.w	r9, #0
    c4ac:	f73f af16 	bgt.w	c2dc <_dtoa_r+0xab4>
    c4b0:	e716      	b.n	c2e0 <_dtoa_r+0xab8>
    c4b2:	9b01      	ldr	r3, [sp, #4]
    c4b4:	2b02      	cmp	r3, #2
    c4b6:	f73f ae28 	bgt.w	c10a <_dtoa_r+0x8e2>
    c4ba:	9704      	str	r7, [sp, #16]
    c4bc:	e5ba      	b.n	c034 <_dtoa_r+0x80c>
    c4be:	4601      	mov	r1, r0
    c4c0:	e78d      	b.n	c3de <_dtoa_r+0xbb6>
    c4c2:	9b01      	ldr	r3, [sp, #4]
    c4c4:	2b02      	cmp	r3, #2
    c4c6:	f73f ae20 	bgt.w	c10a <_dtoa_r+0x8e2>
    c4ca:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    c4ce:	9704      	str	r7, [sp, #16]
    c4d0:	e52b      	b.n	bf2a <_dtoa_r+0x702>
    c4d2:	2002      	movs	r0, #2
    c4d4:	f7ff baef 	b.w	bab6 <_dtoa_r+0x28e>
    c4d8:	4b0b      	ldr	r3, [pc, #44]	; (c508 <_dtoa_r+0xce0>)
    c4da:	480c      	ldr	r0, [pc, #48]	; (c50c <_dtoa_r+0xce4>)
    c4dc:	2200      	movs	r2, #0
    c4de:	f240 11af 	movw	r1, #431	; 0x1af
    c4e2:	f7ff f8b1 	bl	b648 <__assert_func>
    c4e6:	4b08      	ldr	r3, [pc, #32]	; (c508 <_dtoa_r+0xce0>)
    c4e8:	4808      	ldr	r0, [pc, #32]	; (c50c <_dtoa_r+0xce4>)
    c4ea:	463a      	mov	r2, r7
    c4ec:	f240 21ef 	movw	r1, #751	; 0x2ef
    c4f0:	f7ff f8aa 	bl	b648 <__assert_func>
    c4f4:	4b06      	ldr	r3, [pc, #24]	; (c510 <_dtoa_r+0xce8>)
    c4f6:	9300      	str	r3, [sp, #0]
    c4f8:	f7ff b9d2 	b.w	b8a0 <_dtoa_r+0x78>
    c4fc:	9b02      	ldr	r3, [sp, #8]
    c4fe:	9308      	str	r3, [sp, #32]
    c500:	e4f7      	b.n	bef2 <_dtoa_r+0x6ca>
    c502:	bf00      	nop
    c504:	200002a8 	.word	0x200002a8
    c508:	20000580 	.word	0x20000580
    c50c:	20000870 	.word	0x20000870
    c510:	20000860 	.word	0x20000860

0000c514 <_strtoul_l.constprop.0>:
    c514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c518:	4607      	mov	r7, r0
    c51a:	484c      	ldr	r0, [pc, #304]	; (c64c <_strtoul_l.constprop.0+0x138>)
    c51c:	460e      	mov	r6, r1
    c51e:	4635      	mov	r5, r6
    c520:	f816 eb01 	ldrb.w	lr, [r6], #1
    c524:	f810 c00e 	ldrb.w	ip, [r0, lr]
    c528:	f01c 0c08 	ands.w	ip, ip, #8
    c52c:	d1f7      	bne.n	c51e <_strtoul_l.constprop.0+0xa>
    c52e:	f1be 0f2d 	cmp.w	lr, #45	; 0x2d
    c532:	d05a      	beq.n	c5ea <_strtoul_l.constprop.0+0xd6>
    c534:	f1be 0f2b 	cmp.w	lr, #43	; 0x2b
    c538:	bf03      	ittte	eq
    c53a:	f896 e000 	ldrbeq.w	lr, [r6]
    c53e:	4664      	moveq	r4, ip
    c540:	1cae      	addeq	r6, r5, #2
    c542:	4664      	movne	r4, ip
    c544:	b15b      	cbz	r3, c55e <_strtoul_l.constprop.0+0x4a>
    c546:	2b10      	cmp	r3, #16
    c548:	d054      	beq.n	c5f4 <_strtoul_l.constprop.0+0xe0>
    c54a:	f04f 38ff 	mov.w	r8, #4294967295
    c54e:	fbb8 f8f3 	udiv	r8, r8, r3
    c552:	fb03 fa08 	mul.w	sl, r3, r8
    c556:	ea6f 0a0a 	mvn.w	sl, sl
    c55a:	4699      	mov	r9, r3
    c55c:	e008      	b.n	c570 <_strtoul_l.constprop.0+0x5c>
    c55e:	f1be 0f30 	cmp.w	lr, #48	; 0x30
    c562:	d05a      	beq.n	c61a <_strtoul_l.constprop.0+0x106>
    c564:	230a      	movs	r3, #10
    c566:	f8df 80e8 	ldr.w	r8, [pc, #232]	; c650 <_strtoul_l.constprop.0+0x13c>
    c56a:	f04f 0a05 	mov.w	sl, #5
    c56e:	4699      	mov	r9, r3
    c570:	2500      	movs	r5, #0
    c572:	4628      	mov	r0, r5
    c574:	e005      	b.n	c582 <_strtoul_l.constprop.0+0x6e>
    c576:	d02c      	beq.n	c5d2 <_strtoul_l.constprop.0+0xbe>
    c578:	fb09 c000 	mla	r0, r9, r0, ip
    c57c:	2501      	movs	r5, #1
    c57e:	f816 eb01 	ldrb.w	lr, [r6], #1
    c582:	f1ae 0c30 	sub.w	ip, lr, #48	; 0x30
    c586:	f1bc 0f09 	cmp.w	ip, #9
    c58a:	d906      	bls.n	c59a <_strtoul_l.constprop.0+0x86>
    c58c:	f1ae 0c41 	sub.w	ip, lr, #65	; 0x41
    c590:	f1bc 0f19 	cmp.w	ip, #25
    c594:	d80b      	bhi.n	c5ae <_strtoul_l.constprop.0+0x9a>
    c596:	f1ae 0c37 	sub.w	ip, lr, #55	; 0x37
    c59a:	4563      	cmp	r3, ip
    c59c:	dd10      	ble.n	c5c0 <_strtoul_l.constprop.0+0xac>
    c59e:	f1b5 3fff 	cmp.w	r5, #4294967295
    c5a2:	d0ec      	beq.n	c57e <_strtoul_l.constprop.0+0x6a>
    c5a4:	4540      	cmp	r0, r8
    c5a6:	d9e6      	bls.n	c576 <_strtoul_l.constprop.0+0x62>
    c5a8:	f04f 35ff 	mov.w	r5, #4294967295
    c5ac:	e7e7      	b.n	c57e <_strtoul_l.constprop.0+0x6a>
    c5ae:	f1ae 0c61 	sub.w	ip, lr, #97	; 0x61
    c5b2:	f1bc 0f19 	cmp.w	ip, #25
    c5b6:	d803      	bhi.n	c5c0 <_strtoul_l.constprop.0+0xac>
    c5b8:	f1ae 0c57 	sub.w	ip, lr, #87	; 0x57
    c5bc:	4563      	cmp	r3, ip
    c5be:	dcee      	bgt.n	c59e <_strtoul_l.constprop.0+0x8a>
    c5c0:	1c6b      	adds	r3, r5, #1
    c5c2:	d00b      	beq.n	c5dc <_strtoul_l.constprop.0+0xc8>
    c5c4:	b104      	cbz	r4, c5c8 <_strtoul_l.constprop.0+0xb4>
    c5c6:	4240      	negs	r0, r0
    c5c8:	b10a      	cbz	r2, c5ce <_strtoul_l.constprop.0+0xba>
    c5ca:	b965      	cbnz	r5, c5e6 <_strtoul_l.constprop.0+0xd2>
    c5cc:	6011      	str	r1, [r2, #0]
    c5ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c5d2:	45d4      	cmp	ip, sl
    c5d4:	ddd0      	ble.n	c578 <_strtoul_l.constprop.0+0x64>
    c5d6:	f04f 35ff 	mov.w	r5, #4294967295
    c5da:	e7d0      	b.n	c57e <_strtoul_l.constprop.0+0x6a>
    c5dc:	2322      	movs	r3, #34	; 0x22
    c5de:	603b      	str	r3, [r7, #0]
    c5e0:	4628      	mov	r0, r5
    c5e2:	2a00      	cmp	r2, #0
    c5e4:	d0f3      	beq.n	c5ce <_strtoul_l.constprop.0+0xba>
    c5e6:	1e71      	subs	r1, r6, #1
    c5e8:	e7f0      	b.n	c5cc <_strtoul_l.constprop.0+0xb8>
    c5ea:	f896 e000 	ldrb.w	lr, [r6]
    c5ee:	2401      	movs	r4, #1
    c5f0:	1cae      	adds	r6, r5, #2
    c5f2:	e7a7      	b.n	c544 <_strtoul_l.constprop.0+0x30>
    c5f4:	f1be 0f30 	cmp.w	lr, #48	; 0x30
    c5f8:	d121      	bne.n	c63e <_strtoul_l.constprop.0+0x12a>
    c5fa:	7830      	ldrb	r0, [r6, #0]
    c5fc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
    c600:	2858      	cmp	r0, #88	; 0x58
    c602:	d116      	bne.n	c632 <_strtoul_l.constprop.0+0x11e>
    c604:	f04f 0910 	mov.w	r9, #16
    c608:	f896 e001 	ldrb.w	lr, [r6, #1]
    c60c:	f04f 0a0f 	mov.w	sl, #15
    c610:	3602      	adds	r6, #2
    c612:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
    c616:	464b      	mov	r3, r9
    c618:	e7aa      	b.n	c570 <_strtoul_l.constprop.0+0x5c>
    c61a:	7833      	ldrb	r3, [r6, #0]
    c61c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    c620:	2b58      	cmp	r3, #88	; 0x58
    c622:	d0ef      	beq.n	c604 <_strtoul_l.constprop.0+0xf0>
    c624:	2308      	movs	r3, #8
    c626:	f04f 0a07 	mov.w	sl, #7
    c62a:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
    c62e:	4699      	mov	r9, r3
    c630:	e79e      	b.n	c570 <_strtoul_l.constprop.0+0x5c>
    c632:	4699      	mov	r9, r3
    c634:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
    c638:	f04f 0a0f 	mov.w	sl, #15
    c63c:	e798      	b.n	c570 <_strtoul_l.constprop.0+0x5c>
    c63e:	f04f 0a0f 	mov.w	sl, #15
    c642:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
    c646:	4699      	mov	r9, r3
    c648:	e792      	b.n	c570 <_strtoul_l.constprop.0+0x5c>
    c64a:	bf00      	nop
    c64c:	2000075d 	.word	0x2000075d
    c650:	19999999 	.word	0x19999999

0000c654 <_strtoul_r>:
    c654:	f7ff bf5e 	b.w	c514 <_strtoul_l.constprop.0>

0000c658 <_strtoll_l.constprop.0>:
    c658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c65c:	b085      	sub	sp, #20
    c65e:	461f      	mov	r7, r3
    c660:	4b57      	ldr	r3, [pc, #348]	; (c7c0 <_strtoll_l.constprop.0+0x168>)
    c662:	9003      	str	r0, [sp, #12]
    c664:	468a      	mov	sl, r1
    c666:	9200      	str	r2, [sp, #0]
    c668:	460d      	mov	r5, r1
    c66a:	462a      	mov	r2, r5
    c66c:	f815 4b01 	ldrb.w	r4, [r5], #1
    c670:	5d1e      	ldrb	r6, [r3, r4]
    c672:	f016 0608 	ands.w	r6, r6, #8
    c676:	d1f8      	bne.n	c66a <_strtoll_l.constprop.0+0x12>
    c678:	2c2d      	cmp	r4, #45	; 0x2d
    c67a:	d075      	beq.n	c768 <_strtoll_l.constprop.0+0x110>
    c67c:	2c2b      	cmp	r4, #43	; 0x2b
    c67e:	bf05      	ittet	eq
    c680:	782c      	ldrbeq	r4, [r5, #0]
    c682:	9602      	streq	r6, [sp, #8]
    c684:	9602      	strne	r6, [sp, #8]
    c686:	1c95      	addeq	r5, r2, #2
    c688:	f04f 36ff 	mov.w	r6, #4294967295
    c68c:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
    c690:	b12f      	cbz	r7, c69e <_strtoll_l.constprop.0+0x46>
    c692:	2f10      	cmp	r7, #16
    c694:	d06f      	beq.n	c776 <_strtoll_l.constprop.0+0x11e>
    c696:	46b8      	mov	r8, r7
    c698:	ea4f 79e7 	mov.w	r9, r7, asr #31
    c69c:	e005      	b.n	c6aa <_strtoll_l.constprop.0+0x52>
    c69e:	2c30      	cmp	r4, #48	; 0x30
    c6a0:	d074      	beq.n	c78c <_strtoll_l.constprop.0+0x134>
    c6a2:	f04f 080a 	mov.w	r8, #10
    c6a6:	46b9      	mov	r9, r7
    c6a8:	4647      	mov	r7, r8
    c6aa:	4642      	mov	r2, r8
    c6ac:	464b      	mov	r3, r9
    c6ae:	4630      	mov	r0, r6
    c6b0:	4659      	mov	r1, fp
    c6b2:	f7f7 fbc7 	bl	3e44 <__aeabi_uldivmod>
    c6b6:	2300      	movs	r3, #0
    c6b8:	9201      	str	r2, [sp, #4]
    c6ba:	4684      	mov	ip, r0
    c6bc:	460a      	mov	r2, r1
    c6be:	4618      	mov	r0, r3
    c6c0:	4619      	mov	r1, r3
    c6c2:	e011      	b.n	c6e8 <_strtoll_l.constprop.0+0x90>
    c6c4:	428a      	cmp	r2, r1
    c6c6:	bf08      	it	eq
    c6c8:	4584      	cmpeq	ip, r0
    c6ca:	d03d      	beq.n	c748 <_strtoll_l.constprop.0+0xf0>
    c6cc:	fb00 f309 	mul.w	r3, r0, r9
    c6d0:	fb08 3301 	mla	r3, r8, r1, r3
    c6d4:	fba0 0108 	umull	r0, r1, r0, r8
    c6d8:	440b      	add	r3, r1
    c6da:	eb1e 0000 	adds.w	r0, lr, r0
    c6de:	eb43 71ee 	adc.w	r1, r3, lr, asr #31
    c6e2:	2301      	movs	r3, #1
    c6e4:	f815 4b01 	ldrb.w	r4, [r5], #1
    c6e8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
    c6ec:	f1be 0f09 	cmp.w	lr, #9
    c6f0:	d906      	bls.n	c700 <_strtoll_l.constprop.0+0xa8>
    c6f2:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
    c6f6:	f1be 0f19 	cmp.w	lr, #25
    c6fa:	d80c      	bhi.n	c716 <_strtoll_l.constprop.0+0xbe>
    c6fc:	f1a4 0e37 	sub.w	lr, r4, #55	; 0x37
    c700:	4577      	cmp	r7, lr
    c702:	dd11      	ble.n	c728 <_strtoll_l.constprop.0+0xd0>
    c704:	1c5c      	adds	r4, r3, #1
    c706:	d0ed      	beq.n	c6e4 <_strtoll_l.constprop.0+0x8c>
    c708:	4584      	cmp	ip, r0
    c70a:	eb72 0301 	sbcs.w	r3, r2, r1
    c70e:	d2d9      	bcs.n	c6c4 <_strtoll_l.constprop.0+0x6c>
    c710:	f04f 33ff 	mov.w	r3, #4294967295
    c714:	e7e6      	b.n	c6e4 <_strtoll_l.constprop.0+0x8c>
    c716:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
    c71a:	f1be 0f19 	cmp.w	lr, #25
    c71e:	d803      	bhi.n	c728 <_strtoll_l.constprop.0+0xd0>
    c720:	f1a4 0e57 	sub.w	lr, r4, #87	; 0x57
    c724:	4577      	cmp	r7, lr
    c726:	dced      	bgt.n	c704 <_strtoll_l.constprop.0+0xac>
    c728:	1c5a      	adds	r2, r3, #1
    c72a:	d013      	beq.n	c754 <_strtoll_l.constprop.0+0xfc>
    c72c:	9a02      	ldr	r2, [sp, #8]
    c72e:	b112      	cbz	r2, c736 <_strtoll_l.constprop.0+0xde>
    c730:	4240      	negs	r0, r0
    c732:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c736:	9a00      	ldr	r2, [sp, #0]
    c738:	b11a      	cbz	r2, c742 <_strtoll_l.constprop.0+0xea>
    c73a:	bba3      	cbnz	r3, c7a6 <_strtoll_l.constprop.0+0x14e>
    c73c:	9b00      	ldr	r3, [sp, #0]
    c73e:	f8c3 a000 	str.w	sl, [r3]
    c742:	b005      	add	sp, #20
    c744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c748:	9b01      	ldr	r3, [sp, #4]
    c74a:	4573      	cmp	r3, lr
    c74c:	dabe      	bge.n	c6cc <_strtoll_l.constprop.0+0x74>
    c74e:	f04f 33ff 	mov.w	r3, #4294967295
    c752:	e7c7      	b.n	c6e4 <_strtoll_l.constprop.0+0x8c>
    c754:	9a03      	ldr	r2, [sp, #12]
    c756:	2322      	movs	r3, #34	; 0x22
    c758:	6013      	str	r3, [r2, #0]
    c75a:	9b00      	ldr	r3, [sp, #0]
    c75c:	b333      	cbz	r3, c7ac <_strtoll_l.constprop.0+0x154>
    c75e:	f105 3aff 	add.w	sl, r5, #4294967295
    c762:	4630      	mov	r0, r6
    c764:	4659      	mov	r1, fp
    c766:	e7e9      	b.n	c73c <_strtoll_l.constprop.0+0xe4>
    c768:	2301      	movs	r3, #1
    c76a:	782c      	ldrb	r4, [r5, #0]
    c76c:	9302      	str	r3, [sp, #8]
    c76e:	1c95      	adds	r5, r2, #2
    c770:	f04f 4b00 	mov.w	fp, #2147483648	; 0x80000000
    c774:	e78c      	b.n	c690 <_strtoll_l.constprop.0+0x38>
    c776:	2c30      	cmp	r4, #48	; 0x30
    c778:	d104      	bne.n	c784 <_strtoll_l.constprop.0+0x12c>
    c77a:	782b      	ldrb	r3, [r5, #0]
    c77c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    c780:	2b58      	cmp	r3, #88	; 0x58
    c782:	d008      	beq.n	c796 <_strtoll_l.constprop.0+0x13e>
    c784:	46b8      	mov	r8, r7
    c786:	f04f 0900 	mov.w	r9, #0
    c78a:	e78e      	b.n	c6aa <_strtoll_l.constprop.0+0x52>
    c78c:	782b      	ldrb	r3, [r5, #0]
    c78e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    c792:	2b58      	cmp	r3, #88	; 0x58
    c794:	d10f      	bne.n	c7b6 <_strtoll_l.constprop.0+0x15e>
    c796:	f04f 0810 	mov.w	r8, #16
    c79a:	786c      	ldrb	r4, [r5, #1]
    c79c:	f04f 0900 	mov.w	r9, #0
    c7a0:	3502      	adds	r5, #2
    c7a2:	4647      	mov	r7, r8
    c7a4:	e781      	b.n	c6aa <_strtoll_l.constprop.0+0x52>
    c7a6:	4606      	mov	r6, r0
    c7a8:	468b      	mov	fp, r1
    c7aa:	e7d8      	b.n	c75e <_strtoll_l.constprop.0+0x106>
    c7ac:	4630      	mov	r0, r6
    c7ae:	4659      	mov	r1, fp
    c7b0:	b005      	add	sp, #20
    c7b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c7b6:	f04f 0808 	mov.w	r8, #8
    c7ba:	46b9      	mov	r9, r7
    c7bc:	4647      	mov	r7, r8
    c7be:	e774      	b.n	c6aa <_strtoll_l.constprop.0+0x52>
    c7c0:	2000075d 	.word	0x2000075d

0000c7c4 <_strtoll_r>:
    c7c4:	f7ff bf48 	b.w	c658 <_strtoll_l.constprop.0>

0000c7c8 <_strtoull_l.constprop.0>:
    c7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c7cc:	b085      	sub	sp, #20
    c7ce:	468b      	mov	fp, r1
    c7d0:	9201      	str	r2, [sp, #4]
    c7d2:	4a62      	ldr	r2, [pc, #392]	; (c95c <_strtoull_l.constprop.0+0x194>)
    c7d4:	9003      	str	r0, [sp, #12]
    c7d6:	461e      	mov	r6, r3
    c7d8:	460d      	mov	r5, r1
    c7da:	4629      	mov	r1, r5
    c7dc:	f815 4b01 	ldrb.w	r4, [r5], #1
    c7e0:	5d13      	ldrb	r3, [r2, r4]
    c7e2:	f013 0308 	ands.w	r3, r3, #8
    c7e6:	d1f8      	bne.n	c7da <_strtoull_l.constprop.0+0x12>
    c7e8:	2c2d      	cmp	r4, #45	; 0x2d
    c7ea:	f000 8082 	beq.w	c8f2 <_strtoull_l.constprop.0+0x12a>
    c7ee:	2c2b      	cmp	r4, #43	; 0x2b
    c7f0:	bf03      	ittte	eq
    c7f2:	782c      	ldrbeq	r4, [r5, #0]
    c7f4:	9302      	streq	r3, [sp, #8]
    c7f6:	1c8d      	addeq	r5, r1, #2
    c7f8:	9302      	strne	r3, [sp, #8]
    c7fa:	b1be      	cbz	r6, c82c <_strtoull_l.constprop.0+0x64>
    c7fc:	2e10      	cmp	r6, #16
    c7fe:	d07d      	beq.n	c8fc <_strtoull_l.constprop.0+0x134>
    c800:	ea4f 7ae6 	mov.w	sl, r6, asr #31
    c804:	4632      	mov	r2, r6
    c806:	4653      	mov	r3, sl
    c808:	f04f 30ff 	mov.w	r0, #4294967295
    c80c:	f04f 31ff 	mov.w	r1, #4294967295
    c810:	f7f7 fb18 	bl	3e44 <__aeabi_uldivmod>
    c814:	4632      	mov	r2, r6
    c816:	4607      	mov	r7, r0
    c818:	4688      	mov	r8, r1
    c81a:	4653      	mov	r3, sl
    c81c:	f04f 30ff 	mov.w	r0, #4294967295
    c820:	f04f 31ff 	mov.w	r1, #4294967295
    c824:	46b1      	mov	r9, r6
    c826:	f7f7 fb0d 	bl	3e44 <__aeabi_uldivmod>
    c82a:	e00a      	b.n	c842 <_strtoull_l.constprop.0+0x7a>
    c82c:	2c30      	cmp	r4, #48	; 0x30
    c82e:	d079      	beq.n	c924 <_strtoull_l.constprop.0+0x15c>
    c830:	f04f 090a 	mov.w	r9, #10
    c834:	f8df 8128 	ldr.w	r8, [pc, #296]	; c960 <_strtoull_l.constprop.0+0x198>
    c838:	46b2      	mov	sl, r6
    c83a:	2205      	movs	r2, #5
    c83c:	f04f 3799 	mov.w	r7, #2576980377	; 0x99999999
    c840:	464e      	mov	r6, r9
    c842:	f04f 0c00 	mov.w	ip, #0
    c846:	4660      	mov	r0, ip
    c848:	4661      	mov	r1, ip
    c84a:	e011      	b.n	c870 <_strtoull_l.constprop.0+0xa8>
    c84c:	4541      	cmp	r1, r8
    c84e:	bf08      	it	eq
    c850:	42b8      	cmpeq	r0, r7
    c852:	d03e      	beq.n	c8d2 <_strtoull_l.constprop.0+0x10a>
    c854:	fb00 f40a 	mul.w	r4, r0, sl
    c858:	fb09 4101 	mla	r1, r9, r1, r4
    c85c:	fba0 0409 	umull	r0, r4, r0, r9
    c860:	4421      	add	r1, r4
    c862:	1818      	adds	r0, r3, r0
    c864:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
    c868:	f04f 0c01 	mov.w	ip, #1
    c86c:	f815 4b01 	ldrb.w	r4, [r5], #1
    c870:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    c874:	2b09      	cmp	r3, #9
    c876:	d905      	bls.n	c884 <_strtoull_l.constprop.0+0xbc>
    c878:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
    c87c:	2b19      	cmp	r3, #25
    c87e:	d80d      	bhi.n	c89c <_strtoull_l.constprop.0+0xd4>
    c880:	f1a4 0337 	sub.w	r3, r4, #55	; 0x37
    c884:	429e      	cmp	r6, r3
    c886:	dd11      	ble.n	c8ac <_strtoull_l.constprop.0+0xe4>
    c888:	f1bc 3fff 	cmp.w	ip, #4294967295
    c88c:	d0ee      	beq.n	c86c <_strtoull_l.constprop.0+0xa4>
    c88e:	4287      	cmp	r7, r0
    c890:	eb78 0401 	sbcs.w	r4, r8, r1
    c894:	d2da      	bcs.n	c84c <_strtoull_l.constprop.0+0x84>
    c896:	f04f 3cff 	mov.w	ip, #4294967295
    c89a:	e7e7      	b.n	c86c <_strtoull_l.constprop.0+0xa4>
    c89c:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
    c8a0:	2b19      	cmp	r3, #25
    c8a2:	d803      	bhi.n	c8ac <_strtoull_l.constprop.0+0xe4>
    c8a4:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
    c8a8:	429e      	cmp	r6, r3
    c8aa:	dced      	bgt.n	c888 <_strtoull_l.constprop.0+0xc0>
    c8ac:	f1bc 3fff 	cmp.w	ip, #4294967295
    c8b0:	d014      	beq.n	c8dc <_strtoull_l.constprop.0+0x114>
    c8b2:	9b02      	ldr	r3, [sp, #8]
    c8b4:	b113      	cbz	r3, c8bc <_strtoull_l.constprop.0+0xf4>
    c8b6:	4240      	negs	r0, r0
    c8b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c8bc:	9b01      	ldr	r3, [sp, #4]
    c8be:	b12b      	cbz	r3, c8cc <_strtoull_l.constprop.0+0x104>
    c8c0:	f1bc 0f00 	cmp.w	ip, #0
    c8c4:	d112      	bne.n	c8ec <_strtoull_l.constprop.0+0x124>
    c8c6:	9b01      	ldr	r3, [sp, #4]
    c8c8:	f8c3 b000 	str.w	fp, [r3]
    c8cc:	b005      	add	sp, #20
    c8ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c8d2:	4293      	cmp	r3, r2
    c8d4:	ddbe      	ble.n	c854 <_strtoull_l.constprop.0+0x8c>
    c8d6:	f04f 3cff 	mov.w	ip, #4294967295
    c8da:	e7c7      	b.n	c86c <_strtoull_l.constprop.0+0xa4>
    c8dc:	9a03      	ldr	r2, [sp, #12]
    c8de:	2322      	movs	r3, #34	; 0x22
    c8e0:	6013      	str	r3, [r2, #0]
    c8e2:	9b01      	ldr	r3, [sp, #4]
    c8e4:	4660      	mov	r0, ip
    c8e6:	4661      	mov	r1, ip
    c8e8:	2b00      	cmp	r3, #0
    c8ea:	d0ef      	beq.n	c8cc <_strtoull_l.constprop.0+0x104>
    c8ec:	f105 3bff 	add.w	fp, r5, #4294967295
    c8f0:	e7e9      	b.n	c8c6 <_strtoull_l.constprop.0+0xfe>
    c8f2:	2301      	movs	r3, #1
    c8f4:	782c      	ldrb	r4, [r5, #0]
    c8f6:	9302      	str	r3, [sp, #8]
    c8f8:	1c8d      	adds	r5, r1, #2
    c8fa:	e77e      	b.n	c7fa <_strtoull_l.constprop.0+0x32>
    c8fc:	2c30      	cmp	r4, #48	; 0x30
    c8fe:	d123      	bne.n	c948 <_strtoull_l.constprop.0+0x180>
    c900:	782b      	ldrb	r3, [r5, #0]
    c902:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    c906:	2b58      	cmp	r3, #88	; 0x58
    c908:	d11b      	bne.n	c942 <_strtoull_l.constprop.0+0x17a>
    c90a:	f04f 0910 	mov.w	r9, #16
    c90e:	786c      	ldrb	r4, [r5, #1]
    c910:	220f      	movs	r2, #15
    c912:	3502      	adds	r5, #2
    c914:	f04f 37ff 	mov.w	r7, #4294967295
    c918:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
    c91c:	f04f 0a00 	mov.w	sl, #0
    c920:	464e      	mov	r6, r9
    c922:	e78e      	b.n	c842 <_strtoull_l.constprop.0+0x7a>
    c924:	782b      	ldrb	r3, [r5, #0]
    c926:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    c92a:	2b58      	cmp	r3, #88	; 0x58
    c92c:	d0ed      	beq.n	c90a <_strtoull_l.constprop.0+0x142>
    c92e:	f04f 0908 	mov.w	r9, #8
    c932:	46b2      	mov	sl, r6
    c934:	2207      	movs	r2, #7
    c936:	f04f 37ff 	mov.w	r7, #4294967295
    c93a:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
    c93e:	464e      	mov	r6, r9
    c940:	e77f      	b.n	c842 <_strtoull_l.constprop.0+0x7a>
    c942:	f04f 0a00 	mov.w	sl, #0
    c946:	e75d      	b.n	c804 <_strtoull_l.constprop.0+0x3c>
    c948:	220f      	movs	r2, #15
    c94a:	f04f 37ff 	mov.w	r7, #4294967295
    c94e:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
    c952:	46b1      	mov	r9, r6
    c954:	f04f 0a00 	mov.w	sl, #0
    c958:	e773      	b.n	c842 <_strtoull_l.constprop.0+0x7a>
    c95a:	bf00      	nop
    c95c:	2000075d 	.word	0x2000075d
    c960:	19999999 	.word	0x19999999

0000c964 <_strtoull_r>:
    c964:	f7ff bf30 	b.w	c7c8 <_strtoull_l.constprop.0>

0000c968 <_mbrtowc_r>:
    c968:	b570      	push	{r4, r5, r6, lr}
    c96a:	b082      	sub	sp, #8
    c96c:	4604      	mov	r4, r0
    c96e:	9d06      	ldr	r5, [sp, #24]
    c970:	b155      	cbz	r5, c988 <_mbrtowc_r+0x20>
    c972:	b16a      	cbz	r2, c990 <_mbrtowc_r+0x28>
    c974:	480f      	ldr	r0, [pc, #60]	; (c9b4 <_mbrtowc_r+0x4c>)
    c976:	9500      	str	r5, [sp, #0]
    c978:	f8d0 60e4 	ldr.w	r6, [r0, #228]	; 0xe4
    c97c:	4620      	mov	r0, r4
    c97e:	47b0      	blx	r6
    c980:	1c43      	adds	r3, r0, #1
    c982:	d010      	beq.n	c9a6 <_mbrtowc_r+0x3e>
    c984:	b002      	add	sp, #8
    c986:	bd70      	pop	{r4, r5, r6, pc}
    c988:	f100 05f4 	add.w	r5, r0, #244	; 0xf4
    c98c:	2a00      	cmp	r2, #0
    c98e:	d1f1      	bne.n	c974 <_mbrtowc_r+0xc>
    c990:	4b08      	ldr	r3, [pc, #32]	; (c9b4 <_mbrtowc_r+0x4c>)
    c992:	9500      	str	r5, [sp, #0]
    c994:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
    c998:	4611      	mov	r1, r2
    c99a:	2301      	movs	r3, #1
    c99c:	4a06      	ldr	r2, [pc, #24]	; (c9b8 <_mbrtowc_r+0x50>)
    c99e:	4620      	mov	r0, r4
    c9a0:	47b0      	blx	r6
    c9a2:	1c43      	adds	r3, r0, #1
    c9a4:	d1ee      	bne.n	c984 <_mbrtowc_r+0x1c>
    c9a6:	2200      	movs	r2, #0
    c9a8:	238a      	movs	r3, #138	; 0x8a
    c9aa:	602a      	str	r2, [r5, #0]
    c9ac:	6023      	str	r3, [r4, #0]
    c9ae:	b002      	add	sp, #8
    c9b0:	bd70      	pop	{r4, r5, r6, pc}
    c9b2:	bf00      	nop
    c9b4:	20007c38 	.word	0x20007c38
    c9b8:	20007784 	.word	0x20007784

0000c9bc <_wcrtomb_r>:
    c9bc:	b570      	push	{r4, r5, r6, lr}
    c9be:	4605      	mov	r5, r0
    c9c0:	b084      	sub	sp, #16
    c9c2:	b15b      	cbz	r3, c9dc <_wcrtomb_r+0x20>
    c9c4:	461c      	mov	r4, r3
    c9c6:	b169      	cbz	r1, c9e4 <_wcrtomb_r+0x28>
    c9c8:	4b0e      	ldr	r3, [pc, #56]	; (ca04 <_wcrtomb_r+0x48>)
    c9ca:	4628      	mov	r0, r5
    c9cc:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
    c9d0:	4623      	mov	r3, r4
    c9d2:	47b0      	blx	r6
    c9d4:	1c43      	adds	r3, r0, #1
    c9d6:	d00f      	beq.n	c9f8 <_wcrtomb_r+0x3c>
    c9d8:	b004      	add	sp, #16
    c9da:	bd70      	pop	{r4, r5, r6, pc}
    c9dc:	f500 7482 	add.w	r4, r0, #260	; 0x104
    c9e0:	2900      	cmp	r1, #0
    c9e2:	d1f1      	bne.n	c9c8 <_wcrtomb_r+0xc>
    c9e4:	4a07      	ldr	r2, [pc, #28]	; (ca04 <_wcrtomb_r+0x48>)
    c9e6:	4623      	mov	r3, r4
    c9e8:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
    c9ec:	4628      	mov	r0, r5
    c9ee:	460a      	mov	r2, r1
    c9f0:	a901      	add	r1, sp, #4
    c9f2:	47b0      	blx	r6
    c9f4:	1c43      	adds	r3, r0, #1
    c9f6:	d1ef      	bne.n	c9d8 <_wcrtomb_r+0x1c>
    c9f8:	2200      	movs	r2, #0
    c9fa:	238a      	movs	r3, #138	; 0x8a
    c9fc:	6022      	str	r2, [r4, #0]
    c9fe:	602b      	str	r3, [r5, #0]
    ca00:	b004      	add	sp, #16
    ca02:	bd70      	pop	{r4, r5, r6, pc}
    ca04:	20007c38 	.word	0x20007c38

0000ca08 <_wcsrtombs_r>:
    ca08:	b510      	push	{r4, lr}
    ca0a:	b082      	sub	sp, #8
    ca0c:	9c04      	ldr	r4, [sp, #16]
    ca0e:	e9cd 3400 	strd	r3, r4, [sp]
    ca12:	f04f 33ff 	mov.w	r3, #4294967295
    ca16:	f001 fd9f 	bl	e558 <_wcsnrtombs_r>
    ca1a:	b002      	add	sp, #8
    ca1c:	bd10      	pop	{r4, pc}
    ca1e:	bf00      	nop

0000ca20 <iswspace>:
    ca20:	2100      	movs	r1, #0
    ca22:	f000 b801 	b.w	ca28 <iswspace_l>
    ca26:	bf00      	nop

0000ca28 <iswspace_l>:
    ca28:	b510      	push	{r4, lr}
    ca2a:	f000 f8ab 	bl	cb84 <_jp2uc_l>
    ca2e:	4604      	mov	r4, r0
    ca30:	f001 fda4 	bl	e57c <category>
    ca34:	f1a0 031a 	sub.w	r3, r0, #26
    ca38:	b2db      	uxtb	r3, r3
    ca3a:	2b02      	cmp	r3, #2
    ca3c:	d906      	bls.n	ca4c <iswspace_l+0x24>
    ca3e:	f1a4 0009 	sub.w	r0, r4, #9
    ca42:	2804      	cmp	r0, #4
    ca44:	bf8c      	ite	hi
    ca46:	2000      	movhi	r0, #0
    ca48:	2001      	movls	r0, #1
    ca4a:	bd10      	pop	{r4, pc}
    ca4c:	2001      	movs	r0, #1
    ca4e:	bd10      	pop	{r4, pc}

0000ca50 <__jp2uc>:
    ca50:	2902      	cmp	r1, #2
    ca52:	d032      	beq.n	caba <__jp2uc+0x6a>
    ca54:	2903      	cmp	r1, #3
    ca56:	f3c0 2307 	ubfx	r3, r0, #8, #8
    ca5a:	bf1d      	ittte	ne
    ca5c:	f1a0 0280 	subne.w	r2, r0, #128	; 0x80
    ca60:	f083 0380 	eorne.w	r3, r3, #128	; 0x80
    ca64:	b2d2      	uxtbne	r2, r2
    ca66:	b2c2      	uxtbeq	r2, r0
    ca68:	f103 0150 	add.w	r1, r3, #80	; 0x50
    ca6c:	b2c9      	uxtb	r1, r1
    ca6e:	291f      	cmp	r1, #31
    ca70:	d806      	bhi.n	ca80 <__jp2uc+0x30>
    ca72:	f64c 71d3 	movw	r1, #53203	; 0xcfd3
    ca76:	4288      	cmp	r0, r1
    ca78:	d969      	bls.n	cb4e <__jp2uc+0xfe>
    ca7a:	f04f 30ff 	mov.w	r0, #4294967295
    ca7e:	4770      	bx	lr
    ca80:	f103 0130 	add.w	r1, r3, #48	; 0x30
    ca84:	b2c9      	uxtb	r1, r1
    ca86:	2924      	cmp	r1, #36	; 0x24
    ca88:	d80e      	bhi.n	caa8 <__jp2uc+0x58>
    ca8a:	f24f 41a6 	movw	r1, #62630	; 0xf4a6
    ca8e:	4288      	cmp	r0, r1
    ca90:	d8f3      	bhi.n	ca7a <__jp2uc+0x2a>
    ca92:	3bd0      	subs	r3, #208	; 0xd0
    ca94:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
    ca98:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
    ca9c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    caa0:	4a30      	ldr	r2, [pc, #192]	; (cb64 <__jp2uc+0x114>)
    caa2:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
    caa6:	4770      	bx	lr
    caa8:	3ba1      	subs	r3, #161	; 0xa1
    caaa:	2b07      	cmp	r3, #7
    caac:	d8e5      	bhi.n	ca7a <__jp2uc+0x2a>
    caae:	e8df f003 	tbb	[pc, r3]
    cab2:	3e48      	.short	0x3e48
    cab4:	25292e34 	.word	0x25292e34
    cab8:	1921      	.short	0x1921
    caba:	b2c2      	uxtb	r2, r0
    cabc:	2a9e      	cmp	r2, #158	; 0x9e
    cabe:	f3c0 2107 	ubfx	r1, r0, #8, #8
    cac2:	d90b      	bls.n	cadc <__jp2uc+0x8c>
    cac4:	3223      	adds	r2, #35	; 0x23
    cac6:	b2d2      	uxtb	r2, r2
    cac8:	2380      	movs	r3, #128	; 0x80
    caca:	299f      	cmp	r1, #159	; 0x9f
    cacc:	bf94      	ite	ls
    cace:	3970      	subls	r1, #112	; 0x70
    cad0:	3150      	addhi	r1, #80	; 0x50
    cad2:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    cad6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    cada:	e7c5      	b.n	ca68 <__jp2uc+0x18>
    cadc:	3a7e      	subs	r2, #126	; 0x7e
    cade:	b2d2      	uxtb	r2, r2
    cae0:	237f      	movs	r3, #127	; 0x7f
    cae2:	e7f2      	b.n	caca <__jp2uc+0x7a>
    cae4:	2ac0      	cmp	r2, #192	; 0xc0
    cae6:	d8c8      	bhi.n	ca7a <__jp2uc+0x2a>
    cae8:	4b1f      	ldr	r3, [pc, #124]	; (cb68 <__jp2uc+0x118>)
    caea:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
    caee:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    caf2:	4770      	bx	lr
    caf4:	2af1      	cmp	r2, #241	; 0xf1
    caf6:	d8c0      	bhi.n	ca7a <__jp2uc+0x2a>
    caf8:	4b1c      	ldr	r3, [pc, #112]	; (cb6c <__jp2uc+0x11c>)
    cafa:	e019      	b.n	cb30 <__jp2uc+0xe0>
    cafc:	2ad8      	cmp	r2, #216	; 0xd8
    cafe:	d8bc      	bhi.n	ca7a <__jp2uc+0x2a>
    cb00:	4b1b      	ldr	r3, [pc, #108]	; (cb70 <__jp2uc+0x120>)
    cb02:	e015      	b.n	cb30 <__jp2uc+0xe0>
    cb04:	2af6      	cmp	r2, #246	; 0xf6
    cb06:	d8b8      	bhi.n	ca7a <__jp2uc+0x2a>
    cb08:	f502 5040 	add.w	r0, r2, #12288	; 0x3000
    cb0c:	4770      	bx	lr
    cb0e:	2af3      	cmp	r2, #243	; 0xf3
    cb10:	d8b3      	bhi.n	ca7a <__jp2uc+0x2a>
    cb12:	f502 503e 	add.w	r0, r2, #12160	; 0x2f80
    cb16:	3020      	adds	r0, #32
    cb18:	4770      	bx	lr
    cb1a:	4b16      	ldr	r3, [pc, #88]	; (cb74 <__jp2uc+0x124>)
    cb1c:	4413      	add	r3, r2
    cb1e:	f813 3ca1 	ldrb.w	r3, [r3, #-161]
    cb22:	2b00      	cmp	r3, #0
    cb24:	d0a9      	beq.n	ca7a <__jp2uc+0x2a>
    cb26:	f502 407e 	add.w	r0, r2, #65024	; 0xfe00
    cb2a:	3060      	adds	r0, #96	; 0x60
    cb2c:	4770      	bx	lr
    cb2e:	4b12      	ldr	r3, [pc, #72]	; (cb78 <__jp2uc+0x128>)
    cb30:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
    cb34:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    cb38:	2800      	cmp	r0, #0
    cb3a:	bf08      	it	eq
    cb3c:	f04f 30ff 	moveq.w	r0, #4294967295
    cb40:	4770      	bx	lr
    cb42:	4b0e      	ldr	r3, [pc, #56]	; (cb7c <__jp2uc+0x12c>)
    cb44:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
    cb48:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    cb4c:	4770      	bx	lr
    cb4e:	3bb0      	subs	r3, #176	; 0xb0
    cb50:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
    cb54:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
    cb58:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    cb5c:	4a08      	ldr	r2, [pc, #32]	; (cb80 <__jp2uc+0x130>)
    cb5e:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
    cb62:	4770      	bx	lr
    cb64:	20005904 	.word	0x20005904
    cb68:	20000c20 	.word	0x20000c20
    cb6c:	20000b7c 	.word	0x20000b7c
    cb70:	20000b0c 	.word	0x20000b0c
    cb74:	20000ab0 	.word	0x20000ab0
    cb78:	200009f4 	.word	0x200009f4
    cb7c:	20000938 	.word	0x20000938
    cb80:	20000c60 	.word	0x20000c60

0000cb84 <_jp2uc_l>:
    cb84:	b538      	push	{r3, r4, r5, lr}
    cb86:	4605      	mov	r5, r0
    cb88:	b1b9      	cbz	r1, cbba <_jp2uc_l+0x36>
    cb8a:	f501 7495 	add.w	r4, r1, #298	; 0x12a
    cb8e:	4912      	ldr	r1, [pc, #72]	; (cbd8 <_jp2uc_l+0x54>)
    cb90:	4620      	mov	r0, r4
    cb92:	f7f9 fbd9 	bl	6348 <strcmp>
    cb96:	b928      	cbnz	r0, cba4 <_jp2uc_l+0x20>
    cb98:	4628      	mov	r0, r5
    cb9a:	2101      	movs	r1, #1
    cb9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    cba0:	f7ff bf56 	b.w	ca50 <__jp2uc>
    cba4:	490d      	ldr	r1, [pc, #52]	; (cbdc <_jp2uc_l+0x58>)
    cba6:	4620      	mov	r0, r4
    cba8:	f7f9 fbce 	bl	6348 <strcmp>
    cbac:	b938      	cbnz	r0, cbbe <_jp2uc_l+0x3a>
    cbae:	4628      	mov	r0, r5
    cbb0:	2102      	movs	r1, #2
    cbb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    cbb6:	f7ff bf4b 	b.w	ca50 <__jp2uc>
    cbba:	4c09      	ldr	r4, [pc, #36]	; (cbe0 <_jp2uc_l+0x5c>)
    cbbc:	e7e7      	b.n	cb8e <_jp2uc_l+0xa>
    cbbe:	4909      	ldr	r1, [pc, #36]	; (cbe4 <_jp2uc_l+0x60>)
    cbc0:	4620      	mov	r0, r4
    cbc2:	f7f9 fbc1 	bl	6348 <strcmp>
    cbc6:	b928      	cbnz	r0, cbd4 <_jp2uc_l+0x50>
    cbc8:	4628      	mov	r0, r5
    cbca:	2103      	movs	r1, #3
    cbcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    cbd0:	f7ff bf3e 	b.w	ca50 <__jp2uc>
    cbd4:	4628      	mov	r0, r5
    cbd6:	bd38      	pop	{r3, r4, r5, pc}
    cbd8:	200008cc 	.word	0x200008cc
    cbdc:	200008d0 	.word	0x200008d0
    cbe0:	20007d62 	.word	0x20007d62
    cbe4:	200008d8 	.word	0x200008d8

0000cbe8 <fiprintf>:
    cbe8:	b40e      	push	{r1, r2, r3}
    cbea:	b510      	push	{r4, lr}
    cbec:	b083      	sub	sp, #12
    cbee:	ab05      	add	r3, sp, #20
    cbf0:	4c06      	ldr	r4, [pc, #24]	; (cc0c <fiprintf+0x24>)
    cbf2:	f853 2b04 	ldr.w	r2, [r3], #4
    cbf6:	9301      	str	r3, [sp, #4]
    cbf8:	4601      	mov	r1, r0
    cbfa:	6820      	ldr	r0, [r4, #0]
    cbfc:	f000 f97c 	bl	cef8 <_vfiprintf_r>
    cc00:	b003      	add	sp, #12
    cc02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    cc06:	b003      	add	sp, #12
    cc08:	4770      	bx	lr
    cc0a:	bf00      	nop
    cc0c:	200081c0 	.word	0x200081c0

0000cc10 <__ssprint_r>:
    cc10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cc14:	6893      	ldr	r3, [r2, #8]
    cc16:	6817      	ldr	r7, [r2, #0]
    cc18:	b083      	sub	sp, #12
    cc1a:	4692      	mov	sl, r2
    cc1c:	2b00      	cmp	r3, #0
    cc1e:	d070      	beq.n	cd02 <__ssprint_r+0xf2>
    cc20:	4681      	mov	r9, r0
    cc22:	688a      	ldr	r2, [r1, #8]
    cc24:	6808      	ldr	r0, [r1, #0]
    cc26:	460c      	mov	r4, r1
    cc28:	3708      	adds	r7, #8
    cc2a:	e043      	b.n	ccb4 <__ssprint_r+0xa4>
    cc2c:	89a3      	ldrh	r3, [r4, #12]
    cc2e:	f413 6f90 	tst.w	r3, #1152	; 0x480
    cc32:	d02e      	beq.n	cc92 <__ssprint_r+0x82>
    cc34:	e9d4 1604 	ldrd	r1, r6, [r4, #16]
    cc38:	eba0 0801 	sub.w	r8, r0, r1
    cc3c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    cc40:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
    cc44:	f108 0001 	add.w	r0, r8, #1
    cc48:	1076      	asrs	r6, r6, #1
    cc4a:	4428      	add	r0, r5
    cc4c:	42b0      	cmp	r0, r6
    cc4e:	4632      	mov	r2, r6
    cc50:	bf84      	itt	hi
    cc52:	4606      	movhi	r6, r0
    cc54:	4632      	movhi	r2, r6
    cc56:	055b      	lsls	r3, r3, #21
    cc58:	d537      	bpl.n	ccca <__ssprint_r+0xba>
    cc5a:	4611      	mov	r1, r2
    cc5c:	4648      	mov	r0, r9
    cc5e:	f7f7 fa7f 	bl	4160 <_malloc_r>
    cc62:	9001      	str	r0, [sp, #4]
    cc64:	2800      	cmp	r0, #0
    cc66:	d03a      	beq.n	ccde <__ssprint_r+0xce>
    cc68:	4642      	mov	r2, r8
    cc6a:	6921      	ldr	r1, [r4, #16]
    cc6c:	f7f5 fb4c 	bl	2308 <memcpy>
    cc70:	89a2      	ldrh	r2, [r4, #12]
    cc72:	9b01      	ldr	r3, [sp, #4]
    cc74:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
    cc78:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    cc7c:	81a2      	strh	r2, [r4, #12]
    cc7e:	eba6 0208 	sub.w	r2, r6, r8
    cc82:	eb03 0008 	add.w	r0, r3, r8
    cc86:	6166      	str	r6, [r4, #20]
    cc88:	60a2      	str	r2, [r4, #8]
    cc8a:	6123      	str	r3, [r4, #16]
    cc8c:	6020      	str	r0, [r4, #0]
    cc8e:	462e      	mov	r6, r5
    cc90:	46a8      	mov	r8, r5
    cc92:	4642      	mov	r2, r8
    cc94:	4659      	mov	r1, fp
    cc96:	f7f9 f907 	bl	5ea8 <memmove>
    cc9a:	f8da 3008 	ldr.w	r3, [sl, #8]
    cc9e:	68a2      	ldr	r2, [r4, #8]
    cca0:	6820      	ldr	r0, [r4, #0]
    cca2:	1b92      	subs	r2, r2, r6
    cca4:	4440      	add	r0, r8
    cca6:	1b5b      	subs	r3, r3, r5
    cca8:	60a2      	str	r2, [r4, #8]
    ccaa:	6020      	str	r0, [r4, #0]
    ccac:	f8ca 3008 	str.w	r3, [sl, #8]
    ccb0:	b33b      	cbz	r3, cd02 <__ssprint_r+0xf2>
    ccb2:	3708      	adds	r7, #8
    ccb4:	e957 b502 	ldrd	fp, r5, [r7, #-8]
    ccb8:	2d00      	cmp	r5, #0
    ccba:	d0fa      	beq.n	ccb2 <__ssprint_r+0xa2>
    ccbc:	42aa      	cmp	r2, r5
    ccbe:	4616      	mov	r6, r2
    ccc0:	4690      	mov	r8, r2
    ccc2:	d9b3      	bls.n	cc2c <__ssprint_r+0x1c>
    ccc4:	462e      	mov	r6, r5
    ccc6:	46a8      	mov	r8, r5
    ccc8:	e7e3      	b.n	cc92 <__ssprint_r+0x82>
    ccca:	4648      	mov	r0, r9
    cccc:	f7f7 fd10 	bl	46f0 <_realloc_r>
    ccd0:	4603      	mov	r3, r0
    ccd2:	2800      	cmp	r0, #0
    ccd4:	d1d3      	bne.n	cc7e <__ssprint_r+0x6e>
    ccd6:	6921      	ldr	r1, [r4, #16]
    ccd8:	4648      	mov	r0, r9
    ccda:	f7f9 fe23 	bl	6924 <_free_r>
    ccde:	89a3      	ldrh	r3, [r4, #12]
    cce0:	220c      	movs	r2, #12
    cce2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    cce6:	f8c9 2000 	str.w	r2, [r9]
    ccea:	f04f 30ff 	mov.w	r0, #4294967295
    ccee:	81a3      	strh	r3, [r4, #12]
    ccf0:	2200      	movs	r2, #0
    ccf2:	2300      	movs	r3, #0
    ccf4:	f8ca 2008 	str.w	r2, [sl, #8]
    ccf8:	f8ca 3004 	str.w	r3, [sl, #4]
    ccfc:	b003      	add	sp, #12
    ccfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cd02:	2000      	movs	r0, #0
    cd04:	2300      	movs	r3, #0
    cd06:	f8ca 3004 	str.w	r3, [sl, #4]
    cd0a:	b003      	add	sp, #12
    cd0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000cd10 <_sungetc_r>:
    cd10:	b538      	push	{r3, r4, r5, lr}
    cd12:	1c4b      	adds	r3, r1, #1
    cd14:	d01a      	beq.n	cd4c <_sungetc_r+0x3c>
    cd16:	8993      	ldrh	r3, [r2, #12]
    cd18:	4614      	mov	r4, r2
    cd1a:	6b12      	ldr	r2, [r2, #48]	; 0x30
    cd1c:	f023 0320 	bic.w	r3, r3, #32
    cd20:	81a3      	strh	r3, [r4, #12]
    cd22:	b2cd      	uxtb	r5, r1
    cd24:	b1aa      	cbz	r2, cd52 <_sungetc_r+0x42>
    cd26:	6862      	ldr	r2, [r4, #4]
    cd28:	6b63      	ldr	r3, [r4, #52]	; 0x34
    cd2a:	429a      	cmp	r2, r3
    cd2c:	da09      	bge.n	cd42 <_sungetc_r+0x32>
    cd2e:	6823      	ldr	r3, [r4, #0]
    cd30:	1e5a      	subs	r2, r3, #1
    cd32:	6022      	str	r2, [r4, #0]
    cd34:	f803 5c01 	strb.w	r5, [r3, #-1]
    cd38:	6863      	ldr	r3, [r4, #4]
    cd3a:	3301      	adds	r3, #1
    cd3c:	6063      	str	r3, [r4, #4]
    cd3e:	4628      	mov	r0, r5
    cd40:	bd38      	pop	{r3, r4, r5, pc}
    cd42:	4621      	mov	r1, r4
    cd44:	f001 fa58 	bl	e1f8 <__submore>
    cd48:	2800      	cmp	r0, #0
    cd4a:	d0f0      	beq.n	cd2e <_sungetc_r+0x1e>
    cd4c:	f04f 35ff 	mov.w	r5, #4294967295
    cd50:	e7f5      	b.n	cd3e <_sungetc_r+0x2e>
    cd52:	6923      	ldr	r3, [r4, #16]
    cd54:	6822      	ldr	r2, [r4, #0]
    cd56:	b12b      	cbz	r3, cd64 <_sungetc_r+0x54>
    cd58:	4293      	cmp	r3, r2
    cd5a:	d203      	bcs.n	cd64 <_sungetc_r+0x54>
    cd5c:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    cd60:	42ab      	cmp	r3, r5
    cd62:	d00f      	beq.n	cd84 <_sungetc_r+0x74>
    cd64:	6861      	ldr	r1, [r4, #4]
    cd66:	63e1      	str	r1, [r4, #60]	; 0x3c
    cd68:	4623      	mov	r3, r4
    cd6a:	63a2      	str	r2, [r4, #56]	; 0x38
    cd6c:	f104 0140 	add.w	r1, r4, #64	; 0x40
    cd70:	2203      	movs	r2, #3
    cd72:	6362      	str	r2, [r4, #52]	; 0x34
    cd74:	6321      	str	r1, [r4, #48]	; 0x30
    cd76:	f803 5f42 	strb.w	r5, [r3, #66]!
    cd7a:	2201      	movs	r2, #1
    cd7c:	e9c4 3200 	strd	r3, r2, [r4]
    cd80:	4628      	mov	r0, r5
    cd82:	bd38      	pop	{r3, r4, r5, pc}
    cd84:	6863      	ldr	r3, [r4, #4]
    cd86:	3a01      	subs	r2, #1
    cd88:	3301      	adds	r3, #1
    cd8a:	e9c4 2300 	strd	r2, r3, [r4]
    cd8e:	e7d6      	b.n	cd3e <_sungetc_r+0x2e>

0000cd90 <__ssrefill_r>:
    cd90:	b510      	push	{r4, lr}
    cd92:	460c      	mov	r4, r1
    cd94:	6b09      	ldr	r1, [r1, #48]	; 0x30
    cd96:	b169      	cbz	r1, cdb4 <__ssrefill_r+0x24>
    cd98:	f104 0340 	add.w	r3, r4, #64	; 0x40
    cd9c:	4299      	cmp	r1, r3
    cd9e:	d001      	beq.n	cda4 <__ssrefill_r+0x14>
    cda0:	f7f9 fdc0 	bl	6924 <_free_r>
    cda4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    cda6:	6063      	str	r3, [r4, #4]
    cda8:	2000      	movs	r0, #0
    cdaa:	6320      	str	r0, [r4, #48]	; 0x30
    cdac:	b113      	cbz	r3, cdb4 <__ssrefill_r+0x24>
    cdae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    cdb0:	6023      	str	r3, [r4, #0]
    cdb2:	bd10      	pop	{r4, pc}
    cdb4:	89a3      	ldrh	r3, [r4, #12]
    cdb6:	6921      	ldr	r1, [r4, #16]
    cdb8:	2200      	movs	r2, #0
    cdba:	f043 0320 	orr.w	r3, r3, #32
    cdbe:	e9c4 1200 	strd	r1, r2, [r4]
    cdc2:	81a3      	strh	r3, [r4, #12]
    cdc4:	f04f 30ff 	mov.w	r0, #4294967295
    cdc8:	bd10      	pop	{r4, pc}
    cdca:	bf00      	nop

0000cdcc <_sfread_r>:
    cdcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cdd0:	b085      	sub	sp, #20
    cdd2:	e9cd 3202 	strd	r3, r2, [sp, #8]
    cdd6:	fb02 f303 	mul.w	r3, r2, r3
    cdda:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    cddc:	9301      	str	r3, [sp, #4]
    cdde:	b3a3      	cbz	r3, ce4a <_sfread_r+0x7e>
    cde0:	f8d4 a004 	ldr.w	sl, [r4, #4]
    cde4:	9b01      	ldr	r3, [sp, #4]
    cde6:	4553      	cmp	r3, sl
    cde8:	468b      	mov	fp, r1
    cdea:	d946      	bls.n	ce7a <_sfread_r+0xae>
    cdec:	46a0      	mov	r8, r4
    cdee:	9d01      	ldr	r5, [sp, #4]
    cdf0:	f858 1b40 	ldr.w	r1, [r8], #64
    cdf4:	4607      	mov	r7, r0
    cdf6:	2600      	movs	r6, #0
    cdf8:	4652      	mov	r2, sl
    cdfa:	4658      	mov	r0, fp
    cdfc:	f7f5 fa84 	bl	2308 <memcpy>
    ce00:	6823      	ldr	r3, [r4, #0]
    ce02:	6b22      	ldr	r2, [r4, #48]	; 0x30
    ce04:	4453      	add	r3, sl
    ce06:	46a9      	mov	r9, r5
    ce08:	e9c4 3600 	strd	r3, r6, [r4]
    ce0c:	4611      	mov	r1, r2
    ce0e:	4638      	mov	r0, r7
    ce10:	44d3      	add	fp, sl
    ce12:	eba5 050a 	sub.w	r5, r5, sl
    ce16:	b1e2      	cbz	r2, ce52 <_sfread_r+0x86>
    ce18:	4542      	cmp	r2, r8
    ce1a:	d001      	beq.n	ce20 <_sfread_r+0x54>
    ce1c:	f7f9 fd82 	bl	6924 <_free_r>
    ce20:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    ce22:	6326      	str	r6, [r4, #48]	; 0x30
    ce24:	6063      	str	r3, [r4, #4]
    ce26:	b1a3      	cbz	r3, ce52 <_sfread_r+0x86>
    ce28:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    ce2a:	6021      	str	r1, [r4, #0]
    ce2c:	42ab      	cmp	r3, r5
    ce2e:	469a      	mov	sl, r3
    ce30:	d3e2      	bcc.n	cdf8 <_sfread_r+0x2c>
    ce32:	9b02      	ldr	r3, [sp, #8]
    ce34:	9301      	str	r3, [sp, #4]
    ce36:	462a      	mov	r2, r5
    ce38:	4658      	mov	r0, fp
    ce3a:	f7f5 fa65 	bl	2308 <memcpy>
    ce3e:	e9d4 3200 	ldrd	r3, r2, [r4]
    ce42:	1b52      	subs	r2, r2, r5
    ce44:	442b      	add	r3, r5
    ce46:	e9c4 3200 	strd	r3, r2, [r4]
    ce4a:	9801      	ldr	r0, [sp, #4]
    ce4c:	b005      	add	sp, #20
    ce4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ce52:	9a01      	ldr	r2, [sp, #4]
    ce54:	9b03      	ldr	r3, [sp, #12]
    ce56:	4452      	add	r2, sl
    ce58:	eba2 0209 	sub.w	r2, r2, r9
    ce5c:	fbb2 f3f3 	udiv	r3, r2, r3
    ce60:	9301      	str	r3, [sp, #4]
    ce62:	89a3      	ldrh	r3, [r4, #12]
    ce64:	6922      	ldr	r2, [r4, #16]
    ce66:	9801      	ldr	r0, [sp, #4]
    ce68:	f043 0320 	orr.w	r3, r3, #32
    ce6c:	81a3      	strh	r3, [r4, #12]
    ce6e:	2300      	movs	r3, #0
    ce70:	e9c4 2300 	strd	r2, r3, [r4]
    ce74:	b005      	add	sp, #20
    ce76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ce7a:	6821      	ldr	r1, [r4, #0]
    ce7c:	461d      	mov	r5, r3
    ce7e:	e7d8      	b.n	ce32 <_sfread_r+0x66>

0000ce80 <__sprint_r.part.0>:
    ce80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ce84:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    ce86:	049c      	lsls	r4, r3, #18
    ce88:	4690      	mov	r8, r2
    ce8a:	d52d      	bpl.n	cee8 <__sprint_r.part.0+0x68>
    ce8c:	6893      	ldr	r3, [r2, #8]
    ce8e:	6812      	ldr	r2, [r2, #0]
    ce90:	b343      	cbz	r3, cee4 <__sprint_r.part.0+0x64>
    ce92:	468b      	mov	fp, r1
    ce94:	4606      	mov	r6, r0
    ce96:	f102 0908 	add.w	r9, r2, #8
    ce9a:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
    ce9e:	ea5f 079a 	movs.w	r7, sl, lsr #2
    cea2:	d015      	beq.n	ced0 <__sprint_r.part.0+0x50>
    cea4:	3d04      	subs	r5, #4
    cea6:	2400      	movs	r4, #0
    cea8:	e001      	b.n	ceae <__sprint_r.part.0+0x2e>
    ceaa:	42a7      	cmp	r7, r4
    ceac:	d00e      	beq.n	cecc <__sprint_r.part.0+0x4c>
    ceae:	f855 1f04 	ldr.w	r1, [r5, #4]!
    ceb2:	465a      	mov	r2, fp
    ceb4:	4630      	mov	r0, r6
    ceb6:	f001 fa97 	bl	e3e8 <_fputwc_r>
    ceba:	1c43      	adds	r3, r0, #1
    cebc:	f104 0401 	add.w	r4, r4, #1
    cec0:	d1f3      	bne.n	ceaa <__sprint_r.part.0+0x2a>
    cec2:	2300      	movs	r3, #0
    cec4:	e9c8 3301 	strd	r3, r3, [r8, #4]
    cec8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cecc:	f8d8 3008 	ldr.w	r3, [r8, #8]
    ced0:	f02a 0a03 	bic.w	sl, sl, #3
    ced4:	eba3 030a 	sub.w	r3, r3, sl
    ced8:	f8c8 3008 	str.w	r3, [r8, #8]
    cedc:	f109 0908 	add.w	r9, r9, #8
    cee0:	2b00      	cmp	r3, #0
    cee2:	d1da      	bne.n	ce9a <__sprint_r.part.0+0x1a>
    cee4:	2000      	movs	r0, #0
    cee6:	e7ec      	b.n	cec2 <__sprint_r.part.0+0x42>
    cee8:	f001 f80c 	bl	df04 <__sfvwrite_r>
    ceec:	2300      	movs	r3, #0
    ceee:	e9c8 3301 	strd	r3, r3, [r8, #4]
    cef2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cef6:	bf00      	nop

0000cef8 <_vfiprintf_r>:
    cef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cefc:	ed2d 8b02 	vpush	{d8}
    cf00:	b0c5      	sub	sp, #276	; 0x114
    cf02:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
    cf06:	4683      	mov	fp, r0
    cf08:	ee08 1a10 	vmov	s16, r1
    cf0c:	4616      	mov	r6, r2
    cf0e:	2100      	movs	r1, #0
    cf10:	2208      	movs	r2, #8
    cf12:	4650      	mov	r0, sl
    cf14:	461c      	mov	r4, r3
    cf16:	9307      	str	r3, [sp, #28]
    cf18:	f7f9 f842 	bl	5fa0 <memset>
    cf1c:	f1bb 0f00 	cmp.w	fp, #0
    cf20:	d004      	beq.n	cf2c <_vfiprintf_r+0x34>
    cf22:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
    cf26:	2b00      	cmp	r3, #0
    cf28:	f000 86a0 	beq.w	dc6c <_vfiprintf_r+0xd74>
    cf2c:	ee18 2a10 	vmov	r2, s16
    cf30:	6e53      	ldr	r3, [r2, #100]	; 0x64
    cf32:	07db      	lsls	r3, r3, #31
    cf34:	f140 8513 	bpl.w	d95e <_vfiprintf_r+0xa66>
    cf38:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
    cf3c:	b28a      	uxth	r2, r1
    cf3e:	0495      	lsls	r5, r2, #18
    cf40:	d40b      	bmi.n	cf5a <_vfiprintf_r+0x62>
    cf42:	ee18 3a10 	vmov	r3, s16
    cf46:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
    cf4a:	8199      	strh	r1, [r3, #12]
    cf4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    cf4e:	b28a      	uxth	r2, r1
    cf50:	ee18 1a10 	vmov	r1, s16
    cf54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    cf58:	664b      	str	r3, [r1, #100]	; 0x64
    cf5a:	0710      	lsls	r0, r2, #28
    cf5c:	f140 8105 	bpl.w	d16a <_vfiprintf_r+0x272>
    cf60:	ee18 3a10 	vmov	r3, s16
    cf64:	691b      	ldr	r3, [r3, #16]
    cf66:	2b00      	cmp	r3, #0
    cf68:	f000 80ff 	beq.w	d16a <_vfiprintf_r+0x272>
    cf6c:	f002 031a 	and.w	r3, r2, #26
    cf70:	2b0a      	cmp	r3, #10
    cf72:	f000 810a 	beq.w	d18a <_vfiprintf_r+0x292>
    cf76:	2300      	movs	r3, #0
    cf78:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
    cf7c:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
    cf80:	aa1b      	add	r2, sp, #108	; 0x6c
    cf82:	930c      	str	r3, [sp, #48]	; 0x30
    cf84:	9218      	str	r2, [sp, #96]	; 0x60
    cf86:	4691      	mov	r9, r2
    cf88:	930b      	str	r3, [sp, #44]	; 0x2c
    cf8a:	9305      	str	r3, [sp, #20]
    cf8c:	46b0      	mov	r8, r6
    cf8e:	4644      	mov	r4, r8
    cf90:	4ba8      	ldr	r3, [pc, #672]	; (d234 <_vfiprintf_r+0x33c>)
    cf92:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    cf96:	f7f9 f933 	bl	6200 <__locale_mb_cur_max>
    cf9a:	4622      	mov	r2, r4
    cf9c:	4603      	mov	r3, r0
    cf9e:	a912      	add	r1, sp, #72	; 0x48
    cfa0:	f8cd a000 	str.w	sl, [sp]
    cfa4:	4658      	mov	r0, fp
    cfa6:	47a8      	blx	r5
    cfa8:	2800      	cmp	r0, #0
    cfaa:	f000 8145 	beq.w	d238 <_vfiprintf_r+0x340>
    cfae:	f2c0 8139 	blt.w	d224 <_vfiprintf_r+0x32c>
    cfb2:	9a12      	ldr	r2, [sp, #72]	; 0x48
    cfb4:	2a25      	cmp	r2, #37	; 0x25
    cfb6:	4603      	mov	r3, r0
    cfb8:	d001      	beq.n	cfbe <_vfiprintf_r+0xc6>
    cfba:	441c      	add	r4, r3
    cfbc:	e7e8      	b.n	cf90 <_vfiprintf_r+0x98>
    cfbe:	ebb4 0608 	subs.w	r6, r4, r8
    cfc2:	4605      	mov	r5, r0
    cfc4:	f040 813c 	bne.w	d240 <_vfiprintf_r+0x348>
    cfc8:	2300      	movs	r3, #0
    cfca:	7861      	ldrb	r1, [r4, #1]
    cfcc:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    cfd0:	f104 0801 	add.w	r8, r4, #1
    cfd4:	9306      	str	r3, [sp, #24]
    cfd6:	f04f 37ff 	mov.w	r7, #4294967295
    cfda:	461e      	mov	r6, r3
    cfdc:	242b      	movs	r4, #43	; 0x2b
    cfde:	f108 0801 	add.w	r8, r8, #1
    cfe2:	f1a1 0320 	sub.w	r3, r1, #32
    cfe6:	2b5a      	cmp	r3, #90	; 0x5a
    cfe8:	f200 8178 	bhi.w	d2dc <_vfiprintf_r+0x3e4>
    cfec:	e8df f013 	tbh	[pc, r3, lsl #1]
    cff0:	017602b5 	.word	0x017602b5
    cff4:	02b00176 	.word	0x02b00176
    cff8:	01760176 	.word	0x01760176
    cffc:	006a0176 	.word	0x006a0176
    d000:	01760176 	.word	0x01760176
    d004:	028d027d 	.word	0x028d027d
    d008:	02880176 	.word	0x02880176
    d00c:	01760297 	.word	0x01760297
    d010:	005b0292 	.word	0x005b0292
    d014:	005b005b 	.word	0x005b005b
    d018:	005b005b 	.word	0x005b005b
    d01c:	005b005b 	.word	0x005b005b
    d020:	005b005b 	.word	0x005b005b
    d024:	01760176 	.word	0x01760176
    d028:	01760176 	.word	0x01760176
    d02c:	01760176 	.word	0x01760176
    d030:	01760176 	.word	0x01760176
    d034:	025c0176 	.word	0x025c0176
    d038:	01760084 	.word	0x01760084
    d03c:	01760176 	.word	0x01760176
    d040:	01760176 	.word	0x01760176
    d044:	01760176 	.word	0x01760176
    d048:	01760176 	.word	0x01760176
    d04c:	00e80176 	.word	0x00e80176
    d050:	01760176 	.word	0x01760176
    d054:	02330176 	.word	0x02330176
    d058:	02da0176 	.word	0x02da0176
    d05c:	01760176 	.word	0x01760176
    d060:	0176058b 	.word	0x0176058b
    d064:	01760176 	.word	0x01760176
    d068:	01760176 	.word	0x01760176
    d06c:	01760176 	.word	0x01760176
    d070:	01760176 	.word	0x01760176
    d074:	025c0176 	.word	0x025c0176
    d078:	01760086 	.word	0x01760086
    d07c:	01760176 	.word	0x01760176
    d080:	008602cd 	.word	0x008602cd
    d084:	0176007f 	.word	0x0176007f
    d088:	017602c0 	.word	0x017602c0
    d08c:	00ea02fd 	.word	0x00ea02fd
    d090:	007f02ed 	.word	0x007f02ed
    d094:	02330176 	.word	0x02330176
    d098:	0569007c 	.word	0x0569007c
    d09c:	01760176 	.word	0x01760176
    d0a0:	0176056b 	.word	0x0176056b
    d0a4:	007c      	.short	0x007c
    d0a6:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    d0aa:	2200      	movs	r2, #0
    d0ac:	f818 1b01 	ldrb.w	r1, [r8], #1
    d0b0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    d0b4:	eb03 0242 	add.w	r2, r3, r2, lsl #1
    d0b8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    d0bc:	2b09      	cmp	r3, #9
    d0be:	d9f5      	bls.n	d0ac <_vfiprintf_r+0x1b4>
    d0c0:	9206      	str	r2, [sp, #24]
    d0c2:	e78e      	b.n	cfe2 <_vfiprintf_r+0xea>
    d0c4:	4658      	mov	r0, fp
    d0c6:	f7fe fa29 	bl	b51c <_localeconv_r>
    d0ca:	6843      	ldr	r3, [r0, #4]
    d0cc:	930d      	str	r3, [sp, #52]	; 0x34
    d0ce:	4618      	mov	r0, r3
    d0d0:	f7f9 fb16 	bl	6700 <strlen>
    d0d4:	900e      	str	r0, [sp, #56]	; 0x38
    d0d6:	4605      	mov	r5, r0
    d0d8:	4658      	mov	r0, fp
    d0da:	f7fe fa1f 	bl	b51c <_localeconv_r>
    d0de:	6883      	ldr	r3, [r0, #8]
    d0e0:	930b      	str	r3, [sp, #44]	; 0x2c
    d0e2:	2d00      	cmp	r5, #0
    d0e4:	f040 84d6 	bne.w	da94 <_vfiprintf_r+0xb9c>
    d0e8:	f898 1000 	ldrb.w	r1, [r8]
    d0ec:	e777      	b.n	cfde <_vfiprintf_r+0xe6>
    d0ee:	f898 1000 	ldrb.w	r1, [r8]
    d0f2:	f046 0620 	orr.w	r6, r6, #32
    d0f6:	e772      	b.n	cfde <_vfiprintf_r+0xe6>
    d0f8:	f046 0610 	orr.w	r6, r6, #16
    d0fc:	06b4      	lsls	r4, r6, #26
    d0fe:	f140 818e 	bpl.w	d41e <_vfiprintf_r+0x526>
    d102:	9b07      	ldr	r3, [sp, #28]
    d104:	3307      	adds	r3, #7
    d106:	f023 0307 	bic.w	r3, r3, #7
    d10a:	461a      	mov	r2, r3
    d10c:	6859      	ldr	r1, [r3, #4]
    d10e:	f852 3b08 	ldr.w	r3, [r2], #8
    d112:	9207      	str	r2, [sp, #28]
    d114:	460a      	mov	r2, r1
    d116:	2900      	cmp	r1, #0
    d118:	f2c0 8470 	blt.w	d9fc <_vfiprintf_r+0xb04>
    d11c:	1c79      	adds	r1, r7, #1
    d11e:	f000 85a2 	beq.w	dc66 <_vfiprintf_r+0xd6e>
    d122:	f026 0180 	bic.w	r1, r6, #128	; 0x80
    d126:	9103      	str	r1, [sp, #12]
    d128:	ea53 0102 	orrs.w	r1, r3, r2
    d12c:	f000 843f 	beq.w	d9ae <_vfiprintf_r+0xab6>
    d130:	2b0a      	cmp	r3, #10
    d132:	f172 0100 	sbcs.w	r1, r2, #0
    d136:	f080 8541 	bcs.w	dbbc <_vfiprintf_r+0xcc4>
    d13a:	3330      	adds	r3, #48	; 0x30
    d13c:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
    d140:	9e03      	ldr	r6, [sp, #12]
    d142:	2301      	movs	r3, #1
    d144:	9304      	str	r3, [sp, #16]
    d146:	f20d 140f 	addw	r4, sp, #271	; 0x10f
    d14a:	9b04      	ldr	r3, [sp, #16]
    d14c:	42bb      	cmp	r3, r7
    d14e:	bfb8      	it	lt
    d150:	463b      	movlt	r3, r7
    d152:	9303      	str	r3, [sp, #12]
    d154:	2300      	movs	r3, #0
    d156:	9308      	str	r3, [sp, #32]
    d158:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    d15c:	2b00      	cmp	r3, #0
    d15e:	f000 80cb 	beq.w	d2f8 <_vfiprintf_r+0x400>
    d162:	9b03      	ldr	r3, [sp, #12]
    d164:	3301      	adds	r3, #1
    d166:	9303      	str	r3, [sp, #12]
    d168:	e0c6      	b.n	d2f8 <_vfiprintf_r+0x400>
    d16a:	ee18 1a10 	vmov	r1, s16
    d16e:	4658      	mov	r0, fp
    d170:	ee18 5a10 	vmov	r5, s16
    d174:	f001 f87c 	bl	e270 <__swsetup_r>
    d178:	2800      	cmp	r0, #0
    d17a:	f040 8652 	bne.w	de22 <_vfiprintf_r+0xf2a>
    d17e:	89aa      	ldrh	r2, [r5, #12]
    d180:	f002 031a 	and.w	r3, r2, #26
    d184:	2b0a      	cmp	r3, #10
    d186:	f47f aef6 	bne.w	cf76 <_vfiprintf_r+0x7e>
    d18a:	ee18 1a10 	vmov	r1, s16
    d18e:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
    d192:	2b00      	cmp	r3, #0
    d194:	f6ff aeef 	blt.w	cf76 <_vfiprintf_r+0x7e>
    d198:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    d19a:	07db      	lsls	r3, r3, #31
    d19c:	d402      	bmi.n	d1a4 <_vfiprintf_r+0x2ac>
    d19e:	0597      	lsls	r7, r2, #22
    d1a0:	f140 8612 	bpl.w	ddc8 <_vfiprintf_r+0xed0>
    d1a4:	ee18 1a10 	vmov	r1, s16
    d1a8:	4623      	mov	r3, r4
    d1aa:	4632      	mov	r2, r6
    d1ac:	4658      	mov	r0, fp
    d1ae:	f000 fe69 	bl	de84 <__sbprintf>
    d1b2:	9005      	str	r0, [sp, #20]
    d1b4:	9805      	ldr	r0, [sp, #20]
    d1b6:	b045      	add	sp, #276	; 0x114
    d1b8:	ecbd 8b02 	vpop	{d8}
    d1bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d1c0:	f046 0610 	orr.w	r6, r6, #16
    d1c4:	f016 0220 	ands.w	r2, r6, #32
    d1c8:	f000 8136 	beq.w	d438 <_vfiprintf_r+0x540>
    d1cc:	9b07      	ldr	r3, [sp, #28]
    d1ce:	3307      	adds	r3, #7
    d1d0:	f023 0307 	bic.w	r3, r3, #7
    d1d4:	4619      	mov	r1, r3
    d1d6:	685a      	ldr	r2, [r3, #4]
    d1d8:	f851 3b08 	ldr.w	r3, [r1], #8
    d1dc:	9107      	str	r1, [sp, #28]
    d1de:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
    d1e2:	9103      	str	r1, [sp, #12]
    d1e4:	2100      	movs	r1, #0
    d1e6:	2000      	movs	r0, #0
    d1e8:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
    d1ec:	1c78      	adds	r0, r7, #1
    d1ee:	f000 8210 	beq.w	d612 <_vfiprintf_r+0x71a>
    d1f2:	9803      	ldr	r0, [sp, #12]
    d1f4:	f020 0680 	bic.w	r6, r0, #128	; 0x80
    d1f8:	ea53 0002 	orrs.w	r0, r3, r2
    d1fc:	f040 8208 	bne.w	d610 <_vfiprintf_r+0x718>
    d200:	2f00      	cmp	r7, #0
    d202:	f040 8538 	bne.w	dc76 <_vfiprintf_r+0xd7e>
    d206:	2900      	cmp	r1, #0
    d208:	f040 83d5 	bne.w	d9b6 <_vfiprintf_r+0xabe>
    d20c:	9b03      	ldr	r3, [sp, #12]
    d20e:	f013 0301 	ands.w	r3, r3, #1
    d212:	9304      	str	r3, [sp, #16]
    d214:	f000 8411 	beq.w	da3a <_vfiprintf_r+0xb42>
    d218:	2330      	movs	r3, #48	; 0x30
    d21a:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
    d21e:	f20d 140f 	addw	r4, sp, #271	; 0x10f
    d222:	e792      	b.n	d14a <_vfiprintf_r+0x252>
    d224:	2208      	movs	r2, #8
    d226:	2100      	movs	r1, #0
    d228:	4650      	mov	r0, sl
    d22a:	f7f8 feb9 	bl	5fa0 <memset>
    d22e:	2301      	movs	r3, #1
    d230:	441c      	add	r4, r3
    d232:	e6ad      	b.n	cf90 <_vfiprintf_r+0x98>
    d234:	20007c38 	.word	0x20007c38
    d238:	ebb4 0608 	subs.w	r6, r4, r8
    d23c:	4605      	mov	r5, r0
    d23e:	d01b      	beq.n	d278 <_vfiprintf_r+0x380>
    d240:	9b19      	ldr	r3, [sp, #100]	; 0x64
    d242:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    d244:	3301      	adds	r3, #1
    d246:	4432      	add	r2, r6
    d248:	2b07      	cmp	r3, #7
    d24a:	e9c9 8600 	strd	r8, r6, [r9]
    d24e:	921a      	str	r2, [sp, #104]	; 0x68
    d250:	9319      	str	r3, [sp, #100]	; 0x64
    d252:	dd1c      	ble.n	d28e <_vfiprintf_r+0x396>
    d254:	2a00      	cmp	r2, #0
    d256:	f000 83a6 	beq.w	d9a6 <_vfiprintf_r+0xaae>
    d25a:	ee18 1a10 	vmov	r1, s16
    d25e:	aa18      	add	r2, sp, #96	; 0x60
    d260:	4658      	mov	r0, fp
    d262:	f7ff fe0d 	bl	ce80 <__sprint_r.part.0>
    d266:	bb20      	cbnz	r0, d2b2 <_vfiprintf_r+0x3ba>
    d268:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d26c:	9b05      	ldr	r3, [sp, #20]
    d26e:	4433      	add	r3, r6
    d270:	9305      	str	r3, [sp, #20]
    d272:	2d00      	cmp	r5, #0
    d274:	f47f aea8 	bne.w	cfc8 <_vfiprintf_r+0xd0>
    d278:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    d27a:	2b00      	cmp	r3, #0
    d27c:	f040 85c1 	bne.w	de02 <_vfiprintf_r+0xf0a>
    d280:	ee18 3a10 	vmov	r3, s16
    d284:	2200      	movs	r2, #0
    d286:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    d28a:	9219      	str	r2, [sp, #100]	; 0x64
    d28c:	e015      	b.n	d2ba <_vfiprintf_r+0x3c2>
    d28e:	f109 0908 	add.w	r9, r9, #8
    d292:	e7eb      	b.n	d26c <_vfiprintf_r+0x374>
    d294:	ee18 1a10 	vmov	r1, s16
    d298:	aa18      	add	r2, sp, #96	; 0x60
    d29a:	4658      	mov	r0, fp
    d29c:	f7ff fdf0 	bl	ce80 <__sprint_r.part.0>
    d2a0:	2800      	cmp	r0, #0
    d2a2:	f000 80a6 	beq.w	d3f2 <_vfiprintf_r+0x4fa>
    d2a6:	9b08      	ldr	r3, [sp, #32]
    d2a8:	b11b      	cbz	r3, d2b2 <_vfiprintf_r+0x3ba>
    d2aa:	9908      	ldr	r1, [sp, #32]
    d2ac:	4658      	mov	r0, fp
    d2ae:	f7f9 fb39 	bl	6924 <_free_r>
    d2b2:	ee18 3a10 	vmov	r3, s16
    d2b6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    d2ba:	ee18 2a10 	vmov	r2, s16
    d2be:	6e52      	ldr	r2, [r2, #100]	; 0x64
    d2c0:	f012 0f01 	tst.w	r2, #1
    d2c4:	b29a      	uxth	r2, r3
    d2c6:	f000 80a0 	beq.w	d40a <_vfiprintf_r+0x512>
    d2ca:	0650      	lsls	r0, r2, #25
    d2cc:	f100 85b2 	bmi.w	de34 <_vfiprintf_r+0xf3c>
    d2d0:	9805      	ldr	r0, [sp, #20]
    d2d2:	b045      	add	sp, #276	; 0x114
    d2d4:	ecbd 8b02 	vpop	{d8}
    d2d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d2dc:	2900      	cmp	r1, #0
    d2de:	d0cb      	beq.n	d278 <_vfiprintf_r+0x380>
    d2e0:	2300      	movs	r3, #0
    d2e2:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    d2e6:	2301      	movs	r3, #1
    d2e8:	e9cd 3303 	strd	r3, r3, [sp, #12]
    d2ec:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
    d2f0:	ac2b      	add	r4, sp, #172	; 0xac
    d2f2:	2300      	movs	r3, #0
    d2f4:	9308      	str	r3, [sp, #32]
    d2f6:	461f      	mov	r7, r3
    d2f8:	f016 0302 	ands.w	r3, r6, #2
    d2fc:	9309      	str	r3, [sp, #36]	; 0x24
    d2fe:	d002      	beq.n	d306 <_vfiprintf_r+0x40e>
    d300:	9b03      	ldr	r3, [sp, #12]
    d302:	3302      	adds	r3, #2
    d304:	9303      	str	r3, [sp, #12]
    d306:	f016 0384 	ands.w	r3, r6, #132	; 0x84
    d30a:	930a      	str	r3, [sp, #40]	; 0x28
    d30c:	d105      	bne.n	d31a <_vfiprintf_r+0x422>
    d30e:	9b06      	ldr	r3, [sp, #24]
    d310:	9a03      	ldr	r2, [sp, #12]
    d312:	1a9d      	subs	r5, r3, r2
    d314:	2d00      	cmp	r5, #0
    d316:	f300 827b 	bgt.w	d810 <_vfiprintf_r+0x918>
    d31a:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    d31e:	1c41      	adds	r1, r0, #1
    d320:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
    d324:	b182      	cbz	r2, d348 <_vfiprintf_r+0x450>
    d326:	2201      	movs	r2, #1
    d328:	3301      	adds	r3, #1
    d32a:	f8c9 2004 	str.w	r2, [r9, #4]
    d32e:	2907      	cmp	r1, #7
    d330:	f10d 0243 	add.w	r2, sp, #67	; 0x43
    d334:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    d338:	f8c9 2000 	str.w	r2, [r9]
    d33c:	f300 824a 	bgt.w	d7d4 <_vfiprintf_r+0x8dc>
    d340:	4608      	mov	r0, r1
    d342:	f109 0908 	add.w	r9, r9, #8
    d346:	3101      	adds	r1, #1
    d348:	9a09      	ldr	r2, [sp, #36]	; 0x24
    d34a:	b1e2      	cbz	r2, d386 <_vfiprintf_r+0x48e>
    d34c:	aa11      	add	r2, sp, #68	; 0x44
    d34e:	3302      	adds	r3, #2
    d350:	f8c9 2000 	str.w	r2, [r9]
    d354:	2907      	cmp	r1, #7
    d356:	f04f 0202 	mov.w	r2, #2
    d35a:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    d35e:	f8c9 2004 	str.w	r2, [r9, #4]
    d362:	f340 8250 	ble.w	d806 <_vfiprintf_r+0x90e>
    d366:	2b00      	cmp	r3, #0
    d368:	f000 8343 	beq.w	d9f2 <_vfiprintf_r+0xafa>
    d36c:	ee18 1a10 	vmov	r1, s16
    d370:	aa18      	add	r2, sp, #96	; 0x60
    d372:	4658      	mov	r0, fp
    d374:	f7ff fd84 	bl	ce80 <__sprint_r.part.0>
    d378:	2800      	cmp	r0, #0
    d37a:	d194      	bne.n	d2a6 <_vfiprintf_r+0x3ae>
    d37c:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    d380:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d384:	1c41      	adds	r1, r0, #1
    d386:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    d388:	2a80      	cmp	r2, #128	; 0x80
    d38a:	f000 8184 	beq.w	d696 <_vfiprintf_r+0x79e>
    d38e:	9a04      	ldr	r2, [sp, #16]
    d390:	1abd      	subs	r5, r7, r2
    d392:	2d00      	cmp	r5, #0
    d394:	f300 81d7 	bgt.w	d746 <_vfiprintf_r+0x84e>
    d398:	9a04      	ldr	r2, [sp, #16]
    d39a:	f8c9 4000 	str.w	r4, [r9]
    d39e:	4413      	add	r3, r2
    d3a0:	2907      	cmp	r1, #7
    d3a2:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    d3a6:	f8c9 2004 	str.w	r2, [r9, #4]
    d3aa:	f340 816e 	ble.w	d68a <_vfiprintf_r+0x792>
    d3ae:	2b00      	cmp	r3, #0
    d3b0:	f000 8275 	beq.w	d89e <_vfiprintf_r+0x9a6>
    d3b4:	ee18 1a10 	vmov	r1, s16
    d3b8:	aa18      	add	r2, sp, #96	; 0x60
    d3ba:	4658      	mov	r0, fp
    d3bc:	f7ff fd60 	bl	ce80 <__sprint_r.part.0>
    d3c0:	2800      	cmp	r0, #0
    d3c2:	f47f af70 	bne.w	d2a6 <_vfiprintf_r+0x3ae>
    d3c6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    d3c8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d3cc:	0775      	lsls	r5, r6, #29
    d3ce:	d505      	bpl.n	d3dc <_vfiprintf_r+0x4e4>
    d3d0:	9a06      	ldr	r2, [sp, #24]
    d3d2:	9903      	ldr	r1, [sp, #12]
    d3d4:	1a54      	subs	r4, r2, r1
    d3d6:	2c00      	cmp	r4, #0
    d3d8:	f300 826b 	bgt.w	d8b2 <_vfiprintf_r+0x9ba>
    d3dc:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
    d3e0:	9803      	ldr	r0, [sp, #12]
    d3e2:	4281      	cmp	r1, r0
    d3e4:	bfac      	ite	ge
    d3e6:	1852      	addge	r2, r2, r1
    d3e8:	1812      	addlt	r2, r2, r0
    d3ea:	9205      	str	r2, [sp, #20]
    d3ec:	2b00      	cmp	r3, #0
    d3ee:	f47f af51 	bne.w	d294 <_vfiprintf_r+0x39c>
    d3f2:	9908      	ldr	r1, [sp, #32]
    d3f4:	2300      	movs	r3, #0
    d3f6:	9319      	str	r3, [sp, #100]	; 0x64
    d3f8:	2900      	cmp	r1, #0
    d3fa:	f000 8149 	beq.w	d690 <_vfiprintf_r+0x798>
    d3fe:	4658      	mov	r0, fp
    d400:	f7f9 fa90 	bl	6924 <_free_r>
    d404:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d408:	e5c1      	b.n	cf8e <_vfiprintf_r+0x96>
    d40a:	059c      	lsls	r4, r3, #22
    d40c:	f53f af5d 	bmi.w	d2ca <_vfiprintf_r+0x3d2>
    d410:	ee18 4a10 	vmov	r4, s16
    d414:	6da0      	ldr	r0, [r4, #88]	; 0x58
    d416:	f7f8 ff8f 	bl	6338 <__retarget_lock_release_recursive>
    d41a:	89a2      	ldrh	r2, [r4, #12]
    d41c:	e755      	b.n	d2ca <_vfiprintf_r+0x3d2>
    d41e:	06f0      	lsls	r0, r6, #27
    d420:	9a07      	ldr	r2, [sp, #28]
    d422:	f100 831f 	bmi.w	da64 <_vfiprintf_r+0xb6c>
    d426:	0671      	lsls	r1, r6, #25
    d428:	f140 8319 	bpl.w	da5e <_vfiprintf_r+0xb66>
    d42c:	f932 3b04 	ldrsh.w	r3, [r2], #4
    d430:	9207      	str	r2, [sp, #28]
    d432:	17da      	asrs	r2, r3, #31
    d434:	4611      	mov	r1, r2
    d436:	e66e      	b.n	d116 <_vfiprintf_r+0x21e>
    d438:	f016 0310 	ands.w	r3, r6, #16
    d43c:	9907      	ldr	r1, [sp, #28]
    d43e:	f040 8309 	bne.w	da54 <_vfiprintf_r+0xb5c>
    d442:	f016 0040 	ands.w	r0, r6, #64	; 0x40
    d446:	f000 8301 	beq.w	da4c <_vfiprintf_r+0xb54>
    d44a:	461a      	mov	r2, r3
    d44c:	f851 3b04 	ldr.w	r3, [r1], #4
    d450:	9107      	str	r1, [sp, #28]
    d452:	b29b      	uxth	r3, r3
    d454:	e6c3      	b.n	d1de <_vfiprintf_r+0x2e6>
    d456:	9b07      	ldr	r3, [sp, #28]
    d458:	461a      	mov	r2, r3
    d45a:	2300      	movs	r3, #0
    d45c:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    d460:	4613      	mov	r3, r2
    d462:	f853 4b04 	ldr.w	r4, [r3], #4
    d466:	9303      	str	r3, [sp, #12]
    d468:	2c00      	cmp	r4, #0
    d46a:	f000 8412 	beq.w	dc92 <_vfiprintf_r+0xd9a>
    d46e:	2953      	cmp	r1, #83	; 0x53
    d470:	f000 8365 	beq.w	db3e <_vfiprintf_r+0xc46>
    d474:	f016 0510 	ands.w	r5, r6, #16
    d478:	f040 8361 	bne.w	db3e <_vfiprintf_r+0xc46>
    d47c:	1c7b      	adds	r3, r7, #1
    d47e:	f000 84b3 	beq.w	dde8 <_vfiprintf_r+0xef0>
    d482:	463a      	mov	r2, r7
    d484:	4629      	mov	r1, r5
    d486:	4620      	mov	r0, r4
    d488:	f7fe f852 	bl	b530 <memchr>
    d48c:	9008      	str	r0, [sp, #32]
    d48e:	2800      	cmp	r0, #0
    d490:	f000 849f 	beq.w	ddd2 <_vfiprintf_r+0xeda>
    d494:	1b03      	subs	r3, r0, r4
    d496:	9a03      	ldr	r2, [sp, #12]
    d498:	9304      	str	r3, [sp, #16]
    d49a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    d49e:	462f      	mov	r7, r5
    d4a0:	9207      	str	r2, [sp, #28]
    d4a2:	9303      	str	r3, [sp, #12]
    d4a4:	9508      	str	r5, [sp, #32]
    d4a6:	e657      	b.n	d158 <_vfiprintf_r+0x260>
    d4a8:	2943      	cmp	r1, #67	; 0x43
    d4aa:	d002      	beq.n	d4b2 <_vfiprintf_r+0x5ba>
    d4ac:	06f5      	lsls	r5, r6, #27
    d4ae:	f140 832d 	bpl.w	db0c <_vfiprintf_r+0xc14>
    d4b2:	9d07      	ldr	r5, [sp, #28]
    d4b4:	2208      	movs	r2, #8
    d4b6:	2100      	movs	r1, #0
    d4b8:	a816      	add	r0, sp, #88	; 0x58
    d4ba:	ac2b      	add	r4, sp, #172	; 0xac
    d4bc:	f7f8 fd70 	bl	5fa0 <memset>
    d4c0:	ab16      	add	r3, sp, #88	; 0x58
    d4c2:	f855 2b04 	ldr.w	r2, [r5], #4
    d4c6:	4621      	mov	r1, r4
    d4c8:	4658      	mov	r0, fp
    d4ca:	f7ff fa77 	bl	c9bc <_wcrtomb_r>
    d4ce:	4603      	mov	r3, r0
    d4d0:	3301      	adds	r3, #1
    d4d2:	9004      	str	r0, [sp, #16]
    d4d4:	f000 84b3 	beq.w	de3e <_vfiprintf_r+0xf46>
    d4d8:	9b04      	ldr	r3, [sp, #16]
    d4da:	9507      	str	r5, [sp, #28]
    d4dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    d4e0:	9303      	str	r3, [sp, #12]
    d4e2:	2300      	movs	r3, #0
    d4e4:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    d4e8:	e703      	b.n	d2f2 <_vfiprintf_r+0x3fa>
    d4ea:	9b07      	ldr	r3, [sp, #28]
    d4ec:	f853 2b04 	ldr.w	r2, [r3], #4
    d4f0:	9206      	str	r2, [sp, #24]
    d4f2:	2a00      	cmp	r2, #0
    d4f4:	f280 829c 	bge.w	da30 <_vfiprintf_r+0xb38>
    d4f8:	9a06      	ldr	r2, [sp, #24]
    d4fa:	4252      	negs	r2, r2
    d4fc:	e9cd 2306 	strd	r2, r3, [sp, #24]
    d500:	f898 1000 	ldrb.w	r1, [r8]
    d504:	f046 0604 	orr.w	r6, r6, #4
    d508:	e569      	b.n	cfde <_vfiprintf_r+0xe6>
    d50a:	f898 1000 	ldrb.w	r1, [r8]
    d50e:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
    d512:	e564      	b.n	cfde <_vfiprintf_r+0xe6>
    d514:	f898 1000 	ldrb.w	r1, [r8]
    d518:	f046 0680 	orr.w	r6, r6, #128	; 0x80
    d51c:	e55f      	b.n	cfde <_vfiprintf_r+0xe6>
    d51e:	4642      	mov	r2, r8
    d520:	f812 1b01 	ldrb.w	r1, [r2], #1
    d524:	292a      	cmp	r1, #42	; 0x2a
    d526:	f000 8496 	beq.w	de56 <_vfiprintf_r+0xf5e>
    d52a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    d52e:	2b09      	cmp	r3, #9
    d530:	4690      	mov	r8, r2
    d532:	f04f 0700 	mov.w	r7, #0
    d536:	f63f ad54 	bhi.w	cfe2 <_vfiprintf_r+0xea>
    d53a:	f818 1b01 	ldrb.w	r1, [r8], #1
    d53e:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    d542:	eb03 0747 	add.w	r7, r3, r7, lsl #1
    d546:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    d54a:	2b09      	cmp	r3, #9
    d54c:	d9f5      	bls.n	d53a <_vfiprintf_r+0x642>
    d54e:	e548      	b.n	cfe2 <_vfiprintf_r+0xea>
    d550:	f898 1000 	ldrb.w	r1, [r8]
    d554:	f046 0601 	orr.w	r6, r6, #1
    d558:	e541      	b.n	cfde <_vfiprintf_r+0xe6>
    d55a:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    d55e:	2b00      	cmp	r3, #0
    d560:	f47f adc2 	bne.w	d0e8 <_vfiprintf_r+0x1f0>
    d564:	2320      	movs	r3, #32
    d566:	f898 1000 	ldrb.w	r1, [r8]
    d56a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    d56e:	e536      	b.n	cfde <_vfiprintf_r+0xe6>
    d570:	f898 1000 	ldrb.w	r1, [r8]
    d574:	296c      	cmp	r1, #108	; 0x6c
    d576:	bf03      	ittte	eq
    d578:	f898 1001 	ldrbeq.w	r1, [r8, #1]
    d57c:	f046 0620 	orreq.w	r6, r6, #32
    d580:	f108 0801 	addeq.w	r8, r8, #1
    d584:	f046 0610 	orrne.w	r6, r6, #16
    d588:	e529      	b.n	cfde <_vfiprintf_r+0xe6>
    d58a:	f898 1000 	ldrb.w	r1, [r8]
    d58e:	2968      	cmp	r1, #104	; 0x68
    d590:	bf03      	ittte	eq
    d592:	f898 1001 	ldrbeq.w	r1, [r8, #1]
    d596:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
    d59a:	f108 0801 	addeq.w	r8, r8, #1
    d59e:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
    d5a2:	e51c      	b.n	cfde <_vfiprintf_r+0xe6>
    d5a4:	f046 0310 	orr.w	r3, r6, #16
    d5a8:	9303      	str	r3, [sp, #12]
    d5aa:	9b03      	ldr	r3, [sp, #12]
    d5ac:	f013 0220 	ands.w	r2, r3, #32
    d5b0:	f000 8206 	beq.w	d9c0 <_vfiprintf_r+0xac8>
    d5b4:	9b07      	ldr	r3, [sp, #28]
    d5b6:	3307      	adds	r3, #7
    d5b8:	f023 0307 	bic.w	r3, r3, #7
    d5bc:	4619      	mov	r1, r3
    d5be:	685a      	ldr	r2, [r3, #4]
    d5c0:	f851 3b08 	ldr.w	r3, [r1], #8
    d5c4:	9107      	str	r1, [sp, #28]
    d5c6:	2101      	movs	r1, #1
    d5c8:	e60d      	b.n	d1e6 <_vfiprintf_r+0x2ee>
    d5ca:	9a07      	ldr	r2, [sp, #28]
    d5cc:	f046 0302 	orr.w	r3, r6, #2
    d5d0:	9303      	str	r3, [sp, #12]
    d5d2:	f852 3b04 	ldr.w	r3, [r2], #4
    d5d6:	9207      	str	r2, [sp, #28]
    d5d8:	f647 0230 	movw	r2, #30768	; 0x7830
    d5dc:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
    d5e0:	4ab8      	ldr	r2, [pc, #736]	; (d8c4 <_vfiprintf_r+0x9cc>)
    d5e2:	920c      	str	r2, [sp, #48]	; 0x30
    d5e4:	2102      	movs	r1, #2
    d5e6:	2200      	movs	r2, #0
    d5e8:	e5fd      	b.n	d1e6 <_vfiprintf_r+0x2ee>
    d5ea:	06b7      	lsls	r7, r6, #26
    d5ec:	f100 8248 	bmi.w	da80 <_vfiprintf_r+0xb88>
    d5f0:	06f5      	lsls	r5, r6, #27
    d5f2:	f100 8346 	bmi.w	dc82 <_vfiprintf_r+0xd8a>
    d5f6:	0674      	lsls	r4, r6, #25
    d5f8:	f100 83d5 	bmi.w	dda6 <_vfiprintf_r+0xeae>
    d5fc:	05b0      	lsls	r0, r6, #22
    d5fe:	f140 8340 	bpl.w	dc82 <_vfiprintf_r+0xd8a>
    d602:	9b07      	ldr	r3, [sp, #28]
    d604:	9905      	ldr	r1, [sp, #20]
    d606:	f853 2b04 	ldr.w	r2, [r3], #4
    d60a:	9307      	str	r3, [sp, #28]
    d60c:	7011      	strb	r1, [r2, #0]
    d60e:	e4be      	b.n	cf8e <_vfiprintf_r+0x96>
    d610:	9603      	str	r6, [sp, #12]
    d612:	2901      	cmp	r1, #1
    d614:	f43f ad8c 	beq.w	d130 <_vfiprintf_r+0x238>
    d618:	2902      	cmp	r1, #2
    d61a:	ac44      	add	r4, sp, #272	; 0x110
    d61c:	d111      	bne.n	d642 <_vfiprintf_r+0x74a>
    d61e:	980c      	ldr	r0, [sp, #48]	; 0x30
    d620:	f003 010f 	and.w	r1, r3, #15
    d624:	091b      	lsrs	r3, r3, #4
    d626:	5c41      	ldrb	r1, [r0, r1]
    d628:	f804 1d01 	strb.w	r1, [r4, #-1]!
    d62c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    d630:	0912      	lsrs	r2, r2, #4
    d632:	ea53 0102 	orrs.w	r1, r3, r2
    d636:	d1f3      	bne.n	d620 <_vfiprintf_r+0x728>
    d638:	9e03      	ldr	r6, [sp, #12]
    d63a:	ab44      	add	r3, sp, #272	; 0x110
    d63c:	1b1b      	subs	r3, r3, r4
    d63e:	9304      	str	r3, [sp, #16]
    d640:	e583      	b.n	d14a <_vfiprintf_r+0x252>
    d642:	f003 0107 	and.w	r1, r3, #7
    d646:	08db      	lsrs	r3, r3, #3
    d648:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
    d64c:	08d2      	lsrs	r2, r2, #3
    d64e:	3130      	adds	r1, #48	; 0x30
    d650:	ea53 0502 	orrs.w	r5, r3, r2
    d654:	4620      	mov	r0, r4
    d656:	f804 1d01 	strb.w	r1, [r4, #-1]!
    d65a:	d1f2      	bne.n	d642 <_vfiprintf_r+0x74a>
    d65c:	9e03      	ldr	r6, [sp, #12]
    d65e:	07f3      	lsls	r3, r6, #31
    d660:	d5eb      	bpl.n	d63a <_vfiprintf_r+0x742>
    d662:	2930      	cmp	r1, #48	; 0x30
    d664:	d0e8      	beq.n	d638 <_vfiprintf_r+0x740>
    d666:	2330      	movs	r3, #48	; 0x30
    d668:	3802      	subs	r0, #2
    d66a:	f804 3c01 	strb.w	r3, [r4, #-1]
    d66e:	ab44      	add	r3, sp, #272	; 0x110
    d670:	1a1b      	subs	r3, r3, r0
    d672:	9e03      	ldr	r6, [sp, #12]
    d674:	9304      	str	r3, [sp, #16]
    d676:	4604      	mov	r4, r0
    d678:	e567      	b.n	d14a <_vfiprintf_r+0x252>
    d67a:	9b04      	ldr	r3, [sp, #16]
    d67c:	941b      	str	r4, [sp, #108]	; 0x6c
    d67e:	2201      	movs	r2, #1
    d680:	931c      	str	r3, [sp, #112]	; 0x70
    d682:	931a      	str	r3, [sp, #104]	; 0x68
    d684:	9219      	str	r2, [sp, #100]	; 0x64
    d686:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d68a:	f109 0908 	add.w	r9, r9, #8
    d68e:	e69d      	b.n	d3cc <_vfiprintf_r+0x4d4>
    d690:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d694:	e47b      	b.n	cf8e <_vfiprintf_r+0x96>
    d696:	9a06      	ldr	r2, [sp, #24]
    d698:	9d03      	ldr	r5, [sp, #12]
    d69a:	1b55      	subs	r5, r2, r5
    d69c:	2d00      	cmp	r5, #0
    d69e:	f77f ae76 	ble.w	d38e <_vfiprintf_r+0x496>
    d6a2:	2d10      	cmp	r5, #16
    d6a4:	f340 83bb 	ble.w	de1e <_vfiprintf_r+0xf26>
    d6a8:	9409      	str	r4, [sp, #36]	; 0x24
    d6aa:	ee18 4a10 	vmov	r4, s16
    d6ae:	e007      	b.n	d6c0 <_vfiprintf_r+0x7c8>
    d6b0:	f100 0c02 	add.w	ip, r0, #2
    d6b4:	f109 0908 	add.w	r9, r9, #8
    d6b8:	4610      	mov	r0, r2
    d6ba:	3d10      	subs	r5, #16
    d6bc:	2d10      	cmp	r5, #16
    d6be:	dd1e      	ble.n	d6fe <_vfiprintf_r+0x806>
    d6c0:	4981      	ldr	r1, [pc, #516]	; (d8c8 <_vfiprintf_r+0x9d0>)
    d6c2:	f8c9 1000 	str.w	r1, [r9]
    d6c6:	1c42      	adds	r2, r0, #1
    d6c8:	3310      	adds	r3, #16
    d6ca:	2110      	movs	r1, #16
    d6cc:	2a07      	cmp	r2, #7
    d6ce:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    d6d2:	f8c9 1004 	str.w	r1, [r9, #4]
    d6d6:	ddeb      	ble.n	d6b0 <_vfiprintf_r+0x7b8>
    d6d8:	aa18      	add	r2, sp, #96	; 0x60
    d6da:	2b00      	cmp	r3, #0
    d6dc:	d074      	beq.n	d7c8 <_vfiprintf_r+0x8d0>
    d6de:	4621      	mov	r1, r4
    d6e0:	4658      	mov	r0, fp
    d6e2:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d6e6:	f7ff fbcb 	bl	ce80 <__sprint_r.part.0>
    d6ea:	2800      	cmp	r0, #0
    d6ec:	f47f addb 	bne.w	d2a6 <_vfiprintf_r+0x3ae>
    d6f0:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    d6f4:	3d10      	subs	r5, #16
    d6f6:	2d10      	cmp	r5, #16
    d6f8:	f100 0c01 	add.w	ip, r0, #1
    d6fc:	dce0      	bgt.n	d6c0 <_vfiprintf_r+0x7c8>
    d6fe:	9c09      	ldr	r4, [sp, #36]	; 0x24
    d700:	4a71      	ldr	r2, [pc, #452]	; (d8c8 <_vfiprintf_r+0x9d0>)
    d702:	f8c9 5004 	str.w	r5, [r9, #4]
    d706:	442b      	add	r3, r5
    d708:	f1bc 0f07 	cmp.w	ip, #7
    d70c:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
    d710:	f8c9 2000 	str.w	r2, [r9]
    d714:	f340 8194 	ble.w	da40 <_vfiprintf_r+0xb48>
    d718:	2b00      	cmp	r3, #0
    d71a:	f000 831f 	beq.w	dd5c <_vfiprintf_r+0xe64>
    d71e:	ee18 1a10 	vmov	r1, s16
    d722:	aa18      	add	r2, sp, #96	; 0x60
    d724:	4658      	mov	r0, fp
    d726:	f7ff fbab 	bl	ce80 <__sprint_r.part.0>
    d72a:	2800      	cmp	r0, #0
    d72c:	f47f adbb 	bne.w	d2a6 <_vfiprintf_r+0x3ae>
    d730:	9a04      	ldr	r2, [sp, #16]
    d732:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    d736:	1abd      	subs	r5, r7, r2
    d738:	2d00      	cmp	r5, #0
    d73a:	f100 0101 	add.w	r1, r0, #1
    d73e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d742:	f77f ae29 	ble.w	d398 <_vfiprintf_r+0x4a0>
    d746:	2d10      	cmp	r5, #16
    d748:	dd29      	ble.n	d79e <_vfiprintf_r+0x8a6>
    d74a:	9409      	str	r4, [sp, #36]	; 0x24
    d74c:	2710      	movs	r7, #16
    d74e:	ee18 4a10 	vmov	r4, s16
    d752:	e007      	b.n	d764 <_vfiprintf_r+0x86c>
    d754:	f100 0c02 	add.w	ip, r0, #2
    d758:	f109 0908 	add.w	r9, r9, #8
    d75c:	4610      	mov	r0, r2
    d75e:	3d10      	subs	r5, #16
    d760:	2d10      	cmp	r5, #16
    d762:	dd1a      	ble.n	d79a <_vfiprintf_r+0x8a2>
    d764:	1c42      	adds	r2, r0, #1
    d766:	4958      	ldr	r1, [pc, #352]	; (d8c8 <_vfiprintf_r+0x9d0>)
    d768:	3310      	adds	r3, #16
    d76a:	2a07      	cmp	r2, #7
    d76c:	e9c9 1700 	strd	r1, r7, [r9]
    d770:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    d774:	ddee      	ble.n	d754 <_vfiprintf_r+0x85c>
    d776:	aa18      	add	r2, sp, #96	; 0x60
    d778:	b303      	cbz	r3, d7bc <_vfiprintf_r+0x8c4>
    d77a:	4621      	mov	r1, r4
    d77c:	4658      	mov	r0, fp
    d77e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d782:	f7ff fb7d 	bl	ce80 <__sprint_r.part.0>
    d786:	2800      	cmp	r0, #0
    d788:	f47f ad8d 	bne.w	d2a6 <_vfiprintf_r+0x3ae>
    d78c:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    d790:	3d10      	subs	r5, #16
    d792:	2d10      	cmp	r5, #16
    d794:	f100 0c01 	add.w	ip, r0, #1
    d798:	dce4      	bgt.n	d764 <_vfiprintf_r+0x86c>
    d79a:	9c09      	ldr	r4, [sp, #36]	; 0x24
    d79c:	4661      	mov	r1, ip
    d79e:	4a4a      	ldr	r2, [pc, #296]	; (d8c8 <_vfiprintf_r+0x9d0>)
    d7a0:	f8c9 5004 	str.w	r5, [r9, #4]
    d7a4:	442b      	add	r3, r5
    d7a6:	2907      	cmp	r1, #7
    d7a8:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    d7ac:	f8c9 2000 	str.w	r2, [r9]
    d7b0:	f300 80e7 	bgt.w	d982 <_vfiprintf_r+0xa8a>
    d7b4:	f109 0908 	add.w	r9, r9, #8
    d7b8:	3101      	adds	r1, #1
    d7ba:	e5ed      	b.n	d398 <_vfiprintf_r+0x4a0>
    d7bc:	f04f 0c01 	mov.w	ip, #1
    d7c0:	4618      	mov	r0, r3
    d7c2:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d7c6:	e7ca      	b.n	d75e <_vfiprintf_r+0x866>
    d7c8:	f04f 0c01 	mov.w	ip, #1
    d7cc:	4618      	mov	r0, r3
    d7ce:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d7d2:	e772      	b.n	d6ba <_vfiprintf_r+0x7c2>
    d7d4:	2b00      	cmp	r3, #0
    d7d6:	f000 8104 	beq.w	d9e2 <_vfiprintf_r+0xaea>
    d7da:	ee18 1a10 	vmov	r1, s16
    d7de:	aa18      	add	r2, sp, #96	; 0x60
    d7e0:	4658      	mov	r0, fp
    d7e2:	f7ff fb4d 	bl	ce80 <__sprint_r.part.0>
    d7e6:	2800      	cmp	r0, #0
    d7e8:	f47f ad5d 	bne.w	d2a6 <_vfiprintf_r+0x3ae>
    d7ec:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    d7f0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d7f4:	1c41      	adds	r1, r0, #1
    d7f6:	e5a7      	b.n	d348 <_vfiprintf_r+0x450>
    d7f8:	2302      	movs	r3, #2
    d7fa:	aa11      	add	r2, sp, #68	; 0x44
    d7fc:	931c      	str	r3, [sp, #112]	; 0x70
    d7fe:	921b      	str	r2, [sp, #108]	; 0x6c
    d800:	2101      	movs	r1, #1
    d802:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d806:	4608      	mov	r0, r1
    d808:	f109 0908 	add.w	r9, r9, #8
    d80c:	1c41      	adds	r1, r0, #1
    d80e:	e5ba      	b.n	d386 <_vfiprintf_r+0x48e>
    d810:	2d10      	cmp	r5, #16
    d812:	f340 82e5 	ble.w	dde0 <_vfiprintf_r+0xee8>
    d816:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
    d81a:	940f      	str	r4, [sp, #60]	; 0x3c
    d81c:	4608      	mov	r0, r1
    d81e:	ee18 4a10 	vmov	r4, s16
    d822:	e007      	b.n	d834 <_vfiprintf_r+0x93c>
    d824:	f100 0c02 	add.w	ip, r0, #2
    d828:	f109 0908 	add.w	r9, r9, #8
    d82c:	4610      	mov	r0, r2
    d82e:	3d10      	subs	r5, #16
    d830:	2d10      	cmp	r5, #16
    d832:	dd1d      	ble.n	d870 <_vfiprintf_r+0x978>
    d834:	4925      	ldr	r1, [pc, #148]	; (d8cc <_vfiprintf_r+0x9d4>)
    d836:	f8c9 1000 	str.w	r1, [r9]
    d83a:	1c42      	adds	r2, r0, #1
    d83c:	3310      	adds	r3, #16
    d83e:	2110      	movs	r1, #16
    d840:	2a07      	cmp	r2, #7
    d842:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    d846:	f8c9 1004 	str.w	r1, [r9, #4]
    d84a:	ddeb      	ble.n	d824 <_vfiprintf_r+0x92c>
    d84c:	aa18      	add	r2, sp, #96	; 0x60
    d84e:	b303      	cbz	r3, d892 <_vfiprintf_r+0x99a>
    d850:	4621      	mov	r1, r4
    d852:	4658      	mov	r0, fp
    d854:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d858:	f7ff fb12 	bl	ce80 <__sprint_r.part.0>
    d85c:	2800      	cmp	r0, #0
    d85e:	f47f ad22 	bne.w	d2a6 <_vfiprintf_r+0x3ae>
    d862:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    d866:	3d10      	subs	r5, #16
    d868:	2d10      	cmp	r5, #16
    d86a:	f100 0c01 	add.w	ip, r0, #1
    d86e:	dce1      	bgt.n	d834 <_vfiprintf_r+0x93c>
    d870:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    d872:	4660      	mov	r0, ip
    d874:	4a15      	ldr	r2, [pc, #84]	; (d8cc <_vfiprintf_r+0x9d4>)
    d876:	f8c9 5004 	str.w	r5, [r9, #4]
    d87a:	442b      	add	r3, r5
    d87c:	2807      	cmp	r0, #7
    d87e:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
    d882:	f8c9 2000 	str.w	r2, [r9]
    d886:	f300 80c1 	bgt.w	da0c <_vfiprintf_r+0xb14>
    d88a:	f109 0908 	add.w	r9, r9, #8
    d88e:	1c41      	adds	r1, r0, #1
    d890:	e546      	b.n	d320 <_vfiprintf_r+0x428>
    d892:	4618      	mov	r0, r3
    d894:	f04f 0c01 	mov.w	ip, #1
    d898:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d89c:	e7c7      	b.n	d82e <_vfiprintf_r+0x936>
    d89e:	0776      	lsls	r6, r6, #29
    d8a0:	9319      	str	r3, [sp, #100]	; 0x64
    d8a2:	d553      	bpl.n	d94c <_vfiprintf_r+0xa54>
    d8a4:	9a06      	ldr	r2, [sp, #24]
    d8a6:	9903      	ldr	r1, [sp, #12]
    d8a8:	1a54      	subs	r4, r2, r1
    d8aa:	2c00      	cmp	r4, #0
    d8ac:	dd4e      	ble.n	d94c <_vfiprintf_r+0xa54>
    d8ae:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d8b2:	2c10      	cmp	r4, #16
    d8b4:	f340 82b0 	ble.w	de18 <_vfiprintf_r+0xf20>
    d8b8:	9919      	ldr	r1, [sp, #100]	; 0x64
    d8ba:	ee18 6a10 	vmov	r6, s16
    d8be:	2510      	movs	r5, #16
    d8c0:	e00d      	b.n	d8de <_vfiprintf_r+0x9e6>
    d8c2:	bf00      	nop
    d8c4:	20000904 	.word	0x20000904
    d8c8:	20007a18 	.word	0x20007a18
    d8cc:	200023c0 	.word	0x200023c0
    d8d0:	1c88      	adds	r0, r1, #2
    d8d2:	f109 0908 	add.w	r9, r9, #8
    d8d6:	4611      	mov	r1, r2
    d8d8:	3c10      	subs	r4, #16
    d8da:	2c10      	cmp	r4, #16
    d8dc:	dd1a      	ble.n	d914 <_vfiprintf_r+0xa1c>
    d8de:	1c4a      	adds	r2, r1, #1
    d8e0:	48b3      	ldr	r0, [pc, #716]	; (dbb0 <_vfiprintf_r+0xcb8>)
    d8e2:	3310      	adds	r3, #16
    d8e4:	2a07      	cmp	r2, #7
    d8e6:	e9c9 0500 	strd	r0, r5, [r9]
    d8ea:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    d8ee:	ddef      	ble.n	d8d0 <_vfiprintf_r+0x9d8>
    d8f0:	aa18      	add	r2, sp, #96	; 0x60
    d8f2:	b333      	cbz	r3, d942 <_vfiprintf_r+0xa4a>
    d8f4:	4631      	mov	r1, r6
    d8f6:	4658      	mov	r0, fp
    d8f8:	f7ff fac2 	bl	ce80 <__sprint_r.part.0>
    d8fc:	2800      	cmp	r0, #0
    d8fe:	f47f acd2 	bne.w	d2a6 <_vfiprintf_r+0x3ae>
    d902:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
    d906:	3c10      	subs	r4, #16
    d908:	2c10      	cmp	r4, #16
    d90a:	f101 0001 	add.w	r0, r1, #1
    d90e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d912:	dce4      	bgt.n	d8de <_vfiprintf_r+0x9e6>
    d914:	4aa6      	ldr	r2, [pc, #664]	; (dbb0 <_vfiprintf_r+0xcb8>)
    d916:	f8c9 4004 	str.w	r4, [r9, #4]
    d91a:	4423      	add	r3, r4
    d91c:	2807      	cmp	r0, #7
    d91e:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
    d922:	f8c9 2000 	str.w	r2, [r9]
    d926:	f77f ad59 	ble.w	d3dc <_vfiprintf_r+0x4e4>
    d92a:	b17b      	cbz	r3, d94c <_vfiprintf_r+0xa54>
    d92c:	ee18 1a10 	vmov	r1, s16
    d930:	aa18      	add	r2, sp, #96	; 0x60
    d932:	4658      	mov	r0, fp
    d934:	f7ff faa4 	bl	ce80 <__sprint_r.part.0>
    d938:	2800      	cmp	r0, #0
    d93a:	f47f acb4 	bne.w	d2a6 <_vfiprintf_r+0x3ae>
    d93e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    d940:	e54c      	b.n	d3dc <_vfiprintf_r+0x4e4>
    d942:	2001      	movs	r0, #1
    d944:	4619      	mov	r1, r3
    d946:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d94a:	e7c5      	b.n	d8d8 <_vfiprintf_r+0x9e0>
    d94c:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
    d950:	9903      	ldr	r1, [sp, #12]
    d952:	428a      	cmp	r2, r1
    d954:	bfac      	ite	ge
    d956:	189b      	addge	r3, r3, r2
    d958:	185b      	addlt	r3, r3, r1
    d95a:	9305      	str	r3, [sp, #20]
    d95c:	e549      	b.n	d3f2 <_vfiprintf_r+0x4fa>
    d95e:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
    d962:	058f      	lsls	r7, r1, #22
    d964:	ee18 3a10 	vmov	r3, s16
    d968:	b28a      	uxth	r2, r1
    d96a:	f53f aae8 	bmi.w	cf3e <_vfiprintf_r+0x46>
    d96e:	ee18 5a10 	vmov	r5, s16
    d972:	6d98      	ldr	r0, [r3, #88]	; 0x58
    d974:	f7f8 fcde 	bl	6334 <__retarget_lock_acquire_recursive>
    d978:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
    d97c:	b28a      	uxth	r2, r1
    d97e:	f7ff bade 	b.w	cf3e <_vfiprintf_r+0x46>
    d982:	2b00      	cmp	r3, #0
    d984:	f43f ae79 	beq.w	d67a <_vfiprintf_r+0x782>
    d988:	ee18 1a10 	vmov	r1, s16
    d98c:	aa18      	add	r2, sp, #96	; 0x60
    d98e:	4658      	mov	r0, fp
    d990:	f7ff fa76 	bl	ce80 <__sprint_r.part.0>
    d994:	2800      	cmp	r0, #0
    d996:	f47f ac86 	bne.w	d2a6 <_vfiprintf_r+0x3ae>
    d99a:	9919      	ldr	r1, [sp, #100]	; 0x64
    d99c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    d99e:	3101      	adds	r1, #1
    d9a0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d9a4:	e4f8      	b.n	d398 <_vfiprintf_r+0x4a0>
    d9a6:	9219      	str	r2, [sp, #100]	; 0x64
    d9a8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d9ac:	e45e      	b.n	d26c <_vfiprintf_r+0x374>
    d9ae:	2f00      	cmp	r7, #0
    d9b0:	f47f abc3 	bne.w	d13a <_vfiprintf_r+0x242>
    d9b4:	9e03      	ldr	r6, [sp, #12]
    d9b6:	2700      	movs	r7, #0
    d9b8:	9704      	str	r7, [sp, #16]
    d9ba:	ac44      	add	r4, sp, #272	; 0x110
    d9bc:	f7ff bbc5 	b.w	d14a <_vfiprintf_r+0x252>
    d9c0:	9b03      	ldr	r3, [sp, #12]
    d9c2:	f013 0310 	ands.w	r3, r3, #16
    d9c6:	d154      	bne.n	da72 <_vfiprintf_r+0xb7a>
    d9c8:	9a03      	ldr	r2, [sp, #12]
    d9ca:	f012 0040 	ands.w	r0, r2, #64	; 0x40
    d9ce:	f000 816b 	beq.w	dca8 <_vfiprintf_r+0xdb0>
    d9d2:	9907      	ldr	r1, [sp, #28]
    d9d4:	461a      	mov	r2, r3
    d9d6:	f851 3b04 	ldr.w	r3, [r1], #4
    d9da:	9107      	str	r1, [sp, #28]
    d9dc:	b29b      	uxth	r3, r3
    d9de:	2101      	movs	r1, #1
    d9e0:	e401      	b.n	d1e6 <_vfiprintf_r+0x2ee>
    d9e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    d9e4:	2a00      	cmp	r2, #0
    d9e6:	d164      	bne.n	dab2 <_vfiprintf_r+0xbba>
    d9e8:	4618      	mov	r0, r3
    d9ea:	2101      	movs	r1, #1
    d9ec:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d9f0:	e4c9      	b.n	d386 <_vfiprintf_r+0x48e>
    d9f2:	2101      	movs	r1, #1
    d9f4:	4618      	mov	r0, r3
    d9f6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d9fa:	e4c4      	b.n	d386 <_vfiprintf_r+0x48e>
    d9fc:	425b      	negs	r3, r3
    d9fe:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
    da02:	9603      	str	r6, [sp, #12]
    da04:	202d      	movs	r0, #45	; 0x2d
    da06:	2101      	movs	r1, #1
    da08:	f7ff bbee 	b.w	d1e8 <_vfiprintf_r+0x2f0>
    da0c:	2b00      	cmp	r3, #0
    da0e:	f000 8088 	beq.w	db22 <_vfiprintf_r+0xc2a>
    da12:	ee18 1a10 	vmov	r1, s16
    da16:	aa18      	add	r2, sp, #96	; 0x60
    da18:	4658      	mov	r0, fp
    da1a:	f7ff fa31 	bl	ce80 <__sprint_r.part.0>
    da1e:	2800      	cmp	r0, #0
    da20:	f47f ac41 	bne.w	d2a6 <_vfiprintf_r+0x3ae>
    da24:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    da28:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    da2c:	1c41      	adds	r1, r0, #1
    da2e:	e477      	b.n	d320 <_vfiprintf_r+0x428>
    da30:	f898 1000 	ldrb.w	r1, [r8]
    da34:	9307      	str	r3, [sp, #28]
    da36:	f7ff bad2 	b.w	cfde <_vfiprintf_r+0xe6>
    da3a:	ac44      	add	r4, sp, #272	; 0x110
    da3c:	f7ff bb85 	b.w	d14a <_vfiprintf_r+0x252>
    da40:	f109 0908 	add.w	r9, r9, #8
    da44:	f10c 0101 	add.w	r1, ip, #1
    da48:	4660      	mov	r0, ip
    da4a:	e4a0      	b.n	d38e <_vfiprintf_r+0x496>
    da4c:	f416 7200 	ands.w	r2, r6, #512	; 0x200
    da50:	f040 8197 	bne.w	dd82 <_vfiprintf_r+0xe8a>
    da54:	f851 3b04 	ldr.w	r3, [r1], #4
    da58:	9107      	str	r1, [sp, #28]
    da5a:	f7ff bbc0 	b.w	d1de <_vfiprintf_r+0x2e6>
    da5e:	05b3      	lsls	r3, r6, #22
    da60:	f100 8188 	bmi.w	dd74 <_vfiprintf_r+0xe7c>
    da64:	f852 3b04 	ldr.w	r3, [r2], #4
    da68:	9207      	str	r2, [sp, #28]
    da6a:	17da      	asrs	r2, r3, #31
    da6c:	4611      	mov	r1, r2
    da6e:	f7ff bb52 	b.w	d116 <_vfiprintf_r+0x21e>
    da72:	9907      	ldr	r1, [sp, #28]
    da74:	f851 3b04 	ldr.w	r3, [r1], #4
    da78:	9107      	str	r1, [sp, #28]
    da7a:	2101      	movs	r1, #1
    da7c:	f7ff bbb3 	b.w	d1e6 <_vfiprintf_r+0x2ee>
    da80:	9b07      	ldr	r3, [sp, #28]
    da82:	9805      	ldr	r0, [sp, #20]
    da84:	f853 1b04 	ldr.w	r1, [r3], #4
    da88:	9307      	str	r3, [sp, #28]
    da8a:	17c2      	asrs	r2, r0, #31
    da8c:	e9c1 0200 	strd	r0, r2, [r1]
    da90:	f7ff ba7d 	b.w	cf8e <_vfiprintf_r+0x96>
    da94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    da96:	2b00      	cmp	r3, #0
    da98:	f43f ab26 	beq.w	d0e8 <_vfiprintf_r+0x1f0>
    da9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    da9e:	781b      	ldrb	r3, [r3, #0]
    daa0:	2b00      	cmp	r3, #0
    daa2:	f43f ab21 	beq.w	d0e8 <_vfiprintf_r+0x1f0>
    daa6:	f898 1000 	ldrb.w	r1, [r8]
    daaa:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
    daae:	f7ff ba96 	b.w	cfde <_vfiprintf_r+0xe6>
    dab2:	2302      	movs	r3, #2
    dab4:	aa11      	add	r2, sp, #68	; 0x44
    dab6:	931c      	str	r3, [sp, #112]	; 0x70
    dab8:	921b      	str	r2, [sp, #108]	; 0x6c
    daba:	2001      	movs	r0, #1
    dabc:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    dac0:	e6a2      	b.n	d808 <_vfiprintf_r+0x910>
    dac2:	9603      	str	r6, [sp, #12]
    dac4:	e571      	b.n	d5aa <_vfiprintf_r+0x6b2>
    dac6:	4b3b      	ldr	r3, [pc, #236]	; (dbb4 <_vfiprintf_r+0xcbc>)
    dac8:	930c      	str	r3, [sp, #48]	; 0x30
    daca:	f016 0220 	ands.w	r2, r6, #32
    dace:	d059      	beq.n	db84 <_vfiprintf_r+0xc8c>
    dad0:	9b07      	ldr	r3, [sp, #28]
    dad2:	3307      	adds	r3, #7
    dad4:	f023 0307 	bic.w	r3, r3, #7
    dad8:	4618      	mov	r0, r3
    dada:	685a      	ldr	r2, [r3, #4]
    dadc:	f850 3b08 	ldr.w	r3, [r0], #8
    dae0:	9007      	str	r0, [sp, #28]
    dae2:	07f4      	lsls	r4, r6, #31
    dae4:	d509      	bpl.n	dafa <_vfiprintf_r+0xc02>
    dae6:	ea53 0002 	orrs.w	r0, r3, r2
    daea:	d006      	beq.n	dafa <_vfiprintf_r+0xc02>
    daec:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
    daf0:	2130      	movs	r1, #48	; 0x30
    daf2:	f046 0602 	orr.w	r6, r6, #2
    daf6:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
    dafa:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
    dafe:	9103      	str	r1, [sp, #12]
    db00:	2102      	movs	r1, #2
    db02:	f7ff bb70 	b.w	d1e6 <_vfiprintf_r+0x2ee>
    db06:	4b2c      	ldr	r3, [pc, #176]	; (dbb8 <_vfiprintf_r+0xcc0>)
    db08:	930c      	str	r3, [sp, #48]	; 0x30
    db0a:	e7de      	b.n	daca <_vfiprintf_r+0xbd2>
    db0c:	9b07      	ldr	r3, [sp, #28]
    db0e:	2101      	movs	r1, #1
    db10:	f853 2b04 	ldr.w	r2, [r3], #4
    db14:	9103      	str	r1, [sp, #12]
    db16:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
    db1a:	9307      	str	r3, [sp, #28]
    db1c:	9104      	str	r1, [sp, #16]
    db1e:	ac2b      	add	r4, sp, #172	; 0xac
    db20:	e4df      	b.n	d4e2 <_vfiprintf_r+0x5ea>
    db22:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
    db26:	2a00      	cmp	r2, #0
    db28:	f040 8132 	bne.w	dd90 <_vfiprintf_r+0xe98>
    db2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    db2e:	2a00      	cmp	r2, #0
    db30:	f47f ae62 	bne.w	d7f8 <_vfiprintf_r+0x900>
    db34:	4618      	mov	r0, r3
    db36:	2101      	movs	r1, #1
    db38:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    db3c:	e427      	b.n	d38e <_vfiprintf_r+0x496>
    db3e:	2100      	movs	r1, #0
    db40:	2208      	movs	r2, #8
    db42:	a816      	add	r0, sp, #88	; 0x58
    db44:	9413      	str	r4, [sp, #76]	; 0x4c
    db46:	f7f8 fa2b 	bl	5fa0 <memset>
    db4a:	1c79      	adds	r1, r7, #1
    db4c:	f000 80bc 	beq.w	dcc8 <_vfiprintf_r+0xdd0>
    db50:	2500      	movs	r5, #0
    db52:	9407      	str	r4, [sp, #28]
    db54:	462c      	mov	r4, r5
    db56:	e00c      	b.n	db72 <_vfiprintf_r+0xc7a>
    db58:	a92b      	add	r1, sp, #172	; 0xac
    db5a:	4658      	mov	r0, fp
    db5c:	f7fe ff2e 	bl	c9bc <_wcrtomb_r>
    db60:	1c42      	adds	r2, r0, #1
    db62:	4420      	add	r0, r4
    db64:	f000 816b 	beq.w	de3e <_vfiprintf_r+0xf46>
    db68:	42b8      	cmp	r0, r7
    db6a:	dc08      	bgt.n	db7e <_vfiprintf_r+0xc86>
    db6c:	f000 8170 	beq.w	de50 <_vfiprintf_r+0xf58>
    db70:	4604      	mov	r4, r0
    db72:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    db74:	5952      	ldr	r2, [r2, r5]
    db76:	ab16      	add	r3, sp, #88	; 0x58
    db78:	3504      	adds	r5, #4
    db7a:	2a00      	cmp	r2, #0
    db7c:	d1ec      	bne.n	db58 <_vfiprintf_r+0xc60>
    db7e:	9404      	str	r4, [sp, #16]
    db80:	9c07      	ldr	r4, [sp, #28]
    db82:	e0af      	b.n	dce4 <_vfiprintf_r+0xdec>
    db84:	f016 0310 	ands.w	r3, r6, #16
    db88:	9807      	ldr	r0, [sp, #28]
    db8a:	d10c      	bne.n	dba6 <_vfiprintf_r+0xcae>
    db8c:	f016 0440 	ands.w	r4, r6, #64	; 0x40
    db90:	d005      	beq.n	db9e <_vfiprintf_r+0xca6>
    db92:	461a      	mov	r2, r3
    db94:	f850 3b04 	ldr.w	r3, [r0], #4
    db98:	9007      	str	r0, [sp, #28]
    db9a:	b29b      	uxth	r3, r3
    db9c:	e7a1      	b.n	dae2 <_vfiprintf_r+0xbea>
    db9e:	f416 7200 	ands.w	r2, r6, #512	; 0x200
    dba2:	f040 80e1 	bne.w	dd68 <_vfiprintf_r+0xe70>
    dba6:	f850 3b04 	ldr.w	r3, [r0], #4
    dbaa:	9007      	str	r0, [sp, #28]
    dbac:	e799      	b.n	dae2 <_vfiprintf_r+0xbea>
    dbae:	bf00      	nop
    dbb0:	200023c0 	.word	0x200023c0
    dbb4:	20000904 	.word	0x20000904
    dbb8:	20000918 	.word	0x20000918
    dbbc:	9903      	ldr	r1, [sp, #12]
    dbbe:	9704      	str	r7, [sp, #16]
    dbc0:	ac44      	add	r4, sp, #272	; 0x110
    dbc2:	469e      	mov	lr, r3
    dbc4:	ee08 ba90 	vmov	s17, fp
    dbc8:	f401 6680 	and.w	r6, r1, #1024	; 0x400
    dbcc:	f04f 0c00 	mov.w	ip, #0
    dbd0:	4623      	mov	r3, r4
    dbd2:	e006      	b.n	dbe2 <_vfiprintf_r+0xcea>
    dbd4:	f1be 0f0a 	cmp.w	lr, #10
    dbd8:	f172 0200 	sbcs.w	r2, r2, #0
    dbdc:	d339      	bcc.n	dc52 <_vfiprintf_r+0xd5a>
    dbde:	46a6      	mov	lr, r4
    dbe0:	462a      	mov	r2, r5
    dbe2:	49a6      	ldr	r1, [pc, #664]	; (de7c <_vfiprintf_r+0xf84>)
    dbe4:	eb1e 0002 	adds.w	r0, lr, r2
    dbe8:	f140 0000 	adc.w	r0, r0, #0
    dbec:	460f      	mov	r7, r1
    dbee:	fba1 1400 	umull	r1, r4, r1, r0
    dbf2:	f024 0103 	bic.w	r1, r4, #3
    dbf6:	eb01 0194 	add.w	r1, r1, r4, lsr #2
    dbfa:	1a40      	subs	r0, r0, r1
    dbfc:	ebbe 0100 	subs.w	r1, lr, r0
    dc00:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
    dc04:	f162 0400 	sbc.w	r4, r2, #0
    dc08:	fb05 f501 	mul.w	r5, r5, r1
    dc0c:	fb07 5504 	mla	r5, r7, r4, r5
    dc10:	fba1 4107 	umull	r4, r1, r1, r7
    dc14:	440d      	add	r5, r1
    dc16:	2705      	movs	r7, #5
    dc18:	f004 0101 	and.w	r1, r4, #1
    dc1c:	fba1 1b07 	umull	r1, fp, r1, r7
    dc20:	1809      	adds	r1, r1, r0
    dc22:	0864      	lsrs	r4, r4, #1
    dc24:	3130      	adds	r1, #48	; 0x30
    dc26:	f803 1c01 	strb.w	r1, [r3, #-1]
    dc2a:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
    dc2e:	f10c 0c01 	add.w	ip, ip, #1
    dc32:	3b01      	subs	r3, #1
    dc34:	086d      	lsrs	r5, r5, #1
    dc36:	2e00      	cmp	r6, #0
    dc38:	d0cc      	beq.n	dbd4 <_vfiprintf_r+0xcdc>
    dc3a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    dc3c:	7809      	ldrb	r1, [r1, #0]
    dc3e:	4561      	cmp	r1, ip
    dc40:	d1c8      	bne.n	dbd4 <_vfiprintf_r+0xcdc>
    dc42:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    dc46:	d0c5      	beq.n	dbd4 <_vfiprintf_r+0xcdc>
    dc48:	f1be 0f0a 	cmp.w	lr, #10
    dc4c:	f172 0200 	sbcs.w	r2, r2, #0
    dc50:	d26c      	bcs.n	dd2c <_vfiprintf_r+0xe34>
    dc52:	461c      	mov	r4, r3
    dc54:	ab44      	add	r3, sp, #272	; 0x110
    dc56:	1b1b      	subs	r3, r3, r4
    dc58:	9f04      	ldr	r7, [sp, #16]
    dc5a:	9e03      	ldr	r6, [sp, #12]
    dc5c:	9304      	str	r3, [sp, #16]
    dc5e:	ee18 ba90 	vmov	fp, s17
    dc62:	f7ff ba72 	b.w	d14a <_vfiprintf_r+0x252>
    dc66:	9603      	str	r6, [sp, #12]
    dc68:	f7ff ba62 	b.w	d130 <_vfiprintf_r+0x238>
    dc6c:	4658      	mov	r0, fp
    dc6e:	f7f7 ffbb 	bl	5be8 <__sinit>
    dc72:	f7ff b95b 	b.w	cf2c <_vfiprintf_r+0x34>
    dc76:	2901      	cmp	r1, #1
    dc78:	9603      	str	r6, [sp, #12]
    dc7a:	f47f accd 	bne.w	d618 <_vfiprintf_r+0x720>
    dc7e:	f7ff ba5c 	b.w	d13a <_vfiprintf_r+0x242>
    dc82:	9b07      	ldr	r3, [sp, #28]
    dc84:	9905      	ldr	r1, [sp, #20]
    dc86:	f853 2b04 	ldr.w	r2, [r3], #4
    dc8a:	6011      	str	r1, [r2, #0]
    dc8c:	9307      	str	r3, [sp, #28]
    dc8e:	f7ff b97e 	b.w	cf8e <_vfiprintf_r+0x96>
    dc92:	2f06      	cmp	r7, #6
    dc94:	463b      	mov	r3, r7
    dc96:	9a03      	ldr	r2, [sp, #12]
    dc98:	4c79      	ldr	r4, [pc, #484]	; (de80 <_vfiprintf_r+0xf88>)
    dc9a:	9207      	str	r2, [sp, #28]
    dc9c:	bf28      	it	cs
    dc9e:	2306      	movcs	r3, #6
    dca0:	9304      	str	r3, [sp, #16]
    dca2:	9303      	str	r3, [sp, #12]
    dca4:	f7ff bb25 	b.w	d2f2 <_vfiprintf_r+0x3fa>
    dca8:	9b03      	ldr	r3, [sp, #12]
    dcaa:	9907      	ldr	r1, [sp, #28]
    dcac:	f413 7200 	ands.w	r2, r3, #512	; 0x200
    dcb0:	bf14      	ite	ne
    dcb2:	f851 3b04 	ldrne.w	r3, [r1], #4
    dcb6:	f851 3b04 	ldreq.w	r3, [r1], #4
    dcba:	9107      	str	r1, [sp, #28]
    dcbc:	bf1c      	itt	ne
    dcbe:	4602      	movne	r2, r0
    dcc0:	b2db      	uxtbne	r3, r3
    dcc2:	2101      	movs	r1, #1
    dcc4:	f7ff ba8f 	b.w	d1e6 <_vfiprintf_r+0x2ee>
    dcc8:	ab16      	add	r3, sp, #88	; 0x58
    dcca:	9300      	str	r3, [sp, #0]
    dccc:	2300      	movs	r3, #0
    dcce:	4619      	mov	r1, r3
    dcd0:	aa13      	add	r2, sp, #76	; 0x4c
    dcd2:	4658      	mov	r0, fp
    dcd4:	f7fe fe98 	bl	ca08 <_wcsrtombs_r>
    dcd8:	4603      	mov	r3, r0
    dcda:	3301      	adds	r3, #1
    dcdc:	9004      	str	r0, [sp, #16]
    dcde:	f000 80ae 	beq.w	de3e <_vfiprintf_r+0xf46>
    dce2:	9413      	str	r4, [sp, #76]	; 0x4c
    dce4:	9b04      	ldr	r3, [sp, #16]
    dce6:	2b00      	cmp	r3, #0
    dce8:	d030      	beq.n	dd4c <_vfiprintf_r+0xe54>
    dcea:	2b63      	cmp	r3, #99	; 0x63
    dcec:	dc63      	bgt.n	ddb6 <_vfiprintf_r+0xebe>
    dcee:	2300      	movs	r3, #0
    dcf0:	9308      	str	r3, [sp, #32]
    dcf2:	ac2b      	add	r4, sp, #172	; 0xac
    dcf4:	2208      	movs	r2, #8
    dcf6:	2100      	movs	r1, #0
    dcf8:	a816      	add	r0, sp, #88	; 0x58
    dcfa:	f7f8 f951 	bl	5fa0 <memset>
    dcfe:	9d04      	ldr	r5, [sp, #16]
    dd00:	ab16      	add	r3, sp, #88	; 0x58
    dd02:	9300      	str	r3, [sp, #0]
    dd04:	aa13      	add	r2, sp, #76	; 0x4c
    dd06:	462b      	mov	r3, r5
    dd08:	4621      	mov	r1, r4
    dd0a:	4658      	mov	r0, fp
    dd0c:	f7fe fe7c 	bl	ca08 <_wcsrtombs_r>
    dd10:	4285      	cmp	r5, r0
    dd12:	f040 80ab 	bne.w	de6c <_vfiprintf_r+0xf74>
    dd16:	9b03      	ldr	r3, [sp, #12]
    dd18:	9a04      	ldr	r2, [sp, #16]
    dd1a:	9307      	str	r3, [sp, #28]
    dd1c:	2300      	movs	r3, #0
    dd1e:	54a3      	strb	r3, [r4, r2]
    dd20:	461f      	mov	r7, r3
    dd22:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    dd26:	9303      	str	r3, [sp, #12]
    dd28:	f7ff ba16 	b.w	d158 <_vfiprintf_r+0x260>
    dd2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    dd2e:	990d      	ldr	r1, [sp, #52]	; 0x34
    dd30:	1a9b      	subs	r3, r3, r2
    dd32:	4618      	mov	r0, r3
    dd34:	9308      	str	r3, [sp, #32]
    dd36:	f7f8 fa31 	bl	619c <strncpy>
    dd3a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    dd3c:	9b08      	ldr	r3, [sp, #32]
    dd3e:	784a      	ldrb	r2, [r1, #1]
    dd40:	b10a      	cbz	r2, dd46 <_vfiprintf_r+0xe4e>
    dd42:	3101      	adds	r1, #1
    dd44:	910b      	str	r1, [sp, #44]	; 0x2c
    dd46:	f04f 0c00 	mov.w	ip, #0
    dd4a:	e748      	b.n	dbde <_vfiprintf_r+0xce6>
    dd4c:	9b03      	ldr	r3, [sp, #12]
    dd4e:	9307      	str	r3, [sp, #28]
    dd50:	9b04      	ldr	r3, [sp, #16]
    dd52:	9303      	str	r3, [sp, #12]
    dd54:	461f      	mov	r7, r3
    dd56:	9308      	str	r3, [sp, #32]
    dd58:	f7ff b9fe 	b.w	d158 <_vfiprintf_r+0x260>
    dd5c:	2101      	movs	r1, #1
    dd5e:	4618      	mov	r0, r3
    dd60:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    dd64:	f7ff bb13 	b.w	d38e <_vfiprintf_r+0x496>
    dd68:	f850 3b04 	ldr.w	r3, [r0], #4
    dd6c:	9007      	str	r0, [sp, #28]
    dd6e:	4622      	mov	r2, r4
    dd70:	b2db      	uxtb	r3, r3
    dd72:	e6b6      	b.n	dae2 <_vfiprintf_r+0xbea>
    dd74:	f912 3b04 	ldrsb.w	r3, [r2], #4
    dd78:	9207      	str	r2, [sp, #28]
    dd7a:	17da      	asrs	r2, r3, #31
    dd7c:	4611      	mov	r1, r2
    dd7e:	f7ff b9ca 	b.w	d116 <_vfiprintf_r+0x21e>
    dd82:	f851 3b04 	ldr.w	r3, [r1], #4
    dd86:	9107      	str	r1, [sp, #28]
    dd88:	4602      	mov	r2, r0
    dd8a:	b2db      	uxtb	r3, r3
    dd8c:	f7ff ba27 	b.w	d1de <_vfiprintf_r+0x2e6>
    dd90:	2301      	movs	r3, #1
    dd92:	931c      	str	r3, [sp, #112]	; 0x70
    dd94:	2101      	movs	r1, #1
    dd96:	f10d 0343 	add.w	r3, sp, #67	; 0x43
    dd9a:	931b      	str	r3, [sp, #108]	; 0x6c
    dd9c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    dda0:	460b      	mov	r3, r1
    dda2:	f7ff bacd 	b.w	d340 <_vfiprintf_r+0x448>
    dda6:	9b07      	ldr	r3, [sp, #28]
    dda8:	9905      	ldr	r1, [sp, #20]
    ddaa:	f853 2b04 	ldr.w	r2, [r3], #4
    ddae:	9307      	str	r3, [sp, #28]
    ddb0:	8011      	strh	r1, [r2, #0]
    ddb2:	f7ff b8ec 	b.w	cf8e <_vfiprintf_r+0x96>
    ddb6:	1c59      	adds	r1, r3, #1
    ddb8:	4658      	mov	r0, fp
    ddba:	f7f6 f9d1 	bl	4160 <_malloc_r>
    ddbe:	4604      	mov	r4, r0
    ddc0:	2800      	cmp	r0, #0
    ddc2:	d03c      	beq.n	de3e <_vfiprintf_r+0xf46>
    ddc4:	9008      	str	r0, [sp, #32]
    ddc6:	e795      	b.n	dcf4 <_vfiprintf_r+0xdfc>
    ddc8:	6d88      	ldr	r0, [r1, #88]	; 0x58
    ddca:	f7f8 fab5 	bl	6338 <__retarget_lock_release_recursive>
    ddce:	f7ff b9e9 	b.w	d1a4 <_vfiprintf_r+0x2ac>
    ddd2:	9b03      	ldr	r3, [sp, #12]
    ddd4:	9307      	str	r3, [sp, #28]
    ddd6:	e9cd 7703 	strd	r7, r7, [sp, #12]
    ddda:	9f08      	ldr	r7, [sp, #32]
    dddc:	f7ff b9bc 	b.w	d158 <_vfiprintf_r+0x260>
    dde0:	9819      	ldr	r0, [sp, #100]	; 0x64
    dde2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    dde4:	3001      	adds	r0, #1
    dde6:	e545      	b.n	d874 <_vfiprintf_r+0x97c>
    dde8:	9b03      	ldr	r3, [sp, #12]
    ddea:	9307      	str	r3, [sp, #28]
    ddec:	4620      	mov	r0, r4
    ddee:	f7f8 fc87 	bl	6700 <strlen>
    ddf2:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
    ddf6:	462f      	mov	r7, r5
    ddf8:	9004      	str	r0, [sp, #16]
    ddfa:	9303      	str	r3, [sp, #12]
    ddfc:	9508      	str	r5, [sp, #32]
    ddfe:	f7ff b9ab 	b.w	d158 <_vfiprintf_r+0x260>
    de02:	ee18 1a10 	vmov	r1, s16
    de06:	aa18      	add	r2, sp, #96	; 0x60
    de08:	4658      	mov	r0, fp
    de0a:	f7ff f839 	bl	ce80 <__sprint_r.part.0>
    de0e:	2800      	cmp	r0, #0
    de10:	f43f aa36 	beq.w	d280 <_vfiprintf_r+0x388>
    de14:	f7ff ba4d 	b.w	d2b2 <_vfiprintf_r+0x3ba>
    de18:	9819      	ldr	r0, [sp, #100]	; 0x64
    de1a:	3001      	adds	r0, #1
    de1c:	e57a      	b.n	d914 <_vfiprintf_r+0xa1c>
    de1e:	468c      	mov	ip, r1
    de20:	e46e      	b.n	d700 <_vfiprintf_r+0x808>
    de22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    de24:	07d9      	lsls	r1, r3, #31
    de26:	d405      	bmi.n	de34 <_vfiprintf_r+0xf3c>
    de28:	89ab      	ldrh	r3, [r5, #12]
    de2a:	059a      	lsls	r2, r3, #22
    de2c:	d402      	bmi.n	de34 <_vfiprintf_r+0xf3c>
    de2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
    de30:	f7f8 fa82 	bl	6338 <__retarget_lock_release_recursive>
    de34:	f04f 33ff 	mov.w	r3, #4294967295
    de38:	9305      	str	r3, [sp, #20]
    de3a:	f7ff ba49 	b.w	d2d0 <_vfiprintf_r+0x3d8>
    de3e:	ee18 2a10 	vmov	r2, s16
    de42:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    de46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    de4a:	8193      	strh	r3, [r2, #12]
    de4c:	f7ff ba35 	b.w	d2ba <_vfiprintf_r+0x3c2>
    de50:	9c07      	ldr	r4, [sp, #28]
    de52:	9704      	str	r7, [sp, #16]
    de54:	e746      	b.n	dce4 <_vfiprintf_r+0xdec>
    de56:	9b07      	ldr	r3, [sp, #28]
    de58:	f898 1001 	ldrb.w	r1, [r8, #1]
    de5c:	f853 7b04 	ldr.w	r7, [r3], #4
    de60:	9307      	str	r3, [sp, #28]
    de62:	4690      	mov	r8, r2
    de64:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
    de68:	f7ff b8b9 	b.w	cfde <_vfiprintf_r+0xe6>
    de6c:	ee18 2a10 	vmov	r2, s16
    de70:	8993      	ldrh	r3, [r2, #12]
    de72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    de76:	8193      	strh	r3, [r2, #12]
    de78:	f7ff ba15 	b.w	d2a6 <_vfiprintf_r+0x3ae>
    de7c:	cccccccd 	.word	0xcccccccd
    de80:	2000092c 	.word	0x2000092c

0000de84 <__sbprintf>:
    de84:	b570      	push	{r4, r5, r6, lr}
    de86:	460c      	mov	r4, r1
    de88:	8989      	ldrh	r1, [r1, #12]
    de8a:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
    de8e:	f021 0102 	bic.w	r1, r1, #2
    de92:	f8ad 1014 	strh.w	r1, [sp, #20]
    de96:	6e61      	ldr	r1, [r4, #100]	; 0x64
    de98:	911b      	str	r1, [sp, #108]	; 0x6c
    de9a:	89e1      	ldrh	r1, [r4, #14]
    de9c:	f8ad 1016 	strh.w	r1, [sp, #22]
    dea0:	69e1      	ldr	r1, [r4, #28]
    dea2:	9109      	str	r1, [sp, #36]	; 0x24
    dea4:	6a61      	ldr	r1, [r4, #36]	; 0x24
    dea6:	910b      	str	r1, [sp, #44]	; 0x2c
    dea8:	a91c      	add	r1, sp, #112	; 0x70
    deaa:	9102      	str	r1, [sp, #8]
    deac:	9106      	str	r1, [sp, #24]
    deae:	f44f 6180 	mov.w	r1, #1024	; 0x400
    deb2:	4606      	mov	r6, r0
    deb4:	9104      	str	r1, [sp, #16]
    deb6:	9107      	str	r1, [sp, #28]
    deb8:	a818      	add	r0, sp, #96	; 0x60
    deba:	2100      	movs	r1, #0
    debc:	e9cd 3200 	strd	r3, r2, [sp]
    dec0:	9108      	str	r1, [sp, #32]
    dec2:	f7f8 fa33 	bl	632c <__retarget_lock_init_recursive>
    dec6:	e9dd 3200 	ldrd	r3, r2, [sp]
    deca:	a902      	add	r1, sp, #8
    decc:	4630      	mov	r0, r6
    dece:	f7ff f813 	bl	cef8 <_vfiprintf_r>
    ded2:	1e05      	subs	r5, r0, #0
    ded4:	db07      	blt.n	dee6 <__sbprintf+0x62>
    ded6:	a902      	add	r1, sp, #8
    ded8:	4630      	mov	r0, r6
    deda:	f7fd fa5f 	bl	b39c <_fflush_r>
    dede:	2800      	cmp	r0, #0
    dee0:	bf18      	it	ne
    dee2:	f04f 35ff 	movne.w	r5, #4294967295
    dee6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    deea:	065b      	lsls	r3, r3, #25
    deec:	d503      	bpl.n	def6 <__sbprintf+0x72>
    deee:	89a3      	ldrh	r3, [r4, #12]
    def0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    def4:	81a3      	strh	r3, [r4, #12]
    def6:	9818      	ldr	r0, [sp, #96]	; 0x60
    def8:	f7f8 fa1a 	bl	6330 <__retarget_lock_close_recursive>
    defc:	4628      	mov	r0, r5
    defe:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
    df02:	bd70      	pop	{r4, r5, r6, pc}

0000df04 <__sfvwrite_r>:
    df04:	6893      	ldr	r3, [r2, #8]
    df06:	2b00      	cmp	r3, #0
    df08:	f000 8085 	beq.w	e016 <__sfvwrite_r+0x112>
    df0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    df10:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
    df14:	460c      	mov	r4, r1
    df16:	0719      	lsls	r1, r3, #28
    df18:	4680      	mov	r8, r0
    df1a:	b083      	sub	sp, #12
    df1c:	4617      	mov	r7, r2
    df1e:	b298      	uxth	r0, r3
    df20:	d525      	bpl.n	df6e <__sfvwrite_r+0x6a>
    df22:	6923      	ldr	r3, [r4, #16]
    df24:	b31b      	cbz	r3, df6e <__sfvwrite_r+0x6a>
    df26:	f010 0302 	ands.w	r3, r0, #2
    df2a:	683d      	ldr	r5, [r7, #0]
    df2c:	d02d      	beq.n	df8a <__sfvwrite_r+0x86>
    df2e:	f04f 0a00 	mov.w	sl, #0
    df32:	f8df b2c0 	ldr.w	fp, [pc, #704]	; e1f4 <__sfvwrite_r+0x2f0>
    df36:	4656      	mov	r6, sl
    df38:	46b9      	mov	r9, r7
    df3a:	455e      	cmp	r6, fp
    df3c:	4633      	mov	r3, r6
    df3e:	4652      	mov	r2, sl
    df40:	bf28      	it	cs
    df42:	465b      	movcs	r3, fp
    df44:	4640      	mov	r0, r8
    df46:	2e00      	cmp	r6, #0
    df48:	d052      	beq.n	dff0 <__sfvwrite_r+0xec>
    df4a:	69e1      	ldr	r1, [r4, #28]
    df4c:	6a67      	ldr	r7, [r4, #36]	; 0x24
    df4e:	47b8      	blx	r7
    df50:	2800      	cmp	r0, #0
    df52:	dd56      	ble.n	e002 <__sfvwrite_r+0xfe>
    df54:	f8d9 3008 	ldr.w	r3, [r9, #8]
    df58:	1a1b      	subs	r3, r3, r0
    df5a:	4482      	add	sl, r0
    df5c:	1a36      	subs	r6, r6, r0
    df5e:	f8c9 3008 	str.w	r3, [r9, #8]
    df62:	2b00      	cmp	r3, #0
    df64:	d1e9      	bne.n	df3a <__sfvwrite_r+0x36>
    df66:	2000      	movs	r0, #0
    df68:	b003      	add	sp, #12
    df6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    df6e:	4621      	mov	r1, r4
    df70:	4640      	mov	r0, r8
    df72:	f000 f97d 	bl	e270 <__swsetup_r>
    df76:	2800      	cmp	r0, #0
    df78:	f040 8138 	bne.w	e1ec <__sfvwrite_r+0x2e8>
    df7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    df80:	683d      	ldr	r5, [r7, #0]
    df82:	b298      	uxth	r0, r3
    df84:	f010 0302 	ands.w	r3, r0, #2
    df88:	d1d1      	bne.n	df2e <__sfvwrite_r+0x2a>
    df8a:	f010 0901 	ands.w	r9, r0, #1
    df8e:	d144      	bne.n	e01a <__sfvwrite_r+0x116>
    df90:	464e      	mov	r6, r9
    df92:	9700      	str	r7, [sp, #0]
    df94:	b346      	cbz	r6, dfe8 <__sfvwrite_r+0xe4>
    df96:	0582      	lsls	r2, r0, #22
    df98:	f8d4 b008 	ldr.w	fp, [r4, #8]
    df9c:	f140 8085 	bpl.w	e0aa <__sfvwrite_r+0x1a6>
    dfa0:	45b3      	cmp	fp, r6
    dfa2:	465a      	mov	r2, fp
    dfa4:	f200 80b4 	bhi.w	e110 <__sfvwrite_r+0x20c>
    dfa8:	f410 6f90 	tst.w	r0, #1152	; 0x480
    dfac:	f040 80c1 	bne.w	e132 <__sfvwrite_r+0x22e>
    dfb0:	6820      	ldr	r0, [r4, #0]
    dfb2:	9201      	str	r2, [sp, #4]
    dfb4:	4649      	mov	r1, r9
    dfb6:	f7f7 ff77 	bl	5ea8 <memmove>
    dfba:	68a3      	ldr	r3, [r4, #8]
    dfbc:	9a01      	ldr	r2, [sp, #4]
    dfbe:	eba3 010b 	sub.w	r1, r3, fp
    dfc2:	6823      	ldr	r3, [r4, #0]
    dfc4:	60a1      	str	r1, [r4, #8]
    dfc6:	4413      	add	r3, r2
    dfc8:	46b2      	mov	sl, r6
    dfca:	6023      	str	r3, [r4, #0]
    dfcc:	2600      	movs	r6, #0
    dfce:	9a00      	ldr	r2, [sp, #0]
    dfd0:	6893      	ldr	r3, [r2, #8]
    dfd2:	eba3 030a 	sub.w	r3, r3, sl
    dfd6:	44d1      	add	r9, sl
    dfd8:	6093      	str	r3, [r2, #8]
    dfda:	2b00      	cmp	r3, #0
    dfdc:	d0c3      	beq.n	df66 <__sfvwrite_r+0x62>
    dfde:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
    dfe2:	b280      	uxth	r0, r0
    dfe4:	2e00      	cmp	r6, #0
    dfe6:	d1d6      	bne.n	df96 <__sfvwrite_r+0x92>
    dfe8:	e9d5 9600 	ldrd	r9, r6, [r5]
    dfec:	3508      	adds	r5, #8
    dfee:	e7d1      	b.n	df94 <__sfvwrite_r+0x90>
    dff0:	e9d5 a600 	ldrd	sl, r6, [r5]
    dff4:	3508      	adds	r5, #8
    dff6:	e7a0      	b.n	df3a <__sfvwrite_r+0x36>
    dff8:	4621      	mov	r1, r4
    dffa:	4640      	mov	r0, r8
    dffc:	f7fd f9ce 	bl	b39c <_fflush_r>
    e000:	b388      	cbz	r0, e066 <__sfvwrite_r+0x162>
    e002:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    e006:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    e00a:	f04f 30ff 	mov.w	r0, #4294967295
    e00e:	81a3      	strh	r3, [r4, #12]
    e010:	b003      	add	sp, #12
    e012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e016:	2000      	movs	r0, #0
    e018:	4770      	bx	lr
    e01a:	461e      	mov	r6, r3
    e01c:	46ba      	mov	sl, r7
    e01e:	4699      	mov	r9, r3
    e020:	4618      	mov	r0, r3
    e022:	9500      	str	r5, [sp, #0]
    e024:	461f      	mov	r7, r3
    e026:	b366      	cbz	r6, e082 <__sfvwrite_r+0x17e>
    e028:	2800      	cmp	r0, #0
    e02a:	d032      	beq.n	e092 <__sfvwrite_r+0x18e>
    e02c:	464a      	mov	r2, r9
    e02e:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
    e032:	6820      	ldr	r0, [r4, #0]
    e034:	68a5      	ldr	r5, [r4, #8]
    e036:	42b2      	cmp	r2, r6
    e038:	bf28      	it	cs
    e03a:	4632      	movcs	r2, r6
    e03c:	4288      	cmp	r0, r1
    e03e:	d904      	bls.n	e04a <__sfvwrite_r+0x146>
    e040:	eb05 0b03 	add.w	fp, r5, r3
    e044:	455a      	cmp	r2, fp
    e046:	f300 80a7 	bgt.w	e198 <__sfvwrite_r+0x294>
    e04a:	4293      	cmp	r3, r2
    e04c:	dc64      	bgt.n	e118 <__sfvwrite_r+0x214>
    e04e:	69e1      	ldr	r1, [r4, #28]
    e050:	6a65      	ldr	r5, [r4, #36]	; 0x24
    e052:	463a      	mov	r2, r7
    e054:	4640      	mov	r0, r8
    e056:	47a8      	blx	r5
    e058:	f1b0 0b00 	subs.w	fp, r0, #0
    e05c:	ddd1      	ble.n	e002 <__sfvwrite_r+0xfe>
    e05e:	ebb9 090b 	subs.w	r9, r9, fp
    e062:	d0c9      	beq.n	dff8 <__sfvwrite_r+0xf4>
    e064:	2001      	movs	r0, #1
    e066:	f8da 3008 	ldr.w	r3, [sl, #8]
    e06a:	eba3 030b 	sub.w	r3, r3, fp
    e06e:	445f      	add	r7, fp
    e070:	eba6 060b 	sub.w	r6, r6, fp
    e074:	f8ca 3008 	str.w	r3, [sl, #8]
    e078:	2b00      	cmp	r3, #0
    e07a:	f43f af74 	beq.w	df66 <__sfvwrite_r+0x62>
    e07e:	2e00      	cmp	r6, #0
    e080:	d1d2      	bne.n	e028 <__sfvwrite_r+0x124>
    e082:	9a00      	ldr	r2, [sp, #0]
    e084:	6856      	ldr	r6, [r2, #4]
    e086:	4613      	mov	r3, r2
    e088:	3208      	adds	r2, #8
    e08a:	9200      	str	r2, [sp, #0]
    e08c:	2e00      	cmp	r6, #0
    e08e:	d0f8      	beq.n	e082 <__sfvwrite_r+0x17e>
    e090:	681f      	ldr	r7, [r3, #0]
    e092:	4632      	mov	r2, r6
    e094:	210a      	movs	r1, #10
    e096:	4638      	mov	r0, r7
    e098:	f7fd fa4a 	bl	b530 <memchr>
    e09c:	2800      	cmp	r0, #0
    e09e:	f000 809c 	beq.w	e1da <__sfvwrite_r+0x2d6>
    e0a2:	3001      	adds	r0, #1
    e0a4:	eba0 0907 	sub.w	r9, r0, r7
    e0a8:	e7c0      	b.n	e02c <__sfvwrite_r+0x128>
    e0aa:	6820      	ldr	r0, [r4, #0]
    e0ac:	6923      	ldr	r3, [r4, #16]
    e0ae:	4298      	cmp	r0, r3
    e0b0:	d816      	bhi.n	e0e0 <__sfvwrite_r+0x1dc>
    e0b2:	6962      	ldr	r2, [r4, #20]
    e0b4:	42b2      	cmp	r2, r6
    e0b6:	d813      	bhi.n	e0e0 <__sfvwrite_r+0x1dc>
    e0b8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    e0bc:	42b3      	cmp	r3, r6
    e0be:	bf28      	it	cs
    e0c0:	4633      	movcs	r3, r6
    e0c2:	69e1      	ldr	r1, [r4, #28]
    e0c4:	fb93 f3f2 	sdiv	r3, r3, r2
    e0c8:	6a67      	ldr	r7, [r4, #36]	; 0x24
    e0ca:	fb02 f303 	mul.w	r3, r2, r3
    e0ce:	4640      	mov	r0, r8
    e0d0:	464a      	mov	r2, r9
    e0d2:	47b8      	blx	r7
    e0d4:	f1b0 0a00 	subs.w	sl, r0, #0
    e0d8:	dd93      	ble.n	e002 <__sfvwrite_r+0xfe>
    e0da:	eba6 060a 	sub.w	r6, r6, sl
    e0de:	e776      	b.n	dfce <__sfvwrite_r+0xca>
    e0e0:	45b3      	cmp	fp, r6
    e0e2:	46da      	mov	sl, fp
    e0e4:	bf28      	it	cs
    e0e6:	46b2      	movcs	sl, r6
    e0e8:	4652      	mov	r2, sl
    e0ea:	4649      	mov	r1, r9
    e0ec:	f7f7 fedc 	bl	5ea8 <memmove>
    e0f0:	68a3      	ldr	r3, [r4, #8]
    e0f2:	6822      	ldr	r2, [r4, #0]
    e0f4:	eba3 030a 	sub.w	r3, r3, sl
    e0f8:	4452      	add	r2, sl
    e0fa:	60a3      	str	r3, [r4, #8]
    e0fc:	6022      	str	r2, [r4, #0]
    e0fe:	2b00      	cmp	r3, #0
    e100:	d1eb      	bne.n	e0da <__sfvwrite_r+0x1d6>
    e102:	4621      	mov	r1, r4
    e104:	4640      	mov	r0, r8
    e106:	f7fd f949 	bl	b39c <_fflush_r>
    e10a:	2800      	cmp	r0, #0
    e10c:	d0e5      	beq.n	e0da <__sfvwrite_r+0x1d6>
    e10e:	e778      	b.n	e002 <__sfvwrite_r+0xfe>
    e110:	6820      	ldr	r0, [r4, #0]
    e112:	46b3      	mov	fp, r6
    e114:	4632      	mov	r2, r6
    e116:	e74c      	b.n	dfb2 <__sfvwrite_r+0xae>
    e118:	4639      	mov	r1, r7
    e11a:	9201      	str	r2, [sp, #4]
    e11c:	f7f7 fec4 	bl	5ea8 <memmove>
    e120:	9a01      	ldr	r2, [sp, #4]
    e122:	68a3      	ldr	r3, [r4, #8]
    e124:	1a9b      	subs	r3, r3, r2
    e126:	60a3      	str	r3, [r4, #8]
    e128:	6823      	ldr	r3, [r4, #0]
    e12a:	4413      	add	r3, r2
    e12c:	6023      	str	r3, [r4, #0]
    e12e:	4693      	mov	fp, r2
    e130:	e795      	b.n	e05e <__sfvwrite_r+0x15a>
    e132:	6823      	ldr	r3, [r4, #0]
    e134:	6921      	ldr	r1, [r4, #16]
    e136:	eba3 0b01 	sub.w	fp, r3, r1
    e13a:	6963      	ldr	r3, [r4, #20]
    e13c:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
    e140:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
    e144:	f10b 0301 	add.w	r3, fp, #1
    e148:	ea4f 0a6a 	mov.w	sl, sl, asr #1
    e14c:	4433      	add	r3, r6
    e14e:	4553      	cmp	r3, sl
    e150:	4652      	mov	r2, sl
    e152:	bf84      	itt	hi
    e154:	469a      	movhi	sl, r3
    e156:	4652      	movhi	r2, sl
    e158:	0543      	lsls	r3, r0, #21
    e15a:	d52c      	bpl.n	e1b6 <__sfvwrite_r+0x2b2>
    e15c:	4611      	mov	r1, r2
    e15e:	4640      	mov	r0, r8
    e160:	f7f5 fffe 	bl	4160 <_malloc_r>
    e164:	2800      	cmp	r0, #0
    e166:	d03b      	beq.n	e1e0 <__sfvwrite_r+0x2dc>
    e168:	465a      	mov	r2, fp
    e16a:	6921      	ldr	r1, [r4, #16]
    e16c:	9001      	str	r0, [sp, #4]
    e16e:	f7f4 f8cb 	bl	2308 <memcpy>
    e172:	89a2      	ldrh	r2, [r4, #12]
    e174:	9b01      	ldr	r3, [sp, #4]
    e176:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
    e17a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    e17e:	81a2      	strh	r2, [r4, #12]
    e180:	eb03 000b 	add.w	r0, r3, fp
    e184:	6123      	str	r3, [r4, #16]
    e186:	ebaa 030b 	sub.w	r3, sl, fp
    e18a:	f8c4 a014 	str.w	sl, [r4, #20]
    e18e:	60a3      	str	r3, [r4, #8]
    e190:	6020      	str	r0, [r4, #0]
    e192:	46b3      	mov	fp, r6
    e194:	4632      	mov	r2, r6
    e196:	e70c      	b.n	dfb2 <__sfvwrite_r+0xae>
    e198:	4639      	mov	r1, r7
    e19a:	465a      	mov	r2, fp
    e19c:	f7f7 fe84 	bl	5ea8 <memmove>
    e1a0:	6823      	ldr	r3, [r4, #0]
    e1a2:	445b      	add	r3, fp
    e1a4:	6023      	str	r3, [r4, #0]
    e1a6:	4621      	mov	r1, r4
    e1a8:	4640      	mov	r0, r8
    e1aa:	f7fd f8f7 	bl	b39c <_fflush_r>
    e1ae:	2800      	cmp	r0, #0
    e1b0:	f43f af55 	beq.w	e05e <__sfvwrite_r+0x15a>
    e1b4:	e725      	b.n	e002 <__sfvwrite_r+0xfe>
    e1b6:	4640      	mov	r0, r8
    e1b8:	f7f6 fa9a 	bl	46f0 <_realloc_r>
    e1bc:	4603      	mov	r3, r0
    e1be:	2800      	cmp	r0, #0
    e1c0:	d1de      	bne.n	e180 <__sfvwrite_r+0x27c>
    e1c2:	6921      	ldr	r1, [r4, #16]
    e1c4:	4640      	mov	r0, r8
    e1c6:	f7f8 fbad 	bl	6924 <_free_r>
    e1ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    e1ce:	220c      	movs	r2, #12
    e1d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    e1d4:	f8c8 2000 	str.w	r2, [r8]
    e1d8:	e715      	b.n	e006 <__sfvwrite_r+0x102>
    e1da:	1c72      	adds	r2, r6, #1
    e1dc:	4691      	mov	r9, r2
    e1de:	e726      	b.n	e02e <__sfvwrite_r+0x12a>
    e1e0:	220c      	movs	r2, #12
    e1e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    e1e6:	f8c8 2000 	str.w	r2, [r8]
    e1ea:	e70c      	b.n	e006 <__sfvwrite_r+0x102>
    e1ec:	f04f 30ff 	mov.w	r0, #4294967295
    e1f0:	e6ba      	b.n	df68 <__sfvwrite_r+0x64>
    e1f2:	bf00      	nop
    e1f4:	7ffffc00 	.word	0x7ffffc00

0000e1f8 <__submore>:
    e1f8:	f101 0340 	add.w	r3, r1, #64	; 0x40
    e1fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e200:	460c      	mov	r4, r1
    e202:	6b09      	ldr	r1, [r1, #48]	; 0x30
    e204:	4299      	cmp	r1, r3
    e206:	d014      	beq.n	e232 <__submore+0x3a>
    e208:	6b66      	ldr	r6, [r4, #52]	; 0x34
    e20a:	0077      	lsls	r7, r6, #1
    e20c:	463a      	mov	r2, r7
    e20e:	f7f6 fa6f 	bl	46f0 <_realloc_r>
    e212:	4605      	mov	r5, r0
    e214:	b340      	cbz	r0, e268 <__submore+0x70>
    e216:	eb00 0806 	add.w	r8, r0, r6
    e21a:	4601      	mov	r1, r0
    e21c:	4632      	mov	r2, r6
    e21e:	4640      	mov	r0, r8
    e220:	f7f4 f872 	bl	2308 <memcpy>
    e224:	e9c4 570c 	strd	r5, r7, [r4, #48]	; 0x30
    e228:	f8c4 8000 	str.w	r8, [r4]
    e22c:	2000      	movs	r0, #0
    e22e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e232:	f44f 6180 	mov.w	r1, #1024	; 0x400
    e236:	f7f5 ff93 	bl	4160 <_malloc_r>
    e23a:	b1a8      	cbz	r0, e268 <__submore+0x70>
    e23c:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
    e240:	f44f 6280 	mov.w	r2, #1024	; 0x400
    e244:	e9c4 020c 	strd	r0, r2, [r4, #48]	; 0x30
    e248:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
    e24c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    e250:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
    e254:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
    e258:	f880 23fd 	strb.w	r2, [r0, #1021]	; 0x3fd
    e25c:	f200 33fd 	addw	r3, r0, #1021	; 0x3fd
    e260:	6023      	str	r3, [r4, #0]
    e262:	2000      	movs	r0, #0
    e264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e268:	f04f 30ff 	mov.w	r0, #4294967295
    e26c:	e7df      	b.n	e22e <__submore+0x36>
    e26e:	bf00      	nop

0000e270 <__swsetup_r>:
    e270:	b538      	push	{r3, r4, r5, lr}
    e272:	4b31      	ldr	r3, [pc, #196]	; (e338 <__swsetup_r+0xc8>)
    e274:	681b      	ldr	r3, [r3, #0]
    e276:	4605      	mov	r5, r0
    e278:	460c      	mov	r4, r1
    e27a:	b113      	cbz	r3, e282 <__swsetup_r+0x12>
    e27c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    e27e:	2a00      	cmp	r2, #0
    e280:	d04e      	beq.n	e320 <__swsetup_r+0xb0>
    e282:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    e286:	0718      	lsls	r0, r3, #28
    e288:	b29a      	uxth	r2, r3
    e28a:	d51c      	bpl.n	e2c6 <__swsetup_r+0x56>
    e28c:	6921      	ldr	r1, [r4, #16]
    e28e:	b329      	cbz	r1, e2dc <__swsetup_r+0x6c>
    e290:	f012 0001 	ands.w	r0, r2, #1
    e294:	d007      	beq.n	e2a6 <__swsetup_r+0x36>
    e296:	2000      	movs	r0, #0
    e298:	60a0      	str	r0, [r4, #8]
    e29a:	6960      	ldr	r0, [r4, #20]
    e29c:	4240      	negs	r0, r0
    e29e:	61a0      	str	r0, [r4, #24]
    e2a0:	b139      	cbz	r1, e2b2 <__swsetup_r+0x42>
    e2a2:	2000      	movs	r0, #0
    e2a4:	bd38      	pop	{r3, r4, r5, pc}
    e2a6:	0795      	lsls	r5, r2, #30
    e2a8:	bf58      	it	pl
    e2aa:	6960      	ldrpl	r0, [r4, #20]
    e2ac:	60a0      	str	r0, [r4, #8]
    e2ae:	2900      	cmp	r1, #0
    e2b0:	d1f7      	bne.n	e2a2 <__swsetup_r+0x32>
    e2b2:	0612      	lsls	r2, r2, #24
    e2b4:	bf58      	it	pl
    e2b6:	4608      	movpl	r0, r1
    e2b8:	d5f4      	bpl.n	e2a4 <__swsetup_r+0x34>
    e2ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    e2be:	81a3      	strh	r3, [r4, #12]
    e2c0:	f04f 30ff 	mov.w	r0, #4294967295
    e2c4:	bd38      	pop	{r3, r4, r5, pc}
    e2c6:	06d1      	lsls	r1, r2, #27
    e2c8:	d52e      	bpl.n	e328 <__swsetup_r+0xb8>
    e2ca:	0752      	lsls	r2, r2, #29
    e2cc:	d414      	bmi.n	e2f8 <__swsetup_r+0x88>
    e2ce:	6921      	ldr	r1, [r4, #16]
    e2d0:	f043 0308 	orr.w	r3, r3, #8
    e2d4:	81a3      	strh	r3, [r4, #12]
    e2d6:	b29a      	uxth	r2, r3
    e2d8:	2900      	cmp	r1, #0
    e2da:	d1d9      	bne.n	e290 <__swsetup_r+0x20>
    e2dc:	f402 7020 	and.w	r0, r2, #640	; 0x280
    e2e0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    e2e4:	d0d4      	beq.n	e290 <__swsetup_r+0x20>
    e2e6:	4621      	mov	r1, r4
    e2e8:	4628      	mov	r0, r5
    e2ea:	f000 f977 	bl	e5dc <__smakebuf_r>
    e2ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    e2f2:	6921      	ldr	r1, [r4, #16]
    e2f4:	b29a      	uxth	r2, r3
    e2f6:	e7cb      	b.n	e290 <__swsetup_r+0x20>
    e2f8:	6b21      	ldr	r1, [r4, #48]	; 0x30
    e2fa:	b151      	cbz	r1, e312 <__swsetup_r+0xa2>
    e2fc:	f104 0240 	add.w	r2, r4, #64	; 0x40
    e300:	4291      	cmp	r1, r2
    e302:	d004      	beq.n	e30e <__swsetup_r+0x9e>
    e304:	4628      	mov	r0, r5
    e306:	f7f8 fb0d 	bl	6924 <_free_r>
    e30a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    e30e:	2200      	movs	r2, #0
    e310:	6322      	str	r2, [r4, #48]	; 0x30
    e312:	6921      	ldr	r1, [r4, #16]
    e314:	2200      	movs	r2, #0
    e316:	e9c4 1200 	strd	r1, r2, [r4]
    e31a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    e31e:	e7d7      	b.n	e2d0 <__swsetup_r+0x60>
    e320:	4618      	mov	r0, r3
    e322:	f7f7 fc61 	bl	5be8 <__sinit>
    e326:	e7ac      	b.n	e282 <__swsetup_r+0x12>
    e328:	2209      	movs	r2, #9
    e32a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    e32e:	602a      	str	r2, [r5, #0]
    e330:	f04f 30ff 	mov.w	r0, #4294967295
    e334:	81a3      	strh	r3, [r4, #12]
    e336:	bd38      	pop	{r3, r4, r5, pc}
    e338:	200081c0 	.word	0x200081c0

0000e33c <__fputwc>:
    e33c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e340:	b082      	sub	sp, #8
    e342:	4682      	mov	sl, r0
    e344:	4688      	mov	r8, r1
    e346:	4614      	mov	r4, r2
    e348:	f7f7 ff5a 	bl	6200 <__locale_mb_cur_max>
    e34c:	2801      	cmp	r0, #1
    e34e:	d103      	bne.n	e358 <__fputwc+0x1c>
    e350:	f108 33ff 	add.w	r3, r8, #4294967295
    e354:	2bfe      	cmp	r3, #254	; 0xfe
    e356:	d936      	bls.n	e3c6 <__fputwc+0x8a>
    e358:	f10d 0904 	add.w	r9, sp, #4
    e35c:	4642      	mov	r2, r8
    e35e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
    e362:	4649      	mov	r1, r9
    e364:	4650      	mov	r0, sl
    e366:	f7fe fb29 	bl	c9bc <_wcrtomb_r>
    e36a:	1c42      	adds	r2, r0, #1
    e36c:	4606      	mov	r6, r0
    e36e:	d032      	beq.n	e3d6 <__fputwc+0x9a>
    e370:	b320      	cbz	r0, e3bc <__fputwc+0x80>
    e372:	f89d c004 	ldrb.w	ip, [sp, #4]
    e376:	2500      	movs	r5, #0
    e378:	e009      	b.n	e38e <__fputwc+0x52>
    e37a:	6823      	ldr	r3, [r4, #0]
    e37c:	1c5a      	adds	r2, r3, #1
    e37e:	6022      	str	r2, [r4, #0]
    e380:	f883 c000 	strb.w	ip, [r3]
    e384:	3501      	adds	r5, #1
    e386:	42b5      	cmp	r5, r6
    e388:	d218      	bcs.n	e3bc <__fputwc+0x80>
    e38a:	f819 cf01 	ldrb.w	ip, [r9, #1]!
    e38e:	68a3      	ldr	r3, [r4, #8]
    e390:	3b01      	subs	r3, #1
    e392:	2b00      	cmp	r3, #0
    e394:	60a3      	str	r3, [r4, #8]
    e396:	daf0      	bge.n	e37a <__fputwc+0x3e>
    e398:	69a7      	ldr	r7, [r4, #24]
    e39a:	42bb      	cmp	r3, r7
    e39c:	4661      	mov	r1, ip
    e39e:	4622      	mov	r2, r4
    e3a0:	4650      	mov	r0, sl
    e3a2:	db02      	blt.n	e3aa <__fputwc+0x6e>
    e3a4:	f1bc 0f0a 	cmp.w	ip, #10
    e3a8:	d1e7      	bne.n	e37a <__fputwc+0x3e>
    e3aa:	f000 f983 	bl	e6b4 <__swbuf_r>
    e3ae:	1c43      	adds	r3, r0, #1
    e3b0:	d1e8      	bne.n	e384 <__fputwc+0x48>
    e3b2:	4606      	mov	r6, r0
    e3b4:	4630      	mov	r0, r6
    e3b6:	b002      	add	sp, #8
    e3b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e3bc:	4646      	mov	r6, r8
    e3be:	4630      	mov	r0, r6
    e3c0:	b002      	add	sp, #8
    e3c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e3c6:	fa5f fc88 	uxtb.w	ip, r8
    e3ca:	f88d c004 	strb.w	ip, [sp, #4]
    e3ce:	4606      	mov	r6, r0
    e3d0:	f10d 0904 	add.w	r9, sp, #4
    e3d4:	e7cf      	b.n	e376 <__fputwc+0x3a>
    e3d6:	89a3      	ldrh	r3, [r4, #12]
    e3d8:	4630      	mov	r0, r6
    e3da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    e3de:	81a3      	strh	r3, [r4, #12]
    e3e0:	b002      	add	sp, #8
    e3e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e3e6:	bf00      	nop

0000e3e8 <_fputwc_r>:
    e3e8:	b530      	push	{r4, r5, lr}
    e3ea:	6e53      	ldr	r3, [r2, #100]	; 0x64
    e3ec:	f013 0f01 	tst.w	r3, #1
    e3f0:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    e3f4:	4614      	mov	r4, r2
    e3f6:	b083      	sub	sp, #12
    e3f8:	4605      	mov	r5, r0
    e3fa:	b29a      	uxth	r2, r3
    e3fc:	d101      	bne.n	e402 <_fputwc_r+0x1a>
    e3fe:	0598      	lsls	r0, r3, #22
    e400:	d51c      	bpl.n	e43c <_fputwc_r+0x54>
    e402:	0490      	lsls	r0, r2, #18
    e404:	d406      	bmi.n	e414 <_fputwc_r+0x2c>
    e406:	6e62      	ldr	r2, [r4, #100]	; 0x64
    e408:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    e40c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    e410:	81a3      	strh	r3, [r4, #12]
    e412:	6662      	str	r2, [r4, #100]	; 0x64
    e414:	4622      	mov	r2, r4
    e416:	4628      	mov	r0, r5
    e418:	f7ff ff90 	bl	e33c <__fputwc>
    e41c:	6e63      	ldr	r3, [r4, #100]	; 0x64
    e41e:	07da      	lsls	r2, r3, #31
    e420:	4605      	mov	r5, r0
    e422:	d402      	bmi.n	e42a <_fputwc_r+0x42>
    e424:	89a3      	ldrh	r3, [r4, #12]
    e426:	059b      	lsls	r3, r3, #22
    e428:	d502      	bpl.n	e430 <_fputwc_r+0x48>
    e42a:	4628      	mov	r0, r5
    e42c:	b003      	add	sp, #12
    e42e:	bd30      	pop	{r4, r5, pc}
    e430:	6da0      	ldr	r0, [r4, #88]	; 0x58
    e432:	f7f7 ff81 	bl	6338 <__retarget_lock_release_recursive>
    e436:	4628      	mov	r0, r5
    e438:	b003      	add	sp, #12
    e43a:	bd30      	pop	{r4, r5, pc}
    e43c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    e43e:	9101      	str	r1, [sp, #4]
    e440:	f7f7 ff78 	bl	6334 <__retarget_lock_acquire_recursive>
    e444:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    e448:	9901      	ldr	r1, [sp, #4]
    e44a:	b29a      	uxth	r2, r3
    e44c:	e7d9      	b.n	e402 <_fputwc_r+0x1a>
    e44e:	bf00      	nop

0000e450 <_wcsnrtombs_l>:
    e450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e454:	b08b      	sub	sp, #44	; 0x2c
    e456:	e9dd 8a15 	ldrd	r8, sl, [sp, #84]	; 0x54
    e45a:	9f14      	ldr	r7, [sp, #80]	; 0x50
    e45c:	9103      	str	r1, [sp, #12]
    e45e:	4681      	mov	r9, r0
    e460:	9205      	str	r2, [sp, #20]
    e462:	461e      	mov	r6, r3
    e464:	f1b8 0f00 	cmp.w	r8, #0
    e468:	d05c      	beq.n	e524 <_wcsnrtombs_l+0xd4>
    e46a:	9b03      	ldr	r3, [sp, #12]
    e46c:	2b00      	cmp	r3, #0
    e46e:	d05e      	beq.n	e52e <_wcsnrtombs_l+0xde>
    e470:	9b05      	ldr	r3, [sp, #20]
    e472:	681d      	ldr	r5, [r3, #0]
    e474:	2f00      	cmp	r7, #0
    e476:	d06a      	beq.n	e54e <_wcsnrtombs_l+0xfe>
    e478:	1e74      	subs	r4, r6, #1
    e47a:	b34e      	cbz	r6, e4d0 <_wcsnrtombs_l+0x80>
    e47c:	9b03      	ldr	r3, [sp, #12]
    e47e:	9304      	str	r3, [sp, #16]
    e480:	3d04      	subs	r5, #4
    e482:	2600      	movs	r6, #0
    e484:	9501      	str	r5, [sp, #4]
    e486:	e00b      	b.n	e4a0 <_wcsnrtombs_l+0x50>
    e488:	9b03      	ldr	r3, [sp, #12]
    e48a:	bb2b      	cbnz	r3, e4d8 <_wcsnrtombs_l+0x88>
    e48c:	9b01      	ldr	r3, [sp, #4]
    e48e:	681a      	ldr	r2, [r3, #0]
    e490:	2a00      	cmp	r2, #0
    e492:	d03a      	beq.n	e50a <_wcsnrtombs_l+0xba>
    e494:	45bc      	cmp	ip, r7
    e496:	d25c      	bcs.n	e552 <_wcsnrtombs_l+0x102>
    e498:	3c01      	subs	r4, #1
    e49a:	1c63      	adds	r3, r4, #1
    e49c:	4666      	mov	r6, ip
    e49e:	d017      	beq.n	e4d0 <_wcsnrtombs_l+0x80>
    e4a0:	f8d8 3000 	ldr.w	r3, [r8]
    e4a4:	9302      	str	r3, [sp, #8]
    e4a6:	9b01      	ldr	r3, [sp, #4]
    e4a8:	f8da 50e0 	ldr.w	r5, [sl, #224]	; 0xe0
    e4ac:	f853 2f04 	ldr.w	r2, [r3, #4]!
    e4b0:	9301      	str	r3, [sp, #4]
    e4b2:	a907      	add	r1, sp, #28
    e4b4:	4643      	mov	r3, r8
    e4b6:	4648      	mov	r0, r9
    e4b8:	f8d8 b004 	ldr.w	fp, [r8, #4]
    e4bc:	47a8      	blx	r5
    e4be:	1c42      	adds	r2, r0, #1
    e4c0:	d03a      	beq.n	e538 <_wcsnrtombs_l+0xe8>
    e4c2:	eb00 0c06 	add.w	ip, r0, r6
    e4c6:	45bc      	cmp	ip, r7
    e4c8:	d9de      	bls.n	e488 <_wcsnrtombs_l+0x38>
    e4ca:	9b02      	ldr	r3, [sp, #8]
    e4cc:	e9c8 3b00 	strd	r3, fp, [r8]
    e4d0:	4630      	mov	r0, r6
    e4d2:	b00b      	add	sp, #44	; 0x2c
    e4d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e4d8:	2800      	cmp	r0, #0
    e4da:	dd0e      	ble.n	e4fa <_wcsnrtombs_l+0xaa>
    e4dc:	9b04      	ldr	r3, [sp, #16]
    e4de:	9d01      	ldr	r5, [sp, #4]
    e4e0:	4418      	add	r0, r3
    e4e2:	1e5a      	subs	r2, r3, #1
    e4e4:	a907      	add	r1, sp, #28
    e4e6:	f100 3eff 	add.w	lr, r0, #4294967295
    e4ea:	f811 3b01 	ldrb.w	r3, [r1], #1
    e4ee:	f802 3f01 	strb.w	r3, [r2, #1]!
    e4f2:	4572      	cmp	r2, lr
    e4f4:	d1f9      	bne.n	e4ea <_wcsnrtombs_l+0x9a>
    e4f6:	9501      	str	r5, [sp, #4]
    e4f8:	9004      	str	r0, [sp, #16]
    e4fa:	9b05      	ldr	r3, [sp, #20]
    e4fc:	681a      	ldr	r2, [r3, #0]
    e4fe:	3204      	adds	r2, #4
    e500:	601a      	str	r2, [r3, #0]
    e502:	9b01      	ldr	r3, [sp, #4]
    e504:	681a      	ldr	r2, [r3, #0]
    e506:	2a00      	cmp	r2, #0
    e508:	d1c4      	bne.n	e494 <_wcsnrtombs_l+0x44>
    e50a:	9b03      	ldr	r3, [sp, #12]
    e50c:	b10b      	cbz	r3, e512 <_wcsnrtombs_l+0xc2>
    e50e:	9b05      	ldr	r3, [sp, #20]
    e510:	601a      	str	r2, [r3, #0]
    e512:	f10c 36ff 	add.w	r6, ip, #4294967295
    e516:	2200      	movs	r2, #0
    e518:	4630      	mov	r0, r6
    e51a:	f8c8 2000 	str.w	r2, [r8]
    e51e:	b00b      	add	sp, #44	; 0x2c
    e520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e524:	9b03      	ldr	r3, [sp, #12]
    e526:	f500 7886 	add.w	r8, r0, #268	; 0x10c
    e52a:	2b00      	cmp	r3, #0
    e52c:	d1a0      	bne.n	e470 <_wcsnrtombs_l+0x20>
    e52e:	9b05      	ldr	r3, [sp, #20]
    e530:	f04f 37ff 	mov.w	r7, #4294967295
    e534:	681d      	ldr	r5, [r3, #0]
    e536:	e79f      	b.n	e478 <_wcsnrtombs_l+0x28>
    e538:	4606      	mov	r6, r0
    e53a:	218a      	movs	r1, #138	; 0x8a
    e53c:	2200      	movs	r2, #0
    e53e:	4630      	mov	r0, r6
    e540:	f8c9 1000 	str.w	r1, [r9]
    e544:	f8c8 2000 	str.w	r2, [r8]
    e548:	b00b      	add	sp, #44	; 0x2c
    e54a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e54e:	463e      	mov	r6, r7
    e550:	e7be      	b.n	e4d0 <_wcsnrtombs_l+0x80>
    e552:	4666      	mov	r6, ip
    e554:	e7bc      	b.n	e4d0 <_wcsnrtombs_l+0x80>
    e556:	bf00      	nop

0000e558 <_wcsnrtombs_r>:
    e558:	b510      	push	{r4, lr}
    e55a:	b084      	sub	sp, #16
    e55c:	4c05      	ldr	r4, [pc, #20]	; (e574 <_wcsnrtombs_r+0x1c>)
    e55e:	9806      	ldr	r0, [sp, #24]
    e560:	9000      	str	r0, [sp, #0]
    e562:	9807      	ldr	r0, [sp, #28]
    e564:	9001      	str	r0, [sp, #4]
    e566:	4804      	ldr	r0, [pc, #16]	; (e578 <_wcsnrtombs_r+0x20>)
    e568:	6800      	ldr	r0, [r0, #0]
    e56a:	9402      	str	r4, [sp, #8]
    e56c:	f7ff ff70 	bl	e450 <_wcsnrtombs_l>
    e570:	b004      	add	sp, #16
    e572:	bd10      	pop	{r4, pc}
    e574:	20007c38 	.word	0x20007c38
    e578:	200081c0 	.word	0x200081c0

0000e57c <category>:
    e57c:	4b15      	ldr	r3, [pc, #84]	; (e5d4 <category+0x58>)
    e57e:	4298      	cmp	r0, r3
    e580:	d823      	bhi.n	e5ca <category+0x4e>
    e582:	b570      	push	{r4, r5, r6, lr}
    e584:	4e14      	ldr	r6, [pc, #80]	; (e5d8 <category+0x5c>)
    e586:	f04f 0e00 	mov.w	lr, #0
    e58a:	f640 04db 	movw	r4, #2267	; 0x8db
    e58e:	e003      	b.n	e598 <category+0x1c>
    e590:	f102 0e01 	add.w	lr, r2, #1
    e594:	45a6      	cmp	lr, r4
    e596:	dc16      	bgt.n	e5c6 <category+0x4a>
    e598:	eb04 020e 	add.w	r2, r4, lr
    e59c:	f022 0301 	bic.w	r3, r2, #1
    e5a0:	eb03 0362 	add.w	r3, r3, r2, asr #1
    e5a4:	eb06 0343 	add.w	r3, r6, r3, lsl #1
    e5a8:	1052      	asrs	r2, r2, #1
    e5aa:	7859      	ldrb	r1, [r3, #1]
    e5ac:	885d      	ldrh	r5, [r3, #2]
    e5ae:	f8b3 c004 	ldrh.w	ip, [r3, #4]
    e5b2:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
    e5b6:	448c      	add	ip, r1
    e5b8:	4560      	cmp	r0, ip
    e5ba:	d8e9      	bhi.n	e590 <category+0x14>
    e5bc:	4288      	cmp	r0, r1
    e5be:	d206      	bcs.n	e5ce <category+0x52>
    e5c0:	1e54      	subs	r4, r2, #1
    e5c2:	45a6      	cmp	lr, r4
    e5c4:	dde8      	ble.n	e598 <category+0x1c>
    e5c6:	20ff      	movs	r0, #255	; 0xff
    e5c8:	bd70      	pop	{r4, r5, r6, pc}
    e5ca:	20ff      	movs	r0, #255	; 0xff
    e5cc:	4770      	bx	lr
    e5ce:	7818      	ldrb	r0, [r3, #0]
    e5d0:	bd70      	pop	{r4, r5, r6, pc}
    e5d2:	bf00      	nop
    e5d4:	000e01ef 	.word	0x000e01ef
    e5d8:	200023d0 	.word	0x200023d0

0000e5dc <__smakebuf_r>:
    e5dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e5e0:	898b      	ldrh	r3, [r1, #12]
    e5e2:	460c      	mov	r4, r1
    e5e4:	0799      	lsls	r1, r3, #30
    e5e6:	b096      	sub	sp, #88	; 0x58
    e5e8:	d508      	bpl.n	e5fc <__smakebuf_r+0x20>
    e5ea:	f104 0343 	add.w	r3, r4, #67	; 0x43
    e5ee:	2201      	movs	r2, #1
    e5f0:	e9c4 3204 	strd	r3, r2, [r4, #16]
    e5f4:	6023      	str	r3, [r4, #0]
    e5f6:	b016      	add	sp, #88	; 0x58
    e5f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e5fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    e600:	2900      	cmp	r1, #0
    e602:	4606      	mov	r6, r0
    e604:	db25      	blt.n	e652 <__smakebuf_r+0x76>
    e606:	466a      	mov	r2, sp
    e608:	f000 f8ac 	bl	e764 <_fstat_r>
    e60c:	2800      	cmp	r0, #0
    e60e:	db1f      	blt.n	e650 <__smakebuf_r+0x74>
    e610:	9d01      	ldr	r5, [sp, #4]
    e612:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
    e616:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
    e61a:	fab5 f585 	clz	r5, r5
    e61e:	f44f 6880 	mov.w	r8, #1024	; 0x400
    e622:	096d      	lsrs	r5, r5, #5
    e624:	f44f 6700 	mov.w	r7, #2048	; 0x800
    e628:	4641      	mov	r1, r8
    e62a:	4630      	mov	r0, r6
    e62c:	f7f5 fd98 	bl	4160 <_malloc_r>
    e630:	b1e0      	cbz	r0, e66c <__smakebuf_r+0x90>
    e632:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    e636:	f8c4 8014 	str.w	r8, [r4, #20]
    e63a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    e63e:	6020      	str	r0, [r4, #0]
    e640:	6120      	str	r0, [r4, #16]
    e642:	81a3      	strh	r3, [r4, #12]
    e644:	bb35      	cbnz	r5, e694 <__smakebuf_r+0xb8>
    e646:	433b      	orrs	r3, r7
    e648:	81a3      	strh	r3, [r4, #12]
    e64a:	b016      	add	sp, #88	; 0x58
    e64c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e650:	89a3      	ldrh	r3, [r4, #12]
    e652:	f013 0580 	ands.w	r5, r3, #128	; 0x80
    e656:	d019      	beq.n	e68c <__smakebuf_r+0xb0>
    e658:	f04f 0840 	mov.w	r8, #64	; 0x40
    e65c:	2500      	movs	r5, #0
    e65e:	4641      	mov	r1, r8
    e660:	4630      	mov	r0, r6
    e662:	462f      	mov	r7, r5
    e664:	f7f5 fd7c 	bl	4160 <_malloc_r>
    e668:	2800      	cmp	r0, #0
    e66a:	d1e2      	bne.n	e632 <__smakebuf_r+0x56>
    e66c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    e670:	059a      	lsls	r2, r3, #22
    e672:	d4c0      	bmi.n	e5f6 <__smakebuf_r+0x1a>
    e674:	f023 0303 	bic.w	r3, r3, #3
    e678:	f104 0243 	add.w	r2, r4, #67	; 0x43
    e67c:	f043 0302 	orr.w	r3, r3, #2
    e680:	2101      	movs	r1, #1
    e682:	e9c4 2104 	strd	r2, r1, [r4, #16]
    e686:	81a3      	strh	r3, [r4, #12]
    e688:	6022      	str	r2, [r4, #0]
    e68a:	e7b4      	b.n	e5f6 <__smakebuf_r+0x1a>
    e68c:	f44f 6880 	mov.w	r8, #1024	; 0x400
    e690:	462f      	mov	r7, r5
    e692:	e7c9      	b.n	e628 <__smakebuf_r+0x4c>
    e694:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    e698:	4630      	mov	r0, r6
    e69a:	f000 f879 	bl	e790 <_isatty_r>
    e69e:	b910      	cbnz	r0, e6a6 <__smakebuf_r+0xca>
    e6a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    e6a4:	e7cf      	b.n	e646 <__smakebuf_r+0x6a>
    e6a6:	89a3      	ldrh	r3, [r4, #12]
    e6a8:	f023 0303 	bic.w	r3, r3, #3
    e6ac:	f043 0301 	orr.w	r3, r3, #1
    e6b0:	b21b      	sxth	r3, r3
    e6b2:	e7c8      	b.n	e646 <__smakebuf_r+0x6a>

0000e6b4 <__swbuf_r>:
    e6b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e6b6:	460d      	mov	r5, r1
    e6b8:	4614      	mov	r4, r2
    e6ba:	4606      	mov	r6, r0
    e6bc:	b110      	cbz	r0, e6c4 <__swbuf_r+0x10>
    e6be:	6b43      	ldr	r3, [r0, #52]	; 0x34
    e6c0:	2b00      	cmp	r3, #0
    e6c2:	d04c      	beq.n	e75e <__swbuf_r+0xaa>
    e6c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    e6c8:	69a3      	ldr	r3, [r4, #24]
    e6ca:	60a3      	str	r3, [r4, #8]
    e6cc:	0717      	lsls	r7, r2, #28
    e6ce:	b290      	uxth	r0, r2
    e6d0:	d51b      	bpl.n	e70a <__swbuf_r+0x56>
    e6d2:	6923      	ldr	r3, [r4, #16]
    e6d4:	b1cb      	cbz	r3, e70a <__swbuf_r+0x56>
    e6d6:	b2ed      	uxtb	r5, r5
    e6d8:	0481      	lsls	r1, r0, #18
    e6da:	462f      	mov	r7, r5
    e6dc:	d522      	bpl.n	e724 <__swbuf_r+0x70>
    e6de:	6822      	ldr	r2, [r4, #0]
    e6e0:	6961      	ldr	r1, [r4, #20]
    e6e2:	1ad3      	subs	r3, r2, r3
    e6e4:	4299      	cmp	r1, r3
    e6e6:	dd29      	ble.n	e73c <__swbuf_r+0x88>
    e6e8:	3301      	adds	r3, #1
    e6ea:	68a1      	ldr	r1, [r4, #8]
    e6ec:	3901      	subs	r1, #1
    e6ee:	60a1      	str	r1, [r4, #8]
    e6f0:	1c51      	adds	r1, r2, #1
    e6f2:	6021      	str	r1, [r4, #0]
    e6f4:	7015      	strb	r5, [r2, #0]
    e6f6:	6962      	ldr	r2, [r4, #20]
    e6f8:	429a      	cmp	r2, r3
    e6fa:	d027      	beq.n	e74c <__swbuf_r+0x98>
    e6fc:	89a3      	ldrh	r3, [r4, #12]
    e6fe:	07db      	lsls	r3, r3, #31
    e700:	d501      	bpl.n	e706 <__swbuf_r+0x52>
    e702:	2d0a      	cmp	r5, #10
    e704:	d022      	beq.n	e74c <__swbuf_r+0x98>
    e706:	4638      	mov	r0, r7
    e708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e70a:	4621      	mov	r1, r4
    e70c:	4630      	mov	r0, r6
    e70e:	f7ff fdaf 	bl	e270 <__swsetup_r>
    e712:	bb08      	cbnz	r0, e758 <__swbuf_r+0xa4>
    e714:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    e718:	6923      	ldr	r3, [r4, #16]
    e71a:	b290      	uxth	r0, r2
    e71c:	b2ed      	uxtb	r5, r5
    e71e:	0481      	lsls	r1, r0, #18
    e720:	462f      	mov	r7, r5
    e722:	d4dc      	bmi.n	e6de <__swbuf_r+0x2a>
    e724:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    e728:	81a2      	strh	r2, [r4, #12]
    e72a:	6e62      	ldr	r2, [r4, #100]	; 0x64
    e72c:	6961      	ldr	r1, [r4, #20]
    e72e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
    e732:	6662      	str	r2, [r4, #100]	; 0x64
    e734:	6822      	ldr	r2, [r4, #0]
    e736:	1ad3      	subs	r3, r2, r3
    e738:	4299      	cmp	r1, r3
    e73a:	dcd5      	bgt.n	e6e8 <__swbuf_r+0x34>
    e73c:	4621      	mov	r1, r4
    e73e:	4630      	mov	r0, r6
    e740:	f7fc fe2c 	bl	b39c <_fflush_r>
    e744:	b940      	cbnz	r0, e758 <__swbuf_r+0xa4>
    e746:	6822      	ldr	r2, [r4, #0]
    e748:	2301      	movs	r3, #1
    e74a:	e7ce      	b.n	e6ea <__swbuf_r+0x36>
    e74c:	4621      	mov	r1, r4
    e74e:	4630      	mov	r0, r6
    e750:	f7fc fe24 	bl	b39c <_fflush_r>
    e754:	2800      	cmp	r0, #0
    e756:	d0d6      	beq.n	e706 <__swbuf_r+0x52>
    e758:	f04f 37ff 	mov.w	r7, #4294967295
    e75c:	e7d3      	b.n	e706 <__swbuf_r+0x52>
    e75e:	f7f7 fa43 	bl	5be8 <__sinit>
    e762:	e7af      	b.n	e6c4 <__swbuf_r+0x10>

0000e764 <_fstat_r>:
    e764:	b570      	push	{r4, r5, r6, lr}
    e766:	460c      	mov	r4, r1
    e768:	4d08      	ldr	r5, [pc, #32]	; (e78c <_fstat_r+0x28>)
    e76a:	4603      	mov	r3, r0
    e76c:	2600      	movs	r6, #0
    e76e:	4620      	mov	r0, r4
    e770:	4611      	mov	r1, r2
    e772:	461c      	mov	r4, r3
    e774:	602e      	str	r6, [r5, #0]
    e776:	f7f4 f831 	bl	27dc <_fstat>
    e77a:	1c43      	adds	r3, r0, #1
    e77c:	d000      	beq.n	e780 <_fstat_r+0x1c>
    e77e:	bd70      	pop	{r4, r5, r6, pc}
    e780:	682b      	ldr	r3, [r5, #0]
    e782:	2b00      	cmp	r3, #0
    e784:	d0fb      	beq.n	e77e <_fstat_r+0x1a>
    e786:	6023      	str	r3, [r4, #0]
    e788:	bd70      	pop	{r4, r5, r6, pc}
    e78a:	bf00      	nop
    e78c:	200091f4 	.word	0x200091f4

0000e790 <_isatty_r>:
    e790:	b538      	push	{r3, r4, r5, lr}
    e792:	4d07      	ldr	r5, [pc, #28]	; (e7b0 <_isatty_r+0x20>)
    e794:	2200      	movs	r2, #0
    e796:	4604      	mov	r4, r0
    e798:	4608      	mov	r0, r1
    e79a:	602a      	str	r2, [r5, #0]
    e79c:	f7f4 f824 	bl	27e8 <_isatty>
    e7a0:	1c43      	adds	r3, r0, #1
    e7a2:	d000      	beq.n	e7a6 <_isatty_r+0x16>
    e7a4:	bd38      	pop	{r3, r4, r5, pc}
    e7a6:	682b      	ldr	r3, [r5, #0]
    e7a8:	2b00      	cmp	r3, #0
    e7aa:	d0fb      	beq.n	e7a4 <_isatty_r+0x14>
    e7ac:	6023      	str	r3, [r4, #0]
    e7ae:	bd38      	pop	{r3, r4, r5, pc}
    e7b0:	200091f4 	.word	0x200091f4

0000e7b4 <__aeabi_drsub>:
    e7b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    e7b8:	e002      	b.n	e7c0 <__adddf3>
    e7ba:	bf00      	nop

0000e7bc <__aeabi_dsub>:
    e7bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000e7c0 <__adddf3>:
    e7c0:	b530      	push	{r4, r5, lr}
    e7c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
    e7c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
    e7ca:	ea94 0f05 	teq	r4, r5
    e7ce:	bf08      	it	eq
    e7d0:	ea90 0f02 	teqeq	r0, r2
    e7d4:	bf1f      	itttt	ne
    e7d6:	ea54 0c00 	orrsne.w	ip, r4, r0
    e7da:	ea55 0c02 	orrsne.w	ip, r5, r2
    e7de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    e7e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    e7e6:	f000 80e2 	beq.w	e9ae <__adddf3+0x1ee>
    e7ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
    e7ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    e7f2:	bfb8      	it	lt
    e7f4:	426d      	neglt	r5, r5
    e7f6:	dd0c      	ble.n	e812 <__adddf3+0x52>
    e7f8:	442c      	add	r4, r5
    e7fa:	ea80 0202 	eor.w	r2, r0, r2
    e7fe:	ea81 0303 	eor.w	r3, r1, r3
    e802:	ea82 0000 	eor.w	r0, r2, r0
    e806:	ea83 0101 	eor.w	r1, r3, r1
    e80a:	ea80 0202 	eor.w	r2, r0, r2
    e80e:	ea81 0303 	eor.w	r3, r1, r3
    e812:	2d36      	cmp	r5, #54	; 0x36
    e814:	bf88      	it	hi
    e816:	bd30      	pophi	{r4, r5, pc}
    e818:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    e81c:	ea4f 3101 	mov.w	r1, r1, lsl #12
    e820:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    e824:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    e828:	d002      	beq.n	e830 <__adddf3+0x70>
    e82a:	4240      	negs	r0, r0
    e82c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    e830:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    e834:	ea4f 3303 	mov.w	r3, r3, lsl #12
    e838:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    e83c:	d002      	beq.n	e844 <__adddf3+0x84>
    e83e:	4252      	negs	r2, r2
    e840:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    e844:	ea94 0f05 	teq	r4, r5
    e848:	f000 80a7 	beq.w	e99a <__adddf3+0x1da>
    e84c:	f1a4 0401 	sub.w	r4, r4, #1
    e850:	f1d5 0e20 	rsbs	lr, r5, #32
    e854:	db0d      	blt.n	e872 <__adddf3+0xb2>
    e856:	fa02 fc0e 	lsl.w	ip, r2, lr
    e85a:	fa22 f205 	lsr.w	r2, r2, r5
    e85e:	1880      	adds	r0, r0, r2
    e860:	f141 0100 	adc.w	r1, r1, #0
    e864:	fa03 f20e 	lsl.w	r2, r3, lr
    e868:	1880      	adds	r0, r0, r2
    e86a:	fa43 f305 	asr.w	r3, r3, r5
    e86e:	4159      	adcs	r1, r3
    e870:	e00e      	b.n	e890 <__adddf3+0xd0>
    e872:	f1a5 0520 	sub.w	r5, r5, #32
    e876:	f10e 0e20 	add.w	lr, lr, #32
    e87a:	2a01      	cmp	r2, #1
    e87c:	fa03 fc0e 	lsl.w	ip, r3, lr
    e880:	bf28      	it	cs
    e882:	f04c 0c02 	orrcs.w	ip, ip, #2
    e886:	fa43 f305 	asr.w	r3, r3, r5
    e88a:	18c0      	adds	r0, r0, r3
    e88c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    e890:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    e894:	d507      	bpl.n	e8a6 <__adddf3+0xe6>
    e896:	f04f 0e00 	mov.w	lr, #0
    e89a:	f1dc 0c00 	rsbs	ip, ip, #0
    e89e:	eb7e 0000 	sbcs.w	r0, lr, r0
    e8a2:	eb6e 0101 	sbc.w	r1, lr, r1
    e8a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    e8aa:	d31b      	bcc.n	e8e4 <__adddf3+0x124>
    e8ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    e8b0:	d30c      	bcc.n	e8cc <__adddf3+0x10c>
    e8b2:	0849      	lsrs	r1, r1, #1
    e8b4:	ea5f 0030 	movs.w	r0, r0, rrx
    e8b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
    e8bc:	f104 0401 	add.w	r4, r4, #1
    e8c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
    e8c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    e8c8:	f080 809a 	bcs.w	ea00 <__adddf3+0x240>
    e8cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    e8d0:	bf08      	it	eq
    e8d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    e8d6:	f150 0000 	adcs.w	r0, r0, #0
    e8da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    e8de:	ea41 0105 	orr.w	r1, r1, r5
    e8e2:	bd30      	pop	{r4, r5, pc}
    e8e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    e8e8:	4140      	adcs	r0, r0
    e8ea:	eb41 0101 	adc.w	r1, r1, r1
    e8ee:	3c01      	subs	r4, #1
    e8f0:	bf28      	it	cs
    e8f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    e8f6:	d2e9      	bcs.n	e8cc <__adddf3+0x10c>
    e8f8:	f091 0f00 	teq	r1, #0
    e8fc:	bf04      	itt	eq
    e8fe:	4601      	moveq	r1, r0
    e900:	2000      	moveq	r0, #0
    e902:	fab1 f381 	clz	r3, r1
    e906:	bf08      	it	eq
    e908:	3320      	addeq	r3, #32
    e90a:	f1a3 030b 	sub.w	r3, r3, #11
    e90e:	f1b3 0220 	subs.w	r2, r3, #32
    e912:	da0c      	bge.n	e92e <__adddf3+0x16e>
    e914:	320c      	adds	r2, #12
    e916:	dd08      	ble.n	e92a <__adddf3+0x16a>
    e918:	f102 0c14 	add.w	ip, r2, #20
    e91c:	f1c2 020c 	rsb	r2, r2, #12
    e920:	fa01 f00c 	lsl.w	r0, r1, ip
    e924:	fa21 f102 	lsr.w	r1, r1, r2
    e928:	e00c      	b.n	e944 <__adddf3+0x184>
    e92a:	f102 0214 	add.w	r2, r2, #20
    e92e:	bfd8      	it	le
    e930:	f1c2 0c20 	rsble	ip, r2, #32
    e934:	fa01 f102 	lsl.w	r1, r1, r2
    e938:	fa20 fc0c 	lsr.w	ip, r0, ip
    e93c:	bfdc      	itt	le
    e93e:	ea41 010c 	orrle.w	r1, r1, ip
    e942:	4090      	lslle	r0, r2
    e944:	1ae4      	subs	r4, r4, r3
    e946:	bfa2      	ittt	ge
    e948:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    e94c:	4329      	orrge	r1, r5
    e94e:	bd30      	popge	{r4, r5, pc}
    e950:	ea6f 0404 	mvn.w	r4, r4
    e954:	3c1f      	subs	r4, #31
    e956:	da1c      	bge.n	e992 <__adddf3+0x1d2>
    e958:	340c      	adds	r4, #12
    e95a:	dc0e      	bgt.n	e97a <__adddf3+0x1ba>
    e95c:	f104 0414 	add.w	r4, r4, #20
    e960:	f1c4 0220 	rsb	r2, r4, #32
    e964:	fa20 f004 	lsr.w	r0, r0, r4
    e968:	fa01 f302 	lsl.w	r3, r1, r2
    e96c:	ea40 0003 	orr.w	r0, r0, r3
    e970:	fa21 f304 	lsr.w	r3, r1, r4
    e974:	ea45 0103 	orr.w	r1, r5, r3
    e978:	bd30      	pop	{r4, r5, pc}
    e97a:	f1c4 040c 	rsb	r4, r4, #12
    e97e:	f1c4 0220 	rsb	r2, r4, #32
    e982:	fa20 f002 	lsr.w	r0, r0, r2
    e986:	fa01 f304 	lsl.w	r3, r1, r4
    e98a:	ea40 0003 	orr.w	r0, r0, r3
    e98e:	4629      	mov	r1, r5
    e990:	bd30      	pop	{r4, r5, pc}
    e992:	fa21 f004 	lsr.w	r0, r1, r4
    e996:	4629      	mov	r1, r5
    e998:	bd30      	pop	{r4, r5, pc}
    e99a:	f094 0f00 	teq	r4, #0
    e99e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    e9a2:	bf06      	itte	eq
    e9a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    e9a8:	3401      	addeq	r4, #1
    e9aa:	3d01      	subne	r5, #1
    e9ac:	e74e      	b.n	e84c <__adddf3+0x8c>
    e9ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    e9b2:	bf18      	it	ne
    e9b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    e9b8:	d029      	beq.n	ea0e <__adddf3+0x24e>
    e9ba:	ea94 0f05 	teq	r4, r5
    e9be:	bf08      	it	eq
    e9c0:	ea90 0f02 	teqeq	r0, r2
    e9c4:	d005      	beq.n	e9d2 <__adddf3+0x212>
    e9c6:	ea54 0c00 	orrs.w	ip, r4, r0
    e9ca:	bf04      	itt	eq
    e9cc:	4619      	moveq	r1, r3
    e9ce:	4610      	moveq	r0, r2
    e9d0:	bd30      	pop	{r4, r5, pc}
    e9d2:	ea91 0f03 	teq	r1, r3
    e9d6:	bf1e      	ittt	ne
    e9d8:	2100      	movne	r1, #0
    e9da:	2000      	movne	r0, #0
    e9dc:	bd30      	popne	{r4, r5, pc}
    e9de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    e9e2:	d105      	bne.n	e9f0 <__adddf3+0x230>
    e9e4:	0040      	lsls	r0, r0, #1
    e9e6:	4149      	adcs	r1, r1
    e9e8:	bf28      	it	cs
    e9ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    e9ee:	bd30      	pop	{r4, r5, pc}
    e9f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    e9f4:	bf3c      	itt	cc
    e9f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    e9fa:	bd30      	popcc	{r4, r5, pc}
    e9fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    ea00:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    ea04:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    ea08:	f04f 0000 	mov.w	r0, #0
    ea0c:	bd30      	pop	{r4, r5, pc}
    ea0e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    ea12:	bf1a      	itte	ne
    ea14:	4619      	movne	r1, r3
    ea16:	4610      	movne	r0, r2
    ea18:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    ea1c:	bf1c      	itt	ne
    ea1e:	460b      	movne	r3, r1
    ea20:	4602      	movne	r2, r0
    ea22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    ea26:	bf06      	itte	eq
    ea28:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    ea2c:	ea91 0f03 	teqeq	r1, r3
    ea30:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    ea34:	bd30      	pop	{r4, r5, pc}
    ea36:	bf00      	nop

0000ea38 <__aeabi_ui2d>:
    ea38:	f090 0f00 	teq	r0, #0
    ea3c:	bf04      	itt	eq
    ea3e:	2100      	moveq	r1, #0
    ea40:	4770      	bxeq	lr
    ea42:	b530      	push	{r4, r5, lr}
    ea44:	f44f 6480 	mov.w	r4, #1024	; 0x400
    ea48:	f104 0432 	add.w	r4, r4, #50	; 0x32
    ea4c:	f04f 0500 	mov.w	r5, #0
    ea50:	f04f 0100 	mov.w	r1, #0
    ea54:	e750      	b.n	e8f8 <__adddf3+0x138>
    ea56:	bf00      	nop

0000ea58 <__aeabi_i2d>:
    ea58:	f090 0f00 	teq	r0, #0
    ea5c:	bf04      	itt	eq
    ea5e:	2100      	moveq	r1, #0
    ea60:	4770      	bxeq	lr
    ea62:	b530      	push	{r4, r5, lr}
    ea64:	f44f 6480 	mov.w	r4, #1024	; 0x400
    ea68:	f104 0432 	add.w	r4, r4, #50	; 0x32
    ea6c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    ea70:	bf48      	it	mi
    ea72:	4240      	negmi	r0, r0
    ea74:	f04f 0100 	mov.w	r1, #0
    ea78:	e73e      	b.n	e8f8 <__adddf3+0x138>
    ea7a:	bf00      	nop

0000ea7c <__aeabi_f2d>:
    ea7c:	0042      	lsls	r2, r0, #1
    ea7e:	ea4f 01e2 	mov.w	r1, r2, asr #3
    ea82:	ea4f 0131 	mov.w	r1, r1, rrx
    ea86:	ea4f 7002 	mov.w	r0, r2, lsl #28
    ea8a:	bf1f      	itttt	ne
    ea8c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    ea90:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    ea94:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    ea98:	4770      	bxne	lr
    ea9a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    ea9e:	bf08      	it	eq
    eaa0:	4770      	bxeq	lr
    eaa2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    eaa6:	bf04      	itt	eq
    eaa8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    eaac:	4770      	bxeq	lr
    eaae:	b530      	push	{r4, r5, lr}
    eab0:	f44f 7460 	mov.w	r4, #896	; 0x380
    eab4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    eab8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    eabc:	e71c      	b.n	e8f8 <__adddf3+0x138>
    eabe:	bf00      	nop

0000eac0 <__aeabi_ul2d>:
    eac0:	ea50 0201 	orrs.w	r2, r0, r1
    eac4:	bf08      	it	eq
    eac6:	4770      	bxeq	lr
    eac8:	b530      	push	{r4, r5, lr}
    eaca:	f04f 0500 	mov.w	r5, #0
    eace:	e00a      	b.n	eae6 <__aeabi_l2d+0x16>

0000ead0 <__aeabi_l2d>:
    ead0:	ea50 0201 	orrs.w	r2, r0, r1
    ead4:	bf08      	it	eq
    ead6:	4770      	bxeq	lr
    ead8:	b530      	push	{r4, r5, lr}
    eada:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    eade:	d502      	bpl.n	eae6 <__aeabi_l2d+0x16>
    eae0:	4240      	negs	r0, r0
    eae2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    eae6:	f44f 6480 	mov.w	r4, #1024	; 0x400
    eaea:	f104 0432 	add.w	r4, r4, #50	; 0x32
    eaee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    eaf2:	f43f aed8 	beq.w	e8a6 <__adddf3+0xe6>
    eaf6:	f04f 0203 	mov.w	r2, #3
    eafa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    eafe:	bf18      	it	ne
    eb00:	3203      	addne	r2, #3
    eb02:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    eb06:	bf18      	it	ne
    eb08:	3203      	addne	r2, #3
    eb0a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    eb0e:	f1c2 0320 	rsb	r3, r2, #32
    eb12:	fa00 fc03 	lsl.w	ip, r0, r3
    eb16:	fa20 f002 	lsr.w	r0, r0, r2
    eb1a:	fa01 fe03 	lsl.w	lr, r1, r3
    eb1e:	ea40 000e 	orr.w	r0, r0, lr
    eb22:	fa21 f102 	lsr.w	r1, r1, r2
    eb26:	4414      	add	r4, r2
    eb28:	e6bd      	b.n	e8a6 <__adddf3+0xe6>
    eb2a:	bf00      	nop

0000eb2c <__aeabi_d2lz>:
    eb2c:	b508      	push	{r3, lr}
    eb2e:	4602      	mov	r2, r0
    eb30:	460b      	mov	r3, r1
    eb32:	ec43 2b17 	vmov	d7, r2, r3
    eb36:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    eb3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    eb3e:	d403      	bmi.n	eb48 <__aeabi_d2lz+0x1c>
    eb40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    eb44:	f000 b80c 	b.w	eb60 <__aeabi_d2ulz>
    eb48:	eeb1 7b47 	vneg.f64	d7, d7
    eb4c:	ec51 0b17 	vmov	r0, r1, d7
    eb50:	f000 f806 	bl	eb60 <__aeabi_d2ulz>
    eb54:	4240      	negs	r0, r0
    eb56:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    eb5a:	bd08      	pop	{r3, pc}
    eb5c:	0000      	movs	r0, r0
	...

0000eb60 <__aeabi_d2ulz>:
    eb60:	ed9f 6b0b 	vldr	d6, [pc, #44]	; eb90 <__aeabi_d2ulz+0x30>
    eb64:	ec41 0b17 	vmov	d7, r0, r1
    eb68:	ed9f 5b0b 	vldr	d5, [pc, #44]	; eb98 <__aeabi_d2ulz+0x38>
    eb6c:	ee27 6b06 	vmul.f64	d6, d7, d6
    eb70:	eebc 6bc6 	vcvt.u32.f64	s12, d6
    eb74:	eeb8 4b46 	vcvt.f64.u32	d4, s12
    eb78:	eea4 7b45 	vfms.f64	d7, d4, d5
    eb7c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    eb80:	ee16 1a10 	vmov	r1, s12
    eb84:	ee17 0a90 	vmov	r0, s15
    eb88:	4770      	bx	lr
    eb8a:	bf00      	nop
    eb8c:	f3af 8000 	nop.w
    eb90:	00000000 	.word	0x00000000
    eb94:	3df00000 	.word	0x3df00000
    eb98:	00000000 	.word	0x00000000
    eb9c:	41f00000 	.word	0x41f00000

0000eba0 <___reboot_Teensyduino__veneer>:
    eba0:	f85f f000 	ldr.w	pc, [pc]	; eba4 <___reboot_Teensyduino__veneer+0x4>
    eba4:	60001de1 	.word	0x60001de1

0000eba8 <___init_veneer>:
    eba8:	f85f f000 	ldr.w	pc, [pc]	; ebac <___init_veneer+0x4>
    ebac:	60001e35 	.word	0x60001e35

Disassembly of section .fini:

0000ebb0 <_fini>:
    ebb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ebb2:	bf00      	nop
