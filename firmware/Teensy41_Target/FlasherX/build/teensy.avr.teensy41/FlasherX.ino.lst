
C:\Users\johnw\AppData\Local\arduino\sketches\3FD484CE50FF8ACFD9557E12BCCA3382/FlasherX.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
	if (dest == src) return;
	do {
		*dest++ = *src++;
	} while (dest < dest_end);
#else
	asm volatile(
60001400:	4281      	cmp	r1, r0
60001402:	d005      	beq.n	60001410 <memory_copy+0x10>
60001404:	f851 3b04 	ldr.w	r3, [r1], #4
60001408:	f840 3b04 	str.w	r3, [r0], #4
6000140c:	4282      	cmp	r2, r0
6000140e:	d8f9      	bhi.n	60001404 <memory_copy+0x4>
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	"2:					\n"
	: [dest] "+r" (dest), [src] "+r" (src) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001410:	4770      	bx	lr
60001412:	bf00      	nop

60001414 <memory_clear.constprop.0>:
#if 0
	while (dest < dest_end) {
		*dest++ = 0;
	}
#else
	asm volatile(
60001414:	4a04      	ldr	r2, [pc, #16]	; (60001428 <memory_clear.constprop.0+0x14>)
60001416:	4905      	ldr	r1, [pc, #20]	; (6000142c <memory_clear.constprop.0+0x18>)
60001418:	f04f 0300 	mov.w	r3, #0
6000141c:	f842 3b04 	str.w	r3, [r2], #4
60001420:	4291      	cmp	r1, r2
60001422:	d8fb      	bhi.n	6000141c <memory_clear.constprop.0+0x8>
	"1:	str.w	r3, [%[dest]], #4	\n"
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	: [dest] "+r" (dest) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001424:	4770      	bx	lr
60001426:	bf00      	nop
60001428:	200086c0 	.word	0x200086c0
6000142c:	20008d20 	.word	0x20008d20

60001430 <ResetHandler2>:
{
60001430:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	__asm__ volatile("dsb":::"memory");
60001434:	f3bf 8f4f 	dsb	sy
	asm volatile("nop");
60001438:	bf00      	nop
	asm volatile("nop");
6000143a:	bf00      	nop
	asm volatile("nop");
6000143c:	bf00      	nop
	asm volatile("nop");
6000143e:	bf00      	nop
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
60001440:	f000 f918 	bl	60001674 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001444:	4b68      	ldr	r3, [pc, #416]	; (600015e8 <ResetHandler2+0x1b8>)
60001446:	2208      	movs	r2, #8
60001448:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	asm volatile("nop");
6000144c:	bf00      	nop
	asm volatile("nop");
6000144e:	bf00      	nop
	asm volatile("nop");
60001450:	bf00      	nop
	asm volatile("nop");
60001452:	bf00      	nop
	asm volatile("nop");
60001454:	bf00      	nop
	asm volatile("nop");
60001456:	bf00      	nop
	asm volatile("nop");
60001458:	bf00      	nop
	asm volatile("nop");
6000145a:	bf00      	nop
	asm volatile("nop");
6000145c:	bf00      	nop
	asm volatile("nop");
6000145e:	bf00      	nop
	asm volatile("nop");
60001460:	bf00      	nop
	asm volatile("nop");
60001462:	bf00      	nop
	asm volatile("nop");
60001464:	bf00      	nop
	asm volatile("nop");
60001466:	bf00      	nop
	asm volatile("nop");
60001468:	bf00      	nop
	asm volatile("nop");
6000146a:	bf00      	nop
	memory_copy(&_stext, &_stextload, &_etext);
6000146c:	4a5f      	ldr	r2, [pc, #380]	; (600015ec <ResetHandler2+0x1bc>)
6000146e:	4960      	ldr	r1, [pc, #384]	; (600015f0 <ResetHandler2+0x1c0>)
60001470:	4860      	ldr	r0, [pc, #384]	; (600015f4 <ResetHandler2+0x1c4>)
60001472:	f7ff ffc5 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001476:	4a60      	ldr	r2, [pc, #384]	; (600015f8 <ResetHandler2+0x1c8>)
60001478:	4960      	ldr	r1, [pc, #384]	; (600015fc <ResetHandler2+0x1cc>)
6000147a:	4861      	ldr	r0, [pc, #388]	; (60001600 <ResetHandler2+0x1d0>)
6000147c:	f7ff ffc0 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
60001480:	4c60      	ldr	r4, [pc, #384]	; (60001604 <ResetHandler2+0x1d4>)
60001482:	f7ff ffc7 	bl	60001414 <memory_clear.constprop.0>
	SCB_CPACR = 0x00F00000;
60001486:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
6000148a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000148e:	2300      	movs	r3, #0
60001490:	4a5d      	ldr	r2, [pc, #372]	; (60001608 <ResetHandler2+0x1d8>)
	SCB_CPACR = 0x00F00000;
60001492:	f8c1 0d88 	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001496:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
6000149a:	3301      	adds	r3, #1
6000149c:	2bb0      	cmp	r3, #176	; 0xb0
6000149e:	d1fa      	bne.n	60001496 <ResetHandler2+0x66>
600014a0:	4b5a      	ldr	r3, [pc, #360]	; (6000160c <ResetHandler2+0x1dc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600014a2:	2180      	movs	r1, #128	; 0x80
600014a4:	4a5a      	ldr	r2, [pc, #360]	; (60001610 <ResetHandler2+0x1e0>)
600014a6:	f803 1b01 	strb.w	r1, [r3], #1
600014aa:	4293      	cmp	r3, r2
600014ac:	d1fb      	bne.n	600014a6 <ResetHandler2+0x76>
	SCB_VTOR = (uint32_t)_VectorsRam;
600014ae:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014b2:	4e4d      	ldr	r6, [pc, #308]	; (600015e8 <ResetHandler2+0x1b8>)
600014b4:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014b8:	f8df b184 	ldr.w	fp, [pc, #388]	; 60001640 <ResetHandler2+0x210>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014bc:	f8df a184 	ldr.w	sl, [pc, #388]	; 60001644 <ResetHandler2+0x214>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014c0:	f04f 31ff 	mov.w	r1, #4294967295
	SCB_VTOR = (uint32_t)_VectorsRam;
600014c4:	f8c5 4d08 	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
600014c8:	2700      	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014ca:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014ce:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014d2:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014d6:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014da:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014de:	f8df 8168 	ldr.w	r8, [pc, #360]	; 60001648 <ResetHandler2+0x218>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014e6:	4a4b      	ldr	r2, [pc, #300]	; (60001614 <ResetHandler2+0x1e4>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e8:	f8c5 3d24 	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ec:	f8d8 301c 	ldr.w	r3, [r8, #28]
600014f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014f8:	f8c8 301c 	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014fc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
60001500:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
60001504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001508:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
6000150c:	6691      	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
6000150e:	66d1      	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001510:	6711      	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001512:	6751      	str	r1, [r2, #116]	; 0x74
	configure_cache();
60001514:	f000 f8b6 	bl	60001684 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
60001518:	4b3f      	ldr	r3, [pc, #252]	; (60001618 <ResetHandler2+0x1e8>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000151a:	4940      	ldr	r1, [pc, #256]	; (6000161c <ResetHandler2+0x1ec>)
	_VectorsRam[14] = pendablesrvreq_isr;
6000151c:	63a3      	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
6000151e:	4b40      	ldr	r3, [pc, #256]	; (60001620 <ResetHandler2+0x1f0>)
60001520:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001522:	2363      	movs	r3, #99	; 0x63
60001524:	616b      	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001526:	2303      	movs	r3, #3
	SYST_CVR = 0;
60001528:	61af      	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000152a:	612b      	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000152c:	4b3d      	ldr	r3, [pc, #244]	; (60001624 <ResetHandler2+0x1f4>)
6000152e:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001532:	f8d5 3dfc 	ldr.w	r3, [r5, #3580]	; 0xdfc
60001536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000153a:	f8c5 3dfc 	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000153e:	4b3a      	ldr	r3, [pc, #232]	; (60001628 <ResetHandler2+0x1f8>)
60001540:	681a      	ldr	r2, [r3, #0]
60001542:	f042 0201 	orr.w	r2, r2, #1
60001546:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001548:	685b      	ldr	r3, [r3, #4]
6000154a:	600b      	str	r3, [r1, #0]
	usb_pll_start();	
6000154c:	f000 fae4 	bl	60001b18 <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001550:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001554:	4835      	ldr	r0, [pc, #212]	; (6000162c <ResetHandler2+0x1fc>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001556:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000155a:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000155e:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001562:	f000 fc79 	bl	60001e58 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001566:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
6000156a:	4b31      	ldr	r3, [pc, #196]	; (60001630 <ResetHandler2+0x200>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000156c:	4a31      	ldr	r2, [pc, #196]	; (60001634 <ResetHandler2+0x204>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000156e:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
60001572:	f8c8 106c 	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001576:	601f      	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001578:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000157c:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001580:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001584:	f8c3 7138 	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001588:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000158a:	07db      	lsls	r3, r3, #31
6000158c:	d408      	bmi.n	600015a0 <ResetHandler2+0x170>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000158e:	f642 6315 	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
60001592:	4929      	ldr	r1, [pc, #164]	; (60001638 <ResetHandler2+0x208>)
60001594:	6551      	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001596:	6513      	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001598:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000159a:	f043 0301 	orr.w	r3, r3, #1
6000159e:	6393      	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600015a0:	4a24      	ldr	r2, [pc, #144]	; (60001634 <ResetHandler2+0x204>)
600015a2:	4c26      	ldr	r4, [pc, #152]	; (6000163c <ResetHandler2+0x20c>)
600015a4:	6893      	ldr	r3, [r2, #8]
600015a6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
600015aa:	6093      	str	r3, [r2, #8]
	configure_external_ram();
600015ac:	f000 f8f2 	bl	60001794 <configure_external_ram>
	analog_init();
600015b0:	f000 fc16 	bl	60001de0 <analog_init>
	pwm_init();
600015b4:	f000 fc58 	bl	60001e68 <__pwm_init_veneer>
	tempmon_init();
600015b8:	f000 fadc 	bl	60001b74 <tempmon_init>
	startup_middle_hook();
600015bc:	f000 f85c 	bl	60001678 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
600015c0:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015c2:	2b13      	cmp	r3, #19
600015c4:	d9fc      	bls.n	600015c0 <ResetHandler2+0x190>
	usb_init();
600015c6:	f000 fb6d 	bl	60001ca4 <usb_init>
600015ca:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015cc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015d0:	d3fb      	bcc.n	600015ca <ResetHandler2+0x19a>
	startup_debug_reset();
600015d2:	f000 f855 	bl	60001680 <startup_debug_reset>
	startup_late_hook();
600015d6:	f000 f851 	bl	6000167c <startup_default_late_hook>
	__libc_init_array();
600015da:	f000 fc31 	bl	60001e40 <____libc_init_array_veneer>
	main();
600015de:	f000 fc33 	bl	60001e48 <__main_veneer>
	while (1) asm("WFI");
600015e2:	bf30      	wfi
600015e4:	e7fd      	b.n	600015e2 <ResetHandler2+0x1b2>
600015e6:	bf00      	nop
600015e8:	400d8000 	.word	0x400d8000
600015ec:	0000de68 	.word	0x0000de68
600015f0:	60001f8c 	.word	0x60001f8c
600015f4:	00000000 	.word	0x00000000
600015f8:	200086c0 	.word	0x200086c0
600015fc:	6000fdf8 	.word	0x6000fdf8
60001600:	20000000 	.word	0x20000000
60001604:	20008400 	.word	0x20008400
60001608:	00001b15 	.word	0x00001b15
6000160c:	e000e400 	.word	0xe000e400
60001610:	e000e4a0 	.word	0xe000e4a0
60001614:	400ac000 	.word	0x400ac000
60001618:	00002f35 	.word	0x00002f35
6000161c:	20008cb0 	.word	0x20008cb0
60001620:	00002f39 	.word	0x00002f39
60001624:	20200000 	.word	0x20200000
60001628:	e0001000 	.word	0xe0001000
6000162c:	23c34600 	.word	0x23c34600
60001630:	40084000 	.word	0x40084000
60001634:	400d4000 	.word	0x400d4000
60001638:	56c00000 	.word	0x56c00000
6000163c:	20008cb4 	.word	0x20008cb4
60001640:	2018101b 	.word	0x2018101b
60001644:	13110d0c 	.word	0x13110d0c
60001648:	400fc000 	.word	0x400fc000

6000164c <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000164c:	4b05      	ldr	r3, [pc, #20]	; (60001664 <ResetHandler+0x18>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000164e:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001652:	4a05      	ldr	r2, [pc, #20]	; (60001668 <ResetHandler+0x1c>)
	IOMUXC_GPR_GPR16 = 0x00200007;
60001654:	4805      	ldr	r0, [pc, #20]	; (6000166c <ResetHandler+0x20>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001656:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001658:	6418      	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
6000165a:	4a05      	ldr	r2, [pc, #20]	; (60001670 <ResetHandler+0x24>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000165c:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
6000165e:	4695      	mov	sp, r2
	ResetHandler2();
60001660:	f7ff fee6 	bl	60001430 <ResetHandler2>
60001664:	400ac000 	.word	0x400ac000
60001668:	aaaaaaaf 	.word	0xaaaaaaaf
6000166c:	00200007 	.word	0x00200007
60001670:	20070000 	.word	0x20070000

60001674 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
60001674:	4770      	bx	lr
60001676:	bf00      	nop

60001678 <startup_default_middle_hook>:
60001678:	4770      	bx	lr
6000167a:	bf00      	nop

6000167c <startup_default_late_hook>:
6000167c:	4770      	bx	lr
6000167e:	bf00      	nop

60001680 <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
60001680:	bf00      	nop
60001682:	4770      	bx	lr

60001684 <configure_cache>:
{
60001684:	b410      	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
60001686:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
6000168a:	2100      	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
6000168c:	2410      	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000168e:	4831      	ldr	r0, [pc, #196]	; (60001754 <configure_cache+0xd0>)
	SCB_MPU_CTRL = 0; // turn off MPU
60001690:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001694:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001698:	2411      	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000169a:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
6000169e:	482e      	ldr	r0, [pc, #184]	; (60001758 <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600016a0:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600016a4:	2412      	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
600016a6:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600016aa:	482c      	ldr	r0, [pc, #176]	; (6000175c <configure_cache+0xd8>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600016ac:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600016b0:	4a2b      	ldr	r2, [pc, #172]	; (60001760 <configure_cache+0xdc>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600016b2:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600016b6:	4c2b      	ldr	r4, [pc, #172]	; (60001764 <configure_cache+0xe0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600016b8:	f042 0215 	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600016bc:	482a      	ldr	r0, [pc, #168]	; (60001768 <configure_cache+0xe4>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600016be:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600016c2:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600016c6:	4c29      	ldr	r4, [pc, #164]	; (6000176c <configure_cache+0xe8>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600016c8:	4829      	ldr	r0, [pc, #164]	; (60001770 <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600016ca:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600016ce:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600016d2:	4c28      	ldr	r4, [pc, #160]	; (60001774 <configure_cache+0xf0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600016d4:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600016d8:	4827      	ldr	r0, [pc, #156]	; (60001778 <configure_cache+0xf4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600016da:	4a28      	ldr	r2, [pc, #160]	; (6000177c <configure_cache+0xf8>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600016dc:	f8c3 4da0 	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600016e0:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600016e4:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016e8:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600016ec:	4c24      	ldr	r4, [pc, #144]	; (60001780 <configure_cache+0xfc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016ee:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600016f0:	4824      	ldr	r0, [pc, #144]	; (60001784 <configure_cache+0x100>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600016f2:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016f6:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600016fa:	4a23      	ldr	r2, [pc, #140]	; (60001788 <configure_cache+0x104>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600016fc:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001700:	4c22      	ldr	r4, [pc, #136]	; (6000178c <configure_cache+0x108>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001702:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001706:	f102 6240 	add.w	r2, r2, #201326592	; 0xc000000
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000170a:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
6000170e:	4820      	ldr	r0, [pc, #128]	; (60001790 <configure_cache+0x10c>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001710:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
60001714:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
60001716:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
6000171a:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	asm("nop"); // allow a few cycles for bus writes before enable MPU
6000171e:	bf00      	nop
	asm("nop");
60001720:	bf00      	nop
	asm("nop");
60001722:	bf00      	nop
	asm("nop");
60001724:	bf00      	nop
	asm("nop");
60001726:	bf00      	nop
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001728:	2201      	movs	r2, #1
6000172a:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
6000172e:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001732:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001736:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
6000173a:	f3bf 8f4f 	dsb	sy
	asm("isb");
6000173e:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001742:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
}
60001746:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000174a:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
6000174e:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
60001752:	4770      	bx	lr
60001754:	1000003f 	.word	0x1000003f
60001758:	07080025 	.word	0x07080025
6000175c:	00100009 	.word	0x00100009
60001760:	20008d20 	.word	0x20008d20
60001764:	00200013 	.word	0x00200013
60001768:	07020021 	.word	0x07020021
6000176c:	20000014 	.word	0x20000014
60001770:	13080025 	.word	0x13080025
60001774:	10000009 	.word	0x10000009
60001778:	20200016 	.word	0x20200016
6000177c:	130b0027 	.word	0x130b0027
60001780:	40000017 	.word	0x40000017
60001784:	60000018 	.word	0x60000018
60001788:	070b002f 	.word	0x070b002f
6000178c:	70000019 	.word	0x70000019
60001790:	8000001a 	.word	0x8000001a

60001794 <configure_external_ram>:
{
60001794:	b5f0      	push	{r4, r5, r6, r7, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001796:	4bb8      	ldr	r3, [pc, #736]	; (60001a78 <configure_external_ram+0x2e4>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001798:	2218      	movs	r2, #24
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000179a:	4eb8      	ldr	r6, [pc, #736]	; (60001a7c <configure_external_ram+0x2e8>)
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
6000179c:	2001      	movs	r0, #1
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
6000179e:	4fb8      	ldr	r7, [pc, #736]	; (60001a80 <configure_external_ram+0x2ec>)
{
600017a0:	b083      	sub	sp, #12
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600017a2:	f8c3 625c 	str.w	r6, [r3, #604]	; 0x25c
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600017a6:	49b7      	ldr	r1, [pc, #732]	; (60001a84 <configure_external_ram+0x2f0>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
600017a8:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600017ac:	4db6      	ldr	r5, [pc, #728]	; (60001a88 <configure_external_ram+0x2f4>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600017ae:	f8c3 6264 	str.w	r6, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600017b2:	f5a6 4630 	sub.w	r6, r6, #45056	; 0xb000
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600017b6:	4cb5      	ldr	r4, [pc, #724]	; (60001a8c <configure_external_ram+0x2f8>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600017b8:	f8c3 6268 	str.w	r6, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600017bc:	f8c3 526c 	str.w	r5, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600017c0:	f8c3 5270 	str.w	r5, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600017c4:	f8c3 5274 	str.w	r5, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600017c8:	f8c3 5278 	str.w	r5, [r3, #632]	; 0x278
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600017cc:	f248 750c 	movw	r5, #34572	; 0x870c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
600017d0:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
600017d2:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
600017d4:	675a      	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
600017d6:	679a      	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
600017d8:	67da      	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
600017da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
600017de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
600017e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600017e6:	f8c1 032c 	str.w	r0, [r1, #812]	; 0x32c
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600017ea:	4aa9      	ldr	r2, [pc, #676]	; (60001a90 <configure_external_ram+0x2fc>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
600017ec:	f8c1 0330 	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
600017f0:	f8c1 0334 	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
600017f4:	f8c1 0338 	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
600017f8:	f8c1 033c 	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
600017fc:	f8c1 0350 	str.w	r0, [r1, #848]	; 0x350
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001800:	69a1      	ldr	r1, [r4, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001802:	4ba4      	ldr	r3, [pc, #656]	; (60001a94 <configure_external_ram+0x300>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001804:	400a      	ands	r2, r1
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001806:	48a4      	ldr	r0, [pc, #656]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001808:	49a4      	ldr	r1, [pc, #656]	; (60001a9c <configure_external_ram+0x308>)
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
6000180a:	4313      	orrs	r3, r2
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
6000180c:	4aa4      	ldr	r2, [pc, #656]	; (60001aa0 <configure_external_ram+0x30c>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
6000180e:	61a3      	str	r3, [r4, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60001810:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
60001814:	f043 030c 	orr.w	r3, r3, #12
60001818:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
6000181c:	f04f 34ff 	mov.w	r4, #4294967295
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001820:	6803      	ldr	r3, [r0, #0]
60001822:	f043 0302 	orr.w	r3, r3, #2
60001826:	6003      	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001828:	6803      	ldr	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
6000182a:	402b      	ands	r3, r5
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
6000182c:	f44f 5500 	mov.w	r5, #8192	; 0x2000
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001830:	431a      	orrs	r2, r3
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001832:	4b9c      	ldr	r3, [pc, #624]	; (60001aa4 <configure_external_ram+0x310>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001834:	6002      	str	r2, [r0, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001836:	6044      	str	r4, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001838:	688a      	ldr	r2, [r1, #8]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000183a:	4c9b      	ldr	r4, [pc, #620]	; (60001aa8 <configure_external_ram+0x314>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000183c:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000183e:	4a9b      	ldr	r2, [pc, #620]	; (60001aac <configure_external_ram+0x318>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001840:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001844:	6083      	str	r3, [r0, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
60001846:	68c3      	ldr	r3, [r0, #12]
60001848:	f023 0378 	bic.w	r3, r3, #120	; 0x78
6000184c:	60c3      	str	r3, [r0, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000184e:	6a03      	ldr	r3, [r0, #32]
60001850:	4013      	ands	r3, r2
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001852:	4323      	orrs	r3, r4
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001854:	6203      	str	r3, [r0, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001856:	6a03      	ldr	r3, [r0, #32]
60001858:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF2CR0 = mask;
6000185a:	4a95      	ldr	r2, [pc, #596]	; (60001ab0 <configure_external_ram+0x31c>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000185c:	4323      	orrs	r3, r4
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
6000185e:	4c95      	ldr	r4, [pc, #596]	; (60001ab4 <configure_external_ram+0x320>)
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001860:	6243      	str	r3, [r0, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60001862:	6282      	str	r2, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
60001864:	62c2      	str	r2, [r0, #44]	; 0x2c
	FLEXSPI2_INTEN = 0;
60001866:	2200      	movs	r2, #0
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001868:	f8d1 30b8 	ldr.w	r3, [r1, #184]	; 0xb8
6000186c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
60001870:	f043 0301 	orr.w	r3, r3, #1
60001874:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001878:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
6000187c:	498e      	ldr	r1, [pc, #568]	; (60001ab8 <configure_external_ram+0x324>)
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
6000187e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
60001882:	f043 0301 	orr.w	r3, r3, #1
60001886:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
6000188a:	f240 6305 	movw	r3, #1541	; 0x605
	FLEXSPI2_INTEN = 0;
6000188e:	6102      	str	r2, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001890:	6605      	str	r5, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001892:	6704      	str	r4, [r0, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001894:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
60001898:	6645      	str	r5, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
6000189a:	6744      	str	r4, [r0, #116]	; 0x74
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
6000189c:	2402      	movs	r4, #2
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
6000189e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600018a2:	6803      	ldr	r3, [r0, #0]
600018a4:	f023 0302 	bic.w	r3, r3, #2
600018a8:	6003      	str	r3, [r0, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600018aa:	6181      	str	r1, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600018ac:	4b83      	ldr	r3, [pc, #524]	; (60001abc <configure_external_ram+0x328>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
600018ae:	4984      	ldr	r1, [pc, #528]	; (60001ac0 <configure_external_ram+0x32c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600018b0:	61c4      	str	r4, [r0, #28]
	for (int i=0; i < 64; i++) luttable[i] = 0;
600018b2:	f843 2b04 	str.w	r2, [r3], #4
600018b6:	428b      	cmp	r3, r1
600018b8:	d1fb      	bne.n	600018b2 <configure_external_ram+0x11e>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
600018ba:	4a77      	ldr	r2, [pc, #476]	; (60001a98 <configure_external_ram+0x304>)
600018bc:	6813      	ldr	r3, [r2, #0]
600018be:	f043 0301 	orr.w	r3, r3, #1
600018c2:	6013      	str	r3, [r2, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
600018c4:	6813      	ldr	r3, [r2, #0]
600018c6:	f013 0301 	ands.w	r3, r3, #1
600018ca:	d1fb      	bne.n	600018c4 <configure_external_ram+0x130>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600018cc:	487a      	ldr	r0, [pc, #488]	; (60001ab8 <configure_external_ram+0x324>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600018ce:	2102      	movs	r1, #2
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600018d0:	f240 64f5 	movw	r4, #1781	; 0x6f5
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600018d4:	6190      	str	r0, [r2, #24]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600018d6:	f240 4099 	movw	r0, #1177	; 0x499
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600018da:	61d1      	str	r1, [r2, #28]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600018dc:	f240 4166 	movw	r1, #1126	; 0x466
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600018e0:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600018e4:	f242 4401 	movw	r4, #9217	; 0x2401
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600018e8:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600018ec:	4975      	ldr	r1, [pc, #468]	; (60001ac4 <configure_external_ram+0x330>)
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600018ee:	f8c2 0220 	str.w	r0, [r2, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600018f2:	f8c2 1230 	str.w	r1, [r2, #560]	; 0x230
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
600018f6:	f240 4135 	movw	r1, #1077	; 0x435
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
600018fa:	4873      	ldr	r0, [pc, #460]	; (60001ac8 <configure_external_ram+0x334>)
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600018fc:	f8c2 4234 	str.w	r4, [r2, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001900:	f8c2 1240 	str.w	r1, [r2, #576]	; 0x240
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001904:	4c71      	ldr	r4, [pc, #452]	; (60001acc <configure_external_ram+0x338>)
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001906:	f8c2 0250 	str.w	r0, [r2, #592]	; 0x250
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
6000190a:	f242 2001 	movw	r0, #8705	; 0x2201
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
6000190e:	4970      	ldr	r1, [pc, #448]	; (60001ad0 <configure_external_ram+0x33c>)
60001910:	f8c2 1254 	str.w	r1, [r2, #596]	; 0x254
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001914:	2101      	movs	r1, #1
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001916:	f8c2 4260 	str.w	r4, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
6000191a:	f8c2 0264 	str.w	r0, [r2, #612]	; 0x264
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000191e:	485e      	ldr	r0, [pc, #376]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
60001920:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001924:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001928:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000192c:	6943      	ldr	r3, [r0, #20]
6000192e:	07da      	lsls	r2, r3, #31
60001930:	d5fc      	bpl.n	6000192c <configure_external_ram+0x198>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001932:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001934:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001936:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000193a:	4957      	ldr	r1, [pc, #348]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000193c:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
6000193e:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001942:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001946:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000194a:	694b      	ldr	r3, [r1, #20]
6000194c:	07db      	lsls	r3, r3, #31
6000194e:	d5fc      	bpl.n	6000194a <configure_external_ram+0x1b6>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001950:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001952:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001954:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001958:	4a4f      	ldr	r2, [pc, #316]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000195a:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
6000195c:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001960:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001964:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001968:	6953      	ldr	r3, [r2, #20]
6000196a:	07df      	lsls	r7, r3, #31
6000196c:	d5fc      	bpl.n	60001968 <configure_external_ram+0x1d4>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000196e:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001970:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001972:	4858      	ldr	r0, [pc, #352]	; (60001ad4 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001974:	4948      	ldr	r1, [pc, #288]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001976:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001978:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
6000197c:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001980:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001984:	694b      	ldr	r3, [r1, #20]
60001986:	07de      	lsls	r6, r3, #31
60001988:	d5fc      	bpl.n	60001984 <configure_external_ram+0x1f0>
	uint32_t id = FLEXSPI2_RFDR0;
6000198a:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
	if (flexspi2_psram_id(0) == 0x5D0D) {
6000198e:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001992:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60001994:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001996:	6148      	str	r0, [r1, #20]
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001998:	4293      	cmp	r3, r2
6000199a:	d165      	bne.n	60001a68 <configure_external_ram+0x2d4>
	FLEXSPI2_IPCR0 = addr;
6000199c:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000199e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019a2:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019a4:	483c      	ldr	r0, [pc, #240]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
600019a6:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019aa:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019ae:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019b2:	6943      	ldr	r3, [r0, #20]
600019b4:	07dd      	lsls	r5, r3, #31
600019b6:	d5fc      	bpl.n	600019b2 <configure_external_ram+0x21e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019b8:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600019ba:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019be:	2100      	movs	r1, #0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019c0:	4a35      	ldr	r2, [pc, #212]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019c2:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
600019c4:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019c8:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019cc:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019d0:	6953      	ldr	r3, [r2, #20]
600019d2:	07dc      	lsls	r4, r3, #31
600019d4:	d5fc      	bpl.n	600019d0 <configure_external_ram+0x23c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019d6:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600019d8:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019dc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019e0:	492d      	ldr	r1, [pc, #180]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019e2:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
600019e4:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019e8:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019ec:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019f0:	694b      	ldr	r3, [r1, #20]
600019f2:	07d8      	lsls	r0, r3, #31
600019f4:	d5fc      	bpl.n	600019f0 <configure_external_ram+0x25c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019f6:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600019f8:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019fc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a00:	4a25      	ldr	r2, [pc, #148]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a02:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60001a04:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a08:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a0c:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a10:	6953      	ldr	r3, [r2, #20]
60001a12:	07d9      	lsls	r1, r3, #31
60001a14:	d5fc      	bpl.n	60001a10 <configure_external_ram+0x27c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a16:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001a18:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001a1c:	482d      	ldr	r0, [pc, #180]	; (60001ad4 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a1e:	491e      	ldr	r1, [pc, #120]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a20:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001a22:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001a26:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a2a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a2e:	694b      	ldr	r3, [r1, #20]
60001a30:	07da      	lsls	r2, r3, #31
60001a32:	d5fc      	bpl.n	60001a2e <configure_external_ram+0x29a>
	uint32_t id = FLEXSPI2_RFDR0;
60001a34:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001a38:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001a3c:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60001a3e:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001a40:	6148      	str	r0, [r1, #20]
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001a42:	4293      	cmp	r3, r2
60001a44:	d050      	beq.n	60001ae8 <configure_external_ram+0x354>
60001a46:	2508      	movs	r5, #8
60001a48:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
			external_psram_size * 0x100000 -
60001a4c:	4922      	ldr	r1, [pc, #136]	; (60001ad8 <configure_external_ram+0x344>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001a4e:	2000      	movs	r0, #0
			external_psram_size * 0x100000 -
60001a50:	4b22      	ldr	r3, [pc, #136]	; (60001adc <configure_external_ram+0x348>)
			external_psram_size = 16;
60001a52:	4a23      	ldr	r2, [pc, #140]	; (60001ae0 <configure_external_ram+0x34c>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001a54:	9000      	str	r0, [sp, #0]
			external_psram_size = 16;
60001a56:	7015      	strb	r5, [r2, #0]
			external_psram_size * 0x100000 -
60001a58:	1a5a      	subs	r2, r3, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001a5a:	2301      	movs	r3, #1
60001a5c:	4821      	ldr	r0, [pc, #132]	; (60001ae4 <configure_external_ram+0x350>)
60001a5e:	4422      	add	r2, r4
60001a60:	f000 fa06 	bl	60001e70 <__sm_set_pool_veneer>
}
60001a64:	b003      	add	sp, #12
60001a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001a68:	4b1e      	ldr	r3, [pc, #120]	; (60001ae4 <configure_external_ram+0x350>)
60001a6a:	2200      	movs	r2, #0
60001a6c:	e9c3 2200 	strd	r2, r2, [r3]
60001a70:	e9c3 2202 	strd	r2, r2, [r3, #8]
}
60001a74:	b003      	add	sp, #12
60001a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
60001a78:	401f8000 	.word	0x401f8000
60001a7c:	0001b0f9 	.word	0x0001b0f9
60001a80:	000110f9 	.word	0x000110f9
60001a84:	401f8400 	.word	0x401f8400
60001a88:	000170f9 	.word	0x000170f9
60001a8c:	400fc000 	.word	0x400fc000
60001a90:	1ffffcff 	.word	0x1ffffcff
60001a94:	a0000300 	.word	0xa0000300
60001a98:	402a4000 	.word	0x402a4000
60001a9c:	402a8000 	.word	0x402a8000
60001aa0:	ffff0012 	.word	0xffff0012
60001aa4:	00f737ff 	.word	0x00f737ff
60001aa8:	80000040 	.word	0x80000040
60001aac:	7cf0ff00 	.word	0x7cf0ff00
60001ab0:	830f00ff 	.word	0x830f00ff
60001ab4:	00020063 	.word	0x00020063
60001ab8:	5af05af0 	.word	0x5af05af0
60001abc:	402a4200 	.word	0x402a4200
60001ac0:	402a4300 	.word	0x402a4300
60001ac4:	3018049f 	.word	0x3018049f
60001ac8:	0a1806eb 	.word	0x0a1806eb
60001acc:	0a180638 	.word	0x0a180638
60001ad0:	26013206 	.word	0x26013206
60001ad4:	00030004 	.word	0x00030004
60001ad8:	70000000 	.word	0x70000000
60001adc:	70000000 	.word	0x70000000
60001ae0:	20008cda 	.word	0x20008cda
60001ae4:	20008c38 	.word	0x20008c38
	FLEXSPI2_IPCR0 = addr;
60001ae8:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001aec:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001af0:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001af2:	4808      	ldr	r0, [pc, #32]	; (60001b14 <configure_external_ram+0x380>)
	FLEXSPI2_IPCR0 = addr;
60001af4:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001af8:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001afc:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b00:	6943      	ldr	r3, [r0, #20]
60001b02:	07db      	lsls	r3, r3, #31
60001b04:	d5fc      	bpl.n	60001b00 <configure_external_ram+0x36c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b06:	2301      	movs	r3, #1
60001b08:	2510      	movs	r5, #16
60001b0a:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
60001b0e:	6143      	str	r3, [r0, #20]
			external_psram_size = 16;
60001b10:	e79c      	b.n	60001a4c <configure_external_ram+0x2b8>
60001b12:	bf00      	nop
60001b14:	402a4000 	.word	0x402a4000

60001b18 <usb_pll_start>:
{
60001b18:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001b1a:	4a15      	ldr	r2, [pc, #84]	; (60001b70 <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001b1c:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001b1e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001b22:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001b26:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001b2a:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001b2e:	f243 0042 	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001b32:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001b34:	f013 0f02 	tst.w	r3, #2
60001b38:	d10e      	bne.n	60001b58 <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001b3a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
60001b3e:	d00f      	beq.n	60001b60 <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001b40:	f413 5f80 	tst.w	r3, #4096	; 0x1000
60001b44:	d00e      	beq.n	60001b64 <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001b46:	2b00      	cmp	r3, #0
60001b48:	daf3      	bge.n	60001b32 <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001b4a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
60001b4e:	d10b      	bne.n	60001b68 <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001b50:	065b      	lsls	r3, r3, #25
60001b52:	d50b      	bpl.n	60001b6c <usb_pll_start+0x54>
}
60001b54:	bcf0      	pop	{r4, r5, r6, r7}
60001b56:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001b58:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001b5a:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001b5c:	6190      	str	r0, [r2, #24]
			continue;
60001b5e:	e7e8      	b.n	60001b32 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001b60:	6155      	str	r5, [r2, #20]
			continue;
60001b62:	e7e6      	b.n	60001b32 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001b64:	6156      	str	r6, [r2, #20]
			continue;
60001b66:	e7e4      	b.n	60001b32 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001b68:	6191      	str	r1, [r2, #24]
			continue;
60001b6a:	e7e2      	b.n	60001b32 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001b6c:	6157      	str	r7, [r2, #20]
			continue;
60001b6e:	e7e0      	b.n	60001b32 <usb_pll_start+0x1a>
60001b70:	400d8000 	.word	0x400d8000

60001b74 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001b74:	4a3f      	ldr	r2, [pc, #252]	; (60001c74 <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001b76:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001b78:	493f      	ldr	r1, [pc, #252]	; (60001c78 <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001b7a:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001b7e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001b82:	f04f 0c00 	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001b86:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 60001c7c <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001b8a:	f023 0301 	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001b8e:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 60001c80 <tempmon_init+0x10c>
{
60001b92:	b430      	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001b94:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001b98:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60001b9c:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001ba0:	4d38      	ldr	r5, [pc, #224]	; (60001c84 <tempmon_init+0x110>)
60001ba2:	b2cb      	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001ba4:	4c38      	ldr	r4, [pc, #224]	; (60001c88 <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001ba6:	4839      	ldr	r0, [pc, #228]	; (60001c8c <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001ba8:	602b      	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001baa:	ee07 3a90 	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001bae:	0d0b      	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001bb0:	f3c1 210b 	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001bb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001bb8:	ee06 3a90 	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001bbc:	ee07 1a10 	vmov	s14, r1
60001bc0:	4b33      	ldr	r3, [pc, #204]	; (60001c90 <tempmon_init+0x11c>)
60001bc2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001bc6:	6021      	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001bc8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001bcc:	4931      	ldr	r1, [pc, #196]	; (60001c94 <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bce:	ee37 6ac6 	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bd2:	ee37 5ac5 	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001bd6:	ee76 6ac7 	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001bda:	ee77 7ae5 	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bde:	ee26 6a26 	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001be2:	edc3 6a00 	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001be6:	ee25 5a26 	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001bea:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bee:	ee67 4aa6 	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001bf2:	edc0 7a00 	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bf6:	eec6 5a27 	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001bfa:	4827      	ldr	r0, [pc, #156]	; (60001c98 <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bfc:	ee85 6a27 	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c00:	eec4 6aa7 	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c04:	ee75 5a87 	vadd.f32	s11, s11, s14
60001c08:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c0c:	ee36 6a07 	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c10:	ee15 4a90 	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c14:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c18:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c1c:	ee76 7a87 	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c20:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c24:	ee16 3a10 	vmov	r3, s12
60001c28:	f8d2 4190 	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c30:	ea01 4103 	and.w	r1, r1, r3, lsl #16
60001c34:	4321      	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c36:	ee17 3a90 	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c3a:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001c3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
60001c42:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
60001c46:	430b      	orrs	r3, r1
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001c48:	4914      	ldr	r1, [pc, #80]	; (60001c9c <tempmon_init+0x128>)
60001c4a:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001c4e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
60001c52:	f043 0302 	orr.w	r3, r3, #2
60001c56:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
60001c5a:	4b11      	ldr	r3, [pc, #68]	; (60001ca0 <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001c5c:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
60001c60:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001c64:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001c68:	2201      	movs	r2, #1
}
60001c6a:	bc30      	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001c6c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
60001c70:	4770      	bx	lr
60001c72:	bf00      	nop
60001c74:	400d8100 	.word	0x400d8100
60001c78:	401f4400 	.word	0x401f4400
60001c7c:	42aa0000 	.word	0x42aa0000
60001c80:	42b40000 	.word	0x42b40000
60001c84:	20008ca0 	.word	0x20008ca0
60001c88:	20008c9c 	.word	0x20008c9c
60001c8c:	20008ca4 	.word	0x20008ca4
60001c90:	20008ca8 	.word	0x20008ca8
60001c94:	0fff0000 	.word	0x0fff0000
60001c98:	e000e400 	.word	0xe000e400
60001c9c:	20008400 	.word	0x20008400
60001ca0:	00001cfd 	.word	0x00001cfd

60001ca4 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001ca4:	4b31      	ldr	r3, [pc, #196]	; (60001d6c <usb_init+0xc8>)
60001ca6:	f640 7261 	movw	r2, #3937	; 0xf61
{
60001caa:	b510      	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001cac:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001cb0:	f240 4404 	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
60001cb4:	f000 f8d4 	bl	60001e60 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001cb8:	4a2d      	ldr	r2, [pc, #180]	; (60001d70 <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
60001cba:	492e      	ldr	r1, [pc, #184]	; (60001d74 <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001cbc:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001cc0:	482d      	ldr	r0, [pc, #180]	; (60001d78 <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001cc2:	f043 0303 	orr.w	r3, r3, #3
60001cc6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001cca:	4b2c      	ldr	r3, [pc, #176]	; (60001d7c <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
60001ccc:	f8c1 4160 	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001cd0:	6802      	ldr	r2, [r0, #0]
60001cd2:	421a      	tst	r2, r3
60001cd4:	d103      	bne.n	60001cde <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
60001cd6:	f8d1 31a8 	ldr.w	r3, [r1, #424]	; 0x1a8
60001cda:	079a      	lsls	r2, r3, #30
60001cdc:	d01b      	beq.n	60001d16 <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001cde:	4a25      	ldr	r2, [pc, #148]	; (60001d74 <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001ce0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
60001ce4:	4b24      	ldr	r3, [pc, #144]	; (60001d78 <usb_init+0xd4>)
60001ce6:	6359      	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001ce8:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001cec:	f043 0302 	orr.w	r3, r3, #2
60001cf0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001cf4:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001cf8:	079b      	lsls	r3, r3, #30
60001cfa:	d4fb      	bmi.n	60001cf4 <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001cfc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
60001d00:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001d04:	4b1c      	ldr	r3, [pc, #112]	; (60001d78 <usb_init+0xd4>)
60001d06:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001d0a:	f8c1 028c 	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001d0e:	2019      	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001d10:	639a      	str	r2, [r3, #56]	; 0x38
		delay(25);
60001d12:	f000 f8b1 	bl	60001e78 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001d16:	4a18      	ldr	r2, [pc, #96]	; (60001d78 <usb_init+0xd4>)
60001d18:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001d1c:	4c15      	ldr	r4, [pc, #84]	; (60001d74 <usb_init+0xd0>)
	USBPHY1_PWD = 0;
60001d1e:	2100      	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001d20:	6390      	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001d22:	200a      	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d24:	4b16      	ldr	r3, [pc, #88]	; (60001d80 <usb_init+0xdc>)
	USBPHY1_PWD = 0;
60001d26:	6011      	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d28:	f44f 7220 	mov.w	r2, #640	; 0x280
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001d2c:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d30:	4618      	mov	r0, r3
60001d32:	f000 f88d 	bl	60001e50 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
60001d36:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d3a:	4603      	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001d3c:	f44f 0081 	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001d40:	f240 1143 	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001d44:	6018      	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001d46:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
60001d4a:	641a      	str	r2, [r3, #64]	; 0x40
60001d4c:	4b0d      	ldr	r3, [pc, #52]	; (60001d84 <usb_init+0xe0>)
60001d4e:	4a0e      	ldr	r2, [pc, #56]	; (60001d88 <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001d50:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
60001d54:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001d58:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
60001d5c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001d60:	2301      	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001d62:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
60001d66:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
60001d6a:	bd10      	pop	{r4, pc}
60001d6c:	400d8000 	.word	0x400d8000
60001d70:	400fc000 	.word	0x400fc000
60001d74:	402e0000 	.word	0x402e0000
60001d78:	400d9000 	.word	0x400d9000
60001d7c:	001e1c00 	.word	0x001e1c00
60001d80:	20000000 	.word	0x20000000
60001d84:	20008400 	.word	0x20008400
60001d88:	00001ee5 	.word	0x00001ee5

60001d8c <_reboot_Teensyduino_>:


FLASHMEM __attribute__((noinline)) void _reboot_Teensyduino_(void)
{
60001d8c:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60001d8e:	4b0e      	ldr	r3, [pc, #56]	; (60001dc8 <_reboot_Teensyduino_+0x3c>)
60001d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
60001d92:	079b      	lsls	r3, r3, #30
60001d94:	d400      	bmi.n	60001d98 <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
60001d96:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60001d98:	b672      	cpsid	i
		USB1_USBCMD = 0;
60001d9a:	4b0c      	ldr	r3, [pc, #48]	; (60001dcc <_reboot_Teensyduino_+0x40>)
60001d9c:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
60001d9e:	4a0c      	ldr	r2, [pc, #48]	; (60001dd0 <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
60001da0:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001da4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001da8:	490a      	ldr	r1, [pc, #40]	; (60001dd4 <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001daa:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001dae:	6411      	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001db0:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001db2:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001db6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
60001dba:	4807      	ldr	r0, [pc, #28]	; (60001dd8 <_reboot_Teensyduino_+0x4c>)
60001dbc:	4a07      	ldr	r2, [pc, #28]	; (60001ddc <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001dbe:	69db      	ldr	r3, [r3, #28]
		*p = 0xEB120000;
60001dc0:	6002      	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001dc2:	689b      	ldr	r3, [r3, #8]
60001dc4:	4798      	blx	r3
	}
	__builtin_unreachable();
60001dc6:	bf00      	nop
60001dc8:	401f4400 	.word	0x401f4400
60001dcc:	402e0000 	.word	0x402e0000
60001dd0:	400ac000 	.word	0x400ac000
60001dd4:	00200003 	.word	0x00200003
60001dd8:	20208000 	.word	0x20208000
60001ddc:	eb120000 	.word	0xeb120000

60001de0 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001de0:	4b10      	ldr	r3, [pc, #64]	; (60001e24 <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001de2:	20a0      	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001de4:	4a10      	ldr	r2, [pc, #64]	; (60001e28 <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001de6:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001de8:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
{
60001dec:	b410      	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001dee:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001df0:	f240 6437 	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001df4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001df6:	f441 7140 	orr.w	r1, r1, #768	; 0x300
60001dfa:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001dfc:	6454      	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001dfe:	6490      	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
60001e00:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001e02:	061b      	lsls	r3, r3, #24
60001e04:	d4fc      	bmi.n	60001e00 <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001e06:	4a09      	ldr	r2, [pc, #36]	; (60001e2c <analog_init+0x4c>)
60001e08:	f240 6137 	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001e0c:	23a0      	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001e0e:	6451      	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001e10:	6493      	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
60001e12:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001e14:	f013 0380 	ands.w	r3, r3, #128	; 0x80
60001e18:	d1fb      	bne.n	60001e12 <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
60001e1a:	4a05      	ldr	r2, [pc, #20]	; (60001e30 <analog_init+0x50>)
60001e1c:	7013      	strb	r3, [r2, #0]
}
60001e1e:	f85d 4b04 	ldr.w	r4, [sp], #4
60001e22:	4770      	bx	lr
60001e24:	400fc000 	.word	0x400fc000
60001e28:	400c4000 	.word	0x400c4000
60001e2c:	400c8000 	.word	0x400c8000
60001e30:	20008cd9 	.word	0x20008cd9

60001e34 <_init>:
60001e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60001e36:	bf00      	nop
60001e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
60001e3a:	bc08      	pop	{r3}
60001e3c:	469e      	mov	lr, r3
60001e3e:	4770      	bx	lr

60001e40 <____libc_init_array_veneer>:
60001e40:	f85f f000 	ldr.w	pc, [pc]	; 60001e44 <____libc_init_array_veneer+0x4>
60001e44:	000056f9 	.word	0x000056f9

60001e48 <__main_veneer>:
60001e48:	f85f f000 	ldr.w	pc, [pc]	; 60001e4c <__main_veneer+0x4>
60001e4c:	000017fd 	.word	0x000017fd

60001e50 <__memset_veneer>:
60001e50:	f85f f000 	ldr.w	pc, [pc]	; 60001e54 <__memset_veneer+0x4>
60001e54:	00005481 	.word	0x00005481

60001e58 <__set_arm_clock_veneer>:
60001e58:	f85f f000 	ldr.w	pc, [pc]	; 60001e5c <__set_arm_clock_veneer+0x4>
60001e5c:	00002f59 	.word	0x00002f59

60001e60 <__usb_init_serialnumber_veneer>:
60001e60:	f85f f000 	ldr.w	pc, [pc]	; 60001e64 <__usb_init_serialnumber_veneer+0x4>
60001e64:	00002655 	.word	0x00002655

60001e68 <__pwm_init_veneer>:
60001e68:	f85f f000 	ldr.w	pc, [pc]	; 60001e6c <__pwm_init_veneer+0x4>
60001e6c:	00001a21 	.word	0x00001a21

60001e70 <__sm_set_pool_veneer>:
60001e70:	f85f f000 	ldr.w	pc, [pc]	; 60001e74 <__sm_set_pool_veneer+0x4>
60001e74:	000032b9 	.word	0x000032b9

60001e78 <__delay_veneer>:
60001e78:	f85f f000 	ldr.w	pc, [pc]	; 60001e7c <__delay_veneer+0x4>
60001e7c:	00001491 	.word	0x00001491

60001e80 <__frame_dummy_init_array_entry>:
60001e80:	000000e5                                ....

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <flash_sector_not_erased>:
{
  int error = 0;
  uint32_t address = start;
  while (address < (start + size) && error == 0) { 
    if ((address & (FLASH_SECTOR_SIZE - 1)) == 0) {
      if (flash_sector_not_erased( address )) {
      20:	f420 607f 	bic.w	r0, r0, #4080	; 0xff0
      24:	f020 000f 	bic.w	r0, r0, #15
        #elif defined(KINETISK) || defined(KINETISL)
          error = flash_erase_sector( address, 0 );
	#endif
      }
    }
    address += FLASH_SECTOR_SIZE;
      28:	f500 5280 	add.w	r2, r0, #4096	; 0x1000
          eepromemu_flash_erase_sector( (void*)address );
      2c:	6803      	ldr	r3, [r0, #0]
      2e:	3004      	adds	r0, #4
  while (address < (start + size) && error == 0) { 
      30:	3301      	adds	r3, #1
      32:	d103      	bne.n	3c <_teensy_model_identifier+0x17>
  }
  return( error );
}
      34:	4290      	cmp	r0, r2
      36:	d1f9      	bne.n	2c <_teensy_model_identifier+0x7>
	SNVS_LPSRTCMR = t >> 17;
	// start the SRTC
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
	// start the RTC and sync it to the SRTC
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
      38:	2000      	movs	r0, #0
      3a:	4770      	bx	lr
      3c:	2001      	movs	r0, #1
      3e:	4770      	bx	lr

00000040 <flash_move>:
}
      40:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
      44:	4606      	mov	r6, r0
      46:	460d      	mov	r5, r1
		return 0;
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
      48:	4690      	mov	r8, r2
      4a:	2400      	movs	r4, #0
      4c:	4544      	cmp	r4, r8
      4e:	d214      	bcs.n	7a <flash_move+0x3a>
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
}
      50:	19a7      	adds	r7, r4, r6
      52:	f3c7 030b 	ubfx	r3, r7, #0, #12
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      56:	b933      	cbnz	r3, 66 <flash_move+0x26>
      58:	4638      	mov	r0, r7
      5a:	f7ff ffe1 	bl	20 <flash_sector_not_erased>
}
      5e:	b110      	cbz	r0, 66 <flash_move+0x26>
      60:	4638      	mov	r0, r7
      62:	f001 fb6f 	bl	1744 <eepromemu_flash_erase_sector>
      66:	2204      	movs	r2, #4
      68:	5963      	ldr	r3, [r4, r5]
      6a:	4638      	mov	r0, r7
    offset += FLASH_WRITE_SIZE;
      6c:	3404      	adds	r4, #4
      eepromemu_flash_write( (void*)addr, &value, 4 );
      6e:	eb0d 0102 	add.w	r1, sp, r2
      uint32_t value = *(uint32_t *)(src + offset);     
      72:	9301      	str	r3, [sp, #4]
      eepromemu_flash_write( (void*)addr, &value, 4 );
      74:	f001 faf0 	bl	1658 <eepromemu_flash_write>
    offset += FLASH_WRITE_SIZE;
      78:	e7e8      	b.n	4c <flash_move+0xc>
  if (IN_FLASH(src)) {
      7a:	f105 4520 	add.w	r5, r5, #2684354560	; 0xa0000000
      7e:	f5b5 0f00 	cmp.w	r5, #8388608	; 0x800000
      82:	d208      	bcs.n	96 <flash_move+0x56>
    while (offset < (FLASH_SIZE - FLASH_RESERVE) && error == 0) {
      84:	4d0c      	ldr	r5, [pc, #48]	; (b8 <flash_move+0x78>)
      86:	e004      	b.n	92 <flash_move+0x52>
      addr = dst + offset;
      88:	19a1      	adds	r1, r4, r6
      if ((addr & (FLASH_SECTOR_SIZE - 1)) == 0) {
      8a:	f3c1 030b 	ubfx	r3, r1, #0, #12
      8e:	b143      	cbz	r3, a2 <flash_move+0x62>
      offset += FLASH_WRITE_SIZE;
      90:	3404      	adds	r4, #4
    while (offset < (FLASH_SIZE - FLASH_RESERVE) && error == 0) {
      92:	42ac      	cmp	r4, r5
      94:	d3f8      	bcc.n	88 <flash_move+0x48>
  REBOOT;
      96:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
      9a:	4a08      	ldr	r2, [pc, #32]	; (bc <flash_move+0x7c>)
      9c:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
      a0:	e008      	b.n	b4 <flash_move+0x74>
        if (flash_sector_not_erased( addr )) {
      a2:	4608      	mov	r0, r1
      a4:	f7ff ffbc 	bl	20 <flash_sector_not_erased>
      a8:	2800      	cmp	r0, #0
      aa:	d0f1      	beq.n	90 <flash_move+0x50>
            eepromemu_flash_erase_sector( (void*)addr );
      ac:	4608      	mov	r0, r1
      ae:	f001 fb49 	bl	1744 <eepromemu_flash_erase_sector>
      b2:	e7ed      	b.n	90 <flash_move+0x50>
  for (;;) {}
      b4:	e7fe      	b.n	b4 <flash_move+0x74>
      b6:	bf00      	nop
      b8:	007fc000 	.word	0x007fc000
      bc:	05fa0004 	.word	0x05fa0004

000000c0 <register_tm_clones>:
void HardwareSerialIMXRT::setRX(uint8_t pin)
{
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
	if (pin != hardware->rx_pins[rx_pin_index_].pin) {
		for (uint8_t rx_pin_new_index = 0; rx_pin_new_index < cnt_rx_pins; rx_pin_new_index++) {
			if (pin == hardware->rx_pins[rx_pin_new_index].pin) {
      c0:	4805      	ldr	r0, [pc, #20]	; (d8 <register_tm_clones+0x18>)
      c2:	4b06      	ldr	r3, [pc, #24]	; (dc <register_tm_clones+0x1c>)
      c4:	1a1b      	subs	r3, r3, r0
      c6:	0fd9      	lsrs	r1, r3, #31
      c8:	eb01 01a3 	add.w	r1, r1, r3, asr #2
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
	p->SM[submodule].VAL1 = newdiv - 1;
	p->SM[submodule].VAL0 = (p->SM[submodule].VAL0 * newdiv) / olddiv;
	p->SM[submodule].VAL3 = (p->SM[submodule].VAL3 * newdiv) / olddiv;
	p->SM[submodule].VAL5 = (p->SM[submodule].VAL5 * newdiv) / olddiv;
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
      cc:	1049      	asrs	r1, r1, #1
      ce:	d002      	beq.n	d6 <register_tm_clones+0x16>
}
      d0:	4b03      	ldr	r3, [pc, #12]	; (e0 <register_tm_clones+0x20>)
	while (newdiv > 65535 && prescale < 7) {
      d2:	b103      	cbz	r3, d6 <register_tm_clones+0x16>
      d4:	4718      	bx	r3
      d6:	4770      	bx	lr
      d8:	200086c0 	.word	0x200086c0
		buf[offset] = data;
		p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		eepromemu_flash_erase_sector(p);
		index = 0;
		for (i=0; i < 256; i++) {
			if (buf[i] != 0xFF) {
      dc:	200086c0 	.word	0x200086c0
				// TODO: combining these to larger write
				// would (probably) be more efficient
				uint16_t newval = i | (buf[i] << 8);
      e0:	00000000 	.word	0x00000000

000000e4 <frame_dummy>:
      e4:	b508      	push	{r3, lr}
      e6:	4b05      	ldr	r3, [pc, #20]	; (fc <frame_dummy+0x18>)
				eepromemu_flash_write(p + index, &newval, 2);
      e8:	b11b      	cbz	r3, f2 <frame_dummy+0xe>
      ea:	4905      	ldr	r1, [pc, #20]	; (100 <frame_dummy+0x1c>)
		for (i=0; i < 256; i++) {
      ec:	4805      	ldr	r0, [pc, #20]	; (104 <frame_dummy+0x20>)
      ee:	f3af 8000 	nop.w
				index = index + 1;
			}
		}
		sector_index[sector] = index;
      f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	}
}
      f6:	f7ff bfe3 	b.w	c0 <register_tm_clones>
		uint16_t newdata = offset | (data << 8);
      fa:	bf00      	nop
      fc:	00000000 	.word	0x00000000
		eepromemu_flash_write(end, &newdata, 2);
     100:	20008c4c 	.word	0x20008c4c
		uint16_t newdata = offset | (data << 8);
     104:	60019400 	.word	0x60019400

00000108 <usb_serial_class::available()>:
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
	// Returns the number of bytes which have been received from your PC and
	// can be fetched using Serial.read() or Serial.readBytes().
        virtual int available() { return usb_serial_available(); }
     108:	f002 bd9e 	b.w	2c48 <usb_serial_available>

0000010c <usb_serial_class::read()>:
	// Reads the next received byte, or returns -1 if nothing has been received
	// from your PC.
        virtual int read() { return usb_serial_getchar(); }
     10c:	f002 bde0 	b.w	2cd0 <usb_serial_getchar>

00000110 <hex_info_reset(hex_info_t*, char*)>:
}
     110:	2300      	movs	r3, #0
     112:	f04f 32ff 	mov.w	r2, #4294967295
	if (!initialized) eeprom_initialize();
     116:	e9c0 1300 	strd	r1, r3, [r0]
     11a:	e9c0 3302 	strd	r3, r3, [r0, #8]
	uint8_t olddata=0xFF;
     11e:	e9c0 3204 	strd	r3, r2, [r0, #16]
     122:	e9c0 3306 	strd	r3, r3, [r0, #24]
     126:	6203      	str	r3, [r0, #32]
     128:	4770      	bx	lr
     12a:	bf00      	nop

0000012c <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)>:
     12c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     130:	2400      	movs	r4, #0
     132:	b084      	sub	sp, #16
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
	mask = p->mask;
     134:	601c      	str	r4, [r3, #0]
	if (pinmode & mask) {
     136:	f890 c000 	ldrb.w	ip, [r0]
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     13a:	f1bc 0f3a 	cmp.w	ip, #58	; 0x3a
     13e:	d111      	bne.n	164 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0x38>
     140:	4605      	mov	r5, r0
     142:	461f      	mov	r7, r3
     144:	4688      	mov	r8, r1
     146:	4616      	mov	r6, r2
     148:	f005 fc7a 	bl	5a40 <strlen>
     14c:	280a      	cmp	r0, #10
     14e:	d803      	bhi.n	158 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0x2c>
     150:	4620      	mov	r0, r4
     152:	b004      	add	sp, #16
     154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     158:	aa01      	add	r2, sp, #4
     15a:	4929      	ldr	r1, [pc, #164]	; (200 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0xd4>)
			remainder -= n; 
		}
		count += write(buf, count);
	}
	return count;
}
     15c:	1c68      	adds	r0, r5, #1
     15e:	f005 f839 	bl	51d4 <sscanf>
     162:	b918      	cbnz	r0, 16c <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0x40>
  out->printf("calling flash_move() to load new firmware...\n");
  out->flush();

  flash_move(FLASH_BASE_ADDR, buffer_addr, hex.max - hex.min);
  REBOOT; // should not return
}
     164:	2000      	movs	r0, #0
      out->printf("abort - invalid hex code %u\n", hex.code);
     166:	b004      	add	sp, #16
     168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     16c:	4628      	mov	r0, r5
     16e:	f005 fc67 	bl	5a40 <strlen>
}
     172:	9b01      	ldr	r3, [sp, #4]
     174:	005b      	lsls	r3, r3, #1
        out->printf("abort - max address %08lX too large\n", (unsigned long)hex.max);
     176:	330b      	adds	r3, #11
     178:	4298      	cmp	r0, r3
     17a:	d3f3      	bcc.n	164 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0x38>
     17c:	4632      	mov	r2, r6
     17e:	4921      	ldr	r1, [pc, #132]	; (204 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0xd8>)
}
     180:	1ce8      	adds	r0, r5, #3
     182:	f005 f827 	bl	51d4 <sscanf>
    out->printf("abort - new code missing target ID %s\n", FLASH_ID);
     186:	2800      	cmp	r0, #0
     188:	d0ec      	beq.n	164 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0x38>
}
     18a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
     18c:	1de8      	adds	r0, r5, #7
     18e:	491c      	ldr	r1, [pc, #112]	; (200 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0xd4>)
    out->printf("abort - new code missing target ID %s\n", FLASH_ID);
     190:	f005 f820 	bl	51d4 <sscanf>
     194:	2800      	cmp	r0, #0
     196:	d0e5      	beq.n	164 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0x38>
     198:	9a0a      	ldr	r2, [sp, #40]	; 0x28
     19a:	3509      	adds	r5, #9
     19c:	9901      	ldr	r1, [sp, #4]
     19e:	7814      	ldrb	r4, [r2, #0]
     1a0:	6833      	ldr	r3, [r6, #0]
     1a2:	fa54 f481 	uxtab	r4, r4, r1
     1a6:	4e16      	ldr	r6, [pc, #88]	; (200 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0xd4>)
     1a8:	fa54 f483 	uxtab	r4, r4, r3
     1ac:	f3c3 2307 	ubfx	r3, r3, #8, #8
     1b0:	441c      	add	r4, r3
     1b2:	683b      	ldr	r3, [r7, #0]
     1b4:	e012      	b.n	1dc <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0xb0>
     1b6:	4631      	mov	r1, r6
     1b8:	3502      	adds	r5, #2
     1ba:	f005 f80b 	bl	51d4 <sscanf>
     1be:	2800      	cmp	r0, #0
     1c0:	d0d0      	beq.n	164 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0x38>
     1c2:	683b      	ldr	r3, [r7, #0]
     1c4:	9a03      	ldr	r2, [sp, #12]
     1c6:	f808 2003 	strb.w	r2, [r8, r3]
     1ca:	683b      	ldr	r3, [r7, #0]
     1cc:	f818 2003 	ldrb.w	r2, [r8, r3]
    (*num)++;
     1d0:	3301      	adds	r3, #1
    if (*num >= 256) return 0;
     1d2:	2bff      	cmp	r3, #255	; 0xff
    sum += (unsigned)(bytes[*num] & 255);
     1d4:	4414      	add	r4, r2
    (*num)++;
     1d6:	603b      	str	r3, [r7, #0]
    if (*num >= 256) return 0;
     1d8:	d8c4      	bhi.n	164 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0x38>
  while (*num != len) {
     1da:	9901      	ldr	r1, [sp, #4]
     1dc:	428b      	cmp	r3, r1
    if (!sscanf(ptr, "%02x", &temp)) return 0;
     1de:	4628      	mov	r0, r5
     1e0:	aa03      	add	r2, sp, #12
  while (*num != len) {
     1e2:	d1e8      	bne.n	1b6 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0x8a>
  if (!sscanf(ptr, "%02x", &cksum)) return 0;
     1e4:	aa02      	add	r2, sp, #8
     1e6:	4906      	ldr	r1, [pc, #24]	; (200 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0xd4>)
     1e8:	f004 fff4 	bl	51d4 <sscanf>
     1ec:	2800      	cmp	r0, #0
     1ee:	d0b9      	beq.n	164 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0x38>
  if (((sum & 255) + (cksum & 255)) & 255) return 0; // checksum error
     1f0:	9b02      	ldr	r3, [sp, #8]
     1f2:	441c      	add	r4, r3
     1f4:	b2e4      	uxtb	r4, r4
     1f6:	fab4 f084 	clz	r0, r4
     1fa:	0940      	lsrs	r0, r0, #5
     1fc:	e7b3      	b.n	166 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)+0x3a>
     1fe:	bf00      	nop
     200:	20000398 	.word	0x20000398
     204:	200003a0 	.word	0x200003a0

00000208 <process_hex_record(hex_info_t*)>:
  if (hex->code == 0u) { // data
     208:	6882      	ldr	r2, [r0, #8]
int process_hex_record(hex_info_t* hex) {
     20a:	4603      	mov	r3, r0
  if (hex->code == 0u) { // data
     20c:	b992      	cbnz	r2, 234 <process_hex_record(hex_info_t*)+0x2c>
    uint32_t end = hex->base + hex->addr + hex->num;
     20e:	e9d0 1203 	ldrd	r1, r2, [r0, #12]
int process_hex_record(hex_info_t* hex) {
     212:	b410      	push	{r4}
    uint32_t end = hex->base + hex->addr + hex->num;
     214:	685c      	ldr	r4, [r3, #4]
    if (end > hex->max) hex->max = end;
     216:	6980      	ldr	r0, [r0, #24]
    uint32_t end = hex->base + hex->addr + hex->num;
     218:	4422      	add	r2, r4
     21a:	4411      	add	r1, r2
    if (end > hex->max) hex->max = end;
     21c:	4288      	cmp	r0, r1
  return 0;
     21e:	f04f 0000 	mov.w	r0, #0
    if (end > hex->max) hex->max = end;
     222:	bf38      	it	cc
     224:	6199      	strcc	r1, [r3, #24]
    if (beg < hex->min) hex->min = beg;
     226:	6959      	ldr	r1, [r3, #20]
     228:	428a      	cmp	r2, r1
     22a:	d200      	bcs.n	22e <process_hex_record(hex_info_t*)+0x26>
     22c:	615a      	str	r2, [r3, #20]
}
     22e:	f85d 4b04 	ldr.w	r4, [sp], #4
     232:	4770      	bx	lr
  } else if (hex->code == 1u) { // EOF
     234:	3a01      	subs	r2, #1
     236:	2a04      	cmp	r2, #4
     238:	d81d      	bhi.n	276 <process_hex_record(hex_info_t*)+0x6e>
     23a:	e8df f002 	tbb	[pc, r2]
     23e:	0d09      	.short	0x0d09
     240:	151c      	.short	0x151c
     242:	03          	.byte	0x03
     243:	00          	.byte	0x00
    hex->base =  ((uint8_t)hex->data[0] << 24) |
     244:	6802      	ldr	r2, [r0, #0]
  return 0;
     246:	2000      	movs	r0, #0
     248:	6812      	ldr	r2, [r2, #0]
     24a:	ba12      	rev	r2, r2
    hex->base =  ((uint8_t)hex->data[0] << 24) |
     24c:	611a      	str	r2, [r3, #16]
     24e:	4770      	bx	lr
    hex->eof = 1;
     250:	2201      	movs	r2, #1
  return 0;
     252:	2000      	movs	r0, #0
    hex->eof = 1;
     254:	61da      	str	r2, [r3, #28]
     256:	4770      	bx	lr
    hex->base = (((uint8_t)hex->data[0] << 8) | (uint8_t)hex->data[1]) << 4;
     258:	6802      	ldr	r2, [r0, #0]
  return 0;
     25a:	2000      	movs	r0, #0
    hex->base = (((uint8_t)hex->data[0] << 8) | (uint8_t)hex->data[1]) << 4;
     25c:	8812      	ldrh	r2, [r2, #0]
     25e:	ba52      	rev16	r2, r2
     260:	b292      	uxth	r2, r2
     262:	0112      	lsls	r2, r2, #4
     264:	611a      	str	r2, [r3, #16]
     266:	4770      	bx	lr
    hex->base = (((uint8_t)hex->data[0] << 8) | (uint8_t)hex->data[1]) << 16;
     268:	6802      	ldr	r2, [r0, #0]
  return 0;
     26a:	2000      	movs	r0, #0
    hex->base = (((uint8_t)hex->data[0] << 8) | (uint8_t)hex->data[1]) << 16;
     26c:	8812      	ldrh	r2, [r2, #0]
     26e:	ba52      	rev16	r2, r2
     270:	0412      	lsls	r2, r2, #16
     272:	611a      	str	r2, [r3, #16]
     274:	4770      	bx	lr
  if (hex->code == 0u) { // data
     276:	2001      	movs	r0, #1
}
     278:	4770      	bx	lr

			int newPrecision = precision;
			int newDecimalPoint;

			// shift decimal point
			while (newPrecision > 0) {
     27a:	bf00      	nop

0000027c <firmware_buffer_init>:
  *buffer_addr = FLASH_BASE_ADDR + FLASH_SIZE - FLASH_RESERVE - 4;
     27c:	4a13      	ldr	r2, [pc, #76]	; (2cc <firmware_buffer_init+0x50>)
  while (*buffer_addr > 0 && *((uint32_t *)*buffer_addr) == 0xFFFFFFFF)
     27e:	4613      	mov	r3, r2
  *buffer_addr = FLASH_BASE_ADDR + FLASH_SIZE - FLASH_RESERVE - 4;
     280:	6002      	str	r2, [r0, #0]
  while (*buffer_addr > 0 && *((uint32_t *)*buffer_addr) == 0xFFFFFFFF)
     282:	e002      	b.n	28a <firmware_buffer_init+0xe>
    *buffer_addr -= 4;
     284:	3b04      	subs	r3, #4
     286:	6003      	str	r3, [r0, #0]
  while (*buffer_addr > 0 && *((uint32_t *)*buffer_addr) == 0xFFFFFFFF)
     288:	b163      	cbz	r3, 2a4 <firmware_buffer_init+0x28>
     28a:	681a      	ldr	r2, [r3, #0]
     28c:	3201      	adds	r2, #1
     28e:	d0f9      	beq.n	284 <firmware_buffer_init+0x8>
  *buffer_addr += 4; // first address above code
     290:	3304      	adds	r3, #4
  if ((*buffer_addr % FLASH_SECTOR_SIZE) > 0)
     292:	f3c3 020b 	ubfx	r2, r3, #0, #12
  *buffer_addr += 4; // first address above code
     296:	6003      	str	r3, [r0, #0]
  if ((*buffer_addr % FLASH_SECTOR_SIZE) > 0)
     298:	b95a      	cbnz	r2, 2b2 <firmware_buffer_init+0x36>
  *buffer_size = FLASH_BASE_ADDR - *buffer_addr + FLASH_SIZE - FLASH_RESERVE;
     29a:	4a0d      	ldr	r2, [pc, #52]	; (2d0 <firmware_buffer_init+0x54>)
}
     29c:	2001      	movs	r0, #1
  *buffer_size = FLASH_BASE_ADDR - *buffer_addr + FLASH_SIZE - FLASH_RESERVE;
     29e:	1ad2      	subs	r2, r2, r3
     2a0:	600a      	str	r2, [r1, #0]
}
     2a2:	4770      	bx	lr
     2a4:	4a0b      	ldr	r2, [pc, #44]	; (2d4 <firmware_buffer_init+0x58>)
     2a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    *buffer_addr += FLASH_SECTOR_SIZE - (*buffer_addr % FLASH_SECTOR_SIZE);
     2aa:	6003      	str	r3, [r0, #0]
}
     2ac:	2001      	movs	r0, #1
  *buffer_size = FLASH_BASE_ADDR - *buffer_addr + FLASH_SIZE - FLASH_RESERVE;
     2ae:	600a      	str	r2, [r1, #0]
}
     2b0:	4770      	bx	lr
{
     2b2:	b410      	push	{r4}
    *buffer_addr += FLASH_SECTOR_SIZE - (*buffer_addr % FLASH_SECTOR_SIZE);
     2b4:	4c08      	ldr	r4, [pc, #32]	; (2d8 <firmware_buffer_init+0x5c>)
  *buffer_size = FLASH_BASE_ADDR - *buffer_addr + FLASH_SIZE - FLASH_RESERVE;
     2b6:	4a07      	ldr	r2, [pc, #28]	; (2d4 <firmware_buffer_init+0x58>)
    *buffer_addr += FLASH_SECTOR_SIZE - (*buffer_addr % FLASH_SECTOR_SIZE);
     2b8:	401c      	ands	r4, r3
     2ba:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
  *buffer_size = FLASH_BASE_ADDR - *buffer_addr + FLASH_SIZE - FLASH_RESERVE;
     2be:	1b12      	subs	r2, r2, r4
}
     2c0:	f85d 4b04 	ldr.w	r4, [sp], #4
    *buffer_addr += FLASH_SECTOR_SIZE - (*buffer_addr % FLASH_SECTOR_SIZE);
     2c4:	6003      	str	r3, [r0, #0]
}
     2c6:	2001      	movs	r0, #1
  *buffer_size = FLASH_BASE_ADDR - *buffer_addr + FLASH_SIZE - FLASH_RESERVE;
     2c8:	600a      	str	r2, [r1, #0]
}
     2ca:	4770      	bx	lr
     2cc:	607fbffc 	.word	0x607fbffc
     2d0:	607fc000 	.word	0x607fc000
     2d4:	607fb000 	.word	0x607fb000
     2d8:	fffff000 	.word	0xfffff000

000002dc <firmware_buffer_free>:
{
     2dc:	b538      	push	{r3, r4, r5, lr}
  if (IN_FLASH(buffer_addr))
     2de:	f100 4320 	add.w	r3, r0, #2684354560	; 0xa0000000
     2e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
     2e6:	d215      	bcs.n	314 <firmware_buffer_free+0x38>
  while (address < (start + size) && error == 0) { 
     2e8:	1845      	adds	r5, r0, r1
     2ea:	4604      	mov	r4, r0
     2ec:	42a8      	cmp	r0, r5
     2ee:	d307      	bcc.n	300 <firmware_buffer_free+0x24>
}
     2f0:	bd38      	pop	{r3, r4, r5, pc}
          eepromemu_flash_erase_sector( (void*)address );
     2f2:	4620      	mov	r0, r4
     2f4:	f001 fa26 	bl	1744 <eepromemu_flash_erase_sector>
    address += FLASH_SECTOR_SIZE;
     2f8:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
  while (address < (start + size) && error == 0) { 
     2fc:	42ac      	cmp	r4, r5
     2fe:	d2f7      	bcs.n	2f0 <firmware_buffer_free+0x14>
    if ((address & (FLASH_SECTOR_SIZE - 1)) == 0) {
     300:	f3c4 030b 	ubfx	r3, r4, #0, #12
      if (flash_sector_not_erased( address )) {
     304:	4620      	mov	r0, r4
    if ((address & (FLASH_SECTOR_SIZE - 1)) == 0) {
     306:	2b00      	cmp	r3, #0
     308:	d1f6      	bne.n	2f8 <firmware_buffer_free+0x1c>
      if (flash_sector_not_erased( address )) {
     30a:	f7ff fe89 	bl	20 <flash_sector_not_erased>
     30e:	2800      	cmp	r0, #0
     310:	d0f2      	beq.n	2f8 <firmware_buffer_free+0x1c>
     312:	e7ee      	b.n	2f2 <firmware_buffer_free+0x16>
}
     314:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    free( (void*)buffer_addr );
     318:	f003 b996 	b.w	3648 <free>

0000031c <check_flash_id>:
  for (uint32_t i = buffer; i < buffer + size - strlen(FLASH_ID); ++i) {
     31c:	390b      	subs	r1, #11
{
     31e:	b570      	push	{r4, r5, r6, lr}
  for (uint32_t i = buffer; i < buffer + size - strlen(FLASH_ID); ++i) {
     320:	180d      	adds	r5, r1, r0
     322:	42a8      	cmp	r0, r5
     324:	d20e      	bcs.n	344 <check_flash_id+0x28>
     326:	4604      	mov	r4, r0
    if (strncmp((char *)i, FLASH_ID, strlen(FLASH_ID)) == 0)
     328:	4e07      	ldr	r6, [pc, #28]	; (348 <check_flash_id+0x2c>)
     32a:	e001      	b.n	330 <check_flash_id+0x14>
  for (uint32_t i = buffer; i < buffer + size - strlen(FLASH_ID); ++i) {
     32c:	42ac      	cmp	r4, r5
     32e:	d009      	beq.n	344 <check_flash_id+0x28>
    if (strncmp((char *)i, FLASH_ID, strlen(FLASH_ID)) == 0)
     330:	4620      	mov	r0, r4
     332:	220b      	movs	r2, #11
     334:	4631      	mov	r1, r6
  for (uint32_t i = buffer; i < buffer + size - strlen(FLASH_ID); ++i) {
     336:	3401      	adds	r4, #1
    if (strncmp((char *)i, FLASH_ID, strlen(FLASH_ID)) == 0)
     338:	f005 f8f4 	bl	5524 <strncmp>
     33c:	2800      	cmp	r0, #0
     33e:	d1f5      	bne.n	32c <check_flash_id+0x10>
      return 1;
     340:	2001      	movs	r0, #1
}
     342:	bd70      	pop	{r4, r5, r6, pc}
  return 0;
     344:	2000      	movs	r0, #0
}
     346:	bd70      	pop	{r4, r5, r6, pc}
     348:	200057e0 	.word	0x200057e0

0000034c <flash_write_block>:

//******************************************************************************
// take a 32-bit aligned array of 32-bit values and write it to erased flash
//******************************************************************************
int flash_write_block( uint32_t addr, char *data, uint32_t count )
{
     34c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  static uint32_t next_addr = 0;			// expected address
  
  int ret = 0;						// return value
  uint32_t data_i = 0;					// index to data array

  if ((addr % 4) != 0 || (count % 4) != 0) {		// if not 32-bit aligned
     350:	ea40 0302 	orr.w	r3, r0, r2
     354:	079b      	lsls	r3, r3, #30
     356:	d002      	beq.n	35e <flash_write_block+0x12>
    return 1;	// "flash_block align error\n"		//   return error code 1
     358:	2001      	movs	r0, #1
    }
    buf_count = 0;					//   re-init buf count
    addr += FLASH_WRITE_SIZE;				//   advance address
  }  
  return 0;						// return success
}
     35a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (buf_count > 0 && addr != next_addr) {		// if unexpected address   
     35e:	4f15      	ldr	r7, [pc, #84]	; (3b4 <flash_write_block+0x68>)
     360:	4c15      	ldr	r4, [pc, #84]	; (3b8 <flash_write_block+0x6c>)
     362:	683b      	ldr	r3, [r7, #0]
     364:	b113      	cbz	r3, 36c <flash_write_block+0x20>
     366:	6825      	ldr	r5, [r4, #0]
     368:	4285      	cmp	r5, r0
     36a:	d120      	bne.n	3ae <flash_write_block+0x62>
  next_addr = addr + count;				//   compute next address
     36c:	1885      	adds	r5, r0, r2
     36e:	6025      	str	r5, [r4, #0]
  addr -= buf_count;					//   address of data[0]
     370:	1ac5      	subs	r5, r0, r3
  while (data_i < count) {				// while more data
     372:	b1ca      	cbz	r2, 3a8 <flash_write_block+0x5c>
     374:	1e4c      	subs	r4, r1, #1
     376:	f8df 8044 	ldr.w	r8, [pc, #68]	; 3bc <flash_write_block+0x70>
    buf_count = 0;					//   re-init buf count
     37a:	f04f 0900 	mov.w	r9, #0
     37e:	18a6      	adds	r6, r4, r2
     380:	e000      	b.n	384 <flash_write_block+0x38>
    ((char*)&buf)[buf_count++] = data[data_i++];	//   copy a byte to buf
     382:	683b      	ldr	r3, [r7, #0]
     384:	1c59      	adds	r1, r3, #1
     386:	f814 cf01 	ldrb.w	ip, [r4, #1]!
      eepromemu_flash_write((void*)addr,(void*)&buf,4);	//     flash_write()
     38a:	4628      	mov	r0, r5
     38c:	2204      	movs	r2, #4
    if (buf_count < FLASH_WRITE_SIZE) {			//   if buf not complete
     38e:	2903      	cmp	r1, #3
    ((char*)&buf)[buf_count++] = data[data_i++];	//   copy a byte to buf
     390:	6039      	str	r1, [r7, #0]
     392:	f808 c003 	strb.w	ip, [r8, r3]
      eepromemu_flash_write((void*)addr,(void*)&buf,4);	//     flash_write()
     396:	4641      	mov	r1, r8
    if (buf_count < FLASH_WRITE_SIZE) {			//   if buf not complete
     398:	d904      	bls.n	3a4 <flash_write_block+0x58>
    addr += FLASH_WRITE_SIZE;				//   advance address
     39a:	4415      	add	r5, r2
      eepromemu_flash_write((void*)addr,(void*)&buf,4);	//     flash_write()
     39c:	f001 f95c 	bl	1658 <eepromemu_flash_write>
    buf_count = 0;					//   re-init buf count
     3a0:	f8c7 9000 	str.w	r9, [r7]
  while (data_i < count) {				// while more data
     3a4:	42b4      	cmp	r4, r6
     3a6:	d1ec      	bne.n	382 <flash_write_block+0x36>
  return 0;						// return success
     3a8:	2000      	movs	r0, #0
}
     3aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return 2;	// "unexpected address\n"		//   return error code 2   
     3ae:	2002      	movs	r0, #2
     3b0:	e7d3      	b.n	35a <flash_write_block+0xe>
     3b2:	bf00      	nop
     3b4:	20008c20 	.word	0x20008c20
     3b8:	20008c48 	.word	0x20008c48
     3bc:	20008c1c 	.word	0x20008c1c

000003c0 <otaSendLine(char const*)>:
  clearLastError();
  hex_info_reset( &ota.hex, ota.hexData );
}

static void otaSendLine(const char *msg)
{
     3c0:	b510      	push	{r4, lr}
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
     3c2:	4c09      	ldr	r4, [pc, #36]	; (3e8 <otaSendLine(char const*)+0x28>)
     3c4:	b082      	sub	sp, #8
     3c6:	9001      	str	r0, [sp, #4]
     3c8:	f005 fb3a 	bl	5a40 <strlen>
     3cc:	9901      	ldr	r1, [sp, #4]
     3ce:	4602      	mov	r2, r0
     3d0:	4620      	mov	r0, r4
     3d2:	f000 ffeb 	bl	13ac <Print::write(unsigned char const*, unsigned int)>
     3d6:	2202      	movs	r2, #2
     3d8:	4904      	ldr	r1, [pc, #16]	; (3ec <otaSendLine(char const*)+0x2c>)
     3da:	4620      	mov	r0, r4
  otaSerial.print(msg);
  otaSerial.print("\r\n");
}
     3dc:	b002      	add	sp, #8
     3de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     3e2:	f000 bfe3 	b.w	13ac <Print::write(unsigned char const*, unsigned int)>
     3e6:	bf00      	nop
     3e8:	20007b98 	.word	0x20007b98
     3ec:	200003a8 	.word	0x200003a8

000003f0 <setup>:
{
     3f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
		uint32_t millis_begin = systick_millis_count;
     3f4:	4d51      	ldr	r5, [pc, #324]	; (53c <setup+0x14c>)
     3f6:	b083      	sub	sp, #12
     3f8:	4c51      	ldr	r4, [pc, #324]	; (540 <setup+0x150>)
				if (elapsed > 750) break;
     3fa:	f240 28ee 	movw	r8, #750	; 0x2ee
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     3fe:	4f51      	ldr	r7, [pc, #324]	; (544 <setup+0x154>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     400:	f8df 9184 	ldr.w	r9, [pc, #388]	; 588 <setup+0x198>
		uint32_t millis_begin = systick_millis_count;
     404:	682e      	ldr	r6, [r5, #0]
		yield();
     406:	f002 fd07 	bl	2e18 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     40a:	7823      	ldrb	r3, [r4, #0]
     40c:	2b00      	cmp	r3, #0
     40e:	f000 8081 	beq.w	514 <setup+0x124>
     412:	783b      	ldrb	r3, [r7, #0]
     414:	07da      	lsls	r2, r3, #31
     416:	d57d      	bpl.n	514 <setup+0x124>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     418:	682b      	ldr	r3, [r5, #0]
     41a:	f8d9 2000 	ldr.w	r2, [r9]
     41e:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     420:	2b0e      	cmp	r3, #14
     422:	d977      	bls.n	514 <setup+0x124>
     424:	682e      	ldr	r6, [r5, #0]
     426:	4f47      	ldr	r7, [pc, #284]	; (544 <setup+0x154>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     428:	f8df 815c 	ldr.w	r8, [pc, #348]	; 588 <setup+0x198>
		yield();
     42c:	f002 fcf4 	bl	2e18 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     430:	7823      	ldrb	r3, [r4, #0]
     432:	2b00      	cmp	r3, #0
     434:	d078      	beq.n	528 <setup+0x138>
     436:	783b      	ldrb	r3, [r7, #0]
     438:	07db      	lsls	r3, r3, #31
     43a:	d575      	bpl.n	528 <setup+0x138>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     43c:	682b      	ldr	r3, [r5, #0]
     43e:	f8d8 2000 	ldr.w	r2, [r8]
     442:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     444:	2b0e      	cmp	r3, #14
     446:	d96f      	bls.n	528 <setup+0x138>
  otaSerial.begin(OTA_BAUD);
     448:	2200      	movs	r2, #0
     44a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
     44e:	483e      	ldr	r0, [pc, #248]	; (548 <setup+0x158>)
     450:	f000 fcde 	bl	e10 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)>
  pinMode( led, OUTPUT );
     454:	2101      	movs	r1, #1
     456:	200d      	movs	r0, #13
  Serial.printf( "%s - %s %s\n", FLASHERX_VERSION, __DATE__, __TIME__ );
     458:	4c3c      	ldr	r4, [pc, #240]	; (54c <setup+0x15c>)
  pinMode( led, OUTPUT );
     45a:	f001 f897 	bl	158c <pinMode>
  digitalWrite( led, HIGH );
     45e:	2101      	movs	r1, #1
     460:	200d      	movs	r0, #13
     462:	f001 f869 	bl	1538 <digitalWrite>
  delay(200);
     466:	20c8      	movs	r0, #200	; 0xc8
     468:	f001 f812 	bl	1490 <delay>
  digitalWrite( led, LOW );
     46c:	2100      	movs	r1, #0
     46e:	200d      	movs	r0, #13
     470:	f001 f862 	bl	1538 <digitalWrite>
  Serial.printf( "%s - %s %s\n", FLASHERX_VERSION, __DATE__, __TIME__ );
     474:	4b36      	ldr	r3, [pc, #216]	; (550 <setup+0x160>)
     476:	4a37      	ldr	r2, [pc, #220]	; (554 <setup+0x164>)
     478:	9400      	str	r4, [sp, #0]
  Serial.printf( "target = %s (%dK flash in %dK sectors)\n",
     47a:	2404      	movs	r4, #4
  Serial.printf( "%s - %s %s\n", FLASHERX_VERSION, __DATE__, __TIME__ );
     47c:	4936      	ldr	r1, [pc, #216]	; (558 <setup+0x168>)
     47e:	4837      	ldr	r0, [pc, #220]	; (55c <setup+0x16c>)
     480:	f000 ffe4 	bl	144c <Print::printf(char const*, ...)>
  Serial.printf( "WARNING: this can ruin your device!\n" );
     484:	4936      	ldr	r1, [pc, #216]	; (560 <setup+0x170>)
     486:	4835      	ldr	r0, [pc, #212]	; (55c <setup+0x16c>)
     488:	f000 ffe0 	bl	144c <Print::printf(char const*, ...)>
  Serial.printf( "target = %s (%dK flash in %dK sectors)\n",
     48c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     490:	4a34      	ldr	r2, [pc, #208]	; (564 <setup+0x174>)
     492:	4935      	ldr	r1, [pc, #212]	; (568 <setup+0x178>)
     494:	9400      	str	r4, [sp, #0]
     496:	4831      	ldr	r0, [pc, #196]	; (55c <setup+0x16c>)
     498:	f000 ffd8 	bl	144c <Print::printf(char const*, ...)>
  Serial.printf( "[FlasherX] OTA serial ready @%lu baud\n", (unsigned long)OTA_BAUD );
     49c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
     4a0:	4932      	ldr	r1, [pc, #200]	; (56c <setup+0x17c>)
     4a2:	482e      	ldr	r0, [pc, #184]	; (55c <setup+0x16c>)
     4a4:	f000 ffd2 	bl	144c <Print::printf(char const*, ...)>
  Serial.printf( "[FlasherX] FW_VERSION: %s\n", FW_VERSION );
     4a8:	4a31      	ldr	r2, [pc, #196]	; (570 <setup+0x180>)
     4aa:	4932      	ldr	r1, [pc, #200]	; (574 <setup+0x184>)
     4ac:	482b      	ldr	r0, [pc, #172]	; (55c <setup+0x16c>)
     4ae:	f000 ffcd 	bl	144c <Print::printf(char const*, ...)>
     4b2:	2203      	movs	r2, #3
     4b4:	4930      	ldr	r1, [pc, #192]	; (578 <setup+0x188>)
     4b6:	4824      	ldr	r0, [pc, #144]	; (548 <setup+0x158>)
     4b8:	f000 ff78 	bl	13ac <Print::write(unsigned char const*, unsigned int)>
     4bc:	2210      	movs	r2, #16
     4be:	492c      	ldr	r1, [pc, #176]	; (570 <setup+0x180>)
     4c0:	4821      	ldr	r0, [pc, #132]	; (548 <setup+0x158>)
     4c2:	f000 ff73 	bl	13ac <Print::write(unsigned char const*, unsigned int)>
     4c6:	2202      	movs	r2, #2
     4c8:	492c      	ldr	r1, [pc, #176]	; (57c <setup+0x18c>)
     4ca:	481f      	ldr	r0, [pc, #124]	; (548 <setup+0x158>)
     4cc:	f000 ff6e 	bl	13ac <Print::write(unsigned char const*, unsigned int)>
     4d0:	2209      	movs	r2, #9
     4d2:	492b      	ldr	r1, [pc, #172]	; (580 <setup+0x190>)
     4d4:	481c      	ldr	r0, [pc, #112]	; (548 <setup+0x158>)
     4d6:	f000 ff69 	bl	13ac <Print::write(unsigned char const*, unsigned int)>
     4da:	220d      	movs	r2, #13
     4dc:	491d      	ldr	r1, [pc, #116]	; (554 <setup+0x164>)
     4de:	481a      	ldr	r0, [pc, #104]	; (548 <setup+0x158>)
     4e0:	f000 ff64 	bl	13ac <Print::write(unsigned char const*, unsigned int)>
     4e4:	4925      	ldr	r1, [pc, #148]	; (57c <setup+0x18c>)
     4e6:	2202      	movs	r2, #2
     4e8:	4817      	ldr	r0, [pc, #92]	; (548 <setup+0x158>)
     4ea:	f000 ff5f 	bl	13ac <Print::write(unsigned char const*, unsigned int)>
  ota.handshakeReady = false;
     4ee:	4b25      	ldr	r3, [pc, #148]	; (584 <setup+0x194>)
     4f0:	2200      	movs	r2, #0
  hex_info_reset( &ota.hex, ota.hexData );
     4f2:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
     4f6:	f103 0078 	add.w	r0, r3, #120	; 0x78
  ota.handshakeReady = false;
     4fa:	801a      	strh	r2, [r3, #0]
  ota.fatal          = false;
     4fc:	709a      	strb	r2, [r3, #2]
  ota.badLines       = 0;
     4fe:	615a      	str	r2, [r3, #20]
static inline void clearLastError() { ota.lastError[0] = 0; }
     500:	761a      	strb	r2, [r3, #24]
  ota.bufferSize     = 0;
     502:	e9c3 2201 	strd	r2, r2, [r3, #4]
  ota.okLines        = 0;
     506:	e9c3 2203 	strd	r2, r2, [r3, #12]
}
     50a:	b003      	add	sp, #12
     50c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  hex_info_reset( &ota.hex, ota.hexData );
     510:	f7ff bdfe 	b.w	110 <hex_info_reset(hex_info_t*, char*)>
			uint32_t elapsed = systick_millis_count - millis_begin;
     514:	682b      	ldr	r3, [r5, #0]
			if (usb_configuration) {
     516:	7822      	ldrb	r2, [r4, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
     518:	1b9b      	subs	r3, r3, r6
			if (usb_configuration) {
     51a:	b162      	cbz	r2, 536 <setup+0x146>
				if (elapsed > 2000) break;
     51c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
     520:	d880      	bhi.n	424 <setup+0x34>
			yield();
     522:	f002 fc79 	bl	2e18 <yield>
     526:	e76e      	b.n	406 <setup+0x16>
     528:	682b      	ldr	r3, [r5, #0]
  while (!Serial && (millis() - start) < 2000) {}
     52a:	1b9b      	subs	r3, r3, r6
     52c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
     530:	f4ff af7c 	bcc.w	42c <setup+0x3c>
     534:	e788      	b.n	448 <setup+0x58>
				if (elapsed > 750) break;
     536:	4543      	cmp	r3, r8
     538:	d9f3      	bls.n	522 <setup+0x132>
     53a:	e773      	b.n	424 <setup+0x34>
     53c:	20008cb4 	.word	0x20008cb4
     540:	20008ce2 	.word	0x20008ce2
     544:	20008ce1 	.word	0x20008ce1
     548:	20007b98 	.word	0x20007b98
     54c:	200078b4 	.word	0x200078b4
     550:	2000788c 	.word	0x2000788c
     554:	20007898 	.word	0x20007898
     558:	200078a8 	.word	0x200078a8
     55c:	20007b88 	.word	0x20007b88
     560:	200078c0 	.word	0x200078c0
     564:	200057e0 	.word	0x200057e0
     568:	200078e8 	.word	0x200078e8
     56c:	20007910 	.word	0x20007910
     570:	20007938 	.word	0x20007938
     574:	2000794c 	.word	0x2000794c
     578:	20007968 	.word	0x20007968
     57c:	200003a8 	.word	0x200003a8
     580:	2000796c 	.word	0x2000796c
     584:	20008880 	.word	0x20008880
     588:	20008cc4 	.word	0x20008cc4

0000058c <loop>:
{
     58c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return;
  }

  Serial.printf( "[FlasherX] CMD: %s\n", line );

  if (!strncmp( line, "HELLO", 5 )) {
     590:	4db2      	ldr	r5, [pc, #712]	; (85c <loop+0x2d0>)
{
     592:	b087      	sub	sp, #28
      Serial.println( "[FlasherX] HELLO token mismatch" );
    }
    return;
  }

  if (!strcmp( line, "BEGIN HEX" )) { beginHexSession(); return; }
     594:	4eb2      	ldr	r6, [pc, #712]	; (860 <loop+0x2d4>)
  if (!strcmp( line, "END" ))       { finalizeHexSession(); return; }
     596:	4fb3      	ldr	r7, [pc, #716]	; (864 <loop+0x2d8>)
  if (!strcmp( line, "PING" ))      { otaSendLine( "PONG" ); return; }
     598:	f8df 9334 	ldr.w	r9, [pc, #820]	; 8d0 <loop+0x344>

  // --------- UPDATED: VERSION now returns both FW and FlasherX versions -------
  if (!strcmp( line, "VERSION" )) {
     59c:	f8df 8334 	ldr.w	r8, [pc, #820]	; 8d4 <loop+0x348>
  if (!strcmp( line, "BEGIN HEX" )) { beginHexSession(); return; }
     5a0:	f8df b334 	ldr.w	fp, [pc, #820]	; 8d8 <loop+0x34c>
  while (otaSerial.available()) {
     5a4:	48b0      	ldr	r0, [pc, #704]	; (868 <loop+0x2dc>)
     5a6:	f000 fb55 	bl	c54 <HardwareSerialIMXRT::available()>
     5aa:	b1a0      	cbz	r0, 5d6 <loop+0x4a>
    char c = (char)otaSerial.read();
     5ac:	48ae      	ldr	r0, [pc, #696]	; (868 <loop+0x2dc>)
     5ae:	f000 fba3 	bl	cf8 <HardwareSerialIMXRT::read()>
     5b2:	b2c0      	uxtb	r0, r0
    if (c == '\r') continue;
     5b4:	280d      	cmp	r0, #13
     5b6:	d0f5      	beq.n	5a4 <loop+0x18>
    if (c == '\n') {
     5b8:	280a      	cmp	r0, #10
     5ba:	d00f      	beq.n	5dc <loop+0x50>
    else if (len + 1 < sizeof(lineBuf)) {
     5bc:	4aab      	ldr	r2, [pc, #684]	; (86c <loop+0x2e0>)
     5be:	6813      	ldr	r3, [r2, #0]
     5c0:	1c59      	adds	r1, r3, #1
     5c2:	29bf      	cmp	r1, #191	; 0xbf
     5c4:	d8ee      	bhi.n	5a4 <loop+0x18>
      lineBuf[len++] = c;
     5c6:	6011      	str	r1, [r2, #0]
     5c8:	4aa9      	ldr	r2, [pc, #676]	; (870 <loop+0x2e4>)
     5ca:	54d0      	strb	r0, [r2, r3]
  while (otaSerial.available()) {
     5cc:	48a6      	ldr	r0, [pc, #664]	; (868 <loop+0x2dc>)
     5ce:	f000 fb41 	bl	c54 <HardwareSerialIMXRT::available()>
     5d2:	2800      	cmp	r0, #0
     5d4:	d1ea      	bne.n	5ac <loop+0x20>
}
     5d6:	b007      	add	sp, #28
     5d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      lineBuf[len] = '\0';
     5dc:	4ca3      	ldr	r4, [pc, #652]	; (86c <loop+0x2e0>)
     5de:	2100      	movs	r1, #0
     5e0:	4ba3      	ldr	r3, [pc, #652]	; (870 <loop+0x2e4>)
     5e2:	6822      	ldr	r2, [r4, #0]
     5e4:	5499      	strb	r1, [r3, r2]
      if (len > 0) {
     5e6:	b912      	cbnz	r2, 5ee <loop+0x62>
      len = 0;
     5e8:	2300      	movs	r3, #0
     5ea:	6023      	str	r3, [r4, #0]
     5ec:	e7da      	b.n	5a4 <loop+0x18>
  if (!line[0]) return;
     5ee:	781a      	ldrb	r2, [r3, #0]
     5f0:	2a00      	cmp	r2, #0
     5f2:	d0f9      	beq.n	5e8 <loop+0x5c>
  if (line[0] == 'L' && line[1] == ' ') {
     5f4:	2a4c      	cmp	r2, #76	; 0x4c
     5f6:	d103      	bne.n	600 <loop+0x74>
     5f8:	785a      	ldrb	r2, [r3, #1]
     5fa:	2a20      	cmp	r2, #32
     5fc:	f000 81ad 	beq.w	95a <loop+0x3ce>
  Serial.printf( "[FlasherX] CMD: %s\n", line );
     600:	4a9b      	ldr	r2, [pc, #620]	; (870 <loop+0x2e4>)
     602:	499c      	ldr	r1, [pc, #624]	; (874 <loop+0x2e8>)
     604:	489c      	ldr	r0, [pc, #624]	; (878 <loop+0x2ec>)
     606:	f000 ff21 	bl	144c <Print::printf(char const*, ...)>
  if (!strncmp( line, "HELLO", 5 )) {
     60a:	4b99      	ldr	r3, [pc, #612]	; (870 <loop+0x2e4>)
     60c:	681a      	ldr	r2, [r3, #0]
     60e:	42aa      	cmp	r2, r5
     610:	f000 80a0 	beq.w	754 <loop+0x1c8>
  if (!strcmp( line, "BEGIN HEX" )) { beginHexSession(); return; }
     614:	681a      	ldr	r2, [r3, #0]
     616:	42b2      	cmp	r2, r6
     618:	f000 80c5 	beq.w	7a6 <loop+0x21a>
  if (!strcmp( line, "END" ))       { finalizeHexSession(); return; }
     61c:	681a      	ldr	r2, [r3, #0]
     61e:	42ba      	cmp	r2, r7
     620:	d00a      	beq.n	638 <loop+0xac>
  if (!strcmp( line, "PING" ))      { otaSendLine( "PONG" ); return; }
     622:	454a      	cmp	r2, r9
     624:	f000 816d 	beq.w	902 <loop+0x376>
  if (!strcmp( line, "VERSION" )) {
     628:	681a      	ldr	r2, [r3, #0]
     62a:	4542      	cmp	r2, r8
     62c:	f000 8171 	beq.w	912 <loop+0x386>
    otaSerial.print( "FW " );        otaSerial.print( FW_VERSION );        otaSerial.print( "\r\n" );
    otaSerial.print( "FLASHERX " );  otaSerial.print( FLASHERX_VERSION );  otaSerial.print( "\r\n" );
    return;
  }

  otaSendLine( "ERR" );
     630:	4892      	ldr	r0, [pc, #584]	; (87c <loop+0x2f0>)
     632:	f7ff fec5 	bl	3c0 <otaSendLine(char const*)>
     636:	e7d7      	b.n	5e8 <loop+0x5c>
  }
}

static void finalizeHexSession()
{
  if (!ota.inProgress) {
     638:	f8df a278 	ldr.w	sl, [pc, #632]	; 8b4 <loop+0x328>
  if (!strcmp( line, "END" ))       { finalizeHexSession(); return; }
     63c:	2100      	movs	r1, #0
  if (!ota.inProgress) {
     63e:	f89a 3001 	ldrb.w	r3, [sl, #1]
     642:	2b00      	cmp	r3, #0
     644:	f000 8155 	beq.w	8f2 <loop+0x366>
    otaSendLine( "HEX IDLE" );
    return;
  }

  ota.inProgress     = false;
  ota.handshakeReady = false;
     648:	f8aa 1000 	strh.w	r1, [sl]
  digitalWrite( led, LOW );
     64c:	200d      	movs	r0, #13
     64e:	f000 ff73 	bl	1538 <digitalWrite>

  uint32_t payloadBytes = 0;
  if (ota.hex.min != 0xFFFFFFFF && ota.hex.max > ota.hex.min) {
     652:	f8da 308c 	ldr.w	r3, [sl, #140]	; 0x8c
     656:	2100      	movs	r1, #0
     658:	1c5a      	adds	r2, r3, #1
     65a:	f000 81ef 	beq.w	a3c <loop+0x4b0>
     65e:	f8da 2090 	ldr.w	r2, [sl, #144]	; 0x90
     662:	4293      	cmp	r3, r2
     664:	f080 81ea 	bcs.w	a3c <loop+0x4b0>
    payloadBytes = ota.hex.max - ota.hex.min;
     668:	1ad3      	subs	r3, r2, r3
     66a:	9302      	str	r3, [sp, #8]
  }

  bool success = (!ota.fatal && ota.badLines == 0);
     66c:	f89a 3002 	ldrb.w	r3, [sl, #2]
     670:	9303      	str	r3, [sp, #12]
     672:	2b00      	cmp	r3, #0
     674:	f040 81a2 	bne.w	9bc <loop+0x430>
     678:	f8da 3014 	ldr.w	r3, [sl, #20]
     67c:	2b00      	cmp	r3, #0
     67e:	f040 819f 	bne.w	9c0 <loop+0x434>

  if (success && !ota.hex.eof) {
     682:	f8da 2094 	ldr.w	r2, [sl, #148]	; 0x94
     686:	2a00      	cmp	r2, #0
     688:	f000 8258 	beq.w	b3c <loop+0x5b0>
    setLastError( "EOF missing" );
    success = false;
  }
  if (success && ota.bytes == 0) {
     68c:	f8da 300c 	ldr.w	r3, [sl, #12]
     690:	2b00      	cmp	r3, #0
     692:	f000 823f 	beq.w	b14 <loop+0x588>
      success = false;
    }
  }
#endif

  if (success && !check_flash_id( ota.bufferAddr, payloadBytes )) {
     696:	9902      	ldr	r1, [sp, #8]
     698:	f8da 0004 	ldr.w	r0, [sl, #4]
     69c:	f7ff fe3e 	bl	31c <check_flash_id>
     6a0:	2800      	cmp	r0, #0
     6a2:	f000 825f 	beq.w	b64 <loop+0x5d8>
    setLastError( "missing target id" );
    success = false;
  }

  Serial.printf( "[FlasherX] HEX END lines=%d ok=%lu bad=%lu bytes=%lu\n",
     6a6:	f8da 300c 	ldr.w	r3, [sl, #12]
     6aa:	4975      	ldr	r1, [pc, #468]	; (880 <loop+0x2f4>)
     6ac:	9301      	str	r3, [sp, #4]
     6ae:	f8da 3014 	ldr.w	r3, [sl, #20]
     6b2:	4871      	ldr	r0, [pc, #452]	; (878 <loop+0x2ec>)
     6b4:	9300      	str	r3, [sp, #0]
     6b6:	f8da 3010 	ldr.w	r3, [sl, #16]
     6ba:	f8da 2098 	ldr.w	r2, [sl, #152]	; 0x98
     6be:	f000 fec5 	bl	144c <Print::printf(char const*, ...)>
     6c2:	220d      	movs	r2, #13
     6c4:	496f      	ldr	r1, [pc, #444]	; (884 <loop+0x2f8>)
     6c6:	4868      	ldr	r0, [pc, #416]	; (868 <loop+0x2dc>)
     6c8:	f000 fe70 	bl	13ac <Print::write(unsigned char const*, unsigned int)>
	// Print a string
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
	// Print an unsigned number
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	// Print a signed number
	size_t print(int n)				{ return print((long)n); }
     6cc:	f8da 1098 	ldr.w	r1, [sl, #152]	; 0x98
     6d0:	4865      	ldr	r0, [pc, #404]	; (868 <loop+0x2dc>)
     6d2:	f000 fe93 	bl	13fc <Print::print(long)>
							  return write((const uint8_t *)str, strlen(str)); }
     6d6:	2207      	movs	r2, #7
     6d8:	496b      	ldr	r1, [pc, #428]	; (888 <loop+0x2fc>)
     6da:	4863      	ldr	r0, [pc, #396]	; (868 <loop+0x2dc>)
     6dc:	f000 fe66 	bl	13ac <Print::write(unsigned char const*, unsigned int)>
	// Print an unsigned number
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	// Print a signed number
	size_t print(long n);
	// Print an unsigned number
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     6e0:	9b03      	ldr	r3, [sp, #12]
     6e2:	220a      	movs	r2, #10
     6e4:	f8da 100c 	ldr.w	r1, [sl, #12]
     6e8:	485f      	ldr	r0, [pc, #380]	; (868 <loop+0x2dc>)
     6ea:	f000 febd 	bl	1468 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
							  return write((const uint8_t *)str, strlen(str)); }
     6ee:	2202      	movs	r2, #2
     6f0:	4966      	ldr	r1, [pc, #408]	; (88c <loop+0x300>)
     6f2:	485d      	ldr	r0, [pc, #372]	; (868 <loop+0x2dc>)
     6f4:	f000 fe5a 	bl	13ac <Print::write(unsigned char const*, unsigned int)>
     6f8:	2209      	movs	r2, #9
     6fa:	4965      	ldr	r1, [pc, #404]	; (890 <loop+0x304>)
     6fc:	485a      	ldr	r0, [pc, #360]	; (868 <loop+0x2dc>)
     6fe:	f000 fe55 	bl	13ac <Print::write(unsigned char const*, unsigned int)>
    otaSerial.print( ota.hex.lines );
    otaSerial.print( " bytes=" );
    otaSerial.print( ota.bytes );
    otaSerial.print( "\r\n" );
    otaSerial.print( "APPLIED\r\n" );
    otaSerial.flush();
     702:	4859      	ldr	r0, [pc, #356]	; (868 <loop+0x2dc>)
     704:	f000 fb42 	bl	d8c <HardwareSerialIMXRT::flush()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     708:	211a      	movs	r1, #26
     70a:	4862      	ldr	r0, [pc, #392]	; (894 <loop+0x308>)
     70c:	f002 fb06 	bl	2d1c <usb_serial_write>
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
     710:	4859      	ldr	r0, [pc, #356]	; (878 <loop+0x2ec>)
     712:	f000 fe7f 	bl	1414 <Print::println()>

    Serial.println( "[FlasherX] Applying update" );
    flash_move( FLASH_BASE_ADDR, ota.bufferAddr, payloadBytes );
     716:	9a02      	ldr	r2, [sp, #8]
     718:	f8da 1004 	ldr.w	r1, [sl, #4]
     71c:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
     720:	f7ff fc8e 	bl	40 <flash_move>
    REBOOT;
     724:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     728:	4a5b      	ldr	r2, [pc, #364]	; (898 <loop+0x30c>)
     72a:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
  ota.handshakeReady = false;
     72e:	2300      	movs	r3, #0
  hex_info_reset( &ota.hex, ota.hexData );
     730:	495a      	ldr	r1, [pc, #360]	; (89c <loop+0x310>)
  ota.handshakeReady = false;
     732:	f8aa 3000 	strh.w	r3, [sl]
  hex_info_reset( &ota.hex, ota.hexData );
     736:	f1a1 0028 	sub.w	r0, r1, #40	; 0x28
static inline void clearLastError() { ota.lastError[0] = 0; }
     73a:	f88a 3018 	strb.w	r3, [sl, #24]
  ota.fatal          = false;
     73e:	f88a 3002 	strb.w	r3, [sl, #2]
  ota.badLines       = 0;
     742:	f8ca 3014 	str.w	r3, [sl, #20]
  ota.bufferSize     = 0;
     746:	e9ca 3301 	strd	r3, r3, [sl, #4]
  ota.okLines        = 0;
     74a:	e9ca 3303 	strd	r3, r3, [sl, #12]
  hex_info_reset( &ota.hex, ota.hexData );
     74e:	f7ff fcdf 	bl	110 <hex_info_reset(hex_info_t*, char*)>
}
     752:	e749      	b.n	5e8 <loop+0x5c>
  if (!strncmp( line, "HELLO", 5 )) {
     754:	791a      	ldrb	r2, [r3, #4]
     756:	2a4f      	cmp	r2, #79	; 0x4f
     758:	f47f af5c 	bne.w	614 <loop+0x88>
    if (ota.inProgress) {
     75c:	f8df a154 	ldr.w	sl, [pc, #340]	; 8b4 <loop+0x328>
     760:	f89a 2001 	ldrb.w	r2, [sl, #1]
     764:	2a00      	cmp	r2, #0
     766:	f040 80c8 	bne.w	8fa <loop+0x36e>
    while (*tok == ' ') tok++;
     76a:	795b      	ldrb	r3, [r3, #5]
    const char *tok = line + 5;
     76c:	484c      	ldr	r0, [pc, #304]	; (8a0 <loop+0x314>)
    while (*tok == ' ') tok++;
     76e:	2b20      	cmp	r3, #32
     770:	d103      	bne.n	77a <loop+0x1ee>
     772:	f810 3f01 	ldrb.w	r3, [r0, #1]!
     776:	2b20      	cmp	r3, #32
     778:	d0fb      	beq.n	772 <loop+0x1e6>
    if (!*tok) {
     77a:	2b00      	cmp	r3, #0
     77c:	f000 80ae 	beq.w	8dc <loop+0x350>
    if (!strcmp( tok, OTA_TOKEN )) {
     780:	4948      	ldr	r1, [pc, #288]	; (8a4 <loop+0x318>)
     782:	f004 fff1 	bl	5768 <strcmp>
     786:	2800      	cmp	r0, #0
     788:	d159      	bne.n	83e <loop+0x2b2>
      ota.handshakeReady = true;
     78a:	2301      	movs	r3, #1
      otaSendLine( "READY" );
     78c:	4846      	ldr	r0, [pc, #280]	; (8a8 <loop+0x31c>)
      ota.handshakeReady = true;
     78e:	f88a 3000 	strb.w	r3, [sl]
      otaSendLine( "READY" );
     792:	f7ff fe15 	bl	3c0 <otaSendLine(char const*)>
     796:	2113      	movs	r1, #19
     798:	4844      	ldr	r0, [pc, #272]	; (8ac <loop+0x320>)
     79a:	f002 fabf 	bl	2d1c <usb_serial_write>
     79e:	4836      	ldr	r0, [pc, #216]	; (878 <loop+0x2ec>)
     7a0:	f000 fe38 	bl	1414 <Print::println()>
     7a4:	e720      	b.n	5e8 <loop+0x5c>
  if (!strcmp( line, "BEGIN HEX" )) { beginHexSession(); return; }
     7a6:	4a42      	ldr	r2, [pc, #264]	; (8b0 <loop+0x324>)
     7a8:	6811      	ldr	r1, [r2, #0]
     7aa:	4559      	cmp	r1, fp
     7ac:	f47f af36 	bne.w	61c <loop+0x90>
     7b0:	8892      	ldrh	r2, [r2, #4]
     7b2:	2a58      	cmp	r2, #88	; 0x58
     7b4:	f47f af32 	bne.w	61c <loop+0x90>
  if (!ota.handshakeReady || ota.inProgress) {
     7b8:	4b3e      	ldr	r3, [pc, #248]	; (8b4 <loop+0x328>)
     7ba:	781a      	ldrb	r2, [r3, #0]
     7bc:	2a00      	cmp	r2, #0
     7be:	f000 8098 	beq.w	8f2 <loop+0x366>
     7c2:	f893 a001 	ldrb.w	sl, [r3, #1]
     7c6:	f1ba 0f00 	cmp.w	sl, #0
     7ca:	f040 8092 	bne.w	8f2 <loop+0x366>
  if (firmware_buffer_init( &addr, &size ) == 0) {
     7ce:	a905      	add	r1, sp, #20
     7d0:	a804      	add	r0, sp, #16
  uint32_t addr = 0, size = 0;
     7d2:	e9cd aa04 	strd	sl, sl, [sp, #16]
  if (firmware_buffer_init( &addr, &size ) == 0) {
     7d6:	f7ff fd51 	bl	27c <firmware_buffer_init>
     7da:	4b36      	ldr	r3, [pc, #216]	; (8b4 <loop+0x328>)
     7dc:	2800      	cmp	r0, #0
     7de:	f000 8180 	beq.w	ae2 <loop+0x556>
  ota.bufferAddr = addr;
     7e2:	9a04      	ldr	r2, [sp, #16]
  hex_info_reset( &ota.hex, ota.hexData );
     7e4:	f103 0078 	add.w	r0, r3, #120	; 0x78
  ota.fatal      = false;
     7e8:	f883 a002 	strb.w	sl, [r3, #2]
  hex_info_reset( &ota.hex, ota.hexData );
     7ec:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
  ota.badLines   = 0;
     7f0:	f8c3 a014 	str.w	sl, [r3, #20]
static inline void clearLastError() { ota.lastError[0] = 0; }
     7f4:	f883 a018 	strb.w	sl, [r3, #24]
  ota.bufferAddr = addr;
     7f8:	605a      	str	r2, [r3, #4]
  ota.bufferSize = size;
     7fa:	9a05      	ldr	r2, [sp, #20]
  ota.okLines    = 0;
     7fc:	e9c3 aa03 	strd	sl, sl, [r3, #12]
  ota.inProgress = true;
     800:	f04f 0a01 	mov.w	sl, #1
  ota.bufferSize = size;
     804:	609a      	str	r2, [r3, #8]
  ota.inProgress = true;
     806:	f883 a001 	strb.w	sl, [r3, #1]
  hex_info_reset( &ota.hex, ota.hexData );
     80a:	f7ff fc81 	bl	110 <hex_info_reset(hex_info_t*, char*)>
  digitalWrite( led, HIGH );
     80e:	4651      	mov	r1, sl
     810:	200d      	movs	r0, #13
     812:	f000 fe91 	bl	1538 <digitalWrite>
                 IN_FLASH(addr) ? "FLASH" : "RAM",
     816:	9b04      	ldr	r3, [sp, #16]
  Serial.printf( "[FlasherX] HEX session begin, buffer=%lu bytes (%s) @0x%08lX\n",
     818:	4927      	ldr	r1, [pc, #156]	; (8b8 <loop+0x32c>)
     81a:	9300      	str	r3, [sp, #0]
                 IN_FLASH(addr) ? "FLASH" : "RAM",
     81c:	f103 4320 	add.w	r3, r3, #2684354560	; 0xa0000000
  Serial.printf( "[FlasherX] HEX session begin, buffer=%lu bytes (%s) @0x%08lX\n",
     820:	4a26      	ldr	r2, [pc, #152]	; (8bc <loop+0x330>)
     822:	4815      	ldr	r0, [pc, #84]	; (878 <loop+0x2ec>)
     824:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
     828:	bf34      	ite	cc
     82a:	460b      	movcc	r3, r1
     82c:	4613      	movcs	r3, r2
     82e:	9a05      	ldr	r2, [sp, #20]
     830:	4923      	ldr	r1, [pc, #140]	; (8c0 <loop+0x334>)
     832:	f000 fe0b 	bl	144c <Print::printf(char const*, ...)>
  otaSendLine( "HEX BEGIN" );
     836:	4823      	ldr	r0, [pc, #140]	; (8c4 <loop+0x338>)
     838:	f7ff fdc2 	bl	3c0 <otaSendLine(char const*)>
     83c:	e6d4      	b.n	5e8 <loop+0x5c>
      ota.handshakeReady = false;
     83e:	2300      	movs	r3, #0
      otaSendLine( "NACK" );
     840:	4821      	ldr	r0, [pc, #132]	; (8c8 <loop+0x33c>)
      ota.handshakeReady = false;
     842:	f88a 3000 	strb.w	r3, [sl]
      otaSendLine( "NACK" );
     846:	f7ff fdbb 	bl	3c0 <otaSendLine(char const*)>
     84a:	211f      	movs	r1, #31
     84c:	481f      	ldr	r0, [pc, #124]	; (8cc <loop+0x340>)
     84e:	f002 fa65 	bl	2d1c <usb_serial_write>
     852:	4809      	ldr	r0, [pc, #36]	; (878 <loop+0x2ec>)
     854:	f000 fdde 	bl	1414 <Print::println()>
     858:	e6c6      	b.n	5e8 <loop+0x5c>
     85a:	bf00      	nop
     85c:	4c4c4548 	.word	0x4c4c4548
     860:	49474542 	.word	0x49474542
     864:	00444e45 	.word	0x00444e45
     868:	20007b98 	.word	0x20007b98
     86c:	200089e0 	.word	0x200089e0
     870:	200089e4 	.word	0x200089e4
     874:	20007678 	.word	0x20007678
     878:	20007b88 	.word	0x20007b88
     87c:	200077ec 	.word	0x200077ec
     880:	200077f0 	.word	0x200077f0
     884:	20007828 	.word	0x20007828
     888:	20007838 	.word	0x20007838
     88c:	200003a8 	.word	0x200003a8
     890:	20007840 	.word	0x20007840
     894:	2000784c 	.word	0x2000784c
     898:	05fa0004 	.word	0x05fa0004
     89c:	20008920 	.word	0x20008920
     8a0:	200089e9 	.word	0x200089e9
     8a4:	200003ac 	.word	0x200003ac
     8a8:	200076c4 	.word	0x200076c4
     8ac:	200076cc 	.word	0x200076cc
     8b0:	200089e8 	.word	0x200089e8
     8b4:	20008880 	.word	0x20008880
     8b8:	20007600 	.word	0x20007600
     8bc:	20007608 	.word	0x20007608
     8c0:	2000773c 	.word	0x2000773c
     8c4:	2000777c 	.word	0x2000777c
     8c8:	2000769c 	.word	0x2000769c
     8cc:	200076e0 	.word	0x200076e0
     8d0:	474e4950 	.word	0x474e4950
     8d4:	53524556 	.word	0x53524556
     8d8:	4548204e 	.word	0x4548204e
      otaSendLine( "NACK" );
     8dc:	48b3      	ldr	r0, [pc, #716]	; (bac <loop+0x620>)
     8de:	f7ff fd6f 	bl	3c0 <otaSendLine(char const*)>
     8e2:	211e      	movs	r1, #30
     8e4:	48b2      	ldr	r0, [pc, #712]	; (bb0 <loop+0x624>)
     8e6:	f002 fa19 	bl	2d1c <usb_serial_write>
     8ea:	48b2      	ldr	r0, [pc, #712]	; (bb4 <loop+0x628>)
     8ec:	f000 fd92 	bl	1414 <Print::println()>
     8f0:	e67a      	b.n	5e8 <loop+0x5c>
    otaSendLine( "HEX IDLE" );
     8f2:	48b1      	ldr	r0, [pc, #708]	; (bb8 <loop+0x62c>)
     8f4:	f7ff fd64 	bl	3c0 <otaSendLine(char const*)>
    return;
     8f8:	e676      	b.n	5e8 <loop+0x5c>
      otaSendLine( "BUSY" );
     8fa:	48b0      	ldr	r0, [pc, #704]	; (bbc <loop+0x630>)
     8fc:	f7ff fd60 	bl	3c0 <otaSendLine(char const*)>
      return;
     900:	e672      	b.n	5e8 <loop+0x5c>
  if (!strcmp( line, "PING" ))      { otaSendLine( "PONG" ); return; }
     902:	791a      	ldrb	r2, [r3, #4]
     904:	2a00      	cmp	r2, #0
     906:	f47f ae8f 	bne.w	628 <loop+0x9c>
     90a:	48ad      	ldr	r0, [pc, #692]	; (bc0 <loop+0x634>)
     90c:	f7ff fd58 	bl	3c0 <otaSendLine(char const*)>
     910:	e66a      	b.n	5e8 <loop+0x5c>
  if (!strcmp( line, "VERSION" )) {
     912:	685a      	ldr	r2, [r3, #4]
     914:	4bab      	ldr	r3, [pc, #684]	; (bc4 <loop+0x638>)
     916:	429a      	cmp	r2, r3
     918:	f47f ae8a 	bne.w	630 <loop+0xa4>
							  return write((const uint8_t *)str, strlen(str)); }
     91c:	2203      	movs	r2, #3
     91e:	49aa      	ldr	r1, [pc, #680]	; (bc8 <loop+0x63c>)
     920:	48aa      	ldr	r0, [pc, #680]	; (bcc <loop+0x640>)
     922:	f000 fd43 	bl	13ac <Print::write(unsigned char const*, unsigned int)>
     926:	2210      	movs	r2, #16
     928:	49a9      	ldr	r1, [pc, #676]	; (bd0 <loop+0x644>)
     92a:	48a8      	ldr	r0, [pc, #672]	; (bcc <loop+0x640>)
     92c:	f000 fd3e 	bl	13ac <Print::write(unsigned char const*, unsigned int)>
     930:	2202      	movs	r2, #2
     932:	49a8      	ldr	r1, [pc, #672]	; (bd4 <loop+0x648>)
     934:	48a5      	ldr	r0, [pc, #660]	; (bcc <loop+0x640>)
     936:	f000 fd39 	bl	13ac <Print::write(unsigned char const*, unsigned int)>
     93a:	2209      	movs	r2, #9
     93c:	49a6      	ldr	r1, [pc, #664]	; (bd8 <loop+0x64c>)
     93e:	48a3      	ldr	r0, [pc, #652]	; (bcc <loop+0x640>)
     940:	f000 fd34 	bl	13ac <Print::write(unsigned char const*, unsigned int)>
     944:	220d      	movs	r2, #13
     946:	49a5      	ldr	r1, [pc, #660]	; (bdc <loop+0x650>)
     948:	48a0      	ldr	r0, [pc, #640]	; (bcc <loop+0x640>)
     94a:	f000 fd2f 	bl	13ac <Print::write(unsigned char const*, unsigned int)>
     94e:	2202      	movs	r2, #2
     950:	49a0      	ldr	r1, [pc, #640]	; (bd4 <loop+0x648>)
     952:	489e      	ldr	r0, [pc, #632]	; (bcc <loop+0x640>)
     954:	f000 fd2a 	bl	13ac <Print::write(unsigned char const*, unsigned int)>
     958:	e646      	b.n	5e8 <loop+0x5c>
  if (!ota.inProgress) {
     95a:	f8df a2d0 	ldr.w	sl, [pc, #720]	; c2c <loop+0x6a0>
     95e:	f89a 2001 	ldrb.w	r2, [sl, #1]
     962:	2a00      	cmp	r2, #0
     964:	d0c5      	beq.n	8f2 <loop+0x366>
  ota.hex.lines++;
     966:	f8da 2098 	ldr.w	r2, [sl, #152]	; 0x98
     96a:	3201      	adds	r2, #1
     96c:	9202      	str	r2, [sp, #8]
     96e:	f8ca 2098 	str.w	r2, [sl, #152]	; 0x98
  if (ok && (parse_hex_line( record, ota.hex.data, &ota.hex.addr, &ota.hex.num, &ota.hex.code ) == 0)) {
     972:	f89a 2002 	ldrb.w	r2, [sl, #2]
     976:	2a00      	cmp	r2, #0
     978:	d062      	beq.n	a40 <loop+0x4b4>
    ota.badLines++;
     97a:	f8da 3014 	ldr.w	r3, [sl, #20]
     97e:	2204      	movs	r2, #4
     980:	4997      	ldr	r1, [pc, #604]	; (be0 <loop+0x654>)
     982:	3301      	adds	r3, #1
     984:	4891      	ldr	r0, [pc, #580]	; (bcc <loop+0x640>)
     986:	f8ca 3014 	str.w	r3, [sl, #20]
    ota.fatal = true;
     98a:	2301      	movs	r3, #1
     98c:	f88a 3002 	strb.w	r3, [sl, #2]
     990:	f000 fd0c 	bl	13ac <Print::write(unsigned char const*, unsigned int)>
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
     994:	f8dd a008 	ldr.w	sl, [sp, #8]
     998:	2300      	movs	r3, #0
     99a:	220a      	movs	r2, #10
     99c:	488b      	ldr	r0, [pc, #556]	; (bcc <loop+0x640>)
     99e:	4651      	mov	r1, sl
     9a0:	f000 fd62 	bl	1468 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
							  return write((const uint8_t *)str, strlen(str)); }
     9a4:	2202      	movs	r2, #2
     9a6:	498b      	ldr	r1, [pc, #556]	; (bd4 <loop+0x648>)
     9a8:	4888      	ldr	r0, [pc, #544]	; (bcc <loop+0x640>)
     9aa:	f000 fcff 	bl	13ac <Print::write(unsigned char const*, unsigned int)>
    Serial.printf( "[FlasherX] BAD line %u: %s\n", lineNumber, ota.lastError );
     9ae:	4652      	mov	r2, sl
     9b0:	4b8c      	ldr	r3, [pc, #560]	; (be4 <loop+0x658>)
     9b2:	498d      	ldr	r1, [pc, #564]	; (be8 <loop+0x65c>)
     9b4:	487f      	ldr	r0, [pc, #508]	; (bb4 <loop+0x628>)
     9b6:	f000 fd49 	bl	144c <Print::printf(char const*, ...)>
     9ba:	e615      	b.n	5e8 <loop+0x5c>
  bool success = (!ota.fatal && ota.badLines == 0);
     9bc:	f8da 3014 	ldr.w	r3, [sl, #20]
  if (success && ota.bytes == 0) {
     9c0:	f8da 200c 	ldr.w	r2, [sl, #12]
  Serial.printf( "[FlasherX] HEX END lines=%d ok=%lu bad=%lu bytes=%lu\n",
     9c4:	4989      	ldr	r1, [pc, #548]	; (bec <loop+0x660>)
     9c6:	487b      	ldr	r0, [pc, #492]	; (bb4 <loop+0x628>)
     9c8:	e9cd 3200 	strd	r3, r2, [sp]
     9cc:	f8da 3010 	ldr.w	r3, [sl, #16]
     9d0:	f8da 2098 	ldr.w	r2, [sl, #152]	; 0x98
     9d4:	f000 fd3a 	bl	144c <Print::printf(char const*, ...)>
     9d8:	220e      	movs	r2, #14
     9da:	4985      	ldr	r1, [pc, #532]	; (bf0 <loop+0x664>)
     9dc:	487b      	ldr	r0, [pc, #492]	; (bcc <loop+0x640>)
     9de:	f000 fce5 	bl	13ac <Print::write(unsigned char const*, unsigned int)>
	size_t print(int n)				{ return print((long)n); }
     9e2:	f8da 1098 	ldr.w	r1, [sl, #152]	; 0x98
     9e6:	4879      	ldr	r0, [pc, #484]	; (bcc <loop+0x640>)
     9e8:	f000 fd08 	bl	13fc <Print::print(long)>
							  return write((const uint8_t *)str, strlen(str)); }
     9ec:	2205      	movs	r2, #5
     9ee:	4981      	ldr	r1, [pc, #516]	; (bf4 <loop+0x668>)
     9f0:	4876      	ldr	r0, [pc, #472]	; (bcc <loop+0x640>)
     9f2:	f000 fcdb 	bl	13ac <Print::write(unsigned char const*, unsigned int)>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     9f6:	2300      	movs	r3, #0
     9f8:	220a      	movs	r2, #10
     9fa:	f8da 1014 	ldr.w	r1, [sl, #20]
     9fe:	4873      	ldr	r0, [pc, #460]	; (bcc <loop+0x640>)
     a00:	f000 fd32 	bl	1468 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  else {
    otaSerial.print( "HEX ERR lines=" );
    otaSerial.print( ota.hex.lines );
    otaSerial.print( " bad=" );
    otaSerial.print( ota.badLines );
    if (ota.lastError[0]) {
     a04:	f89a 3018 	ldrb.w	r3, [sl, #24]
     a08:	2b00      	cmp	r3, #0
     a0a:	d175      	bne.n	af8 <loop+0x56c>
							  return write((const uint8_t *)str, strlen(str)); }
     a0c:	2202      	movs	r2, #2
     a0e:	4971      	ldr	r1, [pc, #452]	; (bd4 <loop+0x648>)
     a10:	486e      	ldr	r0, [pc, #440]	; (bcc <loop+0x640>)
     a12:	f000 fccb 	bl	13ac <Print::write(unsigned char const*, unsigned int)>
     a16:	2117      	movs	r1, #23
     a18:	4877      	ldr	r0, [pc, #476]	; (bf8 <loop+0x66c>)
     a1a:	f002 f97f 	bl	2d1c <usb_serial_write>
     a1e:	4871      	ldr	r0, [pc, #452]	; (be4 <loop+0x658>)
     a20:	f005 f80e 	bl	5a40 <strlen>
     a24:	4601      	mov	r1, r0
     a26:	486f      	ldr	r0, [pc, #444]	; (be4 <loop+0x658>)
     a28:	f002 f978 	bl	2d1c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     a2c:	4861      	ldr	r0, [pc, #388]	; (bb4 <loop+0x628>)
     a2e:	f000 fcf1 	bl	1414 <Print::println()>
    otaSerial.print( "\r\n" );

    Serial.print( "[FlasherX] HEX failed: " );
    Serial.println( ota.lastError );

    firmware_buffer_free( ota.bufferAddr, ota.bufferSize );
     a32:	e9da 0101 	ldrd	r0, r1, [sl, #4]
     a36:	f7ff fc51 	bl	2dc <firmware_buffer_free>
     a3a:	e678      	b.n	72e <loop+0x1a2>
  uint32_t payloadBytes = 0;
     a3c:	9102      	str	r1, [sp, #8]
     a3e:	e615      	b.n	66c <loop+0xe0>
  if (ok && (parse_hex_line( record, ota.hex.data, &ota.hex.addr, &ota.hex.num, &ota.hex.code ) == 0)) {
     a40:	1c98      	adds	r0, r3, #2
     a42:	f10a 0380 	add.w	r3, sl, #128	; 0x80
     a46:	f10a 027c 	add.w	r2, sl, #124	; 0x7c
     a4a:	9300      	str	r3, [sp, #0]
     a4c:	f10a 0384 	add.w	r3, sl, #132	; 0x84
     a50:	f8da 1078 	ldr.w	r1, [sl, #120]	; 0x78
     a54:	f7ff fb6a 	bl	12c <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*)>
     a58:	2800      	cmp	r0, #0
     a5a:	d066      	beq.n	b2a <loop+0x59e>
  if (ok && (process_hex_record( &ota.hex ) != 0)) {
     a5c:	4867      	ldr	r0, [pc, #412]	; (bfc <loop+0x670>)
     a5e:	f7ff fbd3 	bl	208 <process_hex_record(hex_info_t*)>
     a62:	2800      	cmp	r0, #0
     a64:	d176      	bne.n	b54 <loop+0x5c8>
  if (ok && ota.hex.code == 0) {
     a66:	f8da 3080 	ldr.w	r3, [sl, #128]	; 0x80
     a6a:	bb23      	cbnz	r3, ab6 <loop+0x52a>
    if (ota.hex.max > (FLASH_BASE_ADDR + ota.bufferSize)) {
     a6c:	f8da 2008 	ldr.w	r2, [sl, #8]
     a70:	f8da 1090 	ldr.w	r1, [sl, #144]	; 0x90
     a74:	f102 42c0 	add.w	r2, r2, #1610612736	; 0x60000000
     a78:	4291      	cmp	r1, r2
     a7a:	f200 808c 	bhi.w	b96 <loop+0x60a>
      uint32_t addr = ota.bufferAddr + ota.hex.base + ota.hex.addr - FLASH_BASE_ADDR;
     a7e:	f8da 2004 	ldr.w	r2, [sl, #4]
     a82:	f8da 3088 	ldr.w	r3, [sl, #136]	; 0x88
        memcpy( (void*)addr, (void*)ota.hex.data, ota.hex.num );
     a86:	f8da 1078 	ldr.w	r1, [sl, #120]	; 0x78
      uint32_t addr = ota.bufferAddr + ota.hex.base + ota.hex.addr - FLASH_BASE_ADDR;
     a8a:	18d0      	adds	r0, r2, r3
      if (!IN_FLASH( ota.bufferAddr )) {
     a8c:	f102 4220 	add.w	r2, r2, #2684354560	; 0xa0000000
      uint32_t addr = ota.bufferAddr + ota.hex.base + ota.hex.addr - FLASH_BASE_ADDR;
     a90:	f8da 307c 	ldr.w	r3, [sl, #124]	; 0x7c
     a94:	f100 4020 	add.w	r0, r0, #2684354560	; 0xa0000000
      if (!IN_FLASH( ota.bufferAddr )) {
     a98:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
        memcpy( (void*)addr, (void*)ota.hex.data, ota.hex.num );
     a9c:	f8da 2084 	ldr.w	r2, [sl, #132]	; 0x84
      uint32_t addr = ota.bufferAddr + ota.hex.base + ota.hex.addr - FLASH_BASE_ADDR;
     aa0:	4418      	add	r0, r3
      if (!IN_FLASH( ota.bufferAddr )) {
     aa2:	d36d      	bcc.n	b80 <loop+0x5f4>
        memcpy( (void*)addr, (void*)ota.hex.data, ota.hex.num );
     aa4:	f000 feb2 	bl	180c <memcpy>
        ota.bytes += ota.hex.num;
     aa8:	f8da 300c 	ldr.w	r3, [sl, #12]
     aac:	f8da 2084 	ldr.w	r2, [sl, #132]	; 0x84
     ab0:	4413      	add	r3, r2
     ab2:	f8ca 300c 	str.w	r3, [sl, #12]
    ota.okLines++;
     ab6:	f8da 3010 	ldr.w	r3, [sl, #16]
							  return write((const uint8_t *)str, strlen(str)); }
     aba:	2203      	movs	r2, #3
     abc:	4950      	ldr	r1, [pc, #320]	; (c00 <loop+0x674>)
     abe:	3301      	adds	r3, #1
     ac0:	4842      	ldr	r0, [pc, #264]	; (bcc <loop+0x640>)
     ac2:	f8ca 3010 	str.w	r3, [sl, #16]
     ac6:	f000 fc71 	bl	13ac <Print::write(unsigned char const*, unsigned int)>
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
     aca:	9902      	ldr	r1, [sp, #8]
     acc:	2300      	movs	r3, #0
     ace:	220a      	movs	r2, #10
     ad0:	483e      	ldr	r0, [pc, #248]	; (bcc <loop+0x640>)
     ad2:	f000 fcc9 	bl	1468 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
							  return write((const uint8_t *)str, strlen(str)); }
     ad6:	2202      	movs	r2, #2
     ad8:	493e      	ldr	r1, [pc, #248]	; (bd4 <loop+0x648>)
     ada:	483c      	ldr	r0, [pc, #240]	; (bcc <loop+0x640>)
     adc:	f000 fc66 	bl	13ac <Print::write(unsigned char const*, unsigned int)>
     ae0:	e582      	b.n	5e8 <loop+0x5c>
    otaSendLine( "HEX FAIL" );
     ae2:	4848      	ldr	r0, [pc, #288]	; (c04 <loop+0x678>)
     ae4:	f7ff fc6c 	bl	3c0 <otaSendLine(char const*)>
     ae8:	2123      	movs	r1, #35	; 0x23
     aea:	4847      	ldr	r0, [pc, #284]	; (c08 <loop+0x67c>)
     aec:	f002 f916 	bl	2d1c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     af0:	4830      	ldr	r0, [pc, #192]	; (bb4 <loop+0x628>)
     af2:	f000 fc8f 	bl	1414 <Print::println()>
     af6:	e577      	b.n	5e8 <loop+0x5c>
							  return write((const uint8_t *)str, strlen(str)); }
     af8:	4944      	ldr	r1, [pc, #272]	; (c0c <loop+0x680>)
     afa:	2205      	movs	r2, #5
     afc:	4833      	ldr	r0, [pc, #204]	; (bcc <loop+0x640>)
     afe:	f000 fc55 	bl	13ac <Print::write(unsigned char const*, unsigned int)>
     b02:	4838      	ldr	r0, [pc, #224]	; (be4 <loop+0x658>)
     b04:	f004 ff9c 	bl	5a40 <strlen>
     b08:	4936      	ldr	r1, [pc, #216]	; (be4 <loop+0x658>)
     b0a:	4602      	mov	r2, r0
     b0c:	482f      	ldr	r0, [pc, #188]	; (bcc <loop+0x640>)
     b0e:	f000 fc4d 	bl	13ac <Print::write(unsigned char const*, unsigned int)>
     b12:	e77b      	b.n	a0c <loop+0x480>
  strncpy( ota.lastError, msg, sizeof(ota.lastError) - 1 );
     b14:	225f      	movs	r2, #95	; 0x5f
     b16:	493e      	ldr	r1, [pc, #248]	; (c10 <loop+0x684>)
     b18:	4832      	ldr	r0, [pc, #200]	; (be4 <loop+0x658>)
     b1a:	9302      	str	r3, [sp, #8]
     b1c:	f004 fd48 	bl	55b0 <strncpy>
  ota.lastError[ sizeof(ota.lastError) - 1 ] = 0;
     b20:	9b02      	ldr	r3, [sp, #8]
     b22:	461a      	mov	r2, r3
     b24:	f88a 3077 	strb.w	r3, [sl, #119]	; 0x77
     b28:	e74c      	b.n	9c4 <loop+0x438>
  strncpy( ota.lastError, msg, sizeof(ota.lastError) - 1 );
     b2a:	225f      	movs	r2, #95	; 0x5f
     b2c:	4939      	ldr	r1, [pc, #228]	; (c14 <loop+0x688>)
     b2e:	482d      	ldr	r0, [pc, #180]	; (be4 <loop+0x658>)
     b30:	f004 fd3e 	bl	55b0 <strncpy>
  ota.lastError[ sizeof(ota.lastError) - 1 ] = 0;
     b34:	2300      	movs	r3, #0
     b36:	f88a 3077 	strb.w	r3, [sl, #119]	; 0x77
  if (ok) {
     b3a:	e71e      	b.n	97a <loop+0x3ee>
  strncpy( ota.lastError, msg, sizeof(ota.lastError) - 1 );
     b3c:	225f      	movs	r2, #95	; 0x5f
     b3e:	4936      	ldr	r1, [pc, #216]	; (c18 <loop+0x68c>)
     b40:	4828      	ldr	r0, [pc, #160]	; (be4 <loop+0x658>)
     b42:	9302      	str	r3, [sp, #8]
     b44:	f004 fd34 	bl	55b0 <strncpy>
  ota.lastError[ sizeof(ota.lastError) - 1 ] = 0;
     b48:	9b02      	ldr	r3, [sp, #8]
  if (success && ota.bytes == 0) {
     b4a:	f8da 200c 	ldr.w	r2, [sl, #12]
  ota.lastError[ sizeof(ota.lastError) - 1 ] = 0;
     b4e:	f88a 3077 	strb.w	r3, [sl, #119]	; 0x77
  if (success && !check_flash_id( ota.bufferAddr, payloadBytes )) {
     b52:	e737      	b.n	9c4 <loop+0x438>
    snprintf( ota.lastError, sizeof(ota.lastError), "hex code %u", ota.hex.code );
     b54:	f8da 3080 	ldr.w	r3, [sl, #128]	; 0x80
     b58:	2160      	movs	r1, #96	; 0x60
     b5a:	4a30      	ldr	r2, [pc, #192]	; (c1c <loop+0x690>)
     b5c:	4821      	ldr	r0, [pc, #132]	; (be4 <loop+0x658>)
     b5e:	f004 faf5 	bl	514c <snprintf>
  if (ok) {
     b62:	e70a      	b.n	97a <loop+0x3ee>
  strncpy( ota.lastError, msg, sizeof(ota.lastError) - 1 );
     b64:	225f      	movs	r2, #95	; 0x5f
     b66:	9002      	str	r0, [sp, #8]
     b68:	492d      	ldr	r1, [pc, #180]	; (c20 <loop+0x694>)
     b6a:	481e      	ldr	r0, [pc, #120]	; (be4 <loop+0x658>)
     b6c:	f004 fd20 	bl	55b0 <strncpy>
  ota.lastError[ sizeof(ota.lastError) - 1 ] = 0;
     b70:	9b02      	ldr	r3, [sp, #8]
                 (unsigned long)ota.bytes );
     b72:	f8da 200c 	ldr.w	r2, [sl, #12]
  ota.lastError[ sizeof(ota.lastError) - 1 ] = 0;
     b76:	f88a 3077 	strb.w	r3, [sl, #119]	; 0x77
                 (unsigned long)ota.badLines,
     b7a:	f8da 3014 	ldr.w	r3, [sl, #20]
     b7e:	e721      	b.n	9c4 <loop+0x438>
        int err = flash_write_block( addr, ota.hex.data, ota.hex.num );
     b80:	f7ff fbe4 	bl	34c <flash_write_block>
        if (err) {
     b84:	4603      	mov	r3, r0
     b86:	2800      	cmp	r0, #0
     b88:	d08e      	beq.n	aa8 <loop+0x51c>
          snprintf( ota.lastError, sizeof(ota.lastError), "flash err %02X", err );
     b8a:	4a26      	ldr	r2, [pc, #152]	; (c24 <loop+0x698>)
     b8c:	2160      	movs	r1, #96	; 0x60
     b8e:	4815      	ldr	r0, [pc, #84]	; (be4 <loop+0x658>)
     b90:	f004 fadc 	bl	514c <snprintf>
  if (ok) {
     b94:	e6f1      	b.n	97a <loop+0x3ee>
  strncpy( ota.lastError, msg, sizeof(ota.lastError) - 1 );
     b96:	225f      	movs	r2, #95	; 0x5f
     b98:	4923      	ldr	r1, [pc, #140]	; (c28 <loop+0x69c>)
     b9a:	4812      	ldr	r0, [pc, #72]	; (be4 <loop+0x658>)
     b9c:	9303      	str	r3, [sp, #12]
     b9e:	f004 fd07 	bl	55b0 <strncpy>
  ota.lastError[ sizeof(ota.lastError) - 1 ] = 0;
     ba2:	9b03      	ldr	r3, [sp, #12]
     ba4:	f88a 3077 	strb.w	r3, [sl, #119]	; 0x77
     ba8:	e6e7      	b.n	97a <loop+0x3ee>
     baa:	bf00      	nop
     bac:	2000769c 	.word	0x2000769c
     bb0:	200076a4 	.word	0x200076a4
     bb4:	20007b88 	.word	0x20007b88
     bb8:	2000760c 	.word	0x2000760c
     bbc:	20007694 	.word	0x20007694
     bc0:	200077dc 	.word	0x200077dc
     bc4:	004e4f49 	.word	0x004e4f49
     bc8:	20007968 	.word	0x20007968
     bcc:	20007b98 	.word	0x20007b98
     bd0:	20007938 	.word	0x20007938
     bd4:	200003a8 	.word	0x200003a8
     bd8:	2000796c 	.word	0x2000796c
     bdc:	20007898 	.word	0x20007898
     be0:	20007654 	.word	0x20007654
     be4:	20008898 	.word	0x20008898
     be8:	2000765c 	.word	0x2000765c
     bec:	200077f0 	.word	0x200077f0
     bf0:	20007868 	.word	0x20007868
     bf4:	20007878 	.word	0x20007878
     bf8:	200077bc 	.word	0x200077bc
     bfc:	200088f8 	.word	0x200088f8
     c00:	20007650 	.word	0x20007650
     c04:	2000770c 	.word	0x2000770c
     c08:	20007718 	.word	0x20007718
     c0c:	200077b4 	.word	0x200077b4
     c10:	20007798 	.word	0x20007798
     c14:	20007618 	.word	0x20007618
     c18:	2000778c 	.word	0x2000778c
     c1c:	20007620 	.word	0x20007620
     c20:	200077a0 	.word	0x200077a0
     c24:	20007640 	.word	0x20007640
     c28:	2000762c 	.word	0x2000762c
     c2c:	20008880 	.word	0x20008880

00000c30 <HardwareSerialIMXRT::operator bool()>:
	virtual void begin(uint32_t baud, uint32_t format) {
					  serial_begin(BAUD2DIV(baud));
					  serial_format(format); }
	*/

	operator bool()			{ return true; }
     c30:	2001      	movs	r0, #1
     c32:	4770      	bx	lr

00000c34 <HardwareSerialIMXRT::availableForWrite()>:

int HardwareSerialIMXRT::availableForWrite(void)
{
	uint32_t head, tail;

	head = tx_buffer_head_;
     c34:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
	tail = tx_buffer_tail_;
     c38:	f8b0 2048 	ldrh.w	r2, [r0, #72]	; 0x48
	head = tx_buffer_head_;
     c3c:	b29b      	uxth	r3, r3
	tail = tx_buffer_tail_;
     c3e:	b292      	uxth	r2, r2
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
     c40:	4293      	cmp	r3, r2
     c42:	d202      	bcs.n	c4a <HardwareSerialIMXRT::availableForWrite()+0x16>
	return tail - head - 1;
     c44:	3a01      	subs	r2, #1
     c46:	1ad0      	subs	r0, r2, r3
}
     c48:	4770      	bx	lr
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
     c4a:	6b41      	ldr	r1, [r0, #52]	; 0x34
     c4c:	3901      	subs	r1, #1
     c4e:	440a      	add	r2, r1
     c50:	1ad0      	subs	r0, r2, r3
     c52:	4770      	bx	lr

00000c54 <HardwareSerialIMXRT::available()>:



int HardwareSerialIMXRT::available(void)
{
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
     c54:	6901      	ldr	r1, [r0, #16]
	uint32_t head, tail;

	// WATER> 0 so IDLE involved may want to check if port has already has RX data to retrieve
	__disable_irq();
     c56:	b672      	cpsid	i
	head = rx_buffer_head_;
     c58:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
	tail = rx_buffer_tail_;
     c5c:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
	head = rx_buffer_head_;
     c60:	b292      	uxth	r2, r2
	tail = rx_buffer_tail_;
     c62:	b29b      	uxth	r3, r3
	int avail;
	if (head >= tail) avail = head - tail;
     c64:	429a      	cmp	r2, r3
	else avail = rx_buffer_total_size_ + head - tail;	
     c66:	bf3c      	itt	cc
     c68:	6b80      	ldrcc	r0, [r0, #56]	; 0x38
     c6a:	1812      	addcc	r2, r2, r0
	avail += (port->WATER >> 24) & 0x7;
     c6c:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
	else avail = rx_buffer_total_size_ + head - tail;	
     c6e:	1ad3      	subs	r3, r2, r3
	__enable_irq();
     c70:	b662      	cpsie	i
	avail += (port->WATER >> 24) & 0x7;
     c72:	f3c0 6002 	ubfx	r0, r0, #24, #3
	return avail;
}
     c76:	4418      	add	r0, r3
     c78:	4770      	bx	lr
     c7a:	bf00      	nop

00000c7c <HardwareSerialIMXRT::peek()>:
int HardwareSerialIMXRT::peek(void)
{
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
	uint32_t head, tail;

	head = rx_buffer_head_;
     c7c:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
{
     c80:	4602      	mov	r2, r0
	tail = rx_buffer_tail_;
     c82:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
	head = rx_buffer_head_;
     c86:	b289      	uxth	r1, r1
	tail = rx_buffer_tail_;
     c88:	b29b      	uxth	r3, r3
	if (head == tail) {
     c8a:	4299      	cmp	r1, r3
{
     c8c:	b410      	push	{r4}
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
     c8e:	6904      	ldr	r4, [r0, #16]
	if (head == tail) {
     c90:	d014      	beq.n	cbc <HardwareSerialIMXRT::peek()+0x40>
			return c;
		}
		__enable_irq();

	} 
	if (++tail >= rx_buffer_total_size_) tail = 0;
     c92:	3301      	adds	r3, #1
     c94:	6b90      	ldr	r0, [r2, #56]	; 0x38
	if (tail < rx_buffer_size_) {
     c96:	6b11      	ldr	r1, [r2, #48]	; 0x30
	if (++tail >= rx_buffer_total_size_) tail = 0;
     c98:	4298      	cmp	r0, r3
     c9a:	bf98      	it	ls
     c9c:	2300      	movls	r3, #0
	if (tail < rx_buffer_size_) {
     c9e:	4299      	cmp	r1, r3
     ca0:	d806      	bhi.n	cb0 <HardwareSerialIMXRT::peek()+0x34>
		return rx_buffer_[tail];
	} else {
		return rx_buffer_storage_[tail-rx_buffer_size_];
     ca2:	1a5b      	subs	r3, r3, r1
     ca4:	6a52      	ldr	r2, [r2, #36]	; 0x24
     ca6:	5cd0      	ldrb	r0, [r2, r3]
     ca8:	b2c0      	uxtb	r0, r0
	}
}
     caa:	f85d 4b04 	ldr.w	r4, [sp], #4
     cae:	4770      	bx	lr
		return rx_buffer_[tail];
     cb0:	6a12      	ldr	r2, [r2, #32]
}
     cb2:	f85d 4b04 	ldr.w	r4, [sp], #4
		return rx_buffer_[tail];
     cb6:	5cd0      	ldrb	r0, [r2, r3]
     cb8:	b2c0      	uxtb	r0, r0
}
     cba:	4770      	bx	lr
		__disable_irq();
     cbc:	b672      	cpsid	i
		head = rx_buffer_head_;  // reread head to make sure no ISR happened
     cbe:	f8b0 004a 	ldrh.w	r0, [r0, #74]	; 0x4a
     cc2:	b280      	uxth	r0, r0
		if (head == tail) {
     cc4:	4281      	cmp	r1, r0
     cc6:	d001      	beq.n	ccc <HardwareSerialIMXRT::peek()+0x50>
		__enable_irq();
     cc8:	b662      	cpsie	i
     cca:	e7e2      	b.n	c92 <HardwareSerialIMXRT::peek()+0x16>
			if (port->WATER & 0x7000000) {
     ccc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     cce:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
     cd2:	d103      	bne.n	cdc <HardwareSerialIMXRT::peek()+0x60>
			int c = -1;	// assume nothing to return
     cd4:	f04f 30ff 	mov.w	r0, #4294967295
			__enable_irq();
     cd8:	b662      	cpsie	i
			return c;
     cda:	e7e6      	b.n	caa <HardwareSerialIMXRT::peek()+0x2e>
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
     cdc:	69e3      	ldr	r3, [r4, #28]
				rx_buffer_head_ = 1;
     cde:	2001      	movs	r0, #1
				rx_buffer_tail_ = 0; 
     ce0:	2400      	movs	r4, #0
				rx_buffer_[1] = c;
     ce2:	6a11      	ldr	r1, [r2, #32]
				rx_buffer_head_ = 1;
     ce4:	f8a2 004a 	strh.w	r0, [r2, #74]	; 0x4a
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
     ce8:	f3c3 0009 	ubfx	r0, r3, #0, #10
				rx_buffer_[1] = c;
     cec:	b2db      	uxtb	r3, r3
				rx_buffer_tail_ = 0; 
     cee:	f8a2 404c 	strh.w	r4, [r2, #76]	; 0x4c
				rx_buffer_[1] = c;
     cf2:	704b      	strb	r3, [r1, #1]
     cf4:	e7f0      	b.n	cd8 <HardwareSerialIMXRT::peek()+0x5c>
     cf6:	bf00      	nop

00000cf8 <HardwareSerialIMXRT::read()>:
{
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
	uint32_t head, tail;
	int c;

	head = rx_buffer_head_;
     cf8:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
{
     cfc:	4602      	mov	r2, r0
	tail = rx_buffer_tail_;
     cfe:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
	head = rx_buffer_head_;
     d02:	b289      	uxth	r1, r1
	tail = rx_buffer_tail_;
     d04:	b29b      	uxth	r3, r3
	if (head == tail) {
     d06:	4299      	cmp	r1, r3
{
     d08:	b430      	push	{r4, r5}
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
     d0a:	6904      	ldr	r4, [r0, #16]
	if (head == tail) {
     d0c:	d025      	beq.n	d5a <HardwareSerialIMXRT::read()+0x62>
			return c;
		}
		__enable_irq();

	}
	if (++tail >= rx_buffer_total_size_) tail = 0;
     d0e:	3301      	adds	r3, #1
     d10:	6b94      	ldr	r4, [r2, #56]	; 0x38
     d12:	429c      	cmp	r4, r3
     d14:	d916      	bls.n	d44 <HardwareSerialIMXRT::read()+0x4c>
	if (tail < rx_buffer_size_) {
     d16:	6b10      	ldr	r0, [r2, #48]	; 0x30
		c = rx_buffer_[tail];
	} else {
		c = rx_buffer_storage_[tail-rx_buffer_size_];
	}
	rx_buffer_tail_ = tail;
     d18:	fa1f fc83 	uxth.w	ip, r3
	if (tail < rx_buffer_size_) {
     d1c:	4298      	cmp	r0, r3
     d1e:	d917      	bls.n	d50 <HardwareSerialIMXRT::read()+0x58>
		c = rx_buffer_[tail];
     d20:	6a10      	ldr	r0, [r2, #32]
     d22:	5cc0      	ldrb	r0, [r0, r3]
     d24:	b2c0      	uxtb	r0, r0
	if (rts_pin_baseReg_) {
     d26:	6d95      	ldr	r5, [r2, #88]	; 0x58
	rx_buffer_tail_ = tail;
     d28:	f8a2 c04c 	strh.w	ip, [r2, #76]	; 0x4c
	if (rts_pin_baseReg_) {
     d2c:	b145      	cbz	r5, d40 <HardwareSerialIMXRT::read()+0x48>
		uint32_t avail;
		if (head >= tail) avail = head - tail;
     d2e:	4299      	cmp	r1, r3
     d30:	d31c      	bcc.n	d6c <HardwareSerialIMXRT::read()+0x74>
     d32:	1acb      	subs	r3, r1, r3
		else avail = rx_buffer_total_size_ + head - tail;

		if (avail <= rts_low_watermark_) rts_assert();
     d34:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
     d36:	4299      	cmp	r1, r3
     d38:	d302      	bcc.n	d40 <HardwareSerialIMXRT::read()+0x48>
	DIRECT_WRITE_LOW(rts_pin_baseReg_, rts_pin_bitmask_);
     d3a:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
     d3c:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
	}
	return c;
}	
     d40:	bc30      	pop	{r4, r5}
     d42:	4770      	bx	lr
     d44:	f04f 0c00 	mov.w	ip, #0
	if (tail < rx_buffer_size_) {
     d48:	6b10      	ldr	r0, [r2, #48]	; 0x30
	if (++tail >= rx_buffer_total_size_) tail = 0;
     d4a:	4663      	mov	r3, ip
	if (tail < rx_buffer_size_) {
     d4c:	4298      	cmp	r0, r3
     d4e:	d8e7      	bhi.n	d20 <HardwareSerialIMXRT::read()+0x28>
		c = rx_buffer_storage_[tail-rx_buffer_size_];
     d50:	1a18      	subs	r0, r3, r0
     d52:	6a55      	ldr	r5, [r2, #36]	; 0x24
     d54:	5c28      	ldrb	r0, [r5, r0]
     d56:	b2c0      	uxtb	r0, r0
     d58:	e7e5      	b.n	d26 <HardwareSerialIMXRT::read()+0x2e>
     d5a:	4608      	mov	r0, r1
		__disable_irq();
     d5c:	b672      	cpsid	i
		head = rx_buffer_head_;  // reread head to make sure no ISR happened
     d5e:	f8b2 104a 	ldrh.w	r1, [r2, #74]	; 0x4a
     d62:	b289      	uxth	r1, r1
		if (head == tail) {
     d64:	4288      	cmp	r0, r1
     d66:	d004      	beq.n	d72 <HardwareSerialIMXRT::read()+0x7a>
		__enable_irq();
     d68:	b662      	cpsie	i
     d6a:	e7d0      	b.n	d0e <HardwareSerialIMXRT::read()+0x16>
		else avail = rx_buffer_total_size_ + head - tail;
     d6c:	440c      	add	r4, r1
     d6e:	1ae3      	subs	r3, r4, r3
     d70:	e7e0      	b.n	d34 <HardwareSerialIMXRT::read()+0x3c>
			if (port->WATER & 0x7000000) {
     d72:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     d74:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
     d78:	d103      	bne.n	d82 <HardwareSerialIMXRT::read()+0x8a>
			c = -1;	// assume nothing to return
     d7a:	f04f 30ff 	mov.w	r0, #4294967295
			__enable_irq();
     d7e:	b662      	cpsie	i
			return c;
     d80:	e7de      	b.n	d40 <HardwareSerialIMXRT::read()+0x48>
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
     d82:	69e0      	ldr	r0, [r4, #28]
     d84:	f3c0 0009 	ubfx	r0, r0, #0, #10
     d88:	e7f9      	b.n	d7e <HardwareSerialIMXRT::read()+0x86>
     d8a:	bf00      	nop

00000d8c <HardwareSerialIMXRT::flush()>:

void HardwareSerialIMXRT::flush(void)
{
	while (transmitting_) yield(); // wait
     d8c:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
     d90:	b143      	cbz	r3, da4 <HardwareSerialIMXRT::flush()+0x18>
{
     d92:	b510      	push	{r4, lr}
     d94:	4604      	mov	r4, r0
	while (transmitting_) yield(); // wait
     d96:	f002 f83f 	bl	2e18 <yield>
     d9a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
     d9e:	2b00      	cmp	r3, #0
     da0:	d1f9      	bne.n	d96 <HardwareSerialIMXRT::flush()+0xa>
}
     da2:	bd10      	pop	{r4, pc}
     da4:	4770      	bx	lr
     da6:	bf00      	nop

00000da8 <HardwareSerialIMXRT::end()>:
{
     da8:	b538      	push	{r3, r4, r5, lr}
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
     daa:	e9d0 5304 	ldrd	r5, r3, [r0, #16]
	if (!(hardware->ccm_register & hardware->ccm_value)) return;
     dae:	e9d3 1203 	ldrd	r1, r2, [r3, #12]
     db2:	6809      	ldr	r1, [r1, #0]
     db4:	4211      	tst	r1, r2
     db6:	d028      	beq.n	e0a <HardwareSerialIMXRT::end()+0x62>
	while (transmitting_) yield();  // wait for buffered data to send
     db8:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
     dbc:	4604      	mov	r4, r0
     dbe:	b132      	cbz	r2, dce <HardwareSerialIMXRT::end()+0x26>
     dc0:	f002 f82a 	bl	2e18 <yield>
     dc4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
     dc8:	2b00      	cmp	r3, #0
     dca:	d1f9      	bne.n	dc0 <HardwareSerialIMXRT::end()+0x18>
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = 5;
     dcc:	6963      	ldr	r3, [r4, #20]
	port->CTRL = 0;	// disable the TX and RX ...
     dce:	2100      	movs	r1, #0
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = 5;
     dd0:	4a0e      	ldr	r2, [pc, #56]	; (e0c <HardwareSerialIMXRT::end()+0x64>)
	port->CTRL = 0;	// disable the TX and RX ...
     dd2:	61a9      	str	r1, [r5, #24]
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = 5;
     dd4:	7e20      	ldrb	r0, [r4, #24]
     dd6:	eb03 1000 	add.w	r0, r3, r0, lsl #4
     dda:	7d00      	ldrb	r0, [r0, #20]
     ddc:	eb02 1000 	add.w	r0, r2, r0, lsl #4
     de0:	6845      	ldr	r5, [r0, #4]
     de2:	2005      	movs	r0, #5
     de4:	6028      	str	r0, [r5, #0]
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = 5;
     de6:	7e65      	ldrb	r5, [r4, #25]
     de8:	eb03 1305 	add.w	r3, r3, r5, lsl #4
     dec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
     df0:	eb02 1203 	add.w	r2, r2, r3, lsl #4
	if (rts_pin_baseReg_) rts_deassert();
     df4:	6da3      	ldr	r3, [r4, #88]	; 0x58
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = 5;
     df6:	6852      	ldr	r2, [r2, #4]
     df8:	6010      	str	r0, [r2, #0]
	rx_buffer_head_ = 0;
     dfa:	f8a4 104a 	strh.w	r1, [r4, #74]	; 0x4a
	rx_buffer_tail_ = 0;
     dfe:	f8a4 104c 	strh.w	r1, [r4, #76]	; 0x4c
	if (rts_pin_baseReg_) rts_deassert();
     e02:	b113      	cbz	r3, e0a <HardwareSerialIMXRT::end()+0x62>
	DIRECT_WRITE_HIGH(rts_pin_baseReg_, rts_pin_bitmask_);
     e04:	6de2      	ldr	r2, [r4, #92]	; 0x5c
     e06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
     e0a:	bd38      	pop	{r3, r4, r5, pc}
     e0c:	20007268 	.word	0x20007268

00000e10 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)>:
	float base = (float)UART_CLOCK / (float)baud;
     e10:	ee07 1a90 	vmov	s15, r1
     e14:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 1080 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x270>
	for (int osr=4; osr <= 32; osr++) {
     e18:	2104      	movs	r1, #4
		int divint = (int)(div + 0.5f);
     e1a:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
	float base = (float)UART_CLOCK / (float)baud;
     e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
	float besterr = 1e20;
     e22:	ed9f 6a98 	vldr	s12, [pc, #608]	; 1084 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x274>
     e26:	f641 7cff 	movw	ip, #8191	; 0x1fff
	float base = (float)UART_CLOCK / (float)baud;
     e2a:	eec7 5a27 	vdiv.f32	s11, s14, s15
{
     e2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int bestosr = 4;
     e32:	468e      	mov	lr, r1
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
     e34:	6905      	ldr	r5, [r0, #16]
	int bestdiv = 1;
     e36:	2401      	movs	r4, #1
		float div = base / (float)osr;
     e38:	ee07 1a90 	vmov	s15, r1
     e3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
     e40:	ee85 7aa7 	vdiv.f32	s14, s11, s15
		int divint = (int)(div + 0.5f);
     e44:	ee77 7a05 	vadd.f32	s15, s14, s10
     e48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
     e4c:	ee17 3a90 	vmov	r3, s15
     e50:	4563      	cmp	r3, ip
     e52:	bfa8      	it	ge
     e54:	4663      	movge	r3, ip
     e56:	2b01      	cmp	r3, #1
     e58:	bfb8      	it	lt
     e5a:	2301      	movlt	r3, #1
		float err = ((float)divint - div) / div;
     e5c:	ee07 3a90 	vmov	s15, r3
     e60:	eef8 6ae7 	vcvt.f32.s32	s13, s15
     e64:	ee76 6ac7 	vsub.f32	s13, s13, s14
     e68:	eec6 7a87 	vdiv.f32	s15, s13, s14
		if (err < 0.0f) err = -err;
     e6c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
     e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     e74:	bf48      	it	mi
     e76:	eef1 7a67 	vnegmi.f32	s15, s15
		if (err <= besterr) {
     e7a:	eef4 7ac6 	vcmpe.f32	s15, s12
     e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     e82:	d803      	bhi.n	e8c <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x7c>
			besterr = err;
     e84:	eeb0 6a67 	vmov.f32	s12, s15
		if (err <= besterr) {
     e88:	468e      	mov	lr, r1
			bestdiv = divint;
     e8a:	461c      	mov	r4, r3
	for (int osr=4; osr <= 32; osr++) {
     e8c:	3101      	adds	r1, #1
     e8e:	2921      	cmp	r1, #33	; 0x21
     e90:	d1d2      	bne.n	e38 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x28>
	rx_buffer_head_ = 0;
     e92:	2100      	movs	r1, #0
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
     e94:	6943      	ldr	r3, [r0, #20]
     e96:	f402 7600 	and.w	r6, r2, #512	; 0x200
	rx_buffer_head_ = 0;
     e9a:	f8a0 104a 	strh.w	r1, [r0, #74]	; 0x4a
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
     e9e:	f8b3 c05a 	ldrh.w	ip, [r3, #90]	; 0x5a
	half_duplex_mode_ = (format & SERIAL_HALF_DUPLEX) != 0;
     ea2:	428e      	cmp	r6, r1
	rx_buffer_tail_ = 0;
     ea4:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
     ea8:	f8b3 6058 	ldrh.w	r6, [r3, #88]	; 0x58
	tx_buffer_head_ = 0;
     eac:	f8a0 1046 	strh.w	r1, [r0, #70]	; 0x46
	tx_buffer_tail_ = 0;
     eb0:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
	transmitting_ = 0;
     eb4:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
     eb8:	6b81      	ldr	r1, [r0, #56]	; 0x38
	hardware->ccm_register |= hardware->ccm_value;
     eba:	68df      	ldr	r7, [r3, #12]
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
     ebc:	eba1 0606 	sub.w	r6, r1, r6
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
     ec0:	eba1 010c 	sub.w	r1, r1, ip
     ec4:	e9c0 610f 	strd	r6, r1, [r0, #60]	; 0x3c
	hardware->ccm_register |= hardware->ccm_value;
     ec8:	6839      	ldr	r1, [r7, #0]
     eca:	691e      	ldr	r6, [r3, #16]
     ecc:	ea41 0106 	orr.w	r1, r1, r6
     ed0:	6039      	str	r1, [r7, #0]
	half_duplex_mode_ = (format & SERIAL_HALF_DUPLEX) != 0;
     ed2:	bf14      	ite	ne
     ed4:	2101      	movne	r1, #1
     ed6:	2100      	moveq	r1, #0
     ed8:	7681      	strb	r1, [r0, #26]
	if (!half_duplex_mode_)  {
     eda:	f040 80ac 	bne.w	1036 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x226>
		*(portControlRegister(hardware->rx_pins[rx_pin_index_].pin)) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     ede:	7e01      	ldrb	r1, [r0, #24]
     ee0:	4e69      	ldr	r6, [pc, #420]	; (1088 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x278>)
     ee2:	eb03 1801 	add.w	r8, r3, r1, lsl #4
     ee6:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 10a8 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x298>
     eea:	f898 7014 	ldrb.w	r7, [r8, #20]
		if (hardware->rx_pins[rx_pin_index_].select_input_register) {
     eee:	f8d8 a01c 	ldr.w	sl, [r8, #28]
		*(portControlRegister(hardware->rx_pins[rx_pin_index_].pin)) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     ef2:	eb06 1707 	add.w	r7, r6, r7, lsl #4
     ef6:	68b9      	ldr	r1, [r7, #8]
     ef8:	f8c1 9000 	str.w	r9, [r1]
		*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = hardware->rx_pins[rx_pin_index_].mux_val;
     efc:	6879      	ldr	r1, [r7, #4]
     efe:	f8d8 7018 	ldr.w	r7, [r8, #24]
     f02:	600f      	str	r7, [r1, #0]
		if (hardware->rx_pins[rx_pin_index_].select_input_register) {
     f04:	f1ba 0f00 	cmp.w	sl, #0
     f08:	d003      	beq.n	f12 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x102>
		 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
     f0a:	f8d8 1020 	ldr.w	r1, [r8, #32]
     f0e:	f8ca 1000 	str.w	r1, [sl]
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
     f12:	7e47      	ldrb	r7, [r0, #25]
     f14:	21d9      	movs	r1, #217	; 0xd9
     f16:	eb03 1807 	add.w	r8, r3, r7, lsl #4
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3) 
     f1a:	f898 c034 	ldrb.w	ip, [r8, #52]	; 0x34
     f1e:	eb06 1c0c 	add.w	ip, r6, ip, lsl #4
     f22:	f8dc 7008 	ldr.w	r7, [ip, #8]
     f26:	6039      	str	r1, [r7, #0]
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
     f28:	f8dc 1004 	ldr.w	r1, [ip, #4]
     f2c:	f8d8 7038 	ldr.w	r7, [r8, #56]	; 0x38
     f30:	600f      	str	r7, [r1, #0]
	if (hardware->tx_pins[tx_pin_index_].select_input_register) {
     f32:	7e41      	ldrb	r1, [r0, #25]
     f34:	eb03 1101 	add.w	r1, r3, r1, lsl #4
     f38:	6bcf      	ldr	r7, [r1, #60]	; 0x3c
     f3a:	b10f      	cbz	r7, f40 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x130>
	 	*(hardware->tx_pins[tx_pin_index_].select_input_register) =  hardware->tx_pins[tx_pin_index_].select_val;		
     f3c:	6c09      	ldr	r1, [r1, #64]	; 0x40
     f3e:	6039      	str	r1, [r7, #0]
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
     f40:	f10e 31ff 	add.w	r1, lr, #4294967295
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
     f44:	f1be 0f08 	cmp.w	lr, #8
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
     f48:	ea4f 6101 	mov.w	r1, r1, lsl #24
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
     f4c:	bfcc      	ite	gt
     f4e:	f04f 0e00 	movgt.w	lr, #0
     f52:	f04f 0e01 	movle.w	lr, #1
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
     f56:	f001 51f8 	and.w	r1, r1, #520093696	; 0x1f000000
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
     f5a:	ea44 444e 	orr.w	r4, r4, lr, lsl #17
     f5e:	4321      	orrs	r1, r4
	attachInterruptVector(hardware->irq, hardware->irq_handler);
     f60:	685c      	ldr	r4, [r3, #4]
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
     f62:	6129      	str	r1, [r5, #16]
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
     f64:	7859      	ldrb	r1, [r3, #1]
     f66:	f101 0310 	add.w	r3, r1, #16
	port->PINCFG = 0;
     f6a:	2100      	movs	r1, #0
     f6c:	60e9      	str	r1, [r5, #12]
     f6e:	4947      	ldr	r1, [pc, #284]	; (108c <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x27c>)
     f70:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
     f74:	6941      	ldr	r1, [r0, #20]
	NVIC_ENABLE_IRQ(hardware->irq);
     f76:	f04f 0e01 	mov.w	lr, #1
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
     f7a:	4c45      	ldr	r4, [pc, #276]	; (1090 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x280>)
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
     f7c:	f002 0c03 	and.w	ip, r2, #3
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
     f80:	784f      	ldrb	r7, [r1, #1]
     f82:	f891 1056 	ldrb.w	r1, [r1, #86]	; 0x56
	NVIC_ENABLE_IRQ(hardware->irq);
     f86:	4b43      	ldr	r3, [pc, #268]	; (1094 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x284>)
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
     f88:	5539      	strb	r1, [r7, r4]
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
     f8a:	f04f 1702 	mov.w	r7, #131074	; 0x20002
	NVIC_ENABLE_IRQ(hardware->irq);
     f8e:	6944      	ldr	r4, [r0, #20]
     f90:	7861      	ldrb	r1, [r4, #1]
     f92:	eb03 1351 	add.w	r3, r3, r1, lsr #5
     f96:	f001 011f 	and.w	r1, r1, #31
     f9a:	009b      	lsls	r3, r3, #2
     f9c:	fa0e f101 	lsl.w	r1, lr, r1
     fa0:	6019      	str	r1, [r3, #0]
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
     fa2:	62ef      	str	r7, [r5, #44]	; 0x2c
	port->FIFO |= LPUART_FIFO_TXFE | LPUART_FIFO_RXFE;
     fa4:	6aab      	ldr	r3, [r5, #40]	; 0x28
     fa6:	f043 0388 	orr.w	r3, r3, #136	; 0x88
     faa:	62ab      	str	r3, [r5, #40]	; 0x28
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
     fac:	0753      	lsls	r3, r2, #29
     fae:	d43e      	bmi.n	102e <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x21e>
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
     fb0:	f44c 1370 	orr.w	r3, ip, #3932160	; 0x3c0000
	if ((format & 0x0F) == 0x04) ctrl |=  LPUART_CTRL_R9T8; // 8N2 is 9 bit with 9th bit always 1
     fb4:	f002 010f 	and.w	r1, r2, #15
     fb8:	2904      	cmp	r1, #4
     fba:	bf08      	it	eq
     fbc:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
	if (format & 0x20) {
     fc0:	0697      	lsls	r7, r2, #26
     fc2:	d52e      	bpl.n	1022 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x212>
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
     fc4:	7e81      	ldrb	r1, [r0, #26]
		ctrl |= LPUART_CTRL_TXINV;		// tx invert
     fc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
     fca:	2900      	cmp	r1, #0
     fcc:	d13a      	bne.n	1044 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x234>
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
     fce:	0716      	lsls	r6, r2, #28
	port->CTRL = ctrl;
     fd0:	61ab      	str	r3, [r5, #24]
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
     fd2:	d503      	bpl.n	fdc <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1cc>
     fd4:	692b      	ldr	r3, [r5, #16]
     fd6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
     fda:	612b      	str	r3, [r5, #16]
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
     fdc:	696b      	ldr	r3, [r5, #20]
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
     fde:	06d1      	lsls	r1, r2, #27
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
     fe0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
     fe4:	bf48      	it	mi
     fe6:	f043 5380 	orrmi.w	r3, r3, #268435456	; 0x10000000
	port->STAT = c;
     fea:	616b      	str	r3, [r5, #20]
	if ( format & 0x100) port->BAUD |= LPUART_BAUD_SBNS;	
     fec:	05d3      	lsls	r3, r2, #23
     fee:	d503      	bpl.n	ff8 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1e8>
     ff0:	692b      	ldr	r3, [r5, #16]
     ff2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     ff6:	612b      	str	r3, [r5, #16]
	if (hardware->_serialEvent) addToSerialEventsList();
     ff8:	68a3      	ldr	r3, [r4, #8]
     ffa:	b183      	cbz	r3, 101e <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x20e>
	//digitalWrite(4, LOW);
}


void HardwareSerialIMXRT::addToSerialEventsList() {
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
     ffc:	4e26      	ldr	r6, [pc, #152]	; (1098 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x288>)
     ffe:	7834      	ldrb	r4, [r6, #0]
    1000:	2c00      	cmp	r4, #0
    1002:	d03a      	beq.n	107a <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x26a>
    1004:	1e61      	subs	r1, r4, #1
    1006:	4d25      	ldr	r5, [pc, #148]	; (109c <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x28c>)
    1008:	b2c9      	uxtb	r1, r1
    100a:	1f2b      	subs	r3, r5, #4
    100c:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    1010:	e001      	b.n	1016 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x206>
    1012:	4299      	cmp	r1, r3
    1014:	d025      	beq.n	1062 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x252>
		if (s_serials_with_serial_events[i] == this) return; // already in the list.
    1016:	f853 2f04 	ldr.w	r2, [r3, #4]!
    101a:	4290      	cmp	r0, r2
    101c:	d1f9      	bne.n	1012 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x202>
};
    101e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
    1022:	7e81      	ldrb	r1, [r0, #26]
    1024:	2900      	cmp	r1, #0
    1026:	d0d2      	beq.n	fce <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1be>
    1028:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
    102c:	e7cf      	b.n	fce <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1be>
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
    102e:	4b1c      	ldr	r3, [pc, #112]	; (10a0 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x290>)
    1030:	ea4c 0303 	orr.w	r3, ip, r3
    1034:	e7be      	b.n	fb4 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1a4>
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3) 
    1036:	7e47      	ldrb	r7, [r0, #25]
    1038:	f24f 01d9 	movw	r1, #61657	; 0xf0d9
    103c:	4e12      	ldr	r6, [pc, #72]	; (1088 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x278>)
    103e:	eb03 1807 	add.w	r8, r3, r7, lsl #4
    1042:	e76a      	b.n	f1a <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x10a>
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
    1044:	7e41      	ldrb	r1, [r0, #25]
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
    1046:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
    104a:	eb04 1101 	add.w	r1, r4, r1, lsl #4
    104e:	f891 1034 	ldrb.w	r1, [r1, #52]	; 0x34
    1052:	eb06 1601 	add.w	r6, r6, r1, lsl #4
    1056:	68b6      	ldr	r6, [r6, #8]
    1058:	6831      	ldr	r1, [r6, #0]
    105a:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
    105e:	6031      	str	r1, [r6, #0]
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
    1060:	e7b5      	b.n	fce <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1be>
	}
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    1062:	1c63      	adds	r3, r4, #1
    1064:	b2db      	uxtb	r3, r3
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    1066:	4a0f      	ldr	r2, [pc, #60]	; (10a4 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x294>)
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    1068:	7033      	strb	r3, [r6, #0]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    106a:	7813      	ldrb	r3, [r2, #0]
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    106c:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    1070:	f043 0302 	orr.w	r3, r3, #2
    1074:	7013      	strb	r3, [r2, #0]
};
    1076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    107a:	2301      	movs	r3, #1
    107c:	4d07      	ldr	r5, [pc, #28]	; (109c <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x28c>)
    107e:	e7f2      	b.n	1066 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x256>
    1080:	4bb71b00 	.word	0x4bb71b00
    1084:	60ad78ec 	.word	0x60ad78ec
    1088:	20007268 	.word	0x20007268
    108c:	20008400 	.word	0x20008400
    1090:	e000e400 	.word	0xe000e400
    1094:	38003840 	.word	0x38003840
    1098:	20008cd7 	.word	0x20008cd7
    109c:	200089c0 	.word	0x200089c0
    10a0:	003c0010 	.word	0x003c0010
    10a4:	20008ce5 	.word	0x20008ce5
    10a8:	0001f038 	.word	0x0001f038

000010ac <nvic_execution_priority()>:
	__asm__ volatile("mrs %0, faultmask\n" : "=r" (faultmask)::);
    10ac:	f3ef 8013 	mrs	r0, FAULTMASK
	if (faultmask) return -1;
    10b0:	b9b8      	cbnz	r0, 10e2 <nvic_execution_priority()+0x36>
	__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    10b2:	f3ef 8310 	mrs	r3, PRIMASK
	if (primask) return 0;
    10b6:	b94b      	cbnz	r3, 10cc <nvic_execution_priority()+0x20>
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    10b8:	f3ef 8205 	mrs	r2, IPSR
	if (ipsr) {
    10bc:	b93a      	cbnz	r2, 10ce <nvic_execution_priority()+0x22>
	uint32_t priority=256;
    10be:	f44f 7380 	mov.w	r3, #256	; 0x100
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    10c2:	f3ef 8011 	mrs	r0, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    10c6:	b150      	cbz	r0, 10de <nvic_execution_priority()+0x32>
    10c8:	4298      	cmp	r0, r3
    10ca:	d208      	bcs.n	10de <nvic_execution_priority()+0x32>
}
    10cc:	4770      	bx	lr
		if (ipsr < 16) priority = 0; // could be non-zero
    10ce:	2a0f      	cmp	r2, #15
    10d0:	d9f7      	bls.n	10c2 <nvic_execution_priority()+0x16>
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
    10d2:	4b05      	ldr	r3, [pc, #20]	; (10e8 <nvic_execution_priority()+0x3c>)
    10d4:	5c9b      	ldrb	r3, [r3, r2]
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    10d6:	f3ef 8011 	mrs	r0, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    10da:	2800      	cmp	r0, #0
    10dc:	d1f4      	bne.n	10c8 <nvic_execution_priority()+0x1c>
    10de:	4618      	mov	r0, r3
	return priority;
    10e0:	4770      	bx	lr
	if (faultmask) return -1;
    10e2:	f04f 30ff 	mov.w	r0, #4294967295
    10e6:	e7f1      	b.n	10cc <nvic_execution_priority()+0x20>
    10e8:	e000e3f0 	.word	0xe000e3f0

000010ec <HardwareSerialIMXRT::write9bit(unsigned long)>:
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
    10ec:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
    10ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    10f2:	4604      	mov	r4, r0
    10f4:	460f      	mov	r7, r1
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    10f6:	6906      	ldr	r6, [r0, #16]
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
    10f8:	b113      	cbz	r3, 1100 <HardwareSerialIMXRT::write9bit(unsigned long)+0x14>
    10fa:	6d42      	ldr	r2, [r0, #84]	; 0x54
    10fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	if(half_duplex_mode_) {		
    1100:	7ea3      	ldrb	r3, [r4, #26]
    1102:	b12b      	cbz	r3, 1110 <HardwareSerialIMXRT::write9bit(unsigned long)+0x24>
		__disable_irq();
    1104:	b672      	cpsid	i
	    port->CTRL |= LPUART_CTRL_TXDIR;
    1106:	69b3      	ldr	r3, [r6, #24]
    1108:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    110c:	61b3      	str	r3, [r6, #24]
		__enable_irq();
    110e:	b662      	cpsie	i
	head = tx_buffer_head_;
    1110:	f8b4 5046 	ldrh.w	r5, [r4, #70]	; 0x46
	if (++head >= tx_buffer_total_size_) head = 0;
    1114:	6b63      	ldr	r3, [r4, #52]	; 0x34
	head = tx_buffer_head_;
    1116:	b2ad      	uxth	r5, r5
	if (++head >= tx_buffer_total_size_) head = 0;
    1118:	3501      	adds	r5, #1
    111a:	42ab      	cmp	r3, r5
    111c:	d84c      	bhi.n	11b8 <HardwareSerialIMXRT::write9bit(unsigned long)+0xcc>
    111e:	f04f 0800 	mov.w	r8, #0
    1122:	4645      	mov	r5, r8
	while (tx_buffer_tail_ == head) {
    1124:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    1128:	b29b      	uxth	r3, r3
    112a:	429d      	cmp	r5, r3
    112c:	d019      	beq.n	1162 <HardwareSerialIMXRT::write9bit(unsigned long)+0x76>
    112e:	e028      	b.n	1182 <HardwareSerialIMXRT::write9bit(unsigned long)+0x96>
			if ((port->STAT & LPUART_STAT_TDRE)) {
    1130:	6973      	ldr	r3, [r6, #20]
    1132:	021b      	lsls	r3, r3, #8
    1134:	d510      	bpl.n	1158 <HardwareSerialIMXRT::write9bit(unsigned long)+0x6c>
				uint32_t tail = tx_buffer_tail_;
    1136:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
				if (++tail >= tx_buffer_total_size_) tail = 0;
    113a:	6b62      	ldr	r2, [r4, #52]	; 0x34
				uint32_t tail = tx_buffer_tail_;
    113c:	b29b      	uxth	r3, r3
				if (++tail >= tx_buffer_total_size_) tail = 0;
    113e:	3301      	adds	r3, #1
    1140:	429a      	cmp	r2, r3
    1142:	d936      	bls.n	11b2 <HardwareSerialIMXRT::write9bit(unsigned long)+0xc6>
				tx_buffer_tail_ = tail;
    1144:	b29a      	uxth	r2, r3
				if (tail < tx_buffer_size_) {
    1146:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    1148:	4299      	cmp	r1, r3
    114a:	d92d      	bls.n	11a8 <HardwareSerialIMXRT::write9bit(unsigned long)+0xbc>
					n = tx_buffer_[tail];
    114c:	69e1      	ldr	r1, [r4, #28]
    114e:	5ccb      	ldrb	r3, [r1, r3]
    1150:	b2db      	uxtb	r3, r3
				port->DATA  = n;
    1152:	61f3      	str	r3, [r6, #28]
				tx_buffer_tail_ = tail;
    1154:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
	while (tx_buffer_tail_ == head) {
    1158:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    115c:	b29b      	uxth	r3, r3
    115e:	42ab      	cmp	r3, r5
    1160:	d10f      	bne.n	1182 <HardwareSerialIMXRT::write9bit(unsigned long)+0x96>
		int priority = nvic_execution_priority();
    1162:	f7ff ffa3 	bl	10ac <nvic_execution_priority()>
		if (priority <= hardware->irq_priority) {
    1166:	6963      	ldr	r3, [r4, #20]
    1168:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
    116c:	4283      	cmp	r3, r0
    116e:	dadf      	bge.n	1130 <HardwareSerialIMXRT::write9bit(unsigned long)+0x44>
		} else if (priority >= 256) 
    1170:	28ff      	cmp	r0, #255	; 0xff
    1172:	ddf1      	ble.n	1158 <HardwareSerialIMXRT::write9bit(unsigned long)+0x6c>
			yield(); // wait
    1174:	f001 fe50 	bl	2e18 <yield>
	while (tx_buffer_tail_ == head) {
    1178:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    117c:	b29b      	uxth	r3, r3
    117e:	42ab      	cmp	r3, r5
    1180:	d0ef      	beq.n	1162 <HardwareSerialIMXRT::write9bit(unsigned long)+0x76>
	if (head < tx_buffer_size_) {
    1182:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1184:	42ab      	cmp	r3, r5
    1186:	d91a      	bls.n	11be <HardwareSerialIMXRT::write9bit(unsigned long)+0xd2>
		tx_buffer_[head] = c;
    1188:	b2ff      	uxtb	r7, r7
    118a:	69e3      	ldr	r3, [r4, #28]
    118c:	555f      	strb	r7, [r3, r5]
	__disable_irq();
    118e:	b672      	cpsid	i
	transmitting_ = 1;
    1190:	2001      	movs	r0, #1
    1192:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
	tx_buffer_head_ = head;
    1196:	f8a4 8046 	strh.w	r8, [r4, #70]	; 0x46
	port->CTRL |= LPUART_CTRL_TIE; // (may need to handle this issue)BITBAND_SET_BIT(LPUART0_CTRL, TIE_BIT);
    119a:	69b3      	ldr	r3, [r6, #24]
    119c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    11a0:	61b3      	str	r3, [r6, #24]
	__enable_irq();
    11a2:	b662      	cpsie	i
}
    11a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					n = tx_buffer_storage_[tail-tx_buffer_size_];
    11a8:	1a5b      	subs	r3, r3, r1
    11aa:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    11ac:	5ccb      	ldrb	r3, [r1, r3]
    11ae:	b2db      	uxtb	r3, r3
    11b0:	e7cf      	b.n	1152 <HardwareSerialIMXRT::write9bit(unsigned long)+0x66>
    11b2:	2200      	movs	r2, #0
				if (++tail >= tx_buffer_total_size_) tail = 0;
    11b4:	4613      	mov	r3, r2
    11b6:	e7c6      	b.n	1146 <HardwareSerialIMXRT::write9bit(unsigned long)+0x5a>
	tx_buffer_head_ = head;
    11b8:	fa1f f885 	uxth.w	r8, r5
    11bc:	e7b2      	b.n	1124 <HardwareSerialIMXRT::write9bit(unsigned long)+0x38>
		tx_buffer_storage_[head - tx_buffer_size_] = c;
    11be:	1aed      	subs	r5, r5, r3
    11c0:	b2ff      	uxtb	r7, r7
    11c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    11c4:	555f      	strb	r7, [r3, r5]
    11c6:	e7e2      	b.n	118e <HardwareSerialIMXRT::write9bit(unsigned long)+0xa2>

000011c8 <HardwareSerialIMXRT::write(unsigned char)>:
	return write9bit(c);
    11c8:	f7ff bf90 	b.w	10ec <HardwareSerialIMXRT::write9bit(unsigned long)>

000011cc <HardwareSerialIMXRT::IRQHandler()>:
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    11cc:	6902      	ldr	r2, [r0, #16]
	if (port->STAT & (LPUART_STAT_RDRF | LPUART_STAT_IDLE)) {
    11ce:	6953      	ldr	r3, [r2, #20]
    11d0:	f413 1f40 	tst.w	r3, #3145728	; 0x300000
{
    11d4:	b570      	push	{r4, r5, r6, lr}
	if (port->STAT & (LPUART_STAT_RDRF | LPUART_STAT_IDLE)) {
    11d6:	d043      	beq.n	1260 <HardwareSerialIMXRT::IRQHandler()+0x94>
		uint8_t avail = (port->WATER >> 24) & 0x7;
    11d8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
		if (avail) {
    11da:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
		uint8_t avail = (port->WATER >> 24) & 0x7;
    11de:	f3c3 6e02 	ubfx	lr, r3, #24, #3
		if (avail) {
    11e2:	d03a      	beq.n	125a <HardwareSerialIMXRT::IRQHandler()+0x8e>
			head = rx_buffer_head_;
    11e4:	f8b0 504a 	ldrh.w	r5, [r0, #74]	; 0x4a
			tail = rx_buffer_tail_;
    11e8:	f8b0 604c 	ldrh.w	r6, [r0, #76]	; 0x4c
			head = rx_buffer_head_;
    11ec:	b2ad      	uxth	r5, r5
			tail = rx_buffer_tail_;
    11ee:	b2b6      	uxth	r6, r6
    11f0:	e007      	b.n	1202 <HardwareSerialIMXRT::IRQHandler()+0x36>
						rx_buffer_[head] = n;
    11f2:	6a01      	ldr	r1, [r0, #32]
    11f4:	f801 c003 	strb.w	ip, [r1, r3]
			} while (--avail > 0) ;
    11f8:	f10e 33ff 	add.w	r3, lr, #4294967295
    11fc:	f013 0eff 	ands.w	lr, r3, #255	; 0xff
    1200:	d01d      	beq.n	123e <HardwareSerialIMXRT::IRQHandler()+0x72>
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    1202:	69d1      	ldr	r1, [r2, #28]
				newhead = head + 1;
    1204:	1c6b      	adds	r3, r5, #1
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    1206:	6b84      	ldr	r4, [r0, #56]	; 0x38
				if (newhead != rx_buffer_tail_) {
    1208:	f8b0 c04c 	ldrh.w	ip, [r0, #76]	; 0x4c
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    120c:	f3c1 0109 	ubfx	r1, r1, #0, #10
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    1210:	429c      	cmp	r4, r3
    1212:	bf98      	it	ls
    1214:	2300      	movls	r3, #0
				if (newhead != rx_buffer_tail_) {
    1216:	fa1f fc8c 	uxth.w	ip, ip
    121a:	459c      	cmp	ip, r3
    121c:	d0ec      	beq.n	11f8 <HardwareSerialIMXRT::IRQHandler()+0x2c>
					if (newhead < rx_buffer_size_) {
    121e:	6b04      	ldr	r4, [r0, #48]	; 0x30
						rx_buffer_[head] = n;
    1220:	fa5f fc81 	uxtb.w	ip, r1
    1224:	461d      	mov	r5, r3
					if (newhead < rx_buffer_size_) {
    1226:	429c      	cmp	r4, r3
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    1228:	eba3 0404 	sub.w	r4, r3, r4
					if (newhead < rx_buffer_size_) {
    122c:	d8e1      	bhi.n	11f2 <HardwareSerialIMXRT::IRQHandler()+0x26>
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    122e:	6a43      	ldr	r3, [r0, #36]	; 0x24
    1230:	f803 c004 	strb.w	ip, [r3, r4]
			} while (--avail > 0) ;
    1234:	f10e 33ff 	add.w	r3, lr, #4294967295
    1238:	f013 0eff 	ands.w	lr, r3, #255	; 0xff
    123c:	d1e1      	bne.n	1202 <HardwareSerialIMXRT::IRQHandler()+0x36>
			rx_buffer_head_ = head;
    123e:	b2ab      	uxth	r3, r5
    1240:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
			if (rts_pin_baseReg_) {
    1244:	6d83      	ldr	r3, [r0, #88]	; 0x58
    1246:	b143      	cbz	r3, 125a <HardwareSerialIMXRT::IRQHandler()+0x8e>
				if (head >= tail) avail = head - tail;
    1248:	42b5      	cmp	r5, r6
    124a:	d354      	bcc.n	12f6 <HardwareSerialIMXRT::IRQHandler()+0x12a>
    124c:	1bad      	subs	r5, r5, r6
				if (avail >= rts_high_watermark_) rts_deassert();
    124e:	6c01      	ldr	r1, [r0, #64]	; 0x40
    1250:	42a9      	cmp	r1, r5
    1252:	d802      	bhi.n	125a <HardwareSerialIMXRT::IRQHandler()+0x8e>
	DIRECT_WRITE_HIGH(rts_pin_baseReg_, rts_pin_bitmask_);
    1254:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
    1256:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		if (port->STAT & LPUART_STAT_IDLE) {
    125a:	6953      	ldr	r3, [r2, #20]
    125c:	02d9      	lsls	r1, r3, #11
    125e:	d445      	bmi.n	12ec <HardwareSerialIMXRT::IRQHandler()+0x120>
	ctrl = port->CTRL;
    1260:	6996      	ldr	r6, [r2, #24]
	if ((ctrl & LPUART_CTRL_TIE) && (port->STAT & LPUART_STAT_TDRE))
    1262:	0233      	lsls	r3, r6, #8
    1264:	d528      	bpl.n	12b8 <HardwareSerialIMXRT::IRQHandler()+0xec>
    1266:	6953      	ldr	r3, [r2, #20]
    1268:	021d      	lsls	r5, r3, #8
    126a:	d525      	bpl.n	12b8 <HardwareSerialIMXRT::IRQHandler()+0xec>
		head = tx_buffer_head_;
    126c:	f8b0 5046 	ldrh.w	r5, [r0, #70]	; 0x46
		tail = tx_buffer_tail_;
    1270:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
		head = tx_buffer_head_;
    1274:	b2ad      	uxth	r5, r5
		tail = tx_buffer_tail_;
    1276:	b29b      	uxth	r3, r3
    1278:	e006      	b.n	1288 <HardwareSerialIMXRT::IRQHandler()+0xbc>
				n = tx_buffer_[tail];
    127a:	69c1      	ldr	r1, [r0, #28]
    127c:	5cc9      	ldrb	r1, [r1, r3]
    127e:	b2c9      	uxtb	r1, r1
			port->DATA = n;
    1280:	61d1      	str	r1, [r2, #28]
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
    1282:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    1284:	054c      	lsls	r4, r1, #21
    1286:	d412      	bmi.n	12ae <HardwareSerialIMXRT::IRQHandler()+0xe2>
			if (head == tail) break;
    1288:	42ab      	cmp	r3, r5
    128a:	d038      	beq.n	12fe <HardwareSerialIMXRT::IRQHandler()+0x132>
			if (++tail >= tx_buffer_total_size_) tail = 0;
    128c:	6b44      	ldr	r4, [r0, #52]	; 0x34
    128e:	3301      	adds	r3, #1
			if (tail < tx_buffer_size_) {
    1290:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			if (++tail >= tx_buffer_total_size_) tail = 0;
    1292:	429c      	cmp	r4, r3
    1294:	bf98      	it	ls
    1296:	2300      	movls	r3, #0
			if (tail < tx_buffer_size_) {
    1298:	4299      	cmp	r1, r3
				n = tx_buffer_storage_[tail-tx_buffer_size_];
    129a:	eba3 0401 	sub.w	r4, r3, r1
			if (tail < tx_buffer_size_) {
    129e:	d8ec      	bhi.n	127a <HardwareSerialIMXRT::IRQHandler()+0xae>
				n = tx_buffer_storage_[tail-tx_buffer_size_];
    12a0:	6a81      	ldr	r1, [r0, #40]	; 0x28
    12a2:	5d09      	ldrb	r1, [r1, r4]
    12a4:	b2c9      	uxtb	r1, r1
			port->DATA = n;
    12a6:	61d1      	str	r1, [r2, #28]
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
    12a8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    12aa:	054c      	lsls	r4, r1, #21
    12ac:	d5ec      	bpl.n	1288 <HardwareSerialIMXRT::IRQHandler()+0xbc>
		tx_buffer_tail_ = tail;
    12ae:	b299      	uxth	r1, r3
		if (head == tail) {
    12b0:	42ab      	cmp	r3, r5
		tx_buffer_tail_ = tail;
    12b2:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
		if (head == tail) {
    12b6:	d025      	beq.n	1304 <HardwareSerialIMXRT::IRQHandler()+0x138>
	if ((ctrl & LPUART_CTRL_TCIE) && (port->STAT & LPUART_STAT_TC))
    12b8:	0271      	lsls	r1, r6, #9
    12ba:	d516      	bpl.n	12ea <HardwareSerialIMXRT::IRQHandler()+0x11e>
    12bc:	6953      	ldr	r3, [r2, #20]
    12be:	025b      	lsls	r3, r3, #9
    12c0:	d513      	bpl.n	12ea <HardwareSerialIMXRT::IRQHandler()+0x11e>
		transmitting_ = 0;
    12c2:	2100      	movs	r1, #0
		if (transmit_pin_baseReg_) DIRECT_WRITE_LOW(transmit_pin_baseReg_, transmit_pin_bitmask_);
    12c4:	6d03      	ldr	r3, [r0, #80]	; 0x50
		transmitting_ = 0;
    12c6:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
		if (transmit_pin_baseReg_) DIRECT_WRITE_LOW(transmit_pin_baseReg_, transmit_pin_bitmask_);
    12ca:	b113      	cbz	r3, 12d2 <HardwareSerialIMXRT::IRQHandler()+0x106>
    12cc:	6d41      	ldr	r1, [r0, #84]	; 0x54
    12ce:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
		if(half_duplex_mode_) {		
    12d2:	7e83      	ldrb	r3, [r0, #26]
    12d4:	b12b      	cbz	r3, 12e2 <HardwareSerialIMXRT::IRQHandler()+0x116>
			__disable_irq();
    12d6:	b672      	cpsid	i
		    port->CTRL &= ~LPUART_CTRL_TXDIR;
    12d8:	6993      	ldr	r3, [r2, #24]
    12da:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
    12de:	6193      	str	r3, [r2, #24]
			__enable_irq();
    12e0:	b662      	cpsie	i
		port->CTRL &= ~LPUART_CTRL_TCIE;
    12e2:	6993      	ldr	r3, [r2, #24]
    12e4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
    12e8:	6193      	str	r3, [r2, #24]
}
    12ea:	bd70      	pop	{r4, r5, r6, pc}
			port->STAT |= LPUART_STAT_IDLE;	// writing a 1 to idle should clear it. 
    12ec:	6953      	ldr	r3, [r2, #20]
    12ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    12f2:	6153      	str	r3, [r2, #20]
    12f4:	e7b4      	b.n	1260 <HardwareSerialIMXRT::IRQHandler()+0x94>
				else avail = rx_buffer_total_size_ + head - tail;
    12f6:	6b81      	ldr	r1, [r0, #56]	; 0x38
    12f8:	1b89      	subs	r1, r1, r6
    12fa:	440d      	add	r5, r1
    12fc:	e7a7      	b.n	124e <HardwareSerialIMXRT::IRQHandler()+0x82>
		tx_buffer_tail_ = tail;
    12fe:	b29b      	uxth	r3, r3
    1300:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
			port->CTRL &= ~LPUART_CTRL_TIE; 
    1304:	6993      	ldr	r3, [r2, #24]
    1306:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    130a:	6193      	str	r3, [r2, #24]
  			port->CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
    130c:	6993      	ldr	r3, [r2, #24]
    130e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    1312:	6193      	str	r3, [r2, #24]
    1314:	e7d0      	b.n	12b8 <HardwareSerialIMXRT::IRQHandler()+0xec>
    1316:	bf00      	nop

00001318 <IRQHandler_Serial2>:
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest


void IRQHandler_Serial2()
{
	Serial2.IRQHandler();
    1318:	4801      	ldr	r0, [pc, #4]	; (1320 <IRQHandler_Serial2+0x8>)
    131a:	f7ff bf57 	b.w	11cc <HardwareSerialIMXRT::IRQHandler()>
    131e:	bf00      	nop
    1320:	20007b98 	.word	0x20007b98

00001324 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    1324:	4608      	mov	r0, r1
    1326:	f001 bce3 	b.w	2cf0 <usb_serial_putchar>
    132a:	bf00      	nop

0000132c <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>:
		base = 10;
    132c:	2a01      	cmp	r2, #1
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    132e:	b570      	push	{r4, r5, r6, lr}
		base = 10;
    1330:	bf08      	it	eq
    1332:	220a      	moveq	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    1334:	b08a      	sub	sp, #40	; 0x28
	if (n == 0) {
    1336:	b391      	cbz	r1, 139e <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x72>
		i = sizeof(buf) - 1;
    1338:	f04f 0e21 	mov.w	lr, #33	; 0x21
    133c:	e001      	b.n	1342 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x16>
			i--;
    133e:	fa5f fe86 	uxtb.w	lr, r6
    1342:	f10e 36ff 	add.w	r6, lr, #4294967295
			digit = n % base;
    1346:	fbb1 f5f2 	udiv	r5, r1, r2
    134a:	fb02 1415 	mls	r4, r2, r5, r1
    134e:	fa5f fc84 	uxtb.w	ip, r4
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1352:	2c09      	cmp	r4, #9
    1354:	f10c 0437 	add.w	r4, ip, #55	; 0x37
    1358:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
    135c:	bf98      	it	ls
    135e:	fa5f f48c 	uxtbls.w	r4, ip
    1362:	f10e 0c28 	add.w	ip, lr, #40	; 0x28
    1366:	bf88      	it	hi
    1368:	b2e4      	uxtbhi	r4, r4
			if (n == 0) break;
    136a:	4291      	cmp	r1, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    136c:	44ec      	add	ip, sp
			n /= base;
    136e:	4629      	mov	r1, r5
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1370:	f80c 4c24 	strb.w	r4, [ip, #-36]
			if (n == 0) break;
    1374:	d2e3      	bcs.n	133e <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x12>
	if (sign) {
    1376:	b14b      	cbz	r3, 138c <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x60>
		i--;
    1378:	f10e 3eff 	add.w	lr, lr, #4294967295
		buf[i] = '-';
    137c:	222d      	movs	r2, #45	; 0x2d
		i--;
    137e:	fa5f fe8e 	uxtb.w	lr, lr
		buf[i] = '-';
    1382:	f10e 0328 	add.w	r3, lr, #40	; 0x28
    1386:	446b      	add	r3, sp
    1388:	f803 2c24 	strb.w	r2, [r3, #-36]
	return write(buf + i, sizeof(buf) - i);
    138c:	6803      	ldr	r3, [r0, #0]
    138e:	a901      	add	r1, sp, #4
    1390:	f1ce 0222 	rsb	r2, lr, #34	; 0x22
    1394:	685b      	ldr	r3, [r3, #4]
    1396:	4471      	add	r1, lr
    1398:	4798      	blx	r3
}
    139a:	b00a      	add	sp, #40	; 0x28
    139c:	bd70      	pop	{r4, r5, r6, pc}
		buf[sizeof(buf) - 1] = '0';
    139e:	2230      	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    13a0:	f04f 0e21 	mov.w	lr, #33	; 0x21
		buf[sizeof(buf) - 1] = '0';
    13a4:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    13a8:	e7e5      	b.n	1376 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x4a>
    13aa:	bf00      	nop

000013ac <Print::write(unsigned char const*, unsigned int)>:
{
    13ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buffer == nullptr) return 0;
    13b0:	460c      	mov	r4, r1
    13b2:	b1d1      	cbz	r1, 13ea <Print::write(unsigned char const*, unsigned int)+0x3e>
	while (size--) count += write(*buffer++);
    13b4:	b1ea      	cbz	r2, 13f2 <Print::write(unsigned char const*, unsigned int)+0x46>
    13b6:	4680      	mov	r8, r0
    13b8:	188e      	adds	r6, r1, r2
	size_t count = 0;
    13ba:	2500      	movs	r5, #0
    13bc:	4f0e      	ldr	r7, [pc, #56]	; (13f8 <Print::write(unsigned char const*, unsigned int)+0x4c>)
    13be:	e004      	b.n	13ca <Print::write(unsigned char const*, unsigned int)+0x1e>
    13c0:	f001 fc96 	bl	2cf0 <usb_serial_putchar>
	while (size--) count += write(*buffer++);
    13c4:	42b4      	cmp	r4, r6
    13c6:	4405      	add	r5, r0
    13c8:	d00c      	beq.n	13e4 <Print::write(unsigned char const*, unsigned int)+0x38>
    13ca:	f8d8 3000 	ldr.w	r3, [r8]
    13ce:	f814 0b01 	ldrb.w	r0, [r4], #1
    13d2:	681b      	ldr	r3, [r3, #0]
    13d4:	42bb      	cmp	r3, r7
    13d6:	d0f3      	beq.n	13c0 <Print::write(unsigned char const*, unsigned int)+0x14>
    13d8:	4601      	mov	r1, r0
    13da:	4640      	mov	r0, r8
    13dc:	4798      	blx	r3
    13de:	42b4      	cmp	r4, r6
    13e0:	4405      	add	r5, r0
    13e2:	d1f2      	bne.n	13ca <Print::write(unsigned char const*, unsigned int)+0x1e>
}
    13e4:	4628      	mov	r0, r5
    13e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (buffer == nullptr) return 0;
    13ea:	460d      	mov	r5, r1
}
    13ec:	4628      	mov	r0, r5
    13ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (buffer == nullptr) return 0;
    13f2:	4615      	mov	r5, r2
    13f4:	e7f6      	b.n	13e4 <Print::write(unsigned char const*, unsigned int)+0x38>
    13f6:	bf00      	nop
    13f8:	00001325 	.word	0x00001325

000013fc <Print::print(long)>:
	if (n < 0) {
    13fc:	2900      	cmp	r1, #0
    13fe:	db03      	blt.n	1408 <Print::print(long)+0xc>
	uint8_t sign=0;
    1400:	2300      	movs	r3, #0
	if (base == 0) {
    1402:	220a      	movs	r2, #10
    1404:	f7ff bf92 	b.w	132c <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
		n = -n;
    1408:	4249      	negs	r1, r1
		sign = '-';
    140a:	232d      	movs	r3, #45	; 0x2d
	if (base == 0) {
    140c:	220a      	movs	r2, #10
    140e:	f7ff bf8d 	b.w	132c <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    1412:	bf00      	nop

00001414 <Print::println()>:
{
    1414:	b500      	push	{lr}
	return write(buf, 2);
    1416:	6803      	ldr	r3, [r0, #0]
{
    1418:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    141a:	f640 2c0d 	movw	ip, #2573	; 0xa0d
	return write(buf, 2);
    141e:	2202      	movs	r2, #2
    1420:	a901      	add	r1, sp, #4
    1422:	685b      	ldr	r3, [r3, #4]
	uint8_t buf[2]={'\r', '\n'};
    1424:	f8ad c004 	strh.w	ip, [sp, #4]
	return write(buf, 2);
    1428:	4798      	blx	r3
}
    142a:	b003      	add	sp, #12
    142c:	f85d fb04 	ldr.w	pc, [sp], #4

00001430 <_write>:
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    1430:	4b05      	ldr	r3, [pc, #20]	; (1448 <_write+0x18>)
    1432:	2802      	cmp	r0, #2
    1434:	bf88      	it	hi
    1436:	4603      	movhi	r3, r0
{
    1438:	b410      	push	{r4}
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    143a:	681c      	ldr	r4, [r3, #0]
    143c:	4618      	mov	r0, r3
    143e:	6863      	ldr	r3, [r4, #4]
}
    1440:	f85d 4b04 	ldr.w	r4, [sp], #4
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    1444:	4718      	bx	r3
    1446:	bf00      	nop
    1448:	20007b88 	.word	0x20007b88

0000144c <Print::printf(char const*, ...)>:
{
    144c:	b40e      	push	{r1, r2, r3}
    144e:	b500      	push	{lr}
    1450:	b082      	sub	sp, #8
    1452:	aa03      	add	r2, sp, #12
    1454:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, format);
    1458:	9201      	str	r2, [sp, #4]
	int retval = vdprintf((int)this, format, ap);
    145a:	f003 ff55 	bl	5308 <vdprintf>
}
    145e:	b002      	add	sp, #8
    1460:	f85d eb04 	ldr.w	lr, [sp], #4
    1464:	b003      	add	sp, #12
    1466:	4770      	bx	lr

00001468 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	if (base == 0) {
    1468:	b95a      	cbnz	r2, 1482 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x1a>
		return write((uint8_t)n);
    146a:	6803      	ldr	r3, [r0, #0]
    146c:	b2c9      	uxtb	r1, r1
    146e:	4a07      	ldr	r2, [pc, #28]	; (148c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x24>)
    1470:	681b      	ldr	r3, [r3, #0]
    1472:	4293      	cmp	r3, r2
{
    1474:	b500      	push	{lr}
    1476:	d106      	bne.n	1486 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x1e>
    1478:	4608      	mov	r0, r1
}
    147a:	f85d eb04 	ldr.w	lr, [sp], #4
    147e:	f001 bc37 	b.w	2cf0 <usb_serial_putchar>
    1482:	f7ff bf53 	b.w	132c <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    1486:	f85d eb04 	ldr.w	lr, [sp], #4
		return write((uint8_t)n);
    148a:	4718      	bx	r3
    148c:	00001325 	.word	0x00001325

00001490 <delay>:
	if (msec == 0) return;
    1490:	b900      	cbnz	r0, 1494 <delay+0x4>
    1492:	4770      	bx	lr
{
    1494:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    1498:	2101      	movs	r1, #1
    149a:	4681      	mov	r9, r0
    149c:	4c21      	ldr	r4, [pc, #132]	; (1524 <delay+0x94>)
    149e:	4d22      	ldr	r5, [pc, #136]	; (1528 <delay+0x98>)
    14a0:	4e22      	ldr	r6, [pc, #136]	; (152c <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    14a2:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    14a6:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    14a8:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    14aa:	e844 1300 	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    14ae:	2b00      	cmp	r3, #0
    14b0:	d1f7      	bne.n	14a2 <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    14b2:	491f      	ldr	r1, [pc, #124]	; (1530 <delay+0xa0>)
    14b4:	684b      	ldr	r3, [r1, #4]
	uint32_t usec = 1000*smc + frac;
    14b6:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    14ba:	f8df a078 	ldr.w	sl, [pc, #120]	; 1534 <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
    14be:	1a1b      	subs	r3, r3, r0
    14c0:	2701      	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
    14c2:	fb0b f802 	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    14c6:	f8da 2000 	ldr.w	r2, [sl]
    14ca:	fba3 3202 	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
    14ce:	455a      	cmp	r2, fp
    14d0:	bf94      	ite	ls
    14d2:	4490      	addls	r8, r2
    14d4:	44d8      	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    14d6:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    14da:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    14dc:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    14de:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    14e2:	2b00      	cmp	r3, #0
    14e4:	d1f7      	bne.n	14d6 <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    14e6:	684b      	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    14e8:	f8da c000 	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
    14ec:	1a1b      	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
    14ee:	fb0b f202 	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    14f2:	fba3 3c0c 	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
    14f6:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
    14fa:	bf94      	ite	ls
    14fc:	4462      	addls	r2, ip
    14fe:	f502 727a 	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
    1502:	eba2 0208 	sub.w	r2, r2, r8
    1506:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
    150a:	d306      	bcc.n	151a <delay+0x8a>
			if (--msec == 0) return;
    150c:	f1b9 0901 	subs.w	r9, r9, #1
			start += 1000;
    1510:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
    1514:	d1df      	bne.n	14d6 <delay+0x46>
}
    1516:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
    151a:	f001 fc7d 	bl	2e18 <yield>
		while ((micros() - start) >= 1000) {
    151e:	4904      	ldr	r1, [pc, #16]	; (1530 <delay+0xa0>)
    1520:	e7d9      	b.n	14d6 <delay+0x46>
    1522:	bf00      	nop
    1524:	20008cb8 	.word	0x20008cb8
    1528:	20008cb4 	.word	0x20008cb4
    152c:	20008cb0 	.word	0x20008cb0
    1530:	e0001000 	.word	0xe0001000
    1534:	20008cac 	.word	0x20008cac

00001538 <digitalWrite>:
	if (pin >= CORE_NUM_DIGITAL) return;
    1538:	2836      	cmp	r0, #54	; 0x36
    153a:	d816      	bhi.n	156a <digitalWrite+0x32>
	p = digital_pin_to_info_PGM + pin;
    153c:	0102      	lsls	r2, r0, #4
    153e:	4b10      	ldr	r3, [pc, #64]	; (1580 <digitalWrite+0x48>)
    1540:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
    1544:	589b      	ldr	r3, [r3, r2]
{
    1546:	b410      	push	{r4}
	mask = p->mask;
    1548:	68c2      	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
    154a:	685c      	ldr	r4, [r3, #4]
	if (pinmode & mask) {
    154c:	4214      	tst	r4, r2
    154e:	d005      	beq.n	155c <digitalWrite+0x24>
		if (val) {
    1550:	b961      	cbnz	r1, 156c <digitalWrite+0x34>
		}
	}
}
    1552:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x22) = mask; // clear register
    1556:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
    155a:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    155c:	6883      	ldr	r3, [r0, #8]
		if (val) {
    155e:	b151      	cbz	r1, 1576 <digitalWrite+0x3e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    1560:	4a08      	ldr	r2, [pc, #32]	; (1584 <digitalWrite+0x4c>)
}
    1562:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    1566:	601a      	str	r2, [r3, #0]
}
    1568:	4770      	bx	lr
    156a:	4770      	bx	lr
    156c:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x21) = mask; // set register
    1570:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    1574:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    1576:	4a04      	ldr	r2, [pc, #16]	; (1588 <digitalWrite+0x50>)
}
    1578:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    157c:	601a      	str	r2, [r3, #0]
}
    157e:	4770      	bx	lr
    1580:	20007268 	.word	0x20007268
    1584:	0001f038 	.word	0x0001f038
    1588:	00013038 	.word	0x00013038

0000158c <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    158c:	2836      	cmp	r0, #54	; 0x36
    158e:	d829      	bhi.n	15e4 <pinMode+0x58>
	p = digital_pin_to_info_PGM + pin;
    1590:	4b16      	ldr	r3, [pc, #88]	; (15ec <pinMode+0x60>)
    1592:	0102      	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    1594:	2901      	cmp	r1, #1
	p = digital_pin_to_info_PGM + pin;
    1596:	eb03 1000 	add.w	r0, r3, r0, lsl #4
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    159a:	589a      	ldr	r2, [r3, r2]
{
    159c:	b410      	push	{r4}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    159e:	6853      	ldr	r3, [r2, #4]
    15a0:	68c4      	ldr	r4, [r0, #12]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    15a2:	d00e      	beq.n	15c2 <pinMode+0x36>
    15a4:	2904      	cmp	r1, #4
    15a6:	d00c      	beq.n	15c2 <pinMode+0x36>
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    15a8:	ea23 0304 	bic.w	r3, r3, r4
    15ac:	6053      	str	r3, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    15ae:	6883      	ldr	r3, [r0, #8]
		if (mode == INPUT) {
    15b0:	b1a9      	cbz	r1, 15de <pinMode+0x52>
		} else if (mode == INPUT_PULLUP) {
    15b2:	2902      	cmp	r1, #2
    15b4:	d017      	beq.n	15e6 <pinMode+0x5a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    15b6:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    15b8:	bf0c      	ite	eq
    15ba:	4a0d      	ldreq	r2, [pc, #52]	; (15f0 <pinMode+0x64>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    15bc:	4a0d      	ldrne	r2, [pc, #52]	; (15f4 <pinMode+0x68>)
    15be:	601a      	str	r2, [r3, #0]
    15c0:	e007      	b.n	15d2 <pinMode+0x46>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    15c2:	4323      	orrs	r3, r4
		if (mode == OUTPUT) {
    15c4:	2901      	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
    15c6:	6053      	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
    15c8:	6883      	ldr	r3, [r0, #8]
		if (mode == OUTPUT) {
    15ca:	d008      	beq.n	15de <pinMode+0x52>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    15cc:	f640 0238 	movw	r2, #2104	; 0x838
    15d0:	601a      	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    15d2:	6843      	ldr	r3, [r0, #4]
    15d4:	2215      	movs	r2, #21
}
    15d6:	f85d 4b04 	ldr.w	r4, [sp], #4
	*(p->mux) = 5 | 0x10;
    15da:	601a      	str	r2, [r3, #0]
}
    15dc:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7);
    15de:	2238      	movs	r2, #56	; 0x38
    15e0:	601a      	str	r2, [r3, #0]
    15e2:	e7f6      	b.n	15d2 <pinMode+0x46>
    15e4:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    15e6:	4a04      	ldr	r2, [pc, #16]	; (15f8 <pinMode+0x6c>)
    15e8:	601a      	str	r2, [r3, #0]
    15ea:	e7f2      	b.n	15d2 <pinMode+0x46>
    15ec:	20007268 	.word	0x20007268
    15f0:	00013038 	.word	0x00013038
    15f4:	00010038 	.word	0x00010038
    15f8:	0001f038 	.word	0x0001f038

000015fc <flash_wait>:
#define WRITE_SDR       FLEXSPI_LUT_OPCODE_WRITE_SDR
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

static void flash_wait()
{
    15fc:	b430      	push	{r4, r5}
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    15fe:	4a12      	ldr	r2, [pc, #72]	; (1648 <flash_wait+0x4c>)
	FLEXSPI_LUT61 = 0;
    1600:	2000      	movs	r0, #0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    1602:	4b12      	ldr	r3, [pc, #72]	; (164c <flash_wait+0x50>)
	uint8_t status;
	do {
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
    1604:	2101      	movs	r1, #1
		FLEXSPI_IPCR0 = 0;
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
    1606:	4d12      	ldr	r5, [pc, #72]	; (1650 <flash_wait+0x54>)
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {;}
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
		asm("":::"memory");
		status = *(uint8_t *)&FLEXSPI_RFDR0;
    1608:	4c12      	ldr	r4, [pc, #72]	; (1654 <flash_wait+0x58>)
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    160a:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
	FLEXSPI_LUT61 = 0;
    160e:	f8c2 02f4 	str.w	r0, [r2, #756]	; 0x2f4
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
    1612:	f8c2 10b8 	str.w	r1, [r2, #184]	; 0xb8
		FLEXSPI_IPCR0 = 0;
    1616:	f8c2 00a0 	str.w	r0, [r2, #160]	; 0xa0
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
    161a:	f8c2 50a4 	str.w	r5, [r2, #164]	; 0xa4
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    161e:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {;}
    1622:	6953      	ldr	r3, [r2, #20]
    1624:	07db      	lsls	r3, r3, #31
    1626:	d5fc      	bpl.n	1622 <flash_wait+0x26>
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    1628:	6151      	str	r1, [r2, #20]
	} while (status & 1);
    162a:	7823      	ldrb	r3, [r4, #0]
    162c:	07db      	lsls	r3, r3, #31
    162e:	d4f0      	bmi.n	1612 <flash_wait+0x16>
	FLEXSPI_MCR0 |= FLEXSPI_MCR0_SWRESET; // purge stale data from FlexSPI's AHB FIFO
    1630:	6813      	ldr	r3, [r2, #0]
	while (FLEXSPI_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
    1632:	4905      	ldr	r1, [pc, #20]	; (1648 <flash_wait+0x4c>)
	FLEXSPI_MCR0 |= FLEXSPI_MCR0_SWRESET; // purge stale data from FlexSPI's AHB FIFO
    1634:	f043 0301 	orr.w	r3, r3, #1
    1638:	6013      	str	r3, [r2, #0]
	while (FLEXSPI_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
    163a:	680b      	ldr	r3, [r1, #0]
    163c:	07db      	lsls	r3, r3, #31
    163e:	d4fc      	bmi.n	163a <flash_wait+0x3e>
	__enable_irq();
    1640:	b662      	cpsie	i
}
    1642:	bc30      	pop	{r4, r5}
    1644:	4770      	bx	lr
    1646:	bf00      	nop
    1648:	402a8000 	.word	0x402a8000
    164c:	24010405 	.word	0x24010405
    1650:	000f0001 	.word	0x000f0001
    1654:	402a8100 	.word	0x402a8100

00001658 <eepromemu_flash_write>:

// write bytes into flash memory (which is already erased to 0xFF)
void eepromemu_flash_write(void *addr, const void *data, uint32_t len)
{
    1658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    165a:	460f      	mov	r7, r1
    165c:	4616      	mov	r6, r2
	__disable_irq();
    165e:	b672      	cpsid	i
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    1660:	4b34      	ldr	r3, [pc, #208]	; (1734 <eepromemu_flash_write+0xdc>)
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	FLEXSPI_IPCR0 = 0;
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    1662:	f240 4106 	movw	r1, #1030	; 0x406
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    1666:	4a34      	ldr	r2, [pc, #208]	; (1738 <eepromemu_flash_write+0xe0>)
    1668:	619a      	str	r2, [r3, #24]
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    166a:	2202      	movs	r2, #2
    166c:	61da      	str	r2, [r3, #28]
	FLEXSPI_IPCR0 = 0;
    166e:	2200      	movs	r2, #0
    1670:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    1674:	f8c3 12f0 	str.w	r1, [r3, #752]	; 0x2f0
	FLEXSPI_LUT61 = 0;
    1678:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
	FLEXSPI_LUT62 = 0;
    167c:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
	FLEXSPI_LUT63 = 0;
    1680:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    1684:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    1688:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    168c:	2201      	movs	r2, #1
    168e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    1692:	f020 031f 	bic.w	r3, r0, #31
	uint32_t end_addr = (uint32_t)addr + size;
    1696:	1982      	adds	r2, r0, r6
	asm volatile("": : :"memory");
	asm("dsb");
    1698:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    169c:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    16a0:	f8c4 3f5c 	str.w	r3, [r4, #3932]	; 0xf5c
		location += 32;
    16a4:	3320      	adds	r3, #32
	} while (location < end_addr);
    16a6:	429a      	cmp	r2, r3
    16a8:	d8fa      	bhi.n	16a0 <eepromemu_flash_write+0x48>
	asm("dsb");
    16aa:	f3bf 8f4f 	dsb	sy
	asm("isb");
    16ae:	f3bf 8f6f 	isb	sy
	arm_dcache_delete(addr, len); // purge old data from ARM's cache
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    16b2:	4d20      	ldr	r5, [pc, #128]	; (1734 <eepromemu_flash_write+0xdc>)
    16b4:	696b      	ldr	r3, [r5, #20]
    16b6:	07da      	lsls	r2, r3, #31
    16b8:	d5fc      	bpl.n	16b4 <eepromemu_flash_write+0x5c>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    16ba:	2301      	movs	r3, #1
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
    16bc:	491f      	ldr	r1, [pc, #124]	; (173c <eepromemu_flash_write+0xe4>)
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFFFFF;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    16be:	b2b2      	uxth	r2, r6
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFFFFF;
    16c0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    16c4:	616b      	str	r3, [r5, #20]
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    16c6:	f442 2270 	orr.w	r2, r2, #983040	; 0xf0000
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
    16ca:	f8c5 12f0 	str.w	r1, [r5, #752]	; 0x2f0
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
    16ce:	f242 2101 	movw	r1, #8705	; 0x2201
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	const uint8_t *src = (const uint8_t *)data;
	uint32_t n;
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    16d2:	4c18      	ldr	r4, [pc, #96]	; (1734 <eepromemu_flash_write+0xdc>)
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
    16d4:	f8c5 12f4 	str.w	r1, [r5, #756]	; 0x2f4
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
    16d8:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFFFFF;
    16dc:	f8c5 00a0 	str.w	r0, [r5, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    16e0:	f8c5 20a4 	str.w	r2, [r5, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    16e4:	f8c5 30b0 	str.w	r3, [r5, #176]	; 0xb0
		if (n & FLEXSPI_INTR_IPTXWE) {
			uint32_t wrlen = len;
			if (wrlen > 8) wrlen = 8;
			if (wrlen > 0) {
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    16e8:	4d15      	ldr	r5, [pc, #84]	; (1740 <eepromemu_flash_write+0xe8>)
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    16ea:	e001      	b.n	16f0 <eepromemu_flash_write+0x98>
		if (n & FLEXSPI_INTR_IPTXWE) {
    16ec:	065b      	lsls	r3, r3, #25
    16ee:	d409      	bmi.n	1704 <eepromemu_flash_write+0xac>
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    16f0:	6963      	ldr	r3, [r4, #20]
    16f2:	f013 0001 	ands.w	r0, r3, #1
    16f6:	d0f9      	beq.n	16ec <eepromemu_flash_write+0x94>
				len -= wrlen;
			}
			FLEXSPI_INTR = FLEXSPI_INTR_IPTXWE;
		}
	}
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPTXWE;
    16f8:	2341      	movs	r3, #65	; 0x41
    16fa:	6163      	str	r3, [r4, #20]
	flash_wait();
}
    16fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	flash_wait();
    1700:	f7ff bf7c 	b.w	15fc <flash_wait>
			if (wrlen > 8) wrlen = 8;
    1704:	2e08      	cmp	r6, #8
    1706:	d80a      	bhi.n	171e <eepromemu_flash_write+0xc6>
			if (wrlen > 0) {
    1708:	b136      	cbz	r6, 1718 <eepromemu_flash_write+0xc0>
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    170a:	4632      	mov	r2, r6
    170c:	4639      	mov	r1, r7
				src += wrlen;
    170e:	4437      	add	r7, r6
				len -= wrlen;
    1710:	4606      	mov	r6, r0
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    1712:	4628      	mov	r0, r5
    1714:	f000 f87a 	bl	180c <memcpy>
			FLEXSPI_INTR = FLEXSPI_INTR_IPTXWE;
    1718:	2340      	movs	r3, #64	; 0x40
    171a:	6163      	str	r3, [r4, #20]
    171c:	e7e8      	b.n	16f0 <eepromemu_flash_write+0x98>
    171e:	f1a6 0008 	sub.w	r0, r6, #8
			if (wrlen > 8) wrlen = 8;
    1722:	2608      	movs	r6, #8
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    1724:	4639      	mov	r1, r7
    1726:	4632      	mov	r2, r6
				src += wrlen;
    1728:	4437      	add	r7, r6
				len -= wrlen;
    172a:	4606      	mov	r6, r0
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    172c:	4628      	mov	r0, r5
    172e:	f000 f86d 	bl	180c <memcpy>
				len -= wrlen;
    1732:	e7f1      	b.n	1718 <eepromemu_flash_write+0xc0>
    1734:	402a8000 	.word	0x402a8000
    1738:	5af05af0 	.word	0x5af05af0
    173c:	08180432 	.word	0x08180432
    1740:	402a8180 	.word	0x402a8180

00001744 <eepromemu_flash_erase_sector>:

// erase a 4K sector
void eepromemu_flash_erase_sector(void *addr)
{
    1744:	b410      	push	{r4}
	__disable_irq();
    1746:	b672      	cpsid	i
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    1748:	4b28      	ldr	r3, [pc, #160]	; (17ec <eepromemu_flash_erase_sector+0xa8>)
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    174a:	2102      	movs	r1, #2
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    174c:	4c28      	ldr	r4, [pc, #160]	; (17f0 <eepromemu_flash_erase_sector+0xac>)
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
	FLEXSPI_LUT61 = 0;
    174e:	2200      	movs	r2, #0
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    1750:	619c      	str	r4, [r3, #24]
	FLEXSPI_LUT62 = 0;
	FLEXSPI_LUT63 = 0;
	FLEXSPI_IPCR0 = 0;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    1752:	f44f 2470 	mov.w	r4, #983040	; 0xf0000
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    1756:	61d9      	str	r1, [r3, #28]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    1758:	f240 4106 	movw	r1, #1030	; 0x406
    175c:	f8c3 12f0 	str.w	r1, [r3, #752]	; 0x2f0
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    1760:	2101      	movs	r1, #1
	FLEXSPI_LUT61 = 0;
    1762:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
	FLEXSPI_LUT62 = 0;
    1766:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
	FLEXSPI_LUT63 = 0;
    176a:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
	FLEXSPI_IPCR0 = 0;
    176e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arm_dcache_delete((void *)((uint32_t)addr & 0xFFFFF000), 4096); // purge data from cache
    1772:	f5a2 5280 	sub.w	r2, r2, #4096	; 0x1000
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    1776:	f8c3 40a4 	str.w	r4, [r3, #164]	; 0xa4
	arm_dcache_delete((void *)((uint32_t)addr & 0xFFFFF000), 4096); // purge data from cache
    177a:	4002      	ands	r2, r0
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    177c:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
	asm("dsb");
    1780:	f3bf 8f4f 	dsb	sy
	uint32_t end_addr = (uint32_t)addr + size;
    1784:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
    1788:	f102 0320 	add.w	r3, r2, #32
		SCB_CACHE_DCIMVAC = location;
    178c:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    1790:	4299      	cmp	r1, r3
    1792:	bf34      	ite	cc
    1794:	2101      	movcc	r1, #1
    1796:	2180      	movcs	r1, #128	; 0x80
    1798:	eb02 1141 	add.w	r1, r2, r1, lsl #5
	} while (location < end_addr);
    179c:	428b      	cmp	r3, r1
		SCB_CACHE_DCIMVAC = location;
    179e:	f8cc 2f5c 	str.w	r2, [ip, #3932]	; 0xf5c
		location += 32;
    17a2:	461a      	mov	r2, r3
	} while (location < end_addr);
    17a4:	f103 0320 	add.w	r3, r3, #32
    17a8:	d1f8      	bne.n	179c <eepromemu_flash_erase_sector+0x58>
	asm("dsb");
    17aa:	f3bf 8f4f 	dsb	sy
	asm("isb");
    17ae:	f3bf 8f6f 	isb	sy
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    17b2:	4a0e      	ldr	r2, [pc, #56]	; (17ec <eepromemu_flash_erase_sector+0xa8>)
    17b4:	6953      	ldr	r3, [r2, #20]
    17b6:	07d9      	lsls	r1, r3, #31
    17b8:	d5fc      	bpl.n	17b4 <eepromemu_flash_erase_sector+0x70>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    17ba:	2401      	movs	r4, #1
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
    17bc:	490d      	ldr	r1, [pc, #52]	; (17f4 <eepromemu_flash_erase_sector+0xb0>)
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFF000;
    17be:	4b0e      	ldr	r3, [pc, #56]	; (17f8 <eepromemu_flash_erase_sector+0xb4>)
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    17c0:	6154      	str	r4, [r2, #20]
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFF000;
    17c2:	4003      	ands	r3, r0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
    17c4:	f8c2 12f0 	str.w	r1, [r2, #752]	; 0x2f0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    17c8:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    17cc:	4907      	ldr	r1, [pc, #28]	; (17ec <eepromemu_flash_erase_sector+0xa8>)
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFF000;
    17ce:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    17d2:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    17d6:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    17da:	694b      	ldr	r3, [r1, #20]
    17dc:	07db      	lsls	r3, r3, #31
    17de:	d5fc      	bpl.n	17da <eepromemu_flash_erase_sector+0x96>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    17e0:	2301      	movs	r3, #1
	flash_wait();
}
    17e2:	f85d 4b04 	ldr.w	r4, [sp], #4
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    17e6:	614b      	str	r3, [r1, #20]
	flash_wait();
    17e8:	f7ff bf08 	b.w	15fc <flash_wait>
    17ec:	402a8000 	.word	0x402a8000
    17f0:	5af05af0 	.word	0x5af05af0
    17f4:	08180420 	.word	0x08180420
    17f8:	00fff000 	.word	0x00fff000

000017fc <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    17fc:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    17fe:	f7fe fdf7 	bl	3f0 <setup>
	while (1) {
		loop();
    1802:	f7fe fec3 	bl	58c <loop>
		yield();
    1806:	f001 fb07 	bl	2e18 <yield>
	while (1) {
    180a:	e7fa      	b.n	1802 <main+0x6>

0000180c <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    180c:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    180e:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    1812:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    1816:	d16d      	bne.n	18f4 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    1818:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    181a:	d341      	bcc.n	18a0 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    181c:	f851 3b04 	ldr.w	r3, [r1], #4
    1820:	f840 3b04 	str.w	r3, [r0], #4
    1824:	f851 3b04 	ldr.w	r3, [r1], #4
    1828:	f840 3b04 	str.w	r3, [r0], #4
    182c:	f851 3b04 	ldr.w	r3, [r1], #4
    1830:	f840 3b04 	str.w	r3, [r0], #4
    1834:	f851 3b04 	ldr.w	r3, [r1], #4
    1838:	f840 3b04 	str.w	r3, [r0], #4
    183c:	f851 3b04 	ldr.w	r3, [r1], #4
    1840:	f840 3b04 	str.w	r3, [r0], #4
    1844:	f851 3b04 	ldr.w	r3, [r1], #4
    1848:	f840 3b04 	str.w	r3, [r0], #4
    184c:	f851 3b04 	ldr.w	r3, [r1], #4
    1850:	f840 3b04 	str.w	r3, [r0], #4
    1854:	f851 3b04 	ldr.w	r3, [r1], #4
    1858:	f840 3b04 	str.w	r3, [r0], #4
    185c:	f851 3b04 	ldr.w	r3, [r1], #4
    1860:	f840 3b04 	str.w	r3, [r0], #4
    1864:	f851 3b04 	ldr.w	r3, [r1], #4
    1868:	f840 3b04 	str.w	r3, [r0], #4
    186c:	f851 3b04 	ldr.w	r3, [r1], #4
    1870:	f840 3b04 	str.w	r3, [r0], #4
    1874:	f851 3b04 	ldr.w	r3, [r1], #4
    1878:	f840 3b04 	str.w	r3, [r0], #4
    187c:	f851 3b04 	ldr.w	r3, [r1], #4
    1880:	f840 3b04 	str.w	r3, [r0], #4
    1884:	f851 3b04 	ldr.w	r3, [r1], #4
    1888:	f840 3b04 	str.w	r3, [r0], #4
    188c:	f851 3b04 	ldr.w	r3, [r1], #4
    1890:	f840 3b04 	str.w	r3, [r0], #4
    1894:	f851 3b04 	ldr.w	r3, [r1], #4
    1898:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    189c:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    189e:	d2bd      	bcs.n	181c <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    18a0:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    18a2:	d311      	bcc.n	18c8 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    18a4:	f851 3b04 	ldr.w	r3, [r1], #4
    18a8:	f840 3b04 	str.w	r3, [r0], #4
    18ac:	f851 3b04 	ldr.w	r3, [r1], #4
    18b0:	f840 3b04 	str.w	r3, [r0], #4
    18b4:	f851 3b04 	ldr.w	r3, [r1], #4
    18b8:	f840 3b04 	str.w	r3, [r0], #4
    18bc:	f851 3b04 	ldr.w	r3, [r1], #4
    18c0:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    18c4:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    18c6:	d2ed      	bcs.n	18a4 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    18c8:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    18ca:	d305      	bcc.n	18d8 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    18cc:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    18d0:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    18d4:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    18d6:	d2f9      	bcs.n	18cc <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    18d8:	3204      	adds	r2, #4
	beq	.Ldone
    18da:	d008      	beq.n	18ee <memcpy+0xe2>

	lsls	r2, r2, #31
    18dc:	07d2      	lsls	r2, r2, #31
	itt ne
    18de:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    18e0:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    18e4:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    18e8:	d301      	bcc.n	18ee <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    18ea:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    18ec:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    18ee:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    18f0:	4770      	bx	lr
    18f2:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    18f4:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    18f6:	d313      	bcc.n	1920 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    18f8:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    18fa:	d08d      	beq.n	1818 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    18fc:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    1900:	d08a      	beq.n	1818 <memcpy+0xc>

	rsb	r3, #4
    1902:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    1906:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    1908:	07db      	lsls	r3, r3, #31
	itt ne
    190a:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    190c:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    1910:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    1914:	d380      	bcc.n	1818 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    1916:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    191a:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    191e:	e77b      	b.n	1818 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    1920:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    1922:	d3d9      	bcc.n	18d8 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    1924:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    1926:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    192a:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    192e:	d2f9      	bcs.n	1924 <memcpy+0x118>

	ldrb	r3, [r1]
    1930:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    1932:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    1934:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    1936:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    1938:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    193a:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    193c:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    193e:	4770      	bx	lr

00001940 <ultoa>:
	int i=0, j;
    1940:	f101 3cff 	add.w	ip, r1, #4294967295
{
    1944:	b570      	push	{r4, r5, r6, lr}
		digit = val % radix;
    1946:	4666      	mov	r6, ip
	int i=0, j;
    1948:	2400      	movs	r4, #0
    194a:	e000      	b.n	194e <ultoa+0xe>
		i++;
    194c:	3401      	adds	r4, #1
		digit = val % radix;
    194e:	fbb0 f5f2 	udiv	r5, r0, r2
    1952:	fb02 0315 	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1956:	2b09      	cmp	r3, #9
    1958:	f103 0e37 	add.w	lr, r3, #55	; 0x37
    195c:	f103 0330 	add.w	r3, r3, #48	; 0x30
    1960:	fa5f fe8e 	uxtb.w	lr, lr
    1964:	bf98      	it	ls
    1966:	fa5f fe83 	uxtbls.w	lr, r3
		if (val == 0) break;
    196a:	4290      	cmp	r0, r2
		val /= radix;
    196c:	4628      	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    196e:	f806 ef01 	strb.w	lr, [r6, #1]!
		if (val == 0) break;
    1972:	d2eb      	bcs.n	194c <ultoa+0xc>
	buf[i + 1] = 0;
    1974:	1c63      	adds	r3, r4, #1
    1976:	2200      	movs	r2, #0
    1978:	18c8      	adds	r0, r1, r3
    197a:	54ca      	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
    197c:	b17c      	cbz	r4, 199e <ultoa+0x5e>
		t = buf[j];
    197e:	4662      	mov	r2, ip
    1980:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    1984:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
    1988:	eba1 030c 	sub.w	r3, r1, ip
    198c:	3202      	adds	r2, #2
		buf[j] = buf[i];
    198e:	f88c 6000 	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
    1992:	3b01      	subs	r3, #1
    1994:	1a52      	subs	r2, r2, r1
		buf[i] = t;
    1996:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    1998:	4423      	add	r3, r4
    199a:	429a      	cmp	r2, r3
    199c:	dbef      	blt.n	197e <ultoa+0x3e>
}
    199e:	4608      	mov	r0, r1
    19a0:	bd70      	pop	{r4, r5, r6, pc}
    19a2:	bf00      	nop

000019a4 <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    19a4:	2300      	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
    19a6:	220f      	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    19a8:	f248 2cb8 	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
    19ac:	4619      	mov	r1, r3
{
    19ae:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    19b0:	f44f 4470 	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    19b4:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    19b8:	f8a0 418c 	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    19bc:	f44f 4460 	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
    19c0:	f8a0 218e 	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
    19c4:	460a      	mov	r2, r1
	p->FFILT0 = 0;
    19c6:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    19ca:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    19ce:	b29b      	uxth	r3, r3
    19d0:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    19d4:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    19d8:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
    19dc:	3101      	adds	r1, #1
    19de:	eb00 1343 	add.w	r3, r0, r3, lsl #5
    19e2:	2904      	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    19e4:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    19e6:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    19ea:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    19ec:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    19ee:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    19f0:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    19f2:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
    19f6:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    19f8:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    19fa:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    19fc:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
    19fe:	d1eb      	bne.n	19d8 <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1a00:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    1a04:	b29b      	uxth	r3, r3
    1a06:	f043 030f 	orr.w	r3, r3, #15
    1a0a:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    1a0e:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    1a12:	b29b      	uxth	r3, r3
    1a14:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    1a18:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
    1a1c:	bd10      	pop	{r4, pc}
    1a1e:	bf00      	nop

00001a20 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    1a20:	4b37      	ldr	r3, [pc, #220]	; (1b00 <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    1a22:	4a38      	ldr	r2, [pc, #224]	; (1b04 <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    1a24:	6f99      	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    1a26:	4838      	ldr	r0, [pc, #224]	; (1b08 <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    1a28:	f441 017f 	orr.w	r1, r1, #16711680	; 0xff0000
{
    1a2c:	b570      	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    1a2e:	6799      	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    1a30:	f241 0601 	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    1a34:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1a38:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1a3c:	f243 0426 	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    1a40:	430a      	orrs	r2, r1
    1a42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    1a46:	f7ff ffad 	bl	19a4 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    1a4a:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    1a4e:	f7ff ffa9 	bl	19a4 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    1a52:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    1a56:	f7ff ffa5 	bl	19a4 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    1a5a:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    1a5e:	f7ff ffa1 	bl	19a4 <flexpwm_init>
	for (i=0; i < 4; i++) {
    1a62:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    1a64:	f5a0 1003 	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    1a68:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
    1a6c:	4611      	mov	r1, r2
    1a6e:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    1a72:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    1a76:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    1a78:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    1a7a:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    1a7c:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    1a7e:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    1a82:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1a84:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    1a86:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    1a8a:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1a8c:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    1a8e:	d1ee      	bne.n	1a6e <pwm_init+0x4e>
    1a90:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    1a92:	481e      	ldr	r0, [pc, #120]	; (1b0c <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    1a94:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    1a98:	f241 0601 	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    1a9c:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1a9e:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1aa2:	f243 0426 	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    1aa6:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    1aaa:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    1aae:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    1ab0:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    1ab2:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    1ab4:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    1ab6:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    1aba:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1abc:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    1abe:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    1ac2:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1ac4:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    1ac6:	d1ee      	bne.n	1aa6 <pwm_init+0x86>
    1ac8:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    1aca:	4811      	ldr	r0, [pc, #68]	; (1b10 <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    1acc:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    1ace:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    1ad2:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1ad4:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1ad8:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    1adc:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    1ae0:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    1ae4:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    1ae6:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    1ae8:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    1aea:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    1aec:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    1aee:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1af0:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    1af2:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    1af6:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1af8:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
    1afc:	d1ee      	bne.n	1adc <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    1afe:	bd70      	pop	{r4, r5, r6, pc}
    1b00:	400fc000 	.word	0x400fc000
    1b04:	fc030000 	.word	0xfc030000
    1b08:	403dc000 	.word	0x403dc000
    1b0c:	401e0000 	.word	0x401e0000
    1b10:	401e4000 	.word	0x401e4000

00001b14 <unused_interrupt_vector>:
	__disable_irq();
    1b14:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    1b16:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
    1b1a:	4c52      	ldr	r4, [pc, #328]	; (1c64 <unused_interrupt_vector+0x150>)
    1b1c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("tst lr, #4\nite eq\nmrseq %0, msp\nmrsne %0, psp\n" : "=r" (stack) :: "memory");
    1b20:	f01e 0f04 	tst.w	lr, #4
    1b24:	bf0c      	ite	eq
    1b26:	f3ef 8208 	mrseq	r2, MSP
    1b2a:	f3ef 8209 	mrsne	r2, PSP
	info->cfsr = SCB_CFSR;
    1b2e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
    1b32:	4e4d      	ldr	r6, [pc, #308]	; (1c68 <unused_interrupt_vector+0x154>)
	while (p < end) {
    1b34:	4d4d      	ldr	r5, [pc, #308]	; (1c6c <unused_interrupt_vector+0x158>)
	info->cfsr = SCB_CFSR;
    1b36:	f8d3 0d28 	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
    1b3a:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
    1b3e:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
    1b42:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
    1b46:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
    1b4a:	e9c4 1324 	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
    1b4e:	6993      	ldr	r3, [r2, #24]
    1b50:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    1b54:	69d3      	ldr	r3, [r2, #28]
    1b56:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    1b5a:	f000 f8d1 	bl	1d00 <tempmonGetTemp>
    1b5e:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    1b62:	f001 fb71 	bl	3248 <rtc_get>
	info->len = sizeof(*info) / 4;
    1b66:	210b      	movs	r1, #11
	crc = 0xFFFFFFFF;
    1b68:	f04f 32ff 	mov.w	r2, #4294967295
	info->time = rtc_get();
    1b6c:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    1b70:	460b      	mov	r3, r1
    1b72:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    1b76:	493e      	ldr	r1, [pc, #248]	; (1c70 <unused_interrupt_vector+0x15c>)
		crc ^= *p++;
    1b78:	1d30      	adds	r0, r6, #4
    1b7a:	405a      	eors	r2, r3
    1b7c:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    1b7e:	f002 0301 	and.w	r3, r2, #1
    1b82:	3c01      	subs	r4, #1
    1b84:	fb01 f303 	mul.w	r3, r1, r3
    1b88:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
    1b8c:	d1f7      	bne.n	1b7e <unused_interrupt_vector+0x6a>
	while (p < end) {
    1b8e:	42a8      	cmp	r0, r5
    1b90:	d002      	beq.n	1b98 <unused_interrupt_vector+0x84>
		crc ^= *p++;
    1b92:	6873      	ldr	r3, [r6, #4]
    1b94:	4606      	mov	r6, r0
    1b96:	e7ef      	b.n	1b78 <unused_interrupt_vector+0x64>
	info->crc = crc;
    1b98:	4b32      	ldr	r3, [pc, #200]	; (1c64 <unused_interrupt_vector+0x150>)
    1b9a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    1b9e:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    1ba2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    1ba6:	4930      	ldr	r1, [pc, #192]	; (1c68 <unused_interrupt_vector+0x154>)
    1ba8:	4a32      	ldr	r2, [pc, #200]	; (1c74 <unused_interrupt_vector+0x160>)
    1baa:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
    1bae:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
    1bb2:	f3bf 8f4f 	dsb	sy
	asm("isb");
    1bb6:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    1bba:	4a2f      	ldr	r2, [pc, #188]	; (1c78 <unused_interrupt_vector+0x164>)
	PIT_MCR = PIT_MCR_MDIS;
    1bbc:	2502      	movs	r5, #2
    1bbe:	482f      	ldr	r0, [pc, #188]	; (1c7c <unused_interrupt_vector+0x168>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    1bc0:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    1bc2:	492f      	ldr	r1, [pc, #188]	; (1c80 <unused_interrupt_vector+0x16c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    1bc4:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    1bc8:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    1bca:	6005      	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    1bcc:	69d3      	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    1bce:	482d      	ldr	r0, [pc, #180]	; (1c84 <unused_interrupt_vector+0x170>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    1bd0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    1bd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1bd8:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    1bda:	680b      	ldr	r3, [r1, #0]
    1bdc:	4283      	cmp	r3, r0
    1bde:	d83d      	bhi.n	1c5c <unused_interrupt_vector+0x148>
	PIT_MCR = 0;
    1be0:	4d26      	ldr	r5, [pc, #152]	; (1c7c <unused_interrupt_vector+0x168>)
    1be2:	2100      	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
    1be4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    1be8:	f04f 32ff 	mov.w	r2, #4294967295
	PIT_MCR = 0;
    1bec:	6029      	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    1bee:	2601      	movs	r6, #1
	PIT_TCTRL0 = 0;
    1bf0:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    1bf4:	4924      	ldr	r1, [pc, #144]	; (1c88 <unused_interrupt_vector+0x174>)
    1bf6:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    1bfa:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
    1bfe:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    1c02:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    1c06:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    1c0a:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    1c0e:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	count = 0;
    1c12:	e001      	b.n	1c18 <unused_interrupt_vector+0x104>
		usb_isr();
    1c14:	f000 f966 	bl	1ee4 <usb_isr>
		if (PIT_TFLG0) {
    1c18:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    1c1c:	2b00      	cmp	r3, #0
    1c1e:	d0f9      	beq.n	1c14 <unused_interrupt_vector+0x100>
			if (++count >= 80) break;  // reboot after 8 seconds
    1c20:	3401      	adds	r4, #1
			PIT_TFLG0 = 1;
    1c22:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    1c26:	2c4f      	cmp	r4, #79	; 0x4f
    1c28:	d9f4      	bls.n	1c14 <unused_interrupt_vector+0x100>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    1c2a:	4b18      	ldr	r3, [pc, #96]	; (1c8c <unused_interrupt_vector+0x178>)
	USB1_USBCMD = USB_USBCMD_RST;
    1c2c:	2002      	movs	r0, #2
    1c2e:	4918      	ldr	r1, [pc, #96]	; (1c90 <unused_interrupt_vector+0x17c>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    1c30:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
    1c34:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    1c38:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    1c3a:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    1c3e:	b93b      	cbnz	r3, 1c50 <unused_interrupt_vector+0x13c>
	SRC_GPR5 = 0x0BAD00F1;
    1c40:	4814      	ldr	r0, [pc, #80]	; (1c94 <unused_interrupt_vector+0x180>)
    1c42:	4915      	ldr	r1, [pc, #84]	; (1c98 <unused_interrupt_vector+0x184>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    1c44:	4a0d      	ldr	r2, [pc, #52]	; (1c7c <unused_interrupt_vector+0x168>)
	SRC_GPR5 = 0x0BAD00F1;
    1c46:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    1c48:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
    1c4c:	2b00      	cmp	r3, #0
    1c4e:	d0fa      	beq.n	1c46 <unused_interrupt_vector+0x132>
	SCB_AIRCR = 0x05FA0004;
    1c50:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    1c54:	4a11      	ldr	r2, [pc, #68]	; (1c9c <unused_interrupt_vector+0x188>)
    1c56:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    1c5a:	e7fe      	b.n	1c5a <unused_interrupt_vector+0x146>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    1c5c:	f001 f97c 	bl	2f58 <set_arm_clock>
    1c60:	e7be      	b.n	1be0 <unused_interrupt_vector+0xcc>
    1c62:	bf00      	nop
    1c64:	2027ff00 	.word	0x2027ff00
    1c68:	2027ff80 	.word	0x2027ff80
    1c6c:	2027ffa8 	.word	0x2027ffa8
    1c70:	edb88320 	.word	0xedb88320
    1c74:	2027ffa0 	.word	0x2027ffa0
    1c78:	400fc000 	.word	0x400fc000
    1c7c:	40084000 	.word	0x40084000
    1c80:	20007b84 	.word	0x20007b84
    1c84:	0bcd3d80 	.word	0x0bcd3d80
    1c88:	00249f00 	.word	0x00249f00
    1c8c:	400d9000 	.word	0x400d9000
    1c90:	402e0000 	.word	0x402e0000
    1c94:	400f8000 	.word	0x400f8000
    1c98:	0bad00f1 	.word	0x0bad00f1
    1c9c:	05fa0004 	.word	0x05fa0004

00001ca0 <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
    1ca0:	490a      	ldr	r1, [pc, #40]	; (1ccc <_sbrk+0x2c>)
    1ca2:	680a      	ldr	r2, [r1, #0]
        if (incr != 0) {
    1ca4:	b138      	cbz	r0, 1cb6 <_sbrk+0x16>
{
    1ca6:	b508      	push	{r3, lr}
                if (prev + incr > (char *)&_heap_end) {
    1ca8:	1813      	adds	r3, r2, r0
    1caa:	4809      	ldr	r0, [pc, #36]	; (1cd0 <_sbrk+0x30>)
    1cac:	4283      	cmp	r3, r0
    1cae:	d804      	bhi.n	1cba <_sbrk+0x1a>
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    1cb0:	4610      	mov	r0, r2
                __brkval = prev + incr;
    1cb2:	600b      	str	r3, [r1, #0]
}
    1cb4:	bd08      	pop	{r3, pc}
    1cb6:	4610      	mov	r0, r2
    1cb8:	4770      	bx	lr
                        errno = ENOMEM;
    1cba:	f003 fd17 	bl	56ec <__errno>
    1cbe:	230c      	movs	r3, #12
                        return (void *)-1;
    1cc0:	f04f 32ff 	mov.w	r2, #4294967295
                        errno = ENOMEM;
    1cc4:	6003      	str	r3, [r0, #0]
}
    1cc6:	4610      	mov	r0, r2
    1cc8:	bd08      	pop	{r3, pc}
    1cca:	bf00      	nop
    1ccc:	20007c58 	.word	0x20007c58
    1cd0:	20280000 	.word	0x20280000

00001cd4 <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
    1cd4:	2000      	movs	r0, #0
    1cd6:	4770      	bx	lr

00001cd8 <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
    1cd8:	f04f 30ff 	mov.w	r0, #4294967295
    1cdc:	4770      	bx	lr
    1cde:	bf00      	nop

00001ce0 <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
    1ce0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
    1ce4:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
    1ce6:	604b      	str	r3, [r1, #4]
}
    1ce8:	4770      	bx	lr
    1cea:	bf00      	nop

00001cec <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
    1cec:	2001      	movs	r0, #1
    1cee:	4770      	bx	lr

00001cf0 <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
    1cf0:	f04f 30ff 	mov.w	r0, #4294967295
    1cf4:	4770      	bx	lr
    1cf6:	bf00      	nop

00001cf8 <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    1cf8:	bf30      	wfi
    1cfa:	e7fd      	b.n	1cf8 <abort>

00001cfc <Panic_Temp_isr>:
  unused_interrupt_vector();
    1cfc:	f7ff bf0a 	b.w	1b14 <unused_interrupt_vector>

00001d00 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    1d00:	4a12      	ldr	r2, [pc, #72]	; (1d4c <tempmonGetTemp+0x4c>)
    1d02:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    1d06:	075b      	lsls	r3, r3, #29
    1d08:	d5fb      	bpl.n	1d02 <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    1d0a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    1d0e:	4810      	ldr	r0, [pc, #64]	; (1d50 <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    1d10:	f3c3 230b 	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    1d14:	490f      	ldr	r1, [pc, #60]	; (1d54 <tempmonGetTemp+0x54>)
    1d16:	ed90 7a00 	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    1d1a:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    1d1e:	ed91 6a00 	vldr	s12, [r1]
    1d22:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    1d26:	4a0c      	ldr	r2, [pc, #48]	; (1d58 <tempmonGetTemp+0x58>)
    1d28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    1d2c:	4b0b      	ldr	r3, [pc, #44]	; (1d5c <tempmonGetTemp+0x5c>)
    1d2e:	edd2 6a00 	vldr	s13, [r2]
    1d32:	ee77 7ac7 	vsub.f32	s15, s15, s14
    1d36:	ed93 7a00 	vldr	s14, [r3]
    1d3a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    1d3e:	ee67 7a86 	vmul.f32	s15, s15, s12
    1d42:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
    1d46:	ee37 0a40 	vsub.f32	s0, s14, s0
    1d4a:	4770      	bx	lr
    1d4c:	400d8100 	.word	0x400d8100
    1d50:	20008c9c 	.word	0x20008c9c
    1d54:	20008ca4 	.word	0x20008ca4
    1d58:	20008ca8 	.word	0x20008ca8
    1d5c:	20008ca0 	.word	0x20008ca0

00001d60 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    1d60:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
    1d62:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
    1d64:	b11b      	cbz	r3, 1d6e <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    1d66:	6853      	ldr	r3, [r2, #4]
    1d68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    1d6c:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    1d6e:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    1d70:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    1d72:	b33c      	cbz	r4, 1dc4 <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    1d74:	4b1a      	ldr	r3, [pc, #104]	; (1de0 <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
    1d76:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    1d78:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    1d7c:	420c      	tst	r4, r1
    1d7e:	d11d      	bne.n	1dbc <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    1d80:	4e18      	ldr	r6, [pc, #96]	; (1de4 <schedule_transfer+0x84>)
    1d82:	6877      	ldr	r7, [r6, #4]
    1d84:	e004      	b.n	1d90 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    1d86:	6874      	ldr	r4, [r6, #4]
    1d88:	1be4      	subs	r4, r4, r7
    1d8a:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    1d8e:	d20b      	bcs.n	1da8 <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    1d90:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    1d94:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    1d98:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    1d9c:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    1da0:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    1da4:	0464      	lsls	r4, r4, #17
    1da6:	d5ee      	bpl.n	1d86 <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    1da8:	400d      	ands	r5, r1
    1daa:	d107      	bne.n	1dbc <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    1dac:	4c0c      	ldr	r4, [pc, #48]	; (1de0 <schedule_transfer+0x80>)
		endpoint->status = 0;
    1dae:	e9c0 2502 	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    1db2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1db6:	430b      	orrs	r3, r1
    1db8:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    1dbc:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    1dbe:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    1dc0:	bcf0      	pop	{r4, r5, r6, r7}
    1dc2:	4770      	bx	lr
	USB1_ENDPTPRIME |= epmask;
    1dc4:	4d06      	ldr	r5, [pc, #24]	; (1de0 <schedule_transfer+0x80>)
	endpoint->status = 0;
    1dc6:	e9c0 2402 	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    1dca:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
    1dce:	430b      	orrs	r3, r1
    1dd0:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    1dd4:	6302      	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
    1dd6:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    1dd8:	b662      	cpsie	i
}
    1dda:	bcf0      	pop	{r4, r5, r6, r7}
    1ddc:	4770      	bx	lr
    1dde:	bf00      	nop
    1de0:	402e0000 	.word	0x402e0000
    1de4:	e0001000 	.word	0xe0001000

00001de8 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    1de8:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    1dea:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
    1dec:	b19d      	cbz	r5, 1e16 <run_callbacks+0x2e>
    1dee:	4606      	mov	r6, r0
    1df0:	462a      	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    1df2:	2400      	movs	r4, #0
    1df4:	e003      	b.n	1dfe <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    1df6:	6812      	ldr	r2, [r2, #0]
		count++;
    1df8:	3401      	adds	r4, #1
		if ((uint32_t)t == 1) {
    1dfa:	2a01      	cmp	r2, #1
    1dfc:	d00c      	beq.n	1e18 <run_callbacks+0x30>
		if (t->status & (1<<7)) {
    1dfe:	6853      	ldr	r3, [r2, #4]
    1e00:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    1e04:	d0f7      	beq.n	1df6 <run_callbacks+0xe>
			ep->first_transfer = t;
    1e06:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    1e08:	b12c      	cbz	r4, 1e16 <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
    1e0a:	4628      	mov	r0, r5
		ep->callback_function(first);
    1e0c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
    1e0e:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
    1e10:	4798      	blx	r3
	while (count) {
    1e12:	3c01      	subs	r4, #1
    1e14:	d1f9      	bne.n	1e0a <run_callbacks+0x22>
		first = next;
		count--;
	}
}
    1e16:	bd70      	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
    1e18:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
			break;
    1e1c:	e7f4      	b.n	1e08 <run_callbacks+0x20>
    1e1e:	bf00      	nop

00001e20 <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    1e20:	b430      	push	{r4, r5}
	if (len > 0) {
    1e22:	b9d9      	cbnz	r1, 1e5c <endpoint0_transmit.constprop.0+0x3c>
    1e24:	4c1f      	ldr	r4, [pc, #124]	; (1ea4 <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
    1e26:	4b20      	ldr	r3, [pc, #128]	; (1ea8 <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
    1e28:	2100      	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1e2a:	4a20      	ldr	r2, [pc, #128]	; (1eac <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
    1e2c:	2501      	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1e2e:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    1e32:	6099      	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    1e34:	601d      	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
    1e36:	e9c4 3102 	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1e3a:	2480      	movs	r4, #128	; 0x80
    1e3c:	605c      	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1e3e:	f8c2 01bc 	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    1e42:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    1e46:	481a      	ldr	r0, [pc, #104]	; (1eb0 <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
    1e48:	432b      	orrs	r3, r5
    1e4a:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    1e4e:	6001      	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
    1e50:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    1e54:	2b00      	cmp	r3, #0
    1e56:	d1fb      	bne.n	1e50 <endpoint0_transmit.constprop.0+0x30>
}
    1e58:	bc30      	pop	{r4, r5}
    1e5a:	4770      	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1e5c:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    1e5e:	4b15      	ldr	r3, [pc, #84]	; (1eb4 <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    1e60:	4c10      	ldr	r4, [pc, #64]	; (1ea4 <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
    1e62:	2501      	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1e64:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    1e68:	6098      	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
    1e6a:	4a10      	ldr	r2, [pc, #64]	; (1eac <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1e6c:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    1e6e:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    1e72:	601d      	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    1e74:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    1e76:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    1e7a:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
    1e7c:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    1e7e:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    1e82:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    1e86:	6159      	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
    1e88:	2100      	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
    1e8a:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    1e8c:	64e1      	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    1e8e:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    1e92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    1e96:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    1e9a:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    1e9e:	2b00      	cmp	r3, #0
    1ea0:	d1fb      	bne.n	1e9a <endpoint0_transmit.constprop.0+0x7a>
    1ea2:	e7c0      	b.n	1e26 <endpoint0_transmit.constprop.0+0x6>
    1ea4:	20000000 	.word	0x20000000
    1ea8:	200086c0 	.word	0x200086c0
    1eac:	402e0000 	.word	0x402e0000
    1eb0:	20008c2c 	.word	0x20008c2c
    1eb4:	200086e0 	.word	0x200086e0

00001eb8 <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    1eb8:	4908      	ldr	r1, [pc, #32]	; (1edc <usb_stop_sof_interrupts+0x24>)
    1eba:	2201      	movs	r2, #1
    1ebc:	780b      	ldrb	r3, [r1, #0]
    1ebe:	fa02 f000 	lsl.w	r0, r2, r0
    1ec2:	ea23 0000 	bic.w	r0, r3, r0
    1ec6:	7008      	strb	r0, [r1, #0]
	if (sof_usage == 0) {
    1ec8:	b930      	cbnz	r0, 1ed8 <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    1eca:	4a05      	ldr	r2, [pc, #20]	; (1ee0 <usb_stop_sof_interrupts+0x28>)
    1ecc:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
    1ed0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    1ed4:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
    1ed8:	4770      	bx	lr
    1eda:	bf00      	nop
    1edc:	20008cdd 	.word	0x20008cdd
    1ee0:	402e0000 	.word	0x402e0000

00001ee4 <usb_isr>:
{
    1ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
    1ee8:	4c97      	ldr	r4, [pc, #604]	; (2148 <usb_isr+0x264>)
{
    1eea:	b083      	sub	sp, #12
	uint32_t status = USB1_USBSTS;
    1eec:	f8d4 7144 	ldr.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    1ef0:	07fb      	lsls	r3, r7, #31
	USB1_USBSTS = status;
    1ef2:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    1ef6:	d553      	bpl.n	1fa0 <usb_isr+0xbc>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    1ef8:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    1efc:	2a00      	cmp	r2, #0
    1efe:	d04a      	beq.n	1f96 <usb_isr+0xb2>
    1f00:	4e92      	ldr	r6, [pc, #584]	; (214c <usb_isr+0x268>)
    1f02:	f8df a260 	ldr.w	sl, [pc, #608]	; 2164 <usb_isr+0x280>
		uint32_t addr = (uint32_t)data;
    1f06:	f8df 9274 	ldr.w	r9, [pc, #628]	; 217c <usb_isr+0x298>
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    1f0a:	f8df b274 	ldr.w	fp, [pc, #628]	; 2180 <usb_isr+0x29c>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    1f0e:	f8df 8274 	ldr.w	r8, [pc, #628]	; 2184 <usb_isr+0x2a0>
			USB1_ENDPTSETUPSTAT = setupstatus;
    1f12:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
    1f16:	e9d6 200a 	ldrd	r2, r0, [r6, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    1f1a:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    1f1e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1f22:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    1f26:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    1f2a:	049d      	lsls	r5, r3, #18
    1f2c:	d5f5      	bpl.n	1f1a <usb_isr+0x36>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    1f2e:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    1f32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    1f36:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    1f3a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    1f3e:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    1f42:	f8d4 51b4 	ldr.w	r5, [r4, #436]	; 0x1b4
    1f46:	f015 1501 	ands.w	r5, r5, #65537	; 0x10001
    1f4a:	d1fa      	bne.n	1f42 <usb_isr+0x5e>
			endpoint0_notify_mask = 0;
    1f4c:	b293      	uxth	r3, r2
	setup.bothwords = setupdata;
    1f4e:	4684      	mov	ip, r0
			endpoint0_notify_mask = 0;
    1f50:	f8ca 5000 	str.w	r5, [sl]
	switch (setup.wRequestAndType) {
    1f54:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    1f58:	f000 81cf 	beq.w	22fa <usb_isr+0x416>
    1f5c:	f200 80db 	bhi.w	2116 <usb_isr+0x232>
    1f60:	f240 3102 	movw	r1, #770	; 0x302
    1f64:	428b      	cmp	r3, r1
    1f66:	f000 81e7 	beq.w	2338 <usb_isr+0x454>
    1f6a:	f200 809a 	bhi.w	20a2 <usb_isr+0x1be>
    1f6e:	2b82      	cmp	r3, #130	; 0x82
    1f70:	f000 81cb 	beq.w	230a <usb_isr+0x426>
    1f74:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    1f78:	f040 808a 	bne.w	2090 <usb_isr+0x1ac>
		if (endpoint > 7) break;
    1f7c:	f010 0f78 	tst.w	r0, #120	; 0x78
    1f80:	b283      	uxth	r3, r0
    1f82:	f000 8203 	beq.w	238c <usb_isr+0x4a8>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    1f86:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    1f8a:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1f8e:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    1f92:	2a00      	cmp	r2, #0
    1f94:	d1bd      	bne.n	1f12 <usb_isr+0x2e>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    1f96:	4a6c      	ldr	r2, [pc, #432]	; (2148 <usb_isr+0x264>)
    1f98:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    1f9c:	2b00      	cmp	r3, #0
    1f9e:	d142      	bne.n	2026 <usb_isr+0x142>
	if (status & USB_USBSTS_URI) { // page 3164
    1fa0:	067e      	lsls	r6, r7, #25
    1fa2:	d516      	bpl.n	1fd2 <usb_isr+0xee>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    1fa4:	4b68      	ldr	r3, [pc, #416]	; (2148 <usb_isr+0x264>)
    1fa6:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    1faa:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    1fae:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    1fb2:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    1fb6:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    1fba:	2c00      	cmp	r4, #0
    1fbc:	d1fb      	bne.n	1fb6 <usb_isr+0xd2>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    1fbe:	f04f 32ff 	mov.w	r2, #4294967295
    1fc2:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    1fc6:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    1fca:	f000 fd29 	bl	2a20 <usb_serial_reset>
		endpointN_notify_mask = 0;
    1fce:	4b60      	ldr	r3, [pc, #384]	; (2150 <usb_isr+0x26c>)
    1fd0:	601c      	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
    1fd2:	01fc      	lsls	r4, r7, #7
    1fd4:	d503      	bpl.n	1fde <usb_isr+0xfa>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    1fd6:	4b5f      	ldr	r3, [pc, #380]	; (2154 <usb_isr+0x270>)
    1fd8:	681b      	ldr	r3, [r3, #0]
    1fda:	b103      	cbz	r3, 1fde <usb_isr+0xfa>
    1fdc:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
    1fde:	01b8      	lsls	r0, r7, #6
    1fe0:	d503      	bpl.n	1fea <usb_isr+0x106>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    1fe2:	4b5d      	ldr	r3, [pc, #372]	; (2158 <usb_isr+0x274>)
    1fe4:	681b      	ldr	r3, [r3, #0]
    1fe6:	b103      	cbz	r3, 1fea <usb_isr+0x106>
    1fe8:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
    1fea:	0779      	lsls	r1, r7, #29
    1fec:	d508      	bpl.n	2000 <usb_isr+0x11c>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    1fee:	4b56      	ldr	r3, [pc, #344]	; (2148 <usb_isr+0x264>)
    1ff0:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    1ff4:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    1ff8:	d047      	beq.n	208a <usb_isr+0x1a6>
			usb_high_speed = 1;
    1ffa:	4b58      	ldr	r3, [pc, #352]	; (215c <usb_isr+0x278>)
    1ffc:	2201      	movs	r2, #1
    1ffe:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    2000:	4b51      	ldr	r3, [pc, #324]	; (2148 <usb_isr+0x264>)
    2002:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
    2006:	061a      	lsls	r2, r3, #24
    2008:	d50a      	bpl.n	2020 <usb_isr+0x13c>
    200a:	063b      	lsls	r3, r7, #24
    200c:	d508      	bpl.n	2020 <usb_isr+0x13c>
		if (usb_reboot_timer) {
    200e:	4a54      	ldr	r2, [pc, #336]	; (2160 <usb_isr+0x27c>)
    2010:	7813      	ldrb	r3, [r2, #0]
    2012:	b12b      	cbz	r3, 2020 <usb_isr+0x13c>
			if (--usb_reboot_timer == 0) {
    2014:	3b01      	subs	r3, #1
    2016:	b2db      	uxtb	r3, r3
    2018:	7013      	strb	r3, [r2, #0]
    201a:	2b00      	cmp	r3, #0
    201c:	f000 8272 	beq.w	2504 <usb_isr+0x620>
}
    2020:	b003      	add	sp, #12
    2022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (completestatus & endpoint0_notify_mask) {
    2026:	494f      	ldr	r1, [pc, #316]	; (2164 <usb_isr+0x280>)
			USB1_ENDPTCOMPLETE = completestatus;
    2028:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    202c:	6808      	ldr	r0, [r1, #0]
    202e:	4203      	tst	r3, r0
    2030:	f040 81d1 	bne.w	23d6 <usb_isr+0x4f2>
			completestatus &= endpointN_notify_mask;
    2034:	4a46      	ldr	r2, [pc, #280]	; (2150 <usb_isr+0x26c>)
    2036:	6814      	ldr	r4, [r2, #0]
			if (completestatus) {
    2038:	401c      	ands	r4, r3
    203a:	d0b1      	beq.n	1fa0 <usb_isr+0xbc>
				while (tx) {
    203c:	ea5f 4814 	movs.w	r8, r4, lsr #16
    2040:	d010      	beq.n	2064 <usb_isr+0x180>
    2042:	4e42      	ldr	r6, [pc, #264]	; (214c <usb_isr+0x268>)
					tx &= ~(1<<p);
    2044:	f04f 0901 	mov.w	r9, #1
					int p=__builtin_ctz(tx);
    2048:	fa98 f5a8 	rbit	r5, r8
    204c:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    2050:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					tx &= ~(1<<p);
    2054:	fa09 f505 	lsl.w	r5, r9, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    2058:	3040      	adds	r0, #64	; 0x40
    205a:	f7ff fec5 	bl	1de8 <run_callbacks>
				while (tx) {
    205e:	ea38 0805 	bics.w	r8, r8, r5
    2062:	d1f1      	bne.n	2048 <usb_isr+0x164>
				uint32_t rx = completestatus & 0xffff;
    2064:	b2a4      	uxth	r4, r4
				while(rx) {
    2066:	2c00      	cmp	r4, #0
    2068:	d09a      	beq.n	1fa0 <usb_isr+0xbc>
    206a:	4e38      	ldr	r6, [pc, #224]	; (214c <usb_isr+0x268>)
					rx &= ~(1<<p);
    206c:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(rx);
    2070:	fa94 f5a4 	rbit	r5, r4
    2074:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    2078:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					rx &= ~(1<<p);
    207c:	fa08 f505 	lsl.w	r5, r8, r5
					run_callbacks(endpoint_queue_head + p * 2);
    2080:	f7ff feb2 	bl	1de8 <run_callbacks>
				while(rx) {
    2084:	43ac      	bics	r4, r5
    2086:	d1f3      	bne.n	2070 <usb_isr+0x18c>
    2088:	e78a      	b.n	1fa0 <usb_isr+0xbc>
			usb_high_speed = 0;
    208a:	4a34      	ldr	r2, [pc, #208]	; (215c <usb_isr+0x278>)
    208c:	7013      	strb	r3, [r2, #0]
    208e:	e7b7      	b.n	2000 <usb_isr+0x11c>
	switch (setup.wRequestAndType) {
    2090:	2b80      	cmp	r3, #128	; 0x80
    2092:	f47f af78 	bne.w	1f86 <usb_isr+0xa2>
		reply_buffer[0] = 0;
    2096:	4834      	ldr	r0, [pc, #208]	; (2168 <usb_isr+0x284>)
		endpoint0_transmit(reply_buffer, 2, 0);
    2098:	2102      	movs	r1, #2
		reply_buffer[0] = 0;
    209a:	8005      	strh	r5, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    209c:	f7ff fec0 	bl	1e20 <endpoint0_transmit.constprop.0>
		return;
    20a0:	e775      	b.n	1f8e <usb_isr+0xaa>
	switch (setup.wRequestAndType) {
    20a2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    20a6:	f000 810b 	beq.w	22c0 <usb_isr+0x3dc>
    20aa:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
    20ae:	2b01      	cmp	r3, #1
    20b0:	f63f af69 	bhi.w	1f86 <usb_isr+0xa2>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    20b4:	4b2d      	ldr	r3, [pc, #180]	; (216c <usb_isr+0x288>)
    20b6:	685d      	ldr	r5, [r3, #4]
    20b8:	2d00      	cmp	r5, #0
    20ba:	f43f af64 	beq.w	1f86 <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    20be:	fa1f fc8c 	uxth.w	ip, ip
    20c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    20c6:	e004      	b.n	20d2 <usb_isr+0x1ee>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    20c8:	691d      	ldr	r5, [r3, #16]
    20ca:	330c      	adds	r3, #12
    20cc:	2d00      	cmp	r5, #0
    20ce:	f43f af5a 	beq.w	1f86 <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    20d2:	881a      	ldrh	r2, [r3, #0]
    20d4:	4572      	cmp	r2, lr
    20d6:	d1f7      	bne.n	20c8 <usb_isr+0x1e4>
    20d8:	885a      	ldrh	r2, [r3, #2]
    20da:	4562      	cmp	r2, ip
    20dc:	d1f4      	bne.n	20c8 <usb_isr+0x1e4>
				if ((setup.wValue >> 8) == 3) {
    20de:	ea4f 221e 	mov.w	r2, lr, lsr #8
    20e2:	2a03      	cmp	r2, #3
    20e4:	f000 81a5 	beq.w	2432 <usb_isr+0x54e>
					datalen = list->length;
    20e8:	891a      	ldrh	r2, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    20ea:	0c00      	lsrs	r0, r0, #16
    20ec:	4282      	cmp	r2, r0
    20ee:	bf28      	it	cs
    20f0:	4602      	movcs	r2, r0
				if (setup.wValue == 0x200) {
    20f2:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    20f6:	f040 81a1 	bne.w	243c <usb_isr+0x558>
					if (usb_high_speed) src = usb_config_descriptor_480;
    20fa:	4b18      	ldr	r3, [pc, #96]	; (215c <usb_isr+0x278>)
    20fc:	491c      	ldr	r1, [pc, #112]	; (2170 <usb_isr+0x28c>)
    20fe:	7818      	ldrb	r0, [r3, #0]
    2100:	4b1c      	ldr	r3, [pc, #112]	; (2174 <usb_isr+0x290>)
					memcpy(usb_descriptor_buffer, src, datalen);
    2102:	9201      	str	r2, [sp, #4]
    2104:	2800      	cmp	r0, #0
    2106:	bf18      	it	ne
    2108:	4619      	movne	r1, r3
    210a:	481b      	ldr	r0, [pc, #108]	; (2178 <usb_isr+0x294>)
    210c:	f7ff fb7e 	bl	180c <memcpy>
    2110:	4d19      	ldr	r5, [pc, #100]	; (2178 <usb_isr+0x294>)
    2112:	9a01      	ldr	r2, [sp, #4]
    2114:	e1e1      	b.n	24da <usb_isr+0x5f6>
	switch (setup.wRequestAndType) {
    2116:	f242 2121 	movw	r1, #8737	; 0x2221
    211a:	428b      	cmp	r3, r1
    211c:	d07c      	beq.n	2218 <usb_isr+0x334>
    211e:	d933      	bls.n	2188 <usb_isr+0x2a4>
    2120:	f242 3121 	movw	r1, #8993	; 0x2321
    2124:	428b      	cmp	r3, r1
    2126:	f000 8081 	beq.w	222c <usb_isr+0x348>
    212a:	f64f 01c0 	movw	r1, #63680	; 0xf8c0
    212e:	428b      	cmp	r3, r1
    2130:	f47f af29 	bne.w	1f86 <usb_isr+0xa2>
		if ((setup.wIndex & 0xFF00) != 0) break; // 1=Genre, 4=Compat ID, 5=Properties
    2134:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
    2138:	b283      	uxth	r3, r0
    213a:	f47f af24 	bne.w	1f86 <usb_isr+0xa2>
		setup.wIndex |= 0xEE00; // alter wIndex and treat as normal USB descriptor
    213e:	f443 436e 	orr.w	r3, r3, #60928	; 0xee00
    2142:	f363 0c0f 	bfi	ip, r3, #0, #16
    2146:	e7b5      	b.n	20b4 <usb_isr+0x1d0>
    2148:	402e0000 	.word	0x402e0000
    214c:	20000000 	.word	0x20000000
    2150:	20008c30 	.word	0x20008c30
    2154:	20008cc8 	.word	0x20008cc8
    2158:	20008ccc 	.word	0x20008ccc
    215c:	20008ce3 	.word	0x20008ce3
    2160:	20008ce4 	.word	0x20008ce4
    2164:	20008c2c 	.word	0x20008c2c
    2168:	20008c64 	.word	0x20008c64
    216c:	200079bc 	.word	0x200079bc
    2170:	60001eb8 	.word	0x60001eb8
    2174:	60001f1c 	.word	0x60001f1c
    2178:	20200000 	.word	0x20200000
    217c:	20008c24 	.word	0x20008c24
    2180:	b8c6cf5d 	.word	0xb8c6cf5d
    2184:	402e01c0 	.word	0x402e01c0
	switch (setup.wRequestAndType) {
    2188:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    218c:	d066      	beq.n	225c <usb_isr+0x378>
    218e:	f242 0121 	movw	r1, #8225	; 0x2021
    2192:	428b      	cmp	r3, r1
    2194:	f47f aef7 	bne.w	1f86 <usb_isr+0xa2>
		if (setup.wLength != 7) break;
    2198:	0c03      	lsrs	r3, r0, #16
    219a:	2b07      	cmp	r3, #7
    219c:	f47f aef3 	bne.w	1f86 <usb_isr+0xa2>
		endpoint0_transfer_data.next = 1;
    21a0:	4bb2      	ldr	r3, [pc, #712]	; (246c <usb_isr+0x588>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
    21a2:	49b3      	ldr	r1, [pc, #716]	; (2470 <usb_isr+0x58c>)
		endpoint_queue_head[0].status = 0;
    21a4:	60f5      	str	r5, [r6, #12]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    21a6:	60d9      	str	r1, [r3, #12]
		endpoint0_setupdata.bothwords = setupdata;
    21a8:	49b2      	ldr	r1, [pc, #712]	; (2474 <usb_isr+0x590>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    21aa:	60b3      	str	r3, [r6, #8]
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    21ac:	f8c3 9008 	str.w	r9, [r3, #8]
		endpoint0_setupdata.bothwords = setupdata;
    21b0:	e9c1 2000 	strd	r2, r0, [r1]
		endpoint0_transfer_data.next = 1;
    21b4:	2201      	movs	r2, #1
    21b6:	601a      	str	r2, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    21b8:	4aaf      	ldr	r2, [pc, #700]	; (2478 <usb_isr+0x594>)
    21ba:	605a      	str	r2, [r3, #4]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    21bc:	4aaf      	ldr	r2, [pc, #700]	; (247c <usb_isr+0x598>)
    21be:	611a      	str	r2, [r3, #16]
		USB1_ENDPTPRIME |= (1<<0);
    21c0:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
    21c4:	f041 0101 	orr.w	r1, r1, #1
    21c8:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.pointer3 = addr + 12288;
    21cc:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    21d0:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    21d4:	6159      	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    21d6:	619a      	str	r2, [r3, #24]
		while (USB1_ENDPTPRIME) ;
    21d8:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    21dc:	2b00      	cmp	r3, #0
    21de:	d1fb      	bne.n	21d8 <usb_isr+0x2f4>
	endpoint0_transfer_ack.next = 1;
    21e0:	4aa7      	ldr	r2, [pc, #668]	; (2480 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    21e2:	64f3      	str	r3, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    21e4:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
    21e6:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    21e8:	64b2      	str	r2, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    21ea:	6013      	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    21ec:	f248 0380 	movw	r3, #32896	; 0x8080
    21f0:	6053      	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    21f2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    21f6:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    21fa:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    21fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    2202:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    2206:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    220a:	f8ca 3000 	str.w	r3, [sl]
	while (USB1_ENDPTPRIME) ;
    220e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2212:	2b00      	cmp	r3, #0
    2214:	d1fb      	bne.n	220e <usb_isr+0x32a>
    2216:	e6ba      	b.n	1f8e <usb_isr+0xaa>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    2218:	b280      	uxth	r0, r0
    221a:	b938      	cbnz	r0, 222c <usb_isr+0x348>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    221c:	4b99      	ldr	r3, [pc, #612]	; (2484 <usb_isr+0x5a0>)
			usb_cdc_line_rtsdtr = setup.wValue;
    221e:	f3c2 4207 	ubfx	r2, r2, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    2222:	6819      	ldr	r1, [r3, #0]
    2224:	4b98      	ldr	r3, [pc, #608]	; (2488 <usb_isr+0x5a4>)
    2226:	6019      	str	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    2228:	4b98      	ldr	r3, [pc, #608]	; (248c <usb_isr+0x5a8>)
    222a:	701a      	strb	r2, [r3, #0]
	endpoint0_transfer_ack.next = 1;
    222c:	4b94      	ldr	r3, [pc, #592]	; (2480 <usb_isr+0x59c>)
	endpoint0_transfer_ack.pointer0 = 0;
    222e:	2200      	movs	r2, #0
    2230:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
    2232:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    2234:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    2236:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    2238:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    223a:	2280      	movs	r2, #128	; 0x80
    223c:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    223e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    2242:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2246:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    224a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    224e:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    2252:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2256:	2b00      	cmp	r3, #0
    2258:	d1fb      	bne.n	2252 <usb_isr+0x36e>
    225a:	e698      	b.n	1f8e <usb_isr+0xaa>
		usb_configuration = setup.wValue;
    225c:	f3c2 4207 	ubfx	r2, r2, #16, #8
    2260:	4b8b      	ldr	r3, [pc, #556]	; (2490 <usb_isr+0x5ac>)
    2262:	701a      	strb	r2, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    2264:	4b8b      	ldr	r3, [pc, #556]	; (2494 <usb_isr+0x5b0>)
    2266:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    226a:	4b8b      	ldr	r3, [pc, #556]	; (2498 <usb_isr+0x5b4>)
    226c:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    2270:	4b8a      	ldr	r3, [pc, #552]	; (249c <usb_isr+0x5b8>)
    2272:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		usb_serial_configure();
    2276:	f000 fbd5 	bl	2a24 <usb_serial_configure>
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
    227a:	2280      	movs	r2, #128	; 0x80
    227c:	4629      	mov	r1, r5
    227e:	4888      	ldr	r0, [pc, #544]	; (24a0 <usb_isr+0x5bc>)
    2280:	f003 f8fe 	bl	5480 <memset>
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    2284:	4b87      	ldr	r3, [pc, #540]	; (24a4 <usb_isr+0x5c0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2286:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    2288:	f8c6 b0a0 	str.w	fp, [r6, #160]	; 0xa0
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    228c:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
	endpoint0_transfer_ack.next = 1;
    2290:	4b7b      	ldr	r3, [pc, #492]	; (2480 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    2292:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2294:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.next = 1;
    2296:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    2298:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.pointer0 = 0;
    229a:	609d      	str	r5, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    229c:	601a      	str	r2, [r3, #0]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    229e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    22a2:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    22a6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    22aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    22ae:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    22b2:	f8ca 5000 	str.w	r5, [sl]
	while (USB1_ENDPTPRIME) ;
    22b6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    22ba:	2b00      	cmp	r3, #0
    22bc:	d1fb      	bne.n	22b6 <usb_isr+0x3d2>
    22be:	e666      	b.n	1f8e <usb_isr+0xaa>
	endpoint0_transfer_ack.next = 1;
    22c0:	4b6f      	ldr	r3, [pc, #444]	; (2480 <usb_isr+0x59c>)
    22c2:	2101      	movs	r1, #1
	endpoint_queue_head[1].status = 0;
    22c4:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    22c6:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    22c8:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    22ca:	609d      	str	r5, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    22cc:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    22ce:	6059      	str	r1, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    22d0:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    22d4:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    22d8:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    22dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    22e0:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    22e4:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    22e8:	2b00      	cmp	r3, #0
    22ea:	d1fb      	bne.n	22e4 <usb_isr+0x400>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    22ec:	0c13      	lsrs	r3, r2, #16
    22ee:	065b      	lsls	r3, r3, #25
    22f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    22f4:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		return;
    22f8:	e649      	b.n	1f8e <usb_isr+0xaa>
		reply_buffer[0] = usb_configuration;
    22fa:	4b65      	ldr	r3, [pc, #404]	; (2490 <usb_isr+0x5ac>)
		endpoint0_transmit(reply_buffer, 1, 0);
    22fc:	2101      	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    22fe:	486a      	ldr	r0, [pc, #424]	; (24a8 <usb_isr+0x5c4>)
    2300:	781b      	ldrb	r3, [r3, #0]
    2302:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    2304:	f7ff fd8c 	bl	1e20 <endpoint0_transmit.constprop.0>
		return;
    2308:	e641      	b.n	1f8e <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    230a:	b283      	uxth	r3, r0
		if (endpoint > 7) break;
    230c:	f010 0078 	ands.w	r0, r0, #120	; 0x78
    2310:	f47f ae39 	bne.w	1f86 <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    2314:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    2318:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
		reply_buffer[0] = 0;
    231c:	4a62      	ldr	r2, [pc, #392]	; (24a8 <usb_isr+0x5c4>)
    231e:	8010      	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    2320:	0618      	lsls	r0, r3, #24
    2322:	f100 809e 	bmi.w	2462 <usb_isr+0x57e>
    2326:	07cb      	lsls	r3, r1, #31
    2328:	d501      	bpl.n	232e <usb_isr+0x44a>
			reply_buffer[0] = 1;
    232a:	2301      	movs	r3, #1
    232c:	7013      	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    232e:	2102      	movs	r1, #2
    2330:	485d      	ldr	r0, [pc, #372]	; (24a8 <usb_isr+0x5c4>)
    2332:	f7ff fd75 	bl	1e20 <endpoint0_transmit.constprop.0>
		return;
    2336:	e62a      	b.n	1f8e <usb_isr+0xaa>
		if (endpoint > 7) break;
    2338:	f010 0f78 	tst.w	r0, #120	; 0x78
    233c:	b283      	uxth	r3, r0
    233e:	f47f ae22 	bne.w	1f86 <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    2342:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    2346:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    234a:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    234e:	bf14      	ite	ne
    2350:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    2354:	f043 0301 	orreq.w	r3, r3, #1
    2358:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    235c:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    235e:	4b48      	ldr	r3, [pc, #288]	; (2480 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    2360:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    2362:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    2364:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    2366:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    2368:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    236a:	2280      	movs	r2, #128	; 0x80
    236c:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    236e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    2372:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2376:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    237a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    237e:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    2382:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2386:	2b00      	cmp	r3, #0
    2388:	d1fb      	bne.n	2382 <usb_isr+0x49e>
    238a:	e600      	b.n	1f8e <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    238c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    2390:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    2394:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    2398:	bf14      	ite	ne
    239a:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    239e:	f023 0301 	biceq.w	r3, r3, #1
    23a2:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    23a6:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    23a8:	4b35      	ldr	r3, [pc, #212]	; (2480 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    23aa:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    23ac:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    23ae:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    23b0:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    23b2:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    23b4:	2280      	movs	r2, #128	; 0x80
    23b6:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    23b8:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    23bc:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    23c0:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    23c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    23c8:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    23cc:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    23d0:	2b00      	cmp	r3, #0
    23d2:	d1fb      	bne.n	23cc <usb_isr+0x4e8>
    23d4:	e5db      	b.n	1f8e <usb_isr+0xaa>
				endpoint0_notify_mask = 0;
    23d6:	2000      	movs	r0, #0
    23d8:	6008      	str	r0, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    23da:	4926      	ldr	r1, [pc, #152]	; (2474 <usb_isr+0x590>)
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    23dc:	880c      	ldrh	r4, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    23de:	6848      	ldr	r0, [r1, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    23e0:	f242 0121 	movw	r1, #8225	; 0x2021
    23e4:	428c      	cmp	r4, r1
    23e6:	f47f ae25 	bne.w	2034 <usb_isr+0x150>
    23ea:	b280      	uxth	r0, r0
    23ec:	2800      	cmp	r0, #0
    23ee:	f47f ae21 	bne.w	2034 <usb_isr+0x150>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    23f2:	492e      	ldr	r1, [pc, #184]	; (24ac <usb_isr+0x5c8>)
    23f4:	4c2e      	ldr	r4, [pc, #184]	; (24b0 <usb_isr+0x5cc>)
    23f6:	c903      	ldmia	r1, {r0, r1}
    23f8:	80a1      	strh	r1, [r4, #4]
		if (usb_cdc_line_coding[0] == 134) {
    23fa:	2886      	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    23fc:	ea4f 4111 	mov.w	r1, r1, lsr #16
    2400:	6020      	str	r0, [r4, #0]
    2402:	71a1      	strb	r1, [r4, #6]
		if (usb_cdc_line_coding[0] == 134) {
    2404:	f47f ae16 	bne.w	2034 <usb_isr+0x150>
	__disable_irq();
    2408:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    240a:	482a      	ldr	r0, [pc, #168]	; (24b4 <usb_isr+0x5d0>)
    240c:	7801      	ldrb	r1, [r0, #0]
    240e:	f041 0108 	orr.w	r1, r1, #8
    2412:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    2414:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    2418:	060d      	lsls	r5, r1, #24
    241a:	d405      	bmi.n	2428 <usb_isr+0x544>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    241c:	2080      	movs	r0, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    241e:	4301      	orrs	r1, r0
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    2420:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    2424:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	__enable_irq();
    2428:	b662      	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    242a:	4a23      	ldr	r2, [pc, #140]	; (24b8 <usb_isr+0x5d4>)
    242c:	2150      	movs	r1, #80	; 0x50
    242e:	7011      	strb	r1, [r2, #0]
    2430:	e600      	b.n	2034 <usb_isr+0x150>
				if (datalen > setup.wLength) datalen = setup.wLength;
    2432:	0c00      	lsrs	r0, r0, #16
					datalen = *(list->addr);
    2434:	782a      	ldrb	r2, [r5, #0]
    2436:	4282      	cmp	r2, r0
    2438:	bf28      	it	cs
    243a:	4602      	movcs	r2, r0
				} else if (setup.wValue == 0x700) {
    243c:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
    2440:	d144      	bne.n	24cc <usb_isr+0x5e8>
					if (usb_high_speed) src = usb_config_descriptor_12;
    2442:	4b1e      	ldr	r3, [pc, #120]	; (24bc <usb_isr+0x5d8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    2444:	4d1e      	ldr	r5, [pc, #120]	; (24c0 <usb_isr+0x5dc>)
					if (usb_high_speed) src = usb_config_descriptor_12;
    2446:	7818      	ldrb	r0, [r3, #0]
    2448:	491e      	ldr	r1, [pc, #120]	; (24c4 <usb_isr+0x5e0>)
    244a:	4b1f      	ldr	r3, [pc, #124]	; (24c8 <usb_isr+0x5e4>)
					memcpy(usb_descriptor_buffer, src, datalen);
    244c:	9201      	str	r2, [sp, #4]
    244e:	2800      	cmp	r0, #0
    2450:	bf18      	it	ne
    2452:	4619      	movne	r1, r3
    2454:	4628      	mov	r0, r5
    2456:	f7ff f9d9 	bl	180c <memcpy>
					usb_descriptor_buffer[1] = 7;
    245a:	2307      	movs	r3, #7
    245c:	706b      	strb	r3, [r5, #1]
    245e:	9a01      	ldr	r2, [sp, #4]
    2460:	e03b      	b.n	24da <usb_isr+0x5f6>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    2462:	03c9      	lsls	r1, r1, #15
    2464:	f53f af61 	bmi.w	232a <usb_isr+0x446>
    2468:	e761      	b.n	232e <usb_isr+0x44a>
    246a:	bf00      	nop
    246c:	200086e0 	.word	0x200086e0
    2470:	20009c24 	.word	0x20009c24
    2474:	20008940 	.word	0x20008940
    2478:	00070080 	.word	0x00070080
    247c:	2000ac24 	.word	0x2000ac24
    2480:	200086c0 	.word	0x200086c0
    2484:	20008cb4 	.word	0x20008cb4
    2488:	20008cc4 	.word	0x20008cc4
    248c:	20008ce1 	.word	0x20008ce1
    2490:	20008ce2 	.word	0x20008ce2
    2494:	00cc0002 	.word	0x00cc0002
    2498:	000200c8 	.word	0x000200c8
    249c:	00c80002 	.word	0x00c80002
    24a0:	20000080 	.word	0x20000080
    24a4:	74d59319 	.word	0x74d59319
    24a8:	20008c64 	.word	0x20008c64
    24ac:	20008c24 	.word	0x20008c24
    24b0:	20008cbc 	.word	0x20008cbc
    24b4:	20008cdd 	.word	0x20008cdd
    24b8:	20008ce4 	.word	0x20008ce4
    24bc:	20008ce3 	.word	0x20008ce3
    24c0:	20200000 	.word	0x20200000
    24c4:	60001f1c 	.word	0x60001f1c
    24c8:	60001eb8 	.word	0x60001eb8
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    24cc:	4629      	mov	r1, r5
    24ce:	4d10      	ldr	r5, [pc, #64]	; (2510 <usb_isr+0x62c>)
    24d0:	9201      	str	r2, [sp, #4]
    24d2:	4628      	mov	r0, r5
    24d4:	f7ff f99a 	bl	180c <memcpy>
    24d8:	9a01      	ldr	r2, [sp, #4]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    24da:	f025 031f 	bic.w	r3, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
    24de:	4415      	add	r5, r2
	asm("dsb");
    24e0:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    24e4:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    24e8:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    24ec:	3320      	adds	r3, #32
	} while (location < end_addr);
    24ee:	429d      	cmp	r5, r3
    24f0:	d8fa      	bhi.n	24e8 <usb_isr+0x604>
	asm("dsb");
    24f2:	f3bf 8f4f 	dsb	sy
	asm("isb");
    24f6:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    24fa:	4805      	ldr	r0, [pc, #20]	; (2510 <usb_isr+0x62c>)
    24fc:	4611      	mov	r1, r2
    24fe:	f7ff fc8f 	bl	1e20 <endpoint0_transmit.constprop.0>
				return;
    2502:	e544      	b.n	1f8e <usb_isr+0xaa>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    2504:	2003      	movs	r0, #3
    2506:	f7ff fcd7 	bl	1eb8 <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    250a:	f00b fca1 	bl	de50 <___reboot_Teensyduino__veneer>
    250e:	bf00      	nop
    2510:	20200000 	.word	0x20200000

00002514 <usb_config_rx>:
{
    2514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2518:	461f      	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    251a:	1e83      	subs	r3, r0, #2
    251c:	2b02      	cmp	r3, #2
    251e:	d901      	bls.n	2524 <usb_config_rx+0x10>
}
    2520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    2524:	f8df 904c 	ldr.w	r9, [pc, #76]	; 2574 <usb_config_rx+0x60>
    2528:	4615      	mov	r5, r2
    252a:	460c      	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
    252c:	223c      	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    252e:	eb09 18c0 	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    2532:	4606      	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    2534:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    2538:	2100      	movs	r1, #0
    253a:	f108 0004 	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    253e:	0424      	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
    2540:	f002 ff9e 	bl	5480 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    2544:	fab5 f285 	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
    2548:	2301      	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    254a:	0952      	lsrs	r2, r2, #5
    254c:	ea44 7442 	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
    2550:	f849 400a 	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    2554:	f8c8 7038 	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    2558:	f8c8 3008 	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    255c:	2f00      	cmp	r7, #0
    255e:	d0df      	beq.n	2520 <usb_config_rx+0xc>
    2560:	4a03      	ldr	r2, [pc, #12]	; (2570 <usb_config_rx+0x5c>)
    2562:	40b3      	lsls	r3, r6
    2564:	6811      	ldr	r1, [r2, #0]
    2566:	430b      	orrs	r3, r1
    2568:	6013      	str	r3, [r2, #0]
}
    256a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    256e:	bf00      	nop
    2570:	20008c30 	.word	0x20008c30
    2574:	20000000 	.word	0x20000000

00002578 <usb_config_tx>:
{
    2578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    257c:	460d      	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    257e:	1e81      	subs	r1, r0, #2
    2580:	2902      	cmp	r1, #2
    2582:	d901      	bls.n	2588 <usb_config_tx+0x10>
}
    2584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    2588:	01c7      	lsls	r7, r0, #7
    258a:	f8df 904c 	ldr.w	r9, [pc, #76]	; 25d8 <usb_config_tx+0x60>
    258e:	4692      	mov	sl, r2
    2590:	4604      	mov	r4, r0
    2592:	3740      	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    2594:	223c      	movs	r2, #60	; 0x3c
    2596:	2100      	movs	r1, #0
    2598:	461e      	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    259a:	eb09 0807 	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    259e:	042d      	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
    25a0:	f108 0004 	add.w	r0, r8, #4
    25a4:	f002 ff6c 	bl	5480 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    25a8:	faba f28a 	clz	r2, sl
    25ac:	0952      	lsrs	r2, r2, #5
    25ae:	ea45 7242 	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
    25b2:	f849 2007 	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
    25b6:	2201      	movs	r2, #1
	qh->callback_function = callback;
    25b8:	f8c8 6038 	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    25bc:	f8c8 2008 	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    25c0:	2e00      	cmp	r6, #0
    25c2:	d0df      	beq.n	2584 <usb_config_tx+0xc>
    25c4:	4b03      	ldr	r3, [pc, #12]	; (25d4 <usb_config_tx+0x5c>)
    25c6:	3410      	adds	r4, #16
    25c8:	6819      	ldr	r1, [r3, #0]
    25ca:	40a2      	lsls	r2, r4
    25cc:	430a      	orrs	r2, r1
    25ce:	601a      	str	r2, [r3, #0]
}
    25d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    25d4:	20008c30 	.word	0x20008c30
    25d8:	20000000 	.word	0x20000000

000025dc <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    25dc:	0412      	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    25de:	6081      	str	r1, [r0, #8]
	transfer->callback_param = param;
    25e0:	61c3      	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
    25e2:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
    25e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
    25ea:	b410      	push	{r4}
	transfer->next = 1;
    25ec:	2401      	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
    25ee:	6042      	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
    25f0:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
    25f4:	6004      	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
    25f6:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
    25fa:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
    25fe:	60c4      	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
    2600:	6181      	str	r1, [r0, #24]
}
    2602:	f85d 4b04 	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
    2606:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
    260a:	4770      	bx	lr

0000260c <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    260c:	1e83      	subs	r3, r0, #2
{
    260e:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    2610:	2b02      	cmp	r3, #2
    2612:	d900      	bls.n	2616 <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    2614:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    2616:	4b06      	ldr	r3, [pc, #24]	; (2630 <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
    2618:	f100 0110 	add.w	r1, r0, #16
    261c:	f04f 0c01 	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    2620:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    2624:	fa0c f101 	lsl.w	r1, ip, r1
    2628:	3040      	adds	r0, #64	; 0x40
    262a:	f7ff bb99 	b.w	1d60 <schedule_transfer>
    262e:	bf00      	nop
    2630:	20000000 	.word	0x20000000

00002634 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    2634:	1e83      	subs	r3, r0, #2
{
    2636:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    2638:	2b02      	cmp	r3, #2
    263a:	d900      	bls.n	263e <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    263c:	4770      	bx	lr
	uint32_t mask = 1 << endpoint_number;
    263e:	2101      	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    2640:	4b02      	ldr	r3, [pc, #8]	; (264c <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
    2642:	4081      	lsls	r1, r0
    2644:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    2648:	f7ff bb8a 	b.w	1d60 <schedule_transfer>
    264c:	20000000 	.word	0x20000000

00002650 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    2650:	6840      	ldr	r0, [r0, #4]
#endif
}
    2652:	4770      	bx	lr

00002654 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    2654:	4a12      	ldr	r2, [pc, #72]	; (26a0 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    2656:	4b13      	ldr	r3, [pc, #76]	; (26a4 <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    2658:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    265c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    2660:	4298      	cmp	r0, r3
{
    2662:	b510      	push	{r4, lr}
    2664:	b084      	sub	sp, #16
	if (num < 10000000) num = num * 10;
    2666:	d202      	bcs.n	266e <usb_init_serialnumber+0x1a>
    2668:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    266c:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    266e:	4c0e      	ldr	r4, [pc, #56]	; (26a8 <usb_init_serialnumber+0x54>)
    2670:	a901      	add	r1, sp, #4
    2672:	220a      	movs	r2, #10
    2674:	f7ff f964 	bl	1940 <ultoa>
	for (i=0; i<10; i++) {
    2678:	a901      	add	r1, sp, #4
    267a:	2300      	movs	r3, #0
    267c:	4620      	mov	r0, r4
		char c = buf[i];
    267e:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    2682:	3301      	adds	r3, #1
		if (!c) break;
    2684:	b13a      	cbz	r2, 2696 <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
    2686:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    2688:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    268c:	d1f7      	bne.n	267e <usb_init_serialnumber+0x2a>
    268e:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    2690:	7023      	strb	r3, [r4, #0]
}
    2692:	b004      	add	sp, #16
    2694:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    2696:	005b      	lsls	r3, r3, #1
    2698:	b2db      	uxtb	r3, r3
    269a:	7023      	strb	r3, [r4, #0]
}
    269c:	b004      	add	sp, #16
    269e:	bd10      	pop	{r4, pc}
    26a0:	401f4400 	.word	0x401f4400
    26a4:	00989680 	.word	0x00989680
    26a8:	20008238 	.word	0x20008238

000026ac <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    26ac:	f000 bad8 	b.w	2c60 <usb_serial_flush_input>

000026b0 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    26b0:	f000 baa8 	b.w	2c04 <usb_serial_peekchar>

000026b4 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    26b4:	f000 bb66 	b.w	2d84 <usb_serial_flush_output>

000026b8 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    26b8:	f000 bb3c 	b.w	2d34 <usb_serial_write_buffer_free>

000026bc <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    26bc:	4608      	mov	r0, r1
    26be:	4611      	mov	r1, r2
    26c0:	f000 bb2c 	b.w	2d1c <usb_serial_write>

000026c4 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    26c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    26c6:	4c14      	ldr	r4, [pc, #80]	; (2718 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    26c8:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    26cc:	4e13      	ldr	r6, [pc, #76]	; (271c <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    26ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    26d2:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    26d6:	4f12      	ldr	r7, [pc, #72]	; (2720 <rx_queue_transfer+0x5c>)
    26d8:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
    26dc:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    26de:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    26e2:	4621      	mov	r1, r4
    26e4:	883a      	ldrh	r2, [r7, #0]
    26e6:	4630      	mov	r0, r6
    26e8:	f7ff ff78 	bl	25dc <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    26ec:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    26ee:	4423      	add	r3, r4
	asm("dsb");
    26f0:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    26f4:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    26f8:	3420      	adds	r4, #32
	} while (location < end_addr);
    26fa:	42a3      	cmp	r3, r4
    26fc:	d8fa      	bhi.n	26f4 <rx_queue_transfer+0x30>
	asm("dsb");
    26fe:	f3bf 8f4f 	dsb	sy
	asm("isb");
    2702:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    2706:	2003      	movs	r0, #3
    2708:	4631      	mov	r1, r6
    270a:	f7ff ff93 	bl	2634 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    270e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    2712:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
    2716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2718:	20200080 	.word	0x20200080
    271c:	20008700 	.word	0x20008700
    2720:	20008cd0 	.word	0x20008cd0

00002724 <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    2724:	4b24      	ldr	r3, [pc, #144]	; (27b8 <rx_event+0x94>)
{
    2726:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    272a:	881c      	ldrh	r4, [r3, #0]
    272c:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
    272e:	69c5      	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    2730:	f3c3 430e 	ubfx	r3, r3, #16, #15
    2734:	1ae4      	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    2736:	2c00      	cmp	r4, #0
    2738:	dd24      	ble.n	2784 <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
    273a:	4920      	ldr	r1, [pc, #128]	; (27bc <rx_event+0x98>)
		if (head != rx_tail) {
    273c:	4820      	ldr	r0, [pc, #128]	; (27c0 <rx_event+0x9c>)
		uint32_t head = rx_head;
    273e:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    2740:	7800      	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    2742:	b2d3      	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
    2744:	4e1f      	ldr	r6, [pc, #124]	; (27c4 <rx_event+0xa0>)
		if (head != rx_tail) {
    2746:	4282      	cmp	r2, r0
			uint32_t ii = rx_list[head];
    2748:	481f      	ldr	r0, [pc, #124]	; (27c8 <rx_event+0xa4>)
		if (head != rx_tail) {
    274a:	d007      	beq.n	275c <rx_event+0x38>
			uint32_t ii = rx_list[head];
    274c:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    2750:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    2754:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    2758:	4294      	cmp	r4, r2
    275a:	d918      	bls.n	278e <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    275c:	3301      	adds	r3, #1
		rx_index[i] = 0;
    275e:	2200      	movs	r2, #0
		rx_count[i] = len;
    2760:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    2764:	2b08      	cmp	r3, #8
		rx_index[i] = 0;
    2766:	4e19      	ldr	r6, [pc, #100]	; (27cc <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    2768:	bf88      	it	hi
    276a:	4613      	movhi	r3, r2
		rx_index[i] = 0;
    276c:	f826 2015 	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
    2770:	bf98      	it	ls
    2772:	b2da      	uxtbls	r2, r3
		rx_list[head] = i;
    2774:	54c5      	strb	r5, [r0, r3]
		rx_available += len;
    2776:	4b16      	ldr	r3, [pc, #88]	; (27d0 <rx_event+0xac>)
		rx_head = head;
    2778:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    277a:	681a      	ldr	r2, [r3, #0]
    277c:	4414      	add	r4, r2
    277e:	601c      	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    2780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
    2784:	4628      	mov	r0, r5
}
    2786:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
    278a:	f7ff bf9b 	b.w	26c4 <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    278e:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    2792:	4910      	ldr	r1, [pc, #64]	; (27d4 <rx_event+0xb0>)
    2794:	4622      	mov	r2, r4
				rx_count[ii] = count + len;
    2796:	4427      	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    2798:	4408      	add	r0, r1
    279a:	eb01 2145 	add.w	r1, r1, r5, lsl #9
    279e:	f7ff f835 	bl	180c <memcpy>
				rx_available += len;
    27a2:	4a0b      	ldr	r2, [pc, #44]	; (27d0 <rx_event+0xac>)
				rx_queue_transfer(i);
    27a4:	4628      	mov	r0, r5
				rx_count[ii] = count + len;
    27a6:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    27aa:	6813      	ldr	r3, [r2, #0]
    27ac:	4423      	add	r3, r4
}
    27ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
    27b2:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
    27b4:	f7ff bf86 	b.w	26c4 <rx_queue_transfer>
    27b8:	20008cd0 	.word	0x20008cd0
    27bc:	20008cdb 	.word	0x20008cdb
    27c0:	20008cdc 	.word	0x20008cdc
    27c4:	20008c70 	.word	0x20008c70
    27c8:	20008c90 	.word	0x20008c90
    27cc:	20008c80 	.word	0x20008c80
    27d0:	20008c6c 	.word	0x20008c6c
    27d4:	20200080 	.word	0x20200080

000027d8 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    27d8:	4b1d      	ldr	r3, [pc, #116]	; (2850 <usb_serial_flush_callback+0x78>)
    27da:	781a      	ldrb	r2, [r3, #0]
    27dc:	2a00      	cmp	r2, #0
    27de:	d136      	bne.n	284e <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
    27e0:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    27e4:	4a1b      	ldr	r2, [pc, #108]	; (2854 <usb_serial_flush_callback+0x7c>)
    27e6:	7812      	ldrb	r2, [r2, #0]
    27e8:	b38a      	cbz	r2, 284e <usb_serial_flush_callback+0x76>
{
    27ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
    27ee:	4d1a      	ldr	r5, [pc, #104]	; (2858 <usb_serial_flush_callback+0x80>)
    27f0:	882a      	ldrh	r2, [r5, #0]
    27f2:	b352      	cbz	r2, 284a <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    27f4:	4e19      	ldr	r6, [pc, #100]	; (285c <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    27f6:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    27fa:	4f19      	ldr	r7, [pc, #100]	; (2860 <usb_serial_flush_callback+0x88>)
    27fc:	7832      	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    27fe:	4c19      	ldr	r4, [pc, #100]	; (2864 <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    2800:	eb07 1742 	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    2804:	eb04 24c2 	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    2808:	4642      	mov	r2, r8
    280a:	4638      	mov	r0, r7
    280c:	4621      	mov	r1, r4
    280e:	f7ff fee5 	bl	25dc <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    2812:	eb04 0208 	add.w	r2, r4, r8
	asm("dsb");
    2816:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    281a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    281e:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    2822:	3420      	adds	r4, #32
	} while (location < end_addr);
    2824:	42a2      	cmp	r2, r4
    2826:	d8fa      	bhi.n	281e <usb_serial_flush_callback+0x46>
	asm("dsb");
    2828:	f3bf 8f4f 	dsb	sy
	asm("isb");
    282c:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    2830:	2004      	movs	r0, #4
    2832:	4639      	mov	r1, r7
    2834:	f7ff feea 	bl	260c <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    2838:	7833      	ldrb	r3, [r6, #0]
    283a:	3301      	adds	r3, #1
    283c:	b2db      	uxtb	r3, r3
    283e:	2b03      	cmp	r3, #3
    2840:	bf88      	it	hi
    2842:	2300      	movhi	r3, #0
    2844:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    2846:	2300      	movs	r3, #0
    2848:	802b      	strh	r3, [r5, #0]
}
    284a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    284e:	4770      	bx	lr
    2850:	20008ce0 	.word	0x20008ce0
    2854:	20008ce2 	.word	0x20008ce2
    2858:	20008cd2 	.word	0x20008cd2
    285c:	20008cdf 	.word	0x20008cdf
    2860:	20008800 	.word	0x20008800
    2864:	20201080 	.word	0x20201080

00002868 <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
    2868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    286c:	b085      	sub	sp, #20
	while (size > 0) {
    286e:	e9cd 1001 	strd	r1, r0, [sp, #4]
    2872:	2900      	cmp	r1, #0
    2874:	f000 80bf 	beq.w	29f6 <usb_serial_write.part.0+0x18e>
	uint32_t sent=0;
    2878:	2300      	movs	r3, #0
    287a:	4c60      	ldr	r4, [pc, #384]	; (29fc <usb_serial_write.part.0+0x194>)
    287c:	f8df 8198 	ldr.w	r8, [pc, #408]	; 2a18 <usb_serial_write.part.0+0x1b0>
    2880:	f8df a198 	ldr.w	sl, [pc, #408]	; 2a1c <usb_serial_write.part.0+0x1b4>
				wait_begin_at = systick_millis_count;
    2884:	4f5e      	ldr	r7, [pc, #376]	; (2a00 <usb_serial_write.part.0+0x198>)
	uint32_t sent=0;
    2886:	9300      	str	r3, [sp, #0]
		tx_noautoflush = 1;
    2888:	2301      	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    288a:	4a5e      	ldr	r2, [pc, #376]	; (2a04 <usb_serial_write.part.0+0x19c>)
		tx_noautoflush = 1;
    288c:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    288e:	4b5e      	ldr	r3, [pc, #376]	; (2a08 <usb_serial_write.part.0+0x1a0>)
    2890:	7819      	ldrb	r1, [r3, #0]
		while (!tx_available) {
    2892:	f8b8 3000 	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
    2896:	eb02 1941 	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
    289a:	2b00      	cmp	r3, #0
    289c:	f040 80a7 	bne.w	29ee <usb_serial_write.part.0+0x186>
		uint32_t wait_begin_at=0;
    28a0:	461e      	mov	r6, r3
		int waiting=0;
    28a2:	461d      	mov	r5, r3
			tx_noautoflush = 0;
    28a4:	469b      	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
    28a6:	4648      	mov	r0, r9
    28a8:	f7ff fed2 	bl	2650 <usb_transfer_status>
			if (!(status & 0x80)) {
    28ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    28b0:	f000 808c 	beq.w	29cc <usb_serial_write.part.0+0x164>
			asm("dsb" ::: "memory");
    28b4:	f3bf 8f4f 	dsb	sy
			if (transmit_previous_timeout) return sent;
    28b8:	f89a 3000 	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
    28bc:	f884 b000 	strb.w	fp, [r4]
			if (!waiting) {
    28c0:	b905      	cbnz	r5, 28c4 <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
    28c2:	683e      	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
    28c4:	2b00      	cmp	r3, #0
    28c6:	d17d      	bne.n	29c4 <usb_serial_write.part.0+0x15c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    28c8:	683b      	ldr	r3, [r7, #0]
    28ca:	1b9b      	subs	r3, r3, r6
    28cc:	2b78      	cmp	r3, #120	; 0x78
    28ce:	f200 8087 	bhi.w	29e0 <usb_serial_write.part.0+0x178>
			if (!usb_configuration) return sent;
    28d2:	4b4e      	ldr	r3, [pc, #312]	; (2a0c <usb_serial_write.part.0+0x1a4>)
    28d4:	781b      	ldrb	r3, [r3, #0]
    28d6:	2b00      	cmp	r3, #0
    28d8:	d074      	beq.n	29c4 <usb_serial_write.part.0+0x15c>
			yield();
    28da:	f000 fa9d 	bl	2e18 <yield>
			tx_noautoflush = 1;
    28de:	2201      	movs	r2, #1
		while (!tx_available) {
    28e0:	f8b8 3000 	ldrh.w	r3, [r8]
    28e4:	4615      	mov	r5, r2
			tx_noautoflush = 1;
    28e6:	7022      	strb	r2, [r4, #0]
		while (!tx_available) {
    28e8:	2b00      	cmp	r3, #0
    28ea:	d0dc      	beq.n	28a6 <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    28ec:	4a46      	ldr	r2, [pc, #280]	; (2a08 <usb_serial_write.part.0+0x1a0>)
    28ee:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    28f2:	7811      	ldrb	r1, [r2, #0]
    28f4:	461a      	mov	r2, r3
    28f6:	eb00 20c1 	add.w	r0, r0, r1, lsl #11
    28fa:	4d45      	ldr	r5, [pc, #276]	; (2a10 <usb_serial_write.part.0+0x1a8>)
    28fc:	02c9      	lsls	r1, r1, #11
    28fe:	4428      	add	r0, r5
		if (size >= tx_available) {
    2900:	9d01      	ldr	r5, [sp, #4]
    2902:	4295      	cmp	r5, r2
    2904:	d217      	bcs.n	2936 <usb_serial_write.part.0+0xce>
			memcpy(txdata, data, size);
    2906:	9303      	str	r3, [sp, #12]
    2908:	e9dd 5101 	ldrd	r5, r1, [sp, #4]
    290c:	462a      	mov	r2, r5
    290e:	f7fe ff7d 	bl	180c <memcpy>
			tx_available -= size;
    2912:	9b03      	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    2914:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
    2918:	1b5b      	subs	r3, r3, r5
    291a:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    291e:	4b3d      	ldr	r3, [pc, #244]	; (2a14 <usb_serial_write.part.0+0x1ac>)
    2920:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
    2924:	f3bf 8f4f 	dsb	sy
			sent += size;
    2928:	9800      	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
    292a:	2300      	movs	r3, #0
			sent += size;
    292c:	4428      	add	r0, r5
		tx_noautoflush = 0;
    292e:	7023      	strb	r3, [r4, #0]
}
    2930:	b005      	add	sp, #20
    2932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    2936:	4b36      	ldr	r3, [pc, #216]	; (2a10 <usb_serial_write.part.0+0x1a8>)
    2938:	18cd      	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
    293a:	9902      	ldr	r1, [sp, #8]
    293c:	f7fe ff66 	bl	180c <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    2940:	2300      	movs	r3, #0
    2942:	f44f 6200 	mov.w	r2, #2048	; 0x800
    2946:	4629      	mov	r1, r5
    2948:	4648      	mov	r0, r9
    294a:	f7ff fe47 	bl	25dc <usb_prepare_transfer>
	asm("dsb");
    294e:	f3bf 8f4f 	dsb	sy
    2952:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    2956:	f505 6300 	add.w	r3, r5, #2048	; 0x800
    295a:	4293      	cmp	r3, r2
    295c:	bf34      	ite	cc
    295e:	2301      	movcc	r3, #1
    2960:	2340      	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    2962:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    2966:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    296a:	f8c2 5f70 	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
    296e:	3520      	adds	r5, #32
	} while (location < end_addr);
    2970:	42ab      	cmp	r3, r5
    2972:	d1fa      	bne.n	296a <usb_serial_write.part.0+0x102>
	asm("dsb");
    2974:	f3bf 8f4f 	dsb	sy
	asm("isb");
    2978:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    297c:	2004      	movs	r0, #4
    297e:	4649      	mov	r1, r9
    2980:	f7ff fe44 	bl	260c <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    2984:	4a20      	ldr	r2, [pc, #128]	; (2a08 <usb_serial_write.part.0+0x1a0>)
    2986:	7813      	ldrb	r3, [r2, #0]
    2988:	3301      	adds	r3, #1
    298a:	b2db      	uxtb	r3, r3
    298c:	2b03      	cmp	r3, #3
    298e:	bf84      	itt	hi
    2990:	2300      	movhi	r3, #0
    2992:	4a1d      	ldrhi	r2, [pc, #116]	; (2a08 <usb_serial_write.part.0+0x1a0>)
    2994:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    2996:	f8b8 3000 	ldrh.w	r3, [r8]
    299a:	9a01      	ldr	r2, [sp, #4]
    299c:	1ad1      	subs	r1, r2, r3
			sent += tx_available;
    299e:	9a00      	ldr	r2, [sp, #0]
    29a0:	441a      	add	r2, r3
			size -= tx_available;
    29a2:	9101      	str	r1, [sp, #4]
			sent += tx_available;
    29a4:	9200      	str	r2, [sp, #0]
			data += tx_available;
    29a6:	9a02      	ldr	r2, [sp, #8]
    29a8:	441a      	add	r2, r3
			tx_available = 0;
    29aa:	2300      	movs	r3, #0
			data += tx_available;
    29ac:	9202      	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
    29ae:	4a19      	ldr	r2, [pc, #100]	; (2a14 <usb_serial_write.part.0+0x1ac>)
			tx_available = 0;
    29b0:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
    29b4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    29b8:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
    29bc:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
    29be:	2900      	cmp	r1, #0
    29c0:	f47f af62 	bne.w	2888 <usb_serial_write.part.0+0x20>
	return sent;
    29c4:	9800      	ldr	r0, [sp, #0]
}
    29c6:	b005      	add	sp, #20
    29c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
    29cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    29d0:	4b0d      	ldr	r3, [pc, #52]	; (2a08 <usb_serial_write.part.0+0x1a0>)
				transmit_previous_timeout = 0;
    29d2:	f88a 0000 	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    29d6:	7819      	ldrb	r1, [r3, #0]
				break;
    29d8:	4613      	mov	r3, r2
				tx_available = TX_SIZE;
    29da:	f8a8 2000 	strh.w	r2, [r8]
				break;
    29de:	e78a      	b.n	28f6 <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
    29e0:	2301      	movs	r3, #1
				return sent;
    29e2:	9800      	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
    29e4:	f88a 3000 	strb.w	r3, [sl]
}
    29e8:	b005      	add	sp, #20
    29ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    29ee:	461a      	mov	r2, r3
    29f0:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    29f4:	e77f      	b.n	28f6 <usb_serial_write.part.0+0x8e>
	while (size > 0) {
    29f6:	9801      	ldr	r0, [sp, #4]
	return sent;
    29f8:	e7e5      	b.n	29c6 <usb_serial_write.part.0+0x15e>
    29fa:	bf00      	nop
    29fc:	20008ce0 	.word	0x20008ce0
    2a00:	20008cb4 	.word	0x20008cb4
    2a04:	20008800 	.word	0x20008800
    2a08:	20008cdf 	.word	0x20008cdf
    2a0c:	20008ce2 	.word	0x20008ce2
    2a10:	20201080 	.word	0x20201080
    2a14:	402e0000 	.word	0x402e0000
    2a18:	20008cd2 	.word	0x20008cd2
    2a1c:	20008cde 	.word	0x20008cde

00002a20 <usb_serial_reset>:
}
    2a20:	4770      	bx	lr
    2a22:	bf00      	nop

00002a24 <usb_serial_configure>:
	if (usb_high_speed) {
    2a24:	4b2d      	ldr	r3, [pc, #180]	; (2adc <usb_serial_configure+0xb8>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    2a26:	2100      	movs	r1, #0
    2a28:	2280      	movs	r2, #128	; 0x80
    2a2a:	482d      	ldr	r0, [pc, #180]	; (2ae0 <usb_serial_configure+0xbc>)
{
    2a2c:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    2a2e:	781b      	ldrb	r3, [r3, #0]
	tx_head = 0;
    2a30:	2400      	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    2a32:	4d2c      	ldr	r5, [pc, #176]	; (2ae4 <usb_serial_configure+0xc0>)
	if (usb_high_speed) {
    2a34:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
    2a36:	4e2c      	ldr	r6, [pc, #176]	; (2ae8 <usb_serial_configure+0xc4>)
	if (usb_high_speed) {
    2a38:	bf0c      	ite	eq
    2a3a:	2340      	moveq	r3, #64	; 0x40
    2a3c:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    2a40:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    2a42:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    2a44:	f002 fd1c 	bl	5480 <memset>
	tx_head = 0;
    2a48:	4a28      	ldr	r2, [pc, #160]	; (2aec <usb_serial_configure+0xc8>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    2a4a:	4621      	mov	r1, r4
	tx_available = 0;
    2a4c:	4b28      	ldr	r3, [pc, #160]	; (2af0 <usb_serial_configure+0xcc>)
	tx_head = 0;
    2a4e:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    2a50:	f44f 7280 	mov.w	r2, #256	; 0x100
    2a54:	4827      	ldr	r0, [pc, #156]	; (2af4 <usb_serial_configure+0xd0>)
	tx_available = 0;
    2a56:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    2a58:	f002 fd12 	bl	5480 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    2a5c:	4a26      	ldr	r2, [pc, #152]	; (2af8 <usb_serial_configure+0xd4>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    2a5e:	2110      	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
    2a60:	4b26      	ldr	r3, [pc, #152]	; (2afc <usb_serial_configure+0xd8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    2a62:	2002      	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
    2a64:	e9c2 4400 	strd	r4, r4, [r2]
    2a68:	e9c2 4402 	strd	r4, r4, [r2, #8]
	rx_head = 0;
    2a6c:	4a24      	ldr	r2, [pc, #144]	; (2b00 <usb_serial_configure+0xdc>)
	memset(rx_index, 0, sizeof(rx_index));
    2a6e:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
    2a72:	7014      	strb	r4, [r2, #0]
	rx_available = 0;
    2a74:	4a23      	ldr	r2, [pc, #140]	; (2b04 <usb_serial_configure+0xe0>)
	memset(rx_index, 0, sizeof(rx_index));
    2a76:	e9c3 4402 	strd	r4, r4, [r3, #8]
	rx_tail = 0;
    2a7a:	4b23      	ldr	r3, [pc, #140]	; (2b08 <usb_serial_configure+0xe4>)
    2a7c:	701c      	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    2a7e:	4623      	mov	r3, r4
	rx_available = 0;
    2a80:	6014      	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    2a82:	4622      	mov	r2, r4
    2a84:	f7ff fd78 	bl	2578 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    2a88:	4622      	mov	r2, r4
    2a8a:	8831      	ldrh	r1, [r6, #0]
    2a8c:	2003      	movs	r0, #3
    2a8e:	4b1f      	ldr	r3, [pc, #124]	; (2b0c <usb_serial_configure+0xe8>)
    2a90:	f7ff fd40 	bl	2514 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    2a94:	4623      	mov	r3, r4
    2a96:	2201      	movs	r2, #1
    2a98:	8829      	ldrh	r1, [r5, #0]
    2a9a:	2004      	movs	r0, #4
    2a9c:	f7ff fd6c 	bl	2578 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    2aa0:	4620      	mov	r0, r4
    2aa2:	3401      	adds	r4, #1
    2aa4:	f7ff fe0e 	bl	26c4 <rx_queue_transfer>
    2aa8:	2c08      	cmp	r4, #8
    2aaa:	d1f9      	bne.n	2aa0 <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
    2aac:	4b18      	ldr	r3, [pc, #96]	; (2b10 <usb_serial_configure+0xec>)
    2aae:	2100      	movs	r1, #0
	USB1_GPTIMER0LD = microseconds - 1;
    2ab0:	224a      	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
    2ab2:	4818      	ldr	r0, [pc, #96]	; (2b14 <usb_serial_configure+0xf0>)
    2ab4:	4c18      	ldr	r4, [pc, #96]	; (2b18 <usb_serial_configure+0xf4>)
    2ab6:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    2ab8:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    2abc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    2ac0:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    2ac4:	4915      	ldr	r1, [pc, #84]	; (2b1c <usb_serial_configure+0xf8>)
	USB1_USBINTR |= USB_USBINTR_TIE0;
    2ac6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    2aca:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    2ace:	b121      	cbz	r1, 2ada <usb_serial_configure+0xb6>
    2ad0:	4a13      	ldr	r2, [pc, #76]	; (2b20 <usb_serial_configure+0xfc>)
    2ad2:	7813      	ldrb	r3, [r2, #0]
    2ad4:	f043 0301 	orr.w	r3, r3, #1
    2ad8:	7013      	strb	r3, [r2, #0]
}
    2ada:	bd70      	pop	{r4, r5, r6, pc}
    2adc:	20008ce3 	.word	0x20008ce3
    2ae0:	20008800 	.word	0x20008800
    2ae4:	20008cd4 	.word	0x20008cd4
    2ae8:	20008cd0 	.word	0x20008cd0
    2aec:	20008cdf 	.word	0x20008cdf
    2af0:	20008cd2 	.word	0x20008cd2
    2af4:	20008700 	.word	0x20008700
    2af8:	20008c70 	.word	0x20008c70
    2afc:	20008c80 	.word	0x20008c80
    2b00:	20008cdb 	.word	0x20008cdb
    2b04:	20008c6c 	.word	0x20008c6c
    2b08:	20008cdc 	.word	0x20008cdc
    2b0c:	00002725 	.word	0x00002725
    2b10:	402e0000 	.word	0x402e0000
    2b14:	20008cc8 	.word	0x20008cc8
    2b18:	000027d9 	.word	0x000027d9
    2b1c:	00000000 	.word	0x00000000
    2b20:	20008ce5 	.word	0x20008ce5

00002b24 <usb_serial_read>:
{
    2b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    2b28:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    2b2c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	uint32_t tail = rx_tail;
    2b30:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 2bfc <usb_serial_read+0xd8>
{
    2b34:	b083      	sub	sp, #12
	NVIC_DISABLE_IRQ(IRQ_USB1);
    2b36:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	while (count < size && tail != rx_head) {
    2b3a:	468b      	mov	fp, r1
	uint32_t tail = rx_tail;
    2b3c:	f89a 4000 	ldrb.w	r4, [sl]
	while (count < size && tail != rx_head) {
    2b40:	2900      	cmp	r1, #0
    2b42:	d04f      	beq.n	2be4 <usb_serial_read+0xc0>
    2b44:	4680      	mov	r8, r0
    2b46:	b2e4      	uxtb	r4, r4
	uint32_t count=0;
    2b48:	2700      	movs	r7, #0
		uint32_t avail = rx_count[i] - rx_index[i];
    2b4a:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 2c00 <usb_serial_read+0xdc>
	while (count < size && tail != rx_head) {
    2b4e:	4b26      	ldr	r3, [pc, #152]	; (2be8 <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    2b50:	ebab 0207 	sub.w	r2, fp, r7
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    2b54:	4925      	ldr	r1, [pc, #148]	; (2bec <usb_serial_read+0xc8>)
	while (count < size && tail != rx_head) {
    2b56:	781b      	ldrb	r3, [r3, #0]
    2b58:	42a3      	cmp	r3, r4
		if (++tail > RX_NUM) tail = 0;
    2b5a:	f104 0401 	add.w	r4, r4, #1
	while (count < size && tail != rx_head) {
    2b5e:	d03f      	beq.n	2be0 <usb_serial_read+0xbc>
		if (++tail > RX_NUM) tail = 0;
    2b60:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
    2b62:	4b23      	ldr	r3, [pc, #140]	; (2bf0 <usb_serial_read+0xcc>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    2b64:	4640      	mov	r0, r8
		if (++tail > RX_NUM) tail = 0;
    2b66:	bf28      	it	cs
    2b68:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    2b6a:	5d1e      	ldrb	r6, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    2b6c:	f839 c016 	ldrh.w	ip, [r9, r6, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    2b70:	eb0c 2346 	add.w	r3, ip, r6, lsl #9
    2b74:	4419      	add	r1, r3
		uint32_t avail = rx_count[i] - rx_index[i];
    2b76:	4b1f      	ldr	r3, [pc, #124]	; (2bf4 <usb_serial_read+0xd0>)
    2b78:	f833 5016 	ldrh.w	r5, [r3, r6, lsl #1]
    2b7c:	eba5 050c 	sub.w	r5, r5, ip
		if (avail > len) {
    2b80:	42aa      	cmp	r2, r5
    2b82:	d21c      	bcs.n	2bbe <usb_serial_read+0x9a>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    2b84:	eb0c 2c46 	add.w	ip, ip, r6, lsl #9
    2b88:	4918      	ldr	r1, [pc, #96]	; (2bec <usb_serial_read+0xc8>)
			rx_available -= len;
    2b8a:	4c1b      	ldr	r4, [pc, #108]	; (2bf8 <usb_serial_read+0xd4>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    2b8c:	4461      	add	r1, ip
    2b8e:	9201      	str	r2, [sp, #4]
    2b90:	f7fe fe3c 	bl	180c <memcpy>
			rx_available -= len;
    2b94:	6821      	ldr	r1, [r4, #0]
			rx_index[i] += len;
    2b96:	f839 5016 	ldrh.w	r5, [r9, r6, lsl #1]
	return count;
    2b9a:	4658      	mov	r0, fp
			rx_index[i] += len;
    2b9c:	9a01      	ldr	r2, [sp, #4]
			rx_available -= len;
    2b9e:	eba1 010b 	sub.w	r1, r1, fp
			rx_index[i] += len;
    2ba2:	442a      	add	r2, r5
			rx_available -= len;
    2ba4:	4439      	add	r1, r7
			rx_index[i] += len;
    2ba6:	f829 2016 	strh.w	r2, [r9, r6, lsl #1]
			rx_available -= len;
    2baa:	6021      	str	r1, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
    2bac:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    2bb0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    2bb4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
    2bb8:	b003      	add	sp, #12
    2bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    2bbe:	462a      	mov	r2, r5
			count += avail;
    2bc0:	442f      	add	r7, r5
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    2bc2:	f7fe fe23 	bl	180c <memcpy>
			rx_available -= avail;
    2bc6:	490c      	ldr	r1, [pc, #48]	; (2bf8 <usb_serial_read+0xd4>)
			rx_tail = tail;
    2bc8:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    2bca:	4630      	mov	r0, r6
			rx_available -= avail;
    2bcc:	680a      	ldr	r2, [r1, #0]
			p += avail;
    2bce:	44a8      	add	r8, r5
			rx_available -= avail;
    2bd0:	1b52      	subs	r2, r2, r5
    2bd2:	600a      	str	r2, [r1, #0]
			rx_tail = tail;
    2bd4:	f88a 3000 	strb.w	r3, [sl]
			rx_queue_transfer(i);
    2bd8:	f7ff fd74 	bl	26c4 <rx_queue_transfer>
	while (count < size && tail != rx_head) {
    2bdc:	45bb      	cmp	fp, r7
    2bde:	d8b6      	bhi.n	2b4e <usb_serial_read+0x2a>
	return count;
    2be0:	4638      	mov	r0, r7
    2be2:	e7e3      	b.n	2bac <usb_serial_read+0x88>
	while (count < size && tail != rx_head) {
    2be4:	4608      	mov	r0, r1
    2be6:	e7e1      	b.n	2bac <usb_serial_read+0x88>
    2be8:	20008cdb 	.word	0x20008cdb
    2bec:	20200080 	.word	0x20200080
    2bf0:	20008c90 	.word	0x20008c90
    2bf4:	20008c70 	.word	0x20008c70
    2bf8:	20008c6c 	.word	0x20008c6c
    2bfc:	20008cdc 	.word	0x20008cdc
    2c00:	20008c80 	.word	0x20008c80

00002c04 <usb_serial_peekchar>:
	if (tail == rx_head) return -1;
    2c04:	4b0b      	ldr	r3, [pc, #44]	; (2c34 <usb_serial_peekchar+0x30>)
	uint32_t tail = rx_tail;
    2c06:	4a0c      	ldr	r2, [pc, #48]	; (2c38 <usb_serial_peekchar+0x34>)
    2c08:	7812      	ldrb	r2, [r2, #0]
	if (tail == rx_head) return -1;
    2c0a:	7819      	ldrb	r1, [r3, #0]
	uint32_t tail = rx_tail;
    2c0c:	b2d3      	uxtb	r3, r2
	if (tail == rx_head) return -1;
    2c0e:	428a      	cmp	r2, r1
    2c10:	d00d      	beq.n	2c2e <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    2c12:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    2c14:	4809      	ldr	r0, [pc, #36]	; (2c3c <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    2c16:	4a0a      	ldr	r2, [pc, #40]	; (2c40 <usb_serial_peekchar+0x3c>)
	if (++tail > RX_NUM) tail = 0;
    2c18:	2b09      	cmp	r3, #9
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    2c1a:	490a      	ldr	r1, [pc, #40]	; (2c44 <usb_serial_peekchar+0x40>)
	if (++tail > RX_NUM) tail = 0;
    2c1c:	bf28      	it	cs
    2c1e:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    2c20:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    2c22:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    2c26:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    2c2a:	5c58      	ldrb	r0, [r3, r1]
    2c2c:	4770      	bx	lr
	if (tail == rx_head) return -1;
    2c2e:	f04f 30ff 	mov.w	r0, #4294967295
}
    2c32:	4770      	bx	lr
    2c34:	20008cdb 	.word	0x20008cdb
    2c38:	20008cdc 	.word	0x20008cdc
    2c3c:	20008c90 	.word	0x20008c90
    2c40:	20200080 	.word	0x20200080
    2c44:	20008c80 	.word	0x20008c80

00002c48 <usb_serial_available>:
	uint32_t n = rx_available;
    2c48:	4b04      	ldr	r3, [pc, #16]	; (2c5c <usb_serial_available+0x14>)
{
    2c4a:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
    2c4c:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
    2c4e:	b10c      	cbz	r4, 2c54 <usb_serial_available+0xc>
}
    2c50:	4620      	mov	r0, r4
    2c52:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
    2c54:	f000 f8e0 	bl	2e18 <yield>
}
    2c58:	4620      	mov	r0, r4
    2c5a:	bd10      	pop	{r4, pc}
    2c5c:	20008c6c 	.word	0x20008c6c

00002c60 <usb_serial_flush_input>:
{
    2c60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    2c64:	4e14      	ldr	r6, [pc, #80]	; (2cb8 <usb_serial_flush_input+0x58>)
	while (tail != rx_head) {
    2c66:	4d15      	ldr	r5, [pc, #84]	; (2cbc <usb_serial_flush_input+0x5c>)
	uint32_t tail = rx_tail;
    2c68:	7833      	ldrb	r3, [r6, #0]
	while (tail != rx_head) {
    2c6a:	782a      	ldrb	r2, [r5, #0]
    2c6c:	4293      	cmp	r3, r2
    2c6e:	d021      	beq.n	2cb4 <usb_serial_flush_input+0x54>
    2c70:	b2dc      	uxtb	r4, r3
    2c72:	f8df 9050 	ldr.w	r9, [pc, #80]	; 2cc4 <usb_serial_flush_input+0x64>
    2c76:	f8df b050 	ldr.w	fp, [pc, #80]	; 2cc8 <usb_serial_flush_input+0x68>
    2c7a:	f8df 8050 	ldr.w	r8, [pc, #80]	; 2ccc <usb_serial_flush_input+0x6c>
    2c7e:	4f10      	ldr	r7, [pc, #64]	; (2cc0 <usb_serial_flush_input+0x60>)
		if (++tail > RX_NUM) tail = 0;
    2c80:	3401      	adds	r4, #1
    2c82:	2c08      	cmp	r4, #8
		rx_tail = tail;
    2c84:	fa5f fa84 	uxtb.w	sl, r4
		if (++tail > RX_NUM) tail = 0;
    2c88:	d901      	bls.n	2c8e <usb_serial_flush_input+0x2e>
    2c8a:	2400      	movs	r4, #0
    2c8c:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    2c8e:	f819 0004 	ldrb.w	r0, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    2c92:	f8db 3000 	ldr.w	r3, [fp]
    2c96:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
    2c9a:	f837 1010 	ldrh.w	r1, [r7, r0, lsl #1]
    2c9e:	1a52      	subs	r2, r2, r1
    2ca0:	1a9b      	subs	r3, r3, r2
    2ca2:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    2ca6:	f7ff fd0d 	bl	26c4 <rx_queue_transfer>
		rx_tail = tail;
    2caa:	f886 a000 	strb.w	sl, [r6]
	while (tail != rx_head) {
    2cae:	782b      	ldrb	r3, [r5, #0]
    2cb0:	42a3      	cmp	r3, r4
    2cb2:	d1e5      	bne.n	2c80 <usb_serial_flush_input+0x20>
}
    2cb4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2cb8:	20008cdc 	.word	0x20008cdc
    2cbc:	20008cdb 	.word	0x20008cdb
    2cc0:	20008c80 	.word	0x20008c80
    2cc4:	20008c90 	.word	0x20008c90
    2cc8:	20008c6c 	.word	0x20008c6c
    2ccc:	20008c70 	.word	0x20008c70

00002cd0 <usb_serial_getchar>:
{
    2cd0:	b500      	push	{lr}
    2cd2:	b083      	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
    2cd4:	2101      	movs	r1, #1
    2cd6:	f10d 0007 	add.w	r0, sp, #7
    2cda:	f7ff ff23 	bl	2b24 <usb_serial_read>
    2cde:	b120      	cbz	r0, 2cea <usb_serial_getchar+0x1a>
    2ce0:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
    2ce4:	b003      	add	sp, #12
    2ce6:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
    2cea:	f04f 30ff 	mov.w	r0, #4294967295
    2cee:	e7f9      	b.n	2ce4 <usb_serial_getchar+0x14>

00002cf0 <usb_serial_putchar>:
	if (!usb_configuration) return 0;
    2cf0:	4b09      	ldr	r3, [pc, #36]	; (2d18 <usb_serial_putchar+0x28>)
{
    2cf2:	b500      	push	{lr}
    2cf4:	b083      	sub	sp, #12
	if (!usb_configuration) return 0;
    2cf6:	781b      	ldrb	r3, [r3, #0]
{
    2cf8:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!usb_configuration) return 0;
    2cfc:	b13b      	cbz	r3, 2d0e <usb_serial_putchar+0x1e>
    2cfe:	2101      	movs	r1, #1
    2d00:	f10d 0007 	add.w	r0, sp, #7
    2d04:	f7ff fdb0 	bl	2868 <usb_serial_write.part.0>
}
    2d08:	b003      	add	sp, #12
    2d0a:	f85d fb04 	ldr.w	pc, [sp], #4
    2d0e:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    2d12:	b003      	add	sp, #12
    2d14:	f85d fb04 	ldr.w	pc, [sp], #4
    2d18:	20008ce2 	.word	0x20008ce2

00002d1c <usb_serial_write>:
	if (!usb_configuration) return 0;
    2d1c:	4b04      	ldr	r3, [pc, #16]	; (2d30 <usb_serial_write+0x14>)
    2d1e:	781b      	ldrb	r3, [r3, #0]
    2d20:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    2d24:	b10b      	cbz	r3, 2d2a <usb_serial_write+0xe>
    2d26:	f7ff bd9f 	b.w	2868 <usb_serial_write.part.0>
}
    2d2a:	4610      	mov	r0, r2
    2d2c:	4770      	bx	lr
    2d2e:	bf00      	nop
    2d30:	20008ce2 	.word	0x20008ce2

00002d34 <usb_serial_write_buffer_free>:
{
    2d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    2d38:	2400      	movs	r4, #0
	tx_noautoflush = 1;
    2d3a:	f8df 8044 	ldr.w	r8, [pc, #68]	; 2d80 <usb_serial_write_buffer_free+0x4c>
    2d3e:	2301      	movs	r3, #1
    2d40:	4d0d      	ldr	r5, [pc, #52]	; (2d78 <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    2d42:	4627      	mov	r7, r4
    2d44:	4e0d      	ldr	r6, [pc, #52]	; (2d7c <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
    2d46:	f888 3000 	strb.w	r3, [r8]
		if (i == tx_head) continue;
    2d4a:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    2d4c:	4628      	mov	r0, r5
	for (uint32_t i=0; i < TX_NUM; i++) {
    2d4e:	3520      	adds	r5, #32
		if (i == tx_head) continue;
    2d50:	42a3      	cmp	r3, r4
	for (uint32_t i=0; i < TX_NUM; i++) {
    2d52:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    2d56:	d005      	beq.n	2d64 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    2d58:	f7ff fc7a 	bl	2650 <usb_transfer_status>
    2d5c:	0603      	lsls	r3, r0, #24
    2d5e:	bf58      	it	pl
    2d60:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    2d64:	2c04      	cmp	r4, #4
    2d66:	d1f0      	bne.n	2d4a <usb_serial_write_buffer_free+0x16>
	asm("dsb" ::: "memory");
    2d68:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    2d6c:	2300      	movs	r3, #0
}
    2d6e:	4638      	mov	r0, r7
	tx_noautoflush = 0;
    2d70:	f888 3000 	strb.w	r3, [r8]
}
    2d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2d78:	20008800 	.word	0x20008800
    2d7c:	20008cdf 	.word	0x20008cdf
    2d80:	20008ce0 	.word	0x20008ce0

00002d84 <usb_serial_flush_output>:
{
    2d84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    2d88:	4b1d      	ldr	r3, [pc, #116]	; (2e00 <usb_serial_flush_output+0x7c>)
    2d8a:	781b      	ldrb	r3, [r3, #0]
    2d8c:	b113      	cbz	r3, 2d94 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    2d8e:	4d1d      	ldr	r5, [pc, #116]	; (2e04 <usb_serial_flush_output+0x80>)
    2d90:	882a      	ldrh	r2, [r5, #0]
    2d92:	b90a      	cbnz	r2, 2d98 <usb_serial_flush_output+0x14>
}
    2d94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	transfer_t *xfer = tx_transfer + tx_head;
    2d98:	4e1b      	ldr	r6, [pc, #108]	; (2e08 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    2d9a:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    2d9e:	491b      	ldr	r1, [pc, #108]	; (2e0c <usb_serial_flush_output+0x88>)
    2da0:	7833      	ldrb	r3, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    2da2:	464a      	mov	r2, r9
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    2da4:	4c1a      	ldr	r4, [pc, #104]	; (2e10 <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    2da6:	eb01 1843 	add.w	r8, r1, r3, lsl #5
	tx_noautoflush = 1;
    2daa:	4f1a      	ldr	r7, [pc, #104]	; (2e14 <usb_serial_flush_output+0x90>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    2dac:	eb04 24c3 	add.w	r4, r4, r3, lsl #11
	tx_noautoflush = 1;
    2db0:	2301      	movs	r3, #1
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    2db2:	4640      	mov	r0, r8
	tx_noautoflush = 1;
    2db4:	703b      	strb	r3, [r7, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    2db6:	4621      	mov	r1, r4
    2db8:	2300      	movs	r3, #0
    2dba:	f7ff fc0f 	bl	25dc <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    2dbe:	eb04 0209 	add.w	r2, r4, r9
	asm("dsb");
    2dc2:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    2dc6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    2dca:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    2dce:	3420      	adds	r4, #32
	} while (location < end_addr);
    2dd0:	42a2      	cmp	r2, r4
    2dd2:	d8fa      	bhi.n	2dca <usb_serial_flush_output+0x46>
	asm("dsb");
    2dd4:	f3bf 8f4f 	dsb	sy
	asm("isb");
    2dd8:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    2ddc:	2004      	movs	r0, #4
    2dde:	4641      	mov	r1, r8
    2de0:	f7ff fc14 	bl	260c <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    2de4:	7833      	ldrb	r3, [r6, #0]
    2de6:	3301      	adds	r3, #1
    2de8:	b2db      	uxtb	r3, r3
    2dea:	2b03      	cmp	r3, #3
    2dec:	bf88      	it	hi
    2dee:	2300      	movhi	r3, #0
    2df0:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    2df2:	2300      	movs	r3, #0
    2df4:	802b      	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
    2df6:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    2dfa:	703b      	strb	r3, [r7, #0]
}
    2dfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2e00:	20008ce2 	.word	0x20008ce2
    2e04:	20008cd2 	.word	0x20008cd2
    2e08:	20008cdf 	.word	0x20008cdf
    2e0c:	20008800 	.word	0x20008800
    2e10:	20201080 	.word	0x20201080
    2e14:	20008ce0 	.word	0x20008ce0

00002e18 <yield>:
uint8_t yield_active_check_flags = 0;


void yield(void) __attribute__ ((weak));
void yield(void)
{
    2e18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t check_flags = yield_active_check_flags;
    2e1c:	4b2d      	ldr	r3, [pc, #180]	; (2ed4 <yield+0xbc>)
    2e1e:	781e      	ldrb	r6, [r3, #0]
	if (!check_flags) return;	// nothing to do
    2e20:	b166      	cbz	r6, 2e3c <yield+0x24>

	// TODO: do nothing if called from interrupt

	static uint8_t running=0;
	if (running) return; // TODO: does this need to be atomic?
    2e22:	4f2d      	ldr	r7, [pc, #180]	; (2ed8 <yield+0xc0>)
    2e24:	783b      	ldrb	r3, [r7, #0]
    2e26:	b94b      	cbnz	r3, 2e3c <yield+0x24>
	running = 1;
    2e28:	2301      	movs	r3, #1

	// USB Serial - Add hack to minimize impact...
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    2e2a:	07f1      	lsls	r1, r6, #31
	running = 1;
    2e2c:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    2e2e:	d443      	bmi.n	2eb8 <yield+0xa0>
		if (SerialUSB2.available()) serialEventUSB2();
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    2e30:	07b2      	lsls	r2, r6, #30
    2e32:	d426      	bmi.n	2e82 <yield+0x6a>
		HardwareSerialIMXRT::processSerialEventsList();
	}

	running = 0;
    2e34:	2300      	movs	r3, #0
    2e36:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_EVENT_RESPONDER) {
    2e38:	0773      	lsls	r3, r6, #29
    2e3a:	d401      	bmi.n	2e40 <yield+0x28>
		EventResponder::runFromYield();
	}
};
    2e3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    2e40:	4b26      	ldr	r3, [pc, #152]	; (2edc <yield+0xc4>)
    2e42:	681a      	ldr	r2, [r3, #0]
    2e44:	2a00      	cmp	r2, #0
    2e46:	d0f9      	beq.n	2e3c <yield+0x24>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    2e48:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    2e4c:	2a00      	cmp	r2, #0
    2e4e:	d1f5      	bne.n	2e3c <yield+0x24>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    2e50:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    2e54:	b672      	cpsid	i
		EventResponder *first = firstYield;
    2e56:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    2e58:	2800      	cmp	r0, #0
    2e5a:	d034      	beq.n	2ec6 <yield+0xae>
		if (runningFromYield) {
    2e5c:	4c20      	ldr	r4, [pc, #128]	; (2ee0 <yield+0xc8>)
    2e5e:	7821      	ldrb	r1, [r4, #0]
    2e60:	2900      	cmp	r1, #0
    2e62:	d130      	bne.n	2ec6 <yield+0xae>
		runningFromYield = true;
    2e64:	2201      	movs	r2, #1
    2e66:	7022      	strb	r2, [r4, #0]
		firstYield = first->_next;
    2e68:	6942      	ldr	r2, [r0, #20]
    2e6a:	601a      	str	r2, [r3, #0]
		if (firstYield) {
    2e6c:	2a00      	cmp	r2, #0
    2e6e:	d02e      	beq.n	2ece <yield+0xb6>
			firstYield->_prev = nullptr;
    2e70:	6191      	str	r1, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    2e72:	b905      	cbnz	r5, 2e76 <yield+0x5e>
    2e74:	b662      	cpsie	i
		first->_triggered = false;
    2e76:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    2e78:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    2e7a:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    2e7c:	4798      	blx	r3
		runningFromYield = false;
    2e7e:	7025      	strb	r5, [r4, #0]
    2e80:	e7dc      	b.n	2e3c <yield+0x24>

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    2e82:	f8df 8064 	ldr.w	r8, [pc, #100]	; 2ee8 <yield+0xd0>
    2e86:	f898 3000 	ldrb.w	r3, [r8]
    2e8a:	2b00      	cmp	r3, #0
    2e8c:	d0d2      	beq.n	2e34 <yield+0x1c>
    2e8e:	2500      	movs	r5, #0
    2e90:	f8df 9058 	ldr.w	r9, [pc, #88]	; 2eec <yield+0xd4>
    2e94:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    2e96:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    2e9a:	3501      	adds	r5, #1
	static HardwareSerialIMXRT 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    2e9c:	6823      	ldr	r3, [r4, #0]
    2e9e:	4620      	mov	r0, r4
    2ea0:	691b      	ldr	r3, [r3, #16]
    2ea2:	4798      	blx	r3
    2ea4:	b110      	cbz	r0, 2eac <yield+0x94>
    2ea6:	6963      	ldr	r3, [r4, #20]
    2ea8:	689b      	ldr	r3, [r3, #8]
    2eaa:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    2eac:	f898 2000 	ldrb.w	r2, [r8]
    2eb0:	b2eb      	uxtb	r3, r5
    2eb2:	429a      	cmp	r2, r3
    2eb4:	d8ef      	bhi.n	2e96 <yield+0x7e>
    2eb6:	e7bd      	b.n	2e34 <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    2eb8:	f7ff fec6 	bl	2c48 <usb_serial_available>
		if (Serial.available()) serialEvent();
    2ebc:	2800      	cmp	r0, #0
    2ebe:	d0b7      	beq.n	2e30 <yield+0x18>
    2ec0:	f3af 8000 	nop.w
    2ec4:	e7b4      	b.n	2e30 <yield+0x18>
		if (doit) __enable_irq();
    2ec6:	2d00      	cmp	r5, #0
    2ec8:	d1b8      	bne.n	2e3c <yield+0x24>
    2eca:	b662      	cpsie	i
    2ecc:	e7b6      	b.n	2e3c <yield+0x24>
			lastYield = nullptr;
    2ece:	4b05      	ldr	r3, [pc, #20]	; (2ee4 <yield+0xcc>)
    2ed0:	601a      	str	r2, [r3, #0]
    2ed2:	e7ce      	b.n	2e72 <yield+0x5a>
    2ed4:	20008ce5 	.word	0x20008ce5
    2ed8:	20008cd8 	.word	0x20008cd8
    2edc:	200089b0 	.word	0x200089b0
    2ee0:	20008cd6 	.word	0x20008cd6
    2ee4:	200089bc 	.word	0x200089bc
    2ee8:	20008cd7 	.word	0x20008cd7
    2eec:	200089c0 	.word	0x200089c0

00002ef0 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    2ef0:	b570      	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    2ef2:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    2ef6:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    2ef8:	4c0c      	ldr	r4, [pc, #48]	; (2f2c <EventResponder::runFromInterrupt()+0x3c>)
    2efa:	6820      	ldr	r0, [r4, #0]
		if (first) {
    2efc:	b180      	cbz	r0, 2f20 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    2efe:	4e0c      	ldr	r6, [pc, #48]	; (2f30 <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    2f00:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    2f02:	6943      	ldr	r3, [r0, #20]
    2f04:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    2f06:	b173      	cbz	r3, 2f26 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    2f08:	619d      	str	r5, [r3, #24]
		if (doit) __enable_irq();
    2f0a:	b902      	cbnz	r2, 2f0e <EventResponder::runFromInterrupt()+0x1e>
    2f0c:	b662      	cpsie	i
			}
			enableInterrupts(irq);
			first->_triggered = false;
			(*(first->_function))(*first);
    2f0e:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    2f10:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    2f12:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    2f14:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    2f18:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    2f1a:	6820      	ldr	r0, [r4, #0]
		if (first) {
    2f1c:	2800      	cmp	r0, #0
    2f1e:	d1f0      	bne.n	2f02 <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    2f20:	b902      	cbnz	r2, 2f24 <EventResponder::runFromInterrupt()+0x34>
    2f22:	b662      	cpsie	i
		} else {
			enableInterrupts(irq);
			break;
		}
	}
}
    2f24:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    2f26:	6033      	str	r3, [r6, #0]
    2f28:	e7ef      	b.n	2f0a <EventResponder::runFromInterrupt()+0x1a>
    2f2a:	bf00      	nop
    2f2c:	200089b8 	.word	0x200089b8
    2f30:	200089b4 	.word	0x200089b4

00002f34 <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    2f34:	f7ff bfdc 	b.w	2ef0 <EventResponder::runFromInterrupt()>

00002f38 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    2f38:	4904      	ldr	r1, [pc, #16]	; (2f4c <systick_isr+0x14>)
	systick_millis_count++;
    2f3a:	4a05      	ldr	r2, [pc, #20]	; (2f50 <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
    2f3c:	6849      	ldr	r1, [r1, #4]
    2f3e:	4b05      	ldr	r3, [pc, #20]	; (2f54 <systick_isr+0x1c>)
    2f40:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    2f42:	6813      	ldr	r3, [r2, #0]
    2f44:	3301      	adds	r3, #1
    2f46:	6013      	str	r3, [r2, #0]
}
    2f48:	4770      	bx	lr
    2f4a:	bf00      	nop
    2f4c:	e0001000 	.word	0xe0001000
    2f50:	20008cb4 	.word	0x20008cb4
    2f54:	20008cb0 	.word	0x20008cb0

00002f58 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    2f58:	49a2      	ldr	r1, [pc, #648]	; (31e4 <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    2f5a:	4ba3      	ldr	r3, [pc, #652]	; (31e8 <set_arm_clock+0x290>)
	if (frequency > 528000000) {
    2f5c:	4288      	cmp	r0, r1
{
    2f5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
    2f62:	4ca2      	ldr	r4, [pc, #648]	; (31ec <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    2f64:	695e      	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    2f66:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    2f68:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
    2f6c:	d91b      	bls.n	2fa6 <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    2f6e:	4ba0      	ldr	r3, [pc, #640]	; (31f0 <set_arm_clock+0x298>)
    2f70:	4298      	cmp	r0, r3
    2f72:	f240 8102 	bls.w	317a <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    2f76:	1ac3      	subs	r3, r0, r3
    2f78:	499e      	ldr	r1, [pc, #632]	; (31f4 <set_arm_clock+0x29c>)
    2f7a:	0a1b      	lsrs	r3, r3, #8
    2f7c:	fba1 1303 	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    2f80:	f240 6127 	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    2f84:	09db      	lsrs	r3, r3, #7
    2f86:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2f8a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2f8e:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    2f92:	428b      	cmp	r3, r1
    2f94:	bf28      	it	cs
    2f96:	460b      	movcs	r3, r1
    2f98:	f5a3 7748 	sub.w	r7, r3, #800	; 0x320
    2f9c:	4b96      	ldr	r3, [pc, #600]	; (31f8 <set_arm_clock+0x2a0>)
    2f9e:	fba3 3707 	umull	r3, r7, r3, r7
    2fa2:	08ff      	lsrs	r7, r7, #3
    2fa4:	e004      	b.n	2fb0 <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
    2fa6:	4f95      	ldr	r7, [pc, #596]	; (31fc <set_arm_clock+0x2a4>)
    2fa8:	42b8      	cmp	r0, r7
    2faa:	bf8c      	ite	hi
    2fac:	270e      	movhi	r7, #14
    2fae:	2706      	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    2fb0:	498d      	ldr	r1, [pc, #564]	; (31e8 <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    2fb2:	f008 091f 	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    2fb6:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    2fba:	45b9      	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    2fbc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    2fc0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    2fc4:	d20c      	bcs.n	2fe0 <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    2fc6:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    2fca:	f5a1 21f8 	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    2fce:	ea48 0807 	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
    2fd2:	f8c1 800c 	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    2fd6:	680b      	ldr	r3, [r1, #0]
    2fd8:	2b00      	cmp	r3, #0
    2fda:	dafc      	bge.n	2fd6 <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    2fdc:	f008 091f 	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    2fe0:	f016 7300 	ands.w	r3, r6, #33554432	; 0x2000000
    2fe4:	d124      	bne.n	3030 <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    2fe6:	4986      	ldr	r1, [pc, #536]	; (3200 <set_arm_clock+0x2a8>)
    2fe8:	690c      	ldr	r4, [r1, #16]
    2fea:	4986      	ldr	r1, [pc, #536]	; (3204 <set_arm_clock+0x2ac>)
    2fec:	43a1      	bics	r1, r4
    2fee:	f000 80ea 	beq.w	31c6 <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    2ff2:	f482 5180 	eor.w	r1, r2, #4096	; 0x1000
    2ff6:	4634      	mov	r4, r6
    2ff8:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    2ffc:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    3000:	d004      	beq.n	300c <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    3002:	f026 5660 	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    3006:	431e      	orrs	r6, r3
			CCM_CBCDR = cbcdr;
    3008:	4b77      	ldr	r3, [pc, #476]	; (31e8 <set_arm_clock+0x290>)
    300a:	615e      	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    300c:	f411 5f40 	tst.w	r1, #12288	; 0x3000
    3010:	d007      	beq.n	3022 <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    3012:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
    3016:	4974      	ldr	r1, [pc, #464]	; (31e8 <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    3018:	432a      	orrs	r2, r5
			CCM_CBCMR = cbcmr;
    301a:	618a      	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    301c:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    301e:	071a      	lsls	r2, r3, #28
    3020:	d4fc      	bmi.n	301c <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    3022:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    3026:	4a70      	ldr	r2, [pc, #448]	; (31e8 <set_arm_clock+0x290>)
    3028:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    302a:	6c93      	ldr	r3, [r2, #72]	; 0x48
    302c:	069b      	lsls	r3, r3, #26
    302e:	d4fc      	bmi.n	302a <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
    3030:	4c75      	ldr	r4, [pc, #468]	; (3208 <set_arm_clock+0x2b0>)
    3032:	42a0      	cmp	r0, r4
    3034:	f200 80ce 	bhi.w	31d4 <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
    3038:	f04f 0c01 	mov.w	ip, #1
    303c:	4601      	mov	r1, r0
	uint32_t div_arm = 1;
    303e:	4663      	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
    3040:	fb03 1201 	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
    3044:	f103 0e01 	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
    3048:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    304c:	42a2      	cmp	r2, r4
    304e:	d818      	bhi.n	3082 <set_arm_clock+0x12a>
		if (div_arm < 8) {
    3050:	f1be 0f08 	cmp.w	lr, #8
				div_arm = 1;
    3054:	f04f 0301 	mov.w	r3, #1
		if (div_arm < 8) {
    3058:	f040 808d 	bne.w	3176 <set_arm_clock+0x21e>
			if (div_ahb < 5) {
    305c:	f1bc 0f04 	cmp.w	ip, #4
    3060:	f200 8091 	bhi.w	3186 <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
    3064:	180a      	adds	r2, r1, r0
    3066:	42a2      	cmp	r2, r4
    3068:	f200 80a4 	bhi.w	31b4 <set_arm_clock+0x25c>
    306c:	fb05 f100 	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
    3070:	46ac      	mov	ip, r5
			div_arm = div_arm + 1;
    3072:	f103 0e01 	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    3076:	fb03 1201 	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
    307a:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    307e:	42a2      	cmp	r2, r4
    3080:	d9e6      	bls.n	3050 <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    3082:	f10c 31ff 	add.w	r1, ip, #4294967295
    3086:	028c      	lsls	r4, r1, #10
    3088:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    308c:	485f      	ldr	r0, [pc, #380]	; (320c <set_arm_clock+0x2b4>)
    308e:	4410      	add	r0, r2
	if (mult > 108) mult = 108;
    3090:	4a5f      	ldr	r2, [pc, #380]	; (3210 <set_arm_clock+0x2b8>)
    3092:	4290      	cmp	r0, r2
    3094:	d97f      	bls.n	3196 <set_arm_clock+0x23e>
    3096:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 323c <set_arm_clock+0x2e4>
    309a:	226c      	movs	r2, #108	; 0x6c
    309c:	485d      	ldr	r0, [pc, #372]	; (3214 <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    309e:	4d58      	ldr	r5, [pc, #352]	; (3200 <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    30a0:	fbb0 f0fe 	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    30a4:	f8d5 e000 	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
    30a8:	fbb0 f0fc 	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    30ac:	f8df c190 	ldr.w	ip, [pc, #400]	; 3240 <set_arm_clock+0x2e8>
    30b0:	ea0e 0c0c 	and.w	ip, lr, ip
    30b4:	45d4      	cmp	ip, sl
    30b6:	d009      	beq.n	30cc <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    30b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    30bc:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    30c0:	f8c5 c000 	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    30c4:	602a      	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    30c6:	682a      	ldr	r2, [r5, #0]
    30c8:	2a00      	cmp	r2, #0
    30ca:	dafc      	bge.n	30c6 <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    30cc:	4a46      	ldr	r2, [pc, #280]	; (31e8 <set_arm_clock+0x290>)
    30ce:	6915      	ldr	r5, [r2, #16]
    30d0:	f005 0507 	and.w	r5, r5, #7
    30d4:	429d      	cmp	r5, r3
    30d6:	d003      	beq.n	30e0 <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    30d8:	6113      	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    30da:	6c93      	ldr	r3, [r2, #72]	; 0x48
    30dc:	03dd      	lsls	r5, r3, #15
    30de:	d4fc      	bmi.n	30da <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    30e0:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
    30e4:	d009      	beq.n	30fa <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    30e6:	f426 56e0 	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    30ea:	f404 54e0 	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
    30ee:	4a3e      	ldr	r2, [pc, #248]	; (31e8 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    30f0:	4326      	orrs	r6, r4
		CCM_CBCDR = cbcdr;
    30f2:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    30f4:	6c93      	ldr	r3, [r2, #72]	; 0x48
    30f6:	0799      	lsls	r1, r3, #30
    30f8:	d4fc      	bmi.n	30f4 <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    30fa:	4947      	ldr	r1, [pc, #284]	; (3218 <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
    30fc:	4a47      	ldr	r2, [pc, #284]	; (321c <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    30fe:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    3100:	4291      	cmp	r1, r2
    3102:	d83c      	bhi.n	317e <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    3104:	4b46      	ldr	r3, [pc, #280]	; (3220 <set_arm_clock+0x2c8>)
    3106:	09c9      	lsrs	r1, r1, #7
    3108:	fba3 3101 	umull	r3, r1, r3, r1
    310c:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    310e:	1e4b      	subs	r3, r1, #1
    3110:	021b      	lsls	r3, r3, #8
    3112:	ea86 0203 	eor.w	r2, r6, r3
    3116:	f412 7f40 	tst.w	r2, #768	; 0x300
    311a:	d006      	beq.n	312a <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    311c:	f426 7640 	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    3120:	f403 7340 	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
    3124:	4a30      	ldr	r2, [pc, #192]	; (31e8 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    3126:	4333      	orrs	r3, r6
		CCM_CBCDR = cbcdr;
    3128:	6153      	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    312a:	4a2f      	ldr	r2, [pc, #188]	; (31e8 <set_arm_clock+0x290>)
    312c:	6953      	ldr	r3, [r2, #20]
    312e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
    3132:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    3134:	6c93      	ldr	r3, [r2, #72]	; 0x48
    3136:	069b      	lsls	r3, r3, #26
    3138:	d4fc      	bmi.n	3134 <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    313a:	4b3a      	ldr	r3, [pc, #232]	; (3224 <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    313c:	454f      	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    313e:	fba3 2300 	umull	r2, r3, r3, r0
    3142:	f04f 32ff 	mov.w	r2, #4294967295
    3146:	ea4f 4393 	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
    314a:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    314e:	fbb2 f3f3 	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
    3152:	4a35      	ldr	r2, [pc, #212]	; (3228 <set_arm_clock+0x2d0>)
    3154:	6010      	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    3156:	4a35      	ldr	r2, [pc, #212]	; (322c <set_arm_clock+0x2d4>)
    3158:	6011      	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    315a:	4a35      	ldr	r2, [pc, #212]	; (3230 <set_arm_clock+0x2d8>)
    315c:	6013      	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    315e:	d208      	bcs.n	3172 <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    3160:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    3164:	4a21      	ldr	r2, [pc, #132]	; (31ec <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    3166:	ea48 0707 	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
    316a:	60d7      	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    316c:	6813      	ldr	r3, [r2, #0]
    316e:	2b00      	cmp	r3, #0
    3170:	dafc      	bge.n	316c <set_arm_clock+0x214>
	}

	return frequency;
}
    3172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3176:	4673      	mov	r3, lr
    3178:	e762      	b.n	3040 <set_arm_clock+0xe8>
    317a:	2712      	movs	r7, #18
    317c:	e718      	b.n	2fb0 <set_arm_clock+0x58>
    317e:	f44f 7340 	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
    3182:	2104      	movs	r1, #4
    3184:	e7c5      	b.n	3112 <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    3186:	f10c 31ff 	add.w	r1, ip, #4294967295
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    318a:	4820      	ldr	r0, [pc, #128]	; (320c <set_arm_clock+0x2b4>)
    318c:	2307      	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    318e:	028c      	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    3190:	4410      	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    3192:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    3196:	4a27      	ldr	r2, [pc, #156]	; (3234 <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    3198:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 3244 <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    319c:	fba2 2000 	umull	r2, r0, r2, r0
    31a0:	0d02      	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
    31a2:	4825      	ldr	r0, [pc, #148]	; (3238 <set_arm_clock+0x2e0>)
    31a4:	2a36      	cmp	r2, #54	; 0x36
    31a6:	bf38      	it	cc
    31a8:	2236      	movcc	r2, #54	; 0x36
    31aa:	fb02 f000 	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    31ae:	ea42 0a0a 	orr.w	sl, r2, sl
    31b2:	e774      	b.n	309e <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    31b4:	ea4f 248c 	mov.w	r4, ip, lsl #10
    31b8:	2300      	movs	r3, #0
    31ba:	ea86 218c 	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
    31be:	f04f 0e01 	mov.w	lr, #1
				div_ahb = div_ahb + 1;
    31c2:	46ac      	mov	ip, r5
    31c4:	e762      	b.n	308c <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    31c6:	461d      	mov	r5, r3
    31c8:	f086 54c0 	eor.w	r4, r6, #402653184	; 0x18000000
    31cc:	4611      	mov	r1, r2
    31ce:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
    31d2:	e713      	b.n	2ffc <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
    31d4:	2400      	movs	r4, #0
	uint32_t div_ahb = 1;
    31d6:	f04f 0c01 	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    31da:	4602      	mov	r2, r0
    31dc:	4631      	mov	r1, r6
    31de:	4623      	mov	r3, r4
	uint32_t div_arm = 1;
    31e0:	46e6      	mov	lr, ip
    31e2:	e753      	b.n	308c <set_arm_clock+0x134>
    31e4:	1f78a400 	.word	0x1f78a400
    31e8:	400fc000 	.word	0x400fc000
    31ec:	40080000 	.word	0x40080000
    31f0:	23c34600 	.word	0x23c34600
    31f4:	004cb223 	.word	0x004cb223
    31f8:	51eb851f 	.word	0x51eb851f
    31fc:	016e3600 	.word	0x016e3600
    3200:	400d8000 	.word	0x400d8000
    3204:	80003040 	.word	0x80003040
    3208:	269fb1ff 	.word	0x269fb1ff
    320c:	005b8d80 	.word	0x005b8d80
    3210:	4df67eff 	.word	0x4df67eff
    3214:	4d3f6400 	.word	0x4d3f6400
    3218:	08f0d17f 	.word	0x08f0d17f
    321c:	2cb4177f 	.word	0x2cb4177f
    3220:	00e5109f 	.word	0x00e5109f
    3224:	431bde83 	.word	0x431bde83
    3228:	20007b84 	.word	0x20007b84
    322c:	20007b80 	.word	0x20007b80
    3230:	20008cac 	.word	0x20008cac
    3234:	165e9f81 	.word	0x165e9f81
    3238:	00b71b00 	.word	0x00b71b00
    323c:	8000206c 	.word	0x8000206c
    3240:	8001307f 	.word	0x8001307f
    3244:	80002000 	.word	0x80002000

00003248 <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    3248:	4a07      	ldr	r2, [pc, #28]	; (3268 <rtc_get+0x20>)
    324a:	6a50      	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    324c:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uint32_t hi2 = SNVS_HPRTCMR;
    324e:	4619      	mov	r1, r3
    3250:	4684      	mov	ip, r0
    3252:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    3254:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    3256:	4299      	cmp	r1, r3
    3258:	d1f9      	bne.n	324e <rtc_get+0x6>
    325a:	4584      	cmp	ip, r0
    325c:	d1f7      	bne.n	324e <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
    325e:	0bdb      	lsrs	r3, r3, #15
}
    3260:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    3264:	4770      	bx	lr
    3266:	bf00      	nop
    3268:	400d4000 	.word	0x400d4000

0000326c <sm_align_pool>:
{
    326c:	b508      	push	{r3, lr}
	x = spool->pool_size % HEADER_SZ;
    326e:	e9d0 3200 	ldrd	r3, r2, [r0]
	if (!spool->pool || !spool->pool_size) return 0;
    3272:	b15b      	cbz	r3, 328c <sm_align_pool+0x20>
    3274:	b1ba      	cbz	r2, 32a6 <sm_align_pool+0x3a>
	if (spool->pool_size % HEADER_SZ) return 0;
    3276:	4b0f      	ldr	r3, [pc, #60]	; (32b4 <sm_align_pool+0x48>)
    3278:	fba3 1302 	umull	r1, r3, r3, r2
    327c:	08db      	lsrs	r3, r3, #3
    327e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3282:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    3286:	d10a      	bne.n	329e <sm_align_pool+0x32>
	if (smalloc_verify_pool(spool)) return 1;
    3288:	2001      	movs	r0, #1
}
    328a:	bd08      	pop	{r3, pc}
	x = spool->pool_size % HEADER_SZ;
    328c:	4b09      	ldr	r3, [pc, #36]	; (32b4 <sm_align_pool+0x48>)
    328e:	fba3 1302 	umull	r1, r3, r3, r2
    3292:	08db      	lsrs	r3, r3, #3
    3294:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
    3298:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    329c:	d001      	beq.n	32a2 <sm_align_pool+0x36>
    329e:	1ad2      	subs	r2, r2, r3
    32a0:	6042      	str	r2, [r0, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    32a2:	2af0      	cmp	r2, #240	; 0xf0
    32a4:	d8f0      	bhi.n	3288 <sm_align_pool+0x1c>
		errno = ENOSPC;
    32a6:	f002 fa21 	bl	56ec <__errno>
    32aa:	221c      	movs	r2, #28
    32ac:	4603      	mov	r3, r0
    32ae:	2000      	movs	r0, #0
    32b0:	601a      	str	r2, [r3, #0]
}
    32b2:	bd08      	pop	{r3, pc}
    32b4:	aaaaaaab 	.word	0xaaaaaaab

000032b8 <sm_set_pool>:
{
    32b8:	b570      	push	{r4, r5, r6, lr}
	if (!spool) {
    32ba:	4604      	mov	r4, r0
    32bc:	b338      	cbz	r0, 330e <sm_set_pool+0x56>
	if (!new_pool || !new_pool_size) {
    32be:	b119      	cbz	r1, 32c8 <sm_set_pool+0x10>
    32c0:	fab2 f682 	clz	r6, r2
    32c4:	0976      	lsrs	r6, r6, #5
    32c6:	b9a2      	cbnz	r2, 32f2 <sm_set_pool+0x3a>
	if (!spool->pool || !spool->pool_size) return 0;
    32c8:	6820      	ldr	r0, [r4, #0]
    32ca:	b300      	cbz	r0, 330e <sm_set_pool+0x56>
    32cc:	6862      	ldr	r2, [r4, #4]
    32ce:	b1f2      	cbz	r2, 330e <sm_set_pool+0x56>
	if (spool->pool_size % HEADER_SZ) return 0;
    32d0:	4b18      	ldr	r3, [pc, #96]	; (3334 <sm_set_pool+0x7c>)
    32d2:	4919      	ldr	r1, [pc, #100]	; (3338 <sm_set_pool+0x80>)
    32d4:	fb02 f303 	mul.w	r3, r2, r3
    32d8:	ebb1 0fb3 	cmp.w	r1, r3, ror #2
    32dc:	d317      	bcc.n	330e <sm_set_pool+0x56>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    32de:	68a3      	ldr	r3, [r4, #8]
    32e0:	b9e3      	cbnz	r3, 331c <sm_set_pool+0x64>
			memset(spool, 0, sizeof(struct smalloc_pool));
    32e2:	2200      	movs	r2, #0
			return 1;
    32e4:	2301      	movs	r3, #1
			memset(spool, 0, sizeof(struct smalloc_pool));
    32e6:	6022      	str	r2, [r4, #0]
    32e8:	6062      	str	r2, [r4, #4]
    32ea:	60a2      	str	r2, [r4, #8]
    32ec:	60e2      	str	r2, [r4, #12]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    32ee:	4618      	mov	r0, r3
    32f0:	bd70      	pop	{r4, r5, r6, pc}
	spool->pool = new_pool;
    32f2:	461d      	mov	r5, r3
	spool->oomfn = oom_handler;
    32f4:	9b04      	ldr	r3, [sp, #16]
	spool->pool_size = new_pool_size;
    32f6:	e9c0 1200 	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
    32fa:	60c3      	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    32fc:	f7ff ffb6 	bl	326c <sm_align_pool>
    3300:	4603      	mov	r3, r0
    3302:	2800      	cmp	r0, #0
    3304:	d0f3      	beq.n	32ee <sm_set_pool+0x36>
	if (do_zero) {
    3306:	b96d      	cbnz	r5, 3324 <sm_set_pool+0x6c>
	return 1;
    3308:	2301      	movs	r3, #1
}
    330a:	4618      	mov	r0, r3
    330c:	bd70      	pop	{r4, r5, r6, pc}
		errno = EINVAL;
    330e:	f002 f9ed 	bl	56ec <__errno>
    3312:	2216      	movs	r2, #22
		return 0;
    3314:	2300      	movs	r3, #0
		errno = EINVAL;
    3316:	6002      	str	r2, [r0, #0]
}
    3318:	4618      	mov	r0, r3
    331a:	bd70      	pop	{r4, r5, r6, pc}
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    331c:	2100      	movs	r1, #0
    331e:	f002 f8af 	bl	5480 <memset>
    3322:	e7de      	b.n	32e2 <sm_set_pool+0x2a>
		memset(spool->pool, 0, spool->pool_size);
    3324:	6862      	ldr	r2, [r4, #4]
    3326:	4631      	mov	r1, r6
    3328:	6820      	ldr	r0, [r4, #0]
		spool->do_zero = do_zero;
    332a:	60a5      	str	r5, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    332c:	f002 f8a8 	bl	5480 <memset>
	return 1;
    3330:	2301      	movs	r3, #1
    3332:	e7dc      	b.n	32ee <sm_set_pool+0x36>
    3334:	aaaaaaab 	.word	0xaaaaaaab
    3338:	15555555 	.word	0x15555555

0000333c <__aeabi_uldivmod>:
    333c:	b953      	cbnz	r3, 3354 <__aeabi_uldivmod+0x18>
    333e:	b94a      	cbnz	r2, 3354 <__aeabi_uldivmod+0x18>
    3340:	2900      	cmp	r1, #0
    3342:	bf08      	it	eq
    3344:	2800      	cmpeq	r0, #0
    3346:	bf1c      	itt	ne
    3348:	f04f 31ff 	movne.w	r1, #4294967295
    334c:	f04f 30ff 	movne.w	r0, #4294967295
    3350:	f000 b970 	b.w	3634 <__aeabi_idiv0>
    3354:	f1ad 0c08 	sub.w	ip, sp, #8
    3358:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    335c:	f000 f806 	bl	336c <__udivmoddi4>
    3360:	f8dd e004 	ldr.w	lr, [sp, #4]
    3364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    3368:	b004      	add	sp, #16
    336a:	4770      	bx	lr

0000336c <__udivmoddi4>:
    336c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3370:	9e08      	ldr	r6, [sp, #32]
    3372:	460d      	mov	r5, r1
    3374:	4604      	mov	r4, r0
    3376:	460f      	mov	r7, r1
    3378:	2b00      	cmp	r3, #0
    337a:	d14a      	bne.n	3412 <__udivmoddi4+0xa6>
    337c:	428a      	cmp	r2, r1
    337e:	4694      	mov	ip, r2
    3380:	d965      	bls.n	344e <__udivmoddi4+0xe2>
    3382:	fab2 f382 	clz	r3, r2
    3386:	b143      	cbz	r3, 339a <__udivmoddi4+0x2e>
    3388:	fa02 fc03 	lsl.w	ip, r2, r3
    338c:	f1c3 0220 	rsb	r2, r3, #32
    3390:	409f      	lsls	r7, r3
    3392:	fa20 f202 	lsr.w	r2, r0, r2
    3396:	4317      	orrs	r7, r2
    3398:	409c      	lsls	r4, r3
    339a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
    339e:	fa1f f58c 	uxth.w	r5, ip
    33a2:	fbb7 f1fe 	udiv	r1, r7, lr
    33a6:	0c22      	lsrs	r2, r4, #16
    33a8:	fb0e 7711 	mls	r7, lr, r1, r7
    33ac:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
    33b0:	fb01 f005 	mul.w	r0, r1, r5
    33b4:	4290      	cmp	r0, r2
    33b6:	d90a      	bls.n	33ce <__udivmoddi4+0x62>
    33b8:	eb1c 0202 	adds.w	r2, ip, r2
    33bc:	f101 37ff 	add.w	r7, r1, #4294967295
    33c0:	f080 811c 	bcs.w	35fc <__udivmoddi4+0x290>
    33c4:	4290      	cmp	r0, r2
    33c6:	f240 8119 	bls.w	35fc <__udivmoddi4+0x290>
    33ca:	3902      	subs	r1, #2
    33cc:	4462      	add	r2, ip
    33ce:	1a12      	subs	r2, r2, r0
    33d0:	b2a4      	uxth	r4, r4
    33d2:	fbb2 f0fe 	udiv	r0, r2, lr
    33d6:	fb0e 2210 	mls	r2, lr, r0, r2
    33da:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    33de:	fb00 f505 	mul.w	r5, r0, r5
    33e2:	42a5      	cmp	r5, r4
    33e4:	d90a      	bls.n	33fc <__udivmoddi4+0x90>
    33e6:	eb1c 0404 	adds.w	r4, ip, r4
    33ea:	f100 32ff 	add.w	r2, r0, #4294967295
    33ee:	f080 8107 	bcs.w	3600 <__udivmoddi4+0x294>
    33f2:	42a5      	cmp	r5, r4
    33f4:	f240 8104 	bls.w	3600 <__udivmoddi4+0x294>
    33f8:	4464      	add	r4, ip
    33fa:	3802      	subs	r0, #2
    33fc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
    3400:	1b64      	subs	r4, r4, r5
    3402:	2100      	movs	r1, #0
    3404:	b11e      	cbz	r6, 340e <__udivmoddi4+0xa2>
    3406:	40dc      	lsrs	r4, r3
    3408:	2300      	movs	r3, #0
    340a:	e9c6 4300 	strd	r4, r3, [r6]
    340e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3412:	428b      	cmp	r3, r1
    3414:	d908      	bls.n	3428 <__udivmoddi4+0xbc>
    3416:	2e00      	cmp	r6, #0
    3418:	f000 80ed 	beq.w	35f6 <__udivmoddi4+0x28a>
    341c:	2100      	movs	r1, #0
    341e:	e9c6 0500 	strd	r0, r5, [r6]
    3422:	4608      	mov	r0, r1
    3424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3428:	fab3 f183 	clz	r1, r3
    342c:	2900      	cmp	r1, #0
    342e:	d149      	bne.n	34c4 <__udivmoddi4+0x158>
    3430:	42ab      	cmp	r3, r5
    3432:	d302      	bcc.n	343a <__udivmoddi4+0xce>
    3434:	4282      	cmp	r2, r0
    3436:	f200 80f8 	bhi.w	362a <__udivmoddi4+0x2be>
    343a:	1a84      	subs	r4, r0, r2
    343c:	eb65 0203 	sbc.w	r2, r5, r3
    3440:	2001      	movs	r0, #1
    3442:	4617      	mov	r7, r2
    3444:	2e00      	cmp	r6, #0
    3446:	d0e2      	beq.n	340e <__udivmoddi4+0xa2>
    3448:	e9c6 4700 	strd	r4, r7, [r6]
    344c:	e7df      	b.n	340e <__udivmoddi4+0xa2>
    344e:	b902      	cbnz	r2, 3452 <__udivmoddi4+0xe6>
    3450:	deff      	udf	#255	; 0xff
    3452:	fab2 f382 	clz	r3, r2
    3456:	2b00      	cmp	r3, #0
    3458:	f040 8090 	bne.w	357c <__udivmoddi4+0x210>
    345c:	1a8a      	subs	r2, r1, r2
    345e:	ea4f 471c 	mov.w	r7, ip, lsr #16
    3462:	fa1f fe8c 	uxth.w	lr, ip
    3466:	2101      	movs	r1, #1
    3468:	fbb2 f5f7 	udiv	r5, r2, r7
    346c:	fb07 2015 	mls	r0, r7, r5, r2
    3470:	0c22      	lsrs	r2, r4, #16
    3472:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    3476:	fb0e f005 	mul.w	r0, lr, r5
    347a:	4290      	cmp	r0, r2
    347c:	d908      	bls.n	3490 <__udivmoddi4+0x124>
    347e:	eb1c 0202 	adds.w	r2, ip, r2
    3482:	f105 38ff 	add.w	r8, r5, #4294967295
    3486:	d202      	bcs.n	348e <__udivmoddi4+0x122>
    3488:	4290      	cmp	r0, r2
    348a:	f200 80cb 	bhi.w	3624 <__udivmoddi4+0x2b8>
    348e:	4645      	mov	r5, r8
    3490:	1a12      	subs	r2, r2, r0
    3492:	b2a4      	uxth	r4, r4
    3494:	fbb2 f0f7 	udiv	r0, r2, r7
    3498:	fb07 2210 	mls	r2, r7, r0, r2
    349c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    34a0:	fb0e fe00 	mul.w	lr, lr, r0
    34a4:	45a6      	cmp	lr, r4
    34a6:	d908      	bls.n	34ba <__udivmoddi4+0x14e>
    34a8:	eb1c 0404 	adds.w	r4, ip, r4
    34ac:	f100 32ff 	add.w	r2, r0, #4294967295
    34b0:	d202      	bcs.n	34b8 <__udivmoddi4+0x14c>
    34b2:	45a6      	cmp	lr, r4
    34b4:	f200 80bb 	bhi.w	362e <__udivmoddi4+0x2c2>
    34b8:	4610      	mov	r0, r2
    34ba:	eba4 040e 	sub.w	r4, r4, lr
    34be:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
    34c2:	e79f      	b.n	3404 <__udivmoddi4+0x98>
    34c4:	f1c1 0720 	rsb	r7, r1, #32
    34c8:	408b      	lsls	r3, r1
    34ca:	fa22 fc07 	lsr.w	ip, r2, r7
    34ce:	ea4c 0c03 	orr.w	ip, ip, r3
    34d2:	fa05 f401 	lsl.w	r4, r5, r1
    34d6:	fa20 f307 	lsr.w	r3, r0, r7
    34da:	40fd      	lsrs	r5, r7
    34dc:	ea4f 491c 	mov.w	r9, ip, lsr #16
    34e0:	4323      	orrs	r3, r4
    34e2:	fbb5 f8f9 	udiv	r8, r5, r9
    34e6:	fa1f fe8c 	uxth.w	lr, ip
    34ea:	fb09 5518 	mls	r5, r9, r8, r5
    34ee:	0c1c      	lsrs	r4, r3, #16
    34f0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    34f4:	fb08 f50e 	mul.w	r5, r8, lr
    34f8:	42a5      	cmp	r5, r4
    34fa:	fa02 f201 	lsl.w	r2, r2, r1
    34fe:	fa00 f001 	lsl.w	r0, r0, r1
    3502:	d90b      	bls.n	351c <__udivmoddi4+0x1b0>
    3504:	eb1c 0404 	adds.w	r4, ip, r4
    3508:	f108 3aff 	add.w	sl, r8, #4294967295
    350c:	f080 8088 	bcs.w	3620 <__udivmoddi4+0x2b4>
    3510:	42a5      	cmp	r5, r4
    3512:	f240 8085 	bls.w	3620 <__udivmoddi4+0x2b4>
    3516:	f1a8 0802 	sub.w	r8, r8, #2
    351a:	4464      	add	r4, ip
    351c:	1b64      	subs	r4, r4, r5
    351e:	b29d      	uxth	r5, r3
    3520:	fbb4 f3f9 	udiv	r3, r4, r9
    3524:	fb09 4413 	mls	r4, r9, r3, r4
    3528:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
    352c:	fb03 fe0e 	mul.w	lr, r3, lr
    3530:	45a6      	cmp	lr, r4
    3532:	d908      	bls.n	3546 <__udivmoddi4+0x1da>
    3534:	eb1c 0404 	adds.w	r4, ip, r4
    3538:	f103 35ff 	add.w	r5, r3, #4294967295
    353c:	d26c      	bcs.n	3618 <__udivmoddi4+0x2ac>
    353e:	45a6      	cmp	lr, r4
    3540:	d96a      	bls.n	3618 <__udivmoddi4+0x2ac>
    3542:	3b02      	subs	r3, #2
    3544:	4464      	add	r4, ip
    3546:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    354a:	fba3 9502 	umull	r9, r5, r3, r2
    354e:	eba4 040e 	sub.w	r4, r4, lr
    3552:	42ac      	cmp	r4, r5
    3554:	46c8      	mov	r8, r9
    3556:	46ae      	mov	lr, r5
    3558:	d356      	bcc.n	3608 <__udivmoddi4+0x29c>
    355a:	d053      	beq.n	3604 <__udivmoddi4+0x298>
    355c:	b156      	cbz	r6, 3574 <__udivmoddi4+0x208>
    355e:	ebb0 0208 	subs.w	r2, r0, r8
    3562:	eb64 040e 	sbc.w	r4, r4, lr
    3566:	fa04 f707 	lsl.w	r7, r4, r7
    356a:	40ca      	lsrs	r2, r1
    356c:	40cc      	lsrs	r4, r1
    356e:	4317      	orrs	r7, r2
    3570:	e9c6 7400 	strd	r7, r4, [r6]
    3574:	4618      	mov	r0, r3
    3576:	2100      	movs	r1, #0
    3578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    357c:	f1c3 0120 	rsb	r1, r3, #32
    3580:	fa02 fc03 	lsl.w	ip, r2, r3
    3584:	fa20 f201 	lsr.w	r2, r0, r1
    3588:	fa25 f101 	lsr.w	r1, r5, r1
    358c:	409d      	lsls	r5, r3
    358e:	432a      	orrs	r2, r5
    3590:	ea4f 471c 	mov.w	r7, ip, lsr #16
    3594:	fa1f fe8c 	uxth.w	lr, ip
    3598:	fbb1 f0f7 	udiv	r0, r1, r7
    359c:	fb07 1510 	mls	r5, r7, r0, r1
    35a0:	0c11      	lsrs	r1, r2, #16
    35a2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
    35a6:	fb00 f50e 	mul.w	r5, r0, lr
    35aa:	428d      	cmp	r5, r1
    35ac:	fa04 f403 	lsl.w	r4, r4, r3
    35b0:	d908      	bls.n	35c4 <__udivmoddi4+0x258>
    35b2:	eb1c 0101 	adds.w	r1, ip, r1
    35b6:	f100 38ff 	add.w	r8, r0, #4294967295
    35ba:	d22f      	bcs.n	361c <__udivmoddi4+0x2b0>
    35bc:	428d      	cmp	r5, r1
    35be:	d92d      	bls.n	361c <__udivmoddi4+0x2b0>
    35c0:	3802      	subs	r0, #2
    35c2:	4461      	add	r1, ip
    35c4:	1b49      	subs	r1, r1, r5
    35c6:	b292      	uxth	r2, r2
    35c8:	fbb1 f5f7 	udiv	r5, r1, r7
    35cc:	fb07 1115 	mls	r1, r7, r5, r1
    35d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    35d4:	fb05 f10e 	mul.w	r1, r5, lr
    35d8:	4291      	cmp	r1, r2
    35da:	d908      	bls.n	35ee <__udivmoddi4+0x282>
    35dc:	eb1c 0202 	adds.w	r2, ip, r2
    35e0:	f105 38ff 	add.w	r8, r5, #4294967295
    35e4:	d216      	bcs.n	3614 <__udivmoddi4+0x2a8>
    35e6:	4291      	cmp	r1, r2
    35e8:	d914      	bls.n	3614 <__udivmoddi4+0x2a8>
    35ea:	3d02      	subs	r5, #2
    35ec:	4462      	add	r2, ip
    35ee:	1a52      	subs	r2, r2, r1
    35f0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
    35f4:	e738      	b.n	3468 <__udivmoddi4+0xfc>
    35f6:	4631      	mov	r1, r6
    35f8:	4630      	mov	r0, r6
    35fa:	e708      	b.n	340e <__udivmoddi4+0xa2>
    35fc:	4639      	mov	r1, r7
    35fe:	e6e6      	b.n	33ce <__udivmoddi4+0x62>
    3600:	4610      	mov	r0, r2
    3602:	e6fb      	b.n	33fc <__udivmoddi4+0x90>
    3604:	4548      	cmp	r0, r9
    3606:	d2a9      	bcs.n	355c <__udivmoddi4+0x1f0>
    3608:	ebb9 0802 	subs.w	r8, r9, r2
    360c:	eb65 0e0c 	sbc.w	lr, r5, ip
    3610:	3b01      	subs	r3, #1
    3612:	e7a3      	b.n	355c <__udivmoddi4+0x1f0>
    3614:	4645      	mov	r5, r8
    3616:	e7ea      	b.n	35ee <__udivmoddi4+0x282>
    3618:	462b      	mov	r3, r5
    361a:	e794      	b.n	3546 <__udivmoddi4+0x1da>
    361c:	4640      	mov	r0, r8
    361e:	e7d1      	b.n	35c4 <__udivmoddi4+0x258>
    3620:	46d0      	mov	r8, sl
    3622:	e77b      	b.n	351c <__udivmoddi4+0x1b0>
    3624:	3d02      	subs	r5, #2
    3626:	4462      	add	r2, ip
    3628:	e732      	b.n	3490 <__udivmoddi4+0x124>
    362a:	4608      	mov	r0, r1
    362c:	e70a      	b.n	3444 <__udivmoddi4+0xd8>
    362e:	4464      	add	r4, ip
    3630:	3802      	subs	r0, #2
    3632:	e742      	b.n	34ba <__udivmoddi4+0x14e>

00003634 <__aeabi_idiv0>:
    3634:	4770      	bx	lr
    3636:	bf00      	nop

00003638 <malloc>:
    3638:	4b02      	ldr	r3, [pc, #8]	; (3644 <malloc+0xc>)
    363a:	4601      	mov	r1, r0
    363c:	6818      	ldr	r0, [r3, #0]
    363e:	f000 b80b 	b.w	3658 <_malloc_r>
    3642:	bf00      	nop
    3644:	200081e4 	.word	0x200081e4

00003648 <free>:
    3648:	4b02      	ldr	r3, [pc, #8]	; (3654 <free+0xc>)
    364a:	4601      	mov	r1, r0
    364c:	6818      	ldr	r0, [r3, #0]
    364e:	f002 bac5 	b.w	5bdc <_free_r>
    3652:	bf00      	nop
    3654:	200081e4 	.word	0x200081e4

00003658 <_malloc_r>:
    3658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    365c:	f101 060b 	add.w	r6, r1, #11
    3660:	2e16      	cmp	r6, #22
    3662:	b083      	sub	sp, #12
    3664:	4604      	mov	r4, r0
    3666:	d824      	bhi.n	36b2 <_malloc_r+0x5a>
    3668:	2910      	cmp	r1, #16
    366a:	f200 80ba 	bhi.w	37e2 <_malloc_r+0x18a>
    366e:	f000 faa3 	bl	3bb8 <__malloc_lock>
    3672:	2610      	movs	r6, #16
    3674:	2218      	movs	r2, #24
    3676:	2002      	movs	r0, #2
    3678:	4fb5      	ldr	r7, [pc, #724]	; (3950 <_malloc_r+0x2f8>)
    367a:	443a      	add	r2, r7
    367c:	f1a2 0108 	sub.w	r1, r2, #8
    3680:	6853      	ldr	r3, [r2, #4]
    3682:	428b      	cmp	r3, r1
    3684:	f000 80ba 	beq.w	37fc <_malloc_r+0x1a4>
    3688:	685a      	ldr	r2, [r3, #4]
    368a:	68d9      	ldr	r1, [r3, #12]
    368c:	f022 0203 	bic.w	r2, r2, #3
    3690:	441a      	add	r2, r3
    3692:	689d      	ldr	r5, [r3, #8]
    3694:	60e9      	str	r1, [r5, #12]
    3696:	608d      	str	r5, [r1, #8]
    3698:	6851      	ldr	r1, [r2, #4]
    369a:	f041 0101 	orr.w	r1, r1, #1
    369e:	4620      	mov	r0, r4
    36a0:	6051      	str	r1, [r2, #4]
    36a2:	f103 0508 	add.w	r5, r3, #8
    36a6:	f000 fa8d 	bl	3bc4 <__malloc_unlock>
    36aa:	4628      	mov	r0, r5
    36ac:	b003      	add	sp, #12
    36ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    36b2:	f036 0607 	bics.w	r6, r6, #7
    36b6:	f100 8094 	bmi.w	37e2 <_malloc_r+0x18a>
    36ba:	42b1      	cmp	r1, r6
    36bc:	f200 8091 	bhi.w	37e2 <_malloc_r+0x18a>
    36c0:	f000 fa7a 	bl	3bb8 <__malloc_lock>
    36c4:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
    36c8:	f0c0 819a 	bcc.w	3a00 <_malloc_r+0x3a8>
    36cc:	0a73      	lsrs	r3, r6, #9
    36ce:	f000 808f 	beq.w	37f0 <_malloc_r+0x198>
    36d2:	2b04      	cmp	r3, #4
    36d4:	f200 816f 	bhi.w	39b6 <_malloc_r+0x35e>
    36d8:	09b3      	lsrs	r3, r6, #6
    36da:	f103 0039 	add.w	r0, r3, #57	; 0x39
    36de:	f103 0c38 	add.w	ip, r3, #56	; 0x38
    36e2:	00c3      	lsls	r3, r0, #3
    36e4:	4f9a      	ldr	r7, [pc, #616]	; (3950 <_malloc_r+0x2f8>)
    36e6:	443b      	add	r3, r7
    36e8:	f1a3 0508 	sub.w	r5, r3, #8
    36ec:	685b      	ldr	r3, [r3, #4]
    36ee:	429d      	cmp	r5, r3
    36f0:	d106      	bne.n	3700 <_malloc_r+0xa8>
    36f2:	e00c      	b.n	370e <_malloc_r+0xb6>
    36f4:	2900      	cmp	r1, #0
    36f6:	f280 8127 	bge.w	3948 <_malloc_r+0x2f0>
    36fa:	68db      	ldr	r3, [r3, #12]
    36fc:	429d      	cmp	r5, r3
    36fe:	d006      	beq.n	370e <_malloc_r+0xb6>
    3700:	685a      	ldr	r2, [r3, #4]
    3702:	f022 0203 	bic.w	r2, r2, #3
    3706:	1b91      	subs	r1, r2, r6
    3708:	290f      	cmp	r1, #15
    370a:	ddf3      	ble.n	36f4 <_malloc_r+0x9c>
    370c:	4660      	mov	r0, ip
    370e:	693d      	ldr	r5, [r7, #16]
    3710:	f8df c250 	ldr.w	ip, [pc, #592]	; 3964 <_malloc_r+0x30c>
    3714:	4565      	cmp	r5, ip
    3716:	d07c      	beq.n	3812 <_malloc_r+0x1ba>
    3718:	686a      	ldr	r2, [r5, #4]
    371a:	f022 0203 	bic.w	r2, r2, #3
    371e:	1b93      	subs	r3, r2, r6
    3720:	2b0f      	cmp	r3, #15
    3722:	f300 817b 	bgt.w	3a1c <_malloc_r+0x3c4>
    3726:	2b00      	cmp	r3, #0
    3728:	e9c7 cc04 	strd	ip, ip, [r7, #16]
    372c:	f280 816c 	bge.w	3a08 <_malloc_r+0x3b0>
    3730:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    3734:	f080 811a 	bcs.w	396c <_malloc_r+0x314>
    3738:	08d3      	lsrs	r3, r2, #3
    373a:	6879      	ldr	r1, [r7, #4]
    373c:	3301      	adds	r3, #1
    373e:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    3742:	2201      	movs	r2, #1
    3744:	fa02 f20e 	lsl.w	r2, r2, lr
    3748:	430a      	orrs	r2, r1
    374a:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
    374e:	f8c5 e008 	str.w	lr, [r5, #8]
    3752:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    3756:	3908      	subs	r1, #8
    3758:	60e9      	str	r1, [r5, #12]
    375a:	607a      	str	r2, [r7, #4]
    375c:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    3760:	f8ce 500c 	str.w	r5, [lr, #12]
    3764:	1083      	asrs	r3, r0, #2
    3766:	2101      	movs	r1, #1
    3768:	4099      	lsls	r1, r3
    376a:	4291      	cmp	r1, r2
    376c:	d857      	bhi.n	381e <_malloc_r+0x1c6>
    376e:	4211      	tst	r1, r2
    3770:	d106      	bne.n	3780 <_malloc_r+0x128>
    3772:	f020 0003 	bic.w	r0, r0, #3
    3776:	0049      	lsls	r1, r1, #1
    3778:	4211      	tst	r1, r2
    377a:	f100 0004 	add.w	r0, r0, #4
    377e:	d0fa      	beq.n	3776 <_malloc_r+0x11e>
    3780:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    3784:	464d      	mov	r5, r9
    3786:	4686      	mov	lr, r0
    3788:	f8d5 800c 	ldr.w	r8, [r5, #12]
    378c:	4545      	cmp	r5, r8
    378e:	d108      	bne.n	37a2 <_malloc_r+0x14a>
    3790:	e11d      	b.n	39ce <_malloc_r+0x376>
    3792:	2b00      	cmp	r3, #0
    3794:	f280 8124 	bge.w	39e0 <_malloc_r+0x388>
    3798:	f8d8 800c 	ldr.w	r8, [r8, #12]
    379c:	4545      	cmp	r5, r8
    379e:	f000 8116 	beq.w	39ce <_malloc_r+0x376>
    37a2:	f8d8 2004 	ldr.w	r2, [r8, #4]
    37a6:	f022 0203 	bic.w	r2, r2, #3
    37aa:	1b93      	subs	r3, r2, r6
    37ac:	2b0f      	cmp	r3, #15
    37ae:	ddf0      	ble.n	3792 <_malloc_r+0x13a>
    37b0:	4620      	mov	r0, r4
    37b2:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
    37b6:	eb08 0106 	add.w	r1, r8, r6
    37ba:	f046 0601 	orr.w	r6, r6, #1
    37be:	f8c8 6004 	str.w	r6, [r8, #4]
    37c2:	60ec      	str	r4, [r5, #12]
    37c4:	60a5      	str	r5, [r4, #8]
    37c6:	f043 0401 	orr.w	r4, r3, #1
    37ca:	e9c7 1104 	strd	r1, r1, [r7, #16]
    37ce:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    37d2:	604c      	str	r4, [r1, #4]
    37d4:	f848 3002 	str.w	r3, [r8, r2]
    37d8:	f000 f9f4 	bl	3bc4 <__malloc_unlock>
    37dc:	f108 0508 	add.w	r5, r8, #8
    37e0:	e002      	b.n	37e8 <_malloc_r+0x190>
    37e2:	230c      	movs	r3, #12
    37e4:	6023      	str	r3, [r4, #0]
    37e6:	2500      	movs	r5, #0
    37e8:	4628      	mov	r0, r5
    37ea:	b003      	add	sp, #12
    37ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    37f0:	f44f 7300 	mov.w	r3, #512	; 0x200
    37f4:	2040      	movs	r0, #64	; 0x40
    37f6:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    37fa:	e773      	b.n	36e4 <_malloc_r+0x8c>
    37fc:	68d3      	ldr	r3, [r2, #12]
    37fe:	429a      	cmp	r2, r3
    3800:	bf08      	it	eq
    3802:	3002      	addeq	r0, #2
    3804:	f47f af40 	bne.w	3688 <_malloc_r+0x30>
    3808:	693d      	ldr	r5, [r7, #16]
    380a:	f8df c158 	ldr.w	ip, [pc, #344]	; 3964 <_malloc_r+0x30c>
    380e:	4565      	cmp	r5, ip
    3810:	d182      	bne.n	3718 <_malloc_r+0xc0>
    3812:	687a      	ldr	r2, [r7, #4]
    3814:	1083      	asrs	r3, r0, #2
    3816:	2101      	movs	r1, #1
    3818:	4099      	lsls	r1, r3
    381a:	4291      	cmp	r1, r2
    381c:	d9a7      	bls.n	376e <_malloc_r+0x116>
    381e:	68bd      	ldr	r5, [r7, #8]
    3820:	686b      	ldr	r3, [r5, #4]
    3822:	f023 0903 	bic.w	r9, r3, #3
    3826:	454e      	cmp	r6, r9
    3828:	d803      	bhi.n	3832 <_malloc_r+0x1da>
    382a:	eba9 0306 	sub.w	r3, r9, r6
    382e:	2b0f      	cmp	r3, #15
    3830:	dc7a      	bgt.n	3928 <_malloc_r+0x2d0>
    3832:	f8df b134 	ldr.w	fp, [pc, #308]	; 3968 <_malloc_r+0x310>
    3836:	4b47      	ldr	r3, [pc, #284]	; (3954 <_malloc_r+0x2fc>)
    3838:	f8db 2000 	ldr.w	r2, [fp]
    383c:	681b      	ldr	r3, [r3, #0]
    383e:	3201      	adds	r2, #1
    3840:	4433      	add	r3, r6
    3842:	eb05 0a09 	add.w	sl, r5, r9
    3846:	f000 8133 	beq.w	3ab0 <_malloc_r+0x458>
    384a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    384e:	330f      	adds	r3, #15
    3850:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
    3854:	f028 080f 	bic.w	r8, r8, #15
    3858:	4641      	mov	r1, r8
    385a:	4620      	mov	r0, r4
    385c:	f001 ff1e 	bl	569c <_sbrk_r>
    3860:	1c41      	adds	r1, r0, #1
    3862:	4602      	mov	r2, r0
    3864:	f000 80f3 	beq.w	3a4e <_malloc_r+0x3f6>
    3868:	4582      	cmp	sl, r0
    386a:	f200 80ee 	bhi.w	3a4a <_malloc_r+0x3f2>
    386e:	4b3a      	ldr	r3, [pc, #232]	; (3958 <_malloc_r+0x300>)
    3870:	6819      	ldr	r1, [r3, #0]
    3872:	4441      	add	r1, r8
    3874:	6019      	str	r1, [r3, #0]
    3876:	4608      	mov	r0, r1
    3878:	f000 814e 	beq.w	3b18 <_malloc_r+0x4c0>
    387c:	f8db 1000 	ldr.w	r1, [fp]
    3880:	9301      	str	r3, [sp, #4]
    3882:	3101      	adds	r1, #1
    3884:	bf1b      	ittet	ne
    3886:	eba2 010a 	subne.w	r1, r2, sl
    388a:	1809      	addne	r1, r1, r0
    388c:	f8cb 2000 	streq.w	r2, [fp]
    3890:	6019      	strne	r1, [r3, #0]
    3892:	f012 0b07 	ands.w	fp, r2, #7
    3896:	f000 8117 	beq.w	3ac8 <_malloc_r+0x470>
    389a:	f1cb 0108 	rsb	r1, fp, #8
    389e:	440a      	add	r2, r1
    38a0:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
    38a4:	4490      	add	r8, r2
    38a6:	3108      	adds	r1, #8
    38a8:	eba1 0108 	sub.w	r1, r1, r8
    38ac:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    38b0:	4651      	mov	r1, sl
    38b2:	4620      	mov	r0, r4
    38b4:	9200      	str	r2, [sp, #0]
    38b6:	f001 fef1 	bl	569c <_sbrk_r>
    38ba:	1c42      	adds	r2, r0, #1
    38bc:	e9dd 2300 	ldrd	r2, r3, [sp]
    38c0:	f000 814f 	beq.w	3b62 <_malloc_r+0x50a>
    38c4:	1a80      	subs	r0, r0, r2
    38c6:	eb00 080a 	add.w	r8, r0, sl
    38ca:	6819      	ldr	r1, [r3, #0]
    38cc:	60ba      	str	r2, [r7, #8]
    38ce:	f048 0001 	orr.w	r0, r8, #1
    38d2:	4451      	add	r1, sl
    38d4:	42bd      	cmp	r5, r7
    38d6:	6050      	str	r0, [r2, #4]
    38d8:	6019      	str	r1, [r3, #0]
    38da:	f000 8129 	beq.w	3b30 <_malloc_r+0x4d8>
    38de:	f1b9 0f0f 	cmp.w	r9, #15
    38e2:	f240 8127 	bls.w	3b34 <_malloc_r+0x4dc>
    38e6:	6868      	ldr	r0, [r5, #4]
    38e8:	f1a9 0c0c 	sub.w	ip, r9, #12
    38ec:	f02c 0c07 	bic.w	ip, ip, #7
    38f0:	f000 0001 	and.w	r0, r0, #1
    38f4:	ea40 000c 	orr.w	r0, r0, ip
    38f8:	6068      	str	r0, [r5, #4]
    38fa:	f04f 0e05 	mov.w	lr, #5
    38fe:	eb05 000c 	add.w	r0, r5, ip
    3902:	f1bc 0f0f 	cmp.w	ip, #15
    3906:	e9c0 ee01 	strd	lr, lr, [r0, #4]
    390a:	f200 8132 	bhi.w	3b72 <_malloc_r+0x51a>
    390e:	6850      	ldr	r0, [r2, #4]
    3910:	4615      	mov	r5, r2
    3912:	4b12      	ldr	r3, [pc, #72]	; (395c <_malloc_r+0x304>)
    3914:	681a      	ldr	r2, [r3, #0]
    3916:	428a      	cmp	r2, r1
    3918:	bf38      	it	cc
    391a:	6019      	strcc	r1, [r3, #0]
    391c:	4b10      	ldr	r3, [pc, #64]	; (3960 <_malloc_r+0x308>)
    391e:	681a      	ldr	r2, [r3, #0]
    3920:	428a      	cmp	r2, r1
    3922:	bf38      	it	cc
    3924:	6019      	strcc	r1, [r3, #0]
    3926:	e094      	b.n	3a52 <_malloc_r+0x3fa>
    3928:	19aa      	adds	r2, r5, r6
    392a:	f043 0301 	orr.w	r3, r3, #1
    392e:	f046 0601 	orr.w	r6, r6, #1
    3932:	606e      	str	r6, [r5, #4]
    3934:	4620      	mov	r0, r4
    3936:	60ba      	str	r2, [r7, #8]
    3938:	6053      	str	r3, [r2, #4]
    393a:	f000 f943 	bl	3bc4 <__malloc_unlock>
    393e:	3508      	adds	r5, #8
    3940:	4628      	mov	r0, r5
    3942:	b003      	add	sp, #12
    3944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3948:	68d9      	ldr	r1, [r3, #12]
    394a:	441a      	add	r2, r3
    394c:	e6a1      	b.n	3692 <_malloc_r+0x3a>
    394e:	bf00      	nop
    3950:	20007dc8 	.word	0x20007dc8
    3954:	20008adc 	.word	0x20008adc
    3958:	20008aac 	.word	0x20008aac
    395c:	20008ad4 	.word	0x20008ad4
    3960:	20008ad8 	.word	0x20008ad8
    3964:	20007dd0 	.word	0x20007dd0
    3968:	200081d0 	.word	0x200081d0
    396c:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
    3970:	ea4f 2352 	mov.w	r3, r2, lsr #9
    3974:	d363      	bcc.n	3a3e <_malloc_r+0x3e6>
    3976:	2b14      	cmp	r3, #20
    3978:	f200 80b7 	bhi.w	3aea <_malloc_r+0x492>
    397c:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    3980:	00c9      	lsls	r1, r1, #3
    3982:	335b      	adds	r3, #91	; 0x5b
    3984:	eb07 0e01 	add.w	lr, r7, r1
    3988:	5879      	ldr	r1, [r7, r1]
    398a:	f1ae 0e08 	sub.w	lr, lr, #8
    398e:	458e      	cmp	lr, r1
    3990:	f000 8091 	beq.w	3ab6 <_malloc_r+0x45e>
    3994:	684b      	ldr	r3, [r1, #4]
    3996:	f023 0303 	bic.w	r3, r3, #3
    399a:	4293      	cmp	r3, r2
    399c:	d902      	bls.n	39a4 <_malloc_r+0x34c>
    399e:	6889      	ldr	r1, [r1, #8]
    39a0:	458e      	cmp	lr, r1
    39a2:	d1f7      	bne.n	3994 <_malloc_r+0x33c>
    39a4:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    39a8:	687a      	ldr	r2, [r7, #4]
    39aa:	e9c5 1e02 	strd	r1, lr, [r5, #8]
    39ae:	f8ce 5008 	str.w	r5, [lr, #8]
    39b2:	60cd      	str	r5, [r1, #12]
    39b4:	e6d6      	b.n	3764 <_malloc_r+0x10c>
    39b6:	2b14      	cmp	r3, #20
    39b8:	d959      	bls.n	3a6e <_malloc_r+0x416>
    39ba:	2b54      	cmp	r3, #84	; 0x54
    39bc:	f200 809d 	bhi.w	3afa <_malloc_r+0x4a2>
    39c0:	0b33      	lsrs	r3, r6, #12
    39c2:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    39c6:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
    39ca:	00c3      	lsls	r3, r0, #3
    39cc:	e68a      	b.n	36e4 <_malloc_r+0x8c>
    39ce:	f10e 0e01 	add.w	lr, lr, #1
    39d2:	f01e 0f03 	tst.w	lr, #3
    39d6:	f105 0508 	add.w	r5, r5, #8
    39da:	f47f aed5 	bne.w	3788 <_malloc_r+0x130>
    39de:	e051      	b.n	3a84 <_malloc_r+0x42c>
    39e0:	4442      	add	r2, r8
    39e2:	4645      	mov	r5, r8
    39e4:	6853      	ldr	r3, [r2, #4]
    39e6:	f8d8 100c 	ldr.w	r1, [r8, #12]
    39ea:	f043 0301 	orr.w	r3, r3, #1
    39ee:	6053      	str	r3, [r2, #4]
    39f0:	f855 3f08 	ldr.w	r3, [r5, #8]!
    39f4:	4620      	mov	r0, r4
    39f6:	60d9      	str	r1, [r3, #12]
    39f8:	608b      	str	r3, [r1, #8]
    39fa:	f000 f8e3 	bl	3bc4 <__malloc_unlock>
    39fe:	e6f3      	b.n	37e8 <_malloc_r+0x190>
    3a00:	08f0      	lsrs	r0, r6, #3
    3a02:	f106 0208 	add.w	r2, r6, #8
    3a06:	e637      	b.n	3678 <_malloc_r+0x20>
    3a08:	442a      	add	r2, r5
    3a0a:	4620      	mov	r0, r4
    3a0c:	6853      	ldr	r3, [r2, #4]
    3a0e:	f043 0301 	orr.w	r3, r3, #1
    3a12:	6053      	str	r3, [r2, #4]
    3a14:	3508      	adds	r5, #8
    3a16:	f000 f8d5 	bl	3bc4 <__malloc_unlock>
    3a1a:	e6e5      	b.n	37e8 <_malloc_r+0x190>
    3a1c:	19a9      	adds	r1, r5, r6
    3a1e:	4620      	mov	r0, r4
    3a20:	f046 0601 	orr.w	r6, r6, #1
    3a24:	f043 0401 	orr.w	r4, r3, #1
    3a28:	606e      	str	r6, [r5, #4]
    3a2a:	e9c7 1104 	strd	r1, r1, [r7, #16]
    3a2e:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    3a32:	604c      	str	r4, [r1, #4]
    3a34:	50ab      	str	r3, [r5, r2]
    3a36:	f000 f8c5 	bl	3bc4 <__malloc_unlock>
    3a3a:	3508      	adds	r5, #8
    3a3c:	e6d4      	b.n	37e8 <_malloc_r+0x190>
    3a3e:	0993      	lsrs	r3, r2, #6
    3a40:	f103 0139 	add.w	r1, r3, #57	; 0x39
    3a44:	00c9      	lsls	r1, r1, #3
    3a46:	3338      	adds	r3, #56	; 0x38
    3a48:	e79c      	b.n	3984 <_malloc_r+0x32c>
    3a4a:	42bd      	cmp	r5, r7
    3a4c:	d05f      	beq.n	3b0e <_malloc_r+0x4b6>
    3a4e:	68bd      	ldr	r5, [r7, #8]
    3a50:	6868      	ldr	r0, [r5, #4]
    3a52:	f020 0803 	bic.w	r8, r0, #3
    3a56:	4546      	cmp	r6, r8
    3a58:	eba8 0306 	sub.w	r3, r8, r6
    3a5c:	d802      	bhi.n	3a64 <_malloc_r+0x40c>
    3a5e:	2b0f      	cmp	r3, #15
    3a60:	f73f af62 	bgt.w	3928 <_malloc_r+0x2d0>
    3a64:	4620      	mov	r0, r4
    3a66:	f000 f8ad 	bl	3bc4 <__malloc_unlock>
    3a6a:	2500      	movs	r5, #0
    3a6c:	e6bc      	b.n	37e8 <_malloc_r+0x190>
    3a6e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    3a72:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
    3a76:	00c3      	lsls	r3, r0, #3
    3a78:	e634      	b.n	36e4 <_malloc_r+0x8c>
    3a7a:	f859 3908 	ldr.w	r3, [r9], #-8
    3a7e:	454b      	cmp	r3, r9
    3a80:	f040 8096 	bne.w	3bb0 <_malloc_r+0x558>
    3a84:	f010 0f03 	tst.w	r0, #3
    3a88:	f100 30ff 	add.w	r0, r0, #4294967295
    3a8c:	d1f5      	bne.n	3a7a <_malloc_r+0x422>
    3a8e:	687b      	ldr	r3, [r7, #4]
    3a90:	ea23 0301 	bic.w	r3, r3, r1
    3a94:	607b      	str	r3, [r7, #4]
    3a96:	0049      	lsls	r1, r1, #1
    3a98:	4299      	cmp	r1, r3
    3a9a:	f63f aec0 	bhi.w	381e <_malloc_r+0x1c6>
    3a9e:	b919      	cbnz	r1, 3aa8 <_malloc_r+0x450>
    3aa0:	e6bd      	b.n	381e <_malloc_r+0x1c6>
    3aa2:	0049      	lsls	r1, r1, #1
    3aa4:	f10e 0e04 	add.w	lr, lr, #4
    3aa8:	4219      	tst	r1, r3
    3aaa:	d0fa      	beq.n	3aa2 <_malloc_r+0x44a>
    3aac:	4670      	mov	r0, lr
    3aae:	e667      	b.n	3780 <_malloc_r+0x128>
    3ab0:	f103 0810 	add.w	r8, r3, #16
    3ab4:	e6d0      	b.n	3858 <_malloc_r+0x200>
    3ab6:	109a      	asrs	r2, r3, #2
    3ab8:	f04f 0801 	mov.w	r8, #1
    3abc:	687b      	ldr	r3, [r7, #4]
    3abe:	fa08 f202 	lsl.w	r2, r8, r2
    3ac2:	431a      	orrs	r2, r3
    3ac4:	607a      	str	r2, [r7, #4]
    3ac6:	e770      	b.n	39aa <_malloc_r+0x352>
    3ac8:	eb02 0108 	add.w	r1, r2, r8
    3acc:	4249      	negs	r1, r1
    3ace:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    3ad2:	4651      	mov	r1, sl
    3ad4:	4620      	mov	r0, r4
    3ad6:	9200      	str	r2, [sp, #0]
    3ad8:	f001 fde0 	bl	569c <_sbrk_r>
    3adc:	1c43      	adds	r3, r0, #1
    3ade:	e9dd 2300 	ldrd	r2, r3, [sp]
    3ae2:	f47f aeef 	bne.w	38c4 <_malloc_r+0x26c>
    3ae6:	46da      	mov	sl, fp
    3ae8:	e6ef      	b.n	38ca <_malloc_r+0x272>
    3aea:	2b54      	cmp	r3, #84	; 0x54
    3aec:	d825      	bhi.n	3b3a <_malloc_r+0x4e2>
    3aee:	0b13      	lsrs	r3, r2, #12
    3af0:	f103 016f 	add.w	r1, r3, #111	; 0x6f
    3af4:	00c9      	lsls	r1, r1, #3
    3af6:	336e      	adds	r3, #110	; 0x6e
    3af8:	e744      	b.n	3984 <_malloc_r+0x32c>
    3afa:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    3afe:	d825      	bhi.n	3b4c <_malloc_r+0x4f4>
    3b00:	0bf3      	lsrs	r3, r6, #15
    3b02:	f103 0078 	add.w	r0, r3, #120	; 0x78
    3b06:	f103 0c77 	add.w	ip, r3, #119	; 0x77
    3b0a:	00c3      	lsls	r3, r0, #3
    3b0c:	e5ea      	b.n	36e4 <_malloc_r+0x8c>
    3b0e:	4b29      	ldr	r3, [pc, #164]	; (3bb4 <_malloc_r+0x55c>)
    3b10:	6818      	ldr	r0, [r3, #0]
    3b12:	4440      	add	r0, r8
    3b14:	6018      	str	r0, [r3, #0]
    3b16:	e6b1      	b.n	387c <_malloc_r+0x224>
    3b18:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
    3b1c:	f1bc 0f00 	cmp.w	ip, #0
    3b20:	f47f aeac 	bne.w	387c <_malloc_r+0x224>
    3b24:	68bd      	ldr	r5, [r7, #8]
    3b26:	44c8      	add	r8, r9
    3b28:	f048 0001 	orr.w	r0, r8, #1
    3b2c:	6068      	str	r0, [r5, #4]
    3b2e:	e6f0      	b.n	3912 <_malloc_r+0x2ba>
    3b30:	4615      	mov	r5, r2
    3b32:	e6ee      	b.n	3912 <_malloc_r+0x2ba>
    3b34:	2301      	movs	r3, #1
    3b36:	6053      	str	r3, [r2, #4]
    3b38:	e794      	b.n	3a64 <_malloc_r+0x40c>
    3b3a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    3b3e:	d823      	bhi.n	3b88 <_malloc_r+0x530>
    3b40:	0bd3      	lsrs	r3, r2, #15
    3b42:	f103 0178 	add.w	r1, r3, #120	; 0x78
    3b46:	00c9      	lsls	r1, r1, #3
    3b48:	3377      	adds	r3, #119	; 0x77
    3b4a:	e71b      	b.n	3984 <_malloc_r+0x32c>
    3b4c:	f240 5254 	movw	r2, #1364	; 0x554
    3b50:	4293      	cmp	r3, r2
    3b52:	d823      	bhi.n	3b9c <_malloc_r+0x544>
    3b54:	0cb3      	lsrs	r3, r6, #18
    3b56:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    3b5a:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
    3b5e:	00c3      	lsls	r3, r0, #3
    3b60:	e5c0      	b.n	36e4 <_malloc_r+0x8c>
    3b62:	f1ab 0b08 	sub.w	fp, fp, #8
    3b66:	44d8      	add	r8, fp
    3b68:	eba8 0802 	sub.w	r8, r8, r2
    3b6c:	f04f 0a00 	mov.w	sl, #0
    3b70:	e6ab      	b.n	38ca <_malloc_r+0x272>
    3b72:	f105 0108 	add.w	r1, r5, #8
    3b76:	4620      	mov	r0, r4
    3b78:	9300      	str	r3, [sp, #0]
    3b7a:	f002 f82f 	bl	5bdc <_free_r>
    3b7e:	68bd      	ldr	r5, [r7, #8]
    3b80:	9b00      	ldr	r3, [sp, #0]
    3b82:	6868      	ldr	r0, [r5, #4]
    3b84:	6819      	ldr	r1, [r3, #0]
    3b86:	e6c4      	b.n	3912 <_malloc_r+0x2ba>
    3b88:	f240 5154 	movw	r1, #1364	; 0x554
    3b8c:	428b      	cmp	r3, r1
    3b8e:	d80b      	bhi.n	3ba8 <_malloc_r+0x550>
    3b90:	0c93      	lsrs	r3, r2, #18
    3b92:	f103 017d 	add.w	r1, r3, #125	; 0x7d
    3b96:	00c9      	lsls	r1, r1, #3
    3b98:	337c      	adds	r3, #124	; 0x7c
    3b9a:	e6f3      	b.n	3984 <_malloc_r+0x32c>
    3b9c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    3ba0:	207f      	movs	r0, #127	; 0x7f
    3ba2:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
    3ba6:	e59d      	b.n	36e4 <_malloc_r+0x8c>
    3ba8:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    3bac:	237e      	movs	r3, #126	; 0x7e
    3bae:	e6e9      	b.n	3984 <_malloc_r+0x32c>
    3bb0:	687b      	ldr	r3, [r7, #4]
    3bb2:	e770      	b.n	3a96 <_malloc_r+0x43e>
    3bb4:	20008aac 	.word	0x20008aac

00003bb8 <__malloc_lock>:
    3bb8:	4801      	ldr	r0, [pc, #4]	; (3bc0 <__malloc_lock+0x8>)
    3bba:	f001 bdc5 	b.w	5748 <__retarget_lock_acquire_recursive>
    3bbe:	bf00      	nop
    3bc0:	20008aa4 	.word	0x20008aa4

00003bc4 <__malloc_unlock>:
    3bc4:	4801      	ldr	r0, [pc, #4]	; (3bcc <__malloc_unlock+0x8>)
    3bc6:	f001 bdc1 	b.w	574c <__retarget_lock_release_recursive>
    3bca:	bf00      	nop
    3bcc:	20008aa4 	.word	0x20008aa4

00003bd0 <realloc>:
    3bd0:	b410      	push	{r4}
    3bd2:	4c04      	ldr	r4, [pc, #16]	; (3be4 <realloc+0x14>)
    3bd4:	4603      	mov	r3, r0
    3bd6:	460a      	mov	r2, r1
    3bd8:	6820      	ldr	r0, [r4, #0]
    3bda:	f85d 4b04 	ldr.w	r4, [sp], #4
    3bde:	4619      	mov	r1, r3
    3be0:	f000 b802 	b.w	3be8 <_realloc_r>
    3be4:	200081e4 	.word	0x200081e4

00003be8 <_realloc_r>:
    3be8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3bec:	4617      	mov	r7, r2
    3bee:	2900      	cmp	r1, #0
    3bf0:	f000 8098 	beq.w	3d24 <_realloc_r+0x13c>
    3bf4:	460c      	mov	r4, r1
    3bf6:	f107 050b 	add.w	r5, r7, #11
    3bfa:	4680      	mov	r8, r0
    3bfc:	f7ff ffdc 	bl	3bb8 <__malloc_lock>
    3c00:	2d16      	cmp	r5, #22
    3c02:	f854 1c04 	ldr.w	r1, [r4, #-4]
    3c06:	d85b      	bhi.n	3cc0 <_realloc_r+0xd8>
    3c08:	2510      	movs	r5, #16
    3c0a:	462a      	mov	r2, r5
    3c0c:	42af      	cmp	r7, r5
    3c0e:	d85c      	bhi.n	3cca <_realloc_r+0xe2>
    3c10:	f021 0603 	bic.w	r6, r1, #3
    3c14:	4296      	cmp	r6, r2
    3c16:	f1a4 0908 	sub.w	r9, r4, #8
    3c1a:	da62      	bge.n	3ce2 <_realloc_r+0xfa>
    3c1c:	4bbc      	ldr	r3, [pc, #752]	; (3f10 <_realloc_r+0x328>)
    3c1e:	f8d3 c008 	ldr.w	ip, [r3, #8]
    3c22:	eb09 0006 	add.w	r0, r9, r6
    3c26:	4584      	cmp	ip, r0
    3c28:	f000 8097 	beq.w	3d5a <_realloc_r+0x172>
    3c2c:	f8d0 c004 	ldr.w	ip, [r0, #4]
    3c30:	f02c 0301 	bic.w	r3, ip, #1
    3c34:	4403      	add	r3, r0
    3c36:	685b      	ldr	r3, [r3, #4]
    3c38:	07db      	lsls	r3, r3, #31
    3c3a:	d468      	bmi.n	3d0e <_realloc_r+0x126>
    3c3c:	f02c 0c03 	bic.w	ip, ip, #3
    3c40:	eb06 030c 	add.w	r3, r6, ip
    3c44:	4293      	cmp	r3, r2
    3c46:	da47      	bge.n	3cd8 <_realloc_r+0xf0>
    3c48:	07cb      	lsls	r3, r1, #31
    3c4a:	d410      	bmi.n	3c6e <_realloc_r+0x86>
    3c4c:	f854 3c08 	ldr.w	r3, [r4, #-8]
    3c50:	eba9 0a03 	sub.w	sl, r9, r3
    3c54:	f8da 3004 	ldr.w	r3, [sl, #4]
    3c58:	f023 0103 	bic.w	r1, r3, #3
    3c5c:	448c      	add	ip, r1
    3c5e:	44b4      	add	ip, r6
    3c60:	4594      	cmp	ip, r2
    3c62:	f280 8111 	bge.w	3e88 <_realloc_r+0x2a0>
    3c66:	1873      	adds	r3, r6, r1
    3c68:	4293      	cmp	r3, r2
    3c6a:	f280 80e8 	bge.w	3e3e <_realloc_r+0x256>
    3c6e:	4639      	mov	r1, r7
    3c70:	4640      	mov	r0, r8
    3c72:	f7ff fcf1 	bl	3658 <_malloc_r>
    3c76:	4607      	mov	r7, r0
    3c78:	b1e0      	cbz	r0, 3cb4 <_realloc_r+0xcc>
    3c7a:	f854 3c04 	ldr.w	r3, [r4, #-4]
    3c7e:	f023 0301 	bic.w	r3, r3, #1
    3c82:	444b      	add	r3, r9
    3c84:	f1a0 0208 	sub.w	r2, r0, #8
    3c88:	4293      	cmp	r3, r2
    3c8a:	f000 80d2 	beq.w	3e32 <_realloc_r+0x24a>
    3c8e:	1f32      	subs	r2, r6, #4
    3c90:	2a24      	cmp	r2, #36	; 0x24
    3c92:	f200 80f5 	bhi.w	3e80 <_realloc_r+0x298>
    3c96:	2a13      	cmp	r2, #19
    3c98:	f200 80ac 	bhi.w	3df4 <_realloc_r+0x20c>
    3c9c:	4603      	mov	r3, r0
    3c9e:	4622      	mov	r2, r4
    3ca0:	6811      	ldr	r1, [r2, #0]
    3ca2:	6019      	str	r1, [r3, #0]
    3ca4:	6851      	ldr	r1, [r2, #4]
    3ca6:	6059      	str	r1, [r3, #4]
    3ca8:	6892      	ldr	r2, [r2, #8]
    3caa:	609a      	str	r2, [r3, #8]
    3cac:	4621      	mov	r1, r4
    3cae:	4640      	mov	r0, r8
    3cb0:	f001 ff94 	bl	5bdc <_free_r>
    3cb4:	4640      	mov	r0, r8
    3cb6:	f7ff ff85 	bl	3bc4 <__malloc_unlock>
    3cba:	4638      	mov	r0, r7
    3cbc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3cc0:	f025 0507 	bic.w	r5, r5, #7
    3cc4:	2d00      	cmp	r5, #0
    3cc6:	462a      	mov	r2, r5
    3cc8:	daa0      	bge.n	3c0c <_realloc_r+0x24>
    3cca:	230c      	movs	r3, #12
    3ccc:	f8c8 3000 	str.w	r3, [r8]
    3cd0:	2700      	movs	r7, #0
    3cd2:	4638      	mov	r0, r7
    3cd4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3cd8:	461e      	mov	r6, r3
    3cda:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    3cde:	60d3      	str	r3, [r2, #12]
    3ce0:	609a      	str	r2, [r3, #8]
    3ce2:	1b73      	subs	r3, r6, r5
    3ce4:	2b0f      	cmp	r3, #15
    3ce6:	d822      	bhi.n	3d2e <_realloc_r+0x146>
    3ce8:	f8d9 3004 	ldr.w	r3, [r9, #4]
    3cec:	f003 0301 	and.w	r3, r3, #1
    3cf0:	4333      	orrs	r3, r6
    3cf2:	444e      	add	r6, r9
    3cf4:	f8c9 3004 	str.w	r3, [r9, #4]
    3cf8:	6873      	ldr	r3, [r6, #4]
    3cfa:	f043 0301 	orr.w	r3, r3, #1
    3cfe:	6073      	str	r3, [r6, #4]
    3d00:	4640      	mov	r0, r8
    3d02:	4627      	mov	r7, r4
    3d04:	f7ff ff5e 	bl	3bc4 <__malloc_unlock>
    3d08:	4638      	mov	r0, r7
    3d0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3d0e:	07c9      	lsls	r1, r1, #31
    3d10:	d4ad      	bmi.n	3c6e <_realloc_r+0x86>
    3d12:	f854 3c08 	ldr.w	r3, [r4, #-8]
    3d16:	eba9 0a03 	sub.w	sl, r9, r3
    3d1a:	f8da 1004 	ldr.w	r1, [sl, #4]
    3d1e:	f021 0103 	bic.w	r1, r1, #3
    3d22:	e7a0      	b.n	3c66 <_realloc_r+0x7e>
    3d24:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3d28:	4611      	mov	r1, r2
    3d2a:	f7ff bc95 	b.w	3658 <_malloc_r>
    3d2e:	f8d9 2004 	ldr.w	r2, [r9, #4]
    3d32:	eb09 0105 	add.w	r1, r9, r5
    3d36:	f002 0201 	and.w	r2, r2, #1
    3d3a:	444e      	add	r6, r9
    3d3c:	f043 0301 	orr.w	r3, r3, #1
    3d40:	432a      	orrs	r2, r5
    3d42:	f8c9 2004 	str.w	r2, [r9, #4]
    3d46:	604b      	str	r3, [r1, #4]
    3d48:	6873      	ldr	r3, [r6, #4]
    3d4a:	f043 0301 	orr.w	r3, r3, #1
    3d4e:	3108      	adds	r1, #8
    3d50:	6073      	str	r3, [r6, #4]
    3d52:	4640      	mov	r0, r8
    3d54:	f001 ff42 	bl	5bdc <_free_r>
    3d58:	e7d2      	b.n	3d00 <_realloc_r+0x118>
    3d5a:	f8dc 0004 	ldr.w	r0, [ip, #4]
    3d5e:	f020 0b03 	bic.w	fp, r0, #3
    3d62:	eb06 0c0b 	add.w	ip, r6, fp
    3d66:	f105 0010 	add.w	r0, r5, #16
    3d6a:	4584      	cmp	ip, r0
    3d6c:	da4d      	bge.n	3e0a <_realloc_r+0x222>
    3d6e:	07c9      	lsls	r1, r1, #31
    3d70:	f53f af7d 	bmi.w	3c6e <_realloc_r+0x86>
    3d74:	f854 1c08 	ldr.w	r1, [r4, #-8]
    3d78:	eba9 0a01 	sub.w	sl, r9, r1
    3d7c:	f8da 1004 	ldr.w	r1, [sl, #4]
    3d80:	f021 0103 	bic.w	r1, r1, #3
    3d84:	448b      	add	fp, r1
    3d86:	44b3      	add	fp, r6
    3d88:	4558      	cmp	r0, fp
    3d8a:	f73f af6c 	bgt.w	3c66 <_realloc_r+0x7e>
    3d8e:	4657      	mov	r7, sl
    3d90:	f8da 100c 	ldr.w	r1, [sl, #12]
    3d94:	f857 0f08 	ldr.w	r0, [r7, #8]!
    3d98:	1f32      	subs	r2, r6, #4
    3d9a:	2a24      	cmp	r2, #36	; 0x24
    3d9c:	60c1      	str	r1, [r0, #12]
    3d9e:	6088      	str	r0, [r1, #8]
    3da0:	f200 80db 	bhi.w	3f5a <_realloc_r+0x372>
    3da4:	2a13      	cmp	r2, #19
    3da6:	f240 80d6 	bls.w	3f56 <_realloc_r+0x36e>
    3daa:	6821      	ldr	r1, [r4, #0]
    3dac:	f8ca 1008 	str.w	r1, [sl, #8]
    3db0:	6861      	ldr	r1, [r4, #4]
    3db2:	f8ca 100c 	str.w	r1, [sl, #12]
    3db6:	2a1b      	cmp	r2, #27
    3db8:	f200 80df 	bhi.w	3f7a <_realloc_r+0x392>
    3dbc:	3408      	adds	r4, #8
    3dbe:	f10a 0210 	add.w	r2, sl, #16
    3dc2:	6821      	ldr	r1, [r4, #0]
    3dc4:	6011      	str	r1, [r2, #0]
    3dc6:	6861      	ldr	r1, [r4, #4]
    3dc8:	6051      	str	r1, [r2, #4]
    3dca:	68a1      	ldr	r1, [r4, #8]
    3dcc:	6091      	str	r1, [r2, #8]
    3dce:	eb0a 0105 	add.w	r1, sl, r5
    3dd2:	ebab 0205 	sub.w	r2, fp, r5
    3dd6:	f042 0201 	orr.w	r2, r2, #1
    3dda:	6099      	str	r1, [r3, #8]
    3ddc:	604a      	str	r2, [r1, #4]
    3dde:	f8da 3004 	ldr.w	r3, [sl, #4]
    3de2:	f003 0301 	and.w	r3, r3, #1
    3de6:	432b      	orrs	r3, r5
    3de8:	4640      	mov	r0, r8
    3dea:	f8ca 3004 	str.w	r3, [sl, #4]
    3dee:	f7ff fee9 	bl	3bc4 <__malloc_unlock>
    3df2:	e76e      	b.n	3cd2 <_realloc_r+0xea>
    3df4:	6823      	ldr	r3, [r4, #0]
    3df6:	6003      	str	r3, [r0, #0]
    3df8:	6863      	ldr	r3, [r4, #4]
    3dfa:	6043      	str	r3, [r0, #4]
    3dfc:	2a1b      	cmp	r2, #27
    3dfe:	d868      	bhi.n	3ed2 <_realloc_r+0x2ea>
    3e00:	f104 0208 	add.w	r2, r4, #8
    3e04:	f100 0308 	add.w	r3, r0, #8
    3e08:	e74a      	b.n	3ca0 <_realloc_r+0xb8>
    3e0a:	eb09 0205 	add.w	r2, r9, r5
    3e0e:	609a      	str	r2, [r3, #8]
    3e10:	ebac 0305 	sub.w	r3, ip, r5
    3e14:	f043 0301 	orr.w	r3, r3, #1
    3e18:	6053      	str	r3, [r2, #4]
    3e1a:	f854 3c04 	ldr.w	r3, [r4, #-4]
    3e1e:	f003 0301 	and.w	r3, r3, #1
    3e22:	432b      	orrs	r3, r5
    3e24:	4640      	mov	r0, r8
    3e26:	f844 3c04 	str.w	r3, [r4, #-4]
    3e2a:	f7ff fecb 	bl	3bc4 <__malloc_unlock>
    3e2e:	4627      	mov	r7, r4
    3e30:	e74f      	b.n	3cd2 <_realloc_r+0xea>
    3e32:	f850 3c04 	ldr.w	r3, [r0, #-4]
    3e36:	f023 0303 	bic.w	r3, r3, #3
    3e3a:	441e      	add	r6, r3
    3e3c:	e751      	b.n	3ce2 <_realloc_r+0xfa>
    3e3e:	4657      	mov	r7, sl
    3e40:	f8da 100c 	ldr.w	r1, [sl, #12]
    3e44:	f857 0f08 	ldr.w	r0, [r7, #8]!
    3e48:	1f32      	subs	r2, r6, #4
    3e4a:	2a24      	cmp	r2, #36	; 0x24
    3e4c:	60c1      	str	r1, [r0, #12]
    3e4e:	6088      	str	r0, [r1, #8]
    3e50:	d84c      	bhi.n	3eec <_realloc_r+0x304>
    3e52:	2a13      	cmp	r2, #19
    3e54:	d948      	bls.n	3ee8 <_realloc_r+0x300>
    3e56:	6821      	ldr	r1, [r4, #0]
    3e58:	f8ca 1008 	str.w	r1, [sl, #8]
    3e5c:	6861      	ldr	r1, [r4, #4]
    3e5e:	f8ca 100c 	str.w	r1, [sl, #12]
    3e62:	2a1b      	cmp	r2, #27
    3e64:	d856      	bhi.n	3f14 <_realloc_r+0x32c>
    3e66:	3408      	adds	r4, #8
    3e68:	f10a 0210 	add.w	r2, sl, #16
    3e6c:	461e      	mov	r6, r3
    3e6e:	6823      	ldr	r3, [r4, #0]
    3e70:	6013      	str	r3, [r2, #0]
    3e72:	6863      	ldr	r3, [r4, #4]
    3e74:	6053      	str	r3, [r2, #4]
    3e76:	68a3      	ldr	r3, [r4, #8]
    3e78:	6093      	str	r3, [r2, #8]
    3e7a:	46d1      	mov	r9, sl
    3e7c:	463c      	mov	r4, r7
    3e7e:	e730      	b.n	3ce2 <_realloc_r+0xfa>
    3e80:	4621      	mov	r1, r4
    3e82:	f001 fa81 	bl	5388 <memmove>
    3e86:	e711      	b.n	3cac <_realloc_r+0xc4>
    3e88:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
    3e8c:	4657      	mov	r7, sl
    3e8e:	60cb      	str	r3, [r1, #12]
    3e90:	6099      	str	r1, [r3, #8]
    3e92:	f857 1f08 	ldr.w	r1, [r7, #8]!
    3e96:	f8da 300c 	ldr.w	r3, [sl, #12]
    3e9a:	60cb      	str	r3, [r1, #12]
    3e9c:	1f32      	subs	r2, r6, #4
    3e9e:	2a24      	cmp	r2, #36	; 0x24
    3ea0:	6099      	str	r1, [r3, #8]
    3ea2:	d82d      	bhi.n	3f00 <_realloc_r+0x318>
    3ea4:	2a13      	cmp	r2, #19
    3ea6:	d929      	bls.n	3efc <_realloc_r+0x314>
    3ea8:	6823      	ldr	r3, [r4, #0]
    3eaa:	f8ca 3008 	str.w	r3, [sl, #8]
    3eae:	6863      	ldr	r3, [r4, #4]
    3eb0:	f8ca 300c 	str.w	r3, [sl, #12]
    3eb4:	2a1b      	cmp	r2, #27
    3eb6:	d842      	bhi.n	3f3e <_realloc_r+0x356>
    3eb8:	3408      	adds	r4, #8
    3eba:	f10a 0310 	add.w	r3, sl, #16
    3ebe:	6822      	ldr	r2, [r4, #0]
    3ec0:	601a      	str	r2, [r3, #0]
    3ec2:	6862      	ldr	r2, [r4, #4]
    3ec4:	605a      	str	r2, [r3, #4]
    3ec6:	68a2      	ldr	r2, [r4, #8]
    3ec8:	609a      	str	r2, [r3, #8]
    3eca:	4666      	mov	r6, ip
    3ecc:	46d1      	mov	r9, sl
    3ece:	463c      	mov	r4, r7
    3ed0:	e707      	b.n	3ce2 <_realloc_r+0xfa>
    3ed2:	68a3      	ldr	r3, [r4, #8]
    3ed4:	6083      	str	r3, [r0, #8]
    3ed6:	68e3      	ldr	r3, [r4, #12]
    3ed8:	60c3      	str	r3, [r0, #12]
    3eda:	2a24      	cmp	r2, #36	; 0x24
    3edc:	d026      	beq.n	3f2c <_realloc_r+0x344>
    3ede:	f104 0210 	add.w	r2, r4, #16
    3ee2:	f100 0310 	add.w	r3, r0, #16
    3ee6:	e6db      	b.n	3ca0 <_realloc_r+0xb8>
    3ee8:	463a      	mov	r2, r7
    3eea:	e7bf      	b.n	3e6c <_realloc_r+0x284>
    3eec:	4621      	mov	r1, r4
    3eee:	4638      	mov	r0, r7
    3ef0:	461e      	mov	r6, r3
    3ef2:	46d1      	mov	r9, sl
    3ef4:	f001 fa48 	bl	5388 <memmove>
    3ef8:	463c      	mov	r4, r7
    3efa:	e6f2      	b.n	3ce2 <_realloc_r+0xfa>
    3efc:	463b      	mov	r3, r7
    3efe:	e7de      	b.n	3ebe <_realloc_r+0x2d6>
    3f00:	4621      	mov	r1, r4
    3f02:	4638      	mov	r0, r7
    3f04:	4666      	mov	r6, ip
    3f06:	46d1      	mov	r9, sl
    3f08:	f001 fa3e 	bl	5388 <memmove>
    3f0c:	463c      	mov	r4, r7
    3f0e:	e6e8      	b.n	3ce2 <_realloc_r+0xfa>
    3f10:	20007dc8 	.word	0x20007dc8
    3f14:	68a1      	ldr	r1, [r4, #8]
    3f16:	f8ca 1010 	str.w	r1, [sl, #16]
    3f1a:	68e1      	ldr	r1, [r4, #12]
    3f1c:	f8ca 1014 	str.w	r1, [sl, #20]
    3f20:	2a24      	cmp	r2, #36	; 0x24
    3f22:	d020      	beq.n	3f66 <_realloc_r+0x37e>
    3f24:	3410      	adds	r4, #16
    3f26:	f10a 0218 	add.w	r2, sl, #24
    3f2a:	e79f      	b.n	3e6c <_realloc_r+0x284>
    3f2c:	6923      	ldr	r3, [r4, #16]
    3f2e:	6103      	str	r3, [r0, #16]
    3f30:	6961      	ldr	r1, [r4, #20]
    3f32:	6141      	str	r1, [r0, #20]
    3f34:	f104 0218 	add.w	r2, r4, #24
    3f38:	f100 0318 	add.w	r3, r0, #24
    3f3c:	e6b0      	b.n	3ca0 <_realloc_r+0xb8>
    3f3e:	68a3      	ldr	r3, [r4, #8]
    3f40:	f8ca 3010 	str.w	r3, [sl, #16]
    3f44:	68e3      	ldr	r3, [r4, #12]
    3f46:	f8ca 3014 	str.w	r3, [sl, #20]
    3f4a:	2a24      	cmp	r2, #36	; 0x24
    3f4c:	d021      	beq.n	3f92 <_realloc_r+0x3aa>
    3f4e:	3410      	adds	r4, #16
    3f50:	f10a 0318 	add.w	r3, sl, #24
    3f54:	e7b3      	b.n	3ebe <_realloc_r+0x2d6>
    3f56:	463a      	mov	r2, r7
    3f58:	e733      	b.n	3dc2 <_realloc_r+0x1da>
    3f5a:	4621      	mov	r1, r4
    3f5c:	4638      	mov	r0, r7
    3f5e:	f001 fa13 	bl	5388 <memmove>
    3f62:	4b16      	ldr	r3, [pc, #88]	; (3fbc <_realloc_r+0x3d4>)
    3f64:	e733      	b.n	3dce <_realloc_r+0x1e6>
    3f66:	6922      	ldr	r2, [r4, #16]
    3f68:	f8ca 2018 	str.w	r2, [sl, #24]
    3f6c:	6962      	ldr	r2, [r4, #20]
    3f6e:	f8ca 201c 	str.w	r2, [sl, #28]
    3f72:	3418      	adds	r4, #24
    3f74:	f10a 0220 	add.w	r2, sl, #32
    3f78:	e778      	b.n	3e6c <_realloc_r+0x284>
    3f7a:	68a1      	ldr	r1, [r4, #8]
    3f7c:	f8ca 1010 	str.w	r1, [sl, #16]
    3f80:	68e1      	ldr	r1, [r4, #12]
    3f82:	f8ca 1014 	str.w	r1, [sl, #20]
    3f86:	2a24      	cmp	r2, #36	; 0x24
    3f88:	d00d      	beq.n	3fa6 <_realloc_r+0x3be>
    3f8a:	3410      	adds	r4, #16
    3f8c:	f10a 0218 	add.w	r2, sl, #24
    3f90:	e717      	b.n	3dc2 <_realloc_r+0x1da>
    3f92:	6923      	ldr	r3, [r4, #16]
    3f94:	f8ca 3018 	str.w	r3, [sl, #24]
    3f98:	6963      	ldr	r3, [r4, #20]
    3f9a:	f8ca 301c 	str.w	r3, [sl, #28]
    3f9e:	3418      	adds	r4, #24
    3fa0:	f10a 0320 	add.w	r3, sl, #32
    3fa4:	e78b      	b.n	3ebe <_realloc_r+0x2d6>
    3fa6:	6922      	ldr	r2, [r4, #16]
    3fa8:	f8ca 2018 	str.w	r2, [sl, #24]
    3fac:	6962      	ldr	r2, [r4, #20]
    3fae:	f8ca 201c 	str.w	r2, [sl, #28]
    3fb2:	3418      	adds	r4, #24
    3fb4:	f10a 0220 	add.w	r2, sl, #32
    3fb8:	e703      	b.n	3dc2 <_realloc_r+0x1da>
    3fba:	bf00      	nop
    3fbc:	20007dc8 	.word	0x20007dc8

00003fc0 <_strtod_l>:
    3fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3fc4:	ed2d 8b10 	vpush	{d8-d15}
    3fc8:	b097      	sub	sp, #92	; 0x5c
    3fca:	468a      	mov	sl, r1
    3fcc:	2100      	movs	r1, #0
    3fce:	9207      	str	r2, [sp, #28]
    3fd0:	9112      	str	r1, [sp, #72]	; 0x48
    3fd2:	2200      	movs	r2, #0
    3fd4:	2100      	movs	r1, #0
    3fd6:	e9cd 1204 	strd	r1, r2, [sp, #16]
    3fda:	4680      	mov	r8, r0
    3fdc:	4651      	mov	r1, sl
    3fde:	9111      	str	r1, [sp, #68]	; 0x44
    3fe0:	460f      	mov	r7, r1
    3fe2:	f811 2b01 	ldrb.w	r2, [r1], #1
    3fe6:	2a2d      	cmp	r2, #45	; 0x2d
    3fe8:	d85e      	bhi.n	40a8 <_strtod_l+0xe8>
    3fea:	a001      	add	r0, pc, #4	; (adr r0, 3ff0 <_strtod_l+0x30>)
    3fec:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
    3ff0:	00004191 	.word	0x00004191
    3ff4:	000040a9 	.word	0x000040a9
    3ff8:	000040a9 	.word	0x000040a9
    3ffc:	000040a9 	.word	0x000040a9
    4000:	000040a9 	.word	0x000040a9
    4004:	000040a9 	.word	0x000040a9
    4008:	000040a9 	.word	0x000040a9
    400c:	000040a9 	.word	0x000040a9
    4010:	000040a9 	.word	0x000040a9
    4014:	00003fdf 	.word	0x00003fdf
    4018:	00003fdf 	.word	0x00003fdf
    401c:	00003fdf 	.word	0x00003fdf
    4020:	00003fdf 	.word	0x00003fdf
    4024:	00003fdf 	.word	0x00003fdf
    4028:	000040a9 	.word	0x000040a9
    402c:	000040a9 	.word	0x000040a9
    4030:	000040a9 	.word	0x000040a9
    4034:	000040a9 	.word	0x000040a9
    4038:	000040a9 	.word	0x000040a9
    403c:	000040a9 	.word	0x000040a9
    4040:	000040a9 	.word	0x000040a9
    4044:	000040a9 	.word	0x000040a9
    4048:	000040a9 	.word	0x000040a9
    404c:	000040a9 	.word	0x000040a9
    4050:	000040a9 	.word	0x000040a9
    4054:	000040a9 	.word	0x000040a9
    4058:	000040a9 	.word	0x000040a9
    405c:	000040a9 	.word	0x000040a9
    4060:	000040a9 	.word	0x000040a9
    4064:	000040a9 	.word	0x000040a9
    4068:	000040a9 	.word	0x000040a9
    406c:	000040a9 	.word	0x000040a9
    4070:	00003fdf 	.word	0x00003fdf
    4074:	000040a9 	.word	0x000040a9
    4078:	000040a9 	.word	0x000040a9
    407c:	000040a9 	.word	0x000040a9
    4080:	000040a9 	.word	0x000040a9
    4084:	000040a9 	.word	0x000040a9
    4088:	000040a9 	.word	0x000040a9
    408c:	000040a9 	.word	0x000040a9
    4090:	000040a9 	.word	0x000040a9
    4094:	000040a9 	.word	0x000040a9
    4098:	000040a9 	.word	0x000040a9
    409c:	000047cb 	.word	0x000047cb
    40a0:	000040a9 	.word	0x000040a9
    40a4:	000047b7 	.word	0x000047b7
    40a8:	2100      	movs	r1, #0
    40aa:	9109      	str	r1, [sp, #36]	; 0x24
    40ac:	2a30      	cmp	r2, #48	; 0x30
    40ae:	d07d      	beq.n	41ac <_strtod_l+0x1ec>
    40b0:	2300      	movs	r3, #0
    40b2:	9308      	str	r3, [sp, #32]
    40b4:	2a2f      	cmp	r2, #47	; 0x2f
    40b6:	4614      	mov	r4, r2
    40b8:	f240 84cd 	bls.w	4a56 <_strtod_l+0xa96>
    40bc:	f04f 0900 	mov.w	r9, #0
    40c0:	4638      	mov	r0, r7
    40c2:	464e      	mov	r6, r9
    40c4:	464d      	mov	r5, r9
    40c6:	e012      	b.n	40ee <_strtod_l+0x12e>
    40c8:	3001      	adds	r0, #1
    40ca:	2d08      	cmp	r5, #8
    40cc:	9011      	str	r0, [sp, #68]	; 0x44
    40ce:	bfc8      	it	gt
    40d0:	eb09 0989 	addgt.w	r9, r9, r9, lsl #2
    40d4:	7804      	ldrb	r4, [r0, #0]
    40d6:	bfc6      	itte	gt
    40d8:	eb02 0249 	addgt.w	r2, r2, r9, lsl #1
    40dc:	f1a2 0930 	subgt.w	r9, r2, #48	; 0x30
    40e0:	f1a3 0630 	suble.w	r6, r3, #48	; 0x30
    40e4:	2c2f      	cmp	r4, #47	; 0x2f
    40e6:	f105 0501 	add.w	r5, r5, #1
    40ea:	4622      	mov	r2, r4
    40ec:	dd6f      	ble.n	41ce <_strtod_l+0x20e>
    40ee:	eb06 0386 	add.w	r3, r6, r6, lsl #2
    40f2:	2c39      	cmp	r4, #57	; 0x39
    40f4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    40f8:	dde6      	ble.n	40c8 <_strtod_l+0x108>
    40fa:	499f      	ldr	r1, [pc, #636]	; (4378 <_strtod_l+0x3b8>)
    40fc:	2201      	movs	r2, #1
    40fe:	f001 fa11 	bl	5524 <strncmp>
    4102:	2800      	cmp	r0, #0
    4104:	d137      	bne.n	4176 <_strtod_l+0x1b6>
    4106:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4108:	461a      	mov	r2, r3
    410a:	3301      	adds	r3, #1
    410c:	9311      	str	r3, [sp, #68]	; 0x44
    410e:	7854      	ldrb	r4, [r2, #1]
    4110:	2d00      	cmp	r5, #0
    4112:	f040 8543 	bne.w	4b9c <_strtod_l+0xbdc>
    4116:	2c30      	cmp	r4, #48	; 0x30
    4118:	f040 8524 	bne.w	4b64 <_strtod_l+0xba4>
    411c:	f1c3 0201 	rsb	r2, r3, #1
    4120:	1898      	adds	r0, r3, r2
    4122:	3301      	adds	r3, #1
    4124:	9311      	str	r3, [sp, #68]	; 0x44
    4126:	781c      	ldrb	r4, [r3, #0]
    4128:	2c30      	cmp	r4, #48	; 0x30
    412a:	d0f9      	beq.n	4120 <_strtod_l+0x160>
    412c:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
    4130:	2b08      	cmp	r3, #8
    4132:	f200 8301 	bhi.w	4738 <_strtod_l+0x778>
    4136:	9f11      	ldr	r7, [sp, #68]	; 0x44
    4138:	1c43      	adds	r3, r0, #1
    413a:	f1a4 0b30 	sub.w	fp, r4, #48	; 0x30
    413e:	930b      	str	r3, [sp, #44]	; 0x2c
    4140:	2501      	movs	r5, #1
    4142:	46bc      	mov	ip, r7
    4144:	f04f 0e00 	mov.w	lr, #0
    4148:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    414c:	eb0b 0646 	add.w	r6, fp, r6, lsl #1
    4150:	2000      	movs	r0, #0
    4152:	f10c 0301 	add.w	r3, ip, #1
    4156:	9311      	str	r3, [sp, #68]	; 0x44
    4158:	f89c 4001 	ldrb.w	r4, [ip, #1]
    415c:	f1a4 0130 	sub.w	r1, r4, #48	; 0x30
    4160:	2909      	cmp	r1, #9
    4162:	f200 82bb 	bhi.w	46dc <_strtod_l+0x71c>
    4166:	3001      	adds	r0, #1
    4168:	468b      	mov	fp, r1
    416a:	2900      	cmp	r1, #0
    416c:	f040 844f 	bne.w	4a0e <_strtod_l+0xa4e>
    4170:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
    4174:	e7ed      	b.n	4152 <_strtod_l+0x192>
    4176:	2000      	movs	r0, #0
    4178:	2c65      	cmp	r4, #101	; 0x65
    417a:	46ae      	mov	lr, r5
    417c:	900b      	str	r0, [sp, #44]	; 0x2c
    417e:	4684      	mov	ip, r0
    4180:	d001      	beq.n	4186 <_strtod_l+0x1c6>
    4182:	2c45      	cmp	r4, #69	; 0x45
    4184:	d130      	bne.n	41e8 <_strtod_l+0x228>
    4186:	2d00      	cmp	r5, #0
    4188:	d16b      	bne.n	4262 <_strtod_l+0x2a2>
    418a:	9b08      	ldr	r3, [sp, #32]
    418c:	4303      	orrs	r3, r0
    418e:	d167      	bne.n	4260 <_strtod_l+0x2a0>
    4190:	9b07      	ldr	r3, [sp, #28]
    4192:	ed9f 8b77 	vldr	d8, [pc, #476]	; 4370 <_strtod_l+0x3b0>
    4196:	b113      	cbz	r3, 419e <_strtod_l+0x1de>
    4198:	9b07      	ldr	r3, [sp, #28]
    419a:	f8c3 a000 	str.w	sl, [r3]
    419e:	eeb0 0b48 	vmov.f64	d0, d8
    41a2:	b017      	add	sp, #92	; 0x5c
    41a4:	ecbd 8b10 	vpop	{d8-d15}
    41a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    41ac:	787a      	ldrb	r2, [r7, #1]
    41ae:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    41b2:	2a58      	cmp	r2, #88	; 0x58
    41b4:	f000 840c 	beq.w	49d0 <_strtod_l+0xa10>
    41b8:	3701      	adds	r7, #1
    41ba:	9711      	str	r7, [sp, #68]	; 0x44
    41bc:	783a      	ldrb	r2, [r7, #0]
    41be:	2a30      	cmp	r2, #48	; 0x30
    41c0:	d0fa      	beq.n	41b8 <_strtod_l+0x1f8>
    41c2:	2a00      	cmp	r2, #0
    41c4:	f000 80b7 	beq.w	4336 <_strtod_l+0x376>
    41c8:	2301      	movs	r3, #1
    41ca:	9308      	str	r3, [sp, #32]
    41cc:	e772      	b.n	40b4 <_strtod_l+0xf4>
    41ce:	496a      	ldr	r1, [pc, #424]	; (4378 <_strtod_l+0x3b8>)
    41d0:	2201      	movs	r2, #1
    41d2:	f001 f9a7 	bl	5524 <strncmp>
    41d6:	2800      	cmp	r0, #0
    41d8:	f000 80c0 	beq.w	435c <_strtod_l+0x39c>
    41dc:	46ae      	mov	lr, r5
    41de:	f04f 0c00 	mov.w	ip, #0
    41e2:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
    41e6:	4660      	mov	r0, ip
    41e8:	f04f 0b00 	mov.w	fp, #0
    41ec:	2d00      	cmp	r5, #0
    41ee:	d07e      	beq.n	42ee <_strtod_l+0x32e>
    41f0:	ee07 6a90 	vmov	s15, r6
    41f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    41f6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    41fa:	ebab 0303 	sub.w	r3, fp, r3
    41fe:	f1be 0f00 	cmp.w	lr, #0
    4202:	bf08      	it	eq
    4204:	46ae      	moveq	lr, r5
    4206:	2d10      	cmp	r5, #16
    4208:	930a      	str	r3, [sp, #40]	; 0x28
    420a:	462b      	mov	r3, r5
    420c:	bfa8      	it	ge
    420e:	2310      	movge	r3, #16
    4210:	2d09      	cmp	r5, #9
    4212:	ed8d 7b04 	vstr	d7, [sp, #16]
    4216:	dd0c      	ble.n	4232 <_strtod_l+0x272>
    4218:	4a58      	ldr	r2, [pc, #352]	; (437c <_strtod_l+0x3bc>)
    421a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    421e:	ed12 5b12 	vldr	d5, [r2, #-72]	; 0xffffffb8
    4222:	ee06 9a90 	vmov	s13, r9
    4226:	eeb8 6b66 	vcvt.f64.u32	d6, s13
    422a:	eea7 6b05 	vfma.f64	d6, d7, d5
    422e:	ed8d 6b04 	vstr	d6, [sp, #16]
    4232:	2d0f      	cmp	r5, #15
    4234:	f300 80a8 	bgt.w	4388 <_strtod_l+0x3c8>
    4238:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    423a:	2a00      	cmp	r2, #0
    423c:	f000 83e4 	beq.w	4a08 <_strtod_l+0xa48>
    4240:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4242:	f340 833c 	ble.w	48be <_strtod_l+0x8fe>
    4246:	2a16      	cmp	r2, #22
    4248:	f340 8498 	ble.w	4b7c <_strtod_l+0xbbc>
    424c:	990a      	ldr	r1, [sp, #40]	; 0x28
    424e:	f1c5 0225 	rsb	r2, r5, #37	; 0x25
    4252:	428a      	cmp	r2, r1
    4254:	f280 84a6 	bge.w	4ba4 <_strtod_l+0xbe4>
    4258:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    425a:	1aeb      	subs	r3, r5, r3
    425c:	4413      	add	r3, r2
    425e:	e099      	b.n	4394 <_strtod_l+0x3d4>
    4260:	2500      	movs	r5, #0
    4262:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
    4266:	f10a 0301 	add.w	r3, sl, #1
    426a:	9311      	str	r3, [sp, #68]	; 0x44
    426c:	f89a 4001 	ldrb.w	r4, [sl, #1]
    4270:	2c2b      	cmp	r4, #43	; 0x2b
    4272:	f000 825e 	beq.w	4732 <_strtod_l+0x772>
    4276:	2c2d      	cmp	r4, #45	; 0x2d
    4278:	f000 81f7 	beq.w	466a <_strtod_l+0x6aa>
    427c:	2300      	movs	r3, #0
    427e:	930a      	str	r3, [sp, #40]	; 0x28
    4280:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    4284:	2b09      	cmp	r3, #9
    4286:	f200 81eb 	bhi.w	4660 <_strtod_l+0x6a0>
    428a:	2c30      	cmp	r4, #48	; 0x30
    428c:	d105      	bne.n	429a <_strtod_l+0x2da>
    428e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4290:	3301      	adds	r3, #1
    4292:	9311      	str	r3, [sp, #68]	; 0x44
    4294:	781c      	ldrb	r4, [r3, #0]
    4296:	2c30      	cmp	r4, #48	; 0x30
    4298:	d0fa      	beq.n	4290 <_strtod_l+0x2d0>
    429a:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
    429e:	2b08      	cmp	r3, #8
    42a0:	d8a2      	bhi.n	41e8 <_strtod_l+0x228>
    42a2:	9a11      	ldr	r2, [sp, #68]	; 0x44
    42a4:	920c      	str	r2, [sp, #48]	; 0x30
    42a6:	1c53      	adds	r3, r2, #1
    42a8:	9311      	str	r3, [sp, #68]	; 0x44
    42aa:	f1a4 0b30 	sub.w	fp, r4, #48	; 0x30
    42ae:	7854      	ldrb	r4, [r2, #1]
    42b0:	2c2f      	cmp	r4, #47	; 0x2f
    42b2:	dc07      	bgt.n	42c4 <_strtod_l+0x304>
    42b4:	e3de      	b.n	4a74 <_strtod_l+0xab4>
    42b6:	3301      	adds	r3, #1
    42b8:	9311      	str	r3, [sp, #68]	; 0x44
    42ba:	784c      	ldrb	r4, [r1, #1]
    42bc:	2c2f      	cmp	r4, #47	; 0x2f
    42be:	f1a2 0b30 	sub.w	fp, r2, #48	; 0x30
    42c2:	dd06      	ble.n	42d2 <_strtod_l+0x312>
    42c4:	eb0b 028b 	add.w	r2, fp, fp, lsl #2
    42c8:	2c39      	cmp	r4, #57	; 0x39
    42ca:	4619      	mov	r1, r3
    42cc:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    42d0:	ddf1      	ble.n	42b6 <_strtod_l+0x2f6>
    42d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    42d4:	1a9b      	subs	r3, r3, r2
    42d6:	2b08      	cmp	r3, #8
    42d8:	f340 83cc 	ble.w	4a74 <_strtod_l+0xab4>
    42dc:	f644 6b1f 	movw	fp, #19999	; 0x4e1f
    42e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    42e2:	2b00      	cmp	r3, #0
    42e4:	d082      	beq.n	41ec <_strtod_l+0x22c>
    42e6:	f1cb 0b00 	rsb	fp, fp, #0
    42ea:	2d00      	cmp	r5, #0
    42ec:	d180      	bne.n	41f0 <_strtod_l+0x230>
    42ee:	9b08      	ldr	r3, [sp, #32]
    42f0:	4303      	orrs	r3, r0
    42f2:	d120      	bne.n	4336 <_strtod_l+0x376>
    42f4:	f1bc 0f00 	cmp.w	ip, #0
    42f8:	f47f af4a 	bne.w	4190 <_strtod_l+0x1d0>
    42fc:	2c69      	cmp	r4, #105	; 0x69
    42fe:	f000 83cf 	beq.w	4aa0 <_strtod_l+0xae0>
    4302:	f300 82f3 	bgt.w	48ec <_strtod_l+0x92c>
    4306:	2c49      	cmp	r4, #73	; 0x49
    4308:	f000 83ca 	beq.w	4aa0 <_strtod_l+0xae0>
    430c:	2c4e      	cmp	r4, #78	; 0x4e
    430e:	f47f af3f 	bne.w	4190 <_strtod_l+0x1d0>
    4312:	491b      	ldr	r1, [pc, #108]	; (4380 <_strtod_l+0x3c0>)
    4314:	a811      	add	r0, sp, #68	; 0x44
    4316:	f002 f883 	bl	6420 <__match>
    431a:	2800      	cmp	r0, #0
    431c:	f43f af38 	beq.w	4190 <_strtod_l+0x1d0>
    4320:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4322:	781b      	ldrb	r3, [r3, #0]
    4324:	2b28      	cmp	r3, #40	; 0x28
    4326:	f000 84f2 	beq.w	4d0e <_strtod_l+0xd4e>
    432a:	4816      	ldr	r0, [pc, #88]	; (4384 <_strtod_l+0x3c4>)
    432c:	f001 fbf8 	bl	5b20 <nan>
    4330:	eeb0 8b40 	vmov.f64	d8, d0
    4334:	e001      	b.n	433a <_strtod_l+0x37a>
    4336:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 4370 <_strtod_l+0x3b0>
    433a:	9a07      	ldr	r2, [sp, #28]
    433c:	b10a      	cbz	r2, 4342 <_strtod_l+0x382>
    433e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4340:	6013      	str	r3, [r2, #0]
    4342:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4344:	2b00      	cmp	r3, #0
    4346:	f43f af2a 	beq.w	419e <_strtod_l+0x1de>
    434a:	eeb1 8b48 	vneg.f64	d8, d8
    434e:	eeb0 0b48 	vmov.f64	d0, d8
    4352:	b017      	add	sp, #92	; 0x5c
    4354:	ecbd 8b10 	vpop	{d8-d15}
    4358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    435c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    435e:	900b      	str	r0, [sp, #44]	; 0x2c
    4360:	1c5a      	adds	r2, r3, #1
    4362:	9211      	str	r2, [sp, #68]	; 0x44
    4364:	785c      	ldrb	r4, [r3, #1]
    4366:	46ae      	mov	lr, r5
    4368:	e6f8      	b.n	415c <_strtod_l+0x19c>
    436a:	bf00      	nop
    436c:	f3af 8000 	nop.w
	...
    4378:	200007c8 	.word	0x200007c8
    437c:	200002a8 	.word	0x200002a8
    4380:	200007d8 	.word	0x200007d8
    4384:	200078e4 	.word	0x200078e4
    4388:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    438a:	1aeb      	subs	r3, r5, r3
    438c:	4413      	add	r3, r2
    438e:	2b00      	cmp	r3, #0
    4390:	f340 82b0 	ble.w	48f4 <_strtod_l+0x934>
    4394:	f013 010f 	ands.w	r1, r3, #15
    4398:	d00a      	beq.n	43b0 <_strtod_l+0x3f0>
    439a:	4ac3      	ldr	r2, [pc, #780]	; (46a8 <_strtod_l+0x6e8>)
    439c:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    43a0:	ed9d 6b04 	vldr	d6, [sp, #16]
    43a4:	ed92 7b00 	vldr	d7, [r2]
    43a8:	ee27 7b06 	vmul.f64	d7, d7, d6
    43ac:	ed8d 7b04 	vstr	d7, [sp, #16]
    43b0:	f033 020f 	bics.w	r2, r3, #15
    43b4:	f040 8238 	bne.w	4828 <_strtod_l+0x868>
    43b8:	2300      	movs	r3, #0
    43ba:	9308      	str	r3, [sp, #32]
    43bc:	9600      	str	r6, [sp, #0]
    43be:	462b      	mov	r3, r5
    43c0:	4672      	mov	r2, lr
    43c2:	4639      	mov	r1, r7
    43c4:	4640      	mov	r0, r8
    43c6:	f002 f9b7 	bl	6738 <__s2b>
    43ca:	4681      	mov	r9, r0
    43cc:	2800      	cmp	r0, #0
    43ce:	f000 82e1 	beq.w	4994 <_strtod_l+0x9d4>
    43d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    43d4:	eba3 0b0b 	sub.w	fp, r3, fp
    43d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    43da:	ed9f eba9 	vldr	d14, [pc, #676]	; 4680 <_strtod_l+0x6c0>
    43de:	2b00      	cmp	r3, #0
    43e0:	ed9f cba9 	vldr	d12, [pc, #676]	; 4688 <_strtod_l+0x6c8>
    43e4:	ed9f dbaa 	vldr	d13, [pc, #680]	; 4690 <_strtod_l+0x6d0>
    43e8:	ed9f bbab 	vldr	d11, [pc, #684]	; 4698 <_strtod_l+0x6d8>
    43ec:	bfb4      	ite	lt
    43ee:	465a      	movlt	r2, fp
    43f0:	2200      	movge	r2, #0
    43f2:	f04f 0a00 	mov.w	sl, #0
    43f6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    43fa:	920b      	str	r2, [sp, #44]	; 0x2c
    43fc:	930c      	str	r3, [sp, #48]	; 0x30
    43fe:	4654      	mov	r4, sl
    4400:	f8d9 1004 	ldr.w	r1, [r9, #4]
    4404:	4640      	mov	r0, r8
    4406:	f002 f915 	bl	6634 <_Balloc>
    440a:	4606      	mov	r6, r0
    440c:	2800      	cmp	r0, #0
    440e:	f000 810e 	beq.w	462e <_strtod_l+0x66e>
    4412:	f8d9 2010 	ldr.w	r2, [r9, #16]
    4416:	ed9d 8b04 	vldr	d8, [sp, #16]
    441a:	3202      	adds	r2, #2
    441c:	0092      	lsls	r2, r2, #2
    441e:	f109 010c 	add.w	r1, r9, #12
    4422:	300c      	adds	r0, #12
    4424:	f7fd f9f2 	bl	180c <memcpy>
    4428:	eeb0 0b48 	vmov.f64	d0, d8
    442c:	aa14      	add	r2, sp, #80	; 0x50
    442e:	a913      	add	r1, sp, #76	; 0x4c
    4430:	4640      	mov	r0, r8
    4432:	f002 fd3d 	bl	6eb0 <__d2b>
    4436:	9012      	str	r0, [sp, #72]	; 0x48
    4438:	2800      	cmp	r0, #0
    443a:	f000 80e4 	beq.w	4606 <_strtod_l+0x646>
    443e:	2101      	movs	r1, #1
    4440:	4640      	mov	r0, r8
    4442:	f002 fa21 	bl	6888 <__i2b>
    4446:	4604      	mov	r4, r0
    4448:	2800      	cmp	r0, #0
    444a:	f000 80f0 	beq.w	462e <_strtod_l+0x66e>
    444e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    4450:	2a00      	cmp	r2, #0
    4452:	f2c0 80de 	blt.w	4612 <_strtod_l+0x652>
    4456:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4458:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    445a:	eb02 0b03 	add.w	fp, r2, r3
    445e:	9b08      	ldr	r3, [sp, #32]
    4460:	9d14      	ldr	r5, [sp, #80]	; 0x50
    4462:	1ad2      	subs	r2, r2, r3
    4464:	442a      	add	r2, r5
    4466:	4b91      	ldr	r3, [pc, #580]	; (46ac <_strtod_l+0x6ec>)
    4468:	3a01      	subs	r2, #1
    446a:	429a      	cmp	r2, r3
    446c:	f1c5 0536 	rsb	r5, r5, #54	; 0x36
    4470:	f280 8098 	bge.w	45a4 <_strtod_l+0x5e4>
    4474:	1a99      	subs	r1, r3, r2
    4476:	291f      	cmp	r1, #31
    4478:	eba5 0501 	sub.w	r5, r5, r1
    447c:	f300 80e3 	bgt.w	4646 <_strtod_l+0x686>
    4480:	2201      	movs	r2, #1
    4482:	fa02 f301 	lsl.w	r3, r2, r1
    4486:	930d      	str	r3, [sp, #52]	; 0x34
    4488:	2300      	movs	r3, #0
    448a:	930e      	str	r3, [sp, #56]	; 0x38
    448c:	442f      	add	r7, r5
    448e:	9b08      	ldr	r3, [sp, #32]
    4490:	445d      	add	r5, fp
    4492:	45ab      	cmp	fp, r5
    4494:	465a      	mov	r2, fp
    4496:	441f      	add	r7, r3
    4498:	bfa8      	it	ge
    449a:	462a      	movge	r2, r5
    449c:	42ba      	cmp	r2, r7
    449e:	bfa8      	it	ge
    44a0:	463a      	movge	r2, r7
    44a2:	2a00      	cmp	r2, #0
    44a4:	dd03      	ble.n	44ae <_strtod_l+0x4ee>
    44a6:	1aad      	subs	r5, r5, r2
    44a8:	1abf      	subs	r7, r7, r2
    44aa:	ebab 0b02 	sub.w	fp, fp, r2
    44ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    44b0:	2b00      	cmp	r3, #0
    44b2:	f300 8088 	bgt.w	45c6 <_strtod_l+0x606>
    44b6:	2d00      	cmp	r5, #0
    44b8:	f300 809c 	bgt.w	45f4 <_strtod_l+0x634>
    44bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    44be:	2b00      	cmp	r3, #0
    44c0:	f300 80b7 	bgt.w	4632 <_strtod_l+0x672>
    44c4:	2f00      	cmp	r7, #0
    44c6:	f300 80a9 	bgt.w	461c <_strtod_l+0x65c>
    44ca:	f1bb 0f00 	cmp.w	fp, #0
    44ce:	dd08      	ble.n	44e2 <_strtod_l+0x522>
    44d0:	4621      	mov	r1, r4
    44d2:	465a      	mov	r2, fp
    44d4:	4640      	mov	r0, r8
    44d6:	f002 fb13 	bl	6b00 <__lshift>
    44da:	4604      	mov	r4, r0
    44dc:	2800      	cmp	r0, #0
    44de:	f000 80a6 	beq.w	462e <_strtod_l+0x66e>
    44e2:	9912      	ldr	r1, [sp, #72]	; 0x48
    44e4:	4632      	mov	r2, r6
    44e6:	4640      	mov	r0, r8
    44e8:	f002 fba4 	bl	6c34 <__mdiff>
    44ec:	4682      	mov	sl, r0
    44ee:	2800      	cmp	r0, #0
    44f0:	f000 809d 	beq.w	462e <_strtod_l+0x66e>
    44f4:	2300      	movs	r3, #0
    44f6:	68c5      	ldr	r5, [r0, #12]
    44f8:	60c3      	str	r3, [r0, #12]
    44fa:	4621      	mov	r1, r4
    44fc:	f002 fb78 	bl	6bf0 <__mcmp>
    4500:	2800      	cmp	r0, #0
    4502:	f2c0 83c7 	blt.w	4c94 <_strtod_l+0xcd4>
    4506:	f000 8361 	beq.w	4bcc <_strtod_l+0xc0c>
    450a:	4621      	mov	r1, r4
    450c:	4650      	mov	r0, sl
    450e:	f002 fd39 	bl	6f84 <__ratio>
    4512:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
    4516:	eeb4 0bc7 	vcmpe.f64	d0, d7
    451a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    451e:	d846      	bhi.n	45ae <_strtod_l+0x5ee>
    4520:	2d00      	cmp	r5, #0
    4522:	f000 80cb 	beq.w	46bc <_strtod_l+0x6fc>
    4526:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
    452a:	9805      	ldr	r0, [sp, #20]
    452c:	4b60      	ldr	r3, [pc, #384]	; (46b0 <_strtod_l+0x6f0>)
    452e:	2200      	movs	r2, #0
    4530:	4960      	ldr	r1, [pc, #384]	; (46b4 <_strtod_l+0x6f4>)
    4532:	f8df c184 	ldr.w	ip, [pc, #388]	; 46b8 <_strtod_l+0x6f8>
    4536:	ea00 0701 	and.w	r7, r0, r1
    453a:	4567      	cmp	r7, ip
    453c:	f000 80d4 	beq.w	46e8 <_strtod_l+0x728>
    4540:	9908      	ldr	r1, [sp, #32]
    4542:	b159      	cbz	r1, 455c <_strtod_l+0x59c>
    4544:	f1b7 6fd4 	cmp.w	r7, #111149056	; 0x6a00000
    4548:	d808      	bhi.n	455c <_strtod_l+0x59c>
    454a:	eeb4 9bcb 	vcmpe.f64	d9, d11
    454e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4552:	f240 8156 	bls.w	4802 <_strtod_l+0x842>
    4556:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
    455a:	1bcb      	subs	r3, r1, r7
    455c:	eeb0 0b48 	vmov.f64	d0, d8
    4560:	ec43 2b1a 	vmov	d10, r2, r3
    4564:	f002 fc10 	bl	6d88 <__ulp>
    4568:	eeaa 8b00 	vfma.f64	d8, d10, d0
    456c:	ed8d 8b04 	vstr	d8, [sp, #16]
    4570:	ee18 3a90 	vmov	r3, s17
    4574:	9a08      	ldr	r2, [sp, #32]
    4576:	b922      	cbnz	r2, 4582 <_strtod_l+0x5c2>
    4578:	4a4e      	ldr	r2, [pc, #312]	; (46b4 <_strtod_l+0x6f4>)
    457a:	401a      	ands	r2, r3
    457c:	4297      	cmp	r7, r2
    457e:	f000 80e4 	beq.w	474a <_strtod_l+0x78a>
    4582:	9912      	ldr	r1, [sp, #72]	; 0x48
    4584:	4640      	mov	r0, r8
    4586:	f002 f87b 	bl	6680 <_Bfree>
    458a:	4631      	mov	r1, r6
    458c:	4640      	mov	r0, r8
    458e:	f002 f877 	bl	6680 <_Bfree>
    4592:	4621      	mov	r1, r4
    4594:	4640      	mov	r0, r8
    4596:	f002 f873 	bl	6680 <_Bfree>
    459a:	4651      	mov	r1, sl
    459c:	4640      	mov	r0, r8
    459e:	f002 f86f 	bl	6680 <_Bfree>
    45a2:	e72d      	b.n	4400 <_strtod_l+0x440>
    45a4:	2301      	movs	r3, #1
    45a6:	2100      	movs	r1, #0
    45a8:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
    45ac:	e76e      	b.n	448c <_strtod_l+0x4cc>
    45ae:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
    45b2:	ee20 9b09 	vmul.f64	d9, d0, d9
    45b6:	2d00      	cmp	r5, #0
    45b8:	d15f      	bne.n	467a <_strtod_l+0x6ba>
    45ba:	eeb1 7b49 	vneg.f64	d7, d9
    45be:	9805      	ldr	r0, [sp, #20]
    45c0:	ec53 2b17 	vmov	r2, r3, d7
    45c4:	e7b4      	b.n	4530 <_strtod_l+0x570>
    45c6:	4621      	mov	r1, r4
    45c8:	461a      	mov	r2, r3
    45ca:	4640      	mov	r0, r8
    45cc:	f002 fa38 	bl	6a40 <__pow5mult>
    45d0:	4604      	mov	r4, r0
    45d2:	b360      	cbz	r0, 462e <_strtod_l+0x66e>
    45d4:	4601      	mov	r1, r0
    45d6:	9a12      	ldr	r2, [sp, #72]	; 0x48
    45d8:	4640      	mov	r0, r8
    45da:	f002 f983 	bl	68e4 <__multiply>
    45de:	b330      	cbz	r0, 462e <_strtod_l+0x66e>
    45e0:	900f      	str	r0, [sp, #60]	; 0x3c
    45e2:	9912      	ldr	r1, [sp, #72]	; 0x48
    45e4:	4640      	mov	r0, r8
    45e6:	f002 f84b 	bl	6680 <_Bfree>
    45ea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    45ec:	9212      	str	r2, [sp, #72]	; 0x48
    45ee:	2d00      	cmp	r5, #0
    45f0:	f77f af64 	ble.w	44bc <_strtod_l+0x4fc>
    45f4:	9912      	ldr	r1, [sp, #72]	; 0x48
    45f6:	462a      	mov	r2, r5
    45f8:	4640      	mov	r0, r8
    45fa:	f002 fa81 	bl	6b00 <__lshift>
    45fe:	9012      	str	r0, [sp, #72]	; 0x48
    4600:	2800      	cmp	r0, #0
    4602:	f47f af5b 	bne.w	44bc <_strtod_l+0x4fc>
    4606:	2322      	movs	r3, #34	; 0x22
    4608:	ed9f 8b25 	vldr	d8, [pc, #148]	; 46a0 <_strtod_l+0x6e0>
    460c:	f8c8 3000 	str.w	r3, [r8]
    4610:	e0bc      	b.n	478c <_strtod_l+0x7cc>
    4612:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4614:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
    4618:	1a9f      	subs	r7, r3, r2
    461a:	e720      	b.n	445e <_strtod_l+0x49e>
    461c:	4631      	mov	r1, r6
    461e:	463a      	mov	r2, r7
    4620:	4640      	mov	r0, r8
    4622:	f002 fa6d 	bl	6b00 <__lshift>
    4626:	4606      	mov	r6, r0
    4628:	2800      	cmp	r0, #0
    462a:	f47f af4e 	bne.w	44ca <_strtod_l+0x50a>
    462e:	9812      	ldr	r0, [sp, #72]	; 0x48
    4630:	e7e9      	b.n	4606 <_strtod_l+0x646>
    4632:	4631      	mov	r1, r6
    4634:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4636:	4640      	mov	r0, r8
    4638:	f002 fa02 	bl	6a40 <__pow5mult>
    463c:	4606      	mov	r6, r0
    463e:	2800      	cmp	r0, #0
    4640:	f47f af40 	bne.w	44c4 <_strtod_l+0x504>
    4644:	e7f3      	b.n	462e <_strtod_l+0x66e>
    4646:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
    464a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
    464e:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
    4652:	2101      	movs	r1, #1
    4654:	32e2      	adds	r2, #226	; 0xe2
    4656:	fa01 f302 	lsl.w	r3, r1, r2
    465a:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
    465e:	e715      	b.n	448c <_strtod_l+0x4cc>
    4660:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
    4664:	f04f 0b00 	mov.w	fp, #0
    4668:	e5c0      	b.n	41ec <_strtod_l+0x22c>
    466a:	2301      	movs	r3, #1
    466c:	930a      	str	r3, [sp, #40]	; 0x28
    466e:	f10a 0302 	add.w	r3, sl, #2
    4672:	9311      	str	r3, [sp, #68]	; 0x44
    4674:	f89a 4002 	ldrb.w	r4, [sl, #2]
    4678:	e602      	b.n	4280 <_strtod_l+0x2c0>
    467a:	eeb0 7b49 	vmov.f64	d7, d9
    467e:	e79e      	b.n	45be <_strtod_l+0x5fe>
    4680:	94a03595 	.word	0x94a03595
    4684:	3fcfffff 	.word	0x3fcfffff
    4688:	94a03595 	.word	0x94a03595
    468c:	3fdfffff 	.word	0x3fdfffff
    4690:	35afe535 	.word	0x35afe535
    4694:	3fe00000 	.word	0x3fe00000
    4698:	ffc00000 	.word	0xffc00000
    469c:	41dfffff 	.word	0x41dfffff
    46a0:	00000000 	.word	0x00000000
    46a4:	7ff00000 	.word	0x7ff00000
    46a8:	200002a8 	.word	0x200002a8
    46ac:	fffffc02 	.word	0xfffffc02
    46b0:	3ff00000 	.word	0x3ff00000
    46b4:	7ff00000 	.word	0x7ff00000
    46b8:	7fe00000 	.word	0x7fe00000
    46bc:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    46c0:	2900      	cmp	r1, #0
    46c2:	f000 8085 	beq.w	47d0 <_strtod_l+0x810>
    46c6:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    46ca:	2901      	cmp	r1, #1
    46cc:	f000 81d8 	beq.w	4a80 <_strtod_l+0xac0>
    46d0:	4610      	mov	r0, r2
    46d2:	4bb7      	ldr	r3, [pc, #732]	; (49b0 <_strtod_l+0x9f0>)
    46d4:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
    46d8:	2200      	movs	r2, #0
    46da:	e729      	b.n	4530 <_strtod_l+0x570>
    46dc:	2c65      	cmp	r4, #101	; 0x65
    46de:	f04f 0c01 	mov.w	ip, #1
    46e2:	f43f adbe 	beq.w	4262 <_strtod_l+0x2a2>
    46e6:	e54c      	b.n	4182 <_strtod_l+0x1c2>
    46e8:	ec43 2b1a 	vmov	d10, r2, r3
    46ec:	f1a0 7354 	sub.w	r3, r0, #55574528	; 0x3500000
    46f0:	9305      	str	r3, [sp, #20]
    46f2:	ed9d fb04 	vldr	d15, [sp, #16]
    46f6:	eeb0 0b4f 	vmov.f64	d0, d15
    46fa:	f002 fb45 	bl	6d88 <__ulp>
    46fe:	49ad      	ldr	r1, [pc, #692]	; (49b4 <_strtod_l+0x9f4>)
    4700:	eeaa fb00 	vfma.f64	d15, d10, d0
    4704:	ee1f 3a90 	vmov	r3, s31
    4708:	4aab      	ldr	r2, [pc, #684]	; (49b8 <_strtod_l+0x9f8>)
    470a:	4019      	ands	r1, r3
    470c:	4291      	cmp	r1, r2
    470e:	ed8d fb04 	vstr	d15, [sp, #16]
    4712:	d972      	bls.n	47fa <_strtod_l+0x83a>
    4714:	4ba9      	ldr	r3, [pc, #676]	; (49bc <_strtod_l+0x9fc>)
    4716:	ee18 2a90 	vmov	r2, s17
    471a:	429a      	cmp	r2, r3
    471c:	d103      	bne.n	4726 <_strtod_l+0x766>
    471e:	ee18 3a10 	vmov	r3, s16
    4722:	3301      	adds	r3, #1
    4724:	d083      	beq.n	462e <_strtod_l+0x66e>
    4726:	4aa5      	ldr	r2, [pc, #660]	; (49bc <_strtod_l+0x9fc>)
    4728:	f04f 33ff 	mov.w	r3, #4294967295
    472c:	e9cd 3204 	strd	r3, r2, [sp, #16]
    4730:	e727      	b.n	4582 <_strtod_l+0x5c2>
    4732:	2300      	movs	r3, #0
    4734:	930a      	str	r3, [sp, #40]	; 0x28
    4736:	e79a      	b.n	466e <_strtod_l+0x6ae>
    4738:	2c65      	cmp	r4, #101	; 0x65
    473a:	f000 80d0 	beq.w	48de <_strtod_l+0x91e>
    473e:	2c45      	cmp	r4, #69	; 0x45
    4740:	f000 80cd 	beq.w	48de <_strtod_l+0x91e>
    4744:	f04f 0c01 	mov.w	ip, #1
    4748:	e5d1      	b.n	42ee <_strtod_l+0x32e>
    474a:	ec51 0b19 	vmov	r0, r1, d9
    474e:	930d      	str	r3, [sp, #52]	; 0x34
    4750:	f009 fb44 	bl	dddc <__aeabi_d2lz>
    4754:	f009 fb14 	bl	dd80 <__aeabi_l2d>
    4758:	9b04      	ldr	r3, [sp, #16]
    475a:	431d      	orrs	r5, r3
    475c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    475e:	ec41 0b17 	vmov	d7, r0, r1
    4762:	f3c3 0313 	ubfx	r3, r3, #0, #20
    4766:	431d      	orrs	r5, r3
    4768:	ee39 9b47 	vsub.f64	d9, d9, d7
    476c:	f000 80a0 	beq.w	48b0 <_strtod_l+0x8f0>
    4770:	eeb4 9bcc 	vcmpe.f64	d9, d12
    4774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4778:	d405      	bmi.n	4786 <_strtod_l+0x7c6>
    477a:	eeb4 9bcd 	vcmpe.f64	d9, d13
    477e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4782:	f77f aefe 	ble.w	4582 <_strtod_l+0x5c2>
    4786:	ed9d 8b04 	vldr	d8, [sp, #16]
    478a:	9812      	ldr	r0, [sp, #72]	; 0x48
    478c:	4601      	mov	r1, r0
    478e:	4640      	mov	r0, r8
    4790:	f001 ff76 	bl	6680 <_Bfree>
    4794:	4631      	mov	r1, r6
    4796:	4640      	mov	r0, r8
    4798:	f001 ff72 	bl	6680 <_Bfree>
    479c:	4621      	mov	r1, r4
    479e:	4640      	mov	r0, r8
    47a0:	f001 ff6e 	bl	6680 <_Bfree>
    47a4:	4649      	mov	r1, r9
    47a6:	4640      	mov	r0, r8
    47a8:	f001 ff6a 	bl	6680 <_Bfree>
    47ac:	4651      	mov	r1, sl
    47ae:	4640      	mov	r0, r8
    47b0:	f001 ff66 	bl	6680 <_Bfree>
    47b4:	e5c1      	b.n	433a <_strtod_l+0x37a>
    47b6:	2201      	movs	r2, #1
    47b8:	9209      	str	r2, [sp, #36]	; 0x24
    47ba:	1c79      	adds	r1, r7, #1
    47bc:	9111      	str	r1, [sp, #68]	; 0x44
    47be:	787a      	ldrb	r2, [r7, #1]
    47c0:	2a00      	cmp	r2, #0
    47c2:	f43f ace5 	beq.w	4190 <_strtod_l+0x1d0>
    47c6:	460f      	mov	r7, r1
    47c8:	e470      	b.n	40ac <_strtod_l+0xec>
    47ca:	2200      	movs	r2, #0
    47cc:	9209      	str	r2, [sp, #36]	; 0x24
    47ce:	e7f4      	b.n	47ba <_strtod_l+0x7fa>
    47d0:	f3c2 0313 	ubfx	r3, r2, #0, #20
    47d4:	4610      	mov	r0, r2
    47d6:	2b00      	cmp	r3, #0
    47d8:	f47f af7b 	bne.w	46d2 <_strtod_l+0x712>
    47dc:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    47e0:	eeb4 0bc7 	vcmpe.f64	d0, d7
    47e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    47e8:	f100 81d3 	bmi.w	4b92 <_strtod_l+0xbd2>
    47ec:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
    47f0:	ee20 9b09 	vmul.f64	d9, d0, d9
    47f4:	eeb1 7b49 	vneg.f64	d7, d9
    47f8:	e6e2      	b.n	45c0 <_strtod_l+0x600>
    47fa:	f103 7354 	add.w	r3, r3, #55574528	; 0x3500000
    47fe:	9305      	str	r3, [sp, #20]
    4800:	e6b8      	b.n	4574 <_strtod_l+0x5b4>
    4802:	eebc 9bc9 	vcvt.u32.f64	s18, d9
    4806:	ee19 3a10 	vmov	r3, s18
    480a:	2b01      	cmp	r3, #1
    480c:	bf38      	it	cc
    480e:	2301      	movcc	r3, #1
    4810:	ee09 3a10 	vmov	s18, r3
    4814:	eeb8 9b49 	vcvt.f64.u32	d9, s18
    4818:	2d00      	cmp	r5, #0
    481a:	f040 813e 	bne.w	4a9a <_strtod_l+0xada>
    481e:	eeb1 7b49 	vneg.f64	d7, d9
    4822:	ec53 2b17 	vmov	r2, r3, d7
    4826:	e696      	b.n	4556 <_strtod_l+0x596>
    4828:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
    482c:	f300 80b2 	bgt.w	4994 <_strtod_l+0x9d4>
    4830:	2a10      	cmp	r2, #16
    4832:	ea4f 1322 	mov.w	r3, r2, asr #4
    4836:	f340 8286 	ble.w	4d46 <_strtod_l+0xd86>
    483a:	4c61      	ldr	r4, [pc, #388]	; (49c0 <_strtod_l+0xa00>)
    483c:	ed9d 7b04 	vldr	d7, [sp, #16]
    4840:	2000      	movs	r0, #0
    4842:	4622      	mov	r2, r4
    4844:	4601      	mov	r1, r0
    4846:	f013 0f01 	tst.w	r3, #1
    484a:	f101 0101 	add.w	r1, r1, #1
    484e:	ea4f 0363 	mov.w	r3, r3, asr #1
    4852:	d004      	beq.n	485e <_strtod_l+0x89e>
    4854:	ed92 6b00 	vldr	d6, [r2]
    4858:	2001      	movs	r0, #1
    485a:	ee27 7b06 	vmul.f64	d7, d7, d6
    485e:	2b01      	cmp	r3, #1
    4860:	f102 0208 	add.w	r2, r2, #8
    4864:	d1ef      	bne.n	4846 <_strtod_l+0x886>
    4866:	b108      	cbz	r0, 486c <_strtod_l+0x8ac>
    4868:	ed8d 7b04 	vstr	d7, [sp, #16]
    486c:	9b05      	ldr	r3, [sp, #20]
    486e:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
    4872:	9305      	str	r3, [sp, #20]
    4874:	eb04 04c1 	add.w	r4, r4, r1, lsl #3
    4878:	ed9d 6b04 	vldr	d6, [sp, #16]
    487c:	ed94 7b00 	vldr	d7, [r4]
    4880:	4b4c      	ldr	r3, [pc, #304]	; (49b4 <_strtod_l+0x9f4>)
    4882:	ee27 7b06 	vmul.f64	d7, d7, d6
    4886:	ee17 2a90 	vmov	r2, s15
    488a:	494e      	ldr	r1, [pc, #312]	; (49c4 <_strtod_l+0xa04>)
    488c:	4013      	ands	r3, r2
    488e:	428b      	cmp	r3, r1
    4890:	ed8d 7b04 	vstr	d7, [sp, #16]
    4894:	d87e      	bhi.n	4994 <_strtod_l+0x9d4>
    4896:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
    489a:	428b      	cmp	r3, r1
    489c:	f240 81d6 	bls.w	4c4c <_strtod_l+0xc8c>
    48a0:	4c46      	ldr	r4, [pc, #280]	; (49bc <_strtod_l+0x9fc>)
    48a2:	f04f 33ff 	mov.w	r3, #4294967295
    48a6:	e9cd 3404 	strd	r3, r4, [sp, #16]
    48aa:	2300      	movs	r3, #0
    48ac:	9308      	str	r3, [sp, #32]
    48ae:	e585      	b.n	43bc <_strtod_l+0x3fc>
    48b0:	eeb4 9bce 	vcmpe.f64	d9, d14
    48b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    48b8:	f57f ae63 	bpl.w	4582 <_strtod_l+0x5c2>
    48bc:	e763      	b.n	4786 <_strtod_l+0x7c6>
    48be:	3216      	adds	r2, #22
    48c0:	f6ff ad62 	blt.w	4388 <_strtod_l+0x3c8>
    48c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    48c6:	eba3 0b0b 	sub.w	fp, r3, fp
    48ca:	4b3f      	ldr	r3, [pc, #252]	; (49c8 <_strtod_l+0xa08>)
    48cc:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
    48d0:	ed93 7b00 	vldr	d7, [r3]
    48d4:	ed9d 6b04 	vldr	d6, [sp, #16]
    48d8:	ee86 8b07 	vdiv.f64	d8, d6, d7
    48dc:	e52d      	b.n	433a <_strtod_l+0x37a>
    48de:	f04f 0e00 	mov.w	lr, #0
    48e2:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    48e6:	f04f 0c01 	mov.w	ip, #1
    48ea:	e44e      	b.n	418a <_strtod_l+0x1ca>
    48ec:	2c6e      	cmp	r4, #110	; 0x6e
    48ee:	f43f ad10 	beq.w	4312 <_strtod_l+0x352>
    48f2:	e44d      	b.n	4190 <_strtod_l+0x1d0>
    48f4:	f43f ad60 	beq.w	43b8 <_strtod_l+0x3f8>
    48f8:	425b      	negs	r3, r3
    48fa:	f013 010f 	ands.w	r1, r3, #15
    48fe:	d00a      	beq.n	4916 <_strtod_l+0x956>
    4900:	4a31      	ldr	r2, [pc, #196]	; (49c8 <_strtod_l+0xa08>)
    4902:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    4906:	ed9d 6b04 	vldr	d6, [sp, #16]
    490a:	ed92 7b00 	vldr	d7, [r2]
    490e:	ee86 7b07 	vdiv.f64	d7, d6, d7
    4912:	ed8d 7b04 	vstr	d7, [sp, #16]
    4916:	111b      	asrs	r3, r3, #4
    4918:	f43f ad4e 	beq.w	43b8 <_strtod_l+0x3f8>
    491c:	2b1f      	cmp	r3, #31
    491e:	dc33      	bgt.n	4988 <_strtod_l+0x9c8>
    4920:	f013 0210 	ands.w	r2, r3, #16
    4924:	bf18      	it	ne
    4926:	226a      	movne	r2, #106	; 0x6a
    4928:	ed9d 7b04 	vldr	d7, [sp, #16]
    492c:	9208      	str	r2, [sp, #32]
    492e:	4a27      	ldr	r2, [pc, #156]	; (49cc <_strtod_l+0xa0c>)
    4930:	2100      	movs	r1, #0
    4932:	07d8      	lsls	r0, r3, #31
    4934:	d504      	bpl.n	4940 <_strtod_l+0x980>
    4936:	ed92 6b00 	vldr	d6, [r2]
    493a:	2101      	movs	r1, #1
    493c:	ee27 7b06 	vmul.f64	d7, d7, d6
    4940:	105b      	asrs	r3, r3, #1
    4942:	f102 0208 	add.w	r2, r2, #8
    4946:	d1f4      	bne.n	4932 <_strtod_l+0x972>
    4948:	b109      	cbz	r1, 494e <_strtod_l+0x98e>
    494a:	ed8d 7b04 	vstr	d7, [sp, #16]
    494e:	9b08      	ldr	r3, [sp, #32]
    4950:	b193      	cbz	r3, 4978 <_strtod_l+0x9b8>
    4952:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    4956:	f3c1 520a 	ubfx	r2, r1, #20, #11
    495a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
    495e:	2b00      	cmp	r3, #0
    4960:	dd0a      	ble.n	4978 <_strtod_l+0x9b8>
    4962:	2b1f      	cmp	r3, #31
    4964:	f340 822f 	ble.w	4dc6 <_strtod_l+0xe06>
    4968:	2000      	movs	r0, #0
    496a:	2b34      	cmp	r3, #52	; 0x34
    496c:	9004      	str	r0, [sp, #16]
    496e:	f340 8240 	ble.w	4df2 <_strtod_l+0xe32>
    4972:	f04f 735c 	mov.w	r3, #57671680	; 0x3700000
    4976:	9305      	str	r3, [sp, #20]
    4978:	ed9d 7b04 	vldr	d7, [sp, #16]
    497c:	eeb5 7b40 	vcmp.f64	d7, #0.0
    4980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4984:	f47f ad1a 	bne.w	43bc <_strtod_l+0x3fc>
    4988:	2322      	movs	r3, #34	; 0x22
    498a:	ed9f 8b05 	vldr	d8, [pc, #20]	; 49a0 <_strtod_l+0x9e0>
    498e:	f8c8 3000 	str.w	r3, [r8]
    4992:	e4d2      	b.n	433a <_strtod_l+0x37a>
    4994:	2322      	movs	r3, #34	; 0x22
    4996:	ed9f 8b04 	vldr	d8, [pc, #16]	; 49a8 <_strtod_l+0x9e8>
    499a:	f8c8 3000 	str.w	r3, [r8]
    499e:	e4cc      	b.n	433a <_strtod_l+0x37a>
	...
    49ac:	7ff00000 	.word	0x7ff00000
    49b0:	bff00000 	.word	0xbff00000
    49b4:	7ff00000 	.word	0x7ff00000
    49b8:	7c9fffff 	.word	0x7c9fffff
    49bc:	7fefffff 	.word	0x7fefffff
    49c0:	20000280 	.word	0x20000280
    49c4:	7ca00000 	.word	0x7ca00000
    49c8:	200002a8 	.word	0x200002a8
    49cc:	20000370 	.word	0x20000370
    49d0:	9302      	str	r3, [sp, #8]
    49d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    49d4:	9301      	str	r3, [sp, #4]
    49d6:	ab12      	add	r3, sp, #72	; 0x48
    49d8:	9300      	str	r3, [sp, #0]
    49da:	4aa7      	ldr	r2, [pc, #668]	; (4c78 <_strtod_l+0xcb8>)
    49dc:	ab13      	add	r3, sp, #76	; 0x4c
    49de:	a911      	add	r1, sp, #68	; 0x44
    49e0:	4640      	mov	r0, r8
    49e2:	f001 fa53 	bl	5e8c <__gethex>
    49e6:	f010 050f 	ands.w	r5, r0, #15
    49ea:	4604      	mov	r4, r0
    49ec:	f43f aca3 	beq.w	4336 <_strtod_l+0x376>
    49f0:	2d06      	cmp	r5, #6
    49f2:	d174      	bne.n	4ade <_strtod_l+0xb1e>
    49f4:	9b07      	ldr	r3, [sp, #28]
    49f6:	ed9f 8b9a 	vldr	d8, [pc, #616]	; 4c60 <_strtod_l+0xca0>
    49fa:	3701      	adds	r7, #1
    49fc:	2b00      	cmp	r3, #0
    49fe:	f43f abce 	beq.w	419e <_strtod_l+0x1de>
    4a02:	601f      	str	r7, [r3, #0]
    4a04:	f7ff bbcb 	b.w	419e <_strtod_l+0x1de>
    4a08:	ed9d 8b04 	vldr	d8, [sp, #16]
    4a0c:	e495      	b.n	433a <_strtod_l+0x37a>
    4a0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4a10:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
    4a14:	4403      	add	r3, r0
    4a16:	930b      	str	r3, [sp, #44]	; 0x2c
    4a18:	2801      	cmp	r0, #1
    4a1a:	f105 0301 	add.w	r3, r5, #1
    4a1e:	461a      	mov	r2, r3
    4a20:	d014      	beq.n	4a4c <_strtod_l+0xa8c>
    4a22:	4428      	add	r0, r5
    4a24:	1e44      	subs	r4, r0, #1
    4a26:	e003      	b.n	4a30 <_strtod_l+0xa70>
    4a28:	0046      	lsls	r6, r0, #1
    4a2a:	429c      	cmp	r4, r3
    4a2c:	d00d      	beq.n	4a4a <_strtod_l+0xa8a>
    4a2e:	3301      	adds	r3, #1
    4a30:	462a      	mov	r2, r5
    4a32:	2a08      	cmp	r2, #8
    4a34:	461d      	mov	r5, r3
    4a36:	eb06 0086 	add.w	r0, r6, r6, lsl #2
    4a3a:	d9f5      	bls.n	4a28 <_strtod_l+0xa68>
    4a3c:	2b10      	cmp	r3, #16
    4a3e:	bfdc      	itt	le
    4a40:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
    4a44:	ea4f 0949 	movle.w	r9, r9, lsl #1
    4a48:	e7ef      	b.n	4a2a <_strtod_l+0xa6a>
    4a4a:	3202      	adds	r2, #2
    4a4c:	2d08      	cmp	r5, #8
    4a4e:	dc3c      	bgt.n	4aca <_strtod_l+0xb0a>
    4a50:	4615      	mov	r5, r2
    4a52:	f7ff bb79 	b.w	4148 <_strtod_l+0x188>
    4a56:	4989      	ldr	r1, [pc, #548]	; (4c7c <_strtod_l+0xcbc>)
    4a58:	2201      	movs	r2, #1
    4a5a:	4638      	mov	r0, r7
    4a5c:	f000 fd62 	bl	5524 <strncmp>
    4a60:	2800      	cmp	r0, #0
    4a62:	f000 8082 	beq.w	4b6a <_strtod_l+0xbaa>
    4a66:	f04f 0e00 	mov.w	lr, #0
    4a6a:	46f1      	mov	r9, lr
    4a6c:	4676      	mov	r6, lr
    4a6e:	4675      	mov	r5, lr
    4a70:	f7ff bbb5 	b.w	41de <_strtod_l+0x21e>
    4a74:	f644 631f 	movw	r3, #19999	; 0x4e1f
    4a78:	459b      	cmp	fp, r3
    4a7a:	bfa8      	it	ge
    4a7c:	469b      	movge	fp, r3
    4a7e:	e42f      	b.n	42e0 <_strtod_l+0x320>
    4a80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    4a84:	4618      	mov	r0, r3
    4a86:	2b00      	cmp	r3, #0
    4a88:	f47f ae23 	bne.w	46d2 <_strtod_l+0x712>
    4a8c:	2322      	movs	r3, #34	; 0x22
    4a8e:	ed9f 8b74 	vldr	d8, [pc, #464]	; 4c60 <_strtod_l+0xca0>
    4a92:	9812      	ldr	r0, [sp, #72]	; 0x48
    4a94:	f8c8 3000 	str.w	r3, [r8]
    4a98:	e678      	b.n	478c <_strtod_l+0x7cc>
    4a9a:	eeb0 7b49 	vmov.f64	d7, d9
    4a9e:	e6c0      	b.n	4822 <_strtod_l+0x862>
    4aa0:	4977      	ldr	r1, [pc, #476]	; (4c80 <_strtod_l+0xcc0>)
    4aa2:	a811      	add	r0, sp, #68	; 0x44
    4aa4:	f001 fcbc 	bl	6420 <__match>
    4aa8:	2800      	cmp	r0, #0
    4aaa:	f43f ab71 	beq.w	4190 <_strtod_l+0x1d0>
    4aae:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4ab0:	4974      	ldr	r1, [pc, #464]	; (4c84 <_strtod_l+0xcc4>)
    4ab2:	3b01      	subs	r3, #1
    4ab4:	a811      	add	r0, sp, #68	; 0x44
    4ab6:	9311      	str	r3, [sp, #68]	; 0x44
    4ab8:	f001 fcb2 	bl	6420 <__match>
    4abc:	b910      	cbnz	r0, 4ac4 <_strtod_l+0xb04>
    4abe:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4ac0:	3301      	adds	r3, #1
    4ac2:	9311      	str	r3, [sp, #68]	; 0x44
    4ac4:	ed9f 8b68 	vldr	d8, [pc, #416]	; 4c68 <_strtod_l+0xca8>
    4ac8:	e437      	b.n	433a <_strtod_l+0x37a>
    4aca:	2a10      	cmp	r2, #16
    4acc:	bfdc      	itt	le
    4ace:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
    4ad2:	eb01 0949 	addle.w	r9, r1, r9, lsl #1
    4ad6:	4615      	mov	r5, r2
    4ad8:	2000      	movs	r0, #0
    4ada:	f7ff bb3a 	b.w	4152 <_strtod_l+0x192>
    4ade:	9a12      	ldr	r2, [sp, #72]	; 0x48
    4ae0:	b13a      	cbz	r2, 4af2 <_strtod_l+0xb32>
    4ae2:	2135      	movs	r1, #53	; 0x35
    4ae4:	a814      	add	r0, sp, #80	; 0x50
    4ae6:	f002 fa7f 	bl	6fe8 <__copybits>
    4aea:	9912      	ldr	r1, [sp, #72]	; 0x48
    4aec:	4640      	mov	r0, r8
    4aee:	f001 fdc7 	bl	6680 <_Bfree>
    4af2:	3d01      	subs	r5, #1
    4af4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    4af6:	2d04      	cmp	r5, #4
    4af8:	f200 818f 	bhi.w	4e1a <_strtod_l+0xe5a>
    4afc:	e8df f005 	tbb	[pc, r5]
    4b00:	1f2a2d03 	.word	0x1f2a2d03
    4b04:	03          	.byte	0x03
    4b05:	00          	.byte	0x00
    4b06:	9a14      	ldr	r2, [sp, #80]	; 0x50
    4b08:	9204      	str	r2, [sp, #16]
    4b0a:	f203 4233 	addw	r2, r3, #1075	; 0x433
    4b0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    4b10:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
    4b14:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
    4b18:	9305      	str	r3, [sp, #20]
    4b1a:	05e5      	lsls	r5, r4, #23
    4b1c:	d502      	bpl.n	4b24 <_strtod_l+0xb64>
    4b1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    4b22:	9305      	str	r3, [sp, #20]
    4b24:	4a58      	ldr	r2, [pc, #352]	; (4c88 <_strtod_l+0xcc8>)
    4b26:	401a      	ands	r2, r3
    4b28:	ed9d 8b04 	vldr	d8, [sp, #16]
    4b2c:	2a00      	cmp	r2, #0
    4b2e:	f47f ac04 	bne.w	433a <_strtod_l+0x37a>
    4b32:	f000 fddb 	bl	56ec <__errno>
    4b36:	2322      	movs	r3, #34	; 0x22
    4b38:	6003      	str	r3, [r0, #0]
    4b3a:	f7ff bbfe 	b.w	433a <_strtod_l+0x37a>
    4b3e:	f04f 33ff 	mov.w	r3, #4294967295
    4b42:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    4b46:	e9cd 3604 	strd	r3, r6, [sp, #16]
    4b4a:	05e3      	lsls	r3, r4, #23
    4b4c:	f57f af5c 	bpl.w	4a08 <_strtod_l+0xa48>
    4b50:	9b05      	ldr	r3, [sp, #20]
    4b52:	e7e4      	b.n	4b1e <_strtod_l+0xb5e>
    4b54:	4b4c      	ldr	r3, [pc, #304]	; (4c88 <_strtod_l+0xcc8>)
    4b56:	9305      	str	r3, [sp, #20]
    4b58:	e7f7      	b.n	4b4a <_strtod_l+0xb8a>
    4b5a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    4b5c:	9304      	str	r3, [sp, #16]
    4b5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    4b60:	9305      	str	r3, [sp, #20]
    4b62:	e7da      	b.n	4b1a <_strtod_l+0xb5a>
    4b64:	2000      	movs	r0, #0
    4b66:	f7ff bae1 	b.w	412c <_strtod_l+0x16c>
    4b6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4b6c:	461a      	mov	r2, r3
    4b6e:	3301      	adds	r3, #1
    4b70:	9311      	str	r3, [sp, #68]	; 0x44
    4b72:	7854      	ldrb	r4, [r2, #1]
    4b74:	4606      	mov	r6, r0
    4b76:	4681      	mov	r9, r0
    4b78:	f7ff bacd 	b.w	4116 <_strtod_l+0x156>
    4b7c:	4b43      	ldr	r3, [pc, #268]	; (4c8c <_strtod_l+0xccc>)
    4b7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    4b82:	ed93 8b00 	vldr	d8, [r3]
    4b86:	ed9d 7b04 	vldr	d7, [sp, #16]
    4b8a:	ee28 8b07 	vmul.f64	d8, d8, d7
    4b8e:	f7ff bbd4 	b.w	433a <_strtod_l+0x37a>
    4b92:	eebe 7b00 	vmov.f64	d7, #224	; 0xbf000000 -0.5
    4b96:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
    4b9a:	e511      	b.n	45c0 <_strtod_l+0x600>
    4b9c:	46ae      	mov	lr, r5
    4b9e:	900b      	str	r0, [sp, #44]	; 0x2c
    4ba0:	f7ff badc 	b.w	415c <_strtod_l+0x19c>
    4ba4:	4b39      	ldr	r3, [pc, #228]	; (4c8c <_strtod_l+0xccc>)
    4ba6:	f1c5 050f 	rsb	r5, r5, #15
    4baa:	1b4a      	subs	r2, r1, r5
    4bac:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    4bb0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    4bb4:	ed95 8b00 	vldr	d8, [r5]
    4bb8:	ed93 7b00 	vldr	d7, [r3]
    4bbc:	ed9d 6b04 	vldr	d6, [sp, #16]
    4bc0:	ee28 8b06 	vmul.f64	d8, d8, d6
    4bc4:	ee28 8b07 	vmul.f64	d8, d8, d7
    4bc8:	f7ff bbb7 	b.w	433a <_strtod_l+0x37a>
    4bcc:	2d00      	cmp	r5, #0
    4bce:	f000 8095 	beq.w	4cfc <_strtod_l+0xd3c>
    4bd2:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
    4bd6:	4b2e      	ldr	r3, [pc, #184]	; (4c90 <_strtod_l+0xcd0>)
    4bd8:	f3cc 0113 	ubfx	r1, ip, #0, #20
    4bdc:	4299      	cmp	r1, r3
    4bde:	4662      	mov	r2, ip
    4be0:	f000 80d2 	beq.w	4d88 <_strtod_l+0xdc8>
    4be4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4be6:	2b00      	cmp	r3, #0
    4be8:	f000 80a5 	beq.w	4d36 <_strtod_l+0xd76>
    4bec:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    4bf0:	4213      	tst	r3, r2
    4bf2:	4617      	mov	r7, r2
    4bf4:	d01a      	beq.n	4c2c <_strtod_l+0xc6c>
    4bf6:	eeb0 0b48 	vmov.f64	d0, d8
    4bfa:	2d00      	cmp	r5, #0
    4bfc:	f000 80a6 	beq.w	4d4c <_strtod_l+0xd8c>
    4c00:	f002 f8c2 	bl	6d88 <__ulp>
    4c04:	9b08      	ldr	r3, [sp, #32]
    4c06:	b17b      	cbz	r3, 4c28 <_strtod_l+0xc68>
    4c08:	f3c7 530a 	ubfx	r3, r7, #20, #11
    4c0c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    4c10:	2b00      	cmp	r3, #0
    4c12:	dd09      	ble.n	4c28 <_strtod_l+0xc68>
    4c14:	051b      	lsls	r3, r3, #20
    4c16:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
    4c1a:	2000      	movs	r0, #0
    4c1c:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
    4c20:	ec41 0b17 	vmov	d7, r0, r1
    4c24:	ee20 0b07 	vmul.f64	d0, d0, d7
    4c28:	ee38 8b00 	vadd.f64	d8, d8, d0
    4c2c:	9b08      	ldr	r3, [sp, #32]
    4c2e:	b15b      	cbz	r3, 4c48 <_strtod_l+0xc88>
    4c30:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 4c70 <_strtod_l+0xcb0>
    4c34:	4b14      	ldr	r3, [pc, #80]	; (4c88 <_strtod_l+0xcc8>)
    4c36:	ee28 8b07 	vmul.f64	d8, d8, d7
    4c3a:	ee18 2a90 	vmov	r2, s17
    4c3e:	4013      	ands	r3, r2
    4c40:	b913      	cbnz	r3, 4c48 <_strtod_l+0xc88>
    4c42:	2322      	movs	r3, #34	; 0x22
    4c44:	f8c8 3000 	str.w	r3, [r8]
    4c48:	9812      	ldr	r0, [sp, #72]	; 0x48
    4c4a:	e59f      	b.n	478c <_strtod_l+0x7cc>
    4c4c:	f102 7354 	add.w	r3, r2, #55574528	; 0x3500000
    4c50:	9305      	str	r3, [sp, #20]
    4c52:	2300      	movs	r3, #0
    4c54:	9308      	str	r3, [sp, #32]
    4c56:	f7ff bbb1 	b.w	43bc <_strtod_l+0x3fc>
    4c5a:	bf00      	nop
    4c5c:	f3af 8000 	nop.w
	...
    4c6c:	7ff00000 	.word	0x7ff00000
    4c70:	00000000 	.word	0x00000000
    4c74:	39500000 	.word	0x39500000
    4c78:	200075d8 	.word	0x200075d8
    4c7c:	200007c8 	.word	0x200007c8
    4c80:	200007cc 	.word	0x200007cc
    4c84:	200007d0 	.word	0x200007d0
    4c88:	7ff00000 	.word	0x7ff00000
    4c8c:	200002a8 	.word	0x200002a8
    4c90:	000fffff 	.word	0x000fffff
    4c94:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    4c98:	430d      	orrs	r5, r1
    4c9a:	d1c7      	bne.n	4c2c <_strtod_l+0xc6c>
    4c9c:	f3c2 0313 	ubfx	r3, r2, #0, #20
    4ca0:	4617      	mov	r7, r2
    4ca2:	2b00      	cmp	r3, #0
    4ca4:	d1c2      	bne.n	4c2c <_strtod_l+0xc6c>
    4ca6:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
    4caa:	0d1b      	lsrs	r3, r3, #20
    4cac:	051b      	lsls	r3, r3, #20
    4cae:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    4cb2:	d9bb      	bls.n	4c2c <_strtod_l+0xc6c>
    4cb4:	f8da 3014 	ldr.w	r3, [sl, #20]
    4cb8:	b91b      	cbnz	r3, 4cc2 <_strtod_l+0xd02>
    4cba:	f8da 3010 	ldr.w	r3, [sl, #16]
    4cbe:	2b01      	cmp	r3, #1
    4cc0:	ddb4      	ble.n	4c2c <_strtod_l+0xc6c>
    4cc2:	4651      	mov	r1, sl
    4cc4:	2201      	movs	r2, #1
    4cc6:	4640      	mov	r0, r8
    4cc8:	f001 ff1a 	bl	6b00 <__lshift>
    4ccc:	4621      	mov	r1, r4
    4cce:	4682      	mov	sl, r0
    4cd0:	f001 ff8e 	bl	6bf0 <__mcmp>
    4cd4:	2800      	cmp	r0, #0
    4cd6:	dda9      	ble.n	4c2c <_strtod_l+0xc6c>
    4cd8:	9b08      	ldr	r3, [sp, #32]
    4cda:	2b00      	cmp	r3, #0
    4cdc:	d17e      	bne.n	4ddc <_strtod_l+0xe1c>
    4cde:	4b50      	ldr	r3, [pc, #320]	; (4e20 <_strtod_l+0xe60>)
    4ce0:	403b      	ands	r3, r7
    4ce2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
    4ce6:	ea6f 5313 	mvn.w	r3, r3, lsr #20
    4cea:	ea6f 5303 	mvn.w	r3, r3, lsl #20
    4cee:	9305      	str	r3, [sp, #20]
    4cf0:	f04f 33ff 	mov.w	r3, #4294967295
    4cf4:	9304      	str	r3, [sp, #16]
    4cf6:	ed9d 8b04 	vldr	d8, [sp, #16]
    4cfa:	e797      	b.n	4c2c <_strtod_l+0xc6c>
    4cfc:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    4d00:	f3c2 0313 	ubfx	r3, r2, #0, #20
    4d04:	430b      	orrs	r3, r1
    4d06:	4617      	mov	r7, r2
    4d08:	f47f af6c 	bne.w	4be4 <_strtod_l+0xc24>
    4d0c:	e7e4      	b.n	4cd8 <_strtod_l+0xd18>
    4d0e:	4945      	ldr	r1, [pc, #276]	; (4e24 <_strtod_l+0xe64>)
    4d10:	a811      	add	r0, sp, #68	; 0x44
    4d12:	aa14      	add	r2, sp, #80	; 0x50
    4d14:	f001 fba0 	bl	6458 <__hexnan>
    4d18:	2805      	cmp	r0, #5
    4d1a:	f47f ab06 	bne.w	432a <_strtod_l+0x36a>
    4d1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    4d20:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
    4d24:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
    4d28:	9305      	str	r3, [sp, #20]
    4d2a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    4d2c:	9304      	str	r3, [sp, #16]
    4d2e:	ed9d 8b04 	vldr	d8, [sp, #16]
    4d32:	f7ff bb02 	b.w	433a <_strtod_l+0x37a>
    4d36:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    4d3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4d3c:	4203      	tst	r3, r0
    4d3e:	f43f af75 	beq.w	4c2c <_strtod_l+0xc6c>
    4d42:	460f      	mov	r7, r1
    4d44:	e757      	b.n	4bf6 <_strtod_l+0xc36>
    4d46:	4c38      	ldr	r4, [pc, #224]	; (4e28 <_strtod_l+0xe68>)
    4d48:	2100      	movs	r1, #0
    4d4a:	e58f      	b.n	486c <_strtod_l+0x8ac>
    4d4c:	f002 f81c 	bl	6d88 <__ulp>
    4d50:	9b08      	ldr	r3, [sp, #32]
    4d52:	2b00      	cmp	r3, #0
    4d54:	d055      	beq.n	4e02 <_strtod_l+0xe42>
    4d56:	f3c7 530a 	ubfx	r3, r7, #20, #11
    4d5a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    4d5e:	2b00      	cmp	r3, #0
    4d60:	dd09      	ble.n	4d76 <_strtod_l+0xdb6>
    4d62:	051b      	lsls	r3, r3, #20
    4d64:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
    4d68:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
    4d6c:	4628      	mov	r0, r5
    4d6e:	ec41 0b17 	vmov	d7, r0, r1
    4d72:	ee20 0b07 	vmul.f64	d0, d0, d7
    4d76:	ee38 8b40 	vsub.f64	d8, d8, d0
    4d7a:	eeb5 8b40 	vcmp.f64	d8, #0.0
    4d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4d82:	f47f af55 	bne.w	4c30 <_strtod_l+0xc70>
    4d86:	e681      	b.n	4a8c <_strtod_l+0xacc>
    4d88:	9b08      	ldr	r3, [sp, #32]
    4d8a:	9904      	ldr	r1, [sp, #16]
    4d8c:	b31b      	cbz	r3, 4dd6 <_strtod_l+0xe16>
    4d8e:	4b24      	ldr	r3, [pc, #144]	; (4e20 <_strtod_l+0xe60>)
    4d90:	4013      	ands	r3, r2
    4d92:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
    4d96:	d81e      	bhi.n	4dd6 <_strtod_l+0xe16>
    4d98:	0d1b      	lsrs	r3, r3, #20
    4d9a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    4d9e:	f04f 30ff 	mov.w	r0, #4294967295
    4da2:	fa00 f303 	lsl.w	r3, r0, r3
    4da6:	4299      	cmp	r1, r3
    4da8:	f47f af1c 	bne.w	4be4 <_strtod_l+0xc24>
    4dac:	4b1f      	ldr	r3, [pc, #124]	; (4e2c <_strtod_l+0xe6c>)
    4dae:	429a      	cmp	r2, r3
    4db0:	d030      	beq.n	4e14 <_strtod_l+0xe54>
    4db2:	4b1b      	ldr	r3, [pc, #108]	; (4e20 <_strtod_l+0xe60>)
    4db4:	4013      	ands	r3, r2
    4db6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
    4dba:	9305      	str	r3, [sp, #20]
    4dbc:	2300      	movs	r3, #0
    4dbe:	9304      	str	r3, [sp, #16]
    4dc0:	ed9d 8b04 	vldr	d8, [sp, #16]
    4dc4:	e732      	b.n	4c2c <_strtod_l+0xc6c>
    4dc6:	f04f 32ff 	mov.w	r2, #4294967295
    4dca:	fa02 f303 	lsl.w	r3, r2, r3
    4dce:	9a04      	ldr	r2, [sp, #16]
    4dd0:	401a      	ands	r2, r3
    4dd2:	9204      	str	r2, [sp, #16]
    4dd4:	e5d0      	b.n	4978 <_strtod_l+0x9b8>
    4dd6:	f04f 33ff 	mov.w	r3, #4294967295
    4dda:	e7e4      	b.n	4da6 <_strtod_l+0xde6>
    4ddc:	4b10      	ldr	r3, [pc, #64]	; (4e20 <_strtod_l+0xe60>)
    4dde:	403b      	ands	r3, r7
    4de0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    4de4:	f73f af7d 	bgt.w	4ce2 <_strtod_l+0xd22>
    4de8:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
    4dec:	f73f af20 	bgt.w	4c30 <_strtod_l+0xc70>
    4df0:	e64c      	b.n	4a8c <_strtod_l+0xacc>
    4df2:	f1c2 024b 	rsb	r2, r2, #75	; 0x4b
    4df6:	f04f 33ff 	mov.w	r3, #4294967295
    4dfa:	4093      	lsls	r3, r2
    4dfc:	400b      	ands	r3, r1
    4dfe:	9305      	str	r3, [sp, #20]
    4e00:	e5ba      	b.n	4978 <_strtod_l+0x9b8>
    4e02:	ee38 8b40 	vsub.f64	d8, d8, d0
    4e06:	eeb5 8b40 	vcmp.f64	d8, #0.0
    4e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4e0e:	f47f af1b 	bne.w	4c48 <_strtod_l+0xc88>
    4e12:	e63b      	b.n	4a8c <_strtod_l+0xacc>
    4e14:	3101      	adds	r1, #1
    4e16:	d1cc      	bne.n	4db2 <_strtod_l+0xdf2>
    4e18:	e409      	b.n	462e <_strtod_l+0x66e>
    4e1a:	2300      	movs	r3, #0
    4e1c:	e67d      	b.n	4b1a <_strtod_l+0xb5a>
    4e1e:	bf00      	nop
    4e20:	7ff00000 	.word	0x7ff00000
    4e24:	200075ec 	.word	0x200075ec
    4e28:	20000280 	.word	0x20000280
    4e2c:	7fefffff 	.word	0x7fefffff

00004e30 <_strtod_r>:
    4e30:	4b01      	ldr	r3, [pc, #4]	; (4e38 <_strtod_r+0x8>)
    4e32:	f7ff b8c5 	b.w	3fc0 <_strtod_l>
    4e36:	bf00      	nop
    4e38:	20007c5c 	.word	0x20007c5c

00004e3c <_strtol_l.constprop.0>:
    4e3c:	2b01      	cmp	r3, #1
    4e3e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4e42:	d040      	beq.n	4ec6 <_strtol_l.constprop.0+0x8a>
    4e44:	2b24      	cmp	r3, #36	; 0x24
    4e46:	4698      	mov	r8, r3
    4e48:	d83d      	bhi.n	4ec6 <_strtol_l.constprop.0+0x8a>
    4e4a:	4d4c      	ldr	r5, [pc, #304]	; (4f7c <_strtol_l.constprop.0+0x140>)
    4e4c:	468e      	mov	lr, r1
    4e4e:	4676      	mov	r6, lr
    4e50:	f81e bb01 	ldrb.w	fp, [lr], #1
    4e54:	f815 400b 	ldrb.w	r4, [r5, fp]
    4e58:	f014 0408 	ands.w	r4, r4, #8
    4e5c:	d1f7      	bne.n	4e4e <_strtol_l.constprop.0+0x12>
    4e5e:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
    4e62:	d072      	beq.n	4f4a <_strtol_l.constprop.0+0x10e>
    4e64:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
    4e68:	bf08      	it	eq
    4e6a:	f89e b000 	ldrbeq.w	fp, [lr]
    4e6e:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
    4e72:	bf08      	it	eq
    4e74:	f106 0e02 	addeq.w	lr, r6, #2
    4e78:	2b00      	cmp	r3, #0
    4e7a:	d042      	beq.n	4f02 <_strtol_l.constprop.0+0xc6>
    4e7c:	2b10      	cmp	r3, #16
    4e7e:	d057      	beq.n	4f30 <_strtol_l.constprop.0+0xf4>
    4e80:	fbb9 f7f8 	udiv	r7, r9, r8
    4e84:	2500      	movs	r5, #0
    4e86:	462e      	mov	r6, r5
    4e88:	fb08 9a17 	mls	sl, r8, r7, r9
    4e8c:	e005      	b.n	4e9a <_strtol_l.constprop.0+0x5e>
    4e8e:	d033      	beq.n	4ef8 <_strtol_l.constprop.0+0xbc>
    4e90:	fb08 c606 	mla	r6, r8, r6, ip
    4e94:	2501      	movs	r5, #1
    4e96:	f81e bb01 	ldrb.w	fp, [lr], #1
    4e9a:	f1ab 0c30 	sub.w	ip, fp, #48	; 0x30
    4e9e:	f1bc 0f09 	cmp.w	ip, #9
    4ea2:	d906      	bls.n	4eb2 <_strtol_l.constprop.0+0x76>
    4ea4:	f1ab 0c41 	sub.w	ip, fp, #65	; 0x41
    4ea8:	f1bc 0f19 	cmp.w	ip, #25
    4eac:	d812      	bhi.n	4ed4 <_strtol_l.constprop.0+0x98>
    4eae:	f1ab 0c37 	sub.w	ip, fp, #55	; 0x37
    4eb2:	4563      	cmp	r3, ip
    4eb4:	dd17      	ble.n	4ee6 <_strtol_l.constprop.0+0xaa>
    4eb6:	f1b5 3fff 	cmp.w	r5, #4294967295
    4eba:	d0ec      	beq.n	4e96 <_strtol_l.constprop.0+0x5a>
    4ebc:	42b7      	cmp	r7, r6
    4ebe:	d2e6      	bcs.n	4e8e <_strtol_l.constprop.0+0x52>
    4ec0:	f04f 35ff 	mov.w	r5, #4294967295
    4ec4:	e7e7      	b.n	4e96 <_strtol_l.constprop.0+0x5a>
    4ec6:	f000 fc11 	bl	56ec <__errno>
    4eca:	2316      	movs	r3, #22
    4ecc:	6003      	str	r3, [r0, #0]
    4ece:	2000      	movs	r0, #0
    4ed0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4ed4:	f1ab 0c61 	sub.w	ip, fp, #97	; 0x61
    4ed8:	f1bc 0f19 	cmp.w	ip, #25
    4edc:	d803      	bhi.n	4ee6 <_strtol_l.constprop.0+0xaa>
    4ede:	f1ab 0c57 	sub.w	ip, fp, #87	; 0x57
    4ee2:	4563      	cmp	r3, ip
    4ee4:	dce7      	bgt.n	4eb6 <_strtol_l.constprop.0+0x7a>
    4ee6:	1c6b      	adds	r3, r5, #1
    4ee8:	d027      	beq.n	4f3a <_strtol_l.constprop.0+0xfe>
    4eea:	b98c      	cbnz	r4, 4f10 <_strtol_l.constprop.0+0xd4>
    4eec:	b10a      	cbz	r2, 4ef2 <_strtol_l.constprop.0+0xb6>
    4eee:	bba5      	cbnz	r5, 4f5a <_strtol_l.constprop.0+0x11e>
    4ef0:	6011      	str	r1, [r2, #0]
    4ef2:	4630      	mov	r0, r6
    4ef4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4ef8:	45e2      	cmp	sl, ip
    4efa:	dac9      	bge.n	4e90 <_strtol_l.constprop.0+0x54>
    4efc:	f04f 35ff 	mov.w	r5, #4294967295
    4f00:	e7c9      	b.n	4e96 <_strtol_l.constprop.0+0x5a>
    4f02:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
    4f06:	d005      	beq.n	4f14 <_strtol_l.constprop.0+0xd8>
    4f08:	f04f 080a 	mov.w	r8, #10
    4f0c:	4643      	mov	r3, r8
    4f0e:	e7b7      	b.n	4e80 <_strtol_l.constprop.0+0x44>
    4f10:	4276      	negs	r6, r6
    4f12:	e7eb      	b.n	4eec <_strtol_l.constprop.0+0xb0>
    4f14:	f89e 3000 	ldrb.w	r3, [lr]
    4f18:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    4f1c:	2b58      	cmp	r3, #88	; 0x58
    4f1e:	d121      	bne.n	4f64 <_strtol_l.constprop.0+0x128>
    4f20:	f04f 0810 	mov.w	r8, #16
    4f24:	f89e b001 	ldrb.w	fp, [lr, #1]
    4f28:	4643      	mov	r3, r8
    4f2a:	f10e 0e02 	add.w	lr, lr, #2
    4f2e:	e7a7      	b.n	4e80 <_strtol_l.constprop.0+0x44>
    4f30:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
    4f34:	d01a      	beq.n	4f6c <_strtol_l.constprop.0+0x130>
    4f36:	4698      	mov	r8, r3
    4f38:	e7a2      	b.n	4e80 <_strtol_l.constprop.0+0x44>
    4f3a:	2322      	movs	r3, #34	; 0x22
    4f3c:	6003      	str	r3, [r0, #0]
    4f3e:	b172      	cbz	r2, 4f5e <_strtol_l.constprop.0+0x122>
    4f40:	f10e 31ff 	add.w	r1, lr, #4294967295
    4f44:	464e      	mov	r6, r9
    4f46:	6011      	str	r1, [r2, #0]
    4f48:	e7d3      	b.n	4ef2 <_strtol_l.constprop.0+0xb6>
    4f4a:	f89e b000 	ldrb.w	fp, [lr]
    4f4e:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
    4f52:	f106 0e02 	add.w	lr, r6, #2
    4f56:	2401      	movs	r4, #1
    4f58:	e78e      	b.n	4e78 <_strtol_l.constprop.0+0x3c>
    4f5a:	46b1      	mov	r9, r6
    4f5c:	e7f0      	b.n	4f40 <_strtol_l.constprop.0+0x104>
    4f5e:	464e      	mov	r6, r9
    4f60:	4630      	mov	r0, r6
    4f62:	e7c7      	b.n	4ef4 <_strtol_l.constprop.0+0xb8>
    4f64:	f04f 0808 	mov.w	r8, #8
    4f68:	4643      	mov	r3, r8
    4f6a:	e789      	b.n	4e80 <_strtol_l.constprop.0+0x44>
    4f6c:	f89e 5000 	ldrb.w	r5, [lr]
    4f70:	f005 05df 	and.w	r5, r5, #223	; 0xdf
    4f74:	2d58      	cmp	r5, #88	; 0x58
    4f76:	d0d3      	beq.n	4f20 <_strtol_l.constprop.0+0xe4>
    4f78:	4698      	mov	r8, r3
    4f7a:	e781      	b.n	4e80 <_strtol_l.constprop.0+0x44>
    4f7c:	20000645 	.word	0x20000645

00004f80 <_strtol_r>:
    4f80:	f7ff bf5c 	b.w	4e3c <_strtol_l.constprop.0>

00004f84 <stdio_exit_handler>:
    4f84:	4a02      	ldr	r2, [pc, #8]	; (4f90 <stdio_exit_handler+0xc>)
    4f86:	4903      	ldr	r1, [pc, #12]	; (4f94 <stdio_exit_handler+0x10>)
    4f88:	4803      	ldr	r0, [pc, #12]	; (4f98 <stdio_exit_handler+0x14>)
    4f8a:	f000 b8bb 	b.w	5104 <_fwalk_sglue>
    4f8e:	bf00      	nop
    4f90:	200081d8 	.word	0x200081d8
    4f94:	0000a45d 	.word	0x0000a45d
    4f98:	20007a60 	.word	0x20007a60

00004f9c <cleanup_stdio>:
    4f9c:	4b0c      	ldr	r3, [pc, #48]	; (4fd0 <cleanup_stdio+0x34>)
    4f9e:	6841      	ldr	r1, [r0, #4]
    4fa0:	4299      	cmp	r1, r3
    4fa2:	b510      	push	{r4, lr}
    4fa4:	4604      	mov	r4, r0
    4fa6:	d001      	beq.n	4fac <cleanup_stdio+0x10>
    4fa8:	f005 fa58 	bl	a45c <_fclose_r>
    4fac:	68a1      	ldr	r1, [r4, #8]
    4fae:	4b09      	ldr	r3, [pc, #36]	; (4fd4 <cleanup_stdio+0x38>)
    4fb0:	4299      	cmp	r1, r3
    4fb2:	d002      	beq.n	4fba <cleanup_stdio+0x1e>
    4fb4:	4620      	mov	r0, r4
    4fb6:	f005 fa51 	bl	a45c <_fclose_r>
    4fba:	68e1      	ldr	r1, [r4, #12]
    4fbc:	4b06      	ldr	r3, [pc, #24]	; (4fd8 <cleanup_stdio+0x3c>)
    4fbe:	4299      	cmp	r1, r3
    4fc0:	d004      	beq.n	4fcc <cleanup_stdio+0x30>
    4fc2:	4620      	mov	r0, r4
    4fc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4fc8:	f005 ba48 	b.w	a45c <_fclose_r>
    4fcc:	bd10      	pop	{r4, pc}
    4fce:	bf00      	nop
    4fd0:	20008ae0 	.word	0x20008ae0
    4fd4:	20008b48 	.word	0x20008b48
    4fd8:	20008bb0 	.word	0x20008bb0

00004fdc <global_stdio_init.part.0>:
    4fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4fe0:	4c2a      	ldr	r4, [pc, #168]	; (508c <global_stdio_init.part.0+0xb0>)
    4fe2:	4b2b      	ldr	r3, [pc, #172]	; (5090 <global_stdio_init.part.0+0xb4>)
    4fe4:	482b      	ldr	r0, [pc, #172]	; (5094 <global_stdio_init.part.0+0xb8>)
    4fe6:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 50a8 <global_stdio_init.part.0+0xcc>
    4fea:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 50ac <global_stdio_init.part.0+0xd0>
    4fee:	4f2a      	ldr	r7, [pc, #168]	; (5098 <global_stdio_init.part.0+0xbc>)
    4ff0:	6018      	str	r0, [r3, #0]
    4ff2:	2500      	movs	r5, #0
    4ff4:	2304      	movs	r3, #4
    4ff6:	2208      	movs	r2, #8
    4ff8:	4629      	mov	r1, r5
    4ffa:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    4ffe:	4e27      	ldr	r6, [pc, #156]	; (509c <global_stdio_init.part.0+0xc0>)
    5000:	6665      	str	r5, [r4, #100]	; 0x64
    5002:	e9c4 5302 	strd	r5, r3, [r4, #8]
    5006:	e9c4 5500 	strd	r5, r5, [r4]
    500a:	e9c4 5504 	strd	r5, r5, [r4, #16]
    500e:	61a5      	str	r5, [r4, #24]
    5010:	f000 fa36 	bl	5480 <memset>
    5014:	4b22      	ldr	r3, [pc, #136]	; (50a0 <global_stdio_init.part.0+0xc4>)
    5016:	6763      	str	r3, [r4, #116]	; 0x74
    5018:	2208      	movs	r2, #8
    501a:	4629      	mov	r1, r5
    501c:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    5020:	e9c4 4907 	strd	r4, r9, [r4, #28]
    5024:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
    5028:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
    502c:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
    5030:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
    5034:	6725      	str	r5, [r4, #112]	; 0x70
    5036:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    503a:	62e6      	str	r6, [r4, #44]	; 0x2c
    503c:	f000 fa20 	bl	5480 <memset>
    5040:	4b18      	ldr	r3, [pc, #96]	; (50a4 <global_stdio_init.part.0+0xc8>)
    5042:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    5046:	4629      	mov	r1, r5
    5048:	f104 0368 	add.w	r3, r4, #104	; 0x68
    504c:	2208      	movs	r2, #8
    504e:	f504 7096 	add.w	r0, r4, #300	; 0x12c
    5052:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    5056:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
    505a:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
    505e:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
    5062:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
    5066:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    506a:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
    506e:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    5072:	f000 fa05 	bl	5480 <memset>
    5076:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    507a:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
    507e:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
    5082:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    5086:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    508a:	bf00      	nop
    508c:	20008ae0 	.word	0x20008ae0
    5090:	20008c18 	.word	0x20008c18
    5094:	00004f85 	.word	0x00004f85
    5098:	00005295 	.word	0x00005295
    509c:	000052b5 	.word	0x000052b5
    50a0:	00010009 	.word	0x00010009
    50a4:	00020012 	.word	0x00020012
    50a8:	0000522d 	.word	0x0000522d
    50ac:	00005255 	.word	0x00005255

000050b0 <__sinit>:
    50b0:	b510      	push	{r4, lr}
    50b2:	4604      	mov	r4, r0
    50b4:	480a      	ldr	r0, [pc, #40]	; (50e0 <__sinit+0x30>)
    50b6:	f000 fb47 	bl	5748 <__retarget_lock_acquire_recursive>
    50ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
    50bc:	b923      	cbnz	r3, 50c8 <__sinit+0x18>
    50be:	4b09      	ldr	r3, [pc, #36]	; (50e4 <__sinit+0x34>)
    50c0:	4a09      	ldr	r2, [pc, #36]	; (50e8 <__sinit+0x38>)
    50c2:	681b      	ldr	r3, [r3, #0]
    50c4:	6362      	str	r2, [r4, #52]	; 0x34
    50c6:	b123      	cbz	r3, 50d2 <__sinit+0x22>
    50c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    50cc:	4804      	ldr	r0, [pc, #16]	; (50e0 <__sinit+0x30>)
    50ce:	f000 bb3d 	b.w	574c <__retarget_lock_release_recursive>
    50d2:	f7ff ff83 	bl	4fdc <global_stdio_init.part.0>
    50d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    50da:	4801      	ldr	r0, [pc, #4]	; (50e0 <__sinit+0x30>)
    50dc:	f000 bb36 	b.w	574c <__retarget_lock_release_recursive>
    50e0:	20008aa8 	.word	0x20008aa8
    50e4:	20008c18 	.word	0x20008c18
    50e8:	00004f9d 	.word	0x00004f9d

000050ec <__sfp_lock_acquire>:
    50ec:	4801      	ldr	r0, [pc, #4]	; (50f4 <__sfp_lock_acquire+0x8>)
    50ee:	f000 bb2b 	b.w	5748 <__retarget_lock_acquire_recursive>
    50f2:	bf00      	nop
    50f4:	20008aa8 	.word	0x20008aa8

000050f8 <__sfp_lock_release>:
    50f8:	4801      	ldr	r0, [pc, #4]	; (5100 <__sfp_lock_release+0x8>)
    50fa:	f000 bb27 	b.w	574c <__retarget_lock_release_recursive>
    50fe:	bf00      	nop
    5100:	20008aa8 	.word	0x20008aa8

00005104 <_fwalk_sglue>:
    5104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5108:	4680      	mov	r8, r0
    510a:	460f      	mov	r7, r1
    510c:	4616      	mov	r6, r2
    510e:	f04f 0900 	mov.w	r9, #0
    5112:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
    5116:	3d01      	subs	r5, #1
    5118:	d411      	bmi.n	513e <_fwalk_sglue+0x3a>
    511a:	89a3      	ldrh	r3, [r4, #12]
    511c:	2b01      	cmp	r3, #1
    511e:	f105 35ff 	add.w	r5, r5, #4294967295
    5122:	d908      	bls.n	5136 <_fwalk_sglue+0x32>
    5124:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    5128:	3301      	adds	r3, #1
    512a:	4621      	mov	r1, r4
    512c:	d003      	beq.n	5136 <_fwalk_sglue+0x32>
    512e:	4640      	mov	r0, r8
    5130:	47b8      	blx	r7
    5132:	ea49 0900 	orr.w	r9, r9, r0
    5136:	1c6b      	adds	r3, r5, #1
    5138:	f104 0468 	add.w	r4, r4, #104	; 0x68
    513c:	d1ed      	bne.n	511a <_fwalk_sglue+0x16>
    513e:	6836      	ldr	r6, [r6, #0]
    5140:	2e00      	cmp	r6, #0
    5142:	d1e6      	bne.n	5112 <_fwalk_sglue+0xe>
    5144:	4648      	mov	r0, r9
    5146:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    514a:	bf00      	nop

0000514c <snprintf>:
    514c:	b40c      	push	{r2, r3}
    514e:	b510      	push	{r4, lr}
    5150:	4b1f      	ldr	r3, [pc, #124]	; (51d0 <snprintf+0x84>)
    5152:	2900      	cmp	r1, #0
    5154:	681c      	ldr	r4, [r3, #0]
    5156:	b09c      	sub	sp, #112	; 0x70
    5158:	db35      	blt.n	51c6 <snprintf+0x7a>
    515a:	f44f 7302 	mov.w	r3, #520	; 0x208
    515e:	f8ad 3014 	strh.w	r3, [sp, #20]
    5162:	9002      	str	r0, [sp, #8]
    5164:	9006      	str	r0, [sp, #24]
    5166:	ab1f      	add	r3, sp, #124	; 0x7c
    5168:	d018      	beq.n	519c <snprintf+0x50>
    516a:	3901      	subs	r1, #1
    516c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    5170:	9104      	str	r1, [sp, #16]
    5172:	9107      	str	r1, [sp, #28]
    5174:	f8ad 2016 	strh.w	r2, [sp, #22]
    5178:	a902      	add	r1, sp, #8
    517a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    517c:	9301      	str	r3, [sp, #4]
    517e:	4620      	mov	r0, r4
    5180:	f001 ffa2 	bl	70c8 <_svfprintf_r>
    5184:	1c42      	adds	r2, r0, #1
    5186:	da01      	bge.n	518c <snprintf+0x40>
    5188:	238b      	movs	r3, #139	; 0x8b
    518a:	6023      	str	r3, [r4, #0]
    518c:	9b02      	ldr	r3, [sp, #8]
    518e:	2200      	movs	r2, #0
    5190:	701a      	strb	r2, [r3, #0]
    5192:	b01c      	add	sp, #112	; 0x70
    5194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5198:	b002      	add	sp, #8
    519a:	4770      	bx	lr
    519c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    51a0:	9104      	str	r1, [sp, #16]
    51a2:	9107      	str	r1, [sp, #28]
    51a4:	f8ad 2016 	strh.w	r2, [sp, #22]
    51a8:	a902      	add	r1, sp, #8
    51aa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    51ac:	9301      	str	r3, [sp, #4]
    51ae:	4620      	mov	r0, r4
    51b0:	f001 ff8a 	bl	70c8 <_svfprintf_r>
    51b4:	1c43      	adds	r3, r0, #1
    51b6:	da01      	bge.n	51bc <snprintf+0x70>
    51b8:	238b      	movs	r3, #139	; 0x8b
    51ba:	6023      	str	r3, [r4, #0]
    51bc:	b01c      	add	sp, #112	; 0x70
    51be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    51c2:	b002      	add	sp, #8
    51c4:	4770      	bx	lr
    51c6:	238b      	movs	r3, #139	; 0x8b
    51c8:	6023      	str	r3, [r4, #0]
    51ca:	f04f 30ff 	mov.w	r0, #4294967295
    51ce:	e7f5      	b.n	51bc <snprintf+0x70>
    51d0:	200081e4 	.word	0x200081e4

000051d4 <sscanf>:
    51d4:	b40e      	push	{r1, r2, r3}
    51d6:	b510      	push	{r4, lr}
    51d8:	b09f      	sub	sp, #124	; 0x7c
    51da:	ac21      	add	r4, sp, #132	; 0x84
    51dc:	f44f 7101 	mov.w	r1, #516	; 0x204
    51e0:	f854 2b04 	ldr.w	r2, [r4], #4
    51e4:	9201      	str	r2, [sp, #4]
    51e6:	f8ad 101c 	strh.w	r1, [sp, #28]
    51ea:	9004      	str	r0, [sp, #16]
    51ec:	9008      	str	r0, [sp, #32]
    51ee:	f000 fc27 	bl	5a40 <strlen>
    51f2:	9005      	str	r0, [sp, #20]
    51f4:	9009      	str	r0, [sp, #36]	; 0x24
    51f6:	480b      	ldr	r0, [pc, #44]	; (5224 <sscanf+0x50>)
    51f8:	490b      	ldr	r1, [pc, #44]	; (5228 <sscanf+0x54>)
    51fa:	910c      	str	r1, [sp, #48]	; 0x30
    51fc:	2300      	movs	r3, #0
    51fe:	f64f 7cff 	movw	ip, #65535	; 0xffff
    5202:	9310      	str	r3, [sp, #64]	; 0x40
    5204:	9315      	str	r3, [sp, #84]	; 0x54
    5206:	9a01      	ldr	r2, [sp, #4]
    5208:	6800      	ldr	r0, [r0, #0]
    520a:	f8ad c01e 	strh.w	ip, [sp, #30]
    520e:	4623      	mov	r3, r4
    5210:	a904      	add	r1, sp, #16
    5212:	9403      	str	r4, [sp, #12]
    5214:	f003 fcfa 	bl	8c0c <__ssvfscanf_r>
    5218:	b01f      	add	sp, #124	; 0x7c
    521a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    521e:	b003      	add	sp, #12
    5220:	4770      	bx	lr
    5222:	bf00      	nop
    5224:	200081e4 	.word	0x200081e4
    5228:	00005251 	.word	0x00005251

0000522c <__sread>:
    522c:	b510      	push	{r4, lr}
    522e:	460c      	mov	r4, r1
    5230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    5234:	f000 fa1c 	bl	5670 <_read_r>
    5238:	2800      	cmp	r0, #0
    523a:	db03      	blt.n	5244 <__sread+0x18>
    523c:	6d23      	ldr	r3, [r4, #80]	; 0x50
    523e:	4403      	add	r3, r0
    5240:	6523      	str	r3, [r4, #80]	; 0x50
    5242:	bd10      	pop	{r4, pc}
    5244:	89a3      	ldrh	r3, [r4, #12]
    5246:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    524a:	81a3      	strh	r3, [r4, #12]
    524c:	bd10      	pop	{r4, pc}
    524e:	bf00      	nop

00005250 <__seofread>:
    5250:	2000      	movs	r0, #0
    5252:	4770      	bx	lr

00005254 <__swrite>:
    5254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5258:	460c      	mov	r4, r1
    525a:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
    525e:	461f      	mov	r7, r3
    5260:	05cb      	lsls	r3, r1, #23
    5262:	4605      	mov	r5, r0
    5264:	4616      	mov	r6, r2
    5266:	d40b      	bmi.n	5280 <__swrite+0x2c>
    5268:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
    526c:	81a1      	strh	r1, [r4, #12]
    526e:	463b      	mov	r3, r7
    5270:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    5274:	4632      	mov	r2, r6
    5276:	4628      	mov	r0, r5
    5278:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    527c:	f000 ba20 	b.w	56c0 <_write_r>
    5280:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    5284:	2302      	movs	r3, #2
    5286:	2200      	movs	r2, #0
    5288:	f000 f9dc 	bl	5644 <_lseek_r>
    528c:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
    5290:	e7ea      	b.n	5268 <__swrite+0x14>
    5292:	bf00      	nop

00005294 <__sseek>:
    5294:	b510      	push	{r4, lr}
    5296:	460c      	mov	r4, r1
    5298:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    529c:	f000 f9d2 	bl	5644 <_lseek_r>
    52a0:	89a3      	ldrh	r3, [r4, #12]
    52a2:	1c42      	adds	r2, r0, #1
    52a4:	bf0e      	itee	eq
    52a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    52aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    52ae:	6520      	strne	r0, [r4, #80]	; 0x50
    52b0:	81a3      	strh	r3, [r4, #12]
    52b2:	bd10      	pop	{r4, pc}

000052b4 <__sclose>:
    52b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    52b8:	f000 b9b2 	b.w	5620 <_close_r>

000052bc <_vdprintf_r>:
    52bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    52be:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
    52c2:	af04      	add	r7, sp, #16
    52c4:	9300      	str	r3, [sp, #0]
    52c6:	4613      	mov	r3, r2
    52c8:	f44f 7200 	mov.w	r2, #512	; 0x200
    52cc:	460e      	mov	r6, r1
    52ce:	9203      	str	r2, [sp, #12]
    52d0:	4639      	mov	r1, r7
    52d2:	aa03      	add	r2, sp, #12
    52d4:	4605      	mov	r5, r0
    52d6:	f000 f825 	bl	5324 <_vasnprintf_r>
    52da:	b188      	cbz	r0, 5300 <_vdprintf_r+0x44>
    52dc:	4604      	mov	r4, r0
    52de:	4602      	mov	r2, r0
    52e0:	9b03      	ldr	r3, [sp, #12]
    52e2:	4631      	mov	r1, r6
    52e4:	4628      	mov	r0, r5
    52e6:	f000 f9eb 	bl	56c0 <_write_r>
    52ea:	42bc      	cmp	r4, r7
    52ec:	9003      	str	r0, [sp, #12]
    52ee:	d004      	beq.n	52fa <_vdprintf_r+0x3e>
    52f0:	4628      	mov	r0, r5
    52f2:	4621      	mov	r1, r4
    52f4:	f000 fc72 	bl	5bdc <_free_r>
    52f8:	9803      	ldr	r0, [sp, #12]
    52fa:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
    52fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5300:	f04f 30ff 	mov.w	r0, #4294967295
    5304:	e7f9      	b.n	52fa <_vdprintf_r+0x3e>
    5306:	bf00      	nop

00005308 <vdprintf>:
    5308:	b410      	push	{r4}
    530a:	4c05      	ldr	r4, [pc, #20]	; (5320 <vdprintf+0x18>)
    530c:	4684      	mov	ip, r0
    530e:	4613      	mov	r3, r2
    5310:	6820      	ldr	r0, [r4, #0]
    5312:	f85d 4b04 	ldr.w	r4, [sp], #4
    5316:	460a      	mov	r2, r1
    5318:	4661      	mov	r1, ip
    531a:	f7ff bfcf 	b.w	52bc <_vdprintf_r>
    531e:	bf00      	nop
    5320:	200081e4 	.word	0x200081e4

00005324 <_vasnprintf_r>:
    5324:	b530      	push	{r4, r5, lr}
    5326:	6814      	ldr	r4, [r2, #0]
    5328:	4615      	mov	r5, r2
    532a:	b09b      	sub	sp, #108	; 0x6c
    532c:	461a      	mov	r2, r3
    532e:	b109      	cbz	r1, 5334 <_vasnprintf_r+0x10>
    5330:	2c00      	cmp	r4, #0
    5332:	d119      	bne.n	5368 <_vasnprintf_r+0x44>
    5334:	2100      	movs	r1, #0
    5336:	f44f 7322 	mov.w	r3, #648	; 0x288
    533a:	f8ad 300c 	strh.w	r3, [sp, #12]
    533e:	9100      	str	r1, [sp, #0]
    5340:	9104      	str	r1, [sp, #16]
    5342:	f64f 73ff 	movw	r3, #65535	; 0xffff
    5346:	9102      	str	r1, [sp, #8]
    5348:	9105      	str	r1, [sp, #20]
    534a:	f8ad 300e 	strh.w	r3, [sp, #14]
    534e:	4669      	mov	r1, sp
    5350:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    5352:	f001 feb9 	bl	70c8 <_svfprintf_r>
    5356:	2800      	cmp	r0, #0
    5358:	db13      	blt.n	5382 <_vasnprintf_r+0x5e>
    535a:	9b00      	ldr	r3, [sp, #0]
    535c:	6028      	str	r0, [r5, #0]
    535e:	2200      	movs	r2, #0
    5360:	701a      	strb	r2, [r3, #0]
    5362:	9804      	ldr	r0, [sp, #16]
    5364:	b01b      	add	sp, #108	; 0x6c
    5366:	bd30      	pop	{r4, r5, pc}
    5368:	f44f 63c1 	mov.w	r3, #1544	; 0x608
    536c:	9100      	str	r1, [sp, #0]
    536e:	9104      	str	r1, [sp, #16]
    5370:	f8ad 300c 	strh.w	r3, [sp, #12]
    5374:	4621      	mov	r1, r4
    5376:	dae4      	bge.n	5342 <_vasnprintf_r+0x1e>
    5378:	238b      	movs	r3, #139	; 0x8b
    537a:	6003      	str	r3, [r0, #0]
    537c:	2000      	movs	r0, #0
    537e:	b01b      	add	sp, #108	; 0x6c
    5380:	bd30      	pop	{r4, r5, pc}
    5382:	2000      	movs	r0, #0
    5384:	e7ee      	b.n	5364 <_vasnprintf_r+0x40>
    5386:	bf00      	nop

00005388 <memmove>:
    5388:	4288      	cmp	r0, r1
    538a:	d90d      	bls.n	53a8 <memmove+0x20>
    538c:	188b      	adds	r3, r1, r2
    538e:	4283      	cmp	r3, r0
    5390:	d90a      	bls.n	53a8 <memmove+0x20>
    5392:	eb00 0c02 	add.w	ip, r0, r2
    5396:	b1ba      	cbz	r2, 53c8 <memmove+0x40>
    5398:	4662      	mov	r2, ip
    539a:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
    539e:	f802 cd01 	strb.w	ip, [r2, #-1]!
    53a2:	4299      	cmp	r1, r3
    53a4:	d1f9      	bne.n	539a <memmove+0x12>
    53a6:	4770      	bx	lr
    53a8:	2a0f      	cmp	r2, #15
    53aa:	d80e      	bhi.n	53ca <memmove+0x42>
    53ac:	4603      	mov	r3, r0
    53ae:	f102 3cff 	add.w	ip, r2, #4294967295
    53b2:	b14a      	cbz	r2, 53c8 <memmove+0x40>
    53b4:	f10c 0c01 	add.w	ip, ip, #1
    53b8:	3b01      	subs	r3, #1
    53ba:	448c      	add	ip, r1
    53bc:	f811 2b01 	ldrb.w	r2, [r1], #1
    53c0:	f803 2f01 	strb.w	r2, [r3, #1]!
    53c4:	4561      	cmp	r1, ip
    53c6:	d1f9      	bne.n	53bc <memmove+0x34>
    53c8:	4770      	bx	lr
    53ca:	ea40 0301 	orr.w	r3, r0, r1
    53ce:	079b      	lsls	r3, r3, #30
    53d0:	d150      	bne.n	5474 <memmove+0xec>
    53d2:	f1a2 0310 	sub.w	r3, r2, #16
    53d6:	b570      	push	{r4, r5, r6, lr}
    53d8:	f101 0c20 	add.w	ip, r1, #32
    53dc:	f023 050f 	bic.w	r5, r3, #15
    53e0:	f101 0e10 	add.w	lr, r1, #16
    53e4:	f100 0410 	add.w	r4, r0, #16
    53e8:	44ac      	add	ip, r5
    53ea:	091b      	lsrs	r3, r3, #4
    53ec:	f85e 5c10 	ldr.w	r5, [lr, #-16]
    53f0:	f844 5c10 	str.w	r5, [r4, #-16]
    53f4:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
    53f8:	f844 5c0c 	str.w	r5, [r4, #-12]
    53fc:	f85e 5c08 	ldr.w	r5, [lr, #-8]
    5400:	f844 5c08 	str.w	r5, [r4, #-8]
    5404:	f85e 5c04 	ldr.w	r5, [lr, #-4]
    5408:	f844 5c04 	str.w	r5, [r4, #-4]
    540c:	f10e 0e10 	add.w	lr, lr, #16
    5410:	45e6      	cmp	lr, ip
    5412:	f104 0410 	add.w	r4, r4, #16
    5416:	d1e9      	bne.n	53ec <memmove+0x64>
    5418:	3301      	adds	r3, #1
    541a:	f012 0f0c 	tst.w	r2, #12
    541e:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    5422:	f002 040f 	and.w	r4, r2, #15
    5426:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    542a:	d027      	beq.n	547c <memmove+0xf4>
    542c:	3c04      	subs	r4, #4
    542e:	f024 0603 	bic.w	r6, r4, #3
    5432:	ea4f 0c94 	mov.w	ip, r4, lsr #2
    5436:	441e      	add	r6, r3
    5438:	1f1c      	subs	r4, r3, #4
    543a:	468e      	mov	lr, r1
    543c:	f85e 5b04 	ldr.w	r5, [lr], #4
    5440:	f844 5f04 	str.w	r5, [r4, #4]!
    5444:	42b4      	cmp	r4, r6
    5446:	d1f9      	bne.n	543c <memmove+0xb4>
    5448:	f10c 0401 	add.w	r4, ip, #1
    544c:	f002 0203 	and.w	r2, r2, #3
    5450:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    5454:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    5458:	f102 3cff 	add.w	ip, r2, #4294967295
    545c:	b14a      	cbz	r2, 5472 <memmove+0xea>
    545e:	f10c 0c01 	add.w	ip, ip, #1
    5462:	3b01      	subs	r3, #1
    5464:	448c      	add	ip, r1
    5466:	f811 2b01 	ldrb.w	r2, [r1], #1
    546a:	f803 2f01 	strb.w	r2, [r3, #1]!
    546e:	4561      	cmp	r1, ip
    5470:	d1f9      	bne.n	5466 <memmove+0xde>
    5472:	bd70      	pop	{r4, r5, r6, pc}
    5474:	f102 3cff 	add.w	ip, r2, #4294967295
    5478:	4603      	mov	r3, r0
    547a:	e79b      	b.n	53b4 <memmove+0x2c>
    547c:	4622      	mov	r2, r4
    547e:	e7eb      	b.n	5458 <memmove+0xd0>

00005480 <memset>:
    5480:	0783      	lsls	r3, r0, #30
    5482:	b530      	push	{r4, r5, lr}
    5484:	d048      	beq.n	5518 <memset+0x98>
    5486:	1e54      	subs	r4, r2, #1
    5488:	2a00      	cmp	r2, #0
    548a:	d03f      	beq.n	550c <memset+0x8c>
    548c:	b2ca      	uxtb	r2, r1
    548e:	4603      	mov	r3, r0
    5490:	e001      	b.n	5496 <memset+0x16>
    5492:	3c01      	subs	r4, #1
    5494:	d33a      	bcc.n	550c <memset+0x8c>
    5496:	f803 2b01 	strb.w	r2, [r3], #1
    549a:	079d      	lsls	r5, r3, #30
    549c:	d1f9      	bne.n	5492 <memset+0x12>
    549e:	2c03      	cmp	r4, #3
    54a0:	d92d      	bls.n	54fe <memset+0x7e>
    54a2:	b2cd      	uxtb	r5, r1
    54a4:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    54a8:	2c0f      	cmp	r4, #15
    54aa:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    54ae:	d936      	bls.n	551e <memset+0x9e>
    54b0:	f1a4 0210 	sub.w	r2, r4, #16
    54b4:	f022 0c0f 	bic.w	ip, r2, #15
    54b8:	f103 0e20 	add.w	lr, r3, #32
    54bc:	44e6      	add	lr, ip
    54be:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    54c2:	f103 0210 	add.w	r2, r3, #16
    54c6:	e942 5504 	strd	r5, r5, [r2, #-16]
    54ca:	e942 5502 	strd	r5, r5, [r2, #-8]
    54ce:	3210      	adds	r2, #16
    54d0:	4572      	cmp	r2, lr
    54d2:	d1f8      	bne.n	54c6 <memset+0x46>
    54d4:	f10c 0201 	add.w	r2, ip, #1
    54d8:	f014 0f0c 	tst.w	r4, #12
    54dc:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    54e0:	f004 0c0f 	and.w	ip, r4, #15
    54e4:	d013      	beq.n	550e <memset+0x8e>
    54e6:	f1ac 0304 	sub.w	r3, ip, #4
    54ea:	f023 0303 	bic.w	r3, r3, #3
    54ee:	3304      	adds	r3, #4
    54f0:	4413      	add	r3, r2
    54f2:	f842 5b04 	str.w	r5, [r2], #4
    54f6:	4293      	cmp	r3, r2
    54f8:	d1fb      	bne.n	54f2 <memset+0x72>
    54fa:	f00c 0403 	and.w	r4, ip, #3
    54fe:	b12c      	cbz	r4, 550c <memset+0x8c>
    5500:	b2c9      	uxtb	r1, r1
    5502:	441c      	add	r4, r3
    5504:	f803 1b01 	strb.w	r1, [r3], #1
    5508:	429c      	cmp	r4, r3
    550a:	d1fb      	bne.n	5504 <memset+0x84>
    550c:	bd30      	pop	{r4, r5, pc}
    550e:	4664      	mov	r4, ip
    5510:	4613      	mov	r3, r2
    5512:	2c00      	cmp	r4, #0
    5514:	d1f4      	bne.n	5500 <memset+0x80>
    5516:	e7f9      	b.n	550c <memset+0x8c>
    5518:	4603      	mov	r3, r0
    551a:	4614      	mov	r4, r2
    551c:	e7bf      	b.n	549e <memset+0x1e>
    551e:	461a      	mov	r2, r3
    5520:	46a4      	mov	ip, r4
    5522:	e7e0      	b.n	54e6 <memset+0x66>

00005524 <strncmp>:
    5524:	2a00      	cmp	r2, #0
    5526:	d03e      	beq.n	55a6 <strncmp+0x82>
    5528:	ea40 0301 	orr.w	r3, r0, r1
    552c:	079b      	lsls	r3, r3, #30
    552e:	b530      	push	{r4, r5, lr}
    5530:	4684      	mov	ip, r0
    5532:	d12f      	bne.n	5594 <strncmp+0x70>
    5534:	2a03      	cmp	r2, #3
    5536:	d92d      	bls.n	5594 <strncmp+0x70>
    5538:	460b      	mov	r3, r1
    553a:	e008      	b.n	554e <strncmp+0x2a>
    553c:	3a04      	subs	r2, #4
    553e:	4684      	mov	ip, r0
    5540:	4619      	mov	r1, r3
    5542:	d025      	beq.n	5590 <strncmp+0x6c>
    5544:	f01e 3f80 	tst.w	lr, #2155905152	; 0x80808080
    5548:	d122      	bne.n	5590 <strncmp+0x6c>
    554a:	2a03      	cmp	r2, #3
    554c:	d922      	bls.n	5594 <strncmp+0x70>
    554e:	6804      	ldr	r4, [r0, #0]
    5550:	4619      	mov	r1, r3
    5552:	f853 5b04 	ldr.w	r5, [r3], #4
    5556:	f1a4 3e01 	sub.w	lr, r4, #16843009	; 0x1010101
    555a:	42ac      	cmp	r4, r5
    555c:	4684      	mov	ip, r0
    555e:	ea2e 0e04 	bic.w	lr, lr, r4
    5562:	f100 0004 	add.w	r0, r0, #4
    5566:	d0e9      	beq.n	553c <strncmp+0x18>
    5568:	f89c 0000 	ldrb.w	r0, [ip]
    556c:	780c      	ldrb	r4, [r1, #0]
    556e:	42a0      	cmp	r0, r4
    5570:	d11b      	bne.n	55aa <strncmp+0x86>
    5572:	46e6      	mov	lr, ip
    5574:	b168      	cbz	r0, 5592 <strncmp+0x6e>
    5576:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
    557a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    557e:	eba2 030e 	sub.w	r3, r2, lr
    5582:	42a0      	cmp	r0, r4
    5584:	f103 33ff 	add.w	r3, r3, #4294967295
    5588:	d10f      	bne.n	55aa <strncmp+0x86>
    558a:	eb1c 0303 	adds.w	r3, ip, r3
    558e:	d1f1      	bne.n	5574 <strncmp+0x50>
    5590:	2000      	movs	r0, #0
    5592:	bd30      	pop	{r4, r5, pc}
    5594:	f89c 0000 	ldrb.w	r0, [ip]
    5598:	780c      	ldrb	r4, [r1, #0]
    559a:	4284      	cmp	r4, r0
    559c:	d105      	bne.n	55aa <strncmp+0x86>
    559e:	2a01      	cmp	r2, #1
    55a0:	d0f6      	beq.n	5590 <strncmp+0x6c>
    55a2:	46e6      	mov	lr, ip
    55a4:	e7e6      	b.n	5574 <strncmp+0x50>
    55a6:	4610      	mov	r0, r2
    55a8:	4770      	bx	lr
    55aa:	1b00      	subs	r0, r0, r4
    55ac:	bd30      	pop	{r4, r5, pc}
    55ae:	bf00      	nop

000055b0 <strncpy>:
    55b0:	ea40 0301 	orr.w	r3, r0, r1
    55b4:	079b      	lsls	r3, r3, #30
    55b6:	b530      	push	{r4, r5, lr}
    55b8:	d101      	bne.n	55be <strncpy+0xe>
    55ba:	2a03      	cmp	r2, #3
    55bc:	d80f      	bhi.n	55de <strncpy+0x2e>
    55be:	4684      	mov	ip, r0
    55c0:	f101 3eff 	add.w	lr, r1, #4294967295
    55c4:	e007      	b.n	55d6 <strncpy+0x26>
    55c6:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    55ca:	f803 1b01 	strb.w	r1, [r3], #1
    55ce:	1e54      	subs	r4, r2, #1
    55d0:	b1c1      	cbz	r1, 5604 <strncpy+0x54>
    55d2:	469c      	mov	ip, r3
    55d4:	4622      	mov	r2, r4
    55d6:	4663      	mov	r3, ip
    55d8:	2a00      	cmp	r2, #0
    55da:	d1f4      	bne.n	55c6 <strncpy+0x16>
    55dc:	bd30      	pop	{r4, r5, pc}
    55de:	460b      	mov	r3, r1
    55e0:	4684      	mov	ip, r0
    55e2:	4619      	mov	r1, r3
    55e4:	f853 5b04 	ldr.w	r5, [r3], #4
    55e8:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
    55ec:	ea24 0405 	bic.w	r4, r4, r5
    55f0:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    55f4:	d1e4      	bne.n	55c0 <strncpy+0x10>
    55f6:	3a04      	subs	r2, #4
    55f8:	2a03      	cmp	r2, #3
    55fa:	f84c 5b04 	str.w	r5, [ip], #4
    55fe:	4619      	mov	r1, r3
    5600:	d8ef      	bhi.n	55e2 <strncpy+0x32>
    5602:	e7dd      	b.n	55c0 <strncpy+0x10>
    5604:	4494      	add	ip, r2
    5606:	2c00      	cmp	r4, #0
    5608:	d0e8      	beq.n	55dc <strncpy+0x2c>
    560a:	f803 1b01 	strb.w	r1, [r3], #1
    560e:	4563      	cmp	r3, ip
    5610:	d1fb      	bne.n	560a <strncpy+0x5a>
    5612:	bd30      	pop	{r4, r5, pc}

00005614 <__locale_mb_cur_max>:
    5614:	4b01      	ldr	r3, [pc, #4]	; (561c <__locale_mb_cur_max+0x8>)
    5616:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
    561a:	4770      	bx	lr
    561c:	20007c5c 	.word	0x20007c5c

00005620 <_close_r>:
    5620:	b538      	push	{r3, r4, r5, lr}
    5622:	4d07      	ldr	r5, [pc, #28]	; (5640 <_close_r+0x20>)
    5624:	2200      	movs	r2, #0
    5626:	4604      	mov	r4, r0
    5628:	4608      	mov	r0, r1
    562a:	602a      	str	r2, [r5, #0]
    562c:	f7fc fb54 	bl	1cd8 <_close>
    5630:	1c43      	adds	r3, r0, #1
    5632:	d000      	beq.n	5636 <_close_r+0x16>
    5634:	bd38      	pop	{r3, r4, r5, pc}
    5636:	682b      	ldr	r3, [r5, #0]
    5638:	2b00      	cmp	r3, #0
    563a:	d0fb      	beq.n	5634 <_close_r+0x14>
    563c:	6023      	str	r3, [r4, #0]
    563e:	bd38      	pop	{r3, r4, r5, pc}
    5640:	20008c34 	.word	0x20008c34

00005644 <_lseek_r>:
    5644:	b538      	push	{r3, r4, r5, lr}
    5646:	460c      	mov	r4, r1
    5648:	4d08      	ldr	r5, [pc, #32]	; (566c <_lseek_r+0x28>)
    564a:	4684      	mov	ip, r0
    564c:	4611      	mov	r1, r2
    564e:	4620      	mov	r0, r4
    5650:	461a      	mov	r2, r3
    5652:	2300      	movs	r3, #0
    5654:	602b      	str	r3, [r5, #0]
    5656:	4664      	mov	r4, ip
    5658:	f7fc fb4a 	bl	1cf0 <_lseek>
    565c:	1c43      	adds	r3, r0, #1
    565e:	d000      	beq.n	5662 <_lseek_r+0x1e>
    5660:	bd38      	pop	{r3, r4, r5, pc}
    5662:	682b      	ldr	r3, [r5, #0]
    5664:	2b00      	cmp	r3, #0
    5666:	d0fb      	beq.n	5660 <_lseek_r+0x1c>
    5668:	6023      	str	r3, [r4, #0]
    566a:	bd38      	pop	{r3, r4, r5, pc}
    566c:	20008c34 	.word	0x20008c34

00005670 <_read_r>:
    5670:	b538      	push	{r3, r4, r5, lr}
    5672:	460c      	mov	r4, r1
    5674:	4d08      	ldr	r5, [pc, #32]	; (5698 <_read_r+0x28>)
    5676:	4684      	mov	ip, r0
    5678:	4611      	mov	r1, r2
    567a:	4620      	mov	r0, r4
    567c:	461a      	mov	r2, r3
    567e:	2300      	movs	r3, #0
    5680:	602b      	str	r3, [r5, #0]
    5682:	4664      	mov	r4, ip
    5684:	f7fc fb26 	bl	1cd4 <_read>
    5688:	1c43      	adds	r3, r0, #1
    568a:	d000      	beq.n	568e <_read_r+0x1e>
    568c:	bd38      	pop	{r3, r4, r5, pc}
    568e:	682b      	ldr	r3, [r5, #0]
    5690:	2b00      	cmp	r3, #0
    5692:	d0fb      	beq.n	568c <_read_r+0x1c>
    5694:	6023      	str	r3, [r4, #0]
    5696:	bd38      	pop	{r3, r4, r5, pc}
    5698:	20008c34 	.word	0x20008c34

0000569c <_sbrk_r>:
    569c:	b538      	push	{r3, r4, r5, lr}
    569e:	4d07      	ldr	r5, [pc, #28]	; (56bc <_sbrk_r+0x20>)
    56a0:	2200      	movs	r2, #0
    56a2:	4604      	mov	r4, r0
    56a4:	4608      	mov	r0, r1
    56a6:	602a      	str	r2, [r5, #0]
    56a8:	f7fc fafa 	bl	1ca0 <_sbrk>
    56ac:	1c43      	adds	r3, r0, #1
    56ae:	d000      	beq.n	56b2 <_sbrk_r+0x16>
    56b0:	bd38      	pop	{r3, r4, r5, pc}
    56b2:	682b      	ldr	r3, [r5, #0]
    56b4:	2b00      	cmp	r3, #0
    56b6:	d0fb      	beq.n	56b0 <_sbrk_r+0x14>
    56b8:	6023      	str	r3, [r4, #0]
    56ba:	bd38      	pop	{r3, r4, r5, pc}
    56bc:	20008c34 	.word	0x20008c34

000056c0 <_write_r>:
    56c0:	b538      	push	{r3, r4, r5, lr}
    56c2:	460c      	mov	r4, r1
    56c4:	4d08      	ldr	r5, [pc, #32]	; (56e8 <_write_r+0x28>)
    56c6:	4684      	mov	ip, r0
    56c8:	4611      	mov	r1, r2
    56ca:	4620      	mov	r0, r4
    56cc:	461a      	mov	r2, r3
    56ce:	2300      	movs	r3, #0
    56d0:	602b      	str	r3, [r5, #0]
    56d2:	4664      	mov	r4, ip
    56d4:	f7fb feac 	bl	1430 <_write>
    56d8:	1c43      	adds	r3, r0, #1
    56da:	d000      	beq.n	56de <_write_r+0x1e>
    56dc:	bd38      	pop	{r3, r4, r5, pc}
    56de:	682b      	ldr	r3, [r5, #0]
    56e0:	2b00      	cmp	r3, #0
    56e2:	d0fb      	beq.n	56dc <_write_r+0x1c>
    56e4:	6023      	str	r3, [r4, #0]
    56e6:	bd38      	pop	{r3, r4, r5, pc}
    56e8:	20008c34 	.word	0x20008c34

000056ec <__errno>:
    56ec:	4b01      	ldr	r3, [pc, #4]	; (56f4 <__errno+0x8>)
    56ee:	6818      	ldr	r0, [r3, #0]
    56f0:	4770      	bx	lr
    56f2:	bf00      	nop
    56f4:	200081e4 	.word	0x200081e4

000056f8 <__libc_init_array>:
    56f8:	b570      	push	{r4, r5, r6, lr}
    56fa:	4e0d      	ldr	r6, [pc, #52]	; (5730 <__libc_init_array+0x38>)
    56fc:	4d0d      	ldr	r5, [pc, #52]	; (5734 <__libc_init_array+0x3c>)
    56fe:	1b76      	subs	r6, r6, r5
    5700:	10b6      	asrs	r6, r6, #2
    5702:	d006      	beq.n	5712 <__libc_init_array+0x1a>
    5704:	2400      	movs	r4, #0
    5706:	f855 3b04 	ldr.w	r3, [r5], #4
    570a:	3401      	adds	r4, #1
    570c:	4798      	blx	r3
    570e:	42a6      	cmp	r6, r4
    5710:	d1f9      	bne.n	5706 <__libc_init_array+0xe>
    5712:	4e09      	ldr	r6, [pc, #36]	; (5738 <__libc_init_array+0x40>)
    5714:	4d09      	ldr	r5, [pc, #36]	; (573c <__libc_init_array+0x44>)
    5716:	1b76      	subs	r6, r6, r5
    5718:	f008 fb9e 	bl	de58 <___init_veneer>
    571c:	10b6      	asrs	r6, r6, #2
    571e:	d006      	beq.n	572e <__libc_init_array+0x36>
    5720:	2400      	movs	r4, #0
    5722:	f855 3b04 	ldr.w	r3, [r5], #4
    5726:	3401      	adds	r4, #1
    5728:	4798      	blx	r3
    572a:	42a6      	cmp	r6, r4
    572c:	d1f9      	bne.n	5722 <__libc_init_array+0x2a>
    572e:	bd70      	pop	{r4, r5, r6, pc}
    5730:	60001e80 	.word	0x60001e80
    5734:	60001e80 	.word	0x60001e80
    5738:	60001e84 	.word	0x60001e84
    573c:	60001e80 	.word	0x60001e80

00005740 <__retarget_lock_init_recursive>:
    5740:	4770      	bx	lr
    5742:	bf00      	nop

00005744 <__retarget_lock_close_recursive>:
    5744:	4770      	bx	lr
    5746:	bf00      	nop

00005748 <__retarget_lock_acquire_recursive>:
    5748:	4770      	bx	lr
    574a:	bf00      	nop

0000574c <__retarget_lock_release_recursive>:
    574c:	4770      	bx	lr
    574e:	bf00      	nop
	...
    5760:	eba2 0003 	sub.w	r0, r2, r3
    5764:	4770      	bx	lr
    5766:	bf00      	nop

00005768 <strcmp>:
    5768:	7802      	ldrb	r2, [r0, #0]
    576a:	780b      	ldrb	r3, [r1, #0]
    576c:	2a01      	cmp	r2, #1
    576e:	bf28      	it	cs
    5770:	429a      	cmpcs	r2, r3
    5772:	d1f5      	bne.n	5760 <__retarget_lock_release_recursive+0x14>
    5774:	e96d 4504 	strd	r4, r5, [sp, #-16]!
    5778:	ea40 0401 	orr.w	r4, r0, r1
    577c:	e9cd 6702 	strd	r6, r7, [sp, #8]
    5780:	f06f 0c00 	mvn.w	ip, #0
    5784:	ea4f 7244 	mov.w	r2, r4, lsl #29
    5788:	b312      	cbz	r2, 57d0 <strcmp+0x68>
    578a:	ea80 0401 	eor.w	r4, r0, r1
    578e:	f014 0f07 	tst.w	r4, #7
    5792:	d16a      	bne.n	586a <strcmp+0x102>
    5794:	f000 0407 	and.w	r4, r0, #7
    5798:	f020 0007 	bic.w	r0, r0, #7
    579c:	f004 0503 	and.w	r5, r4, #3
    57a0:	f021 0107 	bic.w	r1, r1, #7
    57a4:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    57a8:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    57ac:	f014 0f04 	tst.w	r4, #4
    57b0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    57b4:	fa0c f405 	lsl.w	r4, ip, r5
    57b8:	ea62 0204 	orn	r2, r2, r4
    57bc:	ea66 0604 	orn	r6, r6, r4
    57c0:	d00a      	beq.n	57d8 <strcmp+0x70>
    57c2:	ea63 0304 	orn	r3, r3, r4
    57c6:	4662      	mov	r2, ip
    57c8:	ea67 0704 	orn	r7, r7, r4
    57cc:	4666      	mov	r6, ip
    57ce:	e003      	b.n	57d8 <strcmp+0x70>
    57d0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    57d4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    57d8:	fa82 f54c 	uadd8	r5, r2, ip
    57dc:	ea82 0406 	eor.w	r4, r2, r6
    57e0:	faa4 f48c 	sel	r4, r4, ip
    57e4:	bb6c      	cbnz	r4, 5842 <strcmp+0xda>
    57e6:	fa83 f54c 	uadd8	r5, r3, ip
    57ea:	ea83 0507 	eor.w	r5, r3, r7
    57ee:	faa5 f58c 	sel	r5, r5, ip
    57f2:	b995      	cbnz	r5, 581a <strcmp+0xb2>
    57f4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
    57f8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
    57fc:	fa82 f54c 	uadd8	r5, r2, ip
    5800:	ea82 0406 	eor.w	r4, r2, r6
    5804:	faa4 f48c 	sel	r4, r4, ip
    5808:	fa83 f54c 	uadd8	r5, r3, ip
    580c:	ea83 0507 	eor.w	r5, r3, r7
    5810:	faa5 f58c 	sel	r5, r5, ip
    5814:	4325      	orrs	r5, r4
    5816:	d0db      	beq.n	57d0 <strcmp+0x68>
    5818:	b99c      	cbnz	r4, 5842 <strcmp+0xda>
    581a:	ba2d      	rev	r5, r5
    581c:	fab5 f485 	clz	r4, r5
    5820:	f024 0407 	bic.w	r4, r4, #7
    5824:	fa27 f104 	lsr.w	r1, r7, r4
    5828:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    582c:	fa23 f304 	lsr.w	r3, r3, r4
    5830:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    5834:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    5838:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    583c:	eba0 0001 	sub.w	r0, r0, r1
    5840:	4770      	bx	lr
    5842:	ba24      	rev	r4, r4
    5844:	fab4 f484 	clz	r4, r4
    5848:	f024 0407 	bic.w	r4, r4, #7
    584c:	fa26 f104 	lsr.w	r1, r6, r4
    5850:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    5854:	fa22 f204 	lsr.w	r2, r2, r4
    5858:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    585c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    5860:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    5864:	eba0 0001 	sub.w	r0, r0, r1
    5868:	4770      	bx	lr
    586a:	f014 0f03 	tst.w	r4, #3
    586e:	d13c      	bne.n	58ea <strcmp+0x182>
    5870:	f010 0403 	ands.w	r4, r0, #3
    5874:	d128      	bne.n	58c8 <strcmp+0x160>
    5876:	f850 2b08 	ldr.w	r2, [r0], #8
    587a:	f851 3b08 	ldr.w	r3, [r1], #8
    587e:	fa82 f54c 	uadd8	r5, r2, ip
    5882:	ea82 0503 	eor.w	r5, r2, r3
    5886:	faa5 f58c 	sel	r5, r5, ip
    588a:	b95d      	cbnz	r5, 58a4 <strcmp+0x13c>
    588c:	f850 2c04 	ldr.w	r2, [r0, #-4]
    5890:	f851 3c04 	ldr.w	r3, [r1, #-4]
    5894:	fa82 f54c 	uadd8	r5, r2, ip
    5898:	ea82 0503 	eor.w	r5, r2, r3
    589c:	faa5 f58c 	sel	r5, r5, ip
    58a0:	2d00      	cmp	r5, #0
    58a2:	d0e8      	beq.n	5876 <strcmp+0x10e>
    58a4:	ba2d      	rev	r5, r5
    58a6:	fab5 f485 	clz	r4, r5
    58aa:	f024 0407 	bic.w	r4, r4, #7
    58ae:	fa23 f104 	lsr.w	r1, r3, r4
    58b2:	fa22 f204 	lsr.w	r2, r2, r4
    58b6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    58ba:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    58be:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    58c2:	eba0 0001 	sub.w	r0, r0, r1
    58c6:	4770      	bx	lr
    58c8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
    58cc:	f020 0003 	bic.w	r0, r0, #3
    58d0:	f850 2b08 	ldr.w	r2, [r0], #8
    58d4:	f021 0103 	bic.w	r1, r1, #3
    58d8:	f851 3b08 	ldr.w	r3, [r1], #8
    58dc:	fa0c f404 	lsl.w	r4, ip, r4
    58e0:	ea62 0204 	orn	r2, r2, r4
    58e4:	ea63 0304 	orn	r3, r3, r4
    58e8:	e7c9      	b.n	587e <strcmp+0x116>
    58ea:	f010 0403 	ands.w	r4, r0, #3
    58ee:	d01a      	beq.n	5926 <strcmp+0x1be>
    58f0:	eba1 0104 	sub.w	r1, r1, r4
    58f4:	f020 0003 	bic.w	r0, r0, #3
    58f8:	07e4      	lsls	r4, r4, #31
    58fa:	f850 2b04 	ldr.w	r2, [r0], #4
    58fe:	d006      	beq.n	590e <strcmp+0x1a6>
    5900:	d20f      	bcs.n	5922 <strcmp+0x1ba>
    5902:	788b      	ldrb	r3, [r1, #2]
    5904:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
    5908:	1ae4      	subs	r4, r4, r3
    590a:	d106      	bne.n	591a <strcmp+0x1b2>
    590c:	b12b      	cbz	r3, 591a <strcmp+0x1b2>
    590e:	78cb      	ldrb	r3, [r1, #3]
    5910:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
    5914:	1ae4      	subs	r4, r4, r3
    5916:	d100      	bne.n	591a <strcmp+0x1b2>
    5918:	b91b      	cbnz	r3, 5922 <strcmp+0x1ba>
    591a:	4620      	mov	r0, r4
    591c:	f85d 4b10 	ldr.w	r4, [sp], #16
    5920:	4770      	bx	lr
    5922:	f101 0104 	add.w	r1, r1, #4
    5926:	f850 2b04 	ldr.w	r2, [r0], #4
    592a:	07cc      	lsls	r4, r1, #31
    592c:	f021 0103 	bic.w	r1, r1, #3
    5930:	f851 3b04 	ldr.w	r3, [r1], #4
    5934:	d848      	bhi.n	59c8 <strcmp+0x260>
    5936:	d224      	bcs.n	5982 <strcmp+0x21a>
    5938:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
    593c:	fa82 f54c 	uadd8	r5, r2, ip
    5940:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
    5944:	faa5 f58c 	sel	r5, r5, ip
    5948:	d10a      	bne.n	5960 <strcmp+0x1f8>
    594a:	b965      	cbnz	r5, 5966 <strcmp+0x1fe>
    594c:	f851 3b04 	ldr.w	r3, [r1], #4
    5950:	ea84 0402 	eor.w	r4, r4, r2
    5954:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
    5958:	d10e      	bne.n	5978 <strcmp+0x210>
    595a:	f850 2b04 	ldr.w	r2, [r0], #4
    595e:	e7eb      	b.n	5938 <strcmp+0x1d0>
    5960:	ea4f 2313 	mov.w	r3, r3, lsr #8
    5964:	e055      	b.n	5a12 <strcmp+0x2aa>
    5966:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
    596a:	d14d      	bne.n	5a08 <strcmp+0x2a0>
    596c:	7808      	ldrb	r0, [r1, #0]
    596e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    5972:	f1c0 0000 	rsb	r0, r0, #0
    5976:	4770      	bx	lr
    5978:	ea4f 6212 	mov.w	r2, r2, lsr #24
    597c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    5980:	e047      	b.n	5a12 <strcmp+0x2aa>
    5982:	ea02 441c 	and.w	r4, r2, ip, lsr #16
    5986:	fa82 f54c 	uadd8	r5, r2, ip
    598a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
    598e:	faa5 f58c 	sel	r5, r5, ip
    5992:	d10a      	bne.n	59aa <strcmp+0x242>
    5994:	b965      	cbnz	r5, 59b0 <strcmp+0x248>
    5996:	f851 3b04 	ldr.w	r3, [r1], #4
    599a:	ea84 0402 	eor.w	r4, r4, r2
    599e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
    59a2:	d10c      	bne.n	59be <strcmp+0x256>
    59a4:	f850 2b04 	ldr.w	r2, [r0], #4
    59a8:	e7eb      	b.n	5982 <strcmp+0x21a>
    59aa:	ea4f 4313 	mov.w	r3, r3, lsr #16
    59ae:	e030      	b.n	5a12 <strcmp+0x2aa>
    59b0:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
    59b4:	d128      	bne.n	5a08 <strcmp+0x2a0>
    59b6:	880b      	ldrh	r3, [r1, #0]
    59b8:	ea4f 4212 	mov.w	r2, r2, lsr #16
    59bc:	e029      	b.n	5a12 <strcmp+0x2aa>
    59be:	ea4f 4212 	mov.w	r2, r2, lsr #16
    59c2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
    59c6:	e024      	b.n	5a12 <strcmp+0x2aa>
    59c8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
    59cc:	fa82 f54c 	uadd8	r5, r2, ip
    59d0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
    59d4:	faa5 f58c 	sel	r5, r5, ip
    59d8:	d10a      	bne.n	59f0 <strcmp+0x288>
    59da:	b965      	cbnz	r5, 59f6 <strcmp+0x28e>
    59dc:	f851 3b04 	ldr.w	r3, [r1], #4
    59e0:	ea84 0402 	eor.w	r4, r4, r2
    59e4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
    59e8:	d109      	bne.n	59fe <strcmp+0x296>
    59ea:	f850 2b04 	ldr.w	r2, [r0], #4
    59ee:	e7eb      	b.n	59c8 <strcmp+0x260>
    59f0:	ea4f 6313 	mov.w	r3, r3, lsr #24
    59f4:	e00d      	b.n	5a12 <strcmp+0x2aa>
    59f6:	f015 0fff 	tst.w	r5, #255	; 0xff
    59fa:	d105      	bne.n	5a08 <strcmp+0x2a0>
    59fc:	680b      	ldr	r3, [r1, #0]
    59fe:	ea4f 2212 	mov.w	r2, r2, lsr #8
    5a02:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    5a06:	e004      	b.n	5a12 <strcmp+0x2aa>
    5a08:	f04f 0000 	mov.w	r0, #0
    5a0c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    5a10:	4770      	bx	lr
    5a12:	ba12      	rev	r2, r2
    5a14:	ba1b      	rev	r3, r3
    5a16:	fa82 f44c 	uadd8	r4, r2, ip
    5a1a:	ea82 0403 	eor.w	r4, r2, r3
    5a1e:	faa4 f58c 	sel	r5, r4, ip
    5a22:	fab5 f485 	clz	r4, r5
    5a26:	fa02 f204 	lsl.w	r2, r2, r4
    5a2a:	fa03 f304 	lsl.w	r3, r3, r4
    5a2e:	ea4f 6012 	mov.w	r0, r2, lsr #24
    5a32:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    5a36:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
    5a3a:	4770      	bx	lr
    5a3c:	0000      	movs	r0, r0
	...

00005a40 <strlen>:
    5a40:	f890 f000 	pld	[r0]
    5a44:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    5a48:	f020 0107 	bic.w	r1, r0, #7
    5a4c:	f06f 0c00 	mvn.w	ip, #0
    5a50:	f010 0407 	ands.w	r4, r0, #7
    5a54:	f891 f020 	pld	[r1, #32]
    5a58:	f040 8049 	bne.w	5aee <strlen+0xae>
    5a5c:	f04f 0400 	mov.w	r4, #0
    5a60:	f06f 0007 	mvn.w	r0, #7
    5a64:	e9d1 2300 	ldrd	r2, r3, [r1]
    5a68:	f891 f040 	pld	[r1, #64]	; 0x40
    5a6c:	f100 0008 	add.w	r0, r0, #8
    5a70:	fa82 f24c 	uadd8	r2, r2, ip
    5a74:	faa4 f28c 	sel	r2, r4, ip
    5a78:	fa83 f34c 	uadd8	r3, r3, ip
    5a7c:	faa2 f38c 	sel	r3, r2, ip
    5a80:	bb4b      	cbnz	r3, 5ad6 <strlen+0x96>
    5a82:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    5a86:	fa82 f24c 	uadd8	r2, r2, ip
    5a8a:	f100 0008 	add.w	r0, r0, #8
    5a8e:	faa4 f28c 	sel	r2, r4, ip
    5a92:	fa83 f34c 	uadd8	r3, r3, ip
    5a96:	faa2 f38c 	sel	r3, r2, ip
    5a9a:	b9e3      	cbnz	r3, 5ad6 <strlen+0x96>
    5a9c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    5aa0:	fa82 f24c 	uadd8	r2, r2, ip
    5aa4:	f100 0008 	add.w	r0, r0, #8
    5aa8:	faa4 f28c 	sel	r2, r4, ip
    5aac:	fa83 f34c 	uadd8	r3, r3, ip
    5ab0:	faa2 f38c 	sel	r3, r2, ip
    5ab4:	b97b      	cbnz	r3, 5ad6 <strlen+0x96>
    5ab6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    5aba:	f101 0120 	add.w	r1, r1, #32
    5abe:	fa82 f24c 	uadd8	r2, r2, ip
    5ac2:	f100 0008 	add.w	r0, r0, #8
    5ac6:	faa4 f28c 	sel	r2, r4, ip
    5aca:	fa83 f34c 	uadd8	r3, r3, ip
    5ace:	faa2 f38c 	sel	r3, r2, ip
    5ad2:	2b00      	cmp	r3, #0
    5ad4:	d0c6      	beq.n	5a64 <strlen+0x24>
    5ad6:	2a00      	cmp	r2, #0
    5ad8:	bf04      	itt	eq
    5ada:	3004      	addeq	r0, #4
    5adc:	461a      	moveq	r2, r3
    5ade:	ba12      	rev	r2, r2
    5ae0:	fab2 f282 	clz	r2, r2
    5ae4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    5ae8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    5aec:	4770      	bx	lr
    5aee:	e9d1 2300 	ldrd	r2, r3, [r1]
    5af2:	f004 0503 	and.w	r5, r4, #3
    5af6:	f1c4 0000 	rsb	r0, r4, #0
    5afa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    5afe:	f014 0f04 	tst.w	r4, #4
    5b02:	f891 f040 	pld	[r1, #64]	; 0x40
    5b06:	fa0c f505 	lsl.w	r5, ip, r5
    5b0a:	ea62 0205 	orn	r2, r2, r5
    5b0e:	bf1c      	itt	ne
    5b10:	ea63 0305 	ornne	r3, r3, r5
    5b14:	4662      	movne	r2, ip
    5b16:	f04f 0400 	mov.w	r4, #0
    5b1a:	e7a9      	b.n	5a70 <strlen+0x30>
    5b1c:	0000      	movs	r0, r0
	...

00005b20 <nan>:
    5b20:	ed9f 0b01 	vldr	d0, [pc, #4]	; 5b28 <nan+0x8>
    5b24:	4770      	bx	lr
    5b26:	bf00      	nop
    5b28:	00000000 	.word	0x00000000
    5b2c:	7ff80000 	.word	0x7ff80000

00005b30 <nanf>:
    5b30:	ed9f 0a01 	vldr	s0, [pc, #4]	; 5b38 <nanf+0x8>
    5b34:	4770      	bx	lr
    5b36:	bf00      	nop
    5b38:	7fc00000 	.word	0x7fc00000

00005b3c <_malloc_trim_r>:
    5b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5b3e:	4f24      	ldr	r7, [pc, #144]	; (5bd0 <_malloc_trim_r+0x94>)
    5b40:	460c      	mov	r4, r1
    5b42:	4606      	mov	r6, r0
    5b44:	f7fe f838 	bl	3bb8 <__malloc_lock>
    5b48:	68bb      	ldr	r3, [r7, #8]
    5b4a:	685d      	ldr	r5, [r3, #4]
    5b4c:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
    5b50:	310f      	adds	r1, #15
    5b52:	f025 0503 	bic.w	r5, r5, #3
    5b56:	194b      	adds	r3, r1, r5
    5b58:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    5b5c:	f023 030f 	bic.w	r3, r3, #15
    5b60:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
    5b64:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    5b68:	db07      	blt.n	5b7a <_malloc_trim_r+0x3e>
    5b6a:	2100      	movs	r1, #0
    5b6c:	4630      	mov	r0, r6
    5b6e:	f7ff fd95 	bl	569c <_sbrk_r>
    5b72:	68bb      	ldr	r3, [r7, #8]
    5b74:	442b      	add	r3, r5
    5b76:	4298      	cmp	r0, r3
    5b78:	d004      	beq.n	5b84 <_malloc_trim_r+0x48>
    5b7a:	4630      	mov	r0, r6
    5b7c:	f7fe f822 	bl	3bc4 <__malloc_unlock>
    5b80:	2000      	movs	r0, #0
    5b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5b84:	4261      	negs	r1, r4
    5b86:	4630      	mov	r0, r6
    5b88:	f7ff fd88 	bl	569c <_sbrk_r>
    5b8c:	3001      	adds	r0, #1
    5b8e:	d00d      	beq.n	5bac <_malloc_trim_r+0x70>
    5b90:	4a10      	ldr	r2, [pc, #64]	; (5bd4 <_malloc_trim_r+0x98>)
    5b92:	68bb      	ldr	r3, [r7, #8]
    5b94:	1b2d      	subs	r5, r5, r4
    5b96:	f045 0501 	orr.w	r5, r5, #1
    5b9a:	605d      	str	r5, [r3, #4]
    5b9c:	6813      	ldr	r3, [r2, #0]
    5b9e:	4630      	mov	r0, r6
    5ba0:	1b1b      	subs	r3, r3, r4
    5ba2:	6013      	str	r3, [r2, #0]
    5ba4:	f7fe f80e 	bl	3bc4 <__malloc_unlock>
    5ba8:	2001      	movs	r0, #1
    5baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5bac:	2100      	movs	r1, #0
    5bae:	4630      	mov	r0, r6
    5bb0:	f7ff fd74 	bl	569c <_sbrk_r>
    5bb4:	68ba      	ldr	r2, [r7, #8]
    5bb6:	1a83      	subs	r3, r0, r2
    5bb8:	2b0f      	cmp	r3, #15
    5bba:	ddde      	ble.n	5b7a <_malloc_trim_r+0x3e>
    5bbc:	f043 0301 	orr.w	r3, r3, #1
    5bc0:	6053      	str	r3, [r2, #4]
    5bc2:	4b05      	ldr	r3, [pc, #20]	; (5bd8 <_malloc_trim_r+0x9c>)
    5bc4:	4903      	ldr	r1, [pc, #12]	; (5bd4 <_malloc_trim_r+0x98>)
    5bc6:	681b      	ldr	r3, [r3, #0]
    5bc8:	1ac0      	subs	r0, r0, r3
    5bca:	6008      	str	r0, [r1, #0]
    5bcc:	e7d5      	b.n	5b7a <_malloc_trim_r+0x3e>
    5bce:	bf00      	nop
    5bd0:	20007dc8 	.word	0x20007dc8
    5bd4:	20008aac 	.word	0x20008aac
    5bd8:	200081d0 	.word	0x200081d0

00005bdc <_free_r>:
    5bdc:	2900      	cmp	r1, #0
    5bde:	d061      	beq.n	5ca4 <_free_r+0xc8>
    5be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5be2:	460c      	mov	r4, r1
    5be4:	4606      	mov	r6, r0
    5be6:	f7fd ffe7 	bl	3bb8 <__malloc_lock>
    5bea:	f854 2c04 	ldr.w	r2, [r4, #-4]
    5bee:	4f7b      	ldr	r7, [pc, #492]	; (5ddc <_free_r+0x200>)
    5bf0:	f1a4 0508 	sub.w	r5, r4, #8
    5bf4:	f022 0101 	bic.w	r1, r2, #1
    5bf8:	eb05 0c01 	add.w	ip, r5, r1
    5bfc:	68b8      	ldr	r0, [r7, #8]
    5bfe:	f8dc 3004 	ldr.w	r3, [ip, #4]
    5c02:	4560      	cmp	r0, ip
    5c04:	f023 0303 	bic.w	r3, r3, #3
    5c08:	f000 808b 	beq.w	5d22 <_free_r+0x146>
    5c0c:	07d2      	lsls	r2, r2, #31
    5c0e:	f8cc 3004 	str.w	r3, [ip, #4]
    5c12:	d432      	bmi.n	5c7a <_free_r+0x9e>
    5c14:	f854 2c08 	ldr.w	r2, [r4, #-8]
    5c18:	1aad      	subs	r5, r5, r2
    5c1a:	4411      	add	r1, r2
    5c1c:	68aa      	ldr	r2, [r5, #8]
    5c1e:	f107 0008 	add.w	r0, r7, #8
    5c22:	4282      	cmp	r2, r0
    5c24:	d06a      	beq.n	5cfc <_free_r+0x120>
    5c26:	eb0c 0403 	add.w	r4, ip, r3
    5c2a:	f8d4 e004 	ldr.w	lr, [r4, #4]
    5c2e:	68ec      	ldr	r4, [r5, #12]
    5c30:	60d4      	str	r4, [r2, #12]
    5c32:	f01e 0f01 	tst.w	lr, #1
    5c36:	60a2      	str	r2, [r4, #8]
    5c38:	f000 8097 	beq.w	5d6a <_free_r+0x18e>
    5c3c:	f041 0301 	orr.w	r3, r1, #1
    5c40:	606b      	str	r3, [r5, #4]
    5c42:	f8cc 1000 	str.w	r1, [ip]
    5c46:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    5c4a:	d235      	bcs.n	5cb8 <_free_r+0xdc>
    5c4c:	6878      	ldr	r0, [r7, #4]
    5c4e:	08cb      	lsrs	r3, r1, #3
    5c50:	2201      	movs	r2, #1
    5c52:	0949      	lsrs	r1, r1, #5
    5c54:	3301      	adds	r3, #1
    5c56:	408a      	lsls	r2, r1
    5c58:	4302      	orrs	r2, r0
    5c5a:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    5c5e:	607a      	str	r2, [r7, #4]
    5c60:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    5c64:	3a08      	subs	r2, #8
    5c66:	e9c5 1202 	strd	r1, r2, [r5, #8]
    5c6a:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    5c6e:	60cd      	str	r5, [r1, #12]
    5c70:	4630      	mov	r0, r6
    5c72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    5c76:	f7fd bfa5 	b.w	3bc4 <__malloc_unlock>
    5c7a:	eb0c 0203 	add.w	r2, ip, r3
    5c7e:	6852      	ldr	r2, [r2, #4]
    5c80:	07d0      	lsls	r0, r2, #31
    5c82:	d410      	bmi.n	5ca6 <_free_r+0xca>
    5c84:	4419      	add	r1, r3
    5c86:	f107 0008 	add.w	r0, r7, #8
    5c8a:	f8dc 3008 	ldr.w	r3, [ip, #8]
    5c8e:	4283      	cmp	r3, r0
    5c90:	d073      	beq.n	5d7a <_free_r+0x19e>
    5c92:	f8dc 200c 	ldr.w	r2, [ip, #12]
    5c96:	60da      	str	r2, [r3, #12]
    5c98:	6093      	str	r3, [r2, #8]
    5c9a:	f041 0301 	orr.w	r3, r1, #1
    5c9e:	606b      	str	r3, [r5, #4]
    5ca0:	5069      	str	r1, [r5, r1]
    5ca2:	e7d0      	b.n	5c46 <_free_r+0x6a>
    5ca4:	4770      	bx	lr
    5ca6:	f041 0301 	orr.w	r3, r1, #1
    5caa:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    5cae:	f844 3c04 	str.w	r3, [r4, #-4]
    5cb2:	f8cc 1000 	str.w	r1, [ip]
    5cb6:	d3c9      	bcc.n	5c4c <_free_r+0x70>
    5cb8:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
    5cbc:	ea4f 2351 	mov.w	r3, r1, lsr #9
    5cc0:	d248      	bcs.n	5d54 <_free_r+0x178>
    5cc2:	098b      	lsrs	r3, r1, #6
    5cc4:	f103 0039 	add.w	r0, r3, #57	; 0x39
    5cc8:	f103 0238 	add.w	r2, r3, #56	; 0x38
    5ccc:	00c3      	lsls	r3, r0, #3
    5cce:	18f8      	adds	r0, r7, r3
    5cd0:	58fb      	ldr	r3, [r7, r3]
    5cd2:	3808      	subs	r0, #8
    5cd4:	4298      	cmp	r0, r3
    5cd6:	d059      	beq.n	5d8c <_free_r+0x1b0>
    5cd8:	685a      	ldr	r2, [r3, #4]
    5cda:	f022 0203 	bic.w	r2, r2, #3
    5cde:	428a      	cmp	r2, r1
    5ce0:	d902      	bls.n	5ce8 <_free_r+0x10c>
    5ce2:	689b      	ldr	r3, [r3, #8]
    5ce4:	4298      	cmp	r0, r3
    5ce6:	d1f7      	bne.n	5cd8 <_free_r+0xfc>
    5ce8:	68d8      	ldr	r0, [r3, #12]
    5cea:	e9c5 3002 	strd	r3, r0, [r5, #8]
    5cee:	6085      	str	r5, [r0, #8]
    5cf0:	60dd      	str	r5, [r3, #12]
    5cf2:	4630      	mov	r0, r6
    5cf4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    5cf8:	f7fd bf64 	b.w	3bc4 <__malloc_unlock>
    5cfc:	eb0c 0203 	add.w	r2, ip, r3
    5d00:	6852      	ldr	r2, [r2, #4]
    5d02:	07d2      	lsls	r2, r2, #31
    5d04:	d463      	bmi.n	5dce <_free_r+0x1f2>
    5d06:	440b      	add	r3, r1
    5d08:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
    5d0c:	60ca      	str	r2, [r1, #12]
    5d0e:	6091      	str	r1, [r2, #8]
    5d10:	f043 0201 	orr.w	r2, r3, #1
    5d14:	606a      	str	r2, [r5, #4]
    5d16:	4630      	mov	r0, r6
    5d18:	50eb      	str	r3, [r5, r3]
    5d1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    5d1e:	f7fd bf51 	b.w	3bc4 <__malloc_unlock>
    5d22:	440b      	add	r3, r1
    5d24:	07d1      	lsls	r1, r2, #31
    5d26:	d407      	bmi.n	5d38 <_free_r+0x15c>
    5d28:	f854 2c08 	ldr.w	r2, [r4, #-8]
    5d2c:	1aad      	subs	r5, r5, r2
    5d2e:	4413      	add	r3, r2
    5d30:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
    5d34:	60ca      	str	r2, [r1, #12]
    5d36:	6091      	str	r1, [r2, #8]
    5d38:	f043 0201 	orr.w	r2, r3, #1
    5d3c:	606a      	str	r2, [r5, #4]
    5d3e:	4a28      	ldr	r2, [pc, #160]	; (5de0 <_free_r+0x204>)
    5d40:	60bd      	str	r5, [r7, #8]
    5d42:	6812      	ldr	r2, [r2, #0]
    5d44:	429a      	cmp	r2, r3
    5d46:	d893      	bhi.n	5c70 <_free_r+0x94>
    5d48:	4b26      	ldr	r3, [pc, #152]	; (5de4 <_free_r+0x208>)
    5d4a:	4630      	mov	r0, r6
    5d4c:	6819      	ldr	r1, [r3, #0]
    5d4e:	f7ff fef5 	bl	5b3c <_malloc_trim_r>
    5d52:	e78d      	b.n	5c70 <_free_r+0x94>
    5d54:	2b14      	cmp	r3, #20
    5d56:	d90a      	bls.n	5d6e <_free_r+0x192>
    5d58:	2b54      	cmp	r3, #84	; 0x54
    5d5a:	d81f      	bhi.n	5d9c <_free_r+0x1c0>
    5d5c:	0b0b      	lsrs	r3, r1, #12
    5d5e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    5d62:	f103 026e 	add.w	r2, r3, #110	; 0x6e
    5d66:	00c3      	lsls	r3, r0, #3
    5d68:	e7b1      	b.n	5cce <_free_r+0xf2>
    5d6a:	4419      	add	r1, r3
    5d6c:	e78d      	b.n	5c8a <_free_r+0xae>
    5d6e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    5d72:	f103 025b 	add.w	r2, r3, #91	; 0x5b
    5d76:	00c3      	lsls	r3, r0, #3
    5d78:	e7a9      	b.n	5cce <_free_r+0xf2>
    5d7a:	f041 0301 	orr.w	r3, r1, #1
    5d7e:	e9c7 5504 	strd	r5, r5, [r7, #16]
    5d82:	e9c5 0002 	strd	r0, r0, [r5, #8]
    5d86:	606b      	str	r3, [r5, #4]
    5d88:	5069      	str	r1, [r5, r1]
    5d8a:	e771      	b.n	5c70 <_free_r+0x94>
    5d8c:	6879      	ldr	r1, [r7, #4]
    5d8e:	1092      	asrs	r2, r2, #2
    5d90:	2401      	movs	r4, #1
    5d92:	fa04 f202 	lsl.w	r2, r4, r2
    5d96:	430a      	orrs	r2, r1
    5d98:	607a      	str	r2, [r7, #4]
    5d9a:	e7a6      	b.n	5cea <_free_r+0x10e>
    5d9c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    5da0:	d806      	bhi.n	5db0 <_free_r+0x1d4>
    5da2:	0bcb      	lsrs	r3, r1, #15
    5da4:	f103 0078 	add.w	r0, r3, #120	; 0x78
    5da8:	f103 0277 	add.w	r2, r3, #119	; 0x77
    5dac:	00c3      	lsls	r3, r0, #3
    5dae:	e78e      	b.n	5cce <_free_r+0xf2>
    5db0:	f240 5254 	movw	r2, #1364	; 0x554
    5db4:	4293      	cmp	r3, r2
    5db6:	d806      	bhi.n	5dc6 <_free_r+0x1ea>
    5db8:	0c8b      	lsrs	r3, r1, #18
    5dba:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    5dbe:	f103 027c 	add.w	r2, r3, #124	; 0x7c
    5dc2:	00c3      	lsls	r3, r0, #3
    5dc4:	e783      	b.n	5cce <_free_r+0xf2>
    5dc6:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    5dca:	227e      	movs	r2, #126	; 0x7e
    5dcc:	e77f      	b.n	5cce <_free_r+0xf2>
    5dce:	f041 0301 	orr.w	r3, r1, #1
    5dd2:	606b      	str	r3, [r5, #4]
    5dd4:	f8cc 1000 	str.w	r1, [ip]
    5dd8:	e74a      	b.n	5c70 <_free_r+0x94>
    5dda:	bf00      	nop
    5ddc:	20007dc8 	.word	0x20007dc8
    5de0:	200081d4 	.word	0x200081d4
    5de4:	20008adc 	.word	0x20008adc

00005de8 <rshift>:
    5de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5dec:	6904      	ldr	r4, [r0, #16]
    5dee:	ebb4 1f61 	cmp.w	r4, r1, asr #5
    5df2:	dd2f      	ble.n	5e54 <rshift+0x6c>
    5df4:	f100 0e14 	add.w	lr, r0, #20
    5df8:	114e      	asrs	r6, r1, #5
    5dfa:	f011 0c1f 	ands.w	ip, r1, #31
    5dfe:	eb0e 0584 	add.w	r5, lr, r4, lsl #2
    5e02:	eb0e 0386 	add.w	r3, lr, r6, lsl #2
    5e06:	d02b      	beq.n	5e60 <rshift+0x78>
    5e08:	f85e 1026 	ldr.w	r1, [lr, r6, lsl #2]
    5e0c:	3304      	adds	r3, #4
    5e0e:	429d      	cmp	r5, r3
    5e10:	fa21 f10c 	lsr.w	r1, r1, ip
    5e14:	f1cc 0820 	rsb	r8, ip, #32
    5e18:	d918      	bls.n	5e4c <rshift+0x64>
    5e1a:	4677      	mov	r7, lr
    5e1c:	681a      	ldr	r2, [r3, #0]
    5e1e:	fa02 f208 	lsl.w	r2, r2, r8
    5e22:	430a      	orrs	r2, r1
    5e24:	f847 2b04 	str.w	r2, [r7], #4
    5e28:	f853 1b04 	ldr.w	r1, [r3], #4
    5e2c:	429d      	cmp	r5, r3
    5e2e:	fa21 f10c 	lsr.w	r1, r1, ip
    5e32:	d8f3      	bhi.n	5e1c <rshift+0x34>
    5e34:	1ba3      	subs	r3, r4, r6
    5e36:	009b      	lsls	r3, r3, #2
    5e38:	3b05      	subs	r3, #5
    5e3a:	089b      	lsrs	r3, r3, #2
    5e3c:	3301      	adds	r3, #1
    5e3e:	eb0e 0483 	add.w	r4, lr, r3, lsl #2
    5e42:	f84e 1023 	str.w	r1, [lr, r3, lsl #2]
    5e46:	b1c9      	cbz	r1, 5e7c <rshift+0x94>
    5e48:	3404      	adds	r4, #4
    5e4a:	e017      	b.n	5e7c <rshift+0x94>
    5e4c:	6141      	str	r1, [r0, #20]
    5e4e:	4674      	mov	r4, lr
    5e50:	2900      	cmp	r1, #0
    5e52:	d1f9      	bne.n	5e48 <rshift+0x60>
    5e54:	2300      	movs	r3, #0
    5e56:	6103      	str	r3, [r0, #16]
    5e58:	2300      	movs	r3, #0
    5e5a:	6143      	str	r3, [r0, #20]
    5e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5e60:	429d      	cmp	r5, r3
    5e62:	bf88      	it	hi
    5e64:	f100 0210 	addhi.w	r2, r0, #16
    5e68:	d9f4      	bls.n	5e54 <rshift+0x6c>
    5e6a:	f853 1b04 	ldr.w	r1, [r3], #4
    5e6e:	f842 1f04 	str.w	r1, [r2, #4]!
    5e72:	429d      	cmp	r5, r3
    5e74:	d8f9      	bhi.n	5e6a <rshift+0x82>
    5e76:	1ba4      	subs	r4, r4, r6
    5e78:	eb0e 0484 	add.w	r4, lr, r4, lsl #2
    5e7c:	eba4 030e 	sub.w	r3, r4, lr
    5e80:	109b      	asrs	r3, r3, #2
    5e82:	4574      	cmp	r4, lr
    5e84:	6103      	str	r3, [r0, #16]
    5e86:	d0e7      	beq.n	5e58 <rshift+0x70>
    5e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005e8c <__gethex>:
    5e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5e90:	ed2d 8b02 	vpush	{d8}
    5e94:	680c      	ldr	r4, [r1, #0]
    5e96:	468b      	mov	fp, r1
    5e98:	78a1      	ldrb	r1, [r4, #2]
    5e9a:	b085      	sub	sp, #20
    5e9c:	2930      	cmp	r1, #48	; 0x30
    5e9e:	ee08 0a10 	vmov	s16, r0
    5ea2:	4692      	mov	sl, r2
    5ea4:	9302      	str	r3, [sp, #8]
    5ea6:	f040 81ce 	bne.w	6246 <__gethex+0x3ba>
    5eaa:	f06f 0001 	mvn.w	r0, #1
    5eae:	1b00      	subs	r0, r0, r4
    5eb0:	1ce2      	adds	r2, r4, #3
    5eb2:	1883      	adds	r3, r0, r2
    5eb4:	4614      	mov	r4, r2
    5eb6:	f812 1b01 	ldrb.w	r1, [r2], #1
    5eba:	2930      	cmp	r1, #48	; 0x30
    5ebc:	d0f9      	beq.n	5eb2 <__gethex+0x26>
    5ebe:	f8df 8300 	ldr.w	r8, [pc, #768]	; 61c0 <__gethex+0x334>
    5ec2:	f818 2001 	ldrb.w	r2, [r8, r1]
    5ec6:	2a00      	cmp	r2, #0
    5ec8:	f000 80e5 	beq.w	6096 <__gethex+0x20a>
    5ecc:	7822      	ldrb	r2, [r4, #0]
    5ece:	2700      	movs	r7, #0
    5ed0:	f818 2002 	ldrb.w	r2, [r8, r2]
    5ed4:	463d      	mov	r5, r7
    5ed6:	4626      	mov	r6, r4
    5ed8:	b12a      	cbz	r2, 5ee6 <__gethex+0x5a>
    5eda:	f816 2f01 	ldrb.w	r2, [r6, #1]!
    5ede:	f818 2002 	ldrb.w	r2, [r8, r2]
    5ee2:	2a00      	cmp	r2, #0
    5ee4:	d1f9      	bne.n	5eda <__gethex+0x4e>
    5ee6:	49b5      	ldr	r1, [pc, #724]	; (61bc <__gethex+0x330>)
    5ee8:	9301      	str	r3, [sp, #4]
    5eea:	2201      	movs	r2, #1
    5eec:	4630      	mov	r0, r6
    5eee:	f7ff fb19 	bl	5524 <strncmp>
    5ef2:	9b01      	ldr	r3, [sp, #4]
    5ef4:	4681      	mov	r9, r0
    5ef6:	2800      	cmp	r0, #0
    5ef8:	d04d      	beq.n	5f96 <__gethex+0x10a>
    5efa:	2d00      	cmp	r5, #0
    5efc:	d14e      	bne.n	5f9c <__gethex+0x110>
    5efe:	7832      	ldrb	r2, [r6, #0]
    5f00:	46a9      	mov	r9, r5
    5f02:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    5f06:	2a50      	cmp	r2, #80	; 0x50
    5f08:	4635      	mov	r5, r6
    5f0a:	d050      	beq.n	5fae <__gethex+0x122>
    5f0c:	f8cb 6000 	str.w	r6, [fp]
    5f10:	2f00      	cmp	r7, #0
    5f12:	d169      	bne.n	5fe8 <__gethex+0x15c>
    5f14:	1b2b      	subs	r3, r5, r4
    5f16:	3b01      	subs	r3, #1
    5f18:	2b07      	cmp	r3, #7
    5f1a:	4639      	mov	r1, r7
    5f1c:	dd04      	ble.n	5f28 <__gethex+0x9c>
    5f1e:	105b      	asrs	r3, r3, #1
    5f20:	2b07      	cmp	r3, #7
    5f22:	f101 0101 	add.w	r1, r1, #1
    5f26:	dcfa      	bgt.n	5f1e <__gethex+0x92>
    5f28:	ee18 0a10 	vmov	r0, s16
    5f2c:	f000 fb82 	bl	6634 <_Balloc>
    5f30:	4683      	mov	fp, r0
    5f32:	2800      	cmp	r0, #0
    5f34:	f000 8266 	beq.w	6404 <__gethex+0x578>
    5f38:	f100 0614 	add.w	r6, r0, #20
    5f3c:	42ac      	cmp	r4, r5
    5f3e:	9601      	str	r6, [sp, #4]
    5f40:	f080 81d2 	bcs.w	62e8 <__gethex+0x45c>
    5f44:	2700      	movs	r7, #0
    5f46:	f8cd 900c 	str.w	r9, [sp, #12]
    5f4a:	499c      	ldr	r1, [pc, #624]	; (61bc <__gethex+0x330>)
    5f4c:	46a1      	mov	r9, r4
    5f4e:	463c      	mov	r4, r7
    5f50:	e00c      	b.n	5f6c <__gethex+0xe0>
    5f52:	2f20      	cmp	r7, #32
    5f54:	d019      	beq.n	5f8a <__gethex+0xfe>
    5f56:	4638      	mov	r0, r7
    5f58:	3704      	adds	r7, #4
    5f5a:	782a      	ldrb	r2, [r5, #0]
    5f5c:	f818 2002 	ldrb.w	r2, [r8, r2]
    5f60:	f002 020f 	and.w	r2, r2, #15
    5f64:	4082      	lsls	r2, r0
    5f66:	4314      	orrs	r4, r2
    5f68:	454d      	cmp	r5, r9
    5f6a:	d047      	beq.n	5ffc <__gethex+0x170>
    5f6c:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
    5f70:	2a2e      	cmp	r2, #46	; 0x2e
    5f72:	d1ee      	bne.n	5f52 <__gethex+0xc6>
    5f74:	454d      	cmp	r5, r9
    5f76:	d3ec      	bcc.n	5f52 <__gethex+0xc6>
    5f78:	2201      	movs	r2, #1
    5f7a:	4628      	mov	r0, r5
    5f7c:	f7ff fad2 	bl	5524 <strncmp>
    5f80:	498e      	ldr	r1, [pc, #568]	; (61bc <__gethex+0x330>)
    5f82:	2800      	cmp	r0, #0
    5f84:	d0f0      	beq.n	5f68 <__gethex+0xdc>
    5f86:	2f20      	cmp	r7, #32
    5f88:	d1e5      	bne.n	5f56 <__gethex+0xca>
    5f8a:	2000      	movs	r0, #0
    5f8c:	f846 4b04 	str.w	r4, [r6], #4
    5f90:	2704      	movs	r7, #4
    5f92:	4604      	mov	r4, r0
    5f94:	e7e1      	b.n	5f5a <__gethex+0xce>
    5f96:	2d00      	cmp	r5, #0
    5f98:	f000 8142 	beq.w	6220 <__gethex+0x394>
    5f9c:	7832      	ldrb	r2, [r6, #0]
    5f9e:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    5fa2:	1bad      	subs	r5, r5, r6
    5fa4:	2a50      	cmp	r2, #80	; 0x50
    5fa6:	ea4f 0985 	mov.w	r9, r5, lsl #2
    5faa:	4635      	mov	r5, r6
    5fac:	d1ae      	bne.n	5f0c <__gethex+0x80>
    5fae:	786a      	ldrb	r2, [r5, #1]
    5fb0:	2a2b      	cmp	r2, #43	; 0x2b
    5fb2:	f000 8125 	beq.w	6200 <__gethex+0x374>
    5fb6:	2a2d      	cmp	r2, #45	; 0x2d
    5fb8:	f000 80a5 	beq.w	6106 <__gethex+0x27a>
    5fbc:	1c6e      	adds	r6, r5, #1
    5fbe:	2000      	movs	r0, #0
    5fc0:	f818 1002 	ldrb.w	r1, [r8, r2]
    5fc4:	1e4a      	subs	r2, r1, #1
    5fc6:	2a18      	cmp	r2, #24
    5fc8:	f200 809b 	bhi.w	6102 <__gethex+0x276>
    5fcc:	7872      	ldrb	r2, [r6, #1]
    5fce:	f818 2002 	ldrb.w	r2, [r8, r2]
    5fd2:	3910      	subs	r1, #16
    5fd4:	3601      	adds	r6, #1
    5fd6:	2a00      	cmp	r2, #0
    5fd8:	d15a      	bne.n	6090 <__gethex+0x204>
    5fda:	b100      	cbz	r0, 5fde <__gethex+0x152>
    5fdc:	4249      	negs	r1, r1
    5fde:	4489      	add	r9, r1
    5fe0:	f8cb 6000 	str.w	r6, [fp]
    5fe4:	2f00      	cmp	r7, #0
    5fe6:	d095      	beq.n	5f14 <__gethex+0x88>
    5fe8:	2b00      	cmp	r3, #0
    5fea:	bf14      	ite	ne
    5fec:	2500      	movne	r5, #0
    5fee:	2506      	moveq	r5, #6
    5ff0:	4628      	mov	r0, r5
    5ff2:	b005      	add	sp, #20
    5ff4:	ecbd 8b02 	vpop	{d8}
    5ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5ffc:	f8dd 900c 	ldr.w	r9, [sp, #12]
    6000:	4623      	mov	r3, r4
    6002:	f846 3b04 	str.w	r3, [r6], #4
    6006:	4618      	mov	r0, r3
    6008:	9b01      	ldr	r3, [sp, #4]
    600a:	1af6      	subs	r6, r6, r3
    600c:	10b6      	asrs	r6, r6, #2
    600e:	f8cb 6010 	str.w	r6, [fp, #16]
    6012:	f000 fbe9 	bl	67e8 <__hi0bits>
    6016:	0176      	lsls	r6, r6, #5
    6018:	f8da 4000 	ldr.w	r4, [sl]
    601c:	1a30      	subs	r0, r6, r0
    601e:	42a0      	cmp	r0, r4
    6020:	dc75      	bgt.n	610e <__gethex+0x282>
    6022:	f2c0 80ef 	blt.w	6204 <__gethex+0x378>
    6026:	2700      	movs	r7, #0
    6028:	f8da 3008 	ldr.w	r3, [sl, #8]
    602c:	454b      	cmp	r3, r9
    602e:	f2c0 8151 	blt.w	62d4 <__gethex+0x448>
    6032:	f8da 3004 	ldr.w	r3, [sl, #4]
    6036:	454b      	cmp	r3, r9
    6038:	dd4a      	ble.n	60d0 <__gethex+0x244>
    603a:	eba3 0909 	sub.w	r9, r3, r9
    603e:	454c      	cmp	r4, r9
    6040:	f300 8082 	bgt.w	6148 <__gethex+0x2bc>
    6044:	f8da 200c 	ldr.w	r2, [sl, #12]
    6048:	2a02      	cmp	r2, #2
    604a:	f000 8165 	beq.w	6318 <__gethex+0x48c>
    604e:	2a03      	cmp	r2, #3
    6050:	f000 8181 	beq.w	6356 <__gethex+0x4ca>
    6054:	2a01      	cmp	r2, #1
    6056:	f000 816f 	beq.w	6338 <__gethex+0x4ac>
    605a:	ee18 0a10 	vmov	r0, s16
    605e:	4659      	mov	r1, fp
    6060:	f000 fb0e 	bl	6680 <_Bfree>
    6064:	2550      	movs	r5, #80	; 0x50
    6066:	9a10      	ldr	r2, [sp, #64]	; 0x40
    6068:	2300      	movs	r3, #0
    606a:	4628      	mov	r0, r5
    606c:	6013      	str	r3, [r2, #0]
    606e:	b005      	add	sp, #20
    6070:	ecbd 8b02 	vpop	{d8}
    6074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6078:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    607c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    6080:	f1a2 0110 	sub.w	r1, r2, #16
    6084:	f816 2f01 	ldrb.w	r2, [r6, #1]!
    6088:	f818 2002 	ldrb.w	r2, [r8, r2]
    608c:	2a00      	cmp	r2, #0
    608e:	d0a4      	beq.n	5fda <__gethex+0x14e>
    6090:	2a19      	cmp	r2, #25
    6092:	ddf1      	ble.n	6078 <__gethex+0x1ec>
    6094:	e7a1      	b.n	5fda <__gethex+0x14e>
    6096:	4949      	ldr	r1, [pc, #292]	; (61bc <__gethex+0x330>)
    6098:	9301      	str	r3, [sp, #4]
    609a:	2201      	movs	r2, #1
    609c:	4620      	mov	r0, r4
    609e:	f7ff fa41 	bl	5524 <strncmp>
    60a2:	9b01      	ldr	r3, [sp, #4]
    60a4:	2800      	cmp	r0, #0
    60a6:	d16d      	bne.n	6184 <__gethex+0x2f8>
    60a8:	7861      	ldrb	r1, [r4, #1]
    60aa:	f818 2001 	ldrb.w	r2, [r8, r1]
    60ae:	1c65      	adds	r5, r4, #1
    60b0:	2a00      	cmp	r2, #0
    60b2:	d069      	beq.n	6188 <__gethex+0x2fc>
    60b4:	2930      	cmp	r1, #48	; 0x30
    60b6:	462c      	mov	r4, r5
    60b8:	d105      	bne.n	60c6 <__gethex+0x23a>
    60ba:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    60be:	2b30      	cmp	r3, #48	; 0x30
    60c0:	d0fb      	beq.n	60ba <__gethex+0x22e>
    60c2:	f818 2003 	ldrb.w	r2, [r8, r3]
    60c6:	fab2 f782 	clz	r7, r2
    60ca:	097f      	lsrs	r7, r7, #5
    60cc:	2301      	movs	r3, #1
    60ce:	e702      	b.n	5ed6 <__gethex+0x4a>
    60d0:	2501      	movs	r5, #1
    60d2:	b157      	cbz	r7, 60ea <__gethex+0x25e>
    60d4:	f8da 300c 	ldr.w	r3, [sl, #12]
    60d8:	2b02      	cmp	r3, #2
    60da:	d05d      	beq.n	6198 <__gethex+0x30c>
    60dc:	2b03      	cmp	r3, #3
    60de:	d05f      	beq.n	61a0 <__gethex+0x314>
    60e0:	2b01      	cmp	r3, #1
    60e2:	f000 8084 	beq.w	61ee <__gethex+0x362>
    60e6:	f045 0510 	orr.w	r5, r5, #16
    60ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
    60ec:	f8c3 b000 	str.w	fp, [r3]
    60f0:	9b02      	ldr	r3, [sp, #8]
    60f2:	4628      	mov	r0, r5
    60f4:	f8c3 9000 	str.w	r9, [r3]
    60f8:	b005      	add	sp, #20
    60fa:	ecbd 8b02 	vpop	{d8}
    60fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6102:	462e      	mov	r6, r5
    6104:	e702      	b.n	5f0c <__gethex+0x80>
    6106:	2001      	movs	r0, #1
    6108:	78aa      	ldrb	r2, [r5, #2]
    610a:	1cae      	adds	r6, r5, #2
    610c:	e758      	b.n	5fc0 <__gethex+0x134>
    610e:	1b06      	subs	r6, r0, r4
    6110:	4631      	mov	r1, r6
    6112:	4658      	mov	r0, fp
    6114:	f000 ff96 	bl	7044 <__any_on>
    6118:	4607      	mov	r7, r0
    611a:	b178      	cbz	r0, 613c <__gethex+0x2b0>
    611c:	1e72      	subs	r2, r6, #1
    611e:	1153      	asrs	r3, r2, #5
    6120:	9901      	ldr	r1, [sp, #4]
    6122:	2701      	movs	r7, #1
    6124:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    6128:	f002 031f 	and.w	r3, r2, #31
    612c:	fa07 f303 	lsl.w	r3, r7, r3
    6130:	420b      	tst	r3, r1
    6132:	d003      	beq.n	613c <__gethex+0x2b0>
    6134:	42ba      	cmp	r2, r7
    6136:	f300 80e2 	bgt.w	62fe <__gethex+0x472>
    613a:	2702      	movs	r7, #2
    613c:	4631      	mov	r1, r6
    613e:	4658      	mov	r0, fp
    6140:	44b1      	add	r9, r6
    6142:	f7ff fe51 	bl	5de8 <rshift>
    6146:	e76f      	b.n	6028 <__gethex+0x19c>
    6148:	f109 35ff 	add.w	r5, r9, #4294967295
    614c:	2f00      	cmp	r7, #0
    614e:	f040 80ce 	bne.w	62ee <__gethex+0x462>
    6152:	2d00      	cmp	r5, #0
    6154:	f040 80cd 	bne.w	62f2 <__gethex+0x466>
    6158:	116b      	asrs	r3, r5, #5
    615a:	9a01      	ldr	r2, [sp, #4]
    615c:	f005 051f 	and.w	r5, r5, #31
    6160:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    6164:	2301      	movs	r3, #1
    6166:	40ab      	lsls	r3, r5
    6168:	4213      	tst	r3, r2
    616a:	4649      	mov	r1, r9
    616c:	4658      	mov	r0, fp
    616e:	bf18      	it	ne
    6170:	f047 0702 	orrne.w	r7, r7, #2
    6174:	eba4 0409 	sub.w	r4, r4, r9
    6178:	f7ff fe36 	bl	5de8 <rshift>
    617c:	2502      	movs	r5, #2
    617e:	f8da 9004 	ldr.w	r9, [sl, #4]
    6182:	e7a6      	b.n	60d2 <__gethex+0x246>
    6184:	7821      	ldrb	r1, [r4, #0]
    6186:	4625      	mov	r5, r4
    6188:	f001 01df 	and.w	r1, r1, #223	; 0xdf
    618c:	2950      	cmp	r1, #80	; 0x50
    618e:	f000 80bf 	beq.w	6310 <__gethex+0x484>
    6192:	f8cb 5000 	str.w	r5, [fp]
    6196:	e727      	b.n	5fe8 <__gethex+0x15c>
    6198:	9b11      	ldr	r3, [sp, #68]	; 0x44
    619a:	f1c3 0301 	rsb	r3, r3, #1
    619e:	9311      	str	r3, [sp, #68]	; 0x44
    61a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    61a2:	2b00      	cmp	r3, #0
    61a4:	d09f      	beq.n	60e6 <__gethex+0x25a>
    61a6:	f8db 7010 	ldr.w	r7, [fp, #16]
    61aa:	f8dd 8004 	ldr.w	r8, [sp, #4]
    61ae:	00ba      	lsls	r2, r7, #2
    61b0:	4643      	mov	r3, r8
    61b2:	9201      	str	r2, [sp, #4]
    61b4:	eb08 0087 	add.w	r0, r8, r7, lsl #2
    61b8:	2100      	movs	r1, #0
    61ba:	e007      	b.n	61cc <__gethex+0x340>
    61bc:	200007c8 	.word	0x200007c8
    61c0:	200004e0 	.word	0x200004e0
    61c4:	4298      	cmp	r0, r3
    61c6:	f843 1c04 	str.w	r1, [r3, #-4]
    61ca:	d93f      	bls.n	624c <__gethex+0x3c0>
    61cc:	461e      	mov	r6, r3
    61ce:	f853 2b04 	ldr.w	r2, [r3], #4
    61d2:	f1b2 3fff 	cmp.w	r2, #4294967295
    61d6:	d0f5      	beq.n	61c4 <__gethex+0x338>
    61d8:	3201      	adds	r2, #1
    61da:	2d02      	cmp	r5, #2
    61dc:	6032      	str	r2, [r6, #0]
    61de:	f000 80bf 	beq.w	6360 <__gethex+0x4d4>
    61e2:	f014 041f 	ands.w	r4, r4, #31
    61e6:	f040 80e7 	bne.w	63b8 <__gethex+0x52c>
    61ea:	2521      	movs	r5, #33	; 0x21
    61ec:	e77d      	b.n	60ea <__gethex+0x25e>
    61ee:	07ba      	lsls	r2, r7, #30
    61f0:	f57f af79 	bpl.w	60e6 <__gethex+0x25a>
    61f4:	9b01      	ldr	r3, [sp, #4]
    61f6:	681b      	ldr	r3, [r3, #0]
    61f8:	431f      	orrs	r7, r3
    61fa:	07fb      	lsls	r3, r7, #31
    61fc:	d4d3      	bmi.n	61a6 <__gethex+0x31a>
    61fe:	e772      	b.n	60e6 <__gethex+0x25a>
    6200:	2000      	movs	r0, #0
    6202:	e781      	b.n	6108 <__gethex+0x27c>
    6204:	1a22      	subs	r2, r4, r0
    6206:	4659      	mov	r1, fp
    6208:	ee18 0a10 	vmov	r0, s16
    620c:	eba9 0902 	sub.w	r9, r9, r2
    6210:	f000 fc76 	bl	6b00 <__lshift>
    6214:	f100 0314 	add.w	r3, r0, #20
    6218:	4683      	mov	fp, r0
    621a:	9301      	str	r3, [sp, #4]
    621c:	2700      	movs	r7, #0
    621e:	e703      	b.n	6028 <__gethex+0x19c>
    6220:	7872      	ldrb	r2, [r6, #1]
    6222:	f818 0002 	ldrb.w	r0, [r8, r2]
    6226:	1c71      	adds	r1, r6, #1
    6228:	2800      	cmp	r0, #0
    622a:	f000 80a0 	beq.w	636e <__gethex+0x4e2>
    622e:	460d      	mov	r5, r1
    6230:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    6234:	f818 0002 	ldrb.w	r0, [r8, r2]
    6238:	2800      	cmp	r0, #0
    623a:	d1f8      	bne.n	622e <__gethex+0x3a2>
    623c:	1b75      	subs	r5, r6, r5
    623e:	ea4f 0985 	mov.w	r9, r5, lsl #2
    6242:	460e      	mov	r6, r1
    6244:	e65d      	b.n	5f02 <__gethex+0x76>
    6246:	3402      	adds	r4, #2
    6248:	2300      	movs	r3, #0
    624a:	e638      	b.n	5ebe <__gethex+0x32>
    624c:	f8db 3008 	ldr.w	r3, [fp, #8]
    6250:	429f      	cmp	r7, r3
    6252:	f280 808e 	bge.w	6372 <__gethex+0x4e6>
    6256:	463b      	mov	r3, r7
    6258:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
    625c:	2101      	movs	r1, #1
    625e:	3301      	adds	r3, #1
    6260:	2d02      	cmp	r5, #2
    6262:	f8cb 3010 	str.w	r3, [fp, #16]
    6266:	6151      	str	r1, [r2, #20]
    6268:	d07a      	beq.n	6360 <__gethex+0x4d4>
    626a:	429f      	cmp	r7, r3
    626c:	dab9      	bge.n	61e2 <__gethex+0x356>
    626e:	2b00      	cmp	r3, #0
    6270:	f340 809b 	ble.w	63aa <__gethex+0x51e>
    6274:	f8db 2014 	ldr.w	r2, [fp, #20]
    6278:	eb08 0383 	add.w	r3, r8, r3, lsl #2
    627c:	f10b 0018 	add.w	r0, fp, #24
    6280:	4283      	cmp	r3, r0
    6282:	ea4f 0252 	mov.w	r2, r2, lsr #1
    6286:	f240 80b1 	bls.w	63ec <__gethex+0x560>
    628a:	4644      	mov	r4, r8
    628c:	6801      	ldr	r1, [r0, #0]
    628e:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
    6292:	f844 2b04 	str.w	r2, [r4], #4
    6296:	f850 2b04 	ldr.w	r2, [r0], #4
    629a:	4283      	cmp	r3, r0
    629c:	ea4f 0252 	mov.w	r2, r2, lsr #1
    62a0:	d8f4      	bhi.n	628c <__gethex+0x400>
    62a2:	eba3 030b 	sub.w	r3, r3, fp
    62a6:	3b19      	subs	r3, #25
    62a8:	089b      	lsrs	r3, r3, #2
    62aa:	3301      	adds	r3, #1
    62ac:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
    62b0:	eb08 0383 	add.w	r3, r8, r3, lsl #2
    62b4:	2a00      	cmp	r2, #0
    62b6:	f040 809d 	bne.w	63f4 <__gethex+0x568>
    62ba:	eba3 0208 	sub.w	r2, r3, r8
    62be:	1092      	asrs	r2, r2, #2
    62c0:	4543      	cmp	r3, r8
    62c2:	f8cb 2010 	str.w	r2, [fp, #16]
    62c6:	d073      	beq.n	63b0 <__gethex+0x524>
    62c8:	f8da 3008 	ldr.w	r3, [sl, #8]
    62cc:	f109 0901 	add.w	r9, r9, #1
    62d0:	454b      	cmp	r3, r9
    62d2:	da8a      	bge.n	61ea <__gethex+0x35e>
    62d4:	ee18 0a10 	vmov	r0, s16
    62d8:	4659      	mov	r1, fp
    62da:	f000 f9d1 	bl	6680 <_Bfree>
    62de:	9a10      	ldr	r2, [sp, #64]	; 0x40
    62e0:	2300      	movs	r3, #0
    62e2:	6013      	str	r3, [r2, #0]
    62e4:	25a3      	movs	r5, #163	; 0xa3
    62e6:	e683      	b.n	5ff0 <__gethex+0x164>
    62e8:	9e01      	ldr	r6, [sp, #4]
    62ea:	2300      	movs	r3, #0
    62ec:	e689      	b.n	6002 <__gethex+0x176>
    62ee:	2701      	movs	r7, #1
    62f0:	e732      	b.n	6158 <__gethex+0x2cc>
    62f2:	4629      	mov	r1, r5
    62f4:	4658      	mov	r0, fp
    62f6:	f000 fea5 	bl	7044 <__any_on>
    62fa:	4607      	mov	r7, r0
    62fc:	e72c      	b.n	6158 <__gethex+0x2cc>
    62fe:	1eb1      	subs	r1, r6, #2
    6300:	4658      	mov	r0, fp
    6302:	f000 fe9f 	bl	7044 <__any_on>
    6306:	2800      	cmp	r0, #0
    6308:	f43f af17 	beq.w	613a <__gethex+0x2ae>
    630c:	2703      	movs	r7, #3
    630e:	e715      	b.n	613c <__gethex+0x2b0>
    6310:	f04f 0900 	mov.w	r9, #0
    6314:	2701      	movs	r7, #1
    6316:	e64a      	b.n	5fae <__gethex+0x122>
    6318:	9a11      	ldr	r2, [sp, #68]	; 0x44
    631a:	2a00      	cmp	r2, #0
    631c:	f47f ae9d 	bne.w	605a <__gethex+0x1ce>
    6320:	9902      	ldr	r1, [sp, #8]
    6322:	600b      	str	r3, [r1, #0]
    6324:	9b01      	ldr	r3, [sp, #4]
    6326:	2201      	movs	r2, #1
    6328:	f8cb 2010 	str.w	r2, [fp, #16]
    632c:	601a      	str	r2, [r3, #0]
    632e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6330:	2562      	movs	r5, #98	; 0x62
    6332:	f8c3 b000 	str.w	fp, [r3]
    6336:	e65b      	b.n	5ff0 <__gethex+0x164>
    6338:	454c      	cmp	r4, r9
    633a:	f47f ae8e 	bne.w	605a <__gethex+0x1ce>
    633e:	2c01      	cmp	r4, #1
    6340:	d0ee      	beq.n	6320 <__gethex+0x494>
    6342:	1e61      	subs	r1, r4, #1
    6344:	4658      	mov	r0, fp
    6346:	f000 fe7d 	bl	7044 <__any_on>
    634a:	2800      	cmp	r0, #0
    634c:	f43f ae85 	beq.w	605a <__gethex+0x1ce>
    6350:	f8da 3004 	ldr.w	r3, [sl, #4]
    6354:	e7e4      	b.n	6320 <__gethex+0x494>
    6356:	9a11      	ldr	r2, [sp, #68]	; 0x44
    6358:	2a00      	cmp	r2, #0
    635a:	f43f ae7e 	beq.w	605a <__gethex+0x1ce>
    635e:	e7df      	b.n	6320 <__gethex+0x494>
    6360:	f8da 3000 	ldr.w	r3, [sl]
    6364:	3b01      	subs	r3, #1
    6366:	42a3      	cmp	r3, r4
    6368:	d034      	beq.n	63d4 <__gethex+0x548>
    636a:	2522      	movs	r5, #34	; 0x22
    636c:	e6bd      	b.n	60ea <__gethex+0x25e>
    636e:	460e      	mov	r6, r1
    6370:	e5c7      	b.n	5f02 <__gethex+0x76>
    6372:	f8db 1004 	ldr.w	r1, [fp, #4]
    6376:	ee18 0a10 	vmov	r0, s16
    637a:	3101      	adds	r1, #1
    637c:	f000 f95a 	bl	6634 <_Balloc>
    6380:	4606      	mov	r6, r0
    6382:	b3c8      	cbz	r0, 63f8 <__gethex+0x56c>
    6384:	f8db 3010 	ldr.w	r3, [fp, #16]
    6388:	3302      	adds	r3, #2
    638a:	009a      	lsls	r2, r3, #2
    638c:	f10b 010c 	add.w	r1, fp, #12
    6390:	300c      	adds	r0, #12
    6392:	f7fb fa3b 	bl	180c <memcpy>
    6396:	4659      	mov	r1, fp
    6398:	ee18 0a10 	vmov	r0, s16
    639c:	f000 f970 	bl	6680 <_Bfree>
    63a0:	f106 0814 	add.w	r8, r6, #20
    63a4:	6933      	ldr	r3, [r6, #16]
    63a6:	46b3      	mov	fp, r6
    63a8:	e756      	b.n	6258 <__gethex+0x3cc>
    63aa:	2300      	movs	r3, #0
    63ac:	f8cb 3010 	str.w	r3, [fp, #16]
    63b0:	2300      	movs	r3, #0
    63b2:	f8cb 3014 	str.w	r3, [fp, #20]
    63b6:	e787      	b.n	62c8 <__gethex+0x43c>
    63b8:	9b01      	ldr	r3, [sp, #4]
    63ba:	4443      	add	r3, r8
    63bc:	f1c4 0420 	rsb	r4, r4, #32
    63c0:	f853 0c04 	ldr.w	r0, [r3, #-4]
    63c4:	f000 fa10 	bl	67e8 <__hi0bits>
    63c8:	42a0      	cmp	r0, r4
    63ca:	f6bf af0e 	bge.w	61ea <__gethex+0x35e>
    63ce:	f8db 3010 	ldr.w	r3, [fp, #16]
    63d2:	e74c      	b.n	626e <__gethex+0x3e2>
    63d4:	1163      	asrs	r3, r4, #5
    63d6:	f004 041f 	and.w	r4, r4, #31
    63da:	f858 2023 	ldr.w	r2, [r8, r3, lsl #2]
    63de:	2301      	movs	r3, #1
    63e0:	40a3      	lsls	r3, r4
    63e2:	4213      	tst	r3, r2
    63e4:	bf0c      	ite	eq
    63e6:	2522      	moveq	r5, #34	; 0x22
    63e8:	2521      	movne	r5, #33	; 0x21
    63ea:	e67e      	b.n	60ea <__gethex+0x25e>
    63ec:	f8c8 2000 	str.w	r2, [r8]
    63f0:	4643      	mov	r3, r8
    63f2:	b16a      	cbz	r2, 6410 <__gethex+0x584>
    63f4:	3304      	adds	r3, #4
    63f6:	e760      	b.n	62ba <__gethex+0x42e>
    63f8:	4b07      	ldr	r3, [pc, #28]	; (6418 <__gethex+0x58c>)
    63fa:	4808      	ldr	r0, [pc, #32]	; (641c <__gethex+0x590>)
    63fc:	4632      	mov	r2, r6
    63fe:	2184      	movs	r1, #132	; 0x84
    6400:	f004 fa7a 	bl	a8f8 <__assert_func>
    6404:	4b04      	ldr	r3, [pc, #16]	; (6418 <__gethex+0x58c>)
    6406:	4805      	ldr	r0, [pc, #20]	; (641c <__gethex+0x590>)
    6408:	465a      	mov	r2, fp
    640a:	21e4      	movs	r1, #228	; 0xe4
    640c:	f004 fa74 	bl	a8f8 <__assert_func>
    6410:	f8cb 2010 	str.w	r2, [fp, #16]
    6414:	e7cc      	b.n	63b0 <__gethex+0x524>
    6416:	bf00      	nop
    6418:	20000468 	.word	0x20000468
    641c:	2000047c 	.word	0x2000047c

00006420 <__match>:
    6420:	b410      	push	{r4}
    6422:	6804      	ldr	r4, [r0, #0]
    6424:	e009      	b.n	643a <__match+0x1a>
    6426:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    642a:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
    642e:	f1bc 0f19 	cmp.w	ip, #25
    6432:	bf98      	it	ls
    6434:	3320      	addls	r3, #32
    6436:	4293      	cmp	r3, r2
    6438:	d109      	bne.n	644e <__match+0x2e>
    643a:	f811 2b01 	ldrb.w	r2, [r1], #1
    643e:	2a00      	cmp	r2, #0
    6440:	d1f1      	bne.n	6426 <__match+0x6>
    6442:	3401      	adds	r4, #1
    6444:	6004      	str	r4, [r0, #0]
    6446:	2001      	movs	r0, #1
    6448:	f85d 4b04 	ldr.w	r4, [sp], #4
    644c:	4770      	bx	lr
    644e:	2000      	movs	r0, #0
    6450:	f85d 4b04 	ldr.w	r4, [sp], #4
    6454:	4770      	bx	lr
    6456:	bf00      	nop

00006458 <__hexnan>:
    6458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    645c:	6809      	ldr	r1, [r1, #0]
    645e:	b085      	sub	sp, #20
    6460:	114b      	asrs	r3, r1, #5
    6462:	f011 011f 	ands.w	r1, r1, #31
    6466:	9002      	str	r0, [sp, #8]
    6468:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    646c:	9103      	str	r1, [sp, #12]
    646e:	f040 808f 	bne.w	6590 <__hexnan+0x138>
    6472:	1f1d      	subs	r5, r3, #4
    6474:	9301      	str	r3, [sp, #4]
    6476:	9b02      	ldr	r3, [sp, #8]
    6478:	9901      	ldr	r1, [sp, #4]
    647a:	681c      	ldr	r4, [r3, #0]
    647c:	2300      	movs	r3, #0
    647e:	f841 3c04 	str.w	r3, [r1, #-4]
    6482:	7861      	ldrb	r1, [r4, #1]
    6484:	3401      	adds	r4, #1
    6486:	2900      	cmp	r1, #0
    6488:	f000 8098 	beq.w	65bc <__hexnan+0x164>
    648c:	f8df 9174 	ldr.w	r9, [pc, #372]	; 6604 <__hexnan+0x1ac>
    6490:	46a8      	mov	r8, r5
    6492:	46ac      	mov	ip, r5
    6494:	469a      	mov	sl, r3
    6496:	461e      	mov	r6, r3
    6498:	e00e      	b.n	64b8 <__hexnan+0x60>
    649a:	2920      	cmp	r1, #32
    649c:	f200 808c 	bhi.w	65b8 <__hexnan+0x160>
    64a0:	4556      	cmp	r6, sl
    64a2:	dd06      	ble.n	64b2 <__hexnan+0x5a>
    64a4:	45c4      	cmp	ip, r8
    64a6:	d201      	bcs.n	64ac <__hexnan+0x54>
    64a8:	2b07      	cmp	r3, #7
    64aa:	dd5b      	ble.n	6564 <__hexnan+0x10c>
    64ac:	4562      	cmp	r2, ip
    64ae:	d351      	bcc.n	6554 <__hexnan+0xfc>
    64b0:	2308      	movs	r3, #8
    64b2:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    64b6:	b1a1      	cbz	r1, 64e2 <__hexnan+0x8a>
    64b8:	f819 0001 	ldrb.w	r0, [r9, r1]
    64bc:	2800      	cmp	r0, #0
    64be:	d0ec      	beq.n	649a <__hexnan+0x42>
    64c0:	3301      	adds	r3, #1
    64c2:	2b08      	cmp	r3, #8
    64c4:	f106 0601 	add.w	r6, r6, #1
    64c8:	dc3a      	bgt.n	6540 <__hexnan+0xe8>
    64ca:	f8dc 1000 	ldr.w	r1, [ip]
    64ce:	0109      	lsls	r1, r1, #4
    64d0:	f000 000f 	and.w	r0, r0, #15
    64d4:	4308      	orrs	r0, r1
    64d6:	f8cc 0000 	str.w	r0, [ip]
    64da:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    64de:	2900      	cmp	r1, #0
    64e0:	d1ea      	bne.n	64b8 <__hexnan+0x60>
    64e2:	2e00      	cmp	r6, #0
    64e4:	d06a      	beq.n	65bc <__hexnan+0x164>
    64e6:	45c4      	cmp	ip, r8
    64e8:	d201      	bcs.n	64ee <__hexnan+0x96>
    64ea:	2b07      	cmp	r3, #7
    64ec:	dd74      	ble.n	65d8 <__hexnan+0x180>
    64ee:	4562      	cmp	r2, ip
    64f0:	d252      	bcs.n	6598 <__hexnan+0x140>
    64f2:	1f11      	subs	r1, r2, #4
    64f4:	4663      	mov	r3, ip
    64f6:	f853 0b04 	ldr.w	r0, [r3], #4
    64fa:	f841 0f04 	str.w	r0, [r1, #4]!
    64fe:	42ab      	cmp	r3, r5
    6500:	d9f9      	bls.n	64f6 <__hexnan+0x9e>
    6502:	eba5 030c 	sub.w	r3, r5, ip
    6506:	f023 0303 	bic.w	r3, r3, #3
    650a:	1c69      	adds	r1, r5, #1
    650c:	3304      	adds	r3, #4
    650e:	f10c 0c01 	add.w	ip, ip, #1
    6512:	4561      	cmp	r1, ip
    6514:	bf38      	it	cc
    6516:	2304      	movcc	r3, #4
    6518:	4413      	add	r3, r2
    651a:	2100      	movs	r1, #0
    651c:	f843 1b04 	str.w	r1, [r3], #4
    6520:	42ab      	cmp	r3, r5
    6522:	d9fb      	bls.n	651c <__hexnan+0xc4>
    6524:	9b01      	ldr	r3, [sp, #4]
    6526:	f853 3c04 	ldr.w	r3, [r3, #-4]
    652a:	b92b      	cbnz	r3, 6538 <__hexnan+0xe0>
    652c:	42aa      	cmp	r2, r5
    652e:	d049      	beq.n	65c4 <__hexnan+0x16c>
    6530:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    6534:	2b00      	cmp	r3, #0
    6536:	d0f9      	beq.n	652c <__hexnan+0xd4>
    6538:	2005      	movs	r0, #5
    653a:	b005      	add	sp, #20
    653c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6540:	4562      	cmp	r2, ip
    6542:	d2b6      	bcs.n	64b2 <__hexnan+0x5a>
    6544:	2300      	movs	r3, #0
    6546:	f84c 3c04 	str.w	r3, [ip, #-4]
    654a:	4619      	mov	r1, r3
    654c:	f1ac 0c04 	sub.w	ip, ip, #4
    6550:	2301      	movs	r3, #1
    6552:	e7bd      	b.n	64d0 <__hexnan+0x78>
    6554:	2300      	movs	r3, #0
    6556:	f1ac 0804 	sub.w	r8, ip, #4
    655a:	f84c 3c04 	str.w	r3, [ip, #-4]
    655e:	46b2      	mov	sl, r6
    6560:	46c4      	mov	ip, r8
    6562:	e7a6      	b.n	64b2 <__hexnan+0x5a>
    6564:	f1c3 0108 	rsb	r1, r3, #8
    6568:	f8dc 3000 	ldr.w	r3, [ip]
    656c:	0089      	lsls	r1, r1, #2
    656e:	f1c1 0e20 	rsb	lr, r1, #32
    6572:	4660      	mov	r0, ip
    6574:	469b      	mov	fp, r3
    6576:	6847      	ldr	r7, [r0, #4]
    6578:	fa07 f30e 	lsl.w	r3, r7, lr
    657c:	ea43 030b 	orr.w	r3, r3, fp
    6580:	fa27 fb01 	lsr.w	fp, r7, r1
    6584:	6003      	str	r3, [r0, #0]
    6586:	f840 bf04 	str.w	fp, [r0, #4]!
    658a:	4540      	cmp	r0, r8
    658c:	d3f3      	bcc.n	6576 <__hexnan+0x11e>
    658e:	e78d      	b.n	64ac <__hexnan+0x54>
    6590:	1d19      	adds	r1, r3, #4
    6592:	9101      	str	r1, [sp, #4]
    6594:	461d      	mov	r5, r3
    6596:	e76e      	b.n	6476 <__hexnan+0x1e>
    6598:	9b03      	ldr	r3, [sp, #12]
    659a:	2b00      	cmp	r3, #0
    659c:	d0c2      	beq.n	6524 <__hexnan+0xcc>
    659e:	9b03      	ldr	r3, [sp, #12]
    65a0:	9801      	ldr	r0, [sp, #4]
    65a2:	f1c3 0120 	rsb	r1, r3, #32
    65a6:	f04f 33ff 	mov.w	r3, #4294967295
    65aa:	40cb      	lsrs	r3, r1
    65ac:	f850 1c04 	ldr.w	r1, [r0, #-4]
    65b0:	400b      	ands	r3, r1
    65b2:	f840 3c04 	str.w	r3, [r0, #-4]
    65b6:	e7b8      	b.n	652a <__hexnan+0xd2>
    65b8:	2929      	cmp	r1, #41	; 0x29
    65ba:	d009      	beq.n	65d0 <__hexnan+0x178>
    65bc:	2004      	movs	r0, #4
    65be:	b005      	add	sp, #20
    65c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    65c4:	2301      	movs	r3, #1
    65c6:	2005      	movs	r0, #5
    65c8:	602b      	str	r3, [r5, #0]
    65ca:	b005      	add	sp, #20
    65cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    65d0:	9902      	ldr	r1, [sp, #8]
    65d2:	3401      	adds	r4, #1
    65d4:	600c      	str	r4, [r1, #0]
    65d6:	e784      	b.n	64e2 <__hexnan+0x8a>
    65d8:	f8dc 1000 	ldr.w	r1, [ip]
    65dc:	f1c3 0308 	rsb	r3, r3, #8
    65e0:	009b      	lsls	r3, r3, #2
    65e2:	f1c3 0720 	rsb	r7, r3, #32
    65e6:	4664      	mov	r4, ip
    65e8:	4608      	mov	r0, r1
    65ea:	6866      	ldr	r6, [r4, #4]
    65ec:	fa06 f107 	lsl.w	r1, r6, r7
    65f0:	4301      	orrs	r1, r0
    65f2:	fa26 f003 	lsr.w	r0, r6, r3
    65f6:	6021      	str	r1, [r4, #0]
    65f8:	f844 0f04 	str.w	r0, [r4, #4]!
    65fc:	4544      	cmp	r4, r8
    65fe:	d3f4      	bcc.n	65ea <__hexnan+0x192>
    6600:	e775      	b.n	64ee <__hexnan+0x96>
    6602:	bf00      	nop
    6604:	200004e0 	.word	0x200004e0

00006608 <__ascii_mbtowc>:
    6608:	b082      	sub	sp, #8
    660a:	b149      	cbz	r1, 6620 <__ascii_mbtowc+0x18>
    660c:	b15a      	cbz	r2, 6626 <__ascii_mbtowc+0x1e>
    660e:	b16b      	cbz	r3, 662c <__ascii_mbtowc+0x24>
    6610:	7813      	ldrb	r3, [r2, #0]
    6612:	600b      	str	r3, [r1, #0]
    6614:	7812      	ldrb	r2, [r2, #0]
    6616:	1e10      	subs	r0, r2, #0
    6618:	bf18      	it	ne
    661a:	2001      	movne	r0, #1
    661c:	b002      	add	sp, #8
    661e:	4770      	bx	lr
    6620:	a901      	add	r1, sp, #4
    6622:	2a00      	cmp	r2, #0
    6624:	d1f3      	bne.n	660e <__ascii_mbtowc+0x6>
    6626:	4610      	mov	r0, r2
    6628:	b002      	add	sp, #8
    662a:	4770      	bx	lr
    662c:	f06f 0001 	mvn.w	r0, #1
    6630:	e7f4      	b.n	661c <__ascii_mbtowc+0x14>
    6632:	bf00      	nop

00006634 <_Balloc>:
    6634:	6c43      	ldr	r3, [r0, #68]	; 0x44
    6636:	b570      	push	{r4, r5, r6, lr}
    6638:	4605      	mov	r5, r0
    663a:	460c      	mov	r4, r1
    663c:	b14b      	cbz	r3, 6652 <_Balloc+0x1e>
    663e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    6642:	b180      	cbz	r0, 6666 <_Balloc+0x32>
    6644:	6802      	ldr	r2, [r0, #0]
    6646:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    664a:	2300      	movs	r3, #0
    664c:	e9c0 3303 	strd	r3, r3, [r0, #12]
    6650:	bd70      	pop	{r4, r5, r6, pc}
    6652:	2221      	movs	r2, #33	; 0x21
    6654:	2104      	movs	r1, #4
    6656:	f004 f96f 	bl	a938 <_calloc_r>
    665a:	4603      	mov	r3, r0
    665c:	6468      	str	r0, [r5, #68]	; 0x44
    665e:	2800      	cmp	r0, #0
    6660:	d1ed      	bne.n	663e <_Balloc+0xa>
    6662:	2000      	movs	r0, #0
    6664:	bd70      	pop	{r4, r5, r6, pc}
    6666:	2101      	movs	r1, #1
    6668:	fa01 f604 	lsl.w	r6, r1, r4
    666c:	1d72      	adds	r2, r6, #5
    666e:	0092      	lsls	r2, r2, #2
    6670:	4628      	mov	r0, r5
    6672:	f004 f961 	bl	a938 <_calloc_r>
    6676:	2800      	cmp	r0, #0
    6678:	d0f3      	beq.n	6662 <_Balloc+0x2e>
    667a:	e9c0 4601 	strd	r4, r6, [r0, #4]
    667e:	e7e4      	b.n	664a <_Balloc+0x16>

00006680 <_Bfree>:
    6680:	b131      	cbz	r1, 6690 <_Bfree+0x10>
    6682:	6c43      	ldr	r3, [r0, #68]	; 0x44
    6684:	684a      	ldr	r2, [r1, #4]
    6686:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    668a:	6008      	str	r0, [r1, #0]
    668c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    6690:	4770      	bx	lr
    6692:	bf00      	nop

00006694 <__multadd>:
    6694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6698:	690e      	ldr	r6, [r1, #16]
    669a:	4680      	mov	r8, r0
    669c:	460f      	mov	r7, r1
    669e:	461d      	mov	r5, r3
    66a0:	f101 0e14 	add.w	lr, r1, #20
    66a4:	2000      	movs	r0, #0
    66a6:	f8de 1000 	ldr.w	r1, [lr]
    66aa:	b28c      	uxth	r4, r1
    66ac:	fb02 5304 	mla	r3, r2, r4, r5
    66b0:	0c09      	lsrs	r1, r1, #16
    66b2:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    66b6:	fb02 cc01 	mla	ip, r2, r1, ip
    66ba:	3001      	adds	r0, #1
    66bc:	b29c      	uxth	r4, r3
    66be:	eb04 440c 	add.w	r4, r4, ip, lsl #16
    66c2:	4286      	cmp	r6, r0
    66c4:	f84e 4b04 	str.w	r4, [lr], #4
    66c8:	ea4f 451c 	mov.w	r5, ip, lsr #16
    66cc:	dceb      	bgt.n	66a6 <__multadd+0x12>
    66ce:	b13d      	cbz	r5, 66e0 <__multadd+0x4c>
    66d0:	68bb      	ldr	r3, [r7, #8]
    66d2:	42b3      	cmp	r3, r6
    66d4:	dd07      	ble.n	66e6 <__multadd+0x52>
    66d6:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    66da:	3601      	adds	r6, #1
    66dc:	615d      	str	r5, [r3, #20]
    66de:	613e      	str	r6, [r7, #16]
    66e0:	4638      	mov	r0, r7
    66e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    66e6:	6879      	ldr	r1, [r7, #4]
    66e8:	4640      	mov	r0, r8
    66ea:	3101      	adds	r1, #1
    66ec:	f7ff ffa2 	bl	6634 <_Balloc>
    66f0:	4604      	mov	r4, r0
    66f2:	b1b0      	cbz	r0, 6722 <__multadd+0x8e>
    66f4:	693a      	ldr	r2, [r7, #16]
    66f6:	3202      	adds	r2, #2
    66f8:	f107 010c 	add.w	r1, r7, #12
    66fc:	0092      	lsls	r2, r2, #2
    66fe:	300c      	adds	r0, #12
    6700:	f7fb f884 	bl	180c <memcpy>
    6704:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    6708:	687a      	ldr	r2, [r7, #4]
    670a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    670e:	6039      	str	r1, [r7, #0]
    6710:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    6714:	4627      	mov	r7, r4
    6716:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    671a:	3601      	adds	r6, #1
    671c:	615d      	str	r5, [r3, #20]
    671e:	613e      	str	r6, [r7, #16]
    6720:	e7de      	b.n	66e0 <__multadd+0x4c>
    6722:	4b03      	ldr	r3, [pc, #12]	; (6730 <__multadd+0x9c>)
    6724:	4803      	ldr	r0, [pc, #12]	; (6734 <__multadd+0xa0>)
    6726:	4622      	mov	r2, r4
    6728:	21ba      	movs	r1, #186	; 0xba
    672a:	f004 f8e5 	bl	a8f8 <__assert_func>
    672e:	bf00      	nop
    6730:	20000468 	.word	0x20000468
    6734:	200005e0 	.word	0x200005e0

00006738 <__s2b>:
    6738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    673c:	4617      	mov	r7, r2
    673e:	4a27      	ldr	r2, [pc, #156]	; (67dc <__s2b+0xa4>)
    6740:	461e      	mov	r6, r3
    6742:	3308      	adds	r3, #8
    6744:	460c      	mov	r4, r1
    6746:	2e09      	cmp	r6, #9
    6748:	fb82 1203 	smull	r1, r2, r2, r3
    674c:	ea4f 73e3 	mov.w	r3, r3, asr #31
    6750:	4605      	mov	r5, r0
    6752:	ebc3 0362 	rsb	r3, r3, r2, asr #1
    6756:	dd39      	ble.n	67cc <__s2b+0x94>
    6758:	f04f 0c01 	mov.w	ip, #1
    675c:	2100      	movs	r1, #0
    675e:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    6762:	4563      	cmp	r3, ip
    6764:	f101 0101 	add.w	r1, r1, #1
    6768:	dcf9      	bgt.n	675e <__s2b+0x26>
    676a:	4628      	mov	r0, r5
    676c:	f7ff ff62 	bl	6634 <_Balloc>
    6770:	4601      	mov	r1, r0
    6772:	b368      	cbz	r0, 67d0 <__s2b+0x98>
    6774:	9b08      	ldr	r3, [sp, #32]
    6776:	6143      	str	r3, [r0, #20]
    6778:	2f09      	cmp	r7, #9
    677a:	f04f 0301 	mov.w	r3, #1
    677e:	6103      	str	r3, [r0, #16]
    6780:	dc12      	bgt.n	67a8 <__s2b+0x70>
    6782:	340a      	adds	r4, #10
    6784:	2709      	movs	r7, #9
    6786:	42be      	cmp	r6, r7
    6788:	dd0b      	ble.n	67a2 <__s2b+0x6a>
    678a:	1bf2      	subs	r2, r6, r7
    678c:	18a6      	adds	r6, r4, r2
    678e:	f814 3b01 	ldrb.w	r3, [r4], #1
    6792:	220a      	movs	r2, #10
    6794:	3b30      	subs	r3, #48	; 0x30
    6796:	4628      	mov	r0, r5
    6798:	f7ff ff7c 	bl	6694 <__multadd>
    679c:	42a6      	cmp	r6, r4
    679e:	4601      	mov	r1, r0
    67a0:	d1f5      	bne.n	678e <__s2b+0x56>
    67a2:	4608      	mov	r0, r1
    67a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    67a8:	f104 0909 	add.w	r9, r4, #9
    67ac:	46c8      	mov	r8, r9
    67ae:	443c      	add	r4, r7
    67b0:	f818 3b01 	ldrb.w	r3, [r8], #1
    67b4:	220a      	movs	r2, #10
    67b6:	3b30      	subs	r3, #48	; 0x30
    67b8:	4628      	mov	r0, r5
    67ba:	f7ff ff6b 	bl	6694 <__multadd>
    67be:	45a0      	cmp	r8, r4
    67c0:	4601      	mov	r1, r0
    67c2:	d1f5      	bne.n	67b0 <__s2b+0x78>
    67c4:	f1a7 0408 	sub.w	r4, r7, #8
    67c8:	444c      	add	r4, r9
    67ca:	e7dc      	b.n	6786 <__s2b+0x4e>
    67cc:	2100      	movs	r1, #0
    67ce:	e7cc      	b.n	676a <__s2b+0x32>
    67d0:	460a      	mov	r2, r1
    67d2:	4b03      	ldr	r3, [pc, #12]	; (67e0 <__s2b+0xa8>)
    67d4:	4803      	ldr	r0, [pc, #12]	; (67e4 <__s2b+0xac>)
    67d6:	21d3      	movs	r1, #211	; 0xd3
    67d8:	f004 f88e 	bl	a8f8 <__assert_func>
    67dc:	38e38e39 	.word	0x38e38e39
    67e0:	20000468 	.word	0x20000468
    67e4:	200005e0 	.word	0x200005e0

000067e8 <__hi0bits>:
    67e8:	0c03      	lsrs	r3, r0, #16
    67ea:	041b      	lsls	r3, r3, #16
    67ec:	b9d3      	cbnz	r3, 6824 <__hi0bits+0x3c>
    67ee:	0400      	lsls	r0, r0, #16
    67f0:	2310      	movs	r3, #16
    67f2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
    67f6:	bf04      	itt	eq
    67f8:	0200      	lsleq	r0, r0, #8
    67fa:	3308      	addeq	r3, #8
    67fc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
    6800:	bf04      	itt	eq
    6802:	0100      	lsleq	r0, r0, #4
    6804:	3304      	addeq	r3, #4
    6806:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
    680a:	bf04      	itt	eq
    680c:	0080      	lsleq	r0, r0, #2
    680e:	3302      	addeq	r3, #2
    6810:	2800      	cmp	r0, #0
    6812:	db05      	blt.n	6820 <__hi0bits+0x38>
    6814:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
    6818:	f103 0301 	add.w	r3, r3, #1
    681c:	bf08      	it	eq
    681e:	2320      	moveq	r3, #32
    6820:	4618      	mov	r0, r3
    6822:	4770      	bx	lr
    6824:	2300      	movs	r3, #0
    6826:	e7e4      	b.n	67f2 <__hi0bits+0xa>

00006828 <__lo0bits>:
    6828:	6803      	ldr	r3, [r0, #0]
    682a:	f013 0207 	ands.w	r2, r3, #7
    682e:	d008      	beq.n	6842 <__lo0bits+0x1a>
    6830:	07d9      	lsls	r1, r3, #31
    6832:	d41f      	bmi.n	6874 <__lo0bits+0x4c>
    6834:	079a      	lsls	r2, r3, #30
    6836:	d522      	bpl.n	687e <__lo0bits+0x56>
    6838:	085b      	lsrs	r3, r3, #1
    683a:	6003      	str	r3, [r0, #0]
    683c:	2201      	movs	r2, #1
    683e:	4610      	mov	r0, r2
    6840:	4770      	bx	lr
    6842:	b299      	uxth	r1, r3
    6844:	b909      	cbnz	r1, 684a <__lo0bits+0x22>
    6846:	0c1b      	lsrs	r3, r3, #16
    6848:	2210      	movs	r2, #16
    684a:	b2d9      	uxtb	r1, r3
    684c:	b909      	cbnz	r1, 6852 <__lo0bits+0x2a>
    684e:	3208      	adds	r2, #8
    6850:	0a1b      	lsrs	r3, r3, #8
    6852:	0719      	lsls	r1, r3, #28
    6854:	bf04      	itt	eq
    6856:	091b      	lsreq	r3, r3, #4
    6858:	3204      	addeq	r2, #4
    685a:	0799      	lsls	r1, r3, #30
    685c:	bf04      	itt	eq
    685e:	089b      	lsreq	r3, r3, #2
    6860:	3202      	addeq	r2, #2
    6862:	07d9      	lsls	r1, r3, #31
    6864:	d403      	bmi.n	686e <__lo0bits+0x46>
    6866:	085b      	lsrs	r3, r3, #1
    6868:	f102 0201 	add.w	r2, r2, #1
    686c:	d005      	beq.n	687a <__lo0bits+0x52>
    686e:	6003      	str	r3, [r0, #0]
    6870:	4610      	mov	r0, r2
    6872:	4770      	bx	lr
    6874:	2200      	movs	r2, #0
    6876:	4610      	mov	r0, r2
    6878:	4770      	bx	lr
    687a:	2220      	movs	r2, #32
    687c:	e7df      	b.n	683e <__lo0bits+0x16>
    687e:	089b      	lsrs	r3, r3, #2
    6880:	2202      	movs	r2, #2
    6882:	6003      	str	r3, [r0, #0]
    6884:	4610      	mov	r0, r2
    6886:	4770      	bx	lr

00006888 <__i2b>:
    6888:	b538      	push	{r3, r4, r5, lr}
    688a:	6c43      	ldr	r3, [r0, #68]	; 0x44
    688c:	4604      	mov	r4, r0
    688e:	460d      	mov	r5, r1
    6890:	b14b      	cbz	r3, 68a6 <__i2b+0x1e>
    6892:	6858      	ldr	r0, [r3, #4]
    6894:	b1b0      	cbz	r0, 68c4 <__i2b+0x3c>
    6896:	6802      	ldr	r2, [r0, #0]
    6898:	605a      	str	r2, [r3, #4]
    689a:	2200      	movs	r2, #0
    689c:	2301      	movs	r3, #1
    689e:	e9c0 3504 	strd	r3, r5, [r0, #16]
    68a2:	60c2      	str	r2, [r0, #12]
    68a4:	bd38      	pop	{r3, r4, r5, pc}
    68a6:	2221      	movs	r2, #33	; 0x21
    68a8:	2104      	movs	r1, #4
    68aa:	f004 f845 	bl	a938 <_calloc_r>
    68ae:	4603      	mov	r3, r0
    68b0:	6460      	str	r0, [r4, #68]	; 0x44
    68b2:	2800      	cmp	r0, #0
    68b4:	d1ed      	bne.n	6892 <__i2b+0xa>
    68b6:	4b09      	ldr	r3, [pc, #36]	; (68dc <__i2b+0x54>)
    68b8:	4809      	ldr	r0, [pc, #36]	; (68e0 <__i2b+0x58>)
    68ba:	2200      	movs	r2, #0
    68bc:	f240 1145 	movw	r1, #325	; 0x145
    68c0:	f004 f81a 	bl	a8f8 <__assert_func>
    68c4:	221c      	movs	r2, #28
    68c6:	2101      	movs	r1, #1
    68c8:	4620      	mov	r0, r4
    68ca:	f004 f835 	bl	a938 <_calloc_r>
    68ce:	2800      	cmp	r0, #0
    68d0:	d0f1      	beq.n	68b6 <__i2b+0x2e>
    68d2:	2201      	movs	r2, #1
    68d4:	2302      	movs	r3, #2
    68d6:	e9c0 2301 	strd	r2, r3, [r0, #4]
    68da:	e7de      	b.n	689a <__i2b+0x12>
    68dc:	20000468 	.word	0x20000468
    68e0:	200005e0 	.word	0x200005e0

000068e4 <__multiply>:
    68e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    68e8:	690e      	ldr	r6, [r1, #16]
    68ea:	6915      	ldr	r5, [r2, #16]
    68ec:	42ae      	cmp	r6, r5
    68ee:	b085      	sub	sp, #20
    68f0:	4688      	mov	r8, r1
    68f2:	4614      	mov	r4, r2
    68f4:	db05      	blt.n	6902 <__multiply+0x1e>
    68f6:	462a      	mov	r2, r5
    68f8:	4623      	mov	r3, r4
    68fa:	4635      	mov	r5, r6
    68fc:	460c      	mov	r4, r1
    68fe:	4616      	mov	r6, r2
    6900:	4698      	mov	r8, r3
    6902:	68a3      	ldr	r3, [r4, #8]
    6904:	6861      	ldr	r1, [r4, #4]
    6906:	19af      	adds	r7, r5, r6
    6908:	42bb      	cmp	r3, r7
    690a:	bfb8      	it	lt
    690c:	3101      	addlt	r1, #1
    690e:	f7ff fe91 	bl	6634 <_Balloc>
    6912:	9001      	str	r0, [sp, #4]
    6914:	2800      	cmp	r0, #0
    6916:	f000 8087 	beq.w	6a28 <__multiply+0x144>
    691a:	9b01      	ldr	r3, [sp, #4]
    691c:	f103 0914 	add.w	r9, r3, #20
    6920:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
    6924:	45d1      	cmp	r9, sl
    6926:	d205      	bcs.n	6934 <__multiply+0x50>
    6928:	464b      	mov	r3, r9
    692a:	2200      	movs	r2, #0
    692c:	f843 2b04 	str.w	r2, [r3], #4
    6930:	459a      	cmp	sl, r3
    6932:	d8fb      	bhi.n	692c <__multiply+0x48>
    6934:	f108 0814 	add.w	r8, r8, #20
    6938:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
    693c:	f104 0314 	add.w	r3, r4, #20
    6940:	45d8      	cmp	r8, fp
    6942:	461a      	mov	r2, r3
    6944:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    6948:	d25f      	bcs.n	6a0a <__multiply+0x126>
    694a:	1b2b      	subs	r3, r5, r4
    694c:	3b15      	subs	r3, #21
    694e:	f023 0303 	bic.w	r3, r3, #3
    6952:	3304      	adds	r3, #4
    6954:	3415      	adds	r4, #21
    6956:	42a5      	cmp	r5, r4
    6958:	bf38      	it	cc
    695a:	2304      	movcc	r3, #4
    695c:	e9cd a702 	strd	sl, r7, [sp, #8]
    6960:	46ac      	mov	ip, r5
    6962:	461f      	mov	r7, r3
    6964:	4692      	mov	sl, r2
    6966:	e005      	b.n	6974 <__multiply+0x90>
    6968:	0c09      	lsrs	r1, r1, #16
    696a:	d129      	bne.n	69c0 <__multiply+0xdc>
    696c:	45c3      	cmp	fp, r8
    696e:	f109 0904 	add.w	r9, r9, #4
    6972:	d948      	bls.n	6a06 <__multiply+0x122>
    6974:	f858 1b04 	ldr.w	r1, [r8], #4
    6978:	b28d      	uxth	r5, r1
    697a:	2d00      	cmp	r5, #0
    697c:	d0f4      	beq.n	6968 <__multiply+0x84>
    697e:	4656      	mov	r6, sl
    6980:	464c      	mov	r4, r9
    6982:	2300      	movs	r3, #0
    6984:	f856 1b04 	ldr.w	r1, [r6], #4
    6988:	6822      	ldr	r2, [r4, #0]
    698a:	fa1f fe81 	uxth.w	lr, r1
    698e:	b290      	uxth	r0, r2
    6990:	0c09      	lsrs	r1, r1, #16
    6992:	fb05 000e 	mla	r0, r5, lr, r0
    6996:	0c12      	lsrs	r2, r2, #16
    6998:	4403      	add	r3, r0
    699a:	fb05 2201 	mla	r2, r5, r1, r2
    699e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    69a2:	b29b      	uxth	r3, r3
    69a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    69a8:	45b4      	cmp	ip, r6
    69aa:	f844 3b04 	str.w	r3, [r4], #4
    69ae:	ea4f 4312 	mov.w	r3, r2, lsr #16
    69b2:	d8e7      	bhi.n	6984 <__multiply+0xa0>
    69b4:	f849 3007 	str.w	r3, [r9, r7]
    69b8:	f858 1c04 	ldr.w	r1, [r8, #-4]
    69bc:	0c09      	lsrs	r1, r1, #16
    69be:	d0d5      	beq.n	696c <__multiply+0x88>
    69c0:	f8d9 3000 	ldr.w	r3, [r9]
    69c4:	4650      	mov	r0, sl
    69c6:	461a      	mov	r2, r3
    69c8:	464c      	mov	r4, r9
    69ca:	2600      	movs	r6, #0
    69cc:	8805      	ldrh	r5, [r0, #0]
    69ce:	0c12      	lsrs	r2, r2, #16
    69d0:	fb01 2205 	mla	r2, r1, r5, r2
    69d4:	4416      	add	r6, r2
    69d6:	b29b      	uxth	r3, r3
    69d8:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    69dc:	f844 3b04 	str.w	r3, [r4], #4
    69e0:	f850 5b04 	ldr.w	r5, [r0], #4
    69e4:	6822      	ldr	r2, [r4, #0]
    69e6:	0c2d      	lsrs	r5, r5, #16
    69e8:	b293      	uxth	r3, r2
    69ea:	fb01 3305 	mla	r3, r1, r5, r3
    69ee:	eb03 4316 	add.w	r3, r3, r6, lsr #16
    69f2:	4584      	cmp	ip, r0
    69f4:	ea4f 4613 	mov.w	r6, r3, lsr #16
    69f8:	d8e8      	bhi.n	69cc <__multiply+0xe8>
    69fa:	45c3      	cmp	fp, r8
    69fc:	f849 3007 	str.w	r3, [r9, r7]
    6a00:	f109 0904 	add.w	r9, r9, #4
    6a04:	d8b6      	bhi.n	6974 <__multiply+0x90>
    6a06:	e9dd a702 	ldrd	sl, r7, [sp, #8]
    6a0a:	2f00      	cmp	r7, #0
    6a0c:	dc02      	bgt.n	6a14 <__multiply+0x130>
    6a0e:	e005      	b.n	6a1c <__multiply+0x138>
    6a10:	3f01      	subs	r7, #1
    6a12:	d003      	beq.n	6a1c <__multiply+0x138>
    6a14:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
    6a18:	2b00      	cmp	r3, #0
    6a1a:	d0f9      	beq.n	6a10 <__multiply+0x12c>
    6a1c:	9b01      	ldr	r3, [sp, #4]
    6a1e:	4618      	mov	r0, r3
    6a20:	611f      	str	r7, [r3, #16]
    6a22:	b005      	add	sp, #20
    6a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6a28:	4b03      	ldr	r3, [pc, #12]	; (6a38 <__multiply+0x154>)
    6a2a:	4804      	ldr	r0, [pc, #16]	; (6a3c <__multiply+0x158>)
    6a2c:	9a01      	ldr	r2, [sp, #4]
    6a2e:	f44f 71b1 	mov.w	r1, #354	; 0x162
    6a32:	f003 ff61 	bl	a8f8 <__assert_func>
    6a36:	bf00      	nop
    6a38:	20000468 	.word	0x20000468
    6a3c:	200005e0 	.word	0x200005e0

00006a40 <__pow5mult>:
    6a40:	f012 0303 	ands.w	r3, r2, #3
    6a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6a48:	4614      	mov	r4, r2
    6a4a:	4606      	mov	r6, r0
    6a4c:	d132      	bne.n	6ab4 <__pow5mult+0x74>
    6a4e:	460d      	mov	r5, r1
    6a50:	10a4      	asrs	r4, r4, #2
    6a52:	d020      	beq.n	6a96 <__pow5mult+0x56>
    6a54:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
    6a58:	f1b8 0f00 	cmp.w	r8, #0
    6a5c:	d033      	beq.n	6ac6 <__pow5mult+0x86>
    6a5e:	07e3      	lsls	r3, r4, #31
    6a60:	f04f 0700 	mov.w	r7, #0
    6a64:	d407      	bmi.n	6a76 <__pow5mult+0x36>
    6a66:	1064      	asrs	r4, r4, #1
    6a68:	d015      	beq.n	6a96 <__pow5mult+0x56>
    6a6a:	f8d8 0000 	ldr.w	r0, [r8]
    6a6e:	b1a8      	cbz	r0, 6a9c <__pow5mult+0x5c>
    6a70:	4680      	mov	r8, r0
    6a72:	07e3      	lsls	r3, r4, #31
    6a74:	d5f7      	bpl.n	6a66 <__pow5mult+0x26>
    6a76:	4642      	mov	r2, r8
    6a78:	4629      	mov	r1, r5
    6a7a:	4630      	mov	r0, r6
    6a7c:	f7ff ff32 	bl	68e4 <__multiply>
    6a80:	b1b5      	cbz	r5, 6ab0 <__pow5mult+0x70>
    6a82:	6869      	ldr	r1, [r5, #4]
    6a84:	6c73      	ldr	r3, [r6, #68]	; 0x44
    6a86:	1064      	asrs	r4, r4, #1
    6a88:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    6a8c:	602a      	str	r2, [r5, #0]
    6a8e:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
    6a92:	4605      	mov	r5, r0
    6a94:	d1e9      	bne.n	6a6a <__pow5mult+0x2a>
    6a96:	4628      	mov	r0, r5
    6a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6a9c:	4642      	mov	r2, r8
    6a9e:	4641      	mov	r1, r8
    6aa0:	4630      	mov	r0, r6
    6aa2:	f7ff ff1f 	bl	68e4 <__multiply>
    6aa6:	f8c8 0000 	str.w	r0, [r8]
    6aaa:	6007      	str	r7, [r0, #0]
    6aac:	4680      	mov	r8, r0
    6aae:	e7e0      	b.n	6a72 <__pow5mult+0x32>
    6ab0:	4605      	mov	r5, r0
    6ab2:	e7d8      	b.n	6a66 <__pow5mult+0x26>
    6ab4:	3b01      	subs	r3, #1
    6ab6:	4a0f      	ldr	r2, [pc, #60]	; (6af4 <__pow5mult+0xb4>)
    6ab8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    6abc:	2300      	movs	r3, #0
    6abe:	f7ff fde9 	bl	6694 <__multadd>
    6ac2:	4605      	mov	r5, r0
    6ac4:	e7c4      	b.n	6a50 <__pow5mult+0x10>
    6ac6:	2101      	movs	r1, #1
    6ac8:	4630      	mov	r0, r6
    6aca:	f7ff fdb3 	bl	6634 <_Balloc>
    6ace:	4680      	mov	r8, r0
    6ad0:	b140      	cbz	r0, 6ae4 <__pow5mult+0xa4>
    6ad2:	2301      	movs	r3, #1
    6ad4:	f240 2271 	movw	r2, #625	; 0x271
    6ad8:	e9c0 3204 	strd	r3, r2, [r0, #16]
    6adc:	2300      	movs	r3, #0
    6ade:	6430      	str	r0, [r6, #64]	; 0x40
    6ae0:	6003      	str	r3, [r0, #0]
    6ae2:	e7bc      	b.n	6a5e <__pow5mult+0x1e>
    6ae4:	4b04      	ldr	r3, [pc, #16]	; (6af8 <__pow5mult+0xb8>)
    6ae6:	4805      	ldr	r0, [pc, #20]	; (6afc <__pow5mult+0xbc>)
    6ae8:	4642      	mov	r2, r8
    6aea:	f240 1145 	movw	r1, #325	; 0x145
    6aee:	f003 ff03 	bl	a8f8 <__assert_func>
    6af2:	bf00      	nop
    6af4:	20007880 	.word	0x20007880
    6af8:	20000468 	.word	0x20000468
    6afc:	200005e0 	.word	0x200005e0

00006b00 <__lshift>:
    6b00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6b04:	460d      	mov	r5, r1
    6b06:	4614      	mov	r4, r2
    6b08:	692f      	ldr	r7, [r5, #16]
    6b0a:	68ab      	ldr	r3, [r5, #8]
    6b0c:	6849      	ldr	r1, [r1, #4]
    6b0e:	eb07 1762 	add.w	r7, r7, r2, asr #5
    6b12:	1c7e      	adds	r6, r7, #1
    6b14:	429e      	cmp	r6, r3
    6b16:	4680      	mov	r8, r0
    6b18:	ea4f 1962 	mov.w	r9, r2, asr #5
    6b1c:	dd04      	ble.n	6b28 <__lshift+0x28>
    6b1e:	005b      	lsls	r3, r3, #1
    6b20:	429e      	cmp	r6, r3
    6b22:	f101 0101 	add.w	r1, r1, #1
    6b26:	dcfa      	bgt.n	6b1e <__lshift+0x1e>
    6b28:	4640      	mov	r0, r8
    6b2a:	f7ff fd83 	bl	6634 <_Balloc>
    6b2e:	4684      	mov	ip, r0
    6b30:	2800      	cmp	r0, #0
    6b32:	d052      	beq.n	6bda <__lshift+0xda>
    6b34:	f1b9 0f00 	cmp.w	r9, #0
    6b38:	f100 0214 	add.w	r2, r0, #20
    6b3c:	dd0e      	ble.n	6b5c <__lshift+0x5c>
    6b3e:	f109 0105 	add.w	r1, r9, #5
    6b42:	ea4f 0e81 	mov.w	lr, r1, lsl #2
    6b46:	4613      	mov	r3, r2
    6b48:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    6b4c:	2000      	movs	r0, #0
    6b4e:	f843 0b04 	str.w	r0, [r3], #4
    6b52:	428b      	cmp	r3, r1
    6b54:	d1fb      	bne.n	6b4e <__lshift+0x4e>
    6b56:	f1ae 0314 	sub.w	r3, lr, #20
    6b5a:	441a      	add	r2, r3
    6b5c:	6929      	ldr	r1, [r5, #16]
    6b5e:	f105 0314 	add.w	r3, r5, #20
    6b62:	f014 0e1f 	ands.w	lr, r4, #31
    6b66:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    6b6a:	d02e      	beq.n	6bca <__lshift+0xca>
    6b6c:	f1ce 0920 	rsb	r9, lr, #32
    6b70:	4610      	mov	r0, r2
    6b72:	f04f 0a00 	mov.w	sl, #0
    6b76:	681c      	ldr	r4, [r3, #0]
    6b78:	fa04 f40e 	lsl.w	r4, r4, lr
    6b7c:	ea44 040a 	orr.w	r4, r4, sl
    6b80:	f840 4b04 	str.w	r4, [r0], #4
    6b84:	f853 4b04 	ldr.w	r4, [r3], #4
    6b88:	4299      	cmp	r1, r3
    6b8a:	fa24 fa09 	lsr.w	sl, r4, r9
    6b8e:	d8f2      	bhi.n	6b76 <__lshift+0x76>
    6b90:	1b4b      	subs	r3, r1, r5
    6b92:	3b15      	subs	r3, #21
    6b94:	f023 0303 	bic.w	r3, r3, #3
    6b98:	3304      	adds	r3, #4
    6b9a:	f105 0015 	add.w	r0, r5, #21
    6b9e:	4281      	cmp	r1, r0
    6ba0:	bf38      	it	cc
    6ba2:	2304      	movcc	r3, #4
    6ba4:	f1ba 0f00 	cmp.w	sl, #0
    6ba8:	bf18      	it	ne
    6baa:	4637      	movne	r7, r6
    6bac:	f842 a003 	str.w	sl, [r2, r3]
    6bb0:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    6bb4:	686a      	ldr	r2, [r5, #4]
    6bb6:	f8cc 7010 	str.w	r7, [ip, #16]
    6bba:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    6bbe:	6029      	str	r1, [r5, #0]
    6bc0:	4660      	mov	r0, ip
    6bc2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
    6bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6bca:	3a04      	subs	r2, #4
    6bcc:	f853 0b04 	ldr.w	r0, [r3], #4
    6bd0:	f842 0f04 	str.w	r0, [r2, #4]!
    6bd4:	4299      	cmp	r1, r3
    6bd6:	d8f9      	bhi.n	6bcc <__lshift+0xcc>
    6bd8:	e7ea      	b.n	6bb0 <__lshift+0xb0>
    6bda:	4b03      	ldr	r3, [pc, #12]	; (6be8 <__lshift+0xe8>)
    6bdc:	4803      	ldr	r0, [pc, #12]	; (6bec <__lshift+0xec>)
    6bde:	4662      	mov	r2, ip
    6be0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
    6be4:	f003 fe88 	bl	a8f8 <__assert_func>
    6be8:	20000468 	.word	0x20000468
    6bec:	200005e0 	.word	0x200005e0

00006bf0 <__mcmp>:
    6bf0:	690b      	ldr	r3, [r1, #16]
    6bf2:	4684      	mov	ip, r0
    6bf4:	6900      	ldr	r0, [r0, #16]
    6bf6:	1ac0      	subs	r0, r0, r3
    6bf8:	d116      	bne.n	6c28 <__mcmp+0x38>
    6bfa:	f10c 0c14 	add.w	ip, ip, #20
    6bfe:	3114      	adds	r1, #20
    6c00:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
    6c04:	b410      	push	{r4}
    6c06:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    6c0a:	e001      	b.n	6c10 <__mcmp+0x20>
    6c0c:	4594      	cmp	ip, r2
    6c0e:	d208      	bcs.n	6c22 <__mcmp+0x32>
    6c10:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    6c14:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    6c18:	428c      	cmp	r4, r1
    6c1a:	d0f7      	beq.n	6c0c <__mcmp+0x1c>
    6c1c:	d205      	bcs.n	6c2a <__mcmp+0x3a>
    6c1e:	f04f 30ff 	mov.w	r0, #4294967295
    6c22:	f85d 4b04 	ldr.w	r4, [sp], #4
    6c26:	4770      	bx	lr
    6c28:	4770      	bx	lr
    6c2a:	2001      	movs	r0, #1
    6c2c:	f85d 4b04 	ldr.w	r4, [sp], #4
    6c30:	4770      	bx	lr
    6c32:	bf00      	nop

00006c34 <__mdiff>:
    6c34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6c38:	690f      	ldr	r7, [r1, #16]
    6c3a:	6913      	ldr	r3, [r2, #16]
    6c3c:	1aff      	subs	r7, r7, r3
    6c3e:	2f00      	cmp	r7, #0
    6c40:	460e      	mov	r6, r1
    6c42:	4690      	mov	r8, r2
    6c44:	d17f      	bne.n	6d46 <__mdiff+0x112>
    6c46:	f101 0514 	add.w	r5, r1, #20
    6c4a:	3214      	adds	r2, #20
    6c4c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    6c50:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    6c54:	e001      	b.n	6c5a <__mdiff+0x26>
    6c56:	429d      	cmp	r5, r3
    6c58:	d278      	bcs.n	6d4c <__mdiff+0x118>
    6c5a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    6c5e:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    6c62:	42a1      	cmp	r1, r4
    6c64:	d0f7      	beq.n	6c56 <__mdiff+0x22>
    6c66:	d369      	bcc.n	6d3c <__mdiff+0x108>
    6c68:	6871      	ldr	r1, [r6, #4]
    6c6a:	f7ff fce3 	bl	6634 <_Balloc>
    6c6e:	4681      	mov	r9, r0
    6c70:	2800      	cmp	r0, #0
    6c72:	d077      	beq.n	6d64 <__mdiff+0x130>
    6c74:	6935      	ldr	r5, [r6, #16]
    6c76:	f8d8 2010 	ldr.w	r2, [r8, #16]
    6c7a:	60c7      	str	r7, [r0, #12]
    6c7c:	f108 0e14 	add.w	lr, r8, #20
    6c80:	f106 0014 	add.w	r0, r6, #20
    6c84:	f109 0a14 	add.w	sl, r9, #20
    6c88:	f106 0110 	add.w	r1, r6, #16
    6c8c:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    6c90:	eb00 0785 	add.w	r7, r0, r5, lsl #2
    6c94:	4656      	mov	r6, sl
    6c96:	f04f 0c00 	mov.w	ip, #0
    6c9a:	f85e 4b04 	ldr.w	r4, [lr], #4
    6c9e:	f851 bf04 	ldr.w	fp, [r1, #4]!
    6ca2:	b2a3      	uxth	r3, r4
    6ca4:	fa1c fc8b 	uxtah	ip, ip, fp
    6ca8:	ebac 0303 	sub.w	r3, ip, r3
    6cac:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    6cb0:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
    6cb4:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
    6cb8:	b29b      	uxth	r3, r3
    6cba:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    6cbe:	4572      	cmp	r2, lr
    6cc0:	f846 3b04 	str.w	r3, [r6], #4
    6cc4:	ea4f 4c2c 	mov.w	ip, ip, asr #16
    6cc8:	d8e7      	bhi.n	6c9a <__mdiff+0x66>
    6cca:	eba2 0108 	sub.w	r1, r2, r8
    6cce:	3915      	subs	r1, #21
    6cd0:	f108 0815 	add.w	r8, r8, #21
    6cd4:	4542      	cmp	r2, r8
    6cd6:	f021 0403 	bic.w	r4, r1, #3
    6cda:	f104 0404 	add.w	r4, r4, #4
    6cde:	bf38      	it	cc
    6ce0:	2404      	movcc	r4, #4
    6ce2:	4420      	add	r0, r4
    6ce4:	f021 0203 	bic.w	r2, r1, #3
    6ce8:	bf38      	it	cc
    6cea:	2200      	movcc	r2, #0
    6cec:	4287      	cmp	r7, r0
    6cee:	4452      	add	r2, sl
    6cf0:	4454      	add	r4, sl
    6cf2:	d918      	bls.n	6d26 <__mdiff+0xf2>
    6cf4:	4626      	mov	r6, r4
    6cf6:	4601      	mov	r1, r0
    6cf8:	f851 3b04 	ldr.w	r3, [r1], #4
    6cfc:	fa1c fc83 	uxtah	ip, ip, r3
    6d00:	ea4f 422c 	mov.w	r2, ip, asr #16
    6d04:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    6d08:	fa1f fc8c 	uxth.w	ip, ip
    6d0c:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
    6d10:	428f      	cmp	r7, r1
    6d12:	f846 3b04 	str.w	r3, [r6], #4
    6d16:	ea4f 4c22 	mov.w	ip, r2, asr #16
    6d1a:	d8ed      	bhi.n	6cf8 <__mdiff+0xc4>
    6d1c:	3f01      	subs	r7, #1
    6d1e:	1a3f      	subs	r7, r7, r0
    6d20:	f027 0703 	bic.w	r7, r7, #3
    6d24:	19e2      	adds	r2, r4, r7
    6d26:	b923      	cbnz	r3, 6d32 <__mdiff+0xfe>
    6d28:	f852 3d04 	ldr.w	r3, [r2, #-4]!
    6d2c:	3d01      	subs	r5, #1
    6d2e:	2b00      	cmp	r3, #0
    6d30:	d0fa      	beq.n	6d28 <__mdiff+0xf4>
    6d32:	f8c9 5010 	str.w	r5, [r9, #16]
    6d36:	4648      	mov	r0, r9
    6d38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6d3c:	4633      	mov	r3, r6
    6d3e:	2701      	movs	r7, #1
    6d40:	4646      	mov	r6, r8
    6d42:	4698      	mov	r8, r3
    6d44:	e790      	b.n	6c68 <__mdiff+0x34>
    6d46:	dbf9      	blt.n	6d3c <__mdiff+0x108>
    6d48:	2700      	movs	r7, #0
    6d4a:	e78d      	b.n	6c68 <__mdiff+0x34>
    6d4c:	2100      	movs	r1, #0
    6d4e:	f7ff fc71 	bl	6634 <_Balloc>
    6d52:	4681      	mov	r9, r0
    6d54:	b168      	cbz	r0, 6d72 <__mdiff+0x13e>
    6d56:	2201      	movs	r2, #1
    6d58:	2300      	movs	r3, #0
    6d5a:	e9c9 2304 	strd	r2, r3, [r9, #16]
    6d5e:	4648      	mov	r0, r9
    6d60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6d64:	4b06      	ldr	r3, [pc, #24]	; (6d80 <__mdiff+0x14c>)
    6d66:	4807      	ldr	r0, [pc, #28]	; (6d84 <__mdiff+0x150>)
    6d68:	464a      	mov	r2, r9
    6d6a:	f240 2145 	movw	r1, #581	; 0x245
    6d6e:	f003 fdc3 	bl	a8f8 <__assert_func>
    6d72:	4b03      	ldr	r3, [pc, #12]	; (6d80 <__mdiff+0x14c>)
    6d74:	4803      	ldr	r0, [pc, #12]	; (6d84 <__mdiff+0x150>)
    6d76:	464a      	mov	r2, r9
    6d78:	f240 2137 	movw	r1, #567	; 0x237
    6d7c:	f003 fdbc 	bl	a8f8 <__assert_func>
    6d80:	20000468 	.word	0x20000468
    6d84:	200005e0 	.word	0x200005e0

00006d88 <__ulp>:
    6d88:	b082      	sub	sp, #8
    6d8a:	ed8d 0b00 	vstr	d0, [sp]
    6d8e:	4b16      	ldr	r3, [pc, #88]	; (6de8 <__ulp+0x60>)
    6d90:	9a01      	ldr	r2, [sp, #4]
    6d92:	4013      	ands	r3, r2
    6d94:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
    6d98:	2b00      	cmp	r3, #0
    6d9a:	dd06      	ble.n	6daa <__ulp+0x22>
    6d9c:	2200      	movs	r2, #0
    6d9e:	4619      	mov	r1, r3
    6da0:	4610      	mov	r0, r2
    6da2:	ec41 0b10 	vmov	d0, r0, r1
    6da6:	b002      	add	sp, #8
    6da8:	4770      	bx	lr
    6daa:	425b      	negs	r3, r3
    6dac:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
    6db0:	ea4f 5223 	mov.w	r2, r3, asr #20
    6db4:	da09      	bge.n	6dca <__ulp+0x42>
    6db6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
    6dba:	4113      	asrs	r3, r2
    6dbc:	2200      	movs	r2, #0
    6dbe:	4619      	mov	r1, r3
    6dc0:	4610      	mov	r0, r2
    6dc2:	ec41 0b10 	vmov	d0, r0, r1
    6dc6:	b002      	add	sp, #8
    6dc8:	4770      	bx	lr
    6dca:	f1a2 0314 	sub.w	r3, r2, #20
    6dce:	2b1e      	cmp	r3, #30
    6dd0:	bfda      	itte	le
    6dd2:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
    6dd6:	40da      	lsrle	r2, r3
    6dd8:	2201      	movgt	r2, #1
    6dda:	2300      	movs	r3, #0
    6ddc:	4619      	mov	r1, r3
    6dde:	4610      	mov	r0, r2
    6de0:	ec41 0b10 	vmov	d0, r0, r1
    6de4:	b002      	add	sp, #8
    6de6:	4770      	bx	lr
    6de8:	7ff00000 	.word	0x7ff00000

00006dec <__b2d>:
    6dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6dee:	6904      	ldr	r4, [r0, #16]
    6df0:	f100 0614 	add.w	r6, r0, #20
    6df4:	eb06 0484 	add.w	r4, r6, r4, lsl #2
    6df8:	1f27      	subs	r7, r4, #4
    6dfa:	f854 5c04 	ldr.w	r5, [r4, #-4]
    6dfe:	4628      	mov	r0, r5
    6e00:	f7ff fcf2 	bl	67e8 <__hi0bits>
    6e04:	f1c0 0320 	rsb	r3, r0, #32
    6e08:	280a      	cmp	r0, #10
    6e0a:	600b      	str	r3, [r1, #0]
    6e0c:	dd1b      	ble.n	6e46 <__b2d+0x5a>
    6e0e:	42be      	cmp	r6, r7
    6e10:	d20b      	bcs.n	6e2a <__b2d+0x3e>
    6e12:	380b      	subs	r0, #11
    6e14:	f854 1c08 	ldr.w	r1, [r4, #-8]
    6e18:	d12e      	bne.n	6e78 <__b2d+0x8c>
    6e1a:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
    6e1e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    6e22:	460a      	mov	r2, r1
    6e24:	ec43 2b10 	vmov	d0, r2, r3
    6e28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6e2a:	f1b0 010b 	subs.w	r1, r0, #11
    6e2e:	d0f4      	beq.n	6e1a <__b2d+0x2e>
    6e30:	fa05 f101 	lsl.w	r1, r5, r1
    6e34:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
    6e38:	2100      	movs	r1, #0
    6e3a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    6e3e:	460a      	mov	r2, r1
    6e40:	ec43 2b10 	vmov	d0, r2, r3
    6e44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6e46:	f1c0 0c0b 	rsb	ip, r0, #11
    6e4a:	fa25 f10c 	lsr.w	r1, r5, ip
    6e4e:	42be      	cmp	r6, r7
    6e50:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
    6e54:	bf38      	it	cc
    6e56:	f854 1c08 	ldrcc.w	r1, [r4, #-8]
    6e5a:	f100 0015 	add.w	r0, r0, #21
    6e5e:	bf34      	ite	cc
    6e60:	fa21 f10c 	lsrcc.w	r1, r1, ip
    6e64:	2100      	movcs	r1, #0
    6e66:	fa05 f000 	lsl.w	r0, r5, r0
    6e6a:	4301      	orrs	r1, r0
    6e6c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    6e70:	460a      	mov	r2, r1
    6e72:	ec43 2b10 	vmov	d0, r2, r3
    6e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6e78:	f1c0 0c20 	rsb	ip, r0, #32
    6e7c:	4085      	lsls	r5, r0
    6e7e:	fa21 f30c 	lsr.w	r3, r1, ip
    6e82:	ea45 0703 	orr.w	r7, r5, r3
    6e86:	f1a4 0508 	sub.w	r5, r4, #8
    6e8a:	42ae      	cmp	r6, r5
    6e8c:	fa01 f100 	lsl.w	r1, r1, r0
    6e90:	bf3c      	itt	cc
    6e92:	f854 0c0c 	ldrcc.w	r0, [r4, #-12]
    6e96:	fa20 f00c 	lsrcc.w	r0, r0, ip
    6e9a:	f047 537f 	orr.w	r3, r7, #1069547520	; 0x3fc00000
    6e9e:	bf38      	it	cc
    6ea0:	4301      	orrcc	r1, r0
    6ea2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    6ea6:	460a      	mov	r2, r1
    6ea8:	ec43 2b10 	vmov	d0, r2, r3
    6eac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6eae:	bf00      	nop

00006eb0 <__d2b>:
    6eb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6eb4:	4688      	mov	r8, r1
    6eb6:	b083      	sub	sp, #12
    6eb8:	2101      	movs	r1, #1
    6eba:	ec57 6b10 	vmov	r6, r7, d0
    6ebe:	4615      	mov	r5, r2
    6ec0:	f7ff fbb8 	bl	6634 <_Balloc>
    6ec4:	4604      	mov	r4, r0
    6ec6:	2800      	cmp	r0, #0
    6ec8:	d051      	beq.n	6f6e <__d2b+0xbe>
    6eca:	f3c7 590a 	ubfx	r9, r7, #20, #11
    6ece:	f3c7 0313 	ubfx	r3, r7, #0, #20
    6ed2:	f1b9 0f00 	cmp.w	r9, #0
    6ed6:	d001      	beq.n	6edc <__d2b+0x2c>
    6ed8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    6edc:	2e00      	cmp	r6, #0
    6ede:	9301      	str	r3, [sp, #4]
    6ee0:	d118      	bne.n	6f14 <__d2b+0x64>
    6ee2:	a801      	add	r0, sp, #4
    6ee4:	f7ff fca0 	bl	6828 <__lo0bits>
    6ee8:	9a01      	ldr	r2, [sp, #4]
    6eea:	6162      	str	r2, [r4, #20]
    6eec:	2201      	movs	r2, #1
    6eee:	f100 0320 	add.w	r3, r0, #32
    6ef2:	6122      	str	r2, [r4, #16]
    6ef4:	f1b9 0f00 	cmp.w	r9, #0
    6ef8:	d025      	beq.n	6f46 <__d2b+0x96>
    6efa:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
    6efe:	eb09 0203 	add.w	r2, r9, r3
    6f02:	4620      	mov	r0, r4
    6f04:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
    6f08:	f8c8 2000 	str.w	r2, [r8]
    6f0c:	602b      	str	r3, [r5, #0]
    6f0e:	b003      	add	sp, #12
    6f10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    6f14:	4668      	mov	r0, sp
    6f16:	9600      	str	r6, [sp, #0]
    6f18:	f7ff fc86 	bl	6828 <__lo0bits>
    6f1c:	4603      	mov	r3, r0
    6f1e:	b310      	cbz	r0, 6f66 <__d2b+0xb6>
    6f20:	e9dd 0200 	ldrd	r0, r2, [sp]
    6f24:	f1c3 0120 	rsb	r1, r3, #32
    6f28:	fa02 f101 	lsl.w	r1, r2, r1
    6f2c:	4301      	orrs	r1, r0
    6f2e:	40da      	lsrs	r2, r3
    6f30:	6161      	str	r1, [r4, #20]
    6f32:	9201      	str	r2, [sp, #4]
    6f34:	2a00      	cmp	r2, #0
    6f36:	61a2      	str	r2, [r4, #24]
    6f38:	bf14      	ite	ne
    6f3a:	2202      	movne	r2, #2
    6f3c:	2201      	moveq	r2, #1
    6f3e:	6122      	str	r2, [r4, #16]
    6f40:	f1b9 0f00 	cmp.w	r9, #0
    6f44:	d1d9      	bne.n	6efa <__d2b+0x4a>
    6f46:	f2a3 4332 	subw	r3, r3, #1074	; 0x432
    6f4a:	f8c8 3000 	str.w	r3, [r8]
    6f4e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    6f52:	6918      	ldr	r0, [r3, #16]
    6f54:	f7ff fc48 	bl	67e8 <__hi0bits>
    6f58:	ebc0 1342 	rsb	r3, r0, r2, lsl #5
    6f5c:	4620      	mov	r0, r4
    6f5e:	602b      	str	r3, [r5, #0]
    6f60:	b003      	add	sp, #12
    6f62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    6f66:	9a00      	ldr	r2, [sp, #0]
    6f68:	6162      	str	r2, [r4, #20]
    6f6a:	9a01      	ldr	r2, [sp, #4]
    6f6c:	e7e2      	b.n	6f34 <__d2b+0x84>
    6f6e:	4b03      	ldr	r3, [pc, #12]	; (6f7c <__d2b+0xcc>)
    6f70:	4803      	ldr	r0, [pc, #12]	; (6f80 <__d2b+0xd0>)
    6f72:	4622      	mov	r2, r4
    6f74:	f240 310f 	movw	r1, #783	; 0x30f
    6f78:	f003 fcbe 	bl	a8f8 <__assert_func>
    6f7c:	20000468 	.word	0x20000468
    6f80:	200005e0 	.word	0x200005e0

00006f84 <__ratio>:
    6f84:	b5f0      	push	{r4, r5, r6, r7, lr}
    6f86:	b083      	sub	sp, #12
    6f88:	460e      	mov	r6, r1
    6f8a:	4669      	mov	r1, sp
    6f8c:	4607      	mov	r7, r0
    6f8e:	f7ff ff2d 	bl	6dec <__b2d>
    6f92:	a901      	add	r1, sp, #4
    6f94:	4630      	mov	r0, r6
    6f96:	ec55 4b10 	vmov	r4, r5, d0
    6f9a:	eeb0 7b40 	vmov.f64	d7, d0
    6f9e:	f7ff ff25 	bl	6dec <__b2d>
    6fa2:	6933      	ldr	r3, [r6, #16]
    6fa4:	693a      	ldr	r2, [r7, #16]
    6fa6:	1ad2      	subs	r2, r2, r3
    6fa8:	e9dd 3100 	ldrd	r3, r1, [sp]
    6fac:	1a5b      	subs	r3, r3, r1
    6fae:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    6fb2:	2b00      	cmp	r3, #0
    6fb4:	dd09      	ble.n	6fca <__ratio+0x46>
    6fb6:	ee17 2a90 	vmov	r2, s15
    6fba:	eb02 5503 	add.w	r5, r2, r3, lsl #20
    6fbe:	ec45 4b17 	vmov	d7, r4, r5
    6fc2:	ee87 0b00 	vdiv.f64	d0, d7, d0
    6fc6:	b003      	add	sp, #12
    6fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6fca:	ee10 2a90 	vmov	r2, s1
    6fce:	ec51 0b10 	vmov	r0, r1, d0
    6fd2:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
    6fd6:	eb02 5103 	add.w	r1, r2, r3, lsl #20
    6fda:	ec41 0b10 	vmov	d0, r0, r1
    6fde:	ee87 0b00 	vdiv.f64	d0, d7, d0
    6fe2:	b003      	add	sp, #12
    6fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6fe6:	bf00      	nop

00006fe8 <__copybits>:
    6fe8:	3901      	subs	r1, #1
    6fea:	1149      	asrs	r1, r1, #5
    6fec:	f101 0c01 	add.w	ip, r1, #1
    6ff0:	6911      	ldr	r1, [r2, #16]
    6ff2:	f102 0314 	add.w	r3, r2, #20
    6ff6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    6ffa:	428b      	cmp	r3, r1
    6ffc:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
    7000:	d217      	bcs.n	7032 <__copybits+0x4a>
    7002:	b510      	push	{r4, lr}
    7004:	f1a0 0e04 	sub.w	lr, r0, #4
    7008:	f853 4b04 	ldr.w	r4, [r3], #4
    700c:	f84e 4f04 	str.w	r4, [lr, #4]!
    7010:	4299      	cmp	r1, r3
    7012:	d8f9      	bhi.n	7008 <__copybits+0x20>
    7014:	1a8a      	subs	r2, r1, r2
    7016:	f1a2 0315 	sub.w	r3, r2, #21
    701a:	f023 0303 	bic.w	r3, r3, #3
    701e:	3304      	adds	r3, #4
    7020:	4418      	add	r0, r3
    7022:	4584      	cmp	ip, r0
    7024:	d904      	bls.n	7030 <__copybits+0x48>
    7026:	2300      	movs	r3, #0
    7028:	f840 3b04 	str.w	r3, [r0], #4
    702c:	4584      	cmp	ip, r0
    702e:	d8fb      	bhi.n	7028 <__copybits+0x40>
    7030:	bd10      	pop	{r4, pc}
    7032:	4584      	cmp	ip, r0
    7034:	d905      	bls.n	7042 <__copybits+0x5a>
    7036:	2300      	movs	r3, #0
    7038:	f840 3b04 	str.w	r3, [r0], #4
    703c:	4584      	cmp	ip, r0
    703e:	d8fb      	bhi.n	7038 <__copybits+0x50>
    7040:	4770      	bx	lr
    7042:	4770      	bx	lr

00007044 <__any_on>:
    7044:	6903      	ldr	r3, [r0, #16]
    7046:	114a      	asrs	r2, r1, #5
    7048:	4293      	cmp	r3, r2
    704a:	f100 0014 	add.w	r0, r0, #20
    704e:	da09      	bge.n	7064 <__any_on+0x20>
    7050:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    7054:	e002      	b.n	705c <__any_on+0x18>
    7056:	f853 2d04 	ldr.w	r2, [r3, #-4]!
    705a:	b9c2      	cbnz	r2, 708e <__any_on+0x4a>
    705c:	4283      	cmp	r3, r0
    705e:	d8fa      	bhi.n	7056 <__any_on+0x12>
    7060:	2000      	movs	r0, #0
    7062:	4770      	bx	lr
    7064:	dd10      	ble.n	7088 <__any_on+0x44>
    7066:	f011 011f 	ands.w	r1, r1, #31
    706a:	d00d      	beq.n	7088 <__any_on+0x44>
    706c:	b410      	push	{r4}
    706e:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
    7072:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    7076:	fa24 f201 	lsr.w	r2, r4, r1
    707a:	408a      	lsls	r2, r1
    707c:	4294      	cmp	r4, r2
    707e:	d00c      	beq.n	709a <__any_on+0x56>
    7080:	2001      	movs	r0, #1
    7082:	f85d 4b04 	ldr.w	r4, [sp], #4
    7086:	4770      	bx	lr
    7088:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    708c:	e7e6      	b.n	705c <__any_on+0x18>
    708e:	2001      	movs	r0, #1
    7090:	4770      	bx	lr
    7092:	f853 2d04 	ldr.w	r2, [r3, #-4]!
    7096:	2a00      	cmp	r2, #0
    7098:	d1f2      	bne.n	7080 <__any_on+0x3c>
    709a:	4283      	cmp	r3, r0
    709c:	d8f9      	bhi.n	7092 <__any_on+0x4e>
    709e:	2000      	movs	r0, #0
    70a0:	f85d 4b04 	ldr.w	r4, [sp], #4
    70a4:	4770      	bx	lr
    70a6:	bf00      	nop

000070a8 <__ascii_wctomb>:
    70a8:	b149      	cbz	r1, 70be <__ascii_wctomb+0x16>
    70aa:	2aff      	cmp	r2, #255	; 0xff
    70ac:	d802      	bhi.n	70b4 <__ascii_wctomb+0xc>
    70ae:	700a      	strb	r2, [r1, #0]
    70b0:	2001      	movs	r0, #1
    70b2:	4770      	bx	lr
    70b4:	238a      	movs	r3, #138	; 0x8a
    70b6:	6003      	str	r3, [r0, #0]
    70b8:	f04f 30ff 	mov.w	r0, #4294967295
    70bc:	4770      	bx	lr
    70be:	4608      	mov	r0, r1
    70c0:	4770      	bx	lr
    70c2:	bf00      	nop
    70c4:	0000      	movs	r0, r0
	...

000070c8 <_svfprintf_r>:
    70c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    70cc:	ed2d 8b08 	vpush	{d8-d11}
    70d0:	b0d1      	sub	sp, #324	; 0x144
    70d2:	460c      	mov	r4, r1
    70d4:	ee0b 1a10 	vmov	s22, r1
    70d8:	4690      	mov	r8, r2
    70da:	9308      	str	r3, [sp, #32]
    70dc:	4683      	mov	fp, r0
    70de:	f003 fb79 	bl	a7d4 <_localeconv_r>
    70e2:	6803      	ldr	r3, [r0, #0]
    70e4:	9312      	str	r3, [sp, #72]	; 0x48
    70e6:	4618      	mov	r0, r3
    70e8:	f7fe fcaa 	bl	5a40 <strlen>
    70ec:	af20      	add	r7, sp, #128	; 0x80
    70ee:	9010      	str	r0, [sp, #64]	; 0x40
    70f0:	2208      	movs	r2, #8
    70f2:	2100      	movs	r1, #0
    70f4:	4638      	mov	r0, r7
    70f6:	f7fe f9c3 	bl	5480 <memset>
    70fa:	89a3      	ldrh	r3, [r4, #12]
    70fc:	061b      	lsls	r3, r3, #24
    70fe:	d503      	bpl.n	7108 <_svfprintf_r+0x40>
    7100:	6923      	ldr	r3, [r4, #16]
    7102:	2b00      	cmp	r3, #0
    7104:	f000 8755 	beq.w	7fb2 <_svfprintf_r+0xeea>
    7108:	2300      	movs	r3, #0
    710a:	ed9f 8b83 	vldr	d8, [pc, #524]	; 7318 <_svfprintf_r+0x250>
    710e:	ed9f 9b84 	vldr	d9, [pc, #528]	; 7320 <_svfprintf_r+0x258>
    7112:	e9cd 3325 	strd	r3, r3, [sp, #148]	; 0x94
    7116:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
    711a:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
    711e:	aa27      	add	r2, sp, #156	; 0x9c
    7120:	930e      	str	r3, [sp, #56]	; 0x38
    7122:	9224      	str	r2, [sp, #144]	; 0x90
    7124:	4692      	mov	sl, r2
    7126:	9311      	str	r3, [sp, #68]	; 0x44
    7128:	9304      	str	r3, [sp, #16]
    712a:	4644      	mov	r4, r8
    712c:	46a1      	mov	r9, r4
    712e:	4b7e      	ldr	r3, [pc, #504]	; (7328 <_svfprintf_r+0x260>)
    7130:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    7134:	f7fe fa6e 	bl	5614 <__locale_mb_cur_max>
    7138:	464a      	mov	r2, r9
    713a:	4603      	mov	r3, r0
    713c:	a91c      	add	r1, sp, #112	; 0x70
    713e:	9700      	str	r7, [sp, #0]
    7140:	4658      	mov	r0, fp
    7142:	47a8      	blx	r5
    7144:	2800      	cmp	r0, #0
    7146:	f000 80b0 	beq.w	72aa <_svfprintf_r+0x1e2>
    714a:	f2c0 80a6 	blt.w	729a <_svfprintf_r+0x1d2>
    714e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    7150:	2a25      	cmp	r2, #37	; 0x25
    7152:	4603      	mov	r3, r0
    7154:	d001      	beq.n	715a <_svfprintf_r+0x92>
    7156:	4499      	add	r9, r3
    7158:	e7e9      	b.n	712e <_svfprintf_r+0x66>
    715a:	ebb9 0504 	subs.w	r5, r9, r4
    715e:	4606      	mov	r6, r0
    7160:	f040 80a7 	bne.w	72b2 <_svfprintf_r+0x1ea>
    7164:	2300      	movs	r3, #0
    7166:	f04f 32ff 	mov.w	r2, #4294967295
    716a:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    716e:	4698      	mov	r8, r3
    7170:	9306      	str	r3, [sp, #24]
    7172:	f109 0901 	add.w	r9, r9, #1
    7176:	f899 3000 	ldrb.w	r3, [r9]
    717a:	9203      	str	r2, [sp, #12]
    717c:	252b      	movs	r5, #43	; 0x2b
    717e:	2620      	movs	r6, #32
    7180:	f109 0901 	add.w	r9, r9, #1
    7184:	f1a3 0220 	sub.w	r2, r3, #32
    7188:	2a5a      	cmp	r2, #90	; 0x5a
    718a:	f200 80cf 	bhi.w	732c <_svfprintf_r+0x264>
    718e:	e8df f012 	tbh	[pc, r2, lsl #1]
    7192:	02e8      	.short	0x02e8
    7194:	00cd00cd 	.word	0x00cd00cd
    7198:	00cd02e3 	.word	0x00cd02e3
    719c:	00cd00cd 	.word	0x00cd00cd
    71a0:	00cd006a 	.word	0x00cd006a
    71a4:	020500cd 	.word	0x020500cd
    71a8:	00cd0284 	.word	0x00cd0284
    71ac:	02c90210 	.word	0x02c90210
    71b0:	02bd00cd 	.word	0x02bd00cd
    71b4:	005b005b 	.word	0x005b005b
    71b8:	005b005b 	.word	0x005b005b
    71bc:	005b005b 	.word	0x005b005b
    71c0:	005b005b 	.word	0x005b005b
    71c4:	00cd005b 	.word	0x00cd005b
    71c8:	00cd00cd 	.word	0x00cd00cd
    71cc:	00cd00cd 	.word	0x00cd00cd
    71d0:	00cd00cd 	.word	0x00cd00cd
    71d4:	00cd0153 	.word	0x00cd0153
    71d8:	021a0183 	.word	0x021a0183
    71dc:	01530153 	.word	0x01530153
    71e0:	00cd0153 	.word	0x00cd0153
    71e4:	00cd00cd 	.word	0x00cd00cd
    71e8:	021500cd 	.word	0x021500cd
    71ec:	00cd00cd 	.word	0x00cd00cd
    71f0:	00cd0296 	.word	0x00cd0296
    71f4:	00cd00cd 	.word	0x00cd00cd
    71f8:	00cd01ab 	.word	0x00cd01ab
    71fc:	00cd02aa 	.word	0x00cd02aa
    7200:	06e300cd 	.word	0x06e300cd
    7204:	00cd00cd 	.word	0x00cd00cd
    7208:	00cd00cd 	.word	0x00cd00cd
    720c:	00cd00cd 	.word	0x00cd00cd
    7210:	00cd00cd 	.word	0x00cd00cd
    7214:	00cd0153 	.word	0x00cd0153
    7218:	01de0183 	.word	0x01de0183
    721c:	01530153 	.word	0x01530153
    7220:	02770153 	.word	0x02770153
    7224:	007f01de 	.word	0x007f01de
    7228:	028900cd 	.word	0x028900cd
    722c:	025f00cd 	.word	0x025f00cd
    7230:	022f06e0 	.word	0x022f06e0
    7234:	00cd007f 	.word	0x00cd007f
    7238:	007c01ab 	.word	0x007c01ab
    723c:	00cd06b8 	.word	0x00cd06b8
    7240:	06bd00cd 	.word	0x06bd00cd
    7244:	007c00cd 	.word	0x007c00cd
    7248:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    724c:	2100      	movs	r1, #0
    724e:	f819 3b01 	ldrb.w	r3, [r9], #1
    7252:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    7256:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    725a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    725e:	2a09      	cmp	r2, #9
    7260:	d9f5      	bls.n	724e <_svfprintf_r+0x186>
    7262:	9106      	str	r1, [sp, #24]
    7264:	e78e      	b.n	7184 <_svfprintf_r+0xbc>
    7266:	4658      	mov	r0, fp
    7268:	f003 fab4 	bl	a7d4 <_localeconv_r>
    726c:	6843      	ldr	r3, [r0, #4]
    726e:	9315      	str	r3, [sp, #84]	; 0x54
    7270:	4618      	mov	r0, r3
    7272:	f7fe fbe5 	bl	5a40 <strlen>
    7276:	9016      	str	r0, [sp, #88]	; 0x58
    7278:	4658      	mov	r0, fp
    727a:	f003 faab 	bl	a7d4 <_localeconv_r>
    727e:	6883      	ldr	r3, [r0, #8]
    7280:	9313      	str	r3, [sp, #76]	; 0x4c
    7282:	9b16      	ldr	r3, [sp, #88]	; 0x58
    7284:	2b00      	cmp	r3, #0
    7286:	f040 862d 	bne.w	7ee4 <_svfprintf_r+0xe1c>
    728a:	f899 3000 	ldrb.w	r3, [r9]
    728e:	e777      	b.n	7180 <_svfprintf_r+0xb8>
    7290:	f899 3000 	ldrb.w	r3, [r9]
    7294:	f048 0820 	orr.w	r8, r8, #32
    7298:	e772      	b.n	7180 <_svfprintf_r+0xb8>
    729a:	2208      	movs	r2, #8
    729c:	2100      	movs	r1, #0
    729e:	4638      	mov	r0, r7
    72a0:	f7fe f8ee 	bl	5480 <memset>
    72a4:	2301      	movs	r3, #1
    72a6:	4499      	add	r9, r3
    72a8:	e741      	b.n	712e <_svfprintf_r+0x66>
    72aa:	ebb9 0504 	subs.w	r5, r9, r4
    72ae:	4606      	mov	r6, r0
    72b0:	d011      	beq.n	72d6 <_svfprintf_r+0x20e>
    72b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
    72b4:	442b      	add	r3, r5
    72b6:	9326      	str	r3, [sp, #152]	; 0x98
    72b8:	9b25      	ldr	r3, [sp, #148]	; 0x94
    72ba:	3301      	adds	r3, #1
    72bc:	2b07      	cmp	r3, #7
    72be:	e9ca 4500 	strd	r4, r5, [sl]
    72c2:	9325      	str	r3, [sp, #148]	; 0x94
    72c4:	dc1c      	bgt.n	7300 <_svfprintf_r+0x238>
    72c6:	f10a 0a08 	add.w	sl, sl, #8
    72ca:	9b04      	ldr	r3, [sp, #16]
    72cc:	442b      	add	r3, r5
    72ce:	9304      	str	r3, [sp, #16]
    72d0:	2e00      	cmp	r6, #0
    72d2:	f47f af47 	bne.w	7164 <_svfprintf_r+0x9c>
    72d6:	9b26      	ldr	r3, [sp, #152]	; 0x98
    72d8:	2b00      	cmp	r3, #0
    72da:	f041 820b 	bne.w	86f4 <_svfprintf_r+0x162c>
    72de:	ee1b 3a10 	vmov	r3, s22
    72e2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    72e6:	f013 0f40 	tst.w	r3, #64	; 0x40
    72ea:	9b04      	ldr	r3, [sp, #16]
    72ec:	bf18      	it	ne
    72ee:	f04f 33ff 	movne.w	r3, #4294967295
    72f2:	9304      	str	r3, [sp, #16]
    72f4:	9804      	ldr	r0, [sp, #16]
    72f6:	b051      	add	sp, #324	; 0x144
    72f8:	ecbd 8b08 	vpop	{d8-d11}
    72fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7300:	ee1b 1a10 	vmov	r1, s22
    7304:	aa24      	add	r2, sp, #144	; 0x90
    7306:	4658      	mov	r0, fp
    7308:	f004 fdda 	bl	bec0 <__ssprint_r>
    730c:	2800      	cmp	r0, #0
    730e:	d1e6      	bne.n	72de <_svfprintf_r+0x216>
    7310:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    7314:	e7d9      	b.n	72ca <_svfprintf_r+0x202>
    7316:	bf00      	nop
	...
    7320:	ffffffff 	.word	0xffffffff
    7324:	7fefffff 	.word	0x7fefffff
    7328:	20007c5c 	.word	0x20007c5c
    732c:	930b      	str	r3, [sp, #44]	; 0x2c
    732e:	2b00      	cmp	r3, #0
    7330:	d0d1      	beq.n	72d6 <_svfprintf_r+0x20e>
    7332:	2100      	movs	r1, #0
    7334:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    7338:	f88d 30dc 	strb.w	r3, [sp, #220]	; 0xdc
    733c:	2301      	movs	r3, #1
    733e:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    7342:	9302      	str	r3, [sp, #8]
    7344:	9107      	str	r1, [sp, #28]
    7346:	9305      	str	r3, [sp, #20]
    7348:	9103      	str	r1, [sp, #12]
    734a:	910f      	str	r1, [sp, #60]	; 0x3c
    734c:	ac37      	add	r4, sp, #220	; 0xdc
    734e:	f018 0302 	ands.w	r3, r8, #2
    7352:	9309      	str	r3, [sp, #36]	; 0x24
    7354:	d002      	beq.n	735c <_svfprintf_r+0x294>
    7356:	9b02      	ldr	r3, [sp, #8]
    7358:	3302      	adds	r3, #2
    735a:	9302      	str	r3, [sp, #8]
    735c:	f018 0384 	ands.w	r3, r8, #132	; 0x84
    7360:	930a      	str	r3, [sp, #40]	; 0x28
    7362:	d105      	bne.n	7370 <_svfprintf_r+0x2a8>
    7364:	9b06      	ldr	r3, [sp, #24]
    7366:	9a02      	ldr	r2, [sp, #8]
    7368:	1a9d      	subs	r5, r3, r2
    736a:	2d00      	cmp	r5, #0
    736c:	f300 8369 	bgt.w	7a42 <_svfprintf_r+0x97a>
    7370:	9a26      	ldr	r2, [sp, #152]	; 0x98
    7372:	b189      	cbz	r1, 7398 <_svfprintf_r+0x2d0>
    7374:	9925      	ldr	r1, [sp, #148]	; 0x94
    7376:	f10d 0067 	add.w	r0, sp, #103	; 0x67
    737a:	3101      	adds	r1, #1
    737c:	3201      	adds	r2, #1
    737e:	f8ca 0000 	str.w	r0, [sl]
    7382:	2907      	cmp	r1, #7
    7384:	f04f 0001 	mov.w	r0, #1
    7388:	9226      	str	r2, [sp, #152]	; 0x98
    738a:	9125      	str	r1, [sp, #148]	; 0x94
    738c:	f8ca 0004 	str.w	r0, [sl, #4]
    7390:	f300 83a2 	bgt.w	7ad8 <_svfprintf_r+0xa10>
    7394:	f10a 0a08 	add.w	sl, sl, #8
    7398:	9b09      	ldr	r3, [sp, #36]	; 0x24
    739a:	b183      	cbz	r3, 73be <_svfprintf_r+0x2f6>
    739c:	9b25      	ldr	r3, [sp, #148]	; 0x94
    739e:	a91a      	add	r1, sp, #104	; 0x68
    73a0:	3301      	adds	r3, #1
    73a2:	3202      	adds	r2, #2
    73a4:	f8ca 1000 	str.w	r1, [sl]
    73a8:	2b07      	cmp	r3, #7
    73aa:	f04f 0102 	mov.w	r1, #2
    73ae:	9226      	str	r2, [sp, #152]	; 0x98
    73b0:	9325      	str	r3, [sp, #148]	; 0x94
    73b2:	f8ca 1004 	str.w	r1, [sl, #4]
    73b6:	f300 83a3 	bgt.w	7b00 <_svfprintf_r+0xa38>
    73ba:	f10a 0a08 	add.w	sl, sl, #8
    73be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    73c0:	2b80      	cmp	r3, #128	; 0x80
    73c2:	f000 826c 	beq.w	789e <_svfprintf_r+0x7d6>
    73c6:	9b03      	ldr	r3, [sp, #12]
    73c8:	9905      	ldr	r1, [sp, #20]
    73ca:	1a5d      	subs	r5, r3, r1
    73cc:	2d00      	cmp	r5, #0
    73ce:	f300 82a5 	bgt.w	791c <_svfprintf_r+0x854>
    73d2:	f418 7f80 	tst.w	r8, #256	; 0x100
    73d6:	f040 820d 	bne.w	77f4 <_svfprintf_r+0x72c>
    73da:	9b05      	ldr	r3, [sp, #20]
    73dc:	f8ca 3004 	str.w	r3, [sl, #4]
    73e0:	441a      	add	r2, r3
    73e2:	9b25      	ldr	r3, [sp, #148]	; 0x94
    73e4:	f8ca 4000 	str.w	r4, [sl]
    73e8:	3301      	adds	r3, #1
    73ea:	2b07      	cmp	r3, #7
    73ec:	9226      	str	r2, [sp, #152]	; 0x98
    73ee:	9325      	str	r3, [sp, #148]	; 0x94
    73f0:	f300 831b 	bgt.w	7a2a <_svfprintf_r+0x962>
    73f4:	f10a 0a08 	add.w	sl, sl, #8
    73f8:	f018 0f04 	tst.w	r8, #4
    73fc:	d005      	beq.n	740a <_svfprintf_r+0x342>
    73fe:	9b06      	ldr	r3, [sp, #24]
    7400:	9902      	ldr	r1, [sp, #8]
    7402:	1a5c      	subs	r4, r3, r1
    7404:	2c00      	cmp	r4, #0
    7406:	f300 8388 	bgt.w	7b1a <_svfprintf_r+0xa52>
    740a:	9b04      	ldr	r3, [sp, #16]
    740c:	9906      	ldr	r1, [sp, #24]
    740e:	9802      	ldr	r0, [sp, #8]
    7410:	4281      	cmp	r1, r0
    7412:	bfac      	ite	ge
    7414:	185b      	addge	r3, r3, r1
    7416:	181b      	addlt	r3, r3, r0
    7418:	9304      	str	r3, [sp, #16]
    741a:	2a00      	cmp	r2, #0
    741c:	f040 82b0 	bne.w	7980 <_svfprintf_r+0x8b8>
    7420:	2300      	movs	r3, #0
    7422:	9325      	str	r3, [sp, #148]	; 0x94
    7424:	9b07      	ldr	r3, [sp, #28]
    7426:	b11b      	cbz	r3, 7430 <_svfprintf_r+0x368>
    7428:	9907      	ldr	r1, [sp, #28]
    742a:	4658      	mov	r0, fp
    742c:	f7fe fbd6 	bl	5bdc <_free_r>
    7430:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    7434:	464c      	mov	r4, r9
    7436:	e679      	b.n	712c <_svfprintf_r+0x64>
    7438:	930b      	str	r3, [sp, #44]	; 0x2c
    743a:	9b08      	ldr	r3, [sp, #32]
    743c:	3307      	adds	r3, #7
    743e:	f023 0307 	bic.w	r3, r3, #7
    7442:	ecb3 8b02 	vldmia	r3!, {d8}
    7446:	eeb0 7bc8 	vabs.f64	d7, d8
    744a:	eeb4 7b49 	vcmp.f64	d7, d9
    744e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7452:	9308      	str	r3, [sp, #32]
    7454:	f340 84e9 	ble.w	7e2a <_svfprintf_r+0xd62>
    7458:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
    745c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7460:	f101 8059 	bmi.w	8516 <_svfprintf_r+0x144e>
    7464:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    7468:	4cab      	ldr	r4, [pc, #684]	; (7718 <_svfprintf_r+0x650>)
    746a:	4bac      	ldr	r3, [pc, #688]	; (771c <_svfprintf_r+0x654>)
    746c:	f028 0880 	bic.w	r8, r8, #128	; 0x80
    7470:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    7472:	2a47      	cmp	r2, #71	; 0x47
    7474:	bfc8      	it	gt
    7476:	461c      	movgt	r4, r3
    7478:	2300      	movs	r3, #0
    747a:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    747e:	2203      	movs	r2, #3
    7480:	9307      	str	r3, [sp, #28]
    7482:	9202      	str	r2, [sp, #8]
    7484:	9205      	str	r2, [sp, #20]
    7486:	9303      	str	r3, [sp, #12]
    7488:	930f      	str	r3, [sp, #60]	; 0x3c
    748a:	2900      	cmp	r1, #0
    748c:	f43f af5f 	beq.w	734e <_svfprintf_r+0x286>
    7490:	9b02      	ldr	r3, [sp, #8]
    7492:	3301      	adds	r3, #1
    7494:	9302      	str	r3, [sp, #8]
    7496:	e75a      	b.n	734e <_svfprintf_r+0x286>
    7498:	2b43      	cmp	r3, #67	; 0x43
    749a:	930b      	str	r3, [sp, #44]	; 0x2c
    749c:	d003      	beq.n	74a6 <_svfprintf_r+0x3de>
    749e:	f018 0f10 	tst.w	r8, #16
    74a2:	f000 855d 	beq.w	7f60 <_svfprintf_r+0xe98>
    74a6:	9d08      	ldr	r5, [sp, #32]
    74a8:	2208      	movs	r2, #8
    74aa:	2100      	movs	r1, #0
    74ac:	a822      	add	r0, sp, #136	; 0x88
    74ae:	ac37      	add	r4, sp, #220	; 0xdc
    74b0:	f7fd ffe6 	bl	5480 <memset>
    74b4:	ab22      	add	r3, sp, #136	; 0x88
    74b6:	f855 2b04 	ldr.w	r2, [r5], #4
    74ba:	4621      	mov	r1, r4
    74bc:	4658      	mov	r0, fp
    74be:	f004 fbd5 	bl	bc6c <_wcrtomb_r>
    74c2:	4603      	mov	r3, r0
    74c4:	3301      	adds	r3, #1
    74c6:	9005      	str	r0, [sp, #20]
    74c8:	f001 82ee 	beq.w	8aa8 <_svfprintf_r+0x19e0>
    74cc:	9b05      	ldr	r3, [sp, #20]
    74ce:	9508      	str	r5, [sp, #32]
    74d0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    74d4:	9302      	str	r3, [sp, #8]
    74d6:	2100      	movs	r1, #0
    74d8:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    74dc:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    74e0:	9107      	str	r1, [sp, #28]
    74e2:	9103      	str	r1, [sp, #12]
    74e4:	910f      	str	r1, [sp, #60]	; 0x3c
    74e6:	e732      	b.n	734e <_svfprintf_r+0x286>
    74e8:	930b      	str	r3, [sp, #44]	; 0x2c
    74ea:	9b08      	ldr	r3, [sp, #32]
    74ec:	461a      	mov	r2, r3
    74ee:	2300      	movs	r3, #0
    74f0:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    74f4:	4613      	mov	r3, r2
    74f6:	f853 4b04 	ldr.w	r4, [r3], #4
    74fa:	9308      	str	r3, [sp, #32]
    74fc:	2c00      	cmp	r4, #0
    74fe:	f000 8548 	beq.w	7f92 <_svfprintf_r+0xeca>
    7502:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7504:	2b53      	cmp	r3, #83	; 0x53
    7506:	f000 86ec 	beq.w	82e2 <_svfprintf_r+0x121a>
    750a:	f018 0310 	ands.w	r3, r8, #16
    750e:	930c      	str	r3, [sp, #48]	; 0x30
    7510:	f040 86e7 	bne.w	82e2 <_svfprintf_r+0x121a>
    7514:	9b03      	ldr	r3, [sp, #12]
    7516:	1c5d      	adds	r5, r3, #1
    7518:	f001 80e5 	beq.w	86e6 <_svfprintf_r+0x161e>
    751c:	990c      	ldr	r1, [sp, #48]	; 0x30
    751e:	461a      	mov	r2, r3
    7520:	4620      	mov	r0, r4
    7522:	f003 f95d 	bl	a7e0 <memchr>
    7526:	9007      	str	r0, [sp, #28]
    7528:	2800      	cmp	r0, #0
    752a:	f001 8328 	beq.w	8b7e <_svfprintf_r+0x1ab6>
    752e:	9b07      	ldr	r3, [sp, #28]
    7530:	1b1a      	subs	r2, r3, r4
    7532:	9205      	str	r2, [sp, #20]
    7534:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7536:	9303      	str	r3, [sp, #12]
    7538:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    753c:	930f      	str	r3, [sp, #60]	; 0x3c
    753e:	930d      	str	r3, [sp, #52]	; 0x34
    7540:	9307      	str	r3, [sp, #28]
    7542:	2373      	movs	r3, #115	; 0x73
    7544:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    7548:	9202      	str	r2, [sp, #8]
    754a:	930b      	str	r3, [sp, #44]	; 0x2c
    754c:	e79d      	b.n	748a <_svfprintf_r+0x3c2>
    754e:	f018 0f20 	tst.w	r8, #32
    7552:	930b      	str	r3, [sp, #44]	; 0x2c
    7554:	9b08      	ldr	r3, [sp, #32]
    7556:	d03d      	beq.n	75d4 <_svfprintf_r+0x50c>
    7558:	3307      	adds	r3, #7
    755a:	f023 0307 	bic.w	r3, r3, #7
    755e:	461a      	mov	r2, r3
    7560:	4611      	mov	r1, r2
    7562:	685b      	ldr	r3, [r3, #4]
    7564:	f851 2b08 	ldr.w	r2, [r1], #8
    7568:	9108      	str	r1, [sp, #32]
    756a:	4619      	mov	r1, r3
    756c:	2b00      	cmp	r3, #0
    756e:	f2c0 840c 	blt.w	7d8a <_svfprintf_r+0xcc2>
    7572:	9b03      	ldr	r3, [sp, #12]
    7574:	3301      	adds	r3, #1
    7576:	f000 829e 	beq.w	7ab6 <_svfprintf_r+0x9ee>
    757a:	f028 0080 	bic.w	r0, r8, #128	; 0x80
    757e:	ea52 0301 	orrs.w	r3, r2, r1
    7582:	9002      	str	r0, [sp, #8]
    7584:	f040 8299 	bne.w	7aba <_svfprintf_r+0x9f2>
    7588:	9b03      	ldr	r3, [sp, #12]
    758a:	2b00      	cmp	r3, #0
    758c:	f040 829a 	bne.w	7ac4 <_svfprintf_r+0x9fc>
    7590:	4680      	mov	r8, r0
    7592:	2300      	movs	r3, #0
    7594:	9303      	str	r3, [sp, #12]
    7596:	9305      	str	r3, [sp, #20]
    7598:	ac50      	add	r4, sp, #320	; 0x140
    759a:	e106      	b.n	77aa <_svfprintf_r+0x6e2>
    759c:	9b08      	ldr	r3, [sp, #32]
    759e:	f853 2b04 	ldr.w	r2, [r3], #4
    75a2:	9206      	str	r2, [sp, #24]
    75a4:	2a00      	cmp	r2, #0
    75a6:	f280 8419 	bge.w	7ddc <_svfprintf_r+0xd14>
    75aa:	9a06      	ldr	r2, [sp, #24]
    75ac:	9308      	str	r3, [sp, #32]
    75ae:	4252      	negs	r2, r2
    75b0:	9206      	str	r2, [sp, #24]
    75b2:	f899 3000 	ldrb.w	r3, [r9]
    75b6:	f048 0804 	orr.w	r8, r8, #4
    75ba:	e5e1      	b.n	7180 <_svfprintf_r+0xb8>
    75bc:	f899 3000 	ldrb.w	r3, [r9]
    75c0:	f048 0808 	orr.w	r8, r8, #8
    75c4:	e5dc      	b.n	7180 <_svfprintf_r+0xb8>
    75c6:	f048 0810 	orr.w	r8, r8, #16
    75ca:	f018 0f20 	tst.w	r8, #32
    75ce:	930b      	str	r3, [sp, #44]	; 0x2c
    75d0:	9b08      	ldr	r3, [sp, #32]
    75d2:	d1c1      	bne.n	7558 <_svfprintf_r+0x490>
    75d4:	f018 0f10 	tst.w	r8, #16
    75d8:	f040 840b 	bne.w	7df2 <_svfprintf_r+0xd2a>
    75dc:	f018 0f40 	tst.w	r8, #64	; 0x40
    75e0:	f000 8403 	beq.w	7dea <_svfprintf_r+0xd22>
    75e4:	f933 2b04 	ldrsh.w	r2, [r3], #4
    75e8:	9308      	str	r3, [sp, #32]
    75ea:	17d1      	asrs	r1, r2, #31
    75ec:	460b      	mov	r3, r1
    75ee:	e7bd      	b.n	756c <_svfprintf_r+0x4a4>
    75f0:	9b08      	ldr	r3, [sp, #32]
    75f2:	f048 0202 	orr.w	r2, r8, #2
    75f6:	9202      	str	r2, [sp, #8]
    75f8:	f853 2b04 	ldr.w	r2, [r3], #4
    75fc:	9308      	str	r3, [sp, #32]
    75fe:	f647 0330 	movw	r3, #30768	; 0x7830
    7602:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    7606:	2078      	movs	r0, #120	; 0x78
    7608:	4b45      	ldr	r3, [pc, #276]	; (7720 <_svfprintf_r+0x658>)
    760a:	9311      	str	r3, [sp, #68]	; 0x44
    760c:	2100      	movs	r1, #0
    760e:	2302      	movs	r3, #2
    7610:	900b      	str	r0, [sp, #44]	; 0x2c
    7612:	2000      	movs	r0, #0
    7614:	9c03      	ldr	r4, [sp, #12]
    7616:	f88d 0067 	strb.w	r0, [sp, #103]	; 0x67
    761a:	1c60      	adds	r0, r4, #1
    761c:	f000 80ad 	beq.w	777a <_svfprintf_r+0x6b2>
    7620:	9802      	ldr	r0, [sp, #8]
    7622:	f020 0880 	bic.w	r8, r0, #128	; 0x80
    7626:	ea52 0001 	orrs.w	r0, r2, r1
    762a:	f040 80a4 	bne.w	7776 <_svfprintf_r+0x6ae>
    762e:	2c00      	cmp	r4, #0
    7630:	f040 86ae 	bne.w	8390 <_svfprintf_r+0x12c8>
    7634:	2b00      	cmp	r3, #0
    7636:	d1ac      	bne.n	7592 <_svfprintf_r+0x4ca>
    7638:	9b02      	ldr	r3, [sp, #8]
    763a:	f013 0301 	ands.w	r3, r3, #1
    763e:	9305      	str	r3, [sp, #20]
    7640:	f000 83d1 	beq.w	7de6 <_svfprintf_r+0xd1e>
    7644:	2330      	movs	r3, #48	; 0x30
    7646:	f88d 313f 	strb.w	r3, [sp, #319]	; 0x13f
    764a:	f20d 143f 	addw	r4, sp, #319	; 0x13f
    764e:	e0ac      	b.n	77aa <_svfprintf_r+0x6e2>
    7650:	f018 0f20 	tst.w	r8, #32
    7654:	f040 83d4 	bne.w	7e00 <_svfprintf_r+0xd38>
    7658:	f018 0f10 	tst.w	r8, #16
    765c:	f040 869f 	bne.w	839e <_svfprintf_r+0x12d6>
    7660:	f018 0f40 	tst.w	r8, #64	; 0x40
    7664:	f040 8797 	bne.w	8596 <_svfprintf_r+0x14ce>
    7668:	f418 7f00 	tst.w	r8, #512	; 0x200
    766c:	f000 8697 	beq.w	839e <_svfprintf_r+0x12d6>
    7670:	9b08      	ldr	r3, [sp, #32]
    7672:	9904      	ldr	r1, [sp, #16]
    7674:	f853 2b04 	ldr.w	r2, [r3], #4
    7678:	9308      	str	r3, [sp, #32]
    767a:	7011      	strb	r1, [r2, #0]
    767c:	464c      	mov	r4, r9
    767e:	e555      	b.n	712c <_svfprintf_r+0x64>
    7680:	f899 3000 	ldrb.w	r3, [r9]
    7684:	2b68      	cmp	r3, #104	; 0x68
    7686:	bf03      	ittte	eq
    7688:	f899 3001 	ldrbeq.w	r3, [r9, #1]
    768c:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
    7690:	f109 0901 	addeq.w	r9, r9, #1
    7694:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
    7698:	e572      	b.n	7180 <_svfprintf_r+0xb8>
    769a:	f899 3000 	ldrb.w	r3, [r9]
    769e:	f88d 5067 	strb.w	r5, [sp, #103]	; 0x67
    76a2:	e56d      	b.n	7180 <_svfprintf_r+0xb8>
    76a4:	f899 3000 	ldrb.w	r3, [r9]
    76a8:	2b6c      	cmp	r3, #108	; 0x6c
    76aa:	bf03      	ittte	eq
    76ac:	f899 3001 	ldrbeq.w	r3, [r9, #1]
    76b0:	f048 0820 	orreq.w	r8, r8, #32
    76b4:	f109 0901 	addeq.w	r9, r9, #1
    76b8:	f048 0810 	orrne.w	r8, r8, #16
    76bc:	e560      	b.n	7180 <_svfprintf_r+0xb8>
    76be:	930b      	str	r3, [sp, #44]	; 0x2c
    76c0:	f048 0810 	orr.w	r8, r8, #16
    76c4:	f018 0120 	ands.w	r1, r8, #32
    76c8:	f000 8351 	beq.w	7d6e <_svfprintf_r+0xca6>
    76cc:	9b08      	ldr	r3, [sp, #32]
    76ce:	3307      	adds	r3, #7
    76d0:	f023 0307 	bic.w	r3, r3, #7
    76d4:	6859      	ldr	r1, [r3, #4]
    76d6:	f853 2b08 	ldr.w	r2, [r3], #8
    76da:	9308      	str	r3, [sp, #32]
    76dc:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
    76e0:	9302      	str	r3, [sp, #8]
    76e2:	2300      	movs	r3, #0
    76e4:	e795      	b.n	7612 <_svfprintf_r+0x54a>
    76e6:	930b      	str	r3, [sp, #44]	; 0x2c
    76e8:	f048 0310 	orr.w	r3, r8, #16
    76ec:	9302      	str	r3, [sp, #8]
    76ee:	9b02      	ldr	r3, [sp, #8]
    76f0:	f013 0120 	ands.w	r1, r3, #32
    76f4:	f000 8329 	beq.w	7d4a <_svfprintf_r+0xc82>
    76f8:	9b08      	ldr	r3, [sp, #32]
    76fa:	3307      	adds	r3, #7
    76fc:	f023 0307 	bic.w	r3, r3, #7
    7700:	6859      	ldr	r1, [r3, #4]
    7702:	f853 2b08 	ldr.w	r2, [r3], #8
    7706:	9308      	str	r3, [sp, #32]
    7708:	2301      	movs	r3, #1
    770a:	e782      	b.n	7612 <_svfprintf_r+0x54a>
    770c:	f899 3000 	ldrb.w	r3, [r9]
    7710:	f048 0880 	orr.w	r8, r8, #128	; 0x80
    7714:	e534      	b.n	7180 <_svfprintf_r+0xb8>
    7716:	bf00      	nop
    7718:	200007dc 	.word	0x200007dc
    771c:	200007e0 	.word	0x200007e0
    7720:	200007ec 	.word	0x200007ec
    7724:	4649      	mov	r1, r9
    7726:	f811 3b01 	ldrb.w	r3, [r1], #1
    772a:	2b2a      	cmp	r3, #42	; 0x2a
    772c:	f001 8249 	beq.w	8bc2 <_svfprintf_r+0x1afa>
    7730:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    7734:	2a09      	cmp	r2, #9
    7736:	4689      	mov	r9, r1
    7738:	bf98      	it	ls
    773a:	2100      	movls	r1, #0
    773c:	f201 8144 	bhi.w	89c8 <_svfprintf_r+0x1900>
    7740:	f819 3b01 	ldrb.w	r3, [r9], #1
    7744:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    7748:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    774c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    7750:	2a09      	cmp	r2, #9
    7752:	d9f5      	bls.n	7740 <_svfprintf_r+0x678>
    7754:	9103      	str	r1, [sp, #12]
    7756:	e515      	b.n	7184 <_svfprintf_r+0xbc>
    7758:	f899 3000 	ldrb.w	r3, [r9]
    775c:	f048 0801 	orr.w	r8, r8, #1
    7760:	e50e      	b.n	7180 <_svfprintf_r+0xb8>
    7762:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
    7766:	2b00      	cmp	r3, #0
    7768:	f47f ad8f 	bne.w	728a <_svfprintf_r+0x1c2>
    776c:	f899 3000 	ldrb.w	r3, [r9]
    7770:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
    7774:	e504      	b.n	7180 <_svfprintf_r+0xb8>
    7776:	f8cd 8008 	str.w	r8, [sp, #8]
    777a:	2b01      	cmp	r3, #1
    777c:	f000 819d 	beq.w	7aba <_svfprintf_r+0x9f2>
    7780:	2b02      	cmp	r3, #2
    7782:	ac50      	add	r4, sp, #320	; 0x140
    7784:	d120      	bne.n	77c8 <_svfprintf_r+0x700>
    7786:	9811      	ldr	r0, [sp, #68]	; 0x44
    7788:	f002 030f 	and.w	r3, r2, #15
    778c:	0912      	lsrs	r2, r2, #4
    778e:	5cc3      	ldrb	r3, [r0, r3]
    7790:	f804 3d01 	strb.w	r3, [r4, #-1]!
    7794:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    7798:	0909      	lsrs	r1, r1, #4
    779a:	ea52 0301 	orrs.w	r3, r2, r1
    779e:	d1f3      	bne.n	7788 <_svfprintf_r+0x6c0>
    77a0:	ab50      	add	r3, sp, #320	; 0x140
    77a2:	1b1b      	subs	r3, r3, r4
    77a4:	f8dd 8008 	ldr.w	r8, [sp, #8]
    77a8:	9305      	str	r3, [sp, #20]
    77aa:	9a05      	ldr	r2, [sp, #20]
    77ac:	9803      	ldr	r0, [sp, #12]
    77ae:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    77b2:	4282      	cmp	r2, r0
    77b4:	f04f 0300 	mov.w	r3, #0
    77b8:	bfb8      	it	lt
    77ba:	4602      	movlt	r2, r0
    77bc:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    77c0:	9307      	str	r3, [sp, #28]
    77c2:	9202      	str	r2, [sp, #8]
    77c4:	930f      	str	r3, [sp, #60]	; 0x3c
    77c6:	e660      	b.n	748a <_svfprintf_r+0x3c2>
    77c8:	f002 0307 	and.w	r3, r2, #7
    77cc:	08d2      	lsrs	r2, r2, #3
    77ce:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    77d2:	08c9      	lsrs	r1, r1, #3
    77d4:	3330      	adds	r3, #48	; 0x30
    77d6:	ea52 0501 	orrs.w	r5, r2, r1
    77da:	4620      	mov	r0, r4
    77dc:	f804 3d01 	strb.w	r3, [r4, #-1]!
    77e0:	d1f2      	bne.n	77c8 <_svfprintf_r+0x700>
    77e2:	9a02      	ldr	r2, [sp, #8]
    77e4:	07d1      	lsls	r1, r2, #31
    77e6:	f100 824d 	bmi.w	7c84 <_svfprintf_r+0xbbc>
    77ea:	ab50      	add	r3, sp, #320	; 0x140
    77ec:	1b1b      	subs	r3, r3, r4
    77ee:	4690      	mov	r8, r2
    77f0:	9305      	str	r3, [sp, #20]
    77f2:	e7da      	b.n	77aa <_svfprintf_r+0x6e2>
    77f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    77f6:	2b65      	cmp	r3, #101	; 0x65
    77f8:	f340 80d4 	ble.w	79a4 <_svfprintf_r+0x8dc>
    77fc:	eeb5 8b40 	vcmp.f64	d8, #0.0
    7800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7804:	f040 81c1 	bne.w	7b8a <_svfprintf_r+0xac2>
    7808:	9b25      	ldr	r3, [sp, #148]	; 0x94
    780a:	49ba      	ldr	r1, [pc, #744]	; (7af4 <_svfprintf_r+0xa2c>)
    780c:	f8ca 1000 	str.w	r1, [sl]
    7810:	3301      	adds	r3, #1
    7812:	3201      	adds	r2, #1
    7814:	2101      	movs	r1, #1
    7816:	2b07      	cmp	r3, #7
    7818:	9226      	str	r2, [sp, #152]	; 0x98
    781a:	9325      	str	r3, [sp, #148]	; 0x94
    781c:	f8ca 1004 	str.w	r1, [sl, #4]
    7820:	f300 8551 	bgt.w	82c6 <_svfprintf_r+0x11fe>
    7824:	f10a 0a08 	add.w	sl, sl, #8
    7828:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    782a:	990e      	ldr	r1, [sp, #56]	; 0x38
    782c:	428b      	cmp	r3, r1
    782e:	f280 82d0 	bge.w	7dd2 <_svfprintf_r+0xd0a>
    7832:	9b10      	ldr	r3, [sp, #64]	; 0x40
    7834:	9912      	ldr	r1, [sp, #72]	; 0x48
    7836:	441a      	add	r2, r3
    7838:	e9ca 1300 	strd	r1, r3, [sl]
    783c:	9b25      	ldr	r3, [sp, #148]	; 0x94
    783e:	9226      	str	r2, [sp, #152]	; 0x98
    7840:	3301      	adds	r3, #1
    7842:	2b07      	cmp	r3, #7
    7844:	9325      	str	r3, [sp, #148]	; 0x94
    7846:	f300 8397 	bgt.w	7f78 <_svfprintf_r+0xeb0>
    784a:	f10a 0a08 	add.w	sl, sl, #8
    784e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7850:	1e5c      	subs	r4, r3, #1
    7852:	2c00      	cmp	r4, #0
    7854:	f77f add0 	ble.w	73f8 <_svfprintf_r+0x330>
    7858:	2c10      	cmp	r4, #16
    785a:	9b25      	ldr	r3, [sp, #148]	; 0x94
    785c:	f340 856e 	ble.w	833c <_svfprintf_r+0x1274>
    7860:	ee1b 6a10 	vmov	r6, s22
    7864:	2510      	movs	r5, #16
    7866:	e005      	b.n	7874 <_svfprintf_r+0x7ac>
    7868:	f10a 0a08 	add.w	sl, sl, #8
    786c:	3c10      	subs	r4, #16
    786e:	2c10      	cmp	r4, #16
    7870:	f340 8564 	ble.w	833c <_svfprintf_r+0x1274>
    7874:	3301      	adds	r3, #1
    7876:	49a0      	ldr	r1, [pc, #640]	; (7af8 <_svfprintf_r+0xa30>)
    7878:	3210      	adds	r2, #16
    787a:	2b07      	cmp	r3, #7
    787c:	e9ca 1500 	strd	r1, r5, [sl]
    7880:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    7884:	ddf0      	ble.n	7868 <_svfprintf_r+0x7a0>
    7886:	aa24      	add	r2, sp, #144	; 0x90
    7888:	4631      	mov	r1, r6
    788a:	4658      	mov	r0, fp
    788c:	f004 fb18 	bl	bec0 <__ssprint_r>
    7890:	2800      	cmp	r0, #0
    7892:	d17e      	bne.n	7992 <_svfprintf_r+0x8ca>
    7894:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    7898:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    789c:	e7e6      	b.n	786c <_svfprintf_r+0x7a4>
    789e:	9b06      	ldr	r3, [sp, #24]
    78a0:	9902      	ldr	r1, [sp, #8]
    78a2:	1a5d      	subs	r5, r3, r1
    78a4:	2d00      	cmp	r5, #0
    78a6:	f77f ad8e 	ble.w	73c6 <_svfprintf_r+0x2fe>
    78aa:	2d10      	cmp	r5, #16
    78ac:	9b25      	ldr	r3, [sp, #148]	; 0x94
    78ae:	dd21      	ble.n	78f4 <_svfprintf_r+0x82c>
    78b0:	9409      	str	r4, [sp, #36]	; 0x24
    78b2:	2610      	movs	r6, #16
    78b4:	ee1b 4a10 	vmov	r4, s22
    78b8:	e004      	b.n	78c4 <_svfprintf_r+0x7fc>
    78ba:	3d10      	subs	r5, #16
    78bc:	2d10      	cmp	r5, #16
    78be:	f10a 0a08 	add.w	sl, sl, #8
    78c2:	dd16      	ble.n	78f2 <_svfprintf_r+0x82a>
    78c4:	3301      	adds	r3, #1
    78c6:	498c      	ldr	r1, [pc, #560]	; (7af8 <_svfprintf_r+0xa30>)
    78c8:	3210      	adds	r2, #16
    78ca:	2b07      	cmp	r3, #7
    78cc:	e9ca 1600 	strd	r1, r6, [sl]
    78d0:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    78d4:	ddf1      	ble.n	78ba <_svfprintf_r+0x7f2>
    78d6:	aa24      	add	r2, sp, #144	; 0x90
    78d8:	4621      	mov	r1, r4
    78da:	4658      	mov	r0, fp
    78dc:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    78e0:	f004 faee 	bl	bec0 <__ssprint_r>
    78e4:	2800      	cmp	r0, #0
    78e6:	d154      	bne.n	7992 <_svfprintf_r+0x8ca>
    78e8:	3d10      	subs	r5, #16
    78ea:	2d10      	cmp	r5, #16
    78ec:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    78f0:	dce8      	bgt.n	78c4 <_svfprintf_r+0x7fc>
    78f2:	9c09      	ldr	r4, [sp, #36]	; 0x24
    78f4:	4980      	ldr	r1, [pc, #512]	; (7af8 <_svfprintf_r+0xa30>)
    78f6:	f8ca 5004 	str.w	r5, [sl, #4]
    78fa:	3301      	adds	r3, #1
    78fc:	442a      	add	r2, r5
    78fe:	2b07      	cmp	r3, #7
    7900:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    7904:	f8ca 1000 	str.w	r1, [sl]
    7908:	f300 8526 	bgt.w	8358 <_svfprintf_r+0x1290>
    790c:	9b03      	ldr	r3, [sp, #12]
    790e:	9905      	ldr	r1, [sp, #20]
    7910:	1a5d      	subs	r5, r3, r1
    7912:	2d00      	cmp	r5, #0
    7914:	f10a 0a08 	add.w	sl, sl, #8
    7918:	f77f ad5b 	ble.w	73d2 <_svfprintf_r+0x30a>
    791c:	2d10      	cmp	r5, #16
    791e:	9b25      	ldr	r3, [sp, #148]	; 0x94
    7920:	dd1f      	ble.n	7962 <_svfprintf_r+0x89a>
    7922:	4651      	mov	r1, sl
    7924:	2610      	movs	r6, #16
    7926:	ee1b aa10 	vmov	sl, s22
    792a:	e004      	b.n	7936 <_svfprintf_r+0x86e>
    792c:	3d10      	subs	r5, #16
    792e:	2d10      	cmp	r5, #16
    7930:	f101 0108 	add.w	r1, r1, #8
    7934:	dd14      	ble.n	7960 <_svfprintf_r+0x898>
    7936:	3301      	adds	r3, #1
    7938:	486f      	ldr	r0, [pc, #444]	; (7af8 <_svfprintf_r+0xa30>)
    793a:	3210      	adds	r2, #16
    793c:	2b07      	cmp	r3, #7
    793e:	e9c1 0600 	strd	r0, r6, [r1]
    7942:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    7946:	ddf1      	ble.n	792c <_svfprintf_r+0x864>
    7948:	aa24      	add	r2, sp, #144	; 0x90
    794a:	4651      	mov	r1, sl
    794c:	4658      	mov	r0, fp
    794e:	f004 fab7 	bl	bec0 <__ssprint_r>
    7952:	b9f0      	cbnz	r0, 7992 <_svfprintf_r+0x8ca>
    7954:	3d10      	subs	r5, #16
    7956:	2d10      	cmp	r5, #16
    7958:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    795c:	a927      	add	r1, sp, #156	; 0x9c
    795e:	dcea      	bgt.n	7936 <_svfprintf_r+0x86e>
    7960:	468a      	mov	sl, r1
    7962:	3301      	adds	r3, #1
    7964:	4964      	ldr	r1, [pc, #400]	; (7af8 <_svfprintf_r+0xa30>)
    7966:	f8ca 5004 	str.w	r5, [sl, #4]
    796a:	442a      	add	r2, r5
    796c:	2b07      	cmp	r3, #7
    796e:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    7972:	f8ca 1000 	str.w	r1, [sl]
    7976:	f300 81da 	bgt.w	7d2e <_svfprintf_r+0xc66>
    797a:	f10a 0a08 	add.w	sl, sl, #8
    797e:	e528      	b.n	73d2 <_svfprintf_r+0x30a>
    7980:	ee1b 1a10 	vmov	r1, s22
    7984:	aa24      	add	r2, sp, #144	; 0x90
    7986:	4658      	mov	r0, fp
    7988:	f004 fa9a 	bl	bec0 <__ssprint_r>
    798c:	2800      	cmp	r0, #0
    798e:	f43f ad47 	beq.w	7420 <_svfprintf_r+0x358>
    7992:	9b07      	ldr	r3, [sp, #28]
    7994:	2b00      	cmp	r3, #0
    7996:	f43f aca2 	beq.w	72de <_svfprintf_r+0x216>
    799a:	9907      	ldr	r1, [sp, #28]
    799c:	4658      	mov	r0, fp
    799e:	f7fe f91d 	bl	5bdc <_free_r>
    79a2:	e49c      	b.n	72de <_svfprintf_r+0x216>
    79a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    79a6:	2b01      	cmp	r3, #1
    79a8:	f340 817a 	ble.w	7ca0 <_svfprintf_r+0xbd8>
    79ac:	9b25      	ldr	r3, [sp, #148]	; 0x94
    79ae:	f8ca 4000 	str.w	r4, [sl]
    79b2:	3301      	adds	r3, #1
    79b4:	3201      	adds	r2, #1
    79b6:	2101      	movs	r1, #1
    79b8:	2b07      	cmp	r3, #7
    79ba:	9226      	str	r2, [sp, #152]	; 0x98
    79bc:	9325      	str	r3, [sp, #148]	; 0x94
    79be:	f8ca 1004 	str.w	r1, [sl, #4]
    79c2:	f300 81f8 	bgt.w	7db6 <_svfprintf_r+0xcee>
    79c6:	f10a 0a08 	add.w	sl, sl, #8
    79ca:	9910      	ldr	r1, [sp, #64]	; 0x40
    79cc:	9812      	ldr	r0, [sp, #72]	; 0x48
    79ce:	3301      	adds	r3, #1
    79d0:	440a      	add	r2, r1
    79d2:	2b07      	cmp	r3, #7
    79d4:	e9ca 0100 	strd	r0, r1, [sl]
    79d8:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    79dc:	f300 81dd 	bgt.w	7d9a <_svfprintf_r+0xcd2>
    79e0:	f10a 0a08 	add.w	sl, sl, #8
    79e4:	eeb5 8b40 	vcmp.f64	d8, #0.0
    79e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    79ec:	f000 8177 	beq.w	7cde <_svfprintf_r+0xc16>
    79f0:	990e      	ldr	r1, [sp, #56]	; 0x38
    79f2:	3301      	adds	r3, #1
    79f4:	3901      	subs	r1, #1
    79f6:	3401      	adds	r4, #1
    79f8:	440a      	add	r2, r1
    79fa:	2b07      	cmp	r3, #7
    79fc:	f8ca 4000 	str.w	r4, [sl]
    7a00:	9325      	str	r3, [sp, #148]	; 0x94
    7a02:	f8ca 1004 	str.w	r1, [sl, #4]
    7a06:	9226      	str	r2, [sp, #152]	; 0x98
    7a08:	f300 815b 	bgt.w	7cc2 <_svfprintf_r+0xbfa>
    7a0c:	f10a 0a08 	add.w	sl, sl, #8
    7a10:	9914      	ldr	r1, [sp, #80]	; 0x50
    7a12:	f8ca 1004 	str.w	r1, [sl, #4]
    7a16:	3301      	adds	r3, #1
    7a18:	440a      	add	r2, r1
    7a1a:	2b07      	cmp	r3, #7
    7a1c:	a91e      	add	r1, sp, #120	; 0x78
    7a1e:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    7a22:	f8ca 1000 	str.w	r1, [sl]
    7a26:	f77f ace5 	ble.w	73f4 <_svfprintf_r+0x32c>
    7a2a:	ee1b 1a10 	vmov	r1, s22
    7a2e:	aa24      	add	r2, sp, #144	; 0x90
    7a30:	4658      	mov	r0, fp
    7a32:	f004 fa45 	bl	bec0 <__ssprint_r>
    7a36:	2800      	cmp	r0, #0
    7a38:	d1ab      	bne.n	7992 <_svfprintf_r+0x8ca>
    7a3a:	9a26      	ldr	r2, [sp, #152]	; 0x98
    7a3c:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    7a40:	e4da      	b.n	73f8 <_svfprintf_r+0x330>
    7a42:	2d10      	cmp	r5, #16
    7a44:	e9dd 1225 	ldrd	r1, r2, [sp, #148]	; 0x94
    7a48:	4e2c      	ldr	r6, [pc, #176]	; (7afc <_svfprintf_r+0xa34>)
    7a4a:	dd24      	ble.n	7a96 <_svfprintf_r+0x9ce>
    7a4c:	9417      	str	r4, [sp, #92]	; 0x5c
    7a4e:	2310      	movs	r3, #16
    7a50:	ee1b 4a10 	vmov	r4, s22
    7a54:	4608      	mov	r0, r1
    7a56:	e004      	b.n	7a62 <_svfprintf_r+0x99a>
    7a58:	3d10      	subs	r5, #16
    7a5a:	2d10      	cmp	r5, #16
    7a5c:	f10a 0a08 	add.w	sl, sl, #8
    7a60:	dd17      	ble.n	7a92 <_svfprintf_r+0x9ca>
    7a62:	3001      	adds	r0, #1
    7a64:	3210      	adds	r2, #16
    7a66:	2807      	cmp	r0, #7
    7a68:	e9ca 6300 	strd	r6, r3, [sl]
    7a6c:	e9cd 0225 	strd	r0, r2, [sp, #148]	; 0x94
    7a70:	ddf2      	ble.n	7a58 <_svfprintf_r+0x990>
    7a72:	aa24      	add	r2, sp, #144	; 0x90
    7a74:	4621      	mov	r1, r4
    7a76:	4658      	mov	r0, fp
    7a78:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    7a7c:	f004 fa20 	bl	bec0 <__ssprint_r>
    7a80:	2800      	cmp	r0, #0
    7a82:	d186      	bne.n	7992 <_svfprintf_r+0x8ca>
    7a84:	3d10      	subs	r5, #16
    7a86:	2d10      	cmp	r5, #16
    7a88:	e9dd 0225 	ldrd	r0, r2, [sp, #148]	; 0x94
    7a8c:	f04f 0310 	mov.w	r3, #16
    7a90:	dce7      	bgt.n	7a62 <_svfprintf_r+0x99a>
    7a92:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    7a94:	4601      	mov	r1, r0
    7a96:	3101      	adds	r1, #1
    7a98:	442a      	add	r2, r5
    7a9a:	2907      	cmp	r1, #7
    7a9c:	e9cd 1225 	strd	r1, r2, [sp, #148]	; 0x94
    7aa0:	f8ca 6000 	str.w	r6, [sl]
    7aa4:	f8ca 5004 	str.w	r5, [sl, #4]
    7aa8:	f300 83bd 	bgt.w	8226 <_svfprintf_r+0x115e>
    7aac:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    7ab0:	f10a 0a08 	add.w	sl, sl, #8
    7ab4:	e45d      	b.n	7372 <_svfprintf_r+0x2aa>
    7ab6:	f8cd 8008 	str.w	r8, [sp, #8]
    7aba:	2a0a      	cmp	r2, #10
    7abc:	f171 0300 	sbcs.w	r3, r1, #0
    7ac0:	f080 8345 	bcs.w	814e <_svfprintf_r+0x1086>
    7ac4:	3230      	adds	r2, #48	; 0x30
    7ac6:	2301      	movs	r3, #1
    7ac8:	f8dd 8008 	ldr.w	r8, [sp, #8]
    7acc:	f88d 213f 	strb.w	r2, [sp, #319]	; 0x13f
    7ad0:	9305      	str	r3, [sp, #20]
    7ad2:	f20d 143f 	addw	r4, sp, #319	; 0x13f
    7ad6:	e668      	b.n	77aa <_svfprintf_r+0x6e2>
    7ad8:	ee1b 1a10 	vmov	r1, s22
    7adc:	aa24      	add	r2, sp, #144	; 0x90
    7ade:	4658      	mov	r0, fp
    7ae0:	f004 f9ee 	bl	bec0 <__ssprint_r>
    7ae4:	2800      	cmp	r0, #0
    7ae6:	f47f af54 	bne.w	7992 <_svfprintf_r+0x8ca>
    7aea:	9a26      	ldr	r2, [sp, #152]	; 0x98
    7aec:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    7af0:	e452      	b.n	7398 <_svfprintf_r+0x2d0>
    7af2:	bf00      	nop
    7af4:	2000081c 	.word	0x2000081c
    7af8:	20007a40 	.word	0x20007a40
    7afc:	20002298 	.word	0x20002298
    7b00:	ee1b 1a10 	vmov	r1, s22
    7b04:	aa24      	add	r2, sp, #144	; 0x90
    7b06:	4658      	mov	r0, fp
    7b08:	f004 f9da 	bl	bec0 <__ssprint_r>
    7b0c:	2800      	cmp	r0, #0
    7b0e:	f47f af40 	bne.w	7992 <_svfprintf_r+0x8ca>
    7b12:	9a26      	ldr	r2, [sp, #152]	; 0x98
    7b14:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    7b18:	e451      	b.n	73be <_svfprintf_r+0x2f6>
    7b1a:	2c10      	cmp	r4, #16
    7b1c:	9b25      	ldr	r3, [sp, #148]	; 0x94
    7b1e:	4ebe      	ldr	r6, [pc, #760]	; (7e18 <_svfprintf_r+0xd50>)
    7b20:	dd1f      	ble.n	7b62 <_svfprintf_r+0xa9a>
    7b22:	ee1b 8a10 	vmov	r8, s22
    7b26:	2510      	movs	r5, #16
    7b28:	e004      	b.n	7b34 <_svfprintf_r+0xa6c>
    7b2a:	3c10      	subs	r4, #16
    7b2c:	2c10      	cmp	r4, #16
    7b2e:	f10a 0a08 	add.w	sl, sl, #8
    7b32:	dd16      	ble.n	7b62 <_svfprintf_r+0xa9a>
    7b34:	3301      	adds	r3, #1
    7b36:	3210      	adds	r2, #16
    7b38:	2b07      	cmp	r3, #7
    7b3a:	e9ca 6500 	strd	r6, r5, [sl]
    7b3e:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    7b42:	ddf2      	ble.n	7b2a <_svfprintf_r+0xa62>
    7b44:	aa24      	add	r2, sp, #144	; 0x90
    7b46:	4641      	mov	r1, r8
    7b48:	4658      	mov	r0, fp
    7b4a:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    7b4e:	f004 f9b7 	bl	bec0 <__ssprint_r>
    7b52:	2800      	cmp	r0, #0
    7b54:	f47f af1d 	bne.w	7992 <_svfprintf_r+0x8ca>
    7b58:	3c10      	subs	r4, #16
    7b5a:	2c10      	cmp	r4, #16
    7b5c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    7b60:	dce8      	bgt.n	7b34 <_svfprintf_r+0xa6c>
    7b62:	3301      	adds	r3, #1
    7b64:	4422      	add	r2, r4
    7b66:	2b07      	cmp	r3, #7
    7b68:	e9ca 6400 	strd	r6, r4, [sl]
    7b6c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    7b70:	f77f ac4b 	ble.w	740a <_svfprintf_r+0x342>
    7b74:	ee1b 1a10 	vmov	r1, s22
    7b78:	aa24      	add	r2, sp, #144	; 0x90
    7b7a:	4658      	mov	r0, fp
    7b7c:	f004 f9a0 	bl	bec0 <__ssprint_r>
    7b80:	2800      	cmp	r0, #0
    7b82:	f47f af06 	bne.w	7992 <_svfprintf_r+0x8ca>
    7b86:	9a26      	ldr	r2, [sp, #152]	; 0x98
    7b88:	e43f      	b.n	740a <_svfprintf_r+0x342>
    7b8a:	991b      	ldr	r1, [sp, #108]	; 0x6c
    7b8c:	2900      	cmp	r1, #0
    7b8e:	f340 835a 	ble.w	8246 <_svfprintf_r+0x117e>
    7b92:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    7b94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7b96:	429e      	cmp	r6, r3
    7b98:	bfa8      	it	ge
    7b9a:	461e      	movge	r6, r3
    7b9c:	2e00      	cmp	r6, #0
    7b9e:	dd0b      	ble.n	7bb8 <_svfprintf_r+0xaf0>
    7ba0:	9b25      	ldr	r3, [sp, #148]	; 0x94
    7ba2:	3301      	adds	r3, #1
    7ba4:	4432      	add	r2, r6
    7ba6:	2b07      	cmp	r3, #7
    7ba8:	e9ca 4600 	strd	r4, r6, [sl]
    7bac:	9226      	str	r2, [sp, #152]	; 0x98
    7bae:	9325      	str	r3, [sp, #148]	; 0x94
    7bb0:	f300 8689 	bgt.w	88c6 <_svfprintf_r+0x17fe>
    7bb4:	f10a 0a08 	add.w	sl, sl, #8
    7bb8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    7bba:	2e00      	cmp	r6, #0
    7bbc:	bfa8      	it	ge
    7bbe:	1bad      	subge	r5, r5, r6
    7bc0:	2d00      	cmp	r5, #0
    7bc2:	f300 8203 	bgt.w	7fcc <_svfprintf_r+0xf04>
    7bc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7bc8:	f418 6f80 	tst.w	r8, #1024	; 0x400
    7bcc:	4423      	add	r3, r4
    7bce:	9305      	str	r3, [sp, #20]
    7bd0:	f040 821f 	bne.w	8012 <_svfprintf_r+0xf4a>
    7bd4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    7bd6:	990e      	ldr	r1, [sp, #56]	; 0x38
    7bd8:	428b      	cmp	r3, r1
    7bda:	db03      	blt.n	7be4 <_svfprintf_r+0xb1c>
    7bdc:	f018 0f01 	tst.w	r8, #1
    7be0:	f000 84cf 	beq.w	8582 <_svfprintf_r+0x14ba>
    7be4:	9910      	ldr	r1, [sp, #64]	; 0x40
    7be6:	9812      	ldr	r0, [sp, #72]	; 0x48
    7be8:	440a      	add	r2, r1
    7bea:	e9ca 0100 	strd	r0, r1, [sl]
    7bee:	9925      	ldr	r1, [sp, #148]	; 0x94
    7bf0:	9226      	str	r2, [sp, #152]	; 0x98
    7bf2:	3101      	adds	r1, #1
    7bf4:	2907      	cmp	r1, #7
    7bf6:	9125      	str	r1, [sp, #148]	; 0x94
    7bf8:	f300 86a5 	bgt.w	8946 <_svfprintf_r+0x187e>
    7bfc:	f10a 0a08 	add.w	sl, sl, #8
    7c00:	990e      	ldr	r1, [sp, #56]	; 0x38
    7c02:	1865      	adds	r5, r4, r1
    7c04:	1acc      	subs	r4, r1, r3
    7c06:	9b05      	ldr	r3, [sp, #20]
    7c08:	1aed      	subs	r5, r5, r3
    7c0a:	42a5      	cmp	r5, r4
    7c0c:	bfa8      	it	ge
    7c0e:	4625      	movge	r5, r4
    7c10:	2d00      	cmp	r5, #0
    7c12:	dd0d      	ble.n	7c30 <_svfprintf_r+0xb68>
    7c14:	f8ca 3000 	str.w	r3, [sl]
    7c18:	9b25      	ldr	r3, [sp, #148]	; 0x94
    7c1a:	f8ca 5004 	str.w	r5, [sl, #4]
    7c1e:	3301      	adds	r3, #1
    7c20:	442a      	add	r2, r5
    7c22:	2b07      	cmp	r3, #7
    7c24:	9226      	str	r2, [sp, #152]	; 0x98
    7c26:	9325      	str	r3, [sp, #148]	; 0x94
    7c28:	f300 86bb 	bgt.w	89a2 <_svfprintf_r+0x18da>
    7c2c:	f10a 0a08 	add.w	sl, sl, #8
    7c30:	2d00      	cmp	r5, #0
    7c32:	bfa8      	it	ge
    7c34:	1b64      	subge	r4, r4, r5
    7c36:	2c00      	cmp	r4, #0
    7c38:	f77f abde 	ble.w	73f8 <_svfprintf_r+0x330>
    7c3c:	2c10      	cmp	r4, #16
    7c3e:	9b25      	ldr	r3, [sp, #148]	; 0x94
    7c40:	f340 837c 	ble.w	833c <_svfprintf_r+0x1274>
    7c44:	ee1b 6a10 	vmov	r6, s22
    7c48:	2510      	movs	r5, #16
    7c4a:	e005      	b.n	7c58 <_svfprintf_r+0xb90>
    7c4c:	f10a 0a08 	add.w	sl, sl, #8
    7c50:	3c10      	subs	r4, #16
    7c52:	2c10      	cmp	r4, #16
    7c54:	f340 8372 	ble.w	833c <_svfprintf_r+0x1274>
    7c58:	3301      	adds	r3, #1
    7c5a:	4970      	ldr	r1, [pc, #448]	; (7e1c <_svfprintf_r+0xd54>)
    7c5c:	3210      	adds	r2, #16
    7c5e:	2b07      	cmp	r3, #7
    7c60:	e9ca 1500 	strd	r1, r5, [sl]
    7c64:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    7c68:	ddf0      	ble.n	7c4c <_svfprintf_r+0xb84>
    7c6a:	aa24      	add	r2, sp, #144	; 0x90
    7c6c:	4631      	mov	r1, r6
    7c6e:	4658      	mov	r0, fp
    7c70:	f004 f926 	bl	bec0 <__ssprint_r>
    7c74:	2800      	cmp	r0, #0
    7c76:	f47f ae8c 	bne.w	7992 <_svfprintf_r+0x8ca>
    7c7a:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    7c7e:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    7c82:	e7e5      	b.n	7c50 <_svfprintf_r+0xb88>
    7c84:	2b30      	cmp	r3, #48	; 0x30
    7c86:	f43f ad8b 	beq.w	77a0 <_svfprintf_r+0x6d8>
    7c8a:	2330      	movs	r3, #48	; 0x30
    7c8c:	3802      	subs	r0, #2
    7c8e:	f804 3c01 	strb.w	r3, [r4, #-1]
    7c92:	ab50      	add	r3, sp, #320	; 0x140
    7c94:	1a1b      	subs	r3, r3, r0
    7c96:	f8dd 8008 	ldr.w	r8, [sp, #8]
    7c9a:	9305      	str	r3, [sp, #20]
    7c9c:	4604      	mov	r4, r0
    7c9e:	e584      	b.n	77aa <_svfprintf_r+0x6e2>
    7ca0:	f018 0f01 	tst.w	r8, #1
    7ca4:	f47f ae82 	bne.w	79ac <_svfprintf_r+0x8e4>
    7ca8:	9b25      	ldr	r3, [sp, #148]	; 0x94
    7caa:	f8ca 4000 	str.w	r4, [sl]
    7cae:	3301      	adds	r3, #1
    7cb0:	3201      	adds	r2, #1
    7cb2:	2101      	movs	r1, #1
    7cb4:	2b07      	cmp	r3, #7
    7cb6:	9226      	str	r2, [sp, #152]	; 0x98
    7cb8:	9325      	str	r3, [sp, #148]	; 0x94
    7cba:	f8ca 1004 	str.w	r1, [sl, #4]
    7cbe:	f77f aea5 	ble.w	7a0c <_svfprintf_r+0x944>
    7cc2:	ee1b 1a10 	vmov	r1, s22
    7cc6:	aa24      	add	r2, sp, #144	; 0x90
    7cc8:	4658      	mov	r0, fp
    7cca:	f004 f8f9 	bl	bec0 <__ssprint_r>
    7cce:	2800      	cmp	r0, #0
    7cd0:	f47f ae5f 	bne.w	7992 <_svfprintf_r+0x8ca>
    7cd4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    7cd8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    7cdc:	e698      	b.n	7a10 <_svfprintf_r+0x948>
    7cde:	990e      	ldr	r1, [sp, #56]	; 0x38
    7ce0:	1e4c      	subs	r4, r1, #1
    7ce2:	2c00      	cmp	r4, #0
    7ce4:	f77f ae94 	ble.w	7a10 <_svfprintf_r+0x948>
    7ce8:	2c10      	cmp	r4, #16
    7cea:	f340 8361 	ble.w	83b0 <_svfprintf_r+0x12e8>
    7cee:	ee1b 6a10 	vmov	r6, s22
    7cf2:	2510      	movs	r5, #16
    7cf4:	e005      	b.n	7d02 <_svfprintf_r+0xc3a>
    7cf6:	f10a 0a08 	add.w	sl, sl, #8
    7cfa:	3c10      	subs	r4, #16
    7cfc:	2c10      	cmp	r4, #16
    7cfe:	f340 8357 	ble.w	83b0 <_svfprintf_r+0x12e8>
    7d02:	3301      	adds	r3, #1
    7d04:	4945      	ldr	r1, [pc, #276]	; (7e1c <_svfprintf_r+0xd54>)
    7d06:	3210      	adds	r2, #16
    7d08:	2b07      	cmp	r3, #7
    7d0a:	e9ca 1500 	strd	r1, r5, [sl]
    7d0e:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    7d12:	ddf0      	ble.n	7cf6 <_svfprintf_r+0xc2e>
    7d14:	aa24      	add	r2, sp, #144	; 0x90
    7d16:	4631      	mov	r1, r6
    7d18:	4658      	mov	r0, fp
    7d1a:	f004 f8d1 	bl	bec0 <__ssprint_r>
    7d1e:	2800      	cmp	r0, #0
    7d20:	f47f ae37 	bne.w	7992 <_svfprintf_r+0x8ca>
    7d24:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    7d28:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    7d2c:	e7e5      	b.n	7cfa <_svfprintf_r+0xc32>
    7d2e:	ee1b 1a10 	vmov	r1, s22
    7d32:	aa24      	add	r2, sp, #144	; 0x90
    7d34:	4658      	mov	r0, fp
    7d36:	f004 f8c3 	bl	bec0 <__ssprint_r>
    7d3a:	2800      	cmp	r0, #0
    7d3c:	f47f ae29 	bne.w	7992 <_svfprintf_r+0x8ca>
    7d40:	9a26      	ldr	r2, [sp, #152]	; 0x98
    7d42:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    7d46:	f7ff bb44 	b.w	73d2 <_svfprintf_r+0x30a>
    7d4a:	9b02      	ldr	r3, [sp, #8]
    7d4c:	f013 0310 	ands.w	r3, r3, #16
    7d50:	f040 80c1 	bne.w	7ed6 <_svfprintf_r+0xe0e>
    7d54:	9a02      	ldr	r2, [sp, #8]
    7d56:	f012 0240 	ands.w	r2, r2, #64	; 0x40
    7d5a:	f000 837a 	beq.w	8452 <_svfprintf_r+0x138a>
    7d5e:	9808      	ldr	r0, [sp, #32]
    7d60:	f850 2b04 	ldr.w	r2, [r0], #4
    7d64:	9008      	str	r0, [sp, #32]
    7d66:	4619      	mov	r1, r3
    7d68:	b292      	uxth	r2, r2
    7d6a:	2301      	movs	r3, #1
    7d6c:	e451      	b.n	7612 <_svfprintf_r+0x54a>
    7d6e:	f018 0310 	ands.w	r3, r8, #16
    7d72:	d155      	bne.n	7e20 <_svfprintf_r+0xd58>
    7d74:	f018 0240 	ands.w	r2, r8, #64	; 0x40
    7d78:	f000 835d 	beq.w	8436 <_svfprintf_r+0x136e>
    7d7c:	9808      	ldr	r0, [sp, #32]
    7d7e:	f850 2b04 	ldr.w	r2, [r0], #4
    7d82:	9008      	str	r0, [sp, #32]
    7d84:	4619      	mov	r1, r3
    7d86:	b292      	uxth	r2, r2
    7d88:	e4a8      	b.n	76dc <_svfprintf_r+0x614>
    7d8a:	4252      	negs	r2, r2
    7d8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    7d90:	f8cd 8008 	str.w	r8, [sp, #8]
    7d94:	202d      	movs	r0, #45	; 0x2d
    7d96:	2301      	movs	r3, #1
    7d98:	e43c      	b.n	7614 <_svfprintf_r+0x54c>
    7d9a:	ee1b 1a10 	vmov	r1, s22
    7d9e:	aa24      	add	r2, sp, #144	; 0x90
    7da0:	4658      	mov	r0, fp
    7da2:	f004 f88d 	bl	bec0 <__ssprint_r>
    7da6:	2800      	cmp	r0, #0
    7da8:	f47f adf3 	bne.w	7992 <_svfprintf_r+0x8ca>
    7dac:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    7db0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    7db4:	e616      	b.n	79e4 <_svfprintf_r+0x91c>
    7db6:	ee1b 1a10 	vmov	r1, s22
    7dba:	aa24      	add	r2, sp, #144	; 0x90
    7dbc:	4658      	mov	r0, fp
    7dbe:	f004 f87f 	bl	bec0 <__ssprint_r>
    7dc2:	2800      	cmp	r0, #0
    7dc4:	f47f ade5 	bne.w	7992 <_svfprintf_r+0x8ca>
    7dc8:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    7dcc:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    7dd0:	e5fb      	b.n	79ca <_svfprintf_r+0x902>
    7dd2:	f018 0f01 	tst.w	r8, #1
    7dd6:	f43f ab0f 	beq.w	73f8 <_svfprintf_r+0x330>
    7dda:	e52a      	b.n	7832 <_svfprintf_r+0x76a>
    7ddc:	9308      	str	r3, [sp, #32]
    7dde:	f899 3000 	ldrb.w	r3, [r9]
    7de2:	f7ff b9cd 	b.w	7180 <_svfprintf_r+0xb8>
    7de6:	ac50      	add	r4, sp, #320	; 0x140
    7de8:	e4df      	b.n	77aa <_svfprintf_r+0x6e2>
    7dea:	f418 7f00 	tst.w	r8, #512	; 0x200
    7dee:	f040 83db 	bne.w	85a8 <_svfprintf_r+0x14e0>
    7df2:	f853 2b04 	ldr.w	r2, [r3], #4
    7df6:	9308      	str	r3, [sp, #32]
    7df8:	17d1      	asrs	r1, r2, #31
    7dfa:	460b      	mov	r3, r1
    7dfc:	f7ff bbb6 	b.w	756c <_svfprintf_r+0x4a4>
    7e00:	9b08      	ldr	r3, [sp, #32]
    7e02:	9804      	ldr	r0, [sp, #16]
    7e04:	f853 1b04 	ldr.w	r1, [r3], #4
    7e08:	9308      	str	r3, [sp, #32]
    7e0a:	17c2      	asrs	r2, r0, #31
    7e0c:	e9c1 0200 	strd	r0, r2, [r1]
    7e10:	464c      	mov	r4, r9
    7e12:	f7ff b98b 	b.w	712c <_svfprintf_r+0x64>
    7e16:	bf00      	nop
    7e18:	20002298 	.word	0x20002298
    7e1c:	20007a40 	.word	0x20007a40
    7e20:	9b08      	ldr	r3, [sp, #32]
    7e22:	f853 2b04 	ldr.w	r2, [r3], #4
    7e26:	9308      	str	r3, [sp, #32]
    7e28:	e458      	b.n	76dc <_svfprintf_r+0x614>
    7e2a:	eeb4 8b48 	vcmp.f64	d8, d8
    7e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7e32:	f180 8694 	bvs.w	8b5e <_svfprintf_r+0x1a96>
    7e36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7e38:	2b61      	cmp	r3, #97	; 0x61
    7e3a:	f000 8552 	beq.w	88e2 <_svfprintf_r+0x181a>
    7e3e:	2b41      	cmp	r3, #65	; 0x41
    7e40:	f000 85c0 	beq.w	89c4 <_svfprintf_r+0x18fc>
    7e44:	9b03      	ldr	r3, [sp, #12]
    7e46:	3301      	adds	r3, #1
    7e48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7e4a:	f023 0520 	bic.w	r5, r3, #32
    7e4e:	f000 8480 	beq.w	8752 <_svfprintf_r+0x168a>
    7e52:	2d47      	cmp	r5, #71	; 0x47
    7e54:	d104      	bne.n	7e60 <_svfprintf_r+0xd98>
    7e56:	9b03      	ldr	r3, [sp, #12]
    7e58:	2b00      	cmp	r3, #0
    7e5a:	bf08      	it	eq
    7e5c:	2301      	moveq	r3, #1
    7e5e:	9303      	str	r3, [sp, #12]
    7e60:	ee18 3a90 	vmov	r3, s17
    7e64:	2b00      	cmp	r3, #0
    7e66:	f448 7280 	orr.w	r2, r8, #256	; 0x100
    7e6a:	4646      	mov	r6, r8
    7e6c:	f2c0 8618 	blt.w	8aa0 <_svfprintf_r+0x19d8>
    7e70:	eeb0 ab48 	vmov.f64	d10, d8
    7e74:	2300      	movs	r3, #0
    7e76:	4690      	mov	r8, r2
    7e78:	9309      	str	r3, [sp, #36]	; 0x24
    7e7a:	9307      	str	r3, [sp, #28]
    7e7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7e7e:	3b41      	subs	r3, #65	; 0x41
    7e80:	2b25      	cmp	r3, #37	; 0x25
    7e82:	f200 8398 	bhi.w	85b6 <_svfprintf_r+0x14ee>
    7e86:	e8df f013 	tbh	[pc, r3, lsl #1]
    7e8a:	046f      	.short	0x046f
    7e8c:	03960396 	.word	0x03960396
    7e90:	04680396 	.word	0x04680396
    7e94:	0396046c 	.word	0x0396046c
    7e98:	03960396 	.word	0x03960396
    7e9c:	03960396 	.word	0x03960396
    7ea0:	03960396 	.word	0x03960396
    7ea4:	03960396 	.word	0x03960396
    7ea8:	03960396 	.word	0x03960396
    7eac:	03960396 	.word	0x03960396
    7eb0:	03960396 	.word	0x03960396
    7eb4:	03960396 	.word	0x03960396
    7eb8:	03960396 	.word	0x03960396
    7ebc:	03960396 	.word	0x03960396
    7ec0:	03960396 	.word	0x03960396
    7ec4:	03960396 	.word	0x03960396
    7ec8:	03960396 	.word	0x03960396
    7ecc:	03960396 	.word	0x03960396
    7ed0:	04680396 	.word	0x04680396
    7ed4:	046c      	.short	0x046c
    7ed6:	9b08      	ldr	r3, [sp, #32]
    7ed8:	f853 2b04 	ldr.w	r2, [r3], #4
    7edc:	9308      	str	r3, [sp, #32]
    7ede:	2301      	movs	r3, #1
    7ee0:	f7ff bb97 	b.w	7612 <_svfprintf_r+0x54a>
    7ee4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    7ee6:	2b00      	cmp	r3, #0
    7ee8:	f43f a9cf 	beq.w	728a <_svfprintf_r+0x1c2>
    7eec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    7eee:	781b      	ldrb	r3, [r3, #0]
    7ef0:	2b00      	cmp	r3, #0
    7ef2:	f43f a9ca 	beq.w	728a <_svfprintf_r+0x1c2>
    7ef6:	f899 3000 	ldrb.w	r3, [r9]
    7efa:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
    7efe:	f7ff b93f 	b.w	7180 <_svfprintf_r+0xb8>
    7f02:	930b      	str	r3, [sp, #44]	; 0x2c
    7f04:	f8cd 8008 	str.w	r8, [sp, #8]
    7f08:	f7ff bbf1 	b.w	76ee <_svfprintf_r+0x626>
    7f0c:	930b      	str	r3, [sp, #44]	; 0x2c
    7f0e:	4b9a      	ldr	r3, [pc, #616]	; (8178 <_svfprintf_r+0x10b0>)
    7f10:	9311      	str	r3, [sp, #68]	; 0x44
    7f12:	f018 0120 	ands.w	r1, r8, #32
    7f16:	f000 8105 	beq.w	8124 <_svfprintf_r+0x105c>
    7f1a:	9b08      	ldr	r3, [sp, #32]
    7f1c:	3307      	adds	r3, #7
    7f1e:	f023 0307 	bic.w	r3, r3, #7
    7f22:	6859      	ldr	r1, [r3, #4]
    7f24:	f853 2b08 	ldr.w	r2, [r3], #8
    7f28:	9308      	str	r3, [sp, #32]
    7f2a:	f018 0f01 	tst.w	r8, #1
    7f2e:	d00a      	beq.n	7f46 <_svfprintf_r+0xe7e>
    7f30:	ea52 0301 	orrs.w	r3, r2, r1
    7f34:	d007      	beq.n	7f46 <_svfprintf_r+0xe7e>
    7f36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7f38:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    7f3c:	2330      	movs	r3, #48	; 0x30
    7f3e:	f048 0802 	orr.w	r8, r8, #2
    7f42:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    7f46:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
    7f4a:	9302      	str	r3, [sp, #8]
    7f4c:	2302      	movs	r3, #2
    7f4e:	f7ff bb60 	b.w	7612 <_svfprintf_r+0x54a>
    7f52:	930b      	str	r3, [sp, #44]	; 0x2c
    7f54:	f7ff bbb6 	b.w	76c4 <_svfprintf_r+0x5fc>
    7f58:	930b      	str	r3, [sp, #44]	; 0x2c
    7f5a:	4b88      	ldr	r3, [pc, #544]	; (817c <_svfprintf_r+0x10b4>)
    7f5c:	9311      	str	r3, [sp, #68]	; 0x44
    7f5e:	e7d8      	b.n	7f12 <_svfprintf_r+0xe4a>
    7f60:	9b08      	ldr	r3, [sp, #32]
    7f62:	2101      	movs	r1, #1
    7f64:	f853 2b04 	ldr.w	r2, [r3], #4
    7f68:	9102      	str	r1, [sp, #8]
    7f6a:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
    7f6e:	9308      	str	r3, [sp, #32]
    7f70:	9105      	str	r1, [sp, #20]
    7f72:	ac37      	add	r4, sp, #220	; 0xdc
    7f74:	f7ff baaf 	b.w	74d6 <_svfprintf_r+0x40e>
    7f78:	ee1b 1a10 	vmov	r1, s22
    7f7c:	aa24      	add	r2, sp, #144	; 0x90
    7f7e:	4658      	mov	r0, fp
    7f80:	f003 ff9e 	bl	bec0 <__ssprint_r>
    7f84:	2800      	cmp	r0, #0
    7f86:	f47f ad04 	bne.w	7992 <_svfprintf_r+0x8ca>
    7f8a:	9a26      	ldr	r2, [sp, #152]	; 0x98
    7f8c:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    7f90:	e45d      	b.n	784e <_svfprintf_r+0x786>
    7f92:	9b03      	ldr	r3, [sp, #12]
    7f94:	9407      	str	r4, [sp, #28]
    7f96:	2b06      	cmp	r3, #6
    7f98:	4622      	mov	r2, r4
    7f9a:	bf28      	it	cs
    7f9c:	2306      	movcs	r3, #6
    7f9e:	9403      	str	r4, [sp, #12]
    7fa0:	4621      	mov	r1, r4
    7fa2:	e9cd 220c 	strd	r2, r2, [sp, #48]	; 0x30
    7fa6:	4c76      	ldr	r4, [pc, #472]	; (8180 <_svfprintf_r+0x10b8>)
    7fa8:	9302      	str	r3, [sp, #8]
    7faa:	9305      	str	r3, [sp, #20]
    7fac:	920f      	str	r2, [sp, #60]	; 0x3c
    7fae:	f7ff ba6c 	b.w	748a <_svfprintf_r+0x3c2>
    7fb2:	2140      	movs	r1, #64	; 0x40
    7fb4:	4658      	mov	r0, fp
    7fb6:	f7fb fb4f 	bl	3658 <_malloc_r>
    7fba:	6020      	str	r0, [r4, #0]
    7fbc:	6120      	str	r0, [r4, #16]
    7fbe:	2800      	cmp	r0, #0
    7fc0:	f000 860f 	beq.w	8be2 <_svfprintf_r+0x1b1a>
    7fc4:	2340      	movs	r3, #64	; 0x40
    7fc6:	6163      	str	r3, [r4, #20]
    7fc8:	f7ff b89e 	b.w	7108 <_svfprintf_r+0x40>
    7fcc:	2d10      	cmp	r5, #16
    7fce:	9b25      	ldr	r3, [sp, #148]	; 0x94
    7fd0:	f340 825d 	ble.w	848e <_svfprintf_r+0x13c6>
    7fd4:	4651      	mov	r1, sl
    7fd6:	2610      	movs	r6, #16
    7fd8:	ee1b aa10 	vmov	sl, s22
    7fdc:	e004      	b.n	7fe8 <_svfprintf_r+0xf20>
    7fde:	3108      	adds	r1, #8
    7fe0:	3d10      	subs	r5, #16
    7fe2:	2d10      	cmp	r5, #16
    7fe4:	f340 8252 	ble.w	848c <_svfprintf_r+0x13c4>
    7fe8:	3301      	adds	r3, #1
    7fea:	4866      	ldr	r0, [pc, #408]	; (8184 <_svfprintf_r+0x10bc>)
    7fec:	3210      	adds	r2, #16
    7fee:	2b07      	cmp	r3, #7
    7ff0:	e9c1 0600 	strd	r0, r6, [r1]
    7ff4:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    7ff8:	ddf1      	ble.n	7fde <_svfprintf_r+0xf16>
    7ffa:	aa24      	add	r2, sp, #144	; 0x90
    7ffc:	4651      	mov	r1, sl
    7ffe:	4658      	mov	r0, fp
    8000:	f003 ff5e 	bl	bec0 <__ssprint_r>
    8004:	2800      	cmp	r0, #0
    8006:	f47f acc4 	bne.w	7992 <_svfprintf_r+0x8ca>
    800a:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    800e:	a927      	add	r1, sp, #156	; 0x9c
    8010:	e7e6      	b.n	7fe0 <_svfprintf_r+0xf18>
    8012:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8014:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    8018:	18e3      	adds	r3, r4, r3
    801a:	9303      	str	r3, [sp, #12]
    801c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    801e:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    8022:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    8024:	9d05      	ldr	r5, [sp, #20]
    8026:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
    802a:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
    802e:	940b      	str	r4, [sp, #44]	; 0x2c
    8030:	ee1b 1a10 	vmov	r1, s22
    8034:	4650      	mov	r0, sl
    8036:	2b00      	cmp	r3, #0
    8038:	d034      	beq.n	80a4 <_svfprintf_r+0xfdc>
    803a:	f1b8 0f00 	cmp.w	r8, #0
    803e:	d135      	bne.n	80ac <_svfprintf_r+0xfe4>
    8040:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8042:	3b01      	subs	r3, #1
    8044:	3e01      	subs	r6, #1
    8046:	930d      	str	r3, [sp, #52]	; 0x34
    8048:	9b15      	ldr	r3, [sp, #84]	; 0x54
    804a:	e9c0 3900 	strd	r3, r9, [r0]
    804e:	9b25      	ldr	r3, [sp, #148]	; 0x94
    8050:	3301      	adds	r3, #1
    8052:	444a      	add	r2, r9
    8054:	2b07      	cmp	r3, #7
    8056:	9226      	str	r2, [sp, #152]	; 0x98
    8058:	9325      	str	r3, [sp, #148]	; 0x94
    805a:	dc6c      	bgt.n	8136 <_svfprintf_r+0x106e>
    805c:	3008      	adds	r0, #8
    805e:	9b03      	ldr	r3, [sp, #12]
    8060:	f896 c000 	ldrb.w	ip, [r6]
    8064:	1b5b      	subs	r3, r3, r5
    8066:	4563      	cmp	r3, ip
    8068:	bfa8      	it	ge
    806a:	4663      	movge	r3, ip
    806c:	2b00      	cmp	r3, #0
    806e:	469a      	mov	sl, r3
    8070:	dd0c      	ble.n	808c <_svfprintf_r+0xfc4>
    8072:	9c25      	ldr	r4, [sp, #148]	; 0x94
    8074:	3401      	adds	r4, #1
    8076:	441a      	add	r2, r3
    8078:	2c07      	cmp	r4, #7
    807a:	e9c0 5300 	strd	r5, r3, [r0]
    807e:	9226      	str	r2, [sp, #152]	; 0x98
    8080:	9425      	str	r4, [sp, #148]	; 0x94
    8082:	f300 8177 	bgt.w	8374 <_svfprintf_r+0x12ac>
    8086:	f896 c000 	ldrb.w	ip, [r6]
    808a:	3008      	adds	r0, #8
    808c:	f1ba 0f00 	cmp.w	sl, #0
    8090:	bfac      	ite	ge
    8092:	ebac 040a 	subge.w	r4, ip, sl
    8096:	4664      	movlt	r4, ip
    8098:	2c00      	cmp	r4, #0
    809a:	dc0a      	bgt.n	80b2 <_svfprintf_r+0xfea>
    809c:	4465      	add	r5, ip
    809e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    80a0:	2b00      	cmp	r3, #0
    80a2:	d1ca      	bne.n	803a <_svfprintf_r+0xf72>
    80a4:	f1b8 0f00 	cmp.w	r8, #0
    80a8:	f000 83ac 	beq.w	8804 <_svfprintf_r+0x173c>
    80ac:	f108 38ff 	add.w	r8, r8, #4294967295
    80b0:	e7ca      	b.n	8048 <_svfprintf_r+0xf80>
    80b2:	2c10      	cmp	r4, #16
    80b4:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
    80b8:	dd24      	ble.n	8104 <_svfprintf_r+0x103c>
    80ba:	9505      	str	r5, [sp, #20]
    80bc:	f04f 0a10 	mov.w	sl, #16
    80c0:	4663      	mov	r3, ip
    80c2:	460d      	mov	r5, r1
    80c4:	e004      	b.n	80d0 <_svfprintf_r+0x1008>
    80c6:	3c10      	subs	r4, #16
    80c8:	2c10      	cmp	r4, #16
    80ca:	f100 0008 	add.w	r0, r0, #8
    80ce:	dd16      	ble.n	80fe <_svfprintf_r+0x1036>
    80d0:	3301      	adds	r3, #1
    80d2:	492c      	ldr	r1, [pc, #176]	; (8184 <_svfprintf_r+0x10bc>)
    80d4:	3210      	adds	r2, #16
    80d6:	2b07      	cmp	r3, #7
    80d8:	e9c0 1a00 	strd	r1, sl, [r0]
    80dc:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    80e0:	ddf1      	ble.n	80c6 <_svfprintf_r+0xffe>
    80e2:	aa24      	add	r2, sp, #144	; 0x90
    80e4:	4629      	mov	r1, r5
    80e6:	4658      	mov	r0, fp
    80e8:	f003 feea 	bl	bec0 <__ssprint_r>
    80ec:	2800      	cmp	r0, #0
    80ee:	f47f ac50 	bne.w	7992 <_svfprintf_r+0x8ca>
    80f2:	3c10      	subs	r4, #16
    80f4:	2c10      	cmp	r4, #16
    80f6:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    80fa:	a827      	add	r0, sp, #156	; 0x9c
    80fc:	dce8      	bgt.n	80d0 <_svfprintf_r+0x1008>
    80fe:	4629      	mov	r1, r5
    8100:	9d05      	ldr	r5, [sp, #20]
    8102:	469c      	mov	ip, r3
    8104:	f10c 0301 	add.w	r3, ip, #1
    8108:	4422      	add	r2, r4
    810a:	6044      	str	r4, [r0, #4]
    810c:	2b07      	cmp	r3, #7
    810e:	4c1d      	ldr	r4, [pc, #116]	; (8184 <_svfprintf_r+0x10bc>)
    8110:	6004      	str	r4, [r0, #0]
    8112:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    8116:	f300 83c6 	bgt.w	88a6 <_svfprintf_r+0x17de>
    811a:	f896 c000 	ldrb.w	ip, [r6]
    811e:	3008      	adds	r0, #8
    8120:	4465      	add	r5, ip
    8122:	e7bc      	b.n	809e <_svfprintf_r+0xfd6>
    8124:	f018 0310 	ands.w	r3, r8, #16
    8128:	f000 80c2 	beq.w	82b0 <_svfprintf_r+0x11e8>
    812c:	9b08      	ldr	r3, [sp, #32]
    812e:	f853 2b04 	ldr.w	r2, [r3], #4
    8132:	9308      	str	r3, [sp, #32]
    8134:	e6f9      	b.n	7f2a <_svfprintf_r+0xe62>
    8136:	aa24      	add	r2, sp, #144	; 0x90
    8138:	4658      	mov	r0, fp
    813a:	9105      	str	r1, [sp, #20]
    813c:	f003 fec0 	bl	bec0 <__ssprint_r>
    8140:	2800      	cmp	r0, #0
    8142:	f47f ac26 	bne.w	7992 <_svfprintf_r+0x8ca>
    8146:	9a26      	ldr	r2, [sp, #152]	; 0x98
    8148:	9905      	ldr	r1, [sp, #20]
    814a:	a827      	add	r0, sp, #156	; 0x9c
    814c:	e787      	b.n	805e <_svfprintf_r+0xf96>
    814e:	9802      	ldr	r0, [sp, #8]
    8150:	f8cd a01c 	str.w	sl, [sp, #28]
    8154:	ac50      	add	r4, sp, #320	; 0x140
    8156:	f400 6080 	and.w	r0, r0, #1024	; 0x400
    815a:	2500      	movs	r5, #0
    815c:	ee0a ba10 	vmov	s20, fp
    8160:	4b09      	ldr	r3, [pc, #36]	; (8188 <_svfprintf_r+0x10c0>)
    8162:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
    8166:	f8cd 9014 	str.w	r9, [sp, #20]
    816a:	46a3      	mov	fp, r4
    816c:	f04f 0805 	mov.w	r8, #5
    8170:	46ac      	mov	ip, r5
    8172:	4604      	mov	r4, r0
    8174:	e010      	b.n	8198 <_svfprintf_r+0x10d0>
    8176:	bf00      	nop
    8178:	200007ec 	.word	0x200007ec
    817c:	20000800 	.word	0x20000800
    8180:	20000814 	.word	0x20000814
    8184:	20007a40 	.word	0x20007a40
    8188:	cccccccd 	.word	0xcccccccd
    818c:	2a0a      	cmp	r2, #10
    818e:	f171 0100 	sbcs.w	r1, r1, #0
    8192:	d336      	bcc.n	8202 <_svfprintf_r+0x113a>
    8194:	464a      	mov	r2, r9
    8196:	4631      	mov	r1, r6
    8198:	1850      	adds	r0, r2, r1
    819a:	f140 0000 	adc.w	r0, r0, #0
    819e:	fba3 5600 	umull	r5, r6, r3, r0
    81a2:	f026 0503 	bic.w	r5, r6, #3
    81a6:	eb05 0596 	add.w	r5, r5, r6, lsr #2
    81aa:	1b40      	subs	r0, r0, r5
    81ac:	1a15      	subs	r5, r2, r0
    81ae:	f04f 36cc 	mov.w	r6, #3435973836	; 0xcccccccc
    81b2:	f161 0e00 	sbc.w	lr, r1, #0
    81b6:	fb06 f605 	mul.w	r6, r6, r5
    81ba:	fba5 9503 	umull	r9, r5, r5, r3
    81be:	fb03 660e 	mla	r6, r3, lr, r6
    81c2:	f009 0e01 	and.w	lr, r9, #1
    81c6:	442e      	add	r6, r5
    81c8:	fbae 5e08 	umull	r5, lr, lr, r8
    81cc:	182d      	adds	r5, r5, r0
    81ce:	ea4f 0959 	mov.w	r9, r9, lsr #1
    81d2:	3530      	adds	r5, #48	; 0x30
    81d4:	f80b 5c01 	strb.w	r5, [fp, #-1]
    81d8:	ea49 79c6 	orr.w	r9, r9, r6, lsl #31
    81dc:	f10c 0c01 	add.w	ip, ip, #1
    81e0:	f10b 3bff 	add.w	fp, fp, #4294967295
    81e4:	0876      	lsrs	r6, r6, #1
    81e6:	2c00      	cmp	r4, #0
    81e8:	d0d0      	beq.n	818c <_svfprintf_r+0x10c4>
    81ea:	f89a 0000 	ldrb.w	r0, [sl]
    81ee:	4584      	cmp	ip, r0
    81f0:	d1cc      	bne.n	818c <_svfprintf_r+0x10c4>
    81f2:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    81f6:	d0c9      	beq.n	818c <_svfprintf_r+0x10c4>
    81f8:	2a0a      	cmp	r2, #10
    81fa:	f171 0100 	sbcs.w	r1, r1, #0
    81fe:	f080 818f 	bcs.w	8520 <_svfprintf_r+0x1458>
    8202:	465c      	mov	r4, fp
    8204:	ab50      	add	r3, sp, #320	; 0x140
    8206:	1b1b      	subs	r3, r3, r4
    8208:	f8dd 9014 	ldr.w	r9, [sp, #20]
    820c:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
    8210:	ee1a ba10 	vmov	fp, s20
    8214:	f8dd a01c 	ldr.w	sl, [sp, #28]
    8218:	f8dd 8008 	ldr.w	r8, [sp, #8]
    821c:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
    8220:	9305      	str	r3, [sp, #20]
    8222:	f7ff bac2 	b.w	77aa <_svfprintf_r+0x6e2>
    8226:	ee1b 1a10 	vmov	r1, s22
    822a:	aa24      	add	r2, sp, #144	; 0x90
    822c:	4658      	mov	r0, fp
    822e:	f003 fe47 	bl	bec0 <__ssprint_r>
    8232:	2800      	cmp	r0, #0
    8234:	f47f abad 	bne.w	7992 <_svfprintf_r+0x8ca>
    8238:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    823c:	9a26      	ldr	r2, [sp, #152]	; 0x98
    823e:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    8242:	f7ff b896 	b.w	7372 <_svfprintf_r+0x2aa>
    8246:	9b25      	ldr	r3, [sp, #148]	; 0x94
    8248:	48be      	ldr	r0, [pc, #760]	; (8544 <_svfprintf_r+0x147c>)
    824a:	f8ca 0000 	str.w	r0, [sl]
    824e:	3301      	adds	r3, #1
    8250:	3201      	adds	r2, #1
    8252:	2001      	movs	r0, #1
    8254:	2b07      	cmp	r3, #7
    8256:	9226      	str	r2, [sp, #152]	; 0x98
    8258:	9325      	str	r3, [sp, #148]	; 0x94
    825a:	f8ca 0004 	str.w	r0, [sl, #4]
    825e:	f300 8177 	bgt.w	8550 <_svfprintf_r+0x1488>
    8262:	f10a 0a08 	add.w	sl, sl, #8
    8266:	2900      	cmp	r1, #0
    8268:	f040 80af 	bne.w	83ca <_svfprintf_r+0x1302>
    826c:	990e      	ldr	r1, [sp, #56]	; 0x38
    826e:	f008 0301 	and.w	r3, r8, #1
    8272:	430b      	orrs	r3, r1
    8274:	f43f a8c0 	beq.w	73f8 <_svfprintf_r+0x330>
    8278:	9b10      	ldr	r3, [sp, #64]	; 0x40
    827a:	9912      	ldr	r1, [sp, #72]	; 0x48
    827c:	441a      	add	r2, r3
    827e:	e9ca 1300 	strd	r1, r3, [sl]
    8282:	9b25      	ldr	r3, [sp, #148]	; 0x94
    8284:	9226      	str	r2, [sp, #152]	; 0x98
    8286:	3301      	adds	r3, #1
    8288:	2b07      	cmp	r3, #7
    828a:	9325      	str	r3, [sp, #148]	; 0x94
    828c:	f300 8252 	bgt.w	8734 <_svfprintf_r+0x166c>
    8290:	f10a 0a08 	add.w	sl, sl, #8
    8294:	990e      	ldr	r1, [sp, #56]	; 0x38
    8296:	f8ca 4000 	str.w	r4, [sl]
    829a:	3301      	adds	r3, #1
    829c:	440a      	add	r2, r1
    829e:	2b07      	cmp	r3, #7
    82a0:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    82a4:	f8ca 1004 	str.w	r1, [sl, #4]
    82a8:	f77f a8a4 	ble.w	73f4 <_svfprintf_r+0x32c>
    82ac:	f7ff bbbd 	b.w	7a2a <_svfprintf_r+0x962>
    82b0:	f018 0240 	ands.w	r2, r8, #64	; 0x40
    82b4:	f000 80dd 	beq.w	8472 <_svfprintf_r+0x13aa>
    82b8:	9808      	ldr	r0, [sp, #32]
    82ba:	f850 2b04 	ldr.w	r2, [r0], #4
    82be:	9008      	str	r0, [sp, #32]
    82c0:	4619      	mov	r1, r3
    82c2:	b292      	uxth	r2, r2
    82c4:	e631      	b.n	7f2a <_svfprintf_r+0xe62>
    82c6:	ee1b 1a10 	vmov	r1, s22
    82ca:	aa24      	add	r2, sp, #144	; 0x90
    82cc:	4658      	mov	r0, fp
    82ce:	f003 fdf7 	bl	bec0 <__ssprint_r>
    82d2:	2800      	cmp	r0, #0
    82d4:	f47f ab5d 	bne.w	7992 <_svfprintf_r+0x8ca>
    82d8:	9a26      	ldr	r2, [sp, #152]	; 0x98
    82da:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    82de:	f7ff baa3 	b.w	7828 <_svfprintf_r+0x760>
    82e2:	ae22      	add	r6, sp, #136	; 0x88
    82e4:	2208      	movs	r2, #8
    82e6:	2100      	movs	r1, #0
    82e8:	4630      	mov	r0, r6
    82ea:	941d      	str	r4, [sp, #116]	; 0x74
    82ec:	f7fd f8c8 	bl	5480 <memset>
    82f0:	9b03      	ldr	r3, [sp, #12]
    82f2:	1c5a      	adds	r2, r3, #1
    82f4:	f000 80db 	beq.w	84ae <_svfprintf_r+0x13e6>
    82f8:	2500      	movs	r5, #0
    82fa:	f8cd 9008 	str.w	r9, [sp, #8]
    82fe:	f8cd 801c 	str.w	r8, [sp, #28]
    8302:	4699      	mov	r9, r3
    8304:	46a8      	mov	r8, r5
    8306:	e00c      	b.n	8322 <_svfprintf_r+0x125a>
    8308:	a937      	add	r1, sp, #220	; 0xdc
    830a:	4658      	mov	r0, fp
    830c:	f003 fcae 	bl	bc6c <_wcrtomb_r>
    8310:	1c43      	adds	r3, r0, #1
    8312:	4440      	add	r0, r8
    8314:	f000 83c8 	beq.w	8aa8 <_svfprintf_r+0x19e0>
    8318:	4548      	cmp	r0, r9
    831a:	dc08      	bgt.n	832e <_svfprintf_r+0x1266>
    831c:	f000 8418 	beq.w	8b50 <_svfprintf_r+0x1a88>
    8320:	4680      	mov	r8, r0
    8322:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    8324:	5952      	ldr	r2, [r2, r5]
    8326:	4633      	mov	r3, r6
    8328:	3504      	adds	r5, #4
    832a:	2a00      	cmp	r2, #0
    832c:	d1ec      	bne.n	8308 <_svfprintf_r+0x1240>
    832e:	f8cd 8014 	str.w	r8, [sp, #20]
    8332:	f8dd 9008 	ldr.w	r9, [sp, #8]
    8336:	f8dd 801c 	ldr.w	r8, [sp, #28]
    833a:	e0c5      	b.n	84c8 <_svfprintf_r+0x1400>
    833c:	3301      	adds	r3, #1
    833e:	4982      	ldr	r1, [pc, #520]	; (8548 <_svfprintf_r+0x1480>)
    8340:	f8ca 4004 	str.w	r4, [sl, #4]
    8344:	4422      	add	r2, r4
    8346:	2b07      	cmp	r3, #7
    8348:	f8ca 1000 	str.w	r1, [sl]
    834c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    8350:	f77f a850 	ble.w	73f4 <_svfprintf_r+0x32c>
    8354:	f7ff bb69 	b.w	7a2a <_svfprintf_r+0x962>
    8358:	ee1b 1a10 	vmov	r1, s22
    835c:	aa24      	add	r2, sp, #144	; 0x90
    835e:	4658      	mov	r0, fp
    8360:	f003 fdae 	bl	bec0 <__ssprint_r>
    8364:	2800      	cmp	r0, #0
    8366:	f47f ab14 	bne.w	7992 <_svfprintf_r+0x8ca>
    836a:	9a26      	ldr	r2, [sp, #152]	; 0x98
    836c:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    8370:	f7ff b829 	b.w	73c6 <_svfprintf_r+0x2fe>
    8374:	aa24      	add	r2, sp, #144	; 0x90
    8376:	4658      	mov	r0, fp
    8378:	9105      	str	r1, [sp, #20]
    837a:	f003 fda1 	bl	bec0 <__ssprint_r>
    837e:	2800      	cmp	r0, #0
    8380:	f47f ab07 	bne.w	7992 <_svfprintf_r+0x8ca>
    8384:	f896 c000 	ldrb.w	ip, [r6]
    8388:	9a26      	ldr	r2, [sp, #152]	; 0x98
    838a:	9905      	ldr	r1, [sp, #20]
    838c:	a827      	add	r0, sp, #156	; 0x9c
    838e:	e67d      	b.n	808c <_svfprintf_r+0xfc4>
    8390:	2b01      	cmp	r3, #1
    8392:	f8cd 8008 	str.w	r8, [sp, #8]
    8396:	f47f a9f3 	bne.w	7780 <_svfprintf_r+0x6b8>
    839a:	f7ff bb93 	b.w	7ac4 <_svfprintf_r+0x9fc>
    839e:	9b08      	ldr	r3, [sp, #32]
    83a0:	9904      	ldr	r1, [sp, #16]
    83a2:	f853 2b04 	ldr.w	r2, [r3], #4
    83a6:	464c      	mov	r4, r9
    83a8:	6011      	str	r1, [r2, #0]
    83aa:	9308      	str	r3, [sp, #32]
    83ac:	f7fe bebe 	b.w	712c <_svfprintf_r+0x64>
    83b0:	3301      	adds	r3, #1
    83b2:	4965      	ldr	r1, [pc, #404]	; (8548 <_svfprintf_r+0x1480>)
    83b4:	f8ca 4004 	str.w	r4, [sl, #4]
    83b8:	4422      	add	r2, r4
    83ba:	2b07      	cmp	r3, #7
    83bc:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    83c0:	f8ca 1000 	str.w	r1, [sl]
    83c4:	f77f ab22 	ble.w	7a0c <_svfprintf_r+0x944>
    83c8:	e47b      	b.n	7cc2 <_svfprintf_r+0xbfa>
    83ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
    83cc:	9812      	ldr	r0, [sp, #72]	; 0x48
    83ce:	441a      	add	r2, r3
    83d0:	e9ca 0300 	strd	r0, r3, [sl]
    83d4:	9b25      	ldr	r3, [sp, #148]	; 0x94
    83d6:	9226      	str	r2, [sp, #152]	; 0x98
    83d8:	3301      	adds	r3, #1
    83da:	2b07      	cmp	r3, #7
    83dc:	9325      	str	r3, [sp, #148]	; 0x94
    83de:	f300 81a9 	bgt.w	8734 <_svfprintf_r+0x166c>
    83e2:	f10a 0a08 	add.w	sl, sl, #8
    83e6:	2900      	cmp	r1, #0
    83e8:	f6bf af54 	bge.w	8294 <_svfprintf_r+0x11cc>
    83ec:	424d      	negs	r5, r1
    83ee:	3110      	adds	r1, #16
    83f0:	f280 830f 	bge.w	8a12 <_svfprintf_r+0x194a>
    83f4:	ee1b 1a10 	vmov	r1, s22
    83f8:	2610      	movs	r6, #16
    83fa:	e005      	b.n	8408 <_svfprintf_r+0x1340>
    83fc:	f10a 0a08 	add.w	sl, sl, #8
    8400:	3d10      	subs	r5, #16
    8402:	2d10      	cmp	r5, #16
    8404:	f340 8305 	ble.w	8a12 <_svfprintf_r+0x194a>
    8408:	3301      	adds	r3, #1
    840a:	484f      	ldr	r0, [pc, #316]	; (8548 <_svfprintf_r+0x1480>)
    840c:	3210      	adds	r2, #16
    840e:	2b07      	cmp	r3, #7
    8410:	e9ca 0600 	strd	r0, r6, [sl]
    8414:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    8418:	ddf0      	ble.n	83fc <_svfprintf_r+0x1334>
    841a:	aa24      	add	r2, sp, #144	; 0x90
    841c:	4658      	mov	r0, fp
    841e:	9103      	str	r1, [sp, #12]
    8420:	f003 fd4e 	bl	bec0 <__ssprint_r>
    8424:	2800      	cmp	r0, #0
    8426:	f47f aab4 	bne.w	7992 <_svfprintf_r+0x8ca>
    842a:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    842e:	9903      	ldr	r1, [sp, #12]
    8430:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    8434:	e7e4      	b.n	8400 <_svfprintf_r+0x1338>
    8436:	9b08      	ldr	r3, [sp, #32]
    8438:	f418 7100 	ands.w	r1, r8, #512	; 0x200
    843c:	bf1a      	itte	ne
    843e:	4611      	movne	r1, r2
    8440:	f853 2b04 	ldrne.w	r2, [r3], #4
    8444:	f853 2b04 	ldreq.w	r2, [r3], #4
    8448:	9308      	str	r3, [sp, #32]
    844a:	bf18      	it	ne
    844c:	b2d2      	uxtbne	r2, r2
    844e:	f7ff b945 	b.w	76dc <_svfprintf_r+0x614>
    8452:	9b02      	ldr	r3, [sp, #8]
    8454:	f413 7100 	ands.w	r1, r3, #512	; 0x200
    8458:	9b08      	ldr	r3, [sp, #32]
    845a:	bf1a      	itte	ne
    845c:	4611      	movne	r1, r2
    845e:	f853 2b04 	ldrne.w	r2, [r3], #4
    8462:	f853 2b04 	ldreq.w	r2, [r3], #4
    8466:	9308      	str	r3, [sp, #32]
    8468:	bf18      	it	ne
    846a:	b2d2      	uxtbne	r2, r2
    846c:	2301      	movs	r3, #1
    846e:	f7ff b8d0 	b.w	7612 <_svfprintf_r+0x54a>
    8472:	9b08      	ldr	r3, [sp, #32]
    8474:	f418 7100 	ands.w	r1, r8, #512	; 0x200
    8478:	bf1a      	itte	ne
    847a:	4611      	movne	r1, r2
    847c:	f853 2b04 	ldrne.w	r2, [r3], #4
    8480:	f853 2b04 	ldreq.w	r2, [r3], #4
    8484:	9308      	str	r3, [sp, #32]
    8486:	bf18      	it	ne
    8488:	b2d2      	uxtbne	r2, r2
    848a:	e54e      	b.n	7f2a <_svfprintf_r+0xe62>
    848c:	468a      	mov	sl, r1
    848e:	3301      	adds	r3, #1
    8490:	492d      	ldr	r1, [pc, #180]	; (8548 <_svfprintf_r+0x1480>)
    8492:	f8ca 5004 	str.w	r5, [sl, #4]
    8496:	442a      	add	r2, r5
    8498:	2b07      	cmp	r3, #7
    849a:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    849e:	f8ca 1000 	str.w	r1, [sl]
    84a2:	f300 8139 	bgt.w	8718 <_svfprintf_r+0x1650>
    84a6:	f10a 0a08 	add.w	sl, sl, #8
    84aa:	f7ff bb8c 	b.w	7bc6 <_svfprintf_r+0xafe>
    84ae:	2300      	movs	r3, #0
    84b0:	4619      	mov	r1, r3
    84b2:	9600      	str	r6, [sp, #0]
    84b4:	aa1d      	add	r2, sp, #116	; 0x74
    84b6:	4658      	mov	r0, fp
    84b8:	f003 fbfe 	bl	bcb8 <_wcsrtombs_r>
    84bc:	4603      	mov	r3, r0
    84be:	3301      	adds	r3, #1
    84c0:	9005      	str	r0, [sp, #20]
    84c2:	f000 82f1 	beq.w	8aa8 <_svfprintf_r+0x19e0>
    84c6:	941d      	str	r4, [sp, #116]	; 0x74
    84c8:	9b05      	ldr	r3, [sp, #20]
    84ca:	2b00      	cmp	r3, #0
    84cc:	d04e      	beq.n	856c <_svfprintf_r+0x14a4>
    84ce:	2b63      	cmp	r3, #99	; 0x63
    84d0:	f300 8118 	bgt.w	8704 <_svfprintf_r+0x163c>
    84d4:	2300      	movs	r3, #0
    84d6:	9307      	str	r3, [sp, #28]
    84d8:	ac37      	add	r4, sp, #220	; 0xdc
    84da:	2208      	movs	r2, #8
    84dc:	2100      	movs	r1, #0
    84de:	4630      	mov	r0, r6
    84e0:	f7fc ffce 	bl	5480 <memset>
    84e4:	9d05      	ldr	r5, [sp, #20]
    84e6:	9600      	str	r6, [sp, #0]
    84e8:	462b      	mov	r3, r5
    84ea:	aa1d      	add	r2, sp, #116	; 0x74
    84ec:	4621      	mov	r1, r4
    84ee:	4658      	mov	r0, fp
    84f0:	f003 fbe2 	bl	bcb8 <_wcsrtombs_r>
    84f4:	4285      	cmp	r5, r0
    84f6:	f040 837c 	bne.w	8bf2 <_svfprintf_r+0x1b2a>
    84fa:	9a05      	ldr	r2, [sp, #20]
    84fc:	2300      	movs	r3, #0
    84fe:	54a3      	strb	r3, [r4, r2]
    8500:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    8504:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    8508:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    850c:	9303      	str	r3, [sp, #12]
    850e:	9202      	str	r2, [sp, #8]
    8510:	930f      	str	r3, [sp, #60]	; 0x3c
    8512:	f7fe bfba 	b.w	748a <_svfprintf_r+0x3c2>
    8516:	212d      	movs	r1, #45	; 0x2d
    8518:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    851c:	f7fe bfa4 	b.w	7468 <_svfprintf_r+0x3a0>
    8520:	9b16      	ldr	r3, [sp, #88]	; 0x58
    8522:	9915      	ldr	r1, [sp, #84]	; 0x54
    8524:	ebab 0b03 	sub.w	fp, fp, r3
    8528:	461a      	mov	r2, r3
    852a:	4658      	mov	r0, fp
    852c:	f7fd f840 	bl	55b0 <strncpy>
    8530:	f89a 2001 	ldrb.w	r2, [sl, #1]
    8534:	4b05      	ldr	r3, [pc, #20]	; (854c <_svfprintf_r+0x1484>)
    8536:	b10a      	cbz	r2, 853c <_svfprintf_r+0x1474>
    8538:	f10a 0a01 	add.w	sl, sl, #1
    853c:	f04f 0c00 	mov.w	ip, #0
    8540:	e628      	b.n	8194 <_svfprintf_r+0x10cc>
    8542:	bf00      	nop
    8544:	2000081c 	.word	0x2000081c
    8548:	20007a40 	.word	0x20007a40
    854c:	cccccccd 	.word	0xcccccccd
    8550:	ee1b 1a10 	vmov	r1, s22
    8554:	aa24      	add	r2, sp, #144	; 0x90
    8556:	4658      	mov	r0, fp
    8558:	f003 fcb2 	bl	bec0 <__ssprint_r>
    855c:	2800      	cmp	r0, #0
    855e:	f47f aa18 	bne.w	7992 <_svfprintf_r+0x8ca>
    8562:	991b      	ldr	r1, [sp, #108]	; 0x6c
    8564:	9a26      	ldr	r2, [sp, #152]	; 0x98
    8566:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    856a:	e67c      	b.n	8266 <_svfprintf_r+0x119e>
    856c:	9b05      	ldr	r3, [sp, #20]
    856e:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    8572:	930f      	str	r3, [sp, #60]	; 0x3c
    8574:	e9cd 3302 	strd	r3, r3, [sp, #8]
    8578:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    857c:	9307      	str	r3, [sp, #28]
    857e:	f7fe bf84 	b.w	748a <_svfprintf_r+0x3c2>
    8582:	990e      	ldr	r1, [sp, #56]	; 0x38
    8584:	9805      	ldr	r0, [sp, #20]
    8586:	1865      	adds	r5, r4, r1
    8588:	1a2d      	subs	r5, r5, r0
    858a:	1acc      	subs	r4, r1, r3
    858c:	42a5      	cmp	r5, r4
    858e:	bfa8      	it	ge
    8590:	4625      	movge	r5, r4
    8592:	f7ff bb4d 	b.w	7c30 <_svfprintf_r+0xb68>
    8596:	9b08      	ldr	r3, [sp, #32]
    8598:	9904      	ldr	r1, [sp, #16]
    859a:	f853 2b04 	ldr.w	r2, [r3], #4
    859e:	9308      	str	r3, [sp, #32]
    85a0:	8011      	strh	r1, [r2, #0]
    85a2:	464c      	mov	r4, r9
    85a4:	f7fe bdc2 	b.w	712c <_svfprintf_r+0x64>
    85a8:	f913 2b04 	ldrsb.w	r2, [r3], #4
    85ac:	9308      	str	r3, [sp, #32]
    85ae:	17d1      	asrs	r1, r2, #31
    85b0:	460b      	mov	r3, r1
    85b2:	f7fe bfdb 	b.w	756c <_svfprintf_r+0x4a4>
    85b6:	9a03      	ldr	r2, [sp, #12]
    85b8:	2102      	movs	r1, #2
    85ba:	ab22      	add	r3, sp, #136	; 0x88
    85bc:	9301      	str	r3, [sp, #4]
    85be:	ab1d      	add	r3, sp, #116	; 0x74
    85c0:	9300      	str	r3, [sp, #0]
    85c2:	4658      	mov	r0, fp
    85c4:	ab1b      	add	r3, sp, #108	; 0x6c
    85c6:	eeb0 0b4a 	vmov.f64	d0, d10
    85ca:	9202      	str	r2, [sp, #8]
    85cc:	f002 fa84 	bl	aad8 <_dtoa_r>
    85d0:	2d47      	cmp	r5, #71	; 0x47
    85d2:	9a02      	ldr	r2, [sp, #8]
    85d4:	4604      	mov	r4, r0
    85d6:	f000 8161 	beq.w	889c <_svfprintf_r+0x17d4>
    85da:	2d46      	cmp	r5, #70	; 0x46
    85dc:	4410      	add	r0, r2
    85de:	d105      	bne.n	85ec <_svfprintf_r+0x1524>
    85e0:	7823      	ldrb	r3, [r4, #0]
    85e2:	2b30      	cmp	r3, #48	; 0x30
    85e4:	f000 826f 	beq.w	8ac6 <_svfprintf_r+0x19fe>
    85e8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    85ea:	4410      	add	r0, r2
    85ec:	eeb5 ab40 	vcmp.f64	d10, #0.0
    85f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    85f4:	f040 8146 	bne.w	8884 <_svfprintf_r+0x17bc>
    85f8:	4603      	mov	r3, r0
    85fa:	1b1b      	subs	r3, r3, r4
    85fc:	930e      	str	r3, [sp, #56]	; 0x38
    85fe:	2d47      	cmp	r5, #71	; 0x47
    8600:	f000 8110 	beq.w	8824 <_svfprintf_r+0x175c>
    8604:	2d46      	cmp	r5, #70	; 0x46
    8606:	f000 81b5 	beq.w	8974 <_svfprintf_r+0x18ac>
    860a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    860c:	930c      	str	r3, [sp, #48]	; 0x30
    860e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8610:	2d41      	cmp	r5, #65	; 0x41
    8612:	f103 33ff 	add.w	r3, r3, #4294967295
    8616:	931b      	str	r3, [sp, #108]	; 0x6c
    8618:	f000 81e5 	beq.w	89e6 <_svfprintf_r+0x191e>
    861c:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
    8620:	2100      	movs	r1, #0
    8622:	2b00      	cmp	r3, #0
    8624:	bfb8      	it	lt
    8626:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
    8628:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
    862c:	bfba      	itte	lt
    862e:	f1c3 0301 	rsblt	r3, r3, #1
    8632:	222d      	movlt	r2, #45	; 0x2d
    8634:	222b      	movge	r2, #43	; 0x2b
    8636:	2b09      	cmp	r3, #9
    8638:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
    863c:	f340 81da 	ble.w	89f4 <_svfprintf_r+0x192c>
    8640:	f10d 058f 	add.w	r5, sp, #143	; 0x8f
    8644:	f8df c41c 	ldr.w	ip, [pc, #1052]	; 8a64 <_svfprintf_r+0x199c>
    8648:	462a      	mov	r2, r5
    864a:	4610      	mov	r0, r2
    864c:	fb8c 2103 	smull	r2, r1, ip, r3
    8650:	17da      	asrs	r2, r3, #31
    8652:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
    8656:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    865a:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
    865e:	3130      	adds	r1, #48	; 0x30
    8660:	f800 1c01 	strb.w	r1, [r0, #-1]
    8664:	4619      	mov	r1, r3
    8666:	2963      	cmp	r1, #99	; 0x63
    8668:	4613      	mov	r3, r2
    866a:	f100 32ff 	add.w	r2, r0, #4294967295
    866e:	dcec      	bgt.n	864a <_svfprintf_r+0x1582>
    8670:	3330      	adds	r3, #48	; 0x30
    8672:	b2d9      	uxtb	r1, r3
    8674:	1e83      	subs	r3, r0, #2
    8676:	429d      	cmp	r5, r3
    8678:	f802 1c01 	strb.w	r1, [r2, #-1]
    867c:	f240 828b 	bls.w	8b96 <_svfprintf_r+0x1ace>
    8680:	4613      	mov	r3, r2
    8682:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    8686:	e001      	b.n	868c <_svfprintf_r+0x15c4>
    8688:	f813 1b01 	ldrb.w	r1, [r3], #1
    868c:	f802 1b01 	strb.w	r1, [r2], #1
    8690:	429d      	cmp	r5, r3
    8692:	d1f9      	bne.n	8688 <_svfprintf_r+0x15c0>
    8694:	f10d 0391 	add.w	r3, sp, #145	; 0x91
    8698:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    869c:	1a1b      	subs	r3, r3, r0
    869e:	4413      	add	r3, r2
    86a0:	aa1e      	add	r2, sp, #120	; 0x78
    86a2:	1a9b      	subs	r3, r3, r2
    86a4:	9314      	str	r3, [sp, #80]	; 0x50
    86a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    86a8:	9a14      	ldr	r2, [sp, #80]	; 0x50
    86aa:	2b01      	cmp	r3, #1
    86ac:	441a      	add	r2, r3
    86ae:	9205      	str	r2, [sp, #20]
    86b0:	f340 8203 	ble.w	8aba <_svfprintf_r+0x19f2>
    86b4:	9b05      	ldr	r3, [sp, #20]
    86b6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    86b8:	4413      	add	r3, r2
    86ba:	9305      	str	r3, [sp, #20]
    86bc:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
    86c0:	9a05      	ldr	r2, [sp, #20]
    86c2:	f443 7880 	orr.w	r8, r3, #256	; 0x100
    86c6:	2300      	movs	r3, #0
    86c8:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    86cc:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    86d0:	930f      	str	r3, [sp, #60]	; 0x3c
    86d2:	9202      	str	r2, [sp, #8]
    86d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    86d6:	2b00      	cmp	r3, #0
    86d8:	f040 80b1 	bne.w	883e <_svfprintf_r+0x1776>
    86dc:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    86e0:	9303      	str	r3, [sp, #12]
    86e2:	f7fe bed2 	b.w	748a <_svfprintf_r+0x3c2>
    86e6:	4620      	mov	r0, r4
    86e8:	f7fd f9aa 	bl	5a40 <strlen>
    86ec:	4602      	mov	r2, r0
    86ee:	9005      	str	r0, [sp, #20]
    86f0:	f7fe bf20 	b.w	7534 <_svfprintf_r+0x46c>
    86f4:	ee1b 1a10 	vmov	r1, s22
    86f8:	aa24      	add	r2, sp, #144	; 0x90
    86fa:	4658      	mov	r0, fp
    86fc:	f003 fbe0 	bl	bec0 <__ssprint_r>
    8700:	f7fe bded 	b.w	72de <_svfprintf_r+0x216>
    8704:	1c59      	adds	r1, r3, #1
    8706:	4658      	mov	r0, fp
    8708:	f7fa ffa6 	bl	3658 <_malloc_r>
    870c:	4604      	mov	r4, r0
    870e:	2800      	cmp	r0, #0
    8710:	f000 81ca 	beq.w	8aa8 <_svfprintf_r+0x19e0>
    8714:	9007      	str	r0, [sp, #28]
    8716:	e6e0      	b.n	84da <_svfprintf_r+0x1412>
    8718:	ee1b 1a10 	vmov	r1, s22
    871c:	aa24      	add	r2, sp, #144	; 0x90
    871e:	4658      	mov	r0, fp
    8720:	f003 fbce 	bl	bec0 <__ssprint_r>
    8724:	2800      	cmp	r0, #0
    8726:	f47f a934 	bne.w	7992 <_svfprintf_r+0x8ca>
    872a:	9a26      	ldr	r2, [sp, #152]	; 0x98
    872c:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    8730:	f7ff ba49 	b.w	7bc6 <_svfprintf_r+0xafe>
    8734:	ee1b 1a10 	vmov	r1, s22
    8738:	aa24      	add	r2, sp, #144	; 0x90
    873a:	4658      	mov	r0, fp
    873c:	f003 fbc0 	bl	bec0 <__ssprint_r>
    8740:	2800      	cmp	r0, #0
    8742:	f47f a926 	bne.w	7992 <_svfprintf_r+0x8ca>
    8746:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    874a:	991b      	ldr	r1, [sp, #108]	; 0x6c
    874c:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    8750:	e649      	b.n	83e6 <_svfprintf_r+0x131e>
    8752:	2306      	movs	r3, #6
    8754:	9303      	str	r3, [sp, #12]
    8756:	f7ff bb83 	b.w	7e60 <_svfprintf_r+0xd98>
    875a:	9b03      	ldr	r3, [sp, #12]
    875c:	2102      	movs	r1, #2
    875e:	1c5a      	adds	r2, r3, #1
    8760:	e72b      	b.n	85ba <_svfprintf_r+0x14f2>
    8762:	9a03      	ldr	r2, [sp, #12]
    8764:	2103      	movs	r1, #3
    8766:	e728      	b.n	85ba <_svfprintf_r+0x14f2>
    8768:	a81b      	add	r0, sp, #108	; 0x6c
    876a:	eeb0 0b4a 	vmov.f64	d0, d10
    876e:	f002 f887 	bl	a880 <frexp>
    8772:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
    8776:	ee20 0b07 	vmul.f64	d0, d0, d7
    877a:	eeb5 0b40 	vcmp.f64	d0, #0.0
    877e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8782:	d101      	bne.n	8788 <_svfprintf_r+0x16c0>
    8784:	2301      	movs	r3, #1
    8786:	931b      	str	r3, [sp, #108]	; 0x6c
    8788:	48b3      	ldr	r0, [pc, #716]	; (8a58 <_svfprintf_r+0x1990>)
    878a:	9b03      	ldr	r3, [sp, #12]
    878c:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
    8790:	3b01      	subs	r3, #1
    8792:	4622      	mov	r2, r4
    8794:	e004      	b.n	87a0 <_svfprintf_r+0x16d8>
    8796:	eeb5 0b40 	vcmp.f64	d0, #0.0
    879a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    879e:	d013      	beq.n	87c8 <_svfprintf_r+0x1700>
    87a0:	ee20 0b05 	vmul.f64	d0, d0, d5
    87a4:	eefd 7bc0 	vcvt.s32.f64	s15, d0
    87a8:	f1b3 3fff 	cmp.w	r3, #4294967295
    87ac:	ee17 1a90 	vmov	r1, s15
    87b0:	5c41      	ldrb	r1, [r0, r1]
    87b2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    87b6:	4694      	mov	ip, r2
    87b8:	ee30 0b46 	vsub.f64	d0, d0, d6
    87bc:	f802 1b01 	strb.w	r1, [r2], #1
    87c0:	4619      	mov	r1, r3
    87c2:	f103 33ff 	add.w	r3, r3, #4294967295
    87c6:	d1e6      	bne.n	8796 <_svfprintf_r+0x16ce>
    87c8:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    87cc:	eeb4 0bc6 	vcmpe.f64	d0, d6
    87d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    87d4:	f300 8148 	bgt.w	8a68 <_svfprintf_r+0x19a0>
    87d8:	eeb4 0b46 	vcmp.f64	d0, d6
    87dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    87e0:	d104      	bne.n	87ec <_svfprintf_r+0x1724>
    87e2:	ee17 3a90 	vmov	r3, s15
    87e6:	07db      	lsls	r3, r3, #31
    87e8:	f100 813e 	bmi.w	8a68 <_svfprintf_r+0x19a0>
    87ec:	2900      	cmp	r1, #0
    87ee:	db06      	blt.n	87fe <_svfprintf_r+0x1736>
    87f0:	1c4b      	adds	r3, r1, #1
    87f2:	4413      	add	r3, r2
    87f4:	2130      	movs	r1, #48	; 0x30
    87f6:	f802 1b01 	strb.w	r1, [r2], #1
    87fa:	4293      	cmp	r3, r2
    87fc:	d1fb      	bne.n	87f6 <_svfprintf_r+0x172e>
    87fe:	1b13      	subs	r3, r2, r4
    8800:	930e      	str	r3, [sp, #56]	; 0x38
    8802:	e6fc      	b.n	85fe <_svfprintf_r+0x1536>
    8804:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    8806:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8808:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    880c:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    8810:	9613      	str	r6, [sp, #76]	; 0x4c
    8812:	18e3      	adds	r3, r4, r3
    8814:	429d      	cmp	r5, r3
    8816:	4629      	mov	r1, r5
    8818:	bf28      	it	cs
    881a:	4619      	movcs	r1, r3
    881c:	4682      	mov	sl, r0
    881e:	9105      	str	r1, [sp, #20]
    8820:	f7ff b9d8 	b.w	7bd4 <_svfprintf_r+0xb0c>
    8824:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    8826:	930c      	str	r3, [sp, #48]	; 0x30
    8828:	1cda      	adds	r2, r3, #3
    882a:	db02      	blt.n	8832 <_svfprintf_r+0x176a>
    882c:	9a03      	ldr	r2, [sp, #12]
    882e:	4293      	cmp	r3, r2
    8830:	dd0c      	ble.n	884c <_svfprintf_r+0x1784>
    8832:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8834:	3b02      	subs	r3, #2
    8836:	930b      	str	r3, [sp, #44]	; 0x2c
    8838:	f023 0520 	bic.w	r5, r3, #32
    883c:	e6e7      	b.n	860e <_svfprintf_r+0x1546>
    883e:	212d      	movs	r1, #45	; 0x2d
    8840:	2300      	movs	r3, #0
    8842:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    8846:	9303      	str	r3, [sp, #12]
    8848:	f7fe be22 	b.w	7490 <_svfprintf_r+0x3c8>
    884c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    884e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    8850:	4293      	cmp	r3, r2
    8852:	f2c0 80bd 	blt.w	89d0 <_svfprintf_r+0x1908>
    8856:	07f0      	lsls	r0, r6, #31
    8858:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    885a:	f140 8132 	bpl.w	8ac2 <_svfprintf_r+0x19fa>
    885e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    8860:	4413      	add	r3, r2
    8862:	9305      	str	r3, [sp, #20]
    8864:	0571      	lsls	r1, r6, #21
    8866:	d503      	bpl.n	8870 <_svfprintf_r+0x17a8>
    8868:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    886a:	2b00      	cmp	r3, #0
    886c:	f300 8135 	bgt.w	8ada <_svfprintf_r+0x1a12>
    8870:	9b05      	ldr	r3, [sp, #20]
    8872:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    8876:	9302      	str	r3, [sp, #8]
    8878:	2367      	movs	r3, #103	; 0x67
    887a:	930b      	str	r3, [sp, #44]	; 0x2c
    887c:	2300      	movs	r3, #0
    887e:	930f      	str	r3, [sp, #60]	; 0x3c
    8880:	930d      	str	r3, [sp, #52]	; 0x34
    8882:	e727      	b.n	86d4 <_svfprintf_r+0x160c>
    8884:	9b22      	ldr	r3, [sp, #136]	; 0x88
    8886:	4283      	cmp	r3, r0
    8888:	f4bf aeb7 	bcs.w	85fa <_svfprintf_r+0x1532>
    888c:	2130      	movs	r1, #48	; 0x30
    888e:	1c5a      	adds	r2, r3, #1
    8890:	9222      	str	r2, [sp, #136]	; 0x88
    8892:	7019      	strb	r1, [r3, #0]
    8894:	9b22      	ldr	r3, [sp, #136]	; 0x88
    8896:	4298      	cmp	r0, r3
    8898:	d8f9      	bhi.n	888e <_svfprintf_r+0x17c6>
    889a:	e6ae      	b.n	85fa <_svfprintf_r+0x1532>
    889c:	07f3      	lsls	r3, r6, #31
    889e:	f100 80a7 	bmi.w	89f0 <_svfprintf_r+0x1928>
    88a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
    88a4:	e6a9      	b.n	85fa <_svfprintf_r+0x1532>
    88a6:	aa24      	add	r2, sp, #144	; 0x90
    88a8:	4658      	mov	r0, fp
    88aa:	9105      	str	r1, [sp, #20]
    88ac:	f003 fb08 	bl	bec0 <__ssprint_r>
    88b0:	2800      	cmp	r0, #0
    88b2:	f47f a86e 	bne.w	7992 <_svfprintf_r+0x8ca>
    88b6:	f896 c000 	ldrb.w	ip, [r6]
    88ba:	9a26      	ldr	r2, [sp, #152]	; 0x98
    88bc:	9905      	ldr	r1, [sp, #20]
    88be:	a827      	add	r0, sp, #156	; 0x9c
    88c0:	4465      	add	r5, ip
    88c2:	f7ff bbec 	b.w	809e <_svfprintf_r+0xfd6>
    88c6:	ee1b 1a10 	vmov	r1, s22
    88ca:	aa24      	add	r2, sp, #144	; 0x90
    88cc:	4658      	mov	r0, fp
    88ce:	f003 faf7 	bl	bec0 <__ssprint_r>
    88d2:	2800      	cmp	r0, #0
    88d4:	f47f a85d 	bne.w	7992 <_svfprintf_r+0x8ca>
    88d8:	9a26      	ldr	r2, [sp, #152]	; 0x98
    88da:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    88de:	f7ff b96b 	b.w	7bb8 <_svfprintf_r+0xaf0>
    88e2:	2378      	movs	r3, #120	; 0x78
    88e4:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    88e8:	2330      	movs	r3, #48	; 0x30
    88ea:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    88ee:	9b03      	ldr	r3, [sp, #12]
    88f0:	2b63      	cmp	r3, #99	; 0x63
    88f2:	f048 0602 	orr.w	r6, r8, #2
    88f6:	f300 80a6 	bgt.w	8a46 <_svfprintf_r+0x197e>
    88fa:	2300      	movs	r3, #0
    88fc:	9307      	str	r3, [sp, #28]
    88fe:	ac37      	add	r4, sp, #220	; 0xdc
    8900:	ee18 3a90 	vmov	r3, s17
    8904:	2b00      	cmp	r3, #0
    8906:	f448 7881 	orr.w	r8, r8, #258	; 0x102
    890a:	db2b      	blt.n	8964 <_svfprintf_r+0x189c>
    890c:	eeb0 ab48 	vmov.f64	d10, d8
    8910:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8912:	f023 0520 	bic.w	r5, r3, #32
    8916:	2300      	movs	r3, #0
    8918:	9309      	str	r3, [sp, #36]	; 0x24
    891a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    891c:	2b61      	cmp	r3, #97	; 0x61
    891e:	f47f aaad 	bne.w	7e7c <_svfprintf_r+0xdb4>
    8922:	eeb0 0b4a 	vmov.f64	d0, d10
    8926:	a81b      	add	r0, sp, #108	; 0x6c
    8928:	f001 ffaa 	bl	a880 <frexp>
    892c:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
    8930:	ee20 0b07 	vmul.f64	d0, d0, d7
    8934:	eeb5 0b40 	vcmp.f64	d0, #0.0
    8938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    893c:	d101      	bne.n	8942 <_svfprintf_r+0x187a>
    893e:	2301      	movs	r3, #1
    8940:	931b      	str	r3, [sp, #108]	; 0x6c
    8942:	4846      	ldr	r0, [pc, #280]	; (8a5c <_svfprintf_r+0x1994>)
    8944:	e721      	b.n	878a <_svfprintf_r+0x16c2>
    8946:	ee1b 1a10 	vmov	r1, s22
    894a:	aa24      	add	r2, sp, #144	; 0x90
    894c:	4658      	mov	r0, fp
    894e:	f003 fab7 	bl	bec0 <__ssprint_r>
    8952:	2800      	cmp	r0, #0
    8954:	f47f a81d 	bne.w	7992 <_svfprintf_r+0x8ca>
    8958:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    895a:	9a26      	ldr	r2, [sp, #152]	; 0x98
    895c:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    8960:	f7ff b94e 	b.w	7c00 <_svfprintf_r+0xb38>
    8964:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8966:	f023 0520 	bic.w	r5, r3, #32
    896a:	232d      	movs	r3, #45	; 0x2d
    896c:	9309      	str	r3, [sp, #36]	; 0x24
    896e:	eeb1 ab48 	vneg.f64	d10, d8
    8972:	e7d2      	b.n	891a <_svfprintf_r+0x1852>
    8974:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    8976:	920c      	str	r2, [sp, #48]	; 0x30
    8978:	2a00      	cmp	r2, #0
    897a:	f006 0301 	and.w	r3, r6, #1
    897e:	f340 810d 	ble.w	8b9c <_svfprintf_r+0x1ad4>
    8982:	9903      	ldr	r1, [sp, #12]
    8984:	430b      	orrs	r3, r1
    8986:	f040 80cf 	bne.w	8b28 <_svfprintf_r+0x1a60>
    898a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    898c:	9305      	str	r3, [sp, #20]
    898e:	2366      	movs	r3, #102	; 0x66
    8990:	930b      	str	r3, [sp, #44]	; 0x2c
    8992:	0572      	lsls	r2, r6, #21
    8994:	f100 80a3 	bmi.w	8ade <_svfprintf_r+0x1a16>
    8998:	9b05      	ldr	r3, [sp, #20]
    899a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    899e:	9302      	str	r3, [sp, #8]
    89a0:	e76c      	b.n	887c <_svfprintf_r+0x17b4>
    89a2:	ee1b 1a10 	vmov	r1, s22
    89a6:	aa24      	add	r2, sp, #144	; 0x90
    89a8:	4658      	mov	r0, fp
    89aa:	f003 fa89 	bl	bec0 <__ssprint_r>
    89ae:	2800      	cmp	r0, #0
    89b0:	f47e afef 	bne.w	7992 <_svfprintf_r+0x8ca>
    89b4:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
    89b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    89b8:	9a26      	ldr	r2, [sp, #152]	; 0x98
    89ba:	1b1c      	subs	r4, r3, r4
    89bc:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    89c0:	f7ff b936 	b.w	7c30 <_svfprintf_r+0xb68>
    89c4:	2358      	movs	r3, #88	; 0x58
    89c6:	e78d      	b.n	88e4 <_svfprintf_r+0x181c>
    89c8:	2200      	movs	r2, #0
    89ca:	9203      	str	r2, [sp, #12]
    89cc:	f7fe bbda 	b.w	7184 <_svfprintf_r+0xbc>
    89d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    89d2:	9a10      	ldr	r2, [sp, #64]	; 0x40
    89d4:	189a      	adds	r2, r3, r2
    89d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    89d8:	9205      	str	r2, [sp, #20]
    89da:	2b00      	cmp	r3, #0
    89dc:	f340 80ab 	ble.w	8b36 <_svfprintf_r+0x1a6e>
    89e0:	2367      	movs	r3, #103	; 0x67
    89e2:	930b      	str	r3, [sp, #44]	; 0x2c
    89e4:	e7d5      	b.n	8992 <_svfprintf_r+0x18ca>
    89e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    89e8:	320f      	adds	r2, #15
    89ea:	b2d2      	uxtb	r2, r2
    89ec:	2101      	movs	r1, #1
    89ee:	e618      	b.n	8622 <_svfprintf_r+0x155a>
    89f0:	18a0      	adds	r0, r4, r2
    89f2:	e5fb      	b.n	85ec <_svfprintf_r+0x1524>
    89f4:	2900      	cmp	r1, #0
    89f6:	f040 80a8 	bne.w	8b4a <_svfprintf_r+0x1a82>
    89fa:	2230      	movs	r2, #48	; 0x30
    89fc:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
    8a00:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
    8a04:	3330      	adds	r3, #48	; 0x30
    8a06:	f802 3b01 	strb.w	r3, [r2], #1
    8a0a:	ab1e      	add	r3, sp, #120	; 0x78
    8a0c:	1ad3      	subs	r3, r2, r3
    8a0e:	9314      	str	r3, [sp, #80]	; 0x50
    8a10:	e649      	b.n	86a6 <_svfprintf_r+0x15de>
    8a12:	3301      	adds	r3, #1
    8a14:	4912      	ldr	r1, [pc, #72]	; (8a60 <_svfprintf_r+0x1998>)
    8a16:	f8ca 5004 	str.w	r5, [sl, #4]
    8a1a:	442a      	add	r2, r5
    8a1c:	2b07      	cmp	r3, #7
    8a1e:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    8a22:	f8ca 1000 	str.w	r1, [sl]
    8a26:	f77f ac33 	ble.w	8290 <_svfprintf_r+0x11c8>
    8a2a:	ee1b 1a10 	vmov	r1, s22
    8a2e:	aa24      	add	r2, sp, #144	; 0x90
    8a30:	4658      	mov	r0, fp
    8a32:	f003 fa45 	bl	bec0 <__ssprint_r>
    8a36:	2800      	cmp	r0, #0
    8a38:	f47e afab 	bne.w	7992 <_svfprintf_r+0x8ca>
    8a3c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    8a40:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    8a44:	e426      	b.n	8294 <_svfprintf_r+0x11cc>
    8a46:	1c59      	adds	r1, r3, #1
    8a48:	4658      	mov	r0, fp
    8a4a:	f7fa fe05 	bl	3658 <_malloc_r>
    8a4e:	4604      	mov	r4, r0
    8a50:	b350      	cbz	r0, 8aa8 <_svfprintf_r+0x19e0>
    8a52:	9007      	str	r0, [sp, #28]
    8a54:	e754      	b.n	8900 <_svfprintf_r+0x1838>
    8a56:	bf00      	nop
    8a58:	20000800 	.word	0x20000800
    8a5c:	200007ec 	.word	0x200007ec
    8a60:	20007a40 	.word	0x20007a40
    8a64:	66666667 	.word	0x66666667
    8a68:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
    8a6c:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    8a70:	f890 c00f 	ldrb.w	ip, [r0, #15]
    8a74:	4561      	cmp	r1, ip
    8a76:	4613      	mov	r3, r2
    8a78:	d10a      	bne.n	8a90 <_svfprintf_r+0x19c8>
    8a7a:	f04f 0e30 	mov.w	lr, #48	; 0x30
    8a7e:	f803 ec01 	strb.w	lr, [r3, #-1]
    8a82:	9b22      	ldr	r3, [sp, #136]	; 0x88
    8a84:	1e59      	subs	r1, r3, #1
    8a86:	9122      	str	r1, [sp, #136]	; 0x88
    8a88:	f813 1c01 	ldrb.w	r1, [r3, #-1]
    8a8c:	458c      	cmp	ip, r1
    8a8e:	d0f6      	beq.n	8a7e <_svfprintf_r+0x19b6>
    8a90:	2939      	cmp	r1, #57	; 0x39
    8a92:	bf16      	itet	ne
    8a94:	3101      	addne	r1, #1
    8a96:	7a81      	ldrbeq	r1, [r0, #10]
    8a98:	b2c9      	uxtbne	r1, r1
    8a9a:	f803 1c01 	strb.w	r1, [r3, #-1]
    8a9e:	e6ae      	b.n	87fe <_svfprintf_r+0x1736>
    8aa0:	2300      	movs	r3, #0
    8aa2:	4690      	mov	r8, r2
    8aa4:	9307      	str	r3, [sp, #28]
    8aa6:	e760      	b.n	896a <_svfprintf_r+0x18a2>
    8aa8:	ee1b 2a10 	vmov	r2, s22
    8aac:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    8ab0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8ab4:	8193      	strh	r3, [r2, #12]
    8ab6:	f7fe bc16 	b.w	72e6 <_svfprintf_r+0x21e>
    8aba:	07f5      	lsls	r5, r6, #31
    8abc:	f57f adfe 	bpl.w	86bc <_svfprintf_r+0x15f4>
    8ac0:	e5f8      	b.n	86b4 <_svfprintf_r+0x15ec>
    8ac2:	9305      	str	r3, [sp, #20]
    8ac4:	e6ce      	b.n	8864 <_svfprintf_r+0x179c>
    8ac6:	eeb5 ab40 	vcmp.f64	d10, #0.0
    8aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8ace:	f43f ad8b 	beq.w	85e8 <_svfprintf_r+0x1520>
    8ad2:	f1c2 0201 	rsb	r2, r2, #1
    8ad6:	921b      	str	r2, [sp, #108]	; 0x6c
    8ad8:	e587      	b.n	85ea <_svfprintf_r+0x1522>
    8ada:	2367      	movs	r3, #103	; 0x67
    8adc:	930b      	str	r3, [sp, #44]	; 0x2c
    8ade:	9913      	ldr	r1, [sp, #76]	; 0x4c
    8ae0:	780b      	ldrb	r3, [r1, #0]
    8ae2:	2bff      	cmp	r3, #255	; 0xff
    8ae4:	d079      	beq.n	8bda <_svfprintf_r+0x1b12>
    8ae6:	2500      	movs	r5, #0
    8ae8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8aea:	4628      	mov	r0, r5
    8aec:	e003      	b.n	8af6 <_svfprintf_r+0x1a2e>
    8aee:	3001      	adds	r0, #1
    8af0:	3101      	adds	r1, #1
    8af2:	2bff      	cmp	r3, #255	; 0xff
    8af4:	d008      	beq.n	8b08 <_svfprintf_r+0x1a40>
    8af6:	4293      	cmp	r3, r2
    8af8:	da06      	bge.n	8b08 <_svfprintf_r+0x1a40>
    8afa:	1ad2      	subs	r2, r2, r3
    8afc:	784b      	ldrb	r3, [r1, #1]
    8afe:	2b00      	cmp	r3, #0
    8b00:	d1f5      	bne.n	8aee <_svfprintf_r+0x1a26>
    8b02:	780b      	ldrb	r3, [r1, #0]
    8b04:	3501      	adds	r5, #1
    8b06:	e7f4      	b.n	8af2 <_svfprintf_r+0x1a2a>
    8b08:	920c      	str	r2, [sp, #48]	; 0x30
    8b0a:	9113      	str	r1, [sp, #76]	; 0x4c
    8b0c:	900d      	str	r0, [sp, #52]	; 0x34
    8b0e:	950f      	str	r5, [sp, #60]	; 0x3c
    8b10:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    8b12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8b14:	9916      	ldr	r1, [sp, #88]	; 0x58
    8b16:	4413      	add	r3, r2
    8b18:	9a05      	ldr	r2, [sp, #20]
    8b1a:	fb01 2303 	mla	r3, r1, r3, r2
    8b1e:	9305      	str	r3, [sp, #20]
    8b20:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    8b24:	9302      	str	r3, [sp, #8]
    8b26:	e5d5      	b.n	86d4 <_svfprintf_r+0x160c>
    8b28:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8b2a:	18d3      	adds	r3, r2, r3
    8b2c:	4419      	add	r1, r3
    8b2e:	2366      	movs	r3, #102	; 0x66
    8b30:	9105      	str	r1, [sp, #20]
    8b32:	930b      	str	r3, [sp, #44]	; 0x2c
    8b34:	e72d      	b.n	8992 <_svfprintf_r+0x18ca>
    8b36:	f1c3 0301 	rsb	r3, r3, #1
    8b3a:	441a      	add	r2, r3
    8b3c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    8b40:	9302      	str	r3, [sp, #8]
    8b42:	2367      	movs	r3, #103	; 0x67
    8b44:	9205      	str	r2, [sp, #20]
    8b46:	930b      	str	r3, [sp, #44]	; 0x2c
    8b48:	e698      	b.n	887c <_svfprintf_r+0x17b4>
    8b4a:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    8b4e:	e759      	b.n	8a04 <_svfprintf_r+0x193c>
    8b50:	9b03      	ldr	r3, [sp, #12]
    8b52:	f8dd 9008 	ldr.w	r9, [sp, #8]
    8b56:	f8dd 801c 	ldr.w	r8, [sp, #28]
    8b5a:	9305      	str	r3, [sp, #20]
    8b5c:	e4b4      	b.n	84c8 <_svfprintf_r+0x1400>
    8b5e:	ee18 3a90 	vmov	r3, s17
    8b62:	2b00      	cmp	r3, #0
    8b64:	bfb4      	ite	lt
    8b66:	212d      	movlt	r1, #45	; 0x2d
    8b68:	f89d 1067 	ldrbge.w	r1, [sp, #103]	; 0x67
    8b6c:	4c25      	ldr	r4, [pc, #148]	; (8c04 <_svfprintf_r+0x1b3c>)
    8b6e:	4b26      	ldr	r3, [pc, #152]	; (8c08 <_svfprintf_r+0x1b40>)
    8b70:	bfb8      	it	lt
    8b72:	f88d 1067 	strblt.w	r1, [sp, #103]	; 0x67
    8b76:	f028 0880 	bic.w	r8, r8, #128	; 0x80
    8b7a:	f7fe bc79 	b.w	7470 <_svfprintf_r+0x3a8>
    8b7e:	9b03      	ldr	r3, [sp, #12]
    8b80:	9302      	str	r3, [sp, #8]
    8b82:	9305      	str	r3, [sp, #20]
    8b84:	2373      	movs	r3, #115	; 0x73
    8b86:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    8b8a:	9003      	str	r0, [sp, #12]
    8b8c:	900f      	str	r0, [sp, #60]	; 0x3c
    8b8e:	900d      	str	r0, [sp, #52]	; 0x34
    8b90:	930b      	str	r3, [sp, #44]	; 0x2c
    8b92:	f7fe bc7a 	b.w	748a <_svfprintf_r+0x3c2>
    8b96:	2302      	movs	r3, #2
    8b98:	9314      	str	r3, [sp, #80]	; 0x50
    8b9a:	e584      	b.n	86a6 <_svfprintf_r+0x15de>
    8b9c:	9a03      	ldr	r2, [sp, #12]
    8b9e:	4313      	orrs	r3, r2
    8ba0:	d105      	bne.n	8bae <_svfprintf_r+0x1ae6>
    8ba2:	2301      	movs	r3, #1
    8ba4:	2266      	movs	r2, #102	; 0x66
    8ba6:	9302      	str	r3, [sp, #8]
    8ba8:	920b      	str	r2, [sp, #44]	; 0x2c
    8baa:	9305      	str	r3, [sp, #20]
    8bac:	e666      	b.n	887c <_svfprintf_r+0x17b4>
    8bae:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8bb0:	3301      	adds	r3, #1
    8bb2:	441a      	add	r2, r3
    8bb4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    8bb8:	9302      	str	r3, [sp, #8]
    8bba:	2366      	movs	r3, #102	; 0x66
    8bbc:	9205      	str	r2, [sp, #20]
    8bbe:	930b      	str	r3, [sp, #44]	; 0x2c
    8bc0:	e65c      	b.n	887c <_svfprintf_r+0x17b4>
    8bc2:	9a08      	ldr	r2, [sp, #32]
    8bc4:	f899 3001 	ldrb.w	r3, [r9, #1]
    8bc8:	4689      	mov	r9, r1
    8bca:	f852 1b04 	ldr.w	r1, [r2], #4
    8bce:	9208      	str	r2, [sp, #32]
    8bd0:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
    8bd4:	9103      	str	r1, [sp, #12]
    8bd6:	f7fe bad3 	b.w	7180 <_svfprintf_r+0xb8>
    8bda:	2300      	movs	r3, #0
    8bdc:	930f      	str	r3, [sp, #60]	; 0x3c
    8bde:	930d      	str	r3, [sp, #52]	; 0x34
    8be0:	e796      	b.n	8b10 <_svfprintf_r+0x1a48>
    8be2:	230c      	movs	r3, #12
    8be4:	f8cb 3000 	str.w	r3, [fp]
    8be8:	f04f 33ff 	mov.w	r3, #4294967295
    8bec:	9304      	str	r3, [sp, #16]
    8bee:	f7fe bb81 	b.w	72f4 <_svfprintf_r+0x22c>
    8bf2:	ee1b 2a10 	vmov	r2, s22
    8bf6:	8993      	ldrh	r3, [r2, #12]
    8bf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8bfc:	8193      	strh	r3, [r2, #12]
    8bfe:	f7fe bec8 	b.w	7992 <_svfprintf_r+0x8ca>
    8c02:	bf00      	nop
    8c04:	200007e4 	.word	0x200007e4
    8c08:	200007e8 	.word	0x200007e8

00008c0c <__ssvfscanf_r>:
    8c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8c10:	ed2d 8b02 	vpush	{d8}
    8c14:	f5ad 7d37 	sub.w	sp, sp, #732	; 0x2dc
    8c18:	468b      	mov	fp, r1
    8c1a:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
    8c1e:	af02      	add	r7, sp, #8
    8c20:	048c      	lsls	r4, r1, #18
    8c22:	4681      	mov	r9, r0
    8c24:	64fa      	str	r2, [r7, #76]	; 0x4c
    8c26:	633b      	str	r3, [r7, #48]	; 0x30
    8c28:	d409      	bmi.n	8c3e <__ssvfscanf_r+0x32>
    8c2a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
    8c2e:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
    8c32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    8c36:	f8ab 100c 	strh.w	r1, [fp, #12]
    8c3a:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
    8c3e:	2300      	movs	r3, #0
    8c40:	461c      	mov	r4, r3
    8c42:	2208      	movs	r2, #8
    8c44:	4619      	mov	r1, r3
    8c46:	f107 0058 	add.w	r0, r7, #88	; 0x58
    8c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    8c4c:	46a2      	mov	sl, r4
    8c4e:	f7fc fc17 	bl	5480 <memset>
    8c52:	643c      	str	r4, [r7, #64]	; 0x40
    8c54:	627c      	str	r4, [r7, #36]	; 0x24
    8c56:	63bc      	str	r4, [r7, #56]	; 0x38
    8c58:	647c      	str	r4, [r7, #68]	; 0x44
    8c5a:	4b83      	ldr	r3, [pc, #524]	; (8e68 <__ssvfscanf_r+0x25c>)
    8c5c:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
    8c60:	f7fc fcd8 	bl	5614 <__locale_mb_cur_max>
    8c64:	f107 0258 	add.w	r2, r7, #88	; 0x58
    8c68:	4603      	mov	r3, r0
    8c6a:	9200      	str	r2, [sp, #0]
    8c6c:	f107 0154 	add.w	r1, r7, #84	; 0x54
    8c70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    8c72:	4648      	mov	r0, r9
    8c74:	47a0      	blx	r4
    8c76:	1e05      	subs	r5, r0, #0
    8c78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8c7a:	db33      	blt.n	8ce4 <__ssvfscanf_r+0xd8>
    8c7c:	442b      	add	r3, r5
    8c7e:	64fb      	str	r3, [r7, #76]	; 0x4c
    8c80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    8c82:	462e      	mov	r6, r5
    8c84:	2b00      	cmp	r3, #0
    8c86:	f000 80b6 	beq.w	8df6 <__ssvfscanf_r+0x1ea>
    8c8a:	2d01      	cmp	r5, #1
    8c8c:	d038      	beq.n	8d00 <__ssvfscanf_r+0xf4>
    8c8e:	2b25      	cmp	r3, #37	; 0x25
    8c90:	d040      	beq.n	8d14 <__ssvfscanf_r+0x108>
    8c92:	2d00      	cmp	r5, #0
    8c94:	d0e1      	beq.n	8c5a <__ssvfscanf_r+0x4e>
    8c96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8c98:	1b9e      	subs	r6, r3, r6
    8c9a:	f8db 3004 	ldr.w	r3, [fp, #4]
    8c9e:	1e74      	subs	r4, r6, #1
    8ca0:	2b00      	cmp	r3, #0
    8ca2:	f340 8098 	ble.w	8dd6 <__ssvfscanf_r+0x1ca>
    8ca6:	f8db 1000 	ldr.w	r1, [fp]
    8caa:	f894 c001 	ldrb.w	ip, [r4, #1]
    8cae:	f891 e000 	ldrb.w	lr, [r1]
    8cb2:	1ca3      	adds	r3, r4, #2
    8cb4:	eb0a 0003 	add.w	r0, sl, r3
    8cb8:	45e6      	cmp	lr, ip
    8cba:	f101 0101 	add.w	r1, r1, #1
    8cbe:	eba3 0206 	sub.w	r2, r3, r6
    8cc2:	f104 0401 	add.w	r4, r4, #1
    8cc6:	eba0 0006 	sub.w	r0, r0, r6
    8cca:	f040 8094 	bne.w	8df6 <__ssvfscanf_r+0x1ea>
    8cce:	f8db 3004 	ldr.w	r3, [fp, #4]
    8cd2:	f8cb 1000 	str.w	r1, [fp]
    8cd6:	3b01      	subs	r3, #1
    8cd8:	42aa      	cmp	r2, r5
    8cda:	f8cb 3004 	str.w	r3, [fp, #4]
    8cde:	dbdf      	blt.n	8ca0 <__ssvfscanf_r+0x94>
    8ce0:	4682      	mov	sl, r0
    8ce2:	e7ba      	b.n	8c5a <__ssvfscanf_r+0x4e>
    8ce4:	3301      	adds	r3, #1
    8ce6:	64fb      	str	r3, [r7, #76]	; 0x4c
    8ce8:	2208      	movs	r2, #8
    8cea:	f64f 73fd 	movw	r3, #65533	; 0xfffd
    8cee:	2100      	movs	r1, #0
    8cf0:	f107 0058 	add.w	r0, r7, #88	; 0x58
    8cf4:	657b      	str	r3, [r7, #84]	; 0x54
    8cf6:	f7fc fbc3 	bl	5480 <memset>
    8cfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    8cfc:	2b00      	cmp	r3, #0
    8cfe:	d07a      	beq.n	8df6 <__ssvfscanf_r+0x1ea>
    8d00:	4e5a      	ldr	r6, [pc, #360]	; (8e6c <__ssvfscanf_r+0x260>)
    8d02:	5cf2      	ldrb	r2, [r6, r3]
    8d04:	0710      	lsls	r0, r2, #28
    8d06:	f100 851c 	bmi.w	9742 <__ssvfscanf_r+0xb36>
    8d0a:	2b25      	cmp	r3, #37	; 0x25
    8d0c:	f040 8086 	bne.w	8e1c <__ssvfscanf_r+0x210>
    8d10:	2501      	movs	r5, #1
    8d12:	462e      	mov	r6, r5
    8d14:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    8d16:	2400      	movs	r4, #0
    8d18:	7802      	ldrb	r2, [r0, #0]
    8d1a:	46a0      	mov	r8, r4
    8d1c:	f1a2 0325 	sub.w	r3, r2, #37	; 0x25
    8d20:	1c41      	adds	r1, r0, #1
    8d22:	2b55      	cmp	r3, #85	; 0x55
    8d24:	d867      	bhi.n	8df6 <__ssvfscanf_r+0x1ea>
    8d26:	e8df f013 	tbh	[pc, r3, lsl #1]
    8d2a:	070a      	.short	0x070a
    8d2c:	00660066 	.word	0x00660066
    8d30:	00660066 	.word	0x00660066
    8d34:	00660701 	.word	0x00660701
    8d38:	00660066 	.word	0x00660066
    8d3c:	00660066 	.word	0x00660066
    8d40:	060c060c 	.word	0x060c060c
    8d44:	060c060c 	.word	0x060c060c
    8d48:	060c060c 	.word	0x060c060c
    8d4c:	060c060c 	.word	0x060c060c
    8d50:	060c060c 	.word	0x060c060c
    8d54:	00660066 	.word	0x00660066
    8d58:	00660066 	.word	0x00660066
    8d5c:	00660066 	.word	0x00660066
    8d60:	06180066 	.word	0x06180066
    8d64:	048e0066 	.word	0x048e0066
    8d68:	061804c9 	.word	0x061804c9
    8d6c:	06180618 	.word	0x06180618
    8d70:	00660066 	.word	0x00660066
    8d74:	00660066 	.word	0x00660066
    8d78:	00660082 	.word	0x00660082
    8d7c:	04bf0066 	.word	0x04bf0066
    8d80:	00660066 	.word	0x00660066
    8d84:	00890066 	.word	0x00890066
    8d88:	00660066 	.word	0x00660066
    8d8c:	00660066 	.word	0x00660066
    8d90:	0066066b 	.word	0x0066066b
    8d94:	06dd0066 	.word	0x06dd0066
    8d98:	00660066 	.word	0x00660066
    8d9c:	00660066 	.word	0x00660066
    8da0:	06180066 	.word	0x06180066
    8da4:	04900066 	.word	0x04900066
    8da8:	061804cb 	.word	0x061804cb
    8dac:	06180618 	.word	0x06180618
    8db0:	06d206be 	.word	0x06d206be
    8db4:	00660082 	.word	0x00660082
    8db8:	06f306e7 	.word	0x06f306e7
    8dbc:	04c106ac 	.word	0x04c106ac
    8dc0:	006606da 	.word	0x006606da
    8dc4:	008b0066 	.word	0x008b0066
    8dc8:	06ca007d 	.word	0x06ca007d
    8dcc:	00660066 	.word	0x00660066
    8dd0:	0066066b 	.word	0x0066066b
    8dd4:	007d      	.short	0x007d
    8dd6:	4659      	mov	r1, fp
    8dd8:	4648      	mov	r0, r9
    8dda:	f003 f931 	bl	c040 <__ssrefill_r>
    8dde:	2800      	cmp	r0, #0
    8de0:	f43f af61 	beq.w	8ca6 <__ssvfscanf_r+0x9a>
    8de4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8de6:	2b00      	cmp	r3, #0
    8de8:	f001 8052 	beq.w	9e90 <__ssvfscanf_r+0x1284>
    8dec:	f8bb 300c 	ldrh.w	r3, [fp, #12]
    8df0:	065a      	lsls	r2, r3, #25
    8df2:	f101 804d 	bmi.w	9e90 <__ssvfscanf_r+0x1284>
    8df6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    8df8:	b143      	cbz	r3, 8e0c <__ssvfscanf_r+0x200>
    8dfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    8dfc:	f8d3 8000 	ldr.w	r8, [r3]
    8e00:	f1b8 0f00 	cmp.w	r8, #0
    8e04:	d002      	beq.n	8e0c <__ssvfscanf_r+0x200>
    8e06:	4640      	mov	r0, r8
    8e08:	f7fa fc1e 	bl	3648 <free>
    8e0c:	6c78      	ldr	r0, [r7, #68]	; 0x44
    8e0e:	f507 7735 	add.w	r7, r7, #724	; 0x2d4
    8e12:	46bd      	mov	sp, r7
    8e14:	ecbd 8b02 	vpop	{d8}
    8e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8e1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8e1e:	2501      	movs	r5, #1
    8e20:	1e5e      	subs	r6, r3, #1
    8e22:	e73a      	b.n	8c9a <__ssvfscanf_r+0x8e>
    8e24:	0723      	lsls	r3, r4, #28
    8e26:	d1e6      	bne.n	8df6 <__ssvfscanf_r+0x1ea>
    8e28:	7842      	ldrb	r2, [r0, #1]
    8e2a:	4608      	mov	r0, r1
    8e2c:	e776      	b.n	8d1c <__ssvfscanf_r+0x110>
    8e2e:	0722      	lsls	r2, r4, #28
    8e30:	d1e1      	bne.n	8df6 <__ssvfscanf_r+0x1ea>
    8e32:	7842      	ldrb	r2, [r0, #1]
    8e34:	f044 0402 	orr.w	r4, r4, #2
    8e38:	4608      	mov	r0, r1
    8e3a:	e76f      	b.n	8d1c <__ssvfscanf_r+0x110>
    8e3c:	f044 0401 	orr.w	r4, r4, #1
    8e40:	64f9      	str	r1, [r7, #76]	; 0x4c
    8e42:	2502      	movs	r5, #2
    8e44:	f8db 3004 	ldr.w	r3, [fp, #4]
    8e48:	2b00      	cmp	r3, #0
    8e4a:	f340 8408 	ble.w	965e <__ssvfscanf_r+0xa52>
    8e4e:	0660      	lsls	r0, r4, #25
    8e50:	f140 840f 	bpl.w	9672 <__ssvfscanf_r+0xa66>
    8e54:	1e6b      	subs	r3, r5, #1
    8e56:	2b03      	cmp	r3, #3
    8e58:	f201 80eb 	bhi.w	a032 <__ssvfscanf_r+0x1426>
    8e5c:	e8df f013 	tbh	[pc, r3, lsl #1]
    8e60:	01f1027b 	.word	0x01f1027b
    8e64:	0008014b 	.word	0x0008014b
    8e68:	20007c5c 	.word	0x20007c5c
    8e6c:	20000645 	.word	0x20000645
    8e70:	4648      	mov	r0, r9
    8e72:	f001 fcaf 	bl	a7d4 <_localeconv_r>
    8e76:	6803      	ldr	r3, [r0, #0]
    8e78:	623b      	str	r3, [r7, #32]
    8e7a:	f108 33ff 	add.w	r3, r8, #4294967295
    8e7e:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
    8e82:	f240 855a 	bls.w	993a <__ssvfscanf_r+0xd2e>
    8e86:	f46f 75ae 	mvn.w	r5, #348	; 0x15c
    8e8a:	eb08 0305 	add.w	r3, r8, r5
    8e8e:	613b      	str	r3, [r7, #16]
    8e90:	f240 185d 	movw	r8, #349	; 0x15d
    8e94:	2600      	movs	r6, #0
    8e96:	f507 73b8 	add.w	r3, r7, #368	; 0x170
    8e9a:	ee08 9a10 	vmov	s16, r9
    8e9e:	e9c7 6605 	strd	r6, r6, [r7, #20]
    8ea2:	63fe      	str	r6, [r7, #60]	; 0x3c
    8ea4:	637e      	str	r6, [r7, #52]	; 0x34
    8ea6:	61fe      	str	r6, [r7, #28]
    8ea8:	64be      	str	r6, [r7, #72]	; 0x48
    8eaa:	f444 64f0 	orr.w	r4, r4, #1920	; 0x780
    8eae:	62bb      	str	r3, [r7, #40]	; 0x28
    8eb0:	461d      	mov	r5, r3
    8eb2:	4646      	mov	r6, r8
    8eb4:	f8db 1000 	ldr.w	r1, [fp]
    8eb8:	780a      	ldrb	r2, [r1, #0]
    8eba:	f1a2 032b 	sub.w	r3, r2, #43	; 0x2b
    8ebe:	2b4e      	cmp	r3, #78	; 0x4e
    8ec0:	d850      	bhi.n	8f64 <__ssvfscanf_r+0x358>
    8ec2:	e8df f013 	tbh	[pc, r3, lsl #1]
    8ec6:	037e      	.short	0x037e
    8ec8:	037e004f 	.word	0x037e004f
    8ecc:	004f004f 	.word	0x004f004f
    8ed0:	00a600a3 	.word	0x00a600a3
    8ed4:	00a600a6 	.word	0x00a600a6
    8ed8:	00a600a6 	.word	0x00a600a6
    8edc:	00a600a6 	.word	0x00a600a6
    8ee0:	00a600a6 	.word	0x00a600a6
    8ee4:	004f004f 	.word	0x004f004f
    8ee8:	004f004f 	.word	0x004f004f
    8eec:	004f004f 	.word	0x004f004f
    8ef0:	0374004f 	.word	0x0374004f
    8ef4:	030b030b 	.word	0x030b030b
    8ef8:	039e030b 	.word	0x039e030b
    8efc:	004f0394 	.word	0x004f0394
    8f00:	0384004f 	.word	0x0384004f
    8f04:	004f004f 	.word	0x004f004f
    8f08:	004f004f 	.word	0x004f004f
    8f0c:	004f035d 	.word	0x004f035d
    8f10:	004f033a 	.word	0x004f033a
    8f14:	004f004f 	.word	0x004f004f
    8f18:	004f0333 	.word	0x004f0333
    8f1c:	004f004f 	.word	0x004f004f
    8f20:	036d031e 	.word	0x036d031e
    8f24:	004f004f 	.word	0x004f004f
    8f28:	004f004f 	.word	0x004f004f
    8f2c:	004f004f 	.word	0x004f004f
    8f30:	0374004f 	.word	0x0374004f
    8f34:	030b030b 	.word	0x030b030b
    8f38:	039e030b 	.word	0x039e030b
    8f3c:	004f0394 	.word	0x004f0394
    8f40:	0384004f 	.word	0x0384004f
    8f44:	004f004f 	.word	0x004f004f
    8f48:	004f004f 	.word	0x004f004f
    8f4c:	004f035d 	.word	0x004f035d
    8f50:	004f033a 	.word	0x004f033a
    8f54:	004f004f 	.word	0x004f004f
    8f58:	004f0333 	.word	0x004f0333
    8f5c:	004f004f 	.word	0x004f004f
    8f60:	036d031e 	.word	0x036d031e
    8f64:	05a0      	lsls	r0, r4, #22
    8f66:	d56f      	bpl.n	9048 <__ssvfscanf_r+0x43c>
    8f68:	6a38      	ldr	r0, [r7, #32]
    8f6a:	7803      	ldrb	r3, [r0, #0]
    8f6c:	4293      	cmp	r3, r2
    8f6e:	d16b      	bne.n	9048 <__ssvfscanf_r+0x43c>
    8f70:	e9c7 4502 	strd	r4, r5, [r7, #8]
    8f74:	607e      	str	r6, [r7, #4]
    8f76:	4681      	mov	r9, r0
    8f78:	ee18 6a10 	vmov	r6, s16
    8f7c:	f04f 0800 	mov.w	r8, #0
    8f80:	465c      	mov	r4, fp
    8f82:	e007      	b.n	8f94 <__ssvfscanf_r+0x388>
    8f84:	6021      	str	r1, [r4, #0]
    8f86:	f891 e000 	ldrb.w	lr, [r1]
    8f8a:	f899 0000 	ldrb.w	r0, [r9]
    8f8e:	4586      	cmp	lr, r0
    8f90:	d11c      	bne.n	8fcc <__ssvfscanf_r+0x3c0>
    8f92:	46da      	mov	sl, fp
    8f94:	f819 0f01 	ldrb.w	r0, [r9, #1]!
    8f98:	4645      	mov	r5, r8
    8f9a:	f10a 0b01 	add.w	fp, sl, #1
    8f9e:	3101      	adds	r1, #1
    8fa0:	f108 0801 	add.w	r8, r8, #1
    8fa4:	2800      	cmp	r0, #0
    8fa6:	f000 8664 	beq.w	9c72 <__ssvfscanf_r+0x1066>
    8faa:	6860      	ldr	r0, [r4, #4]
    8fac:	3801      	subs	r0, #1
    8fae:	2800      	cmp	r0, #0
    8fb0:	6060      	str	r0, [r4, #4]
    8fb2:	dce7      	bgt.n	8f84 <__ssvfscanf_r+0x378>
    8fb4:	4621      	mov	r1, r4
    8fb6:	4630      	mov	r0, r6
    8fb8:	f003 f842 	bl	c040 <__ssrefill_r>
    8fbc:	b930      	cbnz	r0, 8fcc <__ssvfscanf_r+0x3c0>
    8fbe:	6821      	ldr	r1, [r4, #0]
    8fc0:	f899 0000 	ldrb.w	r0, [r9]
    8fc4:	f891 e000 	ldrb.w	lr, [r1]
    8fc8:	4586      	cmp	lr, r0
    8fca:	d0e2      	beq.n	8f92 <__ssvfscanf_r+0x386>
    8fcc:	46a3      	mov	fp, r4
    8fce:	6a3a      	ldr	r2, [r7, #32]
    8fd0:	68bc      	ldr	r4, [r7, #8]
    8fd2:	613d      	str	r5, [r7, #16]
    8fd4:	462b      	mov	r3, r5
    8fd6:	46b1      	mov	r9, r6
    8fd8:	6cbe      	ldr	r6, [r7, #72]	; 0x48
    8fda:	68fd      	ldr	r5, [r7, #12]
    8fdc:	64bd      	str	r5, [r7, #72]	; 0x48
    8fde:	3301      	adds	r3, #1
    8fe0:	465d      	mov	r5, fp
    8fe2:	eb02 0803 	add.w	r8, r2, r3
    8fe6:	46b3      	mov	fp, r6
    8fe8:	4626      	mov	r6, r4
    8fea:	4614      	mov	r4, r2
    8fec:	f818 1d01 	ldrb.w	r1, [r8, #-1]!
    8ff0:	462a      	mov	r2, r5
    8ff2:	4648      	mov	r0, r9
    8ff4:	f002 ffe4 	bl	bfc0 <_sungetc_r>
    8ff8:	4544      	cmp	r4, r8
    8ffa:	d1f7      	bne.n	8fec <__ssvfscanf_r+0x3e0>
    8ffc:	693b      	ldr	r3, [r7, #16]
    8ffe:	4634      	mov	r4, r6
    9000:	ebaa 0a03 	sub.w	sl, sl, r3
    9004:	465e      	mov	r6, fp
    9006:	46ab      	mov	fp, r5
    9008:	6cbd      	ldr	r5, [r7, #72]	; 0x48
    900a:	e020      	b.n	904e <__ssvfscanf_r+0x442>
    900c:	05e0      	lsls	r0, r4, #23
    900e:	f100 8501 	bmi.w	9a14 <__ssvfscanf_r+0xe08>
    9012:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    9014:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    9016:	42d9      	cmn	r1, r3
    9018:	d116      	bne.n	9048 <__ssvfscanf_r+0x43c>
    901a:	f424 74c0 	bic.w	r4, r4, #384	; 0x180
    901e:	f805 2b01 	strb.w	r2, [r5], #1
    9022:	3e01      	subs	r6, #1
    9024:	f8db 3004 	ldr.w	r3, [fp, #4]
    9028:	3b01      	subs	r3, #1
    902a:	2b00      	cmp	r3, #0
    902c:	f10a 0a01 	add.w	sl, sl, #1
    9030:	f8cb 3004 	str.w	r3, [fp, #4]
    9034:	f340 836f 	ble.w	9716 <__ssvfscanf_r+0xb0a>
    9038:	f8db 3000 	ldr.w	r3, [fp]
    903c:	3301      	adds	r3, #1
    903e:	f8cb 3000 	str.w	r3, [fp]
    9042:	2e00      	cmp	r6, #0
    9044:	f47f af36 	bne.w	8eb4 <__ssvfscanf_r+0x2a8>
    9048:	6cbe      	ldr	r6, [r7, #72]	; 0x48
    904a:	ee18 9a10 	vmov	r9, s16
    904e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9050:	2b00      	cmp	r3, #0
    9052:	f040 82dc 	bne.w	960e <__ssvfscanf_r+0xa02>
    9056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9058:	3b01      	subs	r3, #1
    905a:	2b01      	cmp	r3, #1
    905c:	f241 8016 	bls.w	a08c <__ssvfscanf_r+0x1480>
    9060:	1e73      	subs	r3, r6, #1
    9062:	2b06      	cmp	r3, #6
    9064:	f240 8627 	bls.w	9cb6 <__ssvfscanf_r+0x10aa>
    9068:	05e3      	lsls	r3, r4, #23
    906a:	d51b      	bpl.n	90a4 <__ssvfscanf_r+0x498>
    906c:	0566      	lsls	r6, r4, #21
    906e:	f101 80b5 	bmi.w	a1dc <__ssvfscanf_r+0x15d0>
    9072:	f815 1c01 	ldrb.w	r1, [r5, #-1]
    9076:	2965      	cmp	r1, #101	; 0x65
    9078:	f105 33ff 	add.w	r3, r5, #4294967295
    907c:	f10a 36ff 	add.w	r6, sl, #4294967295
    9080:	d00a      	beq.n	9098 <__ssvfscanf_r+0x48c>
    9082:	2945      	cmp	r1, #69	; 0x45
    9084:	d008      	beq.n	9098 <__ssvfscanf_r+0x48c>
    9086:	465a      	mov	r2, fp
    9088:	4648      	mov	r0, r9
    908a:	f002 ff99 	bl	bfc0 <_sungetc_r>
    908e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
    9092:	f1aa 0602 	sub.w	r6, sl, #2
    9096:	1eab      	subs	r3, r5, #2
    9098:	465a      	mov	r2, fp
    909a:	4648      	mov	r0, r9
    909c:	46b2      	mov	sl, r6
    909e:	461d      	mov	r5, r3
    90a0:	f002 ff8e 	bl	bfc0 <_sungetc_r>
    90a4:	f014 0210 	ands.w	r2, r4, #16
    90a8:	f47f add7 	bne.w	8c5a <__ssvfscanf_r+0x4e>
    90ac:	f404 63c0 	and.w	r3, r4, #1536	; 0x600
    90b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    90b4:	702a      	strb	r2, [r5, #0]
    90b6:	f000 84d2 	beq.w	9a5e <__ssvfscanf_r+0xe52>
    90ba:	69bb      	ldr	r3, [r7, #24]
    90bc:	2b00      	cmp	r3, #0
    90be:	f040 872c 	bne.w	9f1a <__ssvfscanf_r+0x130e>
    90c2:	4648      	mov	r0, r9
    90c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    90c6:	2200      	movs	r2, #0
    90c8:	f7fb feb2 	bl	4e30 <_strtod_r>
    90cc:	07e0      	lsls	r0, r4, #31
    90ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    90d0:	f100 85c9 	bmi.w	9c66 <__ssvfscanf_r+0x105a>
    90d4:	07a1      	lsls	r1, r4, #30
    90d6:	f100 85c6 	bmi.w	9c66 <__ssvfscanf_r+0x105a>
    90da:	eeb4 0b40 	vcmp.f64	d0, d0
    90de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    90e2:	f853 4b04 	ldr.w	r4, [r3], #4
    90e6:	f180 86f4 	bvs.w	9ed2 <__ssvfscanf_r+0x12c6>
    90ea:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    90ee:	633b      	str	r3, [r7, #48]	; 0x30
    90f0:	ed84 0a00 	vstr	s0, [r4]
    90f4:	e3a2      	b.n	983c <__ssvfscanf_r+0xc30>
    90f6:	f108 33ff 	add.w	r3, r8, #4294967295
    90fa:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
    90fe:	f240 83a2 	bls.w	9846 <__ssvfscanf_r+0xc3a>
    9102:	f46f 72ae 	mvn.w	r2, #348	; 0x15c
    9106:	eb08 0302 	add.w	r3, r8, r2
    910a:	63fb      	str	r3, [r7, #60]	; 0x3c
    910c:	f240 185d 	movw	r8, #349	; 0x15d
    9110:	f507 73b8 	add.w	r3, r7, #368	; 0x170
    9114:	2200      	movs	r2, #0
    9116:	6bbe      	ldr	r6, [r7, #56]	; 0x38
    9118:	62bb      	str	r3, [r7, #40]	; 0x28
    911a:	4659      	mov	r1, fp
    911c:	f444 6458 	orr.w	r4, r4, #3456	; 0xd80
    9120:	46d3      	mov	fp, sl
    9122:	461d      	mov	r5, r3
    9124:	4692      	mov	sl, r2
    9126:	680a      	ldr	r2, [r1, #0]
    9128:	7810      	ldrb	r0, [r2, #0]
    912a:	f1a0 032b 	sub.w	r3, r0, #43	; 0x2b
    912e:	2b4d      	cmp	r3, #77	; 0x4d
    9130:	d860      	bhi.n	91f4 <__ssvfscanf_r+0x5e8>
    9132:	e8df f013 	tbh	[pc, r3, lsl #1]
    9136:	0282      	.short	0x0282
    9138:	0282005f 	.word	0x0282005f
    913c:	005f005f 	.word	0x005f005f
    9140:	01e002cd 	.word	0x01e002cd
    9144:	01e001e0 	.word	0x01e001e0
    9148:	01e001e0 	.word	0x01e001e0
    914c:	01e001e0 	.word	0x01e001e0
    9150:	026f026f 	.word	0x026f026f
    9154:	005f005f 	.word	0x005f005f
    9158:	005f005f 	.word	0x005f005f
    915c:	005f005f 	.word	0x005f005f
    9160:	004e005f 	.word	0x004e005f
    9164:	004e004e 	.word	0x004e004e
    9168:	004e004e 	.word	0x004e004e
    916c:	005f004e 	.word	0x005f004e
    9170:	005f005f 	.word	0x005f005f
    9174:	005f005f 	.word	0x005f005f
    9178:	005f005f 	.word	0x005f005f
    917c:	005f005f 	.word	0x005f005f
    9180:	005f005f 	.word	0x005f005f
    9184:	005f005f 	.word	0x005f005f
    9188:	005f005f 	.word	0x005f005f
    918c:	005f005f 	.word	0x005f005f
    9190:	005f0276 	.word	0x005f0276
    9194:	005f005f 	.word	0x005f005f
    9198:	005f005f 	.word	0x005f005f
    919c:	005f005f 	.word	0x005f005f
    91a0:	004e005f 	.word	0x004e005f
    91a4:	004e004e 	.word	0x004e004e
    91a8:	004e004e 	.word	0x004e004e
    91ac:	005f004e 	.word	0x005f004e
    91b0:	005f005f 	.word	0x005f005f
    91b4:	005f005f 	.word	0x005f005f
    91b8:	005f005f 	.word	0x005f005f
    91bc:	005f005f 	.word	0x005f005f
    91c0:	005f005f 	.word	0x005f005f
    91c4:	005f005f 	.word	0x005f005f
    91c8:	005f005f 	.word	0x005f005f
    91cc:	005f005f 	.word	0x005f005f
    91d0:	0276      	.short	0x0276
    91d2:	2e0a      	cmp	r6, #10
    91d4:	dd0e      	ble.n	91f4 <__ssvfscanf_r+0x5e8>
    91d6:	f424 6438 	bic.w	r4, r4, #2944	; 0xb80
    91da:	684b      	ldr	r3, [r1, #4]
    91dc:	f805 0b01 	strb.w	r0, [r5], #1
    91e0:	3b01      	subs	r3, #1
    91e2:	2b00      	cmp	r3, #0
    91e4:	604b      	str	r3, [r1, #4]
    91e6:	f340 828d 	ble.w	9704 <__ssvfscanf_r+0xaf8>
    91ea:	3201      	adds	r2, #1
    91ec:	600a      	str	r2, [r1, #0]
    91ee:	f1b8 0801 	subs.w	r8, r8, #1
    91f2:	d198      	bne.n	9126 <__ssvfscanf_r+0x51a>
    91f4:	05e0      	lsls	r0, r4, #23
    91f6:	46d0      	mov	r8, sl
    91f8:	63be      	str	r6, [r7, #56]	; 0x38
    91fa:	46da      	mov	sl, fp
    91fc:	468b      	mov	fp, r1
    91fe:	d507      	bpl.n	9210 <__ssvfscanf_r+0x604>
    9200:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9202:	429d      	cmp	r5, r3
    9204:	f200 8422 	bhi.w	9a4c <__ssvfscanf_r+0xe40>
    9208:	6abb      	ldr	r3, [r7, #40]	; 0x28
    920a:	429d      	cmp	r5, r3
    920c:	f43f adf3 	beq.w	8df6 <__ssvfscanf_r+0x1ea>
    9210:	f014 0210 	ands.w	r2, r4, #16
    9214:	d110      	bne.n	9238 <__ssvfscanf_r+0x62c>
    9216:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    9218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    921a:	6afe      	ldr	r6, [r7, #44]	; 0x2c
    921c:	702a      	strb	r2, [r5, #0]
    921e:	4648      	mov	r0, r9
    9220:	47b0      	blx	r6
    9222:	06a1      	lsls	r1, r4, #26
    9224:	f140 8408 	bpl.w	9a38 <__ssvfscanf_r+0xe2c>
    9228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    922a:	f853 2b04 	ldr.w	r2, [r3], #4
    922e:	6010      	str	r0, [r2, #0]
    9230:	633b      	str	r3, [r7, #48]	; 0x30
    9232:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    9234:	3301      	adds	r3, #1
    9236:	647b      	str	r3, [r7, #68]	; 0x44
    9238:	6abb      	ldr	r3, [r7, #40]	; 0x28
    923a:	1aed      	subs	r5, r5, r3
    923c:	4445      	add	r5, r8
    923e:	44aa      	add	sl, r5
    9240:	e50b      	b.n	8c5a <__ssvfscanf_r+0x4e>
    9242:	f1b8 0f00 	cmp.w	r8, #0
    9246:	bf08      	it	eq
    9248:	f04f 38ff 	moveq.w	r8, #4294967295
    924c:	07e0      	lsls	r0, r4, #31
    924e:	f140 8295 	bpl.w	977c <__ssvfscanf_r+0xb70>
    9252:	f014 0310 	ands.w	r3, r4, #16
    9256:	637b      	str	r3, [r7, #52]	; 0x34
    9258:	f040 8474 	bne.w	9b44 <__ssvfscanf_r+0xf38>
    925c:	0621      	lsls	r1, r4, #24
    925e:	f140 8666 	bpl.w	9f2e <__ssvfscanf_r+0x1322>
    9262:	6b3c      	ldr	r4, [r7, #48]	; 0x30
    9264:	f854 3b04 	ldr.w	r3, [r4], #4
    9268:	63fb      	str	r3, [r7, #60]	; 0x3c
    926a:	2b00      	cmp	r3, #0
    926c:	f43f adc3 	beq.w	8df6 <__ssvfscanf_r+0x1ea>
    9270:	2080      	movs	r0, #128	; 0x80
    9272:	f7fa f9e1 	bl	3638 <malloc>
    9276:	64b8      	str	r0, [r7, #72]	; 0x48
    9278:	2800      	cmp	r0, #0
    927a:	f000 8778 	beq.w	a16e <__ssvfscanf_r+0x1562>
    927e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9280:	6cba      	ldr	r2, [r7, #72]	; 0x48
    9282:	601a      	str	r2, [r3, #0]
    9284:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    9286:	88d5      	ldrh	r5, [r2, #6]
    9288:	8893      	ldrh	r3, [r2, #4]
    928a:	429d      	cmp	r5, r3
    928c:	f080 8552 	bcs.w	9d34 <__ssvfscanf_r+0x1128>
    9290:	6810      	ldr	r0, [r2, #0]
    9292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9294:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
    9298:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    929a:	633c      	str	r4, [r7, #48]	; 0x30
    929c:	3501      	adds	r5, #1
    929e:	80dd      	strh	r5, [r3, #6]
    92a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    92a2:	62bb      	str	r3, [r7, #40]	; 0x28
    92a4:	2320      	movs	r3, #32
    92a6:	623b      	str	r3, [r7, #32]
    92a8:	f8db 3000 	ldr.w	r3, [fp]
    92ac:	4eb1      	ldr	r6, [pc, #708]	; (9574 <__ssvfscanf_r+0x968>)
    92ae:	781b      	ldrb	r3, [r3, #0]
    92b0:	5cf3      	ldrb	r3, [r6, r3]
    92b2:	f013 0308 	ands.w	r3, r3, #8
    92b6:	f040 84bb 	bne.w	9c30 <__ssvfscanf_r+0x1024>
    92ba:	6a7c      	ldr	r4, [r7, #36]	; 0x24
    92bc:	627e      	str	r6, [r7, #36]	; 0x24
    92be:	461d      	mov	r5, r3
    92c0:	f7fc f9a8 	bl	5614 <__locale_mb_cur_max>
    92c4:	42a8      	cmp	r0, r5
    92c6:	f43f ad8d 	beq.w	8de4 <__ssvfscanf_r+0x1d8>
    92ca:	e9db 3200 	ldrd	r3, r2, [fp]
    92ce:	f507 70b8 	add.w	r0, r7, #368	; 0x170
    92d2:	f813 1b01 	ldrb.w	r1, [r3], #1
    92d6:	5541      	strb	r1, [r0, r5]
    92d8:	3a01      	subs	r2, #1
    92da:	2c03      	cmp	r4, #3
    92dc:	e9cb 3200 	strd	r3, r2, [fp]
    92e0:	f105 0501 	add.w	r5, r5, #1
    92e4:	f107 0668 	add.w	r6, r7, #104	; 0x68
    92e8:	d102      	bne.n	92f0 <__ssvfscanf_r+0x6e4>
    92ea:	6833      	ldr	r3, [r6, #0]
    92ec:	2b04      	cmp	r3, #4
    92ee:	d004      	beq.n	92fa <__ssvfscanf_r+0x6ee>
    92f0:	2208      	movs	r2, #8
    92f2:	2100      	movs	r1, #0
    92f4:	4630      	mov	r0, r6
    92f6:	f7fc f8c3 	bl	5480 <memset>
    92fa:	f507 72b8 	add.w	r2, r7, #368	; 0x170
    92fe:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    9300:	9600      	str	r6, [sp, #0]
    9302:	462b      	mov	r3, r5
    9304:	4648      	mov	r0, r9
    9306:	f002 fc87 	bl	bc18 <_mbrtowc_r>
    930a:	1c42      	adds	r2, r0, #1
    930c:	4604      	mov	r4, r0
    930e:	f43f ad69 	beq.w	8de4 <__ssvfscanf_r+0x1d8>
    9312:	2800      	cmp	r0, #0
    9314:	f040 8478 	bne.w	9c08 <__ssvfscanf_r+0xffc>
    9318:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    931a:	6018      	str	r0, [r3, #0]
    931c:	f002 fcd8 	bl	bcd0 <iswspace>
    9320:	2800      	cmp	r0, #0
    9322:	f040 865c 	bne.w	9fde <__ssvfscanf_r+0x13d2>
    9326:	44aa      	add	sl, r5
    9328:	f108 38ff 	add.w	r8, r8, #4294967295
    932c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    932e:	2b00      	cmp	r3, #0
    9330:	f040 8633 	bne.w	9f9a <__ssvfscanf_r+0x138e>
    9334:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    9336:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    9338:	3304      	adds	r3, #4
    933a:	64bb      	str	r3, [r7, #72]	; 0x48
    933c:	2a00      	cmp	r2, #0
    933e:	f000 862c 	beq.w	9f9a <__ssvfscanf_r+0x138e>
    9342:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9344:	1a9d      	subs	r5, r3, r2
    9346:	6a3b      	ldr	r3, [r7, #32]
    9348:	ebb3 0fa5 	cmp.w	r3, r5, asr #2
    934c:	f240 8756 	bls.w	a1fc <__ssvfscanf_r+0x15f0>
    9350:	6b7d      	ldr	r5, [r7, #52]	; 0x34
    9352:	f000 bc5c 	b.w	9c0e <__ssvfscanf_r+0x1002>
    9356:	f1b8 0f00 	cmp.w	r8, #0
    935a:	bf08      	it	eq
    935c:	f04f 38ff 	moveq.w	r8, #4294967295
    9360:	07e0      	lsls	r0, r4, #31
    9362:	f140 827b 	bpl.w	985c <__ssvfscanf_r+0xc50>
    9366:	f014 0310 	ands.w	r3, r4, #16
    936a:	62bb      	str	r3, [r7, #40]	; 0x28
    936c:	f040 83f3 	bne.w	9b56 <__ssvfscanf_r+0xf4a>
    9370:	0621      	lsls	r1, r4, #24
    9372:	f140 85ed 	bpl.w	9f50 <__ssvfscanf_r+0x1344>
    9376:	6b3e      	ldr	r6, [r7, #48]	; 0x30
    9378:	f856 3b04 	ldr.w	r3, [r6], #4
    937c:	623b      	str	r3, [r7, #32]
    937e:	2b00      	cmp	r3, #0
    9380:	f43f ad39 	beq.w	8df6 <__ssvfscanf_r+0x1ea>
    9384:	2080      	movs	r0, #128	; 0x80
    9386:	f7fa f957 	bl	3638 <malloc>
    938a:	4604      	mov	r4, r0
    938c:	2800      	cmp	r0, #0
    938e:	f000 86ee 	beq.w	a16e <__ssvfscanf_r+0x1562>
    9392:	6a3b      	ldr	r3, [r7, #32]
    9394:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    9396:	6018      	str	r0, [r3, #0]
    9398:	88d5      	ldrh	r5, [r2, #6]
    939a:	8893      	ldrh	r3, [r2, #4]
    939c:	429d      	cmp	r5, r3
    939e:	f080 84dd 	bcs.w	9d5c <__ssvfscanf_r+0x1150>
    93a2:	6810      	ldr	r0, [r2, #0]
    93a4:	6a3b      	ldr	r3, [r7, #32]
    93a6:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
    93aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    93ac:	633e      	str	r6, [r7, #48]	; 0x30
    93ae:	3501      	adds	r5, #1
    93b0:	80dd      	strh	r5, [r3, #6]
    93b2:	2320      	movs	r3, #32
    93b4:	61fc      	str	r4, [r7, #28]
    93b6:	61bb      	str	r3, [r7, #24]
    93b8:	6a7e      	ldr	r6, [r7, #36]	; 0x24
    93ba:	f8c7 a03c 	str.w	sl, [r7, #60]	; 0x3c
    93be:	2500      	movs	r5, #0
    93c0:	46c2      	mov	sl, r8
    93c2:	46a0      	mov	r8, r4
    93c4:	f7fc f926 	bl	5614 <__locale_mb_cur_max>
    93c8:	42a8      	cmp	r0, r5
    93ca:	f43f ad0b 	beq.w	8de4 <__ssvfscanf_r+0x1d8>
    93ce:	e9db 3200 	ldrd	r3, r2, [fp]
    93d2:	f813 1b01 	ldrb.w	r1, [r3], #1
    93d6:	3a01      	subs	r2, #1
    93d8:	f507 70b8 	add.w	r0, r7, #368	; 0x170
    93dc:	e9cb 3200 	strd	r3, r2, [fp]
    93e0:	2e03      	cmp	r6, #3
    93e2:	f105 0301 	add.w	r3, r5, #1
    93e6:	5541      	strb	r1, [r0, r5]
    93e8:	64bb      	str	r3, [r7, #72]	; 0x48
    93ea:	f107 0460 	add.w	r4, r7, #96	; 0x60
    93ee:	d102      	bne.n	93f6 <__ssvfscanf_r+0x7ea>
    93f0:	6823      	ldr	r3, [r4, #0]
    93f2:	2b04      	cmp	r3, #4
    93f4:	d004      	beq.n	9400 <__ssvfscanf_r+0x7f4>
    93f6:	2208      	movs	r2, #8
    93f8:	2100      	movs	r1, #0
    93fa:	4620      	mov	r0, r4
    93fc:	f7fc f840 	bl	5480 <memset>
    9400:	f507 72b8 	add.w	r2, r7, #368	; 0x170
    9404:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    9406:	9400      	str	r4, [sp, #0]
    9408:	4641      	mov	r1, r8
    940a:	4648      	mov	r0, r9
    940c:	f002 fc04 	bl	bc18 <_mbrtowc_r>
    9410:	1c42      	adds	r2, r0, #1
    9412:	4606      	mov	r6, r0
    9414:	f43f ace6 	beq.w	8de4 <__ssvfscanf_r+0x1d8>
    9418:	2800      	cmp	r0, #0
    941a:	f040 82ca 	bne.w	99b2 <__ssvfscanf_r+0xda6>
    941e:	f8c8 0000 	str.w	r0, [r8]
    9422:	4605      	mov	r5, r0
    9424:	f107 0368 	add.w	r3, r7, #104	; 0x68
    9428:	2208      	movs	r2, #8
    942a:	2100      	movs	r1, #0
    942c:	4618      	mov	r0, r3
    942e:	637b      	str	r3, [r7, #52]	; 0x34
    9430:	f7fc f826 	bl	5480 <memset>
    9434:	4950      	ldr	r1, [pc, #320]	; (9578 <__ssvfscanf_r+0x96c>)
    9436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9438:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    943c:	462a      	mov	r2, r5
    943e:	4648      	mov	r0, r9
    9440:	460d      	mov	r5, r1
    9442:	f107 0150 	add.w	r1, r7, #80	; 0x50
    9446:	47a8      	blx	r5
    9448:	2801      	cmp	r0, #1
    944a:	f000 83d5 	beq.w	9bf8 <__ssvfscanf_r+0xfec>
    944e:	2200      	movs	r2, #0
    9450:	f107 0370 	add.w	r3, r7, #112	; 0x70
    9454:	5c9b      	ldrb	r3, [r3, r2]
    9456:	2b00      	cmp	r3, #0
    9458:	f000 85a1 	beq.w	9f9e <__ssvfscanf_r+0x1392>
    945c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    945e:	6cba      	ldr	r2, [r7, #72]	; 0x48
    9460:	2e03      	cmp	r6, #3
    9462:	4413      	add	r3, r2
    9464:	63fb      	str	r3, [r7, #60]	; 0x3c
    9466:	f000 83ca 	beq.w	9bfe <__ssvfscanf_r+0xff2>
    946a:	f10a 3aff 	add.w	sl, sl, #4294967295
    946e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9470:	b95b      	cbnz	r3, 948a <__ssvfscanf_r+0x87e>
    9472:	6a3b      	ldr	r3, [r7, #32]
    9474:	f108 0804 	add.w	r8, r8, #4
    9478:	b13b      	cbz	r3, 948a <__ssvfscanf_r+0x87e>
    947a:	69fb      	ldr	r3, [r7, #28]
    947c:	eba8 0403 	sub.w	r4, r8, r3
    9480:	69bb      	ldr	r3, [r7, #24]
    9482:	ebb3 0fa4 	cmp.w	r3, r4, asr #2
    9486:	f240 8405 	bls.w	9c94 <__ssvfscanf_r+0x1088>
    948a:	f8db 3004 	ldr.w	r3, [fp, #4]
    948e:	2b00      	cmp	r3, #0
    9490:	f04f 0500 	mov.w	r5, #0
    9494:	f340 8296 	ble.w	99c4 <__ssvfscanf_r+0xdb8>
    9498:	f1ba 0f00 	cmp.w	sl, #0
    949c:	d192      	bne.n	93c4 <__ssvfscanf_r+0x7b8>
    949e:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
    94a2:	627e      	str	r6, [r7, #36]	; 0x24
    94a4:	4644      	mov	r4, r8
    94a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    94a8:	2b00      	cmp	r3, #0
    94aa:	f47f abd6 	bne.w	8c5a <__ssvfscanf_r+0x4e>
    94ae:	6023      	str	r3, [r4, #0]
    94b0:	6a3b      	ldr	r3, [r7, #32]
    94b2:	2b00      	cmp	r3, #0
    94b4:	f000 81c2 	beq.w	983c <__ssvfscanf_r+0xc30>
    94b8:	69fb      	ldr	r3, [r7, #28]
    94ba:	69ba      	ldr	r2, [r7, #24]
    94bc:	1ae1      	subs	r1, r4, r3
    94be:	108b      	asrs	r3, r1, #2
    94c0:	3301      	adds	r3, #1
    94c2:	429a      	cmp	r2, r3
    94c4:	f240 81ba 	bls.w	983c <__ssvfscanf_r+0xc30>
    94c8:	6a3c      	ldr	r4, [r7, #32]
    94ca:	3104      	adds	r1, #4
    94cc:	6820      	ldr	r0, [r4, #0]
    94ce:	f7fa fb7f 	bl	3bd0 <realloc>
    94d2:	2800      	cmp	r0, #0
    94d4:	f000 81b2 	beq.w	983c <__ssvfscanf_r+0xc30>
    94d8:	6020      	str	r0, [r4, #0]
    94da:	e1af      	b.n	983c <__ssvfscanf_r+0xc30>
    94dc:	0521      	lsls	r1, r4, #20
    94de:	f57f adb3 	bpl.w	9048 <__ssvfscanf_r+0x43c>
    94e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    94e4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    94e6:	185b      	adds	r3, r3, r1
    94e8:	f47f adae 	bne.w	9048 <__ssvfscanf_r+0x43c>
    94ec:	64bb      	str	r3, [r7, #72]	; 0x48
    94ee:	f424 74c0 	bic.w	r4, r4, #384	; 0x180
    94f2:	63fb      	str	r3, [r7, #60]	; 0x3c
    94f4:	e593      	b.n	901e <__ssvfscanf_r+0x412>
    94f6:	4b21      	ldr	r3, [pc, #132]	; (957c <__ssvfscanf_r+0x970>)
    94f8:	f424 6438 	bic.w	r4, r4, #2944	; 0xb80
    94fc:	f933 6016 	ldrsh.w	r6, [r3, r6, lsl #1]
    9500:	e66b      	b.n	91da <__ssvfscanf_r+0x5ce>
    9502:	f404 6318 	and.w	r3, r4, #2432	; 0x980
    9506:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    950a:	f47f ad9d 	bne.w	9048 <__ssvfscanf_r+0x43c>
    950e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9510:	2b01      	cmp	r3, #1
    9512:	f47f ad99 	bne.w	9048 <__ssvfscanf_r+0x43c>
    9516:	2330      	movs	r3, #48	; 0x30
    9518:	f805 3b01 	strb.w	r3, [r5], #1
    951c:	f424 7480 	bic.w	r4, r4, #256	; 0x100
    9520:	2300      	movs	r3, #0
    9522:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
    9526:	3e01      	subs	r6, #1
    9528:	637b      	str	r3, [r7, #52]	; 0x34
    952a:	e578      	b.n	901e <__ssvfscanf_r+0x412>
    952c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    952e:	2b06      	cmp	r3, #6
    9530:	f040 8574 	bne.w	a01c <__ssvfscanf_r+0x1410>
    9534:	2307      	movs	r3, #7
    9536:	64bb      	str	r3, [r7, #72]	; 0x48
    9538:	e571      	b.n	901e <__ssvfscanf_r+0x412>
    953a:	0523      	lsls	r3, r4, #20
    953c:	f57f ad84 	bpl.w	9048 <__ssvfscanf_r+0x43c>
    9540:	f404 63a0 	and.w	r3, r4, #1280	; 0x500
    9544:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    9548:	d005      	beq.n	9556 <__ssvfscanf_r+0x94a>
    954a:	0561      	lsls	r1, r4, #21
    954c:	f57f ad7c 	bpl.w	9048 <__ssvfscanf_r+0x43c>
    9550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9552:	2b00      	cmp	r3, #0
    9554:	d047      	beq.n	95e6 <__ssvfscanf_r+0x9da>
    9556:	05a3      	lsls	r3, r4, #22
    9558:	d404      	bmi.n	9564 <__ssvfscanf_r+0x958>
    955a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    955c:	69f9      	ldr	r1, [r7, #28]
    955e:	1a5b      	subs	r3, r3, r1
    9560:	e9c7 5305 	strd	r5, r3, [r7, #20]
    9564:	f424 6478 	bic.w	r4, r4, #3968	; 0xf80
    9568:	2300      	movs	r3, #0
    956a:	f444 74c0 	orr.w	r4, r4, #384	; 0x180
    956e:	637b      	str	r3, [r7, #52]	; 0x34
    9570:	e555      	b.n	901e <__ssvfscanf_r+0x412>
    9572:	bf00      	nop
    9574:	20000645 	.word	0x20000645
    9578:	20007c5c 	.word	0x20007c5c
    957c:	20002274 	.word	0x20002274
    9580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9582:	2b00      	cmp	r3, #0
    9584:	f000 81ff 	beq.w	9986 <__ssvfscanf_r+0xd7a>
    9588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    958a:	2b02      	cmp	r3, #2
    958c:	f000 83b0 	beq.w	9cf0 <__ssvfscanf_r+0x10e4>
    9590:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    9592:	2b01      	cmp	r3, #1
    9594:	f000 81f1 	beq.w	997a <__ssvfscanf_r+0xd6e>
    9598:	2b04      	cmp	r3, #4
    959a:	f000 81ee 	beq.w	997a <__ssvfscanf_r+0xd6e>
    959e:	e553      	b.n	9048 <__ssvfscanf_r+0x43c>
    95a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    95a2:	2b07      	cmp	r3, #7
    95a4:	f040 853a 	bne.w	a01c <__ssvfscanf_r+0x1410>
    95a8:	2308      	movs	r3, #8
    95aa:	64bb      	str	r3, [r7, #72]	; 0x48
    95ac:	e537      	b.n	901e <__ssvfscanf_r+0x412>
    95ae:	0520      	lsls	r0, r4, #20
    95b0:	f100 81f9 	bmi.w	99a6 <__ssvfscanf_r+0xd9a>
    95b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    95b6:	2b01      	cmp	r3, #1
    95b8:	f47f ad46 	bne.w	9048 <__ssvfscanf_r+0x43c>
    95bc:	2302      	movs	r3, #2
    95be:	63fb      	str	r3, [r7, #60]	; 0x3c
    95c0:	e52d      	b.n	901e <__ssvfscanf_r+0x412>
    95c2:	0623      	lsls	r3, r4, #24
    95c4:	f57f ad40 	bpl.w	9048 <__ssvfscanf_r+0x43c>
    95c8:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    95cc:	e527      	b.n	901e <__ssvfscanf_r+0x412>
    95ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    95d0:	2b00      	cmp	r3, #0
    95d2:	f040 81cc 	bne.w	996e <__ssvfscanf_r+0xd62>
    95d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    95d8:	b9b3      	cbnz	r3, 9608 <__ssvfscanf_r+0x9fc>
    95da:	f404 63e0 	and.w	r3, r4, #1792	; 0x700
    95de:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
    95e2:	f000 8520 	beq.w	a026 <__ssvfscanf_r+0x141a>
    95e6:	6cbe      	ldr	r6, [r7, #72]	; 0x48
    95e8:	ee18 9a10 	vmov	r9, s16
    95ec:	e533      	b.n	9056 <__ssvfscanf_r+0x44a>
    95ee:	0521      	lsls	r1, r4, #20
    95f0:	f100 81b7 	bmi.w	9962 <__ssvfscanf_r+0xd56>
    95f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    95f6:	2b02      	cmp	r3, #2
    95f8:	f040 8510 	bne.w	a01c <__ssvfscanf_r+0x1410>
    95fc:	2303      	movs	r3, #3
    95fe:	64bb      	str	r3, [r7, #72]	; 0x48
    9600:	e50d      	b.n	901e <__ssvfscanf_r+0x412>
    9602:	0520      	lsls	r0, r4, #20
    9604:	d59c      	bpl.n	9540 <__ssvfscanf_r+0x934>
    9606:	e76c      	b.n	94e2 <__ssvfscanf_r+0x8d6>
    9608:	6cbe      	ldr	r6, [r7, #72]	; 0x48
    960a:	ee18 9a10 	vmov	r9, s16
    960e:	f424 7480 	bic.w	r4, r4, #256	; 0x100
    9612:	e520      	b.n	9056 <__ssvfscanf_r+0x44a>
    9614:	4b8d      	ldr	r3, [pc, #564]	; (984c <__ssvfscanf_r+0xc40>)
    9616:	f933 6016 	ldrsh.w	r6, [r3, r6, lsl #1]
    961a:	2e08      	cmp	r6, #8
    961c:	f73f addb 	bgt.w	91d6 <__ssvfscanf_r+0x5ca>
    9620:	e5e8      	b.n	91f4 <__ssvfscanf_r+0x5e8>
    9622:	f404 63c0 	and.w	r3, r4, #1536	; 0x600
    9626:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    962a:	f47f ade3 	bne.w	91f4 <__ssvfscanf_r+0x5e8>
    962e:	f424 7400 	bic.w	r4, r4, #512	; 0x200
    9632:	f444 64a0 	orr.w	r4, r4, #1280	; 0x500
    9636:	2610      	movs	r6, #16
    9638:	e5cf      	b.n	91da <__ssvfscanf_r+0x5ce>
    963a:	0623      	lsls	r3, r4, #24
    963c:	f57f adda 	bpl.w	91f4 <__ssvfscanf_r+0x5e8>
    9640:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    9644:	e5c9      	b.n	91da <__ssvfscanf_r+0x5ce>
    9646:	f044 0401 	orr.w	r4, r4, #1
    964a:	f8db 3004 	ldr.w	r3, [fp, #4]
    964e:	64f9      	str	r1, [r7, #76]	; 0x4c
    9650:	2b00      	cmp	r3, #0
    9652:	f044 0440 	orr.w	r4, r4, #64	; 0x40
    9656:	f04f 0500 	mov.w	r5, #0
    965a:	f73f abf8 	bgt.w	8e4e <__ssvfscanf_r+0x242>
    965e:	4659      	mov	r1, fp
    9660:	4648      	mov	r0, r9
    9662:	f002 fced 	bl	c040 <__ssrefill_r>
    9666:	2800      	cmp	r0, #0
    9668:	f47f abbc 	bne.w	8de4 <__ssvfscanf_r+0x1d8>
    966c:	0660      	lsls	r0, r4, #25
    966e:	f53f abf1 	bmi.w	8e54 <__ssvfscanf_r+0x248>
    9672:	f8db 2000 	ldr.w	r2, [fp]
    9676:	4e76      	ldr	r6, [pc, #472]	; (9850 <__ssvfscanf_r+0xc44>)
    9678:	7813      	ldrb	r3, [r2, #0]
    967a:	5cf3      	ldrb	r3, [r6, r3]
    967c:	0719      	lsls	r1, r3, #28
    967e:	f57f abe9 	bpl.w	8e54 <__ssvfscanf_r+0x248>
    9682:	f8db 3004 	ldr.w	r3, [fp, #4]
    9686:	3b01      	subs	r3, #1
    9688:	2b00      	cmp	r3, #0
    968a:	f10a 0a01 	add.w	sl, sl, #1
    968e:	f8cb 3004 	str.w	r3, [fp, #4]
    9692:	f102 0201 	add.w	r2, r2, #1
    9696:	dd4a      	ble.n	972e <__ssvfscanf_r+0xb22>
    9698:	f8cb 2000 	str.w	r2, [fp]
    969c:	7813      	ldrb	r3, [r2, #0]
    969e:	5cf3      	ldrb	r3, [r6, r3]
    96a0:	0719      	lsls	r1, r3, #28
    96a2:	f57f abd7 	bpl.w	8e54 <__ssvfscanf_r+0x248>
    96a6:	e7ec      	b.n	9682 <__ssvfscanf_r+0xa76>
    96a8:	f044 0401 	orr.w	r4, r4, #1
    96ac:	4b69      	ldr	r3, [pc, #420]	; (9854 <__ssvfscanf_r+0xc48>)
    96ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    96b0:	2308      	movs	r3, #8
    96b2:	64f9      	str	r1, [r7, #76]	; 0x4c
    96b4:	63bb      	str	r3, [r7, #56]	; 0x38
    96b6:	2503      	movs	r5, #3
    96b8:	f7ff bbc4 	b.w	8e44 <__ssvfscanf_r+0x238>
    96bc:	f044 0401 	orr.w	r4, r4, #1
    96c0:	4b65      	ldr	r3, [pc, #404]	; (9858 <__ssvfscanf_r+0xc4c>)
    96c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    96c4:	230a      	movs	r3, #10
    96c6:	64f9      	str	r1, [r7, #76]	; 0x4c
    96c8:	63bb      	str	r3, [r7, #56]	; 0x38
    96ca:	2503      	movs	r5, #3
    96cc:	f7ff bbba 	b.w	8e44 <__ssvfscanf_r+0x238>
    96d0:	0523      	lsls	r3, r4, #20
    96d2:	f57f ad82 	bpl.w	91da <__ssvfscanf_r+0x5ce>
    96d6:	b916      	cbnz	r6, 96de <__ssvfscanf_r+0xad2>
    96d8:	f444 7400 	orr.w	r4, r4, #512	; 0x200
    96dc:	2608      	movs	r6, #8
    96de:	0563      	lsls	r3, r4, #21
    96e0:	f100 81a6 	bmi.w	9a30 <__ssvfscanf_r+0xe24>
    96e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    96e6:	f424 7460 	bic.w	r4, r4, #896	; 0x380
    96ea:	b11b      	cbz	r3, 96f4 <__ssvfscanf_r+0xae8>
    96ec:	3b01      	subs	r3, #1
    96ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    96f0:	f108 0801 	add.w	r8, r8, #1
    96f4:	684b      	ldr	r3, [r1, #4]
    96f6:	3b01      	subs	r3, #1
    96f8:	2b00      	cmp	r3, #0
    96fa:	f10a 0a01 	add.w	sl, sl, #1
    96fe:	604b      	str	r3, [r1, #4]
    9700:	f73f ad73 	bgt.w	91ea <__ssvfscanf_r+0x5de>
    9704:	4648      	mov	r0, r9
    9706:	64b9      	str	r1, [r7, #72]	; 0x48
    9708:	f002 fc9a 	bl	c040 <__ssrefill_r>
    970c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    970e:	2800      	cmp	r0, #0
    9710:	f43f ad6d 	beq.w	91ee <__ssvfscanf_r+0x5e2>
    9714:	e56e      	b.n	91f4 <__ssvfscanf_r+0x5e8>
    9716:	ee18 0a10 	vmov	r0, s16
    971a:	4659      	mov	r1, fp
    971c:	f002 fc90 	bl	c040 <__ssrefill_r>
    9720:	2800      	cmp	r0, #0
    9722:	f47f ac91 	bne.w	9048 <__ssvfscanf_r+0x43c>
    9726:	2e00      	cmp	r6, #0
    9728:	f47f abc4 	bne.w	8eb4 <__ssvfscanf_r+0x2a8>
    972c:	e48c      	b.n	9048 <__ssvfscanf_r+0x43c>
    972e:	4659      	mov	r1, fp
    9730:	4648      	mov	r0, r9
    9732:	f002 fc85 	bl	c040 <__ssrefill_r>
    9736:	2800      	cmp	r0, #0
    9738:	f47f ab54 	bne.w	8de4 <__ssvfscanf_r+0x1d8>
    973c:	f8db 2000 	ldr.w	r2, [fp]
    9740:	e79a      	b.n	9678 <__ssvfscanf_r+0xa6c>
    9742:	f8db 2004 	ldr.w	r2, [fp, #4]
    9746:	e00f      	b.n	9768 <__ssvfscanf_r+0xb5c>
    9748:	f8db 3000 	ldr.w	r3, [fp]
    974c:	781a      	ldrb	r2, [r3, #0]
    974e:	5cb2      	ldrb	r2, [r6, r2]
    9750:	0711      	lsls	r1, r2, #28
    9752:	f103 0301 	add.w	r3, r3, #1
    9756:	f57f aa80 	bpl.w	8c5a <__ssvfscanf_r+0x4e>
    975a:	f8db 2004 	ldr.w	r2, [fp, #4]
    975e:	3a01      	subs	r2, #1
    9760:	e9cb 3200 	strd	r3, r2, [fp]
    9764:	f10a 0a01 	add.w	sl, sl, #1
    9768:	2a00      	cmp	r2, #0
    976a:	dced      	bgt.n	9748 <__ssvfscanf_r+0xb3c>
    976c:	4659      	mov	r1, fp
    976e:	4648      	mov	r0, r9
    9770:	f002 fc66 	bl	c040 <__ssrefill_r>
    9774:	2800      	cmp	r0, #0
    9776:	d0e7      	beq.n	9748 <__ssvfscanf_r+0xb3c>
    9778:	f7ff ba6f 	b.w	8c5a <__ssvfscanf_r+0x4e>
    977c:	06e1      	lsls	r1, r4, #27
    977e:	f100 8349 	bmi.w	9e14 <__ssvfscanf_r+0x1208>
    9782:	f014 0480 	ands.w	r4, r4, #128	; 0x80
    9786:	f000 83ab 	beq.w	9ee0 <__ssvfscanf_r+0x12d4>
    978a:	6b3c      	ldr	r4, [r7, #48]	; 0x30
    978c:	f854 6b04 	ldr.w	r6, [r4], #4
    9790:	64be      	str	r6, [r7, #72]	; 0x48
    9792:	2e00      	cmp	r6, #0
    9794:	f43f ab2f 	beq.w	8df6 <__ssvfscanf_r+0x1ea>
    9798:	2020      	movs	r0, #32
    979a:	f7f9 ff4d 	bl	3638 <malloc>
    979e:	4605      	mov	r5, r0
    97a0:	2800      	cmp	r0, #0
    97a2:	f000 8462 	beq.w	a06a <__ssvfscanf_r+0x145e>
    97a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    97a8:	6030      	str	r0, [r6, #0]
    97aa:	8893      	ldrh	r3, [r2, #4]
    97ac:	88d6      	ldrh	r6, [r2, #6]
    97ae:	429e      	cmp	r6, r3
    97b0:	f080 82a8 	bcs.w	9d04 <__ssvfscanf_r+0x10f8>
    97b4:	6810      	ldr	r0, [r2, #0]
    97b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    97b8:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
    97bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    97be:	633c      	str	r4, [r7, #48]	; 0x30
    97c0:	3601      	adds	r6, #1
    97c2:	80de      	strh	r6, [r3, #6]
    97c4:	2320      	movs	r3, #32
    97c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    97c8:	f8db 2000 	ldr.w	r2, [fp]
    97cc:	4e20      	ldr	r6, [pc, #128]	; (9850 <__ssvfscanf_r+0xc44>)
    97ce:	7811      	ldrb	r1, [r2, #0]
    97d0:	5c71      	ldrb	r1, [r6, r1]
    97d2:	0708      	lsls	r0, r1, #28
    97d4:	f100 82ac 	bmi.w	9d30 <__ssvfscanf_r+0x1124>
    97d8:	4633      	mov	r3, r6
    97da:	462c      	mov	r4, r5
    97dc:	4610      	mov	r0, r2
    97de:	462e      	mov	r6, r5
    97e0:	f8db 1004 	ldr.w	r1, [fp, #4]
    97e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
    97e6:	3901      	subs	r1, #1
    97e8:	f8cb 1004 	str.w	r1, [fp, #4]
    97ec:	1c41      	adds	r1, r0, #1
    97ee:	f8cb 1000 	str.w	r1, [fp]
    97f2:	4635      	mov	r5, r6
    97f4:	7801      	ldrb	r1, [r0, #0]
    97f6:	f805 1b01 	strb.w	r1, [r5], #1
    97fa:	b122      	cbz	r2, 9806 <__ssvfscanf_r+0xbfa>
    97fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    97fe:	1b2e      	subs	r6, r5, r4
    9800:	4296      	cmp	r6, r2
    9802:	f080 837a 	bcs.w	9efa <__ssvfscanf_r+0x12ee>
    9806:	f1b8 0801 	subs.w	r8, r8, #1
    980a:	d00b      	beq.n	9824 <__ssvfscanf_r+0xc18>
    980c:	f8db 1004 	ldr.w	r1, [fp, #4]
    9810:	2900      	cmp	r1, #0
    9812:	462e      	mov	r6, r5
    9814:	f340 83ae 	ble.w	9f74 <__ssvfscanf_r+0x1368>
    9818:	f8db 0000 	ldr.w	r0, [fp]
    981c:	7801      	ldrb	r1, [r0, #0]
    981e:	5c59      	ldrb	r1, [r3, r1]
    9820:	0709      	lsls	r1, r1, #28
    9822:	d5dd      	bpl.n	97e0 <__ssvfscanf_r+0xbd4>
    9824:	1b29      	subs	r1, r5, r4
    9826:	448a      	add	sl, r1
    9828:	3101      	adds	r1, #1
    982a:	f04f 0300 	mov.w	r3, #0
    982e:	702b      	strb	r3, [r5, #0]
    9830:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    9832:	b11b      	cbz	r3, 983c <__ssvfscanf_r+0xc30>
    9834:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9836:	428b      	cmp	r3, r1
    9838:	f200 8394 	bhi.w	9f64 <__ssvfscanf_r+0x1358>
    983c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    983e:	3301      	adds	r3, #1
    9840:	647b      	str	r3, [r7, #68]	; 0x44
    9842:	f7ff ba0a 	b.w	8c5a <__ssvfscanf_r+0x4e>
    9846:	2300      	movs	r3, #0
    9848:	63fb      	str	r3, [r7, #60]	; 0x3c
    984a:	e461      	b.n	9110 <__ssvfscanf_r+0x504>
    984c:	20002274 	.word	0x20002274
    9850:	20000645 	.word	0x20000645
    9854:	0000b905 	.word	0x0000b905
    9858:	00004f81 	.word	0x00004f81
    985c:	06e6      	lsls	r6, r4, #27
    985e:	f100 8181 	bmi.w	9b64 <__ssvfscanf_r+0xf58>
    9862:	f014 0480 	ands.w	r4, r4, #128	; 0x80
    9866:	f000 836d 	beq.w	9f44 <__ssvfscanf_r+0x1338>
    986a:	6b3c      	ldr	r4, [r7, #48]	; 0x30
    986c:	f854 6b04 	ldr.w	r6, [r4], #4
    9870:	64be      	str	r6, [r7, #72]	; 0x48
    9872:	2e00      	cmp	r6, #0
    9874:	f43f aabf 	beq.w	8df6 <__ssvfscanf_r+0x1ea>
    9878:	2020      	movs	r0, #32
    987a:	f7f9 fedd 	bl	3638 <malloc>
    987e:	4605      	mov	r5, r0
    9880:	2800      	cmp	r0, #0
    9882:	f000 83f2 	beq.w	a06a <__ssvfscanf_r+0x145e>
    9886:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    9888:	6030      	str	r0, [r6, #0]
    988a:	8893      	ldrh	r3, [r2, #4]
    988c:	88d6      	ldrh	r6, [r2, #6]
    988e:	429e      	cmp	r6, r3
    9890:	f080 827a 	bcs.w	9d88 <__ssvfscanf_r+0x117c>
    9894:	6810      	ldr	r0, [r2, #0]
    9896:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    9898:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
    989c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    989e:	633c      	str	r4, [r7, #48]	; 0x30
    98a0:	3601      	adds	r6, #1
    98a2:	80de      	strh	r6, [r3, #6]
    98a4:	2420      	movs	r4, #32
    98a6:	f8db 2000 	ldr.w	r2, [fp]
    98aa:	f107 0370 	add.w	r3, r7, #112	; 0x70
    98ae:	4619      	mov	r1, r3
    98b0:	7813      	ldrb	r3, [r2, #0]
    98b2:	5ccb      	ldrb	r3, [r1, r3]
    98b4:	2b00      	cmp	r3, #0
    98b6:	f43f aa9e 	beq.w	8df6 <__ssvfscanf_r+0x1ea>
    98ba:	ee08 9a10 	vmov	s16, r9
    98be:	f8d7 9048 	ldr.w	r9, [r7, #72]	; 0x48
    98c2:	f8c7 a03c 	str.w	sl, [r7, #60]	; 0x3c
    98c6:	462e      	mov	r6, r5
    98c8:	46a2      	mov	sl, r4
    98ca:	4610      	mov	r0, r2
    98cc:	460c      	mov	r4, r1
    98ce:	f8db 1004 	ldr.w	r1, [fp, #4]
    98d2:	1c43      	adds	r3, r0, #1
    98d4:	3901      	subs	r1, #1
    98d6:	e9cb 3100 	strd	r3, r1, [fp]
    98da:	4629      	mov	r1, r5
    98dc:	7800      	ldrb	r0, [r0, #0]
    98de:	f801 0b01 	strb.w	r0, [r1], #1
    98e2:	f1b9 0f00 	cmp.w	r9, #0
    98e6:	d002      	beq.n	98ee <__ssvfscanf_r+0xce2>
    98e8:	1b8d      	subs	r5, r1, r6
    98ea:	4555      	cmp	r5, sl
    98ec:	d27a      	bcs.n	99e4 <__ssvfscanf_r+0xdd8>
    98ee:	460d      	mov	r5, r1
    98f0:	f1b8 0801 	subs.w	r8, r8, #1
    98f4:	d00a      	beq.n	990c <__ssvfscanf_r+0xd00>
    98f6:	f8db 1004 	ldr.w	r1, [fp, #4]
    98fa:	2900      	cmp	r1, #0
    98fc:	f340 816a 	ble.w	9bd4 <__ssvfscanf_r+0xfc8>
    9900:	f8db 0000 	ldr.w	r0, [fp]
    9904:	7801      	ldrb	r1, [r0, #0]
    9906:	5c61      	ldrb	r1, [r4, r1]
    9908:	2900      	cmp	r1, #0
    990a:	d1e0      	bne.n	98ce <__ssvfscanf_r+0xcc2>
    990c:	4654      	mov	r4, sl
    990e:	ee18 9a10 	vmov	r9, s16
    9912:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
    9916:	1bae      	subs	r6, r5, r6
    9918:	f43f aa6d 	beq.w	8df6 <__ssvfscanf_r+0x1ea>
    991c:	f04f 0300 	mov.w	r3, #0
    9920:	702b      	strb	r3, [r5, #0]
    9922:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    9924:	b11b      	cbz	r3, 992e <__ssvfscanf_r+0xd22>
    9926:	1c71      	adds	r1, r6, #1
    9928:	428c      	cmp	r4, r1
    992a:	f200 832d 	bhi.w	9f88 <__ssvfscanf_r+0x137c>
    992e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    9930:	3301      	adds	r3, #1
    9932:	44b2      	add	sl, r6
    9934:	647b      	str	r3, [r7, #68]	; 0x44
    9936:	f7ff b990 	b.w	8c5a <__ssvfscanf_r+0x4e>
    993a:	2300      	movs	r3, #0
    993c:	613b      	str	r3, [r7, #16]
    993e:	f7ff baa9 	b.w	8e94 <__ssvfscanf_r+0x288>
    9942:	f014 0f8f 	tst.w	r4, #143	; 0x8f
    9946:	f47f aa56 	bne.w	8df6 <__ssvfscanf_r+0x1ea>
    994a:	eb08 0888 	add.w	r8, r8, r8, lsl #2
    994e:	eb02 0848 	add.w	r8, r2, r8, lsl #1
    9952:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
    9956:	f7ff ba67 	b.w	8e28 <__ssvfscanf_r+0x21c>
    995a:	64f9      	str	r1, [r7, #76]	; 0x4c
    995c:	2504      	movs	r5, #4
    995e:	f7ff ba71 	b.w	8e44 <__ssvfscanf_r+0x238>
    9962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9964:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    9966:	185b      	adds	r3, r3, r1
    9968:	f47f ae44 	bne.w	95f4 <__ssvfscanf_r+0x9e8>
    996c:	e5be      	b.n	94ec <__ssvfscanf_r+0x8e0>
    996e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    9970:	2b03      	cmp	r3, #3
    9972:	d002      	beq.n	997a <__ssvfscanf_r+0xd6e>
    9974:	2b05      	cmp	r3, #5
    9976:	f47f ab67 	bne.w	9048 <__ssvfscanf_r+0x43c>
    997a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    997c:	3301      	adds	r3, #1
    997e:	b2db      	uxtb	r3, r3
    9980:	64bb      	str	r3, [r7, #72]	; 0x48
    9982:	f7ff bb4c 	b.w	901e <__ssvfscanf_r+0x412>
    9986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9988:	2b00      	cmp	r3, #0
    998a:	f47f ae01 	bne.w	9590 <__ssvfscanf_r+0x984>
    998e:	f404 63e0 	and.w	r3, r4, #1792	; 0x700
    9992:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
    9996:	f47f adfb 	bne.w	9590 <__ssvfscanf_r+0x984>
    999a:	2301      	movs	r3, #1
    999c:	f424 64f0 	bic.w	r4, r4, #1920	; 0x780
    99a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    99a2:	f7ff bb3c 	b.w	901e <__ssvfscanf_r+0x412>
    99a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    99a8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    99aa:	185b      	adds	r3, r3, r1
    99ac:	f47f ae02 	bne.w	95b4 <__ssvfscanf_r+0x9a8>
    99b0:	e59c      	b.n	94ec <__ssvfscanf_r+0x8e0>
    99b2:	1c83      	adds	r3, r0, #2
    99b4:	f040 845b 	bne.w	a26e <__ssvfscanf_r+0x1662>
    99b8:	f8db 3004 	ldr.w	r3, [fp, #4]
    99bc:	6cbd      	ldr	r5, [r7, #72]	; 0x48
    99be:	2b00      	cmp	r3, #0
    99c0:	f73f ad00 	bgt.w	93c4 <__ssvfscanf_r+0x7b8>
    99c4:	4659      	mov	r1, fp
    99c6:	4648      	mov	r0, r9
    99c8:	f002 fb3a 	bl	c040 <__ssrefill_r>
    99cc:	2800      	cmp	r0, #0
    99ce:	f43f ad63 	beq.w	9498 <__ssvfscanf_r+0x88c>
    99d2:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
    99d6:	627e      	str	r6, [r7, #36]	; 0x24
    99d8:	4644      	mov	r4, r8
    99da:	2d00      	cmp	r5, #0
    99dc:	f43f ad63 	beq.w	94a6 <__ssvfscanf_r+0x89a>
    99e0:	f7ff ba00 	b.w	8de4 <__ssvfscanf_r+0x1d8>
    99e4:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
    99e8:	4630      	mov	r0, r6
    99ea:	4651      	mov	r1, sl
    99ec:	f7fa f8f0 	bl	3bd0 <realloc>
    99f0:	4606      	mov	r6, r0
    99f2:	2800      	cmp	r0, #0
    99f4:	f000 8339 	beq.w	a06a <__ssvfscanf_r+0x145e>
    99f8:	4405      	add	r5, r0
    99fa:	f8c9 0000 	str.w	r0, [r9]
    99fe:	e777      	b.n	98f0 <__ssvfscanf_r+0xce4>
    9a00:	f444 7400 	orr.w	r4, r4, #512	; 0x200
    9a04:	4bbc      	ldr	r3, [pc, #752]	; (9cf8 <__ssvfscanf_r+0x10ec>)
    9a06:	62fb      	str	r3, [r7, #44]	; 0x2c
    9a08:	2310      	movs	r3, #16
    9a0a:	64f9      	str	r1, [r7, #76]	; 0x4c
    9a0c:	63bb      	str	r3, [r7, #56]	; 0x38
    9a0e:	2503      	movs	r5, #3
    9a10:	f7ff ba18 	b.w	8e44 <__ssvfscanf_r+0x238>
    9a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9a16:	3301      	adds	r3, #1
    9a18:	637b      	str	r3, [r7, #52]	; 0x34
    9a1a:	693b      	ldr	r3, [r7, #16]
    9a1c:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    9a20:	2b00      	cmp	r3, #0
    9a22:	f43f aafe 	beq.w	9022 <__ssvfscanf_r+0x416>
    9a26:	693b      	ldr	r3, [r7, #16]
    9a28:	3b01      	subs	r3, #1
    9a2a:	613b      	str	r3, [r7, #16]
    9a2c:	f7ff bafa 	b.w	9024 <__ssvfscanf_r+0x418>
    9a30:	f424 64b0 	bic.w	r4, r4, #1408	; 0x580
    9a34:	f7ff bbd1 	b.w	91da <__ssvfscanf_r+0x5ce>
    9a38:	0722      	lsls	r2, r4, #28
    9a3a:	f140 81c7 	bpl.w	9dcc <__ssvfscanf_r+0x11c0>
    9a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    9a40:	f853 2b04 	ldr.w	r2, [r3], #4
    9a44:	633b      	str	r3, [r7, #48]	; 0x30
    9a46:	7010      	strb	r0, [r2, #0]
    9a48:	f7ff bbf3 	b.w	9232 <__ssvfscanf_r+0x626>
    9a4c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
    9a50:	465a      	mov	r2, fp
    9a52:	4648      	mov	r0, r9
    9a54:	3d01      	subs	r5, #1
    9a56:	f002 fab3 	bl	bfc0 <_sungetc_r>
    9a5a:	f7ff bbd5 	b.w	9208 <__ssvfscanf_r+0x5fc>
    9a5e:	69fb      	ldr	r3, [r7, #28]
    9a60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    9a62:	4293      	cmp	r3, r2
    9a64:	f43f ab2d 	beq.w	90c2 <__ssvfscanf_r+0x4b6>
    9a68:	1a9a      	subs	r2, r3, r2
    9a6a:	f207 23c3 	addw	r3, r7, #707	; 0x2c3
    9a6e:	429d      	cmp	r5, r3
    9a70:	bf28      	it	cs
    9a72:	f207 25c2 	addwcs	r5, r7, #706	; 0x2c2
    9a76:	49a1      	ldr	r1, [pc, #644]	; (9cfc <__ssvfscanf_r+0x10f0>)
    9a78:	4628      	mov	r0, r5
    9a7a:	f000 fe59 	bl	a730 <sprintf>
    9a7e:	f7ff bb20 	b.w	90c2 <__ssvfscanf_r+0x4b6>
    9a82:	06e2      	lsls	r2, r4, #27
    9a84:	f100 8131 	bmi.w	9cea <__ssvfscanf_r+0x10de>
    9a88:	0723      	lsls	r3, r4, #28
    9a8a:	f100 81ba 	bmi.w	9e02 <__ssvfscanf_r+0x11f6>
    9a8e:	0766      	lsls	r6, r4, #29
    9a90:	f140 82b4 	bpl.w	9ffc <__ssvfscanf_r+0x13f0>
    9a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    9a96:	64f9      	str	r1, [r7, #76]	; 0x4c
    9a98:	f853 2b04 	ldr.w	r2, [r3], #4
    9a9c:	633b      	str	r3, [r7, #48]	; 0x30
    9a9e:	f8a2 a000 	strh.w	sl, [r2]
    9aa2:	f7ff b8da 	b.w	8c5a <__ssvfscanf_r+0x4e>
    9aa6:	0723      	lsls	r3, r4, #28
    9aa8:	f47f a9a5 	bne.w	8df6 <__ssvfscanf_r+0x1ea>
    9aac:	7842      	ldrb	r2, [r0, #1]
    9aae:	2a68      	cmp	r2, #104	; 0x68
    9ab0:	f000 8186 	beq.w	9dc0 <__ssvfscanf_r+0x11b4>
    9ab4:	f044 0404 	orr.w	r4, r4, #4
    9ab8:	4608      	mov	r0, r1
    9aba:	f7ff b92f 	b.w	8d1c <__ssvfscanf_r+0x110>
    9abe:	4b8e      	ldr	r3, [pc, #568]	; (9cf8 <__ssvfscanf_r+0x10ec>)
    9ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
    9ac2:	230a      	movs	r3, #10
    9ac4:	64f9      	str	r1, [r7, #76]	; 0x4c
    9ac6:	63bb      	str	r3, [r7, #56]	; 0x38
    9ac8:	2503      	movs	r5, #3
    9aca:	f7ff b9bb 	b.w	8e44 <__ssvfscanf_r+0x238>
    9ace:	4b8c      	ldr	r3, [pc, #560]	; (9d00 <__ssvfscanf_r+0x10f4>)
    9ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
    9ad2:	2300      	movs	r3, #0
    9ad4:	64f9      	str	r1, [r7, #76]	; 0x4c
    9ad6:	63bb      	str	r3, [r7, #56]	; 0x38
    9ad8:	2503      	movs	r5, #3
    9ada:	f7ff b9b3 	b.w	8e44 <__ssvfscanf_r+0x238>
    9ade:	f444 7408 	orr.w	r4, r4, #544	; 0x220
    9ae2:	e78f      	b.n	9a04 <__ssvfscanf_r+0xdf8>
    9ae4:	f107 0070 	add.w	r0, r7, #112	; 0x70
    9ae8:	f000 fdde 	bl	a6a8 <__sccl>
    9aec:	f044 0440 	orr.w	r4, r4, #64	; 0x40
    9af0:	64f8      	str	r0, [r7, #76]	; 0x4c
    9af2:	2501      	movs	r5, #1
    9af4:	f7ff b9a6 	b.w	8e44 <__ssvfscanf_r+0x238>
    9af8:	0722      	lsls	r2, r4, #28
    9afa:	f47f a97c 	bne.w	8df6 <__ssvfscanf_r+0x1ea>
    9afe:	7842      	ldrb	r2, [r0, #1]
    9b00:	2a6c      	cmp	r2, #108	; 0x6c
    9b02:	f000 8157 	beq.w	9db4 <__ssvfscanf_r+0x11a8>
    9b06:	f044 0401 	orr.w	r4, r4, #1
    9b0a:	4608      	mov	r0, r1
    9b0c:	f7ff b906 	b.w	8d1c <__ssvfscanf_r+0x110>
    9b10:	f014 038f 	ands.w	r3, r4, #143	; 0x8f
    9b14:	f47f a96f 	bne.w	8df6 <__ssvfscanf_r+0x1ea>
    9b18:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    9b1a:	2a00      	cmp	r2, #0
    9b1c:	f000 81e7 	beq.w	9eee <__ssvfscanf_r+0x12e2>
    9b20:	7842      	ldrb	r2, [r0, #1]
    9b22:	f044 0480 	orr.w	r4, r4, #128	; 0x80
    9b26:	4608      	mov	r0, r1
    9b28:	f7ff b8f8 	b.w	8d1c <__ssvfscanf_r+0x110>
    9b2c:	ea58 0804 	orrs.w	r8, r8, r4
    9b30:	f47f a961 	bne.w	8df6 <__ssvfscanf_r+0x1ea>
    9b34:	7842      	ldrb	r2, [r0, #1]
    9b36:	2410      	movs	r4, #16
    9b38:	4608      	mov	r0, r1
    9b3a:	f7ff b8ef 	b.w	8d1c <__ssvfscanf_r+0x110>
    9b3e:	64f9      	str	r1, [r7, #76]	; 0x4c
    9b40:	f7ff b8a7 	b.w	8c92 <__ssvfscanf_r+0x86>
    9b44:	2300      	movs	r3, #0
    9b46:	623b      	str	r3, [r7, #32]
    9b48:	62bb      	str	r3, [r7, #40]	; 0x28
    9b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
    9b4c:	f107 0354 	add.w	r3, r7, #84	; 0x54
    9b50:	64bb      	str	r3, [r7, #72]	; 0x48
    9b52:	f7ff bba9 	b.w	92a8 <__ssvfscanf_r+0x69c>
    9b56:	2300      	movs	r3, #0
    9b58:	e9c7 3306 	strd	r3, r3, [r7, #24]
    9b5c:	623b      	str	r3, [r7, #32]
    9b5e:	f107 0454 	add.w	r4, r7, #84	; 0x54
    9b62:	e429      	b.n	93b8 <__ssvfscanf_r+0x7ac>
    9b64:	f8db 3000 	ldr.w	r3, [fp]
    9b68:	f107 0270 	add.w	r2, r7, #112	; 0x70
    9b6c:	4611      	mov	r1, r2
    9b6e:	781a      	ldrb	r2, [r3, #0]
    9b70:	5c8a      	ldrb	r2, [r1, r2]
    9b72:	2a00      	cmp	r2, #0
    9b74:	f43f a93f 	beq.w	8df6 <__ssvfscanf_r+0x1ea>
    9b78:	3301      	adds	r3, #1
    9b7a:	f8cb 3000 	str.w	r3, [fp]
    9b7e:	f8db 3004 	ldr.w	r3, [fp, #4]
    9b82:	f1b8 0f01 	cmp.w	r8, #1
    9b86:	f103 33ff 	add.w	r3, r3, #4294967295
    9b8a:	f8cb 3004 	str.w	r3, [fp, #4]
    9b8e:	bf18      	it	ne
    9b90:	460c      	movne	r4, r1
    9b92:	d114      	bne.n	9bbe <__ssvfscanf_r+0xfb2>
    9b94:	f7ff bb53 	b.w	923e <__ssvfscanf_r+0x632>
    9b98:	f8db 3000 	ldr.w	r3, [fp]
    9b9c:	781a      	ldrb	r2, [r3, #0]
    9b9e:	5ca2      	ldrb	r2, [r4, r2]
    9ba0:	3301      	adds	r3, #1
    9ba2:	2a00      	cmp	r2, #0
    9ba4:	f43f ab4b 	beq.w	923e <__ssvfscanf_r+0x632>
    9ba8:	f8cb 3000 	str.w	r3, [fp]
    9bac:	f8db 3004 	ldr.w	r3, [fp, #4]
    9bb0:	3501      	adds	r5, #1
    9bb2:	3b01      	subs	r3, #1
    9bb4:	4545      	cmp	r5, r8
    9bb6:	f8cb 3004 	str.w	r3, [fp, #4]
    9bba:	f43f ab40 	beq.w	923e <__ssvfscanf_r+0x632>
    9bbe:	2b00      	cmp	r3, #0
    9bc0:	dcea      	bgt.n	9b98 <__ssvfscanf_r+0xf8c>
    9bc2:	4659      	mov	r1, fp
    9bc4:	4648      	mov	r0, r9
    9bc6:	f002 fa3b 	bl	c040 <__ssrefill_r>
    9bca:	2800      	cmp	r0, #0
    9bcc:	d0e4      	beq.n	9b98 <__ssvfscanf_r+0xf8c>
    9bce:	44aa      	add	sl, r5
    9bd0:	f7ff b843 	b.w	8c5a <__ssvfscanf_r+0x4e>
    9bd4:	ee18 0a10 	vmov	r0, s16
    9bd8:	4659      	mov	r1, fp
    9bda:	f002 fa31 	bl	c040 <__ssrefill_r>
    9bde:	2800      	cmp	r0, #0
    9be0:	f43f ae8e 	beq.w	9900 <__ssvfscanf_r+0xcf4>
    9be4:	42b5      	cmp	r5, r6
    9be6:	4654      	mov	r4, sl
    9be8:	ee18 9a10 	vmov	r9, s16
    9bec:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
    9bf0:	f47f ae91 	bne.w	9916 <__ssvfscanf_r+0xd0a>
    9bf4:	f7ff b8f6 	b.w	8de4 <__ssvfscanf_r+0x1d8>
    9bf8:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
    9bfc:	e428      	b.n	9450 <__ssvfscanf_r+0x844>
    9bfe:	6823      	ldr	r3, [r4, #0]
    9c00:	2b04      	cmp	r3, #4
    9c02:	f47f ac32 	bne.w	946a <__ssvfscanf_r+0x85e>
    9c06:	e432      	b.n	946e <__ssvfscanf_r+0x862>
    9c08:	1c83      	adds	r3, r0, #2
    9c0a:	f040 8339 	bne.w	a280 <__ssvfscanf_r+0x1674>
    9c0e:	f8db 3004 	ldr.w	r3, [fp, #4]
    9c12:	2b00      	cmp	r3, #0
    9c14:	f340 81d7 	ble.w	9fc6 <__ssvfscanf_r+0x13ba>
    9c18:	f8db 3000 	ldr.w	r3, [fp]
    9c1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    9c1e:	781b      	ldrb	r3, [r3, #0]
    9c20:	5cd3      	ldrb	r3, [r2, r3]
    9c22:	0718      	lsls	r0, r3, #28
    9c24:	d403      	bmi.n	9c2e <__ssvfscanf_r+0x1022>
    9c26:	f1b8 0f00 	cmp.w	r8, #0
    9c2a:	f47f ab49 	bne.w	92c0 <__ssvfscanf_r+0x6b4>
    9c2e:	627c      	str	r4, [r7, #36]	; 0x24
    9c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9c32:	2b00      	cmp	r3, #0
    9c34:	f47f a811 	bne.w	8c5a <__ssvfscanf_r+0x4e>
    9c38:	6cba      	ldr	r2, [r7, #72]	; 0x48
    9c3a:	6013      	str	r3, [r2, #0]
    9c3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9c3e:	2b00      	cmp	r3, #0
    9c40:	f43f adfc 	beq.w	983c <__ssvfscanf_r+0xc30>
    9c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9c46:	1ad1      	subs	r1, r2, r3
    9c48:	108b      	asrs	r3, r1, #2
    9c4a:	6a3a      	ldr	r2, [r7, #32]
    9c4c:	3301      	adds	r3, #1
    9c4e:	429a      	cmp	r2, r3
    9c50:	f67f adf4 	bls.w	983c <__ssvfscanf_r+0xc30>
    9c54:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
    9c56:	3104      	adds	r1, #4
    9c58:	6820      	ldr	r0, [r4, #0]
    9c5a:	f7f9 ffb9 	bl	3bd0 <realloc>
    9c5e:	2800      	cmp	r0, #0
    9c60:	f47f ac3a 	bne.w	94d8 <__ssvfscanf_r+0x8cc>
    9c64:	e5ea      	b.n	983c <__ssvfscanf_r+0xc30>
    9c66:	f853 2b04 	ldr.w	r2, [r3], #4
    9c6a:	ed82 0b00 	vstr	d0, [r2]
    9c6e:	633b      	str	r3, [r7, #48]	; 0x30
    9c70:	e5e4      	b.n	983c <__ssvfscanf_r+0xc30>
    9c72:	68fd      	ldr	r5, [r7, #12]
    9c74:	6a39      	ldr	r1, [r7, #32]
    9c76:	687e      	ldr	r6, [r7, #4]
    9c78:	4628      	mov	r0, r5
    9c7a:	4642      	mov	r2, r8
    9c7c:	46a3      	mov	fp, r4
    9c7e:	68bc      	ldr	r4, [r7, #8]
    9c80:	f000 fd76 	bl	a770 <stpncpy>
    9c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9c86:	61fb      	str	r3, [r7, #28]
    9c88:	f424 7420 	bic.w	r4, r4, #640	; 0x280
    9c8c:	3e01      	subs	r6, #1
    9c8e:	4605      	mov	r5, r0
    9c90:	f7ff b9c8 	b.w	9024 <__ssvfscanf_r+0x418>
    9c94:	69f8      	ldr	r0, [r7, #28]
    9c96:	00d9      	lsls	r1, r3, #3
    9c98:	461d      	mov	r5, r3
    9c9a:	f7f9 ff99 	bl	3bd0 <realloc>
    9c9e:	61f8      	str	r0, [r7, #28]
    9ca0:	2800      	cmp	r0, #0
    9ca2:	f000 8264 	beq.w	a16e <__ssvfscanf_r+0x1562>
    9ca6:	6a3a      	ldr	r2, [r7, #32]
    9ca8:	006b      	lsls	r3, r5, #1
    9caa:	eb00 0804 	add.w	r8, r0, r4
    9cae:	6010      	str	r0, [r2, #0]
    9cb0:	61bb      	str	r3, [r7, #24]
    9cb2:	f7ff bbea 	b.w	948a <__ssvfscanf_r+0x87e>
    9cb6:	2e02      	cmp	r6, #2
    9cb8:	f240 82c4 	bls.w	a244 <__ssvfscanf_r+0x1638>
    9cbc:	2e03      	cmp	r6, #3
    9cbe:	f43f a9d3 	beq.w	9068 <__ssvfscanf_r+0x45c>
    9cc2:	3e04      	subs	r6, #4
    9cc4:	fa5f f886 	uxtb.w	r8, r6
    9cc8:	ea6f 0308 	mvn.w	r3, r8
    9ccc:	18ee      	adds	r6, r5, r3
    9cce:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
    9cd2:	465a      	mov	r2, fp
    9cd4:	4648      	mov	r0, r9
    9cd6:	f002 f973 	bl	bfc0 <_sungetc_r>
    9cda:	42ae      	cmp	r6, r5
    9cdc:	d1f7      	bne.n	9cce <__ssvfscanf_r+0x10c2>
    9cde:	f10a 3aff 	add.w	sl, sl, #4294967295
    9ce2:	ebaa 0a08 	sub.w	sl, sl, r8
    9ce6:	f7ff b9bf 	b.w	9068 <__ssvfscanf_r+0x45c>
    9cea:	64f9      	str	r1, [r7, #76]	; 0x4c
    9cec:	f7fe bfb5 	b.w	8c5a <__ssvfscanf_r+0x4e>
    9cf0:	2303      	movs	r3, #3
    9cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
    9cf4:	f7ff b993 	b.w	901e <__ssvfscanf_r+0x412>
    9cf8:	0000b905 	.word	0x0000b905
    9cfc:	2000063c 	.word	0x2000063c
    9d00:	00004f81 	.word	0x00004f81
    9d04:	f64f 72f6 	movw	r2, #65526	; 0xfff6
    9d08:	4293      	cmp	r3, r2
    9d0a:	f200 8297 	bhi.w	a23c <__ssvfscanf_r+0x1630>
    9d0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    9d10:	3308      	adds	r3, #8
    9d12:	b29b      	uxth	r3, r3
    9d14:	6810      	ldr	r0, [r2, #0]
    9d16:	63f8      	str	r0, [r7, #60]	; 0x3c
    9d18:	0099      	lsls	r1, r3, #2
    9d1a:	637b      	str	r3, [r7, #52]	; 0x34
    9d1c:	f7f9 ff58 	bl	3bd0 <realloc>
    9d20:	2800      	cmp	r0, #0
    9d22:	f000 827b 	beq.w	a21c <__ssvfscanf_r+0x1610>
    9d26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    9d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9d2a:	8093      	strh	r3, [r2, #4]
    9d2c:	6010      	str	r0, [r2, #0]
    9d2e:	e542      	b.n	97b6 <__ssvfscanf_r+0xbaa>
    9d30:	2101      	movs	r1, #1
    9d32:	e57a      	b.n	982a <__ssvfscanf_r+0xc1e>
    9d34:	f64f 72f6 	movw	r2, #65526	; 0xfff6
    9d38:	4293      	cmp	r3, r2
    9d3a:	f200 8293 	bhi.w	a264 <__ssvfscanf_r+0x1658>
    9d3e:	3308      	adds	r3, #8
    9d40:	b29e      	uxth	r6, r3
    9d42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    9d44:	00b1      	lsls	r1, r6, #2
    9d46:	6818      	ldr	r0, [r3, #0]
    9d48:	f7f9 ff42 	bl	3bd0 <realloc>
    9d4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    9d4e:	2800      	cmp	r0, #0
    9d50:	f000 823e 	beq.w	a1d0 <__ssvfscanf_r+0x15c4>
    9d54:	809e      	strh	r6, [r3, #4]
    9d56:	6018      	str	r0, [r3, #0]
    9d58:	f7ff ba9b 	b.w	9292 <__ssvfscanf_r+0x686>
    9d5c:	f64f 72f6 	movw	r2, #65526	; 0xfff6
    9d60:	4293      	cmp	r3, r2
    9d62:	f200 827f 	bhi.w	a264 <__ssvfscanf_r+0x1658>
    9d66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    9d68:	3308      	adds	r3, #8
    9d6a:	b29b      	uxth	r3, r3
    9d6c:	0099      	lsls	r1, r3, #2
    9d6e:	6810      	ldr	r0, [r2, #0]
    9d70:	64bb      	str	r3, [r7, #72]	; 0x48
    9d72:	f7f9 ff2d 	bl	3bd0 <realloc>
    9d76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    9d78:	2800      	cmp	r0, #0
    9d7a:	f000 8228 	beq.w	a1ce <__ssvfscanf_r+0x15c2>
    9d7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    9d80:	8093      	strh	r3, [r2, #4]
    9d82:	6010      	str	r0, [r2, #0]
    9d84:	f7ff bb0e 	b.w	93a4 <__ssvfscanf_r+0x798>
    9d88:	f64f 72f6 	movw	r2, #65526	; 0xfff6
    9d8c:	4293      	cmp	r3, r2
    9d8e:	f200 8255 	bhi.w	a23c <__ssvfscanf_r+0x1630>
    9d92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    9d94:	3308      	adds	r3, #8
    9d96:	b29b      	uxth	r3, r3
    9d98:	6810      	ldr	r0, [r2, #0]
    9d9a:	63f8      	str	r0, [r7, #60]	; 0x3c
    9d9c:	0099      	lsls	r1, r3, #2
    9d9e:	637b      	str	r3, [r7, #52]	; 0x34
    9da0:	f7f9 ff16 	bl	3bd0 <realloc>
    9da4:	2800      	cmp	r0, #0
    9da6:	f000 8239 	beq.w	a21c <__ssvfscanf_r+0x1610>
    9daa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    9dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9dae:	8093      	strh	r3, [r2, #4]
    9db0:	6010      	str	r0, [r2, #0]
    9db2:	e570      	b.n	9896 <__ssvfscanf_r+0xc8a>
    9db4:	7882      	ldrb	r2, [r0, #2]
    9db6:	f044 0402 	orr.w	r4, r4, #2
    9dba:	3002      	adds	r0, #2
    9dbc:	f7fe bfae 	b.w	8d1c <__ssvfscanf_r+0x110>
    9dc0:	7882      	ldrb	r2, [r0, #2]
    9dc2:	f044 0408 	orr.w	r4, r4, #8
    9dc6:	3002      	adds	r0, #2
    9dc8:	f7fe bfa8 	b.w	8d1c <__ssvfscanf_r+0x110>
    9dcc:	0763      	lsls	r3, r4, #29
    9dce:	d458      	bmi.n	9e82 <__ssvfscanf_r+0x1276>
    9dd0:	f014 0201 	ands.w	r2, r4, #1
    9dd4:	f47f aa28 	bne.w	9228 <__ssvfscanf_r+0x61c>
    9dd8:	07a6      	lsls	r6, r4, #30
    9dda:	f57f aa25 	bpl.w	9228 <__ssvfscanf_r+0x61c>
    9dde:	4bb3      	ldr	r3, [pc, #716]	; (a0ac <__ssvfscanf_r+0x14a0>)
    9de0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    9de2:	4299      	cmp	r1, r3
    9de4:	4648      	mov	r0, r9
    9de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    9de8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    9dea:	f000 823d 	beq.w	a268 <__ssvfscanf_r+0x165c>
    9dee:	f001 fe41 	bl	ba74 <_strtoll_r>
    9df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    9df4:	f853 2b04 	ldr.w	r2, [r3], #4
    9df8:	633b      	str	r3, [r7, #48]	; 0x30
    9dfa:	e9c2 0100 	strd	r0, r1, [r2]
    9dfe:	f7ff ba18 	b.w	9232 <__ssvfscanf_r+0x626>
    9e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    9e04:	64f9      	str	r1, [r7, #76]	; 0x4c
    9e06:	f853 2b04 	ldr.w	r2, [r3], #4
    9e0a:	633b      	str	r3, [r7, #48]	; 0x30
    9e0c:	f882 a000 	strb.w	sl, [r2]
    9e10:	f7fe bf23 	b.w	8c5a <__ssvfscanf_r+0x4e>
    9e14:	f8db 3000 	ldr.w	r3, [fp]
    9e18:	4ea5      	ldr	r6, [pc, #660]	; (a0b0 <__ssvfscanf_r+0x14a4>)
    9e1a:	781a      	ldrb	r2, [r3, #0]
    9e1c:	5cb2      	ldrb	r2, [r6, r2]
    9e1e:	0712      	lsls	r2, r2, #28
    9e20:	f53e af1b 	bmi.w	8c5a <__ssvfscanf_r+0x4e>
    9e24:	3301      	adds	r3, #1
    9e26:	f8cb 3000 	str.w	r3, [fp]
    9e2a:	f8db 3004 	ldr.w	r3, [fp, #4]
    9e2e:	f1b8 0f01 	cmp.w	r8, #1
    9e32:	f103 33ff 	add.w	r3, r3, #4294967295
    9e36:	f8cb 3004 	str.w	r3, [fp, #4]
    9e3a:	bf08      	it	eq
    9e3c:	f10a 0a01 	addeq.w	sl, sl, #1
    9e40:	f43e af0b 	beq.w	8c5a <__ssvfscanf_r+0x4e>
    9e44:	2401      	movs	r4, #1
    9e46:	e011      	b.n	9e6c <__ssvfscanf_r+0x1260>
    9e48:	f8db 3000 	ldr.w	r3, [fp]
    9e4c:	781a      	ldrb	r2, [r3, #0]
    9e4e:	5cb2      	ldrb	r2, [r6, r2]
    9e50:	0715      	lsls	r5, r2, #28
    9e52:	f103 0301 	add.w	r3, r3, #1
    9e56:	d411      	bmi.n	9e7c <__ssvfscanf_r+0x1270>
    9e58:	f8cb 3000 	str.w	r3, [fp]
    9e5c:	f8db 3004 	ldr.w	r3, [fp, #4]
    9e60:	3401      	adds	r4, #1
    9e62:	3b01      	subs	r3, #1
    9e64:	4544      	cmp	r4, r8
    9e66:	f8cb 3004 	str.w	r3, [fp, #4]
    9e6a:	d007      	beq.n	9e7c <__ssvfscanf_r+0x1270>
    9e6c:	2b00      	cmp	r3, #0
    9e6e:	dceb      	bgt.n	9e48 <__ssvfscanf_r+0x123c>
    9e70:	4659      	mov	r1, fp
    9e72:	4648      	mov	r0, r9
    9e74:	f002 f8e4 	bl	c040 <__ssrefill_r>
    9e78:	2800      	cmp	r0, #0
    9e7a:	d0e5      	beq.n	9e48 <__ssvfscanf_r+0x123c>
    9e7c:	44a2      	add	sl, r4
    9e7e:	f7fe beec 	b.w	8c5a <__ssvfscanf_r+0x4e>
    9e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    9e84:	f853 2b04 	ldr.w	r2, [r3], #4
    9e88:	633b      	str	r3, [r7, #48]	; 0x30
    9e8a:	8010      	strh	r0, [r2, #0]
    9e8c:	f7ff b9d1 	b.w	9232 <__ssvfscanf_r+0x626>
    9e90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    9e92:	2b00      	cmp	r3, #0
    9e94:	f000 816e 	beq.w	a174 <__ssvfscanf_r+0x1568>
    9e98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    9e9a:	f8d3 8000 	ldr.w	r8, [r3]
    9e9e:	88de      	ldrh	r6, [r3, #6]
    9ea0:	b176      	cbz	r6, 9ec0 <__ssvfscanf_r+0x12b4>
    9ea2:	2400      	movs	r4, #0
    9ea4:	f1a8 0504 	sub.w	r5, r8, #4
    9ea8:	46a1      	mov	r9, r4
    9eaa:	f855 3f04 	ldr.w	r3, [r5, #4]!
    9eae:	6818      	ldr	r0, [r3, #0]
    9eb0:	f7f9 fbca 	bl	3648 <free>
    9eb4:	3401      	adds	r4, #1
    9eb6:	682b      	ldr	r3, [r5, #0]
    9eb8:	42a6      	cmp	r6, r4
    9eba:	f8c3 9000 	str.w	r9, [r3]
    9ebe:	d1f4      	bne.n	9eaa <__ssvfscanf_r+0x129e>
    9ec0:	f04f 33ff 	mov.w	r3, #4294967295
    9ec4:	647b      	str	r3, [r7, #68]	; 0x44
    9ec6:	f1b8 0f00 	cmp.w	r8, #0
    9eca:	f47e af9c 	bne.w	8e06 <__ssvfscanf_r+0x1fa>
    9ece:	f7fe bf9d 	b.w	8e0c <__ssvfscanf_r+0x200>
    9ed2:	4878      	ldr	r0, [pc, #480]	; (a0b4 <__ssvfscanf_r+0x14a8>)
    9ed4:	633b      	str	r3, [r7, #48]	; 0x30
    9ed6:	f7fb fe2b 	bl	5b30 <nanf>
    9eda:	ed84 0a00 	vstr	s0, [r4]
    9ede:	e4ad      	b.n	983c <__ssvfscanf_r+0xc30>
    9ee0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    9ee2:	63fc      	str	r4, [r7, #60]	; 0x3c
    9ee4:	f852 5b04 	ldr.w	r5, [r2], #4
    9ee8:	633a      	str	r2, [r7, #48]	; 0x30
    9eea:	64bc      	str	r4, [r7, #72]	; 0x48
    9eec:	e46c      	b.n	97c8 <__ssvfscanf_r+0xbbc>
    9eee:	b082      	sub	sp, #8
    9ef0:	e9cd 3302 	strd	r3, r3, [sp, #8]
    9ef4:	ab02      	add	r3, sp, #8
    9ef6:	643b      	str	r3, [r7, #64]	; 0x40
    9ef8:	e612      	b.n	9b20 <__ssvfscanf_r+0xf14>
    9efa:	637b      	str	r3, [r7, #52]	; 0x34
    9efc:	0053      	lsls	r3, r2, #1
    9efe:	4620      	mov	r0, r4
    9f00:	4619      	mov	r1, r3
    9f02:	63fb      	str	r3, [r7, #60]	; 0x3c
    9f04:	f7f9 fe64 	bl	3bd0 <realloc>
    9f08:	4604      	mov	r4, r0
    9f0a:	2800      	cmp	r0, #0
    9f0c:	f000 80ad 	beq.w	a06a <__ssvfscanf_r+0x145e>
    9f10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    9f12:	1985      	adds	r5, r0, r6
    9f14:	6018      	str	r0, [r3, #0]
    9f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9f18:	e475      	b.n	9806 <__ssvfscanf_r+0xbfa>
    9f1a:	697d      	ldr	r5, [r7, #20]
    9f1c:	4629      	mov	r1, r5
    9f1e:	230a      	movs	r3, #10
    9f20:	3101      	adds	r1, #1
    9f22:	4648      	mov	r0, r9
    9f24:	f7fb f82c 	bl	4f80 <_strtol_r>
    9f28:	69bb      	ldr	r3, [r7, #24]
    9f2a:	1ac2      	subs	r2, r0, r3
    9f2c:	e59d      	b.n	9a6a <__ssvfscanf_r+0xe5e>
    9f2e:	e9d7 320c 	ldrd	r3, r2, [r7, #48]	; 0x30
    9f32:	f853 1b04 	ldr.w	r1, [r3], #4
    9f36:	623a      	str	r2, [r7, #32]
    9f38:	64b9      	str	r1, [r7, #72]	; 0x48
    9f3a:	633b      	str	r3, [r7, #48]	; 0x30
    9f3c:	62ba      	str	r2, [r7, #40]	; 0x28
    9f3e:	63fa      	str	r2, [r7, #60]	; 0x3c
    9f40:	f7ff b9b2 	b.w	92a8 <__ssvfscanf_r+0x69c>
    9f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    9f46:	64bc      	str	r4, [r7, #72]	; 0x48
    9f48:	f853 5b04 	ldr.w	r5, [r3], #4
    9f4c:	633b      	str	r3, [r7, #48]	; 0x30
    9f4e:	e4aa      	b.n	98a6 <__ssvfscanf_r+0xc9a>
    9f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    9f52:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9f54:	f853 4b04 	ldr.w	r4, [r3], #4
    9f58:	61ba      	str	r2, [r7, #24]
    9f5a:	e9c7 2207 	strd	r2, r2, [r7, #28]
    9f5e:	633b      	str	r3, [r7, #48]	; 0x30
    9f60:	f7ff ba2a 	b.w	93b8 <__ssvfscanf_r+0x7ac>
    9f64:	6cbc      	ldr	r4, [r7, #72]	; 0x48
    9f66:	6820      	ldr	r0, [r4, #0]
    9f68:	f7f9 fe32 	bl	3bd0 <realloc>
    9f6c:	2800      	cmp	r0, #0
    9f6e:	f47f aab3 	bne.w	94d8 <__ssvfscanf_r+0x8cc>
    9f72:	e463      	b.n	983c <__ssvfscanf_r+0xc30>
    9f74:	4659      	mov	r1, fp
    9f76:	4648      	mov	r0, r9
    9f78:	637b      	str	r3, [r7, #52]	; 0x34
    9f7a:	f002 f861 	bl	c040 <__ssrefill_r>
    9f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9f80:	2800      	cmp	r0, #0
    9f82:	f43f ac49 	beq.w	9818 <__ssvfscanf_r+0xc0c>
    9f86:	e44d      	b.n	9824 <__ssvfscanf_r+0xc18>
    9f88:	6818      	ldr	r0, [r3, #0]
    9f8a:	461c      	mov	r4, r3
    9f8c:	f7f9 fe20 	bl	3bd0 <realloc>
    9f90:	2800      	cmp	r0, #0
    9f92:	f43f accc 	beq.w	992e <__ssvfscanf_r+0xd22>
    9f96:	6020      	str	r0, [r4, #0]
    9f98:	e4c9      	b.n	992e <__ssvfscanf_r+0xd22>
    9f9a:	2500      	movs	r5, #0
    9f9c:	e637      	b.n	9c0e <__ssvfscanf_r+0x1002>
    9f9e:	6cbd      	ldr	r5, [r7, #72]	; 0x48
    9fa0:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
    9fa4:	627e      	str	r6, [r7, #36]	; 0x24
    9fa6:	4644      	mov	r4, r8
    9fa8:	2d00      	cmp	r5, #0
    9faa:	f43f aa7c 	beq.w	94a6 <__ssvfscanf_r+0x89a>
    9fae:	3d01      	subs	r5, #1
    9fb0:	f507 73b8 	add.w	r3, r7, #368	; 0x170
    9fb4:	465a      	mov	r2, fp
    9fb6:	5d59      	ldrb	r1, [r3, r5]
    9fb8:	4648      	mov	r0, r9
    9fba:	f002 f801 	bl	bfc0 <_sungetc_r>
    9fbe:	2d00      	cmp	r5, #0
    9fc0:	d1f5      	bne.n	9fae <__ssvfscanf_r+0x13a2>
    9fc2:	f7ff ba70 	b.w	94a6 <__ssvfscanf_r+0x89a>
    9fc6:	4659      	mov	r1, fp
    9fc8:	4648      	mov	r0, r9
    9fca:	f002 f839 	bl	c040 <__ssrefill_r>
    9fce:	2800      	cmp	r0, #0
    9fd0:	f43f ae22 	beq.w	9c18 <__ssvfscanf_r+0x100c>
    9fd4:	627c      	str	r4, [r7, #36]	; 0x24
    9fd6:	2d00      	cmp	r5, #0
    9fd8:	f47e af04 	bne.w	8de4 <__ssvfscanf_r+0x1d8>
    9fdc:	e628      	b.n	9c30 <__ssvfscanf_r+0x1024>
    9fde:	627c      	str	r4, [r7, #36]	; 0x24
    9fe0:	2d00      	cmp	r5, #0
    9fe2:	f43f ae25 	beq.w	9c30 <__ssvfscanf_r+0x1024>
    9fe6:	3d01      	subs	r5, #1
    9fe8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
    9fec:	465a      	mov	r2, fp
    9fee:	5d59      	ldrb	r1, [r3, r5]
    9ff0:	4648      	mov	r0, r9
    9ff2:	f001 ffe5 	bl	bfc0 <_sungetc_r>
    9ff6:	2d00      	cmp	r5, #0
    9ff8:	d1f5      	bne.n	9fe6 <__ssvfscanf_r+0x13da>
    9ffa:	e619      	b.n	9c30 <__ssvfscanf_r+0x1024>
    9ffc:	07e5      	lsls	r5, r4, #31
    9ffe:	d43c      	bmi.n	a07a <__ssvfscanf_r+0x146e>
    a000:	07a4      	lsls	r4, r4, #30
    a002:	d53a      	bpl.n	a07a <__ssvfscanf_r+0x146e>
    a004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    a006:	64f9      	str	r1, [r7, #76]	; 0x4c
    a008:	f853 2b04 	ldr.w	r2, [r3], #4
    a00c:	633b      	str	r3, [r7, #48]	; 0x30
    a00e:	ea4f 73ea 	mov.w	r3, sl, asr #31
    a012:	f8c2 a000 	str.w	sl, [r2]
    a016:	6053      	str	r3, [r2, #4]
    a018:	f7fe be1f 	b.w	8c5a <__ssvfscanf_r+0x4e>
    a01c:	ee18 9a10 	vmov	r9, s16
    a020:	461e      	mov	r6, r3
    a022:	f7ff b814 	b.w	904e <__ssvfscanf_r+0x442>
    a026:	2301      	movs	r3, #1
    a028:	f424 64f0 	bic.w	r4, r4, #1920	; 0x780
    a02c:	64bb      	str	r3, [r7, #72]	; 0x48
    a02e:	f7fe bff6 	b.w	901e <__ssvfscanf_r+0x412>
    a032:	f1b8 0f01 	cmp.w	r8, #1
    a036:	bf38      	it	cc
    a038:	f04f 0801 	movcc.w	r8, #1
    a03c:	f014 0301 	ands.w	r3, r4, #1
    a040:	d13a      	bne.n	a0b8 <__ssvfscanf_r+0x14ac>
    a042:	06e5      	lsls	r5, r4, #27
    a044:	f100 8136 	bmi.w	a2b4 <__ssvfscanf_r+0x16a8>
    a048:	0624      	lsls	r4, r4, #24
    a04a:	f140 814c 	bpl.w	a2e6 <__ssvfscanf_r+0x16da>
    a04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    a050:	f853 5b04 	ldr.w	r5, [r3], #4
    a054:	64bb      	str	r3, [r7, #72]	; 0x48
    a056:	2d00      	cmp	r5, #0
    a058:	f43e aecd 	beq.w	8df6 <__ssvfscanf_r+0x1ea>
    a05c:	4640      	mov	r0, r8
    a05e:	f7f9 faeb 	bl	3638 <malloc>
    a062:	4603      	mov	r3, r0
    a064:	2800      	cmp	r0, #0
    a066:	f040 80dc 	bne.w	a222 <__ssvfscanf_r+0x1616>
    a06a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    a06c:	2b00      	cmp	r3, #0
    a06e:	f000 8081 	beq.w	a174 <__ssvfscanf_r+0x1568>
    a072:	f8d3 8000 	ldr.w	r8, [r3]
    a076:	88de      	ldrh	r6, [r3, #6]
    a078:	e712      	b.n	9ea0 <__ssvfscanf_r+0x1294>
    a07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    a07c:	64f9      	str	r1, [r7, #76]	; 0x4c
    a07e:	f853 2b04 	ldr.w	r2, [r3], #4
    a082:	f8c2 a000 	str.w	sl, [r2]
    a086:	633b      	str	r3, [r7, #48]	; 0x30
    a088:	f7fe bde7 	b.w	8c5a <__ssvfscanf_r+0x4e>
    a08c:	462b      	mov	r3, r5
    a08e:	6abd      	ldr	r5, [r7, #40]	; 0x28
    a090:	42ab      	cmp	r3, r5
    a092:	f67e aeb0 	bls.w	8df6 <__ssvfscanf_r+0x1ea>
    a096:	461c      	mov	r4, r3
    a098:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
    a09c:	465a      	mov	r2, fp
    a09e:	4648      	mov	r0, r9
    a0a0:	f001 ff8e 	bl	bfc0 <_sungetc_r>
    a0a4:	42ac      	cmp	r4, r5
    a0a6:	d1f7      	bne.n	a098 <__ssvfscanf_r+0x148c>
    a0a8:	f7fe bea5 	b.w	8df6 <__ssvfscanf_r+0x1ea>
    a0ac:	0000b905 	.word	0x0000b905
    a0b0:	20000645 	.word	0x20000645
    a0b4:	200078e4 	.word	0x200078e4
    a0b8:	f014 0310 	ands.w	r3, r4, #16
    a0bc:	637b      	str	r3, [r7, #52]	; 0x34
    a0be:	d05e      	beq.n	a17e <__ssvfscanf_r+0x1572>
    a0c0:	2500      	movs	r5, #0
    a0c2:	63fd      	str	r5, [r7, #60]	; 0x3c
    a0c4:	64bd      	str	r5, [r7, #72]	; 0x48
    a0c6:	462e      	mov	r6, r5
    a0c8:	2400      	movs	r4, #0
    a0ca:	464b      	mov	r3, r9
    a0cc:	46c1      	mov	r9, r8
    a0ce:	46a8      	mov	r8, r5
    a0d0:	4625      	mov	r5, r4
    a0d2:	461c      	mov	r4, r3
    a0d4:	f7fb fa9e 	bl	5614 <__locale_mb_cur_max>
    a0d8:	42a8      	cmp	r0, r5
    a0da:	f43e ae83 	beq.w	8de4 <__ssvfscanf_r+0x1d8>
    a0de:	e9db 3200 	ldrd	r3, r2, [fp]
    a0e2:	f813 1b01 	ldrb.w	r1, [r3], #1
    a0e6:	3a01      	subs	r2, #1
    a0e8:	e9cb 3200 	strd	r3, r2, [fp]
    a0ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    a0ee:	f507 70b8 	add.w	r0, r7, #368	; 0x170
    a0f2:	2a03      	cmp	r2, #3
    a0f4:	5541      	strb	r1, [r0, r5]
    a0f6:	f105 0301 	add.w	r3, r5, #1
    a0fa:	f107 0568 	add.w	r5, r7, #104	; 0x68
    a0fe:	d102      	bne.n	a106 <__ssvfscanf_r+0x14fa>
    a100:	682a      	ldr	r2, [r5, #0]
    a102:	2a04      	cmp	r2, #4
    a104:	d006      	beq.n	a114 <__ssvfscanf_r+0x1508>
    a106:	2208      	movs	r2, #8
    a108:	2100      	movs	r1, #0
    a10a:	4628      	mov	r0, r5
    a10c:	62bb      	str	r3, [r7, #40]	; 0x28
    a10e:	f7fb f9b7 	bl	5480 <memset>
    a112:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a114:	9500      	str	r5, [sp, #0]
    a116:	f507 72b8 	add.w	r2, r7, #368	; 0x170
    a11a:	4631      	mov	r1, r6
    a11c:	4620      	mov	r0, r4
    a11e:	62bb      	str	r3, [r7, #40]	; 0x28
    a120:	f001 fd7a 	bl	bc18 <_mbrtowc_r>
    a124:	1c43      	adds	r3, r0, #1
    a126:	6278      	str	r0, [r7, #36]	; 0x24
    a128:	f43e ae5c 	beq.w	8de4 <__ssvfscanf_r+0x1d8>
    a12c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a12e:	2800      	cmp	r0, #0
    a130:	f040 8147 	bne.w	a3c2 <__ssvfscanf_r+0x17b6>
    a134:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    a136:	b902      	cbnz	r2, a13a <__ssvfscanf_r+0x152e>
    a138:	6032      	str	r2, [r6, #0]
    a13a:	449a      	add	sl, r3
    a13c:	f109 39ff 	add.w	r9, r9, #4294967295
    a140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a142:	2b00      	cmp	r3, #0
    a144:	f040 8175 	bne.w	a432 <__ssvfscanf_r+0x1826>
    a148:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a14a:	2b00      	cmp	r3, #0
    a14c:	f000 8170 	beq.w	a430 <__ssvfscanf_r+0x1824>
    a150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a152:	1af5      	subs	r5, r6, r3
    a154:	ebb8 0fa5 	cmp.w	r8, r5, asr #2
    a158:	f200 816a 	bhi.w	a430 <__ssvfscanf_r+0x1824>
    a15c:	4618      	mov	r0, r3
    a15e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
    a162:	f7f9 fd35 	bl	3bd0 <realloc>
    a166:	63f8      	str	r0, [r7, #60]	; 0x3c
    a168:	2800      	cmp	r0, #0
    a16a:	f040 815c 	bne.w	a426 <__ssvfscanf_r+0x181a>
    a16e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    a170:	2b00      	cmp	r3, #0
    a172:	d12d      	bne.n	a1d0 <__ssvfscanf_r+0x15c4>
    a174:	f04f 33ff 	mov.w	r3, #4294967295
    a178:	647b      	str	r3, [r7, #68]	; 0x44
    a17a:	f7fe be47 	b.w	8e0c <__ssvfscanf_r+0x200>
    a17e:	0622      	lsls	r2, r4, #24
    a180:	f140 808f 	bpl.w	a2a2 <__ssvfscanf_r+0x1696>
    a184:	6b3c      	ldr	r4, [r7, #48]	; 0x30
    a186:	f854 3b04 	ldr.w	r3, [r4], #4
    a18a:	64bb      	str	r3, [r7, #72]	; 0x48
    a18c:	2b00      	cmp	r3, #0
    a18e:	f43e ae32 	beq.w	8df6 <__ssvfscanf_r+0x1ea>
    a192:	2080      	movs	r0, #128	; 0x80
    a194:	f7f9 fa50 	bl	3638 <malloc>
    a198:	4606      	mov	r6, r0
    a19a:	2800      	cmp	r0, #0
    a19c:	d0e7      	beq.n	a16e <__ssvfscanf_r+0x1562>
    a19e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a1a0:	6018      	str	r0, [r3, #0]
    a1a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    a1a4:	88dd      	ldrh	r5, [r3, #6]
    a1a6:	889a      	ldrh	r2, [r3, #4]
    a1a8:	4295      	cmp	r5, r2
    a1aa:	f0c0 80b3 	bcc.w	a314 <__ssvfscanf_r+0x1708>
    a1ae:	f64f 71f6 	movw	r1, #65526	; 0xfff6
    a1b2:	428a      	cmp	r2, r1
    a1b4:	d856      	bhi.n	a264 <__ssvfscanf_r+0x1658>
    a1b6:	3208      	adds	r2, #8
    a1b8:	b293      	uxth	r3, r2
    a1ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    a1bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    a1be:	0099      	lsls	r1, r3, #2
    a1c0:	6810      	ldr	r0, [r2, #0]
    a1c2:	f7f9 fd05 	bl	3bd0 <realloc>
    a1c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a1c8:	2800      	cmp	r0, #0
    a1ca:	f040 80ae 	bne.w	a32a <__ssvfscanf_r+0x171e>
    a1ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    a1d0:	88db      	ldrh	r3, [r3, #6]
    a1d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    a1d4:	461e      	mov	r6, r3
    a1d6:	f8d2 8000 	ldr.w	r8, [r2]
    a1da:	e661      	b.n	9ea0 <__ssvfscanf_r+0x1294>
    a1dc:	462b      	mov	r3, r5
    a1de:	6abd      	ldr	r5, [r7, #40]	; 0x28
    a1e0:	42ab      	cmp	r3, r5
    a1e2:	f67e ae08 	bls.w	8df6 <__ssvfscanf_r+0x1ea>
    a1e6:	461c      	mov	r4, r3
    a1e8:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
    a1ec:	465a      	mov	r2, fp
    a1ee:	4648      	mov	r0, r9
    a1f0:	f001 fee6 	bl	bfc0 <_sungetc_r>
    a1f4:	42ac      	cmp	r4, r5
    a1f6:	d1f7      	bne.n	a1e8 <__ssvfscanf_r+0x15dc>
    a1f8:	f7fe bdfd 	b.w	8df6 <__ssvfscanf_r+0x1ea>
    a1fc:	4610      	mov	r0, r2
    a1fe:	00d9      	lsls	r1, r3, #3
    a200:	461e      	mov	r6, r3
    a202:	f7f9 fce5 	bl	3bd0 <realloc>
    a206:	62b8      	str	r0, [r7, #40]	; 0x28
    a208:	2800      	cmp	r0, #0
    a20a:	d0b0      	beq.n	a16e <__ssvfscanf_r+0x1562>
    a20c:	1942      	adds	r2, r0, r5
    a20e:	64ba      	str	r2, [r7, #72]	; 0x48
    a210:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    a212:	6b7d      	ldr	r5, [r7, #52]	; 0x34
    a214:	6010      	str	r0, [r2, #0]
    a216:	0073      	lsls	r3, r6, #1
    a218:	623b      	str	r3, [r7, #32]
    a21a:	e4f8      	b.n	9c0e <__ssvfscanf_r+0x1002>
    a21c:	f8d7 803c 	ldr.w	r8, [r7, #60]	; 0x3c
    a220:	e63e      	b.n	9ea0 <__ssvfscanf_r+0x1294>
    a222:	6c39      	ldr	r1, [r7, #64]	; 0x40
    a224:	6028      	str	r0, [r5, #0]
    a226:	88ce      	ldrh	r6, [r1, #6]
    a228:	888a      	ldrh	r2, [r1, #4]
    a22a:	4296      	cmp	r6, r2
    a22c:	f0c0 808e 	bcc.w	a34c <__ssvfscanf_r+0x1740>
    a230:	f64f 71f6 	movw	r1, #65526	; 0xfff6
    a234:	428a      	cmp	r2, r1
    a236:	6338      	str	r0, [r7, #48]	; 0x30
    a238:	f240 80a5 	bls.w	a386 <__ssvfscanf_r+0x177a>
    a23c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    a23e:	f8d3 8000 	ldr.w	r8, [r3]
    a242:	e62d      	b.n	9ea0 <__ssvfscanf_r+0x1294>
    a244:	6aba      	ldr	r2, [r7, #40]	; 0x28
    a246:	4295      	cmp	r5, r2
    a248:	f67e add5 	bls.w	8df6 <__ssvfscanf_r+0x1ea>
    a24c:	462c      	mov	r4, r5
    a24e:	6abd      	ldr	r5, [r7, #40]	; 0x28
    a250:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
    a254:	465a      	mov	r2, fp
    a256:	4648      	mov	r0, r9
    a258:	f001 feb2 	bl	bfc0 <_sungetc_r>
    a25c:	42ac      	cmp	r4, r5
    a25e:	d1f7      	bne.n	a250 <__ssvfscanf_r+0x1644>
    a260:	f7fe bdc9 	b.w	8df6 <__ssvfscanf_r+0x1ea>
    a264:	462b      	mov	r3, r5
    a266:	e7b4      	b.n	a1d2 <__ssvfscanf_r+0x15c6>
    a268:	f001 fcd4 	bl	bc14 <_strtoull_r>
    a26c:	e5c1      	b.n	9df2 <__ssvfscanf_r+0x11e6>
    a26e:	f8d8 3000 	ldr.w	r3, [r8]
    a272:	461d      	mov	r5, r3
    a274:	3301      	adds	r3, #1
    a276:	f47f a8d5 	bne.w	9424 <__ssvfscanf_r+0x818>
    a27a:	462a      	mov	r2, r5
    a27c:	f7ff b8e8 	b.w	9450 <__ssvfscanf_r+0x844>
    a280:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a282:	6818      	ldr	r0, [r3, #0]
    a284:	f001 fd24 	bl	bcd0 <iswspace>
    a288:	2800      	cmp	r0, #0
    a28a:	f47f aea8 	bne.w	9fde <__ssvfscanf_r+0x13d2>
    a28e:	2c03      	cmp	r4, #3
    a290:	44aa      	add	sl, r5
    a292:	f47f a849 	bne.w	9328 <__ssvfscanf_r+0x71c>
    a296:	6833      	ldr	r3, [r6, #0]
    a298:	2b04      	cmp	r3, #4
    a29a:	f47f a845 	bne.w	9328 <__ssvfscanf_r+0x71c>
    a29e:	f7ff b845 	b.w	932c <__ssvfscanf_r+0x720>
    a2a2:	e9d7 320c 	ldrd	r3, r2, [r7, #48]	; 0x30
    a2a6:	f853 6b04 	ldr.w	r6, [r3], #4
    a2aa:	633b      	str	r3, [r7, #48]	; 0x30
    a2ac:	4615      	mov	r5, r2
    a2ae:	63fa      	str	r2, [r7, #60]	; 0x3c
    a2b0:	64ba      	str	r2, [r7, #72]	; 0x48
    a2b2:	e709      	b.n	a0c8 <__ssvfscanf_r+0x14bc>
    a2b4:	461c      	mov	r4, r3
    a2b6:	f8db 3004 	ldr.w	r3, [fp, #4]
    a2ba:	4598      	cmp	r8, r3
    a2bc:	dd39      	ble.n	a332 <__ssvfscanf_r+0x1726>
    a2be:	f8db 2000 	ldr.w	r2, [fp]
    a2c2:	441a      	add	r2, r3
    a2c4:	f8cb 2000 	str.w	r2, [fp]
    a2c8:	4659      	mov	r1, fp
    a2ca:	4648      	mov	r0, r9
    a2cc:	441c      	add	r4, r3
    a2ce:	eba8 0803 	sub.w	r8, r8, r3
    a2d2:	f001 feb5 	bl	c040 <__ssrefill_r>
    a2d6:	2800      	cmp	r0, #0
    a2d8:	d0ed      	beq.n	a2b6 <__ssvfscanf_r+0x16aa>
    a2da:	2c00      	cmp	r4, #0
    a2dc:	f43e ad82 	beq.w	8de4 <__ssvfscanf_r+0x1d8>
    a2e0:	44a2      	add	sl, r4
    a2e2:	f7fe bcba 	b.w	8c5a <__ssvfscanf_r+0x4e>
    a2e6:	6b3d      	ldr	r5, [r7, #48]	; 0x30
    a2e8:	4643      	mov	r3, r8
    a2ea:	6829      	ldr	r1, [r5, #0]
    a2ec:	f8cd b000 	str.w	fp, [sp]
    a2f0:	2201      	movs	r2, #1
    a2f2:	4648      	mov	r0, r9
    a2f4:	f001 fec2 	bl	c07c <_sfread_r>
    a2f8:	4604      	mov	r4, r0
    a2fa:	2800      	cmp	r0, #0
    a2fc:	f43e ad72 	beq.w	8de4 <__ssvfscanf_r+0x1d8>
    a300:	3504      	adds	r5, #4
    a302:	64bd      	str	r5, [r7, #72]	; 0x48
    a304:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    a306:	3301      	adds	r3, #1
    a308:	647b      	str	r3, [r7, #68]	; 0x44
    a30a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a30c:	633b      	str	r3, [r7, #48]	; 0x30
    a30e:	44a2      	add	sl, r4
    a310:	f7fe bca3 	b.w	8c5a <__ssvfscanf_r+0x4e>
    a314:	6818      	ldr	r0, [r3, #0]
    a316:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a318:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
    a31c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    a31e:	633c      	str	r4, [r7, #48]	; 0x30
    a320:	3501      	adds	r5, #1
    a322:	80dd      	strh	r5, [r3, #6]
    a324:	63fe      	str	r6, [r7, #60]	; 0x3c
    a326:	2520      	movs	r5, #32
    a328:	e6ce      	b.n	a0c8 <__ssvfscanf_r+0x14bc>
    a32a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    a32c:	8093      	strh	r3, [r2, #4]
    a32e:	6010      	str	r0, [r2, #0]
    a330:	e7f1      	b.n	a316 <__ssvfscanf_r+0x170a>
    a332:	eba3 0308 	sub.w	r3, r3, r8
    a336:	f8cb 3004 	str.w	r3, [fp, #4]
    a33a:	f8db 3000 	ldr.w	r3, [fp]
    a33e:	4444      	add	r4, r8
    a340:	4443      	add	r3, r8
    a342:	f8cb 3000 	str.w	r3, [fp]
    a346:	44a2      	add	sl, r4
    a348:	f7fe bc87 	b.w	8c5a <__ssvfscanf_r+0x4e>
    a34c:	680a      	ldr	r2, [r1, #0]
    a34e:	63fa      	str	r2, [r7, #60]	; 0x3c
    a350:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    a352:	f842 5026 	str.w	r5, [r2, r6, lsl #2]
    a356:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    a358:	3601      	adds	r6, #1
    a35a:	b2b6      	uxth	r6, r6
    a35c:	80d6      	strh	r6, [r2, #6]
    a35e:	4619      	mov	r1, r3
    a360:	f8cd b000 	str.w	fp, [sp]
    a364:	4643      	mov	r3, r8
    a366:	2201      	movs	r2, #1
    a368:	4648      	mov	r0, r9
    a36a:	f001 fe87 	bl	c07c <_sfread_r>
    a36e:	4604      	mov	r4, r0
    a370:	b1d8      	cbz	r0, a3aa <__ssvfscanf_r+0x179e>
    a372:	4580      	cmp	r8, r0
    a374:	d9c6      	bls.n	a304 <__ssvfscanf_r+0x16f8>
    a376:	6828      	ldr	r0, [r5, #0]
    a378:	4621      	mov	r1, r4
    a37a:	f7f9 fc29 	bl	3bd0 <realloc>
    a37e:	2800      	cmp	r0, #0
    a380:	d0c0      	beq.n	a304 <__ssvfscanf_r+0x16f8>
    a382:	6028      	str	r0, [r5, #0]
    a384:	e7be      	b.n	a304 <__ssvfscanf_r+0x16f8>
    a386:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    a388:	3208      	adds	r2, #8
    a38a:	b294      	uxth	r4, r2
    a38c:	681a      	ldr	r2, [r3, #0]
    a38e:	637a      	str	r2, [r7, #52]	; 0x34
    a390:	4610      	mov	r0, r2
    a392:	00a1      	lsls	r1, r4, #2
    a394:	f7f9 fc1c 	bl	3bd0 <realloc>
    a398:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    a39a:	63f8      	str	r0, [r7, #60]	; 0x3c
    a39c:	2800      	cmp	r0, #0
    a39e:	d05b      	beq.n	a458 <__ssvfscanf_r+0x184c>
    a3a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    a3a2:	809c      	strh	r4, [r3, #4]
    a3a4:	6018      	str	r0, [r3, #0]
    a3a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    a3a8:	e7d2      	b.n	a350 <__ssvfscanf_r+0x1744>
    a3aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    a3ac:	f8d7 803c 	ldr.w	r8, [r7, #60]	; 0x3c
    a3b0:	2b00      	cmp	r3, #0
    a3b2:	f43f ad75 	beq.w	9ea0 <__ssvfscanf_r+0x1294>
    a3b6:	f8bb 300c 	ldrh.w	r3, [fp, #12]
    a3ba:	065b      	lsls	r3, r3, #25
    a3bc:	f57e ad1d 	bpl.w	8dfa <__ssvfscanf_r+0x1ee>
    a3c0:	e56a      	b.n	9e98 <__ssvfscanf_r+0x128c>
    a3c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    a3c4:	3202      	adds	r2, #2
    a3c6:	d11d      	bne.n	a404 <__ssvfscanf_r+0x17f8>
    a3c8:	f8db 2004 	ldr.w	r2, [fp, #4]
    a3cc:	2a00      	cmp	r2, #0
    a3ce:	461d      	mov	r5, r3
    a3d0:	f73f ae80 	bgt.w	a0d4 <__ssvfscanf_r+0x14c8>
    a3d4:	4659      	mov	r1, fp
    a3d6:	4620      	mov	r0, r4
    a3d8:	f001 fe32 	bl	c040 <__ssrefill_r>
    a3dc:	b9e0      	cbnz	r0, a418 <__ssvfscanf_r+0x180c>
    a3de:	f1b9 0f00 	cmp.w	r9, #0
    a3e2:	f47f ae77 	bne.w	a0d4 <__ssvfscanf_r+0x14c8>
    a3e6:	4645      	mov	r5, r8
    a3e8:	46a1      	mov	r9, r4
    a3ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a3ec:	b123      	cbz	r3, a3f8 <__ssvfscanf_r+0x17ec>
    a3ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a3f0:	1af1      	subs	r1, r6, r3
    a3f2:	ebb5 0fa1 	cmp.w	r5, r1, asr #2
    a3f6:	d827      	bhi.n	a448 <__ssvfscanf_r+0x183c>
    a3f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a3fa:	2b00      	cmp	r3, #0
    a3fc:	f47e ac2d 	bne.w	8c5a <__ssvfscanf_r+0x4e>
    a400:	f7ff ba1c 	b.w	983c <__ssvfscanf_r+0xc30>
    a404:	449a      	add	sl, r3
    a406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a408:	2b03      	cmp	r3, #3
    a40a:	f47f ae97 	bne.w	a13c <__ssvfscanf_r+0x1530>
    a40e:	682b      	ldr	r3, [r5, #0]
    a410:	2b04      	cmp	r3, #4
    a412:	f47f ae93 	bne.w	a13c <__ssvfscanf_r+0x1530>
    a416:	e693      	b.n	a140 <__ssvfscanf_r+0x1534>
    a418:	46a1      	mov	r9, r4
    a41a:	462c      	mov	r4, r5
    a41c:	4645      	mov	r5, r8
    a41e:	2c00      	cmp	r4, #0
    a420:	d0e3      	beq.n	a3ea <__ssvfscanf_r+0x17de>
    a422:	f7fe bcdf 	b.w	8de4 <__ssvfscanf_r+0x1d8>
    a426:	6cba      	ldr	r2, [r7, #72]	; 0x48
    a428:	1946      	adds	r6, r0, r5
    a42a:	6010      	str	r0, [r2, #0]
    a42c:	ea4f 0848 	mov.w	r8, r8, lsl #1
    a430:	3604      	adds	r6, #4
    a432:	f8db 3004 	ldr.w	r3, [fp, #4]
    a436:	2b00      	cmp	r3, #0
    a438:	f04f 0500 	mov.w	r5, #0
    a43c:	ddca      	ble.n	a3d4 <__ssvfscanf_r+0x17c8>
    a43e:	f1b9 0f00 	cmp.w	r9, #0
    a442:	f47f ae47 	bne.w	a0d4 <__ssvfscanf_r+0x14c8>
    a446:	e7ce      	b.n	a3e6 <__ssvfscanf_r+0x17da>
    a448:	6cbc      	ldr	r4, [r7, #72]	; 0x48
    a44a:	6820      	ldr	r0, [r4, #0]
    a44c:	f7f9 fbc0 	bl	3bd0 <realloc>
    a450:	2800      	cmp	r0, #0
    a452:	d0d1      	beq.n	a3f8 <__ssvfscanf_r+0x17ec>
    a454:	6020      	str	r0, [r4, #0]
    a456:	e7cf      	b.n	a3f8 <__ssvfscanf_r+0x17ec>
    a458:	4690      	mov	r8, r2
    a45a:	e521      	b.n	9ea0 <__ssvfscanf_r+0x1294>

0000a45c <_fclose_r>:
    a45c:	b570      	push	{r4, r5, r6, lr}
    a45e:	2900      	cmp	r1, #0
    a460:	d04b      	beq.n	a4fa <_fclose_r+0x9e>
    a462:	4606      	mov	r6, r0
    a464:	460c      	mov	r4, r1
    a466:	b110      	cbz	r0, a46e <_fclose_r+0x12>
    a468:	6b43      	ldr	r3, [r0, #52]	; 0x34
    a46a:	2b00      	cmp	r3, #0
    a46c:	d048      	beq.n	a500 <_fclose_r+0xa4>
    a46e:	6e63      	ldr	r3, [r4, #100]	; 0x64
    a470:	07d8      	lsls	r0, r3, #31
    a472:	d534      	bpl.n	a4de <_fclose_r+0x82>
    a474:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    a478:	2b00      	cmp	r3, #0
    a47a:	d03e      	beq.n	a4fa <_fclose_r+0x9e>
    a47c:	4621      	mov	r1, r4
    a47e:	4630      	mov	r0, r6
    a480:	f000 f850 	bl	a524 <__sflush_r>
    a484:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    a486:	4605      	mov	r5, r0
    a488:	b133      	cbz	r3, a498 <_fclose_r+0x3c>
    a48a:	69e1      	ldr	r1, [r4, #28]
    a48c:	4630      	mov	r0, r6
    a48e:	4798      	blx	r3
    a490:	2800      	cmp	r0, #0
    a492:	bfb8      	it	lt
    a494:	f04f 35ff 	movlt.w	r5, #4294967295
    a498:	89a3      	ldrh	r3, [r4, #12]
    a49a:	061a      	lsls	r2, r3, #24
    a49c:	d43c      	bmi.n	a518 <_fclose_r+0xbc>
    a49e:	6b21      	ldr	r1, [r4, #48]	; 0x30
    a4a0:	b141      	cbz	r1, a4b4 <_fclose_r+0x58>
    a4a2:	f104 0340 	add.w	r3, r4, #64	; 0x40
    a4a6:	4299      	cmp	r1, r3
    a4a8:	d002      	beq.n	a4b0 <_fclose_r+0x54>
    a4aa:	4630      	mov	r0, r6
    a4ac:	f7fb fb96 	bl	5bdc <_free_r>
    a4b0:	2300      	movs	r3, #0
    a4b2:	6323      	str	r3, [r4, #48]	; 0x30
    a4b4:	6c61      	ldr	r1, [r4, #68]	; 0x44
    a4b6:	b121      	cbz	r1, a4c2 <_fclose_r+0x66>
    a4b8:	4630      	mov	r0, r6
    a4ba:	f7fb fb8f 	bl	5bdc <_free_r>
    a4be:	2300      	movs	r3, #0
    a4c0:	6463      	str	r3, [r4, #68]	; 0x44
    a4c2:	f7fa fe13 	bl	50ec <__sfp_lock_acquire>
    a4c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
    a4c8:	2200      	movs	r2, #0
    a4ca:	07db      	lsls	r3, r3, #31
    a4cc:	81a2      	strh	r2, [r4, #12]
    a4ce:	d51f      	bpl.n	a510 <_fclose_r+0xb4>
    a4d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    a4d2:	f7fb f937 	bl	5744 <__retarget_lock_close_recursive>
    a4d6:	f7fa fe0f 	bl	50f8 <__sfp_lock_release>
    a4da:	4628      	mov	r0, r5
    a4dc:	bd70      	pop	{r4, r5, r6, pc}
    a4de:	89a3      	ldrh	r3, [r4, #12]
    a4e0:	0599      	lsls	r1, r3, #22
    a4e2:	d4cb      	bmi.n	a47c <_fclose_r+0x20>
    a4e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    a4e6:	f7fb f92f 	bl	5748 <__retarget_lock_acquire_recursive>
    a4ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    a4ee:	2b00      	cmp	r3, #0
    a4f0:	d1c4      	bne.n	a47c <_fclose_r+0x20>
    a4f2:	6e65      	ldr	r5, [r4, #100]	; 0x64
    a4f4:	f015 0501 	ands.w	r5, r5, #1
    a4f8:	d005      	beq.n	a506 <_fclose_r+0xaa>
    a4fa:	2500      	movs	r5, #0
    a4fc:	4628      	mov	r0, r5
    a4fe:	bd70      	pop	{r4, r5, r6, pc}
    a500:	f7fa fdd6 	bl	50b0 <__sinit>
    a504:	e7b3      	b.n	a46e <_fclose_r+0x12>
    a506:	6da0      	ldr	r0, [r4, #88]	; 0x58
    a508:	f7fb f920 	bl	574c <__retarget_lock_release_recursive>
    a50c:	4628      	mov	r0, r5
    a50e:	bd70      	pop	{r4, r5, r6, pc}
    a510:	6da0      	ldr	r0, [r4, #88]	; 0x58
    a512:	f7fb f91b 	bl	574c <__retarget_lock_release_recursive>
    a516:	e7db      	b.n	a4d0 <_fclose_r+0x74>
    a518:	6921      	ldr	r1, [r4, #16]
    a51a:	4630      	mov	r0, r6
    a51c:	f7fb fb5e 	bl	5bdc <_free_r>
    a520:	e7bd      	b.n	a49e <_fclose_r+0x42>
    a522:	bf00      	nop

0000a524 <__sflush_r>:
    a524:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
    a528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a52c:	460c      	mov	r4, r1
    a52e:	0711      	lsls	r1, r2, #28
    a530:	4680      	mov	r8, r0
    a532:	d447      	bmi.n	a5c4 <__sflush_r+0xa0>
    a534:	6863      	ldr	r3, [r4, #4]
    a536:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    a53a:	2b00      	cmp	r3, #0
    a53c:	81a2      	strh	r2, [r4, #12]
    a53e:	dd5e      	ble.n	a5fe <__sflush_r+0xda>
    a540:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    a542:	2d00      	cmp	r5, #0
    a544:	d058      	beq.n	a5f8 <__sflush_r+0xd4>
    a546:	2300      	movs	r3, #0
    a548:	f8d8 6000 	ldr.w	r6, [r8]
    a54c:	f8c8 3000 	str.w	r3, [r8]
    a550:	b293      	uxth	r3, r2
    a552:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    a556:	d156      	bne.n	a606 <__sflush_r+0xe2>
    a558:	2301      	movs	r3, #1
    a55a:	69e1      	ldr	r1, [r4, #28]
    a55c:	4640      	mov	r0, r8
    a55e:	47a8      	blx	r5
    a560:	1c43      	adds	r3, r0, #1
    a562:	d067      	beq.n	a634 <__sflush_r+0x110>
    a564:	89a3      	ldrh	r3, [r4, #12]
    a566:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    a568:	075f      	lsls	r7, r3, #29
    a56a:	d505      	bpl.n	a578 <__sflush_r+0x54>
    a56c:	6863      	ldr	r3, [r4, #4]
    a56e:	1ac0      	subs	r0, r0, r3
    a570:	6b23      	ldr	r3, [r4, #48]	; 0x30
    a572:	b10b      	cbz	r3, a578 <__sflush_r+0x54>
    a574:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    a576:	1ac0      	subs	r0, r0, r3
    a578:	69e1      	ldr	r1, [r4, #28]
    a57a:	4602      	mov	r2, r0
    a57c:	2300      	movs	r3, #0
    a57e:	4640      	mov	r0, r8
    a580:	47a8      	blx	r5
    a582:	1c41      	adds	r1, r0, #1
    a584:	d141      	bne.n	a60a <__sflush_r+0xe6>
    a586:	f8d8 3000 	ldr.w	r3, [r8]
    a58a:	2b00      	cmp	r3, #0
    a58c:	d03d      	beq.n	a60a <__sflush_r+0xe6>
    a58e:	2b1d      	cmp	r3, #29
    a590:	d001      	beq.n	a596 <__sflush_r+0x72>
    a592:	2b16      	cmp	r3, #22
    a594:	d156      	bne.n	a644 <__sflush_r+0x120>
    a596:	89a3      	ldrh	r3, [r4, #12]
    a598:	6922      	ldr	r2, [r4, #16]
    a59a:	6022      	str	r2, [r4, #0]
    a59c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    a5a0:	2100      	movs	r1, #0
    a5a2:	6061      	str	r1, [r4, #4]
    a5a4:	81a3      	strh	r3, [r4, #12]
    a5a6:	6b21      	ldr	r1, [r4, #48]	; 0x30
    a5a8:	f8c8 6000 	str.w	r6, [r8]
    a5ac:	b321      	cbz	r1, a5f8 <__sflush_r+0xd4>
    a5ae:	f104 0340 	add.w	r3, r4, #64	; 0x40
    a5b2:	4299      	cmp	r1, r3
    a5b4:	d002      	beq.n	a5bc <__sflush_r+0x98>
    a5b6:	4640      	mov	r0, r8
    a5b8:	f7fb fb10 	bl	5bdc <_free_r>
    a5bc:	2000      	movs	r0, #0
    a5be:	6320      	str	r0, [r4, #48]	; 0x30
    a5c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a5c4:	6926      	ldr	r6, [r4, #16]
    a5c6:	b1be      	cbz	r6, a5f8 <__sflush_r+0xd4>
    a5c8:	b293      	uxth	r3, r2
    a5ca:	6825      	ldr	r5, [r4, #0]
    a5cc:	6026      	str	r6, [r4, #0]
    a5ce:	079a      	lsls	r2, r3, #30
    a5d0:	bf0c      	ite	eq
    a5d2:	6963      	ldreq	r3, [r4, #20]
    a5d4:	2300      	movne	r3, #0
    a5d6:	1bad      	subs	r5, r5, r6
    a5d8:	60a3      	str	r3, [r4, #8]
    a5da:	e00b      	b.n	a5f4 <__sflush_r+0xd0>
    a5dc:	462b      	mov	r3, r5
    a5de:	4632      	mov	r2, r6
    a5e0:	69e1      	ldr	r1, [r4, #28]
    a5e2:	6a67      	ldr	r7, [r4, #36]	; 0x24
    a5e4:	4640      	mov	r0, r8
    a5e6:	47b8      	blx	r7
    a5e8:	f1b0 0c00 	subs.w	ip, r0, #0
    a5ec:	eba5 050c 	sub.w	r5, r5, ip
    a5f0:	4466      	add	r6, ip
    a5f2:	dd17      	ble.n	a624 <__sflush_r+0x100>
    a5f4:	2d00      	cmp	r5, #0
    a5f6:	dcf1      	bgt.n	a5dc <__sflush_r+0xb8>
    a5f8:	2000      	movs	r0, #0
    a5fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a5fe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    a600:	2b00      	cmp	r3, #0
    a602:	dc9d      	bgt.n	a540 <__sflush_r+0x1c>
    a604:	e7f8      	b.n	a5f8 <__sflush_r+0xd4>
    a606:	6d20      	ldr	r0, [r4, #80]	; 0x50
    a608:	e7ae      	b.n	a568 <__sflush_r+0x44>
    a60a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    a60e:	6922      	ldr	r2, [r4, #16]
    a610:	6022      	str	r2, [r4, #0]
    a612:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    a616:	81a3      	strh	r3, [r4, #12]
    a618:	2200      	movs	r2, #0
    a61a:	04db      	lsls	r3, r3, #19
    a61c:	6062      	str	r2, [r4, #4]
    a61e:	d5c2      	bpl.n	a5a6 <__sflush_r+0x82>
    a620:	6520      	str	r0, [r4, #80]	; 0x50
    a622:	e7c0      	b.n	a5a6 <__sflush_r+0x82>
    a624:	89a3      	ldrh	r3, [r4, #12]
    a626:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a62a:	f04f 30ff 	mov.w	r0, #4294967295
    a62e:	81a3      	strh	r3, [r4, #12]
    a630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a634:	f8d8 3000 	ldr.w	r3, [r8]
    a638:	2b00      	cmp	r3, #0
    a63a:	d093      	beq.n	a564 <__sflush_r+0x40>
    a63c:	2b1d      	cmp	r3, #29
    a63e:	d006      	beq.n	a64e <__sflush_r+0x12a>
    a640:	2b16      	cmp	r3, #22
    a642:	d004      	beq.n	a64e <__sflush_r+0x12a>
    a644:	89a3      	ldrh	r3, [r4, #12]
    a646:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a64a:	81a3      	strh	r3, [r4, #12]
    a64c:	e7d5      	b.n	a5fa <__sflush_r+0xd6>
    a64e:	f8c8 6000 	str.w	r6, [r8]
    a652:	e7d1      	b.n	a5f8 <__sflush_r+0xd4>

0000a654 <_fflush_r>:
    a654:	b538      	push	{r3, r4, r5, lr}
    a656:	460c      	mov	r4, r1
    a658:	4605      	mov	r5, r0
    a65a:	b108      	cbz	r0, a660 <_fflush_r+0xc>
    a65c:	6b43      	ldr	r3, [r0, #52]	; 0x34
    a65e:	b303      	cbz	r3, a6a2 <_fflush_r+0x4e>
    a660:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
    a664:	b188      	cbz	r0, a68a <_fflush_r+0x36>
    a666:	6e63      	ldr	r3, [r4, #100]	; 0x64
    a668:	07db      	lsls	r3, r3, #31
    a66a:	d401      	bmi.n	a670 <_fflush_r+0x1c>
    a66c:	0581      	lsls	r1, r0, #22
    a66e:	d50f      	bpl.n	a690 <_fflush_r+0x3c>
    a670:	4628      	mov	r0, r5
    a672:	4621      	mov	r1, r4
    a674:	f7ff ff56 	bl	a524 <__sflush_r>
    a678:	6e63      	ldr	r3, [r4, #100]	; 0x64
    a67a:	07da      	lsls	r2, r3, #31
    a67c:	4605      	mov	r5, r0
    a67e:	d402      	bmi.n	a686 <_fflush_r+0x32>
    a680:	89a3      	ldrh	r3, [r4, #12]
    a682:	059b      	lsls	r3, r3, #22
    a684:	d508      	bpl.n	a698 <_fflush_r+0x44>
    a686:	4628      	mov	r0, r5
    a688:	bd38      	pop	{r3, r4, r5, pc}
    a68a:	4605      	mov	r5, r0
    a68c:	4628      	mov	r0, r5
    a68e:	bd38      	pop	{r3, r4, r5, pc}
    a690:	6da0      	ldr	r0, [r4, #88]	; 0x58
    a692:	f7fb f859 	bl	5748 <__retarget_lock_acquire_recursive>
    a696:	e7eb      	b.n	a670 <_fflush_r+0x1c>
    a698:	6da0      	ldr	r0, [r4, #88]	; 0x58
    a69a:	f7fb f857 	bl	574c <__retarget_lock_release_recursive>
    a69e:	4628      	mov	r0, r5
    a6a0:	bd38      	pop	{r3, r4, r5, pc}
    a6a2:	f7fa fd05 	bl	50b0 <__sinit>
    a6a6:	e7db      	b.n	a660 <_fflush_r+0xc>

0000a6a8 <__sccl>:
    a6a8:	b570      	push	{r4, r5, r6, lr}
    a6aa:	780c      	ldrb	r4, [r1, #0]
    a6ac:	2c5e      	cmp	r4, #94	; 0x5e
    a6ae:	4686      	mov	lr, r0
    a6b0:	d01e      	beq.n	a6f0 <__sccl+0x48>
    a6b2:	2200      	movs	r2, #0
    a6b4:	1c48      	adds	r0, r1, #1
    a6b6:	4694      	mov	ip, r2
    a6b8:	f10e 33ff 	add.w	r3, lr, #4294967295
    a6bc:	f10e 01ff 	add.w	r1, lr, #255	; 0xff
    a6c0:	f803 2f01 	strb.w	r2, [r3, #1]!
    a6c4:	428b      	cmp	r3, r1
    a6c6:	d1fb      	bne.n	a6c0 <__sccl+0x18>
    a6c8:	b184      	cbz	r4, a6ec <__sccl+0x44>
    a6ca:	f08c 0101 	eor.w	r1, ip, #1
    a6ce:	f80e 1004 	strb.w	r1, [lr, r4]
    a6d2:	1c45      	adds	r5, r0, #1
    a6d4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    a6d8:	2b2d      	cmp	r3, #45	; 0x2d
    a6da:	d00e      	beq.n	a6fa <__sccl+0x52>
    a6dc:	2b5d      	cmp	r3, #93	; 0x5d
    a6de:	d003      	beq.n	a6e8 <__sccl+0x40>
    a6e0:	b11b      	cbz	r3, a6ea <__sccl+0x42>
    a6e2:	461c      	mov	r4, r3
    a6e4:	4628      	mov	r0, r5
    a6e6:	e7f2      	b.n	a6ce <__sccl+0x26>
    a6e8:	4628      	mov	r0, r5
    a6ea:	bd70      	pop	{r4, r5, r6, pc}
    a6ec:	3801      	subs	r0, #1
    a6ee:	bd70      	pop	{r4, r5, r6, pc}
    a6f0:	2201      	movs	r2, #1
    a6f2:	784c      	ldrb	r4, [r1, #1]
    a6f4:	1c88      	adds	r0, r1, #2
    a6f6:	4694      	mov	ip, r2
    a6f8:	e7de      	b.n	a6b8 <__sccl+0x10>
    a6fa:	f890 c001 	ldrb.w	ip, [r0, #1]
    a6fe:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
    a702:	d0ee      	beq.n	a6e2 <__sccl+0x3a>
    a704:	4564      	cmp	r4, ip
    a706:	dcec      	bgt.n	a6e2 <__sccl+0x3a>
    a708:	1c66      	adds	r6, r4, #1
    a70a:	3002      	adds	r0, #2
    a70c:	eb0e 0206 	add.w	r2, lr, r6
    a710:	f802 1b01 	strb.w	r1, [r2], #1
    a714:	eba2 030e 	sub.w	r3, r2, lr
    a718:	3b01      	subs	r3, #1
    a71a:	459c      	cmp	ip, r3
    a71c:	dcf8      	bgt.n	a710 <__sccl+0x68>
    a71e:	ebac 0304 	sub.w	r3, ip, r4
    a722:	3b01      	subs	r3, #1
    a724:	4564      	cmp	r4, ip
    a726:	bfa8      	it	ge
    a728:	2300      	movge	r3, #0
    a72a:	3502      	adds	r5, #2
    a72c:	199c      	adds	r4, r3, r6
    a72e:	e7d1      	b.n	a6d4 <__sccl+0x2c>

0000a730 <sprintf>:
    a730:	b40e      	push	{r1, r2, r3}
    a732:	b510      	push	{r4, lr}
    a734:	b09d      	sub	sp, #116	; 0x74
    a736:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    a73a:	ab1f      	add	r3, sp, #124	; 0x7c
    a73c:	e9cd 0106 	strd	r0, r1, [sp, #24]
    a740:	9104      	str	r1, [sp, #16]
    a742:	4909      	ldr	r1, [pc, #36]	; (a768 <sprintf+0x38>)
    a744:	f853 2b04 	ldr.w	r2, [r3], #4
    a748:	9002      	str	r0, [sp, #8]
    a74a:	4c08      	ldr	r4, [pc, #32]	; (a76c <sprintf+0x3c>)
    a74c:	6808      	ldr	r0, [r1, #0]
    a74e:	9301      	str	r3, [sp, #4]
    a750:	a902      	add	r1, sp, #8
    a752:	9405      	str	r4, [sp, #20]
    a754:	f7fc fcb8 	bl	70c8 <_svfprintf_r>
    a758:	9b02      	ldr	r3, [sp, #8]
    a75a:	2200      	movs	r2, #0
    a75c:	701a      	strb	r2, [r3, #0]
    a75e:	b01d      	add	sp, #116	; 0x74
    a760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a764:	b003      	add	sp, #12
    a766:	4770      	bx	lr
    a768:	200081e4 	.word	0x200081e4
    a76c:	ffff0208 	.word	0xffff0208

0000a770 <stpncpy>:
    a770:	ea41 0300 	orr.w	r3, r1, r0
    a774:	079b      	lsls	r3, r3, #30
    a776:	b430      	push	{r4, r5}
    a778:	d101      	bne.n	a77e <stpncpy+0xe>
    a77a:	2a03      	cmp	r2, #3
    a77c:	d80f      	bhi.n	a79e <stpncpy+0x2e>
    a77e:	f101 3cff 	add.w	ip, r1, #4294967295
    a782:	e007      	b.n	a794 <stpncpy+0x24>
    a784:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
    a788:	f803 1b01 	strb.w	r1, [r3], #1
    a78c:	1e54      	subs	r4, r2, #1
    a78e:	b1c1      	cbz	r1, a7c2 <stpncpy+0x52>
    a790:	4622      	mov	r2, r4
    a792:	4618      	mov	r0, r3
    a794:	4603      	mov	r3, r0
    a796:	2a00      	cmp	r2, #0
    a798:	d1f4      	bne.n	a784 <stpncpy+0x14>
    a79a:	bc30      	pop	{r4, r5}
    a79c:	4770      	bx	lr
    a79e:	460b      	mov	r3, r1
    a7a0:	4619      	mov	r1, r3
    a7a2:	f853 5b04 	ldr.w	r5, [r3], #4
    a7a6:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
    a7aa:	ea24 0405 	bic.w	r4, r4, r5
    a7ae:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    a7b2:	d1e4      	bne.n	a77e <stpncpy+0xe>
    a7b4:	3a04      	subs	r2, #4
    a7b6:	2a03      	cmp	r2, #3
    a7b8:	f840 5b04 	str.w	r5, [r0], #4
    a7bc:	4619      	mov	r1, r3
    a7be:	d8ef      	bhi.n	a7a0 <stpncpy+0x30>
    a7c0:	e7dd      	b.n	a77e <stpncpy+0xe>
    a7c2:	4402      	add	r2, r0
    a7c4:	2c00      	cmp	r4, #0
    a7c6:	d0e8      	beq.n	a79a <stpncpy+0x2a>
    a7c8:	f803 1b01 	strb.w	r1, [r3], #1
    a7cc:	4293      	cmp	r3, r2
    a7ce:	d1fb      	bne.n	a7c8 <stpncpy+0x58>
    a7d0:	bc30      	pop	{r4, r5}
    a7d2:	4770      	bx	lr

0000a7d4 <_localeconv_r>:
    a7d4:	4800      	ldr	r0, [pc, #0]	; (a7d8 <_localeconv_r+0x4>)
    a7d6:	4770      	bx	lr
    a7d8:	20007d4c 	.word	0x20007d4c
    a7dc:	00000000 	.word	0x00000000

0000a7e0 <memchr>:
    a7e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    a7e4:	2a10      	cmp	r2, #16
    a7e6:	db2b      	blt.n	a840 <memchr+0x60>
    a7e8:	f010 0f07 	tst.w	r0, #7
    a7ec:	d008      	beq.n	a800 <memchr+0x20>
    a7ee:	f810 3b01 	ldrb.w	r3, [r0], #1
    a7f2:	3a01      	subs	r2, #1
    a7f4:	428b      	cmp	r3, r1
    a7f6:	d02d      	beq.n	a854 <memchr+0x74>
    a7f8:	f010 0f07 	tst.w	r0, #7
    a7fc:	b342      	cbz	r2, a850 <memchr+0x70>
    a7fe:	d1f6      	bne.n	a7ee <memchr+0xe>
    a800:	b4f0      	push	{r4, r5, r6, r7}
    a802:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    a806:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    a80a:	f022 0407 	bic.w	r4, r2, #7
    a80e:	f07f 0700 	mvns.w	r7, #0
    a812:	2300      	movs	r3, #0
    a814:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    a818:	3c08      	subs	r4, #8
    a81a:	ea85 0501 	eor.w	r5, r5, r1
    a81e:	ea86 0601 	eor.w	r6, r6, r1
    a822:	fa85 f547 	uadd8	r5, r5, r7
    a826:	faa3 f587 	sel	r5, r3, r7
    a82a:	fa86 f647 	uadd8	r6, r6, r7
    a82e:	faa5 f687 	sel	r6, r5, r7
    a832:	b98e      	cbnz	r6, a858 <memchr+0x78>
    a834:	d1ee      	bne.n	a814 <memchr+0x34>
    a836:	bcf0      	pop	{r4, r5, r6, r7}
    a838:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    a83c:	f002 0207 	and.w	r2, r2, #7
    a840:	b132      	cbz	r2, a850 <memchr+0x70>
    a842:	f810 3b01 	ldrb.w	r3, [r0], #1
    a846:	3a01      	subs	r2, #1
    a848:	ea83 0301 	eor.w	r3, r3, r1
    a84c:	b113      	cbz	r3, a854 <memchr+0x74>
    a84e:	d1f8      	bne.n	a842 <memchr+0x62>
    a850:	2000      	movs	r0, #0
    a852:	4770      	bx	lr
    a854:	3801      	subs	r0, #1
    a856:	4770      	bx	lr
    a858:	2d00      	cmp	r5, #0
    a85a:	bf06      	itte	eq
    a85c:	4635      	moveq	r5, r6
    a85e:	3803      	subeq	r0, #3
    a860:	3807      	subne	r0, #7
    a862:	f015 0f01 	tst.w	r5, #1
    a866:	d107      	bne.n	a878 <memchr+0x98>
    a868:	3001      	adds	r0, #1
    a86a:	f415 7f80 	tst.w	r5, #256	; 0x100
    a86e:	bf02      	ittt	eq
    a870:	3001      	addeq	r0, #1
    a872:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    a876:	3001      	addeq	r0, #1
    a878:	bcf0      	pop	{r4, r5, r6, r7}
    a87a:	3801      	subs	r0, #1
    a87c:	4770      	bx	lr
    a87e:	bf00      	nop

0000a880 <frexp>:
    a880:	b430      	push	{r4, r5}
    a882:	b082      	sub	sp, #8
    a884:	ed8d 0b00 	vstr	d0, [sp]
    a888:	9a01      	ldr	r2, [sp, #4]
    a88a:	4c19      	ldr	r4, [pc, #100]	; (a8f0 <frexp+0x70>)
    a88c:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
    a890:	2100      	movs	r1, #0
    a892:	42a3      	cmp	r3, r4
    a894:	6001      	str	r1, [r0, #0]
    a896:	dc21      	bgt.n	a8dc <frexp+0x5c>
    a898:	9c00      	ldr	r4, [sp, #0]
    a89a:	431c      	orrs	r4, r3
    a89c:	d01e      	beq.n	a8dc <frexp+0x5c>
    a89e:	4c15      	ldr	r4, [pc, #84]	; (a8f4 <frexp+0x74>)
    a8a0:	4014      	ands	r4, r2
    a8a2:	b954      	cbnz	r4, a8ba <frexp+0x3a>
    a8a4:	ed9f 7b10 	vldr	d7, [pc, #64]	; a8e8 <frexp+0x68>
    a8a8:	ee20 7b07 	vmul.f64	d7, d0, d7
    a8ac:	ed8d 7b00 	vstr	d7, [sp]
    a8b0:	9a01      	ldr	r2, [sp, #4]
    a8b2:	f06f 0135 	mvn.w	r1, #53	; 0x35
    a8b6:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
    a8ba:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
    a8be:	e9dd 4500 	ldrd	r4, r5, [sp]
    a8c2:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
    a8c6:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
    a8ca:	151b      	asrs	r3, r3, #20
    a8cc:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
    a8d0:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
    a8d4:	e9cd 4500 	strd	r4, r5, [sp]
    a8d8:	440b      	add	r3, r1
    a8da:	6003      	str	r3, [r0, #0]
    a8dc:	ed9d 0b00 	vldr	d0, [sp]
    a8e0:	b002      	add	sp, #8
    a8e2:	bc30      	pop	{r4, r5}
    a8e4:	4770      	bx	lr
    a8e6:	bf00      	nop
    a8e8:	00000000 	.word	0x00000000
    a8ec:	43500000 	.word	0x43500000
    a8f0:	7fefffff 	.word	0x7fefffff
    a8f4:	7ff00000 	.word	0x7ff00000

0000a8f8 <__assert_func>:
    a8f8:	b500      	push	{lr}
    a8fa:	4c0b      	ldr	r4, [pc, #44]	; (a928 <__assert_func+0x30>)
    a8fc:	6825      	ldr	r5, [r4, #0]
    a8fe:	4614      	mov	r4, r2
    a900:	68ee      	ldr	r6, [r5, #12]
    a902:	461a      	mov	r2, r3
    a904:	b085      	sub	sp, #20
    a906:	4603      	mov	r3, r0
    a908:	460d      	mov	r5, r1
    a90a:	b14c      	cbz	r4, a920 <__assert_func+0x28>
    a90c:	4907      	ldr	r1, [pc, #28]	; (a92c <__assert_func+0x34>)
    a90e:	9500      	str	r5, [sp, #0]
    a910:	e9cd 1401 	strd	r1, r4, [sp, #4]
    a914:	4630      	mov	r0, r6
    a916:	4906      	ldr	r1, [pc, #24]	; (a930 <__assert_func+0x38>)
    a918:	f001 fabe 	bl	be98 <fiprintf>
    a91c:	f7f7 f9ec 	bl	1cf8 <abort>
    a920:	4904      	ldr	r1, [pc, #16]	; (a934 <__assert_func+0x3c>)
    a922:	460c      	mov	r4, r1
    a924:	e7f3      	b.n	a90e <__assert_func+0x16>
    a926:	bf00      	nop
    a928:	200081e4 	.word	0x200081e4
    a92c:	20000428 	.word	0x20000428
    a930:	20000438 	.word	0x20000438
    a934:	200078e4 	.word	0x200078e4

0000a938 <_calloc_r>:
    a938:	b538      	push	{r3, r4, r5, lr}
    a93a:	fba1 1402 	umull	r1, r4, r1, r2
    a93e:	bb8c      	cbnz	r4, a9a4 <_calloc_r+0x6c>
    a940:	f7f8 fe8a 	bl	3658 <_malloc_r>
    a944:	4605      	mov	r5, r0
    a946:	b1e0      	cbz	r0, a982 <_calloc_r+0x4a>
    a948:	f850 2c04 	ldr.w	r2, [r0, #-4]
    a94c:	f022 0203 	bic.w	r2, r2, #3
    a950:	3a04      	subs	r2, #4
    a952:	2a24      	cmp	r2, #36	; 0x24
    a954:	d817      	bhi.n	a986 <_calloc_r+0x4e>
    a956:	2a13      	cmp	r2, #19
    a958:	d91a      	bls.n	a990 <_calloc_r+0x58>
    a95a:	2a1b      	cmp	r2, #27
    a95c:	e9c0 4400 	strd	r4, r4, [r0]
    a960:	d91d      	bls.n	a99e <_calloc_r+0x66>
    a962:	2a24      	cmp	r2, #36	; 0x24
    a964:	bf14      	ite	ne
    a966:	f100 0210 	addne.w	r2, r0, #16
    a96a:	f100 0218 	addeq.w	r2, r0, #24
    a96e:	f04f 0300 	mov.w	r3, #0
    a972:	e9c0 4402 	strd	r4, r4, [r0, #8]
    a976:	bf04      	itt	eq
    a978:	6104      	streq	r4, [r0, #16]
    a97a:	6144      	streq	r4, [r0, #20]
    a97c:	e9c2 3300 	strd	r3, r3, [r2]
    a980:	6093      	str	r3, [r2, #8]
    a982:	4628      	mov	r0, r5
    a984:	bd38      	pop	{r3, r4, r5, pc}
    a986:	4621      	mov	r1, r4
    a988:	f7fa fd7a 	bl	5480 <memset>
    a98c:	4628      	mov	r0, r5
    a98e:	bd38      	pop	{r3, r4, r5, pc}
    a990:	4602      	mov	r2, r0
    a992:	2300      	movs	r3, #0
    a994:	e9c2 3300 	strd	r3, r3, [r2]
    a998:	6093      	str	r3, [r2, #8]
    a99a:	4628      	mov	r0, r5
    a99c:	bd38      	pop	{r3, r4, r5, pc}
    a99e:	f100 0208 	add.w	r2, r0, #8
    a9a2:	e7f6      	b.n	a992 <_calloc_r+0x5a>
    a9a4:	f7fa fea2 	bl	56ec <__errno>
    a9a8:	230c      	movs	r3, #12
    a9aa:	2500      	movs	r5, #0
    a9ac:	6003      	str	r3, [r0, #0]
    a9ae:	e7e8      	b.n	a982 <_calloc_r+0x4a>

0000a9b0 <quorem>:
    a9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a9b4:	6903      	ldr	r3, [r0, #16]
    a9b6:	690c      	ldr	r4, [r1, #16]
    a9b8:	42a3      	cmp	r3, r4
    a9ba:	b083      	sub	sp, #12
    a9bc:	f2c0 8087 	blt.w	aace <quorem+0x11e>
    a9c0:	3c01      	subs	r4, #1
    a9c2:	f101 0514 	add.w	r5, r1, #20
    a9c6:	00a3      	lsls	r3, r4, #2
    a9c8:	f100 0814 	add.w	r8, r0, #20
    a9cc:	9300      	str	r3, [sp, #0]
    a9ce:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    a9d2:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
    a9d6:	3301      	adds	r3, #1
    a9d8:	4681      	mov	r9, r0
    a9da:	429a      	cmp	r2, r3
    a9dc:	eb08 0084 	add.w	r0, r8, r4, lsl #2
    a9e0:	eb05 0784 	add.w	r7, r5, r4, lsl #2
    a9e4:	9001      	str	r0, [sp, #4]
    a9e6:	fbb2 f6f3 	udiv	r6, r2, r3
    a9ea:	d33b      	bcc.n	aa64 <quorem+0xb4>
    a9ec:	f04f 0c00 	mov.w	ip, #0
    a9f0:	46ae      	mov	lr, r5
    a9f2:	4640      	mov	r0, r8
    a9f4:	46e2      	mov	sl, ip
    a9f6:	4663      	mov	r3, ip
    a9f8:	f85e bb04 	ldr.w	fp, [lr], #4
    a9fc:	6802      	ldr	r2, [r0, #0]
    a9fe:	fa1f fc8b 	uxth.w	ip, fp
    aa02:	fb06 330c 	mla	r3, r6, ip, r3
    aa06:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    aa0a:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
    aa0e:	fb06 cc0b 	mla	ip, r6, fp, ip
    aa12:	b29b      	uxth	r3, r3
    aa14:	ebaa 0303 	sub.w	r3, sl, r3
    aa18:	fa1f fa8c 	uxth.w	sl, ip
    aa1c:	fa13 f382 	uxtah	r3, r3, r2
    aa20:	ebca 4212 	rsb	r2, sl, r2, lsr #16
    aa24:	eb02 4223 	add.w	r2, r2, r3, asr #16
    aa28:	b29b      	uxth	r3, r3
    aa2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    aa2e:	4577      	cmp	r7, lr
    aa30:	f840 3b04 	str.w	r3, [r0], #4
    aa34:	ea4f 4a22 	mov.w	sl, r2, asr #16
    aa38:	ea4f 431c 	mov.w	r3, ip, lsr #16
    aa3c:	d2dc      	bcs.n	a9f8 <quorem+0x48>
    aa3e:	9b00      	ldr	r3, [sp, #0]
    aa40:	f858 3003 	ldr.w	r3, [r8, r3]
    aa44:	b973      	cbnz	r3, aa64 <quorem+0xb4>
    aa46:	9b01      	ldr	r3, [sp, #4]
    aa48:	3b04      	subs	r3, #4
    aa4a:	4598      	cmp	r8, r3
    aa4c:	d304      	bcc.n	aa58 <quorem+0xa8>
    aa4e:	e007      	b.n	aa60 <quorem+0xb0>
    aa50:	4598      	cmp	r8, r3
    aa52:	f104 34ff 	add.w	r4, r4, #4294967295
    aa56:	d203      	bcs.n	aa60 <quorem+0xb0>
    aa58:	f853 2904 	ldr.w	r2, [r3], #-4
    aa5c:	2a00      	cmp	r2, #0
    aa5e:	d0f7      	beq.n	aa50 <quorem+0xa0>
    aa60:	f8c9 4010 	str.w	r4, [r9, #16]
    aa64:	4648      	mov	r0, r9
    aa66:	f7fc f8c3 	bl	6bf0 <__mcmp>
    aa6a:	2800      	cmp	r0, #0
    aa6c:	db2b      	blt.n	aac6 <quorem+0x116>
    aa6e:	3601      	adds	r6, #1
    aa70:	4641      	mov	r1, r8
    aa72:	2300      	movs	r3, #0
    aa74:	f855 0b04 	ldr.w	r0, [r5], #4
    aa78:	f8d1 c000 	ldr.w	ip, [r1]
    aa7c:	b282      	uxth	r2, r0
    aa7e:	1a9a      	subs	r2, r3, r2
    aa80:	0c03      	lsrs	r3, r0, #16
    aa82:	fa12 f28c 	uxtah	r2, r2, ip
    aa86:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
    aa8a:	eb03 4322 	add.w	r3, r3, r2, asr #16
    aa8e:	b292      	uxth	r2, r2
    aa90:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    aa94:	42af      	cmp	r7, r5
    aa96:	f841 2b04 	str.w	r2, [r1], #4
    aa9a:	ea4f 4323 	mov.w	r3, r3, asr #16
    aa9e:	d2e9      	bcs.n	aa74 <quorem+0xc4>
    aaa0:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
    aaa4:	eb08 0384 	add.w	r3, r8, r4, lsl #2
    aaa8:	b96a      	cbnz	r2, aac6 <quorem+0x116>
    aaaa:	3b04      	subs	r3, #4
    aaac:	4598      	cmp	r8, r3
    aaae:	d304      	bcc.n	aaba <quorem+0x10a>
    aab0:	e007      	b.n	aac2 <quorem+0x112>
    aab2:	4598      	cmp	r8, r3
    aab4:	f104 34ff 	add.w	r4, r4, #4294967295
    aab8:	d203      	bcs.n	aac2 <quorem+0x112>
    aaba:	f853 2904 	ldr.w	r2, [r3], #-4
    aabe:	2a00      	cmp	r2, #0
    aac0:	d0f7      	beq.n	aab2 <quorem+0x102>
    aac2:	f8c9 4010 	str.w	r4, [r9, #16]
    aac6:	4630      	mov	r0, r6
    aac8:	b003      	add	sp, #12
    aaca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aace:	2000      	movs	r0, #0
    aad0:	b003      	add	sp, #12
    aad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aad6:	bf00      	nop

0000aad8 <_dtoa_r>:
    aad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aadc:	ed2d 8b02 	vpush	{d8}
    aae0:	b08f      	sub	sp, #60	; 0x3c
    aae2:	ed8d 0b02 	vstr	d0, [sp, #8]
    aae6:	9101      	str	r1, [sp, #4]
    aae8:	6b81      	ldr	r1, [r0, #56]	; 0x38
    aaea:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    aaec:	9305      	str	r3, [sp, #20]
    aaee:	ec57 6b10 	vmov	r6, r7, d0
    aaf2:	4604      	mov	r4, r0
    aaf4:	4693      	mov	fp, r2
    aaf6:	b141      	cbz	r1, ab0a <_dtoa_r+0x32>
    aaf8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    aafa:	604a      	str	r2, [r1, #4]
    aafc:	2301      	movs	r3, #1
    aafe:	4093      	lsls	r3, r2
    ab00:	608b      	str	r3, [r1, #8]
    ab02:	f7fb fdbd 	bl	6680 <_Bfree>
    ab06:	2300      	movs	r3, #0
    ab08:	63a3      	str	r3, [r4, #56]	; 0x38
    ab0a:	f1b7 0800 	subs.w	r8, r7, #0
    ab0e:	bfb4      	ite	lt
    ab10:	2301      	movlt	r3, #1
    ab12:	2300      	movge	r3, #0
    ab14:	602b      	str	r3, [r5, #0]
    ab16:	4bbe      	ldr	r3, [pc, #760]	; (ae10 <_dtoa_r+0x338>)
    ab18:	bfbc      	itt	lt
    ab1a:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
    ab1e:	f8cd 800c 	strlt.w	r8, [sp, #12]
    ab22:	ea33 0308 	bics.w	r3, r3, r8
    ab26:	f000 809f 	beq.w	ac68 <_dtoa_r+0x190>
    ab2a:	ed9d 8b02 	vldr	d8, [sp, #8]
    ab2e:	eeb5 8b40 	vcmp.f64	d8, #0.0
    ab32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ab36:	d111      	bne.n	ab5c <_dtoa_r+0x84>
    ab38:	9a05      	ldr	r2, [sp, #20]
    ab3a:	2301      	movs	r3, #1
    ab3c:	6013      	str	r3, [r2, #0]
    ab3e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    ab40:	2b00      	cmp	r3, #0
    ab42:	f000 823f 	beq.w	afc4 <_dtoa_r+0x4ec>
    ab46:	4bb3      	ldr	r3, [pc, #716]	; (ae14 <_dtoa_r+0x33c>)
    ab48:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    ab4a:	6013      	str	r3, [r2, #0]
    ab4c:	3b01      	subs	r3, #1
    ab4e:	9300      	str	r3, [sp, #0]
    ab50:	9800      	ldr	r0, [sp, #0]
    ab52:	b00f      	add	sp, #60	; 0x3c
    ab54:	ecbd 8b02 	vpop	{d8}
    ab58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ab5c:	aa0c      	add	r2, sp, #48	; 0x30
    ab5e:	a90d      	add	r1, sp, #52	; 0x34
    ab60:	4620      	mov	r0, r4
    ab62:	eeb0 0b48 	vmov.f64	d0, d8
    ab66:	f7fc f9a3 	bl	6eb0 <__d2b>
    ab6a:	ea5f 5318 	movs.w	r3, r8, lsr #20
    ab6e:	4605      	mov	r5, r0
    ab70:	f040 8092 	bne.w	ac98 <_dtoa_r+0x1c0>
    ab74:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
    ab78:	440b      	add	r3, r1
    ab7a:	f203 4232 	addw	r2, r3, #1074	; 0x432
    ab7e:	2a20      	cmp	r2, #32
    ab80:	f340 82fa 	ble.w	b178 <_dtoa_r+0x6a0>
    ab84:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
    ab88:	fa08 f802 	lsl.w	r8, r8, r2
    ab8c:	f203 4212 	addw	r2, r3, #1042	; 0x412
    ab90:	40d6      	lsrs	r6, r2
    ab92:	ea48 0206 	orr.w	r2, r8, r6
    ab96:	ee07 2a10 	vmov	s14, r2
    ab9a:	eeb8 7b47 	vcvt.f64.u32	d7, s14
    ab9e:	1e58      	subs	r0, r3, #1
    aba0:	ee17 6a90 	vmov	r6, s15
    aba4:	ec53 2b17 	vmov	r2, r3, d7
    aba8:	f04f 0a01 	mov.w	sl, #1
    abac:	f1a6 73f8 	sub.w	r3, r6, #32505856	; 0x1f00000
    abb0:	ed9f 3b91 	vldr	d3, [pc, #580]	; adf8 <_dtoa_r+0x320>
    abb4:	ed9f 7b92 	vldr	d7, [pc, #584]	; ae00 <_dtoa_r+0x328>
    abb8:	ed9f 5b93 	vldr	d5, [pc, #588]	; ae08 <_dtoa_r+0x330>
    abbc:	ee06 0a90 	vmov	s13, r0
    abc0:	ec43 2b12 	vmov	d2, r2, r3
    abc4:	eeb8 4be6 	vcvt.f64.s32	d4, s13
    abc8:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
    abcc:	ee32 6b46 	vsub.f64	d6, d2, d6
    abd0:	eea6 7b03 	vfma.f64	d7, d6, d3
    abd4:	eea4 7b05 	vfma.f64	d7, d4, d5
    abd8:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    abdc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    abe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    abe4:	ee16 7a90 	vmov	r7, s13
    abe8:	d508      	bpl.n	abfc <_dtoa_r+0x124>
    abea:	eeb8 6be6 	vcvt.f64.s32	d6, s13
    abee:	eeb4 6b47 	vcmp.f64	d6, d7
    abf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    abf6:	bf18      	it	ne
    abf8:	f107 37ff 	addne.w	r7, r7, #4294967295
    abfc:	2f16      	cmp	r7, #22
    abfe:	f200 8145 	bhi.w	ae8c <_dtoa_r+0x3b4>
    ac02:	4b85      	ldr	r3, [pc, #532]	; (ae18 <_dtoa_r+0x340>)
    ac04:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    ac08:	ed93 7b00 	vldr	d7, [r3]
    ac0c:	eeb4 8bc7 	vcmpe.f64	d8, d7
    ac10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ac14:	d557      	bpl.n	acc6 <_dtoa_r+0x1ee>
    ac16:	1a09      	subs	r1, r1, r0
    ac18:	2300      	movs	r3, #0
    ac1a:	f1b1 0801 	subs.w	r8, r1, #1
    ac1e:	f107 37ff 	add.w	r7, r7, #4294967295
    ac22:	930a      	str	r3, [sp, #40]	; 0x28
    ac24:	f100 8139 	bmi.w	ae9a <_dtoa_r+0x3c2>
    ac28:	2300      	movs	r3, #0
    ac2a:	9306      	str	r3, [sp, #24]
    ac2c:	2f00      	cmp	r7, #0
    ac2e:	da52      	bge.n	acd6 <_dtoa_r+0x1fe>
    ac30:	9b06      	ldr	r3, [sp, #24]
    ac32:	9704      	str	r7, [sp, #16]
    ac34:	1bdb      	subs	r3, r3, r7
    ac36:	9306      	str	r3, [sp, #24]
    ac38:	427b      	negs	r3, r7
    ac3a:	9308      	str	r3, [sp, #32]
    ac3c:	9b01      	ldr	r3, [sp, #4]
    ac3e:	2b09      	cmp	r3, #9
    ac40:	f04f 0700 	mov.w	r7, #0
    ac44:	d84e      	bhi.n	ace4 <_dtoa_r+0x20c>
    ac46:	2b05      	cmp	r3, #5
    ac48:	f340 829d 	ble.w	b186 <_dtoa_r+0x6ae>
    ac4c:	3b04      	subs	r3, #4
    ac4e:	9301      	str	r3, [sp, #4]
    ac50:	2600      	movs	r6, #0
    ac52:	9b01      	ldr	r3, [sp, #4]
    ac54:	1e9a      	subs	r2, r3, #2
    ac56:	2a03      	cmp	r2, #3
    ac58:	f200 8125 	bhi.w	aea6 <_dtoa_r+0x3ce>
    ac5c:	e8df f012 	tbh	[pc, r2, lsl #1]
    ac60:	03a703aa 	.word	0x03a703aa
    ac64:	037e039d 	.word	0x037e039d
    ac68:	9a05      	ldr	r2, [sp, #20]
    ac6a:	f3c8 0813 	ubfx	r8, r8, #0, #20
    ac6e:	f242 730f 	movw	r3, #9999	; 0x270f
    ac72:	ea58 0806 	orrs.w	r8, r8, r6
    ac76:	6013      	str	r3, [r2, #0]
    ac78:	d11e      	bne.n	acb8 <_dtoa_r+0x1e0>
    ac7a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    ac7c:	2b00      	cmp	r3, #0
    ac7e:	f000 8591 	beq.w	b7a4 <_dtoa_r+0xccc>
    ac82:	4b66      	ldr	r3, [pc, #408]	; (ae1c <_dtoa_r+0x344>)
    ac84:	9300      	str	r3, [sp, #0]
    ac86:	3308      	adds	r3, #8
    ac88:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    ac8a:	9800      	ldr	r0, [sp, #0]
    ac8c:	6013      	str	r3, [r2, #0]
    ac8e:	b00f      	add	sp, #60	; 0x3c
    ac90:	ecbd 8b02 	vpop	{d8}
    ac94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ac98:	ee18 6a90 	vmov	r6, s17
    ac9c:	f3c6 0613 	ubfx	r6, r6, #0, #20
    aca0:	f2a3 30ff 	subw	r0, r3, #1023	; 0x3ff
    aca4:	ec53 2b18 	vmov	r2, r3, d8
    aca8:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
    acac:	990c      	ldr	r1, [sp, #48]	; 0x30
    acae:	f04f 0a00 	mov.w	sl, #0
    acb2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    acb6:	e77b      	b.n	abb0 <_dtoa_r+0xd8>
    acb8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    acba:	2b00      	cmp	r3, #0
    acbc:	f040 833b 	bne.w	b336 <_dtoa_r+0x85e>
    acc0:	4b57      	ldr	r3, [pc, #348]	; (ae20 <_dtoa_r+0x348>)
    acc2:	9300      	str	r3, [sp, #0]
    acc4:	e744      	b.n	ab50 <_dtoa_r+0x78>
    acc6:	1a09      	subs	r1, r1, r0
    acc8:	2300      	movs	r3, #0
    acca:	f1b1 0801 	subs.w	r8, r1, #1
    acce:	930a      	str	r3, [sp, #40]	; 0x28
    acd0:	f100 80e3 	bmi.w	ae9a <_dtoa_r+0x3c2>
    acd4:	9306      	str	r3, [sp, #24]
    acd6:	2300      	movs	r3, #0
    acd8:	9308      	str	r3, [sp, #32]
    acda:	9b01      	ldr	r3, [sp, #4]
    acdc:	9704      	str	r7, [sp, #16]
    acde:	2b09      	cmp	r3, #9
    ace0:	44b8      	add	r8, r7
    ace2:	d9b0      	bls.n	ac46 <_dtoa_r+0x16e>
    ace4:	2300      	movs	r3, #0
    ace6:	2601      	movs	r6, #1
    ace8:	9301      	str	r3, [sp, #4]
    acea:	9607      	str	r6, [sp, #28]
    acec:	f04f 39ff 	mov.w	r9, #4294967295
    acf0:	469b      	mov	fp, r3
    acf2:	2100      	movs	r1, #0
    acf4:	63e1      	str	r1, [r4, #60]	; 0x3c
    acf6:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    acfa:	4620      	mov	r0, r4
    acfc:	f7fb fc9a 	bl	6634 <_Balloc>
    ad00:	9000      	str	r0, [sp, #0]
    ad02:	2800      	cmp	r0, #0
    ad04:	f000 8540 	beq.w	b788 <_dtoa_r+0xcb0>
    ad08:	9b00      	ldr	r3, [sp, #0]
    ad0a:	63a3      	str	r3, [r4, #56]	; 0x38
    ad0c:	f1b9 0f0e 	cmp.w	r9, #14
    ad10:	f200 80dc 	bhi.w	aecc <_dtoa_r+0x3f4>
    ad14:	2e00      	cmp	r6, #0
    ad16:	f000 80d9 	beq.w	aecc <_dtoa_r+0x3f4>
    ad1a:	9b04      	ldr	r3, [sp, #16]
    ad1c:	2b00      	cmp	r3, #0
    ad1e:	f340 83de 	ble.w	b4de <_dtoa_r+0xa06>
    ad22:	4a3d      	ldr	r2, [pc, #244]	; (ae18 <_dtoa_r+0x340>)
    ad24:	f003 010f 	and.w	r1, r3, #15
    ad28:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    ad2c:	ed92 7b00 	vldr	d7, [r2]
    ad30:	111a      	asrs	r2, r3, #4
    ad32:	05db      	lsls	r3, r3, #23
    ad34:	f140 8382 	bpl.w	b43c <_dtoa_r+0x964>
    ad38:	493a      	ldr	r1, [pc, #232]	; (ae24 <_dtoa_r+0x34c>)
    ad3a:	ed91 6b08 	vldr	d6, [r1, #32]
    ad3e:	f002 020f 	and.w	r2, r2, #15
    ad42:	2003      	movs	r0, #3
    ad44:	ee88 5b06 	vdiv.f64	d5, d8, d6
    ad48:	b15a      	cbz	r2, ad62 <_dtoa_r+0x28a>
    ad4a:	4936      	ldr	r1, [pc, #216]	; (ae24 <_dtoa_r+0x34c>)
    ad4c:	07d6      	lsls	r6, r2, #31
    ad4e:	d504      	bpl.n	ad5a <_dtoa_r+0x282>
    ad50:	ed91 6b00 	vldr	d6, [r1]
    ad54:	3001      	adds	r0, #1
    ad56:	ee27 7b06 	vmul.f64	d7, d7, d6
    ad5a:	1052      	asrs	r2, r2, #1
    ad5c:	f101 0108 	add.w	r1, r1, #8
    ad60:	d1f4      	bne.n	ad4c <_dtoa_r+0x274>
    ad62:	ee85 6b07 	vdiv.f64	d6, d5, d7
    ad66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ad68:	b13b      	cbz	r3, ad7a <_dtoa_r+0x2a2>
    ad6a:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    ad6e:	eeb4 6bc7 	vcmpe.f64	d6, d7
    ad72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ad76:	f100 84ae 	bmi.w	b6d6 <_dtoa_r+0xbfe>
    ad7a:	ee07 0a90 	vmov	s15, r0
    ad7e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
    ad82:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    ad86:	eea5 7b06 	vfma.f64	d7, d5, d6
    ad8a:	ee17 2a90 	vmov	r2, s15
    ad8e:	ec51 0b17 	vmov	r0, r1, d7
    ad92:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
    ad96:	f1b9 0f00 	cmp.w	r9, #0
    ad9a:	f000 8388 	beq.w	b4ae <_dtoa_r+0x9d6>
    ad9e:	9e04      	ldr	r6, [sp, #16]
    ada0:	464a      	mov	r2, r9
    ada2:	9b07      	ldr	r3, [sp, #28]
    ada4:	2b00      	cmp	r3, #0
    ada6:	f000 8447 	beq.w	b638 <_dtoa_r+0xb60>
    adaa:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
    adae:	4b1a      	ldr	r3, [pc, #104]	; (ae18 <_dtoa_r+0x340>)
    adb0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
    adb4:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
    adb8:	eeb8 7be4 	vcvt.f64.s32	d7, s9
    adbc:	ee36 7b47 	vsub.f64	d7, d6, d7
    adc0:	ed1c 6b02 	vldr	d6, [ip, #-8]
    adc4:	ee83 5b06 	vdiv.f64	d5, d3, d6
    adc8:	ec41 0b16 	vmov	d6, r0, r1
    adcc:	ee14 0a90 	vmov	r0, s9
    add0:	ee35 5b46 	vsub.f64	d5, d5, d6
    add4:	9900      	ldr	r1, [sp, #0]
    add6:	eeb4 5bc7 	vcmpe.f64	d5, d7
    adda:	3030      	adds	r0, #48	; 0x30
    addc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ade0:	f801 0b01 	strb.w	r0, [r1], #1
    ade4:	f300 84ac 	bgt.w	b740 <_dtoa_r+0xc68>
    ade8:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
    adec:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    adf0:	f04f 0c00 	mov.w	ip, #0
    adf4:	e031      	b.n	ae5a <_dtoa_r+0x382>
    adf6:	bf00      	nop
    adf8:	636f4361 	.word	0x636f4361
    adfc:	3fd287a7 	.word	0x3fd287a7
    ae00:	8b60c8b3 	.word	0x8b60c8b3
    ae04:	3fc68a28 	.word	0x3fc68a28
    ae08:	509f79fb 	.word	0x509f79fb
    ae0c:	3fd34413 	.word	0x3fd34413
    ae10:	7ff00000 	.word	0x7ff00000
    ae14:	2000081d 	.word	0x2000081d
    ae18:	200002a8 	.word	0x200002a8
    ae1c:	20000748 	.word	0x20000748
    ae20:	20000754 	.word	0x20000754
    ae24:	20000280 	.word	0x20000280
    ae28:	f10c 0c01 	add.w	ip, ip, #1
    ae2c:	4594      	cmp	ip, r2
    ae2e:	da4d      	bge.n	aecc <_dtoa_r+0x3f4>
    ae30:	ee27 7b04 	vmul.f64	d7, d7, d4
    ae34:	ee25 5b04 	vmul.f64	d5, d5, d4
    ae38:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    ae3c:	ee16 3a90 	vmov	r3, s13
    ae40:	eeb8 3be6 	vcvt.f64.s32	d3, s13
    ae44:	3330      	adds	r3, #48	; 0x30
    ae46:	ee37 7b43 	vsub.f64	d7, d7, d3
    ae4a:	eeb4 7bc5 	vcmpe.f64	d7, d5
    ae4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ae52:	f801 3b01 	strb.w	r3, [r1], #1
    ae56:	f100 8473 	bmi.w	b740 <_dtoa_r+0xc68>
    ae5a:	ee32 6b47 	vsub.f64	d6, d2, d7
    ae5e:	eeb4 6bc5 	vcmpe.f64	d6, d5
    ae62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ae66:	d5df      	bpl.n	ae28 <_dtoa_r+0x350>
    ae68:	9a00      	ldr	r2, [sp, #0]
    ae6a:	9604      	str	r6, [sp, #16]
    ae6c:	e002      	b.n	ae74 <_dtoa_r+0x39c>
    ae6e:	428a      	cmp	r2, r1
    ae70:	f000 8450 	beq.w	b714 <_dtoa_r+0xc3c>
    ae74:	4689      	mov	r9, r1
    ae76:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
    ae7a:	2b39      	cmp	r3, #57	; 0x39
    ae7c:	d0f7      	beq.n	ae6e <_dtoa_r+0x396>
    ae7e:	3301      	adds	r3, #1
    ae80:	b2db      	uxtb	r3, r3
    ae82:	700b      	strb	r3, [r1, #0]
    ae84:	9b04      	ldr	r3, [sp, #16]
    ae86:	3301      	adds	r3, #1
    ae88:	9304      	str	r3, [sp, #16]
    ae8a:	e155      	b.n	b138 <_dtoa_r+0x660>
    ae8c:	1a09      	subs	r1, r1, r0
    ae8e:	2301      	movs	r3, #1
    ae90:	f1b1 0801 	subs.w	r8, r1, #1
    ae94:	930a      	str	r3, [sp, #40]	; 0x28
    ae96:	f57f aec7 	bpl.w	ac28 <_dtoa_r+0x150>
    ae9a:	f1c1 0301 	rsb	r3, r1, #1
    ae9e:	9306      	str	r3, [sp, #24]
    aea0:	f04f 0800 	mov.w	r8, #0
    aea4:	e6c2      	b.n	ac2c <_dtoa_r+0x154>
    aea6:	2600      	movs	r6, #0
    aea8:	63e6      	str	r6, [r4, #60]	; 0x3c
    aeaa:	4631      	mov	r1, r6
    aeac:	4620      	mov	r0, r4
    aeae:	f7fb fbc1 	bl	6634 <_Balloc>
    aeb2:	9000      	str	r0, [sp, #0]
    aeb4:	2800      	cmp	r0, #0
    aeb6:	f000 8467 	beq.w	b788 <_dtoa_r+0xcb0>
    aeba:	9b00      	ldr	r3, [sp, #0]
    aebc:	63a3      	str	r3, [r4, #56]	; 0x38
    aebe:	f04f 33ff 	mov.w	r3, #4294967295
    aec2:	930b      	str	r3, [sp, #44]	; 0x2c
    aec4:	4699      	mov	r9, r3
    aec6:	2301      	movs	r3, #1
    aec8:	46b3      	mov	fp, r6
    aeca:	9307      	str	r3, [sp, #28]
    aecc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    aece:	2a00      	cmp	r2, #0
    aed0:	db55      	blt.n	af7e <_dtoa_r+0x4a6>
    aed2:	9904      	ldr	r1, [sp, #16]
    aed4:	290e      	cmp	r1, #14
    aed6:	dc52      	bgt.n	af7e <_dtoa_r+0x4a6>
    aed8:	4bb7      	ldr	r3, [pc, #732]	; (b1b8 <_dtoa_r+0x6e0>)
    aeda:	f1bb 0f00 	cmp.w	fp, #0
    aede:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    aee2:	ed93 6b00 	vldr	d6, [r3]
    aee6:	da15      	bge.n	af14 <_dtoa_r+0x43c>
    aee8:	f1b9 0f00 	cmp.w	r9, #0
    aeec:	dc12      	bgt.n	af14 <_dtoa_r+0x43c>
    aeee:	f040 82f2 	bne.w	b4d6 <_dtoa_r+0x9fe>
    aef2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
    aef6:	ee26 7b07 	vmul.f64	d7, d6, d7
    aefa:	eeb4 8bc7 	vcmpe.f64	d8, d7
    aefe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    af02:	46ca      	mov	sl, r9
    af04:	464e      	mov	r6, r9
    af06:	f200 826d 	bhi.w	b3e4 <_dtoa_r+0x90c>
    af0a:	f8dd 8000 	ldr.w	r8, [sp]
    af0e:	ea6f 0b0b 	mvn.w	fp, fp
    af12:	e270      	b.n	b3f6 <_dtoa_r+0x91e>
    af14:	ee88 7b06 	vdiv.f64	d7, d8, d6
    af18:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    af1c:	9900      	ldr	r1, [sp, #0]
    af1e:	ee17 3a10 	vmov	r3, s14
    af22:	f1b9 0f01 	cmp.w	r9, #1
    af26:	f103 0330 	add.w	r3, r3, #48	; 0x30
    af2a:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
    af2e:	f801 3b01 	strb.w	r3, [r1], #1
    af32:	eea5 8b46 	vfms.f64	d8, d5, d6
    af36:	f000 8334 	beq.w	b5a2 <_dtoa_r+0xaca>
    af3a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    af3e:	2301      	movs	r3, #1
    af40:	e011      	b.n	af66 <_dtoa_r+0x48e>
    af42:	ee88 7b06 	vdiv.f64	d7, d8, d6
    af46:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    af4a:	3301      	adds	r3, #1
    af4c:	ee17 2a10 	vmov	r2, s14
    af50:	454b      	cmp	r3, r9
    af52:	f102 0230 	add.w	r2, r2, #48	; 0x30
    af56:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
    af5a:	f801 2b01 	strb.w	r2, [r1], #1
    af5e:	eea5 8b46 	vfms.f64	d8, d5, d6
    af62:	f000 831e 	beq.w	b5a2 <_dtoa_r+0xaca>
    af66:	ee28 8b04 	vmul.f64	d8, d8, d4
    af6a:	eeb5 8b40 	vcmp.f64	d8, #0.0
    af6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    af72:	d1e6      	bne.n	af42 <_dtoa_r+0x46a>
    af74:	9b04      	ldr	r3, [sp, #16]
    af76:	3301      	adds	r3, #1
    af78:	9304      	str	r3, [sp, #16]
    af7a:	4689      	mov	r9, r1
    af7c:	e0dc      	b.n	b138 <_dtoa_r+0x660>
    af7e:	9b07      	ldr	r3, [sp, #28]
    af80:	b343      	cbz	r3, afd4 <_dtoa_r+0x4fc>
    af82:	9b01      	ldr	r3, [sp, #4]
    af84:	2b01      	cmp	r3, #1
    af86:	f340 8276 	ble.w	b476 <_dtoa_r+0x99e>
    af8a:	9b08      	ldr	r3, [sp, #32]
    af8c:	f109 3aff 	add.w	sl, r9, #4294967295
    af90:	4553      	cmp	r3, sl
    af92:	f280 823f 	bge.w	b414 <_dtoa_r+0x93c>
    af96:	9b08      	ldr	r3, [sp, #32]
    af98:	f8cd a020 	str.w	sl, [sp, #32]
    af9c:	ebaa 0203 	sub.w	r2, sl, r3
    afa0:	4417      	add	r7, r2
    afa2:	f04f 0a00 	mov.w	sl, #0
    afa6:	f1b9 0f00 	cmp.w	r9, #0
    afaa:	f2c0 8325 	blt.w	b5f8 <_dtoa_r+0xb20>
    afae:	9b06      	ldr	r3, [sp, #24]
    afb0:	9309      	str	r3, [sp, #36]	; 0x24
    afb2:	444b      	add	r3, r9
    afb4:	44c8      	add	r8, r9
    afb6:	9306      	str	r3, [sp, #24]
    afb8:	2101      	movs	r1, #1
    afba:	4620      	mov	r0, r4
    afbc:	f7fb fc64 	bl	6888 <__i2b>
    afc0:	4606      	mov	r6, r0
    afc2:	e00c      	b.n	afde <_dtoa_r+0x506>
    afc4:	4b7d      	ldr	r3, [pc, #500]	; (b1bc <_dtoa_r+0x6e4>)
    afc6:	9300      	str	r3, [sp, #0]
    afc8:	9800      	ldr	r0, [sp, #0]
    afca:	b00f      	add	sp, #60	; 0x3c
    afcc:	ecbd 8b02 	vpop	{d8}
    afd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    afd4:	9b06      	ldr	r3, [sp, #24]
    afd6:	f8dd a020 	ldr.w	sl, [sp, #32]
    afda:	9e07      	ldr	r6, [sp, #28]
    afdc:	9309      	str	r3, [sp, #36]	; 0x24
    afde:	9b09      	ldr	r3, [sp, #36]	; 0x24
    afe0:	b16b      	cbz	r3, affe <_dtoa_r+0x526>
    afe2:	f1b8 0f00 	cmp.w	r8, #0
    afe6:	dd0a      	ble.n	affe <_dtoa_r+0x526>
    afe8:	4543      	cmp	r3, r8
    afea:	9906      	ldr	r1, [sp, #24]
    afec:	461a      	mov	r2, r3
    afee:	bfa8      	it	ge
    aff0:	4642      	movge	r2, r8
    aff2:	1a89      	subs	r1, r1, r2
    aff4:	1a9b      	subs	r3, r3, r2
    aff6:	9106      	str	r1, [sp, #24]
    aff8:	9309      	str	r3, [sp, #36]	; 0x24
    affa:	eba8 0802 	sub.w	r8, r8, r2
    affe:	9b08      	ldr	r3, [sp, #32]
    b000:	b163      	cbz	r3, b01c <_dtoa_r+0x544>
    b002:	9b07      	ldr	r3, [sp, #28]
    b004:	2b00      	cmp	r3, #0
    b006:	f000 82a7 	beq.w	b558 <_dtoa_r+0xa80>
    b00a:	f1ba 0f00 	cmp.w	sl, #0
    b00e:	f300 8204 	bgt.w	b41a <_dtoa_r+0x942>
    b012:	9b08      	ldr	r3, [sp, #32]
    b014:	ebb3 020a 	subs.w	r2, r3, sl
    b018:	f040 82ff 	bne.w	b61a <_dtoa_r+0xb42>
    b01c:	2101      	movs	r1, #1
    b01e:	4620      	mov	r0, r4
    b020:	f7fb fc32 	bl	6888 <__i2b>
    b024:	2f00      	cmp	r7, #0
    b026:	4682      	mov	sl, r0
    b028:	f300 80af 	bgt.w	b18a <_dtoa_r+0x6b2>
    b02c:	9b01      	ldr	r3, [sp, #4]
    b02e:	2b01      	cmp	r3, #1
    b030:	f340 8187 	ble.w	b342 <_dtoa_r+0x86a>
    b034:	2300      	movs	r3, #0
    b036:	9308      	str	r3, [sp, #32]
    b038:	2001      	movs	r0, #1
    b03a:	2f00      	cmp	r7, #0
    b03c:	f040 80b1 	bne.w	b1a2 <_dtoa_r+0x6ca>
    b040:	4440      	add	r0, r8
    b042:	f010 001f 	ands.w	r0, r0, #31
    b046:	f000 817a 	beq.w	b33e <_dtoa_r+0x866>
    b04a:	f1c0 0220 	rsb	r2, r0, #32
    b04e:	2a04      	cmp	r2, #4
    b050:	f300 8088 	bgt.w	b164 <_dtoa_r+0x68c>
    b054:	f040 81f6 	bne.w	b444 <_dtoa_r+0x96c>
    b058:	9b06      	ldr	r3, [sp, #24]
    b05a:	2b00      	cmp	r3, #0
    b05c:	dd05      	ble.n	b06a <_dtoa_r+0x592>
    b05e:	4629      	mov	r1, r5
    b060:	461a      	mov	r2, r3
    b062:	4620      	mov	r0, r4
    b064:	f7fb fd4c 	bl	6b00 <__lshift>
    b068:	4605      	mov	r5, r0
    b06a:	f1b8 0f00 	cmp.w	r8, #0
    b06e:	dd05      	ble.n	b07c <_dtoa_r+0x5a4>
    b070:	4651      	mov	r1, sl
    b072:	4642      	mov	r2, r8
    b074:	4620      	mov	r0, r4
    b076:	f7fb fd43 	bl	6b00 <__lshift>
    b07a:	4682      	mov	sl, r0
    b07c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b07e:	2b00      	cmp	r3, #0
    b080:	f040 813f 	bne.w	b302 <_dtoa_r+0x82a>
    b084:	f1b9 0f00 	cmp.w	r9, #0
    b088:	f340 8125 	ble.w	b2d6 <_dtoa_r+0x7fe>
    b08c:	9b07      	ldr	r3, [sp, #28]
    b08e:	2b00      	cmp	r3, #0
    b090:	f040 80a3 	bne.w	b1da <_dtoa_r+0x702>
    b094:	9b04      	ldr	r3, [sp, #16]
    b096:	3301      	adds	r3, #1
    b098:	9304      	str	r3, [sp, #16]
    b09a:	f8dd 8000 	ldr.w	r8, [sp]
    b09e:	2701      	movs	r7, #1
    b0a0:	e007      	b.n	b0b2 <_dtoa_r+0x5da>
    b0a2:	4629      	mov	r1, r5
    b0a4:	2300      	movs	r3, #0
    b0a6:	220a      	movs	r2, #10
    b0a8:	4620      	mov	r0, r4
    b0aa:	f7fb faf3 	bl	6694 <__multadd>
    b0ae:	3701      	adds	r7, #1
    b0b0:	4605      	mov	r5, r0
    b0b2:	4651      	mov	r1, sl
    b0b4:	4628      	mov	r0, r5
    b0b6:	f7ff fc7b 	bl	a9b0 <quorem>
    b0ba:	45b9      	cmp	r9, r7
    b0bc:	f100 0030 	add.w	r0, r0, #48	; 0x30
    b0c0:	f808 0b01 	strb.w	r0, [r8], #1
    b0c4:	dced      	bgt.n	b0a2 <_dtoa_r+0x5ca>
    b0c6:	f1b9 0f00 	cmp.w	r9, #0
    b0ca:	9a00      	ldr	r2, [sp, #0]
    b0cc:	bfcc      	ite	gt
    b0ce:	46cb      	movgt	fp, r9
    b0d0:	f04f 0b01 	movle.w	fp, #1
    b0d4:	4603      	mov	r3, r0
    b0d6:	4493      	add	fp, r2
    b0d8:	2700      	movs	r7, #0
    b0da:	4629      	mov	r1, r5
    b0dc:	2201      	movs	r2, #1
    b0de:	4620      	mov	r0, r4
    b0e0:	9301      	str	r3, [sp, #4]
    b0e2:	f7fb fd0d 	bl	6b00 <__lshift>
    b0e6:	4651      	mov	r1, sl
    b0e8:	4605      	mov	r5, r0
    b0ea:	f7fb fd81 	bl	6bf0 <__mcmp>
    b0ee:	2800      	cmp	r0, #0
    b0f0:	f340 81af 	ble.w	b452 <_dtoa_r+0x97a>
    b0f4:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
    b0f8:	9a00      	ldr	r2, [sp, #0]
    b0fa:	f10b 3bff 	add.w	fp, fp, #4294967295
    b0fe:	e004      	b.n	b10a <_dtoa_r+0x632>
    b100:	455a      	cmp	r2, fp
    b102:	f000 81b1 	beq.w	b468 <_dtoa_r+0x990>
    b106:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
    b10a:	2b39      	cmp	r3, #57	; 0x39
    b10c:	f10b 0901 	add.w	r9, fp, #1
    b110:	d0f6      	beq.n	b100 <_dtoa_r+0x628>
    b112:	3301      	adds	r3, #1
    b114:	f88b 3000 	strb.w	r3, [fp]
    b118:	4651      	mov	r1, sl
    b11a:	4620      	mov	r0, r4
    b11c:	f7fb fab0 	bl	6680 <_Bfree>
    b120:	b156      	cbz	r6, b138 <_dtoa_r+0x660>
    b122:	b12f      	cbz	r7, b130 <_dtoa_r+0x658>
    b124:	42b7      	cmp	r7, r6
    b126:	d003      	beq.n	b130 <_dtoa_r+0x658>
    b128:	4639      	mov	r1, r7
    b12a:	4620      	mov	r0, r4
    b12c:	f7fb faa8 	bl	6680 <_Bfree>
    b130:	4631      	mov	r1, r6
    b132:	4620      	mov	r0, r4
    b134:	f7fb faa4 	bl	6680 <_Bfree>
    b138:	4629      	mov	r1, r5
    b13a:	4620      	mov	r0, r4
    b13c:	f7fb faa0 	bl	6680 <_Bfree>
    b140:	2300      	movs	r3, #0
    b142:	f889 3000 	strb.w	r3, [r9]
    b146:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    b14a:	601a      	str	r2, [r3, #0]
    b14c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    b14e:	2b00      	cmp	r3, #0
    b150:	f43f acfe 	beq.w	ab50 <_dtoa_r+0x78>
    b154:	9800      	ldr	r0, [sp, #0]
    b156:	f8c3 9000 	str.w	r9, [r3]
    b15a:	b00f      	add	sp, #60	; 0x3c
    b15c:	ecbd 8b02 	vpop	{d8}
    b160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b164:	f1c0 001c 	rsb	r0, r0, #28
    b168:	9b06      	ldr	r3, [sp, #24]
    b16a:	4403      	add	r3, r0
    b16c:	9306      	str	r3, [sp, #24]
    b16e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b170:	4403      	add	r3, r0
    b172:	9309      	str	r3, [sp, #36]	; 0x24
    b174:	4480      	add	r8, r0
    b176:	e76f      	b.n	b058 <_dtoa_r+0x580>
    b178:	f1c2 0220 	rsb	r2, r2, #32
    b17c:	fa06 f202 	lsl.w	r2, r6, r2
    b180:	ee07 2a10 	vmov	s14, r2
    b184:	e509      	b.n	ab9a <_dtoa_r+0xc2>
    b186:	2601      	movs	r6, #1
    b188:	e563      	b.n	ac52 <_dtoa_r+0x17a>
    b18a:	4601      	mov	r1, r0
    b18c:	463a      	mov	r2, r7
    b18e:	4620      	mov	r0, r4
    b190:	f7fb fc56 	bl	6a40 <__pow5mult>
    b194:	9b01      	ldr	r3, [sp, #4]
    b196:	2b01      	cmp	r3, #1
    b198:	4682      	mov	sl, r0
    b19a:	f340 81c5 	ble.w	b528 <_dtoa_r+0xa50>
    b19e:	2300      	movs	r3, #0
    b1a0:	9308      	str	r3, [sp, #32]
    b1a2:	f8da 2010 	ldr.w	r2, [sl, #16]
    b1a6:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
    b1aa:	6910      	ldr	r0, [r2, #16]
    b1ac:	f7fb fb1c 	bl	67e8 <__hi0bits>
    b1b0:	f1c0 0020 	rsb	r0, r0, #32
    b1b4:	e744      	b.n	b040 <_dtoa_r+0x568>
    b1b6:	bf00      	nop
    b1b8:	200002a8 	.word	0x200002a8
    b1bc:	2000081c 	.word	0x2000081c
    b1c0:	4631      	mov	r1, r6
    b1c2:	2300      	movs	r3, #0
    b1c4:	220a      	movs	r2, #10
    b1c6:	4620      	mov	r0, r4
    b1c8:	f7fb fa64 	bl	6694 <__multadd>
    b1cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b1ce:	2b00      	cmp	r3, #0
    b1d0:	4606      	mov	r6, r0
    b1d2:	f340 82ce 	ble.w	b772 <_dtoa_r+0xc9a>
    b1d6:	9704      	str	r7, [sp, #16]
    b1d8:	4699      	mov	r9, r3
    b1da:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b1dc:	2b00      	cmp	r3, #0
    b1de:	dd05      	ble.n	b1ec <_dtoa_r+0x714>
    b1e0:	4631      	mov	r1, r6
    b1e2:	461a      	mov	r2, r3
    b1e4:	4620      	mov	r0, r4
    b1e6:	f7fb fc8b 	bl	6b00 <__lshift>
    b1ea:	4606      	mov	r6, r0
    b1ec:	9b08      	ldr	r3, [sp, #32]
    b1ee:	2b00      	cmp	r3, #0
    b1f0:	f040 81eb 	bne.w	b5ca <_dtoa_r+0xaf2>
    b1f4:	46b0      	mov	r8, r6
    b1f6:	9b02      	ldr	r3, [sp, #8]
    b1f8:	9f00      	ldr	r7, [sp, #0]
    b1fa:	f003 0201 	and.w	r2, r3, #1
    b1fe:	1e7b      	subs	r3, r7, #1
    b200:	444b      	add	r3, r9
    b202:	9308      	str	r3, [sp, #32]
    b204:	9b01      	ldr	r3, [sp, #4]
    b206:	920a      	str	r2, [sp, #40]	; 0x28
    b208:	4313      	orrs	r3, r2
    b20a:	9309      	str	r3, [sp, #36]	; 0x24
    b20c:	4651      	mov	r1, sl
    b20e:	4628      	mov	r0, r5
    b210:	f7ff fbce 	bl	a9b0 <quorem>
    b214:	4631      	mov	r1, r6
    b216:	4683      	mov	fp, r0
    b218:	4628      	mov	r0, r5
    b21a:	f7fb fce9 	bl	6bf0 <__mcmp>
    b21e:	4642      	mov	r2, r8
    b220:	4651      	mov	r1, sl
    b222:	4681      	mov	r9, r0
    b224:	4620      	mov	r0, r4
    b226:	f7fb fd05 	bl	6c34 <__mdiff>
    b22a:	68c2      	ldr	r2, [r0, #12]
    b22c:	4601      	mov	r1, r0
    b22e:	f10b 0330 	add.w	r3, fp, #48	; 0x30
    b232:	2a00      	cmp	r2, #0
    b234:	d142      	bne.n	b2bc <_dtoa_r+0x7e4>
    b236:	e9cd 0306 	strd	r0, r3, [sp, #24]
    b23a:	4628      	mov	r0, r5
    b23c:	f7fb fcd8 	bl	6bf0 <__mcmp>
    b240:	9906      	ldr	r1, [sp, #24]
    b242:	9002      	str	r0, [sp, #8]
    b244:	4620      	mov	r0, r4
    b246:	f7fb fa1b 	bl	6680 <_Bfree>
    b24a:	9a02      	ldr	r2, [sp, #8]
    b24c:	9b07      	ldr	r3, [sp, #28]
    b24e:	b91a      	cbnz	r2, b258 <_dtoa_r+0x780>
    b250:	9909      	ldr	r1, [sp, #36]	; 0x24
    b252:	2900      	cmp	r1, #0
    b254:	f000 827e 	beq.w	b754 <_dtoa_r+0xc7c>
    b258:	f1b9 0f00 	cmp.w	r9, #0
    b25c:	f2c0 8183 	blt.w	b566 <_dtoa_r+0xa8e>
    b260:	9901      	ldr	r1, [sp, #4]
    b262:	ea49 0901 	orr.w	r9, r9, r1
    b266:	990a      	ldr	r1, [sp, #40]	; 0x28
    b268:	ea51 0909 	orrs.w	r9, r1, r9
    b26c:	f000 817b 	beq.w	b566 <_dtoa_r+0xa8e>
    b270:	2a00      	cmp	r2, #0
    b272:	f300 81c6 	bgt.w	b602 <_dtoa_r+0xb2a>
    b276:	9a08      	ldr	r2, [sp, #32]
    b278:	703b      	strb	r3, [r7, #0]
    b27a:	f107 0901 	add.w	r9, r7, #1
    b27e:	4297      	cmp	r7, r2
    b280:	46cb      	mov	fp, r9
    b282:	f000 81c4 	beq.w	b60e <_dtoa_r+0xb36>
    b286:	4629      	mov	r1, r5
    b288:	2300      	movs	r3, #0
    b28a:	220a      	movs	r2, #10
    b28c:	4620      	mov	r0, r4
    b28e:	f7fb fa01 	bl	6694 <__multadd>
    b292:	4546      	cmp	r6, r8
    b294:	4605      	mov	r5, r0
    b296:	4631      	mov	r1, r6
    b298:	f04f 0300 	mov.w	r3, #0
    b29c:	f04f 020a 	mov.w	r2, #10
    b2a0:	4620      	mov	r0, r4
    b2a2:	d012      	beq.n	b2ca <_dtoa_r+0x7f2>
    b2a4:	f7fb f9f6 	bl	6694 <__multadd>
    b2a8:	4641      	mov	r1, r8
    b2aa:	4606      	mov	r6, r0
    b2ac:	2300      	movs	r3, #0
    b2ae:	220a      	movs	r2, #10
    b2b0:	4620      	mov	r0, r4
    b2b2:	f7fb f9ef 	bl	6694 <__multadd>
    b2b6:	464f      	mov	r7, r9
    b2b8:	4680      	mov	r8, r0
    b2ba:	e7a7      	b.n	b20c <_dtoa_r+0x734>
    b2bc:	4620      	mov	r0, r4
    b2be:	9302      	str	r3, [sp, #8]
    b2c0:	f7fb f9de 	bl	6680 <_Bfree>
    b2c4:	9b02      	ldr	r3, [sp, #8]
    b2c6:	2201      	movs	r2, #1
    b2c8:	e7c6      	b.n	b258 <_dtoa_r+0x780>
    b2ca:	f7fb f9e3 	bl	6694 <__multadd>
    b2ce:	464f      	mov	r7, r9
    b2d0:	4606      	mov	r6, r0
    b2d2:	4680      	mov	r8, r0
    b2d4:	e79a      	b.n	b20c <_dtoa_r+0x734>
    b2d6:	9b01      	ldr	r3, [sp, #4]
    b2d8:	2b02      	cmp	r3, #2
    b2da:	dc71      	bgt.n	b3c0 <_dtoa_r+0x8e8>
    b2dc:	9b07      	ldr	r3, [sp, #28]
    b2de:	2b00      	cmp	r3, #0
    b2e0:	f47f af7b 	bne.w	b1da <_dtoa_r+0x702>
    b2e4:	9b04      	ldr	r3, [sp, #16]
    b2e6:	4651      	mov	r1, sl
    b2e8:	3301      	adds	r3, #1
    b2ea:	4628      	mov	r0, r5
    b2ec:	9304      	str	r3, [sp, #16]
    b2ee:	f7ff fb5f 	bl	a9b0 <quorem>
    b2f2:	f8dd b000 	ldr.w	fp, [sp]
    b2f6:	f100 0330 	add.w	r3, r0, #48	; 0x30
    b2fa:	f80b 3b01 	strb.w	r3, [fp], #1
    b2fe:	2700      	movs	r7, #0
    b300:	e6eb      	b.n	b0da <_dtoa_r+0x602>
    b302:	4651      	mov	r1, sl
    b304:	4628      	mov	r0, r5
    b306:	f7fb fc73 	bl	6bf0 <__mcmp>
    b30a:	2800      	cmp	r0, #0
    b30c:	f6bf aeba 	bge.w	b084 <_dtoa_r+0x5ac>
    b310:	4629      	mov	r1, r5
    b312:	2300      	movs	r3, #0
    b314:	220a      	movs	r2, #10
    b316:	4620      	mov	r0, r4
    b318:	f7fb f9bc 	bl	6694 <__multadd>
    b31c:	9b04      	ldr	r3, [sp, #16]
    b31e:	1e5f      	subs	r7, r3, #1
    b320:	9b07      	ldr	r3, [sp, #28]
    b322:	4605      	mov	r5, r0
    b324:	2b00      	cmp	r3, #0
    b326:	f47f af4b 	bne.w	b1c0 <_dtoa_r+0x6e8>
    b32a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b32c:	2b00      	cmp	r3, #0
    b32e:	f340 8218 	ble.w	b762 <_dtoa_r+0xc8a>
    b332:	4699      	mov	r9, r3
    b334:	e6b1      	b.n	b09a <_dtoa_r+0x5c2>
    b336:	4bbc      	ldr	r3, [pc, #752]	; (b628 <_dtoa_r+0xb50>)
    b338:	9300      	str	r3, [sp, #0]
    b33a:	3303      	adds	r3, #3
    b33c:	e4a4      	b.n	ac88 <_dtoa_r+0x1b0>
    b33e:	201c      	movs	r0, #28
    b340:	e712      	b.n	b168 <_dtoa_r+0x690>
    b342:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    b346:	2800      	cmp	r0, #0
    b348:	f47f ae74 	bne.w	b034 <_dtoa_r+0x55c>
    b34c:	f3c1 0213 	ubfx	r2, r1, #0, #20
    b350:	2a00      	cmp	r2, #0
    b352:	f000 80f4 	beq.w	b53e <_dtoa_r+0xa66>
    b356:	9b02      	ldr	r3, [sp, #8]
    b358:	9308      	str	r3, [sp, #32]
    b35a:	e66d      	b.n	b038 <_dtoa_r+0x560>
    b35c:	2301      	movs	r3, #1
    b35e:	9307      	str	r3, [sp, #28]
    b360:	9b04      	ldr	r3, [sp, #16]
    b362:	445b      	add	r3, fp
    b364:	f103 0901 	add.w	r9, r3, #1
    b368:	f1b9 0f01 	cmp.w	r9, #1
    b36c:	46cc      	mov	ip, r9
    b36e:	930b      	str	r3, [sp, #44]	; 0x2c
    b370:	bfb8      	it	lt
    b372:	f04f 0c01 	movlt.w	ip, #1
    b376:	2100      	movs	r1, #0
    b378:	f1bc 0f17 	cmp.w	ip, #23
    b37c:	63e1      	str	r1, [r4, #60]	; 0x3c
    b37e:	f77f acbc 	ble.w	acfa <_dtoa_r+0x222>
    b382:	2001      	movs	r0, #1
    b384:	2204      	movs	r2, #4
    b386:	0052      	lsls	r2, r2, #1
    b388:	f102 0314 	add.w	r3, r2, #20
    b38c:	4563      	cmp	r3, ip
    b38e:	4601      	mov	r1, r0
    b390:	f100 0001 	add.w	r0, r0, #1
    b394:	d9f7      	bls.n	b386 <_dtoa_r+0x8ae>
    b396:	63e1      	str	r1, [r4, #60]	; 0x3c
    b398:	e4af      	b.n	acfa <_dtoa_r+0x222>
    b39a:	2301      	movs	r3, #1
    b39c:	9307      	str	r3, [sp, #28]
    b39e:	f1bb 0f00 	cmp.w	fp, #0
    b3a2:	dd52      	ble.n	b44a <_dtoa_r+0x972>
    b3a4:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
    b3a8:	46d9      	mov	r9, fp
    b3aa:	46dc      	mov	ip, fp
    b3ac:	e7e3      	b.n	b376 <_dtoa_r+0x89e>
    b3ae:	2300      	movs	r3, #0
    b3b0:	9307      	str	r3, [sp, #28]
    b3b2:	e7d5      	b.n	b360 <_dtoa_r+0x888>
    b3b4:	2300      	movs	r3, #0
    b3b6:	9307      	str	r3, [sp, #28]
    b3b8:	e7f1      	b.n	b39e <_dtoa_r+0x8c6>
    b3ba:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    b3be:	9704      	str	r7, [sp, #16]
    b3c0:	f1b9 0f00 	cmp.w	r9, #0
    b3c4:	f47f ada1 	bne.w	af0a <_dtoa_r+0x432>
    b3c8:	4651      	mov	r1, sl
    b3ca:	464b      	mov	r3, r9
    b3cc:	2205      	movs	r2, #5
    b3ce:	4620      	mov	r0, r4
    b3d0:	f7fb f960 	bl	6694 <__multadd>
    b3d4:	4601      	mov	r1, r0
    b3d6:	4682      	mov	sl, r0
    b3d8:	4628      	mov	r0, r5
    b3da:	f7fb fc09 	bl	6bf0 <__mcmp>
    b3de:	2800      	cmp	r0, #0
    b3e0:	f77f ad93 	ble.w	af0a <_dtoa_r+0x432>
    b3e4:	9b04      	ldr	r3, [sp, #16]
    b3e6:	f103 0b01 	add.w	fp, r3, #1
    b3ea:	9b00      	ldr	r3, [sp, #0]
    b3ec:	2231      	movs	r2, #49	; 0x31
    b3ee:	4698      	mov	r8, r3
    b3f0:	f803 2b01 	strb.w	r2, [r3], #1
    b3f4:	9300      	str	r3, [sp, #0]
    b3f6:	4651      	mov	r1, sl
    b3f8:	4620      	mov	r0, r4
    b3fa:	f7fb f941 	bl	6680 <_Bfree>
    b3fe:	f10b 0301 	add.w	r3, fp, #1
    b402:	f8dd 9000 	ldr.w	r9, [sp]
    b406:	9304      	str	r3, [sp, #16]
    b408:	f8cd 8000 	str.w	r8, [sp]
    b40c:	2e00      	cmp	r6, #0
    b40e:	f47f ae8f 	bne.w	b130 <_dtoa_r+0x658>
    b412:	e691      	b.n	b138 <_dtoa_r+0x660>
    b414:	eba3 0a0a 	sub.w	sl, r3, sl
    b418:	e5c5      	b.n	afa6 <_dtoa_r+0x4ce>
    b41a:	4631      	mov	r1, r6
    b41c:	4652      	mov	r2, sl
    b41e:	4620      	mov	r0, r4
    b420:	f7fb fb0e 	bl	6a40 <__pow5mult>
    b424:	462a      	mov	r2, r5
    b426:	4601      	mov	r1, r0
    b428:	4606      	mov	r6, r0
    b42a:	4620      	mov	r0, r4
    b42c:	f7fb fa5a 	bl	68e4 <__multiply>
    b430:	4629      	mov	r1, r5
    b432:	4605      	mov	r5, r0
    b434:	4620      	mov	r0, r4
    b436:	f7fb f923 	bl	6680 <_Bfree>
    b43a:	e5ea      	b.n	b012 <_dtoa_r+0x53a>
    b43c:	2002      	movs	r0, #2
    b43e:	eeb0 5b48 	vmov.f64	d5, d8
    b442:	e481      	b.n	ad48 <_dtoa_r+0x270>
    b444:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
    b448:	e68e      	b.n	b168 <_dtoa_r+0x690>
    b44a:	f04f 0b01 	mov.w	fp, #1
    b44e:	46d9      	mov	r9, fp
    b450:	e44f      	b.n	acf2 <_dtoa_r+0x21a>
    b452:	d103      	bne.n	b45c <_dtoa_r+0x984>
    b454:	9b01      	ldr	r3, [sp, #4]
    b456:	07db      	lsls	r3, r3, #31
    b458:	f53f ae4c 	bmi.w	b0f4 <_dtoa_r+0x61c>
    b45c:	46d9      	mov	r9, fp
    b45e:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
    b462:	2b30      	cmp	r3, #48	; 0x30
    b464:	d0fa      	beq.n	b45c <_dtoa_r+0x984>
    b466:	e657      	b.n	b118 <_dtoa_r+0x640>
    b468:	9b04      	ldr	r3, [sp, #16]
    b46a:	9a00      	ldr	r2, [sp, #0]
    b46c:	3301      	adds	r3, #1
    b46e:	9304      	str	r3, [sp, #16]
    b470:	2331      	movs	r3, #49	; 0x31
    b472:	7013      	strb	r3, [r2, #0]
    b474:	e650      	b.n	b118 <_dtoa_r+0x640>
    b476:	f1ba 0f00 	cmp.w	sl, #0
    b47a:	f000 8123 	beq.w	b6c4 <_dtoa_r+0xbec>
    b47e:	f202 4233 	addw	r2, r2, #1075	; 0x433
    b482:	9b06      	ldr	r3, [sp, #24]
    b484:	9309      	str	r3, [sp, #36]	; 0x24
    b486:	4413      	add	r3, r2
    b488:	f8dd a020 	ldr.w	sl, [sp, #32]
    b48c:	9306      	str	r3, [sp, #24]
    b48e:	4490      	add	r8, r2
    b490:	e592      	b.n	afb8 <_dtoa_r+0x4e0>
    b492:	ee07 0a90 	vmov	s15, r0
    b496:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
    b49a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    b49e:	eea6 5b07 	vfma.f64	d5, d6, d7
    b4a2:	ee15 2a90 	vmov	r2, s11
    b4a6:	ec51 0b15 	vmov	r0, r1, d5
    b4aa:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
    b4ae:	ec41 0b15 	vmov	d5, r0, r1
    b4b2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
    b4b6:	ee36 7b47 	vsub.f64	d7, d6, d7
    b4ba:	eeb4 7bc5 	vcmpe.f64	d7, d5
    b4be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b4c2:	f300 8137 	bgt.w	b734 <_dtoa_r+0xc5c>
    b4c6:	eeb1 5b45 	vneg.f64	d5, d5
    b4ca:	eeb4 7bc5 	vcmpe.f64	d7, d5
    b4ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b4d2:	f57f acfb 	bpl.w	aecc <_dtoa_r+0x3f4>
    b4d6:	f04f 0a00 	mov.w	sl, #0
    b4da:	4656      	mov	r6, sl
    b4dc:	e515      	b.n	af0a <_dtoa_r+0x432>
    b4de:	f000 80f5 	beq.w	b6cc <_dtoa_r+0xbf4>
    b4e2:	9b04      	ldr	r3, [sp, #16]
    b4e4:	4951      	ldr	r1, [pc, #324]	; (b62c <_dtoa_r+0xb54>)
    b4e6:	425a      	negs	r2, r3
    b4e8:	f002 000f 	and.w	r0, r2, #15
    b4ec:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    b4f0:	ed91 6b00 	vldr	d6, [r1]
    b4f4:	1112      	asrs	r2, r2, #4
    b4f6:	ee28 6b06 	vmul.f64	d6, d8, d6
    b4fa:	f000 8142 	beq.w	b782 <_dtoa_r+0xcaa>
    b4fe:	eeb0 7b46 	vmov.f64	d7, d6
    b502:	494b      	ldr	r1, [pc, #300]	; (b630 <_dtoa_r+0xb58>)
    b504:	2600      	movs	r6, #0
    b506:	2002      	movs	r0, #2
    b508:	07d3      	lsls	r3, r2, #31
    b50a:	d505      	bpl.n	b518 <_dtoa_r+0xa40>
    b50c:	ed91 5b00 	vldr	d5, [r1]
    b510:	3001      	adds	r0, #1
    b512:	2601      	movs	r6, #1
    b514:	ee27 7b05 	vmul.f64	d7, d7, d5
    b518:	1052      	asrs	r2, r2, #1
    b51a:	f101 0108 	add.w	r1, r1, #8
    b51e:	d1f3      	bne.n	b508 <_dtoa_r+0xa30>
    b520:	2e00      	cmp	r6, #0
    b522:	fe06 6b07 	vseleq.f64	d6, d6, d7
    b526:	e41e      	b.n	ad66 <_dtoa_r+0x28e>
    b528:	9b02      	ldr	r3, [sp, #8]
    b52a:	2b00      	cmp	r3, #0
    b52c:	f47f ae37 	bne.w	b19e <_dtoa_r+0x6c6>
    b530:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    b534:	f3c1 0213 	ubfx	r2, r1, #0, #20
    b538:	2a00      	cmp	r2, #0
    b53a:	f040 8137 	bne.w	b7ac <_dtoa_r+0xcd4>
    b53e:	4a3d      	ldr	r2, [pc, #244]	; (b634 <_dtoa_r+0xb5c>)
    b540:	400a      	ands	r2, r1
    b542:	2a00      	cmp	r2, #0
    b544:	f000 80fa 	beq.w	b73c <_dtoa_r+0xc64>
    b548:	9b06      	ldr	r3, [sp, #24]
    b54a:	3301      	adds	r3, #1
    b54c:	9306      	str	r3, [sp, #24]
    b54e:	2301      	movs	r3, #1
    b550:	f108 0801 	add.w	r8, r8, #1
    b554:	9308      	str	r3, [sp, #32]
    b556:	e56f      	b.n	b038 <_dtoa_r+0x560>
    b558:	4629      	mov	r1, r5
    b55a:	9a08      	ldr	r2, [sp, #32]
    b55c:	4620      	mov	r0, r4
    b55e:	f7fb fa6f 	bl	6a40 <__pow5mult>
    b562:	4605      	mov	r5, r0
    b564:	e55a      	b.n	b01c <_dtoa_r+0x544>
    b566:	2a00      	cmp	r2, #0
    b568:	dd12      	ble.n	b590 <_dtoa_r+0xab8>
    b56a:	4629      	mov	r1, r5
    b56c:	2201      	movs	r2, #1
    b56e:	4620      	mov	r0, r4
    b570:	9301      	str	r3, [sp, #4]
    b572:	f7fb fac5 	bl	6b00 <__lshift>
    b576:	4651      	mov	r1, sl
    b578:	4605      	mov	r5, r0
    b57a:	f7fb fb39 	bl	6bf0 <__mcmp>
    b57e:	2800      	cmp	r0, #0
    b580:	9b01      	ldr	r3, [sp, #4]
    b582:	f340 80e1 	ble.w	b748 <_dtoa_r+0xc70>
    b586:	2b39      	cmp	r3, #57	; 0x39
    b588:	f000 80ca 	beq.w	b720 <_dtoa_r+0xc48>
    b58c:	f10b 0331 	add.w	r3, fp, #49	; 0x31
    b590:	46b9      	mov	r9, r7
    b592:	f809 3b01 	strb.w	r3, [r9], #1
    b596:	9b04      	ldr	r3, [sp, #16]
    b598:	3301      	adds	r3, #1
    b59a:	4637      	mov	r7, r6
    b59c:	9304      	str	r3, [sp, #16]
    b59e:	4646      	mov	r6, r8
    b5a0:	e5ba      	b.n	b118 <_dtoa_r+0x640>
    b5a2:	ee38 8b08 	vadd.f64	d8, d8, d8
    b5a6:	eeb4 8bc6 	vcmpe.f64	d8, d6
    b5aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b5ae:	dc0a      	bgt.n	b5c6 <_dtoa_r+0xaee>
    b5b0:	eeb4 8b46 	vcmp.f64	d8, d6
    b5b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b5b8:	f47f acdc 	bne.w	af74 <_dtoa_r+0x49c>
    b5bc:	ee17 3a10 	vmov	r3, s14
    b5c0:	07d8      	lsls	r0, r3, #31
    b5c2:	f57f acd7 	bpl.w	af74 <_dtoa_r+0x49c>
    b5c6:	9a00      	ldr	r2, [sp, #0]
    b5c8:	e454      	b.n	ae74 <_dtoa_r+0x39c>
    b5ca:	6871      	ldr	r1, [r6, #4]
    b5cc:	4620      	mov	r0, r4
    b5ce:	f7fb f831 	bl	6634 <_Balloc>
    b5d2:	4607      	mov	r7, r0
    b5d4:	2800      	cmp	r0, #0
    b5d6:	f000 80de 	beq.w	b796 <_dtoa_r+0xcbe>
    b5da:	6933      	ldr	r3, [r6, #16]
    b5dc:	3302      	adds	r3, #2
    b5de:	009a      	lsls	r2, r3, #2
    b5e0:	f106 010c 	add.w	r1, r6, #12
    b5e4:	300c      	adds	r0, #12
    b5e6:	f7f6 f911 	bl	180c <memcpy>
    b5ea:	4639      	mov	r1, r7
    b5ec:	2201      	movs	r2, #1
    b5ee:	4620      	mov	r0, r4
    b5f0:	f7fb fa86 	bl	6b00 <__lshift>
    b5f4:	4680      	mov	r8, r0
    b5f6:	e5fe      	b.n	b1f6 <_dtoa_r+0x71e>
    b5f8:	9b06      	ldr	r3, [sp, #24]
    b5fa:	eba3 0309 	sub.w	r3, r3, r9
    b5fe:	9309      	str	r3, [sp, #36]	; 0x24
    b600:	e4da      	b.n	afb8 <_dtoa_r+0x4e0>
    b602:	2b39      	cmp	r3, #57	; 0x39
    b604:	f000 808c 	beq.w	b720 <_dtoa_r+0xc48>
    b608:	46b9      	mov	r9, r7
    b60a:	3301      	adds	r3, #1
    b60c:	e7c1      	b.n	b592 <_dtoa_r+0xaba>
    b60e:	9a04      	ldr	r2, [sp, #16]
    b610:	3201      	adds	r2, #1
    b612:	4637      	mov	r7, r6
    b614:	9204      	str	r2, [sp, #16]
    b616:	4646      	mov	r6, r8
    b618:	e55f      	b.n	b0da <_dtoa_r+0x602>
    b61a:	4629      	mov	r1, r5
    b61c:	4620      	mov	r0, r4
    b61e:	f7fb fa0f 	bl	6a40 <__pow5mult>
    b622:	4605      	mov	r5, r0
    b624:	e4fa      	b.n	b01c <_dtoa_r+0x544>
    b626:	bf00      	nop
    b628:	20000754 	.word	0x20000754
    b62c:	200002a8 	.word	0x200002a8
    b630:	20000280 	.word	0x20000280
    b634:	7ff00000 	.word	0x7ff00000
    b638:	4b5e      	ldr	r3, [pc, #376]	; (b7b4 <_dtoa_r+0xcdc>)
    b63a:	eefd 5bc6 	vcvt.s32.f64	s11, d6
    b63e:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
    b642:	ed1c 3b02 	vldr	d3, [ip, #-8]
    b646:	eeb8 7be5 	vcvt.f64.s32	d7, s11
    b64a:	ee36 7b47 	vsub.f64	d7, d6, d7
    b64e:	ec41 0b16 	vmov	d6, r0, r1
    b652:	ee15 1a90 	vmov	r1, s11
    b656:	ee23 3b06 	vmul.f64	d3, d3, d6
    b65a:	9800      	ldr	r0, [sp, #0]
    b65c:	3130      	adds	r1, #48	; 0x30
    b65e:	2a01      	cmp	r2, #1
    b660:	f800 1b01 	strb.w	r1, [r0], #1
    b664:	f000 8083 	beq.w	b76e <_dtoa_r+0xc96>
    b668:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    b66c:	9b00      	ldr	r3, [sp, #0]
    b66e:	1899      	adds	r1, r3, r2
    b670:	ee27 7b04 	vmul.f64	d7, d7, d4
    b674:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    b678:	ee16 3a90 	vmov	r3, s13
    b67c:	3330      	adds	r3, #48	; 0x30
    b67e:	f800 3b01 	strb.w	r3, [r0], #1
    b682:	4281      	cmp	r1, r0
    b684:	eeb8 5be6 	vcvt.f64.s32	d5, s13
    b688:	ee37 7b45 	vsub.f64	d7, d7, d5
    b68c:	d1f0      	bne.n	b670 <_dtoa_r+0xb98>
    b68e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    b692:	ee33 5b06 	vadd.f64	d5, d3, d6
    b696:	eeb4 5bc7 	vcmpe.f64	d5, d7
    b69a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b69e:	f53f abe3 	bmi.w	ae68 <_dtoa_r+0x390>
    b6a2:	ee36 6b43 	vsub.f64	d6, d6, d3
    b6a6:	eeb4 6bc7 	vcmpe.f64	d6, d7
    b6aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b6ae:	f77f ac0d 	ble.w	aecc <_dtoa_r+0x3f4>
    b6b2:	4689      	mov	r9, r1
    b6b4:	3901      	subs	r1, #1
    b6b6:	f819 3c01 	ldrb.w	r3, [r9, #-1]
    b6ba:	2b30      	cmp	r3, #48	; 0x30
    b6bc:	d0f9      	beq.n	b6b2 <_dtoa_r+0xbda>
    b6be:	1c73      	adds	r3, r6, #1
    b6c0:	9304      	str	r3, [sp, #16]
    b6c2:	e539      	b.n	b138 <_dtoa_r+0x660>
    b6c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    b6c6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
    b6ca:	e6da      	b.n	b482 <_dtoa_r+0x9aa>
    b6cc:	2002      	movs	r0, #2
    b6ce:	eeb0 6b48 	vmov.f64	d6, d8
    b6d2:	f7ff bb48 	b.w	ad66 <_dtoa_r+0x28e>
    b6d6:	f1b9 0f00 	cmp.w	r9, #0
    b6da:	f43f aeda 	beq.w	b492 <_dtoa_r+0x9ba>
    b6de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b6e0:	2a00      	cmp	r2, #0
    b6e2:	f77f abf3 	ble.w	aecc <_dtoa_r+0x3f4>
    b6e6:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    b6ea:	ee26 6b04 	vmul.f64	d6, d6, d4
    b6ee:	3001      	adds	r0, #1
    b6f0:	ee07 0a90 	vmov	s15, r0
    b6f4:	9b04      	ldr	r3, [sp, #16]
    b6f6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
    b6fa:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    b6fe:	eea6 7b05 	vfma.f64	d7, d6, d5
    b702:	ee17 ca90 	vmov	ip, s15
    b706:	ec51 0b17 	vmov	r0, r1, d7
    b70a:	1e5e      	subs	r6, r3, #1
    b70c:	f1ac 7150 	sub.w	r1, ip, #54525952	; 0x3400000
    b710:	f7ff bb47 	b.w	ada2 <_dtoa_r+0x2ca>
    b714:	9b04      	ldr	r3, [sp, #16]
    b716:	3301      	adds	r3, #1
    b718:	9304      	str	r3, [sp, #16]
    b71a:	2331      	movs	r3, #49	; 0x31
    b71c:	f7ff bbb1 	b.w	ae82 <_dtoa_r+0x3aa>
    b720:	9b04      	ldr	r3, [sp, #16]
    b722:	46bb      	mov	fp, r7
    b724:	3301      	adds	r3, #1
    b726:	9304      	str	r3, [sp, #16]
    b728:	2339      	movs	r3, #57	; 0x39
    b72a:	4637      	mov	r7, r6
    b72c:	f80b 3b01 	strb.w	r3, [fp], #1
    b730:	4646      	mov	r6, r8
    b732:	e4e1      	b.n	b0f8 <_dtoa_r+0x620>
    b734:	f04f 0a00 	mov.w	sl, #0
    b738:	4656      	mov	r6, sl
    b73a:	e653      	b.n	b3e4 <_dtoa_r+0x90c>
    b73c:	9208      	str	r2, [sp, #32]
    b73e:	e47b      	b.n	b038 <_dtoa_r+0x560>
    b740:	1c73      	adds	r3, r6, #1
    b742:	9304      	str	r3, [sp, #16]
    b744:	4689      	mov	r9, r1
    b746:	e4f7      	b.n	b138 <_dtoa_r+0x660>
    b748:	f47f af22 	bne.w	b590 <_dtoa_r+0xab8>
    b74c:	07da      	lsls	r2, r3, #31
    b74e:	f57f af1f 	bpl.w	b590 <_dtoa_r+0xab8>
    b752:	e718      	b.n	b586 <_dtoa_r+0xaae>
    b754:	2b39      	cmp	r3, #57	; 0x39
    b756:	d0e3      	beq.n	b720 <_dtoa_r+0xc48>
    b758:	f1b9 0f00 	cmp.w	r9, #0
    b75c:	f73f af16 	bgt.w	b58c <_dtoa_r+0xab4>
    b760:	e716      	b.n	b590 <_dtoa_r+0xab8>
    b762:	9b01      	ldr	r3, [sp, #4]
    b764:	2b02      	cmp	r3, #2
    b766:	f73f ae28 	bgt.w	b3ba <_dtoa_r+0x8e2>
    b76a:	9704      	str	r7, [sp, #16]
    b76c:	e5ba      	b.n	b2e4 <_dtoa_r+0x80c>
    b76e:	4601      	mov	r1, r0
    b770:	e78d      	b.n	b68e <_dtoa_r+0xbb6>
    b772:	9b01      	ldr	r3, [sp, #4]
    b774:	2b02      	cmp	r3, #2
    b776:	f73f ae20 	bgt.w	b3ba <_dtoa_r+0x8e2>
    b77a:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    b77e:	9704      	str	r7, [sp, #16]
    b780:	e52b      	b.n	b1da <_dtoa_r+0x702>
    b782:	2002      	movs	r0, #2
    b784:	f7ff baef 	b.w	ad66 <_dtoa_r+0x28e>
    b788:	4b0b      	ldr	r3, [pc, #44]	; (b7b8 <_dtoa_r+0xce0>)
    b78a:	480c      	ldr	r0, [pc, #48]	; (b7bc <_dtoa_r+0xce4>)
    b78c:	2200      	movs	r2, #0
    b78e:	f240 11af 	movw	r1, #431	; 0x1af
    b792:	f7ff f8b1 	bl	a8f8 <__assert_func>
    b796:	4b08      	ldr	r3, [pc, #32]	; (b7b8 <_dtoa_r+0xce0>)
    b798:	4808      	ldr	r0, [pc, #32]	; (b7bc <_dtoa_r+0xce4>)
    b79a:	463a      	mov	r2, r7
    b79c:	f240 21ef 	movw	r1, #751	; 0x2ef
    b7a0:	f7ff f8aa 	bl	a8f8 <__assert_func>
    b7a4:	4b06      	ldr	r3, [pc, #24]	; (b7c0 <_dtoa_r+0xce8>)
    b7a6:	9300      	str	r3, [sp, #0]
    b7a8:	f7ff b9d2 	b.w	ab50 <_dtoa_r+0x78>
    b7ac:	9b02      	ldr	r3, [sp, #8]
    b7ae:	9308      	str	r3, [sp, #32]
    b7b0:	e4f7      	b.n	b1a2 <_dtoa_r+0x6ca>
    b7b2:	bf00      	nop
    b7b4:	200002a8 	.word	0x200002a8
    b7b8:	20000468 	.word	0x20000468
    b7bc:	20000758 	.word	0x20000758
    b7c0:	20000748 	.word	0x20000748

0000b7c4 <_strtoul_l.constprop.0>:
    b7c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b7c8:	4607      	mov	r7, r0
    b7ca:	484c      	ldr	r0, [pc, #304]	; (b8fc <_strtoul_l.constprop.0+0x138>)
    b7cc:	460e      	mov	r6, r1
    b7ce:	4635      	mov	r5, r6
    b7d0:	f816 eb01 	ldrb.w	lr, [r6], #1
    b7d4:	f810 c00e 	ldrb.w	ip, [r0, lr]
    b7d8:	f01c 0c08 	ands.w	ip, ip, #8
    b7dc:	d1f7      	bne.n	b7ce <_strtoul_l.constprop.0+0xa>
    b7de:	f1be 0f2d 	cmp.w	lr, #45	; 0x2d
    b7e2:	d05a      	beq.n	b89a <_strtoul_l.constprop.0+0xd6>
    b7e4:	f1be 0f2b 	cmp.w	lr, #43	; 0x2b
    b7e8:	bf03      	ittte	eq
    b7ea:	f896 e000 	ldrbeq.w	lr, [r6]
    b7ee:	4664      	moveq	r4, ip
    b7f0:	1cae      	addeq	r6, r5, #2
    b7f2:	4664      	movne	r4, ip
    b7f4:	b15b      	cbz	r3, b80e <_strtoul_l.constprop.0+0x4a>
    b7f6:	2b10      	cmp	r3, #16
    b7f8:	d054      	beq.n	b8a4 <_strtoul_l.constprop.0+0xe0>
    b7fa:	f04f 38ff 	mov.w	r8, #4294967295
    b7fe:	fbb8 f8f3 	udiv	r8, r8, r3
    b802:	fb03 fa08 	mul.w	sl, r3, r8
    b806:	ea6f 0a0a 	mvn.w	sl, sl
    b80a:	4699      	mov	r9, r3
    b80c:	e008      	b.n	b820 <_strtoul_l.constprop.0+0x5c>
    b80e:	f1be 0f30 	cmp.w	lr, #48	; 0x30
    b812:	d05a      	beq.n	b8ca <_strtoul_l.constprop.0+0x106>
    b814:	230a      	movs	r3, #10
    b816:	f8df 80e8 	ldr.w	r8, [pc, #232]	; b900 <_strtoul_l.constprop.0+0x13c>
    b81a:	f04f 0a05 	mov.w	sl, #5
    b81e:	4699      	mov	r9, r3
    b820:	2500      	movs	r5, #0
    b822:	4628      	mov	r0, r5
    b824:	e005      	b.n	b832 <_strtoul_l.constprop.0+0x6e>
    b826:	d02c      	beq.n	b882 <_strtoul_l.constprop.0+0xbe>
    b828:	fb09 c000 	mla	r0, r9, r0, ip
    b82c:	2501      	movs	r5, #1
    b82e:	f816 eb01 	ldrb.w	lr, [r6], #1
    b832:	f1ae 0c30 	sub.w	ip, lr, #48	; 0x30
    b836:	f1bc 0f09 	cmp.w	ip, #9
    b83a:	d906      	bls.n	b84a <_strtoul_l.constprop.0+0x86>
    b83c:	f1ae 0c41 	sub.w	ip, lr, #65	; 0x41
    b840:	f1bc 0f19 	cmp.w	ip, #25
    b844:	d80b      	bhi.n	b85e <_strtoul_l.constprop.0+0x9a>
    b846:	f1ae 0c37 	sub.w	ip, lr, #55	; 0x37
    b84a:	4563      	cmp	r3, ip
    b84c:	dd10      	ble.n	b870 <_strtoul_l.constprop.0+0xac>
    b84e:	f1b5 3fff 	cmp.w	r5, #4294967295
    b852:	d0ec      	beq.n	b82e <_strtoul_l.constprop.0+0x6a>
    b854:	4540      	cmp	r0, r8
    b856:	d9e6      	bls.n	b826 <_strtoul_l.constprop.0+0x62>
    b858:	f04f 35ff 	mov.w	r5, #4294967295
    b85c:	e7e7      	b.n	b82e <_strtoul_l.constprop.0+0x6a>
    b85e:	f1ae 0c61 	sub.w	ip, lr, #97	; 0x61
    b862:	f1bc 0f19 	cmp.w	ip, #25
    b866:	d803      	bhi.n	b870 <_strtoul_l.constprop.0+0xac>
    b868:	f1ae 0c57 	sub.w	ip, lr, #87	; 0x57
    b86c:	4563      	cmp	r3, ip
    b86e:	dcee      	bgt.n	b84e <_strtoul_l.constprop.0+0x8a>
    b870:	1c6b      	adds	r3, r5, #1
    b872:	d00b      	beq.n	b88c <_strtoul_l.constprop.0+0xc8>
    b874:	b104      	cbz	r4, b878 <_strtoul_l.constprop.0+0xb4>
    b876:	4240      	negs	r0, r0
    b878:	b10a      	cbz	r2, b87e <_strtoul_l.constprop.0+0xba>
    b87a:	b965      	cbnz	r5, b896 <_strtoul_l.constprop.0+0xd2>
    b87c:	6011      	str	r1, [r2, #0]
    b87e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b882:	45d4      	cmp	ip, sl
    b884:	ddd0      	ble.n	b828 <_strtoul_l.constprop.0+0x64>
    b886:	f04f 35ff 	mov.w	r5, #4294967295
    b88a:	e7d0      	b.n	b82e <_strtoul_l.constprop.0+0x6a>
    b88c:	2322      	movs	r3, #34	; 0x22
    b88e:	603b      	str	r3, [r7, #0]
    b890:	4628      	mov	r0, r5
    b892:	2a00      	cmp	r2, #0
    b894:	d0f3      	beq.n	b87e <_strtoul_l.constprop.0+0xba>
    b896:	1e71      	subs	r1, r6, #1
    b898:	e7f0      	b.n	b87c <_strtoul_l.constprop.0+0xb8>
    b89a:	f896 e000 	ldrb.w	lr, [r6]
    b89e:	2401      	movs	r4, #1
    b8a0:	1cae      	adds	r6, r5, #2
    b8a2:	e7a7      	b.n	b7f4 <_strtoul_l.constprop.0+0x30>
    b8a4:	f1be 0f30 	cmp.w	lr, #48	; 0x30
    b8a8:	d121      	bne.n	b8ee <_strtoul_l.constprop.0+0x12a>
    b8aa:	7830      	ldrb	r0, [r6, #0]
    b8ac:	f000 00df 	and.w	r0, r0, #223	; 0xdf
    b8b0:	2858      	cmp	r0, #88	; 0x58
    b8b2:	d116      	bne.n	b8e2 <_strtoul_l.constprop.0+0x11e>
    b8b4:	f04f 0910 	mov.w	r9, #16
    b8b8:	f896 e001 	ldrb.w	lr, [r6, #1]
    b8bc:	f04f 0a0f 	mov.w	sl, #15
    b8c0:	3602      	adds	r6, #2
    b8c2:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
    b8c6:	464b      	mov	r3, r9
    b8c8:	e7aa      	b.n	b820 <_strtoul_l.constprop.0+0x5c>
    b8ca:	7833      	ldrb	r3, [r6, #0]
    b8cc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    b8d0:	2b58      	cmp	r3, #88	; 0x58
    b8d2:	d0ef      	beq.n	b8b4 <_strtoul_l.constprop.0+0xf0>
    b8d4:	2308      	movs	r3, #8
    b8d6:	f04f 0a07 	mov.w	sl, #7
    b8da:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
    b8de:	4699      	mov	r9, r3
    b8e0:	e79e      	b.n	b820 <_strtoul_l.constprop.0+0x5c>
    b8e2:	4699      	mov	r9, r3
    b8e4:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
    b8e8:	f04f 0a0f 	mov.w	sl, #15
    b8ec:	e798      	b.n	b820 <_strtoul_l.constprop.0+0x5c>
    b8ee:	f04f 0a0f 	mov.w	sl, #15
    b8f2:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
    b8f6:	4699      	mov	r9, r3
    b8f8:	e792      	b.n	b820 <_strtoul_l.constprop.0+0x5c>
    b8fa:	bf00      	nop
    b8fc:	20000645 	.word	0x20000645
    b900:	19999999 	.word	0x19999999

0000b904 <_strtoul_r>:
    b904:	f7ff bf5e 	b.w	b7c4 <_strtoul_l.constprop.0>

0000b908 <_strtoll_l.constprop.0>:
    b908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b90c:	b085      	sub	sp, #20
    b90e:	461f      	mov	r7, r3
    b910:	4b57      	ldr	r3, [pc, #348]	; (ba70 <_strtoll_l.constprop.0+0x168>)
    b912:	9003      	str	r0, [sp, #12]
    b914:	468a      	mov	sl, r1
    b916:	9200      	str	r2, [sp, #0]
    b918:	460d      	mov	r5, r1
    b91a:	462a      	mov	r2, r5
    b91c:	f815 4b01 	ldrb.w	r4, [r5], #1
    b920:	5d1e      	ldrb	r6, [r3, r4]
    b922:	f016 0608 	ands.w	r6, r6, #8
    b926:	d1f8      	bne.n	b91a <_strtoll_l.constprop.0+0x12>
    b928:	2c2d      	cmp	r4, #45	; 0x2d
    b92a:	d075      	beq.n	ba18 <_strtoll_l.constprop.0+0x110>
    b92c:	2c2b      	cmp	r4, #43	; 0x2b
    b92e:	bf05      	ittet	eq
    b930:	782c      	ldrbeq	r4, [r5, #0]
    b932:	9602      	streq	r6, [sp, #8]
    b934:	9602      	strne	r6, [sp, #8]
    b936:	1c95      	addeq	r5, r2, #2
    b938:	f04f 36ff 	mov.w	r6, #4294967295
    b93c:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
    b940:	b12f      	cbz	r7, b94e <_strtoll_l.constprop.0+0x46>
    b942:	2f10      	cmp	r7, #16
    b944:	d06f      	beq.n	ba26 <_strtoll_l.constprop.0+0x11e>
    b946:	46b8      	mov	r8, r7
    b948:	ea4f 79e7 	mov.w	r9, r7, asr #31
    b94c:	e005      	b.n	b95a <_strtoll_l.constprop.0+0x52>
    b94e:	2c30      	cmp	r4, #48	; 0x30
    b950:	d074      	beq.n	ba3c <_strtoll_l.constprop.0+0x134>
    b952:	f04f 080a 	mov.w	r8, #10
    b956:	46b9      	mov	r9, r7
    b958:	4647      	mov	r7, r8
    b95a:	4642      	mov	r2, r8
    b95c:	464b      	mov	r3, r9
    b95e:	4630      	mov	r0, r6
    b960:	4659      	mov	r1, fp
    b962:	f7f7 fceb 	bl	333c <__aeabi_uldivmod>
    b966:	2300      	movs	r3, #0
    b968:	9201      	str	r2, [sp, #4]
    b96a:	4684      	mov	ip, r0
    b96c:	460a      	mov	r2, r1
    b96e:	4618      	mov	r0, r3
    b970:	4619      	mov	r1, r3
    b972:	e011      	b.n	b998 <_strtoll_l.constprop.0+0x90>
    b974:	428a      	cmp	r2, r1
    b976:	bf08      	it	eq
    b978:	4584      	cmpeq	ip, r0
    b97a:	d03d      	beq.n	b9f8 <_strtoll_l.constprop.0+0xf0>
    b97c:	fb00 f309 	mul.w	r3, r0, r9
    b980:	fb08 3301 	mla	r3, r8, r1, r3
    b984:	fba0 0108 	umull	r0, r1, r0, r8
    b988:	440b      	add	r3, r1
    b98a:	eb1e 0000 	adds.w	r0, lr, r0
    b98e:	eb43 71ee 	adc.w	r1, r3, lr, asr #31
    b992:	2301      	movs	r3, #1
    b994:	f815 4b01 	ldrb.w	r4, [r5], #1
    b998:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
    b99c:	f1be 0f09 	cmp.w	lr, #9
    b9a0:	d906      	bls.n	b9b0 <_strtoll_l.constprop.0+0xa8>
    b9a2:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
    b9a6:	f1be 0f19 	cmp.w	lr, #25
    b9aa:	d80c      	bhi.n	b9c6 <_strtoll_l.constprop.0+0xbe>
    b9ac:	f1a4 0e37 	sub.w	lr, r4, #55	; 0x37
    b9b0:	4577      	cmp	r7, lr
    b9b2:	dd11      	ble.n	b9d8 <_strtoll_l.constprop.0+0xd0>
    b9b4:	1c5c      	adds	r4, r3, #1
    b9b6:	d0ed      	beq.n	b994 <_strtoll_l.constprop.0+0x8c>
    b9b8:	4584      	cmp	ip, r0
    b9ba:	eb72 0301 	sbcs.w	r3, r2, r1
    b9be:	d2d9      	bcs.n	b974 <_strtoll_l.constprop.0+0x6c>
    b9c0:	f04f 33ff 	mov.w	r3, #4294967295
    b9c4:	e7e6      	b.n	b994 <_strtoll_l.constprop.0+0x8c>
    b9c6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
    b9ca:	f1be 0f19 	cmp.w	lr, #25
    b9ce:	d803      	bhi.n	b9d8 <_strtoll_l.constprop.0+0xd0>
    b9d0:	f1a4 0e57 	sub.w	lr, r4, #87	; 0x57
    b9d4:	4577      	cmp	r7, lr
    b9d6:	dced      	bgt.n	b9b4 <_strtoll_l.constprop.0+0xac>
    b9d8:	1c5a      	adds	r2, r3, #1
    b9da:	d013      	beq.n	ba04 <_strtoll_l.constprop.0+0xfc>
    b9dc:	9a02      	ldr	r2, [sp, #8]
    b9de:	b112      	cbz	r2, b9e6 <_strtoll_l.constprop.0+0xde>
    b9e0:	4240      	negs	r0, r0
    b9e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    b9e6:	9a00      	ldr	r2, [sp, #0]
    b9e8:	b11a      	cbz	r2, b9f2 <_strtoll_l.constprop.0+0xea>
    b9ea:	bba3      	cbnz	r3, ba56 <_strtoll_l.constprop.0+0x14e>
    b9ec:	9b00      	ldr	r3, [sp, #0]
    b9ee:	f8c3 a000 	str.w	sl, [r3]
    b9f2:	b005      	add	sp, #20
    b9f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b9f8:	9b01      	ldr	r3, [sp, #4]
    b9fa:	4573      	cmp	r3, lr
    b9fc:	dabe      	bge.n	b97c <_strtoll_l.constprop.0+0x74>
    b9fe:	f04f 33ff 	mov.w	r3, #4294967295
    ba02:	e7c7      	b.n	b994 <_strtoll_l.constprop.0+0x8c>
    ba04:	9a03      	ldr	r2, [sp, #12]
    ba06:	2322      	movs	r3, #34	; 0x22
    ba08:	6013      	str	r3, [r2, #0]
    ba0a:	9b00      	ldr	r3, [sp, #0]
    ba0c:	b333      	cbz	r3, ba5c <_strtoll_l.constprop.0+0x154>
    ba0e:	f105 3aff 	add.w	sl, r5, #4294967295
    ba12:	4630      	mov	r0, r6
    ba14:	4659      	mov	r1, fp
    ba16:	e7e9      	b.n	b9ec <_strtoll_l.constprop.0+0xe4>
    ba18:	2301      	movs	r3, #1
    ba1a:	782c      	ldrb	r4, [r5, #0]
    ba1c:	9302      	str	r3, [sp, #8]
    ba1e:	1c95      	adds	r5, r2, #2
    ba20:	f04f 4b00 	mov.w	fp, #2147483648	; 0x80000000
    ba24:	e78c      	b.n	b940 <_strtoll_l.constprop.0+0x38>
    ba26:	2c30      	cmp	r4, #48	; 0x30
    ba28:	d104      	bne.n	ba34 <_strtoll_l.constprop.0+0x12c>
    ba2a:	782b      	ldrb	r3, [r5, #0]
    ba2c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    ba30:	2b58      	cmp	r3, #88	; 0x58
    ba32:	d008      	beq.n	ba46 <_strtoll_l.constprop.0+0x13e>
    ba34:	46b8      	mov	r8, r7
    ba36:	f04f 0900 	mov.w	r9, #0
    ba3a:	e78e      	b.n	b95a <_strtoll_l.constprop.0+0x52>
    ba3c:	782b      	ldrb	r3, [r5, #0]
    ba3e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    ba42:	2b58      	cmp	r3, #88	; 0x58
    ba44:	d10f      	bne.n	ba66 <_strtoll_l.constprop.0+0x15e>
    ba46:	f04f 0810 	mov.w	r8, #16
    ba4a:	786c      	ldrb	r4, [r5, #1]
    ba4c:	f04f 0900 	mov.w	r9, #0
    ba50:	3502      	adds	r5, #2
    ba52:	4647      	mov	r7, r8
    ba54:	e781      	b.n	b95a <_strtoll_l.constprop.0+0x52>
    ba56:	4606      	mov	r6, r0
    ba58:	468b      	mov	fp, r1
    ba5a:	e7d8      	b.n	ba0e <_strtoll_l.constprop.0+0x106>
    ba5c:	4630      	mov	r0, r6
    ba5e:	4659      	mov	r1, fp
    ba60:	b005      	add	sp, #20
    ba62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ba66:	f04f 0808 	mov.w	r8, #8
    ba6a:	46b9      	mov	r9, r7
    ba6c:	4647      	mov	r7, r8
    ba6e:	e774      	b.n	b95a <_strtoll_l.constprop.0+0x52>
    ba70:	20000645 	.word	0x20000645

0000ba74 <_strtoll_r>:
    ba74:	f7ff bf48 	b.w	b908 <_strtoll_l.constprop.0>

0000ba78 <_strtoull_l.constprop.0>:
    ba78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ba7c:	b085      	sub	sp, #20
    ba7e:	468b      	mov	fp, r1
    ba80:	9201      	str	r2, [sp, #4]
    ba82:	4a62      	ldr	r2, [pc, #392]	; (bc0c <_strtoull_l.constprop.0+0x194>)
    ba84:	9003      	str	r0, [sp, #12]
    ba86:	461e      	mov	r6, r3
    ba88:	460d      	mov	r5, r1
    ba8a:	4629      	mov	r1, r5
    ba8c:	f815 4b01 	ldrb.w	r4, [r5], #1
    ba90:	5d13      	ldrb	r3, [r2, r4]
    ba92:	f013 0308 	ands.w	r3, r3, #8
    ba96:	d1f8      	bne.n	ba8a <_strtoull_l.constprop.0+0x12>
    ba98:	2c2d      	cmp	r4, #45	; 0x2d
    ba9a:	f000 8082 	beq.w	bba2 <_strtoull_l.constprop.0+0x12a>
    ba9e:	2c2b      	cmp	r4, #43	; 0x2b
    baa0:	bf03      	ittte	eq
    baa2:	782c      	ldrbeq	r4, [r5, #0]
    baa4:	9302      	streq	r3, [sp, #8]
    baa6:	1c8d      	addeq	r5, r1, #2
    baa8:	9302      	strne	r3, [sp, #8]
    baaa:	b1be      	cbz	r6, badc <_strtoull_l.constprop.0+0x64>
    baac:	2e10      	cmp	r6, #16
    baae:	d07d      	beq.n	bbac <_strtoull_l.constprop.0+0x134>
    bab0:	ea4f 7ae6 	mov.w	sl, r6, asr #31
    bab4:	4632      	mov	r2, r6
    bab6:	4653      	mov	r3, sl
    bab8:	f04f 30ff 	mov.w	r0, #4294967295
    babc:	f04f 31ff 	mov.w	r1, #4294967295
    bac0:	f7f7 fc3c 	bl	333c <__aeabi_uldivmod>
    bac4:	4632      	mov	r2, r6
    bac6:	4607      	mov	r7, r0
    bac8:	4688      	mov	r8, r1
    baca:	4653      	mov	r3, sl
    bacc:	f04f 30ff 	mov.w	r0, #4294967295
    bad0:	f04f 31ff 	mov.w	r1, #4294967295
    bad4:	46b1      	mov	r9, r6
    bad6:	f7f7 fc31 	bl	333c <__aeabi_uldivmod>
    bada:	e00a      	b.n	baf2 <_strtoull_l.constprop.0+0x7a>
    badc:	2c30      	cmp	r4, #48	; 0x30
    bade:	d079      	beq.n	bbd4 <_strtoull_l.constprop.0+0x15c>
    bae0:	f04f 090a 	mov.w	r9, #10
    bae4:	f8df 8128 	ldr.w	r8, [pc, #296]	; bc10 <_strtoull_l.constprop.0+0x198>
    bae8:	46b2      	mov	sl, r6
    baea:	2205      	movs	r2, #5
    baec:	f04f 3799 	mov.w	r7, #2576980377	; 0x99999999
    baf0:	464e      	mov	r6, r9
    baf2:	f04f 0c00 	mov.w	ip, #0
    baf6:	4660      	mov	r0, ip
    baf8:	4661      	mov	r1, ip
    bafa:	e011      	b.n	bb20 <_strtoull_l.constprop.0+0xa8>
    bafc:	4541      	cmp	r1, r8
    bafe:	bf08      	it	eq
    bb00:	42b8      	cmpeq	r0, r7
    bb02:	d03e      	beq.n	bb82 <_strtoull_l.constprop.0+0x10a>
    bb04:	fb00 f40a 	mul.w	r4, r0, sl
    bb08:	fb09 4101 	mla	r1, r9, r1, r4
    bb0c:	fba0 0409 	umull	r0, r4, r0, r9
    bb10:	4421      	add	r1, r4
    bb12:	1818      	adds	r0, r3, r0
    bb14:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
    bb18:	f04f 0c01 	mov.w	ip, #1
    bb1c:	f815 4b01 	ldrb.w	r4, [r5], #1
    bb20:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    bb24:	2b09      	cmp	r3, #9
    bb26:	d905      	bls.n	bb34 <_strtoull_l.constprop.0+0xbc>
    bb28:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
    bb2c:	2b19      	cmp	r3, #25
    bb2e:	d80d      	bhi.n	bb4c <_strtoull_l.constprop.0+0xd4>
    bb30:	f1a4 0337 	sub.w	r3, r4, #55	; 0x37
    bb34:	429e      	cmp	r6, r3
    bb36:	dd11      	ble.n	bb5c <_strtoull_l.constprop.0+0xe4>
    bb38:	f1bc 3fff 	cmp.w	ip, #4294967295
    bb3c:	d0ee      	beq.n	bb1c <_strtoull_l.constprop.0+0xa4>
    bb3e:	4287      	cmp	r7, r0
    bb40:	eb78 0401 	sbcs.w	r4, r8, r1
    bb44:	d2da      	bcs.n	bafc <_strtoull_l.constprop.0+0x84>
    bb46:	f04f 3cff 	mov.w	ip, #4294967295
    bb4a:	e7e7      	b.n	bb1c <_strtoull_l.constprop.0+0xa4>
    bb4c:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
    bb50:	2b19      	cmp	r3, #25
    bb52:	d803      	bhi.n	bb5c <_strtoull_l.constprop.0+0xe4>
    bb54:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
    bb58:	429e      	cmp	r6, r3
    bb5a:	dced      	bgt.n	bb38 <_strtoull_l.constprop.0+0xc0>
    bb5c:	f1bc 3fff 	cmp.w	ip, #4294967295
    bb60:	d014      	beq.n	bb8c <_strtoull_l.constprop.0+0x114>
    bb62:	9b02      	ldr	r3, [sp, #8]
    bb64:	b113      	cbz	r3, bb6c <_strtoull_l.constprop.0+0xf4>
    bb66:	4240      	negs	r0, r0
    bb68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    bb6c:	9b01      	ldr	r3, [sp, #4]
    bb6e:	b12b      	cbz	r3, bb7c <_strtoull_l.constprop.0+0x104>
    bb70:	f1bc 0f00 	cmp.w	ip, #0
    bb74:	d112      	bne.n	bb9c <_strtoull_l.constprop.0+0x124>
    bb76:	9b01      	ldr	r3, [sp, #4]
    bb78:	f8c3 b000 	str.w	fp, [r3]
    bb7c:	b005      	add	sp, #20
    bb7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bb82:	4293      	cmp	r3, r2
    bb84:	ddbe      	ble.n	bb04 <_strtoull_l.constprop.0+0x8c>
    bb86:	f04f 3cff 	mov.w	ip, #4294967295
    bb8a:	e7c7      	b.n	bb1c <_strtoull_l.constprop.0+0xa4>
    bb8c:	9a03      	ldr	r2, [sp, #12]
    bb8e:	2322      	movs	r3, #34	; 0x22
    bb90:	6013      	str	r3, [r2, #0]
    bb92:	9b01      	ldr	r3, [sp, #4]
    bb94:	4660      	mov	r0, ip
    bb96:	4661      	mov	r1, ip
    bb98:	2b00      	cmp	r3, #0
    bb9a:	d0ef      	beq.n	bb7c <_strtoull_l.constprop.0+0x104>
    bb9c:	f105 3bff 	add.w	fp, r5, #4294967295
    bba0:	e7e9      	b.n	bb76 <_strtoull_l.constprop.0+0xfe>
    bba2:	2301      	movs	r3, #1
    bba4:	782c      	ldrb	r4, [r5, #0]
    bba6:	9302      	str	r3, [sp, #8]
    bba8:	1c8d      	adds	r5, r1, #2
    bbaa:	e77e      	b.n	baaa <_strtoull_l.constprop.0+0x32>
    bbac:	2c30      	cmp	r4, #48	; 0x30
    bbae:	d123      	bne.n	bbf8 <_strtoull_l.constprop.0+0x180>
    bbb0:	782b      	ldrb	r3, [r5, #0]
    bbb2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    bbb6:	2b58      	cmp	r3, #88	; 0x58
    bbb8:	d11b      	bne.n	bbf2 <_strtoull_l.constprop.0+0x17a>
    bbba:	f04f 0910 	mov.w	r9, #16
    bbbe:	786c      	ldrb	r4, [r5, #1]
    bbc0:	220f      	movs	r2, #15
    bbc2:	3502      	adds	r5, #2
    bbc4:	f04f 37ff 	mov.w	r7, #4294967295
    bbc8:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
    bbcc:	f04f 0a00 	mov.w	sl, #0
    bbd0:	464e      	mov	r6, r9
    bbd2:	e78e      	b.n	baf2 <_strtoull_l.constprop.0+0x7a>
    bbd4:	782b      	ldrb	r3, [r5, #0]
    bbd6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    bbda:	2b58      	cmp	r3, #88	; 0x58
    bbdc:	d0ed      	beq.n	bbba <_strtoull_l.constprop.0+0x142>
    bbde:	f04f 0908 	mov.w	r9, #8
    bbe2:	46b2      	mov	sl, r6
    bbe4:	2207      	movs	r2, #7
    bbe6:	f04f 37ff 	mov.w	r7, #4294967295
    bbea:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
    bbee:	464e      	mov	r6, r9
    bbf0:	e77f      	b.n	baf2 <_strtoull_l.constprop.0+0x7a>
    bbf2:	f04f 0a00 	mov.w	sl, #0
    bbf6:	e75d      	b.n	bab4 <_strtoull_l.constprop.0+0x3c>
    bbf8:	220f      	movs	r2, #15
    bbfa:	f04f 37ff 	mov.w	r7, #4294967295
    bbfe:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
    bc02:	46b1      	mov	r9, r6
    bc04:	f04f 0a00 	mov.w	sl, #0
    bc08:	e773      	b.n	baf2 <_strtoull_l.constprop.0+0x7a>
    bc0a:	bf00      	nop
    bc0c:	20000645 	.word	0x20000645
    bc10:	19999999 	.word	0x19999999

0000bc14 <_strtoull_r>:
    bc14:	f7ff bf30 	b.w	ba78 <_strtoull_l.constprop.0>

0000bc18 <_mbrtowc_r>:
    bc18:	b570      	push	{r4, r5, r6, lr}
    bc1a:	b082      	sub	sp, #8
    bc1c:	4604      	mov	r4, r0
    bc1e:	9d06      	ldr	r5, [sp, #24]
    bc20:	b155      	cbz	r5, bc38 <_mbrtowc_r+0x20>
    bc22:	b16a      	cbz	r2, bc40 <_mbrtowc_r+0x28>
    bc24:	480f      	ldr	r0, [pc, #60]	; (bc64 <_mbrtowc_r+0x4c>)
    bc26:	9500      	str	r5, [sp, #0]
    bc28:	f8d0 60e4 	ldr.w	r6, [r0, #228]	; 0xe4
    bc2c:	4620      	mov	r0, r4
    bc2e:	47b0      	blx	r6
    bc30:	1c43      	adds	r3, r0, #1
    bc32:	d010      	beq.n	bc56 <_mbrtowc_r+0x3e>
    bc34:	b002      	add	sp, #8
    bc36:	bd70      	pop	{r4, r5, r6, pc}
    bc38:	f100 05f4 	add.w	r5, r0, #244	; 0xf4
    bc3c:	2a00      	cmp	r2, #0
    bc3e:	d1f1      	bne.n	bc24 <_mbrtowc_r+0xc>
    bc40:	4b08      	ldr	r3, [pc, #32]	; (bc64 <_mbrtowc_r+0x4c>)
    bc42:	9500      	str	r5, [sp, #0]
    bc44:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
    bc48:	4611      	mov	r1, r2
    bc4a:	2301      	movs	r3, #1
    bc4c:	4a06      	ldr	r2, [pc, #24]	; (bc68 <_mbrtowc_r+0x50>)
    bc4e:	4620      	mov	r0, r4
    bc50:	47b0      	blx	r6
    bc52:	1c43      	adds	r3, r0, #1
    bc54:	d1ee      	bne.n	bc34 <_mbrtowc_r+0x1c>
    bc56:	2200      	movs	r2, #0
    bc58:	238a      	movs	r3, #138	; 0x8a
    bc5a:	602a      	str	r2, [r5, #0]
    bc5c:	6023      	str	r3, [r4, #0]
    bc5e:	b002      	add	sp, #8
    bc60:	bd70      	pop	{r4, r5, r6, pc}
    bc62:	bf00      	nop
    bc64:	20007c5c 	.word	0x20007c5c
    bc68:	200078e4 	.word	0x200078e4

0000bc6c <_wcrtomb_r>:
    bc6c:	b570      	push	{r4, r5, r6, lr}
    bc6e:	4605      	mov	r5, r0
    bc70:	b084      	sub	sp, #16
    bc72:	b15b      	cbz	r3, bc8c <_wcrtomb_r+0x20>
    bc74:	461c      	mov	r4, r3
    bc76:	b169      	cbz	r1, bc94 <_wcrtomb_r+0x28>
    bc78:	4b0e      	ldr	r3, [pc, #56]	; (bcb4 <_wcrtomb_r+0x48>)
    bc7a:	4628      	mov	r0, r5
    bc7c:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
    bc80:	4623      	mov	r3, r4
    bc82:	47b0      	blx	r6
    bc84:	1c43      	adds	r3, r0, #1
    bc86:	d00f      	beq.n	bca8 <_wcrtomb_r+0x3c>
    bc88:	b004      	add	sp, #16
    bc8a:	bd70      	pop	{r4, r5, r6, pc}
    bc8c:	f500 7482 	add.w	r4, r0, #260	; 0x104
    bc90:	2900      	cmp	r1, #0
    bc92:	d1f1      	bne.n	bc78 <_wcrtomb_r+0xc>
    bc94:	4a07      	ldr	r2, [pc, #28]	; (bcb4 <_wcrtomb_r+0x48>)
    bc96:	4623      	mov	r3, r4
    bc98:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
    bc9c:	4628      	mov	r0, r5
    bc9e:	460a      	mov	r2, r1
    bca0:	a901      	add	r1, sp, #4
    bca2:	47b0      	blx	r6
    bca4:	1c43      	adds	r3, r0, #1
    bca6:	d1ef      	bne.n	bc88 <_wcrtomb_r+0x1c>
    bca8:	2200      	movs	r2, #0
    bcaa:	238a      	movs	r3, #138	; 0x8a
    bcac:	6022      	str	r2, [r4, #0]
    bcae:	602b      	str	r3, [r5, #0]
    bcb0:	b004      	add	sp, #16
    bcb2:	bd70      	pop	{r4, r5, r6, pc}
    bcb4:	20007c5c 	.word	0x20007c5c

0000bcb8 <_wcsrtombs_r>:
    bcb8:	b510      	push	{r4, lr}
    bcba:	b082      	sub	sp, #8
    bcbc:	9c04      	ldr	r4, [sp, #16]
    bcbe:	e9cd 3400 	strd	r3, r4, [sp]
    bcc2:	f04f 33ff 	mov.w	r3, #4294967295
    bcc6:	f001 fd9f 	bl	d808 <_wcsnrtombs_r>
    bcca:	b002      	add	sp, #8
    bccc:	bd10      	pop	{r4, pc}
    bcce:	bf00      	nop

0000bcd0 <iswspace>:
    bcd0:	2100      	movs	r1, #0
    bcd2:	f000 b801 	b.w	bcd8 <iswspace_l>
    bcd6:	bf00      	nop

0000bcd8 <iswspace_l>:
    bcd8:	b510      	push	{r4, lr}
    bcda:	f000 f8ab 	bl	be34 <_jp2uc_l>
    bcde:	4604      	mov	r4, r0
    bce0:	f001 fda4 	bl	d82c <category>
    bce4:	f1a0 031a 	sub.w	r3, r0, #26
    bce8:	b2db      	uxtb	r3, r3
    bcea:	2b02      	cmp	r3, #2
    bcec:	d906      	bls.n	bcfc <iswspace_l+0x24>
    bcee:	f1a4 0009 	sub.w	r0, r4, #9
    bcf2:	2804      	cmp	r0, #4
    bcf4:	bf8c      	ite	hi
    bcf6:	2000      	movhi	r0, #0
    bcf8:	2001      	movls	r0, #1
    bcfa:	bd10      	pop	{r4, pc}
    bcfc:	2001      	movs	r0, #1
    bcfe:	bd10      	pop	{r4, pc}

0000bd00 <__jp2uc>:
    bd00:	2902      	cmp	r1, #2
    bd02:	d032      	beq.n	bd6a <__jp2uc+0x6a>
    bd04:	2903      	cmp	r1, #3
    bd06:	f3c0 2307 	ubfx	r3, r0, #8, #8
    bd0a:	bf1d      	ittte	ne
    bd0c:	f1a0 0280 	subne.w	r2, r0, #128	; 0x80
    bd10:	f083 0380 	eorne.w	r3, r3, #128	; 0x80
    bd14:	b2d2      	uxtbne	r2, r2
    bd16:	b2c2      	uxtbeq	r2, r0
    bd18:	f103 0150 	add.w	r1, r3, #80	; 0x50
    bd1c:	b2c9      	uxtb	r1, r1
    bd1e:	291f      	cmp	r1, #31
    bd20:	d806      	bhi.n	bd30 <__jp2uc+0x30>
    bd22:	f64c 71d3 	movw	r1, #53203	; 0xcfd3
    bd26:	4288      	cmp	r0, r1
    bd28:	d969      	bls.n	bdfe <__jp2uc+0xfe>
    bd2a:	f04f 30ff 	mov.w	r0, #4294967295
    bd2e:	4770      	bx	lr
    bd30:	f103 0130 	add.w	r1, r3, #48	; 0x30
    bd34:	b2c9      	uxtb	r1, r1
    bd36:	2924      	cmp	r1, #36	; 0x24
    bd38:	d80e      	bhi.n	bd58 <__jp2uc+0x58>
    bd3a:	f24f 41a6 	movw	r1, #62630	; 0xf4a6
    bd3e:	4288      	cmp	r0, r1
    bd40:	d8f3      	bhi.n	bd2a <__jp2uc+0x2a>
    bd42:	3bd0      	subs	r3, #208	; 0xd0
    bd44:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
    bd48:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
    bd4c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    bd50:	4a30      	ldr	r2, [pc, #192]	; (be14 <__jp2uc+0x114>)
    bd52:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
    bd56:	4770      	bx	lr
    bd58:	3ba1      	subs	r3, #161	; 0xa1
    bd5a:	2b07      	cmp	r3, #7
    bd5c:	d8e5      	bhi.n	bd2a <__jp2uc+0x2a>
    bd5e:	e8df f003 	tbb	[pc, r3]
    bd62:	3e48      	.short	0x3e48
    bd64:	25292e34 	.word	0x25292e34
    bd68:	1921      	.short	0x1921
    bd6a:	b2c2      	uxtb	r2, r0
    bd6c:	2a9e      	cmp	r2, #158	; 0x9e
    bd6e:	f3c0 2107 	ubfx	r1, r0, #8, #8
    bd72:	d90b      	bls.n	bd8c <__jp2uc+0x8c>
    bd74:	3223      	adds	r2, #35	; 0x23
    bd76:	b2d2      	uxtb	r2, r2
    bd78:	2380      	movs	r3, #128	; 0x80
    bd7a:	299f      	cmp	r1, #159	; 0x9f
    bd7c:	bf94      	ite	ls
    bd7e:	3970      	subls	r1, #112	; 0x70
    bd80:	3150      	addhi	r1, #80	; 0x50
    bd82:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    bd86:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    bd8a:	e7c5      	b.n	bd18 <__jp2uc+0x18>
    bd8c:	3a7e      	subs	r2, #126	; 0x7e
    bd8e:	b2d2      	uxtb	r2, r2
    bd90:	237f      	movs	r3, #127	; 0x7f
    bd92:	e7f2      	b.n	bd7a <__jp2uc+0x7a>
    bd94:	2ac0      	cmp	r2, #192	; 0xc0
    bd96:	d8c8      	bhi.n	bd2a <__jp2uc+0x2a>
    bd98:	4b1f      	ldr	r3, [pc, #124]	; (be18 <__jp2uc+0x118>)
    bd9a:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
    bd9e:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    bda2:	4770      	bx	lr
    bda4:	2af1      	cmp	r2, #241	; 0xf1
    bda6:	d8c0      	bhi.n	bd2a <__jp2uc+0x2a>
    bda8:	4b1c      	ldr	r3, [pc, #112]	; (be1c <__jp2uc+0x11c>)
    bdaa:	e019      	b.n	bde0 <__jp2uc+0xe0>
    bdac:	2ad8      	cmp	r2, #216	; 0xd8
    bdae:	d8bc      	bhi.n	bd2a <__jp2uc+0x2a>
    bdb0:	4b1b      	ldr	r3, [pc, #108]	; (be20 <__jp2uc+0x120>)
    bdb2:	e015      	b.n	bde0 <__jp2uc+0xe0>
    bdb4:	2af6      	cmp	r2, #246	; 0xf6
    bdb6:	d8b8      	bhi.n	bd2a <__jp2uc+0x2a>
    bdb8:	f502 5040 	add.w	r0, r2, #12288	; 0x3000
    bdbc:	4770      	bx	lr
    bdbe:	2af3      	cmp	r2, #243	; 0xf3
    bdc0:	d8b3      	bhi.n	bd2a <__jp2uc+0x2a>
    bdc2:	f502 503e 	add.w	r0, r2, #12160	; 0x2f80
    bdc6:	3020      	adds	r0, #32
    bdc8:	4770      	bx	lr
    bdca:	4b16      	ldr	r3, [pc, #88]	; (be24 <__jp2uc+0x124>)
    bdcc:	4413      	add	r3, r2
    bdce:	f813 3ca1 	ldrb.w	r3, [r3, #-161]
    bdd2:	2b00      	cmp	r3, #0
    bdd4:	d0a9      	beq.n	bd2a <__jp2uc+0x2a>
    bdd6:	f502 407e 	add.w	r0, r2, #65024	; 0xfe00
    bdda:	3060      	adds	r0, #96	; 0x60
    bddc:	4770      	bx	lr
    bdde:	4b12      	ldr	r3, [pc, #72]	; (be28 <__jp2uc+0x128>)
    bde0:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
    bde4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    bde8:	2800      	cmp	r0, #0
    bdea:	bf08      	it	eq
    bdec:	f04f 30ff 	moveq.w	r0, #4294967295
    bdf0:	4770      	bx	lr
    bdf2:	4b0e      	ldr	r3, [pc, #56]	; (be2c <__jp2uc+0x12c>)
    bdf4:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
    bdf8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    bdfc:	4770      	bx	lr
    bdfe:	3bb0      	subs	r3, #176	; 0xb0
    be00:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
    be04:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
    be08:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    be0c:	4a08      	ldr	r2, [pc, #32]	; (be30 <__jp2uc+0x130>)
    be0e:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
    be12:	4770      	bx	lr
    be14:	200057ec 	.word	0x200057ec
    be18:	20000b08 	.word	0x20000b08
    be1c:	20000a64 	.word	0x20000a64
    be20:	200009f4 	.word	0x200009f4
    be24:	20000998 	.word	0x20000998
    be28:	200008dc 	.word	0x200008dc
    be2c:	20000820 	.word	0x20000820
    be30:	20000b48 	.word	0x20000b48

0000be34 <_jp2uc_l>:
    be34:	b538      	push	{r3, r4, r5, lr}
    be36:	4605      	mov	r5, r0
    be38:	b1b9      	cbz	r1, be6a <_jp2uc_l+0x36>
    be3a:	f501 7495 	add.w	r4, r1, #298	; 0x12a
    be3e:	4912      	ldr	r1, [pc, #72]	; (be88 <_jp2uc_l+0x54>)
    be40:	4620      	mov	r0, r4
    be42:	f7f9 fc91 	bl	5768 <strcmp>
    be46:	b928      	cbnz	r0, be54 <_jp2uc_l+0x20>
    be48:	4628      	mov	r0, r5
    be4a:	2101      	movs	r1, #1
    be4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    be50:	f7ff bf56 	b.w	bd00 <__jp2uc>
    be54:	490d      	ldr	r1, [pc, #52]	; (be8c <_jp2uc_l+0x58>)
    be56:	4620      	mov	r0, r4
    be58:	f7f9 fc86 	bl	5768 <strcmp>
    be5c:	b938      	cbnz	r0, be6e <_jp2uc_l+0x3a>
    be5e:	4628      	mov	r0, r5
    be60:	2102      	movs	r1, #2
    be62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    be66:	f7ff bf4b 	b.w	bd00 <__jp2uc>
    be6a:	4c09      	ldr	r4, [pc, #36]	; (be90 <_jp2uc_l+0x5c>)
    be6c:	e7e7      	b.n	be3e <_jp2uc_l+0xa>
    be6e:	4909      	ldr	r1, [pc, #36]	; (be94 <_jp2uc_l+0x60>)
    be70:	4620      	mov	r0, r4
    be72:	f7f9 fc79 	bl	5768 <strcmp>
    be76:	b928      	cbnz	r0, be84 <_jp2uc_l+0x50>
    be78:	4628      	mov	r0, r5
    be7a:	2103      	movs	r1, #3
    be7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    be80:	f7ff bf3e 	b.w	bd00 <__jp2uc>
    be84:	4628      	mov	r0, r5
    be86:	bd38      	pop	{r3, r4, r5, pc}
    be88:	200007b4 	.word	0x200007b4
    be8c:	200007b8 	.word	0x200007b8
    be90:	20007d86 	.word	0x20007d86
    be94:	200007c0 	.word	0x200007c0

0000be98 <fiprintf>:
    be98:	b40e      	push	{r1, r2, r3}
    be9a:	b510      	push	{r4, lr}
    be9c:	b083      	sub	sp, #12
    be9e:	ab05      	add	r3, sp, #20
    bea0:	4c06      	ldr	r4, [pc, #24]	; (bebc <fiprintf+0x24>)
    bea2:	f853 2b04 	ldr.w	r2, [r3], #4
    bea6:	9301      	str	r3, [sp, #4]
    bea8:	4601      	mov	r1, r0
    beaa:	6820      	ldr	r0, [r4, #0]
    beac:	f000 f97c 	bl	c1a8 <_vfiprintf_r>
    beb0:	b003      	add	sp, #12
    beb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    beb6:	b003      	add	sp, #12
    beb8:	4770      	bx	lr
    beba:	bf00      	nop
    bebc:	200081e4 	.word	0x200081e4

0000bec0 <__ssprint_r>:
    bec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bec4:	6893      	ldr	r3, [r2, #8]
    bec6:	6817      	ldr	r7, [r2, #0]
    bec8:	b083      	sub	sp, #12
    beca:	4692      	mov	sl, r2
    becc:	2b00      	cmp	r3, #0
    bece:	d070      	beq.n	bfb2 <__ssprint_r+0xf2>
    bed0:	4681      	mov	r9, r0
    bed2:	688a      	ldr	r2, [r1, #8]
    bed4:	6808      	ldr	r0, [r1, #0]
    bed6:	460c      	mov	r4, r1
    bed8:	3708      	adds	r7, #8
    beda:	e043      	b.n	bf64 <__ssprint_r+0xa4>
    bedc:	89a3      	ldrh	r3, [r4, #12]
    bede:	f413 6f90 	tst.w	r3, #1152	; 0x480
    bee2:	d02e      	beq.n	bf42 <__ssprint_r+0x82>
    bee4:	e9d4 1604 	ldrd	r1, r6, [r4, #16]
    bee8:	eba0 0801 	sub.w	r8, r0, r1
    beec:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    bef0:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
    bef4:	f108 0001 	add.w	r0, r8, #1
    bef8:	1076      	asrs	r6, r6, #1
    befa:	4428      	add	r0, r5
    befc:	42b0      	cmp	r0, r6
    befe:	4632      	mov	r2, r6
    bf00:	bf84      	itt	hi
    bf02:	4606      	movhi	r6, r0
    bf04:	4632      	movhi	r2, r6
    bf06:	055b      	lsls	r3, r3, #21
    bf08:	d537      	bpl.n	bf7a <__ssprint_r+0xba>
    bf0a:	4611      	mov	r1, r2
    bf0c:	4648      	mov	r0, r9
    bf0e:	f7f7 fba3 	bl	3658 <_malloc_r>
    bf12:	9001      	str	r0, [sp, #4]
    bf14:	2800      	cmp	r0, #0
    bf16:	d03a      	beq.n	bf8e <__ssprint_r+0xce>
    bf18:	4642      	mov	r2, r8
    bf1a:	6921      	ldr	r1, [r4, #16]
    bf1c:	f7f5 fc76 	bl	180c <memcpy>
    bf20:	89a2      	ldrh	r2, [r4, #12]
    bf22:	9b01      	ldr	r3, [sp, #4]
    bf24:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
    bf28:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    bf2c:	81a2      	strh	r2, [r4, #12]
    bf2e:	eba6 0208 	sub.w	r2, r6, r8
    bf32:	eb03 0008 	add.w	r0, r3, r8
    bf36:	6166      	str	r6, [r4, #20]
    bf38:	60a2      	str	r2, [r4, #8]
    bf3a:	6123      	str	r3, [r4, #16]
    bf3c:	6020      	str	r0, [r4, #0]
    bf3e:	462e      	mov	r6, r5
    bf40:	46a8      	mov	r8, r5
    bf42:	4642      	mov	r2, r8
    bf44:	4659      	mov	r1, fp
    bf46:	f7f9 fa1f 	bl	5388 <memmove>
    bf4a:	f8da 3008 	ldr.w	r3, [sl, #8]
    bf4e:	68a2      	ldr	r2, [r4, #8]
    bf50:	6820      	ldr	r0, [r4, #0]
    bf52:	1b92      	subs	r2, r2, r6
    bf54:	4440      	add	r0, r8
    bf56:	1b5b      	subs	r3, r3, r5
    bf58:	60a2      	str	r2, [r4, #8]
    bf5a:	6020      	str	r0, [r4, #0]
    bf5c:	f8ca 3008 	str.w	r3, [sl, #8]
    bf60:	b33b      	cbz	r3, bfb2 <__ssprint_r+0xf2>
    bf62:	3708      	adds	r7, #8
    bf64:	e957 b502 	ldrd	fp, r5, [r7, #-8]
    bf68:	2d00      	cmp	r5, #0
    bf6a:	d0fa      	beq.n	bf62 <__ssprint_r+0xa2>
    bf6c:	42aa      	cmp	r2, r5
    bf6e:	4616      	mov	r6, r2
    bf70:	4690      	mov	r8, r2
    bf72:	d9b3      	bls.n	bedc <__ssprint_r+0x1c>
    bf74:	462e      	mov	r6, r5
    bf76:	46a8      	mov	r8, r5
    bf78:	e7e3      	b.n	bf42 <__ssprint_r+0x82>
    bf7a:	4648      	mov	r0, r9
    bf7c:	f7f7 fe34 	bl	3be8 <_realloc_r>
    bf80:	4603      	mov	r3, r0
    bf82:	2800      	cmp	r0, #0
    bf84:	d1d3      	bne.n	bf2e <__ssprint_r+0x6e>
    bf86:	6921      	ldr	r1, [r4, #16]
    bf88:	4648      	mov	r0, r9
    bf8a:	f7f9 fe27 	bl	5bdc <_free_r>
    bf8e:	89a3      	ldrh	r3, [r4, #12]
    bf90:	220c      	movs	r2, #12
    bf92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    bf96:	f8c9 2000 	str.w	r2, [r9]
    bf9a:	f04f 30ff 	mov.w	r0, #4294967295
    bf9e:	81a3      	strh	r3, [r4, #12]
    bfa0:	2200      	movs	r2, #0
    bfa2:	2300      	movs	r3, #0
    bfa4:	f8ca 2008 	str.w	r2, [sl, #8]
    bfa8:	f8ca 3004 	str.w	r3, [sl, #4]
    bfac:	b003      	add	sp, #12
    bfae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bfb2:	2000      	movs	r0, #0
    bfb4:	2300      	movs	r3, #0
    bfb6:	f8ca 3004 	str.w	r3, [sl, #4]
    bfba:	b003      	add	sp, #12
    bfbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000bfc0 <_sungetc_r>:
    bfc0:	b538      	push	{r3, r4, r5, lr}
    bfc2:	1c4b      	adds	r3, r1, #1
    bfc4:	d01a      	beq.n	bffc <_sungetc_r+0x3c>
    bfc6:	8993      	ldrh	r3, [r2, #12]
    bfc8:	4614      	mov	r4, r2
    bfca:	6b12      	ldr	r2, [r2, #48]	; 0x30
    bfcc:	f023 0320 	bic.w	r3, r3, #32
    bfd0:	81a3      	strh	r3, [r4, #12]
    bfd2:	b2cd      	uxtb	r5, r1
    bfd4:	b1aa      	cbz	r2, c002 <_sungetc_r+0x42>
    bfd6:	6862      	ldr	r2, [r4, #4]
    bfd8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    bfda:	429a      	cmp	r2, r3
    bfdc:	da09      	bge.n	bff2 <_sungetc_r+0x32>
    bfde:	6823      	ldr	r3, [r4, #0]
    bfe0:	1e5a      	subs	r2, r3, #1
    bfe2:	6022      	str	r2, [r4, #0]
    bfe4:	f803 5c01 	strb.w	r5, [r3, #-1]
    bfe8:	6863      	ldr	r3, [r4, #4]
    bfea:	3301      	adds	r3, #1
    bfec:	6063      	str	r3, [r4, #4]
    bfee:	4628      	mov	r0, r5
    bff0:	bd38      	pop	{r3, r4, r5, pc}
    bff2:	4621      	mov	r1, r4
    bff4:	f001 fa58 	bl	d4a8 <__submore>
    bff8:	2800      	cmp	r0, #0
    bffa:	d0f0      	beq.n	bfde <_sungetc_r+0x1e>
    bffc:	f04f 35ff 	mov.w	r5, #4294967295
    c000:	e7f5      	b.n	bfee <_sungetc_r+0x2e>
    c002:	6923      	ldr	r3, [r4, #16]
    c004:	6822      	ldr	r2, [r4, #0]
    c006:	b12b      	cbz	r3, c014 <_sungetc_r+0x54>
    c008:	4293      	cmp	r3, r2
    c00a:	d203      	bcs.n	c014 <_sungetc_r+0x54>
    c00c:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    c010:	42ab      	cmp	r3, r5
    c012:	d00f      	beq.n	c034 <_sungetc_r+0x74>
    c014:	6861      	ldr	r1, [r4, #4]
    c016:	63e1      	str	r1, [r4, #60]	; 0x3c
    c018:	4623      	mov	r3, r4
    c01a:	63a2      	str	r2, [r4, #56]	; 0x38
    c01c:	f104 0140 	add.w	r1, r4, #64	; 0x40
    c020:	2203      	movs	r2, #3
    c022:	6362      	str	r2, [r4, #52]	; 0x34
    c024:	6321      	str	r1, [r4, #48]	; 0x30
    c026:	f803 5f42 	strb.w	r5, [r3, #66]!
    c02a:	2201      	movs	r2, #1
    c02c:	e9c4 3200 	strd	r3, r2, [r4]
    c030:	4628      	mov	r0, r5
    c032:	bd38      	pop	{r3, r4, r5, pc}
    c034:	6863      	ldr	r3, [r4, #4]
    c036:	3a01      	subs	r2, #1
    c038:	3301      	adds	r3, #1
    c03a:	e9c4 2300 	strd	r2, r3, [r4]
    c03e:	e7d6      	b.n	bfee <_sungetc_r+0x2e>

0000c040 <__ssrefill_r>:
    c040:	b510      	push	{r4, lr}
    c042:	460c      	mov	r4, r1
    c044:	6b09      	ldr	r1, [r1, #48]	; 0x30
    c046:	b169      	cbz	r1, c064 <__ssrefill_r+0x24>
    c048:	f104 0340 	add.w	r3, r4, #64	; 0x40
    c04c:	4299      	cmp	r1, r3
    c04e:	d001      	beq.n	c054 <__ssrefill_r+0x14>
    c050:	f7f9 fdc4 	bl	5bdc <_free_r>
    c054:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    c056:	6063      	str	r3, [r4, #4]
    c058:	2000      	movs	r0, #0
    c05a:	6320      	str	r0, [r4, #48]	; 0x30
    c05c:	b113      	cbz	r3, c064 <__ssrefill_r+0x24>
    c05e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    c060:	6023      	str	r3, [r4, #0]
    c062:	bd10      	pop	{r4, pc}
    c064:	89a3      	ldrh	r3, [r4, #12]
    c066:	6921      	ldr	r1, [r4, #16]
    c068:	2200      	movs	r2, #0
    c06a:	f043 0320 	orr.w	r3, r3, #32
    c06e:	e9c4 1200 	strd	r1, r2, [r4]
    c072:	81a3      	strh	r3, [r4, #12]
    c074:	f04f 30ff 	mov.w	r0, #4294967295
    c078:	bd10      	pop	{r4, pc}
    c07a:	bf00      	nop

0000c07c <_sfread_r>:
    c07c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c080:	b085      	sub	sp, #20
    c082:	e9cd 3202 	strd	r3, r2, [sp, #8]
    c086:	fb02 f303 	mul.w	r3, r2, r3
    c08a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    c08c:	9301      	str	r3, [sp, #4]
    c08e:	b3a3      	cbz	r3, c0fa <_sfread_r+0x7e>
    c090:	f8d4 a004 	ldr.w	sl, [r4, #4]
    c094:	9b01      	ldr	r3, [sp, #4]
    c096:	4553      	cmp	r3, sl
    c098:	468b      	mov	fp, r1
    c09a:	d946      	bls.n	c12a <_sfread_r+0xae>
    c09c:	46a0      	mov	r8, r4
    c09e:	9d01      	ldr	r5, [sp, #4]
    c0a0:	f858 1b40 	ldr.w	r1, [r8], #64
    c0a4:	4607      	mov	r7, r0
    c0a6:	2600      	movs	r6, #0
    c0a8:	4652      	mov	r2, sl
    c0aa:	4658      	mov	r0, fp
    c0ac:	f7f5 fbae 	bl	180c <memcpy>
    c0b0:	6823      	ldr	r3, [r4, #0]
    c0b2:	6b22      	ldr	r2, [r4, #48]	; 0x30
    c0b4:	4453      	add	r3, sl
    c0b6:	46a9      	mov	r9, r5
    c0b8:	e9c4 3600 	strd	r3, r6, [r4]
    c0bc:	4611      	mov	r1, r2
    c0be:	4638      	mov	r0, r7
    c0c0:	44d3      	add	fp, sl
    c0c2:	eba5 050a 	sub.w	r5, r5, sl
    c0c6:	b1e2      	cbz	r2, c102 <_sfread_r+0x86>
    c0c8:	4542      	cmp	r2, r8
    c0ca:	d001      	beq.n	c0d0 <_sfread_r+0x54>
    c0cc:	f7f9 fd86 	bl	5bdc <_free_r>
    c0d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    c0d2:	6326      	str	r6, [r4, #48]	; 0x30
    c0d4:	6063      	str	r3, [r4, #4]
    c0d6:	b1a3      	cbz	r3, c102 <_sfread_r+0x86>
    c0d8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    c0da:	6021      	str	r1, [r4, #0]
    c0dc:	42ab      	cmp	r3, r5
    c0de:	469a      	mov	sl, r3
    c0e0:	d3e2      	bcc.n	c0a8 <_sfread_r+0x2c>
    c0e2:	9b02      	ldr	r3, [sp, #8]
    c0e4:	9301      	str	r3, [sp, #4]
    c0e6:	462a      	mov	r2, r5
    c0e8:	4658      	mov	r0, fp
    c0ea:	f7f5 fb8f 	bl	180c <memcpy>
    c0ee:	e9d4 3200 	ldrd	r3, r2, [r4]
    c0f2:	1b52      	subs	r2, r2, r5
    c0f4:	442b      	add	r3, r5
    c0f6:	e9c4 3200 	strd	r3, r2, [r4]
    c0fa:	9801      	ldr	r0, [sp, #4]
    c0fc:	b005      	add	sp, #20
    c0fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c102:	9a01      	ldr	r2, [sp, #4]
    c104:	9b03      	ldr	r3, [sp, #12]
    c106:	4452      	add	r2, sl
    c108:	eba2 0209 	sub.w	r2, r2, r9
    c10c:	fbb2 f3f3 	udiv	r3, r2, r3
    c110:	9301      	str	r3, [sp, #4]
    c112:	89a3      	ldrh	r3, [r4, #12]
    c114:	6922      	ldr	r2, [r4, #16]
    c116:	9801      	ldr	r0, [sp, #4]
    c118:	f043 0320 	orr.w	r3, r3, #32
    c11c:	81a3      	strh	r3, [r4, #12]
    c11e:	2300      	movs	r3, #0
    c120:	e9c4 2300 	strd	r2, r3, [r4]
    c124:	b005      	add	sp, #20
    c126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c12a:	6821      	ldr	r1, [r4, #0]
    c12c:	461d      	mov	r5, r3
    c12e:	e7d8      	b.n	c0e2 <_sfread_r+0x66>

0000c130 <__sprint_r.part.0>:
    c130:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c134:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    c136:	049c      	lsls	r4, r3, #18
    c138:	4690      	mov	r8, r2
    c13a:	d52d      	bpl.n	c198 <__sprint_r.part.0+0x68>
    c13c:	6893      	ldr	r3, [r2, #8]
    c13e:	6812      	ldr	r2, [r2, #0]
    c140:	b343      	cbz	r3, c194 <__sprint_r.part.0+0x64>
    c142:	468b      	mov	fp, r1
    c144:	4606      	mov	r6, r0
    c146:	f102 0908 	add.w	r9, r2, #8
    c14a:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
    c14e:	ea5f 079a 	movs.w	r7, sl, lsr #2
    c152:	d015      	beq.n	c180 <__sprint_r.part.0+0x50>
    c154:	3d04      	subs	r5, #4
    c156:	2400      	movs	r4, #0
    c158:	e001      	b.n	c15e <__sprint_r.part.0+0x2e>
    c15a:	42a7      	cmp	r7, r4
    c15c:	d00e      	beq.n	c17c <__sprint_r.part.0+0x4c>
    c15e:	f855 1f04 	ldr.w	r1, [r5, #4]!
    c162:	465a      	mov	r2, fp
    c164:	4630      	mov	r0, r6
    c166:	f001 fa97 	bl	d698 <_fputwc_r>
    c16a:	1c43      	adds	r3, r0, #1
    c16c:	f104 0401 	add.w	r4, r4, #1
    c170:	d1f3      	bne.n	c15a <__sprint_r.part.0+0x2a>
    c172:	2300      	movs	r3, #0
    c174:	e9c8 3301 	strd	r3, r3, [r8, #4]
    c178:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c17c:	f8d8 3008 	ldr.w	r3, [r8, #8]
    c180:	f02a 0a03 	bic.w	sl, sl, #3
    c184:	eba3 030a 	sub.w	r3, r3, sl
    c188:	f8c8 3008 	str.w	r3, [r8, #8]
    c18c:	f109 0908 	add.w	r9, r9, #8
    c190:	2b00      	cmp	r3, #0
    c192:	d1da      	bne.n	c14a <__sprint_r.part.0+0x1a>
    c194:	2000      	movs	r0, #0
    c196:	e7ec      	b.n	c172 <__sprint_r.part.0+0x42>
    c198:	f001 f80c 	bl	d1b4 <__sfvwrite_r>
    c19c:	2300      	movs	r3, #0
    c19e:	e9c8 3301 	strd	r3, r3, [r8, #4]
    c1a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c1a6:	bf00      	nop

0000c1a8 <_vfiprintf_r>:
    c1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c1ac:	ed2d 8b02 	vpush	{d8}
    c1b0:	b0c5      	sub	sp, #276	; 0x114
    c1b2:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
    c1b6:	4683      	mov	fp, r0
    c1b8:	ee08 1a10 	vmov	s16, r1
    c1bc:	4616      	mov	r6, r2
    c1be:	2100      	movs	r1, #0
    c1c0:	2208      	movs	r2, #8
    c1c2:	4650      	mov	r0, sl
    c1c4:	461c      	mov	r4, r3
    c1c6:	9307      	str	r3, [sp, #28]
    c1c8:	f7f9 f95a 	bl	5480 <memset>
    c1cc:	f1bb 0f00 	cmp.w	fp, #0
    c1d0:	d004      	beq.n	c1dc <_vfiprintf_r+0x34>
    c1d2:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
    c1d6:	2b00      	cmp	r3, #0
    c1d8:	f000 86a0 	beq.w	cf1c <_vfiprintf_r+0xd74>
    c1dc:	ee18 2a10 	vmov	r2, s16
    c1e0:	6e53      	ldr	r3, [r2, #100]	; 0x64
    c1e2:	07db      	lsls	r3, r3, #31
    c1e4:	f140 8513 	bpl.w	cc0e <_vfiprintf_r+0xa66>
    c1e8:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
    c1ec:	b28a      	uxth	r2, r1
    c1ee:	0495      	lsls	r5, r2, #18
    c1f0:	d40b      	bmi.n	c20a <_vfiprintf_r+0x62>
    c1f2:	ee18 3a10 	vmov	r3, s16
    c1f6:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
    c1fa:	8199      	strh	r1, [r3, #12]
    c1fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    c1fe:	b28a      	uxth	r2, r1
    c200:	ee18 1a10 	vmov	r1, s16
    c204:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    c208:	664b      	str	r3, [r1, #100]	; 0x64
    c20a:	0710      	lsls	r0, r2, #28
    c20c:	f140 8105 	bpl.w	c41a <_vfiprintf_r+0x272>
    c210:	ee18 3a10 	vmov	r3, s16
    c214:	691b      	ldr	r3, [r3, #16]
    c216:	2b00      	cmp	r3, #0
    c218:	f000 80ff 	beq.w	c41a <_vfiprintf_r+0x272>
    c21c:	f002 031a 	and.w	r3, r2, #26
    c220:	2b0a      	cmp	r3, #10
    c222:	f000 810a 	beq.w	c43a <_vfiprintf_r+0x292>
    c226:	2300      	movs	r3, #0
    c228:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
    c22c:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
    c230:	aa1b      	add	r2, sp, #108	; 0x6c
    c232:	930c      	str	r3, [sp, #48]	; 0x30
    c234:	9218      	str	r2, [sp, #96]	; 0x60
    c236:	4691      	mov	r9, r2
    c238:	930b      	str	r3, [sp, #44]	; 0x2c
    c23a:	9305      	str	r3, [sp, #20]
    c23c:	46b0      	mov	r8, r6
    c23e:	4644      	mov	r4, r8
    c240:	4ba8      	ldr	r3, [pc, #672]	; (c4e4 <_vfiprintf_r+0x33c>)
    c242:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    c246:	f7f9 f9e5 	bl	5614 <__locale_mb_cur_max>
    c24a:	4622      	mov	r2, r4
    c24c:	4603      	mov	r3, r0
    c24e:	a912      	add	r1, sp, #72	; 0x48
    c250:	f8cd a000 	str.w	sl, [sp]
    c254:	4658      	mov	r0, fp
    c256:	47a8      	blx	r5
    c258:	2800      	cmp	r0, #0
    c25a:	f000 8145 	beq.w	c4e8 <_vfiprintf_r+0x340>
    c25e:	f2c0 8139 	blt.w	c4d4 <_vfiprintf_r+0x32c>
    c262:	9a12      	ldr	r2, [sp, #72]	; 0x48
    c264:	2a25      	cmp	r2, #37	; 0x25
    c266:	4603      	mov	r3, r0
    c268:	d001      	beq.n	c26e <_vfiprintf_r+0xc6>
    c26a:	441c      	add	r4, r3
    c26c:	e7e8      	b.n	c240 <_vfiprintf_r+0x98>
    c26e:	ebb4 0608 	subs.w	r6, r4, r8
    c272:	4605      	mov	r5, r0
    c274:	f040 813c 	bne.w	c4f0 <_vfiprintf_r+0x348>
    c278:	2300      	movs	r3, #0
    c27a:	7861      	ldrb	r1, [r4, #1]
    c27c:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    c280:	f104 0801 	add.w	r8, r4, #1
    c284:	9306      	str	r3, [sp, #24]
    c286:	f04f 37ff 	mov.w	r7, #4294967295
    c28a:	461e      	mov	r6, r3
    c28c:	242b      	movs	r4, #43	; 0x2b
    c28e:	f108 0801 	add.w	r8, r8, #1
    c292:	f1a1 0320 	sub.w	r3, r1, #32
    c296:	2b5a      	cmp	r3, #90	; 0x5a
    c298:	f200 8178 	bhi.w	c58c <_vfiprintf_r+0x3e4>
    c29c:	e8df f013 	tbh	[pc, r3, lsl #1]
    c2a0:	017602b5 	.word	0x017602b5
    c2a4:	02b00176 	.word	0x02b00176
    c2a8:	01760176 	.word	0x01760176
    c2ac:	006a0176 	.word	0x006a0176
    c2b0:	01760176 	.word	0x01760176
    c2b4:	028d027d 	.word	0x028d027d
    c2b8:	02880176 	.word	0x02880176
    c2bc:	01760297 	.word	0x01760297
    c2c0:	005b0292 	.word	0x005b0292
    c2c4:	005b005b 	.word	0x005b005b
    c2c8:	005b005b 	.word	0x005b005b
    c2cc:	005b005b 	.word	0x005b005b
    c2d0:	005b005b 	.word	0x005b005b
    c2d4:	01760176 	.word	0x01760176
    c2d8:	01760176 	.word	0x01760176
    c2dc:	01760176 	.word	0x01760176
    c2e0:	01760176 	.word	0x01760176
    c2e4:	025c0176 	.word	0x025c0176
    c2e8:	01760084 	.word	0x01760084
    c2ec:	01760176 	.word	0x01760176
    c2f0:	01760176 	.word	0x01760176
    c2f4:	01760176 	.word	0x01760176
    c2f8:	01760176 	.word	0x01760176
    c2fc:	00e80176 	.word	0x00e80176
    c300:	01760176 	.word	0x01760176
    c304:	02330176 	.word	0x02330176
    c308:	02da0176 	.word	0x02da0176
    c30c:	01760176 	.word	0x01760176
    c310:	0176058b 	.word	0x0176058b
    c314:	01760176 	.word	0x01760176
    c318:	01760176 	.word	0x01760176
    c31c:	01760176 	.word	0x01760176
    c320:	01760176 	.word	0x01760176
    c324:	025c0176 	.word	0x025c0176
    c328:	01760086 	.word	0x01760086
    c32c:	01760176 	.word	0x01760176
    c330:	008602cd 	.word	0x008602cd
    c334:	0176007f 	.word	0x0176007f
    c338:	017602c0 	.word	0x017602c0
    c33c:	00ea02fd 	.word	0x00ea02fd
    c340:	007f02ed 	.word	0x007f02ed
    c344:	02330176 	.word	0x02330176
    c348:	0569007c 	.word	0x0569007c
    c34c:	01760176 	.word	0x01760176
    c350:	0176056b 	.word	0x0176056b
    c354:	007c      	.short	0x007c
    c356:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    c35a:	2200      	movs	r2, #0
    c35c:	f818 1b01 	ldrb.w	r1, [r8], #1
    c360:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    c364:	eb03 0242 	add.w	r2, r3, r2, lsl #1
    c368:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    c36c:	2b09      	cmp	r3, #9
    c36e:	d9f5      	bls.n	c35c <_vfiprintf_r+0x1b4>
    c370:	9206      	str	r2, [sp, #24]
    c372:	e78e      	b.n	c292 <_vfiprintf_r+0xea>
    c374:	4658      	mov	r0, fp
    c376:	f7fe fa2d 	bl	a7d4 <_localeconv_r>
    c37a:	6843      	ldr	r3, [r0, #4]
    c37c:	930d      	str	r3, [sp, #52]	; 0x34
    c37e:	4618      	mov	r0, r3
    c380:	f7f9 fb5e 	bl	5a40 <strlen>
    c384:	900e      	str	r0, [sp, #56]	; 0x38
    c386:	4605      	mov	r5, r0
    c388:	4658      	mov	r0, fp
    c38a:	f7fe fa23 	bl	a7d4 <_localeconv_r>
    c38e:	6883      	ldr	r3, [r0, #8]
    c390:	930b      	str	r3, [sp, #44]	; 0x2c
    c392:	2d00      	cmp	r5, #0
    c394:	f040 84d6 	bne.w	cd44 <_vfiprintf_r+0xb9c>
    c398:	f898 1000 	ldrb.w	r1, [r8]
    c39c:	e777      	b.n	c28e <_vfiprintf_r+0xe6>
    c39e:	f898 1000 	ldrb.w	r1, [r8]
    c3a2:	f046 0620 	orr.w	r6, r6, #32
    c3a6:	e772      	b.n	c28e <_vfiprintf_r+0xe6>
    c3a8:	f046 0610 	orr.w	r6, r6, #16
    c3ac:	06b4      	lsls	r4, r6, #26
    c3ae:	f140 818e 	bpl.w	c6ce <_vfiprintf_r+0x526>
    c3b2:	9b07      	ldr	r3, [sp, #28]
    c3b4:	3307      	adds	r3, #7
    c3b6:	f023 0307 	bic.w	r3, r3, #7
    c3ba:	461a      	mov	r2, r3
    c3bc:	6859      	ldr	r1, [r3, #4]
    c3be:	f852 3b08 	ldr.w	r3, [r2], #8
    c3c2:	9207      	str	r2, [sp, #28]
    c3c4:	460a      	mov	r2, r1
    c3c6:	2900      	cmp	r1, #0
    c3c8:	f2c0 8470 	blt.w	ccac <_vfiprintf_r+0xb04>
    c3cc:	1c79      	adds	r1, r7, #1
    c3ce:	f000 85a2 	beq.w	cf16 <_vfiprintf_r+0xd6e>
    c3d2:	f026 0180 	bic.w	r1, r6, #128	; 0x80
    c3d6:	9103      	str	r1, [sp, #12]
    c3d8:	ea53 0102 	orrs.w	r1, r3, r2
    c3dc:	f000 843f 	beq.w	cc5e <_vfiprintf_r+0xab6>
    c3e0:	2b0a      	cmp	r3, #10
    c3e2:	f172 0100 	sbcs.w	r1, r2, #0
    c3e6:	f080 8541 	bcs.w	ce6c <_vfiprintf_r+0xcc4>
    c3ea:	3330      	adds	r3, #48	; 0x30
    c3ec:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
    c3f0:	9e03      	ldr	r6, [sp, #12]
    c3f2:	2301      	movs	r3, #1
    c3f4:	9304      	str	r3, [sp, #16]
    c3f6:	f20d 140f 	addw	r4, sp, #271	; 0x10f
    c3fa:	9b04      	ldr	r3, [sp, #16]
    c3fc:	42bb      	cmp	r3, r7
    c3fe:	bfb8      	it	lt
    c400:	463b      	movlt	r3, r7
    c402:	9303      	str	r3, [sp, #12]
    c404:	2300      	movs	r3, #0
    c406:	9308      	str	r3, [sp, #32]
    c408:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    c40c:	2b00      	cmp	r3, #0
    c40e:	f000 80cb 	beq.w	c5a8 <_vfiprintf_r+0x400>
    c412:	9b03      	ldr	r3, [sp, #12]
    c414:	3301      	adds	r3, #1
    c416:	9303      	str	r3, [sp, #12]
    c418:	e0c6      	b.n	c5a8 <_vfiprintf_r+0x400>
    c41a:	ee18 1a10 	vmov	r1, s16
    c41e:	4658      	mov	r0, fp
    c420:	ee18 5a10 	vmov	r5, s16
    c424:	f001 f87c 	bl	d520 <__swsetup_r>
    c428:	2800      	cmp	r0, #0
    c42a:	f040 8652 	bne.w	d0d2 <_vfiprintf_r+0xf2a>
    c42e:	89aa      	ldrh	r2, [r5, #12]
    c430:	f002 031a 	and.w	r3, r2, #26
    c434:	2b0a      	cmp	r3, #10
    c436:	f47f aef6 	bne.w	c226 <_vfiprintf_r+0x7e>
    c43a:	ee18 1a10 	vmov	r1, s16
    c43e:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
    c442:	2b00      	cmp	r3, #0
    c444:	f6ff aeef 	blt.w	c226 <_vfiprintf_r+0x7e>
    c448:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    c44a:	07db      	lsls	r3, r3, #31
    c44c:	d402      	bmi.n	c454 <_vfiprintf_r+0x2ac>
    c44e:	0597      	lsls	r7, r2, #22
    c450:	f140 8612 	bpl.w	d078 <_vfiprintf_r+0xed0>
    c454:	ee18 1a10 	vmov	r1, s16
    c458:	4623      	mov	r3, r4
    c45a:	4632      	mov	r2, r6
    c45c:	4658      	mov	r0, fp
    c45e:	f000 fe69 	bl	d134 <__sbprintf>
    c462:	9005      	str	r0, [sp, #20]
    c464:	9805      	ldr	r0, [sp, #20]
    c466:	b045      	add	sp, #276	; 0x114
    c468:	ecbd 8b02 	vpop	{d8}
    c46c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c470:	f046 0610 	orr.w	r6, r6, #16
    c474:	f016 0220 	ands.w	r2, r6, #32
    c478:	f000 8136 	beq.w	c6e8 <_vfiprintf_r+0x540>
    c47c:	9b07      	ldr	r3, [sp, #28]
    c47e:	3307      	adds	r3, #7
    c480:	f023 0307 	bic.w	r3, r3, #7
    c484:	4619      	mov	r1, r3
    c486:	685a      	ldr	r2, [r3, #4]
    c488:	f851 3b08 	ldr.w	r3, [r1], #8
    c48c:	9107      	str	r1, [sp, #28]
    c48e:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
    c492:	9103      	str	r1, [sp, #12]
    c494:	2100      	movs	r1, #0
    c496:	2000      	movs	r0, #0
    c498:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
    c49c:	1c78      	adds	r0, r7, #1
    c49e:	f000 8210 	beq.w	c8c2 <_vfiprintf_r+0x71a>
    c4a2:	9803      	ldr	r0, [sp, #12]
    c4a4:	f020 0680 	bic.w	r6, r0, #128	; 0x80
    c4a8:	ea53 0002 	orrs.w	r0, r3, r2
    c4ac:	f040 8208 	bne.w	c8c0 <_vfiprintf_r+0x718>
    c4b0:	2f00      	cmp	r7, #0
    c4b2:	f040 8538 	bne.w	cf26 <_vfiprintf_r+0xd7e>
    c4b6:	2900      	cmp	r1, #0
    c4b8:	f040 83d5 	bne.w	cc66 <_vfiprintf_r+0xabe>
    c4bc:	9b03      	ldr	r3, [sp, #12]
    c4be:	f013 0301 	ands.w	r3, r3, #1
    c4c2:	9304      	str	r3, [sp, #16]
    c4c4:	f000 8411 	beq.w	ccea <_vfiprintf_r+0xb42>
    c4c8:	2330      	movs	r3, #48	; 0x30
    c4ca:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
    c4ce:	f20d 140f 	addw	r4, sp, #271	; 0x10f
    c4d2:	e792      	b.n	c3fa <_vfiprintf_r+0x252>
    c4d4:	2208      	movs	r2, #8
    c4d6:	2100      	movs	r1, #0
    c4d8:	4650      	mov	r0, sl
    c4da:	f7f8 ffd1 	bl	5480 <memset>
    c4de:	2301      	movs	r3, #1
    c4e0:	441c      	add	r4, r3
    c4e2:	e6ad      	b.n	c240 <_vfiprintf_r+0x98>
    c4e4:	20007c5c 	.word	0x20007c5c
    c4e8:	ebb4 0608 	subs.w	r6, r4, r8
    c4ec:	4605      	mov	r5, r0
    c4ee:	d01b      	beq.n	c528 <_vfiprintf_r+0x380>
    c4f0:	9b19      	ldr	r3, [sp, #100]	; 0x64
    c4f2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    c4f4:	3301      	adds	r3, #1
    c4f6:	4432      	add	r2, r6
    c4f8:	2b07      	cmp	r3, #7
    c4fa:	e9c9 8600 	strd	r8, r6, [r9]
    c4fe:	921a      	str	r2, [sp, #104]	; 0x68
    c500:	9319      	str	r3, [sp, #100]	; 0x64
    c502:	dd1c      	ble.n	c53e <_vfiprintf_r+0x396>
    c504:	2a00      	cmp	r2, #0
    c506:	f000 83a6 	beq.w	cc56 <_vfiprintf_r+0xaae>
    c50a:	ee18 1a10 	vmov	r1, s16
    c50e:	aa18      	add	r2, sp, #96	; 0x60
    c510:	4658      	mov	r0, fp
    c512:	f7ff fe0d 	bl	c130 <__sprint_r.part.0>
    c516:	bb20      	cbnz	r0, c562 <_vfiprintf_r+0x3ba>
    c518:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    c51c:	9b05      	ldr	r3, [sp, #20]
    c51e:	4433      	add	r3, r6
    c520:	9305      	str	r3, [sp, #20]
    c522:	2d00      	cmp	r5, #0
    c524:	f47f aea8 	bne.w	c278 <_vfiprintf_r+0xd0>
    c528:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    c52a:	2b00      	cmp	r3, #0
    c52c:	f040 85c1 	bne.w	d0b2 <_vfiprintf_r+0xf0a>
    c530:	ee18 3a10 	vmov	r3, s16
    c534:	2200      	movs	r2, #0
    c536:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    c53a:	9219      	str	r2, [sp, #100]	; 0x64
    c53c:	e015      	b.n	c56a <_vfiprintf_r+0x3c2>
    c53e:	f109 0908 	add.w	r9, r9, #8
    c542:	e7eb      	b.n	c51c <_vfiprintf_r+0x374>
    c544:	ee18 1a10 	vmov	r1, s16
    c548:	aa18      	add	r2, sp, #96	; 0x60
    c54a:	4658      	mov	r0, fp
    c54c:	f7ff fdf0 	bl	c130 <__sprint_r.part.0>
    c550:	2800      	cmp	r0, #0
    c552:	f000 80a6 	beq.w	c6a2 <_vfiprintf_r+0x4fa>
    c556:	9b08      	ldr	r3, [sp, #32]
    c558:	b11b      	cbz	r3, c562 <_vfiprintf_r+0x3ba>
    c55a:	9908      	ldr	r1, [sp, #32]
    c55c:	4658      	mov	r0, fp
    c55e:	f7f9 fb3d 	bl	5bdc <_free_r>
    c562:	ee18 3a10 	vmov	r3, s16
    c566:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    c56a:	ee18 2a10 	vmov	r2, s16
    c56e:	6e52      	ldr	r2, [r2, #100]	; 0x64
    c570:	f012 0f01 	tst.w	r2, #1
    c574:	b29a      	uxth	r2, r3
    c576:	f000 80a0 	beq.w	c6ba <_vfiprintf_r+0x512>
    c57a:	0650      	lsls	r0, r2, #25
    c57c:	f100 85b2 	bmi.w	d0e4 <_vfiprintf_r+0xf3c>
    c580:	9805      	ldr	r0, [sp, #20]
    c582:	b045      	add	sp, #276	; 0x114
    c584:	ecbd 8b02 	vpop	{d8}
    c588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c58c:	2900      	cmp	r1, #0
    c58e:	d0cb      	beq.n	c528 <_vfiprintf_r+0x380>
    c590:	2300      	movs	r3, #0
    c592:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    c596:	2301      	movs	r3, #1
    c598:	e9cd 3303 	strd	r3, r3, [sp, #12]
    c59c:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
    c5a0:	ac2b      	add	r4, sp, #172	; 0xac
    c5a2:	2300      	movs	r3, #0
    c5a4:	9308      	str	r3, [sp, #32]
    c5a6:	461f      	mov	r7, r3
    c5a8:	f016 0302 	ands.w	r3, r6, #2
    c5ac:	9309      	str	r3, [sp, #36]	; 0x24
    c5ae:	d002      	beq.n	c5b6 <_vfiprintf_r+0x40e>
    c5b0:	9b03      	ldr	r3, [sp, #12]
    c5b2:	3302      	adds	r3, #2
    c5b4:	9303      	str	r3, [sp, #12]
    c5b6:	f016 0384 	ands.w	r3, r6, #132	; 0x84
    c5ba:	930a      	str	r3, [sp, #40]	; 0x28
    c5bc:	d105      	bne.n	c5ca <_vfiprintf_r+0x422>
    c5be:	9b06      	ldr	r3, [sp, #24]
    c5c0:	9a03      	ldr	r2, [sp, #12]
    c5c2:	1a9d      	subs	r5, r3, r2
    c5c4:	2d00      	cmp	r5, #0
    c5c6:	f300 827b 	bgt.w	cac0 <_vfiprintf_r+0x918>
    c5ca:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    c5ce:	1c41      	adds	r1, r0, #1
    c5d0:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
    c5d4:	b182      	cbz	r2, c5f8 <_vfiprintf_r+0x450>
    c5d6:	2201      	movs	r2, #1
    c5d8:	3301      	adds	r3, #1
    c5da:	f8c9 2004 	str.w	r2, [r9, #4]
    c5de:	2907      	cmp	r1, #7
    c5e0:	f10d 0243 	add.w	r2, sp, #67	; 0x43
    c5e4:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    c5e8:	f8c9 2000 	str.w	r2, [r9]
    c5ec:	f300 824a 	bgt.w	ca84 <_vfiprintf_r+0x8dc>
    c5f0:	4608      	mov	r0, r1
    c5f2:	f109 0908 	add.w	r9, r9, #8
    c5f6:	3101      	adds	r1, #1
    c5f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c5fa:	b1e2      	cbz	r2, c636 <_vfiprintf_r+0x48e>
    c5fc:	aa11      	add	r2, sp, #68	; 0x44
    c5fe:	3302      	adds	r3, #2
    c600:	f8c9 2000 	str.w	r2, [r9]
    c604:	2907      	cmp	r1, #7
    c606:	f04f 0202 	mov.w	r2, #2
    c60a:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    c60e:	f8c9 2004 	str.w	r2, [r9, #4]
    c612:	f340 8250 	ble.w	cab6 <_vfiprintf_r+0x90e>
    c616:	2b00      	cmp	r3, #0
    c618:	f000 8343 	beq.w	cca2 <_vfiprintf_r+0xafa>
    c61c:	ee18 1a10 	vmov	r1, s16
    c620:	aa18      	add	r2, sp, #96	; 0x60
    c622:	4658      	mov	r0, fp
    c624:	f7ff fd84 	bl	c130 <__sprint_r.part.0>
    c628:	2800      	cmp	r0, #0
    c62a:	d194      	bne.n	c556 <_vfiprintf_r+0x3ae>
    c62c:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    c630:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    c634:	1c41      	adds	r1, r0, #1
    c636:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c638:	2a80      	cmp	r2, #128	; 0x80
    c63a:	f000 8184 	beq.w	c946 <_vfiprintf_r+0x79e>
    c63e:	9a04      	ldr	r2, [sp, #16]
    c640:	1abd      	subs	r5, r7, r2
    c642:	2d00      	cmp	r5, #0
    c644:	f300 81d7 	bgt.w	c9f6 <_vfiprintf_r+0x84e>
    c648:	9a04      	ldr	r2, [sp, #16]
    c64a:	f8c9 4000 	str.w	r4, [r9]
    c64e:	4413      	add	r3, r2
    c650:	2907      	cmp	r1, #7
    c652:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    c656:	f8c9 2004 	str.w	r2, [r9, #4]
    c65a:	f340 816e 	ble.w	c93a <_vfiprintf_r+0x792>
    c65e:	2b00      	cmp	r3, #0
    c660:	f000 8275 	beq.w	cb4e <_vfiprintf_r+0x9a6>
    c664:	ee18 1a10 	vmov	r1, s16
    c668:	aa18      	add	r2, sp, #96	; 0x60
    c66a:	4658      	mov	r0, fp
    c66c:	f7ff fd60 	bl	c130 <__sprint_r.part.0>
    c670:	2800      	cmp	r0, #0
    c672:	f47f af70 	bne.w	c556 <_vfiprintf_r+0x3ae>
    c676:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    c678:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    c67c:	0775      	lsls	r5, r6, #29
    c67e:	d505      	bpl.n	c68c <_vfiprintf_r+0x4e4>
    c680:	9a06      	ldr	r2, [sp, #24]
    c682:	9903      	ldr	r1, [sp, #12]
    c684:	1a54      	subs	r4, r2, r1
    c686:	2c00      	cmp	r4, #0
    c688:	f300 826b 	bgt.w	cb62 <_vfiprintf_r+0x9ba>
    c68c:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
    c690:	9803      	ldr	r0, [sp, #12]
    c692:	4281      	cmp	r1, r0
    c694:	bfac      	ite	ge
    c696:	1852      	addge	r2, r2, r1
    c698:	1812      	addlt	r2, r2, r0
    c69a:	9205      	str	r2, [sp, #20]
    c69c:	2b00      	cmp	r3, #0
    c69e:	f47f af51 	bne.w	c544 <_vfiprintf_r+0x39c>
    c6a2:	9908      	ldr	r1, [sp, #32]
    c6a4:	2300      	movs	r3, #0
    c6a6:	9319      	str	r3, [sp, #100]	; 0x64
    c6a8:	2900      	cmp	r1, #0
    c6aa:	f000 8149 	beq.w	c940 <_vfiprintf_r+0x798>
    c6ae:	4658      	mov	r0, fp
    c6b0:	f7f9 fa94 	bl	5bdc <_free_r>
    c6b4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    c6b8:	e5c1      	b.n	c23e <_vfiprintf_r+0x96>
    c6ba:	059c      	lsls	r4, r3, #22
    c6bc:	f53f af5d 	bmi.w	c57a <_vfiprintf_r+0x3d2>
    c6c0:	ee18 4a10 	vmov	r4, s16
    c6c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    c6c6:	f7f9 f841 	bl	574c <__retarget_lock_release_recursive>
    c6ca:	89a2      	ldrh	r2, [r4, #12]
    c6cc:	e755      	b.n	c57a <_vfiprintf_r+0x3d2>
    c6ce:	06f0      	lsls	r0, r6, #27
    c6d0:	9a07      	ldr	r2, [sp, #28]
    c6d2:	f100 831f 	bmi.w	cd14 <_vfiprintf_r+0xb6c>
    c6d6:	0671      	lsls	r1, r6, #25
    c6d8:	f140 8319 	bpl.w	cd0e <_vfiprintf_r+0xb66>
    c6dc:	f932 3b04 	ldrsh.w	r3, [r2], #4
    c6e0:	9207      	str	r2, [sp, #28]
    c6e2:	17da      	asrs	r2, r3, #31
    c6e4:	4611      	mov	r1, r2
    c6e6:	e66e      	b.n	c3c6 <_vfiprintf_r+0x21e>
    c6e8:	f016 0310 	ands.w	r3, r6, #16
    c6ec:	9907      	ldr	r1, [sp, #28]
    c6ee:	f040 8309 	bne.w	cd04 <_vfiprintf_r+0xb5c>
    c6f2:	f016 0040 	ands.w	r0, r6, #64	; 0x40
    c6f6:	f000 8301 	beq.w	ccfc <_vfiprintf_r+0xb54>
    c6fa:	461a      	mov	r2, r3
    c6fc:	f851 3b04 	ldr.w	r3, [r1], #4
    c700:	9107      	str	r1, [sp, #28]
    c702:	b29b      	uxth	r3, r3
    c704:	e6c3      	b.n	c48e <_vfiprintf_r+0x2e6>
    c706:	9b07      	ldr	r3, [sp, #28]
    c708:	461a      	mov	r2, r3
    c70a:	2300      	movs	r3, #0
    c70c:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    c710:	4613      	mov	r3, r2
    c712:	f853 4b04 	ldr.w	r4, [r3], #4
    c716:	9303      	str	r3, [sp, #12]
    c718:	2c00      	cmp	r4, #0
    c71a:	f000 8412 	beq.w	cf42 <_vfiprintf_r+0xd9a>
    c71e:	2953      	cmp	r1, #83	; 0x53
    c720:	f000 8365 	beq.w	cdee <_vfiprintf_r+0xc46>
    c724:	f016 0510 	ands.w	r5, r6, #16
    c728:	f040 8361 	bne.w	cdee <_vfiprintf_r+0xc46>
    c72c:	1c7b      	adds	r3, r7, #1
    c72e:	f000 84b3 	beq.w	d098 <_vfiprintf_r+0xef0>
    c732:	463a      	mov	r2, r7
    c734:	4629      	mov	r1, r5
    c736:	4620      	mov	r0, r4
    c738:	f7fe f852 	bl	a7e0 <memchr>
    c73c:	9008      	str	r0, [sp, #32]
    c73e:	2800      	cmp	r0, #0
    c740:	f000 849f 	beq.w	d082 <_vfiprintf_r+0xeda>
    c744:	1b03      	subs	r3, r0, r4
    c746:	9a03      	ldr	r2, [sp, #12]
    c748:	9304      	str	r3, [sp, #16]
    c74a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    c74e:	462f      	mov	r7, r5
    c750:	9207      	str	r2, [sp, #28]
    c752:	9303      	str	r3, [sp, #12]
    c754:	9508      	str	r5, [sp, #32]
    c756:	e657      	b.n	c408 <_vfiprintf_r+0x260>
    c758:	2943      	cmp	r1, #67	; 0x43
    c75a:	d002      	beq.n	c762 <_vfiprintf_r+0x5ba>
    c75c:	06f5      	lsls	r5, r6, #27
    c75e:	f140 832d 	bpl.w	cdbc <_vfiprintf_r+0xc14>
    c762:	9d07      	ldr	r5, [sp, #28]
    c764:	2208      	movs	r2, #8
    c766:	2100      	movs	r1, #0
    c768:	a816      	add	r0, sp, #88	; 0x58
    c76a:	ac2b      	add	r4, sp, #172	; 0xac
    c76c:	f7f8 fe88 	bl	5480 <memset>
    c770:	ab16      	add	r3, sp, #88	; 0x58
    c772:	f855 2b04 	ldr.w	r2, [r5], #4
    c776:	4621      	mov	r1, r4
    c778:	4658      	mov	r0, fp
    c77a:	f7ff fa77 	bl	bc6c <_wcrtomb_r>
    c77e:	4603      	mov	r3, r0
    c780:	3301      	adds	r3, #1
    c782:	9004      	str	r0, [sp, #16]
    c784:	f000 84b3 	beq.w	d0ee <_vfiprintf_r+0xf46>
    c788:	9b04      	ldr	r3, [sp, #16]
    c78a:	9507      	str	r5, [sp, #28]
    c78c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    c790:	9303      	str	r3, [sp, #12]
    c792:	2300      	movs	r3, #0
    c794:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    c798:	e703      	b.n	c5a2 <_vfiprintf_r+0x3fa>
    c79a:	9b07      	ldr	r3, [sp, #28]
    c79c:	f853 2b04 	ldr.w	r2, [r3], #4
    c7a0:	9206      	str	r2, [sp, #24]
    c7a2:	2a00      	cmp	r2, #0
    c7a4:	f280 829c 	bge.w	cce0 <_vfiprintf_r+0xb38>
    c7a8:	9a06      	ldr	r2, [sp, #24]
    c7aa:	4252      	negs	r2, r2
    c7ac:	e9cd 2306 	strd	r2, r3, [sp, #24]
    c7b0:	f898 1000 	ldrb.w	r1, [r8]
    c7b4:	f046 0604 	orr.w	r6, r6, #4
    c7b8:	e569      	b.n	c28e <_vfiprintf_r+0xe6>
    c7ba:	f898 1000 	ldrb.w	r1, [r8]
    c7be:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
    c7c2:	e564      	b.n	c28e <_vfiprintf_r+0xe6>
    c7c4:	f898 1000 	ldrb.w	r1, [r8]
    c7c8:	f046 0680 	orr.w	r6, r6, #128	; 0x80
    c7cc:	e55f      	b.n	c28e <_vfiprintf_r+0xe6>
    c7ce:	4642      	mov	r2, r8
    c7d0:	f812 1b01 	ldrb.w	r1, [r2], #1
    c7d4:	292a      	cmp	r1, #42	; 0x2a
    c7d6:	f000 8496 	beq.w	d106 <_vfiprintf_r+0xf5e>
    c7da:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    c7de:	2b09      	cmp	r3, #9
    c7e0:	4690      	mov	r8, r2
    c7e2:	f04f 0700 	mov.w	r7, #0
    c7e6:	f63f ad54 	bhi.w	c292 <_vfiprintf_r+0xea>
    c7ea:	f818 1b01 	ldrb.w	r1, [r8], #1
    c7ee:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    c7f2:	eb03 0747 	add.w	r7, r3, r7, lsl #1
    c7f6:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    c7fa:	2b09      	cmp	r3, #9
    c7fc:	d9f5      	bls.n	c7ea <_vfiprintf_r+0x642>
    c7fe:	e548      	b.n	c292 <_vfiprintf_r+0xea>
    c800:	f898 1000 	ldrb.w	r1, [r8]
    c804:	f046 0601 	orr.w	r6, r6, #1
    c808:	e541      	b.n	c28e <_vfiprintf_r+0xe6>
    c80a:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    c80e:	2b00      	cmp	r3, #0
    c810:	f47f adc2 	bne.w	c398 <_vfiprintf_r+0x1f0>
    c814:	2320      	movs	r3, #32
    c816:	f898 1000 	ldrb.w	r1, [r8]
    c81a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    c81e:	e536      	b.n	c28e <_vfiprintf_r+0xe6>
    c820:	f898 1000 	ldrb.w	r1, [r8]
    c824:	296c      	cmp	r1, #108	; 0x6c
    c826:	bf03      	ittte	eq
    c828:	f898 1001 	ldrbeq.w	r1, [r8, #1]
    c82c:	f046 0620 	orreq.w	r6, r6, #32
    c830:	f108 0801 	addeq.w	r8, r8, #1
    c834:	f046 0610 	orrne.w	r6, r6, #16
    c838:	e529      	b.n	c28e <_vfiprintf_r+0xe6>
    c83a:	f898 1000 	ldrb.w	r1, [r8]
    c83e:	2968      	cmp	r1, #104	; 0x68
    c840:	bf03      	ittte	eq
    c842:	f898 1001 	ldrbeq.w	r1, [r8, #1]
    c846:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
    c84a:	f108 0801 	addeq.w	r8, r8, #1
    c84e:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
    c852:	e51c      	b.n	c28e <_vfiprintf_r+0xe6>
    c854:	f046 0310 	orr.w	r3, r6, #16
    c858:	9303      	str	r3, [sp, #12]
    c85a:	9b03      	ldr	r3, [sp, #12]
    c85c:	f013 0220 	ands.w	r2, r3, #32
    c860:	f000 8206 	beq.w	cc70 <_vfiprintf_r+0xac8>
    c864:	9b07      	ldr	r3, [sp, #28]
    c866:	3307      	adds	r3, #7
    c868:	f023 0307 	bic.w	r3, r3, #7
    c86c:	4619      	mov	r1, r3
    c86e:	685a      	ldr	r2, [r3, #4]
    c870:	f851 3b08 	ldr.w	r3, [r1], #8
    c874:	9107      	str	r1, [sp, #28]
    c876:	2101      	movs	r1, #1
    c878:	e60d      	b.n	c496 <_vfiprintf_r+0x2ee>
    c87a:	9a07      	ldr	r2, [sp, #28]
    c87c:	f046 0302 	orr.w	r3, r6, #2
    c880:	9303      	str	r3, [sp, #12]
    c882:	f852 3b04 	ldr.w	r3, [r2], #4
    c886:	9207      	str	r2, [sp, #28]
    c888:	f647 0230 	movw	r2, #30768	; 0x7830
    c88c:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
    c890:	4ab8      	ldr	r2, [pc, #736]	; (cb74 <_vfiprintf_r+0x9cc>)
    c892:	920c      	str	r2, [sp, #48]	; 0x30
    c894:	2102      	movs	r1, #2
    c896:	2200      	movs	r2, #0
    c898:	e5fd      	b.n	c496 <_vfiprintf_r+0x2ee>
    c89a:	06b7      	lsls	r7, r6, #26
    c89c:	f100 8248 	bmi.w	cd30 <_vfiprintf_r+0xb88>
    c8a0:	06f5      	lsls	r5, r6, #27
    c8a2:	f100 8346 	bmi.w	cf32 <_vfiprintf_r+0xd8a>
    c8a6:	0674      	lsls	r4, r6, #25
    c8a8:	f100 83d5 	bmi.w	d056 <_vfiprintf_r+0xeae>
    c8ac:	05b0      	lsls	r0, r6, #22
    c8ae:	f140 8340 	bpl.w	cf32 <_vfiprintf_r+0xd8a>
    c8b2:	9b07      	ldr	r3, [sp, #28]
    c8b4:	9905      	ldr	r1, [sp, #20]
    c8b6:	f853 2b04 	ldr.w	r2, [r3], #4
    c8ba:	9307      	str	r3, [sp, #28]
    c8bc:	7011      	strb	r1, [r2, #0]
    c8be:	e4be      	b.n	c23e <_vfiprintf_r+0x96>
    c8c0:	9603      	str	r6, [sp, #12]
    c8c2:	2901      	cmp	r1, #1
    c8c4:	f43f ad8c 	beq.w	c3e0 <_vfiprintf_r+0x238>
    c8c8:	2902      	cmp	r1, #2
    c8ca:	ac44      	add	r4, sp, #272	; 0x110
    c8cc:	d111      	bne.n	c8f2 <_vfiprintf_r+0x74a>
    c8ce:	980c      	ldr	r0, [sp, #48]	; 0x30
    c8d0:	f003 010f 	and.w	r1, r3, #15
    c8d4:	091b      	lsrs	r3, r3, #4
    c8d6:	5c41      	ldrb	r1, [r0, r1]
    c8d8:	f804 1d01 	strb.w	r1, [r4, #-1]!
    c8dc:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    c8e0:	0912      	lsrs	r2, r2, #4
    c8e2:	ea53 0102 	orrs.w	r1, r3, r2
    c8e6:	d1f3      	bne.n	c8d0 <_vfiprintf_r+0x728>
    c8e8:	9e03      	ldr	r6, [sp, #12]
    c8ea:	ab44      	add	r3, sp, #272	; 0x110
    c8ec:	1b1b      	subs	r3, r3, r4
    c8ee:	9304      	str	r3, [sp, #16]
    c8f0:	e583      	b.n	c3fa <_vfiprintf_r+0x252>
    c8f2:	f003 0107 	and.w	r1, r3, #7
    c8f6:	08db      	lsrs	r3, r3, #3
    c8f8:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
    c8fc:	08d2      	lsrs	r2, r2, #3
    c8fe:	3130      	adds	r1, #48	; 0x30
    c900:	ea53 0502 	orrs.w	r5, r3, r2
    c904:	4620      	mov	r0, r4
    c906:	f804 1d01 	strb.w	r1, [r4, #-1]!
    c90a:	d1f2      	bne.n	c8f2 <_vfiprintf_r+0x74a>
    c90c:	9e03      	ldr	r6, [sp, #12]
    c90e:	07f3      	lsls	r3, r6, #31
    c910:	d5eb      	bpl.n	c8ea <_vfiprintf_r+0x742>
    c912:	2930      	cmp	r1, #48	; 0x30
    c914:	d0e8      	beq.n	c8e8 <_vfiprintf_r+0x740>
    c916:	2330      	movs	r3, #48	; 0x30
    c918:	3802      	subs	r0, #2
    c91a:	f804 3c01 	strb.w	r3, [r4, #-1]
    c91e:	ab44      	add	r3, sp, #272	; 0x110
    c920:	1a1b      	subs	r3, r3, r0
    c922:	9e03      	ldr	r6, [sp, #12]
    c924:	9304      	str	r3, [sp, #16]
    c926:	4604      	mov	r4, r0
    c928:	e567      	b.n	c3fa <_vfiprintf_r+0x252>
    c92a:	9b04      	ldr	r3, [sp, #16]
    c92c:	941b      	str	r4, [sp, #108]	; 0x6c
    c92e:	2201      	movs	r2, #1
    c930:	931c      	str	r3, [sp, #112]	; 0x70
    c932:	931a      	str	r3, [sp, #104]	; 0x68
    c934:	9219      	str	r2, [sp, #100]	; 0x64
    c936:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    c93a:	f109 0908 	add.w	r9, r9, #8
    c93e:	e69d      	b.n	c67c <_vfiprintf_r+0x4d4>
    c940:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    c944:	e47b      	b.n	c23e <_vfiprintf_r+0x96>
    c946:	9a06      	ldr	r2, [sp, #24]
    c948:	9d03      	ldr	r5, [sp, #12]
    c94a:	1b55      	subs	r5, r2, r5
    c94c:	2d00      	cmp	r5, #0
    c94e:	f77f ae76 	ble.w	c63e <_vfiprintf_r+0x496>
    c952:	2d10      	cmp	r5, #16
    c954:	f340 83bb 	ble.w	d0ce <_vfiprintf_r+0xf26>
    c958:	9409      	str	r4, [sp, #36]	; 0x24
    c95a:	ee18 4a10 	vmov	r4, s16
    c95e:	e007      	b.n	c970 <_vfiprintf_r+0x7c8>
    c960:	f100 0c02 	add.w	ip, r0, #2
    c964:	f109 0908 	add.w	r9, r9, #8
    c968:	4610      	mov	r0, r2
    c96a:	3d10      	subs	r5, #16
    c96c:	2d10      	cmp	r5, #16
    c96e:	dd1e      	ble.n	c9ae <_vfiprintf_r+0x806>
    c970:	4981      	ldr	r1, [pc, #516]	; (cb78 <_vfiprintf_r+0x9d0>)
    c972:	f8c9 1000 	str.w	r1, [r9]
    c976:	1c42      	adds	r2, r0, #1
    c978:	3310      	adds	r3, #16
    c97a:	2110      	movs	r1, #16
    c97c:	2a07      	cmp	r2, #7
    c97e:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    c982:	f8c9 1004 	str.w	r1, [r9, #4]
    c986:	ddeb      	ble.n	c960 <_vfiprintf_r+0x7b8>
    c988:	aa18      	add	r2, sp, #96	; 0x60
    c98a:	2b00      	cmp	r3, #0
    c98c:	d074      	beq.n	ca78 <_vfiprintf_r+0x8d0>
    c98e:	4621      	mov	r1, r4
    c990:	4658      	mov	r0, fp
    c992:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    c996:	f7ff fbcb 	bl	c130 <__sprint_r.part.0>
    c99a:	2800      	cmp	r0, #0
    c99c:	f47f addb 	bne.w	c556 <_vfiprintf_r+0x3ae>
    c9a0:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    c9a4:	3d10      	subs	r5, #16
    c9a6:	2d10      	cmp	r5, #16
    c9a8:	f100 0c01 	add.w	ip, r0, #1
    c9ac:	dce0      	bgt.n	c970 <_vfiprintf_r+0x7c8>
    c9ae:	9c09      	ldr	r4, [sp, #36]	; 0x24
    c9b0:	4a71      	ldr	r2, [pc, #452]	; (cb78 <_vfiprintf_r+0x9d0>)
    c9b2:	f8c9 5004 	str.w	r5, [r9, #4]
    c9b6:	442b      	add	r3, r5
    c9b8:	f1bc 0f07 	cmp.w	ip, #7
    c9bc:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
    c9c0:	f8c9 2000 	str.w	r2, [r9]
    c9c4:	f340 8194 	ble.w	ccf0 <_vfiprintf_r+0xb48>
    c9c8:	2b00      	cmp	r3, #0
    c9ca:	f000 831f 	beq.w	d00c <_vfiprintf_r+0xe64>
    c9ce:	ee18 1a10 	vmov	r1, s16
    c9d2:	aa18      	add	r2, sp, #96	; 0x60
    c9d4:	4658      	mov	r0, fp
    c9d6:	f7ff fbab 	bl	c130 <__sprint_r.part.0>
    c9da:	2800      	cmp	r0, #0
    c9dc:	f47f adbb 	bne.w	c556 <_vfiprintf_r+0x3ae>
    c9e0:	9a04      	ldr	r2, [sp, #16]
    c9e2:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    c9e6:	1abd      	subs	r5, r7, r2
    c9e8:	2d00      	cmp	r5, #0
    c9ea:	f100 0101 	add.w	r1, r0, #1
    c9ee:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    c9f2:	f77f ae29 	ble.w	c648 <_vfiprintf_r+0x4a0>
    c9f6:	2d10      	cmp	r5, #16
    c9f8:	dd29      	ble.n	ca4e <_vfiprintf_r+0x8a6>
    c9fa:	9409      	str	r4, [sp, #36]	; 0x24
    c9fc:	2710      	movs	r7, #16
    c9fe:	ee18 4a10 	vmov	r4, s16
    ca02:	e007      	b.n	ca14 <_vfiprintf_r+0x86c>
    ca04:	f100 0c02 	add.w	ip, r0, #2
    ca08:	f109 0908 	add.w	r9, r9, #8
    ca0c:	4610      	mov	r0, r2
    ca0e:	3d10      	subs	r5, #16
    ca10:	2d10      	cmp	r5, #16
    ca12:	dd1a      	ble.n	ca4a <_vfiprintf_r+0x8a2>
    ca14:	1c42      	adds	r2, r0, #1
    ca16:	4958      	ldr	r1, [pc, #352]	; (cb78 <_vfiprintf_r+0x9d0>)
    ca18:	3310      	adds	r3, #16
    ca1a:	2a07      	cmp	r2, #7
    ca1c:	e9c9 1700 	strd	r1, r7, [r9]
    ca20:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    ca24:	ddee      	ble.n	ca04 <_vfiprintf_r+0x85c>
    ca26:	aa18      	add	r2, sp, #96	; 0x60
    ca28:	b303      	cbz	r3, ca6c <_vfiprintf_r+0x8c4>
    ca2a:	4621      	mov	r1, r4
    ca2c:	4658      	mov	r0, fp
    ca2e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    ca32:	f7ff fb7d 	bl	c130 <__sprint_r.part.0>
    ca36:	2800      	cmp	r0, #0
    ca38:	f47f ad8d 	bne.w	c556 <_vfiprintf_r+0x3ae>
    ca3c:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    ca40:	3d10      	subs	r5, #16
    ca42:	2d10      	cmp	r5, #16
    ca44:	f100 0c01 	add.w	ip, r0, #1
    ca48:	dce4      	bgt.n	ca14 <_vfiprintf_r+0x86c>
    ca4a:	9c09      	ldr	r4, [sp, #36]	; 0x24
    ca4c:	4661      	mov	r1, ip
    ca4e:	4a4a      	ldr	r2, [pc, #296]	; (cb78 <_vfiprintf_r+0x9d0>)
    ca50:	f8c9 5004 	str.w	r5, [r9, #4]
    ca54:	442b      	add	r3, r5
    ca56:	2907      	cmp	r1, #7
    ca58:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    ca5c:	f8c9 2000 	str.w	r2, [r9]
    ca60:	f300 80e7 	bgt.w	cc32 <_vfiprintf_r+0xa8a>
    ca64:	f109 0908 	add.w	r9, r9, #8
    ca68:	3101      	adds	r1, #1
    ca6a:	e5ed      	b.n	c648 <_vfiprintf_r+0x4a0>
    ca6c:	f04f 0c01 	mov.w	ip, #1
    ca70:	4618      	mov	r0, r3
    ca72:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    ca76:	e7ca      	b.n	ca0e <_vfiprintf_r+0x866>
    ca78:	f04f 0c01 	mov.w	ip, #1
    ca7c:	4618      	mov	r0, r3
    ca7e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    ca82:	e772      	b.n	c96a <_vfiprintf_r+0x7c2>
    ca84:	2b00      	cmp	r3, #0
    ca86:	f000 8104 	beq.w	cc92 <_vfiprintf_r+0xaea>
    ca8a:	ee18 1a10 	vmov	r1, s16
    ca8e:	aa18      	add	r2, sp, #96	; 0x60
    ca90:	4658      	mov	r0, fp
    ca92:	f7ff fb4d 	bl	c130 <__sprint_r.part.0>
    ca96:	2800      	cmp	r0, #0
    ca98:	f47f ad5d 	bne.w	c556 <_vfiprintf_r+0x3ae>
    ca9c:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    caa0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    caa4:	1c41      	adds	r1, r0, #1
    caa6:	e5a7      	b.n	c5f8 <_vfiprintf_r+0x450>
    caa8:	2302      	movs	r3, #2
    caaa:	aa11      	add	r2, sp, #68	; 0x44
    caac:	931c      	str	r3, [sp, #112]	; 0x70
    caae:	921b      	str	r2, [sp, #108]	; 0x6c
    cab0:	2101      	movs	r1, #1
    cab2:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    cab6:	4608      	mov	r0, r1
    cab8:	f109 0908 	add.w	r9, r9, #8
    cabc:	1c41      	adds	r1, r0, #1
    cabe:	e5ba      	b.n	c636 <_vfiprintf_r+0x48e>
    cac0:	2d10      	cmp	r5, #16
    cac2:	f340 82e5 	ble.w	d090 <_vfiprintf_r+0xee8>
    cac6:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
    caca:	940f      	str	r4, [sp, #60]	; 0x3c
    cacc:	4608      	mov	r0, r1
    cace:	ee18 4a10 	vmov	r4, s16
    cad2:	e007      	b.n	cae4 <_vfiprintf_r+0x93c>
    cad4:	f100 0c02 	add.w	ip, r0, #2
    cad8:	f109 0908 	add.w	r9, r9, #8
    cadc:	4610      	mov	r0, r2
    cade:	3d10      	subs	r5, #16
    cae0:	2d10      	cmp	r5, #16
    cae2:	dd1d      	ble.n	cb20 <_vfiprintf_r+0x978>
    cae4:	4925      	ldr	r1, [pc, #148]	; (cb7c <_vfiprintf_r+0x9d4>)
    cae6:	f8c9 1000 	str.w	r1, [r9]
    caea:	1c42      	adds	r2, r0, #1
    caec:	3310      	adds	r3, #16
    caee:	2110      	movs	r1, #16
    caf0:	2a07      	cmp	r2, #7
    caf2:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    caf6:	f8c9 1004 	str.w	r1, [r9, #4]
    cafa:	ddeb      	ble.n	cad4 <_vfiprintf_r+0x92c>
    cafc:	aa18      	add	r2, sp, #96	; 0x60
    cafe:	b303      	cbz	r3, cb42 <_vfiprintf_r+0x99a>
    cb00:	4621      	mov	r1, r4
    cb02:	4658      	mov	r0, fp
    cb04:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    cb08:	f7ff fb12 	bl	c130 <__sprint_r.part.0>
    cb0c:	2800      	cmp	r0, #0
    cb0e:	f47f ad22 	bne.w	c556 <_vfiprintf_r+0x3ae>
    cb12:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    cb16:	3d10      	subs	r5, #16
    cb18:	2d10      	cmp	r5, #16
    cb1a:	f100 0c01 	add.w	ip, r0, #1
    cb1e:	dce1      	bgt.n	cae4 <_vfiprintf_r+0x93c>
    cb20:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    cb22:	4660      	mov	r0, ip
    cb24:	4a15      	ldr	r2, [pc, #84]	; (cb7c <_vfiprintf_r+0x9d4>)
    cb26:	f8c9 5004 	str.w	r5, [r9, #4]
    cb2a:	442b      	add	r3, r5
    cb2c:	2807      	cmp	r0, #7
    cb2e:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
    cb32:	f8c9 2000 	str.w	r2, [r9]
    cb36:	f300 80c1 	bgt.w	ccbc <_vfiprintf_r+0xb14>
    cb3a:	f109 0908 	add.w	r9, r9, #8
    cb3e:	1c41      	adds	r1, r0, #1
    cb40:	e546      	b.n	c5d0 <_vfiprintf_r+0x428>
    cb42:	4618      	mov	r0, r3
    cb44:	f04f 0c01 	mov.w	ip, #1
    cb48:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    cb4c:	e7c7      	b.n	cade <_vfiprintf_r+0x936>
    cb4e:	0776      	lsls	r6, r6, #29
    cb50:	9319      	str	r3, [sp, #100]	; 0x64
    cb52:	d553      	bpl.n	cbfc <_vfiprintf_r+0xa54>
    cb54:	9a06      	ldr	r2, [sp, #24]
    cb56:	9903      	ldr	r1, [sp, #12]
    cb58:	1a54      	subs	r4, r2, r1
    cb5a:	2c00      	cmp	r4, #0
    cb5c:	dd4e      	ble.n	cbfc <_vfiprintf_r+0xa54>
    cb5e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    cb62:	2c10      	cmp	r4, #16
    cb64:	f340 82b0 	ble.w	d0c8 <_vfiprintf_r+0xf20>
    cb68:	9919      	ldr	r1, [sp, #100]	; 0x64
    cb6a:	ee18 6a10 	vmov	r6, s16
    cb6e:	2510      	movs	r5, #16
    cb70:	e00d      	b.n	cb8e <_vfiprintf_r+0x9e6>
    cb72:	bf00      	nop
    cb74:	200007ec 	.word	0x200007ec
    cb78:	20007a50 	.word	0x20007a50
    cb7c:	200022a8 	.word	0x200022a8
    cb80:	1c88      	adds	r0, r1, #2
    cb82:	f109 0908 	add.w	r9, r9, #8
    cb86:	4611      	mov	r1, r2
    cb88:	3c10      	subs	r4, #16
    cb8a:	2c10      	cmp	r4, #16
    cb8c:	dd1a      	ble.n	cbc4 <_vfiprintf_r+0xa1c>
    cb8e:	1c4a      	adds	r2, r1, #1
    cb90:	48b3      	ldr	r0, [pc, #716]	; (ce60 <_vfiprintf_r+0xcb8>)
    cb92:	3310      	adds	r3, #16
    cb94:	2a07      	cmp	r2, #7
    cb96:	e9c9 0500 	strd	r0, r5, [r9]
    cb9a:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    cb9e:	ddef      	ble.n	cb80 <_vfiprintf_r+0x9d8>
    cba0:	aa18      	add	r2, sp, #96	; 0x60
    cba2:	b333      	cbz	r3, cbf2 <_vfiprintf_r+0xa4a>
    cba4:	4631      	mov	r1, r6
    cba6:	4658      	mov	r0, fp
    cba8:	f7ff fac2 	bl	c130 <__sprint_r.part.0>
    cbac:	2800      	cmp	r0, #0
    cbae:	f47f acd2 	bne.w	c556 <_vfiprintf_r+0x3ae>
    cbb2:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
    cbb6:	3c10      	subs	r4, #16
    cbb8:	2c10      	cmp	r4, #16
    cbba:	f101 0001 	add.w	r0, r1, #1
    cbbe:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    cbc2:	dce4      	bgt.n	cb8e <_vfiprintf_r+0x9e6>
    cbc4:	4aa6      	ldr	r2, [pc, #664]	; (ce60 <_vfiprintf_r+0xcb8>)
    cbc6:	f8c9 4004 	str.w	r4, [r9, #4]
    cbca:	4423      	add	r3, r4
    cbcc:	2807      	cmp	r0, #7
    cbce:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
    cbd2:	f8c9 2000 	str.w	r2, [r9]
    cbd6:	f77f ad59 	ble.w	c68c <_vfiprintf_r+0x4e4>
    cbda:	b17b      	cbz	r3, cbfc <_vfiprintf_r+0xa54>
    cbdc:	ee18 1a10 	vmov	r1, s16
    cbe0:	aa18      	add	r2, sp, #96	; 0x60
    cbe2:	4658      	mov	r0, fp
    cbe4:	f7ff faa4 	bl	c130 <__sprint_r.part.0>
    cbe8:	2800      	cmp	r0, #0
    cbea:	f47f acb4 	bne.w	c556 <_vfiprintf_r+0x3ae>
    cbee:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    cbf0:	e54c      	b.n	c68c <_vfiprintf_r+0x4e4>
    cbf2:	2001      	movs	r0, #1
    cbf4:	4619      	mov	r1, r3
    cbf6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    cbfa:	e7c5      	b.n	cb88 <_vfiprintf_r+0x9e0>
    cbfc:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
    cc00:	9903      	ldr	r1, [sp, #12]
    cc02:	428a      	cmp	r2, r1
    cc04:	bfac      	ite	ge
    cc06:	189b      	addge	r3, r3, r2
    cc08:	185b      	addlt	r3, r3, r1
    cc0a:	9305      	str	r3, [sp, #20]
    cc0c:	e549      	b.n	c6a2 <_vfiprintf_r+0x4fa>
    cc0e:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
    cc12:	058f      	lsls	r7, r1, #22
    cc14:	ee18 3a10 	vmov	r3, s16
    cc18:	b28a      	uxth	r2, r1
    cc1a:	f53f aae8 	bmi.w	c1ee <_vfiprintf_r+0x46>
    cc1e:	ee18 5a10 	vmov	r5, s16
    cc22:	6d98      	ldr	r0, [r3, #88]	; 0x58
    cc24:	f7f8 fd90 	bl	5748 <__retarget_lock_acquire_recursive>
    cc28:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
    cc2c:	b28a      	uxth	r2, r1
    cc2e:	f7ff bade 	b.w	c1ee <_vfiprintf_r+0x46>
    cc32:	2b00      	cmp	r3, #0
    cc34:	f43f ae79 	beq.w	c92a <_vfiprintf_r+0x782>
    cc38:	ee18 1a10 	vmov	r1, s16
    cc3c:	aa18      	add	r2, sp, #96	; 0x60
    cc3e:	4658      	mov	r0, fp
    cc40:	f7ff fa76 	bl	c130 <__sprint_r.part.0>
    cc44:	2800      	cmp	r0, #0
    cc46:	f47f ac86 	bne.w	c556 <_vfiprintf_r+0x3ae>
    cc4a:	9919      	ldr	r1, [sp, #100]	; 0x64
    cc4c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    cc4e:	3101      	adds	r1, #1
    cc50:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    cc54:	e4f8      	b.n	c648 <_vfiprintf_r+0x4a0>
    cc56:	9219      	str	r2, [sp, #100]	; 0x64
    cc58:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    cc5c:	e45e      	b.n	c51c <_vfiprintf_r+0x374>
    cc5e:	2f00      	cmp	r7, #0
    cc60:	f47f abc3 	bne.w	c3ea <_vfiprintf_r+0x242>
    cc64:	9e03      	ldr	r6, [sp, #12]
    cc66:	2700      	movs	r7, #0
    cc68:	9704      	str	r7, [sp, #16]
    cc6a:	ac44      	add	r4, sp, #272	; 0x110
    cc6c:	f7ff bbc5 	b.w	c3fa <_vfiprintf_r+0x252>
    cc70:	9b03      	ldr	r3, [sp, #12]
    cc72:	f013 0310 	ands.w	r3, r3, #16
    cc76:	d154      	bne.n	cd22 <_vfiprintf_r+0xb7a>
    cc78:	9a03      	ldr	r2, [sp, #12]
    cc7a:	f012 0040 	ands.w	r0, r2, #64	; 0x40
    cc7e:	f000 816b 	beq.w	cf58 <_vfiprintf_r+0xdb0>
    cc82:	9907      	ldr	r1, [sp, #28]
    cc84:	461a      	mov	r2, r3
    cc86:	f851 3b04 	ldr.w	r3, [r1], #4
    cc8a:	9107      	str	r1, [sp, #28]
    cc8c:	b29b      	uxth	r3, r3
    cc8e:	2101      	movs	r1, #1
    cc90:	e401      	b.n	c496 <_vfiprintf_r+0x2ee>
    cc92:	9a09      	ldr	r2, [sp, #36]	; 0x24
    cc94:	2a00      	cmp	r2, #0
    cc96:	d164      	bne.n	cd62 <_vfiprintf_r+0xbba>
    cc98:	4618      	mov	r0, r3
    cc9a:	2101      	movs	r1, #1
    cc9c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    cca0:	e4c9      	b.n	c636 <_vfiprintf_r+0x48e>
    cca2:	2101      	movs	r1, #1
    cca4:	4618      	mov	r0, r3
    cca6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    ccaa:	e4c4      	b.n	c636 <_vfiprintf_r+0x48e>
    ccac:	425b      	negs	r3, r3
    ccae:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
    ccb2:	9603      	str	r6, [sp, #12]
    ccb4:	202d      	movs	r0, #45	; 0x2d
    ccb6:	2101      	movs	r1, #1
    ccb8:	f7ff bbee 	b.w	c498 <_vfiprintf_r+0x2f0>
    ccbc:	2b00      	cmp	r3, #0
    ccbe:	f000 8088 	beq.w	cdd2 <_vfiprintf_r+0xc2a>
    ccc2:	ee18 1a10 	vmov	r1, s16
    ccc6:	aa18      	add	r2, sp, #96	; 0x60
    ccc8:	4658      	mov	r0, fp
    ccca:	f7ff fa31 	bl	c130 <__sprint_r.part.0>
    ccce:	2800      	cmp	r0, #0
    ccd0:	f47f ac41 	bne.w	c556 <_vfiprintf_r+0x3ae>
    ccd4:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    ccd8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    ccdc:	1c41      	adds	r1, r0, #1
    ccde:	e477      	b.n	c5d0 <_vfiprintf_r+0x428>
    cce0:	f898 1000 	ldrb.w	r1, [r8]
    cce4:	9307      	str	r3, [sp, #28]
    cce6:	f7ff bad2 	b.w	c28e <_vfiprintf_r+0xe6>
    ccea:	ac44      	add	r4, sp, #272	; 0x110
    ccec:	f7ff bb85 	b.w	c3fa <_vfiprintf_r+0x252>
    ccf0:	f109 0908 	add.w	r9, r9, #8
    ccf4:	f10c 0101 	add.w	r1, ip, #1
    ccf8:	4660      	mov	r0, ip
    ccfa:	e4a0      	b.n	c63e <_vfiprintf_r+0x496>
    ccfc:	f416 7200 	ands.w	r2, r6, #512	; 0x200
    cd00:	f040 8197 	bne.w	d032 <_vfiprintf_r+0xe8a>
    cd04:	f851 3b04 	ldr.w	r3, [r1], #4
    cd08:	9107      	str	r1, [sp, #28]
    cd0a:	f7ff bbc0 	b.w	c48e <_vfiprintf_r+0x2e6>
    cd0e:	05b3      	lsls	r3, r6, #22
    cd10:	f100 8188 	bmi.w	d024 <_vfiprintf_r+0xe7c>
    cd14:	f852 3b04 	ldr.w	r3, [r2], #4
    cd18:	9207      	str	r2, [sp, #28]
    cd1a:	17da      	asrs	r2, r3, #31
    cd1c:	4611      	mov	r1, r2
    cd1e:	f7ff bb52 	b.w	c3c6 <_vfiprintf_r+0x21e>
    cd22:	9907      	ldr	r1, [sp, #28]
    cd24:	f851 3b04 	ldr.w	r3, [r1], #4
    cd28:	9107      	str	r1, [sp, #28]
    cd2a:	2101      	movs	r1, #1
    cd2c:	f7ff bbb3 	b.w	c496 <_vfiprintf_r+0x2ee>
    cd30:	9b07      	ldr	r3, [sp, #28]
    cd32:	9805      	ldr	r0, [sp, #20]
    cd34:	f853 1b04 	ldr.w	r1, [r3], #4
    cd38:	9307      	str	r3, [sp, #28]
    cd3a:	17c2      	asrs	r2, r0, #31
    cd3c:	e9c1 0200 	strd	r0, r2, [r1]
    cd40:	f7ff ba7d 	b.w	c23e <_vfiprintf_r+0x96>
    cd44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cd46:	2b00      	cmp	r3, #0
    cd48:	f43f ab26 	beq.w	c398 <_vfiprintf_r+0x1f0>
    cd4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cd4e:	781b      	ldrb	r3, [r3, #0]
    cd50:	2b00      	cmp	r3, #0
    cd52:	f43f ab21 	beq.w	c398 <_vfiprintf_r+0x1f0>
    cd56:	f898 1000 	ldrb.w	r1, [r8]
    cd5a:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
    cd5e:	f7ff ba96 	b.w	c28e <_vfiprintf_r+0xe6>
    cd62:	2302      	movs	r3, #2
    cd64:	aa11      	add	r2, sp, #68	; 0x44
    cd66:	931c      	str	r3, [sp, #112]	; 0x70
    cd68:	921b      	str	r2, [sp, #108]	; 0x6c
    cd6a:	2001      	movs	r0, #1
    cd6c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    cd70:	e6a2      	b.n	cab8 <_vfiprintf_r+0x910>
    cd72:	9603      	str	r6, [sp, #12]
    cd74:	e571      	b.n	c85a <_vfiprintf_r+0x6b2>
    cd76:	4b3b      	ldr	r3, [pc, #236]	; (ce64 <_vfiprintf_r+0xcbc>)
    cd78:	930c      	str	r3, [sp, #48]	; 0x30
    cd7a:	f016 0220 	ands.w	r2, r6, #32
    cd7e:	d059      	beq.n	ce34 <_vfiprintf_r+0xc8c>
    cd80:	9b07      	ldr	r3, [sp, #28]
    cd82:	3307      	adds	r3, #7
    cd84:	f023 0307 	bic.w	r3, r3, #7
    cd88:	4618      	mov	r0, r3
    cd8a:	685a      	ldr	r2, [r3, #4]
    cd8c:	f850 3b08 	ldr.w	r3, [r0], #8
    cd90:	9007      	str	r0, [sp, #28]
    cd92:	07f4      	lsls	r4, r6, #31
    cd94:	d509      	bpl.n	cdaa <_vfiprintf_r+0xc02>
    cd96:	ea53 0002 	orrs.w	r0, r3, r2
    cd9a:	d006      	beq.n	cdaa <_vfiprintf_r+0xc02>
    cd9c:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
    cda0:	2130      	movs	r1, #48	; 0x30
    cda2:	f046 0602 	orr.w	r6, r6, #2
    cda6:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
    cdaa:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
    cdae:	9103      	str	r1, [sp, #12]
    cdb0:	2102      	movs	r1, #2
    cdb2:	f7ff bb70 	b.w	c496 <_vfiprintf_r+0x2ee>
    cdb6:	4b2c      	ldr	r3, [pc, #176]	; (ce68 <_vfiprintf_r+0xcc0>)
    cdb8:	930c      	str	r3, [sp, #48]	; 0x30
    cdba:	e7de      	b.n	cd7a <_vfiprintf_r+0xbd2>
    cdbc:	9b07      	ldr	r3, [sp, #28]
    cdbe:	2101      	movs	r1, #1
    cdc0:	f853 2b04 	ldr.w	r2, [r3], #4
    cdc4:	9103      	str	r1, [sp, #12]
    cdc6:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
    cdca:	9307      	str	r3, [sp, #28]
    cdcc:	9104      	str	r1, [sp, #16]
    cdce:	ac2b      	add	r4, sp, #172	; 0xac
    cdd0:	e4df      	b.n	c792 <_vfiprintf_r+0x5ea>
    cdd2:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
    cdd6:	2a00      	cmp	r2, #0
    cdd8:	f040 8132 	bne.w	d040 <_vfiprintf_r+0xe98>
    cddc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    cdde:	2a00      	cmp	r2, #0
    cde0:	f47f ae62 	bne.w	caa8 <_vfiprintf_r+0x900>
    cde4:	4618      	mov	r0, r3
    cde6:	2101      	movs	r1, #1
    cde8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    cdec:	e427      	b.n	c63e <_vfiprintf_r+0x496>
    cdee:	2100      	movs	r1, #0
    cdf0:	2208      	movs	r2, #8
    cdf2:	a816      	add	r0, sp, #88	; 0x58
    cdf4:	9413      	str	r4, [sp, #76]	; 0x4c
    cdf6:	f7f8 fb43 	bl	5480 <memset>
    cdfa:	1c79      	adds	r1, r7, #1
    cdfc:	f000 80bc 	beq.w	cf78 <_vfiprintf_r+0xdd0>
    ce00:	2500      	movs	r5, #0
    ce02:	9407      	str	r4, [sp, #28]
    ce04:	462c      	mov	r4, r5
    ce06:	e00c      	b.n	ce22 <_vfiprintf_r+0xc7a>
    ce08:	a92b      	add	r1, sp, #172	; 0xac
    ce0a:	4658      	mov	r0, fp
    ce0c:	f7fe ff2e 	bl	bc6c <_wcrtomb_r>
    ce10:	1c42      	adds	r2, r0, #1
    ce12:	4420      	add	r0, r4
    ce14:	f000 816b 	beq.w	d0ee <_vfiprintf_r+0xf46>
    ce18:	42b8      	cmp	r0, r7
    ce1a:	dc08      	bgt.n	ce2e <_vfiprintf_r+0xc86>
    ce1c:	f000 8170 	beq.w	d100 <_vfiprintf_r+0xf58>
    ce20:	4604      	mov	r4, r0
    ce22:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    ce24:	5952      	ldr	r2, [r2, r5]
    ce26:	ab16      	add	r3, sp, #88	; 0x58
    ce28:	3504      	adds	r5, #4
    ce2a:	2a00      	cmp	r2, #0
    ce2c:	d1ec      	bne.n	ce08 <_vfiprintf_r+0xc60>
    ce2e:	9404      	str	r4, [sp, #16]
    ce30:	9c07      	ldr	r4, [sp, #28]
    ce32:	e0af      	b.n	cf94 <_vfiprintf_r+0xdec>
    ce34:	f016 0310 	ands.w	r3, r6, #16
    ce38:	9807      	ldr	r0, [sp, #28]
    ce3a:	d10c      	bne.n	ce56 <_vfiprintf_r+0xcae>
    ce3c:	f016 0440 	ands.w	r4, r6, #64	; 0x40
    ce40:	d005      	beq.n	ce4e <_vfiprintf_r+0xca6>
    ce42:	461a      	mov	r2, r3
    ce44:	f850 3b04 	ldr.w	r3, [r0], #4
    ce48:	9007      	str	r0, [sp, #28]
    ce4a:	b29b      	uxth	r3, r3
    ce4c:	e7a1      	b.n	cd92 <_vfiprintf_r+0xbea>
    ce4e:	f416 7200 	ands.w	r2, r6, #512	; 0x200
    ce52:	f040 80e1 	bne.w	d018 <_vfiprintf_r+0xe70>
    ce56:	f850 3b04 	ldr.w	r3, [r0], #4
    ce5a:	9007      	str	r0, [sp, #28]
    ce5c:	e799      	b.n	cd92 <_vfiprintf_r+0xbea>
    ce5e:	bf00      	nop
    ce60:	200022a8 	.word	0x200022a8
    ce64:	200007ec 	.word	0x200007ec
    ce68:	20000800 	.word	0x20000800
    ce6c:	9903      	ldr	r1, [sp, #12]
    ce6e:	9704      	str	r7, [sp, #16]
    ce70:	ac44      	add	r4, sp, #272	; 0x110
    ce72:	469e      	mov	lr, r3
    ce74:	ee08 ba90 	vmov	s17, fp
    ce78:	f401 6680 	and.w	r6, r1, #1024	; 0x400
    ce7c:	f04f 0c00 	mov.w	ip, #0
    ce80:	4623      	mov	r3, r4
    ce82:	e006      	b.n	ce92 <_vfiprintf_r+0xcea>
    ce84:	f1be 0f0a 	cmp.w	lr, #10
    ce88:	f172 0200 	sbcs.w	r2, r2, #0
    ce8c:	d339      	bcc.n	cf02 <_vfiprintf_r+0xd5a>
    ce8e:	46a6      	mov	lr, r4
    ce90:	462a      	mov	r2, r5
    ce92:	49a6      	ldr	r1, [pc, #664]	; (d12c <_vfiprintf_r+0xf84>)
    ce94:	eb1e 0002 	adds.w	r0, lr, r2
    ce98:	f140 0000 	adc.w	r0, r0, #0
    ce9c:	460f      	mov	r7, r1
    ce9e:	fba1 1400 	umull	r1, r4, r1, r0
    cea2:	f024 0103 	bic.w	r1, r4, #3
    cea6:	eb01 0194 	add.w	r1, r1, r4, lsr #2
    ceaa:	1a40      	subs	r0, r0, r1
    ceac:	ebbe 0100 	subs.w	r1, lr, r0
    ceb0:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
    ceb4:	f162 0400 	sbc.w	r4, r2, #0
    ceb8:	fb05 f501 	mul.w	r5, r5, r1
    cebc:	fb07 5504 	mla	r5, r7, r4, r5
    cec0:	fba1 4107 	umull	r4, r1, r1, r7
    cec4:	440d      	add	r5, r1
    cec6:	2705      	movs	r7, #5
    cec8:	f004 0101 	and.w	r1, r4, #1
    cecc:	fba1 1b07 	umull	r1, fp, r1, r7
    ced0:	1809      	adds	r1, r1, r0
    ced2:	0864      	lsrs	r4, r4, #1
    ced4:	3130      	adds	r1, #48	; 0x30
    ced6:	f803 1c01 	strb.w	r1, [r3, #-1]
    ceda:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
    cede:	f10c 0c01 	add.w	ip, ip, #1
    cee2:	3b01      	subs	r3, #1
    cee4:	086d      	lsrs	r5, r5, #1
    cee6:	2e00      	cmp	r6, #0
    cee8:	d0cc      	beq.n	ce84 <_vfiprintf_r+0xcdc>
    ceea:	990b      	ldr	r1, [sp, #44]	; 0x2c
    ceec:	7809      	ldrb	r1, [r1, #0]
    ceee:	4561      	cmp	r1, ip
    cef0:	d1c8      	bne.n	ce84 <_vfiprintf_r+0xcdc>
    cef2:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    cef6:	d0c5      	beq.n	ce84 <_vfiprintf_r+0xcdc>
    cef8:	f1be 0f0a 	cmp.w	lr, #10
    cefc:	f172 0200 	sbcs.w	r2, r2, #0
    cf00:	d26c      	bcs.n	cfdc <_vfiprintf_r+0xe34>
    cf02:	461c      	mov	r4, r3
    cf04:	ab44      	add	r3, sp, #272	; 0x110
    cf06:	1b1b      	subs	r3, r3, r4
    cf08:	9f04      	ldr	r7, [sp, #16]
    cf0a:	9e03      	ldr	r6, [sp, #12]
    cf0c:	9304      	str	r3, [sp, #16]
    cf0e:	ee18 ba90 	vmov	fp, s17
    cf12:	f7ff ba72 	b.w	c3fa <_vfiprintf_r+0x252>
    cf16:	9603      	str	r6, [sp, #12]
    cf18:	f7ff ba62 	b.w	c3e0 <_vfiprintf_r+0x238>
    cf1c:	4658      	mov	r0, fp
    cf1e:	f7f8 f8c7 	bl	50b0 <__sinit>
    cf22:	f7ff b95b 	b.w	c1dc <_vfiprintf_r+0x34>
    cf26:	2901      	cmp	r1, #1
    cf28:	9603      	str	r6, [sp, #12]
    cf2a:	f47f accd 	bne.w	c8c8 <_vfiprintf_r+0x720>
    cf2e:	f7ff ba5c 	b.w	c3ea <_vfiprintf_r+0x242>
    cf32:	9b07      	ldr	r3, [sp, #28]
    cf34:	9905      	ldr	r1, [sp, #20]
    cf36:	f853 2b04 	ldr.w	r2, [r3], #4
    cf3a:	6011      	str	r1, [r2, #0]
    cf3c:	9307      	str	r3, [sp, #28]
    cf3e:	f7ff b97e 	b.w	c23e <_vfiprintf_r+0x96>
    cf42:	2f06      	cmp	r7, #6
    cf44:	463b      	mov	r3, r7
    cf46:	9a03      	ldr	r2, [sp, #12]
    cf48:	4c79      	ldr	r4, [pc, #484]	; (d130 <_vfiprintf_r+0xf88>)
    cf4a:	9207      	str	r2, [sp, #28]
    cf4c:	bf28      	it	cs
    cf4e:	2306      	movcs	r3, #6
    cf50:	9304      	str	r3, [sp, #16]
    cf52:	9303      	str	r3, [sp, #12]
    cf54:	f7ff bb25 	b.w	c5a2 <_vfiprintf_r+0x3fa>
    cf58:	9b03      	ldr	r3, [sp, #12]
    cf5a:	9907      	ldr	r1, [sp, #28]
    cf5c:	f413 7200 	ands.w	r2, r3, #512	; 0x200
    cf60:	bf14      	ite	ne
    cf62:	f851 3b04 	ldrne.w	r3, [r1], #4
    cf66:	f851 3b04 	ldreq.w	r3, [r1], #4
    cf6a:	9107      	str	r1, [sp, #28]
    cf6c:	bf1c      	itt	ne
    cf6e:	4602      	movne	r2, r0
    cf70:	b2db      	uxtbne	r3, r3
    cf72:	2101      	movs	r1, #1
    cf74:	f7ff ba8f 	b.w	c496 <_vfiprintf_r+0x2ee>
    cf78:	ab16      	add	r3, sp, #88	; 0x58
    cf7a:	9300      	str	r3, [sp, #0]
    cf7c:	2300      	movs	r3, #0
    cf7e:	4619      	mov	r1, r3
    cf80:	aa13      	add	r2, sp, #76	; 0x4c
    cf82:	4658      	mov	r0, fp
    cf84:	f7fe fe98 	bl	bcb8 <_wcsrtombs_r>
    cf88:	4603      	mov	r3, r0
    cf8a:	3301      	adds	r3, #1
    cf8c:	9004      	str	r0, [sp, #16]
    cf8e:	f000 80ae 	beq.w	d0ee <_vfiprintf_r+0xf46>
    cf92:	9413      	str	r4, [sp, #76]	; 0x4c
    cf94:	9b04      	ldr	r3, [sp, #16]
    cf96:	2b00      	cmp	r3, #0
    cf98:	d030      	beq.n	cffc <_vfiprintf_r+0xe54>
    cf9a:	2b63      	cmp	r3, #99	; 0x63
    cf9c:	dc63      	bgt.n	d066 <_vfiprintf_r+0xebe>
    cf9e:	2300      	movs	r3, #0
    cfa0:	9308      	str	r3, [sp, #32]
    cfa2:	ac2b      	add	r4, sp, #172	; 0xac
    cfa4:	2208      	movs	r2, #8
    cfa6:	2100      	movs	r1, #0
    cfa8:	a816      	add	r0, sp, #88	; 0x58
    cfaa:	f7f8 fa69 	bl	5480 <memset>
    cfae:	9d04      	ldr	r5, [sp, #16]
    cfb0:	ab16      	add	r3, sp, #88	; 0x58
    cfb2:	9300      	str	r3, [sp, #0]
    cfb4:	aa13      	add	r2, sp, #76	; 0x4c
    cfb6:	462b      	mov	r3, r5
    cfb8:	4621      	mov	r1, r4
    cfba:	4658      	mov	r0, fp
    cfbc:	f7fe fe7c 	bl	bcb8 <_wcsrtombs_r>
    cfc0:	4285      	cmp	r5, r0
    cfc2:	f040 80ab 	bne.w	d11c <_vfiprintf_r+0xf74>
    cfc6:	9b03      	ldr	r3, [sp, #12]
    cfc8:	9a04      	ldr	r2, [sp, #16]
    cfca:	9307      	str	r3, [sp, #28]
    cfcc:	2300      	movs	r3, #0
    cfce:	54a3      	strb	r3, [r4, r2]
    cfd0:	461f      	mov	r7, r3
    cfd2:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    cfd6:	9303      	str	r3, [sp, #12]
    cfd8:	f7ff ba16 	b.w	c408 <_vfiprintf_r+0x260>
    cfdc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    cfde:	990d      	ldr	r1, [sp, #52]	; 0x34
    cfe0:	1a9b      	subs	r3, r3, r2
    cfe2:	4618      	mov	r0, r3
    cfe4:	9308      	str	r3, [sp, #32]
    cfe6:	f7f8 fae3 	bl	55b0 <strncpy>
    cfea:	990b      	ldr	r1, [sp, #44]	; 0x2c
    cfec:	9b08      	ldr	r3, [sp, #32]
    cfee:	784a      	ldrb	r2, [r1, #1]
    cff0:	b10a      	cbz	r2, cff6 <_vfiprintf_r+0xe4e>
    cff2:	3101      	adds	r1, #1
    cff4:	910b      	str	r1, [sp, #44]	; 0x2c
    cff6:	f04f 0c00 	mov.w	ip, #0
    cffa:	e748      	b.n	ce8e <_vfiprintf_r+0xce6>
    cffc:	9b03      	ldr	r3, [sp, #12]
    cffe:	9307      	str	r3, [sp, #28]
    d000:	9b04      	ldr	r3, [sp, #16]
    d002:	9303      	str	r3, [sp, #12]
    d004:	461f      	mov	r7, r3
    d006:	9308      	str	r3, [sp, #32]
    d008:	f7ff b9fe 	b.w	c408 <_vfiprintf_r+0x260>
    d00c:	2101      	movs	r1, #1
    d00e:	4618      	mov	r0, r3
    d010:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d014:	f7ff bb13 	b.w	c63e <_vfiprintf_r+0x496>
    d018:	f850 3b04 	ldr.w	r3, [r0], #4
    d01c:	9007      	str	r0, [sp, #28]
    d01e:	4622      	mov	r2, r4
    d020:	b2db      	uxtb	r3, r3
    d022:	e6b6      	b.n	cd92 <_vfiprintf_r+0xbea>
    d024:	f912 3b04 	ldrsb.w	r3, [r2], #4
    d028:	9207      	str	r2, [sp, #28]
    d02a:	17da      	asrs	r2, r3, #31
    d02c:	4611      	mov	r1, r2
    d02e:	f7ff b9ca 	b.w	c3c6 <_vfiprintf_r+0x21e>
    d032:	f851 3b04 	ldr.w	r3, [r1], #4
    d036:	9107      	str	r1, [sp, #28]
    d038:	4602      	mov	r2, r0
    d03a:	b2db      	uxtb	r3, r3
    d03c:	f7ff ba27 	b.w	c48e <_vfiprintf_r+0x2e6>
    d040:	2301      	movs	r3, #1
    d042:	931c      	str	r3, [sp, #112]	; 0x70
    d044:	2101      	movs	r1, #1
    d046:	f10d 0343 	add.w	r3, sp, #67	; 0x43
    d04a:	931b      	str	r3, [sp, #108]	; 0x6c
    d04c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    d050:	460b      	mov	r3, r1
    d052:	f7ff bacd 	b.w	c5f0 <_vfiprintf_r+0x448>
    d056:	9b07      	ldr	r3, [sp, #28]
    d058:	9905      	ldr	r1, [sp, #20]
    d05a:	f853 2b04 	ldr.w	r2, [r3], #4
    d05e:	9307      	str	r3, [sp, #28]
    d060:	8011      	strh	r1, [r2, #0]
    d062:	f7ff b8ec 	b.w	c23e <_vfiprintf_r+0x96>
    d066:	1c59      	adds	r1, r3, #1
    d068:	4658      	mov	r0, fp
    d06a:	f7f6 faf5 	bl	3658 <_malloc_r>
    d06e:	4604      	mov	r4, r0
    d070:	2800      	cmp	r0, #0
    d072:	d03c      	beq.n	d0ee <_vfiprintf_r+0xf46>
    d074:	9008      	str	r0, [sp, #32]
    d076:	e795      	b.n	cfa4 <_vfiprintf_r+0xdfc>
    d078:	6d88      	ldr	r0, [r1, #88]	; 0x58
    d07a:	f7f8 fb67 	bl	574c <__retarget_lock_release_recursive>
    d07e:	f7ff b9e9 	b.w	c454 <_vfiprintf_r+0x2ac>
    d082:	9b03      	ldr	r3, [sp, #12]
    d084:	9307      	str	r3, [sp, #28]
    d086:	e9cd 7703 	strd	r7, r7, [sp, #12]
    d08a:	9f08      	ldr	r7, [sp, #32]
    d08c:	f7ff b9bc 	b.w	c408 <_vfiprintf_r+0x260>
    d090:	9819      	ldr	r0, [sp, #100]	; 0x64
    d092:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    d094:	3001      	adds	r0, #1
    d096:	e545      	b.n	cb24 <_vfiprintf_r+0x97c>
    d098:	9b03      	ldr	r3, [sp, #12]
    d09a:	9307      	str	r3, [sp, #28]
    d09c:	4620      	mov	r0, r4
    d09e:	f7f8 fccf 	bl	5a40 <strlen>
    d0a2:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
    d0a6:	462f      	mov	r7, r5
    d0a8:	9004      	str	r0, [sp, #16]
    d0aa:	9303      	str	r3, [sp, #12]
    d0ac:	9508      	str	r5, [sp, #32]
    d0ae:	f7ff b9ab 	b.w	c408 <_vfiprintf_r+0x260>
    d0b2:	ee18 1a10 	vmov	r1, s16
    d0b6:	aa18      	add	r2, sp, #96	; 0x60
    d0b8:	4658      	mov	r0, fp
    d0ba:	f7ff f839 	bl	c130 <__sprint_r.part.0>
    d0be:	2800      	cmp	r0, #0
    d0c0:	f43f aa36 	beq.w	c530 <_vfiprintf_r+0x388>
    d0c4:	f7ff ba4d 	b.w	c562 <_vfiprintf_r+0x3ba>
    d0c8:	9819      	ldr	r0, [sp, #100]	; 0x64
    d0ca:	3001      	adds	r0, #1
    d0cc:	e57a      	b.n	cbc4 <_vfiprintf_r+0xa1c>
    d0ce:	468c      	mov	ip, r1
    d0d0:	e46e      	b.n	c9b0 <_vfiprintf_r+0x808>
    d0d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    d0d4:	07d9      	lsls	r1, r3, #31
    d0d6:	d405      	bmi.n	d0e4 <_vfiprintf_r+0xf3c>
    d0d8:	89ab      	ldrh	r3, [r5, #12]
    d0da:	059a      	lsls	r2, r3, #22
    d0dc:	d402      	bmi.n	d0e4 <_vfiprintf_r+0xf3c>
    d0de:	6da8      	ldr	r0, [r5, #88]	; 0x58
    d0e0:	f7f8 fb34 	bl	574c <__retarget_lock_release_recursive>
    d0e4:	f04f 33ff 	mov.w	r3, #4294967295
    d0e8:	9305      	str	r3, [sp, #20]
    d0ea:	f7ff ba49 	b.w	c580 <_vfiprintf_r+0x3d8>
    d0ee:	ee18 2a10 	vmov	r2, s16
    d0f2:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    d0f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d0fa:	8193      	strh	r3, [r2, #12]
    d0fc:	f7ff ba35 	b.w	c56a <_vfiprintf_r+0x3c2>
    d100:	9c07      	ldr	r4, [sp, #28]
    d102:	9704      	str	r7, [sp, #16]
    d104:	e746      	b.n	cf94 <_vfiprintf_r+0xdec>
    d106:	9b07      	ldr	r3, [sp, #28]
    d108:	f898 1001 	ldrb.w	r1, [r8, #1]
    d10c:	f853 7b04 	ldr.w	r7, [r3], #4
    d110:	9307      	str	r3, [sp, #28]
    d112:	4690      	mov	r8, r2
    d114:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
    d118:	f7ff b8b9 	b.w	c28e <_vfiprintf_r+0xe6>
    d11c:	ee18 2a10 	vmov	r2, s16
    d120:	8993      	ldrh	r3, [r2, #12]
    d122:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d126:	8193      	strh	r3, [r2, #12]
    d128:	f7ff ba15 	b.w	c556 <_vfiprintf_r+0x3ae>
    d12c:	cccccccd 	.word	0xcccccccd
    d130:	20000814 	.word	0x20000814

0000d134 <__sbprintf>:
    d134:	b570      	push	{r4, r5, r6, lr}
    d136:	460c      	mov	r4, r1
    d138:	8989      	ldrh	r1, [r1, #12]
    d13a:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
    d13e:	f021 0102 	bic.w	r1, r1, #2
    d142:	f8ad 1014 	strh.w	r1, [sp, #20]
    d146:	6e61      	ldr	r1, [r4, #100]	; 0x64
    d148:	911b      	str	r1, [sp, #108]	; 0x6c
    d14a:	89e1      	ldrh	r1, [r4, #14]
    d14c:	f8ad 1016 	strh.w	r1, [sp, #22]
    d150:	69e1      	ldr	r1, [r4, #28]
    d152:	9109      	str	r1, [sp, #36]	; 0x24
    d154:	6a61      	ldr	r1, [r4, #36]	; 0x24
    d156:	910b      	str	r1, [sp, #44]	; 0x2c
    d158:	a91c      	add	r1, sp, #112	; 0x70
    d15a:	9102      	str	r1, [sp, #8]
    d15c:	9106      	str	r1, [sp, #24]
    d15e:	f44f 6180 	mov.w	r1, #1024	; 0x400
    d162:	4606      	mov	r6, r0
    d164:	9104      	str	r1, [sp, #16]
    d166:	9107      	str	r1, [sp, #28]
    d168:	a818      	add	r0, sp, #96	; 0x60
    d16a:	2100      	movs	r1, #0
    d16c:	e9cd 3200 	strd	r3, r2, [sp]
    d170:	9108      	str	r1, [sp, #32]
    d172:	f7f8 fae5 	bl	5740 <__retarget_lock_init_recursive>
    d176:	e9dd 3200 	ldrd	r3, r2, [sp]
    d17a:	a902      	add	r1, sp, #8
    d17c:	4630      	mov	r0, r6
    d17e:	f7ff f813 	bl	c1a8 <_vfiprintf_r>
    d182:	1e05      	subs	r5, r0, #0
    d184:	db07      	blt.n	d196 <__sbprintf+0x62>
    d186:	a902      	add	r1, sp, #8
    d188:	4630      	mov	r0, r6
    d18a:	f7fd fa63 	bl	a654 <_fflush_r>
    d18e:	2800      	cmp	r0, #0
    d190:	bf18      	it	ne
    d192:	f04f 35ff 	movne.w	r5, #4294967295
    d196:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    d19a:	065b      	lsls	r3, r3, #25
    d19c:	d503      	bpl.n	d1a6 <__sbprintf+0x72>
    d19e:	89a3      	ldrh	r3, [r4, #12]
    d1a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d1a4:	81a3      	strh	r3, [r4, #12]
    d1a6:	9818      	ldr	r0, [sp, #96]	; 0x60
    d1a8:	f7f8 facc 	bl	5744 <__retarget_lock_close_recursive>
    d1ac:	4628      	mov	r0, r5
    d1ae:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
    d1b2:	bd70      	pop	{r4, r5, r6, pc}

0000d1b4 <__sfvwrite_r>:
    d1b4:	6893      	ldr	r3, [r2, #8]
    d1b6:	2b00      	cmp	r3, #0
    d1b8:	f000 8085 	beq.w	d2c6 <__sfvwrite_r+0x112>
    d1bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d1c0:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
    d1c4:	460c      	mov	r4, r1
    d1c6:	0719      	lsls	r1, r3, #28
    d1c8:	4680      	mov	r8, r0
    d1ca:	b083      	sub	sp, #12
    d1cc:	4617      	mov	r7, r2
    d1ce:	b298      	uxth	r0, r3
    d1d0:	d525      	bpl.n	d21e <__sfvwrite_r+0x6a>
    d1d2:	6923      	ldr	r3, [r4, #16]
    d1d4:	b31b      	cbz	r3, d21e <__sfvwrite_r+0x6a>
    d1d6:	f010 0302 	ands.w	r3, r0, #2
    d1da:	683d      	ldr	r5, [r7, #0]
    d1dc:	d02d      	beq.n	d23a <__sfvwrite_r+0x86>
    d1de:	f04f 0a00 	mov.w	sl, #0
    d1e2:	f8df b2c0 	ldr.w	fp, [pc, #704]	; d4a4 <__sfvwrite_r+0x2f0>
    d1e6:	4656      	mov	r6, sl
    d1e8:	46b9      	mov	r9, r7
    d1ea:	455e      	cmp	r6, fp
    d1ec:	4633      	mov	r3, r6
    d1ee:	4652      	mov	r2, sl
    d1f0:	bf28      	it	cs
    d1f2:	465b      	movcs	r3, fp
    d1f4:	4640      	mov	r0, r8
    d1f6:	2e00      	cmp	r6, #0
    d1f8:	d052      	beq.n	d2a0 <__sfvwrite_r+0xec>
    d1fa:	69e1      	ldr	r1, [r4, #28]
    d1fc:	6a67      	ldr	r7, [r4, #36]	; 0x24
    d1fe:	47b8      	blx	r7
    d200:	2800      	cmp	r0, #0
    d202:	dd56      	ble.n	d2b2 <__sfvwrite_r+0xfe>
    d204:	f8d9 3008 	ldr.w	r3, [r9, #8]
    d208:	1a1b      	subs	r3, r3, r0
    d20a:	4482      	add	sl, r0
    d20c:	1a36      	subs	r6, r6, r0
    d20e:	f8c9 3008 	str.w	r3, [r9, #8]
    d212:	2b00      	cmp	r3, #0
    d214:	d1e9      	bne.n	d1ea <__sfvwrite_r+0x36>
    d216:	2000      	movs	r0, #0
    d218:	b003      	add	sp, #12
    d21a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d21e:	4621      	mov	r1, r4
    d220:	4640      	mov	r0, r8
    d222:	f000 f97d 	bl	d520 <__swsetup_r>
    d226:	2800      	cmp	r0, #0
    d228:	f040 8138 	bne.w	d49c <__sfvwrite_r+0x2e8>
    d22c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    d230:	683d      	ldr	r5, [r7, #0]
    d232:	b298      	uxth	r0, r3
    d234:	f010 0302 	ands.w	r3, r0, #2
    d238:	d1d1      	bne.n	d1de <__sfvwrite_r+0x2a>
    d23a:	f010 0901 	ands.w	r9, r0, #1
    d23e:	d144      	bne.n	d2ca <__sfvwrite_r+0x116>
    d240:	464e      	mov	r6, r9
    d242:	9700      	str	r7, [sp, #0]
    d244:	b346      	cbz	r6, d298 <__sfvwrite_r+0xe4>
    d246:	0582      	lsls	r2, r0, #22
    d248:	f8d4 b008 	ldr.w	fp, [r4, #8]
    d24c:	f140 8085 	bpl.w	d35a <__sfvwrite_r+0x1a6>
    d250:	45b3      	cmp	fp, r6
    d252:	465a      	mov	r2, fp
    d254:	f200 80b4 	bhi.w	d3c0 <__sfvwrite_r+0x20c>
    d258:	f410 6f90 	tst.w	r0, #1152	; 0x480
    d25c:	f040 80c1 	bne.w	d3e2 <__sfvwrite_r+0x22e>
    d260:	6820      	ldr	r0, [r4, #0]
    d262:	9201      	str	r2, [sp, #4]
    d264:	4649      	mov	r1, r9
    d266:	f7f8 f88f 	bl	5388 <memmove>
    d26a:	68a3      	ldr	r3, [r4, #8]
    d26c:	9a01      	ldr	r2, [sp, #4]
    d26e:	eba3 010b 	sub.w	r1, r3, fp
    d272:	6823      	ldr	r3, [r4, #0]
    d274:	60a1      	str	r1, [r4, #8]
    d276:	4413      	add	r3, r2
    d278:	46b2      	mov	sl, r6
    d27a:	6023      	str	r3, [r4, #0]
    d27c:	2600      	movs	r6, #0
    d27e:	9a00      	ldr	r2, [sp, #0]
    d280:	6893      	ldr	r3, [r2, #8]
    d282:	eba3 030a 	sub.w	r3, r3, sl
    d286:	44d1      	add	r9, sl
    d288:	6093      	str	r3, [r2, #8]
    d28a:	2b00      	cmp	r3, #0
    d28c:	d0c3      	beq.n	d216 <__sfvwrite_r+0x62>
    d28e:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
    d292:	b280      	uxth	r0, r0
    d294:	2e00      	cmp	r6, #0
    d296:	d1d6      	bne.n	d246 <__sfvwrite_r+0x92>
    d298:	e9d5 9600 	ldrd	r9, r6, [r5]
    d29c:	3508      	adds	r5, #8
    d29e:	e7d1      	b.n	d244 <__sfvwrite_r+0x90>
    d2a0:	e9d5 a600 	ldrd	sl, r6, [r5]
    d2a4:	3508      	adds	r5, #8
    d2a6:	e7a0      	b.n	d1ea <__sfvwrite_r+0x36>
    d2a8:	4621      	mov	r1, r4
    d2aa:	4640      	mov	r0, r8
    d2ac:	f7fd f9d2 	bl	a654 <_fflush_r>
    d2b0:	b388      	cbz	r0, d316 <__sfvwrite_r+0x162>
    d2b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    d2b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d2ba:	f04f 30ff 	mov.w	r0, #4294967295
    d2be:	81a3      	strh	r3, [r4, #12]
    d2c0:	b003      	add	sp, #12
    d2c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d2c6:	2000      	movs	r0, #0
    d2c8:	4770      	bx	lr
    d2ca:	461e      	mov	r6, r3
    d2cc:	46ba      	mov	sl, r7
    d2ce:	4699      	mov	r9, r3
    d2d0:	4618      	mov	r0, r3
    d2d2:	9500      	str	r5, [sp, #0]
    d2d4:	461f      	mov	r7, r3
    d2d6:	b366      	cbz	r6, d332 <__sfvwrite_r+0x17e>
    d2d8:	2800      	cmp	r0, #0
    d2da:	d032      	beq.n	d342 <__sfvwrite_r+0x18e>
    d2dc:	464a      	mov	r2, r9
    d2de:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
    d2e2:	6820      	ldr	r0, [r4, #0]
    d2e4:	68a5      	ldr	r5, [r4, #8]
    d2e6:	42b2      	cmp	r2, r6
    d2e8:	bf28      	it	cs
    d2ea:	4632      	movcs	r2, r6
    d2ec:	4288      	cmp	r0, r1
    d2ee:	d904      	bls.n	d2fa <__sfvwrite_r+0x146>
    d2f0:	eb05 0b03 	add.w	fp, r5, r3
    d2f4:	455a      	cmp	r2, fp
    d2f6:	f300 80a7 	bgt.w	d448 <__sfvwrite_r+0x294>
    d2fa:	4293      	cmp	r3, r2
    d2fc:	dc64      	bgt.n	d3c8 <__sfvwrite_r+0x214>
    d2fe:	69e1      	ldr	r1, [r4, #28]
    d300:	6a65      	ldr	r5, [r4, #36]	; 0x24
    d302:	463a      	mov	r2, r7
    d304:	4640      	mov	r0, r8
    d306:	47a8      	blx	r5
    d308:	f1b0 0b00 	subs.w	fp, r0, #0
    d30c:	ddd1      	ble.n	d2b2 <__sfvwrite_r+0xfe>
    d30e:	ebb9 090b 	subs.w	r9, r9, fp
    d312:	d0c9      	beq.n	d2a8 <__sfvwrite_r+0xf4>
    d314:	2001      	movs	r0, #1
    d316:	f8da 3008 	ldr.w	r3, [sl, #8]
    d31a:	eba3 030b 	sub.w	r3, r3, fp
    d31e:	445f      	add	r7, fp
    d320:	eba6 060b 	sub.w	r6, r6, fp
    d324:	f8ca 3008 	str.w	r3, [sl, #8]
    d328:	2b00      	cmp	r3, #0
    d32a:	f43f af74 	beq.w	d216 <__sfvwrite_r+0x62>
    d32e:	2e00      	cmp	r6, #0
    d330:	d1d2      	bne.n	d2d8 <__sfvwrite_r+0x124>
    d332:	9a00      	ldr	r2, [sp, #0]
    d334:	6856      	ldr	r6, [r2, #4]
    d336:	4613      	mov	r3, r2
    d338:	3208      	adds	r2, #8
    d33a:	9200      	str	r2, [sp, #0]
    d33c:	2e00      	cmp	r6, #0
    d33e:	d0f8      	beq.n	d332 <__sfvwrite_r+0x17e>
    d340:	681f      	ldr	r7, [r3, #0]
    d342:	4632      	mov	r2, r6
    d344:	210a      	movs	r1, #10
    d346:	4638      	mov	r0, r7
    d348:	f7fd fa4a 	bl	a7e0 <memchr>
    d34c:	2800      	cmp	r0, #0
    d34e:	f000 809c 	beq.w	d48a <__sfvwrite_r+0x2d6>
    d352:	3001      	adds	r0, #1
    d354:	eba0 0907 	sub.w	r9, r0, r7
    d358:	e7c0      	b.n	d2dc <__sfvwrite_r+0x128>
    d35a:	6820      	ldr	r0, [r4, #0]
    d35c:	6923      	ldr	r3, [r4, #16]
    d35e:	4298      	cmp	r0, r3
    d360:	d816      	bhi.n	d390 <__sfvwrite_r+0x1dc>
    d362:	6962      	ldr	r2, [r4, #20]
    d364:	42b2      	cmp	r2, r6
    d366:	d813      	bhi.n	d390 <__sfvwrite_r+0x1dc>
    d368:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    d36c:	42b3      	cmp	r3, r6
    d36e:	bf28      	it	cs
    d370:	4633      	movcs	r3, r6
    d372:	69e1      	ldr	r1, [r4, #28]
    d374:	fb93 f3f2 	sdiv	r3, r3, r2
    d378:	6a67      	ldr	r7, [r4, #36]	; 0x24
    d37a:	fb02 f303 	mul.w	r3, r2, r3
    d37e:	4640      	mov	r0, r8
    d380:	464a      	mov	r2, r9
    d382:	47b8      	blx	r7
    d384:	f1b0 0a00 	subs.w	sl, r0, #0
    d388:	dd93      	ble.n	d2b2 <__sfvwrite_r+0xfe>
    d38a:	eba6 060a 	sub.w	r6, r6, sl
    d38e:	e776      	b.n	d27e <__sfvwrite_r+0xca>
    d390:	45b3      	cmp	fp, r6
    d392:	46da      	mov	sl, fp
    d394:	bf28      	it	cs
    d396:	46b2      	movcs	sl, r6
    d398:	4652      	mov	r2, sl
    d39a:	4649      	mov	r1, r9
    d39c:	f7f7 fff4 	bl	5388 <memmove>
    d3a0:	68a3      	ldr	r3, [r4, #8]
    d3a2:	6822      	ldr	r2, [r4, #0]
    d3a4:	eba3 030a 	sub.w	r3, r3, sl
    d3a8:	4452      	add	r2, sl
    d3aa:	60a3      	str	r3, [r4, #8]
    d3ac:	6022      	str	r2, [r4, #0]
    d3ae:	2b00      	cmp	r3, #0
    d3b0:	d1eb      	bne.n	d38a <__sfvwrite_r+0x1d6>
    d3b2:	4621      	mov	r1, r4
    d3b4:	4640      	mov	r0, r8
    d3b6:	f7fd f94d 	bl	a654 <_fflush_r>
    d3ba:	2800      	cmp	r0, #0
    d3bc:	d0e5      	beq.n	d38a <__sfvwrite_r+0x1d6>
    d3be:	e778      	b.n	d2b2 <__sfvwrite_r+0xfe>
    d3c0:	6820      	ldr	r0, [r4, #0]
    d3c2:	46b3      	mov	fp, r6
    d3c4:	4632      	mov	r2, r6
    d3c6:	e74c      	b.n	d262 <__sfvwrite_r+0xae>
    d3c8:	4639      	mov	r1, r7
    d3ca:	9201      	str	r2, [sp, #4]
    d3cc:	f7f7 ffdc 	bl	5388 <memmove>
    d3d0:	9a01      	ldr	r2, [sp, #4]
    d3d2:	68a3      	ldr	r3, [r4, #8]
    d3d4:	1a9b      	subs	r3, r3, r2
    d3d6:	60a3      	str	r3, [r4, #8]
    d3d8:	6823      	ldr	r3, [r4, #0]
    d3da:	4413      	add	r3, r2
    d3dc:	6023      	str	r3, [r4, #0]
    d3de:	4693      	mov	fp, r2
    d3e0:	e795      	b.n	d30e <__sfvwrite_r+0x15a>
    d3e2:	6823      	ldr	r3, [r4, #0]
    d3e4:	6921      	ldr	r1, [r4, #16]
    d3e6:	eba3 0b01 	sub.w	fp, r3, r1
    d3ea:	6963      	ldr	r3, [r4, #20]
    d3ec:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
    d3f0:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
    d3f4:	f10b 0301 	add.w	r3, fp, #1
    d3f8:	ea4f 0a6a 	mov.w	sl, sl, asr #1
    d3fc:	4433      	add	r3, r6
    d3fe:	4553      	cmp	r3, sl
    d400:	4652      	mov	r2, sl
    d402:	bf84      	itt	hi
    d404:	469a      	movhi	sl, r3
    d406:	4652      	movhi	r2, sl
    d408:	0543      	lsls	r3, r0, #21
    d40a:	d52c      	bpl.n	d466 <__sfvwrite_r+0x2b2>
    d40c:	4611      	mov	r1, r2
    d40e:	4640      	mov	r0, r8
    d410:	f7f6 f922 	bl	3658 <_malloc_r>
    d414:	2800      	cmp	r0, #0
    d416:	d03b      	beq.n	d490 <__sfvwrite_r+0x2dc>
    d418:	465a      	mov	r2, fp
    d41a:	6921      	ldr	r1, [r4, #16]
    d41c:	9001      	str	r0, [sp, #4]
    d41e:	f7f4 f9f5 	bl	180c <memcpy>
    d422:	89a2      	ldrh	r2, [r4, #12]
    d424:	9b01      	ldr	r3, [sp, #4]
    d426:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
    d42a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    d42e:	81a2      	strh	r2, [r4, #12]
    d430:	eb03 000b 	add.w	r0, r3, fp
    d434:	6123      	str	r3, [r4, #16]
    d436:	ebaa 030b 	sub.w	r3, sl, fp
    d43a:	f8c4 a014 	str.w	sl, [r4, #20]
    d43e:	60a3      	str	r3, [r4, #8]
    d440:	6020      	str	r0, [r4, #0]
    d442:	46b3      	mov	fp, r6
    d444:	4632      	mov	r2, r6
    d446:	e70c      	b.n	d262 <__sfvwrite_r+0xae>
    d448:	4639      	mov	r1, r7
    d44a:	465a      	mov	r2, fp
    d44c:	f7f7 ff9c 	bl	5388 <memmove>
    d450:	6823      	ldr	r3, [r4, #0]
    d452:	445b      	add	r3, fp
    d454:	6023      	str	r3, [r4, #0]
    d456:	4621      	mov	r1, r4
    d458:	4640      	mov	r0, r8
    d45a:	f7fd f8fb 	bl	a654 <_fflush_r>
    d45e:	2800      	cmp	r0, #0
    d460:	f43f af55 	beq.w	d30e <__sfvwrite_r+0x15a>
    d464:	e725      	b.n	d2b2 <__sfvwrite_r+0xfe>
    d466:	4640      	mov	r0, r8
    d468:	f7f6 fbbe 	bl	3be8 <_realloc_r>
    d46c:	4603      	mov	r3, r0
    d46e:	2800      	cmp	r0, #0
    d470:	d1de      	bne.n	d430 <__sfvwrite_r+0x27c>
    d472:	6921      	ldr	r1, [r4, #16]
    d474:	4640      	mov	r0, r8
    d476:	f7f8 fbb1 	bl	5bdc <_free_r>
    d47a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    d47e:	220c      	movs	r2, #12
    d480:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    d484:	f8c8 2000 	str.w	r2, [r8]
    d488:	e715      	b.n	d2b6 <__sfvwrite_r+0x102>
    d48a:	1c72      	adds	r2, r6, #1
    d48c:	4691      	mov	r9, r2
    d48e:	e726      	b.n	d2de <__sfvwrite_r+0x12a>
    d490:	220c      	movs	r2, #12
    d492:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    d496:	f8c8 2000 	str.w	r2, [r8]
    d49a:	e70c      	b.n	d2b6 <__sfvwrite_r+0x102>
    d49c:	f04f 30ff 	mov.w	r0, #4294967295
    d4a0:	e6ba      	b.n	d218 <__sfvwrite_r+0x64>
    d4a2:	bf00      	nop
    d4a4:	7ffffc00 	.word	0x7ffffc00

0000d4a8 <__submore>:
    d4a8:	f101 0340 	add.w	r3, r1, #64	; 0x40
    d4ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d4b0:	460c      	mov	r4, r1
    d4b2:	6b09      	ldr	r1, [r1, #48]	; 0x30
    d4b4:	4299      	cmp	r1, r3
    d4b6:	d014      	beq.n	d4e2 <__submore+0x3a>
    d4b8:	6b66      	ldr	r6, [r4, #52]	; 0x34
    d4ba:	0077      	lsls	r7, r6, #1
    d4bc:	463a      	mov	r2, r7
    d4be:	f7f6 fb93 	bl	3be8 <_realloc_r>
    d4c2:	4605      	mov	r5, r0
    d4c4:	b340      	cbz	r0, d518 <__submore+0x70>
    d4c6:	eb00 0806 	add.w	r8, r0, r6
    d4ca:	4601      	mov	r1, r0
    d4cc:	4632      	mov	r2, r6
    d4ce:	4640      	mov	r0, r8
    d4d0:	f7f4 f99c 	bl	180c <memcpy>
    d4d4:	e9c4 570c 	strd	r5, r7, [r4, #48]	; 0x30
    d4d8:	f8c4 8000 	str.w	r8, [r4]
    d4dc:	2000      	movs	r0, #0
    d4de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d4e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
    d4e6:	f7f6 f8b7 	bl	3658 <_malloc_r>
    d4ea:	b1a8      	cbz	r0, d518 <__submore+0x70>
    d4ec:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
    d4f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    d4f4:	e9c4 020c 	strd	r0, r2, [r4, #48]	; 0x30
    d4f8:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
    d4fc:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    d500:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
    d504:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
    d508:	f880 23fd 	strb.w	r2, [r0, #1021]	; 0x3fd
    d50c:	f200 33fd 	addw	r3, r0, #1021	; 0x3fd
    d510:	6023      	str	r3, [r4, #0]
    d512:	2000      	movs	r0, #0
    d514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d518:	f04f 30ff 	mov.w	r0, #4294967295
    d51c:	e7df      	b.n	d4de <__submore+0x36>
    d51e:	bf00      	nop

0000d520 <__swsetup_r>:
    d520:	b538      	push	{r3, r4, r5, lr}
    d522:	4b31      	ldr	r3, [pc, #196]	; (d5e8 <__swsetup_r+0xc8>)
    d524:	681b      	ldr	r3, [r3, #0]
    d526:	4605      	mov	r5, r0
    d528:	460c      	mov	r4, r1
    d52a:	b113      	cbz	r3, d532 <__swsetup_r+0x12>
    d52c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    d52e:	2a00      	cmp	r2, #0
    d530:	d04e      	beq.n	d5d0 <__swsetup_r+0xb0>
    d532:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    d536:	0718      	lsls	r0, r3, #28
    d538:	b29a      	uxth	r2, r3
    d53a:	d51c      	bpl.n	d576 <__swsetup_r+0x56>
    d53c:	6921      	ldr	r1, [r4, #16]
    d53e:	b329      	cbz	r1, d58c <__swsetup_r+0x6c>
    d540:	f012 0001 	ands.w	r0, r2, #1
    d544:	d007      	beq.n	d556 <__swsetup_r+0x36>
    d546:	2000      	movs	r0, #0
    d548:	60a0      	str	r0, [r4, #8]
    d54a:	6960      	ldr	r0, [r4, #20]
    d54c:	4240      	negs	r0, r0
    d54e:	61a0      	str	r0, [r4, #24]
    d550:	b139      	cbz	r1, d562 <__swsetup_r+0x42>
    d552:	2000      	movs	r0, #0
    d554:	bd38      	pop	{r3, r4, r5, pc}
    d556:	0795      	lsls	r5, r2, #30
    d558:	bf58      	it	pl
    d55a:	6960      	ldrpl	r0, [r4, #20]
    d55c:	60a0      	str	r0, [r4, #8]
    d55e:	2900      	cmp	r1, #0
    d560:	d1f7      	bne.n	d552 <__swsetup_r+0x32>
    d562:	0612      	lsls	r2, r2, #24
    d564:	bf58      	it	pl
    d566:	4608      	movpl	r0, r1
    d568:	d5f4      	bpl.n	d554 <__swsetup_r+0x34>
    d56a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d56e:	81a3      	strh	r3, [r4, #12]
    d570:	f04f 30ff 	mov.w	r0, #4294967295
    d574:	bd38      	pop	{r3, r4, r5, pc}
    d576:	06d1      	lsls	r1, r2, #27
    d578:	d52e      	bpl.n	d5d8 <__swsetup_r+0xb8>
    d57a:	0752      	lsls	r2, r2, #29
    d57c:	d414      	bmi.n	d5a8 <__swsetup_r+0x88>
    d57e:	6921      	ldr	r1, [r4, #16]
    d580:	f043 0308 	orr.w	r3, r3, #8
    d584:	81a3      	strh	r3, [r4, #12]
    d586:	b29a      	uxth	r2, r3
    d588:	2900      	cmp	r1, #0
    d58a:	d1d9      	bne.n	d540 <__swsetup_r+0x20>
    d58c:	f402 7020 	and.w	r0, r2, #640	; 0x280
    d590:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    d594:	d0d4      	beq.n	d540 <__swsetup_r+0x20>
    d596:	4621      	mov	r1, r4
    d598:	4628      	mov	r0, r5
    d59a:	f000 f977 	bl	d88c <__smakebuf_r>
    d59e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    d5a2:	6921      	ldr	r1, [r4, #16]
    d5a4:	b29a      	uxth	r2, r3
    d5a6:	e7cb      	b.n	d540 <__swsetup_r+0x20>
    d5a8:	6b21      	ldr	r1, [r4, #48]	; 0x30
    d5aa:	b151      	cbz	r1, d5c2 <__swsetup_r+0xa2>
    d5ac:	f104 0240 	add.w	r2, r4, #64	; 0x40
    d5b0:	4291      	cmp	r1, r2
    d5b2:	d004      	beq.n	d5be <__swsetup_r+0x9e>
    d5b4:	4628      	mov	r0, r5
    d5b6:	f7f8 fb11 	bl	5bdc <_free_r>
    d5ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    d5be:	2200      	movs	r2, #0
    d5c0:	6322      	str	r2, [r4, #48]	; 0x30
    d5c2:	6921      	ldr	r1, [r4, #16]
    d5c4:	2200      	movs	r2, #0
    d5c6:	e9c4 1200 	strd	r1, r2, [r4]
    d5ca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    d5ce:	e7d7      	b.n	d580 <__swsetup_r+0x60>
    d5d0:	4618      	mov	r0, r3
    d5d2:	f7f7 fd6d 	bl	50b0 <__sinit>
    d5d6:	e7ac      	b.n	d532 <__swsetup_r+0x12>
    d5d8:	2209      	movs	r2, #9
    d5da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d5de:	602a      	str	r2, [r5, #0]
    d5e0:	f04f 30ff 	mov.w	r0, #4294967295
    d5e4:	81a3      	strh	r3, [r4, #12]
    d5e6:	bd38      	pop	{r3, r4, r5, pc}
    d5e8:	200081e4 	.word	0x200081e4

0000d5ec <__fputwc>:
    d5ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d5f0:	b082      	sub	sp, #8
    d5f2:	4682      	mov	sl, r0
    d5f4:	4688      	mov	r8, r1
    d5f6:	4614      	mov	r4, r2
    d5f8:	f7f8 f80c 	bl	5614 <__locale_mb_cur_max>
    d5fc:	2801      	cmp	r0, #1
    d5fe:	d103      	bne.n	d608 <__fputwc+0x1c>
    d600:	f108 33ff 	add.w	r3, r8, #4294967295
    d604:	2bfe      	cmp	r3, #254	; 0xfe
    d606:	d936      	bls.n	d676 <__fputwc+0x8a>
    d608:	f10d 0904 	add.w	r9, sp, #4
    d60c:	4642      	mov	r2, r8
    d60e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
    d612:	4649      	mov	r1, r9
    d614:	4650      	mov	r0, sl
    d616:	f7fe fb29 	bl	bc6c <_wcrtomb_r>
    d61a:	1c42      	adds	r2, r0, #1
    d61c:	4606      	mov	r6, r0
    d61e:	d032      	beq.n	d686 <__fputwc+0x9a>
    d620:	b320      	cbz	r0, d66c <__fputwc+0x80>
    d622:	f89d c004 	ldrb.w	ip, [sp, #4]
    d626:	2500      	movs	r5, #0
    d628:	e009      	b.n	d63e <__fputwc+0x52>
    d62a:	6823      	ldr	r3, [r4, #0]
    d62c:	1c5a      	adds	r2, r3, #1
    d62e:	6022      	str	r2, [r4, #0]
    d630:	f883 c000 	strb.w	ip, [r3]
    d634:	3501      	adds	r5, #1
    d636:	42b5      	cmp	r5, r6
    d638:	d218      	bcs.n	d66c <__fputwc+0x80>
    d63a:	f819 cf01 	ldrb.w	ip, [r9, #1]!
    d63e:	68a3      	ldr	r3, [r4, #8]
    d640:	3b01      	subs	r3, #1
    d642:	2b00      	cmp	r3, #0
    d644:	60a3      	str	r3, [r4, #8]
    d646:	daf0      	bge.n	d62a <__fputwc+0x3e>
    d648:	69a7      	ldr	r7, [r4, #24]
    d64a:	42bb      	cmp	r3, r7
    d64c:	4661      	mov	r1, ip
    d64e:	4622      	mov	r2, r4
    d650:	4650      	mov	r0, sl
    d652:	db02      	blt.n	d65a <__fputwc+0x6e>
    d654:	f1bc 0f0a 	cmp.w	ip, #10
    d658:	d1e7      	bne.n	d62a <__fputwc+0x3e>
    d65a:	f000 f983 	bl	d964 <__swbuf_r>
    d65e:	1c43      	adds	r3, r0, #1
    d660:	d1e8      	bne.n	d634 <__fputwc+0x48>
    d662:	4606      	mov	r6, r0
    d664:	4630      	mov	r0, r6
    d666:	b002      	add	sp, #8
    d668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d66c:	4646      	mov	r6, r8
    d66e:	4630      	mov	r0, r6
    d670:	b002      	add	sp, #8
    d672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d676:	fa5f fc88 	uxtb.w	ip, r8
    d67a:	f88d c004 	strb.w	ip, [sp, #4]
    d67e:	4606      	mov	r6, r0
    d680:	f10d 0904 	add.w	r9, sp, #4
    d684:	e7cf      	b.n	d626 <__fputwc+0x3a>
    d686:	89a3      	ldrh	r3, [r4, #12]
    d688:	4630      	mov	r0, r6
    d68a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d68e:	81a3      	strh	r3, [r4, #12]
    d690:	b002      	add	sp, #8
    d692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d696:	bf00      	nop

0000d698 <_fputwc_r>:
    d698:	b530      	push	{r4, r5, lr}
    d69a:	6e53      	ldr	r3, [r2, #100]	; 0x64
    d69c:	f013 0f01 	tst.w	r3, #1
    d6a0:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    d6a4:	4614      	mov	r4, r2
    d6a6:	b083      	sub	sp, #12
    d6a8:	4605      	mov	r5, r0
    d6aa:	b29a      	uxth	r2, r3
    d6ac:	d101      	bne.n	d6b2 <_fputwc_r+0x1a>
    d6ae:	0598      	lsls	r0, r3, #22
    d6b0:	d51c      	bpl.n	d6ec <_fputwc_r+0x54>
    d6b2:	0490      	lsls	r0, r2, #18
    d6b4:	d406      	bmi.n	d6c4 <_fputwc_r+0x2c>
    d6b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
    d6b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    d6bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    d6c0:	81a3      	strh	r3, [r4, #12]
    d6c2:	6662      	str	r2, [r4, #100]	; 0x64
    d6c4:	4622      	mov	r2, r4
    d6c6:	4628      	mov	r0, r5
    d6c8:	f7ff ff90 	bl	d5ec <__fputwc>
    d6cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
    d6ce:	07da      	lsls	r2, r3, #31
    d6d0:	4605      	mov	r5, r0
    d6d2:	d402      	bmi.n	d6da <_fputwc_r+0x42>
    d6d4:	89a3      	ldrh	r3, [r4, #12]
    d6d6:	059b      	lsls	r3, r3, #22
    d6d8:	d502      	bpl.n	d6e0 <_fputwc_r+0x48>
    d6da:	4628      	mov	r0, r5
    d6dc:	b003      	add	sp, #12
    d6de:	bd30      	pop	{r4, r5, pc}
    d6e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    d6e2:	f7f8 f833 	bl	574c <__retarget_lock_release_recursive>
    d6e6:	4628      	mov	r0, r5
    d6e8:	b003      	add	sp, #12
    d6ea:	bd30      	pop	{r4, r5, pc}
    d6ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
    d6ee:	9101      	str	r1, [sp, #4]
    d6f0:	f7f8 f82a 	bl	5748 <__retarget_lock_acquire_recursive>
    d6f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    d6f8:	9901      	ldr	r1, [sp, #4]
    d6fa:	b29a      	uxth	r2, r3
    d6fc:	e7d9      	b.n	d6b2 <_fputwc_r+0x1a>
    d6fe:	bf00      	nop

0000d700 <_wcsnrtombs_l>:
    d700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d704:	b08b      	sub	sp, #44	; 0x2c
    d706:	e9dd 8a15 	ldrd	r8, sl, [sp, #84]	; 0x54
    d70a:	9f14      	ldr	r7, [sp, #80]	; 0x50
    d70c:	9103      	str	r1, [sp, #12]
    d70e:	4681      	mov	r9, r0
    d710:	9205      	str	r2, [sp, #20]
    d712:	461e      	mov	r6, r3
    d714:	f1b8 0f00 	cmp.w	r8, #0
    d718:	d05c      	beq.n	d7d4 <_wcsnrtombs_l+0xd4>
    d71a:	9b03      	ldr	r3, [sp, #12]
    d71c:	2b00      	cmp	r3, #0
    d71e:	d05e      	beq.n	d7de <_wcsnrtombs_l+0xde>
    d720:	9b05      	ldr	r3, [sp, #20]
    d722:	681d      	ldr	r5, [r3, #0]
    d724:	2f00      	cmp	r7, #0
    d726:	d06a      	beq.n	d7fe <_wcsnrtombs_l+0xfe>
    d728:	1e74      	subs	r4, r6, #1
    d72a:	b34e      	cbz	r6, d780 <_wcsnrtombs_l+0x80>
    d72c:	9b03      	ldr	r3, [sp, #12]
    d72e:	9304      	str	r3, [sp, #16]
    d730:	3d04      	subs	r5, #4
    d732:	2600      	movs	r6, #0
    d734:	9501      	str	r5, [sp, #4]
    d736:	e00b      	b.n	d750 <_wcsnrtombs_l+0x50>
    d738:	9b03      	ldr	r3, [sp, #12]
    d73a:	bb2b      	cbnz	r3, d788 <_wcsnrtombs_l+0x88>
    d73c:	9b01      	ldr	r3, [sp, #4]
    d73e:	681a      	ldr	r2, [r3, #0]
    d740:	2a00      	cmp	r2, #0
    d742:	d03a      	beq.n	d7ba <_wcsnrtombs_l+0xba>
    d744:	45bc      	cmp	ip, r7
    d746:	d25c      	bcs.n	d802 <_wcsnrtombs_l+0x102>
    d748:	3c01      	subs	r4, #1
    d74a:	1c63      	adds	r3, r4, #1
    d74c:	4666      	mov	r6, ip
    d74e:	d017      	beq.n	d780 <_wcsnrtombs_l+0x80>
    d750:	f8d8 3000 	ldr.w	r3, [r8]
    d754:	9302      	str	r3, [sp, #8]
    d756:	9b01      	ldr	r3, [sp, #4]
    d758:	f8da 50e0 	ldr.w	r5, [sl, #224]	; 0xe0
    d75c:	f853 2f04 	ldr.w	r2, [r3, #4]!
    d760:	9301      	str	r3, [sp, #4]
    d762:	a907      	add	r1, sp, #28
    d764:	4643      	mov	r3, r8
    d766:	4648      	mov	r0, r9
    d768:	f8d8 b004 	ldr.w	fp, [r8, #4]
    d76c:	47a8      	blx	r5
    d76e:	1c42      	adds	r2, r0, #1
    d770:	d03a      	beq.n	d7e8 <_wcsnrtombs_l+0xe8>
    d772:	eb00 0c06 	add.w	ip, r0, r6
    d776:	45bc      	cmp	ip, r7
    d778:	d9de      	bls.n	d738 <_wcsnrtombs_l+0x38>
    d77a:	9b02      	ldr	r3, [sp, #8]
    d77c:	e9c8 3b00 	strd	r3, fp, [r8]
    d780:	4630      	mov	r0, r6
    d782:	b00b      	add	sp, #44	; 0x2c
    d784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d788:	2800      	cmp	r0, #0
    d78a:	dd0e      	ble.n	d7aa <_wcsnrtombs_l+0xaa>
    d78c:	9b04      	ldr	r3, [sp, #16]
    d78e:	9d01      	ldr	r5, [sp, #4]
    d790:	4418      	add	r0, r3
    d792:	1e5a      	subs	r2, r3, #1
    d794:	a907      	add	r1, sp, #28
    d796:	f100 3eff 	add.w	lr, r0, #4294967295
    d79a:	f811 3b01 	ldrb.w	r3, [r1], #1
    d79e:	f802 3f01 	strb.w	r3, [r2, #1]!
    d7a2:	4572      	cmp	r2, lr
    d7a4:	d1f9      	bne.n	d79a <_wcsnrtombs_l+0x9a>
    d7a6:	9501      	str	r5, [sp, #4]
    d7a8:	9004      	str	r0, [sp, #16]
    d7aa:	9b05      	ldr	r3, [sp, #20]
    d7ac:	681a      	ldr	r2, [r3, #0]
    d7ae:	3204      	adds	r2, #4
    d7b0:	601a      	str	r2, [r3, #0]
    d7b2:	9b01      	ldr	r3, [sp, #4]
    d7b4:	681a      	ldr	r2, [r3, #0]
    d7b6:	2a00      	cmp	r2, #0
    d7b8:	d1c4      	bne.n	d744 <_wcsnrtombs_l+0x44>
    d7ba:	9b03      	ldr	r3, [sp, #12]
    d7bc:	b10b      	cbz	r3, d7c2 <_wcsnrtombs_l+0xc2>
    d7be:	9b05      	ldr	r3, [sp, #20]
    d7c0:	601a      	str	r2, [r3, #0]
    d7c2:	f10c 36ff 	add.w	r6, ip, #4294967295
    d7c6:	2200      	movs	r2, #0
    d7c8:	4630      	mov	r0, r6
    d7ca:	f8c8 2000 	str.w	r2, [r8]
    d7ce:	b00b      	add	sp, #44	; 0x2c
    d7d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d7d4:	9b03      	ldr	r3, [sp, #12]
    d7d6:	f500 7886 	add.w	r8, r0, #268	; 0x10c
    d7da:	2b00      	cmp	r3, #0
    d7dc:	d1a0      	bne.n	d720 <_wcsnrtombs_l+0x20>
    d7de:	9b05      	ldr	r3, [sp, #20]
    d7e0:	f04f 37ff 	mov.w	r7, #4294967295
    d7e4:	681d      	ldr	r5, [r3, #0]
    d7e6:	e79f      	b.n	d728 <_wcsnrtombs_l+0x28>
    d7e8:	4606      	mov	r6, r0
    d7ea:	218a      	movs	r1, #138	; 0x8a
    d7ec:	2200      	movs	r2, #0
    d7ee:	4630      	mov	r0, r6
    d7f0:	f8c9 1000 	str.w	r1, [r9]
    d7f4:	f8c8 2000 	str.w	r2, [r8]
    d7f8:	b00b      	add	sp, #44	; 0x2c
    d7fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d7fe:	463e      	mov	r6, r7
    d800:	e7be      	b.n	d780 <_wcsnrtombs_l+0x80>
    d802:	4666      	mov	r6, ip
    d804:	e7bc      	b.n	d780 <_wcsnrtombs_l+0x80>
    d806:	bf00      	nop

0000d808 <_wcsnrtombs_r>:
    d808:	b510      	push	{r4, lr}
    d80a:	b084      	sub	sp, #16
    d80c:	4c05      	ldr	r4, [pc, #20]	; (d824 <_wcsnrtombs_r+0x1c>)
    d80e:	9806      	ldr	r0, [sp, #24]
    d810:	9000      	str	r0, [sp, #0]
    d812:	9807      	ldr	r0, [sp, #28]
    d814:	9001      	str	r0, [sp, #4]
    d816:	4804      	ldr	r0, [pc, #16]	; (d828 <_wcsnrtombs_r+0x20>)
    d818:	6800      	ldr	r0, [r0, #0]
    d81a:	9402      	str	r4, [sp, #8]
    d81c:	f7ff ff70 	bl	d700 <_wcsnrtombs_l>
    d820:	b004      	add	sp, #16
    d822:	bd10      	pop	{r4, pc}
    d824:	20007c5c 	.word	0x20007c5c
    d828:	200081e4 	.word	0x200081e4

0000d82c <category>:
    d82c:	4b15      	ldr	r3, [pc, #84]	; (d884 <category+0x58>)
    d82e:	4298      	cmp	r0, r3
    d830:	d823      	bhi.n	d87a <category+0x4e>
    d832:	b570      	push	{r4, r5, r6, lr}
    d834:	4e14      	ldr	r6, [pc, #80]	; (d888 <category+0x5c>)
    d836:	f04f 0e00 	mov.w	lr, #0
    d83a:	f640 04db 	movw	r4, #2267	; 0x8db
    d83e:	e003      	b.n	d848 <category+0x1c>
    d840:	f102 0e01 	add.w	lr, r2, #1
    d844:	45a6      	cmp	lr, r4
    d846:	dc16      	bgt.n	d876 <category+0x4a>
    d848:	eb04 020e 	add.w	r2, r4, lr
    d84c:	f022 0301 	bic.w	r3, r2, #1
    d850:	eb03 0362 	add.w	r3, r3, r2, asr #1
    d854:	eb06 0343 	add.w	r3, r6, r3, lsl #1
    d858:	1052      	asrs	r2, r2, #1
    d85a:	7859      	ldrb	r1, [r3, #1]
    d85c:	885d      	ldrh	r5, [r3, #2]
    d85e:	f8b3 c004 	ldrh.w	ip, [r3, #4]
    d862:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
    d866:	448c      	add	ip, r1
    d868:	4560      	cmp	r0, ip
    d86a:	d8e9      	bhi.n	d840 <category+0x14>
    d86c:	4288      	cmp	r0, r1
    d86e:	d206      	bcs.n	d87e <category+0x52>
    d870:	1e54      	subs	r4, r2, #1
    d872:	45a6      	cmp	lr, r4
    d874:	dde8      	ble.n	d848 <category+0x1c>
    d876:	20ff      	movs	r0, #255	; 0xff
    d878:	bd70      	pop	{r4, r5, r6, pc}
    d87a:	20ff      	movs	r0, #255	; 0xff
    d87c:	4770      	bx	lr
    d87e:	7818      	ldrb	r0, [r3, #0]
    d880:	bd70      	pop	{r4, r5, r6, pc}
    d882:	bf00      	nop
    d884:	000e01ef 	.word	0x000e01ef
    d888:	200022b8 	.word	0x200022b8

0000d88c <__smakebuf_r>:
    d88c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d890:	898b      	ldrh	r3, [r1, #12]
    d892:	460c      	mov	r4, r1
    d894:	0799      	lsls	r1, r3, #30
    d896:	b096      	sub	sp, #88	; 0x58
    d898:	d508      	bpl.n	d8ac <__smakebuf_r+0x20>
    d89a:	f104 0343 	add.w	r3, r4, #67	; 0x43
    d89e:	2201      	movs	r2, #1
    d8a0:	e9c4 3204 	strd	r3, r2, [r4, #16]
    d8a4:	6023      	str	r3, [r4, #0]
    d8a6:	b016      	add	sp, #88	; 0x58
    d8a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d8ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    d8b0:	2900      	cmp	r1, #0
    d8b2:	4606      	mov	r6, r0
    d8b4:	db25      	blt.n	d902 <__smakebuf_r+0x76>
    d8b6:	466a      	mov	r2, sp
    d8b8:	f000 f8ac 	bl	da14 <_fstat_r>
    d8bc:	2800      	cmp	r0, #0
    d8be:	db1f      	blt.n	d900 <__smakebuf_r+0x74>
    d8c0:	9d01      	ldr	r5, [sp, #4]
    d8c2:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
    d8c6:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
    d8ca:	fab5 f585 	clz	r5, r5
    d8ce:	f44f 6880 	mov.w	r8, #1024	; 0x400
    d8d2:	096d      	lsrs	r5, r5, #5
    d8d4:	f44f 6700 	mov.w	r7, #2048	; 0x800
    d8d8:	4641      	mov	r1, r8
    d8da:	4630      	mov	r0, r6
    d8dc:	f7f5 febc 	bl	3658 <_malloc_r>
    d8e0:	b1e0      	cbz	r0, d91c <__smakebuf_r+0x90>
    d8e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    d8e6:	f8c4 8014 	str.w	r8, [r4, #20]
    d8ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d8ee:	6020      	str	r0, [r4, #0]
    d8f0:	6120      	str	r0, [r4, #16]
    d8f2:	81a3      	strh	r3, [r4, #12]
    d8f4:	bb35      	cbnz	r5, d944 <__smakebuf_r+0xb8>
    d8f6:	433b      	orrs	r3, r7
    d8f8:	81a3      	strh	r3, [r4, #12]
    d8fa:	b016      	add	sp, #88	; 0x58
    d8fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d900:	89a3      	ldrh	r3, [r4, #12]
    d902:	f013 0580 	ands.w	r5, r3, #128	; 0x80
    d906:	d019      	beq.n	d93c <__smakebuf_r+0xb0>
    d908:	f04f 0840 	mov.w	r8, #64	; 0x40
    d90c:	2500      	movs	r5, #0
    d90e:	4641      	mov	r1, r8
    d910:	4630      	mov	r0, r6
    d912:	462f      	mov	r7, r5
    d914:	f7f5 fea0 	bl	3658 <_malloc_r>
    d918:	2800      	cmp	r0, #0
    d91a:	d1e2      	bne.n	d8e2 <__smakebuf_r+0x56>
    d91c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    d920:	059a      	lsls	r2, r3, #22
    d922:	d4c0      	bmi.n	d8a6 <__smakebuf_r+0x1a>
    d924:	f023 0303 	bic.w	r3, r3, #3
    d928:	f104 0243 	add.w	r2, r4, #67	; 0x43
    d92c:	f043 0302 	orr.w	r3, r3, #2
    d930:	2101      	movs	r1, #1
    d932:	e9c4 2104 	strd	r2, r1, [r4, #16]
    d936:	81a3      	strh	r3, [r4, #12]
    d938:	6022      	str	r2, [r4, #0]
    d93a:	e7b4      	b.n	d8a6 <__smakebuf_r+0x1a>
    d93c:	f44f 6880 	mov.w	r8, #1024	; 0x400
    d940:	462f      	mov	r7, r5
    d942:	e7c9      	b.n	d8d8 <__smakebuf_r+0x4c>
    d944:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    d948:	4630      	mov	r0, r6
    d94a:	f000 f879 	bl	da40 <_isatty_r>
    d94e:	b910      	cbnz	r0, d956 <__smakebuf_r+0xca>
    d950:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    d954:	e7cf      	b.n	d8f6 <__smakebuf_r+0x6a>
    d956:	89a3      	ldrh	r3, [r4, #12]
    d958:	f023 0303 	bic.w	r3, r3, #3
    d95c:	f043 0301 	orr.w	r3, r3, #1
    d960:	b21b      	sxth	r3, r3
    d962:	e7c8      	b.n	d8f6 <__smakebuf_r+0x6a>

0000d964 <__swbuf_r>:
    d964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d966:	460d      	mov	r5, r1
    d968:	4614      	mov	r4, r2
    d96a:	4606      	mov	r6, r0
    d96c:	b110      	cbz	r0, d974 <__swbuf_r+0x10>
    d96e:	6b43      	ldr	r3, [r0, #52]	; 0x34
    d970:	2b00      	cmp	r3, #0
    d972:	d04c      	beq.n	da0e <__swbuf_r+0xaa>
    d974:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    d978:	69a3      	ldr	r3, [r4, #24]
    d97a:	60a3      	str	r3, [r4, #8]
    d97c:	0717      	lsls	r7, r2, #28
    d97e:	b290      	uxth	r0, r2
    d980:	d51b      	bpl.n	d9ba <__swbuf_r+0x56>
    d982:	6923      	ldr	r3, [r4, #16]
    d984:	b1cb      	cbz	r3, d9ba <__swbuf_r+0x56>
    d986:	b2ed      	uxtb	r5, r5
    d988:	0481      	lsls	r1, r0, #18
    d98a:	462f      	mov	r7, r5
    d98c:	d522      	bpl.n	d9d4 <__swbuf_r+0x70>
    d98e:	6822      	ldr	r2, [r4, #0]
    d990:	6961      	ldr	r1, [r4, #20]
    d992:	1ad3      	subs	r3, r2, r3
    d994:	4299      	cmp	r1, r3
    d996:	dd29      	ble.n	d9ec <__swbuf_r+0x88>
    d998:	3301      	adds	r3, #1
    d99a:	68a1      	ldr	r1, [r4, #8]
    d99c:	3901      	subs	r1, #1
    d99e:	60a1      	str	r1, [r4, #8]
    d9a0:	1c51      	adds	r1, r2, #1
    d9a2:	6021      	str	r1, [r4, #0]
    d9a4:	7015      	strb	r5, [r2, #0]
    d9a6:	6962      	ldr	r2, [r4, #20]
    d9a8:	429a      	cmp	r2, r3
    d9aa:	d027      	beq.n	d9fc <__swbuf_r+0x98>
    d9ac:	89a3      	ldrh	r3, [r4, #12]
    d9ae:	07db      	lsls	r3, r3, #31
    d9b0:	d501      	bpl.n	d9b6 <__swbuf_r+0x52>
    d9b2:	2d0a      	cmp	r5, #10
    d9b4:	d022      	beq.n	d9fc <__swbuf_r+0x98>
    d9b6:	4638      	mov	r0, r7
    d9b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d9ba:	4621      	mov	r1, r4
    d9bc:	4630      	mov	r0, r6
    d9be:	f7ff fdaf 	bl	d520 <__swsetup_r>
    d9c2:	bb08      	cbnz	r0, da08 <__swbuf_r+0xa4>
    d9c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    d9c8:	6923      	ldr	r3, [r4, #16]
    d9ca:	b290      	uxth	r0, r2
    d9cc:	b2ed      	uxtb	r5, r5
    d9ce:	0481      	lsls	r1, r0, #18
    d9d0:	462f      	mov	r7, r5
    d9d2:	d4dc      	bmi.n	d98e <__swbuf_r+0x2a>
    d9d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    d9d8:	81a2      	strh	r2, [r4, #12]
    d9da:	6e62      	ldr	r2, [r4, #100]	; 0x64
    d9dc:	6961      	ldr	r1, [r4, #20]
    d9de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
    d9e2:	6662      	str	r2, [r4, #100]	; 0x64
    d9e4:	6822      	ldr	r2, [r4, #0]
    d9e6:	1ad3      	subs	r3, r2, r3
    d9e8:	4299      	cmp	r1, r3
    d9ea:	dcd5      	bgt.n	d998 <__swbuf_r+0x34>
    d9ec:	4621      	mov	r1, r4
    d9ee:	4630      	mov	r0, r6
    d9f0:	f7fc fe30 	bl	a654 <_fflush_r>
    d9f4:	b940      	cbnz	r0, da08 <__swbuf_r+0xa4>
    d9f6:	6822      	ldr	r2, [r4, #0]
    d9f8:	2301      	movs	r3, #1
    d9fa:	e7ce      	b.n	d99a <__swbuf_r+0x36>
    d9fc:	4621      	mov	r1, r4
    d9fe:	4630      	mov	r0, r6
    da00:	f7fc fe28 	bl	a654 <_fflush_r>
    da04:	2800      	cmp	r0, #0
    da06:	d0d6      	beq.n	d9b6 <__swbuf_r+0x52>
    da08:	f04f 37ff 	mov.w	r7, #4294967295
    da0c:	e7d3      	b.n	d9b6 <__swbuf_r+0x52>
    da0e:	f7f7 fb4f 	bl	50b0 <__sinit>
    da12:	e7af      	b.n	d974 <__swbuf_r+0x10>

0000da14 <_fstat_r>:
    da14:	b570      	push	{r4, r5, r6, lr}
    da16:	460c      	mov	r4, r1
    da18:	4d08      	ldr	r5, [pc, #32]	; (da3c <_fstat_r+0x28>)
    da1a:	4603      	mov	r3, r0
    da1c:	2600      	movs	r6, #0
    da1e:	4620      	mov	r0, r4
    da20:	4611      	mov	r1, r2
    da22:	461c      	mov	r4, r3
    da24:	602e      	str	r6, [r5, #0]
    da26:	f7f4 f95b 	bl	1ce0 <_fstat>
    da2a:	1c43      	adds	r3, r0, #1
    da2c:	d000      	beq.n	da30 <_fstat_r+0x1c>
    da2e:	bd70      	pop	{r4, r5, r6, pc}
    da30:	682b      	ldr	r3, [r5, #0]
    da32:	2b00      	cmp	r3, #0
    da34:	d0fb      	beq.n	da2e <_fstat_r+0x1a>
    da36:	6023      	str	r3, [r4, #0]
    da38:	bd70      	pop	{r4, r5, r6, pc}
    da3a:	bf00      	nop
    da3c:	20008c34 	.word	0x20008c34

0000da40 <_isatty_r>:
    da40:	b538      	push	{r3, r4, r5, lr}
    da42:	4d07      	ldr	r5, [pc, #28]	; (da60 <_isatty_r+0x20>)
    da44:	2200      	movs	r2, #0
    da46:	4604      	mov	r4, r0
    da48:	4608      	mov	r0, r1
    da4a:	602a      	str	r2, [r5, #0]
    da4c:	f7f4 f94e 	bl	1cec <_isatty>
    da50:	1c43      	adds	r3, r0, #1
    da52:	d000      	beq.n	da56 <_isatty_r+0x16>
    da54:	bd38      	pop	{r3, r4, r5, pc}
    da56:	682b      	ldr	r3, [r5, #0]
    da58:	2b00      	cmp	r3, #0
    da5a:	d0fb      	beq.n	da54 <_isatty_r+0x14>
    da5c:	6023      	str	r3, [r4, #0]
    da5e:	bd38      	pop	{r3, r4, r5, pc}
    da60:	20008c34 	.word	0x20008c34

0000da64 <__aeabi_drsub>:
    da64:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    da68:	e002      	b.n	da70 <__adddf3>
    da6a:	bf00      	nop

0000da6c <__aeabi_dsub>:
    da6c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000da70 <__adddf3>:
    da70:	b530      	push	{r4, r5, lr}
    da72:	ea4f 0441 	mov.w	r4, r1, lsl #1
    da76:	ea4f 0543 	mov.w	r5, r3, lsl #1
    da7a:	ea94 0f05 	teq	r4, r5
    da7e:	bf08      	it	eq
    da80:	ea90 0f02 	teqeq	r0, r2
    da84:	bf1f      	itttt	ne
    da86:	ea54 0c00 	orrsne.w	ip, r4, r0
    da8a:	ea55 0c02 	orrsne.w	ip, r5, r2
    da8e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    da92:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    da96:	f000 80e2 	beq.w	dc5e <__adddf3+0x1ee>
    da9a:	ea4f 5454 	mov.w	r4, r4, lsr #21
    da9e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    daa2:	bfb8      	it	lt
    daa4:	426d      	neglt	r5, r5
    daa6:	dd0c      	ble.n	dac2 <__adddf3+0x52>
    daa8:	442c      	add	r4, r5
    daaa:	ea80 0202 	eor.w	r2, r0, r2
    daae:	ea81 0303 	eor.w	r3, r1, r3
    dab2:	ea82 0000 	eor.w	r0, r2, r0
    dab6:	ea83 0101 	eor.w	r1, r3, r1
    daba:	ea80 0202 	eor.w	r2, r0, r2
    dabe:	ea81 0303 	eor.w	r3, r1, r3
    dac2:	2d36      	cmp	r5, #54	; 0x36
    dac4:	bf88      	it	hi
    dac6:	bd30      	pophi	{r4, r5, pc}
    dac8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    dacc:	ea4f 3101 	mov.w	r1, r1, lsl #12
    dad0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    dad4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    dad8:	d002      	beq.n	dae0 <__adddf3+0x70>
    dada:	4240      	negs	r0, r0
    dadc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    dae0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    dae4:	ea4f 3303 	mov.w	r3, r3, lsl #12
    dae8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    daec:	d002      	beq.n	daf4 <__adddf3+0x84>
    daee:	4252      	negs	r2, r2
    daf0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    daf4:	ea94 0f05 	teq	r4, r5
    daf8:	f000 80a7 	beq.w	dc4a <__adddf3+0x1da>
    dafc:	f1a4 0401 	sub.w	r4, r4, #1
    db00:	f1d5 0e20 	rsbs	lr, r5, #32
    db04:	db0d      	blt.n	db22 <__adddf3+0xb2>
    db06:	fa02 fc0e 	lsl.w	ip, r2, lr
    db0a:	fa22 f205 	lsr.w	r2, r2, r5
    db0e:	1880      	adds	r0, r0, r2
    db10:	f141 0100 	adc.w	r1, r1, #0
    db14:	fa03 f20e 	lsl.w	r2, r3, lr
    db18:	1880      	adds	r0, r0, r2
    db1a:	fa43 f305 	asr.w	r3, r3, r5
    db1e:	4159      	adcs	r1, r3
    db20:	e00e      	b.n	db40 <__adddf3+0xd0>
    db22:	f1a5 0520 	sub.w	r5, r5, #32
    db26:	f10e 0e20 	add.w	lr, lr, #32
    db2a:	2a01      	cmp	r2, #1
    db2c:	fa03 fc0e 	lsl.w	ip, r3, lr
    db30:	bf28      	it	cs
    db32:	f04c 0c02 	orrcs.w	ip, ip, #2
    db36:	fa43 f305 	asr.w	r3, r3, r5
    db3a:	18c0      	adds	r0, r0, r3
    db3c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    db40:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    db44:	d507      	bpl.n	db56 <__adddf3+0xe6>
    db46:	f04f 0e00 	mov.w	lr, #0
    db4a:	f1dc 0c00 	rsbs	ip, ip, #0
    db4e:	eb7e 0000 	sbcs.w	r0, lr, r0
    db52:	eb6e 0101 	sbc.w	r1, lr, r1
    db56:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    db5a:	d31b      	bcc.n	db94 <__adddf3+0x124>
    db5c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    db60:	d30c      	bcc.n	db7c <__adddf3+0x10c>
    db62:	0849      	lsrs	r1, r1, #1
    db64:	ea5f 0030 	movs.w	r0, r0, rrx
    db68:	ea4f 0c3c 	mov.w	ip, ip, rrx
    db6c:	f104 0401 	add.w	r4, r4, #1
    db70:	ea4f 5244 	mov.w	r2, r4, lsl #21
    db74:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    db78:	f080 809a 	bcs.w	dcb0 <__adddf3+0x240>
    db7c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    db80:	bf08      	it	eq
    db82:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    db86:	f150 0000 	adcs.w	r0, r0, #0
    db8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    db8e:	ea41 0105 	orr.w	r1, r1, r5
    db92:	bd30      	pop	{r4, r5, pc}
    db94:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    db98:	4140      	adcs	r0, r0
    db9a:	eb41 0101 	adc.w	r1, r1, r1
    db9e:	3c01      	subs	r4, #1
    dba0:	bf28      	it	cs
    dba2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    dba6:	d2e9      	bcs.n	db7c <__adddf3+0x10c>
    dba8:	f091 0f00 	teq	r1, #0
    dbac:	bf04      	itt	eq
    dbae:	4601      	moveq	r1, r0
    dbb0:	2000      	moveq	r0, #0
    dbb2:	fab1 f381 	clz	r3, r1
    dbb6:	bf08      	it	eq
    dbb8:	3320      	addeq	r3, #32
    dbba:	f1a3 030b 	sub.w	r3, r3, #11
    dbbe:	f1b3 0220 	subs.w	r2, r3, #32
    dbc2:	da0c      	bge.n	dbde <__adddf3+0x16e>
    dbc4:	320c      	adds	r2, #12
    dbc6:	dd08      	ble.n	dbda <__adddf3+0x16a>
    dbc8:	f102 0c14 	add.w	ip, r2, #20
    dbcc:	f1c2 020c 	rsb	r2, r2, #12
    dbd0:	fa01 f00c 	lsl.w	r0, r1, ip
    dbd4:	fa21 f102 	lsr.w	r1, r1, r2
    dbd8:	e00c      	b.n	dbf4 <__adddf3+0x184>
    dbda:	f102 0214 	add.w	r2, r2, #20
    dbde:	bfd8      	it	le
    dbe0:	f1c2 0c20 	rsble	ip, r2, #32
    dbe4:	fa01 f102 	lsl.w	r1, r1, r2
    dbe8:	fa20 fc0c 	lsr.w	ip, r0, ip
    dbec:	bfdc      	itt	le
    dbee:	ea41 010c 	orrle.w	r1, r1, ip
    dbf2:	4090      	lslle	r0, r2
    dbf4:	1ae4      	subs	r4, r4, r3
    dbf6:	bfa2      	ittt	ge
    dbf8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    dbfc:	4329      	orrge	r1, r5
    dbfe:	bd30      	popge	{r4, r5, pc}
    dc00:	ea6f 0404 	mvn.w	r4, r4
    dc04:	3c1f      	subs	r4, #31
    dc06:	da1c      	bge.n	dc42 <__adddf3+0x1d2>
    dc08:	340c      	adds	r4, #12
    dc0a:	dc0e      	bgt.n	dc2a <__adddf3+0x1ba>
    dc0c:	f104 0414 	add.w	r4, r4, #20
    dc10:	f1c4 0220 	rsb	r2, r4, #32
    dc14:	fa20 f004 	lsr.w	r0, r0, r4
    dc18:	fa01 f302 	lsl.w	r3, r1, r2
    dc1c:	ea40 0003 	orr.w	r0, r0, r3
    dc20:	fa21 f304 	lsr.w	r3, r1, r4
    dc24:	ea45 0103 	orr.w	r1, r5, r3
    dc28:	bd30      	pop	{r4, r5, pc}
    dc2a:	f1c4 040c 	rsb	r4, r4, #12
    dc2e:	f1c4 0220 	rsb	r2, r4, #32
    dc32:	fa20 f002 	lsr.w	r0, r0, r2
    dc36:	fa01 f304 	lsl.w	r3, r1, r4
    dc3a:	ea40 0003 	orr.w	r0, r0, r3
    dc3e:	4629      	mov	r1, r5
    dc40:	bd30      	pop	{r4, r5, pc}
    dc42:	fa21 f004 	lsr.w	r0, r1, r4
    dc46:	4629      	mov	r1, r5
    dc48:	bd30      	pop	{r4, r5, pc}
    dc4a:	f094 0f00 	teq	r4, #0
    dc4e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    dc52:	bf06      	itte	eq
    dc54:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    dc58:	3401      	addeq	r4, #1
    dc5a:	3d01      	subne	r5, #1
    dc5c:	e74e      	b.n	dafc <__adddf3+0x8c>
    dc5e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    dc62:	bf18      	it	ne
    dc64:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    dc68:	d029      	beq.n	dcbe <__adddf3+0x24e>
    dc6a:	ea94 0f05 	teq	r4, r5
    dc6e:	bf08      	it	eq
    dc70:	ea90 0f02 	teqeq	r0, r2
    dc74:	d005      	beq.n	dc82 <__adddf3+0x212>
    dc76:	ea54 0c00 	orrs.w	ip, r4, r0
    dc7a:	bf04      	itt	eq
    dc7c:	4619      	moveq	r1, r3
    dc7e:	4610      	moveq	r0, r2
    dc80:	bd30      	pop	{r4, r5, pc}
    dc82:	ea91 0f03 	teq	r1, r3
    dc86:	bf1e      	ittt	ne
    dc88:	2100      	movne	r1, #0
    dc8a:	2000      	movne	r0, #0
    dc8c:	bd30      	popne	{r4, r5, pc}
    dc8e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    dc92:	d105      	bne.n	dca0 <__adddf3+0x230>
    dc94:	0040      	lsls	r0, r0, #1
    dc96:	4149      	adcs	r1, r1
    dc98:	bf28      	it	cs
    dc9a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    dc9e:	bd30      	pop	{r4, r5, pc}
    dca0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    dca4:	bf3c      	itt	cc
    dca6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    dcaa:	bd30      	popcc	{r4, r5, pc}
    dcac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    dcb0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    dcb4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    dcb8:	f04f 0000 	mov.w	r0, #0
    dcbc:	bd30      	pop	{r4, r5, pc}
    dcbe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    dcc2:	bf1a      	itte	ne
    dcc4:	4619      	movne	r1, r3
    dcc6:	4610      	movne	r0, r2
    dcc8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    dccc:	bf1c      	itt	ne
    dcce:	460b      	movne	r3, r1
    dcd0:	4602      	movne	r2, r0
    dcd2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    dcd6:	bf06      	itte	eq
    dcd8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    dcdc:	ea91 0f03 	teqeq	r1, r3
    dce0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    dce4:	bd30      	pop	{r4, r5, pc}
    dce6:	bf00      	nop

0000dce8 <__aeabi_ui2d>:
    dce8:	f090 0f00 	teq	r0, #0
    dcec:	bf04      	itt	eq
    dcee:	2100      	moveq	r1, #0
    dcf0:	4770      	bxeq	lr
    dcf2:	b530      	push	{r4, r5, lr}
    dcf4:	f44f 6480 	mov.w	r4, #1024	; 0x400
    dcf8:	f104 0432 	add.w	r4, r4, #50	; 0x32
    dcfc:	f04f 0500 	mov.w	r5, #0
    dd00:	f04f 0100 	mov.w	r1, #0
    dd04:	e750      	b.n	dba8 <__adddf3+0x138>
    dd06:	bf00      	nop

0000dd08 <__aeabi_i2d>:
    dd08:	f090 0f00 	teq	r0, #0
    dd0c:	bf04      	itt	eq
    dd0e:	2100      	moveq	r1, #0
    dd10:	4770      	bxeq	lr
    dd12:	b530      	push	{r4, r5, lr}
    dd14:	f44f 6480 	mov.w	r4, #1024	; 0x400
    dd18:	f104 0432 	add.w	r4, r4, #50	; 0x32
    dd1c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    dd20:	bf48      	it	mi
    dd22:	4240      	negmi	r0, r0
    dd24:	f04f 0100 	mov.w	r1, #0
    dd28:	e73e      	b.n	dba8 <__adddf3+0x138>
    dd2a:	bf00      	nop

0000dd2c <__aeabi_f2d>:
    dd2c:	0042      	lsls	r2, r0, #1
    dd2e:	ea4f 01e2 	mov.w	r1, r2, asr #3
    dd32:	ea4f 0131 	mov.w	r1, r1, rrx
    dd36:	ea4f 7002 	mov.w	r0, r2, lsl #28
    dd3a:	bf1f      	itttt	ne
    dd3c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    dd40:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    dd44:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    dd48:	4770      	bxne	lr
    dd4a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    dd4e:	bf08      	it	eq
    dd50:	4770      	bxeq	lr
    dd52:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    dd56:	bf04      	itt	eq
    dd58:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    dd5c:	4770      	bxeq	lr
    dd5e:	b530      	push	{r4, r5, lr}
    dd60:	f44f 7460 	mov.w	r4, #896	; 0x380
    dd64:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    dd68:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    dd6c:	e71c      	b.n	dba8 <__adddf3+0x138>
    dd6e:	bf00      	nop

0000dd70 <__aeabi_ul2d>:
    dd70:	ea50 0201 	orrs.w	r2, r0, r1
    dd74:	bf08      	it	eq
    dd76:	4770      	bxeq	lr
    dd78:	b530      	push	{r4, r5, lr}
    dd7a:	f04f 0500 	mov.w	r5, #0
    dd7e:	e00a      	b.n	dd96 <__aeabi_l2d+0x16>

0000dd80 <__aeabi_l2d>:
    dd80:	ea50 0201 	orrs.w	r2, r0, r1
    dd84:	bf08      	it	eq
    dd86:	4770      	bxeq	lr
    dd88:	b530      	push	{r4, r5, lr}
    dd8a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    dd8e:	d502      	bpl.n	dd96 <__aeabi_l2d+0x16>
    dd90:	4240      	negs	r0, r0
    dd92:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    dd96:	f44f 6480 	mov.w	r4, #1024	; 0x400
    dd9a:	f104 0432 	add.w	r4, r4, #50	; 0x32
    dd9e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    dda2:	f43f aed8 	beq.w	db56 <__adddf3+0xe6>
    dda6:	f04f 0203 	mov.w	r2, #3
    ddaa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    ddae:	bf18      	it	ne
    ddb0:	3203      	addne	r2, #3
    ddb2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    ddb6:	bf18      	it	ne
    ddb8:	3203      	addne	r2, #3
    ddba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    ddbe:	f1c2 0320 	rsb	r3, r2, #32
    ddc2:	fa00 fc03 	lsl.w	ip, r0, r3
    ddc6:	fa20 f002 	lsr.w	r0, r0, r2
    ddca:	fa01 fe03 	lsl.w	lr, r1, r3
    ddce:	ea40 000e 	orr.w	r0, r0, lr
    ddd2:	fa21 f102 	lsr.w	r1, r1, r2
    ddd6:	4414      	add	r4, r2
    ddd8:	e6bd      	b.n	db56 <__adddf3+0xe6>
    ddda:	bf00      	nop

0000dddc <__aeabi_d2lz>:
    dddc:	b508      	push	{r3, lr}
    ddde:	4602      	mov	r2, r0
    dde0:	460b      	mov	r3, r1
    dde2:	ec43 2b17 	vmov	d7, r2, r3
    dde6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    ddea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ddee:	d403      	bmi.n	ddf8 <__aeabi_d2lz+0x1c>
    ddf0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    ddf4:	f000 b80c 	b.w	de10 <__aeabi_d2ulz>
    ddf8:	eeb1 7b47 	vneg.f64	d7, d7
    ddfc:	ec51 0b17 	vmov	r0, r1, d7
    de00:	f000 f806 	bl	de10 <__aeabi_d2ulz>
    de04:	4240      	negs	r0, r0
    de06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    de0a:	bd08      	pop	{r3, pc}
    de0c:	0000      	movs	r0, r0
	...

0000de10 <__aeabi_d2ulz>:
    de10:	ed9f 6b0b 	vldr	d6, [pc, #44]	; de40 <__aeabi_d2ulz+0x30>
    de14:	ec41 0b17 	vmov	d7, r0, r1
    de18:	ed9f 5b0b 	vldr	d5, [pc, #44]	; de48 <__aeabi_d2ulz+0x38>
    de1c:	ee27 6b06 	vmul.f64	d6, d7, d6
    de20:	eebc 6bc6 	vcvt.u32.f64	s12, d6
    de24:	eeb8 4b46 	vcvt.f64.u32	d4, s12
    de28:	eea4 7b45 	vfms.f64	d7, d4, d5
    de2c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    de30:	ee16 1a10 	vmov	r1, s12
    de34:	ee17 0a90 	vmov	r0, s15
    de38:	4770      	bx	lr
    de3a:	bf00      	nop
    de3c:	f3af 8000 	nop.w
    de40:	00000000 	.word	0x00000000
    de44:	3df00000 	.word	0x3df00000
    de48:	00000000 	.word	0x00000000
    de4c:	41f00000 	.word	0x41f00000

0000de50 <___reboot_Teensyduino__veneer>:
    de50:	f85f f000 	ldr.w	pc, [pc]	; de54 <___reboot_Teensyduino__veneer+0x4>
    de54:	60001d8d 	.word	0x60001d8d

0000de58 <___init_veneer>:
    de58:	f85f f000 	ldr.w	pc, [pc]	; de5c <___init_veneer+0x4>
    de5c:	60001e35 	.word	0x60001e35

Disassembly of section .fini:

0000de60 <_fini>:
    de60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    de62:	bf00      	nop
